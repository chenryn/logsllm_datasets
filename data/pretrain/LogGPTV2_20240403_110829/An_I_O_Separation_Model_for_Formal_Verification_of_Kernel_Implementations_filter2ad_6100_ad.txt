when n=0, kn=k0 satisﬁes all state invariants. In the induction
case, where ki transitions to ki+1 and i ∈ [0, n − 1], and ki
is assumed to fulﬁll all state invariants, ki+1 must fulﬁll all
state invariants due to property (1) of transitions.
Theorem 2 (Transition Properties).
If state kn is the resulting
state after application of a sequence of n transitions on state
k0 and k0 satisﬁes all state invariants, then all transitions in
the trace satisfy all transition constraints.
Proof Sketch. Proof by induction over n and apply the
induction hypothesis and lemmas for the transition properties.
Our proof relies on a set of axioms (formally deﬁned in
Dafny speciﬁcations) to represent common assumptions about
devices and drivers; see Appendix A-C.
D. Discussion: Late versus Early Authorization
Authorization of all I/O transfers based on transitive-closure
computation is necessary to accommodate hardware with
inadequate I/O authorization; i.e., for the model to be hardware
agnostic. This also shows how the (un)availability of adequate
I/O hardware can impact a system’s security and performance.
A typical system with I/O hardware for access authorization
supports what we call late authorization: the I/O kernel autho-
rizes all direct transfers at the time they happen. Late autho-
rization is not possible with inadequate I/O hardware; e.g., the
indirect accesses in Figure 2 (b). Instead, conservative early
authorization where the kernel computes the transitive-closure
and rejects transfers that enables future cross-partition accesses
before the access really happens is needed. It may deny some
legitimate transfers that appear to violate I/O separation in
some traces that may not occur in a given runtime execution
session. However, conservative authorization is sound: it never
misses a transfer that might leave the system in a vulnerable
state. This is because the transitive closure outputs all potential
TD states whereas actual execution traces of I/O operations
may yield transfers that reach only a subset of these states.
Naturally,
if I/O transfer authorization is performed early,
without the beneﬁt of examining all and only actual execution
traces starting in a TD state, then it has no choice but to deny
all potentially insecure I/O transfers which could be issued in
that TD state. For instance, in Example 2 and Figure 2(b), the
write from device i to h doesn’t mean that device h will write
to j, which would violate separation, in the future. However,
authorization without adequate I/O hardware support needs to
stop this write early; otherwise, it invites successful attacks.
In short, late authorization is always sound and complete
whereas early authorization, while always sound, can be
incomplete.
V. A CONCRETE I/O MODEL
We describe the veriﬁed reﬁnement of the abstract I/O
separation model to obtain a concrete I/O model, which is
further reﬁned to obtain the Wimpy kernel design.
A. Isolation and Device Policies
This concrete I/O model makes explicit
its policy for
separating transfers of isolated (green) applications from those
of untrusted (red) OS and applications using I/O hardware au-
thorization and speciﬁc ephemeral-device activation policies.
Red-Green I/O Partitions. The red-green I/O separation
policy allows untrusted (red) OS drivers to run and access
all their devices in an untrusted (red) I/O partition; aka., the
“red partition”. When an isolated green application requires
I/O separation on-demand, the I/O kernel creates a new I/O
partition for its drivers, aka., a “green partition,” deactivates
the required devices from the red partition, and activates them
into the green partition, along with the drivers and necessary
external objects. Once the isolated application ﬁnishes its
execution, it invokes the I/O kernel to deactivate its drivers,
external objects and devices, activates corresponding devices
in the red partition, and destroys the green partition. The I/O
kernel may create multiple isolated green partitions to enforce
I/O separation for multiple isolated applications, while only
one red partition exists. The red partition must exist in this
on-demand concrete separation model, because the untrusted
(red) OS and applications run ﬁrst, before loading the I/O
kernel to run security-sensitive green applications (often by a
micro-hypervisor or micro-kernel).
Ephemeral Devices. Ephemeral devices are created by mul-
tiplexing shared physical devices to create the illusion of
separate physical devices. For example, an I/O kernel can
multiplex a shared bus controller to create separate ephemeral
devices [21]. Different I/O kernels implement different policies
for ephemeral-device activation. This concrete model enforces
the separation policy that a physical device and its mapped
ephemeral devices must not be active at
the same time.
The creation of separate ephemeral devices enables secure
multiplexing of physical devices, but does not address I/O
separation; vulnerabilities shown in Section II still persist.
Ephemeral differ from virtual devices in several ways.
For example, unlike virtual devices [43], they have a short
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
579
lifetime, as short as a few I/O transfers. They often provide
minimal functionality required by isolated drivers, whereas
virtual devices aim to provide rich functionality to support
OS and applications. Unlike virtual devices, whose device
activation policy is uniform across different VMs, ephemeral-
device activation depends on the types of physical devices they
multiplex.
I/O Policies. This concrete model enforces different I/O
transfer policies for drivers and devices in different parti-
tions, reﬂecting differences in the underlying authorization
mechanisms. For example, by default, drivers of a green
partition (green drivers) can write to external TDs of devices
associated with that partition, which allows the (ephemeral)
bus controllers conﬁgured by green drivers to read these TDs
and issue transfers to I/O objects in other green partitions. To
prevent bus controllers from issuing direct transfers to objects
in a different green partition, an I/O kernel needs to authorize
transfers issued by the bus controllers when green drivers write
TDs. This authorization requires TD-state transitive closure
computation. In practice, an I/O kernel may not compute the
transitive closure for performance reasons, and instead may
impose a stronger and more conservative policy that forbids
green devices from writing to TDs.
In the red partition, untrusted red drivers and their devices
can issue transfers to objects in various ways supported by
different hardware platforms; e.g., device P2P transfers, I/O
multicast and broadcast. The I/O kernel ensures all transfers
issued by red drivers and devices are conﬁned to the red
partition by leveraging existing hardware security isolation
mechanisms; e.g., setting the IOMMU page tables and reset-
ting the IOTLB. The I/O kernel also prevents conﬁgurations
that allow P2P transfers on PCI buses, which have inadequate
access control of I/O transfers.
B. Deﬁning the Concrete Model
Compared to the abstract model, the concrete model in-
cludes additional I/O operations using abstractions of speciﬁc
hardware isolation mechanisms such as IOMMU and IOTLB
and extended device and driver (de)activation conditions. New
state invariants and transition constraints are applied to the
concrete model to prove soundness.
State. In addition to everything in the abstract I/O separation
model, a concrete-model state includes a dedicated partition
ID for the red partition and an ephemeral device map, mapping
each ephemeral or physical device to a set of ephemeral
devices and indicating which ones are active. This map helps
enforce the separation policy of ephemeral devices and ensure
that a physical device is not active at the same time as its
mapped ephemeral devices.
In the initial state of the concrete model, the red partition
is the only active partition, and devices, drivers, and objects
are either active in the red partition or inactive.
State Transitions. Each operation of the concrete model maps
to one and only one operation of the I/O separation model,
as shown in Table I of Appendix B. For each operation in
the abstract model, this concrete model makes a distinction
between green and red partitions.
The driver write operation in the abstract model is split
into a green driver write and a red driver write operations.
The former relies on I/O kernel code for access control. The
latter may rely on available I/O hardware mechanisms (e.g.,
IOMMU and/or PCIe ACS) to block any cross-partition trans-
fers issued by red devices and thus the concrete model imports
isolation assumptions based on the hardware mechanisms.
This is because green applications require I/O separation of
ephemeral devices at ﬁner-granularity than can be achieved
by even perfect I/O hardware mechanisms alone. In contrast,
I/O kernels only need to prevent red drivers from accessing
the physical device mapped to ephemeral devices, which can
be achieved by using I/O hardware mechanisms.
Similarly, driver, device, and external object activation and
deactivation operations are split into a green and a red version.
Red drivers and their external objects have (de)activation
operations acquire/release memory in the red partition on-
demand and they are never allowed to be moved to a green
partition. The green drivers and external objects are directly
activated into green partitions on demand, but never in a red
partition. Red driver, device, or external object deactivation
operations require that no other red device can issue direct
or indirect transfers to it. This requirement is fulﬁlled by
using adequate hardware mechanisms that are capable of ﬁne-
grained access control such as IOMMU and PCIe ACS. The
model imports this requirement as an Axiom.
State Invariants and Transition Constraints. For simplicity
of exposition, we show only how a single state invariant, SI1,
of the abstract model is reﬁned to obtain invariants in the
concrete model. The transition constraints are almost identical
to those of the abstract model, so we omit them. Similar to the
operations, the state invariants are concretely applied to green
and red partitions.
SI1c In any TD state of a transitive closure in system state ck,
if a red device can read a TD, then the objects referenced
by the TD must be i) in the red partition, and (ii) must
not be hardcoded TDs.
SI2c All TDs in green partitions (i) only reference objects in
the same partition with the TDs, and (ii) do not deﬁne
direct TD write transfers.
The state invariant SI2c is stronger than the direct inter-
pretation of SI1 in the abstract model to green devices, as
no indirect
transfer is allowed at all by SI2c(ii). An I/O
kernel could enforce the weaker SI1 for the green partition
by computing a transitive closure, but this is less desirable
because of the performance penalty incurred by doing so.
SI2c is a more conservative policy which can be easily
implemented by the I/O kernels because only green drivers
can conﬁgure transfers by USB host controllers, USB devices,
and (ephemeral) interrupt controllers, if any. In Section VI-B,
we will illustrate a vulnerability in the original Wimpy kernel
design, which violates SI2c.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
580
C. Soundness of the Concrete Model
The I/O separation properties for the concrete model are: (1)
subjects can only issue I/O transfers to objects in the same red
or green partitions; (2) only hardcoded TDs can be reused in a
new green or red partition. These properties are instantiations
of SP1 and SP2 to green and red partitions.
To prove that the concrete model enforces I/O separation,
we need to prove the reﬁnements of Theorem 1 and 2,
and Corollary 1 of the (abstract) I/O separation model. The
theorem statements remain the same; however, the underlying
deﬁnitions of state invariants and transition properties are
replaced by the ones deﬁned speciﬁcally for the concrete
model; i.e., SI1c, SI2c, TC1c, etc.
We leverage the simulation relation between the abstract and
concrete model in proving these theorems. We formally deﬁne
a mapping f from concrete states, operations, and transitions
to abstract states, operations, and transitions as illustrated in
Table I of Appendix B. (For brevity, we overload f for all of
the mappings.) We then prove the following lemma.
Lemma 1. If ck 1 makes a successful transition to ck 2 under
operation co (d = true) and f (ck 1) = k1, then there exist o
and k2 such that k1 can make a successful transition to k2
under o; i.e., such that f (ck 2) = k2 and f (co) = o.
The key part of proving the theorems is to show that a
successful transition from a secure state in the concrete model
always results in another secure state and that the transition
properties hold on this transition. Instead of directly proving
this statement on the concrete model, we ﬁrst separate state
invariants and transition properties of the concrete model into
two groups: one that can be proved with the abstract model’s
security invariants and transition properties, and the other
which cannot. For example, SI1c belongs to the ﬁrst group,
while SI2c belongs to the second group. Once the two groups
of properties are proven, the key part of proving the theorems
holds. To prove the ﬁrst group of properties, we only need to
show three detailed lemmas hold: (1) a secure concrete state
always maps to a secure abstract state; (2) if a concrete state ck
maps to a secure abstract state, then ck fulﬁlls state invariants
in the ﬁrst group, and (3) if a concrete transition co maps
to an abstract
transition that satisﬁes transition properties,
then the concrete transition satisﬁes transition properties in
the ﬁrst group. The proofs of (1) – (3) are straightforward
since concrete states only differ from abstract states in the
treatment of green and red partitions and ephemeral devices,
and fulﬁll stronger invariants; e.g., SI2c is stronger than SI1.
A direct proof of the second group of properties is trivial,
because concrete operations enforce these properties in their
speciﬁcations.
VI. WIMPY KERNEL DESIGN
The Wimpy kernel (WK) [21] aims to enforce on-demand
I/O channel separation for isolated applications. It shares
the same I/O separation goals of the concrete model
in
Section V-A and is specialized to ensure the proper red/green
parition separation in the presence of USB host controllers
and USB peripheral devices. We describe its speciﬁcation, an
instantiation of the concrete model from Section V, and ﬁnally
discuss its vulnerabilities.
A. Instantiating Concrete Model to WK Design
The WK design inherits much of the state, operations,
state invariants, and transition constraints from the concrete
model from the previous section. One speciﬁc operation is
the activation of USB host controllers and devices into the
red partition, which is speciﬁed as concatenations of concrete-
model operations (Table II in Appendix B). The concatenation
ensures the atomicity of this operation: all of the devices
are activated at the same time. The WK design reﬁnes the
ephemeral-device policy from the concrete model to require
an ephemeral device for the same physical device to be active
in one partition. The soundness proof of WK design relies on
a straightforward simulation proof, as the mappings are mostly
identity functions.
B. Vulnerabilities of the original WK Design
We compared the sound kernel speciﬁcations with the
original design [21] and discover discrepancies that lead to
vulnerabilities. We illustrate the two vulnerabilities found and
identify the invariants they violate.
Vulnerability 1: A violation of red-green separation. Red
devices can issue unauthorized transfers to green drivers,
devices, and external objects.
This vulnerability is caused by a violation of the state
invariant SI1c of the sound WK design and concrete I/O
model, which in turn violates invariant SI1 of the abstract
model. Consequently, the separation property SP1 can not be
proven in the original design.
This vulnerability happens when a red device is under
the same PCI bus with the isolated USB Host Controller
(USB HC). Because PCIe-to-PCI bridges authorize device P2P
transfers and DMA transfers at the granularity of PCI bus
controllers, the vulnerability can be exploited as in Example
1, 2 and 3 in Section II. WK incorrectly assumes that IOMMU
and PCIe ACS mediate these transfers.
To remove this vulnerability, the sound WK design restricts
hardware conﬁgurations to prevent such transfers. These re-
strictions require green USB host controllers to be attached
only to PCIe (not PCI) buses, and then the IOMMU and PCIe
ACS block unauthorized red-device transfers. Note that the
WK design could implement the transitive closure computation
and checks of the abstract model, but it is inefﬁcient. So
the WK design deviates from the abstract model and makes
explicit assumptions about the I/O hardware.
Vulnerability 2: A violation of green-green separation. Green
drivers can issue indirect writes to external TDs and cause
their devices to initiate transfers to other green partitions after
reading these TDs.
This vulnerability is caused by a violation of state invariant
SI2c(ii) of the sound WK design, which denies indirect
transfers in green partitions. Figure 8 illustrates how to exploit
this vulnerability. Nexus RVM [2] also has this vulnerability.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:26 UTC from IEEE Xplore.  Restrictions apply. 
581

























	
	








