point until its guess cutoff, PCFG performed best, at
points having guessed nearly ten times as many pass-
words as JTR. Although its initial guesses were often
successful, the conceptual and implementation-speciﬁc
performance issues we detailed in Section 3.4 prevented
Markov from making over 100 million valid Complex
guesses, orders of magnitude less than the other ap-
proaches we examined. A real attack using this algorithm
would be similarly constrained.
Both Hashcat and JTR performed poorly compared to
PCFG in early Complex guessing. By 109 guesses, each
had each guessed under 3% of Complex passwords, com-
pared to 20% for PCFG. Both Hashcat and JTR improve
rapidly after 1010 guesses, however, eventually guessing
around 30% of Complex passwords.
JTR required almost 1012 guesses and Hashcat re-
quired over 1013 guesses to crack 30% of Complex pass-
words. As we discuss in Section 4.3, there was less over-
lap in which passwords were guessed by multiple auto-
mated approaches for Complex passwords than for Basic
passwords. As a result, the Minauto curve in Figure 3,
representing the smallest guess number per password
across the automated approaches, shows that just under
1011 guesses are necessary for 30% of Complex pass-
words to have been guessed by at least one automated ap-
proach. Over 40% of Complex passwords were guessed
by at least one automated approach in 1013 guesses.
Figure 5: Success guessing LongComplex passwords.
107
Guesses
109
USENIX Association  
24th USENIX Security Symposium  471
9
107
Guesses
Figure 2: Automated approaches’ success guessing Ba-
sic passwords. Minauto represents the smallest guess
number for a password by any automated approach.
107
Guesses
Figure 3: Success guessing Complex passwords. Pros
are experts updating their guessing strategy dynamically.
60%
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
0%
101
103
105
40%
30%
20%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
10%
0%
101
103
105
30%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
10%
0%
101
103
105
30%
d
e
s
s
e
u
g
20%
t
n
e
c
r
e
P
10%
0%
101
103
105
Min_auto
PCFG
Hashcat
JTR
Markov
109
1011
1013
Pros
Min_auto
PCFG
Hashcat
JTR
Markov
109
1011
1013
Pros
Min_auto
Hashcat
PCFG
Markov
JTR
1011
1013
1015
Pros
Min_auto
PCFG
Hashcat
JTR
Markov
1011
1013
1015
Figure 4: Success guessing LongBasic passwords.
107
Guesses
109
LongBasic
Complex
LongComplex
0%
20%
40%
60%
80%
100%
Both
Min_auto only
Pros only
Neither
Figure 6: The proportion of passwords guessed by
Minauto, Pros, both, or neither within 1014 guesses.
LongBasic passwords were also challenging for all
approaches to guess, though relative differences across
approaches are not as stark as for Complex passwords.
Markov was marginally more successful than other ap-
proaches at its cutoff just before 109 guesses. JTR and
PCFG both continued to generate successful guesses
through when JTR exhausted its guesses after guessing
10% of the passwords. Hashcat lagged slightly behind
JTR at 109 guesses (7% cracked vs ∼9%), but was able
to make more guesses than either, eventually guessing
over 20% of the passwords, compared to 16% for PCFG
and 10% for JTR at those approaches’ guess cutoffs.
As with LongBasic passwords, all approaches had dif-
ﬁculty guessing LongComplex passwords. As shown
in Figure 5, nearly 70% of LongComplex passwords
were not guessed by any of the approaches we exam-
ined even after trillions of guesses. The relative per-
formance of the four automated guessing approaches
for LongComplex passwords again differed noticeably.
Markov and PCFG again outperformed other approaches
early. Markov guessed 5% of the passwords after 108
guesses, yet reached its guess cutoff soon thereafter. At
109 guesses PCFG and JTR had both also guessed at least
5% of the passwords, compared to almost no passwords
guessed by Hashcat. PCFG’s and JTR’s performance
diverged and then converged at higher guess numbers.
Hashcat caught up at around 1013 guesses, cracking 20%
of LongComplex passwords.
4.2.2 Guessing by Pros
As we expected, Pros guessed more passwords overall
than any of the automated approaches. As we discussed
in Section 3, we chose not to have Pros attack Basic pass-
words because those passwords could be guessed with
automated approaches alone. As shown in Figures 3–5,
within 1014 guesses Pros cracked 44% of Complex pass-
words, 33% of LongBasic passwords, and 33% of Long-
Complex passwords, improving on the guessing of the
best automated approach.
Three aspects of guessing by Pros were particularly
notable. First, even though Pros manually examined
half of each password set and adjusted their mangling
rules and wordlists before making the ﬁrst guess against
each set, automated approaches were often more suc-
cessful at early guessing. For example, Markov sur-
passed Pros at guessing Complex passwords in the ﬁrst
102 guesses and again from around 106 till Markov’s
guess cutoff at 5 × 107. Similarly, all four automated
approaches guessed LongComplex passwords more suc-
cessfully than Pros from the start of guessing until past
1013 guesses. All approaches guessed LongBasic pass-
words better than Pros for the ﬁrst 106 guesses.
Second, while Pros lagged in early guessing,
the
freestyle rules an experienced analyst wrote at 1013
guesses proved rather effective and caused a large spike
in successful guesses for all three password sets. Hash-
cat, the only automated approach that surpassed 1013
guesses for all sets, remained effective past 1013 guesses,
yet did not experience nearly the same spike.
Third, while Pros were more successful across pass-
word sets once a sufﬁciently high number of guesses had
been reached, the automated approaches we tested had
guessing success that was, to a very rough approxima-
tion, surprisingly similar to Pros. As we discussed in
Section 4.1 and discuss further in the appendix, this suc-
cess required substantial conﬁguration beyond each ap-
proach’s performance out of the box.
We found that our Minauto metric (the minimum guess
number for each password across Hashcat, JTR, Markov,
and PCFG) served as a conservative approximation of
the success of Pros, at least through our automated guess
cutoffs around 1013 guesses. As seen in Figures 3–6,
Pros never substantially exceeded Minauto, yet often per-
formed worse than Minauto.
Professional cracking with limitations To unpack
why professional crackers have an advantage over novice
attackers, we also had KoreLogic attack a different set of
Complex passwords in artiﬁcially limited conﬁgurations.
These limitations covered the wordlists they used, the
mangling rules they used, and whether they were permit-
ted to write freestyle rules. To avoid biasing subsequent
tests, we provided them a comparable set of 4,239 Com-
plex passwords [31] distinct from those examined in the
rest of the paper. We call this alternate set Complexpilot.
As shown in Table 2, we limited Pros in Trial 1 to
use the same wordlist we used elsewhere in this paper
and did not allow freestyle rules. In Trial 2, we did not
limit the wordlist, but did limit mangling rules to those
used in the 2010 Crack Me If You Can contest [35]. In
Trial 3 and Trial 4, we did not limit the starting wordlist
or mangling rules. In Trial 4, however, KoreLogic ana-
lysts dynamically adjusted their attacks through freestyle
rules and wordlist tweaks after 1014 guesses.
We found that KoreLogic’s set of proprietary man-
gling rules had a far greater impact on guessing efﬁ-
ciency than their proprietary wordlist (Figure 7). Fur-
thermore, as evidenced by the difference between Trial 3
472  24th USENIX Security Symposium 
USENIX Association
10
Table 2: The four trials of Pros guessing Complexpilot.
We artiﬁcially limited the ﬁrst three trials to uncover why
Pros have an advantage over more novice attackers.
Trial
1
2
3
4
Wordlist
CMU wordlist
Anything
Anything
Anything
Rules
Anything
2010 CMIYC rules
Anything
Anything
Freestyle Rules
None
None
None
Unlimited
Trial4
Trial3
Trial2
Trial1
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
0%
103
101
1015
Figure 7: Complexpilot guessability by trial.
107
Guesses
109
1011
1013
105
and Trial 4, freestyle rules also had a major impact at the
point the analyst wrote them.
Actionable takeaways One conceptual advantage of
parameterized metrics is that they model an attack using
existing cracking approaches. However, it has long been
unclear whether automated cracking approaches used by
researchers effectively model the dynamically updated
techniques used by expert real-world attackers. Our re-
sults demonstrate that only by considering multiple au-
tomated approaches in concert can researchers approxi-
mate professional password cracking.
One of our primary observations, both from compar-
ing Pros to the automated approaches and from our trials
artiﬁcially limiting Pros (Section 4.2.2), is that dynami-
cally updated freestyle rules can be highly effective. This
result raises the question of to what extent automated ap-
proaches can model dynamic updates. Although the ad-
versarial cracking community has discussed techniques
for automatically generating mangling rules from previ-
ous cracks [41], researchers have yet to leverage such
techniques, highlighting an area ripe for future work.
Contrary to prior research (e.g., [16, 40]), we found
that Hashcat, JTR, Markov, and PCFG all performed rel-
atively effectively when conﬁgured and trained accord-
ing to currently accepted best practices in the cracking
and research communities. That said, our tests also high-
lighted a limitation of the guessability metric in not con-
sidering the performance cost of generating a guess. De-
spite its real-world popularity, Hashcat performed com-
Basic
Complex
LongBasic
LongComplex
0%
20%
3 approaches
40%
60%
2 approaches
80%
1 approach
100%
Figure 8: Number of automated approaches, excluding
Markov, that cracked a particular password. We ignore
passwords not guessed by any approach and use the same
guess cutoff for all guessing approaches within a set.
paratively poorly until making trillions of guesses, yet
generated guesses very quickly.
If hashing a guess is the dominant time factor, as
is the case for intentionally slow hash functions like
bcrypt, PBKDF2, and scrypt, probabilistic approaches
like Markov and PCFG are advantageous for an attacker.
For fast hash functions like MD5 or NTLM, Hashcat’s
speed at generating and hashing guesses results in more
passwords being guessed in the same wall-clock time. As
discussed in Section 3.4, Markov proved comparatively
very resource-intensive to run to a large guess number,
especially for password sets with complex requirements.
These practical considerations must play a role in how
researchers select the best approaches for their needs.
4.3 Differences Across Approaches
Next, we focus on differences between approaches. We
ﬁrst examine if multiple approaches guess the same pass-
words. We then examine the guessability of passwords
with particular characteristics, such as those containing
multiple character classes or character substitutions. To
examine differences across how approaches model pass-
words, for analyses in this section we do not prepend the
training data to the guesses generated by the approach.
4.3.1 Overlap in Successful Guesses
While one would expect any two cracking approaches to
guess slightly different subsets of passwords, we found
larger-than-expected differences for three of the four
password sets. Figure 8 shows the proportion of pass-
words in each class guessed by all four approaches,
or only some subset of them. We exclude passwords
guessed by none of the automated approaches. Within a
password set, we examine all approaches only up to the
minimum guess cutoff among Hashcat, JTR, and PCFG;
we exclude Markov due to its low guess cutoffs.
The three approaches guessed many of the same Basic
passwords: Three-fourths of Basic passwords guessed by
any approach were guessed by all of them. Only 11%
of Basic passwords were guessed only by a single ap-
USENIX Association  
24th USENIX Security Symposium  473
11
Hashcat
PCFG
JTR
Markov
60%
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
0%
Figure 9: Percentage of Basic passwords each approach
guessed, by character-class count.
101
103
105
107
Guesses
109
1011
1013
1015
Figure 10: Approaches’ effectiveness guessing pass-
words composed entirely of lowercase letters across sets.
proach.
In contrast, only 6% of LongBasic passwords
were guessed by all approaches, while 28% of Complex,