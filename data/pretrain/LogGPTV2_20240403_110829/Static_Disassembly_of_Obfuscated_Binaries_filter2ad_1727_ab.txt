candidate instructions for this type of transforma-
tion are difﬁcult to ﬁnd in real executables and the
reported obfuscation effects were minimal [13].
2. Conditional jumps can be either taken or not
taken. This means that control ﬂow can continue
at the branch target or at the instruction after the
conditional branch.
In particular, it is not possi-
ble to insert junk bytes at the branch target or at
the address following the branch instruction. Linn
and Debray [13] discuss the possibility to transform
unconditional jumps into conditional branches us-
ing opaque predicates. Opaque predicates are pred-
icates that always evaluate to either true or false,
independent of the input. This would allow the ob-
fuscator to insert junk bytes either at the jump target
or in place of the fall-through instruction. However,
it is not obvious how to generate opaque predicates
that are not easily recognizable for the disassem-
bler. Also, the obfuscator presented in [13] does
not implement this transformation.
3. An arbitrary amount of junk bytes can be in-
serted at unreachable locations. Unreachable lo-
cations denotes locations that are not reachable at
run-time. These locations can be found after in-
structions that change the normal control ﬂow. For
example, most compilers arrange code such that the
address following an unconditional jump contains a
valid instruction. However, we assume that an arbi-
trary number of junk bytes can be inserted there.
4. The control ﬂow does not have to continue im-
mediately after a call instruction. Thus, an arbi-
trary number of padding bytes can be added after
each call. This is different from the standard be-
havior where it is expected that the callee returns
to the instruction following a call using the corre-
sponding return instruction. More speciﬁcally, in
the x86 instruction set architecture, the call op-
eration performs a jump to the call target and, in
addition, pushes the address following the call in-
struction on the stack. This address is then used by
the corresponding ret instruction, which performs
a jump to the address currently on top of the stack.
However, by redirecting calls to a branch function,
it is trivial to change the return address.
Our disassembly techniques can be divided into two
classes: general techniques and tool-speciﬁc techniques.
General techniques are techniques that do not rely upon
any knowledge on how a particular obfuscator trans-
forms the binary. It is only required that the transforma-
tions respect our assumptions. Our general techniques
are based on the program’s control ﬂow, similar to a re-
cursive traversal disassembler. However, we use a differ-
ent approach to construct the control ﬂow graph, which
is more resilient to obfuscation attempts. Program re-
gions that are not covered by the control ﬂow graph are
analyzed using statistical techniques. The general tech-
niques are described in more detail in Section 4.
An instance of an obfuscator that respects our assump-
tions is presented by Linn and Debray in [13]. By tailor-
ing the static analysis process against a particular tool,
it is often possible to reverse some of the performed
transformations and improve the analysis results. Sec-
tion 5 discusses potential modiﬁcations to our general
techniques to take advantage of tool-speciﬁc knowledge
when disassembling binaries transformed with Linn and
Debray’s obfuscator.
In Section 6, we show that the general techniques pre-
sented in the next section offer a signiﬁcant improve-
ment over previous approaches. When combined with
tool-speciﬁc knowledge, the obfuscated binary is almost
completely disassembled.
4 General Techniques
This section discusses the general techniques to recon-
struct the program’s control ﬂow. Regions in the binary
that are not covered by the control ﬂow graph are ana-
lyzed using statistical methods.
4.1 Function Identiﬁcation
The ﬁrst step when disassembling obfuscated programs
is to divide the binary into functions that can then be an-
alyzed independently. The main reason for doing so is
run-time performance; it is necessary that the disassem-
bler scales well enough such that the analysis of large
real-world binaries is possible.
An important part of our analysis is the reconstruction of
the program’s control ﬂow. When operating on the com-
plete binary, the analysis does not scale well for large
programs. Therefore, the binary is broken into smaller
regions (i.e., functions) that can be analyzed consecu-
tively. This results in a run-time overhead of the disas-
sembly process that is linear in the number of instruc-
tions (roughly, the size of the code segment).
A straightforward approach to obtain a function’s start
addresses is to extract the targets of call instructions.
When a linker generates an ordinary executable, the tar-
gets of calls to functions located in the binary’s text seg-
ment are bound to the actual addresses of these func-
tions. Given the call targets and assuming that most
functions are actually referenced from others within the
binary, one can obtain a fairly complete set of function
start addresses. Unfortunately, this approach has two
drawbacks. One problem is that this method requires
that the call instructions are already identiﬁed. As the
objective of our disassembler is precisely to provide that
kind of information, the call instructions are not avail-
able at this point. Another problem is that an obfuscator
can redirect all calls to a single branching function that
transfers control to the appropriate targets. This tech-
nique changes all call targets to a single address, thus
removing information necessary to identify functions.
We use a heuristic to locate function start addresses.
This is done by searching the binary for byte sequences
that implement typical function prologs. When a func-
tion is called, the ﬁrst few instructions usually set up a
new stack frame. This frame is required to make room
for local variables and to be able restore the stack to its
initial state when the function returns. In the current im-
plementation, we scan the binary for byte sequences that
represent instructions that push the frame pointer onto
the stack and instructions that increase the size of the
stack by decreasing the value of the stack pointer. The
technique works very well for regular binaries and also
for the obfuscated binaries used in our experiments. The
reason is that the used obfuscation tool [13] does not at-
tempt to hide function prologs. It is certainly possible
to extend the obfuscator to conceal the function prolog.
In this case, our function identiﬁcation technique might
require changes, possible using tool-speciﬁc knowledge.
Note that the partitioning of the binary into functions is
mainly done for performance reasons, and it is not cru-
cial for the quality of the results that all functions are
correctly identiﬁed. When the start point of a function
is missed, later analysis simply has to deal with one
larger region of code instead of two separate smaller
parts. When a sequence of instructions within a function
is misinterpreted as a function prolog, two parts of a sin-
gle function are analyzed individually. This could lead to
less accurate results when some intra-procedural jumps
are interpreted as inter-procedural, making it harder to
reconstruct the intra-procedural control ﬂow graph as
discussed in the following section.
4.2
Intra-Procedural Control Flow Graph
To ﬁnd the valid instructions of a function (i.e., the in-
structions that belong to the program), we attempt to
reconstruct the function’s intra-procedural control ﬂow
graph. A control ﬂow graph (CFG) is deﬁned as a di-
rected graph G = (V, E) in which vertices u, v ∈ V
represent basic blocks and an edge e ∈ E : u → v
represents a possible ﬂow of control from u to v. A
basic block describes a sequence of instructions with-
out any jumps or jump targets in the middle. More for-
mally, a basic block is deﬁned as a sequence of instruc-
tions where the instruction in each position dominates,
or always executes before, all those in later positions,
and no other instruction executes between two instruc-
tions in the sequence. Directed edges between blocks
represent jumps in the control ﬂow, which are caused by
control transfer instructions (CTIs) such as calls, condi-
tional and unconditional jumps, or return instructions.
The traditional approach to reconstruct the control ﬂow
graph of a function works similar to a recursive disas-
sembler. The analysis commences at the function’s start
address and instructions are disassembled until a control
transfer instruction is encountered. The process is then
continued recursively at all jump targets that are local to
the procedure and, in case of a call instruction or a con-
ditional jump, at the address following the instruction.
In case of an obfuscated binary, however, the disassem-
bler cannot continue directly after a call instruction. In
addition, many local jumps are converted into non-local
Valid
Candidate
8048000
8048001
8048002
8048003
8048004
8048005
8048006
...
804800c
...
8048010
...
8048017
8048018
8048019
804801a
804801b
...
55
89 e5
e5 e8
e8 00 00 74 11
00 00
00 74
74 11
push
mov
in
call
add
add
je
%ebp
%esp, %ebp
e8,%eax
19788008 
%al, %eax
8048019
75 06
eb 07
jne
8048014
jmp
8048019 
74 01
01 89 ec 5d c3 90
89 ec
ec
5d
je
add
mov
in
pop
804801a
%dh,ffffff89(%ecx,%eax,1)
%ebp, %esp
(%dx), %al
%ebp
x
x
x
x
x
x
x
x
x
x
x
Figure 3: Partial instruction listing.
jumps to addresses outside the function to blur local con-
trol ﬂow. In most cases, the traditional approach leads to
a control ﬂow graph that covers only a small fraction
of the valid instructions of the function under analysis.
This claim is supported by the experimental data shown
in Section 6 that includes the results for a state-of-the-art
recursive disassembler.
We developed an alternative technique to extract a more
complete control ﬂow graph. The technique is composed
of two phases: in the ﬁrst phase, an initial control ﬂow
graph is determined. In the following phase, conﬂicts
and ambiguities in the initial CFG are resolved. The two
phases are presented in detail in the next two sections.
4.2.1 Initial Control Flow Graph
To determine the initial control ﬂow graph for a func-
tion, we ﬁrst decode all possible instructions between
the function’s start and end addresses. This is done by
treating each address in this address range as the begin
of a new instruction. Thus, one potential instruction is
decoded and assigned to each address of the function.
The reason for considering every address as a possible
instruction start stems from the fact that x86 instructions
have a variable length from one to ﬁfteen bytes and do
not have to be aligned in memory (i.e., an instruction can
start at an arbitrary address). Note that most instructions
take up multiple bytes and such instructions overlap with
other instructions that start at subsequent bytes. There-
fore, only a subset of the instructions decoded in this ﬁrst
step can be valid. Figure 3 provides a partial listing of
all instructions in the address range of the sample func-
tion that is shown in Figure 1. For the reader’s reference,
valid instructions are marked by an x in the “Valid” col-
umn. Of course, this information is not available to our
disassembler. An example for the overlap between valid
and invalid instructions can be seen between the second
and the third instruction. The valid instruction at address
0x8048001 requires two bytes and thus interferes with
the next (invalid) instruction at 0x8048002.
The next step is to identify all intra-procedural con-
trol transfer instructions. For our purposes, an intra-
procedural control transfer instruction is deﬁned as a
CTI with at least one known successor basic block in the
same function. Remember that we assume that control
ﬂow only continues after conditional branches but not
necessarily after call or unconditional branch instruc-
tions. Therefore, an instruction is an intra-procedural
control transfer instruction if either (i) its target address
can be determined and this address is in the range be-
tween the function’s start and end addresses or (ii) it is a
conditional jump.
Note that we assume that a function is represented by a
contiguous sequence of instructions, with possible junk
instructions added in between. However, it is not pos-
sible that the basic blocks of two different functions are
intertwined. Therefore, each function has one start ad-
dress and one end address (i.e., the last instruction of the
last basic block that belongs to this function). However,
it is possible that a function has multiple exit points.
In case of a conditional jump, the address that immedi-
ately follows the jump instruction is the start of a suc-
cessor block, and thus, every conditional jump is also
an intra-procedural control transfer operation. This is
intuitively plausible, as conditional branches are often
used to implement local branch (e.g., if-else) and
loop (e.g., while, for) statements of higher-level lan-
guages, such as C.
To ﬁnd all intra-procedural CTIs, the instructions de-
coded in the previous step are scanned for any control
transfer instructions. For each CTI found in this way, we
attempt to extract its target address. In the current imple-
mentation, only direct address modes are supported and
no data ﬂow analysis is performed to compute address
values used by indirect jumps. However, such analy-
sis could be later added to further improve the perfor-
mance of our static analyzer. When the instruction is
determined to be an intra-procedural control transfer op-
eration, it is included in the set of jump candidates. The
jump candidates of the sample function are marked in
Figure 3 by an x in the “Candidate” column. In this ex-
ample, the call at address 0x8048003 is not included
into the set of jump candidates because the target address
is located outside the function.
Given the set of jump candidates, an initial control ﬂow
graph is constructed. This is done with the help of a
recursive disassembler. Starting with an initial empty
CFG, the disassembler is successively invoked for all the
elements in the set of jump candidates. In addition, it is
also invoked for the instruction at the start address of the
function.
The key idea for taking into account all possible control
transfer instructions is the fact that the valid CTIs de-
termine the skeleton of the analyzed function. By using
all control ﬂow instructions to create the initial CFG,
we make sure that the real CFG is a subgraph of this
initial graph. Because the set of jump candidates can
contain both valid and invalid instructions, it is possi-
ble (and also frequent) that the initial CFG contains a
superset of the nodes of the real CFG. These nodes are
introduced as a result of argument bytes of valid instruc-
tions being misinterpreted as control transfer instruc-
tions. The Intel x86 instruction set contains 26 single-
byte opcodes that map to control transfer instructions
(out of 219 single-byte instruction opcodes). Therefore,
the probability that a random argument byte is decoded
as CTI is not negligible. In our experiments (for details,
see Section 6), we found that about one tenth of all de-
coded instructions are CTIs. Of those instructions, only
two thirds were part of the real control ﬂow graph. As a
result, the initial CFG contains nodes and edges that rep-
resent invalid instructions. Most of the time, these nodes
contain instructions that overlap with valid instructions
of nodes that belong to the real CFG. The following
section discusses mechanisms to remove these spurious
nodes from the initial control ﬂow graph. It is possible
to distinguish spurious from valid nodes because invalid
CTIs represent random jumps within the function while
valid CTIs constitute a well-structured CFG with nodes
that have no overlapping instructions.
Creating an initial CFG that includes nodes that are not
part of the real control ﬂow graph can been seen as the
opposite to the operation of a recursive disassembler.
A standard recursive disassembler starts from a known
valid block and builds up the CFG by adding nodes
as it follows the targets of control transfer instructions
that are encountered. This technique seems favorable
at ﬁrst glance, as it makes sure that no invalid instruc-
tions are incorporated into the CFG. However, most con-
trol ﬂow graphs are partitioned into several unconnected
subgraphs. This happens because there are control ﬂow
instructions such as indirect branches whose targets of-
ten cannot be determined statically. This leads to miss-
ing edges in the CFG and to the problem that only a frac-
tion of the real control ﬂow graph is reachable from a
certain node. The situation is exacerbated when dealing
with obfuscated binaries, as inter-procedural calls and
jumps are redirected to a branching function that uses
indirect jumps. This signiﬁcantly reduces the parts of
the control ﬂow graph that are directly accessible to a
recursive disassembler, leading to unsatisfactory results.
Although the standard recursive disassembler produces
suboptimal results, we use a similar algorithm to extract
the basic blocks to create the initial CFG. As mentioned
before, however, the recursive disassembler is not only
invoked for the start address of the function alone, but
also for all jump candidates that have been identiﬁed. An
initial control ﬂow graph is then constructed according
to the code listing shown in Algorithm 1.
There are two differences between a standard recursive
disassembler and our implementation. First, we assume
that the address after a call or an unconditional jump in-
struction does not have to contain a valid instruction.