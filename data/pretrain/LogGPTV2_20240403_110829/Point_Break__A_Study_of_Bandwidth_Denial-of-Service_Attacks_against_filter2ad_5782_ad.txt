more resources and better performance. Clients using the
default selection algorithm will choose relays roughly pro-
portional to the weights assigned to them (via the bandwidth
authority voting procedure) and listed in the consensus. As
a result, client trafﬁc will be driven to the better performing
relays. Previous work has shown that Tor’s relay selection
strategy does a reasonable job of balancing load [82].
6.2 Detecting TorFlow Scanners
The TorFlow relay scanners constitute attractive targets for
DoS attacks: disrupting the scanners may result in signiﬁ-
cant variation in relays’ weights which could degrade load-
balancing and security.
If the bandwidth authorities were
taken ofﬂine, Tor would eventually fall back to an equal
weighting (uniformly at random) strategy, which would have
a detrimental effect on client performance [82]. Previous
work observed the ability to detect TorFlow scanners due to
their connection patterns and ﬁxed-size ﬁle downloads [55],
which we further explore.
TorFlow scanners stand out from normal Tor clients be-
cause: (i) they download one of a set of 13 ﬁxed-size ﬁles,
(ii) they choose new entry relays for each circuit (disabling
the guard feature), and (iii) they use two-hop circuits.
To discover the network addresses of the TorFlow scan-
ners, we ﬁrst determined the range in the number of Tor cells
required to download each of the ﬁxed-size ﬁles. We then op-
erated a low-bandwidth relay and patched it with a small pro-
gram that looked for connecting clients (potential candidates
for TorFlow scanners) that exhibited similar telltale fetches.
To provide some ground truth, we also operated our own Tor-
Flow scanner. Within 48 hours, we were able to identify six
IP addresses that fetched ﬁles through our relay and ﬁt the
pattern of a TorFlow scanner. We operated our TorFlow scan-
ner detection software for 5.5 days, during which it did not
identify any additional potential scanners. Although we tem-
porarily stored candidate scanner IP addresses in memory (in
order to determine uniqueness), we did not write them to std-
out or the ﬁlesystem (in order to avoid accidentally recording
the IP of a human Tor user). We did, however, record that one
of the six identiﬁed candidate TorFlow scanners was indeed
our own; we posit that the other ﬁve correspond to the ﬁve
scanners operated by the Tor Project.
6.3 Attacking TorFlow Scanners
Given that an adversary can identify TorFlow scanners by
their IP address, they can use bandwidth DoS attacks to dis-
rupt the relay scanning process and therefore degrade the ac-
curacy of the relay weights produced by TorFlow. A band-
width DoS attack will clog the TorFlow scanners’ links, in-
creasing latency and packet loss on those links and extend-
ing the time it takes the scanners to successfully complete
ﬁle downloads through Tor relays. Therefore, the adversary
may effectively manipulate the scanner into believing that re-
lays provide worse performance than they can actually pro-
vide. Since TorFlow weights relays by their performance,
the adversary can effectively reduce the accuracy of the re-
lay weights which may disrupt the load balancing process.
6.3.1 Attack Strategies
We explore several strategies that an adversary may use to
conduct bandwidth DoS attacks on TorFlow scanners with
a goal of increasing the ﬁle download times measured by
TorFlow and disrupting the load balancing process. Each
strategy will come at a different cost due to the bandwidth
required to conduct the attack and the length at which the
attack must be sustained.
Constant: The most straightforward strategy is to simply
ﬂood each TorFlow scanner with bandwidth at a constant rate
over time. This brute-force strategy is the easiest to set up
and should require minimal monitoring and maintenance by
the adversary throughout the duration of attack.
Periodic: Since TorFlow produces weights that represent re-
lay performance relative to other relays, and because a con-
stant attack strategy may similarly affect all relay measure-
1830    28th USENIX Security Symposium
USENIX Association
ments, a constant strategy may be suboptimal. Therefore, we
also consider a periodic strategy where the adversary ﬂoods
the victim with bandwidth for a duration of time λ while pe-
riodically pausing the attack for a duration of time π. The
reasoning behind this strategy is that the scanner will mea-
sure normal download times for some relays but signiﬁcantly
reduced download times for others, and the large difference
will have a greater impact on the ﬁnal set of relay weights.
Targeted: We also consider a targeted strategy where the ad-
versary carefully selects periods of time during which to run
the DoS attack and otherwise does not alter the victim scan-
ner’s network conditions. In particular, we observe that the
greatest impact in performance will likely result from signiﬁ-
cantly depressing the relative weights of the best performing
relays. Therefore, the adversary targets the scanner with a
bandwidth DoS attack while it is measuring the fastest re-
lays. We discuss below how to determine when the fastest
relays are being measured.
6.3.2 Attack Strength and Other Assumptions
For any strategy used by the adversary, we assume that it can
utilize a stresser service (see §3.1) to limit the victim’s ef-
fective bandwidth to rate γ while increasing packet loss on
the victim’s link by ρ. We assume that the adversary can
increase or decrease the attack strength to achieve these ef-
fects. (See §6.5 for a discussion of cost.) We also assume that
the adversary can receive feedback on the attack by closely
monitoring the consensus weights and checking how relays’
weights are changing over time. It can monitor the Tor met-
rics website and data to observe changes in Tor performance.
It can iteratively adjust the attack strength and strategy over
time in an attempt to produce a greater effect. We also as-
sume that the adversary is capable of setting up and running
its own TorFlow scanner instance (the code is open-source),
and use it to directly observe how an ongoing attack is af-
fecting the TorFlow measurements and outputs.
The Targeted attack strategy depends on being able to tar-
get the slice containing the fastest relays. We speculate that
the adversary would be able to detect when the fastest slice is
being measured by running a fast relay itself and observing
when its relay is ﬁrst measured by a TorFlow scanner. Once
detected, the adversary could enable the attack for the time
required to measure the slice, which it could estimate empir-
ically by running a TorFlow scanner itself and observing the
times to measure the fastest slice over several scan periods.
(We ran a TorFlow instance, analyzed its output, and com-
puted the time to measure the fastest slice over 20 scans. We
found that the median time to scan the fastest slice was 249
minutes, with an interquartile range of 73 minutes.) Note
that these techniques would require additional time, band-
width, and skill compared to a brute-force attack, and that
scan times may be inconsistent over time and network loca-
tion. See §6.6 for further discussion.
6.4 Evaluation
We evaluated the DoS attack strategies and effects in
Shadow [47], a high-ﬁdelity network simulation framework
that directly executes Tor. We used Shadow to create a pri-
vate Tor network that is completely contained inside of our
lab environment in order to guarantee that our attacks do not
harm the safety or privacy of real Tor users or the network.
All of the experiments that we present in this section use
Shadow v1.13.0 and Tor v0.3.0.10.
Network Setup: We used standard Shadow and Tor network
generation tools and methods [48] to generate a private Tor
network with 100 Tor relays, 3,000 Tor clients, and 1,000
server, and to generate background trafﬁc [53]. 2,619 of the
clients are web clients that download a 320 KiB ﬁle, “think”
by pausing for a time selected uniformly at random in the
range [1,60] seconds, and then repeat. 81 of the clients are
bulk clients that repeatedly download a 5 MiB ﬁle without
pausing between successive downloads. We also run 300
benchmark clients that reproduce Tor’s performance bench-
marks by occasionally downloading 50 KiB, 1 MiB, and
5 MiB ﬁles using fresh circuits throughout each experiment.
We use the most recently published Shadow network topol-
ogy graph [53] to model inter-host latency.
We implemented a TorFlow plugin for Shadow by signif-
icantly refactoring and extending previous work [55]. We
used the plugin to scan the relays in our network and pro-
duce V3BW ﬁles which were then added to the consensus
and used by the clients to build paths. We ﬁrst ran one longer
experiment allowing TorFlow time to scan through all relays
several times, and then we used the ﬁnal V3BW ﬁle that Tor-
Flow produced as the starting point for all other experiments.
Parameter Settings: We simulated a bandwidth attack by
adjusting TorFlow’s available bandwidth γ and added packet
loss ρ. During each phase where the attack is active, we limit
TorFlow’s bandwidth to γ = 500 Kbit/s (62.5 KiB/s) and we
add a ρ = 2% chance of packet loss occurring independently
on all incoming and outgoing packets. We set our TorFlow
instance to conduct 4 parallel probes (2-hop relay measure-
ments), to partition the relays into 10 slices of 10 relays each,
and to probe each relay at least 3 times per round before pro-
ducing a new V3BW ﬁle.
We ran a baseline No Attack experiment and experiments
with each attack strategy. When running the Constant attack
strategy, the attack is active (the γ and ρ rates applied) for
the duration of the experiment. In the Periodic attack strat-
egy, the attack cycles through an active period lasting λ = 60
seconds and an inactive period lasting π = 20 seconds. In the
Targeted attack strategy, the attack is active while relays in
the slice containing the fastest guard relay in the network are
being measured, and inactive otherwise.
TorFlow Scanner Performance: The performance of the
TorFlow measurement probe downloads across our experi-
ments is shown in Table 3. As shown in the table, our results
indicate that the Constant attack is the most effective at caus-
USENIX Association
28th USENIX Security Symposium    1831
Table 3: The failure rate of TorFlow probe downloads, and the
mean (± standard deviation) download rate for each TorFlow probe
download and time to complete a full network scan.
Strategy
No Attack
Fail Rate
6.0%
Download Rate
390±381 KiB/s
256±292 KiB/s
275±293 KiB/s
8.7±5.1 KiB/s
Scan Time
47±21 min.
59±20 min.
80±19 min.
173∗ min.
Periodic
Targeted
Constant
8.6%
14%
22%
∗Only a single scan completed in our 300 minute simulation.
ing TorFlow download errors (which increased to 22% from
6% with No Attack). The Constant attack is also the most
effective at limiting the probe download rate, achieving a re-
duction in mean download rate of about 381 KiB/s, and in-
tuitively increasing the time to scan all relays in the network
by about 126 minutes. We ﬁnd that the Periodic and Tar-
geted strategies are less effective than the Constant strategy,
but still do have a measurable effect on the scanner.
Relay Performance: Figure 4(a) shows the relay perfor-
mance in terms of the distribution of total relay goodput
(summed across all relays in the network) over every sec-
ond during the simulation. We notice a similar trend as with
TorFlow performance: in the medians, total relay goodput
drops by 86 MiB/s (56%) from 153 MiB/s with No Attack to
67 MiB/s with the Constant strategy, and relay utilization
gets progressively lower with the Periodic, Targeted, and
Constant strategies, respectively. Such signiﬁcant drops in
throughput indicates that the new weights produced by Tor-
Flow during the attacks no longer do a good job of balancing
client load across relays, and the network is less capable of
utilizing its available bandwidth resources.
Client Performance: The effects of our attacks on the
mean download rate (during active downloads) per client are
shown in Figure 4(b). Every attack has a signiﬁcant effect,
with the mean download rate of the median client being re-
duced by 45 KiB/s from 56 KiB/s with No Attack to 11 KiB/s
with the Constant attack. Client performance also suffers in
terms of the download failure rate per client as shown in Fig-
ure 4(c): the failure rate for the median client increases by
about 23% from about 3% with No Attack to about 26% with
the Constant attack.
Overall, our results show the extent to which an adversary
may disrupt Tor performance using straightforward DoS at-
tacks on easy-to-detect TorFlow scanners, and that the sim-
plest constant attack strategy was the most effective.
6.5 Attack Cost
We assume that our TorFlow DoS attacks could be launched
using a stresser service. In §3.1 we describe that the amor-
tized cost of a stresser service to provide 1 Gbit/s of at-
tack trafﬁc is $0.74/hr. The Constant attack strategy requires
that we constantly run the DoS attack on each scanner. Tor
runs 5 TorFlow scanners of unknown capacity.
If we as-
sume that they all run on 1 Gbit/s links, then the cost to run
the DoS attack on all 5 scanners for one month would be
$0.74·5·24·31≈$2.8K.
6.6 Discussion
Limitations: A limitation of our study of the effects of
bandwidth DoS on the TorFlow scanners is that we used a
smaller-scale Tor network than that which is publicly acces-
sible (100 relays compared to 6,436). We used a smaller
network primarily due to resource limitations and because
TorFlow takes a signiﬁcant amount of time to scan all relays.
Using a smaller network allowed us to (i) run longer exper-
iments, (ii) scan the network faster because there are fewer
relays to measure, and (iii) complete more scanning rounds.
Due to scale we conﬁgured a single TorFlow instance in
our experiments measuring 10 relays per slice, using 4 par-
allel probe subprocesses, and collecting at least 3 probe mea-
surements per relay; Tor runs 5 TorFlow instances measuring
50 relays per slice while using 9 parallel probe subprocesses
and collecting at least 5 probe measurements per relay. The
process of partitioning a larger set of relays among more
slices and more parallel subprocesses could lead to different
inconsistencies than those captured by our simulations. We
believe that running additional parallel subprocesses would
increase the average bandwidth rate of the TorFlow scanner,
which may increase the effectiveness of a constant attack
strategy. However, the adversary would require additional
bandwidth to attack all or a majority of scanners in parallel.
The Targeted attack requires the ability to estimate when
the fastest slice is being measured and the amount of time re-
quired to measure that slice. These estimates may be compli-
cated by TorFlow’s inconsistent relay partitioning and sub-
process assignment functions and its parallel measurement
processes. In the worst case, the Targeted attack would de-
grade to a Constant attack, which performed best in our ex-
periments anyway and for which we estimated cost in §6.5.
The attacks depend on stresser services delivering a high
rate of trafﬁc to the target, which is not a stealthy operation.
This could potentially trigger automated or manual DoS mit-
igation techniques, and we did not consider how such de-
fenses would affect the attacks. We rely on the assumption
that packets are not ﬁltered upstream from the target scanner,
which may not always be valid (as we will discuss below).
Attack Extension: Our focus in this paper is on relatively
simple and straightforward bandwidth-based DoS attacks.
However, it is possible to extend the attack if we consider a
more powerful adversary. For example, a network-level ad-
versary that can observe connections from a TorFlow scan-
ner can selectively disrupt TorFlow as it is scanning a target
set of relay IP addresses. This would allow an adversary
to selectively increase the time to scan the target set of re-
lays, causing the scanner to detect that those relays are “over-
loaded” and reduce their weights (and therefore the probabil-
ity that those relays are used by clients) accordingly. Such an