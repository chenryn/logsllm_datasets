Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
of Table II), we need to compute the coefﬁcients ci from
equation (3) of the failure probability function f (p) = ε as
explained in Section II-B. This corresponds to enumerating all
the tuples of probes (excluding the output wires) of size 1 to
a threshold cmax and count how many leak more than t-shares
(after cmax, upper and lower bounds on f (p) are obtained, we
refer the readers to [13] for more details on the process and
the threshold). This corresponds to the procedure depicted in
Algorithm 4.
Algorithm 3 IS T NI returns true if G is t-NI and false
otherwise, assuming G has (cid:3) input sharings
for each tuple (cid:2)P of size t in G do
procedure IS T NI(G, t)
I1, . . . , I(cid:2) ← SIS( (cid:2)P )
if |I1| > t or . . . or |I(cid:2)| > t then
return false
return true
Algorithm 4 GETCOEFFSRPS(cid:5) returns an array of cmax cells
where the kth index contains the number of failure tuples of
k probes on n-share gadget G with (cid:3) input sharings
procedure GETCOEFFSRPS(cid:5)(G, cmax)
coeffs ← [0, . . . , 0] of size cmax
for k = 1 to cmax do
for each tuple (cid:2)P of k probes on G do
I1, . . . , I(cid:2) ← SIS( (cid:2)P )
if |I1| > n − 1 or . . . or |I(cid:2)| > n − 1 then
coeffs[k] += 1
return coeffs
(cid:3)
Enumerating all
tuples becomes impractical as soon as
gadgets start growing larger than a few hundred variables,
since the number of tuples of size k in a gadget containing s
variables is
. For instance, checking that a 9-share masked
ISW multiplication containing 279 variables is 8-NI requires
enumerating
being out of reach for modern computers.
(cid:4) ≈ 8 × 1014 tuples, which is not far from
(cid:4)
(cid:3)
279
s
k
8
The rest of the section is organized as follows. In Sec-
tion IV-C, we address dimension reduction techniques pro-
posed in [11], [18] to reduce the search space of the enumer-
ated tuples. In Section IV-D, we present some optimizations of
our implementations that make veriﬁcation faster by reducing
the cost of SIS LR (since the latter is also a building block
for SIS NLR) and parallelizing our procedures. Finally, in
Section IV-E, we introduce a constructive algorithm to gener-
ate failures without having to enumerate all tuples in the case
of linear gadgets.
C. Dimension Reduction
Checking any probing or random probing property requires
enumerating many tuples. For instance, for a gadget G made
of s variables,
tuples need to be checked to assess
whether G is t-NI or not. To reduce the number of tuples
(cid:3)
(cid:4)
s
t
that have to be considered, we remove some variables from
the search. First, as proposed in [11] and further explained
in [18], elementary deterministic probes can be removed when
checking any probing or random probing property. Then, when
checking for probing properties only, we use the “reduced sets”
optimization proposed in [18], which consists in eliminating
some “less powerful” variables from the search. In the full
version of the paper, we recall the principle of those two
optimizations, and show how to make the ﬁrst one work in
the random probing model, and why the second one cannot
be used in this model. Note that the dimension reduction
technique is proved to be sound in [18], which means that our
veriﬁcation technique implementing the optimization remains
sound.
D. Implementation Optimizations
a) On-the-ﬂy Gaussian Elimination: In order to ﬁnd all
failures of a given size, we enumerate all the tuples of that
size, and apply the SIS procedure on each of them. This means
that a full Gaussian elimination has to be performed on each
tuple. However, we generate the tuples in lexicographic order,
which mean that two consecutive tuples only differ only by
their last elements, and, in most cases, only by their very last
element. For two consecutive tuples, it is thus very likely that
most of the Gaussian elimination will be identical. We take
advantage of this by implementing our Gaussian elimination
on the ﬂy: for each tuple, we only recompute the elimination
on the elements that differ from the previous tuple.
The cost of the Gaussian elimination for a single tuple
of k elements of a gadget containing s inputs and randoms
is O(sk2). Performing the elimination on-the-ﬂy brings the
amortized complexity down to O(sk).
A similar, slightly more efﬁcient technique has been used by
[18] to speed up their implementation. They used a revolving-
door algorithm to generate the tuples, so that each consecutive
tuple differs by exactly one element, which allowed them
to amortize the cost of their analysis. However, we cannot
use this revolving-door algorithm because when changing the
ith element of a tuple, the Gaussian elimination needs to be
recomputed from this ith element up to the end of the tuple.
b) Parallelization: Recall that we generate the tuples
in lexicographic order, which admits an efﬁcient unranking
algorithm. This means that we can easily compute what the
jth tuple of size k is, for any j and any k. Multi-threading
the veriﬁcation of n tuples is thus trivial: to run l threads in
parallel, the jth thread starts with the (cid:18)j × n/lth(cid:19) tuple, and
veriﬁes the next (cid:18)n/l(cid:19) tuples.
Our implementation is multi-threaded in this fashion using
POSIX threads, provided by the pthread library. In order
to be transparent from the properties’ point of view (e.g.,
from Algorithms 3 and 4), the multi-threading is done inside
SIS. To this end, we use a few mutexes, which incur an
overhead in the random probing model: the more failures a
gadget contains, the less of a speedup multi-threading offers.
Although it would not be hard to implement multi-threading on
the properties’ side rather than in SIS, we opted for readability
10
151
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: RPS* performance of our new constructive algo-
rithm against our traditional enumerative one
TABLE IV: Maximum t-RPE leakage probabilities tolerated
by some common masking gadgets
Gadget
ISW refresh
ISW add
n log n refresh
ISW mult
refreshed
s
e
r
a
h
S
8
7
8
6
#wires
140
224
100
297
Enumerative
Verif
cmax
time
5min
8
7
9
6
7
18min
1min
2min
38min
Constructive
Verif
cmax
time
3sec
6min
2sec
2min
2sec
2min
8
10
8
9
9
11
6
12min
and maintainability of the code, at the expense of a bit of
performance.
E. Constructive Approach
The enumerative approach of Section IV-B generates a lot
of tuples that are trivial non-failures because they do not
contain enough shares to be failures, or their shares are masked
by random variables. To overcome this issue, we designed a
constructive algorithm to only generate potential failures. We
give a detailed description of this algorithm in Appendix II.
This constructive algorithm is faster than the traditional
enumerative algorithm of Section IV-B when checking (n−1)-
NI and RPS* properties for linear gadgets. Table III shows
the exact performance improvements when checking the RPS*
property on some common linear gadgets (ISW refresh [31],
n log n refresh [9], and an “ISW addition” made of a share-
wise addition preceded by an ISW refresh of each input), and
on an ISW multiplication with a circular refresh on one of the
inputs. On linear gadgets, the constructive algorithm can go
about 2 coefﬁcients further than the enumerative one within
the same time, thus producing much more precise results.
(cid:4) ≈ 7∗1015 tuples of size 9 (for 8-RPS*), which is clearly
Furthermore, the constructive algorithm enables the veriﬁca-
tion of larger, previously out of reach, gadgets. For instance, a
(cid:3)
9-share ISW addition contains 243 variables, and thus contains
243
beyond the capabilities of the enumerative algorithm. Yet, our
constructive algorithm is able to generate all of its failures of
size 9 in 7 minutes.
9
However, on multiplication gadgets, the constructive algo-
rithm is slower than the enumerative one. Table III illustrates
this on an ISW multiplication with an ISW refresh on one of
the inputs. Additionally, the constructive algorithm does not
perform well in terms of performance when checking t-NI or
t-RPS* with t < n − 1, as well as SNI, RPC and RPE. We
explain in Appendix II why this is the case.
V. EVALUATION
To showcase IronMask, we start in Section V-A by pro-
viding new bounds for the maximum RPE leakage probability
tolerated by some common gadgets (in the random probing
model). Then, we compare the scope (Section V-B1) and
performance (Section V-B2) of IronMask and existing ver-
iﬁcation tools: VRAPS and STRAPS in the random probing
Gadget
mult
refresh
add
copy
refresh
add
copy
ISW
[31]
n log n
[9]
circular
refresh [7]
add
copy
[16]
Double-SNI
ISW
[16] mult
s
e
r
a
h
S
5
6
7
5
6
7
5
6
7
5
6
7
4
8
4
8
4
8
5
10
5
5
4
5
5
r
e
d
r
o
.
l
p
m
t A
x
a
m
c
s
e
r
i
w
#
log2 maximum
tolerated proba.
Verif.
time
6
5
5
10
8
7
7
6
6
6
5
4
30
7
8
6
6
4
25
8
9
6
3/2
3/2
2
3
3
4
3
3
4
3
3
4
2
4
2
4
2
4
3
3
3
3
Linear Randomness
180
267
371
50
75
105
110
162
224
105