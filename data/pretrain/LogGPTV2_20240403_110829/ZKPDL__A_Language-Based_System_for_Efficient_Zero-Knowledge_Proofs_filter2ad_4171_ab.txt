5
6
7
8
9
10 proof:
11
12
13
14
15
16
17
18
given: // declarations of public values
group: G = 
elements in G: c[1:3]
for(i, 1:3, commitment to x_i: c_i = g^x_i * h^r_i)
prove knowledge of: // declarations of private values
exponents in G: x[1:3], r[1:3]
such that: // protocol speciﬁcation; i.e. relations
x_1 = x_2 * x_3
In this example, we are proving that the value x1 con-
tained within the commitment c1 is the product of the
two values x2 and x3 contained in the commitments c2
and c3. The program can be broken down in terms of how
variables are declared and used, and the computation and
proof speciﬁcations. Note that some lines are repeated
across the computation and proof blocks, as both are op-
tional and hence considered independently.
4.1.1 Variable declaration
Two types of variables can be declared: group objects
and numerical objects. Names of groups must start with
a letter and cannot have any subscripts; sample group
declarations can be seen in lines 3 and 12 of the above
program. In these lines, we also declare the group gen-
erators, although this declaration is optional (as we will
see later on in Section 5, it is also optional to name the
group modulus).
Numerical objects can be declared in two ways. The
ﬁrst is in a list of variables, where their type is speciﬁed
by the user. Valid types are element, exponent (which
refer respectively to elements within a ﬁnite-order group
and the corresponding exponents for that group), and
integer; it should be noted that for the ﬁrst two of these
types a corresponding group must also be speciﬁed in the
type information (see lines 4 and 13 for an example). The
other way in which variables can be declared is in the
compute block, where they are declared as they are be-
ing assigned (meaning they appear on the left-hand side
of an equation), which we can see in lines 7 and 8. In this
case, the type is inferred by the values on the right-hand
side of the equation; a compile-time exception will be
thrown if the types do not match up (for example, if el-
ements from two different groups are being multiplied).
Numerical variables must start with a letter and are al-
lowed to have subscripts.
4.1.2 Computation
The computation block breaks down into two blocks
of its own: the given block and the compute block. The
given block speciﬁes the parameters, as well as any val-
ues that have already been computed by the user and are
necessary for the computation (in the example, the group
G can be considered a system parameter and the values
x_2 and x_3 are just needed for the computation).
The compute block carries out the speciﬁed compu-
tations. There are two types of computations: picking a
random value, and deﬁning a value by setting it equal to
the right-hand side of an equation. We can see an ex-
ample of the former in line 6 of our sample program;
in this case, we are picking three random exponents in
a group (note r[1:3] is just syntactic sugar for writing
r_1, r_2, r_3). We also support picking a random in-
teger from a speciﬁed range, and picking a random prime
of a speciﬁed length (examples of these can be found
in Section 5). As already noted, lines 7 and 8 provide
In line 8,
examples of lines for computing equations.
the for syntax is again just syntactic sugar; this time
to succintly specify the relations c_1 = g^x_1*h^r_1,
c_2 = g^x_2*h^r_2, and c_3 = g^x_3*h^r_3. We
have a similar for syntax for specifying products or
sums (much like (cid:81) or (cid:80) in conventional mathemati-
cal notation), but neither of these for macros should be
confused with a for loop in a conventional programming
language.
4.1.3 Proof speciﬁcation
The proof block is comprised of three blocks:
the
given block, the prove knowledge of block, and the
such that block.
In the given block, the parame-
ters for the proof are speciﬁed, as well as the public
inputs known to both the prover and veriﬁer for the
zero-knowledge protocol. In the prove knowledge of
block, the prover’s private inputs are speciﬁed. Finally,
the such that block speciﬁes the desired relations be-
tween all the values; the zero-knowledge proof will be
a proof that these relations are satisﬁed. We currently
support four main types of relations:
• Proving knowledge of the opening of a commit-
ment [67]. We can prove openings of Pedersen [65]
or Fujisaki-Okamoto commitments [42, 37]. In both
cases we allow for commitments to multiple values.
• Proving equality of the openings of different com-
mitments. Given any number of commitments, we
can prove the equality of any subset of the values
contained within the commitments.
• Proving that a committed value is the product of two
other committed values [37, 18]. As seen in our
sample program, we can prove that a value x con-
tained within a commitment is the product of two
other values y, z contained within two other com-
mitments; i.e., x = y · z. As a special case, we can
also prove that x = y2.
• Proving that a committed value is contained within
a public range [18, 55]. We can prove that the
value x contained within a given commitment sat-
isﬁes lo ≤ x 
exponents in pkGroup: x[1:L]
integers: stat, modSize
random integer in [0,2^(modSize+stat)): vprime
C := hprime^vprime * for(i, 1:L, *, gprime_i^x_i)
group: pkGroup = 
group: comGroup = 
element in pkGroup: C
elements in comGroup: c[1:L]
for(i, 1:L, commitment to x_i: c_i=g^x_i*h^r_i)
integer: l_x
prove knowledge of:
integers: x[1:L]
exponents in comGroup: r[1:L]
exponent in pkGroup: vprime
for(i, 1:l, range: (-(2^l_x-1)) <= x_i < 2^l_x)
C = hprime^vprime * for(i, 1:L, gprime_i^x_i)
for(i, 1:L, c_i = g^x_i * h^r_i)
Next, the issuer must prove the partial signature is
computed correctly, as in the following program.