图13-14Salcae逻辑分析仪
使用Saleae时，首先将目标设备上的引脚与不同颜色标记的电极相连，然后通过软件客户端
来捕获引脚上的活动情况。软件客户端通过USB接口从Saleac接收数据，得到的结果将以连接
引脚的电极颜色显示在软件界面上，如图13-15所示。
2.MSan
2M
图13-15运行中的 Saleae逻辑分析仪
如果外行觉得这还不够，Saleae还在软件中提供了另外一些实用的功能。比如，它会尝试用
一些滤波器以不同的波特率将捕获到的数据流当作各类协议（包括IC、SPI和UART等）进行
解码，甚至还会尝试自动判断波特率。图13-16展示了Saleae软件通常支持的滤波器。
---
## Page 361
13.1设备的硬件接口
345
W
图13-16Saleae逻辑分析仪中的滤波器
这些滤波器非常像Wireshark中的协议解析器，它们会将捕获到的数据按照各类格式进行解
析，然后展示出来。在Saleae的界面上，甚至还可以看到数据的方波图，如图13-17所示。
TMTT
图13-17Saleae逻辑分析仅的字节展示界面
有了这些功能，就基本上能通过滤波器或肉眼马上识别出UART信号了，因为绝大部分
UART连接传输的都是ASCII文本
最后，Saleae支持将解码后的数据导出为二进制文件，用于解析；还能导出为CSV格式文
件，并附带一些元数据（例如时间、引脚编号等）。这个功能对后续进一步分析和日志记录非
常有帮助。
2.寻找UART引脚分布
UART经常用于输出调试信息、为开发者提供Shell或其他交互终端，因此找出UART引脚
分布非常重要。许多在市场上销售的最终产品不仅包含并启用了这类接口，面且将其引脚很明显
地暴露了出来。在2010年和 2011年，Stephen A.Ridley和 Rajendra Umadras在一系列的报告中
揭示了这一情况。他们研究了纽约市大都会区家庭互联网服务商提供的某一型号电缆调制解调
器。这个系列的家用电缆调制解调器使用了博通BCM3349系列的一款芯片（BCM3349KPB）。
其PCB板上的4根UART引脚都是暴露的，如图13-18所示。
13
---
## Page 362
346
第13章硬件层的攻击
图13-18博通BCM3349的四针接头
在这个案例中，我们还不知道接头的每根引脚分别是什么、有什么用途。保险起见，先将一
个电压计与各个引脚相连，如图13-19所示。
338
图13-19对博通BCM3349的电压测试
这一步是为了确保引脚上不带高电压，以防烧坏分析仪器。另外，完全不带电压的引脚一般
是接地引脚。
图13-19中的电压是3.3伏。通常情况下，对专门给设备供电面不传输数据的线路，引脚的
电压是5伏左右，因此这根引脚很可能（但不确定）是用于数据传输的。这是判断引脚上是否有
串行数据的第一条线索。
接下来，将Saleae的电极连接到每一根存疑的引脚上。Saleae用户界面上每个图形区域的颜
色与不同电极的颜色一一对应，可以很容易地区分出来。接通电缆调制解调器的电源后，Saleae
---
## Page 363
13.1设备的硬件接口
347
就会开始记录数据。常见的一个假设是，在刚刚通电开机启动时，电缆调制解调器会开始输出数
据。多记录几次启动过程后，就可以看到如图13-20所示的针脚方波图。
图 13-20博通 BCM3349 的 Saleae 引I脚测试
在这个图中，红色的Input3的方波非常有规律，这说明红色电极所连接的引脚很可能是一
个时钟引脚。时钟引脚信号通常伴随着数据信号，它们就像演奏数据这种音乐时的节拍器一样。
对接收方来说，将收到数据进行时间同步非常重要。这里规律的方波和旁边Inpu4不规律的方
波说明我们同时观测到了一个时钟引脚和一个数据引脚。
继续使用Saleae的功能，用其自带的滤波器或分析器对这些捕获到的方波进行分析，从而验
如图13-21所示，分析器跑完以后，会在每一节方波上覆盖一个猜测的字节值，并显示猜测
的波特率。
图13-21博通BCM3349用Saleae分析出的字节
---
## Page 364
348
第13章硬件层的攻击
将这些数据输出为计算机中的CSV文件，然后用下面这段简单的Python脚本来清洗数据：
#1/usr/bin/env python
inport csv
thang = **
((.qx, ' ,Aso'ozn1de3"6P0xo6,)uado) zape91°As5 = tepeox
for row in reader:
thang = thang+zow[1]
thang = thang-replace(*\\x*, *\x0d*)
thang = thang-replace(*\\n*,*\xOa*)#clean up Windows CR/LP
thang = thang.replace(**,**) #Cleanse Saleae Csv output quotes
import pdb;pdb.set_trace()  drop into an *in scope* Python interpreter
+print thang
通过这段Python脚本，可以查看导出的CSV数据，并且在熟悉的PythonShell中交互地操
作这些数据。打印thang变量可以产生如图13-22所示的输出。
SARidleys-RacBook-Air:Desktop sa7s./thing-Py
>/Users/sa7/Desktop/thing-py(11)nodule>()lione
--Retur
>inport pdb; pdb.set_tracel)
....'*8M
Signature:′ 'a886
Broadcon*BootLoader′*Version:**2.1.6d'‘release′*Gnu
.6z..oy..aeg..png
'2884
Inage'n*Prograa“Header:
laungeubrs.
'a806
'File*'Length:*756291
'Build''Time:'
2884/5/8**84:33:27*Z
'80010000
sa1Aq..
'CRC:''90cc24ee
Image’2ProgranHeader
Signature:
'Control:'oes
图13-22博通BCM3349的bootloader输出信息
可以看到，从这些引脚上捕获到的数据实际上是设备启动时的引导信息。该设备引导了一个
名为eCos的实时操作系统。两位研究人员指出这款电缆调制解调器上还运行着一个嵌人式Web
服务器，并对该服务器进行了模糊测试。在模测试导致崩溃时，产生的栈回溯信息通过UART
串口打印出来，如图13-23所示。这些信息有助于开发对该设备的漏洞利用。
---
## Page 365
13.1设备的硬件接口
349
r62/e
.20.
r7/a3*
r16/g:
-811965c
21/95
'r17/s1'
22/4
'r18/s2*
ee, ,s, .****. 1q, ,1druu. sO
m
*888225fe*
01364
se1fbes
fron
entry'
.DScete09.
'Return'
sdos, ,aoeu1,.*pusy.$os, ,20, .PT1ent, (eeeeee). .ssauppe,
Task:* ttted
10:
'29
图13-23博通BCM3349的扇溃日志
3.寻找SPI和I²C引脚分布
寻找SPI和IC设备的过程与寻找UART非常类似。但是PCB板上的SPI和I°C一般都是本
地使用，在芯片之间传输数据，这使识别方法稍有不同。它们有时也会离开PCB板，用于外设
（通常是专有外设）通信。一个典型例子是任天堂的Wi控制器，这种游戏主控台通常在有线连
接至游戏主机终端时使用SPI。这种插头的引脚分布如图13-24所示。
时钟
GND
33V→←
一数据
图13-24Wi插头的引男分布
在这些SPI引脚上传输的数据有很大差异，主要取决于设备或者控制器的制造商选择如何
将其格式化。因此，经过IC或SPI的数据完全取决于分析的目标设备。后面将介绍如何噢探这
些总线。
4.寻找JTAG引脚分布
寻找JTAG引脚是一项艰巨的任务。正如前文所述，JTAG串行线缆调试（Serial WireDebugging，
SWD）的引脚分布完全取决于被调试设备的制造商。看一下开发板和评估套件中的标准JTAG接
头，就会明白有多种引脚配置。图13-25给出了最常见的接头。
13
---
## Page 366
350
第13章硬件层的攻击
ARM 10接头
ST14针接头
OCDS 16针接头
ARM20针接头
N 10 02/TRST
TOK
TDI 5]0 o6 TSTAT CPUCLK 5o =6 GND
GND 3∞ o|4 NC
T00 3 0 0 4 GD
TDI 50 0
4GND
VCC 71 0 o 8 /RST
6GND
ICK7.
1MS 9 0 0
1CUX 90 0
GNC
6 ON9
10E5T
TCLK110012 GND
10 GND
TCLK110 =1
 =10 BRK0UT
RTCK11  
10 GND
1/ 00C1001
BRKN13001
12 GND
14 OCDSE
TD013
0