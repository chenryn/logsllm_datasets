::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#con_working-with-instantiated-units_assembly_working-with-systemd-unit-files}使用实例化单元 {.title}
:::
可以在运行时使用单一模板配置文件实例化多个单元。\"@\"字符用于标记模板并与其关联。实例化的单元可以从另一个单元文件（使用
`Requires`{.literal} 或者 `Wants`{.literal} 选项）或者
`systemctl start 命令启动`{.literal}。以下列方式命名实例化服务单元：
``` literallayout
template_name@instance_name.service
```
其中 [*template_name*]{.emphasis} 代表模板配置文件的名称。将
[*instance_name*]{.emphasis}
替换为单元实例的名称。多个实例可以指向带有通用于单元所有实例的配置选项的同一个模板文件。模板单元名称具有以下格式：
``` literallayout
unit_name@.service
```
例如，单位文件中的以下 `Wants`{.literal} 设置：
``` literallayout
Wants=getty@ttyA.service getty@ttyB.service
```
首先为给定服务单元进行 systemd 搜索。如果没有找到这样的单元，\"@\"
和类型后缀间的部分会被忽略，[**[systemd]{.application}**]{.strong} 搜索
`getty@.service`{.literal} 文件，从中读取配置并启动服务。
例如, `getty@.service`{.literal} 模板包含以下指令：
``` literallayout
[Unit]
Description=Getty on %I
…​
[Service]
ExecStart=-/sbin/agetty --noclear %I $TERM
…​
```
当从上述模板中实例化 getty@ttyA.service 和 getty@ttyB.service 时,
`Description`{.literal}= 会被解析为 [**Getty on ttyA**]{.strong} 和
[**Getty on ttyB**]{.strong}。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#important-unit-specifiers_assembly_working-with-systemd-unit-files}重要单元指定符 {.title}
:::
可在任何单元配置文件中使用通配符字符（称为
[**单元指定符**]{.strong}）。单元指定符替换了某些单元参数，并在运行时解释。下表列出了对模板单元特别有用的单元指定符。
::: table
[]{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#tabl-systemd-Unit_Specifiers}
**表 16.5. 重要单元指定符**
::: table-contents
  单元指定符       含义           描述
  ---------------- -------------- ---------------------------------------------------------------------------------------------------------------------
  `%n`{.literal}   完整单元名称   代表包括类型后缀在内的完整单元名称。`%N`{.literal} 具有相同的意义，而且使用 ASCII 代码替换禁止的字符。
  `%p`{.literal}   前缀名称       代表已删除类型为 suffix 的单元名称。对于实例化单元 %p，表示\"@\"字符前的单元名称的一部分。
  `%i`{.literal}   实例名称       是\"@\"字符和类型后缀之间的实例化单元名称的一部分。`%I`{.literal} 具有相同的意义，但也会取代 ASCII 代码禁止的字符。
  `%H`{.literal}   主机名         代表在载入单元配置时的运行系统的主机名。
  `%t`{.literal}   运行时目录     代表运行时目录，对于 `root`{.literal} 用户是 `/run`{.literal}，对于非特权用户是 XDG_RUNTIME_DIR 变量的值。
:::
:::
有关单元指定符的完整列表，请参见 `systemd.unit(5)`{.literal} 手册页。
:::
::: section
::: titlepage
# []{#assembly_working-with-systemd-unit-files_configuring-basic-system-settings.html#_additional_resources_7}其他资源 {.title}
:::
::: itemizedlist
-   [如何编写强制启动特定服务的服务单元文件](https://access.redhat.com/solutions/3120581){.link}
-   [如何决定 systemd
    服务单元定义应该有的依赖项](https://access.redhat.com/solutions/3116611){.link}
-   [是否有关于编写单元文件的有用信息？](https://access.redhat.com/solutions/3120801){.link}
-   [如何为 RHEL 7 和 systemd
    中的服务设置限制](https://access.redhat.com/solutions/1257953){.link}
:::
:::
:::
[]{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings}第 17 章 优化 systemd 以缩短引导时间 {.title}
:::
有一组默认启用的 systemd
单元文件列表。由这些单元文件定义的系统服务会在引导时自动运行，这会影响引导时间。
本节描述：
::: itemizedlist
-   检查系统引导性能的工具。
-   默认启用 systemd 单元以及您可以安全禁用 systemd
    单元以便缩短引导时间的情况。
:::
::: section
::: titlepage
# []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#proc_examining-system-boot-performance_optimizing-systemd-to-shorten-the-boot-time}检查系统引导性能 {.title}
:::
要检查系统引导性能，您可以使用
`systemd-analyze 命令`{.literal}。这个命令有很多可用选项。然而，本节只涵盖所选对
systemd 调整很重要以便缩短引导时间的选择。
有关所有选项的完整列表和详细描述请查看 `systemd-analyze`{.literal} man
page。
::: itemizedlist
**先决条件**
-   在开始检查 systemd
    以调整引导时间之前，您可能需要列出所有启用的服务：
:::
::: title
**流程**
:::
``` literallayout
$ systemctl list-unit-files --state=enabled
```
### []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#_analyzing_overall_boot_time}分析整个引导时间
::: itemizedlist
**流程**
-   有关最后一次成功引导时间的总体信息，请使用：
:::
``` literallayout
$ systemd-analyze
```
### []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#_analyzing_unit_initialization_time}分析单元初始化时间
::: itemizedlist
**流程**
-   有关每个 systemd 单元初始化时间的信息，请使用：
:::
``` literallayout
$ systemd-analyze blame
```
输出会根据在上一次成功引导过程中初始化的时间以降序列出。
### []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#_identifying_critical_units}识别关键单元
::: itemizedlist
**流程**
-   要识别在最后一次引导成功时需要花费最多时间的单元，请使用：
:::
``` literallayout
$ systemd-analyze critical-chain
```
输出突出显示使用红色的引导速度非常慢的单元。
::: figure
[]{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#idm140217686353440}
**图 17.1. systemd-analyze critical-chain 命令的输出**
::: figure-contents
::: mediaobject
![systemd analyze critical](images/systemd-analyze-critical.png)
:::
:::
:::
:::
::: section
::: titlepage
# []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#ref_a-guide-to-selecting-services-that-can-be-safely-disabled_optimizing-systemd-to-shorten-the-boot-time}为选择可安全禁用的服务提供指导信息 {.title}
:::
如果系统的引导时间较长，您可以通过禁用引导时启用的一些服务来缩短这个时间。
要列出这些服务，请运行：
``` literallayout
$ systemctl list-unit-files --state=enabled
```
要禁用某个服务，请运行：
``` literallayout
# systemctl disable service_name
```
然而，某些服务必须启用才能确保操作系统安全，并使其可以正常工作。
您可以使用下面的表格来选择可安全禁用的服务。这个表格列出了在 Red Hat
Enterprise Linux
最小安装中默认启用的所有服务。对于每个服务，它还显示是否可安全禁用这个服务。
表还提供有关可禁用该服务的情况的更多信息，或者您不应该禁用该服务的原因。
::: table
[]{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#idm140217686336336}
**表 17.1. 在 RHEL 最小安装中默认启用的服务**
::: table-contents
  服务名称                                      它可用被禁用吗？   更多信息
  --------------------------------------------- ------------------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  auditd.service                                是                 仅在不需要内核提供审核信息时禁用 `auditd.service`{.literal}。请注意，如果禁用 `auditd.service`{.literal}，则不会生成 `/var/log/audit/audit.log`{.literal} 文件。因此,您无法追溯检查一些常见的动作或事件，如用户登录、服务启动或密码更改。还请注意 auditd 有两个部分：内核部分和服务本身。使用 `systemctl disable auditd`{.literal} 命令，您只是禁用了该服务，而不是禁用内核的部分。要禁用系统审核，请在内核命令行中设置 `audit=0`{.literal}。
  autovt@.service                               否                 这个服务只在真正需要时才运行，因此不需要禁用它。
  crond.service                                 是                 请注意，如果您禁用 crond.service，则不会运行 crontab 中的项目。
  dbus-org.fedoraproject.FirewallD1.service     是                 到 `firewalld.service`{.literal} 的符号链接
  dbus-org.freedesktop.NetworkManager.service   是                 到 `NetworkManager.service`{.literal} 的符号链接
  dbus-org.freedesktop.nm-dispatcher.service    是                 到 `NetworkManager-dispatcher.service`{.literal}的符号链接
  firewalld.service                             是                 仅在不需要防火墙时禁用 `firewalld.service`{.literal}。
  getty@.service                                否                 这个服务只在真正需要时才运行，因此不需要禁用它。
  import-state.service                          是                 仅在不需要从网络存储引导时才禁用 `import-state.service`{.literal}。
  irqbalance.service                            是                 仅在只有一个 CPU 时禁用 `irqbalance.service`{.literal}。不要在有多个 CPU 的系统中禁用 `irqbalance.service`{.literal}。
  kdump.service                                 是                 仅在不需要内核崩溃报告时禁用 `kdump.service`{.literal}。
  loadmodules.service                           是                 除非 `/etc/rc.modules`{.literal} 或 `/etc/sysconfig/modules`{.literal} 目录存在，否则该服务不会在最小 RHEL 安装中启动，否则不会启动该服务。
  lvm2-monitor.service                          是                 仅在您不使用逻辑卷管理器（LVM）时禁用 `lvm2-monitor.service`{.literal}。
  microcode.service                             否                 不要禁用该服务，因为它在 CPU 中提供了 microcode 软件的更新。
  NetworkManager-dispatcher.service             是                 只在不需要在网络配置更改时通知时才禁用 `NetworkManager-dispatcher.service`{.literal} （例如在静态网络中）。
  NetworkManager-wait-online.service            是                 只有在引导后不需要工作网络连接时才禁用 `NetworkManager-wait-online.service`{.literal}。如果启用该服务，则该系统不会在网络连接正常工作前完成引导。这可能会大大延长引导时间。
  NetworkManager.service                        是                 仅在不需要连接到网络时禁用 `NetworkManager.service`{.literal}。
  nis-domainname.service                        是                 仅在不使用网络信息服务（NIS）时禁用 `nis-domainname.service`{.literal}。
  rhsmcertd.service                             否                  
  rngd.service                                  是                 只在您的系统不需要很多熵或者没有任何硬件生成器时禁用 `rngd.service`{.literal}。请注意，在需要大量好熵的环境中，比如用于生成 X.509 证书的系统（如 FreeIPA 服务器）中，该服务是必需的。
  rsyslog.service                               是                 仅在不需要持久性日志，或把 `systemd-journald`{.literal} 设置为持久性模式时，禁用 `rsyslog.service`{.literal}。
  selinux-autorelabel-mark.service              是                 仅在不使用 SELinux 时禁用 `selinux-autorelabel-mark.service`{.literal}。
  sshd.service                                  是                 仅在不需要 OpenSSH 服务器远程登录时禁用 `sshd.service`{.literal}。
  sssd.service                                  是                 仅在没有通过网络登录系统的用户（例如，使用 LDAP 或 Kerberos）时禁用 `sssd.service`{.literal}。如果禁用了 `sssd.service`{.literal}，红帽建议禁用所有 `sssd-*`{.literal} 单元。
  syslog.service                                是                 `rsyslog.service`{.literal} 的别名
  tuned.service                                 是                 仅在需要使用性能调整时禁用 `tuned.service`{.literal}。
  lvm2-lvmpolld.socket                          是                 仅在您不使用逻辑卷管理器（LVM）时禁用 `lvm2-lvmpolld.socket`{.literal}。
  dnf-makecache.timer                           是                 仅在不需要自动更新软件包元数据时禁用 `dnf-makecache.timer`{.literal}。
  unbound-anchor.timer                          是                 仅在不需要每日更新 DNS 安全扩展（DNSSEC）的根信任锚时禁用 `unbound-anchor.timer`{.literal}。Unbound resolver 和 resolver 库使用这个根信任锚器进行 DNSSEC 验证。
:::
:::
要查找有关服务的更多信息，您可以运行以下命令之一：
``` literallayout
$ systemctl cat 
```
``` literallayout
$ systemctl help 
```
`systemctl cat`{.literal} 命令提供位于
`/usr/lib/systemd/system/`{.literal}
下的服务文件的内容，以及所有适用的覆盖。可用的覆盖包括
`/etc/systemd/system/`{.literal}
文件中的单元文件覆盖，或者来自对应的 `unit.type.d`{.literal}
目录中的单元文件覆盖。
有关置入文件的详情，请查看 `systemd.unit`{.literal} man page。
`systemctl help`{.literal} 命令显示特定服务的 man page。
:::
::: section
::: titlepage
# []{#optimizing-systemd-to-shorten-the-boot-time_configuring-basic-system-settings.html#_additional_resources_8}其他资源 {.title}
:::
::: itemizedlist
-   `systemctl`{.literal}(1)man page
-   `systemd`{.literal}(1)man page
-   `systemd-delta`{.literal}(1) man page
-   `systemd.directives`{.literal}(7) man page
-   `systemd.unit`{.literal}(5) man page
-   `systemd.service`{.literal}(5) man page
-   `systemd.target`{.literal}(5) man page
-   `systemd.kill`{.literal}(5)man page
-   [systemd
    主页](http://www.freedesktop.org/wiki/Software/systemd){.link}
:::
:::
:::
[]{#introduction-to-managing-user-and-group-accounts_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#introduction-to-managing-user-and-group-accounts_configuring-basic-system-settings.html#introduction-to-managing-user-and-group-accounts_configuring-basic-system-settings}第 18 章 管理用户和组群帐户简介 {.title}
:::
用户和组群的控制是 Red Hat Enterprise
Linux（RHEL）系统管理的核心元素。每个 RHEL
用户都有不同的登录凭证，并可分配给不同的组以自定义其系统权限。
::: section
::: titlepage
# []{#introduction-to-managing-user-and-group-accounts_configuring-basic-system-settings.html#user-groups-introduction_introduction-to-managing-user-and-group-accounts}用户和组介绍 {.title}
:::
创建文件的用户是该文件的拥有者[*以及*]{.emphasis}该文件的组所有者。这个文件会单独为拥有者、组和组以外的成员分配读、写和执行权限。文件所有者只能由
`root`{.literal} 用户更改。`root`{.literal}
用户和文件拥有者都可以更改对该文件的访问权限。常规用户可以将他们拥有的文件的组群所有权改为他们所属的组。
每个用户都与一个唯一数字身份号关联，称为 [*user ID*]{.emphasis}
([**UID**]{.strong})。每个组都与一个 [*group ID*]{.emphasis}
([**GID**]{.strong})关联。组群中的用户共享相同的读取、写入和执行该组所拥有的文件的权限。
:::
::: section
::: titlepage
# []{#introduction-to-managing-user-and-group-accounts_configuring-basic-system-settings.html#configuring-reserved-user-and-group-ids_introduction-to-managing-user-and-group-accounts}配置保留的用户和组群 ID {.title}
:::
RHEL 为系统用户和组保留在 1000 以下的用户和组群 ID。您可以在
`setup`{.literal} 软件包中找到保留的用户和组群
ID。要查看保留的用户和组群 ID，请使用：
``` screen