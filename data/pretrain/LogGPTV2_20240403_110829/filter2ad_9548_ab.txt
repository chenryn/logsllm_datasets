    1. 客户端发出一个 client hello 消息，携带的信息包括：
        所支持的SSL/TLS 版本列表；支持的与加密算法；所支持的数据压缩方法；随机数A;
    2. 服务端响应一个 server hello 消息，携带的信息包括：
        协商采用的SSL/TLS 版本号；会话ID；随机数B；服务端数字证书 serverCA；
        由于双向认证需求，服务端需要对客户端进行认证，会同时发送一个 client certificate request，表示请求客户端的证书；
    3. 客户端校验服务端的数字证书；校验通过之后发送随机数C，该随机数称为pre-master-key，使用数字证书中的公钥加密后发出；
        由于服务端发起了 client certificate request，客户端使用私钥加密一个随机数 clientRandom随客户端的证书 clientCA一并发出；
    4. 服务端校验客户端的证书，并成功将客户端加密的随机数clientRandom 解密；
        根据 随机数A/随机数B/随机数C(pre-master-key) 产生动态密钥 master-key，加密一个finish 消息发至客户端；
    5. 客户端根据 同样的随机数和算法 生成master-key，加密一个finish 消息发送至服务端；
    6. 服务端和客户端分别解密成功，至此握手完成，之后的数据包均采用master-key进行加密传输。
详细内容参考 [SSL/TLS算法流程解析](https://www.cnblogs.com/littleatp/p/6219630.html)
然而，由于比特币官方的理念为“钱包”用户的身份应该是严格限定的，所以其在设计之初就保证了用户的身份是合法的，所以其SSL在后续的版本中并没有进行维护。
#### 2 站间协议（station to station）
由于P2P之间的信息传递不可避免的要进行TCP连接，所以保证其连接的安全性是尤为重要的。然而我们如何保证会话的前向安全性呢？具体的算法流程是如何实现的呢？
站间协议（station to station）是秘钥协商方案，其基于经典的DH秘钥交换算法，提供了秘钥与实体的认证。
也保证了秘钥的前向安全性。
    对于前向安全性，我们简单总结为：A与B之间的所有会话均有一个公共秘钥。但是假如我的这个公共秘钥丢失了那么我之前的所有会话均会被泄密。所以我们在每次会话过程中需要根据公共秘钥来生成一个“会话秘钥”，而需要根据这个会话秘钥来进行当前会话。
  * 1 建立连接之前，A与B双方需要设置好共享的数据（Diffie-Hellman算法），包括`双方的公钥、大素数n、发生器g`。
  * 2 节点A生成随机数x，计算并将指数g^x发送给节点B。
  * 3 节点B生成随机数y，计算指数g^y。
  * 4 节点B计算共享秘钥 `K = (g^x)^y。
  * 5 B计算(g^y , g^x)，并用B的私钥签名，然后用共享秘钥K加密（这里是两层）。然后将`密文、g^y`发送给A。
  * 6 节点A使用B的公钥验证B的签名。
  * 7 A将(g^x , g^y)使用A的私钥签名，然后用K加密，传送给B（跟步骤5相似）。
  * 8 B用A的公钥验证信息的来源是否是A。
  * 9 至此，A与B互相认证过，并且有共同的秘钥。之后就可以使用K进行会话加密。
由于传统的DH秘钥交换协议没有设计验证部分，所以很大可能会存在中间人攻击的情况。但是STS就很好的经过协商设计添加了对对方身份验证的过程，来避免了中间人攻击的可能。
而协议中使用密码学“离散对数问题”来保证其安全性。即正向计算`C = F(M)`容易，但是在不知道秘钥K的情况下计算`M = F^-1(C)`是困难的。
    例如上述图中，a，b不泄露只是传递x与y的话，任何人是没有办法通过结果x，y来推出秘密a，b。
#### 3 Sphinx协议
Sphinx是由学术研究者George Danezis和Ian
Goldberg设计的一种协议，用于在一种点对点网络上转播匿名信息。这种解决方案于2009年5月首次被提出，最初与闪电网络甚至比特币没有任何关系。闪电实验室的Olaoluwa
Osuntokun意识到Sphinx可以被利用，他与Blockstream的Christian Decker合作对这种协议进行了修改从而更好地适配闪电网络。
Sphinx与著名的匿名化通信工具Tor（洋葱路由）具有很多相似之处。与Tor一样，使用Sphinx发送的所有数据包都可以进行加密——包括接收的IP地址。然后这种加密要进行好几次，直到产生多个‘加密层’（所以用‘洋葱’来比喻Tor）。
通过使用聪明的加密技巧，所有的加密层都被应用，从而每个沿着路由朝向最终加密包目的地的中介都只能打开一个‘加密层’。这一层会向中介展示要将这个加密包转向何处。（与Tor相比，Sphinx使用经过改进的加密算法，并创建了一种大小固定的数据包来更好地模糊路由中节点的位置。）
简单来说，Sphinx协议是中间传话的人并不知道起点和终点，它们只知道上一个人已经下一个人。
    例如我们儿时在教室向其他人传纸条。假设两个人隔的很远，那么我传递纸条的时候要在中间经过许多人的手。但是我纸条的内容又不能让其他人看到，所以此时我就要想办法既能传出去，又不会泄露。
下面请看我分析。
`假设A要给D传纸条，那么中间有 A B C D E。`
    这里要用到公钥的思想，假如我的ABCDE均会配合我传递信息。那么我A首先要计算路径，嗯，，A说：“我发现最近的传递方法是经过 B C D到E”。于是他就要开始处理自己的消息了。
    假设消息为M。公钥分别为Pa Pb Pc Pd Pe。地址分别为Addr_a，Addr_b，Addr_c，Addr_d，Addr_e。
    之后A进行倒序操作，先使用E进行处理。Pe(M)---对M用e的私钥加密。之后用D的消息处理。 Pd(Addr_e , Pe(M))........直到最后用B的私钥签名Pb(xxxxxxx)。
    至此，A就可以将处理过的消息以此传递，首先给B，B解密后发现地址是C，所以B传递给C。C解密后给D.........直到到了E处，E解密得到消息。每个参与者只知道各自这一跳的前一个和下一个节点。
### 四、区块链中P2P的应用
根据我们上述的内容可以知道，像比特币、以太坊这样的公链是需要节点自由进出的，所以其不存在使用P2P加密的可能。
但是比特币其匿名性不足的缺点[区块链安全—匿名性以及隐私性](https://xz.aliyun.com/t/2874)
对于处理区块链隐私性的问题，现在比较有前景的解决方案是闪电网络 + Sphinx协议。
闪电网络的本质是在比特币主链外建立可以双向流动的微支付通道，币可以跨节点传递。将大量小额放到闪电网络上，减少主链的负荷并提高小额交易的速度。
闪电网络实现了一种基于称为Sphinx的方案的洋葱路由协议。该路由协议确保支付发送者可以通过闪电网络构建和通信路径，使得：
  * 中间节点可以验证和解密其部分路由信息，并找到下一跳。
  * 除了上一跳和下一跳，他们不能了解作为路径一部分的任何其他节点。
  * 他们无法识别支付路径的长度，或者他们自己在该路径中的位置。
  * 路径的每个部分被加密，使得网络级攻击者不能将来自路径的不同部分的数据包彼此关联。
  * 不同于Tor（互联网上的洋葱路由匿名协议），没有可以被监视的“退出节点”。付款不需要传输到比特币区块链，节点只是更新通道余额。
而将Sphinx与闪电网络结合后，将网络中的数据包进行多次加密，闪电网络中间层只能打开相应的加密层，这一层主要是展示这个包的路由信息。这样就实现了在网络上隐藏详细的交易细节。
### 五、参考链接
  * 1 
  * 2 
  * 3 
  * 4 
  * 5 
**本稿为原创稿件，转载请标明出处。谢谢。**