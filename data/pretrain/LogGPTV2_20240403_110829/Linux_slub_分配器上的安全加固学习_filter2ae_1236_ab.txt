                    p->addr=0;
                    p->size=addsize;
                    p->buf=buf;
                    ioctl(fd,ADD_ANY,p);
                    loglx("kmalloc: ",buf64[0]);
                    break;
                case 2:
                    printf("free addr: ");
                    scanf("%lx",&freeaddr);
                    loglx("read ",freeaddr);
                    p->addr=freeaddr;
                    ioctl(fd,DEL_ANY,p);
                    break;
                case 3:
                    exit(0);
                    break;
            }
        }
        close(fd);
        logs("wtf","aaaaa");
        return 0;
    }
## CONFIG_SLAB_FREELIST_HARDENED 配置下
okay，我们先看第一个，需要在内核的`.config` 文件中添加`CONFIG_SLAB_FREELIST_HARDENED=y` 编译选项
在这个配置下, `kmem_cache` 增加了一个unsigned long类型的变量random.
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
        unsigned long random;
    #endif
在[mm/slub.c](https://elixir.bootlin.com/linux/v5.4/source/mm/slub.c) 文件,
`kmem_cache_open`的时候给random字段一个随机数
    static int kmem_cache_open(struct kmem_cache *s, slab_flags_t flags)
    {
        s->flags = kmem_cache_flags(s->size, flags, s->name, s->ctor);
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
        s->random = get_random_long();
    #endif
`set_freepointer` 函数中加了一个`BUG_ON`的检查，这里是检查double free的，当前free 的object 的内存地址和
`freelist` 指向的第一个object 的地址不能一样,这和glibc类似。
    static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)
    {
        unsigned long freeptr_addr = (unsigned long)object + s->offset;
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
        BUG_ON(object == fp); /* naive detection of double free or corruption */
    #endif
        *(void **)freeptr_addr = freelist_ptr(s, fp, freeptr_addr);
    }
接着是`freelist_ptr`, 它会返回当前object 的下一个 free object 的地址， 加上hardened
之后会和之前初始化的random值做异或。
    static inline void *freelist_ptr(const struct kmem_cache *s, void *ptr,
                     unsigned long ptr_addr)
    {
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
        return (void *)((unsigned long)ptr ^ s->random ^
                (unsigned long)kasan_reset_tag((void *)ptr_addr));
    #else
        return ptr;
    #endif
    }
我们实际调试看看，我们只用一个CPU, 然后kmalloc的大小是 1k,启动exp之后的内存状态如下
`random` 的值为 `0xed74254a6ccbe301` free object 上保存不再是下一个free object
的地址，而是一个看起来乱七八糟的数字，参考前面的`(void *)((unsigned long)ptr ^ s->random ^(unsigned
long)kasan_reset_tag((void *)ptr_addr))`
加上hardened 之后
`下一个free object的地址` = `random` ^ `当前free object的地址` ^ `当前free object 原本fd处的值`
计算一下`hex(0xed74254a6ccbe301^0xed74254a6ccbef01^0xffff88800d7ce400)`
可以得到`0xffff88800d7ce800` 也就是下一个free object 的地址。
也就是说`CONFIG_SLAB_FREELIST_HARDENED` 就是加了个给 `fd`
指针异或加了个密，这样如果有溢出就读不到内存地址，要溢出覆盖因为不知道`random`的值也很难继续利用。
我们继续看另外一个安全加固
## CONFIG_SLAB_FREELIST_RANDOM 配置下
同样，这里需要改`.config`文件，加上`CONFIG_SLAB_FREELIST_RANDOM=y`,
简单期间，我们加上`CONFIG_SLAB_FREELIST_HARDENED=n`
这个配置下，`kmem_cache` 会添加一个 unsigned int 类型的数组
    #ifdef CONFIG_SLAB_FREELIST_RANDOM
        unsigned int *random_seq;
    #endif
具体代码实现在[mm/slab_common.c](https://elixir.bootlin.com/linux/v5.4/source/mm/slub_common.c)
以及[mm/slab.c](https://elixir.bootlin.com/linux/v5.4/source/mm/slub.c)里，首先是初始化
    static int init_cache_random_seq(struct kmem_cache *s)
    {
        unsigned int count = oo_objects(s->oo);
        int err;
    ...
        if (s->random_seq)
            return 0;
        err = cache_random_seq_create(s, count, GFP_KERNEL);
    ...
        if (s->random_seq) {
            unsigned int i;
            for (i = 0; i random_seq[i] *= s->size;
        }
        return 0;
    }
    /* Initialize each random sequence freelist per cache */
    static void __init init_freelist_randomization(void)
    {
        struct kmem_cache *s;
        mutex_lock(&slab_mutex);
        list_for_each_entry(s, &slab_caches, list)// 对每个kmem_cache
            init_cache_random_seq(s);
        mutex_unlock(&slab_mutex);
    }
`init_cache_random_seq`函数先找出当前`kmem_cache`一个slab 里会有多少object(`oo&0xffff`) ,
`cache_random_seq_create`会根据object的数量给`random_seq`
数组分配内存，初始化为`random_seq[index]=index`, 然后把顺序打乱再乘object的大小
    /* Create a random sequence per cache */
    int cache_random_seq_create(struct kmem_cache *cachep, unsigned int count,
                        gfp_t gfp)
    {
        struct rnd_state state;
        if (count random_seq)
            return 0;
        cachep->random_seq = kcalloc(count, sizeof(unsigned int), gfp);
        if (!cachep->random_seq)
            return -ENOMEM;
        /* Get best entropy at this stage of boot */
        prandom_seed_state(&state, get_random_long());
        freelist_randomize(&state, cachep->random_seq, count);
    }
    static void freelist_randomize(struct rnd_state *state, unsigned int *list,
                       unsigned int count)
    {
        unsigned int rand;
        unsigned int i;
        for (i = 0; i  0; i--) {
            rand = prandom_u32_state(state);
            rand %= (i + 1);
            swap(list[i], list[rand]);
        }
    }
然后在每次申请新的slab 的时候，会调用`shuffle_freelist` 函数，根据`random_seq` 来把 `freelist`
链表的顺序打乱，这样内存申请的object 后，下一个可以申请的object的地址也就变的不可预测。
        cur = next_freelist_entry(s, page, &pos, start, page_limit,
                    freelist_count);
        cur = setup_object(s, page, cur);
        page->freelist = cur;
        for (idx = 1; idx objects; idx++) {
            next = next_freelist_entry(s, page, &pos, start, page_limit,
                freelist_count);
            next = setup_object(s, page, next);
            set_freepointer(s, cur, next);
            cur = next;
        }
        set_freepointer(s, cur, NULL);
同样的，我们调试一下看看实际的运行效果, 程序运行 后的slab状态如下，7个free object 以及一个在partial 链表上
不断调kmalloc 把 free object 消耗完, 再次kmalloc 就会重新分配一个 slab
可以看到我们kmalloc得到的是`0xffff88800d7df800` 这个地址， 接着下一个是`0xffff88800d7dfc00`,
然后就变成了`0xffff88800d7de000`,并不是连续的，仔细看我们还可以发现其实`0xffff88800d7df800-0x1800`
和`0xffff88800d7dfc00-0x1c00`结果是一样的, 和`random_seq` 的取值关联上了。
## 小结
我们主要分析了Linux
slub分配器上的两种安全加固，默认情况下这两个机制都会开启。虽然两个机制都不是很复杂，但是加上之后，内核slab溢出等内存相关的漏洞利用难度就会加大很多，对系统的安全防护还是有很大作用的。
## reference