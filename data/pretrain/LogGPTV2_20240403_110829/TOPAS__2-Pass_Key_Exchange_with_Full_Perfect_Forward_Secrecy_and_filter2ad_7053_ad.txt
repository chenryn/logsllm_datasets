1 and gzi
2 )r = gv
2 )s/(gz3
2/(gz2
The simulator will randomly choose one party, Bob, to be the
peer of the test-session. Since there is only a polynomial number
of peers, the simulator’s guess is correct with non-negligible prob-
ability. Throughout the following, we therefore assume that Bob
will not be corrupted by the adversary. Similarly, the simulator will
guess the test-session with non-negligible probability.
We will consider two different types of attack strategies. Either
the attacker tries to launch a KCI attack or a reﬂection attack. We
exploit that security under KCI attacks implies security in the sense
of Deﬁnition 7. (The only difference is that the attacker may in a
KCI attack additionally request the secret key of Alice.) The proofs
for both attack types are slightly distinct in the extraction phase.
For ease of exposition, we describe a simulation strategy which is
for the most part valid for both attack types. We clearly mark when
and how the simulation strategies differ in the extraction phase. For
better overview, in both cases we always ensure that the peer (Bob)
of the test-session which is either held by Alice(cid:54)=Bob (in case of
KCI attacks) or Bob himself (when dealing with reﬂection attacks)
remains uncorrupted. Let us now present the general setup.
1
1 = ˆgzri
SETUP AND SIMULATION OF QUERIES. We will ﬁrst show how
the simulator will setup all parameters to be able to answer Corrupt
queries for any party except Bob. To this end, the simulator pro-
grams the outputs of the random oracle H for all inputs except for
idB as follows: given input idi it chooses a random value ri ∈ Zp
and outputs H(idi) := gri
. In this way, the simulator can
always compute a corresponding secret key as ski = ˆgri
1 and sim-
ulate the Register and Corrupt queries. However, for idB it sets
for some random rB ∈ Zp. Observe that the
−rB
H(idB) = ˆg
1
simulator does not know the corresponding secret key of Bob. In
almost all protocol runs the simulator makes sessions (except for
those whose holder is Bob) compute their messages and keys as
speciﬁed in the protocol description. In this way it can also answer
all Reveal queries (because the simulator knows the secret key of
any party except for Bob).
To compute messages in sessions where Bob is the session holder
(we denote the message produced by this session b), the simulator
does the following. It chooses a random b(cid:48) ∈ Zp and computes
= gb(cid:48)+rB /z
1 . It then holds that bz/H(idB) = ˆgzb(cid:48)+rB
b = ˆgb(cid:48)
.
1 (H(idB))1/z is
Observe that now the secret exponent y in b = gy
not known to Bob (i.e. the simulator that simulates Bob) as
1
1
(cid:48)
y = b
/z + rB/z2.
Observe that, as a consequence, the simulator cannot compute k
on behalf of Bob anymore when only given message a in case a is
produced by the adversary in an active attack.
SIMULATING REVEAL QUERIES FOR BOB. Let us show now how
the simulator can successfully simulate sessions (and in particular
Reveal queries) involving Bob (and the adversary). To this end
we ﬁrst show that, although the simulator cannot compute k, it can
nevertheless always compute k = kz2 even when the adversary A
makes Bob engage in a communication with Bob himself. Recall
that
(cid:16)
(cid:17)
 e
e(cid:0)H(idA), gz2
a, gz3
2
2
y
(cid:1)
.
kB =
Now, independent of whether a has been computed by Bob (when
considering reﬂection attacks), a session of any other party, or the
adversary, the simulator can compute kB for y = b(cid:48)/z + rB/z2 as
(cid:16)
(cid:17)
(cid:16)
e
kB =
e
a , gyz3
2
H(idA) , gyz2
2
(cid:17) =
e
e
(cid:16)
(cid:18)
(cid:16)
a ,
gz2
2
(cid:17)b(cid:48)·(gz
(cid:19)
2 )b(cid:48)·(g2)rB
2 )rB
(cid:17) .
H(idA) , (gz
12302 )s/(gz3
In the next step, we show that the simulator which knows k can
check, given k, k(cid:48), if indeed k = kz2 and k(cid:48) = kv. To this end
we apply a variant of the trapdoor test that was introduced in [10].
Recall that we have h2 = gv
2 =
2 )r for v = s − rz2 unknown to the simulator. We will
(gz
= k ∧ kv = k(cid:48)
now show that with overwhelming probability kz2
= k ∧ kv = k(cid:48). Then
iff k
r
= ks which shows the
k
k(cid:48) = ks. Observe that since
ﬁrst direction. Next assume that k
k(cid:48) = ks. First assume that kz2
ks−rz2
(cid:16)
kz2(cid:17)r
2 )r and hz
2 = gvz
2 = gs
2/(gz2
k(cid:48) =
kv =
r
r
(cid:16)
kz2(cid:17)r
k/kz2(cid:17)r
= kv/k
(cid:48)
s = v + rz2 we get that(cid:16)
(1)
(cid:16)
k/kz2(cid:17)r
while r is information-theoretically hidden from the adversary. Now
if k = kz2 this must imply kv = k(cid:48). In case k (cid:54)= kz2,
is uniformly distributed in GT (for random r) while kv/k(cid:48) is ﬁxed.
Thus the success probability of an adversary to produce k, k(cid:48) such
that Equation 1 is fulﬁlled is upper bounded by 1/p which is negli-
gible.
So we have now showed that the simulator can always compute k
and always check whether a given pair k, k(cid:48) happens to be “correct”
= k ∧ kv = k(cid:48).
(with respect to some session) in the sense of kz2
Let us next describe the strategy of the simulator to program the
second random oracle, H(cid:48), and answer Reveal queries to sessions
involving idB. The main problem is to keep the outputs of the
random oracle and the outputs to the Reveal queries consistent.
The simulator maintains two lists R and S which are initially both
empty. In R we store queries to the random oracle H(cid:48) and the cor-
responding answers. In S we simply store session-ids. Let us ﬁrst
describe the basic strategy. Whenever, the attacker queries the ran-
dom oracle with input xi we look up if there is some entry (xi, yi)
already in R. In case it is not, we generate and output a new ran-
dom string yi and add (xi, yi) to R. If (xi, yi) is already in R we
output yi. To compute session-keys for session-id idA, idB, a, b we
proceed as follows. We look up if there is some entry (ui, vi) with
ui = (idA, idB, a, b) already in S. In case it is not, we generate and
output a new random string vi and store (ui, vi) in S. If (ui, vi)
is already in S we output vi. The challenge now is that we have to
make sure that the answers stored in S and R remain consistent. In
particular, sometimes the outputs stored in S and R must be identi-
cal. (For example, imagine an adversary that successfully computes
the values k, k of some session with session-id idA, idB, a, b. Ob-
viously, querying xj = (k, k(cid:48), idA, idB, a, b) to the random oracle
must produce the same output as when asking the Reveal query
to session idA, idB, a, b.) To cope with such situations we need
to perform additional checks. So whenever we receive a query
xi = (k, k(cid:48), idA, idB, a, b) we additionally check whether there
is a corresponding query in S with uj = (idA, idB, a, b) such that
= k ∧ kv = k(cid:48) for the corresponding k value of that ses-
kz2
sion. On success we output yi = vj as stored in S. Otherwise we
output a random yi. On the other hand, whenever we encounter a
Reveal query for some session held by Bob we can always com-
pute ui = (idA, idB, a, b) and k. Next we also check whether
there is some entry (xj, yj) with xj = (k, k(cid:48), idA, idB, a, b) such
= k ∧ kv = k(cid:48). On success, we output vi = yj as
that again kz2
stored in R, otherwise we output a random vi.
EXTRACTION. Now that we have showed how to simulate all at-
tack queries, let us proceed to showing how the simulator extracts
a solution to the CBDHI challenge. From this point on, we cover
KCI attacks and reﬂection attacks separately. Either the test session
is held by Alice(cid:54)=Bob or Bob.
First we show how the simulator can extract a solution if the
test-session is held by Alice. For this session we deviate in the
simulation of the test-session from the general simulation strategy
that is described above. Instead of generating a honestly as a =
1 H(idA)1/z the simulator computes a as a = ˆga(cid:48)
1 H(idA)1/z for
gx
some random a(cid:48) ∈ Zp. Observe that now the discrete logarithm x
1 H(idA)1/z is implicitly set to x = a(cid:48)/z.
in a = gx
Suppose that the adversary has non-negligible success probabil-
ity when querying the Test query to this sessions. In particular, it
can decide whether the key provided by the Test query is the real
session key or a random key from the same key space. We know
that the attacker must ask the correct k, k(cid:48) values with respect to
the test-session to H(cid:48). With y = b(cid:48)/z + rB/z2 and x = a(cid:48)/z the
simulator in this way obtains k such that
k = e(g1, g2)xyz = e(ˆg1, ˆg2)xyz2
= e(ˆg1, ˆg2)a(cid:48)/z·(b(cid:48)/z+rB /z2)·z2
= e(ˆg1, ˆg2)a(cid:48)b(cid:48)+a(cid:48)rB /z.
From this we can easily compute a solution d to the CBDHI as-
sumption as
(cid:16)
−a(cid:48)b(cid:48)(cid:17)1/a(cid:48)rB
d =
ke(ˆg1, ˆg2)
= e(ˆg1, ˆg2)1/z.
z+w
Let us now show how to extract a solution to the GCBDHI chal-
lenge if the test-session is held by Bob. Recall that the GCBDHI
challenge also contains w ∈ Zp and the task is to compute the
z2 . In this case we already have that each mes-
value e(ˆg1, ˆg2)
sage output by Bob is constructed as b = ˆgb(cid:48)
1 for random b(cid:48). Now
for the test-session we slightly deviate and set a as a = ˆga(cid:48)
for
a(cid:48) ∈ Zp with a(cid:48) = rBw − b(cid:48) (i.e. such that rB/(a(cid:48) + b(cid:48)) = w).
−rB
1 H(idB)1/z =
Recall that H(idB) = ˆg
1
1 · ˆg
1 for random
gx
b(cid:48), implying y = b(cid:48)/z + rB/z2. This time the simulator obtains
the value k from the queries to the random oracle such that
to x = a(cid:48) + rB/z. Also assume that b = ˆgb(cid:48)
. This sets x in a = gx
−rB
1
1 ˆgrB
1
k = e(g1, g2)xyz = e(ˆg1, ˆg2)xyz2
= e(ˆg1, ˆg2)(a(cid:48)+rB /z)·(b(cid:48)/z+rB /z2)·z2
= e(ˆg1, ˆg2)a(cid:48)b(cid:48)+(a(cid:48)+b(cid:48))rB /z+(rB )2/z2
.
We now easily get a solution to the GCBDHI assumption as
(cid:16)
ke(ˆg1, ˆg2)
−a(cid:48)b(cid:48)(cid:17)1/(a(cid:48)+b(cid:48))rB
= e(ˆg1, ˆg2)
z+rB /(a(cid:48)+b(cid:48) )
z2
= e(ˆg1, ˆg2)
z+w
z2 .
This concludes the proof of security.
ENHANCED WEAK PFS. Let us now show that TOPAS provides
enhanced weak PFS. The proof is relatively straight-forward.
THEOREM 2. TOPAS provides enhanced weak forward secre-
cy under the CBDH assumption.
PROOF. Except for the generation of two messages a and b, the
simulator can setup everything as speciﬁed in the protocol descrip-
tion. As before, with non-negligible success probability a is the
message sent by the test-session and b is the message received by
the test-session.
(In contrast to the previous proof the simulator
will now also know the secret key of Bob and the master secret
z.) Since almost everything is computed as speciﬁed in the proto-
col description and since the session key is expired the simulator
1231can answer all queries of the attacker. We exploit that for enhanced
weak PFS security we can assume that a and b may not be produced
or modiﬁed by the adversary. Let gx
1 be the CBDH challenge.
The simulator computes
1 , gy
a = gx
1 H(idA)1/z and b = gy
1 H(idB)1/z.
We now have that k = e(g1, g2)xyz. As before, any success-
ful adversary must query this value to the random oracle H(cid:48) be-
fore answering the test-query. The simulator can guess with non-