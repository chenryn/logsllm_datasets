**相关文章**
- [JWT究竟是什么呢?](https://blog.fundebug.com/2018/07/12/what-is-jwt/)
- [五分钟带你了解啥是JWT](https://zhuanlan.zhihu.com/p/86937325)
- [JSON Web Token 入门教程](https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html)
**什么是 JWT**
JWT，全称 JSON Web Token，是一套开放的以 JSON 为基础的 Token 认证标准。什么是 Token 认证呢？比如，服务器可以生成一个 Token，该 Token 具有 “以管理员身份登录” 的申明，并将其提供给客户端，客户端可以使用该 Token 来证明它是管理员的身份并登入。
简单地说，JWT 是一个字符串，我们在发起网络请求时，将其放在 header 或者 url 中，这样可以保证传递的数据被篡改时能被我们发现，保证安全性。
示例 xxxxx.yyyyy.zzzzz 即为 JWT
```
http://www.example.com/private/?token=xxxxx.yyyyy.zzzzz
```
当收到 JWT 时，可以采用同样的算法和密钥生成签名 signature，如果一致，说明数据没有被篡改。
很重要一点在于，JWT 是用于验证而非加密，任何人即使没有密钥 secret，header 与 payload 中的数据都是可以获取的。
JWT 的 Token 由三部分组成，Header，Payload 与 Signature，它们之间用 “.” 连接, 如下:
```
header.payload.signature
```
### Header
Header 对象用于标识生成签名的算法，其中 “alg” 字段表示签名的加密算法，一般默认是 HMAC SHA256，也有简称为 HS256 的。
“typ”字段表示这个 Token 的类型，JWT 的 Token 统一这里填写的为“JWT”。
alg 为算法的缩写，typ 为类型的缩写
```json
{
    "alg": "HS256",
    "typ": "JWT"
}
```
然后，这个 JSON 被 Base64 编码，形成 JSON Web Token 的第一部分。
### Payload
payload 为 JWT 的第二部分，其 JSON 对象包含一系列键值对(key/value)，存放的是真正需要传递的数据。其中包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明。声明有三种类型: registered, public 和 private。
- Registered claims : 这里有一组预定义的声明，它们不是强制的，但是推荐。比如：iss (issuer), exp (expiration time), sub (subject), aud (audience)等。
- Public claims : 可以随意定义。
- Private claims : 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明，也可以随意定义。
Registered claims 有特殊含义，比如 iat、exp 等，iat 表示 JWT 生成的实际，而 exp 代表 JWT 过期的时间。开发者可以使用其他非预定义的键用于传输数据。JWT规定了以下7个官方可选字段，但并不强制使用(声明名称都是三个字符)
* iss (issuer)：签发人
* exp (expiration time)：过期时间
* sub (subject)：主题
* aud (audience)：受众
* nbf (Not Before)：生效时间
* iat (Issued At)：签发时间
* jti (JWT ID)：编号
除了上述的7个字段，用户可以在这个部分自定义 Public claims 和 Private claims，例如：
```json
{
  "sub": "123456789",
  "name": "shiroshiro",
  "admin": false
}
```
以上两个字段都要最后经过 Base64 编码转换成字符串后才能当做 JWT Token 使用，但要注意的是 Base64 编码是可逆的，所以说任何人都可读到这两段的内容。
### Signature
signatrue，即签名，是 JWT 的第三部分。它由编码的 header 和 payload，使用用户指定的密钥 secret，采用 header 中指定的哈希算法生成。
signature 是根据 payload 生成的，两者是一一对应的，这样可以保证 payload 的数据不被篡改，除非密钥 secret 泄漏。
首先定义一个密钥，这个密钥由服务器保存，也只有服务器知道，不能泄露给用户。然后使用 Header 里面指定的签名算法生成签名，例如：
```
HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)
```
然后将这部分 base64 编码形成 JSON Web Token 第三部分
算出签名后使用 '.' 连接三段字符串，这就是 JWT Token 的结构。
### JWT 黑名单
**JWT 黑名单是什么**
同一时间只允许登录唯一一台设备。例如设备 A 中用户如果已经登录，那么使用设备 B 登录同一账户，设备 A 就无法继续使用了。
---
## OAuth
OAuth 协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是 OAuth 的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此 OAuth 是安全的。OAuth 是 Open Authorization 的简写。OAuth 已经有 2.0 版本了，2007 年发布了 OAuth1.0 协议，2011 年发布会了 OAuth2.0，2.0 与 1.0 之间不兼容。OAuth2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。
**相关文章**
- [理解OAuth 2.0](https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)
- [OAuth 2.0 的一个简单解释](https://www.ruanyifeng.com/blog/2019/04/oauth_design.html)
- [关于 OAuth2.0 安全性你应该要知道的一些事](https://www.chrisyue.com/security-issue-about-oauth-2-0-you-should-know.html)
- [OAuth 2.0 的四种方式](https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html)
- [OAuth2.0 认证](https://mp.weixin.qq.com/s/JYb26bWL99i46Bc77rCKUQ)
**OAuth 的应用举例**
开发者 A 注册某 IT 论坛后，发现可以在信息栏中填写自己的 Github 个人信息和仓库项目，但是他又觉得手工填写十分麻烦，但是直接提供 Github 账户和密码给论坛又是非常危险的事情。开发者 A 发现在该论坛处，可以点击 “导入” 按钮，授权该论坛访问自己的 Github 账户并限制其只具备读权限。这样一来， Github 中的所有仓库和相关信息就可以很方便地被导入到信息栏中，账户隐私信息也不会泄露。
**OAuth 如何授权**
OAuth 的核心就是向第三方应用颁发令牌。
OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。......资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。
RFC 6749 标准定义了获得令牌的四种授权方式
> 注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。
- 授权码（authorization-code） : 第三方应用先申请一个授权码，然后再用该码获取令牌，适用于所有有 Server 端的应用，如 Web 站点、有 Server 端的手机客户端
    这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。
    - 第一步
        网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。
        ```
        https://b.com/oauth/authorize?
        response_type=code&
        client_id=CLIENT_ID&
        redirect_uri=CALLBACK_URL&
        scope=read
        ```
        URL 中，`response_type` 参数表示要求返回授权码（code），`client_id` 参数让 B 知道是谁在请求，`redirect_uri` 参数是 B 接受或拒绝请求后的跳转网址，`scope` 参数表示要求的授权范围（这里是只读）。
    - 第二步
        用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回 redirect_uri 参数指定的网址。跳转时，会传回一个授权码，就像下面这样。
        ```
        https://a.com/callback?code=AUTHORIZATION_CODE
        ```
        包含以下参数：
        - code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端 ID 和重定向 URI，是一一对应关系。
        - state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。
        上面 URL 中，`code` 参数就是授权码。
    - 第三步
        A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。
        ```
        https://b.com/oauth/token?
        client_id=CLIENT_ID&
        client_secret=CLIENT_SECRET&
        grant_type=authorization_code&
        code=AUTHORIZATION_CODE&
        redirect_uri=CALLBACK_URL
        ```
        包含以下参数：
        - grant_type：表示使用的授权模式，必选项，此处的值固定为"authorization_code"。
        - code：表示上一步获得的授权码，必选项。