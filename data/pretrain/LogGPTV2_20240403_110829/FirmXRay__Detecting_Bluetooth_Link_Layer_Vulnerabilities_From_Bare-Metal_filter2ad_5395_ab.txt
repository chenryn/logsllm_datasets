ripheral must explicitly request for LESC pairing, and meanwhile
have to invoke the ECDH key exchange [36].
Figure 5: Overview of FirmXRay.
Assumptions. We focus on the bare-metal firmware developed
based on the Nordic or TI SDKs, which are all ARM Cortex-M ar-
chitecture. We also assume that they are not obfuscated and no
address space layout randomization (ASLR) is deployed, and the
firmware are distributed via the relay of mobile apps (to achieve
the OTA upgrade).
3.2 Motivating Example
To clearly illustrate how the link layer vulnerabilities can be iden-
tified from configurations, and the corresponding technical chal-
lenges, we present a motivating example in Figure 4. The example
comes from an IoT wristband firmware developed based on the
Nordic SDK. In particular, starting from line 1, the firmware loads a
value 0x0 into register r2. Going through a series of operations in-
cluding logical or (orr), logical and (and), and arithmetic add (add)
(line 2-5), the value of r2 becomes 0xD. Next, this value is stored
into a specific location 0x20003268 (line 6-7), which refers to a
static data structure ble_gap_sec_params_t in RAM. Afterwards,
an address 0x20003268 is loaded into r2 (line 8), which essentially
makes r2 a pointer pointing to that data structure. Finally, a super-
visor call is invoked by an svc instruction [9] along with an svc
number 0x7f (line 10). After the svc is called, the SDK function
SD_BLE_GAP_SEC_PARAMS_REPLY is invoked, taking r0, r1, and r2
as parameters to reply the peer device with its pairing features.
The configuration pairing_feature is a uint8 integer located
at the starting address of the structure, where the pairing features
are represented by different bits of the integer. More specifically,
the first bit specifies whether bonding is performed, the second
indicates whether MITM protection is necessary, and the third to
the fifth bits represent the specific I/O capabilities, according to the
SDK specification [12]. As a result, the value 0xD can be interpreted
as a pairing configuration: the device requires bonding, no MITM
protection, and does not have I/O capabilities. Therefore, we can
conclude that the wristband contains a vulnerability that uses Just
Works to pair with a smartphone.
3.3 FirmXRay Overview
Based on the above motivating example, we can notice that in order
to identify the vulnerabilities, we must first correctly disassemble
the firmware to recognize the instructions and parameters, then
identify the configuration data structures, and finally compute the
configuration values. More specifically, we need:
• Robust Firmware Disassembling. While the firmware disas-
sembling in ARM (RISC) is relatively easy than x86 (CISC), we
still need to recognize the base address for the disassembling
since the firmware code we acquire start from customized bases.
Read Only MemoryRandom Access Memory1243a8   mov    r2, #0x02243aa   orrr2, #0x13  243ac   and    r2, #0xe14  243ae   add    r2, #0xc5  243b0   and    r2, #0xdf6  243b2   ldrr1, [0x260c8] 7243b4   str    r2, [r1,#0x0] //[0x20003268] = 0xD...8  25f44   ldrr2, [0x260c8]//r2 = 0x200032689  25f46   mov    r1, #0x010 25f48   svc    0x7f//SD_BLE_GAP_SEC_PARAMS_REPLY...11 260c8   0x20003268 // ble_gap_sec_parms_t*20003268  uint8pairing_feature= 0xD//BOND = 1, MITM = 0// IO   = 3, OOB  = 020003269  uint8min_key_size20003270  uint8max_key_size20003271  ble_gap_sec_kdist_tkdist_own20003275  ble_gap_sec_kdist_tkdist_peerStructble_gap_sec_params_tBONDMITMIOOOBRobust Firmware DisassemblingBare-metal FirmwarePrecise Data Structure RecognitionConfiguration Value ResolutionConstraints𝑋=𝑎rgmax!∈#𝑁(𝑥)DisassemblerDetection PoliciesVulnerabilitiesFigure 6: Effect of disassembling with different base addresses across absolute pointers.
• Precise Data Structure Recognition. After disassembling, Fir-
mXRay has to identify the configurations from the disassembled
code. However, as shown in Figure 4, configurations are often
embedded in complicated data structures, and the names of vari-
ables and functions, and their types, etc., of bare-metal firmware
are completely stripped.
• Configuration Value Resolution. As indicated in Figure 4, the
configurations are not directly hardcoded in the program, but
instead are generated through complicated computations such as
logical, arithmetic, and bit-wise operations. Hence, it is necessary
to design an algorithm to resolve the configuration values.
As such, we have designed three corresponding techniques, as
shown in Figure 5. FirmXRay first takes a bare-metal firmware
as input, and recognizes the base address using Robust Firmware
Disassembling (§4.1). Next, based on the disassembled firmware, it
identifies the configuration data structures using Precise Data Struc-
ture Recognition (§4.2). Finally, with the identified configurations,
FirmXRay resolves the concrete configuration values using Config-
uration Value Resolution and identifies the vulnerabilities with the
corresponding detection policies (§4.3).
4 DETAILED DESIGN
4.1 Robust Firmware Disassembling
Observations. When given a firmware image, FirmXRay first has
to recognize the base address for robust firmware disassembling.
To clearly illustrate the challenges, we present three simplified real-
world examples in Figure 6. We can notice that if the firmware is cor-
rectly rebased, as shown in the bottom half of Figure 6(1), the corre-
sponding instructions such as blx would successfully recognize the
target function Foo through its absolute function pointer address at
0x22A90 pointed by a pointer at 0x204C4; otherwise, this absolute
address falls beyond the firmware address space as shown in the
top half of Figure 6(1). Similarly, the absolute string pointers in Fig-
ure 6(2) and the vector table entries in Figure 6(3) would also point to
wrong locations if their target addresses are not properly resolved.
As shown in the above three cases, if the firmware starts from
an incorrect base, the absolute pointers (e.g., the above pointers us-
ing absolute addresses) would be dereferenced at wrong locations,
which causes incorrect disassembly. The root cause is that the ad-
dresses of their targets (e.g., function entries, strings, interrupt num-
bers) shift along with the base address, while the absolute pointer
values remain unchanged. For example, the address of the target
function Foo shifts from 0x22A90 to 0x7A90 when the base changes
from 0x1B000 to 0x0, while the absolute pointer address remains
0x22A90 regardless of the base. Therefore, we must recognize the
correct base that properly links these pointers to their right targets.
Although there exist a handful of efforts (i.e., [61] [50]) in base
address recognition, these approaches rely on a single type of clues
(namely the function prologues), which can lead to incorrect results
when there is insufficient number of such clues in the firmware,
as shown in our experiment (detailed in §5.2.1). As a result, we
propose a more systematic approach based on the observation that
the absolute pointers must point to certain instructions or variables
with respect to their types, and such point-to relations of absolute
pointers can provide strong clues to infer the base address. For in-
stance, as illustrated in Figure 6(1), a function pointer must point to
a valid function entry. If the firmware starts from an incorrect base,
this function pointer will point to a wrong location. Therefore, only
the correct base address can link an absolute pointer (e.g., a function
pointer) with the intended target (e.g., a function entry). Based on
this observation, we can model the base address recognition as a
point-to constraint solving problem of absolute pointers.
Our Approach. Consequently, we propose a two step approach to
recognize the base address. In particular, the first step is to extract all
absolute pointers from the firmware, and the second step is to asso-
ciate constraints between the absolute pointers and their intended
targets, and finally solve the constraints, from which to infer the
base address. The details of these two steps are described as follows.
Step-I: Absolute pointer recognition. Without the knowledge
of the base address, FirmXRay first loads the firmware with a 0x0
base address and disassembles the program instructions. The rea-
son for why a zero base works is that the ARM instructions are
always aligned with 2 or 4 bytes [9]. For disassembling, we apply a
linear sweep algorithm [45] to exhaustively disassemble all possible
instructions. To identify the absolute pointers, we can particularly
focus on all of the load instructions (i.e., ldr in ARM), since they
must be loaded into registers before being dereferenced. However,
not all the absolute pointers in the load instructions are useful as
many of them point to the RAM locations to deference run-time
values, which are not visible statically. Therefore, we must look for
absolute pointers that reference the static code or data. Fortunately,
as illustrated in Figure 6, there are three types of absolute pointers
that fall into this category: (i) absolute function pointers, (ii) abso-
lute string pointers, and (iii) vector table entries. These pointers
can also be easily distinguished with the pointers that deference
Incorrect Base 0x005452  ldrr0, pc+0x72 05454  blxr0=>0x22A90...054c4  0x22A90 ...Function Foo()07a90  push  {r3, r4, r5, lr}20452  ldrr0, pc+0x72 20454  blxr0=>0x22A90...204c4  0x22A90...Function Foo()22a90  push  {r3, r4, r5, lr}Correct Base0x1B00004e52  ldrr0, pc+0x14604e54  ldmiar0=>0x23058, {r4, r5, r6}...04f98  0x23058 ...08058  ”KinsaHealth”1fe52  ldrr0, pc+0x1461fe54  ldmiar0, {r4, r5, r6}...1ff98  0x23058 ...23058  ”KinsaHealth”00004  0x1B16900008  0x1B183...00169  0xE7...00183  0xE71b004  0x1B1691b008  0x1B183...1b169  0xE7...1b183  0xE7(1) Absolute Function Pointer(2) Absolute String Pointer(3) Absolute Vector Table Entryrun-time values which are located at higher address space as shown
in Figure 1. In the following, we describe how we identify these
three types of pointers.
(i) Absolute function pointer. After being loaded via ldr, an ab-
solute function pointer will be dereferenced and go through the
blx instruction for function invocation, as shown in Figure 6(1).
As a result, FirmXRay identifies function pointers by checking
whether they are eventually taken by a blx or bx instruction.
We use PF to denote the set of absolute function pointers.
(ii) Absolute string pointer. Unlike absolute function pointers
that can be easily identified, it is actually hard to recognize
absolute string pointers because there is no instruction that
takes an explicit string as operand. We therefore have to rely on
other clues to identify them. One clue is the SDK functions that
take strings as parameters. By recognizing these functions, we
are able to identify the ones that use absolute string pointers.
We use PS to denote the set of absolute string pointers.
(iii) Vector table entry. We also identified a special type of bare-
metal unique absolute pointers, which reside in a vector table of
interrupt handlers. The entries in the vector table point to the
locations that store the specific interrupt numbers (e.g., 0xE7).
Since this vector table is located at APP_ROM_BASE, FirmXRay
scans the firmware from the base address to identify this vector
table, which has a strong signature (i.e., an array of absolute
addresses). We use PV to denote the set of vector table entries.
Additionally, FirmXRay also searches for necessary gadgets to
build up the constraints, including function entries, strings, and
interrupt numbers. The function entries are recognized through the
function prologues which are usually the instructions to push regis-
ter values onto the stack (e.g., PUSH, STMFD). Meanwhile, FirmXRay
recognizes the possible readable strings according to the printable
ASCII values and their ending null bytes. Finally, it recognizes the
interrupt numbers based on the manufacture-reserved values.
Step-II. Constrained Base address modeling and solving. Hav-
ing identified all absolute pointers and their possible targets, we
need to resolve the firmware base address based on the point-to
constraints of absolute pointers identified in PF , PS , and PV . It might
appear that we can resolve the firmware base address by using
just a single pointer in PF , or PS , or PV . For example, as illustrated
in the top half of Figure 6(1), by subtracting the absolute pointer
value (0x22A90) with the address of its intended target (0x7A90),
the base address is resolved as 0x1B000. However, it is actually
hard to resolve the base address by solely relying on just one (or a
few) absolute pointer. Back to our example, if we link the absolute
function pointer (e.g., 0x22A90) to another valid function entry (e.g.,
0x8A90), we can resolve a different base address (e.g., 0x1A000) that
satisfies the point-to constraint as well. Therefore, we must combine
all the absolute pointers we identified to resolve the base address.
With these pointers, by looking at each individual one, we may
obtain multiple candidate base addresses, but there must be one
optimal base address that has the maximum number of matches of
the identified point-to constraints. For instance, the base address
0x1B000 satisfies the four constraints illustrated in Figure 6. In
general, assume there are N absolute pointers, there will be N con-
straints. Ideally, there exists one optimal base address that satisfies
all N constraints. However, this cannot be always true, since many
constraints cannot be resolved. For example, there exist a few func-
tion pointers that do not point to typical function prologues (e.g.,
push) but instead point to code snippets that start from various
instructions (e.g., ldr). Therefore, the optimal base address should
be the one that satisfies the most number of constraints. We thus
define a target function
N(x) = NF(x) + NS(x) + NV (x)
(1)
to measure how many constraints a base address x can satisfy,
where NF(x), NS(x), NV (x) denote the number of satisfied con-
straints in PF , PS , and PV , respectively. With this target function,
we can traverse the address space R to find the optimal base address
X with the maximum function value, which can be formulated as
(2)
X = arg max
N(x)
x ∈R
Intuitively, we can start from ROM_BASE and iterate through the
ROM to try all possible bases. However, we find that the search
space R can be optimized with a restricted boundary. Specifically,
we use the absolute addresses to infer the upper bound, which is
the smallest absolute pointer address. Therefore, we only need to
search R in the following range
d(x, p) = p − x
R = {x | 0 < x < Amin}
(3)
where Amin denotes the minimum absolute pointer address (e.g.,
0x1B169) among all the identified absolute pointers (e.g., 0x22A90,
0x23058, 0x1B169, 0x1B183). To search for X, we design a simple
probe-and-test algorithm. Starting from the lower bound of R, Fir-
mXRay iterates each candidate x in R and calculates N(x). Note
that we only need to probe those x with even values, since ARM
instructions are aligned with 2 or 4 bytes. To this end, we define
(4)
where p ∈ PF ∪PS ∪PV and d(x, p) denotes the concrete target mem-
ory address pointed by p with the given base address x. Then, for
each potential x and each absolute pointer p, FirmXRay performs
the following three checks:
(i) If p ∈ PF , FirmXRay checks if d(x, p) is a valid function entry. If
so, it increases NF(x) by 1.
(ii) If p ∈ PS , FirmXRay checks if d(x, p) is a valid string. If so, it
increases NS(x) by 1.
(iii) If p ∈ PV , FirmXRay examines whether d(x, p) is an interrupt
number. If so, NV (x) is added by 1.
After all of the candidate x have been probed and tested, Fir-
mXRay selects the x with the maximum N(x) value as the optimal
base address, and this x satisfies the most number of constraints.
4.2 Precise Data Structure Recognition
Given the disassembled firmware code, FirmXRay needs to rec-
ognize the configuration data structures. While there are many
techniques for reverse engineering data structures from stripped
binaries, they cannot be easily applied to our problem. For instance,
dynamic approaches such as Rewards [39] and Howard [51], are
not suitable for bare-metal firmware because they require vendor-
specific execution contexts such as hardware inputs for execution.
While TIE [38] does not require to run the firmware, it still falls
short because it attempts to recover all data structures using type
inference, while we only focus on those that must be taken as static
SDK function parameters.
As a result, we develop our own customized static analysis. Our
key insight is that no matter where these data structures are defined
in the memory, they will finally be taken as parameters by the SDK
functions, because the firmware needs to invoke these precompiled
functions to configure the device hardware. For example, in Figure 4,
the structure pointer is taken as a parameter (stored in a register r2)
by function SD_BLE_GAP_SEC_PARAMS_REPLY to set up the pairing
feature. As such, FirmXRay first identifies the SDK functions, and
further recognizes the configurations through function parameters.
To identify the SDK functions, FirmXRay requires vendor-specific
knowledge to establish signatures of the function invocation points,
and these knowledge were gathered manually from the SDK speci-
fications prior to the analysis. In particular, the Nordic and TI SDKs
use special mechanisms to invoke these functions. Nordic uses su-
pervisor calls (i.e., svc) [14] where each function is associated with a
corresponding svc number (e.g., 0x7F for SD_BLE_GAP_SEC_PARAMS
_REPLY as shown in Figure 4). TI uses ICall [5] to invoke SDK func-
tions, and each function is dispatched by the ICall interface with
a specific command, which allows us to identify them precisely.
Based on these knowledge, FirmXRay scans through the disas-
sembled code to recognize these SDK functions, and identifies the
configuration data structures from their parameters.
4.3 Configuration Value Resolution
Having identified the configuration data structures, we design the
following three-step analysis to resolve the configuration values:
Step-I. Configuration path extraction. In this step, our goal is
to extract the program path with the instructions involved in the
configuration value generation, and we adopt a backward program
slicing [54] algorithm. At a high level, FirmXRay starts from the
SDK function invocation points identified in §4.2 and backward
traverses the program control flow graph G to record all instruc-
tions (e.g., the orr, and, and add instructions in Figure 4) that are
necessary for computing the configuration value. At first, the al-
gorithm takes the following inputs: a function invocation point A
(e.g., an svc instruction), the current function block B, a dependent
variable (e.g., registers and memory locations) set D, and the cur-
rent configuration path s. It backward iterates the instructions in B
starting from A. For each instruction i in B, if it modifies the value
of any target variables in D, the algorithm adds all other variables
in i to D, removes the target variables, and records the instruction
i in s. In particular, to determine whether i should be involved as
part of the program path, the algorithm focuses on three types of
dependencies, including register to register, register to memory,
and memory to register. Note that unlike x86 instructions, ARM
does not have dependencies between memories. As such, FirmXRay
focuses on two types of data dependencies:
• Register to Register dependence. It is quite common when
the value of a register depends on another register. For instance,
in instruction add r1 r2 r3, the value of r1 depends on r2 and
r3. Therefore, if r1 is in D, we append this instruction to s, and
add r2 and r3 to D as the new dependent variables.
Policy
SDK Function Name
(i)
(ii)
SD_BLE_GAP_ADDR_SET
SD_BLE_GAP_APPEARANCE_SET
SD_BLE_GATTS_SERVICE_ADD
SD_BLE_GATTS_CHARACTERISTIC_ADD
SD_BLE_UUID_VS_ADD
GAP_ConfigDeviceAddr*
GATTServApp_RegisterService*
SD_BLE_GAP_SEC_PARAMS_REPLY
SD_BLE_GAP_AUTH
SD_BLE_GAP_AUTH_KEY_REPLY
SD_BLE_GATTS_CHARACTERISTIC_ADD
GAPBondMgr_SetParameter*
GATTServApp_RegisterService*
(iii)
SD_BLE_GAP_LESC_DHKEY_REPLY
GAPBondMgr_SetParameter*
Reg.
Index
0
0
0, 1
2
0
0
0
2
1
1, 2
2
2
0
0
2
Description
Configure the MAC address
Set device description
Add a BLE GATT service
Add a BLE GATT characteristic