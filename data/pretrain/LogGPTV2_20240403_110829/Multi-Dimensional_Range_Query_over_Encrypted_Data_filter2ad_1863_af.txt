is
against
polynomial-time adversaries.
selectively
secure
Below we give an overview of the techniques used in
the security proof. The detailed proofs of Theorem 6.1 and
Theorem 6.2 are provided in the online technical report ver-
sion [43]. To prove the selective security of our MRQEDD
construction, we decompose the selective MRQED game into
two games: a selective conﬁdentiality game and a selective
anonymity game. By the hybrid argument, if no polynomial-
time adversary has more than negligible advantage in either
the conﬁdentiality game or the anonymity game, then no
polynomial-time adversary has more than negligible advan-
tage in the combined selective MRQED game.
In the proof, we build a simulator that
leverages an
MRQED adversary to solve the D-BDH problem or the D-
Linear problem. The simulator inherits parameters speciﬁed
by the D-BDH/D-Linear instance, hence, it has incomplete
information about the master key. Therefore, the crux of the
proof is how to simulate the key derivation algorithm with-
out knowing the complete master key.
In comparison, the
anonymity proof is more complicated than the conﬁdentiality
proof, because it involves a hybrid argument containing 2DL
steps. In step (d1, l1, n1) of the hybrid argument, yϕ1,n1 and
(cid:1)
ϕ1,n1 (ϕ1 = (d1, l1)) in the master key contain unknown pa-
y
rameters inherited from the D-Linear instance. Therefore, we
need to condition on the relative position between X∗
and the
(d1, l1) in question. Our proof techniques are similar to that
presented in the AHIBE paper [15].
7 Practical Performance
In this section, we give a detailed analysis of the perfor-
mance of the MRQEDD scheme given in Section 5 in prac-
tical scenarios. We use the conditional release of encrypted
network audit logs as our motivating application.
Assumptions. To evaluate the scheme of Section 5 in this ap-
plication, we detail a set of scenarios regarding the searchable
ﬁelds present in the logs. We assume log entries contain the
ﬁelds listed in Table 2. The 17-bit time ﬁeld is sufﬁcient to
distinguish times over a period of about 15 years with a one
hour resolution, or about three months at a one minute resolu-
tion. More precise times may be stored in the non-searchable
The protocol ﬁeld cor-
portion of the message if desired.
Field
Source IP
Dest. IP
Port
Time
Protocol
Abbr. Range
sip
dip
port
time
prot
[0, Tsip −1]
[0, Tdip −1]
[0, Tport −1]
[0, Ttime −1]
[0, Tprot −1]
Distinct Values
Tsip = 232
Tdip = 232
Tport = 216
Ttime = 217
Tprot = 28
Table 2. Fields appearing in a network audit log and their
possible values.
responds to the actual bits of the corresponding ﬁeld in an
IP header (where, for example, 6 denotes TCP and 133 de-
notes Fibre Channel). Various subsets of these ﬁelds may be
included as searchable attributes in MRQEDD. Other ﬁelds
and any additional associated data such as a payload may be
included as the encrypted message. Regardless of message
length, we need only use the MRQEDD scheme to encrypt
a single group element, which may be a randomly generated
symmetric key (e.g., for AES) used to encrypt the message.
Benchmarks for the selected pairing were run on a modern
workstation. The processor was a 64-bit, 3.2 Ghz Pentium 4.
We used the Pairing-Based Cryptography (PBC) library [34],
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007which is in turn based on the GNU Multiple Precision Arith-
metic Library (GMP). The relevant results are given in Ta-
ble 3. Using these benchmark numbers, we now estimate the
performance of our encryption scheme under several scenar-
ios for the network audit log application.
Operation
pairing (no preprocessing)
pairing (after preprocessing)
preprocess pairing
exponentiation in G(cid:2)
multiplication in G(cid:2)
Time
5.5 ms
2.6 ms
5.9 ms
exponentiation in G, bG 6.4 ms
0.6 ms
5.1 µs
Table 3. Group arithmetic and pairing performance bench-
marks on a modern workstation [34].
(cid:26)
Public parameters and master key. The space required
to store the public parameters and master key is logarith-
mic with respect to the number of possible attribute val-
Speciﬁcally, denote the set of attributes as A =
ues.
{sip, dip, port, time, prot}. Then for each attribute a ∈ A,
deﬁne the height of the tree La = log2 Ta + 1. For example,
Lsip = 33 and Lprot = 9. Then the public parameters PK re-
quire a total of 8
a∈A La = 880 elements of G and one el-
ement of G(cid:1)
. Assuming 512-bit representations2 of elements
of G and G(cid:1)
, the total size of PK is 55KB. The master key
SK contains the same number of elements, again requiring
55KB of storage. More space efﬁcient pairings than the one
used in this estimate are available, but this one was selected
for speed of evaluation.
(cid:26)
(cid:26)
Computation time for Setup is reasonable, given that it
is only run once. Computing the public and private parame-
ters in Setup requires roughly 16
a∈A La exponentiations
and one pairing, for a total of about 11.3s. Time spent on
multiplication in this case is negligible.
Encryption. Saving the group elements of a ciphertext re-
quires 4
a∈A La + 2 group elements, or 28KB. Note that
we normally just encrypt a session key, so this is a constant
overhead beyond the actual length of the message. Running
Encrypt requires about two exponentiations for each group
element, resulting in a time of about 5.6s. While signiﬁcant,
this overhead should be acceptable in most cases in the net-
work audit log example. If audit logs are high volume, the
best strategy may be to produce periodic summaries rather
than separately encrypting each packet. The searchable at-
tributes of such summaries would reﬂect the collection of en-
tries they represent, and the full contents of the entries could
be included as the encrypted message without incurring ad-
ditional overhead. In systems containing a cryptographic ac-
celerator chip supporting ECC (such as some routers), much
higher performance is possible. For example, the Elliptic
Semiconductor CLP-17 could reduce the time of exponentia-
2We consider a type A pairing using the singular curve y2 = x3 + x for
the groups G and bG with a base ﬁeld size of 512-bits. Note that all groups
involved have 160-bit group order; the storage requirements arise from the
speciﬁc representation of elements in the elliptic curves.
tion from 6.4ms to 30µs [19], resulting in a total encryption
time as low as 27ms.
Key derivation and decryption. We now consider decryp-
tion keys and the running time of the decryption algorithm,
the more interesting aspects of the scheme’s computational
and storage requirements. The space required to store a de-
cryption key, the time to derive it, and the time to decrypt
using it depend only on the ranges of attributes for which it
permits decryption. Unlike the computational and storage re-
quirements discussed thus far, these costs do not depend on
the full range of possible values, only those associated with
the key. These costs depend on the number of key com-
ponents necessary to represent the permissible range along
each dimension. For example, suppose a particular decryp-
tion key DK only allows decryption of entries with a desti-
nation port in the range [3, 7] (perhaps placing other require-
ments on the other attributes). Referring back to Figure 1,
we see that three tree nodes are necessary to cover this range,
so DeriveKey would include these three for the destination
port dimension in DK. Similarly, given some decryption key
DK, we denote the number of tree nodes necessary to cover
the decryption range in each of the dimensions a ∈ A by
Na = |Λa(B)| (using the notation of Section 5). So in this
example, Nport = 3. Note that for any a ∈ A, in the worst
case, Na = 2La − 2.
(cid:26)
Now given Na for each a ∈ A, we may com-
(cid:26)
A decryption key consists
pute the decryption costs.
of 5
a∈A Na group elements and DeriveKey performs
8
a∈A Na exponentiations. The number of operations
necessary to decrypt using a key DK is slightly more
subtle. While QueryDecrypt is Θ(
a∈A La) (i.e.,
Θ((log T )D)) overall, only O(
a∈A La) (i.e., O(D log T ))
pairings are required, as mentioned in Section 5.2. Specif-
ically, we need only compute 5
a∈A Na pairings to pop-
ulate a lookup table containing values of e(c0, kID,0),
e(cϕ,1, kID,1), e(cϕ,2, kID,2), e(cϕ,3, kID,3), e(cϕ,4, kID,4),
and e(cϕ,5, kID,5). These values are enough to complete
the QueryDecrypt algorithm. Assuming a key will nor-
mally be used to decrypt a batch of ciphertexts one after an-
other, we may further reduce the cost of pairings by prepro-
cessing with the key. As shown in Table 3, preprocessing
reduces the pairing time by about half, at a one time cost
(per decryption key DK) equivalent to one or two decryp-
tions. Computed naively, the sequence of trials in step one of
a∈A Na
multiplications in G(cid:1)
. This can be somewhat reduced. Let
S1, . . . S|A| be { Na | a ∈ A} sorted in ascending order:
S1 ≤ S2 ≤ . . . S|A|. Then by saving intermediate re-
sults between trials and ordering the dimensions appropri-
ately, it is possible to complete step one with a total of
S1 + S1S2 + S1S2S3 + . . . S1S2 ··· S|A| multiplications.
Speciﬁc scenarios. We have now computed the costs associ-
ated with the storage and usage of a decryption key in terms
of Na for a ∈ A, but we have not yet speciﬁed Na. If we
assume the range for each attribute is randomly selected (uni-
formly), then for each a ∈ A, the expected value of Na is
La − 1. This results in a decryption key size of 33KB and
QueryDecrypt end up requiring a total of |A|(cid:20)
(cid:26)
(cid:26)
(cid:20)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007a running time for DeriveKey of 5.4s. The corresponding
worst-case decryption time3 is 13.1s. We note that this is a
major cost, and likely to be inconvenient if signiﬁcant quan-
tities of log entries must be decrypted. Fortunately, queries
eliciting such long decryption times are not likely to be nec-
essary in practice. In fact, fairly elaborate queries are possible
while keeping decryption costs low.
In Table 4 we provide several examples that help demon-
strate this. The ﬁrst entry illustrates the fact that specifying a
single value, all values, or a range of values falling on power-
of-two boundaries (as in the case of an IP subnet) for some
attribute a results in Na = 1, reducing decryption time dra-
matically. In the next example, several attributes are required
to be in general ranges, or, in the case of prot, selected from
a small set. This results in larger numbers of key compo-
nents and slightly longer decryption times. Still, the decryp-
tion time in this case is far below the time with each range
randomly selected. As shown by the third example, larger
ranges result in larger values of Na and, again, somewhat
larger, but still relatively low, decryption times.
8 Extensions and Discussions
8.1 The Dual Problem and Stock Trading
through a Broker
In the MRQED problem, one encrypts a message Msg un-
der a point X in multi-dimensional space, and given a hyper-
rectangle B, the master key owner can construct a capability,
allowing an auditor to decrypt all entries satisfying X ∈ B.
On the other hand, the privacy of the irrelevant entries are still
preserved.
Informally, the natural dual problem to MRQED is where
one encrypts under a hyper-rectangle B, and given a point
X, the master key owner can construct a capability allowing
an auditor to decrypt all entries satisfying B (cid:16) X. Like in
MRQED, we require that the privacy of all irrelevant entries
be preserved. We now show an interesting application of the
dual problem, and then show that MRQED implies a solution
for the dual problem.
An interesting application of the dual problem is for trad-
ing stocks and other securities. Suppose an investor trades
stocks through a broker. The investor speciﬁes a price range
and a time range, such that if the stock price falls within that
range during a speciﬁc period of time, the broker can buy or
sell the stock on behalf of the investor. This is usually referred
to as a stop order, limit order, or stop-limit order. Sometimes,
the investor may not fully trust the broker, and may wish to
conceal the price and time ranges from the broker before an
order is executed.
The dual problem can be applied in such scenarios to ad-
dress the privacy concerns of investors. In particular, the stock
exchange, or any third-party with knowledge of the real-time
3In reality, the average decryption time is smaller than this number, since
upon a successful decryption, the QueryDecrypt algorithm exits after
trying half of the combinations in expectation and thus performing half the
worst-case multiplications.
stock price can act as the trusted authority who owns the mas-
ter key. For convenience, in the following description, we
assume that the stock exchange is the trusted authority. The
investor ﬁrst encrypts the order along with the desired price
and time ranges, and sends the encrypted order to the broker.
Suppose that at a certain point of time t, the stock price is p.
The stock exchange constructs a decryption key for the pair
(t, p), and hands it to the broker. With this decryption key,
the broker can decrypt all orders whose price and time ranges
match the current price p and the current time t, and execute
these orders. For orders whose price and time ranges do not
match the current price and time, the broker cannot learn any
additional information about these orders.
MRQED implies the dual problem. We use a two-
dimensional example to illustrate how MRQED implies a so-