*nov1 $1, #teax \n\t*
int $0×80
\n\t*::*m*(exitCode)) 
\n\t*
tendi f
hlt
在上面这个实现中，Mini CRT的入口函数基本完成所需要的功能。它的 Windows版对
命令行参数进行了分割，这个分割算法实际上还是有问题的，比如两个参数之间隔多个空格
就会发生问题。当然这些问题不影响我们理解Mini CRT的入口函数的主干部分。
13.1.2堆的实现
有了CRT 的入口函数、exitO函数之后，下一步的目标就是实现堆的操作，即malloc0
函数和free0函数。当然堆的实现方法有很多，在不同的操作系统平台上也有很多可以选择
的方案，在遵循Mini CRT的原则下，我们将Mini CRT堆的实现归纳为下面儿条。
·实现一个以空闲链表算法为基础的堆空间分配算法。
·为了简单起见，堆空间大小固定为32MB，初始化之后空间不再扩展或缩小。
·在Windows平台下不使用HeapAlloc等堆分配算法，采用VirtualAlloc向系统直接申请
32MB空间，由我们自己的堆分配算法实现malloc。
在Linux平台下，使用brk将数据段结束地址向后调整32MB，将这块空间作为堆空间。
brk系统调用可以设置进程的数据段边界，而sbrk可以移动进程的数据段边界。显然，
如果将数据段边界后移，就相当于分配了一定量的内存。
由brk/sbrk分配的内存和 VirtualAlloc分配的一样，它们仅仅是分配了虚拟空间，这些
空间一开始是不会提交的（即不分配物理页面，当进程试图访问某一个地址的时候，
操作系统会检测到访问异常，并且为被访问的地址所在的页分配物理页面。
在某些人的“黑话”里，践踏（trample】一块内存指的是去读写这块内存的每一个字
节。brk所分配的虚地址就是需要在践路之后才会被操作系统自动地分配实际贞面。
所以很多时候按页需求分配（PageDemandAllocation）又被称为按践路分配（Alloc
On Trample. AOT) 
我们在第9章时已经介绍过堆分配算法的原理，在实现上也基本一致，整个堆空间按照
是否被占用面被分割成了若干个空闲（Free）块和占用（Used）块，它们之间由双向疑表
链接起来。
当用户要申请一块内存时，堆分配算法将遍历整个链表，直到找到一块足够大的空闲块。
如果这个空闲块大小刚好等于所中请的大小，那么直接将这个空闲块标记为占用块，然后将
程序员的自我修养一链接、装载与库
---
## Page 441
418
第13章运行库实现
它的地址返回给用户：如果空闲块大小大于所中请的大小，那么这个空闲块将被分割成两块，
其中一块大小为申请的大小，标记为占用，另外一块为空闲块。
当用户释放某一块空间时，堆分配算法会判别被释放块前后两个块是否为空闲块，如果
是，则将它们合并成一个大的空闲块。
整个堆分配算法从实现上看十分简单，仅仅只有100行左右，而且还包含了Linux的
brk系统调用的实现。MiniCRT的堆分配算法源代码如清单13-2所示。
清单13-2malloc.c
#include *ninicrt.h*
/ / malloc,c
typedef struct _heap_header
enum {
HEAP_BLOCK_USED - OxCDCDCDCD,
HEAP_BLOCK_FREB = OxABABABAB
// magic nunber of used block
// magic number of free block
}type;
// block type FREE/USED
unsigned size1
// block size including header
struct _heap_header* prev;
struct _heap_header* next ;
nepeeudeag(
define HEADER_SIZE (sizeof (heap_header))
#define ADDR_ADD(a,o)(((char*) (a)) + o)
static heap_header* 1ist_head = NULL;
void free (void* ptr)
heap_header* header = (heap_header*)ADDR_ADD (ptr, -HEADER_SIZE) ;
if (header ->type 1= HEAP_BLOCK_USED)
return;
if (header->prev 1= NULL && header->prev->type #
/ / merge
HEAP_BLOCK_FREE)(
if (header->next 1= NULL)
header->prev->next - header->next 1
header->next ->prev = header->prev;
header->prev->size += header->size;
header = header->prev:
If (header->next != NULL &s header->next ->type == HEAP_BLOCK_FREE) (
// merge
header->size += header->next ->size;
header->next - header->next->next1
程序员的自我修养——链接、装载与库
---
## Page 442
13.1C语言运行库
419
void* malloc( unsigned size )
:rapeau, sapeat deau
if( 8ize == 0 )
return NULL;
header = 1ist_head;
while (header 1= 0) (
if (header->type == HEAP_BLOCK_US&D) {
header - header->next;
continue;
if (header->size > size + HEADER_SIzE &&
header->type = HEAP_BLOCK_USED;
header->size prev = header;
HEADER_SIZE) :
next->next = header->next;
next->size = header->size - (size - HEADER_SIzE):
header->next = next;
header->size = size + HEADER_SIZE;
return ADDR_ADD(header, HEADER_SIZE) :
header->type = HEAP_BLOCK_USED;
header = header->next 1
return NULL;
// Linux brk system cal1
#ifndef wIN32
static int brk(void* end_data_se
// brk system cal1 number: 45
int ret = 01
// in /u8r/include/asm-i386/unistd.h:
// define NR_brk 45
asn(*mov1 $45, eteax
*nov11,#ebx
\n\t*
\n\t *
*int $0x80
\n\t*
: *=r*(ret) : *m*(end_data_segment) );
*novl $$eax,
08
Inlt*
tendif
ifdef WIN32
#include 
#endif
程序员的自我修养一链接、装载与库
---
## Page 443
420
第13章运行库实现
int mini_crt_heap_init ()
void* base = NULL;
unsigned heap_size = 1024 * 1024 * 32;
// 32 MB heap size
ifdef WIN32
MEM_RESERVE, PAGE_READWRITE) :
base = VirtualA1loc(0, heap_size,MEX_CONNIT 1
if (base == NULL)
#else
return 0;
base = (void*)brk(0);
void* end = ADDR_ADD (base, heap_size) ;
end = (void*)brk (end) :
1.f(!end)
return 0;
#endi f
header = (heap_header*) base;
header->size = heap_size:
header->type = HEAP_BLOCK_FREE;
header->prev - NULL;
header->next - NULL;
list_head - header;
return 1;
7
我们在malloc.c中实现了3个对外的接口函数，分别是：mini_crt_init_heap、malloc 和
free。不过这个堆的实现还比较简陋：它的搜索算法是O(n）的（n是堆中分配的块的数量）：
堆的空间周定为 32MB，没有办法扩张：它没有实现realloc、calloc 函数：它没有很好的堆
溢出防范机制：它不支持多线程同时访问等等。
虽然它很简陋，但是它体现出了堆分配算法的最本质的儿个特征，其他的诸如改进搜索
速度、扩展堆空间、多线程支持等都可以在此基础上进行改进，由于篇辐有限，我们也不打
算一一实现它们，读者如果有兴趣，可以自己考虑动手改进Mini CRT，为它增加上述特性。
13.1.310与文件操作
在为 Mini CRT添加了malloc和free之后，接着将为它们实现IO操作。IO部分在任何
软件中都是最为复杂的，在CRT中也不例外。在传统的C语言和UNIX里面，IO和文件是
同一个概念，所有的IO都是通过对文件的操作来实现的。因此，只要实现了文件的基本操
作（fopen、fread、fwrite、fclose 和 fseek），即使完成了Mini CRT 的 IO 部分。与堆的实现
一样，我们需要为MiniCRT的IO部分设计一些实现的基本原则：
程序员的自我修养一—链接、装载与库
---
## Page 444
13.1C语言运行库
421
仅实现基本的文件操作，包括fopen、fread、fwrite、fclose及fseek。
为了简单起见，不实现缓冲（Buffer）机制。
支持三个标准的输入输出 stdin、stdout 和 stderr。
在Windows下，文件基本操作可以使用 API：CreateFile、ReadFile、WriteFile，CloseHandle
和 SetFilePointer 实现。
Linux不像 Windows 那样有API 接口，我们必须使用内嵌汇编实现open、read、write、
close 和 seek这儿个系统调用。
fopen时仅区分“r"、“w”和“+”这儿种模式及它们的组合，不对文本模式和二进制
模式进行区分，不支持追加模式（"a")。
Mini CRT的IO部分实现源代码如清单13-3所示。
清单13-3stdio.c
#include *minicrt.h*
// stdio.c
int mini_crt_io_init ()
return 1;
ifdef WIN32
#include 
FIL&* fopen( const char *filenane,const char *node )
HANDLE hFile = 0:
int creation = 0;
int access = 0:
if (strcmp(mode, *v*) =s 0){
creation 1- CREATE_ALHAYS:
aCCeSS I= GENERIC_WRITE;
if(strcmp(mode,*w+*) == 0)(
access Is CENERIC_WRITE I GENERIC_READ;
creation 1= CREATE_ALWAYS;
if (strcmp(mode, *r*) = 0)(
aCCess I- GENERIC_READ;
creation += OPEN_EXISTING;
if (strcmp(mode, *r+*) = 0)(
accesS I= GENERIC_WRITE 1 GENERIC_READ;
程序员的自我修养—链接、装载与库
---
## Page 445
422
第13章运行库实现
creation |= TRUNCATE_EXISTING;
hFile - CreateFileA(filename, access, 0, 0, creation, 0, 0);
if (hFi1e == INVALID_HANDLE_VALUE)
return 0;
return (FILE*)hFi1e;
int fread(void* buffer, int size, int count, FILE *stream)
int read = 0;
if (!ReadPile(
((HANDLE)stream, buffer, size *
return 0:
count, &read, 0)1
return read;
int fwrite(const void* buffer, int size, int count, FILe *stream)
if (!WriteFile( (HANDLE)strean, buffer, size * count, &written, 0))
int written = 0;
return written;
return 0;
int fclose(FILE* fp)
return C1oseHandle ( (HANDLE) fp) 1
int fseek(FILE* fp, int offset, int set)
return SetFilePointer ((HANDLE) fp, offset, 0, set);
#else // #ifdef WIN32
static int open(const char *pathname, int flags, int mode)
asm(*mov1 $5,$eax
int fd = 0;
\n\t*
*mov1 $1, $tebx
*mov1 32,3$ecx
\n\t*
\n\t*