o
v
e
r
p
m
o
r
f
a
t
l
e
d
e
m
T
i
60
50
40
30
20
10
0
0
40
20
Observed Frame Number
60
80
100
(b) Cisco driver for the Aironet AIR-CB21AG-A-K9
(802.11a/b/g) PCI wireless NIC
Figure 2: Plot of time delta from the previous arrival of
probe request frames transmitted by two drivers.
ize the explicit probing behavior of a client by the send-
ing rate of probe request frames. In the next section, we
show how to leverage this characterization to accurately
identify wireless drivers.
4 Device Driver Fingerprinting
The ﬁngerprinting technique proceeds in two stages:
trace capture and ﬁngerprint generation. During trace
capture, a ﬁngerprinter within wireless transmission
range of a ﬁngerprintee captures 802.11 trafﬁc, hereafter
referred to as the trace. During ﬁngerprint generation, the
captured trace is analyzed using a supervised Bayesian
approach to generate a robust device driver ﬁngerprint.
4.1 Trace Capture
To begin the trace capture phase, we ﬁrst consider how a
ﬁngerprinter might obtain a trace of probe request frames
from a wireless device using widely available hardware
and software. We assume a one-to-one mapping of MAC
addresses to wireless devices, and believe this to be a
reasonable assumption. Because each wireless NIC is
assigned a unique MAC address by its manufacturer, the
only cause for duplicate MACs on a network would be
the result of a user reassigning his MAC address indepen-
dently. However, as there are theoretically 248 acceptable
MAC addresses, the probability of a user choosing an ex-
isting MAC on the network is negligible7. In Section 7,
we address the effects that violating this assumption has
on our ﬁngerprinting technique.
The ﬁngerprinter can use any device that is capa-
ble of eavesdropping on the wireless frames transmitted
by the ﬁngerprintee. Therefore, the ﬁngerprinter must
be within receiving range of the ﬁngerprintee’s wireless
transmissions. We assume the ﬁngerprinter is using a sin-
gle, high-gain, COTS (commercial off-the-shelf) wire-
less card. Next, the ﬁngerprinter must conﬁgure their
wireless card to operate in monitor mode; this mode al-
lows the wireless card to capture frames promiscuously
(e.g. whether they are speciﬁcally addressed to that
wireless card or not). The ﬁngerprinter must prevent
their card from associating with an access point or send-
ing its own probe request frames so collection is com-
pletely passive. This allows the ﬁngerprinter to capture
all frames sent on the current channel, including probe
request frames, without interfering with the network’s
normal operation. We assume that the ﬁngerprinter’s ma-
chine is running an OS and driver combination that sup-
ports a wireless card in monitor mode. This can be easily
done in Linux, FreeBSD, and Mac OS X. Finally, the ﬁn-
gerprinter can use a network protocol analyzer, such as
Ethereal [6], to record the eavesdropped frames and ﬁlter
out all irrelevant data. After following the above steps,
the ﬁngerprinter should have sufﬁcient data to construct
graphs similar to Figures 2(a) and 2(b).
4.2 Fingerprint Generation
After a trace has been captured, the data must be ana-
lyzed to characterize the probe request behavior. Previ-
ous work has shown that a simple supervised Bayesian
approach is extremely accurate for many classiﬁcation
problems [8]. We chose to employ a binning approach to
characterize the time deltas between probe requests be-
cause of the inherently noisy data due to frame loss.
Binning works by translating an interval of continu-
ous data points into discrete bins. A bin is an internal
value used in place of the true value of an attribute. The
binning method smooths probabilities for the continu-
ous attribute values by placing them into groups. Al-
170
Security ’06: 15th USENIX Security Symposium
USENIX Association
Bin
0
1.2
50
Percentage Mean
0.16
1.72
49.80
0.676
0.228
0.096
Table 1: Sample signature for the Cisco Aironet 802.11
a/b/g PCI driver
though binning causes some loss of information for con-
tinuous data, it allows for smooth probability estimates.
Some noise is averaged out because each bin probabil-
ity is an estimate for that interval, not individual con-
tinuous values. We chose to use equal-width binning
where each bin represents an interval of the same size.
While more sophisticated schemes may be available, this
simple approach generated distinct ﬁngerprints of probe
inter-arrival times and provided a successful means for
driver identiﬁcation.
After performing a number of data analysis tests, we
isolated two attributes from the probing rate that were
essential to ﬁngerprinting the wireless driver. The ﬁrst
attribute was the bin frequency of delta arrival time val-
ues between probe request frames. The second attribute
was the average, for each bin, of all actual (non-rounded)
delta arrival time values of the probe request frames
placed in that bin. The ﬁrst attribute characterizes the
size of each bin and the second attribute characterizes
the actual mean of each bin. Our next step was to create
a signature (Bayesian model) for each individual wire-
less driver that embodies these attributes. Building mod-
els from tagged data sets is a common technique used in
supervised Bayesian classiﬁers [9].
We now describe the process used to transform raw
trace data into a device signature. To calculate the bin
probabilities, we rounded the actual delta arrival time
value to the closest discrete bin value. For example, if
the bins were of a ﬁxed width of size 1 second, any probe
request frames with a delta arrival value in (0, 0.50] sec-
onds would be placed in the 0 second bin, any probe re-
quest frames with a delta arrival value in (0.51, 1.50] sec-
onds would be placed in the 1 second bin, and so forth.
Based on empirical optimization experiments presented
in our results section, we use an optimal bin width size
of 0.8 seconds. The percentage of the total probe request
frames placed in each bin is recorded along with the aver-
age, for each bin, of all actual (non-rounded) delta arrival
time values of the probe request frames placed in that bin.
These values comprise the signature for a wireless driver
which we add to a master signature database containing
all the tagged signatures that are created. An example
of a signature created from the probe request frames in
Figure 2(b) is shown in Table 1. New signatures can be
inserted, modiﬁed, or deleted from the database without
affecting other signatures. This allows collaborative sig-
nature sharing, similar to how Snort [10] intrusion de-
tection signatures are currently shared.
Once the master signature database is created, a
method is required to compute how “close” an untagged
signature from a probe request trace is to each of the sig-
natures in the master signature database.
4.3 Calculating Closeness
Let us now assume that a ﬁngerprinter has obtained a
trace and created a signature T of the probe request
be the per-
frames sent from the ﬁngerprintee. Let pn
centage of probe request frames in the nth bin of T and
be the mean of all probe request frames in the nth
let mn
bin. Let S be the set of all signatures in the master sig-
nature database and let s be a single signature within the
be the percentage of probe request frames
set S. Let vn
in the nth bin of s and let wn
be the mean of all probe re-
quest frames in the nth bin of s. The following equation
was used to calculate the distance between the observed,
untagged ﬁngerprintee signature, T , and all known mas-
ter signatures, assigning to C the distance value of the
closest signature in the master database to T:
C = min(∀s ∈ S
n
X
0
(|pn
− vn
| + vn
|mn
− wn
|)) (1)
Our technique iterates through all bins in T , sum-
ming the difference of the percentages and mean differ-
ences scaled by the percentage. The mean differences are
scaled by the s bin percentage to prevent this value from
dominating the bin percentage differences. We show in
our results that the features included in a signature and
our ﬁnal method of calculating signature difference are
effective in successfully ﬁngerprinting wireless device
drivers.
5 Evaluation
We tested our ﬁngerprinting technique with a total of 17
different wireless interface drivers in their default con-
ﬁgurations. We characterized wireless device drivers for
the Linux 2.6 kernel, Windows XP Service Pack 1 and
Service Pack 2, and Mac OS X 10.3.5. The machine
we used to ﬁngerprint other hosts’ wireless drivers was
a 2.4 GHz Pentium 4 desktop with a Cisco Aironet a/b/g
PCI wireless card, running the Linux 2.6 kernel and the
MadWiﬁ wireless NIC driver [11]. Various Pentium III
class desktop machines and one Apple PowerBook lap-
top were used as ﬁngerprintee machines.
We address ﬁve primary characteristics that we ex-
pect any ﬁngerprinting technique to be evaluated against.
First, we investigate the resolution of our method.
Speciﬁcally, we evaluate our identiﬁcation granularity
between drivers for different NICs, different drivers that
USENIX Association
Security ’06: 15th USENIX Security Symposium
171
support identical NICs, and different versions of the
same driver. Second, we evaluate the consistency of our
technique. We measure how successful our ﬁngerprint-
ing technique is in a variety of scenarios and over multi-
ple network sessions, after operating system reboot, and
when using the same driver to control different NICs.
Third, we test the robustness of our technique. We con-
duct our experimentation in realistic network settings
that experience loss rates similar to other wireless infras-
tructure networks. Fourth, we analyze the efﬁciency of
our technique with respect to both data and time. Finally,
we evaluate the resistance of our technique to varying
conﬁguration settings of a driver and evaluate the poten-
tial ways one might evade our ﬁngerprinting technique.
To address these issues, we conducted a number of
experiments using different wireless drivers and cards
across a number of different operating system environ-
ments.
In all cases, our technique successfully ﬁnger-
printed the wireless driver in at least one conﬁguration.
While the amount of time needed to collect the data var-
ied across drivers and conﬁgurations, we required only
a small amount of captured wireless trafﬁc to ﬁngerprint
drivers accurately.
From our initial observations, we identiﬁed two prop-
erties of a device and driver that altered their signatures.
The ﬁrst property concerned whether the wireless device
was unassociated or associated to an access point. Our
initial experiments revealed that, by default, all wireless
drivers transmit probe request frames when disassoci-
ated from an access point. Additionally, many continue
to send probe requests even after association to an ac-
cess point, though often not as frequently. The second
property (only applicable to Windows drivers) concerns
how the driver is managed. For many drivers, the Win-
dows operating system can manage the conﬁguration of
the network settings for the wireless device instead of
having a standalone (vendor provided) program perform
those functions. The standalone program is provided by
the manufacturer of the wireless device and often sup-
ports more conﬁguration options for the speciﬁc driver,
though also requires more user interaction to manage the
device. We noticed slight differences in the behavior of
probing depending on which option a user chose to man-
age their device. Due to these differences, we treated
each of these property scenarios uniquely and created
signatures to identify a driver under any of the appro-
priate cases.
5.1 Building the Master Signatures
We collected trace data and constructed individual sig-
natures with the same structure as the example signa-
ture in Table 1. This was repeated for all 17 wireless
drivers in every conﬁguration known to affect the sig-
nature and supported by the wireless driver. Drivers
Fingerprintees
R
Wireless
medium
Client
15’
Client
(a) Test set 1 and master signature experimen-
tal setup.
R
R
Fingerprintees
Wireless
medium
Client
25’
Client
l
l
a
W
(b) Test set 2 experimental setup.
Fingerprintees
Wireless
medium
Client
10’
Client






s
n
o
i
t
c
u
r
t
s
b
o
.
c
s
i
m
   
   

Background traffic
(c) Test set 3 experimental setup.
Figure 3: Our test scenarios. R is the ﬁngerprinter.
from Apple, Cisco, D-Link, Intel, Linksys, MadWiﬁ (for
Atheros chipset-based cards running under Linux), Net-
gear, Proxim, and SMC were included in our testing.
A majority of the drivers included in our tests were for
Windows; therefore most of the drivers initially had four
individual signatures. We will refer to the four differ-
ent conﬁgurations as follows: (1) unassociated and con-
172
Security ’06: 15th USENIX Security Symposium
USENIX Association
trolled by Windows, (2) unassociated and controlled by
a standalone program, (3) associated and controlled by
Windows, (4) associated and controlled by a standalone
program. Three drivers did not support networking con-
trol by Windows (options 1 and 3), and four of the drivers
tested did not transmit probe request frames when asso-
ciated. This meant that initially, 57 signatures were com-
piled in the master signature database. We collected four
signatures at a time and each signature trace contained a
minimum of 12 hours worth of data points. A 30 minute
portion of each trace was set aside and not used in signa-
ture training. This data was used as test set 1, which we
further describe in the next section. As can be seen from
Figure 3(a), the observing machine’s antenna was placed
approximately 15 feet from the ﬁngerprintee machines,
and no physical obstructions were present between the
machines. Also, no 802.11 wireless trafﬁc was detected
besides the trafﬁc generated by the ﬁngerprintees.
After analyzing these signatures, we noted that chang-
ing conﬁgurations for some drivers had little impact on
the probe request frame transmission rate and conse-
quently, the generated signatures were indistinguishable
from one another. We considered these signatures to
be duplicates and removed all but one from the mas-