title:Scalability, fidelity and stealth in the DRAKVUF dynamic malware
analysis system
author:Tamas K. Lengyel and
Steve Maresca and
Bryan D. Payne and
George D. Webster and
Sebastian Vogl and
Aggelos Kiayias
Scalability, Fidelity and Stealth 
in the DRAKVUF Dynamic 
Malware Analysis System
Tamas K. Lengyel
@tklengyel
PI:EMAIL
Agenda
1. Motivation
2. System design
a. Scalability
b. Fidelity
c. Stealth
3. Experimental results
4. Conclusion
Motivation
● Large and continuously growing set of malware 
samples day-by-day
● Human analysts are expensive and limited
● Static analysis is thwarted by packers / metamorphic 
malware
● Malware is trying to stay under the radar
Motivation
● Dynamic analysis
– Observe the execution of the sample in a sandbox
– Collect behavioral characteristcs
– Collect artifacts (PCAP, unpacked binaries, etc.)
– Analyst can quickly find the outliers
● Linear hardware requirements
● Rootkits
● Sandbox detection
System design
● Mitigate linear hardware requirements with on-
demand resource allocation
– Scalability
● Monitor execution of both user- and kernel-mode 
malware without the potential of tampering
– Fidelity
● Hide monitoring environment from the executing 
malware
– Stealth
Fidelity
Detect when
● New process is scheduled, syscalls executed,   
files accessed / created / deleted, etc.
Monitor guest OS execution and memory utilization 
with hardware virtualization extensions
● Breakpoint injection
● Extended Page Tables (EPT) violations
● Monitor Trap Flag (MTF) singlestepping
● MOV-TO-CR trapping
Tamper resistance
Map OS without using heuristics
● Use debug data to find internal kernel functions
● FS/GS → _KPCR → Kernel!
● Syscalls vs. internal functions
● Allows monitoring kernel-mode rootkits as well
Monitor kernel heap allocations
● Kernel meta-info about processes, files, threads, 
mutexes, etc.
● Direct state reconstruction without scanning!
Future work
● DRAKVUF specific
– Multi-vCPU support
– Linux support
● General dynamic malware analysis problems
– Stalling code
– Record & Replay
– Branch exploration
– Timing attacks
Conclusion
● Dynamic analysis can aid in sorting through 
large sets of malware
● Existing tools are limited and can be tampered 
with
● DRAKVUF raises the bar
– Open source (GPLv2)
– http://drakvuf.com
● Thanks! Questions?