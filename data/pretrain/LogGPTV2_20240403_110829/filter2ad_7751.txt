# Scalability, Fidelity, and Stealth in the DRAKVUF Dynamic Malware Analysis System

**Authors:**
- Tamas K. Lengyel
- Steve Maresca
- Bryan D. Payne
- George D. Webster
- Sebastian Vogl
- Aggelos Kiayias

## Agenda
1. **Motivation**
2. **System Design**
   - Scalability
   - Fidelity
   - Stealth
3. **Experimental Results**
4. **Conclusion**

## Motivation
- The number of malware samples is increasing rapidly on a daily basis.
- Human analysts are both costly and limited in number.
- Static analysis is often ineffective against packed or metamorphic malware.
- Malware is designed to evade detection.

### Dynamic Analysis
- **Execution Observation:** Analyze the behavior of malware in a sandbox environment.
- **Behavioral Characteristics:** Collect data on the actions taken by the malware.
- **Artifacts Collection:** Gather files such as PCAPs and unpacked binaries.
- **Outlier Identification:** Enable analysts to quickly identify unusual behavior.
- **Linear Hardware Requirements:** Address the need for scalable hardware resources.
- **Rootkits and Sandbox Detection:** Handle advanced threats that can detect and evade analysis environments.

## System Design
### Scalability
- **On-Demand Resource Allocation:** Mitigate linear hardware requirements by dynamically allocating resources as needed.

### Fidelity
- **Comprehensive Monitoring:** Track the execution of both user- and kernel-mode malware without the risk of tampering.
- **Hardware Virtualization Extensions:** Use hardware virtualization extensions to monitor guest OS execution and memory usage.
  - **Breakpoint Injection:** Inject breakpoints to pause execution at specific points.
  - **Extended Page Tables (EPT) Violations:** Detect and handle EPT violations.
  - **Monitor Trap Flag (MTF) Single-Stepping:** Use MTF to single-step through code.
  - **MOV-TO-CR Trapping:** Trap MOV instructions to control registers.

### Tamper Resistance
- **Kernel Mapping Without Heuristics:** Use debug data to locate internal kernel functions.
  - **FS/GS Registers and _KPCR:** Map the kernel using FS/GS registers and the Kernel Control Protection Register.
  - **Syscalls vs. Internal Functions:** Differentiate between system calls and internal kernel functions.
  - **Kernel-Mode Rootkit Monitoring:** Monitor kernel heap allocations to track kernel meta-information about processes, files, threads, mutexes, etc.
  - **Direct State Reconstruction:** Reconstruct the state directly without the need for scanning.

### Stealth
- **Environment Concealment:** Hide the monitoring environment from the executing malware to prevent detection.

## Future Work
### DRAKVUF-Specific Improvements
- **Multi-vCPU Support:** Enhance support for multiple virtual CPUs.
- **Linux Support:** Extend compatibility to Linux systems.

### General Dynamic Malware Analysis
- **Stalling Code:** Develop methods to handle stalling code.
- **Record & Replay:** Implement record and replay functionality.
- **Branch Exploration:** Explore different branches of code execution.
- **Timing Attacks:** Mitigate timing attacks.

## Conclusion
- **Dynamic Analysis Benefits:** Dynamic analysis is crucial for managing large sets of malware.
- **Limitations of Existing Tools:** Current tools are limited and can be tampered with.
- **DRAKVUF Advantages:**
  - **Open Source:** Available under the GPLv2 license.
  - **Website:** [http://drakvuf.com](http://drakvuf.com)

Thank you! Any questions?