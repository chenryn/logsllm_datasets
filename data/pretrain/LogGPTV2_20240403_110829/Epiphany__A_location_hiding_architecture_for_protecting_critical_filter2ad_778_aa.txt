title:Epiphany: A location hiding architecture for protecting critical
services from DDoS attacks
author:Vamsi Kambhampati and
Christos Papadopoulos and
Daniel Massey
Epiphany: A Location Hiding Architecture for
Protecting Critical Services from DDoS Attacks
Vamsi Kambhampati
PI:EMAIL
Christos Papadopolous
PI:EMAIL
Dan Massey
PI:EMAIL
Abstract—Critical services operating over the Internet are
increasingly threatened by Distributed Denial of Service (DDoS)
attacks. To protect them we propose Epiphany, an architecture
that hides the service IP addresses so that attackers cannot
locate and target them. Epiphany provides service access through
numerous lightweight proxies, presenting a wide target to the
attacker. Epiphany has strong location hiding properties; no
proxy knows the service address. Instead, proxies communicate
over ephemeral paths controlled by the service. If a speciﬁc proxy
misbehaves or is attacked it can be promptly removed. Epiphany
separates proxies into setup and data, and only makes setup
proxies public, but these use anycast to create distinct network
regions. Clients in clean networks are not affected by attackers
in other networks. Data proxies are assigned to clients based on
their trust. We evaluate the defense properties of Epiphany using
simulations and implementations on PlanetLab and a router
testbed.
Index Terms—Critical Services; DDoS; Location Hiding; Prox-
ies; Hidden Paths
I. INTRODUCTION
As critical systems such as emergency response, industrial
control systems, government and banking systems are moving
to the public Internet, they become susceptible to threats such
as DDoS attacks, which according to a recent survey [1] are
still the top-most threat to Internet services. Critical services
by deﬁnition must have high availability, which becomes
extremely challenging when DDoS attacks can reach 100 Gbps
(up from 400Mbps in 2002 [1]). Solutions such as ﬁrewalls
are ineffective under such loads, and this is often true of
commercial solutions [2], [3], which also tend to be expensive.
The research community has many proposals to defend against
DDoS attacks [4]–[9], but most are not aimed at critical
services and to our knowledge none has been widely deployed
in the Internet.
Critical services are often treated as a separate class of
applications, often assumed to be small in number and low in
bandwidth, with proposed defenses based on location hiding
principles [10]–[13]. The core theme around these approaches
is to effectively hide the service address so that attackers
cannot target it directly. Typically the service becomes acces-
sible through a large number of proxies, which tend to dilute
the attack. However, given enough ﬁrepower an attacker can
still overwhelm the proxy network thus mounting an effective
attack.
In this paper, we build on existing location hiding ideas to
develop a novel DDoS defense architecture called Epiphany.
Unlike previous approaches, Epiphany eliminates the need for
a service network address making it virtually impossible to
attack the service directly. This is in contrast to approaches
that while hiding the service location from the general public,
still expose the service address to a small set of trusted proxies.
Such proxies could become a primary target for the attacker,
or worse, if compromised would expose the service address.
TOR [10], [14], [15] and SOS [11] for instance have a small
set of trusted proxies that know the service address (guard
nodes [14] & secret servlets [11]), but use multiple layers of
indirection to keep them secret. While Epiphany still relies
on proxies, these are untrusted and cannot reach the service
without
the service allowing it. Proxies send trafﬁc over
ephemeral hidden paths, which are created on the underlying
network using a technique akin to multicast routing. The paths
are under complete control of the service and can be easily
removed if a proxy misbehaves.
Proxies can still be discovered and attacked, so Epiphany
uses anycast
to limit proxy access. Since anycast packets
are directed to the local proxy by the routing system, an
attacker is forced to have bots in the same anycast region
as the clients to attack their proxy. However, since proxies are
lightweight (explained later) many can be quickly deployed
and the anycast regions can be made smaller in an effort to
isolate attackers. This dilution can not only help legitimate
clients circumvent attackers, but can make it easier to expose
bots whose activity becomes more visible.
Another feature of Epiphany is the separation of setup
proxies (SP) from data proxies (DP). Epiphany makes the SPs
public, but keeps the DPs private so they are harder to attack.
Unlike [10] where the client selects its DP, an Epiphany DP is
revealed to a new client by the service, perhaps after gaining
trust. The service further divides DPs to different levels of
trust, assigning clients accordingly. This further isolates new,
yet-untrusted clients from existing trusted ones. The service
also has full control over the location of DPs, which enables
physical separation based on trust to avoid collateral damage.
Finally, Epiphany uses the DNS for proxy discovery, which
inherits all the beneﬁts (and disadvantages) of DNS. Typical
measures to make DNS robust apply here: multiple servers,
long TTL values, robust network and hardware, etc.
In summary, with location hiding Epiphany makes it difﬁcult
for an attacker to pinpoint and target a protected critical
service: the attacker cannot attack the service directly since
there is no network address to target, and is sand-boxed by
anycast, and has to go through a trust-building process before
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
DNS 
S
S 
S SS
S 
S
Setup Proxies (SP) 
SPa 
SPb  SPa 
Hidden Paths 
DP1 
DP2  DP3 
D 
Destination 
Source 
Data Proxies (DP) 
Fig. 1. Epiphany architecture and components
it can attack a service. Even so, the attack is localized to a
private proxy, which can be easily and quickly disconnected
by the service, and will only affect clients currently using that
proxy.
The rest of the paper is organized as follows. We start
with an overview of the Epiphany architecture in Section II
and discuss the components in detail, namely the proxies and
hidden paths in Sections III & IV. We evaluate the defense
properties of Epiphany in Section V and describe how to
deploy Epiphany in Section VI. We then discuss other location
hiding approaches similar to Epiphany in Section VII and
conclude in Section VIII.
II. EPIPHANY OVERVIEW
A. Network Model
The Epiphany architecture (shown in Figure 1) has a source
S (a client) that wants to communicate with a destination D
(the service). However, D is hidden from S and the only way
to reach it is through proxies. The proxies don’t know D’s
address either, but instead are given hidden paths to forward
packets to D. Some proxies, designated as setup proxies (SP)
are responsible for forwarding requests from S. S discovers
SPs through the DNS. If D decides to authorize S, it selects
a data proxy (DP) and notiﬁes S through the SP; the rest of
the communication between a client and the service happens
through the assigned DP.
B. A Sample Communication Process
To better understand the interaction between components,
we describe an example of the communication process be-
tween S and D when there is no ongoing attack. For ease
of exposition we break down the communication process into
three phases as shown in Figure 2.
1) Pre-Setup: Before any source can communicate with the
service, D must ﬁrst select some SPs. We assume D learns
of available SPs through some external means; for instance,
SPs may run on user machines, be available as part of a
paid service, or are setup by network operators as a service
to their users. We assume that SPs have a public anycast
address in addition to their unicast address, but the latter is
not made public. SPs may have different anycast addresses
if they serve multiple services. Once D selects its SPs, it is
provided with the unicast addresses of the SPs. We assume
only D knows about the unicast addresses and that these are
safely communicated to D when it learns about the SPs.
Note that the above assumes an instance of Epiphany that is
not available to the general user to deploy a service (although
any user can access the service). While this is a reasonable
assumption for many critical services (they are deployed by
authorized users only), there is nothing to stop Epiphany from
being used by general users to provide a service. In this case,
however, without some access controls, it becomes relatively
easy to inﬁltrate the SP network and enumerate the unicast
address of the SPs and attack the service, a weakness shared
by other similar services such as TOR. While solutions to this
problem are beyond the scope of this work, we note that any
solution that works with other P2P services will also work for
Epiphany.
D uses the unicast addresses to build hidden paths to the SPs
(Section IV) and provides an identiﬁer for the corresponding
hidden path to each SP to forward requests to D. The SPs
are also assigned a service-controlled request rate limit. The
rate limit may depend on the aggregate users the service can
sustain, or be tailored to the path capacity from an SP to D.
The service ﬁnally publishes the anycast SP addresses in the
DNS (Section III-A). Note that further adjustments to the SP
population can be done dynamically and transparently, without
disruption to the service.
2) Setup: When S needs access to the service, it consults
DNS to get the anycast address for D. S then sends a request,
which may include identiﬁcation or authentication information
(Section III-B2) as shown in Figure 2(b). Upon receiving the
request, the SP ﬁnds the hidden path associated with D (the
SP may support multiple services simultaneously), veriﬁes that
the request conforms with the rate limit, and then sends the
client’s request to D with the SP’s unicast address (SP r
a in the
ﬁgure) in the source address and the hidden path identiﬁer in
the destination ﬁeld. Note that we use multicast addresses as
the path identiﬁer.
When D receives the request, it decides whether it will
accept S. If not, D can quietly drop the request, or as an opti-
mization notify the SP to block future requests from that client.
If the request is accepted, D chooses a DP (Section III-C) and
constructs a hidden path to it. D then generates a response
with an authorization and DP’s address, encrypts it, and sends
it back to the SP. As shown in Figure 2(b), the response
packet’s destination address is the SP’s unicast address SP r
a ,
and the source address is the hidden path identiﬁer HPad.
Upon receiving the response packet, the SP decapsulates it
and forwards it to S using its own anycast address (SPa).
After responding to S, D also sends a similar response to
the selected DP notifying it of the acceptance of S. The DP
and S can now reach each other and synchronize, after which
S can communicate with the service via the DP.
3) Data Transfer: Figure 2(c) shows the data transfer
phase. S sends an Epiphany data packet including the au-
thorization and sends it to the DP (DP1 in the ﬁgure). The
DP veriﬁes S using the authorization information given by D,
applies any rate limits set by D, looks up the hidden path for D
and forwards the data packet to D. When D receives the packet
it too veriﬁes the packet, and returns acknowledgments back
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
DNS 
Id 
D 
Path 
HPad 
d
 Rate 
x 
DNS 



SPa   S  req(D) 
SPa 
 HPad  SPr
a SPa   S  req(D) 

 DP1     S D  S  auth(s) data 
S 
S 
SPa 
SPb 
Pbb
SPa 


D 
S 
S SPa DP1 auth(s) 
 SPr
a  HPad
S SPa DP1 auth(s) 

D 

S  DP1 auth(s) 
DP1 
 DP1 HP1d
S DP1 R auth(s) 
HP1d  S  auth(s) data 
D 

S  DP1 auth(s) ack 
Id 
D 
DP1 
 DP1    HP1d S  DP1 auth(s) ack 
Auth 
..1010.. 
Path 
HPad 
 Rate 
x 
(a) Pre-Setup phase
(b) Setup phase
(c) Data transfer phase
Fig. 2. Example of a source (S) communicating with a destination (D) in Epiphany
to S via the DP. Figure 2(c) illustrates this message exchange.
C. Threat Model
Since Epiphany hides the service address, a distributed
attacker may target the Epiphany infrastructure including the
proxies, discovery service and routers. We assume some prox-
ies and routers may be compromised, although we assume the
attacker cannot arrange for speciﬁc routers to be compromised.
Attacks against proxies: The attacker may brute-force attack
the SPs, or more effectively, may ﬂood SPs with valid requests
to consume the request tokens. The SPs do not authenticate
requests, so if R is the request rate limit at an SP, and rr,
rl are the attacker and legitimate client’s combined request
) of
rates, then legitimate clients on average will get O(
R. But, if the attacker’s rate is much higher, i.e., rr >> rl,
then legitimate clients may fail to reach D in some expected
duration. This type of attack is well studied in capabilities [8],
[9], [16], here we refer to it as Denial of Connection (DoC)
attack. The attacker may also target the DPs to cause collateral
damage to some legitimate clients, but these will be limited
to the DPs that the attacker can learn.
rr+rl
rl
Attacks from compromised proxies: Proxies could be com-
promised, or may be colluding with the attacker. They may
send trafﬁc ﬂoods towards D using the hidden paths, or worse,
may steal authorizations issued to clients and misuse them.
Epiphany allows the service to quickly cutoff such proxies.
Attacks on hidden paths: The attacker may attempt to hijack
a hidden path, or may attempt to trick D into creating more
hidden paths to consume D’s resources. We do not consider
penetration attacks [17] since they require the attacker to
compromise all routers between a proxy and D; [17] argues
that making the path longer and employing different operating
systems on nodes makes these attacks difﬁcult. In Epiphany,
D can ensure that proxies are located at least x hops away,
and moreover Internet routers run different OS compared to
hosts and are typically well managed.
Attacks on the discovery service: The attacker may also
target the discovery service (in our case DNS) to prevent
legitimate clients from learning about the proxies. Defending
DNS is outside the scope of this work, as there are well known
techniques for this task.
III. EPIPHANY COMPONENTS: PROXIES & DESTINATION
A. Proxy Discovery Using DNS
In order to send requests to D, a client S must learn about
at least one SP address. We refer to this process as proxy
discovery and achieve it using DNS. Assume S has a service
name it is attempting to reach; S could have learned this
through an email, a web page (URL), or word of mouth. Here
the service name is synonymous with D, since D does not
have a public address. S sends a DNS query for the service
name asking for A/AAAA records. The response will have an
IP address that S could use to contact a nearby anycast SP.
A key requirement
in Epiphany is that D be able to
add/remove SPs quickly and frequently to adapt to varying
conditions, such as increase in load or in response to attacks
on SPs. But, large scale updates and quick propagation of
changes are difﬁcult in DNS. However with anycast, a large
number of SPs map to one or a small number of addresses in
DNS; hosts acting as SPs can change frequently, but the DNS
records can remain unchanged for long periods. The attacker
may target the DNS to prevent legitimate clients from learning
about SPs. However, DNS can be made robust to such attacks
using multiple name servers, using anycast name servers and
also by making the DNS records for SPs have longer TTL
values to increase availability through caching.
B. Localizing Attackers Using Anycast SPs
To combat DoC attacks we propose to use Anycast SPs1.
Anycast
is a mechanism in which multiple nodes in the
Internet have the same IP address, but the underlying routing
system directs packets to the nearest node [19]. It is our belief
that although bots may be present everywhere, some networks
(however small they may be) are cleaner2, i.e., have very few
or no bots, but attackers in unclean networks can interfere with
clean networks if all SPs are reachable from any network. It
is these clean networks we wish to liberate from attackers.
Using anycast, it is possible to restrict the accessibility of
an SP to within a small network region. That is because,
anycast creates distinct network regions – requests generated
by clients in a region are automatically directed to the SP in
that region, thus attackers are restricted to only targeting the
SP in their own regions. If a region does not have attackers,
legitimate clients in that region are unaffected. If suppose D
is able to identify a region with both attackers and legitimate
clients (by either monitoring SPs, or through some external
means), D can instantiate more SPs in that region to further
split it into smaller regions. The splitting can be done down to
subnet level, so that clean subnets are separated from unclean
ones. We believe this sort of localization is a ﬁrst step to
1Anycast is actively used to protect DNS root servers [18]
2We borrow the deﬁnition of clean and unclean networks from [20]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
combating DDoS attacks. Bot activity becomes more visible
and the attackers now become a local problem for operators