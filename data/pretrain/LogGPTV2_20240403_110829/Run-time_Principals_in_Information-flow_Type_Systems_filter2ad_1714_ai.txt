### Hierarchy and Binding

The hierarchy is extended by the binding `(X1 ≤ X2)` in `...` (corresponding to E-LetDel).

\[
\{[[i]]\}
\]
\[
p_{n-1}\{[[p_{n-1} \leq p_n]]\} \leftrightarrow K^{-1}_{p_n}
\]

### Run-time Principals in Information-Flow Type Systems

#### Example Illustration

We illustrate this process with an example. Consider the following program that takes two capabilities and some data owned by Alice, and attempts to declassify it.

```haskell
λc1 : C. λc2 : C. λx: bool{Alice :!}.
if (c1 ⇒ Alice . delegateAlice≤Bob)
  let (Alice ≤ Bob) in
    if (c2 ⇒ Bob . declassify)
      declassify x bool{!}
```

By the typing rule T-Dcls for declassification, line 5 requires the authority \( p \).declassify for some \( p \) acting for Alice because Alice’s policy is being weakened:

\[
\text{bool}\{Alice :!\} - \text{bool}\{!\} = \{Alice\}
\]

The PKI implementation justifies the presence of Alice's authorization. Assume the acts-for hierarchy \( A \) at line 1 is the default hierarchy consisting of only \((K_X, K_>)\) pairs. Line 2 uses \([[Alice]] = K_{Alice}\) to verify the certificate \( A \vdash c1 \Rightarrow (K_{Alice}, [[i]]) \) where \([[i]] = [[delegateAlice≤Bob]] = (del, K_{Alice}, K_{Bob})\). Since the acts-for hierarchy is otherwise empty, \( c1 \) must be of the form \( K^{-1}_{Alice}\{[[i]]\} \) or \( K^{-1}_>\{[[i]]\} \). The first certificate can be validated using only \( K_{Alice} \); the second can be validated starting from \( K^{-1}_{Alice}\{[[Alice ≤ >]]\} \leftrightarrow K^{-1}_>\{[[i]]\} \). If one of these chains is valid, line 3 adds the delegation information into the hierarchy so that \((K_{Alice}, K_{Bob}) \in [[A]]\).

Similarly, there are two certificates \( c2 \) that may justify the static condition \( Alice ≤ π(declassify) = Alice ≤ Bob \) required by rule T-Dcls in line 5. If \( c2 = K^{-1}_{Bob}\{dcls\} \), the static condition holds at runtime because we can find the chain:

\[
K^{-1}_{Alice}\{[[Alice ≤ Bob]]\} \leftrightarrow K^{-1}_{Bob}\{dcls\}
\]

If \( c2 = K^{-1}_>\{dcls\} \), we can find the chain:

\[
K^{-1}_{Alice}\{[[Alice ≤ Bob]]\} \leftrightarrow K^{-1}_{Bob}\{[[Bob ≤ >]]\} \leftrightarrow K^{-1}_>\{dcls\}
\]

### Application to Distributed Banking

Figure 11 shows a more elaborate example of a λRP program that implements a distributed banking scenario in which a customer interacts with their bank through an ATM. The example uses standard constructs such as integers, pairs, let-binding, and existential types with multiple arguments, which are not in λRP but could be added or encoded [Pierce 2002]. The main functions for the ATMs and the Bank are shown, along with the types of various auxiliary functions.

The static principals are Bank and ATM1 through ATMn, and there are two run-time principals, user and agent. The principal user is the customer at an ATM; agent is the Bank’s name for one of the n ATMs that may connect to the bank server. At the top of Figure 11 are the type declarations of the functions used, in the middle is the client code for ATMj (a particular ATM), and at the bottom is the bank server code.

At the ATMj, the customer logs in with the bank card and the password, revealing his identity \([user, userid]\) and allowing ATMj to act for him (represented by the capability \( cdel \)). Then ATMj interacts with the user to obtain his request, such as withdrawing $100. This interaction is modeled by the acquire. The ATM client packs the identities ATMj and \( userid \) and the delegation \( cdel \) and the request \( creq \) certificates into a message. To send the message over the channel to Bank, ATMj gives up the ownership of the data by declassifying the message to have label \(\{Bank :Bank !\}\). As a result of the transaction with the bank server, ATMj obtains the new account balance of the customer. Finally, ATMj prompts to determine whether the user wants a receipt, which requires a declassification certificate to print.

This example makes use of fine-grained declassify privileges to distinguish between the printing (declassifyprt) and network send (declassifynet) uses of declassification. These variants have the same static and dynamic semantics as the declassify (as formulated in the last section), the subscripts are only annotations that explicitly distinguish different uses of declassification.

The bank server listens over the private channel and receives the message. The listen function also provides a reply channel so that the balance can be returned to the same ATM. The server determines that the user has logged in to ATMj by verifying \( cdel \), and if so, checks that the request capability is valid. If so, the server updates its database and declassifies the resulting balance to be sent back to the ATM. In practice, Bank will also want to log the certificates for auditing purposes.

In the functions request and listen, we assume the existence of a private network between ATMj and Bank, which can be established using authentication and encryption. Since the network is private, the outgoing data must be readable only by the receiver; and, since the network is trusted, the incoming data has the integrity of the receiver. The labels of their types faithfully reflect this policy: for example, \(\{Bank :Bank !\}\) vs. \(\{agent:agent!agent\}\) in the type of request.

Note that the run-time authority for declassification and delegation are provided by the customer—they are acquired by the interaction of ATMj and user. In contrast, in the types of \(ATMj\_main\) and \(Bank\_main\), the static capability requirements \([ATMj . declassifynet]\) and \([Bank . declassifynet]\) indicate that the authorities to declassify to the network must be established from the caller.

Our type system does not prevent information leaks through computational effects such as printing or network input/output. Our ongoing research uses monads to incorporate such static analysis, in the same spirit as the work by Crary et al. [2004].

### Discussion

#### Related Work

The work nearest to ours is the Jif project, by Myers et al. [1999]. The Jif compiler supports run-time principals but its type system has not been shown to be safe. Our noninterference proof for λRP is a step in that direction. Jif also supports run-time labels [Zheng and Myers 2004], which are run-time representations of label annotations, and a switch label construct that lets programs inspect the labels at runtime. Although it is desirable to support both run-time labels and run-time principals, the two features are mostly orthogonal.

While the core λRP presented here is not immediately suitable for use by programmers (more palatable syntax would be needed), λRP can serve as a typed intermediate representation for languages like Jif. Moreover, this approach improves on the current implementation of the decentralized label model (DLM) because Jif does not support declassification of data owned by run-time principals, nor does it provide language support for altering the acts-for hierarchy. Our separation of static principals from their run-time representations also clarifies the type checking rules.

The ability to perform acts-for tests at runtime is closely related to intensional type analysis, which permits programs to inspect the structure of types at runtime. Our use of singleton types like \( P_p \) to tie run-time tests to static types follows the work by Crary, Weirich, and Morrisett [2002]. Static capability sets \( \pi \) in our type system are a form of effects [Jouvelot and Giﬀord 1991], which have also been used to regulate the read and write privileges in type systems for memory management [Crary et al. 1999]. Simonet and Pottier [2004] have a related application using guarded algebraic datatypes to express such run-time types and run-time tests.

The robustness condition on the set of run-time capabilities is very closely related to Java’s stack inspection model [Wallach and Felten 1998; Wallach et al. 2000; Fournet and Gordon 2002; Pottier et al. 2001]. In particular, the enable-privilege operation corresponds to our \( \text{if } (e1 \Rightarrow e2 . i) e3 e4 \) and the check-privileges operation corresponds to the constraint on \( \pi \) in the declassify rule. The restriction \( \pi|l \) of capability sets in the type-checking rule for function application corresponds to taking the intersection of privilege sets in these type systems. However, stack inspection is not robust in the sense that data returned from an untrusted context can influence the outcome of privileged operations [Fournet and Gordon 2002]. In contrast, λRP tracks the integrity of data and restricts the capability sets according to the principals’ trust in the data—this is why the restriction \( \pi|l \) appears in the typechecking rule for case expressions.

Banerjee and Naumann [2003] have previously shown how to mix stack inspection-style access control with information-flow analysis. They prove a noninterference result, which extends their earlier work on information-flow in Java-like languages [Banerjee and Naumann 2002]. Unlike their work, this paper considers run-time principals as well as run-time access control checks. Incorporating the principals used by the DLM into the privileges checked by stack inspection allows our type system to connect the information-flow policies to the access control policy, as seen in the typechecking rule for declassify.

We have proposed the use of public key infrastructures as a natural way to implement the authority needed to regulate declassification in the presence of run-time principals. Although the interpretation of principals as public keys and authorized actions as digitally signed certificates is not new, integrating these features in a language with static guarantees brings new insights to information-flow type systems. This approach should facilitate the development of software that interfaces with existing access-control mechanisms in distributed systems [Howell and Kotz 2000; Gasser and McDermott 1990].

Making the connection between PKI and the label model more explicit may have additional benefits. Myers and Liskov observed that the DLM acts-for relation is closely related to the speaks-for relation in the logical formulation of distributed access control by Abadi et al. [1993]. Adopting the local names of the SDSI/SPKI framework [Abadi 1998] may extend the analogy even further. Chothia et al. [2003] also use PKI to model typed cryptographic operations for distributed access control.

Lastly, although the capability mechanism in λRP provides facilities for programming with static and run-time capabilities, we do not address the problem of revocation. It would be useful to find suitable language support for handling revocation, such as that found in the work by Jim and Gunter [2001; 2000], but we leave such pursuits to future work.

### Conclusions

Information-flow type systems are a promising way to provide strong confidentiality and integrity guarantees. However, their practicality depends on their ability to interface with external security mechanisms, such as the access controls and authentication features provided by an operating system. Previous work has established noninterference only for information-flow policies that are determined at compile time, but such static approaches are not suitable for integration with run-time security environments.

This paper addresses this problem in three ways: (1) We prove noninterference for an information-flow type system with run-time principals, which allow security policies to depend on the run-time identity of users. (2) We show how to safely extend this language with a robust access-control mechanism, a generalization of stack inspection, that can be used to control privileged operations such as declassification and delegation. (3) We sketch how the run-time principals and the acts-for hierarchy of the decentralized label model can be interpreted using public key infrastructures.

Our ongoing research attempts to use monads, in the same spirit as the dependency core calculus by Abadi et al. [1999], to simplify the design of the decentralized label model. In particular, we model all downgrading mechanisms uniformly as subtyping to allow a simple formulation and proof of a conditioned version of noninterference, even in the presence of downgrading.

### Acknowledgment

The authors thank Steve Chong, Peng Li, Francois Pottier, and Dimitrios Vytiniotis for their valuable feedback and discussions.