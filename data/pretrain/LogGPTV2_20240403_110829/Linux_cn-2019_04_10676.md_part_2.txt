2. 调用 `UsbCheckForChange`
3. 调用 `KeyboardCount`
4. 如果返回 0，重复步骤 2。
5. 针对你支持的每个键盘：
	1. 调用 `KeyboardGetAddress`
	2. 调用 `KeybordGetKeyDownCount`
	3. 针对每个按下的按键：
		1. 检查它是否已经被按下了
		2. 保存按下的按键
	4. 针对每个保存的按键：
		1. 检查按键是否被释放了
		2. 如果释放了就删除
6. 根据按下/释放的案件执行操作
7. 重复步骤 2
最后，你可以对键盘做所有你想做的任何事了，而这些方法应该允许你访问键盘的全部功能。在接下来的两节课，我们将会着眼于完成文本终端的输入部分，类似于大部分的命令行电脑，以及命令的解释。为了做这些，我们将需要在更有用的形式下得到一个键盘输入。你可能注意到我的驱动是（故意的）没有太大帮助，因为它并没有方法来判断是否一个按键刚刚按下或释放了，它只有方法来判断当前那个按键是按下的。这就意味着我们需要自己编写这些方法。
### 6、可用更新
首先，让我们实现一个 `KeyboardUpdate` 方法，检查第一个键盘，并使用轮询方法来获取当前的输入，以及保存最后一个输入来对比。然后我们可以使用这个数据和其它方法来将扫描码转换成按键。这个方法应该按照下面的说明准确操作：
> 
> 重复检查更新被称为“轮询”。这是针对驱动 IO 中断而言的，这种情况下设备在准备好后会发一个信号。
> 
> 
> 
1. 提取一个保存好的键盘地址（初始值为 0）。
2. 如果不是 0 ，进入步骤 9.
3. 调用 `UsbCheckForChange` 检测新键盘。
4. 调用 `KeyboardCount` 检测有几个键盘在线。
5. 如果返回 0，意味着没有键盘可以让我们操作，只能退出了。
6. 调用 `KeyboardGetAddress` 参数是 0，获取第一个键盘的地址。
7. 保存这个地址。
8. 如果这个值是 0，那么退出，这里应该有些问题。
9. 调用 `KeyboardGetKeyDown` 6 次，获取每次按键按下的值并保存。
10. 调用 `KeyboardPoll`
11. 如果返回值非 0，进入步骤 3。这里应该有些问题（比如键盘断开连接）。
要保存上面提到的值，我们将需要下面 `.data` 段的值。
```
.section .data
.align 2
KeyboardAddress:
.int 0
KeyboardOldDown:
.rept 6
.hword 0
.endr
```
```
.hword num 直接将半字的常数插入文件。
```
```
.rept num [commands] .endr 复制 `commands` 命令到输出 num 次。
```
试着自己实现这个方法。对此，我的实现如下：
1、我们加载键盘的地址。
```
.section .text
.globl KeyboardUpdate
KeyboardUpdate:
push {r4,r5,lr}
kbd .req r4
ldr r0,=KeyboardAddress
ldr kbd,[r0]
```
2、如果地址非 0，就说明我们有一个键盘。调用 `UsbCheckForChanges` 慢，所以如果一切正常，我们要避免调用这个函数。
```
teq kbd,#0
bne haveKeyboard$
```
3、如果我们一个键盘都没有，我们就必须检查新设备。
```
getKeyboard$:
bl UsbCheckForChange
```
4、如果有新键盘添加，我们就会看到这个。
```
bl KeyboardCount
```
5、如果没有键盘，我们就没有键盘地址。
```
teq r0,#0
ldreq r1,=KeyboardAddress
streq r0,[r1]
beq return$
```
6、让我们获取第一个键盘的地址。你可能想要支持更多键盘。
```
mov r0,#0
bl KeyboardGetAddress
```
7、保存键盘地址。
```
ldr r1,=KeyboardAddress
str r0,[r1]
```
8、如果我们没有键盘地址，这里就没有其它活要做了。
```
teq r0,#0
beq return$
mov kbd,r0
```
9、循环查询全部按键，在 `KeyboardOldDown` 保存下来。如果我们询问的太多了，返回 0 也是正确的。
```
saveKeys$:
  mov r0,kbd
  mov r1,r5
  bl KeyboardGetKeyDown
  ldr r1,=KeyboardOldDown
  add r1,r5,lsl #1
  strh r0,[r1]
  add r5,#1
  cmp r5,#6
  blt saveKeys$
```
10、现在我们得到了新的按键。
```
mov r0,kbd
bl KeyboardPoll
```
11、最后我们要检查 `KeyboardOldDown` 是否工作了。如果没工作，那么我们可能是断开连接了。
```
teq r0,#0
bne getKeyboard$
return$:
pop {r4,r5,pc}
.unreq kbd
```
有了我们新的 `KeyboardUpdate` 方法，检查输入变得简单，固定周期调用这个方法就行，而它甚至可以检查键盘是否断开连接，等等。这是一个有用的方法，因为我们实际的按键处理会根据条件不同而有所差别，所以能够用一个函数调以它的原始方式获取当前的输入是可行的。下一个方法我们希望它是 `KeyboardGetChar`，简单的返回下一个按下的按钮的 ASCII 字符，或者如果没有按键按下就返回 0。这可以扩展到支持如果它按下一个特定时间当做多次按下按键，也支持锁定键和修饰键。
如果我们有一个 `KeyWasDown` 方法可以使这个方法有用起来，如果给定的扫描代码不在 `KeyboardOldDown` 值中，它只返回 0，否则返回一个非零值。你可以自己尝试一下。与往常一样，可以在下载页面找到解决方案。
### 7、查找表
`KeyboardGetChar` 方法如果写得不好，可能会非常复杂。有 100 多种扫描码，每种代码都有不同的效果，这取决于 shift 键或其他修饰符的存在与否。并不是所有的键都可以转换成一个字符。对于一些字符，多个键可以生成相同的字符。在有如此多可能性的情况下，一个有用的技巧是查找表。查找表与物理意义上的查找表非常相似，它是一个值及其结果的表。对于一些有限的函数，推导出答案的最简单方法就是预先计算每个答案，然后通过检索返回正确的答案。在这种情况下,我们可以在内存中建立一个序列的值，序列中第 n 个值就是扫描代码 n 的 ASCII 字符代码。这意味着如果一个键被按下，我们的方法只需要检测到，然后从表中检索它的值。此外，我们可以为当按住 shift 键时的值单独创建一个表，这样按下 shift 键就可以简单地换个我们用的表。
> 
> 在编程的许多领域，程序越大，速度越快。查找表很大，但是速度很快。有些问题可以通过查找表和普通函数的组合来解决。
> 
> 
> 
在 `.section .data` 命令之后，复制下面的表：
```