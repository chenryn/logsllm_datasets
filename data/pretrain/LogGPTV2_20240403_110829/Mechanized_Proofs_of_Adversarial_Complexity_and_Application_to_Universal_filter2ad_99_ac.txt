Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2545Environments. Typing is done in an environment E.3 Essentially,
an environment is a list of declarations, which are either variable,
module or abstract module declarations.
E ::= ϵ | E, var v : τ | E, module x = m : M
| E, module x = absopen : Ml
An abstract module declaration module x = absopen : Ml states that
x is a module with signature Ml whose code is unknown, and allows
to model open code.4 For any E, we let abs(E) = {x1, . . . , xn} be
the set of abstract module names declared in E.
Restrictions. The RestrMem rule checks that a procedure body
{ _; s; return e } (where s is the procedure’s instructions, and e the
returned expression) verifies a memory restriction through a fully
automatic syntactic check.
RestrMem
(memE(s) ⊔ vars(e)) ⊑ λm
E ⊢ { _; s; return e } ▷ λm
This syntactic check uses memE(s) and vars(e), which are sound
over-approximations of an instruction and expression memory
footprint (the approximation is not complete, e.g. it will include
memory accesses done by unreachable code).
The RestrCompl rule checks that an instruction verifies some
complexity restriction. The rule generates proof obligations in a
Hoare logic for cost. These proof obligations are discharged inter-
actively using the proof system we present later, in Section 4.
RestrCompl
E ⊢ {⊤} s {ψ | t}
(t + tr · 1conc) ≤compl λc
⊢ {ψ} r ≤ tr
E ⊢ { _; s; return r } ▷ λc
Here, the proof obligation E ⊢ {⊤} s {ψ | t} states that the exe-
cution of s in any memory has a complexity upper bounded by t,
and that the post-condition ψ holds after s’s execution. The proof
obligation ⊢ {ψ} r ≤ tr upper-bounds the cost of evaluating the
return expression r. Finally, the rule checks that the sum of t and
tr is compatible with the complexity restriction λc through the
premise (t + tr · 1conc) ≤compl λc. We leave the precise definition
of ≤compl to Section 4 (see Figure 23). Intuitively, t is a record of
entries of the form (x.f (cid:55)→ lf ), each stating that the abstract mod-
ule x’s procedure f has been called at most lc times, plus a special
entry (conc (cid:55)→ lc) stating that s execution time, excluding abstract
calls, is at most lc. Then, t0 ≤compl λc checks that t0[x.f ] ≤ λc[x.f ]
for every functor parameter x.f , and that λc[intr] upper-bounds
everything else in t0.
4 COMPLEXITY REASONING IN EASYCRYPT
We now present our Hoare logic for cost, which allows to formally
prove complexity upper-bounds of programs. This logic manipu-
lates judgment of the form E ⊢ {ϕ} s {ψ | t}, where s is a statement,
ϕ,ψ are assertions, and t is a cost. We leave the assertion language
3Actually, the type system in Appendix B uses more complex environment, called
typing environment, to account for sub-modules.
4Abstract module must have low-order signatures, i.e. module structures, or functors
whose parameters are module structures (see Appendix B). This choice is motivated by
the fact that further generality is not necessary for cryptographic proofs (adversaries
and simulations usually return base values, not procedures); and, it allows the abstract
call rule of our cost Hoare logic Abs (in Figure 6) to remain tractable.
unspecified, and only require that the models of an assertion for-
mula ϕ are memories, and write ν ∈ ϕ whenever ν satisfies ϕ.
Essentially, the judgment E ⊢ {ϕ} s {ψ | t} states that s is a
program well-typed in the environment E (e.g. this means that s
can only call concrete or abstract procedures declared in E), and
that: i) the execution of the program s on any initial memory νi
satisfying the precondition ϕ (i.e. νi ∈ ϕ) terminates in time at most
t; and ii), the final memory νf obtained by executing s starting from
νi satisfies the post-condition ψ (i.e. νf ∈ ϕ).
4.1 Cost Judgment
A key point of our Hoare logic for cost is that it allows to split
the cost of a program s between its concrete and abstract costs,
i.e. between the time spent in concrete code, and the time spent in
abstract procedures. To reflect this separation between concrete and
abstract cost, a cost t is a record of entries mapping each abstract
procedure x.f to the number of times this procedure was called,
and mapping a special element conc to the concrete execution time
(i.e. excluding abstract procedure calls). Since the set of available
abstract procedures (and consequently the number of entries in the
cost t) depends on the current environment E, we parameterize the
notion of cost by the environment E considered:
Definition 4.1. A E-cost is an element of the form:
t ::= [conc (cid:55)→ k, x1.f1 (cid:55)→ k1, . . . xl .fl (cid:55)→ kl]
where E is an environment, k, k1, . . . , kl are integers, and the xi .fi
are all the abstract procedures declared in E.
Example 4.1. Consider E with two abstract modules x and y:
E = (module x = absopen : sig (proc f _) restr _ end);
(module y = absopen : sig (proc h _) restr _ end)
Then [conc (cid:55)→ 10; x.f (cid:55)→ 0; y.h (cid:55)→ 3] represents a concrete cost of
10, at most three calls to y.h, and none to x.f .
Definition 4.2. A cost judgment for a statement is an element of
the form E ⊢ {ϕ} s {ψ | t} where E must be well-typed, s must be
well-typed in E and t must be an E-cost. We define similarly a cost
judgment for a procedure E ⊢ {ϕ} F {ψ | t}.
In Figure 5, we give a graphical representation of a cost judgment
for the procedure A(B, C).a, where A and C are concrete modules,
and B is an abstract functor with access to C as a parameter. Then,
intuitively, the cost judgment:
E ⊢ {⊤} A(B, C).a {⊤ | [conc (cid:55)→ tconc, B.b (cid:55)→ 1]}
is valid whenever tconc upper-bounds the concrete cost (in hatched
gray
) which is the sum of: i) the intrinsic cost of A.a, which
is the cost of A.a without counting parameter calls, represented in
in the figure, and must be at most ta as stated in
hatched blue
TA’s restriction; and ii) the sum of the cost of the three calls to C.c.
The cost of the execution of the abstract procedure B.b (in
hatched red
), which excludes the two calls B.b makes to C.c,
are accounted for by the entry (B.b (cid:55)→ 1) in the cost judgment.
Note that it is crucial that this excludes the cost of the two calls to
C.c, which are already counted in the concrete cost tconc
.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2546C:
B:
A:
sc
sc
sc
. . .
B
. . .
s1
s2
s3
module type TC = { proc c () : unit }.
module C = { proc c () = { sc } }.
module type TB (C0 : TC) = {
proc b () : unit compl[intr : tb, C0 .c : 2] }.
module type TA (B0 : TB) (C0 : TC) = {
proc a () : unit compl[intr : ta, B0 .b : 1, C0 .c : 1] }.
module A (B0 : TB) (C0 : TC) : TA= {
proc a () = {
s1; C0.c(); s2; B0(C0).b(); s3;
}}.
concrete
Judgment E ⊢ {⊤} A(B, C).a {⊤ | [conc (cid:55)→ tconc, B.b (cid:55)→ 1]} where E = (module B = absopen : TB).
intrinsic (A.a)
abstract
Figure 5: Graphical representation of the different cost measurements.
Expression cost. We have a second kind of judgment ⊢ {ϕ} e ≤ te,
which states that the cost of evaluating e in any memory satisfying
ϕ is at most te, where te is an integer, not a E-cost (indeed, an
expression cost is always fully concrete, as expressions do not
contain procedure calls). We do not provide a complete set of rules
for such judgments, as this depends on low-level implementation
details and choices, such as data-type representation and libraries
implementations. In practice, we give rules for some built-ins, a
way for the user to add new rules, and an automatic rewriting
mechanism which automatically prove such judgments from the
user rules in most cases.
4.2 Hoare Logic for Cost Judgment
We present our Hoare logic for cost, which allows to prove cost
judgments of programs. Our logic has one rule for each possible
program construct (assignment, loop,...), plus some structural rules
(e.g. weakening). We only describe a simple Hoare rule for condi-
tional construct, and then explain a core rule of our logic, which
handles abstract calls. All other rules are given in Appendix E.
Basically, our cost judgment are standard Hoare logic judgment
with the additional cost information, and both aspects must be
handled by the rules of our logic.
In some cases, these can be handled separately. E.g. the rule:
If
⊢ {ϕ} e ≤ te
E ⊢ {ϕ ∧ e } s1 {ψ | t }
E ⊢ {ϕ ∧ ¬e } s2 {ψ | t }
E ⊢ {ϕ} if e then s1 else s2 {ψ | t + te }
state that if: i) the evaluation of the condition e takes time at
most te; ii) the execution of the then branch program s1, assuming
pre-condition ϕ ∧ e, guarantees the post-condition ψ and takes
time at most t; iii) and the execution of the else branch, assuming
the pre-condition ϕ ∧ ¬e, guarantees the same post-condition ψ,
and also takes time at most t; then the full conditional statement
if e then s1 else s2, assuming pre-condition ϕ, guarantees the post-
condition ψ in time at most t + te. Note that we use the same cost
upper-bound t for both branches: essentially, t can be chosen to be
the maximum of the execution times of the then and else branches.
Other rules are more involved, and require the user to show
simultaneously invariants of the memory state of the program and
cost upper-bounds.
Abstract call rule without cost. This is the case of our rule for
upper-bounding the cost of a call to an abstract procedure F. To
Abs
θ[f ] = λm ∧ λc
E(x) = absopenx : (func((cid:174)y : _) sig _ restr θ end)
f-resE(F) = (absopen x)((cid:174)p).f
λc = compl[intr : K, zj1 .f1 : K1, . . . , zjl .fl : Kl]
FV(I) ∩ λm = ∅
(cid:174)k fresh in I
∀i, ∀(cid:174)k ≤ (K1, . . . , Kl), (cid:174)k[i] < Ki → E ⊢ {I (cid:174)k } (cid:174)p[ji].fi {I ((cid:174)k + 1i) | ti k }
E ⊢ {I (cid:174)0} F {∃(cid:174)k, I (cid:174)k ∧ (cid:174)0 ≤ (cid:174)k ≤ (K1, . . . , Kl) | Tabs}
where Tabs = (cid:8)x.f (cid:55)→ 1; (cid:0)G (cid:55)→l
k =0 (ti k)[G](cid:1)
i =1Ki−1
G(cid:44)x.f
(cid:9)
Conventions: (cid:174)y can be empty (this corresponds to the non-functor case).
Figure 6: Abstract call rule for cost judgment.
ease the presentation, we first present a version of the rule for usual
Hoare judgment without costs, and explain how to add costs after.
abs-partial
f-resE(F) = (absopen x)((cid:174)p).f
E(x) = absopen x : (func((cid:174)y : _) sig _ restr θ end)
θ[f ] = λm ∧ _
∀p0 ∈ (cid:174)p, ∀д ∈ procsE(p0), E ⊢ {I } p0 .д {I }
FV(I) ∩ λm = ∅
E ⊢ {I } F {I }
First, the function path F is resolved to (absopen x)((cid:174)p).f , i.e. a call
to the procedure f of an abstract functor x applied to the modules
(cid:174)p (the case where x is not a functor is handled by taking (cid:174)p = ϵ).
Then, x’s module type is lookup in E, and we retrieve the module
restriction θ attached to it. The rule allows to prove that some
formula I is an invariant of the abstract call, by showing two things.
First, we show that I is an invariant of x.f , excluding calls to the
functor parameters. This is done by checking that x.f cannot access
the variables used in I, using its memory restriction λm (looked-up
by the premise θ[f ] = λm ∧ _) and requiring that FV(I) ∩ λm = ∅ .
Then, we prove that I is an invariant of x.f ’s calls to functor
parameters. This is guaranteed by requiring that for every functor
parameter p0 ∈ (cid:174)p, for any of p0’s procedure д ∈ procsE(p0), the
judgment E ⊢ {I} p0.д {I} is valid.
Abstract call. We now present our Abs rule for cost judgments,
which is given in Figure 6. Essentially, the cost of the call to x((cid:174)p).f
is decomposed between:
• the intrinsic cost of x.f excluding the cost of the calls to
x’s functor parameters. This is accounted for by the entry
(x.f (cid:55)→ 1) in the final cost Tabs.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2547• the cost of the calls to x.f functor parameters, which are
enumerated in the restriction:
λc = compl[intr : K, zj1 .f1 : K1, . . . , zjl .fl : Kl]
We require, for every i, a bound on the cost of the k-th call to
the functor argument zji
procedure’s fi, where k can range
anywhere between 0 and the maximum number of calls x.f
can make to zji
, which is Ki. The cost of the k-th call to zji .fi
is bounded by (ti k) where k = (cid:174)k[i] and:
E ⊢ {I (cid:174)k} (cid:174)p[ji].fi {I ((cid:174)k + 1i) | ti k}
To improve precision, we let the invariant I depend on the
number of calls to the functor parameters through the integer
vector (cid:174)k. After calling (cid:174)p[ji].fi, we update (cid:174)k by adding one
to its i-th entry (1i is the vector where the i-th entry is one
and all other entries are zero).
The final cost Tabs (except for x.f ) is obtained by taking the sum,
over all functor parameters and number of calls to this functor
parameter, of the cost of each call.
4.3 Soundness
We define a formal denotational semantics of our language and
module system, and use it to prove the soundness of our rules.
For space reasons, we omit the details here (they can be found in
Appendix D and E), and only state the main soundness theorem.
Theorem 4.1. The proof rules in Figures 6, 22 and 23 are sound.
5 EXAMPLE: UNIVERSAL COMPOSABILITY
UC security guarantees that a protocol π1 can safely replace a
protocol π2 while preserving both the functionality and the secu-
rity of the overall system. The most common application of this
framework is to set π2 to be an idealized protocol that assumes a
trusted-third-party (TTP) to which parties delegate the computa-
tion; the specification of the TTP is called an ideal functionality F .
An ideal functionality F defines what protocol π1 should achieve
both in terms of correctness and security to securely replace the
TTP. Moreover, F can be used as an ideal sub-component when
designing higher-level protocols, which then can be instantiated
with protocol π1 to obtain a fully concrete real-world protocol.
The UC framework defines an execution model where proto-
col participants, attackers and contexts are modeled as Interactive
Turing Machines (ITM). The model was carefully tailored to give
a good balance between expressive power—e.g., one can capture
complex interactions in distributed protocols involving multiple
parties in a variety of communication models, various forms of
corruption, etc.—and a tailored (and relatively simple) resource
analysis mechanism that permits keeping track of the computing
resources available to both honest and malicious parties.
The model is described in detail in [16, 17]. However, most UC
proofs found in the literature refer only to a common understand-
ing of the semantics of the execution model and a set of high-level
restrictions that are inherent to the model. These include the al-
lowed interactions between different machines, the order in which
machines are activated, predefined sequences of events, etc. More
fine-grained descriptions of the execution model are sometimes in-
troduced locally in proofs, when they are needed to deal with more
subtle points or technicalities that can only be clarified at the cost of
extra details. This stands in contrast with typical game-based proofs
for simpler cryptographic primitives [9], where security proofs are
given in great detail. This is one of the reasons why, while there
has been impressive progress in machine-checking game-based
proofs [4], we are only now giving the first steps in formalizing
proofs in the UC setting [20, 23, 27]. Another reason is that the ITM