6
last few years [9, 14, 18, 23, 31]. However, most of these realizations perform limited
SMPC arithmetic operations over input elements belonging only to ﬁnite ﬁelds [23]
or integers [31], and they are thus not well-suited or suﬃcient for DDP mechanisms.
In contrast, we build on SMPCs for algorithms on ﬁxed point numbers [18] and a
recent work by Aliasgari et al. [9], who presented SMPC arithmetic algorithms over
real numbers represented in ﬂoating point form. They also went ahead to propose
SMPC protocols for complex tasks such as logarithm and exponentiation computations,
and conversion of numbers from ﬂoating point form to ﬁxed point or integer form and
vice-versa.
Our work starts by observing that their logarithm and exponentiation computations
SMPC protocols, combined with the SMPC schemes for the basic integer, ﬁxed point,
and ﬂoating point number operations, pave the way for a practical design of various
perturbation mechanisms for DDP in a completely distributed manner. Nevertheless,
to be suitable for our design, we have to enhance and implement this large array of
protocols to work against a malicious adversary.
Notations. We assume that secret sharing and the basic SMPC operations take place
over a ﬁeld Fq. Let [x] denotes that the value x ∈ Fq is secret-shared among P1, . . . , Pβ
such that any (cid:100)(β + 1)/2(cid:101) of those can compute x using the reconstruction Rec protocol.
In some steps of our protocols, we employ the sharing [x]β, which requires participation
from all β parties to reconstruct x. The former is called (β,(cid:100)(β + 1)/2(cid:101)) secret sharing,
while the latter is called (β, β) secret sharing. Note that [x] + [y], [x] + c, and c[x] can
be computed by each Pi locally using her shares of x and y, while the computation of
[x][y] is interactive for (β,(cid:100)(β + 1)/2(cid:101)) and impossible for (β, β) secret sharing.
Basic SMPC protocols. The following SMPC protocols [9, 18, 23, 31] are used for our
DDP mechanisms.
1. The protocol [r] ← RandInt(k) allows the parties to generate shares [r] of a random
k-bit value r (i.e., r ∈[0, 2k)) without interactive operations [23].
2. The protocols [a] ← IntAdd([a1], [a2]) and [a] ← IntScMul([a1], α) allow for the
addition of two shared integers and the multiplication of a shared integer with a
scalar respectively, returning a shared integer.
3. The protocols [b] ← FPAdd([b1], [b2]) and [b] ← FPScMul([b1], α) allow for the
addition of two shared ﬁxed point numbers and the multiplication of a shared
ﬁxed point number with a scalar respectively, returning a shared ﬁxed point
number.
4. The protocols FLMul, FLDiv, and FLAdd can be used to multiply, divide, or add
two shared ﬂoating point numbers respectively. The output is a shared ﬂoating
point number.
5. The conversion protocols FL2Int (ﬂoat-to-int), Int2FL (int-to-ﬂoat), FL2FP (ﬂoat-
to-ﬁxed-point), and FP2FL (ﬁxed-point-to-ﬂoat) allow us to convert numbers rep-
resented as integers, ﬂoating point, or ﬁxed point to another one of these repre-
sentations.
7
6. The exponentiation protocol FLExp2 takes a shared ﬂoating point number [r] as
input and returns the shared ﬂoating point number corresponding to [2r].
7. The logarithm computation FLLog2 takes a shared ﬂoating point number [r] and
either returns the shared ﬂoating point number corresponding to [log2 r] or an
error (for r ≤ 0).
8. The protocol FLRound takes a shared ﬂoating point value [r] as input and operates
on two modes (given as an additional argument). If mode = 0 then the protocol
outputs the ﬂoor [(cid:98)r(cid:99)], otherwise, if mode = 1 then the protocol outputs the ceil
[(cid:100)r(cid:101)]. The output is a shared ﬂoating point number.
9. The protocol FLLT allows us to compare two shared ﬂoating point numbers and
returns [1] if the ﬁrst operand is less than the second, [0] otherwise.
For the exact complexities of the above SMPC protocols, we refer to § A, Table 6.
Intuitively, additions and scalar multiplications for both integers and ﬁxed point values
are non-interactive and consequently very fast, while for ﬂoating point values, the algo-
rithms require communication complexity linear in the size of ﬂoating point signiﬁcant.
Floating point additions are more costly than even their multiplication counterparts.
As expected, the exponentiation and logarithm algorithms are also the most costly and
require communication quadratic in the size of signiﬁcants. Note that these complexi-
ties can be signiﬁcantly reduced using pre-computation and batched processing [9].The
relative eﬃciency of these SMPC schemes plays a fundamental role in our design.
3 The PrivaDA Architecture
In this section we present the PrivaDA architecture. We ﬁrst give a general overview
of the setup and then present three mechanisms for achieving DP.
The fundamental challenge we had to overcome in order to provide SMPCs for the
three noise mechanisms lies in providing SMPC support for drawing random numbers
according to various probability distributions. Standard arithmetic SMPC suites we
considered only oﬀer support for drawing uniformly random integers. As we will show
in § 4, a SMPC for drawing a uniformly random integer can be used to encode the
drawing of a uniformly random number between 0 and 1 (U(0,1]). We thus focussed our
eﬀorts on ﬁnding an encoding that reduces the problem of generating noise according
to the distributions employed in three popular sanitization mechanisms to the drawing
of a seed from U(0,1].
Setting. We consider a scenario with n users, β computation parties (typically β = 3,
but it can be greater), and an aggregator. Each user Pi has a private input Di from
some domain D. The aggregator would like to compute some aggregate statistics about
the users’ private inputs, represented by the function f : Dn → R. The range R of
f may be a set of numerical values, but not necessarily. The computation parties
are responsible for computing and perturbing the aggregate result, which is eventually
8
Figure 1: Protocol Flow
returned to the data aggregator. System assumptions.The users communicate with
the computation parties through secure and authenticated channels. Furthermore, the
computation parties are pair-wise connected by secure authenticated channels. The
users provide the computation parties with shares of their data and can then go oﬄine.
The computation parties instead engage in an interactive protocol. The communication
among them can be made asynchronous using a bulletin board, which can be securely
and eﬃciently implemented using standard techniques such as [10, 50].
Privacy goals. The aggregate result should be diﬀerentially private and neither the
aggregator, nor the computation parties, nor the users should learn any further infor-
mation about the individual users’ data.
Attacker model. The data aggregator as well as the users may be corrupted and collude.
The SMPC protocols we adopt for the realization of our approach are based on secret
sharing: such SMPCs are secure in the malicious setting (i.e., the computation parties
may try to deviate from the protocol) but, for certain arithmetic operations, they
assume the majority of the computation parties not to collude. We could in principle
adopt other kinds of SMPC protocols that do not require this assumption [14, 40, 54],
but they are currently less eﬃcient.
Protocol Overview. The protocol proceeds in three steps: (i) The users provide the
computation parties with shares of their inputs.2 (ii) The computation parties run the
SMPC protocol to compute the aggregate statistics and perturb the result. (iii) Each
computation party gives the aggregator its share of the result, which is reconstructed
by the aggregator.
The protocol ﬂow is depicted in Figure 1. In the following we describe three dif-
ferent algorithms to compute queries sanitized with the Laplace, discrete Laplace, and
exponential mechanism respectively. For easing the presentation, we consider a class of
queries for which f (D1, . . . , Dn) = f (D1) + . . . + f (Dn). Other arithmetic queries can
2Our work focusses on guaranteeing the privacy of the user data. To solve the orthogonal problem
of pollution attacks and to prevent malicious users from entering wildly incorrect input shares, we can
use ZK range proofs [16] (cf. § 4).
9
...P1PnC1CβAggregator...[D1]β[D1]1[Dn]1[Dn]β[≈f(D1,...Dn)]1[≈f(D1,...Dn)]β≈f(D1,...Dn)In: d1, . . . , dn; λ = ∆f

di) + Lap(λ)
Out: (
n(cid:80)
n(cid:80)
i=1
di
i=1
1: d =
2: rx ← U(0,1]; ry ← U(0,1]
3: rz = λ(ln rx − ln ry)
4: w = d + rz
5: return w
∆f
i=1
− 
Out: (
In: d1, . . . , dn; λ = e
di) + DLap(λ)
n(cid:80)
n(cid:80)
ln λ = − ∆f
= (cid:98)α(ln rx)(cid:99) −
1: d =
2: rx ← U(0,1]; ry ← U(0,1]
3: α = 1
4: rz
i=1
di

(cid:98)α(ln ry)(cid:99)
5: w = d + rz
6: return w
In: d1, . . . , dn;
a1, . . . , am;
λ = 
2
Out: winning ak
1: I0 = 0
2: for j = 1 to m do
n(cid:80)
3:
zj =
di(j)
i=1
δj = eλzj
Ij = δj + Ij−1
4:
5:
6: r ← U(0,1]; r(cid:48) = rIm
7: k = binary search(r(cid:48),≤
, I0, . . . , Im)
8: return ak
(a) LM
(b) DLM
(c) EM
Table 1: Algorithms: Sanitization Mechanisms
be implemented in a very similar manner using minor modiﬁcations of the presented
algorithms, since modern SMPC schemes provide direct support for a large class of
arithmetic operations. The algorithms described below do not rely on speciﬁc SMPCs:
we give one possible eﬃcient instantiation in § 6.
Laplace Mechanism. We now describe an algorithm for calculating the Laplace
mechanism (LM) for n inputs. We use the following mathematical results [5, 25] that
allow us to reduce the problem of drawing a random number according to the Laplace
distribution (Lap) to the problem of drawing a uniformly random number between 0
and 1 (U(0,1]) using the exponential distribution (Exp). It holds that Lap(λ) = Exp( 1
Exp( 1
λ ), where Exp(λ(cid:48)) =
λ )−
λ(cid:48)
− ln U(0,1]
Lap(λ) = λ(ln U(0,1]) − λ(ln U(0,1]).
. Thus,
(1)
In particular, we know that λ = ∆f
 guarantees DP. We thus deﬁne our algorithm
for the addition of Laplace noise on n inputs as shown in Table 1a. It takes as input
(i) the n real numbers d1, . . . , dn owned by P1, . . . , Pn respectively, which correspond
to locally executing the query f on each Pi’s database Di (di = f (Di)) and (ii) the
privacy budget parameter λ, set to ∆f
to guarantee -DP. The algorithm returns the

i=1 di) + Lap(λ) that is computed by summing up all di (line 1), drawing a
random number according to the distribution Lap(λ) (line 2 - 3) using (1), and adding
the sum of the results and the noise (line 4).
Privacy of LM.
Since the LM algorithm implements (cid:80)n
i=1 di + λ(ln U(0,1]) −
i=1 di + Lap(λ), by Theorem 1 it follows that LM(d1, . . . , dn, λ) is
real w = ((cid:80)n
λ(ln U(0,1]) = (cid:80)n
-diﬀerentially private for λ = ∆f
Discrete Laplace Mechanism. We now give an algorithm to compute the dis-
crete Laplace mechanism (DLM) on n inputs. The construction follows similar princi-
ples as the one for the Laplace mechanism that we presented in the previous section.
 , where di = f (Di).
10
Additionally, we rely on the following mathematical results [25, 39] to compute the
discrete Laplace distribution (DLap) by using the link between DLap, the geometric
distribution (Geo), and the exponential distribution (Exp), which can be reduced to
the uniform distribution on the interval (0, 1] (U(0,1]) as shown before. It holds that
DLap(λ) = Geo(1 − λ) − Geo(1 − λ), where Geo(λ(cid:48)) = (cid:98)Exp(− ln (1 − λ(cid:48)))(cid:99). Thus,
(cid:22) 1
ln λ
(cid:23)
(cid:22) 1
ln λ
(cid:23)
ln U(0,1]
−
ln U(0,1]
.
(2)
DLap(λ) =
− 
∆f , -DP is guaranteed. The algorithm to add discrete Laplace
In particular, for λ = e
noise to n inputs is shown in Table 1b. It takes as input (i) the n integer numbers
d1, . . . , dn owned by P1, . . . , Pn respectively, which correspond to locally executing the
query f on each Pi’s database Di (di = f (Di)) and (ii) the privacy budget parameter λ,
which will be set to e
∆f to guarantee -DP. The algorithm returns the integer w =
i=1 di) + DLap(λ), which is computed analogously to the Laplace mechanism, using
((cid:80)n
Privacy of DLM. The DLM algorithm implements (cid:80)n
(cid:4) 1
ln λ ln U(0,1]
i=1 di+ DLap(λ). By Theorem 1, DLM(d1, . . . , dn, λ) is -
i=1 di + (cid:4) 1
(cid:5) = (cid:80)n
ln λ ln U(0,1]
(cid:5) −
− 
(2).
diﬀerentially private for λ = e
∆f , where di = f (Di).
− 
Exponential Mechanism. Our algorithm to compute the exponential mechanism [44]
(EM) for n inputs, is inspired by [8], which is however an ad-hoc protocol that is
constrained to a 2-party setting. Here, the challenge lies in computing the exponential
mechanism in an n-party setting and make it work in the adversarial setting we consider.
Inputs and outputs. The algorithm to compute the EM on the join of n databases is
presented in Table 1c. It outputs the candidate a ∈ R (where |R| = m ∈ N), which
is the result of locally executing the desired query f on the databases D1, . . . , Dn that
are under the control of the participants P1, . . . , Pn respectively and sanitizing the joint
result using the exponential mechanism. The algorithm takes the following inputs: (i)
the data sets d1, . . . , dn belonging to the participants P1, . . . , Pn respectively, (ii) the
list of candidates a1, . . . , am, and (iii) the privacy parameter λ, which will be set to 
in order to guarantee -DP. For the sake of simplicity, we assume each data set di ∈ D
2∆q
to be a histogram that is the result of locally executing f (Di). Each histogram is a
sequence of m natural numbers z1, . . . , zm that correspond to the frequency of candi-