title:Hardware Fault Injection with UMLinux
author:Kerstin Buchacker and
Mario Dal Cin and
Hans-J&quot;org H&quot;oxer and
Volkmar Sieh and
Oliver Tsch&quot;ache and
Martin Waitz
Hardware Fault Injection with UMLinux
K. Buchacker, M. Dal Cin, H.-J. H¨oxer, V. Sieh, O. Tsch¨ache, M. Waitz
Institut f¨ur Informatik 3
Friedrich Alexander Universit¨at Erlangen-N¨urnberg
Germany
1. UMLinux Overview
3. Example Scenarios
The UMLinux [3] environment provides virtual
machines on top of which the Linux operating sys-
tem and off-the-shelf software is installed. Using UM-
Linux, you can set up systems consisting of several
networked virtual machines.
A userfriendly GUI guides you through the process
of conﬁguring the virtual hardware. Once the hard-
ware is set up, you can proceed to boot the Linux op-
erating system and install off-the-shelf software just as
you would on a real machine. Thus popular Linux dis-
tributions like RedHat or SuSE and software like the
Oracle database system run on top of the virtual ma-
chines out of the box. The GUI allows you to control
virtual machines interactively, just as though you were
sitting in front of them. You have access to (virtual)
keyboard, mouse, and monitor as well as the system’s
drives and on/off buttons. A UMLinux virtual machine
is fully network capable and you can connect it to other
virtual machines as well as to real machines. The GUI
will guide you through the process of setting up the
network connections. To analyse a system’s behaviour
in the presence of faults and to set up worst-case sce-
narios, you can use the GUI to inject faults in the hard-
ware of a virtual machine.
2. Experiment Automization
UMLinux also supports automization for bench-
marking experiments or large scale testing. This au-
tomization is script based and once set up, no further
user interaction is needed. We have chosen VHDL as
language for scripts, as VHDL is standardised, well
understood and the semantics of VHDL scripts are un-
ambiguous. Automization is supported in all phases
of benchmarking and testing, including conﬁguring
the virtual hardware, installing the necessary software,
execercising a workload, injecting faults and taking
measures. The UMLinux environment [3] is therefore
ideal to analyse the behaviour of Linux applications
and the Linux kernel itself in the presence of hardware
faults.
We are using the UMLinux system to develop de-
pendability benchmarks for the DBench Project [2].
We have set up a number of experiments using UM-
Linux. This ranges from very simple tests to com-
plex client-server conﬁgurations involving several ma-
chines. The automatic installation of the well-known
SuSE distribution onto a single machine using the
graphical installation wizard provided on the SuSE-
CD is a simple example which we used later in other
experiments to set up similar machines.
A more complex scenario is a load-balanced
webserver-array accessed by a number of clients. The
load-balancer distributes the client requests evenly
among the real servers and is able to remove a crashed
or unresponsive server from the array. The load-
balancer itself is duplicated, so that in case one system
fails, the backup can take over.
In our largest experiment so far we have modelled
an online transaction system consisting of an Ora-
cle database, an application server and several client
machines. To analyse the reliability of the Oracle
database we injected hard disk and network faults into
the virtual machine running the database while execut-
ing the TPC-C performance benchmark as workload.
The experiments were fully automated using the UM-
Linux experiment controller and VHDL scripts. One
of the results was, that in over 80 percent of the hard
disk faults, there was no visible effect on the opera-
tion of the database. In over 10 percent, the database
failed completely, in a few cases database errors were
logged.
In extremely few cases the database fault-
tolerance mechanisms detected and correctly recov-
ered from the error [1].
References
[1] K. Buchacker, M. Dal Cin, H. H¨oxer, R. Karch, V. Sieh,
and O. Tsch¨ache. Reproducible dependability bench-
marking experiments based on unambiguous bench-
mark setup descriptions.
In Proceedings of the Inter-
national Conference on Dependable Systems and Net-
works, 2003.
[2] DBench - Dependability Benchmarking (Project IST-
2000-25425). URL: http://www.laas.fr/DBench/, 2001.
[3] UMLinux Team. UMLinux. URL: http://umlinux.de/,
2002.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE