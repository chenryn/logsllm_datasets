.
text c
produced in step 3 or in any output from oracle e
(cid:2)
It is important to observe that we do not allow key-dependent
queries to the decryption oracle. In particular, note that if
we allowed such queries then one could query the decryp-
tion oracle with the function g(s) = Encs(s) and obtain s
(this is possible even if one restricts the functions in C to be
deterministic, as we could deﬁne the function g(s) to be the
encryption of s with the random coins set to a ﬁxed string,
say all zeros). Finally, note that Deﬁnition 3 can be adapted
to the “ideal cipher model” by providing A (and potentially
also the circuits in C) with oracle access to Π and Π
6.2 Insecurity of a textbook randomized scheme
−1.
Below we consider a very natural PRF-based symmetric
encryption scheme, which is essentially the scheme that was
proven secure in the random-oracle model by Black et al. We
show that not only this construction fails to be KDI secure
in the standard model, but this failure is manifested even
6The output size of the functions g considered here is as-
sumed to match the size of inputs to the encryption function
Enc.
for a natural instantiations of the PRF. Given a PRF fs(·)
we deﬁne
Encs(x) = (r, fs(r) ⊕ x)
(8)
where r is chosen at random with each encryption. This en-
cryption scheme is CPA-secure (up to the birthday bound on
|r|) if fs(·) is a secure PRF, and, intuitively, it appears that
it “should” also be KDI-secure. In particular, it was shown
in [4, Thm 5.1] that when fs is implemented as fs(x) =
H(s|x) and H is a random oracle, then the scheme in Eq. (8)
is KDI-secure with respect to all functions of the key s.
We demonstrate, however, that this construction is not
KDI-secure in general, and perhaps more surprising it even
fails for practical PRFs. Speciﬁcally, we show that when the
underlying PRF is implemented from a block cipher via the
Davies-Meyer construction, the resulting encryption scheme
is not KDI-secure, even with respect to the identity function
(and even if the block cipher itself is an ideal cipher!). Recall
the Davies-Meyer construction
fs(x) = Ex(s) ⊕ s
(9)
This construction was meant as a component of a collision-
resistant hash function, but for contemporary block ciphers
one can expect it to also be a good PRF. (For example,
the assumption that the Davies-Meyer compression function
keyed via its IV is a PRF was used in the analysis of HMAC.)
Moreover, it is easy to prove that when E is an ideal cipher,
then the Davies-Meyer construction is a KDI-secure PRF
with respect to any function g that does not depend on the
ideal cipher itself
Plugging the Davies-Meyer construction in Eq. (8) we ob-
tain the encryption scheme Encs(x) = (r, (Er(s) ⊕ s) ⊕ x).
An attacker that asks to encrypt the secret key will get
Encs(s) = (r, (Er(s) ⊕ s) ⊕ s) = (r, Er(s)), from which it
−1 with r as
can recover s (using the decryption routine E
a key). We note that this construction fails even if E is an
ideal cipher (and also when augmented with a MAC function
to provide CCA security).
Negative Example 4. The symmetric encryption scheme
Encs(x) = (r, x⊕fs(r)), with fs implemented via the Davies-
Meyer construction fs(x) = Ex(s)⊕ s, is KDI-insecure with
respect to the identity function, even when E is an ideal ci-
pher.
6.3 KDI-secure symmetric encryption
On the positive side, we show that an invertible KDI-
secure PRF can be used to obtain KDI-secure symmetric
encryption, using a slight variation of the insecure “textbook
construction” from above. (We call a PRF fs invertible if
given s and fs(x) one can eﬃciently recover x.) Speciﬁcally,
consider the encryption scheme
Encs(x) = (r, fs(r) ⊕ fs(x)), Decs(r, y) = f
−1
s
(y ⊕ fs(r))
(10)
secure with respect to C, and we show that the underly-
ing family fs cannot be KDI-secure PRF with respect to C.
Let AE be an attacker that demonstrates the KDI-insecurity
of the encryption scheme, and we use it to describe an at-
tacker Af that demonstrates the KDI-insecurity of the PRF
family.
(cid:2)
Af is provided with oracle access to φ, φ
, as described
in Deﬁnition 1. It activates the attacker AE (on the same
security parameter). When AE asks to encrypt an explicit
string x then Af chooses a random string r, queries s = φ(r)
and t = φ(x) and returns the ciphertext (r, s ⊕ t) to AE.
When AE asks to encrypt g(s) for some g ∈ C then Af
chooses again a random string r queries s = φ(r) and t =
(g) (= φ(g(s))), and returns the ciphertext (r, s⊕t) to AE.
(cid:2)
φ
When AE outputs q0, q1 then Af chooses a random bit b
and returns an encryption of qb using the same procedure
as above. Finally Af outputs whatever AE does.
It follows by deﬁnition that when φ = fs then the view
of AE is identical to its view when interacting with the real
encryption scheme. On the other hand, when φ is a ran-
dom function then the view of AE is nearly independent of
q0, q1 (except for the case where the random string r that
Af chooses for the encryption of qb collides with an earlier
input to φ or φ
, which happens with negligible probability if
|r| is large enough). Hence the advantage of Af is negligibly
close to half the advantage of AE.
(cid:2)
Lemma 4 tells us that we can get KDI-secure encryption
from invertible KDI-secure PRFs, so it is natural to ask if the
KDI-secure PRF schemes studied in this paper can be made
invertible. Clearly, the trivial construction fs(x) = ES(x)
from Section 3.1 is invertible, and it is KDI-secure in the
ideal cipher model (but not in the standard model). On the
other hand, the construction from Eq. (1) in Section 4.2, i.e.,
Fs(x) = fext(cid:2)
(s)(Hext(s)(x)), seems inherently non-invertible;
in fact the security proof for it relies in an essential manner
on H(x) having many fewer bits than x itself. Fortunately,
the g-dependent construction (4) from Section 4.3 is invert-
ible if the underlying PRF f is invertible (e.g., when f is a
block cipher) and it is KDI secure wrt {g} in the standard
model. Therefore, if we instantiate the encryption scheme
deﬁned in Eq. (10) with the scheme F (g,r) of Eq. (4) (and
assuming the function f underlying F (g,r) is invertible) we
obtain an encryption scheme Enc(g) that is, according to
Lemma 4, CPA-KDI-secure. Note that the random salt r
used in F (g,r) (which is in addition to, and independent
from, the randomness r in Eq. (10)) can be chosen by the
encryptor with each encryption or can be chosen at random
and be ﬁxed as a parameter of Enc(g). From this discussion
and Lemma 2 we obtain the following result.
Theorem 4. If secure PRF families exist then for every
eﬃciently computable function g there is a symmetric en-
cryption scheme that depends on g and is CPA-KDI-secure
with respect to the singleton class {g}.
Lemma 4. If the family fs has input size ω(log n) (with n
the security parameter), and if it is a KDI-secure (invertible)
PRF with respect to a class C, then the encryption scheme
from Eq. (10) is CPA-KDI secure with respect to the same
class C.
Proof. Fix a class C and assume toward contradiction
that the encryption scheme from Eq. (10) is not CPA-KDI
7. REFERENCES
[1] P. Ad˜ao, G. Bana, J. Herzog, and A. Scedrov.
Soundness of Formal Encryption in the Presence of
Key-Cycles. In 10th European Symposium on Research
in Computer Security - ESORICS 2005, volume 3679
of Lecture Notes in Computer Science, pages 374–396.
Springer, 2005.
[2] M. Bellare and T. Kohno. A theoretical treatment of
related-key attacks: RKA-PRPs, RKA-PRFs, and
applications. In Advances in Cryptology –
EUROCRYPT ’03, volume 2656 of LNCS, pages
491–506. Springer, 2003.
[3] M. Bellare, T. Krovetz, and P. Rogaway. Luby-rackoﬀ
backwards: Increasing security by making block
ciphers non-invertible. In Advances in Cryptology -
EUROCRYPT’87, volume 1403 of Lecture Notes in
Computer Science, pages 266–280. Springer, 1998.
[4] J. Black, P. Rogaway, and T. Shrimpton.
Encryption-scheme security in the presence of
key-dependent messages. In Selected Areas in
Cryptography, volume 2595 of Lecture Notes in
Computer Science, pages 62–75. Springer, 2002.
[5] J. Camenisch and A. Lysyanskaya, An Eﬃcient
System for Non-transferable Anonymous Credentials
with Optional Anonymity Revocation. In Advances in
Cryptology - EUROCRYPT’01, volume 2045 of
Lecture Notes in Computer Science, pages 93–118
Springer, 2001.
[6] Y. Dodis, A. Sahai, and A. Smith. On Perfect and
Adaptive Security in Exposure-Resilient
Cryptography. In Advances in Cryptology -
EUROCRYPT’01, volume 2045 of Lecture Notes in
Computer Science, pages 301–324. Springer, 2001.
[7] O. Goldreich, S. Goldwasser, and S. Micali. How to
construct random functions. Journal of the ACM,
33(4):210–217, 1986.
[8] S. Goldwasser and S. Micali. Probabilistic encryption.
Journal of Computer and System Sciences,
28(2):270–299, April 1984.
[9] S. Halevi and H. Krawczyk. Security Under
Key-Dependent Inputs. ACM-CCS 2007, long version
at http://eprint.iacr.org/2007/315
[10] C. Hall, D. Wagner, J. Kelsey, and B. Schneier.
’02, volume 2442 of Lecture Notes in Computer
Science, pages 31–46. Springer, 2002.
[17] M. Luby and C. Rackoﬀ. How to construct
pseudorandom permutations from pseudorandom
functions. SIAM Journal of Computing, 17(2), 1988.
[18] S. Lucks. The sum of PRPs is a secure PRF. In
Advances in Cryptology - EUROCRYPT’00, volume
1807, pages 470–484. Springer, 2000.
[19] N. Nisan and D. Zuckerman. Randomness is linear in
space. J. Comput. Syst. Sci., 52(1):43–52, 1996.
[20] P. Rogaway. Eﬃcient instantiations of tweakable
blockciphers and reﬁnements to modes OCB and
PMAC. In Advances in Cryptology - ASIACRYPT’04,
volume 3329 of Lecture Notes in Computer Science,
pages 16–31. Springer, 2004.
[21] L. Trevisan and S. P. Vadhan. Extracting Randomness
from Sampleable Distributions. In 41st Symposium on
Foundations of Computer Science - FOCS’00, pages
32–42. IEEE Computer Society, 2000.
APPENDIX
A. RANDOMNESS EXTRACTORS
Min-entropy and statistical distance.
We use the terms probability distributions and random
variables pretty much interchangeably. For a discrete ran-
dom variable X, the min-entropy of X is related to the
most probable value that X can assume, speciﬁcally min-
entropy(X) = − log2 (maxx Pr[X = x]). In other words, if
min-entropy(X) = (cid:2) then X does not assume any value with
−(cid:2). In this case we also say that
probability of more than 2
“X has (cid:2) bits of min-entropy.” The statistical distance be-
tween two random variables X, Y is deﬁned as
dist(X, Y ) def=
|Pr[X = x] − Pr[Y = x]|
X
x
Building PRFs from PRPs. In Advances in Cryptology
– CRYPTO’98, volume 1462 of Lecture Notes in
Computer Science, pages 370–389. Springer, 1998.
where the summation is taken over the union of the supports
of both X and Y . If dist(X, Y ) =  then we say that X is
-close to Y .
[11] J. H˚astad, R. Impagliazzo, L. A. Levin, and M. Luby.
A pseudorandom generator from any one-way
function. SIAM J. Comput., 28(4):1364–1396, 1999.
[12] IEEE P1619.* email archive.
http://grouper.ieee.org/groups/1619/email/.
[13] IEEE P1619. Standard for cryptographic protection of
data on block-oriented storage devices. Draft
standard, available temporarily from
http://ieee-p1619.wetpaint.com/page/IEEE+Project
+1619+Home, 2007.
[14] J. Katz and M. Yung. Characterization of security
notions for probabilistic private-key encryption.
Journal of Cryptology, 19(1):67–95, January 2006.
Earlier version in STOC’00, pages 245-254.
[15] P. Laud and R. Corin. Sound Computational
Interpretation of Formal Encryption with Composed
Keys. In 6th International Conference on Information
Security and Cryptology - ICISC 2003, volume 2971 of
Lecture Notes in Computer Science, pages 55–66.
Springer, 2003.
[16] M. Liskov, R. L. Rivest, and D. Wagner. Tweakable
block ciphers. In Advances in Cryptology – CRYPTO
Randomness extractors.
A (strong) randomness extractor [19] is a function extr(x)
that takes a random seed r and a “somewhat random” in-
put x, and produces an output y (shorter than x) which
should be almost uniform, even given r. Speciﬁcally, a func-
tion ext : {0, 1}t×{0, 1}n → {0, 1}m is a strong (k, ) extrac-
tor if for any distribution D over {0, 1}n with more than k
bits of min-entropy, the statistical distance between the two
distributionsn
(cid:9)r, y(cid:10) : r
n
(cid:9)r, y(cid:10) : r
$← D, y ← extr(x)
$← {0, 1}m
$← {0, 1}t, x
$← {0, 1}t, y
and
o
o
−(k−m)/2.
is at most . For any k > m, there are known constructions
(e.g., using the leftover hash lemma [11]) that are strong
(k, ) extractors with  = 2
We will also need a slightly stronger notion of a (k, , δ)
extractor, where with probability 1 − δ over the seed r, the
distribution extr(D) is -close to uniform. An extension of
the leftover hash lemma [21, 6] says that we can get (k, , δ)
−(cid:2) and  = 2
−(k−m−O(log (cid:2)))/2 using
extractors with δ = 2
O((cid:2))-wise independent hash functions.