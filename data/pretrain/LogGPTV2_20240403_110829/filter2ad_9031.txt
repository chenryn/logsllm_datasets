本文主要介绍基于npm包管理器的组件成分解析原理。
# npm介绍
npm(全称Node Package Manager)是Node.js标准的软件包管理器。
npm的依赖管理文件是package.json，开发者可以在package.json中指定每个依赖项的版本范围。
如果一个项目中存在package.json文件，便可以执行npm install命令自动安装和维护当前项目所需的所有模块并生成package-lock.json文件。
package.json完整文件结构如下：
    {
      "name": "screeps",
      "version": "1.0.0",
      "description": "",
      "main": "index.js",
      "scripts": {
        "push": "rollup -cw --environment DEST:main",
        "build": "rollup -cw --environment DEST:local",
      },
      "keywords": [],
      "author": "",
      "license": "ISC",
      "devDependencies": {
        "@rollup/plugin-commonjs": "^21.0.1",
        "@rollup/plugin-node-resolve": "^13.1.1",
        "@types/lodash": "^3.10.1",
        "@types/screeps": "^3.2.4",
        "rollup": "^2.61.1",
        "rollup-plugin-clear": "^2.0.7",
        "rollup-plugin-copy": "^3.4.0",
        "rollup-plugin-screeps": "^1.0.1",
        "rollup-plugin-typescript2": "^0.31.1",
        "typescript": "^4.5.4"
      },
      "dependencies": {
        "source-map": "^0.6.1"
      }
    }
其中name为项目名，version为项目版本，license为项目声明的许可证，devDependencies为开发环境使用的依赖，dependencies为生产环境使用的依赖。
依赖写法为"name":"version"，版本可以指定准确版本或一个范围，范围需遵循semver语义化版本规范（详见：
# 解析算法
## package-lock.json
package-lock.json是在npm install时自动生成的文件，用以记录当前状态下实际安装的各个npm
package的具体来源和版本号，通过该文件可以准确定位到npm项目的依赖及版本。所以优先解析package-lock.json文件。
package-lock.json文件结构如下：
    {
      "name": "foo",
      "version": "1.0.0",
      "dependencies": {
        "b": {
          "version": "1.2.1"
        },
        "a": {
          "version": "2.1.5",
          "requires": {
            "b": "^1.1.9"
          }
        },
        "c": {
          "version": "1.3.1",
          "requires": {
            "b": "^1.2.0"
          }
        }
      }
    }
其中name字段为项目名称，version字段为项目版本。dependencies字段中包含项目使用的所有直接和间接依赖，而且记录了组件间的依赖关系。
例如：
    "b": {
      "version": "1.2.1"
    },
代表组件b的版本号为1.2.1。
    "a": {
      "version": "2.1.5",
      "requires": {
        "b": "^1.1.9"
      }
    },
代表项目依赖2.1.5版本的组件a，该组件依赖版本约束为^1.1.9的组件b。
同理可知项目依赖1.3.1版本的组件c，该组件依赖版本约束为^1.2.0的组件b。
从 ****可看出组件a和组件c都没有被其他组件所依赖，所以可知这两个组件是项目的直接依赖。
仅通过package-lock.json无法确定组件b是否是直接依赖，可以结合package.json文件进一步确定，没有package.json时，将b当作间接依赖处理。若一个组件同时为直接和间接依赖，按直接依赖处理。
注：
  * ^1.1.9代表版本号需要>=1.1.9且=1.2.0且=2.0.0且
Gitee：  
OpenSCA官网：  