# Frawler
首先感谢RWCTF的精彩题目，这道题目可以说是很有意思，虽然环境上会比较蛋疼。也感谢@David492j的帮助，从他那学习到了新的思路，以及逆向神@pizza带我5分钟理解程序在干啥。
不过可惜的是最后还是没有搞出来，甚至在我第一次赛后分析的时候也分析错了，给了david一个错误的说法。第二次分析才明白，我去原来就差一个字节。。非常可惜。
这算是个writeup，也是个我自己的分析过程吧，我觉得这个分析过程还是很有意思的，所以写的比较详细，一方面是我自己的记录，另一方面也方便新人去看看学习一下分析思路吧。
## Eur3kA & r3kapig 战队纳新
哦对了，不能忘了重要的事情，Eur3kA & r3kapig战队招人啦!  
在这个险恶的CTF环境中，你还不知道web手怎么存活吗？不知道密码学选手该怎么办吗？当然是加入Eur3kA！是的你没看错，我们竟然非常缺web手！
当然也欢迎其他方向的选手加入我们啦，如果你实力强劲，打算来带我们飞，也可以不选择加入Eu3kA而是直接参与r3kapig专打国际赛！
详情请联系PI:EMAIL，微信ding641880047（添加好友请注明）。
## 题目基本分析及背景
首先简单分析一下题目。
    Well, it turns out that the time machine we used to pwn suanjike is not a realworld thing :( Let's try something from the future without time traveling.
    The flag is located at /pkg/data/flag in frawler's namespace.
    nc 100.100.0.103 31337
    No undisclosed bug in public codes required. (Technically they should not be called "0-day" as the entire stack is in experimental state anyway.)
题目的提示里只说了flag文件在`/pkg/data/flag`里，看来还要进行一定分析。
题目文件比较大，下下来之后发现有一个qemu和一系列包，其实我之前有玩过fuchsia系统，所以看到这还是能基本确定这题和fuchsia相关的，毕竟有一个`run-zircon`文件。
题目文件：
    pkg
    ├── exe
    │   ├── frawler
    │   └── frawler-host
    ├── img
    │   ├── fuchsia.zbi
    │   ├── fvm.blk
    │   └── multiboot.bin
    ├── qemu
    │   ├── bin
    │   │   ├── ivshmem-client
    │   │   ├── ivshmem-server
    │   │   ├── qemu-img
    │   │   ├── qemu-io
    │   │   ├── qemu-nbd
    │   │   ├── qemu-system-aarch64
    │   │   └── qemu-system-x86_64
    │   ├── libexec
    │   │   └── qemu-bridge-helper
    │   └── share
    │       └── qemu
    │           ├── acpi-dsdt.aml
    │           ├── bamboo.dtb
    │           ├── bios-256k.bin
    │           ├── bios.bin
    │           ├── efi-e1000e.rom
    │           ├── efi-e1000.rom
    │           ├── efi-eepro100.rom
    │           ├── efi-ne2k_pci.rom
    │           ├── efi-pcnet.rom
    │           ├── efi-rtl8139.rom
    │           ├── efi-virtio.rom
    │           ├── efi-vmxnet3.rom
    │           ├── keymaps
    │           │   ├── ar
    │           │   ├── bepo
    │           │   ├── common
    │           │   ├── cz
    │           │   ├── da
    │           │   ├── de
    │           │   ├── de-ch
    │           │   ├── en-gb
    │           │   ├── en-us
    │           │   ├── es
    │           │   ├── et
    │           │   ├── fi
    │           │   ├── fo
    │           │   ├── fr
    │           │   ├── fr-be
    │           │   ├── fr-ca
    │           │   ├── fr-ch
    │           │   ├── hr
    │           │   ├── hu
    │           │   ├── is
    │           │   ├── it
    │           │   ├── ja
    │           │   ├── lt
    │           │   ├── lv
    │           │   ├── mk
    │           │   ├── modifiers
    │           │   ├── nl
    │           │   ├── nl-be
    │           │   ├── no
    │           │   ├── pl
    │           │   ├── pt
    │           │   ├── pt-br
    │           │   ├── ru
    │           │   ├── sl
    │           │   ├── sv
    │           │   ├── th
    │           │   └── tr
    │           ├── kvmvapic.bin
    │           ├── linuxboot.bin
    │           ├── linuxboot_dma.bin
    │           ├── multiboot.bin
    │           ├── openbios-ppc
    │           ├── openbios-sparc32
    │           ├── openbios-sparc64
    │           ├── palcode-clipper
    │           ├── petalogix-ml605.dtb
    │           ├── petalogix-s3adsp1800.dtb
    │           ├── ppc_rom.bin
    │           ├── pxe-e1000.rom
    │           ├── pxe-eepro100.rom
    │           ├── pxe-ne2k_pci.rom
    │           ├── pxe-pcnet.rom
    │           ├── pxe-rtl8139.rom
    │           ├── pxe-virtio.rom
    │           ├── QEMU,cgthree.bin
    │           ├── qemu-icon.bmp
    │           ├── qemu_logo_no_text.svg
    │           ├── QEMU,tcx.bin
    │           ├── qemu_vga.ndrv
    │           ├── s390-ccw.img
    │           ├── s390-netboot.img
    │           ├── sgabios.bin
    │           ├── skiboot.lid
    │           ├── slof.bin
    │           ├── spapr-rtas.bin
    │           ├── trace-events-all
    │           ├── u-boot.e500
    │           ├── vgabios.bin
    │           ├── vgabios-cirrus.bin
    │           ├── vgabios-qxl.bin
    │           ├── vgabios-stdvga.bin
    │           ├── vgabios-virtio.bin
    │           └── vgabios-vmware.bin
    ├── README.md
    ├── run.sh
    ├── run-zircon
    └── start-dhcp-server.sh
题目文件看起来比较多，一个重点的提示是`run-zircon`，`zircon`是fuchsia的内核，所以看来这道题的环境是fuchsia系统了。
另外一个比较显然的是，`exe`里肯定是题目文件了。
在进行下一步分析之前，我们现在需要了解一下fuchsia系统。
### Fuchsia系统
[Fuchsia操作系统](https://en.wikipedia.org/wiki/Google_Fuchsia)是google正在开发中的一个系统，其实相关消息并不是很多，不过其已经开源，且文档有大量的描述，一些基本知识还是很容易学到的。
从操作系统分类来看，fuchsia采用了微内核的架构（想起了windows？），且并没有完全采取posix标准，所以在很多方面与我们熟知的linux有一些显著差距，接下来我们来看看我们在pwn的过程当中需要了解的一些基本内容。
#### 系统设计
fuchsia的总体设计其实和windows比较接近，相对linux来说，内核空间的数据被封装成对象，在用户空间以handle的形式体现，而调用系统调用完成操作的过程就是通过传递handle去实现的，handle又具有一定程度的权限检查。
但是其实到这里对我们的利用都没有造成很大的影响，毕竟我们只是在用户空间去pwn，我们只需要能调用库函数或者调用系统调用就可以了。而对我们的pwn能产生影响的最主要的部分其实是系统调用的机制。
在linux里我们如果想要完成系统调用，如果能够执行任意代码，那只需要根据系统调用表去设置好相应寄存器和栈参数即可，但是在zircon内核(fuchsia的内核)中，系统调用是通过
**vDSO** 来完成的。
熟悉linux用户空间pwn的同学应该对`vDSO`并不陌生，但是这里与linux的一个最关键区别在于，在linux中`vDSO`是为了加速系统调用存在的，而在zircon中，这是
**唯一一种进行系统调用** 的方法，如果直接使用`syscall`汇编指令，内核会对来源进行check，这样的访问是会被拒绝的。
所以在利用当中我们需要注意的一个关键问题就是如何进行系统调用的问题，当然，如果具有库函数地址等就最好了。
#### 系统环境处理
其实这一点我应该没有什么资格来说。。因为其实我并没有把环境真正搭起来。。
这个地方其实比较值得吐槽，当然由于这个系统也在非常早期的阶段，这些也还可以接受吧。
环境上主要是需要调试和文件拷贝（因为需要把libc等拷贝出来），而fuchsia系统采用了多层次的概念，内核层位于[zircon](https://github.com/fuchsia-mirror/zircon)，拷贝工具在zircon中，还好，zircon层并不算太大，不过为了编译这个也是花了不少精力，最终采用了在VPS上编译之后下下来的方法。。（感谢@sakura鼎力相助）
另外调试这一部分就更为麻烦了，因为调试器其实位于[garnet](https://github.com/fuchsia-mirror/garnet)层，我个人认为garnet层算是比较大的，在调试器文档中其实说是有SDK的，但是似乎并没有已经编译好的SDK的可以下载，所以只能自己编译，所以最终我采用了。。。不使用调试器的方法。
这里其实好像还有一个方法可以处理调试，由于后来并没有太需求调试功能，所以我没有去尝试。那就是通过在启动的时候(`run.sh`中)的`run-zircon`命令最后加上`--debugger`选项，这样可以用gdb去连接1234端口（其实这里和调试linux内核一样，本质上也是调试zircon内核）。之后通过ps查看到进程号之后可以通过vmaps去查看mapping，之后下断点到启动新进程的地方去使用gdb调试。如果有尝试这种方法进行调试的可以告诉我一下是否存在其他问题。。
### 继续分析
好了我们现在已经了解了一些fuchsia系统的基础了，对于更深入的了解，可以查看[fuchsia文档](https://fuchsia.googlesource.com/docs/+/HEAD/README.md)（google服务器），之后我就不再详细描述fuchsia系统相关基础知识了。
在了解了这些之后我们就可以开始逆一下程序看看功能了，首先是`frawler-host`。
这个程序其实不怎么需要详细的去逆向，因为根据README:
    1. `tunctl -u $USER -t qemu`
    2. Run `run.sh`.
    3. Wait about 1 minute.
    4. Service is running on 192.168.1.53:31337
这里启动之后是有一个service的，之后对照一下可以发现：
很明显的启动tcp服务器的操作，所以我并没有对这个程序进行仔细的逆向（pizza: 要是我，看一眼就猜出来了，不用逆），
所以重点去关注`frawler`程序。
大致一看，有`robots.txt`，联系一下题目名字`frawler`，猜测是`fuchsia
crawler`的意思，那么应该就是一个爬虫一样的逻辑了。（这里比较尴尬，我不小心把pizza给我的idb给删了，所以看起来比较难看）
总的来说，逻辑基本上是首先连通之后，会发一个http请求，请求robots.txt，然后会解析robots.txt，去爬取`Disallow`的内容（专爬`Disallow`？？）
这里一个比较有意思的地方：
一个`text/x-lua`引起了注意。。这里其实最终是pizza逆的，不过基本看看可以猜一下：
虽然猜起来可能比较难受，但是看到`luajit`我们应该大致明白了，这里肯定是执行了lua代码（不然传入luajit干嘛？），然后其他的部分是可以对比相应版本的luajit代码去逆向的，最终可以知道他执行了途中那个看起来像hash值一样的lua函数，所以在response的时候给出这个lua函数就可以执行lua函数了。
这里分享一下pizza的脚本，巧妙的用了pwntools的功能来把request和response进行了转发，这样就可以写一个真正的server来完成任务了:
request.py:
    from pwn import *
    context.log_level = "debug"
    frawler = remote("192.168.3.53", 31337)
    srv = remote("localhost", 31337)
    frawler.connect_both(srv)
    frawler.wait_for_close()
    srv.wait_for_close()
    frawler.close()
    srv.close()
forward.py:
    #!/usr/bin/python
    # -*- coding: UTF-8 -*-    
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
    class TestHTTPHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.protocal_version = 'HTTP/1.1'
            self.send_response(200)
            print(self.path)
            if(self.path == "/robots.txt"):
                content = ""
                content += "Disallow: /a.txt\r\n"
                content += "Disallow: /b.txt\r\n"
                #content += "Disallow: /c.txt\r\n"