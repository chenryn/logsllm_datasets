65.6
Canada
25
3852
6.5
South America
Brazil
134
3286
40.8
格式化程序form2是一个“control-break”程序，变量prev跟踪大洲的名字，只有当大洲名字变
化时才会打印出来，在下一节，我们将会看到更复杂的“control-break”程序。
更复杂的报表
典型的商业报表比我们现在看到的具有更多的内容（至少在形式上），为了详细说明，假设我们需要
为每一个大洲作一个汇总，以及计算每一个国家占总人口与总面积的比重，我们需要新增一个标题，以及
更多的列表头：
86
Report No. 3
POPULATION, AREA, POPULATION DENSITY
January 1, 1988
CONTINENT
COUNTRY
POPULATION
AREA
POP. DEN.
---
## Page 95
第四章
报表与数据库
87
Millions
Pct. of
Thousands
Pct. of
People per
of People
Total
of Sq. Mi.
Tota1
Sq. Mi.
Asia
Japan
120
4 .3
144
0.6
India
746
26 .5
1267
4 .9
588.8
China
1032
36 .6
3705
14 . 4
278 .5
USSR
275
9.8
8649
33.7
31.8
TOTAL for Asia
77 .1
13765
53 . 6
Europe
Germany
61
2.2
96
0.4
635 . 4
England
56
2.0
94
0 . 4
595 .7
France
55
2.0
211
0.8
260 .7
*=
=
TOTAL for Europe
172
6 .1
401
1.6
North Anerica
Nexieo
78
2 .8
762
3.0
102.4
USA
237
8.4
3615
14.1
65 .6
Canada
25
0 . 9
3852
15 . 0
6 .5
=
TOTAL for North America
340
12 . 1
8229
32 . 0
====
South America
Brazil
134
4 .8
3286
12 . 8
40 . 8
TOrAL for South America
134
4 .8
3286
12 . 8
====
GRAND TOTAL
2819
100.0
25681
100.0
=====
我们仍然可以使用准备-排序-格式化三步骤策略来生成这张报表，prep3从文件countries中
准备并排序必要的信息：
#prep3
- prepare countries data for form3
BEGIN
pass == 1 {
area[$4] += $2
areatot += $2
pop[$4] += $3
$ =+ 40dod
pass == 2 {
den = 1000*S3/$2
printf(*&s: &s: &s: &f:$d:$f:$f:$d: $d\n",
$4，$1,$3,100*$3/poptot,$2, 100*$2/areatot,
---
## Page 96
第四章报表与数据库
88
den, pop[$4], area[$4]) |"sort -t: +0 -1 +6rn"
）
这个程序需要遍历输入数据两次，第一次遍历累加每个大洲的面积与人口数，并分别保存到数组area
与pop中，同时计算总面积与总人口数，分别保存在变量areatot与poptot中，第二次遍历对每个
国家的统计结果进行格式化，并输送给sort.两次遍历通过变量pass控制，其值可以通过命令行设置：94
awk -f prep3 pass=1 countries pass=2 countries
prep3产生的输出，其每一行都由9个字段组成，字段之间用冒号分隔，这些字段包括：
大洲
国家
国家人口
人口所占的比重
国土面积
面积所占的比重
人口密度
该国所在的大洲的总人口
该国所在的大洲的面积
注意Bort的命令行参数，该命令行参数使得排序后的记录先按照第1个字段的字母顺序排列，再按第
7个字段的数值形式的逆序排列.
键入下面的命令行，就可以生成前面郡张精美的报表ReportNo，3:
awk -f prep3 pass=1 countries pass=2 countries | awk -f form3
其中，程序form3的源代码是
#form3 - format countries report number 3
BEGIN(
8861xenue=ep=S
hfmt = "&36s $8s &12s $7s 812s\n"
tfmt = "&33s $10s 10s 89s\n"
TOTfmt = " TOTAL for &-13s$7d$11.1f&11d$10.1f\n"
printf("&-18s &-40s &19s\n\n", "Report No. 3",
"POPULATION, AREA, POPULATION DENSITY", date)
printf(" &-14s &-14s &-23s &-14s &-11s\n\n",
"CONTINENT"，"COUNTRY"，"POPULATION"，"AREA"，"POP.DEN.")
"Pct. of","People per")
"Total"，"Sq.Mi.“)
---------.---------uu）uxd
---
## Page 97
第四章报表与数据库
68
if (S1 1= prev)(# new continent
if (NR > 1)
totalprint()
prev = $1
#first entry for continent
poptot=$8;
poppct = $4
areatot = $9; areapct = $6
}else{
#next entry for continent
$1 = "*
poppct += $4; areapct += $6
{
printf(" &-15s8-10s 86d 10.1f $10d 89.1f 810.1f\n",
$1,$2,$3,$4,$5, $6,$7)
$ =+ oddod6$ =+dodb
garea += $5; gareapct += $6
END{
totalprint ()
printf(" GRAND TOTAL 20d &10.1f &10d &9.1f\n",
(dex5eaxe'oddod6'dodb
function totalprint(){
#print totals for previous continent
--------）ux
printf(ToTfmt, prev, poptot, poppct, areatot, areapct)
（=====。=====。'====='===='u）uxd
95
除了格式化，form3累加并打印每个大洲的汇总信息，除此之外，它还会累加总人口，总人口比重，总面
积，总面积比重，这些信息在END中被打印出来。
form3在打印完每个大润的汇总信息之后，再打印合计信息，但是一般情况下，除非读取到一个新
的大洲，否则它不会知道是否已经处理完所有的条目，解决这种“我们已经走得太远了（We've gone too
far)”问题是control-break编程的经典例子.解决办法是在打印之前检查每一个输入行，判断是否需要
为前一个数据组生成合计信息，同样的检查也出现在了END中，所以计算工作最好用一个单独的函数来
完成.如果层次只有一层，那么control-break是一种非常简单且有效的方法，但是当层次加深时，事情
就会变得很糟
正如上面的程序所呈现得那样，复杂的格式化工作可以通过多个awk程序的组合来完成，但是为了
打印出适当的行，我们必须精心地计算字符并编写printf语句，这种工作其实非常乏味，尤其是其中的
---
## Page 98
第四章报表与数据库
06
某些部分需要进行修改时，
一种可选的方案是让某个程序去计算量的大小，然后再根据具体的需求对这些量的作用进行定位，
为打印程序写一个awk程序，该程序对简单的表格进行格式化一这是一种可行的做法，载们待会儿再
因来讨论.因为用的是Unix系统与排版程序，所以我们可以用一些已经存在的工具—tb1程序可以对
表格进行格式化.程序form4非常类似于form3，但是它没有用于控制列宽度的魔数，相反，它生成了
一些tb1命令与表格数据，不同列的数据之间用制表符分隔，剩下的工作由tb1完成.（如果读者对tb1
不太熟悉，大可不必理会这些细节）
96
#form4 - format countries data for tbl input
BEGIN{
886 xnu=ep =Sa0 =S
print ".rs\ncenter;"
print "1 c s S s r s\nl\nl 1 c s c s c\nl 1 c c c c c."
printf("&s\ts\t$s\n\n","Report No. 3",
"POPULATION, AREA, POPULATION DENSITY", date)
"AREA"，"POP.DEN."
print "","","Millions"，"Pct.of","Thousands",
"Pct. of"，"People per"
"Total", "Sq. Mi."
print "\t\t_\t_\t_\t_\t_"
print ".T&\nl 1 n n n n n."
if ($1 1= prev){# new continent
if (NR > 1)
totalprint()
prev = $1
poptot=$8;poppct= $4
areatot = $9; areapct = $6
}else{
 next entry for current continent
$1 = "*
poppct += $4; areapct += $6
}
printf("s\t&s\t$d\t.1f\td\t8.1f\t,1f\n",
$1,$2,$3,$4,$5,$6,$7)
v$ =+ 4oddod6 s =+ dodb
garea += $5; gareapct += $6
---
## Page 99
第四章报表与数据库
16
END{
totalprint ()
print ".T&\nl s n n n n n."
printf ("GRAND TOTAL\t\t&d\t.1f\td\t.1f\n",
#=
print ",TE"
function totalprint()(
 print totals for previous continent
print ",r&\nl s n n n n n."
print "",
""，
printf ("
rOTAL for s\t$d\t.1f\t&d\t.1f\n",
prev, poptot, poppct, areatot, areapct)
print "",
"=",
"="，