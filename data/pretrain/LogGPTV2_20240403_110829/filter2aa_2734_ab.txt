RISC-V:
U-mode
HS-mode
M-mode
User
Hypervisor
Extended 
Supervisor
Machine
Supported 
combinations:
•
M
•
M + U
•
M + S + U
•
M + (V)S + (V)U
VS-mode
VU-mode
Virtualized 
User
Virtualized 
Supervisor
“GOD” MODE
23
ADACORE / SPARK
24
ADACORE / SPARK
25
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
26
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
27
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
28
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
29
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
30
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
31
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
test.adb:28:25: medium: divide by zero might fail (e.g. when b = 42)
test.adb:30:31: medium: array index check might fail (e.g. when MyIndex = 
36)
test.adb:37:30: value not in range of type "MyType" defined at test.ads:6
test.adb:37:30: "Constraint_Error" would have been raised at run time
32
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
test.adb:28:25: medium: divide by zero might fail (e.g. when b = 42)
test.adb:30:31: medium: array index check might fail (e.g. when MyIndex = 
36)
test.adb:37:30: value not in range of type "MyType" defined at test.ads:6
test.adb:37:30: "Constraint_Error" would have been raised at run time
33
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
test.adb:28:25: medium: divide by zero might fail (e.g. when b = 42)
test.adb:30:31: medium: array index check might fail (e.g. when MyIndex = 
36)
test.adb:37:30: value not in range of type "MyType" defined at test.ads:6
test.adb:37:30: "Constraint_Error" would have been raised at run time
Lessons learned:
• You can compile buggy code – problems are 
detected by the tools and developers might not 
run them at all!
• Tools are orthogonal and detect different classes 
of problems – to be fully protected you must run 
all of them!
• What are the classes of problems which can or 
cannot be detected? – very limited public 
information :(
34
WHAT IS ADACORE/SPARK?
Programming language + set of analysis tools
The strength is in the analysis tools…
GNATProve, GNATStack, 
GNATTest, GNATEmulator
Statically provable
Proves that dynamic checks cannot fail
Absence of Run-Time Errors
Formal verification (Proofs)
Memory safe language (like RUST)
Very strong typing system (much stronger than RUST)
No arithmetic overflows, integer overflows, etc.
Traditionally used in industries such as:
Avionics, Railways, Defense, Auto, IoT
test.adb:28:25: medium: divide by zero might fail (e.g. when b = 42)
test.adb:30:31: medium: array index check might fail (e.g. when MyIndex = 
36)
test.adb:37:30: value not in range of type "MyType" defined at test.ads:6
test.adb:37:30: "Constraint_Error" would have been raised at run time
Lessons learned:
• You can compile buggy code – problems are 
detected by the tools and developers might not 
run them at all!
• Tools are orthogonal and detect different classes 
of problems – to be fully protected you must run 
all of them!
• What are the classes of problems which can or 
cannot be detected? – very limited public 
information :( - time for more research!
35
ADACORE/SPARK - EVALUATION
36
ADACORE/SPARK - EVALUATION
37
ADACORE/SPARK - EVALUATION
38
ADACORE/SPARK - EVALUATION
39
ADACORE/SPARK - EVALUATION
40
ADACORE/SPARK - EVALUATION
41
ADACORE/SPARK - EVALUATION
42
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
43
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
Most of the potential security issues might be:
In the design
Logical errors
44
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
Most of the potential security issues might be:
In the design
Logical errors
Bugs can be introduced by the compiler itself as well
45
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
Most of the potential security issues might be:
In the design
Logical errors
Bugs can be introduced by the compiler itself as well
We need to analyze 
the binary!
46
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
Most of the potential security issues might be:
In the design
Logical errors
Bugs can be introduced by the compiler itself as well
We need to analyze 
the binary!
During this research, neither IDA Pro nor Ghidra supported RISC-V  ; (
47
ADACORE/SPARK - EVALUATION
 Lesson learned:
You can compile buggy code – problems are detected by the tools and 
developers might not run them at all!
Tools are orthogonal and detect different classes of problems – to be fully 
protected you must run all of them!
Most of the potential security issues might be:
In the design
Logical errors
Bugs can be introduced by the compiler itself as well
We need to analyze 
the binary!
During this research, neither IDA Pro nor Ghidra supported RISC-V  ; (
48
BRINGING RISC-V TO GHIDRA
 Ghidra 9.0 didn’t support RISC-V…
Moreover, we were dealing with the custom RISC-V with the custom 
extensions…
49
BRINGING RISC-V TO GHIDRA
 Ghidra 9.0 didn’t support RISC-V…
Moreover, we were dealing with the custom RISC-V with the custom 
extensions…
 RISC-V is huge!
Implementing entire RISC-V base would take TONS of time…
… additionally, we needed custom RISC-V extension support
50
BRINGING RISC-V TO GHIDRA
 Ghidra 9.0 didn’t support RISC-V…
Moreover, we were dealing with the custom RISC-V with the custom 
extensions…
 RISC-V is huge!
Implementing entire RISC-V base would take TONS of time…
… additionally, we needed custom RISC-V extension support
 We found on the github a few RISC-V base plugins – different 
implementations:
We decided to “integrate” one of the plugin to Ghidra TOT
… Few months after our research Ghidra 9.2 brought RISC-V support using 
exactly the same plugin ;-)
51
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
52
BRINGING RISC-V TO GHIDRA