### RISC-V Privilege Modes

RISC-V defines several privilege modes, each with specific functionalities and use cases:

- **U-mode (User Mode)**: This is the standard mode for user-level applications.
- **HS-mode (Hypervisor Supervisor Mode)**: Used for managing virtualized environments.
- **M-mode (Machine Mode)**: The highest privilege level, used for system initialization and handling exceptions.
- **S-mode (Supervisor Mode)**: Used for operating system kernels.
- **VS-mode (Virtualized Supervisor Mode)**: A virtualized version of S-mode.
- **VU-mode (Virtualized User Mode)**: A virtualized version of U-mode.

#### Supported Combinations:
- **M**
- **M + U**
- **M + S + U**
- **M + (V)S + (V)U**

### ADACORE/SPARK Overview

**ADACORE/SPARK** is a programming language and a set of analysis tools designed for high-reliability and security-critical systems. The key features include:

- **Programming Language**: SPARK is a subset of Ada, enhanced with formal verification capabilities.
- **Analysis Tools**:
  - **GNATProve**: Performs formal verification to prove the absence of run-time errors.
  - **GNATStack**: Analyzes stack usage to prevent stack overflows.
  - **GNATTest**: Automates unit testing.
  - **GNATEmulator**: Emulates the target environment for testing.

#### Key Features:
- **Statically Provable**: Ensures that dynamic checks cannot fail.
- **Absence of Run-Time Errors**: Formal verification ensures no run-time errors.
- **Memory Safe Language**: Similar to Rust, it prevents memory-related vulnerabilities.
- **Strong Typing System**: Much stronger than Rust, preventing arithmetic and integer overflows.
- **Formal Verification**: Uses proofs to ensure the correctness of the code.

#### Traditional Use Cases:
- **Avionics**
- **Railways**
- **Defense**
- **Automotive**
- **IoT**

### Example Analysis Output
Here are some examples of issues detected by the SPARK tools:

- **test.adb:28:25**: Medium: Divide by zero might fail (e.g., when `b = 42`).
- **test.adb:30:31**: Medium: Array index check might fail (e.g., when `MyIndex = 36`).
- **test.adb:37:30**: Value not in range of type "MyType" defined at `test.ads:6`.
- **test.adb:37:30**: "Constraint_Error" would have been raised at run time.

### Lessons Learned

- **Buggy Code Compilation**: Developers can compile buggy code, but the tools will detect these issues, which may prevent them from running the code.
- **Orthogonal Tools**: Different tools detect different classes of problems. To be fully protected, all tools must be run.
- **Detection Limitations**: There is limited public information on the classes of problems that can or cannot be detected, indicating a need for more research.

### Potential Security Issues
Most potential security issues can arise from:
- **Design Flaws**
- **Logical Errors**
- **Compiler Bugs**: Bugs can be introduced by the compiler itself.

### Binary Analysis
Analyzing the binary is crucial, but during this research, neither IDA Pro nor Ghidra supported RISC-V.

### Bringing RISC-V to Ghidra

#### Challenges
- **Ghidra 9.0 Support**: Initially, Ghidra 9.0 did not support RISC-V.
- **Custom Extensions**: We were dealing with a custom RISC-V with custom extensions.
- **Complexity**: Implementing the entire RISC-V base would take a significant amount of time, and we needed custom extension support.

#### Solution
- **GitHub Plugins**: We found several RISC-V base plugins on GitHub and decided to integrate one into Ghidra.
- **Ghidra 9.2 Update**: A few months after our research, Ghidra 9.2 added RISC-V support using the same plugin.

#### Implementation
- **Starting Point**: We integrated the RISC-V plugin but needed to modify it.
- **SLEIGH Language**: Ghidra uses SLEIGH, a processor specification language, to describe the CPU. There is very little documentation available.
- **Resource**: Guillaume Valadon's presentation was a valuable resource: [Presentation Link](https://guedou.github.io/talks/2019_BeeRump/slides.pdf)
- **Files Needed**: We created and modified `cspec`, `ldefs`, `pspec`, `slaspec`, and `Module.manifest` files.
- **Trial and Error**: We used a "check & try" approach, along with patience, to achieve the desired results.

This structured and detailed overview should provide a clear and professional understanding of RISC-V privilege modes and the ADACORE/SPARK toolset.