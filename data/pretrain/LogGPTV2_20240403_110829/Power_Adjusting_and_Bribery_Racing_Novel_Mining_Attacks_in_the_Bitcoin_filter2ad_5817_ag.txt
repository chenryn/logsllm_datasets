attacks. A beacon value approach has been proposed based
on this idea [13]. However, adding a beacon field in a block’s
header breaks down the compatibility with existing mining
hardware and increases the workload of pool managers.
We introduce a new detecting approach based on the
timestamp field. Timestamp field is encapsulated in a block
header when calculating hash values, which can avoid an
attacker modifying this filed after an FPoW is found. Besides,
it will be updated in every few seconds, which ensures the
freshness of the share. Therefore, a network manager can
first synchronize the time of each pool miner and identify
stale FPoWs when the timestamp field deviates too much
from the current time. Notice that when an attacker uses a
forged timestamp field to calculate hash values, she can still
∫︁ 𝑥+𝑡+𝑘
be detected since it is hard to anticipate the time of other
miners propagating blocks.
Suppose the manager sets a threshold 𝑘 (𝑘 > 0), which
regards shares submitted with timestamp field in [𝑋 − 𝑘, 𝑋 +
𝑘] legal at current time 𝑋 when 𝑋 (cid:62) 𝑘 (otherwise, the legal
period is [0, 𝑋 + 𝑘]). Let the attacker sets the timestamp
field to 𝑋 + 𝑡 when calculating shares. She can avoid being
detected when other miners find a block at [𝑋 +𝑡−𝑘, 𝑋 +𝑡+𝑘].
The probability of infiltration mining discovers a legal FPoW
(only considering the infiltration mining and other miners)
is:
∫︁ +∞
−𝜆2(𝑡+𝑘)),
where 𝜆1 = 𝜏1𝛼 and 𝜆2 = 1 − 𝛼 − 𝛽, when 𝑡 (cid:62) 𝑘, and
𝜆1 = 𝜆2 = 0 when 𝑡 < 𝑘. Since 𝑃 is a decreasing function with
(1− 𝑒−2𝑘(1−𝛼−𝛽))
𝑡, the maximized probability 𝑃𝑚𝑎𝑥 is
at 𝑡 = 𝑘. Suppose 𝛼 = 0.1, 𝛽 = 0.3, 𝑐 = 0.5, and the manager
6 sec
sets 𝑘 to 0.01 (6 seconds,
10 min = 0.01). The attacker’s
probability of submitting a valid FPoW is 𝑃𝑚𝑎𝑥 = 0.047%.
The priori probability (probability after infiltration mining
𝜆1/(𝜆1+𝜆2) = 1 − 𝑒−2𝑘(1−𝛼−𝛽) = 1.19%,
finding an FPoW) is
and is upper-bounded at 1.98% under our mechanism (1 −
𝛼 − 𝛽 < 1).
−𝜆2𝑦 𝑑𝑥𝑑𝑦 =
𝜆2𝑒
−𝜆2(𝑡−𝑘)−𝑒
(𝑒
−𝜆1 𝑥
𝜆1𝑒
𝜆1
𝜆1+𝜆2
𝜆1
𝜆1 +𝜆2
𝑃 =
0
𝑥+𝑡−𝑘
𝑃𝑚𝑎𝑥
Approaches based on “detecting stale FPoW” can identify
the infiltration miner who submits the stale FPoW. However,
when attackers use Sybil nodes to launch PAW attacks dis-
tributively (distributing infiltration mining power to many
infiltration mining accounts), the attacker can still win an
additional reward even the submitter is expelled [13]. Besides,
even when attackers do not propagate withheld FPoWs to
avoid being detected, PAW can still get more rewards than
BWH or FAW attacks.
7.3 Bribery Racing Countermeasure
We propose three countermeasures against bribery racing.
First, the Bitcoin system may consider restricting the use of
“anyone can claim” transactions. However, this approach will
also sacrifice the flexibility and programmability of the Bit-
coin. Moreover, the oriented bribery (Appendix-H) attacks
or “whale transactions” [15] cannot be prevented by this
approach. A further step is to include the receiver’s confirma-
tion (e.g. receiver’s signature) when creating a transaction.
Though this approach can avoid oriented bribery attacks
targeting at random pools, it also incurs much communica-
tion overhead. For attackers, they can still make out-of-band
negotiations with targets to get the confirmation. Besides,
both approaches need modifications of the current Bitcoin
system, which may be impractical. We hope these approaches
can provide some insights into mitigating bribery attacks
when designing new cryptocurrencies.
Second, when a fork occurs, miners should preferentially
choose the branch containing the transactions which they
previously received, and ignore other branches conflicted
with these transactions. For instance, when a miner receives
𝑇 𝐴
𝐴′ and 𝑇 𝐴
𝐴′ , and a fork with two branches (containing 𝑇 𝐴
𝐵
respectively) occurs, the miner should extend the branch with
𝑇 𝐴
𝐴′ . The bribery attacks can be prevented when all miners
adopt this mechanism. However, it is unrealistic to assume
that all miners adopt this approach since miners can be selfish
(they may choose 𝑇 𝐴
𝐵 for a higher reward). Nevertheless, this
approach can still reduce 𝛾, especially in oriented bribery
attacks (a smaller 𝛾 indicates a less reward for attackers).
Finally, for pool managers, they should expel pool min-
ers who submit FPoWs containing bribes (avoiding bribery
racing in FAW/PAW). Though plain bribery attacks will
not damage the pool’s reward, and increasing 𝑐 may be the
better strategy for a higher pool’s reward even when FAW
attacks are detected [13] since bribery attack can increase
the chance of winning in forks, pool managers should reject
bribery transactions to avoid bribery FAW/PAW attacks for
further loss.
8 CONCLUSION
We show that in PoW-based blockchain cryptocurrencies
such as Bitcoin, mining attacks can be further extended by
combining power adjusting and bribery racing. In PAW, an
attacker can increase her reward (up to 2.5 times of FAW)
and avoid the “miner’s dilemma”. In BSM, an attacker can
gain 10% extra reward than selfish mining and make other
miners (targets) suffer from a “venal miner’s dilemma” (all
targets will earn less under the Nash equilibrium). Quan-
titative analysis and simulations have been done to verify
our analysis. To mitigate these attacks, we discuss possible
countermeasures. But a practical solution to fully prevent
these attacks remains to be open.
ACKNOWLEDGMENT
We gratefully acknowledge Tao Lu from Erasmus University
for helpful technical discussions about conditional expecta-
tion. This research is partially supported by HK RGC GRF
PolyU 152124/19E and HK ITF ITS/081/18.
REFERENCES
[1] Lear Bahack. 2013. Theoretical Bitcoin Attacks with Less than
Half of the Computational Power (draft). In arXiv preprint
arXiv:1312.7013.
[2] Joseph Bonneau. 2016. Why Buy When You Can Rent?. In Proc.
of the International Conference on Financial Cryptography and
Data Security (FC). Springer.
[3] Danny Bradbury. 2013. The Problem with Bitcoin. In Computer
[11] Ethan Heilman, Alison Kendler, Aviv Zohar, and Sharon Goldberg.
2015. Eclipse Attacks on Bitcoin’s Peer-to-Peer Network. In Proc.
of the USENIX Security Symposium (Security). USENIX.
[12] Ghassan O Karame, Elli Androulaki, and Srdjan Capkun. 2012.
Double-Spending Fast Payments in Bitcoin. In Proc. of the ACM
Conference on Computer & Communications Security (CCS).
ACM.
[13] Yujin Kwon, Dohyun Kim, Yunmok Son, Eugene Vasserman, and
Yongdae Kim. 2017. Be Selfish and Avoid Dilemmas: Fork After
Withholding (FAW) Attacks on Bitcoin. In Proc. of the ACM
Conference on Computer & Communications Security (CCS).
ACM.
[14] Yujin Kwon, Hyoungshick Kim, Jinwoo Shin, and Yongdae Kim.
2019. Bitcoin vs. Bitcoin Cash: Coexistence or Downfall of Bitcoin
Cash?. In Proc. of the IEEE Symposium onSecurity and Privacy
(Oakland). IEEE.
[15] Kevin Liao and Jonathan Katz. 2017. Incentivizing Blockchain
Forks via Whale Transactions. In Proc. of the International
Conference on Financial Cryptography and Data Security (FC).
Springer.
[16] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and
Aquinas Hobor. 2015. On Power Splitting Games in Distributed
Computation: The Case of Bitcoin Pooled Mining. In Proc. of
the IEEE Computer Security Foundations Symposium (CSF).
IEEE.
[17] Patrick McCorry, Alexander Hicks, and Sarah Meiklejohn. [n.d.].
Smart Contracts for Bribing Miners. Cryptology ePrint Archive
2018.
[18] A Miller. 2013. Feather-Forks: Enforcing a Blacklist with Sub-50%
Hash Power.
[19] Andrew Miller, James Litton, Andrew Pachulski, Neal Gupta,
Dave Levin, Neil Spring, and Bobby Bhattacharjee. [n.d.]. Dis-
covering Bitcoin’s Public Topology and Influential Nodes.
[20] Satoshi Nakamoto. 2008. Bitcoin: A Peer-to-Peer Electronic Cash
System.
[21] Arvind Narayanan, Joseph Bonneau, Edward Felten, Andrew
Miller, and Steven Goldfeder. 2016. Bitcoin and Cryptocurrency
Technologies: A Comprehensive Introduction. Princeton Univer-
sity Press.
[22] Kartik Nayak, Srijan Kumar, Andrew Miller, and Elaine Shi. 2016.
Stubborn Mining: Generalizing Selfish Mining and Combining with
an Eclipse Attack. In Proc. of the IEEE European Symposium
on Security and Privacy (Euro S&P). IEEE.
[23] Antpool. 2019. Antpool. https://www.antpool.com/.
[24] Bitcoin Wiki. 2019. Proof of Work. https://en.bitcoin.it/wiki/P
roof of work.
[25] Bitfinex. 2019. Cloud Mining. https://www.bitfinex.com/.
[26] Bitinfocharts. 2019. Bitcoin Hash Rate. https://bitinfocharts.co
m/comparison/bitcoin-hashrate.html.
[27] BTC-pools.com. 2019. BTC.com Pool. https://btc-pools.com/.
[28] CEX.IO. 2019. Cloud Mining. https://cex.io/.
[29] Coinbase. 2019. Bitcoin Exchange Rate. https://www.coinbase.c
Fraud & Security. Elsevier.
om/charts.
[4] Miles Carlsten, Harry Kalodner, S Matthew Weinberg, and Arvind
Narayanan. 2016. On the Instability of Bitcoin without the Block
Reward. In Proc. of the ACM Conference on Computer & Com-
munications Security (CCS). ACM.
[5] Nicolas T Courtois and Lear Bahack. 2014. On Subversive Miner
Strategies and Block Withholding Attack in Bitcoin Digital Cur-
rency. In arXiv preprint arXiv:1402.1718.
[6] Christian Decker and Roger Wattenhofer. 2013.
Information
Propagation in the Bitcoin Network. In Proc. of the IEEE Inter-
national Conference on Peer-to-Peer Computing (P2P). IEEE.
[7] Ittay Eyal. 2015. The Miner’s Dilemma. In Proc. of the IEEE
Symposium onSecurity and Privacy (Oakland). IEEE.
[8] Ittay Eyal, Adem Efe Gencer, Emin G¨un Sirer, and Robbert
Van Renesse. 2016. Bitcoin-NG: A Scalable Blockchain Protocol.
In Proc. of the USENIX Symposium on Networked Systems
Design and Implementation (NSDI). USENIX.
[9] Ittay Eyal and Emin G¨un Sirer. 2014. Majority is not Enough:
Bitcoin Mining is Vulnerable. In Proc. of the International Con-
ference on Financial Cryptography and Data Security (FC).
Springer.
[10] Arthur Gervais, Ghassan O Karame, Karl W¨ust, Vasileios
Glykantzis, Hubert Ritzdorf, and Srdjan Capkun. 2016. On the Se-
curity and Performance of Proof of Work Blockchains. In Proc. of
the ACM Conference on Computer & Communications Security
(CCS). ACM.
[30] Dogecoin Project. 2019. Dogecoin. http://dogecoin.com/.
[31] Litecoin Project. 2019. Litecoin. https://litecoin.org/.
[32] Pow88. 2019. Cloud Mining. http://pow88.com.
[33] Slush. 2019. Slush. https://slushpool.com/home/.
[34] Wikipedia. 2019. Merkle Root. https://en.wikipedia.org/wiki/
Merkle tree.
[35] wizkid057. 2014. BWH Attacks against Eligius. https://bitcoint
alk.org/?topic=441465.msg7282674.
[36] J Ben Rosen. 1965. Existence and Uniqueness of Equilibrium
Points for Concave n-Person Games. Econometrica: Journal of
the Econometric Society.
[37] Meni Rosenfeld. 2011. Analysis of Bitcoin Pooled Mining Reward
Systems. In arXiv preprint arXiv:1112.4980.
[38] Ayelet Sapirshtein, Yonatan Sompolinsky, and Aviv Zohar. 2016.
Optimal Selfish Mining Strategies in Bitcoin. In Proc. of the
International Conference on Financial Cryptography and Data
Security (FC). Springer.
A CALCULATION OF ¯𝜏 (𝑖)
1,··· ,𝑘 (PROOF
OF THEOREM 5.1)
We split the total time of finding a new valid block (FPoW)
into 𝑘 slots, as depicted in Fig. 14. In (0, 𝑡1), the attacker
(a) 0 < 𝛽 (cid:54) 0.5.
(b) 0 < 𝛽 (cid:54) 0.1.
𝑥𝑓𝑇1 (𝑥)𝑑𝑥𝑑𝑦
(17)
Figure 15: RER of the victim pool under FAW attacks when
𝛼 = 0.2. Victim pool’s reward does not always increase with
𝑐.
−∞
𝑖∈𝒫 𝜏 (𝑖)
𝑖=1 𝑡𝑖), the infiltration mining power will be
1 𝛼 for infiltration mining, where 𝒫 is the
set of victim pools. Similarly, in (𝑡1, 𝑡1 + 𝑡2), ..., and in
will use ∑︀
𝑖=1 𝑡𝑖,∑︀𝑘
(∑︀𝑘−1
∑︀
2 𝛼, ..., and∑︀
should have 𝑇1 ∼ exp(∑︀
other miners should have 𝑇𝑘 ∼ exp(1 −∑︀
∫︁ 𝑦
𝑖∈𝒫 𝜏 (𝑖)
In the calculation of 𝐸(𝑇1|𝑇1 < 𝑇𝑘), we have:
𝐸(𝑇1|𝑇1 < 𝑇𝑘) =
𝐸(𝑇11𝑇1<𝑇𝑘 )
𝑃 (𝑇1 < 𝑇𝑘)
𝑖∈𝒫 𝜏 (𝑖)
We regard all infiltration mining as one miner. Before
𝑡1, the time of the infiltration miner finds an FPoW (𝑇1)
1 𝛼), and the time for the
𝑘 𝛼 respectively.
𝑖∈𝒫 𝜏 (𝑖)
𝑖∈𝒫 𝜏 (𝑖)
1 𝛼).
=
𝑃 (𝑇1 < 𝑇𝑘)
1
1
R
∫︁
∑︁
1 𝛼𝑒−∑︀
1 𝛼)𝑒−(1−∑︀
𝑖∈𝒫
𝑖∈𝒫 𝜏 (𝑖)
𝑃 (𝑇1 < 𝑇𝑘)
𝑖∈𝒫 𝜏 (𝑖)
𝑓𝑇𝑘 (𝑦)
𝜏 (𝑖)
1 𝛼,
=
where 𝑓𝑇1 (𝑥) =∑︀
𝑓𝑇𝑘 (𝑦) = (1 −∑︀
𝑖∈𝒫 𝜏
𝑖∈𝒫 𝜏
(𝑖)
1 𝛼𝑥 when 𝑥 (cid:62) 0 and
1 𝛼)𝑦 when 𝑦 (cid:62) 0.
(𝑖)
Now we calculate 𝑃 (𝑇1 < 𝑇𝑘). First, we considering two in-
dependent random variables 𝑋 and 𝑌 that are exponentially
distributed, 𝑋 ∼ exp(𝜆1) and 𝑌 ∼ exp(𝜆2). The probability
of 𝑋 < 𝑌 (𝑃 (𝑋 < 𝑌 )) can be calculated as follows:
𝑃 (𝑋 < 𝑌 ) =
𝑓𝑋 (𝑥)𝑓𝑌 (𝑦)𝑑𝑥𝑑𝑦
−∞
R
=
∫︁
∫︁ 𝑦
∫︁ +∞