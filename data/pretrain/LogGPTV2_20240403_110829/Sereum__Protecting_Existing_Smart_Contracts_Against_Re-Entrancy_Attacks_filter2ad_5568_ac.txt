function send(address to, uint256 amount) public {
to.call.value(amount)(); // CALL
}
// ...
}
contract Victim {
mapping (address => uint) public credit;
Lib lib; // address of library contract
// ...
function withdraw(uint amount) public {
if (credit[msg.sender] >= amount) {
// DELEGATECALL into Library
address(lib).delegatecall(
abi.encodeWithSignature("send(address,uint256)",
to, amount));
// state update after DELEGATECALL
credit[msg.sender] -= amount;
}
}
// ...
Figure 4. The upper part show the relevant solidity source code. The lower
part shows the call chain for a delegated re-entrancy attack. Analyzed in
isolation, the Victim and the Library contract are not vulnerable to re-entrancy.
However, when the Victim contract is combined with the Library contract, it
becomes vulnerable. In this simpliﬁed case the Library contract is simply used
for sending Ether.
Furthermore, it also allows a contract to update functionality
by switching to a newer version of the library.
For a combination of contract and libraries to be vulnerable,
the state-update and the external call must take place in differ-
ent contracts. For example, the improper state-update happens
in one library after the contract already performed the external
call. When each one is analyzed in isolation, none of the
contracts exhibit a re-entrancy vulnerability. However, when
both contracts are combined, a new re-entrancy vulnerability
emerges which we refer to as delegated re-entrancy. Figure 4
shows a simpliﬁed example of a contract, which uses a library
contract for issuing external calls.
Existing static analysis tools cannot detect delegated re-
entrancy attacks: during ofﬂine analysis, it is not known which
library contract will be used when actually executing the smart
contract. Hence, existing analysis tools, such as Oyente or
Securify, fail to identify the delegated re-entrancy vulnerability
as they analyze contracts in isolation. Although symbolic
execution techniques could potentially leverage the current
blockchain state to infer which library is eventually called and
dynamically fetch the code of the library contract, this is not
a viable solution as a future (updated) version of the library
might introduce a new vulnerability. To detect these attacks,
a run-time solution emerges as one of the few workable and
effective means to deter this attack. Due to its dynamic nature,
6
ECFChecker is able to detect delegated re-entrancy attacks, as
it analyzes the actual combination of contracts and libraries.
C. Create-Based Re-Entrancy
Similar to delegated re-entrancy attacks, our third type
of attack exploits the fact that a contract’s constructor can
issue further external calls. Recall that contracts can either
be created by accounts (with a special transaction) or by other
contracts. In solidity, a new contract can be created with the
new keyword. On the EVM level, this is implemented with
the CREATE instruction. Whenever a new contract is created,
the constructor of that contract will be executed immediately.
Usually, the newly created contract will be trusted and as such
does not pose a threat. However, the newly created contract
can issue further calls in its constructor to other, possibly
malicious, contracts. To be vulnerable to a create-based re-
entrancy attack, the victim contract must ﬁrst create a new
contract and afterwards update its own internal state, resulting
in a possible inconsistent state. The newly created contract
must also issue an external call
to an attacker-controlled
address. This then allows the attacker to re-enter the victim
contract and exploit the inconsistent state.
Create-based re-entrancy poses a signiﬁcant problem for
the state-of-the-art analysis tools. Securify and Mythril do not
consider CREATE as an external call and thus do not ﬂag
subsequent state updates. Similarly, Oyente, Manticore, and
ECFChecker consider only CALL instructions when check-
ing for re-entrancy vulnerabilities. Hence,
to
detect create-based re-entrancy attacks. Similar to delegated
re-entrancy, the create-based re-entrancy vulnerability emerges
only when two contracts are combined. Thus, the contracts
must be also analyzed in combination, which is challenging as
the contract code might change after the analysis.
they all fail
IV. DESIGN OF Sereum
In this section, we devise a novel way to detect re-entrancy
attacks based on run-time monitoring at the level of EVM
bytecode instructions. Our approach, called Sereum (Secure
Ethereum), is based on extending an existing Ethereum client,
which we extend to perform run-time monitoring of contract
execution.
Architecture. Figure 5 shows an overview of the Sereum
architecture. For a standard Ethereum client, the EVM features
a bytecode interpreter, which is responsible for executing the
code of the smart contracts, and the transaction manager
that executes, veriﬁes and commits new and old transactions.
Sereum extends the EVM by introducing two new compo-
nents: (1) a taint engine, and (2) an attack detector. The
taint engine performs dynamic taint-tracking; dynamic taint
tracking assigns labels to data at pre-deﬁned sources and then
observes how the labeled data affects the execution of the
program [37]. To the best of our knowledge Sereum is the
ﬁrst dynamic taint-tracking solution for smart contracts. The
attack detector utilizes the taint engine to recognize suspicious
states of program execution indicating that a re-entrancy attack
is happening in the current transaction. It interfaces with the
transaction manager of the EVM to abort transactions as soon
as an attack is detected.
VictimLibraryAttackerVictimDELEGATECALLCALLCALLFigure 5. Architecture of enhanced EVM with run-time monitoring.
Detecting Inconsistent State. To effectively reason about
a malicious re-entrance into a contract, we need to detect
whether a contract acts on inconsistent
internal state (cf.
Figure 2). Note that any persistent internal state is stored
in the storage memory region of the EVM (cf. Section II).
Variables which are shared between different invocations of
a contract are always stored in the storage region. As such,
only the storage region is relevant for re-entrancy detection.
Thus, Sereum applies taint tracking to storage variables as
these are the only internal state variables capable of affecting a
contract’s control ﬂow in a subsequent (re-entered) invocation
of the contract. That said, only if a control-ﬂow decision is
dependent on storage variables, an attacker can manipulate the
outcome of a conditional branch decision by re-entering the
contract and thereby manipulate the behavior of the contract.
Hence, re-entrancy attacks only apply to contracts that execute
conditional branches dependent on persistent internal state, i.e.,
the storage region.
The main idea behind Sereum is to detect state updates,
i.e., altering of storage variables, after a contract (denoted as
Victim contract) calls into another contract (denoted as Attacker
contract). Notice that not all state updates resemble malicious
behavior, but only those where Victim is re-entered and acts
upon the updated state. Typically,
the goal of re-entrancy
attacks is to bypass validity checks in the business logic of the
Victim contract. As such, Sereum focuses only on conditional
jumps and the data that
jumps.
Notice that it is also possible for a contract to transfer Ether
without performing any validity check. Obviously, deploying
such a contract would be highly dangerous and inefﬁcient
due to unnecessary consumption of gas. Hence, we do not
explicitly capture such cases in Sereum. However, Sereum can
be easily extended to cover this kind of re-entrancy attack by
issuing write-locks not only for behavior-changing variables,
but also for variables that are passed to other contracts during
external calls (such as Ether amount or call input).
inﬂuences the conditional
Consider the example shown in Figure 6, Victim calls
into the Attacker contract. The Attacker then forces a re-
entrancy into the Victim contract by calling into the Victim
again. The second re-entered invocation of Victim reads from a
storage variable and takes a control-ﬂow decision based on that
variable. After the Attacker contract eventually returns again
to Victim, the Victim contract will update the state. However,
at this point, it is clear that the re-entered Victim used a wrong
value read from inconsistent internal state for its conditional
branch decision.
The key observation is that inconsistent state can only arise
if (1) a contract executes an external call to another contract,
(2) the storage variable causing inconsistency is used during
Figure 6.
invocations of a contract.
Re-entrancy attack exploits inconsistent state among different
the external call for a control-ﬂow decision and (3) the variable
is updated after the external call returns. Next, we describe in
more details how the taint engine and the attack detector detect
inconsistent state at the EVM level.
Taint Engine and Attack Detector. To detect state updates,
which cause inconsistency, we need to know which storage
variables were used for control-ﬂow decisions. On the EVM
bytecode level a smart contract implements any control-ﬂow
decision as a conditional jump instruction. Consequently, we
leverage our taint engine to detect any data-ﬂow from a storage
load to the condition processed by a conditional jump in-
struction. This ensures that we only monitor those conditional
jumps which are inﬂuenced by a storage variable. For every
execution of a smart contract in a transaction, Sereum records
the set of storage variables, which were used for control-
ﬂow decisions. Using this information, Sereum introduces a
set of locks which prohibit further updates for those storage
variables. If a previous invocation of the contract attempts to
update one of these variables, Sereum reports a re-entrancy
problem and aborts the transaction to avoid exploitation of the
re-entrancy vulnerability.
In the simplest case, the attacker directly re-enters the
victim contract. However, the attacker might try to obfuscate
the re-entrant call by ﬁrst calling an arbitrary long chain of
nested calls to different attacker-controlled contracts. Further-
more, during the external call, the attacker can re-enter the
victim contract several times, possibly in different functions
(as shown in the cross-function re-entrancy attack described in
Section III). This has to be taken into account when computing
the set of locked storage variables. To tackle these attacks,
Sereum builds a dynamic call tree during the execution of a
transaction. Every node in the dynamic call tree, represents
a call to a contract and the depth of the node in the tree
is equal to the depth of the contract invocation in the call
stack of the EVM. We store those storage variables which
inﬂuence control-ﬂow decisions as set Di for every node i in
the dynamic call tree. The set of storage variables Li that are
locked at node i is the union of Dj for any node j of the
same contract as i that belongs to the sub-tree spanning from
node i.
Example of Dynamic Call Tree. Figure 7 depicts an example
for Sereum’s generation of a dynamic call tree for a given
Ethereum transaction. A possibly malicious contract A re-
7
BytecodeInterpreterTransactionManagerAttackDetectorTaintEngineEthereumVirtualMachineSereumVictimAttackerVictim(re-entered)CallAttackerCallVictimReadObsoleteStateConditionalBranch···UpdateStateCALLCALLRETURNRETURNSince Sereum performs dynamic analysis, it does not suffer
from such kind of weakness; it only analyzes those cross-
function re-entrant calls that actually occur at run-time. Sim-
ilarly, delegated re-entrancy attacks are detected as Sereum
–in contrast to existing tools– does not inspect contracts in
isolation, but analyzes and monitors exactly the library code
which is invoked when a transaction executes. That is, as an
extension to the Ethereum client, Sereum can easily access the
entire blockchain state and hence retrieve the code of every
invoked library contract. Our taint engine simply propagates
the taints through the library. This also naturally covers any
future updates of the library code. Next, we describe the
implementation details of Sereum.
V.
IMPLEMENTATION
We implemented Sereum based on the popular go-
ethereum1 project, whose client for the Ethereum network is
called geth. In our implementation, we extended the existing
EVM implementation to include the taint engine and the re-
entrancy attack detector. We faced one particular challenge in
our implementation: variables stored in the storage memory
region are represented on the EVM bytecode level as load and
store instructions to certain addresses, i.e., any type informa-
tion is lost during compilation. Hence, only storage addresses
are visible on the EVM level. Most storage variables, such as
integers, are associated with one address in the storage area.
However, other types, such as mapping of arrays, use multiple
(not necessarily) adjacent storage addresses. As such, Sereum
tracks data-ﬂows and sets the write-locks on the granularity of
storage addresses.
In the remainder of this section, we describe how Sereum
tracks taints from storage load instructions to conditional
branches to detect storage addresses that reference values that
affect the contract’s control-ﬂow. Furthermore, we show how
Sereum performs attack detection by building the dynamic call
tree and propagating the set of write-locked storage addresses.
A. Taint Tracking EVM
Taint tracking is a popular technique for analyzing data-
ﬂows in programs [37]. First, a taint is assigned to a value at
a pre-deﬁned program point, referred to as the so-called taint
source. The taint is propagated throughout the execution of the
program along with the value it was assigned to. Taint sinks
are pre-deﬁned points in the program, e.g., certain instructions
or function calls. If a tainted value reaches a taint sink, the
Sereum taint engine will issue a report, and invoke the attack
detection module. Taint analysis can be used for both static
and dynamic data-ﬂow analysis. Given that we aim to achieve
run-time monitoring of smart contract, we leverage dynamic
taint tracking in Sereum.
To do so, we modiﬁed the bytecode interpreter of geth
ensuring that it is completely transparent to the executed smart
contract. Our modiﬁed bytecode interpreter maintains shadow
memory to store taints separated from the actual data values,
which is a common approach for dynamic taint analysis.
Sereum allocates shadow memory for the different types of mu-
table memory in Ethereum smart contracts (see Section II-A).
1https://github.com/ethereum/go-ethereum,
6a2d2869f6cb369379eb1c03ed7e55c089e83dd6/v1.8.3-unstable
based
on
git
commit
Figure 7.
Dynamic call tree of a Ethereum transaction. Contract A is
re-entered several times. Vk are storage variables. Di is the set of storage
variables, which inﬂuence control-ﬂow decisions in node i. Li is the set of
storage variables, which are locked at node i and cannot be updated anymore.
enters a vulnerable contract C multiple times at different entry
points (functions). First, as shown on the left sub-tree, contract
A calls C, C calls A, and A ﬁnally re-enters C. This sub-tree
would be equivalent to a classical re-entrancy attack, as shown
previously in Figure 2. The variables locked during the ﬁrst
execution of contract C (node marked with 2) are impacted
only by the lower nodes in the call tree. The second execution
of contract C (in node 4) uses the storage variable V1 for
deciding a conditional control-ﬂow. Hence, this variable must
not be modiﬁed after the call in the execution of node 2.
In contrast, the right side of the call tree contains a more
diverse set of nodes. For instance, the right part of the call-
tree could be part of a cross-function re-entrancy attack. We
can observe that different functions were called in the various
re-entrant invocations of C, because the variables used for
conditional branches are different. Note that none of the sets
D5, D7, D8, and D10 are equal. Contract C performs two calls
into A in node 5. These calls re-enter C in nodes 7, 8, and 10.
For the execution of C from node 5, we lock all variables from
the sub-calltree below node 5. Note that although variable V1
is locked in node 2, it is not in the set of locked variables
L5. This means that no further calls starting from node 5 have
used the variable V1 for a control-ﬂow decision; thus V1 can be
safely updated in node 5, which will not change the behavior
in any of the nodes 7, 8 and 10 unexpectedly.
A naive implementation of Sereum could just
lock all
variables which were used for control-ﬂow decisions. However,
as we can see from Figure 7, this would result in unnecessary