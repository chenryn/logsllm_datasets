M ′
c . The server sends M ′
c and its proof PM ′
c, PM ′
• VerifyUpdate(sk, pk, F , info, Mc, M ′
c, PM ′
c ) → {accept,
reject} is run by the client to verify the server’s behavior during
the update. It takes all inputs of the PrepareUpdate algorithm,1
plus the M ′
c sent by the server. It outputs acceptance (F
can be deleted in that case) or rejection signals;
c, PM ′
• Challenge(sk, pk, Mc) → {c} is a probabilistic procedure run
by the client to create a challenge for the server. It takes the
secret and public keys, along with the latest client metadata Mc
as input, and outputs a challenge c that is then sent to the server;
• Prove(pk, Fi, Mi, c) → {P } is the procedure run by the server
upon receipt of a challenge from the client. It takes as input the
public key, the latest version of the ﬁle and the metadata, and the
challenge c. It outputs a proof P that is sent to the client;
• Verify(sk, pk, Mc, c, P ) → {accept, reject} is the procedure
run by the client upon receipt of the proof P from the server.
It takes as input the secret and public keys, the client metadata
Mc, the challenge c, and the proof P sent by the server. An out-
put of accept ideally means that the server still has the ﬁle intact.
We will deﬁne the security requirements of a DPDP scheme later.
1However, in our model F denotes part of some encoded version
of the ﬁle and not part of the actual data (though for generality
purposes we do not make it explicit).
We assume there is a hidden input and output clientstate in all
functions run by the client, and serverstate in all functions run
by the server. Some inputs and outputs may be empty in some
schemes. For example, the PDP scheme of [2] does not store any
metadata at the client side. Also sk, pk can be used for storing mul-
tiple ﬁles, possibly on different servers. All these functions can be
assumed to take some public parameters as an extra input if operat-
ing in the public parameters model, although our construction does
not require such modiﬁcations. Apart from {accept, reject}, algo-
rithm VerifyUpdate can also output a new client metadata Mc. In
c.
most scenarios, this new metadata will be set as Mc = M ′
Retrieval of a (part of a) ﬁle is similar to the challenge-response
protocol above, composed of Challenge, Verify, Prove algorithms,
except that along with the proof, the server also sends the requested
(part of the) ﬁle, and the veriﬁcation algorithm must use this (part
of the) ﬁle in the veriﬁcation process. We also note that a PDP
scheme is consistent with the DPDP scheme deﬁnition, with algo-
rithms PrepareUpdate, PerformUpdate and VerifyUpdate speci-
fying an update that is a full re-write (or append).
As stated above, PDP is a restricted case of DPDP. The PDP
scheme of [2] has the same algorithm deﬁnition for key generation,
deﬁnes a restricted version of PrepareUpdate that can create the
metadata for only one block at a time, and deﬁnes Prove and Verify
algorithms similar to our deﬁnition. It lacks an explicit deﬁnition
of Challenge (though one is very easy to infer). PerformUpdate
consists of performing a full re-write or an append (so that replay
attacks can be avoided), and VerifyUpdate is used accordingly, i.e.,
it always accepts in case of a full re-write or it is run as in DPDP
in case of an append. It is clear that our deﬁnition allows a broad
range of DPDP (and PDP) schemes.
We now deﬁne the security of a DPDP scheme, inspired by the
security deﬁnitions of [2, 7]. Note that the restriction to the PDP
scheme gives a security deﬁnition for PDP schemes compatible
with the ones in [2, 3].
DEFINITION 2
(SECURITY OF DPDP). We say that a DPDP
scheme is secure if for any probabilistic polynomial time (PPT) ad-
versary who can win the following data possession game with non-
negligible probability, there exists an extractor that can extract (at
least) the challenged parts of the ﬁle by resetting and challenging
the adversary polynomially many times.
DATA POSSESSION GAME: Played between the challenger who
plays the role of the client and the adversary who acts as a server.
1. KEYGEN: The challenger runs KeyGen(1k) → {sk, pk}
and sends the public key pk to the adversary;
2. ACF QUERIES: The adversary is very powerful. The ad-
versary can mount adaptive chosen ﬁle (ACF) queries as fol-
lows. The adversary speciﬁes a message F and the related
information info specifying what kind of update to perform
(see Deﬁnition 1) and sends these to the challenger. The chal-
lenger runs PrepareUpdate on these inputs and sends the
resulting e(F ), e(info), e(M ) to the adversary. Then the ad-
versary replies with M ′
c which are veriﬁed by the chal-
lenger using the algorithm VerifyUpdate. The result of the
veriﬁcation is told to the adversary. The adversary can fur-
ther request challenges, return proofs, and be told about the
veriﬁcation results. The adversary can repeat the interaction
deﬁned above polynomially-many times;
c, PM ′
3. SETUP: Finally, the adversary decides on messages F ∗
i and
for all i = 1, . . . , R of adver-
related information info∗
i
sary’s choice of polynomially-large (in the security param-
eter k) R ≥ 1. The ACF interaction is performed again,
2151 specifying a full re-write (this corresponds
with the ﬁrst info∗
to the ﬁrst time the client sends a ﬁle to the server). The
challenger updates his local metadata only for the verifying
updates (hence, non-verifying updates are considered not to
have taken place—data has not changed);
4. CHALLENGE: Call the ﬁnal version of the ﬁle F , which is
created according to the verifying updates the adversary re-
quested in the previous step. The challenger holds the latest
metadata Mc sent by the adversary and veriﬁed as accepting.
Now the challenger creates a challenge using the algorithm
Challenge(sk, pk, Mc) → {c} and sends it to the adversary.
The adversary returns a proof P . If Verify(sk, pk, Mc, c, P )
accepts, then the adversary wins. The challenger has the
ability to reset the adversary to the beginning of the chal-
lenge phase and repeat this step polynomially-many times
for the purpose of extraction. Overall, the goal is to extract
(at least) the challenged parts of F from the adversary’s re-
sponses which are accepting.
Note that our deﬁnition coincides with extractor deﬁnitions
in proofs of knowledge. For an adversary that answers a non-
negligible fraction of the challenges, a polynomial-time extractor
must exist. Furthermore, this deﬁnition can be applied to the POR
case [7, 13, 30], in which by repeating the challenge-response pro-
cess, the extractor can extract the whole ﬁle with the help of error-
correcting codes. The probability of catching a cheating server is
analyzed in Section 5.
Finally, if a DPDP scheme is to be truly publicly veriﬁable, the
Verify algorithm should not make use of the secret key. Since that
is the case for our construction (see Section 4), we can derive a
public veriﬁability protocol usable for ofﬁcial arbitration purposes;
this work is currently under development.
3. RANK-BASED SKIP LISTS
In order to implement our ﬁrst DPDP construction, we develop a
modiﬁcation of the authenticated skip list data structure [12], which
we call a rank-based authenticated skip list. A similar modiﬁcation
could be done on other hash-based authenticated data structures,
such as Merkle trees.
We recall that in a skip list [26], each node v stores two point-
ers, denoted rgt(v) and dwn(v), that are used for searching. In an
authenticated skip list [12], a node v also stores a label f (v) com-
puted by applying a collision-resistant hash function to f (rgt(v))
and f (dwn(v)).
We can use an authenticated skip list to check the integrity of the
ﬁle blocks. However, this data structure does not support efﬁcient
veriﬁcation of the indices of the blocks, which are used as query
and update parameters in our DPDP scenario. To overcome this
difﬁculty, we deﬁne a new hashing scheme that takes into account
rank information.
3.1 Authenticating ranks
Let F be a ﬁle consisting of n blocks m1, m2, . . . , mn. We
store at the i-th bottom-level node of the skip list a representation
T (mi) of block mi (we will deﬁne T (mi) later). Block mi will
be stored elsewhere by the untrusted server. Each node v of the
skip list stores the number of nodes at the bottom level that can
be reached from v. We call this value the rank of v and denote it
with r(v). In Figure 1, we show the ranks of the nodes of a skip list.
An insertion, deletion, or modiﬁcation of a ﬁle block affects only
the nodes of the skip list along a search path. We can recompute
bottom-up the ranks of the affected nodes in constant time per node.
4
w 7
12
3
w 6
11
w 5
10
w 4
5
w 3
4
v 7
5
2
0
1
v 8
1
v 6
3
v 5
2
v 4
1
v 3
1
1
1
v 1
3
2
1
1
1
1
v 9
Figure 1: Example of rank-based skip list.
The top leftmost node of a skip list will be referred to as the
start node. For example, w7 is the start node of the skip list in
Figure 1. For a node v, denote with low(v) and high(v) the indices
of the leftmost and rightmost nodes at the bottom level reachable
from v, respectively. Clearly, for the start node s of the skip list,
we have r(s) = n, low(s) = 1 and high(s) = n. Using the
ranks stored at the nodes, we can reach the i-th node of the bottom
level by traversing a path that begins at the start node, as follows.
For the current node v, assume we know low(v) and high(v). Let
w = rgt(v) and z = dwn(v). We set
high(w) = high(v) ,
low(w) = high(v) − r(w) + 1 ,
high(z) = low(v) + r(z) − 1 ,
low(z) = low(v) .
If i ∈ [low(w), high(w)], we follow the right pointer and set v =
w, else we follow the down pointer and set v = z. We continue
until we reach the i-th bottom node.
In order to authenticate skip lists with ranks, we extend the hash-
ing scheme deﬁned in [12]. We consider a skip list that stores data
items at the bottom-level nodes. In our application, the node v as-
sociated with the i-th block mi stores item x(v) = T (mi). Let
l(v) be the level (height) of node v in the skip list (l(v) = 0 for the
nodes at the bottom level).
Let || denote concatenation. We extend a hash function h to
support multiple arguments by deﬁning
h(x1, . . . , xk) = h(h(x1)|| . . . ||h(xk)) .
DEFINITION 3
(HASHING SCHEME WITH RANKS). Given a
collision resistant hash function h, the label f (v) of a node v of
a rank-based authenticated skip list is deﬁned as follows.
Case 0: v = null
Case 1: l(v) > 0
f (v) = 0 ;
f (v) = h(l(v), r(v), f (dwn(v)), f (rgt(v))) ;
Case 2: l(v) = 0
f (v) = h(l(v), r(v), x(v), f (rgt(v))) .
3.2 Queries
Suppose now the ﬁle F and a skip list on the ﬁle have been stored
at the untrusted server. The client wants to verify the integrity of
block i and therefore issues query atRank(i) to the server. The
server executes Algorithm 1, described below, to compute T (i) and
a proof for T (i) (for convenience we use T (i) to denote T (mi)).
Let vk, . . . , v1 be the path from the start node, vk, to the node
associated with block i, v1. The reverse path v1, . . . , vk is called
the veriﬁcation path of block i. For each node vj, j = 1, . . . , k, we
216node v
l(v)
q(v)
g(v)
v3
0
0
0
v4
0
1
v5
0
1
w3
2
1
w4
2
1
w5
3
5
w6
3
1
w7
4
1
T (m4)
T (m5)
f (v1)
f (v6)
f (v7)
f (v8)
f (v9)
Table 2: Proof for the 5-th block of the ﬁle F stored in the skip list of Figure 1.
deﬁne boolean d(vj) and values q(vj) and g(vj) as follows, where
we conventionally set r(null) = 0:
j = 1 or j > 1 and vj−1 = rgt(vj)
j > 1 and vj−1 = dwn(vj)
,
dwn
Algorithm 2: {accept, reject} = verify(i, Mc, T , Π)