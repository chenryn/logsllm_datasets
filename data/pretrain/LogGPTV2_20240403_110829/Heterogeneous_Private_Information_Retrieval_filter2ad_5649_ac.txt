rithm, we summarize the main differences of our PIR-tailored
secret sharing algorithm from standard secret sharing algo-
rithms:
1) In standard secret sharing, a dealer shares value(s) from
Fρ where ρ is a prime number. However, in PIR-tailored
secret sharing, the dealer is sharing value(s) from {0, 1}.
2) In a standard multi-secret sharing algorithm, the dealer
has no constraint on choosing the values of the secrets.
However, in PIR-tailored secret sharing, only one of the
secrets can be 1, and the rest should be 0s.
3) In standard secret sharing, the x-coordinates of the points
used for constructing the secrets sharing polynomial is
known to the public as X = {1, 2, . . .}; however, in PIR-
tailored secret sharing these values are secret and only
known to the dealer.
4) In standard secret sharing, the x-coordinates used in gen-
erating the share for shareholder i is known to that speciﬁc
i,f (x(cid:48)
shareholder, i.e., the ith shareholder knows (x(cid:48)
i));
however, in PIR-tailored secret sharing these values (x(cid:48)
i)
are secret from all shareholders, and only known to the
dealer.
B. Algorithm Details
Parameters Suppose the dealer plans to share q secrets, S =
{s1, s2, . . . , sq}, among (cid:96) participants with a threshold t ≤ (cid:96).
All the secrets are from {0, 1}, and only one of the secrets
could be 1. At the ﬁrst step, the dealer generates q prime
numbers P = {p1, p2, . . . , pq} at random. Then, the dealer
calculates n = p1 × p2 × ··· × pq. Note that our shares are
about q times of prior works since all the calculations are in
mod(n).
Initial phase: At the start of the protocol, the dealer creates
the P and n parameters and announces value of n publicly.
Sharing Secrets:
In each round of the protocol, the dealer
shares q secrets with the shareholders by taking the following
steps (we ﬁrst describe this for q ≤ t, and then will discuss
the modiﬁcations for q > t). Our scheme is based on the
ramp secret sharing introduced in Section II-B, so we discuss
the modiﬁcations with respect to that scheme. For simplicity,
we use X = {1, . . . , t + 1} as the x-coordinates of the root
points, but they can be chosen randomly from Z∗
n = {x ∈
Zn | gcd(n, x) = 1}. Like other systems working based on
Lagrange interpolation, we have the constraint that gcd(xi −
xj, n) = 1 for xi, xj ∈ X and i (cid:54)= j.
I In contrast to the ramp scheme that uses points (i, si),
our scheme uses the points (i, ri × pi + si) to build our
secret sharing polynomial function. ri ∈ Z∗
n are random
increase the degree of freedom of the
numbers that
secrets. Therefore, the dealer uses Lagrange polynomial
interpolation to ﬁnd a polynomial f (x) (with a degree of
at most t) that contains these t + 1 points:
(1, (r1× p1) + s1 mod(n)), . . . , (q, (rq × pq) + sq mod(n)) . . .
(q + 1, rq+1 mod(n)), . . . , (t + 1, rt+1 mod(n))
II The dealer will send the secret share (f (xi)) to the ith
shareholder for 1 ≤ i ≤ (cid:96). (xi ∈ X(cid:48)s are random numbers
from Z∗
n with Lagrange constraint gcd(x(cid:48)
j, n) = 1
for x(cid:48)
i, x(cid:48)
j ∈ X(cid:48) and i (cid:54)= j and a constraint that gcd(xi −
j ∈ X(cid:48).) X(cid:48) is the set of
j, n) = 1 for xi ∈ X and x(cid:48)
x(cid:48)
x-coordinates used to generate shares.
i − x(cid:48)
Secret reconstruction: To retrieve the secrets, any k ≥ t + 1
shares can give away the secrets using Lagrange interpolation:
6
j, f (x(cid:48)
the k ≥ t + 1 points of (x(cid:48)
Lagrange polynomial interpolation.
1) The combiner will construct the polynomial f (x) using
j ∈ X(cid:48) with
2) The combiner uses f (x) to obtain the secrets. Suppose the
combiner wants to recover the ith secret, si. As (i, (ri ×
pi) + si mod(n)) is a point of the known f (x), she can
extract si using the pi:
j)) for x(cid:48)
si = f (i) mod(pi)
=
(cid:48)
f (x
m)(
(i − x
m − x
(cid:48)
(cid:48)
(cid:48)
n)(x
n)
−1) mod(pi)
(6)
k(cid:88)
m=1
k(cid:89)
n=1,n(cid:54)=m
Extension to q > t: The protocol will operate with small
changes. f (x) will have a degree of at most q. Therefore, in the
ﬁrst step of the sharing protocol, the dealer will use the points
(1, (r1×p1)+s1 mod(n)), . . . , (q, (rq×pq)+sq mod(n)), (q+
1, rq+1 mod(n)) to construct f (x). The dealer releases q − t
random points of f (x) publicly to make the scheme a (t + 1,(cid:96))
threshold secret sharing algorithm. The rest of the protocol is
the same.
C. Security Analysis
freedom of secrets
Degree of
The degree of freedom
of shared secrets demonstrates how many independent vari-
ables are used in generating the secret sharing function. A
multi-secret sharing scheme is secure if the q shared secrets
{s1, . . . , sq} have a degree of freedom of q or higher when
up to t shares are available. Each secret share known to the
adversary reduces the degree of freedom by one, as it provides
the adversary with a new equation for the main polynomial.
Therefore, if there are d independent variables in f (x), the
degree of freedom given t secret shares will be d − t.
Increasing the degree of freedom by introducing new
random variables Our PIR-tailored secret sharing scheme
shares q secrets using a t degree polynomial. We add q
random variables, ris, to the polynomial points we share, i.e.,
(1, (r1 × p1) + s1 mod(n)), . . . , (q, (rq × pq) + sq mod(n)).
Therefore, the adversary’s degree of freedom to reconstruct
the secrets will be t + q + 1. Assuming that the adversary is
provided with t shares, the degree of freedom will reduce to
q + 1, which is still larger than the number of secrets, q.
The q > t state of the PIR-tailored secret sharing is used
as the core of our HPIR since we want to deploy our HPIR
with minimum number of PIR servers (e.g., two servers with
t = 1). Therefore, when q > t, we claim that any coalition
with up to q shares can not learn anything about the secrets.
Note that this is unlike the ramp secret sharing which leaks
some information if the number of shares is between t + 1 and
t + q − 1. The complete proof is provided in Appendix B.
V. SKETCH OF OUR HPIR PROTOCOL
In this section we present the core design of our HPIR
protocol. The core of our HPIR construction is the PIR-tailored
multi-secret sharing algorithm introduced in Section IV.
The high-level
ideas of our HPIR protocol Our HPIR
protocol has the same high-level architecture as Henry et al.’s
7
multi-server PIR [30]. The querying client will act as the secret
sharing dealer, and the PIR servers act as the shareholders.
The client will use the PIR-tailored secret sharing algorithm
of Section IV to split queries into shares, which are then sent
to the servers. The servers will make some computation using
the query shares and will send the results back to the querying
client. Finally, the client recovers her requested records by
combing the responses from the PIR servers. Like previous
information-theoretic PIR systems, we assume that all the PIR
servers are not colluding, so they cannot reconstruct the secret
sharing polynomials to recover the secrets.
Our HPIR protocol is a multi-query protocol, i.e., the client
queries multiple (q) records in each round of the protocol. The
client will generate a polynomial fi(x) for each record of the
database. Each polynomial is used to share q secrets with the
possible values of 0 or 1. A value of 1 means that the client
is asking for the record corresponding to the index of that
polynomial. To query for q records in a given round of the
protocol, the client will send q + 1 vectors of size r elements
to the PIR servers to retrieve q records of the database.
Note that the key enabler of heterogeneity in our HPIR is
the PIR-tailored secret sharing scheme of Section IV. To en-
force heterogeneity, the client simply sends a different fraction
of query shares to different servers based on their bandwidth
and computational capabilities. For instance, consider a three-
server setting, where the three servers plan to handle 30%,
10%, and 60% of the overall communication/computation
overheads, respectively. Therefore, the normalized resources
of the three servers are 3, 1, 6, respectively (we normalize by
dividing by the smallest number). For this setting, the client
will choose q = (3 + 1 + 6) − 1 = 9. Then, to retrieve q = 9
records of the database, the client will send 3 (out of total
q + 1 = 10) of her query shares to the ﬁrst server, 1 (out
of total q + 1 = 10) of the shares to the second server, and
the rest of them to the third server. The non-ramp property of
our PIR-tailored secret sharing scheme enables us to design
multi-query PIR algorithms that can operate using as few as
two PIR servers.
Two Versions To better present the technical details of our
HPIR protocol, we present a basic version and a complete
version for our HPIR protocol. In our basic HPIR (Section VI),
there are q prime numbers involved in generating the queries,
so the communication cost will
increase with the number
of queries linearly; we address this in our complete version
(Section VII) by introducing additional parameters.
VI. OUR HPIR ALGORITHM (BASIC VERSION)
In the following, we present the steps of our HPIR protocol.
For clarity of presentation, we present our protocol for a 2-
server PIR setting (composed of a rich server and a poor
server). Please refer to Table I for the notations.
A. Client Generates r Polynomials
Suppose that the client wants to query q records of the
database with indices β = {β1, . . . , βq}; she takes the follow-
ing steps to generate r polynomials (one for each row of the
database):
1) The client will choose q > 2 different prime numbers
P = {p1, p2, . . . , pq} greater than 2w, where w is the
element size in the database. The client will calculate n =
p1×p2×···×pq, and will send it to the PIR servers (note
that all the calculations in this protocol are in mod(n)).
2) The client will construct r polynomials of degree q
based on our PIR-tailored secret sharing algorithm (see
Section IV-B). In generating each of the polynomials,
the client will choose q + 1 points with random distinct
x-coordinates X = {x1, x2, . . . , xq+1} (used for all the
polynomials) and y-coordinates given by (for 1 ≤ i ≤ r):
for 1 ≤ j ≤ q
for j = q + 1
(7)
(ri,j × pj) + δi,j mod(n)
ri,j mod(n)
yi,j = fi(xj) =
(cid:40)
where ri,js are random numbers from Z∗
Zn | gcd(n, x) = 1}, and the secrets are:
n = {x ∈
δij =
i = βj
o.w.
(8)
(cid:26)1
0
where β = {β1, . . . , βq} are the indices of the data
records being queried by the client.
3) Finally, after choosing these points, the client uses La-
grange interpolation to ﬁnd the r polynomials of degree
q that contain these points.
Constraints All the members of X are chosen from Z∗
n
at random. Like other systems working based on Lagrange
interpolation, we have the constraint that gcd(xi − xj, n) = 1
for xi, xj ∈ X, i (cid:54)= j.
Example: Suppose we have ﬁve records in our database
(r = 5), and the client wants to retrieve records with indices
β = {1, 3, 4}. Each row of the following matrix shows the
y-coordinates of each of the r = 5 polynomials (ri,j ∈r Z∗
for 1 ≤ i ≤ r, 1 ≤ j ≤ q + 1):
n
(p1 × r1,1) + 1
p1 × r2,1
p1 × r3,1
p1 × r4,1
p1 × r5,1
(p2 × r3,2) + 1
p2 × r1,2
p2 × r2,2
p2 × r4,2
p2 × r5,2
p3 × r1,3
p3 × r2,3
p3 × r3,3
p3 × r5,3
(p3 × r4,3) + 1
Y =
(9)
r1,4
r2,4
r3,4
r4,4
r5,4
B. Client Generates Queries
Using the r polynomials generated above, the client will
generate secret shares for her q queries. To do so, as described
in Section IV-B,
the client will pick (q + 1) random x-
coordinates of X(cid:48) = {x(cid:48)
q+1} (different from X,
with the same constraint), which are kept secret from the
server, to generate the query matrices. Qc is the query matrix
for the rich (resourceful) server with q rows and r columns,
and Qr is the query matrix for the poor (low-resource) server
with one row and r columns:
2, . . . , x(cid:48)
1, x(cid:48)
(cid:126)F (x(cid:48)
1)
(cid:126)F (x(cid:48)
2)
...
(cid:126)F (x(cid:48)
q)
 =
f1(x(cid:48)
1)
f1(x(cid:48)
2)
...
f1(x(cid:48)
q)
Qc =
 (10)
f2(x(cid:48)
1)
f2(x(cid:48)
2)
...
f2(x(cid:48)
q)
. . .
. . .
...
. . .
fr(x(cid:48)
1)
fr(x(cid:48)