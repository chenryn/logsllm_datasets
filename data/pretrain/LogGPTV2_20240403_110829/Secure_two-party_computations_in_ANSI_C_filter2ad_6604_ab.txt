gram.
In a GOTO program, all control statements like
while-loops are transformed into if-then-else statements with
conditional jumps, similarly to assembler language. To make
the program acyclic, the loops are replaced by a sequence of
k nested if statements; the sequence is followed by a spe-
cial assertion (called unwinding assertion) which can detect
a missed loop iteration due to insuﬃcient k. Similarly, re-
cursive function calls are expanded k times. This process is
called “unwinding” the program. For programs with at most
k steps, unwinding preserves the semantics of the program.
Once the program is acyclic, CBMC turns it into single-
static assignment (SSA) form. This means that each variable
x in the program is replaced by fresh variables x1, x2, . . .
where each of them is assigned a value only once. For
instance, the code sequence x=x+1; x=x*2; is replaced by
x2 = x1 + 1; x3 = x2 * 2; SSA format has the important
advantage that we can now view the assignments to pro-
gram variables as mathematical equations. (Note that, as
an equation, x=x+1; is unsolvable.) The indices of the vari-
ables essentially correspond to diﬀerent intermediate states
in the computation. It is thus possible to transform the pro-
gram into a large quantiﬁer-free formula involving equations
and operations over the variables.
In the next step, CBMC replaces the variables by bit vec-
tors. For instance, depending on the architecture, an inte-
ger variable will be represented by a bit vector of size 16 or
32. For more complex variables such as arrays and point-
ers, CBMC uses more advanced techniques [11, 12] whose
presentation we omit for simplicity. (Note that in n pro-
gram steps at most O(n) memory cells can be accessed;
this can be exploited by a clever Boolean encoding.) Cor-
respondingly, the operations over the variables (e.g. arith-
metic computations or comparisons) are naturally translated
into Boolean functions over the corresponding variables. In-
ternally, CBMC realizes these Boolean functions as circuits
whose construction principles are inspired by methods from
hardware design. In the default setting, CBMC translates
the resulting circuit into a CNF formula Bf which conjoins
the formula for the program semantics with the claim that
an assertion is violated.
By construction, the circuit and hence the Boolean for-
mula encode the semantics of the program exactly: the for-
mula is satisﬁable if and only if there is a program execution
in the unwound program leading to an assertion violation.
Due to the ﬁxed unwinding of the program, the tool might
miss a bug in case some loop was not unrolled suﬃciently
often. These cases however are detected by CBMC as ex-
plained above.
3.2 From CBMC to CBMC-GC
In this section, we show how to utilize the capability of
CBMC to generate Boolean circuits; as explained in the pre-
vious section, these circuits express the computation of a C
program in a bit-precise manner. Note that for our purposes,
code assertions and SAT solvers are irrelevant.
We chose CBMC as our architecture because CBMC is
very well maintained, has a clean software architecture and
is well documented. Our tool is based on version 2.4 of
CBMC3 and performs the following steps, described in more
detail in the rest of the section:
1. Syntactic Preprocessing: The input C program is syn-
tactically pre-processed in order to perform some op-
timizations that can best be implemented on the level
of C programs, but reduce the resulting circuit size
signiﬁcantly.
2. Circuit Synthesis: The resulting processed C program
is handed over to a modiﬁed version of CBMC, which
internally creates a circuit representation of the pro-
gram. We leave placeholders for certain basic opera-
tions whose implementation is particularly important
for the eﬃciency of STC, e.g. full adders and multi-
plexers.
3. Circuit Optimization: In a ﬁnal step, the output circuit
is assembled by replacing the placeholders with circuit
implementations that are favorable for STC, i.e., have
large numbers of XOR gates. The ﬁnal circuit is stored
as a netlist (a list of basic operations such as AND, OR,
ADD, etc.).
3http://www.cprover.org/cbmc/
775Syntactic Preprocessing
3.2.1
Given the input program, our tool ﬁrst performs syntactic
loop unrolling: It attempts to identify simple for-loops, and
replaces them with repeated copies of the loop bodies, where
the loop variables are replaced by constants. Furthermore,
we do constant propagation to simplify the computations of
the program as much as possible. The main purpose of this
step is to optimize handling of arrays. Whenever an element
of an array is read or stored in a way that the address of
the element is not known at compile time, standard CBMC
models this access with a multiplexer circuit; multiplexers
require a signiﬁcant number of gates and their evaluation
is quite costly. If however the exact address is known dur-
ing compilation time, the address can be hard-wired into the
circuit in order to avoid the overhead. The result of this pre-
processing step is stored as an ANSI compliant C program,
which is next fed to the tool CBMC.
3.2.2 Circuit Synthesis
As described above, CBMC uses circuits for the internal
bit-precise representation of the program. We use this capa-
bility to obtain the circuits that we need as input for STC.
At some places, we had to modify the circuit generation
of CBMC for a subtle reason: Since CBMC aims to produce
good instances for a SAT solver, it has the freedom to use
circuits which are equisatisﬁable with the circuits we expect,
but not logically equivalent. This happens in one construc-
tion: CBMC sometimes introduces circuits with free input
variables, and adds constraints which requires them to coin-
cide with other variables. In these places, we had to change
the circuit generation to reﬂect actual computation.
Moreover, we perform two additional steps which improve
practical eﬃciency. First, for important basic operations
(such as additions and multiplexers) we prevent CBMC from
hardwiring the corresponding circuits, but represent them
by distinguished “placeholder gates” which are instantiated
in step 3 below. Second, we do a reachability analysis on
the resulting circuit to prune branches of the circuit which
contain dead code. The resulting circuit is ﬁnally handed to
the next stage of the toolchain.
3.2.3 Circuit Optimization
The circuits produced by standard CBMC have good sizes
but are not optimal from the point of view of secure compu-
tation. Especially, XOR gates are preferable to other gates,
as they can be evaluated essentially without any cost [26]. In
the last step we thus instantiate the remaining placeholder
gates with eﬃcient implementations. For example, unmod-
iﬁed CBMC translates one addition in the C program into
a full-adder composed of 4 non-XOR gates per bit; in con-
trast, we instantiate the addition with a full-adder requiring
4 XOR gates and one other gate, whose evaluation is faster,
despite the larger number of gates. At the moment, our tool
replaces addition operations, multiplexers and integer com-
parisons with hand-optimized versions. However, the tool
oﬀers full ﬂexibility; once our modiﬁed version of CBMC is
able to identify other basic blocks that turn out to be perfor-
mance bottlenecks, they can easily be replaced by optimized
circuits.
We output the generated circuit as a netlist with ad-
ditional mappings of input and output variables to input
and output pins in the circuit. At the moment our netlist
format is text-based, but we plan to replace it by a more
space-eﬃcient binary format. An STC framework can sub-
sequently read the netlist and translate it into its internal
circuit representation.
Input Syntax
3.2.4
CBMC-GC accepts ANSI C programs with multiple func-
tions as input. The programmer needs to specify in the form
of a command-line option which function is considered to be
the main function, implementing the desired functionality.
Secret inputs of both parties need to be speciﬁed as vari-
ables, where the variable name is preceded by INPUT_A_ and
INPUT_B_, respectively. The output, which will be available
to both parties after the computation terminated, must be
stored in variables whose names start with the preﬁx OUT-
PUT_. For example, a CBMC-GC program that solves Yao’s
Millionaires problem can be speciﬁed in a very simple way:
void millionaires() {
int INPUT_A_mila;
int INPUT_B_milb;
int OUTPUT_res;
if (INPUT_A_mila > INPUT_A_milb)
OUTPUT_res = 1;
else
OUTPUT_res = 0;
Security & Correctness
}
3.2.5
When considering the security and correctness of the ap-
proach one can distinguish three diﬀerent aspects. First,
the garbled circuit approach is known to be secure for the
execution of any circuit [27]. CBMC-GC produces circuits
that are executed on that platform. Second, the correctness
of the compilation step reduces to the question of verifying
the correctness of a compiler, a topic of current interest in
programming languages. While no formal correctness proof
is available, CBMC is widely used in the research commu-
nity and quite mature. Third, having the description of the
circuit available as C code, we can test functional properties
of the program by testing the C code. In particular, we can
apply the unmodiﬁed version of CBMC to verify correctness
properties (assertions contained in the program).
3.2.6 Limitations
Bounded Programs. Since a circuit can only encode a ﬁxed
number of computation steps, CBMC-GC requires for each
loop or recursive function call a constant bound (similar to
the situation of embedded systems software, where compu-
tations have to be bounded as well). CBMC implements a
static analysis that can automatically determine loop bounds
in many cases; obviously this does not always work, as the
problem itself is undecidable. However, for each of the exam-
ples given in Section 4, CBMC determined the loop bounds
automatically.
In case CBMC fails to determine the loop
bounds it is possible to state the bounds explicitly. Further-
more, CBMC is able to check whether an explicitly speciﬁed
bound is indeed an upper bound for the speciﬁc loop or re-
cursive function call (see the discussion of unwinding asser-
tions in Section 3.1). Since each program has to be bounded,
CBMC can handle dynamic memory allocation in a straight-
forward way: it replaces each call to malloc or calloc by the
address of a fresh variable of appropriate type and size [12].
776Undeﬁned Behavior. CBMC-GC introduces nondetermin-
ism in the case of program behavior that is undeﬁned with
respect to the ANSI C standard, e.g., access to nonallocated
memory. This nondeterminism is introduced by adding ad-
ditional input pins to the circuit whose values determine
the outcome of the nondeterministic choice. CBMC-GC de-
tects such inputs and alarms the user. Furthermore, CBMC
itself can be used to show the absence of such behaviors.
For example, CBMC includes checks for index-out-of-bounds
accesses in arrays.
In case such an array access happens,
CBMC provides an execution trace which leads to this ac-
cess and helps to eﬃciently debug the C program. Note that
for the bounded and moderately sized programs considered
in STC, CBMC can detect all such violations.
Floating-Point Computations. We extended CBMC version
2.4 for the implementation of CBMC-GC. The publicly avail-
able source code of CBMC does not include support for
ﬂoating-point computations (only ﬁxed-point computations).
Therefore, CBMC-GC does not support this feature. How-
ever, the closed-source version of CBMC supports ﬂoating-
point arithmetic. Translating C programs with ﬂoating-
point computations into circuits is not a principal hurdle.
Pointer Arithmetic. At the moment, the support of pointer
arithmetic in CBMC-GC is limited: Only pointer arith-
metic involving addresses of variables and constants, e.g.,
*(array + 5), is supported.
Internally, we translate ac-
cesses to constant-size arrays, like array[i], into a nested
if -structure. We can therefore support accesses to arrays
of constant size (see examples given in Section 4). CBMC
itself supports full pointer arithmetic but produces circuits
for these operations which are equisatisﬁable (when trans-
lated to an SAT formula) to the actual computation, but
do not encode the computation directly (the circuits involve
nondeterminism which is resolved by the SAT solver). Eq-
uisatisﬁability of these circuits is suﬃcient for software ver-
iﬁcation but not suitable for STC. We plan to adapt the
corresponding circuit generation part of CBMC and, then,
will support full pointer arithmetic involving statements like
*(array + i) in a future release of CBMC-GC.
Data Types. CBMC-GC supports 16-, 32-, and 64-bits as
the size of the data type int. In future work, we plan to
make the size of integer variables completely customizable
(the restricted set of available sizes of the integer data type is
inherited from unmodiﬁed CBMC). Note that CBMC sup-
ports the C99 _Bool data type representing a single bit;
thus, using arrays of type _Bool one can already simulate
diﬀerently sized integer data types.
4. EFFICIENCY ANALYSIS
In order to test the performance of CBMC-GC, in partic-
ular the size of the obtained circuits, we performed several
experiments on code fragments of increasing complexity; the
results are reported in the rest of the paper.4
4.1 Experimental Setup
In the evaluation we focus on the complexity of the circuits
generated by CBMC-GC. The time required to compile C
code to a circuit ranges between a few seconds and a couple
of minutes, and is thus well within the range of modern
4CBMC-GC is available at http://www.forsyte.at/
software/cbmc-gc/.
compilers; furthermore, these computations are typically not
time critical, since they need to be done only once (and
oﬄine).
Besides the size of the resulting circuits, we also report
realistic estimates on the resources required to evaluate the
circuits in a framework for secure computation. We there-
fore run the circuits through the framework of [20], which
is one of the fastest known implementation of garbled cir-
cuits.
In a nutshell, the framework allows to test Secure
Two-Party Computation in a realistic fashion. Both parties
are implemented as individual Java programs running on
two computers, communicating via a network connection.
To this end, both parties are given the functionality to
be computed (i.e., the compiled CBMC-GC circuit). Subse-
quently, one party acts as server, whose purpose is to garble
the circuit and initiate the transmission of the keys rep-
resenting the inputs; the other party acts as client, which
receives and evaluates the garbled circuit. This process in-
volves two steps: Server and client ﬁrst exchange the nec-
essary keys corresponding to their inputs:
for the inputs
of the server, this can simply be done by transmitting the
keys representing the inputs to the client; however, trans-
mission of the keys representing the client inputs requires
running Oblivious Transfer. Once the client has access to
the required keys, the server starts garbling the circuit and
transmitting the garbled gates on the ﬂy to the client, who
performs the evaluation. This process assures the eﬃciency
of the overall circuit garbling and evaluation, as the entire
garbled circuit does not need to be stored in memory.
We repeat all experiments in two diﬀerent setups: in one
case the two machines reside in local proximity, thus commu-
nication passes a Local Area Network (LAN). In the second
case, the machines are located at two diﬀerent institutions,
requiring the communication to pass a Wide Area Network
(WAN). All timing measurements presented below thus in-
clude network latency. For the LAN experiments, we use
two desktop computers with two 3.2 GHz cores and 4 and 16
GB memory, respectively. On these machines we run Open-
SUSE 11.1 Linux and Java 1.6. For our WAN experiments
we used the 16 GB memory machine described above and
a four core 2.33 GHz machine with 16 GB memory running
Debian 5.0.9 Linux and Java 1.6.
Table 1 depicts our results. For each test case described
in the sequel, it shows the number of gates of the resulting
circuit, the number of gates other than XOR, and the execu-
tion time in milliseconds within the framework of [20] in the
LAN and WAN environments. In the measurements, we dif-
ferentiate between the above mentioned two steps, namely
the time it takes to prepare the inputs of the circuit (i.e.,
transmission of the necessary keys and running the OT pro-
tocol) and the processing time for garbling and evaluating
the circuit. We disregard other operations (such as setting
up the test environment), as they take constant time. We
can generally observe that the execution times in the WAN
are slightly higher due to the network latency.
4.2 Arithmetic Computations
Functions based on arithmetic operations belong to the
most basic set of operations that needs to be supported eﬃ-
ciently by a framework for secure computations. The ﬁrst set
of tests thus concerns programs that predominantly consist
of additions and multiplications of integers; we will always
use 32 bit integer values.
777Experiment
Addition
Multiplication
100 Arithmetic operations
1000 Arithmetic operations
2000 Arithmetic operations
3000 Arithmetic operations
3 × 3 matrix multiplication
5 × 5 matrix multiplication
8 × 8 matrix multiplication
Comparison
Median, bubble sort, 11 elements
Median, merge sort, 11 elements
Median, bubble sort, 21 elements
Median, merge sort, 21 elements
Median, bubble sort, 31 elements
Median, merge sort, 31 elements
Median, bubble sort, 41 elements
Median, bubble sort, 51 elements
Median, bubble sort, 61 elements
Median, bubble sort, 71 elements
Median, bubble sort, 81 elements
Median, bubble sort, 91 elements
Hamming distance, 160 bit
Hamming distance, 320 bit
Hamming distance, 800 bit
Hamming distance, 1600 bit
Interpreter, 1 gate
Interpreter, 2 gates
Interpreter, 5 gates
Interpreter, 10 gates
Interpreter, 15 gates
Interpreter, 50 gates
MBI(10, 19, 16)(cid:63)
MBI(10, 26, 16)
MBI(10, 35, 32)
MBI(50, 19, 16)
MBI(50, 26, 16)
MBI(50, 35, 32)
MBI(100, 19, 16)
MBI(100, 26, 16)
MBI(100, 35, 32)
Number of gates
Total
LAN experiment (ms)
WAN experiment (ms)
Non-XOR Preparation Evaluation Preparation Evaluation
161
6,223
76,621
765,561
1,531,601
2,298,441
170,875
793,751
3,257,345
234
18,030
111,339
67,710
541,669