identifiers are sent to the app’s backend, even if they are not directly
used for authentication purposes, which represents a significant
source of noise for this kind of analysis. This is potentially done
to aid in gathering metrics about apps, or to aid in advertising.
Finally, an interesting future work would be to study if the
authentication problems we have identified in this paper also affect
applications running in other mobile operating systems.
9 RELATED WORK
9.1 Authentication-Related Vulnerabilities
in Android
Zhang et al. explore the issue of uninstallation residue, where
uninstalling an app does not properly clean up all data and
references in the system, creating an opportunity for an attacker to
elevate their privileges and steal sensitive information [41]. While
the detection system we developed uses uninstallation of apps to
trigger a removal of app-private data, the vulnerabilities targeted
in this work and ours are very different. In fact our system detects
authentication vulnerabilities that involve the usage of both device
identifiers and files in public locations.
Exploitation and Mitigation of Authentication Schemes. . .
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
The paper entitled Mayhem in the Push Clouds [26] explores the
related issue of push messaging platforms, which are commonly
used by apps to communicate asynchronously with their backends.
The paper found that authentication tokens for these services are
often handled insecurely, especially when sent using Android’s
Intents. Our work focuses on what can happen when these tokens
are created using device-public information, or are in turn stored
as device-public information.
Chen et al., in OAuth Demystified for Mobile Application
Developers [7], explore the usage of OAuth-like mechanisms
for authentication. Their work included a manual study of 149
applications using OAuth, and found that 89 used it incorrectly.
Moreover, Wang et al. investigate OAuth misuse from a different
angle in their paper Explicating SDKs [39], which examines the
way applications use authentication and authorization SDKs from
companies such as Facebook and Microsoft. A related, but distinct,
vulnerability can occur in improperly implemented services using
OAuth, which implicitly trust responses from identity providers
without verification [40]. In contrast to web platforms, in mobile
apps, these responses originate from the user being authenticated,
meaning they can be tampered with, allowing an attacker to
authenticate as the victim without their private credentials.
As we do in our work, Liu et al. [27] studies how apps unsafely
use public storage. However, their work focuses on how the public
storage is used to store sensitive information (such as the user’s
contact list), whereas we focus on how the public storage is used
to store information that, together with device’s identifiers, is
used to authenticate with remote backends. Similarly, a work by
Bai et al. [2] studies how a specific class of apps (backup tools)
leaks information in publicly accessible files in the external storage.
However, the apps studied by this work require either root or shell
privileges, not obtainable by normal apps under the threat model
we considered (non-compromised OS).
Zuo et al. [42] developed a system, named AutoForge, to auto-
matically find authentication vulnerabilities revolving around user-
private information. Specifically, they focused on detecting apps’
backends vulnerable to password brute-forcing, leaked username
and password probing, and Facebook access-token hijacking. We
consider this work as complementary to ours. In fact, their work stud-
ies how apps’ backend behaves when probed with supposedly-secret
data, such as usernames, passwords, and Facebook authentication
tokens. Conversely, our work focuses on an entire class of authen-
tication schemes that do not rely on this supposedly-secret data.
A paper by Mulliner et al. [29] looks directly at the issue of
SMS-based one-time passwords. They explore various layers of the
problem, including issues of wireless interception, and smartphone
Trojans, similar to our “ID Leaker.” While their work was primarily
motivated by the use of mobile Transaction Authorization Numbers
in the banking industry, this same idea has also spread to most
areas of the mobile world that require verification of a user’s phone
number, as we explore in our study. SMS authentication is further
investigated by Schrittwieser et al. [34]. In this work, authors
manually analyze a selection of messaging apps, verifying their
security properties and finding different vulnerabilities in them.
The intrinsic weakness of SMS-based authentication has been
recently pointed out. For instance, security researchers have shown
that, by exploiting vulnerabilities of the SS7 network used by
telecom company to route phone calls and SMS, it is possible for
an attacker to intercept SMS and steal authentication codes [38].
Moreover, state-sponsored attackers could easily interfere with local
telecom companies to intercept these authentication messages [37].
For this reason, the latest security guidelines advise against the use
of SMS as a two-factor authentication method [31]. It is important
to notice that the vulnerabilities we found in popular messaging
apps (see Section 6.1) were not due to the usage of SMS content for
authentication, but a consequence of the usage of public accessible
files and device’s identifiers to authenticate their users.
9.2 Android Dynamic Analysis
Rastogi et al. proposed AppsPlayground [33], a dynamic analysis
framework aimed at maximizing code coverage of dynamic
analysis. Other works with similar goals are Brahmastra by
Bhoraskar et al. [3] and DynoDroid by Machiry et al. [28]. Our
vulnerability detection system utilizes similar techniques to
interact with apps, however, our goal is different, since we do not
aim to maximize code coverage but to trigger the authentication
mechanisms in a deterministic manner.
Different tools have been proposed to deterministically record
and playback input events on Android: RERAN [13], MOSAIC [24],
MobiPlay [32], and VALERA [25]. The usage of these tools as a
part of our dynamic-analysis based vulnerability detection system
constitutes an interesting future direction, since they could remove
non-deterministic behaviors which currently hinder our analysis.
However, in their current state, these tools do not completely solve
the problem. For instance, RERAN, MOSAIC, and MobiPlay do not
deterministically replay network traffic, whereas in our experiments
we determined that most of the non-deterministic behaviors are
due to discrepancies or delays in the network traffic between an
app and its backend. The approach of VALERA is able to deal with
network traffic, however, it cannot replay user’s interaction in
case of applications using customized rendering, like many of the
ones we detected as vulnerable (see Section 6.2). Unfortunately,
most of the apps we correctly detected as vulnerable actually use
customized interfaces and heavily interact with online backends.
10 CONCLUSION
In this paper, we explored the real-world vulnerabilities of apps
that authenticate their users using device-public information. Some
app authors appear to make the assumption that this information
is somehow hard to obtain or spoof.
To disprove this, first we developed an “identity-transfer” attack
that can be automatically applied to any apps relying on device-
public information to authenticate its users. Then, we developed a
system, based on dynamic analysis, that infers information about the
apps’ backend states to locate insecure authentication mechanisms,
and perform our attack against them. After analyzing 1,000 popular
apps from the Google Play market, we found 41 that were vulner-
able to our generic identity-transfer attack, including two major
messaging apps used with hundreds of millions of installations.
Finally we proposed and implemented solutions to the identified
problems, requiring minimal modifications to the Android
operating system and no modifications to the existing apps.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
A. Bianchi et al.
ACKNOWLEDGMENTS
We would like to thank our shepherd, Elias Athanasopoulos, for
his help and comments.
This material is based upon work supported by NSF under
Award No. CNS-1408632 and by Google’s “Security, Privacy and
Anti-Abuse Award.” Any opinions, findings, and conclusions or
recommendations expressed in this publication are those of the
author(s) and do not necessarily reflect the views of the NSF or
Google. This material is also based on research sponsored by
DARPA under agreement number FA8750-15-2-0084. The U.S.
Government is authorized to reproduce and distribute reprints
for Governmental purposes notwithstanding any copyright
notation thereon. The views and conclusions contained herein are
those of the authors and should not be interpreted as necessarily
representing the official policies or endorsements, either expressed
or implied, of DARPA or the U.S. Government.
REFERENCES
[1] Xposed Installer (framework). http://repo.xposed.info. (2015).
[2] Guangdong Bai, Jun Sun, Jianliang Wu, Quanqi Ye, Li Li, Jin Song Dong, and Shan-
qing Guo. 2015. All Your Sessions Are Belong to Us: Investigating Authenticator
Leakage through Backup Channels on Android. In Proceedings of the 20th IEEE
International Conference on Engineering of Complex Computer Systems (ICECCS).
[3] Ravi Bhoraskar, Seungyeop Han, Jinseong Jeon, Tanzirul Azim, Shuo Chen,
Jaeyeon Jung, Suman Nath, Rui Wang, and David Wetherall. 2014. Brahmastra:
Driving Apps to Test the Security of Third-Party Components. In Proceedings
of the 23rd USENIX Security Symposium (USENIX Security).
Implementation of the proposed defense mechanisms.
https://github.com/ucsb-seclab/android_device_public. (2017).
[4] Antonio Bianchi.
[5] Johannes Buchner. Image Hash library. https://github.com/JohannesBuchner
/imagehash. (2015).
[6] International Advertising Bureau. Ad Unit Guidelines. http://www.iab.net/gu
idelines/508676/508767/ad_unit. (2015).
[7] Eric Y Chen, Yutong Pei, Shuo Chen, Yuan Tian, Robert Kotcher, and Patrick Tague.
2014. OAuth Demystified for Mobile Application Developers. In Proceedings of the
21st ACM SIGSAC Conference on Computer and Communications Security (CCS).
[8] Xiao Cong. uiautomator. https://github.com/xiaocong/uiautomator. (2015).
[9] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti,
Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscation-Resilient
Privacy Leak Detection for Mobile Apps Through Differential Analysis. In
Proceedings of the 24th Network & Distributed System Security Symposium (NDSS).
[10] Soteris Demetriou, Whitney Merrill, Wei Yang, Aston Zhang, and Carl Gunter.
2016. Free for All! Assessing User Data Exposure to Advertising Libraries
on Android. In Proceedings of the 23rd Network & Distributed System Security
Symposium (NDSS).
[11] W. Enck, P. Gilbert, B.G. Chun, L.P. Cox, J. Jung, P. McDaniel, and A.N. Sheth.
2010. TaintDroid: An Information-Flow Tracking System for Realtime Privacy
Monitoring on Smartphones. In Proceedings of the 9th USENIX Conference on
Operating Systems Design and Implementation (OSDI).
[12] Chun Feng. 2008. Playing with shadows – exposing the black market for online
game password theft. In Virus Bulletin Conference.
[13] Lorenzo Gomez, Iulian Neamtiu, Tanzirul Azim, and Todd Millstein. 2013. RERAN:
Timing- and Touch-Sensitive Record and Replay for Android. In Proceedings of
the 35th International Conference on Software Engineering (ICSE).
[14] Google. AccountManager. https://developer.android.com/reference/android/
accounts/AccountManager.html. (2016).
[15] Google. Advertising ID. https://support.google.com/googleplay/android-dev
eloper/answer/6048248?hl=en. (2016).
[16] Google. Android Documentation: SmsManager. https://developer.android.co
m/reference/android/telephony/SmsManager.html. (2016).
[17] Google. Binder. https://developer.android.com/reference/android/os/Binder.ht
ml#getCallingUid(). (2016).
[18] Google. Google Play Developer Program Policies. https://play.google.com/ab
out/developer-content-policy.html. (2016).
[19] Google. Implementing In-app Billing. https://developer.android.com/google/p
lay/billing/billing_integrate.html. (2016).
[20] Google. Platform Versions. https://web.archive.org/web/20160131030000/https:
//developer.android.com/about/dashboards/index.html. (2016).
[21] Google. Testing Support Library. https://developer.android.com/tools/help/u
iautomator/. (2016).
[22] Google. Android O Behavior Changes. https://developer.android.com/previe
w/behavior-changes.html#privacy-all. (2017).
[23] Google. Using the External Storage. https://developer.android.com/guide/topi
cs/data/data-storage.html#filesExternal. (2017).
[24] Matthew Halpern, Yuhao Zhu, Ramesh Peri, and Vijay Janapa Reddi. 2015.
Mosaic: Cross-Platform User-Interaction Record and Replay for the Fragmented
Android Ecosystem. In Proceedings of the 2015 IEEE International Symposium on
Performance Analysis of Systems and Software (ISPASS).
[25] Yongjian Hu, Tanzirul Azim, and Iulian Neamtiu. 2015. Versatile yet Lightweight
Record-and-Replay for Android. In ACM SIGPLAN Notices, Vol. 50.
[26] Tongxin Li, Xiaoyong Zhou, Luyi Xing, Yeonjoon Lee, Muhammad Naveed,
XiaoFeng Wang, and Xinhui Han. 2014. Mayhem in the Push Clouds: Under-
standing and Mitigating Security Hazards in Mobile Push-Messaging Services. In
Proceedings of the 21st ACM SIGSAC Conference on Computer and Communications
Security (CCS).
[27] Xiangyu Liu, Zhe Zhou, Wenrui Diao, Zhou Li, and Kehuan Zhang. 2015. An
Empirical Study on Android for Saving Non-shared Data on Public Storage. In
Proceedings of the IFIP International Information Security Conference.
[28] Aravind Machiry, Rohan Tahiliani, and Mayur Naik. 2013. Dynodroid: An Input
Generation System for Android Apps. In Proceedings of the 9th Joint Meeting on
Foundations of Software Engineering (FSE).
[29] Collin Mulliner, Ravishankar Borgaonkar, Patrick Stewin, and Jean-Pierre Seifert.
2013. SMS-Based One-Time Passwords: Attacks and Defense. In Detection of
Intrusions and Malware, and Vulnerability Assessment (DIMVA).
[30] Collin Mulliner, William Robertson, and Engin Kirda. 2014. VirtualSwindle: An Au-
tomated Attack Against In-App Billing on Android. In Proceedings of the 9th ACM
Symposium on Information, Computer and Communications Security (Asia CCS).
[31] NIST. Digital Authentication Guideline. https://pages.nist.gov/800-63-3/sp
800-63b.html. (2016).
[32] Zhengrui Qin, Yutao Tang, Ed Novak, and Qun Li. 2016. MobiPlay: a Remote
Execution based Record-and-Replay Tool for Mobile Applications. In Proceedings
of the 38th International Conference on Software Engineering (ICSE).
[33] Vaibhav Rastogi, Yan Chen, and William Enck. 2013. AppsPlayground: Automatic
Security Analysis of Smartphone Applications. In Proceedings of the ACM
Conference on Data and Application Security and Privacy (CODASPY).
[34] Sebastian Schrittwieser, Peter Frühwirt, Peter Kieseberg, Manuel Leithner, Martin
Mulazzani, Markus Huber, and Edgar R Weippl. 2012. Guess Who’s Texting You?
Evaluating the Security of Smartphone Messaging Applications. In Proceedings
of the 19th Network & Distributed System Security Symposium (NDSS).
[35] Sooel Son, Daehyeok Kim, and Vitaly Shmatikov. 2016. What Mobile Ads Know
About Mobile Users. In Proceedings of the 22nd Annual Network & Distributed
System Security Symposium (NDSS).
Operating System Market Share Worldwide – May 2017.
http://gs.statcounter.com/os-market-share#monthly-201705-201705-bar. (2017).
[37] Telegram. Keep Calm and Send Telegrams! https://telegram.org/blog/15milli
[36] StatCounter.
on-reuters. (2016).
[38] Thomas Fox-Brewster. Watch As Hackers Hijack WhatsApp Accounts Via
Critical Telecoms Flaws. http://www.forbes.com/sites/thomasbrewster/2016/
06/01/whatsapp-telegram-ss7-hacks/#43e6fc1c745e. (2016).
[39] Rui Wang, Yuchen Zhou, Shuo Chen, Shaz Qadeer, David Evans, and Yuri
Gurevich. 2013. Explicating SDKs: Uncovering Assumptions Underlying Secure
Authentication and Authorization.. In Proceedings of the 22nd USENIX Security
Symposium (USENIX Security).
[40] Ronghai Yang, Wing Cheong Lau, and Tianyu Liu. Signing into One Billion
Mobile App Accounts Effortlessly with OAuth2.0. BlackHat Europe. (2016).
[41] Xiao Zhang, Kailiang Ying, Yousra Aafer, Zhenshen Qiu, and Wenliang Du. 2016.
Life after App Uninstallation: Are the Data Still Alive? Data Residue Attacks
on Android. In Proceedings of the 23rd Network & Distributed System Security
Symposium (NDSS).
[42] Chaoshun Zuo, Wubing Wang, Rui Wang, and Zhiqiang Lin. 2016. Automatic
Forgery of Cryptographically Consistent Messages to Identify Security Vul-
nerabilities in Mobile Services. In Proceedings of the 22nd Annual Network &
Distributed System Security Symposium (NDSS).