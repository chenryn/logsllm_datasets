(i) There is no mechanism for authenticating the mid-
dlebox. Even worse, the middlebox is completely trans-
parent to the server, and while users can inspect the cer-
tiﬁcate chain to check who signed the certiﬁcate, very
few do that or understand the diﬀerence. Moreover,
even if they do, they have no information about what
functions the middlebox performs.
(ii) The client has no guarantees beyond the ﬁrst hop.
While the connection to the middlebox is encrypted,
the client cannot verify that TLS is being used from
the middlebox to the server, whether additional middle-
boxes are present, or (depending on what application-
level authentication is used) whether the endpoint of
the session is even the intended server. The user needs
to completely trust the middlebox, which he did not
select and may not even know exists.
(iii) Middleboxes get full read/write access to the data
stream. Middleboxes can read and modify any data
transmitted and received over TLS sessions despite the
fact that many middleboxes only need selective access
to the data stream (Table 1).
Given these problems, it should not be a surprise that
users are concerned about (transparent) middleboxes.
One could even argue that using TLS with a middlebox
is worse than not using TLS at all [7], since clients and
servers are under the illusion that they have a secure
session, while some of the expected security properties
do not actually hold. In the next section, we propose a
protocol based on TLS that explicitly supports middle-
boxes and addresses the above problems.
2013. MULTI-CONTEXT TLS (mcTLS)
This section presents the design of multi-context TLS
(mcTLS), which augments TLS with the ability to se-
curely introduce trusted middleboxes. Middleboxes are
trusted in the sense that they have to be inserted explic-
itly by either the client or the server, at both endpoints’
consent. We ﬁrst summarize our design requirements,
then introduce the key ideas, and ﬁnally describe the
key components of the protocol. A more detailed de-
scription of mcTLS is available online [1].
3.1 Protocol Requirements
First, we require mcTLS to maintain the properties
provided by TLS (extended to apply to middleboxes):
R1: Entity Authentication Endpoints should be
able to authenticate each other and all middleboxes.
Similar to TLS usage today, we expect that clients will
authenticate all entities in the session, but servers may
prefer not to (e.g., to reduce overhead).
R2: Data Secrecy Only the endpoints and trusted
middleboxes can read or write the data.
R3: Data Integrity & Authentication All mem-
bers of the session must be able to detect in-ﬂight mod-
iﬁcations by unauthorized third parties, and endpoints
must be able to check whether the data was originated
by the other endpoint (vs. having been modiﬁed by a
trusted middlebox).
Second, the introduction of middleboxes brings with it
two entirely new requirements:
R4: Explicit Control & Visibility The protocol
must ensure that trusted middleboxes are added to the
session at the consent of both endpoints. Endpoints
must always be able to see all trusted middleboxes in
the session.
R5: Least Privilege In keeping with the principle
of least privilege [32], middleboxes should be given the
minimum level of access required to do their jobs [24,
19]. Middleboxes should have access only to the portion
of the data stream relevant to their function; if that
function does not require modifying the data, access
should be read-only.
Finally, our protocol should meet all ﬁve requirements
without substantial overhead, e.g., in terms of latency,
data usage, computation, connection state, burden on
users or administrators, etc.
3.2 Threat Model
A successfully negotiated mcTLS session meets the
above requirements in the face of computationally
bounded network attackers that can intercept, alter,
drop, or insert packets during any phase of the session.
Like TLS, mcTLS does not prevent denial of service.
We assume that all participants in an mcTLS ses-
sion execute the protocol correctly and do not share
information out-of-band. For example, the client could
share keys with a middlebox not approved by the server,
or middleboxes could collude to escalate their permis-
sions. We do not consider such attacks because no pro-
tocol (including TLS) can prevent a party from shar-
ing session keys out-of-band. Furthermore, such attacks
are unlikely since at least two colluding parties would
need to run a malicious mcTLS implementation. Major
browsers and Web servers (especially open source ones)
are unlikely to do this, since they would almost surely
be caught. Mobile apps using HTTP would need to
implement HTTP themselves instead of using the plat-
form’s (honest) HTTP library, which is unlikely. If it is
essential to know that parties have not shared keys with
unauthorized parties, some sort of remote attestation is
the most promising solution.
Finally, even when all parties are honest, adding more
entities to a session necessarily increases the attack sur-
face: a bug or misconﬁguration on any one could com-
promise the session. This risk is inherent in the prob-
lem, not any particular solution.
3.3 Design Overview
To satisfy the ﬁve design requirements, we add two
key features to TLS:
(1) Encryption Contexts (R2, R3, R5)
In TLS,
there are only two parties, so it makes no sense to
restrict one party’s access to part of the data. With
trusted middleboxes, however, the endpoints may wish
to limit a middlebox’s access to only a portion of the
data or grant it read-only access. To make this possible,
mcTLS introduces the notion of encryption contexts, or
contexts, to TLS. An encryption context is simply a
set of symmetric encryption and message authentica-
tion code (MAC) keys for controlling who can read and
write the data sent in that context (§3.4). Applications
can associate each context with a purpose (opaque to
mcTLS itself) and access permissions for each middle-
box. For instance, web browsers/servers could use one
context for HTTP headers and another for content. We
describe several strategies for using contexts in §4.2.
The
(2) Contributory Context Keys (R1, R4)
client and server each perform a key exchange with each
middlebox after verifying the middleboxes’ certiﬁcates
if they choose to (R1). Next, the endpoints each gen-
erate half of every context key and send to each mid-
dlebox the half-keys for the contexts to which it has ac-
cess, encrypted with the symmetric keys derived above.
The middlebox only gains access to a context if it re-
ceives both halves of the key, ensuring that the client
and server are both aware of each middlebox and agree
on its access permissions (R4). The server may relin-
quish this control to avoid extra computation if it wishes
(§3.6).
2023.4 The mcTLS Record Protocol
The TLS record protocol takes data from higher
layers (e.g., the application), breaks it into “manage-
able” blocks, optionally compresses, encrypts, and then
MAC-protects each block, and ﬁnally transmits the
blocks. mcTLS works much the same way, though each
mcTLS record contains only data associated with a sin-
gle context; we add a one byte context ID to the TLS
record format. Record sequence numbers are global
across contexts to ensure the correct ordering of all ap-
plication data at the client and server and to prevent
an adversary from deleting an entire record undetected.
Any of the standard encryption and MAC algorithms
supported by TLS can be used to protect records in
mcTLS. (So, details like the order of encryption and
MAC depend on the cipher suite; mcTLS makes no
changes here.)
Building on [24, 25], mcTLS manages access to each
context by controlling which middleboxes are given
which context keys. For each context, there are four
relevant parties, listed in decreasing order of privilege:
endpoints (client and server), writers (middleboxes with
write access to the context), readers (middleboxes with
read-only access to the context), and third parties (blan-
ket term for middleboxes with no access to the context,
attackers, and bit ﬂips during transmission). Changes
by writers are legal modiﬁcations and changes by read-
ers and third parties are illegal modiﬁcations. mcTLS
achieves the following three access control properties:
(1) Endpoints can limit read access to a context to
writers and readers only.
(2) Endpoints can detect legal and illegal
modiﬁcations.
(3) Writers can detect illegal modiﬁcations.
Controlling Read Access Each context has its own
encryption key (called Kreaders, described below). Pos-
session of this key constitutes read access, so mcTLS can
prevent a middlebox from reading a context by with-
holding that context’s key.
Controlling Write Access Write access is controlled
by limiting who can generate a valid MAC. mcTLS
takes the following “endpoint-writer-reader” approach
to MACs. Each mcTLS record carries three keyed
MACs, generated with keys Kendpoints (shared by end-
points), Kwriters (shared by endpoints and writers), and
Kreaders (shared by endpoints, writers, and readers).
Each context has its own Kwriters and Kreaders but
there is only one Kendpoints for the session since the
endpoints have access to all contexts.
Generating MACs
three MACs, one with each key.
• When an endpoint assembles a record, it includes
• When a writer modiﬁes a record, it generates new
MACs with Kwriters and Kreaders and simply for-
wards the original Kendpoints MAC.
• When a reader forwards a record, it leaves all
three MACs unmodiﬁed.
Checking MACs
• When an endpoint receives a record, it checks the
Kwriters MAC to conﬁrm that no illegal modiﬁca-
tions were made and it checks the Kendpoints MAC
to ﬁnd out if any legal modiﬁcations were made (if
the application cares).
• When a writer receives a record, it checks the
Kwriters MAC to verify that no illegal modiﬁca-
tions have been made.
• When a reader receives a record,
it uses the
Kreaders MAC to check if any third party modi-
ﬁcations have been made.
Note that with the endpoint-writer-reader MAC
scheme, readers cannot detect illegal changes made by
other readers. The problem is that a shared key cannot
be used by an entity to police other entities at the same
privilege level. Because all readers share Kreaders (so
that they can detect third party modiﬁcations), all read-
ers are also capable of generating valid Kreaders MACs.
This is only an issue when there are two or more read-
ers for a context and, in general, readers not detecting
reader modiﬁcations should not be a problem (reader
modiﬁcations are still detectable at the next writer
or endpoint). However, if needed, there are two op-
tions for ﬁxing this: (a) readers and writers/endpoints
share pairwise symmetric keys; writers/endpoints com-
pute and append a MAC for each reader, or (b) end-
points and writers append digital signatures rather than
MACs; unlike Kwriters MACs, readers can verify these
signatures. The beneﬁts seem insuﬃcient to justify the
additional overhead of (a) or (b), but they could be
implemented as optional modes negotiated during the
handshake.
3.5 The mcTLS Handshake Protocol
The mcTLS handshake is very similar to the TLS
handshake. We make two simpliﬁcations here for ease of
exposition: ﬁrst, although the principles of the mcTLS
handshake apply to many of the cipher suites available
in TLS, we describe the handshake using ephemeral
Diﬃe-Hellman with RSA signing keys because it is
straightforward to illustrate and common in practice.
Second, we describe the handshake with a single mid-
dlebox, but extending it to multiple middleboxes is
straightforward. Table 2 deﬁnes the notation we use
in this paper.
The purpose of the handshake is to:
• Allow the endpoints to agree on a cipher suite, a
set of encryption contexts, a list of middleboxes,
and permissions for those middleboxes.
• Allow the endpoints to authenticate each other
• Establish a shared symmetric key Kendpoints be-
and all of the middleboxes (if they choose to).
tween the endpoints.
203Notation
Meaning
−
E , DH
E
DH +
Entity E’s ephemeral Diﬃe-Hellman
public/private key pair
DHCombine(·,·) Combine Diﬃe-Hellman public and pri-
P K +
−
E , P K
E
(·)
−
E
SignP K
SE
P SE1-E2
SE1-E2
P RFS(·)
KE1-E2
K E
EncK (·)
M ACK (·)
AuthEncK (·)
H(·)
||
vate keys to produce a shared secret
Entity E’s
lic/private key pair (e.g., RSA)
Signature using E’s private key
long-term signing pub-
Secret known only to entity E
Pre-secret shared by entities E1 & E2
Secret shared between entities E1 & E2
Pseudorandom function keyed with se-
cret S as deﬁned in the TLS RFC [11]
Symmetric key shared by E1 and E2
Key material generated by entity E
Symmetric encryption using key K
Message authentication code with key K
Authenticated encryption with key K
Cryptographic hash
Concatenation
Table 2: Notation used in this paper.
• Establish a shared symmetric key Kwriters for each
context among all writers and a shared symmetric
1 for each context among all readers.
key Kreaders
Handshake Below we explain the steps of a mcTLS
handshake (shown in Figure 1), highlighting the dif-
ferences from TLS. Note that it has the same 2-RTT
“shape” as TLS.
1 Setup: Each party generates a (public) random
value and an ephemeral Diﬃe-Hellman key pair
(the middlebox generates two key pairs, one for
the client and one for the server). The endpoints