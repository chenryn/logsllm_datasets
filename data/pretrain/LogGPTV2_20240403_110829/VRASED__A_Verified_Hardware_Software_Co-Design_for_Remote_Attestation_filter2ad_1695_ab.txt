testation usage [31, 34]. On the other extreme, hardware-based
approaches require either i) P rv’s attestation functionality to
be housed entirely within dedicated hardware, e.g., Trusted
2.2 Formal Veriﬁcation, Model Checking &
Linear Temporal Logic
Computer-aided formal veriﬁcation typically involves three ba-
sic steps. First, the system of interest (e.g., hardware, software,
communication protocol) must be described using a formal
model, e.g., a Finite State Machine (FSM). Second, properties
that the model should satisfy must be formally speciﬁed. Third,
the system model must be checked against formally speciﬁed
properties to guarantee that the system retains such properties.
This checking can be achieved via either Theorem Proving or
Model Checking.
In Model Checking, properties are speciﬁed as formulae
using Temporal Logic and system models are represented as
FSMs. Hence, a system is represented by a triple (S, S0, T ),
where S is a ﬁnite set of states, S0 ⊆ S is the set of possible
initial states, and T ⊆ S × S is the transition relation set, i.e.,
it describes the set of states that can be reached in a single
step from each state. The use of Temporal Logic to specify
properties allows representation of expected system behavior
over time.
We apply the model checker NuSMV [17], which can be
USENIX Association
28th USENIX Security Symposium    1431
used to verify generic HW or SW models. For digital hardware
described at Register Transfer Level (RTL) – which is the
case in this work – conversion from Hardware Description
Language (HDL) to NuSMV model speciﬁcation is simple.
Furthermore, it can be automated [28]. This is because the
standard RTL design already relies on describing hardware as
an FSM.
In NuSMV, properties are speciﬁed in Linear Temporal
Logic (LTL), which is particularly useful for verifying se-
quential systems. This is because it extends common logic
statements with temporal clauses. In addition to propositional
connectives, such as conjunction (∧), disjunction (∨), negation
(¬), and implication (→), LTL includes temporal connectives,
thus enabling sequential reasoning. We are interested in the
following temporal connectives:
• Xφ – neXt φ: holds if φ is true at the next system state.
• Fφ – Future φ: holds if there exists a future state where φ
is true.
• Gφ – Globally φ: holds if for all future states φ is true.
• φ U ψ – φ Until ψ: holds if there is a future state where ψ
holds and φ holds for all states prior to that.
This set of temporal connectives combined with propositional
connectives (with their usual meanings) allows us to specify
powerful rules. NuSMV works by checking LTL speciﬁcations
against the system FSM for all reachable states in such FSM.
In particular, all VRASED’s desired security sub-properties
are speciﬁed using LTL and veriﬁed by NuSMV. Finally, a
theorem prover [19] is used to show (via LTL equivalences)
that the veriﬁed sub-properties imply end-to-end deﬁnitions of
RA soundness and security.
3 Overview of VRASED
VRASED is composed of a HW module (HW-Mod) and a SW
implementation (SW-Att) of P rv’s behavior according to the
RA protocol. HW-Mod enforces access control to K in addition
to secure and atomic execution of SW-Att (these properties
are discussed in detail below). HW-Mod is designed with min-
imality in mind. The veriﬁed FSMs contain a minimal state
space, which keeps hardware cost low. SW-Att is responsible
for computing an attestation report. As VRASED’s security
properties are jointly enforced by HW-Mod and SW-Att, both
must be veriﬁed to ensure that the overall design conforms to
the system speciﬁcation.
3.1 Adversarial Capabilities & Veriﬁcation Ax-
ioms
We consider an adversary, A, that can control the entire soft-
ware state, code, and data of P rv. A can modify any writable
memory and read any memory that is not explicitly protected
by access control rules, i.e., it can read anything (including
secrets) that is not explicitly protected by HW-Mod. It can also
re-locate malware from one memory segment to another, in
order to hide it from being detected. A may also have full con-
trol over all Direct Memory Access (DMA) controllers on P rv.
DMA allows a hardware controller to directly access main
memory (e.g., RAM, ﬂash or ROM) without going through the
CPU.
We focus on attestation functionality of P rv; veriﬁcation of
the entire MCU architecture is beyond the scope of this paper.
Therefore, we assume the MCU architecture strictly adheres to,
and correctly implements, its speciﬁcations. In particular, our
veriﬁcation approach relies on the following simple axioms:
• A1 - Program Counter: The program counter (PC) al-
ways contains the address of the instruction being exe-
cuted in a given cycle.
• A2 - Memory Address: Whenever memory is read or
written, a data-address signal (Daddr) contains the address
of the corresponding memory location. For a read access,
a data read-enable bit (Ren) must be set, and for a write
access, a data write-enable bit (Wen) must be set.
• A3 - DMA: Whenever a DMA controller attempts to
access main system memory, a DMA-address signal
(DMAaddr) reﬂects the address of the memory location
being accessed and a DMA-enable bit (DMAen) must be
set. DMA can not access memory when DMAen is off
(logical zero).
• A4 - MCU reset: At the end of a successful reset routine,
all registers (including PC) are set to zero before resuming
normal software execution ﬂow. Resets are handled by
the MCU in hardware; thus, reset handling routine can
not be modiﬁed.
• A5 - Interrupts: When interrupts happen, the correspond-
ing irq signal is set.
Remark: Note that Axioms A1 to A5 are satisﬁed by the Open-
MSP430 design.
SW-Att uses the HACL* [52] HMAC-SHA256 function
which is implemented and veriﬁed in F*1. F* can be auto-
matically translated to C and the proof of correctness for
the translation is provided in [41]. However, even though ef-
forts have been made to build formally veriﬁed C compilers
(CompCert [33] is the most prominent example), there are
currently no veriﬁed compilers targeting lower-end MCUs,
such as MSP430. Hence, we assume that the standard compiler
can be trusted to semantically preserve its expected behavior,
especially with respect to the following:
• A6 - Callee-Saves-Register: Any register touched in a
function is cleaned by default when the function returns.
• A7 - Semantic Preservation: Functional correctness of
the veriﬁed HMAC implementation in C, when converted
to assembly, is semantically preserved.
Remark: Axioms A6 and A7 reﬂect the corresponding compiler
speciﬁcation (e.g., msp430-gcc).
Physical hardware attacks are out of scope in this paper.
1https://www.fstar-lang.org/
1432    28th USENIX Security Symposium
USENIX Association
USENIX Association
28th USENIX Security Symposium    1433
1434    28th USENIX Security Symposium
USENIX Association
generated SMV description for the conjunction is proved to
simultaneously hold for all speciﬁcations. We also deﬁne end-
to-end soundness and security goals which are derived from
the veriﬁed sub-properties (See Appendix A for the proof).
4.1 Notation
To facilitate generic LTL speciﬁcations that represent
VRASED’s architecture (see Figure 3) we use the following:
• ARmin and ARmax: ﬁrst and last physical addresses of the
memory region to be attested;
• CRmin and CRmax: physical addresses of ﬁrst and last in-
structions of SW-Att in ROM;
• Kmin and Kmax: ﬁrst and last physical addresses of the ROM
region where K is stored;
• X Smin and X Smax: ﬁrst and last physical addresses of the
RAM region reserved for SW-Att computation;
• MACaddr: ﬁxed address that stores the result of SW-Att
computation (HMAC);
• MACsize: size of HMAC result;
Table 1 uses the above deﬁnitions and summarizes the notation
used in our LTL speciﬁcations throughout the rest of this paper.
To simplify speciﬁcation of deﬁned security properties, we
use [A, B] to denote a contiguous memory region between A
and B. Therefore, the following equivalence holds:
C ∈ [A, B] ⇔ (C ≤ B ∧C ≥ A)
(1)
For example, expression PC ∈ CR holds when the current
value of PC signal is within CRmin and CRmax, meaning
that the MCU is currently executing an instruction in CR,
i.e, a SW-Att instruction. This is because in the notation
introduced above: PC ∈ CR ⇔ PC ∈ [CRmin,CRmax] ⇔ (PC ≤
CRmax ∧ PC ≥ CRmin).
FSM Representation. As discussed in Section 3, HW-Mod sub-
modules are represented as FSMs that are veriﬁed to hold for
LTL speciﬁcations. These FSMs correspond to the Verilog
hardware design of HW-Mod sub-modules. The FSMs are im-
plemented as Mealy machines, where output changes at any
time as a function of both the current state and current input val-
ues4. Each FSM has as inputs a subset of the following signals
and wires: {PC, irq, Ren,Wen, Daddr, DMAen, DMAaddr}.
Each FSM has only one output, reset, that indicates whether
any security property was violated. For the sake of presen-
tation, we do not explicitly represent the value of the reset
output for each state. Instead, we deﬁne the following implicit
representation:
1. reset output is 1 whenever an FSM transitions to the Reset
state;
2. reset output remains 1 until a transition leaving the Reset
state is triggered;
4This is in contrast with Moore machines where the output is deﬁned solely
based on the current state.
Notation
Description
Table 1: Notation summary
PC
Ren
Wen
Daddr
DMAen
Current Program Counter value
Signal that indicates if the MCU is reading from memory (1-bit)
Signal that indicates if the MCU is writing to memory (1-bit)
Address for an MCU memory access
Signal that indicates if DMA is currently enabled (1-bit)
DMAaddr
Memory address being accessed by DMA, if any
irq
CR
KR
X S
MR
AR
reset
Signal that indicates if and interrupt is occurring (1-bit)
(Code ROM) Memory region where SW-Att is stored: CR = [CRmin,CRmax]
(K ROM) Memory region where K is stored: KR = [Kmin, Kmax]
(eXclusive Stack) secure RAM region reserved for SW-Att computations: X S =
[X Smin, X Smax]
(MAC RAM) RAM region in which SW-Att computation result is written: MR =
[MACaddr , MACaddr + MACsize − 1]. The same region is also used to pass the attestation chal-
lenge as input to SW-Att
(Attested Region) Memory region to be attested. Can be ﬁxed/predeﬁned or speciﬁed in an
authenticated request from V rf: AR = [ARmin, ARmax]
A 1-bit signal that reboots the MCU when set to logic 1
A1, A2, ..., A7
Veriﬁcation axioms (outlined in section 3.1)
P1, P2, ..., P7
Properties required for secure RA (outlined in section 3.2)
3. reset output is 0 in all other states.
4.2 Formalizing RA Soundness and Security
We now deﬁne the notions of soundness and security. Intu-
itively, RA soundness corresponds to computing an integrity
ensuring function over memory at time t. Our integrity ensur-
ing function is an HMAC computed on memory AR with a
one-time key derived from K and C hal. Since SW-Att com-
putation is not instantaneous, RA soundness must ensure that
attested memory does not change during computation of the
HMAC. This is the notion of temporal consistency in remote
attestation [14]. In other words, the result of SW-Att call must
reﬂect the entire state of the attested memory at the time when
SW-Att is called. This notion is captured in LTL by Deﬁni-
tion 1.
Deﬁnition 1. End-to-end deﬁnition for soundness of RA computation
G : { PC = CRmin ∧ AR = M ∧ MR = C hal ∧ [(¬reset) U (PC = CRmax )] →
F : [PC = CRmax ∧ MR = HMAC(KDF(K , C hal), M)] }
where M is any AR value and KDF is a secure key derivation function.
In Deﬁnition 1, PC = CRmin captures the time when SW-Att
is called (execution of its ﬁrst instruction). M and C hal are
the values of AR and MR. From this pre-condition, Deﬁni-
tion 1 asserts that there is a time in the future when SW-Att
computation ﬁnishes and, at that time, MR stores the result of
HMAC(KDF(K , C hal), M). Note that, to satisfy Deﬁnition 1,
C hal and M in the resulting HMAC must correspond to the
values in AR and MR, respectively, when SW-Att was called.
RA security is deﬁned using the security game in Figure 6.
USENIX Association
28th USENIX Security Symposium    1435
It models an adversary A (that is a probabilistic polynomial
time, ppt, machine) that has full control of the software state
of P rv (as the one described in Section 3.1). It can modify
AR at will and call SW-Att a polynomial number of times in
the security parameter (K and C hal bit-lengths). However, A
can not modify SW-Att code, which is stored in immutable
memory. The game assumes that A does not have direct access
to K , and only learns C hal after it receives from V rf as part
of the attestation request.
1
2
3
4
5
6
7
void Hacl_HMAC_SHA2_256_hmac_entry ( ) {
u i n t 8 _ t key [ 6 4 ] = { 0 } ;
memcpy ( key ,
h a c l _ h m a c ( ( u i n t 8 _ t * ) key ,
( u i n t 8 _ t * ) KEY_ADDR, 6 4 ) ;
( u i n t 8 _ t * ) key ,
( u i n t 3 2 _ t ) 6 4 ,
( u i n t 8 _ t * )
CHALL_ADDR,
( u i n t 3 2 _ t ) 3 2 ) ;
h a c l _ h m a c ( ( u i n t 8 _ t * ) MAC_ADDR,
( u i n t 8 _ t * ) key ,
( u i n t 3 2 _ t ) 3 2 ,
( u i n t 8 _ t * )
ATTEST_DATA_ADDR,
( u i n t 3 2 _ t ) ATTEST_SIZE ) ;
return ( ) ;
}
Figure 7: SW-Att C Implementation
Deﬁnition 2.
2.1 RA Security Game (RA-game):
Assumptions:
- SW-Att is immutable, and K is not known to A
- l is the security parameter and |K | = |C hal| = |MR| = l
- AR(t) denotes the content in AR at time t
- A can modify AR and MR at will; however, it loses its ability to modify them
while SW-Att is running