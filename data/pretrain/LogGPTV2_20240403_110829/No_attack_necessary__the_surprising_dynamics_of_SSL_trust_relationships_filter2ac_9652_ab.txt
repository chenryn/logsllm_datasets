unexpected certiﬁcate for *.google.com [24].
Figure 2 shows the corresponding section of the trust
graph for this incident. Google issues certiﬁcates for its
domains using their own intermediate CA, which is signed
by the Equifax Root CA. Our data set includes 33 valid
certiﬁcates for *.google.com, all of them signed by one of
their own intermediate CAs.3 In the T¨urktrust case, a new
*.google.com certiﬁcate joined the global trust graph as a
child of an accidentally created intermediate certiﬁcate. This
incident stands out as it did not involve an actual attack on
the CA but rather an unfortunate mistake. Ultimately, this
scenario is indistinguishable from attacking (or coercing) the
CA to issue a malicious intermediate certiﬁcate.
3.2.2 Trustwave
In 2012, TrustWave issued an intermediate CA certiﬁcate
to one of their customers who then deployed it to trans-
parently decrypt user traﬃc by generating valid end-host
certiﬁcates on the ﬂy [31]. The public only became aware
of this incident when TrustWave, on their own initiative,
revoked the certiﬁcate and announced to refrain from issuing
such certiﬁcates to their customers in the future.
Conceptually, this incident resembles the T¨urktrust case:
a legitimate root issues a new intermediate CA certiﬁcate
for MITM attacks.
3Speciﬁc Google services, such as mail.google.com and
upload.video.google.com also use certiﬁcates from other
issuers.
UTN-USERFirst-Hardware
GeoTrust Global CA
login.yahoo.com
www.google.com
login.skype.com
Figure 3: Some certiﬁcates from the Comodo attack.
3.2.3 Comodo
In 2011, hackers compromised the Comodo CA and gen-
erated 9 illegitimate certiﬁcates for well-known web sites,
including Google, Yahoo, Mozilla, Skype and Microsoft [9].
Figure 3 shows the corresponding section of the trust graph.
The certiﬁcates were issued directly from one of the root
CAs belonging to Comodo. The attackers created certiﬁcates
for the common names mail.google.com, www.google.com,
login.yahoo.com (3x), addons.mozilla.com, login.live.
com and globaltrustee. However, only one certiﬁcate for
login.yahoo.com was encountered in actual use.
In the
Comodo case, the attackers managed to attack a root CA
itself, but were not interested or not able to create new in-
termediate CA certiﬁcates, forcing them to target speciﬁc
domains.
3.2.4 DigiNotar
In early 2011, a hacker compromised the DigiNotar CA
and issued valid certiﬁcates for a diverse set of sites, includ-
ing *.google.com, *.skype.com, and *.*.com, as well as
several intermediate CA certiﬁcates carrying the names of
well-known roots [34]. The *.google.com certiﬁcate was
used to conduct a MITM attack against Internet users in
Iran accessing Google services such as GMail. Conceptually,
the DigiNotar attack combines the aforementioned incidents:
the attackers created both new CA and endhost certiﬁcates
through an existing CA. From the perspective of the global
trust graph, this attack inserts new certiﬁcates into the graph,
with labels matching existing certiﬁcates already associated
with diﬀerent roots.
3.2.5 RapidSSL and Flame
This subsection presents two attacks that are very diﬀerent
from the previously mentioned ones. In 2009, a hacker group
performed a proof of concept attack on RapidSSL to demon-
strate the problems of using MD5 as a signature algorithm for
certiﬁcates. The group used a chosen-preﬁx collision attack
to create a rogue intermediate CA certiﬁcate that appeared
as signed by the RapidSSL CA. They performed this task by
creating two certiﬁcates with the same MD5 hash value [37].
One of them was a normal end-host certiﬁcate, which was
submitted and signed by RapidSSL. The second one was a
CA certiﬁcate (see Figure 4). Due to the fact that both cer-
tiﬁcates shared the same hash, the signature of the end-host
certiﬁcate was also valid for the rogue CA certiﬁcate. Such a
hash collision attack exploits the fact that only the hash of a
certiﬁcate is signed. If an attacker can create an independent
certiﬁcate matching a signed hash, that certiﬁcate will also
validate correctly against the same root. The Flame malware
also used this type of attack. Today this type of attack is
no longer practical since modern browsers stopped accepting
MD5 hashes. The weakest hash algorithm in use today is
RapidSSL 
CA
Equifax
Same Hash
…shirt.phreedom.org
Figure 4: RapidSSL attack.
SHA-1, which the community still considers safe against col-
lision attacks. From the perspective of the trust graph, these
attacks exhibit diﬀerent properties than the former incidents.
While once again new certiﬁcates join the graph, in this case
they come with hash values that match existing ones.
3.2.6 Faults in CA Processes
Numerous incidents exploited deﬁciencies in a CA’s in-
ternal processes. For example, Michael Zusman created a
certiﬁcate for live.com by registering the email address
sslcertificates@live.com. Thawte, a VeriSign interme-
diate CA, accepted this address as proof of ownership [41,
13]. Another attack relied on including an encoded NUL
character (ø) in a certiﬁcate’s domain name. When using
a name like bank.comøevil.com, some CAs only validated
that the registering user owns evil.com. However, some
browsers (e.g., Firefox [30]) ignored everything following the
NUL character and accepted the certiﬁcate for bank.com [21,
25]. This bug has been ﬁxed on both browser and CA side.
In the context of the trust graph, such cases look similar to
the T¨urktrust incident, where the new certiﬁcate relates to
already existing domains.
3.3 Remedies
One of the main problems with the current trust ecosystem
originates from CAs, including intermediates, who have the
ability to issue certiﬁcates for any domain.
In principle,
the X.509 name constraint extension should prevent this by
limiting intermediates down the chain to issuing certiﬁcates
for restricted domains only (e.g., subdomains their customers
own). However, at the moment the use of name constraints
in certiﬁcates is still extremely rare. The main reason boils
down to lack of support in current browsers; Safari and iOS
in particular do not yet honor this extension.
Extended validation (EV) certiﬁcates represent another
eﬀort to increase trust in the CA system. However, their
actual beneﬁt remains unclear because users often cannot dif-
ferentiate the certiﬁcate types. Furthermore, SSL rebinding
attacks [38, 20, 35, 5] can circumvent EV protection. Fi-
nally, EV certiﬁcates only indicate that the CA uses stricter
standards when checking a customer’s identity—which is
of no use if the CA has been compromised. For example,
the compromised DigiNotar CA was approved for EV by
Mozilla [28]; T¨urktrust received Mozilla approval for EV just
before their incident occurred [29].
4. STRUCTURAL EXPLORATION
We continue with an analysis of the trust graph to identify
benign changes that structurally resemble attacks, and thus
182
might be mistaken for malicious activity in the absence of
any further context. For this discussion we assume that our
data does not contain any MITM attacks. We speciﬁcally
searched for the fraudulent certiﬁcates discussed in §3.2 (e.g.,
the intermediates that T¨urktrust accidentally issued), yet
did not ﬁnd any of them in our data set. More generally,
the absolute number of Internet-wide MITM attacks is pre-
sumably small and dwarfed by the total number of sessions
included in our data set, which renders the chance of having
recorded an actual attack negligible. In addition, we manu-
ally investigated all the speciﬁc cases we report and indeed
deem them benign.
4.1 Terminology
We deﬁne the ﬁrst appearance of a new certiﬁcate as a
change of the trust graph. Two or more certiﬁcates match
if they share at least one label. The neighborhood of a new
certiﬁcate constitutes the set of certiﬁcates that it matches.
When a new certiﬁcate appears for the ﬁrst time, we classify
the nature of the change by computing a change vector of
its key features, including:
1. Size of the neighborhood
2. Number of labels in the new certiﬁcate
3. Total number of unique intermediates across all existing
certiﬁcates
4. Percentage of matching intermediates (intermediate
weight I)
5. Number of unique roots for the existing certiﬁcates
6. Percentage of matching roots (root weight R)
7. Time diﬀerence between when a certiﬁcate became
valid and when we ﬁrst saw it
8. Minimum, maximum, and average overlap between the
validity periods of new and existing certiﬁcates
9. Minimum, maximum, and average diﬀerence when we
ﬁrst encountered the new and the existing certiﬁcates
10. Number of diﬀerent keys among new and existing cer-
tiﬁcates.
We leverage these vectors for grouping changes that exhibit
similar characteristics, and for identifying examples to present
in our discussion. While the remainder of this paper focuses
on individual observations, we note that for features that we
do not discuss further, we were not able to discern stable
patterns that might indicate certiﬁcate attacks.
The two most important metrics concern the intermediate
weight I and the root weight R. For a given certiﬁcate,
I represents the percentage of its neighborhood with the
same issuer. For example, I = 1 means that the issuer of
the new certiﬁcate matches all existing intermediates, and
I = 0.5 that the issuer of the new certiﬁcate matches half the
certiﬁcates in the neighborhood. We deﬁne R correspondingly
to represent the percentage of a certiﬁcate’s neighborhood
with the same root CA.
4.2 Data Overview
At the beginning of January 2013, we have seen 741,424
certiﬁcates in total, out of which 489,551 are still valid and
thus part of the trust graph at this time. Through January,
we encounter 80,466 unique new certiﬁcates, of which 54,321
validate against the Mozilla root store; we examine the latter
subset in the following. 40,885 of the those changes do not
aﬀect any other certiﬁcate, i.e., the addition either applies
to labels that we have not seen at all yet, or the existing
certiﬁcates have already expired. The certiﬁcates that we
encounter for the ﬁrst time lead back to 337 diﬀerent issuers
at 80 diﬀerent roots.
Looking at the new certiﬁcates matching existing ones, we
see that most exhibit a small neighborhood, with 9,400 of
them matching exactly one certiﬁcate in the graph. Most
of those certiﬁcates replace a certiﬁcate that expires soon.
However, we also ﬁnd certiﬁcates with rather large neighbor-
hoods: 1,382 larger than 20, and 224 larger than 100. As
we will see in the next sections, these often belong to CDNs
and big hosting providers. The certiﬁcate with the most
extensive neighborhood matches 657 existing certiﬁcates and
belongs to Google.
4.3
Inconsistent Neighborhoods
In the cases discussed in §3.2, the malicious certiﬁcates
were issued by a diﬀerent CA that had not signed the benign
certiﬁcate in the past. Conceptually, this kind of attack splits
into two cases: either a previously unknown intermediate
CA signs the malicious certiﬁcate (as in the T¨urktrust and
Trustwave incidents), or an already established CA (e.g.,
Comodo) does. In both cases we see a “hand-over” from an
existing set of CAs to one not previously seen for the domain.
In theory, a hand-over happens either when a certiﬁcate
changes its intermediate but remains rooted in the same
sub-tree in the trust graph, or when a certiﬁcate migrates
to a new root. In all previously examined attacks, the latter
scenario occurred.
To ﬁnd CA hand-overs, we examine issuers changing be-
tween certiﬁcates that are valid for the same domain, using
the previously introduced metrics I and R. When looking at
certiﬁcates that joined the graph in January, we ﬁnd 3,051
for I = 0, 8.6K for I = 1, and 1,766 for 0 < I <1. Hence,
a large number of certiﬁcates share the same issuer as pre-
vious certiﬁcates, but there exists also a signiﬁcant number
where this is not the case. We ﬁnd a similar situation for R:
2,507 for R = 0, 9,191 certiﬁcates for R = 1, and 1,738 for
0 < R <1 for.
4.3.1 Large Neighborhoods
As a ﬁrst step, we examine new certiﬁcates that join the
trust graph, have a neighborhood of more than 20 certiﬁcates,
and trace back to a diﬀerent root than their neighborhood
(R = 0). We ﬁnd several certiﬁcates where the neighborhood
contains as many as 13 diﬀerent roots. Those all belong
to www.yottaa.net, a web-optimization CDN, whose certiﬁ-
cates cover numerous diﬀerent hostnames (30-34) and have
a neighborhood size of 54-57.
In addition to the servers
provided by Yottaa, some of their clients also use their own
servers where they host certiﬁcates for domains which also
occur in Yottaa’s certiﬁcates.
For certiﬁcates with slightly fewer roots (more than 6) we
encounter a larger variety of CDNs. For example, Incapsula
uses a number of certiﬁcates with hostnames that we can trace
back to 9 roots, while we ﬁnd 7 roots for Cloudﬂare. Yottaa,
Incapsula, and Cloudﬂare, participate with 38, 132, and 2.8K
certiﬁcate domains in the Alexa top-million list, respectively.
This list contains several attractive targets for MITM attacks.
Consider foursquare.com, for example, whose CA structure
we show in Figure 5. When the Cloudﬂare certiﬁcates joined
the trust graph (at the end of December and the beginning of
January) we already knew other certiﬁcates for *.foursquare.
com issued under two diﬀerent roots. A human observer may
183
DigiCert Root
GlobalSign Root
GTE CyberTrust Root
Old certi(cid:32)cates
New certi(cid:32)cate
DigiCert
Akamai
GlobalSign
VeriSign Root
VeriSign
Intermediate
..ptlogin2.qq.com
GeoTrust Global
GeoTrust SSL
*.foursquare.com
*.foursquare.com
*.foursquare.com
..ptlogin2.tenpay.com ..ptlogin2.qq.com
..ptlogin2.tenpay.com
Figure 5: *.foursquare.com with new Cloudﬂare cert.
Figure 6: qq.com trust graph change.
conclude that this represents a benign change by having
learned that Cloudﬂare operates as CDN and tends to use
GlobalSign as CA. However, when looking at the change
without such context, it may raise suspicion to see a new
certiﬁcate from an unrelated root.
Varagesale represents another case that demonstrates this
challenge: varagesale.com used Cloudﬂare as CDN provider
until mid-January, when we observed a new SSL certiﬁcate
for the same domain. At this time, we have already recorded
30 other certiﬁcates for varagesale.com, each of which is
used by Cloudﬂare, issued by GlobalSign, remains valid, and
sometimes has been seen months ago already. However, the
new certiﬁcate was issued by a diﬀerent root (Comodo) than
all the other 30. In cases like this we deem it impossible
to separate benign changes from attacks without further
context.
Note that Akamai, a well-known CDN, operates diﬀerently.
In our January change set, we see 104 new certiﬁcates that
trace back to Akamai. Sites using Akamai can either choose
if they want to host content on their own domain, or use
one of a small set of Akamai domain names. When sites
use their own, in contrast to the CDNs mentioned above,
Akamai seems to use an individual SSL certiﬁcate for each
of the sites. Diﬀerent CAs issue these certiﬁcates, with
some of them signed directly by the Akamai intermediate
CA and the others by either VeriSign or Comodo. Akamai
also serves a large number of its customers via a single SSL
certiﬁcate valid for a248.e.akamai.net, *.akamaihd.net,
and *.akamaihd-staging.net.
Incidentally, we see this
certiﬁcate used by the largest number of unique IP addresses
(68,794). It is apparently used when customers choose to
only embed elements into their homepage. Facebook, for
example, uses this approach to serve their proﬁle pictures
via Akamai. Amazon Cloudfront appears to use a similar
strategy, as we observe 9,667 IP addresses serving a single
certiﬁcate.
Small Neighborhoods
4.3.2
As we generally ﬁnd CDNs responsible for a signiﬁcant
share of the non-obvious eﬀects, we now speciﬁcally examine
changes for domains that are not using any CDNs, in the
hope to ﬁnd more regularity there. However, our analysis
quickly reveals several examples that might appear malicious
to an observer. Figure 6 shows an example involving two
high-proﬁle domains: qq.com, a popular instant messaging
service; and tenpay.com, a payment service. Both are based
in China and owned by the same parent company. According
to Alexa, qq.com ranks as the 8th most popular site on the
Internet (tenpay ranks 774th). At the end of January, we
see a single new certiﬁcate showing up that is valid for both
domains,4 signed by a not-previously seen CA. At this time
the original certiﬁcates for both sites were well established
(we ﬁrst saw them in February and March 2012) and still
valid until mid-December. One could easily mistake this
change for an attack. Even if one knew that the names listed
in the certiﬁcate belong to the same parent company, an
adversary could just as well have deliberately choosen them
to appear more legitimate. The only way to be sure the new
certiﬁcate is indeed benign is to ask the domain.
A similar change occurs for the domain *.americanexpress.
com—likewise a site that makes an interesting target for at-
tackers. Akamai’s intermediate CA issued the established
certiﬁcate for this site; we saw it ﬁrst in May 2012, only
hours after its validity period starts, and it remained valid
until May 2013. However, on January 23, we see a new,
VeriSign-signed wildcard certiﬁcate for the same domain,
with a validity period beginning on the 13th of December
2012. No other VeriSign certiﬁcate appears in our data set
for that domain. Both certiﬁcates were then used simultane-
ously for one more month; after that, the Akamai certiﬁcate
was apparently phased out.
When going through the list of domains for which we
see new certiﬁcates in January, we ﬁnd a number of fur-
ther changes that likewise exhibit similarities with recent
attacks. For example, several other banking sites switch
their certiﬁcate issuers (including the Bank of India, the
ﬁrst Montana Bank, the Mechanics Bank and the Danish
Arbejdernes Landsbank). Only for some of them the old
certiﬁcates expire around the saem time.
Furthermore, some sites change from well-known to smaller
CAs. For example, iesabroad.com exhibits a newer certiﬁ-
cate from AlphaSSL in addition to several active certiﬁcates
issued by RapidSSL. We see one of the old certiﬁcates in
use along with the new AlphaSSL certiﬁcate. To an outsider
observer this change might look similar to a MITM attack
involving a small rogue CA certiﬁcate.
4.3.3 Country Changes
To identify malicious CA changes, one concrete recommen-
dation involves monitoring their countries [36], under the
assumption that a site rarely switches to a CA in a diﬀerent
country for benign reasons. However, when examining our
data in this regard, we see precisely this scenario occurring
for 1.3K changes in January: the country code of the CA that
4It is also valid for other domains that seem to belong to
the same parent company as well; they use the same DNS
servers. However, they have diﬀerent company names and
addresses in the whois service.
184
Old certi(cid:26)cate
New certi(cid:26)cate
Entrust
Digital Signature Trust
Entrust
Identrust
…delaware.gov
…delaware.gov
Figure 7: delaware.gov trust change with new intermediate
CA certiﬁcate. New certiﬁcates marked.
issues the new certiﬁcate is not already part of the existing
neighborhood. When looking at root certiﬁcates, this change
is even more pronounced: 1.7K changes trace back to a root
in a diﬀerent country.
A number of speciﬁc cases might look particularly surpris-
ing to a human observer. For example, 46 certiﬁcates switch
to a root located in Israel, including the Nova Scotia Depart-
ment of Education (*.ednet.ns.ca), and www.privacybox.
de, a German service for anonymously exchanging messages
between journalists. We assume that these changes rep-
resent benign business decisions to migrate certiﬁcates to
StartCOM, an CA based in Israel.
Furthermore, www.zekur.nl changes from an US-based
root to Bermuda (QuoVadis) according to its country code.
We assume that many customers are not even aware in