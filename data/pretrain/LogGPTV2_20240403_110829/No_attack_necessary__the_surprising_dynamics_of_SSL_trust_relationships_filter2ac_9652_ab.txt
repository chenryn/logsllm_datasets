### Unexpected Certificate for \*.google.com

Figure 2 illustrates the corresponding section of the trust graph for this incident. Google issues certificates for its domains using its own intermediate Certificate Authorities (CAs), which are signed by the Equifax Root CA. Our dataset includes 33 valid certificates for \*.google.com, all signed by one of their own intermediate CAs. In the TÜrktrust case, a new \*.google.com certificate was added to the global trust graph as a child of an accidentally created intermediate certificate. This incident stands out because it did not involve an actual attack on the CA but rather an unfortunate mistake. However, this scenario is indistinguishable from an attack or coercion that forces the CA to issue a malicious intermediate certificate.

### Trustwave Incident (2012)

In 2012, TrustWave issued an intermediate CA certificate to one of their customers, who then used it to transparently decrypt user traffic by generating valid end-host certificates on the fly [31]. The public became aware of this incident when TrustWave, on their own initiative, revoked the certificate and announced they would refrain from issuing such certificates to their customers in the future.

Conceptually, this incident resembles the TÜrktrust case: a legitimate root issued a new intermediate CA certificate for Man-in-the-Middle (MITM) attacks.

**Note:** Specific Google services, such as mail.google.com and upload.video.google.com, also use certificates from other issuers.

### Comodo Attack (2011)

In 2011, hackers compromised the Comodo CA and generated nine illegitimate certificates for well-known websites, including Google, Yahoo, Mozilla, Skype, and Microsoft [9]. Figure 3 shows the corresponding section of the trust graph. The certificates were issued directly from one of the root CAs belonging to Comodo. The attackers created certificates for common names like mail.google.com, www.google.com, login.yahoo.com (three times), addons.mozilla.com, login.live.com, and globaltrustee. However, only one certificate for login.yahoo.com was encountered in actual use.

In the Comodo case, the attackers managed to compromise a root CA but did not create new intermediate CA certificates, forcing them to target specific domains.

### DigiNotar Attack (2011)

In early 2011, a hacker compromised the DigiNotar CA and issued valid certificates for a diverse set of sites, including \*.google.com, \*.skype.com, and \*.\*.com, as well as several intermediate CA certificates carrying the names of well-known roots [34]. The \*.google.com certificate was used to conduct a MITM attack against Internet users in Iran accessing Google services such as Gmail. Conceptually, the DigiNotar attack combines the aforementioned incidents: the attackers created both new CA and end-host certificates through an existing CA. From the perspective of the global trust graph, this attack inserts new certificates into the graph, with labels matching existing certificates already associated with different roots.

### RapidSSL and Flame (2009-2012)

This subsection presents two attacks that differ significantly from the previously mentioned ones. In 2009, a hacker group performed a proof-of-concept attack on RapidSSL to demonstrate the problems of using MD5 as a signature algorithm for certificates. The group used a chosen-prefix collision attack to create a rogue intermediate CA certificate that appeared to be signed by the RapidSSL CA. They created two certificates with the same MD5 hash value [37]. One was a normal end-host certificate, which was submitted and signed by RapidSSL. The second was a CA certificate (see Figure 4). Since both certificates shared the same hash, the signature of the end-host certificate was also valid for the rogue CA certificate. Such a hash collision attack exploits the fact that only the hash of a certificate is signed. If an attacker can create an independent certificate matching a signed hash, that certificate will also validate correctly against the same root. The Flame malware also used this type of attack. Today, this type of attack is no longer practical since modern browsers have stopped accepting MD5 hashes. The weakest hash algorithm in use today is SHA-1, which the community still considers safe against collision attacks. From the perspective of the trust graph, these attacks exhibit different properties than the former incidents. While new certificates join the graph, in this case, they come with hash values that match existing ones.

### Faults in CA Processes

Numerous incidents exploited deficiencies in a CA's internal processes. For example, Michael Zusman created a certificate for live.com by registering the email address sslcertificates@live.com. Thawte, a VeriSign intermediate CA, accepted this address as proof of ownership [41, 13]. Another attack relied on including an encoded NUL character (ø) in a certificate’s domain name. When using a name like bank.comøevil.com, some CAs only validated that the registering user owns evil.com. However, some browsers (e.g., Firefox [30]) ignored everything following the NUL character and accepted the certificate for bank.com [21, 25]. This bug has been fixed on both the browser and CA sides. In the context of the trust graph, such cases look similar to the TÜrktrust incident, where the new certificate relates to already existing domains.

### Remedies

One of the main problems with the current trust ecosystem originates from CAs, including intermediates, who have the ability to issue certificates for any domain. In principle, the X.509 name constraint extension should prevent this by limiting intermediates down the chain to issuing certificates for restricted domains only (e.g., subdomains their customers own). However, at the moment, the use of name constraints in certificates is still extremely rare. The main reason boils down to a lack of support in current browsers; Safari and iOS, in particular, do not yet honor this extension.

Extended validation (EV) certificates represent another effort to increase trust in the CA system. However, their actual benefit remains unclear because users often cannot differentiate between certificate types. Furthermore, SSL rebinding attacks [38, 20, 35, 5] can circumvent EV protection. Finally, EV certificates only indicate that the CA uses stricter standards when checking a customer’s identity, which is of no use if the CA has been compromised. For example, the compromised DigiNotar CA was approved for EV by Mozilla [28]; TÜrktrust received Mozilla approval for EV just before their incident occurred [29].

### Structural Exploration

We continue with an analysis of the trust graph to identify benign changes that structurally resemble attacks, and thus might be mistaken for malicious activity in the absence of further context. For this discussion, we assume that our data does not contain any MITM attacks. We specifically searched for the fraudulent certificates discussed in §3.2 (e.g., the intermediates that TÜrktrust accidentally issued), but did not find any of them in our dataset. More generally, the absolute number of Internet-wide MITM attacks is presumably small and dwarfed by the total number of sessions included in our dataset, which renders the chance of having recorded an actual attack negligible. Additionally, we manually investigated all the specific cases we report and indeed deem them benign.

#### Terminology

We define the first appearance of a new certificate as a change in the trust graph. Two or more certificates match if they share at least one label. The neighborhood of a new certificate constitutes the set of certificates that it matches. When a new certificate appears for the first time, we classify the nature of the change by computing a change vector of its key features, including:

1. Size of the neighborhood
2. Number of labels in the new certificate
3. Total number of unique intermediates across all existing certificates
4. Percentage of matching intermediates (intermediate weight I)
5. Number of unique roots for the existing certificates
6. Percentage of matching roots (root weight R)
7. Time difference between when a certificate became valid and when we first saw it
8. Minimum, maximum, and average overlap between the validity periods of new and existing certificates
9. Minimum, maximum, and average difference when we first encountered the new and the existing certificates
10. Number of different keys among new and existing certificates.

We leverage these vectors for grouping changes that exhibit similar characteristics and for identifying examples to present in our discussion. While the remainder of this paper focuses on individual observations, we note that for features that we do not discuss further, we were not able to discern stable patterns that might indicate certificate attacks.

The two most important metrics concern the intermediate weight I and the root weight R. For a given certificate, I represents the percentage of its neighborhood with the same issuer. For example, I = 1 means that the issuer of the new certificate matches all existing intermediates, and I = 0.5 that the issuer of the new certificate matches half the certificates in the neighborhood. We define R correspondingly to represent the percentage of a certificate’s neighborhood with the same root CA.

#### Data Overview

At the beginning of January 2013, we had seen 741,424 certificates in total, out of which 489,551 were still valid and thus part of the trust graph at that time. Through January, we encountered 80,466 unique new certificates, of which 54,321 validated against the Mozilla root store; we examine the latter subset in the following. 40,885 of those changes did not affect any other certificate, i.e., the addition either applied to labels we had not seen yet, or the existing certificates had already expired. The certificates we encountered for the first time led back to 337 different issuers at 80 different roots.

Looking at the new certificates matching existing ones, we see that most exhibit a small neighborhood, with 9,400 of them matching exactly one certificate in the graph. Most of those certificates replace a certificate that expires soon. However, we also find certificates with rather large neighborhoods: 1,382 larger than 20, and 224 larger than 100. As we will see in the next sections, these often belong to CDNs and big hosting providers. The certificate with the most extensive neighborhood matched 657 existing certificates and belonged to Google.

#### Inconsistent Neighborhoods

In the cases discussed in §3.2, the malicious certificates were issued by a different CA that had not signed the benign certificate in the past. Conceptually, this kind of attack splits into two cases: either a previously unknown intermediate CA signs the malicious certificate (as in the TÜrktrust and Trustwave incidents), or an already established CA (e.g., Comodo) does. In both cases, we see a “hand-over” from an existing set of CAs to one not previously seen for the domain.

In theory, a hand-over happens either when a certificate changes its intermediate but remains rooted in the same sub-tree in the trust graph, or when a certificate migrates to a new root. In all previously examined attacks, the latter scenario occurred.

To find CA hand-overs, we examine issuers changing between certificates that are valid for the same domain, using the previously introduced metrics I and R. When looking at certificates that joined the graph in January, we found 3,051 for I = 0, 8.6K for I = 1, and 1,766 for 0 < I < 1. Hence, a large number of certificates share the same issuer as previous certificates, but there exists also a significant number where this is not the case. We find a similar situation for R: 2,507 for R = 0, 9,191 certificates for R = 1, and 1,738 for 0 < R < 1.

##### Large Neighborhoods

As a first step, we examine new certificates that join the trust graph, have a neighborhood of more than 20 certificates, and trace back to a different root than their neighborhood (R = 0). We find several certificates where the neighborhood contains as many as 13 different roots. Those all belong to www.yottaa.net, a web-optimization CDN, whose certificates cover numerous different hostnames (30-34) and have a neighborhood size of 54-57.

In addition to the servers provided by Yottaa, some of their clients also use their own servers where they host certificates for domains that also occur in Yottaa’s certificates.

For certificates with slightly fewer roots (more than 6), we encounter a larger variety of CDNs. For example, Incapsula uses a number of certificates with hostnames that we can trace back to 9 roots, while we find 7 roots for Cloudflare. Yottaa, Incapsula, and Cloudflare participate with 38, 132, and 2.8K certificate domains in the Alexa top-million list, respectively. This list contains several attractive targets for MITM attacks. Consider foursquare.com, for example, whose CA structure we show in Figure 5. When the Cloudflare certificates joined the trust graph (at the end of December and the beginning of January), we already knew other certificates for \*.foursquare.com issued under two different roots. A human observer may conclude that this represents a benign change by having learned that Cloudflare operates as a CDN and tends to use GlobalSign as a CA. However, when looking at the change without such context, it may raise suspicion to see a new certificate from an unrelated root.

Varagesale represents another case that demonstrates this challenge: varagesale.com used Cloudflare as a CDN provider until mid-January, when we observed a new SSL certificate for the same domain. At this time, we had already recorded 30 other certificates for varagesale.com, each of which was used by Cloudflare, issued by GlobalSign, remained valid, and sometimes had been seen months ago. However, the new certificate was issued by a different root (Comodo) than all the other 30. In cases like this, we deem it impossible to separate benign changes from attacks without further context.

Note that Akamai, a well-known CDN, operates differently. In our January change set, we see 104 new certificates that trace back to Akamai. Sites using Akamai can either choose if they want to host content on their own domain or use one of a small set of Akamai domain names. When sites use their own, in contrast to the CDNs mentioned above, Akamai seems to use an individual SSL certificate for each of the sites. Different CAs issue these certificates, with some of them signed directly by the Akamai intermediate CA and the others by either VeriSign or Comodo. Akamai also serves a large number of its customers via a single SSL certificate valid for a248.e.akamai.net, \*.akamaihd.net, and \*.akamaihd-staging.net. Incidentally, we see this certificate used by the largest number of unique IP addresses (68,794). It is apparently used when customers choose to only embed elements into their homepage. Facebook, for example, uses this approach to serve their profile pictures via Akamai. Amazon Cloudfront appears to use a similar strategy, as we observe 9,667 IP addresses serving a single certificate.

##### Small Neighborhoods

As we generally find CDNs responsible for a significant share of the non-obvious effects, we now specifically examine changes for domains that are not using any CDNs, in the hope to find more regularity there. However, our analysis quickly reveals several examples that might appear malicious to an observer. Figure 6 shows an example involving two high-profile domains: qq.com, a popular instant messaging service, and tenpay.com, a payment service. Both are based in China and owned by the same parent company. According to Alexa, qq.com ranks as the 8th most popular site on the Internet (tenpay ranks 774th). At the end of January, we see a single new certificate showing up that is valid for both domains, signed by a not-previously seen CA. At this time, the original certificates for both sites were well established (we first saw them in February and March 2012) and still valid until mid-December. One could easily mistake this change for an attack. Even if one knew that the names listed in the certificate belong to the same parent company, an adversary could just as well have deliberately chosen them to appear more legitimate. The only way to be sure the new certificate is indeed benign is to ask the domain.

A similar change occurs for the domain \*.americanexpress.com—likewise a site that makes an interesting target for attackers. Akamai’s intermediate CA issued the established certificate for this site; we saw it first in May 2012, only hours after its validity period starts, and it remained valid until May 2013. However, on January 23, we see a new, VeriSign-signed wildcard certificate for the same domain, with a validity period beginning on the 13th of December 2012. No other VeriSign certificate appears in our dataset for that domain. Both certificates were then used simultaneously for one more month; after that, the Akamai certificate was apparently phased out.

When going through the list of domains for which we see new certificates in January, we find a number of further changes that likewise exhibit similarities with recent attacks. For example, several other banking sites switch their certificate issuers (including the Bank of India, the First Montana Bank, the Mechanics Bank, and the Danish Arbejdernes Landsbank). Only for some of them, the old certificates expire around the same time.

Furthermore, some sites change from well-known to smaller CAs. For example, iesabroad.com exhibits a newer certificate from AlphaSSL in addition to several active certificates issued by RapidSSL. We see one of the old certificates in use along with the new AlphaSSL certificate. To an outside observer, this change might look similar to a MITM attack involving a small rogue CA certificate.

##### Country Changes

To identify malicious CA changes, one concrete recommendation involves monitoring their countries [36], under the assumption that a site rarely switches to a CA in a different country for benign reasons. However, when examining our data in this regard, we see precisely this scenario occurring for 1.3K changes in January: the country code of the CA that issues the new certificate is not already part of the existing neighborhood. When looking at root certificates, this change is even more pronounced: 1.7K changes trace back to a root in a different country.

A number of specific cases might look particularly surprising to a human observer. For example, 46 certificates switch to a root located in Israel, including the Nova Scotia Department of Education (\*.ednet.ns.ca) and www.privacybox.de, a German service for anonymously exchanging messages between journalists. We assume that these changes represent benign business decisions to migrate certificates to StartCOM, an CA based in Israel.

Furthermore, www.zekur.nl changes from a US-based root to Bermuda (QuoVadis) according to its country code. We assume that many customers are not even aware of the change.