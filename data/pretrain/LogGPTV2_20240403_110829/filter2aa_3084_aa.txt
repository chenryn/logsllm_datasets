Hybrid rule-based botnet detection
approach using machine learning for
analysing DNS trafﬁc
Saif Al-mashhadi1,2, Mohammed Anbar1, Iznan Hasbullah1 and
Taief Alaa Alamiedy1,3
1 National Advanced IPv6 Centre, Universiti Sains Malaysia, Penang, Malaysia
2 Electrical Engineering, University of Baghdad, Baghdad, Baghdad, Iraq
3 ECE Department- Faculty of Engineering, University of Kufa, Kufa, Najaf, Iraq
ABSTRACT
Botnets can simultaneously control millions of Internet-connected devices to launch
damaging cyber-attacks that pose signiﬁcant threats to the Internet. In a botnet, bot-
masters communicate with the command and control server using various
communication protocols. One of the widely used communication protocols is the
‘Domain Name System’ (DNS) service, an essential Internet service. Bot-masters
utilise Domain Generation Algorithms (DGA) and fast-ﬂux techniques to avoid
static blacklists and reverse engineering while remaining ﬂexible. However, botnet’s
DNS communication generates anomalous DNS trafﬁc throughout the botnet life
cycle, and such anomaly is considered an indicator of DNS-based botnets presence in
the network. Despite several approaches proposed to detect botnets based on DNS
trafﬁc analysis; however, the problem still exists and is challenging due to several
reasons, such as not considering signiﬁcant features and rules that contribute to the
detection of DNS-based botnet. Therefore, this paper examines the abnormality of
DNS trafﬁc during the botnet lifecycle to extract signiﬁcant enriched features. These
features are further analysed using two machine learning algorithms. The union of
the output of two algorithms proposes a novel hybrid rule detection model approach.
Two benchmark datasets are used to evaluate the performance of the proposed
approach in terms of detection accuracy and false-positive rate. The experimental
results show that the proposed approach has a 99.96% accuracy and a 1.6% false-
positive rate, outperforming other state-of-the-art DNS-based botnet detection
approaches.
Subjects Data Mining and Machine Learning, Security and Privacy
Keywords Botnet detection, DNS analysis, Rule-based technique, Machine learning, Network
security
INTRODUCTION
Nowadays, especially during the global COVID-19 pandemic, there is no longer a debate
that the Internet has become a core element of our daily life. Today’s Internet is about
online presence, e-learning, social media, e-banking, work from home, online shopping,
Internet of Things, and cloud computing (Stevanovic et al., 2012; Nozomi Networks Labs,
2020; Lallie et al., 2020). Unfortunately, Internet resources are continuously under
threat by malicious actors, whether individual or organised entities. The botnet is now one
of the most preferred tools by malicious actors for sophisticated cyber attacks. As a result,
How to cite this article Al-mashhadi S, Anbar M, Hasbullah I, Alamiedy TA. 2021. Hybrid rule-based botnet detection approach using
machine learning for analysing DNS trafﬁc. PeerJ Comput. Sci. 7:e640 DOI 10.7717/peerj-cs.640
Submitted 11 January 2021
Accepted 22 June 2021
Published 13 August 2021
Corresponding authors
Saif Al-mashhadi,
PI:EMAIL
Mohammed Anbar, PI:EMAIL
Academic editor
Muhammad Tariq
Additional Information and
Declarations can be found on
page 28
DOI 10.7717/peerj-cs.640
Copyright
2021 Al-mashhadi et al.
Distributed under
Creative Commons CC-BY 4.0
it is considered one of the critical threats to Internet users’ security and privacy (Nozomi
Networks Labs, 2020).
There are two main motives for building and operating botnets: ﬁnancial gain by
offering botnets for hire for attacks and crypto mining and politics for hacktivism or
nation-states. The services provided by the botnets vary from the crypto-mining campaign
and intelligence gathering to anonymised large-scale cyber attacks (Almutairi et al., 2020).
A botnet comprises a network of malware-infected computing devices (Abu Rajab et al.,
2006). A malware transforms compromised computing devices into robots (bots)
controlled remotely by the attacker, known as a botmaster, without end-users knowledge
(Asadi et al., 2020). Botmasters hide their location and avoid detection of law enforcement
entities by controlling and initiating botnet attacks via the Internet through command and
control (C&C) servers using various communication techniques (Almutairi et al., 2020).
Figure 1 shows the botnet communication architecture.
Some of the botnet attacks include Distributed Denial of Service (DDoS), sending spam
email, ransomware (Gu et al., 2013; Alomari et al., 2016), or phishing emails (Karim et al.,
2014), and stealing sensitive data that could be used for further attacks. Even though
there are different approaches to mitigate botnet attacks, since its ﬁrst appearance in 1993
(Silva et al., 2013), the number of botnet attacks has been growing steadily. The 10-year
trend of the size of botnet-based DDoS attacks (Morales, 2018) in Fig. 2 clearly shows
that there is a marked increase from 2007 (24 Gbps) to 2018 (1.7 Tbps). Similarly, the
Symantec Internet Security Threat Report (Symantec, 2018) reported a 62% increase in
botnet activities in 2018 compared to the previous year.
Initiating and coordinating attacks require all members (bots) to be connected with each
other and the C&C servers. This interconnectedness is fundamental for the botnet lifecycle
Figure 1 Botnet communication architecture.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-1
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
2/34
(Khattak et al., 2014), which allows the botnet members to receive new commands and
synchronise their actions.
There are three types of botnet communication architectures according to their
communication topology: centralised (client-server), decentralised (peer-to-peer), and
hybrid (Silva et al., 2013; Negash & Che, 2015). The bots in the centralised category connect
to the C&C using IRC, HTTP, or DNS protocols to obtain instruction and update their
status (Silva et al., 2013; Negash & Che, 2015). Table 1 provides a detailed comparison
between the three botnet communication architectures.
The bots connect with the C&C server using pre-programmed static IP addresses of the
C&C server within the malware codes or algorithm-generated domain names (Cantón,
2015).
It is possible to detect different types of botnet architecture by analysing DNS
communication trafﬁc, regardless of the communication architecture used (centralised,
decentralised, or hybrid).
DNS is all about resolving queries to map a domain name hierarchically to its
corresponding IP address, similar to a phone book that catalogues human-readable
Figure 2 Size of Botnet DDoS attacks over 10 years (Morales, 2018).
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-2
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
3/34
domain names (URLs) and their related computer-readable IP address formats (numeric).
Figure 3 illustrates the operation of domain name resolution.
DNS is an essential Internet service that cannot be disabled or blocked using ﬁrewalls
without incapacitating the network functionality. For this reason, some botmasters rely on
the DNS protocol for botnet communication (Mockapetris, 1987). Botmasters avoid
detection by using dynamic DNS strategies that constantly and rapidly change domain
names and their associative IP addresses. Two popular dynamic DNS techniques are fast-
ﬂux (Holz et al., 2008) and domain-ﬂux (Yadav & Reddy, 2012).
As shown in Fig. 4, fast-ﬂux is a technique that regularly assigns several IP addresses to
the same domain name. The fast-ﬂux approach is often used for legit purposes, such as
load balancing by content delivery network operators (Yadav & Reddy, 2012). On the other
hand, the domain-ﬂux method is carried out by dynamically generating pseudo-random
domains using the Domain Generation Algorithm (DGA).
The DGA has several speciﬁc characteristics, as shown in Fig. 5. Firstly, there is no
hardcoded domain name on the C&C server, making it unpredictable (Zago, Gil Pérez &
Martínez Pérez, 2019). Secondly, the botmaster could use DGA as a fail-safe or backup
channel when the primary communication channel fails (Stone-Gross et al., 2011). The
Zeus worm (Luo et al., 2017) is one of the worms that employs DGA.
Table 1 Comparison of botnet communication architectures.
Architecture Description
Pro
Cons
Centralised
Bots are connected, get instruction and
centrally update their status with the C&C
using IRC, HTTP or DNS protocols (Silva
et al., 2013)
Easy to construct and manage by attackers A single failure point
Peer to Peer
(P2P)
It is similar in technique to the P2P ﬁle-
sharing system, where the bot has dual
behaviour; it can act as a botmaster of
C&C server to send commands and act
like a typical bot when receiving the
command from other bots (Al-Mashhadi
et al., 2019). P2P is constructed so that
each bot communicates with nearby bots
in its system to organise a cluster.
Example P2P botnets include GameOver
Zeus, Sality
Immune to shut down (Singh, Singh &
Kaur, 2019)
Managing difﬁculties due to the required
routing protocols (Acarali et al., 2016)
Hybrid
It is a combination of P2P and centralised
architecture, taking advantage of both
(Khattak et al., 2014; Khan et al., 2019). In
this architecture, the C&C server is central
and consists of many P2P organised bots
that forward the command to the server
bots in a hierarchical manner. Besides, the
botmaster uses proxy bots between their
machine and the botnet, with each bot act
as a servant transmitting commands to the
bots that they compromised (Wang,
Sparks & Zou, 2010)
More resistant to taking down this
structure than the previous ones. It also
provides proﬁt for botmasters by allowing
renting part of their botnet to provide
different attack services
This architecture faces higher latencies in
commands and control propagation than
P2P, but they are very immune to
downstream efforts since only a minor
portion of the botnet will be affected if the
C&C server has been shut down (Khattak
et al., 2014)
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
4/34
request to visit http://example.org
Root Name Server
.org Top Level Domain Name Server
Recursive DNS
1
4
3
7
8
5
2
6
Authoritative Name Server for example.org
7
example.org
A = 93.184.216.34
A = 93.184.216.34
.org ns = 199.19.56.1
example.org
ns =94.184.88.10
Figure 3 DNS resolving process.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-3
Figure 4 Typical fast-ﬂux domain resolution.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-4
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
5/34
Combining fast-ﬂux and DGA techniques allows constant modiﬁcation of the C&C’s IP
address and domain name to avoid detection (Zhou et al., 2013).
Although such techniques are complex, they are popular because they maintain the
communication channel open and undetected by using dynamic but somewhat secret
domain names. Examples of botnets that use the DGA technique to avoid detection are
Necurs and Conﬁcker. A Conﬁcker bot generates up to ﬁfty thousand new unique domain
names daily but only using 500 of them for communication purposes. On the other hand,
the Necurs bot systematically generates 2,048 new domains through an algorithm
(Antonakakis & Perdisci, 2012).
The evasive techniques to control botnets generate abnormal trafﬁc patterns throughout
the botnet lifecycle phases. These patterns can be used to detect botnets. The botnet
lifecycle could be broken down into four phases, as listed and illustrated in Fig. 6.
 Initial infection and propagation phase: In this phase, bot malware aims to infect
Internet-facing devices, such as cell phones, personal computers, smart devices, and
even CCTVs. The attacker has many tools and techniques at his disposal to identify
exploitable vulnerabilities to gain access and control the targeted host. Some strategies
include social engineering, spam, and phishing. Once a vulnerability is found and
successfully exploited, the bot would connect to a remote server (botmaster) to
download and install all required software to control the host device (Al-Mashhadi et al.,
2019).
 Connection and rallying phase: In this phase, the bot tries to ﬁnd and connect to the
C&C server and other bots. The communication occurs either via the C&C server or
a proxy server. The likelihood of exposure of the bot is the highest in this phase because
this phase is repeated until a connection is established (Silva et al., 2013). Nevertheless,
Figure 5 Typical procedure for DGA DNS resolution.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-5
Inial Infecon 
and propagaon
Connecon and 
rallying
Malicious and 
aacks acvies
Maintenance 
and upgrading
Stage 1 
Stage 2
Stage 3
Stage 4 
Figure 6 Botnet life—cycle.
Full-size
DOI: 10.7717/peerj-cs.640/ﬁg-6
Al-mashhadi et al. (2021), PeerJ Comput. Sci., DOI 10.7717/peerj-cs.640
6/34
even with the risk of being exposed and discovered, the DNS lookup query is still
widely used in the botnet connection phase since it is the most ﬂexible botnet
communication method (Manasrah et al., 2009).
 The Malicious and attack phase: The botmaster instructs the bots to perform nefarious
activities, such as distributing malicious software or sending spam emails. Bots can also
perform disruptive attacks, such as a DDoS attack (Da Luz, 2014).
 The Maintenance and upgrading phase: Bots remain idle while waiting for new
commands from the botmaster. These commands might include new targets, update
their behaviour, or instruction for new malicious activities. The botmaster will uphold
the bots as long as possible by continuously upgrading them to avoid detection,