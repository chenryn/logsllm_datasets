### What problem does this feature solve?
With the new Vue.observable you can create a simple reactive store which is
super nice. It seems you can use these reactive properties directly in views
(you don't need to use them through local computed properties). In this
scenario, it would be nice to be able to also have global state based computed
properties. This way, you'd be able to create a very nice and imo quite
capable yet simple store pattern (compared to more verbose and complex
solutions like Vuex). You also don't have to sprinkle computed props on
components where they imo don't really belong.
It's possible to do a workaround by initiating new Vue instances, but I assume
that causes some significant and completely unnecessary overhead.
### What does the proposed API look like?
I'm completely open for your wisedom ;-) A few suggestions:
A)  
Vue.computed({  
computedProp: function() { ... }  
});
B)  
Vue.observable({  
regularReactiveProp: 'something',  
get computedProp: function () { ... }  
});
I'm btw. not a big fan of transforming all functions to computed props, as
this makes it less simple (impossible?) to pass along one store object that
also contains all methods (for a more full scale model layer).