1 ,gβ
◦ gα
◦ {g(βvi(s)+αwi(s)+yi(s))/γ
2,gδ
2,
1
}u
i=0
• π ← Prove(C,prkC,stmt): Given public statement stmt
which includes the values {ci}u
i=1, the prover infers the
values of the remaining wires in the circuit {ci}m
i=u+1
and samples two random values κ1 and κ2 from Fq.
The prover then computes h(x) = p(x)
t(x) , and computes
the proof as
1
◦ πA = gα+v(s)+κ1δ
◦ πB = gβ+w(s)+κ2δ
◦ πC = g(h(s)t(s)+Imid (s))/δ
2
1
.πκ2
A .Bκ1
1 .g−κ1κ2δ
1
where
i=0 civi(x)
i=0 ciwi(x)
◦ v(x) = ∑m
◦ w(x) = ∑m
◦ B1 = gβ+w(s)+κ2δ
◦ Imid(x) = ∑i∈Imid ci(βvi(x) + αwi(x) + yi(x))
1
Proof π contains πA, πB and πC.
USENIX Association
29th USENIX Security Symposium    2133
• {0,1} ← Verify(vrkC,stmt,π): Given the proof and the
veriﬁcation key, the veriﬁer does the check
2 ).e(gΨio(s)/γ
1 ,gβ
e(πA,πB) = e(gα
where Ψio(x) = ∑u
i=0 ci(βvi(x) + αwi(x) + yi(x)) and
where c0 = 1 and (c1, . . . ,cu) is the public statement
stmt being proved.
2).e(πC,gδ
,gγ
2 ) ,
1
3 Arguments for MA complexity class
We consider the class of languages that can be efﬁciently veri-
ﬁed given a randomized veriﬁer with public coins. Concretely,
assume the class of MA statements (from Merlin-Arthur)
which can be viewed as the randomized analogue of NP. In
particular it contains languages L that come with a probabilis-
tic polynomial-time veriﬁcation algorithm L(x,w), where x
in the statement and w is the witness. The requirement is that
if x ∈ L then there is a witness w such that the probability
that L(x,w) accepts is at least 2/3. If x /∈ L, for all witnesses
w, L(x,w) accepts with probability at most 1/3. It is crucial
that the coins of L(x,w) are chosen independently of w—
otherwise, a cheating prover can compute a witness w and
related randomness that will make L(x,w) accept with prob-
ability > 1/3. The above soundness bound can be replaced
with one exponentially small in |x|,|w| (e.g., 2−λ) and the
correctness bound can be made 1, without changing the class.
Clearly, MA contains NP and P. Interestingly, there are
problems both in MA and P whose MA veriﬁcation pro-
cedure is much faster than the P veriﬁcation procedure. For
example, checking primality has a slow deterministic test [43]
but a fast randomized test [44]. Similarly, checking that a
vector is a permutation of another vector has an O(nlogn)
deterministic test but an O(n) randomized test (form polyno-
mials where the elements of the vectors are roots and check
equality at a random point). For practical purposes this is very
important. In particular, our paper deﬁnes a language L that
contains pairs (C, p) where C is an arbitrary arithmetic circuit
of n∗ multiplication gates and n+ addition gates, p is a value
assignment on a subset of C’s wires and (C, p) ∈ L iff there
exist an assignment p(cid:48) on the rest of C’s wires such that (p, p(cid:48))
is a valid assignment for C. Clearly, L is in NP, but we also
show that L has a much faster veriﬁcation procedure.
3.1 Baseline zk-argument for MA
Given a language L in MA with randomized veriﬁcation
procedure L(x,w), we can write down L(x,w) as a determin-
istic procedure L(x,w,r), where r ∈ {0,1}λ are the random
coins used in L(x,w). A baseline way to construct a zero-
knowledge argument for MA from any zk-SNARK for NP,
is as follows. First, we ask the prover to commit to witness
w using a hiding and binding commitment comw. Then, the
veriﬁer chooses random coins r and sends them to the prover.
Finally, the prover runs the SNARK proving algorithm for
the composite statement “w is a valid opening for comw and
L(x,w,r) accepts.” Since the commitment scheme is hiding
and the SNARK is zero-knowledge, the veriﬁer learns noth-
ing about w from the interaction. Assuming the commitment
scheme has a “knowledge” property (enhancing it with a zero-
knowledge proof-of-knowledge, if necessary), the soundness
of the protocol can be proven in a straight-forward manner
by extracting the pre-image of comw and the witness used
in the circuit of L. If they are different, this can be used to
break the commitment binding property. Else, since comw
was computed before seeing r, the probability that the ex-
tracted witness is not a valid witness for x, is negligible by
the soundness property of the MA argument.
If |r| is at most polylogarithmic in |w|, this protocol is a
succinct zero-knowledge argument. The downside of this ap-
proach is that it required “opening” comw inside the circuit
being argued with the SNARK, which may introduce a sig-
niﬁcant overhead in practice. In the rest of this section, we
describe a more efﬁcient way to build zero-knowledge argu-
ments for MA by modifying the zk-SNARK of Groth [7].
3.2 Separated zk-SNARKs
Recall that in a typical zk-SNARK based on quadratic arith-
metic programs, the wire indices of the circuit being veriﬁed
are divided in two categories. The ones that correspond to
the public statement being proved usually referred to as IO-
related indices and the ones that correspond to the non-IO-
related indices that we call Imid (these contain the witness
indices too). A separated zk-SNARK is a zk-SNARK with the
difference that it is parametrized by a set of indices J ⊂ Imid.
More importantly, the proof π of a separated zk-SNARK can
be written as [π(cid:48),πJ] where πJ can be computed with access
only to the values of the indices in J and the public parame-
ters. We now give a separated zk-SNARK implemented off
Groth’s original zk-SNARK [7]. We highlight the changes
with blue. We prove its knowledge soundness in the generic
group model and its zero-knowledge (as per [7, Def. 2]).
Protocol 2 The separated Groth16 Protocol
• {vrkC(J),prkC(J)} ← Setup(C(J),1λ): Let C be an arith-
metic circuit with u public input and output values from Fq,
i.e., u is the statement size. Build a QAP Q = (t(x),V,W,Y )
of size m and let n be the degree of t(x). Let Imid =
{u + 1, . . . ,m}, J ⊆ Imid and I = Imid − J.
Choose α,β,γ,δ,δ(cid:48),s ← Fq. Construct the public proving
key prkC(J) as follows:
1 ,gβ
2 ,gδ
2 }n−1
2
1 ,gδ(cid:48)
◦ gα
1 ,gβ
1 ,gδ
1 }n−1
◦ {gsi
i=0 ,{gsi
◦ {g(βvi(s)+αwi(s)+yi(s))/δ
◦ {g(βvi(s)+αwi(s)+yi(s))/δ(cid:48)
i=0
1
1
}i∈I
}i∈J
2134    29th USENIX Security Symposium
USENIX Association
◦ {gsit(s)/δ
1
}n−2
i=0
Construct the veriﬁcation key vrkC(J) as
1 ,gβ
2 ,gγ
◦ gα
◦ {g(βvi(s)+αwi(s)+yi(s))/γ
2, gδ(cid:48)
2,gδ
2
1
}u
i=0
• π ← Prove(C(J),prkC(J),stmt): Given public statement
stmt which includes the values {ci}u
i=1, the prover infers
the values of the remaining wires in the circuit {ci}m
i=u+1
and samples three random values κ1, κ2 and κ3 from Fq.
The prover then computes h(x) = p(x)
t(x) , and computes the
proof as
1
◦ πA = gα+v(s)+κ1δ
◦ πB = gβ+w(s)+κ2δ
◦ πC = g(h(s)t(s)+I(s))/δ
◦ πD = gκ3δ
1 gJ(s)/δ(cid:48)
1
1
2
.πκ2
A .Bκ1
1 .g−κ1κ2δ−κ3δ(cid:48)
1
where
i=0 civi(x)
i=0 ciwi(x)
◦ v(x) = ∑m
◦ w(x) = ∑m
◦ B1 = gβ+w(s)+κ2δ
◦ I(x) = ∑i∈I ci(βvi(x) + αwi(x) + yi(x))
◦ J(x) = ∑i∈J ci(βvi(x) + αwi(x) + yi(x))
1
Write proof π as [π(cid:48),πJ] where π(cid:48) contains πA, πB and πC
and πJ contains πD.
• {0,1} ← Verify(vrkC(J),stmt,π): Given the proof and the
veriﬁcation key, the veriﬁer checks to see if e(πA,πB)
equals
e(gα
1 ,gβ
2 ).e(gΨio(s)/γ
,gγ
2).e(πC,gδ
1
where Ψio(x) = ∑u
i=0 ci(βvi(x) + αwi(x) + yi(x)) and
where c0 = 1 and (c1, . . . ,cu) is the public statement stmt
being proved.
2 ).e(πD,gδ(cid:48)
2 ) ,
Proof sketch for knowledge soundness. Knowledge sound-
ness holds in the generic group model.1 Following the proof
technique in [7], we express πA, πB, πC and πD as gA, gB, gC
and gD, where A, B, C and D are 6-variate Laurent polynomi-
als in α, β, γ, δ, δ(cid:48) and s and, due to the generic group model,
can be expressed as linear combinations of the elements in
vrkC(J),prkC(J). Substituting in the veriﬁcation equation, we
have that two Laurent polynomials should be equal. This
gives rise to equations that relate to the coefﬁcients of distinct
monomials on both sides, allowing us to extract the QAP
coefﬁcients. The proof is in the full version of the paper.
1Our separated zk-SNARK can be proven secure in the algebraic group
model (AGM), following the techniques of [45].
Proof for zero-knowledge. The simulator can choose group
elements for πA, πB and πC by randomly choosing their ex-
ponents and then set πD to be the element satisfying the ver-
iﬁcation equation. Since κ1,κ2,κ3 are chosen uniformly at
random in our construction and πD is the only group element
satisfying the veriﬁcation equation, zero-knowledge follows.
3.3 Efﬁcient zk-SNARK for MA
Now we build an efﬁcient zk-SNARK for a language L in
MA using the above separated construction. Let L(x,w,r)
be the de-randomized veriﬁer algorithm for L, as introduced
before. We view L as a circuit with IO-related indices being
x and r and non-IO-related indices Imid being the rest of the
wire indices. Deﬁne J ⊂ Imid to be the set of all wire indices
of L(x,w,r) that do not depend on the randomness r—note
that J includes the wires corresponding to the witness w. Let
us call those wires deterministic wires.
To give an intuition about that, consider the MA lan-
guage that contains pairs of n-sized vectors (a,b) such that
(a,b) ∈ L iff b is a sorted version of a. The MA veriﬁcation
procedure involves two checks (note that in this case there is
no explicit witness that is given as input):
1. (deterministic comparison check) bi ≤ bi+1 for all i =
1, . . . ,n− 1;
2. (randomized permutation
check) ∏n
i=1(ai + r) =
∏n
i=1(bi + r).
In this case, the set of deterministic wires J will correspond
only to the wires that are used to implement the comparisons
(whose values only depend on the statement).
We are now ready to describe the protocol. The common
input of the veriﬁer and the prover is a statement x; the prover
additionally has a corresponding witness w. The goal of the
prover is to persuade the veriﬁer, in zero-knowledge, that
x ∈ L where L is an MA language with veriﬁcation procedure
L(x,w,r). Let J be the set of deterministic wires for L(x,w,r)
and let {vrkL(J),prkL(J)} ← Setup(L(J),1λ) be the parame-
ters generated from the Setup of the separated zk-SNARK.
Our protocol is interactive and proceeds as follows.
1. Given x ∈ L and the respective witness w, the prover com-
putes the values of the deterministic wires J with respect
to L(x,w,r) and then computes πJ using the public param-
eters prkL(J). The prover sends πJ to the veriﬁer;
2. The veriﬁer picks a random r and sends to the prover;
3. The prover computes the values for the wires in Imid −J us-
ing randomness r. At that point he knows all the wire val-
ues for L(x,w,r) and runs π ← Prove(L(J),prkL(J),x||r).
Parse π as [π(cid:48) πJ] and send π(cid:48) to the veriﬁer;
4. The veriﬁer computes π = [π(cid:48) π j] and runs {0,1} ←
Verify(vrkL ,x||r,π), using the πJ received in Step 1 and
the randomness r sent at Step 2.
As the randomness r is “public” since L is in MA (as
opposed to secret randomness used locally by the veriﬁer),
USENIX Association
29th USENIX Security Symposium    2135
the interaction can be removed with the Fiat-Shamir heuristic,
assuming a collision-resistant hash function hash modelled
as a random oracle.
• Given x and w, the prover computes the values of the
deterministic wires J with respect to L and then com-
putes πJ using the public parameters prkL(J). Then the
prover computes r = hash(x||πJ). Then the prover com-
putes the values for the wires in Imid −J using randomness
r. At that point, the prover knows all the wire values for
L(x,w,r) and runs π ← Prove(L,prkL(J),x||r). Then the
prover sends π to the veriﬁer;