:::
:::
::: section
::: titlepage
# []{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap}安装 SystemTap {.title}
:::
要开始使用
SystemTap，请安装必要的软件包。要在多个系统安装了多个内核的内核中使用
SystemTap，请 [*为每个*]{.emphasis} 内核版本安装对应的内核软件包。
::: itemizedlist
**先决条件**
-   您已启用 debug 存储库，如
    [启用调试和源存储库](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/setting-up-a-development-workstation_developing-applications#enabling-debug-and-source-repositories_setting-up-a-development-workstation){.link}
    中所述。
:::
::: orderedlist
**流程**
1.  安装所需的 SystemTap 软件包：
    ``` screen
    # {PackageManagerCommand} install systemtap
    ```
2.  安装所需的内核软件包：
    ::: orderedlist
    1.  使用 `stap-prep`{.literal}:
        ``` screen
        # stap-prep
        ```
    2.  如果 `stap-prep`{.literal}
        无法正常工作，请手动安装所需的内核软件包：
        ``` screen
        # {PackageManagerCommand} install kernel-debuginfo-$(uname -r) kernel-debuginfo-common-$(uname -i)-$(uname -r) kernel-devel-$(uname -r)
        ```
        `$(uname -i)`{.literal}
        会自动替换为系统的硬件平台，`$(uname -r)`{.literal}
        会自动替换为正在运行的内核版本。
    :::
:::
::: itemizedlist
**验证步骤**
-   如果要使用 SystemTap 探测的内核当前正在使用，测试您的安装是否成功：
    ``` screen
    # stap -v -e 'probe kernel.function("vfs_read") {printf("read performed\n"); exit()}'
    ```
    成功部署 SystemTap 时会出现类似如下的输出：
    ``` screen
    Pass 1: parsed user script and 45 library script(s) in 340usr/0sys/358real ms.
    Pass 2: analyzed script: 1 probe(s), 1 function(s), 0 embed(s), 0 global(s) in 290usr/260sys/568real ms.
    Pass 3: translated to C into "/tmp/stapiArgLX/stap_e5886fa50499994e6a87aacdc43cd392_399.c" in 490usr/430sys/938real ms.
    Pass 4: compiled C into "stap_e5886fa50499994e6a87aacdc43cd392_399.ko" in 3310usr/430sys/3714real ms.
    Pass 5: starting run. 
    read performed 
    Pass 5: run completed in 10usr/40sys/73real ms. 
    ```
    输出的最后三行（使用 `Pass 5 的示例`{.literal}）表示：
    ::: calloutlist
      --------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------
      [![1](images/callouts/1.png)](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#CO1-1)   SystemTap 成功创建了探测内核并运行检测的工具。
      [![2](images/callouts/2.png)](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#CO1-2)   SystemTap 检测到指定的事件（本例中为 A VFS 读取）。
      [![3](images/callouts/3.png)](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#CO1-3)   SystemTap 执行了一个有效的处理程序（打印文本，然后在不出现错误的情况下将其关闭）。
      --------------------------------------------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------
    :::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#privileges-to-run-systemtap_getting-started-with-systemtap}运行 SystemTap 的特权 {.title}
:::
运行 SystemTap
脚本需要升级的系统特权，但在某些情况下，非特权用户可能需要在其计算机上运行
SystemTap 检测。
要允许用户在没有 root 访问权限的情况下运行 SystemTap，请将用户添加到
[**这两个**]{.strong} 用户组中：
::: variablelist
[`stapdev`{.literal}]{.term}
:   此组的成员可以使用 `stap`{.literal} 运行 SystemTap 脚本或
    `staprun`{.literal} 来运行 SystemTap 检测模块。
    运行 `stap`{.literal} 涉及将 SystemTap
    脚本编译到内核模块中，并将它们加载到内核中。这需要提升系统的特权，系统被授予
    `stapdev`{.literal} 成员。不幸的是，这些特权也授予
    `stapdev`{.literal} 成员的有效 root 访问权限。因此，仅将
    `stapdev`{.literal} 组成员资格授予可受 root 访问权限信任的用户。
[`stapusr`{.literal}]{.term}
:   此组的成员只能使用 `staprun`{.literal} 运行 SystemTap
    检测模块。此外，他们只能从
    `/lib/modules/kernel_version/systemtap/`{.literal}
    目录中运行这些模块。该目录只能归 root 用户所有，并且只能由 root
    用户写入。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#running-systemtap-scripts_getting-started-with-systemtap}运行 SystemTap 脚本 {.title}
:::
您可以从标准输入或文件运行 SystemTap 脚本。
安装 SystemTap 时分发的示例脚本可在
`/usr/share/systemtap/examples`{.literal} 目录中找到。
::: orderedlist
**先决条件**
1.  SystemTap 和相关所需的内核软件包安装如 [安装
    Systemtap](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance#installing-systemtap_getting-started-with-systemtap){.link}
    中所述。
2.  要以普通用户身份运行 SystemTap 脚本，请将用户添加到 SystemTap 组：
    ``` screen
    # usermod --append --groups
    stapdev,stapusr user-name
    ```
:::
::: itemizedlist
**流程**
-   运行 SystemTap 脚本：
    ::: itemizedlist
    -   从标准输入中输入：
        ``` screen
        # echo "probe timer.s(1) {exit()}" | stap -
        ```
        此命令指示 `stap`{.literal} 运行 `echo`{.literal}
        传递给标准输入的脚本。要添加 `stap`{.literal} 选项，请在
        `-`{.literal}
        字符前面插入它们。例如，要使这个命令的结果更加详细，该命令为：
        ``` screen
        # echo "probe timer.s(1) {exit()}" | stap -v -
        ```
    -   在一个文件中：
        ``` screen
        # stap file_name
        ```
    :::
:::
:::
:::
[]{#cross-instrumentation-of-systemtap_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#cross-instrumentation-of-systemtap_monitoring-and-managing-system-status-and-performance.html#cross-instrumentation-of-systemtap_monitoring-and-managing-system-status-and-performance}第 38 章 交叉检测 SystemTap {.title}
:::
交叉检测 SystemTap 正在从一个系统上使用的 SystemTap 脚本创建 SystemTap
检测模块，脚本可在未完全部署 SystemTap 的另一个系统上使用。
::: section
::: titlepage
# []{#cross-instrumentation-of-systemtap_monitoring-and-managing-system-status-and-performance.html#systemtap-cross-instrumentation_cross-instrumentation-of-systemtap}SystemTap 交叉检测 {.title}
:::
运行 SystemTap 脚本时，从该脚本中构建一个内核模块。然后，SystemTap
将模块加载到内核中。
通常，SystemTap 脚本只能在部署 SystemTap
的系统上运行。要在十个系统上运行 SystemTap，需要在所有这些系统上部署
SystemTap。在某些情况下，这可能无法实现，也不需要。例如，企业策略可能会阻止您在特定计算机上安装提供编译器或调试信息的软件包，这将阻止
SystemTap 部署。
要临时解决这个问题，请使用
[*交叉检测*]{.emphasis}。交叉检测是从一个系统上要使用的 SystemTap
脚本生成 SystemTap 检测模块的过程。这个过程提供以下优点：
::: itemizedlist
-   可以将各种计算机的内核信息包安装到单一主机计算机上。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    内核打包漏洞可能会阻止安装。在这种情况下，[*主机系统*]{.emphasis}
    [*和目标*]{.emphasis} 系统的 `kernel-debuginfo`{.literal} 和
    `kernel-devel`{.literal} 软件包必须匹配。如果发生了错误，请向
    [https://bugzilla.redhat.com/](https://bugzilla.redhat.com/){.link}
    报告这个错误。
    :::
-   每一 [*目标计算机*]{.emphasis} 只需要安装一个软件包，即可使用生成的
    SystemTap 检测模块：system `tap-runtime`{.literal}。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    [*主机系统必须*]{.emphasis} 架构相同，并且运行
    [*与目标系统*]{.emphasis} 相同的 Linux 发行版，以便构建的
    [*检测模块*]{.emphasis} 正常工作。
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 术语 {.title}
::: variablelist
[[*检测模块*]{.emphasis}]{.term}
:   从 SystemTap 脚本构建的内核模块；SystemTap 模块构建在
    [*主机系统*]{.emphasis} 上，并将加载到 [
    *[*目标系统的目标*]{.emphasis} 内核中*]{.emphasis}。
[[*主机系统*]{.emphasis}]{.term}
:   编译检测模块 [*的系统（来自 SystemTap
    脚本），以加载到目标*]{.emphasis} 系统上。
[[*目标系统*]{.emphasis}]{.term}
:   正在构建 [*检测模块*]{.emphasis} 的系统（从 SystemTap 脚本）。
[[*目标内核*]{.emphasis}]{.term}
:   [*目标系统的*]{.emphasis} 内核。这是加载并运行
    [*检测模块的内核*]{.emphasis}。
:::
:::
:::
::: section
::: titlepage
# []{#cross-instrumentation-of-systemtap_monitoring-and-managing-system-status-and-performance.html#initializing-cross-instrumentation-of-systemtap_cross-instrumentation-of-systemtap}初始化 SystemTap 的交叉检测 {.title}
:::
初始化对 SystemTap 的交叉检测，从一个系统上的 SystemTap 脚本构建
SystemTap 检测模块，并在未完全部署 SystemTap 的另一系统上使用这些模块。
::: itemizedlist
**先决条件**
-   SystemTap 安装在 [*主机系统*]{.emphasis} 上，如 [安装
    Systemtap](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance#installing-systemtap_getting-started-with-systemtap){.link}
    所述。
-   `systemtap-runtime`{.literal} 软件包安装在每个
    [*目标系统中*]{.emphasis} ：
    ``` screen
    # {PackageManagerCommand} install systemtap-runtime
    ```
-   [*主机系统*]{.emphasis} [*和目标系统都*]{.emphasis} 是相同的架构。
-   [*主机系统*]{.emphasis} [*和目标*]{.emphasis} 系统都运行相同的 Red
    Hat Enterprise Linux 主要版本（如 Red Hat Enterprise Linux
    8），[*它们可以*]{.emphasis} 运行不同的次版本（如 8.1 和 8.2）。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
内核打包错误可能会阻止在一个系统中安装多个 ` kernel-debuginfo`{.literal}
和 kernel-devel``{=html}
软件包。在这种情况下，[*主机系统*]{.emphasis} [*和目标*]{.emphasis}
系统的次要版本必须匹配。如果发生了错误，请向
[https://bugzilla.redhat.com/](https://bugzilla.redhat.com/){.link}
报告。
:::
::: orderedlist
**流程**
1.  确定在每个 [*目标系统*]{.emphasis} 中运行的内核：
    ``` screen
    $ uname -r
    ```
    对每个 [*目标系统*]{.emphasis} 重复此步骤。
2.  在 [*主机系统*]{.emphasis} 上，使用安装 [Systemtap 的方法为每个
    [*目标系统*]{.emphasis}
    安装](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance#installing-systemtap_getting-started-with-systemtap){.link}
    目标 [*内核*]{.emphasis} 和相关软件包。
3.  在 [*主机系统中构建检测模块，*]{.emphasis} 将此模块复制到
    [*目标系统中并在目标*]{.emphasis} 系统上运行此模块：
    ::: orderedlist
    1.  使用远程实现：
        ``` screen
        # stap --remote target_system script
        ```
        此命令 [*在目标系统上*]{.emphasis}
        远程实施指定的脚本。您必须确保可以从 [*主机系统*]{.emphasis} 到