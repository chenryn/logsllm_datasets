路由器的客户端部件为服务定义了两个端点。为了测试路由服务，可以使用一个系
统。当然，通常是宿主运行在另一个系统上。协定可以设置为*，以允许所有的协定传送
给这些端点覆盖的服务。
服务的behavior配置对路由很重要。behavior配置routingData通过前面的服务配置来引
用。在路由时，必须用行为设置路由元素，这里使用特性filterTableName来引用路由表。
过滤表routingTable1包含一个filterType为MatchAll的过滤器。这个过滤器匹配每个请
求。现在来自客户端的每个请求都路由到端点RoutingDemoService1。如果这个服务失
败，不能访问，则后备列表就很重要。后备列表failOver1定义了第二个端点，在第一个端
点失败时使用它。
有了路由服务器和路由配置，就可以启动客户端，通过路由器调用服务。如果一切顺
利，客户端就会从运行在宿主1上的服务中获得回应。如果停止宿主1，而客户端发出了另
一个请求，宿主2负责返回一个回应。
44.9.5 改变协定的桥梁
如果路由器应改变协议，那么可以配置宿主，使用netTcpBinding替代
wsHttpBinding。对于路由器，客户端配置需要改为引用另一个端点。
这就改变了协定。
44.9.6 过滤器的类型
在示例应用程序中，使用了MatchAll过滤器。WCF提供了更多过滤器类型，如表44-9
所示。
表44-9
过滤器类型
说明
Action
Action过滤器根据消息上的动作来启用过滤功能。参见
OperationContract的Action属性
Address
Address过滤器对位于SOAP标题的To字段中的地址启用过滤
功能
AddressPrefix
AddressPrefix过滤器不匹配完整的地址，而匹配地址的最佳
前缀
MatchAll
MatchAll过滤器会匹配每个请求
XPath
使用XPath消息过滤器，可以定义一个XPath表达式来过滤消
息标题。可以使用消息协定给SOAP标题添加信息
Custom
如果需要根据消息的内容进行路由，就需要Custom过滤器
类型。使用这个类型，需要创建一个派生于基类
MessageFilter的类。过滤器的初始化用一个带string参数的构
造函数来完成。string参数可以通过配置初始化传递
如果把多个过滤器应用于一个请求，就可以给过滤器使用优先级。但是，最好避免使
用优先级，因为这会降低性能。
44.10 小结
本章学习了如何使用Windows 
Communication 
Foundation在客户端和服务器之间通
信。WCF可以采用独立于平台的方式与其他平台通信，并且它还可以利用特定的Windows
功能。
WCF主要利用服务协定、数据协定和消息协定来简化客户端和服务的独立开发，并
支持独立的平台。可以使用几个特性定义服务的行为和对应操作。
我们探讨了如何通过服务提供的元数据创建客户端，以及如何使用.NET接口协定来
创建客户端。本章介绍了不同绑定选项的功能。WCF不仅提供了独立于平台的绑定，还
提供了在.NET应用程序之间快速通信的绑定。本章还探讨了如何创建自定义宿主和如何
使用WAS宿主。另外介绍了如何定义回调接口、应用服务协定和在客户应用程序中实现
回调协定来进行双工通信。
第45章
部署网站和服务
本章要点
● 部署准备
● 部署到Internet Information Server
● 部署到Microsoft Azure
● 使用Docker部署
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● WebDotnetFramework
● WebDotnetCore
45.1 部署Web应用程序
ASP.NET Web应用程序传统上部署在Internet Information Server（IIS）上。另外，服
务器上.NET Framework的版本与开发过程中使用的版本必须相同。在.NET Core上，不再
是这样。.NET Core不仅在Windows上运行，而且在Linux上运行。同时，应用程序需要的
运行库作为应用程序的一部分交付。这些变化提供了运行应用程序的更多部署选项。
本章展示了部署Web应用程序的不同选项。当然，其中一个选项是把应用程序部署在
本地IIS上。也很容易部署到Microsoft Azure上。使用Microsoft Azure，可以轻松地伸缩应
用程序，不需要预先购买可能需要的所有系统。也可以根据需要添加额外的系统，只在需
要时购买这些系统。
本章介绍如何用Visual Studio创建Docker图像。Docker允许为应用程序准备所需的基
础设施。可以直接在目标系统上使用这些Docker图像和所有的基础设施。
  注意： 本书并没有涵盖用于IIS、Microsoft Azure和Docker的所有不同配置选
项。更多细节参见其他图书。本章只提供关于这个话题的、开发人员需要知道的最重
要的信息。
45.2 部署前的准备
部署Web应用程序需要什么？静态文件（如HTML、CSS、JavaScript和图像文件）、
从C#源文件中编译的二进制图像和数据库。还需要配置文件。配置文件包含应用程序设
置，包括连接到数据库的连接字符串。最有可能的是，应用程序设置在测试和生产环境中
是不同的。也可能使用分阶段的环境，以便在进入生产环境之前，进行最后的一些测试。
还需要在不同的环境之间改变配置。
为了部署示例应用程序，将创建两个应用程序：一个应用程序使用.NET 
Framework
4.6，另一个应用程序使用ASP.NET Core 1.0和.NET Core。两个应用程序使用的数据库都
通过Entity Framework Core访问。
  注意： Entity Framework Core参见第38章。
45.2.1 创建ASP.NET 4.6 Web应用程序
用Visual 
Studio项目模板ASP.NET 
Web 
Application创建第一个应用程序
WebDotnetFramework。选择ASP.NET 4.6模板MVC，并选择Authentication Individual User
Accounts（参见图45-1）。
图45-1
运行这个应用程序时，有几个屏幕可用，可以注册一个新用户（参见图45-2）。这个
注册在随Visual Studio一起安装的SQL LocalDB实例上创建了一个数据库。
图45-2
45.2.2 创建ASP.NET Core 1.0 Web应用程序
再次使用Visual 
Studio项目模板ASP.NET 
Web 
Application创建第二个应用程序
WebDotnetCore，但是现在选择ASP.NET 
Core 
1.0模板Web 
Application，再次使用
Authentication with Individual User Accounts（参见图45-3）。
图45-3
运行该应用程序，得到的屏幕如图45-4所示。注册一个用户时，也会创建一个
LocalDB数据库。
图45-4
使用这两个要部署的应用程序来演示不同的场景：使用Web应用程序运行.NET 4.6需
要在目标系统上安装.NET Framework，之后才能部署应用程序。需要一个可使用.NET 4.6
的系统；通常使用IIS （也在Microsoft Azure上）进行部署。
在ASP.NET 
Core 
1.0上，可以使用.NET 
4.5或更高版本托管应用程序，也可以使
用.NET Core 1.0。使用.NET 5 Core，也可以在非Windows系统上托管应用程序，它不要求
在目标系统上安装.NET运行库，之后才能部署应用程序。.NET运行库可以与应用程序一
起交付。
使用ASP.NET Core 1.0，仍然可以决定通过.NET 4.6托管应用程序，与第一个应用程
序的部署相似。然而，ASP.NET Core 1.0的Web配置文件看起来和ASP.NET 4.6的Web配
置文件大不相同；这就是为什么本章提供ASP.NET 4.6和ASP.NET Core 1.0两个选项的原
因，这样就给出了应用程序的典型部署需求。
首先把Web应用程序部署到本地IIS上。
45.2.3 ASP.NET 4.6的配置文件
Web应用程序的一个重要部分是配置文件。在ASP.NET 
4.6中，该配置文件
（Web.config）采用XML格式，包含应用程序设置、数据库连接字符串、ASP.NET配置
（如身份验证和授权）、会话状态等，以及程序集重定向配置。
在部署方面，必须考虑这个文件的不同版本。例如，如果给运行在本地系统上的Web
应用程序使用不同的数据库，则在分阶段的服务器上有一个特殊的测试数据库，当然生产
服务器有一个实时数据库。这些服务器的连接字符串是不同的。此外，调试配置也不同。
如果为这些场景创建单独的Web.config文件，然后给本地Web.config文件添加一个新的配
置值，就很容易忽视其他配置文件的变更。
Visual Studio提供了一个特殊的功能来处理这一问题。可以创建一个配置文件，定义
文件应该如何传输给分阶段服务器和部署服务器。默认情况下，对于ASP.NET 
Web项
目，在Solution Explorer中有Web.config、Web.Debug.config和Web.Release.config文件。后
面的这两个文件只包含转换。也可以添加其他配置文件，例如用于分阶段的服务器。为
此，可以在Solution Explorer中选择解决方案，打开Configuration Manager，添加一个新的
配置（例如，如图45-5所示的临时配置）。一旦新的配置可用，就可以选择Web.config文
件，从上下文菜单中选择Add Config Transform选项。这会增加一个配置转换文件，它使
用配置的名称，例如Web.Staging.config。
图45-5
转换配置文件的内容只是定义了从原始配置文件的转换。例如，system.web下面的编
译元素改为删除debug特性，如下所示：
        "RemoveAttributes(debug)" />
45.2.4 ASP.NET Core 1.0的配置文件
ASP.NET Core 1.0的配置文件非常不同于之前的ASP.NET版本。默认情况下，使用
JSON配置文件，但是也可以使用其他文件格式，如XML文件。
project.json是项目的配置文件，其中包含NuGet包的依赖关系、应用程序元数据和支
持的.NET 
Framework版本。与前面的ASP.NET版本不同，这些信息与应用程序设置和连
接字符串分隔开。
可以在Startup类的构造函数中添加所有不同的应用程序配置文件。生成的默认代码用
扩展方法AddJsonFile添加appsettings.json文件，用扩展方法AddEnvironmentVariables添加
环境变量。ConfigurationBuilder的Build方法创建一个IConfigurationRoot，可以用来访问配
置文件中的设置。在ASP.NET 4.6中，包含为不同环境创建不同配置的转换。在ASP.NET
Core 1.0中，处理方式是不同的。这里使用一个JSON文件（其文件名中包含环境名）来定
义不同的设定（代码文件WebCoreFramework/Startup.cs）：
    public Startup(IHostingEnvironment env)
    {
      var builder = new ConfigurationBuilder()
        .AddJsonFile("appsettings.json")
        .AddJsonFile($"appsettings.{env.EnvironmentName}.json",
          optional: true);
      if (env.IsDevelopment())
      {
        builder.AddUserSecrets();
      }
      builder.AddEnvironmentVariables();
      Configuration = builder.Build();
    }
    public IConfigurationRoot Configuration { get; set; }
如果喜欢XML配置而不是JSON，那么可以添加NuGet包
Microsoft.Extensions.Configuration. Xml，使用AddXmlFile方法添加一个XML文件。
为了测试Visual Studio中的不同环境配置，可以在Project Properties的Debug设置中改
变环境变量EnvironmentName，如图45-6所示。
图45-6
  注意： 在开发环境中，用AddUserSecrets方法添加用户密钥。密钥（如用于
云服务的密钥）最好不要在用源代码存储库检入的源代码中配置。用户密钥把当前用
户的这些信息存储在其他地方。这个功能参见第40章。
45.3 部署到IIS
下面部署到IIS。将Web应用程序部署到IIS之前，需要确保IIS在系统上是可用的。可
以用Windows Features安装IIS（选择Programs and Features，使用Turn Windows Features On
or Off链接），如图45-7所示。
图45-7
至少需要这些选项：
● .NET Extensibility 4.6
● ASP.NET 4.6
● 默认文档
● 静态内容
● IIS Management Console
● IIS Management Scripts and Tools
● IIS Management Service
根据安全性和其他需求，还可能需要其他选项。
45.3.1 使用IIS Manager准备Web应用程序
启动IIS 
Manager之后，就可以准备服务器、安装Web应用程序了。图45-8显示了
Windows 10系统上启动的IIS Manager。
图45-8
1．创建应用程序池
Web应用程序需要在一个进程中运行。为此，需要配置一个应用程序池。在IIS
Manager中，Application Pools节点在左边的树视图中。选择这个节点来配置现有应用程序
池，以及创建新的应用程序池。
图45-9显示创建一个新的应用程序池ProCSharpPool。在Add Application Pool对话框中
可以选择.NET运行库的版本（.NET CLR版本）。对于.NET Framework 4.6和其他4.x版
本，需要选择.NET CLR 4.0运行库。注意，.NET Framework 4.0以后的版本更新了4.0运行
库，所以需要在系统上安装这些更新。在Windows 10和Windows Server 2016中，已经安
装了.NET 4.6。在这个对话框中也可以选择Managed Pipeline Mode。这里只需要知道，使
用Classic管道模式时，本地处理程序和模块在应用程序池内运行，而在Integrated管道模式
中，使用.NET模块和处理程序。所以在较新的应用程序中，通常最好坚持使用Integrated
管道模式。
图45-9
在创建应用程序池后，可以在Advanced Settings中配置更多的选项（参见图45-10）。
这里可以配置要使用的CPU核的数量、进程的用户身份、健康监控、Web 
Garden（要使
用的多个进程）等。
图45-10
2．创建网站
定义应用程序池之后，就可以创建网站。默认网站监听端口80上系统的所有IP地址。