### 路由器客户端部件和服务端点

路由器的客户端组件为服务定义了两个端点。为了测试路由服务，可以使用一个系统；通常情况下，该宿主运行在另一个系统上。协定可以设置为“*”，以允许所有协定传递给这些端点覆盖的服务。

#### 服务行为配置
服务的行为配置对于路由至关重要。通过前面的服务配置引用`behavior`配置中的`routingData`。在路由时，必须用行为设置路由元素，并使用`filterTableName`属性来引用路由表。过滤表`routingTable1`包含一个类型为`MatchAll`的过滤器，这个过滤器匹配每个请求。因此，来自客户端的所有请求都将被路由到端点`RoutingDemoService1`。如果此服务失败或无法访问，则后备列表变得非常重要。后备列表`failOver1`定义了第二个端点，在第一个端点失败时会使用它。

一旦设置了路由服务器和路由配置，就可以启动客户端并通过路由器调用服务。如果一切正常，客户端将从运行在宿主1上的服务中收到响应。如果停止宿主1而客户端发起新的请求，那么宿主2将负责返回响应。

### 改变协定的桥梁

如果需要路由器改变协议，可以通过配置宿主来实现，例如使用`netTcpBinding`代替`wsHttpBinding`。对于路由器而言，客户端配置需相应地引用另一个端点，从而改变其协定。

### 过滤器类型

示例应用程序中采用了`MatchAll`过滤器。WCF提供了多种其他类型的过滤器，如表44-9所示：

| 过滤器类型 | 描述 |
| --- | --- |
| Action | 根据消息上的动作启用过滤功能。参见`OperationContract`的`Action`属性。 |
| Address | 对位于SOAP头中的To字段中的地址启用过滤功能。 |
| AddressPrefix | 匹配地址的最佳前缀而非完整地址。 |
| MatchAll | 匹配每个请求。 |
| XPath | 使用XPath表达式来过滤消息头。可以利用消息协定向SOAP头添加信息。 |
| Custom | 如果需要基于消息内容进行路由，则需要自定义过滤器类型。创建此类时，需继承自`MessageFilter`基类，并通过构造函数初始化过滤器，其中可接受字符串参数。 |

当多个过滤器应用于同一请求时，可以为它们分配优先级。然而，建议避免使用优先级，因为这可能降低性能。

### 小结

本章介绍了如何使用Windows Communication Foundation (WCF) 在客户端与服务器之间进行通信。WCF不仅支持跨平台通信，还能充分利用特定的Windows功能。主要通过服务、数据和消息协定简化了客户端和服务的独立开发，并支持多平台环境下的应用。此外，还探讨了如何利用服务提供的元数据创建客户端，以及如何使用.NET接口协定创建客户端。本章也讨论了不同的绑定选项及其功能，包括创建自定义宿主和使用WAS宿主的方法，以及如何定义回调接口和实现双工通信。

---

### 部署网站和服务

#### 本章要点
- 准备部署
- 向Internet Information Server (IIS) 部署
- 向Microsoft Azure部署
- 使用Docker部署

#### 源代码下载
打开网页 [www.wrox.com/go/professionalcsharp6](http://www.wrox.com/go/professionalcsharp6)，点击Download Code选项卡即可下载本章源代码。主要示例文件包括：
- `WebDotnetFramework`
- `WebDotnetCore`

### 部署Web应用程序

传统上，ASP.NET Web应用程序部署在IIS上。但在.NET Core中，不再受限于特定版本的.NET Framework。.NET Core不仅可以在Windows上运行，也可以在Linux上运行，且所需的运行库作为应用程序的一部分一同交付，这为应用程序提供了更多部署选项。

#### 部署准备
部署Web应用程序所需的主要内容包括静态文件（HTML, CSS, JavaScript, 图像等）、编译后的二进制文件及数据库。配置文件也很重要，它们包含了应用程序设置和数据库连接字符串等信息。通常，不同环境（如测试、生产）之间的配置会有所不同。Visual Studio提供了一种特殊机制来处理这种差异，通过配置转换文件（如`Web.Debug.config`, `Web.Release.config`）来实现。

#### 创建ASP.NET 4.6 Web应用程序
使用Visual Studio的ASP.NET Web Application模板创建名为`WebDotnetFramework`的应用程序，选择MVC模板并启用个人用户账户认证。

#### 创建ASP.NET Core 1.0 Web应用程序
同样使用ASP.NET Web Application模板创建名为`WebDotnetCore`的应用程序，但这次选择ASP.NET Core 1.0模板，并再次启用个人用户账户认证。

#### ASP.NET 4.6的配置文件
在ASP.NET 4.6中，配置文件`Web.config`采用XML格式，包含了应用程序设置、数据库连接字符串等信息。Visual Studio允许通过配置转换文件来管理不同环境下的配置差异。

#### ASP.NET Core 1.0的配置文件
ASP.NET Core 1.0默认使用JSON格式的配置文件，如`appsettings.json`。还可以通过`ConfigurationBuilder`加载其他格式的配置文件，如XML。此外，还可以根据当前环境加载相应的配置文件（如`appsettings.Development.json`）。

#### 部署到IIS
要将Web应用程序部署到IIS，首先确保IIS已安装并启用了必要的功能。然后，使用IIS Manager创建应用程序池和网站，最后部署应用程序。

1. **创建应用程序池**：在IIS Manager中创建一个新的应用程序池，并配置.NET运行时版本和其他相关设置。
2. **创建网站**：在IIS Manager中创建一个新的网站，并将其绑定到适当的应用程序池。

这样，你就完成了将Web应用程序部署到IIS的过程。