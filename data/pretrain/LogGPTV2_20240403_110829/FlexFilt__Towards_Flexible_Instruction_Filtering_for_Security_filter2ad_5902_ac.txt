should be flexible, efficient, and fine-grained. To be compatible with
existing OS-supported memory protections, we implement FlexFilt
at page granularity, i.e., each executable page can apply a combina-
tion of the configured instruction filters. This design choice allows
us to leverage the already existing OS-managed structures such as
PTE as well as hardware structures such as Translation Lookaside
Buffer (TLB) in our implementation. While, providing a finer gran-
ularity for instruction filtering requires substantial modifications
at both OS-level and hardware-level.
We need to provide the OS support as well as a software API
to enable a software developer to use FlexFilt. In the rest of this
section, we will first discuss our hardware design choices, followed
by the OS support for FlexFilt, and then the software support to
configure our flexible instruction filters.
5.1 Hardware Design
In this section, we discuss the hardware design of FlexFilt.
Instruction Protection Domains. To leverage the existing OS-
5.1.1
level and hardware-level structures for memory protection, we im-
plement FlexFilt at page granularity. Inspired by the design of mem-
ory protection keys, we devise instruction protection keys, which
enable us to simply divide the software code into trusted and un-
trusted executable partitions. The software developer can assign
the same instruction protection key to a group of executable pages,
which subsequently creates instruction protection domains. The
existing memory protection keys such as Intel MPK are only appli-
cable to data memory accesses, not instruction addresses. Here, our
focus is on associating fetched instructions to protection domains
according to the corresponding address of each instruction.
Prior works [14, 15, 58] leverage the 10 unused bits of the RISC-V
Sv39/Sv48 PTE to store the memory protection key. Similarly, we
can utilize these 10 unused bits to store the instruction protection
keys, which provides up to 1024 instruction protection domains.
Supporting a large number of data memory protection domains is a
necessity in various use cases, such as Persistent Memory Object
(PMO) [66] and OpenSSL [49]. However, supporting a large num-
ber of domains is not required for instruction protection domains.
According to our literature review, previous works with the instruc-
tion filtering requirements only needed two instruction domains,
i.e., a trusted and an untrusted domain. However, providing only
two instruction protection domains could be restrictive for some
650ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
and shown by dark gray color in Figure 1) and passes through
the rest of the instruction bits (shown by transparent gray color in
Figure 1). The output of this control logic, which contains the don’t
care bits, is passed into a comparator module to be compared with
the Match. If these two values match, then the Flexible Filter
activates an output signal, indicating that current instruction should
be filtered. For additional information on the filtering capabilities
of our Flexible Filters, refer to Appendix A.
As mentioned before, an instruction protection domain is a group
of executable pages assigned with the same instruction protection
key. Each instruction protection domain prevents the execution of
various user-defined target instructions in its corresponding pages.
Ideally, we are interested in a flexible feature capable of filtering
any number of target instructions in each domain. In reality, pro-
viding such a capability is not practical due to resource limitations
and the substantial area and power overheads induced by such
excessive flexibility. With a limited number of instruction filters
for each domain, we consider two design options. First, each in-
struction domain has a fixed number of dedicated instruction filters.
Second, there is a fixed number of shared instruction filters, and
each instruction domain can apply a combination of these shared
filters to its corresponding pages. Although the first option provides
more flexibility in terms of filtering capabilities, it requires more
hardware resources. Additionally, the instruction filter information
for all the domains should be maintained by the OS during context
switches. Considering the overheads involved with the first design
option, we choose the second option in our design. We leave further
investigation into the overheads involved in implementing the first
design option as part of our future work.
By choosing the second design option, i.e., a fixed number of
shared configurable instruction filters, the next design question we
have to answer is the exact number of shared instruction filters. To
choose the number of instruction filters, we examine the number
of required filters in the previous works (listed in Table 1). Most of
the previous works required to filter only one target instruction. In
the worst case scenario, Fidelius [65] needed to filter the execution
of three unique instruction types (five instructions in total). Con-
sidering the possibility of enforcing a combination of protection
mechanisms, we choose to implement four shared instruction fil-
ters in our design.2 Subsequently, each instruction domain can be
configured to apply a combination of the shared instruction filters.
5.1.3 Microarchitecture Support. In our design, FlexFilt supports
up to 16 instruction domains and provides four Flexible Filters,
where a combination of these filters is applicable to each instruc-
tion domain. For each page, we specify the instruction domain by
storing the ipkey in the 4 previously unused bits of PTE. For each
instruction execution, in addition to checking the PTE permission
bits (e.g., the X bit, which indicates that the page is executable), we
need to determine if the instruction should be filtered. To this end,
we first have to identify the corresponding domain of the instruc-
tion. At hardware level, the Instruction TLB (I-TLB) maintains the
virtual to physical address translation of the instructions as well as
their corresponding permission bits. We augment the I-TLB with
a new field to store the associated ipkey of each virtual address.
2Note that with four instruction filters we can filter all the target instructions in
Fidelius [65] based on their instruction type.
Figure 1: The Flexible Filter design, applied to a subset of
RISC-V branch instructions.
use cases (e.g., the combination of various protection mechanisms).
Intuitively, we would not need 1024 instruction domains, even if
we apply all the protection mechanisms proposed by a variety of
the previous works into a single system. As a trade-off for the
number of instruction domains, we utilize the 4 lower bits of the
10 unused bits in the PTE to store the instruction protection keys
(ipkey). Accordingly, FlexFilt supports up to 16 instruction protec-
tion domains, where each domain filters target instructions in the
domain’s corresponding pages.
Flexible Filters. One of the main design goals of FlexFilt is
5.1.2
providing flexible instruction filters, capable of filtering various
target instructions. To achieve this goal, we design each filter in
an inherently flexible way. We leverage a bit-granular match/mask
mechanism, similar to the matching mechanism used in the prior
work [16, 17]. This design choice enables us to filter one specific
instruction or a group of instructions with one Flexible Filter.
As an example, consider various branch instructions, including BEQ,
BNE, BLT, BGE, BLTU, and BGEU, in the RISC-V ISA. These branch
instructions share the same opcode value (1100011) and they are
distinguished based on the value of funct3 bits. In this scenario,
a flexible bit-granular instruction filter offers the user the option
of filtering a specific branch instruction, a subset of the branch
instructions, or all of the above-mentioned branch instructions.
Consider a scenario where the user is interested in filtering
four of the previously mentioned branch instructions, i.e., BLT, BGE,
BLTU, BGEU. Figure 1 shows the format of these instructions. The
common bits of these instructions, specified with a green box, can
be used for identifying them. In this example, the uncommon bits
are don’t cares. Accordingly, the software developer can simply
describe the four branch instructions using Match and Mask bits.
The Match bits specify the 32-bit value of an instruction identified
as one of the four branch instructions and the Mask bits specify the
don’t care bits. At the hardware level, our Flexible Filters
enforce such a matching/masking approach (the bottom part of
Figure 1). The control logic of the Mask acts like a filter that blocks
the masked parts of an instruction (specified by 1 bits in the Mask
100rs1rs2imm[12|10:5]1100011imm[4:1|11]BLT101rs1rs2imm[12|10:5]1100011imm[4:1|11]BGE110rs1rs2imm[12|10:5]1100011imm[4:1|11]BLTU111rs1rs2imm[12|10:5]1100011imm[4:1|11]BGEU----------------1-------110001100000000000000001000000011000111111111111111111011111110000000Match bits:Mask bits:Configuring the match/masks bits of a filter at software levelFiltering an instruction at hardware level0000000001111100111001001100011Runtime instruction: 0x03776263 (bltu  a4,s7,112aa)----------------1-------1100011Mask0000000000000000100000001100011MatchFlexible FilterComparatorFilter?651FlexFilt: Towards Flexible Instruction Filtering for Security
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 2: Simplified overview of the modifications to the RISC-V Rocket core to support FlexFilt. The blue, yellow, and gray
colors show the new, minimally modified, and unmodified components, respectively.
Whenever there is an I-TLB miss, the hardware Page Table Walker
(PTW) walks the page table and fills the I-TLB with the missing in-
formation including the ipkey. As each instruction domain applies
a combination of the Flexible Filters, we need to maintain the
configured combination of each domain. To this end, for each do-
main, we associate a valid bit to each of the Flexible Filters. We
store all the valid bits in a separate 64-bit register, called Instruction
Protection Register (IPR).
Figure 2 demonstrates our modifications to the RISC-V Rocket
core [2] to implement FlexFilt. The modified I-TLB stores the ip-
key information (received from PTW) for each entry. On an I-TLB
hit, the ipkey value gets transferred to the I-Cache (alongside the
physical address) and subsequently on an I-Cache hit, the instruc-
tion and its associated ipkey gets stored in the Instruction Queue.
Subsequently, the ipkey value gets transferred to the decode and
then execute stage without any modifications. At the execute stage,
FlexFilt uses the ipkey value to read the corresponding valid bits
(4-bits) of the instruction domain from IPR. In the same cycle, each
of the 4 Flexible Filters receives the 32-bit instruction in the
execute stage, and performs the filtering operation based on its
Match and Mask bits configuration (Figure 1). If the resulting filter
signal of any of the Flexible Filters is high and at the same
time its corresponding valid bit is active, then FlexFilt prevents
the execution of the instruction by causing an illegal instruction
exception.
5.1.4 Unprivileged vs Privileged Target Instructions. While Figure 2
shows the main components of FlexFilt to filter unprivileged in-
structions, this implementation does not take the privilege level of
the instructions into account. As discussed in Section 2, some of
the previous works focused on preventing the execution of target
instructions in the kernel space while others focused on preventing
the execution in user space. To filter instructions in user space, we
simply access the priv field provided in the MStatus CSR of the
Rocket core and only apply the Flexible Filters on user-level
instructions. To filter the target instructions at kernel level, we
use a similar approach as PMPs. We add two pairs of new CSRs to
store the physical address range for filtering kernel-level instruc-
tions. To specify the kernel-level target instructions, we implement
four dedicated Flexible Filters. These dedicated filters are only
applicable to kernel-level instructions executing in the physical
address range specified with our newly added CSRs. The above-
mentioned CSRs and dedicated filters can only be configured from
the machine mode.
5.2 OS support
FlexFilt is capable of filtering target instructions in OS-managed
processes as well as the kernel itself. In our design, we consider
scenarios where each user-space process can filter different target
instructions. To enable a per-process instruction filtering capability,
PPage#ipkeyVPage#00001150450018412202805600000111110...I-TLBXExpanded instruction (ex_reg_instr)FlexibleFilter0FetchDecodeExecuteexception(illegal instruction)DATAArray====TAGArrayI-Cachepaddr, ipkeyInstructionQueuevaliddout(instr, pc,ipkey)pteDecode, Arbitration,Stall Detection LogicIPR01415V0V1V2V3...V0V1V2V3V0V1V2V3ipkeyV0V1V2V3IPR Control LogicPTWFlexibleFilter1FlexibleFilter2FlexibleFilter3652ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
we need to provide the OS support for FlexFilt. In this section, we
discuss the Linux kernel modifications to support FlexFilt.
Instruction Protection Keys. We implement our instruction
5.2.1
protection keys on top of the existing support for memory pro-
tection keys. The Linux kernel provides three new system calls,
i.e., pkey_mprotect, pkey_alloc, and pkey_free, to support In-
tel MPK. pkey_mprotect is an extension to mprotect system call.
In addition to updating the permission bits of the PTEs of spec-
ified pages, pkey_mprotect assigns a protection key to the PTE.
pkey_alloc and pkey_free system calls enable a software devel-
oper to allocate and free a protection key, respectively. The kernel
implements an allocation bitmap (16-bit for Intel MPK) to keep track
of the allocated pkeys. The recent works on memory protection
keys for RISC-V [14, 58] extend the Linux kernel support of memory
protection keys to the RISC-V ISA. We modify the existing support
for pkey_alloc and pkey_mprotect in the kernel to allocate an
instruction protection key and associate the specified executable
pages with an ipkey, respectively. We add a new flag to pkey_alloc
and pkey_mprotect system calls to identify an instruction protec-
tion operation. Unlike the existing memory protection proposals
on RISC-V, we only use 4 bits of the unused PTE bits to store our
protection keys. Hence, we add an instruction allocation bitmap to
keep track of 16 instruction protection domains.
5.2.2 Per Process OS Support. To enable a per process view for in-
struction protection domains, we maintain the domain information
during context switches. We modify the task_struct in the Linux
kernel to keep the configuration of each Flexible Filter, which
includes the Match and Mask bits. Additionally, we maintain the
bitmap of allocated ipkeys as well as IPR contents. In Section 7, we
discuss the overhead of maintaining FlexFilt information during
context switches.
5.2.3 Kernel-Level Instruction Filtering Support. The kernel-level
Flexible Filters and their corresponding physical address range
CSRs can only be configured from the machine mode. In the RISC-V
environment, the Berkeley Boot Loader (BBL) [56] enables us to
configure our kernel-level filters and their CSRs from the machine
mode, prior to booting up the Linux kernel. As our kernel-level
filters are applicable to all processes, we do not need to maintain
their configuration during context switches.
5.3 Software Support
For configuring FlexFilt, we leverage the standard RISC-V custom
instruction extension to define new instructions. Table 2 shows our
software API and the unprivileged custom instructions that each
API invokes to configure FlexFilt. We provide the config_filter
function to configure each Flexible Filter by specifying its corre-
sponding Match, Mask, and privilege bits. The software developer
can leverage the config_instr_domain function to set the valid
bit of a Flexible Filter for a specific instruction domain. We also
provide five privileged custom instructions, which are accessible
only at the supervisor level. We leverage these five instructions to
maintain FlexFilt’s information during context switches.
We leverage the pkey_mprotect system call to associate a group
of executable pages, specified by addr and len, with an ipkey. Mul-
tiple functions with non-contiguous address ranges can be assigned
Table 2: FlexFilt’s Application Programming Interface (API).
Function
config_filter(uint32_t match,
uint32_t mask, uint8_t priv, uint8_t index)
config_instr_domain(uint64_t d_index,
uint64_t v_index)
Invoked
Custom Instruction
SETMATCH, SETMASK,
and SETPRIV
WRIPR
with the same ipkey and subsequently create one instruction do-
main. To invoke the pkey_mprotect system call, we should obtain
the address range of each instruction domain. In a deployed system,
the software developer can annotate the source code to specify the
sections of the program belonging to an instruction domain. Then,
we can modify the loader to invoke pkey_mprotect based on the
extracted information from annotations. Rather than modifying
the compiler and the loader, as a proof of concept, we leveraged
LD_PRELOAD. We leave the required modifications to the loader as
part of our future work.
As an example, consider the scenario we described in Section 2.
In this scenario, a software developer wants to allow the execution
of WRPKRU instruction in two trusted functions (good_code1 and
good_code2) while preventing the execution of WRPKRU in other
parts of the code. To specify the trusted instruction domain, we first
allocate a new ipkey (via pkey_alloc system call). By assigning