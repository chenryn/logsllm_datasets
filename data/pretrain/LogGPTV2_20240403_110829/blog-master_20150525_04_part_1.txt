## use PostgreSQL async Notification as a chat group  
### 作者                                                                                                                                              
digoal                                                                                                                                              
### 日期                                                                                                                                               
2015-05-25                                                                                                                                   
### 标签                                                                                                                                              
PostgreSQL , 异步消息 , 聊天组        
----                                                                                                                                                          
## 背景                                                                                   
PostgreSQL 提供了一个很有意思的异步消息通信功能。  
利用这个功能，可以实现很多有趣的想法，例如离线聊天组，数据逻辑复制，审计日志等。  
notify就是往一个指定的通道发消息。  
```  
postgres=# \h notify  
Command:     NOTIFY  
Description: generate a notification  
Syntax:  
NOTIFY channel [ , payload ]  
```  
listen就是监听一个指定的通道。  
```  
postgres=# \h listen  
Command:     LISTEN  
Description: listen for a notification  
Syntax:  
LISTEN channel  
```  
一个客户端可以往多个通道发消息，也可以监听来自多个通道的消息。  
例子：  
1\. 大伙首先要加到一个聊天组（channel）  
```  
session A:  
postgres=# listen cnpug;  
LISTEN  
session B:  
postgres=# listen cnpug;  
LISTEN  
```  
1\. 大伙往这个聊天组发消息，自己发的消息会立即收到。  
```  
SESSION A:  
postgres=# notify cnpug, 'hello, every body.';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello, every body." received from server process with PID 45729.  
```  
3\. 大伙可以随时去取聊天组的历史消息，不是自己发的消息，要使用listen去获取。  
```  
SESSION B:  
postgres=# listen cnpug;  
LISTEN  
Asynchronous notification "cnpug" with payload "hello, every body." received from server process with PID 45729.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
SESSION A:  
postgres=# listen cnpug;  
LISTEN  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
```  
如果很长时间没有接收消息，会有很多堆积的。  
```  
SESSION B:  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
postgres=# notify cnpug, 'hello1';  
NOTIFY  
Asynchronous notification "cnpug" with payload "hello1" received from server process with PID 46882.  
SESSION A:  
postgres=# listen cnpug;  
LISTEN  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello" received from server process with PID 46882.  
Asynchronous notification "cnpug" with payload "hello1" received from server process with PID 46882.  
```  
4\. 如果有新的小伙伴要加入聊天组，只能看到加入后大家发的消息，以前的消息是看不到的。  
```  
postgres=# listen cnpug;  
LISTEN  
```  
以前发的消息不会显示，即使还在队列里面也不会显示。  
5\. 退出聊天组  
```  
unlisten cnpug;  
```  
除此之外，异步消息还可以用于审计，数据复制等场景。  
例如tcn插件就是一个类似审计或数据复制的场景。  
```  
test=# create table tcndata  
test-#   (  
test(#     a int not null,  
test(#     b date not null,  
test(#     c text,  
test(#     primary key (a, b)  
test(#   );  
CREATE TABLE  
```  
创建触发器，当发生dml操作时，调用triggered_change_notification函数发出notify.  
```  
test=# create trigger tcndata_tcn_trigger  
test-#   after insert or update or delete on tcndata  
test-#   for each row execute procedure triggered_change_notification();  
CREATE TRIGGER  
```  
监听tcn通道  
```  
test=# listen tcn;  
LISTEN  
```  
现在你会发现每当执行DML时，我们可以从tcn通道接收到triggered_change_notification函数发出的异步消息。  
```  
test=# insert into tcndata values (1, date '2012-12-22', 'one'),  
test-#                            (1, date '2012-12-23', 'another'),  
test-#                            (2, date '2012-12-23', 'two');  
INSERT 0 3  
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.  
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.  
Asynchronous notification "tcn" with payload ""tcndata",I,"a"='2',"b"='2012-12-23'" received from server process with PID 22770.  
test=# update tcndata set c = 'uno' where a = 1;  
UPDATE 2  
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.  
Asynchronous notification "tcn" with payload ""tcndata",U,"a"='1',"b"='2012-12-23'" received from server process with PID 22770.  
test=# delete from tcndata where a = 1 and b = date '2012-12-22';  
DELETE 1  
Asynchronous notification "tcn" with payload ""tcndata",D,"a"='1',"b"='2012-12-22'" received from server process with PID 22770.  
```  
使用这个方法，可以用于审计或数据异步复制。  
异步消息的代码见：  
src/backend/commands/async.c  
注意允许的队列长度限制，超出的话会报队列满的错误。  
另外需要注意一条消息的长度，和数据块的大小接近。  
```  
/*-------------------------------------------------------------------------  
 * Async Notification Model as of 9.0:  
 *  
 * 1. Multiple backends on same machine. Multiple backends listening on  
 *        several channels. (Channels are also called "conditions" in other  
 *        parts of the code.)  
 *  
 * 2. There is one central queue in disk-based storage (directory pg_notify/),  
 *        with actively-used pages mapped into shared memory by the slru.c module.  
 *        All notification messages are placed in the queue and later read out  
 *        by listening backends.  
 *  
 *        There is no central knowledge of which backend listens on which channel;  
 *        every backend has its own list of interesting channels.  
 *  
 *        Although there is only one queue, notifications are treated as being  
 *        database-local; this is done by including the sender's database OID  
 *        in each notification message.  Listening backends ignore messages  
 *        that don't match their database OID.  This is important because it  
 *        ensures senders and receivers have the same database encoding and won't  
 *        misinterpret non-ASCII text in the channel name or payload string.  
 *  
 *        Since notifications are not expected to survive database crashes,  
 *        we can simply clean out the pg_notify data at any reboot, and there  
 *        is no need for WAL support or fsync'ing.  
 *  
 * 3. Every backend that is listening on at least one channel registers by  
 *        entering its PID into the array in AsyncQueueControl. It then scans all  
 *        incoming notifications in the central queue and first compares the  