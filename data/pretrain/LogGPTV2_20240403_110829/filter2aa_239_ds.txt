读取器同样用CreateViewStream创建了一个映射视图流，但这次需要读取权限。现在
可以使用StreamReader（）方法从共享内存中读取内容：
    private async Task ReaderUsingStreams()
    {
      try
      {
        WriteLine("reader");
        _mapCreated.Wait();
        WriteLine("reader starting");
        using (MemoryMappedFile mappedFile = MemoryMappedFile.OpenExisting(
          MAPNAME, MemoryMappedFileRights.Read))
        {
        MemoryMappedViewStream stream = mappedFile.CreateViewStream(
            0, 10000, MemoryMappedFileAccess.Read);
        using (var reader = new StreamReader(stream))
        {
          _dataWrittenEvent.Wait();
          WriteLine("reading can start now");
          for (int i = 0; i  Reader());
      Task.Run(() => Writer());
      ReadLine();
    }
创建一个AnonymousPipeServerStream，定义PipeDirection.In，把服务器端充当读取
器。通信的另一端需要知道管道的客户端句柄。这个句柄在GetClientHandleAsString方法
中转换为一个字符串，赋予_pipeHandle变量。这个变量以后由充当写入器的客户端使
用。在最初的处理后，管道服务器可以作为一个流，因为它本来就是一个流：
    private void Reader()
    {
      try
      {
        var pipeReader = new AnonymousPipeServerStream(PipeDirection.In,
        HandleInheritability.None);
        using (var reader = new StreamReader(pipeReader))
        {
        _pipeHandle = pipeReader.GetClientHandleAsString();
        WriteLine($"pipe handle: {_pipeHandle}");
        _pipeHandleSet.Set();
        bool end = false;
        while (! end)
        {
          string line = reader.ReadLine();
          WriteLine(line);
          if (line == "end") end = true;
        }
        WriteLine("finished reading");
        }
      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
客户端代码等到变量_pipeHandleSet发出信号，就打开由_pipeHandle变量引用的管道
句柄。后来的处理用StreamWriter继续：
    private void Writer()
    {
      WriteLine("anonymous pipe writer");
      _pipeHandleSet.Wait();
      var pipeWriter = new AnonymousPipeClientStream(
        PipeDirection.Out, _pipeHandle);
      using (var writer = new StreamWriter(pipeWriter))
      {
        writer.AutoFlush = true;
        WriteLine("starting writer");
        for (int i = 0; i 
添加到Grid中的TextBox接收文件的内容：
OnOpen句柄首先启动对话框，用户可以在其中选择文件。记住，前面使用了
OpenFileDialog。在Windows应用程序中，可以使用选择器。要打开文件，FileOpenPicker
是首选的类型。可以配置此选择器，为用户定义建议的开始位置。将
SuggestedStartLocation设置为PickerLocationId. 
DocumentsLibrary，打开用户的文档文件
夹。PickerLocationId是定义各种特殊文件夹的枚举。
接下来，FileTypeFilter集合指定应该为用户列出的文件类型。最后，方法
PickSingleFileAsync返回用户选择的文件。为了让用户选择多个文件，可以使用方法
PickMultipleFilesAsync。这个方法返回一个StorageFile。StorageFile是在Windows.Storage
名称空间中定义的。这个类相当于FileInfo类，用于打开、创建、复制、移动和删除文件
（代码文件WindowsAppEditor / MainPage.xaml.cs）：
    public async void OnOpen()
    {
      try
      {
        var picker = new FileOpenPicker()
        {
        SuggestedStartLocation = PickerLocationId.DocumentsLibrary
        };
        picker.FileTypeFilter.Add(".txt");
        StorageFile file = await picker.PickSingleFileAsync();
        //...
现在，使用方法OpenReadAsync（）打开文件。这个方法返回一个实现了接口
IRandomAccessStream-WithContentType的流，IRandomAccessStreamWithContentType派生
于接口IRandomAccessStream、IInputStream、IOuputStream、IContentProvider和
IDisposable。IRandomAccessStream允许使用Seek方法随机访问流，提供了流大小的信
息。IInputStream定义了读取流的方法ReadAsync。IOutputStream正好相反，它定义了
WriteAsync和FlushAsync方法。IContentTypeProvider定义了属性ContentType，提供文件内
容的信息。还记得文本文件的编码吗？现在可以调用ReadAsync（）方法，读取流的内