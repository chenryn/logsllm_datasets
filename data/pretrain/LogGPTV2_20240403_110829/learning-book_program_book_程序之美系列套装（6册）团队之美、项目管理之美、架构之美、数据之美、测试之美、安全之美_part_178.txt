throws (l: FacebookApiException error_response)
上
这个例子中的类型是原生类型（string）、结构（location、user）或
泛型方式的集合（list）。因为每个方法描述都有精心设计
类型的方法签名，定义复用的类型的代码就可以直接在任何语言中
生成。例6-8展示了针对PHP的部分生成结果。
例6-8：Thriif生成的服务代码
class apii0_user{
public$uid=null:
public$name=null;
public$books=null:
public$pic=null:
public$current_location=null;
public function__construct ($vals=null) (
if (is_array ($vals)){
if (isset ($vals[*uid])){
$this->uid=$vals ['uid'];
上
if (isset ($vals[*name ']) ){
$this->name=$vals ['name'] ;
if (isset ($vals[*books*])){
$this->books=$vals['books']:
F
999
---
## Page 1001
if (isset ($vals[*pic*]) ){
$this->pic=$vals['pic'];
if (isset (Svals[*current_location*])){
$this->current_location=$vals['current_location*]:
/ / ..
上
 / /..
上
返回user类型的所有内部方法都会创建全部需要的字段，结束的语
句类似例6-9的样子。
例6-9：一致地使用生成的类型
return new api_10_user ($field_vals):
例如，如果currentlocation（当前位置）出现在这个用户对象中，
那么Sfield_vals['current_location]就会在例6-9的代码执行之前，被
赋值为newapi_10_user（......）。字段的名称和类型本身实际上会
生成XML输出所需的schema，以及相应的XMLSchema文档
（XSD）。例6-10展示了整过RPC过程实际输出的XML。
例6-10：Web服务调用的XML输出
1000
---
## Page 1002
Dave Fetterman
Zen and the Art, The Brothers K, Roald Dahl
San Francisco
CA
94110
Thrif生成类似的代码来声明RPC函数调用、序列化成已知的输出格
式，并将内部的异常转化成外部错误代码。其他像XML-RPC或
SOAP这样的工具集也提供这样一些好处，但可能需要更多的CPU和
带宽开销。
使用像Thrift这样的漂亮工具有以下好处：
自动化类型同步
在user类型中添加"favorite_records”，或将uid转换成i64需要在所有
使用或生成这些类型的方法中进行。
自动化绑定生成
所有读写类型的麻烦工作都不需要了，转换函数调用生成XML的
RPC方法要求函数声明、类型检查和错误处理，这些都由Thrift自动
完成。
自动化文档
1001
---
## Page 1003
Thrift生成公开的XMLSchema文档，它将作为外界看到的无二义的
文档，通常比在“手册”上看到的文档要好得多。这种文档也可以直
接在一些外部工具中使用，生成客户端的绑定。
跨语言同步
这个服务可以由外部的XML客户端或JSON客户端调用，内部是通
过各种语言（PHP、Java、C++、Python、Ruby、C#等）写的服务程
序通过套接口来通信的。这要求基于元数据的代码生成，这样服务
的设计者就不必在每次小改动时花时间更新这些代码。
我们已经有了社会关系网站服务的数据组件。接下来我们将弄清楚
如何建立这些会话键，在所有Facebook扩展上强制实现用户期望的
隐私模型。
6.2.2简单的Web服务认证握手
一个简单的认证策略让我们能够在尊重Facebook用户的隐私观点的
前提下访问这些数据。用户对Facebook系统的数据有某种特定的视
图，这取决于用户是谁、用户的隐私设定，以及与用户有关系的人
的隐私设定。用户可以授权单个应用来继承这一视图。用户通过某
个应用可以看到的信息，是用户通过Facebook可以看到的信息中有
意义的一部分（但不会超出通过Facebook可以看到的信息）。
在独立应用站点的架构中（图6-1），用户认证通常采用浏览器发送
cookie的方式，这些cookie是该站点在最初执行过认证动作之后生成
的。但是在图6-2中，通常作为Facebook用法一部分的cookie不再提
供了一外部应用需要在没有用户浏览器的帮助下从Facebook平台请
求信息。为了修正这一点，我们在会话键映射的基础上设计
Facebook，如例6-11所示。
例6-11：会话键映射
get_session: (user_id,application_id)->session_key
Web服务的客户端只要在每次请求时发送session_key，让Web服务知
道这代表的是哪个用户的请求执行。如果用户（或Facebook）禁用
了这个应用，或者他从未用过这个应用，安全检查就会通不过，会
1002
---
## Page 1004
返回一个错误。否则，外部应用站点会把这个会话键记入它自己的
用户记录，或者放到该用户的cookie中。
但在最开始如何得到这个会话键呢？在http://fettermansbooks.com应
用代码中的establish_facebook_session是一个占位符，为这个过程保
留的。每个应用都有它自己特有的"应用键”（也称为api_key），开
始应用认证流程（图6-3）：
1.用户通过一个已知的api_key重定向到Facebook登录界面。
2.用户在Facebook上输入口令，对这个应用授权。
3.用户带着会话键和用户ID重定向到已知的应用。
4.应用现在获得了授权，可以代表用户调用API方法（除非会话超时
或被删除）。
要帮助用户发起这个流程，可以使用下面包含应用键（即
"abc123”）的链接或按钮：
如果用户通过Facebook上口令输入同意授权给这个应用（注意，口
令是Facebook最需要保护的数据），用户就被重定向回这个应用站
点，带着有效的会话键和Facebook用户ID。这个会话键是非常私密
的，所以对于将来的验证，应用的所有调用都会带有从这个共享秘
密生成的散列值。
假定开发者隐藏了他的api_key和应用私密数据，
establish_facebook_session可以很简单地按图6-3中的流程来编写。尽
管这种类型的系统握手的细节可以不同，但重要的是只有当用户在
Facebook上的关键步骤中输入了他的口令，才会产生授权。很有趣
的是，一些早期的应用只是使用了这种认证握手来作为它们的口令
系统，而根本没有使用其他的Facebook数据。
1003
---
## Page 1005
fettermansbooks.com
facebook.com
books.php
（重定向）
www.facebook.com/
非Facebook会话
api_key=abc123
login?
（在授权之后重定向）
存储会话
基于会话的
books.php?
API调用
session_key=345def
api.facebook.com
&uid=8055
FB会话
jfettermans-
存储会话，
books.com的用户ID关联
应用会
图6-3：对Facebook平台API的认证访问
但是，某些应用不容易适应这种第二步“重定向"的方式。“桌面"风
格的应用、基于设备的应用（如手机应用），或浏览器内建的应用
有时候也相当有用。在这种情况下，我们采用一种稍微不同的机制
来使用第二次认证令牌。令牌是应用通过API请求得到的，在第一
次登录时传递给Facebook，然后在现场用户认证之后，应用换到一
个会话键和会话专有的一些私密信息。
6.3创建社会关系数据查询服务
通过一个带有用户控制的认证握手的Web服务，我们已经将我们的
内部库扩展到外部世界。通过这个简单的改变，Facebook的社会关
系数据现在可以驱动其用户决定认证的任何其他应用程序，通过普
遍关注的社会关系上下文，在应用的数据中创建新的关系。
1004
---
## Page 1006
随着用户渐渐了解这些数据交换的无缝性，使用这些平台API的开
发者知道这些数据集是很独特的。并发者访问自己的数据的模式与
访问Facebook数据的模式有着很大的不同。例如，Facebook的数据
位于HTTP请求的另一端，通过许多HTTP连接来调用这些方法增加
了开发者自己页面的延迟和并销。他自己的数据库也提供了更大粒
度的访问，优于Facebook平台API中的几十个方法。使用他自己的
数据和SQL这样熟悉的查询语言，他可以选择一个表的特定字段，
对结果集排序或进行限制，匹配其他的指标，或进行嵌套查询。如
果平台的API不能够让开发者在平台的服务器上进行智能的处理，
开发者就必须经常获取相关数据的超集，收到数据后再在他自已的