            flag_encrypted = encryptor.update(flag_padded) + encryptor.finalize()
            print("Your encrypted flag is:")
            print(binascii.hexlify(flag_encrypted).decode())
其中 `init` 函数是 AES 秘钥扩展, `encrypt` 是 AES 轮函数, 但是改变了 AES 原来的常数, 这两个函数也是本题的核心,
我们留到后面讲. 这里假设我们已经写出对应的解密函数,
看到 `iv = encrypt(key, Ke)`, 可以看到 iv 就是 key 的加密, 只要我们能获得 `iv`, 就能解密出 `key`,
从而解密得到 `flag`.
注意到这里是用 AES 解密输入的数据, 结合 CBC 模式
我们可以输入两个相同分块(b1 + b1')长度的数据, 其中解密结果的第二块(o2)是这样算出来的  
`xor(AESdec(b1'), b1) = o2`  
而 `o2`, `b1` 都是已知的, 我们就可以解出 `AESdec(b1)`, 因为我们输入的两个分块相同,  
我们将 `AESdec(b1)` 与 `o1` xor 一下, 就能得到 `iv`, 这时只要用 `K` 解密 `iv` 就能得到 `key`  
从而解密 `flag`.
但问题就是这里出题人魔改了 AES, 不能直接解密, 这里最好自己写过一遍 AES 的实现, 否则接下来有些部分可能不太方便,  
首先可以搜到作者魔改的[原代码](https://github.com/ricmoo/pyaes/blob/master/pyaes/aes.py)  
可以看到 Sbox, T1-4 都被修改, 并且没有给出对应的逆变换
`S = [0x63, 0x7c, 0x77, 0x7....`  = GF(2^8, modulus=[1,1,0,1,1,0,0,0,1])
    sage: F.modulus()
    x^8 + x^4 + x^3 + x + 1
    sage: def f(num):
    ....:     global F
    ....:     return F.fetch_int(num)
    ....: 
    sage: for i in range(0,256):
    ....:     if f(0x93)*f(i)==f(0xf4):
    ....:         print(i)
    ....:         
    8
    sage: for i in range(0,256):
    ....:     if f(0x93)*f(i)==f(0x67):
    ....:         print(i)
    ....:         
    9
    sage: for i in range(0,256):
    ....:     if f(0x93)*f(i)==f(0xd4):
    ....:         print(i)
    ....:         
    7
    sage: for i in range(0,256):
    ....:     if f(0x93)*f(i)==f(0xe9):
    ....:         print(i)
    ....:         
    5
那么四个因数是 `(8, 5, 7, 9)`, 还原成矩阵求 GF(2^8) 上的逆矩阵, 再用一下 `sage`, 当然如果是大佬可以手算
_(:з”∠)_
    sage: c = matrix(F, [[f(8), f(5), f(7), f(9)], [f(9), f(8), f(5), f(7)], [f(7), f(9), f(8), f(5)], [f(5), f(7), f(9), f(8)]])
    sage: c.inverse()
    [      x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1]
    [x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1]
    [      x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x           x^7 + x^6 + x^3]
    [          x^7 + x^6 + x^3       x^7 + x^4 + x^2 + 1 x^5 + x^4 + x^3 + x^2 + 1       x^7 + x^4 + x^2 + x]
转换回数字表示就是  
`cofes = (150, 200, 149, 61)`  
带进 invMixColumn 就可以正确解密啦, 如果没有自己写过的话,
可以参考我写的[辣鸡实现](https://github.com/rmb122/Cryptography/blob/master/AES-128-CBC.py)  
修改 `mixColumn` 和 `invMixColumn` 里面的 `polynomialMutil` 函数乘的数为矩阵对应位置的数就行了
既然现在可以解密, 按着上面的思路就能拿 `flag` 了~  
接下来 nc 一下, 输入 16 个 1,
    Input a hexstr to decrypt:
    3131313131313131313131313131313131313131313131313131313131313131
    Decrypted result:
    3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c
    Your encrypted flag is:
    c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812
    from Crypto.Cipher import AES as stdAES
    from Crypto.Util.strxor import strxor
    K = b"\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10"
    hexstr = '11111111111111111111111111111111'.encode()
    dec = unhexlify('3205fe135b595e72c90d2613ada3087812f10dee01e66c4d1e47089a0ff0f18c')
    midVal = strxor(dec[16:32], hexstr[0:16])
    iv = strxor(dec[0:16], midVal)
    aes = AES()
    key = aes.decryptBlock(iv, K)
    print(key)
    print(iv)
    flag = unhexlify('c2c06ee0e21dae7e5b64fcb84397b4ed920c28bb81a676d817a4b920564bd04dd2a570900ff2e9d5fee9cb74c37c4812')
    stdaes = stdAES.new(key, stdAES.MODE_CBC, iv)
    print(stdaes.decrypt(flag))
    '''
    b'N\t\x9c\xce*\xfa\xc1\x02\x94\xd1\x02\xf2\xb8d*E'
    b'\x11\xc5\xc2\xcck\x8e\x03\x0e\xe6{\x1f\xb8\x93b\xc8\xc5'
    b'RCTF{88358abe-e571-4bdf-95a3-93e9d8ddf558}\x06\x06\x06\x06\x06\x06'
    '''
这样子求解, 比直接爆破四个因数优雅很多, 而且之后遇到类似题目, 修改列混合的因数, 可以直接按照上面的方法通杀