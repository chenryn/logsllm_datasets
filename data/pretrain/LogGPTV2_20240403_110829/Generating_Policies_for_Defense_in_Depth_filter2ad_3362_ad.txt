removed during system development, resulting in \or-
phaned" policies, many eyes, validation scanning, and
daily coordination on development progress and con-
cerns helped avoid that risk. Also, having a single-
source for policies means that the orphans will be gen-
erated only if the functionality is completely orphaned
and not on account of missing a change in some other
area.
The validation support tools also worked well. The
ADF connection speci(cid:12)cation and dot diagrams clar-
i(cid:12)ed what was being enforced better than either the
JVM policies that produced it or the ADF XML pol-
icy that resulted from it. In particular, since the JVM
policy author only (cid:12)lled in a template using variables
(as discussed in Section 4), the actual values for some
policy elements were not easily visible until the con-
nection speci(cid:12)cation was generated.
We used a variety of management interfaces to con-
(cid:12)gure policy for DPASA. JVM and SELinux were text-
based and con(cid:12)gured using an editor and common com-
mand line tools. CSA and ADF were GUI-based, but
we avoided using ADF’s GUI to develop policies. In-
stead, we used common command line tools like m4 and
awk to construct and translate the connection spec-
i(cid:12)cation into an XML format that could be imported
and assigned to hosts using ADF’s GUI. Unfortunately,
CSA’s GUI did not provide similar support, so while
its web-based interface was probably the friendliest for
a novice user, it was awkward to integrate into a larger
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
policy environment such as DPASA. In the end, some
form of command line support proved invaluable for
integrating these tools.
A valuable lesson was that policy construction
should not begin until the system functions are reason-
ably stable. This can be accomplished by either setting
an acceptable, but perhaps overly broad, policy early
on and then implementing the system, being sure to (cid:12)t
within the speci(cid:12)ed policy, or by implementing the sys-
tem, being mindful of security concerns, and then cre-
ating the policy to tightly (cid:12)t the system requirements
when the component’s functionality is stable. Since
we needed to incrementally develop the system while
still learning about the abilities of the code we had
been given to defend and had to adhere to a tight time
schedule, we chose the second option. This was not
such a concern for JVM policy, since it was maintained
by the developers themselves and could be updated
easily as new code was added, or for ADF, since it was
generated nearly automatically from the JVM policy,
but SELinux was especially sensitive to any changes
in process behavior. Developers had to be instructed
in how to relabel the (cid:12)le system after new (cid:12)les were
added and how to start authorized processes in the
proper SELinux role, or else functional tests to sup-
port policy debugging were rendered useless. SELinux
policy re(cid:12)nement depended on observing the system in
operation in a permissive mode while collecting denial
audits. However, it was impossible in most cases to
fully test applications in isolation: related applications
needed to be running correctly as well. The constantly
changing and challenging-to-test system impeded pol-
icy development to a surprising degree.
8. Related Work
Several e(cid:11)orts have demonstrated that policy gen-
eration for multiple enforcement points from a single
source is practical, but they have focused mainly on
creating policies for identical or similar defense at a
single layer of defense, rather than on creating policies
for multiple, diverse defense layers as described here.
Nevertheless, these e(cid:11)orts suggest important goals for
future work in DiD policy speci(cid:12)cation. For exam-
ple Guttman’s[13] policy language for (cid:12)ltering routers
yields policies that can be veri(cid:12)ed formally against de-
sired security properties. Were formal semantics avail-
able for even a subset of our defense mechanisms, re-
(cid:12)nement theory could be applied to ensure that DiD
is actually achieved. Bartal et al [8] require less rigor
in Firmato, a policy language for perimeter (cid:12)rewalls.
Firmato relies on a graphical validation strategy sim-
ilar to ours; however, their graphs are built directly
from the generated rules, which gives more con(cid:12)dence
than our strategy, which based the graphs on the spec-
i(cid:12)cation that produced those rules. Our graphs could
be misleading if the graph generator and the rule com-
piler do not share the same semantics. Other related
work along these lines includes Bradley and Josang[9]
(Mesmerize), who describe a framework for manag-
ing network layer defenses, and Uribe and Cheung[20],
who propose an approach for coordinating (cid:12)rewall pol-
icy with network intrusion detection strategies. Fi-
nally, Service Grammars[17] provide a framework for
simplifying con(cid:12)gurations based on high-level special-
purpose languages.
More general motivation for our work, and empiri-
cal evidence of the di(cid:14)culty of writing even small se-
curity policies, was gathered by Wool[21], who found
that complexity directly a(cid:11)ects the number of errors
in the (cid:12)rewall policy. A rough estimate of DPASA’s
complexity places it as a moderately complex system,
likely to have errors. Since DPASA needed to be as
error free as possible, we needed methods to manage
the complexity of our policies.
A considerable body of research has also been per-
formed on rule set anomaly detection (also called con-
(cid:13)ict detection) [14, 7, 3, 1, 2, 11]. An anomaly-free
rule set will be consistent (rules are ordered correctly),
complete (every packet matched at least one rule),
and compact (no redundant rules) [11]. Our methods
do not perform con(cid:13)ict analysis (although it could be
added), but we make a best-e(cid:11)ort to create anomaly-
free rule sets.
Complimenting anomaly detection and policy con-
struction, Stang et al
[19] presents Archipelago as a
security tool for estimating system security. Using
Archipelago, the \important" nodes (those most cen-
tral in the connection graph) can be identi(cid:12)ed and
brought to a higher level of secureness. Whether cen-
trality is a good measure of the \importance" of a node
is unclear without further empirical studies. Providing
policy analysis, in addition to our policy generation, us-
ing methods similar to that of Archipelago represents
an interesting area of future work.
9. Conclusions
In consideration of DiD enabled systems, construct-
ing each policy in isolation is labor-intensive and can
lead to con(cid:12)guration errors. On the other hand, gen-
erating all policies from a single speci(cid:12)cation | an
approach advocated for policies within a particular de-
fense layer, such as the network layer [8] | is perhaps
even more labor-intensive and error-prone for DiD so-
lutions, because too many details are required in that
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
speci(cid:12)cation that will apply only to speci(cid:12)c layers,
making the speci(cid:12)cation unwieldy. Instead, we advo-
cate a hybrid approach that (a) encourages selective
sharing of policy elements while maintaining policy au-
tonomy, (b) encourages independence between policy
authors, (c) builds policies from observed failures to be
minimally su(cid:14)cient, and (d) integrates validation sup-
port for other policy stakeholders. Such an approach
minimizes the risk of exploitable vulnerabilities that
could circumvent the bene(cid:12)ts of DiD.
A critical measure of success, of course, is how well
the resulting policies and their underlying defenses per-
form against a determined adversary. At this writ-
ing, red team assessment of DPASA is still underway;
however, preliminary results con(cid:12)rm that a carefully
crafted DiD solution is a formidable defense. We be-
lieve that the approach described here also makes such
a defense practical.
Acknowledgments The authors wish to acknowl-
edge the signi(cid:12)cant contributions of our \Blue" team
colleagues at BBN Technologies (speci(cid:12)cally Michael
Atighetchi and Lyle Sudin), SRI International, Adven-
tium Labs (speci(cid:12)cally Richard O’Brien), and the Uni-
versity of Illinois at Urbana-Champaign, as well as the
\White" and \Red" teams.
References
[1] E. Al-Shaer and H. Hamed. Firewall policy advisor
for anomaly detection and rule editing. In IEEE/IFIP
Integrated Management IM’2003, 2003.
[2] E. Al-Shaer and H. Hamed. Management and transla-
tion of (cid:12)ltering security policies. In IEEE Internation
Conference on Communications, 2003.
[3] E. Al-Shaer and H. Hamed. Discovery of policy
In IEEE INFO-
anomalies in distributed (cid:12)rewalls.
COM’04, 2004.
[4] J. H. Allen. The CERT Guide To System and Network
Security Practices. Addison Wesley Professional, 2001.
[5] M. Archer, E. Leonard, and M. Pradella. Analyz-
ing security-enhanced linux policy speci(cid:12)cations.
In
Policies for Distributed Systems and Networks, 2003.
Proceedings. POLICY 2003. IEEE 4th International
Workshop on, pages 158{ 169, June 2003.
[6] M. Atighetchi, P. Rubel, P. Pal, J. Chong, and
L. Sudin. Networking aspects in the ’dpasa’ surviv-
ability architecture: An experience report. In The 4th
IEEE International Symposium on Network Comput-
ing and Applications (IEEE NCA05), 2005.
[7] F. Baboescu and G. Varghese. Fast and scalable con-
(cid:13)ict detection for packet classi(cid:12)ers. Computer Net-
works, 42(6):717{735, 2003.
[8] Y. Bartal, A. Mayer, K. Nissim, and A. Wool. Fir-
mato: A novel (cid:12)rewall management toolkit. ACM
Trans. Comput. Syst., 22(4):381{420, 2004.
[9] D. Bradley and A. Josang. Mesmerize: an open frame-
work for enterprise security management.
In CR-
PIT ’32: Proceedings of the second workshop on Aus-
tralasian information security, Data Mining and Web
Intelligence, and Software Internationalisation. Aus-
tralian Computer Society, Inc., 2004.
[10] J. Chong, P. Pal, M. Atigetchi, P. Rubel, and F. Web-
ber. Survivability architecture of a mission critical
system: The dpasa example.
In Proceedings of the
21st Annual Computer Security Applications Confer-
ence. IEEE, 2005.
[11] M. G. Gouda and A. X. Liu. Firewall design: Consis-
tency, completeness, and compactness. In Proceedings
of the 24th International Conference on Distributed
Computing Systems, 2004.
[12] J. Guttman, A. Herzog, J. Ramsdell, and C. Skorupka.
Verifying information (cid:13)ow goals in security-ehanced
linux. Journal of Computer Security, 13(1):115{134,
June 2005.
[13] J. D. Guttman. Filtering postures: Local enforcement
In IEEE Symposium on Security
for global policies.
and Privacy, Oakland, CA, 1997. IEEE.
[14] A. Hari, S. Suri, and G. M. Parulkar. Detecting and
resolving packet (cid:12)lter con(cid:13)icts. In Proceedings of IEEE
INFOCOM, 2000.
[15] T. Markham, L. Meredith, and C. Payne. Distributed
embedded (cid:12)rewalls with virtual private groups.
In
DARPA Information Survivability Conference and Ex-
position, 2003, volume 2, pages 81{83, April 2003.
[16] C. Payne and T. Markham. Architecture and appli-
cations for a distributed embedded (cid:12)rewall.
In 17th
Annual Computer Security Applications Conference,
December 2001.
[17] X. Qie and S. Narain. Using service grammar to di-
agnose bgp con(cid:12)guration errors.
In LISA ’03: Pro-
ceedings of the 17th USENIX conference on System
administration, pages 237{246, Berkeley, CA, USA,
2003. USENIX Association.
[18] D. Ryder, D. Levin, and J. Lowry. Defense in depth: A
focus on protecting the endpoint clients from network
attack. In Proceedings of the IEEE SMC Information
Assurance Workshop, June 2002.
[19] T. Stang, F. Pourbayat, M. Burgess, G. Canright,
K. Engo, and A. Weltzien. Archipelago: A network
security analysis tool. In Proceedings of the 17th Large
Installation Systems Administration Conference, 2003.
[20] T. E. Uribe and S. Cheung. Automatic analysis of (cid:12)re-
wall and network intrusion detection system con(cid:12)gu-
rations. In FMSE ’04: Proceedings of the 2004 ACM
workshop on Formal methods in security engineering,
pages 66{74, New York, NY, USA, 2004. ACM Press.
[21] A. Wool. A quantitative study of (cid:12)rewall con(cid:12)guration
errors. Computer, 37(6):62{67, June 2004.
[22] G. Zanin and L. V. Mancini. Towards a formal model
for security policies speci(cid:12)cation and validation in the
selinux system. In SACMAT ’04: Proceedings of the
ninth ACM symposium on Access control models and
technologies, pages 136{145, New York, NY, USA,
2004. ACM Press.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply.