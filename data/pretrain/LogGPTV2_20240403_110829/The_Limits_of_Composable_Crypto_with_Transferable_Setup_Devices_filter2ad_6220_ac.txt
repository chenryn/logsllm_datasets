available. More formally, in the GUC-framework, a global setup G is accessible by any protocol running
in the system and in particular allows direct access by the environment. This, in effect, renders all previ-
ous protocols constructed in the CRS model not secure in the GUC framework as the simulator loses the
8
programmability of the CRS. In fact, it was shown in [CDPW07] that the CRS setup is insufﬁcient to se-
curely realize the ideal commitment functionality in the GUC-framework. More generally, they show that
any setup that simply provides only “public” information is not sufﬁcient to realize GUC-security for most
non-trivial functionalities. They further demonstrated a feasibility in the Augmented CRS model, where the
CRS contains signature keys, one for each party and a secret signing key that is not revealed to the parties,
except if it is corrupt, in which case the secret signing key for that party is revealed.
As mentioned before, the popular framework to capture the tamper-proof hardware is the one due to
[Kat07] who deﬁned the FWRAP-functionality in the UC-framework. In general, in the token model, the
two basic advantages that the simulator has over the adversary is “observability” and “programmability”.
Observability refers to the ability of the simulator to monitor all queries made by an adversary to the token
and programmability refers to the ability to program responses to the queries in an online manner. In the
context of tokens, both these assumptions are realistic as tamper-proof tokens do provide both these abilities
in a real-world. However, when modeling tamper proof hardware tokens in the UC-setting, both these
properties can raise issues as we discuss next.
Apriori, it is not clear why one should model the tamper proof hardware as a global functionality. In
fact, the tokens are local to the parties and it makes the case for it not to be globally accessible. Let us
begin with the formulation by Katz [Kat07] who introduced the FWRAP-functionality (see Figure 1 for the
stateless variant). In the real world the creator or sender of a token speciﬁes the code to be incorporated in
a token by sending the description of a Turing machine M to the ideal functionality. The ideal functionality
then emulates the code of M to the receiver of the token, only allowing black-box access to the input and
output tapes of M. In the case of stateful tokens, M is modeled as an interactive Turing machine while
for stateless tokens, standard Turing machines would sufﬁce. Slightly more technically, in the UC-model,
parties are assigned unique identiﬁers PID and sessions are assigned identiﬁers sid. In the tamper proof
model, to distinguish tokens, the functionality accepts an identiﬁer mid when a token is created. More
formally, when one party PIDi creates a token with program M with token identiﬁer mid and sends it to
another party PIDj in session sid, then the FWRAP records the tuple (PIDi; PIDj; mid; M ). Then whenever
a party with identiﬁer PIDj sends a query (Run; sid; PIDi; mid; x) to the FWRAP-functionality, it ﬁrst checks
whether there is a tuple of the form ((cid:1); PIDj; mid;(cid:1)) and then runs the machine M in this tuple if one exists.
Functionality F Stateless
WRAP
Functionality F Stateless
Create. Upon receiving (Create; sid; PIDi; PIDj; mid; M ) from S, where M is a Turing machine, do:
is parameterized by a polynomial p((cid:1)) and an implicit security parameter (cid:20).
WRAP
1. Send (Create; PIDi; PIDj; mid) to R.
2. Store (PIDi; PIDj; mid; M ).
Execute. Upon
receiving
tuple
(PIDi; PIDj; mid; M ). If no such tuple exists, do nothing. Run M (x) for at most p((cid:20)) steps, and let
out be the response (out = ? if M does not halt in p(k) steps). Send (PIDi; PIDj; mid; out) to R.
(Run; sid; PIDi; mid; x)
from R,
ﬁnd
the
unique
stored
Figure 1: The ideal functionality for stateless tokens [Kat07].
In the UC-setting (or JUC), to achieve any composability guarantees, we need to realize the multi-use
variants of the speciﬁed functionality and then analyze the designed protocol in a concurrent man-in-the-
middle setting. In such a multi-instance setting, it is reasonable to assume that an adversary that receives a
9
token from one honest party in a left interaction can forward the token to another party in a right interaction.
Unfortunately, the FWRAP-functionality does not facilitate such a transfer.
Let us modify FWRAP to accommodate transfer of tokens by adding a special “transfer” query that
allows a token in the possession of one party to be transferred to another party. Since protocols designed in
most works do not explicitly prove security in a concurrent man-in-the-middle setting, such a modiﬁcation
renders the previous protocols designed in FWRAP insecure. For instance, consider the commitment scheme
discussed in the introduction based on PRF tokens. Such a scheme would be insecure as an adversary can
simply forward the token from the receiver in a right interaction to the sender in a left interaction leading to
a malleable commitment.
In order to achieve security while allowing transferability we need to modify the tokens themselves in
such a way to be not useful in an execution different from where it is supposed to be used. If every honestly
generated token admits only queries that are preﬁxed with the correct session identiﬁer then transferring
the tokens created by one honest party to another honest party will be useless as honest parties will preﬁx
their queries with the right session and the honestly generated tokens will fail to answer on incorrect session
preﬁxes. This is inspired by an idea in [CJS14], where they design GUC-secure protocols in the Global
Random Oracle model [CJS14]. As such, introducing transferrability naturally requires protocols to address
the issue of non-malleability.
While this modiﬁcation allows us to model transferrability, it still requires us to analyze protocols in a
concurrent man-in-the-middle setting. In order to obtain a more modular deﬁnition, where each protocol
instance can be analyzed in isolation we need to allow the token to be transferred from the adversary to the
environment. In essence, we require the token to be somewhat “globally” accessible and this is the approach
we take.
2.1 The Global Tamper-Proof Model
A natural ﬁrst approach would be to consider the same functionality in the GUC-framework and let the
environment to access the FWRAP-functionality. This is reasonable as an environment can have access to
the tokens via auxiliary parties to whom the tokens were transferred to. However, naively incorporating
this idea would deny “observability” and “programmability” to the simulator as all adversaries can simply
transfer away their tokens the moment they receive them and let other parties make queries on their behalf.
Indeed, one can show that the impossibility result of [CKS+14] extends to this formulation of the tokens
(at least if the code of the token is treated in a black-box manner).5 A second approach would be to reveal
to the simulator all queries made to the token received by the adversary even if transferred out to any party.
However, such a formulation would be vulnerable to the following transferring attack.
If an adversary
received a token from one session, it can send it as its token to an honest party in another session and
now observe all queries made by the honest party to the token. Therefore such a formulation of tokens is
incorrect.
Our formulation will accommodate transferrability while still guaranteeing observability to the simu-
In more detail, we will modify the deﬁnition of FWRAP so that it will reveal to the simulator all
lator.
“illegitimate” queries made to the token by any other party. This approach is analogous to the one taken by
Canetti, Jain and Scafuro [CJS14] where they model the Global Random Oracle Model and are confronted
by a similar issue; here queries made to a globally accessible random oracle via auxiliary parties by the
environment must be made available to the simulator while protecting the queries made by the honest party.
5Informally, the only advantage that remains for the simulator is to see the code of the tokens created by the adversary. This
essentially reduces to the case where tokens are sent only in one direction and is impossible due to a result of [CKS+14] when the
code is treated as a black-box.
10
In order to deﬁne “legitimate” queries we will require that all tokens created by an honest party, by default,
will accept an input of the form (sid; x) and will respond with the evaluation of the embedded program
M on input x, only if sid = sid, where sid corresponds to the session where the token is supposed to be
used, i.e. the session where the honest party created the token. Furthermore, whenever an honest party in
session sid queries a token it received on input x, it will preﬁx the query with the correct session identiﬁer,
namely issue the query (sid; x). An illegitimate query is one where the sid preﬁx in a query differs from the
session identiﬁer from which the party is querying from. Every illegitimate query will be recorded by our
functionality and will be disclosed to the party whose session identiﬁer is actually sid.
More formally, the FgWRAP-functionality is parameterized by a polynomial p((cid:1)) which is the time bound
that the functionality will exercise whenever it runs any program. The functionality admits the following
queries:
Creation Query: This query allows one party S to create and send a token to another party R by sending
the query (Create; sid; S; R; mid; M ) where M is the description of the machine to be embedded in
the token, mid is a unique identiﬁer for the token and sid is the session identiﬁer. The functionality
records (R; sid; mid; M ).6
Transfer Query: We explicitly provide the ability for parties to transfer tokens to other parties that were
not created by them (eg, received from another session). Such a query will only be used by the
adversary in our protocols as honest parties will always create their own tokens. When a transfer
query of the form (transfer; sid; S; R; mid) is issued, the tuple (S; sid; mid; M ) is erased and a new
tuple (R; sid; mid; M ) is created where sid is the identiﬁer of the session where it was previously
used.
Execute Query: To run a token the party needs to provide an input in a particular format. All honest
parties will provide the input as x = (sid; x
) and the functionality will run M on input x and supply
the answer. In order to achieve non-malleability, we will make sure in all our constructions that tokens
generated by honest parties will respond to a query only if it contains the correct sid.
′
Retrieve Query: This is the important addition to our functionality following the approach taken by [CJS14].
FgWRAP-functionality will record all illegitimate queries made to a token. Namely for a token recorded
as the tuple (R; sid; mid; M ) an illegitimate query is of the form (sid; x) where sid ̸= sid and such a
query will be recorded in a set Qsid that will be made accessible to the receiving party corresponding
to sid.
A formal description of the ideal functionality FgWRAP is presented in Figure 2. We emphasize that our
formulation of the tamper-proof model will now have the following beneﬁts:
1. It overcomes the shortcomings of the FWRAP-functionality as deﬁned in [Kat07] and used in subse-
quent works. In particular, it allows for transferring tokens from one session to another while retaining
“observability”.
2. Our model allows for designing protocols in the UC-framework and enjoys the composition theorem
as it allows the environment to access the token either directly or via other parties.
6We remark here that the functionality does not explicitly store the PID of the creator of the token. We made this choice since
the simulator in the ideal world will create tokens for itself which will serve as a token created on behalf of an honest party.
11
3. Our model explicitly rules out “programmability” of tokens. We remark that it is (potentially) possible
to explicitly provide a mechanism for programmability in the FgWRAP-functionality. We chose to not
provide such a mechanism so as to provide stronger composability guarantees.
4. In our framework, we can analyze the security of a protocol in isolation and guarantee concurrent
multi-instance security directly using the GUC-composition theorem. Moreover, it sufﬁces to consider
a “dummy” adversary that simply forwards the environment everything (including the token).
An immediate consequence of our formulation is that it renders prior works such as [Kat07, CGS08,
DKM11, DKMN15a] that rely on the programmability of the token insecure in our model. The works of
[GIS+10, CKS+14] on the other hand can be modiﬁed and proven secure in the FgWRAP-hybrid as they do
not require the tokens to be programmed.
Functionality FgWRAP
Parameters: Polynomial p((cid:1)).
Create. Upon receiving (Create; sid; S; R; mid; M ) from S, where M is a Turing machine, do:
1. Send (Receipt; sid; S; R; mid) to R.
2. Store (R; sid; mid; M ).
Execute. Upon receiving (Run; sid; mid; x) from R, ﬁnd the unique stored tuple (R; sid; mid; M ). If such
) and run M (x) for at most p((cid:20))
a tuple does not exist, do nothing. Otherwise, interpret x = (sid; x
steps, and let out be the response (out = ? if M does not halt in p(k) steps). Send (sid; R; mid; out)
to R.
Handling Illegal Queries: If sid ̸= sid, then add (x
′
be empty.
; out; mid) to the list Q
sid that is initialized to
′
Transfer. Upon receiving (transfer; sid; S; R; mid) from S, ﬁnd the unique stored tuple (S; sid; mid; M ).
If no such tuple exists, do nothing. Otherwise,
1. Send (Receipt; sid; S; R; mid) to R.
2. Store (R; sid; mid; M ). Erase (S; sid; mid; M ).
Retrieve Queries: Upon receiving a request (retreive; sid) from a party R, return the list Qsid of illegiti-
mate queries.
Figure 2: The global stateless token functionality.
We now provide the formal deﬁnition of UC-security in the Global Tamper-Proof model.
Deﬁnition 2.1 (GUC security in the global tamper-proof model) Let F be an ideal functionality and let
(cid:25) be a multi-party protocol. Then protocol (cid:25) GUC realizes F in FgWRAP-hybrid model, if for every uniform
P P T hybrid-model adversary A, there exists a uniform P P T simulator S, such that for every non-uniform
P P T environment Z, the following two ensembles are computationally indistinguishable,
{
}
View
FgWRAP
(cid:25);A;Z ((cid:20))
(cid:20)2N
View
FgWRAP
F;S;Z ((cid:20))
(cid:20)2N:
}
c(cid:25){
12
(cid:12)(cid:12)Pr [D(X(a; (cid:20)); 1(cid:20)) = 1] (cid:0) Pr [D(Y (a; (cid:20)); 1(cid:20)) = 1]
(cid:12)(cid:12) <
(cid:12)(cid:12) Pr[X(cid:20) = !] (cid:0) Pr[Y(cid:20) = !]
(cid:12)(cid:12):
SD(X(cid:20); Y(cid:20)) =
1
2
!2Ω
1
:
p((cid:20))
3 Preliminaries
Basic notations. We denote the security parameter by (cid:20). We say that a function (cid:22) : N ! N is negligible
if for every positive polynomial p((cid:1)) and all sufﬁciently large (cid:20)’s it holds that (cid:22)((cid:20)) < 1
p((cid:20)). We use the
abbreviation PPT to denote probabilistic polynomial-time. We specify next the deﬁnition of computationally
indistinguishable and statistical distance.
Deﬁnition 3.1 Let X = fX(a; (cid:20))ga2f0;1g(cid:3);(cid:20)2N and Y = fY (a; (cid:20))ga2f0;1g(cid:3);(cid:20)2N be two distribution en-
c(cid:25) Y , if for every PPT
sembles. We say that X and Y are computationally indistinguishable, denoted X
machine D, every a 2 f0; 1g(cid:3), every positive polynomial p((cid:1)) and all sufﬁciently large (cid:20)’s,
Deﬁnition 3.2 Let X(cid:20) and Y(cid:20) be random variables accepting values taken from a ﬁnite domain Ω (cid:18)
∑
f0; 1g(cid:20). The statistical distance between X(cid:20) and Y(cid:20) is
We say that X(cid:20) and Y(cid:20) are "-close if their statistical distance is at most SD(X(cid:20); Y(cid:20)) (cid:20) "((cid:20)). We say that
X(cid:20) and Y(cid:20) are statistically close, denoted X(cid:20) (cid:25)s Y(cid:20), if "((cid:20)) is negligible in (cid:20).
3.1 Pseudorandom Functions
Informally speaking, a pseudorandom function (PRF) is an efﬁciently computable function that looks like a
truly random function to any PPT observer. Namely,
Deﬁnition 3.3 (Pseudorandom function ensemble) Let F = fPRF(cid:20)g(cid:20)2N where for every (cid:20), PRF(cid:20) :
f0; 1g(cid:20) (cid:2) f0; 1gm ! f0; 1gl is an efﬁciently computable ensemble of keyed functions. We say that F =
fPRF(cid:20)g(cid:20)2N is a pseudorandom function ensemble if for every PPT machine D, there exists a negligible
function negl((cid:1)) such that for all sufﬁciently large (cid:20)’s,
jPr[DPRF(cid:20)(k;(cid:1))(1(cid:20))] = 1 (cid:0) Pr[Df(cid:20)(1(cid:20)) = 1]j (cid:20) negl((cid:20));
where k is picked uniformly from f0; 1g(cid:20) and f(cid:20) is chosen uniformly at random from the set of functions
mapping m-bit strings into l-bit strings. We sometimes omit (cid:20) from our notation when it is clear from the
context.
3.2 Commitment Schemes
Commitment schemes are used to enable a party, known as the sender S, to commit itself to a value while
keeping it secret from the receiver R (this property is called hiding). Furthermore, in a later stage when the
commitment is opened, it is guaranteed that the “opening” can yield only a single value determined in the
committing phase (this property is called binding). In this work, we consider commitment schemes that are
statistically binding, namely while the hiding property only holds against computationally bounded (non-
uniform) adversaries, the binding property is required to hold against unbounded adversaries. Formally,
13