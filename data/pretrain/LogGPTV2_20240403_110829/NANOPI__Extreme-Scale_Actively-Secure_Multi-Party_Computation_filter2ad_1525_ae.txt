running example expands to the following:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
We stress that because we retain scope information, only one set
of declarations for x, y, and t exists at any particular time irrespec-
tive of how many times the original loop was iterated. Similarly,
only one instance of the local variables of a function will be live
irrespective of how many times the original function was inlined.
The denotational semantics for this core language uses conven-
tional tools (e.g, [46]) described next. We first define the auxiliary
notions of an environment ρ and a store σ. An environment maps
variables to (heap) locations and a store maps these locations to
values. An environment ρ can be extended with a new entry x ← ℓ
to produce a new environment ρ[x ← ℓ]. We note that, reflecting
bit x;
x = xs1 ;
bit t;
t = t ∧ x;
r = r ∧ t;
}
rs1 = r;
the usual rules of static scoping, the original ρ may already have
an entry for x and that entry is shadowed by the new binding. In
other words, the rule for looking up the current binding for x in an
environment is defined as follows:
(cid:40)
(ρ[x ← ℓ])(y) =
ℓ
ρ(y)
if x = y
otherwise
which resolves a variable lookup to the statically innermost dec-
laration. The store σ is a mapping from locations to values, but it
never contains duplicate locations in its domain. Thus for stores,
the notation σ[ℓ ← v] creates a location ℓ if ℓ is fresh in σ and
otherwise performs an in-place update of the contents of ℓ.
The semantics of a declaration in the scoped language is modeled
as a transformation that takes a current environment and store,
and returns an extended environment in which the new variable is
bound to a fresh location that is initialized to false in the store:
D⟦bit x⟧⟨ρ, σ⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← false]⟩
where ℓ is fresh in σ
To calculate the environment and store for a sequence of declara-
tions, we simply apply the function D⟦·⟧ to each declaration in turn,
passing the resulting environment and store from one declaration
to the next. Formally:
D⟦d; ds⟧⟨ρ, σ⟩ = D⟦ds⟧(D⟦d⟧⟨ρ, σ⟩)
Each statement receives an environment and a store and com-
putes a (possibly modified) store that is propagated to the following
statement. The result of the program is the final store. Formally, the
semantics of blocks and statements is defined using two mutually
recursive functions B⟦·⟧ and S⟦·⟧ defined below. Each of these
functions takes a current environment and store and returns only
a store.
B⟦ds; ss⟧⟨ρ, σ⟩ = S⟦ss⟧(D⟦ds⟧⟨ρ, σ⟩)
S⟦s; ss⟧⟨ρ, σ⟩ = S⟦ss⟧⟨ρ,S⟦s⟧⟨ρ, σ⟩⟩
S⟦x = true⟧⟨ρ, σ⟩ = σ[ρ(x) ← true]
S⟦x = false⟧⟨ρ, σ⟩ = σ[ρ(x) ← false]
S⟦x = y ⊙ z⟧⟨ρ, σ⟩ = σ[ρ(x) ← σ(ρ(y)) ⊙ σ(ρ(z))]
S⟦{b}⟧⟨ρ, σ⟩ = B⟦b⟧⟨ρ, σ⟩
The maximum size of the environment is the maximum number
of locations that are simultaneously live in one static scope. In our
running example, when we are executing inside either call for f,
the environment contains entries for r, rs0, rs1, xs0, xs1,
ys0
, ys1, x, y, t. Upon exiting the scope, the environment reverts
to only having entries for r, rs0, rs1, xs0, xs1, ys0, ys1. More
explicitly, environments provide a formalization of the notion of
live locations: only locations reachable through the environment
are live and all other locations can be recycled.
Staged Semantics. The semantics above models a standard exe-
cution in which statements are executed sequentially, entering and
exiting scopes as determined by the syntactic structure of the pro-
gram. This semantics can be adapted to reflect the staged execution
model that we propose for executing WRK’s authenticated garbling
protocol Π2pc, since it adopts a more liberal execution schedule
which allows delayed and batched execution of primitive operations,
even if these operations occur in different scopes. To model such a
semantics, we proceed in three stages.
First, we define a source-to-source translation that replaces ev-
ery assignment by a new declaration, thus allocating a new heap
location instead of in-place updating the existing one. Intuitively
this allows the history of values assigned to a variable to co-exist
simultaneously, modeling rule (4) of our intuitive solution outlined
in Section 4.2. In detail, this translation replaces every assignment
“x = v” by a declaration “bit x” that is immediately followed by an
assignment “x = v”. For convenience, we abbreviate this combina-
tion as “bit x = v”. The situation for non-local variables is more
subtle: updates to fresh locations originating from a non-local vari-
able need to be stored back in the non-local variable upon exiting
a local scope. This is done by appropriately inserting “update” in-
structions whenever exiting a scope. The example code from page 9
will thus be translated into:
}
update r;
bit rs1 = r;
bit r;
bit rs0 ; bit rs1 ;
bit xs0 ; bit xs1 ;
{ // first call to f
}
update r;
bit rs0 = r;
{ // second call to f
bit x = xs1 ;
bit t;
bit t = t ∧ x;
non_local bit r = r ∧ t;
bit x = xs0 ;
bit t;
bit t = t ∧ x;
non_local bit r = r ∧ t;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Note that this is no longer a legal program in our subset-of-C
language but can be viewed as a program in an intermediate lan-
guage where, e.g., having multiple declarations for the same variable
within a scope causes no problem. The repeated declarations of t in
the same scope just resolve to different entries in the environment
which is harmless as each subsequent use of t sees the previous
declaration and t is only visible within the inner scope. For r, the
new declaration in the inner scope would update the local copy
with the value of r ∧ t but this update would be lost as soon as
we exit the inner scope. For that reason, the translation adds a
special label to declarations arising from assignments to non-local
variable declarations like the declaration for r; as we explain next,
the special label is used to maintain a connection, called η, between
the local and non-local instances of r. Specifically, upon exiting the
inner scope, an update operation uses η to copy the contents of the
local instance of r back into the non-local instance. See below for
more explanation about η.
Second, we split the semantic definition of staged execution into
two functions that communicate through a shared queue contain-
ing delayed thunks [16] or closures [23]. One function (see Figure 5)
traverses the program as usual but instead of executing expressions
like “bit x = y ⊙ z” immediately, it instead allocates a fresh lo-
cation ℓ, extends the environment with a binding of the declared
variable to ℓ, extends the store with a marker • indicating that ℓ
is currently uninitialized, constructs a closure ℓ ← ρ(y) ⊙ ρ(z)
containing the locations referenced by y and z, and pushes this
closure on the shared queue. The other function (see Figure 6) tra-
verses the queue of closures and executes asynchronously. In order
to maintain a global order of execution that respects the original
data dependencies, an additional data structure η is maintained to
connect local and non-local instances of the same variable. Note
that updates to η are in-place, namely, “η[x\ℓ]” denotes updating
the location where the non-local variable x’s latest value is stored
to ℓ. The update operations introduced in the previous stage use
this η association to push the proper updates on the shared queue
so that future references to non-local locations see the latest value
assigned within the inner scope. As shown in Figure 5, η is updated
when processing declarations (by Cd⟦·⟧) and used for interpreting
“update” instructions (by Cs⟦·⟧).
For example, a staged execution of the above running example
could result in a series of configurations given in Table 4. Focus on
the part of the execution surrounding and including the first inner
scope. Initially, the declarations simply extend the environment
with fresh locations which are uninitialized. At line 7, we enter a
new scope and extend the environment with a new location 0x1014
for x. But instead of immediately updating the contents of 0x1014,
we push a closure that can do the update asynchronously when
it is invoked. Execution continues, creating fresh locations, and
delaying updates to the store. Note that on line 10, the reference
to t resolves to the latest allocated location 0x101c for t. Once
we exit the scope at line 11, the environment reverts back to ρ5
which was the environment before entering the local scope. In the
next line, we communicate the latest value for r which was stored
in 0x1020 to the non-local location 0x1000. Table 4 illustrates a
situation where the closures queue reaches its critical size after
executing line 16 of the above translated program. At that point,
all the pending updates are performed and the resulting store will
be identical to the one reached by a canonical execution.
For an intuitive argument of correctness of this part of semantics,
let’s take the conventional semantics of assignments:
S⟦x = true⟧⟨ρ, σ⟩ = σ[ρ(x) ← true]
and compare it with the new staged semantics for assignments:
Cs⟦x = true⟧⟨ρ, σ , η, L⟩ = ⟨σ , η, L + {ρ(x) ← true}⟩
We see that the only difference is that the update ρ(x) ← true is
associated with L instead of σ. The situation is similar for declara-
tions: the original semantics is:
D⟦bit x = true⟧⟨ρ, σ⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← true]⟩
and the new staged semantics is:
Cd⟦bit x = true⟧⟨ρ, σ , η, L⟩ =
⟨ρ[x ← ℓ], σ[ℓ ← •], η, L + {ℓ ← true}⟩
where ℓ is fresh in σ in both cases. Again the difference is that the
update ℓ ← true is associated with L instead of σ.
These examples illustrate that the staged semantics preserves
the atomic actions of the canonical semantics but we have not
guaranteed yet that these actions will happen in the same order. To
enforce this, we insist that the actions in L are performed in the
original order, i.e., by treating L as an FIFO queue. Semantically,
we formalize this by always inserting new closures to the right in
Figure 5 and extracting them from the left in Figure 6. In the latter
Cs⟦x = true⟧⟨ρ, σ , η, L⟩ = ⟨σ , η, L + {ρ(x) ← true}⟩
Cs⟦x = false⟧⟨ρ, σ , η, L⟩ = ⟨σ , η, L + {ρ(x) ← false}⟩
Cs⟦x = y ⊙ z⟧⟨ρ, σ , η, L⟩ = ⟨σ , η, L + {ρ(x) ← ρ(y) ⊙ ρ(z)}⟩
Cs⟦update x⟧⟨ρ, σ , η, L⟩ = ⟨σ , η, L + {ρ(x) ← η(x)}⟩
Cd⟦bit x = true⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η, L + {ℓ ← true}⟩
Cd⟦bit x = false⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η, L + {ℓ ← false}⟩
Cd⟦bit x = y ⊙ z⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η, L + {ℓ ← ρ(y) ⊙ ρ(z)}⟩
Cd⟦non_local bit x = true⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η[x\ℓ], L + {ℓ ← true}⟩
Cd⟦non_local bit x = false⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η[x\ℓ], L + {ℓ ← false}⟩
Cd⟦non_local bit x = y ⊙ z⟧⟨ρ, σ , η, L⟩ = ⟨ρ[x ← ℓ], σ[ℓ ← •], η[x\ℓ], L + {ℓ ← ρ(y) ⊙ ρ(z)}⟩
Figure 5: Formal semantics with collecting closures.
where ℓ is fresh in σ
where ℓ is fresh in σ
where ℓ is fresh in σ
where ℓ is fresh in σ
where ℓ is fresh in σ
where ℓ is fresh in σ
Table 4: Staged execution of our running example code with a stage execution kicks in after line 16.
line #
L
L0 = {}
L1 = L0
L2 = L1
L3 = L2
L4 = L3
L5 = L4
L6 = L5
L8 = L7
σ
σ0 = {}
σ1 = σ0
σ2 = σ1
σ3 = σ2
σ4 = σ3
σ5 = σ4
σ6 = σ5
σ7 = σ6
σ8 = σ7
σ9 = σ8
σ10 = σ9
σ11 = σ10
σ12 = σ11
σ13 = σ12
σ14 = σ13
σ15 = σ14
σ16 = σ15
If a staged execution kicks in here, then it updates
η
η0 = {}
η1 = η0
η2 = η1
η3 = η2
η4 = η3
η5 = η4
η6 = η5
η7 = η6
η8 = η7
η9 = η8
η10 = η9[r\0x1020]
η11 = η10
η12 = η11
η13 = η12
η14 = η13
η15 = η14
η16 = η15
L14 = L13
L16 = L15
L11 = L10
ρ
ρ0 = {}
ρ1 = ρ0[r ← 0x1000]
ρ2 = ρ1[rs0 ← 0x1004]
ρ3 = ρ2[rs1 ← 0x1008]
ρ4 = ρ3[xs0 ← 0x100c]
ρ5 = ρ4[xs1 ← 0x1010]
ρ6 = ρ5
ρ7 = ρ6[x ← 0x1014]
ρ8 = ρ7[t ← 0x1018]
ρ9 = ρ8[t ← 0x101c]
ρ10 = ρ9[r ← 0x1020]
ρ11 = ρ5
ρ12 = ρ11
ρ13 = ρ12[rs0 ← 0x1024]
ρ14 = ρ13
ρ15 = ρ14[x ← 0x1028]
ρ16 = ρ15[x ← 0x102c]
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
σ16 = {(0x1000, false),(0x1014, true),(0x101c, false),(0x1020, false),(0x1024, false),(0x1028, true)} and L16 = {}.
17
18
19
20
21
L7 = L6 +(cid:8)0x1014 ← (∗ 0x100c)(cid:9)
L9 = L8 +(cid:8)0x101c ← (∗ 0x1018) ∧ (∗ 0x1014)(cid:9)
L10 = L9 +(cid:8)0x1020 ← (∗ 0x1000) ∧ (∗ 0x101c)(cid:9)
L12 = L11 +(cid:8)0x1000 ← (∗ 0x1020)(cid:9)
L13 = L12 +(cid:8)0x1024 ← (∗ 0x1000)(cid:9)
L15 = L14 +(cid:8)0x1028 ← (∗ 0x1010)(cid:9)
L17 = L16 +(cid:8)0x1030 ← (∗ 0x102c) ∧ (∗ 0x1028)(cid:9)
η18 = η17[r\0x1034] L18 = L17 +(cid:8)0x1034 ← (∗ 0x1000) ∧ (∗ 0x1030)(cid:9)
L20 = L19 +(cid:8)0x1000 ← (∗ 0x1034)(cid:9)
L21 = L20 +(cid:8)0x1038 ← (∗ 0x1000)(cid:9)
ρ17 = ρ16[t ← 0x1030]
ρ18 = ρ17[r ← 0x1034]
ρ19 = ρ18
ρ20 = ρ19
ρ21 = ρ20[rs1 ← 0x1038]
σ17 = σ16
σ18 = σ17
σ19 = σ18
σ20 = σ19
σ21 = σ20
η19 = η18