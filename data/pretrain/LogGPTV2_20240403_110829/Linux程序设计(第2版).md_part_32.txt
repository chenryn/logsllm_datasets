包括Linux在内的许多系统为了能够选取到更高的线速度而增加定义了“B57600"、
“B115200”和“B230400”。如果读者使用的是1.inux的一个早期版本，里面没有对这些
常数进行定叉的语，可以通过setserial命令获得57600和115200这样的非标准速度，在
这种情况里，必须先选择“B38400”之后才能使用这些非标准速度。这两种办法都不
具备可移植性，所以在使用它们的时候要考虑清楚。
5.3.7其他功能函数
在终端控制方面还有一些其他的函数。它们直接对文件描述符进行操作，不需要读写
termios结构。下面是它们的定义：
#include 
int tctlow（int fd,int flowtype);
int todrain(int fd))
int tcflush(int fd,int in_out_selector);
这些函数的功能如下所示：
·tcdrain的作用是让调用者程序等待排好队的输出数据全部发送完毕。
·tcflow用来挂起或重新开始输出。
tcflush可以用来清空输人、输出或输人和输出。
在介绍了这么多关于termios结构的知识以后，我们来看儿个实用的例子。其中最简单的大
概要算读取口令字时禁止回显功能了。关闭“ECHO”标志就可以做到这一点。
加入jaVa编程群：524621833
---
## Page 164
146
Linux程序设计
动手试试：使用termios结构的口令字核查程序
1)我们的11令字核查程序password.c以下面这些定义开始：
#include 
#include 
+define PASSwORD_LEN 8
int main[)
struct teraios initialrsettings, newrsettings;
char pas6word {PASSWORD_LEN • 1];
2）接下来，用一条语句读出标准输人设备的当前设置值，把这些值保存到我们刚才创建的
termios结构里去：
tegetattr( fileno(atdin), &initia'rsettings 1;
3）给这些原始设置值做一份拷贝以备对它们进行替换。在ncwrsetings里关闭“ECHO”标
志，然后提示用户输入口令字：
newrsettings = initialrsettings:
newrsettings.c_1flag &= ~ECHO;
printf(*Enter password: *):
4）接下来、用newrsetings中的值设置终端属性并读取口令字。最后，把终端属性重新设置
回它们原来的初始值并输出读到的口令字，让刚才的努力“白费”了。
if(tcsetattr(fileno(stdin),TCsAFLUSH, snewTsettings) != O)(
fprintf (stderr,*Could not set attributes\n*):
else(
fgets(password, PASSwORD_LEN, stdin):
fprintf(stdout,\nYou entered es\n*. password);
tcsetatt(fileno(stdin).TCsANW, &initialrsettings);
exit(0):
操作注释：
S password
You entered bello
Enter password:
$
在这个例子里，单词“helo”是用户输入的口令字，但它可不是由“Enterpassword：”提示
符回显出来的。在用户按下回车键之前没有产生任何输出。
我们很谨慎地只修改了需要修改的标志，使用的是“X&=-FLAG”语法结构（它的作用是
清除变量X里由FLAG定义的二进制位）。如果需要，我们可以用“XI=FLAG”语法结构对
FLAG定义的二进制位进行置位，当然在上面的例子里并不需要这么做。
在对终端属性进行设置的时候，我们通过TCSAFLUSH丢弃掉在此之前的所有输人。这是个
培养用户好习惯的好办法，教育用户在回显功能关闭之前别开始输人自己的口令字。在这个程
加入jaVa编程群：524621833
---
## Page 165
第5章终端
序结束之前，我们还恢复了终端的原始设置。
termios结构另一个常见用法是把终端设置为这样一种状态：我们可以在每一个字符被敲人
的时候立刻读取它们。具体做法是：关闭授权模式，再结合使用MIN值和TIME值进行设置。
动手试试：读取每一个字符
1）根据新学到的知识，我们对我们的菜单程序做些修改。下面的代码与password.c有很多相
似之处，把它们插入到menu3.c文件里得到一个新的程序menu4.c。在新程序的一开始，我们要
加上一个新的头文件：
include 
#include 
#include 
2）接下来，声明几个用在main函数中的新变量：
FILE *input:
int choice = 0;
struct termios initial_settings, new_settangs;
FILE *output:
3）在调用getchoice函数之前必须对终端的属性进行修改，我们加上如下所示的这些语句：
fprintf(scderr,*Unable to open /dev/tty\n"):
exit [1) ;
tcgetattr(fileno(input).6initial_settings);
new_settings.c_cc[VTIHE]0;
new_settings.c_ce[VMIN] = 1:
if(tcsetattr(fileno（input).TcsANow, &new_settings)!= 0)(
fprintf(stderr.*could not set attributes\n"):
4）在退出之前还要把终端属性设置回它们的初始值：
do {
choice getchoice(*Please select an action*. menu,input.cutput):
}hile (choice！q'};
printf(*You have chosen: te`n*, choice):
tesetattr(fileno(inpat),TCsANow,sinitial_settings);
exit(0):
注意，因为我们现在处于非授权模式中，“CR”和“LF”字符之间的缺省映射不复存在，
所以我们必须自行对回车字符“n”进行检查和处理了。如下所示：
do{
selected=fgetc(in);
(,\，= pas 11. pa) ty(
5)到了这一步，如果用户在我们的程序里按下“Ctrl-C”组合键，程序就会立刻退出。我们
可以禁止这些特殊字符的处理功能。做法很简单，把本地模式下的ISIG标志清除掉就行了。在
main函数里加上这样一条语句：
new_settings.c_1flag &= ~ISIG;
加入jaVa编程群：524621833
---
## Page 166
148Linux程序设计
操作注释：
把这些修改都放到我们的菜单程序里之后，只要一敲人字符就能得到税序的响应，而人
的字符并不会回显在屏幕上：
S menu4
h1p -
Please select an action
d
delete record
add new record
Chvice: Please select an act1on
au
You have chosen:q
-quit
如果我们按下“Curl-C”组合键，它会被直接传递给程序，而程序会认为这是一个不正确的
菜单选择。
5.4终端的输出
通过前面的学习，我们已经知道能够通过termios结构控制来自键盘的输人，如果对程序输
出到屏幕上的内容也能有同等的控制权就更好了。在这-章的开始，我们是用printf语句把字符
输出到屏幕上的，但还不能把输出数据放到屏幕上的特定位置。
5.4.1终端的类型
行若一个终端仿真程序的PC个人电脑了。从其历史发展过程来看，曾经有大量的制造厂家生产
过大量各种型号的终端。虽然它们都使用escape转义序列（一个以escape字符打头的字符串）来
控制光标的位置以及终端的其他属性一比如黑体和闪烁等，但在具体实现手段方面并没有什么
统一的标准。某些陈旧的终端还有一些与众不同的卷屏方式：某些终端上与Backspace键对应的
动作删除光标前面的字符，而有的终端就不这样做，可以说是千差方别。
escape转义序列有一个ANS1标准，它以数字设备公司（DigitalEquipment
Corpration，即人们热知的DEC公司）的VT系列终端所使用的转义序列为基础，但并不
完全一致。许多PC电脑上使用的终端程序提供了对标准终端的仿真功能，模仿的对象
通常是VT100、VT200或ANSI终端，但也有模仿其他终端的。
对那些希望能够在多种终端型号上运行并对屏幕输出进行控制的程序来说，终端多样性是
个很重大的问题。举例来说吧，如果想把光标移动到一行的末尾，在ANSI终端上要使用转义
序列“Escape-{-A”：而在ADM-3a终端（多年前它曾经是一种很常见的终端）上只需使用一个
控制字符“Ctrl-K”。
一个UNIX系统可能连接的终端的类型实在是太多了，因此，要想编写出一个能够应付各种
加入jaVa编程群：524621833
---
## Page 167
第5章终端149
不同终端的程序也实在是太困难了，这样的程序必须为每一种终端准备好相应的源代码。
所以，terminfo工具包的出现也就是顺理成章的事情了。程序不再需要为每一种终端面进
行裁剪，它们可以通过一个终端型号数据库查找到正确的设置信息。在大多数现代的UNIX系
统上，这个数据库已经与另外一个名为curses的函数库软件包集成在一起，我们将在下一章遇
到它。
在Linux系统上，curses软件包通常被实现为ncurses数据库。在编写程序时要包括上提供了
对terminfo函数进行模型化定义的头文件ncurses.h才行，而terminfo函数本身实际是在它们自己
的头文件term.h里定义的。更正确地说，一般情况总是这样的。对比较新一些的Liux版本来说，
terminfo和ncurses有逐渐融合的超势，许多程序在使用terminfo函数的时候也必须包括上ncurses
头文件
5.4.2确定终端类型的方法
UNIX的环境里有一个名为TERM的变量，它被设置为当前使用中的终端的类型。它通常是
由系统在用户登录时自动设置的。系统管理员可以为与系统直接连接的终端设置一个缺省的终
端类型；而远程用户和网络用户则需要在系统管理员安排的提示符处选择自己的终端类型。
TERM变量的值可以通过telnet进行协调，由rlogin功能传递。
用户可以通过下面的命令对shell进行查询，看看自已正在使用的终端在系统眼里到底是哪
一种类型：
$echo$TBRK
xterm
在这个例子里，shell是从一个名为xterm的程序里开始运行的，这是一个X窗口系统下的终
端仿真器。
terminfo工具包里包含着一个由大址终端的性能指标和转义序列等信息构成的数据库，并且
还为它们的使用准备了一个统一的程序设计接口。有了这个工具包，程序设计工作得到了极大
的简化，并且能够随着数据库的扩展适应未来的终端，对不同类型的终端的支持不再需要由应
用程序自己来提供了。
终端的terminfo性能指标通常被描述为属性。它们被保存在一系列经过编译的terminfo文件里，
而这些文件一般被保存在/usr/lib/terminfo或/usr/local/terminfo子目录里。每个终端（也包括许多
种打印机，它们也可以在terminfo中定义）都有一个定义其性能指标和功能被访问手段的文件。
为了避免出现子目录过大的情况，实际文件都被保存在下级子目录里，下级子目录的名字就是终
端类型的第一个字母。比如说，VTi00型终端的定义就放在文件“.terminfo/v/vt100”里。
每个终端类型对应一个terminfo文件，文件格式都是可读的源代码。然后再用tic命令把它们
编译为一个更紧澳和高效的格式以方便应用程序的使用。但奇怪的是，X/Open技术规范提到了
源代码和编译格式的定义，却没有提到从源代码转换为编译格式的tic命令。我们可以用infocmp
程序给出terminfo编译数据项的可读版本。
下面是VT100终端的一个示例性terminfo文件：
加入jaVa编程群：524621833
---
## Page 168
150Linux程序设计
s infoump vt100
vt100|vt100-an|dec vt100 (w/advanced video),
xenl,xon,
acscaffg5skkllemnooppggzrssttuuvvwoxyyzz(11) ,
clear=\E[H\g[Js, cr=\r, csrx\E[xiaplad:ep28dr,
be1=^G,blink=\E[5m$,bo1d=\E[1mS,
cub=\E[p1sdD,cub1=\b, cud=\E[p1dB,cud1=\n,
cuf=\E[#p1$dc.
cup=\R[$i8p1d: #p28dHS,cuu=\F[ep18dA,
cuf1=\E[C$,
e11=\E[1KS，enacs=\E(B\E}0， hoe=\E[H，ht=\,
'<>]=
ed=\E[J$, e1=\E[KS
hts=\EH，ind=\n.ka1=\EOg,ka3=\EOs,kb2=\BOr，kbs=\b，
kc1=\EOp.kc3=\EOn.kcub1=\EOD.kcud1=\EOB.
kcuf1=\EOC,kcuu1=\EOA.kent=\EOM,kf0=\EOy.kf1=\EOP.
kf10=\E0x，kf2=\EOQ.kf3\E0R,kf4=\80s.kf5=\0t
kf6=\Ou,kf7=\E0v,kE8=\E01.kf9=\Ow，rc=\E8,
rev=\E17m$.ri=\EMs,rmacs=*O.rmkx=\E[?11\E>,
rs2=\>\E[?31\E[?41\E[?51\E(?7h\E[8h.s=\E/,
rmsoa\E{mS,rmu1=\E[mS,
sgr=1E10974p14p6e/8t;1t;878p28t;4e;878p19p3/8t;78;87ep48t;58;me78p98t*N8e^06;
sgr0x\E[mOS,smacg=N,smkx=\E[71h\Ea
gmgo=\[1;7ms，8mu1=\E[4m§,tbc=\E[3g
每个terminfo定义由三种数据项组成，这三种数据项叫做“性能名”（capname），它们分别
定义了终端的一种性能。
布尔性能指标比较容易理解，它告诉我们某个终端是否支持某个特定的功能。比如说，如
果某个终端支持XON/XOFF流控制、就能在上面的清单里看到布尔性能指标“XON”：如果给
定的“光标左置”命令能够在光标位于第0列的时候把光标移动到最右边的那一列去，就能在清
单里看到布尔性能指标“cub1”。
数值性能指标定义一些有关的尺寸长度数字，比如lines定义的是屏幕显示的行数，cols定义
的是所幕昱示的列数。数字和性能指标名称之间用一个井字号“#”隔开。所以，如果想定义一
个有80列24行显示范围的终端，可以写为“cols#80.lines#24”。
字符中性能指标稍微复杂一些。它们用来定义两种泾渭分明的性能：用来访问终端功能的
入字符串。有的字符串性能指标很简单，比如“el”表示“删除到这一行的末尾”。在VT100终
端上，用来完成这一操作的escape转义序列是“Esc-{-K”。在terminfo源代码格式里，这个转义
序列被写为“el=\VE[K”。
特殊键的定义也采用同样的办法。举例来说，VT100终端上的功能键F1对应发送的是转义
序列“Esc-O-P”。它被定义为“kfl=\EOP”。
当转义序列本身还要带有参数的时候，情况会稍微复杂一些。大多数终端可以把光标移动
到给定的行列位置。很明显，为光标可能停留的每个位置都定义一个不同的性能指标是不现实
的，解决办法只能是一个带参数的通用性字符串，然后在使用这个字符串的时候通过它的参数
值定义来给出光标的插入位置。举例来说，VT100终端会通过转义序列“Esc----H”
把光标移动到指定位置。在terminfo的源代码格式里，这个转义序列被写做相当复杂的
"cup=\E[%i%p1%d;%p2%dHS”。
它的意思是：
\E
发送Escape字符。
加入jaVa编程群：524621833
---
## Page 169
第5章终端
157
发送“”字符。
·%i
增加参数的值。
Id% 
把第一个参数放到堆栈上。
p% •