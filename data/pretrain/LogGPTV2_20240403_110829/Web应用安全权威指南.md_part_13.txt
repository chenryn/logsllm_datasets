      // 登录校验（略）
    ?>
    检索关键词 :
    以下略
    ```
    先来看一下正常运行的情况，假设关键词为"Haskell"，URL 如下。
    ``` 代码无行号
    http://example.jp/43/43-001.php?keyword=Haskell
    ```
    此时页面显示内容如下。
    **图 4-11 指定关键词为"Haskell"（正常情况）**
    ![{%}](Image00054.jpg)
    接下来是攻击的例子。关键词指定如下。
    ``` 代码无行号
    keyword=
    ```
    页面显示如下 [9]{.注释编号} 。
    ![{%}](Image00055.jpg)
    **图 4-12 会话 ID 被读取**
    如图所示，保存在 Cookie 中的会话
    ID（PHPSESSID）被显示了出来。表明外部注入的 JavaScript
    成功读取到了会话 ID。
    -   **使用被动攻击盗取他人的 Cookie 值**
        然而，能够显示自己的会话 ID
        对于攻击者来说并无太大意义，在实际的攻击中，攻击者需要将存在隐患的网站的用户引诱至恶意网站。以下就是恶意网站的示例。
        > **代码清单 /43/43-900.html**
        ``` 代码无行号
        商品大甩卖
        ```
        恶意网站的 HTML 使用了 iframe
        元素来显示存在隐患的网站的页面（/43/43-001.php），并对其实施 XSS
        攻击 [10]{.注释编号}
        。存在隐患的网站的用户只要浏览了该恶意网站，浏览器中 iframe
        里面的页面就 会受到 XSS 攻击。
        ![{%}](Image00056.jpg)
        **图 4-13 恶意网站构造示例**
        > 1\. 恶意网站的 iframe 中显示出存在隐患的网站
        >
        > 2\. 存在隐患的网站遭受攻击后，Cookie 值被添加到 URL
        > 的查询字符串中，页面跳转到信息收集页面
        >
        > 3\. 信息收集页面将接收到的 Cookie 值通过邮件发送给攻击者
        图 4-13 展示了恶意网站的运作方式。打开图左侧的页面时，iframe
        中会使用如下 URL 访问隐患网页。
        ``` 代码无行号
        http://example.jp/43/43-001.php?keyword=
        ```
        然后，存在隐患的网页中就会执行如下 JavaScript
        代码。为了易于阅读，此处对其进行了适当的换行。
        ``` 代码无行号
        ```
        这段 JavaScript 脚本的作用为，添加 Cookie 值作为 URL
        的查询字符串，并跳转至信息收集页面（43-091.php）[11]{.注释编号}
        。以下为收集信息用的脚本，它会将收集到的会话 ID
        发送给攻击者的邮箱（假定为 PI:EMAIL）。
        > **代码清单 /43/43-901.php**
        ``` 代码无行号
         攻击成功 
        ```
        邮件发送结果如图 4-14 所示。
        ![{%}](Image00057.jpg)
        **图 4-14 通过邮件收集浏览了恶意网站的用户的会话 ID**
        如此这般，如果用户是在登录了存在隐患的网站之后浏览的恶意网页，就会中了
        XSS 的招而使自己的会话 ID
        通过邮件发送给攻击者。攻击者利用得到的会话
        ID，就可以伪装成其他用户肆意妄为。
-   **通过 JavaScript 攻击**
    在上面的例子中，攻击者利用 JavaScript 读取到了用户的 Cookie
    值，然而，事实上利用 JavaScript
    实施的攻击却远不止如此。其中一个典型的案例就是利用 XSS
    制造的蠕虫病毒。下表列举了专门攻击美国大型网站的蠕虫病毒。
    **表 4-3 XSS 蠕虫病毒**
      --------------- -------------------- ------------------------ --------------------------------------
      时期            蠕虫名               目标网站                 主要行为
      2005 年 10 月   JS/Spacehero(samy)   myspace.com              为名为 samy 的账户增加好友
      2006 年 6 月    JS.Yamanner@m        Yahoo ！邮箱（美国版）   向感染者的通讯录中的邮箱地址发送病毒
      2009 年 4 月    JS.Twettir           twitter.com              将病毒复制到感染者的个人资料页面中
      2010 年 9 月    \-                   twitter.com              自动发布跳转至成人网站的信息等
      --------------- -------------------- ------------------------ --------------------------------------
    虽然这些蠕虫病毒表面上看上去并不带有恶意，但如果罪犯有决心的话，就能够收集大量的用户个人信息或者伪装他人发布信息，从而形成潜在的巨大风险。
    另外，随着 Ajax 技术的风靡，通过 JavaScript 调用 Web
    应用的各种功能的程序（Application Program Interface，缩写为
    API）在网站中的分量正在逐步增加。由于 API
    也能被恶意用于实施攻击，因此，综合使用 XSS 与 JavaScript
    的攻击实施起来反而变得更容易了。
-   **篡改网页**
    以上解说的攻击手段中，XSS
    攻击的对象网站仅限于支持会员登录的网站。其实，没有登录功能的网站同样也会遭受
    XSS 攻击。
    图 4-15 是某新发布的手机的预购网站。该网站由于存在 XSS
    漏洞，因此便能够对网页中的 HTML 元素进行添加 / 更改 /
    删除，或者更改表单发送的目标。
    ![{%}](Image00058.jpg)
    **图 4-15 某新款手机的预购网站**
    网页脚本的主干内容如下 [12]{.注释编号}
    。由于该页面兼任着输入页面和编辑页面，因此各个输入框都设置了初期值。而
    XSS 漏洞就存在于此。
    > **代码清单 43/43-902.php**
    ``` 代码无行号
     全新手机预约 
    姓    名 ">
    地    址 ">
    电话号码 ">
    型    号 ">
    数    量 ">
    ```
    虽然该网站没有认证功能，但同样能对其实施 XSS 攻击。
    以下 HTML（43-902.html）为对"某新款手机的预约网站"进行 XSS
    攻击的恶意网页。该页面同时也可以作为不使用 JavaScript 的 XSS
    攻击的示例，页面上通过样式将攻击用表单的提交按钮伪装成了链接的样子。
    > **代码清单 43/43-902.html**
         使用信用卡预约全新手机 
        现在可以使用信用卡预约手机，赶紧下单吧。
        请使用信用卡支付预购定金姓    名地    址电话号码型    号数量信用卡号有效期限
        '>                      └─注入的 HTML
                                                 └────伪装成链接的按钮
    下图为恶意网页的页面。
    ![{%}](Image00059.jpg)
    **图 4-16 恶意网页**
    用户点击伪装成链接的按钮后，如下 HTML 就会被生成在攻击对象网站上。
                               ┌使原先的 from 元素结束
        姓    名 
                                                               ┌通过指定样式将原先的 form 覆盖
         请使用信用卡支付预购定金
         姓    名  地 址 电话号码  型 号  数    量
         信用卡号  有效期限 
        ">
    恶意网页通过下列手段隐藏原先的 form 并添加新的 form，从而改变页面。
    -   使用 \ 使原先页面的 form 元素结束
    -   添加新的 form 元素，并指定 style 如下
        -   通过指定绝对座标将 form 的位置定位于左上角
        -   将 z-index 设置为很大的值 (99)，确保其堆叠顺序在原先 form
            的前面
        -   将背景色设为白色，从而隐藏原先的 form
    -   将 action 的 URL 指定为恶意网站
    被更改后的页面如下图所示。
    ![{%}](Image00060.jpg)
    **图 4-17 被更改后的手机预购网站**