object and a garbled pointer, (cid:104)p(cid:105). Its operation is simple: it reveals
the contents of (cid:104)p(cid:105) and selects the data element at the physical index
indicated thereby. This physical element will contain the requested
semantic element, as well as a garbled pointer, (cid:104)p(cid:48)(cid:105), to its successor,
both of which are returned to the caller. The complete traversal of
one component list in a linked multi-list is illustrated in Figure 2c.
Performance. Initializing a linked multi-list requires executing a
Waksman network, at a cost of Θ(nlogn).
Iteration can be per-
formed in constant time; therefore, the amortized cost is Θ(logn)
per element. However, pointers to the current positions in the com-
ponent lists must be stored in some structure external to the multi-
list itself, and in many cases this will incur additional costs. We
will use an ORAM and an oblivious queue serve this purpose, as
described in Section 3.2.
3.2 Applying Our Construction
In Secure Gale-Shapley, we use our multi-list to hold the joint
preferences list for the proposers and reviewers, subdivided by pro-
poser ID into n lists of n elements ordered by proposer preference.
We use an ORAM of length n to store current matches by reviewer
ID, and an oblivious queue [60] to store unmatched proposers. Gar-
bled pointers into the multi-list representing the iteration progress
for each proposer are stored in the match status ORAM for matched
(a) Initialization. The input  is combined with a random permu-
tation  which has been shifted left by one place. The result  is
then permuted according to the inverse of the ﬁrst permutation ,
resulting in a shufﬂed linked list . The leftmost element of the ﬁrst
random permutation  is retained outside the structure and repre-
sents the entry point.
(b) Interleaving multiple arrays to form an oblivious linked
multi-list. Multiple arrays can be concatenated and permuted to-
gether, becoming indistinguishable from one another. Individual en-
try points allow them to be independently traversable.
(c) Traversal of one of the interleaved lists. Each element con-
tains a reference to the next element in the sequence. After the last
element in the original sequence, traversal cannot continue.
Figure 2: Illustrations of the Oblivious Linked List structure.
proposers, and in the unmatched proposer queue otherwise. Com-
plete pseudocode is given in Figure 3.
Initialization. As input to InitializeMultilist we must provide a
master preferences list, containing all potential pairings ordered
ﬁrst by proposer ID and then by proposer rank. Proposer rank, how-
ever, is secret, and therefore we cannot expect to be able to collect
preferences ordered in that fashion. On the other hand, the Gale-
Shapley algorithm requires that participants must express prefer-
ences over all members of the opposite set, so it is reasonable for
preferences to be submitted pre-sorted ﬁrst by proposer ID and then
by reviewer ID. With preference data submitted pre-sorted in this
fashion, it is trivial to merge it into a single master preferences list,
1ABCDEFGHIJ2PC RandomPermutation Generation22PC Permutation Inversion47905268143ABCDEFGHIJ73092586413757905268143CHEJIDFAGB562398104Apply to {0,...,9}15Permutation NetworkIJKLMNOPABCDEFGHQRSTUVWXIJKLMNOPABCDEFGHQRSTUVWXAWEIUNBFLOVSKPGXQRDTMCJH15AWEIUNBFLOVSKPGXQRDTMCJHdeﬁne CmpSortOnRanks((cid:104)a(cid:105),(cid:104)b(cid:105)):
return Cmp((cid:104)a(cid:105).(cid:104)sr(cid:105),(cid:104)b(cid:105).(cid:104)sr(cid:105))
(cid:9)
deﬁne SecureGaleShapley((cid:104)ProposerPrefs(cid:105),(cid:104)ReviewerPrefs(cid:105),n):
(cid:104)Prefs(cid:105) ← ∅
for i from 0 to n− 1:
(cid:104)Prefs(cid:105)i∗n+ j ←(cid:8) (cid:104)si(cid:105) ← i,(cid:104)ri(cid:105) ← j,(cid:104)sr(cid:105) ← (cid:104)ProposerPrefs(cid:105)i∗n+ j,(cid:104)rr(cid:105) ← (cid:104)ReviewerPrefs(cid:105)i∗n+ j
for j from 0 to n− 1:
(cid:104)Prefs(cid:105)i∗n:(i+1)∗n−1 ← BatcherSort((cid:104)Prefs(cid:105)i∗n:(i+1)∗n−1, CmpSortOnRanks)
(cid:104)Prefs(cid:105)i ← {(cid:104)si(cid:105) ← ∅,(cid:104)ri(cid:105) ← ∅,(cid:104)sr(cid:105) ← ∅,(cid:104)rr(cid:105) ← ∅}
for i from n2 to 2n2 − n− 1:
{(cid:104)multilist(cid:105),(cid:104)entryPointers(cid:105)} ← InitializeMultilist((cid:104)Prefs(cid:105),{0,n,2n, ...,n2})
UnmatchedProposers ← new oblivious queue
for i from 0 to n− 1:
(cid:104)dummy(cid:105) ← (cid:104)entryPointers(cid:105)n
(cid:104)done(cid:105) ← false
RMatches ← new ORAM
for i from 0 to n2 − 1:
UnmatchedProposers ← QueuePush(UnmatchedProposers,(cid:104)entryPointers(cid:105)i)
(cid:104)if(cid:105) ¬QueueIsEmpty(UnmatchedProposers):
(cid:104)p(cid:105) ← QueuePop(UnmatchedProposers)
(cid:104)else(cid:105):(cid:104)p(cid:105) ← (cid:104)dummy(cid:105)
(cid:104)done(cid:105) ← true
{(cid:104)ProposedPair(cid:105),(cid:104)p(cid:48)(cid:105)} ← TraverseMultilist((cid:104)multilist(cid:105),(cid:104)p(cid:105))
(cid:104)if(cid:105) (cid:104)done(cid:105) = true:
(cid:104)dummy(cid:105) ← (cid:104)p(cid:48)(cid:105)
(cid:104)else(cid:105):{(cid:104)CurrentPair(cid:105),(cid:104)p(cid:48)(cid:48)(cid:105)} ← OramRead(RMatches,(cid:104)ProposedPair(cid:105).(cid:104)ri(cid:105))
(cid:104)if(cid:105) (cid:104)CurrentPair(cid:105) = ∅∨(cid:104)ProposedPair(cid:105).(cid:104)rr(cid:105)  ReviewerPrefsri,w:
wi ← j
w ← RMatchesri, j
if rr < ReviewerPrefsri,w:
RMatchesri,wi ← si
si ← w
return RMatches
Figure 4: Standard Roth-Peranson Algorithm. RothPeranson
expects to ingest proposer preferences as a dense multidimensional
array ordered ﬁrst by proposer index, then by proposer rank, and
reviewer preferences as a sparse multidimensional array ordered
ﬁrst by reviewer index, then by proposer index. It returns an array
of sets of proposer indices ordered by the reviewer indices to which
the proposers have been paired.
Initialization. Unlike Gale-Shapley, the Roth-Peranson algorithm
expects participants to express preferences over only a subset of
their counterparties. While this permits the combined master pref-
erence list to be much smaller than otherwise, it also prevents us
from constructing it by simply concatenating and interleaving in-
dividual preference lists as we could in the case of Gale-Shapley.
Instead, we specify that the algorithm takes participant preferences
inputs in the form of two master lists: one each for the proposers
(of size nq) and reviewers (of size mr). Both lists are sorted ﬁrst
by proposer index, then reviewer index, and only ranked pairings
are included. Each element will contain as garbled data both the
proposer and reviewer indices, a rank, and a bit indicating whether
the preference belongs to a proposer or reviewer. We combine the
two master preference lists using a Batcher merge [4]. We then it-
erate over the combined list and check each sequential pair: if a
pair shares proposer and reviewer indices, we push their combined
data into a queue. In this way, unrequited preferences are omitted.
We ﬂatten the queue into an array containing q elements for each
of the n proposers by conditionally popping elements or inserting
dummies as appropriate. We then sort each group of q elements ac-
cording to proposer rank, yielding the ﬁnal preference array which
is used to initialize an oblivious multi-list.
XOR-Sharing. If preferences are to be split among the compu-
tation parties by XOR-sharing, there is an additional problem that
must be solved. It is reasonable to expect each participant to sub-