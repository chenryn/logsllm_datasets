### Enhanced and Optimized Text

#### Privileges and Trust in the SSC Model
In the Secure Sliced Cloud (SSC) model, the System Control Domain (Sdom0) is granted privileges over UdomUs. However, SSC prevents Sdom0 from inspecting the contents of client meta-domains.

One of the key contributions of the SSC model is the division of the Trusted Computing Base (TCB) of the cloud infrastructure into two parts:
1. **System-level TCB**: Comprising the hypervisor, domB, BIOS, and bootloader, which are controlled by the cloud provider.
2. **Client-level TCB**: Including the client's Udom0, SDs, and MTSDs.

Clients can verify the integrity of the system-level TCB using trusted hardware, while they are responsible for the integrity of their client-level TCBs. Any compromise of a client-level TCB only affects that specific client.

Sdom0 runs all device drivers that perform actual I/O and has authority over scheduling and allocation decisions. Although these privileges allow Sdom0 to perform denial-of-service attacks, such attacks are not part of our threat model. Consequently, Sdom0 is not included in the TCB.

#### Communication and Domain Creation
The components of SSC must communicate with each other for tasks such as domain creation and privilege delegation. In our prototype, VMs communicate using traditional TCP/IP sockets. However, domB receives directives for domain creation through hypervisor-forwarded hypercalls (see Figures 2 and 3). The images of domains to be created are passed by attaching storage volumes containing this information.

#### Bootstrapping
Hosts in the cloud infrastructure are assumed to be equipped with TPM and IOMMU hardware, which is available on most modern chipsets. We assume that the TPM is virtualized, as described in prior work [5]. The supporting user-level daemons for the virtualized TPM (vTPM) run within domB, which is part of the TCB, and interact with the hardware TPM on the physical host. The protocols described here assume client interaction with a vTPM instance. We use the vTPM protocols as described in the original paper [5], although it may also be possible to use recently proposed variants [15]. The vTPM can cryptographically attest to the list of software packages loaded on a system in response to client requests; such attestations are called measurements [39].

During system boot, the BIOS passes control to a bootloader, which initializes the hardware TPM’s measurement. The bootloader then loads our modified version of the Xen hypervisor, Sdom0’s kernel and ramdisk, and domB’s kernel and ramdisk. It adds entries for the hypervisor and domB to the measurement stored in the TPM’s PCR registers. The hypervisor builds Sdom0 and domB, and programs the IOMMU to allow Sdom0 access to only the pages it owns. Following bootstrap and initialization, the hypervisor unpauses Sdom0 and schedules it for execution. Sdom0 then unpauses domB, which awaits client requests to initialize meta-domains. SSC forbids Sdom0 from directly interacting with the TPM; all TPM operations (both with the hardware TPM and vTPM instances) happen via domB.

Sdom0 starts the XenStore service, a database traditionally used by Xen to maintain information about virtual device configuration. Each user VM on the system is assigned its own subtree in XenStore with its virtual device configurations.

#### Building Client Meta-Domains
In SSC, domB receives and processes all requests to create new domains, including Udom0s, UdomUs, SDs, and MTSDs. Client requests to start new meta-domains are forwarded to domB from Sdom0. In response, domB creates a Udom0, which handles the creation of the rest of the meta-domain by sending more requests to domB (e.g., to create SDs and UdomUs). To allow clients to verify that their domains were built properly, domB integrates domain building with standard vTPM-based attestation protocols developed in prior work [5, 39].

**Udom0 Creation:**
Upon receiving a client request to create a new meta-domain, Sdom0 issues the `C_U0` hypercall containing a handle to the new domain’s bootstrap modules (kernel image, ramdisk, etc.). DomB builds the domain and returns to the client an identifier of the newly-created meta-domain. The construction of a new meta-domain follows the protocol shown in Figure 3(a), achieving two security goals:
1. **Verified Boot of Udom0**: At the end of the protocol, the client can verify that the Udom0 booted by the SSC platform corresponds to the image supplied in step 1 of Figure 3(a).
2. **Bootstrapping SSL Channel with Client**: The network driver is controlled by Sdom0, which is untrusted and can eavesdrop on any cleartext messages transmitted over the network. Therefore, the protocol in Figure 3(a) also interacts with the client to install an SSL private key within the newly-created Udom0, enabling encrypted communication.

**Installation of SSL Private Key:**
- **Step 1**: The client supplies a fresh symmetric key (freshSym) and a nonce (nSSL), both encrypted under the vTPM’s public key.
- **Step 2**: DomB creates Udom0 after checking the integrity of the Udom0 image (using Sigclient).
- **Step 3**: When domB creates Udom0, it requests the vTPM to decrypt the content, places freshSym and nSSL into Udom0’s memory, and ensures that Sdom0 cannot access them.
- **Step 4**: Udom0 sends nSSL to the client, which responds with the SSL private key encrypted under freshSym.
- **Step 5**: Udom0 decrypts the message to obtain the SSL private key, which is used for all future SSL-based communication with the client.

This protocol significantly restricts the power of evil twin attacks launched by a malicious Sdom0. In such an attack, Sdom0 would coerce domB to create a malicious Udom0 domain and trick the client into installing its SSL private key within this domain. Our protocol ensures that domB checks the integrity of the Udom0 image before booting the domain, preventing Sdom0 from including arbitrary malicious functionality without being detected by the client.

**UdomUs and SDs:**
Udom0 accepts and processes client requests to start UdomUs and SDs. Clients establish an SSL connection with Udom0 and transmit the kernel and ramdisk images of the new domain to Udom0. Udom0 forwards this request to domB, which then builds the domain (see Figure 3(b)).

We aim for Udom0s and SDs to be stateless, performing specialized tasks without needing persistent state. This minimizes the risk even if they are compromised via attacks directed against them. The lack of state also allows easy recovery upon compromise; they can simply be restarted [9]. In our design, we do not assign persistent storage to SDs. They are neither extensible nor allowed to load kernel modules or extensions outside of the initial configuration. All relevant configuration values are passed via command line parameters.

**MTSDs:**
Like SDs, each MTSD belongs to a client meta-domain and can be given specific privileges (via the `C_MTSD` hypercall) to map the state of client VMs, checkpoint, fingerprint, or introspect them. This allows the cloud provider to inspect client domains for regulatory compliance (Section 3.6).

Both the cloud provider and client cooperate to start the MTSD, as shown in the protocol in Figure 3(c). The client initiates the protocol after agreeing to start the MTSD in its meta-domain. DomB creates the MTSD, and both the provider and the client can ensure that the MTSD was initialized properly using signed measurements from the vTPM. The provider or the client can terminate the protocol if they find that the MTSD has been tampered with.

#### SSC Privilege Model
At the heart of SSC is a new privilege model enforced by the hypervisor, enabling clients to administer their own VMs securely without allowing cloud administrators to eavesdrop on their data. For purposes of exposition, we categorize the privileged operations performed by a VMM into six groups:

1. **VM Control Operations**: Include pausing/unpausing, scheduling, and destroying VMs.
2. **Privacy-Sensitive Operations**: Allow the mapping of memory and virtual CPU registers of a VM.