ing, we describe an attack for the case that |secret| = epsilon do
mid = (low + high) / 2;
secret_mul(mid);
recovered_secret = nmin / mid;
if underflow exception raised then
// continue search in upper half
low = mid;
else
// continue search in lower half
high = mid;
end
end
For our experiments, we set epsilon = 0.00001 · 10−308. For this
bound, Algorithm 1 requires a fixed number of 1040 invocations
of the ecall to recover a secret operand. We ran this algorithm for
1000 random, uniformly distributed secrets in the interval [0, 1[,
and computed the difference between the actual and the recov-
ered secret. The histogram of the error is shown in Figure 4. The
ACSAC2020,December7–11,2020,Austin,USAAlderetal.patchesintheseruntimesdoseverelyreducetheattacksurfacebycleansingMXCSRandtheFPUcontrolword,theyfailtofullyshieldtheenclaveapplicationbinaryfromourattacks.TofullyruleoutMMXattackvariantsaswell,theruntimeshouldminimallyexecuteanadditionalemmsinstructiontoplacetheFPUintheex-pectedx87mode.ThemitigationimplementedbytheGraphenedeveloperswhousedanfxrstorinstructionissufficienttoalsoruleoutthisfollowupMMXattackasitcleansesallstaterelatedtotheFPU,MMX,XMM,andMXCSRregisters.However,inlightofourfindings,weexplicitlyrecommendthatshieldingruntimesadoptthemoreprincipledandfuture-proofstrategyofcleansingtheentireprocessor-extendedstatethroughxrstoroneveryenclaveentry.BothOpenEnclaveandRust-EDPacknowledgedtheremain-ingattacksurfaceofaninsufficientldmxcsr/cwmitigation,andourrecommendedfullxrstorapproachwasintegratedintotheirrespectiveprojects.MicrosoftadditionallyassignedthisfollowupissueCVE-2020-15107.4CASESTUDY:FLOATING-POINTEXCEPTIONSASASIDECHANNELBackground.Apartfromallowingtocompromisecomputa-tions,anadversarycanalsousetheFPUstateregisterstoobtainside-channelinformationaboutfloating-pointcomputationsinsideSGXenclaves.Notably,thissidechannelalsoappliestofloating-pointoperationscarriedoutusingtheSSEextensions,i.e.,withstandardcompilersettingsandwithoutthespecialrequirementtousethex87FPU.ThebaseforthissidechannelaretheexceptionmaskbitsthatcanbesetintheMXCSRregisterrightbeforeenteringtheenclaveandthefactthatanattackercanregisteracustomsignalhandlerforfloating-pointexceptions(SIGFPE)tobenotifiedabouttheexceptions.Crucially,forSGXenclaves,thesignalhandlerisuntrustedcode.Thisissimilartoothercontrolled-channelattacks,e.g.,attacksbasedonpagefaults[48],segmentationfaults[17],oralignment-checkexceptions[43].Notethatincontrasttouser-spacecode,theexactreasonfortheexception(e.g.,underfloworoverflow)isnotpassedontothesignalhandlerwhentriggeredfromwithinSGX.However,weshowthatthiscanbeovercomebyonlyunmaskingoneexceptionatatimeandexecutingtheenclavemultipletimeswiththesameinputoperands.Inthissection,forthesakeofsimplicity,wefocusondoubleoperands,i.e.,the8-byteIEEE754double-precisionbinaryfloating-pointformat[47].Inthiscase,thesmallestnormalnumberis𝑛𝑚𝑖𝑛≈2.2250738585072014·10−308(hex0x0010000000000000),whilethelargestsubnormalis𝑑𝑚𝑎𝑥≈2.2250738585072009·10−308(hex0x000FFFFFFFFFFFFF).Whenevertheresultofacomputationis≤𝑑𝑚𝑎𝑥,anunderflowexceptionwillbetriggered.Asdescribedinthefollowing,thiscanbeusedasasidechanneltoinferonepossiblysecretoperandofanenclavedfloating-pointcomputation,inthisparticularexampleamultiplication,iftheotheroperandisattacker-controlled.Attackscenario.Forexample,consideraneuralnetworkim-plementation,wheretheweightsofthenetworkaresecretsstoredsecurelyinsideanSGXenclave.Theinputlayerofthenetworkinvolvesmultiplicationsoftheattacker-controlledinputsandthesecretweights.Forsimplicity,wefocusonasinglemultiplicationoftwofloatssecret*inputinthefollowing,butnotethatthe1voidsecret_mul(doubleinput){2doubleinternal=secret*input;3//furthercomputationsoninternalvalue...4}Listing1:Exampleenclavecodevulnerabletosecretextractionthroughafloating-pointexceptionsidechannel.methodcanbeextendedtomultiplesuchmultiplicationsbyrecov-eringthesecretoperandone-by-one.Furthermore,forSGX,theenclavecodecanbesingle-stepped[44]whichallowstoexactlypinpointonwhichinstructionanexceptionhasbeenraised.Forourproof-of-concept,wecreatedanecallonIntelSGX-SDKv2.7.1whichmultipliesasecretvaluewithaninput.ThegcccompilerbydefaultsgeneratestheSSEinstructionmulsdforthemultiplicationinListing1.NotethattheenclaveAPIdoesnotexposetheinternalresultvaluetotheattackerandwemerelyfocusontheside-channelsignalwhetheranexceptionwasraisedornot.Secretrecovery.Torecoversecret,inthefirststep,wedeter-mineifitsmagnitudeis≤1.Thiscanbeachievedbypassing𝑛𝑚𝑖𝑛asinput:ifanunderflowexceptionisraised,|secret|=epsilondomid=(low+high)/2;secret_mul(mid);recovered_secret=𝑛𝑚𝑖𝑛/mid;ifunderflowexceptionraisedthen//continuesearchinupperhalflow=mid;else//continuesearchinlowerhalfhigh=mid;endendForourexperiments,wesetepsilon=0.00001·10−308.Forthisbound,Algorithm1requiresafixednumberof1040invocationsoftheecalltorecoverasecretoperand.Weranthisalgorithmfor1000random,uniformlydistributedsecretsintheinterval[0,1[,andcomputedthedifferencebetweentheactualandtherecov-eredsecret.ThehistogramoftheerrorisshowninFigure4.The8Faulty Point Unit: ABI Poisoning Attacks on Intel SGX
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 4: Histogram over the error of the recovered secret
for 1000 samples (x-axis in log scale).
Figure 5: MLaaS system model with enclaves
maximum observed error was 3.667689888908754 · 10−6, with the
average error being 6.2648851729085662 · 10−7.
5 CASE STUDY: ATTACKING MACHINE
LEARNING PREDICTIONS
Background and system model. The core attributes of TEEs
are ideally suited for offloading sensitive computations into the
cloud. With conventional systems, a sensitive workload needed
to either be self-hosted or entrusted to an external cloud provider
that is bound by contracts and confidentiality clauses. Both solu-
tions require extensive (legal) planning and are attributed with
an increased cost compared to the benefit of conventional cloud
computing. When utilizing TEEs on the other hand, a customer can
place her sensitive computation inside an enclave that is executed
on the cloud provider’s premises. The TEE will guarantee the confi-
dentiality and integrity of the performed workload while the cloud
provider will do his due diligence to achieve a high availability of
the paid service to preserve his reputation. Additionally, customers
that utilize the service can be ensured that the cloud provider will
not learn the potentially confidential inputs or outputs.
Figure 5 illustrates such a TEE-based cloud computing service: A
Machine Learning as a Service (MLaaS) example of a model provider
who gives paid access to his model to customers. In this case study,
we assume that the model provider has spent enough resources
on the training of the model to make a direct access of customers
to the model undesirable. The model provider is assumed to train
the model in a trusted setting and then pushes the trained model
directly into the enclave that provides the service to customers.
Customers then communicate with the enclave and perform evalu-
ations and predictions of their input without learning the machine
learning model. Additionally, the enclave can guarantee privacy
such that neither the model provider nor the cloud provider learn
the customer’s input.
We assume that the cloud provider can behave maliciously as
long as his actions stay hidden from the model provider and the
customer.
Experimental evaluation. We base our case study on earlier
work from Alder et al. [1] who placed the Duktape Javascript en-
gine [40] in an Intel SGX enclave and utilized it to provide Machine
Learning with the ConvNetJS Javascript library [21]. This setup
allows to provide machine learning predictions from Javascript
code executed inside an Intel SGX enclave. We adjust this system
to prototype a simple service where a user requests evaluations of
her input from a machine learning model inside the enclave. As a
platform for this service, we utilize a standard exemplary convo-
lutional neural network from the ConvNetJS library that classifies
images of handwritten digits from the MNIST dataset into their
machine counterpart of 0 to 9. We utilize the demo example to
perform the training of a neural network on a trusted machine
outside of the enclave and export the trained classifier to be used
by our MLaaS enclave to classify future inputs. Such a training step
is equivalent to a model provider training the neural network in a
trusted environment, as it has not been subject to ABI-level fault
injection by our attack yet. With the exported neural network and
the ConvNetJS library, the enclave aims to evaluate customer inputs
in a trusted environment. Finally, we simulate the customer with
repeated requests with MNIST input digits to the enclave and mea-
sure the reported class and the reported confidence of the neural
network associated with each class. Again, we perform the attack
by modifying the FPU CW and the MXCSR directly before entering
the enclave. To showcase the potential worst-case impacts of our
attack, we consider two distinct scenarios with different victim en-
clave binaries created using Intel SGX-SDK v2.7.1: one binary was
generated with default compilation flags and hence uses primarily
SSE instructions, whereas the other binary was generated by ad-
ditionally passing the -mfpmath=387 compilation flag to explicitly
instruct gcc to use the x87 FPU for floating-point computations.
Table 3 shows the results of 100 input evaluations for all rounding
modes when using the SSE, or the x87 FPU in extended or single-
precision mode. Evaluations with the x87 double-precision mode
are not shown as we found these results to be identical to runs with
the x87 extended-precision mode. All depicted configurations were
executed on the same set of inputs to ensure repeatability. For the
highlighted baseline scenario, i.e., SSE and the default rounding
mode of rounding to the nearest value, the trained model expectedly
predicts 100% of the provided digits correctly. When adversely
changing rounding modes through the untrusted ABI, small errors
in the order of 10−16 are clearly introduced. Importantly, however,
the results indicate that such small perturbations are insufficient to
affect the predicted digit class and the model still holds the same
overall accuracy. This observation also holds for the x87 victim
enclave binary when utilizing the x87 FPU in extended-precision
mode. However, when ABI-level attackers maliciously reduce the
FPU to a single-precision mode, the x87 victim enclave binary can
interestingly be coerced into one of two roles. When rounding to
nearest or rounding up, the trained model will simply have a gravely
decreased accuracy with only 4% of the given input classified with
the correct digit. Alternatively, when forced to round down or
towards zero, the trained model will predict every given input as
the digit 2, regardless of the actual input. The average error in single-
precision mode lies in the range of 10−1, which easily scrambles
and rearranges the prediction percentages of each input evaluation.
9
10−1210−1010−810−6Error02550Countreceive predictionModel providerEnclaveDuktape JavascriptEnginepush modelCustomerpush inputPoison FPU registerACSAC 2020, December 7–11, 2020, Austin, USA
Alder et al.
Table 3: MNIST data set predictions with the x87 FPU and with SSE for different rounding modes and precisions.
Discussion. While the overall effectiveness of this attack was
shown to heavily depend on the way in which the enclave appli-
cation was compiled, which may not always be under the control
of the attacker, the case study clearly highlights the fallacy of the
shielding runtime to protect an ABI-compliant enclaved applica-
tion binary from its untrusted environment. The results especially
underline the threat for larger legacy 32-bit [17] or specialized ap-
plications that heavily rely on the x87 FPU, or even just require high
precision via the long double data type that might get compiled to
utilize the x87 FPU. Our example MNIST attack illustrates that, for
certain enclaved application binaries, an ABI-level adversary has
the potential to inject faults that purposefully and stealthily disrupt
the overall security objective of the outsourced application, with-
out needing to break any confidentiality or availability guarantees.
Furthermore, this attack can stealthily target specific customers to
allow a malicious cloud provider to degrade the neural network per-
formance for specific victims. Such a degradation in performance
may for instance allow the adversary to shift the customer’s favor
greatly towards a competing product or drive away customers from
the model provider while the adversary at the same time would
have little to no risk of being detected.
6 CASE STUDY: SPEC BENCHMARKS
To evaluate the theoretical impact of our ABI-level fault-injection
attacks on larger and more varied applications, we perform a larger-
scale synthetic attack evaluation on the SPEC CPU 2017 benchmark
programs outside of Intel SGX. While it is not straightforwardly pos-
sible to run the SPEC benchmark programs inside an SGX enclave,
we argue that the induced faults into floating-point computations
are independent of the surrounding execution environment and
a common benchmark will help to better understand the possible
impact of our attacks on an objective baseline computation.
Experimental evaluation. Our experimental setup runs out-
side Intel SGX and compiles the SPEC suite twice with gcc v6.2.0,
one time with default settings and one time with an additional
-mfpmath=387 flag to enforce the usage of the x87 FPU for a maxi-
mum demonstration of the attack’s impact. We then run the refer-
ence workload of the fprate class to generate meaningful evalua-
tion results. The fprate class of benchmarks is explicitly designed
10
around floating-point calculations and as such forms a relevant can-
didate to evaluate the impacts of our attack. It is important to note,
that the SPEC benchmark evaluation scripts already account for
floating-point errors by allowing a workload-specific error margin
before a benchmark is marked as failed. Similar to the previous case
studies, we perform the attack by executing fldcw and ldmxcsr
instructions before executing the SPEC benchmarks. As such, the
attacker performs the same steps as when attacking enclave code
as the execution of the SPEC benchmark can be seen as equivalent
to entering the enclave in this respect.
Table 4 shows the benchmarks in the fprate class and a marker
indicating whether the benchmark succeeded or failed for both the
default SSE binary, as well as for the x87 binary in single-precision
mode. In the highlighted baseline mode of to-nearest rounding with
the SSE, all SPEC benchmarks succeed. When maliciously changing
the rounding mode before execution of the SPEC benchmark, how-
ever, multiple tests already fail due to a too high accumulation of
floating-point errors. Furthermore, when considering a simulated
maximum-impact attack on an x87 binary in single-precision mode,
the attacker can, depending on the rounding mode, further degrade
floating-point computations and cause even more benchmarks to
fail. Under this attack, only 4 benchmarks in to-nearest rounding
mode or one benchmark in to-zero rounding mode still succeed.
Discussion. To better understand the nature of the induced
floating-point errors, we performed an additional manual analy-
sis of the 526.blender_r image rendering benchmark. While the
blender benchmark is designed to be resilient against expected
floating-point perturbations that do not exceed the internal error
threshold, we found that the x87 binary in single-precision mode
and with rounding towards zero can lead to subtle-yet-visible qual-
ity degradations in the rendered 3D images.
Figure 6 shows an example rendering with the difference be-
tween the expected original and an attacked scene marked in shades
of red. While most of the scene is colored in a light shade of red
that already stands for a small difference between the expected
and calculated output, some parts of the screenshot are marked
more clearly such as the framed mountain scenery or the hills to its
left. In the zoomed in portion of the framed scenery, it can be seen
that the expected baseline image (left) shows a tree shadow and
ACSAC2020,December7–11,2020,Austin,USAAlderetal.Table3:MNISTdatasetpredictionswiththex87FPUandwithSSEfordifferentroundingmodesandprecisions.Predictionclasscount(predicteddigit)AverageerrorcomparedtobaselineRoundingmodeAccuracy0123456789(SSE,roundingtonearest)x87SingleprecisionRoundtonearest4%0121421032030000.176046466527088413256407761764Roundingdown8%0010000000000.167963971736379585886211884826Roundingup4%0121421032030000.176046434092910736302073360093Roundtozero8%0010000000000.167963875521444400140680386357x87ExtendedprecisionRoundtonearest100%9148101489143110.000000000000000000554406357383Roundingdown100%9148101489143110.000000000000000330733402271493Roundingup100%9148101489143110.000000000000000314522247559579Roundtozero100%9148101489143110.000000000000000524157807065445SSERoundtonearest100%9148101489143110.0Roundingdown100%9148101489143110.000000000000000330733402271493Roundingup100%9148101489143110.000000000000000314522247559579Roundtozero100%9148101489143110.000000000000000524157807065445Discussion.Whiletheoveralleffectivenessofthisattackwasshowntoheavilydependonthewayinwhichtheenclaveappli-cationwascompiled,whichmaynotalwaysbeunderthecontroloftheattacker,thecasestudyclearlyhighlightsthefallacyoftheshieldingruntimetoprotectanABI-compliantenclavedapplica-tionbinaryfromitsuntrustedenvironment.Theresultsespeciallyunderlinethethreatforlargerlegacy32-bit[17]orspecializedap-plicationsthatheavilyrelyonthex87FPU,orevenjustrequirehighprecisionviathelongdoubledatatypethatmightgetcompiledtoutilizethex87FPU.OurexampleMNISTattackillustratesthat,forcertainenclavedapplicationbinaries,anABI-leveladversaryhasthepotentialtoinjectfaultsthatpurposefullyandstealthilydisrupttheoverallsecurityobjectiveoftheoutsourcedapplication,with-outneedingtobreakanyconfidentialityoravailabilityguarantees.Furthermore,thisattackcanstealthilytargetspecificcustomerstoallowamaliciouscloudprovidertodegradetheneuralnetworkper-formanceforspecificvictims.Suchadegradationinperformancemayforinstanceallowtheadversarytoshiftthecustomer’sfavorgreatlytowardsacompetingproductordriveawaycustomersfromthemodelproviderwhiletheadversaryatthesametimewouldhavelittletonoriskofbeingdetected.6CASESTUDY:SPECBENCHMARKSToevaluatethetheoreticalimpactofourABI-levelfault-injectionattacksonlargerandmorevariedapplications,weperformalarger-scalesyntheticattackevaluationontheSPECCPU2017benchmarkprogramsoutsideofIntelSGX.Whileitisnotstraightforwardlypos-sibletoruntheSPECbenchmarkprogramsinsideanSGXenclave,wearguethattheinducedfaultsintofloating-pointcomputationsareindependentofthesurroundingexecutionenvironmentandacommonbenchmarkwillhelptobetterunderstandthepossibleimpactofourattacksonanobjectivebaselinecomputation.Experimentalevaluation.Ourexperimentalsetuprunsout-sideIntelSGXandcompilestheSPECsuitetwicewithgccv6.2.0,onetimewithdefaultsettingsandonetimewithanadditional-mfpmath=387flagtoenforcetheusageofthex87FPUforamaxi-mumdemonstrationoftheattack’simpact.Wethenruntherefer-enceworkloadofthefprateclasstogeneratemeaningfulevalua-tionresults.Thefprateclassofbenchmarksisexplicitlydesignedaroundfloating-pointcalculationsandassuchformsarelevantcan-didatetoevaluatetheimpactsofourattack.Itisimportanttonote,thattheSPECbenchmarkevaluationscriptsalreadyaccountforfloating-pointerrorsbyallowingaworkload-specificerrormarginbeforeabenchmarkismarkedasfailed.Similartothepreviouscasestudies,weperformtheattackbyexecutingfldcwandldmxcsrinstructionsbeforeexecutingtheSPECbenchmarks.Assuch,theattackerperformsthesamestepsaswhenattackingenclavecodeastheexecutionoftheSPECbenchmarkcanbeseenasequivalenttoenteringtheenclaveinthisrespect.Table4showsthebenchmarksinthefprateclassandamarkerindicatingwhetherthebenchmarksucceededorfailedforboththedefaultSSEbinary,aswellasforthex87binaryinsingle-precisionmode.Inthehighlightedbaselinemodeofto-nearestroundingwiththeSSE,allSPECbenchmarkssucceed.WhenmaliciouslychangingtheroundingmodebeforeexecutionoftheSPECbenchmark,how-ever,multipletestsalreadyfailduetoatoohighaccumulationoffloating-pointerrors.Furthermore,whenconsideringasimulatedmaximum-impactattackonanx87binaryinsingle-precisionmode,theattackercan,dependingontheroundingmode,furtherdegradefloating-pointcomputationsandcauseevenmorebenchmarkstofail.Underthisattack,only4benchmarksinto-nearestroundingmodeoronebenchmarkinto-zeroroundingmodestillsucceed.Discussion.Tobetterunderstandthenatureoftheinducedfloating-pointerrors,weperformedanadditionalmanualanaly-sisofthe526.blender_rimagerenderingbenchmark.Whiletheblenderbenchmarkisdesignedtoberesilientagainstexpectedfloating-pointperturbationsthatdonotexceedtheinternalerrorthreshold,wefoundthatthex87binaryinsingle-precisionmodeandwithroundingtowardszerocanleadtosubtle-yet-visiblequal-itydegradationsintherendered3Dimages.Figure6showsanexamplerenderingwiththedifferencebe-tweentheexpectedoriginalandanattackedscenemarkedinshadesofred.Whilemostofthesceneiscoloredinalightshadeofredthatalreadystandsforasmalldifferencebetweentheexpected10Faulty Point Unit: ABI Poisoning Attacks on Intel SGX
ACSAC 2020, December 7–11, 2020, Austin, USA