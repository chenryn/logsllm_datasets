Some applications do not provide effective logout functionality:
n In some cases, a logout function is simply not implemented. Users have
no means of causing the application to invalidate their session.
n In some cases, the logout function does not actually cause the server
to invalidate the session. The server removes the token from the user’s
browser (for example, by issuing a Set-Cookie instruction to blank the
token). However, if the user continues to submit the token, the server
still accepts it.
n In the worst cases, when a user clicks Logout, this fact is not communi-
cated to the server, so the server performs no action. Rather, a client-side
script is executed that blanks the user’s cookie, meaning that subsequent
requests return the user to the login page. An attacker who gains access
to this cookie could use the session as if the user had never logged out.
Some applications that do not use authentication still contain functionality
that enables users to build up sensitive data within their session (for example,
a shopping application). Yet typically they do not provide any equivalent of a
logout function for users to terminate their session.
HACK STEPS
1. Do not fall into the trap of examining actions that the application per-
forms on the client-side token (such as cookie invalidation via a new
Set-Cookie instruction, client-side script, or an expiration time attribute).
In terms of session termination, nothing much depends on what happens
to the token within the client browser. Rather, investigate whether session
expiration is implemented on the server side:
a. Log in to the application to obtain a valid session token.
b. Wait for a period without using this token, and then submit a request
for a protected page (such as “my details”) using the token.
cc0077..iinndddd 224422 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 243
Chapter 7 n Attacking Session Management 243
c. If the page is displayed as normal, the token is still active.
d. Use trial and error to determine how long any session expiration time-
out is, or whether a token can still be used days after the last request
using it. Burp Intruder can be configured to increment the time inter-
val between successive requests to automate this task.
2. Determine whether a logout function exists and is prominently made
available to users. If not, users are more vulnerable, because they have no
way to cause the application to invalidate their session.
3. Where a logout function is provided, test its effectiveness. After logging out,
attempt to reuse the old token and determine whether it is still valid. If so,
users remain vulnerable to some session hijacking attacks even after they
have “logged out.” You can use Burp Suite to test this, by selecting a recent
session-dependent request from the proxy history and sending it to Burp
Repeater to reissue after you have logged out from the application.
TRY IT!
http://mdsec.net/auth/423/
http://mdsec.net/auth/439/
http://mdsec.net/auth/447/
http://mdsec.net/auth/452/
http://mdsec.net/auth/457/
Client Exposure to Token Hijacking
An attacker can target other users of the application in an attempt to capture
or misuse the victim’s session token in various ways:
n An obvious payload for cross-site scripting attacks is to query the user’s
cookies to obtain her session token, which can then be transmitted to an
arbitrary server controlled by the attacker. All the various permutations
of this attack are described in detail in Chapter 12.
n Various other attacks against users can be used to hijack the user’s session
in different ways. With session fi xation vulnerabilities, an attacker feeds
a known session token to a user, waits for her to log in, and then hijacks
her session. With cross-site request forgery attacks, an attacker makes
a crafted request to an application from a web site he controls, and he
exploits the fact that the user’s browser automatically submits her current
cookie with this request. These attacks are also described in Chapter 12.
cc0077..iinndddd 224433 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 244
244 Chapter 7 n Attacking Session Management
HACK STEPS
1. Identify any cross-site scripting vulnerabilities within the application, and
determine whether these can be exploited to capture the session tokens
of other users (see Chapter 12).
2. If the application issues session tokens to unauthenticated users, obtain a
token and perform a login. If the application does not issue a fresh token
following a successful login, it is vulnerable to session fixation.
3. Even if the application does not issue session tokens to unauthenticated
users, obtain a token by logging in, and then return to the login page. If
the application is willing to return this page even though you are already
authenticated, submit another login as a different user using the same
token. If the application does not issue a fresh token after the second
login, it is vulnerable to session fixation.
4. Identify the format of session tokens used by the application. Modify your
token to an invented value that is validly formed, and attempt to log in.
If the application allows you to create an authenticated session using an
invented token, it is vulnerable to session fixation.
5. If the application does not support login, but processes sensitive user
information (such as personal and payment details), and allows this to be
displayed after submission (such as on a “verify my order” page), carry
out the previous three tests in relation to the pages displaying sensitive
data. If a token set during anonymous usage of the application can later
be used to retrieve sensitive user information, the application is vulner-
able to session fixation.
6. If the application uses HTTP cookies to transmit session tokens, it may
well be vulnerable to cross-site request forgery (XSRF). First, log in to the
application. Then confirm that a request made to the application but origi-
nating from a page of a different application results in submission of the
user’s token. (This submission needs to be made from a window of the
same browser process that was used to log in to the target application.)
Attempt to identify any sensitive application functions whose parameters
an attacker can determine in advance, and exploit this to carry out unau-
thorized actions within the security context of a target user. See Chapter
13 for more details on how to execute XSRF attacks.
Liberal Cookie Scope
The usual simple summary of how cookies work is that the server issues a cookie
using the HTTP response header Set-cookie, and the browser then resubmits
this cookie in subsequent requests to the same server using the Cookie header.
In fact, matters are rather more subtle than this.
cc0077..iinndddd 224444 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 245
Chapter 7 n Attacking Session Management 245
The cookie mechanism allows a server to specify both the domain and the
URL path to which each cookie will be resubmitted. To do this, it uses the domain
and path attributes that may be included in the Set-cookie instruction.
Cookie Domain Restrictions
When the application residing at foo.wahh-app.com sets a cookie, the browser
by default resubmits the cookie in all subsequent requests to foo.wahh-app
.com, and also to any subdomains, such as admin.foo.wahh-app.com. It does
not submit the cookie to any other domains, including the parent domain
wahh-app.com and any other subdomains of the parent, such as bar.wahh-app.com.
A server can override this default behavior by including a domain attribute
in the Set-cookie instruction. For example, suppose that the application at foo
.wahh-app.com returns the following HTTP header:
Set-cookie: sessionId=19284710; domain=wahh-app.com;
The browser then resubmits this cookie to all subdomains of wahh-app.com,
including bar.wahh-app.com.
NOTE A server cannot specify just any domain using this attribute. First, the
domain specifi ed must be either the same domain that the application is run-
ning on or a domain that is its parent (either immediately or at some remove).
Second, the domain specifi ed cannot be a top-level domain such as .com or
.co.uk, because this would enable a malicious server to set arbitrary cook-
ies on any other domain. If the server violates one of these rules, the browser
simply ignores the Set-cookie instruction.
If an application sets a cookie’s domain scope as unduly liberal, this may
expose the application to various security vulnerabilities.
For example, consider a blogging application that allows users to register,
log in, write blog posts, and read other people’s blogs. The main application is
located at the domain wahh-blogs.com. When users log in to the application,
they receive a session token in a cookie that is scoped to this domain. Each user
can create blogs that are accessed via a new subdomain that is prefi xed by his
username:
herman.wahh-blogs.com
solero.wahh-blogs.com
Because cookies are automatically resubmitted to every subdomain within
their scope, when a user who is logged in browses the blogs of other users,
his session token is submitted with his requests. If blog authors are permitted
to place arbitrary JavaScript within their own blogs (as is usually the case in
cc0077..iinndddd 224455 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 246
246 Chapter 7 n Attacking Session Management
real-world blog applications), a malicious blogger can steal the session tokens
of other users in the same way as is done in a stored cross-site scripting attack
(see Chapter 12).
The problem arises because user-authored blogs are created as subdomains
of the main application that handles authentication and session management.
There is no facility within HTTP cookies for the application to prevent cookies
issued by the main domain from being resubmitted to its subdomains.
The solution is to use a different domain name for the main application (for
example, www.wahh-blogs.com) and to scope the domain of its session token
cookies to this fully qualifi ed name. The session cookie will not then be submit-
ted when a logged-in user browses the blogs of other users.
A different version of this vulnerability arises when an application explicitly
sets the domain scope of its cookies to a parent domain. For example, sup-
pose that a security-critical application is located at the domain sensitiveapp
.wahh-organization.com. When it sets cookies, it explicitly liberalizes their
domain scope, as follows:
Set-cookie: sessionId=12df098ad809a5219; domain=wahh-organization.com
The consequence of this is that the sensitive application’s session token cookies
will be submitted when a user visits every subdomain used by wahh-organization
.com, including:
www.wahh-organization.com
testapp.wahh-organization.com
Although these other applications may all belong to the same organization as
the sensitive application, it is undesirable for the sensitive application’s cookies
to be submitted to other applications, for several reasons:
n The personnel responsible for the other applications may have a different
level of trust than those responsible for the sensitive application.
n The other applications may contain functionality that enables third par-
ties to obtain the value of cookies submitted to the application, as in the
previous blogging example.
n The other applications may not have been subjected to the same security
standards or testing as the sensitive application (because they are less
important, do not handle sensitive data, or have been created only for test
purposes). Many kinds of vulnerability that may exist in those applica-
tions (for example, cross-site scripting vulnerabilities) may be irrelevant
to the security posture of those applications. But they could enable an
external attacker to leverage an insecure application to capture session
tokens created by the sensitive application.
cc0077..iinndddd 224466 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 247
Chapter 7 n Attacking Session Management 247
NOTE Domain-based segregation of cookies is not as strict as the same-
origin policy in general (see Chapter 3). In addition to the issues already
described in the handling of hostnames, browsers ignore both the protocol
and port number when determining cookie scope. If an application shares a
hostname with an untrusted application and relies on a difference in protocol
or port number to segregate itself, the more relaxed handling of cookies may
undermine this segregation. Any cookies issued by the application will be
accessible by the untrusted application that shares its hostname.
HACK STEPS
Review all the cookies issued by the application, and check for any domain
attributes used to control the scope of the cookies.
1. If an application explicitly liberalizes its cookies’ scope to a parent
domain, it may be leaving itself vulnerable to attacks via other web
applications.
2. If an application sets its cookies’ domain scope to its own domain name
(or does not specify a domain attribute), it may still be exposed to appli-
cations or functionality accessible via subdomains.
Identify all the possible domain names that will receive the cookies issued
by the application. Establish whether any other web application or functional-
ity is accessible via these domain names that you may be able to leverage to
obtain the cookies issued to users of the target application.
Cookie Path Restrictions
When the application residing at /apps/secure/foo-app/index.jsp sets a
cookie, the browser by default resubmits the cookie in all subsequent requests
to the path /apps/secure/foo-app/ and also to any subdirectories. It does not
submit the cookie to the parent directory or to any other directory paths that
exist on the server.
As with domain-based restrictions on cookie scope, a server can override this
default behavior by including a path attribute in the Set-cookie instruction.
For example, if the application returns the following HTTP header:
Set-cookie: sessionId=187ab023e09c00a881a; path=/apps/;
the browser resubmits this cookie to all subdirectories of the /apps/ path.
In contrast to domain-based scoping of cookies, this path-based restriction is
much stricter than what is imposed by the same-origin policy. As such, it is almost
entirely ineffective if used as a security mechanism to defend against untrusted
cc0077..iinndddd 224477 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 248
248 Chapter 7 n Attacking Session Management
applications hosted on the same domain. Client-side code running at one path
can open a window or iframe targeting a different path on the same domain and
can read from and write to that window without any restrictions. Hence, obtain-
ing a cookie that is scoped to a different path on the same domain is relatively
straightforward. See the following paper by Amit Klein for more details:
http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/
2006-March/000843.html
Securing Session Management
The defensive measures that web applications must take to prevent attacks on
their session management mechanisms correspond to the two broad categories
of vulnerability that affect those mechanisms. To perform session management
in a secure manner, an application must generate its tokens in a robust way and
must protect these tokens throughout their life cycle from creation to disposal.
Generate Strong Tokens
The tokens used to reidentify a user between successive requests should be
generated in a manner that does not provide any scope for an attacker who
obtains a large sample of tokens from the application in the usual way to predict
or extrapolate the tokens issued to other users.
The most effective token generation mechanisms are those that:
n Use an extremely large set of possible values
n Contain a strong source of pseudorandomness, ensuring an even and
unpredictable spread of tokens across the range of possible values
In principle, any item of arbitrary length and complexity may be guessed
using brute force given suffi cient time and resources. The objective of designing
a mechanism to generate strong tokens is that it should be extremely unlikely
that a determined attacker with large amounts of bandwidth and processing
resources should be successful in guessing a single valid token within the life
span of its validity.
Tokens should consist of nothing more than an identifi er used by the server
to locate the relevant session object to be used to process the user’s request.
The token should contain no meaning or structure, either overtly or wrapped
in layers of encoding or obfuscation. All data about the session’s owner and
status should be stored on the server in the session object to which the session
token corresponds.
Be careful when selecting a source of randomness. Developers should be
aware that the various sources available to them are likely to differ in strength
cc0077..iinndddd 224488 88//1199//22001111 1122::0077::4444 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 249
Chapter 7 n Attacking Session Management 249
signifi cantly. Some, like java.util.Random, are perfectly useful for many pur-
poses where a source of changing input is required. But they can be extrapolated
in both forward and reverse directions with perfect certainty on the basis of a
single item of output. Developers should investigate the mathematical proper-
ties of the actual algorithms used within different available sources of random-
ness and should read relevant documentation about the recommended uses of
different APIs. In general, if an algorithm is not explicitly described as being
cryptographically secure, it should be assumed to be predictable.
NOTE Some high-strength sources of randomness take some time to return
the next value in their output sequence because of the steps they take to
obtain suffi cient entropy (such as from system events). Therefore, they may
not deliver values fast enough to generate tokens for some high-volume
applications.
In addition to selecting the most robust source of randomness that is feasible,
a good practice is to introduce as a source of entropy some information about
the individual request for which the token is being generated. This informa-
tion may not be unique to that request, but it can be effective at mitigating any
weaknesses in the core pseudorandom number generator being used. Here are
some examples of information that may be incorporated:
n The source IP address and port number from which the request was received
n TheUser-Agent header in the request
n The time of the request in milliseconds
A highly effective formula for incorporating this entropy is to construct a
string that concatenates a pseudorandom number, a variety of request-specifi c
data as listed, and a secret string known only to the server and generated afresh
on each reboot. A suitable hash is then taken of this string (using, for example,
SHA-256 at the time of this writing) to produce a manageable fi xed-length string
that can be used as a token. (Placing the most variable items toward the start of
the hash’s input maximizes the “avalanche” effect within the hashing algorithm.)
TIP Having chosen an algorithm for generating session tokens, a useful
“thought experiment” is to imagine that your source of pseudorandomness
is broken and always returns the same value. In this eventuality, would an