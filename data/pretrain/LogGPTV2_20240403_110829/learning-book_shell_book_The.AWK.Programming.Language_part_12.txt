0.4
595.7
260.7
TOTAL for Barope
6.1
401
1.6
Horth Aoerica
Mexico
USA
78
2.8
8,4
3615
762
3.0
14.1
102.4
Canada
25
0.9
3852
15.0
65.6
6.5
TOTAL for Horth Aserics
340
12.1
8229
32.0
South Anerica
Brasi1
4.8
3286
12.8
40.8
TOTAL for South Anerica
134
2019
100.0
4.8
25681
3286
12.8
GRAND TOTAL
100.0
268098
prep3 prepares and sorts the necessary information from the countries file:
prep3 - prepare countries data for form3
BEGIN（FS ="\t"}
area[$4]+= $2
areatot += $2
pop[$4]+= $3
poptot+= s3
pass ** 2(
den=1000+$3/$2
printf(*%s:%s:%s:%f:%d:xf:xf:%d:%dn,
$4,s1,$3,100+$3/poptot，$2,100+$2/areatot,
den，pop[$4],area[$4]) 1*sort -t:+0 -1+6rn"
This program needs two passes over the data. In the first pass it accumulates
the area and population of each continent in the arrays area and pop, and also
the totals areatot and poptot. In the second pass it formats the result for
---
## Page 104
94
CHAPTER 4
each country and pipes it into sort. The two passes are controlled by the value
of the variable pass, which can be changed on the command line between
passes:
awk -f prep3 pass=1 countries pass=2 countries
The output of prep3 consists of lines with 9 colon-separated fields:
continent
country
population
percentage of total population
area
percentage of total area
population density
total population of this country’s continent
total area of this country’s continent
Note that we've reverted to using tricky arguments to the sort command: the
records are piped into sort, which sorts them alphabetically by the first field
and in reverse numeric order by the seventh field.
The fancy report can be generated by typing the command line
awk -f prep3 pass=1 countries pass=2 countries 1 awk -f form3
where the program form3 is:
#forn3 - format countries report nunber 3
BEGIN(
FS=":";date="January 1,1988"
hfmt= "x36s x8g %12s %7s %12s\n*
tfmt ="%33s %10s %10s %9s\n"
TOTfet=""
TOTALfor %-138%7d%11.1f%11d%10.1f\n
printf("%-18s %-40s %19s\n\n","Report No.3”,
"POPULATION,AREA,POPULATION DENSITY"，date)
printf("x-14s x-14s %-23s %-14s.%-11s\n\n°,
"CONTINENT",
*Millions
"COUNTRY",
"POPULATION"，
"Thousands
"AREA",
"POP.DEN.")
printf(hfmt,
"Pct.of",
printf(hfat,
"of People",
"Pct.of",
"Total"
"of Sq. Mi.",
"Total ",
printf(hfmt,
==*
if （s1 1= prev)（#new continent
if （NR >1)
totalprint()
prev =$1
first entry for continent
poptot=s8;
poppct=$4
areatot = s9;
areapct = $6
}else{
next entry for continent
$1 =
---
## Page 105
SECTION 4.1
GENERATING REPORTS
95
poppct += s4; areapct += $6
printf(* %-158%-10s %6d %10.1f %10d %9.1f %10.1f\n",
$1,$2,$3,$4,$5,$6,$7)
s =+oddod6s =+dodb
garea += s5;gareapct += $6
END(
printf(* GRAND ToTAL %20d %10.1f %10d %9.1f^n",
totalprint()
printf(tfnt，"oouss”，"sssss”,*ssss”，"sus”)
gpop，gpoppct，garea，gareapct)
function totalprint（）（
print totals for previous continent
printf(tfnt,
printf（Torfnt, prev，poptot,poppct, areatot,areapct)
--"，"-…··-”，*--
-=-")
（===,'===,==,'===,'g）aud
In addition to formatting, form3 accumulates and prints subtotals for each con-
tinent, and also accumulates the total population, population percentage, area,
and area percentage, which are printed as part of the action associated with the
END pattern.
The form3 program prints a total after all of the entries for each continent
have been seen. But naturally it docsn’t know that all the entries have been
far" situation is the classic example of control-break programming. The solu-
tion here is to test each input line before printing, to see whether a total has to
be produced for the previous group; the same test has to be included in the END
when there are multiple levels.
As these examples suggest, complex formatting tasks can often be done by
the composition of awk programs. But it remains an appallingly tedious busi-
ness to count characters and write printf statements to make everything come
out properly lined up, and it's a nightmare when something has to be changed.
positioning for you. It would be quite feasible to write an awk program to for-
mat simple tables for printers; we'll come back to that in a moment. Since we
are using Unix and a typesetter, however, we can use what already exists: the
tb1 program, which does table formatting. The program form4 is very similar
to form3, except that it contains no magic numbers for column widths.
Instead, it generates some tb1 commands and the table data in columns
can safely ignore the details.)
---
## Page 106
96
REPORTS AND DATABASES
CHAPTER 4
forn4 - format countries data for tbl input
BEGIN{
print "，rs\ncenter;”
printf("xs\txs\txs\n\n","Report No.3",
“POPULATION,AREA，POPULATION DENSITY",date)
print "cowrINENr",
"COUNTRY"，"POPULATION",
"AREA",
"Millions”，"Pct.of"，“Thousands”,
"POP.DEN."
"Pct.of"，"People per"
print
9e,
"of People",
"Total"，"of Sq.Mi.",
t"\t\t_\t_\t\t_\t"
"Total",
"Sq.Hi.*
print
'u_u uu_u  tg'。uxd
if（$11= prev）（new continent
if （NR >1)
totalprint()
poptot=$8;
prev = $1
areatot = $9;
poppct=$4
areapct = $6
}else(
next entry for current continent
81 = **
poppct += $4;areapct += $6
printf（"x\txg\txd\t%,1f\txd\tx.1f\tx.1f\n,
$1，$2,$3,$4,$5,$6,$7)
s=+dodb
garea += $5;gareapct += $6
gpoppct += s4
END{
totalprint()
printf（"GRANDTOTAL>tXd\t%.1f\tXd\tx.1f\n”,
print *.r&\nl s n n n n n.*
gpop，gpoppct, garea， gareapct)
print"
print ".rz*
"”，””，"=”,
"=",""
function totalprint（){
print totals for previous continent
print "",
printf("'
rAorx\tx\tx.\t%d\t%.1fn,
prev,poptot,poppct，areatot，areapct)
uuuuu。ud
---
## Page 107
SECTION 4.1
GENERATING REPORTS
97
When the output from form4 is run through tb1, this table results:
Report No. 3
POPULATION, AREA, POPULATION DENSITY
January 1, 1988
COUNTRY
POPULATION
AREA
POP. DEN.
Millions
Pet. of
Thousands
Pet. of
People per
of People
Total
of Sq. Mi.
Total
Sq. Mi.
Asia
Japan
120
4.3
144
0.6
833.3
India
746
26.5
1267
4.9
588.8
China
1032
36.6
3705
14.4
278.5
USSR
9.8
8649
33.7
31.8
TOTAL for Asia
2173
77.1
13765
53.6
Europe
Germany
19
22
96
0.4
635.4
England
2.0
94
0.4
595.7
France
55
2.0
211
0.8
260.7
TOTAL for Europe
172
6.1
401
1.6
North America
Mexico
78
2.8
762
3.0
102.4
237
8.4
3615
14.1
65.6
Canada
25
0.9
3852
15.0
6.5
TOTAL for North America
340
12.1
8229
32.0
South America
Brazil
134
4.8
3286
12.8
40.8
TOTAL for South America
134
4.8
12.8
GRAND TOTAL
2819
100.0
25681
100.0
We suggested above the possibility of building a program to format tables.
make something smaller: a program that prints items in columns with text items
left-justified on the widest entry in that column, and numeric items right justi-
fied and centered on the widest entry. In other words, given a header and the
countries file as input it would print:
COUNTRY
AREA
POPULATION
USSR
8649
275
CONTINENT
Canada
3852
25
North America
Asia
China
USA
3705
1032
3615
237
North America
Asia
Brazil
3286
1267
134
India
746
South
A8ia
America
Mexico
762
78
France
211
55
North America
Japan
144
120
Europe
Germany
96
61
Europe
As1a
England
94
56
Europe
The program is fairly compact:
---
## Page 108
98
REPORTS AND DATABASES
CHAPTER 4
table -sinple table fornatter
BEGIN(
number ="^[+-]7（[0-9]+[.]?[0-9]+1[.][0-9]+)s
rOw[NR]= S0
for（ =1;y）？x:y ）
function numjust（n,s）(position s in field n
return s substr(blanks,1, int((wid[n]-nwid[n])/2))
}
The first pass records the data and computes the maximum widths of the
numeric and nonnumeric items for each column. The second pass (in the END
action) prints each item in the proper position. Left-justifying alphabetic items
is easy: we just use wid[i], the maximum width of column i, to build a for-
mat string for printf; if the maximum width is 10, for instance, the format
will be % 10s for each alphabetic item in column i.
be right-justified like this:
It's a bit more work for numeric items: a numeric item v in column i has to
[F】PTA
[FPTAu
The number of blanks to the right of v is (wid[i]-nwid[i])/2. so
numjust concatenates that many blanks to the end of v, then prints it with
%10s (again assuming a width of 10).
---
## Page 109
SECTION 4.2
PACKAGED QUERIES AND REPORTS99
Exercise 4-1. Modify form3 and forn4 to use a date provided from elsewhere, rather
than having it built in. 
Exercise 42. Because of rounding, column entries printed by form3 and form4 do not
always add up to the subtotals shown. How would you correct this? 
Exercise 4-3. The table formatter assumes that all numbers have the same number of
digits after the decimal point. Modify it to work properly if this assumption is not true.
口
Exercise 44. Enhance table to permit a sequence of specification lines that tell how
the subsequent data is to be formatted in each column. (This is how tb1 is controlled.)
口
4.2PackagedQueriesand Reports
mand that can be invoked without much typing. Suppose we want to determine
the population, area, and population density of various countries. To determine
this information for Canada, for example, we could type the command (assum-
ing a Unix-like shell)
avk'