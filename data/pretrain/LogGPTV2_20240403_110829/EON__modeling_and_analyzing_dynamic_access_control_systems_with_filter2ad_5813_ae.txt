### 优化后的文本

#### 通信条件和约束
令 `Send(x, z)` 表示进程 `x` 可以向进程 `z` 发送消息。此条件受到辅助条件 `Link(x, y, z)` 和 `Comm(x, y, z)` 的限制，其中 `y` 是某个端口。具体来说：

- `Link(x, y, z)` 要求 `x` 和 `z` 准备好进行通信，并且 `y` 实际上可用于 `x` 和 `z` 之间的通信。
- `Comm(x, y, z)` 编码了通信要求 `xS ⊑ zR ⊓ yL`，如第 5.2 节所述。这些规则由脚本自动生成。

请注意，由于污点传播，某些我们建模的通信链接可能是冗余的。实际上，一些链接允许的通信可能对保密性构成威胁。

**Link 规则示例：**
```prolog
Link(x, y, z) :-
    Useru(x), PortAny(y), Wu(z), Ready(z).

Link(x, y, z) :-
    Wu(x), Ready(x), Portu(y), Ready(z).

Link(x, y, z) :-
    Wu(x), Ready(x), PortAny(y), Wv(z), Ready(z).

Link(x, y, z) :-
    NETd(x), Ready(x), PortAny(y), Ready(z).

Link(x, y, z) :-
    Ready(x), PortDBu(y), DBproxyRu(z).

Link(x, y, z) :-
    DBproxyRu(x), PortAny(y), DBproxySu(z).

Link(x, y, z) :-
    DBproxySu(x), PortAny(y), Wu(z), Ready(z).

Link(x, y, z) :-
    DBproxySu(x), PortAny(y), Wv(z), Ready(z).
```

**发送消息的规则：**
```prolog
Send(x, y, z) :- Link(x, y, z), Comm(x, y, z).
```

#### 通信效果
下面的子句编码了从进程 `x` 向进程 `z` 发送消息的效果，如第 5.2 节所述：标签 `zS` 被转换为 `zS ⊔ (xS ⊓ z⋆S)`。对于任何字段 `ℓ`，如果 `min(z⋆S.ℓ, xS.ℓ) ≤ zS.ℓ`（即 `zS.ℓ = ⋆` 或 `xS.ℓ ≤ zS.ℓ`），则安全级别 `zS.ℓ` 不需要提升。这个条件用 `LeqSTARℓ(x, z)` 表示。此外，关系 `Mu` 在这种通信中被扩展。（这些规则由脚本自动生成。）

**通信效果规则示例：**
```prolog
next Mu(z) :-
    Send(x, z), Mu(x),
    LeqSTARut(x, z), LeqSTARvt(x, z),
    LeqSTARuc(x, z), LeqSTARvc(x, z).

next Mu(z), LSvt3(z), !LSvt1(z) :-
    Send(x, z), Mu(x),
    LeqSTARut(x, z), LSvt1(z), LSvt3(x),
    LeqSTARuc(x, z), LeqSTARvc(x, z).

next Mu(z), LSut3(z), !LSut1(z) :-
    Send(x, z), Mu(x),
    LSut1(z), LSut3(x), LeqSTARvt(x, z),
    LeqSTARuc(x, z), LeqSTARvc(x, z).

next Mu(z), LSvt3(z), !LSvt1(z), LSut3(z), !LSut1(z) :-
    Send(x, z), Mu(x),
    LSut1(z), LSut3(x), LSvt1(z), LSvt3(x),
    LeqSTARuc(x, z), LeqSTARvc(x, z).
```

#### 保密性违规查询
我们现在查询 `SecrecyViolation`，它表示存在一个代表用户 `v` 运行的进程 `x`，但携带了用户 `u` 的数据，即 `Userv(x)` 或 `Wv(x)`，并且 `Mu(x)` 成立。

**保密性违规查询示例：**
```prolog
SecrecyViolation :- Userv(x), Mu(x).
SecrecyViolation :- Wv(x), Mu(x).
? SecrecyViolation.
```

EON 没有找到任何针对此查询的漏洞。换句话说，我们有以下定理，该定理由 EON 自动证明。

**定理 5（数据隔离）**：用户 `u` 的数据永远不会泄露给代表不同用户 `v` 运行的任何进程。

#### 实验规模统计
为了说明实验的规模，整个 Web 服务器的规范大约有 250 行 EON 代码。翻译后的 Datalog 程序包含 152 条递归子句，涉及一个 46 元的 `Reachable` 关系（即 46 位原子状态）。我们的查询在一台 Pentium IV 2.8GHz 机器（2GB 内存）上大约需要 90 分钟来评估——相比之下，其他示例的查询不到一秒钟。本节所有示例的脚本可在 [7] 中获取。

### 相关工作
众所周知，访问控制模型的安全性问题（即给定的访问是否被给定的访问控制模型允许）在一般情况下是不可判定的 [13, 9]。然而，有些受限类别的访问控制模型是可判定的。我们的工作可以被视为朝着识别此类模型迈出的一步：我们设计了一种用于动态访问控制系统且信息流属性可判定的表达语言。

使用逻辑程序分析访问控制模型有着悠久的历史。我们这里只关注更相关的工作。最近，Dougherty 等人 [10] 提出了一种技术，用于研究动态环境下的访问控制策略的安全属性。在那里，策略用没有否定和递归的 Datalog 片段指定，而环境用有限状态机指定。通过将策略和环境的组合简化为一阶逻辑公式来进行分析。虽然作者在这个框架中确定了一些可判定的问题，但由于缺乏递归和否定，模型和查询的表达能力受到了限制，而且并不总是能够准确地为环境指定有限状态机。事实上，本文研究的所有动态访问控制模型都无法在其框架中进行分析。

Sarna-Starosta 和 Stoller [18] 使用 Prolog 研究了 Security-Enhanced Linux (SELinux) 系统。SELinux 系统强制执行用 SELinux 的策略语言编写的访问控制策略。作者描述了一个名为 PAL 的工具，该工具将此类策略翻译成逻辑程序，并通过查询评估进行分析。Prasad 等人 [16] 在一个名为 Netra 的工具中使用 Datalog 研究了 SELinux 和 Windows XP 配置。与 PAL 不同，Netra 既健全又完整，因为 Datalog 中的查询评估是可判定的（而在 Prolog 中则不是）。然而，这两种工具都无法发现动态利用的漏洞。Stoller 等人在管理角色基础访问控制 [19] 的政策分析方面的最新工作解决了一些这些问题，这与我们的工作类似。

最近，Becker 等人 [2] 提出了一种称为 SecPAL 的语言，可以在去中心化系统中表达授权策略和细粒度委托控制。他们的规范被编译成 Datalog 程序，类似于我们的工作。由于 Datalog 是 EON 的一个子集，因此 EON 至少与 SecPAL 一样具有表现力。另一方面，尚不清楚 SecPAL 是否与 EON 一样具有表现力；前者专门用于表达授权和委托策略，而后者在这方面保持很大程度的中立。SecPAL 的一个有趣方面是它允许在查询中使用否定。虽然 EON 允许这样的否定，但在第 4 节讨论的片段中不包括这一点。然而，我们已经验证，这一限制可以从该片段中移除，而不影响正确性和效率。

其他相关工作包括 Blanchet 的 ProVerif [5]，这是一个强大的工具，可以分析用应用 pi 演算编写的协议。底层引擎将协议和相关的等价理论重写为类似 Prolog 的规则，并使用定制的解析过程回答关于保密性和真实性属性的查询。ProVerif 是健全的但不完备；它可能无法终止查询，也可能无法证明或反驳查询。事实上，虽然 ProVerif 可以处理 Windows Vista 的访问控制模型，但它无法终止对我们 Asbestos Web 服务器模型的处理。总之，EON 的表现力不如 ProVerif；但对于满足我们限制的模型，EON 保证结果的健全性和完备性。

最后，我们并不是第一个提出基于 Datalog 的动态语言。例如，Abadi 和 Manna [1] 以及 Orgun [17] 研究了相关的语言。然而，我们似乎是第一个引入新的 Datalog 运算符并展示它可以简化为 Datalog 中的存在量化的。这种运算符使我们能够表达量化无限数量进程和对象的规范。

### 结论
本文介绍了 EON，一种逻辑编程语言和工具，可用于建模和分析动态访问控制系统。安全性违规可以用这种语言中的时间查询来建模，并通过查询评估来发现攻击。我们展示了 EON 中的查询评估可以简化为 Datalog 片段中的可判定查询满足性，并且在进一步的限制下，可以简化为 Datalog 中的高效查询评估。

我们对 EON 的设计需要非常小心，以保持查询评估的可判定性。特别是，我们要求任何引入或转换的基本关系都是一元的——允许动态二元基本关系很容易导致不可判定性 [7]。此外，我们要求转换具有单调守卫，并且查询是单调的。这些限制并不妨碍我们建模最先进的访问控制模型，如 Windows Vista 和 Asbestos 实现的那些。通过一元基本关系和新子句，我们可以创建和标记进程和对象。进一步地，通过 `next` 子句，我们可以建模运行时效果，如动态访问控制、通信和污点传播。因此，EON 适用于建模动态访问控制系统。

此外，我们展示了 EON 可以验证各种感兴趣的安全属性。由于我们的查询评估策略既健全又完备，EON 要么找到漏洞，要么决定性地证明不存在漏洞。我们预计还有其他类别的系统可以使用这种方法进行建模和分析。

### 参考文献
[1] M. Abadi and Z. Manna. Temporal logic programming. Journal of Symbolic Computing, 8(3):277–295, 1989.

[2] M. Becker, C. Fournet, and A. Gordon. Design and semantics of a decentralized authorization language. In CSF’07: Computer Security Foundations Symposium. IEEE, 2007.

[3] D. E. Bell and L. J. LaPadula. Secure computer systems: Mathematical foundations and model. Technical Report M74-244, MITRE Corp., 1975.

[4] K. J. Biba. Integrity considerations for secure computer systems. Technical Report TR-3153, MITRE Corp., 1977.

[5] B. Blanchet. An efficient cryptographic protocol verifier based on prolog rules. In CSFW’01: Computer Security Foundations Workshop, page 82. IEEE, 2001.

[6] A. Chaudhuri, P. Naldurg, and S. Rajamani. A type system for data-flow integrity on Windows Vista. In PLAS’08: Programming Languages and Analysis for Security, pages 89–100. ACM, 2008.

[7] A. Chaudhuri, P. Naldurg, S. Rajamani, G. Ramalingam, and L. Velaga. EON: Modeling and analyzing dynamic access control systems with logic programs. Technical Report MSR-TR-2008-21, Microsoft Research, 2008. See http://www.soe.ucsc.edu/~avik/projects/EON/.

[8] M. Conover. Analysis of the windows vista security model. Symantec Report. Available at www.symantec.com/avcenter/reference/Windows_Vista_Security_Model_Analysis.pdf.

[9] D. E. Denning. A lattice model of secure information flow. Communications of the ACM, 19(5):236–243, 1976.

[10] D. J. Dougherty, K. Fisler, and S. Krishnamurthi. Specifying and reasoning about dynamic access-control policies. In IJCAR’06: International Joint Conference on Automated Reasoning, 2006.

[11] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazières, F. Kaashoek, and R. Morris. Labels and event processes in the Asbestos operating system. In SOSP’05: Symposium on Operating Systems Principles, pages 17–30. ACM, 2005.

[12] A. Y. Halevy, I. S. Mumick, Y. Sagiv, and O. Shmueli. Static analysis in datalog extensions. Journal of the ACM, 48(5):971–1012, 2001.

[13] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. On protection in operating systems. In SOSP’75: Symposium on Operating systems Principles, pages 14–24. ACM, 1975.

[14] B. W. Lampson. Protection. ACM Operating Systems Review, 8(1):18–24, Jan 1974.

[15] P. Loscocco, S. Smalley, P. Muckelbauer, R. Taylor, J. Turner, and J. Farrell. The inevitability of failure: The flawed assumption of security in modern computing environments. Technical report, NSA, 1995.

[16] P. Naldurg, S. Schwoon, S. Rajamani, and J. Lambert. Netra: seeing through access control. In FMSE’06: Formal Methods in Security Engineering, pages 55–66. ACM, 2006.

[17] M. A. Orgun. On temporal deductive databases. Computational Intelligence, 12:235–259, 1996.

[18] B. Sarna-Starosta and S. D. Stoller. Policy analysis for security-enhanced linux. In WITS’04: Workshop on Issues in the Theory of Security, 2004. Available at http://www.cs.sunysb.edu/~stoller/WITS2004.html.

[19] S. D. Stoller, P. Yang, C. Ramakrishnan, and M. I. Gofman. Efficient policy analysis for administrative role based access control. In CCS’07: Conference on Computer and Communications Security. ACM, 2007.

[20] J. D. Ullman. Principles of Database and Knowledge-base Systems, Volume II: The New Technologies. Computer Science Press, New York, 1989.

[21] S. Zdancewic and A. C. Myers. Robust declassification. In CSFW’01: Computer Security Foundations Workshop, pages 5–16. IEEE, 2001.