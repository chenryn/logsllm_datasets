      app.UseStaticFiles();
      app.UseMvc();
      app.UseSwagger();
      app.UseSwaggerUi();
    }
配置Swagger后运行应用程序，可以看到服务提供的API信息。图42-3显示了
BooksService-Sample提供的API、Values服务生成的模板和BooksService示例，还可以看到
用Swagger文档配置的标题和描述。
图42-3
图42-4显示了BookChapters服务的细节。可以看到每个API的细节，包括模型，还测
试了API调用。
图42-4
42.7 创建和使用OData服务
ASP.NET Web API为OData（Open Data Protocol）提供了直接支持。OData通过HTTP
协议提供了对数据源的CRUD访问。发送GET请求会检索一组实体数据，POST请求会创
建一个新实体，PUT请求会更新已有的实体，DELETE请求会删除实体。前面介绍了映射
到控制器中动作方法的HTTP方法。OData基于JSON和AtomPub（一种XML格式）进行数
据序列化。ASP.NET Web API也有这个功能。OData提供的其他功能有：每个资源都可以
用简单的URL查询来访问。为了说明其工作方式以及ASP.NET Web API如何实现这个功
能，下面举例说明，从一个数据库开始。
对于服务应用程序BooksODataService，为了提供OData，需要添加NuGet包
Microsoft.AspNet. 
OData。要使用OData与ASP.NET 
Core 
1.0，至少需要版本6的
Microsoft.AspNet.OData包。示例服务允许查询Book和Chapter对象，以及它们之间的关
系。
42.7.1 创建数据模型
示例服务为模型定义了Book和Chapter类。Book类定义了简单的属性以及与Chapter类
型的一对多关系（代码文件BooksODataService/Models/Book.cs）：
    public class Book
    {
      public Book()
      {
        Chapters = new List();
      }
      public int BookId { get; set; }
      public string Isbn { get; set; }
      public string Title { get; set; }
      public List Chapters { get; }
    }
Chapter类定义了简单的属性以及与Book类型的多对一关系（代码文件
BooksODataService/Models/Book.cs）：
    public class Chapter
    {
      public int ChapterId { get; set; }
      public int BookId { get; set; }
      public Book Book { get; set; }
      public string Title { get; set; }
      public int Number { get; set; }
      public string Intro { get; set; }
    }
BooksContext类定义了Books和Chapters，以及SQL数据库关系（代码文件
BooksODataService/Models/BooksContext.cs）：
    public class BooksContext: DbContext
    {
      public DbSet Books { get; set; }
      public DbSet Chapters { get; set; }
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
        base.OnModelCreating(modelBuilder);
        EntityTypeBuilder bookBuilder = modelBuilder.Entity();
        bookBuilder.HasMany(b => b.Chapters)
        .WithOne(c => c.Book)
        .HasForeignKey(c => c.BookId);
        bookBuilder.Property(b => b.Title)
        .HasMaxLength(120)
        .IsRequired();
        bookBuilder.Property(b => b.Isbn)
        .HasMaxLength(20)
        .IsRequired(false);
        EntityTypeBuilder chapterBuilder = modelBuilder.Entity(
);
        chapterBuilder.Property(c => c.Title)
        .HasMaxLength(120);
      }
    }
42.7.2 创建服务
在ASP.NET Core 5中，很容易添加OData服务。不需要对控制器进行许多改变。当
然，需要把OData添加到依赖注入容器中（代码文件BooksODataService/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddMvc();
      services.AddEntityFramework()
       .AddSqlServer()
       .AddDbContext(options => options.UseSqlServer(
        Configuration["Data:BookConnection:ConnectionString"]));
      services.AddOData();
    }
BooksController类只需要应用EnableQuery特性。这会把它建立为一个OData控制器。
可以使用OData查询访问控制器。应用到BooksController类的Route特性定义了路径的odata
前缀。这只是一个约定，可以随意修改路径（代码文件
BooksODataService/Controllers/BooksController.cs）：
    [EnableQuery]
    [Route("odata/[controller]")]
    public class BooksController: Controller
    {
      private readonly BooksContext _booksContext;
      public BooksController(BooksContext booksContext)
      {
        _booksContext = booksContext;
      }
      [HttpGet]
      public IEnumerable GetBooks() =>
        _booksContext.Books.Include(b => b.Chapters).ToList();
      // GET api/values/5
      [HttpGet("{id}")]
      public Book GetBook(int id) =>
        _booksContext.Books.SingleOrDefault(b => b.BookId == id);
      // etc.
    }
除了EnableQuery特性的变化以外，控制器不需要其他特殊的动作。
42.7.3 OData查询
使用下面的URL很容易获得数据库中的所有图书（端口号可能与读者的系统不同）：
    http://localhost:50000/odata/Books
要只获取一本书，可以把该书的标识符和URL一起传递给方法。这个请求会调用
GetBook动作方法，并传递返回单一结果的键：
    http://localhost:50000/odata/Books(9)
每本书都有多个结果。在一个URL查询中，还可以获取一本书的所有章：
    http://localhost:50000/odata/Books(9)/Chapters
OData提供的查询选项多于ASP.NET Web API支持的选项。OData规范允许给服务器
传递参数，以分页、筛选和排序。下面介绍这些选项。
为了只给客户端返回数量有限的实体，客户端可以使用$top参数限制数量。也允许使
用$skip进行分页；例如，可以跳过3个结果，再提取3个结果：
    http://localhost:50000/odata/Books? $top=3&$skip=3
使用$top和$skip选项，客户端可确定要检索的实体数。如果希望限制客户端可以请求
的内容，例如一个调用不应请求上百万条记录，那么可以配置EnableQuery特性来限制这
个方面。把PageSize设置为10，一次最多返回10个实体：
    [EnableQuery(PageSize=10)]
EnableQuery特性还有一些命名参数来限制查询，例如最大的top和skip值、最大的扩
展深度以及排序的限制。
为了根据Book类的属性筛选请求，可以将$filter选项应用于Book的属性。为了筛选出
Wrox出版社出版的图书，可以使用eq操作符（等于）和$filter选项：
    http://localhost:50000/odata/Books? $filter=Publisher eq 'Wrox Press'
$filter选项还可以与lt（小于）和gt（大于）操作符一起使用。下面的请求仅返回页数
大于40的章：
    http://localhost:50000/odata/Chapters? $filter=Pages gt 40
为了请求有序的结果，$orderby选项定义了排序顺序。添加desc关键字按降序排序：
    http://localhost:50000/odata/Book(9)/Chapters? $orderby=Pages%20desc
使用HttpClient类很容易给服务发出所有这些请求。但是，还有其他选项，例如使用
WCF Data Services创建的代理。
  注意： 对于服务，还可以设置EnableQuery特性的AllowedQueryOptions，以
限制查询选项。也可以使用属性AllowedLogicalOperators和AllowedArithmeticOperators
限制逻辑和算术运算符。
42.8 小结
本章描述了ASP.NET Web API的功能，它现在是ASP.NET MVC的一部分。这种技术
允许使用HttpClient类创建服务，并在任何客户端（无论是JavaScript还是.NET客户端）调
用。返回JSON或XML。
依赖注入已经用于本书的好几章中，尤其是第31章。本章介绍了很容易把使用字典
的、基于内存的存储库替换为使用Entity Framework的存储库。
本章还介绍了OData，它使用资源标识符，很容易引用树中的数据。
下一章继续讨论Web技术，提供发布和订阅技术的信息，例如WebHooks和SignalR。
第43章
WebHooks和SignaIR
本章要点
● SignalR概述
● 创建SignalR集线器
● 用HTML和JavaScript创建SignalR客户端
● 创建SignalR .NET客户端
● 使用分组和SignalR
● WebHooks概述
● 为GitHub和Dropbox创建WebHook接收器
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● 使用SignalR的聊天服务器
● 使用SignalR的WPF聊天客户端
● SaaS WebHooks接收器示例
43.1 概述
通过.NET可以使用事件获得通知。通过事件可以注册一个事件处理方法，也称为订
阅事件。一旦另一个地方触发事件，就调用方法。事件不能用于Web应用程序。
前面的章节介绍了很多关于Web应用程序和Web服务的内容。这些应用程序和服务的
共同点是，请求总是从客户应用程序发出。客户端发出一个HTTP请求，接收响应。
如果服务器有一些消息要发布，该怎么办？我们没有可以订阅的事件。不过使用到目
前为止介绍的Web技术，这可以通过客户端轮询新信息来解决。客户端必须向服务器发出
一个请求，询问是否有新信息。根据定义的请求间隔，这样的通信会导致网络上的请求有
很高的负载，导致“没有新信息可用”或客户端错过实际的信息，请求新信息时，接收到的
信息已经旧了。
如果客户端本身就是一个Web应用程序，则通信的方向可以反转，服务器可以给客户
端发送消息。这是WebHooks的工作方式。
由于客户端在防火墙后面，服务器使用HTTP协议无法向客户端发起连接。连接总是
需要从客户端启动。因为HTTP连接是无状态的，客户端经常不能连接到除端口80以外的
端口上，所以WebSocket可以提供帮助。WebSocket通过一个HTTP请求启动，但是它们升
级到一直打开的WebSocket连接。使用WebSocket协议，一旦服务器有新信息，服务器就
可以通过打开的连接给客户端发送信息。
  注意： 在低级API调用中使用WebSocket的内容参见第25章。
SignalR是一个ASP.NET 
Web技术，在WebSocket上提供了一个简单的抽象。使用
SignalR比使用套接字接口编程更容易。另外，如果客户端不支持WebSocket 
API，则
SignalR会自动切换到一个轮询机制，无须修改程序。
  注意： 在撰写本书时，SignalR for ASP.NET Core 1.0还不可用。所以本章介
绍了使用SignalR 2、使用ASP.NET 4.6和ASP NET Web API 2的内容。SignalR 3 for
ASP.NET Core 1.0的其他示例可以访问http://www.github.com/ProfessionalCSharp，因为
SignalR 3是可用的。
WebHooks是许多SaaS（软件即服务）提供者提供的一个技术。可以注册这样一个提
供者，给服务提供者提供一个公共Web API。这样，只要有可用的新信息，服务提供者就
可以尽快回调（call back）。
本章介绍了SignalR和WebHooks。这些技术是相辅相成的，可以结合使用。
43.2 SignalR的体系结构
SignalR包含多个NuGet包（如表43-1所示），可以用于服务器和客户端。
表43-1
NuGet包
说明
Microsoft.AspNet.SignalR
这个包引用其他包，用于服务器端实现
Microsoft.AspNet.SignalR.Core
这是SignalR的核心包。这个包包含Hub类
Microsoft.AspNet.SignalR.SystemWeb
这个NuGet包包含对ASP.NET 4.x的扩展，
用来定义路由
Microsoft.AspNet.SignalR.JavaScript
这个NuGet包包含用于SignalR客户端的
JavaScript库
Microsoft.AspNet.SignalR.Client
这个NuGet包包含用于.NET客户端的类
型。HubProxy用于连接到集线器
有了SignalR，服务器会定义一个供客户端连接的集线器（参见图43-1）。集线器维
护着到每个客户端的连接。使用集线器，可以将消息发送给连接的每一个客户端。消息可
以发送到所有客户端，或选择特定的客户端或客户端组来发送消息。
图43-1
43.3 使用SignalR的简单聊天程序
第一个SignalR示例是一个聊天应用程序，使用SignalR很容易创建它。在这个应用程
序中，可以启动多个客户端，通过SignalR集线器相互通信。当一个客户应用程序发送消
息时，所有连接的客户端都会依次接收此消息。
服务器应用程序用ASP.NET 4.6编写，一个客户应用程序用HTML和JavaScript创建，
另一个客户应用程序是使用WPF用户界面的.NET应用程序。
43.3.1 创建集线器
如前所述，ASP.NET Core不支持SignalR——至少撰写本书时不支持。所以是先使用
新的ASP.NET Web Application创建集线器，选择Empty ASP.NET 4.6模板，并命名为
ChatServer。创建项目后，添加一个新项，并选择SignalR Hub Class（参见图43-2）。添加
这个条目还增加了服务器端需要的NuGet包。
图43-2
为了定义SignalR的URL，可以创建一个OWIN Startup类（使用OWIN Startup Class项
模板），给Configuration方法添加MapSignalR的调用。MapSignalR方法定义了signalR
URI，作为请求SignalR集线器的路径（代码文件ChatServer/Startup. cs）：
    using Microsoft.Owin;
    using Owin;
    [assembly: OwinStartup(typeof(ChatServer.Startup))]
    namespace ChatServer
    {
      public class Startup
      {
        public void Configuration(IAppBuilder app)
        {
            app.MapSignalR();
        }
      }
    }
SignalR的主要功能用集线器定义。集线器由客户端间接调用，接着客户端被调用。
ChatHub类派生自基类Hub，以获得所需的集线器功能。Send方法定义为由客户应用程序
调用，把消息发送到其他客户程序。可以使用任何方法名称与任意数量的参数。客户端代
码只需要匹配方法名和参数。为了给客户端发送消息，使用Hub类的Clients属性。Clients
属性返回一个IHubCallerConnectContext，它允许把消息发送给特定的客户端或
所有连接的客户端。示例代码使用All属性给所有连接的客户端调用BroadcastMessage。
All属性（Hub类是其基类）返回一个dynamic对象。这样，就可以调用任何方法名称并使
用任意数量的参数，客户端代码只需要匹配它们（代码文件ChatServer/ChatHub.cs）：
    public class ChatHub: Hub
    {
      public void Send(string name, string message)
      {
        Clients.All.BroadcastMessage(name, message);
      }
    }
  注意： dynamic类型参见第16章。
  注意： 在集线器的实现中可以不使用dynamic类型，而采用客户端调用的方
法定义自己的接口。在添加分组功能时，其步骤参见本章后面的43.4节。
43.3.2 用HTML和JavaScript创建客户端
使用SignalR 
JavaScript库，可以轻松地创建一个HTML/JavaScript客户端，来使用
SignalR集线器。客户端代码连接到SignalR集线器，调用Send方法，并添加一个处理程序
来接收BroadcastMessage方法。
对于用户界面，定义了两个简单的输入元素，允许输入名称和要发送的消息，然后定
义一个按钮来调用Send方法，最后定义一个无序列表来显示所有接收到的消息（代码文件
ChatServer/ChatWindow.html）：
    Enter your name 
    Message 
    Send
需要包含的脚本如下面的代码段所示。版本可能会与读者的实现有所不同。
jquery.signalR定义了SignalR实现的客户端功能。集线器代理用来调用SignalR服务器。对
脚本signalr/hubs的引用包含自动生成的脚本代码，这些代码创建了集线器代理，匹配集线
器代码中的自定义代码（代码文件ChatServer/ChatWindow.html）：