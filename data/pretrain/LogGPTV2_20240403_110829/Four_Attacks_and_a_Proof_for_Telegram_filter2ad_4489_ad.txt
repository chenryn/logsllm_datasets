of payloads back into plaintexts. Such a mechanism does not
need to provide any security assurances, and can be intended
for use over a communication channel that already guarantees
integrity and conﬁdentiality. We formalise it as a separate
primitive called a message encoding scheme. It can then be
composed with appropriate cryptographic primitives to build a
cryptographic channel.
A modular approach leads to deﬁning a syntax for message
encoding that is similar to that of cryptographic channels. A
message encoding scheme needs to have stateful encoding and
decoding algorithms. Auxiliary information can be used to
relay and verify information such as timestamps. One could
expect all algorithms of a message encoding scheme to be
deterministic; our deﬁnition uses randomness purely because
it is necessary when modelling Telegram.
(stI , stR) ←$ ME.Init()
(stu, 𝑝) ← ME.Encode(stu, 𝑚, aux; 𝜈)
(stu, 𝑚) ← ME.Decode(stu, 𝑝, aux)
Figure 7: Syntax of message encoding scheme ME.
Deﬁnition 4. A message encoding scheme ME speciﬁes
algorithms ME.Init, ME.Encode and ME.Decode, where
ME.Decode is deterministic. Associated to ME is a plaintext
space ME.MS ⊆ {0, 1}∗, a payload space ME.Out, a random-
ness space ME.EncRS of ME.Encode, and a payload length
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
92
function ME.pl: (N∪{0}) × ME.EncRS → N. The initialisation
algorithm ME.Init returns I’s and R’s initial states stI and stR.
The encoding algorithm ME.Encode takes stu for 𝑢 ∈ {I, R}, a
message 𝑚 ∈ ME.MS, and auxiliary information aux to return
the updated state stu and a payload 𝑝 ∈ ME.Out.7 We may
surface random coins 𝜈 ∈ ME.EncRS as an additional input
to ME.Encode; then a message 𝑚 should be encoded into a
payload of length | 𝑝| = ME.pl(|𝑚| , 𝜈). The decoding algorithm
ME.Decode takes stu, 𝑝, and auxiliary information aux to
return the updated state stu and a message 𝑚 ∈ ME.MS ∪ {⊥}.
The syntax used for the algorithms of ME is given in Fig. 7.
A message encoding scheme needs to provide correctness-
style properties and some form of non-cryptographic integrity.
We expect it to arbitrate whether payloads that are sent over
the channel can be silently replayed, reordered or omitted. In
contrast, the cryptographic (non-encoding) parts of the channel
can be expected to enforce that all received payloads were at
some point honestly produced by the opposite user.
We deﬁne integrity of a message encoding scheme ME based
on the security game in Fig. 8. The advantage of adversary F
in breaking the EINT-security of ME with respect to supp is
ME,supp,F]. The two core dif-
deﬁned as Adveint
ferences from the corresponding channel notion in Section III-C
are as follows. First, the message encoding scheme is meant
to be run within an authenticated communication channel, so
the Recv oracle now starts by checking that the queried
payload 𝑝 was returned by a prior call to the opposite user’s
Send oracle in response to some message 𝑚 and auxiliary
information aux. Second, the message encoding is not meant
to serve any cryptographic purpose, meaning the initial states
stME,I, stME,R should not contain any secret information and
are both given as inputs to adversary F .
ME,supp(F) = Pr[Geint
ME,supp,F
// u ∈ {I, R}, 𝑚 ∈ ME.MS, 𝑟 ∈ ME.EncRS
Game Geint
win ← false ; (stME,I , stME,R) ←$ ME.Init()
F Send,Recv(stME,I , stME,R) ; Return win
Send(u, 𝑚, aux, 𝑟)
(stME,u, 𝑝) ← ME.Encode(stME,u, 𝑚, aux; 𝑟)
tru ← tru (cid:107) (sent, 𝑚, 𝑝, aux) ; Return 𝑝
Recv(u, 𝑝, aux)
// u ∈ {I, R}, 𝑝 ∈ ME.Out
If (cid:154)𝑚(cid:48), aux(cid:48) : (sent, 𝑚(cid:48), 𝑝, aux(cid:48)) ∈ tru then return ⊥
(stME,u, 𝑚) ← ME.Decode(stME,u, 𝑝, aux)
𝑚∗ ← supp(u, tru, tru, 𝑝, aux)
tru ← tru (cid:107) (recv, 𝑚, 𝑝, aux) ; If 𝑚 ≠ 𝑚∗ then win ← true
Return 𝑚
Figure 8: Integrity of message encoding scheme ME with respect
to support function supp.
IV. Modelling MTProto 2.0
In this section, we describe our modelling of the MTProto
2.0 record protocol as a bidirectional channel. First, in Sec-
7For full generality, the algorithm ME.Encode could also be allowed to
return 𝑝 =⊥. However, the message encoding schemes we deﬁne in this work
can never return ⊥, so for simplicity we do not allow such output.
93
tion IV-A we give an informal description of MTProto based on
Telegram documentation and client implementations. Next, in
Section IV-B we outline attacks that motivate protocol changes
required to achieve security. We list further modelling issues
and points where we depart from Telegram documentation in
Section IV-C. We conclude with Section IV-D where we give
our formal model for a ﬁxed version of the protocol.
A. Telegram description
We studied MTProto 2.0 as described in the online docu-
mentation [24] and as implemented in the ofﬁcial desktop8
and Android9 clients. We focus on cloud chats. Figures 9 and
10 give a visual summary of the following description.
Key exchange: A Telegram client must ﬁrst establish a
symmetric 2048-bit auth_key with the server via a version of
the Difﬁe-Hellman key exchange. We defer the details of the
key exchange to the full version of this work. In practice, this
key exchange ﬁrst results in a permanent auth_key for each of
the Telegram data centres the client connects to. Thereafter, the
client runs a new key exchange on a daily basis to establish a
temporary auth_key that is used instead of the permanent one.
“Record protocol”: Messages are protected as follows.
1) API calls are expressed as functions in the TL schema [25].
2) The API requests and responses are serialised according to
the type language (TL) [26] and embedded in the msg_data
ﬁeld of a payload 𝑝, shown in Table I. The ﬁrst two 128-bit
blocks of 𝑝 have a ﬁxed structure and contain various metadata.
The maximum length of msg_data is 224 bytes.
3) The payload is encrypted using AES-256 in IGE mode.
The ciphertext 𝑐 is a part of an MTProto ciphertext
auth_key_id (cid:107) msg_key (cid:107) 𝑐, where:
auth_key_id := SHA-1 (auth_key) [96 : 160]
msg_key := SHA-256 (auth_key[704 + 𝑥 : 960 + 𝑥] (cid:107) 𝑝) [64 : 192]
𝑐 := IGE[AES-256].Enc(key (cid:107) iv, 𝑝)
The IGE[AES-256] keys and IVs are computed via:
𝐴 := SHA-256 (msg_key (cid:107) auth_key[𝑥 : 288 + 𝑥])
𝐵 := SHA-256 (auth_key[320 + 𝑥 : 608 + 𝑥] (cid:107) msg_key)
key := 𝐴[0 : 64] (cid:107) 𝐵[64 : 192] (cid:107) 𝐴[192 : 256]
iv := 𝐵[0 : 64] (cid:107) 𝐴[64 : 192] (cid:107) 𝐵[192 : 256]
In the above steps, 𝑥 = 0 for messages from the client and
𝑥 = 64 from the server. Telegram clients use the BoringSSL
implementation [27] of IGE, which has 2-block IVs.
4) MTProto ciphertexts are encapsulated in a “transport
protocol”. The MTProto documentation deﬁnes multiple such
protocols [28], but the default is the abridged format that
begins the stream with a ﬁxed value of 0xefefefef and then
wraps each MTProto ciphertext 𝑐MTP in a transport packet as:
• length (cid:107) 𝑐MTP where 1-byte length contains the 𝑐MTP length
divided by 4, if the resulting packet length is < 127, or
• 0x7f (cid:107) length (cid:107) 𝑐MTP where length is encoded in 3 bytes.
5) All the resulting packets are obfuscated by default using
AES-128 in CTR mode. The key and IV are transmitted at
8https://github.com/telegramdesktop/tdesktop/, versions 2.3.2 to 2.7.1
9https://github.com/DrKLO/Telegram/, versions 6.1.1 to 7.6.0
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
the beginning of the stream, so the obfuscation provides no
cryptographic protection and we ignore it henceforth.10
6) Communication is over TCP (port 443) or HTTP. Clients
attempt to choose the best available connection. There is support
for TLS in the client code, but it does not seem to be used.
In combination, these operations mean that MTProto 2.0 at
its core uses a “stateful Encrypt & MAC” construction. Here
the MAC tag msg_key is computed using SHA-256 with a
prepended key derived from (certain bits of) auth_key. The
key and IV for IGE mode are derived on a per-message basis
using a KDF based on SHA-256, using certain bits of auth_key
as the key-deriving key and the msg_key as a diversiﬁer. Note
that the bit ranges of auth_key used by the client and the server
to derive keys in both operations overlap with one another.
Any formal security analysis needs to take this into account.
auth_key
𝑚𝑘
auth_key
𝑘 𝑘(cid:107)𝑟0(cid:107)𝑚𝑘(cid:107)𝑟1
HASH
SHA-1
𝑘 𝑘
KDF
SHA-256
server_salt session_id msg_id msg_seq_no msg_length msg_data
padding
MAC
SHA-256
SE
IGE[AES-256]
auth_key_id
msg_key
encrypted data
Figure 9: Overview of message processing in MTProto 2.0.
32 bits
96 bits
1088 bits
𝑘 𝑘I,0 (288 bits)
𝑘 𝑘I,1 (288 bits)
𝑚𝑘I (256 bits)
auth_key = raw 𝑔𝑥𝑦 value (2048 bits)
𝑘 𝑘R,0 (288 bits)
𝑘 𝑘R,1 (288 bits)
𝑚𝑘R (256 bits)
64 bits
32 bits
96 bits
1024 bits
Figure 10: Parsing auth_key in MTProto 2.0. User u ∈ {I, R}
derives a KDF key kku = (kku,0, kku,1) and a MAC key mku.
B. Attacks against MTProto metadata validation
We describe adversarial behaviours that are permitted in
current Telegram implementations and that mostly depend on
how clients and servers validate metadata information in the
payload (especially the second 128-bit block containing msg_id,
msg_seq_no and msg_length).
1) Reordering and deletion: We consider a network attacker
that sits between the client and the Telegram servers, attempting
to manipulate the conversation transcript. By message we mean
any msg_data exchanged via MTProto, but we pay particular
attention to when it contains a chat message.
a) Reordering: By reordering we mean that an adversary can
swap messages sent by one party so that they are processed
in the wrong order by the receiving party. Preventing such
attacks is a basic property that one would expect in a secure
10This feature is meant to prevent ISP blocking. In addition to this, clients
can route their connections through a Telegram proxy. The obfuscation key
is then derived from a shared secret (e.g. from proxy password) between the
client and the proxy.
ﬁeld
server_salt
session_id
msg_id
msg_seq_no
msg_length
msg_data
padding
type
int64
description
Server-generated random num-
ber valid in a given time period.
int64 Client-generated random identi-
ﬁer of a session under the same
auth_key.
int64 Time-dependent identiﬁer of a
message within a session.
int32 Message sequence number.
int32 Length of msg_data in bytes.
bytes Actual body of the message.
bytes
12-1024B of random padding.
Table I: MTProto payload format.
messaging protocol. The MTProto documentation mentions
reordering attacks as something to protect against in secret chats
but does not discuss it for cloud chats [29]. The implementation
of cloud chats provides some protection, but not fully:
• When the client is the receiver, the order of displayed chat
messages is determined by the date and time values within
the TL message object (which are set by the server), so
adversarial reordering of packets has no effect on the order
of chat messages as seen by the client. Service messages of
MTProto typically do not have such a timestamp so reordering
is theoretically possible, though with unclear impact.
• When the client is the sender, the order of chat messages can
be manipulated because the server sets the date and time value
for the Telegram user to whom the message was addressed
based on when the server itself receives the message, and
because the server will accept a message with a lower msg_id
than that of a previous message as long as its msg_seq_no is
also lower than that of a previous message. The server does
not take the timestamp implicit within msg_id into account
except to check whether it is at most 300s in the past or 30s
in the future, so within this time interval reordering is possible.
A message outside of this time interval is not ignored, but a
request for time synchronisation is triggered, after receipt of
which the client sends the message again with a fresh msg_id.
So an attacker can also simply delay a chosen message to
cause messages to be accepted out of order. In Telegram, the
rotation of the server_salt every 30 to 60 minutes may be an
obstacle to carrying out this attack in longer time intervals.
We have veriﬁed that reordering between a sending client
and a receiving server is possible in practice using unmodiﬁed