    $ ansible --version
    1.4.4
    $ ansible-playbook ec2_security.yml -i hosts
    PLAY [127.0.0.1] **************************************************************
    GATHERING FACTS ***************************************************************
    ok: [127.0.0.1]
    TASK: [Create EC2 web group] **************************************************
    failed: [127.0.0.1] => {"failed": true, "parsed": false}
    invalid output was: Traceback (most recent call last):
      File "/Users/user/.ansible/tmp/ansible-1390492978.4-106406911676238/ec2_group", line 1313, in 
        main()
      File "/Users/user/.ansible/tmp/ansible-1390492978.4-106406911676238/ec2_group", line 192, in main
        group = ec2.create_security_group(name, description, vpc_id=vpc_id)
      File "/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/boto/ec2/connection.py", line 2948, in create_security_group
        SecurityGroup, verb='POST')
      File "/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/boto/connection.py", line 1151, in get_object
        raise self.ResponseError(response.status, response.reason, body)
    boto.exception.EC2ResponseError: EC2ResponseError: 400 Bad Request
    InvalidGroup.DuplicateThe security group 'web' already exists for VPC 'vpc-[REDACTED]'[REDACTED]
    FATAL: all hosts have already failed -- aborting
    PLAY RECAP ********************************************************************
               to retry, use: --limit @/Users/user/ec2_security.retry
    127.0.0.1                  : ok=1    changed=0    unreachable=0    failed=1
Hosts file:
    [localhost]
    127.0.0.1 ansible_python_interpreter=/usr/local/bin/python
ec2_security.yml:
    - hosts: 127.0.0.1
      connection: local
      tasks:
        - name: Create EC2 web group
          local_action:
            module: ec2_group
            name: web
            description: HTTP and SSH ports
            region: eu-west-1
            rules:
              - proto: tcp
                from_port: 80
                to_port: 80
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 22
                to_port: 22
                cidr_ip: 0.0.0.0/0