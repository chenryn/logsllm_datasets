ﬁeld do not require this trust assumption, but their security
properties are less studied compared to the RSA case. With
our protocol design, however, we show how we can leverage
RSA-based VDFs without the trusted dealer requirements. This
allows us to rely on well tested primitives, while avoiding
additional trust assumptions.
The key motivation for the VDF design we use is that the
party that sets up the VDF can always quickly compute it using
the trapdoor generated during the setup. If this party fails to do
so when required, any other party can step in and eventually
obtain the same result by evaluating the VDF without the
trapdoor. To construct a trapdoor VDF with strong uniqueness
as outlined in Section II-B, we rely on two components:
1)
2)
the VDF design by Pietrzak [39] in the RSA setting
and
the zero-knowledge proof techniques for safe primes
by Camenisch and Michaels [15], ensuring that an
adversary cannot cheat during the VDF setup and
consequently cannot break the uniqueness of the
scheme.
On a high level, Pietrzak’s VDF is based on the conjecture that
for some random input x ∈ Z∗N and RSA modulus N = p · q,
the computation of y = x2T
(mod N ) requires T sequential
squarings without knowledge of the factorization of N:
x → x2 → x22 → x23 → ... → x2T
(mod N ) ,
(1)
an idea originally described in the context of time-lock puzzles
by Rivest et al. [41]. The tuple (p, q) can be used as a trapdoor,
because the knowledge of the group order φ(N ) = (p−1)(q−
1) enables one to efﬁciently compute y:
e = 2t
(mod φ(N )),
y = xe
(mod N ) .
(2)
The construction of a trapdoor VDF from Pietrzak’s VDF
follows naturally, as the trapdoor is simply given by the primes
p and q. In fact, the setup we use is actually simpler than in the
non-trapdoor case, in which one has to assume a trusted dealer
that generates N and later deletes p and q, or, alternatively,
that N is generated without anyone knowing the factors using a
multi-party computation. In our approach, the zero-knowledge
proof techniques by Camenisch and Michaels [15] are used
instead. They ensure that the assumptions for the original secu-
rity proof of the uniqueness property of Pietrzak’s VDF ([39],
Theorem 1) are fulﬁlled, even if N is generated adversarially.
3
Furthermore, these techniques only rely on common crypto-
graphic assumptions, are quite efﬁcient [15], and can be made
non-interactive using the Fiat-Shamir heuristic [15], [26].
D. Construction
N and Y := QR+
In the following, we describe the complete construction of
a trapdoor VDF with strong uniqueness. We closely follow
the deﬁnitions by Boneh et al. [6], [7] and Pietrzak [39] to
deﬁne our VDF, mapping inputs x ∈ X to outputs y ∈ Y,
whereby X := QR+
N . Hereby, we use
N to denote the group of signed quadratic residues modulo
QR+
N (see [39], Section 2.2), and λRSA to denote a security
parameter, specifying the length of the RSA modulus in bits,
which offers at least λ bits of security4. The symbol π is
used to represent a correctness proof of the evaluation of the
VDF. It contains a list of intermediate values, which can be
used to later check the result of the computation efﬁciently.
Furthermore, let PP := {pp | VerifySetup(λ, pp) = accept}
denote the space of all public parameters. Notice that Eval,
TrapdoorEval and Verify are only deﬁned for parameters
pp ∈ PP. In our random beacon protocol, we ensure that
we only ever use VDFs with parameters pp ∈ PP by
checking all public parameters once at the start of the protocol.
The complete construction of our trapdoor VDF with strong
uniqueness is as follows:
Setup(λ) → (pp, sk)
1)
2)
3)
Sample two random safe primes p = 2p(cid:48) + 1 and
q = 2q(cid:48)+1 of size λRSA/2, where p(cid:48) and q(cid:48) are prime
and fulﬁll the following side-conditions required for
the used proof techniques [15], [28]: p, q, p(cid:48), q(cid:48) (cid:54)≡ 1
(mod 8), p (cid:54)≡ q (mod 8), p(cid:48) (cid:54)≡ q(cid:48) (mod 8).
Run the zero-knowledge protocol for proving that a
known N is the product of two safe primes ([15],
Section 5.2) and the protocol “proving the knowledge
of a discrete logarithm that lies in a given range”
([15], Section 2.2) to show that the prime factors
p and q are λRSA/2 bits each. Let πN denote the
resulting proof obtained by running both protocols
non-interactively using the Fiat-Shamir heuristic.
Return pp := (N, πN ) as the public parameters and
sk := (p, q) as the secret key (trapdoor).
VerifySetup(λ, pp) → {accept, reject}
Return accept if the validity of pp can be successfully checked
by using the veriﬁcation procedures corresponding to the proof
techniques used in step 2) of Setup as speciﬁed by Camenisch
and Michaels [15]. Return reject otherwise.
Eval (pp, x, T ) → (y, π)
Run the evaluation algorithm VDF .Sol (N, (x, T )) → (y, π)
as originally deﬁned by Pietrzak ([39], Section 6) and return
its result.
TrapdoorEval (pp, x, T, sk) → (y, π)
Derive the group order φ(N ) = (p− 1)(q − 1) from the secret
trapdoor sk := (p, q) and execute the evaluation algorithm
4Typical choices for λRSA are between 2048 and 4096 bits. See e.g.,
https://www.keylength.com/ for a comparison of different recommendations.
4
VDF .Sol (N, (x, T )) → (y, π) efﬁciently. As illustrated in
Equation 2, the result y = x2T as well as the values required
for the proof π can be computed efﬁciently by reducing large
exponents in the computations modulo φ(N ).
Verify(pp, x, T, y, π) → {accept, reject}
algorithm
Return
VDF .Ver (N, (x, T ), (y, π)) as originally deﬁned by Pietrzak
([39], Section 6).
veriﬁcation
result
the
the
of
E. Security Assumptions
We inherit the security assumptions from (i) Pietrzak’s
VDF [39] in the RSA setting as well as (ii) for the proof
techniques from Camenisch et al. [15]. Consequently, we
assume:
•
•
•
•
Factoring N is hard.
Computing x2T is sequential in (QR+
N , x), where x
is a generator5.
The existence of groups G = (cid:104)g(cid:105) of large known order
Q and a generator h, where computing discrete loga-
rithms is hard and the value of dlogg(h) is unknown.
Hash functions are modeled as Random Oracles [3].
F. Security Proof
In this section we show that our construction of a trapdoor
VDF with strong uniqueness achieves the required security
properties, i.e., -evaluation time, sequentiality without trap-
door, and strong uniqueness. Therefore, the security proof
of our trapdoor VDF construction extends the security proof
provided by Pietrzak [39] for the underlying VDF. As the prop-
erties of -evaluation time and sequentiality (without trapdoor)
are not affected by our extension to the trapdoor setting, we
focus on showing that our construction indeed achieves strong
uniqueness. We prove that this property is achieved by ﬁrst
revisiting Pietrzak’s original security statement for uniqueness,
and then show how our construction ensures all preconditions
required to apply the original proof in our setting.
Theorem 1. As given in [39]. If the input (N, x, T ) to the
protocol satisﬁes
1) N = p · q is the product of two safe primes, i.e.,
p = 2p(cid:48) + 1, q = 2q(cid:48) + 1 for primes p(cid:48), q(cid:48).
(cid:104)x(cid:105) = QR+
N .6
2λ ≤ min{p(cid:48), q(cid:48)}.
2)
3)
Then for any malicious prover ˜P who sends as ﬁrst message
y anything else than the solution to the RSW time-lock puzzle,
i.e., y (cid:54)= x2T [a veriﬁer] V will ﬁnally output accept with
probability at most 3log(T )
.
2λ
The security proof of the above statement ([39], Section 4)
shows that Pietrzak’s VDF achieves uniqueness. For unique-
ness to hold in the original model, only the case in which
5As Pietrzak ([39], Section 2.2) shows, this assumption is essentially equal
N , ·).
N , the [signed] quadratic residues modulo N.
N| = |QRN| = p(cid:48)q(cid:48), so (cid:104)x(cid:105) :=
to the sequentiality assumption of the RSA time-lock puzzle [41] in (Z∗
For our choice of N we have |QR+
{x, x2, ..., xp(cid:48)q(cid:48)} = QR+
6That is, x generates QR+
N . [39]
the public parameters pp (i.e., N in this setting) are generated
by Setup have to be considered. In this case, N and p(cid:48), q(cid:48)
satisfy conditions 1) by construction and 3) for all reasonable
choices of λRSA as λRSA (cid:29) λ. Condition 2) is met because
almost every x ∈ QR+
N . A trivial exception
is 1, which can easily be checked for, and some hard to ﬁnd7
elements of order p(cid:48) or q(cid:48).
N generates QR+
For strong uniqueness, however, the uniqueness property
needs to hold for all public parameters pp ∈ PP. Conse-
quently, we need to show that conditions 1), 2) and 3) still
hold, in particular without restricting pp to be generated by
Setup.
Lemma 1. For all public parameters pp ∈ PP and random
inputs x ∈ QR+
N the protocol described in Section II-D ensures
that conditions 1), 2) and 3) as required by Theorem 1 are
satisﬁed.
Proof: Recall that PP := {pp | V erif ySetup(λ, pp) =
accept}. Since VerifySetup only accepts pp after running the
veriﬁcation technique from Camenisch et al. [15], which shows
that (i) N is the product of two safe primes and (ii) p and q
are of size λRSA/2 conditions 1) and 3) are satisﬁed. Since
N = p · q is the product of two safe primes p = 2p(cid:48) + 1,
q = 2q(cid:48) + 1, the group QR+
N of size p(cid:48)q(cid:48) contains only 1 +
(p(cid:48) − 1) + (q(cid:48) − 1) elements which do not generate QR+
N .
Consequently, the probability of picking such a small order
−1)
element at random, i.e., 1+(p
, is negligible and thus
satisﬁes condition 2) for random inputs.
−1)+(q
p(cid:48)q(cid:48)
(cid:48)
(cid:48)
Regarding condition 2), we note that for the application
within our randomness beacon we only use random inputs,
therefore the probability of randomly generating a problematic
value is negligible in this case. However, for applications in
which the adversary can freely select a particular value x, it
can be a problem to ensure that condition 2) indeed holds in
all cases. An efﬁcient procedure to check this property in this
setting was stated as an open problem in Pietrzak’s work [39].
With the following formula, we provide an efﬁcient way to
verify if x is indeed a generator of QR+
N , thereby describing
a method to check if condition 2) holds for all inputs instead
of requiring random inputs:
(cid:104)x(cid:105) = QR+
N if x ∈ QR+
N ∧ gcd(x2 − 1, N ) = 1 .
(3)
A short proof of the above statement is presented in Ap-
pendix A. Note that membership in QR+
N is also efﬁciently
decidable by computing the Jacobi symbol of x modulo N
(see Section 2.1 in [39]).
III. CONCEPTUAL DESIGN
RandRunner is a distributed randomness beacon which
relies on trapdoor VDFs with strong uniqueness, previously
introduced in Section II, as the key cryptographic building
block. These VDFs are set up prior to the start of the protocol.
In particular, each party running the protocol is responsible for
the initialization of its individual VDF. It keeps the trapdoor
generated during setup secret, while making the veriﬁcation
7The probability of ﬁnding such elements, without knowing the factors of
N, is negligible since there are only p(cid:48) − 1 or q(cid:48) − 1 elements of order p(cid:48) or
q(cid:48) respectively, whereas QR+
N contains p(cid:48)q(cid:48) elements.
5
Fig. 1: Schematic execution of RandRunner with three nodes
n1, n2 and n3, over a period of seven rounds r1, ..., r7
parameters and the cryptographic proof of the setup’s correct-
ness publicly available.
Following this initial protocol setup, the main protocol
execution can start. The execution of the protocol proceeds
in consecutive rounds. At
the end of each round a fresh
random beacon output is produced. In the common case, the
protocol is driven one step/round forward, as a dedicated party
– a leader which changes every round – uses its trapdoor
to evaluate its VDF based on the previous random beacon
output. The leader initiates a broadcast of the result together
with a short correctness proof which enables all parties to
verify and complete the current round. In case of an attack, a
malicious or failed leader, or network issues, the protocol can
still advance, as all parties are able to evaluate the VDF of the
current round without the trapdoor. This is further illustrated
in Figure 1, showing a protocol execution with three nodes.
In this example, the sequence of leaders (n1, n2, n3, n1, . . . )
is derived in a round-robin fashion. In the rounds r1 and r2,
the respective leaders evaluate the VDFs and send the results
to all parties – the protocol progresses quickly. In the third
round r3, the leader n3 fails to forward the result to the other
parties. Therefore, nodes n1 and n2 are slowed down as they
are required to evaluate this round’s VDF without the trapdoor.
In the meantime, node n3 already starts computing the result
of the following rounds, but the other nodes catch up, because
in round r4 and r5 node n3 has to compute the VDFs without
the trapdoors.
In any case, the strong uniqueness property of the used
VDF ensures that the result obtained via the trapdoor and
by evaluation are equal. As the unique output of one VDF
serves as the input of the next VDF, the entire sequence of
random beacon values generated through these chained VDFs
is deterministic and predetermined after the initial protocol
setup. By relying solely on the computation of the (chained)
unique VDF outputs, either with or without the trapdoor, as
random beacon values, agreement on the sequence of these
values by all participants is trivially achieved. Therefore, our