title:Nibbler: debloating binary shared libraries
author:Ioannis Agadakos and
Di Jin and
David Williams-King and
Vasileios P. Kemerlis and
Georgios Portokalidis
Nibbler: Debloating Binary Shared Libraries
Ioannis Agadakos∗
PI:EMAIL
SRI International
Di Jin
PI:EMAIL
Brown University
David Williams-King
PI:EMAIL
Columbia University
Vasileios P. Kemerlis
PI:EMAIL
Brown University
Georgios Portokalidis
PI:EMAIL
Stevens Institute of Technology
ABSTRACT
Developers today have access to an arsenal of toolkits and libraries
for rapid application prototyping. However, when an application
loads a library, the entirety of that library’s code is mapped into
the address space, even if only a single function is actually needed.
The unused portion is bloat that can negatively impact software
defenses by unnecessarily inflating their overhead or increasing
their attack surface. Recent work has explored debloating as a way
of alleviating the above problems, when source code is available.
In this paper, we investigate whether debloating is possible and
practical at the binary level. To this end, we present Nibbler: a
system that identifies and erases unused functions within shared
libraries. Nibbler works in tandem with defenses like continuous
code re-randomization and control-flow integrity, enhancing them
without incurring additional run-time overhead. We developed and
tested a prototype of Nibbler on x86-64 Linux; Nibbler reduces the
size of shared libraries and the number of available functions, for
real-world binaries and the SPEC CINT2006 suite, by up to 56%
and 82%, respectively. We also demonstrate that Nibbler benefits
defenses by showing that: (i) it improves the deployability of a
continuous re-randomization system for binaries, namely Shuffler,
by increasing its efficiency by 20%, and (ii) it improves certain fast,
but coarse and context-insensitive control-flow integrity schemes
by reducing the number of gadgets reachable through returns and
indirect calls by 75% and 49% on average.
CCS CONCEPTS
• Security and privacy → Systems security; Software and ap-
plication security; Software security engineering; Software reverse
engineering; Information flow control.
KEYWORDS
Code debloating, Static binary analysis, Software security
∗Work done while at Stevens Institute of Technology.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359823
ACM Reference Format:
Ioannis Agadakos, Di Jin, David Williams-King, Vasileios P. Kemerlis, and Ge-
orgios Portokalidis. 2019. Nibbler: Debloating Binary Shared Libraries. In
2019 Annual Computer Security Applications Conference (ACSAC ’19), De-
cember 9–13, 2019, San Juan, PR, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3359789.3359823
1 INTRODUCTION
Software developers rely heavily on shared libraries for rapid app-
lication prototyping and development. However, as they are utilized
by more and more diverse applications, they grow in complexity and
size, accumulating an abundance of new features, while retaining
old, potentially unused ones. When an application loads a shared
library, all of this functionality is included in all of the application’s
processes, even if only a single function is actually used.
This bloat of code affects binary programs and libraries, which
frequently suffer from critical vulnerabilities [18] that enable attack-
ers to compromise them despite broadly-deployed defenses, such
as data execution prevention (DEP) [4] and address-space layout
randomization (ASLR) [52]. Code bloat impedes the adoption of
novel defenses, like continuous code re-randomization [6, 14, 74, 76]
(e.g., because of increased run-time overhead), while it can also re-
strict the effectiveness of others, like control-flow integrity (CFI) [1]
(i.e., because of over-permissiveness).
Recent work [53] has explored debloating for applications and
libraries by proposing an LLVM-based framework that analyzes
code at compile time and embeds function-dependency metadata
in the emitted binaries. That information is used by a modified
loader to debloat libraries, dynamically-loaded by the application,
by overwriting unused shared-library code. Its results confirmed
that a large part of library code is indeed not needed by applications,
and, therefore, it is possible to debloat them without restricting
their functionality. The question this paper aims to answer is: is it
possible to debloat binary-only software, to what extent, and what
are the security benefits? Binary-only, dynamically-linked or shared
libraries can still be found in many settings: commercial software
is usually distributed without source code, and even open-source
software may depend on legacy binary-only, shared libraries.
To answer this question, we design and implement Nibbler: a sys-
tem that analyzes binary applications and the libraries they depend
on to identify and erase unused library code. Nibbler generates thin
versions of shared libraries, which can be used instead of the orig-
inal, bloated ones with any of the analyzed applications. Nibbler
focuses on shared libraries as they have a series of advantages over
static libraries in real-world deployments: (i) application binaries
are smaller, (ii) the code of shared libraries is efficiently shared by
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
I. Agadakos, D. Jin, D. Williams-King, V. P. Kemerlis, and G. Portokalidis
applications, so it is not duplicated in physical memory, (iii) shared
libraries can be developed in different programming languages than
C/C++ (e.g., Go), (iv) they facilitate maintainability (e.g., updating
and patching), (v) their load-time addresses can be individually
randomized by ASLR, and (vi) shared libraries with (L)GPL license
can be used by applications without distribution complications.
to determine the effect of debloated code on certain CFI tech-
niques [42, 68, 81, 82], including real-world CFI solutions, like
Microsoft’s Control-Flow Guard [42] and LLVM’s CFI enforce-
ment [68]. For coarse, context-insensitive techniques [81, 82], we
found that the number of gadgets that can be targeted by function
returns is reduced by 75% on average. The number that can be
targeted by indirect function calls is reduced by 49% on average,
because our analysis detects and removes unused address-taken
functions. While the number of gadgets remaining in the applica-
tion is still significant, the analysis performed by Nibbler clearly
improves the effectiveness of some CFI defenses. Finally, we look
at whether debloating can reduce attack surface by removing vul-
nerabilities. Unlike what is suggested by previous work [53], we
argue that this type of debloating cannot reduce attack surface, as,
by design, it only removes code that is never used by applications.
Below, we summarize the contributions of this paper:
• We design and develop a practical system, Nibbler, which
removes bloat from binary shared libraries without requiring
source code and recompilation.
• We devise a novel method for detecting unused address-
taken functions, which allows Nibbler to detect and elimi-
nate, safely, more unused code.
• We evaluate the debloating capabilities of Nibbler with real-
world binaries and the SPEC CINT2006 suite, and show that
it removes 33%–56% of code from libraries, and 59%–82% of
the functions in scope.
• We demonstrate the benefit of debloating to security tech-
niques, like continuous code re-randomization, by integrat-
ing Nibbler with an existing system [76], where we observe
a 20% run-time improvement for Nginx.
• We demonstrate the benefits to coarse-grained CFI [42, 81,
82] by analyzing the evaluated applications to find that, on
average, Nibbler removes 75% of the available gadgets.
• We discuss the limitations of this type of debloating, which
only eliminates unused code, in terms of attack surface re-
duction and vulnerability removal.
The rest of this paper is organized as follows. Sec. 2 provides
background information and motivates our work by discussing
how Nibbler improves existing defenses. We present the design of
Nibbler and our methodology for thinning shared libraries in Sec. 3.
In Sec. 4, we briefly discuss how we implemented Nibbler and some
challenges we had to overcome. Sec. 5 presents the results from
evaluating Nibbler, Sec. 6 discusses limitations of debloating, in
general, and Sec. 7 summarizes related work. We conclude in Sec. 8.
2 BACKGROUND AND MOTIVATION
2.1 Software Exploitation Techniques
Attacks against software written in C and C++ are currently employ-
ing multiple vulnerabilities to overcome defenses like ASLR [52]
and DEP [4]. They first reveal the layout of the targeted applica-
tion, either by exploiting information leakage vulnerabilities [63]
or using other guessing techniques [64] to bypass ASLR. Then,
they exploit memory-safety bugs (e.g., use-after-free) to take con-
trol of a code pointer, hijack control flow, and, ultimately, perform
code-reuse to achieve arbitrary code execution, despite DEP.
Previous attempts to debloat binaries [46] used bounded ad-
dress tracking [34] to statically determine the set of used functions,
which was prone to errors, requiring the manual whitelisting of
certain functions to avoid program crashes. In antithesis, Nibbler
over-approximates the function-call graph (FCG) of applications
to conservatively include all code that could potentially be used
(assuming no manual library loading occurs). So, even though Nib-
bler also predominantly relies on static analysis, it does not lead to
application crashes nor require maintaining a whitelist.
As binary analysis is an undecidable problem in general [75], we
focus on non-obfuscated compiler-generated code, and leverage
symbol and relocation information—produced during compilation—
to correctly disassemble binaries. We expect that software vendors
will be willing to provide (anonymized) symbols and relocations
for their libraries to facilitate debloating and retrofitting defenses.
For instance, relocation information is already included in many
modern libraries to support ASLR, and various operating system
vendors offer symbol files [19, 43] for their most popular libraries. If
such information is not available, disassembly may still be possible
using advanced reverse-engineering tools [28, 48, 62, 70, 73].
With Nibbler, we overcome various challenges pertaining to FCG
reconstruction of binaries. For example, certain compiler optimiza-
tions make transitions between functions implicit. The treatment of
function pointers is another challenge, as failure to detect the usage
of one could lead to incorrectly excluding used code. We propose a
novel analysis for detecting address-taken (AT) functions (i.e., func-
tions that have their address referenced as a constant) [53], which
are not unused and iteratively eliminate them, while we include
all others. Finally, a challenge of more technical nature is precisely
mapping the policies applied by the system loader when resolving
symbols, which includes things like special symbols resolved based
on the actual configuration of the system (e.g., the CPU model). We
found that this intricacy is not addressed in earlier studies [46, 53].
We developed a prototype of Nibbler for x86-64 Linux and tested
it with real-world applications, including the GNU Coreutils, the Ng-
inx web server, the MySQL database server, and the SPEC CINT2006
benchmark suite. Our evaluation shows that Nibbler reduces library
code size and functions in scope, including the notoriously hard
to analyze GNU libc (glibc), by up to 56% and 82%, respectively.
While Nibbler does not focus on applications that manually load
libraries with dlopen(), we also developed a profiling tool for col-
lecting symbols loaded by applications at run time, similarly to
training approaches employed by earlier studies [53]. We evalu-
ate Nibbler with run-time profiling using the Chromium browser,
which extensively loads libraries at run time. On average, we reduce
code size and functions in scope by 25.98% and 34.95%, respectively.
We evaluate the security benefits of debloated code, by running
the Nginx web server with thinned libraries under Shuffler [76],
a continuous re-randomization system for binaries. We observe
a throughput improvement of 20%, which increases the deploya-
bility of the defense. We also developed an analysis framework
Nibbler: Debloating Binary Shared Libraries
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Such attacks employ techniques like ROP [60] and return-to-libc
(ret2libc) [20]. The first reuses entire functions, while the latter
chains arbitrary pieces of code terminating in indirect control-
flow instructions, called gadgets. Other techniques, inspired by
the above, include JOP [13], COP [25], COOP [58], CFB [11], and
Control Jujutsu [22]. Code bloat is a boon for attackers, as more code
implies more potential gadgets to pick from, making development
of payloads easier and faster, and facilitating automation [12].
2.2 Continuous Code Re-randomization
Continuous code re-randomization techniques [6, 14, 24, 74, 76]
mitigate exploits by continuously moving code at run time with
high frequency. This introduces a real-time deadline for attackers,
who only have milliseconds between exposing the layout of the
process and mounting a code-reuse attack. Essentially, they aim
to invalidate the leaked information before they can be used by
exploits. A high re-randomization frequency can be pivotal against
browser exploits [63] that utilize malicious JavaScript (JS) to execute
the whole locally, using the leaked information almost immediately.
Run-time overhead is also crucial, as lightweight defenses are a lot
more likely to be adopted than heavyweight ones. By removing
unneeded code, there is less code that needs to be shuffled at run
time, so we can improve continuous re-randomization solutions
both in terms of frequency and overhead.
2.3 Control-flow Integrity Defenses
CFI is a technique proposed by Abadi et al. [1], which aims to en-
force the control flow of the original program, forbidding arbitrary
transitions. It aims to prevent the control-flow hijacking part of at-
tacks, after code pointers are taken over. There have been multiple
instantiations of CFI [50, 51, 71, 81, 82] with different granularity,
overhead, and requirements.
Applying CFI on binaries and achieving low overhead has been
particularly problematic. The most deployable solutions enforce a
coarse version of CFI [50, 81, 82], without employing context in their
enforcement of the control-flow graph (CFG). These defenses only
allow functions to return to code segments that follow a function
invocation (i.e., CALL-preceded gadgets) and indirect function calls
to address-taken and library-exported functions (which can be
called through a pointer). Nibbler enhances these CFI techniques
in two ways by removing unnecessary code: (i) there are less CALL-
preceded gadgets for returns to target, and (ii) there are less AT
functions that can be targeted by indirect calls.
3 DESIGN
Nibbler is designed primarily for the (Linux) ELF file format [69].
We believe our techniques are applicable to other settings, such
as Microsoft Windows and the PE file format [77], but leave this
for future work. We focus on the x86-64 architecture, but Nibbler’s
requirements (disassembly, library symbols, etc.) are also available
on other contemporary architectures, such as x86 and ARM.
3.1 Overview
Figure 1 depicts a high-level overview of Nibbler. Given a set of
binary applications, Nibbler processes the shared libraries they use,
disassembles them, and statically analyzes them to reconstruct the
Figure 1: Approach overview.
FCG of each library. Then, the functions required by applications
and the already-extracted library FCGs are composed to determine
functions that are never called (i.e., unreachable code), by any of the
applications of the set. At this point, Nibbler considers all functions
that may be called through a function pointer as used.
The analysis over-approximates the set of functions that could
(potentially) be used to eliminate the possibility of error, assum-
ing no manually-loaded libraries. We then perform an iterative
analysis that detects functions pointers that can never be used and
also remove them. Finally, Nibbler produces a set of new (thinned)
libraries that can be used with the input binaries, where the extra
code has been erased by overwriting it with a trapping instruc-
tion [17]. Each library only needs to be analyzed once and the
results of the analysis are cached in a database.
3.2 Disassembly
Obtaining the complete disassembly of an arbitrary binary pro-
gram is an undecidable problem [75]. However, modern compiler-
generated binaries can be linearly disassembled (verified on GCC
and Clang [5]), especially since we use symbol information to accu-
rately identify function boundaries. For functions that are exported
by libraries, we also record the following additional metadata: (i)
the type of the function’s symbol (FUNC or IFUNC), (ii) its binding,
which dictates its scope (GLOBAL or WEAK for externally-visible sym-
bols), and (iii) its version (e.g., memcpy@@GLIBC_2.14). Note that
this information is always available in shared libraries for exported
symbols, by definition.
GNU IFUNC-type symbols. These allow for the run-time selec-
tion of a target, decided by a gateway function commonly referred
to as a resolver function. Typically, this mechanism is used to se-
lect between different function implementations that use processor
features such as SSE, AVX, etc which are more efficient but not al-
ways available. IFUNC symbols point to resolver functions which
themselves contain references to multiple targets. To avoid special-
izing an application to a specific environment, Nibbler preserves
all possible IFUNC targets if the IFUNC symbol is called.
LibrariesApplication(s)Thinned LibrariesNibblerSymbolsRelocationsErased codeAT FunctionPrunningFunctionErasure FCGReconstructionDisassemblyFCGs CompositionUnreachableCodeDetectionACSAC ’19, December 9–13, 2019, San Juan, PR, USA
I. Agadakos, D. Jin, D. Williams-King, V. P. Kemerlis, and G. Portokalidis
3.3.3 Calls using Pointers. These function invocations are per-
formed using a pointer, which can be dynamically computed at run
time. In binary form, they correspond to CALL or JMP instructions
(with register or memory as an operand).
Unfortunately, statically resolving the set of potential targets of
such calls is a hard problem [34]. Instead of attempting to do so and
risk introducing errors, like CodeFreeze [46], Nibbler is designed
to identify all the functions that could be potentially called through
a pointer, and assumes that any of them may indeed be invoked.
We compute the set of indirectly-invoked functions by analyzing
the disassembly and relocation information to identify where the
address of a function is taken, and a pointer is generated. A func-
tion used as a callback, for example, will have its address taken at
least once which will add the function to the list of (all) indirect
targets. This over-approximation circumvents the limitations of
static analysis to accurately track pointers in memory. Note that
in Sec. 3.5 we present a method for further trimming the set of
indirectly-invoked functions, thereby producing more tight FCGs.