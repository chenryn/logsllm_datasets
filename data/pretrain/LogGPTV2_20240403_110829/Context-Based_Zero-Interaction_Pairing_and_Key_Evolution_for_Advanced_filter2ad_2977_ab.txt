In both scenarios we assume that the user’s own devices
d1 and d2 consistently spend most of the time in the same
contexts. In the IoT scenario, the context is spatially static,
e.g., the user’s home, since typically IoT devices are house-
hold appliances (smart TVs, smart thermostats, etc.) that
are relatively static objects. Wearable devices like a smart
watch, on the other hand, are continuously carried by the
user and are therefore sharing the same, although changing
context during the day as the user moves around.
2.2 Objectives
Our main objectives are as follows.
Authenticated pairing. User devices (IoT devices and
wearables) securely establish authenticated pairings with the
correct peer devices, i.e., a user’s device d1 accepts a pairing
with d2 after a gestation period if, and only if, d1 and d2 are
owned by the same user and thus are co-present for longer
periods of time. Authenticated pairings are not established
with wrong peers A, including attacker devices playing man-
in-the middle and impersonation attacks against the correct
peers.
Zero-interaction. The pairing must happen without user
interaction, i.e., based solely on information that the in-
volved devices can communicate and sense from their ambi-
ent context without human involvement.
2.3 Solution Approach
Previous approaches for context-based pairing presented
in literature use context information to establish a one-shot
secure pairing [20, 16]. The security of these approaches de-
pends on the assumption that the adversary is not present
suﬃciently close in the context of the user devices d1 and d2
when the pairing is performed and thus unable to observe the
same contextual parameters as d1 and d2. These approaches
rely, however, on the user to visually determine that no ad-
versary A is present in the proximity of the devices d1 and d2
before the pairing is initiated. In a zero-interaction setting,
this is not possible. For example, in a situation in which
wearable devices are taken into use at a moment when sev-
eral parties are present in the same room, an adversary A
might very well be present.
Therefore, we follow a more in-depth defense strategy by
utilizing a key evolution approach described in Sect. 3. In
our approach, the target device d1 is initially entitled to es-
tablish pairings with all other devices in proximity, including
correct and wrong peers. These pairings are, however, as-
signed an authenticity rating that is initially zero, meaning
that the authenticity of the counterpart has not been veri-
ﬁed. Key evolution is then used to gradually increment the
authenticity rating of correct peers, so that over time only
pairings with correct peers will be accepted as genuine.
In earlier approaches, context ﬁngerprints used for one-
shot pairing must have suﬃcient entropy (e.g. 128 bits).
Obtaining a suﬃcient amount of entropy from a short con-
text snapshot requires therefore tight time synchronization
between the devices d1 and d2 to be paired [16]. On com-
modity devices achieving suﬃciently accurate synchroniza-
tion might not be technically feasible. To overcome this
limitation, we utilize a more robust ﬁngerprinting approach
that operates on longitudinal context measurements and is
thus not as sensitive to time synchronization issues. The
ﬁngerprinting scheme used is described in Sect. 4.
3. CONTEXT-BASED KEY EVOLUTION
Our key evolution approach is based on the assumption
that two devices that have established an initial pairing can
utilize the common information about their ambient context
observed over time to iteratively evolve their pairing key.
With each successful iteration, the belief in the authenticity
of the counterpart is increased, since the protocol is designed
in a way that makes it hard for devices not continuously
sharing the same context to execute it successfully.
In the approach, both peers extract context ﬁngerprints
from their surroundings by continuously monitoring their
context. If the peers spend prolonged periods of time in the
same context, observing the same contextual information,
the ﬁngerprints they extract will be similar as well. We will
deﬁne the extraction of ﬁngerprints in section 4.
The key evolution approach utilizes three conceptual com-
ponents: key evolution, key conﬁrmation, and, key accep-
tance. Key evolution and key conﬁrmation are executed it-
eratively between the peer devices in what we call a key
evolution step: evolving the pairing key and verifying the
success or failure of each key evolution. After a suﬃcient
number of key evolution steps have been performed, key ac-
ceptance is used to ultimately determine, whether a pairing
counterpart is a correct or wrong peer.
To perform a key evolution based on context ﬁngerprints,
we require a fuzzy commitment scheme that is ideal w.r.t.
the hiding property. Such a scheme is able to transform a
secret value s into a commitment / opening value pair (δ, λ),
such that δ does not reveal any information about the secret
s, and all pairs (δ, ˆλ) will reveal s if the Hamming distance
Ham(λ, ˆλ) ≤ t, but it is not feasible to ﬁnd an opening value
λ(cid:48), for which Ham(λ, λ(cid:48)) > t, such that (δ, λ(cid:48)) would reveal
the secret s. In this scheme, the value t is a parameter and
denotes the maximum Hamming distance that the scheme
allows for an opening value ˆλ to have from λ, so that the
secret s is revealed. In other words, if party d1 commits to
a secret s to obtain a commitment / opening pair (δ, λ) ←
Commit(s), and a subsequent opening of the commitment by
party d2 yields ˆs ← Open(δ, ˆλ), then s = ˆs iﬀ Ham(λ, ˆλ) ≤ t.
We could utilize any key agreement scheme that provides
such a fuzzy commitment (e.g., [3]), but for the purpose of
this paper, we adopt and adapt the approach of Sch¨urmann
and Sigg in [16].
It is based on the fuzzy vault construc-
tion of Juels and Sudan [9]. It utilizes the error-correcting
properties of Reed-Solomon codes [15] to enable two peers to
agree on a common key, if the context ﬁngerprints that peers
extracted from information in their ambient context diﬀer
in at most t bits. The value of t depends on the parameter-
ization of the Reed-Solomon code and can thus be selected
freely based on the number of bit errors to be expected be-
tween the ﬁngerprints of legitimate peers. The details of the
key evolution approach are shown in Fig. 3.
3.1 Key Evolution
Initially, two devices d1 and d2 look for other devices to
pair with. When they encounter each other for the ﬁrst time,
they establish an initial pairing key K 0
d1,d2 (e.g., by using a
Diﬃe-Hellman key exchange). This initial key agreement
is unauthenticated, i.e., neither device knows, whether the
pairing counterpart belongs to the same owner or not. Our
goal is to use subsequent key evolution to determine whether
the pairing counterpart belongs to the same user or not.
Device d1 initiates the protocol by sending a key evolu-
tion request EVO_REQ to device d2. The request contains
timestamps t1 and t2, specifying the starting and ending
times on which to synchronize the generation of the context
ﬁngerprints. From the context observations Cd1 (t1, t2) and
Cd2 (t1, t2) falling between the speciﬁed timestamps, both
= φ(Cd1 (t1, t2)) and
peers extract context ﬁngerprints FCd1
= φ(Cd2 (t1, t2)), respectively, by applying a ﬁngerprint
FCd2
extraction function φ(·) on the collected context sequences.
The extraction function is deﬁned in Def. 3 in Sect. 4.
After generating the ﬁngerprints, device d1 selects a ran-
dom key evolution diversiﬁer Kr ∈ Fm
2k , and uses the fuzzy
commitment scheme to transform it into a commitment /
opening value pair (δ, λ) ← Commit(Kr). The opening value
λ ∈ Fn
2k is calculated as the codeword for Kr using Reed-
Solomon (RS) encoding: λ ← RS(2k, m, n, Kr). The com-
mitment value δ is then calculated as the diﬀerence of the
(cid:9) λ, where
ﬁngerprint FCd1
(cid:9) denotes subtraction in the ﬁeld Fn
2k .
and the codeword λ: δ = FCd1
Device d1 then transmits the commitment value δ to de-
vice d2, which in turn obtains an opening value ˆλ and re-
trieves the key evolution diversiﬁer by opening the commit-
(cid:48) ← Open(δ, ˆλ). It does so by decoding the
ment of d1 : Kr
opening value using the Reed-Solomon decoding function.
Given that the fuzzy commitment scheme fulﬁls the hiding
(cid:48) only if Ham(λ, ˆλ) ≤ t. Since
property requirement, Kr = Kr
(cid:9) λ, it
ˆλ is calculated as ˆλ = FCd2
means that the ﬁngerprints FCd1
can diﬀer in at
most t bits, which in this case is the maximum number of
bits the RS coding can correct. Otherwise, d2 will not be
able to open the commitment correctly, and the retrieved
key derivation keys will not be identical, i.e., Kr (cid:54)= Kr
3.2 Key Conﬁrmation
(cid:9) δ, and δ as δ = FCd1
and FCd2
(cid:48).
To determine whether the key evolution was successful,
both devices calculate candidate pairing keys by using a key
derivation function KDF applied on the old pairing key K i
d1,d2
Device d1
K i
d1,d2
Device d2
EVO_REQ(cid:107)(t1, t2)
= φ(Cd1 (t1, t2))
FCd1
random Kr ∈ Fm
2k
encode: λ ∈ Fn
2k ← RS(2k, m, n, Kr)
FCd2
= φ(Cd2 (t1, t2))
δ = FCd1
(cid:9) λ
δ
decode: Kr
(cid:9) δ
ˆλ = FCd2
(cid:48) ← RS(2k, m, n, ˆλ)
K + = KDF(K i
d1,d2 , Kr)
K +(cid:48)
= KDF(K i
d1,d2 , Kr
(cid:48))
Symmetric-key authentication protocol
K i+1
d1,d2
= K +
if result == success
K i+1
d1,d2
= K +(cid:48)
device d . The chain identiﬁer is a hash value of the key K 0
d
derived during the initial unauthenticated pairing with d ,
and X is the identity that d claims to represent. We de-
note the set of all devices d claiming identity X with DX .
We evolve the pairing key K i
d independently for each de-
vice’s key chain and keep track of the number of successful
key evolution steps associated with each key chain identiﬁer
ID X
d as well as the total number of successful key evolution
steps for the claimed identity X . The ratio of successful key
evolution steps for each key chain identiﬁer ID X
d to the to-
tal number of successful key evolution steps for the related
identity X becomes therefore a measure for the authenticity
of the device associated with that key chain identiﬁer.
Definition 1
(Authenticity rating α). Let γ(ID X
d )
denote the number of successful key evolution steps that a de-
vice has performed with a peer device d with key chain iden-
tiﬁer ID X
d under the claimed identity X . The authenticity
rating α(ID X
d ) is the ratio of successful key evolution steps
for the key chain ID X
d to the overall number of successful
key evolution steps for identity X :
Figure 3: The Key Evolution Protocol
α(ID X
d ) =
(cid:80)
γ(ID X
d )
γ(ID X
di )
di∈DX
.
(1)
(cid:48), respec-
and the key evolution diversiﬁer, i.e., Kr or Kr
tively. The peers then execute a symmetric-key authentica-
tion protocol with the candidate keys to determine, whether
they are identical. The used protocol needs to be toler-
ant to oﬄine guessing attacks. For example, a password-
authenticated key-exchange scheme [22] can be used (al-
though they are intended for long-lived short shared secrets).
If the protocol succeeds, the key evolution step is consid-
ered successfully completed and the peers start using the
candidate keys as their new pairing keys, i.e., device d1 sets
K i+1
d1,d2
= K + and device d2 sets K i+1
d1,d2
= K +(cid:48)
.
3.3 Key Acceptance
To ultimately determine whether a pairing counterpart is
a correct or a wrong peer, we apply the following strategy:
assuming that a wrong peer A is spatially or temporally lim-
ited in its ability to continuously monitor the context of a
target device d1, it is likely that A will fail in key evolution
much more often than a correct peer d2, who is predomi-
nantly co-present in d1’s context. By keeping track of the
number of successful key evolutions each pairing counterpart
is able to follow, it becomes therefore possible to distinguish
the correct peer d2 from wrong peer A.
We need to take into account that wrong peers may ap-
pear at any point in the pairing and key evolution process. A
wrong peer A may initiate the pairing ﬁrst and impersonate
a correct peer d2 which will come into communication range
only later, or, A may appear after an initial pairing with the
correct peer d2 has already been established, and may claim
to be d2. Since we assume that there is no prior security asso-
ciation between any of the devices, we can’t distinguish with
certainty whether the former or the latter device requesting
the pairing is the correct personal device d2. Therefore, we
need to initially accept all pairing requests for a particular
device identity and use the key evolution protocol to verify,
which device actually is the authentic one.
To be able to distinguish diﬀerent devices from each other,
d ) for each
we assign a key chain identiﬁer ID X
d = Hash(K 0
The key evolution is performed during predetermined key
evolution cycles. During each key evolution cycle, device d1
will try to perform key evolution for an identity X with each
device d ∈ DX claiming to represent that identity. If these
attempts succeed, the count of successful key evolution steps
for identity X is incremented. Our key evolution approach
is designed in a way that only devices d that are in the
same context as the target device d1 for the majority of the
time during a key evolution cycle will succeed in the key
evolution step. Thus, since correct peers are signiﬁcantly
more often in the same context than wrong peers, the value
γ(ID X
d ) for any correct peers d will, over time, grow larger
than for any wrong peers that will inevitably ’miss’ such key
evolution steps during which the wrong peers are not in the
same context as d1, or are unable to observe d1’s context.
The context-based pairing approach can therefore be sum-
marized as follows:
1. Establish pairing key with device d claiming to be X .
Assign initial authenticity rating α(ID X
d ) = 0 to it.
2. Monitor the context and regularly evolve pairing keys