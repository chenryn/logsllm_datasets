### Adding Another Recommendation from Section 5 of the CIS Benchmark

To continue building our playbook in a scalable and manageable manner, we will add another recommendation from Section 5 of the RHEL 7 CIS Benchmark version 2.2.0. Specifically, we will address recommendation 5.2.9, which ensures that `SSH PermitEmptyPasswords` is disabled.

### Building Security Policies in Ansible

If we follow the same approach as in the previous section, we would create a new role called `rhel7cis_recommendation529` and place the relevant tasks and handlers inside it. However, this method does not scale well. Creating a new role for each recommendation would require specifying each role in the top-level playbook, leading to a long and cumbersome list.

For example, the playbook might look like this:

```yaml
---
- name: Test and implement CIS benchmark
  hosts: all
  become: yes
  roles:
    - rhel7cis_recommendation528
    - rhel7cis_recommendation529
```

With almost 400 recommendations, this approach would quickly become unmanageable.

### Organizing Roles Logically

How you organize your Ansible tasks into roles is up to you, but it's important to use a method that is manageable. One effective approach is to group related recommendations together. For instance, the recommendations in Section 5 of the CIS Benchmark relate to Access, Authentication, and Authorization. We can group these into a single role, such as `rhel7cis_section5`.

### Implementing Recommendations 5.2.8 and 5.2.9

With this structure, we can now build both the checks for recommendations 5.2.8 and 5.2.9 into the same role. Both recommendations relate to SSH daemon configuration, so they can share the same handler.

Here is an example of how the tasks in the `rhel7cis_section5` role might look:

```yaml
---
- name: 5.2.8 Ensure SSH root login is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: Restart sshd

- name: 5.2.9 Ensure SSH PermitEmptyPasswords is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  notify: Restart sshd
```

This code is still highly readable and broken down into manageable chunks, but it is not so granular that it becomes difficult to maintain the top-level playbook.

### Handling Exceptions

In an ideal world, all CIS recommendations would be applied to every machine. However, in reality, there may be exceptions. For example, some legacy systems may require remote root logins over SSH. In such cases, it's important to handle these exceptions gracefully.

#### Using the `when` Clause

Ansible provides the `when` clause to conditionally run tasks. For example, to skip recommendation 5.2.8 on a specific host, we can use a Boolean variable:

```yaml
- name: 5.2.8 Ensure SSH root login is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: Restart sshd
  when:
    - recommendation_528|default(true)|bool
```

Similarly, for recommendation 5.2.9:

```yaml
- name: 5.2.9 Ensure SSH PermitEmptyPasswords is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  notify: Restart sshd
  when:
    - recommendation_529|default(true)|bool
```

We can define the `recommendation_528` and `recommendation_529` variables in the inventory file for the specific host:

```ini
[legacyservers]
legacy-testhost

[legacyservers:vars]
recommendation_528=false
```

#### Using Tags

Another way to handle exceptions is by using tags. Tags allow you to run only the desired portions of a role or playbook. For example, we can add tags to our tasks:

```yaml
- name: 5.2.8 Ensure SSH root login is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin no'
  notify: Restart sshd
  tags:
    - notlegacy
    - allservers

- name: 5.2.9 Ensure SSH PermitEmptyPasswords is disabled (Scored - L1S L1W)
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    regexp: '^PermitEmptyPasswords'
    line: 'PermitEmptyPasswords no'
  notify: Restart sshd
  tags:
    - allservers
```

We can then run the playbook with specific tags to include or exclude tasks:

```sh
ansible-playbook -i inventory.yml playbook.yml --skip-tags=notlegacy
```

### Implementing More Complex Security Benchmarks

Let's consider a more complex example, such as recommendation 3.1.2, which disables packet redirect sending. This recommendation requires setting kernel parameters and flushing IPv4 routes. Using the `sysctl` module, we can achieve this in a concise and readable manner:

```yaml
- name: 3.1.2 Ensure packet redirect sending is disabled (Scored - L1S L1W)
  sysctl:
    name: "{{ item.paramname }}"
    value: "{{ item.paramvalue }}"
    reload: yes
    ignoreerrors: yes
    sysctl_set: yes
    state: present
  loop:
    - { paramname: net.ipv4.conf.all.send_redirects, paramvalue: 0 }
    - { paramname: net.ipv4.conf.default.send_redirects, paramvalue: 0 }
  notify:
    - Flush IPv4 routes

- name: Flush IPv4 routes
  sysctl:
    name: net.ipv4.route.flush
    value: "1"
    sysctl_set: yes
```

### Making Appropriate Decisions in Your Playbook Design

As you build your roles and playbooks, you will encounter decisions that need to be made. For example, time synchronization is a critical function, but there are multiple services available, such as `chrony` and `ntpd`. It's important to make a decision upfront about which service to use and standardize it across your infrastructure.

For example, if you choose `chrony`, your role for ensuring time synchronization might look like this:

```yaml
- name: 2.2.1.1 Ensure time synchronization is in use (Not Scored - L1S L1W)
  yum:
    name: chrony
    state: present
```

By making these decisions and organizing your roles logically, you can create a highly manageable and scalable Ansible codebase.