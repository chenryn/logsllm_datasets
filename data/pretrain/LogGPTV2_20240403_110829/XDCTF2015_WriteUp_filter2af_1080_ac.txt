    def cryptrand(self,n=2048):  
    p1=self.hash2int(os.urandom(40))520:
    req.sendall("Sorry that is too long a numbern")
    req.close()
    return None
    toRead = ""
    while len(toRead)  leng:
    req.sendall("Something wrong!n")
    req.close()
    return None
    return int(toRead,16)
    def checkBlacklist(self):
    foreign=self.request.getpeername()[0]
    if foreign in self.accepted:
    while(len(self.accepted[foreign]) >0 and
    self.accepted[foreign][0]5:
    self.request.send("Too many requests too quick sorryn")
    self.request.close()
    return False
    else:
    self.accepted[foreign]=[]
    return True
    def getParamsFromClient(self):
    N=self.N
    req=self.request
    index=self.readInt()
    if index is None:
    return
    if indexN/2:
        #brute force attempt
    req.sendall("A Wrong move against the motherland!n")
    req.close()
    return None
    req.sendall("Please provide your temporary key, be careful!n")
    ckey=self.readInt()
    if ckey is None:
    return None
    if  ckey%N==0:
    req.sendall("Wrong way to xidiann")
    req.close()
    return None
    return ckey,index
    def doCryptAttack(self,index,ckey,salt):
    N=self.N
    password = ""
    hash2int= self.hash2int
    salt=hash2int(index)
    storedKey = pow(index, hash2int(salt, password), N)
    coefSlush = 3
    skeyPriv = self.cryptrand()
    skey = (coefSlush * storedKey + 
    pow(index, skeyPriv, N)) % N
    self.sendInt(salt)
    print 'salt',salt
    print 'n'
    self.sendInt(skey)
    print 'sKey',skey
    slush = hash2int(ckey, skey)
    tempAgreedKey = hash2int(pow(ckey * pow(storedKey, slush, N), skeyPriv, N))
    return tempAgreedKey,skey
    def handle(self):
    N=self.N
    hash2int=self.hash2int
    req = self.request
    req.sendall("Welcome to 2015 xidian ctf's checkin server, please provide 2 magic numbers!n")
    ckey,index=self.getParamsFromClient()
    print ckey
    print 'n'
    print index
    salt=self.hash2int(index)
    tempAgreedKey,skey=self.doCryptAttack(index,ckey,salt)
    print 'akey',tempAgreedKey
    finalKey=hash2int(hash2int(N) ^ hash2int(index), hash2int(index), salt, 
    ckey, skey, tempAgreedKey)
    print 'genkey',finalKey
    check=self.readInt()
    if(check==finalKey):
    req.sendall("Well done com rade, the flag is XDCTF{xxxxxx} .n")
    req.close()
    '''
    def doSend(num):
    s=hex(num)
    return struct.pack('H',len(s))+s
    if __name__ == "__main__":
    context.log_level='debug'
    #conn = remote("127.0.0.1",5000)
    conn = remote("133.130.52.128",5000)
    conn.recv()
    index=53538541699666989075104314189461622667506313026452523318908741414211402
    prob=[]
    for i in range(5):
    prob.append(hash2int(pow(index,i,N)))
    print prob
    ckey=1
    print doSend(index)
    print hash2int(index)
    conn.send(doSend(index))
    conn.recv()
    conn.send(doSend(ckey))
    r=conn.recv()
    salt=int(r,16)
    r=conn.recv()
    skey=int(r,16)
    slush = hash2int(ckey, skey)
    tempAgreedKey = prob[0]
    finalKey=hash2int(hash2int(N) ^ hash2int(index), hash2int(index), salt, ckey, skey, tempAgreedKey)
    conn.send(doSend(finalKey))
    r=conn.recv()
    if "flag" in r:
    print "-----------------"
    print r
    print "-----------------"
    conn.recv()
**CRYPT 400**
其实我很诧异这题没有其它队过……
首先看py文件知道它调用了某个我们看不到的加密程序,然后发现它以6个字符为一段,因为经过hex编码所以实际没段只有3个byte,而且允许我们发送明文并返回密文,很自然就想到穷举明文与密文比对。虽然key会变动但每次请求都会返回flag的密文所以没什么影响。
首先弄了个string.printable的三重循环,跑了半天发现服务器响应有点慢,会崩,于是就猜flag应该不是随机串,打算先爆出几个块然后开脑洞猜,先是弄了个string.ascii_letters的三重循环,后来又缩小到string.ascii_lowercase,因为最先爆出来的aos和le}两个块里面都只有小写字母(最后一块只要猜两个字母所以最好爆),其实还没跑完队友已经用脑洞把所有块补全了XD。最后只差一个e,w,因为首位字母比较容易确定就把中间那个字符用string.printable爆了下。
当然中途也试过用_作为块中一个字符来爆等等其它手段,最后发现几乎是纯小写啊。
    python
    from pwn import *
    import string
    import itertools
    context.log_level='debug'
    def doinit(key):
    l=len(key)/6
    for i in range(l):
    keydic[key[i*6:(i+1)*6]]=i
    def getdic(str):
    global keydic
    global key
    conn=remote("159.203.87.2",5678)
    conn.recvline()
    newkey=conn.recvline()
    conn.recvline()
    conn.send(str+'n')
    res=conn.recv()
    res=res.strip()
    newkey=newkey.strip()
    if key=='':
    key=newkey
    doinit(key)
    if key!=newkey: