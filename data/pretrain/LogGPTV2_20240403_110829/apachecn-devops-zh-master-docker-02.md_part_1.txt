# 二、构建容器映像
在本章中，我们将让您开始构建容器映像。我们将研究几种不同的方法，您可以使用 Docker 内置的工具来定义和构建您的映像。我们将涵盖以下主题:
*   介绍 Dockerfile
*   使用 Dockerfile 构建容器映像
*   使用现有容器构建容器映像
*   从头开始构建容器映像
*   使用环境变量构建容器映像
*   使用多阶段构建构建容器映像
# 技术要求
在前一章中，我们在以下目标操作系统上安装了 Docker:
*   麦考高中及以上
*   Windows 10 专业版
*   Ubuntu 18.04
在本章中，我们将使用我们的 Docker 安装来构建映像。虽然本章中的截图将来自我的首选操作系统，即 macOS，但我们将运行的 Docker 命令将在迄今为止安装了 Docker 的所有三个操作系统上运行。然而，一些支持命令可能只适用于 macOS 和基于 Linux 的操作系统，而且数量很少。
本章所用代码的完整副本可在以下网址找到:[https://github . com/PacktPublishing/Mastering-Docker-第三版/tree/master/chapter02](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter02)
查看以下视频，了解《行为准则》:
[http://bit.ly/2D0JA6v](http://bit.ly/2D0JA6v)
# 介绍 Dockerfile
在本节中，我们将深入讨论 Dockerfiles，以及要使用的最佳实践。那么什么是 Dockerfile 呢？
一个**文件**只是一个包含一组用户定义指令的纯文本文件。当 Dockerfile 被`docker image build`命令调用时(我们接下来会看到这个命令)，它被用来组装一个容器映像。文件如下所示:
```
FROM alpine:latest
LABEL maintainer="Russ McKendrick "
LABEL description="This example Dockerfile installs NGINX."
RUN apk add --update nginx && \
 rm -rf /var/cache/apk/* && \
 mkdir -p /tmp/nginx/
COPY files/nginx.conf /etc/nginx/nginx.conf
COPY files/default.conf /etc/nginx/conf.d/default.conf
ADD files/html.tar.gz /usr/share/nginx/
EXPOSE 80/tcp
ENTRYPOINT ["nginx"]
CMD ["-g", "daemon off;"]
```
如您所见，即使没有解释，也很容易了解 Dockerfile 的每一步指示`build`命令做什么。
在我们继续浏览之前的文件之前，我们应该先快速了解一下 Alpine Linux。
**Alpine Linux** is a small, independently developed, non-commercial Linux distribution designed for security, efficiency, and ease of use. While small (see the following section), it offers a solid foundation for container images due to its extensive repository of packages, and also thanks to the unofficial port of grsecurity/PaX, which is patched into its kernel it offers proactive protection dozens of potential zero-day and other vulnerabilities.
Alpine Linux，由于它的大小和它的强大，已经成为 Docker 提供的官方容器映像的默认映像库。正因为如此，我们将在整本书中使用它。为了让您了解 Alpine Linux 的官方映像有多小，让我们将其与撰写本文时可用的一些其他发行版进行比较:
![](img/2105ef9d-b875-4566-8cab-73e416e7fd93.png)
从终端输出可以看出，Alpine Linux 的重量仅为 4.41 MB，而最大的映像是 Fedora，为 253 MB。Alpine Linux 的裸机安装容量约为 130 兆字节，几乎只有 Fedora 容器映像的一半大小。
# 深入查看文档
让我们看一下 Dockerfile 示例中使用的指令。我们将按照它们出现的顺序来看它们:
*   `FROM   `
*   `LABEL`
*   `RUN`
*   `COPY`和`ADD`
*   `EXPOSE`
*   `ENTRYPOINT`和`CMD`
*   其他文件说明
# 从
`FROM`指令告诉 Docker 你想为你的映像使用哪个基础；如前所述，我们使用的是 Alpine Linux，所以我们只需输入我们希望使用的映像名称和发布标签。在我们的例子中，要使用最新的官方 Alpine Linux 映像，我们只需要添加`alpine:latest`。
# 标签
`LABEL`指令可用于向映像添加额外信息。这些信息可以是从版本号到描述的任何信息。还建议您限制使用的标签数量。一个好的标签结构会帮助以后不得不使用我们形象的人。
然而，使用太多的标签也会导致映像变得低效，所以我建议使用在[http://label-schema.org/](http://label-s%20chema.org/)详细描述的标签模式。您可以使用以下 Docker `inspect`命令查看容器标签:
```
$ docker image inspect 
```
或者，您可以使用以下内容仅过滤标签:
```
$ docker image inspect -f {{.Config.Labels}} 
```
在我们的示例 Dockerfile 中，我们添加了两个标签:
1.  `maintainer="Russ McKendrick "`向映像的最终用户添加一个标签，帮助识别谁在维护映像
2.  `description="This example Dockerfile installs NGINX."`添加映像是什么的简要描述。
一般来说，最好在从映像创建容器时定义标签，而不是在构建时，因此最好将标签保持为关于映像的元数据，而不是其他内容。
# 奔跑
`RUN`指令是我们与映像交互以安装软件和运行脚本、命令和其他任务的地方。从我们的`RUN`指令中可以看出，我们实际上正在运行三个命令:
```
RUN apk add --update nginx && \
 rm -rf /var/cache/apk/* && \
 mkdir -p /tmp/nginx/
```
如果我们在 Alpine Linux 主机上有一个外壳，我们的三个命令中的第一个相当于运行以下命令:
```
$ apk add --update nginx
```
这个命令使用 Alpine Linux 的包管理器安装 nginx。
We are using the `&&` operator to move on to the next command if the previous command was successful. To make it more obvious which commands we are running, we are also using `\` so that we can split the command over multiple lines, making it easy to read.
我们链中的下一个命令删除任何临时文件等，以将映像的大小保持在最小:
```
$ rm -rf /var/cache/apk/*
```
我们链中的最后一个命令创建一个路径为`/tmp/nginx/`的文件夹，这样当我们运行容器时，nginx 将正确启动:
```
$ mkdir -p /tmp/nginx/
```
我们也可以在 Dockerfile 中使用以下内容来获得相同的结果:
```
RUN apk add --update nginx
RUN rm -rf /var/cache/apk/*
RUN mkdir -p /tmp/nginx/
```
然而，就像添加多个标签一样，这被认为是低效的，因为它会增加映像的整体大小，这在很大程度上是我们应该尽量避免的。这方面有一些有效的用例，我们将在本章后面部分讨论。在大多数情况下，在构建映像时，应该避免使用这种运行命令的方法。
# 复制并添加
乍一看，`COPY`和`ADD`看起来是在做同样的任务；然而，有一些重要的区别。`COPY`指令是两者中比较直接的:
```
COPY files/nginx.conf /etc/nginx/nginx.conf
COPY files/default.conf /etc/nginx/conf.d/default.conf
```
您可能已经猜到，我们正在从构建映像的主机上的文件文件夹中复制两个文件。第一个文件是`nginx.conf`，包含一个基本的 nginx 配置文件:
```
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
events {
 worker_connections 1024;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile off;
    keepalive_timeout 65;
    include /etc/nginx/conf.d/*.conf;
}
```
这将覆盖在`RUN`说明中作为 APK 安装的一部分安装的 NGINX 配置。下一个文件`default.conf`，是我们可以配置的最简单的虚拟主机，内容如下:
```
server {
  location / {
      root /usr/share/nginx/html;
  }
}
```
同样，这将覆盖任何现有文件。到目前为止，一切都很好，那么我们为什么要使用`ADD`指令呢？在我们的例子中，它看起来如下:
```
ADD files/html.tar.gz /usr/share/nginx/
```
如您所见，我们正在添加一个名为`html.tar.gz`的文件，但是我们实际上并没有对归档文件做任何事情来将其解压缩到我们的 Dockerfile 中。这是因为`ADD`会自动上传、解压缩，并将结果文件夹和文件放在我们告诉它的路径上，在我们的例子中是`/usr/share/nginx/`。这为我们提供了`/usr/share/nginx/html/`的网络根，正如我们在复制到映像的`default.conf`文件中的虚拟主机块中定义的那样。
`ADD`指令也可用于添加远程来源的内容。例如，考虑以下情况:
```
ADD http://www.myremotesource.com/files/html.tar.gz /usr/share/nginx/
```
前面的命令行将从`http://www.myremotesource.com/files/`下载`html.tar.gz`，并将文件放在映像上的`/usr/share/nginx/`文件夹中。来自远程源的归档文件被视为文件，并且不是未压缩的，在使用它们时，您必须考虑到这一点，这意味着文件必须在`RUN`指令之前添加，这样我们就可以手动取消文件夹归档，并删除`html.tar.gz` 文件。
# 揭露
`EXPOSE`指令让 Docker 知道，当执行映像时，定义的端口和协议将在运行时暴露。该指令不将端口映射到主机，而是打开端口以允许访问容器网络上的服务。
例如，在我们的 Dockerfile 中，我们告诉 Docker 在每次运行映像时打开端口`80`:
```
EXPOSE 80/tcp
```
# ENTRYPOINT 和 CMD
使用`ENTRYPOINT`比使用`CMD`的好处，我们接下来会看到，就是可以互相结合使用。`ENTRYPOINT`可以单独使用，但是请记住，只有当您希望您的容器可执行时，您才会希望单独使用`ENTRYPOINT`。
作为参考，如果您想到一些可能使用的命令行界面命令，您必须指定的不仅仅是命令行界面命令。您可能需要添加您希望命令解释的额外参数。这将是仅使用`ENTRYPOINT`的用例。
例如，如果您想要在容器中执行一个默认命令，您可以执行类似于以下示例的操作，但是一定要使用一个保持容器活动的命令。在我们的案例中，我们使用了以下内容:
```
ENTRYPOINT ["nginx"]
CMD ["-g", "daemon off;"]
```
这意味着每当我们从我们的映像中启动一个容器时，都会执行 nginx 二进制文件，因为我们已经将其定义为我们的`ENTRYPOINT`，然后执行我们作为`CMD`拥有的任何东西，这相当于运行以下命令:
```
$ nginx -g daemon off;
```
如何使用`ENTRYPOINT`的另一个例子如下:
```
$ docker container run --name nginx-version dockerfile-example -v
```
这相当于在我们的主机上运行以下命令:
```
$ nginx -v