results in nested function calls, Vulmet will treat the function
as complex and skip the analysis.
4.4.4 Loops
Loops are another major problem in program MODanalysis.
Since in static analyze, it is diﬃcult to determine the exact
number of iterations that the loop will be executed and the
exact output values. Some works, such as [53], propose loop
summarization algorithms, which could yield approximation
results for some types of loops. However, since hot patches
need to be precise to completely ﬁx the vulnerabilities, the
approximation in loops may greatly aﬀect the accuracy of the
patches.
Since loops are in diﬀerent types, Vulmet develops dif-
ferent strategies to handle diﬀerent loops. The ﬁrst type of
loop is the one that contains the oﬃcial patch. In this type,
the patch semantics are repeated several times according to
the loop iterations. Vulmet will extract the loop iteration
conditions and perform the weakest precondition solving on
them. Then, it will construct a semantic equivalent loop at
the insertion point. The hot patch semantics will be included
inside the constructed loop. The second type of loop is the
one that appears in the middle of the analysis path. To handle
this type of loop, Vulmet needs to ﬁrst determine whether
the loop modiﬁes any of the relevant value used for weakest
precondition solving. If no relevant value is changed, the loop
can be skipped. Otherwise, Vulmet leverages the idea of [53]
to perform the loop summarization. It will generate the ranges
USENIX Association
29th USENIX Security Symposium    2405
of the values which have been changed inside the loop. Then,
Vulmet takes the conservative way to choose the largest range
of the value to form the hot patch semantics so that the gen-
erated patch can ﬁx the vulnerability with the possibility of
aﬀecting the normal functionalities. Last, if the loop is too
complex with new function calls or multi-level nested loops
inside, we choose to skip the loop without any analysis.
4.5 Binary Hot Patch Generation
The last step is to generate the hot patch based on the pre-
condition constraints. Vulmet uses an empty function as the
template and set the function to have the same number and
type input parameter as the original target function. Then it
inserts all the constraints to it and compiles the function into
binary executables which can be hot patched to the kernels.
The major challenge is to determine the actual address of
the variables used in the patches. Since Vulmet hooks the
function at the beginning or end, the address of the input
parameters and the return value can be determined. For the
address of variables inside structures, Vulmet will look up the
relative address from the source code. The relative address
will be added to the base address, which is obtained from
hooking, to give the exact address of the variables.
Vulmet supports the hot patch for real-world Android plat-
form with architectures ARM 32 bits and 64 bits. To suit
for various architectures, Vulmet is designed to output the
weakest preconditions of the patches. These can be used to
generate the binary instruction of diﬀerent architectures to
support diﬀerent platforms.
The generated hot patch includes a binary executable with
the patching logic and a ﬁle to record the hooking point(s).
To apply the hot patch, one can use the standard hot patching
procedure to load the hot patch into the memory and build a
trampoline at the hooking point to direct the control ﬂow of
the program to the loaded patch. After the execution of the
patch, it will either pass the control back to the function or
return the function to prevent the vulnerability.
5 Evaluation
We have evaluated Vulmet for the correctness, robustness,
and eﬃciency of its generated hot patches. Correctness quan-
tiﬁes the patches’ ability to ﬁx the vulnerability, robustness
quantiﬁes the patches’ ability to maintain the stableness of
the program, and eﬃciency quantiﬁes how much overhead the
patches introduce. We have designed experiments to test the
eﬀectiveness of the patches in the three aspects. In the experi-
ments, all the patches are tested on the Android Open Source
Project (AOSP) platform Google Nexus 5X with Android
kernel version 7.1.1 r31 bullhead build.
Table 8: Prevention of CVE exploit attacks
After Patch
Safe
Safe
Safe
Not exploited
CVE NO.
CVE-2014-3153
CVE-2016-4470
CVE-2014-4943
CVE-2018-17182
Before Patch
System crash
System crash
System crash
System crash
5.1 Correctness Evaluation
In this section, we evaluate the correctness of the generated
hot patches. The experiment consists of three parts. First, we
test the patches with real-world CVE exploits. Second, for the
vulnerabilities whose exploit is not available, we manually
verify the correctness of the patches. Third, we manually write
hot patches and compare the generated hot patches against
them to check whether the generated patches ﬁx the vulnera-
ble in the same way as human experts.
5.1.1 Experiment 1: Patches against Exploits
We assess the correctness of the generated hot patch against
real-world exploits. We manually collect exploits for the An-
droid CVEs and use them to attack the system patched by
Vulmet. To the best of our knowledge, we have found 3 work-
ing exploits for the vulnerabilities with the hot patches. In
addition, we have also tested the hot patch for the recent crit-
ical vulnerability, CVE-2018-17182. Table 8 lists the four
exploits and shows the program running results before and
after the application of the hot patches. The result suggests
that all the patches have successfully prevented the attacks
from the exploits. For CVE-2014-3153, CVE-2016-4470,
and CVE-2014-4943, the hot patches have ﬁxed the vulner-
ability completely. For CVE-2018-17182, the hot patch can
successfully prevent the exploit but cannot stop the system
from crashing. It is because that the patch can only partially
ﬁx the vulnerability. In the following, we discuss the patch
correctness in detail with code examples.
CVE-2014-3153 is a privilege escalation vulnerability in
function futex_requeue() function. As shown in Fig. 6,
the oﬃcial patch ﬁxes the vulnerability in three diﬀerent loca-
tion of the functions.
For the ﬁrst patch in Fig. 6(a), Vulmet extracts the se-
mantics of checking the equivalent of variable uaddr1 and
uaddr1 at line 2. Then, it converts the semantics into the hot
patch at the beginning of the function futex_requeue().
The two variables used in the oﬃcial patch are also the func-
tion input parameters. Vulmet checks the analysis path to
ensure there are no changes on the two variables. Therefore,
the semantic will remain the same as the oﬃcial patch. In
addition, since the oﬃcial patch is inside another sanity check
(shown in (a) at Line 1), Vulmet will also keep the semantics
2406    29th USENIX Security Symposium
USENIX Association
(a)
(b)
(c)
Figure 6: Oﬃcial Patch: CVE-2014-3153
when constructing the hot patch to keep as much original
semantics as possible. The generated semantic is as follow:
hook f u t e x _ r e q u e u e
check r e q u e u e _ p i :
i f n o t 0 :
check uaddr1 , uaddr2 :
uaddr1 == uaddr2 :
i f
r e t u r n t h e
f u n c t i o n
For the second patch in Fig. 6(b), there is a function call in-
side the oﬃcial patch, which has been inlined at the compiled
binary. Vulmet imports the code for the inlined function and
extracts its semantics. Then the semantic is combined with
the original oﬃcial patch semantic, which is listed below.
check :
r e q u e u e _ p i && key1 && key2
&& key1−>b o t h . word == key2−>b o t h . word
&& key1−>b o t h . p t r == key2−>b o t h . p t r
&& key1−>b o t h . o f f s e t == key2−>b o t h . o f f s e t
Then, Vulmet tries to solve the conditions of all the vari-
ables appear in the semantics. requeue_pi is one of the
input parameters so that its semantics remain the same. For
the union pointers key1 and key2, Vulmet looks for a good
patch insertion points, where the value of key1 and key2 is
same as the value in the oﬃcial patches. After the analysis,
Vulmet ﬁnds a non-inlined function call hash_futex() after
the sanity checks. At that point, the value of key1 and key2
Figure 7: Oﬃcial Patch: CVE-2014-4943
can be extracted. Thus, the tool will generate the hot patch by
creating the patch at the point to get the value of key1 and
key2 and checks them to make decisions.
For the third patch in Fig. 6(c), Vulmet follows the same
steps as the second patch, since the semantics of both of their
oﬃcial patches are the same.
It
[4].
CVE-2014-4943 is another function that has a known
exploit
is a privilege escalation vulnerabil-
ity located at function pppol2tp_setsockopt() and
pppol2tp_getsockopt(). Therefore, the oﬃcial patch
ﬁxes the vulnerability in two diﬀerent functions. However,
both of ﬁxes follow the same way to ﬁx the vulnerabilities.
Vulmet will generate the hot patch for each of the individual
ﬁx in the same steps.
Fig. 7 shows the oﬃcial patch of CVE-2014-4943 for func-
tion pppol2tp_setsockopt(). It tries to replace the value
of the return statement. Instead of calling a function, the new
return statement just returns a constant value. To generate
a hot patch, Vulmet will ﬁrst look at the sanity check that
contains the return statement. It builds a similar check state-
ment at the beginning of the function to check the value of the
variable since it is a function input parameter, whose value
can be obtained via hooking. After that, if the condition is
met, Vulmet just returns the function. It will produce a hot
patch with the same semantics as the original patch. The hot
patch generation for the function pppol2tp_getsockopt()
follows the same steps.
CVE-2016-4470 is a denial of service bug inside
key_reject_and_link() in Linux kernel [7]. As in Fig. 8,
the oﬃcial ﬁx adds in a sanity check to test the value of the
variable link_ret at line 9 as shown in Fig. 8. The value is
an indicator of whether the function __key_link_begin()
is successfully executed. If it fails to run, the variable edit
will not be initialized and the bug will be triggered. Vulmet
generates the hot patch by ﬁrst selecting a good insertion point.
After analyzing diﬀerent possible places, Vulmet has chosen
to hook where the function call __key_link_begin() at
line 6 has ﬁnished. It checks the return value of the function.
If it is 0 (error), it will return the caller function to avoid fur-
ther execution. Although there are some instructions between
the insertion point and the oﬃcial patching point (Line 8 has
USENIX Association
29th USENIX Security Symposium    2407
1if(requeue_pi){2+if(uaddr1==uaddr2)3+return-EINVAL;4...5}1+if(requeue_pi2+&&match_futex(&key1,&key2)){3+ret=-EINVAL;4+gotoout_put_keys;5+}1+if(match_futex(&q.key,&key2)){2+ret=-EINVAL;3+gotoout_put_keys;4+}1staticintpppol2tp_setsockopt(.....)2{3...4if(level!=SOL_PPPOL2TP)5-returnudp_prot.setsockopt(sk,6-level,optname,optval,optlen);7+return-EINVAL;8...}Table 9: Manual Analysis on Patch Correctness
Correct Patch
Incorrect Patch
Number
55
4
manually audit them to check whether the generated patches
have ﬁxed the patch or not. In total, Vulmet has generated hot
patches for 59 diﬀerent CVEs. Excluding the 4 CVEs, which
have known exploits, there are 55 to be manually veriﬁed.
We believe that 59 vulnerabilities are suﬃcient to test the
performance of Vulmet since we are working on the real-
world Linux kernel vulnerabilities. Table 9 has given the
overall results for the manual veriﬁcation.
The results have suggested that Vulmet has successfully
generated correct patches for 55 out of 59 vulnerabilities.
We have examined the four failed cases to understand the
error made by Vulmet. There are three patches which are
considered as incorrect because the patches contain part of
operations that need to modify the memory. Since the majority
parts of these patches are sanity checks, when selecting the
patch generation candidates, Vulmet regards them as good
ones. During the analysis, it will neglect the minor memory
writing operations. However, the memory writing operations
in the patches are the keys to ﬁx the vulnerabilities. Therefore,
Vulmet will have diﬃculties to generate correct patches. In
order to ﬁx this issue, Vulmet needs to enhanced its semantic
analysis to detect the memory writing operation.
Another failed case is the one discussed in the previous
section, CVE-2018-17182. In this case, only part of the se-
mantics can be converted to the hot patch. Therefore, Vulmet
only gives an incomplete patch which can only prevent the
exploits but not ﬁxing the problems. From the failed cases, we
know that to have a precise semantics of the original patches
is one of the keys for generating the correct hot patches.
5.1.3 Experiment 3: Comparison with Human Written
Patches
In this section, we would like to compare the generated
patches with the human written ones. We manage to hire
security researchers to understand the oﬃcial patches and
manually write hot patches for comparison. We have com-
pared all the 55 correctly generated hot patches against the
human written ones. Table 10 has summarized the compari-
son results between the human-written patches and the auto-
generated patches. In addition, since human audition may be
biased, we have also listed all the hot patch semantics online
at [11].
The results show that most of the generated patches work
in the same way as the human written ones. This is because
both of the Vulmet and the human follow the same way of
understanding the semantics of the oﬃcial patches. In the
following, we will discuss the similarities and diﬀerences
Figure 8: Oﬃcial Patch: CVE-2016-4470
omitted some instructions), the program analysis results sug-
gest they will not aﬀect the value of the variable link_ret.
Therefore, the hot patch provides the same semantics as the
oﬃcial patch to ﬁx the vulnerability.
CVE-2018-17182 is a cache invalidation bug in the Linux
kernel [9] [20]. The logic of the error handling func-
tion vmacache_flush_all() inside the kernel is incorrect,
which results in potential exploit even when a strong sandbox
is present.
The oﬃcial patch ﬁxes the vulnerability in two parts. First,
it changes the sequence number from 32 bit to 64 bit, so that it
avoids the overﬂow bug to trigger the error handling function.
Second, it removes the buggy error handling function. There
are two diﬀerent semantics in the oﬃcial patch. For changing
the bit of the sequence number, Vulmet is not able to generate
an equivalent semantic of it, since modifying the memory
contents is prohibited by the security requirements. However,
Vulmet can ﬁx the second part since removing a function
has an equivalent semantic as returning the function at the
beginning. Thus, Vulmet can generate a patch for part of the
oﬃcial patch. After applying the hot patch to the function, at-
tackers can still trigger the overﬂow bug which may crash the
program, but they are not able to exploit further to get the dan-
gling pointer at the error handling function. The program is
protected since the program will stop before the vulnerability
is reached. The hot patch has partially ﬁxed the vulnerability
with a possible crash due to the remaining overﬂow bug. The
ﬁx semantic is listed below.
hook f u n c t i o n v m a c a c h e _ f l u s h _ a l l ( )
k i l l
f u n c t i o n once c a l l e d
t h e
5.1.2 Experiment 2: Manual Veriﬁcation
Since the exploits are not always available for every CVE, it
is diﬃcult to conduct experiments on every patch against real-
world attacks. Therefore, for the patches without exploits, we
2408    29th USENIX Security Symposium