340
18.4 ParallelSequentialScans
Postgre does not support the other approach to parallel plan execution,which con-
sistsinperformingdataprocessingbyseveralworkersthatvirtuallyformanassemblyline
(roughlyspeaking,each plan node is performed bya separate process); this mechanism
wasdeemedinefficientbyPostgredevelopers.
18.4 Parallel Sequential Scans
One of the nodes designed for parallel processing is the Parallel Seq Scan node,
whichperformsaparallelsequentialscan.
Thenamesoundsabitcontroversial(isthescansequentialorparallelafterall?),
butnevertheless,itreflectstheessenceoftheoperation.Ifwetakealookatthefile
access,tablepagesarereadsequentially,followingtheorderinwhichtheywould
havebeenreadbyasimplesequentialscan. However,thisoperationisperformed
byseveralconcurrentprocesses. Toavoidscanningoneandthesamepagetwice,
theexecutorsynchronizestheseprocessesviasharedmemory.
Asubtleaspecthereisthattheoperatingsystemdoesnotgetthebigpicturetypi- v.
calofsequentialscanning;instead,itseesseveralprocessesthatperformrandom
reads.Therefore,dataprefetchingthatusuallyspeedsupsequentialscansbecomes
virtuallyuseless.Tominimizethisunpleasanteffect,Postgreassignseachpro-
cessnotjustonebutseveralconsecutivepagestoread.1
Assuch,parallelscanningdoesnotmakemuchsensebecausetheusualreadcosts
arefurtherincreasedbytheoverheadincurredbydatatransferfromprocesstopro-
cess. However,ifworkersperformanypost-processingonthefetchedrows(such
asaggregation),thetotalexecutiontimemayturnouttobemuchshorter.
Cost Estimation
Let’stakealookatasimplequerythatperformsaggregationonalargetable.The
executionplanisparallelized:
1 backend/access/heap/heapam.c, table_block_parallelscan_startblock_init & table_block_parallel-
scan_nextpagefunctions
341
Chapter18 TableAccessMethods
=> EXPLAIN SELECT count(*) FROM bookings;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (cost=25442.58..25442.59 rows=1 width=8)
−> Gather (cost=25442.36..25442.57 rows=2 width=8)
Workers Planned: 2
−> Partial Aggregate
(cost=24442.36..24442.37 rows=1 width=8)
−> Parallel Seq Scan on bookings
(cost=0.00..22243.29 rows=879629 width=0)
(7 rows)
AllthenodesbelowGatherbelongtotheparallelpartoftheplan.Theyareexecuted
byeachoftheworkers(twoofthemareplannedhere)andpossiblybytheleader
process(unlessthisfunctionalityisturnedoffbytheparallel_leader_participation
parameter). TheGathernodeitselfandallthenodesaboveitmakethesequential
partoftheplanandareexecutedbytheleaderprocessalone.
TheParallel Seq Scannoderepresentsaparallelheapscan. Therowsfieldshows
theestimatedaveragenumberofrowstobeprocessedbyasingleprocess.Allinall,
theexecutionmustbeperformedbythreeprocesses(oneleaderandtwoworkers),
buttheleaderprocesswillhandlefewerrows: itssharegetssmallerasthenumber
ofworkersgrows.1 Inthisparticularcase,thefactoris..
=> SELECT reltuples::numeric, round(reltuples / 2.4) AS per_process
FROM pg_class WHERE relname = 'bookings';
reltuples | per_process
−−−−−−−−−−−+−−−−−−−−−−−−−
2111110 | 879629
(1 row)
TheParallelSeqScancostiscalculatedsimilartothatofasequentialscan.There-
ceivedvalueissmaller,aseachprocesshandlesfewerrows;the/partisincluded
infullsincethewholetablestillhastoberead,pagebypage:
=> SELECT round((
relpages * current_setting('seq_page_cost')::real +
reltuples / 2.4 * current_setting('cpu_tuple_cost')::real
)::numeric, 2)
FROM pg_class WHERE relname = 'bookings';
1 backend/optimizer/path/costsize.c,get_parallel_divisorfunction
342
18.4 ParallelSequentialScans
round
−−−−−−−−−−
22243.29
(1 row)
Next,thePartialAggregatenodeperformsaggregationofthefetcheddata;inthis
particularcase,itcountsthenumberofrows.
The aggregation cost is estimated in the usual manner and is added to the cost
estimationofthetablescan:
=> WITH t(startup_cost)
AS (
SELECT 22243.29 + round((
reltuples / 2.4 * current_setting('cpu_operator_cost')::real
)::numeric, 2)
FROM pg_class
WHERE relname = 'bookings'
)
SELECT startup_cost,
startup_cost + round((
1 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost
FROM t;
startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
24442.36 | 24442.37
(1 row)
Thenextnode(Gather)isexecutedbytheleaderprocess.Thisnodeisresponsible
forlaunchingworkersandgatheringthedatatheyreturn.
Forthepurposeofplanning,thecostestimationofstartingprocesses(regardless
oftheirnumber)isdefinedbytheparallel_setup_cost parameter,whilethecostof 1000
eachrowtransferbetweentheprocessesisestimatedatparallel_tuple_cost. 0.1
In this example, the startup cost (spent on starting the processes) prevails; this
valueisaddedtothestartupcostofthePartialAggregatenode.Thetotalcostalso
includesthecostoftransferringtworows;thisvalueisaddedtothetotalcostof
thePartialAggregatenode:1
1 backend/optimizer/path/costsize.c,cost_gatherfunction
343
Chapter18 TableAccessMethods
=> SELECT
24442.36 + round(
current_setting('parallel_setup_cost')::numeric,
2) AS setup_cost,
24442.37 + round(
current_setting('parallel_setup_cost')::numeric +
2 * current_setting('parallel_tuple_cost')::numeric,
2) AS total_cost;
setup_cost | total_cost
−−−−−−−−−−−−+−−−−−−−−−−−−
25442.36 | 25442.57
(1 row)
Last but not least, the Finalize Aggregate node aggregates all the partial results
receivedbytheGathernodefromtheparallelprocesses.
Thefinalaggregationisestimatedjustlikeanyother. Itsstartupcostisbasedon
thecostofaggregatingthreerows; thisvalueisaddedtothetotalcostofGather
(since all the rows are needed to compute the result). The total cost of Finalize
Aggregatealsoincludesthecostofreturningonerow.
=> WITH t(startup_cost) AS (
SELECT 25442.57 + round((
3 * current_setting('cpu_operator_cost')::real
)::numeric, 2)
FROM pg_class WHERE relname = 'bookings'
)
SELECT startup_cost,
startup_cost + round((
1 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost
FROM t;
startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
25442.58 | 25442.59
(1 row)
Dependenciesbetweencostestimationsaredeterminedbywhetherthenodehas
toaccumulatethedatabeforepassingtheresulttoitsparentnode. Aggregation
cannotreturntheresultuntilitgetsalltheinputrows,soitsstartupcostisbased
onthetotalcostofthelowernode.TheGathernode,onthecontrary,startssending
rowsupstreamassoonastheyarefetched. Therefore,thestartupcostofthisop-
erationdependsonthestartupcostofthelowernode,whileitstotalcostisbased
onthelowernode’stotalcost.
344
18.5 ParallelExecutionLimitations
Hereisthedependencygraph:
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate
(cost=25442.58..25442.59 rows=1 width=8)
−> Gather
(cost=25442.36..25442.57 rows=2 width=8)
Workers Planned: 2
−> Partial Aggregate
(cost=24442.36..24442.37 rows=1 width=8)
−> Parallel Seq Scan on bookings
(cost=0.00..22243.29 rows=879629 width=0)
(9 rows)
18.5 Parallel Execution Limitations
Number of BackgroundWorkers
The number of processes is controlled by a hierarchy of three parameters. The
maximal number of background workers running concurrently is defined by the
max_worker_processesvalue. 8
However,parallelqueryexecutionisnottheonlyoperationthatneedsbackground
workers. Forexample,theyalsoparticipateinlogicalreplicationandcanbeused
byextensions. Thenumberofprocessesallocatedspecificallyforparallelplanex-
ecutionislimitedtothemax_parallel_workersvalue. 8
Outofthisnumber,uptomax_parallel_workers_per_gatherprocessescanserveone 2
leader.
Thechoiceoftheseparametervaluesdependsonthefollowingfactors:
• Hardwarecapabilities: thesystemmusthavefreecoresdedicatedtoparallel
execution.
• Tablesizes: thedatabasemustcontainlargetables.
• A typical load: there must be queries that potentially benefit from parallel
execution.
345
Chapter18 TableAccessMethods
Thesecriteriaaretypicallymetbysystemsratherthanones.
Theplannerwillnotconsiderparallelexecutionatalliftheestimatedvolumeof
8MB heapdatatobereaddoesnotexceedthemin_parallel_table_scan_sizevalue.
Unlessthenumberofprocessesforaparticulartableisexplicitlyspecifiedinthe
parallel_workersstorageparameter,itwillbecalculatedbythefollowingformula:
tablesize
1+ log
⌊ 3(min_parallel_table_scan_size)⌋
It means that each time a table grows three times,Postgre assigns one more
parallelworkerforitsprocessing.Thedefaultsettingsgiveusthesefigures:
table, numberof
 processes
8 
Inanycase,thenumberofparallelworkerscannotexceedthelimitdefinedbythe
max_parallel_workers_per_gatherparameter.
Ifwequeryasmalltableof,onlyoneworkerwillbeplannedandlaunched:
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT count(*) FROM flights;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (actual rows=1 loops=1)
−> Gather (actual rows=2 loops=1)
Workers Planned: 1
Workers Launched: 1
−> Partial Aggregate (actual rows=1 loops=2)
−> Parallel Seq Scan on flights (actual rows=107434 lo...
(6 rows)
346
18.5 ParallelExecutionLimitations
Aquery on a table of   gets only two processes because it hits the limit of
max_parallel_workers_per_gatherworkers: 2
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT count(*) FROM bookings;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (actual rows=1 loops=1)
−> Gather (actual rows=3 loops=1)
Workers Planned: 2
Workers Launched: 2
−> Partial Aggregate (actual rows=1 loops=3)
−> Parallel Seq Scan on bookings (actual rows=703703 l...
(6 rows)
Ifweremovethislimit,wewillgettheestimatedthreeprocesses:
=> ALTER SYSTEM SET max_parallel_workers_per_gather = 4;
=> SELECT pg_reload_conf();
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT count(*) FROM bookings;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (actual rows=1 loops=1)
−> Gather (actual rows=4 loops=1)
Workers Planned: 3
Workers Launched: 3
−> Partial Aggregate (actual rows=1 loops=4)
−> Parallel Seq Scan on bookings (actual rows=527778 l...
(6 rows)
Ifthenumberofslotsthatarefreeduringqueryexecutionturnsouttobesmaller
thantheplannedvalue,onlytheavailablenumberofworkerswillbelaunched.
Let’slimitthetotalnumberofparallelprocessestofiveandruntwoqueriessimul-
taneously:
=> ALTER SYSTEM SET max_parallel_workers = 5;
=> SELECT pg_reload_conf();
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT count(*) FROM bookings;
347
Chapter18 TableAccessMethods
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT count(*) FROM bookings;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (actual rows=1 loops=1)
−> Gather (actual rows=3 loops=1)
Workers Planned: 3
Workers Launched: 2
−> Partial Aggregate (actual rows=1 loops=3)
−> Parallel Seq Scan on bookings (actual rows=7037...
(6 rows)
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate (actual rows=1 loops=1)
−> Gather (actual rows=4 loops=1)
Workers Planned: 3
Workers Launched: 3
−> Partial Aggregate (actual rows=1 loops=4)
−> Parallel Seq Scan on bookings (actual rows=527778 l...
(6 rows)
Althoughthreeprocesseswereexpectedinbothcases,oneofthequeriesmanaged
togetonlytwoslots.
Let’srestorethedefaultsettings:
=> ALTER SYSTEM RESET ALL;
=> SELECT pg_reload_conf();
Non-Parallelizable Queries
Notallqueriescanbeparallelized.1 Inparticular,parallelplanscannotbeusedfor
thefollowingquerytypes:
• Queries that modify or lock data (, ,  ,and the
like).
1 postgresql.org/docs/14/when-can-parallel-query-be-used.html
348
18.5 ParallelExecutionLimitations
Thisrestrictiondoesnotapplytosubquerieswithinthefollowingcommands:
– ,, v.
–  v.
However,rowinsertionisstillperformedsequentiallyinallthesecases.
• Queriesthatcanbepaused.Itappliestoqueriesrunwithincursors,including
loopsin/pg.
• Queries that call   functions. By default, these are all user-
definedfunctionsandafewstandardones. Youcangetthefulllistofunsafe
functionsbyqueryingthesystemcatalog:
SELECT * FROM pg_proc WHERE proparallel = 'u';
• Querieswithinfunctionsifthesefunctionsarecalledfromaparallelizedquery
(toavoidrecursivegrowthofthenumberofworkers).
Some of these limitations may be removed in the future versions of Postgre.
Forexample,theabilitytoparallelizequeriesattheSerializableisolationlevelis v.
alreadythere.
Parallel insertion of rows using such commands as  and  is currently under