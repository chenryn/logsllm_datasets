### 4) Assigning Symbolic Values

UChecker introduces symbolic values to the heap graph through three primary sources: uninitialized variables, built-in functions, and PHP superglobal variables. Some variables remain uninitialized because UChecker conducts symbolic execution on a subset of PHP programs identified by locality analysis. Additionally, UChecker performs lightweight type inference to assign types to symbolic values based on their associated operators or built-in functions.

Special handling is applied to `$_FILES` due to its unique characteristics. 

### Translation of PHP-Based Constraints into Z3-Based Constraints

To bridge the semantic gap between PHP and Z3, UChecker uses a translation function, `trl()`, which recursively converts PHP-based s-expressions into Z3-based ones. The core translation rules, summarized in Table II, address issues such as different operation names, parameter order and missing parameters, dynamic typing in PHP, and operations not supported by Z3.

For example, the logical "And" operator in PHP can handle various types (string, integer, boolean), whereas Z3's "and" operator is limited to boolean variables. Therefore, UChecker translates PHP's "And" operation into a set of Z3 "and" operations, depending on the variable types.

#### Example Rules for Translation
- **String Concatenation**:
  - PHP: `tr l((".", e1 : t1, e2 : t2))`
  - Z3: `(str.++ tr l(e1 : t1) tr l(e2 : t2)) where t1 = t2 = string`

- **Logical Not**:
  - PHP: `tr l("!", e : t)`
  - Z3: `(not tr l(e : t)) if e:boolean`
  - Z3: `(not (= tr l(e : int) 0)) if e:int`
  - Z3: `(= (str.len tr l(e : string)) 0) if e:string`

- **Array Check**:
  - PHP: `tr l(("in_array", needle, haystack : array))`
  - Z3: `(or tr l("=", needle, e1 : t1), ..., tr l("=", needle, en : tn)) if haystack is recognized as {e1 : t1, ..., en : tn}; otherwise, a symbol value in Z3 with the type of string.`

### Example Analysis

Consider the following PHP code snippet:

```php
1 $path_array = wp_upload_dir();
2 $filename = $_FILES['upload_file']['name'];
3 $pathAndName = $path_array['path'] . "/";
4 if (strlen($filename) > 5) {
5   move_uploaded_file($_FILES["upload_file"]['tmp_name'], $pathAndName);
}
```

- `wp_upload_dir()` returns a symbolic value denoted as `sdir`, which is mapped to `$path_array`.
- `$_FILES` is modeled as a special case, so `$_FILES['upload_file']['tmp_name']` returns a concatenation of two symbolic values, `sname` and `sext`.
- `$pathAndName` is a symbolic value denoted as `spath`, which is the concatenation of `spath`, `/`, `sname`, and `sext`.

For the constraints:
- **Constraint-1**: `esrc` is `$_FILES['upload_file']['tmp_name']`, directly tainted by `$_FILES`. Thus, Constraint-1 is satisfied.
- **Constraint-2 and Constraint-3**: The s-expressions `sed_st` and `ser_eachability` are derived from the heap graph.

#### Translated Constraints
- **Constraint-2**: `(str.suffixof ".php" (str.++ spath (str.++ "/" (str.++, sname, sext))))`
- **Constraint-3**: `> (str.len (str.++ sname sext)) 5`

### Evaluation

UChecker has been implemented with approximately 30K lines of PHP code. It uses PHP-Parser for AST generation and Z3 as the SMT solver. The tool was tested on a Windows-10 workstation with an Intel i7-5500U CPU and 16GB of memory, using PHP 7 as the runtime environment.

#### Ground-Truth-Available Experiments

We collected 13 publicly-reported vulnerable PHP applications, including 11 WordPress plugins, a Joomla extension, and a Drupal module. We also manually identified 28 vulnerability-free WordPress plugins that support file upload. UChecker detected 12 out of 13 vulnerable applications, with one false negative and two false positives.

- **Performance**: Locality analysis reduced the lines of code for symbolic execution, ranging from 67% to 99.7%. The average number of objects per path was less than 100 for most applications, and the maximum memory consumption was less than 65 MB. Each application was analyzed within 60 seconds.
- **Detection Results**: UChecker detected 12 out of 13 vulnerable applications. The false negative was due to memory limitations, and the false positives were acceptable as they involved admin-privileged actions.

#### Identifying New Vulnerable PHP Applications

UChecker was used to scan 9,160 WordPress plugins, identifying 3 new vulnerable plugins: "File Provider 1.2.3", "WooCommerce Custom Profile Picture 1.0", and "WP Demo Buddy 1.0.2". These vulnerabilities had not been previously reported.

### Summary

UChecker effectively assigns and manages symbolic values, translates PHP-based constraints into Z3-based constraints, and efficiently detects vulnerabilities in PHP applications. The tool's performance and accuracy make it a valuable asset for security analysis.