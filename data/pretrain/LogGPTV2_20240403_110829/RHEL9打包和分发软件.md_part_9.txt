    %global [(opts)] 
    ```
:::
删除 ``{.literal} 周围的空白。名称可以是字母数字字符，字符
`_`{.literal}，长度必须至少为 3 个字符。包含 `(opts)`{.literal}
字段是可选的：
::: itemizedlist
-   `Simple`{.literal} 宏不包含 `(opts)`{.literal}
    字段。在这种情况下，只执行递归宏扩展。
-   `Parametrized`{.literal} 宏包含 `(opts)`{.literal}
    字段。在宏调用开始时传递括号之间的 `opts`{.literal} 字符串可得到
    `argc/argv`{.literal} 处理的 `getopt(3)`{.literal}。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
旧的 RPM SPEC 文件使用 `%define  `{.literal}
宏模式。`%define`{.literal} 和 `%global`{.literal} 宏之间的差异如下：
::: itemizedlist
-   `%define`{.literal} 是本地范围的。它适用于 SPEC
    文件的特定部分。`%define`{.literal} 宏的主体部分在使用时会被扩展。
-   `%global`{.literal} 有全局范围。它适用于整个 SPEC 文件。在定义时扩展
    `%global`{.literal} 宏的正文。
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
宏会被评估，即使被注释掉或者宏的名称被指定到 SPEC 文件的
`%changelog`{.literal} 部分中。要注释掉宏，请使用 `%%`{.literal}。例如
`%%global`{.literal}.
:::
::: itemizedlist
**其他资源**
-   [宏语法](https://rpm-software-management.github.io/rpm/manual/macros.html){.link}
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#assembly_using-the-setup-macro_more-on-macros}使用 %setup 宏 {.title}
:::
这部分论述了如何使用 `%setup`{.literal} 宏的不同变体构建带有源代码
tarball 的软件包。请注意，宏变体可以合并。`rpmbuild`{.literal}
输出说明了 `%setup`{.literal} 宏的标准行为。在每个阶段开始时，宏输出
`Executing(%…​)`{.literal}, 如以下示例所示。
::: example
[]{#advanced-topics.html#idm140428021250368}
**例 4.1. `%setup`{.literal} 宏输出示例**
::: example-contents
``` literallayout
Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.DhddsG
```
shell 输出启用了 `set -x`{.literal}。要查看
`/var/tmp/rpm-tmp.DhddsG`{.literal} 的内容，请使用 `--debug`{.literal}
选项，因为 `rpmbuild`{.literal}
在成功构建后删除临时文件。这将显示环境变量的设置，后跟：
``` literallayout
cd '/builddir/build/BUILD'
rm -rf 'cello-1.0'
/usr/bin/gzip -dc '/builddir/build/SOURCES/cello-1.0.tar.gz' | /usr/bin/tar -xof -
STATUS=$?
if [ $STATUS -ne 0 ]; then
  exit $STATUS
fi
cd 'cello-1.0'
/usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
```
:::
:::
`%setup`{.literal} 宏：
::: itemizedlist
-   确保我们在正确的目录中工作。
-   删除之前构建的恢复。
-   解包源 tarball。
-   设置一些默认特权。
:::
::: section
::: titlepage
### []{#advanced-topics.html#proc_using-the-setup-q-macro_assembly_using-the-setup-macro}使用 %setup -q 宏 {.title}
:::
`-q`{.literal} 选项限制 `%setup`{.literal} 宏的详细程度。仅执行
`tar -xof`{.literal} 而不是
`tar -xvvof`{.literal}。使用这个选项作为第一个选项。
:::
::: section
::: titlepage
### []{#advanced-topics.html#proc_using-the-setup-n-macro_assembly_using-the-setup-macro}使用 %setup -n 宏 {.title}
:::
`-n`{.literal} 选项指定已展开 tarball 中的目录名称。
当来自扩展 tarball
的目录与预期内容不同时，会使用这个情况(`%{name}-%{version}`{.literal})，这可能会导致
`%setup`{.literal} 宏的错误。
例如，如果软件包名称是 `cello`{.literal}，但源代码以
`hello-1.0.tgz`{.literal} 中存档，且包含 `hello/`{.literal} 目录，则
SPEC 文件内容需要如下：
``` literallayout
Name: cello
Source0: https://example.com/%{name}/release/hello-%{version}.tar.gz
…
%prep
%setup -n hello
```
:::
::: section
::: titlepage
### []{#advanced-topics.html#proc_using-the-setup-c-macro_assembly_using-the-setup-macro}使用 %setup -c 宏 {.title}
:::
如果源代码 tarball
不包含任何子目录，并在解压缩后的文件会填充当前目录，则使用
`-c`{.literal} 选项。
然后，`-c`{.literal} 选项会在归档扩展中创建目录和步骤，如下所示：
``` literallayout
/usr/bin/mkdir -p cello-1.0
cd 'cello-1.0'
```
归档扩展后不会更改该目录。
:::
::: section
::: titlepage
### []{#advanced-topics.html#proc_using-the-setup-d-and-setup-t-macros_assembly_using-the-setup-macro}使用 %setup -D 和 %setup -T 宏 {.title}
:::
`-D`{.literal} 选项会禁用删除源代码目录，在使用 `%setup`{.literal}
宏时特别有用。使用 `-D`{.literal} 选项时，不会使用以下行：
``` literallayout
rm -rf 'cello-1.0'
```
`-T`{.literal} 选项通过从脚本中删除以下行来禁用源代码 tarball 的扩展：
``` literallayout
/usr/bin/gzip -dc '/builddir/build/SOURCES/cello-1.0.tar.gz' | /usr/bin/tar -xvvof -
```
:::
::: section
::: titlepage
### []{#advanced-topics.html#proc_using-the-setup-a-and-setup-b-macros_assembly_using-the-setup-macro}使用 %setup -a 和 %setup -b 宏 {.title}
:::
`-a`{.literal} 和 `-b`{.literal} 选项可以扩展特定的源：
`-b`{.literal}
选项代表`之前（before）`{.literal}，在进入工作目录前扩展特定源。`-a`{.literal}
选项代表 `之后，在`{.literal} 输入后会扩展这些源。它们的参数是 SPEC
文件中的源号。
在以下示例中，`cello-1.0.tar.gz`{.literal} 存档包含一个空
`examples`{.literal} 目录。示例以单独的 `example.tar.gz`{.literal}
tarball
中提供，它们被扩展到同一名称的目录中。在这种情况下，如果在输入工作目录后扩展
`Source1`{.literal}，请使用 `-a 1`{.literal}。
``` literallayout
Source0: https://example.com/%{name}/release/%{name}-%{version}.tar.gz
Source1: examples.tar.gz
…
%prep
%setup -a 1
```
在以下示例中，在单独的 `cello-1.0-examples.tar.gz`{.literal} tarball
中提供了示例，它扩展至
`cello-1.0/examples`{.literal}。在这种情况下，使用
`-b 1`{.literal}，在进入工作目录前扩展 `Source1`{.literal} ：
``` literallayout
Source0: https://example.com/%{name}/release/%{name}-%{version}.tar.gz
Source1: %{name}-%{version}-examples.tar.gz
…
%prep
%setup -b 1
```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#ref_common-rpm-macros-in-the-files-section_more-on-macros}%files 部分中的常见 RPM 宏 {.title}
:::
下表列出了 SPEC 文件的 `%files`{.literal} 部分中需要的高级 RPM Macros。
::: table
[]{#advanced-topics.html#idm140427919456752}
**表 4.1. `%files`{.literal} 部分中的高级 RPM Macros**
::: table-contents
  Macro                定义
  -------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  %license             宏识别列为 LICENSE 文件的文件，该文件将被 RPM 安装和标记（例如）。示例： `%license LICENSE`{.literal}
  %doc                 宏识别列出为文档的文件，还将安装并标记 RPM。宏用于有关打包软件的文档，以及用于代码示例和各种附带项的文档。在包括事件代码示例时，应谨慎地从文件中删除可执行模式。示例： `%doc README`{.literal}
  %dir                 宏可确保路径是此 RPM 拥有的目录。这一点很重要，因此 RPM 文件清单准确知道在卸载时要清理哪些目录。示例： `%dir %{_libdir}/%{name}`{.literal}
  %config(noreplace)   宏可确保以下文件是一个配置文件，因此如果从原始安装校验和中修改了该文件，则不应在软件包安装或更新包时覆盖（或替换）。如果有更改，则会在升级或安装时使用 `.rpmnew`{.literal} 创建该文件，以便不修改目标系统上的预先存在的或修改的文件。示例：`%config(noreplace) %{_sysconfdir}/%{name}/%{name}.conf`{.literal}
:::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#displaying-the-built-in-macros_more-on-macros}显示内置宏 {.title}
:::
Red Hat Enterprise Linux 提供多个内置 RPM 宏。
::: orderedlist
**步骤**
1.  要显示所有内置 RPM 宏，请运行：
    ``` literallayout
    rpm --showrc
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    输出很长。要缩小结果范围，请在 `grep`{.literal} 命令中使用上述命令。
    :::
2.  要查找有关您系统 RPM 版本 RPM 宏的信息，请运行：
    ``` literallayout
    rpm -ql rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    RPM 宏是在输出目录结构中标题为 `macros`{.literal} 的文件。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#rpm-distribution-macros_more-on-macros}RPM 发布宏 {.title}
:::
不同的发行版根据被打包的软件语言或发布的具体准则，提供不同的推荐 RPM
宏集合。
推荐的 RPM 宏集合通常作为 RPM 软件包提供，可以使用 `dnf`{.literal}
软件包管理器进行安装。
安装后，宏文件可在 `/usr/lib/rpm/macros.d/`{.literal} 目录中找到。
::: itemizedlist
**步骤**
-   要显示原始 RPM 宏定义，请运行：
    ``` literallayout
    rpm --showrc
    ```
:::
以上输出显示原始 RPM 宏定义。
::: itemizedlist
-   要确定宏的作用以及在打包 RPM 时如何有帮助，使用宏名称作为其参数运行
    `rpm --eval`{.literal} 命令：
    ``` literallayout
    rpm --eval %{_MACRO}
    ```
:::
::: itemizedlist
**其他资源**
-   `RPM`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-the-custom-macros_more-on-macros}创建自定义宏 {.title}
:::
您可以使用自定义宏覆盖 `~/.rpmmacros`{.literal}
文件中的发布宏。您所做的任何更改都会影响您计算机上的每个构建。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不建议在 `~/.rpmmacros`{.literal}
文件中定义任何新宏。其他机器上不会包括此类宏，因为用户可能想要重新构建您的软件包。
:::
::: itemizedlist
**步骤**
-   要覆盖宏，请运行：