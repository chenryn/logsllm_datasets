Chromium.
3Code
from
https://github.com/leanote/desktop-app/blob/7e2b1d0bca3fd4eb9733d1492e9f63a95177216a/public/js/
app/note.js#L1991-L2007, simplified for clarity.
4.1. XSS and RCE in Leanote Desktop
26
Execute arbitrary commands on the user’s computer:
This payload deletes the file /path/to/file on the user’s computer using the child_process library
included with Node.js. Arbitrary other commands can of course also be executed. In addition, if the
attacker is interested in the output of the command, they can easily exfiltrate it, for example using
fetch as shown before, as the execSync() function simply returns the stdout from the command
that was run.
Start a reverse shell:
This payload opens a reverse shell on the user’s computer which the attacker can access by running
nc localhost 1234 on their system [57]. For the sake of a concise example, this requires netcat on
the user’s computer which is uncommon. However, there are also reverse shells implemented in a few
lines of pure JavaScript using the Node.js APIs [58]. There is even a code generator called JSgen.py4
for this purpose.
The vulnerability was fixed a few days later in version 2.6 by passing the note’s title through the existing
trimTitle() function:5
- var t = tt(me.starItemT, note.NoteId, note.Title || getMsg('Untitled'));
+ var t = tt(me.starItemT, note.NoteId, trimTitle(note.Title) || getMsg('Untitled'));
This trimTitle() function just replaces all instances of  with their corresponding HTML entities:6
var trimTitle = function(title) {
// […]
return title.replace(//g, "&gt;");
};
The fix did however not address the problem that Node.js integration is enabled, allowing trivial escalation
of XSS into RCE. In fact, in October 2019 another, very similar, vulnerability was reported, this time
injecting code through an  with the src attribute set to a javascript: URL in the note’s text
[59]. This vulnerability has not been fixed as of the time of writing and also leads to RCE due to the
insuﬀicient security settings used by the Leanote desktop app.
Neither of the two reports addresses how the vulnerabilities can be exploited. Seemingly, they can only
be classified as self-XSS as the user would need to inject the payload themselves. However, the problem is
4https://pentesterslife.blog/2018/06/28/jsgen/
5Diff from https://github.com/leanote/desktop-app/commit/a2ed226637f8e66c9b089784b5e58eccf2e2fb30.
6Code
from
https://github.com/leanote/desktop-app/blob/17e65292a5124cc3ec1d41c03b2cbedc76916f58/public/js/
common.js#L1611-L1620, simplified for clarity.
4.2. RCE in WordPress.com for Desktop
27
actually more severe. Leanote has a feature that allows users to share notes with other users [60], [61]. If a
user imports a malicious note shared with them, they are affected by these vulnerabilities.
A minimal example of this vulnerability to be used with Electron Fiddle is available here:
https://gist.github.com/ed4b6b82c5a2aa4b08b166b1e21bb14c
This example reduces the application to entering new note titles and displaying them. An Electron version
prior to 5.0.0 should be used for testing as the RCE parts rely on Node integration being enabled by default.
4.2. RCE in WordPress.com for Desktop
WordPress is an open source content management system that powers about a third of the world’s websites
[62]. The WordPress.com for Desktop app is an oﬀicial Electron wrapper for editing WordPress websites
on the Desktop. It can be used both with websites hosted on WordPress.com and WordPress sites users
host on their own server through a plugin [63].
In December 2017, a vulnerability was reported to the project. This vulnerability fits into the group RCE
due to use of shell.openExternal(). It is presented here as there is a very clear path to exploitation without
any tricks being necessary.
The vulnerability works through the window.open(url) function that opens a new window. The app
hooks the creation of new windows to instead pass the URL to shell.openExternal(). This is done to
open external URLs in the browser instead of the app. However, as there was no filtering on the URLs that
are passed to window.open(), an attacker could specify a malicious URL and gain RCE [64].
The hook is installed on the new-window event of the webContents object of the window:7
webContents.on('new-window', function(event, url, frameName, disposition, options) {
const parsedUrl = new URL(url);
for (let x = 0; x  {
const href = /* [the link URL] */;
// […]
const isLocalFilePath = /^file:\/\/.+/.test(href);
if (isLocalFilePath) {
const filePath = href.slice(6);
shell.showItemInFolder(filePath);
11Code from https://github.com/Automattic/wp-desktop/pull/377/commits/ee79e7ca7f556ea2c48fb71c038b84b9205a4c46,
formatted for clarity.
12Omitted
here
for
brevity,
see:
https://github.com/RocketChat/Rocket.Chat.Electron/blob/
a2f4885ba5c0ff995f3098e5280bc3e1f8d8d2dc/src/preload/links.js#L44-L48
13Code from https://github.com/RocketChat/Rocket.Chat.Electron/blob/a2f4885ba5c0ff995f3098e5280bc3e1f8d8d2dc/
src/preload/links.js#L6-L41, simplified for clarity.
4.3. RCE in Rocket.Chat Desktop
31
event.preventDefault();
return;
}
// […]
shell.openExternal(href);
event.preventDefault();
};
Links are tested against the ^file:\/\/.+ regex (which passes if the URL starts with file://). If
they match this regex, they are passed to shell.showItemInFolder(), otherwise they are passed to
shell.openExternal(). As per the previous discussion, this seems sensible. The check is executed in
a preload script which even an attacker who can execute JavaScript code in the renderer process cannot
modify. However, the app doesn’t enable context isolation, meaning that the renderer process and preload
script share the same global objects. In particular, they share the same RegExp object. Through the use of
prototypes, JavaScript allows developers to modify the behaviour of many internal functions. The attacker
can use this to modify how regex testing works to bypass the check. The report proposes a fairly complicated
implementation that leaves other uses of the function intact [72], but the problem can be demonstrated
much more trivially:
RegExp.prototype.test = function() { return false; };
This payload modifies the .test() function on any regex to always return false, regardless of the input.
As explained, due to the lack of context isolation, this doesn’t just apply to the renderer process but also
to the preload script. Therefore, the attacker can now pass arbitrary URLs to shell.openExternal().
The developers mitigated the vulnerability in version 0.59.0 of the server a few days later by changing
their Markdown parser to prevent the XSS vector presented in the report [73]. The part of the vulnerability
discussed here has not been fixed as of the time of writing, though. This would only be possible by either
rewriting the check not to rely on any globals that the renderer process could access or by enabling context
isolation, requiring a fairly major rewrite of the existing code.