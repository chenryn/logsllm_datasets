A and § match at line breaks: RegexOptions Multi1ine
Java
The Pattern,compile() class factory takes an optional second parameter with regulat
expression options. The Pattern class defines several constants that set the various
options. You can set multiple options by combining them with the birwise inclusive or
operator |.
Free-spacing: Pattern -COMMENTS
Case insensitive: Pattern.CASE_INSENSITIVE I Pattern.UNICODE_CASE
Dot matches line breaks: Pattern, DOTALL
 and $ match at line breaks: Pattern -MULTILINE
There are indeed rwo options for case insensitivity, and you have to set both for full
case insensitivity. If you set only Pattern. CASE_INSENSITIVE, only the English letters A
to Z are matched case insensitively. If you set both options, all characters from all scripts
are matched case insensitively. The only reason not to use Pattern,UNIcoDE_CASE is
performance, in case you know in advance you'll be dealing with ASCII text only. When
using mode modifiers inside your regular expression, use  to match at the start or end of the subject
string.
Additional Language-Specific Options
NET
Regex0ptions. ExplicitCapture makes all groups, except named groups, noncapturing.
With this option, (-) is the same as (?:.). If you always name your capruring
groups, turn on this option to make your regular expression more efficient without the
need to use the  and \d) are restricted to ASCI characters, as they are in
JavaScript.
130 | Chapter 3: Programming with RegularExpressions
---
## Page 147
Java
An option unique to Java is Pattern, CANon_EQ, which enables °canonical equivalence."*
As explained in the discussion in *Unicode grapheme* on page 58, Unicode provides
different ways to represent characters with diacritics. When you turm on this option,
your reex will match a character, een ifit is encoded differently in the subject sring.
For instance, the regex \uooEo) will match both “\uo0Eo” and *\uo061\uo3oo", because
they are canonically equivalent. They both appear as *a” when displayed on screen,
indistinguishable to the end user. Without canonical equivalence, the regex  as a line break character for the
dot, caret, and dollar. By default, all Unicode line breaks are treated as line break
characters.
JavaScript
If you want to apply a regular expression repeatedly to the same sring (e.g., to iterate
over all matches or to search and replace all matches instead of just the first) specify
the /g or “global flag.
3q1 o1 Kipa1eadau uorssaudxa zen8aa e 6dde o1 suea no6 g! 8ep 8, aq1 spaau dxg8oX
same string just as standard JavaScript does. XRegExp also adds the *n" flag which
makes all groups, except named groups, noncapturing. With this option,  and
^p{L). These are explained in Recipe 2.7. Without this modifier, PCRE treats each
byte as a separate character, and Unicode regex tokens cause an error.
/U fips the “greedy” and “lazy” behavior of adding an extra question mark to a quan-
tifier. Normally,  is greedy and *?> is lazy. With /U,  is lazy and *?> is greedy.
We strongly recommend that you never use this flag, as it will confuse programmers
who read your code later and miss the extra /U modifier, which is unique to PHP. Also,
3.4 Set Regular Expeession 0ptions I 131
---
## Page 148
don’t confuse /U with /u if you encounter it in somebody else's code. Regex modifiers
are case sensitive.
Perl
If you want to apply a regular expression repeatedly to the same string (e.g., to iterate
over all matches or to search-and-replace all matches instead of just the first one),
specify the /g (°global") flag.
If you interpolate a variable in a regex as in m/I an Sname/ then Perl will recompile the
regular expression each time it needs to be used, because the contents of $nane may
have changed. You can suppress this with the /o modifier. m/I am $name/o is compiled
the first time Perl needs to use it, and then reused the way it is after that. If the contents
of $nane change, the regex will not reflect the change. See Recipe 3.3 if you want to
control when the regex is recompiled.
If your regex uses shorthand character classes or word boundaries, you can specify one
of the /d, /u, /a, or /1 flags to control whether the shorthands and word boundaries
will match only ASCII characters, or whether they use Unicode or the current locale.
The *Variations" sections in Recipes 2.3 and 2.3 have more details on what these flags
do in Perl.
Python
Python has two extra options that change the meaning of word boundaries (see
Recipe 2.6) and the shorthand character classes , and ^s), as well as their
negated counterparts (see Recipe 2.3). By default, these tokens deal only with ASCII
letters, digits, and whitespace.
The re. LoCALE or re.L option makes these tokens dependent on the current locale. The
locale then determines which characters are treated as letters, digits, and whitespace
by these regex tokens. You should specify this option when the subject string is not a
Unicode string and you want characters such as leters with diacritics to be treated as
such.
The re.UNIcoDE or re.U makes these tokens dependent on the Unicode standard. All
characters defined by Unicode as letters, digits, and whitespace are then treated as such
by these regex tokens. You should specify this option when the subject string you're
applying the regular expression to is a Unicode string.
Ruby
The Regexp new() factory takes an optional third parameter to select the string encoding
your regular expression supports. If you do not specify an encoding for your regular
Susn °su a po so ay aonos aof se upou attes au asn [m a uossadxa
the source file’s encoding is the right thing to do.
132 | Chapter3: Programming with RegularExpressions
---
## Page 149
To select a coding explicitly, pass a single character for this parameter. The parameter
is case-insensitive. Possible values are:
This stands for *None." Each byte in your string is treated as one character. Use
this for ASCll text.
Enables the “EUC" encoding for Far East languages.
Enables the Japanese “Shifr-JIS° encoding
Enables UTF-8, which uses one to four bytes per character and supports all lan-
guages in the Unicode standard (which includes alliving languages of any
significance).
When using a literal regular expression, you can set the encoding with the modi-
fiers /n, /e, /s, and /u. Only one of these modifiers can be used for a single regular
expression. They can be used in combination with any or all of the /x, /1, and /m
modifiers.
Do not mistake Ruby's /s for that of Perl, Java, or .NET. In Ruby, /s
forces the Shift-JIS encoding. In Perl and most other regex flavors, it
turns on “dot matches line breaks* mode. In Ruby, you can do that
with /n.
See Also
The effects of the matching modes are explained in detail in Chaprer 2. Those sections
also explain the use of mode modifiers within the regular expression.
Free-spacing: Recipe 2.18
Case insensitive: “Case-insensitive matching" on page 29 in Recipe 2.1
Dot matches line breaks: Recipe 2.4
 and $ match at line breaks: Recipe 2.5
Recipes 3.1 and 3.3 explain how to use literal regular expressions in your source code
and how to create regular expression objects. You set the regular expression options
while creating a regular expression.
3.5TestIfaMatchCanBeFoundWithinaSubjectString
Problem
You want to check whether a match can be found for a particular regular expression
in a particular string. A partial match is suficient. For instance, the regex regex#pat
3.5 Test Ifa Match Can Be Found Within a Subjet String I 133
---
## Page 150
tern> partially matches The regex pattern can be found. You don’t care about any of
the details of the match. You just want to know whether the regex matches the string.
Solution
C#
For quick one-off tests, you can use the static call:
If the regex is provided by the end user, you should use the static call with full exception
handling:
boolfoundMatch = false;
}↓
foundMatch = Regex.IsMatch(subjectString, UserInput);
}catch (ArgumentNullException ex) {
// Cannot pass null as the regular expression or subject string
}catch (ArgumentException ex){
// Syntax error in the regular expression
To use the same regex repeatedly, construct a Regex object:
Regex regexObj = new Regex(“regex pattern");
(uxaqnsewsagxa = uepuno toog
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
bool  foundMatch = false;
try {
Regex regexObj = new Regex(UserInput) ;
try{
foundMatch = regexObj IsMatch(subjectString);
} catch (ArgumentNullException ex) {
// Cannot pass null as the regular expression or subject string
} catch (ArgumentException ex){
// Syntax error in the regular expression
VB.NET
For quick one-off tests, you can use the static call:
(uaod xaax, uxsoaanspesxaag = yeno wa
If the regex is provided by the end user, you should use the static call with full exception
handling:
134 | Chapter3: Programming with RegularExpresions
---
## Page 151
Dim FoundMatch As Boolean
Try
FoundMatch = Regex.IsMatch (SubjectString, UserInput)
Catch ex As ArgunentNullException
‘Cannot pass Nothing as the regular expression or subject string
Catch ex As ArgunentException
End Txy
'Syntax error in the regular expression
To use the same regex repeatedly, construct a Regex object:
Dim Regex0bj As New Regex("regex pottern°)
Dim FoundMatch = Regexobj -IsMatch(SubjectString)
The IsMatch( ) call should have SubjectString as the only parameter, and the callshould
be made on the Regexob instance rather than the Regex class:
Dim FoundMatch = RegexObj -IsMatch(SubjectString)
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
Dim FoundMatch As Boolean
Din RegexObj As New Regex(UserInput)
Try
FoundMatch = Regex. IsMatch(SubjectString)
Catch ex As ArgumentNullException
‘Cannot pass Nothing as the regular expression or subject string
End Try
Catch ex As ArgunentException
End Try
‘Syntax error in the regular expression
Java
The only way to test for a partial match is to create a Matcher:
Pattern regex = Pattern.compile(“regex pottern");
Matcher regexMatcher = regex,matcher(subjectString);
boolean foundMatch = regexMatcher,find();
If the regex is provided by the end user, you should use exception handling:
boolean foundMatch = false;
try {
Pattern regex = Pattern.compile(UserInput);
(ussnsaupe*xaax - xatexax ape
foundMatch = regexMatcher. find();
}catch (PatternSyntaxException ex){
// Syntax error in the regular expression
3.5 Test Ifa Match Can Be Found Within a Subject String I 135