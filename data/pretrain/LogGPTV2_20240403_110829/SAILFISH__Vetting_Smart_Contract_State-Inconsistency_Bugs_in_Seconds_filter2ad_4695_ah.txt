[57] Valentin Wüstholz and Maria Christakis. Targeted greybox fuzzing
with static lookahead analysis. 2020.
[58] Meng Xu, Chenxiong Qian, Kangjie Lu, Michael Backes, and Taesoo
Kim. Precise and scalable detection of double-fetch bugs in os kernels.
In IEEE Symposium on Security and Privacy (SP), 2018.
[59] Mengya Zhang, Xiaokuan Zhang, Yinqian Zhang, and Zhiqiang Lin.
In
TXSPECTOR: Uncovering attacks in ethereum from transactions.
29th USENIX Security Symposium (USENIX Security), 2020.
APPENDIX I
EXTENDED EVALUATION
Speedup due to value-summary analysis: To characterize
the performance gain from the value-summary analysis, we have
further designed this experiment where, instead of our value
summary (VS), we provide a standard path-by-path function
summary [31], [34], [20] (PS) to the REFINER module. From
16,835 contracts for which SAILFISH raised warnings (which
are also the contracts sent to the REFINER), we randomly picked
a subset of 2,000 contracts (i) which belong to either medium,
or large dataset, and (ii) VS configuration finished successfully
without timing out—for this experiment. We define speedup
factor s = tps
, where tm is the amount of time spent in the
tvs
symbolic evaluation phase in mode m. In PS mode, SAILFISH
timed out for 21.50% of the contracts owing to the increased
cost of the REFINE phase. Figure 12 presents a histogram of the
speedup factor distribution of the remaining 1,570 contracts for
which the analyses terminated in both the modes.
Our novel value summary analysis is significantly faster
than a classic summary-based analysis.
APPENDIX II
CASE STUDIES
A. Zero-day vulnerabilities
In this section, we present the unique vulnerabilities found by
SAILFISH—not detected by any other tool. We have redacted
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
176
SpeedupContracts02004006001.002.003.004.005.006.007.008.009.0010.0011.0012.0013.0014.0015.0016.0017.0018.0019.0020.00calls the transfer() method of A, which, in turn, calls the
tokenReceived() hook of the receiver contract R. Such
a hook is simply a function in R that is called when tokens
are sent to it. The vulnerability that the attacker leveraged is
that there was a state (S) update in C.borrow() following
the external call to A.transfer(). Since, A.transfer()
further calls R.tokenReceived() before even the original
C.borrow() call returns, the attacker took this opportunity
to reenter C before even the state update could take place.
Since the version of SLITHER that SAILFISH uses lacks
support for all types of SOLIDITY tuples, we could not run our
tool as-is on the contract C. To see whether our approach can
still detect the above vulnerability by leveraging its inter-contract
analysis, we redacted the contracts to eliminate syntactic
complexity unrelated to the actual vulnerability. When run on
the simplified contract, SAILFISH successfully flagged it as
vulnerable to the reentrancy attack, as expected.
Transaction order dependency: TOD may enable an attacker
to earn profit by front-running a victim’s transaction. For
example, during our manual analysis, we encountered a contract
where the contract owner can set the price of an item on demand.
A user will pay a higher price for the item if the owner maliciously
front-runs the user’s transaction (purchase order), and sets the
price to a higher value. In another contract that enables buying
and selling of tokens in exchange for Ether, the token price was
inversely proportional with the current token supply. Therefore,
an attacker can front-run a buy transaction T , and buy n tokens
having a total price pl. After T is executed, the token price will
increase due to a drop in the token supply. The attacker can
then sell those n tokens at a higher price, totaling price ph, and
making a profit of (ph−pl). We illustrate one more real-world
example of a TOD attack in Figure 15 . recordBet() allows
1 contract Bet {
2
3
4
5
6
7
8
9
10
11
12
13 }
}
function settleBet(bool bet) {
uint reward = (userBlnces[msg.sender]*totalBlnc[!bet]
uint totalWth = reward + userBlnces[msg.sender];
totalBlnc[!bet] = totalBlnc[!bet] - reward;
msg.sender.transfer(totalWth);
userBlnces[msg.sender]= _userAmount;
totalBlnc[bet] = totalBlnc[bet] +_userAmount;
function recordBet(bool bet, uint _userAmount) {
/ totalBlnc[bet];
Fig. 15: Real-world example of a TOD bug.
}
a user to place a bet, and then it adds (Line 4) the bet amount
to the total balance of the contract. In settleBet(), a user
receives a fraction of the total bet amount as the reward amount.
Therefore, if two invocations of settleBet() having same
bet value race against each other, the front-running one will
earn higher reward as the value of totalBlnc[!bet], which
reward is calculated on, will also be higher in that case.
B. Advantage of value-summary analysis.
Figure 16 shows a real-world contract that demonstrates
the benefit of the value-summary analysis. A modifier in
SOLIDITY is an additional piece of code which wraps the
execution of a function. Where the underscore (_) is put inside
the modifier decides when to execute the original function. In this
require(!reentrancy_lock);
reentrancy_lock = true;
_;
reentrancy_lock = false;
1 interface Corn{
2
3 }
4 contract FreeTaxManFarmer {
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 }
}
}
function reapFarm(address tokn) nonReentrant {
require(user[msg.sender][tokn].workDone > 0);
// Untrusted external call
Corn(tokn).transfer(msg.sender, ...);
// State update
user[msg.sender][tokn].workDone = 0;
function transfer(address to, uint256 value);
// Prevents re-entry to the decorated function
modifier nonReentrant() {
Fig. 16: The benefit of value-summary analysis.
example, the public function reapFarm is guarded by the mod-
ifier nonReentrant, which sets the reentrancy_lock
(shortened as L) on entry, and resets it after exit. Due to the
hazardous access (Line 14 and Line 18) detected on workDone,
EXPLORER flags this contract as potentially vulnerable. How-
ever, the value summary analysis observes that the require
clause at Line 7 needs to be satisfied in order to be able
to modify the lock variable L, which is encoded as: L =
{(cid:104)false,L = false(cid:105),(cid:104)true,L = false(cid:105)}. In other words, there
does not exist a program path that sets L to false, if the current
value of L is true. While making the external call at Line 16, the
program state is δ ={L(cid:55)→ true,...}, which means that L is true
at that program point. Taking both the value summary and the pro-
gram state into account, the REFINER decides that the correspond-
ing path leading to the potential reentrancy bug is infeasible.
C. False positives for reentrancy and TOD
Reentrancy. Figure 17 features a real-world contract where
bTken is set inside the constructor. The static taint analysis that
SAILFISH performs disregards the fact that Line 5 is guarded
by a require clause in the line before; thereby making the
variable tainted. Later at Line 9 when the balanceOf method
is invoked on bTken, SAILFISH raises a false alarm.
1 contract EnvientaPreToken {
2
3
4
5
6
7
8
9
10
11
12 }
// Trusted external call
require(bTken.balanceOf(address(this))>=val);
balances[msg.sender] -= val;
// Only owner can set bTken
function enableBuyBackMode(address _bTken) {
}
function transfer(address to, uint256 val) {
require( msg.sender == _creator );
bTken = token(_bTken);
Fig. 17: False positive of SAILFISH (Reentrancy).
}
TOD. Figure 18 presents a real-world donation collection
contract, where the contract transfers the collected donations
to its recipient of choice. Both SAILFISH and SECURIFY raised
TOD warning as the transferred amount, i.e., donations
at Line 7, can be modified by function pay() at Line 3.
Though the amount of Ether withdrawn (donations) is
different depending on which of withdrawDonations()
and pay() get scheduled first—this does not do any harm as
far as the functionality is concerned. In fact, if pay() front-runs
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
177
withdrawDonations(), the recipient is rewarded with a
greater amount of donation. Therefore, this specific scenario
does not correspond to a TOD attack.
1 contract Depay{
2
3
4
5
6
7
8
9 }
}
function withdrawDonations(address recipient) {
require(msg.sender == developer)
recipient.transfer(donations);
function pay(..., uint donation) {
donations += donation;
}
Fig. 18: False positive of TOD.
APPENDIX III
EXTENDED RELATED WORK
Hybrid analysis. Composition of static analysis and symbolic
execution has been applied to find bugs in programs other than
smart contracts. For example, SYS [24] uses static analysis to
find potential buggy paths in large codebases, followed by an
under-constrained symbolic execution to verify the feasibility
of those paths. WOODPECKER [27] uses rule-directed symbolic
execution to explore only relevant paths in a program. To find
double fetch bugs in OS kernels, DEADLINE [58] employs static
analysis to prune paths, and later performs symbolic execution
only on those paths containing multiple reads. Several other
tools [22], [29], [33], [39], [38] employ similar hybrid techniques
for testing, verification, and bug finding. Such hybrid analyses
have been proved effective to either prune uninteresting paths, or
selectively explore interesting parts of the program. In SAILFISH,
we use static analysis to filter out interesting contracts, find
potentially vulnerable paths, and compute value-summary to be
used in conjunction with the symbolic execution—to achieve
both scalability, and precision.
APPENDIX IV
EXTENDED DISCUSSION
Imprecise analysis components. SAILFISH performs inter-
contract analysis (Appendix V-A) when the source code of the
called contract is present in our database, and more importantly,
the external call destination d is statically known. If either of the
conditions does not hold, SAILFISH treats such an external call
as untrusted, thereby losing precision. The question of external
call destination d resolution comes only when SAILFISH is
used on contracts that have been deployed already. For cases
where d is set at run-time, our prototype relies on only contract
creation transactions. If d is set through a public setter method,
our current prototype cannot detect those cases, though it would
not be hard to extend the implementation to support this case
as well. Moreover, SAILFISH incurs false positives due to the
imprecise taint analysis engine from SLITHER. Therefore, using
an improved taint analysis will benefit SAILFISH’s precision.
Bytecode-based analysis. SAILFISH relies on control-flow
recovery,
taint analysis, and symbolic evaluation as its
fundamental building blocks. Recovering source-level rich data
structures, e.g., array, strings, mappings, etc., is not a requirement
for our analysis. Even for EVM bytecode, recovering the entry
points of public methods is relatively easier due to the “jump-
table” like structure that the SOLIDITY compiler inserts at the
beginning of the compiled bytecode. Typically, it is expected for a
decompiler platform to provide the building blocks in the form of
an API, which then could be used to port SAILFISH for bytecode
analysis. That said, the performance and precision of our analysis
are limited by the efficacy of the underlying decompiler. Thanks
to the recent research [5], [35], [4], [45] on EVM decompilers and
static analysis, significant progress has been made in this front.
Other bugs induced by hazardous access. If a contract
contains hazardous access, but no reentrancy/TOD vulnerability,
that can still lead to a class of bugs called Event Ordering (EO)
bugs [43], due to the asynchronous callbacks initiated from an
off-chain service like Oraclize. We consider such bugs as out
of scope for this work.
APPENDIX V
TECHNICAL DETAILS
A. Inter-contract analysis
To model inter-contract interaction as precisely as possible,
we perform a backward data-flow analysis starting from the
destination d of an external call (e.g., call, delegatecall, etc.),
which leads to the following three possibilities: (a) d is visible
from source, (b) d is set by the owner at run-time, e.g., in the
constructor during contract creation. In this case, we further
infer d by analyzing existing transactions, e.g., by looking into
the arguments of the contract-creating transaction, and (c) d is
attacker-controlled. While crawling, we build a database from
the contract address to its respective source. Hence, for cases
(a) and (b) where d is statically known, we incorporate the target
contract in our analysis if its source is present in our database.
If either the source is not present, or d is tainted (case (c)), we
treat such calls as untrusted, requiring no further analysis.
B. Detecting owner-only statements
In the context of smart contract, the owner refers to one
or more addresses that play certain administrative roles,
e.g., contract creation, destruction, etc. Typically, critical
functionalities of the contract can only be exercised by the owner.
We call the statements that implement such functionalities as
owner-only statements. Determining the precise set of owner-
only statements in a contract can be challenging as it requires
reasoning about complex path conditions. SAILFISH, instead,
computes a over-approximate set of owner-only statements
during the computation of base ICFG facts. This enables
SAILFISH, during the EXPLORE phase, not to consider certain
hazardous access pairs that can not be exercised by an attacker.
To start with, SAILFISH initializes the analysis by collecting the
set of storage variables (owner-only variables) O defined during
the contract creation. Then, the algorithm computes the transitive
closure of all the storage variables which have write operations
that are control-flow dependent on O. Finally, to compute the
set of owner-only statements, SAILFISH collects the statements
which have their execution dependent on O.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
178