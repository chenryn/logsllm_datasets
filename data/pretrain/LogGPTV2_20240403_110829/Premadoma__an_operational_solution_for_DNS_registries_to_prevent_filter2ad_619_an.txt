optimized scenario n · m pair-wise distances need to be calculated for each incoming
domain registration.
on a week-by-week basis, whereas the green area represents the
successful predictions. Notice, that the number of malicious domain
registrations at the .eu TLD dropped significantly in the second
half of 2018, illustrating the claim stated in section 1, that malicious
actors actively adapt their strategies.
Figure 8: The weekly prediction of blacklisted registrations.
The green area plots correct predictions, the red area are not-
predicted blacklisted domains. Note the effect the deploy-
ment had in 2018 on the number of malicious registrations.
Suspension of abusive domains. As noted in Section 6.1, Pre-
madoma is deployed as part of the registry’s security program since
January 2018. As a result of this program, 58,966 domains were sus-
pended in 2018, which corresponds to about 1.5% of the total TLD
zone.
Performance statistics. Premadoma is currently deployed at the
registry’s site on a single virtual machine with 2 Intel® Xeon®
CPUs running at 2.50GHz and 24 GB RAM. It predicts incoming
domain registrations on average in 0.52 seconds, with the 95%
percentile at 0.97 seconds, which satifies the requirements of the .eu
ccTLD. If required, the system can trivially be scaled out to perform
predictions in parallel.
The training time depends on the number of malicious regis-
trations in the training set, and can take up to 1 hour in a single-
threaded setting.
7 DISCUSSION
In this section, we discuss the impact of evasion and abuse attempts
against Premadoma, followed by an overview of potential limita-
tions of this research.
7.1 Evasion patterns
Despite the adaptive training strategy, attackers may still attempt
to circumvent the detection by exploiting specific details of the
training mechanism. In our work, we start from the observation
that malicious actors register domains in large quantities and do
so in characteristic patterns. Premadoma assumes that a daily
trained model can learn on early registrations of these domains, and
predict subsequent registrations. We have identified three evasion
patterns that try to undermine this basic assumption, and propose
appropriate mitigation strategies.
Day-to-day variance. To predict campaign registrations, Pre-
madoma requires similarities with malicious registrations from
the training set or their facilitators. Therefore, the first instances of
a completely new campaign, e.g. using new facilitators and regis-
trant details, are not detected. Malicious actors can leverage this
by devising unpredictable registration techniques every day. This
approach has already been observed in practice, e.g. campaign c_15,
as reported in [22].
However, the cost for attackers increases to achieve this level of
circumvention. Moreover, it makes campaigns less efficient and less
scalable, ultimately fulfilling the goal of the system to deter cam-
paigns through economic means. Additionally, our daily training
strategy can be easily adapted to update the model more frequently
(e.g. hourly or continuously) if necessary.
Periods of inactivity. Training sets have a limited view of 15 to 60
days prior to prediction. To avoid detection, an attacker can register
a batch of domain names on one day, and wait a sufficient amount
of time before registering their next batch.
Once more, this evasion strategy significantly decreases the effi-
ciency and scalability of campaigns. In addition, the training win-
dow of the prevention system can be enlarged if required. Moreover,
the reputation-based predictor is not entirely limited to the training
window, as it takes into account historical reputation as well.
Overshoot in registered domains. Given the impact of ground
truth incompleteness, attackers may register more domains than
needed as part of their strategy. As such, they positively influence
their reputation scores in order to remain undetected. Inherently,
this evasion tactic again increases the cost for attackers, as it re-
quires registering domains that cannot be deployed in malicious
operations. Moreover, this issue is already partially addressed by
introducing blacklist incompleteness parameters (Section 3.3).