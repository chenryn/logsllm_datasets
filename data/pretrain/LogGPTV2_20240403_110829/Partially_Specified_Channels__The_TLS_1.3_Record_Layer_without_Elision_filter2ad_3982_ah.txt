3−d(A,S) = 1(cid:3)
for every d ∈ {0, 1}. Adversary B simulates A in game G1
2. It is deﬁned by the pseudocode used to deﬁne
the game, except line 11:51 is replaced with “M, sc ← ⊥; γ ←← Demux(X)”. Algorithm B2 is deﬁned by
23
(13)
Initialization of S:
1 declare str buf , bool sync[ ]
2 sync1 ← 1
S SD on input (C, S):
3 (Y, N, α) ←← Read SD (C)
4 if sync1 and Y (cid:22) S then S ← S % Y
5 else sync1 ← 0
6 (M, sc, γ) ←← Demux SD (Y, N, α)
7 return γ
Read SD (C)
8 declare str α, int c, bool drop
9 buf ← buf (cid:107) C; (cid:104)c, (cid:105) ← SD((cid:104)parse, Re.buf (cid:105))
10 (cid:104)drop, α(cid:105) ←← SD((cid:104)read, drop, buf (cid:105))
11 Y ← buf [:c]; buf ← buf % Y
12 if Y = (cid:5) or drop then return ((cid:5),⊥, α)
13 return (Y,⊥, α)
Demux SD (Y, N, α)
14 declare str γ, int x, a
15 γ ←← SD((cid:104)demux, ad len, Y, α(cid:105))
16 if (Y = (cid:5) and γ (cid:54)= (cid:5)) or ¬sync1 then
return (⊥,⊥, γ)
18 else if Y (cid:54)= (cid:5) then
(cid:104) , a(cid:105) ← SD((cid:104)parse, Y (cid:105))
x ← λ−1(|Y | − a)
if x ≤ 0 or ¬sync1 then
17
19
sync1 ← 0
γ ←← SD((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
20
21
22
23
24
25 M, sc ← ⊥; γ ←← T SD (x)
26 return (M, sc, γ)
Figure 10: SIM-STAT simulator S for proof of Theorem 4.
Now consider the revisions in game Gb
forwarding its input to A2: on input of I, it executes O ←← A2(I, var Env ) and returns O. When A1 halts
and outputs b(cid:48), algorithm B1 halts and outputs b(cid:48). Then B runs in time t + O(q1 + q2) and makes at most q2
queries.
4. The ﬁrst change is to replace sync2 with sync1 on line 11:56 and
11:61. The second is to change the condition on line 11:60 so that the branch is taken if x  0 and T [N, A, Y (cid:48)] (cid:54)= (cid:5) then
X ← T [N, A, Y (cid:48)]
sync2 ← 0; γ ←← SD((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
else
31
32
33
34
35
36
37 (M, sc, γ) ←← M.Demux SD (X, var De.dx )
38 return (M, sc, γ)
Demux SD (Y, N, α, var De)
Gb
2 Gb
3
39 declare str X, γ, int x, a
40 γ ←← SD((cid:104)demux, ready,|Y |, α(cid:105))
41 if (Y = (cid:5) and γ (cid:54)= (cid:5)) or ¬sync2 then
return (⊥,⊥, γ)
43 else if Y (cid:54)= (cid:5) then (cid:104) , a(cid:105) ← SD((cid:104)parse, Y (cid:105))
x ← λ−1(|Y | − a); A ← Y [:a]; Y (cid:48) ← Y % A
if x ≥ 0 and T [N, A, Y (cid:48)] (cid:54)= (cid:5) then
42
44
45
X ← T [N, A, Y (cid:48)]
else
if x ≤ 0 or T [N, A, Y (cid:48)] = (cid:5) then
sync2 ← 0; γ ←← SD((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
51 (M, sc, γ) ←← M.Demux SD (X, var De.dx )
52 M, sc ← ⊥; γ ←← T SD (x)
53 return (M, sc, γ)
46
47
48
49
50
Demux SD (Y, N, α, var De)
54 declare str γ, int x, a
55 γ ←← SD((cid:104)demux, ready,|Y |, α(cid:105))
56 if (Y = (cid:5) and γ (cid:54)= (cid:5)) or ¬sync2 ¬sync1 then
58 else if Y (cid:54)= (cid:5) then (cid:104) , a(cid:105) ← SD((cid:104)parse, Y (cid:105))
return (⊥,⊥, γ)
Gb
57
3 Gb
4
x ← λ−1(|Y | − a) ; A ← Y [:a]; Y (cid:48) ← Y % A
if x ≤ 0 or T [N, A, Y (cid:48)] = (cid:5) ¬sync1 then
59
60
61
62
63
sync2 ← 0 sync1 ← 0
γ ←← SD((cid:104)demux, invalid ctxt(cid:105))
return (⊥,⊥, γ)
64 M, sc ← ⊥; γ ←← T SD (x)
65 return (M, sc, γ)
Figure 11: Games for proof of Theorem 5.
25
We emphasize, however, that PRIV-SR security says nothing about whether a particular implementation
of the record layer is operationally correct. (For example, whether CH properly handles streams depends on
how M encodes the content type.) All it says is that whether the record layer is correct is irrelevant for
PRIV-SR security. But in the absence of a proof of correctness, attacks in the INT-PS sense are possible,