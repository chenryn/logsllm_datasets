3. T ˆBC2 has the same set of messages as T ˆAC1 ;
4. T ˆBC2 and T ˆAC1 agree on each message’s origin.
At the end of the meeting (or at predeﬁned intermediate
stages) honest users attempt to reach consensus with each
other about the current transcript. Our consensus deﬁni-
tion allows the possibility that Alice reaches a consensus
with Bob but Bob does not reach consensus with Alice: for
example if either Bob or Alice goes oﬄine due to network
6Either static private keys or C1-related information.
7That is, user ˆA did take part in C1, and in particular ˆA ∈ P.
8By admitting this transcript ˆB admits taking part in C2.
failure before protocol completion. We also allow the appli-
cation to interpret “same set of messages” appropriately for
its setting. For instance, the importance of message delivery
order may vary by application.
The goal of the consensus adversary T is to get an honest
user Alice to reach consensus with another honest user Bob
on a transcript T ˆAC , while at least one consensus condition
is violated; that is, T wins if (honest) Alice believes that
(honest) Bob has a transcript matching hers (in the above
sense), but in fact Bob does not have such a transcript.
Note that while Alice and Bob are honest users there is no
restriction on the remaining chat members — they may even
be T -controlled, which is an improvement over KleeQ [18]
where all parties are assumed honest. Resilience against T
implies that users cannot be forced to have diﬀerent views
of exchanged messages and no messages can be injected on
behalf of honest users without being detected.
Our consensus deﬁnition captures both the standard no-
tions of entity and origin authentication and the adversary’s
abilities to make conﬂicting statements to diﬀerent partic-
ipants in the same chat session (as described in §2.5.1) as
well as drop, duplicate, reorder, and replay messages from
other chat sessions.
3.2.3 Privacy adversary
The goal of the privacy adversary M is to create a tran-
script T ˆAC1 to convince the judge J that ˆA took part in C1
and/or read and/or authored messages in T ˆAC1 . The only
restriction is that J is not directly involved in C1. This is
perhaps the hardest adversary to guard against as M has
few restrictions: M can interact in advance with J before
C1 is established and, by taking part in C1, can obtain con-
sensus with respect to ˆA. Furthermore, the judge can force
ˆA as well as all other participants to reveal their long-term
secrets. If under such a powerful adversary and judge combi-
nation, Alice can still plausibly deny T ˆAC1 , then many of her
privacy concerns can be assuaged. Our privacy requirement
is stronger than the settings presented in [11, 12] because J
must not be able to distinguish between Alice’s transcripts
and forgeries even if J gets Alice’s long-term secrets.
3.3 Local views
We complete the section by saying that from an honest
user’s perspective it is unclear a priori whether an honestly
behaving user has no malicious intent. Conversely, if a user
observes deviation from the protocol the user cannot always
distinguish a true malicious player from network instability.
(Certain deviations, such as a participant making conﬂicting
statements, can be identiﬁed, however.)
4. SOLUTION DESIGN
The mpOTR protocol follows a straightforward construc-
tion. To ensure conﬁdentiality among the participants P1 of
a chatroom C1 the participants derive a shared encryption
key gk1. Messages sent to the chatroom are encrypted un-
der gk1 to ensure that only members of P1 can read them.
To provide message authentication, each participant ˆA ∈ P1
generates an ephemeral signature keypair (E ˆA,1, e ˆA,1) to be
used only in the current session. Each message sent by ˆA will
be signed under ˆA’s ephemeral signing key for the current
session e ˆA,1. Participants exchange ephemeral public keys
for the current session E ˆX,1 ( ˆX ∈ P1) amongst themselves
362Algorithm 1: Initiate(Pi) — initiate a chatroom Ci
among the participants Pi in the context of party ˆX.
On successful completion, all participants hold a shared
encryption key, ephemeral public signature keys for all
other participants, and have authenticated all other par-
ticipants and protocol parameters.
Input: chat participants Pi
Output: an encryption key gki, session id sidi,
ephemeral public signature keys of all other
participants {E ˆY ,i | ˆY ∈ Pi}
// Initialize variables
sidi ← ⊥, Sent ← ∅, Received ← ∅;
consensus ˆY ← false for all ˆY ∈ Pi;
sidi ← SessionID(Pi);
// Exchange ephemeral signature keys
(result, R) $← DSKE(sidi,Pi);
if result = accept then
foreach (E, ˆY ) ∈ R do E ˆY ,i ← E;
else
abort session initiation;
// Agree on shared encryption key
$← GKA(Pi, R);
gki
if gki = ⊥ then abort session initiation;
Attest();
in a deniable fashion. At the end of the session, each partic-
ipant publishes their ephemeral private key e ˆX,1 ( ˆX ∈ P1)
for the current session to allow third parties to modify and
extend the chatroom transcript.
The mpOTR protocol lifecycle consists of three phases:
setup, communication, and shutdown. In the setup phase
all chatroom participants negotiate any protocol parame-
ters, derive a shared key, generate and exchange ephemeral
signing keys, and explicitly authenticate all protocol param-
eters including the set of chatroom members and the bind-
ing between participants and their ephemeral signature keys.
During the communication phase, participants can send con-
ﬁdential, authenticated, deniable messages to the chatroom.
To end a chatroom session, the protocol enters the shutdown
phase. In the shutdown phase, each participant determines
if he has reached consensus with each other participant, after
which participants publish their ephemeral private keys.
4.1 Network communication
Our constructions assume the existence of the following
network primitives, typically provided by application layer
protocols, such as IM or IRC. To free our constructions from
undue dependence on the underlying network layer, we limit
ourselves to the following primitives:
• Broadcast(M ) — sends message M over the broad-
cast channel where it can be Receive()’ed by all other
participants. In the absence of a broadcast medium,
like an IRC channel, Broadcast() can be simulated by
sending M directly to each other participant in P.
• Send( ˆA, M ) — sends message M addressed explicitly
to ˆA. The network may send M to ˆA directly (point-
to-point) or via broadcast (during broadcast, all the
honest participants other than ˆA ignore M ).
Algorithm 2: SessionID(Pi) — invoked in the con-
text of party ˆX, the algorithm returns a unique (with
high probability) chatroom identiﬁer for the set Pi upon
successful completion.
Input: chat participants Pi
Output: session id sidi
x ˆX
Broadcast(x ˆX );
Outstanding ← Pi \ { ˆX};
while Outstanding (cid:54)= ∅ do
$← {0, 1}k;
( ˆY , x) ← Receive();
if ˆY ∈ Outstanding then
x ˆY ← x;
Outstanding ← Outstanding \ { ˆY };
return H(Pi, x ˆY1 , x ˆY2 , . . .) for all ˆYj ∈ Pi ordered
lexically;
• Receive() → ( ˆA, M ) — returns any waiting message
M received by the party that invokes Receive() along
with M ’s alleged author ˆA.
• Receive( ˆA) → M — waits until a message is received
from ˆA and returns that message (M ).
To simplify our protocols, we make the following assump-
tions. Broadcast() and Send() are non-blocking. If message
M from party ˆA arrives at ˆB before ˆB executes a Receive()
call, M is buﬀered at ˆB and will be returned upon some sub-
sequent invocation of Receive() by ˆB. Receive() calls block
until a message is available. If the current instance of some
party ˆA has assigned a value to its session id (sidi) variable,
Receive() will only return messages M that were sent from
an instance of some party ˆB that has set its session id to
the same value (i.e. Broadcast(), Send(), and Receive()
multiplex on sidi).
Recall that, with all network access, the adversary has
control over message delivery and may modify or deliver
messages at will. Thus, when Receive() invoked by ˆB re-
turns ( ˆA, M ), ˆA may have invoked either Broadcast(M ) or
Send( ˆB, M ), or the adversary may have sent M under the
identity of ˆA.
In the following discussion, we abuse notation in that a
single value M may be replaced by a tuple (x1, x2, . . .). This
indicates that the values x1, x2, . . . have been encoded into
a single message using an unambiguous encoding scheme.
Upon receiving such a message, if parsing fails, the protocol
assigns the distinguished value ⊥ to each of x1, x2, . . ..
4.2 Setup phase
The setup phase is responsible for deriving the shared en-
cryption key gki for the chatroom Ci, performing entity au-
thentication, facilitating exchange of ephemeral signing keys
E ˆX,i ( ˆX ∈ Pi), and ensuring forward secrecy and deniabil-
ity. In the following, we assume that the participants have
negotiated the participant set Pi for the chatroom instance
Ci via an unspeciﬁed, unauthenticated means. Each par-
ticipant in the protocol executes the Initiate(Pi) algorithm
with their view of Pi. The Initiate() procedure will only
succeed if every other party in Pi completes its portion of
the protocol correctly and has the same view of Pi.
363First, the participants calculate a globally unique session
id sidi for the current session. Each participant ˆX chooses
a random value x ˆX of suitable length k and broadcasts it
to the other participants. Each participant calculates sidi
by hashing the participant set Pi with the random contribu-
tions of all other participants. Under the assumption that
H(·) is a collision-resistant hash function, sidi is globally
unique with high probability as long as at least one partic-
ipant behaves honestly.
If the adversary has manipulated
the random contributions (x), it will be detected during the
Attest() algorithm executed at the end of Initiate() when
sidi and any other unauthenticated parameters paramsi are
authenticated.
ˆX then enters into a deniable signature key exchange pro-
tocol with the other participants of Pi (DSKE(sidi,Pi)) to
generate an ephemeral signature key pair (E ˆX,i, e ˆX,i) and
to exchange ephemeral public keys with the other parties in
Pi. ˆX will use e ˆX,i to sign messages sent to the chatroom
Ci. ˆX generates a new signing key pair in each session so
that there is no transferable proof that he has signed any
messages in the chat transcript. However, the other partici-
pants must know that E ˆX,i will be ˆX’s public signature key
for this session.
Next, Initiate() invokes a group key agreement protocol
that uses the set of participants Pi and their ephemeral sig-
nature keys to derive a fresh encryption key gki shared by
all members of Pi. If any stage of the group key agreement
fails, GKA() returns ⊥ and Initiate() aborts.
Finally, all participants execute the Attest() algorithm
to ensure that they agree on all lower-level protocol pa-
rameters that they may have negotiated before invoking
Initiate(). Each participant takes a hash over all of these
values and the session identiﬁer, and uses the AuthSend()
and AuthReceive() procedures (see §4.3) to transmit the
hash value to all the other participants in a conﬁdential, au-
thenticated manner. Each participant then ensures that the
value sent by all other participants matches their own. Upon
successfully completing Attest(), the participants have fully
initialized the chat session and can enter the communication
phase.
When users wish to join or leave a chatroom, the proto-
col shuts down the current session and then calls Initiate()
with the new set of participants to initialize a new chat ses-
sion. We handle joins and leaves in this manner because we
currently determine transcript consensus during the shut-
down phase and must derive a new encryption key before
a membership change can take place. Client software can
shut down and initialize a new session behind the scenes so
that users need only decide whether or not they accept the
proposed membership change.
4.2.1 Deniable Signature Key Exchange (DSKE)
In our construction, we use a sub-protocol that we call
Deniable Signature Key Exchange. Deniable Signature Key
Exchange allows the participants in a session to exchange
ephemeral signature keys with each other in a deniable fash-
ion. A participant will use his ephemeral signature key to
sign messages during one session. Because it is ephemeral
(used only in one session), the private key can be published
at the end of the session to permit transcript modiﬁcation.
Because the key exchange protocol is deniable, there is no
transferable proof that any party has committed to use any
given key.
Algorithm 3: Attest() — authenticate (previously)
unauthenticated protocol parameters for the current ses-
sion in the context of party ˆX.
Input: session id sidi, chat participant set Pi,
negotiated protocol parameters paramsi
Output: aborts protocol initiation on failure
M ← H(sidi, paramsi);
AuthSend(M );
Outstanding ← Pi \ { ˆX};
while Outstanding (cid:54)= ∅ do
( ˆY , MY ) ← AuthReceive();
if MY (cid:54)= M then
else
abort the session;