作者：[jiayy@IceSword Lab](http://www.iceswordlab.com/2017/08/07/qualcomm-crypto-engine-vulnerabilities-exploits/)
#### 前言
CVE-2016-3935 和 CVE-2016-6738 是我们发现的高通加解密引擎（Qualcomm crypto
engine）的两个提权漏洞，分别在2016年[10月](https://source.android.com/security/bulletin/2016-10-01)和[11月](https://source.android.com/security/bulletin/2016-11-01)的谷歌
android 漏洞榜被公开致谢，同时高通也在2016年[10月](https://www.codeaurora.org/failed-integer-overflow-check-leads-heap-overflow-driver-devqce-cve-2016-3901-cve-2016-3935)和[11月](https://www.codeaurora.org/user-controlled-arbitrary-kernel-address-write-qcedev-driver-cve-2016-6738)的漏洞公告里进行了介绍和公开致谢。这两个漏洞报告给谷歌的时候都提交了exploit
并且被采纳，这篇文章介绍一下这两个漏洞的成因和利用。
#### 背景知识
高通芯片提供了硬件加解密功能，并提供驱动给内核态和用户态程序提供高速加解密服务，我们在这里收获了多个漏洞，主要有3个驱动
    - qcrypto driver:  供内核态程序使用的加解密接口 
    - qcedev driver: 供用户态程序使用的加解密接口
    - qce driver:  与加解密芯片交互，提供加解密驱动底层接口
    Documentation/crypto/msm/qce.txt
      Linux kernel
      (ex:IPSec)|
                                                  |
                                                  | *qce    Qualcomm
                                                  | driver        ADM driver  ADM HW
                                              +-->|                 |               |
                                              |                     |               |
                                              |                     |               |
                                              |                     |               |
       Linux kernel                           |                     |               |
       misc device  addr_limit` 大的属于内核态地址，比它小的属于用户态地址
**2) linux kernel 用户态和内核态之间数据怎么传输？**
不可以直接赋值或拷贝，需要使用规定的接口进行数据拷贝，主要是4个接口：
`copy_from_user/copy_to_user/get_user/put_user`
这4个接口会对目标地址进行合法性校验，比如：
`copy_to_user = access_ok + __copy_to_user` // __copy_to_user 可以理解为是 memcpy
下面看漏洞代码
    file: drivers/crypto/msm/qcedev.c
    long qcedev_ioctl(struct file *file, unsigned cmd, unsigned long arg)
    {
    ...
            switch (cmd) {
            case QCEDEV_IOCTL_ENC_REQ:
            case QCEDEV_IOCTL_DEC_REQ:
                    if (!access_ok(VERIFY_WRITE, (void __user *)arg,
                                    sizeof(struct qcedev_cipher_op_req)))
                            return -EFAULT;
                    if (__copy_from_user(&qcedev_areq.cipher_op_req,
                                    (void __user *)arg,
                                    sizeof(struct qcedev_cipher_op_req)))
                            return -EFAULT;
                    qcedev_areq.op_type = QCEDEV_CRYPTO_OPER_CIPHER;
                    if (qcedev_check_cipher_params(&qcedev_areq.cipher_op_req,
                                    podev))
                            return -EINVAL;
                    err = qcedev_vbuf_ablk_cipher(&qcedev_areq, handle);
                    if (err)
                            return err;
                    if (__copy_to_user((void __user *)arg,
                                            &qcedev_areq.cipher_op_req,
                                            sizeof(struct qcedev_cipher_op_req)))
                                    return -EFAULT;
                    break;
    ...
            }
            return 0;
    err:
            debugfs_remove_recursive(_debug_dent);
            return rc;
    }
当用户态通过 ioctl 函数进入 qcedev 驱动后，如果 command 是 `QCEDEV_IOCTL_ENC_REQ`（加密）或者
`QCEDEV_IOCTL_DEC_REQ`（解密），最后都会调用函数 `qcedev_vbuf_ablk_cipher` 进行处理。
    file: drivers/crypto/msm/qcedev.c
    static int qcedev_vbuf_ablk_cipher(struct qcedev_async_req *areq,
                                                    struct qcedev_handle *handle)
    {
    ...
            struct  qcedev_cipher_op_req *creq = &areq->cipher_op_req;
            /* Verify Source Address's */
            for (i = 0; i cipher_op_req.entries; i++)
                    if (!access_ok(VERIFY_READ,
                            (void __user *)areq->cipher_op_req.vbuf.src[i].vaddr,
                                            areq->cipher_op_req.vbuf.src[i].len))
                            return -EFAULT;
            /* Verify Destination Address's */
            if (creq->in_place_op != 1) {
                    for (i = 0, total = 0; i cipher_op_req.vbuf.dst[i].vaddr != 0) &&
                                                    (total data_len)) {
                                    if (!access_ok(VERIFY_WRITE,
                                            (void __user *)creq->vbuf.dst[i].vaddr,
                                                    creq->vbuf.dst[i].len)) {
                                            pr_err("%s:DST WR_VERIFY err %d=0x%lx\n",
                                                    __func__, i, (uintptr_t)
                                                    creq->vbuf.dst[i].vaddr);
                                            return -EFAULT;
                                    }
                                    total += creq->vbuf.dst[i].len;
                            }
                    }
            } else  {
                    for (i = 0, total = 0; i entries; i++) {
                            if (total data_len) {
                                    if (!access_ok(VERIFY_WRITE,
                                            (void __user *)creq->vbuf.src[i].vaddr,
                                                    creq->vbuf.src[i].len)) {
                                            pr_err("%s:SRC WR_VERIFY err %d=0x%lx\n",
                                                    __func__, i, (uintptr_t)
                                                    creq->vbuf.src[i].vaddr);
                                            return -EFAULT;
                                    }
                                    total += creq->vbuf.src[i].len;
                            }
                    }
    }
            total = 0;
    ...
            if (areq->cipher_op_req.data_len > max_data_xfer) {
    ...
            } else
                    err = qcedev_vbuf_ablk_cipher_max_xfer(areq, &di, handle,
    ...                                                             k_align_src);
            return err;
    }
在 `qcedev_vbuf_ablk_cipher` 函数里，首先对 `creq->vbuf.src` 数组里的地址进行了校验，接下去它需要校验
`creq->vbuf.dst` 数组里的地址
这时候我们发现，当变量 `creq->in_place_op` 的值不等于 1 时，它才会校验 `creq->vbuf.dst` 数组里的地址，否则目标地址
`creq->vbuf.dst[i].vaddr` 将不会被校验
这里的 `creq->in_place_op` 是一个用户层可以控制的值，如果后续代码对这个值没有要求，那么这里就可以通过让
`creq->in_place_op = 1` 来绕过对 `creq->vbuf.dst[i].vaddr` 的校验，这是一个疑似漏洞
    file: drivers/crypto/msm/qcedev.c
    static int qcedev_vbuf_ablk_cipher_max_xfer(struct qcedev_async_req *areq,
                                    int *di, struct qcedev_handle *handle,
                                    uint8_t *k_align_src)
    {
    ...
            uint8_t *k_align_dst = k_align_src;
            struct  qcedev_cipher_op_req *creq = &areq->cipher_op_req;
            if (areq->cipher_op_req.mode == QCEDEV_AES_MODE_CTR)
                    byteoffset = areq->cipher_op_req.byteoffset;
            user_src = (void __user *)areq->cipher_op_req.vbuf.src[0].vaddr;
            if (user_src && __copy_from_user((k_align_src + byteoffset),
                                    (void __user *)user_src,
                                    areq->cipher_op_req.vbuf.src[0].len))
                    return -EFAULT;
            k_align_src += byteoffset + areq->cipher_op_req.vbuf.src[0].len;
            for (i = 1; i cipher_op_req.entries; i++) {
                    user_src =
                            (void __user *)areq->cipher_op_req.vbuf.src[i].vaddr;
                    if (user_src && __copy_from_user(k_align_src,
                                            (void __user *)user_src,
                                            areq->cipher_op_req.vbuf.src[i].len)) {
                            return -EFAULT;
                    }
                    k_align_src += areq->cipher_op_req.vbuf.src[i].len;
    }
    ...
            while (creq->data_len > 0) {
                    if (creq->vbuf.dst[dst_i].len data_len) {
                            if (err == 0 && __copy_to_user(
                                    (void __user *)creq->vbuf.dst[dst_i].vaddr,
                                            (k_align_dst + byteoffset),
                                            creq->vbuf.dst[dst_i].len))
                                            return -EFAULT;