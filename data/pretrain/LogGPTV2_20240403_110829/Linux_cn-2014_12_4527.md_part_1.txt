---
author: Pungki Arianto
category: 技术
comments_data:
- date: '2014-12-25 15:03:01'
  message: Repost
  postip: 140.237.37.124
  username: 微博评论
- date: '2014-12-25 15:03:01'
  message: 有用~
  postip: 140.237.37.124
  username: 微博评论
- date: '2014-12-25 17:33:02'
  message: MA
  postip: 180.180.115.170
  username: 微博评论
- date: '2014-12-25 19:33:01'
  message: //@亚瑟小马甲:转发微博
  postip: 111.17.193.67
  username: 微博评论
- date: '2014-12-27 13:33:01'
  message: '@我的印象笔记'
  postip: 42.120.161.3
  username: 微博评论
count:
  commentnum: 5
  favtimes: 9
  likes: 0
  sharetimes: 8
  viewnum: 24822
date: '2014-12-25 14:33:03'
editorchoice: false
excerpt: Linux系统管理员应该很熟悉CLI环境，因为通常在Linux服务器中是不安装GUI的。SSH可能是Linux系统管理员通过远程方式安全管理服务器的最流行协议。在SSH命令中内置了一种叫SCP的命令，用来在服务器之间安全传输文件。  以下命令可以解读为：用username
  account拷贝 source file name到destination host上的destination folder里。 SCP命令的基本语法 scp
  source_file_name username@destination_host:destination_folder  SCP命令有很多可以使用的参数，这里指的是每次都会用到的参数。
  用-v参数来提供SCP进程的详细信息 不带参数的基本SCP
fromurl: http://www.tecmint.com/scp-commands-examples/
id: 4527
islctt: true
largepic: /data/attachment/album/201412/25/143307lejo9fkp7vop6zjk.png
permalink: /article-4527-1.html
pic: /data/attachment/album/201412/25/143307lejo9fkp7vop6zjk.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: Linux系统管理员应该很熟悉CLI环境，因为通常在Linux服务器中是不安装GUI的。SSH可能是Linux系统管理员通过远程方式安全管理服务器的最流行协议。在SSH命令中内置了一种叫SCP的命令，用来在服务器之间安全传输文件。  以下命令可以解读为：用username
  account拷贝 source file name到destination host上的destination folder里。 SCP命令的基本语法 scp
  source_file_name username@destination_host:destination_folder  SCP命令有很多可以使用的参数，这里指的是每次都会用到的参数。
  用-v参数来提供SCP进程的详细信息 不带参数的基本SCP
tags:
- scp
- ssh
- ftp
thumb: false
title: 十个 SCP 传输命令例子
titlepic: false
translator: ZTinoZ
updated: '2014-12-25 14:33:03'
---
Linux系统管理员应该很熟悉**CLI**环境，因为通常在Linux服务器中是不安装**GUI**的。**SSH**可能是Linux系统管理员通过远程方式安全管理服务器的最流行协议。在**SSH**命令中内置了一种叫**SCP**的命令，用来在服务器之间安全传输文件。
![](/data/attachment/album/201412/25/143307lejo9fkp7vop6zjk.png)
以下命令可以解读为：用“**username account**”“**拷贝 source file name**”到“**destination host**”上的“**destination folder**”里。
#### SCP命令的基本语法
```
scp source_file_name username@destination_host:destination_folder
```
**SCP**命令有很多可以使用的参数，这里指的是每次都会用到的参数。
### 用-v参数来提供SCP进程的详细信息
不带参数的基本**SCP**命令会在后台拷贝文件，除非操作完成或者有错误出现，否则用户在界面上是看不到任何提示信息的。你可以用“**-v**”参数来在屏幕上打印出调试信息，这能帮助你调试连接、认证和配置的一些问题。
```
pungki@mint ~/Documents $ scp -v Label.pdf mrarianto@202.x.x.x:.
```
#### 部分输出
```
Executing: program /usr/bin/ssh host 202.x.x.x, user mrarianto, command scp -v -t .
OpenSSH_6.0p1 Debian-3, OpenSSL 1.0.1c 10 May 2012
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 202.x.x.x [202.x.x.x] port 22.
debug1: Connection established.
debug1: Host '202.x.x.x' is known and matches the RSA host key.
debug1: Found key in /home/pungki/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: Next authentication method: password
mrarianto@202.x.x.x's password:
debug1: Authentication succeeded (password).
Authenticated to 202.x.x.x ([202.x.x.x]:22).
Sending file modes: C0770 3760348 Label.pdf
Sink: C0770 3760348 Label.pdf
Label.pdf 100% 3672KB 136.0KB/s 00:27
Transferred: sent 3766304, received 3000 bytes, in 65.2 seconds
Bytes per second: sent 57766.4, received 46.0
debug1: Exit status 0
```
### 从源文件获取修改时间、访问时间和模式
“**-p**”参数会帮到把预计的时间和连接速度会显示在屏幕上。
```
pungki@mint ~/Documents $ scp -p Label.pdf mrarianto@202.x.x.x:.
```
#### 部分输出
```
mrarianto@202.x.x.x's password:
Label.pdf 100% 3672KB 126.6KB/s 00:29
```
### 用-C参数来让文件传输更快
有一个参数能让传输文件更快，就是“**-C**”参数，它的作用是不停压缩所传输的文件。它特别之处在于压缩是在网络传输中进行，当文件传到目标服务器时，它会变回压缩之前的原始大小。
来看看这些命令，我们使用一个**93 Mb**的单一文件来做例子。
```
pungki@mint ~/Documents $ scp -pv messages.log mrarianto@202.x.x.x:.
```
#### 部分输出
```
Executing: program /usr/bin/ssh host 202.x.x.x, user mrarianto, command scp -v -p -t .
OpenSSH_6.0p1 Debian-3, OpenSSL 1.0.1c 10 May 2012
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 202.x.x.x [202.x.x.x] port 22.
debug1: Connection established.
debug1: identity file /home/pungki/.ssh/id_rsa type -1
debug1: Found key in /home/pungki/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: Trying private key: /home/pungki/.ssh/id_rsa
debug1: Next authentication method: password
mrarianto@202.x.x.x's password:
debug1: Authentication succeeded (password).
Authenticated to 202.x.x.x ([202.x.x.x]:22).
debug1: Sending command: scp -v -p -t .
File mtime 1323853868 atime 1380425711
Sending file timestamps: T1323853868 0 1380425711 0
messages.log 100% 93MB 58.6KB/s 27:05
Transferred: sent 97614832, received 25976 bytes, in 1661.3 seconds
Bytes per second: sent 58758.4, received 15.6
debug1: Exit status 0
```
不用“**-C**”参数来拷贝文件，结果用了**1661.3**秒，你可以比较下用了“**-C**”参数之后的结果。
```
pungki@mint ~/Documents $ scp -Cpv messages.log mrarianto@202.x.x.x:.
```
#### 部分输出
```
Executing: program /usr/bin/ssh host 202.x.x.x, user mrarianto, command scp -v -p -t .
OpenSSH_6.0p1 Debian-3, OpenSSL 1.0.1c 10 May 2012
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 202.x.x.x [202.x.x.x] port 22.
debug1: Connection established.
debug1: identity file /home/pungki/.ssh/id_rsa type -1
debug1: Host '202.x.x.x' is known and matches the RSA host key.
debug1: Found key in /home/pungki/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: Next authentication method: publickey