The current implementation of GLTFExporter is caching textures as it processes
the scene but other parts of three js (e.g. TextureLoader and ImageLoader)
cache the image.
This creates problems when, for instance, you load various model files (via
FBXLoader etc) that have references to the same image files and you try to
export the resulting scene via GLTFExporter with embedImages = true and binary
= true. Essentially, it packs duplicate image data into the glb, which bloats
it considerably.
The problem seems to centre around the fact that TextureLoader creates a new
texture (with a potentially cached Image) every time you call load() but
GLTFExporter is basing it's image caching on the texture when you try to
process the scene. You end up with a list of textures all referring to the
same image but GLTFExporter will go through each texture and write out the
corresponding cached image.
NOTE: I could solve this by hacking in something to patch/reformat all the
textures in my scene to work with GLTFExporter but I think handling this in
the exporter would be better and more user-friendly.
##### Three.js version
  * Dev
  * [x ] r92
  * ...
##### Browser
  * All of them
  * Chrome
  * Firefox
  * Internet Explorer
##### OS
  * All of them
  * Windows
  * macOS
  * Linux
  * Android
  * iOS
##### Hardware Requirements (graphics card, VR Device, ...)