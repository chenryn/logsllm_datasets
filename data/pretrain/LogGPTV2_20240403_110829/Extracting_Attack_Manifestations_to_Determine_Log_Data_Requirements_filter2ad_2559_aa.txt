title:Extracting Attack Manifestations to Determine Log Data Requirements
for Intrusion Detection
author:Emilie Lundin Barse and
Erland Jonsson
Extracting attack manifestations to determine log data requirements for
intrusion detection
Emilie Lundin Barse and Erland Jonsson
Department of Computer Engineering
Chalmers University of Technology
412 96 G¨oteborg, Sweden
{emilie, erland.jonsson}@ce.chalmers.se
Abstract
Log data adapted for intrusion detection is a little ex-
plored research issue despite its importance for successful
and efﬁcient detection of attacks and intrusions. This paper
presents a starting point in the search for suitable log data
by providing a framework for determining exactly which log
data that can reveal a speciﬁc attack, i.e. the attack manifes-
tations. An attack manifestation consists of the log entries
added, changed or removed by the attack compared to nor-
mal behaviour. We demonstrate the use of the framework
by studying attacks in different types of log data. This work
provides a foundation for a fully automated attack analysis.
It also provides some pointers for how to deﬁne a collection
of log elements that are both sufﬁcient and necessary for
detection of a speciﬁc group of attacks. We believe that this
will lead to a log data source that is especially adapted for
intrusion detection purposes.
Keywords:
Intrusion detection, attack manifestations,
log data, data collection
1
Introduction
Intrusion detection is an increasingly vital part of gen-
eral computer security, as computer systems today must
cope with a wide variety of threats. A key issue is thus the
presence of suitable log data that intrusion detection sys-
tems (IDS) can analyse for an accurate determination of the
current system state. Unfortunately, the common adage of
“garbage in, garbage out” also applies for intrusion detec-
tion. We need high-quality log data to provide high qual-
ity alerts, and to avoid false positives and false negatives.
For that reason, it may come as a surprise to the uninitiated
that even after 20 years since the birth of IDS, it is still not
known what kind of log data that are needed to detect dif-
ferent types of intrusions and attacks. Furthermore, there
are few guidelines to how such data should be collected and
evaluated as well as how to systematically extract useful at-
tack signatures from log data. Most logging mechanisms
that exist today have not been created by computer security
experts, and as a result they are not especially suitable for
intrusion detection. As no better sources exist, they are still
used for intrusion detection, and possibly compounding to
the often-quoted failures of IDSs.
In this paper, we explore how logging can be ameliorated
by investigating what kind of log data are needed. Our ap-
proach is empirical, and we start by considering the infor-
mation found in current logging systems by developing a
framework for determining log data requirements for dif-
ferent attacks. One central part of this framework is the
extraction of attack manifestations. An attack manifesta-
tion is the log entries added, changed, or removed by an
attack compared to corresponding normal behaviour. From
these manifestations, we can choose combinations of log
elements, i.e.
log indicators, that can be used for detec-
tion and that could be part of a new intrusion detection log
source. We demonstrate the use of the framework by study-
ing different attacks in three types of log data. While the
different steps of the framework should be further investi-
gated and automated, this work provides a starting point in
the development of future logging mechanisms.
The organisation of this paper is as follows. In Section 2,
we discuss logging mechanisms used today, and related
work.
In Section 3, we describe the framework used for
determining log data requirements of attacks. The analysis
of three different attacks using the framework is presented
in Section 4, and our ﬁndings are discussed in Section 5.
Finally, we present our conclusions in Section 6.
2 Background
Today, the most popular log source used for intrusion de-
tection is network trafﬁc. The main reason for the extensive
use of network trafﬁc is that it is easily available and stan-
dardised. On the other hand, the network trafﬁc does not
1
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
catch all events in the system. Also, it is difﬁcult to keep up
with the amount of data and it requires a great deal of com-
puting power to parse the data part of the network packages
in networks with much activity. Network trafﬁc is used by
e.g. Snort [Roe99].
Another log source is system call logging, which pro-
vides a more complete picture of the events in a single sys-
tem but commonly adversely affects the performance of the
target system. eXpert-BSM [LP01], to name an example,
uses this type of log source.
The third type of logging used is application-based log-
ging, in which the applications are instrumented to pro-
vide the log information. We count syslog to this cate-
gory, as well as other speciﬁc application-integrated log-
ging, e.g. in web servers and ﬁrewalls. Application-based
logging can provide valuable information but both the syn-
tax and semantics varies with the application in question,
thus making this logging source difﬁcult to use. For ex-
ample, Swatch [HA93] can be instrumented for intrusion
detection with syslog, and Almgren et al. [ADD00] have
successfully used web server logs for application-based in-
trusion detection. Also, logging of user shell commands
are counted to this category and has been used with success
in [Max03].
Some IDSs use several log sources as input, though very
few actually combine the information from the different
sources to gain synergy effects in detection of single attacks.
However, Vigna et al. [VRKK03] have created improved
attack scenarios by including information from both web
server logs, network trafﬁc, and operating system events.
Keeping these log sources in mind, we now turn to what
kind of information we would like to be able to extract from
the log ﬁles. When faced with a possible attack, we might
pose any of the following questions.
Did someone attempt to do something malicious?
Did the malicious activity succeed? When did it
happen? Who did it? From where was it done?
What effect did the attack have on the system? As-
suming a successful attack, what did then the at-
tacker change in the system?
Even if the syntax and semantics of different log sources
varies, many provide a few similar ﬁelds that we can use to
partly answer these questions. The date & time stamp can
be used for determining when something happened, the user
name & id can in the best case identify the attacker directly
or at least show the subverted account, and the location/host
name/IP is useful for determining the origin of the attack.1
Apart from their direct usefulness, these ﬁelds play a vital
role when correlating entries between log sources.
1Depending on the attack and the sophistication of the attacker, the
source IP address may not be very useful. For example, hackers of-
ten leapfrog through hacked accounts and some DoS attacks use spoofed
source addresses.
Information to answer the rest of the questions are not
directly available, and depends on the type of attack we are
dealing with. This is exactly the issue we are exploring in
this article.
2.1 Related work
Axelsson et al. [ALGJ98] pointed out that much infor-
mation found in log sources have little or no relevance for
intrusion detection. They used only the execve() system
call with arguments, and reported a detection of 21 out of
30 attacks with this lightweight logging method, which was
better than for the “traditional” logging methods, including
logging of system calls without arguments.
Abad et al. [ATS+03] study which attacks are covered
by different logs, including Syslog, a ﬁrewall log, Netﬂow2,
TCP, DNS, Auth, Web, Mail, and FTP logs. They also study
the usefulness of correlating information from these logs
and come to the conclusion that better detection results can
be obtained if more than one log source is used. However,
they do not explain what they deﬁne as traces from attacks
and how they extracted this information from the nine dif-
ferent log sources they have included in their study.
A taxonomy where attacks are classiﬁed by the complex-
ity of their manifestations, i.e. the signatures they leave in
log data, is created by Kumar [Kum95]. Some attacks man-
ifest as single events, which is the simplest class of attacks.
Others manifest as sequences or sets of events and are more
complex to detect. The focus of Kumar’s work is to clas-
sify the attacks by the computational effort required for de-
tecting them which is useful in signature-based detection.
While this is interesting work, it has a different focus than
ours. First, Kumar does not describe how an attack is anal-
ysed to ﬁnd the (least complex) signature that can be used
for detection. We provide a methodology for analysing at-
tacks. Second, Kumar uses only one manifestation for each
attack. We believe that there are more than one way to de-
tect the same attack, using different manifestations and dif-
ferent log data. Thus, our method can be used to ﬁnd all
the manifestations for an attack, giving a choice in which
manifestation and what log data to use for detection.
The work closest to the method presented in this paper
is a recent paper by Killourhy et al. [KMT04]. They ex-
tract attack manifestations (sequences of system calls with-
out arguments) by comparing attack traces to normal traces
for 25 attacks. The process used for extracting manifesta-
tions seems to be mainly manual. Their focus is to create
a defence-centric taxonomy of attacks, which is achieved
by studying how the attacks manifest as anomalies. The
attacks are classiﬁed by the type of manifestations they pro-
duce, i.e. foreign symbols, minimal foreign sequences, dor-
mant sequences, and non-anomalous sequences. They show
2NetFlow is a tool providing network statistics
2
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
that these classes corresponds well to how a sequence-based
anomaly detector can detect the attacks. Their method
seems to be rather close to our method. However, they focus
on manifestations as system call sequences, while we apply
our extraction method to several log types. Their goal is
to classify attacks by their detectability using anomaly de-
tection techniques and they classify each attack by the best,
i.e. simplest, manifestation found. Our goal is to extract all
log data from a data source that potentially can be useful
for detection of a speciﬁc attack. Thus we focus on mani-
festations and log data useful for both anomaly and misuse
detection, and we describe the extraction process in more
detail.
3 Determining log data requirements
In this section, we present a framework for determining
log data requirements for attack detection. The framework
includes a number of steps where the attack is analysed, log
data from the attack are compared to normal log data, and
combinations of log elements that can be used for attack de-
tection are determined. We do not provide full solutions to
how each step is best implemented, but provide an outline
and suggest some methods that can be used to analyse at-
tacks and their appearance in log ﬁles. To summarise the
logging, a program (or system) generates a certain number
of log entries in different log sources when run. An attack
affecting a speciﬁc program may add, replace or remove
log entries that are normally produced from innocuous use
of the program. These changed log entries are then used to
ﬂag malicious behaviour by an intrusion detection system.
Our framework describes an outline of how to extract these
changed log entries, evaluate their quality, and then using
them to identify the log elements that can be used for detect-
ing the attack. The methods are based on controlled logging
of innocuous and malicious behaviour, including failed at-
tack attempts. In the next section we introduce some termi-
nology necessary to understand the framework, before we
present it in Section 3.2.
3.1 Deﬁnitions
We deﬁne a log entry to be one line or post in a log
ﬁle, e.g. one network packet in a tcpdump log ﬁle, or one
system call in an strace log ﬁle. Each log entry consists
of a number of log elements, i.e. data ﬁelds such as time,
destination port, or TCP ﬂags from a tcpdump log entry.
Events are generated in a computer system directly in
response to user actions, or more indirectly as internal sys-
tem reactions to the user action, or as a system response to
the user. An event that is part of an attack is referred to as
an attack event.
The events are grouped into meta-events, where one
meta-event corresponds to a speciﬁc user action, followed
by a number of system reactions, and the ﬁnal system re-
sponse to this user action. A complete attack consists of
a sequence of meta-events. A meta-event generates a se-
quence of log entries in a speciﬁc log ﬁle, and these log en-
tries are referred to as an event trace. In the same way, an
attack event trace is the sequence of log entries generated
by an attack meta-event.
Attack event traces are compared to traces of correspond-
ing normal meta-events to ﬁnd the sequences that are added,
changed or removed by the attack. These sequences are
called attack manifestations. Each attack meta-event can
generate zero, one or more attack manifestations.
The collection of attack manifestations from a speciﬁc
attack forms a subset of log entries. This subset is vital
when one tries to detect the attack, because it contains the
(only) information that distinguishes malicious from benign
system activity. Under some circumstances, also the con-
text surrounding the attack manifestation is important, and
the subset is correspondingly expanded. Needless to say,
the quality of the attack manifestations varies. For those
reasons, we deﬁne an attack indicator to be a set of log el-
ements from log entries of a single attack manifestation that
(together with context information) can help distinguish an
attack event from other events. Several attack indicators can
be created from one attack manifestation.
3.2 Extraction framework
First, we present a summary of the log data extraction
framework, and then a more detailed description of each
step. The ﬁrst three steps are preparatory, the actual logging
and the log ﬁle comparison starts in step four, and the last
three steps involve the analysis of the extracted log entries.
1. Enumerate user actions, and deﬁne the attack meta-
events by analysing the attack.
2. Determine normal events to which the attack events
can be compared.
3. Classify the attack meta-events.
4. Extract event traces by logging successful attack
events, and the corresponding normal and failed attack
events.
5. Extract attack manifestations by comparing traces.
6. Classify the attack manifestations.
7. Create attack indicators by using information from
the attack manifestations.
8. Deﬁne the log data requirements of the attack by
studying the attack indicators.
In step one, we enumerate (e.g. by running the attack)
the user actions involved in the different stages of the attack.
For each user action, a meta-event is created by ﬁnding the
expected system response and system reactions.
In the second step, we analyse the attack meta-events to
ﬁnd suitable normal events that can be used for comparison
3
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
in step 5. This is a critical step, and we should collect events
that correspond to the program being used in a valid way as
well as failed malicious attempts.
In the third step, the attack meta-events are then clas-
siﬁed to determine their importance. Meta-events that are
not considered important can be excluded from the logging
procedure.
Step four is the start of the actual execution of the attack
events and the logging. It is advantageous to log each meta-
event separately, if at all possible. That is, each user action
is performed in sequence and the meta event is collected
before the start of the next user action.
In the ﬁfth step, we contrast the traces of successful at-
tack event with traces of normal behaviour. These result-
ing attack manifestations show what the execution of the
attack adds or removes in the log ﬁles, and from these log
entries we can create attack indicators useful for detection.
Figure 1 shows how the event traces are compared to ex-
tract attack attempt and attack success manifestations. The
traces of failed attack events are also compared to normal
behaviour traces, which gives a new set of attack manifesta-
tions. Those manifestations that appear in both comparisons
described above indicate that an attack attempt is going on.
Those manifestations that differ between the comparisons
of successful attack to normal behaviour and failed attack
to normal behaviour indicate the result of the attack. The
Comparison of event traces
Manifestations
successful
attack
event trace 1
event trace 2
event trace 3
event trace 4
event trace 5
...
failed attack
event trace 1
event trace 2 
event trace 3
event trace 4
event trace 5
...
normal
behaviour
event trace 1
event trace 2 
event trace 3
event trace 4
event trace 5
...
normal
behaviour
event trace 1
event trace 2
event trace 3
event trace 4
event trace 5
...
Manifestation S1
Manifestation S2
Manifestation S3
Manifestation S4
Manifestation S5
...
Manifestation F1
Manifestation F2
Manifestation F3
Manifestation F4
Manifestation F5
...
attack attempt
manifestations:
S1=F1
S2=F2
S3=F3
attack success
manifestations:
S4=F4
S5=F5
Figure 1. Manifestation extraction
traces are preferably compared using automated techniques.
Methods for this comparison and extraction of attack man-
ifestations in different types of logs are discussed in Sec-