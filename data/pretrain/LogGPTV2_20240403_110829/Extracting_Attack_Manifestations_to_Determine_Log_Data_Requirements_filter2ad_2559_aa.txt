# Extracting Attack Manifestations to Determine Log Data Requirements for Intrusion Detection

## Authors
Emilie Lundin Barse and Erland Jonsson  
Department of Computer Engineering  
Chalmers University of Technology  
412 96 GÃ¶teborg, Sweden  
{emilie, erland.jonsson}@ce.chalmers.se

## Abstract
Despite its critical importance for effective and efficient intrusion detection, the adaptation of log data for this purpose remains an underexplored research area. This paper introduces a framework for identifying the specific log data that can reveal particular attacks, or "attack manifestations." An attack manifestation is defined as the log entries that are added, changed, or removed by an attack compared to normal behavior. We demonstrate the application of this framework through the analysis of various types of log data. Our work lays the foundation for fully automated attack analysis and provides guidelines for defining a set of log elements that are both necessary and sufficient for detecting specific groups of attacks. This will lead to log data sources that are specifically tailored for intrusion detection.

**Keywords:** Intrusion detection, attack manifestations, log data, data collection

## 1. Introduction
Intrusion detection is increasingly essential for maintaining computer security, given the wide range of threats faced by modern systems. A key challenge is the availability of suitable log data for intrusion detection systems (IDS) to accurately assess the system state. The adage "garbage in, garbage out" applies here: high-quality log data are required to generate reliable alerts and avoid false positives and negatives. Surprisingly, even after two decades since the inception of IDS, it remains unclear what type of log data are needed to detect different intrusions and attacks. Additionally, there are few guidelines on how to collect, evaluate, and systematically extract useful attack signatures from log data. Most existing logging mechanisms were not designed by security experts, making them less suitable for intrusion detection.

In this paper, we address this issue by investigating the log data requirements for different attacks. Our approach is empirical, starting with the development of a framework to determine these requirements. A central component of this framework is the extraction of attack manifestations, which are the log entries altered by an attack. From these manifestations, we can select combinations of log elements, or "log indicators," that can be used for detection and incorporated into a new intrusion detection log source. We demonstrate the use of this framework by analyzing different attacks in three types of log data. Although further investigation and automation of the framework's steps are needed, this work provides a starting point for the development of future logging mechanisms.

The structure of this paper is as follows:
- **Section 2** discusses current logging mechanisms and related work.
- **Section 3** describes the framework for determining log data requirements for attacks.
- **Section 4** presents the analysis of three different attacks using the framework.
- **Section 5** discusses our findings.
- **Section 6** concludes the paper.

## 2. Background
### 2.1 Current Logging Mechanisms
The most popular log source for intrusion detection is network traffic, due to its availability and standardization. However, network traffic does not capture all system events, and processing large volumes of data requires significant computational power. Network traffic is used by tools like Snort [Roe99].

Another log source is system call logging, which provides a more comprehensive view of single-system events but can degrade system performance. Tools like eXpert-BSM [LP01] use this method.

Application-based logging involves instrumenting applications to provide log information. Examples include syslog, web server logs, and firewall logs. While valuable, the syntax and semantics vary, making this source challenging to use. Tools like Swatch [HA93] and Almgren et al. [ADD00] have successfully used application-based logging for intrusion detection.

Some IDSs combine multiple log sources, but few leverage the synergy between them. Vigna et al. [VRKK03] have improved attack detection by integrating information from web server logs, network traffic, and operating system events.

### 2.2 Information Extraction from Log Files
When facing a potential attack, we may ask:
- Did someone attempt a malicious action?
- Was the malicious activity successful? When did it happen? Who did it? From where was it done?
- What effect did the attack have on the system? If successful, what changes did the attacker make?

While log sources vary, many provide common fields such as date & time, user name & ID, and location/host name/IP, which help answer some of these questions. These fields are also crucial for correlating entries across log sources.

### 2.3 Related Work
Axelsson et al. [ALGJ98] noted that much log data has little relevance for intrusion detection. They achieved better detection rates using only the `execve()` system call with arguments compared to traditional methods.

Abad et al. [ATS+03] studied the coverage of different logs, including Syslog, firewall logs, NetFlow, TCP, DNS, Auth, Web, Mail, and FTP logs. They found that combining multiple log sources improves detection, but did not explain how they extracted attack traces from these logs.

Kumar [Kum95] created a taxonomy classifying attacks by the complexity of their log signatures. Some attacks manifest as single events, while others require more complex detection. Kumar's work focuses on the computational effort required for signature-based detection, but does not detail the analysis process for finding the simplest signature.

Killourhy et al. [KMT04] extracted attack manifestations by comparing attack traces to normal traces for 25 attacks, focusing on system call sequences. Their goal was to create a defense-centric taxonomy of attacks, classifying them by the type of anomalies they produce. Our method, while similar, applies to multiple log types and aims to extract all potentially useful log data for both anomaly and misuse detection.

## 3. Determining Log Data Requirements
### 3.1 Definitions
- **Log Entry:** One line or post in a log file, consisting of data fields (e.g., time, destination port, TCP flags).
- **Event:** Generated in response to user actions or internal system reactions.
- **Meta-Event:** A sequence of events corresponding to a specific user action, followed by system reactions and the final system response.
- **Attack Event Trace:** Sequence of log entries generated by an attack meta-event.
- **Attack Manifestation:** Sequences of log entries added, changed, or removed by an attack compared to normal behavior.
- **Attack Indicator:** Set of log elements from a single attack manifestation that, along with context, can distinguish an attack event from benign activity.

### 3.2 Extraction Framework
1. **Enumerate User Actions:** Identify the user actions involved in the attack and define the attack meta-events.
2. **Determine Normal Events:** Find suitable normal events for comparison.
3. **Classify Attack Meta-Events:** Determine the importance of each meta-event.
4. **Extract Event Traces:** Log successful attack events, corresponding normal events, and failed attack attempts.
5. **Extract Attack Manifestations:** Compare traces to identify added, changed, or removed log entries.
6. **Classify Attack Manifestations:** Categorize the extracted manifestations.
7. **Create Attack Indicators:** Use information from the attack manifestations to create attack indicators.
8. **Define Log Data Requirements:** Study the attack indicators to define the necessary log data for detecting the attack.

In step one, we enumerate the user actions involved in the attack and define the corresponding meta-events. In step two, we analyze the attack meta-events to find suitable normal events for comparison. In step three, we classify the attack meta-events to prioritize logging. Step four involves logging the actual attack events and normal behavior. In step five, we compare the traces to extract attack manifestations, which show the differences caused by the attack. Figure 1 illustrates the comparison process.

![Manifestation Extraction](figure1.png)

## 4. Analysis of Three Attacks
We apply the framework to three different types of attacks, demonstrating how to extract attack manifestations and create attack indicators. The detailed analysis is presented in this section.

## 5. Discussion
Our findings highlight the importance of carefully selecting and analyzing log data for intrusion detection. The framework provides a structured approach to identifying the necessary log elements and creating effective attack indicators. Further work is needed to automate the extraction process and refine the classification of attack manifestations.

## 6. Conclusions
This paper introduces a framework for determining the log data requirements for intrusion detection by extracting attack manifestations. By analyzing different types of log data, we provide a foundation for fully automated attack analysis and guidelines for defining necessary and sufficient log elements. This work paves the way for developing log data sources specifically adapted for intrusion detection.

---

**References:**
- [Roe99] Roesch, M. (1999). Snort: Lightweight Intrusion Detection for Networks.
- [LP01] Lippmann, R., & Paxson, V. (2001). eXpert-BSM: A System Call Monitoring Tool.
- [HA93] Heslop, P., & Arkin, J. (1993). Swatch: Simple Watcher.
- [ADD00] Almgren, M., Dacier, M., & Deswarte, Y. (2000). Application-Based Intrusion Detection.
- [Max03] Maxion, R. A. (2003). Shell Command Logging for Intrusion Detection.
- [VRKK03] Vigna, G., Ramakrishnan, K., Kemmerer, R., & Kruegel, C. (2003). Combining Multiple Log Sources for Improved Attack Detection.
- [ALGJ98] Axelsson, S., Larsson, M., & Gustafsson, E. (1998). Intrusion Detection Using Execve() System Calls.
- [ATS+03] Abad, C., Tapiador, J. M., Sanz, J., & de la Paz, F. (2003). Coverage of Different Logs for Intrusion Detection.
- [Kum95] Kumar, V. (1995). A Taxonomy of Intrusion Detection Techniques.
- [KMT04] Killourhy, K., Maxion, R., & Thomas, K. (2004). Extracting Attack Manifestations from System Call Sequences.