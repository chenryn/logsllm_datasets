# 学习资源

## 书籍
- **《以太坊技术详解与实战》** - 由以太坊创始人及首席科学家 Vitalik Buterin 推荐。
- 待补充

## 论文
- **智能合约**: [学术论文集](https://github.com/hzysvilla/Academic_Smart_Contract_Papers)
- **区块链（含智能合约）**: [会议论文集](https://github.com/jianyu-niu/blockchain_conference_paper)
- 待补充

## 安全工具
> 资料来源: [ConsenSys 官方文档](https://consensys.github.io/smart-contract-best-practices/security_tools/)

### 可视化工具
- **Solidity Visual Auditor**: 为 Visual Studio Code 提供安全为中心的语法和语义高亮显示、详细的类概览以及高级 Solidity 代码洞察。[详情链接](https://marketplace.visualstudio.com/items?itemName=tintinweb.solidity-visual-auditor)
- **Sūrya**: 智能合约系统实用工具，提供多种可视化输出及合同结构信息，并支持查询函数调用图。[GitHub 地址](https://github.com/ConsenSys/surya)
- **Solgraph**: 生成 DOT 图形来可视化 Solidity 合约中的函数控制流，并突出显示潜在的安全漏洞。[项目主页](https://github.com/raineorshine/solgraph)
- **EVM Lab**: 丰富的 EVM 交互工具包，包含虚拟机、Etherchain API 和跟踪查看器等功能。[了解更多](https://github.com/ethereum/evmlab)
- **ethereum-graph-debugger**: 图形化的 EVM 调试器，展示整个程序控制流程图。[访问地址](https://github.com/fergarrui/ethereum-graph-debugger)
- **Piet**: 帮助理解智能合约架构的 Web 应用程序，提供图形化表示及检查功能，同时具备 Markdown 文档生成能力。[项目页面](https://github.com/slockit/piet)

### 静态与动态分析
- **MythX**: 专业级云端服务，利用符号分析和输入模糊测试来检测常见安全缺陷并验证智能合约代码的正确性。[官网入口](https://mythx.io)，使用前需从 [mythx.io](https://mythx.io) 获取 API 密钥。
- **Mythril**: 智能合约安全领域的多功能工具箱。[GitHub 链接](https://github.com/ConsenSys/mythril)
- **Slither**: 一个静态分析框架，能够识别许多常见的 Solidity 问题，具有污点传播和值追踪功能，采用 Python 编写。[源码仓库](https://github.com/trailofbits/slither)
- **Contract-Library**: 适用于所有已部署合约的反编译器和安全分析工具。[在线平台](https://contract-library.com)
- **Echidna**: 当前唯一可用的 Ethereum 软件模糊测试工具，通过属性测试生成恶意输入以破坏智能合约。[GitHub 主页](https://github.com/trailofbits/echidna)
- **Manticore**: 支持 EVM 的动态二进制分析工具。[演示视频](https://asciinema.org/a/haJU2cl0R0Q3jB9wd733LVosL)，[源代码](https://github.com/trailofbits/manticore)
- **Oyente**: 分析 Ethereum 代码查找常见漏洞，基于此 [研究论文](http://www.comp.nus.edu.sg/~loiluu/papers/oyente.pdf) 开发而成。[GitHub 页面](https://github.com/melonproject/oyente)
- **Securify**: 全自动在线静态分析器，根据漏洞模式提供智能合约安全报告。[开源代码](https://github.com/eth-sri/securify2)
- **SmartCheck**: 对 Solidity 源代码进行静态分析，识别安全漏洞及最佳实践建议。[在线服务](https://tool.smartdec.net)
- **Octopus**: 支持 EVM 和 (e)WASM 的区块链智能合约安全分析工具。[GitHub 仓库](https://github.com/quoscient/octopus)
- **sFuzz**: 受 AFL 启发开发的高效模糊测试工具，用于发现常见漏洞。[官方网站](https://sfuzz.github.io/)
- **Vertigo**: 专为 Ethereum 智能合约设计的变异测试框架。[GitHub 地址](https://github.com/JoranHonig/vertigo)

### 弱点分类与测试案例
- **SWC-registry**: 包含 SWC 定义以及大量精心制作的真实世界易受攻击智能合约样本库。[GitHub 项目](https://github.com/SmartContractSecurity/SWC-registry/)
- **SWC Pages**: 在 GitHub Pages 上发布的 SWC 注册表内容。[浏览页面](https://smartcontractsecurity.github.io/SWC-registry/)

### 测试覆盖率
- **solidity-coverage**: 为 Solidity 测试提供代码覆盖率统计。[GitHub 项目](https://github.com/sc-forks/solidity-coverage)

### Linter 与格式化工具
这些工具通过实施样式和组成规则来提高代码质量，使代码更易于阅读和评审。
- **Ethlint**: 另一款 Solidity 代码审查工具。[GitHub 仓库](https://github.com/duaraghav8/Ethlint)
- **Solhint**: 提供安全性与风格指南验证的 Solidity linter。[官方 GitHub](https://github.com/protofire/solhint)
- **Prettier + Solidity 插件**: Prettier 是一种代码美化工具，强制执行基本的编码约定；结合其 Solidity 插件可更好地服务于该语言。[Prettier 官网](https://prettier.io/) | [插件 GitHub](https://github.com/prettier-solidity/prettier-plugin-solidity)