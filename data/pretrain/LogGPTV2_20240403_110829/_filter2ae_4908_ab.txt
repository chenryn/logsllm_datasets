    774b5363 8b4508          mov     eax,dword ptr [ebp+8]
    774b5366 53              push    ebx
    774b5367 56              push    esi
    774b5368 8bf1            mov     esi,ecx
    774b536a 6bd80c          imul    ebx,eax,0Ch
    774b536d 648b0d30000000  mov     ecx,dword ptr fs:[30h]
    774b5374 894df0          mov     dword ptr [ebp-10h],ecx
    774b5377 8d4802          lea     ecx,[eax+2]
    774b537a 33c0            xor     eax,eax
    774b537c 8955ec          mov     dword ptr [ebp-14h],edx
    774b537f 8b55f0          mov     edx,dword ptr [ebp-10h]
    774b5382 40              inc     eax
    774b5383 d3e0            shl     eax,cl
    774b5385 81c318d45577    add     ebx,offset ntdll!LdrpVectorHandlerList (7755d418)
    774b538b 57              push    edi
    774b538c 8975e0          mov     dword ptr [ebp-20h],esi
    774b538f 854228          test    dword ptr [edx+28h],eax
    774b5392 8b55ec          mov     edx,dword ptr [ebp-14h]
    774b5395 c645fb00        mov     byte ptr [ebp-5],0
    774b5399 894dd8          mov     dword ptr [ebp-28h],ecx
    774b539c 0f85cbaf0300    jne     ntdll!RtlpCallVectoredHandlers+0x3b01c (774f036d)
    774b53a2 8b4dfc          mov     ecx,dword ptr [ebp-4]
    774b53a5 8a45fb          mov     al,byte ptr [ebp-5]
    774b53a8 33cd            xor     ecx,ebp
    774b53aa 5f              pop     edi
    774b53ab 5e              pop     esi
    774b53ac 5b              pop     ebx
    774b53ad e88eb10000      call    ntdll!__security_check_cookie (774c0540)
    774b53b2 8be5            mov     esp,ebp
    774b53b4 5d              pop     ebp
    774b53b5 c20400          ret     4
即通过ntdll!LdrpVectorHandlerList这个链表来管理每个Handler， AddVectoredExceptionHandler、
RemoveVectoredExceptionHandler分别往这个链表里增删项。  
2.5 step5：寻找案发第一现场——分析起因
到目前为止，我们看见的所有的异常上下文，包括栈回溯，都是第二案发现场了，是”mov dword ptr
ds:[00000000h],eax”这条指令触发的，它并不是最直接导致这次crash的罪魁祸首，顶多算个背锅的，自杀的罪名被他坐实了。按理说，如果嵌套了一次异常，那.cxr后执行k进行回溯的话，栈上应该有两个ntdll!KiUserExceptionDispatcher才对，我们看下现实的情况是怎样的：
    0:023> .cxr;k
    # ChildEBP RetAddr  
    00 0ea8cd98 76f41d80 ntdll!NtWaitForMultipleObjects+0xc
    01 0ea8cf2c 76f41c78 kernelbase!WaitForMultipleObjectsEx+0xf0
    02 0ea8cf48 71021997 kernelbase!WaitForMultipleObjects+0x18
    WARNING: Stack unwind information not available. Following frames may be wrong.
    03 0ea8dfdc 71021179 GameCrashdmp+0x1997
    04 0ea8dfe4 774edff0 GameCrashdmp+0x1179
    05 0ea8f88c 774b0f44 ntdll!__RtlUserThreadStart+0x3d0a6
    06 0ea8f89c 00000000 ntdll!_RtlUserThreadStart+0x1b
what？？？这是啥，居然一个ntdll!KiUserExceptionDispatcher都没有，刚刚上边.ecxr之后的k看栈回溯不是还有一个ntdll!KiUserExceptionDispatcher的吗？怎么现在一个都没有了？这当然是Windbg在栈回溯时除了问题了，而且也经常会出问题，这也怪不得他，原因有很多，我们没有符号，dmp也是Minidump类型的，有的也是FPO的，它回溯起来肯定会有问题的。现在就有两个问题需要解决了，第一：上边出现的这个ntdll!KiUserExceptionDispatcher是第一案发现场还是。。。
第二：如果是第一案发现场，那第二案发现场的ntdll!KiUserExceptionDispatcher如何找出来；
我们再用下Windbg提供的其他两个很厉害的命令来找ntdll!KiUserExceptionDispatcher，看看能不能揪出来，如下:
    0:023> !ddstack
    Range: 0ea89000->0ea90000
    0x0ea8cd90    0x664c17e5    nvwgf2um+005817e5
    0x0ea8ce1c    0x76f4627c    kernelbase!CreateProcessW+0000002c
    0x0ea8e004    0x774c2330    ntdll!_except_handler4_common+00000080
    0x0ea8e1c8    0x01426886    GameExe+00046886
    0x0ea8e244    0x7755d418    ntdll!LdrpVectorHandlerList+00000000
    0x0ea8e274    0x01426886    GameExe+00046886
    0x0ea8e400    0x013e50c1    GameExe+000050c1
    0x0ea8e490    0x013e50c1    GameExe+000050c1
    0x0ea8e5dc    0x014d5818    GameExe+000f5818
    0x0ea8e5f4    0x014e2d98    GameExe+00102d98
    0x0ea8e638    0x013e5090    GameExe+00005090
    0x0ea8e648    0x774af15a    ntdll!RtlDispatchException+0000007c
    0x0ea8e768    0x1165331a    libcef+0216331a
    0x0ea8e814    0x1165331a    libcef+0216331a
    0x0ea8e980    0x0f688051    libcef+00198051
    0x0ea8eb04    0x77185bd9    ucrtbase!::operator()+00000033
    0x0ea8eb64    0x0f65390b    libcef+0016390b
    0x0ea8ec54    0x5deb11c8    AudioSes+000011c8
    0x0ea8f0f8    0x0f653f19    libcef+00163f19
    0x0ea8f158    0x11636410    libcef+02146410
    0x0ea8f2e8    0x116362c5    libcef+021462c5
    0x0ea8f340    0x10cc84df    libcef+017d84df
    0x0ea8f3b0    0x10cc9c91    libcef+017d9c91
    0x0ea8f528    0x11b4b196    libcef+0265b196
    0x0ea8f54c    0x0f3e3702    ffmpeg+00223702
    0x0ea8f564    0x0f692aca    libcef+001a2aca
    0x0ea8f574    0x0f3e3702    ffmpeg+00223702
    0x0ea8f57c    0x1165095c    libcef+0216095c
    0x0ea8f5b4    0x0f3e1bd3    ffmpeg+00221bd3
    0x0ea8f724    0x0f3e3702    ffmpeg+00223702
    0x0ea8f794    0x0f363c33    ffmpeg+001a3c33
    0x0ea8f850    0x664c22d5    nvwgf2um+005822d5
    0x0ea8f898    0x774d2ec5    ntdll!FinalExceptionHandlerPad37+00000000
    0:023> !findstack ntdll!KiUserExceptionDispatc*r
    Scanning thread 004
很遗憾，这些命令集体哑火，啥帮助也没有，我们要开始靠自己的双手来掘金了，使用dps来做，输出的太多了，简单整理下如下所示：
果然不出所料，找出来了。根据栈的递减原理，我们可以推断，第一案发现场的ntdll!KiUserExceptionDispatcher应该是0x0ea8e6dc这个，下一步就是还原到案发第一现场了，如下操作：
    KiUserExceptionDispatcher( PEXCEPTION_RECORD pExcptRec, CONTEXT * pContext )
    0:023> dd 0ea8e6dc
    0ea8e6dc  774c088f 0ea8e6f0 0ea8e740 0ea8e6f0
    0ea8e6ec  0ea8e740 80000003 00000000 00000000
    0ea8e6fc  0f688051 00000001 00000000 00000000
    0ea8e70c  00000000 00000000 00000000 00000000
    0ea8e71c  00000000 00000000 00000000 00000000
    0ea8e72c  00000000 00000000 00000000 00000000
    0ea8e73c  00000000 0001007f 00000000 00000000
    0ea8e74c  00000000 00000000 00000000 00000000
这里需要说明下，32位的程序，OS在从内核将异常分发至用户态时，会伪造两个参数，并且通过用户态栈传递，而对于64位的程序，则有差别，是通过寄存器传递的参数，而非通过栈，这个后边分析dmp时详解；好了，有了KiUserExceptionDispatcher的原型，又有了传递给他的两个参数，那么下一步就开始复原案发现场吧。
    0:023> .exr 0ea8e6f0
    ExceptionAddress: 0f688051 (libcef+0x00198051)
       ExceptionCode: 80000003 (Break instruction exception)
      ExceptionFlags: 00000000
    NumberParameters: 1
       Parameter[0]: 00000000
    0:023> .cxr 0ea8e740
    eax=0ea8ec00 ebx=0ea8f1a8 ecx=00000000 edx=000003d1 esi=0ea8f1b4 edi=000003d1
    eip=0f688051 esp=0ea8eba0 ebp=0ea8f0e8 iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    libcef+0x198051:
    0f688051 ??              ???
看到这些数据，我悬着的心落下来了，毕竟看到这个就已然证明了之前的推测都是正确的。简单分析下，异常记录中记录下来的异常Code是80000003，以为了游戏自身触发了一个int
3的断点，这于之前那里分析的逻辑也是对的上的，异常上下文则直接恢复出了游戏执行int
3时的执行状态；可以的是，dmp时这块内存没有被保存下来，导致现在看不了反汇编，不过也不要紧了，这里的指令一定是int 3；
这里的指令看不了，但还是可以看下程序执行到这里的执行路径，看下调用栈吧，如下：
    0:023> kf
    #   Memory  ChildEBP RetAddr  
    WARNING: Stack unwind information not available. Following frames may be wrong.
    00           0ea8eb9c 0f652ee8 libcef+0x198051
    01       54c 0ea8f0e8 116521a8 libcef+0x162ee8
    02       17c 0ea8f264 116529ba libcef+0x21621a8
    03        58 0ea8f2bc 1167c36c libcef+0x21629ba
    04         c 0ea8f2c8 11636600 libcef+0x218c36c
    05       218 0ea8f4e0 11650bb1 libcef+0x2146600
    06        44 0ea8f524 11b4b196 libcef+0x2160bb1
    07        14 0ea8f538 0f692ab5 libcef+0x265b196
    08        5c 0ea8f594 0f65f0ef libcef+0x1a2ab5
    09       144 0ea8f6d8 0f65eae3 libcef+0x16f0ef
    0a        80 0ea8f758 0f6943b7 libcef+0x16eae3
    0b        24 0ea8f77c 0f65ee20 libcef+0x1a43b7
    0c        30 0ea8f7ac 0f65eddd libcef+0x16ee20
    0d        28 0ea8f7d4 0f67a94b libcef+0x16eddd
    0e         8 0ea8f7dc 0f67ad9a libcef+0x18a94b