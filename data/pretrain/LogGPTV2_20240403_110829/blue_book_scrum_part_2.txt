    the semester OKRs.
* All team has a clear view of what needs to be done.
* The team makes a realistic work commitment.
# The roles
There are three roles required in the scrum team:
* Product owner.
* Scrum master.
* Developer.
## Product owner
Scrum product owner is accountable for maximizing the value of the product
resulting from the work of the scrum team.
It's roles are:
* Assist the scrum master with:
    * Priorization of the semester OKRs.
    * Monitorization of the status of the semester OKRs on reviews and
        plannings.
    * Priorization of the sprint tasks.
* Conduct the daily meetings:
    * Show the Kanban board in the meeting
    * Remind the number of weeks left until the review meeting.
    * Make sure that the team is aware of what tasks are going to be left undone
        at the end of the sprint.
    * Inform the affected stakeholders of the possible delay.
* Prepare and conduct the review meeting:
    * With the help of the scrum master, prepare the reports:
        * Create the report of the sprint, including:
            * Make sure that the [Definition of Done](#definition-of-done) is
                met for the closed tasks.
            * Explanation of the done tasks.
            * Status of uncompleted tasks, and reason why they weren't complete.
            * The meaning of the work done in terms of the semester OKRs.
        * Create the report of the proposed next sprint's planning, with
            arguments behind why we do each task.
    * Conduct the review meeting presenting the reports to the stakeholders.
* Attend the daily, review, retro and planning meetings.
## Scrum master
Scrum master is accountable for establishing Scrum as defined in this document.
This position is going to be rotated between the members of the scrum team with
a period of two sprints.
It's roles are:
* Monitoring the status of the semester OKRs on reviews and plannings.
    * Create new tasks required to meet the objectives.
* Refining the backlog:
    * Adjust priority.
    * Refine the tasks that are going to enter next sprint.
    * Organize the required meetings to refine the backlog with the team
        members.
    * Delete deprecated tasks.
* Assert that issues that are going to enter the new sprint meet the [Definition
    of Ready](#definition-of-ready).
* Arrange, prepare the daily meetings:
    * Update the calendar events according to the week needs.
* Arrange, prepare and conduct the review meeting:
    * Create the calendar event inviting the scrum team and the stakeholders.
    * With the help of the product owner, prepare the reports:
        * Create the report of the sprint, including:
            * Make sure that the [Definition of Done](#definition-of-done) is
                met for the closed tasks.
            * Explanation of the done tasks.
            * Status of uncompleted tasks, and reason why they weren't complete.
            * The meaning of the work done in terms of the semester OKRs.
        * Create the report of the proposed next sprint's planning, with
            arguments behind why we do each task.
    * Update the planning with the requirements of the stakeholders.
    * Upload the review reports to the documentation repository.
* Arrange, prepare and conduct the refinement meetings:
    * Prepare the tasks that need to be refined:
        * Adjust the priority of the backlog tasks.
        * Select the tasks that are most probably going to enter the next
            sprint.
        * Expand the description of those tasks so it's understandable by any
            team member.
        * If the task need some steps to be done before it can be worked upon,
            do them or create a task to do them before the original task.
    * Create the required refinement calendar events inviting the members of the
        scrum team.
    * Conduct the refinement meeting.
    * Update the tasks with the outcome of the meeting.
    * Prepare the next sprint's Kanban board.
* Arrange, prepare and conduct the retro meeting:
    * Prepare the dynamics of the meeting.
    * Create the retro calendar event inviting the members of the scrum team.
    * Conduct the retro meeting.
    * Update the tasks with the outcome of the meeting.
    * Upload the retro reports to the documentation repository.
* Arrange, prepare and conduct the planning meeting:
    * Make sure that you've done the required refinement sessions to have the
        tasks and Kanban board ready for the next sprint.
    * Create the planning calendar event inviting the members of the scrum team.
    * Conduct the planning meeting.
    * Update the tasks with the outcome of the meeting and start the sprint.
## Developer
Developers are the people in the scrum team that are committed to creating any
aspect of a usable increment each sprint.
It's roles are:
* Attend the daily, refinement, review, retro and planning meetings.
* Focus on completing the assigned sprint tasks.
    * Do the required work or be responsible to coordinate the work that others
        do for the task to be complete.
    * Make sure that the [Definition of Done](#definition-of-done) is met
        before closing the task.
# Inter team workflow
To improve the communication between the teams, you can:
* Present more clearly the team objectives and reasons behind our tasks, and
    make the rest of the teams part of the decision making.
* Be aware of the other team's needs and tasks.
To solve the first point, you can offer the rest of the teams different
solutions depending the time they want to invest in staying informed:
* You can invite the other team members to the sprint reviews, where you show the
    sprint's work and present what you plan to do in the next sprint. This could
    be the best way to stay informed, as you'll try to sum up everything they
    need to know in the shortest time.
* For those that want to be more involved with the decision making inside the
    team, they could be invited to the planning sessions and even the
    refinement ones where they are involved.
* For those that don't want to attend the review, they can either get a summary
    from other members of their team that did attend, or they can read the
    meeting notes that you publish after each one.
The second point means that your team members become more involved in the
other team's work. The different levels of involvement are linked to the amount
of time invested and the quality of the interaction.
The highest level of involvement would be that a member of your team is
also part of the other team. This is easier for those teams that already use
Scrum as their agile framework, that means:
* Attending the team's meetings (retro, review, planning and refinement).
* Inform the rest of your team of the outcomes of those meetings in the
    daily meeting.
* Focus on doing that team's sprint tasks.
* Populate and refine the tasks related to your team in the other team issue
    tracker.
For those teams that are smaller or don't use Scrum as their agile framework,
a your team members could accompany them by:
* Setting periodic meetings (weekly/biweekly/monthly) to discuss what are they
    doing, what do they plan to do and how.
* Create the team related tasks in your backlog, coordinating with the scrum
    master to refine and prioritize them.
# Definitions
## Definition of Ready
The Definition of Ready (DoR) is a list of criteria which must be met before any
task can be added to a sprint. It is agreed by the whole scrum team and reviewed
in the planning sessions.
### Expected Benefits
* Avoids beginning work on features that do not have clearly defined completion
    criteria, which usually translates into costly back-and-forth discussion or
    rework.
* Provides the team with an explicit agreement allowing it to “push back” on
    accepting ill-defined features to work on.
* The Definition of Ready provides a checklist which usefully guides
    pre-implementation activities: discussion, estimation, design.
### Example of a Definition of Ready
A task needs to meet the following criteria before being added to a sprint.
* Have a short title that summarizes the goal of the task.
* Have a description clear enough so any team member can understand why we
    need to do the task
* Have a validation criteria for the task to be done
* Have a checklist of steps required to meet the validation criteria, clear
    enough so that any team member can understand them.
* Have a scope that can be met in one sprint.
* Have the `Priority: ` label set.
* If other teams are involved in the task, add the `Team: ` labels.
* If it's associated to an OKR set the `OKR: ` label.
## Definition of Done
The Definition of Done (DoD) is a list of criteria which must be met before any
task can be closed. It is agreed by the whole scrum team and reviewed in the
planning sessions.
### Expected Benefits
* The Definition of Done limits the cost of rework once a feature has been
    accepted as “done”.
* Having an explicit contract limits the risk of misunderstanding and conflict
    between the development team and the customer or product owner.
### Common Pitfalls
* Obsessing over the list of criteria can be counter-productive; the list needs
    to define the minimum work generally required to get a product increment to
    the “done” state.
* Individual features or user stories may have specific “done” criteria in
    addition to the ones that apply to work in general.
* If the definition of done is merely a shared understanding, rather than
    spelled out and displayed on a wall, it may lose much of its effectiveness;
    a good part of its value lies in being an explicit contract known to all
    members of the team.
### Example of a Definition of Done
A task needs to meet the following criteria before being closed.
* [ ] All changes must be documented.
* [ ] All related pull requests must be merged.