√
1
e− (y−μ)2
2π
2σS
(cid:3)
x−2S
(cid:3) +∞
2σ2 dy,
(1)
fZ(x) =
=
x
where fX is the probability density of a normal distribution
with mean μ and variance σ2. S is the quantization step.
The mean μ is not very important since it does not affect
the shapes of fX and fZ, but only moves them along x-axis
simultaneously. Figure 3 shows an example of fX and fY .
Apparently, when a network ﬂow is watermarked by a
trace-back system, some packet delays will follow the dis-
tribution of Z, which is different from that of X. (A packet
pi delayed by watermark may cause some following pack-
ets to be postponed and sent out immediately after pi to
keep the correct packet order. These collateral delays can
be identiﬁed by checking whether there is a large delay that
affects its following packets. For simplicity, we do not con-
sider such collateral delays.) In this paper, we investigate
techniques that can take advantage of this observation to
detect the existence of timing-based active watermarks, re-
cover the watermark parameters, and remove and duplicate
the observed watermarks. In order to fully understand at-
tackers’ threats on the active watermarking scheme, we fo-
cus on investigating the following problems:
1. How can an attacker infer the watermark parameters
and how much can be recovered?
2. How can an attacker duplicate a watermark to mislead
the trace-back system? How well?
3. How can an attacker that connects through stepping
stones determine whether he/she is being traced by a
timing-based active watermarking system as quickly
as possible?
We choose to ﬁrst
tackle the watermark recov-
ery/duplication problem since it puts a major threat on the
watermark scheme.
In the following, we assume the at-
tacker obtain the packet delays from two adjacent hosts in
the stepping stone connections, and try to compromise the
watermark scheme at the second host.
4. Inferring Watermark Parameters
As discussed earlier, an attacker can observe the packet
delays and obtain the distribution (i.e., μ and σ). We also as-
sume the attacker has obtained a sequence of packet delays
d1, d2, ..., dn between two stepping stone hosts where a wa-
termark is embedded. However, the attacker does not know
the watermark parameters, including the quantization step
S, the degree of robustness M , the length L of the water-
mark, and the exact watermark bits. The goal of this section
is to investigate whether, how, and how well the attacker can
recover these parameters.
When there is no watermark, the observed packet delays
are entirely caused by normal network delays. However,
when an watermark exists, some delays will be the combi-
nation of both normal network delays and watermark de-
lays. That is, the observed packet delays are drawn from a
mixture of two random variables X and Z. Thus, the distri-
bution of di’s is
f(x, θ) = (1 − θ)fX(x) + θfZ(x),
(2)
where θ is the proportion of di’s that are from watermark
delays. When no watermark is embedded, θ = 0 .
In the following, we ﬁrst estimate the quantization step
S and the proportion parameter θ, then identify the packets
delayed due to watermark, and ﬁnally recover the remaining
watermark parameters or duplicate the watermark (without
knowing all the parameters).
4.1. Estimating the Quantization Step S
and the Proportion Parameter θ
We propose to use Expectation Maximization (EM) al-
gorithm [3] to estimate the quantization step S and the pro-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
portion parameter θ from a sequence of observed packet de-
lays. The EM algorithm is an iterative optimization method
to ﬁnd the maximum likelihood estimation of parameters in
probability densities when there is unobservable or missing
data. It is also widely used to estimate the parameters and
proportions where different probability densities are mixed
together.
Let Ψ = (S, θ)T be the vector of unknown parameters
we want to estimate. Given the vector of n observed packet
(cid:4)
delays d = (d1, . . . , dn)T , the likelihood function for Ψ is
L(Ψ) =
j=1 f(dj|Ψ). The EM algorithm estimates Ψ by
ﬁnding the value that can maximize the likelihood L(Ψ).
This can be done by solving the equation ∂L(Ψ)/∂Ψ = 0,
(cid:2)
or equivalently, ∂ log L(Ψ)/∂Ψ = 0, where log L(Ψ) =
j=1 log
. However, it is in
(cid:5)
(cid:6)
(1 − θ)fX(dj) + θfZ(dj)
n
n
general difﬁcult to directly solve such an equation.
In order to utilize the EM algorithm to estimate parame-
ters in a mixture of two probability densities, we introduce
additional parameters z = (z1, . . . , zn)T , where zj is 0 (or
1) indicating that dj is from the distribution fX (or fZ).
(Note that the values in z cannot be observed.) By includ-
ing z, the log likelihood for Ψ is transformed into
n(cid:7)
n(cid:7)
log Lc(Ψ) =
(1 − zj) log fX(dj) +
zj log fZ(dj)
+
(1 − zj) log(1 − θ) +
zj log θ.
(3)
j=1
n(cid:7)
j=1
j=1
n(cid:7)
j=1
(cid:8)
We call log Lc(Ψ) the complete-data log likelihood.
The general procedure of the EM algorithm begins with
an arbitrary initial value Ψ = Ψ(0). In round i + 1, where
i = 0, 1, 2, ..., the algorithm ﬁrst performs the E-step to
calculate the expectation of the log likelihood Q(Ψ|Ψ(i)) =
EΨ(i)
. Then the algorithm performs the
M-step to maximize Q(Ψ|Ψ(i)) with respect to Ψ, that is,
ﬁnd Ψ(i+1) such that Q(Ψ(i+1)|Ψ(i)) ≥ Q(Ψi|Ψ(i)) for
all possible values of Ψ. It terminates when the difference
between L(Ψ(i+1)) − L(Ψ(i)) is small enough.
(cid:9)
log Lc(Ψ) | d
In our case,
The i-th round value of z(i)
the E-step simply computes the cur-
rent conditional expectation of z using the observed
packet delays d.
is
j = θ(i)fX(dj)/f(dj|Ψ(i)), 1 ≤ j ≤ n. With the
z(i)
value of z(i), we can easily compute Q(Ψ|Ψ(i)). How-
ever, in the M-step, it is difﬁcult to globally maximize
Q(Ψ|Ψ(i)) due to the probability density fZ. To deal
with this problem, we use the generalized EM algo-
rithm (GEM) [15], in which the M-step is modiﬁed to
ﬁnd Ψ(i+1) such that Q(Ψ(i+1)|Ψ(i)) ≥ Q(Ψ(i)|Ψ(i)).
More speciﬁcally, we use the GEM algorithm based
on one Newton-Raphson step [20] in the M-step to
compute Ψ(i+1) by Ψ(i+1) = Ψ(i) + δ(i), where δ(i) =
−[∂2Q(Ψ|Ψ(i))/∂Ψ∂ΨT ]
Ψ=Ψ(i)[∂Q(Ψ|Ψ(i))/∂Ψ]Ψ=Ψ(i) .
−1
iteration of
this is the ﬁrst
the Newton-
(Note that
Raphson method when computing a root for equation
∂Q(Ψ|Ψ(i))/∂Ψ = 0.) In our experiment, the initial value
θ(0) is set to 0.5 so that the algorithm can converge quickly
for both bigger and smaller θ. For this θ(0), the average
packet delay is 2μ + S. Therefore we simply use the
average value of the packet delays d as the initial value
S(0) since μ is small compared with S in practice.
4.2. Identifying Watermark Delayed Pack-
ets
We can determine the probability densities fZ and f with
the estimated S and θ.
In this subsection, we decide for
each packet whether it has been delayed by the watermark
encoder or not. We adopt the Bayes decision rule [6] in our
decision process to minimize the cost of wrong decisions.
Let λij be the loss incurred for deciding i when the true state
is actually j. In our case, the values of i and j are 1 (pack-
ets with only normal network delays) and 2 (packets with
watermark delays), respectively. By using the Bayes deci-
sion rule, the expected loss (called risk) can then be min-
imized for our probability density functions and the losses
λij (i, j = 1, 2). According to the Bayesian decision the-
ory [6], we can decide a packet pi as a watermark delayed
packet if its packet delay di satisﬁes
≥ λ21 − λ11
λ12 − λ22
(4)
Here θ and 1 − θ can be seen as the priori probabilities for
watermark delays and normal network delays, respectively.
From inequality 4 we can numerically compute a thresh-
old value ¯d. Packet pi is identiﬁed as a watermark delayed
packet when di ≥ ¯d.
fZ(di)
fX(di)
· 1 − θ
θ
.
We may also develop a threshold that works for the same
S but different θ, and thus avoid computing a new thresh-
old for each θ when the same S is used for multiple ﬂows.
Speciﬁcally, we use the minimax [6] solution for inequality
4 to achieve good performance over all values of θ. Brieﬂy
speaking, the minimax solution searches for the decision
threshold with which the maximum risk is minimized. Fig-
ure 3 gives an example of the minimax solution when zero-
one loss is used (i.e., λ11, λ22 = 0 and λ12, λ21 = 1). The
threshold is ¯d = 14.5ms, and the minimax risk is 0.074.
4.3. Watermark Recovery and Duplication
We have developed ways to infer the quantization step
S and the watermark embedding packets. Now we further
investigate how to recover and/or duplicate the entire water-
mark. We ﬁrst consider several cases that watermarks can
be embedded. In Section 4.3.6, we integrate these cases and
describe the general approach.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
• Case I: The watermark encoder uses one IPD to embed
each watermark bit (M = 1). Moreover, it reuses the
second packet in a previous IPD as the ﬁrst packet in
the next IPD in order to reduce the number of packets
required to embed watermark. Thus, only L+1 packets
are needed to embed an L-bit watermark.
• Case II: The watermark encoder still reuses packets
to embed watermark, as in Case I. But multiple IPDs
(M > 1) are used for each watermark bit to increase
robustness. Totally M × (L + 1) packets are needed
for an L-bit watermark. Obviously, Case I is a special
case of Case II.
• Case III: The watermark encoder uses one IPD to em-
bed each watermark bit (M = 1), but it does not reuse
the same packet in more than 1 IPD. Moreover, the
packets used to embed an earlier watermark bit do not
interleave with those used to embed a later watermark
bit. 2L packets are needed to embed an L-bit water-
mark.
• Case IV: The watermark encoder does not reuse the
same packet in more than 1 IPD, and the packets used
to embed an earlier watermark bit do not interleave
with those used to embed a later watermark bit. How-
ever, it uses multiple IPDs to embed each watermark
bit (M > 1) as in Case II. 2M × L packets are needed
to embed an L-bit watermark.
• Case V: Those not covered by the above four cases.
We will show that in the ﬁrst two cases, we can recover
most of the watermark embedded for trace-back purposes,
and in Cases III and IV, we can duplicate the watermark
in unrelated network ﬂows with a high probability. We
may still use the techniques developed for Case IV in Case
V; however, the performance will drop quickly. The ﬁrst
four cases are used in the implementation (of the techniques
in [28]) that we obtained from the Footfall project1. Indeed,
in Case V, embedding watermark bits in different packets
is not independent of each other due to the interleaved em-
bedding packets, and will make the implementation more
complicated.
4.3.1. Case I
We begin with the simplest case, where L + 1 embedding
packets are needed to embed an L-bit watermark. Sup-
pose the embedding packets are pe0 , . . . , peL. Then ipd1 =
te1 − te0 is used to embed bit w1, ipd2 = te2 − te1 is used
to embed bit w2, and so on. Though by reusing the embed-
ding packets we can reduce the number of packets needed,
it also gives attackers an opportunity to break the watermark
scheme.
Assume the quantization step S is estimated correctly us-
ing the approach in Section 4.1, and the embedding packets
1The Footfall Project, http://footfall.csc.ncsu.edu.
pe1 , . . . , peL have been identiﬁed using the approach dis-
cussed in Section 4.2. Thus, we can compute watermarked
IPDs ipd2, . . . , ipdL. Since each watermarked IPD must be
a multiple S, they can be re-written as a2 · S, . . . , aL · S,
where ai(2 ≤ i ≤ L) are all integers. As discussed in Sec-
tion 2, an even (or odd) ai represents that wi is 0 (or 1).
Thus, we can recover the watermark embedded simply by
dividing each ipdi by S and checking the parity of the quo-
tient. However, this approach has a limitation: An error in
the estimated S may affect the recovery of all watermark
bits.
It
In our work, we take a more robust approach that
does not use S directly. Consider the greatest com-
mon divisor of ipd2, ipd3, ..., ipdL.
is easy to see
that GCD(ipd2, . . . , ipdL) = y · S, where y =
GCD(a2, . . . , aL). Suppose watermark bits w2, . . . , wL
are not all 0’s. Thus, a2, . . . , aL cannot all be even, and
y must be an odd number. Now we divide the IPDs by
GCD(ipd2, . . . , ipdL) to get
ai · S
y · S
, for 2 ≤ i ≤ L.
a(cid:2)
i =
=
ai
y
(5)
ipdi
GCD(IPDs)
=
Since y is an odd number, the parity of a(cid:2)
i must be the same
as that of ai. However, when w2, . . . , wL are all 0’s, this
approach will generate an incorrect result. Nevertheless,
this approach has already reduced the number of possible
watermarks from 2L to 4. As a result, the attacker can easily
mislead the tracing system once for every four trials.
The problem is more complicated in practice. First, due
to false negatives, we may miss certain embedding pack-
ets, thus two or more IPDs may be combined together.
For example, when pe4 is missed, we will have an IPD of
ipd4 + ipd5. However, the missing of pe4 will not affect
IPDs other than ipd4 and ipd5. Second, due to false posi-
tives, we may include certain non-embedding packets that
happen to be delayed abnormally long. Such packets may
further divide an IPD into two or more sub-IPDs, which
may not be multiples of S. In this case, S has to be used to
identify those non-embedding packets. Third, network de-
lays will make the IPDs not exact multiples of S, which can
be addressed by quantizing S. These problems are common
for all four cases and will decrease the accuracy of water-
mark recovery and duplication.
4.3.2. Case II
Case II is similar to Case I, but a bit more complicated, since
we have to identify what packets are used to embed the same
watermark bit. Using the approach in Section 4.2, we can
estimate M × L embedding packets except for the ﬁrst M
ones.
Now we identify which packets are used to embed the
same watermark bits. Since the extra watermark delays for
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
1000
r
e
b
m
u
n
t
e
k
c
a
P
 750
 500
 250
0
100
200
300
600
400
500
Packet delay (millisec)
i
e
c
n
a
t
s
d
t
e
k
c
a
P
0.4
0.35
0.3
0.25
0.2