So I was trying to workout why my parallel code was taking so long.  
After-all I only sent the big datastructures once, though a closure as the
function that was mapped over.  
That should happen, once (I thought), since the function is constant  
Not so
MWE:
    addprocs(5)
    immutable Foo
        bar::Char
    end
    #HACK: lets debug what is being serialised by overloading the calls
    function Base.serialize(s::Base.SerializationState, x::Foo)
        tic()
        Base.Serializer.serialize_any(s,x)
        tt=toq()
        open("ser_log.txt","a") do fp
            println(fp, tt)
        end
    end
    function test()
        st = Foo(rand('a':'z')) 
        pmap(r->string(st.bar)^r, 1:100)
        #Base.pgenerate(default_worker_pool(), r->string(st.bar)^r, 1:100) |> collect
    end
Then running the function and counting the lines in the log:
    test()
    run(`wc -l ser_log.txt`)
    OUT> 17
So it was serialized 17 times for pmap.  
If is switch to `pgenerate` is it 18 times (so about the same).  
I believe that after the batchsplit step is done that is once serialisation of
the closure, per batch that was sent.  
It only need to be serialized once.
(in my nonMWE, it is happening millions of times, and takes 6 seconds a
piece...)
* * *
I suspect this is already known, but I can't find an issue for it, so maybe
not.
see also:
  * #11938
  * #16322
* * *
    versioninfo()
    Julia Version 0.5.0-dev+3928
    Commit fdc4a85 (2016-05-06 04:46 UTC)
    Platform Info:
      System: Linux (x86_64-linux-gnu)
      CPU: AMD Opteron 63xx class CPU
      WORD_SIZE: 64
      BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Piledriver)
      LAPACK: libopenblas64_
      LIBM: libopenlibm
      LLVM: libLLVM-3.7.1 (ORCJIT, bdver2