address obfuscation system in [2]. In the case of WindRain, though we are not
introducing any diversity, we do utilize the diversity amongst Windows systems
to boost the eﬀectiveness of WindRain.
Finally, our prototype WindRain traps intrusion by catching code executing
in data space. In this respect, it is similar to that of the NX (or “Execution
protection”) technology. According to Microsoft’s Security Developer Center,
the NX technology “prevents code execution from data pages, such as the de-
fault heap, various stacks, and memory pool”. Since the NX technology leverages
hardware support from latest CPUs (including AMD K8 and Intel Itanium fam-
ilies), it has the obvious advantage over WindRain in terms of performance.
On the other hand, WindRain (and random-inspection-based IDS in general) is
applicable to legacy systems of which there are many, and more importantly,
it is ﬂexible as we shall explain below. Since NX is built on top of hardware
features available only on new CPUs, it is obvious that NX cannot support
legacy hardware. The problem with legacy software needs some elaboration.
Even though it is reasonable to expect that executable code will never appear
in “data space”, some legacy software actually violates this rule. Some exam-
ples of these oﬀending software include the JIT compiler in many JVM, as well
as WindowsMediaPlayer and WindowsExplorer (more details on these software
will be given in Sect. 5.2). In order to run these software on NX-protected sys-
tems, we will have to turn oﬀ the protection for these software. Another alter-
native is to mark all those data pages which contain code as executable. Both
proposals are very coarse-grained solutions. In contrast, with the ﬂexibility of
a software solution, we can program our IDS to recognize the oﬀending code
that got placed in data space and accept their execution as normal. In fact,
this is exactly our solution for supporting WindowsMediaPlayer and Windows-
Explorer under WindRain. It is also possible for random-inspection-based IDS
to judge whether the execution of “data” indicates an intrusion base on some
addition information. A very good example is to base such decision on the exe-
cution history of the oﬀending program. Once again, this solution demonstrates
a level of ﬂexibility that is impossible on NX. For NX, all that is available
for this decision is a single point of data: the point where “data” is executed.
Thus the introduction of NX does not solve all the problems that WindRain
can solve.
On Random-Inspection-Based Intrusion Detection
171
3 Technical Details
In this section we present our proposed system for anomaly detection based on
random inspection. We ﬁrst discuss how random inspection is performed. Then
the implementation details of our WindRain system, which performs anomaly
detection based on the PC values collected at random inspection points, will be
given. In the next section, we will take a look at the environment presented by
Windows to the attackers. This will reveal the problems faced by the attackers
and will explain why WindRain is an eﬀective defense against code injection
attacks. We present the results of our experimental evaluation of WindRain in
Sect. 5.
3.1 The Core Random Inspection
Our implementation of random inspection makes use of a common hardware
feature called performance counter. Performance counters are hardware registers
that can be conﬁgured to count various processor-level events (e.g. cache miss,
instructions retirement, etc). This facility is mainly designed for high-precision
performance monitoring and tuning. Since events are counted by the CPU in
parallel to normal operations, we can expect very low overhead for the count-
ing. Furthermore, the CPU can be conﬁgured to generate an interrupt on any
performance-counter overﬂow. As a result, by properly initializing the perfor-
mance counters, we can stop the operation of the system after a certain number
of occurrences of a particular event. By resetting the counter to its initial value
at each counter overﬂow, we can conﬁgure the system to generate an interrupt at
a roughly constant frequency. This turns out to be exactly what we need for ran-
dom inspection: we can perform the inspections on counter-overﬂow interrupt,
which occurs at a constant, controllable frequency. However, the inspection fre-
quency is constant only in a system-wide perspective. The inspection frequency
observed by individual process will appear randomized, as we will show later.
It is also possible to make the occurence of inspections more unpredictable by
resetting the counter with random values after each overﬂow.
In order to perform random inspection using the performance-counter facility,
two more decisions have to be made: what event to count, and what initial counter
value to use. For the choice of event to count, we want an event that occurs at
high frequency in both normal and injected code. Furthermore, we want this event
unavoidable in the injected code. The ﬁrst criterion allows us more freedom in
the choice of inspection frequency. The second criterion makes random inspection
more robust: the attackers cannot evade inspection by avoiding the counted event.
For our implementation, we choose to count the instruction retirement events1
that occur in user space. We believe this event satisﬁes the above criteria very
well. Furthermore, by counting events in user space only, we guarantee that in-
spection will only occur in user space. This allows easier utilization of information
collected at inspection points.
1 Instruction retirement marks the completion of the out of order execution of an
instruction and the update of processor state with its results.
172
S.P. Chung and A.K. Mok
For the initial counter value, we make it a conﬁguration parameter of our
system. By setting diﬀerent values for this parameter, we can control the in-
spection frequency. In the following discussion, we shall name this parameter k.
In addition to being the initial value for the performance counter, k also gives
the number of instruction retirements that occur between two inspections. The
choice of k involves diﬀerent tradeoﬀs between detection rate, detection latency
and performance overhead. We will talk about this tradeoﬀ in Sect. 5.
We implement our prototype system on a machine with a Pentium III CPU.
We note that performance counters that generate interrupt on overﬂow is very
common in CPUs nowadays. Thus our idea is not limited to Intel CPUs. Fur-
thermore, we ﬁnd the use of this facility is limited to proﬁling software only, so
our implementation will not disrupt normal system operation.
Finally, we would like to point out that Windows does not save counter val-
ues during context switches. In other word, the count stored in the performance
counter is a system-wide count, instead of the count for current process since its
last inspection. This is both an advantage and a disadvantage of our system. On
the positive side, random inspection provides protection for the entire system
by default. This is because inspection can occur in any process that executes in
user space, thus no process will be left unprotected. Furthermore, this introduces
randomness to our system and makes inspection unpredictable. Though we per-
form inspections at a ﬁxed (and even possibly known) frequency, the attacker
cannot predict when an inspection will occur. This is because process scheduling
is non-deterministic in general, and thus it is impossible to determine when the
attacked process will be scheduled to run. This means the attacker has no way
to tell what the counter value is when the injected code starts executing2. In
other word, the attacker cannot tell when the next inspection will occur. This
randomness in inspection renders even extremely short injected code suscepti-
ble to detection with non-zero probability. On the negative side, this by default
system-wide inspection implies inevitable inspection on many supposedly safe
processes, which leads to some ineﬃciency. It is also impossible to perform in-
spection with diﬀerent frequency for diﬀerent processes. This problem can be
solved if we can intercept context switches in Windows.
3.2 The WindRain System
After discussing how random inspection is actually achieved, we now show our
implementation of intrusion detection under the random-inspection mechanism.
In the following, we present the details of our WindRain system.
The most important component of the WindRain system is a device driver that
runs on Windows systems. We have also written an application that loads the driver
and displays data received from the driver in a timely manner (most importantly,
notiﬁcation about intrusions). The driver is responsible for setting up the system
to perform random inspection, i.e., conﬁguring the performance-counter facility. It
2 Intel CPUs of P6 family or later can be conﬁgured so that performance counter
values are readable only in kernel mode.
On Random-Inspection-Based Intrusion Detection
173
also registers an interrupt-service routine to handle performance-counter overﬂow.
This interrupt service routine is the part that actually performs intrusion detection.
On performance counter overﬂow, an interrupt is generated and the interrupt
service routine registered will be called. The interrupt service routine starts by
restoring the performance counter to its initial value, -k. It will then clear some
ﬂags so that the counter can start upon return to the user space. After that, the
real intrusion detection starts. Among the arguments passed to the interrupt
service routine is the PC value of the interrupted instruction. WindRain will
determine whether that PC value corresponds to a memory location that holds
code or one that holds data (in the latter case, WindRain will mark it as an
intrusion). The decision is made by looking up a Windows internal data structure
called Virtual Address Descriptor tree.
To keep track of the usage of the virtual address space in each process, Win-
dows records information about each allocated (or “reserved”) virtual memory
region in a data structure called Virtual Address Descriptor (VAD). Among the
information stored in the VAD are the start address, end address and the protec-
tion attribute for the corresponding memory region. To facilitate fast look-up, all
VADs for a process are arranged as a self-balancing binary tree. Memory regions
allocated for code usually have very diﬀerent protection attributes from those
for data (usually memory for code are copy-on-write, while memory for data are
simply writable). As a result, given a PC value, we can search through the VAD
tree of the corresponding process in an eﬃcient manner. From the protection
attribute of the VAD found, we determine whether that address contains code
or data. If a PC value observed at an inspection point corresponds to a data
region in memory, WindRain will mark it an intrusion. Currently, WindRain is
a purely detection system, it does not have any capability to stop any intru-
sion from proceeding. Upon detecting an intrusion, the interrupt service routine
will notify the application part of WindRain to display some information about
the intrusion on the screen. Due to its inability to respond to attacks detected,
WindRain is quite susceptible to DoS attacks. In other words, the attacker can
try to turn oﬀ WindRain. We believe WindRain can perform reasonable self-
defense when equipped with certain auto-response capability. Nonetheless, we
believe the most ideal protection for WindRain (and possible any IDS) is from
the underlying OS: having Windows consider WindRain as a core component
(like lsass.exe, the termination/failure of which will lead to a system crash).
4 Analysis: Why WindRain Works?
Before we present the results of our experimental evaluation on WindRain, we ﬁrst
analyze the probability of WindRain detecting diﬀerent code injection attacks. We
will also discuss what makes it so likely for WindRain to detect intrusions.
The simplest way to perform this analysis is to consider inspection as a Poisson
process, and calculate the probability that one or more inspection will occur
during the entire execution of the injected code. Suppose we are performing
inspection every k instructions (with 800 ≤ k ≤ 2400), and the injected code
174
S.P. Chung and A.K. Mok
− y
k .
requires the execution of y instructions. The probability of detection is then
Pd = 1 − P (0) = 1 − e
The above analysis does not assume continuous execution of the injected code.
Therefore the probability computed is valid even if context switching occurs dur-
ing the execution of the injected code. It also applies to the case where the injected
code calls some Windows library from time to time. A point worth noting here is
that if an inspection occurs during the execution of a library function on behalf of
the injected code, the intrusion will not be detected. Another very important point
is that the above analysis is only valid if the attacker cannot predict when the next
inspection will occur. Otherwise, it is (in theory) possible for the attacker to evade
detection by calling certain library functions when an inspection is expected.
We should note that the Poisson-based analysis is overly pessimistic. Suppose
the injected code executes without making library calls for an interval that we
call “very visible period” (VVP). Let us make the following assumptions about
this VVP:
1. this interval is more than k instructions long
2. context switch occurs in the ﬁrst k instructions of this VVP with probability
less than 1%
With these two assumptions, we argue that the actual detection probability
Pd1 ≥ 0.99 + 0.01 ∗ Pd, where Pd is the detection probability predicted for the
corresponding k and y by our initial Poisson analysis. This is because in 99%
of time, no context switch occurs in the ﬁrst k instructions of the VVP. Since
the injected code is “trapped” in the VVP for more than k instructions, we can
guarantee an inspection will occur while the injected code is executing in “data
space”. In this case, WindRain will detect the attack with probability one. The
second term of Pd1 accounts for the remaining 1% of time where a context switch
does occur in the VVP and we have to fall back to our Poisson analysis.
thus show that Pd1 ≥ 0.99.
In the following, we shall validate our two assumptions about the VVP and
We start with defending our ﬁrst assumption. From our study of Windows shell-
code, we ﬁnd that they usually arrive encoded. This helps the shellcode evading
signature based IDS and systems like [33]. As a result, before performing any “in-
teresting” activities, the injected code has to decode itself ﬁrst. This decoding has
complexity linear to the injected code’s length, and can take up a few hundred in-
structions. Since there appears no library function for this decoding process, the
injected code will not execute any library function during the decode phase.
A more important reason why the injected code does not execute any library
functions is that it may not know the address of any library functions. Due to
the extensive use of dlls in Windows, the addresses of library functions vary
across diﬀerent machines. This is a very well known fact in the black-hat society
[29]. As a result of the dynamic nature of library loading, static address values
cannot be used for library calls. Otherwise, there will be portability issues for
the resulting shellcode. As a result, in order to execute any library functions,
the injected code has to dynamically search for the needed function addresses.
As discussed in [29], in order to do this in a portable manner, the complexity
On Random-Inspection-Based Intrusion Detection
175
of the library-function-locating process is usually linear to both the number of
functions in the desired library and the length of each function name. Such
complexity will imply a very signiﬁcant number of instructions executed before
ﬁnding the address of one single library function.
From our discussion above, portability is the major issue that “traps” the in-
jected code in its VVP for an extensive amount of time. So a natural question is: is
it possible for the shellcode to sacriﬁce certain portability to speed up this process
and evade detection by WindRain? At ﬁrst sight, it appears to be a feasible solu-
tion for the attacker: certain library functions do stay in the same address across a
large number of machines. Furthermore, there are various values related to func-
tion addresses that are static over diﬀerent Windows versions. It is thus possible
to utilize these static values to speed up the process to constant time and evade
detection. In fact, the IAT technique given in [29] implements this idea.
However, we argue that any approach of this kind can be thwarted with simple
obfuscation techniques. This is because Windows does not depend on these values
being static to function properly. As a result, any obfuscation of these values can
impose serious portability problem in the shellcode, without adversely aﬀecting
the operations of Windows. For example, any shellcode that uses hard-coded
address for library functions can be thwarted by a simple application that rebase
every library on the system. In this case, a shellcode that works for one machine