-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
-   您已在进程或应用程序中想要监控的进程或应用程序中对应位置设置了一个优良：
    ``` screen
    # perf probe -x /path/to/executable -a function
    Added new event:
      probe_executable:function   (on function in /path/to/executable)
    You can now use it in all perf tools, such as:
            perf record -e probe_executable:function -aR sleep 1
    ```
:::
::: itemizedlist
**流程**
-   使用 uprobe 创建循环缓冲作为触发器事件：
    ``` screen
    # perf record --overwrite -e cycles --switch-output-event probe_executable:function ./executable
    [ perf record: dump data: Woken up 1 times ]
    [ perf record: Dump perf.data.2021021012231959 ]
    [ perf record: dump data: Woken up 1 times ]
    [ perf record: Dump perf.data.2021021012232008 ]
    ^C[ perf record: dump data: Woken up 1 times ]
    [ perf record: Dump perf.data.2021021012232082 ]
    [ perf record: Captured and wrote 5.621 MB perf.data. ]
    ```
    这个示例启动可执行文件并收集在 `-e`{.literal} 选项后指定的 cpu
    周期，直到 `perf`{.literal} 检测到 uprobe，在
    `--switch-output-event`{.literal} 选项后指定的触发器事件。此时，perf
    `会提取`{.literal}
    循环缓冲区中所有数据的快照，并将其存储在由时间戳标识的唯一
    `perf.data`{.literal} 文件中。本例生成了总计 2 个快照，最后的
    `perf.data`{.literal} 文件是通过按
    [**Ctrl**]{.keycap}+[**c**]{.keycap} 强制的。
:::
:::
:::
[]{#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance.html#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance}第 29 章 从正在运行的 perf 收集器添加和删除追踪点，而不停止或重启 perf {.title}
:::
通过使用控制管道界面在运行的 `perf`{.literal}
收集器中启用和禁用不同的追踪点，您可以动态调整要收集的数据，而无需停止或重启
`perf`{.literal}。这样可确保您不会丢失原本会在停止或重启过程中记录的性能数据。
::: section
::: titlepage
# []{#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance.html#adding-tracepoints-to-a-running-perf-collector-without-stopping-or-restarting-perf_turning-tracepoints-on-and-off-without-stopping-or-restarting-perf}在运行的 perf 收集器中添加追踪点，而不停止或重启 perf {.title}
:::
使用控制管道接口向正在运行的 `perf`{.literal}
收集器添加追踪点，以调整您记录的数据，而无需停止 `perf 并`{.literal}
丢失性能数据。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
:::
::: orderedlist
**流程**
1.  配置控制管道接口：
    ``` screen
    # mkfifo control ack perf.pipe
    ```
2.  使用控制文件设置和您要启用的事件运行 `perf 记录`{.literal} ：
    ``` screen
    # perf record --control=fifo:control,ack -D -1 --no-buffering -e 'sched:*' -o - > perf.pipe
    ```
    在本例中，在 `-e`{.literal} 选项启动带有调度程序事件的
    `perf 记录`{.literal} 后声明 `'sched:*'`{.literal}。
3.  在第二个终端中，启动控制管道的读取端：
    ``` screen
    # cat perf.pipe | perf --no-pager script -i -
    ```
    启动控制管道读取端会在第一个终端中触发以下信息：
    ``` screen
    Events disabled
    ```
4.  在第三个终端中，使用控制文件启用追踪点：
    ``` screen
    # echo 'enable sched:sched_process_fork' > control
    ```
    此命令会触发 `perf`{.literal}
    为声明的事件扫描控制文件中的当前事件列表。如果存在该事件，则会启用追踪点，并在第一个终端中显示以下信息：
    ``` screen
    event sched:sched_process_fork enabled
    ```
    启用追踪点后，第二个终端会显示来自 `每个检测到`{.literal}
    追踪点的输出：
    ``` screen
    bash 33349 [034] 149587.674295: sched:sched_process_fork: comm=bash pid=33349 child_comm=bash child_pid=34056
    ```
:::
:::
::: section
::: titlepage
# []{#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance.html#removing-tracepoints-from-a-running-perf-collector-without-stopping-or-restarting-perf_turning-tracepoints-on-and-off-without-stopping-or-restarting-perf}从正在运行的 perf 收集器中删除追踪点，而不停止或重启 perf {.title}
:::
使用控制管道接口从正在运行的 `perf`{.literal}
收集器中删除追踪点，以减少您正在收集的数据范围，而无需停止
`perf 并`{.literal} 丢失性能数据。
::: itemizedlist
**先决条件**
-   安装 `perf`{.literal} 用户空间工具。如需更多信息，请参阅 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}。
-   您已通过控制管道接口为正在运行的 `perf`{.literal}
    收集器添加了追踪点。如需更多信息，请参阅 [在不停止或重启 perf
    的情况下将追踪点添加到正在运行的 perf
    收集器](#turning-tracepoints-on-and-off-without-stopping-or-restarting-perf_monitoring-and-managing-system-status-and-performance.html#adding-tracepoints-to-a-running-perf-collector-without-stopping-or-restarting-perf_turning-tracepoints-on-and-off-without-stopping-or-restarting-perf "在运行的 perf 收集器中添加追踪点，而不停止或重启 perf"){.link}。
:::
::: itemizedlist
**流程**
-   删除追踪点：
    ``` screen
    # echo 'disable sched:sched_process_fork' > control
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本例假定您之前已将调度程序事件加载到控制文件中，并启用了 tracepoint
    `sched:sched_process_fork`{.literal}。
    :::
    此命令会触发 `perf`{.literal}
    为声明的事件扫描控制文件中的当前事件列表。如果存在该事件，则禁用追踪点，并在用来配置控制管道的终端中显示以下消息：
    ``` screen
    event sched:sched_process_fork disabled
    ```
:::
:::
:::
[]{#profiling-memory-allocation-with-numastat_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#profiling-memory-allocation-with-numastat_monitoring-and-managing-system-status-and-performance.html#profiling-memory-allocation-with-numastat_monitoring-and-managing-system-status-and-performance}第 30 章 使用 numastat 分析内存分配 {.title}
:::
使用 `numastat`{.literal} 工具时，您可以显示系统中内存分配的统计数据。
`numastat`{.literal} 工具单独显示每个 NUMA
节点的数据。您可以使用这些信息来调查系统的内存性能或系统中不同内存策略的有效性。
::: section
::: titlepage
# []{#profiling-memory-allocation-with-numastat_monitoring-and-managing-system-status-and-performance.html#default-numastat-statistics_profiling-memory-allocation-with-numastat}默认 numastat 统计 {.title}
:::
默认情况下，num `astat`{.literal} 工具显示有关每个 NUMA
节点的这些类别数据的统计信息：
::: variablelist
[`numa_hit`{.literal}]{.term}
:   成功分配给此节点的页面数。
[`numa_miss`{.literal}]{.term}
:   由于预期节点上的内存不足，在此节点上分配的页面数量。每个
    `numa_miss`{.literal} 事件在另一个节点上都有对应的
    `numa_foreign 事件`{.literal}。
[`numa_foreign`{.literal}]{.term}
:   最初用于此节点的页面数量改为分配给另一节点。每个
    `numa_foreign`{.literal} 事件在另一个节点上都有对应的
    `numa_miss`{.literal} 事件。
[`interleave_hit`{.literal}]{.term}
:   成功分配给此节点的 interleave 策略页面数量。
[`local_node`{.literal}]{.term}
:   此节点上的进程在此节点上成功分配的页面数。
[`other_node`{.literal}]{.term}
:   另外一个节点上的进程在此节点上分配的页面数量。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
高 `numa_hit`{.literal} 值和低 `numa_miss`{.literal}
值（相互相对）表示最佳性能。
:::
:::
::: section
::: titlepage
# []{#profiling-memory-allocation-with-numastat_monitoring-and-managing-system-status-and-performance.html#viewing-memory-allocation-with-numastat_profiling-memory-allocation-with-numastat}使用 numastat 查看内存分配 {.title}
:::
您可以使用 `numastat`{.literal} 工具查看系统的内存分配。
::: itemizedlist
**先决条件**
-   安装 `numactl`{.literal} 软件包：
    ``` screen
    # {PackageManagerCommand} install numactl
    ```
:::
::: itemizedlist
**流程**
-   查看系统的内存分配：
    ``` screen
    $ numastat
                                 node0         node1
    numa_hit                  76557759      92126519
    numa_miss                 30772308      30827638
    numa_foreign              30827638      30772308
    interleave_hit              106507        103832
    local_node                76502227      92086995
    other_node                30827840      30867162
    ```
:::
::: itemizedlist
**其它资源**
-   `numastat(8)`{.literal} 手册页
:::
:::
:::
[]{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance}第 31 章 配置操作系统以优化 CPU 使用率 {.title}
:::
这部分论述了如何配置操作系统以优化其工作负载中的 CPU 利用率。
::: section
::: titlepage
# []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#tools-for-monitoring-and-diagnosing-processor-issues_configuring-an-operating-system-to-optimize-cpu-utilization}监控和诊断处理器问题的工具 {.title}
:::
以下是 Red Hat Enterprise Linux 8
中用来监控和诊断处理器相关性能问题的工具：
::: itemizedlist
-   `turbostat`{.literal}
    工具以指定间隔打印计数器结果，以帮助管理员发现服务器中的意外行为，如过量功率、进入深度睡眠状态失败或系统管理中断(SMI)不必要地创建。
-   `numactl`{.literal}
    实用程序提供了多个选项来管理处理器和内存关联性。`numactl`{.literal}
    软件包包含 `libnuma`{.literal} 库，为内核支持的 NUMA
    策略提供简单的编程接口，并且比 `numactl`{.literal}
    应用更精细地调整。
-   `numastat`{.literal} 工具显示针对操作系统及其进程的每 NUMA
    节点内存统计信息，并显示管理员进程内存是分散到整个系统中还是集中到特定的节点上。此工具由
    `numactl`{.literal} 软件包提供。
-   `numad`{.literal} 是自动 NUMA 关联性管理守护进程。它监控系统中 NUMA
    拓扑和资源使用情况，以便动态改进 NUMA 资源的分配和管理。
-   `/proc/interrupts`{.literal}
    文件显示中断请求(IRQ)编号、系统中各个处理器处理的类似中断请求数、发送中断的类型，以及响应所列中断请求的逗号分隔设备列表。
-   `pqos`{.literal} 实用程序位于 `intel-cmt-cat`{.literal}