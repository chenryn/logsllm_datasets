we also achieve the following important properties, previously
only attained in passive schemes in the semi-honest setting.
• Low client storage and communication overhead: MACAO
offers O(1)
compared with
O(log N ) of the most efﬁcient passive ORAM schemes (e.g.,
[64], [53]). Moreover, MACAO features a smaller block size
than other active ORAM schemes that also achieve the constant
client-bandwidth blowup (e.g., S3ORAM [33], Onion-ORAM
[22], Bucket-ORAM [25]). Observe that while asymptotically
comparable to [22], [25], in practice MACAO schemes are
more efﬁcient since they feature a smaller block size.
• Low computational overhead at both client and server sides:
In MACAO, the client and server(s) only perform bit-wise
and arithmetic operations (e.g., addition, multiplication) during
the online access. This is more efﬁcient than other ORAM
schemes requiring heavy computation due to partially/fully
HE [22]. MACAO offers up to three orders of magnitude
improvement over Onion-ORAM [22] thanks to the fact that
all HE operations in MACAO are pre-computed in the ofﬂine
phase between the servers and independent of the client and
on-line (read or eviction) access phase. Therefore, the online
access latency of Πspdz is not impacted by the delay of HE.
On the other hand, Πrss does not require any pre-computation
or HE operations. Due to the efﬁcient computation at both
client and server sides and the low client-bandwidth overhead,
MACAO achieves low end-to-end delay to access a large block
in a large database in real-world settings.
As a ﬁnal remark, observe that in this paper, we focus on
oblivious access in the single-client setting, where the client
is fully trusted. This is in contrast to some of the distributed
ORAM research targeting the fully distributed model, where
there is no trusted party (i.e., client) at all [24], [67], [23],
[38]. The problem of multi-client access to ORAM as in [41],
[44], [45], [56], [70] is also outside of the scope of this study.
We provide a further discussion of these works in §VI.
II. PRELIMINARIES
Notation. x $← S denotes that x is randomly and uniformly
selected from S. |S| denotes the cardinality/size of S. We
denote a ﬁnite ﬁeld as Fp, where p is a prime. Vectorized
variables are denoted by bold symbols. Given a, B as vec-
torized variables, a × B denotes the matrix multiplication.
A[i, j] denotes accessing the element at row i and column j
of A. Unless otherwise stated, a· b (or ab) denotes the scalar
multiplication, and all arithmetic operations are performed over
Fp, and the index starts from 0.
A. Secret Sharing
A secret sharing scheme allows a secret value to be shared
and computed securely among multiple untrusted parties. We
recall an additive secret sharing scheme, which comprises two
algorithms as follows.
• (s0, . . . , s(cid:96)−1) ← Create(s, (cid:96)): Given a secret s ∈ Fp and a
number of parties (cid:96) as input, it outputs random values si as
i si. We denote the
the shares for (cid:96) parties such that s = (cid:80)
additive share of a value s for party Pi as(cid:74)s(cid:75)i, i.e.,(cid:74)s(cid:75)i = si.
• s ← Recover(cid:0)s0, . . . , s(cid:96)−1
(cid:1): Given (cid:96) shares as input,
returns the secret as s ←(cid:80)
it
i si.
((cid:104)s(cid:105)0, . . . , (cid:104)s(cid:105)(cid:96)−1) ← AuthCreate(α, s, (cid:96)):
1: ((cid:74)s(cid:75)0, . . . ,(cid:74)s(cid:75)(cid:96)−1) ← Create(s, (cid:96))
2: ((cid:74)αs(cid:75)0, . . . ,(cid:74)αs(cid:75)(cid:96)−1 ← Create(αs, (cid:96))
3: return ((cid:104)s(cid:105)0, . . . , (cid:104)s(cid:105)(cid:96)−1), where (cid:104)s(cid:105)i ← ((cid:74)s(cid:75)i,(cid:74)αs(cid:75)i)
s ← AuthRecover(cid:0)α, ((cid:104)s(cid:105)0, . . . , (cid:104)s(cid:105)(cid:96)−1)(cid:1):
1: s ← Recover((cid:74)s(cid:75)0, . . . ,(cid:74)s(cid:75)(cid:96)−1)
2: σ ← Recover((cid:74)αs(cid:75)0, . . . ,(cid:74)αs(cid:75)(cid:96)−1)
3: if αs (cid:54)= σ then return ⊥
4: return s
Fig. 1: Authenticated secret sharing [20].
identical and uniform.
Security. Additive secret sharing is t-private in the sense that
no set of t or fewer shares reveals any information about the
secret. More formally, ∀s, s(cid:48) ∈ Fp, ∀L ⊆ {0, . . . , (cid:96) − 1} such
that |L| ≤ t and for any S = {s0, . . . , s|L|−1} where si ∈
Fp, the probability distributions of (cid:8)si∈L : (s0, . . . , s(cid:96)−1) ←
Create(s, (cid:96))(cid:9) and(cid:8)s(cid:48)
(cid:96)−1) ← Create(s(cid:48), (cid:96))(cid:9) are
additive shares(cid:74)s1(cid:75) and(cid:74)s2(cid:75) and c ∈ Fp, each party can locally
as(cid:74)s1 + s2(cid:75) ←(cid:74)s1(cid:75) +(cid:74)s2(cid:75) and(cid:74)cs(cid:75) ← c(cid:74)s(cid:75).
Additive homomorphic properties. Additive secret sharing
offers additive homomorphic properties as follows. Given
compute the additive share of addition and scalar multiplication
i∈L : (s(cid:48)
0, . . . , s(cid:48)
i + r(1)
i + r(2)
i+1) and sends (r(i)
0 + r(i)
i ) and (r(i)
(cid:74)uv(cid:75)i ← r(0)
Homomorphic multiplication via replicated secret sharing.
Replicated Secret Sharing (RSS) scheme enables homomor-
phic multiplication over additive shares with information-
theoretic security [35]. In the three-party setting, each party
Si ∈ {S0, S1, S2} stores two additive shares of a secret s ∈ Fp,
(cid:74)s(cid:75)i and (cid:74)s(cid:75)i+1
1. To compute (cid:74)uv(cid:75) from (cid:74)u(cid:75) and (cid:74)v(cid:75), RSS
xi ←(cid:74)u(cid:75)i(cid:74)v(cid:75)i+(cid:74)u(cid:75)i(cid:74)v(cid:75)i+1+(cid:74)u(cid:75)i+1(cid:74)v(cid:75)i and represents xi with
proceeds as follows. First, each party Si (locally) computes
and(cid:74)uv(cid:75)i+1 ← r(0)
the addition of random values as xi = r(i)
2 . Each
Si retains (r(i)
, r(i)
i−1, r(i)
i+1) to
i
other parties Si−1 and Si+1, respectively. Finally, each Si ob-
tains the shares of multiplication result by (locally) computing
i+1 + r(2)
i+1.
Authenticated homomorphic multiplication in the online/
ofﬂine model. We recall the authenticated secret sharing in
[20], in which each secret s is attached with an information-
theoretic Message Authenticated Code (MAC) computed as
αs, where α is a global MAC key owned by the dealer. We
denote the authenticated share of a secret s as (cid:104)·(cid:105), which
contains the additive share of s and the additive share of
αs as (cid:104)s(cid:105) = ((cid:74)s(cid:75),(cid:74)αs(cid:75)), where (cid:74)αs(cid:75) is created in the same
manner as (cid:74)s(cid:75). Figure 1 presents the algorithms to create
authenticated shares and recover the secret. We present a
homomorphic multiplication protocol with malicious security,
which follows the pre-computation model [20], [36] using
Beaver multiplication triples [7] of the form (a, b, c), where
c = ab. In this setting, each untrusted party Si owns a
untrusted parties harness homomorphic encryption and zero-
knowledge protocols [36], [20] to compute the authenticated
share of the Beaver triple and its MAC in such a way that
no party learns about (a, b, c) and α. To this end, each Si
share of the MAC key as (cid:74)α(cid:75)i. In the ofﬂine phase, all
obtains ((cid:104)a(cid:105)i,(cid:104)b(cid:105)i,(cid:104)c(cid:105)i), where (cid:104)a(cid:105)i = ((cid:74)a(cid:75)i,(cid:74)αa(cid:75)i) and so
forth. In the online phase, given (cid:104)u(cid:105) = ((cid:74)u(cid:75),(cid:74)αu(cid:75)) and
1 + r(i)
i
, r(i)
i
i+1 + r(1)
1We note that the subscript index in this case is modulo 3.
3
(locally) computes the authenticated share of the multiplication
(cid:104)v(cid:105) = ((cid:74)v(cid:75),(cid:74)αv(cid:75)) and all parties want
each Si ﬁrst (locally) computes (cid:74)(cid:75)i ← (cid:74)u(cid:75)i −(cid:74)a(cid:75)i, and
(cid:74)ρ(cid:75)i ←(cid:74)v(cid:75)i −(cid:74)b(cid:75)i. All parties come together to open  and
ρ by each Si broadcasting (cid:74)(cid:75)i and (cid:74)ρ(cid:75)i. Finally, each Si
as (cid:104)uv(cid:105)i = ((cid:74)uv(cid:75)i,(cid:74)αuv(cid:75)i), where (cid:74)uv(cid:75)i ← (cid:74)c(cid:75)i + (cid:74)b(cid:75)i +
ρ(cid:74)a(cid:75)i + ρ and(cid:74)αuv(cid:75)i ←(cid:74)αc(cid:75)i + (cid:74)σb(cid:75)i + ρ(cid:74)σb(cid:75)i + ρ(cid:74)α(cid:75)i.
(cid:74)αxj(cid:75)i is the share of its MAC to Si. Let bj be a random
x ←(cid:80)
All parties come together to open ω as ω ←(cid:80)
j bj(cid:74)αxj(cid:75)i and(cid:74)ω(cid:75)i ←(cid:74)y(cid:75)i− x(cid:74)α(cid:75)i.
i(cid:74)ω(cid:75)i. If ω = 0,
At the end of the protocol, all parties can verify the integrity
of opened values as follows. Let xj be an opened value and
j bjxj,(cid:74)y(cid:75)i ←(cid:80)
value that all parties agree on. Each Si
locally computes
to compute (cid:104)uv(cid:105),
all the opened values pass the integrity check.
B. Multi-server Private Information Retrieval
Private Information Retrieval (PIR) enables retrieval of an
item yi from an a set of items Y = (y0, . . . , yN−1), without re-
vealing i to the data storage provider. We present a multi-server
PIR protocol [18], [29] between a client and (cid:96) servers each
storing a replicate of Y as follows. Given the index idx of the
record to be retrieved and the number of records N, the client
generates Q = (q0, . . . , qN−1) ∈ {0}N , and then sets qidx = 1.
The client generates random queries Xi = (xi,0, . . . , xi,N−1)
i=0 Xi, and then sends Xi to Si. Each Si
j xi,j · yj. The client
such that Q = (cid:80)(cid:96)
computes and responds with Ri = (cid:80)
obtains yidx by computing yidx =(cid:80)
i Ri.
Security. A multi-server PIR protocol is correct if the client
always obtains the correct item with probability 1. A multi-
server PIR protocol is t-private if any coalition of t servers
reveals no information about the index of the item [29].
C. Tree-ORAM
We recall the Tree-ORAM paradigm by Shi et al. [59].
Basically, data blocks are organized into a full binary tree
stored at the untrusted server, where each block is assigned
to a path pid selected uniformly at random. A tree of height
H can store up to N = A·2H+1 blocks, where A is a constant.
Each node in the tree is called a “bucket”, which has Z slots to
contain data blocks. The path information of blocks in the tree
is stored in a position map component pm. There are two main
subroutines in the tree-ORAM access structure: retrieval and
eviction. To access a block, the client ﬁrst reads the block by
executing the retrieval protocol on the path of the block stored
in the position map. The client updates the block and assigns it
to a new path selected uniformly at random. Finally, the client
executes the eviction protocol on a random/deterministic path,
which writes the block back to the top levels of the tree and
obliviously pushes blocks down from top to bottom levels.
Circuit-ORAM eviction. We recall an efﬁcient eviction
strategy by Wang et al. in [66] over the ORAM-tree structure,
which attempts to push the blocks on the eviction path towards
the leaf as much as possible in only a single scan from the
root to leaf. For efﬁciency, at any time of operation, the client
should hold at most one block to be pushed down, and it should
be dropped to somewhere before the client can pick another
block. Therefore, the ideal way is to always pick the deepest
blocks so that they can have a higher chance to be dropped
later. To achieve this, the client scans the meta-data component
of the eviction path to prepare which blocks should be picked
4
and dropped at each level of the path. Once the client begins
to scan the block starting from the root, the client downloads
the entire bucket in the currently scanning level to make the
drop and pick operations oblivious.
III. SYSTEM AND SECURITY MODELS
System architecture. Our system model consists of a client
and (cid:96) servers (S0, . . . , S(cid:96)−1). We assume that the channels
between all the players are pairwise-secure. That is, no player
can tamper with, read, or modify the contents of the com-
munication channel of other players. We deﬁne a multi-server
ORAM scheme as follows.
Deﬁnition 1 (Multi-server ORAM). A Multi-server ORAM
scheme is a tuple of
two PPT algorithms ORAM =
(Setup, Access) as follows.
• (cid:126)T ← Setup(DB, 1λ): Given database DB and security pa-
rameter λ as input, it outputs a distributed data structure (cid:126)T.
• data
(cid:48) ← Access(op, bid, data): Given an operation type
op ∈ {read, write}, an ID bid of the block to be accessed,
a data data, it outputs a block content data
(cid:48) to the client.
the protocol
Multi-server ORAM security model. The client
is the
only trusted party. The servers are untrusted and can behave
maliciously, in which they can tamper with the inputs and/or
outputs of the ORAM protocol. Our security model captures
the privacy and veriﬁability of the honest client in the presence
of a malicious adversary corrupting a number of servers in
the system. The privacy property ensures that the adversary
cannot infer the client access pattern or database content. The
veriﬁability ensures that the client is assured to gain access to
the trustworthy data from the server with integrity guarantee,
and they can detect and abort
if one of the
servers cheats. Following the simulation-based security model
in multi-party computation [13] and single-server ORAM [22],
we deﬁne the security of multi-server ORAM in the malicious
setting by augmenting the S3ORAM security model [33] to
account for malicious adversaries as follows.
Deﬁnition 2 (Simulation-based multi-server ORAM security
with veriﬁability). We ﬁrst deﬁne the ideal and real worlds
as follows.
Ideal world. Let Foram be an ideal functionality, which
maintains the latest version of the database on behalf of the
client, and answers the client’s requests as follows.
• Setup: An environment Z provides a database DB to the
client. The client sends DB to the ideal functionality Foram.
Foram notiﬁes the simulator Soram the completion of the setup
operation and the DB size, but not the DB content. Soram
returns ok or abort to Foram. Foram then returns ok or ⊥ to
the client accordingly.
• Access: In each time step, the environment Z speciﬁes an
operation op ∈(cid:8)read(bid,⊥), write(bid, data)(cid:9) as the client’s
input, where bid is the ID of the block to be accessed and
data is the block data to be updated. The client sends op to
Foram. Foram notiﬁes the simulator Soram (without revealing
the operation op to Soram). If Soram returns ok to Foram, Foram
(cid:48) ← DB[bid] to the client, and updates DB[bid] ←
sends data
data accordingly if op = write. The client then returns the
(cid:48) to the environment Z. If Soram returns abort
speciﬁes an input op ∈ (cid:8)read(bid,⊥), write(bid, data)} to
block data data
to Foram, Foram returns ⊥ to the client.
In the real world, an environment Z gives
Real world.
the client a database DB. The client executes Setup protocol
with servers (S0, . . . , S(cid:96)−1) on DB. At each time step, Z
the client. The client executes Access protocol with servers
(S0, . . . , S(cid:96)−1). The environment Z gets the view of the
adversary A after every operation. The client outputs to the
environment Z the data of block with ID bid being accessed
or abort (indicating abort).
We say that a protocol ΠF securely realizes the ideal
functionality Foram in the presence of a malicious adversary
corrupting t servers iff for any PPT real-world adversary that
corrupts up to t servers, there exists a simulator Soram, such that
for all non-uniform, polynomial-time environment Z, there
exists a negligible function negl such that
| Pr[REALΠF ,A,Z (λ) = 1]−Pr[IDEALForam,Soram,Z (λ) = 1]| ≤ negl(λ).
IV. THE PROPOSED FRAMEWORK
In this section, we describe our ORAM framework in
detail. We ﬁrst present how state-of-the-art active ORAM
schemes are vulnerable against the active adversary. We then
develop sub-protocols that are used to build our framework.
A. ORAM in the Malicious Setting
In passive ORAM schemes (e.g., [64], [66], [59]), the