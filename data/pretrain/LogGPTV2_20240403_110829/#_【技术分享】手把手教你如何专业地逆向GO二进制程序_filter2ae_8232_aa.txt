# 【技术分享】手把手教你如何专业地逆向GO二进制程序
##### 译文声明
本文是翻译文章，文章来源：rednaga.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[啦咔呢](http://bobao.360.cn/member/contribute?uid=79699134)
预估稿费：170RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
GO二进制程序很不可思议，至少今天一切从它讲起。当深入研究一些名为Rex的Linux恶意软件时，我意识到比起我想要的，我可能需要先理解更多的东西。就在前一周，我一直在逆向用go语言编写的Linux
Lady，由于它不是一个剥离过的二进制文件，所以这很容易。显然，二进制文件是相当大的，也有许多我并不在乎的多余方法，虽然我真的只是不明白为什么。老实说，我还没有深入到Golang代码，也没有真正在Go中写很多代码，所以从表面意义上来看，这些信息有部分可能是错误的;
因为这只是我在逆向一些ELF格式Go二进制程序的经验！如果你不想读整篇文章或者只想滚动到底部去获得一个完整报告的链接，那么只需点这里。
为了解释我的案例，我要使用一个非常简单的“Hello，World！”的例子并且我还参考了Rex恶意软件。代码和Make文件非常简单；
**Hello.go**
    package main
    import "fmt"
    func main() {
        fmt.Println("Hello, World!")
    }
**Makefile**
    all:
    GOOS=linux GOARCH=386 go build -o hello-stripped -ldflags "-s" hello.go
    GOOS=linux GOARCH=386 go build -o hello-normal hello.go
因为我在OSX机器上做这些工作，显然需要上面的GOOS和GOARCH变量来正确地交叉编译。第一行还添加了ldflags剥离二进制文件的选项。这样我们可以用剥离和不剥离的两种方式来分析相同的可执行文件。之后复制这些文件，运行make，然后在反汇编器中打开你所选择的文件，对于这个博客，我打算使用IDA
Pro。如果我们在IDA Pro中打开未剥离过的二进制文件，我们可以看到如下；
那么，我们的5行代码已经转化成2058个函数。越过所有运行时执行的代码，我们在main()函数上也没有什么有趣的事发生。如果进一步深究，发现其实我们感兴趣的代码实际是在main_main里面；
这样很好，因为我真的不想看过多的代码。加载的字符串看起来也有点奇怪，虽然IDA似乎已经很好地识别了必要的字节。我们可以很容易地看到加载字符串实际上是一组三个mov指令；
    String load（字符串加载）
    mov     ebx, offset aHelloWorld ; "Hello, World!"
    mov     [esp+3Ch+var_14], ebx ; 把字符串放到该位置上
    mov     [esp+3Ch+var_10], 0Dh ; 字符串长度
这并不是完全颠覆性的，虽然我其实不假思索的说我以前就已经看到过这样的事情。我们也需要继续注意它，因为之后这将继续处理。引起我注意的另一个代码是runtime_morestack_context的调用;
    morestack_context
    loc_80490CB:
    call    runtime_morestack_noctxt
    jmp     main_main
这种风格的代码块似乎总是在函数的结尾，它似乎总是循环回到同一个函数的顶部。这可以通过查看对此函数的交叉引用来验证。好了，现在我们知道IDA
Pro可以处理未剥离的二进制文件，让我们加载相同的代码，但是这次是剥离的版本。
我们随即看到了一些结果，好吧，让我们姑且把它们称为“差异”。这里有1329个函数定义，现在通过查看导航工具栏看到一些未定义的代码。幸运的是，IDA仍然能够找到我们想寻找的字符串加载，然而这个函数现在似乎不太好处理。
我们现在没有更多的函数名称了，然而，函数名称似乎保留在二进制特定的节里，如果我们给main.main做一个字符串搜索（这将呈现在前面屏幕截图的main_main函数，因为IDA遇到并识别了一个“
. ”）；
    .gopclntab
    .gopclntab：0813E174 db 6Dh; m
    .gopclntab：0813E175 db 61h; a
    .gopclntab：0813E176 db 69h; i
    .gopclntab：0813E177 db 6Eh; n
    .gopclntab：0813E178 db 2Eh; .
    .gopclntab：0813E179 db 6Dh; m
    .gopclntab：0813E17A db 61h; a
    .gopclntab：0813E17B db 69h; i
    .gopclntab：0813E17C db 6Eh; n
好了，这里看起来有些遗留的东西需要去研究。在深入挖掘谷歌搜索结果后进入gopclntab和关于这的推特-一个友好的逆向朋友George
(Egor?)Zaytsev给我看了他的IDA
Pro的脚本重命名函数并添加类型信息。浏览了这些之后，很容易理解这个部分的格式，所以我在一些功能上复制了他的脚本。基本代码如下所示，非常简单，我们看.gopclntab段并跳过前8个字节。然后我们创建一个指针（Qword或Dword，根据二进制是否是64位）。第一组数据实际上给出了.gopclntab表的大小，所以我们知道离进入这个结构有多远。现在我们可以开始处理其余的数据，这些数据出现在（函数）name_offset
后面的function_offset。当我们创建指向这些偏移的指针，并告诉IDA创建字符串，我们只需要确保我们不会传递给MakeString任何损坏的字符，因此我们使用该clean_function_name函数去除任何不好的地方。
**renamer.py**
    def create_pointer(addr, force_size=None):
        if force_size is not 4 and (idaapi.get_inf_structure().is_64bit() or force_size is 8):
            MakeQword(addr)
    return Qword(addr), 8
        else:
    MakeDword(addr)
    return Dword(addr), 4
    STRIP_CHARS = [ '(', ')', '[', ']', '{', '}', ' ', '"' ]
    REPLACE_CHARS = ['.', '*', '-', ',', ';', ':', '/', 'xb7' ]
    def clean_function_name(str):
        # Kill generic 'bad' characters
        str = filter(lambda x: x in string.printable, str)
        for c in STRIP_CHARS:
            str = str.replace(c, '')
        for c in REPLACE_CHARS:
            str = str.replace(c, '_')
        return str
    def renamer_init():
        renamed = 0
        gopclntab = ida_segment.get_segm_by_name('.gopclntab')
        if gopclntab is not None:
            # Skip unimportant header and goto section size
            addr = gopclntab.startEA + 8
            size, addr_size = create_pointer(addr)
            addr += addr_size
            # Unsure if this end is correct
            early_end = addr + (size * addr_size * 2)
            while addr < early_end:
                func_offset, addr_size = create_pointer(addr)
                name_offset, addr_size = create_pointer(addr + addr_size)
                addr += addr_size * 2
                func_name_addr = Dword(name_offset + gopclntab.startEA + addr_size) + gopclntab.startEA
                func_name = GetString(func_name_addr)
                MakeStr(func_name_addr, func_name_addr + len(func_name))
                appended = clean_func_name = clean_function_name(func_name)
                debug('Going to remap function at 0x%x with %s - cleaned up as %s' % (func_offset, func_name, clean_func_name))
                if ida_funcs.get_func_name(func_offset) is not None:
                    if MakeName(func_offset, clean_func_name):
                        renamed += 1
                    else:
                        error('clean_func_name error %s' % clean_func_name)
        return renamed
    def main():
        renamed = renamer_init()
        info('Found and successfully renamed %d functions!' % renamed)
上面的代码将不会真正运行（不用担心，完整的代码可在这个报告找到），但它总体是希望足够简单到可以通读和理解全过程。然而，这仍然不能解决IDA
Pro不知道所有函数的问题。所以这将创建没有被引用的指针。我们现在知道函数的开头，然而我最终看到了（我认为是）一个更简单的方法来定义应用程序中的所有函数。我们可以通过利用runtime_morestack_noctxt函数来定义所有的函数。因为每个函数都使用了这个函数（基本上，它有一个edgecase），如果我们找到这个函数并向后遍历这个函数的交叉引用，那么我们将知道每个函数的位置。对吧？我们已经知道每个函数是从我们刚才解析的段开始的，对吧？好了，现在我们知道函数的结尾，并且在调用之后的下一条指令runtime_morestack_noctxt给我们一个到函数顶部的跳转。这意味着我们应该能够快速地给出一个函数开头和结尾的边界，这就是IDA在从解析函数名称进行区分时所需要的。如果我们打开交叉引用runtime_morestack_noctxt函数的窗口，我们将看到有更多的未定义节也在调用这个函数。总共有1774处引用这个函数的地方，其中的1329个函数已经是从IDA为我们定义出来的，而这由下面的图像显示：
在深入探究多个二进制文件之后，我们可以看到runtime_morestack_noctext总是调用runtime_morestack（随着上下文）。这是我之前引用的edgecase，所以在这两个函数之间，我们应该能够看到二进制中使用其他函数的交叉引用。看两个函数中较大的一个，即runtime_more_stack，多个二进制文件往往有一个有趣的布局；
我注意到的部分是mov large dword ptr ds:1003h,
0，这在我看到的所有64位二进制文件中似乎是比较固定的。而在交叉编译后我注意到32位二进制文件使用mov qword ptr
ds:1003h，因此我们需要寻找一种模式去创建一个“钩子”来向后遍历。幸运的是，我没有看到IDA
Pro定义这个特定函数的失败实例，我们并不需要花费太多的脑力来绘制它或自己去定义它。所以，说得够多了，让我写一些代码来找到这个函数；
    find_runtime_morestack.py
    def create_runtime_ms():
        debug('Attempting to find runtime_morestack function for hooking on...')
        text_seg = ida_segment.get_segm_by_name('.text')
        # This code string appears to work for ELF32 and ELF64 AFAIK
        runtime_ms_end = ida_search.find_text(text_seg.startEA, 0, 0, "word ptr ds:1003h, 0", SEARCH_DOWN)
        runtime_ms = ida_funcs.get_func(runtime_ms_end)
        if idc.MakeNameEx(runtime_ms.startEA, "runtime_morecontext", SN_PUBLIC):
            debug('Successfully found runtime_morecontext')
        else:
            debug('Failed to rename function @ 0x%x to runtime_morestack' % runtime_ms.startEA)
        return runtime_ms
找到函数后，我们可以递归遍历所有的函数调用，任何不在定义列表里的函数，我们现在都可以定义。这是因为结构总是出现；
    golang_undefined_function_example
    .text:08089910        ; 函数开头 –然而当前IDA Pro没定义
    .text:08089910 loc_8089910:                            ; CODE XREF: .text:0808994B
    .text:08089910                                        ; DATA XREF: sub_804B250+1A1
    .text:08089910                 mov     ecx, large gs:0
    .text:08089917                 mov     ecx, [ecx-4]
    .text:0808991D                 cmp     esp, [ecx+8]
    .text:08089920                 jbe     short loc_8089946
    .text:08089922                 sub     esp, 4
    .text:08089925                 mov     ebx, [edx+4]
    .text:08089928                 mov     [esp], ebx
    .text:0808992B                 cmp     dword ptr [esp], 0
    .text:0808992F                 jz      short loc_808993E
    .text:08089931
    .text:08089931 loc_8089931:                            ; CODE XREF: .text:08089944