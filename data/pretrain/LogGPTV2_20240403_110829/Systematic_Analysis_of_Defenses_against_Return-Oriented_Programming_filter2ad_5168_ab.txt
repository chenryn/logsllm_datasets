Atoms{φ}, a statement about the process image, on the sub-formula χ, which
may itself be a dependency
2. A defense point ai ∧ ¬ai_broken → ¬aj establishes that if the literal ai,
representing the deployment of a speciﬁc defense in the process image, is true,
and that defense has not been broken, then the vulnerability-related statement
aj is necessarily false. That is, ai protects against attacks relying on aj.
3. A scenario constraint ai = ⊤ or ai =⊥ ﬁxes the valuation of the literal ai,
representing a non-negotiable fact about the process image.
Fig. 2: Formal Model of an Attack Space Analysis
6
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
Figure 2 describes our formal model, which is implemented using the Z3 [18] SMT
solver. The complete model is approximately 200 lines of code, and can easily be up-
dated as new attacks and defenses evolve. Note that while satisﬁability checking is
NP-Complete in the general case, modern SAT solvers can employ a variety of heuris-
tics and optimization to rapidly solve SAT instances up to millions of variables and
clauses [13]. In this paper, we focus on investigating scenario-speciﬁc questions and on
possible defense bypasses, but other approaches using this model could also provide
valuable insights. It is possible, for example, to rank the importance of attacker depen-
dencies (that is, some set of literals) by quantifying the number of paths to malware
deployment which rely on those literals, via analysis of the DAG-representation of φ.
As a concrete example of how our model can be used, consider the G-Free [20]
defense, which targets several key capabilities necessary for ROP attacks. ROP gadgets
are machine code segments ending in free-branch instructions, a class of instruction
which allows indirect jumps with respect to the instruction pointer. By controlling the
memory elements used in this indirection, gadgets can be chained together into larger
ROP programs. G-Free removes free-branch instructions and prevents mid-instruction
jumps using semantics-preserving code transformations at the function level.
A portion of the attack space dealing with ROP attacks is shown in Figure 3 as
propositional statements formalizing the dependencies between attacker capabilities.
Each atom corresponds to a speciﬁc capability: the valuation of sycl_g denotes the
presence of a system call gadget, g_loc corresponds to the attacker’s knowledge of
gadget locations in memory, etc.
G-Free’s effect on this space is formalized as (gfree∧¬gfree_broken) → ¬(frbr∨
mdfjmp). The atoms frbr and mdfjmp represent free branch instructions and mid-
function jumps, respectively. If G-Free valuates True (deployed), these atoms will now
valuate False (unavailable to an attacker). The question, then, is whether an attack can
still succeed.
Figure 4 provides an example of
how our analysis proceeds. Note that
this is not how the solver operates,
but is a high-level, human-readable
view of the relationship between at-
tacks and defenses. The model is rep-
resented as a propositional directed
acyclic graph (PDAG)[37], where
the ability to produce malware is a
function of the attacker prerequisites
and the deployed defenses. The sym-
bols in the diagram represent the following parts of the model:
sycl_g → (rop ∧ (sycl_ib ∨ sycl_il)) ∧
rad_g → rop
∧
rop → (g_ex ∧ g_smkn ∧ g_loc)
g_ex → (frbr ∧ mdfjmp)
frbr → (ret ∨ ulbin ∨ dis_g)
dis_g → (g_ex ∧ g_smkn)
Fig. 3: A portion of the ROP attack space
∧
∧
∧
– (cid:13) represent the literals from the model which will be initialized to true or false
depending on the actual conﬁguration. These literals represent the presence of pre-
requisites for an attack (vulnerabilities) or defenses that can be enabled.
– ▽ corresponds to logical OR
– △ corresponds to logical AND
Systematic Analysis of Defenses Against ROP
7
– ⋄ corresponds to logical NOT. When defenses are included in the model, the attack
assumptions they prevent depend on the defense not being enabled.
The edges in the graph indicate a “depends on” relationship. For example, disabling
DEP depends on the existence of return-into-libc or ROP.
Malware
Return-
to-libc
Disable 
DEP
ROP
Useful Funcs
Address Space 
Layout Known
Midfunc
Jumps
Free 
Branch
Syscall in 
lib
Syscall in 
exe
G-Free
Rets
Dispatcher 
Gadget
Fig. 4: Graph of G-Free’s Effects on the Code Reuse Attack Space
Figure 4 depicts one component of the larger model (including the attack space
portion described in Figure 3), illustrating G-Free [20] and its relationship to ROP. The
shaded components highlight the effect that implementing G-Free has on the rest of the
space: ROP attacks are disabled due to key pre-requisites being rendered unavailable,
but return-into-libn attacks are still possible.
All of our model’s static context (the attack paths, defenses, and other constraints)
are drawn from current academic literature, documentation from popular commercial
and open source systems, and documented attacks. All of these are brieﬂy discussed
below. The information about defenses in the model is included with the assumption
that the defenses are implemented as described in their speciﬁcations. Testing the im-
plementations of each defense was beyond the scope of this project. However, a model
of a particular system will highlight which defense features are most important, and
where efforts to test defense implementations should be focused.
4.2
Included Defenses
In this section we list defenses against code injection and code reuse attacks which
are part of our static context. These are represented in a manner similar to that of G-
Free as described above (i.e. as logical formulas binding the negation of certain ca-
pabilities to the defense). For each defense, we note which attacker capabilities are
removed, whether important capabilities remain, and practical implementation consid-
erations. Some of these systems have been deployed and others are proofs of concept.
Data Execution Prevention To prevent code injection attacks, Windows [27] and
Linux [36] have both integrated data execution prevention (DEP) to ensure that data
pages are marked non-executable and programs will fault if they attempt to execute data.
These systems do not protect against code-reuse attacks where attackers build malware
8
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
out of program code rather than through code injection. DEP is also not compatible
with every application and it is possible to disable it.
Address Space Randomization Many systems have been proposed that use random-
ization (of either the code or the address space) to reduce the amount of knowledge
that attackers have about running programs. Depending on what is randomized, these
systems reduce the attacker’s knowledge about the program in different ways. Random-
ization systems are usually run in conjunction with DEP. The Windows kernel [27] in-
cludes an implementation of ASLR that randomizes the locations of the base addresses
of each section of the executable. PAX ASLR [33] is a kernel module for GNU/Linux
that randomizes the locations of the base addresses of each section of the executable. Bi-
nary Stirring [38] is a binary rewriter and modiﬁed loader that randomizes the locations
of functional blocks within the program space. Dynamic Offset Randomization [39]
randomizes the locations of functions within shared libraries. Instruction Layout Ran-
domization [11] uses an emulation layer to randomize the addresses of most instructions
within an executable. ASLP [15] rewrites ELF binaries to randomize the base address
of shared libraries, executable, stack and heap.
Code Rewriting and Gadget Removal Other defenses use compiler tools and binary
rewriting to create binaries that are difﬁcult to exploit with ROP attacks by preventing
the program from jumping into the middle of functions or instructions and by removing
the ret instructions used to chain gadgets together. G-Free [20] is a compiler tool with
several protections aimed at preventing ROP attacks. It uses encrypted return addresses
to prevent attackers from overwriting control ﬂow data. It also inserts NOPs before
instructions that contain bytes that could be interpreted as ret to create alignment sleds
that prevent attackers from using unaligned instructions as ROP gadgets. Li et. al. [17]
rewrite kernel binaries to minimize the number of ret instructions and prevent ROP
attacks targeting the kernel. Pappas et. al [22] replace sections of binaries with random,
semantically equivalent sections to prevent attackers from predicting gadget locations.
Control Flow Protection Control ﬂow protection systems prevent attackers from redi-
recting the program execution by protecting the return addresses and other control ﬂow
data from malicious modiﬁcations. PointGuard [8] protects pointer data in Windows
programs by encrypting pointers stored in memory. Transparent runtime shadow stack
(TRUSS) [30] uses binary instrumentation to maintain a shadow stack of return ad-
dresses and veriﬁes each return. Control Flow Integrity [1] analyzes the source code of
programs to build a control ﬂow graph (CFG) and then adds instrumentation to check
that the program execution does not deviate from the intended CFG. Branch Regulation
[14] prevents jumps across function boundaries to prevent attackers from modifying
the addresses of indirect jumps and duplicates the call stack to prevent attackers from
modifying return addresses.
Buffer Overﬂow Prevention The full extent of buffer overﬂow defenses is outside
the scope of this paper, but we will list protections that are included in Microsoft Visual
Studio and GCC. Propolice [10] is an extension for the GCC compiler that provides
stack canaries and protection for saved registers and function arguments. Microsoft
Visual Studio also provides buffer overﬂow protection with the /GS ﬂag [5]. When
/GS is enabled, it generates security cookies on the stack to protect return addresses,
exception handlers and function parameters.
Systematic Analysis of Defenses Against ROP
9
Remove Unused Code From Linked Libraries The library randomization technique
described by Xu and Chapin [39] also ensures that only functions that have entries in
the GOT are available in the program space. This means that the functions available to
return-into-libc attacks are limited to the ones actually used in the program. The Linux
kernel has a security feature called seccomp ﬁltering [2] that allows applications to
deﬁne a ﬁlter on the system calls available.
4.3 Attack Capabilities Modeled
In this section we discuss the assumptions, a priori knowledge, and capabilities that
code injection, return-into-libc, and ROP attacks rely on. These are used to deﬁne the
attack space of the static context as a series of logical formulas specifying the depen-
dencies between attacker capabilities, as shown in Figure 3.
Ability to Overwrite Memory All the attacks discussed in this paper rely on the
ability to overwrite memory on the stack or heap. In C, the default memory copying
functions do not check whether the source arrays ﬁt into the destination arrays. When
the source array is too large, the excess data is copied anyway, overwriting the adjacent
memory. This means that when programmers read user-supplied arrays or strings into
buffers without checking its length, attackers can supply carefully crafted inputs that
overwrite important data [21].
Redirect Control Flow All the attacks we examine require diverting the control ﬂow
of the vulnerable application at least once. This is accomplished by using a buffer over-
ﬂow to overwrite a return address or function pointer on the stack or heap. When the
function returns or the function is called, the program jumps to the address speciﬁed
by the attacker. In the case of a code injection attack, the program jumps to the address
of the code that the attacker just injected [21]. In the case of a code reuse attack, the
program jumps to an address within the executable or linked libraries.
ROP attacks rely on more detailed assumptions about the attackers’ ability to redi-
rect the control ﬂow; for example, jumping to gadgets that start in the middle of func-
tions or even in the middle of instructions [12] [28]. ROP attacks use ret or ret-like
instructions to chain gadgets together and build complex attacks [7].
Ability to Read Process Memory Buffer overread vulnerabilities and format string
vulnerabilities [32] allow attackers to read values from memory. Attackers can use these
vulnerabilities to ﬁnd randomized addresses and read stack cookies, encryption keys
and other randomized data that is incorporated into defense systems.
Knowledge of Address Space Layout Attackers can predict the address space layout
of broadly distributed applications when operating systems load identical binaries at
the same address every time. Attackers can use this knowledge to jump to the correct
address of injected code [21] and to ﬁnd addresses of the functions and gadgets used
as part of code reuse attacks [28]. Attackers can also take advantage of an incomplete
knowledge of the address space. For example, knowledge of relative addresses within
sections of the executable can be used in combination with the ability to learn a selected
address to calculate the complete address space [29]. Furthermore, attackers that know
the contents of the Global Offset Table (GOT) or locations of a subset of the function
headers can develop a code reuse attack that chains together entire functions.
10
Skowyra, Casteel, Okhravi, Zeldovich, & Streilein
Knowledge of Gadget Semantics When ROP gadgets are smaller than complete func-
tions, their semantics can depend on the exact instructions and ordering from the exe-
cutable. This means that the gadgets available can vary for programs that are semanti-
cally equivalent when run as intended. Finding these smaller gadgets requires knowl-
edge of the assembly code of the target binary. Furthermore, some ROP gadgets are
a result of “unintended instructions” [28] [12] found by jumping into the middle of
an instruction and executing from there. Finding these unintended instructions requires
knowledge of the opcodes used for each instruction. assembly
Ability to make multiple probes Some programs allow attackers to send multiple
inputs interactively, depending on the response. This allows them to develop multi-stage
attacks that take advantage of memory disclosures to learn more information about the
address space [32] or launch brute force attacks against randomization systems [29].
Execute Stack or Heap Data When the pages of memory on the stack or heap are
marked executable, attackers can inject code directly into memory and run it. This
makes it easy for attackers to run arbitrary code and to reuse the same attacks on differ-
ent applications. To take advantage of executable data, attackers need to write malicious
code at a known address and then redirect the control ﬂow to that address [21].
Large Codebase Linked C programs all link to a version of the C standard library,
which provides an API for programmers to access system functions like printing to the
screen and allocating memory. The C standard library also provides many functions
that can be useful to attackers, like exec, which runs any program and system, which
provides direct access to the system call interface. Return-into-libc attacks take advan-
tage of the fact that these functions are available in the program space by redirecting
the program control ﬂow and calling them.
5 Scenario Analysis
To demonstrate using our model to analyze defense conﬁgurations, we look at the secu-
rity of two applications, a closed-source HTTP server like Oracle and an open-source
document viewer, running on a server running Ubuntu Server 12.10 with standard secu-
rity features [2]. The defenses enabled by Ubuntu that apply to our code-reuse model
are ASLR, non-executable data, and system call ﬁltering. We initialize the model with
the defenses that are possible with each application and run the SAT-solver to see which
(if any) attacks are still possible.
The ﬁrst application, the HTTP server does not have source code available so it
cannot take advantage of the syscall ﬁltering provided by GCC patches. Even if it
could, since HTTP servers need to use the network interface, open ﬁles and run scripts,
many of the dangerous syscalls will still be allowed. Web servers also will respond
to multiple requests, so brute force attempts may be possible. ASLR and DEP will still
be enabled. Running the SAT-solver shows that the possibility of brute-force attacks
to break ASLR means that using return-into-libc and ROP are both possible, while the
non-executable data prevents code injection attacks.
The second application, the document viewer, is compatible with a larger set of de-
fenses. Since the source code is available and it does not require access to dangerous
system calls, it can be built with syscall ﬁltering. Since the attack vector for a docu-
Systematic Analysis of Defenses Against ROP
11
ment viewer is opening a malicious document, multiple probes and brute force attacks
are not possible. Like the HTTP server, ASLR and non-executable data are enabled. In
the case of the document viewer, the syscall ﬁltering prevents both return-into-libc
and ROP attacks and the non-executable data prevents code injection attacks.
6 Defense Bypasses
In this section, we demonstrate how our model can be used to identify possible attack
extensions which, should they exist, enable the complete bypassing of a defense (as
opposed to an attack which breaks the defense directly and invalidates its security guar-
antees). Not all of these bypasses need to be entirely novel, in the sense that they have
never been proposed before. Rather, they are intended to highlight the weakness of
even the strongest incarnation of a defense: with a small number of added capabilities,
an attacker can use an incrementally more powerful attack to render useless a strong de-
fense. All of our results are currently restricted to Linux environments. As future work,
we intend to construct similar bypasses for the Windows platform.
6.1 Pure ROP Payload
In the wild, malware normally uses ROP to disable DEP and then to inject code nor-
mally [9], despite the fact that academic literature has posited that ROP is sufﬁcient to