0.000
percall
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
本电子书仅限学习交流使用，请勿用于商业用途
cumtime
0000
0.000
0.000
0.000
0.000
0.000
0000
0.000
percall
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0000
StringI0.py:42(StringI0)
StringI0.py:30()
:1()
:0(startswith)
:0(setprofile)
:0(setattr)
:0(len)
:0(_getframe)
filename:lineno(function)
10.2性能分析
137
---
## Page 145
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
字节码的反编译器，用起来也很简单。
分析。但这样的上下文中，我发现用 dis 模块可以看到一些隐藏的东西。dis 模块是Python
10-1所示。
示例10.2用KCacheGrind可视化Python性能分析数据
138
这可以提供很多有用的信息，让你可以判断程序的哪个部分耗费了太多的资源，如图
>>> def x():
虽然从宏观角度看这么用没问题，它有时也可以对代码的某些部分提供一些微观角度的
>>>dis.dis(x)
2
earch:
第10章性能与优化
import dis
29.58
80.28
86.62
8
.31
eEfzHmo.og[1]-TotalTiksCost:142
00
90
Self Called
return 42
22
3 RETURN _VALUE
0LOAD CONST
Functior
d/qn/nanpou
da
_ns
本电子书仅限学习交流使用，请勿用于商业用途
hon
(NoGrouping)
1
unkn
unkn
Locatic
号
bin/ceilometer
图10-1KCacheGrind示例
Count
nd-counter:21
1(42)
Aub/python27/logging/-nit-py24
e.py.80
fig/oslo/conhg/cfg.py.261
92
---
## Page 146
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
清单。为了能适当地优化代码，这对于理解程序的每行代码非常有用。
>>> dis.dis(concat_a_1)
两者看上去作用一样，但如果反汇编它们的话，可以看到生成的字节码有点儿不同。
def concat_a_2():
abc= ('a'，'b',
下面的代码定义了两个函数，功能相同，都是拼接三个字母。
dis.dis 函数会反编译作为参数传入的函数，并打印出这个函数运行的字节码指令的
def concat_a_1():
2
for letter in abc:
a=abc[0]
forletterin abc:
>>
V
V
a+ letter
abc[0]+ letter
32 RETURN_VALUE
7STORE_FAST
6BINARY_SUBSCR
29 LOAD_CONST
28
53
24
23
20 LOAD_FAST
19
16LOAD_CONST
13LOAD GLOBAL
10 STORE_FAST
3LOAD CONST
0LOAD_GLOBAL
7FOR_ITER
6GET_ITER
3LOAD_GLOBAL
O SETUP LOOP
POP_TOP
BINARY_SUBSCR
POP_BLOCK
JUMP ABSOLUTE
BINARY_ADD
'c').
本电子书仅限学习交流使用，请勿用于商业用途
1（0）
18(to28)
0（abc)
26(to29)
0(a)
0(abc)
0(None)
0(letter)
1（0）
0(abc)
0(letter)
10.2性能分析
139
---
## Page 147
熊猫爱中国www.xiongmaoi.com
示例10.3分解嵌套函数
例10.3）。这实际是有开销的，因为函数会无理由地被重复定义。
么副作用。所以，编写代码一定要小心。
编译器完成。但是，由于 Python 语言是高度动态的，因此编译器很难确保优化不会产生什
用这个函数100万次，否则不值得优化，但这就是dis 模块所能提供的洞察力。
中。这使得循环内部执行的字节码稍微短一点，因为不需要每次迭代都去查找 abc[O］。通
140
另一个我在评审代码时遇到的错误习惯是无理由地定义嵌套函数（分解嵌套函数见示
是否应该依赖将值存储在循环外这样的“技巧”是有争议的，这类优化工作应该最终由
>>>defx(）:
如你所见，在函数的第二个版本中运行循环之前我们将 abc[O］保存在了一个临时变量
>>
>>>
2
import dis
第10章性能与优化
defx(）:
dis.dis(x)
def y():
return 42
>
V
3RETURN_VALUE
38 RETURN_ VALUE
OLOAD CONST
35 LOAD_CONST
34 POP_BLOCK
3
80
92
23 LOAD FAST
20 STORE FAST
17 FOR_ITER
16 GET_ITER
13 LOAD_GLOBAL
10 SETUP LOOP
POP_TOP
S
JUMP ABSOLUTE
BINARY_ADD
LOAD_FAST
本电子书仅限学习交流使用，请勿用于商业用途
0(None)
77
1(letter)
1(letter)
14(to34)
0(abc)
22(to35)
0（a）
---
## Page 148
熊猫爱中国www.xiongmaoi.com
能猫爱
示例10.4反汇编一个闭包
的操作码中的一个用例。反汇编一个闭包如示例10.4所示。
作码，而函数调用在Python中本身就是低效的。
LOAD_FAST 和 CALL_FUNCTION，而不是直接调用 LOAD_CONST，这无端造成了更多的操
>>> def x():
唯一需要在函数内定义函数的场景是在构建函数闭包的时候，它可以完美地匹配Python
可以看到函数被不必要地复杂化了，调用MAKE_FUNCTION、STORE_FAST、
2
>>
4
2
"",1ine 3>)
dis.dis(x)
"", line 2>
dis.dis(x)
return y()
def y():
a=42
return y()
18 STORE FAST
15 MAKE_CLOSURE
12LOAD_CONST
9BUILD_TUPLE
15 RETURN_VALUE
6LOAD_CLOSURE
3 STORE_DEREF
0LOAD_CONST
12 CALL_FUNCTION
6 STORE_FAST
3 MAKE_FUNCTION
OLOADCONST
9LOAD FAST
returna
return 42
本电子书仅限学习交流使用，请勿用于商业用途
0
1
0(y)
1 (<code object y at 0x100ce7e30, file
2
(y)
(<code object y at 0x100d139b0, file
#
(a)
(42）
10.2性能分析
141
---
## Page 149
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例10.6bisect.insort 的用法
函数，如示例10.6所示。
示例10.5bisect的用法
例10.5所示。