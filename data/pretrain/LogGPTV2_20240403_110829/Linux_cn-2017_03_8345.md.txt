---
author: Josh Bleecher Snyder
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5363
date: '2017-03-28 08:12:00'
editorchoice: false
excerpt: 这篇文章是关于一个鲜为人知的让 Go 在编译期断言的方法。你可能不会使用它，但是了解一下也很有趣。
fromurl: http://commaok.xyz/post/compile-time-assertions
id: 8345
islctt: true
largepic: /data/attachment/album/201703/28/163806gkdzz3e36e3nkecn.png
permalink: /article-8345-1.html
pic: /data/attachment/album/201703/28/163806gkdzz3e36e3nkecn.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 这篇文章是关于一个鲜为人知的让 Go 在编译期断言的方法。你可能不会使用它，但是了解一下也很有趣。
tags:
- Go
- 断言
thumb: false
title: Go 语言编译期断言
titlepic: true
translator: geekpi
updated: '2017-03-28 08:12:00'
---
这篇文章是关于一个鲜为人知的让 Go 在编译期断言的方法。你可能不会使用它，但是了解一下也很有趣。
![](/data/attachment/album/201703/28/163806gkdzz3e36e3nkecn.png)
作为一个热身，来看一个在 Go 中熟知的编译期断言：接口满意度检查。
在这段代码（[playground](https://play.golang.org/p/MJ6zF1oNsX)）中，`var _ =` 行确保类型 `W` 是一个 `stringWriter`，其由 [`io.WriteString`](https://golang.org/pkg/io/#WriteString) 检查。
```
package main
import "io"
type W struct{}
func (w W) Write(b []byte) (int, error)       { return len(b), nil }
func (w W) WriteString(s string) (int, error) { return len(s), nil }
type stringWriter interface {
    WriteString(string) (int, error)
}
var _ stringWriter = W{}
func main() {
    var w W
    io.WriteString(w, "very long string")
}
```
如果你注释掉了 `W` 的 `WriteString` 方法，代码将无法编译：
```
main.go:14: cannot use W literal (type W) as type stringWriter in assignment:
    W does not implement stringWriter (missing WriteString method)
```
这是很有用的。对于大多数同时满足 `io.Writer` 和 `stringWriter` 的类型，如果你删除 `WriteString` 方法，一切都会像以前一样继续工作，但性能较差。
你可以使用编译期断言保护你的代码，而不是试图使用[`testing.T.AllocsPerRun'](https://golang.org/pkg/testing/#AllocsPerRun)为性能回归编写一个脆弱的测试。
这是[一个实际的 io 包中的技术例子](https://github.com/golang/go/blob/go1.8rc2/src/io/multi.go#L72)。
---
好的，让我们低调一点！
接口满意检查是很棒的。但是如果你想检查一个简单的布尔表达式，如 `1 + 1 == 2` ？
考虑这个代码（[playground](https://play.golang.org/p/mjIMWsWu4V)）：
```
package main
import "crypto/md5"
type Hash [16]byte
func init() {
    if len(Hash{}) 
作者：[Josh Bleecher Snyder](https://twitter.com/commaok) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出