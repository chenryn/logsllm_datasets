CHAPTER
4
Code Signing and Memory
Protections
When iOS 2.0 was released in 2008, Apple began a program to tightly control
the code that can execute on an iOS device. This is done through Mandatory
Code Signing. An approved party must sign every application that is run on
an iOS device. If the code is not signed, checks in the kernel will not allow it to
execute on the device. All the applications that come on a factory device, or are
installed from the App Store, are signed by Apple’s private key. Additionally,
enterprises, universities, and individual developers can specially provision their
devices to allow signatures from other parties. But, Mandatory Code Signing
doesn’t just affect binaries. It affects all code, including libraries and even all
executable code in memory. The one exception to this rule has to do with Just
In Time compiling for the web browser, MobileSafari.
Code signing plays two important security-related roles in iOS. One is that it
makes it diffi cult for malware to get on iOS devices. The only way to run code on
an iOS device is to get it from the Apple App Store (unless the device has been
specially provisioned). Because Apple reviews all apps in the App Store prior to
posting, Apple can review each app to ensure it is not malicious. Compare this
approach to the one taken by Android, where any self-signed application can
run on an Android device. You can download and run arbitrary fi les, just like
a PC. This makes malware a much more real threat on Android than on iOS.
The other important role is during exploitation, or so-called drive-by-downloads.
Much like Microsoft’s Data Execution Prevention (DEP) technology, code signing
prevents code (shellcode) injected into a compromised process from executing.
69
cc0044..iinndddd 6699 44//1166//22001122 55::4433::4488 PPMM
70 Chapter 4 n Code Signing and Memory Protections
However, Mandatory Code Signing is much stronger than DEP. As a way around
these memory protections, attackers typically use Return Oriented Programming
(ROP). Against systems with DEP or similar protections, attackers need to per-
form ROP only long enough to disable DEP and then execute their native code
payloads. However, in iOS, it is impossible to turn off the Mandatory Code
Signing, and because the native code payload will not be signed, it cannot be run.
Therefore, the entire iOS payload must be executed in ROP, which is much more
diffi cult to accomplish than the analogous attack against DEP. Additionally, the
payload cannot just write a new executable containing malware and execute it
(another typical move for attackers) because it will not be signed. Compare this
to Android, which does not have any code signing at all. Attackers can simply
execute their shellcode right from within the process after disabling DEP or can
use ROP to write binaries to disk and execute them.
This chapter discusses signing certifi cates, provisioning profi les, signed code,
entitlements, and what these mean for an attacker.
Understanding Mandatory Access Control
At a low level, a large part of Mandatory Code Signing is controlled by the
Mandatory Access Control Framework (MACF). After we show you how this
works we’ll back up and demonstrate how MACF policies are used to perform
the code signing checks.
Mac OS X and iOS inherit MACF from FreeBSD, which includes experimental
support for several mandatory access control policies, as well as a framework
for kernel security extensibility, the TrustedBSD MAC Framework. In iOS, the
MAC Framework is a pluggable access control framework, permitting new
security policies to be easily linked into the kernel, loaded at boot, or loaded
dynamically at run time. The framework provides a variety of features to make
it easier to implement new security policies, including the ability to easily tag
security labels (such as confi dentiality information) onto system objects.
In iOS, only two MAC policies are registered: AMFI and Sandbox. You can see
this by looking at xrefs to mac_policy_register, as shown in Figure 4.1 The
Sandbox MAC policy is covered in Chapter 5. The next section covers AMFI in brief.
Figure 4.1: Only two functions register MAC policies.
cc0044..iinndddd 7700 44//1166//22001122 55::4433::4488 PPMM
Chapter 4 n Code Signing and Memory Protections 71
AMFI Hooks
AMFI stands for AppleMobileFileIntegrity. When you look at the call to mac_
policy_register in the kernel binary, you can see all the hooks it places. See
Figure 4.2.
Figure 4.2: AMFI registers its hooks with the kernel.
AMFI uses the following MAC hooks:
n mpo_vnode_check_signature
n mpo_vnode_check_exec
n mpo_proc_get_task_name
n mpo_proc_check_run_cs_valid
n mpo_cred_label_init
n mpo_cred_label_associate
n mpo_cred_check_label_update_execve
n mpo_cred_label_pudate_execve
n mpo_cred_label_destroy
n mpo_reserved10
This chapter discusses how to decompile many of these. Of course, they are
all important with regard to code signing.
cc0044..iinndddd 7711 44//1166//22001122 55::4433::4488 PPMM
72 Chapter 4 n Code Signing and Memory Protections
AMFI and execv
As an example of how AMFI hooks are accessed and constructed, consider
mpo_vnode_check_exec, because it is one of the easiest to understand. In
the XNU kernel source, in bsd/kern/kern_exec.c, there is a function called
exec_check_permissions. The description in the comment says it all:
/*
* exec_check_permissions
*
* Description: Verify that the file that is being attempted to be
executed
* is in fact allowed to be executed based on it POSIX
file
* permissions and other access control criteria
*
Inside exec_check_permissions, you see:
#if CONFIG_MACF
error = mac_vnode_check_exec(imgp->ip_vfs_context, vp, imgp);
if (error)
return (error);
#endif
and that mac_vnode_check_exec is basically a wrapper for the MAC_CHECK macro:
int
mac_vnode_check_exec(vfs_context_t ctx, struct vnode *vp,
struct image_params *imgp)
{
kauth_cred_t cred;
int error;
if (!mac_vnode_enforce || !mac_proc_enforce)
return (0);
cred = vfs_context_ucred(ctx);
MAC_CHECK(vnode_check_exec, cred, vp, vp->v_label,
imgp != NULL) ? imgp->ip_execlabelp : NULL,
(imgp != NULL) ? &imgp->ip_ndp->ni_cnd : NULL,
(imgp != NULL) ? &imgp->ip_csflags : NULL);
return (error);
}
MAC_CHECK is a generic macro used by all the MACF code and is found in
security/mac_internal.h:
* MAC_CHECK performs the designated check by walking the policy
* module list and checking with each as to how it feels about the
cc0044..iinndddd 7722 44//1166//22001122 55::4433::4488 PPMM
Chapter 4 n Code Signing and Memory Protections 73
* request. Note that it returns its value via ‘error’ in the scope
* of the caller.
#define MAC_CHECK(check, args...) do { \
struct mac_policy_conf *mpc; \
u_int i; \
\
error = 0; \
for (i = 0; i mpc_ops->mpo_ ## check != NULL) \
error = mac_error_select( \
mpc->mpc_ops->mpo_ ## check (args), \
error); \
}
This code walks the list of policies and, for each module loaded, if there is a
hook registered, it calls it. In this case, it is calling whatever function was reg-
istered for mpo_vnode_check_exec. This allows for the checking of code signing
whenever a binary is about to be executed.
The hooking is in the xnu open source package, but the actual hooks are in the
kernel binary. Looking at the actual function hooked at mpo_vnode_check_exec,
you can examine the decompilation of it, as shown in Figure 4.3.
Figure 4.3: Decompilation of amfi_vnode_check_exec
I wish I had that fi le AppleMobileFileIntegrity.cpp! Anyway, this function’s
sole responsibility is to set the CS_HARD and CS_KILL fl ags for every process that
is started. Look at the bsd/sys/codesign.h fi le and observe that these fl ags
tell the kernel to not load any invalid pages and to kill the process if it should
become invalid. This will be important later when you learn about the way code
signing is actually enforced.
cc0044..iinndddd 7733 44//1166//22001122 55::4433::4488 PPMM
74 Chapter 4 n Code Signing and Memory Protections
How Provisioning Works
Given that developers need to test out their applications on devices, and enter-
prises want to distribute apps just to their devices, there is a need to allow
apps that are not signed by Apple to run on iOS devices, short of jailbreaking
the device. The method to allow this is provisioning. An individual, company,
enterprise, or university may sign up for one of the programs offered by Apple
for this purpose. In this book, we’ll consider individual developers who sign
up to be a member of the iOS Developer Program, but the other scenarios are
very similar.
As part of the program, each developer generates a certifi cate request for a
development and a distribution certifi cate from a set of private keys generated
locally. Apple then provides these two certifi cates back to the developer, see
Figure 4.4.
Figure 4.4: iOS developer and distribution certificates
Understanding the Provisioning Profi le
These certifi cates prove the developer’s identity because only the developer
has the private key for them. Alone, they’re not worth much. The magic comes
in the provisioning profi le. Through the iOS Developer Portal, you can produce
a provisioning profi le. A provisioning profi le is a plist fi le signed by Apple. The
plist fi le lists certifi cates, devices, and entitlements. When this provisioning
profi le is installed on a device listed in the profi le, it can list additional certifi -
cates, besides Apple, that can sign code which will be allowed for that device.
It also lists the entitlements that can be used by applications signed by that
provisioning profi le. Entitlements are discussed in the “Inside Entitlements”
section later in this chapter.
cc0044..iinndddd 7744 44//1166//22001122 55::4433::4499 PPMM
Chapter 4 n Code Signing and Memory Protections 75
One of the main differences between individual developer accounts and
enterprise accounts is that individual developer provisioning profi les must list
specifi c devices. Another difference is that individual accounts limit a developer
to using 100 devices. Enterprises may have Apple generate provisioning profi les
that are not locked down to particular devices, but can be installed on any device.
Consider the following provisioning profi le.
ApplicationIdentifierPrefix
MCC6DSFVWZ
CreationDate
2011-08-12T20:09:00Z
DeveloperCertificates
MIIFbTCCBFWgAwIBAgIITvjgD9Z1rCQwDQYJKoZIhvcNAQEFBQAwgZYxCzAJ
...
Entitlements
application-identifier
MCC6DSFVWZ.*
com.apple.developer.ubiquity-container-
identifiers
MCC6DSFVWZ.*
com.apple.developer.ubiquity-kvstore-
identifier
MCC6DSFVWZ.*
get-task-allow
keychain-access-groups
MCC6DSFVWZ.*
ExpirationDate
2011-11-10T20:09:00Z
Name
iphone_payloads Charlie Miller iPhone 4 regular
pho
cc0044..iinndddd 7755 44//1166//22001122 55::4433::4499 PPMM
76 Chapter 4 n Code Signing and Memory Protections
ProvisionedDevices
7ec077ddb5826358…..c046f619
TeamIdentifier
MCC6DSFVWZ
TimeToLive
90
UUID
87C4CE1E-D87B-4037-95D2-8…9246
Version
1
In the previous provisioning profi le, notice ApplicationIdentifierPrefix,
which allows different applications written by the same developer to share data.
Next is the creation date, followed by a base64-encoded certifi cate. If you want
to know what is in this fi eld, put it in a text fi le and use OpenSSL to fi nd out.
You need to preface the contents with -----BEGIN CERTIFICATE----- and end
the fi le with -----END CERTIFICATE-----. Then you can read the contents of the
certifi cate using openssl, as shown here.
$ openssl x509 -in /tmp/foo -text
Certificate:
Data:
Version: 3 (0x2)
Serial Number:
4e:f8:e0:0f:d6:75:ac:24
Signature Algorithm: sha1WithRSAEncryption
Issuer: C=US, O=Apple Inc., OU=Apple Worldwide Developer
Relations, CN=Apple Worldwide Developer Relations Certification
Authority
Validity
Not Before: Jun 1 01:44:30 2011 GMT
Not After : May 31 01:44:30 2012 GMT
Subject: UID=7CCDL7Y8ZZ, CN=iPhone Developer: Charles
Miller (7URR5G4CD1), C=US
Subject Public Key Info:
Public Key Algorithm: rsaEncryption
...
Next is the Entitlements section which lists entitlements applications signed
by this certifi cate are allowed to possess. In this case, applications signed by this
certifi cate can use the keychain and application identifi er specifi ed, and have
get-task-allow, which is necessary to allow processes to be debugged. Then
cc0044..iinndddd 7766 44//1166//22001122 55::4433::4499 PPMM
Chapter 4 n Code Signing and Memory Protections 77
the provisioning profi le includes the expiration date, name of the provisioning
profi le, and a list of devices UUIDs for which this profi le is valid.
On an iOS device, you can find the installed profiles under Settings (cid:190)
General (cid:190) Profi les (see Figure 4.5) or in the fi lesystem at /var/MobileDevice/
ProvisioningProfiles/.
Figure 4.5: A list of profiles on a device
How the Provisioning File Is Validated