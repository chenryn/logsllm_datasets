### 优化后的文本

#### 算法4: Σ.sign
1. 函数 `Σ.sign (sk, m)`:
2.   \(\sigma := \Sigma.\text{sign}(sk, pinfoe || m)\)
3.   \(\sigma := (\sigma, pinfoe)\)
4.   返回 \(\sigma\)

在所有调用 \(H\) 的参数中添加 \((pk || t)\) 的原因是为了防止多目标攻击。虽然我们的证明没有使用这一点，因此对最终的安全声明没有影响，但我们认为这是一个良好的实践。

**定理5.** \(\Sigma\) 在定义22的意义上是完整的。
- 证明见完整版本。

**定理6.** \(\Sigma\) 在定义16的意义上是不可伪造的，且有：
\[ \text{Adv}_{\Sigma, E, V, F}^{\text{EEUF-CMA}}(1^\lambda, \Delta t) \leq E \cdot \text{Adv}_{H, A}^{\text{PRF}}(1^\lambda, V \cdot \Delta t) + V \cdot \text{Adv}_{\widetilde{\Sigma}, E, A_4}^{\text{IND-NMA}}(1^\lambda) + \text{Adv}_{T L, A_{\text{IND-NMA}}}^{\text{FS-EUF-CMA}}(1^\lambda) + \text{Adv}_{\Sigma, A_5}^{\text{EUF-CMA}}(1^\lambda) \]

**证明：**（概要，完整证明见附录C1）
我们使用游戏跳跃技术，以标准的EEUF-CMA游戏为起点。

#### 算法5: Σ.verify
1. 函数 `Σ.verify (pk, e, σ, m)`:
2.   \((pk', t0, \Delta t, E, V) := pk\)
3.   \((pke', e', re'-V, \widetilde{sk}e'-V, tle', \widetilde{\sigma}) := pinfoe'\)
4.   \(b0 := \widetilde{\Sigma}.\text{verify}(\widetilde{\sigma}, pinfoe')\)
5.   \(b1 := \Sigma.\text{verify}(pk, \sigma, pinfoe' || m)\)
6.   \(\sigma, pinfoe' := \sigma\)
7.   如果 \(e \leq 0 \lor e' \leq 0 \lor e' + V \leq e \lor e' > e \lor e > E\)：
8.     返回 0
9.   返回 \(b0 \land b1\)

在第一个跳跃中，我们猜测 \(F\) 将会提供伪造签名的时期 \(e\)，并在 \(e + V - 1\) 个时期后终止执行（损失因子为 \(\frac{1}{E}\)）。

在下一个跳跃中，我们将包括和之后的所有时期的随机种子 \(re\) 以及用于 \(TL.lock\) 和 \(\Sigma.gen\) 的伪随机带替换为随机值，这得益于 \(H\) 的PRF安全性（损失 \(\leq E \cdot \text{Adv}_{H, A}^{\text{PRF}}(1^\lambda, E)\)）。

在下一个跳跃中，我们在所有生成的时间锁谜题中封装随机值。这得益于它们的隐藏属性，并且游戏强制 \(F\) 没有足够的解锁时间（损失 \(\leq V \cdot \text{Adv}_{T L, A}^{\text{IND-NMA}}(1^\lambda, V \cdot \Delta t)\)）。

在下一个跳跃中，我们检查伪造签名是否包含 \((pk, \widetilde{\sigma})\) 的新鲜签名，并将其呈现给一个FS-EUF-CMA挑战者，如果存在则终止游戏（损失 \(\leq \text{Adv}_{\widetilde{\Sigma}, E, A}^{\text{FS-EUF-CMA}}(1^\lambda)\)）。

在最后一个跳跃中，我们注意到伪造签名必须包含 \(pk\) 的新鲜签名，并将其呈现给一个EUF-CMA挑战者（损失 \(\leq \text{Adv}_{\Sigma, A}^{\text{EUF-CMA}}(1^\lambda)\)）。

**定理7.** \(\Sigma\) 在定义17的意义上是可否认的。
- 证明：我们的模拟器 \(S\) 使用 \(pinfoe\) 中的信息来创建一个与所有过期时期的真实密钥等效的密钥，然后像诚实方一样执行签名算法。首先介绍算法6，该算法从公开时期信息 \(pinfoe\) 中提取合适的密钥。

#### 算法6: 密钥提取器
1. 函数 `extract_sk(pk, pinfoe)`:
2.   \(pk' := pk\)
3.   对于 \(i \in \{e - 1, \ldots, 0\}\)：
4.     \((\widetilde{sk}i+1, ri) := H(ri+1, pk' || i + 1 || 0)\)
5.     \(\widetilde{sk}i := \widetilde{\Sigma}.\text{update}(ri, pk', \widetilde{sk}i+1)\)
6.   \(r := [r0, \ldots, re]\)
7.   \(\widetilde{sk} := [\widetilde{sk}0, \ldots, \widetilde{sk}e]\)
8.   \(sk^* := (sk^*_r, 0, \perp, \perp)\)
9.   返回 \((sk^*, r, \widetilde{sk})\)

有了这个实际的模拟（算法7），基本上只是执行 \(\Sigma.\text{sign}\)。如果模拟器计算出的 \(sk\) 确实与真实密钥等效，那么我们方案的可否认性就直接来自于剩余的定义。

#### 算法7: 我们的模拟器 \(S\)
1. 函数 `S(pk, pinfoe, ts)`:
2.   \(sk^* := \text{extract_sk}(pk, pinfoe)\)
3.   \(ts' := []\)
4.   \(e' := 0\)
5.   对于 \((e, m) \in ts\):
6.     \(e - e'\) 次：
7.       \(ts' || = \Sigma.\text{sign}(sk^*, m)\)
8.       \(sk^* := \Sigma.\text{evolve}(sk^*)\)
9.   返回 \(ts'\)

通过模拟器和 \(\Sigma.\text{evolve}\) 的确定性，我们可以看到 \(sk\) 确实是等效的。唯一不同之处在于，pebbling数据结构不会回溯到那么多的密钥/随机性演化，从而阻止了在未来时期中的使用。但由于游戏的结构，在 \(S\) 运行时不需要这些信息。因此，这种差异对于生成的签名没有任何影响，因为 \(\text{sign}\) 不使用这些信息。因此，这些密钥对于所有过去时期都是等效的，并且模拟签名的分布与诚实生成的签名完全相同。由于 \(pinfoe\) 和 \(sk_e\) 的相关部分与诚实方使用的完全相同，并且假设 \(\Sigma\) 是无状态的，因此生成的签名显然在信息理论上与真实签名无法区分。即使 \(S\) 被多次调用，这种完美的不可区分性仍然成立，使得 \(J\) 无法学习 \(b\)，只能猜测一个随机位，其成功概率为 \(\frac{1}{2}\)。

因此，\(\Sigma\) 是完全离线可否认的。

我们希望在定理7中增加以下强化：即使模拟器只在需要为时期 \(e\) 创建签名时才收到 \(pinfoe\)，仍然可以创建一个完美不可区分的签名。为此，\(S\) 首先打开时间锁谜题 \(tle\)（\(pinfoe\) 的一部分），并经过大约 \(V \cdot \Delta t\) 时间的计算后，获得 \(re\) 和 \(\widetilde{sk}e\)。有了这些，他可以像之前一样执行算法7，生成的签名将因上述相同的原因而完全不可区分。

### 致谢
感谢Sofía Celi提供的宝贵意见。同时感谢S&P审稿人和我们的指导Cas Cremers提出的宝贵意见和建议。特别感谢审稿人C指出了时间戳攻击。

### 参考文献
[1] E. Omara, B. Beurdouche, E. Rescorla, S. Inguva, A. Kwon, and A. Duric, “The Messaging Layer Security (MLS) Architecture,” Internet Engineering Task Force, Internet-Draft draft-ietf-mls-architecture-05, Jul. 2020, work in Progress. [Online]. Available: https://datatracker.ietf.org/doc/html/draft-ietf-mls-architecture-05 1, 2, 9
...
[更多参考文献省略]

### 附录
A. 性能估计
\(\Sigma.gen\) 的运行时间主要由四个pebbling操作（两个用于密钥演化，两个用于演化伪随机 \(r\) 值）、生成一个时间锁谜题、两次调用 \(H\)、一次调用 \(\Sigma.gen\) 和 \(\widetilde{\Sigma}.gen\) 以及准备pebbling结构组成。 \(\Sigma.evolve\) 包括两次调用 \(\widetilde{\Sigma}.\text{sign}\)，每个调用的计算不是快速前进所必需的。 \(\Sigma.sign\) 大致包括一次调用 \(\widetilde{\Sigma}.\text{sign}\) 和 \(\Sigma.\text{sign}\)。为了给出性能估计，我们实例化这些原语如下：我们使用20个时期，每个时期5分钟，导致密钥有效期为9.97年。我们使用RFC 8391中描述的XMSS-SHA2 20 256变体作为静态签名方案。我们使用基于经典RSA的时间锁谜题[24]，模数为2048位，并且（为了简化测量）使用RSA-2048位签名作为动态签名方案。我们假设使用最优速度-1 pebbling算法以及SHA256作为 \(H\)。以下所有测量均在Ryzen 3600上进行。