for sure, since the Censys data is limited to server scans.)
Another positive observation is that the rate at which TLS 1.0,
which is vulnerable to POODLE downgrade attacks [40], is
negotiated (10.44%) is signiﬁcantly lower than the baseline.
From these results, we can see that medical supporting devices
in the network we observed make use of secure protocols more
frequently than the rest of the Internet.
B. Cipher Suite Quality
On top of the TLS/SSL protocol analysis, we also looked
for the cipher suite negotiated in each connection involving
medical supporting devices. To measure the overall cipher
quality used in these connections we assigned each negotiated
cipher to one of four categories:
• Secure. The session uses strong primitives with no known
attacks: AES-GCM or ChaCha20+Poly1305 for encryp-
tion, ephemeral (EC)DH for key agreement, ECDSA or
RSA for authentication, and SHA2 or higher for hashing.
• Weak. The session uses strong primitives, but there is a
known attack against it: sessions using CBC-mode for
encryption are vulnerable to the “Lucky 13” attack [8], a
sophisticated variant of the “padding-oracle” attack [46]
that recent versions of TLS are designed to mitigate;
and sessions using RSA encryption for key transport
are vulnerable to ROBOT [17], a modern variant of
Bleichenbacher’s attack against PKCS#1 v1.5 [16] that
allows an adversary to break the conﬁdentiality of a TLS
session.
• Insecure. The session uses one or more insecure primi-
tives: we observed the RC4 stream cipher [38], the 3DES
block cipher [14], and the SHA1 hash function [44] in
wide use.
• Broken. The session has effectively no practical security:
the DES or export-grade primitives used for encryption,
the “null” cipher, resulting in no encryption at all, anony-
mous Difﬁe-Hellman (DH), which permits a trivial man-
in-the-middle attack, and the broken MD5 hash function.
In Figure 4, we show the overall cipher quality for each
day of our collection period. The cycles seen in this ﬁgure are
due to weekday and weekend trafﬁc patterns for the hospital
workers. Throughout our collection period, the cipher quality
appears to be relatively stable. However, by our measure
of quality only 53.21% of the sessions are deemed secure;
19.61% are weak, 27.08% are insecure, and 0.11% are broken.
While the cipher quality for connections appears to be stable
throughout our collection period, all secure cipher suites were
exclusively negotiated using TLS 1.2 or higher. This suggests
that as deprecated protocols disappear, the frequency of secure
cipher negotiations will be higher.
1) Hash Functions: The high number of insecure sessions
is due to the continued use of the SHA1 hash function during
the handshake. We expect to see SHA1 in wide use since it
was deprecated just last year [44]. However, we also expect its
usage to decrease over time as servers do routine updates. As
shown in Figure 5, no such trend is observed during the six
months we collected data. As evidence of this observation, we
performed an Augmented Dickey-Fuller (ADF) test. This is a
null hypothesis test that checks if a time series is stationary
8
Fig. 3: Number of handshakes for each TLS/SSL protocol.
TLS 1.2 usage is at least an order of magnitude greater than
any other protocol version.
A. TLS/SSL Usage
We observed approximately 325 million TLS/SSL estab-
lished handshakes during the six month data-collection period.
Figure 3 provides a summary of handshakes classiﬁed by
protocol: TLS 1.2 made up the vast majority of the trafﬁc, com-
prising 87.88% of all observed handshake attempts; TLS 1.0
was the second most used at 10.33%, and TLS 1.1 was the
third most used at 1.78%. The remaining 0.01% consisted of
TLS 1.3,5 DTLS 1.0 and 1.2, and the deprecated SSL 2/3
protocols. The connection rates were highest for (D)TLS 1.2
and TLS 1.0, in which the majority of handshakes completed.
The majority of handshakes did not complete for all other
protocols.
Our data covers all established TLS/SSL connections that
passed through the hospital network. We found that over 97%
of connections were made using TCP port 443; thus, we cre-
ated a baseline by using the IPv4 scans of TCP port 443 found
on Censys (Section IV-B). The scans indicate that 76.61%
of servers on the Internet prefer TLS 1.2; 20.90% prefer
TLS 1.0, 1.59% prefer 1.1, and only 0.89% prefer SSL 3.6
Interestingly, of all inbound and outbound connections, the
rate at which TLS 1.2 (87.88%) is actually used by devices
within the hospital network is signiﬁcantly higher than the
proportion of servers on the Internet that prefer this protocol.
Unfortunately, the above metric is not a one-to-one comparison
because it is not possible for us to get all trafﬁc from all the
Internet servers. However, looking at this metric gives us a
good idea of how medical supporting devices are behaving in
regards to preferred communication methods. This indicates
that the rate of TLS 1.2 usage is likely higher among sessions
5The TLS 1.3 protocol was an Internet draft during the data-collection
period. Compliant implementations of this protocol indicate which draft is
being used; we observed only draft 18.
6The Censys baseline also contained a negligible number (< 0.001%) of
connections referring an “unknown” protocol.
TLSv13-draft18TLSv12DTLSv12TLSv11TLSv10DTLSv10SSLv3SSLv2Protocol100101102103104105106107108ConnectionsEstablishedAbortedFig. 4: Quality of cipher suites used in TLS/SSL sessions by medical supporting devices. The volume of sessions established
with non-secure cipher suites appears to be stable throughout our collection period.
or non-stationary. We set α = 0.05 and determined that the
SHA1 usage for medical supporting devices is stationary (p <
0.0001). This indicates that SHA1 is likely to remain in use for
the foreseeable future perhaps as long as TLS 1.2 remains the
most used protocol of servers. We expect its use to decrease
as TLS 1.3 enters wide adoption.
We also looked for the use of other cryptographic hash
functions both by medical supporting devices and the Internet
at large (Figure 5).7 First, we note that the broken MD5 hash
function is almost completely phased out from TLS/SSL com-
munications as connections made with this hashing algorithm
make up less than 1.5% of daily sessions in both datasets.
Next, we looked at the percentage of SHA2 variants: SHA256
and SHA384. With respect to hashing, the biggest discrepancy
between medical supporting devices and the Internet is due to
SHA384 as it appears to be nonexistent in the Internet (less
than 0.01%) while making up 25.93% of the daily established
sessions for medical supporting devices. To determine how
many sessions use a secure hashing algorithm, we must add
all daily sessions made using SHA256 and SHA384 for both
datasets (though secure, SHA512 was not found in either
dataset). From this addition, we determined that medical
supporting devices use secure hashing more often than other
Internet devices (a difference of 10.82%). This higher rate may
be attributed to a combination of factors ranging from the
browsers used by medical supporting devices being updated
more frequently to hospital networks having stricter policies.
Finally, we note that no connections were established using
the SHA3 hash function in both datasets. SHA3 represents the
most modern development in hash function design [13].
2) Forward Secrecy: A session is said to be forward secret
if a key compromised in the current session does not permit
7We note that for this study, we resampled the Censys baseline data to
summarize two weeks, rather than one, due to a small sample size in mid-
February.
Fig. 5: Percentage of daily connections using various hashing
algorithms. In total, medical supporting devices show an
average of 72.84% secure sessions (SHA256 and SHA384
combined) while the baseline only accounts for 62.02% secure
sessions. Interestingly, while SHA384 is used in about 25%
percent of daily communications in a hospital, it only makes
up 0.01% of the baseline.
an adversary to decrypt prior sessions between the two parties.
Sessions that use ephemeral DH have this property; resumed
sessions, or sessions that use static DH or RSA for key
transport do not. In the context of medical supporting devices,
forward secrecy is a desired property because it limits the
possible exposure of data traversing the hospital to a single
session as opposed to multiple (e.g., EHRs transferred over the
network in multiple connections). Overall, 81.14% of sessions
9
2018-012018-022018-032018-042018-052018-062018-07Date102103104105106ConnectionsSecureWeakInsecureBroken2018-012018-022018-032018-042018-052018-062018-07Date0102030405060PercentageHospital MD5 usageBaseline MD5 usageHospital SHA1 usageBaseline SHA1 usageHospital SHA256 usageBaseline SHA256 usageHospital SHA384 usageBaseline SHA384 usageFig. 6: Breakdown of established connections. We say the version is secure if (D)TLS 1.2 or higher was negotiated, since secure
cipher suites were only negotiated in these protocols. The quality of the ciphersuite is categorized according to our criteria in
Section VI-B.
for medical supporting devices were found to be forward
secret. On the other hand, only 72.3% of servers scanned by
Censys prefer a cipher suite that is forward secret; depending
on the rate of resumption of sessions on the Internet at large,
this may indicate a higher rate of forward secrecy among
sessions in our network.
First, we found that 0.08% of
3) Broken Ciphers: Only 0.11% of the sessions used a
broken cipher suite. While the percentage is low, these account
for 351,105 sessions that have no security against an on-path
adversary. Below, we highlight the more signiﬁcant ﬁndings.
sessions used the
TLS_RSA_WITH_RC4_MD5 cipher suite in TLS 1.0. These
use RSA for key transport and authentication, RC4 for en-
cryption, and MD5 for hashing. We regard this as broken
because MD5’s weaknesses permit the adversary to easily
forge ciphertexts and transmit them to the client or server. The
use of RC4 is also concerning, since it is known to leak part of
the plaintext to the adversary. These connections seem to only
have two end points: a mail server likely serving legacy clients
outside the network and another server owned by a health care
company that deals with medical IT. The latter is concerning
as it allows data packets to travel outside the network with
little integrity and weak conﬁdentiality.
Second, 0.03% of sessions that have been established
negotiated TLS_RSA_WITH_NULL_SHA256 in TLS 1.2 with
an external server. This suite uses RSA for authentication
and SHA2 for hashing, but data in these sessions traversed
the network entirely in the clear (with no encryption). Thus,
anyone on the communications path can access the data.
C. Directional Trafﬁc
So far we have addressed the security of established TLS
sessions overall, but in order to better understand the security
of medical supporting devices in the network, it is necessary to
investigate the behavior of inbound and outbound connections
separately. (Inbound connections are made to a server in the
network from a client outside the network, and outbound
connections made to a serer outside the network from a client
inside the network.) This gives us crucial insights into how
these endpoints might be conﬁgured without actively scanning
the end devices and disrupting the hospital’s daily activity.
Figure 6 breaks down the established connections into
the following categories: inbound and outbound; among these
categories, whether (D)TLS 1.2 or above was negotiated; and
among these categories, whether the negotiated cipher suite
was secure, weak, insecure, or broken according to our criteria
outlined in Section VI-B. Outbound connections comprised
87.41% of the trafﬁc, while inbound connections comprised
only 12.59%. The large difference is expected as devices
inside the network will make more connections to external
servers than external clients will connect to devices inside the
hospital. We observe that most (over 85%) of both inbound
and outbound connections used modern protocols (TLS 1.2
or higher); however, this did not correlate with the overall
quality of cipher suites. In particular, we found that the nearly
all inbound connections used insecure cipher suites, while the
majority of outbound connections were secure by this meausre.
Digging deeper, we noticed that SHA1 is used much more
frequently for inbound connections than for outbound. Since
the trend towards deprecating SHA1 is relatively recent, this
discrepancy may indicate lag in patching medical supporting
devices. However, we cannot say for certain without actively
scanning them to determine their conﬁguration and cipher suite
preferences. (It is conceivable that the connecting clients do
not support SHA2.)
To further analyze each medical supporting device and to
gain a network understanding into how they communicate with
other external devices, we investigated the rate at which they
establish secure connections throughout our collection period.
We separated devices by IP address and computed the ratio of
secure connections over total connections established. While
this gives us the individual performance for each device, we
wanted to see how they compare to each other and how they
affect the hospital network as a whole. We compute the average
rate of secure connections as
(1)
(cid:80)
i∈IPs Si /Ti
|IPs|
Ravg :=
10
TraﬃcTLS/SSL VersionsCipher Suite NegotiatedFig. 7: Average secure connection ratio per endpoint (blue)
versus the fraction of devices (orange) for which we observed
negotiation of an obsolete protocol (SSL 3 or TLS 1.1 or
below).
where IPs denotes the set of observed IPs and for each i ∈ IPs,
Ti is the total number of established connections involving i
and Si is the number of that were secure. We computed this
metric for both inbound and outbound connections. In Figure 7,
we show that inbound and outbound trafﬁc do not signiﬁcantly
differ in terms of average secure connections made by each
device (83.38% for outbound and 88.20% for inbound trafﬁc).
We can additionally infer a partial conﬁguration of medical
supporting devices by analyzing their connections individually.
Since establishing a connection requires both the client and
the server to agree on a protocol and cipher suite, established
connections can tell us what the medical supporting device is
able to accept. As such, we can infer that a device supports an
obsolete TLS/SSL version if we ﬁnd connections in which such
a protocol was negotiated; if no such connection was made,
then it is likely that one or both of the endpoints only supports
modern protocols. (Again, we cannot say for sure without
an active scan.) Figure 7 shows the fraction of endpoints
to which we observed at
least one connection established
using an obsolete protocol (TLS 1.1 or below). In the case
of outbound trafﬁc, the existence of such connection tells us
that the medical supporting device is communicating with a
server that has not been updated to deny insecure protocols
and that the device itself is offering the deprecated version.
We found that 65.87% of medical supporting devices
established an outbound connection with an obsolete protocol