            && RT_VALID_PTR(pidClient)
            && RT_VALID_PTR(pfnAsyncCallback))
        {
            /* Allocate request */
            VMMDevHGCMConnect *pHGCMConnect = NULL;
            rc = VbglR0GRAlloc((VMMDevRequestHeader **)&pHGCMConnect, sizeof(VMMDevHGCMConnect), VMMDevReq_HGCMConnect);
            if (RT_SUCCESS(rc))
            {
                /* Initialize request memory */
                pHGCMConnect->header.header.fRequestor = fRequestor;
                pHGCMConnect->header.fu32Flags = 0;
                memcpy(&pHGCMConnect->loc, pLoc, sizeof(pHGCMConnect->loc));
                pHGCMConnect->u32ClientID = 0;
                /* Issue request */
                rc = VbglR0GRPerform (&pHGCMConnect->header.header);
                if (RT_SUCCESS(rc))
                {
                    /* Check if host decides to process the request asynchronously. */
                    if (rc == VINF_HGCM_ASYNC_EXECUTE)
                    {
                        /* Wait for request completion interrupt notification from host */
                        pfnAsyncCallback(&pHGCMConnect->header, pvAsyncData, u32AsyncData);
                    }
                    rc = pHGCMConnect->header.result;
                    if (RT_SUCCESS(rc))
                        *pidClient = pHGCMConnect->u32ClientID;
                }
                VbglR0GRFree(&pHGCMConnect->header.header);
            }
        }
        else
            rc = VERR_INVALID_PARAMETER;
        return rc;
    }
该函数主要是新建了一个结构体，并从最开始`ioctl`操作中传入的结构体中复制`HGCMServiceLocation`结构体数据，然后传入`VbglR0GRPerform`函数。  
VbglR0GRPerform函数实际上就是一个对`in`和`out`汇编指令的封装，操作IO接口，可以知道，其请求的端口地址为`g_vbgldata.portVMMDev
+ VMMDEV_PORT_OFF_REQUEST`
####  VbglR0GRPerform
    DECLR0VBGL(int) VbglR0GRPerform(VMMDevRequestHeader *pReq)
    {
        int rc = vbglR0Enter();
        if (RT_SUCCESS(rc))
        {
            if (pReq)
            {
                RTCCPHYS PhysAddr = VbglR0PhysHeapGetPhysAddr(pReq);
                if (   PhysAddr != 0
                    && PhysAddr rc;
                }
                else
                    rc = VERR_VBGL_INVALID_ADDR;
            }
            else
                rc = VERR_INVALID_PARAMETER;
        }
        return rc;
    }
通过查找`VMMDEV_PORT_OFF_REQUEST`的引用，可以发现`src\VBox\Devices\VMMDev\VMMDev.cpp`文件，可以知道这是VirtualBox虚拟出来的IO设备,在`vmmdevIOPortRegionMap`函数中，通过`PDMDevHlpIOPortRegister`函数为`VMMDEV_PORT_OFF_REQUEST`IO端口注册了一个处理函数。
    static DECLCALLBACK(int) vmmdevIOPortRegionMap(PPDMDEVINS pDevIns, PPDMPCIDEV pPciDev, uint32_t iRegion,
                                                   RTGCPHYS GCPhysAddress, RTGCPHYS cb, PCIADDRESSSPACE enmType)
    {
        LogFlow(("vmmdevIOPortRegionMap: iRegion=%d GCPhysAddress=%RGp cb=%RGp enmType=%d\n", iRegion, GCPhysAddress, cb, enmType));
        RT_NOREF3(iRegion, cb, enmType);
        PVMMDEV pThis = RT_FROM_MEMBER(pPciDev, VMMDEV, PciDev);
        Assert(enmType == PCI_ADDRESS_SPACE_IO);
        Assert(iRegion == 0);
        AssertMsg(RT_ALIGN(GCPhysAddress, 8) == GCPhysAddress, ("Expected 8 byte alignment. GCPhysAddress=%#x\n", GCPhysAddress));
        /*
         * Register our port IO handlers.
         */
        int rc = PDMDevHlpIOPortRegister(pDevIns, (RTIOPORT)GCPhysAddress + VMMDEV_PORT_OFF_REQUEST, 1,
                                         pThis, vmmdevRequestHandler, NULL, NULL, NULL, "VMMDev Request Handler");
因此我们在Guset中的`ASMOutU32(g_vbgldata.portVMMDev + VMMDEV_PORT_OFF_REQUEST,
(uint32_t)PhysAddr);`请求最终被传入到虚拟设备中的`vmmdevRequestHandler`函数中进行处理。
####  vmmdevRequestHandler
    /**
     * @callback_method_impl{FNIOMIOPORTOUT,
     * Port I/O write andler for the generic request interface.}
     */
    static DECLCALLBACK(int) vmmdevRequestHandler(PPDMDEVINS pDevIns, void *pvUser, RTIOPORT Port, uint32_t u32, unsigned cb)
    {
        uint64_t tsArrival;
        STAM_GET_TS(tsArrival);
        RT_NOREF2(Port, cb);
        PVMMDEV pThis = (VMMDevState *)pvUser;
        /*
         * The caller has passed the guest context physical address of the request
         * structure. We'll copy all of it into a heap buffer eventually, but we
         * will have to start off with the header.
         */
        VMMDevRequestHeader requestHeader;
        RT_ZERO(requestHeader);
        PDMDevHlpPhysRead(pDevIns, (RTGCPHYS)u32, &requestHeader, sizeof(requestHeader));
    .........................................................
                if (pRequestHeader)
                {
                    memcpy(pRequestHeader, &requestHeader, sizeof(VMMDevRequestHeader));
                    /* Try lock the request if it's a HGCM call and not crossing a page boundrary.
                       Saves on PGM interaction. */
                    VMMDEVREQLOCK   Lock   = { NULL, { 0, NULL } };
                    PVMMDEVREQLOCK  pLock  = NULL;
                    size_t          cbLeft = requestHeader.size - sizeof(VMMDevRequestHeader);
                    if (cbLeft)
                    {
                        ...............................
                    }
                    /*
                     * Feed buffered request thru the dispatcher.
                     */
                    uint32_t fPostOptimize = 0;
                    PDMCritSectEnter(&pThis->CritSect, VERR_IGNORED);
                    rcRet = vmmdevReqDispatcher(pThis, pRequestHeader, u32, tsArrival, &fPostOptimize, &pLock);
                    PDMCritSectLeave(&pThis->CritSect);
请求将被传入`vmmdevReqDispatcher`函数进行调度
    /**
     * Dispatch the request to the appropriate handler function.
     *
     * @returns Port I/O handler exit code.
     * @param   pThis           The VMM device instance data.
     * @param   pReqHdr         The request header (cached in host memory).
     * @param   GCPhysReqHdr    The guest physical address of the request (for
     *                          HGCM).
     * @param   tsArrival       The STAM_GET_TS() value when the request arrived.
     * @param   pfPostOptimize  HGCM optimizations, VMMDEVREQDISP_POST_F_XXX.
     * @param   ppLock          Pointer to the lock info pointer (latter can be
     *                          NULL).  Set to NULL if HGCM takes lock ownership.
     */
    static int vmmdevReqDispatcher(PVMMDEV pThis, VMMDevRequestHeader *pReqHdr, RTGCPHYS GCPhysReqHdr,
                                   uint64_t tsArrival, uint32_t *pfPostOptimize, PVMMDEVREQLOCK *ppLock)
    {
        int rcRet = VINF_SUCCESS;
        Assert(*pfPostOptimize == 0);
        switch (pReqHdr->requestType)
        {
        ...........................................
    #ifdef VBOX_WITH_HGCM
            case VMMDevReq_HGCMConnect:
                vmmdevReqHdrSetHgcmAsyncExecute(pThis, GCPhysReqHdr, *ppLock);
                pReqHdr->rc = vmmdevReqHandler_HGCMConnect(pThis, pReqHdr, GCPhysReqHdr);
                Assert(pReqHdr->rc == VINF_HGCM_ASYNC_EXECUTE || RT_FAILURE_NP(pReqHdr->rc));
                if (RT_SUCCESS(pReqHdr->rc))
                    *pfPostOptimize |= VMMDEVREQDISP_POST_F_NO_WRITE_OUT;
                break;
            case VMMDevReq_HGCMDisconnect:
                vmmdevReqHdrSetHgcmAsyncExecute(pThis, GCPhysReqHdr, *ppLock);
                pReqHdr->rc = vmmdevReqHandler_HGCMDisconnect(pThis, pReqHdr, GCPhysReqHdr);
                Assert(pReqHdr->rc == VINF_HGCM_ASYNC_EXECUTE || RT_FAILURE_NP(pReqHdr->rc));
                if (RT_SUCCESS(pReqHdr->rc))
                    *pfPostOptimize |= VMMDEVREQDISP_POST_F_NO_WRITE_OUT;
                break;
    # ifdef VBOX_WITH_64_BITS_GUESTS
            case VMMDevReq_HGCMCall64:
    # endif
            case VMMDevReq_HGCMCall32:
                vmmdevReqHdrSetHgcmAsyncExecute(pThis, GCPhysReqHdr, *ppLock);
                pReqHdr->rc = vmmdevReqHandler_HGCMCall(pThis, pReqHdr, GCPhysReqHdr, tsArrival, ppLock);
                Assert(pReqHdr->rc == VINF_HGCM_ASYNC_EXECUTE || RT_FAILURE_NP(pReqHdr->rc));
                if (RT_SUCCESS(pReqHdr->rc))
                    *pfPostOptimize |= VMMDEVREQDISP_POST_F_NO_WRITE_OUT;
                break;
            case VMMDevReq_HGCMCancel:
                pReqHdr->rc = vmmdevReqHandler_HGCMCancel(pThis, pReqHdr, GCPhysReqHdr);
                break;
            case VMMDevReq_HGCMCancel2:
                pReqHdr->rc = vmmdevReqHandler_HGCMCancel2(pThis, pReqHdr);
                break;
    #endif /* VBOX_WITH_HGCM */
    ...........................................
在`VMMDevReq_HGCMConnect`时，使用`vmmdevReqHdrSetHgcmAsyncExecute`函数设置异步返回值，这样Guset系统驱动的`VbglR0HGCMInternalConnect`函数时将通过`pfnAsyncCallback(&pHGCMConnect->header,
pvAsyncData,
u32AsyncData);`等待设备这里的操作完成并获取结果；设备这里将调用`vmmdevReqHandler_HGCMConnect`连接HGCM服务，继续跟踪，
####  vmmdevReqHandler_HGCMConnect
    /** Handle VMMDevHGCMConnect request.
     *
     * @param   pThis           The VMMDev instance data.
     * @param   pHGCMConnect    The guest request (cached in host memory).
     * @param   GCPhys          The physical address of the request.
     */
    int vmmdevHGCMConnect(PVMMDEV pThis, const VMMDevHGCMConnect *pHGCMConnect, RTGCPHYS GCPhys)
    {
        int rc = VINF_SUCCESS;
        PVBOXHGCMCMD pCmd = vmmdevHGCMCmdAlloc(pThis, VBOXHGCMCMDTYPE_CONNECT, GCPhys, pHGCMConnect->header.header.size, 0,
                                               pHGCMConnect->header.header.fRequestor);
        if (pCmd)
        {
            vmmdevHGCMConnectFetch(pHGCMConnect, pCmd);
            /* Only allow the guest to use existing services! */
            ASSERT_GUEST(pHGCMConnect->loc.type == VMMDevHGCMLoc_LocalHost_Existing);
            pCmd->u.connect.pLoc->type = VMMDevHGCMLoc_LocalHost_Existing;
            vmmdevHGCMAddCommand(pThis, pCmd);
            rc = pThis->pHGCMDrv->pfnConnect(pThis->pHGCMDrv, pCmd, pCmd->u.connect.pLoc, &pCmd->u.connect.u32ClientID);
            if (RT_FAILURE(rc))
                vmmdevHGCMRemoveCommand(pThis, pCmd);
        }
        else
        {
            rc = VERR_NO_MEMORY;
        }
        return rc;
    }
函数中主要是调用了`rc = pThis->pHGCMDrv->pfnConnect(pThis->pHGCMDrv, pCmd,
pCmd->u.connect.pLoc,
&pCmd->u.connect.u32ClientID);`进行服务连接，其中pThis在`vmmdevIOPortRegionMap`函数中初始化
        PVMMDEV pThis = RT_FROM_MEMBER(pPciDev, VMMDEV, PciDev);
pThis->pHGCMDrv在`vmmdevConstruct`函数中被初始化
            pThis->pHGCMDrv = PDMIBASE_QUERY_INTERFACE(pThis->pDrvBase, PDMIHGCMCONNECTOR);
通过调试，可以知道`pThis->pHGCMDrv->pfnConnect`最终指向的是`iface_hgcmConnect`函数
    In file: /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Devices/VMMDev/VMMDevHGCM.cpp
       450         /* Only allow the guest to use existing services! */
       451         ASSERT_GUEST(pHGCMConnect->loc.type == VMMDevHGCMLoc_LocalHost_Existing);
       452         pCmd->u.connect.pLoc->type = VMMDevHGCMLoc_LocalHost_Existing;
       453 
       454         vmmdevHGCMAddCommand(pThis, pCmd);
     ► 455         rc = pThis->pHGCMDrv->pfnConnect(pThis->pHGCMDrv, pCmd, pCmd->u.connect.pLoc, &pCmd->u.connect.u32ClientID);
       456         if (RT_FAILURE(rc))
       457             vmmdevHGCMRemoveCommand(pThis, pCmd);
       458     }
       459     else
       460     {
    pwndbg> s
       599 /* HGCM connector interface */
       600 
       601 static DECLCALLBACK(int) iface_hgcmConnect(PPDMIHGCMCONNECTOR pInterface, PVBOXHGCMCMD pCmd,
       602                                            PHGCMSERVICELOCATION pServiceLocation,
       603                                            uint32_t *pu32ClientID)
     ► 604 {
其中iface_hgcmConnect函数源码如下
####  iface_hgcmConnect
    static DECLCALLBACK(int) iface_hgcmConnect(PPDMIHGCMCONNECTOR pInterface, PVBOXHGCMCMD pCmd,
                                               PHGCMSERVICELOCATION pServiceLocation,
                                               uint32_t *pu32ClientID)
    {
        Log9(("Enter\n"));
        PDRVMAINVMMDEV pDrv = RT_FROM_MEMBER(pInterface, DRVMAINVMMDEV, HGCMConnector);
        if (    !pServiceLocation
            || (   pServiceLocation->type != VMMDevHGCMLoc_LocalHost
                && pServiceLocation->type != VMMDevHGCMLoc_LocalHost_Existing))
        {
            return VERR_INVALID_PARAMETER;
        }
        /* Check if service name is a string terminated by zero*/
        size_t cchInfo = 0;
        if (RTStrNLenEx(pServiceLocation->u.host.achName, sizeof(pServiceLocation->u.host.achName), &cchInfo) != VINF_SUCCESS)
        {
            return VERR_INVALID_PARAMETER;
        }
        if (!pDrv->pVMMDev || !pDrv->pVMMDev->hgcmIsActive())
            return VERR_INVALID_STATE;
        return HGCMGuestConnect(pDrv->pHGCMPort, pCmd, pServiceLocation->u.host.achName, pu32ClientID);
    }
这里，对于`pServiceLocation->type`字段，其值必须为`VMMDevHGCMLoc_LocalHost`或者`VMMDevHGCMLoc_LocalHost_Existing`。检查通过以后，就会继续调用`HGCMGuestConnect`函数  
而`HGCMGuestConnect`函数是将数据封装为消息，然后调用`hgcmMsgPost`，`hgcmMsgPost`最后会调用`hgcmMsgPostInternal`函数向`HGCMThread`实例发送消息
####  hgcmMsgPostInternal
    DECLINLINE(int) hgcmMsgPostInternal(HGCMMsgCore *pMsg, PHGCMMSGCALLBACK pfnCallback, bool fWait)
    {
        LogFlow(("MAIN::hgcmMsgPostInternal: pMsg = %p, pfnCallback = %p, fWait = %d\n", pMsg, pfnCallback, fWait));
        Assert(pMsg);
        pMsg->Reference(); /* paranoia? */
        int rc = pMsg->Thread()->MsgPost(pMsg, pfnCallback, fWait);
        pMsg->Dereference();
        LogFlow(("MAIN::hgcmMsgPostInternal: pMsg = %p, rc = %Rrc\n", pMsg, rc));
        return rc;
    }
通过gdb调试
    In file: /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp
       697     LogFlow(("MAIN::hgcmMsgPostInternal: pMsg = %p, pfnCallback = %p, fWait = %d\n", pMsg, pfnCallback, fWait));
       698     Assert(pMsg);