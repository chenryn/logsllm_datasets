    :::
:::
:::
::: section
::: titlepage
# []{#reusing-the-same-ip-address-on-different-interfaces_configuring-and-managing-networking.html#temporarily-reusing-the-same-ip-address-on-different-interfaces_reusing-the-same-ip-address-on-different-interfaces}在不同接口中临时重复使用相同的 IP 地址 {.title}
:::
本节中的步骤论述了如何使用虚拟路由和转发（VRF）功能在某个服务器的不同接口中临时使用相同的
IP 地址。这个过程仅用于测试目的，因为配置是临时的并在重启系统后会丢失。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要在重新使用相同的 IP 地址时让远程对等两个 VRF
接口都联系，网络接口必须属于不同的广播域。广播域是一组节点，它们接收被其中任何一个发送的广播流量。在大多数配置中，所有连接到同一交换机的节点都属于相同的域。
:::
::: itemizedlist
**先决条件**
-   以 `root`{.literal} 用户身份登录。
-   没有配置网络接口。
:::
::: orderedlist
**流程**
1.  创建并配置第一个 VRF 设备：
    ::: orderedlist
    1.  创建 VRF 设备并将其分配到路由表中。例如，要创建一个名为
        `blue`{.literal} 的 VRF 设备，它将分配给 `1001`{.literal}
        路由表：
        ``` literallayout
        # ip link add dev blue type vrf table 1001
        ```
    2.  启用 `blue`{.literal} 设备：
        ``` literallayout
        # ip link set dev blue up
        ```
    3.  为 VRF 设备分配网络设备。例如，将 `enp1s0`{.literal}
        以太网设备添加到 `blue`{.literal} VRF 设备中：
        ``` literallayout
        # ip link set dev enp1s0 master blue
        ```
    4.  启用 `enp1s0`{.literal} 设备：
        ``` literallayout
        # ip link set dev enp1s0 up
        ```
    5.  为 `enp1s0`{.literal} 设备分配 IP
        地址和子网掩码。例如，将其设置为 `192.0.2.1/24`{.literal} ：
        ``` literallayout
        # ip addr add dev enp1s0 192.0.2.1/24
        ```
    :::
2.  创建并配置下一个 VRF 设备：
    ::: orderedlist
    1.  创建 VRF 设备并将其分配到路由表中。例如，要创建一个名为
        `红色的`{.literal} VRF 设备，并将其分配给 `1002`{.literal}
        路由表：
        ``` literallayout
        # ip link add dev red type vrf table 1002
        ```
    2.  启用 `红色`{.literal} 设备：
        ``` literallayout
        # ip link set dev red up
        ```
    3.  为 VRF 设备分配网络设备。例如，在 `红色`{.literal} VRF
        设备中添加 `enp7s0`{.literal} 以太网设备：
        ``` literallayout
        # ip link set dev enp7s0 master red
        ```
    4.  启用 `enp7s0`{.literal} 设备：
        ``` literallayout
        # ip link set dev enp7s0 up
        ```
    5.  为 `enp7s0`{.literal} 设备分配与 `blue`{.literal} VRF 域中
        `enp1s0`{.literal} 设备相同的 IP 地址和子网掩码：
        ``` literallayout
        # ip addr add dev enp7s0 192.0.2.1/24
        ```
    :::
3.  另外，还可按照上述步骤创建更多 VRF 设备。
:::
:::
::: section
::: titlepage
# []{#reusing-the-same-ip-address-on-different-interfaces_configuring-and-managing-networking.html#_additional_resources_5}其他资源 {.title}
:::
::: itemizedlist
-   来自 `kernel-doc`{.literal} 软件包的
    `/usr/share/doc/kernel-doc-/Documentation/networking/vrf.txt`{.literal}
:::
:::
:::
[]{#assembly_starting-a-service-within-an-isolated-vrf-network_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_starting-a-service-within-an-isolated-vrf-network_configuring-and-managing-networking.html#assembly_starting-a-service-within-an-isolated-vrf-network_configuring-and-managing-networking}第 42 章 在隔离的 VRF 网络中启动服务 {.title}
:::
使用虚拟路由和转发(VRF)，您可以使用与操作系统主要路由表不同的路由表创建隔离网络。然后您可以启动服务和应用程序，以便它们只能访问该路由表中定义的网络。
::: section
::: titlepage
# []{#assembly_starting-a-service-within-an-isolated-vrf-network_configuring-and-managing-networking.html#proc_configuring-a-vrf-device_assembly_starting-a-service-within-an-isolated-vrf-network}配置 VRF 设备 {.title}
:::
要使用虚拟路由和转发(VRF)，您需要创建一个 VRF
设备并附加物理或者虚拟网络接口以及路由信息。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
要防止您远程锁定，在本地控制台或不想分配给 VRF
设备的网络接口上执行这个步骤。
:::
::: itemizedlist
**先决条件**
-   您已在本地登录，或使用与您要分配给 VRF 设备不同的网络接口。
:::
::: orderedlist
**步骤**
1.  使用同一命名的虚拟设备创建 `vrf0`{.literal} 连接，并将其附加到路由表
    `1000`{.literal} ：
    ``` literallayout
    # nmcli connection add type vrf ifname vrf0 con-name vrf0 table 1000 ipv4.method disabled ipv6.method disabled
    ```
2.  将 `enp1s0`{.literal} 设备添加到 `vrf0`{.literal} 连接，并配置 IP
    设置：
    ``` literallayout
    # nmcli connection add type ethernet con-name enp1s0 ifname enp1s0 master vrf0 ipv4.method manual ipv4.address 192.0.2.1/24 ipv4.gateway 192.0.2.254
    ```
    此命令会创建 `enp1s0`{.literal} 连接，作为 `vrf0`{.literal}
    连接的端口。由于此配置，路由信息会自动分配给与 `vrf0`{.literal}
    设备关联的路由表 `1000`{.literal}。
3.  如果您需要隔离网络中的静态路由：
    ::: orderedlist
    1.  添加静态路由：
        ``` literallayout
        # nmcli connection modify enp1s0 +ipv4.routes "198.51.100.0/24 192.0.2.2"
        ```
        这为 `198.51.100.0/24`{.literal} 网络添加了一个路由，该网络使用
        `192.0.2.2`{.literal} 作为路由器。
    2.  激活连接：
        ``` literallayout
        # nmcli connection up enp1s0
        ```
    :::
:::
::: orderedlist
**验证**
1.  显示与 `vrf0`{.literal} 关联的设备的 IP 设置：
    ``` literallayout
    # ip -br addr show vrf vrf0
    enp1s0    UP    192.0.2.15/24
    ```
2.  显示 VRF 设备及其关联的路由表：
    ``` literallayout
    # ip vrf show
    Name              Table
    -----------------------
    vrf0              1000
    ```
3.  显示主路由表：
    ``` literallayout
    # ip route show
    default via 192.168.0.1 dev enp1s0 proto static metric 100
    ```
4.  显示路由表 `1000`{.literal} ：
    ``` literallayout
    # ip route show table 1000
    default via 192.0.2.254 dev enp1s0 proto static metric 101
    broadcast 192.0.2.0 dev enp1s0 proto kernel scope link src 192.0.2.1
    192.0.2.0/24 dev enp1s0 proto kernel scope link src 192.0.2.1 metric 101
    local 192.0.2.1 dev enp1s0 proto kernel scope host src 192.0.2.1
    broadcast 192.0.2.255 dev enp1s0 proto kernel scope link src 192.0.2.1
    198.51.100.0/24 via 192.0.2.2 dev enp1s0 proto static metric 101
    ```
    `default`{.literal} 条目表示使用此路由表的服务，将
    `192.0.2.254`{.literal} 用作其默认网关，而不是主路由表中的默认网关。
5.  在与 `vrf0`{.literal} 关联的网络中执行 `traceroute`{.literal}
    程序，以验证实用程序是否使用表 `1000`{.literal} 的路由：
    ``` literallayout
    # ip vrf exec vrf0 traceroute 203.0.113.1
    traceroute to 203.0.113.1 (203.0.113.1), 30 hops max, 60 byte packets
     1  192.0.2.254 (192.0.2.254)  0.516 ms  0.459 ms  0.430 ms
    ...
    ```
    第一个跃点是分配给路由表 `1000`{.literal}
    的默认网关，而不是系统的主路由表中的默认网关。
:::
::: itemizedlist
**其他资源**
-   ip-vrf(8)
:::
:::
::: section
::: titlepage
# []{#assembly_starting-a-service-within-an-isolated-vrf-network_configuring-and-managing-networking.html#proc_starting-a-service-within-an-isolated-vrf-network_assembly_starting-a-service-within-an-isolated-vrf-network}在隔离的 VRF 网络中启动服务 {.title}
:::
您可以将服务（如 Apache HTTP
服务器）配置为在隔离的虚拟路由和转发(VRF)网络内启动。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
服务只能绑定到同一 VRF 网络中的本地 IP 地址。
:::
::: itemizedlist
**先决条件**
-   您已配置了 `vrf0`{.literal} 设备。
-   已将 Apache HTTP 服务器配置为仅侦听分配给与 `vrf0`{.literal}
    设备关联的接口的 IP 地址。
:::
::: orderedlist
**步骤**
1.  显示 `httpd`{.literal} systemd 服务的内容：
    ``` literallayout
    # systemctl cat httpd
    ...
    [Service]
    ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND
    ...
    ```
    在后续步骤中需要 `ExecStart`{.literal} 参数的内容在隔离的 VRF
    网络中运行相同的命令。
2.  创建 `/etc/systemd/system/httpd.service.d/`{.literal} 目录：
    ``` literallayout
    # mkdir /etc/systemd/system/httpd.service.d/
    ```
3.  使用以下内容创建
    `/etc/systemd/system/httpd.service.d/override.conf`{.literal} 文件：
    ``` literallayout
    [Service]
    ExecStart=
    ExecStart=/usr/sbin/ip vrf exec vrf0 /usr/sbin/httpd $OPTIONS -DFOREGROUND
    ```
    要覆盖 `ExecStart`{.literal}
    参数，首先需要取消设置它，然后将其设置为如下所示的新值。
4.  重新加载 systemd。
    ``` literallayout
    # systemctl daemon-reload
    ```
5.  重新启动 `httpd`{.literal} 服务。
    ``` literallayout
    # systemctl restart httpd
    ```
:::
::: orderedlist
**验证**
1.  显示 `httpd`{.literal} 进程的进程 ID(PID)：
    ``` literallayout
    # pidof -c httpd
    1904 ...
    ```
2.  显示 PID 的 VRF 关联，例如：
    ``` literallayout
    # ip vrf identify 1904
    vrf0
    ```
3.  显示与 `vrf0`{.literal} 设备关联的所有 PID：
    ``` literallayout
    # ip vrf pids vrf0
    1904  httpd
    ...
    ```
:::
::: itemizedlist
**其他资源**
-   ip-vrf(8)
:::
:::
:::
[]{#setting-your-routing-protocols_configuring-and-managing-networking.html}
::: chapter
::: titlepage