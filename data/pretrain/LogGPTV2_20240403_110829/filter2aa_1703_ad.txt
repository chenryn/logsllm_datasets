hijacking and NetBIOS announcements, it is possible to convince a client to use
a malicious WINS server instead.
4.3.4
Authentication Relays
In the External Networks section, we describe a relay attack against SMB and
other NTLM related services. From the external network, this attack is some-
what limited, since Windows XP and newer systems will not autonegotiate
NTLM. On the internal network, this attack can be devastating when combined
with one of the DNS, WINS, or NetBIOS attacks mentioned above. If the au-
ditor can spoof the name of a trusted server, the relay attack can be used to
connect back to the client system via SMB, and if the user has administrative
access, take full control of the system via the ﬁle system and services functions.
4.4
Trust Relationships
Trusts are one of the most important things to understand and use in a pen-test.
Trusts can encompass many concepts such as:
• Host to host
19
• Network range to host
• User to host
• User to network
• Authentication tickets/tokens
• Applications
Trusts are basically agreements between two entities that allow for some kind
of access. If an auditor has access to one entity, then they should be able to
utilize the trust with the second entity to gain an advantage. Often the target
an auditor wants to attack is out of reach for various reasons such as ﬁrewalls,
TCP Wrappers, NAT’s etc. Leveraging trusts can be a powerful technique for
getting around these types of barriers.
For example, lets say the target is 192.168.0.1 and the auditor has acquired
the username and password by some means.
The target is running SSH on
port 22 for remote logins. However, the target is also conﬁgured with TCP
Wrappers which only allow SSH connections from networks in the 192.168.1
address range. The auditor would not be able to directly log into the target
under these conditions. However if the auditor was able to compromise a system
on the 192.168.1 network, then by leveraging that trust they would be able to
log into the system over SSH from that network instead or via a portforward
such as:
# Create a port forward from 192.168.1.2 to 192.168.0.1
$ datapipe 192.168.1.2 22 192.168.0.1 22
#
(This bounces through the port forward to 192.168.0.1 port 22)
$ ssh 192.168.1.2
One real world example of an interesting trust encountered by the authors was
in the form of a custom software licensing and distribution application.
All
the computers on the target network were required to have this software in-
stalled and the software ran with administrative privileges. This means that
the application was ”trusted” by every computer. This application carried an
administrative username and password inside its code in order to operate. By
reverse engineering this application the account information was extracted. The
auditors then leveraged the fact that this account was widely trusted in order
to compromise every host on the network. Any resource trusted by more than
one user or computer is a potential leverage point for the auditor.
There are several speciﬁc trust technologies which often provide good opportu-
nities for the auditor to gain access on many more hosts. These will be covered
in the next sections.
20
4.4.1
NFS Home Directories
Many large networks use a Network File System (NFS) protocol server to share
ﬁles and home directories to the clients. There are many ways to conﬁgure this
type of system but generally port 2049 UDP or TCP is open on the server, a
directory is exported either to anyone or to speciﬁc hosts and read/write/execute
permissions are assigned. The clients then mount these exported directories
which appear as just another local directory on their ﬁle systems. Often NFS is
used in conjunction with Network Information Services (NIS) to automatically
conﬁgure what exports should be mounted and authenticate users. These types
of systems are often setup so that any user can log in on any machine and receive
the same home directory.
An attacker may develop a scanner for port 2049 in order to locate any NFS
servers on the target network. An auditor can use a tool called showmount in
order to gain information about how the NFS server is conﬁgured.
# su - alice
[alice@homeserver ~] cd .ssh
[alice@homeserver .ssh] ssh-keygen -t rsa
Enter file in which to save the key (/home/alice/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/alice/.ssh/id_rsa.
Your public key has been saved in /home/alice/.ssh/id_rsa.pub.
The key fingerprint is:
e7:49:6a:eb:a9:a6:e4:b2:66:41:7e:ee:23:12:4c:28 alice@homeserver
[alice@homeserver ~]cp id_rsa.pub authorized_keys ; showmount -a homeserver
tetris:/vol/home/alice
[alice@homeserver ~] ssh tetris
Last login: Thu Jun 28 11:53:18 2007 from homeserver
[alice@tetrix ~]
4.4.2
Hijacking SSH
SSH can also be used to gather intelligence about other potential targets on the
network. Every time a user connects to a system using SSH a ﬁle is created
in /.ssh/ called known hosts. By examining this ﬁle an attacker can see other
hosts that trust the user.
[alice@homeserver .ssh]$ cat known_hosts
dontownme,192.168.1.20 ssh-rsa AAABB3Nza[...]QSM=
21
justanothertarget,192.168.1.21 ssh-rsa AAAB2NzaC[...]rQ=
Using the SSH keys described above, an attacker with access to these keys can
potentially log into any of these hosts as alice, without a password.
SSH master mode is another feature which can help the auditor in penetrat-
ing new hosts without using exploits. Master mode lets the user to set up a
tunnel which allows multiple sessions over the same SSH connection, without
re-authentication. This means that if one SSH connection is setup to a host,
using master mode, then an attacker and spawn other sessions over this same
connection without having to know a password or have access to a key. Another
beneﬁt of master mode is that it is client dependent so the server version doesn’t
matter. The implications of this are that if you can replace the users ssh client,
master mode will work regardless of the version of the server at the other end.
There are many ways to convince a user to SSH in master mode. One obvious
method would be to alias SSH to SSH -M so that the user runs it without
knowing. Another method is to modify the users SSH conﬁg ﬁle to always run
in master mode.
Edit ~/.ssh/config
Add:
Host *
ControlMaster auto
ControlPath ~/.ssh/sockets/%r@%h:%p
Mkdir ~/.ssh/sockets
Now when the user SSH’s to another host, it will be as if the used the -M
switch.
If you can become the user, you can then SSH to the host as well
without authenticating over the existing connection.
A real world example of using SSH hijacking to gain access to many hosts
was when the authors managed to compromise a major home directory server
exporting over NFS to hundreds of clients.
The authors dropped their own
passwordless ssh key in every users home .ssh/ directory and then used a script
to extract all unique hosts from every known hosts ﬁle. They could then SSH
to 100’s of nodes on the network, as any user they chose.
4.4.3
Hijacking Kerberos
Kerberos is an authentication protocol. It provides strong authentication for
client/server applications by using secret-key cryptography. Kerberos generates
”tickets” to be used for authentication to various services. On many operating
22
systems this ticket is stored as a ﬁle owned by the speciﬁc user in the /tmp
directory starting with the name krb.
Kerberos hijacking is a process of capturing a users ticket and using it to access
resources that trust the user. In general this means logging into other computers
that accept the users kerberos ticket. This attack abuses the fact that each node
trusts the kerberos system. This allows the attacker to move around a network,
compromising hosts, without using exploits or setting oﬀ alarms because in
general it will look like legitimate user behavior.
The general procedure to hijack kerberos tickets begins with gaining root access
to a kerberized system with multiple users. It continues with ﬁnding a user to
target and listing all the ﬁles in /tmp. The attacker then su’s to the user and
invokes klist to ﬁgure out what ticket ﬁlename is expected. Then the ticket
is copied from /tmp to the expected ﬁlename. Finally kinit is invoked again
to check the ticket status. Now the attacker should be able to log into any
kerberized system that trusts the hijacked user, without having to supply a
password. An example follows.
What a real user sees when invoking klist:
target|alice|1> klist
Default principal: alice@target
Valid starting
Expires
Service principal
06/28/07 11:03:25 06/28/07 21:03:25 krbtgt/target@target
renew until 07/05/07 11:03:25
Kerberos 4 ticket cache: /tmp/tkt5116
klist: You have no tickets cached
This means that the user alice has a ticket assigned which allows her to con-
nect to any kerberized system, without supplying a password, until the date of
expiration indicated.
What attacker does:
bash-3.00# ls -al /tmp/krb*
-rw-------
1 alice eng
383 Jun 28 08:19 /tmp/krb5cc_10595_ZH8kq4 <---- FREE ACCESS!
Bash-3.00# klist
Ticket cache: FILE:/tmp/krb5cc_6425 <---- expected filename
Default principal: valsmith@target
Valid starting
Expires
Service principal
06/28/07 12:14:50
06/28/07 22:14:50
krbtgt/target@target
renew until 07/05/07 12:14:39
Change the file to the expected name and check status:
23
bash-3.00# cp /tmp/krb5cc_10595_ZH8kq4 /tmp/krb5cc_6425
bash-3.00# klist
Ticket cache: FILE:/tmp/krb5cc_6425
Default principal: alice@target <--- we are now her!
Valid starting
Expires
Service principal
06/28/07 08:19:42
06/28/07 18:19:42
krbtgt/target@target
renew until 07/05/07 08:19:42
There are other types of attacks against kerberos as well. Another method is
for the attacker to generate or acquire a valid ticket. The attacker then places
their username in another users .klogin ﬁle. Now the attacker should be able to
log in anywhere the target user is trusted. Kerberos will accept the attackers
ticket and treat him as if he were the target. It is also important to copy the
ticket ﬁles oﬀ to a safe location so if a user runs kdestroy the tickets won’t
be lost. Some intelligence gathering can be done with kerberos as well. Often
there will be a .klogin in the root users home directory indicating which users
are authorized to SU to root using kerberos. This gives the attacker a list of
high proﬁle users to target with other attacks with the end goal of gaining root
access without having to use a traditional exploit.
The process of kerberos ticket stealing can be scripted an automated to harvest
hundreds or even thousands of user tickets depending on the size of the network.
A case study example of kerberos hijacking involved a target running a little
used operating system and architecture. No known exploits were available for
the auditors to use against this target. The server was also protected with TCP
wrappers to prevent unauthorized logins. However the target trusted several
large home directory servers running NFS, NIS, SSH and kerberos. The auditors
gained access to one of these home directory servers and began looking at user
known hosts ﬁles to ﬁnd a user who had a history of logging into the target.
Once a user was located their kerberos ticket was stolen and the auditors logged
into the target from the home directory server. This allowed the auditor to
bypass wrappers and avoid being ﬂagged as a suspicious user. Once logged in
they were able to view the .klogin ﬁle for root and gain a list of privileged users
to target. These users resided on the same home directory server and so their
tickets were hijacked as well. The auditors were then able to log in to the target
and type ksu, thus gaining root.
24
Chapter 5
Conclusion
The techniques described in this paper demonstrate how even a fully-patched
network can be compromised by a determined attacker. Professional security
testers have a wide range of attacks available to them that are rarely, if ever,
part of a checklist-based methodology. The best attack tool is still the human
brain.
25
Bibliography
[1] Paterva A new train of thought
http://www.paterva.com
[2] Apache Dynamic Virtual Hosting
http://httpd.apache.org/docs/2.0/vhosts/mass.html
[3] hping2 Active Network Security Tool
http://www.hping.org/
[4] Nmap Network Security Scanner
http://insecure.org/nmap/
[5] Amap Application ﬁngerprint mapper
http://www.thc.org/thc-amap/
[6] Nikto Web Server Vulnerability Scanner
http://www.cirt.net/code/nikto.shtml
[7] Nessus Vulnerability Scanner
http://www.nessus.org/
[8] Web Application Attack and Audit Framework
http://w3af.sourceforge.net/
[9] Blind Port Scanning
http://insecure.org/nmap/idlescan.html
[10] An Implementation of a Birthday Attack in a DNS Spooﬁng
http://archive.cert.uni-stuttgart.de/bugtraq/2003/04/
msg00311.html
[11] Cain & Abel
http://www.oxid.it/cain.html
[12] Rogue Server Project
http://www.inventgeek.com/Projects/projectsilver/
projectsilver.aspx
26
[13] Passive Aggression
http://www.seifried.org/security/network/
20010926-ftp-protocol.html
[14] Attacking NTLM with Precomputed Hashtables
http://uninformed.org/?v=3&a=2&t=sumry
27