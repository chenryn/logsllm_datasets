title:Platform-independent programs
author:Sang Kil Cha and
Brian Pak and
David Brumley and
Richard Jay Lipton
Platform-Independent Programs
Sang Kil Cha, Brian Pak, David Brumley
Carnegie Mellon University
Pittsburgh, PA, USA
{sangkilc,brianairb,dbrumley}@cmu.edu
Richard J. Lipton
Georgia Institute of Technology
Atlanta, GA, USA
PI:EMAIL
ABSTRACT
Given a single program (i.e., bit string), one may assume
that the program’s behaviors can be determined by ﬁrst
identifying the native runtime architecture and then execut-
ing the program on that architecture. In this paper, we chal-
lenge the notion that programs run on a single architecture
by developing techniques that automatically create a single
program string that a) runs on diﬀerent architectures, and
b) potentially has diﬀerent behaviors depending upon which
architecture it runs on. At a high level, a primary security
implication is that any program analysis done on a program
must only be considered valid for the assumed architecture.
Our techniques also introduce a new type of steganography
that hides execution behaviors. In order to demonstrate our
techniques, we implement a system for generating platform-
independent programs for x86, ARM, and MIPS. We use our
system to generate real platform-independent programs.
Categories and Subject Descriptors
D.4.6 [Operating systems]: Security and Protection
General Terms
Security
Keywords
Malware, Platform-Independent Program, Steganography
1.
INTRODUCTION
The world is powered by a variety of computer platforms.
Everyday platforms include laptops and desktops running
on x86, iPods and cell phones running ARM, and broadband
routers and DVD players running MIPS. A typical and of-
ten implicit security assumption is that a program is only
semantically meaningful on one platform, e.g., an ARM pro-
gram is typically not a valid x86 program, and vice-versa.
This assumption may seem justiﬁed since diﬀerent architec-
tures typically have radically diﬀerent instruction sets, and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
potentially even diﬀerent program encodings. Further, prac-
tical evidence of programs that run on multiple architectures
has been sparse, with only a few hand-coded examples in ex-
istence [8, 16]. A poignant description of the diﬃculty of
writing such programs was given by Drew Dean, who de-
scribed the eﬀort as requiring “a large, ﬂat space to spread
out the architecture reference manuals, and an ample sup-
ply of caﬀeine. Do not underrate the second part.” [8] Even
the most caﬀeinated approaches have been met with lim-
ited success; they have always been hand-generated and only
handled very simple, straight-line code.
In this paper, we challenge the notion that generating a
single program string that runs on multiple architectures is
inherently diﬃcult. We do so by developing techniques and
an infrastructure for automatically generating a platform-
independent program (PIP) from an existing program or pro-
grams. By platform, we mean a hardware or emulated archi-
tecture. By program, we mean a bit string that is decoded
to a valid set of instructions with operands for a platform. A
PIP is a program that runs on two or more platforms with-
out change. In particular, we formulate and address the PIP
generation challenge. In this challenge, we are given a pro-
gram b1 compiled for platform m1, b2 for m2, and so on. A
solution to the challenge is a single string bpip such that ex-
ecuting bpip on m1 is equivalent to b1, executing bpip on m2
is equivalent to b2, and so on. We develop techniques that
address the PIP generation challenge by ﬁnding a Turing-
complete set of platform-independent operations for the set
of platforms, allowing any program to be generated in a
platform-independent manner.
For concreteness, we demonstrate automatic PIP gener-
ation for the x86, ARM, and MIPS platforms. Our tech-
niques allow us to automatically generate a single binary
string that i) is a valid program on all three architectures,
and ii) can have completely diﬀerent desired runtime be-
haviors depending upon which architecture it is ran. We
choose x86, ARM, and MIPS because they collectively are
used on virtually all commonly encountered networked de-
vices, exhibiting a wide range of typical platform instruction
and operand encoding issues. We also extend our techniques
to developing OS-independent programs and demonstrating
a single platform-independent shellcode that works against
Linux, FreeBSD, and Mac OS X. We have made our imple-
mentation (minus speciﬁc exploits and malware) available
at http://security.ece.cmu.edu.
There are several security-critical implications of our tech-
niques and implementation, as illustrated in the following
usage scenarios:
547Steganography. Suppose two users wish to smuggle a pro-
gram bsecret past a dynamic analysis checker for x86.
In a steganographic setting, the program execution is
the secret the users wish to communicate, and the dy-
namic analysis checker is the warden. The two users
choose a platform mi diﬀerent than x86 and a benign
program bsafe that would pass the dynamic analysis
check. Using our techniques, the users can create a
single program string bpip such that executing bpip on
mi is equivalent to bsecret, yet executing bpip on mx86
is equivalent to bsafe. More concretely, suppose bsecret
is malware for x86. Then bpip is a program that is safe
on ARM, yet malware on x86. We call this execution-
based steganography because a) the sender and receiver
only need to share the secret (the speciﬁc platform
speciﬁcation mi) to uncover secret functionality and
b) the execution behavior will look normal to parties
without the secret.
Rogue Updates. Suppose a hacker compromises a system
and installs a microcode update. The hacker also in-
stalls a PIP-compiled version of a safe program, such
as ’/bin/ls’. When the safe program is run with the
microcode update, it acts like a rootkit. When the
safe program is run on a system without the update,
e.g., a forensic analysis machine, the program acts be-
nign. We note that the scenario may be more serious
when the adversary is powerful, e.g., Intel could design
a CPU update that turns safe, signed programs into
malware. Note that in such systems the “safe” program
may have been installed long ago and is unchanged;
thus, security measures, such as digitally signing the
code, are insuﬃcient since they only verify the code
itself has not been tampered with, not the execution
environment.
Exﬁltration Protection. Suppose that a secret govern-
ment agency wishes to protect programs against ex-
ﬁltration. They create a new instruction set m (po-
tentially as a modiﬁcation of an existing architecture
like x86). They then compile down a program to pro-
duce b such that executing b on m outputs the desired
behavior, but running it on x86 deletes the program.
Such capabilities could help protect against exﬁltra-
tion to parties unaware b is a platform independent
program.
Viruses. Our techniques allow an attacker to write a single
virus (e.g., for x86), which is then fed to our algorithm
to produce a single platform-independent virus (e.g.,
for x86 and ARM). When the platform-independent
virus is executed by a user attached to a network ﬁle
system, such as AFS and NFS, the platform-independent
virus could then infect all executables, regardless of the
architecture. Other machines attached to the network
ﬁle system can then be infected again by users execut-
ing those ﬁles.
Shellcode. Control hijack attacks include shellcode that
carries out the attackers’ intentions, e.g., opening a
shell on a network port. Shellcode is also used by some
malware to propagate themselves [13]. Our techniques
allow an attacker to automatically generate a single
string that is valid shellcode for multiple platforms.
We show in our experiments that we can take exist-
ing x86 shellcode and automatically generate a single
binary string that also runs on ARM with equivalent
functionality.
New Architectures. A company switches from architec-
ture A to B (e.g., Apple switched from PowerPC to
x86), and wishes to distribute a single program that
works on both platforms. The current approach is
to modify the executable format to include meta-data
that either runs the appropriate program for A or B
(called “fat binaries”). We show that such meta-data
is unnecessary: the program itself can identify at run-
time which architecture it is running on and act ap-
propriately.
In general, our techniques mean that any semantic secu-
rity analysis of a program should be explicitly qualiﬁed by
the assumed analysis architecture(s). For example, dynamic
analysis of x86 programs only tells us about the x86 func-
tionality, and cannot say anything about what would happen
if we execute the bit string on another platform. We also
show that there are a large number of platform-independent
byte sequences, which means syntax-based analysis is also
likely to be insuﬃcient to accurately detect platform-independent
programs. More speciﬁcally, this paper makes the following
contributions:
• We develop automatic methods for identifying platform-
independent gadgets and assembling gadgets into pro-
grams. In particular, gadgets are atomic instructions,
though each gadget may have diﬀerent functionality
per platforms. By using gadgets, we build a Turing-
complete language for creating PIPs. Note the small
amount of previous work for PIP generation was com-
pletely manual, and only straight-line (e.g., no branch-
ing).
• We propose a new type of data-hiding technique, called
• We also show that detecting PIP is not straight-forward
by developing polymorphic PIP mutation and genera-
tion algorithms.
• We provide empirical measurements of the overlap be-
tween x86, ARM, and MIPS instruction sets. Our re-
sults show a surprising amount of overlap, e.g., about
12% of all 4-byte strings are valid (thought likely dif-
ferent) x86, MIPS, and ARM instructions.
execution-based steganography.
Scope. We generate bit strings that are valid programs
when executed on multiple platforms. At a high level, this
means that even though one can ﬁgure a program string is
valid for platform x, our results show one cannot conclude
behaviors on the platform x are the only behaviors of the
program.
However, there are additional factors that may prevent
a platform-independent program from running in a speciﬁc
machine. For example, the ELF executable ﬁle format has a
ﬁeld that speciﬁes the intended CPU for the program. Such
checks may aﬀord some protection, e.g., Linux versions we
tested will not run programs that did not have the bit set to
the underlying architecture. However, the COFF format [11]
does not include such a ﬂag. Thus, one small ramiﬁcation
and contribution is that architecture checks are important to
security, even though they were likely not intended as a se-
curity measure. Nonetheless, the above motivating scenarios
show that automatically generating platform-independent
programs is a relevant and important security consideration.
5482. PROBLEM STATEMENT
2.1 Notation
A key aspect in our work is encoding programs so that
they run on multiple platforms.
In particular, we need a
vocabulary for specifying particular platforms, programs for
those platforms, and speciﬁc oﬀsets within programs. We
adopt the following. A program is a string b taken from some
alphabet Σ, i.e., b ∈ Σ∗. We use subscripts to distinguish
particular programs, and superscripts to refer to particular
oﬀsets in the program. For example, b5
1 refers to the program
b1 starting at a byte oﬀset of 5. In our implementation, we
focus on executable programs where Σ = {0, 1} and speciﬁc
programs are binary strings.
A platform is speciﬁed by a machine m for executing pro-
grams. We focus on instruction set architecture (ISA) ma-
chines, although a machine could also be an interpreter or
emulator. We again use subscripts to distinguish particular
machines. In particular, we let {mx86, mmips, marm} denote
x86, MIPS, and ARM, respectively.
The execution of program bi on machine mj is denoted as
mj(bi). We denote when a program bi is compiled to run
on a speciﬁc machine mj by the tuple (bi, mj). We denote
by ⊥ that b is not properly formatted for machine m. For
example, mx86( 9090289016) = ⊥ because 9090289016 is not
a valid x86 string. 1
A central component of our work is creating a single pro-
gram that produces semantically identical results when ran
on two or more platforms. We denote by “=” (the equal
sign) when two executions are semantically identical, i.e.,
mx86(b1) = marm(b2) means that executing b1 on machine
mx86 results in the same output as executing b2 on marm.
Equality could be determined by showing an isomorphism
between the ﬁnal state spaces of two executions, a literal
comparison between screen outputs, and so forth. In our im-
plementation, equality is determined by an isomorphism on
the state after each atomic step of execution. We stress that,
in our approach, we are generating platform-independent
programs that have semantically identical outputs by con-
struction.
2.2 Problem Deﬁnition
A platform-independent program is a program that ex-
ecutes on multiple machines. Thus, the only requirement
for a platform-independent program b is that it is a valid
program encoding and not ⊥. More formally
Definition 2.1. (Platform-Independent Program) A
string b is a platform-independent program (PIP) for ma-
chines m1 and m2 when
m1(b) (cid:54)= ⊥ ⇔ m2(b) (cid:54)= ⊥
Platform independence can be extended to lists of machines
in the obvious way.
In this paper, we are interested in general techniques for
generating PIPs. For example, when Apple migrated from
PPC to x86, they may have wanted to produce a single pro-
gram bpip that behaved the same as separately compiled
programs bx86 and bppc. However, one may also want the
PIP’s behavior to be diﬀerent for each platform, e.g., a mal-
Figure 1: Self-identifying program concept.
ware author may want a single program that is equivalent
to “hello world” on x86 and malware on ARM.
In order to allow for a wide variety of scenarios, in our
problem statement we assume we are given a program bi
for each architecture mi. Each bi acts as a speciﬁcation of
the desired behavior for the generated PIP for platform mi.
The goal is to output a single program bpip that has the same