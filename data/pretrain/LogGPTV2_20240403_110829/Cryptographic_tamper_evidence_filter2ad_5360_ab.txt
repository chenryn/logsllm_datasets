be prohibitively expensive (the costs might be manifested in
multiple ways: from performance penalties to infrastructure
complexities). Negotiating between the cost-restrictions and
the speciﬁc security properties desired for the given appli-
cation is often a challenging task. Tamper-evidence is no
exception. For example, which applications might be able
to reduce the security costs and use the much more eﬃ-
cient perfect or α-synchronous —rather than the strong—
tamper-evident signatures?
For some applications signature-requiring transactions
may be very frequent and the veriﬁer might be receiving
at least one signature from the real signer in every time pe-
riod. In such a case, clearly, perfectly-synchronous tamper-
evidence is suﬃcient.
Moreover, in our security deﬁnitions we give to the ad-
versary control over all inputs to the real signer and ac-
cess all the signatures generated by him. We also allow
the adversary to chose the time periods of both signatures
tested for divergence. This assumption might be too strong.
In this case, we can consider the probability of the veri-
ﬁer having received a signature from a real signer relatively
close to the time period of the adversary’s forgery (which
may be dictated by some external parameters). Depending
on such probabilities and the accepted risks, such applica-
tions might be able to use an α-synchronous tamper-evident
scheme (with a properly chosen α). We note that in this case
the adversary’s “vulnerability period” grows linearly with
the time elapsed after the last exposure.
In other words,
the longer the adversary waits to use the stolen secret, the
higher are her chances of being caught.
The α-synchronous schemes might be even more attrac-
tive in the settings where the value of each signature is not
very large, and only the multiple illicit use of the signatures
represents a real threat (e.g., cash withdrawals, where the
total volume of transactions in each period is limited).
The more eﬃcient but less secure schemes may also be
suﬃcient when the cost of detection is high for the forger.
For example, in the case of the credit card fraud, the oﬀender
may either be physically present at the transaction or traced
via the delivery address — leading to a stiﬀ prison sentence.
In such cases, even a relatively low probability of tamper-
detection may be a suﬃcient deterrent.
Credit cards also provide a good example for compari-
son: today, they often monitor purchases to heuristically
detect deviations from the typical shopping patterns. Us-
ing tamper-evidence —even α-synchronous— would be an
improvement of both eﬃciency and security.
Further discussion of potential applications of the tamper-
evident signatures is included in sec. 5.
Lower bounds. Our constructions’ generic and combina-
torial nature, as well as the simplicity of some of the con-
structions, may lead one to hope that utilizing more spe-
cialized and sophisticated techniques, e.g., using number-
theoretic methods, one might be able to achieve greater ef-
ﬁciency. Unfortunately, this turns out to be not so.
We prove tight lower-bounds for all the above vari-
ants. These lower bounds are perhaps the most unexpected
and counter-intuitive result of the paper. Our proofs are
information-theoretic: none of the additional complexity as-
sumptions can invalidate these lower bounds.
This leads to an intriguing open question: can a similar
notion of tamper-evidence be formulated so that the lower
bounds of our paper do not apply to it?
Next, in Section 2 we formally deﬁne tamper-evident sig-
nature schemes, and present our constructions in Section 3.
In Section 4 we prove the optimality of our constructions
by proving the information-theoretic lower-bounds. Finally,
in the Section 5 we discuss various aspects of the tamper-
evident signatures, including their potential applications.
2. DEFINITIONS
2.1 Functional deﬁnitions
Key Evolving Signature Schemes. As discussed above,
tamper-evident signatures must evolve the signer’s state,
similarly to the forward-secure signatures, but for a diﬀerent
reason.4 We therefore use the deﬁnition of the key-evolving
signature schemes proposed by Bellare and Miner [3]. In-
tuitively, in key-evolving schemes the public key remains
unchanged, while the corresponding secret key changes pe-
riodically. This deﬁnition is purely functional: security is
addressed separately.
Key-evolving signature scheme is a quadruple of algo-
rithms KESig = (Gen, Upd, Sign, Vf), where:
KESig.Gen, the probabilistic key generation algorithm.
Input: a security parameter k ∈ N (given in unary as
1k); and the total number of periods T ;
Output: a pair (SK 0, PK ), the initial secret key and
the public key;
4In particular, randomness of the evolution was optional
for forward-security, but is crucial
for tamper-evidence;
while one-wayness of the evolution was of central value for
forward-security, but is optional for tamper-evidence.
KESig.Upd, the probabilistic secret key update algorithm.
Input: the secret key SK t for the current period t 
te, and (cid:3)t1, σ1(cid:4) was generated by S (upon F ’s request),
while (cid:3)t2, σ2(cid:4) by F (i.e., the corresponding (cid:3)t2, M(cid:4) was not
queried from S). We write F S → (cid:3)te, {(t1, σ1), (t2, σ2)}(cid:4).
The probability that the adversary succeeds is deﬁned as
= Prob[KESig.Div((cid:3)t1, σ1(cid:4),(cid:3)t2, σ2(cid:4)) = ok
PrSuccKESig(F )
and KESig.Vf((cid:3)ti, σi(cid:4)) = valid, i = 1, 2].
def
Deﬁnition 2. [TE Safety] Let k be a security parameter5
for self-consistent KESig, and F S → (cid:3)te,{(t1, σ1), (t2, σ2)}(cid:4).
{t(cid:1)
2} are t(cid:1)
1, t(cid:1)
e-safe (for KESig) if PrSuccKESig(F )  t(cid:1)
e.
evident if t(cid:1)
1 and t(cid:1)
2 are t(cid:1)
e-safe for all t(cid:1)
Next, we consider two weaker versions of tamper-evidence.
For both of them, adversary remains as powerful as before.
But unlike the strongly tamper-evident schemes, both of
these weaker versions are allowed to miss some cases of tam-
pering. The ﬁrst — weaker — guarantees to detect tamper-
ing only for simultaneous signatures:
Deﬁnition 4. [Perfectly-Synchronous TE] KESig is
e-safe
perfectly-synchronous tamper-evident if {t(cid:1)
for any t(cid:1)
e, such that t(cid:1)
2} are t(cid:1)
2 > t(cid:1)
e.
1 = t(cid:1)
1, t(cid:1)
2, t(cid:1)
1, t(cid:1)
This notion of synchronicity can be relaxed signiﬁcantly:
namely, we can tolerate any distance between the time peri-
ods t1, t2 of the signatures, as long as this distance is within
some factor (1/α) of their distance to the exposure time te:
Deﬁnition 5. [α-Synchronous TE] For α > 0, KESig is
α-synchronous tamper-evident if {t(cid:1)
2} are t(cid:1)
e-safe for any
1 − t(cid:1)
2|.
2, t(cid:1)
t(cid:1)
1, t(cid:1)
1, t(cid:1)
2) − te > α|t(cid:1)
e such that min(t(cid:1)
1, t(cid:1)
Note: strong tamper-evidence of deﬁnition 3 is equivalent to
the 0-synchronous one, while perfectly synchronous tamper-
evidence of deﬁnition 4 corresponds to ∞-synchronous
tamper-evidence. We abbreviate α-synchronous tamper-
evident as α-te (e.g., KESig in deﬁnitions 5, 4, and 3 are
α-te, ∞-te, and 0-te, respectively).
Possible relaxations. One might wish to further relax
the above deﬁnitions, e.g., to achieve more eﬃcient construc-
tions. Such relaxations may include limiting adversary pow-
ers and/or allowing not self-consistent schemes (i.e., “self-
consistent” only with high probability), and/or allowing the
probability of missing divergence to be much greater (e.g.,
less than some constant, say 1%), etc. In this paper we do
not consider any such relaxations.
3. CONSTRUCTIONS
This section presents constructions for the strongly and
synchronous tamper-evident schemes. These constructions
are generic in the sense that they can be based on arbitrary
ordinary signature schemes.
3.1 Strongly Tamper-Evident Scheme
3.1.1 Construction
Intuitively, this construction extends an ordinary signa-
ture by simply appending to it a sequence of (cid:3)signature,
public key(cid:4) pairs, where each signature is to be veriﬁed us-
ing the corresponding public key of the pair. The public
5We use the precise formulation of security (requiring