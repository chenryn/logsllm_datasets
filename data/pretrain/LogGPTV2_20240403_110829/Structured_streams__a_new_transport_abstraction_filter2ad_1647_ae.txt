in size. Table 1 compares SST’s header overhead in bytes
against the minimal overhead imposed by several other trans-
ports. The numbers for SST include the 32-bit lightweight
checksum that SST uses in its non-cryptographic security
Stream Delivery
Datagram Delivery
SST TCP SCTP SST UDP DCCP
20
Data Packet
Ack Packet
20
Sack Packet
20
20
Data + Ack
Data + Sack 20
20
20
32+ 28+
20
32+ 44+
12
16
20+
16
20+
8
16
16 —
16 —
16 —
16 —
28
28
44
Table 1: Transport Layer Header Overhead
SST TCP SCTP DCCP RDP UDP
4400
Prototype
Linux 2.6.20
FreeBSD 5.4
4.3BSD
540
5400
4400
990
8000
2900
630
510
170
900
Table 2: Transport Code Size (Semicolon Count)
mode, but do not include a UDP encapsulation header since
SST could be run directly atop IP like the other transports.
The DCCP numbers are for DCCP’s short header format,
which uses 24-bit sequence numbers instead of 48-bit at the
cost of weakening the protocol against packet forgery at-
tacks. SST also transmits 24-bit sequence numbers in pack-
ets, but does not rely on them to protect against forgery,
instead relying on 32-bit keyed checksums that depend on
full 64-bit internal sequence numbers. SST eﬀectively pro-
vides most of the functionality of SCTP and DCCP, along
with structured stream support not available in any existing
transport, with no more wire overhead than basic TCP.
5.8 Implementation Size
For a rough comparison of implementation complexity,
Table 2 shows the code size of several transports measured
in number of semicolons. The top line shows the user-space
C++ implementations of SST and TCP used in the above
experiments; the other lines show existing transports written
in C. The user-space TCP is “bare-bones” and implements
only the TCP features needed for the above experiments.
The SST prototype will no doubt grow as it matures, but
it already includes cryptographic security functionality that
none of the other transports do. In comparison, libssl from
OpenSSL 0.9.8e is about 13,000 semicolons (41,000 lines).
6. RELATED WORK
Structured streams represent an attempt to design the
principle of application level framing [14] into the transport
layer, in order to provide transport objects that directly
mirror the structure of the “application data units” with
which the application is concerned.
The popularity of SSL [17] and SSH tunneling [55] attest
to the demand for multiplexing logical streams onto a se-
cure channel. MUX [23] and BEEP [44] similarly multiplex
logical streams onto one TCP stream, layering their own
ﬂow control atop TCP’s. These protocols exacerbate TCP’s
drawbacks, however, by totally ordering many unrelated ac-
tivities so that one lost packet blocks everything behind it.
SST builds on many ideas borrowed from other trans-
ports. RDP [39, 40] provides reliable datagram delivery,
in-sequence or as-available according to the application’s
choice at connection setup. SCTP [49] multiplexes multi-
ple “streams of datagrams” onto one session, provides both
reliable and best-eﬀort delivery, and supports “multihomed”
endpoints for rapid failover. Its streams do not have individ-
ual ﬂow control, however, and cannot be dynamically cre-
ated or destroyed, but must be negotiated en masse at ses-
sion startup. DCCP [32] is a best-eﬀort datagram service
with congestion control, comparable to SST’s channel layer,
but without SST’s packet security features. RDP, SCTP,
and DCCP all suﬀer from the “large datagram” problem:
datagrams with too many fragments are almost certain to
be lost or require many retransmissions.
SST does not provide multihoming as SCTP does, but its
ability to attach streams to more than one channel at once
could be extended to support multihoming, or even to load-
balance a stream across multiple channels following diﬀerent
network paths. Since SST’s stream protocol relies on the
channel protocol for loss detection and congestion control,
these mechanisms automatically operate at channel—i.e.,
path—granularity. Performing “end-to-end” load balanc-
ing this way could thus avoid both the harmful performance
side-eﬀects caused by load balancing in lower layers [6], and
the complexity of managing multi-path congestion and re-
transmission control in a stream transport [28].
The need for eﬃcient transport support for transaction-
oriented application protocols has long been recognized [9,
11]. VMTP [13] supports lightweight RPC-style communi-
cation in a clustered environment, but provides no conges-
tion control and limits messages to 16KB. T/TCP [12] en-
hances TCP to re-open recently-closed streams quickly, but
this serial reuse has the same disadvantages as HTTP/1.1
persistent connections without the beneﬁts of pipelining [38].
TCP has also been extended to share congestion control
state across streams [3,54]. The Congestion Manager [4] en-
ables congestion control sharing across multiple transports;
SST should ﬁt well into such an architecture if available.
Another TCP extension provides end-to-end support for
host mobility [47]. SST’s separation into channel and stream
layers, and its ability to migrate streams across channels,
provides a cleaner solution reminiscent of a session layer [48].
The rich literature on prioritization in the network layer to
ensure quality of service [56] is relevant to SST’s use of prior-
itization in the transport layer to schedule an application’s
streams relative to each other. Hierarchical schemes [7] may
be particularly well-matched to the structured stream ab-
straction. SST’s channel layer could be enhanced with tech-
niques developed in OverQoS [50] to provide better QoS for
aggregates of logical streams on ordinary Internet paths.
7. CONCLUSION
Although SST is in its infancy and will require reﬁnement,
more optimized implementation, and further analysis, struc-
tured streams appear to be a promising enhancement to the
classic reliable stream abstraction. SST’s multiplexing of in-
dependent lightweight streams onto persistent channels gives
applications the ﬂexibility to match their use of streams to
their natural structure and transaction granularity, avoiding
the start-up delays and serialization imposed by TCP and
the datagram size limitations of UDP.
Acknowledgments
I wish to give special thanks to Frans Kaashoek, Robert
Morris, Craig Partridge, and the anonymous SIGCOMM
reviewers, for careful reading of early drafts and many help-
ful comments that proved instrumental in improving this
paper and the SST protocol itself. This research is spon-
sored by the T-Party Project, a joint research program be-
tween MIT and Quanta Computer Inc., Taiwan, and by the
National Science Foundation under Cooperative Agreement
ANI-0225660 (Project IRIS).
8. REFERENCES
[1] William Aiello et al. Just Fast Keying: Key Agreement In
A Hostile Internet. TISSEC, 7(2):1–32, May 2004.
[26] M. Holdrege and P. Srisuresh. Protocol complications with
the IP network address translator, January 2001. RFC
3027.
[27] The Internet traﬃc archive. http://ita.ee.lbl.gov/.
[28] Janardhan R. Iyengar, Paul D. Amer, and Randall Stewart.
Concurrent multipath transfer using SCTP multihoming
over independent end-to-end paths. Transactions on
Networking, 14(5):951–964, October 2006.
[29] V. Jacobson, R. Braden, and D. Borman. TCP extensions
[2] M. Allman, V. Paxson, and W. Stevens. TCP congestion
for high performance, May 1992. RFC 1323.
control, April 1999. RFC 2581.
[3] Hari Balakrishnan et al. TCP behavior of a busy Internet
server: Analysis and improvements. In IEEE INFOCOM,
March 1998.
[4] Hari Balakrishnan, Hariharan S. Rahul, and Srinivasan
Seshan. An integrated congestion management architecture
for Internet hosts. In ACM SIGCOMM, September 1999.
[5] S. Bellovin. Defending against sequence number attacks,
May 1996. RFC 1948.
[6] Jon C. R. Bennett, Craig Partridge, and Nicholas
Shectman. Packet reordering is not pathological network
behavior. Transactions on Networking, 7:789–798,
December 1999.
[7] Jon C. R. Bennett and Hui Zhang. Hierarchical packet fair
queueing algorithms. In ACM SIGCOMM, pages 143–156,
1996.
[8] T. Berners-Lee, R. Fielding, and H. Frystyk. Hypertext
transfer protocol — HTTP/1.0, May 1996. RFC 1945.
[9] Andrew D. Birrell and Bruce Jay Nelson. Implementing
remote procedure calls. Transactions on Computer
Systems, 2(1):39–59, February 1984.
[10] E. Blanton and M. Allman. On making TCP more robust
to packet reordering. Computer Communications Review,
32(1), January 2002.
[11] R. Braden. Towards a transport service for transaction
processing applications, September 1985. RFC 955.
[12] R. Braden. T/TCP – TCP extensions for transactions, July
1994. RFC 1644.
[13] David R. Cheriton. VMTP: A transport protocol for the
next generation of communication systems. Computer
Communications Review, 16(3):406–415, August 1986.
[14] D. D. Clark and D. L. Tennenhouse. Architectural
considerations for a new generation of protocols. In ACM
SIGCOMM, pages 200–208, 1990.
[15] David D. Clark. Window and acknowledgement strategy in
TCP, July 1982. RFC 813.
[16] Yogen K. Dalal. More on selecting sequence numbers.
SIGOPS Operating Systems Review, 9(3):25–36, July 1975.
[17] T. Dierks and C. Allen. The TLS protocol version 1.0,
January 1999. RFC 2246.
[18] Theodore Faber, Joe Touch, and Wei Yue. The TIME-WAIT
state in TCP and its eﬀects on busy servers. In IEEE
INFOCOM, volume 3, pages 1573–1583, March 1999.
[19] R. Fielding et al. Hypertext transfer protocol —
HTTP/1.1, June 1999. RFC 2616.
[20] S. Floyd, J. Mahdavi, M. Mathis, and M. Podolsky. An
extension to the selective acknowledgement (SACK) option
for TCP, July 2000. RFC 2883.
[21] Bryan Ford. Scalable Internet routing on
topology-independent node identities. Technical Report
926, MIT LCS, October 2003.
[22] Bryan Ford et al. Persistent personal names for globally
connected mobile devices. In 7th OSDI, November 2006.
[23] Jim Gettys. Simple MUX protocol speciﬁcation, October
1996. W3C Working Draft.
[24] V. Gurbani and S. Lawrence. Handling large user datagram
protocol (UDP) responses in the session initiation protocol
(SIP), October 2006. Internet-Draft (Work in Progress).
[25] M. Handley, S. Floyd, J. Padhye, and J. Widmer. TCP
friendly rate control (TFRC): Protocol speciﬁcation,
January 2003. RFC 3448.
[30] S. Kent. IP encapsulating security payload (ESP),
December 2005. RFC 4303.
[31] S. Kent and K. Seo. Security architecture for the Internet
protocol, December 2005. RFC 4301.
[32] E. Kohler, M. Handley, and S. Floyd. Datagram congestion
control protocol (DCCP), March 2006. RFC 4340.
[33] Venkat Kudallur et al. IE7 networking improvements in
content caching and decompression. IEBlog, October 2005.
[34] M. Mathis, J. Mahdav, S. Floyd, and A. Romanow. TCP
selective acknowledgment options, October 1996. RFC
2018.
[35] M. Mathis and J. Mahdavi. Forward acknowledgement:
Reﬁning TCP congestion control. In ACM SIGCOMM,
August 1996.
[36] R. Moskowitz and P. Nikander. Host identity protocol
(HIP) architecture, May 2006. RFC 4423.
[37] Mozilla.org. Firefox tips & tricks: Pipelining.
http://www.mozilla.org/support/ﬁrefox/tips#oth pipelining.
[38] H. F. Nielsen et al. Network performance eﬀects of
HTTP/1.1, CSS1, and PNG, June 1997. W3C
NOTE-pipelining-970624.
[39] C. Partridge and R. Hinden. Version 2 of the reliable data
protocol (RDP), April 1990. RFC 1151.
[40] Craig Partridge. Implementing the reliable data protocol
(RDP). In USENIX Summer Conference, June 1987.
[41] J. Postel. User datagram protocol, August 1980. RFC 768.
[42] J. Postel and J. Reynolds. File transfer protocol (FTP),
October 1985. RFC 959.
[43] E. Rescorla and N. Modadugu. Datagram transport layer
security, April 2006. RFC 4347.
[44] M. Rose. The blocks extensible exchange protocol core,
March 2001. RFC 3080.
[45] J. Rosenberg et al. SIP: session initiation protocol, June
2002. RFC 3261.
[46] H. Schulzrinne et al. RTP: A transport protocol for
real-time applications, July 2003. RFC 3550.
[47] Alex C. Snoeren and Hari Balakrishnan. An end-to-end
approach to host mobility. In 6th MOBICOM, August 2000.
[48] Alex C. Snoeren, Hari Balakrishnan, and M. Frans
Kaashoek. Reconsidering Internet mobility. In HotOS-VIII,
May 2001.
[49] R. Stewart et al. Stream control transmission protocol,
October 2000. RFC 2960.
[50] Lakshminarayanan Subramanian et al. OverQoS: An
overlay based architecture for enhancing Internet QoS. In
1st NSDI, San Francisco, CA, March 2004.
[51] Carl A. Sunshine and Yogen K. Dalal. Connection
management in transport protocols. Computer Networks,
2(6):454–473, December 1978.
[52] Transmission control protocol, September 1981. RFC 793.
[53] Raymond S. Tomlinson. Selecting sequence numbers.
SIGOPS Operating Systems Review, 9(3):11–23, July 1975.
[54] J. Touch. TCP control block interdependence, April 1997.
RFC 2140.
[55] T. Ylonen and C. Lonvick, Ed. The secure shell protocol
architecture, January 2006. RFC 4251.
[56] Hui Zhang and Srinivasan Keshav. Comparison of
rate-based service disciplines. In ACM SIGCOMM, pages
113–121, 1991.