the secret key x ∈ Z∗
p, with corresponding public keys y1 =
2 .
1 , y2 = gx
gx
will output ⊥, since the hash of a Bitcoin block that would appear
in the future cannot be predicted. On the other hand, it is straight-
forward to compute GetRandomness(t), for a value t ≤ cur (i.e.,
t is in the past) by fetching the hash of previous Bitcoin blocks.
In this way, GetRandomness enables an untrusted party to sample
randomness—without being able to predict the outcome ahead of
time.
The purpose of GetRandomness is to ensure that the selection
of ﬁles to which the gateway attests the deduplication pattern is
randomly chosen and not precomputed.
While using a time-dependent source of randomness is a viable
option, other alternatives may be imaginable. For example, one
may couple the selection of ﬁles with Fiat-Shamir heuristics [26]
to ensure that the selection is randomly chosen from the point of
view of the gateway and couple it with proofs of work. If the time
effort to generate a valid proof of work is about the duration of an
epoch, a malicious gateway may not be able to precompute the se-
lections. We leave the question of investigating viable alternatives
to external sources of randomness as an interesting direction for
future research.
3.2.3
ClearBox employs an oblivious protocol adapted from [14] which
is executed between clients and the gateway to generate the keys re-
quired to encrypt the stored ﬁles. Unlike [14], our protocol does not
rely on RSA, and is based on blind BLS signatures [17, 18]. Al-
though the veriﬁcation of BLS signatures is more expensive than
its RSA counterpart, BLS signatures are considerably shorter than
RSA signatures, and are faster to compute by the gateway.
Server-Aided Key Generation
2 ∈ Γ2. Let H
As shown in Figure 2, we assume that at setup, the gateway
chooses two groups Γ1 and Γ2 with order p, and a computable bi-
linear map e : Γ1 × Γ2 → ΓT . Additionally, the gateway chooses
a private key x ∈ Zp, and the corresponding public keys y1 =
∗ : {0, 1}∗ → Γ1 be a crypto-
1 ∈ Γ1 and y2 = gx
gx
graphic hash function which maps bitstrings of arbitrary length to
group elements in Γ1. Prior to storing a ﬁle f, the client computes
h ← H
1, given a randomly
chosen r ∈ Zp, and sends the blinded hash ˆh to the gateway. The
latter derives the signature on the received message and sends the
result back to the client, who computes the unblinded signature s
and veriﬁes that: e (s, g2) = e(cid:0)hxgrx
∗(f ), blinds it by multiplying it with gr
(cid:1) = e (h, y2) .
The encryption key is then computed as the hash of the unblinded
signature: k ← H(s). The beneﬁts of such a key generation module
are twofold:
• Since the protocol is oblivious, it ensures that the gateway
does not learn any information about the ﬁles (e.g., about the
−rx
1
1 g
, g2
ﬁle hash) during the process. On the other hand, this proto-
col enables the client to check the correctness of the compu-
tation performed by the gateway (i.e., verify the gateway’s
signature). As we show later, this veriﬁcation is needed to
prevent a rational G from registering users of the same ﬁle to
different ﬁle versions with reduced level of deduplication.
• By involving the gateway in the key generation module, brute-
force attacks on predictable messages can be slowed down
by rate-limiting key-generation requests to G. Notice that,
similar to [14], this scheme does not prevent a curious G
from performing brute-force searches on predictable mes-
sages, acquiring the hash, and the corresponding key k. In
this sense, the security offered by our scheme reduces to that
of existing MLE schemes (cf. Section 3.4).
3.2.4 Proof of Ownership
The aforementioned server-aided key generation ensures that an
adversary which is not equipped with the correct ﬁle hash cannot
acquire the ﬁle encryption key k. However, a user who has wrong-
fully obtained the ﬁle hash would be able to claim ﬁle ownership.
In this case, Proofs of Ownership (PoW) can be used by the gate-
way to ensure that the client is in possession of the ﬁle in its entirety
(and not only of its hash) [16, 23, 27].
In this paper, we rely on the PoW due to Halevi et al. [27] which,
as far as we are aware, results in the lowest computational and stor-
age overhead on the gateway [16]. This PoW computes a Merkle
tree over the ﬁle f, such that the root of the Merkle tree constitutes
a commitment to the ﬁle. In the sequel, we denote by M TBuf(f ) the
root of the Merkle tree as output by the PoW of [27] given an input
Buf(f ), being an encoding of a ﬁle f. The veriﬁer can challenge
the prover for any block of the ﬁle, and the prover is able to prove
knowledge of the challenged block by submitting the authentica-
tion path of this block. In order to reduce the number of challenges
for verifying the PoW, the ﬁle is encoded into Buf(f ) before com-
puting the Merkle tree. An additional trade-off can be applied by
limiting Buf(f ) to a maximum size of 64 MB in the case of larger
ﬁles.
The security of this scheme is based on the minimum distance of
random linear codes. We refer the readers to Appendix B for more
details on the PoW of [27].
3.3 ClearBox: Protocol Speciﬁcation
We now detail the speciﬁcations for the procedures of ClearBox.
As mentioned earlier, we assume in the sequel that G owns an ac-
count hosted by S, and that the communication between C, S, and
G occurs over authenticated and encrypted channels.
Speciﬁcation of the Put Procedure.
In ClearBox, when a client C wishes to upload a new ﬁle f
onto S, C issues an upload request to G. Subsequently, C and G
start executing the server-aided key generation protocol described
in Section 3.2.3. The outcome of that protocol is the key k ← H(s),
where s ← H
∗(f )x given a cryptographic hash function H
∗.
C then encrypts f using encryption algorithm enc under key k,
computes and sends to G the root of the Merkle tree output by the
PoW of [27], that is FID ← M TBuf(enc(k,f )) where Buf is an
encoding function (cf. Section 3.2.4).
Subsequently, G checks if any other client has previously stored
a ﬁle indexed by FID. Here, two cases emerge:
f has not been stored before:
In this case, G issues a timed gen-
erateURL command allowing the client to upload the data
onto G’s account within a time interval. Recall that a timed
/
/
o
o
generateURL command results in a URL which expires af-
ter the speciﬁed period of time6. After the upload of the
encrypted ﬁle f∗ ← enc(k, f ) terminates, G accesses S,
computes M TBuf(f∗) using the PoW of [27], and veriﬁes
that it matches FID. If the veriﬁcation matches, G stores
the metadata associated with f∗ in a newly generated struc-
ture indexed by FID (such as the client ID C and the size of
f∗, see Section 4 for more details). Otherwise, if M TBuf(f∗)
does not match FID, G deletes the ﬁle and appends C to a
blacklist.
f has been stored before:
In this case, G requests that C proves
that it owns the ﬁle f. For that purpose, G and C execute
the PoW protocol of [27] (we refer the reader to Appendix B
for more details). In essence, G chooses a random number
u of leaf indexes of the Merkle tree computed over Buf(f∗),
and asks C for for the sibling-paths of all the u leaves. In
response, C returns the sibling paths corresponding to the
chosen u leafs associated with the Merkle tree of Buf(f∗).
G accepts if all the sibling paths are valid with respect to
the stored FID. If this veriﬁcation passes, G appends C to
the ﬁle structure FID, and sends an ACK to C. In turn, C
deletes the local copy of the ﬁle, and only needs to store FID
and the key k.
Speciﬁcation of the Get Procedure.
To download a ﬁle with index FID, C submits FID to G; the
latter checks that C is a member of the user list added to the meta-
data structure of FID. If so, G generates a timed URL allowing C
to download the requested ﬁle from S.7
Notice that if C did not locally cache the decryption key associ-
∗(f ) in or-
ated with FID, then C can leverage its knowledge of H
der to acquire the corresponding key by executing the server-aided
generation protocol with G.
Speciﬁcation of the Delete Procedure.
When C wants to delete ﬁle FID, it informs G. G marks C for
removal from the metadata structure associated with FID in the
subsequent epoch (see Section 3.3 for more details). If no further
clients are registered for this ﬁle, G sends a request to S to delete
it.
Speciﬁcation of the Attest Procedure.
At the end of each epoch, G attests the deduplication patterns
of its clients’ ﬁles, e.g., in their bills. Notice that if a client re-
quested the deletion of a ﬁle f during the epoch, G only removes
the marked clients from the clients list subscribed to FID after the
end of the epoch.
At the end of epoch Ej, the bill of every client C of G includes
for each stored ﬁle f the number of accesses by C and the cardinal-
ity of CFID, which denotes the set of clients registered to f. Here,
we assume a static setting where clients are charged for ﬁles that
they are storing within each epoch; this conforms with the func-
tionality of existing providers, such as Amazon S3, which rely on
ﬁxed epochs for measuring storage consumption (e.g., the epoch
interval is 12 hours in Amazon S3). Since our Attest procedure
is efﬁcient (cf. Section 4), our solution can be made practically
6In our implementation, we set the expiry timeout of the URL to 30
seconds; this means that clients have 30 seconds to start the upload
process.
7Here, G additionally notes the number of download requests per-
formed by C for ﬁle FID.
a3,0
a2,0
a2,1
a1,0
a1,1
a1,2
a1,3
a0,0
a0,1
a0,2
a0,3
a0,4
a0,5
a0,6
a0,7
U0
U1
U2
U3
U4
0
0
0
Figure 3: Sketch of a proof of set membership and set cardinal-
ity given a set of 5 elements in CARDIAC.
dynamic by relying on extremely small epochs—in which case the
bill can accumulate the ﬁne-grained storage consumption over a
number of epochs.
The bill issued by the provider acts as a binding commitment by
G to the deduplication (and access) patterns of its clients’ ﬁles. Af-
ter the bills are issued, G needs to convince his clients that they are
correctly formed. Notice that G keeps a record of the authenticated
download requests by clients, which can be used to prove the num-
ber of their accesses per ﬁle. Moreover, G needs to prove to all
clients of a ﬁle f that:
• Each of these clients is included in the set of clients CFID
• The size of CFID is as claimed in the bill.
• Clients storing f are referenced to the same set CFID.
As described in Section 3.4, this last condition prevents G from
including users of same ﬁle into different accumulators, resulting
in the under-reporting of the ﬁle deduplication patterns.
storing FID.
The ﬁrst two proofs can be realized by G using CARDIAC.
More speciﬁcally, G accumulates the IDs of the clients storing
FID; here, for each user Ci ∈ CFID, a leaf node with value Ui ←
H(FID||Ci||Ej||seedi,j) is created, where seedi,j denotes a nonce
which is sampled for this client and this epoch and which is com-
municated within the bill. As we show in Section 3.4, this protects
user privacy and ensures that the ID of any user is not given in
the clear to other users when G issues proofs of size and/or mem-
bership. The accumulation of all Ui ∈ CFID results into a digest
denoted by δ. As described earlier, CARDIAC enables G to prove
to each client in the set that (i) the client is part of the accumu-
lated set CFID and (ii) an upper bound of the size |CFID| of the
accumulated set. Observe that an upper bound on the cardinality
is sufﬁcient to protect against a rational gateway. This is the case
since the gateway does not beneﬁt from reporting a larger |CFID|,
since this might entail price reductions to the clients storing f.
Figure 3 shows an example for a set comprising 5 clients U0, . . . ,
U4. The elements circled in dotted red depict the membership proof
for U2, while the elements circled in solid blue depict the proof of
set cardinality which consists of the sibling path of the last non-
zero element. The grey elements consist of the open nodes, i.e., the
zero leaves which are not associated to any client and hence ﬁlled
with symbol 0, and all nodes that can be derived from these. Note