完全+差异
完全+差异
## 2.1完全备份/恢复 mysqldump
> MySQL数据库自带的一个很好用的备份命令。是逻辑备份，导出
> 的是SQL语句。也就是把数据从MySQL库中以逻辑的SQL语句的形式直接输出或生成备份的文件的过程。
### 2.1.1 mysqldump备份缺点
-   在备份与恢复时对正在备份表会加写锁,
-   完全备份后,新产生的数据无法恢复
-   效率低,备份和还原速度慢
### 2.1.2 mysqldump备份
**备份单个数据库:**
mysqldump -u用户 -p密码 数据库名 \>备份文件名
#恢复时需要先建立相同名称的空库
**备份所有的数据库:**
mysqldump -u用户 -p密码 all \>备份文件名
\[root@dbsvr1 \~\]# mysqldump -u root -p \--all-databases \>
/root/alldb.sql
**备份单张表:**
mysqldump -u用户 -p密码 数据库名 表名 \>备份文件名 #数据库名表名不带点、
**备份多个库:**
mysqldump -u用户 -p密码 数据库名1 数据库名2 表名 \>备份文件名
mysqldump -u用户 -p密码 -B 数据库名1 数据库名2 表名 \>备份文件名
说明：加了-B参数后，备份文件中多的Create database和use mytest的命令
加-B参数的好处：
加上-B参数后，导出的数据文件中已存在创建库和使用库的语句，不需要手动在原库是创建库的操作，在恢复过程中不需要手动建库，可以直接还原恢复。
### 2.1.3 mysqldump恢复
**恢复数据库:**
备份数据库时用-B 备份的多个数据库时,恢复时可以省略数据库名
mysql -u用户 -p密码 \/mysqlbak/db3_user.sql
\[root@sql51 mysqlbak\]# scp /mysqlbak/db3_user.sql 192.168.4.53:/root
root@sql53 lib\]# mysql -uroot -p654321 db3
mysql\> drop tanle user;
mysql\> show tables;
\[root@sql53 \~\]# mysql -uroot -p654321 db3 \ show tables; #事先删除了user表,现查看多了user表
备份51上的db2库和db4库, 在53上恢复
备份db2 db4
\[root@sql51 mysqlbak\]# mysqldump -uroot -p654321 -B db2 db4
\>/mysqlbak/twodb.sql
\[root@sql51 mysqlbak\]# scp /mysqlbak/twodb.sql 192.168.4.53:/root/
先在53删除db2 , db4库
mysql\> drop database db2;
Query OK, 10 rows affected (1.52 sec)
mysql\> drop database db4;
Query OK, 8 rows affected (0.00 sec)
mysql\> exit
Bye
\[root@sql53 \~\]# mysql -uroot -p654321 \ show master status; #查看是否启用
Empty set (0.00 sec) #查询出来的为空未启用
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
server_id=51 #不能与别的数据库服务器相同,习惯性做法为主机地址
log_bin #启用
\[root@sql51 \~\]# systemctl restart mysqld
\[root@sql51 \~\]# mysql -uroot -p654321
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| sql51-bin.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
\[root@sql51 \~\]# ls /var/lib/mysql
ca.pem db2 ibdata1 mysql private_key.pem sql51-bin.000001
client-cert.pem db3 ib_logfile0 mysql.sock public_key.pem
sql51-bin.index
#启用之后默认会有主机名-bin.000001(日志文件) 和
主机名-bin.index(索引)两个文件
#默认日志大于500M就会新增一个日志文件
### 2.2.3启用binlog并指定日志文件目录:
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
server_id=51
log_bin=/logdir/plj #日志文件将以plj开头
\[root@sql51 \~\]# mkdir /logdir
\[root@sql51 \~\]# chown mysql /logdir
\[root@sql51 \~\]# systemctl restart mysqld
root@sql51 \~\]# ls /logdir/ #日志文件产生在这里了
plj.000001 plj.index
\[root@sql51 \~\]# mysql -uroot -p654321
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plj.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
### 2.2.4手动创建新的binlog日志文件
#### 2.2.4.1重启mysql服务
\[root@sql51 \~\]# systemctl restart mysqld
\[root@sql51 \~\]# ls /logdir/ #新产生了plj.000002日志文件
plj.000001 plj.000002 plj.index
#### 2.2.4.2执行sql操作 mysql\>flush logs;
mysql\> flush logs;
Query OK, 0 rows affected (0.11 sec)
mysql\> exit
Bye
\[root@sql51 \~\]# ls /logdir/ #新产生了plj.000003日志文件
plj.000001 plj.000002 plj.000003 plj.index
#### 2.2.4.3执行mysql -uroot -p654321 -e \"flush logs\"
\[root@sql51 \~\]# mysql -uroot -p654321 -e \"flush logs\"
mysql: \[Warning\] Using a password on the command line interface can be
insecure.
\[root@sql51 \~\]# ls /logdir/ #新产生了plj.000004日志文件
plj.000001 plj.000002 plj.000003 plj.000004 plj.index
#### 2.4.2.4备份时\--flush-logs
\[root@sql51 \~\]# mysqldump -uroot -p654321 \--flush-logs db1 \>
/mysqlbak/db1logtest.sql
\[root@sql51 \~\]# ls /logdir/ #新产生了plj.000005日志文件
plj.000001 plj.000002 plj.000003 plj.000004 plj.000005 plj.index
### 2.2.5清理binlog日志
删除binlog日志文件,索引(主机名.index)文件也会跟着变更
删除早于指定版本的binlog日志:
purge master logs to "binlog日志文件名"
例如:删除000005之前的日志文件不包括00005
mysql\> purge master logs to \"plj.000005\";
Query OK, 0 rows affected (0.09 sec)
mysql\> system ls /logdir
plj.000005 plj.index
删除所有binlog日志,重建新日志
reset master;
mysql\> reset master;
Query OK, 0 rows affected (0.11 sec)
mysql\> system ls /logdir
plj.000001 plj.index
### 2.2.6查看分析binlog日志文件内容
#### 2.2.6.1 binlog三种日志格式
1 statement:每一条修改数据的sql命令都会记录在binlog日志中
2 row(行模式):不记录sql语句上下文相关信,
仅保存哪条记录被修改,记录具体的所有操 作,binlog增长非常快,
3 mixed(混合模式):是以上两种格式的混合使用
#### 2.2.6.2 查看/修改binlog日志格式
mysql\> show variables like \"binlog_format\"; #查看
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| binlog_format \| ROW \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
\[root@sql51 \~\]# vim /etc/my.cnf #修改
\[mysqld\]
server_id=51
log_bin=/logdir/plj
binlog_format=mixed #row statement
\[root@sql51 \~\]# systemctl restart mysqld
mysql\> show variables like \"binlog_format\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| binlog_format \| MIXED \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.01 sec)
#### 2.2.6.3 日志文件如何区分记录的多条sql命令
**1.偏移量**
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plj.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
**2.时间点**
\[root@sql51 \~\]# mysqlbinlog /logdir/plj.000002
#190218 15:45:16 server id 51 end_log_pos 154 CRC32 0x4927dc4f
#### 2.2.6.4 查看日志文件内容
mysqlbinlog 日志文件
\[root@sql51 \~\]# mysqlbinlog /logdir/plj.000002
/\*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1\*/;
/\*!50003 SET
\@OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0\*/;
DELIMITER /\*!\*/;
\# at 4
#190218 15:45:15 server id 51 end_log_pos 123 CRC32 0x4f02b0cb Start:
binlog v 4, server v 5.7.17-log created 190218 15:45:15 at startup
\# Warning: this binlog is either in use or was not closed properly.
ROLLBACK/\*!\*/;
BINLOG \'
i2JqXA8zAAAAdwAAAHsAAAABAAQANS43LjE3LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACLYmpcEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA
AcuwAk8=
\'/\*!\*/;
\# at 123
#190218 15:45:16 server id 51 end_log_pos 154 CRC32 0x4927dc4f
Previous-GTIDs
\# \[empty\]
SET @@SESSION.GTID_NEXT= \'AUTOMATIC\' /\* added by mysqlbinlog \*/
/\*!\*/;
DELIMITER ;
\# End of log file
/\*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE\*/;
/\*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0\*/;
**例将binlog日志修改格式之后插入数据,再看日志**
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plj.000001 \| 154 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> desc db1.t2 ;
+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| age \| tinyint(4) \| YES \| \| NULL \| \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> select \* from db1.t2;
Empty set (0.00 sec)
mysql\> insert into db1.t2 values(1);
Query OK, 1 row affected (0.07 sec)
mysql\> insert into db1.t2 values(2);
Query OK, 1 row affected (0.09 sec)
mysql\> insert into db1.t2 values(3);
Query OK, 1 row affected (0.03 sec)
mysql\> select \* from db1.t2;
+\-\-\-\-\--+
\| age \|
+\-\-\-\-\--+
\| 1 \|
\| 2 \|
\| 3 \|
+\-\-\-\-\--+
3 rows in set (0.00 sec)
mysql\> show master status;
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| File \| Position \| Binlog_Do_DB \| Binlog_Ignore_DB \|
Executed_Gtid_Set \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| plj.000001 \| 955 \| \| \| \|
+\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
\[root@sql51 \~\]# mysqlbinlog /logdir/plj.000001 #开始查看
#190218 15:57:15 server id 51 end_log_pos 390 CRC32 0x658ffeba Query
thread_id=3 exec_time=0 error_code=0
SET TIMESTAMP=1550476635/\*!\*/;
insert into db1.t2 values(1)
/\*!\*/;
\# at 390