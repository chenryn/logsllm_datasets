---
## Page 496
22.4结构化命令
481
if (condlclon)
acatenent1
也可以将它放在一行上，像这样：
If (condltion) otatenent2
下面这个简单的例子演示了这种格式的。
$ cat data4
5
13
34
$gawk *[1f ($1 > 20)pzint $1)* &ata4
s0
34
$
并不复杂。如果需要在if语句中执行多条语句，就必须用花括号将它们括起来。
1. xmef $
(0Z (
× = $1 * 2
print x
> )' data4
)
100
68
$
22
注意，不能弄混if语句的花括号和用来表示程序脚本开始和结束的花括号。如果弄混了，
gawk程序能够发现丢失了花括号，并产生一条错误消息。
$gawk *{
> 1f ($1 > 20)
（
x = $1 * 2
> )' data4
prLnt x
gavk: cnd. 11ne:5: 1
gavk: cnd. 11ne:6:
unexpectednewlLne
butxqs go pue xo :
gawk的if语句也支持else子句，允许在ir语句条件不成立的情况下执行一条或多条语句。
这里有个使用else子句的例子。
1. xmef $
> 1f ($1 > 20)
>(
x = $1 * 2
pr1nt ×
> ) else
>(
---
## Page 497
482
第22章gawk进阶
x = $1 / 2
print x
> }* data4
2 .5
5
6 .5
1.00
68
5
可以在单行上使用else子句，但必须在if语句部分之后使用分号。
1f (condition) atatementI; else atatenent2
以下是上一个例子的单行格式版本。
$gavk *(if ($1 > 201print $1 • 2; else pzint $1 / 2)  Gata4
2 .5
5
6 .5
1.00
68
这个格式更紧凑，但也更难理解。
22.4.2while语句
while语句为gawk程序提供了一个基本的循环功能。下面是while语句的格式。
vh1le (condlton)
statemente
while循环允许遍历一组数据，并检查送代的结束条件。如果在计算中必须使用每条记录中
的多个数据值，这个功能能帮得上忙。
$ cat Gata5
130 120 135
160 113 140
145 170 215
$gawk {
> total = 0
> 1 = 1
> whi1e (1 {
total += $1
L + +
>1
> avg = total / 3
> print *Average:*, avg
> }′ data5
Average: 137,667
---
## Page 498
22.4结构化命令
483
Average: 176.667
while语句会遍历记录中的数据字段，将每个值都加到tota1变量上，并将计数器变量i增值。
当计数器值等于4时，while的条件变成了FALSE，循环结束，然后执行脚本中的下一条语句。
gawk编程语言支持在while循环中使用break语句和continue语句，允许你从循环中跳出。
1. xme6 $
> total = 0
> vhi1e (1  avg = total / 2
（
> pzint *The average of the first two Gata elenenta la:*,avg
The average of the first two data elenenta is: 125
> )' data5
The average of the first tvo data elenenta ls: 157,5
The average of the first two data elenenta is: 136.5
break语句用来在i变量的值为2时从whi1e循环中跳出。
22.4.3do-while语句
22
do-while语句类似于while语句，但会在检查条件语句之前执行命令。下面是do-while语
句的格式。
do
{
gtacement.g
]vhi 1e (condlcIon)
这种格式保证了语句会在条件被求值之前至少执行一次。当需要在求值条件前执行语句时，
这个特性非常方便。
1. xxe6s
> total = 
> Go
> 1 = 1
$ =+ [eo]
>)whi1e(total print total )'data5
160
250
---
## Page 499
484
第22章gawk进阶
315
这个脚本会读取每条记录的数据字段并将它们加在一起，直到累加结果达到150。如果第一
个数据字段大于150（就像在第二条记录中看到的那样），则脚本会保证在条件被求值前至少读取
第一个数据字段的内容。
22.4.4for语句
for语句是许多编程语言执行循环的常见方法。gawk编程语言支持C风格的for循环。
fox ( variable aaaignment; condi tlon;Iteration pzocess)
将多个功能合并到一个语句有助于简化循环。
$gawk {
> total = 0
> for (1 = 1; 1 [
T$ =+ [eo
> avg = total / 3
>1
> print *Average:*,avg
> }′ data5
Average: 176,657
定义了for循环中的选代计数器，你就不用担心要像使用while语句一样自已负责给计数器
增值了。
22.5格式化打印
你可能已经注意到了print语句在gawk如何显示数据上并未提供多少控制。你能做的只是控
制输出字段分隔符（OFS）。如果要创建详尽的报表，通常需要为数据选择特定的格式和位置。
解决办法是使用格式化打印命令，叫作printf。如果你熟悉C语言编程的话，gawk中的
printf命令用法也是一样，允许指定具体如何显示数据的指令。
下面是printf命令的格式：
printf *format string*, varl, var2 . . -
formatstring是格式化输出的关键。它会用文本元素和格式化指定符来具体指定如何呈
现格式化输出。格式化指定符是一种特殊的代码，会指明显示什么类型的变量以及如何显示。gawk
程序会将每个格式化指定符作为占位符，供命令中的变量使用。第一个格式化指定符对应列出的
第一个变量，第二个对应第二个变量，依此类推。
格式化指定符采用如下格式：
---
## Page 500
22.5格式化打印
485
 [modifiez] controllettez
其中control-letter是一个单字符代码，用于指明显示什么类型的数据，而modifier则
定义了可选的格式化特性。表22-3列出了可用在格式化指定符中的控制字母。
表22-3格式化指定符的控制字母
控制字母
描
述
将一个数作为ASCI字符显示
：
显示一个整数值
显示—个整数值（跟d一样）
用科学计数法显示一个数
显示一个浮点值
用科学计数法或浮点数显示（选择较短的格式）
O
显示一个八进制价
的
显示一个文本字符串
X
显示一个十六进制值
X
显示一个十六进制值，但用大写字母A-F
因此，如果你需要显示一个字符串变量，可以用格式化指定符s。如果你需要显示一个整数
值，可以用ed或（a是十进制数的C风格显示方式）。如果你要用科学计数法显示很大的值，
就用ee格式化指定符。
)NIOG8. x4e6 $
22
> printf *The ansver is: len*, x
> × - 10 * 100
The ansver is1 1,000000e+03
除了控制字母外，还有3种修饰符可以用来进一步控制输出。
width：指定了输出字段最小宽度的数字值。如果输出短于这个值，printf会将文本右
对齐，并用空格进行填充。如果输出比指定的宽度还要长，则按照实际的长度输出。
口prec：这是一个数字值，指定了浮点数中小数点后面位数，或者文本字符串中显示的最
大字符数。
口－（减号）：指明在向格式化空间中放入数据时采用左对齐面不是右对齐。
在使用printf语句时，你可以完全控制输出样式。举个例子，在22.1.1节，我们用print命
令来显示数据行中的数据字段。
$ gawk *BEGIN(FS=*\n* RS=**){print $1, $4)* data2
Riley Mu1len (31215551234
Frank Mi11iane (317)5559876
Haley Sne11 (3135554938
---
## Page 501
486
第22章gawk进阶
可以用printf命令来帮助格式化输出，使得输出信息看起来更关观。首先，让我们将print
命令转换成printf命令，看看会怎样。
$ gavk *BEGIN(rs=*\n*; RS=**) (printf $s sn*, $1, $4)* data2
Riley Mu11en(312)5551234
Frank Mi1liams (31715559876
Haley Sne11(313) 5554938
$
它会产生跟print命令相同的输出。printf命令用es格式化指定符来作为这两个字符串值
的占位符。
注意，你需要在printE命令的末尾手动添加换行符来生成新行。没添加的话，printf命令
会继续在同一行打印后续输出。
如果需要用几个单独的printf命令在同一行上打印多个输出，这就会非常有用。
[eep .(u)- JauTxd)aa (Ts *。 =g 。 gauTad) (.*=Sa}o2a. xA $
datal1 data21 data31
每个printE的输出都会出现在同一行上。为了终止该行，END部分打印了一个换行符。
下一步，用修饰符来格式化第一个字符申值。
$ gawk *BEGIN(Fs=*\n*; RS=**) (printf *16s $s^n*, $1, $4)* data2
Riley Mu11en(31215551234
Frank williams
Haley Sne11(31315554938
(3171555-9876
printf命令使用右对齐来将数据放到格式化空间中。要改成左对齐，只需给修饰符加一个减号
即可。
$ gawk *BEGIN(rs=*\n*; RS=**) (printf $-16s s^n*, $1, $4)* data2
Riley Mullen
Frank Ni1lians
(312) 5551234
(317) 555-9876
Haley Snel1
(313) 555 4938
现在看起来专业多了！
printf命令在处理浮点值时也非常方便。通过为变量指定一个格式，你可以让输出看起来
更统一。
$ gawk ′{
> total = 0
> for (i = 1; i {
total += $i
> avg = total / 3
{ printf *Average1 5.1f^n*,avg
Sexep .{<
---
## Page 502
22.6内建函数
487
Average: 128.3
可以使用e5.1f格式指定符来强制printf命令将浮点值近似到小数点后一位。
22.6内建函数
gawk编程语言提供了不少内置函数，可进行一些常见的数学、字符串以及时间函数运算。你
可以在gawk程序中利用这些函数来减少脚本中的编码工作。本节将会带你逐步熟悉gawk中的各
种内建函数。
22.6.1数学函数
如果你有过其他语言的编程经验，可能就会很熟悉在代码中使用内建函数来进行一些常见的
数学运算。gawk编程语言不会让那些寻求高级数学功能的程序员失望。
表22-4列出了gawk中内建的数学函数。
表22-4gawk数学函数