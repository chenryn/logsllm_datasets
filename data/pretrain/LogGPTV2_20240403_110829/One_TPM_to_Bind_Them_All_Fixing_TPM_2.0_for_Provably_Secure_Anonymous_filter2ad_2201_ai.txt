### Enhanced Privacy and Security Features in Fpdaa+

Fpdaa+ can be viewed as an extension of Fpdaa, incorporating attributes and signature-based revocation. This enhancement aligns with the practical functionalities of Trusted Platform Modules (TPMs), ensuring that the TPM remains agnostic to attributes, predicates, or the Signature Revocation List (SRL). During the signing process, the TPM does not explicitly see or approve these elements, reflecting the actual TPM interfaces which do not provide such outputs or approvals. This approach simplifies the TPM interface without compromising security.

#### Realistic TPM Interfaces

Previous UC-based definitions [9], [10], [24] required the TPM to approve both the message and the basename for which a host requests a signature. In Fpdaa+, the TPM is only responsible for approving the message, not the basename. This adjustment better aligns with the actual TPM interfaces, which only check the message.

#### Unforgeability and Non-Frameability

The unforgeability and non-frameability guarantees in Fpdaa+ are as follows:
- **Unforgeability**: No adversary can sign a message \( m \) with respect to a basename \( bsn \), attribute predicate \( p \), and SRL if the host did not sign exactly that.
- **Weaker Unforgeability with Corrupt Host**: If the TPM is honest but the host is corrupt, the unforgeability is slightly weaker because the TPM only checks the message. Therefore, if the TPM signed message \( m \), the adversary can create signatures on \( m \) with any \( p \) and SRL that hold for the platform.

#### Strong Privacy vs. Optimal Privacy

Traditional DAA schemes and definitions condition their privacy on the honesty of the entire platform. However, this assumption is overly strong and contradicts the goal of DAA, which is to provide anonymous attestations without trusting the hardware. Camenisch et al. [24] proposed DAA with optimal privacy, which must hold even if the TPM is corrupt. In contrast, Fpdaa+ introduces a notion of strong privacy, allowing the TPM to see the anonymous signature and influence its distribution by blocking certain values. This approach provides strong privacy guarantees while maintaining the efficiency of existing DAA schemes.

### Ideal DAA Functionality with Strong Privacy (Fpdaa+)

#### 1. Issuer Setup
- **Input**: \((\text{SETUP}, \text{sid})\) from issuer \( I \).
- **Verification**: Ensure \( \text{sid} = (I, \text{sid}') \).
- **Output**: \((\text{SETUP}, \text{sid})\) to \( A \) and wait for \((\text{ALG}, \text{sid}, \text{sig}, \text{ver}, \text{link}, \text{identify}, \text{ukgen})\) from \( A \).
- **Check**: Verify that \(\text{ver}\), \(\text{link}\), and \(\text{identify}\) are deterministic.
- **Store**: \((\text{sid}, \text{sig}, \text{ver}, \text{link}, \text{identify}, \text{ukgen})\).
- **Output**: \((\text{SETUPDONE}, \text{sid})\) to \( I \).

#### 2. Join Request
- **Input**: \((\text{JOIN}, \text{sid}, \text{jsid}, M_i)\) from host \( H_j \).
- **Output**: \((\text{JOINSTART}, \text{sid}, \text{jsid}, M_i, H_j)\) to \( A \) and wait for \((\text{JOINSTART}, \text{sid}, \text{jsid})\) from \( A \).
- **Create Record**: \((\text{jsid}, M_i, H_j, \perp, \text{status})\) with \(\text{status} \leftarrow \text{delivered}\).
- **Abort**: If \( I \) is honest and a record \((M_i, *, *) \in \text{Members}\) already exists.
- **Output**: \((\text{JOINPROCEED}, \text{sid}, \text{jsid}, M_i)\) to \( I \).

#### 3. Issuer Join Proceed
- **Input**: \((\text{JOINPROCEED}, \text{sid}, \text{jsid}, \text{attrs})\) from \( I \), with \(\text{attrs} \in A_1 \times \ldots \times A_L\).
- **Output**: \((\text{JOINCOMPLETE}, \text{sid}, \text{jsid})\) to \( A \) and wait for \((\text{JOINCOMPLETE}, \text{sid}, \text{jsid}, \tau)\) from \( A \).
- **Update Record**: \((\text{jsid}, M_i, H_j, \text{status})\) with \(\text{status} \leftarrow \text{complete}\).
- **Set Tracing Trapdoor**: If \( H_j \) is honest, set \(\tau \leftarrow \perp\). Otherwise, verify \(\text{CheckTtdCorrupt}(\tau) = 1\).
- **Insert Record**: \((M_i, H_j, \tau, \text{attrs})\) into \(\text{Members}\) and output \((\text{JOINED}, \text{sid}, \text{jsid}, \text{attrs})\) to \( H_j \).

#### 4. Sign Request
- **Input**: \((\text{SIGN}, \text{sid}, \text{ssid}, M_i, m, \text{bsn}, p, \text{SRL})\) from \( H_j \) with \( p \in P \).
- **Abort**: If \( H_j \) is honest and no entry \((M_i, H_j, *, \text{attrs})\) with \( p(\text{attrs}) = 1 \) exists in \(\text{Members}\).
- **Generate Signature**:
  - Retrieve \((\text{gsk}, \tau)\) from \(\text{DomainKeys}\). If no such entry exists, set \((\text{gsk}, \tau) \leftarrow \text{ukgen}()\), check \(\text{CheckTtdHonest}(\tau) = 1\), and store \((M_i, H_j, \text{bsn}, \text{gsk}, \tau)\) in \(\text{DomainKeys}\).
  - Compute \(\sigma \leftarrow \text{sig}(\text{gsk}, m, \text{bsn}, p, \text{SRL})\), check \(\text{identify}(\sigma, m, \text{bsn}, \tau) = 1\), and ensure \(\text{ver}(\sigma, m, \text{bsn}, p, \text{SRL}) = 1\).
  - Check that there is no \((M', H') \neq (M_i, H_j)\) with \(\text{identify}(\sigma, m, \text{bsn}, \tau') = 1\).
- **Create Record**: \((\text{ssid}, M_i, H_j, m, \text{bsn}, p, \text{SRL}, \sigma, \text{status})\) with \(\text{status} \leftarrow \text{request}\).
- **Output**: \((\text{SIGNPROCEED}, \text{sid}, \text{ssid}, m)\) to \( M_i \) when it is honest, and \((\text{SIGNPROCEED}, \text{sid}, \text{ssid}, m, \text{bsn}, \text{SRL}, \sigma)\) when corrupt.

#### 5. Sign Proceed
- **Input**: \((\text{SIGNPROCEED}, \text{sid}, \text{ssid})\) from \( M_i \).
- **Update Record**: \((\text{ssid}, M_i, H_j, m, \text{bsn}, p, \text{SRL}, \sigma, \text{status})\) with \(\text{status} \leftarrow \text{complete}\).
- **Check**: If \( I \) is honest, ensure \((M_i, H_j, *, \text{attrs})\) with \( p(\text{attrs}) = 1 \) exists in \(\text{Members}\).
- **Store**: \((\sigma, m, \text{bsn}, M_i, H_j, p, \text{SRL})\) in \(\text{Signed}\) and output \((\text{SIGNATURE}, \text{sid}, \text{ssid}, \sigma)\) to \( H_j \).

#### 6. Verify
- **Input**: \((\text{VERIFY}, \text{sid}, m, \text{bsn}, \sigma, p, \text{RL}, \text{SRL})\) from some party \( V \).
- **Retrieve Tuples**: All \((\tau_i, M_i, H_j)\) from \(\text{Members}\) and \(\text{DomainKeys}\) where \(\text{identify}(\sigma, m, \text{bsn}, \tau_i) = 1\).
- **Set Flag**: \( f \leftarrow 0 \) if any of the following conditions hold:
  - More than one \(\tau_i\) was found.
  - \( I \) is honest and no pair \((\tau_i, M_i, H_j)\) was found for which an entry \((M_i, H_j, *, \text{attrs}) \in \text{Members}\) exists with \( p(\text{attrs}) = 1 \).
  - \( M_i \) is honest but no entry \((*, m, \text{bsn}, M_i, H_j, *, *) \in \text{Signed}\) exists.
  - \( H_j \) is honest but no entry \((*, m, \text{bsn}, M_i, H_j, p, \text{SRL}) \in \text{Signed}\) exists.
  - For \(\tau' \in \text{RL}\) where \(\text{identify}(\sigma, m, \text{bsn}, \tau') = 1\) and no pair \((\tau_i, M_i, H_j)\) for an honest \( H_j \) was found.
- **Verify**: If \( f \neq 0\), set \( f \leftarrow \text{ver}(\sigma, m, \text{bsn}, p, \text{SRL}) \).
- **Output**: \((\sigma, m, \text{bsn}, \text{RL}, f)\) to \( V \) and add \((\text{VERIFIED}, \text{sid}, f)\) to \( V \).

#### 7. Link
- **Input**: \((\text{LINK}, \text{sid}, \sigma, m, p, \text{SRL}, \sigma', m', p', \text{SRL}')\) from a party \( V \).
- **Output**: \(\perp\) to \( V \) if at least one signature \((\sigma, m, \text{bsn}, p, \text{SRL})\) or \((\sigma', m', \text{bsn}', p', \text{SRL}')\) is not valid (verified via the VERIFY interface with \(\text{RL} = \emptyset\)).
- **Compute Identifiers**: For each \(\tau_i\) in \(\text{Members}\) and \(\text{DomainKeys}\), compute \( b_i \leftarrow \text{identify}(\sigma, m, \text{bsn}, \tau_i) \) and \( b'_i \leftarrow \text{identify}(\sigma', m', \text{bsn}', \tau_i) \).
- **Set Flag**: 
  - \( f \leftarrow 0 \) if \( b_i \neq b'_i \) for some \( i \).
  - \( f \leftarrow 1 \) if \( b_i = b'_i = 1 \) for some \( i \).
- **Finalize**: If \( f \) is not defined, set \( f \leftarrow \text{link}(\sigma, m, \sigma', m') \).
- **Output**: \((\text{LINK}, \text{sid}, f)\) to \( V \).

### Conclusion

Fpdaa+ offers enhanced privacy and security features by extending Fpdaa with attributes and signature-based revocation. It aligns with realistic TPM interfaces and provides strong privacy guarantees, making it a robust and efficient solution for DAA schemes.