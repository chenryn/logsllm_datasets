### 6.2 Indirect Jumps and Returns

**Figure 10: Percentage Reduction of Legitimate Targets for an Indirect Call**

- **Indirect Jumps**: Many indirect jumps reside in the PLT (Procedure Linkage Table) section, and these jumps have specific targets within the current module. BinCC takes these into account and reduces the number of legitimate targets by 35% on average compared to BinCFI, as shown in Figure 11.

**Figure 12: Percentage Reduction of Legitimate Targets for a Return**

- **Direct Returns**: BinCC significantly refines the targets for direct returns by enforcing a much stricter policy compared to BinCFI. This results in an 87% reduction in legitimate targets for returns, as shown in Figure 12. The improvement is most pronounced in gcc, which has more direct returns than indirect returns. Each direct return has far fewer legitimate targets on average compared to each indirect return, contributing to the overall improvement.

### 6.3 ROP Attacks Evaluation

**ROP Popularity and Mitigation**

- **ROP Popularity**: Due to new security mechanisms such as ASLR (Address Space Layout Randomization) and DEP (Data Execution Prevention), ROP (Return-Oriented Programming) has become a popular technique for launching exploits.
- **CFI Mitigation**: CFI (Control-Flow Integrity) implementations like CCFIR and BinCFI significantly mitigate ROP attacks by making the majority of ROP gadgets instruction-misaligned and thus infeasible for generating exploits.
- **Bypassing CFI**: Recent work [5, 10] has shown that in some cases, attackers can still leverage call-preceded ROP gadgets to build ROP chains and bypass the protection provided by BinCFI and CCFIR.

**Gadget Survivability (GS)**

- **Definition**: To evaluate BinCC's ability to prevent ROP attacks, we introduce the Gadget Survivability (GS) metric, which represents the difficulty for attackers to leverage call-preceded gadgets while establishing ROP chains under CFI protection.
- **Formula**:
  \[
  GS = \frac{1}{|R|} \sum_{i=0}^{|R|} \frac{|C_i|}{|C|}
  \]
  - \( C_i \) represents the legitimate target set for a return instruction \( r_i \) under CFI enforcement.
  - \( R \) is the set of all returns.
  - \( C \) is the set of all call-preceded gadgets.
  - For each return \( r_i \), the probability that it can be controlled and used to reach a call-preceded gadget is \( \frac{1}{|R|} \times \frac{|C_i|}{|C|} \).

- **BinCFI vs. BinCC**:
  - **BinCFI**: For each return \( r_i \), \( |C_i| \) equals \( |C| \), resulting in a GS value of 100%. This means a hijacked return can reach any call-preceded gadget within the binary.
  - **BinCC**: The probability is much smaller because both direct and indirect returns are restricted to have far fewer legitimate targets. Specifically, indirect returns are allowed to reach any indirect call sites, while direct returns are only allowed to reach gadgets starting at specific direct call sites.

**Table 2: Gadget Survivability for BinCC and BinCFI**

| Program       | BinCC   | BinCFI |
|---------------|---------|--------|
| program       | 2.554%  | 100%   |
| lbm           | 0.321%  | 100%   |
| gcc           | 0.530%  | 100%   |
| perlbench     | 0.210%  | 100%   |
| libquantum    | 1.145%  | 100%   |
| omnetpp       | 0.299%  | 100%   |
| sjeng         | 1.138%  | 100%   |
| gobmk         | 0.474%  | 100%   |
| bzip2         | 0.573%  | 100%   |
| povray        | 0.283%  | 100%   |
| milc          | 0.569%  | 100%   |
| hmmer         | 0.444%  | 100%   |
| sphinx3       | 0.420%  | 100%   |
| h264ref       | 0.387%  | 100%   |
| astar         | 0.355%  | 100%   |
| mcf           | 1.237%  | 100%   |
| namd          | 1.017%  | 100%   |
| soplex        | 0.701%  | 100%   |
| Average       | 0.701%  | 100%   |

### 6.4 Performance

**Space Overhead**

- **Infrastructure**: BinCC uses a similar infrastructure to BinCFI for manipulating binaries, leading to file size increases due to new code sections for instrumentation and read-only data sections for address translation hash tables.
- **Code Size Increase**: The new code size increases by 1.4 times the original code size, compared to 1.2 times for BinCFI.
- **Tables**: BinCC introduces four kinds of tables for storing targets of indirect calls, indirect jumps, indirect returns, and direct returns, while BinCFI uses two kinds for storing indirect calls/jmps and returns. The total table size is reduced by about 20% compared to BinCFI.
- **Overall Space Overhead**: The space overhead is around 125% of the original binary size, 14% lower than BinCFI. The reduction in table size contributes to this improvement.

**Runtime Overhead**

- **Comparison**: In our test environment, BinCFI increased runtime by approximately 18%, while BinCC increased it by around 22%, 4% higher than BinCFI.
- **Reason for Higher Overhead**: The higher overhead in BinCC is due to additional instructions for instrumenting direct returns and performing separate address checking and translating. Despite this, the overhead is considered reasonable and acceptable given the finer-grained protection provided to stripped binaries.

**Figure 13: Runtime Overhead for Tested Samples**

- **Graph**: The graph shows the runtime overhead for tested samples, with BinCC having a slightly higher overhead compared to BinCFI.

### 7. Discussion

**Improvements and Future Work**

- **Indirect Calls**: While BinCC has made significant improvements in restricting indirect control flow transfers, the policy for indirect calls still needs improvement. Indirect call targets are currently permitted to reach any ICF, making them vulnerable to attacks altering indirect call targets.
- **Combining Solutions**: Existing solutions [11, 18] make improvements in protecting specific indirect call targets, such as C++ virtual functions. BinCC can potentially combine these to achieve more stringent protection, which is left for future work.
- **Dynamic Code**: Dynamic code, such as JIT (Just-In-Time) code, cannot be identified through static analysis without source code. Handling this type of code is a common open issue with other binary-only CFI solutions and is also left for future work.

### 8. Conclusion

**Summary and Impact**

- **Existing Solutions**: Current binary-only CFI solutions apply relaxed CFI policies due to the lack of source code or debug symbols. While they can mitigate common control flow hijack threats, sophisticated attacks like ROP using call-preceded gadgets are still possible.
- **BinCC**: We propose BinCC, a new binary-only CFI protection scheme that provides finer-grained protection for x86 stripped ELF binaries. Through code duplication and static analysis, we divide the code into mutually exclusive code continents and apply strict CFI policies to constrain intra- and inter-continent transfers.
- **Evaluation**: Experiments show that BinCC significantly improves the reduction of legitimate targets and the difficulty of leveraging call-preceded gadgets, with a reasonable overhead.

### 9. Acknowledgments

- **Thanks**: We thank anonymous reviewers for their feedback. This work was completed when Minghua Wang was a visiting student at Syracuse University.
- **Funding**: This research was supported in part by the National Science Foundation, Air Force Research Lab, the Major State Basic Research Development Program of China, the National Natural Science Foundation of China, and the China Scholarship Council (CSC). Any opinions, findings, and conclusions are those of the authors and do not necessarily reflect the views of the funding agencies.

### 10. References

- [References listed as in the original text]

This version of the text is more structured, clear, and professional, with improved readability and coherence.