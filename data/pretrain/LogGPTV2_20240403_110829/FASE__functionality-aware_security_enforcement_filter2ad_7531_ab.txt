as well as the ﬁrst 6 digits of the IMSI intact. Finally, the
synthesizer intersects the language (denoted by L(·)) of the
derived regular expression r with the language of the sink’s
context-free grammar Uri, a task known to be decidable,
and returns a value that is contained in both languages.
2.4 Assumptions and Security Guarantees
We now describe our system and threat models, and then
we state the security guarantees provided by FASE.
System Assumptions. We consider benign (as opposed to
malicious) applications. These applications may have sen-
sitive data ﬂows, both legitimate (e.g. sending the IMSI to
identify the user’s device) and illegitimate (e.g. untrusted
third-party applications sending values that are used to con-
struct SQL queries and advertising libraries exﬁltrating pri-
vate data). To secure their applications, developers specify
application-speciﬁc constraints to (i) identify the legitimate
ﬂows and to (ii) restrict changes to sensitive data over these
ﬂows. The latter is necessary because, as we have illustrated
with our example, unconstrained modiﬁcations over legiti-
mate ﬂows may disrupt functionality. We remark that we
intentionally ask developers to write only functionality con-
straints (as opposed to security rules), as they generally un-
derstand the functionality of their applications better than
security.
Threat Model. We consider an adversary who can (i)
observe sensitive values output to conﬁdentiality sinks and
(ii) can inject inputs at integrity sources. Our adversary can,
for example, observe data that is sent as part of HTTP GET
and POST requests over network APIs. Furthermore, our
adversary can inject values through integrity sources such
as inter-application communication APIs and network APIs.
The latter may allow the attacker to crash the application
by injecting malformed inputs, and to even compromise the
integrity of sensitive data stored by the application. For
example, the Google+ Android application was vulnerable
to SQL injection attacks, allowing third-party applications
to modify the application’s database.
We remark that we focus on explicit data ﬂows. There-
fore, malicious applications that exﬁltrate sensitive data over
covert channels and implicit ﬂows fall outside of our scope.
Security Guarantees. The FASE system masks all ex-
plicit ﬂows unless the developer’s constraints restrict such
modiﬁcations. Therefore, the FASE system guarantees that
any sensitive data passed over illegitimate explicit ﬂows is
masked with values that satisfy the functionality constraints.
Finally, we remark that our assumptions are consistent
with similar state-of-the-art data ﬂow security systems. Both
static and dynamic data ﬂow protection solutions, such as [2,
10], are easily bypassed by malicious applications.
3. FINE-GRAINED INFORMATION-FLOW
TRACKING
In this section, we describe the FASE algorithm for ﬁne-
grained information-ﬂow tracking.
3.1 Basic Notions and Notation
We begin by introducing several supporting notations and
deﬁnitions.
In our semantics, we partition the live values
into disjoint sets Objs of objects and Prims of primitive val-
ues. Let Strs ⊆ Objs be the set of (live) string objects. We
denote by (cid:6)c1c2 ··· cn(cid:7) the sequence of characters compris-
ing a given string s, and by len(s) the length of s. Given
indexes i and j, such that 1 ≤ i ≤ j ≤ len(s), we let s[i]
denote character ci and s[i, j] the substring (cid:6)ci ··· cj(cid:7).
We also ﬁx a set Labels of source labels. Intuitively, labels
reﬂect two types of security-sensitive information: private
values (such as the IMEI, IMSI and location, as in Figure
2) and untrusted inputs (such as those emanating from the
Internet, IPC messages, etc.).
Finally, we ﬁx a set API = {m1, m2, . . . , mh} of method
signatures. Methods that output private or untrusted data
are called sources, and are deﬁned by Sources ⊆ API . A
given source returns a particular label from Labels, as de-
ﬁned by the function labelType : Sources → Labels. Methods
that perform security-sensitive operations (i.e., either a data
release or a sensitive computation) are referred to as sinks,
and are deﬁned by Sinks ⊆ API .
3.2
Instrumentation
FASE performs information-ﬂow tracking over strings and
primitive values. We do not explicitly track labels over ob-
jects. Instead, we track object labels indirectly by tracking
strings and primitive values that are (transitively) reachable
from the object’s ﬁelds. The labels assigned to an object are
then the union of the labels assigned to transitively reach-
able strings and primitives.
More precisely, FASE instruments the concrete state with
function τ : Objs ∪ Prims → P(Labels), which maps objects
(including string objects) and primitive values to labels. For
object o, τ (o) returns the set of labels assigned to the strings
and primitive values pointed-to by the object o through a
sequence of zero or more ﬁeld dereferences.
FASE implements two diﬀerent label tracking strategies:
character-level tracking for strings and value-based tracking
for primitive values. We explain these strategies below.
474Character-level Tracking for Strings. Given a source
method m, such that labelType(m) = l, let s = (cid:6)c1c2 ··· cn(cid:7) ∈
Strs be a string object pointed-to by the object returned
by m. (For sources that return a string, the returned object
is s itself.) Via platform-level instrumentation, FASE maps
each character ci ∈ {c1,··· , cn} to the label l, and therefore
we have τ (s) = {l}.
To precisely propagate the labels associated with individ-
ual characters, FASE instruments the Android implemen-
tation of all string operations. As an illustration, concate-
2 ··· c
(cid:2)(cid:7), with
nation of strings s = (cid:6)c1c2 ··· cn(cid:7), s
(cid:3)
(cid:3)
(cid:3)
) ={ l
= (cid:6)c1c2 ··· cnc
2 ··· c
(cid:2)(cid:7),
τ (s) ={ l}, τ (s
(cid:3)
(cid:3)
(cid:3)
n
1c
) = {l, l
(cid:3)}. FASE maintains a label for each char-
with τ (s
have label l, while
acter, and so the ﬁrst n characters of s
[1, n]) = {l} and
(cid:3)
(cid:3)(cid:3)
have label l
the remaining n
(cid:3)}). Other string operations, such as
]) = {l
(cid:3)
[n + 1, n + n
τ (s
substring and replace, are deﬁned analogously.
(cid:3)}, yields s
(i.e., τ (s
= (cid:6)c
(cid:3)
1c
(cid:3)(cid:3)
(cid:3)
(cid:3)
n
(cid:3)(cid:3)
(cid:3)(cid:3)
(cid:3)(cid:3)
Value-based Tracking for Primitives. Tracking primi-
tives is needed for conﬁdentiality, such as anonymizing the
device’s location, which is stored using doubles. The track-
ing engine implements a value-based strategy for primitive
values, motivated by the insight that sensitive primitive val-
ues are mostly unique [31] (e.g., the latitude and longitude
are 64-bit primitives.) Given a source m ∈ Sources, such
that labelType(m) =l , let v ∈ Prims be a primitive value
reachable from the object returned by m. Using application
instrumentation, FASE updates the map τ [v (cid:12)→ {l}], which
tracks the labels assigned to primitive values at run-time.
Our experience with real-world applications suggests that
primitive values are often leaked as part of string values
(e.g., as part of the URL query string). The engine instru-
ments operations, e.g. StringBuffer.append(double), that in-
sert primitives into strings. That is, given primitive value
v carrying label l, with string representation sv, if sv is ap-
pended to string s, then FASE assigns label l to each char-
acter of sv in the resulting string s · sv.
Our empirical experience further indicates that operations
on security-relevant primitives, such as addition and multi-
plication, are rare in practice. Hence, we intentionally avoid
instrumenting them to retain low overhead.
Example. We conclude by illustrating the behavior of the
FASE tracking engine. The example in Figure 3a motivates
the handling of primitive values, the tracking of their con-
version to strings, as well as the character-level precision
for strings. In Figure 3b, we show how FASE assigns and
propagates labels for this code.
At line 1, the returned Location object points to the prim-
itive values that represent the location’s latitude and longi-
tude. Suppose these values are 37.3876 and 122.0575. To
label these values, FASE updates the map τ as follows:
τ ← τ [37.3876 (cid:12)→ {Location}, 122.0575 (cid:12)→ {Location}]
At lines 2 and 3, the labeled primitive values are stored into
variables lat and lon. Note that FASE has already assigned
the appropriate labels to these primitive values.
At line 4, the primitive values stored at lat and lon are
appended to a string. To propagate their respective labels to
the constructed string, FASE instruments the append method
and propagates labels only to the characters corresponding
to the appended primitive values. The constructed string is
"http://adserver.com?lat=37.3876&lon=122.0575". FASE la-
bels the substrings "37.3876" and "122.0575" with Location.
1 Location l = getLastKnownLocation (GPS );
2 double lat = l. getLatitude ();
3 double lon = l. getLongitude ();
4 String q = "?lat=" + lat + "&lon=" + lon;
5 URL url = new URL("http :// adserver .com"+q);
(a) Source code of the example
l← latitude= 37.3876
Location
object
longitude= 122.0575
lat← 37.3876
lon← 122.0575
q←"?lat="+ "37.3876" + "&lon="+ "122.0575"
url← urlStr = "http:adserver.com
Propagate via StringBuilder.append(D)
?lat= 37.3876 &lon= 122.0575 "
URL
object
Value-based tracking for primitives
Char-level tracking for strings
(b) Dynamic information-ﬂow tracking
Figure 3: A common example of an information ﬂow from a
Location source to a network sink
At line 5, the URL constructor takes the constructed string
"http://adserver.com?lat=37.3876&lon=122.0575", where the
characters of the substrings "37.3876" and "122.0575" are
those marked with the label Location.
4. EXPRESSING FUNCTIONALITY CON-
STRAINTS
We now describe the speciﬁcation of generic constraints,
and we present a DSL for application constraints. We con-
sider string-related constraints as string is the predominant
data type in the context of security and privacy. Examples
includes strings received from untrusted users or third-party
applications, which may compromise the integrity of the ap-
plication’s data, as well as strings that contain conﬁdential
information that the application exports.
4.1 Generic Constraints
We refer to the sinks’ preconditions, which are deﬁned by
API designers, as generic constraints. These are deﬁned by
the function
G : Sinks × Vars → CFGs
where Vars is a set of variables and CFGs is the set of
context-free grammars over a standard alphabet. A context-
free grammar g = G(snk , x) deﬁnes that the string stored
at the variable x must be in L(g), where L(g) denotes the
language of g. Unlike the application constraints, deﬁned
shortly, the generic constraints do not depend on the values
passed to the sink and on the current application state. This
is expected as they reﬂect constraints imposed by the API,
not by the application.
As an example, consider the generic constraint:
(SQLiteDatabase.execSQL, sql) (cid:12)→ SQL ,
where SQL is the CFG that deﬁnes the set of well-formed
SQL queries; see Figure 2. This constraint speciﬁes that
the SQL query string, stored at the variable sql, must be in
475Constrs
Constr
Cond
::= Constr , . . . ,Constr
::= sink name if Cond Expr
::= bool op(arg,··· , arg)
(Cond and Cond ) | (not Cond )
|
::= constrain var(cid:6)label(cid:7) to Regex
∗ | Regex · Regex
::= SymbStr | Regex
| Regex + Regex
Expr
Regex
SymbStr ::= str | var | val | str op(arg,··· , arg)
Figure 4: BNF of the FASE DSL: name ∈ Sinks, var ∈
Vars, label ∈ Labels, str ∈ Strs, arg ∈ Vars ∪ Strs.
the language L(SQL). Note that our motivating example is
an object-oriented Android program, and req.uri represents
the variable req followed by the ﬁeld identiﬁer uri. For sim-
plicity, we do not reﬁne variables into variables followed by
(zero or more) ﬁeld identiﬁers.
We note that the generic constraints are application in-
dependent. That is, they are deﬁned once for each sink,
regardless of how diﬀerent applications use that sink.
4.2 Application-speciﬁc Constraints
We now deﬁne the FASE DSL for specifying application-
speciﬁc constraints.
Requirements. We start with the abstract requirements
that guided the design of the FASE DSL.
Sink Sensitivity: The constraints usually depend on where a
sensitive value is used. For example, the constraints stipu-
lating how sensitive values are handled when they are used
in a database API may diﬀer from the constraints for a net-
work API.
Source Sensitivity: The constraints are source sensitive: the
correct handling of sensitive values depends on where the
values come from. For example, a device identiﬁer is usually
handled diﬀerently than the device’s location.
State Sensitivity: The constraints often depend on the values
passed to the sink. The application constraints of our mo-
tivating example, for instance, depend on HTTP request’s
host name and on the concrete IMSI value concatenated to
the URL string.
Byte-level Granularity: The constraints often pertain to sub-
sets of data. For example, the second application constraint
of our motivating example states that the ﬁrst 6 digits of
the IMSI must not be modiﬁed while the last 9 digits can
be anonymized.
Next, we deﬁne our FASE DSL, which is adequate with re-
spect to these requirements.
Syntax and Semantics. The FASE language syntax is
given in Figure4. An application constraint has the form
sink name if Cond Expr , where name is the signature of
a sink method. A constraint conditionally restricts changes
to strings passed to the sink.
A condition bool op(arg,··· , arg) is evaluated with re-
spect to the current state. Here bool op is a pure method
returning a boolean value. The arguments arg can be con-
stant values, such as strings, or variables, which are resolved
at run time. An application constraint is applicable to the
current program state if its condition evaluates to true, oth-
erwise it is ignored. For example, the constraint
sink HttpClient.execute(req)
if req.uri.startsWith("http://analytics.com") Expr
is applicable only to HTTP requests to the analytics server.
Atomic conditions can be composed with the standard con-
junction (and) and negation (not) connectives. Additional
boolean connectives can be derived in the standard way.
The expression x(cid:6)l(cid:7), where x is a variable and l a label,
returns a substring s of the string stored at x such that
all characters in s are labeled with l and the characters
wrapped around s are not labeled with l. That is, the sub-
string s is a block of characters uniformly labeled with l.
For example, if the variable sql points to the SQL string
"SELECT name, ph_number FROM contacts WHERE id=10 OR 1=1",
where the substring "10 or 1=1" is marked with the label
UNTRUSTED, then sql(cid:6)UNTRUSTED(cid:7) returns "10 or 1=1". Note
that a string may contains multiple such blocks.
The expression constrain x(cid:6)l(cid:7) to r introduces a con-
straint that restricts modiﬁcations to a substring labeled
with l: All substrings x(cid:6)l(cid:7) must be replaced with strings
from the language of the regular expression r. For example,
consider the expression constrain req.uri(cid:6)IMSI(cid:7) to [0-9](cid:2)
and let req.uri point to the string "imsi=0123" where "imsi="
is not labeled and "0123" is labeled with IMSI. This expres-
sion restricts modiﬁcations to req.uri to strings from the
language L("imsi=" · [0-9](cid:2)).
The FASE DSL features symbolic regular expressions that
are resolved at run time. These are constructed out of vari-
ables, the keyword val, and pure methods str op that re-
turn strings. The keyword val in the regular expression of
a constraint constrain x(cid:6)l(cid:7) to r returns the substring x(cid:6)l(cid:7).
Referring to the labeled substring is needed for regular ex-
pressions whose deﬁnition depends on the labeled substring,
as illustrated in our example of Section 2. Using variables
and the keyword val, developers can thus write regular ex-
pressions that are semantically resolved at run time. For
example, the constraint
constrain req.uri(cid:6)IMSI(cid:7) to val.substr(0,6) · [0-9](cid:2)
formalizes that the ﬁrst 6 characters of the IMSI must be
kept intact, while the remaining characters can replaced.
We will illustrate the semantics of this constraint with an
example shortly.
To simplify the writing of constraints, we introduce several
simple syntactic shorthands: we write sink mc1e1c2e2 for
the two constraints sink mc1e1 and sink mc2e2. We also
write keep x(cid:6)l(cid:7) for constrain x(cid:6)l(cid:7) to val, which formalizes
that substrings labeled with l must be kept intact. Note
that we have used these shorthands to write the application-
speciﬁc constraints for our motivating example in Section 2.
The semantics of an application-speciﬁc constraint A, de-
noted by [[A]], is deﬁned as a function mapping an application
state σ, a sink method snk , and a sink variable x to a regular
expression r = [[A]](σ, snk , x). Note that application-speciﬁc
constraints depend on the current state σ because the con-
straint’s condition, which deﬁnes whether the constraint is
applicable or not, as well as all variables that appear in sym-
bolic regular expressions are evaluated with respect to the
current state. A string s satisﬁes the application-speciﬁc
constraint A for the given state σ, sink snk , and variable x,
if s ∈ L([[A]](σ, snk , x)), where L(·) denotes the language
of the regular expression. Note that a set of application-
476speciﬁc constraints is satisﬁed iﬀ the string s is in the inter-
section of the languages deﬁned by the constraints’ regular
expressions. Due to the technical nature of the FASE DSL’s
semantics, we relegate the formal treatment of the semantics
to Appendix B. To describe the semantics of the language,
we give a simple, but illustrative, example below.
Example. Consider the application-speciﬁc constraint:
sink HttpClient.execute(req)
if req.uri.startsWith("http://analytics.com")
constrain req.entity.content(cid:6)IMSI(cid:7)
to val.substr(0,6) · [0-9](cid:2)
This constraint restricts modiﬁcations to the entity of cer-
tain HTTP POST requests. Similarly to the constraint from
our motivating example given in Figure 2, this constraint is
applicable to states where the string stored at req.uri starts
with "http://analytics.com". The above constraint formal-
izes that any substring stored at req.entity.content and la-
beled with IMSI must be replaced with a string from the
regular language deﬁned by val.substr(0,6) · [0-9](cid:2). Note
that while in our motivating example the application-speciﬁc
constraint restricts modiﬁcations to URL strings, which in
the case of HTTP GET requests often contain sensitive data,
here the constraint restrict changes to sensitive values passed
as parameters via HTTP POST requests. To illustrate,
suppose req.entity.content points to "id=310152843957264",
where the substring "310152843957264" is labeled with IMSI.
According to the semantics, the substring "310152843957264"
is replaced by a string from the language of symbolic regular