# Firefox Pwn 0x00
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 概述
前一阵在学习浏览器PWN，花了几天把这篇[文章](https://doar-e.github.io/blog/2018/11/19/introduction-to-spidermonkey-exploitation)啃完了，其中的几个exp也都调试了下，学到很多。
原文十分详细地描述了把18年的ctf题 [Blazefox](https://ctftime.org/task/6000)
移植到Windows平台利用的过程，总共写了三个exp脚本（basic.js, kaizen.js,
ifrit.js)，从一开始硬编码的rop链到后面动态解析地址并利用JIT携带rop gadget，循序渐进。
这篇文章梳理了一下spidermonkey基础知识，并讲讲basic.js中的利用方法。
## 环境搭建
>  这里有编译好的，懒得编译的同学可以自取。
###  clone
首先要把gecko代码拉下来，由于是教程是写于18年的，可能现在代码改动比较多，拉最新分支的代码patch会打不上去，于是只好全部clone下来。
    git clone https://github.com/mozilla/gecko-dev.git
这里代码量有点大（5.6g），国内的网络状态估计不太容易拉下来，git clone
貌似也不支持断点续传，中途连接中断就很伤。我的做法是到国外vps上去clone，打包压缩之后下载到本地。
###  patch
有了代码之后接下来就是打patch，由于最新分支patch打不上去，于是我试着切到patch中标注的日期所对应的commit，最后切到be1b849fa264成功打上了patch。（过程曲折。。）
    # 打印某个日期范围内的commit信息
    git log --after="2018-04-01 00:00" --before="2018-04-10 23:59"
    git checkout -f be1b849fa264
    cd gecko-devjs
    git apply c:xxxblaze.patch
    # git apply --reject --whitespace=fix mypath.patch
    # git checkout -f master
###  build
坑爹的visual studio， 这里折腾了一天。详细记一下
安装
[MozillaBuildSetup-3.2.exe](https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-3.2.exe)
，在C:mozilla-build下面找到start-shell.bat双击打开是一个mingw32的终端，之后就在这里面操作。
到这个链接下 ，找到15.6.7版本的链接点开下载。注意！google
vs2017搜到的是最新版本的vs2017，最新版本编译是会有问题的。
下图是安装最新版本vs2017或者vs2019，后面编译时的报错：
“This version (19.16.27034) of the MSVC compiler is not supported due to
compiler bugs.”,
“You must install Visual C++ 2017 Update 6 in order to build”
根据[bugzilla里面的说法](https://bugzilla.mozilla.org/show_bug.cgi?id=1472148)，这里的Update
6指的就是15.6版本.
安装完之后，配置、编译、运行
    gecko-dev/js/src$ autoconf-2.13
    gecko-dev/js/src$ mkdir build.asserts
    gecko-dev/js/src$ cd build.asserts
    gecko-dev/js/src/build.asserts$ ../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --enable-debug # vs版本不对的话这里会报错
    gecko-dev/js/src/build.asserts$ mozmake -j2
    # 到这里编译完成，产出js.exe，此时运行js.exe，会报错缺少dll
    gecko-dev/js/src/build.asserts$ cp ./mozglue/build/mozglue.dll       ./config/external/nspr/pr/nspr4.dll  ./js/src/
    gecko-dev/js/src/build.asserts$./js/src/js.exe # done！
    js> 1+1
    2
    js>
## 数据表示
js引擎中都会有一些用来debug的函数，和 JavaScriptCore 中的describe一样， SpiderMonkey中也有类似的：
  * objectAddress 打印object地址
  * dumpObject 打印object信息
打开windbg，attach到js.exe，按g运行，设置断点的方式是找一个很少被用到的函数，比如 `Math.atan2` 。
Math.atan2的函数签名如下：
    bool js::math_atan2(JSContext* cx, unsigned argc, Value* vp)
windows x64汇编中，函数传参使用前三个寄存器依次是：RCX, RDX, R8D
    dqs @r8 l@rdx+2 # dqs每行打印8bytes长度， 第一个参数是起始地址，第二个参数Lxx是几行
在math_atan2处断下后argc+2(rdx)是参数个数，vp(r8)指向参数列表，这里个数是argc+2的原因是保留了两个参数（返回值和this指针）
所以`dqs [@r8](https://github.com/r8 "@r8") l[@rdx](https://github.com/rdx
"@rdx")+2`打印出函数的三个参数，第一个是返回值，第二个是this指针，第三个就是调用时传入的参数。
接下来通过下面的测试脚本来看看不同数据类型在内存中的表示：
    'use strict';
    const Address = Math.atan2;
    const A = 0x1337;
    Address(A);
    const B = 13.37;
    Address(B);
    const C = [1, 2, 3, 4, 5];
    Address(C);
###  整数 浮点数
上图是在`Address(A)`处断下，可以看出整数A(1377)在内存中的表示是fff88000`00001337
    0:000> dqs @r8 l@rdx+2
    0000028f`87ab8198  fffe028f`877a9700
    0000028f`87ab81a0  fffe028f`87780180
    0000028f`87ab81a8  402abd70`a3d70a3d Value* vp
    0:000> .formats 402abd70`a3d70a3d
    Evaluate expression:
      Hex:     402abd70`a3d70a3d
      Double:  13.37
相应的，浮点数B(13.37)在内存中的表示为402abd70`a3d70a3d，
对象C在内存中的表示为fffe028f`87790400,
经过分析， `JS::Value` 的高17位是tag保存类型信息，低47位是value保存值信息。（17+47=64）
tag表示如何解读后面的value，当tag是整数、布尔这些类型的时候，value是立即数；当tag是object的时候，value是指针。
    enum JSValueType : uint8_t
    {
        JSVAL_TYPE_DOUBLE              = 0x00,
        JSVAL_TYPE_INT32               = 0x01,
        JSVAL_TYPE_BOOLEAN             = 0x02,
        JSVAL_TYPE_UNDEFINED           = 0x03,
        JSVAL_TYPE_NULL                = 0x04,
        JSVAL_TYPE_MAGIC               = 0x05,
        JSVAL_TYPE_STRING              = 0x06,
        JSVAL_TYPE_SYMBOL              = 0x07,
        JSVAL_TYPE_PRIVATE_GCTHING     = 0x08,
        JSVAL_TYPE_OBJECT              = 0x0c,
        // These never appear in a jsval; they are only provided as an out-of-band
        // value.
        JSVAL_TYPE_UNKNOWN             = 0x20,
        JSVAL_TYPE_MISSING             = 0x21
    };
    JS_ENUM_HEADER(JSValueTag, uint32_t)
    {
        JSVAL_TAG_MAX_DOUBLE           = 0x1FFF0,
        JSVAL_TAG_INT32        = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32, //int的tag是0x1ff1
        JSVAL_TAG_UNDEFINED            = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_UNDEFINED,
        JSVAL_TAG_NULL                 = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_NULL,
        JSVAL_TAG_BOOLEAN              = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN,
        JSVAL_TAG_MAGIC                = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_MAGIC,
        JSVAL_TAG_STRING               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_STRING,
        JSVAL_TAG_SYMBOL               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_SYMBOL,
        JSVAL_TAG_PRIVATE_GCTHING      = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_PRIVATE_GCTHING,
        JSVAL_TAG_OBJECT               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_OBJECT
    } JS_ENUM_FOOTER(JSValueTag);
从上面的定义中可以看出，int类型的tag是0x1ff1，object类型的tag是0x1ffc
验证如下：
    >>> v = 0xfff8800000001337
    >>> hex(v >> 47)
    '0x1fff1'
    >>> hex(v & ((2**47) - 1))
    '0x1337'
    >>> 
    >>> obj = 0xfffe028f87790400
    >>> hex(obj>>47)
    '0x1fffc'
    >>> hex(obj & ((2**47)-1))
    '0x28f87790400'
    >>>
###  数组
    # const C = [1, 2, 3, 4, 5];
    0:000> dqs @r8 l@rdx+2
    0000027a`bf5b8198  fffe027a`bf2a9480
    0000027a`bf5b81a0  fffe027a`bf280140
    0000027a`bf5b81a8  fffe027a`bf2900a0 👈
    0:000> dqs 27a`bf2900a0
    0000027a`bf2900a0  0000027a`bf27ab20
    0000027a`bf2900a8  0000027a`bf2997e8
    0000027a`bf2900b0  00000000`00000000
    0000027a`bf2900b8  0000027a`bf2900d0 数据指针👇
    0000027a`bf2900c0  00000005`00000000
    0000027a`bf2900c8  00000005`00000006
    0000027a`bf2900d0  fff88000`00000001  dt JSObject
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : Ptr64 Void
    0:000> dt js::NativeObject
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : Ptr64 Void
       +0x010 slots_           : Ptr64 js::HeapSlot
       +0x018 elements_        : Ptr64 js::HeapSlot
    0:000> dt js::ArrayObject
       +0x000 group_           : js::GCPtr
       +0x008 shapeOrExpando_  : Ptr64 Void
       +0x010 slots_           : Ptr64 js::HeapSlot
       +0x018 elements_        : Ptr64 js::HeapSlot
继承链： js::ArrayObject  推荐视频：
我们主要后面关注property(属性)和value(值)，shape描述对象 properties 的信息，在shapeOrExpando_中表示。
后面用来调试的代码：
    'use strict';
    const Address = Math.atan2;
    const A = {
        foo : 1337,
        blah : 'doar-e'
    };
    Address(A);
    const B = {
        foo : 1338,
        blah : 'sup'
    };
    Address(B);
    const C = {
        foo : 1338,
        blah : 'sup'
    };
    C.another = true; // C增加了一个prop
    Address(C);
**prop**
    # address(A)处断下