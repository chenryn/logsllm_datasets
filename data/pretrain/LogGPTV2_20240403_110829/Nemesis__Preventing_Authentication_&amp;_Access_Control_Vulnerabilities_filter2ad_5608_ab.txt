These checks occur throughout the application, and any
missing check can lead to a SQL injection or directory
traversal vulnerability.
However, these kinds of attacks are effective only be-
cause the ﬁlesystem and database layers perform all opera-
tions with the privilege level of the web application rather
than the current authenticated webapp user. If the ﬁlesys-
tem and database access of a webapp user were restricted
only to the resources that the user should legitimately
access, input validation attacks would not be effective
as malicious users would not be able not leverage these
attacks to access unauthorized resources.
Furthermore, privileged users such as site administra-
tors are often allowed to perform operations that could
be interpreted as SQL injection, command injection, or
directory traversal attacks. For example, popular PHP
web applications such as DeluxeBB and phpMyAdmin
allow administrators to execute arbitrary SQL commands.
Alternatively, code in Figure 2 could be safe, as long as
only administrative users are allowed to issue such search
queries. This is the very deﬁnition of a SQL injection
attack. However, these SQL injection vulnerabilities can
only be exploited if the application fails to check that the
user is authenticated as the administrator before issuing
3 Authentication Inference
Web applications often have buggy implementations of
authentication and access control, and no two applications
have the exact same authentication framework. Rather
than try to mandate the use of any particular authentica-
tion system, Nemesis prevents authentication and access
control vulnerabilities by automatically inferring when
a user has been safely authenticated, and then using this
authentication information to automatically enforce ac-
cess control rules on web application users. An overview
of Nemesis and how it integrates into a web application
software stack is presented in Figure 3. In this section, we
describe how Nemesis performs authentication inference.
3.1 Shadow Authentication Overview
To prevent authentication bypass attacks, Nemesis must
infer when authentication has occurred without depend-
ing on the correctness of the application authentication
system., which are often buggy or vulnerable. To this end,
Nemesis constructs a shadow authentication system that
works alongside the application’s existing authentication
framework. In order to infer when user authentication
has safely and correctly occurred, Nemesis requires the
application developer to provide one annotation—namely,
where the application stores user names and their known-
good passwords (e.g. in a database table), or what external
function it invokes to authenticate users (e.g. using LDAP
or OpenID). Aside from this annotation, Nemesis is ag-
nostic to the speciﬁc hash function or algorithm used to
validate user-supplied credentials.
To determine when a user successfully authenticates,
Nemesis uses Dynamic Information Flow Tracking
(DIFT). In particular, Nemesis keeps track of two bits
4
Client BrowserWeb AppMySql User: webdbOp: INSERT into pictblFS User: apacheOp: Write pic1092.jpgWeb User: Bob Password: ***Op: Upload PictureWeb ServerFSDBFigure 2: Sample PHP code vulnerable to SQL injection, and the resulting query when a user supplies the underlined, malicious input.
Figure 3: Overview of Nemesis system architecture
of taint for each data item in the application—a “creden-
tial” taint bit, indicating whether the data item represents
a known-good password or other credential, and a “user
input” taint bit, indicating whether the data item was sup-
plied by the user as part of the HTTP request. User input
includes all values supplied by the untrusted client, such
as HTTP request headers, cookies, POST bodies, and
URL parameters. Taint bits can be stored either per object
(e.g., string), or per byte (e.g., string characters), depend-
ing on the needed level of precision and performance.
Nemesis must also track the ﬂow of authentication cre-
dentials and user input during runtime code execution.
Much like other DIFT systems [8, 15, 16], this is done by
performing taint propagation in the language interpreter.
Nemesis propagates both taint bits at runtime for all data
operations, such as variable assignment, load, store, arith-
metic, and string concatenation. The propagation rule we
enforce is union: a destination operand’s taint bit is set if
it was set in any of the source operands. Since Nemesis
is concerned with inferring authentication rather than ad-
dressing covert channels, implicit taint propagation across
control ﬂow is not considered. The rest of this section
describes how Nemesis uses these two taint bits to infer
when successful authentication has taken place.
3.2 Creating a New Login Session
Web applications commonly authenticate a new user ses-
sion by retrieving a username and password from a storage
location (typically a database) and comparing these cre-
dentials to user input. Other applications may use a dedi-
cated login server such as LDAP or Kerberos, and instead
defer all authentication to the login server by invoking
a special third-party library authentication function. We
must infer and detect both of these authentication types.
As mentioned, Nemesis requires the programmer to
specify where the application stores user credentials
for authentication. Typical applications store password
hashes in a database table, in which case the program-
mer should specify the name of this table and the column
names containing the user names and passwords. For
applications that defer authentication to an external login
server, the programmer must provide Nemesis with the
name of the authentication function (such as ldap login),
as well as which function arguments represent the user-
name and password, and what value the function returns
upon authentication success. In either case, the shadow
authentication system uses this information to determine
when the web application has safely authenticated a user.
5
$res = mysql_query(“SELECT * FROM articles  WHERE $_GET['search\_criteria']}”)$res = mysql_query(“SELECT * FROM articles  WHERE 1 == 1; DROP ALL TABLES”)2 tag bits per object to track credentials and taintTag propagation on all object operationsAutomatic inference of authentication checksIntercept I/O operations to enforce file ACLsIntercept, rewrite SQL queries to enforce DB ACLsACL EnforceBlogging Application WebMail ApplicationWiki ApplicationDIFTLEGENDWeb ApplicationLanguage RuntimeNemesis3.2.1 Direct Password Authentication
3.2.2 Deferred Authentication to a Login Server
When an application performs authentication via direct
password comparisons, the application must read the user-
name and password from an authentication storage lo-
cation, and compare them to the user-supplied authenti-
cation credentials. Whenever the authentication storage
location is read, our shadow authentication system records
the username read as the current user under authentication,
and sets the “credential” taint bit for the password string.
In most web applications, a client can only authenticate
as a single user at any given time. If an application allows
clients to authenticate as multiple users at the same time,
Nemesis would have to be extended to keep track of mul-
tiple candidate usernames, as well as multiple “credential”
taint bits on all data items. However, we are not aware of
a situation in which this occurs in practice.
When data tagged as “user input” is compared to data
tagged as “credentials” using string equality or inequal-
ity operators, we assume that the application is checking
whether a user-supplied password matches the one stored
in the local password database. If the two strings are
found to be equal, Nemesis records the web client as au-
thenticated for the candidate username. We believe this is
an accurate heuristic, because known-good credentials are
the only objects in the system with the “credential” taint
bit set, and only user input has the “user input” taint bit
set. This technique even works when usernames and pass-
words are supplied via URL parameters (such as “magic
URLs” which perform automatic logins in HotCRP) be-
cause all values supplied by clients, including URL pa-
rameters, are tagged as user input.
Tag bits are propagated across all common operations,
allowing Nemesis to support standard password tech-
niques such as cryptographic hashes and salting. Hashing
is supported because cryptographic hash functions consist
of operations such as array access and arithmetic com-
putations, all of which propagate tag bits from inputs to
outputs. Similarly, salting is supported because prepend-
ing a salt to a user-supplied password is done via string
concatenation, an operation that propagates tag bits from
source operands to the destination operand.
This approach allows us to infer user authentication
by detecting when a user input string is compared and
found to be equal to a password. This avoids any internal
knowledge of the application, requiring only that the sys-
tem administrator correctly specify the storage location
of usernames and passwords. A web client will only be
authenticated by our shadow authentication system if they
know the password, because authentication occurs only
when a user-supplied value is equal to a known password.
Thus, our approach does not suffer from authentication
vulnerabilities, such as allowing a user to log in if a magic
URL parameter or cookie value is set.
We use similar logic to detect authentication when using
a login server. The web client is assumed to be authenti-
cated if the third-party authentication function is called
with a username and password marked as “user input”,
and the function returns success.
In this case, Neme-
sis sets the authenticated user to the username passed
to this function. Nemesis checks to see if the username
and password passed to this function are tainted in order
to distinguish between credentials supplied by the web
client and credentials supplied internally by the applica-
tion. For example, phpMyAdmin uses MySQL’s built-in
authentication code to both authenticate web clients, and
to authenticate itself to the database for internal database
queries [23]. Credentials used internally by the applica-
tion should not be treated as the client’s credentials, and
Nemesis ensures this by only accepting credentials that
came from the web client. Applications that use single
sign-on systems such as OpenID must use deferred au-
thentication, as the third-party authentication server (e.g.,
OpenID Provider) performs the actual user authentication.
3.3 Resuming a Previous Login Session
As described in Section 2.1, web applications create login
sessions by recording pertinent authentication informa-
tion in cookies. This allows users to authenticate once,
and then access the web application without having to
authenticate each time a new page is loaded. Applications
often write their own custom session management frame-
works, and session management code is responsible for
many authentication bypass vulnerabilities.
Fortunately, Nemesis does not
require any per-
application customization for session management. In-
stead, we use an entirely separate session management
framework. When Nemesis infers that user authentica-
tion has occurred (as described earlier in this section),
a new cookie is created to record the shadow authenti-
cation credentials of the current web client. We do not
interpret or attempt to validate any other cookies stored
and used by the web application for session management.
For all intents and purposes, session management in the
web application and Nemesis are orthogonal. We refer to
the cookie used for Nemesis session management as the
shadow cookie. When Nemesis is presented with a valid
shadow cookie, the current shadow authenticated user is
set to the username speciﬁed in the cookie.
Shadow authentication cookies contain the shadow
authenticated username of the current web user and an
HMAC of the username computed using a private key kept
on the server. The user cannot edit or change their shadow
authentication cookie because the username HMAC will
no longer match the username itself, and the user does
6
not have the key used to compute the HMAC. This cookie
is returned to the user, and stored along with any other
authentication cookies created by the web application.
Our shadow authentication system detects a user safely
resuming a prior login session if a valid shadow cookie
is presented. The shadow authentication cookie is ver-
iﬁed by recomputing the cookie HMAC based on the
username from the cookie. If the recomputed HMAC
and the HMAC from the cookie are identical, the user is
successfully authenticated by our shadow authentication
system. Nemesis distinguishes between shadow cookies
from multiple applications running on the same server
by using a different HMAC key for each application, and
including a hash derived from the application’s HMAC
key in the name of the cookie.
In practice, when a user resumes a login session, the
web application will validate the user’s cookies and ses-
sion ﬁle, and then authorize the user to access a priv-
ileged resource. When the privileged resource access
is attempted, Nemesis will examine the user’s shadow
authentication credentials and search for valid shadow
cookies. If a valid shadow cookie is found and veriﬁed to
be safe, the user’s shadow authentication credentials are
updated. Nemesis then performs an access control check
on the shadow authentication credentials using the web
application ACL.
3.4 Registering a New User
The last way a user may authenticate is to register as a
new user. Nemesis infers that new user registration has
occurred when a user is inserted into the authentication
credential storage location. In practice, this is usually a
SQL INSERT statement modifying the user authentica-
tion database table. The inserted username must be tainted
as “user input”, to ensure that this new user addition is
occurring on behalf of the web client, and not because the
web application needed to add a user for internal usage.
Once the username has been extracted and veriﬁed as
tainted, the web client is then treated as authenticated
for that username, and the appropriate session ﬁles and
shadow authentication cookies are created. For the com-
mon case of a database table, this requires us to parse the
SQL query, and determine if the query is an INSERT into
the user table or not. If so, we extract the username ﬁeld
from the SQL statement.
3.5 Authentication Bypass Attacks
Shadow authentication information is only updated when
the web client supplies valid user credentials, such as
a password for a web application user, or when a valid
shadow cookie is presented. During authentication bypass
attacks, malicious users are authenticated by the web
application without supplying valid credentials. Thus,
when one of these attacks occurs, the web application
will incorrectly authenticate the malicious web client, but
shadow authentication information will not be updated.
While we could detect authentication bypass attacks by
trying to discern when shadow authentication information
differs from the authenticated state in the web application,
this would depend on internal knowledge of each web
application’s code base. Authentication frameworks are
often complex, and each web application typically cre-
ates its own framework, possibly spreading the current
authentication information among multiple variables and
complex data structures.
Instead, we note that the goal of any authentication
bypass attack is to use the ill-gotten authentication to
obtain unauthorized access to resources. These are exactly
the resources that the current shadow authenticated user is
not permitted to access. As explained in the next section,
we can prevent authentication bypass attacks by detecting
when the current shadow authenticated user tries to obtain
unauthorized access to a system resource such as a ﬁle,
directory, or database table.
4 Authorization Enforcement
Both authentication and access control bypass vulnera-
bilities allow an attacker to perform operations that she
would not be otherwise authorized to perform. The previ-
ous section described how Nemesis constructs a shadow
authentication system to keep track of user authentication
information despite application-level bugs. However, the
shadow authentication system alone is not enough to pre-
vent these attacks. This section describes how Nemesis
mitigates the attacks by connecting its shadow authentica-
tion system with an access control system protecting the
web application’s database and ﬁle system.
To control what operations any given web user is al-
lowed to perform, Nemesis allows the application de-
veloper to supply access control rules (ACL) for ﬁles,
directories, and database objects. Nemesis extends the
core system library so that each database or ﬁle operation
performs an ACL check. The ACL check ensures that
the current shadow authenticated user is permitted by the
web application ACL to execute the operation. This en-
forcement prevents access control bypass attacks, because
an attacker exploiting a missing or invalid access control
check to perform a privileged operation will be foiled
when Nemesis enforces the supplied ACL. This also miti-
gates authentication bypass attacks—even if an attacker
can bypass the application’s authentication system (e.g.,
due to a missing check in the application code), Neme-
sis will automatically perform ACL checks against the
username provided by the shadow authentication system,
which is not subject to authentication bypass attacks.
7
4.1 Access Control
In any web application, the authentication framework
plays a critical role in access control decisions. There
are often numerous, complex rules determining which re-
sources (such as ﬁles, directories, or database tables, rows,