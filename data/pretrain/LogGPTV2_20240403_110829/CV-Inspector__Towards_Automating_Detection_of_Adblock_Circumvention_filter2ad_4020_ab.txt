lessly continue programmatic advertising that is ﬁnancially
more lucrative for publishers than anti-adblocking.
In this work, we focus on obfuscation-based circumvention.
Fig. 1(b) illustrates its general workﬂow: (1) JS detects whether
an ad is missing; (2) if an ad is found to be missing, then
an obfuscated web request is sent to a CV server; (3) the
CV server de-obfuscates the request and relays it
to the
corresponding third-party ad servers or the publisher’s ad
server to attain the new ad; (4) the CV server obfuscates the
ad content and sends it back to the browser; (5) JS rebuilds
the ad content into DOM elements; and (6) it re-injects the
new ad at a desired location.
Alrizah et al. [13] anecdotally showed that EL is ineffective
at countering obfuscation-based circumvention. More recently,
Chen el at. [22] found that about one-third of advertising and
tracking scripts are able to evade adblocking ﬁlter rules due
to URL and other types of obfuscation. To the best of our
knowledge, prior work does not provide large-scale character-
ization of adblock circumvention or automated circumvention
detection in the wild.
Anti-Adblocking vs. Circumvention. Fig. 1 compares anti-
adblocking and adblock circumvention. Both approaches share
the ﬁrst step, detecting whether an ad is missing. Patently, this
is necessary for anti-adblocking. However, for circumvention,
it is not a required step but rather a choice that publishers
select to minimize the cost of using CV services.
After the ﬁrst step, their subsequent steps differ. As shown
in Fig. 1, different from anti-adblocking, circumvention in-
volves a series of additional steps at the server-side to bypass
ﬁlter rules and re-inject ads in the client-side browser. Thus,
circumvention is a more intricate process. It must deal with the
process of attaining new ad content and where to place them on
the page. Recall that it must do this without disrupting the user
experience while also evading ﬁlter rules. The complexity of
circumvention is further denoted by adblockers implementing
new advanced ﬁlter rules, such as aborting JS execution, to
adequately combat it. This is further explored in Sec. III.
As noted before, anti-adblocking and circumvention both
aim to affect adblock users only: thus, making differential anal-
ysis a suitable technique to detect them. Intuitively, differential
analysis endeavors to capture fundamental characteristics of
anti-adblocking or circumvention. For instance, with regards
(a) Anti-Adblocking
(b) Obfuscation-based Circumvention
(a) (1) If JS detects that an ad is missing; (2) it shows a popup
Fig. 1.
window asking the user to disable the adblocker, pay for a subscription, or
whitelist the site. (b) (1) If JS detects that an ad is missing; (2) it sends an
obfuscated ad request through a CV server; (3) the server retrieves the new
ad from an ad server; (4) the server obfuscates it before sending it back to the
browser; (5) JS rebuilds the ad content into DOM elements; and (6) re-injects
the ad back onto the page.
to Fig. 1(a), prior work [50], [78] sought to detect the action
of step 1 and whether the popup of step 2 was displayed to the
user. Note that the outcome of anti-adblocking does not involve
ads. On the other hand, our work identiﬁes characteristics of
circumvention, described in Fig. 1(b), within actions of steps
2 and 4, and whether ads were displayed as a result of step 6.
However, the differential analysis method proposed in prior
work to detect anti-adblockers cannot be directly used to
detect adblock circumvention. For example, Zhu et al. [78]
conducted differential analysis of JS execution to ﬁnd branch
divergences due to anti-adblocking. This technique, if used as
is, would incur false positives when a site is able to re-insert
ads but unsuccessfully displays them due to ﬁlter rules hiding
the ad element. More speciﬁcally, the circumvention approach
illustrated in Fig. 1(b) would exhibit a branch divergence at the
ﬁrst step of detecting missing ads, which would be incorrectly
considered a positive label (successful circumvention). While
CV-INSPECTOR also uses a differential analysis approach that
involves loading a page with and without adblocker, it does
not aim to capture branch divergences due to anti-adblocking.
As we discuss later, CV-INSPECTOR conducts differential
analysis of web requests, DOM mutations, and other features
to be able to distinguish between successful and unsuccessful
circumvention of adblockers.
3
AdAnti-AdblockingJavaScriptShows WarningMesageDetects AdMissingAdblock Detected!Please Disable Your AdblockerAdJavaScriptCircumventionServerAd ContentObfuscationAd RequestObfuscationDetects AdMissingRe-injects AdAd ServersRebuilds Ad ContentAd ContentAdFig. 2. Anti-circumvention List Over Time. This shows how ﬁlter rules
from ABP’s ACVL have evolved from May 2018 to May 2020 and categorizes
them by ﬁlter types.
III. STATE OF ANTI-CIRCUMVENTION
The adblocking community is increasingly wary of circum-
vention. Most notably, ABP recently started a dedicated ﬁlter
list, ACVL, to combat circumvention [43]. The ﬁlter list is
enabled by default in ABP to help block “circumvention ads.”
This anti-CV list has two key advantages over the standard
EL. First, it allows ABP to have full control over ﬁlter rule
design and management, including pushing the updated rules
at a higher frequency (e.g., every hour as opposed to every
four days for EL) and without community consensus. Second,
it supports advanced ﬁlter rules with enriched syntax and
capabilities, which are not supported by the standard EL,
speciﬁcally to counter CV services [38].
A. Filter Rules Overview
Filter rules can be either simple or advanced. Table I
provides examples and their compatibility with EL and ACVL.
We refer to EL types of rules as simple ﬁlter rules: they can
block web requests by matching domains and paths or hide
DOM elements by targeting CSS styles or content.
these can abort
ACVL deploys additional advanced rules to combat cir-
cumvention:
the execution of JS or hide
DOM elements based on computed styles and visibility of
content [33]. For example, if “EX” is an JS object that holds
circumvention code, then “||a.com#$#abort-on-property-read
EX” can block any JS that accesses it. Creating the rule often
involves reverse engineering the code to identify that “EX”
holds circumvention related code. Furthermore, a ﬁlter rule like
“||a.com#$#hide-if-contains-visible-text
/Sponsor/” can hide
any element containing the visible text “Sponsor.” Notably,
this differs from simple element hiding because the simple
rule only takes into account the existence of text content and
not whether it is displayed to the user.
B. Analysis of the Anti-circumvention List (ACVL)
Evolution of Anti-circumvention Rules. We consider the
commit history of ACVL by using its GitHub repository and
rebuild the list’s ﬁlter rules for each day from May 2018 to
May 2020 [4]. Fig. 2 shows the evolution of the list since its
inception in May 2018. The list grows rapidly near the end
4
Fig. 3. Commits by Filter Type. A boxplot of commit changes from 2018
to 2020 and categorized by ﬁlter types for ACVL. The horizontal lines within
the boxes represent the median, while the white circles represent the mean.
of September 2018 and peaks at 700 ﬁlter rules in November
2018. We see the overwhelming usage of element hiding over
other ﬁlter types such as web request blocking and advanced
element hiding. This can be attributed to the fact that advanced
element hiding has a large performance cost (with the use
of “window.getComputedStyles”), causing ﬁlter list authors to
use it sparingly. Also, element hiding may have been more
effective in 2018 because JS aborting was not introduced until
mid-November of that year [40]. Due to the over dependency
on element hiding, we see that until February 2019, ABP
could not prevent the loading of circumvented ads but rather
only hide them from the user. Moreover, we see a large
drop in element hiding rules (∼300 ﬁlter rules removed) from
November to December 2018. When inspecting the commit
changes of that drop, they appear to be cleaning up old ﬁlter
rules for Czech and German sites [64], [76]. In particular, we
ﬁnd that many element hiding rules are used to target only
13 sites (e.g., novinky.cz and super.cz). This is a downside to
element hiding: it must target speciﬁc elements resulting in a
large number of rules to cover ads even for one site.
Next, we observe that
the introduction of JS aborting
rules in mid-November 2018 triggers a change in the ﬁlter
type usage within ACVL. First, the popularity of JS aborting
rules denotes its effectiveness against circumvention. Second,
it reduces the ACVL’s dependency on element hiding because
JS aborting prevents ad reinsertion, which results in fewer
ad elements to hide. Consequently, this also increases the
popularity of web request blocking. This can be due to
two factors: (1) once ﬁlter list authors understand which JS
employs circumvention, they can better ﬁnd a way to block the
script entirely; and (2) CV services rely more on web request
obfuscation during that period. Thus, from late 2018 to 2020,
we see that the three ﬁlter types were used almost equally.
Frequency of Updates. For 2019, which denotes ACVL’s ﬁrst
complete year, Fig. 2 shows that the number of ﬁlter rules has
stabilized within the range of 400 to 500 rules. This contrasts
with EL’s constant growth, which increases at approximately
8K rules per year [73]. However, the daily modiﬁcations to
ACVL remains high. To explore this notion, we review the
changes of all commits within a day by using “git diff” and
parse each change to categorize then into ﬁlter types. Fig. 3
reveals the spread of changes per day (deﬁned as number of
inserts and deletions) for each ﬁlter type within ACVL. We
ﬁnd that the medians of changes are 12, 10, and 5 for web
request blocking, element hiding, and advanced JS aborting,
Web Request BlockingElement HidingAdvanced  JS AbortingAdvanced  Element Hiding0204060Changes Per Day (Inserts/Deletions)First, we note that
there are about 927 sites that employ
circumvention within the Tranco top one million sites, which
denotes the low prevalence of circumvention; perhaps, due to
the cost of CV providers. Second, surprisingly, we see that
ACVL covers about 1064 sites that are beyond the one million
(1M) Tranco-ranking, more than twice the amount of coverage
when compared to the top-100K.
Furthermore, we see low coverage numbers for the range of
rankings between 100K to 1M. We can deduce that the ACVL
may lack coverage in two ways. First, advanced rules must
specify which sites to target while simple rules can be website
agnostic. Second, we previously saw that ACVL’s number of
rules has stabilized — showing that ABP is more focused on
combating circumvention from a few known sites rather than
discovering new sites that employ circumvention. In addition,
while EL authors receive help from the community through
forums that have up to 23K reports over a span of nine years
[13], ACVL authors rely on submitted GitHub issues, with a
current total of 379 issues over a span of two years [4]. Thus,
signiﬁcant manual work (e.g., updating rules and discovering
new circumvention sites) falls onto the ﬁlter list authors.
Takeaways. The number of ACVL ﬁlter rules has stabilized
in contrast to EL. This can be attributed to two factors: (1)
ABP’s focus on a few known CV providers; and (2) changes
within ACVL primarily being modiﬁcations to existing ﬁlter
rules. Thus, the coverage of ACVL is limited due to the focus
on modifying rules rather than discovering new circumvention
sites. Moreover, the effort to combat circumvention requires
signiﬁcant effort from ﬁlter list authors. ACVL has only 14
contributors with three main contributors: wizmak, arsykan,
and Milene [6], who commit ﬁve, four, and three times on
average per day, respectively. These few ﬁlter list authors must
undertake a huge effort in keeping rules up-to-date.
This motivates our methodology in the next section, which
aims at assisting and prioritizing this effort by providing ways
to automate detecting successful circumvention in the wild, to
monitor the changes in publishers, and to be notiﬁed when a
site has successfully circumvented the adblocker.
IV. CV-INSPECTOR: DESIGN AND IMPLEMENTATION
In this section, we present CV-INSPECTOR for detecting
whether a site employs circumvention or not. Fig. 6 presents
an overview of our methodology. In Sec. IV-A, we present our
instrumentation and automated data collection. In Sec. IV-B,
we apply differential analysis to identify data that is indicative
of circumvention. Then, in Sec. IV-C to IV-F, we extract
features, train, and evaluate our CV-INSPECTOR classiﬁer.
A. Instrumentation and Data Collection
1) How we collect data: Our crawling script takes as input
a list of websites for which we collect data. For each page load
of a site, we wait for 25 seconds: we denote this as a “page
visit.” Page load times are commonly less than a minute as
they affect the search ranking of sites. As shown in Fig. 6, we
visit each site for a total of eight times. As a result, we select
25 seconds to not signiﬁcantly slow down CV-INSPECTOR,
which is inline with prior work [78].
Fig. 4. Time between Commits. The time between commits for ACVL is
most frequently within 4 minutes while the average is 2.3 hours.
Fig. 5. Tranco-ranking of ACVL. Sites extracted from ACVL and their
corresponding Tranco-ranking. We see that there is low coverage of sites for
circumvention from ranking 100k to one million. Note that about half of the
sites do not appear in the Tranco top one million list (labeled as 1M+).
respectively. The median for advanced element hiding remains
at zero due to its infrequent changes. Moreover, the frequency
of commits persists at a high rate, as indicated by the time
between commits, reported in Fig 4: it is commonly within
4 minutes. The average time is 2.3 hours, which is about 8.7
times more frequent that EL’s 20 hours [73]. This highlights
the accelerated arms race between publishers and adblockers
within the circumvention space.
Publishers that Employ Circumvention. Upon further in-
spection, we ﬁnd that commits are generally modiﬁcations to
existing rules. For web request blocking, curators typically
change URL components (e.g., subdomains and paths) or
resource type within the rule. For both simple and advanced
element hiding, they often modify class names, IDs, styles,
and DOM structure. For advanced JS aborting, they change
the name of the JS object that the rule is targeting.
To evaluate publishers that cause these frequent commits,
we identify domains that appear in both insert and deletion
lines within a commit. We discover that the top two sites,
reuters.com and quoka.de, have triggered 671 changes to rules
over a period of 17 months and 269 changes within 18 months.
Overall, the top-10 websites that give ﬁlter list authors the most
trouble have an average ranking of about 10K [58]. However,
when considering the top-30, the average ranking is 189K,
which can be explained by the fact that many of the sites are
from Germany, where most of the ACVL authors reside.
Coverage of ACVL. Next, we investigate the coverage of
ACVL on the web, which has not been previously explored.
We extract the sites that are speciﬁed in the ﬁlter rules and
map them to their corresponding Tranco-ranking [58] in Fig. 5.
5
020406080100120Minutes050010001500Occurrences[0-100k)[100k-200k)[200k-300k)[300k-400k)[400k-500k)[500k-600k)[600k-700k)[700k-800k)[800k-900k)[900k-1M)[1M+]Tranco-Ranking102103Number of Sites44013392645840393137331064Fig. 6. CV-INSPECTOR Workﬂow. Given a list of URLs, our crawling
script will visit each site four times for: (A) “No Adblocker” and (B) “With
Adblocker.” With each visit, we collect web requests, DOM mutation events,
temporal events (e.g., timestamps and blocked events by the adblocker), and
the page source. We take the set difference between the data collected in the
two cases, (B)-(A), since websites commonly employ circumvention when