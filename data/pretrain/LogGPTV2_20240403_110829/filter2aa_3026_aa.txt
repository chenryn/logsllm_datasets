### Timing Attacks in Low-Latency Mix Systems
**(Extended Abstract)**

**Authors:**
- Brian N. Levine<sup>1</sup>, Michael K. Reiter<sup>2</sup>, Chenxi Wang<sup>2</sup>, and Matthew Wright<sup>1</sup>
- <sup>1</sup>University of Massachusetts, Amherst, MA, USA; {brian, mwright}@cs.umass.edu
- <sup>2</sup>Carnegie Mellon University, Pittsburgh, PA, USA; {reiter, chenxi}@cmu.edu

**Abstract:**
A mix is a communication proxy designed to obscure the relationship between incoming and outgoing messages. Timing attacks pose a significant challenge for mix-based systems that aim to support interactive, low-latency applications. However, the effectiveness of these attacks has not been thoroughly examined. In this paper, we investigate timing analysis attacks on low-latency mix systems and clarify the threats they present. We propose a novel technique, defensive dropping, to counteract timing attacks. Through simulations and analysis, we demonstrate that defensive dropping can be effective against attackers who employ timing analysis.

**1. Introduction**
A mix [6] is a communication proxy that aims to hide the correspondence between its incoming and outgoing messages. Routing communication through a chain of mixes is a powerful method for providing unlinkability of senders and receivers, even under observation by a global eavesdropper and the compromise of many mix servers along the path. A mix can use various techniques to obscure the relationships between its incoming and outgoing messages, such as cryptographic transformations, delays, reordering, and the emission of additional "dummy" messages. The effectiveness of these techniques has been well-studied (e.g., [4, 12, 18, 15, 13]), primarily in high-latency systems like anonymous email or voting applications, which do not require efficient processing. In practice, such systems may take hours to deliver a message to its destination.

Users desire anonymity for more interactive applications, such as web browsing, online chat, and file-sharing, all of which require low-latency connections. Several low-latency mix-based protocols have been proposed for unlinkable communications, including ISDN-Mixes [14], Onion Routing [16], Tarzan [10], Web Mixes [3], and Freedom [2]. Unfortunately, these systems are vulnerable to known attacks that exploit weaknesses in mix-based protocols when used for low-latency applications [19, 2, 20].

The work of Levine and Wright was supported in part by National Science Foundation awards ANI-0087482 and EIA-0080199. The work of Reiter, Wang, and Wright was supported in part by National Science Foundation award CCR-0208853 and a grant from the Air Force F49620-01-1-0340.

**2. Background**
Several low-latency mix-based systems have been proposed, but their attention to timing attacks varies. Some systems, such as Onion Routing [19] and the second version of Freedom [2], do not provide special provisions to prevent timing analysis. In such systems, if the first and last mixes on a path are compromised, effective timing analysis may allow an attacker to link the sender and receiver identities [19]. When both the first and last mixes are chosen randomly with replacement from the set of all mixes, the probability of attacker success is given by \( \frac{c^2}{n^2} \), where \( c \) is the number of attacker-owned mixes and \( n \) is the total number of mixes.

Both Tarzan [10] and the original Freedom system [2] use constant-rate cover traffic between pairs of mixes, sending traffic only between covered links. This defense makes it difficult for an eavesdropper to perform timing analysis, as the flows on each link are independent. However, in Freedom, the attack is still possible for an eavesdropper because there is no cover traffic between the initiator and the first mix on the path, and between the last mix and the responder, the final destination of the initiator's messages. This exposed traffic, along with the exposed traffic leaving the path, can be linked via timing analysis. Additionally, both systems are still vulnerable to timing analysis between attacker-controlled mixes, as they can distinguish between cover traffic and real traffic and will only consider the latter for timing analysis.

Web-Mixes [3], ISDN-Mixes [14], and Pipenet [7] all use constant-rate cover traffic along the entire path, i.e., by sending messages at a constant rate through each path. In these systems, it is unclear whether timing analysis is possible, as each initiator appears to send a constant rate of traffic at all times. An Onion Routing proposal for partial-path cover traffic is an extension of this idea [19]. In this case, the cover traffic only extends over a prefix of the path. Mixes that appear later in the path do not receive the cover traffic and only see the initiator traffic. Thus, an attacker mix in the covered prefix sees a very different traffic pattern than an attacker mix in the uncovered suffix, making timing analysis more difficult.

**3. System Model**
Our goal is to understand the threat posed by timing analysis attacks. In this section, we develop a framework for studying different analysis methods and defenses against them. We begin by presenting a system and attacker model. In the next section, we use this model to analyze attacks and defenses.

Figure 1 illustrates an initiator’s path in a mix system. We focus on a particular initiator \( I \), who uses a path \( P_I \) of mixes in the system. The path \( P_I \) consists of a sequence of \( h \) mixes that starts with \( M_I^1 \) and ends with \( M_I^h \). Although in many protocols the paths of each initiator can vary, to avoid cumbersome notation and without loss of generality, we let \( h \) denote the last mix in that particular path; our results do not assume a fixed or known path length. \( M_I^1 \) receives packets from the initiator \( I \), and \( M_I^h \) sends packets to the appropriate responders. We assume that each link between two mixes typically carries packets from multiple initiators, and that for each packet received, a mix can identify the path \( P_I \) to which the packet corresponds. This is common among low-latency mix systems, where when a path \( P_I \) is first established, every mix server on \( P_I \) is given a symmetric encryption key that it shares with \( I \), and with which it decrypts (encrypts) packets traversing \( P_I \) in the forward (respectively, reverse) direction.

We assume that \( M_I^h \) recognizes that it is the last mix on the path \( P_I \). We also assume that mix \( M_I^1 \) recognizes that it is the first mix on the path \( P_I \) and thus that \( I \) is, in fact, the initiator.

Though not shown in Figure 1, in our model we assume there are many paths through the system. We are interested in the case where an attacker controls \( M_I^1 \) and \( M_J^h \) on two paths \( P_I \) and \( P_J \) that are not necessarily distinct. The attacker’s goal is to determine whether \( I = J \). If \( I = J \) and the attacker ascertains this, then it learns the responders to which \( I \) is communicating.

For these scenarios, we focus on the adversary’s use of timing analysis to determine whether \( I = J \). Packets that \( I \) sends along \( P_I \) run on a general-purpose network between the initiator \( I \) and \( M_I^1 \), and between each pair \( M_I^k \) and \( M_I^{k+1} \). On this stretch of network, there are dropped packets and variable transmission delays. Since these drops and delays affect packet behavior as seen further along the path, they can form a basis on which the attacker at \( M_I^1 \) and \( M_J^h \), for example, can infer that \( I = J \). Indeed, the attacker may employ active attacks that modify the timings of packets emitted from \( M_I^1 \) or intentionally drop packets at \( M_I^1 \), to see if these perturbations are reflected at \( M_J^h \). For simplicity, we generally assume that the attacker has no additional information to guide his analysis, i.e., that there is no a priori information as to whether \( I = J \).

**4. Timing Attacks and Defenses**
In this section, we describe the methods an attacker in our model can use to successfully perform timing analysis. Additionally, we discuss defenses that can be used against these attacks. In particular, we introduce a new type of cover traffic to guard against timing attacks.

**4.1 Timing Analysis Attacks**
The essence of a timing attack is to find a correlation between the timings of packets seen by \( M_I^1 \) and those seen by an endpoint \( M_J^h \). The stronger this correlation, the more likely \( I = J \) and \( M_J^h \) is actually \( M_I^h \). Attacker success also depends on the relative correlations between the timings at which distinct initiators \( I \) and \( J \) emit packets. That is, if \( M_I^1 \) and \( M_J^1 \) happen to see exactly the same timings of packets, then it is not possible to determine whether the packet stream seen at \( M_J^h \) is a match for \( M_I^1 \) or \( M_J^1 \).

To study the timing correlations, the most intuitive random variable for the attacker is the difference, \( \delta_i \), between the arrival time of a packet \( i \) and the arrival time of its successor packet. If the two attacker mixes are on the same path \( P_I \), there should be a correlation between the \( \delta_i \) values seen at the two mixes; for example, if \( \delta_i \) is relatively large at \( M_I^1 \), then the \( \delta_i \) at \( M_I^h \) is more likely to be larger than average. The correlation does not need to be strong, as long as it is stronger than the correlations that would occur between \( M_I^1 \) and \( M_J^h \), for two different initiators \( I \) and \( J \).

Unfortunately, this random variable is highly sensitive to dropped packets. A dropped packet that occurs between \( M_I^1 \) and \( M_I^h \) will cause later timings to be off by one. As a result, the correlation will be calculated between packets that are not matched—an otherwise perfect correlation will appear to be a mismatch. Therefore, we extract a new random variable from the data that is less sensitive to packet drops. We use non-overlapping and adjacent windows of time with a fixed duration \( W \). Within instance \( k \) of this window, mix \( M \) maintains a count \( X_I^k \) of the number of packet arrivals on each path \( P_I \), in which \( M \) participates. Our analysis then works by cross-correlating \( X_I^k \) and \( X_J^k \) at the two different mixes.

To enhance the timing analysis, the attacker can employ a more active approach. Specifically, the attacker can drop packets at \( M_I^1 \) intentionally. These drops and the gaps they create will propagate to \( M_I^h \) and should enhance the correlation between the two mixes. Additionally, a careful placement of packet drops can effectively reduce the correlation between \( M_I^1 \) and \( M_J^1 \) for \( I \neq J \).

**4.2 The Defenses**
A known defense against timing attacks is to use a constant rate of cover traffic along the length of the entire path [14, 7]. This defense is useful because it dramatically lowers the correlations between \( M_I^1 \) and \( M_I^h \). The lowered correlations may seem unexpected, since both nodes will now see approximately the same number of packets at all times. The difference is that the variations in packet delays must now be correlated: a long delay between two packets at \( M_I^1 \) must match a longer-than-average delay between the same two packets at \( M_I^h \) for the correlation to increase. If the magnitude of variation between \( M_I^1 \) and \( M_I^h \) dominates the magnitude of variation between \( I \) and \( M_I^1 \), this matching will often fail, reducing the correlation between the two streams.

This approach faces serious problems, however, when there are dropped packets before or at \( M_I^1 \). Dropped packets provide holes in the traffic, i.e., gaps where there should have been a packet, but none appeared. With only a few such holes, the correlation should increase for \( M_I^1 \) and \( M_I^h \), while the correlation between \( M_J^1 \) and \( M_I^h \) should decrease. Packet drops can happen due to network events on the link between the initiator and \( M_I^1 \), or the attacker can have \( M_I^1 \) drop these packets intentionally.

We now introduce a new defense against timing analysis, called defensive dropping. With defensive dropping, the initiator constructs some of the dummy packets such that an intermediate mix \( M_I^m \), \( 1 \leq m \leq h \), is instructed to drop the packet. To achieve this, we only need one bit inside the encryption layer for \( M_I^m \). If \( M_I^m \) is an honest participant, it will drop the dummy packet rather than sending it to the next mix (there will only be a random string to pass on anyway, but an attacker might try to resend an older packet). If these defensive drops are randomly placed with a sufficiently large frequency, the correlation between the first attacker and the last attacker will be reduced.

Defensive dropping is a generalization of “partial-path cover traffic,” in which all of the cover traffic is dropped at a designated intermediate mix [19]. To further generalize, we note that the dropping need not be entrusted to a single mix. Rather, multiple intermediate mixes can collectively drop a set of packets. We discuss and analyze defensive dropping in depth in Section 7.

**5. Simulation Methodology**
We determined the effectiveness of timing analysis and various defenses using a simulation of network scenarios. We isolated timing analysis from path selection, a priori information, and any other aspects of a real attack on the anonymity and unlinkability of initiators in a system. To achieve this, the simulations modeled only the case when an attacker controls both the first and the last mix in the path—this is the key position in a timing attack.

We simulated two basic scenarios of mixes: one based on high-resource servers and a second based on low-resource peers. In the server scenario, each mix is a dedicated server for the system, with a reliable low-latency link to the Internet. This means that the links between each mix are more reliable with low to moderate latencies, as described below. In the peer-based scenario, each mix is also a general-purpose computer that may have an unreliable or slow link to the Internet.