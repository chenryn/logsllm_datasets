---
author: Gaurav Kamathe
category: 技术
comments_data:
- date: '2020-05-06 09:20:21'
  message: "“There are only 10 types of people in the world: those who understand
    binary and those who don’t.”\r\n\r\n&nbsp; &nbsp; — Unknown.\r\n\r\nFigure it out yet?\r\n\r\n“10” in binary numerals equals “2”
    in decimal numerals, so when you read the sentence, pronounce “10” as “two.”\r\n\r\nIn all fairness, a number should have a subscript when its base
    differs from ten. In this case, it should be written 10#2. But that wouldn’t make
    for much of a joke then, would it?"
  postip: 14.223.124.41
  username: 来自广东佛山的 Firefox 68.0|GNU/Linux 用户
count:
  commentnum: 1
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 10043
date: '2020-05-05 23:21:37'
editorchoice: false
excerpt: 这些简单的命令和工具可以帮助你轻松完成分析二进制文件的任务。
fromurl: https://opensource.com/article/20/4/linux-binary-analysis
id: 12187
islctt: true
largepic: /data/attachment/album/202005/05/232115nn0oduodo4oztv0a.jpg
permalink: /article-12187-1.html
pic: /data/attachment/album/202005/05/232115nn0oduodo4oztv0a.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这些简单的命令和工具可以帮助你轻松完成分析二进制文件的任务。
tags:
- 二进制
thumb: false
title: 在 Linux 上分析二进制文件的 10 种方法
titlepic: true
translator: wxy
updated: '2020-05-05 23:21:37'
---
> 
> 这些简单的命令和工具可以帮助你轻松完成分析二进制文件的任务。
> 
> 
> 
![](/data/attachment/album/202005/05/232115nn0oduodo4oztv0a.jpg)
“这个世界上有 10 种人：懂二进制的人和不懂二进制的人。”
我们每天都在与二进制文件打交道，但我们对二进制文件却知之甚少。我所说的二进制，是指你每天运行的可执行文件，从命令行工具到成熟的应用程序都是。
Linux 提供了一套丰富的工具，让分析二进制文件变得轻而易举。无论你的工作角色是什么，如果你在 Linux 上工作，了解这些工具的基本知识将帮助你更好地理解你的系统。
在这篇文章中，我们将介绍其中一些最流行的 Linux 工具和命令，其中大部分都是 Linux 发行版的一部分。如果没有找到，你可以随时使用你的软件包管理器来安装和探索它们。请记住：学习在正确的场合使用正确的工具需要大量的耐心和练习。
### file
它的作用：帮助确定文件类型。
这将是你进行二进制分析的起点。我们每天都在与文件打交道，并非所有的文件都是可执行类型，除此之外还有各种各样的文件类型。在你开始之前，你需要了解要分析的文件类型。是二进制文件、库文件、ASCII 文本文件、视频文件、图片文件、PDF、数据文件等文件吗？
`file` 命令将帮助你确定你所处理的文件类型。
```
$ file /bin/ls
/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=94943a89d17e9d373b2794dcb1f7e38c95b66c86, stripped
$
$ file /etc/passwd
/etc/passwd: ASCII text
$
```
### ldd
它的作用：打印共享对象依赖关系。
如果你已经在一个可执行的二进制文件上使用了上面的 `file` 命令，你肯定会看到输出中的“ 动态链接   dynamically linked ”信息。它是什么意思呢？
在开发软件的时候，我们尽量不要重造轮子。有一组常见的任务是大多数软件程序需要的，比如打印输出或从标准输入/打开的文件中读取等。所有这些常见的任务都被抽象成一组通用的函数，然后每个人都可以使用，而不是写出自己的变体。这些常用的函数被放在一个叫 `libc` 或 `glibc` 的库中。
如何找到可执行程序所依赖的库？这就是 `ldd` 命令的作用了。对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。
```
$ ldd /bin/ls
        linux-vdso.so.1 =>  (0x00007ffef5ba1000)
        libselinux.so.1 => /lib64/libselinux.so.1 (0x00007fea9f854000)
        libcap.so.2 => /lib64/libcap.so.2 (0x00007fea9f64f000)
        libacl.so.1 => /lib64/libacl.so.1 (0x00007fea9f446000)
        libc.so.6 => /lib64/libc.so.6 (0x00007fea9f079000)
        libpcre.so.1 => /lib64/libpcre.so.1 (0x00007fea9ee17000)
        libdl.so.2 => /lib64/libdl.so.2 (0x00007fea9ec13000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fea9fa7b000)
        libattr.so.1 => /lib64/libattr.so.1 (0x00007fea9ea0e000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fea9e7f2000)
$
```
### ltrace
它的作用：库调用跟踪器。
我们现在知道如何使用 `ldd` 命令找到一个可执行程序所依赖的库。然而，一个库可以包含数百个函数。在这几百个函数中，哪些是我们的二进制程序正在使用的实际函数？
`ltrace` 命令可以显示运行时从库中调用的所有函数。在下面的例子中，你可以看到被调用的函数名称，以及传递给该函数的参数。你也可以在输出的最右边看到这些函数返回的内容。
```
$ ltrace ls
__libc_start_main(0x4028c0, 1, 0x7ffd94023b88, 0x412950 
strrchr("ls", '/')                                                                  = nil
setlocale(LC_ALL, "")                                                               = "en_US.UTF-8"
bindtextdomain("coreutils", "/usr/share/locale")                                    = "/usr/share/locale"
textdomain("coreutils")                                                             = "coreutils"
__cxa_atexit(0x40a930, 0, 0, 0x736c6974756572)                                      = 0
isatty(1)                                                                           = 1
getenv("QUOTING_STYLE")                                                             = nil
getenv("COLUMNS")                                                                   = nil
ioctl(1, 21523, 0x7ffd94023a50)                                                     = 0
>
fflush(0x7ff7baae61c0)                                                              = 0
fclose(0x7ff7baae61c0)                                                              = 0
+++ exited (status 0) +++
$
```
### hexdump
它的作用：以 ASCII、十进制、十六进制或八进制显示文件内容。
通常情况下，当你用一个应用程序打开一个文件，而它不知道如何处理该文件时，就会出现这种情况。尝试用 `vim` 打开一个可执行文件或视频文件，你屏幕上会看到的只是抛出的乱码。
在 `hexdump` 中打开未知文件，可以帮助你看到文件的具体内容。你也可以选择使用一些命令行选项来查看用 ASCII 表示的文件数据。这可能会帮助你了解到它是什么类型的文件。
```
$ hexdump -C /bin/ls | head
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  d4 42 40 00 00 00 00 00  |..>......B@.....|
00000020  40 00 00 00 00 00 00 00  f0 c3 01 00 00 00 00 00  |@...............|
00000030  00 00 00 00 40 00 38 00  09 00 40 00 1f 00 1e 00  |....@.8...@.....|
00000040  06 00 00 00 05 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 40 00 00 00 00 00  40 00 40 00 00 00 00 00  |@.@.....@.@.....|
00000060  f8 01 00 00 00 00 00 00  f8 01 00 00 00 00 00 00  |................|
00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|
00000080  38 02 00 00 00 00 00 00  38 02 40 00 00 00 00 00  |8.......8.@.....|
00000090  38 02 40 00 00 00 00 00  1c 00 00 00 00 00 00 00  |8.@.............|
$
```
### strings
它的作用：打印文件中的可打印字符的字符串。
如果你只是在二进制中寻找可打印的字符，那么 `hexdump` 对于你的使用场景来说似乎有点矫枉过正，你可以使用 `strings` 命令。
在开发软件的时候，各种文本/ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 `strings` 命令将其转储到屏幕上。
```
$ strings /bin/ls
```
### readelf
它的作用：显示有关 ELF 文件的信息。
ELF（ 可执行和可链接文件格式   Executable and Linkable File Format ）是可执行文件或二进制文件的主流格式，不仅是 Linux 系统，也是各种 UNIX 系统的主流文件格式。如果你已经使用了像 `file` 命令这样的工具，它告诉你文件是 ELF 格式，那么下一步就是使用 `readelf` 命令和它的各种选项来进一步分析文件。