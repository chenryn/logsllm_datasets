   64 bytes from 172.25.0.4: seq=1 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.4: seq=2 ttl=64 time=0.067 ms
   64 bytes from 172.25.0.4: seq=3 ttl=64 time=0.082 ms
   --- c4 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.065/0.070/0.082 ms
   / # ping -w 4 container4
   PING container4 (172.25.0.4): 56 data bytes
   64 bytes from 172.25.0.4: seq=0 ttl=64 time=0.065 ms
   64 bytes from 172.25.0.4: seq=1 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.4: seq=2 ttl=64 time=0.067 ms
   64 bytes from 172.25.0.4: seq=3 ttl=64 time=0.082 ms
   --- container4 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.065/0.070/0.082 ms
   ```
   从`container5` 离开，并使用`CTRL-p CTRL-q` 使其保持运行。
### 网络范围的别名示例
链接容器时，无论是使用遗留的`link`方法还是使用用户自定义网络，您指定的任何别名只对指定的容器有意义，并且不能在默认`bridge` 上的其他容器上运行。
另外，如果容器属于多个网络，则给定的链接别名与给定的网络范围一致。 因此，容器可以链接到不同网络中的不同别名，并且别名将不适用于不在同一网络上的容器。
以下示例说明了这些要点。
1. 创建另一个名为`local_alias` 网络：
   ```
   $ docker network create -d bridge --subnet 172.26.0.0/24 local_alias
   76b7dc932e037589e6553f59f76008e5b76fa069638cd39776b890607f567aaa
   ```
2. 接下来，使用别名`foo` 和`bar` 将`container4` 和`container5` 连接到新的网络`local_alias` ：
   ```
   $ docker network connect --link container5:foo local_alias container4
   $ docker network connect --link container4:bar local_alias container5
   ```
3. attach到`container4` 并尝试使用别名`foo` ping `container4` （是的，同一个），然后尝试使用别名`c5` ping容器`container5` ：
   ```
    $ docker attach container4
    / # ping -w 4 foo
    PING foo (172.26.0.3): 56 data bytes
    64 bytes from 172.26.0.3: seq=0 ttl=64 time=0.070 ms
    64 bytes from 172.26.0.3: seq=1 ttl=64 time=0.080 ms
    64 bytes from 172.26.0.3: seq=2 ttl=64 time=0.080 ms
    64 bytes from 172.26.0.3: seq=3 ttl=64 time=0.097 ms
    --- foo ping statistics ---
    4 packets transmitted, 4 packets received, 0% packet loss
    round-trip min/avg/max = 0.070/0.081/0.097 ms
    / # ping -w 4 c5
    PING c5 (172.25.0.5): 56 data bytes
    64 bytes from 172.25.0.5: seq=0 ttl=64 time=0.070 ms
    64 bytes from 172.25.0.5: seq=1 ttl=64 time=0.080 ms
    64 bytes from 172.25.0.5: seq=2 ttl=64 time=0.080 ms
    64 bytes from 172.25.0.5: seq=3 ttl=64 time=0.097 ms
    --- c5 ping statistics ---
    4 packets transmitted, 4 packets received, 0% packet loss
    round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   两个ping都成功了，但子网不同，这意味着网络不同。
   离开`container4`，并使用`CTRL-p CTRL-q` 使其保持运行。
4. 从`isolated_nw` 网络断开`container5` 。 附加到`container4` 并尝试ping `c5` 和`foo` 。
   ```
   $ docker network disconnect isolated_nw container5
   $ docker attach container4
   / # ping -w 4 c5
   ping: bad address 'c5'
   / # ping -w 4 foo
   PING foo (172.26.0.3): 56 data bytes
   64 bytes from 172.26.0.3: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.26.0.3: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.26.0.3: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.26.0.3: seq=3 ttl=64 time=0.097 ms
   --- foo ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   您不能再从`container5` 收到`isolated_nw` 网络上的`container5` 。 但是，您仍然可以使用别名`foo`到达`container4` （从`container4` ）。
   离开`container4`，并使用`CTRL-p CTRL-q` 使其保持运行。
### `docker network` 限制
虽然`docker network` 是控制您的容器使用的网络的推荐方法，但它确实有一些限制。
#### 环境变量注入
环境变量注入是静态的，环境变量在容器启动后无法更改。 遗留的`--link` 标志将所有环境变量共享到链接的容器，但`docker network` 命令没有等效选项。 当您使用`docker network` 将容器连接到网络时，不能在容器之间动态共享环境变量。
#### 使用网络范围的别名
遗留的link提供传出名称解析，隔离在配置别名的容器内。 网络范围的别名不允许这种单向隔离，而是为网络的所有成员提供别名。
以下示例说明了此限制。
1. 在网络`isolated_nw` 创建另一个容器`container6` ，并给它网络别名`app` 。
   ```
   $ docker run --network=isolated_nw -itd --name=container6 --network-alias app busybox
   8ebe6767c1e0361f27433090060b33200aac054a68476c3be87ef4005eb1df17
   ```
2. attach到`container4` 。 尝试通过名称（ `container6` ）和网络别名（ `app` ）ping容器。 请注意，IP地址是一样的。
   ```
   $ docker attach container4
   / # ping -w 4 app
   PING app (172.25.0.6): 56 data bytes
   64 bytes from 172.25.0.6: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.6: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=3 ttl=64 time=0.097 ms
   --- app ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   / # ping -w 4 container6
   PING container5 (172.25.0.6): 56 data bytes
   64 bytes from 172.25.0.6: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.6: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=3 ttl=64 time=0.097 ms
   --- container6 ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   从`container4` 离开，并使用`CTRL-p CTRL-q` 使其保持运行。
3. 将`container6` 连接到`local_alias` 网络，并为其赋予网络范围的别名`scoped-app` 。
   ```
   $ docker network connect --alias scoped-app local_alias container6
   ```
   现在`container6` 在网络`isolated_nw` 中的别名为`app` ，在网络`local_alias` 中别名为`scoped-app` 。
4. 尝试从`container4` （连接到这两个网络）和`container5` （仅连接到`isolated_nw` ）连接到这些别名。
   ```
   $ docker attach container4
   / # ping -w 4 scoped-app
   PING foo (172.26.0.5): 56 data bytes
   64 bytes from 172.26.0.5: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.26.0.5: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.26.0.5: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.26.0.5: seq=3 ttl=64 time=0.097 ms
   --- foo ping statistics ---
   4 packets transmitted, 4 packets received, 0% packet loss
   round-trip min/avg/max = 0.070/0.081/0.097 ms
   ```
   离开`container4` ，并使用`CTRL-p CTRL-q` 使其保持运行。
   ```
   $ docker attach container5
   / # ping -w 4 scoped-app
   ping: bad address 'scoped-app'
   ```
   离开`container5`，并使用`CTRL-p CTRL-q` 使其保持运行。
   这表明将别名仅在定义它的网络上生效，只有连接到该网络的容器才能访问该别名。
#### 将多个容器解析为一个别名
多个容器可在同一网络内共享相同的网络范围别名。 这提供了一种DNS轮询（round-robbin）高可用性。 当使用诸如Nginx这样的软件时，这可能不可靠，Nginx通过IP地址来缓存客户端。
以下示例说明了如何设置和使用网络别名。
> **注意** ：使用网络别名进行DNS轮询高可用的用户应考虑使用swarm服务。 Swarm服务提供了开箱即用的、类似的负载均衡功能。 如果连接到任何节点，即使是不参与服务的节点。 Docker将请求发送到正在参与服务的随机节点，并管理所有的通信。
1. 在`isolated_nw` 中启动`container7` ，别名与`container6`相同，即`app` 。
   ```
   $ docker run --network=isolated_nw -itd --name=container7 --network-alias app busybox
   3138c678c123b8799f4c7cc6a0cecc595acbdfa8bf81f621834103cd4f504554
   ```
   当多个容器共享相同的别名时，其中一个容器将解析为别名。 如果该容器不可用，则另一个具有别名的容器将被解析。 这提供了群集中的高可用性。
   > **注意** ：**在IP地址解析时，所选择的容器是不完全可预测的。 因此，在下面的练习中，您可能会在一些步骤中获得不同的结果。** 如果步骤假定返回的结果是`container6` 但是您收到`container7` ，这就是为什么。
2. 从`container4` 开始连续ping到`app` 别名。
   ```
   $ docker attach container4
   $ ping app
   PING app (172.25.0.6): 56 data bytes
   64 bytes from 172.25.0.6: seq=0 ttl=64 time=0.070 ms
   64 bytes from 172.25.0.6: seq=1 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=2 ttl=64 time=0.080 ms
   64 bytes from 172.25.0.6: seq=3 ttl=64 time=0.097 ms
   ...
   ```
   返回的IP地址属于`container6` 。
3. 在另一个终端，停止`container6` 。
   ```
    $ docker stop container6 
   ```
   在连接到`container4` 的终端 ，观察`ping`输出。 当`container6`关闭时，它将暂停，因为`ping` 命令在首次调用时查找IP，并且发现该IP不再可用。 但是， `ping`命令在默认情况下具有非常长的超时时间，因此不会发生错误。
4. 使用`CTRL+C`退出`ping`命令并再次运行。
   ```
   $ ping app