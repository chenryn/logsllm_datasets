I believe this is a typical use case, we allow a user to type a search string
and then use it to search against a set of fields. Unfortunately, currently
that doesn't allow to include integer fields (say, document ID) in this set.
Following a simple example:
    $ curl -XGET http://localhost:9200/gallery/item/_search -d '{query:
      {multi_match: {fields: ["id", "name"], query: "test"}}
    }'
which gives:  
_{"error":"SearchPhaseExecutionException[Failed to execute phase [query],
total failure; shardFailures {[LJs6UPnTQ_u-Ws0SAna0zA][gallery][0]:
SearchParseException[[gallery][0]: from[-1],size[-1]: Parse Failure [Failed to
parse source [{"query": {"multi_match": {"fields": ["id", "name"], query:
"test"}}}]]]; nested: NumberFormatException[For input string: "test"];
}{[LJs6UPnTQ_u-Ws0SAna0zA][gallery][1]: SearchParseException[[gallery][1]:
from[-1],size[-1]: Parse Failure [Failed to parse source [{"query":
{"multi_match": {"fields": ["id", "name"], query: "test"}}}]]]; nested:
NumberFormatException[For input string: "test"]; }]","status":500}_
I did read the discussions in Google Groups on that matter and I agree that
it's not really correct to simply ignore those errors. However, since it
**is** a typical use case which is very commonly used indeed (for instance,
that's how Django Admin search_fields works), I believe we need to have a
multi_match query option (off by default) which will allow such queries to
complete.
Supposedly, that will be something like:
    $ curl -XGET http://localhost:9200/gallery/item/_search -d '{query:
      {multi_match: {fields: ["id", "name"], query: "test", "match_field_types": true}}
    }'  # automatically remove 'id' from fields because of the incompatible type