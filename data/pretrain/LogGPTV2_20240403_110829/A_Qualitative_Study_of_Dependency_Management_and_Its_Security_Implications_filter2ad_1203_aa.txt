title:A Qualitative Study of Dependency Management and Its Security Implications
author:Ivan Pashchenko and
Duc Ly Vu and
Fabio Massacci
A Qualitative Study of Dependency Management and Its
Security Implications
Ivan Pashchenko
PI:EMAIL
University of Trento, IT
Duc-Ly Vu
PI:EMAIL
University of Trento, IT
Fabio Massacci
PI:EMAIL
University of Trento, IT
Vrije Universiteit Amsterdam, NL
ABSTRACT
Several large scale studies on the Maven, NPM, and Android ecosys-
tems point out that many developers do not often update their
vulnerable software libraries thus exposing the user of their code
to security risks. The purpose of this study is to qualitatively in-
vestigate the choices and the interplay of functional and security
concerns on the developers’ overall decision-making strategies for
selecting, managing, and updating software dependencies.
We run 25 semi-structured interviews with developers of both
large and small-medium enterprises located in nine countries. All in-
terviews were transcribed, coded, and analyzed according to applied
thematic analysis. They highlight the trade-offs that developers are
facing and that security researchers must understand to provide an
effective support to mitigate vulnerabilities (for example bundling
security fixes with functional changes might hinder adoption due
to lack of resources to fix functional breaking changes).
We further distill our observations to actionable implications on
what algorithms and automated tools should achieve to effectively
support (semi-)automatic dependency management.
CCS CONCEPTS
• Security and privacy → Vulnerability management; Hu-
man and societal aspects of security and privacy; • Software
and its engineering → Software creation and management.
KEYWORDS
Dependency management; Security; Vulnerable Dependencies; Qual-
itative Study; Interviews
ACM Reference Format:
Ivan Pashchenko, Duc-Ly Vu, and Fabio Massacci. 2020. A Qualitative Study
of Dependency Management and Its Security Implications. In Proceedings of
the 2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 19 pages. https://doi.org/10.1145/3372297.3417232
1 INTRODUCTION
Vulnerable dependencies are a known problem in the software
ecosystems [25, 33], because free and open-source software (FOSS)
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417232
libraries are highly interconnected, and developers often do not
update their project dependencies, even if they are affected by
known security vulnerabilities [11, 25].
A handful of studies report that developers do not update depen-
dencies in their projects since they are not aware of dependency
issues [6] or do not want to break their projects [7, 16]. Although
functionality and security appear to be essential factors that affect
developers’ decisions [3], those studies mainly focus on functional-
ity aspects, and therefore, provide limited insights on the impact of
security concerns on developers’ reasoning.
Other studies also show this tension between functionality and
security. On the Android ecosystem, mobile app developers do not
consider security as a top-priority task [11]. A later study by the
same group [20] explained the reason behind it as a major clash
with functionality: the ‘easy’ updates would actually break around
50% of dependent projects.
A key observation is that several of those studies are about
ecosystems that do not feature a central place for storing and man-
aging app dependencies. Developers with central dependency man-
agement system, like Maven, NPM, or PyPI, might have a very
different approach towards dependencies of their applications.
For example, an initial quantitative study of the Maven ecosys-
tem [25] analyzed more than 4600 Github repositories and provided
yet another evidence that developers keep their project dependen-
cies outdated. However, a later study [33] showed that several of the
reported vulnerabilities were in test/development libraries (i.e., not
shipped with the product), and therefore, irrelevant. So, not updat-
ing the library was not due to a breaking conflict with functionality
but a perfectly rational decision.
The goal of our paper is to provide a sound qualitative analysis of
the motivation of developers between the rigid format of surveys
(e.g., [11]) and the anecdotal examples that complement quantitative
studies on dependencies (e.g., [25]).
investigated the following research questions:
Following the process of semi-structured interviews we have
• RQ1: How do developers select dependencies to include into
their projects, and where (if at all) does security play a role?
• RQ2: Why do developers decide to update software depen-
dencies and how do security concerns affect their decisions?
• RQ3: Which methods, techniques, or automated analysis
tools (e.g., Github Security Alerts) do developers apply while
managing (vulnerable) software dependencies?
• RQ4: Which mitigations do developers apply for vulnerable
dependencies with no fixed version available?
This paper has the following contributions:
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1513• qualitative investigation of the choices and the interplay
of functional and security concerns on the developers’ over-
all decision-making strategies for selecting, managing, and
updating software dependencies
• possible implications for research and practice to help im-
proving the security and the support of (semi-)automatic
dependency management.
Our qualitative study is based on semi-structured interviews
with 25 enterprise developers, who are involved in development of
web, embedded, mobile, or desktop applications. Some interviewees
also create their own libraries (i.e. supply dependencies to other
projects) but, to keep focus, our interviews investigated their role
in the demand of libraries. The interviewees have at least three
years of professional experience at various positions spanning from
regular developers to company CTOs, including the coordinator of
a Java Users’ Group and a lead developer of a Linux distribution.
They come from 25 companies located in nine different countries.
Each interview (lasting 30’ on average) was recorded and tran-
scribed. The transcripts were anonymized and sent back to the
interviewees for confirmation. Each conversation was then coded
along the lines of applied thematic analysis to provide a quantitative
assessment of the collected qualitative data.
This paper illustrates the insights with quotations from the in-
terviewees to provide a better grasp of developers’ reasoning while
managing software dependencies and how security concerns affect
their decisions1. After completing the analysis, we also returned
the overall findings to the participating developers to check that
we have not misinterpreted their thoughts.
2 TERMINOLOGY
We rely on the terminology established between practitioners:
• A library is a separately distributed software component,
which functionality might be reused by other software projects.
• A dependency is a library some functionality of which is
reused by other software projects. Although “dependency”
logically relates to a relation, we adopt the term as it is used
(and abused) by software developers2 so we can correctly
communicate the meaning of their thoughts delivered in the
form of quotations later in the paper.
• Dependency management is the process of modification of the
configuration of a project by updating (i.e., adoption of new
versions of currently used dependencies) or adding/removing
dependencies. To manage dependencies, software developers
only need to modify own code of their project.
• Dependency maintenance implies access and modification of
the source code of project dependencies. For dependency
maintenance, developers typically have to access the depen-
dency source code repositories (e.g., Github repositories) and
contribute to the dependency projects (e.g., by creating pull
requests of the proposed changes).
1As this is a purely qualitative study, the presented findings may not necessarily
generalize to other ecosystems and the proposed implications encourage additional
investigations to confirm their validity.
2https://maven.apache.org/guides/introduction/introduction-to-the-pom.html
3 BACKGROUND
To understand the state-of-the-art we looked in Elsevier Scopus for
papers published between 2006 and 2019 that report findings on one
of the code groups identified in Section 2 and that mention surveys,
interviews, case or qualitative studies, etc. After a preliminary
selection of 159 articles, we narrowed it down to 25 (including
suggestions from anonymous reviewers). A comparative analysis
of all papers is available in Table 7 in the Appendix.
3.1 Dependency management and mitigation
of dependency issues.
Many empirical studies [2, 8, 9, 19, 22, 25, 26, 28, 33, 35, 36, 44]
investigate the topic of security vulnerabilities introduced by soft-
ware dependencies. Cox et al. [9] introduced the notion of “de-
pendency freshness” and reported that fresh dependencies are
more likely to be free from security vulnerabilities. However, vari-
ous studies of different dependency ecosystems, i.e., Java [25, 33],
JavaScript [19, 22, 44], Ruby [22], Rust [22], etc., provide the evi-
dence that developers often do not update software dependencies.
Derr et al. [11] surveyed Android developers to identify their us-
age of libraries and requirements for more effective library updates.
When updating their app libraries, developers consider bug fixing
to be the most important reason while security played a minor role.
Developers are wary of updating their dependencies if they work as
intended. A follow up quantitative study [20] found that the most
likely reason that stops developers from updating dependencies are
breaking changes due to deprecated functions, changed data struc-
tures, or entangled dependencies between different libraries and
even the host app. Limited insights are provided on the developers’
motivations for performing an update of each kind (functionality
or security). Moreover, since the study presented the findings from
the Android ecosystem that does not have a central dependency
management system, like Maven Central, NPM, or PyPI, the results
might not generalize to the developers of other ecosystems.
Considering the ecosystems that have a centered dependency
management system, Haenni et al. [16] reported the impact of
changes to be one of the main developers’ concerns when updating
their dependencies. Later, Bogart et al. [6] observed that develop-
ers often find it challenging to be aware of potentially significant
changes to the dependencies of their projects and prefer to wait
for the dependencies to break rather than act proactively about
them. In their later study [7], breaking changes are the main factor
that prevents developers from updating their project dependencies.
Also, the authors observed that developers sometimes do not update
dependencies in their projects even though this is recommended by
the policy of their company. However, the studies took into account
only the effect of functionality issues introduced by dependencies
and did not consider the impact of security concerns.
Kula et al. [25] is the only paper to study the influence of security
advisories on dependency updatability we are aware of. The authors
found no correlation between the presence of security advisories
and dependencies update on FOSS projects in Github. An anecdotal
survey of developers showed that some were not aware of security
advisories and existing security fixes. However, the authors only
surveyed FOSS developers who did not update dependencies of their
projects, and therefore, the reported results might not generalize
Session 5C: Forensics CCS '20, November 9–13, 2020, Virtual Event, USA1514when applied to all developers (e.g., enterprise developers). Also,
the study reported no in-depth qualitative analysis (e.g., no coding,
publishing only some quotations from email responses). Moreover,
a recent study by Pashchenko et al. [33] suggested that the results
presented in [25] might be affected by false positives as the authors
considered vulnerable dependencies used only for testing purposes.
Summary: Current qualitative dependency studies suggest that
dependency issues might affect developers’ decisions, however, the
studies focus mainly on functionality issues, and therefore, provide
limited insights on whether security concerns have any impact on
the developers’ decisions for the selection of new dependencies to
be included in software projects (RQ1), their further management
(RQ2), and how developers mitigate bugs and vulnerabilities in case
there is no fixed version of a dependency available (RQ4).
3.2 Technologies/tools for automating the
software development process.
Several papers studied the adoption of static analysis tools that
allow developers to identify both functionality and security issues
in the own code of their software projects. For example, Vassallo
et al. [43] investigated the impact of the development context on
the selection of static analysis tools. Tools are adopted in three
primary development contexts: local environment, code review,
and continuous integration. However, Johnson et al. [21] identified
that lack of or weak support for teamwork or collaboration, a high
number of false positives, and low-level warnings are the main
barriers that prevent developers’ adoption. These studies clarify
some issues that developers face while using automated tools but
might not apply to the developers’ perceptions of using dependency
analysis tools that do not actually analyze code.
Mirhosseini and Parnin [31] is the only study that analyzed how
developers use dependency analysis tools. The authors quantita-
tively studied whether automated pull requests encourage develop-
ers to update their dependencies: projects that used automatically
generated pull requests or badges updated dependencies more fre-
quently, but developers also ignored almost two-thirds of such pull
requests due to potential breaking changes. As the study consid-
ered functionality aspects, we don’t know whether security may
change the developers’ reactions to automated notifications. The
study focused on JavaScript developers who used greenkeeper.io as
a dependency management tool, so its findings might not apply to
other dependency management tools.
Summary: The qualitative studies of technologies and tools for
automating the software engineering process report interesting
observations regarding the developers’ experience, but current
studies that involve dependency analysis tools focus mostly on
functionality aspects, and therefore, provide limited insights on
how developers can use them to discover and mitigate security
issues introduced by software dependencies (RQ3, RQ4).
3.3 Information needs and decision making
during software development
Several studies [5, 16, 23, 25, 27, 34, 38, 39] describe the information
needs and decision-making strategies of industrial practitioners.
For example, Unphon and Dittrich [41] observed that an architect
or a key developer plays a central role in designing and revising
Table 1: Descriptive statistics of the number of interview par-
ticipants in the selected papers
Note, that we do not report the data for the mailing lists study type, since we have
participants number only for one study: Kula et al. [25] involved 16 developers in their
study, while Sharif et al. [38] studied mailing lists from 6 FOSS projects but did not report
the number of participants.
#Developers
median
𝜇
12.1
119.1
8.7
𝜎
6.4
92.5
6.4
12
116
6
Study type
interviews
surveys
observations
#Papers
16
7
3
Q25%
6.8
52
5
Q75%
15
163
11
software architecture. Pano et al. [32] reported that a combina-
tion of four actors (customer, developer, team, and team leader),
performance size, and automation drive the choice of a JavaScript
framework. Again these papers capture information needs and be-
havioral patterns of enterprise developers but do not report security
concerns on decision-making preferences.
Assal and Chiasson [3] surveyed software developers to study
the interplay between developers and software security processes.
The authors observed that the security effort allocated to the im-
plementation stage is significantly higher than in the code analysis,
testing, and review stages. The paper provides a good insight into
human aspects of developers’ behavior towards their own code but
does not tackle software dependencies (i.e., other people’s code).
Linden [42] studied the developers’ perception of security in
various development activities, both with surveys and in a labora-
tory exercise. The authors found that developers mainly consider
security in coding activities, such as writing code or selection of
external SDKs. However, the study provides limited insights about
developers’ reasoning while working with dependencies. More-
over, the findings are reported based on observing and surveying
only Android developers, and therefore, might not apply for other
development environments, especially those having a central de-
pendency management system, like NPM or PyPI.
Summary: The studies on information needs provide useful in-
sights on developers’ decision-making strategies, however, the exist-
ing studies do not show how the developers’ actions and decisions
change in the presence of security issues introduced by software
dependencies (RQ1 and RQ2).
4 METHODOLOGY
Our goal is to study the developers’ perceptions of software de-