---
author: A. Jesse
category: 软件开发
comments_data:
- date: '2019-06-21 23:01:56'
  message: "您在百度可以搜到的 果敢老街位于云南省 临沧市 镇康县 南伞镇 出个国门 10公里就到了 \r\n我们公司的实体 就在 缅甸果敢老街
    双凤塔前面 80米左右 随时你可以视频验证呢\r\n公司是经过这边政府合法营业，腾龙公司实力强大资金雄厚&nbsp;&nbsp;官网的顾客朋友，都可以放心的娱乐，不会像那些假平台黑你的钱，其一：一个投资上亿的公司每天拥有上万个网投客人，这样的公司是不会骗你那点小钱的，因为这么大的一个公司怎么可能会因为你的那点钱自毁名声呢。其二：缅甸的公司都是经过政府的审核以后才允许开的，政府把公司视为最大的经济核心，就算有心玩假，"
  postip: 112.114.100.51
  username: 来自云南临沧的 Chrome 55.0|Windows 10 用户
- date: '2019-07-05 11:18:22'
  message: 翻译的真好，新译者学习了。
  postip: 58.58.197.174
  username: qfzy1233 [Chrome 77.0|Windows 10]
count:
  commentnum: 2
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 8998
date: '2019-05-26 13:42:16'
editorchoice: true
excerpt: 负责任的库作者与其用户的十个约定。
fromurl: https://opensource.com/article/19/5/api-evolution-right-way
id: 10900
islctt: true
largepic: /data/attachment/album/201905/26/134131jnymeg7t7gmo6qcy.jpg
permalink: /article-10900-1.html
pic: /data/attachment/album/201905/26/134131jnymeg7t7gmo6qcy.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 负责任的库作者与其用户的十个约定。
tags:
- Python
- 类库
thumb: false
title: API 演进的正确方式
titlepic: true
translator: MjSeven
updated: '2019-05-26 13:42:16'
---
> 
> 负责任的库作者与其用户的十个约定。
> 
> 
> 
![](/data/attachment/album/201905/26/134131jnymeg7t7gmo6qcy.jpg)
想象一下你是一个造物主，为一个生物设计一个身体。出于仁慈，你希望它能随着时间进化：首先，因为它必须对环境的变化作出反应；其次，因为你的智慧在增长，你对这个小东西想到了更好的设计，它不应该永远保持一个样子。
![Serpents](/data/attachment/album/201905/26/134220rxfsxpef7pmk1wzy.jpg "Serpents")
然而，这个生物可能有赖于其目前解剖学的特征。你不能无所顾忌地添加翅膀或改变它的身材比例。它需要一个有序的过程来适应新的身体。作为一个负责任的设计者，你如何才能温柔地引导这种生物走向更大的进步呢？
对于负责任的库维护者也是如此。我们向依赖我们代码的人保证我们的承诺：我们会发布 bug 修复和有用的新特性。如果对库的未来有利，我们有时会删除某些特性。我们会不断创新，但我们不会破坏使用我们库的人的代码。我们怎样才能一次实现所有这些目标呢？
### 添加有用的特性
你的库不应该永远保持不变：你应该添加一些特性，使你的库更适合用户。例如，如果你有一个爬行动物类，并且如果有个可以飞行的翅膀是有用的，那就去添加吧。
```
class Reptile:
    @property
    def teeth(self):
        return 'sharp fangs'
    # 如果 wings 是有用的，那就添加它!
    @property
    def wings(self):
        return 'majestic wings'
```
但要注意，特性是有风险的。考虑 Python 标准库中以下功能，看看它出了什么问题。
```
bool(datetime.time(9, 30)) == True
bool(datetime.time(0, 0)) == False
```
这很奇怪：将任何时间对象转换为布尔值都会得到 True，但午夜时间除外。（更糟糕的是，时区感知时间的规则更加奇怪。）
我已经写了十多年的 Python 了，但直到上周才发现这条规则。这种奇怪的行为会在用户代码中引起什么样的 bug？
比如说一个日历应用程序，它带有一个创建事件的函数。如果一个事件有一个结束时间，那么函数也应该要求它有一个开始时间。
```
def create_event(day,
                 start_time=None,
                 end_time=None):
    if end_time and not start_time:
        raise ValueError("Can't pass end_time without start_time")
    # 女巫集会从午夜一直开到凌晨 4 点
create_event(datetime.date.today(),
             datetime.time(0, 0),
             datetime.time(4, 0))
```
不幸的是，对于女巫来说，从午夜开始的事件无法通过校验。当然，一个了解午夜怪癖的细心程序员可以正确地编写这个函数。
```
def create_event(day,
                 start_time=None,
                 end_time=None):
    if end_time is not None and start_time is None:
        raise ValueError("Can't pass end_time without start_time")
```
但这种微妙之处令人担忧。如果一个库作者想要创建一个伤害用户的 API，那么像午夜的布尔转换这样的“特性”很有效。
![Man being chased by an alligator](/data/attachment/album/201905/26/134226k5f1mglbupccp6px.jpg "Man being chased by an alligator")
但是，负责任的创建者的目标是使你的库易于正确使用。
这个功能是由 Tim Peters 在 2002 年首次编写 datetime 模块时造成的。即时是像 Tim 这样的奠基 Python 的高手也会犯错误。[这个怪异之处后来被消除了](https://bugs.python.org/issue13936)，现在所有时间的布尔值都是 True。
```
# Python 3.5 以后
bool(datetime.time(9, 30)) == True
bool(datetime.time(0, 0)) == True
```
不知道午夜怪癖的古怪之处的程序员现在可以从这种晦涩的 bug 中解脱出来，但是一想到任何依赖于古怪的旧行为的代码现在没有注意变化，我就会感到紧张。如果从来没有实现这个糟糕的特性，情况会更好。这就引出了库维护者的第一个承诺：
#### 第一个约定：避免糟糕的特性
最痛苦的变化是你必须删除一个特性。一般来说，避免糟糕特性的一种方法是少添加特性！没有充分的理由，不要使用公共方法、类、功能或属性。因此：
#### 第二个约定：最小化特性
特性就像孩子：在充满激情的瞬间孕育，但是它们必须要支持多年（LCTT 译注：我怀疑作者在开车，可是我没有证据）。不要因为你能做傻事就去做傻事。不要画蛇添足！
![Serpents with and without feathers](/data/attachment/album/201905/26/134229yys47cug7acisiyy.jpg "Serpents with and without feathers")
但是，当然，在很多情况下，用户需要你的库中尚未提供的东西，你如何选择合适的功能给他们？以下另一个警示故事。
### 一个来自 asyncio 的警示故事
你可能知道，当你调用一个协程函数，它会返回一个协程对象：
```
async def my_coroutine():
    pass
print(my_coroutine())
```
```
```
你的代码必须 “ 等待   await ” 这个对象以此来运行协程。人们很容易忘记这一点，所以 asyncio 的开发人员想要一个“调试模式”来捕捉这个错误。当协程在没有等待的情况下被销毁时，调试模式将打印一个警告，并在其创建的行上进行回溯。
当 Yury Selivanov 实现调试模式时，他添加了一个“协程装饰器”的基础特性。装饰器是一个函数，它接收一个协程并返回任何内容。Yury 使用它在每个协程上接入警告逻辑，但是其他人可以使用它将协程转换为字符串 “hi!”。
```
import sys
def my_wrapper(coro):
    return 'hi!'
sys.set_coroutine_wrapper(my_wrapper)
async def my_coroutine():
    pass
print(my_coroutine())
```
```
hi!
```
这是一个地狱般的定制。它改变了 “ 异步   async “ 的含义。调用一次 `set_coroutine_wrapper` 将在全局永久改变所有的协程函数。正如 [Nathaniel Smith 所说](https://bugs.python.org/issue32591)：“一个有问题的 API” 很容易被误用，必须被删除。如果 asyncio 开发人员能够更好地按照其目标来设计该特性，他们就可以避免删除该特性的痛苦。负责任的创建者必须牢记这一点：
#### 第三个约定：保持特性单一
幸运的是，Yury 有良好的判断力，他将该特性标记为临时，所以 asyncio 用户知道不能依赖它。Nathaniel 可以用更单一的功能替换 `set_coroutine_wrapper`，该特性只定制回溯深度。
```
import sys
sys.set_coroutine_origin_tracking_depth(2)
async def my_coroutine():
    pass
print(my_coroutine())
```
```
RuntimeWarning:'my_coroutine' was never awaited
Coroutine created at (most recent call last)
    File "script.py", line 8, in 
        print(my_coroutine())
```
这样好多了。没有可以更改协程的类型的其他全局设置，因此 asyncio 用户无需编写防御代码。造物主应该像 Yury 一样有远见。
#### 第四个约定：标记实验特征“临时”
如果你只是预感你的生物需要犄角和四叉舌，那就引入这些特性，但将它们标记为“临时”。
![Serpent with horns](/data/attachment/album/201905/26/134230k6rhvv5o9aov9aw5.jpg "Serpent with horns")
你可能会发现犄角是无关紧要的，但是四叉舌是有用的。在库的下一个版本中，你可以删除前者并标记后者为正式的。
### 删除特性
无论我们如何明智地指导我们的生物进化，总会有一天想要删除一个正式特征。例如，你可能已经创建了一只蜥蜴，现在你选择删除它的腿。也许你想把这个笨拙的家伙变成一条时尚而现代的蟒蛇。
![Lizard transformed to snake](/data/attachment/album/201905/26/134235hhu4kk9984kknk9k.jpg "Lizard transformed to snake")
删除特性主要有两个原因。首先，通过用户反馈或者你自己不断增长的智慧，你可能会发现某个特性是个坏主意。午夜怪癖的古怪行为就是这种情况。或者，最初该特性可能已经很好地适应了你的库环境，但现在生态环境发生了变化，也许另一个神发明了哺乳动物，你的生物想要挤进哺乳动物的小洞穴里，吃掉里面美味的哺乳动物，所以它不得不失去双腿。
![A mouse](/data/attachment/album/201905/26/134240iiixxm7p7pdp8xzw.jpg "A mouse")
同样，Python 标准库会根据语言本身的变化删除特性。考虑 asyncio 的 Lock 功能，在把 `await` 作为一个关键字添加进来之前，它一直在等待：
```
lock = asyncio.Lock()
async def critical_section():
    await lock
    try:
        print('holding lock')
    finally:
        lock.release()
```
但是现在，我们可以做“异步锁”：
```
lock = asyncio.Lock()
async def critical_section():
    async with lock: