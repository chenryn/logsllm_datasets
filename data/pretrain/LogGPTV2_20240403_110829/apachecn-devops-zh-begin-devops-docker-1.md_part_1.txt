# 一、映像和容器
本课将讲述关于容器化的基本概念，作为我们稍后构建的映像和容器的基础。我们还将了解 Docker 如何以及为什么参与 DevOps 生态系统。在开始之前，我们将了解虚拟化与 Docker 中的容器化有何不同。
# 课程目标
本课结束时，您将能够:
*   描述 Docker 如何改进 DevOps 工作流
*   解释 Dockerfile 语法
*   构建映像
*   设置容器和映像
*   设置本地动态环境
*   在 Docker 容器中运行应用
*   获得 Docker 如何通过 Docker Hub 管理映像的基本概述
*   部署 Docker 映像到 Docker 中心
# 虚拟化与容器化
此框图概述了典型的虚拟机设置:
![Virtualization versus Containerization](img/image01_01a.jpg)
在虚拟机中，物理硬件是抽象的，因此我们有许多服务器运行在一台服务器上。虚拟机管理程序有助于做到这一点。
虚拟机有时确实需要时间启动，并且容量昂贵(它们的大小可以是千兆字节)，尽管它们相对于容器的最大优势是能够运行不同的 Linux 发行版，例如 CentOS，而不仅仅是 Ubuntu:
![Virtualization versus Containerization](img/image01_02a.jpg)
在容器化中，只有应用层(代码和依赖项打包的地方)被抽象出来，使得可以让许多容器在同一个操作系统内核上运行，但在不同的用户空间上运行。
容器占用空间少，启动快。这使得开发更加容易，因为您可以动态删除和启动容器，而不用考虑您有多少服务器或开发人员工作空间。
让我们从快速概述 Docker 如何在 DevOps 工作流和 Docker 环境中发挥作用开始这一课。
# Docker 如何改进开发工作流程
DevOps 是一种心态，一种文化，一种思维方式。最终目标是尽可能改进和自动化流程。用外行人的话来说，DevOps 要求一个人以最懒惰的角度思考，这使得大多数(如果不是全部的话)过程尽可能自动化。
Docker 是一个开源容器化平台，它改善了开发生命周期的运输过程。请注意，它既不是现有平台的替代品，也不是组织想要的替代品。
Docker 像 Puppet 一样抽象了配置管理的复杂性。有了这种设置，shell 脚本就变得没有必要了。Docker 还可以用于小型或大型部署，从 hello world 应用到成熟的生产服务器。
作为不同级别的开发人员，无论是初学者还是专家，您可能都使用过 Docker，但您甚至没有意识到这一点。如果您已经设置了一个连续的集成管道来在线运行您的测试，大多数服务器使用 Docker 来构建和运行您的测试。
Docker 因其敏捷性在技术社区获得了大量支持，因此，许多组织都在为其服务运行容器。此类组织包括以下组织:
*   持续集成和持续交付平台，如 Circle CI、Travis CI 和 Codeship
*   诸如**亚马逊网络服务****【AWS】**和**谷歌云平台****【GCP】**等云平台允许开发者在容器外运行应用
*   思科和阿里巴巴集团也在容器中运行他们的一些服务
Docker 在 DevOps 工作流程中的地位包括但不限于以下方面:
### 注
开发工作流中 Docker 用例的例子。
统一需求是指使用单个配置文件。Docker 将需求抽象并限制在一个 Dockerfile 文件中。
操作系统的抽象意味着人们不需要担心构建操作系统，因为存在预构建的映像。
Velocity 必须定义一个 Dockerfile 并构建容器来进行测试，或者使用一个已经构建的映像而不编写 Dockerfile。Docker 允许开发团队通过 shell 脚本避免在陡峭的学习曲线上投资，因为“自动化工具 X”太复杂了。
## 回顾 Docker 环境
我们更早地了解了容器化的基本原理。请允许我强调 Docker 为我们带来的替代工作流程。
正常情况下，我们有两部分工作的应用:项目代码库和配置脚本。代码库是应用代码。它由版本控制管理，托管在 GitHub 和其他平台中。
配置脚本可以是在主机上运行的简单外壳脚本，主机可以是从 Windows 工作站到云中完全专用的服务器的任何位置。
使用 Docker 不会干扰项目代码库，但会在供应方面进行创新，提高工作流和交付速度。这是 Docker 如何实现这一点的示例设置:
![Recap of the Docker Environment](img/image01_03a.jpg)
文件取代了供应脚本的位置。两者相结合(项目代码和 Dockerfile)就形成了 **Docker 映像。**Docker 映像可以作为应用运行。这个来源于 Docker 映像的运行中的应用被称为 **Docker 容器。**
Docker 容器允许我们在计算机上的全新环境中运行应用，这是完全一次性的。这是什么意思？
这意味着我们能够在计算机上声明和运行 Linux 或任何其他操作系统，然后在其中运行我们的应用。这也强调了我们可以根据需要多次构建和运行容器，而不会干扰计算机的配置。
借此，我给大家带来了四个关键词:**形象****容器****建造****奔跑**。接下来，我们将了解 Docker CLI 的本质。
# 基本 Docker 终端命令
打开命令提示符，检查 Docker 是否安装在您的工作站中。在您的终端上输入命令`docker`应显示以下内容:
![Basic Docker Terminal Commands](img/image01_04a.jpg)
这是 Docker 的可用子命令列表。要了解每个子命令的作用，请在终端上输入`docker-subcommand –help`:
![Basic Docker Terminal Commands](img/image01_05a.jpg)
运行`docker info`并注意以下事项:
*   容器
*   形象
*   服务器版本
![Basic Docker Terminal Commands](img/image01_06a.jpg)
此命令显示系统范围的信息。服务器版本号有时很重要，尤其是当新版本引入不向后兼容的东西时。Docker 的社区版有稳定的边缘版本。
我们现在来看几个常用的命令。
该命令在 **Docker 中心**搜索映像:
```
docker search  (for example, docker search ubuntu)
```
Docker Hub 是默认的 Docker 注册表。Docker 注册表保存命名的 Docker 映像。Docker Hub 基本上就是“Docker 映像的 GitHub”。早些时候，我们看到运行一个 Ubuntu 容器而不构建一个；这是 Ubuntu 映像存储和版本控制的地方:
![Basic Docker Terminal Commands](img/image01_07a.jpg)
“有私人的 Docker 注册中心，重要的是你现在要意识到这一点。”？Docker 中心在 hub.docker.com。一些图片在[store.docker.com](http://store.docker.com)托管，但 Docker Store 包含官方图片。然而，它主要关注 Docker 映像应用商店的商业方面，并提供工作流供使用。
寄存器页面如下所示:
![Basic Docker Terminal Commands](img/image01_08a.jpg)
登录页面如下所示:
![Basic Docker Terminal Commands](img/image01_09a.jpg)
从的结果可以看出用户是如何通过星星的数量来给图片打分的。你也可以判断映像是否是官方的。这意味着映像由注册表升级，在本例中是 Docker Hub。建议新的 Docker 用户使用官方映像，因为它们有很好的文档，安全，促进最佳实践，并且是为大多数用例设计的。一旦你确定了一个映像，你就需要在本地拥有它。
### 注
确保您能够从 Docker Hub 中搜索至少一个映像。映像种类从操作系统到库，如 Ubuntu、Node.js 和 Apache。
此命令允许您从 Docker Hub 搜索:
```
docker search 
```
比如`docker search ubuntu`。
此命令将映像从注册表中提取到您的本地计算机:
```
docker pull
```
比如`docker pull ubuntu`。
该命令一运行，您就会注意到它使用的是默认标签:`latest`。在 Docker Hub 中，您可以看到标签列表。对于**乌班图**，它们在此列出:[https://hub.docker.com/r/library/ubuntu/](https://hub.docker.com/r/library/ubuntu/)加上它们各自的 Docker 文件:
![Basic Docker Terminal Commands](img/image01_010a.jpg)
从 https://hub.docker.com/r/library/ubuntu/下载 Docker Hub 上的 Ubuntu 映像配置文件。
## 活动 1 —利用 Docker 拉动命令
让你熟悉`docke`或`pull`命令。
本活动的目标是通过运行列出的命令，以及在探索过程中通过操纵构建的容器寻求其他命令的帮助，来深入了解`docker-pull` CLI。
1.  Docker 启动并运行了吗？在终端或命令行应用上键入`docker`。
2.  该命令用于从 Docker Hub `.`
    ```
    docker pull
    ```
    中拉出映像
映像种类从操作系统到库，如 Ubuntu、Node.js 和 Apache。此命令允许您从 Docker Hub 中提取映像:
比如`docker pull ubuntu`。
该命令列出了我们在本地拥有的 Docker 映像:
*   `docker images`
当我们运行该命令时，如果我们已经从 Docker Hub 中提取了映像，我们将能够看到映像列表:
![Activity 1 — Utilizing the docker pull Command](img/image01_11a.jpg)
它们是根据存储库、标签、映像标识、创建日期和大小列出的。存储库只是映像名称，除非它来自不同的注册表。在这种情况下，你会有一个没有`http://`和**顶级域名(TLD)** 的网址，比如来自 Heroku 注册表的`>registry.heroku.com/`。
该命令将检查名为`hello-world`的映像是否存在于本地:
```
docker run 
```
例如`docker run hello-world`:
![Activity 1 — Utilizing the docker pull Command](img/image01_12a.jpg)
如果映像不是本地的，默认情况下，它将从默认注册表 Docker Hub 中取出，并作为容器运行。