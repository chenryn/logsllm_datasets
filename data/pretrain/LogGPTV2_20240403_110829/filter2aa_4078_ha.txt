教育， 用 户还是常常使用极为脆弱的密码。 如果攻击者能够获得授权系统用户 的列表， 那么他们常
常能够快速找出 正确的用 户 名(在大多数网络中， 用 户名包含用户 名字的第一个字母， 后面紧跟着他
们 的姓氏部分)。 利用这些信息， 攻击者就能够开始对用户 的密码进行某些猜测。 最常用 的用户 密码
形式是用户姓氏、 名 字或用户名 。 例如， 为了容易记忆， 用 户 mchapple 可能会使用脆弱的密码
elppahcm。 遗憾的是， 这个密码也很容易被猜到。 如果猜测企图失败， 那么攻击者会转向 互联网上
最常见密码的普通列表 。 " 最常见的密码 " 部分列出了其中 一些密码。
最常见的密码
攻击者常常使用 互联网 分发常被使用 的用 户 密码列表， 这些密码通过系统被攻破时收集到的数
据建立。 列表中的很多 内 容并不使人惊讶。 在王联网上检索到 的攻击者列表包含 8 1 5 个密码， 下面
列 出 了 其 中 一小部分:
Password
Secret
sex
money
love
computer
football
hello
mornmg
Ibm
work
office
629
630
CISSP 官方学 习指南(第 7 版)
online
terminal
Internet
除 了 这些常见的单词外， 密码列表里 包含超过 300 个第 一名字， 其 中 70%是女性的名 字 。
最后， 对某人稍有了解就可以为其密码提供极佳的线索 。 很多人使用配偶、 孩子、 宠物、 亲友
或喜欢的演员 的名字作为密码。 常见的密码还包括生日、 周年纪念 日 、 社会保险号、 电话号码和(不
管你是否相信)ATM PIN。
2 1 .2.2 字典攻击
前面曾 经提到过， 许多 Unix 系统在所有系统用户可访问 的/etc/passwd 文件中存储用户 密码的加
密版本。 为了提供某些安全性级别， 这个文件并不包含实际的用户 密码: 但包含了 通过单向加密函
数获得的加密值(参看第 7 章对加密函数的讨论)。 当用户试图登入系统时， 访问验证程序使用相 同
的加密函数加密用户输入的密码， 然后与/巳tc/passwd 文件中存储的实际密码进行比较。 如果这两个
值匹配， 那么用户 就被准许访 问系统。
密码攻击者使用 自 动化工具(例如， John the Ripper)运行 自 动的字典攻击， 字典攻击利用 了这种
机制的一个简单漏洞。 攻击者采用一个包含成千上万词汇的大型字典文件， 然后针对这些词汇运行
加密函数， 以获得加密的等值效果 。 接着， John the 阳pper 程序在密码文件中查找与加密宇典相匹
配的加密值。 查找到某个匹配时， John the Ripper 程序会报告用户名和密码(明文形式)， 攻击者便获
得了对系统的访问权限。
密码破解
John也eRipper 是一个密码破解手却子。 在王联网上有许多 其他可用 的攻击技术， 这些 包括 Cain &
Abel 、 Ophcrack、 Brutus、 THC Hy，的、 LOphtCrack、 Pwdump 和 RainbowCrack. 每个工具都有专 门
的不同 的操作系统和 密码类型 。
这听起来像是一种简单的安全机制 ， 并且安全教育将会防止用户 使用那些容易被破解程序猜到
的密码， 但是这种工具对于攻击实际的系统来说惊人有效。 随着新版破解工具的发布， 更多的高级
特性被用 于战胜用户常用的技术以及战胜密码复杂度规则 。 下面列 出 了 其中一些高级特性:
• 重新排列宇典词汇的字母
• 为字典词汇附加数字
• 将字典词汇 中 出现的每个字母 0 都替换为数字 。(或用数字 1 替换字母 L)
• 采用某些形式组合两个字典词汇
21 .2.3 社会工程学攻击
社会工程学是攻击者用于获得系统访问权限的最有效工具之一。 在其最基本的形式中 ， 社会工
程学攻击包括简单地通过电话询问用户 的密码， 就像技术支持人员或其他权威机构声明他们立即需
要这些信息一样。 幸运的是， 大多数当代计算机用户 都己意识到这些花招， 通过简单询问用户 密码
的有效性如今己经有所降低。 相反， 这些攻击依赖于网络钓鱼电子邮件， 提示用户 使用他们真实的
第 21 章 恶意代码与应用攻击
用户名和口令登录到一个假冒 的网站， 然后攻击者捕获这些用户信息， 并用于登录实际的网站。 网
络钓鱼往往针对金融服务网站， 用户凭据可以用来快速转移现金。 除了欺骗用户放弃他们的密码，
网络钓鱼攻击通常用来让用 户 安装恶意软件或提供其他敏感的个人信息 。
虽然用户变得越来越精明 ， 但对于密码(通常针对网络)的安全性来说， 社会工程学仍然是个严
重的威胁。 攻击者常常可以通过与计算机用户 、 办公室中的饶舌者和行政管理人员 的 " 闲谈" 获得
敏感的个人信息 。 在进行密码猜测攻击时， 这些信息可以提供极好的攻击素材。 此外， 攻击者有时
可以获得敏感的网络拓扑图或配置数据， 在计划对组织进行其他类型的 电子攻击时， 这些信息也非
常有用 。
21 .2.4 对策
所有安全措施的基石是教育 。 安全人员应该经常提醒用户选择安全密码进行保密的重要性。 用
户应该在他们首次加入组织时接受培训11 ， 并且应当定期接受最新的培训 ， 即使这种培训 只是来自管
理员 提醒他们相关威胁 的 电子师件 。
为用户提供建立安全密码所需要的知识， 告诉他们攻击者在猜测密码时所使用的技术， 并且为
用户提供一些有关如何建立强密码的建议。 最有效的密码技术之一是使用某种记忆手段， 如设想一
个容易记忆的句子并利用每个词的首字母建立密码。 例如， 将句子"My son Richard likes to eat 4 piω"
变为密码 MsRlte4P， 这是一个极难破解的密码。 你可能也希望考虑为用户提供一个安全工具， 允许
存储这些强密码。 Password Safe 和 LastPass 是两个常见的例子。 这些工具允许用户 为他们使用 的每
个服务创建独特的 、 强大的密码， 而不承担他们所有的负担。
提示 :
防止基于密码的攻击的最好方法之一是采用 其他认证技术作为 密码技术的补充。 这种方法被称
为 多 因 素认证， 已在第 1 3 幸讨论。
由过分热心的管理员导致的一种最常见错误是建立一系列强密码， 并且将它们分发给用户(用 户
随后会被禁止改变为他们分发的密码)。 乍一看， 这是一个听起来十分安全的策略。 然而， 用户在收
到像 lmfOA8flt 这样的密码时， 他们将要做的第一件事是将密码写在便签上并将其粘贴在计算机键
盘的下面。 这下可好， 安全保护彻底破产 了 !
如果网络包括使用/etc!passwd 文件的 Unix 操作系统， 那么请考虑使用其他的访问验证机制来增
强安全性。 在很多版本的 Unix 和 Linux 上都可用 的一种流行技术是使用影子密码文件/etC!shadow。
这个文件包含每个用户 的实际加密密码， 但是除了 管理员外， 任何人都不能访问这个文件。 可公共
访 问 的文件/etc/passwd 只 是包含用户名的列表， 它并不包含发起字典攻击所需的 必要数据。
2 1 .3 应 用程序攻击
在第 20 章中 ， 学习 了在开发操作系统和应用l!E)字时使用可靠的软件工程过程的重要性。 在下面
几节， 你将会简要学习一些特殊的技术， 攻击者可以使用这些技术来利用 由于编码过程疏忽大意而
留下的漏洞。
631
632
CISSP 官方学习指南(第 7 版)
21 .3. 1 缓冲区溢出
缓冲区溢出漏洞存在于当开发人员不正确地验证用户 的输入， 以确保以适当的大小输入时。 输
入太大， 可 以 "溢出" 一个数据结构， 影响存储在计算机内存中 的其他数据。 例如， 如果一个 Web
表单有一个域与后端的变量关联， 该变量仅允许输入 1 0 个字符， 但表单的处理器不验证输入的长度，
操作系统可能会简单地将数据写入留给该变量的空间 ， 对存储在内存中 的其他数据可能造成损害 。
在最坏的情况下， 该数据可以用来覆盖系统代码， 允许攻击者利用缓冲 区溢出漏洞在服务器上执行
任意代码。
当编写软件时， 开发人员必须对允许用户输入的变量给予特别关注。 许多编程语言对变量的长
度不强制实施固有的限制 ， 这就要求编程人员对代码进行边界检查。 因 为许多编程人员认为参数检
查是一种不必要的、 会减缓程序开发速度的负担， 所以这就成了程序开发的一个固有的漏洞。 作为
安全行业的从业人员 ， 必须负责确保组织的开发人员意识到由缓冲区溢出漏洞 引起的风险， 并且应
当采取适当 的措施来保护编程人员 开发的代码免遭这种类型的攻击。
只 要允许用户输入程序变量， 编程人员就应当采取有效措施， 从而确保满足下列各项条件:
• 用户输入的值的长度不能超过任何存放它的缓冲 区的大小(例如， 将一个具有 1 0 个字母的单
词输入到最多容纳 5 个字母的字符串变量中)。
• 用户不能向保存输入值的变量类型输入无效的值(例如 ， 将一个字符输入到一个数字型变
量 中) 。
• 用户输入的数值不能超出程序规定的参数操作范围(例如， 用"也许"来回答结果只能为"是"
或 " 否" 的问题)。
如果没有执行对上述条件的简单检查， 那么就可能造成缓冲 区溢出漏洞， 这种漏洞会导致系统
崩溃， 甚至可能允许用户 运行 shell 命令并获得对系统的访问权限。 缓冲区溢出漏洞在使用 CGI 或
其他语言进行快速代码开发的过程中尤其普遍， 这是因为快速代码开发允许没有经验的编程人员快
速生成交互式的 Web 页面。
2 1 .3.2 检验时间到使用 时间
检验时间到使用时间σime-OιCheck-To-Time-OιUse， TOCTTOU 或 TOC厅'OU)的 问题是一个
时间型漏洞， 当l)亨检查访问许可权限的时间大大早于资源请求的时间时， 就会出现这种问题。 例
如 ， 如果操作系统针对用户 登录建立了 一个综合的访问许可权限列表， 并且在整个登录会话期间查
询这个列表， 那么就存在 TOCπOU 漏洞。 如果系统管理员取消 了某个特殊的权限， 那么这个限制
只有在用户下次登录时才会起作用 。 如果在用户登录时正好发生取消访问许可权限的操作， 那么用
户 是否能够访问资源就是不确定的。 用户只需保留会话打开数天之久， 新的限制就永远不会被应用。
21 .3.3 后门
后 门是没有被记录到文档中 的命令序列， 它们允许软件开发人员绕过正常的访问限制 。 在开发