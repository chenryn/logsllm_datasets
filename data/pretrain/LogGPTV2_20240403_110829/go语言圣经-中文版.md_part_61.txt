https://github.com/chai2010/bzip2 ）。
通过cgo调用C代码 471
gopl
NewWriter函数通过调用C语言的BZ2_bzCompressInit函数来初始化stream中的缓存。在
writer结构中还包括了另一个buffer，用于输出缓存。
下面是Write方法的实现，返回成功压缩数据的大小，主体是一个循环中调用C语言的
bz2compress函数实现的。从代码可以看到，Go程序可以访问C语言的bz_stream、char和
uint类型，还可以访问bz2compress等函数，甚至可以访问C语言中像BZ_RUN那样的宏定
义，全部都是以C.x语法访问。其中C.uint类型和Go语言的uint类型并不相同，即使它们具有
相同的大小也是不同的类型。
func (w *writer) Write(data []byte) (int, error) {
if w.stream == nil {
panic("closed")
}
var total int // uncompressed bytes written
for len(data) > 0 {
inlen, outlen := C.uint(len(data)), C.uint(cap(w.outbuf))
C.bz2compress(w.stream, C.BZ_RUN,
(*C.char)(unsafe.Pointer(&data[0])), &inlen,
(*C.char)(unsafe.Pointer(&w.outbuf)), &outlen)
total += int(inlen)
data = data[inlen:]
if _, err := w.w.Write(w.outbuf[:outlen]); err != nil {
return total, err
}
}
return total, nil
}
在循环的每次迭代中，向bz2compress传入数据的地址和剩余部分的长度，还有输出缓存
w.outbuf的地址和容量。这两个长度信息通过它们的地址传入而不是值传入，因为
bz2compress函数可能会根据已经压缩的数据和压缩后数据的大小来更新这两个值。每个块
压缩后的数据被写入到底层的io.Writer。
Close方法和Write方法有着类似的结构，通过一个循环将剩余的压缩数据刷新到输出缓存。
通过cgo调用C代码 472
gopl
// Close flushes the compressed data and closes the stream.
// It does not close the underlying io.Writer.
func (w *writer) Close() error {
if w.stream == nil {
panic("closed")
}
defer func() {
C.BZ2_bzCompressEnd(w.stream)
C.bz2free(w.stream)
w.stream = nil
}()
for {
inlen, outlen := C.uint(0), C.uint(cap(w.outbuf))
r := C.bz2compress(w.stream, C.BZ_FINISH, nil, &inlen,
(*C.char)(unsafe.Pointer(&w.outbuf)), &outlen)
if _, err := w.w.Write(w.outbuf[:outlen]); err != nil {
return err
}
if r == C.BZ_STREAM_END {
return nil
}
}
}
压缩完成后，Close方法用了defer函数确保函数退出前调用C.BZ2_bzCompressEnd和
C.bz2free释放相关的C语言运行时资源。此刻w.stream指针将不再有效，我们将它设置为nil
以保证安全，然后在每个方法中增加了nil检测，以防止用户在关闭后依然错误使用相关方
法。
上面的实现中，不仅仅写是非并发安全的，甚至并发调用Close和Write方法也可能导致程序的
的崩溃。修复这个问题是练习13.3的内容。
下面的bzipper程序，使用我们自己包实现的bzip2压缩命令。它的行为和许多Unix系统的
bzip2命令类似。
gopl.io/ch13/bzipper
通过cgo调用C代码 473
gopl
// Bzipper reads input, bzip2-compresses it, and writes it out.
package main
import (
"io"
"log"
"os"
"gopl.io/ch13/bzip"
)
func main() {
w := bzip.NewWriter(os.Stdout)
if _, err := io.Copy(w, os.Stdin); err != nil {
log.Fatalf("bzipper: %v\n", err)
}
if err := w.Close(); err != nil {
log.Fatalf("bzipper: close: %v\n", err)
}
}
在上面的场景中，我们使用bzipper压缩了/usr/share/dict/words系统自带的词典，从938,848
字节压缩到335,405字节。大约是原始数据大小的三分之一。然后使用系统自带的bunzip2命
令进行解压。压缩前后文件的SHA256哈希码是相同了，这也说明了我们的压缩工具是正确
的。（如果你的系统没有sha256sum命令，那么请先按照练习4.2实现一个类似的工具）
$ go build gopl.io/ch13/bzipper
$ wc -c 
tag. (Thanks to Taj Khattra, 2016-01-19.)
p.132, code display following ¶3: the final comment should read: // compile error: can't
assign func(int, int) int to func(int) int (Thanks to Toni Suter, 2015-11-21. Corrected in
the third printing.)
p.160, ¶4: For Get("item")) , read Get("item") . (Thanks to Yoshiki Shibata, 2016-02-01.)
p.166, ¶2: for "way", read "a way". (Corrected in the third printing.)
p.200, TestEval function: the format string in the final call to t.Errorf should format test.env
with %v, not %s. (Thanks to Mitsuteru Sawa, 2015-12-07. Corrected in the third printing.)
p.222, Exercise 8.1: The port numbers for London and Tokyo should be swapped in the
final command to match the earlier commands. (Thanks to Kiyoshi Kamishima, 2016-01-08.)
p.272, ¶3: for "the request body", read "the response body". (Thanks to 曹春晖, 2016-01-
19.)
p.288, code display following ¶4: In the import declaration, for "database/mysql" , read
"database/sql" . (Thanks to Jose Colon Rodriguez, 2016-01-09.)
p.347, Exercise 12.8: for "like json.Marshal", read "like json.Unmarshal". (Thanks to
chai2010, 2016-01-01.)
p.362: the gopl.io/ch13/bzip program does not comply with the proposed rules for passing
pointers between Go and C code because the C function bz2compress temporarily stores a
Go pointer (in) into the Go heap (the bz_stream variable). The bz_stream variable should
附录A：原文勘误 479
gopl
be allocated, and explicitly freed after the call to BZ2_bzCompressEnd , by C functions. (Thanks
to Joe Tsai, 2015-11-18. Corrected in the third printing.)
附录A：原文勘误 480
gopl
附录B：作者/译者
英文作者
Alan A. A. Donovan is a member of Google’s Go team in New York. He holds
computer science degrees from Cambridge and MIT and has been programming in
industry since 1996. Since 2005, he has worked at Google on infrastructure projects
and was the co-designer of its proprietary build system, Blaze. He has built many
libraries and tools for static analysis of Go programs, including oracle, godoc -
analysis , eg, and gorename.
Brian W. Kernighan is a professor in the Computer Science Department at Princeton
University. He was a member of technical staff in the Computing Science Research
Center at Bell Labs from 1969 until 2000, where he worked on languages and tools for
Unix. He is the co-author of several books, including The C Programming Language,
Second Edition (Prentice Hall, 1988), and The Practice of Programming (Addison-
Wesley, 1999).
中文译者
中文译者 章节
chai2010  前言/第2 ~ 4章/第10 ~ 13章
Xargin  第1章/第6章/第8 ~ 9章
CrazySssst 第5章
foreversmart  第7章
附录B：作者译者 481
gopl
附录C：译文授权
除特别注明外, 本站内容均采用知识共享-署名(CC-BY) 3.0协议授权, 代码遵循Go项目的BSD
协议授权.
附录C：译文授权 482
gopl
附录D：其它语言
下表是 The Go Programming Language 其它语言版本：
语言 链接 时间 译者 ISBN
chai2010, Xargin,
中文 《Go语言圣经》 2016/2/1 CrazySssst, ?
foreversmart
Acorn Publishing
韩语 2016 Seung Lee 9788960778320
(Korea)
Williams
俄语 Publishing 2016 ? 9785845920515
(Russia)
波兰
Helion (Poland) 2016 ? ?
语
Maruzen
日语 Publishing 2017 Yoshiki Shibata 9784621300251
(Japan)
葡萄 Novatec Editora
2017 ? ?
牙语 (Brazil)
中文 Pearson
2017 ? ?
简体 Education Asia
中文 Gotop Information
2017 ? ?
繁体 (Taiwan)
附录D：其它语言 483