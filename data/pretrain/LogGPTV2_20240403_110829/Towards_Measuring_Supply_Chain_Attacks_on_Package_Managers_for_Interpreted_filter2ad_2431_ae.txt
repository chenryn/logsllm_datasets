the top 10K downloaded packages in Figure 6b, including
both direct and indirect dependencies. 80% of these packages
have 2 or fewer direct dependencies, which inflates to 20 or
fewer indirect dependencies, implying the need for PMs to
ensure quality of reused OSS and the trust for RMs to vet
packages for maliciousness. The maximum number of indirect
dependencies in Figure 6b reaches more than 1K, implying a
significant amplification when frequently reused packages get
compromised. This indicates that PyPI and RubyGems face
similar risks of Npm as highlighted by previous research [8],
such as single points of failure and threats of unmaintained
packages.
Static Analysis. We present
the percentage of top 10K
downloaded packages using suspicious APIs in Figure 7a.
Contrary to the intuition that code generation APIs such as
eval are dangerous and rarely used, Figure 7a shows that
7% of PyPI packages and 10% of RubyGems packages use
code generation APIs. Such code generation APIs are not only
frequently used in supply chain attacks, but also can lead to
code injection vulnerabilities if their inputs are not properly
sanitized.
Dynamic Analysis. We dynamically analyzed all packages in
registries by sandboxing them in Docker containers [49] and
tracing their behaviors with Sysdig [50]. Figure 7b shows the
number of packages exhibiting unexpected dynamic behaviors
in each registry according to the initial heuristics in §III-B4.
The figure reveals that Npm and PyPI have more packages
with unexpected network activities (i.e. IPs and DNS queries)
than RubyGems. It
to note that unexpected
behaviors during the installation phase are amplified by de-
pendent packages, resulting in a seemingly large number of
flagged packages in Figure 7b. Such redundancy is removed
subsequently by checking with the dependency tree.
is important
C. Supply Chain Attack Details
We systematically summarize the 651 malware following
the framework and terminologies proposed in §III-A. While
presenting, we use Overall to refer to malware reported overall,
Community for ones reported by the community and Authors
for ones reported by the authors.
100101102103104Number of versions0.00.20.40.60.81.0CDF101103105107109Number of downloadsPyPI versionsNpm versionsRubyGems versionsPyPI downloadsNpm downloadsRubyGems downloads100101102103Number of dependencies for packages0.00.20.40.60.81.0CDFPyPI D-depsPyPI I-depsNpm D-depsNpm I-depsRubyGems D-depsRubyGems I-depsPyPINpmRubyGemsRegistries051015202530Percentage of PackagesCode GenerationNetworkFileProcessPyPINpmRubyGemsRegistries0246Number of packages×104IPsDNS queriesFilesProcesses(a) Attack vectors.
(b) Malicious behaviors.
Fig. 8: Breakdown of malware by attacks and behaviors.
(a) CDF of persistence days.
(b) CDF of downloads.
Fig. 9: The distribution of number of persistence days and
number of downloads for malware.
Attack Vectors. We categorize malware by their attack vectors
typosquatting is the most
in Figure 8a, which shows that
exploited attack vector, followed by account compromise and
publish. It is intuitive that typosquatting and publish would
dominate, since attackers tend to use low-cost approaches.
the popularity of account compromise implies a
However,
lack of support by RMs and awareness of PMs to protect
accounts. Though not significant, other attack vectors such
as malicious contributor and ownership transfer are exploited
by attackers, indicating that each stakeholder in the package
manager ecosystem should raise awareness and be involved in
fighting supply chain attacks.
Malicious Behaviors. We categorize malware by their ma-
licious behaviors in Figure 8b, which shows that stealing is
the most common behavior, followed by backdoor, proof-of-
concept and cryptojacking. We further investigate the domi-
nating category, stealing, and find that around three quarters
of them are collecting less sensitive information, such as
usernames, IPs etc., posing less harm to developers and end-
users. The rest of stealing packages collects various sensitive
information, such as passwords, private keys, credit cards etc.
As for backdoor and cryptojacking, their popularity indicates
that attackers are targeting not only end-users, but also de-
velopers and infrastructure of enterprises, implying an urgent
need for developers and enterprises to take action.
Persistence. We present
the distribution of number of
persistence days and number of downloads for each malware
in Figure 9, which shows that 20% of them persist in package
managers for over 400 days and have more than 1K downloads.
As of August 2019, none of the three registries has claimed
to deploy analysis pipelines or manual review processes, but
instead rely on the community to find and report malware,
thus leading to the long persistence of malware. To better
understand the distribution of malware in terms of persistence
and popularity, we show the correlation between number of
Fig. 10: Correlation between number of persistence days and
number of downloads. R&R: Reported and Removed. R&I:
Reported and Investigating.
impact,
in particular,
persistence days and number of downloads in Figure 10. The
scatterplot reveals that popular packages are likely to persist
for fewer days, possibly due to their larger user base. As high-
lighted in Figure 10, 18 malicious packages were identified
with more than 100K downloads. We (i.e. the authors) reported
4 of these 18 packages. Three of our reported malicious
packages, i.e. paranoid2, simple_captcha2 and datagrid,
were confirmed and removed by registry maintainers and are
assigned CVE-2019-13589, CVE-2019-14282 and CVE-2019-
14281 respectively. The fourth identified malicious package,
rsa-compat, unfortunately still remains online. It collects
information regarding the package, Node.js runtime and op-
erating system, and is being investigated by Npm maintainers
due to lack of policies defining user tracking versus stealing.
Impact. Besides malware characteristics, we also measure
their potential
the scale of affected
developers and end-users by checking the number of down-
loads. From Figure 9b, we select malware with more than 10
million downloads. The combined downloads, including both
benign and malicious versions, for the most popular malicious
packages (event-stream - 190 million, eslint-scope - 442
million, bootstrap-sass - 30 million, and rest-client
- 114 million) sum to 776 million. In addition to threats
imposed by direct downloads, we emphasize that unlike mobile
stores where apps are user-facing, the packages in registries
are developer-facing, thus amplifying their impact by their
dependents. Moreover, by walking up the dependency tree
in Figure 6b to compute reverse dependencies, we find that
event-stream has 3,905 dependents, eslint-scope has
15,356 dependents, bootstrap-sass has 546 dependents and
rest-client has 4,722 dependents. By measuring their de-
pendent downloads, the downloads for each of these packages
is significantly amplified — i.e event-stream - 539 million,
eslint-scope - 2.59 billion, bootstrap-sass - 46 million,
and rest-client - 289 million downloads, amounting to a
total of 3.464 billion downloads of malicious packages, thus
amplifying the impact by a factor of 4.5.
It’s important to note that downloads can be inflated by
CI/CD pipelines and may not reflect the exact number of
affected developers and end-users. However, since registries do
not provide such information or may not even have them, we
rely on the number of downloads to approximate the impact.
Infection. Although downloads and reverse dependencies
can be an indirect measure of malware popularity, it is still
10
TyposquattingAccount Compromise           Publish           Malicious ContributorOwnership TransferDisgruntled Insider    100101102Number of packagesCommunityAuthorsStealingBackdoorProof-of-conceptCryptojackingSabotageVirus100101102Number of packagesCommunityAuthors100101102103Number of persistence days0.00.20.40.60.81.0CDFOverallCommunityAuthors101103105107109Number of downloads0.00.20.40.60.81.0CDFOverallCommunityAuthors025050075010001250150017502000Number of persistence days100102104106108Number of downloadsR&R by communityR&I by communityR&R by authorsR&I by authorsFig. 11: The volume of passive DNS queries aggregated by month for domains related to known malware.
unclear whether malware made their way to Devs and Users.
Inspired by the observation that many of these malware in-
volves network activity in their malicious logic, we collaborate
with a major ISP to check malware related DNS queries. We
start with manually checking malicious payloads and extract-
ing contacted domains. Followed by exclusion of commonly
used domains for benign purposes, such as pastebin.com and
google-analytics.com. We query the remaining domains against
the passive DNS data shared by the ISP and present their
volume aggregated by month in Figure 11. The data contains
queries from Jan 2017 to Sep 2019, with the exception from
Jun 2017 to Dec 2017 due to data loss. As shown in Figure 11,
mironanoru.zzz.com.ua, a domain used in rest-client [5],
has 10 hits in Aug 2019, but drops to almost zero in Sep
2019. This matches the fact that rest-client is uploaded and
removed in Aug 2019, which shows effectiveness of supply
chain attacks and validates our intuition that a large user base
can help timely remediate security risks. n.cdn-radar.com, a
domain used in AndroidAudioRecorder [26], has hits until
Sep 2019, showing infection even after its removal in Dec
2018. Further inspection reveals that no public advisory is
created for this incident and the victims may not be aware
of this issue,
implying the need of notification channels.
Additionally, ptpb.pw, a domain used in acroread [17],
permanently shutdown in Mar 2019 [57] due to service abuse
from cryptominers, implying possibility of correlating malware
campaigns using DNS queries and necessity for online services
to be abuse-resistant.
It’s important to notice that the infection measurement is
empirical and assumes that low volume malware-related DNS
queries are likely originated from infections. However, without
direct access to end hosts, we cannot conclusively prove their
infections. In addition, the volume of DNS queries may be
biased in the passive DNS data, which the authors do not have
control or visibility.
D. Anti-analysis Techniques
While manually checking malicious payloads, we notice
that malware have been evolving and leveraging various anti-
analysis techniques to defeat detection. Inspired by previous
works on evasive malware [58]–[62], we enumerate and cate-
gorize techniques used in these supply chain attacks, to raise
the community’s attention and aid future analyses.
Benign Service Abuse. Attackers can abuse benign ser-
1 def _! begin yield rescue Exception end end
2
3 _!{
4
5
6
Thread .new{ loop{
_!{ sleep 900;
eval(open(’https :// pastebin .com/raw /5 iNdELNX ’).read)
}
}}
7
8 if Rails.env [0]=="p"}
Listing 4: rest-client [5] uses anti-analysis techniques such
as benign service abuse, multi-stage payload, logic bomb and
non-latest release.
1 var _0xb303 =["\x64\x69\x73\x63\x6F\x72\x64\x2E\x6A\x73","\
x72\x65\x71\x75\x65\x73\x74","\x6F\x6E","\x63\x61\x74\
x63\x68","\x68\x74\x74\x70\x73\x3A\x2F\x2F\x65\x6E\x6E\
x61\x6B\x75\x76\x69\x73\x30\x74\x70\x69\x2E\x78\x2E\x70
\x69\x70\x65\x64\x72\x65\x61\x6D\x2E\x6E\x65\x74\x2F\
x69\x6E\x64\x65\x78\x2E\x70\x68\x70\x3F\x64\x65\x62\x75
\x67\x3D","","\x70\x6F\x73\x74","\x74\x68\x65\x6E","\
x6C\x6F\x67\x69\x6E"];
2 const Discord = require ( _0xb303 [0]);
3 const Yoga= new Discord . Client ();
4 const request = require ( _0xb303 [1]);
5 exports [ _0xb303 [2]]= function ( _0x96cdx4 ){
6
7
8
( _0x96cdx6 )=>{ request [ _0xb303 [6]]((
Yoga[ _0xb303 [8]]( _0x96cdx4 )[ _0xb303 [7]](
_0xb303 [4]+ _0x96cdx6 + _0xb303 [5]))})[ _0xb303 [3]]((
_0x96cdx5 )=>{return })}
Listing 5: fast-requests [63] uses code obfuscation to
defeat analysis.
vices to hide themselves and circumvent protection mecha-
nisms. For example, Listing 4 shows that rest-client [5]
abuses the pastebin.com service to host their second-stage
payload, making defense techniques based on DNS queries in-
effective. Similarly, AndroidAudioRecorder [26] uses DNS
tunneling to leak sensitive information, abusing the DNS
service which is usually allowed by intrusion detection
systems (IDS). From DNS query point of view in Fig-
ure 11, pyconau-funtimes [64] successfully hides the at-
tacker among normal users of 0.tcp.ngrok.io, a service for
establishing secure tunnels.
Multi-stage Payload. Since AV tools are mostly based on
signatures, malware tend to hide their logic and footprint for
fingerprinting by segmenting malicious logic into multiple
stages and including minimal code snippets. For example,
Listing 4 contains only payload fetching, code generation and
error handling, and hides its malicious logic such as stealing
environment variables and backdooring infected hosts in the
11
Dec 2016Apr 2017Aug 2017Dec 2017Apr 2018Aug 2018Dec 2018Apr 2019Aug 2019100101102103104105Volume of DNS queriesn.cdn-radar.comapi.avo.appwww.shinjiru.com.myptpb.pwupdatecheck.herokuapp.commironanoru.zzz.com.uanpmtrack.comapi.therootcompany.comssh-decorate.cfus.dslab.pwstatic.ricterz.mesmiley.zzz.com.ua0.tcp.ngrok.io1 eval(Net :: HTTP. valid_get (URI(
2 "https :// raw. github .com/ benjaminleesmith /
3 evaled_snippets / master / db_console .rb")))
Listing 6: Suspicious but benign code
net_http_detector.
snippet
from
second-stage payload from pastebin.com.
Code Obfuscation. Existing studies [65], [66] classify mal-
ware obfuscation techniques into categories such as random-
ization obfuscation, encoding obfuscation, logic structure ob-
fuscation etc., and point out that malware can obfuscate code
to hide malicious logic from both manual inspection and auto-
matic detection. We find supply chain attacks are no different.
For example, both getcookies [30] and purescript [32]
use encoding obfuscation. Similarly, fast-requests [63]
in Listing 5 uses randomization obfuscation and encoding
obfuscation to defeat analysis.
Logic Bomb. TriggerScope [67] defines a logic bomb as
malicious application logic that is executed, or triggered, only
under certain (often narrow) circumstances. Logic bombs can
be used to defeat both static and dynamic analysis approaches.
For example, dynamic analysis of rest-client [5] would
never execute the malicious payload if it is not executed in a
production environment (Line 8 in Listing 4).
Older Version. Several malware [5], [29] published through
account compromise utilize unique techniques to defeat analy-
sis. Rather than publishing the malicious payload to the latest
version of a package (i.e. maximize the volume of victims,
which in turn increases the probability of being caught),
attackers instead publish these payloads to older versions of the
package to target a smaller number of victims. We imagine the
attacker’s intuition is that developers using older versions are
less cautious about security, thus maximizing attack persistence
and minimizing detection probability.
E. Security Analysis Hurdles
During true positive verification, we encountered several
seemingly malicious behaviors which turned out to be benign.
We enumerate them to increase awareness in the research
community and help avoid pitfalls, while hoping that RMs
will specify policies to define and regulate such behaviors.
Installation Hook.
During installation, some packages
fetch data from online services and locally evaluate or
write them to sensitive locations. For example, stannp uses
c.docverter.com to convert its README to RST format, and
meshblu-mailgun tries to skip the build process by checking
availability of pre-built binaries at cdn.octoblu.com. Such
behaviors are similar to malicious activities and would confuse
automated analyses.
Dynamic Code Loading. Loading code at runtime is consid-
ered as suspicious by mobile stores, since it can be abused
to inject unknown code into apps. However, some benign
packages locally evaluate payloads from network. For example,
net_http_detector in Listing 6 evaluates payload from
github.com.
User Tracking. PMs may want to track users for improving
user experience or increasing business, but the boundary be-
tween information stealing and user tracking is unclear without
well-defined policies. For example, rsa-compat, one of the
packages under investigation due to lack of user tracking poli-
cies (Figure 10), collects Node.js runtime and operating system
metrics, and sends them back to https://therootcompany.com.
V. MITIGATION
A. Mitigation Strategies
The goal of our study was to not only bring attention to
this overlooked problem, but also to provide guidance to stake-
holders in the package manager ecosystem for detecting and
mitigating supply chain attacks. We highlighted straightfor-
ward enhancement and features in §III-A3 for RMs. However,
in the long term, as attackers evolve, every stakeholder to raise
awareness and help improve the security posture.
Registry Maintainers. RMs are the central authorities in the
ecosystem. We elaborate their mitigation strategies based on
the three types of features presented in Table I, i.e. functional,
review and remediation.
(1) Functional Feature: RMs can significantly improve account