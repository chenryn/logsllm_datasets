### Top 10,000 Downloaded Packages Analysis

**Dependency Analysis:**
Figure 6b illustrates the top 10,000 downloaded packages, including both direct and indirect dependencies. Notably, 80% of these packages have two or fewer direct dependencies, which can expand to 20 or fewer indirect dependencies. This highlights the importance of package managers (PMs) ensuring the quality of reused open-source software (OSS) and the need for repository maintainers (RMs) to vet packages for potential malicious content. The maximum number of indirect dependencies in Figure 6b exceeds 1,000, indicating a significant amplification when frequently reused packages are compromised. This suggests that PyPI and RubyGems face similar risks as Npm, such as single points of failure and threats from unmaintained packages, as highlighted by previous research [8].

### Static Analysis

**Suspicious API Usage:**
Figure 7a presents the percentage of the top 10,000 downloaded packages that use suspicious APIs. Contrary to the common belief that code generation APIs like `eval` are dangerous and rarely used, 7% of PyPI packages and 10% of RubyGems packages employ such APIs. These APIs are not only frequently used in supply chain attacks but also pose a risk of code injection vulnerabilities if their inputs are not properly sanitized.

### Dynamic Analysis

**Unexpected Behaviors:**
We dynamically analyzed all packages in the registries by sandboxing them in Docker containers [49] and tracing their behaviors with Sysdig [50]. Figure 7b shows the number of packages exhibiting unexpected dynamic behaviors in each registry, based on the initial heuristics in §III-B4. The figure reveals that Npm and PyPI have more packages with unexpected network activities (i.e., IPs and DNS queries) compared to RubyGems. It is important to note that unexpected behaviors during the installation phase are amplified by dependent packages, leading to a seemingly large number of flagged packages in Figure 7b. Subsequently, this redundancy is removed by checking the dependency tree.

### Supply Chain Attack Details

**Malware Summary:**
We systematically summarize the 651 malware instances following the framework and terminologies proposed in §III-A. We use "Overall" to refer to malware reported overall, "Community" for those reported by the community, and "Authors" for those reported by the authors.

### Attack Vectors

**Categorization:**
Figure 8a categorizes malware by their attack vectors, showing that typosquatting is the most exploited vector, followed by account compromise and publish. This is intuitive, as attackers tend to use low-cost approaches. However, the prevalence of account compromise implies a lack of support from RMs and awareness among PMs to protect accounts. Other attack vectors, such as malicious contributors and ownership transfers, are also exploited, indicating that all stakeholders in the package manager ecosystem should raise awareness and be involved in fighting supply chain attacks.

### Malicious Behaviors

**Behavioral Categorization:**
Figure 8b categorizes malware by their malicious behaviors, revealing that stealing is the most common behavior, followed by backdoor, proof-of-concept, and cryptojacking. Further investigation into the stealing category shows that about three-quarters of these packages collect less sensitive information, such as usernames and IPs, posing less harm to developers and end-users. The remaining packages collect more sensitive information, such as passwords, private keys, and credit card details. The popularity of backdoors and cryptojacking indicates that attackers target not only end-users but also developers and enterprise infrastructure, highlighting an urgent need for action.

### Persistence

**Persistence and Downloads:**
Figure 9 shows the distribution of persistence days and the number of downloads for each malware. Approximately 20% of the malware persists in package managers for over 400 days and has more than 1,000 downloads. As of August 2019, none of the three registries had deployed analysis pipelines or manual review processes, relying instead on the community to find and report malware, leading to long persistence times. To better understand the distribution of malware in terms of persistence and popularity, we show the correlation between the number of persistence days and the number of downloads in Figure 10. The scatterplot reveals that popular packages are likely to persist for fewer days, possibly due to their larger user base. Eighteen malicious packages with more than 100,000 downloads were identified, and we (the authors) reported four of these. Three of our reported packages—paranoid2, simple_captcha2, and datagrid—were confirmed and removed by registry maintainers and assigned CVE-2019-13589, CVE-2019-14282, and CVE-2019-14281, respectively. The fourth, rsa-compat, remains online and is under investigation by Npm maintainers due to unclear policies on user tracking versus stealing.

### Impact

**Scale of Affected Users:**
We measure the potential impact of malware by checking the number of downloads. From Figure 9b, we select malware with more than 10 million downloads. The combined downloads, including both benign and malicious versions, for the most popular malicious packages (event-stream - 190 million, eslint-scope - 442 million, bootstrap-sass - 30 million, and rest-client - 114 million) sum to 776 million. Unlike mobile stores, where apps are user-facing, the packages in registries are developer-facing, amplifying their impact through dependents. By walking up the dependency tree in Figure 6b, we find that event-stream has 3,905 dependents, eslint-scope has 15,356, bootstrap-sass has 546, and rest-client has 4,722. The dependent downloads significantly amplify the total downloads—event-stream: 539 million, eslint-scope: 2.59 billion, bootstrap-sass: 46 million, and rest-client: 289 million, amounting to a total of 3.464 billion downloads of malicious packages, thus amplifying the impact by a factor of 4.5.

It is important to note that downloads can be inflated by CI/CD pipelines and may not reflect the exact number of affected developers and end-users. However, since registries do not provide such information or may not even have it, we rely on the number of downloads to approximate the impact.

### Infection

**DNS Queries:**
Although downloads and reverse dependencies can be an indirect measure of malware popularity, it is still unclear whether malware made its way to developers and users. Inspired by the observation that many malware involve network activity in their malicious logic, we collaborated with a major ISP to check malware-related DNS queries. We started by manually checking malicious payloads and extracting contacted domains, excluding commonly used domains for benign purposes. We queried the remaining domains against the passive DNS data shared by the ISP and presented their volume aggregated by month in Figure 11. The data contains queries from January 2017 to September 2019, with a gap from June 2017 to December 2017 due to data loss. As shown in Figure 11, mironanoru.zzz.com.ua, a domain used in rest-client [5], had 10 hits in August 2019 but dropped to almost zero in September 2019, matching the fact that rest-client was uploaded and removed in August 2019. This shows the effectiveness of supply chain attacks and validates our intuition that a large user base can help timely remediate security risks. n.cdn-radar.com, a domain used in AndroidAudioRecorder [26], had hits until September 2019, showing infection even after its removal in December 2018. Further inspection revealed no public advisory, implying the need for notification channels. Additionally, ptpb.pw, a domain used in acroread [17], permanently shut down in March 2019 [57] due to service abuse from cryptominers, suggesting the possibility of correlating malware campaigns using DNS queries and the necessity for online services to be abuse-resistant.

### Anti-analysis Techniques

**Evolution of Malware:**
While manually checking malicious payloads, we noticed that malware has evolved and leverages various anti-analysis techniques to evade detection. Inspired by previous works on evasive malware [58]–[62], we enumerate and categorize these techniques to raise community awareness and aid future analyses.

**Benign Service Abuse:**
Attackers can abuse benign services to hide themselves and circumvent protection mechanisms. For example, rest-client [5] abuses pastebin.com to host its second-stage payload, making defense techniques based on DNS queries ineffective. Similarly, AndroidAudioRecorder [26] uses DNS tunneling to leak sensitive information, abusing the DNS service, which is usually allowed by intrusion detection systems (IDS). From the DNS query perspective in Figure 11, pyconau-funtimes [64] successfully hides the attacker among normal users of 0.tcp.ngrok.io, a service for establishing secure tunnels.

**Multi-stage Payload:**
Since antivirus tools are mostly based on signatures, malware tends to hide their logic and footprint by segmenting malicious logic into multiple stages and including minimal code snippets. For example, Listing 4 contains only payload fetching, code generation, and error handling, hiding its malicious logic, such as stealing environment variables and backdooring infected hosts in the second-stage payload from pastebin.com.

**Code Obfuscation:**
Existing studies [65], [66] classify malware obfuscation techniques into categories such as randomization obfuscation, encoding obfuscation, and logic structure obfuscation. Malware can obfuscate code to hide malicious logic from both manual inspection and automatic detection. We find that supply chain attacks are no different. For example, getcookies [30] and purescript [32] use encoding obfuscation. Similarly, fast-requests [63] in Listing 5 uses randomization and encoding obfuscation to defeat analysis.

**Logic Bomb:**
TriggerScope [67] defines a logic bomb as malicious application logic that is executed or triggered only under certain (often narrow) circumstances. Logic bombs can be used to evade both static and dynamic analysis approaches. For example, dynamic analysis of rest-client [5] would never execute the malicious payload if it is not in a production environment (Line 8 in Listing 4).

**Older Version:**
Several malware [5], [29] published through account compromise utilize unique techniques to evade analysis. Instead of publishing the malicious payload to the latest version of a package, attackers publish these payloads to older versions to target a smaller number of victims. We hypothesize that the attacker's intuition is that developers using older versions are less cautious about security, maximizing attack persistence and minimizing detection probability.

### Security Analysis Hurdles

**True Positive Verification:**
During true positive verification, we encountered several seemingly malicious behaviors that turned out to be benign. We enumerate them to increase awareness in the research community and help avoid pitfalls, while hoping that RMs will specify policies to define and regulate such behaviors.

**Installation Hook:**
Some packages fetch data from online services and locally evaluate or write them to sensitive locations during installation. For example, stannp uses c.docverter.com to convert its README to RST format, and meshblu-mailgun tries to skip the build process by checking the availability of pre-built binaries at cdn.octoblu.com. Such behaviors are similar to malicious activities and can confuse automated analyses.

**Dynamic Code Loading:**
Loading code at runtime is considered suspicious by mobile stores, as it can be abused to inject unknown code into apps. However, some benign packages locally evaluate payloads from the network. For example, net_http_detector in Listing 6 evaluates a payload from github.com.

**User Tracking:**
PMs may want to track users to improve user experience or increase business, but the boundary between information stealing and user tracking is unclear without well-defined policies. For example, rsa-compat, one of the packages under investigation due to lack of user tracking policies (Figure 10), collects Node.js runtime and operating system metrics and sends them back to https://therootcompany.com.

### Mitigation Strategies

**Registry Maintainers:**
RMs are the central authorities in the ecosystem. We elaborate on their mitigation strategies based on the three types of features presented in Table I: functional, review, and remediation.

1. **Functional Feature:**
   RMs can significantly improve account security by implementing multi-factor authentication and other robust security measures.

This optimized text aims to enhance clarity, coherence, and professionalism, making it easier to understand and follow the detailed analysis and findings.