previous step. In our proofs, we abstract this step as a
coin tossing protocol.
˜χ ← H (cid:4)(1(cid:9)transcript)
ˆχ ← H (cid:4)(2(cid:9)transcript)
6) Alice computes
(cid:2)
⎧⎨
⎩
˜χi · ˜zA,i·ξ+j + ˆχi · ˆzA,i·ξ+j
r ..=
u ..= { ˜χi · ˜ai + ˆχi · ˆai}i∈[1,(cid:4)]
i∈[1,(cid:4)]
⎫⎬
⎭
j∈[1,ξ]
3) Store (bob-complete, idmul, b) in memory.
if two messages exist
Alice-input-rush: On receiving (rush, idmul, a, zA) from Al-
ice,
in memory with the forms
(alice-ready, idmul) and (bob-complete, idmul, b) re-
spectively, but (alice-complete, idmul,·,·) does not exist
in memory, and if a ∈ Zq and zA ∈ Zq then:
1) Compute
zB
ai · bi − zA,i
2) Send (output, idmul, zB) to Bob.
3) Store (alice-complete, idmul, a, zB) in memory.
i∈[1,(cid:4)]
..=
(cid:9)
(cid:10)
We now present a two-party multiplication protocol that
realizes the above functionality, which is based upon Oblivious
Transfer, and speciﬁcally OT-extensions. The multiplication
protocol of Doerner et al. speciﬁes that Bob’s OT choice
bits comprise a high-entropy encoding of his input, and that
Alice’s OT correlations are determined by her input, and that
each party’s share of the product can be calculated simply
by summing the outputs of the OT. The round complexity
of their protocol
is determined by the round complexity
of OT-extensions, which is two when instantiated with the
protocol of Keller et al. [29]. We abandon this approach,
and instead specify that the two parties use oblivious transfer
to perform a randomized multiplication (which corresponds
to the preprocessing phase in the F (cid:4)
2PMul functionality), and
adjust their output shares after the fact (which corresponds
to the input phase). While the randomized multiplication
in our multiplier requires two rounds on its own, and the
adjustment step a third, it is possible for many multipliers with
data dependencies to evaluate their randomized multiplications
concurrently, reducing the round count overall.
Protocol 1. Two-party Multiplication
This protocol
is parameterized by a statistical security
parameter s and the group Zq over which multiplication is to
be performed. Let κ = |q| and for convenience let η = ξ · (cid:5)
where ξ = κ + 2s is the number of random choice bits per
element in a batch and (cid:5) is the multiplication batch size (a
parameter). This protocol makes use of a public gadget vector
g ← Zη
q , and it invokes the Correlated Oblivious Transfer
functionality F η
COTe and the random oracle H. For technical
reasons, Bob supplies (cid:5), but we assume that it is available as
a common input to both parties. Alice supplies a vector input
integers a ∈ Z(cid:4)
q and Bob supplies another vector of input
integers b ∈ Z(cid:4)
q. Alice and Bob receive as output vectors
of integers zA ∈ Z(cid:4)
q, respectively, such that
zA,i + zB,i = ai · bi for all indices i ∈ [1, (cid:5)].
Init:
q and zB ∈ Z(cid:4)
2PMul
(cid:7)
(cid:8)
π(cid:4)
:
1) Alice and Bob initialize their OT extensions by trans-
mitting (init) to F η
COTe.
Encoding:
2) Bob samples a set of random OT choice bits, and uses
8) Alice computes
and sends r and u to Bob.
7) Bob aborts if
(cid:2)
⎛
⎜⎜⎜⎜⎝
(cid:22)
j∈[1,ξ]
rj +
i∈[1,(cid:4)]
˜χi · ˜zB,i·ξ+j + ˆχi · ˆzB,i·ξ+j
βi·ξ+j · ui
(cid:2)
(cid:10)=
i∈[1,(cid:4)]
⎞
⎟⎟⎟⎟⎠
Note that steps 5, 6, and 7 correspond to the Alice-
preprocess phase in F (cid:4)
2PMul.
..= {ai − ˜ai}i∈[1,(cid:4)]
γ
A
(cid:18)(cid:17)(cid:22)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
and sends γ
A to Bob. Meanwhile, Bob computes
(cid:29)
(cid:30)
γ
B
..=
bi − ˜bi
i∈[1,(cid:4)]
and sends γ
B to Alice.
9) Alice and Bob compute their output shares
gj · ˜zA,i·ξ+j
..=
zA
B,i +
⎧⎨
⎩ai · γ
⎧⎨
⎩˜bi · γ
(cid:2)
(cid:2)
j∈[1,ξ]
⎫⎬
⎭
⎫⎬
⎭
i∈[1,(cid:4)]
zB
..=
gj · ˜zB,i·ξ+j
A,i +
j∈[1,ξ]
i∈[1,(cid:4)]
Note that this step and step 8 correspond to the Alice-
input, Bob-input, and Alice-input-rush phase in F (cid:4)
2PMul.
2PMul and π(cid:4)
2PMul UC-realizes the function-
2PMul for a κ-bit ﬁeld Zq with s bits of statistical security
COTe-hybrid Random Oracle Model, in the presence
Theorem III.1. The protocol π(cid:4)
ality F (cid:4)
in the F η
of a malicious adversary statically corrupting either party.
Rushing Adversaries. In both F (cid:4)
2PMul we specify that
during the adjustment process, either Alice or Bob may adjust
their value ﬁrst. We do this to ensure that both adjustments
can occur in a single round, without assuming simultaneous
message transmission: in the real world, one party will likely
transmit slightly before the other, but neither party will know
the transmission order until after both messages are sent. Due to
the asymmetry in the equations that the parties use to calculate
their output shares in step 9, however, this pseudo-simultaneous
transmission opens up an opportunity for a rushing adversary
to deprive the simulator of information that it requires to
produce the γ
B message, which necessitates the addition of
the previously-mentioned Alice-input-rush phase in F (cid:4)
2PMul.
Consider a similar functionality that lacked the ﬁnal phase
(always using the Alice-input phase when Alice adjusts her
input), and imagine the procedure of the simulator S P∗
Mul that
simulates against Alice and plays the role of the ideal adversary
for F (cid:4)
2PMul will
communicate Alice’s output zA to S P∗
then
Mul must
calculate an adjustment value γ
B that causes the output in
her view to be equal to the value zA returned by F (cid:4)
2PMul. In
other words, γ
2PMul. If Bob adjusts his output ﬁrst, then F (cid:4)
Mul. S P∗
B must satisfy
⎧⎪⎪⎨
⎪⎪⎩
zA,i − 
j∈[1,ξ]
ai
γ
B =
gj · ˜zA,i·ξ+j
⎫⎪⎪⎬
⎪⎪⎭
i∈[1,(cid:4)]
At this point, zA and ˜zA should be known to the simulator, but
since Alice has not yet transmitted her adjustment message,
the simulator should not know a, and consequently the correct
value of γ
B cannot be calculated. We remedy this by compelling
Alice to determine her own output zA in the functionality if
and only if she performs her adjustment second. Consequently
S P∗
Mul can choose γ
B uniformly, and Alice’s adjustment message
γ
A subsequently ﬁxes her output zA and thereby allows her
input to be extracted via the above equation. Note that when
simulating against Bob, and equivalent problem does not occur,
since the equation Bob uses to adjust his output value does not
involve his input value. We formalize the intuition presented
here in the full version of this paper.
A and γ
Round Count. As we have mentioned, our multiplication
protocol π(cid:4)
2PMul requires an additional round relative to the
protocol of Doerner et al. This third round is necessitated
by the proof of security and not the protocol per se: the
adjustment messages γ
B have no data dependency
upon the random multiplication that precedes them. However,
an adversary with some knowledge of their counterparty’s
input could potentially use that knowledge in combination
with the adjustment messages to compromise the random
multiplication in some way, were the adjustment messages sent
before the random multiplication is complete. In the context
of the multiparty ECDSA signing protocol that we present in
Section V, the parties’ multiplication inputs are information-
theoretically hidden prior to the multiplications themselves,
and consequently, we can optimize the multiplication process
slightly by sending the adjustment messages simultaneously
with the randomized multiplication, saving one round.
Cost Comparison to Prior Work. Our multiplication protocol
incurs a cost of κ + 2s OT invocations per batched input,
or (cid:5) · (κ + 2s) for a batch of size (cid:5). On the other hand,
the encoding scheme used by Doerner et al.’s multiplication
protocol speciﬁes codewords of size 2κ + 2s, which implies a
cost of 2κ + 2s OT instances per multiplication. In practice,
it is reasonable to choose κ = 256 and s = 80, under which
parameterization our protocol yields a savings of more than
38% in terms of OT instances.
IV. MULTIPARTY MULTIPLICATION
In this section, we compose multiple instances of the two-
party multiplication functionality F (cid:4)
2PMul in order to form a
t-party multiplication protocol. Although we are aware of no
previous papers that describe it speciﬁcally, the general tech-
nique of composing two-party multipliers to form multiparty
multipliers has been in the folklore of MPC since time out of
mind. Nevertheless, we give a full account of the functionality
and protocol, and in the full version of this paper we give a
proof of security.
Speciﬁcally, the ability of a malicious party playing the role
of Alice to deﬁne its own output by rushing while interacting
with F (cid:4)
2PMul implies that an adversary that can do the same
in the t-party setting, so long as at least one corrupted party
plays the role of Alice. For simplicity, our functionality will
assume that this is always the case and unconditionally allow
corrupted parties to deﬁne their own output. In addition, we
make the assumption in our functionality that the adversary
can withhold or delay the output to any honest party (by, for
example, refusing to engage in a required instance of F (cid:4)
2PMul
with that party). This is a simplifying assumption, because our
protocol does not grant an adversary quite so much granularity.
(cid:18)(cid:17)(cid:22)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
We discuss this issue further in the full version of this paper.
Finally, we note the simulator, which we will describe in the
full version of this paper, cannot extract inputs from corrupted
parties individually, but must instead extract the product of
all corrupted parties’ inputs. Consequently, we specify that a
single ideal adversary (the simulator S P∗
Mul) interacts with the
functionality in the corrupted parties’ stead.
In both our functionality and protocol that follows it, a group
of n parties run the setup phase, and any subgroup of t parties
may subsequently compute an additive sharing of a product.
Functionality 5. F (cid:4),t,n
Mul :
This functionality is parameterized by group Zq over which
multiplication is to be performed, the party count n, the
threshold size t, and the batch size (cid:5). The Init phase runs once
with a group of parties {Pi}i∈[1,n], and the Multiplication
and Output phases may be run many times between any
(varying) subgroup of parties indexed by P ⊆ [1, n] such
that |P| = t. An ideal adversary, denoted S P∗
Mul, statically
∗ ⊂ [1, n] such that
corrupts the parties indexed by the set P
|P
∗| < t. Inputs from corrupt parties are provided directly to
the functionality by S P∗
Init: Wait for message (init) from {Pi}i∈[1,n]\P∗ and
from S P∗
Mul. Store (init-complete) in memory and send
(init-complete) to {Pi}i∈[1,n]\P∗ and to S P∗
Mul.
Multiplication: Receive (mult, idmul, P, ai) from each party
Pi for i ∈ P \ P
, and receive (mult, idmul, P, aP∗ , zP∗ )
from S P∗
Mul. If (init-complete) exists in memory but
(output, idmul,·) does not exist in memory, and if aP∗ ∈ Z(cid:4)
and ai ∈ Z(cid:4)
q
, and all parties agree to the
same set P, then sample
Mul as a single, combined value.
q for all i ∈ P \ P
∗
∗
uniformly subject to
⎧⎨
⎩zP∗,j +
(cid:2)
i∈P\P∗
|P\P∗|×(cid:4)
q
{zi}i∈P\P∗ ← Z
⎧⎨
⎫⎬
⎩aP∗,j ·
⎭
zi,j
=
!
j∈[1,(cid:4)]
ai,j
i∈P\P∗