### Table 4: Total Running Time and Online Time (in Parentheses) in Seconds of Our Semi-Honest Multi-Party PSI for the Number of Parties \( n \), with \( t < n \) Dishonestly Colluding, Each with Set Size \( m \)

| \( n \) | \( t \) | \( m = 2^{12} \) | \( m = 2^{16} \) | \( m = 2^{20} \) | \( m = 2^{24} \) |
|---|---|---|---|---|---|
| 3 | 1 | 1.99 (1.79) | 3.44 (3.23) | 4.87 (4.61) | 2.97 (2.71) |
| 3 | 2 | 8.79 (8.47) | 12.33 (11.98) | 4.28 (3.97) | 13.47 (12.79) |
| 3 | 2 | 20.61 (20.02) | 10.48 (9.96)* | 11.25 (10.73) | 12.40 (11.71) |
| 3 | 2 | 17.47 (16.74) | 13.76 (13.06) | 20.29 (19.56) | 25.52 (24.79) |
| 3 | 2 | 26.42 (25.73) | 76.43 (75.78) | 112.8 (112.1) | 39.11 (38.60) |
| 3 | 2 | 150.85 (150.31) | 263.20 (262.67) | 25.81 (25.23)* | 41.64 (41.10) |
| 3 | 2 | 28.86 (28.27) | 52.25 (51.65) | 32.13 (31.49) | 49.17 (48.54) |
| 3 | 2 | 71.28 (70.60) | 46.08 (45.28) | 136.48 (135.44) | 182.8 (181.60) |
| 3 | 2 | 64.28 (63.27) | 201.12 (199.34) | 304.36 (302.17) | 129.45 (128.64)* |
| 3 | 2 | 158.50 (157.64) | 151.9 (150.9) | 233.1 (232.1) | 185.5 (184.5) |
| 3 | 2 | 290.9 (289.8) | 378.5 (377.4) | 400.9 (399.8) | 1,194 (1,193) |
| 3 | 2 | 1,915 (1,914) | 664.08 (662.80) | 2,641 (2,640) | - |
| 3 | 2 | 409.90 (399.67)* | 702.3 (69.69) | 484.3 (478.2) | 865.7 (859.4) |
| 3 | 2 | 505.2 (499.2) | - | - | - |

* Denotes the performance of the optimized 3-PSI protocol described in Section 6.3. Cells with `-` denote trials that either took longer than one hour or ran out of memory.

### 7.2 Standard Semi-Honest PSI

In this section, we discuss the standard semi-honest variant of our protocol, which utilizes conditional zero-sharing (Section 5). Based on empirical results from the previous section, the most efficient Oblivious Pseudorandom Function (OPPRF) instantiation is the TABLE-based hint. Therefore, the OPPRF was implemented using the TABLE-based protocol in this section.

To evaluate the scalability of this protocol, we tested it with a range of the number of parties \( n \in \{3, 4, 5, 10, 15\} \) and set sizes \( m \in \{2^{12}, 2^{16}, 2^{20}, 2^{24}\} \). We also examined the performance impact of the generalization discussed in Section 5.3, where the protocol is tuned to tolerate an arbitrary number \( t \) of corrupted parties. In our experiments, we used \( t \in \{1, \lfloor n/2 \rfloor, n-1\} \).

Our protocol scales well using multi-threading between \( n \) parties. In our implementation, the leader \( P_1 \) uses \( n-1 \) threads, and other parties use \( \min\{t+1, n-1\} \) threads, allowing each party to operate the OPPRF protocol with other parties simultaneously. However, we use a single thread to perform the OPPRF sub-protocol between two parties.

We proposed a more efficient "hashing to bin" scheme (Appendix B) compared to the state-of-the-art two-party PSI [26]. Specifically, our hashing scheme eliminates the stash bins, which significantly reduce the cost of the protocol for small sets. For example, with a set size of \( 2^{12} \), our protocol requires 168 milliseconds, compared to 211 milliseconds by [26], a 1.2× improvement.

### Results

Table 4 presents the running time of our PSI protocol in both LAN and WAN settings. We report the total running time and the online phase. The offline phase includes all operations that do not depend on the input sets. In the three-party case, our protocol supports a fully corrupted majority. For \( m = 2^{20} \), our general 3-PSI protocol (Section 5) in a LAN setting costs 42 seconds, while the optimized protocol (Section 6.3) takes 26 seconds, a 1.6× speedup. In a WAN setting, the optimized variant is 1.2× faster, primarily due to the need to wait for the previous OPPRF to complete.

To address the possibility of up to \( t \) parties colluding, each party performs OPPRF with \( \min\{t+1, n-1\} \) other parties. Therefore, the cost of the protocol is the same for \( t = n-1 \) and \( t = n-2 \). Hence, we report the protocol performance with \( n = 4 \) and \( t \in \{2, 3\} \) in the same row of Table 4.

As shown in Table 4, our protocol requires only 72 seconds to compute a PSI for \( n = 5 \) parties with \( m = 2^{20} \) elements. For the same set size, increasing the number of parties to \( n = 10 \) results in a total running time of 3 minutes, and for \( n = 15 \), the protocol takes around 5 minutes. Figure 11 illustrates that the protocol's cost is linear with the number of parties. Assuming only one corrupt party, our protocol takes 64 seconds to compute a PSI for 15 parties with \( m = 2^{20} \) elements. For a small set size of \( m = 2^{12} \), the PSI protocol for 15 parties takes a total time of 1.85 seconds, with the online phase taking 1.32 seconds. Our protocol also scales to large input sets (\( m = 2^{24} \)) with \( n \in \{3, 4, 5\} \) participants.

### Table 5: Numerical Communication (in MB) of Our Multi-Party PSI in Semi-Honest Setting

| \( n \) | \( t \) | \( m = 2^{12} \) | \( m = 2^{16} \) | \( m = 2^{20} \) | \( m = 2^{24} \) |
|---|---|---|---|---|---|
| 3 | 1 | 3.28 | 51.87 | 935.32 | 4.92 |
| 3 | 2 | 4.92 | 6.56 | 9.84 | 14.76 |
| 3 | 2 | 13.12 | 22.96 | 77.80 | 77.80 |
| 3 | 2 | 103.74 | 155.61 | 233.41 | 207.48 |
| 3 | 2 | 363.09 | 1,402 | 1,402 | 1,870 |
| 3 | 2 | 2,805 | 4,208 | 3,741 | 6,547 |
| 3 | 2 | 14,860 | 22,290 | - | - |

Table 5 reports the numerical communication costs of our implementation. The protocol is asymmetric with respect to the leader \( P_1 \) and other parties. Since the leader plays the role of receiver in most OPPRFs, the majority of his communication costs can be done in the offline phase. Hence, we report the communication costs of the clients, which reflect the online cost of the protocol. For a small set size of \( m = 2^{12} \), only 3.28 MB of communication was required in the 3-PSI protocol on the client's side. The communication complexity of our protocols is \( \mathcal{O}(mt\lambda) \) bits. Thus, our protocol requires gigabytes of communication for large set sizes (\( m \in \{2^{20}, 2^{24}\} \)). Specifically, for the large input set \( m = 2^{24} \), our 3-PSI protocol uses 14.8 GB of communication, approximately 0.88 KB per item.

### Acknowledgements

The first author was supported by the Office of Naval Research (ONR) contract number N00014-14-C-0113. The second and third authors were supported by the BIU Center for Research in Applied Cryptography and Cyber Security in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Office. The fourth and fifth authors were partially supported by NSF awards #1149647 and #1617197.

### References

[1] Aydin Abadi, Sotirios Terzis, and Changyu Dong. 2015. O-PSI: Delegated private set intersection on outsourced datasets. In ICT Systems Security and Privacy Protection. Springer, 3–17.

[2] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. 2014. Non-Interactive Secure Computation Based on Cut-and-Choose. In EUROCRYPT 2014 (LNCS), Phong Q. Nguyen and Elisabeth Oswald (Eds.), Vol. 8441. Springer, Heidelberg, Germany, Copenhagen, Denmark, 387–404. https://doi.org/10.1007/978-3-642-55220-5_22

[3] Marina Blanton and Everaldo Aguiar. 2012. Private and Oblivious Set and Multiset Operations. In 7th ACM Symposium on Information, Computer and Communications Security (ASIACCS '12). ACM, New York, NY, USA, 40–41. https://doi.org/10.1145/2414456.2414479

[4] Ran Canetti and Juan A. Garay (Eds.). 2013. CRYPTO 2013, Part II. LNCS, Vol. 8043. Springer, Heidelberg, Germany, Santa Barbara, CA, USA.

[5] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from Homomorphic Encryption. Cryptology ePrint Archive, Report 2017/299. (2017). http://eprint.iacr.org/2017/299

[6] Jung Hee Cheon, Stanislaw Jarecki, and Jae Hong Seo. 2012. Multi-Party Privacy-Preserving Set Intersection with Quasi-Linear Complexity. IEICE Transactions 95-A, 8 (2012), 1366–1378. http://search.ieice.org/bin/summary.php?id=e95-a_8_1366

[7] Dana Dachman-Soled, Tal Malkin, Mariana Raykova, and Moti Yung. 2012. Efficient Robust Private Set Intersection. Int. J. Appl. Cryptol. 2, 4 (July 2012), 289–303. https://doi.org/10.1504/IJACT.2012.048080

[8] Emiliano De Cristofaro, Jihye Kim, and Gene Tsudik. 2010. Linear-Complexity Private Set Intersection Protocols Secure in Malicious Model. Springer Berlin Heidelberg, Berlin, Heidelberg, 213–231. https://doi.org/10.1007/978-3-642-17373-8_13

[9] Changyu Dong, Liqun Chen, and Zikai Wen. 2013. When Private Set Intersection Meets Big Data: An Efficient and Scalable Protocol. In ACM Conference on Computer & Communications Security (CCS '13). ACM, 789–800. https://doi.org/10.1145/2508859.2516701

[10] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. 2016. Efficient Set Intersection with Simulation-Based Security. J. Cryptology 29, 1 (2016), 115–155. https://doi.org/10.1007/s00145-014-9190-0

[11] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. 2005. Keyword Search and Oblivious Pseudorandom Functions. In TCC 2005 (LNCS), Joe Kilian (Ed.), Vol. 3378. Springer, Heidelberg, Germany, Cambridge, MA, USA, 303–324.

[12] Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. 2004. Efficient Private Matching and Set Intersection. In Advances in Cryptology - EUROCRYPT 2004 (Lecture Notes in Computer Science), Vol. 3027. Springer, 1–19. https://doi.org/10.1007/978-3-540-24676-3_1

[13] Ran Gelles, Rafail Ostrovsky, and Kina Winoto. 2012. Multiparty Proximity Testing with Dishonest Majority from Equality Testing. In Automata, Languages, and Programming. Springer, 537–548.

[14] Oded Goldreich. 2009. Foundations of Cryptography: Volume 2, Basic Applications. Cambridge University Press.

[15] Shai Halevi, Yehuda Lindell, and Benny Pinkas. 2011. Secure Computation on the Web: Computing without Simultaneous Interaction. In Advances in Cryptology - CRYPTO 2011 (Lecture Notes in Computer Science), Phillip Rogaway (Ed.), Vol. 6841. Springer, 132–150. https://doi.org/10.1007/978-3-642-22792-9_8

[16] Carmit Hazay and Yehuda Lindell. 2010. Efficient Secure Two-Party Protocols: Techniques and Constructions. Springer Science & Business Media.

[17] Carmit Hazay and Muthuramakrishnan Venkitasubramaniam. 2017. Scalable Multi-Party Private Set-Intersection. Cryptology ePrint Archive, Report 2017/027. (2017). http://eprint.iacr.org/2017/027

[18] Y. Huang, D. Evans, and J. Katz. 2012. Private Set Intersection: Are Garbled Circuits Better than Custom Protocols?. In Network and Distributed System Security (NDSS'12). The Internet Society.

[19] Bernardo A. Huberman, Matt Franklin, and Tad Hogg. 1999. Enhancing Privacy and Trust in Electronic Communities. In Proceedings of the 1st ACM Conference on Electronic Commerce (EC '99). ACM, 78–86.

[20] Stanislaw Jarecki and Xiaomin Liu. 2009. Efficient Oblivious Pseudorandom Function with Applications to Adaptive OT and Secure Computation of Set