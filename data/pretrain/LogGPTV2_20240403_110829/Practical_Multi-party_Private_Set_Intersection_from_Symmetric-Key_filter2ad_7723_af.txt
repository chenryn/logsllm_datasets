1.99 (1.79)
3.44 (3.23)
4.87 (4.61)
2.97(2.71)
8.79 (8.47)
12.33 (11.98)
4.28 (3.97)
13.47 (12.79)
20.61 (20.02)
10.48 (9.96)*
11.25 (10.73)
12.40 (11.71)
17.47 (16.74)
13.76 (13.06)
20.29 (19.56)
25.52 (24.79)
26.42 (25.73)
76.43 (75.78)
112.8 (112.1)
39.11 (38.60)
150.85 (150.31)
263.20 (262.67)
25.81 (25.23)*
41.64 (41.10)
28.86 (28.27)
52.25 (51.65)
32.13 (31.49)
49.17 (48.54)
71.28 (70.60)
46.08 (45.28)
136.48 (135.44)
182.8 (181.60)
64.28 (63.27)
201.12 (199.34)
304.36 (302.17)
129.45 (128.64)*
158.50 (157.64)
151.9 (150.9)
233.1 (232.1)
185.5 (184.5)
290.9 (289.8)
378.5 (377.4)
400.9 (399.8)
1,194 (1,193)
1,915 (1,914)
664.08 (662.80)
2641 ( 2,640)
-
409.90 (399.67)*
702.3 (69.69)
484.3 (478.2)
865.7(859.4)
505.2 (499.2)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Table 4: Total running time and online time (in parenthesis) in second of our semi-honest Multi-Party PSI for the number
of parties n, t < n dishonestly colluding, each with set size m. Number with ∗ shows the performance of the optimized 3-PSI
protocol described in Section 6.3. Cells with − denote trials that either took longer than hour or ran out of memory.
7.2 Standard Semi-Honest PSI
In this section we discuss the standard semi-honest variant of our
protocol, using conditional zero-sharing (Section 5). From the em-
pirical results discussed in the previous section, the most efficient
OPPRF instantiation is the TABLE-based hint. Thus, the OPPRF
was instantiated using the TABLE-based protocol in this section.
To understand the scalability of this protocol, we evaluate it
on the range of the number parties n ∈ {3, 4, 5, 10, 15} on the set
size m ∈ {212
, 224}. We also wanted to understand the
performance effect of the generalization discussed in Section 5.3
in which the protocol is tuned to tolerate an arbitrary number t of
corrupted parties. In our experiments, we used t ∈ {1, ⌊n/2⌋, n − 1}.
Our protocol scales well using multi-threading between n parties.
In our implementation, the leader P1 uses n − 1 threads and other
, 216
, 220
parties use min{t + 1, n − 1} threads so that each party operates
OPPRF protocol with other parties at the same time. However, we
use a single thread to perform the OPPRF subprotocol between two
parties.
We proposed a better “hashing to bin" scheme (Appendix B)
than the state-of-art two-party PSI [26]. Specifically, our hashing
scheme removes the stash bins which consume nontrivial cost of
the protocol [26] for sufficiently small sets. For example of 212 set
size, we see that our protocol requires 168 milliseconds compared
to 211 milliseconds by [26], a difference of 1.2×.
Results. Table 4 presents the running time of our PSI protocol
in both LAN and WAN setting. We report the running time for
the total time and online phase. The offline phase consists of all
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1268300
240
180
120
60
30
d
n
o
c
e
s
n
i
e
m
i
t
g
n
i
n
u
R
t = 1
t = ⌊n/2⌋
t = n − 1
3
4
5
10
15
Number of parties n
Figure 11: Total running time of our semi-honest Multi-
Party PSI for the number of parties n, t < n dishonestly col-
luding, each with set size 220, in LAN setting.
Number
Threshold
Parties n Corruption t
3
{4, 5}
{10, 15}
4
5
{1, 2}
1
{2, 3}
2
4
5
9
7
14
10
15
212
Set Size m
220
216
3.28
51.87
935.32
4.92
4.92
6.56
9.84
14.76
13.12
22.96
77.80
77.80
103.74
155.61
233.41
207.48
363.09
1,402
1,402
1,870
2,805
4,208
3,741
6,547
224
14,860
22,290
-
-
-
-
-
-
-
Table 5: The numerical communication (in MB) of our Multi-
Party PSI in semi-honest setting. The cost is on the client’s
side for the number of parties n, t < n dishonestly colluding,
each with set size m. Communication costs ignore the fixed
cost of base OTs for OT extension. Cells with − denote trials
that either took longer than hour or ran out of memory.
operations which do not depend on the input sets. In the three-
party case, our protocol supports the full corrupted majority. For
m = 220, our general 3-PSI protocol ( Section 5) in LAN setting
costs 42 seconds while the optimized protocol (Section 6.3) takes 26
seconds which is 1.6× faster. When evaluating our 3-PSI in WAN
setting, we found this optimized variant to be 1.2× faster. This is
primarily due to the need to wait for previous OPPRF completed.
To address the possibility of at most t parties colluding, each
party performs OPPRF with min{t +1, n−1} other parties. Therefore
the cost of the protocol is the same for t = n − 1 as t = n − 2. Hence,
we report the protocol performance with the n = 4 and t ∈ {2, 3}
on the same row of the Table 4.
As we can see in the table 4, our protocol requires only 72 seconds
to compute a PSI of n = 5 parties for m = 220 elements. For the same
set size, when increasing the number of parties to n = 10, our total
running time is 3 minutes and if n = 15 our protocol takes around
5 minutes. Figure 11 shows that our protocol’s cost is linear in the
size of number parties. When assuming only one corrupt party, our
protocol takes only 64 seconds to compute PSI of 15 parties for
m = 220 elements. For the small set size of m = 212, the PSI protocol
of n = 15 parties takes an total time of 1.85 seconds with the online
phase taking 1.32 seconds. We find that our protocol also scales to
large input sets (m = 224) with n ∈ {3, 4, 5} participants.
Table 5 reports the numerical communication costs of our imple-
mentation. The protocol is asymmetric with respect to the leader
P1 and other parties. Because the leader plays the role of receiver
in most OPPRFs, the majority of his communication costs can be
done in an offline phase. Hence we report the communication costs
of the clients, which reflects the online cost of the protocol. For the
small set size of m = 212, only 3.28MB communication was required
in 3-PSI protocol on the client’s sides. The communication com-
plexity of our protocols is 𝒪(mtλ) bits. Thus, our protocol requires
gigabytes of communication for a large set size (m ∈ {220
, 224}).
Concretely, for the large input set m = 224, our 3-PSI protocol uses
14.8GB of communication, roughly 0.88KB per item.
ACKNOWLEDGEMENTS
The first author was supported by Office of Naval Research (ONR)
contract number N00014-14-C-0113. The second and third authors
were supported by the BIU Center for Research in Applied Cryp-
tography and Cyber Security in conjunction with the Israel Na-
tional Cyber Bureau in the Prime Minister’s Office. The fourth and
fifth author were partially supported by NSF awards #1149647 and
#1617197.
REFERENCES
[1] Aydin Abadi, Sotirios Terzis, and Changyu Dong. 2015. O-PSI: delegated private
In ICT Systems Security and Privacy
set intersection on outsourced datasets.
Protection. Springer, 3–17.
[2] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. 2014. Non-
Interactive Secure Computation Based on Cut-and-Choose. In EUROCRYPT 2014
(LNCS), Phong Q. Nguyen and Elisabeth Oswald (Eds.), Vol. 8441. Springer, Hei-
delberg, Germany, Copenhagen, Denmark, 387–404. https://doi.org/10.1007/
978-3-642-55220-5_22
[3] Marina Blanton and Everaldo Aguiar. 2012. Private and Oblivious Set and
Multiset Operations. In 7th ACM Symposium on Information, Computer and
Communications Security (ASIACCS ’12). ACM, New York, NY, USA, 40–41.
https://doi.org/10.1145/2414456.2414479
[4] Ran Canetti and Juan A. Garay (Eds.). 2013. CRYPTO 2013, Part II. LNCS, Vol. 8043.
[5] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from
Homomorphic Encryption. Cryptology ePrint Archive, Report 2017/299. (2017).
http://eprint.iacr.org/2017/299.
Springer, Heidelberg, Germany, Santa Barbara, CA, USA.
[6] Jung Hee Cheon, Stanislaw Jarecki, and Jae Hong Seo. 2012. Multi-Party Privacy-
Preserving Set Intersection with Quasi-Linear Complexity. IEICE Transactions
95-A, 8 (2012), 1366–1378. http://search.ieice.org/bin/summary.php?id=e95-a_8_
1366
[7] Dana Dachman-Soled, Tal Malkin, Mariana Raykova, and Moti Yung. 2012. Effi-
cient Robust Private Set Intersection. Int. J. Appl. Cryptol. 2, 4 (July 2012), 289–303.
https://doi.org/10.1504/IJACT.2012.048080
[8] Emiliano De Cristofaro, Jihye Kim, and Gene Tsudik. 2010. Linear-Complexity
Private Set Intersection Protocols Secure in Malicious Model. Springer Berlin Heidel-
berg, Berlin, Heidelberg, 213–231. https://doi.org/10.1007/978-3-642-17373-8_13
[9] Changyu Dong, Liqun Chen, and Zikai Wen. 2013. When Private Set Inter-
section Meets Big Data: An Efficient and Scalable Protocol. In ACM Confer-
ence on Computer &#38; Communications Security (CCS ’13). ACM, 789–800.
https://doi.org/10.1145/2508859.2516701
[10] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. 2016.
Efficient Set Intersection with Simulation-Based Security. J. Cryptology 29, 1
(2016), 115–155. https://doi.org/10.1007/s00145-014-9190-0
[11] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. 2005. Key-
word Search and Oblivious Pseudorandom Functions. In TCC 2005 (LNCS), Joe
Kilian (Ed.), Vol. 3378. Springer, Heidelberg, Germany, Cambridge, MA, USA,
303–324.
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1269[12] Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. 2004. Efficient Private
Matching and Set Intersection. In Advances in Cryptology - EUROCRYPT 2004
(Lecture Notes in Computer Science), Vol. 3027. Springer, 1–19. https://doi.org/10.
1007/978-3-540-24676-3_1
[13] Ran Gelles, Rafail Ostrovsky, and Kina Winoto. 2012. Multiparty proximity
testing with dishonest majority from equality testing. In Automata, Languages,
and Programming. Springer, 537–548.
[14] Oded Goldreich. 2009. Foundations of cryptography: volume 2, basic applications.
Cambridge university press.
[15] Shai Halevi, Yehuda Lindell, and Benny Pinkas. 2011. Secure Computation on the
Web: Computing without Simultaneous Interaction. In Advances in Cryptology -
CRYPTO 2011 (Lecture Notes in Computer Science), Phillip Rogaway (Ed.), Vol. 6841.
Springer, 132–150. https://doi.org/10.1007/978-3-642-22792-9_8
[16] Carmit Hazay and Yehuda Lindell. 2010. Efficient secure two-party protocols:
Techniques and constructions. Springer Science & Business Media.
[17] Carmit Hazay and Muthuramakrishnan Venkitasubramaniam. 2017. Scalable
Multi-Party Private Set-Intersection. Cryptology ePrint Archive, Report 2017/027.
(2017). http://eprint.iacr.org/2017/027.
[18] Y. Huang, D. Evans, and J. Katz. 2012. Private Set Intersection: Are Garbled Cir-
cuits Better than Custom Protocols?. In Network and Distributed System Security
(NDSS’12). The Internet Society.
[19] Bernardo A. Huberman, Matt Franklin, and Tad Hogg. 1999. Enhancing Privacy
and Trust in Electronic Communities. In Proceedings of the 1st ACM Conference
on Electronic Commerce (EC ’99). ACM, 78–86.
[20] Stanislaw Jarecki and Xiaomin Liu. 2009. Efficient Oblivious Pseudorandom
Function with Applications to Adaptive OT and Secure Computation of Set