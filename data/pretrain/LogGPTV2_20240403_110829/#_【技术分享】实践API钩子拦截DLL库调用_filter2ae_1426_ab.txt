    _dll_exit:
    ret
代码段包含所有库函数和DLL入口点函数。这是一个特殊的函数，它在库加载以后被Windows系统函数调用。代码段需要被标记上可执行的标记，以此来告诉操作系统这段内存区域包含可以执行的代码段。如果没有这样标记，那么任何想从这块内存区域执行代码的行为都会以触发CPU处理器的DEP（Data
Execution Prevention）内存保护机制而告终。在初始化函数内部（DllMain）,接收到 DLL_PROCESS_ATTACH
事件后我们将使用原始DLL库名称来获得他的句柄，也就是 HMODULE （这样之后就可以被调用了）。
代码清单6：过度优化保护
    ; 调用任何原始库
    ; BlackBox_org.dll 中的函数, 没有它FASM编译器就会
    ; 移除对库的引用并且不会被自动加载
    calldummy
我们自定义的库会调用到原始库，但是如果我们一点引用也不放在源代码中，FASM编译器会移除所有对它的引用（优化）而且原始库并不会被自动加载，这就是为什么在ret指令后直接放了一个伪调用的缘故（这样在任何时候都不会执行）。
代码清单7：有效的Divide()函数代码
    ;-------------------------------------------------    ; 我们修改后能够处理除0错误的Divide() 函数
    ;-------------------------------------------------    proc Divide Number1, Number2, Result
    ; 检查除数是否为0
    ; 如果是的话返回ERROR代码
    movecx,[Number2]
    testecx,ecx
    jeDivisionError
    ; 将第一个数字载入 EAX 处理器
    moveax,[Number1]
    ;扩展 EDX 寄存器来处理有符号数
    cdq
    ; 现在 EDX:EAX 寄存器对可以处理64位数据了
    ; EDX:EAX / ECX 除法的实现, 除法在EDX:EAX寄存器对
    ; 上实现，就像对待64位数据一样, 除法的结果保存在EAX
    ; 寄存器中, 余数保存在EDX 寄存器中
    idiv ecx
    ; 检查有效的指向结果的指针
    ; 如果没有检测到则返回error 代码
    movedx,[Result]
    testedx,edx
    jeDivisionError
    ; 在受保护的地址存储除法的结果
    mov[edx],eax
    ; 以 exit code TRUE (1) 返回
    moveax,1
    jmpDivisionExit
    ; 除法错误，返回FALSE (0)
    DivisionError:
    sub eax,eax
    DivisionExit:
    ; 从除法函数中返回
    ; 布尔型的exit 代码被设置在 EAX 寄存器中
    ret
    endp
修改后的Divide()函数的实现增添了对除0错误的校验，函数遇到错误会返回错误代码FALSE，另外还额外做了对指向结果变量result的指针非空检查，如果指针指向null也会报错。另外请注意，修改后的函数的调用惯例与原函数是完全一致的，并且在我们的这个例子中使用的是stdcall惯例，所以函数参数被传递到栈中，函数返回值储存于EAX寄存器，栈指针也被FASM编译器自动修复，方法是根据源代码中的ret声明生成ret
(number_of_parameters * 4)指令。
代码清单8：库的导入表
    ;-------------------------------------------------    ; 我们的库使用的函数段
    ;-------------------------------------------------    section '.idata' import data readable writeable
    ; 在代码中用到的库的列表
    library kernel,'KERNEL32.DLL',
    blackbox, 'BlackBox_org.dll'
    ; KERNEL32.dll库的函数列表
    importkernel,
    GetModuleHandleA, 'GetModuleHandleA'
    ; 声明了原始库的用途
    ; DLL 库会被自动加载
    importblackbox,
    dummy, 'Divide'
FASM编译器允许我们手动地定义我们自己的库调用到的库和函数，除了标准系统库，我们需要在这里添加一个对 BlackBox.dll
的引用。多亏于此，当Windows加载我们的钩子库的同时也会根据地址空间加载原始库，从而无需再手动调用 LoadLibraryA() 函数来加载它。
在某些情况下想要使用导入表来加载库甚至是强制性要求使用 LoadLibraryA() 的，它需要使用多线程应用程序中TLS（Thread Local
Storage）机制的动态链接库来支持。
代码清单9：函数导出表
    ;-------------------------------------------------    ; 导出表段包含我们的库中导出的函数
    ; 这里我们也许要声明原始库中声明的函数
    ;-------------------------------------------------    section '.edata' export data readable
    ; 导出函数列表及其指针
    export'BlackBox.dll',
    Sum, 'Sum',
    Divide, 'Divide'
    ; 转发表名称, 首先目的库被存储 (无需.DLL扩展)
    ; 然后最终的函数名称被存储
    Sum db 'BlackBox_org.Sum',0
在这个段中我们必须声明原始库中的所有函数，而且我们想要钩取的函数必须在代码中得以应用，想要传递给原始库的函数存储在一个特殊的文本格式中：
DestinationDllLibrary.FunctionName
或
DestinationDllLibrary.#1
以此来顺序导入函数而非按照名称的顺序。该机制的所有内部工作均交由Windows系统自身处理。以上为DLL转发。
代码清单10：重定位部分
    ;-------------------------------------------------    ; 重定位部分
    ;-------------------------------------------------    section '.reloc' fixups data discardable
我们的库中最后一个段是重定位段，它保证了我们的库能够正常运行。这是因为动态链接库被加载的基地址是非常多变的，而引起这个多变性的原因在于指针使用的绝对地址和汇编器的指令使用的绝对地址必须根据当前内存中的基地址做出更新，而这个基地址的信息正是由编译器在重定位段中生成的。
**总结**
这篇API钩子介绍的方法可以被成功应用于各种使用动态链接库的场合，较传统的经典API钩子方法而言各有利弊，但是在我看来本文的方法为实践打开了更大的拓展空间，并提供了一种更加简单的改变软件完整功能性的方法。该方法同样可以在高级语言中以适当的导出函数定义文件（DEF）的方式实现。