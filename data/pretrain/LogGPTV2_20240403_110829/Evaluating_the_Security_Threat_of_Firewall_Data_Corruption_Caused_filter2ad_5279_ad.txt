### Cache Replacement and Idle Time
- **Instruction Rate (Cache W'/sec)**: Assuming a uniform cache miss with a 1% miss rate, an instruction in the cache can be replaced at a rate of \(10 \times 10^{-4} \times 1\% = 10^{-6}\) instructions per second. The idle time is equivalent to this replacement rate.
- **Processing Rate (Packets/sec)**: The rate for workload processing is 10 packets per second.

### Job Dispatch and Workload Distribution
- **Job Dispatch**: Jobs are dispatched 10 times every second.
- **Workload Distribution**:
  - **Firewall Utilization**: [0.1, 0.8]
  - **Non-Firewall Workload**: [0, 0.1, 0.2]

### Idle Time Distributions
- **Idle Time from Firewall Execution**: [0, 0.9]
- **Execution Distribution**:
  - **Temporary Security Vulnerability**: 2%
  - **Permanent Security Vulnerability**: 0.05%
  - **System Crash**: 20.22%

### Outcome Manifestations
- **Crash/Hang**:
  - **No Manifestation**: 77.73% (Error not manifested)
  - **Manifestation**: 30% (System crash)
- **No Manifestation**: 70% (Error not manifested)

### Non-Firewall Workload Execution
- **Distribution of Outcomes**:
  - **Vulnerability Rates**: Obtained from error injection experiments (Refer to Table 2).
  - **Data Presentation**: Due to space limitations, only a subset of the data corresponding to combinations of firewall and non-firewall utilization is presented.

### Observations
1. **Without Non-Firewall Workload**:
   - The rate of vulnerability remains relatively unchanged, with mean values of 14.9/year for temporary security vulnerabilities and 0.37/year for permanent security vulnerabilities across 20 firewalls.
2. **With Non-Firewall Workload**:
   - The presence of non-firewall workload on the firewall machine reduces the rate of both temporary and permanent security vulnerabilities. This is because the additional workload increases the chance of erroneous instructions being evicted from the cache.
3. **Processor Utilization Impact**:
   - For a given firewall processor utilization, the rates of both temporary and permanent security vulnerabilities decrease with increasing non-firewall workload.

### Temporary Window of Vulnerability
- **Rate of Malicious Packets**: The mean number of malicious packets that can penetrate the firewall during a temporary window of vulnerability as a function of the firewall processor utilization and the percentage of non-firewall workload.
- **Malicious Packet Percentage**: Studies indicate that about 30% of network bandwidth can be taken by attacks, which is not unusual.
- **Impact of Non-Firewall Workload**:
  - **Example**: For 50% firewall processor utilization, the mean number of malicious packets penetrating the firewall drops from around 7 (no non-firewall workload) to around 6 packets (10% non-firewall workload) and around 5 packets (20% non-firewall workload).

### Distribution of Malicious Packets
- **Figure 10**:
  - **Left Panel**: Distribution of the number of malicious packets during a temporary window of vulnerability with 0% non-firewall workload.
  - **Right Panel**: Distribution with 10% non-firewall workload.
  - **Observation**: In the absence of non-firewall workload, the distribution has a longer tail (about 5% of the windows allow more than 11 malicious packets). With 10% non-firewall workload, the tail is shorter (about 5% of the windows allow more than 9 malicious packets).

### Security Violations
- **Frequency of Security Violations**:
  - **Questions**:
    - How significant are error-caused security vulnerabilities compared to those due to software bugs or system misconfiguration?
    - Given the fraction of malicious packets in the packet stream, how likely is it that a sufficient number of malicious packets (in our case, 5 or more) will get through the firewall to initiate and execute an actual attack?

### Published Vulnerabilities in Major Operating Systems
- **Table 4**: Rate of kernel-related security vulnerabilities for RedHat Linux 7.x, Solaris 2.6, and Windows 2000.
- **Conclusion**: Error-caused security vulnerabilities may cause effective damage to the network and the machines behind the firewall, making them a non-negligible threat to highly secure systems.

### Acknowledgments
- **Support**: This work is supported in part by NSF Grant CCR 00-86096 ITR, a grant from Motorola Inc., and MURI Grant NOOOI4-01-1-0576.

### References
- **[1]** R. Anderson and M. G. Kuhn. "Tamper Resistance - a Cautionary Note". Proc. The Second USENIX Workshop on Electronic Commerce. Oakland, CA, Nov. 1996.
- **[2]** Dan Boneh, Richard A DeMillo, et al. "On the Importance of Eliminating Errors in Cryptographic Computations". Advances in Cryptology: Eurocrypt '97, pp.37-51, 1997.
- **[3]** A. Ghosh, T. O'Connor, et al. "An Automated Approach for Identifying Potential Vulnerabilities in Software". IEEE Symp. on Security and Privacy, Oakland, CA, May 1998.
- **[4]** R. L. Rivest, A. Shamir, and L. Adleman. "A method for obtaining digital signatures and public key cryptosystem". Communications of the ACM, 21(2):120-126, Feb. 1978.
- **[5]** D. T. Stott, B. Floering, et al. "Dependability Assessment in Distributed Systems with Lightweight Fault Injectors in NFTA PE". Proc. IEEE Int'l Computer Performance and Dependability Symp., pages 91-100, Mar. 2000.
- **[6]** J. Xu, S. Chen, et al. "An Experimental Study of Security Vulnerabilities Caused by Errors". Proc. of Intt' Con/. on Dependable Systems and Networks, GÃ¶teborg, Sweden, 2001.
- **[7]** P. Kochar, J. Jaffe, B. Jun. "Differential Power Analysis: Leaking Secrets". in Crypto '99.
- **[8]** R. Russell. "Linux IPCHAINS-HOWTO". http://netfilter.samba.org/ipchains/HOWTO.html
- **[9]** Y. He and A. Avizienis. "Assessment of the applicability of COTS microprocessors in high-confidence computing systems: A case study". Proc. ICDSN 2000, June 2000.
- **[10]** M. Rimen, J. Ohlsson et al. "On Microprocessor Error Behavior Modeling". Proc. IEEE International Symp. on Fault-Tolerant Computing (FTCS-24). June 1994.
- **[11]** H. Cha, E. Rudnick, J. Patel et al. "A gate-level simulation environment for alpha-particle-induced transient faults". IEEE Transactions on Computers, 45(11). November 1996.
- **[12]** G. Choi, R. Iyer and D. Saab. "Fault Behavior Dictionary for Simulation of Device-level Transients". Proc. IEEE International Conference on Computer-Aided Design, 1993.
- **[13]** I. Lee, R. Iyer and D. Tang. "Error/Failure Analysis Using Event Logs from Fault Tolerant Systems". Proc. of IEEE International Symposium on Fault-Tolerant Computing (FTCS-21), pages 10-17. June 1991.
- **[14]** R. Ortalo, Y. Deswarte and M. Kaaniche, "Experimenting with Quantitative Evaluation Tools for Monitoring Operational Security," IEEE Transactions on Software Engineering, vol. 25, no. 5, pp.633-650, Sept. 1999.
- **[15]** D. Daly, D. D. Deavours, et al. "Mobius: An Extensible Tool for Performance and Dependability Modeling," Proceedings of the 11th International Conference, TOOLS 2000, Schaumburg, IL, March, 2000.
- **[16]** http://www.securityfocus.com. 12/30/2001.
- **[17]** Microsoft Product Security. FrontPage Server Extension Sub-Component Buffer Overflow Vulnerability. http://www.securiteam.com/windowsntfocus/5YPOMOU4KA.html.
- **[18]** D. Patterson and J. Hennessy. Computer Architecture: A Quantitative Approach. 2nd Ed. pp384. Morgan Kaufmann Publishers, Inc. 1996.
- **[19]** G. Xu and H. Zhang. "Advanced Methods for Detecting Unusual Behaviors on Networks in Real-Time" Proc. of IEEE International Conference on Communication Technology, WCC-ICCT 2000, pp: 291-295 vol. 1 2000.

---

This revised text is more structured, clear, and professional, making it easier to understand and follow.