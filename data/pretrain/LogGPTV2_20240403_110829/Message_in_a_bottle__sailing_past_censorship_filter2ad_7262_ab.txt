### Distributing the Software Bundle

To utilize the miab software, Alice needs a copy of the software and Bob’s public key. The public key should remain relatively static, allowing it to be distributed alongside the software. This bundle can be downloaded in plaintext before the Censor becomes overly restrictive. Alternatively, it can be distributed via USB drives or spam. Additionally, the bundle can be published in multiple online locations, encoded in various formats (e.g., DeCSS code diffusion [1]), making it difficult for the Censor to identify and block all instances. In such cases, Alice should collect several bundles and compare them to reduce the risk of using a bundle disseminated by the Censor. However, this risk cannot be entirely eliminated, as the Censor is likely to possess a copy of the software.

The initial need for the software bundle is a limitation of miab. Distributing the software and establishing a root of trust is a fundamental challenge with no easy solution, affecting many related works (e.g., Collage, Tor – see Section 7). Nevertheless, miab addresses this issue by requiring updates only in exceptional circumstances (e.g., if Bob’s key has expired), making it suitable for bootstrapping other protocols and distributing rendezvous points. While Telex shares this property, it requires ISP collaboration for deployment, which miab does not.

### Steganographic Scheme

Selecting an appropriate steganographic scheme is crucial for achieving confidentiality and deniability. Ideally, we would use a perfectly secure stegosystem, where the stego object (the object with an embedded hidden message) matches the probability distribution of the cover source (the object before embedding). Solutions exist [49,61], but they require precise knowledge of the cover source's probability distribution, which is challenging to obtain from real digital media like photos. To overcome this, these solutions generate artificial cover objects. More practical approaches focus on hiding messages in real digital media by minimizing alterations, hoping that image noise will mask these changes. The relationship between the fraction of changes and their detectability is formalized by the "square root law of steganography" [27].

miab needs to embed a small payload, typically a few hundred bytes, into cover photos that are hundreds of kilobytes in size. To minimize detectability, we must minimize the alterations during embedding, particularly in areas of the digital media that are difficult to model. We chose an adaptive LSB-matching steganographic approach, which uses Syndrome-Trellis Codes (STCs) [25] to select pixel locations for alteration. LSB-matching, also known as ± embedding, involves randomly adding ±1 to the least significant bit of pixels to match the hidden message. This method is near-optimal when only one pixel is used [23]. Pure LSB-matching schemes have been broken [30, 45] due to the assumption that natural image noise is independent among pixels. STCs enhance LSB-matching by choosing pixel locations wisely, minimizing detectable alterations. We used a near-optimal algorithm [26] that minimizes distortions by associating a cost with each possible pixel alteration and finding the least costly series of modifications needed to embed the message. Both its space and time complexity are linear with respect to the cover source size.

LSB-matching with STCs is also used by HUGO [46], a stegosystem optimized for large messages. Although miab does not benefit from HUGO’s efficient embedding due to its short messages, HUGO provides a reference point for the state of the art in steganalysis. HUGO has been targeted by steganalysis experts in the “Break Our Steganographic System” (BOSS [6]) challenge. Given that tens of thousands of photos are published in blog posts every minute, an adversary attempting to detect stego images in the blog post stream would likely be overwhelmed by false positives. The miab protocol is decoupled from the specific steganographic scheme, allowing for easy swapping. A miab implementation can support multiple PKS schemes, similar to how SSL/TLS supports cipher suites. Alice can choose her preferred PKS scheme and encode her choice in a predetermined place in the blog post (e.g., the first letter of the title).

### Achieving Two-Way Messaging

The miab protocol can facilitate two-way communication in two ways: by bootstrapping a more demanding censorship-resistant protocol or through a channel-hopping protocol that establishes rendezvous points in user-chosen Internet locations.

#### Bootstrapping Another Protocol

miab can bootstrap Collage [12], a protocol that uses user-generated content (e.g., photos, tweets) as drop sites for hidden messages. Unlike miab, Collage requires pre-determined drop sites. Users perform tasks to put and retrieve messages from these sites. For example, if the drop site is a photo on Flickr tagged "flowers," the sender task involves posting a photo with that tag, and the receiver task involves retrieving the latest photos with that tag.

To bootstrap Collage, the task database must be distributed offline and updated as the Censor reacts. If the database is outdated, the communication channel breaks. Once Collage is bootstrapped, further updates can be received through the Collage network, provided the client is connected to the Internet. miab is well-suited for bootstrapping Collage because Alice only needs Bob’s public key to request a current task database. miab can also be used to communicate with other censorship-resistant services like #h00t [4] or privacy-preserving ones like Hummingbird [16].

#### Covert Messaging

Another option for two-way messaging is to extend the miab protocol to allow Bob to reply to Alice. Alice informs Bob about the next rendezvous point and the steganographic scheme he should use. If Bob is a human, Alice follows the same steps as in Section 3.2, with a small modification:

- **Rendezvous Point Selection**: Alice chooses the next rendezvous point R1 (e.g., site_a.com in Figure 2). She selects a URL where Bob can post additional content, such as a forum, media-sharing service, or an online newspaper that allows user comments. If possible, Alice should choose a website she regularly visits to avoid arousing suspicion. The website should be outside the Censor’s jurisdiction.
- **Steganographic Scheme**: Alice decides which steganographic scheme S1 Bob should use to hide his answer. Alice is not limited to PKS schemes; she can also specify a shared-key scheme with a secret password.
- **Additional Messages**: If Alice plans to send more messages, she specifies another rendezvous point R2 (site_b.com in the figure) and steganographic scheme S2.

Alice appends this information to the message M, which she embeds in the photos. Bob recovers the message and obtains R1, R2, S1, and S2. Bob then prepares his reply, encodes it with S1, and posts it on R1. Alice periodically checks R1 for Bob’s reply, either manually or via email/RSS feed. When she finds Bob’s message, she decodes it with S1, completing the two-way messaging cycle. If further communication is needed, Alice posts her reply, encoded with S2, on R2, which Bob will check. This process can be automated, with miab’s client software detecting available steganographic schemes and Alice using a browser extension to collect potential rendezvous points while browsing.

### Implementation

[This section would detail the technical implementation of the miab protocol, including any specific tools, libraries, or frameworks used, as well as any challenges and solutions encountered during development.]