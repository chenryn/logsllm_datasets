Games
HTML5/JavaScript/CSS applications
Hybrid/shell apps
Most applications available in the Store fit into a standard category and are most often developed in C# with
XAML files comprising the interface. XAML, which stands for eXtensible Application Markup Language, is used
by .NET apps to simplify the creation and representation of user interface components. Though most apps in
this general category are developed in C#, some are written in C++ and Visual Basic.
Although developing games in C# is possible, the majority of games available for Windows Phone 8.x are
developed in C++, and this is Microsoft’s recommended language for game apps. Many games call into Direct3d
for their graphics generation and manipulation abilities.
Developers also have the ability to develop functional applications using HTML5 and JavaScript, often also
utilizing some XAML for their interface components. Applications developed using JavaScript and HTML5 are
not merely client-side web apps. The Windows Runtime (WinRT) exposes an entire API so that apps written in
JavaScript can access much of the same functionality that a normal app can.
It’s not uncommon for apps to use a language such as C# yet also use JavaScript and HTML5 for various things,
including (but not limited to) its interface components. These could be loosely termed hybrid apps. The term
hybrid app could also be used to describe an app that is little more than a C# app (for example) which utilizes
web-view type objects to render a web app and doesn’t call into much OS functionality at all.
The choice of language is up to the developer, but Microsoft offers some general guidelines on which languages
are suitable for certain tasks (see http://msdn .microsoft.com/en-
us/library/windowsphone/develop/jj714071(v=vs.105) .aspx#BKMK_Decidingonanapproach, for example). Most
proficient developers should be in a position to analyze the situation and determine a language’s suitability for
themselves, however.
In general, using native code if an application needs to be highly optimized makes sense. Examples of such
applications include games, which are generally written in C++, using Direct3d.
Another reason for writing applications solely in native code would be language familiarity; experienced C++
developers may find implementing functionality in C++ to be easier than learning a related but different
language like C#. Equally, many developers may opt for the comfort of C# and then call into existing native
libraries that are performance critical using the P/Invoke interface.
It is generally known on an empirical basis that C# is the most commonly used language for Windows Phone
application development. For this reason, we place the majority of our focus on reviewing C# apps, though most
of the discussion can be applied to Windows Phone apps written in other languages.
Application Manifests
As briefly mentioned earlier in this chapter, every Windows Phone app has a manifest file that contains details
about the application. The information in an app manifest can be considered metadata, and among other things
some of the more basic aspects of information found inside an app’s manifest are its App ID, publisher/author,
the app’s name/title, a description of the app, and the relative path to the app’s logo.
Windows Phone 8.1 can install both XAP files and APPX files. Manifest files for apps that are deployed
specifically from APPX packages are named Package .appxmanifest, although APPX packages also contain a
WMAppManifest.xml file like XAP files as well. Windows Phone 8 devices can only install XAP packages, whose
manifest file is WMAppManifest.xml.
In addition to the basic app information already mentioned, application manifests also contain information that
is somewhat more interesting from a security and exploration standpoint and as such manifests can serve as
useful starting points for penetration testing and reverse engineering an app. As mentioned earlier (see
Chambers and Capabilities) an app’s manifest also defines which permissions the application needs to be able to
provide its functionality.
Although an application’s manifest holds much metadata that is needed to deploy the app correctly and in the
way that the developer intended, we’ll focus mainly here on the aspects of the manifest that are useful from
your perspective, as a penetration tester and/or a reverse engineer.
Both types of manifest, WMAppManifest.xml and Package.appxmanifest, are just standard XML files. The two
types do differ in structure and in the tags that they use to present their app metadata. We’ll go through each
one separately and explain how to glean information that is useful from a security and analysis point of view.
Attack Surface Enumeration
Manifest files support a number of parent and child XML elements, but rather than listing them all, we’ll
consider several that are interesting for an initial attack surface and entry point analysis. A few of these are
—Defines the capabilities required by the application
—Defines the file extensions that are associated with the app
—Defines URL schemes that the app wishes to register for
—Defines classes that are used by the app that are external to it
—Specifies interfaces that the app implements that are external to it
We’ll consider and analyze the following manifest file snippets as examples of how each of these elements are
used, what they tell us about the application at a glance. The following capability tags were borrowed from the
WMAppManifest .xml file from a typical app (distributed in XAP format):
The child elements within the  element clearly show which capabilities the application requests
upon installation. This is useful for a number of reasons. First, if you see ID_CAP_NETWORKING, for example, you
know that the application contains functionality that talks to other systems over the network, most likely the
Internet. Second, if the application you are installing is supposedly a calculator, yet you see that the application
“requires” ID_CAP_CONTACTS, you may become suspicious about the innocence of the app, and reverse engineer it
as a potential malware suspect.
Moving on, a typical  element in a manifest may look something like the following:
Assets/sdk-small-
33x33.png
Assets/sdk-medium-
69x69.png
Assets/sdk-large-
176x176.png
.myExt1
.myExt2
If you were analyzing an application whose manifest contained the preceding snippet, you would know that the
app has registered handlers for the .myExt1 and .myExt2 file extensions. File extension handlers are data entry
points to the application, and are therefore good places to start looking for vulnerabilities. At this point,
penetration testers would be on the lookout for file type handling code when they later begin their reverse
engineering or code review activities.
Now consider the following WMAppManifest.xml snippet, which shows a real-world example of the 
element from the Windows Phone 8 Facebook application.
It’s evident from the preceding snippet that the Facebook application registers two protocol handlers: fb:// and
fbconnect://. Knowing this, a penetration tester or reverse engineer would then know to search for and analyze
protocol handlers during their review, because these handlers represent a potentially interesting entry point to
the app.
Following is an example of , taken from the WMAppManifest .xml of a VoIP app.
PhoneVoIPApp.BackEnd.DLL
PhoneVoIPApp.BackEnd.DLL
multipleInstances
From the preceding code, you can tell that the application is registered to make use of external VoIP classes,
PhoneVoIPApp.BackEnd.CallController, for example. Knowing this, you may also consider these classes as
candidates for reverse engineering and/or security review as well, because the app does use them for some of its
functionality.
Finally, consider the following  tags from the manifest of the same VoIP application:
PhoneVoIPApp.BackEndProxyStub.DLL
The  tags in the previous manifest fragments tell you that the app implements the preceding
externally defined interfaces. This just tells you a little more about how the app works.
The preceding examples make it quite evident that a reasonable amount of information can be gleaned about an
app through just a very cursory analysis of its manifest file, including its capabilities, some entry points, and
external components that it calls into.
Several other tags and patterns are interesting from an attack surface assessment point of view. We recommend
you refer to MSDN’s manifest file documentation for reference when analyzing manifest files to determine the
nature of unfamiliar and possibly interesting tags you come across. See http://msdn .microsoft.com/en-
us/library/windowsphone/develop/ff769509.aspx.
Package.appxmanifest files (from APPX packages) take on a similar format to WMAppManifest.xml files.
Microsoft encourages the use of the Package .appxmanifest file in favor of WMAppManifest.xml for some aspects
such as capability definitions in the context of WP8.1 apps, but APPX packages also have a WMAppManifest.xml
file as well, so remember to review this file also.
TIP
When the application being reviewed is a Store app, getting direct access to manifest files won’t be
possible; the XAP or APPX file will be DRM protected and won’t be extractable from the actual file that
was downloaded. You can instead retrieve the manifest file(s) from the device after installing the app. (See
“Building a Test Environment” later in this chapter.)
Application Directories
Installed applications have two main directories that are used exclusively by them: the app’s install directory;
where its binaries, .NET assemblies, and other assets are stored; and the app’s local storage directory, where the
app can store data, and where web cache, cookies and other information is stored.
All installed apps have their own install directory, located at C:\Data\Programs\{GUID}\Install, where {GUID} is
the app’s ID. You’ll make extensive use of applications’ install directory later for extracting apps from the device
when you hack your device and gain full filesystem access to it. The install directories for all apps installed on
the device can be explored by browsing at C:\Data\Programs.
Each app also has its own local storage directory; this can be thought of as the app’s filesystem sandbox. The
local storage directory tree for an app whose ID is GUID may be found at C:\Data\Users\DefApps\APPDATA\
{GUID}.
The local storage area for each app has the following directories in its tree:
Local
LocalLow
PlatformData
Roaming
FrameworkTemp
Temp
INetCache
INetCookies
INetHistory
Of these directories, Local is generally the most used one. Local is the directory most often used for data storage
by apps.
INetCache, INetCookies, and INetHistory are also interesting from a security perspective, since all of the above
directories have the potential to hold data that constitute sensitive data leaks.
In the remainder of the Windows Phone sections in this book you’ll frequently browse applications’ install
directories and local storage directories, for extraction of app binaries and assets, and for exploration of
applications’ filesystem sandbox.
Distribution of Windows Phone Applications
There are a few ways in which applications are distributed and installed. Of course, the most commonly used
method is simply the Windows Phone Store, but there are other distribution mediums and installation methods
that are interesting to developers and security reviewers. We’ll discuss these methods in the following five
sections and their relevance to carrying out security assessments.
Windows Phone Store
So far we’ve mentioned the Store for downloading Windows Phone applications several times. The Store
application on the device itself is the standard means of downloading and installing applications.
The Store allows users to search for applications by keyword, and also by category; for example, education,
business, entertainment, news, weather, and so on. The app also has tiles that allow users to view apps that are
best-rated, top free, and top paid.
Although the vast majority of applications in the Store were developed and published by third-party vendors,
Microsoft actually sells some of its own products in the Store as well. Examples include OneDrive, Lync, and
Skype.
In addition to the apps section of the Store app, there are also sections for games and music. The Store app on
some devices has a section specific for applications intended for devices made by that OEM only; for example,
Store on Samsung devices has a “Samsung Zone” section to the app. Similarly, Store on Nokia devices has a
“Nokia Collection” area, and HTC devices have an “HTC Apps” area. Some mobile network carriers may also
have their own area that appears when the device is connected to their network. Figure 10.5 shows the splash
screen for the Store app on a typical Samsung device running Windows Phone 8.
Figure 10.5 Splash screen for a Samsung Windows Phone 8 device
Similarly to the app stores for the other mainstream mobile operating systems (iOS, Android, BlackBerry), some
apps are free of charge.
The Windows Phone Store has been so named since Windows Phone 7, before which it was known as the
Windows Phone Marketplace, when Microsoft’s current mobile operating system was Windows Mobile, now
deprecated.
Store Sideloading
Although the standard means of installing WP8 and WP8.1 applications is from the on-device Store app,
applications can also be downloaded from a desktop system and then installed using an SD card. This method of
installation is known as sideloading and presumably exists in case a user doesn’t have Internet access from a