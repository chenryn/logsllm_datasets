restrictions
qualiﬁed
constraints
reiﬁcation
Allows expressions such as “all children of X are of type Y ”.
Provides a standard mechanism for recording data sources,
timestamps, etc., without intruding on the data model.
DAML XML
+OIL
Yes
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
Yes
No
No
No
No
No
No
No
No
No
No
to respond, but only because of some other software which is not part of the XML
speciﬁcation. Although conforming to the XML speciﬁcation, different systems may
very well respond differently, given the same XML encoded data. If a computer ac-
quires new data in DAML+OIL, it can generate entirely new information, solely based
on the DAML+OIL standard. Given the same data, any system that conforms to the
DAML+OIL speciﬁcation will generate the same new information and conclusions.
A set of DAML+OIL statements, in conjunction with the DAML+OIL speciﬁcation,
enables the conclusion of yet another DAML+OIL statement, whereas a set of XML
statements, in conjunction with the XML speciﬁcation, does not allow the conclusion of
any other XML statements. To employ XML to generate new data, knowledge needs to
be embedded in some procedural code, which is in stark contrast to DAML+OIL where
the knowledge is explicitly stated in DAML+OIL statements.
Although XML supports sub types which are restrictions of extensions on a type,
there are no classes. Consequently, there is no notion of inheritance. The following ex-
empliﬁes the beneﬁts of inheritance. Suppose that you wished to deﬁne an event of type
X, that is an aggregation of two other events of types Y and Z. Furthermore, suppose
that Y and Z are comprised of subclasses Y1 and Y2 and Z1 and Z2, respectively. If
120
J. Undercoffer, A. Joshi, and J. Pinkston
this information were encoded in XML, we would need application logic that iteratively
checked for all possible combinations of Y and Z to satisfy a query. If the same informa-
tion were to be encoded in DAML+OIL, we would only need to query for the existence
of X. Table 1 provides a feature by feature comparison between DAML+OIL and XML.
3 From Taxonomies to Ontologies: The Case for Ontologies
An ontology subsumes a taxonomy, therefore, before explaining ontologies, a clear
understanding of the deﬁnition, purpose and objective of a taxonomy is in order.
3.1 Characteristics of a Sufﬁcient Taxonomy
A taxonomy is a classiﬁcation system where the classiﬁcation scheme conforms to a
systematic arrangement into groups or categories according to established criteria [48].
Glass and Vessey [14] contend that taxonomies provide a set of unifying constructs so
that the area of interest can be systematically described and aspects of relevance may
be interpreted. The overarching goal of any taxonomy, therefore, is to supply some
predictive value during the analysis of an unknown specimen, while the classiﬁcations
within the taxonomy offer an explanatory value.
According to Simpson [44], classiﬁcations may be created either a priori or a pos-
teriori. An a priori classiﬁcation is created non-empirically whereas an a posteriori
classiﬁcation is created by empirical evidence derived from some data set. Simpson de-
ﬁnes a taxonomic character as a feature, attribute or characteristic that is divisible into
at least two contrasting states and used for constructing classiﬁcations. He further states
that taxonomic characters should be observable from the object in question.
Amoroso [2], Lindqvist et al. [33], Krusl [30] and others have identiﬁed what they
believe to be the requisite properties of a sufﬁcient and acceptable taxonomy for computer
security. Collectively, they have identiﬁed the following properties as essential to a
taxonomy:
Mutually Exclusive. A classiﬁcation in one category excludes all others because cate-
gories do not overlap.
Exhaustive. The categories, taken together, include all possibilities.
Unambiguous. The category is clear and precise so that classiﬁcation is not uncertain,
regardless of who is classifying.
Repeatable. Repeated applications result in the same classiﬁcation, regardless of who
is classifying.
Accepted. The taxonomy should be logical and intuitive so that it can become generally
approved.
Useful. The taxonomy can be used to gain insight into the ﬁeld of inquiry.
Comprehensible. The taxonomy should be useful to those with less than expert knowl-
edge.
Conforming. The terminology of the taxonomy should comply with established secu-
rity terminology.
Objectivity. The features must be identiﬁed from the object under observation where
the attribute being measured should be clearly observable.
Modeling Computer Attacks: An Ontology for Intrusion Detection
121
Deterministic. There must be a clear procedure that can be followed to extract the
feature.
Speciﬁc. The value for the feature must be unique and unambiguous.
Upon review of the above list, we believe that, for our purposes, a sufﬁcient and ac-
ceptable taxonomy must be: Mutually Exclusive, Exhaustive, Unambiguous, Useful,
Objective, Deterministic, Repeatable and Speciﬁc. Hence, these requirements form
the underpinnings of our ontology and were selected because they have been identiﬁed
by the IDS community as essential. We did not adopt the property “Comprehensible”
because the requirement that a taxonomic property be comprehensible dictates that those
with less than expert knowledge should ﬁnd the ontology and its taxonomy useful. We
felt that this requirement has the potential to oversimplify and relax the structure of the
ontology. We did not adopt the property “Accepted”, due to the requirement that it be
intuitive. The knowledge engineering process employed to build a viable ontology is
often more than simple intuition and, at times, appears counter-intuitive.
3.2 Ontologies
According to Davis et al. [7], knowledge representation is a surrogate or substitute
for an object under study. In turn, the surrogate enables an entity, such as a software
system, to reason about the object. Knowledge representation is also a set of ontological
commitments specifying the terms that describe the essence of the object. In other words,
meta-data or data about data describing their relationships.
Frame Based Systems are an important thread in knowledge representation. Accord-
ing to Koller et al. [27], Frame Based Systems provide an excellent representation for
the organizational structure of complex domains. Frame Based Languages, which sup-
port Frame Based Systems, include RDF [32], and are used to represent ontologies.
According to Welty et al. [49], an ontology, at its deepest level, subsumes a taxonomy.
Similarly, Noy and McGuinness [38] state that the process of developing an ontology
includes arranging classes in a taxonomic hierarchy.
The relationship among data objects may be highly complex; however, at the the ﬁnest
level of granularity, the Knowledge Representation of any object may be represented by
an RDF-S (Resource Description Framework Schema) statement [4] which formally
deﬁnes the RDF model as:
i. A set called Resources.
ii. A set called Literals.
iii. A subset of Resources called Properties.
iv. A set called Statements, where each element is a triple of the form:{subject, predi-
cate, object }. Where predicate is a member of Properties, subject is a member of
Resources, and object is either a member of Resources or a member of Literals.
Primarily, RDF-S is about deﬁning class hierarchies (i.e.: taxonomies) and introduces
the notions of Class, Property, Domain and Range. RDF and DAML+OIL extend RDF-
S with richer modeling primitives. Figure 2 graphically illustrates the basic RDF-S
model, where (subject, predicate, object), which is the same as (resource, property,
122
J. Undercoffer, A. Joshi, and J. Pinkston
Woman
Child
Mother Of
Fig. 2. RDF-S Relationship Graph
]>
Fig. 3. DAML+OIL Speciﬁcation for the Mother Child Relationship
resource[or literal value]), is illustrated by the (Woman, Mother Of, Child) relationship,
where Mother is the subject, Child is the object and Mother Of is the predicate. Figure
3 illustrates the Mother Child relationship speciﬁed in DAML+OIL. It should be noted
that a set ofN-triples, an RDF-S graph, and a DAML+OIL speciﬁcation are equivalent
if they each describe the same ontology.
In applying ontologies to the problem of intrusion detection, the power and utility of
the ontology is not realized by the simple taxonomic representation of the attributes of
the attack. Instead, the power and utility of the ontology is realized by the fact that we
can express the relationships between collected data and use those relationships to
deduce that the particular data represents an attack of a particular type. Because
ontologies provide powerful constructs that include machine interpretable deﬁnitions
of the concepts within a speciﬁc domain and the relations between them, they may be
utilized not only to provide an IDS with the ability to share a common understanding of
the information at issue, but also to further enable the IDS, with an improved capacity,
to reason over and analyze instances of data representing an intrusion.
Modeling Computer Attacks: An Ontology for Intrusion Detection
123
Moreover, specifying an ontological representation decouples the data model from
the logic of the intrusion detection system. The decoupling of the data model enables
non-homogeneous IDSs to share data without a prior agreement as to the semantics of
the data. To effect this sharing, an instance of the ontology is shared between IDSs in the
form of a set of DAML+OIL statements. Non-homogeneous IDSs do not need to run the
same type of software and the sensors of a distributed IDS may monitor different aspects
of an enterprise. A shared ontology enables these disparate components to operate as a
coalition, sharing, correlating and aggregating each other’s data.
4 Our IDS Ontology: Attributes of the Class Intrusion
In constructing our ontology, we conducted an empirical analysis [46] of the features
and attributes, and their interrelationships, of over 4,000 classes of computer attacks and
intrusions that are contained in the CERT/CC Advisories and the “Internet Catalog of
Assailable Technologies” (ICAT) maintained by NIST. Our analysis indicates that the
overwhelming majority of attacks are the result of malformed input exploiting a software
vulnerability of a network attached process. According to CERT, root access is the most
common consequence, while according to ICAT, a denial of service is the most common
consequence.
Figure 4 presents a high level view of our ontology. The attributes of each class and
subclass are not depicted because it would make the illustration unwieldy. As stated in
Section 1, we have instrumented the Linux kernel, using it to gather 190 distinct attributes
(i.e.: address from which system calls are made, total virtual memory size, etc) at the
system, process and network levels. Consequently, our ontology, and the taxonomy that
it subsumes, is deﬁned solely in terms of the causal relationships of the observables and
measurables at the target of the attack.
It should be noted that an RDF graph does not depict ﬂow. In an RDF graph, ellipses
are used to denote a class, which may have several properties. When two vertices (classes)
are connected by a directed edge, the edge represents a property whose domain is denoted
by the start of the edge, and whose range is denoted by the end of the edge. An undirected
edge between two vertices (classes) indicates that one class is an instance of another class.
At the top most level of Figure 4 we deﬁne the class Host. Host has the predicates
Current State and Victim of. Current State ranges over System Component and Victim
of ranges over the class Attack. As earlier stated, the predicate deﬁnes the relationship
between a subject and an object.
The System Component class is comprised of the following subclasses:
i. Network. This class is inclusive of the network layers of the protocol stack. We
have focused on TCP/IP; therefore, we only consider the IP, TCP, and UDP sub-
classes. For example, and as will be later demonstrated, the TCP subclass includes
the properties TCP MAX, WAIT STATE, THRESHOLDand EXCEED T. TCP MAX
deﬁnes the maximum number of TCP connections. WAIT STATE deﬁnes the num-
ber of connections waiting on the ﬁnal ack of the three-way handshake to establish
a TCP connection. THRESHOLD speciﬁes the allowable ratio between maximum
connections and partially established connections. EXCEED T is a boolean value
indicating that the allowable ratio has been exceeded. It should be noted that these
are only four of several network properties.
124
J. Undercoffer, A. Joshi, and J. Pinkston
u r r e n t  S t a te
C
D i re ct ed   t o
System
Component
  o f
s
S u b C l a s
SubClass of
Instance of
Network
System
Process
IP
TCP
UDP
Received fro m
Location
HOST
V
i
c
t
i
m
o
f
Attack
E
f
f
e
c
t
e
d
b
y
Input
C
a
u
s
i
n
g
Means
Resulting in
Consequence
S u b   C l a s s   o f
Remote to
Local
Denial of
Service
Sub Class of
User to
Root
Probe
  o f
s
S u b C l a s
SubClass of
Input
Validation
Error
f
s   o
s
b   C l a
u
S
Sub Class of
Logic Explo it
S u b   C l a s s   o f
Sub Class of
Buffer
Overflow
Boundary
Condition
Malformed
Input
Exception
Condition
Race
Condition
Atomicity
Error
Serialization