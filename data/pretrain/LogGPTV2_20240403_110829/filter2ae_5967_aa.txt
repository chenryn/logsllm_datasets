**作者：漂亮鼠  
原文链接：**
## 0x00 前言
去年看了portswigger的top-10-web-hacking-techniques-of-2020-nominations-open文章，里面列举了2020年比较热门的技术，非常有意思，地址是（）。在一系列前沿技巧中我看到了这篇（）
NAT我知道，就是动态网络地址转换端口映射啥的嘛，防火墙隔绝内外网的基本功能之一。slipstreaming是什么玩意？
好屌啊，nat低压气穴，那我这么中二肯定要看看的。第一遍初看，没看懂，只知道从外网把受nat保护的内网端口给暴露出来了，第二遍第三遍也大概看懂了一个流程，没有深究，一直拖到现在重新研究。最近实在不知道干嘛了，前几天又和rr提了一嘴，那rr毕竟牛逼啊，经过rr的指点我可不得直接深入研究，于是有了下文。
## 0x01 知识背景
由于比较复杂，概念太多我自己也没有特别搞得懂，我这边先罗列几篇背景知识文章供读者先看看，就不在赘述了。nat
slipstream作者的官网：
奇安信攻防社区也有发过简单介绍这块的文章：
github上2009年的文章：
主要模块nf_conntrack的扫盲贴：
我知道很多人都不会看，所以我大概简单介绍一下好了。首先，在典型的防火墙iptables里有一个很常见的配置
    sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPTsudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
可以认为是放行input方向标记为ESTABLISHED状态的tcp链接，这种配置甚至在ubuntu官网都能找到（）
这也说明了这两条配置的常见性和广泛性，ESTABLISHED我们应该都能理解，就是tcp链接已经建立后的状态，已经建立完成的链接自然是可以从input方向进来的，这种链接常见于从内向外发起后的tcp链接。那么这里还有一个RELATED状态是什么呢？这个状态主要是给ALG类协议使用的，通常ALG类协议会有两个工作端口（典型如FTP），一个端口负责控制一个端口负责操作其他，而RELATED状态就是标记ALG类协议的两条TCP链接之间存在关联性，也就是说如果有一条TCP链接被标记为和另外一条相关联，那么他就可以从外部直接访问到内部。关于ALG的wiki解释如下：
下面还有一个比较详细的表来描述这个东西
关于利用ALG类协议在NAT上任意映射端口使外部发起的链接可以直接访问内部的端口，这一块的利用可以追溯到2010年之前，可以说是历史悠久。nat
slipstream的作者在最新的文章里利用的是SIP协议，当然在很多年前他也利用过FTP。这里简单叙述一下SIP的利用思路：
  1. 找到支持SIP的防火墙环境
  2. 通过投递恶意页面到内网，受害者打开恶意页面
  3. 恶意页面的js对外发送post请求
  4. 请求通过防火墙时候，由于MTU对包体进行了分片，post体中的一部分被防火墙识别成了SIP
  5. 被识别成SIP协议后防火墙就会触发RELATED规则导致外部可以访问指定内部端口
## 0x02 FTP ALG
我不像作者那样利用SIP，因为我觉得不太好找支持SIP的（感觉），所以回到远古的FTP上来。为了了解iptables对FTP的检测逻辑，我翻了很多资料，就不展开讲了。直接给出答案即可。我们先来了解一下FTP的ALG支持的必须条件：
  1. 需要有nf_conntrack模块
  2. 需要有nf_conntrack_ftp模块
  3. 需要配置input方向的related规则
nf_xxx是Linux内核模块，对链接的状态标记是由内核模块完成的，所以我们必须先知道系统有没有默认加载模块。比如下面是ubuntu20
可以看到已经把nf_conntrack_ftp默认去掉了，所以ftp的ALG默认是不支持的。而老一些Linux系统一般都会默认加载，比如
当然也不见得新的系统就一定不会有，要知道ubuntu20是桌面系统没有默认加载是正常的，而大部分防火墙不仅仅系统可能较老，而且出于功能性考虑肯定也会大概率加载，所以非常普遍可以认为基本都有。关于FTP的主动被动模式我就不介绍了，一点不了解的可以简单看看（）。了解这些前提后，我们来了解一下FTP的一般命令，这里主要看主动模式：
    USER adminPASS adminPORT 127,0,0,1,0,22
一目了然不做过多介绍，这里主要看port这个命令，这个命令由客户端发出，通过防火墙后防火墙会记录下来，然后进行前面说的映射。这里我直接用奇安信社区的一篇文章的图来描述这个过程：
port指令前面四位是ip一看便知，后面两位其实是端口号的高位和低位，举个例子，比如端口号8848要获得其高低位，先转化成十六进制变为0x2290，然后获得高位0x22和低位0x90，再分别转成十进制最终得到34,144。这样如果我们要映射127.0.0.1上的8848就写成`PORT
127,0,0,1,34,144`即可。我知道这很麻烦，也不直观，所以我现在介绍一个和他等效的命令来代替他：
    EPRT |1|127.0.0.1|8848|
这个可以认为作为payload是和port等效的即可。一目了然也便于反复修改做实验。
## 0x03 初步尝试
大概概念雏形有了，我们整理一下：
  1. 寻找一种方法，从内部发送非加密TCP链接经过防火墙到外部
  2. 防火墙匹配到关键命令后根据命令的内容生成相关映射
  3. 从外部发起请求到防火墙上临时允许的端口上
当然这只是雏形，实际情况要比这个复杂很多，我们一步步来。第一步最容易想到的场景就是SSRF，还有投递恶意页面。这里我主要以SSRF作为先决条件，那么假设我有一个SSRF漏洞可以让我从内部发起请求到外部。接下来的核心问题就是防火墙的匹配逻辑和我的SSRF限制条件之间的场景磨合问题。如果防火墙的匹配规则比较弱智，那么我的SSRF限制条件越多对我来说场景越普遍，因为通常我们获得的SSRF可能就只有一个限定协议的GET请求。结合nf_conntrack_ftp的匹配逻辑的部分代码以及实验，我得出了几个隐藏的条件：
  1. 必须保持发起的链接状态保持在ESTABLISHED，也就是链接保持住
  2. 发起的请求必须被拆分成两次
  3. 命令必须在TCP PAYLOAD的开头
  4. PORT或者EPRT命令必须在非第一次请求里
  5. 并不需要其他命令，但必须要有第一次请求体
  6. 请求端口必须是21
什么叫一个链接里必须拆分成两次请求呢？我们都知道有个东西叫做长链接，多个http请求可以在一个tcp长链接里进行请求和响应，那么这里可以类比成这个，只不过不一定是http。更具体的说如下图：