2.3 Distillation Codes 
Karlof  et  al.  [1]  propose  distillation  codes  as  a  mechanism  to 
defend  against  pollution  attacks  on  a  SAIDA-based  signature 
amortization scheme by utilizing Merkle hash trees and one-way 
accumulators.  First,  the  sender  constructs  a  Merkle  hash  tree 
using  the  hash  value  of  the  multicast  packets.  Next,  for  each 
packet, 
the 
verification  sequence  of  a  leaf  node  in  the  Merkle  hash  tree. 
When  the  receiver  accepts  packets,  it  separates  them  into  many 
groups  according  to  each  packet’s  witness.  Distillation  codes 
ensure  that  a  group  contains  all  valid  packets,  allowing  the 
receiver to successfully reconstruct the verification information of 
this group. 
Distillation codes consist of a distillation encoder and a decoder 
procedure.  The  distillation  encoder  first  hashes  the  packets  of  a 
single  block  and  concatenates  them  to  form  Hj.  Then,  the 
distillation encoder uses erasure codes to encode Hj and outputs 
the set of symbols S’=(s1’, s2’,…, sn’), with each symbol denoting 
a  leaf  node  from  which  to  build  a  Merkle  hash  tree.  It  also 
produces a set of distillation code symbols S=(s1, s2,…, sn), where 
si is the concatenation of si’ and the verification sequence of si’.
Before multicasting the packet, the sender augments each packet 
with  its  corresponding  distillation  code  symbol  si.  Since  the 
receiver can calculate the root hash value of the Merkle hash tree 
through the verification sequence, the receiver is able to partition 
the received packet by the calculated root value from the witness 
of the packet. Valid witnesses possess the same root hash value; 
thus, the receiver partitions packets with valid witnesses into the 
same  group.  As  a  result,  the  receiver  can  reconstruct  correct 
verification information from the packets in the group. Therefore, 
distillation codes can defeat pollution attacks. 
logarithmic 
Unfortunately, 
communication  overhead 
size  grows 
logarithmically with the number of packets per block. In addition, 
while  suffering  a  pollution  attack,  the  receiver  will  consume 
significant  computation  power  from  erasure  decoding  and 
signature  verification.  Furthermore,  the  receiver  must  buffer  all 
packets,  regardless  of  whether  it  is  valid  or  invalid,  until  the 
correct information is reconstructed because it does not know the 
root  of  the  Merkle  hash  tree  in  advance.  Thus,  the  receiver 
requires a large buffer to temporarily store these packets. 
There is an additional weakness in distillation codes. An attacker 
can  construct  his  own  Merkle  hash  tree  and  transmit  packets 
augmented  with  the  corresponding  witness.  Since  the  witnesses 
are constructed from the same Merkle hash tree, the receiver will 
partition these packets into the same group. Because the receiver 
is unaware of the correct root of the Merkle hash tree beforehand, 
an attacker is able to inject a large number of forged packets into 
one  group  to  exhaust  the  receiver’s  computational  power, 
dramatically downgrading the receiver’s performance. 
induce 
the  witness 
distillation 
codes 
since 
3. PROPOSED SCHEME 
We propose a lightweight and pollution attack resistant multicast 
authentication  protocol  (PARM)  based  upon  SAIDA.  In  our 
scheme,  each  packet  is  appended  with  evidence  containing  the 
verification  information  that  allows  the  receiver  to  judge  the 
Figure 2-1. Merkle Hash Tree1
2.1.4 Erasure Codes 
An erasure code [7][8][9][12] consists of an encoder and decoder 
that use forward error correction to tolerate data loss. The encoder 
redundantly  encodes  information  into  a  set  of  segments.  If  the 
decoder  receives  sufficient  segments,  it  can  reconstruct  the 
original  information.  For  example,  an  (n,  t)  erasure  encoder 
generates  a  set  S  of  n  symbols  (s1,  s2,…,  sn)  from  the  data.  The 
erasure decoder can tolerate a loss of up to t packets. In the next 
section,  we  detail  a  signature  amortization  scheme  that  employs 
the use of erasure codes. 
2.2 SAIDA
Park et al. [10][11] propose a signature amortization scheme for 
multicast  authentication,  SAIDA  (Signature  Amortization  using 
the  Information  Dispersal  Algorithm),  which  utilizes  erasure 
codes to tolerate random packet loss. In this scheme, the sender 
first  partitions  the  packet  stream  into  blocks  of  n  consecutive 
packets.  Next,  the  sender  concatenates  the  hash  values  of  all 
packets in one block to form Hj, which it protects by generating a 
signature Sign(h(Hj))  for  the  hash  value  Hj.  Then,  the  erasure 
encoder  encodes  the  verification  information  VI,  which  includes 
Hj  and  Sign(h(Hj)),  and  appends  the  outputted  segments  to  each 
packet  in  the  block.  Despite  the  lost  of  packets,  an  erasure 
decoder  can  successfully  reconstruct  VI  as  long  as  it  receives  a 
sufficient number of packets. The receiver can then verify Hj with 
Sign(h(Hj));  consequently,  the  hash  values  contained  in  Hj  can 
authenticate all received packets in that block. 
2.2.1 Pollution Attacks in SAIDA 
During normal operation, the receiver validates a block of packets 
by  using  erasure  codes  to  decode  the  verification  information 
from  the  received  packets.  Injecting  forged  packets  into  the 
communication  channel  confuses  the  receiver,  causing  it  to 
decode  an 
to 
successfully  verify  the  signature  Sign(h(Hj))  and  must  drop  the 
received  packets.  If  the  receiver  attempts  to  reconstruct  the 
correct  information  during  the  pollution  attack,  it  will  expend 
incorrect  Hj.  Thus, 
the  receiver 
is  unable 
1  Each  leaf  node  is  calculated  by  hashing  the  corresponding 
packet Si,  and  each  internal  node  is  the  hash  value  of  the 
concatenation of its two children. The verification sequence, for 
example, of a leaf node h3 is (h4, h1,2, h5,8).
0
packet’s validity. PARM is fast and lightweight, which caters to 
time-sensitive multicast applications and computationally limited 
devices.
3.1 PARM
Our  proposed  scheme  consists  of  four  phases:  initialization, 
evidence  generation,  evidence  validation,  and  temporal  key 
renewal. We describe the four phases in the next few sub-sections. 
3.1.1 Initialization Phase 
In  this  phase,  we  define  how  to  generate  a  temporal  key  pair, 
which contains a temporal secret key (TSK) chain and a temporal 
public  key  (TPK),  using  a  one-way  hash  function.  The  sender 
creates  the  evidence  of  a  packet  from  a  TSK  chain,  and  the 
receiver validates the evidence of a received packet with the TPK. 
Before  communicating  with  receivers,  the  sender  must  generate 
the TSK chain and TPK in advance. First, the sender generates k
n-bit  random  numbers  (R0,  R1,…,  Rk-1)  and  denotes  this  set  of 
numbers as TSK0 of the TSK chain. Then, the sender uses the one-
way hash function h to recursively generate the remaining TSKs 
of the TSK chain. By applying the hash function to each member 
of the previous TSK, the sender can produce the next TSK. For 
example, TSK1 is generated by hashing each element in TSK0 i.e. 
TSK1=(h(R0), h(R1),…, h(Rk-1)). The TSK chain has a length of L
and  is  represented  as  (TSK0,  TSK1,…,  TSKL-1).  The  temporal 
public key (TPK) is created by hashing every element of TSKL-1.
Figure 3-1 depicts the procedure for TSK and TPK generation. R0
denotes the randomly generated number, and the arrows specify 
the direction of the one-way hash function h. Thus, h(R0)  is  the 
hash result of R0, and h2(R0) is the hash result of h(R0). The set of 
the  elements  in  the  same  row  comprises  a  TSK  elements  array, 
e.g. TSK0=(R0,  R1,…,  Rk-1)  and  TSK1=(h(R0),  h(R1),…,  h(Rk-1)).
The elements of the last row form the TPK. 
sender sign the TPK with a digital signature to protect it during 
distribution.  Otherwise,  an  attacker  can  convince  receivers  to 
accept a forged TPK; consequently, all valid packets will fail to 
pass evidence validation. The receiver stores the TPK if it verifies 
the signature. 
3.1.2 Evidence Generation Phase 
Prior  to  broadcasting  a  message,  the  sender  must  generate  for 
each  packet  the  evidence,  or  verification  information,  which 
allows receivers to determine the validity of a packet. Since each 
packet is augmented with evidence, the evidence generation phase 
should be lightweight and fast. For a given temporal key pair, the 
sender needs to maintain a usage table, such as the one in Figure 
3-2,  that  tracks  the  number  of  times  each  column  index  of  the 
TSK elements array is used. The row index denotes the column 
index of the TSK elements array, while the row usage tracks the 
number of uses of the corresponding index. 
Figure 3-2. Usage Table
Figure 3-3 illustrates the evidence generation phase. To generate 
evidence EM  for  a  packet  M,  the  sender  first  hashes  the  packet 
with a one-way hash function h. The hash value is divided into a 
set of p segments, denoted S=(i0, i1,…, ip-1), where each segment 
size is b-bits. Interpreted as an integer between 0 and 2b-1, each 
segment  in  the  set  S  represents  a  column  index  of  the  TSK 
elements array. For each index i, the sender determines the TSK 
based upon the usage of i by selecting TSK(L-1)-ai, where ai denotes 
the usage of i. Thus, the sender chooses the last TSK of the chain, 
TSKL-1, if i has never been used. Once the sender determines the 
TSK,  it  chooses  the  i-th  element  of  the  selected  TSK.  For 
example, if i0 used L-1 TSK elements, then the sender chooses the 
i0-th  element  of  TSK0,  which  is  R0.  Since  each  segment  of  S
corresponds  to  an  index  of  the  TSK  elements  array,  the  sender 
produces p elements, which constitutes the evidence of the packet. 
After appending the evidence to the packet, the sender can finally 
broadcast the packet to the receiver. 
Figure 3-1. Temporal Key Pair Generation 
After successful generation of the TSK chain and TPK, the sender 
provides receivers with the TPK. Since receivers will use the TPK 
to  determine  the  validity  of  received  packets,  it  is  vital  that  the 
Figure 3-3. Evidence Generation Phase 

3.1.3 Evidence Validation Phase 
Upon  receiving  a  packet,  the  receiver  can  use  the  TPK  to 
immediately check the validity of the attached evidence. To forge 
a packet, the attacker must generate proper evidence for a packet, 
which is difficult without knowledge of the TSK chain. In section 
5, we will demonstrate the complexity of a successful attack. As 
with the sender, the receiver must also maintain a usage table for 
each column index of the TSK elements array based on received 
packets. 
Figure 3-4. Evidence Validation Phase 
The  procedure  of  the  evidence  validation  phase,  depicted  in 
Figure  3-4,  is  similar  to  that  of  the  evidence  generation  phase. 
After  receiving  a  packet  containing  evidence  EM,  the  receiver 
separates  the  evidence,  denoted  EM=(e0,  e1,…,  ep-1),  from  the 
packet M.  To  validate  the  evidence  for  this  packet,  the  receiver 
hashes M with the one-way hash function h, which is identical to 
the  one-way  hash  function  used  by  the  sender  in  the  evidence 
generation phase. Next, the receiver divides the hash value h(M)
into p b-bit segments, denoting these segments as the set (i0, i1,…, 
ip-1). By interpreting each segment as an integer between 0 and 2b-
1,  each  segment  can  represent  a  column  index  of  the  TSK 
elements array. Each index i, along with its usage ai, determines 
the number of times to hash the corresponding element ei of the 
evidence.  Given  an  index  and  its  usage,  the  receiver  should 
perform ai+1 hashes on the corresponding element of the evidence. 
Thus, if index i has never been used before, the receiver need only 
hash ei once. The ensuing set of hash results from every element 
of the evidence is denoted by  HR=(h0, h1,…, hp-1). The receiver 
selects  the  verification  subset  VS=(hL(Ri0),  hL(Ri1),…,  hL(Rip-1))
from the TPK, where hL(Ri) is the i-th element of the TPK. The 
receiver considers the evidence valid if the two sets, HR and VS,
contain  identical  elements,  accepting  the  packet  with  valid 
evidence and dropping it otherwise. 
3.1.4 Temporal Key Renewal Phase 
In the previous three phases of PARM, the sender uses the TSK 
chain  to  generate  the  evidence  of  a  packet,  which  the  receiver 
validates with the TPK. Since the packet’s evidence prevents the 
receiver from accepting forged packets, our proposed scheme can 
thwart  pollution  attacks.  Nevertheless,  an  attacker  can  still  sniff 
various  bits  of  the  TSK  chain  because  each  piece  of  evidence 
contains  elements  of  the  TSK  chain.  When  an  attacker  obtains 
enough portions of the TSK chain, the probability of forging valid 

evidence rises dramatically. Thus, periodic renewal of used TSK 
elements is necessary to ensure secure communications between 
the sender and its receivers. 
We  define  a  threshold  value  T  in  our  key  renewal  phase.  UTSK0
represents the number of used elements in TSK0 (the first TSK of 
the TSK chain) since the last temporal key renewal, and the set 
(j0,  j1,…,  jt-1)  denotes  the  indexes  of  the  used  elements.  When 
UTSK0 exceeds the threshold  T, new elements are required. First, 
the  sender  generates  UTSK0  new  random  numbers  for  the  used 
indexes of TSK0. Using these random numbers, the sender creates 
the  partial  TSK  and  the  partial  TPK  with  the  one-way  hash 
function h by following the temporal key generation procedure of 
the  initialization  phase.  The  sender  then  updates  its  copy  of  the 
TSK chain with the partial TSK elements. Since the receiver must 
also update its TPK, the sender concatenates the new partial TPK 
with its digital signature Sign(Partial TPK), which it then encodes 
with erasure codes and appends  to  outgoing  packets.  Figure  3-5 
illustrates the preparation required for sending the partial TPK to 
the receiver. Upon successful renewal of the TSK chain and TPK, 
the  sender  and  receiver  may  resume  evidence  generation  and 
verification of packets. 
Figure 3-5. Temporal Key Renewal Phase 
3.2 Practical Considerations 
In this section, we describe the features of our proposed scheme. 