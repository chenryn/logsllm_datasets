### Adding a Busy Indicator to the Customers Form

#### 1. Modify the ViewModel
1. Open the `ViewModel.cs` file in the Code and Text Editor window.
2. After the `LastError` property, add the private `_isBusy` field and public `IsBusy` property as shown below:

```csharp
private bool _isBusy;
public bool IsBusy
{
    get => this._isBusy;
    set
    {
        this._isBusy = value;
        this.OnPropertyChanged(nameof(IsBusy));
    }
}
```

#### 2. Update the SaveAsync Method
1. Modify the `SaveChanges` method to set and reset the `IsBusy` indicator while the method runs:

```csharp
private async void SaveChanges()
{
    this.IsBusy = true;
    if (this.ValidateCustomer(this.Current))
    {
        // ... existing code ...
    }
    this.IsBusy = false;
}
```

#### 3. Add the ProgressRing Control
1. Open the `MainPage.xaml` file in the Design View window.
2. In the XAML pane, add the `ProgressRing` control as the first item in the top-level `Grid` control:

```xml
<Grid>
    <ProgressRing IsActive="{Binding IsBusy}" Canvas.ZIndex="1" />
    <!-- Other controls -->
</Grid>
```

Setting the `Canvas.ZIndex` property to "1" ensures that the `ProgressRing` appears in front of other controls displayed by the `Grid` control.

### Testing the Customers App

#### 1. Build and Run the App
1. On the Debug menu, click **Start Debugging** to build and run the app.
2. When the Customers form appears, notice that the `TextBox` and `ComboBox` controls are disabled because the view is in Browsing mode.

#### 2. Verify Command Bars
1. On the form, verify that both the upper and lower command bars appear.
2. Use the First, Next, Previous, and Last buttons in the upper command bar. Note that the First and Previous buttons will not be enabled until you move away from the first customer.
3. In the lower command bar, the Add and Edit buttons should be enabled, but the Save Changes and Undo Changes buttons should be disabled. This is because the `AddCustomer` and `EditCustomer` commands are enabled when the ViewModel is in Browsing mode, while the `SaveChanges` and `DiscardChanges` commands are enabled only when the ViewModel is in Adding or Editing mode.

#### 3. Test Editing Mode
1. In the bottom command bar, click the **Edit Customer** button.
2. The buttons in the top command bar become disabled because the ViewModel is now in Editing mode.
3. Additionally, the Add and Edit buttons are disabled, but the Save Changes and Undo Changes buttons should now be enabled.
4. The data entry fields on the form should also be enabled, allowing the user to modify the details of the customer.

#### 4. Make Changes and Save
1. Change the details of the customer: blank out the first name, type "Test" for the email address, type "Test 2" for the phone number, and then click **Save Changes**.
   - Note: You must tab out of the phone number control (or click another control on the main part of the form, or even click the form itself) for the binding to copy the data to the view model and report the illegal phone number. This is due to the underlying mechanism implemented by UWP apps; data in a bound control is not copied back to the data source until the control loses focus. Clicking a button in a command bar does not cause a change of focus, although tabbing to a button does.
2. These changes violate the validation rules implemented by the `ValidateCustomer` method. The `ValidateCustomer` method populates the `LastError` property of the ViewModel with validation messages, which are displayed on the form in the `TextBlock` that binds to the `LastError` property.

#### 5. Test Undo Changes
1. Click **Undo Changes**, and verify that the original data is reinstated on the form. The validation messages disappear, and the ViewModel reverts to Browsing mode.

#### 6. Test Adding a New Customer
1. Click **Add**. The fields on the form should be cleared (apart from the ID field, which displays the value 0).
2. Enter the details for a new customer. Be sure to provide a first name and last name, a valid email address, and a numeric phone number (you can also include parentheses, hyphens, and spaces).
3. Click **Save Changes**. If the data is valid (there are no validation errors), your data should be saved to the database. You should see the ID generated for the new customer in the ID field, and the ViewModel should switch back to Browsing mode.

#### 7. Experiment with the App
1. Experiment with the app by adding and editing more customers. Notice that you can resize the view to display the columnar layout, and the form should still work.
2. To simulate the operation running more slowly, add the following statement near the end of the `SaveChanges` method:

```csharp
private async void SaveChanges()
{
    ...
    await Task.Delay(2000);
    this.IsBusy = false;
}
```

This code causes a delay of 2 seconds.

#### 8. Stop Debugging
1. When you have finished, return to Visual Studio and stop debugging.

### Summary

In this chapter, you learned how to use the Entity Framework to create an entity model that you can use to connect to a SQL Server database. The database can be running locally or in the cloud. You also saw how to create a REST web service that a UWP app can use to query and update data in the database through the entity model, and you learned how to integrate code that calls the web service into a ViewModel.

You have now completed all the exercises in this book. I hope you are thoroughly conversant with the C# language and understand how to use Visual Studio 2017 to build professional apps for Windows 10. However, this is not the end of the story. The best C# programmers learn from continued experience, and you can gain this experience only by building C# apps. As you do so, you will discover new ways to use the C# language and many features in Visual Studio 2017 that I have not had space to cover in this book. Also, remember that C# is an evolving language. Since its introduction in 2001, C# has seen numerous enhancements, including support for generics, LINQ, asynchronous processing, and many others.

In parallel with the evolution of the C# programming language, the Windows operating system has changed considerably since the first edition of this book. The changes instigated by Windows 8 onward have been the most radical, and developers familiar with earlier editions of Windows now have exciting new challenges to build apps for the modern, touch-centric, mobile platform that Windows 10 provides. Furthermore, modern business apps are extending beyond the boundaries of the organization and out to the cloud, requiring you to implement highly scalable solutions that might need to support thousands or even millions of concurrent users. Visual Studio 2017, together with Azure and C#, will undoubtedly be instrumental in assisting you to address these challenges.