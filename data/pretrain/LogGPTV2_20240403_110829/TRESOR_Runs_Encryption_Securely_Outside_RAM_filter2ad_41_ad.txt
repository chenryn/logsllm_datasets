### 5.2 Processor Attacks

Now that the key is stored inside the CPU and never enters RAM, attackers may target the processor registers instead of RAM. There are two primary methods for attacking processor registers: software-based and hardware-based attacks.

#### Software-Based Attacks
On the software layer, we differentiate between attackers with root access and those with unprivileged access. For attackers with standard user privileges, there should be no way to read out the key. Since debug registers are only accessible from kernel space, and the only method for standard users to execute kernel code is through system calls, unprivileged attackers are effectively thwarted by the `ptrace` patch. We verified this using a user-space utility that made `ptrace` calls to read the debug registers; as expected, only zeros were returned to user space. Overwriting the key via `ptrace` is also not possible; here, `-EBUSY` (for dr0 to dr3) and `-EPERM` (for dr6 and dr7) are returned.

For root, the situation is different because there are more ways to execute kernel code: via loadable kernel modules (LKMs) and via `/dev/kmem`. If Linux is compiled with LKM or KMEM support, root can insert arbitrary code into a running kernel and execute it with ring 0 privileges. To demonstrate this, we created a small malicious module that reads out the debug registers and writes them into the kernel log file. A similar attack is possible by writing to `/dev/kmem`. Therefore, if compiled with LKM or KMEM support, root can gain full access to the TRESOR key. Conversely, if compiled without LKM and KMEM support, even root has no ability to access the secret key—an advantage over conventional disk encryption systems where root can always read and write the secret key from RAM. Running TRESOR without LKM and KMEM support, the key can be set once upon boot but cannot be retrieved or manipulated while the system is running.

#### Hardware-Based Attacks
The hardware layer is also critical. With physical access to the machine, new possibilities arise for the attacker. For advanced electrical engineers, it may be possible to read out the registers of a running CPU using an oscilloscope, by measuring the electromagnetic field around the CPU, or other means. However, we are not aware of any successful attacks of this type.

Instead, we focus on a simpler scenario: it may be possible to reboot the machine with a malicious boot device that reads out what is left in the CPU registers (similar to cold boot attacks [14]). The key question is whether CPU registers are reset to zero upon reboot or retain their contents until they are used otherwise. This may depend on the BIOS version, CPU reinitialization code, and whether the machine was rebooted by a software interrupt (e.g., pressing CTRL-ALT-DELETE) or a hardware reset button. While the former method keeps the CPU powered, the latter briefly switches it off.

To investigate the practical impact of such an attack, we developed a malicious boot device called Cobra (Cold Boot Register Attack). Initial tests on virtual machines showed that debug registers are reset on hardware reboots but not on software reboots. On software reboots, Cobra could restore debug registers; all tested virtual machines (Qemu, Bochs, VMware, and VirtualBox) exhibited this behavior. If real hardware behaved similarly, the consequences would be severe, as it would be easy to read out the secret key, rendering TRESOR practically useless. Fortunately, it turned out that all VMs have a minor implementation flaw regarding this attack. On real hardware, debug registers are always reset to zero—even upon software reboots. We verified this by testing different machines with various processors and BIOS versions. Table 5 summarizes our findings.

| Soft Reboot | Hard Reset |
|------------|------------|
| AMI        | -          |
| Phoenix    | -          |
| First      | -          |
| Lenovo     | -          |
| Bochs      | x          |
| Qemu       | x          |
| VMware     | x          |
| VirtualBox | x          |

[-] = Not vulnerable  
[x] = Vulnerable

Overall, we argue that TRESOR is secure against local, unprivileged attacks in any case. Furthermore, TRESOR is even secure against attackers who could gain root access if the kernel is compiled without LKM and KMEM support. On the hardware level, TRESOR withstands cold boot attacks against both main memory and CPU registers. This holds true for real hardware, but running TRESOR inside a virtual machine is insecure as register contents of the guest are simulated in the host’s main memory.

### 5.3 Side Channel Attacks

Lastly, we want to mention that TRESOR is resistant to timing attacks [26]. This is not due to our own efforts but rather to Intel's AES-NI instructions. Intel states: “Beyond improving performance, the AES instructions provide important security benefits. By running in data-independent time and not using tables, they help in eliminating the major timing and cache-based attacks that threaten table-based software implementations of AES.” [31] Based on this statement and the fact that there are no input-dependent branches in the control flow of our code, we argue that TRESOR is resistant to side channel attacks as well.

### 6 Conclusions and Future Work

Given the known attacks against main memory (especially DMA and cold boot attacks), we consider RAM too insecure to guarantee the confidentiality of secret disk encryption keys today. Thus, we presented TRESOR, an approach to prevent main memory attacks against AES by implementing the encryption algorithm and its key management entirely on the microprocessor, using only processor registers. We first explained the important design choices of TRESOR and the key aspects of its implementation. We then discussed how we integrated it into the Linux kernel. Our performance benchmarks show that TRESOR performs well compared to the generic version of AES and, most importantly, satisfies our security policy.

#### 6.1 Conclusions

Our primary security goal was to prevent the tracing of the secret key in volatile memory, effectively making attacks on main memory pointless. Despite considerable effort, we were unable to retrieve the key in RAM. Therefore, we are confident that TRESOR is a substantial improvement over conventional disk encryption systems.

Since we took perfectly intact memory images of a running TRESOR VM and knew the key beforehand, we had an advantage over real attackers trying to retrieve an unknown key. This strengthens our test results, as if we cannot retrieve the known key in an unscathed image, it is even less likely that an attacker can retrieve an unknown key in a partially damaged image.

Another security goal was to avoid introducing flaws not present in ordinary encryption systems. We showed that TRESOR is safe against local attacks on both the software and hardware layers. Interestingly, if the kernel is compiled without LKM and KMEM support, there is no known way to retrieve the secret key even with privileged root access—another substantial improvement over conventional disk encryption systems.

In addition to evaluating security, we collected performance benchmarks, revealing that TRESOR is slightly faster than common versions of AES. We also showed that the reactivity of Linux is not affected by the atomicity of encryption and decryption. Summarizing, TRESOR runs encryption securely outside RAM and achieves higher security than any disk encryption system we know, without losing performance or compatibility with existing applications. It is possible to treat RAM as untrusted and store secret keys in a safe place within today’s x86 standard architecture.

#### 6.2 Future Work

Currently, TRESOR allows storing only a single, static key because the debug registers cannot hold a second one. Future versions of TRESOR may securely store multiple disk encryption keys in RAM by scrambling them with a master key, similar to Loop-Amnesia [27].

This idea can be extended to a broader use case: further AES keys to be used with IPSec or SSL, i.e., in conjunction with userland, could be encrypted with the TRESOR master key and stored securely in RAM. Session keys could be set and removed dynamically in any quantity. Using such a session key to encrypt an input block, the user space application would need to make a special system call that: 1) invokes TRESOR to read and decrypt the desired key and 2) lets TRESOR use the recently decrypted key to encrypt the input block. Between these steps, the session key must not leave the processor, meaning both steps need to happen within the same atomic section. As a downside, such a system would require user space support and would incur a performance penalty.

Another future task is to move the secret key into registers that are even less frequently used than the debug registers, such as machine-specific registers (MSRs). This would allow debuggers to use hardware breakpoints and watchpoints again. However, the best solution would be the introduction of a special key register into future versions of AES-NI by Intel or AMD.

Finally, we plan to investigate the possibility of implementing a TRESOR-like system as a third-party application for Windows.

### Acknowledgments

We would like to thank Hans-Georg Esser, Thorsten Holz, Ralf Hund, Stefan Vömel, and Carsten Willems for reading a prior version of this paper and providing valuable suggestions for improvement.

### Availability

TRESOR is free software published under the GNU GPL v2 [32]. Its source code is available at http://www1.informatik.uni-erlangen.de/tresor.

### References

[1] Windows BitLocker Drive Encryption Frequently Asked Questions. http://technet.microsoft.com/en-us/library/cc766200(WS.10).aspx, July 2009.

[2] KVM: Kernel Based Virtual Machine, 2010. http://www.linux-kvm.org/.

[3] BECHER, M., DORNSEIF, M., AND KLEIN, C. N. FireWire - All Your Memory Are Belong To Us. In Proceedings of the Annual CanSecWest Applied Security Conference (Vancouver, British Columbia, Canada, 2005), Laboratory for Dependable Distributed Systems, RWTH Aachen University.

[4] BÖCK, B. Firewire-based Physical Security Attacks on Windows 7, EFS and BitLocker. Secure Business Austria Research Lab, Aug. 2009.

[5] BOILEAU, A. Hit by a Bus: Physical Access Attacks with Firewire. In Proceedings of Ruxcon '06 (Sydney, Australia, Sept. 2006). Tool (2008): http://storm.net.nz/static/files/winlockpwn.

[6] CARRIER, B. D., AND GRAND, J. A Hardware-Based Memory Acquisition Procedure for Digital Investigations. Digital Investigation 1, 1 (Feb. 2004), 50–60.

[7] CARSTEN MAARTMANN-MOE. Interrogate. http://interrogate.sourceforge.net/, Aug. 2009.

[8] CHRISTOPHE DEVINE AND GUILLAUME VISSIAN. Compromission physique par le bus PCI. In Proceedings of SSTIC '09 (June 2009), Thales Security Systems.

[9] CON KOLIVAS. Interbench: The Linux Interactivity Benchmark, 2006. http://users.on.net/~ckolivas/interbench/.

[10] DABROWSKI, R., MUNSON, J., AND E. Is 100 Milliseconds Too Fast? In Proceedings of the CHI Conference on Human Factors in Computing Systems (2001), vol. 2 of Short talks: interaction techniques, ACM, pp. 317–318.

[11] FABRICE BELLARD. Qemu: Open Source Processor Emulator, 2010. http://qemu.org.

[12] FIPS. Advanced Encryption Standard (AES). Federal Information Processing Standards Publication 197, National Institute for Standards and Technology, Nov. 2001.

[13] GUILLAUME DELUGRE. Reverse Engineering the Broadcom NetExtreme’s firmware. In Proceedings of HACK.LU '10 (Luxembourg, Nov. 2010), Sogeti ESEC Lab.

[14] HALDERMAN, J. A., SCHOEN, S. D., HENINGER, N., CLARKSON, W., PAUL, W., CALANDRINO, J. A., FELDMAN, A. J., APPELBAUM, J., AND FELTEN, E. W. Lest We Remember: Cold Boot Attacks on Encryption Keys. In Proceedings of the 17th USENIX Security Symposium (San Jose, CA, Aug. 2008), Princeton University, USENIX Association, pp. 45–60.

[15] HENINGER, N., AND FELDMAN, A. AESKeyFind. http://citp.princeton.edu/memory-content/src/, July 2008.

[16] HITACHI GLOBAL STORAGE TECHNOLOGIES. Safeguarding Your Data with Hitachi Bulk Data Encryption, July 2008. http://www.hitachigst.com/tech/techlib.nsf/techdocs/74D8260832F2F75E862572D7004AE077/$file/bulk_encryption_white_paper.pdf.

[17] HULTON, D. Cardbus Bus-Mastering: 0wning the Laptop. In Proceedings of ShmooCon '06 (Washington DC, USA, Jan. 2006).

[18] INTEL CORPORATION. Intel 64 and IA-32 Architectures Software Developer’s Manual, Volume 3A and 3B ed., Jan. 2011. System Programming Guide.

[19] JEFFREY KATCHER. PostMark: A New File System Benchmark. http://communities-staging.netapp.com/servlet/JiveServlet/download/2609-1551/Katcher97-postmark-netapp-tr3022.pdf, 1997. Network Appliance, Inc.

[20] JOHN FRUEHE, DIRECTOR OF PRODUCT MARKETING. Following Instructions. http://blogs.amd.com/work/2010/11/22/following-instructions/, Nov. 2010. AMD.

[34] THAKKAR, S., AND HUFF, T. The Internet Streaming SIMD Extensions. Intel Corporation. IEEE Computer 32, 12 (Apr. 1999), 26–34.

[35] TOSHIBA CORPORATION. Self-Encrypting Drive Technology. RSA Conference 2009, Apr. http://sdd.toshiba.com/techdocs/WaveRSADemoFinalPressRelease4152009.pdf.

[36] TRUECRYPT FOUNDATION. TrueCrypt: Free Open-Source Disk Encryption Software for Windows, Mac OS and Linux. http://www.truecrypt.org/, 2010.

### Appendix

#### A.1 AES-128 Source Code

[21] JÜRGEN PABEL. Frozen Cache. Blog: http://frozenchache.blogspot.com/, Jan. 2009.

[22] JÜRGEN PABEL. FrozenCache: Mitigating cold-boot attacks for Full-Disk-Encryption software. In 27th Chaos Communication Congress (Berlin, Germany, Dec. 2010), CCC. Video: http://blog.akkaya.de/jpabel/2010/12/31/After-the-FrozenCache-presentation.

[23] MCGREGOR, P., HOLLEBEEK, T., VOLYNKIN, A., AND WHITE, M. Braving the Cold: New Methods for Preventing Cold Boot Attacks on Encryption Keys. In Black Hat Security Conference (Las Vegas, USA, Aug. 2008), BitArmor Systems, Inc.

[24] MÜLLER, T., DEWALD, A., AND FREILING, F. AESSE: A Cold-Boot Resistant Implementation of AES. In Proceedings of the Third European Workshop on System Security (EUROSEC) (Paris, France, Apr. 2010), RWTH Aachen / Mannheim University, ACM, pp. 42–47.

[25] ORACLE CORPORATION. VirtualBox: x86 and AMD64 virtualization, 2011. http://www.virtualbox.org.

[26] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks and Countermeasures: the Case of AES. In Topics in Cryptology - The Cryptographers’ Track at the RSA Conference 2006 (San Jose, CA, USA, Nov. 2005), Weizmann Institute of Science, Springer, pp. 1–20.

[27] PATRICK SIMMONS. Security Through Amnesia: A Software-Based Solution to the Cold Boot Attack on Disk Encryption, Apr. 2011. University of Illinois at Urbana-Champaign.

[28] PETRONI, N. L., FRASER, T., MOLINA, J., AND ARBAUGH,