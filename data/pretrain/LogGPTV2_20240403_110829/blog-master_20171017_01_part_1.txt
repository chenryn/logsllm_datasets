## [未完待续] PostgreSQL\Greenplum Customer视角TODO      
### 作者            
digoal            
### 日期             
2017-10-17        
### 标签            
PostgreSQL , Greenplum , TODO               
----                        
## 背景         
https://wiki.postgresql.org/wiki/Todo      
## PostgreSQL    
### 一、内置HA  
#### 1、多副本自动选主、自动HA (zero downtime)  
quorum based sync replication + client driver auto failover  
#### 2、单副本HA  
### 二、sharding  
#### 1. 物理流复制备库，支持对外部表执行DML操作，因为它不修改本地数据，没有风险。      
此法，可以用于sharding库的中间层库的扩展。      
a, b, c, d。   
a为主库，b,c,d为从库。  a,b,c,d都作为中间库，使用postgres_fdw或其他fdw来做sharding。      
### 三、可靠性  
#### 1、同步模式可自动降级  
同步复制自动降级，自动锁定（设置降级后的延迟阈值）。      
阈值可配置。
半同步，HANG N s 自动降级为异步。
延迟N秒或N bytes，或N个事务后，再次hang，确保丢失在允许范围内。
cache后，再升级为同步模式。
此模式可以保证丢失在0到N的范围内。
#### 2. 自适应同步模式(流复制)      
增加一个同步模式，remote_delay，当SYNC standby节点的WAL接收延迟低于这个值时，使用local的提交方式，用户COMMIT时，不进入等待队列。      
例如remote_delay=8KB      
那么当延迟低于8KB时，COMMIT或ROLLBACK不需要等待wal发送给备库，也就是说不需要进入sleep状态，本地REDO落盘后就提交。      
#### 3. 单步入库优化      
批量入库FEATURE      
5个开关 ：     
是否允许自动回滚，      
批量提交QUERY数，      
批量提交tuple影响数，      
idle in transaction 超时参数      
是否开启自动的savepoint      
自动分批提交特性：  
如果没有在事务中，则自动开启BEGIN      
到达阈值自动提交，并自动开启BEGIN      
允许用户选择是否自动回滚      
需要注意snapshot too old目前不处理写事务过旧。      
需要注意9.6以前的版本，长事务可能导致膨胀。      
应用场景：  
业务有大量的写入，      
业务不想改SQL，就是单条单条插入      
在同步多副本环境中特别有效。      
效果与 sync=off 类似      
但是记录批次可控，同时用户可感知，自动回滚到前一个savepoint。      
安全性比sync=off高。      
#### 4. 同步复制COMMIT延迟性能改进      
目前同步复制，事务提交时在一个队列中等待WAL SENDER获取到的RMT LSN进行释放。 导致大量的MUTEX锁，同时很多进程的等待可能是无效的。      
建议改成进程自己去询问RMT的LSN。      
采用N个预先建立的primary到standby(s)的连接，根据主节点backend process PID取模，自动选择对应的链路去询问。      
询问的LSN，分为几个(wal receiver(to buffer), wal write, wal flush ,wal apply)，询问到的LSN同时也通知给其他进程，其他进程也一样，自己去询问，同时接受别人询问的结果，一伙人去询问，可能效率更高。      
进程根据不同的级别，选择需要比较的COMMIT LSN与RMT LSN，进行释放。      
#### 5. flashback query支持      
1、允许用户设置表级vacuum 保留版本数，延迟VACUUM，同时延迟清理PG_XLOG，PG_CLOG。      
用户指定falshback的时间，查询当时的表快照。      
指定时间时，根据扫描到的XMIN或XMAX，在PG_XLOG中判断事务的提交时间，以及pg_clog中的事务结束状态，判断对用户是否可见。      
如果事务提交时间早于FLASHBACK时间，并且PG_CLOG事务结束状态为提交，则对用户可见。      
2、postgresql, 支持flashback, 例如postgresql 主备切换时，老的主库在没有配置recovery.conf时启动并有写入，导致分裂。使用flashback可以快速回到上一个时间线。      
使用pg_rewind可以实现同样功能。内部实现可以在启动后记录若干个变更的UNDO，从而实现可以回退。      
### 四、索引  
#### 1. 当使用GIN索引，并且大量使用了LIMIT来限制输出时，建议使用rum索引方法。避免bitmap index scan的recheck耗时。      
根据场景自动选择gin\rum索引的需求。  
#### 2. PostgreSQL , 在创建分区表索引时，支持每个分区并行创建。      
#### 3. PostgreSQL , paralle append + 外部表 + pushdown，可以实现sharding 架构下的并发计算。（例如求SUM,AVG,COUNG,MIN,MAX等，不过针对外部表的parallel append内核层面还没有支持好，需要CUSTOM SCAN）      
#### 4. PostgreSQL, 支持单个索引含多颗树 。       
[《PostgreSQL 店铺运营实践 - JSON[]数组 内部标签数据等值、范围检索100倍+加速示例》](../201802/20180208_01.md)        
分区索引。    
#### 5. 支持分区索引。一个索引根据某些表达式、字段HASH、范围分区，构成多颗树。（时间、空间、多个属性）      
#### 6. GIN索引支持范围扫描（目前仅支持等值(包含、相交等)扫描）。      
```      
arr >>= ? and arr =, <=，```实现元素的区间扫描。      
#### 7. 假设索引      
虚拟索引，查看执行计划的变化，有多少提升。    
PPAS 10已支持。    
#### 8. PostgreSQL 支持多种索引接口，支持自动选择合适的索引接口。      
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)        
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)        
#### 9. btree, gist等 (非gin)索引，支持pending list特性，提升含索引时的数据写入性能。        
#### 10. gin支持条式返回，而非全量扫描index token后再返回。类似图式搜索的纵向(按点)返回和横向(层级返回)返回特性。      
#### 11. 支持index skip scan  
目前通过cte递归来支持    
#### 12. 全局索引（分区表全局大索引），继承表全局大索引，多表伪索引。      
全局索引，以及全局分区索引。   
### 五、性能  
#### 1. PostgreSQL，全表扫描支持通过hint或开关来使用directio，不占用OS CACHE，支持不加载到SHARED BUFFER。      
目前大表扫描，超过四分之一SHARED BUFFER的表，会设置FLAG，分批读取，并优先刷出SHARED BUFFER，防止扫描大表时SHARED BUFFER的抖动。  
### 六、功能  
#### 1. PostgreSQL，每个DB有单独的REDO，DB支持热插拔。支持DB级的物理流复制。一个集群的数据库可以物理流复制的模式拷贝到另一个集群。     
Oracle 18c 已支持      
#### 2. postgresql , 并行写wal。目前极限写压力下，WAL会成为瓶颈。        
#### 3. PostgreSQL，update returning old.column        
#### 4. PostgreSQL，列存储，支持并行的列存储。      
#### 5. PostgreSQL， online ddl , 可以改进pg_repack来支持ONLINE DDL。       
#### 6. pgbench 支持动态对象名，例如      
```      
\set suffix random(1,128)      
\set id random(1,10000000)      
select * from tbl:suffix where id=:id;      
```      
#### 7. 类似GIT的PG函数语言的版本迭代控制  
pg的存储过程接口非常丰富，用到的用户也非常多，版本控制的功能非常重要。  
#### 8. postgresql , HTAP业务，资源队列管理，资源隔离，进程组管理.      
#### 9. grouping sets, rollup, cube, grouping id函数         
http://blog.csdn.net/huang_xw/article/details/6402396      
#### 10. grouping()、grouping_id()、group_id()      
1 grouping()      
参数只有一个，而且必须为group by中出现的某一列，表示结果集的一行是否对该列做了grouping。对于对该列做了grouping的行而言，grouping()=0，反之为1；      
2 grouping_id()      
参数可以是多个，但必须为group by中出现的列。Grouping_id()的返回值其实就是参数中的每列的grouping()值的二进制向量，例如如果grouping(A)=1，grouping(B)=0，则grouping_id(A,B)的返回值就是二进制的10，转成10进制就是2。      
3 group_id()      
无参数。见上面的说明3），group by对某些列的集合会进行重复的grouping，而实际上绝大多数情况下对结果集中的这些重复行是不需要的，那就必须有办法剔出这些重复grouping的行。当结果集中有n条重复grouping而形成的行时，每行的group_id()分别是0,1,…,n，这样我们在条件中加入一个group_id()<1就可以剔出这些重复grouping的行了。      
#### 11. count(distinct) 目前只支持GroupAggregate，希望加入HashAggregate支持。同时支持HashAggregate的并行计算。      
#### 12. grant select on table 可以直接扣减 revoke select on table (column)。而不是只能grant select on table (column)来控制列的查询权限。      
#### 13. 统计信息、元数据信息快照，用于回放SQL，得到过去的执行计划信息。      
#### 14. 时间区间统计信息，统计信息分段快照，ORACLE已有功能，可以生成SQL在历史某个时间的执行计划。      
#### 15. jsonb, json, hstore类型, range类型，支持内部KEY，VALUE，范围分布的统计信息（柱状图，高频词等）。      
#### 16. logical slot支持filter tables
目前只能使用逻辑订阅支持，建议可以UDF化，通过UDF可以控制TABLE放到对应SLOT中。  
### 七、可视化生态：      
#### 1. 好的可视化监控软件
#### 2. 打通elastic和postgresql      
pgsql的数据实时同步到elastic      
https://developer.atlassian.com/blog/2015/02/realtime-requests-psql-elasticsearch/      
https://github.com/jprante/elasticsearch-jdbc/wiki/Step-by-step-recipe-for-setting-up-the-river-with-PostgreSQL      
https://github.com/jprante/elasticsearch-jdbc      
pgsql直接访问elastic的数据      
https://github.com/Mikulas/pg-es-fdw      
#### 3. 改进Orange，支持kibana所有可视化分析功能(图、地理、。。。。)      
https://orange.biolab.si/        
#### 4. 改进kibana，兼容postgresql      
https://www.elastic.co/products/kibana      
### 八、GIS  
#### 1. 改进qgis，稳定性，功能。云端GIS服务      
https://qgis.org/en/site/      
#### 2. arcgis合作      
#### 3. 其他      
http://openbouquet.io/      
http://grafana.org/      
http://redash.io/      
人才方向，可视化，GIS      
https://www.llamasoft.com/      
### 九、PostgreSQL 内核    
#### 1. 社区roadmap       
https://wiki.postgresql.org/wiki/Development_information      
#### 2. 一些社区企业ROADMAP       
https://postgrespro.com/roadmap/      
https://wiki.postgresql.org/wiki/NTT_roadmap      
#### 3. postgresql, 更新合并，对应秒杀场景(库存扣减)。      
#### 4. query rewrite: 自动消除含unique 约束的group by, 例如 unique (c1,c2)， 自动消除 group by c1,c2,...；      
#### 5. postgresql 内置qps统计能力，增强pg_stats进程的功能。      
#### 6. split range 类型，返回range数组    
#### 7. range数组操作      
```      
range[] - range[]  减      
range[] + range[]  加      
range[] & range[]  相交      
| range[] , 合并相邻或重叠的元素      
```      
#### 8. 支持rotate_table, 行，时间，SIZE等维度。      
#### 9. 支持returning语法，update时支持返回new, old值。      
#### 10. 通过HINT 在dml中包含begin, end事务标记      
减少交互次数，直接在QUERY中包含begin或END，ROLLBACK的包。      
减少交互次数。      
例如      
```    
select /*+ begin */ x from tbl;      
自动开启事务      
update /+ end */ t set xx=xx where xx;      
update /+ commit */ t set xx=xx where xx;      
自动提交当前事务      
update /*+ rollback */ t set xx=xx where xx;      
自动回滚当前事务      
```    
#### 11. 测试流量分流支持      
通过定义规则，实现对测试流量的分流。      
目前类似双十一或者其他公司在搞大促，或者对系统进行压测时，会模拟测试请求，这些请求不应该直接写入生产表。      
可以写到影子表，例如TBL对应的影子表TBL_TEST。      
PG可以根据客户端IP，客户端端口，application_name判断客户端是否属于测试来源。      
用户可以配置规则，将属于测试来源的数据，在query rewrite这一层，把SQL改写掉，TBL_TEST替代TBL。      
#### 12. PG connection pool      
内核层面的连接池。      
连接池考虑多个分组，用户可以自定义使用哪个分组，或者默认根据QUERY的读写特性区分分组，或者根据QUERY的时长区分分组。      
#### 13. pg_hba.conf 支持区分控制superuser权限      
目前pg_hba.conf仅支持角色名，库名。  
但是不能区分角色是普通用户还是超级用户。      