# Part 1
## **简介**
这篇文章是由三部分组成的系列文章之中的第一篇，该系列文章描述了在 [WoW64](https://www.sentinelone.com/blog/now-stage-deep-hooks-monitoring-native-execution-wow64-applications/)应用程序(在64位Windows平台上运行的32位进程)中连接本机NTDLL时必须克服的困难。正如[某些来源](https://docs.microsoft.com/zh-cn/windows/desktop/WinProg64/wow64-implementation-details)所记录的那样，WoW64进程包含两个版本的NTDLL。第一个是专用的32位版本，它将系统调转到WoW64环境，并在那里进行调整以适应[x64
ABI](https://docs.microsoft.com/en-us/cpp/build/overview-of-x64-calling-conventions)。[第二个](https://www.sentinelone.com/blog/deep-hooks-monitoring-native-execution-wow64-applications-part-2/)本机64位版本，由WoW64环境调用，最终负责用户模式到内核模式的转换。  
由于在连接64位NTDLL时遇到了一些技术困难，大多数与安全相关的产品在这样的进程中只钩住了32位模块。唉，从攻击者的角度来看，绕过这些32位钩子与它们提供一些[众所周知](https://hitmanpro.wordpress.com/2015/11/10/mitigating-wow64-exploit-attacks/)的技术帮助相比是微不足道的。尽管如此，为了调用系统并执行其他各种任务，最终这些技术中的大多数会调用NTDLL的本机(即64位)版本。因此，通过连接本机NTDLL，端点保护解决方案可以更好地了解进程的操作，并在一定程度上对旁路通道的影响更有弹性。  
本文中，我们将介绍将64位模块注入WoW64应用程序的方法。下一篇文章将更深入地研究其中一种方法，并深入研究处理CFG-aware系统需要修改的一些细节。本系列的最后一篇文章将介绍为了钩住64位的NTDLL，必须更改现成的挂钩引擎应用。  
当我们开始这项研究时，我们决定把主要精力放在Windows 10上。我们提供的所有注入方法都在几个Windows
10版本(主要是RS2和RS3)上进行了测试，如果在较老的Windows版本上使用，可能需要不同的方法。
## **注入**
向WoW64应用程序中注入64位模块始终是可能的，尽管在这样做时需要考虑一些限制。通常，WoW64进程包含很少的64位模块，即本机`ntdll.dll`和组成WoW64环境本身的模块:`WoW64.dll`,`wow64cpu.dll`,
wow64win.dll。不幸的是，通常使用的Win32子系统dll的64位版本(例如`kernelbase.dll`, `kernel32.dll`,
`user32.dll`等)没有加载到进程的地址。强迫进程加载这些模块中的任何一个都是可能的，尽管[有些困难和不可靠](http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/#Issue_3_Loading_Kernel32dll_8211_Understanding_The_Constraints_and_Protections)。  
因此，作为成功而可靠的注入的第一步，我们应该去掉候选模块的所有外部依赖项，除了本机NTDLL。在源代码级别，这意味着对更高级别Win32
api(如`VirtualProtect()`)的调用将必须被本地对应api(在本例中是`NtProtectVirtualMemory()`)的调用所取代。还需要进行其他修改，将在本系列的最后部分详细讨论。
图1 导入描述符的DLL (NTDLL)
### **wow64log.dll劫持**
正如之前Walied
Assar所发现的可知，在初始化时，WoW64环境尝试加载一个64位DLL，名为wow64log.dll直接从system32目录。如果找到这个DLL，它将被加载到系统中的每个WoW64进程中，因为它导出了一组特定的、定义良好的函数。dll目前并没有附带Windows的零售版本，这种机制实际上可以被滥用为注入方法，只需劫持这个dll并将我们自己的版本放到system32中。
图2 ProcMon捕获了一个WoW64进程并试图加载wow64log.dll
这种方法的主要优点在于它非常简单——注入模块所需要做的就是将其部署到前面提到的位置，然后让系统加载器完成剩下的工作。第二个优点是，加载这个DLL是WoW64初始化阶段的合法部分，因此它支持所有当前可用的64位Windows平台。
但是，这种方法有一些可能的缺点，比如`wow64log.dll`的Dll文件可能已经存在于system32目录中，尽管(如上所述)它在缺省情况下并不存在。其次，由于对`LdrLoadDll()`的底层调用最终是由系统代码发出的，因此该方法几乎不能控制注入过程。这限制了我们从注入中排除某些进程、指定模块何时加载的能力等等。
### **天堂之门**
只需自己对`LdrLoadDll()`发出调用，而不是让内置系统机制代我们调用，就可以实现更多对注入过程的控制。实际上，这并不像看上去那么简单。可以如此假设，32位图像加载器将拒绝任何加载64位图像的尝试，从而停止这种操作过程。因此，如果我们希望将本机模块加载到WoW64进程中，我们必须以某种方式通过本机加载器。我们可以分为两个阶段:  
1.获得在目标进程中执行任意32位代码的能力。  
2.对64位版本的`LdrLoadDll()`进行调用，将目标DLL的名称作为其参数之一传递。  
如果能够在目标进程的上下文中执行32位代码([有很多方法](https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process))，那么我们仍然需要一个可以自由调用64位api的方法。一种方法是利用所谓的“天堂之门”。  
“天堂之门”是一种常用的技术的名称，它允许32位二进制文件执行64位指令，而无需通过WoW64环境强制执行的标准流。这通常通过用户发起的对代码段
[0x33的控制传输来完成](https://www.malwaretech.com/2014/02/the-0x33-segment-selector-heavens-gate.html)，代码段0x33将处理器的执行模式从32位兼容模式切换到64位长模式。
图3 一个执行x86代码的线程，在它转换到x64领域之前。
在跳转到x64领域之后，直接调用64位NTDLL的选项变得很容易。在使用漏洞和其他潜在恶意程序的情况下，这允许它们避免攻击放置在32位api上的钩子。对于DLL注入器，这解决了手头的问题，因为它打开了调用64位版本的LdrLoadDll()的可能性，该版本能够加载64位模块。
图4-出于演示目的，我们使用Blackbone库成功地使用Heaven 's Gate将64位模块注入WoW64进程。
我们将不再详细介绍“天堂之门”的具体实现，但好奇的读者可以在[这里](http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/)了解更多。
### **利用APC进行注入**
随着向系统中加载内核模式驱动程序的能力的提高，可供我们使用的注入方法的数量显著增加。在这些方法中，最流行的可能是[通过APC注入](http://rsdn.org/article/baseserv/InjectDll.xml):它被一些
[一些AV供应商](https://www.google.com/patents/CA2935248A1?cl=en)、[恶意开发者](http://www.kernelmode.info/forum/viewtopic.php?p=5518#p5518)广泛使用，甚至可能被
[ CIA](https://wikileaks.org/ciav7p1/cms/page_7995519.html)使用。  
简而言之，APC(异步过程调用)是一种内核机制，它提供了一种在特定线程上下文中执行定制例程的方法。一旦被分派，APC将异步转移目标线程的执行流以调用所选的例程。  
apc可分为两大类:
    1. 内核模式`APCs: APC`例程最终将执行内核模式代码。这些被进一步分为特殊的内核模式的apc和普通的内核模式的apc，但是我们不会详细讨论 [它们之间的细微差别](http://www.opening-windows.com/download/apcinternals/2009-05/windows_vista_apc_internals.pdf)。
    2. 用户模式`APCs: APC`例程最终将执行用户模式代码。只有当拥有apc的线程变得可警报时，才会发出用户模式apc。这是我们将在本节其余部分中讨论的APC类型。
apc主要用于系统级组件，用于执行各种任务(例如促进I/O完成)，但也可以用于DLL注入目的。从安全产品的角度来看，内核空间的APC注入提供了一种方便可靠的方法，可以确保特定模块被加载到(几乎)整个系统所需的每个进程中。  
对于64位NT内核，负责初始调度用户模式APCs(用于本机64位进程和WoW64进程)的函数是从本机NTDLL导出的`KiUserApcDispatcher()`的64位版本。除非APC发行者另有明确要求(通过`PsWrapApcWow64Thread()`)，
APC例程本身也将执行64位代码，因此能够加载64位模块。  
通过APC实现DLL注入的经典方法是使用所谓的“适配器thunk”。适配器thunk是写入目标进程地址空间的位置无关代码的一小段。它的主要目的是从用户模式APC的上下文中加载一个DLL，因此它将根据`KNORMAL_ROUTINE`规范接收它的参数:
图5 用户模式APC过程的原型，取自wdm.h**如上图所示，
如上图所示，KNORMAL_ROUTINE类型的函数接收三个参数，第一个参数是NormalContext。与WDM模型中的许多其他“上下文”参数一样，这个参数实际上是指向用户定义结构的指针。在我们的例子中，我们可以使用这个结构将以下信息传递到APC过程中:
    1.  用于加载DLL的API函数的地址。在WoW64进程中，这必须是本地LdrLoadDll()，作为64位内核32的版本。dll没有加载到进程中，因此无法使用LoadLibrary()及其变体。
    2.  我们希望加载到进程中的DLL的路径。
一旦适配器thunk被`KiUserApcDispatcher()`调用，它就会解包`NormalContext`，并使用给定的DLL路径和其他一些硬编码参数对提供的loader函数发出调用:
图6 典型的“适配器thunk”设置为用户模式APC的目标
为了更好地使用这种技术，我们编写了一个标准的内核级APC注入器，并对其进行了修改，使其能够支持向WoW64进程注入64位dll(如附录a所示)。尽管很有希望，但是当尝试将我们的DLL注入到任何支持CFG的WoW64进程时，进程崩溃了，并且出现了CFG验证错误。
图7 由于试图调用适配器thunk而导致的CFG验证错误
## 预告:
在下一篇文章中，我们将深入研究CFG的一些实现细节，以帮助理解这种注入方法失败的原因，并提出几种可能的解决方案来克服这个障碍。
## **附录**
### **附录A APC注入的完整源代码与适配器thunk**