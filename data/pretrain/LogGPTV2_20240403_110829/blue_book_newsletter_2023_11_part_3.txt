    datasources:
      - name: Loki
        type: loki
        access: proxy
        orgId: 1
        url: http://loki:3100
        basicAuth: false
        isDefault: true
        version: 1
        editable: false
    ```
    [Storage configuration](https://grafana.com/docs/loki/latest/storage/):
    Unlike other logging systems, Grafana Loki is built around the idea of only indexing metadata about your logs: labels (just like Prometheus labels). Log data itself is then compressed and stored in chunks in object stores such as S3 or GCS, or even locally on the filesystem. A small index and highly compressed chunks simplifies the operation and significantly lowers the cost of Loki.
    Loki 2.0 brings an index mechanism named ‘boltdb-shipper’ and is what we now call Single Store. This type only requires one store, the object store, for both the index and chunks.
    Loki 2.8 adds TSDB as a new mode for the Single Store and is now the recommended way to persist data in Loki as it improves query performance, reduces TCO and has the same feature parity as “boltdb-shipper”.
### [SIEM](siem.md)
* New: Add Wazuh SIEM.
    [Wazuh](https://wazuh.com/)
# Operating Systems
## Linux
### [Linux Snippets](linux_snippets.md)
* New: [Accept new ssh keys by default.](linux_snippets.md#accept-new-ssh-keys-by-default)
    While common wisdom is not to disable host key checking, there is a built-in option in SSH itself to do this. It is relatively unknown, since it's new (added in Openssh 6.5).
    This is done with `-o StrictHostKeyChecking=accept-new`. Or if you want to use it for all hosts you can add the next lines to your `~/.ssh/config`:
    ```
    Host *
      StrictHostKeyChecking accept-new
    ```
    WARNING: use this only if you absolutely trust the IP\hostname you are going to SSH to:
    ```bash
    ssh -o StrictHostKeyChecking=accept-new mynewserver.example.com
    ```
    Note, `StrictHostKeyChecking=no` will add the public key to `~/.ssh/known_hosts` even if the key was changed. `accept-new` is only for new hosts. From the man page:
    > If this flag is set to “accept-new” then ssh will automatically add new host keys to the user known hosts files, but will not permit connections to hosts with changed host keys. If this flag is set to “no” or “off”, ssh will automatically add new host keys to the user known hosts files and allow connections to hosts with changed hostkeys to proceed, subject to some restrictions. If this flag is set to ask (the default), new host keys will be added to the user known host files only after the user has confirmed that is what they really want to do, and ssh will refuse to connect to hosts whose host key has changed. The host keys of known hosts will be verified automatically in all cases.
* New: [Do not add trailing / to ls.](linux_snippets.md#do-not-add-trailing-/-to-ls)
    Probably, your `ls` is aliased or defined as a function in your config files.
    Use the full path to `ls` like:
    ```bash
    /bin/ls /var/lib/mysql/
    ```
* New: [Convert png to svg.](linux_snippets.md#convert-png-to-svg)
    Inkscape has got an awesome auto-tracing tool.
    - Install Inkscape using `sudo apt-get install inkscape`
    - Import your image
    - Select your image
    - From the menu bar, select Path > Trace Bitmap Item
    - Adjust the tracing parameters as needed
    - Save as svg
    Check their [tracing tutorial](https://inkscape.org/en/doc/tutorials/tracing/tutorial-tracing.html) for more information.
    Once you are comfortable with the tracing options. You can automate it by using [CLI of Inkscape](https://inkscape.org/en/doc/inkscape-man.html).
* New: [Redirect stdout and stderr of a cron job to a file.](linux_snippets.md#redirect-stdout-and-stderr-of-a-cron-job-to-a-file)
    ```
    */1 * * * * /home/ranveer/vimbackup.sh >> /home/ranveer/vimbackup.log 2>&1
    ```
* New: [Error when unmounting a device Target is busy.](linux_snippets.md#error-when-unmounting-a-device-target-is-busy)
    - Check the processes that are using the mountpoint with `lsof /path/to/mountpoint`
    - Kill those processes
    - Try the umount again
    If that fails, you can use `umount -l`.
### [Rtorrent](rtorrent.md)
* Correction: Deprecate it in favour of qbittorrent.
    Use [qbittorrent](qbittorrent.md) instead.
### [Rocketchat](rocketchat.md)
* New: Introduce Rocketchat integrations.
    Rocket.Chat supports webhooks to integrate tools and services you like into the platform. Webhooks are simple event notifications via HTTP POST. This way, any webhook application can post a message to a Rocket.Chat instance and much more.
    With scripts, you can point any webhook to Rocket.Chat and process the requests to print customized messages, define the username and avatar of the user of the messages and change the channel for sending messages, or you can cancel the request to prevent undesired messages.
    Available integrations:
    - Incoming Webhook: Let an external service send a request to Rocket.Chat to be processed.
    - Outgoing Webhook: Let Rocket.Chat trigger and optionally send a request to an external service and process the response.
    By default, a webhook is designed to post messages only. The message is part of a JSON structure, which has the same format as that of a .
    [Incoming webhook script](https://docs.rocket.chat/use-rocket.chat/workspace-administration/integrations#incoming-webhook-script):
    To create a new incoming webhook:
    - Navigate to Administration > Workspace > Integrations.
    - Click +New at the top right corner.
    - Switch to the Incoming tab.
    - Turn on the Enabled toggle.
    - Name: Enter a name for your webhook. The name is optional; however, providing a name to manage your integrations easily is advisable.
    - Post to Channel: Select the channel (or user) where you prefer to receive the alerts. It is possible to override messages.
    - Post as: Choose the username that this integration posts as. The user must already exist.
    - Alias: Optionally enter a nickname that appears before the username in messages.
    - Avatar URL: Enter a link to an image as the avatar URL if you have one. The avatar URL overrides the default avatar.
    - Emoji: Enter an emoji optionally to use the emoji as the avatar. [Check the emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md#computer)
    - Turn on the Script Enabled toggle.
    - Paste your script inside the Script field (check below for a sample script)
    - Save the integration.
    - Use the generated Webhook URL to post messages to Rocket.Chat.
    The Rocket.Chat integration script should be written in ES2015 / ECMAScript 6. The script requires a global class named Script, which is instantiated only once during the first execution and kept in memory. This class contains a method called `process_incoming_request`, which is called by your server each time it receives a new request. The `process_incoming_request` method takes an object as a parameter with the request property and returns an object with a content property containing a valid Rocket.Chat message, or an object with an error property, which is returned as the response to the request in JSON format with a Code 400 status.
    A valid Rocket.Chat message must contain a text field that serves as the body of the message. If you redirect the message to a channel other than the one indicated by the webhook token, you can specify a channel field that accepts room id or, if prefixed with "#" or "@", channel name or user, respectively.
    You can use the console methods to log information to help debug your script. More information about the console can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/Console/log).
    . To view the logs, navigate to Administration > Workspace > View Logs.
    ```
    /* exported Script */
    /* globals console, _, s */
    /** Global Helpers
     *
     * console - A normal console instance
     * _       - An underscore instance
     * s       - An underscore string instance
     */
    class Script {
      /**
       * @params {object} request
       */
      process_incoming_request({ request }) {
        // request.url.hash
        // request.url.search
        // request.url.query
        // request.url.pathname
        // request.url.path
        // request.url_raw
        // request.url_params
        // request.headers
        // request.user._id
        // request.user.name
        // request.user.username
        // request.content_raw
        // request.content
        // console is a global helper to improve debug
        console.log(request.content);
        return {
          content:{
            text: request.content.text,
            icon_emoji: request.content.icon_emoji,
            channel: request.content.channel,
            // "attachments": [{
            //   "color": "#FF0000",
            //   "author_name": "Rocket.Cat",
            //   "author_link": "https://open.rocket.chat/direct/rocket.cat",
            //   "author_icon": "https://open.rocket.chat/avatar/rocket.cat.jpg",
            //   "title": "Rocket.Chat",
            //   "title_link": "https://rocket.chat",
            //   "text": "Rocket.Chat, the best open source chat",
            //   "fields": [{
            //     "title": "Priority",
            //     "value": "High",
            //     "short": false
            //   }],
            //   "image_url": "https://rocket.chat/images/mockup.png",
            //   "thumb_url": "https://rocket.chat/images/mockup.png"
            // }]
           }
        };
        // return {
        //   error: {
        //     success: false,
        //     message: 'Error example'
        //   }
        // };
      }
    }
    ```
    To test if your integration works, use curl to make a POST request to the generated webhook URL.
    ```bash
    curl -X POST \
      -H 'Content-Type: application/json' \
      --data '{
          "icon_emoji": ":smirk:",
          "text": "Example message"
      }' \
      https://your-webhook-url
    ```
    If you want to send the message to another channel or user use the `channel` argument with `@user` or `#channel`. Keep in mind that the user of the integration needs to be part of those channels if they are private.
    ```bash
    curl -X POST \
      -H 'Content-Type: application/json' \
      --data '{
          "icon_emoji": ":smirk:",
          "channel": "#notifications",
          "text": "Example message"
      }' \
      https://your-webhook-url
    ```
    If you want to do more complex things uncomment the part of the attachments.
### [Tails](tails.md)
* New: Add interesting operations on tails.
    - [Upgrading a tails USB](https://tails.net/upgrade/tails/index.en.html)
    - [Change the window manager](https://www.reddit.com/r/tails/comments/qzruhv/changing_window_manager/): Don't do it, they say it it will break Tails although I don't understand why
### [Vim](vim.md)
* New: [Email inside nvim.](vim.md#email-inside-nvim)
    The best looking one is himalaya
    - [Home](https://pimalaya.org/himalaya/index.html)
    - [Nvim plugin](https://git.sr.ht/%7Esoywod/himalaya-vim)
    - [Source](https://github.com/soywod/himalaya)
## Android
### [GrapheneOS](grapheneos.md)
* New: [Split the screen.](grapheneos.md#split-the-screen)
    Go into app switcher, tap on the app icon above the active app and then select "Split top".
### [Orgzly](orgzly.md)
* New: [Avoid the conflicts in the files edited in two places.](orgzly.md#avoid-the-conflicts-in-the-files-edited-in-two-places)
    If you use syncthing you may be seeing conflicts in your files. This happens specially if you use the Orgzly widget to add tasks, this is because it doesn't synchronize the files to the directory when using the widget. If you have a file that changes a lot in a device, for example the `inbox.org` of my mobile, it's interesting to have a specific file that's edited mainly in the mobile, and when you want to edit it elsewhere, you sync as specified below and then process with the editing. Once it's done manually sync the changes in orgzly again. The rest of the files synced to the mobile are for read only reference, so they rarely change.
    If you want to sync reducing the chance of conflicts then:
    - Open Orgzly and press Synchronize
    - Open Syncthing.
    If that's not enough [check these automated solutions](https://github.com/orgzly/orgzly-android/issues/8):
    - [Orgzly auto syncronisation for sync tools like syncthing](https://gist.github.com/fabian-thomas/6f559d0b0d26737cf173e41cdae5bfc8)
    - [watch-for-orgzly](https://gitlab.com/doak/orgzly-watcher/-/blob/master/watch-for-orgzly?ref_type=heads)
    Other interesting solutions:
    - [org-orgzly](https://codeberg.org/anoduck/org-orgzly): Script to parse a chosen org file or files, check if an entry meets required parameters, and if it does, write the entry in a new file located inside the folder you desire to sync with orgzly.
    - [Git synchronization](https://github.com/orgzly/orgzly-android/issues/24): I find it more cumbersome than syncthing but maybe it's interesting for you.
* New: [Add new orgzly fork.](orgzly.md#references)
    [Alternative fork maintained by the community](https://github.com/orgzly-revived/orgzly-android-revived)
# Arts
## [Emojis](emojis.md)
* New: [Create a list of most used emojis.](emojis.md#most-used)
    ```
    ¯\(°_o)/¯
    ¯\_(ツ)_/¯
    (╯°□°)╯ ┻━┻
    ＼\ ٩( ᐛ )و /／
    (✿◠‿◠)
    (/ﾟДﾟ)/
    (¬º-°)¬
    (╥﹏╥)
    ᕕ( ᐛ )ᕗ
    ʕ•ᴥ•ʔ
    ( ˘ ³˘)♥
    ❤
    ```
* New: Add new emojis.
    ```
    (╥_╥)
    (*≧▽≦)ﾉｼ))
    ```
# Other
* New: How to create a prometheus exporter with python.
    [prometheus-client](https://github.com/prometheus/client_python) is the official Python client for [Prometheus](prometheus.md).
    Installation:
    ```bash
    pip install prometheus-client
    ```
    Here is a simple script:
    ```python
    from prometheus_client import start_http_server, Summary
    import random
    import time
    REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
    @REQUEST_TIME.time()
    def process_request(t):
        """A dummy function that takes some time."""
        time.sleep(t)
    if __name__ == '__main__':
        # Start up the server to expose the metrics.
        start_http_server(8000)
        # Generate some requests.
        while True:
            process_request(random.random())
    ```
    Then you can visit http://localhost:8000/ to view the metrics.
    From one easy to use decorator you get:
    - `request_processing_seconds_count`: Number of times this function was called.
    - `request_processing_seconds_sum`: Total amount of time spent in this function.
    Prometheus's rate function allows calculation of both requests per second, and latency over time from this data.
    In addition if you're on Linux the process metrics expose CPU, memory and other information about the process for free.