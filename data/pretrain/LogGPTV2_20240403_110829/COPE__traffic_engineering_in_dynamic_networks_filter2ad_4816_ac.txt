Algorithms: We categorize the algorithms we evaluate into the
following three classes: (i) oblivious routing, (ii) prediction-based
TE, and (iii) COPE. For all algorithms, we compute the routing
by solving the corresponding linear programs using CPLEX [18].
By default, CPLEX uses dual simplex method to solve linear pro-
grams, but this is a poor choice for COPE. Given the particular
structure of our problem formulation, we use the barrier method
without crossover [12].
• Oblivious routing (oblivious): We compute the routing that
gives the optimal oblivious ratio using the algorithm described
in [7].
• Prediction-based TE: We evaluate the following three algo-
rithms in this category. The ﬁrst one requires routing update
every time interval (i.e., 1 hour in US-ISP, and 5-minutes in
Abilene), whereas the latter two require routing update once
a day. We have also conducted experiments using the Abi-
lene traces, with predictions based on trafﬁc of the preceding
week and routing update every week, and the results are sim-
ilar.
– Dynamic (dynamic): At the beginning of each interval,
we compute the optimal routing based on the trafﬁc de-
mand in the previous interval, and apply it to the trafﬁc
in the current interval. This algorithm models online
trafﬁc engineering (e.g., [19, 26]). Note that the change
in trafﬁc demand from the previous interval can result
in less efﬁcient routing, compared to the optimal for the
current interval.
– Peak trafﬁc demand (peak): At the beginning of each
day, an optimal routing is computed based on the traf-
ﬁc demand in the peak interval (in terms of the total
volume of trafﬁc) of the previous day (for US-ISP) or
the previous day and the same day of the previous week
(for Abilene). This scheme has been suggested by [4].
– Multiple trafﬁc matrices (multi): At the beginning of
each day, an optimal routing is computed based on a
set of trafﬁc matrices collected. We use the previous
day’s trafﬁc matrices to compute routing for US-ISP,
and use the trafﬁc matrices in the previous day and the
same day of the previous week to compute routing for
Abilene. This algorithm is used in [34]. In addition, we
also evaluate its variant suggested in [49], which selects
trafﬁc matrices of 6 consecutive intervals with the high-
est total volume of trafﬁc. The results are similar and
omitted for the interest of brevity.
• COPE: We evaluate two versions of COPE. For both of these
two versions, we optimize routing based on the convex hull
constructed from the set of trafﬁc matrices collected from the
previous day (for US-ISP), or from the previous day and the
same day last week (for Abilene), subject to a performance-
ratio penalty envelope on all non-negative trafﬁc demands.
Both versions require routing update only once a day, and
are cheap to implement. The two versions differ only in their
objective functions.
– Minimizing the performance ratio (COPE-ratio): To
optimize for performance ratio as the objective function
over a convex set, we adopt the technique developed
in Section 3.4 to handle penalty envelope on a convex
set. Note that we also refer to COPE-ratio as COPE for
short.
– Minimizing MLU (COPE-MLU): This version of COPE
is a variation of COPE-ratio which uses the absolute
value of MLU, instead of performance ratio, as its ob-
jective function. Note that we can consider COPE-
MLU as an extension of multi with penalty envelope.
4.2 Evaluation Results
US-ISP: First, we evaluate the performance of different algorithms
using US-ISP, a large tier-1 US ISP. For conﬁdentiality, we can-
not report absolute MLU for US-ISP. Instead, we report relative
MLU normalized by MLUopt,max, where MLUopt,max is the highest
maximum link utilization under the optimal routing over the entire
month. Note that there are a small fraction of intervals without traf-
ﬁc demand information in the trace and we exclude those intervals
in our evaluations.
o
i
t
a
r
e
c
n
a
m
r
o
f
r
e
P
 8
 7
 6
 5
 4
 3
 2
 1
oblivious
dynamic
peak
multi
 0
 100
 200
 300
 400
 500
 600
 700
Intervals sorted by performance ratio
Figure 7: Oblivious vs. prediction-based TE: US-ISP traces.
The performance ratio is truncated at 8.
We ﬁrst compare the algorithms using performance ratio as the
metric. Figure 7 compares oblivious routing with prediction-based
TE. It plots the performance ratio versus the time interval sorted
based on the performance ratio. Each time interval spans 1 hour.
On one hand, we observe that prediction-based TE out-performs
oblivious routing in most cases. For example, the performance ra-
tio under the prediction-based algorithms is less than 1.2 for about
half of the time intervals. Among the prediction-based algorithms,
dynamic performs the best in the common case. This is expected
as it updates every interval, while the others update every day. In
comparison, the performance ratio of oblivious routing is above
1.5 for almost all of the intervals. On the other hand, the largest
performance ratio under oblivious routing is 2.0355, whereas the
largest performance ratios of prediction-based algorithms are all
above 3.5, with multi even goes to higher than 8. Note that we
limit the y-axis to 8 so that we can easily see the difference under
normal trafﬁc. The prediction-based algorithms incur large perfor-
mance ratios because the inaccurate trafﬁc prediction makes them
perform signiﬁcantly worse than the optimal. These results indicate
that prediction-based TE is good at optimizing common-case per-
formance, but suffers from large performance penalty when trafﬁc
demands change signiﬁcantly. On the other hand, oblivious routing
is good at handling unexpected trafﬁc, but suffers on common-case
performance. Neither class of algorithms dominates the other.
Figure 8 plots the performance ratios of the COPE algorithms,
oblivious routing, and the common-case best-performing dynamic
algorithm. Note that in order to display the curves clearly, we have
truncated the performance ratio of dynamic, whose performance
ratio will shoot up well beyond 2.2. We observe that for the com-
mon case, COPE algorithms achieve performance ratio which is
about 6% higher than the dynamic algorithm, and signiﬁcantly out-
perform oblivious routing; for the worst case (in the traces), COPE
algorithms even out-perform oblivious, and signiﬁcantly out-perform
dynamic prediction-based routing. Thus, COPE achieves the best
of both.
Next, we compare the algorithms using normalized MLU as the
metric. Figure 9 shows time series plots of normalized MLU under
o
i
t
a
r
e
c
n
a
m
r
o
f
r
e
P
 2.2
 2
 1.8
 1.6
 1.4
 1.2
 1
 0
dynamic
oblivious
COPE
COPE-MLU
 100
 200
 300
 400
 500
 600
 700
Intervals sorted by performance ratio
Figure 8: COPE vs. oblivious and dynamic: US-ISP traces.
The performance ratio is truncated at 2.2.
n
o
i
t
a
z
i
l
a
m
r
o
n
r
e
t
f
a
U
L
M
n
o
i
t
a
z
i
l
a
m
r
o
n
r
e
t
f
a
U
L
M
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
oblivious
dynamic
peak
multi
 0
 100
 200
 300
 400
 500
 600
 700
(a) oblivious vs. prediction-based algorithms.
Interval
 1.6
 1.4
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
oblivious
COPE
COPE-MLU
 0
 100
 200
 300
 400
 500
 600
 700
Interval
(b) oblivious vs. COPE.
Figure 9: Time series plots of normalized MLU: US-ISP traces.
o
i
t
a
r
e
c
n
a
m
r
o
f
r
e
P
 8
 7
 6
 5
 4
 3
 2
 1
multi
peak
dynamic
oblivious
COPE
 0
 500
 1000
 1500
 2000
Figure 10: Comparison of performance ratio: Abilene traces
from March 22 to March 28, 2004.
various routing schemes. From Figure 9(a), we can see that without
penalty envelope, the prediction-based routing schemes can result
in large spikes in normalized MLU. On the other hand, the nor-
malized MLU of oblivious routing never exceeds 1.6, showing the
robustness of oblivious routing. However, from Figure 9(b), we ob-
serve that the robust performance of oblivious routing is surpassed
by COPE and COPE-MLU. They consistently yield lower link uti-
lization than oblivious routing. We observe reduction in normalized
MLU up to 56%.
Abilene traces: The results of the US-ISP traces are normalized.
Next we evaluate the algorithms using the public Abilene traces
and show absolute values of MLU. Since COPE and COPE-MLU
perform similarly, we report only COPE.
Figure 10 compares the algorithms in terms of performance ra-
tio. It plots the performance ratio versus the time interval sorted
based on the performance ratio. Each time interval spans 5 min-
utes. We make the following observations. First, predictions based
on either multiple trafﬁc matrices or peak trafﬁc matrix perform
poorly, with a performance ratio greater than 2 for about half of
the intervals. Second, although dynamic routing achieves close-to-
optimal performance ratio most of the time, the performance ratio
can occasionally get as high as 6.7. Third, even though oblivi-
ous routing has better performance ratio on Abilene traces than on
US-ISP traces, COPE still out-performs oblivious routing for about
80% of the intervals.
Figure 11 plots the MLU achieved by the algorithms during 3
days of the Abilene traces when trafﬁc spikes happen. For clar-
ity we zoom in to a few intervals in the day. We make the fol-
lowing three observations. First, on March 23, trafﬁc engineering
using multiple trafﬁc matrices or peak matrix may drive the traf-
ﬁc intensity of the bottleneck link to be 240% of its link capacity
(e.g., at interval 161), while the optimal utilization is less than 50%.
This high trafﬁc intensity can lead to high packet loss rates and/or
router crashes. Second, the dynamic algorithm exhibits interest-
ing behavior. On March 23 and 27, it drives the trafﬁc intensity of
the bottleneck link to over 100% of its link capacity during some
time periods (e.g., 120% on March 23 at interval 159, and 181% on
March 27 at interval 110). On the other hand, on March 25, it al-
ways achieves close-to-optimal performance. Closer examination
of the trafﬁc of the three days identiﬁes that on March 25, there is a
trafﬁc ramp-up process, and thus the dynamic algorithm can adjust
and performs well. However, on March 23 and 27, there is no such
a ramp-up process before the spikes, and trafﬁc changes rapidly;
thus the dynamic algorithm overloads the network. Third, COPE
and oblivious perform well under trafﬁc spikes.
We next evaluate the performance of the algorithms when trafﬁc
is relatively steady and there are no trafﬁc spikes. Figure 12 shows
that for Monday, March 22, 2004 (all other days in the same week
contain spikes). We make the following observations. First, during
this normal-trafﬁc day, the utilization of the network is low—the
optimal MLU is only around 6%. This is typical of Abilene, which
is over-provisioned. Second, the MLU achieved by using multiple
trafﬁc is about twice that of the optimal. This is because the trafﬁc
demands used for route computation do not match well with the
real trafﬁc, thus resulting in a large performance penalty. Third,
the MLU achieved by oblivious routing is about 1.3 times optimal.
This is better than the oblivious ratio of 1.853 for the Abilene net-
work. However, a 30% performance penalty could still be large, es-
pecially if the network is heavily loaded. In comparison, the MLU
of COPE is within 5% of optimal, and comparable to the dynamic
algorithm under stable demands.
Abovenet: Next we evaluate the performance of COPE and oblivi-