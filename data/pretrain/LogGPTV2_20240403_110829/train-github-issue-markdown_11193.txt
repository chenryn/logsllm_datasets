# Checklist
  * I have read the relevant section in the  
contribution guide  
on reporting bugs.
  * I have checked the issues list  
for similar or identical bug reports.
  * I have checked the pull requests list  
for existing proposed fixes.
  * I have checked the commit log  
to find out if the bug was already fixed in the master branch.
  * I have included all related issues and possible duplicate issues  
in this issue (If there are none, check this box anyway).
## Mandatory Debugging Information
  * I have included the output of `celery -A proj report` in the issue.  
(if you are not able to do this, then at least specify the Celery  
version affected).
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have included the contents of `pip freeze` in the issue.
  * I have included all the versions of all the external dependencies required  
to reproduce this bug.
## Optional Debugging Information
  * I have tried reproducing the issue on more than one Python version  
and/or implementation.
  * I have tried reproducing the issue on more than one message broker and/or  
result backend.
  * I have tried reproducing the issue on more than one version of the message  
broker and/or result backend.
  * I have tried reproducing the issue on more than one operating system.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with autoscaling, retries,  
ETA/Countdown & rate limits disabled.
  * I have tried reproducing the issue after downgrading  
and/or upgrading Celery and its dependencies.
## Related Issues and Possible Duplicates
#### Related Issues
  * None
#### Possible Duplicates
  * None
## Environment & Settings
**Celery version** :
**`celery report` Output:**
    software -> celery:4.3.0 (rhubarb) kombu:4.6.0 py:3.6.8
                billiard:3.6.0.0 redis:3.2.0
    platform -> system:Linux arch:64bit
                kernel version:4.15.0-50-generic imp:CPython
    loader   -> celery.loaders.app.AppLoader
    settings -> transport:redis results:django-db
# Steps to Reproduce
Run a celery worker with a MySQL backend (possibly through Django).  
After the worker is up, shut down the MySQL service.  
Try running a task.
## Required Dependencies
  * **Minimal Python Version** : N/A or Unknown
  * **Minimal Celery Version** : 4.2.0
  * **Minimal Kombu Version** : N/A or Unknown
  * **Minimal Broker Version** : N/A or Unknown
  * **Minimal Result Backend Version** : N/A or Unknown
  * **Minimal OS and/or Kernel Version** : N/A or Unknown
  * **Minimal Broker Client Version** : N/A or Unknown
  * **Minimal Result Backend Client Version** : N/A or Unknown
### Python Packages
**`pip freeze` Output:**
    celery==4.3.0
    Django==2.2.1
    mysqlclient==1.4.2
(only relevant packages)
### Other Dependencies
N/A
## Minimally Reproducible Test Case
# Expected Behavior
This is a non-recoverable error. The worker process should terminate, which
would be treated as an error by a monitoring tool that will restart it.
# Actual Behavior
An exception is printed to stderr. The worker itself keeps running, receiving
tasks, but never running them.  
An exception is printed after each "Task accepted" log message.
    [ERROR/MainProcess] Pool callback raised exception: OperationalError(2002, "Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)")
    Traceback (most recent call last):
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 217, in ensure_connection
        self.connect()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 195, in connect
        self.connection = self.get_new_connection(conn_params)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/mysql/base.py", line 227, in get_new_connection
        return Database.connect(**conn_params)
      File "[REDACTED]/lib/python3.6/site-packages/MySQLdb/__init__.py", line 84, in Connect
        return Connection(*args, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/MySQLdb/connections.py", line 164, in __init__
        super(Connection, self).__init__(*args, **kwargs2)
    MySQLdb._exceptions.OperationalError: (2002, "Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)")
    The above exception was the direct cause of the following exception:
    Traceback (most recent call last):
      File "[REDACTED]/lib/python3.6/site-packages/billiard/pool.py", line 1750, in safe_apply_callback
        fun(*args, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/celery/worker/request.py", line 371, in on_failure
        store_result=self.store_errors,
      File "[REDACTED]/lib/python3.6/site-packages/celery/backends/base.py", line 160, in mark_as_failure
        traceback=traceback, request=request)
      File "[REDACTED]/lib/python3.6/site-packages/celery/backends/base.py", line 342, in store_result
        request=request, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/django_celery_results/backends/database.py", line 35, in _store_result
        task_kwargs=task_kwargs,
      File "[REDACTED]/lib/python3.6/site-packages/django_celery_results/managers.py", line 50, in _inner
        return fun(*args, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/django_celery_results/managers.py", line 126, in store_result
        obj, created = self.get_or_create(task_id=task_id, defaults=fields)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/manager.py", line 82, in manager_method
        return getattr(self.get_queryset(), name)(*args, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/query.py", line 538, in get_or_create
        return self.get(**kwargs), False
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/query.py", line 402, in get
        num = len(clone)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/query.py", line 256, in __len__
        self._fetch_all()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/query.py", line 1242, in _fetch_all
        self._result_cache = list(self._iterable_class(self))
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/query.py", line 55, in __iter__
        results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/models/sql/compiler.py", line 1098, in execute_sql
        cursor = self.connection.cursor()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 256, in cursor
        return self._cursor()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 233, in _cursor
        self.ensure_connection()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 217, in ensure_connection
        self.connect()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/utils.py", line 89, in __exit__
        raise dj_exc_value.with_traceback(traceback) from exc_value
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 217, in ensure_connection
        self.connect()
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/base/base.py", line 195, in connect
        self.connection = self.get_new_connection(conn_params)
      File "[REDACTED]/lib/python3.6/site-packages/django/db/backends/mysql/base.py", line 227, in get_new_connection
        return Database.connect(**conn_params)
      File "[REDACTED]/lib/python3.6/site-packages/MySQLdb/__init__.py", line 84, in Connect
        return Connection(*args, **kwargs)
      File "[REDACTED]/lib/python3.6/site-packages/MySQLdb/connections.py", line 164, in __init__
        super(Connection, self).__init__(*args, **kwargs2)
    django.db.utils.OperationalError: (2002, "Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)")
This is unhelpful. Without looking at the logs you wouldn't know anything was
wrong.
In the production setting, the exception is only printed as many times as
there are concurrent workers, which makes it even harder to identify. I was
not able to reproduce this particular behavior locally, and get an exception
each time.