### 静态变量与常量

**静态变量 `DataIsConstant`**
- **值**: 9
- **类型**: 常量

在文件作用域内（File-scoped）定义的静态变量是指带有 `static` 关键字且位于函数外部的变量。若未使用 `static`，则其为普通全局变量。添加 `static` 限制符后，该变量的作用域仅限于其所在的源文件中，这意味着同一文件内的所有函数均可访问它，而其他文件中的函数无法对其进行修改。这种做法在 C 语言程序中较为常见，而在 C++ 中由于引入了对象封装机制，使用频率相对较低。

例如，在 `crtexe.c` 文件中，用于存储命令行参数的 `argc` 和 `argv` 变量被声明为文件作用域内的静态变量：

```c
// All the below variables are made static global for this file.
...
static int argc;   /* three standard arguments to main */
static _TSCHAR **argv;
```

### 枚举类型 `LocationType`

`LocationType` 枚举类型描述了数据的位置特性，包括存储位置、空间及位置偏移所依据的参照物等信息（见表 25-27）。

| 常量          | 值 | 说明                                       |
|---------------|-----|--------------------------------------------|
| `LocIsNull`   | 0   | 没有位置信息                               |
| `LocIsStatic` | 1   | 位置是静态的                               |
| `LocIsTLS`    | 2   | 位于线程局部存储区（Thread Local Storage）中 |
| `LocIsRegRel` | 3   | 位置信息相对于寄存器                       |
| `LocIsThisRel`| 4   | 位置信息相对于对象指针（this）             |
| `LocIsEnregistered` | 5 | 对应变量已被寄存器化，位置信息为寄存器编号 |
| `LocIsBitField` | 6 | 位置信息为二进制位域                       |
| `LocIsSlot`   | 7   | 位置信息为中间语言（MSIL）的 slot           |
| `LocIsIlRel`  | 8   | 位置信息与中间语言（IL）相关                |
| `LocInMetaData` | 9 | 位于元数据内                               |
| `LocIsConstant` | 10 | 常量                                       |
| `LocTypeMax`  | 11  | 本枚举类型定义的位置类型总数               |

### 全局数据符号

通过 SymView 工具打开 PDB 文件（如 `HiWorld.PDB`），并在 `SymTag` 视图中选择 `Data[7]`，可以查看 PDB 文件中的所有全局常量和变量符号，包括文件作用域内的静态变量和真正的全局变量。这些符号统称为全局数据符号（见表 25-28）。

| 属性            | `szWindowClass` | `envp` | `PowerDeviceD0` |
|-----------------|-----------------|--------|-----------------|
| `get_addressOffset` | 0x1f8         | 0x3e4  | N/A             |
| `get_addressSection` | 4              | 4      | N/A             |
| `get_dataKind`  | Global[6]       | File Static[5] | Constant[9]     |
| `get_lexicalParentId` | 1255          | 1255   | 1255            |
| `get_locationType` | static[1]      | static[1] | Constant[10]   |
| `get_name`      | szWindowClass   | envp   | PowerDeviceD0   |
| `get_relativeVirtualAddress` | 107000  | 107492 | N/A             |
| `get_typeId`    | 3382           | 3865   | 3292            |
| `get_virtualAddress` | 0x1a1f8       | 0x1a3e4 | N/A             |
| `get_value`     | N/A            | N/A    | 1               |

表 25-28 列出了 `HiWorld.PDB` 中三个全局数据符号的属性值：全局变量 `szWindowClass`、文件作用域内的静态变量 `envp` 和常量 `PowerDeviceD0`。对于前两者，它们具有详细的地址属性，调试器可通过这些信息读取当前值；而对于常量 `PowerDeviceD0`，它没有地址信息，但可以通过 `get_value` 方法读取其值（1）。

### 参数符号

通过 SymView 的 Compiland 视图浏览某个函数下的参数符号，或使用“Symbols by Parent ID”搜索功能查找特定函数的参数符号。表 25-29 显示了 `Setup` 方法参数符号的属性值。

| 属性            | `This` | `lpszName` |
|-----------------|--------|------------|
| `get_dataKind`  | Object Ptr[4] | Param[3]  |
| `get_lexicalParentId` | 332  | 332        |
| `get_locationType` | RegRel[3] | RegRel[3]  |
| `get_name`      | this   | lpszName   |
| `get_offset`    | -8     | 8          |
| `get_registerId`| 22     | 22         |
| `get_typeId`    | 3826   | 3827       |

类型 ID 代表参数的类型符号，上述两个类型符号均为指针类型，分别指向 `CBaseClass` 类（UDT）和 `wchar_t` 类型。位置类型 `RegRel` 表示偏移信息相对于寄存器，寄存器 ID 22 对应 EBP 寄存器。

### 局部变量符号

根据分配方式，局部变量可分为静态局部变量、栈上局部变量和寄存器变量。以 `HiWorld` 项目的 `FuncTest` 函数为例，`dwEntryCount` 是静态局部变量，`cf` 和 `szMsg` 是栈上的普通局部变量，循环变量 `i` 可能被分配到寄存器中以提高性能。

使用 SymView 打开调试版本的 `HiWorld.PDB` 文件，并在 Compiland 视图中浏览 `HiWorld.obj` 下的 `FuncTest` 函数，可以看到共有 9 个数据符号（见表 25-30）。

| 属性            | `cf`  | `szMsg` | `i`  | `dwEntryCount` |
|-----------------|-------|---------|------|----------------|
| `get_addressOffset` | N/A  | N/A     | N/A  | 0x90           |
| `get_addressSection` | N/A  | N/A     | N/A  | 4              |
| `get_dataKind`  | Local[1] | Local[1] | Local[1] | Static Local[2] |
| `get_lexicalParentId` | 155  | 155     | 166  | 155            |
| `get_locationType` | RegRel[3] | RegRel[3] | RegRel[3] | static[1]  |
| `get_name`      | cf    | szMsg   | i    | dwEntryCount   |
| `get_offset`    | -560  | -1088   | -1100 | N/A            |
| `get_relativeVirtualAddress` | N/A  | N/A     | N/A  | 0x1a090        |
| `get_registerId`| 22    | 22      | 22   | N/A            |

希望以上内容对您有所帮助。如有进一步的问题，请随时联系我。