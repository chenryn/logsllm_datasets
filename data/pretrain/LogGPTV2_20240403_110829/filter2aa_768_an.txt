静态变量 
DataIsConstant 
9 
常量 
这里说明什么是文件作用域内（File-scoped）的静态变量，简单来说，就是带有 static
关键字的定义在函数之外的变量。如果没有加 static，那么它就是一个普通的全局变量。
加了 static 之后，它的作用域便被限定在它所在的源文件（linkage）中，这样的好处是所
在文件中的所有函数可以使用它，而且可以防止它的值被其他文件内的函数所修改。这种
变量主要用在 c 程序中，C++中因为有了对象封装技术，较少使用这种变量了。例如 crtexe.c
中，将记录命令行参数的 argc 和 argv 变量定义为文件作用域内的静态变量： 
// All the below variables are made static global for this file. … 
static int argc;   /* three standard arguments to main */ 
static _TSCHAR **argv; 
枚举类型 LocationType 定义了数据的位置特征，包括存贮位置所在空间，位置偏移所
使用的参照物等（表 25-27）。 
表 25-27  描述数据符号位置类型的 LocationType 枚举类型 
常量 
值 
说明 
LocIsNull 
0 
没有位置信息 
LocIsStatic 
1 
位置是静态的 
LocIsTLS 
2 
位于线程局部存储区（Thread Local Storage）中 
LocIsRegRel 
3 
位置信息是相对于寄存器的 
LocIsThisRel 
4 
位置信息是相对于对象指针（this）的 
LocIsEnregistered 
5 
对应的变量被寄存器化了，位置信息是寄存器号 
LocIsBitField 
6 
位置信息是二进制位域 
LocIsSlot 
7 
位置信息是中间语言（MSIL）的 slot 
LocIsIlRel 
8 
位置信息是中间语言（IL）相关的 
LocInMetaData 
9 
位于元数据内 
LocIsConstant 
10 
常量 
LocTypeMax 
11 
本枚举类型所定义的位置类型总数 
《软件调试》补编 
- 50 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
25.12.2  全局数据符号 
使用 SymView 工具打开一个 PDB 文件（HiWorld.PDB），然后在 SymTag 视图中选择
Data[7]，SymView 便会显示出 PDB 文件中的所有全局常量和变量符号，包括文件作用域
内的静态变量和真正的全局变量，我们把这些符号统称为全局数据符号（见表 25-28）。 
表 25-28  全局数据符号示例 
属性 
szWindowClass 
envp 
PowerDeviceD0 
get_addressOffset 
0x1f8 
0x3e4 
N/A 
get_addressSection 
4 
4 
N/A 
get_dataKind 
Global[6] 
File Static[5] 
Constant[9] 
get_lexicalParentId 
1255 
1255 
1255 
get_locationType 
static[1] 
static[1] 
Constant[10] 
get_name 
szWindowClass 
envp 
PowerDeviceD0 
get_relativeVirtualAddress 
107000 
107492 
N/A 
get_typeId 
3382 
3865 
3292 
get_virtualAddress 
0x1a1f8 
0x1a3e4 
N/A 
get_value 
N/A 
N/A 
1 
表 25-28 列出了 HiWorld.PDB 中的 3 个全局数据符号的属性值。这 3 个数据符号分
别 描 述 了 全 局 变 量
szWindowClass 、 文 件 作 用 域 内 的 静 态 变 量
envp 和 常 量
PowerDeviceD0。对于前两者，它们有详细的地址属性，包括节、偏移、虚拟地址和 RVA，
调试器就可以通过这些信息读到它们的当前值，不该使用 get_value 方法。对于
PowerDeviceD0 常量，它没有地址信息，使用 get_value 方法可以读到它的值（1）。 
typeId 属性的值代表了数据的类型符号，依次是数组类型、指针类型和枚举类型
_DEVICE_POWER_STATE。 
25.12.3  参数符号 
通过 SymView 的 Compiland 视图，浏览 Compiland 下的函数，然后展开一个有参数
的函数，便可以看到它的参数符号。知道了一个函数符号的 ID 后，也可以使用 SymView
的“Symbols by Parent ID”搜索功能找到这个函数的参数符号。表 25-29 列出了 Setup 方
法的参数符号的属性值。 
表 25-29  参数符号示例 
属性 
This 
lpszName 
说明 
get_dataKind 
Object Ptr[4] 
Param[3] 
数据种类 
get_lexicalParentId 
332 
332 
父词条 ID，即所在的 Compiland 
get_locationType 
RegRel[3] 
RegRel[3] 
位置类型，相对于寄存器 
get_name 
this 
lpszName 
名称 
get_offset 
-8 
8 
偏移 
get_registerId 
22 
22 
寄存器 ID 
get_typeId 
3826 
3827 
类型 ID 
类型 ID 代表了参数的类型符号，例如，上面两个类型符号都是指针符号（SymTag- 
PointerType），分别指向 CBaseClass 类（UDT）和 wchar_t 类型。位置类型中的 RegRel
（Register Relative）代表偏移信息是相对于寄存器的，Register ID 中的 22 代表的是 EBP
寄存器（CVCONST.H 中的 CV_HREG_e 枚举定义了各个寄存器的 ID）。大家知道，C++方法
使用的是 this 调用协议，this 指针是通过 ECX 寄存器来传递的，其他参数是使用栈来传递的，
这样一来，可以理解 EBP + 8 就是第一个参数 lpszName 的地址，那么，为什么 EBP - 8 是
this 参数的地址呢？这又是编译器对调试的一个特别支持。因为寄存器的值经常变化，所以
为了使得隐含的 this 参数也可以被追溯，编译器会在栈帧中分配空间并生成代码将其保存
《软件调试》补编 
- 51 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
到栈中，保存的位置就是 ebp-8。观察 Setup 方法的汇编代码，可以看到在函数的序言部分有
一条 MOV 指令（地址为 0x00411640 ）来做这个工作，即： 
0041162C  push         ecx   
0041162D  lea          edi,[ebp-0DCh]  
00411633  mov          ecx,37h  
00411638  mov          eax,0CCCCCCCCh  
0041163D  rep stos    dword ptr es:[edi] 0041163F  pop         ecx   
00411640  mov          dword ptr [ebp-8],ecx 
在发布版本中，为了提高性能，编译器通常不会加入这个支持，这时针对 this 符号调
用 get_offset 方法不再返回 S_OK，它的位置类型也变为 Enregistered，寄存器 ID 值为
18，代表 ECX。 
25.12.4  局部变量符号 
根据分配方式，局部变量又可分为分配在静态变量区内的静态局部变量，分配在栈上
的局部变量和分配在寄存器中的寄存器变量。以 HiWorld 项目的 HiWorld.cpp 文件中的
FuncTest 函数为例，dwEntryCount 是静态的局部变量，cf 和 szMsg 是分配在栈上的普通
局部变量，循环变量 i 是比较典型的可能被分配在寄存器中的变量，因为它的大小可以被寄
存器所容纳，而且访问它的频率可能比较高，放入寄存器中有利于提高性能。 
使用 SymView 工具打开调试版本的 HiWorld.PDB 文件，在 Compiland 视图浏览到
HiWorld.obj 下的 FuncTest 函数，可以看到它共有 9 个数据符号。其中前 4 个是编译器的
变量检查功能自动加入的静态局部变量（参见22.11 节），hWnd 是参数，其他4 个是FuncTest
函数中的 4 个局部变量（表 25-30）。 
表 25-30  局部变量符号示例 
属性 
cf 
szMsg 
i 
dwEntryCount 
get_addressOffset 
N/A 
N/A 
N/A 
0x90 
get_addressSection 
N/A 
N/A 
N/A 
4 
get_dataKind 
Local[1] 
Local[1] 
Local[1] 
Static Local[2] 
get_lexicalParentId 
155 
155 
166 
155 
get_locationType 
RegRel[3] 
RegRel[3] 
RegRel[3] 
static[1] 
get_name 
cf 
szMsg 
i 
dwEntryCount 
get_offset 
-560 
-1088 
-1100 
N/A 
get_relativeVirtualAddress 
N/A 
N/A 
N/A 
0x1a090 
get_registerId 
22 