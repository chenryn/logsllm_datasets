their names, group afﬁliations, etc. As a result, even ﬁnding the
counterpart for a given AOSP device node on a customized OS
can be difﬁcult. As an example, the near ﬁeld communication
(NFC) device node is /dev/bcm2097x-12c on the Nexus 4
Android 4.2, while on Samsung SII, it becomes /dev/pn544
as detected by ADDICTED. Without knowing the relations
between Android Linux devices and their drivers, little can be
done to ﬁnd out whether they are properly protected.
In our research, we made the ﬁrst, though preliminary,
step toward a better understanding of the security risk in
customizing Android Linux devices. Our idea is to use a
dynamic analysis to map a set of security-critical devices (in
Table IV) to their related Linux ﬁles, and then compare the
protection they receive with that provided on an AOSP Android
411
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
(again, Google-customized OSes in our research). This helps
us assess whether certain important devices become under-
protected during a customization (Section III).
Adversary model. The purpose of our research is to un-
derstand the security risks in customizing Android Linux
devices. To evaluate such risks, we assume the presence of
malicious apps on the phone running a customized Android
OS. These apps do not have root privileges, nor do they have
the permissions to use the devices under investigation, such as
camera, audio, GPS, etc. On the other hand, they are actively
seeking access to those protected devices through exploiting
the vulnerabilities introduced by the customization. We want
to understand whether such attempts can be successful.
B. Understanding Customizations
During a customization,
the vendor could change any
Android layer. In our research, we performed a study to
understand which layer has been heavily modiﬁed. The study
shows that changes mainly happen on the app layer and Linux
layer and rarely does the vendor touch the Android framework
interface such as services. On the Linux layer, most effort has
been made on device drivers to support new hardware. Here
we elaborate this study.
Methodology. To ﬁnd out where modiﬁcations happen,
we compared the source code of
two popular vendor-
customized phones – Samsung Galaxy SII (AT&T version
i.e. SGH-I777) and Samsung Galaxy Ace 3 (GT-S7270L)
– with their corresponding AOSP versions. Speciﬁcally,
we paired the source code GT-S7270_JB_Opensource
for Samsung Galaxy Ace 3 with its AOSP reference An-
droid 4.2 and kernel android-msm-mako-3.4-jb-mr2,
and SGH-I777_NA_JB_ATT_Opensource for Samsung
Galaxy SII with its AOSP reference Android 4.0.4 and kernel
android-samsung-3.0-jb-mr0. For each pair, we used
a diff-tool (DeltaWalker [3]) to measure how many ﬁles have
been added/modiﬁed/deleted under different directories during
Samsung’s customization of the AOSP code. DeltaWalker is
a ﬁle and folder comparison and synchronization tool. In our
study, it was conﬁgured to compare ﬁles based upon text (line
by line), as opposed to individual bytes. Before our analysis,
we also ﬁltered out ﬁles related to version control (e.g., .git
or .gitignore), and tuned the tool for accuracy, instead of
speed. The outputs of the analysis were sanitized to remove
the differences caused by whitespace and delimiters.
Findings. The results of the study are presented in Table II
and Table III. As is clear from the tables, changes made
on the Linux layer mainly happen to the driver source-code
directory, which involve hundreds or even thousands of ﬁles
being added, modiﬁed or deleted. The other directory with the
similar dynamic is arch, which contains different hardware-
related source code for processors. Actually, other directories
also contain code related to device drivers. However, even just
looking at the driver directory, we found that its modiﬁ-
cations are extensive compared with other directories. On the
framework layer, most of the customizations are either related
to device (/device/samsung/bcm_common) or new apps
(/vendor/samsung/common/packages), as presented
in Table III, while the service ﬁles under /framework have
not been touched at all.
TABLE II.
CUSTOMIZATIONS IN LINUX KERNEL
Path
/arch
/block
/crypto
/drivers
/ﬁrmware
/fs
/include
/init
/kernel
/lib
/mm
/net
/scripts
/security
/sound
/tools
/virt
Galaxy Ace 3
added/modiﬁed/deleted
1202/341/1029
0/10/1
0/0/0
958/661/1390
1/1/0
0/74/ 0
210/183/213
0/2/0
0/44/3
0/12/1
0/22/0
0/84/20
3/5/2
0/5/0
339/29/99
0/12/1
0/1/0
Galaxy SII
added/modiﬁed/deleted
695/244/407
0/7/0
1/12/0
2830/687/322
45/1/1
0/34/0
135/306/14
0/2/0
0/25/1
0/6/0
10/23/0
108/26/0
3/1/0
0/6/0
68/31/15
0/0/0
0/0/0
TABLE III.
CUSTOMIZATIONS IN ANDROID FRAMEWORK LAYER
Galaxy Ace 3
added/modiﬁed/deleted added/modiﬁed/deleted
2395/0/0
Galaxy SII
Path
/device/samsung/bcm common
/external/bluetooth
/external/chromium
/external/dnsmasq
/external/e2fsprogs
/external/iproute2
/external/iptables
/external/KeyUtils
/external/libexifa
/external/libjpega
/external/webkit
/libcore
/packages/apps/BluetoothTest
/packages/apps/.../mozilla
/packages/apps/Email/lib Src
/vendor/broadcom/common
/vendor/samsung/.../external
/vendor/samsung/.../frameworks
/vendor/samsung/.../packages
/framework
2/38/1
35/44/0
160/436/24
0/0/0
3/0/3
69/525/0
0/3/0
3/0/0
4/0/0
102/0/0
35936/0/0
0/0/0
3/26/0
0/0/19
0/4/0
1/2/2
1/0/0
0/0/28
3/0/0
60/0/0
40/0/0
31/238/0
2/0/0
58/0/0
807/0/0
0/0/0
III. AUTOMATED DETECTION OF SECURITY FLAWS IN
DEVICE CUSTOMIZATIONS
Our study shows that besides pre-installed apps, Linux
device drivers are the focus of vendor customizations (Sec-
tion II-B). To better understand the security risks that come
with such customizations, we designed and implemented AD-
DICTED (Android Device Customization Error Detector), a
suite of new techniques for automatic detection of the problems
in customized device protection. In this section, we ﬁrst
describe our high-level idea and then present the details of
our techniques.
A. Overview
The design. Given a set of security-critical Android devices,
it is nontrivial to ﬁnd out whether they are well-protected
on the Linux layer. Although, we may ﬁgure out the rough
locations of their related Linux ﬁles (most likely under /dev),
ﬁnding them in hundreds of ﬁles is difﬁcult. Even more
complicated is the evaluation of their protection levels under
Linux, which needs semantic information about what those
ﬁles indeed are (device nodes, log ﬁles, etc.). To address these
issues, towards automatic detection of customization ﬂaws, we
propose running a dynamic analysis to identify all the ﬁles
412
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
related to a customized device and then comparing the Linux
permission settings of those ﬁles with their counterparts on
the AOSP reference (the Android version installed on Google
Nexus phones). The rationale here is that there is no reason
for the vendor to lower the protection levels of such ﬁles,
particularly when they are related to a security-critical device.
The risks discovered in this way (i.e., LCFs) then need to be
further investigated to understand their security implications.
Based upon this idea, our design receives from the user
a list of devices to be analyzed. The Linux ﬁles for some
of
those devices could be well-known, such as the in-
put device (/dev/input/event*) and the frame buffer
(/dev/graphics/fb*) [7, 11], but most of them are
Android additions and therefore, less known (e.g., drivers for
camera, NFC, etc.). To identify these ﬁles, ADDICTED runs
a suite of test cases that serve as an input to the dynamic
analyzer. The analyzer traces the execution of the Android
system when it is processing these cases and operating on their
related devices, in an attempt to catch all the ﬁles necessary
for such operations. Each of these ﬁles is further ﬁngerprinted
by the way they are handled (e.g., system call types and
parameter values). The outcomes of this analysis on an AOSP
version (including ﬁles related to different devices and their
ﬁngerprints) serve as a reference. Such reference ﬁles are
correlated to those discovered from a customized Android
based on their ﬁngerprints, and further compared with them
in terms of individual ﬁles’ Linux permission settings. Once
any discrepancy is found, particularly when the customized
ﬁle has a lower protection level (e.g., system-only for the ﬁle
on AOSP and publicly readable on the customized version), a
security risk is reported.
Architecture. Figure 1 illustrates the design discussed above.
ADDICTED includes Device Miner, that performs the afore-
mentioned dynamic analysis on the test cases running on a
customized Android phone, and further analyzes its outputs
(including the system-call traces from multiple executions of
individual cases) to identify a set of ﬁles related to each device.
Those ﬁles and their ﬁngerprints are then handed over to Risk
Identiﬁer, which correlates them to those on the reference
AOSP version and reports an LCF once any of them is found
to be under-protected.
B. Device Miner
The approach. Device Miner is designed to trace operations
on an Android device to identify its related Linux device ﬁles.
Given the complexity of the Android architecture, this is by
no means trivial. Speciﬁcally, static analysis of Android is
complicated, given its layered structure with the framework
written in Java and the Linux kernel in C. When it comes
to dynamic analysis, existing tools like TaintDroid [26] can
support a variable and message level taint analysis. However,
to handle the complicated inter-process communication (IPC)
and message passing model within Android, it requires in-
tensive instrumentations of the OS. As a result, it becomes
less portable and unsuitable for analyzing a large number of
customized phones. Alternatively, DroidScope [44] performs
the analysis within a virtual machine, however, it cannot con-
veniently simulate different types of hardware on customized
phones or tablets.
7HVW
7HVW
&DVH
&DVH
5HI7HVW
&DVH
'HYLFH0LQHU
7HVW
5XQQHU
/RJV/RJV
ORJV
'\QDPLF
$QDO\]HU
7UDFHV
7UDFHV
WUDFHV
5LVN,GHQWLILHU
'LII
$QDO\VLV
'DWDEDVH
$2635HIHUHQFH
'HYLFH
&RUUHODWLRQ
/&)$QDO\VLV
/&)V
5HSRUW
Fig. 1. Design of ADDICTED. Test cases are ﬁrst executed by Test Runner
and analyzed by the Dynamic Analyzer. The logs and traces are analyzed by
the Diff Analysis tool to ﬁlter out irrelevant device operations and later sent
to Risk Identiﬁer to check for LCFs.
In our research, we built into Device Miner a dynamic
level. This makes
analyzer that works on the system-call
it coarse-grained in tracking device operations, but much
more lightweight and portable than prior approaches. More
speciﬁcally, Device Miner utilizes a suite of test cases to
trigger device operations such as taking pictures, requesting
geolocations, etc., and attaches strace [16] to the app that
runs those cases. The app does not directly access device
ﬁles sitting on the Linux layer, and hence it needs to send
an IPC to acquire relevant OS services to access them as
shown in Figure 2. To ﬁnd out the service that operates on
a given device, our approach leverages an instrumented binder
to follow the IPC call and identify the system process that
serves the app’s request, and then attaches strace to that process
and its children. On a customized device, this step can be
replaced by directly attaching straces to the processes and
services involved in execution of a test case, based upon a
model identiﬁed from running the same case on a reference
phone, so as to avoid modifying any OS code on the device.
In this way, Device Miner is able to observe all system level
activities when Android is operating on a target device, and
ﬁnd out all the ﬁles it touches. We further perform a differential
analysis to remove those unrelated to the device operations. In
Figure 2, we elaborate individual components of Device Miner.
Test cases. As an input to ADDICTED, we need to prepare
a list of security-critical devices. The devices we tested are
shown in Table IV. This list covers most (if not all) of the
common Android hardware protected by Android permissions2
(at the dangerous level). Also on it are some standard Linux
devices, whose device nodes are well known. Those devices
2Note that we did not include nonsensitive Android devices such as gyro,
accelerometer.
413
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
7HVW5XQQHU
$FWLYLW\
'DOYLN90
6HUYLFH
0DQDJHU
3UR[\
OLE%LQGHU
6HUYLFH3URFHVVHV
6HUYLFH
-1,
1DWLYH
OLE[[[
OLE%LQGHU
SDWWDFK
7UDFHU
7UDQVDFWLRQ
?@Q=DI?@M