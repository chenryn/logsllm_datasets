Certainly! Here is a more refined and professional version of the provided text:

---

We later realized, albeit belatedly, that while the DSS scheme directly utilized one of our system design concepts—specifically, recursion—it had only applied one of Newcastle's ideas on system structuring to security. This realization presented an opportunity to incorporate another concept: "ideal fault-tolerant computing components" [3]. This led to the publication of the paper "Building Reliable Secure Computing Systems out of Unreliable Insecure Components" at the 1986 Oakland conference [8], which was also featured in ACSAC’s Classic Papers track in 2001.

The invitation from ACSAC to provide a retrospective on our original DSS paper prompted us to investigate the subsequent implementation and deployment of the industrial prototype of DSS. Additionally, we aimed to offer a modern interpretation of DSS in the form of the MILS architecture.

### The UK DSS Technology Demonstrator Programme

Prompted by our initial work on DSS, RSRE initiated a "Technology Demonstrator Programme" (DSS TDP) to develop and deploy DSS prototypes. Such TDPs were common for large physical systems like tanks and ships, but this was the Ministry of Defence’s first Information Technology TDP. The present authors were not involved in the demonstrator program, which was conducted by RSRE with private contractors whose identities changed several times due to acquisitions and reorganizations. Our knowledge of its progress was limited to published reports indicating promising developments.

Barnes and Macdonald [5] describe a successful emulation of DSS that demonstrated its full internal functionality. As an emulation, the Trusted Network Interface Unit (TNIU) functions were implemented as sub-systems within untrusted host machines rather than as separate front-end processors. The demonstration included applications software aimed at an office automation environment, intended to prove the concept and improve the design. The cited paper, based on a presentation at a September 1985 conference, suggests that this stage of the project was largely complete by that date. The next phase was to realize a full, practical DSS prototype, which was already underway in 1986.

Bates [6] provides an update five years later, stating that the DSS TDP was being developed to Level 5 of the "computer security confidence scale," equivalent to the contemporaneous US "Orange Book" scheme [9]. The program was on target to complete in 1991, with evaluation and certification expected by late 1991. Commercially supported DSS products were also anticipated by the end of 1991. Furthermore, it was intended that the DSS TDP products would be commercially exploited by several UK suppliers, with the first license signed by a major UK IT company.

Upon receiving the invitation to present this retrospective, we sought information on the later history of the DSS TDP. We obtained a final report on the "Phase 2 Insertion Trials" [23], which states that the DSS TDP was awarded a UK Level 4 Certificate (not the anticipated Level 5) in April 1993 and was licensed to British Telecommunications PLC and GEC-Marconi Secure Systems. The trials were intended to deploy DSS TDP installations at three sites: HQ PTC Innsworth, DRA Fort Halstead, and HM Treasury. The first trial at HQ PTC Innsworth in December 1993 failed due to an error in the key material supplied by CESG. A second attempt in June 1994 was hampered by network problems, suggesting that the Black Network Ethernet interface might not fully comply with the IEEE 802.3 specification. These issues were eventually resolved, but the system was deemed too slow for day-to-day use and too unreliable to remain in place. Improving performance and reliability would have required significant reengineering of the DSS kernel.

The DRA Fort Halstead trial in February 1994 faced similar network problems, preventing the establishment of a liaison between the TNIU and the TNIU/TMC. Heavy loads on a certain network segment caused the TMC/TNIU to miss the liaison request packets. The DSS software was modified to operate better under high network loads, but the trial was not continued. Due to these issues, the trial at HM Treasury was canceled.

The report concludes that it is unlikely that MOD or DRA will provide further development funding, and the future of DSS depends on the licensees being convinced that substantial investment is worthwhile. Given the disappointing outcomes, it is likely that the licensees were not convinced, and the DSS project was promptly dropped.

After a decade of development, the DSS Technology Demonstration Programme ended in failure. We attribute this to the technological limitations of the time and UK development and management practices, while remaining confident in the fundamental soundness of the DSS ideas.

### From DSS to MILS

The period from the 1970s through the 1990s saw many efforts to construct secure computer systems, which can be categorized into two broad types: network components (end-to-end encryption devices, downgraders, filters, etc.) and general-purpose systems supporting Multi-Level Secure (MLS) applications. Both categories typically used a monolithic architecture where most of the Trusted Computing Base (TCB) was identified with the operating system kernel. These "security kernels" had a dual responsibility: providing basic protection mechanisms and enforcing the system’s security policy.

Rushby’s 1981 paper [13] argued that this dual responsibility leads to complex implementations that are hard to verify. Instead, he proposed that secure network components would be better served by a specialized operating system core (a "separation kernel") focused solely on providing isolated address spaces with controlled communications between them, while policy enforcement is handled by trusted applications running in some of those address spaces.

The paper that is the subject of this retrospective extended this idea to general-purpose systems and multilevel security. It argues that "separation" is the essential foundation of a secure architecture, achievable through logical (a separation kernel), physical (separate machines), cryptographic (encryption or digital signatures), and temporal (periods processing) mechanisms. Separation creates an architecture of encapsulated subjects (computational entities with state, often depicted as circles or boxes) and known communication channels (generally depicted as arrows). Various security policies can be achieved by a suitable geography of subjects and channels, and the allocation of trusted functions to certain subjects, which mediate the services provided or information allowed to flow to their outgoing channels. The DSS paper illustrated this approach with the conceptual design of a system able to provide limited MLS functionality using all four kinds of separation mechanisms and relatively simple trusted functions. The trusted functions were simplified by using the design freedom afforded by the Newcastle Connection to "deconstruct" complex functions (such as the multilevel filestore) into simpler, separated components. The full filestore functionality was then reconstructed as a distributed computation over these simpler components. This is why we refer to our system as a "Distributed Secure System" rather than a "Secure Distributed System," emphasizing that it is a secure system that exploits distribution, rather than a distributed system that happens to be secure.

While approaches based on monolithic security kernels can deliver cost-effective and functional secure systems, there have been some disappointments. Reviews at NSA in the early 1990s led to a reexamination of the separation kernel idea ([10] states “in 1993 an informal separation kernel working group was established”) and to prototype implementations. Later, an architecture for embedded applications emerged called MILS. The earliest references seem to be NSA internal papers by Mark Vanfleet and others dated 1996 and 2003, cited in [2]. MILS originally stood for Multiple Independent Levels of Security but is now best understood simply as a name. Papers on MILS [22], [1] credit [13] as their inspiration and cite DSS in passing, but we suggest that MILS is best seen as the modern realization of DSS.

Like DSS, MILS is a two-level architecture that considers issues and mechanisms of policy enforcement separately from those of resource sharing. Security policy is the concern of the upper level of the architecture and is understood in terms of isolated subjects interacting over known channels (i.e., a "boxes and arrows" picture). Some subjects will be trusted, others untrusted, and the goal is to design the system so that the complexity of trusted subjects is minimized. This may be achieved by splitting large trusted functions into smaller, simpler sub-functions allocated to dedicated subjects with carefully configured communication channels. For example, in the elementary end-to-end encryption unit considered in [13], the concern is that plaintext from the secret "red" side might escape to the public network on the "black" side. By splitting the encryption device into four subjects—red, black, bypass, and crypto—as shown in the figure, we simplify this problem. The crypto is trusted to encrypt everything that passes across its input and output channels, and the bypass is trusted to check that the red and black sides do not communicate directly.

---

This version aims to be more coherent, clear, and professional, while maintaining the original content and intent.