picture  somewhat.  We  then  belatedly  realized  that, 
though  the  DSS  scheme  directly  exploited  one  of  our 
system  design  concepts,  that  relating  to  the  use  of 
recursion, it had applied only one of Newcastle's ideas 
about system structuring to security, and that there was 
an  opportunity  to  apply  another,  that  of  “ideal  fault-
tolerant  computing  components”  [3].  The  resulting 
work  led  to  the  paper  “Building  Reliable  Secure 
Computing  Systems  out  of  Unreliable 
Insecure 
Components”,  which  was  published  in  the  1986 
Oakland  conference  [8]  –  and  which  was  reprised  in 
ACSAC’s Classic Papers track in 2001. 
But  the  invitation  from  ACSAC  to  provide  a 
retrospective on our original DSS paper has prompted 
us  to  attempt  to  discover  more  about  the  subsequent 
implementation  and  deployment  of  the 
industrial 
prototype of DSS, and also to provide a description of 
DSS’s modern interpretation in  the form of the  MILS 
architecture. 
The  UK  DSS  Technology  Demonstrator 
Programme 
in 
Prompted by our initial work on DSS, RSRE started 
a “Technology Demonstrator Programme” (DSS TDP) 
to develop and deploy prototypes of DSS – such TDPs 
were  typical for  large physical systems, such  as tanks 
and ships, but this was the Ministry of Defence’s first-
ever  Information  Technology  TDP.  The  present 
authors  were  not 
the  demonstrator 
programme,  which  was  conducted  by  RSRE  with 
private  contractors  whose  identities  changed  several 
times  owing  to  acquisitions  and  reorganizations,  and 
knew  nothing  of  how  it  was  developing  other  than 
through publications describing promising progress.  
involved 
the  emulation 
internal  functionality  of 
Barnes  and  Macdonald  [5]  describe  an  apparently 
successful  emulation  of  DSS  that  “demonstrated  the 
full 
the  DSS.”  As  an 
emulation,  “the  TNIU  functions  are  implemented  as 
sub-systems within the untrusted host machines, rather 
than as separate front-end processors .  . . however,  in 
all  other  respects 
is  functionally 
complete.”  The  demonstration  was  “provided  with 
applications  software  which  is  aimed  at  an  office 
automation  type  of  environment.”  Its  purpose  was  to 
“prove the concept and improve the design.” The cited 
paper  was  based  on  one  presented  at  a  conference  in 
September  1985,  so  that  stage  of  the  project  was 
presumably  largely  complete  by  that  date.  The  next 
stage  was  “to  realize  a  full,  practical  DSS  prototype” 
and it seems this was already under way in 1986 (the 
date of the cited paper).  
in  use  by 
the  UK  (roughly  B3  on 
Bates  [6]  describes  progress  on  the  full  DSS  TDP 
five years  later  and states that it was being developed 
to Level 5 of the “computer security confidence scale” 
then 
the 
contemporaneous US “Orange Book” scheme [9]). It is 
stated  that the programme was “on  target to  complete 
in 1991 . . . evaluation and certification is expected to 
be completed in late 1991 and commercially supported 
DSS  products  are  also  expected 
late  1991.” 
Furthermore,  “it  is  intended  that  the  DSS  TDP 
products will be commercially exploited by several UK 
suppliers  . . . the first licence to commercially exploit 
the  DSS  technology  has  already  been  signed  by  a 
major UK IT company.” 
When  we  received  the  invitation  to  present  this 
retrospective, we inquired after the later history of the 
DSS  TDP.  We  were  fortunate  to  obtain  a  final  report 
on the “Phase 2 Insertion Trials” [23]. This reports that 
the  DSS  TDP  was  awarded  a  UK  Level  4  Certificate 
(not  5  as  anticipated  earlier)  in  April  1993  and  was 
licensed  to  British  Telecommunications  PLC  and 
trials  were 
GEC-Marconi  Secure  Systems.  The 
in 
194194
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
intended  to  deploy  DSS  TDP  installations  at  three 
sites: “HQ PTC Innsworth,” “DRA Fort Halstead,” and 
“HM Treasury.”  The first used a version running OSI 
protocols  and  the  other  two  used  TCP/IP.  The  initial 
HQ PTC Innsworth trial in December 1993 failed due 
to “an error in the key material supplied by CESG.” A 
later  attempt  in  June  1994  was  hampered  by  network 
problems  suggesting  “the  Black  Network  Ethernet 
interface  might  not  be  fully  within  IEEE  802.3 
specification.”  These  were  finally  resolved  and  the 
system worked but “was considered too slow for day-
to-day use.” Furthermore, “the DSS system proved too 
unreliable  to  leave  in  place.”  Improving  performance 
and reliability “would involve significant reengineering 
of the DSS kernel.” 
The  DRA  Fort  Halstead  trial  was  conducted  in 
February 1994. Again, network problems intervened so 
that  “a  liaison  could  not  be  established  between  the 
TNIU and the TNIU/TMC.” It seems that heavy loads 
(due  to  other  traffic)  on  a  certain  network  segment 
caused  the  TMC/TNIU  to  miss  the  liaison  request 
packets.  The  DSS  software  was  modified  to  operate 
better  under  high  network  loads  but  the  trial  was  not 
continued. Owing to the problems at the first two trials, 
the trial at HM Treasury was canceled. 
further 
The  report  concludes:  “it  is  unlikely  that  MOD  or 
for  DSS 
DRA  will  provide 
development  .  .  .  its  future  therefore  depends  on  the 
licensees  being 
the  necessary 
substantial investment will be worthwhile.” We may be 
confident the licensees were not convinced and that the 
DSS project was promptly dropped. 
convinced 
funding 
that 
After  a  decade  of  development  effort,  the  DSS 
Technology  Demonstration  Programme  ended 
in 
disappointing  failure.  Naturally,  we  tend  to  attribute 
this to the technological limitations of the time (a topic 
we  will  return  to  later)  and  to  UK  development  and 
management  practices,  and  we  remain  serene  and 
confident  in  the  rightness  of  the  DSS  ideas.  To 
describe the subsequent history and evolution of those 
ideas, we first need to set the context. 
The  period  from  the  1970s  through  the  90s  saw 
many  efforts  to  construct  secure  computer  systems. 
two  broad  categories: 
These  systems  were  of 
components 
network 
(end-to-end 
encryption  devices,  downgraders,  filters,  etc.),  and 
general  purpose  systems  supporting  Multi-Level 
Secure  (MLS)  applications.  However,  both  categories 
used  a  similar  architecture,  in  which  most  of  the 
Trusted  Computing  Base  (TCB)  was  identified  with 
the  operating  system  kernel.  These  monolithic 
security 
for 
From DSS to MILS 
to 
leads 
“security kernels” had a dual responsibility: they had to 
provide 
the  basic  protection  mechanisms  of  an 
operating  system  (address  space  isolation,  controlled 
access  to privileged mode and so on) and they had to 
enforce the system’s security policy. 
inevitably 
Rushby’s  1981  paper  [13]  argued  that  this  dual 
responsibility 
complex 
implementations  that  are  hard  to  verify  and,  instead, 
proposed  that  secure  network  components  would  be 
better served by a specialized operating system core (a 
“separation  kernel”) 
the 
provision  of  isolated  address  spaces  with  controlled 
communications  between 
is 
enforced  by  trusted  applications  running  in  some  of 
those address spaces. 
that  focuses  solely  on 
them,  while  policy 
foundation 
communication 
channels  between 
for  any  kind  of 
The  paper  that  is  the  subject  of  this  retrospective 
extended  this  idea  to  general  purpose  systems  and 
multilevel  security.  It  argues  that  “separation”  is  the 
essential 
secure 
architecture,  and  that  it  can  be  achieved  by  several 
mechanisms:  logical  (a  separation  kernel),  physical 
(separate  machines),  cryptographic  (encryption  or 
digital  signatures),  and  temporal  (periods  processing). 
Separation  creates  an  architecture  of  encapsulated 
subjects  (computational  entities  with  state,  often 
portrayed  diagrammatically  as  circles  or  boxes)  and 
known 
them 
(generally  portrayed  as  arrows).  Various  security 
policies  can  be  achieved  by  a  suitable  geography  of 
subjects  and  channels,  and  the  allocation  of  trusted 
functions  to  certain  subjects,  which  mediate  the 
services  provided  or  information  allowed  to  flow  to 
their outgoing channels. The DSS paper illustrated this 
approach with  the  conceptual design of a  system  able 
to  provide  limited  MLS  functionality  using  all  four 
kinds  of  separation  mechanisms  and  relatively  simple 
trusted  functions.  The  trusted  functions  were  simple 
because  we  used  the  design  freedom  afforded  by  the 
Newcastle  Connection 
to  “deconstruct”  complex 
functions (such as the multilevel filestore) into simpler, 
separated  components.  The  functionality  of  the  full 
filestore  was 
then  reconstructed  as  a  distributed 
computation  over  these  simpler  components.  It  is  for 
this reason that we refer to our system as a “Distributed 
Secure  System,”  rather  than  a  “Secure  Distributed 
System,”  the  implication  being  that  it  is  a  secure 
system 
rather 
than  a 
distributed system that happens to be secure. 
that  exploits  distribution, 
While  approaches  based  on  monolithic  security 
kernels can deliver cost-effective and functional secure 
systems  (see,  for  example,  the  fervent  advocacy  of 
Schell 
some 
disappointments.  Reviews  at  NSA  in  the  early  1990s 
led to reexamination of the separation kernel idea ([10] 
states “in 1993 an informal separation kernel working 
there  were 
seems 
[20]), 
it 
195195
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
established”) 
and 
to 
prototype 
group  was 
implementations. 
later, 
Rather 
an 
for 
architecture 
embedded 
applications  emerged  called  MILS.  The  earliest 
references  seem  to  be  NSA  internal  papers  by  Mark 
Vanfleet  and  others  dated  1996  and  2003,  which  are 
cited  in  [2].  MILS  originally  stood  for  Multiple 
Independent  Levels  of  Security,  but  is  now  best 
understood  as  simply  a  name.  Papers  on  MILS  [22], 
[1] always credit [13] as their inspiration, and cite DSS 
in passing, but we would like to suggest that MILS is 
best seen as the modern realization of DSS. 
Figure: Encryption Device Composed of Four 
Subjects 
the 
Like  DSS,  MILS  is  a  two-level  architecture  that 
considers 
issues  and  mechanisms  of  policy 
enforcement separately from those of resource sharing. 
Security policy is the concern of the upper level of the 
architecture  and  is  understood  in  terms  of  isolated 
subjects  interacting  over  known  channels  (i.e.,  a 
“boxes  and  arrows”  picture).  Some  subjects  will  be 
trusted, others untrusted, and the goal is  to design the 
system  in  such  a  way  that  the  complexity  of  trusted 
subjects  is  minimized:  this  may  be  achieved  by 
splitting  large  trusted  functions  into  smaller  and 
simpler  sub-functions  that  are  allocated  to  dedicated 
subjects  with  carefully  configured  communications 
channels.  For  example,  in  the  elementary  end-to-end 
encryption unit considered in [13], the  concern is  that 
plaintext from the secret “red” side might escape to the 
public  network  on  the  “black”  side.  By  splitting  the 
encryption  device  into  four  subjects  –  red,  black, 
bypass, and crypto – as shown in the above figure, we 
simplify this problem. The crypto is trusted to encrypt 
everything  that  passes  across  its  input  and  output 
channels,  the  bypass  is  trusted  to  check  that  the 