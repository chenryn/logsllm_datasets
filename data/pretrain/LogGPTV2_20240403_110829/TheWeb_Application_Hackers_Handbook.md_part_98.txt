### Mapping and Analysis with an Intercepting Proxy

When using an intercepting proxy, all requests and responses pass through the proxy. The proxy also adds items to the site map based on the content of the responses (e.g., by parsing links, forms, and scripts). After manually mapping the applicationâ€™s visible content using your browser, you can use the Spider and Content Discovery functions to actively probe for additional content. The outputs from these tools are added to the site map.

#### Workflow for Using an Integrated Testing Suite

1. **Reconnaissance and Analysis:**
   - **Web Browser:** Manually browse the application.
   - **Intercepting Proxy:** Passively capture and analyze traffic.
   - **Spider:** Actively crawl the application to discover additional content.
   - **Content Discovery:** Proactively search for hidden or less obvious content.

2. **Site Map Construction:**
   - The proxy history and spidering results are integrated into a comprehensive site map.

3. **Attack Surface Assessment:**
   - Identify the set of functionality and requests that warrant closer inspection for vulnerabilities.

4. **Vulnerability Testing:**
   - **Proxy Interception Window, History, and Site Map:** Select items to send to other tools within the suite.
   - **Fuzzer:** Test for input-based vulnerabilities and perform attacks like sensitive information harvesting.
   - **Vulnerability Scanner:** Automatically check for common vulnerabilities using both passive and active techniques.
   - **Token Analyzer:** Test the randomness properties of session cookies and other tokens.
   - **Request Repeater:** Modify and reissue individual requests to probe for vulnerabilities or refine exploits.

5. **Verification and Exploitation:**
   - Use the browser to confirm vulnerabilities, test exploits, and verify access control issues.
   - For example, after finding a cross-site scripting flaw, paste the URL back into the browser to confirm the proof-of-concept exploit.

#### Flexibility in Workflow

- The described workflow is not rigid. You may enter unexpected input directly into the browser or proxy interception window.
- Some bugs may be evident without needing specialized tools.
- Combine testing suite components in innovative ways to discover obscure vulnerabilities.

### Alternatives to the Intercepting Proxy

In cases where standard proxy-based tools cannot be used (e.g., nonstandard authentication methods, client SSL certificates, or browser extensions), consider using in-browser tools to monitor and manipulate HTTP requests.

#### In-Browser Tools

- **Tamper Data (Firefox Extension):** Displays and allows modification of request details.
- **TamperIE (Internet Explorer Extension):** Provides similar functionality to Tamper Data.

These tools enable you to submit arbitrary requests while allowing the browser to communicate normally with the application. Although they lack advanced features like spidering and vulnerability scanning, they are useful when standard tools cannot be used.

### Standalone Vulnerability Scanners

Standalone web application vulnerability scanners automate several testing techniques, including:

- **Application Spidering:** Discover default and common content.
- **Vulnerability Probing:** Submit test strings and analyze responses for common vulnerabilities.
- **Report Generation:** Provide detailed reports with specific request and response data for each discovered vulnerability.

#### Strengths and Weaknesses

- **Strengths:**
  - Quickly identify a variety of important vulnerabilities.
  - Useful for large-scale testing and initial assessments.

- **Weaknesses:**
  - Limited in detecting complex or logic-based vulnerabilities.
  - May produce false positives and negatives.

### Vulnerabilities Detected by Scanners

Scanners can reliably detect several categories of vulnerabilities, such as:

- **Refl ected Cross-Site Scripting (XSS):** User-supplied input echoed in responses without sanitization.
- **SQL Injection:** ODBC error messages or time delays.
- **Path Traversal:** Access to known files like `win.ini` or `/etc/passwd`.
- **Command Injection:** Time delays or specific strings in responses.
- **Directory Listings:** Text resembling directory listings.
- **Cleartext Password Submission, Cookie Scope, and Form Autocomplete:**
  - Detected by reviewing normal requests and responses.
- **Backup and Source Files:** Discovered by requesting enumerated resources with different file extensions.

### Limitations of Scanners

- **Complex Logic Flaws:** Scanners struggle with broken access controls, parameter value modifications, and other logical flaws.
- **Design Flaws:** Weak password rules, username enumeration, and predictable session tokens.
- **Information Leakage:** Sensitive data like usernames and session tokens.

### Inherent Limitations

- **Customized Applications:** Web applications are highly customized, making it difficult to create a comprehensive database of targets.
- **Syntax vs. Semantics:** Scanners can analyze syntax but not semantic meaning.
- **Lack of Improvisation:** Scanners follow predefined rules and miss nonstandard mechanisms and improvised attacks.
- **Intuition and Creativity:** Scanners lack the intuition and creativity of human testers, leading to missed vulnerabilities.

### Conclusion

While automated scanners are powerful, they have inherent limitations. Combining them with manual testing and creative approaches will yield the most effective results in discovering and exploiting vulnerabilities.