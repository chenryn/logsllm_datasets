User: 请说明如何进行代码版本控制，并介绍Git的功能和用法。
Assistant: 一、代码版本控制简介
代码版本控制是对软件开发过程的管理与控制，即记录软件代码的变更历史、跟踪每个版本的变更情况、还原历史版本等。代码版本控制工具可以有效地帮助开发者进行团队协作、代码版本管理和代码备份。

常用的代码版本控制工具有两种：集中式版本控制和分布式版本控制。Git是目前最受欢迎的一种分布式版本控制工具。

二、Git简介

Git是一个开源的分布式版本控制工具，可以跟踪文件的变化、协调多人共同开发、记录每个版本的变动。Git最初由Linus Torvalds于2005年开发，现已经成为全球使用最广泛的版本控制工具之一，广泛应用于各种开发项目。

Git的主要特点如下：
1. 分布式版本控制，每个用户拥有所有代码的完整副本，无需依赖服务器进行操作。
2. 支持快速的提交、回滚、合并等操作，能够支持高效地团队协作。
3. 支持多种提交协议（HTTP、SSH、Git协议等）。
4. 支持自定义分支管理策略。
5. 提供历史记录、分支、标签、补丁等功能。

三、Git用法

1. Git安装

在Git官网下载适合自己操作系统的Git版本并安装即可。

2. 创建Git仓库

在需要版本控制的项目文件夹内，运行以下命令创建一个本地Git仓库：

    git init

3. 创建文件

在项目文件夹中创建文件，并在文件中添加代码。

4. 添加修改

运行以下命令，将修改添加到Git的本地版本库中：

    git add [文件名]

5. 提交修改

运行以下命令，将本地版本库中的修改提交到远程仓库中：

    git commit -m "提交说明"

6. 查看历史记录

运行以下命令， 查看Git提交的历史记录：

    git log

7. 分支管理

Git支持分支管理，可以通过分支进行开发，再合并到版本库中。

- 创建分支

运行以下命令，创建一个名为“dev”的分支：

    git branch dev

- 切换分支

运行以下命令，切换到“dev”分支：

    git checkout dev

- 合并分支

运行以下命令，将“dev”分支合并到主分支：

    git merge dev

8. 撤销修改

运行以下命令，将工作区中的修改撤销，恢复到最近的一次提交：

    git checkout -- [文件名]

9. 标签管理

Git支持添加标签，便于查找历史版本。

- 创建标签

运行以下命令，在当前提交位置添加一个名为“v1.0”的标签：

    git tag v1.0

- 查看标签

运行以下命令，查看所有标签：

    git tag

10. 其他命令

除了以上常用的Git命令，还有很多其他的Git命令可以使用，如：stash、reset、rebase等。

总的来说，学习和掌握Git的使用，能够有效地控制代码版本，提高开发效率，是软件开发中必不可少的技能之一。