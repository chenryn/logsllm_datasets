title:Blazing Fast 2PC in the Offline/Online Setting with Security for Malicious
Adversaries
author:Yehuda Lindell and
Ben Riva
Blazing Fast 2PC in the Ofﬂine/Online Setting with Security
for Malicious Adversaries∗
Yehuda Lindell
Department of Computer Science
Bar-Ilan University, Israel
PI:EMAIL
Ben Riva
Department of Computer Science
Bar-Ilan University, Israel
PI:EMAIL
ABSTRACT
Recently, several new techniques were presented to dramatically
improve key parts of secure two-party computation (2PC) proto-
cols that use the cut-and-choose paradigm on garbled circuits for
2PC with security against malicious adversaries. These include
techniques for reducing the number of garbled circuits (Lindell 13,
Huang et al. 13, Lindell and Riva 14, Huang et al. 14) and tech-
niques for reducing the overheads besides garbled circuits (Mohas-
sel and Riva 13, Shen and Shelat 13).
We design a highly optimized protocol in the ofﬂine/online set-
ting that makes use of all state-of-the-art techniques, along with
several new techniques that we introduce. A crucial part of our
protocol is a new technique for enforcing consistency of the inputs
used by the party who garbles the circuits. This technique has both
theoretical and practical advantages over previous methods.
We present a prototype implementation of our new protocol. This
is the ﬁrst implementation of the amortized cut-and-choose tech-
nique of Lindell and Riva (Crypto 2014). Our prototype achieves
a speed of just 7 ms in the online stage and just 74 ms in the of-
ﬂine stage per 2PC invoked, for securely computing AES in the
presence of malicious adversaries (using 9 threads on a 2.9GHz
machine). We note that no prior work has gone below one second
overall on average for the secure computation of AES for malicious
adversaries (nor below 20ms in the online stage). Our implementa-
tion securely evaluates SHA-256 (which is a much bigger circuit)
with 33 ms online time and 206 ms ofﬂine time, per 2PC invoked.
1.
INTRODUCTION
Secure two-party computation enables a pair of parties with pri-
vate inputs to compute a joint function of their inputs. The compu-
tation should maintain privacy (meaning that the legitimate output
but nothing else is revealed), correctness (meaning that the out-
put is correctly computed), and more. These properties should be
∗Supported by the European Research Council under the ERC con-
solidators grant agreement n. 615172 (HIPS), and by the BIU Cen-
ter for Research in Applied Cryptography and Cyber Security in
conjunction with the Israel National Cyber Bureau in the Prime
Minster’s Ofﬁce.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813666.
maintained even if one of the parties is corrupted. The feasibility
of secure computation was demonstrated in the 1980s, where it was
shown that any probabilistic polynomial-time functionality can be
securely computed [32, 13].
The goal of constructing efﬁcient secure two-party (2PC) com-
putation protocols in the presence of malicious adversaries has been
an active area of research in the recent years. One of the most popu-
lar approaches for constructing such protocols is based on applying
the cut-and-choose technique to Yao’s garbled-circuit protocol. In
this technique, one of the parties prepares many garbled circuits,
and the other asks to open a random subset of them in order to ver-
ify that they are correct; the parties then evaluate the remaining,
unchecked circuits. This forces the party generating the garbled
circuits to make most of them correct, or it will be caught cheating
(solving perhaps the biggest problem in applying Yao’s protocol
to the malicious setting, which is that an incorrect garbled circuit
that computes the wrong function cannot be distinguished from a
correct garbled circuit). Many different works 2PC protocols have
been designed based on this approach [24, 20, 22, 29, 14, 19, 25,
30], and several implementations have been presented to study the
concrete efﬁciency of it in practice (e.g.[27, 29, 17, 30, 2]). In this
work we focus on the cut-and-choose approach.
The number of garbled circuits. Let s be a statistical security
parameter such that the probability that a malicious party can cheat
should be bounded by 2−s (plus a function that is negligible in n,
where n is the computational security parameter). Then, the exact
number of garbled circuits needed for achieving this bound was
reduced in the past years from 17s [20], to approximately 3s [20,
29], and recently to s [19].
In [15, 23], it was shown that if multiple 2PC executions are
needed, then the amortized number of garbled circuits per 2PC can
be reduced even below s (i.e., for N 2PC executions, only O(
logN )
garbled circuits are needed per 2PC). In addition, [15, 23] present
protocols that work in the online/ofﬂine setting, where most of the
computation and communication intensive steps are carried out in
the ofﬂine stage, resulting in a very efﬁcient online stage.
s
Checking input consistency. Running cut-and-choose itself does
not sufﬁce for obtaining a secure protocol since it only deals with
the correctness of the garbled circuits. To make the protocol se-
cure, we must additionally include mechanisms for ensuring that
the party that prepares the garbled circuits (a) uses the same input
in all the evaluated garbled circuits, and (b) provides correct inputs
to the OTs for the other party to learn the input labels for its input.
We refer to the ﬁrst problem as P1’s input consistency check and the
second as preventing a selective OT attack. (We note that it is easy
to ensure that the party P2 who evaluates the garbled circuits uses
the same input in all circuits, by running a single OT for each bit of
579P2’s input for all circuits being evaluated. We therefore do not refer
to this problem further.)
It is possible to check the consistency of P1’s input using O(s2)
inexpensive (symmetric) cryptographic operations per input bit [24,
20], but this results in huge communication. Alternate solutions us-
ing O(s) exponentiations per input bit were presented in [22, 29];
this reduces the communication size while signiﬁcantly increasing
the computation time. Recently, [30, 25] presented solutions that
require only O(s) inexpensive (symmetric) cryptographic opera-
tions per input bit, resulting in only a minor overhead on top of the
cut-and-choose protocol itself (as it already requires O(s) gates per
input bit).
Implementations of cut-and-choose based 2PC. The ﬁrst imple-
mentation which evaluated the cut-and-choose approach in practice
was [27]. In [29, 30], implementations with additional algorithmic
improvements were presented. Both results focus on reducing the
overheads of the input-consistency checks, and work with approxi-
mately 3s garbled circuits for soundness 2−s. In [17], the protocol
of [29] is implemented using mass parallelism, resulting in a system
that utilizes a cluster of several hundreds of machines in parallel.
Parallelism was taken a step further in [11, 10], who designed and
implemented protocols on GPUs.
The fastest published secure computation of AES based on cut-
and-choose on garbled circuits, that we are aware of, in the single-
execution, non-massively concurrent setting is of [2]. This imple-
mentation requires approximately 6.39 seconds for a single eval-
uation of AES. However, massive concurrency can drastically im-
prove performance. Using several tens of machines (each with 8
CPU cores), AES can be computed in about 40.6 seconds for 1024
executions, with security parameter s = 80 [30]. Using GPUs, AES
can be computed in only 0.46 seconds, for s = 40 [10].
1.1 Our Contributions
We start by presenting a new technique for checking that P1
uses the same input in all (good) garbled circuits. Our method
has both theoretical and practical advantages over previous tech-
niques. Then, we describe an optimized protocol for 2PC in the on-
line/ofﬂine setting, based on the protocol of [23]; our protocol uses
our new consistency check, plus the state-of-the-art techniques for
the other checks and additional small optimizations. We present
a prototype implementation of our optimized protocol, which is
the ﬁrst implemented 2PC protocol based on the cut-and-choose
method that requires less then s garbled circuits per 2PC compu-
tation. Last, we evaluate the prototype with different circuits and
sets of parameters. We proceed to provide more details on each
contribution.
New P1’s input consistency check. Previous techniques for en-
suring that P1 uses the same input in all good garbled circuits have
signiﬁcant disadvantages. The best known methods to date require
O(s) symmetric cryptographic operations per input bit, and are due
to [25] and [30]. However, it is unclear how to use the technique
of [30] in the online/ofﬂine setting (when many 2PC executions are
needed), and the technique of [25] is (arguably) complicated and
thus very difﬁcult to implement.
Our new solution requires O(s) symmetric cryptographic opera-
tions per garbled circuit, rather than per input bit; in most cases this
is much smaller, and especially in the ofﬂine/online setting where
the number of circuits per execution is very small (about 5-10 for
typical parameters). In addition, our solution is very simple to de-
scribe and implement, and can be plugged-in in a modular way into
most 2PC protocols (based on the cut-and-choose method), includ-
ing the ones in the online/ofﬂine setting. Our protocol can be im-
plemented using only standard cryptographic assumptions (at the
expense of adding 2 exponentiations per circuit which is negligible
in the overall cost) or in the random oracle model (in which case no
exponentiations are needed). We remark that our new consistency
check is the best option today, even for single-execution protocols.
Optimized protocol in the ROM. We apply the new technique
for checking P1’s input consistency and the randomized encoding
technique of [20] for protecting against selective OT attacks, to the
protocol of [23] in the online/ofﬂine setting. We further optimize
several parts of the protocol in the random-oracle model, including
further elimination of exponentiations, reducing communication,
and more.
The online stage of the protocol is highly efﬁcient. It requires
only four messages between the players and the overall communi-
cation size depends only on the input length and the security param-
eters. (Note that the online stage of the fastest 2PC implementation
in the online/ofﬂine setting, shown in [26], requires a number of
rounds that depends on the depth of the circuit in use, and its com-
munication size depends on the circuit size.) This is the ﬁrst im-
plemented protocol with online communication that is independent
of the circuit size (and is concretely very small, as shown by our
experiments).
Prototype implementation and evaluation. We implemented our
optimized protocol on top of the SCAPI library [9, 1]. Our pro-
totype uses state-of-the-art techniques like AES-NI instructions,
ﬁxed-key garbling [4], and the optimized OT-extension protocol
of [3]. We evaluated the prototype on Amazon AWS machines.
Performance of the online stage itself is three orders of magnitude
better than previous protocols (without massive parallelism). For
example, evaluating the AES circuit between two machines in the
same region costs only 7 ms in the online stage. Furthermore, the
ofﬂine stage costs only 74 ms per 2PC computation (for some sets
of parameters). Even when the parties communicate via the In-
ternet, the cost of the online stage remains small as our protocol
requires only four rounds of communication. Speciﬁcally, we eval-
uated AES in 160 ms with a network roundtrip of 75 ms (so at least
150 ms is spent on communication). Observe that the ofﬂine stage
itself is very competitive when compared to previous results. In
particular, the sum of both the ofﬂine and online stages is far better
than any single execution reported (81ms only). Thus, we do not
obtain a fast online phase at the expense of a slow ofﬂine one. See
Section 6 for more details and a comparison of our results with the
performance of previous implementations.
2. PRELIMINARIES
Let H(·) denote a hash function, and commit(x) (respectively,
commit(x,r)) denote a commitment to x (resp., a commitment to
x using randomness r). We denote by l the length of each party’s
input, by In(C,x) the set of wire indexes of a boolean circuit C that
correspond to a given input x, and by Out(C) the set of wire indices
of the output wires of C.
2.1 Efﬁcient Perfectly/Statistically-Hiding Ex-
tractable Commitment
Let ExtractCom(m) be a perfectly- or statistically-hiding ex-
tractable commitment. In the full version we review the perfectly-
hiding extractable commitment of [18] that works in the standard
model and is secure under the DDH assumption. In the random-
oracle model,
easily deﬁned by
ExtractCom(m) = H(m;r) where r is random. Note that this is not
perfectly hiding. However it is statistically hiding (in the random
oracle model) to any algorithm who can make only a polynomial
number of queries to H, and this sufﬁces for our needs.
such commitments
are
5802.2 Adaptively-Secure Garbling
The standard security notion of garbled circuits (e.g., [21]) deals
with a static adversary, meaning that the adversary picks its input
before seeing the garbled circuit. However, in the online/ofﬂine
setting, inputs are chosen only in the online stage, and if we wish
to send all garbled circuits in the ofﬂine stage then the static secu-
rity notion does not sufﬁce. (Note that it is possible to only commit
to the garbled circuits in the ofﬂine phase. However, in order to
achieve the necessary security here, the decommitment would be
the same size as the circuit, resulting in signiﬁcant communication.)
The security of garbled circuits in the presence of an adaptive ad-
versary was deﬁned in [5]; in this deﬁnition, the adversary ﬁrst gets
the garbled circuit and only then chooses its input. As discussed in
[23], this allows proving security in the online/ofﬂine setting, even
if all garbled circuits are sent in the ofﬂine stage.
We use the method described in [23] that slightly modiﬁes the
ﬁxed-key AES-NI garbling scheme of [4] to be adaptively secure
in the random-permutation model,. Adaptive security is immediate
in the (programmable) random-permutation model if P2 (the evalu-
ator) chooses its input in a single query. However, this is not true in
case P2 can obtain some valid input labels before all its input bits
are chosen (and therefore evaluate some of the gates before the in-
put is fully determined). This is a problem since the gates need to be
“programmed” (in the random-oracle/random-permutation model)
after the inputs are received. This is solved by ensuring that P2 is
unable to decrypt any gate before receiving all labels. We achieve
this by having P1 choose a random λ (of the same length as the gar-
bled labels), and whenever P2 should learn a label for some input
bit, it actually learns the label XORed with λ . After P2 receives
all the garbled values (XORed with λ ), P1 reveals λ , and then P2
XORs its labels and can evaluate the circuit. (The value of λ can be
viewed as part of the last label, which will be longer than the pre-
vious ones). We prove security of this method in the full version.
2.3 The Selective-OT Attack Solution of [20]
A solution for the selective-OT attack, which works with any
oblivious transfer in a black-box way, was presented in [20]. The
solution works by encoding P2’s input in a way that any leakage of