# Does Certificate Transparency Break the Web? Measuring Adoption and Error Rate

## Authors
Emily Stark<sup>1</sup>, Ryan Sleevi<sup>1</sup>, Rijad Muminović<sup>2</sup>, Devon O’Brien<sup>1</sup>, Eran Messeri<sup>1</sup>, Adrienne Porter Felt<sup>1</sup>, Brendan McMillion<sup>3</sup>, Parisa Tabriz<sup>1</sup>

<sup>1</sup>Google, <sup>2</sup>University of Sarajevo, <sup>3</sup>Cloudflare

**Contact:** estark, rsleevi, asymmetric, eranm, felt, PI:EMAIL, PI:EMAIL, 3brendan@cloudflare.com

---

### Abstract
Certificate Transparency (CT) is an emerging system for enabling the rapid discovery of malicious or misissued certificates. Initially standardized in 2013, CT is now beginning to see widespread support. Although CT provides desirable security benefits, web browsers cannot require all websites to support CT at once due to the risk of breaking large numbers of websites. We discuss challenges for deployment, analyze the adoption of CT on the web, and measure the error rates experienced by users of the Google Chrome web browser. Our findings indicate that CT has been widely adopted with minimal breakage and warnings.

Security researchers often face a tradeoff between enhancing security and avoiding user frustration. Rolling out new security requirements can cause significant disruptions. We view CT as a case study for deploying ecosystem-wide changes while minimizing the impact on end users. We discuss the design properties of CT that contributed to its success, as well as the lessons learned from its risks and pitfalls, which could be avoided in future large-scale security deployments.

**Index Terms:** Web PKI, HTTPS, Certificate Transparency, Usable Security

---

### I. Introduction
In 2011, a widely trusted certificate authority (CA) improperly issued an HTTPS certificate for Google domains, which was used in a man-in-the-middle attack targeting Iranian internet users [1]. The incident highlighted the dangers of improper certificate issuance and the need to strengthen the web Public Key Infrastructure (PKI).

Certificate Transparency (CT) is an emerging system that facilitates the discovery of potentially malicious or misissued certificates. CT improves the web PKI by allowing domain owners to discover unexpected certificates issued for their domains and enabling the public to monitor suspicious or improper CA practices. Certificates are recorded in publicly-auditable, append-only logs, and clients can trust certificates only if they are accompanied by proofs of being logged.

The full deployment of CT represents a significant change to the HTTPS ecosystem. Eventually, to achieve the full security benefits of CT, web browsers will enforce CT for all publicly trusted certificates. However, no browser fully enforces CT for all certificates yet, as this could cause widespread breakage. Users would see certificate warnings on any website not properly implementing CT, leading to warning fatigue and hindering important tasks [2], [3].

In this paper, we explore the success of CT's deployment. Have browsers, CAs, and websites deployed it with low error rates? What factors have contributed to its successes and failures, and what can the security community learn from it? We measure CT adoption and health from multiple perspectives and over time. We find that CT has been widely deployed, with over 60% of HTTPS traffic supporting CT, and that it rarely causes warnings or breakage. When breakage does occur, it is often due to bugs or misconfigurations in how CAs implement CT. Users often engage in unsafe behaviors, such as bypassing warnings or switching browsers, highlighting the need to keep error rates low.

We attribute the low error rate and wide deployment of CT to three main characteristics:
1. **Minimal Site Owner Action:** A small number of CAs can deploy CT across much of the web.
2. **Staged Rollout:** CT enforcement can be gradually ramped up, allowing problems to be identified and addressed.
3. **Flexible Enforcement:** Browsers can determine the specifics of CT enforcement, mitigating security and operational risks.

We also identify challenges in CT deployment that may pose hurdles for future systems. The rollout has been driven by a few major players, and broader adoption among other browsers is crucial for CT's success.

### A. Contributions
Our primary contributions are:
- **Adoption Analysis:** We measure how widely CT has been adopted across the web and explore factors contributing to its successful adoption.
- **Breakage and User Behavior:** We examine how often users experience CT-related breakage and how they react. We find that breakage rates are low, but users often behave unsafely when faced with CT warnings.
- **Risks and Challenges:** Using anecdotes from large CT deployments, we identify risks that could cause disruption as CT enforcement broadens.
- **Future Hurdles:** We discuss potential challenges for similar systems in the future.

---

### II. Background
This section provides an overview of HTTPS, the web PKI, and CT, including its current state of deployment.

#### A. HTTPS and the Web PKI
HTTPS encrypts and authenticates web traffic to protect confidentiality and integrity against network attackers. During the handshake, the client validates a certificate, which authenticates the server in the web PKI. Server owners obtain certificates from CAs, which verify the server's identity using various methods. Clients maintain a trust store of trusted CAs and validate server certificates by building a chain to a trusted CA. If validation fails, the connection fails, and browsers show full-page error warnings. For subresources, failure to load can make the page appear broken. Compromised CAs can issue fraudulent certificates, leading to man-in-the-middle attacks. For more details, see [4] and [5].

#### B. Certificate Transparency
CT aims to protect users from mistakenly or maliciously issued certificates by ensuring all certificates are logged in publicly-auditable, append-only logs [6]. Domain owners can monitor these logs to discover improperly issued certificates, and anyone can audit for suspicious certificates or CA misbehavior. Suspicious certificates can be revoked, and misbehaving CAs can be removed from trust stores.

CT consists of three parts: logging, SCT validation, and monitoring/auditing.

1. **Logging:** Anyone can run a CT log, which is an auditable Merkle tree of certificates. Log operators notify browsers of the log's existence. Certificates are submitted by CAs, research scanners, web crawlers, and others. Each submission receives a Signed Certificate Timestamp (SCT), a verifiable promise that the log commits to incorporating the certificate.

2. **SCT Validation:** SCTs are provided with certificates to indicate they have been or will be logged. SCTs can be delivered in three ways:
   - Embedded in the certificate.
   - In a TLS extension during the HTTPS connection setup.
   - In a stapled OCSP response, signed by the CA and delivered by the server.

Browsers validate SCTs to ensure they come from recognized logs and may have policies requiring a certain number of SCTs or specific logs.

3. **Monitoring/Auditing:** CT logs expose a REST API for monitoring and auditing. Monitors and auditors include security researchers, browser vendors, and domain owners. They can request inclusion and consistency proofs to verify the log's integrity. More details are available in [8].

#### C. CT Deployment in Browsers
CT standardization began in 2012, but widespread support is recent. Browsers cannot enforce CT all at once, and websites must be motivated to support CT. Major browsers are in various stages of implementation. Mozilla Firefox has a preliminary SCT validation for telemetry [9], Apple plans to enforce CT for certificates issued after October 2018 [10], and Microsoft supports CT but has not announced enforcement plans [11].

We focus on Google Chrome, which has the most advanced CT implementation. As of July 2018, Chrome requires CT compliance for a subset of certificates.

1. **Chrome CT Policy:** When enforcing CT, Chrome requires SCTs compliant with the Chrome CT policy [12]. The policy requires a certain number of SCTs (two to five) and log diversity, ensuring redundancy and resilience. Non-compliance results in the error UI shown in Fig. 1.

2. **Stages of Enforcement in Chrome:**
   - **Extended Validation Requirement:** Since early 2015, Chrome requires CT compliance for Extended Validation (EV) certificates. Non-compliant EV certificates fall back to the default UI (Fig. 2).
   - **Individual CAs:** Chrome requires CT compliance for CAs with a history of misissuance, generally for newly issued certificates.
   - **Site Opt-In:** Since September 2017, sites can opt into CT enforcement via the Expect-CT HTTP header [15].
   - **New Certificates:** Starting in late July 2018, Chrome enforces CT for all certificates issued after April 30, 2018 [16].

---

### III. Methodology
To examine CT adoption and breakage, we analyze data from several sources.

#### A. Chrome Usage Metrics
We use browser usage metrics to assess:
- **CT Adoption Rates:** By measuring the amount of web traffic served with valid SCTs, providing insights into global CT adoption patterns.
- **End User Impact:** By measuring the rate of breakage users experience due to CT enforcement. With over two billion installs, Chrome provides a robust dataset for assessing CT's usability and adoption.

---

### Figures
- **Fig. 1:** The Chrome UI shown when a website is required to comply with the CT policy but fails to do so.
- **Fig. 2:** The Chrome Extended Validation certificate UI (top) and default UI shown for regular HTTPS certificates (bottom).
- **Fig. 3:** Major CT enforcement milestones in Chrome.

---

### References
[1] K. Chen, et al., "Man-in-the-Middle Attack on Iranian Internet Users," Google Online Security Blog, 2011.
[2] S. Schechter, et al., "The Emperor's New Security Indicators," IEEE Symposium on Security and Privacy, 2007.
[3] J. Sunshine, et al., "Crying Wolf: An Empirical Study of SSL Warning Effectiveness," USENIX Security Symposium, 2009.
[4] M. Marlinspike, "SSL and the Future of Authenticity," Black Hat USA, 2009.
[5] D. Adrian, et al., "Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice," ACM CCS, 2015.
[6] E. Rescorla, "Certificate Transparency," RFC 6962, June 2013.
[7] D. Harkins, "OCSP Stapling," RFC 6066, January 2011.
[8] A. Langley, "Certificate Transparency Monitoring and Auditing," Google Online Security Blog, 2014.
[9] Mozilla, "Certificate Transparency in Firefox," Mozilla Security Blog, 2017.
[10] Apple, "About Certificate Transparency," Apple Support, 2018.
[11] Microsoft, "Microsoft Edge and Certificate Transparency," Microsoft Security Blog, 2018.
[12] Google, "Chrome Certificate Transparency Policy," Google Online Security Blog, 2018.
[13] CAB Forum, "Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates," Version 1.6.5, 2018.
[14] Google, "Enforcing Certificate Transparency for Misissuing CAs," Google Online Security Blog, 2018.
[15] IETF, "Expect-CT Extension for HTTP," RFC 8418, August 2018.
[16] Google, "Certificate Transparency Enforcement in Chrome," Google Online Security Blog, 2018.
[17] Google, "Google Chrome Statistics," Google, 2018.