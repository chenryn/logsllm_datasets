title:Does Certificate Transparency Break the Web? Measuring Adoption and
Error Rate
author:Emily Stark and
Ryan Sleevi and
Rijad Muminovic and
Devon O'Brien and
Eran Messeri and
Adrienne Porter Felt and
Brendan McMillion and
Parisa Tabriz
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Does Certiﬁcate Transparency Break the Web?
Measuring Adoption and Error Rate
Emily Stark1, Ryan Sleevi1, Rijad Muminovi´c2, Devon O’Brien1, Eran Messeri1,
Adrienne Porter Felt1, Brendan McMillion3, Parisa Tabriz1
1Google, 2University of Sarajevo, 3Cloudﬂare
1estark,rsleevi,asymmetric,eranm,felt,PI:EMAIL, PI:EMAIL, 3brendan@cloudﬂare.com
Abstract—Certiﬁcate Transparency (CT) is an emerging system
for enabling the rapid discovery of malicious or misissued
certiﬁcates. Initially standardized in 2013, CT is now ﬁnally
beginning to see widespread support. Although CT provides
desirable security beneﬁts, web browsers cannot begin requiring
all websites to support CT at once, due to the risk of breaking
large numbers of websites. We discuss challenges for deployment,
analyze the adoption of CT on the web, and measure the error
rates experienced by users of the Google Chrome web browser.
We ﬁnd that CT has so far been widely adopted with minimal
breakage and warnings.
Security researchers often struggle with the tradeoff between
security and user frustration: rolling out new security require-
ments often causes breakage. We view CT as a case study for
deploying ecosystem-wide change while trying to minimize end
user impact. We discuss the design properties of CT that made its
success possible, as well as draw lessons from its risks and pitfalls
that could be avoided in future large-scale security deployments.
Index Terms—Web PKI, HTTPS, Certiﬁcate Transparency,
usable security
I. INTRODUCTION
In 2011, a widely trusted certiﬁcate authority (CA) im-
properly issued an HTTPS certiﬁcate for Google domains.
This misissued certiﬁcate was used to target Iranian internet
users in a man-in-the-middle attack [1]. The certiﬁcate was
revoked and the offending CA was removed from client trust
stores, but the incident demonstrated the danger of improper
certiﬁcate issuance and the need to strengthen the web PKI
against attacks.
Certiﬁcate Transparency (CT) is an emerging system that
facilitates the discovery of certiﬁcates that might be used in
attacks. CT improves the web PKI by allowing domain owners
to discover unexpected certiﬁcates issued for their domains
and by allowing the public at large to discover suspicious
or improper CA issuance practices. With CT, certiﬁcates are
recorded in publicly-auditable, append-only logs. Clients can
choose to trust certiﬁcates only when they are accompanied
by proofs that they have been publicly logged.
The full deployment of CT is a dramatic change to the
HTTPS ecosystem. Eventually, to achieve the full security
properties of CT, web browsers will enforce CT for all publicly
trusted certiﬁcates: that is, web browsers will not accept any
public certiﬁcate unless it has been logged in CT logs. Some
browsers enforce CT partially, but none fully enforces CT for
all certiﬁcates yet. In practice, browsers would not roll out
full CT enforcement all at once, for fear of causing widespread
breakage. Users would see certiﬁcate warnings on any website
that did not properly implement CT. Frequent warnings can
cause warning fatigue and get in the way of users doing
important tasks on the web [2], [3].
In this paper, we explore whether CT’s deployment has been
successful so far. Have browsers, CAs, and websites deployed
it with low error rates for users? What has contributed to CT’s
successes and failures, and what can the security community
learn from it? To study these questions, we measure CT adop-
tion and health from several perspectives and over time. We
ﬁnd that CT has been widely deployed, with over 60% of the
web’s HTTPS trafﬁc now supporting CT, and that CT rarely
causes warnings or breakage, even when new CT requirements
go into effect. When breakage does occur, it is often due to
bugs or misconﬁgurations in how certiﬁcate authorities (CAs)
implement CT. When users encounter these CT errors, they
engage in unsafe behaviors, such as bypassing the warning
or switching browsers rather than heed the warning’s security
advice. This underscores the need to keep the error rate low
as CT rolls out more broadly.
We attribute the low error rate and wide deployment of
CT to three main characteristics of the system. First, CT
adoption does not require individual site owners to take action;
a relatively small number of CAs can do the legwork to
deploy CT across much of the web. Second, CT enforcement
can be rolled out in stages, gradually ramping up adoption
and ﬂushing out problems Finally, web browsers are free to
determine the speciﬁcs of how they enforce CT. This ﬂexibility
mitigates many of the security and operational risks that exist
in the budding CT ecosystem.
We also identify hurdles in CT deployment
that might
present challenges for future systems. The rollout of CT has
been largely driven by a small number of major ecosystem
players, and deployment might not have been successful if
only smaller players had been invested in its success. More-
over, CT support has lagged in browsers other than Google
Chrome: CT represents a substantial investment for browser
vendors, as well as log operators and CAs. Gaining broader
adoption among browsers is crucial for CT’s success.
A. Contributions
Our primary contributions are:
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:38)(cid:78)(cid:74)(cid:77)(cid:90)(cid:1)(cid:52)(cid:85)(cid:66)(cid:83)(cid:76)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:19)(cid:24)
(cid:19)(cid:18)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
• We measure how widely CT has been adopted across
the web and explore factors that have contributed to its
successful adoption.
• We explore how often users experience CT-related break-
age and how they react to it. We ﬁnd that breakage rates
are low, and we identify aspects of CT that minimized the
negative impact. However, we also ﬁnd that users tend to
behave unsafely when faced with current CT warnings.
• Using anecdotes from large CT deployments, we identify
risks in CT that could cause disruption to end users as
CT enforcement rolls out more broadly.
• We discuss hurdles that might pose challenges for similar
systems in the future.
II. BACKGROUND
This section gives an overview of HTTPS and the web PKI,
as well as CT and its current state of deployment.
A. HTTPS and the web PKI
HTTPS encrypts and authenticates web trafﬁc to protect its
conﬁdentiality and integrity against network attackers. When
HTTPS is in use, the client performs a handshake with the
server after setting up a TCP connection. The handshake estab-
lishes an encrypted and authenticated channel over which the
client and server can exchange HTTP requests and responses.
the client validates a certiﬁcate,
which authenticates the server in the web PKI. A server owner
can obtain a certiﬁcate from any of a number of certiﬁcate
authorities (CAs), which use several validation methods to
verify the server’s identity.
During the handshake,
Clients maintain a trust store, a list of CAs that they trust.
To validate a server certiﬁcate, the client attempts to build a
chain from the provided certiﬁcate to a CA in its trust store.
The client also performs other checks, such as making sure
that the certiﬁcate is not expired.
If the client cannot validate the certiﬁcate, then the con-
nection will fail because the client cannot verify the server’s
identity. Web browsers show full-page error warnings when
they encounter a certiﬁcate error for the main resource of a
page load. When a browser cannot validate the certiﬁcate of
a subresource, such as a script or image, then it will often
simply fail to load the resource. When a subresource fails to
load, the page might appear to be partially or fully broken to
the user. For example, if a critical JavaScript library doesn’t
load, the page’s main functionality may not work.
CAs are usually trusted to issue certiﬁcates for any website.
If a single CA is compromised or malicious, the attacker can
mount man-in-the-middle attacks on a large number of high-
value websites if they can intercept trafﬁc to those websites.
We refer the reader to [4] and [5] for more detailed
background about the web PKI.
B. Certiﬁcate Transparency
CT aims to protect users from mistakenly or maliciously
issued certiﬁcates by ensuring that all certiﬁcates are logged in
publicly-auditable, append-only logs [6]. Domain owners can
monitor CT logs to discover improperly issued certiﬁcates for
their domains. Moreover, CT logs are open for public auditing
and monitoring: anyone can monitor for suspicious certiﬁcates
or CA misbehavior. When a suspicious certiﬁcate is discovered
in a CT log, the domain owner can request that the issuing
CA revoke the certiﬁcate or, in the case of a misbehaving CA,
the CA can be removed from client trust stores.
CT can be described in three parts: logging, SCT validation,
and monitoring/auditing.
Logging. Anyone can run a CT log, which is an auditable
Merkle tree of certiﬁcates. The log operator notiﬁes browsers
of the existence of the log, signaling its availability to the CT
ecosystem. Similarly, anyone can submit a certiﬁcate to a CT
log. Certiﬁcates are usually submitted by the CA shortly before
or after issuance, but certiﬁcates are also often submitted by
research scanners, web crawlers, domain owners, and others.
When a log receives a certiﬁcate, it replies with a Signed
Certiﬁcate Timestamp (SCT). An SCT is a veriﬁable promise,
signed by the log’s private key, indicating that the log commits
to incorporate the certiﬁcate in its public log.
SCT validation. SCTs are offered to clients with a certiﬁ-
cate to indicate that the certiﬁcate has been or will shortly be
publicly logged. SCTs can be delivered in three ways:
• Embedded in the certiﬁcate. With this method, a site
owner does not need to do anything to support CT besides
obtaining a certiﬁcate from a CA that embeds SCTs.
• In a TLS extension, provided as part of the HTTPS con-
nection setup. Site owners can log their own certiﬁcates
and provide SCTs using this method even if their CAs
do not support CT.
• In a stapled OCSP response, which is a statement of non-
revocation signed by a CA and delivered by the server
to the client [7]. With this method, site owners do not
have to do their own logging, but the server must support
OCSP stapling and the CA must provide SCTs in their
OCSP responses.
Web browsers maintain lists of CT logs,
identiﬁed by
public keys, that they recognize. Typically a browser will only
recognize logs that meet certain availability and correctness
requirements. When receiving a SCT via one of the above
methods, the browser validates the signature to check that
the SCT comes from one of its recognized logs. The browser
might also have a CT policy, requiring that a certain number of
SCTs or that a certain set of logs are represented, as described
further in Section II-C.
The eventual goal of CT is that no public certiﬁcates are
accepted as valid unless they are accompanied by SCTs to
prove that they are or will soon be publicly logged.
Monitoring/auditing. CT logs expose a REST API that
allows anyone to monitor the certiﬁcates that have been logged
and audit that the log is behaving properly. Today, typical
monitors and auditors include security researchers, browser
vendors, and domain owners (who monitor speciﬁcally for
suspicious certiﬁcates for their own domains). Auditors can
request an inclusion proof that the certiﬁcate represented by
a given SCT has in fact been logged. They can also request a
(cid:19)(cid:18)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
consistency proof to verify the append-only property of the log
and check that different views presented by a log are consistent
with each other. A more detailed description of monitoring and
auditing APIs can be found in [8].
C. CT deployment in browsers
The CT standardization process began in 2012, but it is
only recently beginning to see widespread support among web
browsers and websites. Web browsers cannot enforce CT all at
once for fear of breaking websites, and websites usually must
be motivated to support CT (through browser enforcement
requirements or other means) before they will deploy it.
Major web browsers are in various stages of implementing
support for CT. No web browser yet fully enforces CT by
requiring SCTs for all certiﬁcates. Mozilla Firefox has a
preliminary implementation of SCT validation for gathering
telemetry [9], but it is disabled by default. Apple (who makes
the Safari browser) has announced plans to begin enforcing
CT for certiﬁcates issued after October, 2018 [10]. Microsoft
has expressed support for CT but has not announced plans to
enforce CT in its Edge or Internet Explorer browsers [11].
In this paper, we focus on Google Chrome, which currently
has the most advanced CT implementation of major web
browsers. As of July 2018, Chrome requires CT compliance
for a subset of certiﬁcates, detailed in Section II-C2.
1) Chrome CT policy: When CT is being enforced, Chrome
requires SCTs which comply with a policy, known as the
Chrome CT policy [12]. The policy requires a certain number
of SCTs, ranging from two to ﬁve depending on the age of
the certiﬁcate and how the SCTs are delivered. The policy
also contains a log diversity clause, requiring the server to
present at least one SCT from a log operated by Google and
one operated by another entity.
By requiring multiple SCTs from diverse logs, the policy
ensures that an attacker must compromise or collude with
multiple entities to “hide” a malicious certiﬁcate. That is, the
attacker must be able to present SCTs with valid signatures
from multiple logs, yet stop all those logs from actually log-
ging the certiﬁcate. The redundancy and diversity requirements
also provide resilience in the event that Chrome removes trust
in a log due to misbehavior: certiﬁcates with SCTs from a
disqualiﬁed log may still continue to comply with the policy.
When CT compliance is required but a site fails to comply,
Chrome shows the error UI in Fig. 1.
2) Stages of enforcement in Chrome: To encourage de-
ployment without imposing widespread breakage, Chrome CT
enforcement has rolled out in several stages (Fig. 3).
Extended Validation requirement. Since early 2015,
Chrome requires compliance with the CT policy to show the
Extended Validation (EV) certiﬁcate UI. The EV UI, shown
in Fig. 2, is shown for a particular kind of certiﬁcate issued
with extra validation checks [13]. When the certiﬁcate is not
CT-compliant, Chrome removes the legal entity name and falls
back to the default UI shown for regular HTTPS certiﬁcates.
In response to this requirement, most CAs began embedding
SCTs in EV certiﬁcates. Chrome also compiled a whitelist of
Fig. 1. The Chrome UI shown when a website is required to comply with
the CT policy but fails to do so.
Fig. 2. The Chrome Extended Validation certiﬁcate UI (top) and default UI
shown for regular HTTPS certiﬁcates (bottom).
EV certiﬁcates that were logged but didn’t have embedded
SCTs. The CT requirement was waived for certiﬁcates in
this whitelist, to avoid removing the EV UI for existing EV
certiﬁcates as long as they were publicly logged.
Individual CAs. Chrome also requires CT compliance for
particular CAs that have misissued certiﬁcates in the past [14].
When CT enforcement is rolled out for a CA, Chrome gener-
ally requires CT compliance for only newly issued certiﬁcates,
to avoid breaking existing certiﬁcates.
Site opt-in. Since September 2017, Chrome allows websites
to opt
in to CT enforcement via an Expect-CT HTTP
header [15]. This feature is used by high-value websites that
want the security beneﬁts of CT even though Chrome does
not require them to be CT-compliant by default. After Chrome
observes the header, the browser remembers the opt-in for a
conﬁgurable period of time, and requires CT compliance for
connections to that website.
New certiﬁcates. Starting in late July 2018, Chrome en-
forces CT for all certiﬁcates issued after April 30, 2018 [16].
III. METHODOLOGY
To examine the adoption and breakage rate of CT, we
analyze data from several sources.
A. Chrome usage metrics
We use browser usage metrics to assess:
• CT adoption rates, by measuring how much web trafﬁc
is served with valid SCTs. Browser metrics give more
insight
into CT adoption patterns than, for example,
passive network measurements. The browser perspective
is global and further lets us discern more structure about
CT usage (for example, CT adoption on main-frame
requests versus subresources, or on HTTPS connections
versus requests).
(cid:19)(cid:18)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3. Major CT enforcement milestones in Chrome.
• End user impact, primarily by measuring the rate of
breakage that users see as a result of CT enforcement.
Chrome is a popular web browser with over two billion
installs [17]. To assess CT’s usability and adoption, we use