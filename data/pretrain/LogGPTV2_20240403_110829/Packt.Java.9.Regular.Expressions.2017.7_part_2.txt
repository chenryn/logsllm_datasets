modules, we will go to Files | Settings | Project Name | Project Interpreter."
Warnings or important notes appear like this.
Tips and tricks appear like this.
[ 3 ]
Preface
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book-what you liked or disliked. Reader feedback is important for us as it helps us develop
titles that you will really get the most out of.
To send us general feedback, simply e-mail PI:EMAIL, and mention the
book's title in the subject of your message. If there is a topic that you have expertise in and
you are interested in either writing or contributing to a book, see our author guide at
www.packtpub.com/authors.
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.
Downloading the example code
You can download the example code files for this book from your account at http://www.p
acktpub.com. If you purchased this book elsewhere, you can visit http://www.packtpub.c
om/supportand register to have the files e-mailed directly to you.
You can download the code files by following these steps:
1. Log in or register to our website using your e-mail address and password.
2. Hover the mouse pointer on the SUPPORT tab at the top.
3. Click on Code Downloads & Errata.
4. Enter the name of the book in the Search box.
5. Select the book for which you're looking to download the code files.
6. Choose from the drop-down menu where you purchased this book from.
7. Click on Code Download.
Once the file is downloaded, please make sure that you unzip or extract the folder using the
latest version of:
WinRAR / 7-Zip for Windows
Zipeg / iZip / UnRarX for Mac
7-Zip / PeaZip for Linux
[ 4 ]
Preface
The code bundle for the book is also hosted on GitHub at https://github.com/PacktPubl
ishing/Java-9-Regular-Expressions. We also have other code bundles from our rich
catalog of books and videos available at https://github.com/PacktPublishing/. Check
them out!
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do
happen. If you find a mistake in one of our books-maybe a mistake in the text or the code-
we would be grateful if you could report this to us. By doing so, you can save other readers
from frustration and help us improve subsequent versions of this book. If you find any
errata, please report them by visiting http://www.packtpub.com/submit-errata, selecting
your book, clicking on the Errata Submission Form link, and entering the details of your
errata. Once your errata are verified, your submission will be accepted and the errata will
be uploaded to our website or added to any list of existing errata under the Errata section of
that title.
To view the previously submitted errata, go to https://www.packtpub.com/books/conten
t/supportand enter the name of the book in the search field. The required information will
appear under the Errata section.
Piracy
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At
Packt, we take the protection of our copyright and licenses very seriously. If you come
across any illegal copies of our works in any form on the Internet, please provide us with
the location address or website name immediately so that we can pursue a remedy.
Please contact us at PI:EMAIL with a link to the suspected pirated
material.
We appreciate your help in protecting our authors and our ability to bring you valuable
content.
Questions
If you have a problem with any aspect of this book, you can contact us at
PI:EMAIL, and we will do our best to address the problem.
[ 5 ]
1
Getting Started with Regular
Expressions
In this chapter, you will be introduced to regular expressions (or regex in short). You will
learn about some real-world problems that can be solved by using regular expressions and
the basic building blocks of regular expressions.
We will be covering the following topics in this chapter:
Introduction to regular expressions
A brief history of regular expressions
The various flavors of regular expressions
What type of problems need regular expressions to solve
The basic rules of writing regular expressions
Standard regular expression meta characters
Basic regular expression examples
Introduction to regular expressions
Regular expression (or in short regex) is a very useful tool that is used to describe a search
pattern for matching the text. Regex is nothing but a sequence of some characters that
defines a search pattern. Regex is used for parsing, filtering, validating, and extracting
meaningful information from large text, such as logs and output generated from other
programs.
Getting Started with Regular Expressions
We find regular expressions in day-to-day use on many websites. For example, while
searching for your favorite recipe on search engines, while filling up forms and entering
data such as username and passwords, and so on. While setting up a password on many
sites, we encounter password validation errors, such as password must contain one digit or
at least one uppercase letter or at least one special character, and so on. All these checks can
be done using regular expressions. A few more typical examples of regular expressions are
validating phone numbers or validating postal/zip/pin codes.
A bit of history of regular expressions
Renowned mathematician Stephen Kleene built a model in the year 1956 using finite
automata for simple algebra. He described regular languages using his mathematical
notation called regular sets. Computer programmers started using regular expressions in the
1970s when the Unix operating system and some of its text editors and text processing
utilities such as ed, sed, emacs, lex, vi, grep, awk, and so on were built. Regular expressions
gained more popularity with the arrival of Perl and Tcl scripting languages in the 1980s and
1990s. Since then, all the popular programming languages, such as Java, Python, Ruby, R,
PHP, and .NET have built very good support of regular expressions.
Various flavors of regular expressions
All the programming and scripting languages have built-in support for regular expressions
these days. The basic rules to define and execute regular expressions are pretty much the
same across all the languages. However, these regex implementations have their own
flavors that differ from each other at the advanced level. We will cover regular expressions
using Java in this book.
Some of the popular flavors of regular expressions are as follows:
.NET
Java
Perl
PCRE (PHP)
JavaScript
VBScript
Python
R
Ruby
[ 7 ]
Getting Started with Regular Expressions
std::regex
boost::regex
Basic Regular Expressions (BRE) - used by Unix utilities ed, vi, sed, grep, and so
on
Extended Regular Expressions (ERE) - used by Unix utilities sed, grep, awk, and
so on
What type of problems need regular expressions
to solve
Some programmers wonder why they even need to learn regular expressions. Here are
some use cases:
While searching for some text at times, there are cases where we don't know the
value of the text upfront. We just know some rules or patterns of the text. For
example, searching for a MAC address in a log message, searching for IP address
in a web server access log, or searching for a 10-digit mobile number that may be
optionally preceded by 0 or +.
Sometimes, the length of the text we are trying to extract is unknown, for
example, searching URLs that start with http:// or https:// in a CSV file.
Sometimes, we need to split a given text on delimiters of a variable type and
length and generate tokens.
Sometimes, we need to extract text that falls between two or more search
patterns.
Often, we need to validate the various forms of user inputs, such as bank account
number, passwords, usernames, credit card info, phone number, date of birth,
and so on.
There are situations where you only want to capture all the repeated words from
a line.
To convert input text into certain predefined formats, such as inserting a comma
after every three digits or removing commas inside parentheses only.
To do a global search replace while skipping all the escaped characters.
[ 8 ]
Getting Started with Regular Expressions
The basic rules of regular expressions
Many of you are familiar with wild cards (in the Unix world, it is called glob pattern)
matching of text. Here:
? matches any single character
* matches any sequence of characters
[abc] matches any one character inside square brackets, so it will match a, b, or
c
The regular expression pattern goes many steps farther than wild cards, where one can set
many rules in a regex pattern, such as the following:
Match a character or a group of characters optionally (0 or 1 times)
Use quantifiers in regex patterns to match variable length text
Use a character class to match one of the listed characters or match a range of
characters
Use a negated character class to match any character except those matched by the
character class
Match only certain character categories, such as match only digits, only upper
case letters, or only punctuation characters
Match a character or a group of characters for a specific length.
Match a length range, such as allow only six to 10 digits in the input or match an
input of a minimum of eight characters
Use Boolean "OR" in an alternation to match one of the few alternative options
Use groups in regex patterns and capture substrings that we want to extract or
replace from a given input
Alter the behavior of matching by keeping it greedy (eager), lazy (reluctant), or
possessive
Use back references and forward references of groups that we capture
Use zero-width assertions such as the following:
Start and end anchors
Word boundary
Lookahead and lookbehind assertions
Start a match from the end of a previous match
For example, in a regex to match a or b we can use the following alternation:
a|b
[ 9 ]
Getting Started with Regular Expressions
To match one or more instances of the digit 5, we can use the following:
5+
To match any substring that starts with p and ends with w, we can use the following:
p.*w
Constructs of the standard regular expression
and meta characters
Let's get familiar with core constructs of regular expressions and some reserve meta
characters that have a special meaning in regular expressions. We shall cover these
constructs in detail in the coming chapters:
Symbol Meaning Example
. (dot or period) Matches any character other than Matches #, @, A, f, 5, or .
newline.
* (asterisk) * matches zero or more occurrences m* matches 0 or more occurrences
of the preceding character or group. of the letter m.
+ (plus) + matches one or more occurrences of m+ matches one or more
the preceding element. occurrences of the letter m.
? (question mark) ? means optional match. It is used to nm? means match n or nm, as m is
match zero or one occurrence of the an optional match here.
preceding element. It is also used for
lazy matching (which will be covered
in the coming chapters).
| (pipe) | means alternation. It is used to m|n|p means match either the
match one of the elements separated letter m or the letter n or the letter
by | p
^ (cap) ^ is called anchor, that matches start ^m matches m only when it is the
of the line first character of the string that we
are testing against the regular
expression. Also, note that you do
not use ^ in the middle of a
regular expression.
[ 10 ]
Getting Started with Regular Expressions
$ (dollar) $ is called anchor that matches line m$ matches m only at line end.
end.
\b (backslash Alphabets, numbers, and underscore \bjava\b matches the word,
followed by the are considered word characters. \b java . So, it will not match
letter b) asserts word boundary, which is the javascript since the word,
position just before and after a word.
javascript, will fail to assert
\b after java in the regex.
\B (backslash \B asserts true where \b doesn't, that For the input text, abc,
followed by is, between two word characters. \B will be asserted at two places:
uppercase B) • Between a and b.
• Between b and c.
(...) a sub-pattern This is for grouping a part of text that m(ab)*t matches m, followed by
inside round can be used to capture a certain zero or more occurrences of the
parentheses substring or for setting precedence. substring, ab, followed by t.
{min,max} A quantifier range to match the mp{2,4} matches m followed 2 to
preceding element between the 4 occurrences of the letter p.
minimum and the maximum
number.
[...] This is called a character class. [A-Z] matches any uppercase
English alphabet.
\d (backslash This will match any digit. \d matches any digit in the 0-9
followed by the range.
letter d)
\D (backslash This matches any character that is not \D matches a, $, or _.
followed by a digit.
uppercase D)
\s (backslash Matches any whitespace, including \s matches [ \t\n].
followed by the tab, space, or newline.
letter s)
\S (backslash Matches any non-whitespace. \S matches the opposite of \s
followed by
uppercase S)
\w (backslash Matches any word character that \w will match [a-zA-Z0-9_], so
followed by the means all alphanumeric characters or it will match any of these strings:
letter w) underscore. "abc", "a123", or "pq_12_ABC"
[ 11 ]
Getting Started with Regular Expressions
\W (backslash Matches any non-word character, It will match any of these strings:
followed by the including whitespaces. In regex, any "+/=", "$", or " !~"
letter W) character that is not matched by \w
can be matched using \W.
Some basic regular expression examples
Let's look at some basic examples of regular expressions:
ab*c
This will match a, followed by zero or more b, followed by c.
ab+c
This will match a followed by one or more b, followed by c.
ab?c
This will match a followed by zero or one b, followed by c. Thus, it will match both abc or
ac.
^abc$
This will match abc in a line, and the line must not have anything other than the string abc
due to the use of the start and end anchors on either side of the regex.
a(bc)*z
This will match a, followed by zero or more occurrences of the string bc, followed by z.
Thus, it will match the following strings: az, abcz, abcbcz, abcbcbcz, and so on.
ab{1,3}c
This will match a, followed by one to three occurrences of b, followed by c. Thus, it will
match following strings: abc, abbc, and abbbc.
red|blue
This will match either the string red or the string blue.
\b(cat|dog)\b
[ 12 ]
Getting Started with Regular Expressions
This will match either the string cat or the string dog, ensuring both cat and dog must be
complete words; thus, it will fail the match if the input is cats or dogs.
[0-9]
This is a character class with a character range. The preceding example will match a digit
between 0 and 9.
[a-zA-Z0-9]
This is a character class with a character range. The preceding example will match any
alpha-numeric character.
^\d+$
This regex will match an input containing only one or more digits.
^\d{4,8}$
This regex will allow an input containing four to eight digits only. For example, 1234,
12345, 123456, and 12345678 are valid inputs.
^\d\D\d$
This regex not only allows only one digit at the start and end but also enforces that between
these two digits there must be one non-digit character. For example, 1-5, 3:8, 8X2, and so
on are valid inputs.
^\d+\.\d+$
This regex matches a floating point number. For example, 1.23, 1548.567, and
7876554.344 are valid inputs.
.+
This matches any character one or more times. For example, qwqewe, 12233, or f5^h_=!bg
are all valid inputs:
^\w+\s+\w+$
This matches a word, followed by one or more whitespaces, followed by another word in an
input. For example, hello word, John Smith, and United Kingdom will be matched
using this regex.
[ 13 ]
Getting Started with Regular Expressions
Engine is a term often used for an underlying module that evaluates the
provided regular expression and matches the input string.
Eager matching
At this point, it is important to understand one important behavior of regular expression
engines, called eagerness. A regular expression engine performs a match operation from left
to right in an input string. While matching a regex pattern against the input string, the regex
engine moves from left to right and is always eager to complete a match, even though there
are other alternative ways in the regular expression to complete the match. Once a substring
is matched, it stops proceeding further and returns the match. Only when a character
position fails to match all the possible permutations of the regular expression, then the
regex engine moves character by character to attempt a match at the next position in the
input string. While evaluating a regex pattern, the regex engine may move backwards
(backtrack) one position at a time to attempt matching.
The effect of eager matching on regular expression
alternation
This regular expression engine behavior may return unexpected matches in alternation if
alternations are not ordered carefully in the regex pattern.
Take an example of this regex pattern, which matches the strings white or whitewash:
white|whitewash
While applying this regex against an input of whitewash, the regex engine finds that the first
alternative white matches the white substring of the input string whitewash, hence, the regex
engine stops proceeding further and returns the match as white.
Note that our regex pattern has a better second alternative as whitewash, but due to the
regex engine's eagerness to complete and return the match, the first alternative is returned
as a match and the second alternative is ignored.
However, consider swapping the positions of the third and fourth alternatives in our regex
pattern to make it as follows:
whitewash|white
[ 14 ]