## PostgreSQL 并行计算解说 之21 - parallel partition table wise agg              
### 作者                                                                                      
digoal                                                                                      
### 日期                                                                                      
2019-03-17                                                                                      
### 标签                                                                                      
PostgreSQL , cpu 并行 , smp 并行 , 并行计算 , gpu 并行 , 并行过程支持                                             
----                                                                                
## 背景                                                
PostgreSQL 11 优化器已经支持了非常多场合的并行。简单估计，已支持27余种场景的并行计算。                                            
```                                            
parallel seq scan                                            
parallel index scan                                            
parallel index only scan                                            
parallel bitmap scan                                            
parallel filter                                            
parallel hash agg                                        
parallel group agg                                        
parallel cte                                            
parallel subquery                                            
parallel create table                                            
parallel create index                                            
parallel select into                                            
parallel CREATE MATERIALIZED VIEW                                            
parallel 排序 : gather merge                                             
parallel nestloop join                                            
parallel hash join                                            
parallel merge join                                            
parallel 自定义并行聚合                                            
parallel 自定义并行UDF                                            
parallel append                                            
parallel union                                            
parallel fdw table scan                                            
parallel partition join                                            
parallel partition agg                                            
parallel gather                                    
parallel gather merge                            
parallel rc 并行                                            
parallel rr 并行                                            
parallel GPU 并行                                            
parallel unlogged table          
lead parallel      
```                                            
接下来进行一一介绍。                                            
关键知识请先自行了解：                                            
1、优化器自动并行度算法 CBO                                             
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                              
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                              
## parallel partition table wise agg                    
并行分区表智能聚合（类似MPP）           
当分区表聚合操作的分组字段为分区字段时，PostgreSQL优化器会选择并行分区智能聚合。        
[《PostgreSQL 11 preview - 分区表智能并行聚合、分组计算(已类似MPP架构，性能暴增)》](../201803/20180322_07.md)        
[《PostgreSQL 11 preview - 分区表智能并行JOIN (已类似MPP架构，性能暴增)》](../201802/20180202_02.md)        
数据量：10亿                   
场景 | 数据量 | 关闭并行 | 开启并行 | 并行度 | 开启并行性能提升倍数                                          
---|---|---|---|---|---                                                      
parallel partition table wise agg | 10亿 | 191 秒 | 8 秒 | 24 | 23.9 倍            
例子，24个分区的HASH分区表。    
```    
CREATE unlogged TABLE ccc (      
    order_id     bigint not null,      
    cust_id      bigint not null,      
    status       text      
) PARTITION BY HASH (cust_id);      
do language plpgsql $$    
declare    
begin    
  for i in 0..23 loop    
    execute format('CREATE unlogged TABLE %s%s PARTITION OF %s FOR VALUES WITH (MODULUS %s, REMAINDER %s)', 'ccc', i, 'ccc', 24, i);     
    execute format('alter table %s%s set(parallel_workers =64)', 'ccc',i);    
  end loop;    
end;    
$$;    
postgres=# \d ccc    
            Unlogged table "public.ccc"    
  Column  |  Type  | Collation | Nullable | Default     
----------+--------+-----------+----------+---------    
 order_id | bigint |           | not null |     
 cust_id  | bigint |           | not null |     
 status   | text   |           |          |     
Partition key: HASH (cust_id)    
Number of partitions: 24 (Use \d+ to list them.)    
```    
写入10亿数据    
```    
insert into ccc select i, random()*960 from generate_series(1,1000000000) t(i);    
vacuum (analyze,verbose) ccc;    
```    
```      
postgres=# show max_worker_processes ;      
 max_worker_processes       
----------------------      
 128      
(1 row)      
postgres=# set min_parallel_table_scan_size =0;      
postgres=# set min_parallel_index_scan_size =0;      
postgres=# set parallel_tuple_cost =0;      
postgres=# set parallel_setup_cost =0;      
postgres=# set max_parallel_workers=128;      
postgres=# set max_parallel_workers_per_gather =24;      
postgres=# set enable_parallel_hash =on;      
postgres=# set enable_parallel_append =off;      
postgres=# set enable_partitionwise_aggregate =on;      
postgres=# set work_mem ='128MB';      
```      
### 1、关闭并行，耗时： 191 秒。                                          
```         
postgres=# set max_parallel_workers_per_gather =0;      
postgres=# set enable_parallel_append =off;      
postgres=# set enable_partitionwise_aggregate =off;      
postgres=# explain select cust_id,count(*) from ccc group by cust_id;     
                                 QUERY PLAN                                      
-----------------------------------------------------------------------------    
 HashAggregate  (cost=25405409.32..25405418.93 rows=961 width=16)    
   Group Key: ccc0.cust_id    
   ->  Append  (cost=0.00..20405411.99 rows=999999466 width=8)    
         ->  Seq Scan on ccc0  (cost=0.00..641839.96 rows=41663296 width=8)    
         ->  Seq Scan on ccc1  (cost=0.00..625842.88 rows=40624888 width=8)    
         ->  Seq Scan on ccc2  (cost=0.00..722092.24 rows=46872124 width=8)    
         ->  Seq Scan on ccc3  (cost=0.00..545581.20 rows=35414920 width=8)    
         ->  Seq Scan on ccc4  (cost=0.00..657705.92 rows=42693192 width=8)    
         ->  Seq Scan on ccc5  (cost=0.00..609843.00 rows=39586300 width=8)    
         ->  Seq Scan on ccc6  (cost=0.00..625934.32 rows=40630732 width=8)    
         ->  Seq Scan on ccc7  (cost=0.00..673876.80 rows=43742880 width=8)    
         ->  Seq Scan on ccc8  (cost=0.00..601729.04 rows=39059604 width=8)    
         ->  Seq Scan on ccc9  (cost=0.00..609919.96 rows=39591296 width=8)    
         ->  Seq Scan on ccc10  (cost=0.00..674124.76 rows=43758976 width=8)    
         ->  Seq Scan on ccc11  (cost=0.00..529544.24 rows=34373924 width=8)    
         ->  Seq Scan on ccc12  (cost=0.00..818443.04 rows=53127004 width=8)    
         ->  Seq Scan on ccc13  (cost=0.00..674104.80 rows=43757680 width=8)    
         ->  Seq Scan on ccc14  (cost=0.00..786195.28 rows=51033728 width=8)    
         ->  Seq Scan on ccc15  (cost=0.00..609709.04 rows=39577604 width=8)    
         ->  Seq Scan on ccc16  (cost=0.00..633745.96 rows=41137896 width=8)    
         ->  Seq Scan on ccc17  (cost=0.00..673962.32 rows=43748432 width=8)    
         ->  Seq Scan on ccc18  (cost=0.00..802380.08 rows=52083808 width=8)    
         ->  Seq Scan on ccc19  (cost=0.00..529621.20 rows=34378920 width=8)    
         ->  Seq Scan on ccc20  (cost=0.00..642042.32 rows=41676432 width=8)    
         ->  Seq Scan on ccc21  (cost=0.00..401251.50 rows=26046150 width=8)    
         ->  Seq Scan on ccc22  (cost=0.00..673891.04 rows=43743804 width=8)    
         ->  Seq Scan on ccc23  (cost=0.00..642033.76 rows=41675876 width=8)    
(27 rows)    
postgres=# select cust_id,count(*) from ccc group by cust_id;     
 cust_id |  count      
---------+---------    
     652 | 1041702    
     273 | 1041730    
      51 | 1043333    
     951 | 1041738    
      70 | 1042693    
     839 | 1042059    
     350 | 1040677    
     539 | 1042402    
     758 | 1042199    
     874 | 1043176    
     278 | 1041664    
     946 | 1041442    