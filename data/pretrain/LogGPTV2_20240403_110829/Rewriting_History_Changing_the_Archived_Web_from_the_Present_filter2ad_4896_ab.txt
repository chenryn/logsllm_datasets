for the need to lower the difficulty of using archival material as
evidence [24]. Others have advised lawyers on best practices such
as employing experts to evaluate the technical limitations of the
archive [40]. These articles discuss only non-adversarial factors,
while we focus on the technical aspects of adversarial manipulation
rather than the legal aspects of incidental inaccuracies.
In 2007, Fagan raised the possibility of “E-Evidence Tampering”,
noting that archival infrastructure may be compromised, or that an
archived website might be cached or archived in a compromised
state [22]. Our work is different in that we consider less privileged
attackers, who do not compromise the archive.
2.4 Technical Work on or with Web Archives
Computer scientists have used the Wayback Machine in research:
Nikiforakis et al. measured longitudinal trends in Javascript in-
clusion from 2001 to 2010 [35]; Soska and Christin used archival
data to develop and evaluate a method for determining which web-
sites would become malicious over time [45]; Lerner et al. studied
third-party web tracking using archival data [10]; and Hackett et al.
studied the evolution of website accessibility from 1997 to 2002 [25].
Others have studied the (non-malicious) incompleteness or in-
consistency of web archives (e.g., [13, 17, 31, 34]). We find in our
work that the technical limitations of archives that lead to accidental
incompleteness can be leveraged intentionally by adversaries.
3 THREAT MODEL
In our threat model, we consider attacks in which clients (both
people and automated systems) browsing archival material are
maliciously caused to see content that does not accurately reflect the
the web of the past. Critically, we show that this is possible without
requiring attacks to be launched by the archive itself, and without
compromising website publisher or archival servers. Instead, the
vulnerabilities which enable our attacks involve entirely ordinary
interaction with archives, such as hosting content on domains and
servers the attacker rightfully owns and requesting that the archive
capture specific URLs.
3Patents must be original to be valid, and prior art is information published prior to a
patent which might be relevant to the patent’s claims of originality[5].
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1743time-of-access, rather than something which accurately reflects the
site’s appearance at time-of-archive.
We refer to the time at which an attacker takes an action to de-
ploy an attack as the time-of-attack. Since our attacks sometimes
require multiple actions by the attacker at different times, there
may be multiple times-of-attack for a scenario. The time-of-attack
may be either before or after time-of-archive, depending on the
attack, and time-of-attack may precede or coincide with payload
delivery to the client at time-of-access.
3.2 Attacker’s Goals
Our attacks aim to change what clients see when they view archived
snapshots — that is, to cause the client browser to display snapshots
incorrectly, rendering content and exhibiting behavior (i.e., running
code) which do not reflect the original website nor (in the case
of benign archival errors) the website as it had originally been
preserved in the archive.
We observe that attackers may have incentives to modify both
their own and others’ content in the archive. For example, if Alice
accuses Bob of publishing slander on his website, then Bob may wish
to retroactively remove the slander from the archive of his website.
Alternatively, Alice (or an uninvolved party, such as Mallory) may
frame Bob by retroactively adding slander to snapshots of his site.
Attackers may be motivated by a wide variety of personal, political,
legal, and financial motivations.
We emphasize that although our threat model encompasses at-
tacks that add material to the archive’s databases, the adversary
must only do so legitimately, not by compromising those databases.
That is, some attacks involve archiving new websites that we create
as part of an attack.
By default, successful attacks are visible to any client who views
that archived resource. However, attackers could also customise
their attacks for different clients. For example, attackers might
identify clients via techniques like browser fingerprinting [20, 23,
33, 36], or by using tracking cookies [42]. Though we note such
customization is possible, we do not explore it further in this paper.
3.3 Possible Attackers
Under our threat model, the attacker owns — at time-of-attack —
the domain from which the attack is mounted. For a given victim
snapshot, the attacker may either be the owner of the first-party
domain (e.g., example.com) or the owner of a third-party domain
on that page (e.g., ads.com, serving an ad embedded inside example.
com).
In a third-party attack, an attacker who controls ads.com (either
at time-of-archive or in the future) may wish to modify the snapshot
of example.com. To motivate a first-party attack — example.com
modifying itself — we note that the ownership of domains may
change over time. Thus, for example, a different entity may own
example.com now than in the past, and that new owner may now
wish to modify past archives of example.com. The present first-
party owner might also be the same as the past owner, but seeking
to alter its own past archives.
Thus, depending on the attack, an attacker must be able to serve
content from one of the first- or third-party domains that make
Figure 2: A timeline depicting the (1) lifecycle of archive
snapshots (top of figure) and (2) events that make up attacks
against the integrity of those snapshots (bottom). The left-
hand possible Times-of-Attack, before Time-of-Archive, cor-
respond to Attacks #2 and #3, which require attacker fore-
sight. The right-hand possible Time-of-Attack is after Time-
of-Archive (but still before Time-of-Access), for Attacks #1
and #4, which do not require attacker foresight. Attacks are
described in detail in Section 5.
We note that the vulnerabilities we consider can also cause non-
malicious inaccuracies in the archive. These non-malicious inaccu-
racies have been discussed in other work (e.g., [11, 12, 44]), and our
defenses (Section 7) might incidentally mitigate them. However,
we focus on the ways in which our vulnerabilities can be used
intentionally by malicious actors.
3.1 Definitions
We refer to a single capture of a web page as a snapshot or archival
snapshot. For example, http://web.archive.org/web/20000101000000/
http://example.com is a snapshot of http://example.com which aims
to represent its appearance as of 1 January, 2000. We will use the
terms time-of-archive, timestamp, or archival timestamp to
refer to the time at which a particular snapshot was taken. Prior to
time-of-archive, we may refer to time-of-publication, when the
first-party website chose what content to include in its website and
published it on the web. We may use these terms to refer to the
domains involved in an attack and their owners at different times.
For example, we may refer to the time-of-archive first-party, by
which we mean “the entity which owned example.com at the time
that the snapshot in question was archived,” noting that ownership
may change over time. Figure 2 depicts the relationship of different
times in the lifecycle of a snapshot.
We will refer to as clients the end-users and devices that use
the archival front-end to view snapshots, and who may rely upon
those snapshots for information about the past. For example, a
client may wish to refer to the content of http://example.com in
2000 in the course of a legal argument. To do so, they would use an
ordinary browser (the client browser) to access the snapshot “http:
//web.archive.org/web/20000101000000/http://example.com”. We
will refer to the time at which a client accesses a snapshot as the
time-of-access. For example, if a client examines the past contents
of example.com on 19 May 2017, then 19 May is the time-of-access
in this scenario. If an attack has been made against that snapshot,
then the client may see a modified version of the snapshot at the
Time-of- Archive Time-of- Access Possible  Times-of-Attack (#1, #4) Possible Times-of-Attack  (#2, #3) Archive/ User  Events Malicious Events Page & subresources  saved in archive database Client browser renders snapshot; client may view incorrect content due to attack Time-of- Publication Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1744up the target snapshot, either at time-of-archive and/or at time-of-
access. To meet this criterion, the attacker may either already own
relevant domains, or they might purchase domains specifically to
perform these attacks. They might also be able to hijack domains
illicitly, e.g., through DNS poisoning. The means by which the
attacker gains the ability to publish content from the domain of the
vulnerable resource is orthogonal to the discussions of this paper.
4 ANALYZING THE WAYBACK MACHINE
FOR VULNERABILITIES
We analyzed the Wayback Machine, surfacing three types of vul-
nerabilities which emerge from its design. Those types of vulnera-
bilities are Archive-Escapes, Same-Origin Escapes, and Never-
Archived Resources, detailed below.
4.1 Archive-Escapes
To deliver snapshot content, the Wayback Machine plays the role
of all web servers which were originally involved in serving the
archived site. That is, it serves archived versions of all first- and
third-party content the client requests while rendering its view of
the snapshot. To cause the client to correctly request all these re-
sources from the archive, rather than the live web, the archive
performs URL rewriting, modifying URLs in archived HTML,
Javascript, and CSS to make them refer to archived versions of
the same URL. For example, the archive may find the URL http:
//example.com/script.js in some HTML at time-of-archive, and
rewrite the HTML so that the URL instead reads http://web.archive.
org/web//example.com/script.js, where the timestamp
of the archived script matches the timestamp of the archived HTML.
URL rewriting is not perfect, primarily because it does not ac-
count for client-side dynamically generated URLs. We find that
when Javascript computes subresource URLs using computation as
simple as string concatenation, then URL rewriting fails and clients
end up making requests to the live web to load those subresources.
For example, if URL rewriting fails, the client might accidentally
load a live copy of example.com/script.js instead of its archived ver-
sion. These live web subresources are incorporated into the client’s
rendered view of the snapshot, mixing live and archived content
and behavior.
We refer to the request and use of live-web resources as part of a
snapshot view as an Archive-Escape, the first of our classes of vul-
nerabilities. We refer to the domain contacted for live resources as
the archive-escape destination, such that in the example above,
example.com is an archive-escape destination. Whenever there is
an archive-escape, the destination of that escape becomes a poten-
tial attacker, since that domain can now serve a malicious payload
on the live web at the escaping URL. For example, the live copy
of example.com/script.js can be replaced with a malicious payload.
Note that the archive-escape destination may be the same domain
as that of the victim snapshot.
4.2 Same-Origin Escapes
We discovered a second class of vulnerability, related to the fact
that archives take on the role of serving both content from all of the
domains which were involved in a snapshot at time-of-publication.
As background, browsers prevent third-parties inside s
from accessing or modifying data from the main page. This policy
of preventing cross-origin access is called the Same-Origin Policy.
So, for example, if http://example.com embeds http://ads.com in
a frame, code from ads.com (running inside the frame) will be
blocked by the browser from reading or influencing any parts of
the page outside of its frame. This allow sites to safely embed
content from third-parties within the context of their own pages.
The http://ads.com attacker might embed malicious code which
attempts to modify the page, but it will be blocked from doing so
by the Same-Origin Policy.
The Same-Origin Policy, however, is ineffective in the archival
context. Since all archived resources are loaded from the archive,
this means that all resources making up a snapshot, including both
first- and third-party resources, are loaded by the client from a
single domain, archive.org. When this occurs, a vulnerability arises:
code from the embedded frame now executes without the isolation
provided on the live web by the Same-Origin Policy, allowing it
to reach outside of its frame to modify any aspect of the main
page. This allows an attacker to embed an attack payload inside of
an , where it will become active when preserved by the
archive and served to clients, modifying the client’s view of the
containing snapshot.
4.3 Never-Archived Resources and
Nearest-Neighbor Timestamp Matching
Our third class of vulnerability arises from the interaction of two
properties of the Wayback Machine: its incompleteness, and its
nearest-neighbor timestamp matching.
First, we discuss incompleteness. Many pages in the Wayback
Machine include resources which the archive has never success-
fully captured. There are a variety of reasons why this might occur,
including archival crawler errors or a partial unavailability of the
publisher’s web server at time-of-archive. For example, a snap-
shot’s HTML might include an image, but that image has never
been saved in the archive’s database. When the client asks for
a never-archived resource, the archive front-end responds with
an HTTP X-Archive-Wayback-Runtime-Error header with value
ResourceNotInArchiveException, and error code 404. Our mea-
surements (Section 6) show that never-archived resources arise
quite commonly.
Second, we discuss the archive front-end’s nearest-neighbor
timestamp matching policy. Imagine that a client requests an
archived resource R at a timestamp T , and that the archive’s data-
base contains captures of R, but only with timestamps (cid:44) T . When
this happens, the archive will find the capture of R with timestamp
as close as possible to T , and redirect the client to that version.
For example, imagine a client that requests to visit a March 2005
snapshot of example.com. If example.com was never captured in
March of 2005, but was captured in April, then the archive would
redirect the browser (302 FOUND) to the April timestamp.
In non-malicious situations, this “nearest-neighbor” behavior
allows clients to view a more complete picture of the past in the
case that a snapshot’s subresources were not captured at the exact
moment the snapshot was. However, there is no apparent limit to
the time delta permitted by nearest-neighbor timestamp matching.
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1745Thus it is possible, for example, to request a resource from 1996
and be redirected to a capture of that resource from 2016, if no
other closer timestamp exists. We refer to instances where client
browsers are redirected to timestamps very far in time from the
original page as anachronisms.
An attacker who owns the domain of a never-archive resource
can abuse these observations by inserting a malicious payload as
the anachronistic capture of that missing resource, which will be
served to clients due to nearest-neighbor matching.
4.4 Generality
We emphasize that while we analyzed these vulnerabilities in the
specific context of the Wayback Machine, our insights could form
the intellectual basis for developing similar attacks to manipulate
other web archive systems. These attacks, and the ideas behind
them, are general due to the sharing of both (a) software and (b) de-