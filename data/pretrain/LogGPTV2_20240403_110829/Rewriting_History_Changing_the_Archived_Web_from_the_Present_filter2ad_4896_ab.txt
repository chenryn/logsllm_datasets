### 1. Introduction to Archival Material as Evidence

To reduce the difficulty of using archival material as evidence, some researchers have suggested best practices such as employing experts to evaluate the technical limitations of the archive [40]. These articles primarily focus on non-adversarial factors. In contrast, our work emphasizes the technical aspects of adversarial manipulation rather than the legal implications of incidental inaccuracies.

In 2007, Fagan highlighted the possibility of "E-Evidence Tampering," noting that archival infrastructure could be compromised or that an archived website might be cached in a compromised state [22]. Our research differs in that we consider less privileged attackers who do not compromise the archive itself.

### 2. Technical Work on Web Archives

Computer scientists have utilized the Wayback Machine for various research purposes. For instance, Nikiforakis et al. analyzed longitudinal trends in JavaScript inclusion from 2001 to 2010 [35], while Soska and Christin used archival data to develop and evaluate methods for predicting which websites would become malicious over time [45]. Lerner et al. studied third-party web tracking using archival data [10], and Hackett et al. examined the evolution of website accessibility from 1997 to 2002 [25].

Other studies have focused on the (non-malicious) incompleteness or inconsistency of web archives [13, 17, 31, 34]. Our work reveals that the technical limitations leading to accidental incompleteness can be exploited by adversaries.

### 3. Threat Model

In our threat model, we consider attacks where clients (both individuals and automated systems) browsing archival material are maliciously caused to see content that does not accurately reflect the historical web. Importantly, we demonstrate that this is possible without requiring the archive itself to launch the attack or compromising the website publisher or archival servers. Instead, the vulnerabilities enabling these attacks involve ordinary interactions with archives, such as hosting content on domains and servers owned by the attacker and requesting the archive to capture specific URLs.

#### 3.1 Definitions

- **Snapshot or Archival Snapshot**: A single capture of a web page, e.g., `http://web.archive.org/web/20000101000000/http://example.com` represents the appearance of `http://example.com` as of January 1, 2000.
- **Time-of-Archive, Timestamp, or Archival Timestamp**: The time at which a particular snapshot was taken.
- **Time-of-Publication**: The time when the first-party website published its content.
- **Client**: End-users and devices that use the archival front-end to view snapshots.
- **Time-of-Access**: The time at which a client accesses a snapshot.

#### 3.2 Attackerâ€™s Goals

Our attacks aim to alter what clients see when they view archived snapshots, causing the client browser to display incorrect content and behavior that do not reflect the original website or the preserved version. Attackers may have incentives to modify both their own and others' content in the archive. For example, if Alice accuses Bob of publishing slander on his website, Bob may wish to retroactively remove the slander from the archive. Conversely, Alice or a third party, like Mallory, might frame Bob by adding slander to the snapshots of his site. Motivations can include personal, political, legal, and financial reasons.

#### 3.3 Possible Attackers

Under our threat model, the attacker owns the domain from which the attack is launched at the time of the attack. For a given victim snapshot, the attacker may be the owner of the first-party domain (e.g., `example.com`) or a third-party domain (e.g., `ads.com` embedded in `example.com`). In a third-party attack, the attacker controls `ads.com` and modifies the snapshot of `example.com`. In a first-party attack, the ownership of `example.com` may have changed over time, allowing the new owner to modify past archives.

### 4. Analyzing the Wayback Machine for Vulnerabilities

We identified three types of vulnerabilities in the Wayback Machine: Archive-Escapes, Same-Origin Escapes, and Never-Archived Resources.

#### 4.1 Archive-Escapes

The Wayback Machine serves archived versions of all first- and third-party content requested by the client. URL rewriting is used to ensure that all resources are loaded from the archive. However, this process can fail for dynamically generated URLs, leading to requests for live web subresources. We refer to this as an Archive-Escape, where the live resource can be replaced with a malicious payload.

#### 4.2 Same-Origin Escapes

The Same-Origin Policy, which prevents cross-origin access in browsers, is ineffective in the archival context. Since all archived resources are loaded from a single domain (`archive.org`), code from embedded frames can execute without the usual isolation, allowing it to modify the main page. This enables an attacker to embed a malicious payload that will be active when the archive serves the snapshot to clients.

#### 4.3 Never-Archived Resources and Nearest-Neighbor Timestamp Matching

This vulnerability arises from the interaction between the incompleteness of the Wayback Machine and its nearest-neighbor timestamp matching policy. Many pages include resources that were never captured, and the archive redirects requests to the closest available timestamp. An attacker who owns the domain of a never-archived resource can insert a malicious payload, which will be served due to the nearest-neighbor matching.

### 5. Generality

While our analysis focuses on the Wayback Machine, the insights and attack methods are generalizable to other web archive systems. The sharing of software and design principles makes these vulnerabilities applicable to a broader range of archival infrastructures.

---

This revised text is more structured, coherent, and professional, making it easier to understand and follow.