is only queried by 8.1 % of the clients. At the same time, 55 % of the clients
query for s2.symcb.com, but in terms of total queries this hostname ranks as
only the 1215th most popular. This phenomenon may be partially explained by
diﬀerences in TTL. The record for s2.symcb.com has a one hour TTL—limiting
the query frequency. Meanwhile, updatekeepalive.mcafee.com has a 1 min TTL.
Given this short TTL and that the name implies polling activity, the large num-
bers of queries from a given client is unsurprising. Thus, a model of DNS client
behavior must account for the popularity of hostnames in terms of both queries
and clients.
The heavy tails of the popularity distributions represent a large fraction of
DNS transactions. However, we cannot disregard unpopular names—even those
272
K. Schomp et al.
queried just once—because together they are responsible for the majority of DNS
activity therefore impacting the entire DNS ecosystem (e.g., cache behavior).
Co-occurrence Name Relationships: In addition to understanding popular-
ity, we next assess the relationships between names, as these have implications
on how to model client behavior. The crucial relationship between two names
that we seek to quantify is frequent querying for the pair together. We begin
with the request clusters (Sect. 4) and leverage the intuition that the ﬁrst query
within a cluster triggers the subsequent queries in the cluster and is therefore
the root lookup. This follows from the structure of modern web pages, with a
container page calling for additional objects from a variety of servers—e.g., an
average web page uses objects from 16 diﬀerent hostnames [10].
Finding co-occurrence is complicated due to client caching. That is, we cannot
expect to see the entire set of dependent lookups each time we observe some
root lookup. Our methodology for detecting co-occurrence is as follows. First, we
deﬁne clusters(r) as the number of clusters with r as the root across our dataset
and pairs(r, d) as the number of clusters with root r that include dependent
d. Second, we limit our analysis to the case when clusters(r) ≥ 10 to reduce
the potential for false positive relationships based on too few samples. In the
Feb:Residential:Users dataset, we ﬁnd 7.1 K (9.9 %) of the clusters meet these
criteria. Within these clusters we ﬁnd 7.5 M dependent queries and 2.2 M unique
(r, d) pairs. Third, for each pair (r, d), we compute the co-occurrence as C =
pairs(r, d)/clusters(r)—i.e., the fraction of the clusters with root r that include
d. Co-occurrence of most pairs is low with 2.0 M (93 %) pairs having a C much
less than 0.1. We focus on the 78 K pairs that have high C—greater than 0.2.
These pairs include 98 % of the roots we identify, i.e., nearly all roots have at least
one dependent with which they co-occur frequently. Also, these pairs comprise
28 % of the 7.5 M dependent queries we study.
We note that intuitively dependent names could be expected to share labels
with their roots—e.g., www.facebook.com and star.c10r.facebook.com—and this
could be a further way to assess co-occurrence. However, we ﬁnd that only 27 %
of the pairs within clusters with co-occurrence of at least 0.2 share the same SLD
and 11 % share the 3rd level label as the cluster root. This suggests that while
not rare, counting on co-occurring names to be from the same zone to build
clusters is dubious. As an extreme example, Google Analytics is a dependent of
1,049 unique cluster roots, most of which are not Google names.
Finally, we cannot test the majority of the clusters and pairs for co-occurrence
because of limited samples. However, we hypothesize that our results apply to
all clusters. We note that the distribution of the number of queries per cluster in
Fig. 1 is similar to the distribution of the number of dependents per root where
the co-occurrence fraction is greater than 0.2. Combining our observations that
80 % of queries occur in clusters, 28 % of the dependent queries within clusters
have high co-occurrence with the root, and the average cluster has 1 root and
10 dependents, we estimate that at a minimum 80 ∗ 0.28 ∗ 10/11 = 20 % of DNS
queries are driven by co-occurrence relationships. We conclude that co-occurrence
Towards a Model of DNS Client Behavior
273
Hostnames
SLDs
Hostnames
SLDs
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
t
n
e
i
l
c
r
e
p
F
D
C
0.0
0.1
0.0
1.0
Min cos similarity for same client on consecutive days
0.2
0.5
0.8
0.9
0.3
0.4
0.6
0.7
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
r
i
a
p
t
n
e
i
l
c
r
e
p
F
D
C
0.0
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Max cos similarity between clients for any day(s)
Fig. 7. Cosine similarity between the
query vectors for the same client.
Fig. 8. Cosine similarity between the
query vectors for diﬀerent clients.
relationships are common, though the relationships do not always manifest as
requests on the wire due to caching.
Temporal Locality: We next explore how the set of names a client queries
changes over time. As a foundation, we construct a vector Vc,d for each client c
and each day d in our dataset, which represents the fraction of lookups for each
name we observe in our dataset. Speciﬁcally, we start from an alphabetically
ordered list of all hostnames looked up across all clients in our dataset, N. We
initially set each Vc,d to a vector of |N| zeros. We then iterate through N and
set the corresponding position in each Vc,d as the total number of queries client
c issues for name Ni on day d divided by the total number of queries c issues on
day d. Thus, an example Vc,d would be  in the case where
there are ﬁve total names in the dataset and on day d the client queries for the
second name once, the fourth name twice and the ﬁfth name once. We repeat
this process using only the SLDs from each query, as well.
We ﬁrst investigate whether clients’ queries tend to remain stable across days
in the dataset. For this, we compute the minimum cosine similarity of the query
vectors for each client across all pairs of consecutive days. Figure 7 shows the
distribution of minimum cosine similarity per client in the Feb:Residential:Users
dataset. In general, the cosine similarity values are high—greater than 0.5 for
80 % of clients for unique hostnames—indicating that clients query for a similar
set of names in similar relative frequencies across days. Given this result, it is
unsurprising that the ﬁgure also shows high similarity across SLDs.
Next we assess whether diﬀerent clients query for similar sets of names. We
compute the cosine similarity across all pairs of clients and for all days of our
dataset. Figure 8 shows the distribution of the maximum similarity per client
pair from any day. When considering hostnames, we ﬁnd lower similarity values
than when focusing on a single client—with only 3 % showing similarity of at
least 0.5—showing that each client queries for a fairly distinct set of hostnames.
The similarity between clients is also low for sets of SLDs, with 55 % of the pairs
showing a maximum similarity less than 0.5. Thus, clients query for diﬀerent
274
K. Schomp et al.
SLDs
Hostnames
Median
Mean
t
n
e
i
l
c
r
e
p
F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0
1
10
100
1K
10K
Mean names queried per day (log scale)
t
n
e
i
l
c
r
e
p
F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.0
1
10
100
1K
Stack Distance (log scale)
Fig. 9. Mean hostnames and SLDs
queried by each client per day.
Fig. 10. Mean and median stack dis-
tance for each client.
speciﬁc hostnames and distinct sets of SLDs. These results show that a client
DNS model must ensure that (i) each client tends to stay similar across time
and also that (ii) clients must be distinct from one another.
A ﬁnal aspect we explore is how quickly a client repeats a query. As we
show in Fig. 2, 50 % of the clients send less than 2 K queries per day on average.
Figure 9 shows the distribution of the average number of unique hostnames that
clients query per day. The number of names is less than the overall number of
lookups, indicating the presence of repeat queries. For instance, at the median,
a client queries for 400 unique hostnames and 150 SLDs each day. To assess
the temporal locality of re-queries, we compute the stack distance [12] for each
query—the number of unique queries since the last query for the given name.
Figure 10 shows the distributions of the mean and median stack distance per
client. We ﬁnd the stack distance to be relatively short in most cases—with over
85 % of the medians being less than 100. However, the longer means show that
the re-use rate is not always short. Our results show that variation in requerying
behavior exists among clients, with some clients revisiting names frequently and
others querying a larger set of names with less frequency.
7 Related Work
Models of various protocols have been constructed for understanding, simulating
and predicting traﬃc (e.g., [13] for a variety of traditional protocols and [2] as
an example of HTTP modeling). Additionally, there is previous work on char-
acterizing DNS traﬃc (e.g., [6,11]), which focuses on the aggregate traﬃc of a
population of clients, in contrast to our focus on individual clients. Finally, we
note—as we discuss in Sect. 1—that several recent studies involving DNS make
assumptions about the behavior of individual clients or need to analyze data for
speciﬁc information before proceeding. For instance, the authors of [5] model
DNS hierarchical cache performance using an analytical arrival process, while in
[14], the authors use simulation to explore changes to the resolution path. Both
studies would beneﬁt from a greater understanding of DNS client behavior.
Towards a Model of DNS Client Behavior
275
8 Conclusion
This work is an initial step towards richly understanding individual DNS client
behavior. We characterize client behavior in ways that will ultimately inform an
analytical model. We ﬁnd that diﬀerent types of clients interact with the DNS
in distinct ways. Further, DNS queries often occur in short clusters of related
names. As a step towards an analytical model, we show that the client query
arrival process is well modeled by a combination of the Weibull and Pareto dis-
tributions. In addition, we ﬁnd that clients have a “working set” of names that
is both fairly stable over time and fairly distinct from other clients. Finally,
our high-level results hold across both time and qualitatively diﬀerent user
populations—student residential vs. University oﬃce. This is an initial indication
that the broad properties we illuminate hold the promise to be invariants.
References
1. OpenDNS. http://www.opendns.com/
2. Barford, P., Crovella, M.: Generating representative web workloads for network
and server performance evaluation. In ACM SIGMETRICS (1998)
3. Callahan, T., Allman, M., Rabinovich, M.: On modern DNS behavior and proper-
ties. ACM SIGCOMM Comput. Commun. Rev. 43(3), 7–15 (2013)
4. Ester, M., Kriegel, H.-P., Sander, J., Xu, X.: A density-based algorithm for dis-
covering clusters in large spatial databases with noise. In: AAAI International
Conference on Knowledge Discovery and Data Mining (1996)
5. Fofack, N.C., Alouf, S.: Modeling modern DNS caches. In: ACM International
Conference on Performance Evaluation Methodologies and Tools (2013)
6. Gao, H., Yegneswaran, V., Chen, Y., et al.: An empirical re-examination of global
DNS behavior. In: ACM SIGCOMM (2013)
7. Gauthier, P., Cohen, J., Dunsmuir, M.: The web proxy auto-discovery proto-
col. IETF Internet Draft (work in progress) (1999). https://tools.ietf.org/html/
draft-ietf-wrec-wpad-01
8. Websites
using
Google-Analytics
google
analytics.
http://trends.builtwith.com/analytics/
9. Google safe browsing. https://developers.google.com/safe-browsing
10. HTTP archive. http://httparchive.org
11. Jung, J., Berger, A.W., Balakrishnan, H.: Modeling TTL-based internet caches.
In: IEEE International Conference on Computer Communications (2003)
12. Mattson, R.L., Gecsei, J., Slutz, D.R., Traiger, I.L.: Evaluation techniques for
storage hierarchies. IBM Syst. J. 9(2), 78–117 (1970)
13. Paxson, V.: Empirically derived analytic models of wide-area TCP connections.
IEEE/ACM Trans. Netw. 2(4), 316–336 (1994)
14. Schomp, K., Allman, M., Rabinovich, M.: DNS resolvers considered harmful. In:
ACM Workshop on Hot Topics in Networks (2014)