echo "window.alert(\"激
活策略成功\");";
}
else {
WEBUI_log( LOG_ERR, "从
$acl_url"."下载代理服务$service_path"."的 ACL 策略失败" );
echo "window.alert(\"激
活策略失败\");";
}
echo "window.close();";
echo "";
break;
}
case 'user': {
- 89 -
if ( '已启动' !=
status_service($service_path) ) {
echo "服务未启动";
break;
}
$proxy =
get_proxy($service_path);
$mrtg_enable =
$proxy['mrtg_enable'];
$mrtg_ip = $proxy['mrtg_ip'];
$mrtg_port =
$proxy['mrtg_port'];
if ( $mrtg_enable == 'On' ) {
system( "curl
http://$mrtg_ip:$mrtg_port/?ssl" );
}
else {
echo "实时状态查看功能未开
启";
}
break;
}
default:
WEBUI_alert("无效参数：
service_action=".$_GET['service_action']);
}
?>
注意这里的参数$service_path = $_GET['service_path'];
最后$service_path 进入函数 start_service，stop_service，
status_service
这些函数的定义在文件
/kssl/kssl/WEBUI/www/ssl/service_helper.php，跟进
- 90 -
function start_service( $service_path )
{
global $SSL_DIR;
global $PMONITOR_DIR;
/*
先检查 HRP 的配置文件，再运行 PMonitor，错误
定义见 hrp-can-start.sh 脚本的注释 */
exec( "$SSL_DIR/bin/hrp-can-start.sh
/kssl/HRP/cfg/$service_path 2>&1", $results, $ret );
switch( $ret ) {
case 0:
WEBUI_exec( "$PMONITOR_DIR/bin/PMonitor --run
-f $SSL_DIR/cfg/".$service_path."/PMonitor.conf >
/dev/null", true );
return true;
case 1:
WEBUI_alert( "配置文件不存在，不能启动服
务:" );
return false;
case 2:
WEBUI_alert( "本机现在处于双机热备的待机状
态，不能启动服务" );
return false;
case 3:
WEBUI_alert( "使用了网络配置中不存在的 IP 地
址，不能启动服务" );
return false;
case 4:
WEBUI_alert( "监听的端口已经被其他程序所使
用，不能启动服务" );
return false;
case 5:
WEBUI_exec( "$SSL_DIR/bin/hrp-can-start.sh
- 91 -
/kssl/HRP/cfg/$service_path 2>&1", true, "配置文件不完整,
或者进行了错误配置" );
return false;
}
}
function stop_service( $service_path )
{
global $SSL_DIR;
global $PMONITOR_DIR;
WEBUI_exec( "$PMONITOR_DIR/bin/PMonitor --kill
-f $SSL_DIR/cfg/".$service_path."/PMonitor.conf",
true );
}
function status_service( $service_path )
{
global $PMONITOR_DIR;
exec( "$PMONITOR_DIR/bin/PMonitor -l | grep
\"HRP_$service_path \" | awk -F= '{print $3}'", $results,
$ret );
switch( $results[0] ) {
case "":
return "已停止";
case "NORMAL":
return "已启动";
case "INIT":
case "RETRYING":
return "启动中";
}
}
- 92 -
由于 status_service 函数中命令有双引号保护，双引号被转义，导致
利用失败
文件/kssl/kssl/WEBUI/www/global/common.php
function WEBUI_exec( $cmd, $show_err = false, $note =
'' )
{
exec( $cmd, $results, $ret );
if( $ret != 0 ) {
if( $show_err ) {
$err = '执行 '.$cmd.' 命令失败';
foreach ( $results as
$err_line ) {
//2007-5-8 yanhm bugfix for 0005289:错误信息太多 +{{
//错误信息中删去命令帮助信
息
if ( strncmp($err_line,
"Usage", 5) != 0 )
break;
//}}
$err = $err.',
'.$err_line;
}
- 93 -
WEBUI_alert( "$note:$err" );
}
return false;
}
return true;
}
最终进入了 exec 中，导致命令执行
所以当 service_action=start 和 service_action=stop 时存在两处命
令执行漏洞
文件上传漏洞
在网站的运营过程中，不可避免地要对网站的某些页面或者内容
进行更新，这时便需要使用到网站的文件上传的功能。如果不对被上
传的文件进行限制或者限制被绕过，该功能便有可能会被利用于上传
可执行文件、脚本到服务器上，进而进一步导致服务器沦陷。
- 94 -
导致文件上传的漏洞的原因较多，主要包括以下几类：
1.
服务器配置不当
2.
开源编辑器上传漏洞
3.
本地文件上传限制被绕过
4.
过滤不严或被绕过
5.
文件解析漏洞导致文件执行
6.
文件路径截断
服务器配置不当
当服务器配置不当时，在不需要上传页面的情况下便可导致任意文件
上传
开源编辑器上传漏洞
很多开源的编辑器历史上都有不同的上传漏洞，包括但不只限于
CKEditor,CKEditor 的文件上传漏洞
本地文件上传限制被绕过
只在客户端浏览器上做了文件限制而没有在远程的服务器上做限
制，只需要修改数据包就
可以轻松绕过限制。
过滤不严或被绕过
有些网站上使用了黑名单过滤掉了一些关键的可执行文件脚本后
缀等，但黑名单不全或者被绕过，导致可执行脚本文件被上传到服务
器上，执行。
如在服务器后端过滤掉了后缀为.php 的文件，但并没有过滤掉.php3
等其他可执行文件脚本后缀，攻击者就可以上传带有其他的可执行文
件脚本本后缀的恶意文件到服务器上。
常用的一些可执行的文件脚本的后缀
php
php2
php3
php5
phtml
asp
aspx
ascx
jsp jspx
在某些情况下由于管理员错误的服务器配置（将.html 后缀的文件使用
- 95 -
php 进行解析等）会导致.html、.xml 等静态页面后缀的文件也可被执
行。
在上传文件保存磁盘为 NTFS 格式时可通过::$DATA 绕过黑名单限制
有时服务器只对第一个被上传的文件进行了检查，这时通过同时上传
多个文件并将恶意文件掺杂进其中也可绕过服务器的过滤。
文件解析漏洞导致文件执行
当服务器上存在文件解析漏洞时，合法的文件名便可导致带有恶意代
码的文件被执行
文件路径截断
在上传的文件中使用一些特殊的符号，使得文件被上传到服务器中时
路径被截断从而控制文件路径。
常用的进行文件路径截断的字符如下
\0?%00
在可以控制文件路径的情况下，使用超长的文件路径也有可能会导致
文件路径截断。
任意上传漏洞原理
由于文件上传功能实现代码没有严格限制用户上传的文件后缀以
及文件类型，导致允许攻击者向某个可通过 Web 访问的目录上传任
意 PHP 文件，并能够将这些文件传递给 PHP 解释器，就可以在远程
服务器上执行任意 PHP 脚本。
任意文件上传漏洞实例:
以下代码会处理上传的文件，并将它们移到 Web 根目录下的一
个目录中。
攻击者可以将任意的 PHP 源文件上传到该程序中，并随后从服务器中
请求这些文件，会在远程服务器上执行恶意文件。
- 96 -
即使程序将上传的文件存储在一个无法通过 Web 访问的目录中，攻
击者仍然有可能通过向服务器环境引入恶意内容来发动其他攻击。 如
果程序容易出现文件包含漏洞，那么攻击者就可能上传带恶意内容的
文件，并利用另一种漏洞促使程序读取或执行该文件，形成“二次攻
击”。
文件上传案例
PHP 文件上传通常会使用 move_uploaded_file，也可以找到文
件上传的程序进行具体分析
一套 web 应用程序，一般都会提供文件上传的功能，方便来访者
上传一些文件。
下面是一个简单的文件上传表单
php 的配置文件 php.ini，其中选项 upload_max_filesize 指定允许上
传的文件大小，默认是 2M
- 97 -
$_FILES 数组变量
PHP 使用变量$_FILES 来上传文件，$_FILES 是一个数组。如果上传
test.txt，那么$_FILES 数组的内容为：
$FILES
Array
{
[file] => Array
{
[name] => test.txt //文件名称
[type] => text/plain //MIME 类型
[tmp_name] => /tmp/php5D.tmp //临时文件
[error] => 0 //错误信息
[size] => 536 //文件大小，单位字节
}
}
如果上传文件按钮的 name 属性值为 file
那么使用$_FILES['file']['name']来获得客户端上传文件名称，不包含
路径。使用$_FILES['file']['tmp_name']来获得服务端保存上传文件的
临时文件路径
存放上传文件的文件夹
PHP 不会直接将上传文件放到网站根目录中，而是保存为一个临时文
件，名称就是$_FILES['file']['tmp_name']的值，开发者必须把这个临
时文件复制到存放的网站文件夹中。
$_FILES['file']['tmp_name']的值是由 PHP 设置的，与文件原始名称不
一样，开发者必须使用$_FILES['file']['name']来取得上传文件的原始
名称。
上传文件时的错误信息
$_FILES['file']['error']变量用来保存上传文件时的错误信息，它的值如
下：
- 98 -
错误信息
数值
说 明
UPLOAD_ERR_OK
0
没有错误
UPLOAD_ERR_INI_SIZE
1
上传文件的大小超过 php.ini 的设置
UPLOAD_ERR_FROM_SIZE
2
上传文件的大小超过 HTML 表单中 MAX_FILE_SIZE
的值
UPLOAD_ERR_PARTIAL
3
只上传部分的文件
UPLOAD_ERR_NO_FILE
4
没有文件上传
文件上传漏洞
如果提供给网站访问者上传图片的功能，那必须小心访问者上传
的实际可能不是图片，而是可以指定的 PHP 程序。如果存放图片的目
录是一个开放的文件夹，则入侵者就可以远程执行上传的 PHP 文件来
进行攻击。
下面是一个简单的文件上传例子：
 ……
- 99 -
这个例子没有检验文件后缀，可以上传任意文件，很明显的上传漏洞
《DVWA 的分析与测试 7(File Upload)》
信息来源于：CodeSec Team
直接看 low 把
';
echo 'Your image was not uploaded.';
echo '';
} else {
echo '';
echo $target_path . ' succesfully uploaded!';
echo '';
}
}
?>
- 100 -
可谓 远古时代的代码了，直接上传 php 马
看 Medium 把
';
echo 'Your image was not uploaded.';
echo '';
} else {
echo '';
echo $target_path . ' succesfully uploaded!';
echo '';
}
}
else{
echo 'Your image was not uploaded.';
}
}
?>
- 101 -
High 级代码依然是 白名单思路过滤
';
echo 'Your image was not uploaded.';
echo '';
} else {
echo '';
echo $target_path . ' succesfully uploaded!';
echo '';
}
}
else{
echo '';
echo 'Your image was not uploaded.';
echo '';
}
}
- 102 -
?>
MIME 类型