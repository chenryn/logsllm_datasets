the environment to fingerprint sandboxes and to deobfuscate
additional layers of the malicious payload. In this paper, we define
as execution environment every information that is not directly
contained in a workbook. For example, XL4 malware often uses
the GET.WORKSPACE function to access information from the
execution environment, such as the total memory available to
Microsoft Excel, the name of the underlying operating system, and
the version of Microsoft Excel. Similarly, any information about
a window—such as its name, size, and position—can be accessed
using the =GET.WINDOW function. Finally, some samples execute
the function NOW to retrieve the current timestamp and use this
information to deobfuscate a malicious payload.
Current Defenses. Excel 4.0 malware is a threat that has surged
only recently. Hence, only a few defenses are currently available.
To the best of our knowledge, the only runtime defense designed
explicitly for Excel 4.0 malware is the Microsoft AMSI integration,
released by Microsoft in 2021 [47]. The Microsoft AMSI integration
deploys hooks inside a running Excel process and, whenever certain
Excel 4.0 functions are executed, it forwards the macro to an external
antivirus engine, which decides whether it is malicious or not.
Another approach, mainly used for deobfuscation and post-
mortem analysis of malicious documents, is based on the emulation
of Excel 4.0 functions. This analysis technique works by interpreting
all the instructions executed by the malware sample without running
the sample itself on a physical machine. An example of such an
analysis tool for XL4 macros is XLMMacroDeobfuscator [53], an
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1067
1 Sandbox fingerprinting
[A1] =IF(GET.WORKSPACE(19), SET.VALUE(K1, K1+1),
SET.VALUE(K1, 0))
[A2] =IF(GET.WORKSPACE(42), SET.VALUE(K1, K1+1),
SET.VALUE(K1, 0))
[A3] =IF(K1<2, CLOSE(TRUE), )
2 Key calculation and payload decryption
[A4] =FORMULA(DAY(NOW())+K1, K2)
[A5] =FORMULA(CHAR(B1-K2) & .. & CHAR(B20-K2), C1)
3 Payload execution
[A6] =GOTO(C1)
[B1-B20] DL_LJ/)wv˜lyzolss55)0
[C1] =EXEC("powershell..")
[C2] =HALT()
2
Fig. 1: Example of a malicious Excel 4.0 macro payload.
open-source project that we leverage as the foundation for our work.
In general, these emulator-based tools parse the malicious Excel file,
find the correct entry point, and then emulate all the instructions,
trying to replicate the original Excel 4.0 macro behavior.
A significant limitation of these tools is using a default config-
uration to model the environment. Some samples might not show
their true behavior when executed under the default environment
configuration, and inferring a priori the environment expected by
the malware is challenging. For example, some samples run their
malicious payloads only when executed on a specific date or when
the width of the Excel window is larger than a particular threshold.
Recently, Leibovich and Ciuraru presented an approach based on
machine learning to identify Excel 4.0 malware families [41]. The
authors use t-SNE and k-means with a set of 253 features, spanning
from the length of the strings contained in a document to the count
of occurrences of each Excel 4.0 function. While this approach can
be used to detect variations of previously seen malware samples,
it does not provide any actionable forensics information on samples
that were not previously observed.
Symbolic Execution. Symbolic execution is a program analysis
technique that executes the program in the abstract domain of
symbolic variables, forking the execution after every conditional
instruction and keeping track of all the constraints introduced during
the execution. For example, when reading an integer environment
variable X, this variable is initially unconstrained and can assume any
possible integer value. However, after the execution of a conditional
instruction with a guarding condition X≥0, the analysis will fork
into two new branches and constrain the variable’s value to be
either positive (where the constraint is X≥0) or negative (where the
constraint is X<0). This type of analysis allows one to determine the
inputs that trigger the execution of a particular branch in the program.
III. MOTIVATION
Although Excel 4.0 macros offer several functions that malware
authors can trivially use to infect a system, malicious payloads
have evolved notably over time. In particular, malware authors have
deployed a series of evasion techniques that utilize the execution
environment to hinder static and dynamic analysis.
Figure 1 shows an example of these techniques. The first two
formulas (cells A1 and A2) call the function GET.WORKSPACE,
which retrieves some information about the execution environment.
In particular, the effect of these two formulas is to check whether the
machine has audio and mouse capabilities and—if these capabilities
are detected—to increment the value of the cell K1. The formula
in cell A3 checks if the value of K1 is less than 2, and it aborts the
execution when this condition is true. The macros in cells A4 and A5
are responsible for decrypting the malware payload. In particular, the
formula in cell A4 adds the current day of the week to the value of
cell K1, and stores this result in cell K2. The malware then subtracts
the value of K2 to the characters from the range B1–B20, which
are then concatenated and stored in C1. After this operation, cell C1
will contain the decrypted malware payload, which, in our example,
calls the EXEC function to execute a command using powershell.
Finally, the formula in A6 transfers the control flow to the decrypted
payload (stored in C1) before halting the execution (cell C2).
Concrete Analysis. This analysis technique works by interpreting
each formula of a malicious document, using a default execution
environment. The example in Figure 1 clearly shows the limitations
of this approach. In particular, before the analysis, we do not know
whether the malware expects to run in an environment where
mouse and audio capabilities are present. These anti-analysis
checks are generally used to detect whether a sample is running
in a sandbox environment or not. For our example, we could create
an environment that pretends that basic capabilities are present.
However, we would not be able to easily determine the correct date
that the malware expects. This date is retrieved using the formula
NOW() (cell A4 in the previous example) and is used to decrypt the
malware payload (cell A5). Using a “wrong” value will generate an
invalid payload, which will hide the real behavior of the malware.
A similar technique has been observed in real malware samples,
and it is intended to hinder any dynamic analysis that runs on a day
different than the intended one [28].
In general, to overcome the problems related to the unknown
environment, concrete analysis can be coupled with forced
execution. This technique forces the execution to take different
branches on conditional instructions, using brute-force to iterate
over different environment variables. This technique allows one to
partially side-step the environment configuration problem, but not
without limitations. First, forced execution only allows to bypass
simple checks (conditions), but it does not guarantee the correct
environment configuration when forcing the execution down a
particular branch. In our running example of Figure 1, if the value
of K1 is equal to 1 when executing the formula in A3, forced
execution can divert the execution towards the false branch, and
avoid the CLOSE function. Even though this diversion will make the
execution reach the deobfuscation routine in cell A5, the value of K1
will be wrong (leading to an incorrectly decrypted payload in C1).
Similarly, brute-forcing requires identifying the subset of relevant
environment variables and finding an efficient strategy to triage
several combinations of their values. As we show in the evaluation
in Section V, this approach can be useful to test different values
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1068
of the date used in cell A4. However, when the malware sample
uses a more complex environment configuration, the search space
quickly increases in size, and this approach becomes infeasible.
Symbolic Analysis. As described in the paragraphs above, concrete
analysis has several limitations, mainly related to its inability to
reason about unknown environment variables. On the other hand,
symbolic execution is a suitable technique to keep track of how
environment variables are generated, propagated, and used during
execution. This information can be used to reason more formally
about the environment, and to represent any possible value of the
environment variables. For example, when SYMBEXCEL executes
the GET.WORKSPACE function in cell A1, symbolic execution
postpones the decision on the concrete value that this function should
return, and instead returns a symbolic variable. Then, since this
symbolic variable is used as a condition in an IF function, symbolic
execution forks the execution and generates two separate states: one
that follows the true branch, while the other follows the false branch.
The memory of the states will be updated accordingly—i.e., the
first state contains K1=1 while the second one contains K1=0. A
similar process is then repeated for the formula in cell A2. Only one
of the four generated states will contain K1=2, and it will therefore
reach the deobfuscation routine, while all the other three states will
be terminated after executing the formula in A3. Moreover, since
we consider the date as part of the environment, also cell K2 will
contain a symbolic variable, and the decrypted formula stored in
C1 will also be a symbolic expression. When the execution will
reach C1, our system, using a smart concretization technique, will
concretize the symbolic variable and execute the malicious payload.
IV. SYMBEXCEL
This section discusses the architecture of SYMBEXCEL, our
symbolic execution engine to analyze Excel 4.0 macros. Figure 2
provides an overview of the different components of our system.
In order to analyze a document containing Excel 4.0 macros,
SYMBEXCEL first needs to parse the document itself. To achieve
this goal, we use a Loader component (either the Static Parser or
the COM Loader) that understands the underlying file format (e.g.,
BIFF8 [56]) and extracts the information that is needed to run
the sample in our analysis environment. The second component
of SYMBEXCEL, which we call the Execution Engine, implements
the symbolic analysis engine. This is the core component of our
system, which is responsible for interpreting the formulas contained
in the document—using symbolic variables to model the execution
environment—and for guiding the symbolic exploration. The third
and last component of SYMBEXCEL is the Solver Backend. This
component is a wrapper around an SMT constraint solver, and is
responsible for checking the satisfiability of the collected constraints
(for example, when executing a conditional instruction) and for
translating expressions from the symbolic to the concrete domain.
The output of our system, once the symbolic exploration terminates,
is a report containing any security-relevant formulas (SRFs)
observed during the execution, which can be parsed to extract IoCs
such as filenames, URLs, shell commands, registry keys, crypto-
graphic hashes of dynamically generated files, etc. For example,
in Figure 1, the formula EXEC("powershell..") can be
trivially parsed to extract the shell command "powershell..".
In this paper, we define the following formulas as SRFs: EXEC,
CALL, REGISTER, FOPEN, FWRITE, FWRITELN.
In the following paragraphs, we describe the three main
components of SYMBEXCEL in more detail, explaining our design
and implementation choices.
A. Loader
This component is responsible for parsing the Excel document
and extracting all the information needed to start the analysis. Such
information includes the name and content of all the sheets in the
workbook, the analysis entry points, the defined names, the values
and formulas in each cell, and the properties of each cell (e.g., font
information, background color). We then import this information
into our analysis environment by creating an Execution Engine
instance and by initializing its memory and environment to reflect
the contents of the original Excel file.
SYMBEXCEL can load an Excel document file using either a
Static Parser or the COM Loader. The static parser leverages public
knowledge [44], [45] about the structure of the BIFF and XML
file formats to parse an Excel document. This approach makes the
loader faster, but at the same time, less robust. As described in more
detail in Section V, correctly implementing an Excel file parser
is inherently hard, and malicious actors are routinely finding new
ways to break such analysis tools’ parsers while preserving the
validity of the file with respect to Excel. An example of a statically
implemented loader is the Python library called xlrd2 [57], an
open-source and regularly maintained project that we improve and
use in this paper to parse malicious Excel files.
An alternative approach to parse and load such files is based on
the Microsoft COM functionality2, which can be used to directly
interface with Excel. This approach allows deferring most of the
work to the Excel parser implementation, which is inherently robust
and faithfully mirrors the outcome of a normal execution scenario.
Our COM Loader uses the Microsoft COM interface to load the
Excel file into a running instance of Excel. It is, therefore, more
resistant to some of the evasion techniques used in current Excel
4.0 malware samples (such as xlrd2 parsing confusion, as discussed
in Section V-B), albeit an order of magnitude slower than the static
loader—on average, the loading time with the Static Parser is around
3 seconds, while the COM Loader can take as much as 30 seconds.
Entry point. Excel malware has different ways to start the execution
of malicious Excel 4.0 macros. For this reason, a crucial piece of
information extracted by the loader is the entry point, which is used
by the Execution Engine to start the analysis. The first category
of entry points are related to built-in functionalities of Excel 4.0
macro sheets. For example, the Auto Open label specifies a macro
that is automatically executed when the macro sheet is opened.
Quite similarly, Auto Close, Auto Activate and Auto Deactivate
execute a macro when the spreadsheet is closed, when a workbook
is activated and when a workbook is deactivated, respectively.
Extracting these triggering macros is generally straightforward,
since they are stored under well-known (constant) names.
2The Microsoft Component Object Model (COM) was introduced by Microsoft
in 1993 and is a platform-independent, object-oriented binary-interface standard
for creating binary software components that can interact with each other.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1069
SYMBEXCEL
Execution
Engine
Solver
Backend
Malicious
Documents
...
COM
Loader
Static
Parser
Loader
Fig. 2: System overview of SYMBEXCEL.
IoCs
...
On the other hand, some of the latest malware samples first
execute VBA code that, in turn, triggers the execution of Excel
4.0 macro. Handling such cases in a generic way would not only
require a fully-functional VBA engine, but also the logic to handle
the interactions between VBA code and Excel 4.0 macros. For this
reason, SYMBEXCEL currently extracts Excel entry points only from
single-statement VBA functions that contains the Application.Run
method. Specifically, SYMBEXCEL extracts the VBA code using
oletools [39], and then parses it to extract the Excel entry points.
Since we did not observe any obfuscation in these VBA functions,
we use a regular expression to extract the Excel 4.0 entry point.
B. Execution Engine
This component is responsible for orchestrating the symbolic
exploration of a sample. In particular, the execution engine parses
and dispatches the Excel 4.0 formulas to the proper function
handlers, forks the execution when a conditional formula is
executed, and invokes the solver backend to concretize symbolic
values. The implementation of our execution engine builds on
the open-source implementation of XLMMacroDeobfuscator [53].
The most important additions we made to this tool are related to
symbolic execution: from supporting the creation and propagation
of constraints to keeping track of multiple execution states.
Moreover, we improved the formula parser to support Unicode
characters, and we also implemented new function handlers.
Formula Parsing. In order to interpret an Excel 4.0 formula,
SYMBEXCEL first parses the formula string from the target cell
and generates an Abstract Syntax Tree (AST). The AST is a
representation of the formula that makes its syntactic structure
explicit. The formula parser used by our system is based on extended
Backus–Naur form rules (EBNF), which describe the syntactic
structure of the XL4 grammar. SYMBEXCEL implements several
function handlers each implementing a non-terminal symbol of the
XL4 grammar. Since each function handler replicates the behavior
of a function on the execution state, after parsing the XL4 formula
into an AST, we then walk the AST and dispatch the execution to
one or more function handlers in a recursive descent fashion.
Execution States. When an Excel macro does not use any symbolic
value, a single execution state can be used to represent the execution
of the macro. The execution state is created at the beginning of the
analysis, and the same state will be used until the macro terminates,
since every formula will have only one valid successor.
On the other hand, when executing a conditional instruction (e.g.,
IF) that operates on at least one symbolic variable in its condition,
a state can have two or more valid successors. For example, the
IF function in cell A3 of Figure 1 uses a symbolic variable (K2)
in its condition, and both branches are potentially valid since such