### Property of the Checker Circuit
The checker circuit not only identifies the location of a fault but also prevents it from propagating beyond the next pipeline stage, thereby safeguarding the state of the rest of the system.

### 5.2. Error Propagation in Pipeline Stages
An error in the output of one pipeline stage may be filtered out by the subsequent stage, depending on the computation being performed. However, errors can sometimes propagate through the pipeline. A process that generates an invalid token output when it receives an invalid token input is termed as error-propagating. 

Consider the pull-down networks for the carry function in an adder, as shown in Figure 8 (a) true rail and (b) false rail. Table 6 illustrates the results from invalid inputs into the carry function. For two cases of invalid inputs, the carry circuit generated valid outputs. In these instances, the outputs are correct because replacing the invalid token with either valid token yields the same result. Processes that do not always propagate errors may prevent the detection of an invalid token and must be made self-checking using the method of invalid token detection discussed in the previous subsection.

| A | B | C | F | Output |
|---|---|---|---|--------|
| 1 | 1 | 1 | 1 | T      |
| 0 | 1 | 0 | 1 | F      |
| 1 | 0 | 1 | 1 | T      |
| 1 | 1 | 0 | 1 | F      |
| 0 | 0 | 1 | 0 | T      |
| 1 | 1 | 1 | 1 | T      |

**Table 6. Output tokens resulting from a carry process with invalid input tokens.**

### 6. Experimental Results
Experimental results were obtained by applying our detection/isolation technique to two 64-bit, 3-stage pipelines. The first pipeline contains a 64-bit buffer, and the second contains a 64-bit AND-function unit, each receiving input from a bit generator and sending output to a bit bucket. Initially, each stage generates a single enable signal; therefore, we partitioned each stage into smaller segments, with each segment having its own enable signal. The detection/isolation technique was applied to this set of pipelines and simulated in HSPICE using TSMC 0.18-micron technology. The results are presented in Tables 7 and 8, which report the transistor count, average power consumption, and period (total number of transitions per cycle) for both the original and modified pipelines. The number of partitions is denoted by \( N \). The numbers in parentheses after the period indicate the period obtained by performing bubble reshuffling after adding redundant C-elements.

The performance penalty of applying our detection/isolation method is fixed at 4 transitions per cycle (when bubble reshuffling is possible). The number of additional transistors required increases with the number of partitions, as each partition needs a dedicated redundant C-element. Since the number of partitions can be freely chosen, a tradeoff can be made between the additional hardware required and the desired period. For example, a 64-bit AND-function unit with 16 partitions would require a 7% increase in hardware but maintain the original period of 16 (the original case being 1 partition).

**Table 7. Experimental results for a 64-bit buffer.**

| \( N \) | Transistor Count | Average Power (mW) | Period (Transitions) |
|---------|------------------|--------------------|----------------------|
| 1       | 3324             | 20                 | 16                   |
| 2       | 3336             | 20                 | 16                   |
| 4       | 3296             | 20                 | 16                   |
| 8       | 3328             | 20                 | 16                   |
| 16      | 3264             | 20                 | 16                   |
| 32      | 3456             | 20                 | 16                   |
| 64      | 3384             | 20                 | 16                   |

**Table 8. Experimental results for a 64-bit AND-function unit.**

| \( N \) | Transistor Count | Average Power (mW) | Period (Transitions) |
|---------|------------------|--------------------|----------------------|
| 1       | 5116             | 20                 | 16                   |
| 2       | 5132             | 20                 | 16                   |
| 4       | 5104             | 20                 | 16                   |
| 8       | 5168             | 20                 | 16                   |
| 16      | 5056             | 20                 | 16                   |
| 32      | 5312             | 20                 | 16                   |
| 64      | 5180             | 20                 | 16                   |

### 7. Summary
We provided a detailed description of various faults and their effects on asynchronous QDI circuits. These circuits are inherently highly tolerant of delay faults. Other faults, such as stuck-at, stuck-open/closed, bridging, and transient faults, and their impact on asynchronous circuits were first analyzed at the gate level and then translated to failures in communication channels at the interfaces of asynchronous components. Specifically, errors related to deadlock, synchronization failure, token generation, and token consumption were identified. Two modifications to conventional QDI circuits were described: one for pure synchronization channels and another for data channels. These modifications translate errors into circuit deadlock, making them visible and preventing them from propagating far from their origin. Layout techniques to mitigate delay faults in some isochronic forks were also presented. Finally, methods to translate invalid tokens into deadlock and to detect where the fault occurred were described.

### References
[1] M. L. Bushnell and V. D. Agrawal. *Essentials of Electronic Testing for Digital, Memory and Mixed-Signal VLSI Circuits*. Kluwer Academic Publishers, 2000.
[2] P. J. Hazewindus. *Testing Delay-Insensitive Circuits*. PhD thesis, California Institute of Technology, Pasadena, California, 1996.
[3] H. Hulgaard, S. M. Burns, and G. Borriello. *Testing Asynchronous Circuits: A Survey*. Integr. VLSI J., 19(3):111–131, 1995.
[4] J. B. Khare and W. Maly. *From Contamination To Defects, Faults and Yield Loss*. Kluwer Academic Publishers, 1996.
[5] P. K. Lala. *Self-Checking and Fault-Tolerant Digital Design*. Morgan Kaufmann Publishers, 2001.
[6] A. M. Lines. *Pipelined Asynchronous Circuits*. Master’s thesis, California Institute of Technology, Pasadena, California, 1996.
[7] R. Manohar and A. J. Martin. *Quasi-Delay-Insensitive Circuits Are Turing Complete*. In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems. IEEE Computer Society Press, 1996.
[8] R. Manohar and A. J. Martin. *Slack Elasticity in Concurrent Computing*. In Proceedings of the Mathematics of Program Construction, pages 272–285. Springer-Verlag, 1998.
[9] A. J. Martin. *Compiling Communicating Processes into Delay-Insensitive VLSI Circuits*. Distributed Computing, 1:226–234, 1986.
[10] A. J. Martin. *The Limitations to Delay-Insensitivity in Asynchronous Circuits*. Beauty is Our Business: A Birthday Salute to Edsger W. Dijkstra, pages 302–311, 1990.
[11] A. J. Martin, A. Lines, R. Manohar, M. Nystroem, P. Penzes, R. Southworth, and U. Cummings. *The Design of an Asynchronous MIPS R3000 Microprocessor*. In Proceedings of the 17th Conference on Advanced Research in VLSI (ARVLSI ’97), page 164. IEEE Computer Society, 1997.
[12] Y. Massoud, S. Majors, J. Kawa, T. Bustami, D. MacMillen, and J. White. *Managing On-Chip Inductive Effects*. IEEE Transactions on Very Large Scale Integration (VLSI) Systems, 10(6):789–797, 2002.
[13] V. I. Varshavsky. *Circuits Insensitive to Delays in Transistors and Wires*. Technical report, Helsinki University of Technology, November 1989.
[14] A. Yakovlev. *Structural Technique for Fault-Masking in Asynchronous Interfaces*. In IEE Proceedings E - Computers and Digital Techniques, pages 81–91. IEEE Computer Society, 1993.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content.