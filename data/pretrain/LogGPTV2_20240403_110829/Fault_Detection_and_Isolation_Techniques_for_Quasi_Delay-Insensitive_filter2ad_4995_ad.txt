property of this checker circuit is that it also identiﬁes where
the fault occurs, and prevents it from propagating beyond
the next pipeline stage and corrupting the state of the rest of
the system.
5.2. Error Propagating Processes
An error in the output of one pipeline stage might be ﬁl-
tered out by the next stage, depending on the computation
being performed. Sometimes errors will propagate through
a pipeline. A process that produces an invalid token out-
put when it receives an invalid token input is said to be er-
ror propagating. Consider the pull-down networks for the
Figure 8. The pull-down network for an adder
carry: (a) true rail, (b) false rail.
carry out of an adder in Figure 8. Results from invalid in-
puts into the carry function are shown in Table 6. For two
cases of invalid inputs, the carry circuit generated valid out-
puts. In this case, the outputs are correct since replacing the
invalid token with either valid token will yield the same re-
sult. Processes that are not always error propagating may
A
B
C
F
1
1
1
1
0
T
0
1
0
1
1
F
1
0
1
1
1
T
1
1
0
1
0
F
0
0
1
0
1
T
1
1
1
1
1
Carry
T
F
1
1
0
1
1
0
1
1
1
1
Table 6. Output tokens resulting from a carry
process with invalid input tokens.
prevent an invalid token from being detected and they must
be made self-checking by the method of invalid token de-
tection discussed in the previous subsection.
6. Experimental Results
Experimental results are obtained by applying our detec-
tion/isolation technique to two 64-bit 3-stage pipelines. The
ﬁrst pipeline contains a 64-bit buffer and the second con-
tains a 64-bit AND-function unit, each of which receive in-
put from a bit generator and send output to a bit bucket.
Initially, each stage generates a single enable signal, there-
fore we partition each stage into smaller segments where
each segment has an enable signal. The detection/isolation
technique is applied to this set of pipelines and simulated
in HSPICE using TSMC 0.18 micron technology. The re-
sults are shown in Tables 7 and 8. We report the transistor
count, average power consumption, and period (total num-
ber of transitions per cycle) for the original pipelines and
the modiﬁed pipelines. The number of partitions is denoted
by N. The numbers that appear in parenthesis after the pe-
riod is the period we would obtain by performing bubble
reshufﬂing after adding the redundant C-elements.
The performance penalty of applying our detec-
tion/isolation method is ﬁxed at 4 transitions per cycle (2
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply. 
N
1
2
4
8
16
32
64
T.-Count
Avg. P.(mW)
Period
Orig. Mod. Orig. Mod. Orig. Mod.
N/A
3324
3336
20(18)
3296
3328
3264
3456
2116
N/A
3384
3392
3520
3646
4224
4352
6.03
7.56
10.1
12.9
16.1
20.1
20.7
N/A
6.41
8.23
10.6
13.6
18.7
25.4
16
16
12
12
12
12
8
16(14)
16(14)
16
16
12
Table 7. Experimental results for a 64-bit
buffer.
when bubble reshufﬂing is possible). The number of ad-
ditional transistors required increases with the number of
partitions because each partition requires a dedicated redun-
dant C-element. Since we may freely choose the number
of partitions in this method, we can make a tradeoff be-
tween the additional hardware required and the desired pe-
riod. For example, we may choose a 64-bit AND-function
unit with 16 partitions and pay an increase in hard-
ware of 7%, but maintain the original period of 16 (the
original case being 1 partition).
N
1
2
4
8
16
32
64
T.-Count
Avg. P.(mW)
Period
Orig. Mod. Orig. Mod. Orig. Mod.
N/A
5116
5132
20
5104
5168
5056
5312
4864
N/A
5180
5200
5360
5440
6080
6400
7.85
9.44
11.9
14.9
18.7
23.6
24.6
N/A
7.71
10.0
13.7
17.2
22.6
28.7
16
16
16
16
12
12
12
20(18)
20(18)
16(14)
16
16
Table 8. Experimental results for a 64-bit
AND-function unit.
7. Summary
We presented a detailed description of different faults
and their effect on asynchronous QDI circuits. These cir-
cuits, by their very nature, are highly tolerant of any de-
lay fault. Other faults such as stuck-at, stuck-open/closed,
bridging faults, and transient faults and their impact on
asynchronous circuits was presented ﬁrst at the gate level,
and then the gate faults were translated to failure in com-
munication channels that occur at the interfaces of asyn-
chronous components. In particular, errors in terms of dead-
lock, synchronization failure, token generation and token
consumption were identiﬁed. Two modiﬁcations to con-
ventional QDI circuits were described that dealt with pure
synchronization channels and data channels respectively.
These modiﬁcations translated errors into circuit deadlock,
thereby making the errors visible and preventing them from
propagating far away from their origin. Layout techniques
to mitigate delay faults in some isochronic forks were also
presented. Finally, methods to translate invalid tokens into
deadlock along with detecting where the fault occurred
were also described.
References
[1] M. L. Bushnell and V. D. Agrawal. Essentials of Electronic
Testing for Digital, Memory and Mixed-Signal VLSI Circuits.
Kluwer Academic Publishers, 2000.
[2] P. J. Hazewindus. Testing Delay-Insensitive Circuits. PhD
thesis, California Institute of Technology, Pasadena, Califor-
nia, 1996.
[3] H. Hulgaard, S. M. Burns, and G. Borriello. Testing asyn-
chronous circuits: a survey. Integr. VLSI J., 19(3):111–131,
1995.
[4] J. B. Khare and W. Maly. From Contamination To Defects,
Faults and Yield Loss. Kluwer Academic Publishers, 1996.
[5] P. K. Lala. Self-Checking and Fault-Tolerant Digital Design.
Morgan Kaufmann Publishers, 2001.
[6] A. M. Lines. Pipelined asynchronous circuits. Master’s the-
sis, California Institute of Technology, Pasadena, California,
1996.
[7] R. Manohar and A. J. Martin. Quasi-delay-insensitive cir-
cuits are Turing complete.
In Proc. International Sympo-
sium on Advanced Research in Asynchronous Circuits and
Systems. IEEE Computer Society Press, 1996.
[8] R. Manohar and A. J. Martin. Slack elasticity in concurrent
computing. In Proceedings of the Mathematics of Program
Construction, pages 272–285. Springer-Verlag, 1998.
[9] A. J. Martin. Compiling communicating processes into
Distributed Computing,
delay-insensitive vlsi circuits.
1:226–234, 1986.
[10] A. J. Martin. The limitations to delay-insensitivity in asyn-
chronous circuits. Beauty is our business: a birthday salute
to Edsger W. Dijkstra, pages 302–311, 1990.
[11] A. J. Martin, A. Lines, R. Manohar, M. Nystroem, P. Pen-
zes, R. Southworth, and U. Cummings. The design of an
asynchronous mips r3000 microprocessor. In Proceedings of
the 17th Conference on Advanced Research in VLSI (ARVLSI
’97), page 164. IEEE Computer Society, 1997.
[12] Y. Massoud, S. Majors, J. Kawa, T. Bustami, D. MacMillen,
and J. White. Managing on-chip inductive effects.
IEEE
Transactions on Very Large Scale Integration (VLSI) Sys-
tems, 10(6):789–797, 2002.
[13] V. I. Varshavsky. Circuits insensitive to delays in transistors
and wires. Technical report, Helsinki University of Technol-
ogy, November 1989.
[14] A. Yakovlev. Structural technique for fault-masking in asyn-
chronous interfaces. In IEE Proceedings E - Computers and
Digital Techniques, pages 81–91. IEEE Computer Society,
1993.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:46 UTC from IEEE Xplore.  Restrictions apply.