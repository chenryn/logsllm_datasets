# Vulnerable Implicit Service: A Revisit

## Authors
- Lingguang Lei
- Yi He
- Kun Sun
- Jiwu Jing
- Yuewu Wang
- Qi Li
- Jian Weng

### Affiliations
- **Lingguang Lei, Jiwu Jing, Yuewu Wang**  
  Data Assurance and Communication Security Research Center, Chinese Academy of Sciences, China  
  State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, China
- **Yi He, Qi Li**  
  Graduate School at Shenzhen, Department of Computer Science, Tsinghua University, China
- **Kun Sun**  
  George Mason University, Fairfax, VA, USA
- **Jian Weng**  
  Jinan University, Guangzhou, China

### Contact Information
- jingjiwu, wangyuewu: iie.ac.cn
- Email addresses for other authors are available upon request.

## Abstract
In Android applications, services can be invoked either explicitly or implicitly. However, implicit service invocations are susceptible to service hijacking attacks, leading to sensitive information leakage. To mitigate this, Android 5.0 and later versions have banned implicit service invocations, causing the system to throw an exception and crash the application if it attempts such invocations. This policy was expected to force developers to convert implicit service invocations to explicit ones by specifying the package name of the service.

In this paper, we analyze two sets of 1,390 applications downloaded from the Google Play Store before and after the enforcement of the implicit service ban. We developed a static analysis framework called ISA (Implicit Service Analysis) to conduct our study. Our results show that the ban effectively reduced the number of vulnerable service invocations from 643 to 112, a reduction of 82.58%. However, a detailed analysis of the remaining 112 vulnerable invocations reveals that the ban has not fully resolved the service hijacking attacks. Among the 1,390 applications downloaded in May 2017, 36 popular applications remain vulnerable to service hijacking, which can lead to the loss of user bank account and VPN login credentials. Additionally, we found that the ban introduces a new type of denial of service attack. Finally, we discuss the root challenges in resolving service hijacking attacks and propose countermeasures to help mitigate them.

## CCS Concepts
- **Security and Privacy** â†’ Mobile platform security; Software security engineering

## Keywords
- Implicit Intent
- Service Hijacking Attacks
- Denial of Service Attacks

## 1. Introduction
In Android, applications are divided into components that can be reused by other applications through a message-passing mechanism called intents in the Android Inter-Component Communication (ICC) model. However, the ICC model is a primary cause of component hijacking attacks, leading to information leakage and financial loss.

Services, one type of component, can be invoked using either explicit or implicit intents. Explicit intents specify the component or package names, typically used for starting components within the same application or well-known third-party services. In contrast, implicit intents describe the type of action to perform, allowing the system to find a suitable component on the device.

Researchers have found that attackers can exploit implicit service invocations to launch service hijacking attacks. By creating a malicious application that provides a service matching an implicit intent, the attacker can make the system choose their malicious service, especially if it has the highest priority.

To address these vulnerabilities, since Android 5.0 (API level 21), Google has banned implicit service invocations. When a service is invoked implicitly, the application crashes. The goal is to force developers to convert implicit service invocations to explicit ones, thereby mitigating service hijacking attacks.

In this paper, we evaluate the impact of the implicit service ban on developers and its effectiveness in removing vulnerable service invocations. We analyze two sets of the same 1,390 applications downloaded from the Google Play Store before and after the ban. Our study aims to answer two questions:
1. How well is the implicit service ban being accepted by developers?
2. Can the ban resolve service hijacking attacks in Android 5.0 and higher?

To answer these questions, we developed the ISA (Implicit Service Analysis) framework. First, we use android-apktool to convert APK files into smali files, which do not require disassembling Java code and avoid introducing inaccuracies. Next, we developed a static intent analyzer to discover all intents used for invoking service components in the smali code. We also developed a reachability verifier to check if the discovered service invocations are reachable from certain entry points of the apps. Finally, we developed a vulnerable service invocation analyzer to identify vulnerable service invocations.

We applied our framework to two sets of 1,390 popular applications downloaded from the Google Play Store before and after the implicit service ban. The first set, "Old Apps," was downloaded between August and October 2014, before the ban. The second set, "New Apps," was downloaded in May 2017, after the ban had been enforced for 30 months.

Our experimental results show that the ban effectively reduced the number of vulnerable service invocations from 643 to 112, a reduction of 82.58%. However, the ban failed to resolve all service hijacking attacks. Among the 112 remaining invocations, 57 make 36 applications still vulnerable to hijacking, potentially allowing attackers to steal user bank account or VPN login credentials. Given that these are among the most popular applications, over 500 million users could be affected.

A detailed analysis of the remaining 112 vulnerable service invocations revealed two main reasons for the persistence of vulnerabilities:
1. **Difficulty in Determining Package Names**: For certain third-party services, determining the package names is challenging due to the variety of services and the difficulty in verifying the trustworthiness of the apps.
2. **Outdated SDKs and Sample Codes**: Many vulnerable invocations remain because they are invoked through outdated SDKs or sample codes, which still use implicit service invocations. Additionally, when an application's `targetSdkVersion` attribute is set lower than 21, implicit service invocations are still allowed even on newer Android platforms.

To mitigate these issues, we propose several countermeasures:
- **Optimizing Ranking Rules**: Giving higher priority to same-origin and Google third-party services could reduce 44.64% of vulnerable service invocations.
- **Market-Based Service Ranking Algorithm**: Increasing the difficulty for attackers to manipulate the service list ranking.
- **Signature-Based Verification and SDK Hardening**: These measures are promising for mitigating service hijacking attacks.

## 2. Background

### 2.1 Service Components and Intents
A service is an Android application component that performs operations in the background without a user interface. Each service is declared in the application's `Manifest.xml` file and includes an `exported` attribute to define whether the service can be started by other applications. If `exported` is set to `false`, the service can only be started by components within the same application. Services can also define one or more `Intent Filters` to specify the types of intents they can respond to.

There are two ways to allow a service to be started by other applications:
1. Set the `exported` attribute to `true`.
2. Define at least one `Intent Filter` if the `exported` attribute is not explicitly set.

Service components can be started using either `startService()` or `bindService()` API functions. `startService()` performs a single operation with no return values, and the service runs indefinitely in the background. `bindService()` provides a communication interface for the caller to interact with the service, but the service stops when the last client unbinds.