maxs∈S |(pmax,k
s
− pmax,k−1
s
)/pmax,k
s
|  0 → s(cid:48) ∈ S(cid:48))
2) ∀s, s(cid:48) ∈ S(cid:48), there is a path in (S(cid:48),T (cid:48)) from s to s(cid:48).
A maximal end component is one for which there is no
larger end component that contains it. It is known [17] that
all states s within an MEC have the same probability value
. Furthermore, we can safely compress each MEC into
pmax
s
a single state [6]. In the rest of the paper, we assume that
all MECs have already been compressed in this way.
is the set of states outside Ci
Next, we identify strongly connected components (SCCs)
in the MDP. An SCC C is a set of states that is strongly
connected (there is a path between any two states in C) and
maximal (no superset of C is also strongly connected).
SCCs are particularly important in value iteration. Let C
be an SCC, and P re∗(C) ⊆ S\C be the set of states that
can reach C, but are not contained within it. Any change of
a state’s probability value in C affects probability values of
all other states in C, as well as those of states in P re∗(C).
Furthermore, until the probability values of the states in C
converge, the probability values of states in P re∗(C) cannot
converge. In fact, the computation of probability values for
states in P re∗(C) can be postponed until the probability
values in C converge [6].
The set of SCCs in M forms a partition of its states S.
Let Π = {C1, . . ., Cm} be this partition. The successor
set Succ(Ci) of Ci
that
are immediate successors of states in Ci. We say that Ci
depends on Cj if Succ(Ci) ∩ Cj
(cid:54)= ∅. As there is no
cyclic dependence among SCCs, we generate a reversed
topological order C among SCCs such that Cj will appear
before Ci in C if Ci depends on Cj.
SCC-based value iteration processes each SCC separately,
according to the ordering C, and then terminates. For each
SCC, a sequence of approximations is computed, like for
denotes
value iteration. For each state s in an SCC, pmax,k
the
the value computed for s in the kth iteration and pmax,0
to 1 if s ∈ Sy
initial value for s. For any SCC, we set pmax,0
and 0 otherwise. We also let pmax
denote the ﬁnal value for
s. Consider now a particular SCC Ci. The ﬁrst iteration is
performed as follows. For each s ∈ Ci:
(cid:40) max
(cid:80)
where T (cid:48)(s) = {µ ∈ T (s) | ∃s(cid:48) ∈ Succ(Ci) . (cid:0)µ(s(cid:48)) >
s(cid:48) > 0(cid:1)} and p(cid:48)
if s(cid:48) ∈ Succ(Ci), or pmax,0
pmax,0
s
otherwise.
 1),
where p(cid:48)
s(cid:48) = pmax
s(cid:48) =
pmax,k−1
. The iteration on Ci terminates at the k-th iteration
s(cid:48)
when X in Algorithm 3 is empty. Note that Algorithm 3 also
works when we use δ as a maximum relative difference, e.g.,
≥ δ in Algorithm 3 can
the condition pmax,k−1
be replaced by pmax,k−1
≥ δ.
D. The Tarjan Algorithm for SCC Identiﬁcation
− pmax,k−2
−pmax,k−2
x
pmax,k−2
x
x
x
x
We conclude this section by describing the process of
identifying SCCs. A well-known and efﬁcient method for
this is the Tarjan algorithm [7]. Its time and space complex-
ity is linear in the size of the model. The basic idea is to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:25 UTC from IEEE Xplore.  Restrictions apply. 
362Algorithm 3 The k-th iteration (for states in Ci)
≥ δ}
1: X := {x ∈ Ci | pmax,k−1
2: for all x ∈ X do
 0}
for all y ∈ Y do
(cid:80)
T (cid:48)(y) := {µ ∈ T (y) | µ(x) > 0}
s(cid:48)∈S µ(s(cid:48)) · p(cid:48)
pmax,k
s(cid:48)
y
end for
:= max
µ∈T (cid:48)(y)
4:
5:
6:
7:
8: end for
execute a depth-ﬁrst search (DFS) on the model, using a
stack to store states, which we denote stack. During the
search, each state s is assigned two values: s.index for
the order in which states are visited, and s.lowlink for the
smallest index in the SCC containing the state. The second
value is changed as more states in the SCC are discovered.
The root state is the one in which s.index = s.lowlink.
Algorithm 4 is an improved version of the algorithm,
based on [19]. In this algorithm, the root node of each SCC
is never pushed into the DFS stack in order to save time and
space. Note that we convert the probabilistic transition func-
tion T in an MDP into a non-probabilistic transition relation
E, i.e. (s, s(cid:48)) ∈ E if and only if ∃µ ∈ T (s) . µ(s(cid:48)) > 0. The
Tarjan algorithm starts with a call to the recursive function
tarjan with the initial state s and initial value 1 for the
global variable index.
else if s(cid:48) ∈ stack then
if s(cid:48).index is undeﬁned then
tarjan(s(cid:48))
s.lowlink := min{s.lowlink, s(cid:48).lowlink}
s.lowlink := min{s.lowlink, s(cid:48).lowlink}
Algorithm 4 tarjan(s)
1: s.index := index; s.lowlink := index
2: index := index + 1
3: for all (s, s(cid:48)) ∈ E do
4:
5:
6:
7:
8:
end if
9:
10: end for
11: if s.lowlink = s.index then
12:
13:
14:
15: else
16:
17: end if
P OP (stack ) and report
P U SH(stack , s)
end while
while stack (cid:54)=∅∧T OP (stack ).index≥ s.index do
III. ACCELERATING SCC-BASED VALUE ITERATION
The SCC-based version of value iteration, described in
Section II-C above, has already been shown to provide a
speed-up in the time required for quantitative veriﬁcation of
MDPs [6]. We begin by proposing two further improvements
to the technique. Later, in Section V, we will illustrate that
these yield further gains in terms of speed.
A. Eliminating Precomputation
The precomputation step presented in Section II-B, which
identiﬁes the sets Sy and Sn, often speeds up value iteration,
can reduce numerical error and, in the case of Sn, may be
required for correctness. It can, however, be time-consuming.
Here, we show that precomputation can be eliminated for
SCC-based value iteration, whilst retaining most of its
advantages. First, we consider Sn, i.e. the identiﬁcation of
states s with pmax
s = 0.
s = 0 if and
Lemma 3.1: A state in an SCC C has pmax
s(cid:48) = 0 for all states s(cid:48) in Succ(C).
Proof: ⇐. This is trivial. ⇒. Suppose that pmax
only if pmax
s = 0 for
some s ∈ C but pmax
(cid:54)= 0 for some s(cid:48) ∈ Succ(C). There
s(cid:48)
exists a state s(cid:48)(cid:48) ∈ C such that ∃µ ∈ T (s(cid:48)(cid:48)) . µ(s(cid:48)) > 0.
Apparently, s(cid:48)(cid:48) has non-zero maximum probability. By the
deﬁnition of an SCC, there exists a path s1 . . . sn in C such
that s1 = s and sn = s(cid:48)(cid:48). Working back along the path, we
deduce that pmax
s > 0.
sn−1
> 0, . . ., pmax
> 0, pmax
sn−2
= pmax
s1
According to Lemma 3.1, and the algorithm of Sec-
tion II-C, P rob0A can in fact be omitted. We simply take Sn
to be the empty set; states that have maximum probability
0 will not be considered beyond the ﬁrst iteration.
then pmax
s = 1.
with pmax
check to identify some states with pmax
Second, we consider Sy, i.e. the identiﬁcation of states s
s = 1. The following lemma gives us a sufﬁcient
Lemma 3.2: Given an SCC C, let suc0 be the set {x ∈
x  0
s = 1 for all states s in C.
Proof: First, recall that there are no MECs in the MDP.
By removing every distribution from states in C such that
it has a transition reaching suc0 with probability greater
than zero, we obtain a partition of C where each block
forms a connected graph and there are no connections
between blocks. In each block B ⊆ C, each state only
has transitions either leading to states in the same block
or in suc1 = Succ(C)\suc0. For all states s ∈ B, if the
maximum probability of reaching suc1 is less than one,
there exists an inﬁnite path ω starting at s and only passing
states in B. Let inft(ω) be the set of state-distribution pairs
that occur inﬁnitely often in ω. Then according to [17,
Theorem 3.2, page 46], inft(ω) is an end component, which
contradicts the premise.
By Lemma 3.2, we can also omit P rob1E, replacing it
with a simpler check before the ﬁrst iteration for each SCC
(having ﬁrst initialised Sy to F ). This check is considerably
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:42:25 UTC from IEEE Xplore.  Restrictions apply. 
363simpler than the computation required for P rob1E. Since
Lemma 3.2 only gives a sufﬁcient condition, we will not
s = 1 but, as mentioned above,
identify all states with pmax
this does not affect correctness. Furthermore, in our exper-
imental results, this approach always yields the same result
as P rob1E and, more importantly, runs much faster.
Finally, although we do not cover the case of minimum
reachability probabilities in any detail, we brieﬂy state the
following two lemmas which, like Lemma 3.1 and 3.2 above,
permit removal of the precomputation step when calculating
minimum probabilities.
Lemma 3.3: Given an SCC C and its successor set
Succ(C), let suc1 = {x ∈ Succ(C) | pmax
x > 0}. If either:
1) suc1 is empty, or
2) suc1 is non-empty and there does not exist a state s ∈
C such that ∀µ ∈ T (s) . ∃s(cid:48) ∈ suc1 . µ(s(cid:48)) > 0,
then all states in C have minimum probability zero.
Lemma 3.4: A state in an C has minimum probability
one iff all states in the successor set Succ(C) of C, have
minimum probability one.
B. Parallel Computation
SCC-based value iteration also presents opportunities for
parallelisation, which is particularly desirable to exploit,
given the increasing prevalence of multi-core architectures
in mainstream CPU design. The topological order among
SCCs provides a natural structure for parallel computation.
At any step, an SCC can be processed independently (and
thus in parallel), as long as all of its successor set have been
processed. To achieve this, we need a queue to store SCCs
that are ready to be processed. Initially, all SCCs that have an
empty successor set are put in the queue. Each computation
thread takes one SCC from the queue to process, and when
it is done, it puts SCCs that newly become ready into the
queue. The whole process terminates when the queue is
empty. Let Succ(C) be a copy of the successor set Succ(C)
of an SCC C in Π. Algorithm 5 shows the procedure for
parallel computation. Note that in the while loop, only line 5
can be executed in parallel.
As an additional optimisation, MECs identiﬁcation can
also be parallelised. This is done by by ﬁrst partitioning
into SCCs, then searching each one for MECs in parallel.
IV. INCREMENTAL VALUE ITERATION
Our main aim in this paper is to develop incremental
veriﬁcation techniques, which accelerate the process of
analysing a model that has undergone minor changes, by
exploiting the presence of existing veriﬁcation results. This
is a common scenario in practice, for example, when varying
a parameter of a model to investigate the effect that this has
on overall model performance. Another situation when in-
cremental veriﬁcation is particularly useful is in the context
of using quantitative veriﬁcation for online monitoring in a
self-adaptive framework [4].
scc := the head of Queue
compute maximum probabilities for states in scc
for all C ∈ Π . Succ(C) ∩ scc (cid:54)= ∅ do
Algorithm 5 Parallel processing of SCCs
1: Queue := {Ci ∈ Π | Succ(Ci) = ∅}
2: Π := Π\Queue
3: while Queue (cid:54)= ∅ do
4:
5:
6:
7:
8:
9:
10:
end if
11:
end for
12:
13: end while
Succ(C) := Succ(C)\scc
if Succ(C) = ∅ then
Π := Π\{C}
Queue := Queue ∪ {C}
In this paper, we target cases where the probabilities of
some transitions in an MDP undergo changes. We assume,
though, that the transition structure of the model remains
untouched. This means that transitions with probability one
or zero cannot be changed; otherwise, some transitions with
non-zero probability would be added or deleted from the
model. We use M = (S, s,T , r) to denote the original MDP
and M = (S, s,T , r) for the modiﬁed one. Notice that only
T is modiﬁed.
When some probabilities in T are changed, it may be
unnecessary to recompute probability values for all states.
We ﬁrst identify the set Π of SCCs that have been affected
by the changes. It can be generated using Algorithm 6.
First, Π is initialised to an empty set. Then, we scan the
SCC partition according to the reverse topological order and
add Ci to Π if Ci satisﬁes one of two conditions:
1) There exists a state s ∈ Ci such that one distribution
2) There exists an SCC C ∈ Π that Ci depends on.
from s is involved in the changes;
Algorithm 6 Generate Π
1: Π := ∅
2: for all i ∈ 1, . . . , m do