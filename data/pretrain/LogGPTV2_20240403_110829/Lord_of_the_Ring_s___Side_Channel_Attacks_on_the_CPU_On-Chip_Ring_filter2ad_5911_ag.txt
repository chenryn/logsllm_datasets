[63] Dan Luu. Terminal latency. https://danluu.com/term-latency/.
Accessed on 17.06.2020.
[64] Andrew Marshall, Michael Howard, Grant Bugher, and Brian Harden.
Security Best Practices For Developing Windows Azure Applications.
Microsoft, June 2010.
[65] Clémentine Maurice, Nicolas Le Scouarnec, Christoph Neumann,
Olivier Heen, and Aurélien Francillon. Reverse engineering Intel
last-level cache complex addressing using performance counters. In
RAID, 2015.
USENIX Association
30th USENIX Security Symposium    659
[66] Clémentine Maurice, Christoph Neumann, Olivier Heen, and Aurélien
Francillon. C5: Cross-cores cache covert channel. In DIMVA, 2015.
[67] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner,
Daniel Gruss, Carlo Alberto Boano, Stefan Mangard, and Kay Römer.
Hello from the other side: SSH over robust cache covert channels in
the cloud. In NDSS, 2017.
[68] John V Monaco. SoK: Keylogging side channels. In S&P, 2018.
[69] Rik Myslewski. Intel Sandy Bridge many-core secret sauce. https:
//www.theregister.com/2010/09/16/sandy_bridge_ring_i
nterconnect?page=1. Accessed on 17.06.2020.
[70] Michael Neve and Jean-Pierre Seifert. Advances on access-driven
cache attacks on AES. In SAC, 2006.
[71] Khang T Nguyen. Introduction to cache allocation technology in the
Intel Xeon processor E5 v4 family. https://software.intel.com
/content/www/us/en/develop/articles/introduction-to-
cache-allocation-technology.html. Accessed on 17.06.2020.
[72] Hamed Okhravi, Stanley Bak, and Samuel T King. Design, imple-
mentation and evaluation of covert channel attacks. In HST, 2010.
[73] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Ange-
los D Keromytis. The spy in the sandbox: Practical cache attacks in
JavaScript and their implications. In CCS, 2015.
[74] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache attacks and
countermeasures: the case of AES. In CT-RSA, 2006.
[75] Rahul Pal and Ishwar Agarwal. Method and apparatus to build a
monolithic mesh interconnect with structurally heterogenous tiles,
Patent US20180189232, 2018.
[76] Priyadarsan Patra and Chinna Prudvi. Fabrics on die: Where function,
debug and test meet. In NOCS, 2015.
[77] Colin Percival. Cache missing for fun and proﬁt. In BSDCan, 2005.
[78] Cesar Pereida García, Billy Bob Brumley, and Yuval Yarom. Make
sure DSA signing exponentiations really are constant-time. In CCS,
2016.
[79] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz,
and Stefan Mangard. DRAMA: Exploiting DRAM addressing for
cross-CPU attacks. In USENIX Security, 2016.
[80] Raspberry Pi Foundation. Pressing a key - understanding computer
systems. https://www.futurelearn.com/courses/computer-s
ystems/0/steps/53503. Accessed on 17.06.2020.
[81] Paccagnella Riccardo, Licheng Luo, and Christopher W. Fletcher.
Lord of the ring(s): Side channel attacks on the CPU on-chip ring
interconnect are practical. Preprint, arXiv:2103.03443 [cs.CR], 2021.
[82] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage.
Hey, you, get off of my cloud: Exploring information leakage in third-
party compute clouds. In CCS, 2009.
[83] Bholanath Roy, Ravi Prakash Giri, C Ashokkumar, and Bernard
Menezes. Design and implementation of an espionage network for
cache-based side channel attacks on AES. In ICETE, 2015.
[84] Subhash Saini, Johnny Chang, and Haoqiang Jin. Performance evalu-
ation of the Intel Sandy Bridge based NASA Pleiades using scientiﬁc
and engineering applications. In PMBS, 2013.
[85] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clé-
mentine Maurice, Raphael Spreitzer, and Stefan Mangard. Keydrown:
Eliminating software-based keystroke timing side-channel attacks. In
NDSS, 2018.
[86] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan
Mangard. Fantastic timers and where to ﬁnd them: High-resolution
microarchitectural attacks in JavaScript. In FC, 2017.
[87] Anand Lal Shimpi. Intel’s sandy bridge architecture exposed. https:
//www.anandtech.com/show/3922/intels-sandy-bridge-ar
chitecture-exposed/4, 2010. Accessed on 17.06.2020.
[88] Dawn Xiaodong Song, David A Wagner, and Xuqing Tian. Timing
analysis of keystrokes and timing attacks on SSH. In USENIX Security,
2001.
[89] Read Sprabery, Konstantin Evchenko, Abhilash Raj, Rakesh B Bobba,
Sibin Mohan, and Roy Campbell. Scheduling, isolation, and cache
allocation: A side-channel defense. In IC2E, 2018.
[90] Raphael Spreitzer, Veelasha Moonsamy, Thomas Korak, and Stefan
Mangard. Systematic classiﬁcation of side-channel attacks: A case
study for mobile devices. IEEE Commun. Surv. Tutor., 20(1), 2017.
[91] Dean Sullivan, Orlando Arias, Travis Meade, and Yier Jin. Microar-
chitectural mineﬁelds: 4K-aliasing covert channel and multi-tenant
detection in iaas clouds. In NDSS, 2018.
[92] Ramacharan Sundararaman, Tracey L Gustafson, and Robert J
Safranek. Cross-die interface snoop or global observation message
ordering, Patent US9785556B2, 2017.
[93] Paul Teich. The heart of AMD’s epyc comeback is Inﬁnity Fabric.
https://www.nextplatform.com/2017/07/12/heart-amds-e
pyc-comeback-infinity-fabric/. Accessed on 17.06.2020.
[94] Eran Tromer, Dag Arne Osvik, and Adi Shamir. Efﬁcient cache attacks
on aes, and countermeasures. Journal of Cryptology, 23(1), 2010.
[95] Jo Van Bulck, Frank Piessens, and Raoul Strackx. SGX-step: A
practical attack framework for precise enclave execution control. In
SysTEX, 2017.
[96] Venkatanathan Varadarajan, Thomas Ristenpart, and Michael Swift.
In
Scheduler-based defenses against cross-VM side-channels.
USENIX Security, 2014.
[97] James R. Vash, Bongjin Jung, and Rishan Tan. System-wide quies-
cence and per-thread transaction fence in a distributed caching agent,
Patent US8443148B2, 2013.
[98] Pepe Vila and Boris Köpf. Loophole: Timing attacks on shared event
loops in chrome. In USENIX Security, 2017.
[99] VMware Knowledge Base. Security considerations and disallowing
inter-virtual machine transparent page sharing (2080735). https:
//kb.vmware.com/s/article/2080735. Accessed on 17.06.2020.
[100] Daimeng Wang, Zhiyun Qian, Nael Abu-Ghazaleh, and Srikanth V Kr-
ishnamurthy. PAPP: Prefetcher-aware prime and probe side-channel
attack. In DAC, 2019.
[101] Yao Wang, Andrew Ferraiuolo, and G Edward Suh. Timing channel
protection for a shared memory controller. In HPCA, 2014.
[102] Zhenghong Wang and Ruby B Lee. Covert and side channels due to
processor architecture. In ACSAC, 2006.
[103] Hassan MG Wassel, Ying Gao, Jason K Oberg, Ted Huffmire, Ryan
Kastner, Frederic T Chong, and Timothy Sherwood. SurfNoC: A low
latency and provably non-interfering approach to secure networks-on-
chip. ACM SIGARCH Computer Architecture News, 41(3), 2013.
[104] WikiChip. Sandy bridge (client) - microarchitectures - Intel. https:
//en.wikichip.org/wiki/intel/microarchitectures/sand
y_bridge_(client). Accessed on 17.06.2020.
[105] Zhenyu Wu, Zhang Xu, and Haining Wang. Whispers in the hyper-
space: High-speed covert channel attacks in the cloud. In USENIX
Security, 2012.
[106] Mengjia Yan, Read Sprabery, Bhargava Gopireddy, Christopher
Fletcher, Roy Campbell, and Josep Torrellas. Attack directories, not
caches: Side channel attacks in a non-inclusive world. In S&P, 2019.
[107] Fan Yao, Milos Doroslovacki, and Guru Venkataramani. Are coher-
ence protocol states vulnerable to information leakage? In HPCA,
2018.
[108] Yuval Yarom and Katrina Falkner. Flush+Reload: a high resolution,
low noise, L3 cache side-channel attack. In USENIX Security, 2014.
660    30th USENIX Security Symposium
USENIX Association
/∗ circular pointer−chasing list of W_LLC addresses ∗/
repetitions = 100000; /∗ number of samples wanted ∗/
void ∗∗addr;
const int
uint32_t samples[ repetitions ];
for ( i = 0;
i  2, we observe that keystroke events become harder
to identify using a simple moving average (Figure 10d). Fur-
ther, with N > 4, we observe that the keystroke events become
almost entirely indistinguishable from noise.
USENIX Association
30th USENIX Security Symposium    661
12345678Raw bandwidth (Mbps)1234Capacity (Mbps)Error probabilityCapacity0.000.050.100.150.20Error probability175200Latency (cycles)raw data0.00.51.01.52.02.5Time (cycles)1e6165170175Latency (cycles)moving average 50175200Latency (cycles)raw data0.00.51.01.52.02.5Time (cycles)1e6165170Latency (cycles)moving average 50175200Latency (cycles)raw data0.00.51.01.52.02.5Time (cycles)1e6165170175Latency (cycles)moving average 50175200Latency (cycles)raw data0.00.51.01.52.02.5Time (cycles)1e6170175Latency (cycles)moving average 50Figure 11: Ring interconnect contention heatmap when the receiver performs loads that hit in LLC, and the sender performs
loads that miss in the LLC. Similar to Figure 3, the y axes indicate the core where the sender and the receiver run, and the x axes
indicate the LLC slice from which they perform their loads. Cells with a star ((cid:70)) indicate slice contention (when Rs = Ss), while
gray cells indicate contention on the ring interconnect (with darker grays indicating larger amounts of contention).
662    30th USENIX Security Symposium
USENIX Association
01234567Receiver slice 0Sender slice:01234567Receiver core 0Sender core:01234567Receiver slice 1Sender slice:0123456701234567Receiver slice 2Sender slice:0123456701234567Receiver slice 3Sender slice:0123456701234567Receiver slice 4Sender slice:0123456701234567Receiver slice 5Sender slice:0123456701234567Receiver slice 6Sender slice:0123456701234567Receiver slice 7Sender slice:012345670123456701234567Receiver core 1Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 2Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 3Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 4Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 5Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 6Sender core:01234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567Receiver core 7Sender core:0123456701234567012345670123456701234567012345670123456701234567012345670123456701234567012345670123456701234567