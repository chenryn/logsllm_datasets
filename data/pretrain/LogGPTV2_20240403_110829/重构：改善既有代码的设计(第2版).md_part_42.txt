= deliveryDate(anorder, isRush);
，我就可以移除deliveryDate函数。
isRush）
。若果真如此，我还是会使用移除标记参数
，但只有当“根据参数值做分发"的
，将其作为标记参数使用；
亿红
例如下面
另
---
## Page 391
人一见即知不应直接使用这个函数。
限制原函数的可见性，或是将其改名（例如改为deliveryDateHelperonly），让
的处理一样。如果没有任何一个调用者向isRush参数传入正常的数据，我最后会
不过它们并非从原函数中拆分而来，而是用代码文本强行定义的。
很大。所以我选择退而求其次，在deliveryDate之上添加两个函数：
这个版本的deliveryDate函数:
function deliveryDate(anorder, isRush） {
result = anorder.placedon.plusDays(2 + deliveryTime);
else
else
else if (isRush)
else
let.
return result;
Let
deliveryTime = 4;
deliveryTime
随后，
 本质上，这两个包装函数分别代表了deliveryDate函数一部分的使用方式。
 这种情况下，想把围绕isRush的分发逻辑剥离到顶层，需要的工作量可能会
if
deliveryTime 
 deliveryTime 
deliv
result;
if
1f
(anorder.deliveryState === "NY" Il anorder.deliveryState === "NH") {
iveryTime;
，我同样可以逐一替换原函数的调用者，
.deliveryState === "NH" && !isRush)
三
3；
.deliveryState === "ME")
3;
就跟前面分解条件表达式之后
---
## Page 392
整经常发生在引入参数对象（140）之后，我会搜寻使用原来的数据泥团的代
码坏味道（依恋情结），
是在两者不在同一个模块中的时候。
中去。
据，处理这部分数据的逻辑常会重复，此时可以把这些处理逻辑搬移到完整对象
数列表，让函数调用更容易看懂。
中导出更多的数据，
if (aPlan.withinRange(aRoom.daysTempRange))
动机
const 
const low =
11.4保持对象完整
也有时我不想采用本重构手法，
“传递整个记录"的方式能更好地应对变化：如果将来被调的函数需要从记录
一个函数，我会更愿意把整个记录传给这个函数，在函数体内部导出所需的
从一个对象中抽取出几个值，
如果我看见代码从一个记录结构中导出几个值，
 high = aRoom.daysTempRange.high;
= aRoom.daysTempRange.low;
 我就不用为此修改参数列表。并且传递整个记录也能缩短参
high))
，通常标志着这段逻辑应该被搬移到对象中。
(Preserve Whole Object)
(V)↓
M)b→
，如果有很多函数都在使用记录中的同一组数
■← p()
单独对这几个值做某些逻辑操作，
，因为我不想让被调函数依赖完整对象，尤其
然后又把这几个值一起传递
 保持对象完
这是一种代
---
## Page 393
如果当天温度不符合计划要求，就发出警告。
度
·所有调用处都修改过来之后，使用内联函数（115）把旧函数内联到新函数体
·新建一个空函数，给它以期望中的参数列表（即传入完整对象作为参数）。
为参数，
用函数。
码，代之以使用新的对象。
范例
·给新函数改名，
可以用移除死代码（237）去掉。
·在新函数体内调用旧函数，
字，同时修改所有调用处。
执行静态检查。
做法
（182）把这一部分功能单独提炼出来。
内。
逐一
L
（即来源于完整对象的各项数据）。
还有一种常被忽视的情况：调用者将自己的若干数据作为参数，传递给被调
 如果几处代码都在使用对象的一部分功能，可能意味着应该用提炼类
我们想象一个室温监控系统，
一修改旧函数的调用者，令其使用新函数，每次修改之后执行测试。
修改之后，调用处用于“从完整对象中导出参数值"的代码可能就没用了，
给这个函数起一个容易搜索的名字，这样到重构结束时方便替换。
直接传递给目标函数。
从重构开始时的容易搜索的临时名字，改为使用旧函数的名
并把新的参数（即完整对象）映射到旧的参数列表
 它负责记录房间一天中的最高温度和最低温
---
## Page 394
调用方..
新函数。
class HeatingPlan...
新参数列表到旧函数参数列表的映射。
class HeatingPlan...
表
class HeatingPlan..
调用方..
字
xxNEwwithinRange(aNumberRange） {
alerts.push("room temperature
return
然后在新函数体内调用现有的withinRange函数。因此，新函数体就完成了从
再加上一个容易替换的前缀。
 其实我不必将“温度范围"的信息拆开来单独传递，只需将整个范围对象传递
现在开始正式的替换工作了，我要找到调用现有函数的地方，将其改为调用
因为这个函数最终要取代现有的withinRange函数，所以它也用了同样的名
首先，我在HeatingPlan类中新添一个空函数，给它赋予我认为合理的参数列
0igh
this
. withinRange(aNumberRange.low, aNumberRange.high) ;
high)
went outside range");
high;
---
## Page 395
调用方..
class HeatingPlan...
以很方便地全局替换。
使用的开发环境不支持可靠的函数改名操作，有这个极具特色的前缀在，我也可
xxNEwwithinRange(aNumberRange) {.
class HeatingPlan...
调用方..
withinRange(aNumberRange) {
使用移除死代码（237）。
const low = aRoom.daysTempRange.low;
if (!aPlan. xxNEwwithinRange(aRoom. daysTempRange))
const low = aRoom.daysTempRange.low;
 alerts.push("room temperature went outside range");
const high=aRoom.daysTempRange.high;
return
终于可以去掉新函数那难看的前缀了，
在修改调用处时，
调用处全部替换完成后，用内联函数（115）将旧函数内联到新函数体内。
每次替换一处调用代码，每次修改后都要测试。
high
II
.10W
我可能会发现一些代码在修改后已经不再需要，此时可以
。
this.
.daysTempRange))
:_temperatureRange.low)&&
记得同时修改所有调用者。
。就算我所
---
## Page 396
调用方...
调用方..
const tempRange = aRoom.daysTempRange;
if (!isWithinRange)
const low = aRoom.daysTempRange.low;
出来。
调用者代码还不具备可提炼的函数形，不过我可以先做几次提炼变量
const low = aRoom.daysTempRange.low;
调用方...
手法的组合来得到新函数。
是创建新函数最容易的方式。不过有时还会用到另一种方式：可以完全通过重构
const
alerts.push("room temperature went outside range");
范例：换个方式创建新函数
alerts.push("room temperature went outside range");
 我要先对代码做一些整理，
在上面的示例中，我直接编写了新函数。
完成这一步之后，就可以用提炼函数（106）来创建新函数
然后把输入参数也提炼出来。
我从一处调用现有函数的代码开始。
1oW
=tempRange.Iow
使其轮廓显现出来。首先，我要把对旧函数的调用从条件判断中解放
.within
nRange(low
= aPlan.withinRange(low, high);
aPlan.withinRange(low, high);
high)
以便用提炼函数（106）来创建新函数。
，大多数时候，这一步非常简单，
目前的
---
## Page 397
开发工具支持可靠的提炼和内联操作，用这种方式进行本重构会特别流畅。
class HeatingPlan...
调用方..
顶层作用域...
调用方..
几个变量出来，现在可以把这些变量也内联回去。
xXNEWwithinRange(tempRange）{
const.
（198）把新函数也搬过去。
function xxNEWwithinRange(aPlan, tempRange)
const low = tempRange.low;
 aierts.push("room temperature went outside range");
+
const
 aierts.push("room temperature went outside range");
return isWithinRange;
const
const
return iswithinRange;
const
这种方式的好处在于：
由于旧函数属于另一个上下文（HeatingPlan类），我需要用搬移函数
重构刚开始的时候，
剩下的过程就跟前面一样了:
sWi
tempRange.low;
= xxNEwwithinRange(aPlan, 
this.withinRange(low, high);
aPlan.withinRange(low, high);
，为了清晰分离函数调用，
它完全是由其他重构手法组合而成的。
 替换其他调用者，
 tempRange);
以便提炼出新函数，我提炼了
 然后把旧函数内联到新函数
如果我使用的
---
## Page 398
值；参数去除后，责任就被转移给了函数本身。
确的参数值"的责任被转移：有参数传入时，调用者需要负责获得正确的参数
的参数值，其实原本调用者是不需要费这个力气的。
这就是重复。
列表越短就越容易理解。
的主要方式。
动机
function availableVacation(anEmployee) {
availableVacation(anEmployee)
function availableVacation(anEmployee, grade) {
availableVacation(anEmployee, anEmployee.grade);
 // calculate vacation...
// calculate vacation.
Query)
11.5
“同样容易"四个字，
如果调用函数时传入了一个值，
函数的参数列表应该总结该函数的可变性，
反向重构：以参数取代查询（327)
曾用名：以函数取代参数（Replace Parameter with Method)
以查询取代参数（Replace Parameter with
 这个本不必要的参数会增加调用者的难度，因为它不得不找出正确
 和任何代码中的语句一样，参数列表应该尽量避免重复，并且参数
anEmployee.grade;
划出了一条判断的界限。
f(){g()
 而这个值由函数自己来获得也是同样容易，
，标示出函数可能体现出行为差异
一般而言，我习惯于简化调用
去除参数也就意味着“获得正
---
## Page 399
class Order...
get finalPrice()
虑下列代码。
·全部替换完成后，使用改变函数声明（124）将该参数去掉。
·将函数体内引用该参数的地方改为调用新建的函数。
·如果有必要，使用提炼函数（106）将参数的计算过程提炼到一个独立的函数
会去掉它的参数，让它去访问一个可变的全局变量。
致），这样的函数既容易理解又容易测试，我不想使其失去这种优秀品质。我不
transparency,
任何理由要同时传递这两个参数。
取代参数最安全的场景。
虑使用以查
从一个对象中获取某些原本想要剥离出去的数据。在这些情况下，都应该慎重考
素的存在。这种“不必要的依赖关系"除了新增的以外，也可能是我想要稍后去除
要的依赖关系一
别论了。
的
方，
范例
中。
做法
return this.discountedPrice(basePrice, discountLevel);
let discountLevel;
const basePrice = this.quantity * this.itemPrice;
，例如为了
 如果想要去除的参数值只需要向另一个参数查询就能得到，这是使用以查询
，因此我愿意把责任移交给函数本身，但如果函数难以承担这份责任，就另当
某些重构会使参数不再被需要，这是我最常用到以查询取代参数的场合。考
另外有一件事需要留意：如果在处理的函数具有引用透明性（referential
不使用以查询取代参数最常见的原因是，移除参数可能会给函数体增加不必
查询取代参数。
即，不论任何时候，
一迫使函数访问某个程序元素，
> 10o）discountLevel = 2;
只要传入相同的参数值，
，而我原本不想让函数了解这个元
每次修改后执行测试。
该函数的行为永远-
---
## Page 400
class Order...
discountedPrice(basePrice, discountLevel) {
class Order...
用discountLevel函数。
class Order...
就得到了如下代码。
discountedPrice(basePrice, discountLevel){