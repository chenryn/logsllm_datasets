364 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
[25]. In benign fault-tolerant 
which are individual 
components 
of 
one or more objects, 
state within the state machine. 
that have the lock on given state to execute 
are not concurrent). 
much higher efficiency 
frequent contention 
if two clients 
al­
where lockholders 
enable its massive parallelism 
environments, 
sive, other clients 
To tolerate 
lock semantics 
and that a broken lock is always detected 
are not violated 
Byzantine 
or servers 
faults, 
may crash or be unrespon­
must be able to break the lock. 
that 
Zzyzx must  also  ensure 
by faulty servers 
or clients 
by correct 
locks, and then only al­
clients. 
By allowing 
clients 
to acquire 
of operations 
on it, Zzyzx achieves 
lowing clients 
operations 
for sequences 
can proceed on strictly 
ownership,  thus 
avoiding 
Also, locked state can be transferred 
ing non-overlapping 
locked state. 
sets of servers 
local state, 
from that client. 
Each replica 
given evidence 
of lock 
all inter-replica 
communication. 
to other servers, 
allow­
to handle independently 
operation's 
re­
if neither 
invocation. 
This paper makes 
and contention. 
contention 
to the object or interleave 
if distinct 
clients 
An ob­
submit con­
requests to it 
For example, 
requests 
the other's 
concurrency 
are concurrent 
Two operations 
sponse  precedes 
a distinction between 
ject experiences 
current 
(even if those requests 
an object experiences 
ternate 
by long contentionlree 
an object are issued by a single client. 
contention-free 
ing is beneficial, 
objects 
and enables 
voke operations 
mance that objects 
since it provides 
an optimized 
runs on objects 
writing 
to it. Low contention 
It is precisely 
such 
for which Byzantine 
Lock­
exclusive 
protocol 
to be used to in­
access to those 
can be characterized 
runs, where multiple 
operations 
on 
3. Definitions and system model 
This paper makes the same assumptions 
about network 
and the security 
asynchrony 
(e.g.,  MACs,  signatures, 
same guarantees 
ity), as the 
of liveness and correctne
of cryptographic 
and offers 
the 
and hash functions), 
most closely 
related 
primitives 
ss (linearizabil­
prior works [7, 8,20]. 
faulty servers 
given 3f + 1 servers. 
up to f Byzantine 
faulty clients, 
Zzyzx allows physical 
and any 
to take 
namely as log servers 
servers 
or 
can be co­
A log server and replica 
roles in the protocol, 
server, 
or each can be supported 
Zzyzx tolerates 
number of Byzantine 
As will be discussed, 
on different 
state machine replicas. 
located 
by separate 
roles to physical 
there are 3f + 1 log servers, 
3f + 1 replicas, 
on a single 
servers, 
physical 
the presentation 
here assumes that 
at most f of which fail, and 
physical  servers. 
Regardless of the mapping of 
at most f of which fail. 
on them. As such, it is important 
be defined so as to minimize 
for perfor­
contention. 
an object-based 
Zzyzx, HQ [8], and Q/U [1] provide 
[15, Appendix 
A.l.l], which dif­
[7, 20] in that each request 
it touches. 
may complicate 
must 
Specifying 
which 
some opera­
state machine interface 
fers from other protocols 
include 
the list of objects that 
objects 
are touched 
tions  (e.g., 
for many applications 
(e.g., 
protocol
Many replication 
dereferencing 
in advance 
distributed 
s elect a server 
pointers), 
metadata 
but it poses no problems 
services). 
as a leader, call­
[24, 27]. For simplic­
Locking 
ness, this paper assumes Byzantine 
activities 
so certain 
ing it the primary [7, 20] or sequencer 
ity and concrete
on top of PBFT or Zyzzyva, 
egated to the primary 
tine Locking is not dependent 
and can build on a variety 
chine protocols. 
to simplify 
of underlying 
can be rel­
But, Byzan­
on a primary-based 
the protocol. 
protocol, 
replicated 
state ma­
This section 
describes 
Byzantine 
Locking and Zzyzx at 
are pro­
and a more formal  treatment 
report [15, Chapter 5]. Byzantine 
codes (MACS) and digital sig­
about the 
of faulty 
Byzantine 
Byzantine 
it requires 
each others' 
primitives 
no assumptions 
nodes  (i.e., 
Locking requires 
except that 
that 
messages 
message authentication 
nodes use to authenticate 
Moreover, 
of the network, beyond 
no assumptions 
faults), 
behavior 
they are unable to defeat the cryptographic 
correct 
(i.e., 
natures). 
synchrony 
cated state-machine 
ministic) 
make progress in an asynchronous 
even if only a single benign fault might occur [12], such 
protocols 
synchronous 
Byzantine 
underlying 
Locking inherits 
protocol. 
repli­
what the substrate 
a (deter­
protocol 
state machine cannot be guaranteed 
requires.  Because 
[10] in order to ensure liveness. In general, 
the liveness properties 
replicated 
generally 
the network to be eventually 
about the 
require 
of the 
network environment, 
to 
4. Byzantine Locking and Zzyzx 
an efficient 
a high level. Details 
vided in the technical 
Locking provides 
a client 
by providing 
replicated 
objects 
sive access to the object. 
A client 
clusive 
Zzyzx implements 
or Zyzzyva [20], as illustrated 
are unlocked 
erations 
labeled 
contention, 
interface 
the locking 
to lock a set of objects. 
by default. 
Byzantine 
the client 
mechanism 
to modify 
the client 
temporary exclu­
that holds temporary 
ex­
access to an object is said to have locked the object. 
Locking on top of PBFT [7] 
in Figure 2. In Zzyzx, objects 
At first, each client 
sends all op­
PBFT or Zyzzyva (the substrate 
through 
A in Figure 2). Upon realizing 
interface 
that there is little 
sends a request 
through 
the substrate 
As in prior protocols 
[1, 7, 8, 20], Zzyzx satisfies 
clients. 
the perspective 
of correct 
[17] from 
earizability 
earizability 
requires 
leaving 
quentially, 
time. The presentation 
this requirement 
that correct 
at most one operation 
issue operations 
outstanding 
clients 
in this paper also assumes this, but 
to 
Each operation 
applies 
can be relaxed. 
lin­
Lin­
se­
at a 
operation 
4.1. 
in Section 
For subsequent  operations 
are described 
uses the log interface 
that touch only locked ob­
(B in Figure 2). The 
of the log 
from the simplicity 
of Zzyzx derives 
the client 
jects, 
performance 
interface, 
which is little 
more than a replicated 
append-only 
The substrate interface 
and 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
365 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
A) Substrate 
opl, op2, ... 
(empty) 
request logs 
servers Per-client 
of Zzyzx can be di­
needed for an operation, 
in Section 
described 
Figure 2: Zzyzx components. The execution 
vided into three subprotocols, 
has not locked the objects 
a substrate 
a client holds locks for all objects 
client 
access an objectfor which another 
subprotocol 
uses the log interface 
is run (Section 
(Section 
protocol 
client 
4.3). 
such as PBFT or Zyzzyva (Section 
4.1). B) If 
touched by an operation, 
the 
4.2). C) If a client tries to 
4. A) If a client 
the client 
uses 
holds a lock, the unlock 
uses the substrate 
interface. 
the client 
sends  its  request 
to the 
replica. 
in which case the client 
objects, 
As in PBFT and Zyzzyva, 
primary 
by the request  is 
substrate 
protocol, 
messages to the other replicas. 
batching 
The primary 
locked. If not, the primary resumes 
the 
checks if any object touched 
requests and sending 
ordering 
If an object touched 
by the request 
is locked, 
the primary 
described 
until all touched 
is enqueued 
As objects 
the unlock subprotocol, 
initiates 
The request 
locked. 
enqueued 
quest have been unlocked, 
col as above. 
are unlocked, 
for which all objects 
and resumes 
request 
the primary 
4.3. 
in Section 
objects 
are un­
dequeues 
each 
touched 
the substrate 
proto­
by the re­
Note that a client 
can participate 
and in fact does not need to be aware 
in Zzyzx using only the 
protocol, 
substrate 
of the locking 
state machine protocol 
tine Locking without 
mechanism 
at all. In general, 
a replicated 
can be upgraded 
to support 
Byzan­
affecting 
legacy clients. 
A client 
can attempt 
to lock its working set to improve its 
object to its list of locked 
adds the 
return the value of the per-client 
locking 
the client 
evaluate 
to grant the 
protocol. 
policy to determine 
for each ob­
a de­
upon unlock and used to 
If 
do so, it sends a lock request 
The replicas 
whether 
state between the log servers 
concurrency 
which is incremented 
The replicas  also 
performance. To 
ject using the substrate 
terministic 
lock. If granted, 
objects. 
vs counter, 
synchronize 
there is little 
set can be locked in one operation. 
file in a file system  is an 
directory 
cient log interface 
prototype 
each replica 
ject without 
threshold 
counts how often a single 
contention. 
across a set of objects, 
For example, 
entire 
could be locked upon login and the effi­
used for nearly all operations. 
client 
(The evaluation 
accesses an ob­
6 uses a 
then a client's 
in Section 
if each 
home 
object, 
subtree 
of ten.) 
The Zzyzx 
and replicas. 
the entire 
uses a simple policy to decide to lock an object: 
4.2. The log interface 
may find 
of 
Upon invoking 
an operation 
in Zzyzx, a client 
touched by the operation 
in which case the client 
increments 
its request 
used for each operation 
uses the log inter­
number, which is a 
issued through 
are in its  list 
and builds a message containing 
number, and the VS. It then computes 
the request, 
the log 
the 
a MAC of the 
that all objects 
locked objects, 
face. The client 
local counter 
interface, 
request 
message for each log server. 
and the  hash  is 
message 
(Large requests are hashed, 
each log server  verifies 
its 
a request, 
then verifies 
Upon receiving 
server 
If the request 
MAC.  The log 
der as follows: 
recent request number 
cate and is ignored. 
recent number, the most recent response 
lower than the most 
the request is 
a dupli­
the most 
is re-sent. 
If the re-
number matches 
for the client, 
If the request 
number  is 
that the 
request 
is in or­
increments a 
to 31 + I log servers, 
co-located 
sequence 
num­
which may 
in­
with the substrate 
in order, each log server 
a client 
log. To issue a request, 
ber and sends the request 
or may not be physically 
terface's  replicas. 
appends the request 
the request 
client. 
the operation 
Section 
on its local state, 
If 21 +  I log servers 
is complete. 
to its per-client 
and returns 
provide 
If the request  is 
4.2. 
The log interface 
is described 
in 
a response 
to the 
request 
log, executes 
matching 
responses, 
If another client attempts 
to access a locked object 
the primary 
initiates 
interface, 
the substrate 
on their state using the substrate 
and copy the updated 
the un­
(C in Figure 2). The primary sends a mes­
through 
lock subprotocol 
sage to each log server to unlock the object. 
reach agreement 
mark the object as unlocked, 
back into the replicas. 
subsequently  attempts 
interface, 
client 
its request 
retries 
unlock subprotocol 
the log server replies 
through 
the log 
with an error code, and the 
the substrate 