# Efficient, DoS-Resistant, Secure Key Exchange for Internet Protocols

## Authors
- William Aiello, AT&T Labs Research
- Steven M. Bellovin, AT&T Labs Research
- Matt Blaze, AT&T Labs Research
- John Ioannidis, AT&T Labs Research
- Omer Reingold, AT&T Labs Research
- Ran Canetti, IBM T.J. Watson Research Center
- Angelos D. Keromytis, Columbia University

## Abstract
We introduce JFK, a new key exchange protocol designed primarily for use in the IP Security Architecture. This protocol is simple, efficient, and secure, with a sketched proof of its security properties. JFK introduces several novel engineering parameters that allow for various trade-offs, notably the ability to balance the need for perfect forward secrecy against susceptibility to denial-of-service (DoS) attacks.

## 1. Introduction
Several public-key-based key-setup and key-agreement protocols have been developed and implemented for various applications and environments. For the IPsec protocol suite, IKE [15] is the current standard. However, IKE has several deficiencies, including a high number of rounds, vulnerability to DoS attacks, and complexity, which has led to interoperability issues.

While it might be possible to patch IKE to address these issues, we propose a new protocol, "JFK" (Just Fast Keying), specifically engineered for Internet security applications. 

### 1.1 Design Goals
Our design goals for JFK include:

- **Security**: Only the participants should have access to the generated key.
- **Perfect Forward Secrecy (PFS)**: The protocol must approach PFS, allowing for a trade-off between PFS and other requirements like efficiency and DoS resistance.
- **Privacy**: The protocol must protect the privacy of the initiator and/or responder, as appropriate.
- **Memory-DoS Resistance**: The protocol must resist memory exhaustion attacks.
- **Computation-DoS Resistance**: The protocol must resist CPU exhaustion attacks on the responder.
- **Efficiency**: The protocol must be efficient in terms of computation, bandwidth, and the number of rounds.
- **Non-Negotiated**: The protocol should avoid complex negotiations over capabilities.
- **Simplicity**: The protocol should be as simple as possible, within the constraints of the requirements.

#### PFS Property
PFS is an attribute of encrypted communications that ensures a long-term key compromise does not affect the security of past session keys. In JFK, we treat the amount of forward secrecy as an engineering parameter that can be traded off against other necessary functions, such as efficiency or DoS resistance. This aligns with the reality of today's Internet systems, where a compromise during a security association reveals the plaintext of ongoing transmissions. JFK allows parties to reuse the same secret Diffie-Hellman exponents for multiple exchanges within a given time period, saving costly modular exponentiations.

#### Privacy Property
The protocol must not reveal the identity of a participant to any unauthorized party, including an active attacker. Generally, protecting the initiator's privacy is more important since the initiator is typically a relatively anonymous "client," while the responder's identity may already be known. We propose two alternative protocols: one that protects the initiator and another that protects the responder.

#### DoS Properties
Resistance to DoS attacks has become increasingly important. Photuris [24] was the first published key management protocol to consider DoS resistance. We believe these properties are at least as important today.

#### Efficiency Property
Key setup must be performed frequently enough that it can become a bottleneck. The key exchange protocol must minimize computation, total bandwidth, and round trips. Using JFK, only two round-trips are needed to set up a working security association, a significant improvement over existing protocols like IKE.

#### Non-Negotiated and Simplicity Properties
Complexity and round trips should be avoided, as they can lead to resource consumption and implementation errors. Our design follows the traditional paradigm of successful internetworking protocols: keep individual building blocks as simple as possible and avoid large, complex, monolithic protocols.

## 2. Protocol Definition
We present two variants of the JFK protocol, both taking two round-trips and providing the same level of DoS protection.

### 2.1 Notation
- \( H_k(M) \): Keyed hash (e.g., HMAC [29]) of message \( M \) using key \( k \). We assume \( H \) is a pseudorandom function and a secure MAC function.
- \( f_{M}^{K_e, K_a} \): Encryption using symmetric key \( K_e \), followed by MAC authentication with symmetric key \( K_a \) of message \( M \).
- \( S_x[M] \): Digital signature of message \( M \) with the private key belonging to principal \( x \).

Message components:
- \( IPI \): Initiator’s network address.
- \( g^x \): Diffie-Hellman exponentials; also identifying the group-ID.
- \( g^i \): Initiator’s current exponential, (mod p).
- \( g^r \): Responder’s current exponential, (mod p).
- \( NI \): Initiator nonce, a random bit-string.
- \( NR \): Responder nonce, a random bit-string.
- \( IDI \): Initiator’s certificates or public-key identifying information.
- \( IDR \): Responder’s certificates or public-key identifying information.
- \( IDR' \): An indication by the initiator to the responder as to what authentication information (e.g., certificates) the latter should use.
- \( HK_r \): A transient hash key private to the responder.
- \( sa_0 \): Cryptographic and service properties of the security association (SA) that the initiator wants to establish.
- \( sa_i \): SA information the responder may need to give to the initiator.
- \( K_{ir} \): Shared key derived from \( g^{ir}, NI, \) and \( NR \) used for protecting the application (e.g., the IPsec SA).
- \( K_e, K_a \): Shared keys derived from \( g^{ir}, NI, \) and \( NR \), used to encrypt and authenticate Messages (3) and (4) of the protocol.
- \( grpinfo_R \): All groups supported by the responder, the symmetric algorithms used to protect Messages (3) and (4), and the hash function used for key generation.

Both parties must pick a fresh nonce at each invocation of the JFK protocol. The nonces are used in the session-key computation, ensuring the uniqueness and security of each session.

---

This optimized version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.