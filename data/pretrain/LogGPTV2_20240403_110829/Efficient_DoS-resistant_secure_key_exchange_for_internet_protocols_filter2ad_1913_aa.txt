title:Efficient, DoS-resistant, secure key exchange for internet protocols
author:William Aiello and
Steven M. Bellovin and
Matt Blaze and
John Ioannidis and
Omer Reingold and
Ran Canetti and
Angelos D. Keromytis
Efﬁcient, DoS-Resistant, Secure Key Exchange for Internet
Protocols(cid:3)
William Aiello
AT&T Labs Research
PI:EMAIL
Steven M. Bellovin
AT&T Labs Research
PI:EMAIL
Matt Blaze
AT&T Labs Research
PI:EMAIL
Ran Canetti
IBM T.J. Watson Research Center
PI:EMAIL
John Ioannidis
AT&T Labs Research
PI:EMAIL
Angelos D. Keromytis
Columbia University
PI:EMAIL
Omer Reingold
AT&T Labs Research
PI:EMAIL
Categories and Subject Descriptors
C.2.0 [Security and Protection]: Key Agreement Protocols
General Terms
Security, Reliability, Standardization
Keywords
Cryptography, Denial of Service Attacks
ABSTRACT
We describe JFK, a new key exchange protocol, primarily designed
for use in the IP Security Architecture. It is simple, efﬁcient, and
secure; we sketch a proof of the latter property. JFK also has a
number of novel engineering parameters that permit a variety of
trade-offs, most notably the ability to balance the need for perfect
forward secrecy against susceptibility to denial-of-service attacks.
1.
INTRODUCTION
Many public-key-based key-setup and key-agreement protocols
already exist and have been implemented for a variety of applica-
tions and environments. Several have been proposed for the IPsec
protocol suite, and one, IKE[15], is the current standard. IKE has
a number of deﬁciencies, the three most important being that the
number of rounds is high, that it is vulnerable to denial-of-service
attacks, and the complexity of the protocol and its speciﬁcation.
(This complexity has led to interoperability problems — so much
so that, several years after its initial adoption by the IETF, there are
still non-interoperating commercial implementations.)
(cid:3)
This work was partially supported by DARPA under Contract
F39502-99-1-0512-MOD P0001.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18-22, 2002, Washington, DC USA
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
While it might be possible to “patch” the IKE protocol to ﬁx
some of these problems, it may be perferable to construct a new
protocol that more narrorwly addresses the requirements “from the
ground up.” We set out to engineer a new key exchange protocol
speciﬁcally for Internet security applications. We call our new pro-
tocol “JFK,” which stands for “Just Fast Keying.”
1.1 Design Goals
We seek a protocol with the following characteristics:
Security: No one other than the participants may have access to
the generated key.
PFS: It must approach Perfect Forward Secrecy.
Privacy: It must preserve the privacy of the initiator and/or re-
sponder, insofar as possible.
Memory-DoS: It must resist memory exhaustion attacks.
Computation-DoS: It must resist CPU exhaustion attacks on the
responder.
Efﬁciency: It must be efﬁcient with respect to computation, band-
width, and number of rounds.
Non-Negotiated: It must avoid complex negotiations over capa-
bilities.
Simplicity: The resulting protocol must be as simple as possible,
within the constraints of the requirements.
The Security requirement is obvious enough (we use the security
model of [7, 8]). The rest, however, require some discussion.
The PFS property is perhaps the most controversial.
(PFS is
an attribute of encrypted communications allowing for a long-term
key to be compromised without affecting the security of past ses-
sion keys.) Rather than assert that “we must have perfect forward
secrecy at all costs,” we treat the amount of forward secrecy as an
engineering parameter that can be traded off against other neces-
sary functions, such as efﬁciency or resistance to denial-of-service
attacks. In fact, this corresponds quite nicely to the reality of to-
day’s Internet systems, where a compromise during the existence
of a security association will reveal the plaintext of any ongoing
48transmissions. Our protocol has a forward secrecy interval; secu-
rity associations are protected against compromises that occur out-
side of that interval. Speciﬁcally, we allow a party to reuse the same
secret Difﬁe-Hellman exponents for multiple exchanges within a
given time period; this may save a large number of costly modular
exponentiations.
The Privacy property means that the protocol must not reveal
the identity of a participant to any unauthorized party, including an
active attacker that attempts to act as the peer. Clearly, it is not
possible for a protocol to protect both the initator and the respon-
der against an active attacker; one of the participants must always
“go ﬁrst.” In general, we believe that the most appropriate choice
is to protect the initator, since the initator is typically a relatively
anonymous “client,” while the responder’s identity may already be
known. Conversely, protecting the responder’s privacy may not be
of much value (except perhaps in peer-to-peer communication): in
many cases, the responder is a server with a ﬁxed address or char-
acteristics (e.g., well-known web server). One approach is to allow
for a protocol that allows the two parties to negotiate who needs
identity protection. In JFK, we decided against this approach: it
is unclear what, if any, metric can be used to determine which
party should receive identity protection; furthermore, this negoti-
ation could act as a loophole to make initiators reveal their identity
ﬁrst. Instead, we propose two alternative protocols: one that pro-
tects the initator against an active attack, and another that protects
the responder.
The Memory-DoS and Computation-DoS properties have become
more important in the context of recent Internet denial-of-service
attacks. Photuris[24] was the ﬁrst published key management pro-
tocol for which DoS-resistance was a design consideration; we sug-
gest that these properties are at least as important today.
The Efﬁciency property is worth discussing.
In many proto-
cols, key setup must be performed frequently enough that it can
become a bottleneck to communication. The key exchange proto-
col must minimize computation as well total bandwidth and round
trips. Round trips can be an especially important factor when com-
municating over unreliable media. Using our protocols, only two
round-trips are needed to set up a working security association.
This is a considerable saving in comparison with existing proto-
cols, such as IKE.
The Non-Negotiated property is necessary for several reasons.
Negotiations create complexity and round trips, and hence should
be avoided. Denial of service resistance is also relevant here; a
partially-negotiated security association consumes resources.
The Simplicity property is motivated by several factors. Efﬁ-
ciency is one; increased likelihood of correctness is another. But
our motivation is especially colored by our experience with IKE.
Even if the protocol is deﬁned correctly, it must be implemented
correctly; as protocols become more complex, implementation and
interoperability errors occur more often. This hinders both secu-
rity and interoperability. Our design follows the traditional design
paradigm of successful internetworking protocols: keep individual
building blocks as simple as possible; avoid large, complex, mono-
lithic protocols. We have consciously chosen to omit support for
certain features when we felt that adding such support would cause
an increase in complexity that was disproportional to the beneﬁt
gained.
Protocol design is, to some extent, an engineering activity, and
we need to provide for trade-offs between different types of secu-
rity. There are trade-offs that we made during the protocol design,
and others, such as that between forward secrecy and computational
effort, that are left to the implementation and to the user, e.g., se-
lected as parameters during conﬁguration and session negotiation.
2. PROTOCOL DEFINITION
We present two variants of the JFK protocol. Both variants take
two round-trips (i.e., four messages) and both provide the same
level of DoS protection. The ﬁrst variant, denoted JFKi, provides
identity protection for the initiator even against active attacks. The
identity of the responder is not protected. This type of protection
is appropriate for a client-server scenario where the initiator (the
client) may wish to protect its identity, whereas the identity of the
responder (the server) is public. As discussed in Section 4, this
protocol uses the basic design of the ISO 9798-3 key exchange
protocol [20, 7], with modiﬁcations that guarantee the properties
discussed in the Introduction.
The second variant, JFKr, provides identity protection for the
responder against active adversaries. Furthermore, it protects both
sides’ identities against passive eavesdroppers. This type of protec-
tion is appropriate for a peer-to-peer scenario where the responder
may wish to protect its identity. Note that it is considerably eas-
ier to mount active identity-probing attacks against the responder
than against the initiator. Furthermore, JFKr provides repudiability
on the key exchange, since neither side can prove to a third party
that their peer in fact participated in the protocol exchange with
them.
(In contrast, JFKi authentication is non-repudiable, since
each party signs the other’s identity along with session-speciﬁc in-
formation such as the nonces). This protocol uses the basic design
of the Sign-and-MAC (SIGMA) protocol from [28], again with the
appropriate modiﬁcations.
2.1 Notation
First, some notation:
Hk(M ) Keyed hash (e.g., HMAC[29]) of message M using key
k. We assume that H is a pseudorandom function. This
also implies that H is a secure message authentication
(MAC) function. In some places we make a somewhat
stronger assumption relating H and discrete logarithms;
see more details within.
fMgKe
Ka Encryption using symmetric key Ke, followed by MAC
authentication with symmetric key Ka of message M.
The MAC is computed over the ciphertext, preﬁxed with
the literal ASCII string "I" or "R", depending on who
the message sender is (initiator or responder).
Sx[M ] Digital signature of message M with the private key be-
longing to principal x (initiator or responder). It is as-
sumed to be a non-message-recovering signature.
The message components used in JFK are:
IPI
gx
gi
gr
NI
NR
IDI
IDR
IDR0
Initiator’s network address.
Difﬁe-Hellman (DH) exponentials; also identifying the
group-ID.
Initiator’s current exponential, (mod p).
Responder’s current exponential, (mod p).
Initiator nonce, a random bit-string.
Responder nonce, a random bit-string.
Initiator’s certiﬁcates or public-key identifying informa-
tion.
Responder’s certiﬁcates or public-key identifying infor-
mation.
An indication by the initiator to the responder as to what
authentication information (e.g., certiﬁcates) the latter
should use.
49HKr
sa
0
sa
Kir
Ke; Ka
A transient hash key private to the responder.
Cryptographic and service properties of the security as-
sociation (SA) that the initiator wants to establish.
It
contains a Domain-of-Interpretation which JFK under-
stands, and an application-speciﬁc bit-string.
SA information the responder may need to give to the
initiator (e.g., the responder’s SPI, in IPsec).
Shared key derived from gir, NI, and NR used for pro-
tecting the application (e.g., the IPsec SA).
Shared keys derived from gir, NI, and NR, used to en-
crypt and authenticate Messages (3) and (4) of the pro-
tocol.
grpinfoR All groups supported by the responder, the symmetric
algorithms used to protect Messages (3) and (4), and the
hash function used for key generation.
Both parties must pick a fresh nonce at each invocation of the JFK
protocol. The nonces are used in the session-key computation, to