## PostgreSQL 审计成功事务 - PostgreSQL Fine-Grained Table,Column,Row Level Audit  
##### [TAG 6](../class/6.md)
### 作者                                   
digoal                                    
### 日期                                  
2013-03-20        
### 标签                                  
PostgreSQL , 审计 , 已提交事务                                                               
----                                  
## 背景          
通过配置用户级或数据库级的参数可以实现用户以及数据库级别的审计, 但是这样的粒度可能还是太粗糙了.  
如果需要更细致的审计, 例如针对某些表的操作审计, 某些用户对某些表的审计, 或者仅仅当某个列的值发生变化时才被审计(记录到LOG或表里面, 本文的例子是将审计信息输出到LOG, 使用raise).  
这样的需求可以通过触发器来实现.  
接下来以PostgreSQL 9.2为例进行讲解.  
基础的参数配置  
```  
log_destination = 'csvlog'  
logging_collector = on  
log_directory = 'pg_log'  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'  
log_file_mode = 0600  
log_truncate_on_rotation = on  
log_rotation_age = 1d  
log_rotation_size = 10MB  
log_connections = on  
log_error_verbosity = verbose  
log_timezone = 'PRC'  
log_statement = 'none'  
log_min_duration_statement = -1  
```  
创建测试表 :   
```  
digoal=> create table user_account_kb(id int, info text, balance numeric, crt_time timestamp, mod_time timestamp);  
CREATE TABLE  
```  
插入测试数据 :   
```  
digoal=> insert into user_account_kb select generate_series(1,10),'test',trunc(100*random()),now(),null;  
INSERT 0 10  
digoal=> select * from user_account_kb ;  
 id | info | balance |          crt_time          | mod_time   
----+------+---------+----------------------------+----------  
  1 | test |      66 | 2013-03-20 10:08:15.969523 |   
  2 | test |      50 | 2013-03-20 10:08:15.969523 |   
  3 | test |      95 | 2013-03-20 10:08:15.969523 |   
  4 | test |      90 | 2013-03-20 10:08:15.969523 |   
  5 | test |      50 | 2013-03-20 10:08:15.969523 |   
  6 | test |      12 | 2013-03-20 10:08:15.969523 |   
  7 | test |      39 | 2013-03-20 10:08:15.969523 |   
  8 | test |      42 | 2013-03-20 10:08:15.969523 |   
  9 | test |       6 | 2013-03-20 10:08:15.969523 |   
 10 | test |      11 | 2013-03-20 10:08:15.969523 |   
(10 rows)  
```  
## 审计场景1  
1\. 审计某个表的insert, update, delete, truncate语句.  
使用after for each statement触发器.  
创建触发器函数  
```  
digoal=> create or replace function trace_statement() returns trigger as $$  
declare  
  v_user name;  
  v_db name;  
  v_query text;  
begin  
  select current_user, current_database(), current_query() into v_user, v_db, v_query;  
  raise warning 'user:%, db:%, query:%', v_user, v_db, v_query;  
  return null;  
end;  
$$ language plpgsql;  
```  
创建触发器  
```  
digoal=> create trigger tg1 after insert or update or delete or truncate on user_account_kb for each statement execute procedure trace_statement();  
CREATE TRIGGER  
```  
测试插入  
```  
digoal=> insert into user_account_kb values(11,'test',100,now(),null);  
WARNING:  user:digoal, db:digoal, query:insert into user_account_kb values(11,'test',100,now(),null);  
INSERT 0 1  
digoal=> select * from user_account_kb where id=11;  
 id | info | balance |          crt_time          | mod_time   
----+------+---------+----------------------------+----------  
 11 | test |     100 | 2013-03-20 10:18:02.495836 |   
(1 row)  
```  
测试更新  
```  
digoal=> update user_account_kb set info='new' where id=11;  
WARNING:  user:digoal, db:digoal, query:update user_account_kb set info='new' where id=11;  
UPDATE 1  
digoal=> select * from user_account_kb where id=11;  
 id | info | balance |          crt_time          | mod_time   
----+------+---------+----------------------------+----------  
 11 | new  |     100 | 2013-03-20 10:18:02.495836 |   
(1 row)  
```  
测试删除  
```  
digoal=> delete from user_account_kb where id=11;  
WARNING:  user:digoal, db:digoal, query:delete from user_account_kb where id=11;  
DELETE 1  
```  
测试truncate  
```  
digoal=> begin;  
BEGIN  
digoal=> truncate user_account_kb ;  
WARNING:  user:digoal, db:digoal, query:truncate user_account_kb ;  
TRUNCATE TABLE  
digoal=> rollback;  
ROLLBACK  
```  
注意回滚的操作不会被记录. 即使log_statement = 'ddl', 所以rollback没有被记录下来.  
这是个弊端. 需要注意. 希望未来的PostgreSQL版本加以改进. 现在的解决办法是修正触发器的触发点, 小结部分会提到.  
以上操作的日志输出如下.  
```  
2013-03-20 10:18:02.496 CST,"digoal","digoal",4521,"[local]",51491867.11a9,9,"INSERT",2013-03-20 10:01:11 CST,1/229,3355,WARNING,01000,"user:digoal, db:digoal, query:insert into user_account_kb values(11,'test',100,now(),null);",,,,,,,,"exec_stmt_raise, pl_exec.c:2840","psql"  
2013-03-20 10:19:42.980 CST,"digoal","digoal",4521,"[local]",51491867.11a9,10,"UPDATE",2013-03-20 10:01:11 CST,1/233,3356,WARNING,01000,"user:digoal, db:digoal, query:update user_account_kb set info='new' where id=11;",,,,,,,,"exec_stmt_raise, pl_exec.c:2840","psql"  
2013-03-20 10:19:53.612 CST,"digoal","digoal",4521,"[local]",51491867.11a9,11,"DELETE",2013-03-20 10:01:11 CST,1/236,3357,WARNING,01000,"user:digoal, db:digoal, query:delete from user_account_kb where id=11;",,,,,,,,"exec_stmt_raise, pl_exec.c:2840","psql"  
2013-03-20 10:20:18.361 CST,"digoal","digoal",4521,"[local]",51491867.11a9,12,"TRUNCATE TABLE",2013-03-20 10:01:11 CST,1/237,3358,WARNING,01000,"user:digoal, db:digoal, query:truncate user_account_kb ;",,,,,,,,"exec_stmt_raise, pl_exec.c:2840","psql"  
```  
## 审计场景2  
2\. 按用户审计某个表的insert, update, delete, truncate语句.  
使用after for each statement when (current_user='')触发器.  
删除前面用到的触发器  
```  
digoal=> drop trigger tg1 on user_account_kb;  
DROP TRIGGER  
```  
创建触发器, 这次带上when条件  
```  
digoal=> create trigger tg1 after insert or update or delete or truncate on user_account_kb for each statement when (current_user='digoal') execute procedure trace_statement();  
CREATE TRIGGER  
```  
测试digoal用户的操作  
```  
digoal=> update user_account_kb set info='new' where id=11;  
WARNING:  user:digoal, db:digoal, query:update user_account_kb set info='new' where id=11;  
UPDATE 0  
```  
测试其他用户的操作, 不被审计  
```  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# update digoal.user_account_kb set info='new' where id=11;  
UPDATE 0  
```  
## 审计场景3  
3\. 按条件审计某个表的insert, update, delete语句.  
使用after for each row when (new.balance <> old.balance)触发器.  
删除前面用到的触发器  
```  
digoal=> drop trigger tg1 on user_account_kb;  
DROP TRIGGER  
```  
新建触发器函数  
```  
digoal=> create or replace function trace_row() returns trigger as $$                                                              
declare  
  v_user name;  
  v_db name;  
  v_query text;  
begin  
select current_user, current_database(), current_query() into v_user, v_db, v_query;  
case TG_OP  
  when 'UPDATE' then  
    raise warning 'user:%, db:%, query:%, newdata:%, olddata:%', v_user, v_db, v_query, NEW, OLD;  
  when 'INSERT' then  
    raise warning 'user:%, db:%, query:%, newdata:%', v_user, v_db, v_query, NEW;  
  when 'DELETE' then  
    raise warning 'user:%, db:%, query:%, olddata:%', v_user, v_db, v_query, OLD;  
  else  
    null;  
end case;  
return null;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  