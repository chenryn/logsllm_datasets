# 【技术分享】利用ngx_lua与fail2ban实现主动诱捕

## 译文声明
本文为翻译文章，原文来源于安全客。译文仅供参考，具体内容和含义请以原文为准。

## 前言
服务器在业务运行及数据存储中扮演着重要角色，因此极易成为攻击者的首要目标。如何对业务服务器进行有效的安全防护，及时发现并阻止针对系统的攻击，最大限度地降低主机系统安全风险，是企业安全从业人员面临的一个重要问题。本文将介绍如何通过ngx_lua与fail2ban实现主动诱捕，从而提升主机的安全防护效果。

## ngx_lua与fail2ban实现主动诱捕

### ngx_lua_waf简介
对于使用过主机层WAF（Web应用防火墙）的朋友来说，ngx_lua_waf应该并不陌生。常见的开源主机WAF有mod_security、naxsi以及ngx_lua_waf等。其中，ngx_lua_waf以其高性能和易用性著称，几乎无需额外配置，只需维护规则即可防御多种常见攻击类型。此外，基于Lua脚本编写的模块也非常灵活，甚至能够实现一些复杂的业务逻辑控制。若选择使用OpenResty，则无需单独安装Lua相关组件。

#### 安装步骤
- **软件环境准备**：无论是Nginx还是Tengine都可以作为基础平台，但需要先安装LuaJIT，并确保操作系统已安装zlib, zlib-devel, openssl, openssl-devel, pcre, pcre-devel等相关依赖。
- **Tengine编译参数**：
  ```
  --prefix=/usr/local/nginx 
  --with-http_lua_module 
  --with-luajit-lib=/usr/local/luajit/lib/
  --with-luajit-inc=/usr/local/luajit/include/luajit-2.0/
  --with-ld-opt=-Wl,-rpath,/usr/local/luajit/lib
  ```
- **下载并配置ngx_lua_waf**：从GitHub上获取ngx_lua_waf源码（https://github.com/loveshell/ngx_lua_waf），解压后放置于`/usr/local/nginx/conf`目录下，并重命名为`waf`。接着修改`config.lua`文件中的路径设置：
  ```lua
  RulePath = "/usr/local/nginx/conf/waf/wafconf/"
  attacklog = "on"
  logdir = "/usr/local/nginx/logs/waf"
  ```
  注意检查并创建日志目录，同时赋予适当的权限以保证日志写入功能正常工作。
- **nginx主配置文件调整**：在`nginx.conf`的`http`部分添加如下内容：
  ```nginx
  lua_package_path "/usr/local/nginx/conf/waf/?.lua";
  lua_shared_dict limit 10m;
  init_by_lua_file  /usr/local/nginx/conf/waf/init.lua; 
  access_by_lua_file /usr/local/nginx/conf/waf/waf.lua;
  ```
  最后，验证配置无误后重启Nginx服务使更改生效。

### Fail2ban集成
Fail2ban是一款常用的防暴力破解工具，其基本原理是通过监控指定的日志文件（如SSH登录记录），一旦发现符合预设规则的行为模式便自动封锁相应IP地址一段时间。虽然Fail2ban最常用于保护SSH服务免受密码猜测攻击，但它同样适用于其他类型的网络服务，包括Web服务器。

#### 结合ngx_lua_waf使用Fail2ban
为了进一步增强安全性，可以考虑将Fail2ban与ngx_lua_waf结合使用，具体做法如下：
1. 分析潜在威胁场景，明确哪些攻击行为值得特别关注；
2. 根据实际需求编写相应的触发条件；
3. 当检测到符合条件的恶意活动时，利用iptables将流量导向一个隔离的蜜罐环境中，以便后续深入分析或采取行动。

这种方法相较于传统的被动式蜜罐而言更加积极主动，能够在不引起攻击者注意的情况下将其引入可控范围内进行研究，进而帮助我们更好地理解当前面临的威胁态势，并据此优化整体防御策略。

## 总结
通过上述方法，我们可以有效地识别出真正具有针对性的攻击行为，并将其引导至专门设计的蜜罐环境中进行观察与应对，从而显著提高系统抵御复杂威胁的能力。当然，在实施此类方案时也必须谨慎行事，确保不会无意间暴露自身脆弱点给对手可乘之机。