model [26]. Abdalla et al. [27] indicated the minimal conditions
for the underlying identiﬁcation scheme to prove Fiat-Shamir
transformed signatures to be EUF-CMA secure. In 2016, Kiltz
et al. [28], [29] provided a concrete and modular security
analysis of Fiat-Shamir signatures in both the single-user and
multi-user setting, closing the tightness gap of the reduction.
The treatment of the multi-user setting is especially interest-
ing as in practical applications there exist many different public
keys for an adversary to attack. In 2002, Galbraith, Malone-
Lee, and Smart [30] considered security of signatures in this
multi-user setting. They showed that if an adversary were to
attack N keys at once, its advantage can increase only at most
by a factor of N (this is often referred to as the generic bound).
Their second result claimed that for Schnorr-like signatures
one can do even better and achieve a tight reduction between
single-user and multi-user security. Much later, Bernstein [31]
exposed a ﬂaw in this tight proof that to this date could not
be resolved. However, Bernstein [31] was able to show that
one can achieve a tight reduction between single-user security
of Schnorr signatures and multi-user security of key-preﬁxed
Schnorr signatures. Key preﬁxing had been introduced earlier
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1660
by Menezes and Smart [32] in the context of key-substitution
attacks, where they also (controversially) claimed that it is
not necessary to actively mitigate key-substitution attacks
for Schnorr signatures. In contrast, the designs of Ed25519
signatures [1], [7] nevertheless employ key-preﬁxing. Kiltz et
al. [28] show that if the underlying canonical identiﬁcation
scheme achieves random self-reducibility in the random oracle
model, then a tight reduction between multi-user and single-user
security can be achieved without key preﬁxing. In Appendix C,
we brieﬂy discuss multi-user security in light of these results.
C. Computational proofs of systems that use Ed25519
Because of its performance and conjectured security, Ed-
DSA’s Ed25519 instantiation over Edwards25519 has become
one of the most popular digital signature schemes, appearing
in innumerable applications and protocols including TLS 1.3
[13], SSH [33], Tor, ZCash, and the Signal protocol [34].
Regarding such systems, there exists numerous security
proofs which hold only when the deployed digital signatures
satisfy certain conditions. For example, Bhargavan et al. [14]
developed the ﬁrst machine-checked cryptographic proof for
TLS 1.3 draft-18 using the veriﬁcation tool CryptoVerif, thereby
assuming that Ed25519-IETF meets EUF-CMA. Similarly, [15]
proved the security of session resumption in the TLS 1.3
draft-05 full handshakes and [16] proved the security of (a
slightly modiﬁed version of) the ephemeral Difﬁe-Hellman
handshake of TLS 1.3 with unilateral authentication. Kobeissi,
Bhargavan, and Blanchet [35] analyzed a model of the Signal
protocol
in CryptoVerif assuming EUF-CMA security of
Signal’s X-Ed25519 scheme. However, none of these schemes
have actually been proven to achieve EUF-CMA security.
In 2014, SSH was proven to be secure even when the same
signing key is used across multiple ciphersuites, assuming that
the underlying signature is strongly unforgeable [18]1. However,
SSH implementations may use the originally-proposed version
Ed25519-Original (e.g., [37]), which does not satisfy SUF-
CMA. This yields a counterexample in their security model:
mauling a signature in an otherwise honest session allows a
session-key reveal on the peer, as the sessions no longer match.
Thus, their proof does not apply as-is to SSH implementations
that use Ed25519-Original. [19] claims that the results on
Schnorr signatures in prime order groups imply that Ed25519
enjoys SUF-CMA and resistance to key substitution attacks,
which, as we will see in Section V-C is not the case.
III. PRELIMINARIES
In this section we introduce the necessary notation and
deﬁnitions. In particular, we also review the Fiat-Shamir
transform [23] which allows to transform passively-secure
(interactive) identiﬁcation protocols into (non-interactive) sig-
nature schemes which are secure against active adversaries.
1The full version of the paper [36] explicitly uses the deﬁnition for strong
unforgeability, even though both versions use a “euf-cma” shorthand.
Notation: For an integer q, we denote by Fq the ﬁnite ﬁeld
with order q. For a bit string h and an integer i, we let h[i]
denote the i-th bit of h. Overloading notation, we write a
for the bitstring encoding of a, where a can be an integer or
a curve point. We describe the details of these encodings at
the start of Section IV. The algorithms in this paper run in
probabilistic polynomial time (PPT), unless stated otherwise,
and we write y $←− A(x) for the probabilistic execution of
algorithm A on input x with output y. If A is a deterministic
algorithm we write y ← A(x). Furthermore, AO
(x) denotes
that A has access to the oracle O during its execution on input
x. By pp we denote the public parameters of the scheme and
system. We assume that they are always known to the adversary
A and thus omit pp from its explicit input. For variables x, y,
we denote by y ← x, the assignment of value x to y and
by s $←− D we denote the sampling of an element x from
the probability distribution D; for simplicity, we denote the
uniform sampling of an element x from a set X by x $←− X.
Security games Gsec-prop
Π,A (pp) describe the run of an adversary
A against the security property sec-prop of a cryptographic
scheme Π parametrized by pp. We write Gsec-prop
Π,A (pp) = 1
to mark the event in which A has won the game. We use 1
to represent the Boolean value True, and 0 for False. Lastly,
(cid:2)statement(cid:3), we denote the Boolean evaluation of statement.
A. Cryptographic Building Blocks
Our presentation of deﬁnitions follows the style of the
textbook by Katz and Lindell [38] with security deﬁned in the
concrete setting which explicitly speciﬁes the amount of time
and resources needed (cf. [38, Sec. 3.1]). We ﬁrst introduce the
notion of secure signatures schemes before deﬁning canonical
identiﬁcation protocols and their security.
Deﬁnition 1 (Signature scheme). A signature scheme S =
(KGen, Sign, Vfy) is a triple of algorithms, where KGen is
called the key generation algorithm, Sign is called the signing
algorithm, and Vfy is called the veriﬁcation algorithm.
Key generation KGen takes as input the public parameters
pp and outputs a public key pk and a secret key sk, i.e.,
(pk, sk) $←− KGen(pp).
Signing Sign takes as input a secret key sk as well as the
message m ∈ M to be signed and outputs a signature
σ, i.e., σ $←− Sign(sk, m). Here, M is called the message
space.
Veriﬁcation Vfy takes as input a public key pk, a signature
σ and message m ∈ M. It deterministically outputs 1,
i.e., 1 ← Vfy(pk, σ, m) if σ is a valid signature over m
wrt. pk, else it outputs 0.
We call a signature scheme S = (KGen, Sign, Vfy) correct
$←− KGen(pp) and all messages m ∈ M:
if for all (pk, sk)
1 ← Vfy(pk, Sign(sk, m), m).
The standard notion for security of signature schemes is that
of (single-user) existential unforgeability under chosen message
attacks. Intuitively, this guarantees that for a ﬁxed public key,
an adversary A cannot generate a valid signature on a new
message, for which it has not seen a valid signature before. A
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1661
stronger deﬁnition of security is that of (single-user) strong
unforgeability, which will also play a role later in the paper.
Here, the adversary is not restricted to forging signatures on
new messages for a ﬁxed public key but may also generate a
signature on a message on which it has seen (other) signatures.
Both of these notions can then be transferred to the multi-user
setting, where there is not just a single public key generated
by the challenger but multiple honestly generated keys. The
adversary’s goal is then to (existentially or strongly) forge a
signature under any of these keys.
Deﬁnition 2 (EUF-CMA and SUF-CMA security). Let S =
(KGen, Sign, Vfy) be a signature scheme. Consider the security
games Geuf-cma
as deﬁned in Fig. 1. We say
that a signature scheme S is (t, , QS)-EUF-CMA-secure or
existentially unforgeable under chosen message attacks, if
for any adversary A running in time at most t, making
(cid:2)
at most QS queries to the signing oracle, the probability
Geuf-cma
Pr
Analogously, we say that S is (t, , QS)-SUF-CMA-secure
S,A (pp) = 1
(cid:3) ≤ .
and Gsuf-cma
S,A
S,A
or strongly unforgeable under chosen message attacks.
As mentioned before, secure signature schemes can be built
from identiﬁcation protocols. Identiﬁcation protocols allow a
so-called prover that holds a secret key sk to authenticate
to a veriﬁer who holds the corresponding public key pk.
Here we only consider so-called canonical
identiﬁcation
protocols, which consist of three moves: The prover P sends a
commitment com to the veriﬁer V. The veriﬁer V then samples
a random challenge ch and sends it to P. Finally, P sends
a response rsp to V, whose decision is then a deterministic
function of their conversation (com, ch, rsp) and P’s public
key. More formally:
Deﬁnition 3 (Canonical identiﬁcation protocol). A canonical
identiﬁcation protocol CID = (KGen, P = (P1, P2), V =
(V1, V2)) is a triple of algorithms:
Key generation KGen takes as input the public parameters
pp and outputs a public key pk and a secret key sk, i.e.,
(pk, sk) $←− KGen(pp).
The prover P = (P1, P2) is a two-stage algorithm that takes
as input a secret key sk. P1 takes as input sk and outputs
a commitment com as well as some state st. P2 takes as
input the challenge ch (sent by the veriﬁer V1) as well
as state st and outputs a response rsp.
The veriﬁer V = (V1, V2) is a two-stage algorithm that is
initialized with a public key pk. V1 selects a random
challenge ch and sends it to the prover. V2 takes as input
the public key, the com, ch and rsp and outputs 1 if it
accepts the conversation (com, ch, rsp) for pk or 0 if it
rejects.
For all (pk, sk) $←− KGen(pp), we require that if P(sk) and
V(pk) interact honestly within an instance of the protocol,
$←− P1(sk),
then the veriﬁer accepts. I.e.,
$←− P2(com, ch, st), we have veriﬁer
ch
Pr[1 ← V2(pk, com, ch, rsp)] = 1.
$←− V1, and rsp
for (com, st)
We sometimes denote the interactive run of the identiﬁcation
protocol between the prover and the veriﬁer by P (cid:2) V or
P(sk) (cid:2) V(pk). We write Trans [P(sk) (cid:2) V(pk)] to denote
a conversation (com, ch, rsp) resulting from the interaction be-
tween P and V and identify V2(pk, com, ch, rsp) with the ﬁnal
decision ∈ {0, 1} of the veriﬁer. If 1 ← V2(pk, com, ch, rsp),
we say that (com, ch, rsp) is an accepting conversation for pk,
or simply a valid conversation.
Intuitively, the basic security of identiﬁcation protocols
is deﬁned in terms of the inability of an adversary A to
impersonate the prover towards an honest veriﬁer without
knowledge of the prover’s secret key. This can be in the setting
where A only has access to the public key of the prover (called
IMP-KOA for security against impersonation under key-only
attacks), or in the stronger setting, where A can observe honest
conversations between the prover and the veriﬁer (IMP-PA for
security against impersonation under passive attacks):
Deﬁnition 4 (IMP-KOA and IMP-PA security). Let CID =
(KGen, P, V) be a canonical identiﬁcation protocol and let
A be an algorithm. Consider the security game GIMP-KOA
CID,A as
deﬁned on the left in Fig. 2. We say that CID is (t, )-secure
against impersonation under key-only attacks, or simply (t, )-
IMP-KOA-secure, if for any algorithm A running in time at
most t the probability Pr
as deﬁned on the
right in Fig. 2. We say that CID is (t, , QT )-secure against
impersonation under passive attacks, or simply (t, , QT )-
IMP-PA-secure, if for any algorithm A running in time at
most t and with at most QT queries to the oracle OTrans, the
probability Pr
Similarly, consider the game GIMP-PA
GIMP-KOA
A
CID,A (pp) = 1
(cid:3) ≤ .
(cid:3) ≤ .
CID,A(pp) = 1
GIMP-PA
(cid:2)
(cid:2)
To argue about
the security of canonical
identiﬁcation
protocols, it is useful to talk about the min-entropy of an
identiﬁcation scheme as well as the notion of honest-veriﬁer
zero-knowledge,or HVZK, for short. The former notion captures
the unpredictability of commitments in the protocol, whereas
HVZK formalizes the property that an adversary A gains no
additional knowledge from honest interactions P (cid:2) V, since
A could generate such conversations on its own.
Deﬁnition 5 (Min-entropy of identiﬁcation scheme). We say
that a canonical identiﬁcation protocol CID = (KGen, P, V)
has α bits min-entropy if the probability over the choice
$←− KGen(pp), that the commitment generated by
(pk, sk)
P1(sk) is from a distribution with at least α bits of min-entropy,
is at least 1 − 2α. Recall that a discrete random variable
X has α bits of min-entropy, denoted by H∞(X) := α, if
max
Deﬁnition 6 (Honest-veriﬁer zero-knowledge). Let CID =
(KGen, P, V) be a canonical identiﬁcation protocol. We say
that CID is zk-honest-veriﬁer zero-knowledge, or zk-HVZK
for short, if there exists a PPT algorithm Sim, called the
simulator, such that for all (pk, sk) $←− KGen(pp), the outputs
of Sim(pk) can only be distinguished from real conversations
P(sk) (cid:2) V(pk) with probability at most zk.
(Pr[X = x]) = 2
−α.
x
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:29 UTC from IEEE Xplore.  Restrictions apply. 
1662
Geuf-cma
S,A (pp):
1 LSign ← ∅
2 (pk, sk) $←− KGen(pp)
3 (m(cid:2), σ(cid:2)) $←− AOSign (pk)
4 return (cid:2)Vfy(pk, σ(cid:2), m(cid:2)) ∧ m(cid:2) (cid:5)∈ LSign(cid:3)
OSign(m):
5 σ $←− Sign(sk, m)
6 LSign ← LSign ∪ {m}
7 return σ
Gsuf-cma
S,A (pp):
1 LSign ← ∅
2 (pk, sk) $←− KGen(pp)
3 (m(cid:2), σ(cid:2)) $←− AOSign (pk)
4 return (cid:2)Vfy(pk, σ(cid:2), m(cid:2)) ∧ (m(cid:2), σ(cid:2)) (cid:5)∈ LSign (cid:3)
OSign(m):
5 σ $←− Sign(sk, m)
6 LSign ← LSign ∪ {(m, σ)}
7 return σ
Fig. 1. EUF-CMA security (left) and SUF-CMA security (right) of a signature scheme S = (KGen, Sign, Vfy) with differences highlighted in gray.
GIMP-KOA
CID,A (pp):
1 (pk, sk) $←− KGen(pp)
2 ch $←− V1
3 (com, st) $←− A(pk)
4 rsp $←− A(ch, st)
5 return (cid:2)V2(pk, com, ch, rsp)(cid:3)
GIMP-PA
CID,A(pp):
1 (pk, sk) $←− KGen(pp)
2 ch $←− V1
3 (com, st) $←− A(pk)
4 rsp $←− A OTrans (ch, st)
5 return (cid:2)V2(pk, com, ch, rsp)(cid:3)
OTrans:
6 return Trans [P(sk) (cid:2) V(pk)]
Fig. 2.
IMP-KOA and IMP-PA security of CID = (KGen, P, V) against impersonating adversaries A with differences highlighted in gray.
The schemes discussed in this paper will have two important