title:Synchronized aggregate signatures: new definitions, constructions
and applications
author:Jae Hyun Ahn and
Matthew Green and
Susan Hohenberger
Synchronized Aggregate Signatures:
New Deﬁnitions, Constructions and Applications
Jae Hyun Ahn
Dept. of Computer Science
Johns Hopkins University
PI:EMAIL
Matthew Green
Dept. of Computer Science
Johns Hopkins University
PI:EMAIL
Susan Hohenberger
Dept. of Computer Science
Johns Hopkins University
PI:EMAIL
ABSTRACT
An aggregate signature scheme is a digital signature scheme
where anyone given n signatures on n messages from n users
can aggregate all these signatures into a single short sig-
nature. Unfortunately, no “fully non-interactive” aggregate
signature schemes are known outside of the random oracle
heuristic; that is, signers must pass messages between them-
selves, sequentially or otherwise, to generate the signature.
Interaction is too costly for some interesting applications.
In this work, we consider the task of realizing aggregate
signatures in the model of Gentry and Ramzan (PKC 2006)
when all signers share a synchronized clock, but do not need
to be aware of or interactive with one another. Each signer
may issue at most one signature per time period and signa-
tures aggregate only if they were created during the same
time period. We call this synchronized aggregation.
We present a surprisingly eﬃcient synchronized aggregate
signature scheme secure under the Computational Diﬃe-
Hellman assumption in the standard model. Our construc-
tion is based on the stateful signatures of Hohenberger and
Waters (Eurocrypt 2009). Those signatures do not aggre-
gate since each signature includes unique randomness for a
chameleon hash and those random values do not compress.
To overcome this challenge, we remove the chameleon hash
from their scheme and ﬁnd an alternative method for mov-
ing from weak to full security that enables aggregation. We
conclude by discussing applications of this construction to
sensor networks and software authentication.
Categories and Subject Descriptors: K.6.5 [Security
and Protection]: Authentication.
General Terms: Security, Algorithms.
Keywords: aggregation, batch veriﬁcation, standard model.
1.
INTRODUCTION
Aggregate signatures, as introduced by Boneh, Gentry,
Lynn and Shacham [11], are digital signatures where any
party, given n signatures on n messages from n users can
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
combine all of these signatures into a single short signature.
This primitive is useful in many applications where storage
or bandwidth is at a premium, and thus one wants to reduce
the total cryptographic overhead.
While a number of aggregate signature schemes have been
proposed [11, 24, 23, 16, 8, 6, 26, 3], all but one of these
schemes is secure only in the random oracle model. The
sole scheme in the standard model, by Lu, Ostrovsky, Sahai,
Shacham and Waters [23], permits only sequential aggrega-
tion [23]. Sequentially-aggregate signatures [24] are a vari-
ant where signatures can only be aggregated by sequentially
passing the (partially formed) aggregate from one signer to
the next.
While sequential aggregation is useful for some applica-
tions, such as Secure BGP routing [20, 23], it is inappropri-
ate for many important applications where signers cannot
be conveniently arranged in sequence. This includes any
situation where signers may operate independently of one
another, e.g., when archiving signed email messages or com-
pressing signatures on software applications. We highlight
two such applications in Section 6.
Our Contributions.
Our main goal is to improve the state of the art for aggre-
gate signatures and to consider how they can best be used
to secure important communications in practice.
Re-visiting the Gentry-Ramzan model. Since aggre-
gate signatures have proven diﬃcult to build, the vast ma-
jority of research eﬀort in this area has gone into building
schemes that require that signers have some knowledge of
and interaction with each other during the creation of the
aggregate, either by sequential or broadcast messages.
In 2006, Gentry and Ramzan [16] proposed a solution to
get around this dependence on interaction. In their model,
signers do not need to be aware of or pass any messages be-
tween themselves, provided that they have a global strategy
for choosing a unique value w that is used during signing,
e.g., w can be the current time period. Only signatures with
the same w value can be aggregated. They argue that this
model is useful and realistic for some interesting applica-
tions. They provided the ﬁrst construction, in the random
oracle model.
In this work, we revisit their model, calling it synchronized
aggregation, and provide additional formalizations. Signers
can issue at most one signature per time period1 and only
1As described in Section 5, we can allow the signer to issue
473signatures issued during the same time period can be eﬃ-
ciently aggregated.
If the signers’ clocks become out of sync in our model, then
there is no security loss, but there is an eﬃciency loss, i.e.,
the out-of-sync messages cannot be aggregated. If a signer’s
clock is turned back in time causing them to issue two signa-
tures during the same time period, then the unforgeability
guarantee may no longer hold in our model (and indeed, it
will not hold in this case for our constructions.) Although,
for example, a sensor network under this sort of active attack
is likely to be compromised in other ways and it is better
that the adversary recover only the key for this single node
than a symmetric key shared by many sensors.
For many applications, the clock need only be loosely syn-
chronized. For example, see Liang et al. [22] which requires
that each sensor have a clock, so that it can report on soil
moisture conditions every 30 seconds.
A New Construction. We present the ﬁrst synchronized
aggregate signature scheme which is provably secure in the
standard model. Prior synchronized or full schemes, due
to Boneh, Gentry, Lynn and Shacham [11] and Gentry and
Ramzan [16], only oﬀered heuristic security arguments in
the random oracle model. Similarly, prior to this work, only
one aggregate scheme with a standard security proof existed,
due to Lu, Ostrovsky, Sahai, Shacham and Waters [23], and
it required sequential interaction among the signers. In this
work, we oﬀer the best of both worlds, by showing for the
ﬁrst time how to build a non-interactive scheme with a stan-
dard security proof.
Our construction is based on the Computational Diﬃe-
Hellman (CDH) assumption in bilinear groups. The scheme
is practical: an aggregate signature requires two group el-
ements and one integer, and user public keys require one
group element. To verify an aggregate of N signatures, re-
quires only k + 3 pairings, where k is a security parameter
(which could be ﬁve in practice), plus two full exponentia-
tions and N small exponentiations (which could be 32 bits
each in practice.)
Applications. We have several applications in mind for
this technology, including aggregation of multicast messages
(as in a sensor network) and reduction of storage require-
ments for signed executable code, as highlighted in Section 6.
These applications each share the property that signers will
produce messages independently of one another (making se-
quential aggregation or multi-signatures inapplicable). We
show that, in this scheme, much of the work of signing a mes-
sage can be performed before the message is known. This is
important for sensors and other low-power devices.
Comparison with Prior Work.
Interestingly, there seems to be an inherent need for co-
ordination among the signing parties or some other method
for combing the randomness in the signatures to allow aggre-
gation. This has typically been created through interaction
by the signers (either broadcast or sequential) or artiﬁcially
in the random oracle model. We review what is known in
these models and then discuss new progress that does not
require either interaction or random oracles, in the presence
of a synchronized clock.
x signatures per time period at a cost of x elements in the
public key.
Full Aggregation with Random Oracles. Boneh et
al. [11] presented the ﬁrst practical aggregate signatures
(BGLS) under the CDH assumption in the random oracle
model. (Technically, it required that all messages be dis-
tinct, although the authors [11] suggested a way to overcome
this restriction, which was later fully explored by Bellare,
Namprempre and Neven [6].) Unfortunately, to date, this is
the only known full aggregate signature scheme and it is in
the random oracle model.
Sequential Aggregation. In sequential aggregation, intro-
duced by Lysyanskaya, Micali, Reyzin and Shacham [24], the
partially formed aggregate signature is passed from signer i
to signer i + 1, who then adds his information to the ag-
gregate before passing it to the next signer. They gave a
construction in the random oracle model based on families
of certiﬁed trapdoor permutations.
Subsequently, Lu, Ostrovsky, Sahai, Shacham and Wa-
ters [23] provided the ﬁrst sequential aggregate signatures
secure in the standard model under the CDH assumption.
In 2007, Boldyreva, Gentry, O’Neill and Yum [8] presented
an identity-based sequentially aggregate signature in the
random oracle model, under an interactive complexity as-
sumption, which was later shown to be false [19]. This high-
lights the importance of keeping the complexity assumptions
simple, which is a goal of this work. Boldyreva et al. subse-
quently provided an alternate construction under a diﬀerent
interactive complexity assumption [9]. In 2008, Neven [26]
proposed sequentially aggregate signed data as a new prim-
itive that minimizes the total amount of transmitted data,
rather than just the signature length, based on uncertiﬁed
claw-free permutations in the random oracle model.
Interactive Aggregation. In the interactive model, as in-
troduced by Bellare and Neven [7] for multisignatures, the
signing process is an interactive protocol, where the signers
communicate with each other to create the signature. In the
recent scheme of Bagherzandi and Jarecki [3], to produce an
aggregate signature, each signer must broadcast a message
to all other signers. This requires that each signer be aware
of and wait for all other signers before issuing a signature.
On small devices, where transmissions are costly, this inter-
action could be prohibitively expensive and could eliminate
the eﬃciency beneﬁts of the aggregation. Their construction
is secure under RSA in the random oracle model. Sequential
aggregation can be considered a special case of interactive
aggregation, where the signers only need to transmit mes-
sages to one another in a linear sequence.
Ideally, one would like to
Synchronized Aggregation.
eliminate the need for signer interaction. In 2006, Gentry
and Ramzan [16] proposed an aggregate signature scheme
where no interaction between signers was required, provided
that all signers have a global strategy for choosing a value w
that is used during signing (w can be the current time pe-
riod.) Only signatures with the same w value can be aggre-
gated. In this non-interactive model, Gentry and Ramzan
were able to provide an identity-based scheme under CDH
in the random oracle model, where the veriﬁcation time is
much more eﬃcient than BGLS.
What is known in the standard model? To our knowl-
edge, only two aggregation schemes are known that do not
require random oracles. The ﬁrst is the sequential scheme
of Lu et al. [23]. The second is presented in this work. We
474Scheme
Type Assumption
Model
PP Size PK Size Agg Size
BGLS [11]
LMRS [24]
LOSSW [23]
LOSSW [23]
BGOY [9]
Neven [26]
BJ [3]
GR [16]
Our Work (Sec. 4)
Our Work (App. A)
full
seq
seq
seq
seq
seq
int
sync
sync
sync
CDH
cert TDP
CDH
CDH
IBSAS-CDH
uncert CFP
RSA
CDH
CDH
CDH
ROM
ROM
standard
ROM
ROM
ROM
ROM
ROM
standard
ROM
O(1)
–
O(1)
O(1)
O(1)
–
–
O(1)
O(k)
O(1)
1
–
O(k)
3
identity
–
–
identity
1
1
1
–
2
2
3
–
–
3
3
3
Agg Verify
(in Pairings)
N + 1
–
2
2
4
–
–
3
k + 3
4
Figure 1: Summary of Full, Sequential and Synchronized Aggregate Signatures. TDP stands for trapdoor
permutation and CFP stands for claw-free permutation. Let N be the number of individual signatures and k
be a special security parameter (which could be ﬁve in practice). Identity-based schemes have a public-key
size of “identity”. Sizes for the public parameters (PP), public keys (PK) and aggregate signatures (Agg)
count group elements and integers.
remove the need for interaction by working in the synchro-
nized model. Their public keys require O(k) elements for
security parameter k, whereas ours require only one group
element. Since public keys may form part of the transmis-
sion overhead and the goal of aggregation is to reduce this
overhead, our scheme may oﬀer a signiﬁcant advantage.
Overview of the Construction.
Our design goals are three-fold. We want an eﬃcient ag-
gregate signature that is:
(1) non-interactive, (2) secure
under a standard assumption, such as CDH, and (3) not
in the random oracle model. For basic signature schemes,
there are currently only two “short” signature schemes that
are fully secure in the standard model under the CDH as-
sumption: the Waters signatures [29] and the more recent
Hohenberger-Waters (HW) signatures [18]. The standard-