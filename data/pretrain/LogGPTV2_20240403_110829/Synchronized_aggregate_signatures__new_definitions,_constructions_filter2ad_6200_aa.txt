# Synchronized Aggregate Signatures: New Definitions, Constructions, and Applications

**Authors:**
- Jae Hyun Ahn
- Matthew Green
- Susan Hohenberger

**Affiliations:**
- Department of Computer Science, Johns Hopkins University
- Contact: [Email Address]

## Abstract
An aggregate signature scheme is a digital signature scheme where anyone given \( n \) signatures on \( n \) messages from \( n \) users can combine these signatures into a single short signature. Unfortunately, no fully non-interactive aggregate signature schemes are known outside the random oracle heuristic; signers must pass messages between themselves, sequentially or otherwise, to generate the signature. This interaction is too costly for some applications.

In this work, we consider the task of realizing aggregate signatures in the model of Gentry and Ramzan (PKC 2006) when all signers share a synchronized clock but do not need to be aware of or interactive with one another. Each signer may issue at most one signature per time period, and signatures can only be aggregated if they were created during the same time period. We call this **synchronized aggregation**.

We present a surprisingly efficient synchronized aggregate signature scheme secure under the Computational Diffie-Hellman (CDH) assumption in the standard model. Our construction is based on the stateful signatures of Hohenberger and Waters (Eurocrypt 2009). To overcome the challenge that each signature includes unique randomness for a chameleon hash, which does not compress, we remove the chameleon hash and find an alternative method for moving from weak to full security that enables aggregation. We conclude by discussing applications of this construction to sensor networks and software authentication.

**Categories and Subject Descriptors:**
- K.6.5 [Security and Protection]: Authentication

**General Terms:**
- Security, Algorithms

**Keywords:**
- Aggregation, Batch Verification, Standard Model

## 1. Introduction
Aggregate signatures, as introduced by Boneh, Gentry, Lynn, and Shacham [11], are digital signatures where any party, given \( n \) signatures on \( n \) messages from \( n \) users, can combine all of these signatures into a single short signature. This primitive is useful in many applications where storage or bandwidth is at a premium, and thus one wants to reduce the total cryptographic overhead.

While several aggregate signature schemes have been proposed [11, 24, 23, 16, 8, 6, 26, 3], all but one of these schemes is secure only in the random oracle model. The sole scheme in the standard model, by Lu, Ostrovsky, Sahai, Shacham, and Waters [23], permits only sequential aggregation [23]. Sequentially-aggregate signatures [24] are a variant where signatures can only be aggregated by sequentially passing the (partially formed) aggregate from one signer to the next.

Sequential aggregation is useful for some applications, such as Secure BGP routing [20, 23], but it is inappropriate for many important applications where signers cannot be conveniently arranged in sequence. This includes situations where signers operate independently, such as archiving signed email messages or compressing signatures on software applications. We highlight two such applications in Section 6.

### Our Contributions
Our main goal is to improve the state of the art for aggregate signatures and to consider how they can best be used to secure important communications in practice.

#### Revisiting the Gentry-Ramzan Model
Since aggregate signatures have proven difficult to build, most research effort has gone into building schemes that require signers to have some knowledge of and interaction with each other during the creation of the aggregate, either by sequential or broadcast messages.

In 2006, Gentry and Ramzan [16] proposed a solution to get around this dependence on interaction. In their model, signers do not need to be aware of or pass any messages between themselves, provided they have a global strategy for choosing a unique value \( w \) used during signing, e.g., \( w \) can be the current time period. Only signatures with the same \( w \) value can be aggregated. They argued that this model is useful and realistic for some interesting applications and provided the first construction in the random oracle model.

In this work, we revisit their model, calling it **synchronized aggregation**, and provide additional formalizations. Signers can issue at most one signature per time period, and only signatures issued during the same time period can be efficiently aggregated. If the signers' clocks become out of sync, there is no security loss, but there is an efficiency loss. If a signer's clock is turned back in time, causing them to issue two signatures during the same time period, the unforgeability guarantee may no longer hold. However, in such cases, the adversary might only recover the key for a single node rather than a symmetric key shared by many sensors.

For many applications, the clock need only be loosely synchronized. For example, Liang et al. [22] require each sensor to have a clock to report soil moisture conditions every 30 seconds.

#### A New Construction
We present the first synchronized aggregate signature scheme that is provably secure in the standard model. Prior synchronized or full schemes, due to Boneh, Gentry, Lynn, and Shacham [11] and Gentry and Ramzan [16], offered heuristic security arguments in the random oracle model. Similarly, prior to this work, only one aggregate scheme with a standard security proof existed, due to Lu, Ostrovsky, Sahai, Shacham, and Waters [23], and it required sequential interaction among the signers. In this work, we offer the best of both worlds, showing for the first time how to build a non-interactive scheme with a standard security proof.

Our construction is based on the Computational Diffie-Hellman (CDH) assumption in bilinear groups. The scheme is practical: an aggregate signature requires two group elements and one integer, and user public keys require one group element. To verify an aggregate of \( N \) signatures, requires only \( k + 3 \) pairings, where \( k \) is a security parameter (which could be five in practice), plus two full exponentiations and \( N \) small exponentiations (which could be 32 bits each in practice).

#### Applications
We have several applications in mind for this technology, including aggregation of multicast messages (as in a sensor network) and reduction of storage requirements for signed executable code, as highlighted in Section 6. These applications share the property that signers will produce messages independently of one another (making sequential aggregation or multi-signatures inapplicable). We show that, in this scheme, much of the work of signing a message can be performed before the message is known, which is important for sensors and other low-power devices.

#### Comparison with Prior Work
There seems to be an inherent need for coordination among the signing parties or some other method for combining the randomness in the signatures to allow aggregation. This has typically been achieved through interaction by the signers (either broadcast or sequential) or artificially in the random oracle model. We review what is known in these models and then discuss new progress that does not require either interaction or random oracles, in the presence of a synchronized clock.

| Scheme | Type | Assumption | Model | PP Size | PK Size | Agg Size | Agg Verify (in Pairings) |
|--------|------|------------|-------|---------|---------|----------|--------------------------|
| BGLS [11] | Full | CDH | ROM | O(1) | 1 | N + 1 | - |
| LMRS [24] | Seq | Cert TDP | ROM | - | - | - | - |
| LOSSW [23] | Seq | CDH | Standard | O(1) | 3 | 2 | 2 |
| BGOY [9] | Seq | IBSAS-CDH | ROM | - | - | - | - |
| Neven [26] | Seq | Uncert CFP | ROM | - | - | - | - |
| BJ [3] | Int | RSA | ROM | - | - | - | - |
| GR [16] | Sync | CDH | ROM | O(k) | 2 | 3 | 3 |
| Our Work (Sec. 4) | Sync | CDH | Standard | O(1) | 1 | k + 3 | 3 |
| Our Work (App. A) | Sync | CDH | Standard | O(1) | 1 | 4 | 4 |

**Figure 1: Summary of Full, Sequential, and Synchronized Aggregate Signatures.** TDP stands for trapdoor permutation and CFP stands for claw-free permutation. Let \( N \) be the number of individual signatures and \( k \) be a special security parameter (which could be five in practice). Identity-based schemes have a public-key size of "identity". Sizes for the public parameters (PP), public keys (PK), and aggregate signatures (Agg) count group elements and integers.

### Overview of the Construction
Our design goals are three-fold. We want an efficient aggregate signature that is:
1. Non-interactive,
2. Secure under a standard assumption, such as CDH, and
3. Not in the random oracle model.

For basic signature schemes, there are currently only two "short" signature schemes that are fully secure in the standard model under the CDH assumption: the Waters signatures [29] and the more recent Hohenberger-Waters (HW) signatures [18]. The standard approach to achieving security in the standard model often involves complex constructions.