on the Debug menu when an application is running in debug mode.
Step through the methods by using the Visual Studio 2017 debugger
1. In the Code and Text Editor window, find the run method.
2. Move the cursor to the first statement in the run method:
Click here to view code image
double dailyRate = readDouble("Enter your daily
rate: ");
3. Right-click anywhere on this line, and then click Run To Cursor.
The program starts, runs until it reaches the first statement in the run
method, and then pauses. A yellow arrow in the left margin of the Code
and Text Editor window indicates the current statement, and the
statement itself is highlighted with a yellow background.
4. On the View menu, point to Toolbars, and then ensure that the Debug
toolbar is selected.
Download from finelybook PI:EMAIL
150
If it was not already visible, the Debug toolbar opens. It might appear
docked with the other toolbars. If you cannot see the toolbar, try using
the Toolbars command on the View menu to hide it and look to see
which buttons disappear. Then, display the toolbar again. The Debug
toolbar looks like this:
5. On the Debug toolbar, click the Step Into button. (This is the sixth
button from the left on the Debug toolbar.)
This action causes the debugger to step into the method being called.
The yellow cursor jumps to the opening brace at the start of the
readDouble method.
6. Click Step Into again to advance the cursor to the first statement:
Console.Write(v);
Tip You can also press F11 instead of repeatedly clicking Step
Into on the Debug toolbar.
7. On the Debug toolbar, click Step Over. (This is the seventh button from
the left.)
This action causes the method to execute the next statement without
debugging it (stepping into it). This action is useful primarily if the
statement calls a method, but you don’t want to step through every
statement in that method. The yellow cursor moves to the second
statement of the method, and the program displays the Enter Your Daily
Rate prompt in a console window before returning to Visual Studio
2017. (The console window might be hidden behind Visual Studio.)
Download from finelybook PI:EMAIL
151
Tip You can also press F10 instead of Step Over on the Debug
toolbar.
8. On the Debug toolbar, click Step Over again.
This time, the yellow cursor disappears, and the console window gets
the focus because the program is executing the Console.ReadLine
method and is waiting for you to type something.
9. Type 525 in the console window, and then press Enter.
Control returns to Visual Studio 2017. The yellow cursor appears on the
third line of the method.
10. Hover the mouse over the reference to the line variable on either the
second or third line of the method. (It doesn’t matter which.)
A ScreenTip appears, displaying the current value of the line variable
(“525”). You can use this feature to ensure that a variable has been set to
an expected value while you step through methods.
11. On the Debug toolbar, click Step Out. (This is the eighth button from the
left.)
This action causes the current method to continue to run uninterrupted to
its end. The readDouble method finishes and the yellow cursor is placed
back at the first statement of the run method. This statement has now
finished running.
Download from finelybook PI:EMAIL
152
Tip You can also press Shift+F11 instead of clicking Step Out on
the Debug toolbar.
12. On the Debug toolbar, click Step Into.
The yellow cursor moves to the second statement in the run method:
Click here to view code image
int noOfDays = readInt("Enter the number of
days: ");
13. On the Debug toolbar, click Step Over.
This time, you have chosen to run the method without stepping through
it. The console window appears again, prompting you for the number of
days.
14. In the console window, type 17 and then press Enter.
Control returns to Visual Studio 2017 (you might need to bring Visual
Studio to the foreground). The yellow cursor moves to the third
statement of the run method:
Click here to view code image
writeFee(calculateFee(dailyRate, noOfDays));
15. On the Debug toolbar, click Step Into.
The yellow cursor jumps to the expression that defines the body of the
calculateFee method. This method is called first, before writeFee,
because the value returned by this method is used as the parameter to
writeFee.
16. On the Debug toolbar, click Step Out.
The calculateFee method call completes, and the yellow cursor jumps
back to the third statement of the run method.
Download from finelybook PI:EMAIL
153
17. On the Debug toolbar, click Step Into again.
This time, the yellow cursor jumps to the statement that defines the body
of the writeFee method.
18. Place the mouse over the v parameter in the method definition.
The value of v, 8925, is displayed in a ScreenTip.
19. On the Debug toolbar, click Step Out.
The message “The consultant’s fee is: 9817.5” is displayed in the
console window. (You might need to bring the console window to the
foreground to display it if it is hidden behind Visual Studio 2017.) The
yellow cursor returns to the third statement in the run method.
20. On the toolbar, click Continue to cause the program to continue running
without stopping at each subsequent statement.
Tip If the Continue button is not visible, click the Add Or Remove
Buttons drop-down menu that appears at the end of the Debug
toolbar, and then select Continue. The Continue button should now
appear. Alternatively, you can press F5 to continue running the
application without debugging.
The application completes and finishes running. Notice that the Debug
toolbar disappears when the application finishes; by default, the Debug
toolbar is displayed only when you are running an application in debug
mode.
Nesting methods
Sometimes you want to break a large method down into smaller pieces. You
can implement each piece as a helper method in its own right; this helps you
to test methods that perform complex processes and to verify that each part of
Download from finelybook PI:EMAIL
154
the large method functions as expected before bringing them together. It can
also aid readability and make a large method easier to maintain.
Note The terms large method and helper method are not official
vocabulary in C#. I have used them in this discussion to distinguish
between a method that is broken down into smaller pieces (the large
method) and the methods that implement these smaller pieces (the
helper methods).
By default, methods (large and helper) are accessible across the class in
which they are defined, and can be invoked from any other methods in that
class. In the case of helper methods that are only utilized by one large
method, it can make sense to keep these methods local to the large method
that runs them. This approach can ensure that a helper method designed to
operate in a given context is not used accidentally by another method for
which it was not designed. This is also good practice for implementing
encapsulation; the inner workings of a large method, including the helper
methods that it invokes, can be kept separate from other methods. This
practice reduces any dependencies between large methods; you can safely
change the implementation of a large method and the helper methods that it
invokes without accidentally impacting other elements of your application.
You can create helper methods by nesting them inside that large method
that uses them, as shown in the next exercise. This exercise calculates
factorials. You can use factorials to work out how many ways you can
arrange a given number of items. The factorial of a positive integer, n, is
defined in a recursive manner as n * factorial (n – 1), where the factorial of 1
is 1. For example, the factorial of 3 is  3 * factorial(2), which is in turn 2 *
factorial(1), which is 1. This calculation evaluates as 3 * 2 * 1, or 6. If you
have 3 items in a set, you can arrange them in 6 different ways.  Similarly, if
you have 4 items you can arrange them in 24 different ways (4 * factorial(3)),
and you can arrange 5 items in 120 different ways (5 * factorial(4)).
Calculate factorials
Download from finelybook PI:EMAIL
155
1. Start Visual Studio 2017 if it is not already running.
2. Open the Factorial solution, which is in the \Microsoft
Press\VCSBS\Chapter 3\Factorial folder in your Documents folder.
3. In Solution Explorer, in the Factorials project, double-click the file
Program.cs to display the code for the program in the Code and Text
Editor window.
4. Add the following statements shown in bold to the body of the run
method, between the opening and closing braces:
Click here to view code image
void run()
{
    Console.Write("Please enter a positive integer: ");
    string inputValue = Console.ReadLine();
    long factorialValue = CalculateFactorial(inputValue);
    Console.WriteLine($"Factorial() is  ");
}
This code prompts the user to enter a numeric value, and then calls the
CalculateFactorial function (which you will write next) with this value,
before displaying the result.
5. Add a new method named CalculateFactorial below the run method.
This method should take a string parameter named input, and return a
long integer value, as follows:
Click here to view code image
long CalculateFactorial(string input)
{
}
6. In the CalculateFactorial method, after the initial opening brace, add the
statement shown below in bold:
Click here to view code image
long CalculateFactorial(string input)
{
    int inputValue = int.Parse(input);
}
This statement converts the string value passed in as the parameter to an
integer (the code does not currently check to make sure that the user has
Download from finelybook PI:EMAIL
156
entered a valid integer; you will see how to do this in Chapter 6,
“Managing errors and exceptions”).
7. Add a nested method named factorial to the CalculateFactorial
function. The factorial method should take an int value and return a
long. You will use this method to actually calculate the factorial of the
input parameter:
Click here to view code image
long CalculateFactorial(string input)
{
    int inputValue = int.Parse(input);
    long factorial (int dataValue)
    {
    }
}  
8. In the body of the factorial method, add the statements shown below in
bold. This code calculates the factorial of the input parameter using the
recursive algorithm described earlier:
Click here to view code image
long CalculateFactorial(string input)
{
    int inputValue = int.Parse(input);
    long factorial (int dataValue)
    {
        if (dataValue == 1)
        {
            return 1;
        }
        else
        {
            return dataValue * factorial(dataValue - 1);
        }
    }
}
9. In the CalculateFactorial method, call the factorial method using the
integer value provided as input and return the result:
Click here to view code image
long CalculateFactorial(string input)
{
    int inputValue = int.Parse(input);
    long factorial (int dataValue)
Download from finelybook PI:EMAIL
157
    {
        if (dataValue == 1)
        {
            return 1;
        }
        else
        {
            return dataValue * factorial(dataValue - 1);
        }
    }
    long factorialValue = factorial(inputValue);
    return factorialValue;
}
10. On the Debug menu, click Start Without Debugging.
Visual Studio 2017 builds the program and then runs it. A console
window appears.
11. At the Please Enter a Positive Integer prompt, type 4, and then press
Enter.
The program writes the following message to the console window:
Factorial(4) is 24
12. Press the Enter key to close the application and return to Visual Studio
2017.
13. Run the application and provide the value 5 when prompted. This time,
the application should display the following message:
Factorial(5) is 120
14. Feel free to experiment with other values. Note that if you enter an input
value that is too large (try 60, for example), the result will exceed that of
the range that can be stored in a long integer, and you will get an
incorrect result; most likely a negative number generated as a result of
numeric overflow. You will learn more about how to handle this
eventuality by using checked exceptions in Chapter 6.
Using optional parameters and named arguments
Download from finelybook PI:EMAIL
158
You have seen that by defining overloaded methods, you can implement
different versions of a method that take different parameters. When you build
an application that uses overloaded methods, the compiler determines which
specific instances of each method it should use to satisfy each method call.
This is a common feature of many object-oriented languages, not just C#.
However, developers can use other languages and technologies for
building Windows applications and components that do not follow these
rules. A key feature of C# and other languages designed for the .NET
Framework is the ability to interoperate with applications and components
written with other technologies. One of the principal technologies that
underpins many Windows applications and services running outside the .NET
Framework is the Component Object Model (COM). In fact, the common
language runtime (CLR) used by the .NET Framework is also heavily
dependent on COM, as is the Windows Runtime of Windows 10. COM does
not support overloaded methods; instead, it uses methods that can take
optional parameters. To make it easier to incorporate COM libraries and
components into a C# solution, C# also supports optional parameters.
Optional parameters are also useful in other situations. They provide a
compact and simple solution when it is not possible to use overloading
because the types of the parameters do not vary sufficiently to enable the
compiler to distinguish between implementations. For example, consider the
following method:
Click here to view code image
public void DoWorkWithData(int intData, float floatData, int
moreIntData)
{
    ...
}
The DoWorkWithData method takes three parameters: two ints and a
float. Now suppose that you want to provide an implementation of
DoWorkWithData that takes only two parameters: intData and floatData.
You can overload the method like this:
Click here to view code image
public void DoWorkWithData(int intData, float floatData)
{
    ...
Download from finelybook PI:EMAIL
159
}
If you write a statement that calls the DoWorkWithData method, you can
provide either two or three parameters of the appropriate types, and the
compiler uses the type information to determine which overload to call:
Click here to view code image
int arg1 = 99;
float arg2 = 100.0F;
int arg3 = 101;
DoWorkWithData(arg1, arg2, arg3); // Call overload with three
parameters
DoWorkWithData(arg1, arg2);       // Call overload with two
parameters
However, suppose that you want to implement two additional versions of
DoWorkWithData that take only the first parameter and the third parameter.
You might be tempted to try this:
Click here to view code image
public void DoWorkWithData(int intData)
{
    ...
}
public void DoWorkWithData(int moreIntData)
{
    ...
}
The issue here is that these two overloads appear identical to the compiler.
Your code will fail to compile and will instead generate the error “Type
‘typename’ already defines a member called ‘DoWorkWithData’ with the
same parameter types.” To understand why this is so, think what would
happen if this code were legal. Consider the following statements:
int arg1 = 99;
int arg3 = 101;
DoWorkWithData(arg1);
DoWorkWithData(arg3);
Which overload or overloads would the calls to DoWorkWithData invoke?
Using optional parameters and named arguments can help to solve this
problem.
Download from finelybook PI:EMAIL
160
Defining optional parameters
You specify that a parameter is optional when you define a method by
providing a default value for the parameter. You indicate a default value by
using the assignment operator. In the optMethod method shown next, the first
parameter is mandatory because it does not specify a default value, but the
second and third parameters are optional:
Click here to view code image
void optMethod(int first, double second = 0.0, string third =
"Hello") {
    ...
}
You must specify all mandatory parameters before any optional
parameters.
You can call a method that takes optional parameters in the same way that
you call any other method: you specify the method name and provide any
necessary arguments. The difference with methods that take optional
parameters is that you can omit the corresponding arguments and the method
will use the default value when it runs. In the example that follows, the first
call to the optMethod method provides values for all three parameters. The
second call specifies only two arguments, and these values are applied to the
first and second parameters. The third parameter receives the default value of
“Hello” when the method runs.
Click here to view code image
optMethod(99, 123.45, "World"); // Arguments provided for all three
parameters
optMethod(100, 54.321);         // Arguments provided for first two
parameters only
Passing named arguments
By default, C# uses the position of each argument in a method call to
determine to which parameter the argument applies. Hence, the second
example of the OptMethod method shown in the previous section passes the
two arguments to the first and second parameters in the method because this
is the order in which they occur in the method declaration. With C#, you can
also specify parameters by name. This feature lets you pass the arguments in
Download from finelybook PI:EMAIL
161
a different sequence. To pass an argument as a named parameter, you specify
the name of the parameter, followed by a colon and the value to use. The
following examples perform the same function as those shown in the
previous section, except that the parameters are specified by name:
Click here to view code image
optMethod(first : 99, second : 123.45, third : "World");
optMethod(first : 100, second : 54.321);
Named arguments give you the ability to pass arguments in any order.
You can rewrite the code that calls the optMethod method such as shown
here:
Click here to view code image
optMethod(third : "World", second : 123.45, first : 99);
optMethod(second : 54.321, first : 100);
optMethod(third : "World", second : 123.45, first : 99);
optMethod(second : 54.321, first : 100);
This feature also makes it possible for you to omit arguments. For
example, you can call the optMethod method and specify values for the first
and third parameters only and use the default value for the second parameter,
like this:
Click here to view code image
optMethod(first : 99, third : "World");
Additionally, you can mix positional and named arguments. However, if
you use this technique, you must specify all the positional arguments before
the first named argument.
Click here to view code image
optMethod(99, third : "World"); // First argument is positional
Resolving ambiguities with optional parameters and
named arguments
Using optional parameters and named arguments can result in some possible
ambiguities in your code. You need to understand how the compiler resolves
these ambiguities; otherwise, you might find your applications behaving in
unexpected ways. Suppose that you define the optMethod method as an
Download from finelybook PI:EMAIL
162
overloaded method, as shown in the following example:
Click here to view code image
void optMethod(int first, double second = 0.0, string third =
"Hello")
{
    ...
}
void optMethod(int first, double second = 1.0, string third =
"Goodbye", int fourth = 100 )
{
    ...
}
This is perfectly legal C# code that follows the rules for overloaded
methods. The compiler can distinguish between the methods because they
have different parameter lists. However, as demonstraeted in the following
example, a problem can arise if you attempt to call the optMethod method
and omit some of the arguments corresponding to one or more of the optional
parameters:
optMethod(1, 2.5, "World");