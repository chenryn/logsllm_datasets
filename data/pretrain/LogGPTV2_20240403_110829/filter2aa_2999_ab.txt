engineering leaders must implement security tools to protect code integrity and prevent code
tampering in the build pipeline. Representative providers of these tools include Apiiro, Argon,
Cycode, Garantir, GrammaTech, JFrog (Vdoo) and RunSafe Security.
Software engineering teams must adopt these practices to protect their CI/CD pipelines:
Compromised IDEs resulting in trojanized builds present the most serious supply chain security risk
in software delivery. Examples include XcodeGhost malware (Xcode IDE in 2015), Octopus Scanner
(NetBeans IDE in 2020), vulnerable VS Code extensions and Node.js Debugger.
Browser-based IDEs eliminate the risk of compromising locally installed IDEs on developer
machines. Browser-based IDEs either enable web access to a remote development environment or
sandbox the IDE within the browser security context. This decouples the development workspace
from the physical workstation which may not be adequately protected. Examples of browser-based
IDEs include Codeanywhere, GitHub Codespaces, Gitpod, Replit and StackBlitz.
Secure the Operating Environment for Developers
Software development environments span multiple distributed systems, platforms and tools,
communicating with each other in the software delivery life cycle using privileged service
accounts. For example, build machines communicate with source code repositories to pull source
code and artifact repositories to pull common packages, and connect to deployment targets to
deploy binaries. The risk is that the tools and services default to running with elevated system
privileges without privilege access controls in place.
Least Privilege Access Policies and Methods
The ability to connect to different machines on a network and elevated system privileges allows
attackers to inﬁltrate other machines and services once they gain access to one system. In
addition, a compromised executable can establish unauthorized connections to other critical
systems unless the right access controls are put in place. Therefore, we recommend the use of
role-based authentication and authorization, adaptive access using zero-trust security model and
privilege access management (see Figure 5).
Reproducible build practices to ensure that a given source code always results in the same
build output. See Note 4 for details on the “reproducible-builds” project and tools.
■
Signed Pipelines that create immutable, veriﬁable artifacts. For example, JFrog Signed
Pipelines and Tekton Chains enable signing artifacts generated during a pipeline run to ensure
immutability and verify provenance at the end of the pipeline execution.
■
Figure 5: Methods to Govern User Access and Privileged Accounts
Zero-Trust Network Access (ZTNA) provides controlled identity- and context-aware access to
development resources, reducing the surface area for supply chain attacks. It eliminates excessive
implicit trust placed on machines and services simply because they share the same network,
replacing it with explicit identity-based trust (see Market Guide for Zero Trust Network Access).
We recommend privileged access management (PAM) tools to monitor and protect privileged
service accounts that run builds and automation jobs. In the SolarWinds attack, attackers
modiﬁed trusted domains and abused privileged roles (see Note 1). We see that as a conﬁrmation
that privileged accounts are a primary target. Mitigating this risk often requires privileged
accounts to be managed by a PAM (see Top 10 Lessons Learned From the SolarWinds Attack).
PAM tools help vault privileged passwords, limit access to authorized users, rotate credentials
frequently and monitor the usage of privileged accounts. Vendors such as Akeyless (Zero Trust
Access), Britive and HashiCorp (Boundary) combine dynamic secrets, authentication,
authorization and just-in-time credentials to enforce least privilege access to services and
resources.
Machine Identity Management
Distributed application architectures, cloud-native infrastructure and APIs-as-products have
increased the granularity and volume of machine identities. Hosts, containers, VMs, applications,
database servers, services and API endpoints all use distinct machine identities. Machine
identities enable the services and endpoints to uniquely authenticate themselves while interacting
with other services.
The scale and speed at which machine identities are used to authenticate
and access services throughout the software supply chain makes machine
identity management now an imperative.
Examples of machine identities include server credentials such as TLS certiﬁcates and SSH host
keys, and client credentials such as OAuth credentials, API tokens and database connection
strings. Machine identity management (MIM) is the discipline of managing the life cycle and
access to these identities. MIM is not a single tool or market. It is a collection of practices and
tools that enhances trust and integrity of machine-to-machine interactions, which is critical to
securing development environments (see Table 3).
Table 3: Tools and Providers for Machine Identity Management
Encryption of data at rest, management of
symmetric keys
Key
management
systems
Use Case
Domain
Sample
Providers
Akeyless
■
AWS
■
KMS
■
Azure
■
Twilio (Ionic)
■
Fortanix
■
PKWARE
■
Thales and
Townsend
Security
■
Storing secrets used in the DevOps pipeline,
issuance of machine identities to containers
Secrets
management
Authentication, encryption and signatures for
code signing
PKI and
certificate
management
Discovering and controlling privileged access to
critical systems
Privileged
access
management
Use Case
Domain
Sample
Providers
Akeyless
■
AWS
■
Microsoft Azure
■
BeyondTrust
■
CyberArk
■
Fortanix
■
Google Cloud
Platform (GCP)
■
HashiCorp
■
ThycoticCentrify
■
AppViewX
■
AWS
■
DigiCert
■
Entrust
■
GlobalSign
■
Keyfactor
■
Microsoft
■
The Nexus
Group
■
Sectigo
■
Venafi
■
Akeyless
■
BeyondTrust
■
Broadcom
■
CyberArk
■
One Identity
■
ThycoticCentrify
■
Source: Gartner
Anomaly Detection and Automated Response
One of the lessons from the SolarWinds attack is that software engineering teams are ill-equipped
to detect and respond to anomalies before damage is done. Malicious attacks on software
development pipelines have a high likelihood of surfacing as an anomalous activity.
Examples of such anomalous activity include:
Software engineering leaders must work closely with security and risk teams to understand and
deﬁne the expected behavior of their development platforms and tools so they can detect
anomalies in real time. For example, EDR, CWPP, NDR or tools such as osquery can monitor for
system anomalies. Build systems, including PCs used by software engineers, should not be
exempt from EPP/EDR protection for this reason.
Anomaly detection and response is especially critical in container-native, GitOps-based
deployments that automate the full code-to-container workﬂow. Although container image
scanning tools in the development phase help detect known vulnerabilities, software engineering
teams must deploy tools to visualize container trafﬁc, identify cluster misconﬁgurations and alert
on anomalous container behavior and security events.
See Market Guide for Cloud Workload Protection Platforms for container and Kubernetes-focused
tools.
Evidence
1  Iron Bank
2  2020 State of the Software Supply Chain Report, Sonatype
Use Case
Domain
Sample
Providers
Executables establishing seemingly strange and unnecessary connections with their
“command and control” centers.
■
Increases in the number of processes or threads, CPU and memory utilization on select
machines.
■
Spikes in network access, repository uploads/downloads and unexpected directory access
trafﬁc.
■
Monitor for cloning of source code repositories using logging or other monitoring tools, such as
an EPP or SIEM. CASBs can also be useful in cases of SaaS-based version control systems.
■
3  Equifax Dat Breach, Epic.org
4  SaltStack Authorization Bypass, F-Secure Labs
5  SolarWinds Security Advisory, SolarWinds
Note 1: Examples of Software Supply Chain Security Attacks
 SolarWinds — Roughly 18,000 customers of SolarWinds downloaded trojanized versions of its
Orion IT monitoring and management software. The supply chain attack led to the breach of
government and high-proﬁle companies after attackers deployed a backdoor dubbed SUNBURST
or Solorigate.
 Octopus Scanner Malware — Octopus Scanner, an OSS supply chain malware targets NetBeans
IDE injecting backdoor code into resulting JAR ﬁles built with the IDE.
 Codecov — U.S. cybersecurity ﬁrm  Rapid7 had also revealed that some of their source code
repositories and credentials were accessed by Codecov attackers.
Note 2: Open-Source Projects for Container Signing and Admission
Tools
 Grafeas deﬁnes an API spec for managing metadata about software resources, such as
container images, VM images, JAR ﬁles, and scripts. It provides a centralized knowledge base for
artifacts, their origins, vulnerabilities, dependencies, etc. that make up the code-to-container
supply chain.
 Kritis is a Kubernetes admission controller that runs policy checks deﬁned by the Kubernetes
cluster admin, at runtime and then either approves or denies the pod to be launched — based on
vulnerabilities in the image or if the image is not obtained from a trusted source.
 Kritis Signer is a command-line tool that creates attestations for a container image.
 Cosign signs container images. Cosign is developed as part of the  sigstore project hosted by the
Linux Foundation. The goal of sigstore is to ease the adoption of signing software artifacts.
Note 3: Tracking Open-Source Dependency Chains
 Open Source Insights shows information about a package without requiring users to install the
package ﬁrst. Developers can see what installing a package means for their project, how popular
it is, ﬁnd links to source code, and then decide whether it should be installed. 
 OSSF Scorecard is a tool that helps evaluate security posture of OSS projects.
 Supply chain Levels for Software Artifacts (SLSA, pronounced “salsa”), an end-to-end framework
for ensuring the integrity of software artifacts throughout the software supply chain. It is inspired
by Google’s internal “Binary Authorization for Borg” and secures all of Google’s production
workloads.
Note 4: Reproducible Builds
The motivation behind the  Reproducible Builds project is to allow veriﬁcation that no
vulnerabilities or backdoors have been introduced during the compilation process. Tools such as
 diffoscope help compare ﬁles, directories and identify what makes them different. It can
compare jars, tarballs, ISO images, or PDFs.
Three guiding principles underpin the idea of reproducible builds:
Note 5: Package Typosquatting Supply Chain Attacks
Typosquatting is a type of software supply chain attack where the attacker tries to mimic the
name of an existing package in a public registry hoping that developers will accidentally
download the malicious package instead of the legitimate one. An npm package (loadsh) was
typosquatting the popular lodash package using the transposition of the “a” and “d” characters.
See this whitepaper for more details:  SpellBound: Defending Against Package
Typosquatting.Using artifact registries, software composition analysis and code scanning
reduces the risk from package typosquatting attacks on public repositories.
As noted in the 2020 State of the Software Supply Chain Report 2 by Sonatype, “Bad actors are no
longer waiting for public vulnerability disclosures. Instead, they are taking the initiative and actively
injecting malicious code into open-source projects that feed the global supply chain. By shifting
their focus “upstream,” bad actors can infect a single component, which will then be distributed
“downstream” using legitimate software workﬂows and update mechanisms.”
ReversingLabs revealed over  700 malicious gems (packages written in Ruby programming
language) being distributed through the RubyGems repository.  Twelve Python libraries uploaded
on the ofﬁcial Python Package Index (PyPI) contained malicious code. In Jan 2021, Sonatype
discovered  three malicious packages that were published to npm repository, all of which
leveraged brandjacking and typosquatting techniques.
Note 6: Frameworks and Standards for Evaluating Supply Chain
Security
 Evaluating Your Supply Chain Security — a Checklist by Cloud Native Computing Foundation
(CNCF)
 NIST Secure Software Development Framework
 NIST, Security and Privacy Controls for Information Systems and Organizations
Deterministic builds: A given source must always yield the same output.
■
Hardened build tools: The tools in the build pipeline are hardened and immutable.
■
■ Veriﬁable output: Ability to detect and ﬁx the discrepancy between expected and actual builds.
 Ul 2900 for IoT Certiﬁcation
 ISO/IEC 27034
Note 7: Sample Hashing and Signing Tools
 Visual Studio — Hashing Source Code Files with Visual Studio to Assure File Integrity
 GaraSign For Code Signing
© 2022 Gartner, Inc. and/or its Affiliates. All Rights Reserved.
© 2022 Gartner, Inc. and/or its afﬁliates. All rights reserved. Gartner is a registered trademark of Gartner, Inc.
and its afﬁliates. This publication may not be reproduced or distributed in any form without Gartner's prior
written permission. It consists of the opinions of Gartner's research organization, which should not be
construed as statements of fact. While the information contained in this publication has been obtained from
sources believed to be reliable, Gartner disclaims all warranties as to the accuracy, completeness or adequacy
of such information. Although Gartner research may address legal and ﬁnancial issues, Gartner does not
provide legal or investment advice and its research should not be construed or used as such. Your access and
use of this publication are governed by Gartner’s Usage Policy. Gartner prides itself on its reputation for
independence and objectivity. Its research is produced independently by its research organization without input
or inﬂuence from any third party. For further information, see "Guiding Principles on Independence and
Objectivity."
About
Careers
Newsroom 
Policies
Site Index
IT Glossary
Gartner Blog Network
Contact
Send
Feedback