## 前言
本文原文来自[Hex-Rays Microcode API vs. Obfuscating
Compiler](http://www.hexblog.com/?p=1248 "Hex-Rays Microcode API vs.
Obfuscating Compiler")。在IDA 7.1中IDA发布了反编译中使用的中间语言microcode，IDA
7.2和7.3中又新增了相关的C++和python API，这篇文章就是关于Rolf
Rolles如何使用这一新功能来处理ollvm混淆的，代码地址：[HexRaysDeob](https://github.com/RolfRolles/HexRaysDeob
"HexRaysDeob")。我翻译过程中为了方便理解加入了一些数据结构说明和相关代码对照，并不与原文完全相同。文章较长，分为上下两个部分。
## microcode和ctree
IDA反编译器中二进制代码有两种表示方式：  
microcode：处理器指令被翻译成microcode，反编译器对其进行优化和转换。  
使用[HexRaysDeob](https://github.com/RolfRolles/HexRaysDeob
"HexRaysDeob")插件除了处理ollvm混淆也可以查看microcode。  
ctree：由优化的microcode构建而成，用C语句和表达式表示像AST一样的树。  
使用[HexRaysCodeXplorer](https://github.com/REhints/HexRaysCodeXplorer
"HexRaysCodeXplorer")插件或者IDApython中的示例vds5.py可以查看ctree。  
IDA反编译的整体流程如下所示。  
这篇文章重点说microcode。
## microcode数据结构
microcode中四个比较重要的数据结构如下。  
**mbl_array_t**  
保存关于反编译代码和基本块数组的信息，比较重要的成员和函数如下。
    int qty;
    // 基本块数组的数量
    const mblock_t *get_mblock(int n) const { return natural[n]; }
    // 根据序号返回数组中对应的基本块
    mblock_t *hexapi insert_block(int bblk);
    // 插入一个基本块
    bool hexapi remove_block(mblock_t *blk);
    // 删除一个基本块
    bool hexapi remove_empty_blocks(void);
    // 删除所有空的基本块
    bool hexapi combine_blocks(void);
    // 合并线性的基本块
    int hexapi for_all_ops(mop_visitor_t &mv);
    // 遍历所有操作数(包括子指令的)
    int hexapi for_all_insns(minsn_visitor_t &mv);
    // 遍历所有指令(包括子指令)
    int hexapi for_all_topinsns(minsn_visitor_t &mv);
    // 遍历所有指令(不包括子指令)
**mblock_t**  
一个包含指令列表的基本块，比较重要的成员和函数如下。
    mblock_t *nextb;
    // 双向链表中的下一个基本块
    mblock_t *prevb;
    // 双向链表中的上一个基本块
    minsn_t *head;
    // 指向基本块中的第一条指令
    minsn_t *tail;
    // 指向基本块中的最后一条指令
    mbl_array_t *mba;
    // 所属的mbl_array_t
    int npred(void) const { return predset.size(); }
    // 该块的前驱者数目
    int nsucc(void) const { return succset.size(); }
    // 该块的后继者数目
    int pred(int n) const { return predset[n]; }
    // 该块的第n个前驱者
    int succ(int n) const { return succset[n]; }
    // 该块的第n个后继者
    minsn_t *hexapi insert_into_block(minsn_t *nm, minsn_t *om);
    // 向双向链表中插入指令
    minsn_t *hexapi remove_from_block(minsn_t *m);
    // 删除双向链表中的指令
    int hexapi for_all_ops(mop_visitor_t &mv);
    // 遍历所有操作数(包括子指令的)
    int hexapi for_all_insns(minsn_visitor_t &mv);
    // 遍历所有指令(包括子指令)
**minsn_t**  
表示一条指令，比较重要的成员和函数如下。指令可以嵌套，也就是说mop_t也可能会包含一个minsn_t。
    mcode_t opcode;
    // 操作码
    int iprops;
    // 一些表示指令性质的位的组合
    minsn_t *next;
    // 双向链表中的下一条指令
    minsn_t *prev;
    // 双向链表中的上一条指令
    ea_t ea;
    // 指令地址
    mop_t l;
    // 左操作数
    mop_t r;
    // 右操作数
    mop_t d;
    // 目标操作数
    int hexapi for_all_ops(mop_visitor_t &mv);
    // 遍历所有操作数(包括子指令的)
    int hexapi for_all_insns(minsn_visitor_t &mv);
    // 遍历所有指令(包括子指令)
**mop_t**  
表示一个操作数，根据它的类型可以表示不同的信息(数字，寄存器，堆栈变量等等)，比较重要的成员和函数如下。
    mopt_t t;
    // 操作数类型
    uint8 oprops;
    // 操作数属性
    uint16 valnum;