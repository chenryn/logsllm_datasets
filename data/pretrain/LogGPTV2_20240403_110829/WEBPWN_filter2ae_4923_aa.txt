# WEBPWN入门级调试讲解

##### 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 前言
在五一假期期间参加了De1CTF比赛，结果再次被高手们击败。比赛中遇到了一道WEBPWN类型的题目，这类题目的相关资料相对较少，且调试过程记录也不多。借此机会，我重新学习并记录了这一过程。

## 前置知识

### WEBPHP介绍
目前，大部分WEBPWN题目都是PHPPWN类型，即通过PHP加载外部扩展，核心漏洞通常位于.so扩展库中。与传统PWN题不同的是，PHPPWN不能直接获得交互式shell。对于栈溢出漏洞，我们仍然使用ROP链来绕过NX保护，最终目标是获得一个可以反弹到VPS上的交互式shell。通常可以使用`popen`或`exec`函数族来执行bash命令，从而反弹shell。直接调用`one_gadget`或`system`不太可行。

### PHPPWN相关前置知识点
要解决PHPPWN类型的题目，需要了解PHP扩展的基本知识。在Linux环境下，PHP扩展通常是`.so`文件，可以通过以下命令查看扩展模块的路径：
```sh
$> php -i | grep -i extension_dir
extension_dir => /usr/lib/php/20170718 => /usr/lib/php/20170718
```

#### PHP扩展模块的生命周期
1. **Module init (MINIT)**: 当PHP解释器启动时，会加载相关模块，并调用每个模块的MINIT方法，仅调用一次。
2. **Request init (RINIT)**: 每个请求到达时都会触发。SAPI层将控制权交给PHP层，PHP初始化本次请求所需的环境变量、函数列表等，并调用所有模块的RINIT函数。
3. **Request shutdown (RSHUTDOWN)**: 请求结束后，PHP会自动清理程序，顺序调用各个模块的RSHUTDOWN方法，清除程序运行期间的符号表。
4. **Module shutdown (MSHUTDOWN)**: 服务器关闭时，PHP调用各个模块的MSHUTDOWN方法释放内存。

#### PHP的生命周期
- 单进程SAPI生命周期
- 多进程SAPI生命周期
- 多线程SAPI生命周期

#### CLI运行模式
在开发PHP扩展时，通常使用命令行终端直接运行PHP解释器来解释执行`.php`文件。这种运行模式称为CLI模式，对应的PHP生命周期为单进程SAPI生命周期。

#### CGI运行模式
对于大多数网站应用服务器，PHP解释器运行在CGI模式下，即单进程SAPI生命周期。请求到达时，为每个请求fork一个进程，该进程只响应一个请求。请求结束后，进程结束。如果能获取到`/proc/{pid}/maps`文件，可以获得该进程的内存布局，形成内存泄露。这是De1CTF中这道WEBPWN题的第一个突破点，利用有漏洞的包含函数读取`/proc/self/maps`，可以获取所有基地址，从而绕过PIE保护。

## PHP扩展模块开发流程

### 环境搭建
在Ubuntu 18.04上，使用以下命令搭建开发环境：
```sh
$> sudo apt install php php-dev
$> php -v
PHP 7.2.24-0ubuntu0.18.04.4 (cli) (built: Apr  8 2020 15:45:57) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.2.24-0ubuntu0.18.04.4, Copyright (c) 1999-2018, by Zend Technologies
```
从[php的github源代码发布页面](https://github.com/php/php-src/releases)下载相同版本的源代码（例如php-7.2.24）。

### 目录结构
- `build`: 编译相关的目录，包括wk、awk和sh脚本用于编译处理。
- `ext`: 扩展库代码，如Mysql、gd、zlib、xml、iconv等。
- `main`: 主目录，包含PHP的主要宏定义文件。
- `netware`: 网络目录，包含SOCK通信所需的头文件和实现。
- `pear`: 扩展包目录。
- `sapi`: 各种服务器接口调用。
- `scripts`: Linux下的脚本目录。
- `tests`: 测试脚本目录。
- `TSRM`: 线程安全资源管理器。
- `win32`: Windows下编译PHP的相关脚本。
- `Zend`: 包含Zend引擎的所有文件。

### 扩展模块开发
进入源代码目录，使用以下命令生成扩展模块的工程项目：
```sh
$> ./ext_skel --extname=easy_phppwn
```
编写一个简单的栈溢出扩展函数，并在相应位置配置该扩展函数。配置完成后，使用以下命令进行编译：
```sh
$> ./configure --with-php-config=/usr/bin/php-config
```
在生成的Makefile文件中设置编译参数，取消`-O2`优化，否则会加上FORTIFY保护，导致`memcpy`函数变为`__memcpy_chk`。设置好后，使用`make`命令编译。编译完成后，将生成的`.so`文件复制到PHP扩展目录，并在`php.ini`文件中配置启动扩展：
```sh
$> sudo find / -name "php.ini"
/etc/php/7.2/apache2/php.ini
/etc/php/7.2/cli/php.ini
```
在`php.ini`文件末尾加入：
```ini
extension=easy_phppwn.so
```
写一个`.php`文件，调用`phpinfo()`函数进行验证：
```sh
$> php test.php | grep "easy_phppwn"
easy_phppwn
easy_phppwn support => enabled
PWD => /home/pwn/Desktop/phppwn/easy_phppwn
$_SERVER['PWD'] => /home/pwn/Desktop/phppwn/easy_phppwn
```
至此，我们完成了一个简单的PHP扩展模块的开发，并具备了调试PHPPWN的环境。

## PHP扩展模块的调试及PHPPWN调试
使用IDA打开扩展模块文件，分析`zif_easy_phppwn`函数：
```c
void __cdecl zif_easy_phppwn(zend_execute_data *execute_data, zval *return_value)
{
    char buf[100]; // [rsp+10h] [rbp-80h]
    size_t n; // [rsp+80h] [rbp-10h]
    char *arg; // [rsp+88h] [rbp-8h]
    arg = 0LL;
    if ((unsigned int)zend_parse_parameters(execute_data->This.u2.next, "s", &arg, &n) != -1)
    {
        memcpy(buf, arg, n);
        php_printf("The baby phppwn.\n");
    }
}
```
由于开启了NX保护，我们需要使用ROP链来绕过。具体的调试过程如下：
编写一个PHP文件调用`easy_phppwn`函数：
```php
<?php
$a = "abcd";
easy_phppwn($a);
?>
```

通过以上步骤，我们可以逐步调试并利用PHP扩展模块中的漏洞。