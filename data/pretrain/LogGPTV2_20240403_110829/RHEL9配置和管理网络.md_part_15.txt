    ``` literallayout
    # nmstatectl show bridge0
    ```
:::
::: itemizedlist
**其他资源**
-   `nmstatectl(8)`{.literal} man page
-   `/usr/share/doc/nmstate/examples/`{.literal}
:::
:::
:::
[]{#configuring-network-teaming_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#configuring-network-teaming_configuring-and-managing-networking}第 11 章 配置网络团队（team） {.title}
:::
这部分论述了网络团队的基础知识、绑定和团队之间的不同以及如何在 Red Hat
Enterprise Linux 中配置网络团队。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
网络 teaming 在 Red Hat Enterprise Linux 9
中已弃用。考虑使用网络绑定驱动程序作为替代方案。详情请参阅
[配置网络绑定](#configuring-network-bonding_configuring-and-managing-networking.html "第 12 章 配置网络绑定"){.link}。
:::
您可以在不同类型的设备中创建网络团队，例如：
::: itemizedlist
-   物理和虚拟以太网设备
-   网络绑定
-   网络桥接
-   VLAN 设备
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#proc_migrating-a-network-team-configuration-to-network-bond_configuring-network-teaming}将网络团队配置迁移到网络绑定 {.title}
:::
网络 teaming 在 Red Hat Enterprise Linux 9
中已弃用。如果您已经配置了正常工作的网络团队，例如，因为从以前的 RHEL
版本升级，您可以将配置迁移到由 NetworkManager 管理的网络绑定。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`team2bond`{.literal}
程序只将网络团队配置转换为绑定。之后，您必须手动配置绑定的进一步设置，如
IP 地址和 DNS 配置。
:::
::: itemizedlist
**先决条件**
-   `team-team0`{.literal} NetworkManager 连接配置集已配置并管理
    `team0`{.literal} 设备。
-   已安装 `teamd`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  可选：显示 `team-team0`{.literal} NetworkManager 连接的 IP 配置：
    ``` literallayout
    # nmcli connection show team-team0 | egrep "^ip"
    ...
    ipv4.method:                            manual
    ipv4.dns:                               192.0.2.253
    ipv4.dns-search:                        example.com
    ipv4.addresses:                         192.0.2.1/24
    ipv4.gateway:                           192.0.2.254
    ...
    ipv6.method:                            manual
    ipv6.dns:                               2001:db8:1::fffd
    ipv6.dns-search:                        example.com
    ipv6.addresses:                         2001:db8:1::1/64
    ipv6.gateway:                           2001:db8:1::fffe
    ...
    ```
2.  将 `team0`{.literal} 设备的配置导出到 JSON 文件中：
    ``` literallayout
    # teamdctl team0 config dump actual > /tmp/team0.json
    ```
3.  删除网络组。例如，如果您在 NetworkManager 中配置了团队，请删除
    `team-team0`{.literal} 连接配置集以及相关端口的配置集：
    ``` literallayout
    # nmcli connection delete team-team0
    # nmcli connection delete team-team0-port1
    # nmcli connection delete team-team0-port2
    ```
4.  以空运行模式运行 `team2bond`{.literal} 程序，以显示
    `nmcli`{.literal} 命令，该命令使用类似设置的网络绑定设置为团队设备：
    ``` literallayout
    # team2bond --config=/tmp/team0.json --rename=bond0
    nmcli con add type bond ifname bond0 bond.options "mode=active-backup,num_grat_arp=1,num_unsol_na=1,resend_igmp=1,miimon=100,miimon=100"
    nmcli con add type ethernet ifname enp7s0 master bond0
    nmcli con add type ethernet ifname enp8s0 master bond0
    ```
    第一个命令包含两个 `miimon`{.literal} 选项，因为团队配置文件包含两个
    `link_watch`{.literal} 条目。请注意，这不会影响创建绑定。
    如果您将服务绑定到团队的设备名称并希望避免更新或破坏这些服务，请省略
    `--rename=bond0`{.literal} 选项。在这种情况下，`team2bond`{.literal}
    为绑定使用与团队相同的接口名称。
5.  验证推荐 `team2bond`{.literal} 工具的绑定选项是否正确。
6.  创建绑定。您可以执行建议的 `nmcli`{.literal} 命令，或使用
    `--exec-cmd`{.literal} 选项重新运行 `team2bond`{.literal} 命令：
    ``` literallayout
    # team2bond --config=/tmp/team0.json --rename=bond0 --exec-cmd
    Connection 'bond-bond0' (0241a531-0c72-4202-80df-73eadfc126b5) successfully added.
    Connection 'bond-slave-enp7s0' (38489729-b624-4606-a784-1ccf01e2f6d6) successfully added.
    Connection 'bond-slave-enp8s0' (de97ec06-7daa-4298-9a71-9d4c7909daa1) successfully added.
    ```
    下一步需要绑定连接配置集的名称(`bond-bond0`{.literal})。
7.  将之前在 `team-team0`{.literal} 中配置的 IPv4 设置设置为
    `bond-bond0`{.literal} 连接：
    ``` literallayout
    # nmcli connection modify bond-bond0 ipv4.addresses '192.0.2.1/24'
    # nmcli connection modify bond-bond0 ipv4.gateway '192.0.2.254'
    # nmcli connection modify bond-bond0 ipv4.dns '192.0.2.253'
    # nmcli connection modify bond-bond0 ipv4.dns-search 'example.com'
    # nmcli connection modify bond-bond0 ipv4.method manual
    ```
8.  将之前在 `team-team0`{.literal} 中配置的 IPv6 设置设置为
    `bond-bond0`{.literal} 连接：
    ``` literallayout
    # nmcli connection modify bond-bond0 ipv6.addresses '2001:db8:1::1/64'
    # nmcli connection modify bond-bond0 ipv6.gateway '2001:db8:1::fffe'
    # nmcli connection modify bond-bond0 ipv6.dns '2001:db8:1::fffd'
    # nmcli connection modify bond-bond0 ipv6.dns-search 'example.com'
    # nmcli connection modify bond-bond0 ipv6.method manual
    ```
9.  激活连接：
    ``` literallayout
    # nmcli connection up bond-bond0
    ```
:::
::: orderedlist
**验证**
1.  显示 `bond-bond0`{.literal} NetworkManager 连接的 IP 配置：
    ``` literallayout
    # nmcli connection show bond-bond0 | egrep "^ip"
    ...
    ipv4.method:                            manual
    ipv4.dns:                               192.0.2.253
    ipv4.dns-search:                        example.com
    ipv4.addresses:                         192.0.2.1/24
    ipv4.gateway:                           192.0.2.254
    ...
    ipv6.method:                            manual
    ipv6.dns:                               2001:db8:1::fffd
    ipv6.dns-search:                        example.com
    ipv6.addresses:                         2001:db8:1::1/64
    ipv6.gateway:                           2001:db8:1::fffe
    ...
    ```
2.  显示绑定状态：
    ``` literallayout
    # cat /proc/net/bonding/bond0
    Ethernet Channel Bonding Driver: v5.13.0-0.rc7.51.el9.x86_64
    Bonding Mode: fault-tolerance (active-backup)
    Primary Slave: None
    Currently Active Slave: enp7s0
    MII Status: up
    MII Polling Interval (ms): 100
    Up Delay (ms): 0
    Down Delay (ms): 0
    Peer Notification Delay (ms): 0
    Slave Interface: enp7s0
    MII Status: up
    Speed: Unknown
    Duplex: Unknown
    Link Failure Count: 0
    Permanent HW addr: 52:54:00:bf:b1:a9
    Slave queue ID: 0
    Slave Interface: enp8s0
    MII Status: up
    Speed: Unknown
    Duplex: Unknown
    Link Failure Count: 0
    Permanent HW addr: 52:54:00:04:36:0f
    Slave queue ID: 0
    ```
    在这个示例中，两个端口都是上线的。
3.  验证绑定故障切换是否正常工作：
    ::: orderedlist
    1.  从主机中临时删除网络电缆。请注意，无法使用命令行正确测试链路失败事件。
    2.  显示绑定状态：
        ``` literallayout
        # cat /proc/net/bonding/bond0
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-network-teaming_configuring-network-teaming}了解网络团队 {.title}
:::
网络团队（network
teaming）是一个合并或聚合网络接口的功能，它提供了一个高吞吐量或冗余的逻辑接口。
网络团队使用内核驱动程序来实现对数据包流、用户空间库以及用于其他任务的服务的快速处理。因此，网络团队是一个易扩展的解决方案，来满足负载平衡和冗余的要求。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
某些网络团队的功能，比如故障切换机制，不支持不通过网络交换机的直接电缆连接。详情请查看[是否支持直接连接的绑定？](https://access.redhat.com/solutions/202583){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-the-default-behavior-of-controller-and-port-interfaces_configuring-network-teaming}了解控制器和端口接口的默认行为 {.title}
:::
使用 `NetworkManager`{.literal}
服务管理团队或绑定端口接口时，请考虑以下默认行为：
::: itemizedlist
-   启动控制器接口不会自动启动端口接口。
-   启动端口接口总会启动控制器接口。
-   停止控制器接口也会停止端口接口。
-   没有端口的控制器可以启动静态 IP 连接。
-   没有端口的控制器在启动 DHCP 连接时会等待端口。
-   当您添加具有载体的端口时，等待端口且具有 DHCP 连接的控制器会完成。
-   当您添加不具有载体的端口时，等待端口且具有 DHCP
    连接的控制器将继续等待。
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-the-teamd-service-runners-and-link-watchers_configuring-network-teaming}了解 teamd 服务、运行程序和 link-watchers {.title}
:::
team 服务 `teamd`{.literal}
控制团队驱动程序的一个实例。这个驱动的实例添加硬件设备驱动程序实例组成一个网络接口组。团队驱动程序向内核提供了一个网络接口，如
`team0`{.literal}。
`teamd`{.literal}
服务在所有合作方法中实施通用逻辑。这些功能对不同的负载共享和备份方法（如循环），并由称为运行程序（
`运行程序`{.literal} ）的单独代码单元实施。管理员以 JavaScript Object
Notation(JSON)格式指定运行程序，在创建实例时，JSON 代码编译到
`teamd`{.literal} 实例中。另外，在使用 `NetworkManager`{.literal}
时，您可以在 `team.runner`{.literal}
参数中设置运行程序，`NetworkManager`{.literal} 会自动创建对应的 JSON
代码。
可用的运行程序如下：
::: itemizedlist
-   `广播`{.literal} ：跨所有端口转换数据.
-   `roundrobin`{.literal} ：依次通过所有端口传输数据。
-   `activebackup`{.literal}
    ：通过一个端口传输数据，其他端口则作为备份保存。
-   Loadbalance：通过所有使用活跃 Tx 负载均衡和 Berkeley Packet
    Filter(BPF)的 Tx 端口选择器来传输数据。``{.literal}
-   `Random`{.literal} ：在随机选择的端口上转换数据。
-   `LACP`{.literal} ：实施 802.3ad 链路聚合控制协议(LACP)。
:::
`teamd`{.literal} 服务使用链路监视器来监控下级设备的状态。可用的
link-watchers 如下：
::: itemizedlist
-   `ethtool`{.literal} ： `libteam`{.literal} 库使用
    `ethtool`{.literal} 实用程序来监视链接状态的更改。这是默认的
    link-watcher。
-   `arp_ping`{.literal}: `libteam`{.literal} 库使用
    `arp_ping`{.literal}
    程序来监控使用地址解析协议(ARP)的边缘硬件地址是否存在。
-   `nsna_ping`{.literal}: on IPv6 连接，`libteam`{.literal} 库使用来自
    IPv6邻居发现协议的邻居公告和邻居请求功能来监控邻居接口的存在。
:::
每个运行程序都可以使用任何链路监视器，但 `lacp`{.literal}
除外。此运行程序只能使用 `ethtool`{.literal} 链接监视器。
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#installing-the-teamd-service_configuring-network-teaming}安装 teamd 服务 {.title}
:::
要在 `NetworkManager`{.literal} 中配置网络团队，您需要
`NetworkManager`{.literal} 的 `teamd`{.literal} 服务和 team
插件。默认情况下，它们都会在 Red Hat Enterprise Linux
上安装。这部分论述了如何在删除所需软件包时安装它们。
::: itemizedlist
**先决条件**
-   为主机分配了活跃的红帽订阅。
:::
::: itemizedlist
**步骤**
-   安装 `teamd`{.literal} 和 `NetworkManager-team`{.literal} 软件包：
    ``` literallayout
    # dnf install teamd NetworkManager-team
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#configuring-a-network-team-using-nmcli-commands_configuring-network-teaming}使用 nmcli 命令配置网络团队 {.title}