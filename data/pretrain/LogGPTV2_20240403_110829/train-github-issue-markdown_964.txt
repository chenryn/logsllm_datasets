I am working on a new PowerShell script and would like to incorporate Unicode emojis, which are now supported in the new Windows Terminal Preview. However, for users running "legacy" PowerShell that does not support these emojis, I want to display alternative text or symbols instead of showing unrecognized characters.

To clarify, I want my script to detect whether it is running in the new Windows Terminal and show the emojis, and if it is running in any other terminal, display a different message.

I have tried using the `$env:TERM_PROGRAM` environment variable. When I run the script in the Visual Studio Code (VSCode) integrated terminal, it returns "vscode," but in a standard PowerShell terminal or the new Windows Terminal, it returns an empty string. 

Does anyone have any suggestions on how to achieve this?

### Possible Solution
One approach could be to check for specific environment variables or terminal properties that are unique to the new Windows Terminal. Hereâ€™s a sample script that demonstrates this:

```powershell
# Check if the script is running in the new Windows Terminal
$isNewTerminal = $false

# New Windows Terminal sets the WT_SESSION environment variable
if ($env:WT_SESSION) {
    $isNewTerminal = $true
}

# Alternatively, you can check for the presence of the `wt.exe` process
$wtProcess = Get-Process -Name wt -ErrorAction SilentlyContinue
if ($wtProcess) {
    $isNewTerminal = $true
}

# Use the result to conditionally display the appropriate message
if ($isNewTerminal) {
    Write-Host "ðŸ‘‹ Hello, this is the new Windows Terminal! ðŸš€"
} else {
    Write-Host "Hello, this is a legacy terminal. ðŸ˜Š"
}
```

This script first checks for the `WT_SESSION` environment variable, which is set by the new Windows Terminal. If that fails, it checks for the presence of the `wt.exe` process, which is another indicator of the new terminal. Based on these checks, it displays the appropriate message.

If you have any other ideas or improvements, please let me know!