Message Signatures.
A policy may request a user to sign a message, which will be
reﬂected in a claim according to the example in Section 4.2. The
idemix proof speciﬁcation provides a dedicated Message element,
which allows for a direct translation from the claim.
Attribute Disclosure to Third Parties.
Conditional attribute disclosure to third parties is also included
into the proof speciﬁcation as a distinct primitive. Consequently, it
can be almost employed as directly as message signatures. The es-
sential difference is that a veriﬁable encryption requires the user to
specify the pubic key of the trusted entity, which she has to (authen-
tically) retrieve before being able to create the encryption. Further-
more, she needs to add the condition under which the decryption is
released to the VerifiableEncryption element.
Note that to attain a transaction binding, i.e., the binding among
all attributes that are veriﬁably encrypted to one another, the ver-
iﬁable encryption needs to contain all the transaction relevant at-
tributes. This is of importance to make sure that none of the par-
ties in the accountability transaction can change the context, i.e.,
misuse the veriﬁable encryption. While the claim language allows
for disclosing a list of terms, i.e., attribute references or constants,
the proof speciﬁcation does not currently do so. Thus, for every
attribute reference we create a separate veriﬁable encryption. Dis-
closure of constants is currently not supported by the proof speciﬁ-
cation.
Attribute Predicates.
Predicates over attributes range from simple expressions that can
be directly achieved using a dedicated element in the proof speci-
ﬁcation to almost arbitrarily complex statements, which need ex-
tensions to the proof speciﬁcation language to be expressable. We
explain the transformations for the cases mentioned in Table 2 in
Section 5.2.2. Note that attribute predicate proofs over revealed at-
tributes are not supported. Therefore, all the predicate’s attribute
variables whose values are revealed have to be replaced with their
disclosed values.
5.2.2 Generating Attribute Predicate Evidence
In the following, we introduce the mappings of a claim’s attribute
predicate to an idemix proof speciﬁcation. We refer to Section 6 for
further details.
Equality.
Details of equality predicates in a claim are given on Line 6-8 in
Table 2. As already mentioned, the proof speciﬁcation expresses
equality among attributes (Line 6) by using the same attribute iden-
tiﬁer. Proving equality between an attribute and a given constant
(Line 7) amounts to revealing the attribute value. Note that the ver-
iﬁer needs to check whether the value stated in the claim actually
corresponds to the revealed value. Finally, equality statements in-
volving arithmetic expressions have to be mapped to commitments
and representations. We show a concrete example of the equality
a.b · c.d == e.f in Section 6.2.
Not Equal To.
Statements that express that one value is unequal to another one,
are generically hard to proof as technology like idemix is built
for proving equality of elements. Still, we can prove a statement
a.b − c.d 6= 0 rather than a.b 6= c.d. While maintaining seman-
tic equivalence we manage to change the statement such that the
veriﬁer can check it. This results as we handle the attributes as ex-
ponents and the veriﬁer can check that the resulting exponent not
being equal to zero.
Using this rational we can transform the statements of Line 9
and 10 into statements that are not equal to zero, i.e., a.b − c.d 6=
0, a.b − ConstExp 6= 0. Consequently, using commitments and
representations in the generalized form as we explain in Section 6.2,
we can express “Not Equal To” statements.
InEquality.
The inequality operators  are implemented using
Boudot [4] interval proofs. This concept proﬁts from a dedicated
20element called Inequality in the idemix proof speciﬁcation. A
limitation w.r.t. the claim language is that only integers and dates
(which are encoded into integers) are supported.
In addition, the implementation only allows for unrevealed at-
tributes to be compared with (1) constants, or (2) revealed attributes.
For instance, it does not allow to express a formula of the form in-
dicated in Line 12 in Table 2, i.e., a.b < c.d. Such expression
where both attributes are unrevealed, needs to be transformed into
a.b − c.d < 0. We use commitments to each of the attributes to
build a representation that contains the subtraction of the attributes,
i.e., a.b − c.d. Using this value we can proceed and prove an in-
equality statement as if the value a.b − c.d were a regular attribute
value directly certiﬁed by a credential.
Non-constant Expressions.
In the Lines 8, 11, and 14 of Table 2, the non-constant expres-
sions (NonConstExp) may either be an arithmetic expression or a
function call. We address the former by generating commitments as
well as representations such that the desired value, e.g., a.b − 2c.d,
is available as if it were a regular attribute in a credential. The ex-
ample in Section 6.2 provides an intuition on how the commitments
and representations have to be generated.
Support for function calls heavily depends on the concrete func-
tion. Subsequently, each function would require a dedicated map-
ping and possibly even special algorithms for the functionality to be
supported. We envision special functions only to become available
once a convincing use case for a particular function is available.
5.2.3 Verifying Idemix Evidence
Once the idemix evidence has been generated and transmitted
to the server, the latter needs to translate the user-provided claim
into a proof speciﬁcation the same way the user did. As a result
it will get an idemix proof speciﬁcation that, together with the evi-
dence itself, serves as input to the idemix library (cf. Figure 1). The
ﬁrst step of the veriﬁcation consists of the idemix library verifying
the cryptographic properties of the evidence. The second step con-
sists of the veriﬁcation of the disclosed attributes, which have to be
matched with the constants used in the claim. A particularity of the
idemix implementation lies in the fact that strings currently are en-
coded by employing a hash function. Thus, the disclosed attributes
can, in case of strings, not be mapped to their original value, thus,
they have to be transmitted from the user to the veriﬁer. Still the
veriﬁer needs to assert that the transmitted values match the values
revealed in the evidence.
5.3 U-Prove Evidence
To fulﬁll a claim with U-Prove, our claim language needs to be
translated into a U-Prove token as speciﬁed in the U-Prove WS-
Trust proﬁle [17]. This proﬁle deﬁnes which attributes are revealed
(in WS-Trust attributes are called claims). Thus, to generate U-
Prove evidence in our system, we would need to translate our claim
into a set of U-Prove WS-Token speciﬁcations, one for each cre-
dential (U-Prove token) that shall be used. These speciﬁcations
then deﬁne the attributes that are revealed. Finally, the different
U-Prove tokens generated according to these speciﬁcations are as-
sembled to build the ﬁnal evidence.
6.
IDEMIX PROOF-SPEC EXTENSIONS
Table 2 shows basic expression patterns that are theoretically
supported by the idemix library but cannot be expressed using the
current proof speciﬁcation language. As we only need to slightly
change the languages proposed in [2] in order to provide a substan-
tial improvement to the overall system, we describe those changes
here. We provide an intuition on how to extend the idemix proof
speciﬁcation language such that the concepts marked with a X+in
Table 2 are supported.
6.1 Generalized Issuance Process
The design of the proof speciﬁcation considers a limited issuance
scenario, namely, it does not consider that a credential structure is
deﬁned by an entity different from an issuer. As we presume that
multi-national organizations will specify the format of widely used
credentials, we need to specify credential structures independently
from issuer-related values. We attain this independence by remov-
ing the issuer public key from the credential structure and adding it
to each credential in a proof speciﬁcation. The rational being that
a credential structure is independent from an issuer and only a cre-
dential, i.e., the instantiation of a credential structure, is linked to
the issuer.
6.2 Generalized Representations
Considering the deﬁnition of representations in [2] we require a
set of extensions. More speciﬁcally we require that a representation
may (1) refer to other elements (e.g., commitments or representa-
tions) as its bases, (2) use constant exponents, and (3) re-use an
already deﬁned representation object. We use the ﬁrst and second
property to recursively build elements from arithmetic formulas in-
volving certiﬁed attributes as referred to in Section 5.2.2. The last
property is needed to establish an equality relation among differ-
ent representations, which can be used to establish the equality of
formulas.
For instance, assume that we need to prove that one attribute is
the product of two other attributes, i.e., a.b·c.d = e.f (cf. Line 8 of
Table 2). To realize this, we need to generate a commitment to each
of these attributes and then prove that the commitment to the third
attribute is equal to the commitments to the second attribute, raised
to power of the value of the ﬁrst attribute, times the group element
used to randomize commitments raised to power of some integer
(the value of which is not of relevance). Similar to this example we
can implement more elaborate arithmetic expression by translating
them into commitments and representations.
6.3 Relation between U-Prove and Idemix
The signature schemes that underlie U-Prove and idemix are
similar. That is, they are both schemes that allow an issuer to
(blindly) sign messages where the messages are algebraically en-
coded as exponents of a representation of an element of an alge-
braic group. The selective disclosure of attributes is in both cases
realized by revealing some exponents (messages) and using a zero-
knowledge proof of knowledge of the undisclosed attributes. A
zero-knowledge proof can, as the name suggests, convince a veri-
ﬁer of the fact that the prover holds some values without commu-
nicating any other information. The difference between the two
schemes is that they are based on different cryptographic assump-
tions and that, due to its cryptographic properties, a U-Prove signa-
ture can only be used once to in a proof (otherwise, the proof is no
longer zero-knowledge and transactions become linkable).
The advanced features that idemix provides are all realized with
cryptography that uses discrete-logarithms mechanisms. There-
fore, they can in principle also be employed for U-Prove if the U-
Prove speciﬁcation [16] were modiﬁed accordingly. As a result the
speciﬁcation will presumably become rather complex.
Alternatively, one could also embed U-Prove into the idemix
framework [18]. As the idemix implementation treats different
cryptographic building blocks such as signature, commitment, and
veriﬁable encryption schemes as different modules and orchestrates
21them guided by issuing and proof speciﬁcations (cf. Section 3.2),
the Brands signature scheme [5] could be integrated as an alterna-
tive to the CL signature scheme [8].
7.
IMPLEMENTATION
We have implemented the data-minimizing authentication frame-
work shown in Figure 1. In particular, we implemented the CARL
policy and the claim languages, the pre-evaluation aspect of com-
ponent (1a) as well as the components (2a), (2c), (3a) and (3b).
Although the implementation is open for being used with any cre-
dential technology, the components (2c) and (3b) have been instan-
tiated with the evidence generation and veriﬁcation mechanisms
that employ the idemix cryptographic library. Note that message
signatures and disclosure to third parties are currently not imple-
mented. All components of the framework have been released as
Open Source Software under the Eclipse Public License and are
available for download at http://www.primelife.eu, where also the
idemix cryptographic library is available.
We are currently working on the implementation of the claim se-
lection (2b) that presents the possible claims to the user so that she
can make a selection accordingly. Once this is ﬁnished, applica-
tions can be built that employ our framework for privacy-friendly
authentication. Building such an application could for instance be
realized by integrating our framework with an XACML access con-
trol engine. Ardagna et al.[1] give an intuition on how this could
be done.
8. CONCLUSION
We presented an important reason that hinders privacy-friendly
authentication to be used in practice today, namely, the lack of
a framework that utilizes privacy-friendly credential technologies,
such as anonymous credentials, for authentication purposes. In this
paper we describe all necessary components that allow for an im-
plementation of such framework. We propose a simple claim lan-
guage that provides adequate expressivity to address the core func-
tionality of anonymous credential systems. Further, we describe
how those functionalities are mapped to the concrete evidence spec-
iﬁcation languages of idemix and U-Prove.
We implemented the proposed framework and connected it to the
existing idemix implementation. We show how the latter should be
amended to attain the full expressivity of our claim language. Us-
ing our implementation has the following advantages, namely, (1)
users beneﬁt from signiﬁcantly increased more privacy, (2) service
providers gain in data quality due to the certiﬁed data being used,
and (3) service providers substantially reduce the risks associated
with holding large sets of sensitive information.
We envision to continue this trail of thought and provide a map-
ping from the claim language to SAML. By using SAML as WS-
Trust security token, our data-minimizing authentication scenario
may be implemented by means of current standards, which would
also beneﬁt its adoption.
9. REFERENCES
[1] Claudio A. Ardagna, Sabrina De Capitani di Vimercati,
Gregory Neven, Stefano Paraboschi, Franz-Stefan Preiss,
Pierangela Samarati, and Mario Verdicchio. Enabling
Privacy-Preserving Credential-Based Access Control with
XACML and SAML. In Proc. of the Third IEEE TSP, 2010.
[2] Patrik Bichsel and Jan Camenisch. Mixing identities with
ease. In Evelyne De Leeuw, Simone Fischer-Hübner, and
Lothar Fritsch, editors, IDMAN ’10, pages 1–17. Springer,
November 2010.
[3] Patrik Bichsel, Jan Camenisch, Franz-Stefan Preiss, and
Dieter Sommer. Dynamically-changing interface for
interactive selection of information cards satisfying policy
requirements. Technical Report RZ 3756, IBM Research
Zurich, 2009. domino.research.ibm.com/library/cyberdig.nsf.
[4] Fabrice Boudot. Efﬁcient proofs that a committed number
lies in an interval. In Bart Preneel, editor, EUROCRYPT ’00,
volume 1807 of LNCS, pages 431–444. Springer, 2000.
[5] Stefan Brands. Rethinking Public Key Infrastructures and
Digital Certiﬁcates: Building in Privacy. MIT Press, 2000.
[6] Jan Camenisch and Thomas Groß. Efﬁcient attributes for
anonymous credentials. In Proc. 15th ACM CCS, pages
345–356. ACM Press, November 2008.
[7] Jan Camenisch, Susan Hohenberger, Markulf Kohlweiss,
Anna Lysyanskaya, and Mira Meyerovich. How to win the
clonewars: efﬁcient periodic n-times anonymous
authentication. In Ari Juels, Rebecca N. Wright, and Sabrina
De Capitani di Vimercati, editors, Proc. 13th ACM CCS,
pages 201–210. ACM Press, 2006.
[8] Jan Camenisch and Anna Lysyanskaya. Efﬁcient
non-transferable anonymous multi-show credential system
with optional anonymity revocation. In Birgit Pﬁtzmann,
editor, EUROCRYPT ’01, volume 2045 of LNCS, pages
93–118. Springer, 2001.
[9] Jan Camenisch, Sebastian Moedersheim, Gregory Neven,
Franz-Stefan Preiss, and Dieter Sommer. A Card
Requirements Language Enabling Privacy-Preserving Access
Control. In Proceedings of the 15th ACM Symposium on
Access Control Models and Technologies, 2010.
[10] Jan Camenisch and Victor Shoup. Practical veriﬁable
encryption and decryption of discrete logarithms. http://
eprint.iacr.org/2002/161, 2002.
[11] David Chaum. Untraceable electronic mail, return addresses,
and digital pseudonyms. Comm. of the ACM, 24(2):84–88,
February 1981.
[12] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley,
and W. Polk. Internet X.509 Public Key Infrastructure
Certiﬁcate and Certiﬁcate Revocation List (CRL) Proﬁle.
RFC 5280 (Proposed Standard), May 2008. http://www.ietf.
org/rfc/rfc5280.txt.
[13] Amos Fiat and Adi Shamir. How to prove yourself: Practical
solutions to identiﬁcation and signature problems. In
Andrew M. Odlyzko, editor, CRYPTO ’86, volume 263 of
LNCS, pages 186–194. Springer, 1987.
[14] OASIS. Assertions and protocols for the OASIS security
assertion markup language (SAML) v2.0, 2005. http://docs.
oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf.
[15] OpenID authentication 2.0, December 2007. http://openid.
net/developers/specs/.
[16] Christian Paquin. U-Prove cryptographic speciﬁcation V1.1.
Technical report, Microsoft Corporation, February 2011.
[17] Christian Paquin. U-Prove WS-Trust Proﬁle V1.0. Technical
report, Microsoft Corporation, February 2011.
[18] Security Team, IBM Research Zurich. Speciﬁcation of the
identity mixer cryptographic library. IBM Research Report
RZ 3730, IBM Research Division, April 2010. http://domino.
research.ibm.com/library/cyberdig.nsf.
[19] K. Zeilenga. Lightweight Directory Access Protocol
(LDAP): Technical Speciﬁcation Road Map. RFC 4510
(Proposed Standard), June 2006. http://www.ietf.org/rfc/
rfc4510.txt.
22