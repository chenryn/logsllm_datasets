In this example, we will create and send a kAESleep Apple Event to the system process, causing the
system to go to sleep. The loginwindow program is the system process, although we do not refer to the
system process by name or process ID in our programwe use the special process serial number { 0,
kSystemProcess } to specify the target of the Apple Event.
// sleeper.c
#include 
int
main(void)
{
OSStatus osErr = noErr;
AEAddressDesc target;
ProcessSerialNumber systemProcessPSN;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 115 of 153
AppleEvent eventToSend, eventToReceive;
// Initialize some data structures
eventToSend.descriptorType = 0;
eventToSend.dataHandle = NULL;
eventToReceive.descriptorType = 0;
eventToReceive.dataHandle = NULL;
systemProcessPSN.highLongOfPSN = 0;
systemProcessPSN.lowLongOfPSN = kSystemProcess;
// Create a new descriptor record for target
osErr = AECreateDesc(typeProcessSerialNumber,// descriptor type
&systemProcessPSN, // data for new descriptor
sizeof(systemProcessPSN), // length in bytes
&target); // new descriptor returned
if (osErr != noErr) {
fprintf(stderr, "*** failed to create descriptor for target\n");
exit(osErr);
}
// Create a new Apple Event that we will send
osErr = AECreateAppleEvent(
kCoreEventClass, // class of Apple Event
kAESleep, // event ID
&target, // target for event
kAutoGenerateReturnID, // use auto ID unique to current session
kAnyTransactionID, // we are not doing an event sequence
&eventToSend); // pointer for result
if (osErr != noErr) {
fprintf(stderr, "*** failed to create new Apple Event\n");
exit(osErr);
}
// Send the Apple Event
osErr = AESend(&eventToSend,
&eventToReceive, // reply
kAENoReply, // send mode
kAENormalPriority, // send priority
kAEDefaultTimeout, // timeout in ticks
NULL, // idle function pointer
NULL); // filter function pointer
if (osErr != noErr) {
fprintf(stderr, "*** failed to send Apple Event\n");
exit(osErr);
}
// Deallocate memory used by the descriptor
AEDisposeDesc(&eventToReceive);
exit(0);
}
$ gcc -Wall -o sleeper sleeper.c -framework Carbon
$ ./sleeper # make sure you mean to do this!
9.16. Notifications
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 116 of 153
In simple terms, a notification is a message sent by one entity to another to inform the latter of an event's
occurrence. The following are some general aspects of notifications and notification mechanisms in the
context of Mac OS X.
Notifications can be intraprocess, interprocess, or even between the kernel and a user process. A
single notification can also be broadcast to multiple parties. Mac OS X provides several user-level
and kernel-level notification mechanisms.
There are several ways notification messages can be transmitted, for example, using Mach IPC,
signals, shared memory, and so on. A single notification API may offer multiple delivery
mechanisms.
In a typical interprocess notification mechanism, one party programmatically registers a request
with a (usually) centralized notification broker. The registration includes details of the types of
events the caller is interested in knowing about. Mac OS X frameworks refer to such an interested
party as an observer.
A notification may be generated because an event of interest occurred, or it may be
programmatically posted (fabricated) by a poster. Depending on program logic, the observer and
poster may be the same process.
Let us look at some important notification mechanisms in Mac OS X. Some of these are general-purpose
notification mechanisms, allowing programs to exchange arbitrary information, whereas others are
special-purpose mechanisms that support only specific types of notifications.
9.16.1. Foundation Notifications
The Foundation framework provides the NSNotificationCenter and
NSDistributedNotificationCenter classes for intraprocess and interprocess notifications, respectively.
Both these classes use the abstraction of a notification brokerthe notification center. The default
notification center for either class can be accessed through the defaultCenter class method.
Each process has a default process-local NSNotificationCenter object that is automatically created. The
class provides instance methods for adding observers, removing observers, and posting notifications. A
single notification is represented as an NSNotification object, which consists of a name, an object, and
an optional dictionary that can contain arbitrary associated data.
The NSDistributedNotificationCenter class is similar in concept and provides similar methods. Since
its scope is system-wide, it requires a different brokerthe distributed notification daemon
(/usr/sbin/distnoted) provides the relevant services. distnoted is automatically started during
system bootstrap.
Let us look at an example of using distributed notifications in an Objective-C program. The example
consists of two programs: an observer and a poster. The poster takes a name-value pair of strings and calls
the postNotificationName:object: selector. The latter creates an NSNotification object, associates
the given name and value with it, and posts it to the distributed notification center. Figure 955 shows the
source for the poster.
Figure 955. A program for posting distributed notifications (NSNotification)
// NSNotificationPoster.m
#import 
#define PROGNAME "NSNotificationPoster"
int
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 117 of 153
main(int argc, char **argv)
{
if (argc != 3) {
fprintf(stderr, "usage: %s  \n", PROGNAME);
exit(1);
}
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
NSString *someName = [NSString stringWithCString:argv[1]
encoding:NSASCIIStringEncoding];
NSString *someValue = [NSString stringWithCString:argv[2]
encoding:NSASCIIStringEncoding];
NSNotificationCenter *dnc = [NSDistributedNotificationCenter defaultCenter];
[dnc postNotificationName:someName object:someValue];
[pool release];
exit(0);
}
The observer communicates with the distributed notification center to register its interest in all distributed
notifications, after which it simply runs in a loop, printing the name and value of each notification as it
arrives. Figure 956 shows the source for the observer.
Figure 956. A program for observing distributed notifications (NSNotification)
// NSNotificationObserver.m
#import 
@interface DummyNotificationHandler : NSObject
{
NSNotificationCenter *dnc;
}
- (void)defaultNotificationHandler:(NSNotification *)notification;
@end
@implementation DummyNotificationHandler
- (id)init
{
[super init];
dnc = [NSDistributedNotificationCenter defaultCenter];
[dnc addObserver:self
selector:@selector(defaultNotificationHandler:)
name:nil
object:nil];
return self;
}
- (void)dealloc
{
[dnc removeObserver:self name:nil object:nil];
[super dealloc];
}
- (void)defaultNotificationHandler:(NSNotification *)notification
{
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 118 of 153
NSLog(@"name=%@ value=%@", [notification name], [notification object]);
}
@end
int
main(int argc, char **argv)
{
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
NSRunLoop *runloop = [NSRunLoop currentRunLoop];
[[DummyNotificationHandler alloc] init];
[runloop run];
[pool release];
exit(0);
}
Let us test the programs by first running the observer and then posting a few notifications through the
poster.
$ gcc -Wall -o observer NSNotificationObserver.m -framework Foundation
$ gcc -Wall -o poster NSNotificationPoster.m -framework Foundation
$ ./observer
# another shell prompt
$ ./poster system mach
2005-09-17 20:39:10.093 observer[4284] name=system value=mach
Note that since the observer program specified the notification name and identifying object as nil while
adding the DummyNotificationHandler class instance as an observer, it will receive all other system-
wide notifications that distnoted broadcasts.
9.16.2. The notify(3) API
Mac OS X provides a stateless, system-wide notification system whose services are available to user
programs through the notify(3) API. The mechanism is implemented as a client-server system. The
notification server (/usr/sbin/notifyd) provides a system-wide notification center. It is one of the
daemons started during a normal bootstrap of the system. The client API, which is implemented as part of
the system library, uses Mach IPC to communicate with the server.
A notify(3) notification is associated with a null-terminated, UTF-8-encoded string name in a
namespace shared system-wide by all clients of the system. Although a notification name can be arbitrary,
Apple recommends using reverse DNS naming conventions. The names prefixed by com.apple. are
reserved for Apple's use, whereas the names prefixed by self. should be used by a program for process-
local notifications.
A client can post a notification for a given name by calling the notify_post() function, which takes a
single argument: the notification's name.
A client can monitor a given name for notifications. Moreover, the client can specify the mechanism
through which the system should deliver the notification to the client. Supported delivery mechanisms are
as follows: sending a specified signal, writing to a file descriptor, sending a message to a Mach port, and
updating a shared memory location. Clients can register for these mechanisms by calling
notify_register_signal(), notify_register_file_descriptor(), notify_register_mach_port
(), and notify_register_check(), respectively. Each registration function provides the caller with a
token and, if necessary, a mechanism-specific object such as a Mach port or a file descriptor, which the
client will use to receive the notification. The token can be used with the notify_check() call to check
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 119 of 153
whether any notifications have been posted for the associated name. It is also used with the
notify_cancel() call to cancel the notification and free any associated resources.
Let us look at an example of posting and receiving notifications using the notify(3) API. Figure 957
shows a common header file in which we define names for our notifications. We use a common prefix,
followed by one of descriptor, mach_port, or signal, indicating the delivery mechanism we will
specify when registering for each name.
Figure 957. Common header file for defining notification names
// notify_common.h
#ifndef _NOTIFY_COMMON_H_
#define _NOTIFY_COMMON_H_
#include 
#include 
#include 
#include 
#define PREFIX "com.osxbook.notification."
#define NOTIFICATION_BY_FILE_DESCRIPTOR PREFIX "descriptor"
#define NOTIFICATION_BY_MACH_PORT PREFIX "mach_port"
#define NOTIFICATION_BY_SIGNAL PREFIX "signal"
#define NOTIFICATION_CANCEL PREFIX "cancel"
#endif
Figure 958 shows the program we will use to post notifications. Note that posting is independent of the
delivery mechanismyou always use notify_post() to explicitly post a notification, regardless of how it
is delivered.
Figure 958. Program for posting notify(3) notifications
// notify_producer.c
#include "notify_common.h"
#define PROGNAME "notify_producer"
int
usage(void)
{
fprintf(stderr, "usage: %s -c|-f|-p|-s\n", PROGNAME);
return 1;
}
int
main(int argc, char **argv)
{
int ch, options = 0;
char *name;
if (argc != 2)
return usage();
while ((ch = getopt(argc, argv, "cfps")) != -1) {
switch (ch) {
case 'c':
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 120 of 153
name = NOTIFICATION_CANCEL;
break;
case 'f':
name = NOTIFICATION_BY_FILE_DESCRIPTOR;
break;
case 'p':
name = NOTIFICATION_BY_MACH_PORT;
break;
case 's':
name = NOTIFICATION_BY_SIGNAL;
break;
default:
return usage();
break;
}
options++;
}
if (options == 1)
return (int)notify_post(name);
else
return usage();
}
Let us now write the consumer program for receiving notifications produced by the program in Figure
958. We will register for four specific notifications, one to be delivered through a signal, another to be
delivered through a file descriptor, and two to be delivered through Mach messages. One of the latter will
be used as a cancellation triggerit will cause the program to cancel all registrations and exit. Figure 959
shows the consumer program.
Figure 959. Receiving notifications through multiple mechanisms
// notify_consumer.c
#include "notify_common.h"
#include 
#include 
#include 
void sighandler_USR1(int s);
void cancel_all_notifications(void);
static int token_fd = -1, token_mach_port = -1, token_signal = -1;
static int token_mach_port_cancel = -1;
void *
consumer_file_descriptor(void *arg)
{
int status;
int fd, check;
status = notify_register_file_descriptor(NOTIFICATION_BY_FILE_DESCRIPTOR,
&fd, 0, &token_fd);
if (status != NOTIFY_STATUS_OK) {
perror("notify_register_file_descriptor");
return (void *)status;
}
while (1) {
if ((status = read(fd, &check, sizeof(check))) < 0)