Attacking Joomla! with an exploit or zero-day, or attacking an embedded device with a yet to be
determined path seemed the best option for initial access. After a few weeks of development, a
successful zero-day exploit was created for an unnamed embedded device. This zero-day provided
root access to the device and was used as the initial entry point. Internal enumeration was performed
after this initial access. The enumeration revealed a MongoDB instance that required no
authentication. This database provided access to an audio recording that was part of an audio spying
application. These recordings were interesting but not detrimental. Fisher wanted to damage this
company and expose them for involvement is something more severe than selling spying software.
Further exploration led to the identification of this damaging information. The significant data was
found in an unsecured iSCSI server that contained backup VMware .vmdk files and other beneficial
information. Eventually, administrative level password hashes were dumped from the backups. Many
of the administrative password hashes were successfully cracked. These passwords allowed access
to other systems including an email server. PowerShell was used to access and download current
emails. More than 1 million emails were downloaded.
In total, Phineas Fisher was in the Hacking Team network for about six weeks and spent about 100
hours moving and stealing data. The attack was primarily politically motivated.
This example is almost identical to that of a Red Team engagement.
An intelligent actor analyzed a target to determine the best path forward, crafted a custom attack,
elevated privileges, identified information, and stole sensitive data.
Additional References:
1. How Hacking Team got hacked, http://arstechnica.com/security/2016/04/how-
hacking-team-got-hacked-phineas-phisher/.
2. The Vigilante Who Hacked Hacking Team Explains How He Did It,
http://motherboard.vice.com/read/the-vigilante-who-hacked-hacking-team-
explains-how-he-did-it.
Analyzing the TTPs described in the Hacking Team attack is a great way to understand how a real
threat attacks a target. Analysis can be used to validate TTPs plans or to learn new techniques that
can be applied to future engagements. Although this was an illegal attack against a company, it
provided useful insights into how a threat thinks and acts.
A simple threat profile can be developed to provide a general description of the threat using the
HackingTeam attack.
Questions to consider regarding Red Team scoping.
1) Could your Red Team perform these actions?
If not, consider your team’s ability to emulate these actions and possibly enhancing with
training or internal development.
2) Do you have access to zero-days? If not, how would you emulate this sort of attack?
Many teams do not have zero-days or time allocated to develop them. Consider using white
carded scenarios to emulate these types of attacks.
3) This attack took six weeks,100+ hours, and a single person to complete. This is a great
metric for scope duration. Could your team do the same?
Does your team have the necessary skills, knowledge, abilities, tools, TTPs, etc. to perform
within the same timeframe? Consider adjusting your timeline and hour allocation to
accommodate your team’s capabilities.
4) Would you scope an engagement with the same staff and time parameters?
Team’s should not operate alone. No matter what issue a team has with staffing or budget,
an engagement should have at least twice this staffing. As for time, six weeks may be longer
than possible. If so, consider what is in or out of scope. Consider using the assumed breach
model to help utilize resources efficiently.
Threat Perspective
As briefly mentioned earlier, a Threat’s Perspective is the threat’s initial point of view. This
perspective is used to build and shape a threat profile or scenario. A threat's perspective may be that
of an outsider, nearsider, or insider.
Outsider
An entity that has no An example would be a
legitimate access to specific competitor’s employee who
software, systems, and would not have authorized
networks. An outsider is physical or digital access to
anyone outside an any systems, network,
organization. software, or hardware.
Nearsider
An entity that has no An example would be
legitimate access to specific janitorial staff. They would
software, systems, and not likely have authorized
networks but may have digital access to any
physical access to buildings systems or networks, but
and equipment or access to may have physical access to
systems that integrate with buildings, communication
target assets facilities, systems,
networks, etc.
Insider
An entity that has legitimate An example of a malicious
access to specific software, insider is a rogue system
systems, and networks and administrator who has
has physical access to authorized, privileged
buildings and equipment access and willingly
removes information from
target assets or modifies
target assets to cause failure
An example of a non-
malicious insider is an
employee on the sales staff
who has authorized access
to the systems, networks,
software, and hardware
required to perform sales.
The individual may be an
unknowing target during
initial access
There are several methods used to gain access to a target system. Initial access is debated too often
during Red Team planning. Using a diagram like the one below during planning can help you decide a
starting point based on goals. Each dot represents a potential starting point. The type of access needed
at each point is different. Build this into the Red Team plan. The process of deciding the threat
perspective is fundamental. The scenario and engagement goals drive this decision. For example, the
goals of an engagement include measuring the ability for security operations to identify and respond to
a threat moving through the company's network. The effective use of resources would be to start the
engagement somewhere inside this network. Forcing a team to establish access from outside the
network could waste the limited engagement time on steps that do not directly support engagement
goals.
How to use this diagram in planning
This diagram can be used to help plan starting points
based on the threat perspective. Don’t begin with the
assumption that all engagements must start from the
outside. Discuss the goals of the engagement along with
the desired scenario. Suggest a few points on the diagram
that best illustrates the scenario. Discuss how this point
represents the engagement scenario. Use the point that will
best lead to the achievement of engagement goals.
Threat Scenario
A core aspect of Red Teaming is threat scenarios. Scenarios provide insight into how a defensive
solution will perform and conform to the processes, procedures, policies, activities, personnel,
organizations, environment, threats, constraints, assumptions, and support involved in the security
mission. Scenarios generally describe the role of the threat, how it will interact with the systems and
networks within the target environment, and elicits real-world truth of how essential internal
practices are employed. In short, it answers how the target's security operations would dynamically
perform an action to deliver results, outputs, or prove capability.
A Red Team engagement driven by a specific scenario narrows the focus to a particular area. This
allows a concept to be explored at a deeper level. Scenarios allow a specific threat to be emulated
and exposed to a target organization. A scenario-based approach can offer additional value over
standard penetration testing or vulnerability assessments. The observations and understanding of how
a specific threat can impact an organization provide the knowledge needed to efficiently allocate the
limited time, money, and resources of an organization to best defend its assets.
To simplify, Red Teams explore the "threat story." A scenario provides the script for that story and
drives how a Red Team emulates a threat. A Red Team uses the plot to shape their actions and
develop their TTPs. All of these aspects combined create a comprehensive threat scenario.
How is this used in practice? Perhaps a target learns of a new type of malware through a threat
intelligence feed. The malware is actively attacking the mobile applications of other, similar
organizations. The organization can use a Red Team to design and emulate a specific scenario using
the TTPs of the malware. Using threat intelligence reports or malware analysis reports, a Red Team
can develop custom code or simulations that mirror the actions of the malware. Scenarios allow the
institution to perform a scenario-based Red Team assessment to measure how well its systems will
stand up to an attack from the new malware and potentially how it would perform against similar
actions of unknown malware.
Designing scenarios can be challenging. It is common to select a scenario model that will not enable a
Red Team to successfully achieve their goals in the time limits of an engagement. Remember that Red
Teams are not finding flaws or vulnerabilities as in a penetration test but stimulating and performing
impacts against an organization to measure security operations as a whole.
Threat Emulation
Threat Emulation is the process of mimicking the TTPs of a specific threat. A Red Team performs
threat emulation by acting as a representative threat. Threats of any variety can be emulated. This can
include:
Zero-day or custom attacks
Script kiddie to advanced threat
Emulation of specific threat tools or techniques (botnets, DDOS, ransomware, specific
malware, APT, etc.)
Scenario-driven assessments are typically driven by the emulation of some level of threat. This may
be a specific threat, such as the Havex trojan used by Energetic Bear / Crouching Yeti / Dragonfly, or
a general threat, such as a simple Command and Control botnet. Regardless of the scenario, the TTPs
outlined drive the rules a Red Team must follow to perform an engagement. When a threat emulation
scenario is being designed, that threat's key components should be defined. While it can be difficult to
emulate a specific threat in detail, this does not mean the threat cannot be emulated, or there is no
value in attempting to do so. A Red Team should focus on following a threat's key components and use
its own TTPs to fill in the gaps. A Red Team is not the original designer or author of a threat, but is a
highly skilled and capable group that can (and should) reinforce an emulated threat's TTPs with its
own developed Tradecraft and processes. In this way, the Red Team can model a threat actor in a way
that supports the goals of a threat-based scenario.
The biggest challenge in threat emulation is executing to a level where an analyst believes the threat
is real. Approaches may include the use of known bad malware, developing custom malware that
models a threat, using tools that generate the Indicators of Compromise (IOCs) of a known threat, or
simply using system and network native tools and commands. Effective planning and determining the
critical components of a threat will lead to a better threat emulation design.
Scenario Models
As stated earlier, it is common to select a scenario model that will not enable a Red Team to
successfully achieve their goals within the time limits of an engagement. When selecting a scenario
model, choose it based on what operational impacts should be measured. These models only help
design a scenario. The execution of a scenario may be adjusted during an engagement. Being flexible
and prepared to make adjustments is critical. If a Red Team is successful too quickly, observations
may not be valuable. If a Red Team is stopped too soon, an organization may not get exposure to the
desired impact. Selecting the right model will help ensure the right balance.
What does "scenario model" actually mean? Threat Emulation Scenario Models include Full
Engagement Model, Assumed Breach Model, and Custom Scenario Model.
Full Engagement Model
The Full Engagement Model is a complete, end-to-end emulation of a threat and is the most common
model desired by organizations. Think of this as the no-holds-barred engagement (although there are
always holds barred). This model attempts to emulate a threat starting on day one and working until a
final goal is reached.
A Full Engagement Model begins with the threat outside an organization. The threat must perform
Open Source Intelligence (OSINT), reconnaissance, and enumeration to determine a path into the
network. Once inside a network, the Red Team will continue to execute its plan using its TTPs. This
will continue until the Red Team is stopped or completes its goal. Characteristics of the Full
Engagement Model:
Begins on day 1 of adversarial activity
Red Team must perform all phases (Get In, Stay In, and Act; to be discussed further in
the text)
Typically longer than other engagement types, as adequate time is needed to perform all
phases
Red Team must be able to get in or have a backup "white carding" plan
With condensed execution timelines, it is common for time to run out before operational
impacts can be executed
Contingency plans must be made to ensure that required impacts are executed
Assumed Breach Model
The Assumed Breach Model assumes a threat has some level of access to a target at the initiation of
the engagement. This model is arguably the most beneficial of all the models. The threat is assumed to
have some level of access to a target before beginning. This starts a scenario much further into the
attack timeline. Assuming someone can breach a network is often argued by less mature organizations
who assume Red Teams must prove they can “get in” before beginning. When is this proof important?
It is important ONLY if measuring the ability a threat has to "get in" is important. If this is not a key
goal, using the Assumed Breach Model will save time, effort, and money; and will free the Red Team
to explore higher impact goals. Characteristics of the Assumed Breach Model:
Begins after a threat has breached an organization
Red Team focuses on the Stay In and Act phases
More efficient use of limited resources (time, money, and staff)
Requires providing access to the Red Team. This is commonly done by launching a Red
Team’s malware, providing access to a specific asset, or providing passwords
Operational impacts and goals must still be achieved
Consider This
Assuming a breach can lead to disbelief in the results.
All too often, defensive staff and even senior managers
attempt to downplay legitimate Red Team activities. With
the assumed breach, more immature organizations may
attempt to do so by hinging an activity’s success to being
“provided access to the system or network” rather than
recognize the lessons learned by understanding how the
defending team was able to execute its defensive
strategies.
Custom Breach Model
Custom breach models allow the Red Team to design scenarios that enable the test or measurement of
specific areas of concern to the target. A Custom Engagement Model:
May start at any point in a threat cycle
Focuses on any of the phases as designed by the goals and objectives
Is highly efficient where limited staff, time, and funds are available
Is nearly always announced and coordinated with real-time interaction
The Red Team should most often use an Assume Breach strategy. This strategy was made popular by
Microsoft and is admittedly more philosophy than deduction. Reactively waiting for evidence of a
breach causes companies to reveal not only that they have been compromised but that they have been
compromised for years.
Indicators of Compromise
Although it is commonly thought that adversaries can clean up after themselves, it is almost
impossible to remove all evidence. A good security operations team has the potential to find even the
most advanced adversaries. Evidence is always left behind. Indicators of Compromise (IOCs) are
artifacts (bits of information) that identify or describe threat actions. An IOC can be anything used to
identify a threat action including, but not limited to:
Unusual network traffic
Unusual user activity
Geographic-specific connections
Increased network traffic
Increased database reads
Unusual file changes or modifications
Registry changes or modifications
Specific naming or usage conventions
Identifying actions or action attempts
Signs of DOS/DDOS
Most security organizations rely on some trigger to take action. Systems such as network sensors,
security sensors, or even end-users typically trigger an investigation of "strange" behavior. When a
security team responds to a trigger, they are challenged to test their ability to leverage IOCs to
identify, contain, and eradicate a threat. This play between Red and Blue generating and identifying
IOCs is at the heart of Red Teaming. In order to replicate a malicious actor, a Red Team must
understand a threat's TTPs. These TTPs are emulated by controlling the "when" and "how", as well as
the type of IOC generated or left behind. Given this concept, Red Team Operators must know what
indicators are made by a tool or action. If those IOCs are acceptable, they can proceed. If the IOCs
are not acceptable, and the action is performed, there is a significant risk of exposing the Red Team
before planned expectations. Not only is the management of an IOC necessary for threat emulation,
but an IOC can get you caught when the timing is not appropriate and may also put an entire
engagement at risk if not controlled and managed.
Controlling Tools
In order to control IOCs, a robust set of TTPs must exist. Part of these TTPs are tools that will
support a Red Team's capability. The tools must not only provide capability but also must be
understood. This is often done through tool usage and modification. Tools usage and modification
should be built into a standard attack platform. If the platform is managed and maintained, a common
baseline is ready for use. As a general rule, a Red Team should:
Know the tools used, how they operate, and what actions are conducted
Recompile tools (rename functions; remove help, comments, and unused code/strings;
etc.)
Control User-Agents
Understand which IOCs are generated by an action
Blend in until timing is appropriate
The following are common indicators and just a small example to help think about the indicators that
must be controlled.
User Agents – User-Agent strings can be a dead giveaway for tools
● For example, the SQL injection tool SQLMAP has a default User-Agent string that includes
the word sqlmap sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org) This is very common.
Binaries may have signatures that can be detected
● Modification and recompiling may be necessary to change the signature
● The likelihood of Antivirus detection may be decreased by removing comments and other
user output before compiling
Focus Point
The end state of threat planning is an ability to portray the
threat as closely as possible to enable the ability to advise
the target of implications to the target environment.
Engagement Concepts
Red Team engagements can move through several complex and detailed steps during execution but
using three simple phases helps keep the focus on goals. Although Red Teaming is offensively
focused, it is ultimately used as a tool to improve security. Red Teaming is executed in three phases
directly related to areas of defense than can be tested and measured against a threat. It is common for