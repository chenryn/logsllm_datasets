title:Enhancing Survivability of Security Services Using Redundanc
author:Matti A. Hiltunen and
Richard D. Schlichting and
Carlos A. Ugarte
Enhancing Survivability of Security Services using Redundancy* 
Matti A. Hiltunen  Richard D. Schlichting 
AT&T Shannon Laboratory 
180 Park Avenue 
Florham Park, NJ 07932 
hiltunen/PI:EMAIL 
Carlos A. Ugarte 
Department of  Computer Science 
The University of Arizona 
Tucson, AZ 85721 
PI:EMAIL 
Abstract 
Traditional distributed system services that provide guaran- 
tees related to conjidentiality, integrity, and authenticity en- 
hance security, but ure not survivable since each attribute is 
inipleniented by a single  method.  This paper advocates the 
use  of  redundancy to increase  survivability  by using  mul- 
tiple methods to implement each security attribute and do- 
ing so in ways that can vary  unpredictably.  As a  concrete 
exanzple, the design and iniplenzentution of u highly config- 
urable secure coniniunication  service  called SecConim ure 
presented.  The service has been implemented using Cactus, 
a s)$steni for building highly conjigurable protocols and ser- 
vices for distributed systems.  Initial petforniunce results for 
a protoQpe iniplenierrtution on Linux are also given. 
1  Introduction 
Security  services  that  provide attributes  such  as  confi- 
dentiality,  integrity,  and  authenticity  typically  implement 
each  attribute  using  a  single  method.  For  example,  in  a 
secure communication service, confidentiality may  be pro- 
vided by  DES and integrity by keyed MD5. Although such 
an  approach  may  be  secure  in  the  traditional  sense,  it  is 
a  method  is  compromised, all  secu- 
not  survivable-once 
rity guarantees on the connection related to that attribute are 
gone. Each method is, in essence, a single point of vulnera- 
bility very much analogous to a single point of system fail- 
ure when  considering fault-tolerance  attributes.  This prob- 
lem is the same for many other aspects of security, including 
authentication and access control. 
This paper advocates the use of a standard fault-tolerance 
technique-redundancy-to 
increase  the  survivability  of 
security  services.  For  example,  using  this  approach  for 
secure  communication,  message  integrity  can  be  imple- 
mented  by  calculating  redundant  independent  signatures, 
'This  work  supported  in  part  by  DARPA  under  grant  N66001-97-C- 
8518 and NSF under grants ANI-9979438 and CDA-9500991. 
while confidentiality can be implemented by encrypting the 
message  with  a  combination  of  algorithms  with  keys  es- 
tablished  using  different methods.  As a  result,  even  if  an 
intruder  manages to  find  one key  or break  one algorithm, 
the security  guarantees may  remain  intact.  The task  of the 
intruder  can  be  complicated further  by  using  secret  com- 
binations  of methods or by dynamically altering the set of 
methods during the  lifetime  of  the  connection.  By  using 
multiple methods and doing so in ways that can vary unpre- 
dictably, the space of  possibilities  that  must be considered 
by  an  attacker  and  the  effort expended  to compromise the 
attribute  expands combinatorially.  The  approach also  al- 
lows the tradeoff between  the cost of  the survivability and 
the protection to be managed explicitly and dynamically  in 
response to changing threat scenarios. 
To  support  this  argument,  we  present  the  design  of  a 
highly  customizable and extensible secure communication 
service called SecComm. With SecComm, applications can 
open secure communication connections in which the secu- 
rity attributes and the strength of guarantees associated with 
each attribute can be customized at a fine-grain level. In ad- 
dition, SecComm allows an attribute to be guaranteed using 
combinations of  security  algorithms and supports extensi- 
bility by allowing the addition of new algorithms as separate 
modules.  These attributes  derive  from the  use  of  Cactus, 
a framework  for constructing  highly-configurable  network 
services, as the underlying implementation platform  [ 1 13. 
This paper focuses on two key requirements for using re- 
dundancy  to improve survivability:  the development of ap- 
propriate techniques and the availability  of suitable system 
support. We begin by discussing some specific redundancy 
techniques for both communication security and other secu- 
rity  services,  and then  turn  to the  issue  of system support. 
As an example of a system that has the necessary character- 
istics, we describe Cactus. This is followed by presentation 
of  SecComm.  Independent of  survivability,  SecComm  is 
novel in  its own right as a highly  configurable and flexible 
secure communication service. 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
173 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
2  Techniques 
Implementing privacy and other attributes. The basic 
idea  behind  using  redundancy  to  improve survivability  is 
simple-with  multiple methods enforcing a given attribute, 
the attribute should remain valid if  at least one of the meth- 
ods remains uncompromised. As with fault tolerance, how- 
ever, the effectiveness  of the  approach depends on the de- 
tails of how it is used.  As an example of this approach, we 
focus on using redundant cryptographic methods to ensure 
communication privacy. 
In  this  context,  a  number of  specific  techniques can be 
devised based  on  redundant encryption.  The  simplest,  of 
course, is to apply the different methods successively on the 
same data. For example, a message might first be encrypted 
using  DES then IDEA. However, there are many other ap- 
proaches, including: 
0  Alternating  the  order  in  which  methods  are  applied, 
e.g., apply  DES before IDEA for some messages and 
IDEA before DES for others. 
0  Applying  different  methods  to  different  parts  of  the 
data, e.g., encrypt different parts of one message or dif- 
ferent messages in a stream using different methods. 
An  important  factor  influencing  the  effectiveness  of 
these approaches is the independence of the methods used, 
where two  methods  A  and B  are  independent if  compro- 
mising A  provides no information that  makes  it  easier  to 
compromise B, and vice versa.  A  simple example of non- 
independence is when two encryption methods use the same 
key, since if one method is broken or the key stolen, privacy 
is completely compromised. To maximize independence in 
this type of situation, the keys should be established  using 
different  key distribution  methods, for example, one using 
Diffie-Hellman  and the other using  Kerberos.  As a result, 
the system may even be able to tolerate an attack where one 
or more of the distribution methods are compromised. 
Note that this  type  of  independence is  very much anal- 
ogous  to  the  fault-tolerance  concept  of  independent fail- 
ure modes for redundant hardware or software components. 
Components are independent in this sense when  the failure 
of  one component does not  affect the correct execution of 
any other component. 
While the  independence of encryption methods is diffi- 
cult to  argue rigorously,  the risk  of  methods not  being  in- 
dependent is likely to be minimized if the methods are sub- 
stantially  different or if  they  encrypt data  in  different size 
blocks.  It is also possible to develop combinations that  at- 
tempt to maximize independence by not simply encrypting 
the same data multiple times, but by  finding other ways  to 
combine different encryption methods.  For example, sup- 
pose that m is a cleartext message and El  and E2  are dif- 
ferent encryption methods. A ciphertext message cm could 
be  constructed  as  cm  = { E l ( m  @  r),  E2(r)},  where  @  is 
the  exclusive-or operation  and  r  is  a random  bit  sequence 
the same length as the message. Given this method, break- 
ing only El or E2 does not produce any useful information, 
which  means that the attacker has to break both  simultane- 
ously  to  know  if  the  syste,m has been  compromised.  As a 
result, the effort required is multiplicative. 
Determining independence of methods is easier for other 
security  attributes such as message integrity.  Let m be the 
message to be protected  and dl(m),dz(m), ... be different 
cryptographic message digests of m. Since the message di- 
gest  algorithms operate on  the  message  independently, an 
attacker would need to compromise each integrity algorithm 
separately.  In  this case,  the increase  in  the breaking effort 
is additive since the attacker knows when each method has 
been broken. 
Finally,  it  is  also possible to  exploit analogues of  fault- 
tolerance techniques that operate on a sequence of messages 
rather  than  on  individual  messages.  For  example,  using 
techniques similar to forward error correction (FEC), mes- 
sage modification  or modifications  of  the  message  stream 
(i.e., insertions and deletions) could be detected.  Such tech- 
niques can naturally  be  used  together  with  message-based 
methods to increase survivability  further. 
Other security services.  Similar  ideas  can be  applied 
to other types of security  services in distributed systems as 
well.  For example, redundancy can be used to increase the 
survivability  of certification agencies and the PKI. If multi- 
ple certificates  are required  from multiple  independent cer- 
tification  agencies or a user's  public  key  is  verified with  a 
number  of  public  key  servers,  the  chance that  an  intruder 
can cause extensive damage by  compromising one agency 
is reduced. 
In areas of security  where the existing operating system 
already provides mechanisms+.&.,  authentication and file 
access control-overall 
system survivability  can sometimes 
be  improved by  introducing  redundant  independent meth- 
ods to enforce the desired  security  guarantees or to detect 
violations.  For example,'access control can be augmented 
with encryption, in which  case a user can only read a file if 
allowed by the access control system and with the necessary 
key. 
Similarly,  an  intrusion  detection  system  (IDS) can  be 
viewed  as a  redundant component that  monitors  user  be- 
havior to detect  illegal  activities that  are acceptable to  the 
standard operating system security mechanisms.  If the IDS 
further  employs redundant  detection  modules  that  imple- 
ment different techniques, it stands an even  greater chance 
of  accurately  detecting  an  intrusion.  The  agreement  be- 
tween  the different modules can be tuned to obtain the de- 
a single module to trigger an alarm 
sired tradeoff-allowing 
results in discovering more intrusions, while requiring more 
modules to agree reduces the number of false positives. 
174 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:03:17 UTC from IEEE Xplore.  Restrictions apply. 
Redundancy  mechanisms  can  also be developed  to  ad- 
dress specific security problems.  For example, the Cactus 
framework discussed below has been used to develop a dis- 
tributed  system  monitoring  tool  that  was  extended  with  a 
module designed to deal with an intruder modifying the web 
pages of an organization.  This module monitors a subtree 
of the directory structure by comparing a checksum of each 
file against the previous checksum of the same file. If a file 
is modified, the system administrator is then notified.  This 
approach allows unauthorized web page modifications to be 
detected quickly using redundant checks. 
3  System Support 
The  realization  of  services  that  use  redundancy-based 
survivability techniques such as those described above can 
be  simplified using  an  appropriate software customization 
framework.  Here, we discuss one such system called Cac- 
tus, together with  SecComm, a highly-customizable secure 
communication service that illustrates the potential of using 
redundancy to enhance survivability. 
Cactus.  Cactus is a system for constructing configurable 
network protocols and services where each service property 
or functional component is implemented as a separate soft- 
ware  module  called  a micro-protocol  [ 1 I].  A  customized 
instance  of  a service is then  created by  choosing a collec- 
tion  of  micro-protocols  based  on  the  properties  to  be  en- 
forced, and configuring them together with  the Cactus run- 
time  system  to form a composite protocol that implements 
the service on each machine. A micro-protocol is structured 
as a collection  of'event  handlers  that are executed when  a 
specified event  occurs.  Events can  be raised  explicitly by 
micro-protocols or by the runtime. 
The primary event-handling operations are: 
bind(event,  handler,  order, static-args).  Specifies that 
handler is to be executed when  event occurs.  order is 
a numeric value specifying the relative order in which 
handler should be executed relative  to other handlers 
bound  to the  same event.  When  the  handler  is  exe- 
cuted,  the arguments static-args  are passed  as part  of 
the handler arguments. 
raise(event, dynamic-args, mode, delay). Causes event 
to be  raised  after delay time  units.  If  delay is  0, the 
event  is  raised  immediately.  The  occurrence  of  an 
event causes handlers bound to the event to be executed 
with  dynamicargs (and static-args passed  in  the  bind 
operation) as arguments.  Execution  can  either block 
the  invoker until  the  handlers  have completed  execu- 
tion  (mode = SYNC)  or allow  the  caller  to  continue 
(mode = ASYNC). 
Other operations are available for unbinding handlers from 
events,  creating  and  deleting  events,  halting  event execu- 
tion,  and canceling  a delayed  event.  Handler  execution is 
atomic  with  respect  to concurrency, i.e.,  a handler  is exe- 
cuted  to  completion  before execution of any  other handler 
is started unless the handler voluntarily yields execution by 
either raising another event synchronously or by  invoking a 
blocking semaphore operation. In the case of a synchronous 
raise,  the  handlers  bound  to the  raised  event are executed 
before control returns to the handler that issued the raise.  In 
addition  to  the  flexible event  mechanism,  Cactus  supports 
shared data that can be accessed by all micro-protocols con- 
figured into a composite protocol. 
Finally,  the  system  supports a Cactus  message  abstrac- 
tion  designed to facilitate  development of configurable ser- 