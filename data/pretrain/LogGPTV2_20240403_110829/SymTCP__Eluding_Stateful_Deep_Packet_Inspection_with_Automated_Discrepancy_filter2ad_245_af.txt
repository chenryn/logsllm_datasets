### Protocol Adaptation and Challenges

While the protocol adaptation is, in principle, feasible (as we believe the definitions of insertion and evasion are general), it can be challenging due to protocol-specific adaptations. For example, our pruning decisions and abstractions are tailored to TCP. Additionally, if the protocol employs cryptographic functions, these must be explicitly handled, as SMT solvers are unable to resolve the complex constraints associated with such functions [5], [30]. Furthermore, drop and accept points need to be labeled, which will require additional research.

### Demonstration and Application

In our demonstration, we use SYMTCP to assist the client side in evading Deep Packet Inspection (DPI). Our approach can also be applied to the server side. In that case, we would need to model the client-side TCP implementation, i.e., perform symbolic execution on the clientâ€™s TCP implementation. For instance, if the client is using Linux, the process would be similar to what we do for modeling the server-side TCP implementation. Since the client initiates the TCP connection, we must consider TCP states corresponding to the initiator, such as the SYN_SENT state, when exploring execution paths.

### Defenses: Traffic Normalization and Per-Host Packet Reassembly

To mitigate DPI evasion attacks, solutions have been proposed to normalize traffic [23], [18], [47]. These strategies involve actively manipulating packets and sometimes injecting additional packets to confirm the results of previous packets. While these normalization strategies aim to prevent many evasion techniques, they are based on a large number of hand-crafted rules (e.g., 38 rules for TCP in [23]) without formal guarantees. We believe our automated system can serve as a robust test against these defenses. However, we are not aware of any real-world implementations.

Another strategy, proposed in [39], suggests that DPI behaviors should be customized for each host it protects (e.g., those in an intranet). This strategy is theoretically sound but comes with high costs, as the DPI's behavior needs to be tailored for different operating systems and versions. Snort, for example, has a Linux version of its TCP state machine that is shown to be vulnerable. Moreover, in contexts like state-level censorship, building per-host profiles for the majority of machines on the Internet is infeasible.

### Related Work

#### Evading Deep Packet Inspection

A significant line of research on evading deep packet inspection involves unilateral traffic manipulation by injecting crafted network packets to desynchronize the DPI system from one endhost. This attack is practical because it only needs to be deployed on a local host and does not require cooperation from the remote host. The underlying idea dates back to 1998, as reported by Ptacek et al. [37], who proposed insertion and evasion attacks on Network Intrusion Detection Systems (NIDS) and enumerated various implementation-level discrepancies in TCP and IP protocols. Subsequent works by Khattak et al. [25] and Wang et al. [48] followed this principle to study evasions against the Great Firewall of China, demonstrating their effectiveness in practice. Li et al. [29] conducted a comprehensive measurement leveraging similar TCP and IP level discrepancies to evade a wide range of middleboxes, including traffic classification systems in multiple ISPs and censorship systems in China and Iran. All these studies relied on manual analysis of TCP implementations in operating systems and reverse engineering of DPIs. In contrast, our work aims to automate the evasion tests of DPI systems. A concurrent work by Bock et al. [9] automates censorship evasion strategy discovery by mutating existing packet traces. Our approach, however, targets the corner cases in packet processing logic on Linux, which may be handled differently on DPIs.

#### Symbolic Execution of Network Protocol Implementations

In the past decade, symbolic execution has emerged as a powerful formal verification technique and has been widely applied to the analysis and verification of network protocol and network function implementations. For example, Chau et al. [14], [15] used symbolic execution to extract accept and reject paths in essential components of the TLS protocol, such as X.509 certificate validation and PKCS#1 signature verification, to find semantic bugs by cross-validating different implementations. Kothari et al. [27] employed symbolic execution to identify protocol manipulation attacks where a malicious endhost can induce a remote peer to send more aggressive packets than it should. Song et al. [45] explored the possibility of sending multiple packets in symbolic execution to find low-level and semantic bugs given rule-based specifications extracted from protocol specifications.

#### DPI Model Inference

Ideally, if we could automatically and completely infer the DPI model (i.e., state machine), it would be easier to identify discrepancies with the endhost's state machine. Argyros et al. [2], [1] proposed the first algorithm to learn symbolic finite automata with sufficient queries and observations of a target system. This algorithm was applied to regular expression filters, TCP implementations, and Web Application Firewalls (WAFs) for fingerprinting and discovering evasion attacks. Similarly, Moon et al. [31] synthesized high-fidelity symbolic models of stateful network functions, including TCP state machines of DPI middleboxes, by generating queries and probes offline. However, the completeness and accuracy of the inferred model depend on the queries. Therefore, we treat the DPI as a complete blackbox and do not attempt to learn its state machine explicitly. To some extent, though, we do "learn its model" by generating proper queries guided by a Linux TCP state machine.

#### Grammar-Based Fuzzing and Exhaustive Testing

Generating meaningful inputs guided by a grammar that describes their formats can be beneficial for fuzzing [8], [21], [35]. However, fuzzing tends to generate too many inputs, making it inefficient for testing all candidate packets. Defining a grammar or model at the implementation level requires a thorough analysis of all TCP subtleties. Models extracted from specifications are not detailed enough to capture the intricacies of the protocol. In contrast, our work can be seen as an attempt to "extract" the implementation-level model.

### Conclusion

In this paper, we explore the use of symbolic execution to guide the generation of insertion and evasion packets at the TCP level for automated testing against DPI middleboxes. We developed an end-to-end system following this idea and demonstrated its effectiveness with both known and novel strategies against three popular DPIs: Zeek (Bro), Snort, and the Great Firewall of China. The system can be easily extended to other DPIs. We believe our work is a significant step towards automating the testing of DPI middleboxes in terms of their robustness against evasion.

### Acknowledgment

We would like to thank Muhammad Faizan Ul Ghani for his help with data analysis and Hang Zhang for his valuable comments. We also thank the anonymous reviewers for their insightful feedback. This research was partially sponsored by the U.S. Army Combat Capabilities Development Command Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Combat Capabilities Development Command Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation hereon. The research was also partially supported by NSF awards CNS-1652954, CNS-1619391, CNS-1718997, and ONR under grant N00014-17-1-2893.

### References

[References are listed as provided, with no changes made.]

This optimized text is more structured, clear, and professional, making it easier to read and understand.