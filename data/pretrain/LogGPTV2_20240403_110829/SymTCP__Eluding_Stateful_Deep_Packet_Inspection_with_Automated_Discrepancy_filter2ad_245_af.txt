protocol is in principle possible (we believe the insertion and
evasion deﬁnitions are general). However, it can be tricky
due to protocol-speciﬁc adaptations. For example, our pruning
decisions and abstractions are speciﬁc to TCP. Furthermore,
if the protocol uses crypto functions, they must be explicitly
handled, since SMT solver is unable to solve complex con-
straints accumulated in crypto functions [5], [30]. Besides, we
need to label drop and accept points. These aspects will require
additional research.
In our demonstration, we use SYMTCP to help the client
13
side to elude DPI. Our approach can be applied to the server
side as well. In that case, we will need to model the client-
side TCP implementation, i.e., run symbolic execution on the
client’s TCP implementation. For example, if the client is
using Linux, the process should be similar to what we do to
model the server-side TCP implementation. Note that, since
the client is the initiator of a TCP connection, we will need
to consider TCP states corresponding to the initiator, e.g.,
exploring execution paths related to the SYN_SENT state.
Defenses: Trafﬁc Normalization and Per-Host Packets Re-
assembly. To mitigate DPI elusion attacks, solutions have been
proposed to normalize the trafﬁc [23], [18], [47], where packets
are actively manipulated and sometimes additional packets are
injected to conﬁrm the result of the previous packet. These
normalization strategies are deemed to prevent many evasion
strategies. However, they are based on a large number of
hand-crafted rules (38 rules for TCP in [23] without formal
guarantees. We believe our automated system can in fact be
a great test against these defenses. Unfortunately we are not
aware of any real-world implementations. Another strategy
is proposed in [39], where the authors argue that the DPI’s
behaviors should be tailored to each host that it is responsible
for protecting (e.g., those in intranet). In theory, this strategy is
sound, but in practice it comes with high cost, as the behavior
of the DPI needs to be customized for different operating
systems (and even across many versions). Snort is the closest
to this line of thinking; unfortunately its Linux version of TCP
state machine is shown to be clearly vulnerable. Furthermore,
in certain contexts, e.g., state-level censorship, it is simply
infeasible to build per-host proﬁles of the majority of machines
on the Internet.
X. RELATED WORKS
Evading Deep Packet Inspection. A major line of research on
evading deep packet inspection is unilateral trafﬁc manipula-
tion, by injecting crafted network packets to desynchronize the
DPI system from one endhost. This attack is practical since it
needs to be deployed on only a local host, and doesn’t require
any cooperation from the remote host. The underlying idea
dates back to 1998 in a report by Ptacek et al. [37]. They
proposed the idea of insertion and evasion attacks on NIDS and
enumerated a variety of implementation-level discrepancies in
TCP and IP protocols. The discovered strategies are based on
analyzing out-of-date DPIs and operating systems (FreeBSD
2.2), and many of the strategies no longer apply. Khattak et
al. [25] and Wang et al. [48] followed the same principle
to study evasions against the Great Firewall of China and
demonstrated their effectiveness in practice. Li et al. [29]
conduct a comprehensive measurement that leverages similar
TCP and IP level discrepancies to evade a wide range of
middleboxes such as trafﬁc classiﬁcation systems in multiple
ISPs and the censorship systems in China and Iran. All of the
above research rely on manual analysis of the TCP implemen-
tations in operating systems and reverse engineering of DPIs.
In this work, we propose to make an important step towards
automating the evasion tests of DPI systems. A concurrent
work by Bock et al. [9] automates censorship evasion strategy
discovery by mutating existing packet traces. In contrast, we
propose a more principled approach to search for the evasion
strategies, by targeting the corner cases in packet processing
logic on Linux, which may be handled differently on DPIs.
Symbolic execution of network protocol implementations.
In the past decade, symbolic execution has emerged as a
powerful formal veriﬁcation technique and been widely ap-
plied in the analysis and veriﬁcation of network protocol and
network function implementations. For example, in [14], [15],
the authors employ symbolic execution to extract the accept
and reject paths in essential components of the TLS protocol,
i.e., X.509 certiﬁcate validation and PKCS#1 signature ver-
iﬁcation, to ﬁnd semantic bugs by cross-validating different
implementations. Kothari et al. [27] use symbolic execution to
ﬁnd protocol manipulation attacks where a malicious endhost
can induce a remote peer to send more packets more aggressive
than it should. Song et al. [45] explore the possibility of
sending multiple packets in symbolic execution, and they
aim at ﬁnding low-level and semantic bugs given rule-based
speciﬁcations extracted from protocol speciﬁcations.
DPI model inference. Ideally, if we can infer the DPI model
(i.e., state machine) automatically and completely, then it is
much easier to identify the discrepancies with the endhost’s
state machine. Argyros et al. [2], [1] proposed the ﬁrst
algorithm that learns symbolic ﬁnite automata with enough
queries and observations of a target system. The algorithm
is applied to regular expression ﬁlters, TCP implementations
and Web Application Firewalls (WAFs), to do ﬁngerprinting
and discover evasion attacks. Similarly, Moon et al. [31]
synthesize high-ﬁdelity symbolic models of stateful network
functions (including TCP state machines of DPI middleboxes),
by generating queries and probes ofﬂine (albeit it requires the
availability of the network function’s binary). Unfortunately,
the completeness and accuracy of the inferred model is in-
herently dependent on the queries. Therefore, we choose to
consider the DPI a complete blackbox and do not attempt
to learn its state machine explicitly. To some extent, though,
we indeed attempt to “learn its model” by generating proper
queries to it (with the guidance of a Linux TCP state machine).
Grammar-based fuzzing and exhaustive testing. Generating
meaningful inputs guided by a grammar that describes their
formats can be beneﬁcial to fuzzing [8], [21], [35]. However,
fuzzing tends to generate overly many inputs and in our case
will be inefﬁcient in testing all the candidate packets. Further-
more, deﬁning a grammar or model at the implementation-
level requires a thorough analysis of all the subtleties of TCP.
Therefore, models extracted from the speciﬁcation are not
sufﬁciently detailed to capture the intricacies of the protocol.
In contrast, our work can be viewed as attempts to “extract”
the implementation-level model.
XI. CONCLUSION
In this paper, we explore the use of symbolic execution
to guide the generation of insertion and evasion packets at
the TCP level for automated testing against DPI middleboxes.
We developed a system from end to end following this idea
and demonstrated its effectiveness with both known and novel
strategies against three popular DPIs: Zeek (Bro), Snort, and
GFW. The system can be easily extended to other DPIs. We
believe our work is an important step towards automating the
testing of DPI middleboxes in terms of their robustness against
evasion.
14
ACKNOWLEDGMENT
We would like to thank Muhammad Faizan Ul Ghani, who
helped us with data analysis, and Hang Zhang for his helpful
comments. We thank the anonymous reviewers for their in-
sightful feedback. This research was partially sponsored by the
U.S. Army Combat Capabilities Development Command Army
Research Laboratory and was accomplished under Cooperative
Agreement Number W911NF-13-2-0045 (ARL Cyber Security
CRA). The views and conclusions contained in this document
are those of the authors and should not be interpreted as repre-
senting the ofﬁcial policies, either expressed or implied, of the
Combat Capabilities Development Command Army Research
Laboratory or the U.S. Government. The U.S. Government is
authorized to reproduce and distribute reprints for Government
purposes notwithstanding any copyright notation here on. It
was also partially supported by NSF award CNS-1652954,
CNS-1619391, CNS-1718997, and ONR under grant N00014-
17-1-2893.
REFERENCES
[1] G. Argyros, I. Stais, S. Jana, A. D. Keromytis, and A. Kiayias,
“Sfadiff: Automated evasion attacks and ﬁngerprinting using black-box
differential automata learning,” in Proceedings of
the 2016 ACM
SIGSAC Conference on Computer and Communications Security, ser.
CCS ’16. New York, NY, USA: ACM, 2016, pp. 1690–1701.
[Online]. Available: http://doi.acm.org/10.1145/2976749.2978383
[2] G. Argyros, I. Stais, A. Kiayias, and A. D. Keromytis, “Back in black:
towards formal, black box analysis of sanitizers and ﬁlters,” in 2016
IEEE Symposium on Security and Privacy (SP).
IEEE, 2016, pp. 91–
109.
[3] Nebuad,
isps
pro-
[Online]. Available: https://arstechnica.com/tech-policy/2008/
gram.
11/nebuad-isps-sued-over-dpi-snooping-ad-targeting-program/
ad-targeting
snooping,
sued
over
dpi
[4] R. Baldoni, E. Coppa, D. C. D’elia, C. Demetrescu, and I. Finocchi,
“A survey of symbolic execution techniques,” ACM Comput. Surv.,
vol. 51, no. 3, pp. 50:1–50:39, May 2018.
[Online]. Available:
http://doi.acm.org/10.1145/3182657
[5] S. Banescu, C. Collberg, V. Ganesh, Z. Newsham, and A. Pretschner,
“Code obfuscation against symbolic execution attacks,” in Proceedings
of the 32nd Annual Conference on Computer Security Applications,
ser. ACSAC 16. New York, NY, USA: Association for Computing
Machinery, 2016, p. 189200. [Online]. Available: https://doi.org/10.
1145/2991079.2991114
[6] R. Bendrath, “Global technology trends and national regulation: Ex-
plaining variation in the governance of deep packet inspection,” in
International Studies Annual Convention, vol. 15, no. 18, 2009.
[7] R. Bendrath and M. Mueller, “The end of the net as we know it?
deep packet inspection and internet governance,” New Media & Society,
vol. 13, no. 7, pp. 1142–1160, 2011.
[8] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue, “A
messy state of the union: Taming the composite state machines of
tls,” Commun. ACM, vol. 60, no. 2, p. 99107, Jan. 2017. [Online].
Available: https://doi.org/10.1145/3023357
[9] K. Bock, G. Hughey, X. Qiang, and D. Levin, “Geneva: Evolving
censorship evasion strategies,” in Proceedings of
the 2019 ACM
SIGSAC Conference on Computer and Communications Security,
ser. CCS 19. New York, NY, USA: Association for Computing
Machinery, 2019, p. 21992214. [Online]. Available: https://doi.org/10.
1145/3319535.3363189
[10] A. Boukhtouta, S. A. Mokhov, N.-E. Lakhdari, M. Debbabi, and
J. Paquet, “Network malware classiﬁcation comparison using dpi and
ﬂow packet headers,” Journal of Computer Virology and Hacking
Techniques, vol. 12, no. 2, pp. 69–100, May 2016. [Online]. Available:
https://doi.org/10.1007/s11416-015-0247-x
[11] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and automatic
generation of high-coverage tests for complex systems programs,”
in Proceedings of
the 8th USENIX Conference on Operating
Systems Design and Implementation, ser. OSDI’08. Berkeley, CA,
USA: USENIX Association, 2008, pp. 209–224. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1855741.1855756
[12] C. Cadar and K. Sen, “Symbolic execution for software testing: Three
decades later,” Commun. ACM, vol. 56, no. 2, pp. 82–90, Feb. 2013.
[Online]. Available: http://doi.acm.org/10.1145/2408776.2408795
[13] Y. Cao, Z. Qian, Z. Wang, T. Dao, S. V. Krishnamurthy, L. M.
Marvel, Y. Cao, T. Dao, L. M. Marvel, Z. Wang, Z. Qian, and S. V.
Krishnamurthy, “Off-path tcp exploits of the challenge ack global rate
limit,” IEEE/ACM Trans. Netw., vol. 26, no. 2, pp. 765–778, Apr.
2018. [Online]. Available: https://doi.org/10.1109/TNET.2018.2797081
[14] S. Y. Chau, O. Chowdhury, M. E. Hoque, H. Ge, A. Kate, C. Nita-
Rotaru, and N. Li, “Symcerts: Practical symbolic execution for exposing
noncompliance in X.509 certiﬁcate validation implementations,” in
2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose,
CA, USA, May 22-26, 2017.
IEEE Computer Society, 2017, pp.
503–520. [Online]. Available: https://doi.org/10.1109/SP.2017.40
[15] S. Y. Chau, M. Yahyazadeh, O. Chowdhury, A. Kate, and N. Li,
“Analyzing semantic correctness with symbolic execution: A case study
on pkcs# 1 v1. 5 signature veriﬁcation.” in NDSS, 2019.
[16] T. Chin, K. Xiong, and C. Hu, “Phishlimiter: A phishing detection and
mitigation approach using software-deﬁned networking,” IEEE Access,
vol. 6, pp. 42 516–42 531, 2018.
[17] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: A platform for
in-vivo multi-path analysis of software systems,” in Proceedings of
the Sixteenth International Conference on Architectural Support for
Programming Languages and Operating Systems, ser. ASPLOS XVI.
New York, NY, USA: ACM, 2011, pp. 265–278. [Online]. Available:
http://doi.acm.org/10.1145/1950365.1950396
[18] S. Dharmapurikar and V. Paxson, “Robust tcp stream reassembly in
the presence of adversaries,” in Proceedings of the 14th Conference on
USENIX Security Symposium - Volume 14, ser. SSYM’05. Berkeley,
CA, USA: USENIX Association, 2005, pp. 5–5. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1251398.1251403
[19] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer,
“Dynamic application-layer protocol analysis for network intrusion
detection,” in Proceedings of
the 15th Conference on USENIX
Security Symposium - Volume 15, ser. USENIX-SS’06. Berkeley,
CA, USA: USENIX Association, 2006. [Online]. Available: http:
//dl.acm.org/citation.cfm?id=1267336.1267354
[20] G. Finnie, “Isp trafﬁc management technologies: The state of the art,”
Heavy Reading. Report for the CRTC, 2009.
[21] P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based whitebox
fuzzing,” in ACM Sigplan Notices, vol. 43, no. 6. ACM, 2008, pp.
206–215.
[22] F. Gont and A. Yourtchenko, “On the implementation of the tcp urgent
mechanism,” RFC 6093, Jan. 2011.
[23] M. Handley, V. Paxson, and C. Kreibich, “Network intrusion
trafﬁc normalization, and end-to-end protocol
detection: Evasion,
semantics,” in Proceedings of
the 10th Conference on USENIX
Security Symposium - Volume 10, ser. SSYM’01. Berkeley, CA,
USA: USENIX Association, 2001, pp. 9–9.
[Online]. Available:
http://dl.acm.org/citation.cfm?id=1267612.1267621
[24] Transmission
control
option
kind numbers. [Online]. Available: https://www.iana.org/assignments/
tcp-parameters/tcp-parameters.xhtml#tcp-parameters-1
parameters: Tcp
protocol
(tcp)
[25] S. Khattak, M. Javed, P. D. Anderson, and V. Paxson, “Towards
to facilitate evasion,”
illuminating a censorship monitor’s model
in Presented as part of
the 3rd USENIX Workshop on Free and
Open Communications on the Internet. Washington, D.C.: USENIX,
2013. [Online]. Available: https://www.usenix.org/conference/foci13/
workshop-program/presentation/Khattak
J. C. King, “Symbolic execution and program testing,” Commun.
ACM, vol. 19, no. 7, pp. 385–394, Jul. 1976. [Online]. Available:
http://doi.acm.org/10.1145/360248.360252
[26]
[27] N. Kothari, R. Mahajan, T. Millstein, R. Govindan, and M. Musuvathi,
“Finding protocol manipulation attacks,” in Proceedings of
the
ACM SIGCOMM 2011 Conference, ser. SIGCOMM ’11. New
15
York, NY, USA: ACM, 2011, pp. 26–37.
http://doi.acm.org/10.1145/2018436.2018440
[Online]. Available:
speciﬁcations,” IEEE Trans. Softw. Eng., vol. 40, no. 7, pp. 695–709, Jul.
2014. [Online]. Available: https://doi.org/10.1109/TSE.2014.2323977
[46] R. Tahboub and Y. Saleh, “Data leakage/loss prevention systems (dlp),”
in 2014 World Congress on Computer Applications and Information
Systems (WCCAIS).
IEEE, 2014, pp. 1–6.
[47] M. Vutukuru, H. Balakrishnan, and V. Paxson, “Efﬁcient and robust tcp
stream normalization,” in Proceedings of the 2008 IEEE Symposium
on Security and Privacy, ser. SP ’08. Washington, DC, USA:
IEEE Computer Society, 2008, pp. 96–110.
[Online]. Available:
https://doi.org/10.1109/SP.2008.27
[48] Z. Wang, Y. Cao, Z. Qian, C. Song, and S. V. Krishnamurthy, “Your
state is not mine: A closer look at evading stateful internet censorship,”
in Proceedings of
the 2017 Internet Measurement Conference, ser.
IMC ’17. New York, NY, USA: ACM, 2017, pp. 114–127. [Online].
Available: http://doi.acm.org/10.1145/3131365.3131374
I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM : A practical
concolic execution engine tailored for hybrid fuzzing,” in 27th
USENIX Security Symposium (USENIX Security 18). Baltimore, MD:
USENIX Association, Aug. 2018, pp. 745–761. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity18/presentation/yun
[49]
[50] The z3 theorem prover.
Z3Prover/z3
[Online]. Available: https://github.com/
[51] Y. Zhang, Z. M. Mao, and M. Zhang, “Detecting trafﬁc differentiation