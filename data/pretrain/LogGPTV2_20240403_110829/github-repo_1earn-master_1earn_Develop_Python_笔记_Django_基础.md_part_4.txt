    '''
    '''
```
当采用客户端象 django 的服务器提交 post 请求时,会得到403,权限异常。
因为 django 针对提交的请求,有校验。所以会如此。
客户端提交的 post 如果不加这段,会出现 403 error
#### body
数据类型是二进制字节流,是原生请求体里的参数内容,在 HTTP 中用于 POST,因为 GET 没有请求体。
在 HTTP 中不常用,而在处理非 HTTP 形式的报文时非常有用,例如：二进制图片、XML、Json 等。
```py
from django.http import HttpResponse
def ffffffff0x(request):
    name = request.body
    print(name)
    return HttpResponse("ffffffff0x")
```
#### path
获取 URL 中的路径部分,数据类型是字符串。
```py
def ffffffff0x(request):
    name = request.path
    print(name)
    return HttpResponse("ffffffff0x")
```
#### method
获取当前请求的方式,数据类型是字符串,且结果为大写。
```py
def ffffffff0x(request):
    name = request.method
    print(name)
    return HttpResponse("ffffffff0x")
```
### 响应对象：HttpResponse 对象
响应对象主要有三种形式：HttpResponse()、render()、redirect()。
HttpResponse(): 返回文本,参数为字符串,字符串中写文本内容。如果参数为字符串里含有 html 标签,也可以渲染。
```py
def ffffffff0x(request):
    # return HttpResponse("ffffffff0x")
    return HttpResponse("ffffffff0x")
```
render(): 返回文本,第一个参数为 request,第二个参数为字符串（页面名称）,第三个参数为字典（可选参数,向页面传递的参数：键为页面参数名,值为views参数名）。
```py
def ffffffff0x(request):
    name ="ffffffff0x"
    return render(request,"ffffffff0x.html",{"name":name})
```
redirect()：重定向,跳转新页面。参数为字符串,字符串中填写页面路径。一般用于 form 表单提交后,跳转到新页面。
```py
def ffffffff0x(request):
    return redirect("/index/")
```
render 和 redirect 是在 HttpResponse 的基础上进行了封装：
- render：底层返回的也是 HttpResponse 对象
- redirect：底层继承的是 HttpResponse 对象
---
## 路由
路由简单的来说就是根据用户请求的 URL 链接来判断对应的处理程序,并返回处理结果,也就是 URL 与 Django 的视图建立映射关系。
Django 路由在 urls.py 配置,urls.py 中的每一条配置对应相应的处理方法。
```py
from django.urls import re_path # 用re_path 需要引入
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', views.index), # 普通路径
    re_path(r'^articles/([0-9]{4})/$', views.articles), # 正则路径
]
```
### 正则路径中的分组
#### 正则路径中的无名分组
无名分组按位置传参,一一对应。
views 中除了 request,其他形参的数量要与 urls 中的分组数量一致。
urls.py
```py
urlpatterns = [
    path('admin/', admin.site.urls),
    re_path("^index/([0-9]{4})/$", views.index),
]
```
views.py
```py
from django.shortcuts import HttpResponse
def index(request,year):
    print(year) # 一个形参代表路径中一个分组的内容,按顺序匹配
    return HttpResponse('ffffffff0x')
```
#### 正则路径中的有名分组
语法：
```
(?P正则表达式)
```
有名分组按关键字传参,与位置顺序无关。
views 中除了 request,其他形参的数量要与 urls 中的分组数量一致, 并且 views 中的形参名称要与 urls 中的组名对应。
urls.py
```py
urlpatterns = [
    path('admin/', admin.site.urls),
    re_path(r'^index/([0-9]{4})/([0-9]{2})/$', views.ffffffff0x),
]
```
views.py
```py
from django.shortcuts import HttpResponse
def index(request, year, month):
    print(year,month) # 一个形参代表路径中一个分组的内容,按关键字对应匹配
    return HttpResponse('ffffffff0x')
```
#### 路由分发(include)
存在问题：Django 项目里多个app目录共用一个 urls 容易造成混淆，后期维护也不方便。
解决：使用路由分发（include），让每个app目录都单独拥有自己的 urls。
步骤：
1. 在每个 app 目录里都创建一个 urls.py 文件。
2. 在项目名称目录下的 urls 文件里，统一将路径分发给各个 app 目录。
```py
from django.contrib import admin
from django.urls import path,include # 从 django.urls 引入 include
urlpatterns = [
    path('admin/', admin.site.urls),
    path("app01/", include("app01.urls")),
    path("app02/", include("app02.urls")),
]
```
在各自 app 目录下，写自己的 urls.py 文件，进行路径跳转。
app01 目录 urls.py:
```py
from django.urls import path,re_path
from app01 import views # 从自己的 app 目录引入 views
urlpatterns = [
    re_path(r'^login/(?P[0-9]{2})/$', views.index, ),
]
```
app02 目录 urls.py:
```py
from django.urls import path,re_path
from app02 import views # 从自己的 app 目录引入views
urlpatterns = [
    re_path("^xxx/(?P[0-9]{4})/$", views.xxx),
]
```
在各自 app 目录下的 views.py 文件中写各自的视图函数。
### 反向解析
在 Django 中提供了关于 URL 的映射的解决方案，可以做两个方向的使用
1. 普通解析过程：由客户端的浏览器发起一个 url 请求，Django 根据 url 解析，把 url 中的参数捕获，调用相应的视图，获取相应的数据，然后返回给客户端显示。
2. 反向解析：通过一个视图的名字，再加上一些参数和值，逆向获取相应的 url。简单来说，反向解析 (本质) 就是指通过一些方法，得到一个结果，该结果可以访问到对应的 url 并触发视图函数的运行
反向解析的应用场景，是因为在软件开发初期，url 地址的路径设计可能并不完美，后期需要进行调整，如果项目中很多地方使用了该路径，一旦该路径发生变化，就意味着所有使用该路径的地方都需要进行修改，这是一个非常繁琐的操作。
反向解析一般用在模板中的超链接及视图中的重定向。
因此，解决方案就是在编写一条 `url(regex,view,kwargs=None,name=None)` 时，可以通过参数 `name` 为 `url` 地址的路径部分起一个别名，项目中就可以通过别名来获取这个路径。以后无论路径如何变化别名与路径始终保持一致。这种通过别名获取路径的过程就称为反向解析。
#### 反向解析的示例
示例：登录成功跳转到 index.html 页面
在 urls.py 中
```py
from django.conf.urls import url
from django.contrib import admin
from app01 import views
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^login/$', views.login,name='login_page'), # 路径login/的别名为login_page
    url(r'^index/$', views.index,name='index_page'), # 路径index/的别名为index_page
]
```
在 views.py 中
```py
from django.shortcuts import render
from django.shortcuts import reverse # 用于反向解析
from django.shortcuts import redirect #用于重定向页面
from django.shortcuts import HttpResponse
def login(request):
    if request.method == 'GET':
        # 当为get请求时，返回login.html页面,页面中的{% url 'login_page' %}会被反向解析成路径：/login/
        return render(request, 'login.html')
    # 当为post请求时，可以从request.POST中取出请求体的数据
    name = request.POST.get('name')
    pwd = request.POST.get('pwd')
    if name == 'admin' and pwd == '123456':
        url = reverse('index_page')  # reverse会将别名'index_page'反向解析成路径：/index/
        return redirect(url) # 重定向到/index/
    else:
        return HttpResponse('用户名或密码错误')
def index(request):
    return render(request, 'index.html')
```
login.html
```html
    登录页面
    用户名：
    密码：
```
index.html
```html
    首页
我是index页面...
```
会看到登录页面，输入正确的用户名密码后会跳转到 index.html 页面，当修改路由表中匹配路径的正则表达式时，程序其余部分均无需修改
因此，反向解析的一般用法是
```py
# 后端views.py反向解析的使用
from django.shortcuts import render,HttpResponse,redirect,reverse
  	url = reverse('login_page')
# 前端模版login.html文件中，反向解析的使用
 	{% url 'login_page' %}
```
#### url 分组的反向解析
如果路径中存在分组（无名分组和有名分组）的反向解析，例如
```py
from django.conf.urls import url
from django.contrib import admin
from app01 import views
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^aritcle/(\d+)/$',views.article,name='article_page'), # 无名分组
    url(r'^user/(?P\d+)/$',views.article,name='user_page'), # 有名分组
]
```
对应反向解析的写法是
```py
# 1 针对无名分组，比如要反向解析出：/aritcle/1/ 这种路径，写法如下
在views.py中，反向解析的使用：
	url = reverse('article_page',args=(1,))
在模版login.html文件中，反向解析的使用
	{% url 'article_page' 1 %}
# 2 针对有名分组，比如要反向解析出：/user/1/ 这种路径，写法如下
在views.py中，反向解析的使用：
	url = reverse('user_page',kwargs={'uid':1})
在模版login.html文件中，反向解析的使用
	{% url 'user_page' uid=1 %}
```
---
## Django Admin 管理工具
Django 提供了基于 web 的管理工具。
Django 自动管理工具是 django.contrib 的一部分。你可以在项目的 settings.py 中的 INSTALLED_APPS 看到它：
```py
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)
```
django.contrib 是一套庞大的功能集，它是 Django 基本代码的组成部分。
### 激活管理工具
通常我们在生成项目时会在 urls.py 中自动设置好，我们只需去掉注释即可。
修改 urls.py
```py
# urls.py
from django.conf.urls import url
from django.contrib import admin
urlpatterns = [
    url(r'^admin/', admin.site.urls),
]
```
当这一切都配置好后，Django 管理工具就可以运行了。
通过命令创建超级用户
```bash
python3 manage.py migrate
python3 manage.py createsuperuser
```
注意,这一步的前提是需要配置好和数据库的连接
输入用户名密码登录
为了让 admin 界面管理某个数据模型，我们需要先注册该数据模型到 admin。比如，我们之前在 TestModel 中已经创建了模型 Test 。修改 TestModel/admin.py:
```py
from django.contrib import admin
from TestModel.models import Test
# Register your models here.
admin.site.register(Test)
```
刷新后即可看到 Testmodel 数据表
![](../../../../../assets/img/Develop/Python/笔记/django/基础/1.png)
### 复杂模型
管理页面的功能强大，完全有能力处理更加复杂的数据模型。
先在 TestModel/models.py 中增加一个更复杂的数据模型：
```py
from django.db import models
# Create your models here.
class Test(models.Model):
    name = models.CharField(max_length=20)
class Contact(models.Model):
    name   = models.CharField(max_length=200)
    age    = models.IntegerField(default=0)
    email  = models.EmailField()
    def __unicode__(self):
        return self.name
class Tag(models.Model):
    contact = models.ForeignKey(Contact, on_delete=models.CASCADE,)
    name    = models.CharField(max_length=50)
    def __unicode__(self):
        return self.name
```
这里有两个表。Tag 以 Contact 为外部键。一个 Contact 可以对应多个 Tag。
我们还可以看到许多在之前没有见过的属性类型，比如 IntegerField 用于存储整数。
在 TestModel/admin.py 注册多个模型并显示
```py
from django.contrib import admin
from TestModel.models import Test,Contact,Tag
# Register your models here.
admin.site.register([Test, Contact, Tag])
```
在以上管理工具我们就能进行复杂模型操作。
然后记得更新表结构
```bash
python3 manage.py makemigrations TestModel
python3 manage.py migrate TestModel
```
---
## Source & Reference
- https://www.runoob.com/django/django-template.html
- https://www.runoob.com/django/django-model.html
- https://www.runoob.com/django/django-views.html
- https://www.ssgeek.com/post/django-zhi-url-fan-xiang-jie-xi/
- https://www.runoob.com/django/django-admin-manage-tool.html
- https://www.liujiangblog.com/course/django/86