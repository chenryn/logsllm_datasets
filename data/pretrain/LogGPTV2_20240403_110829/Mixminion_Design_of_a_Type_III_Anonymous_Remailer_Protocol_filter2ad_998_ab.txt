very nature they let people send multiple messages through
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
them. An attacker can use this property to trace the recip-
ient’s path: if two incoming batches both include a mes-
sage to the same reply block, then the next hop must be in
the intersection of both outgoing batches. To prevent these
replays, Mixminion provides only single-use reply blocks
(SURBs). Since replies may be rare relative to forward mes-
sages, and thus much easier to trace, the Mixminion proto-
col makes reply messages indistinguishable from forward
messages even for the mix nodes. Thus forward and reply
messages can share the same anonymity set.1
Mixminion’s reply model requires anonymous recipients
to keep one secret for each nym they maintain. The ﬁ-
nal header of the SURB includes a seed (symmetrically en-
crypted to that nym’s secret), from which the recipient can
derive all the secrets needed to strip the layers of encryption
from the received message. The recipient keeps a separate
secret for each nym in order to block attacks to link the
nyms. For example, if Alice is talking to Bob and Charlie
and guesses they are the same person, she might reply to
Bob’s mail using Charlie’s reply block; if Bob responds as
normal, her guess would be conﬁrmed.
The rest of this section describes the mechanism for se-
cure replies, its integration with the normal sender anony-
mous message delivery, and how we defeat tagging-related
attacks.
4.1. Recipient anonymity and indistinguishable
replies
Mixminion allows Alice to send messages to Bob in one
of three ways:
1. Forward messages where only Alice remains anony-
mous.
2. Direct Reply messages where only Bob remains
anonymous.
3. Anonymized Reply messages where Alice and Bob
remain anonymous.
The fact that forward messages are indistinguishable
from replies, however, makes it more difﬁcult to prevent
tagging attacks. Since the author of a SURB cannot pre-
dict the message that will be attached to it, a hash of the
entire message cannot be included in the SURB. Therefore,
since we choose to make forward messages and replies in-
distinguishable, we cannot include hashes for forward mes-
sages either. Tagging attacks, and our approach to prevent-
ing them, are discussed in more detail in Section 4.2.
Messages are composed of a header section and a pay-
load. We divide a message’s path into two legs, and split
1Note that replies are still weaker than forward messages: an adversary
can successively force intermediate mixes to reveal the next hop of the
reply block until its originator is reached.
Forward
Direct Reply
Sender Onion
Single Use
Reply Block
Sender Onion
Random Data
Anonymized
Reply
Sender Onion
Single Use
Reply Block
Payload
Payload
Payload
First Leg
16 subheaders
2kb size
Second Leg
 16 subheaders
2kb size
Payload 
28kb size
Header
Subheader
Version
Shared Secret
Digest
Next Address
Subheader
Up to 16 
subheaders
padded to
2kb
Figure 1. Header conﬁgurations for different
anonymity functions
the header section correspondingly into a main header and a
secondary header. Each header is composed of up to 16 sub-
headers, one for each hop along the path. Each subheader
contains a hash of the remainder of its header as seen by
that mix, so we can do integrity-checking of the path (but
not the payload) within each leg. Each subheader also con-
tains a master secret, used to derive a symmetric key for
decrypting the rest of the message. To make sure that the
hash matches even though each hop must repad the header
to maintain constant message length, we need to add pre-
dictable padding to the end of the header: the mix appends
an appropriate number of zero bits to the header after mes-
sage decryption, and decrypts those also. A security proof
for a simpliﬁed version of this approach is given in [25].
Each subheader also includes the address of the next
node to which the message should be forwarded, along with
its expected signature (identity) key ﬁngerprint — the mix
refuses to deliver the message until the next hop has proved
its identity.
For forward messages, Alice provides both legs. For
anonymous replies, Alice uses Bob’s reply block as the sec-
ond leg, and generates her own path for the ﬁrst leg. To send
a direct reply, Alice can use an empty second leg, or send
the reply block and message to a mix that can wrap them
for her. Figure 1 illustrates the three options.
When Alice creates her message, she encrypts the sec-
ondary header with a hash of her payload (as well as the
usual layered onion encryptions). Alice’s message traverses
the mix-net as normal (every hop pulls off a layer, veriﬁes
the hash of the current header, and puts some junk at the
end of the header), until it gets to a hop that is marked as
a crossover point. This crossover point performs a “swap”
operation: it decrypts the secondary header with the hash
of the current payload, and then swaps the two headers.
The swap operation is detailed in Figure 2 — speciﬁcally,
the normal operations done at every hop are those above
the dotted line, and the operations performed only by the
crossover point are those below the dotted line. We use
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
H1
H2
RSA
K
H
Check 
Decrypt
& 
PRNG
M
LBC
LBC
Steps for
all messages
H1’
H2’
M’
LBC
HASH
Extra steps
for "Swap"
messages
H1’’
H2’’
M’’
Figure 2. Operations performed by the “swap”
method
a keyed encryption primitive, labeled “LBC” (for Large-
Block Cipher), to encrypt the second header and the pay-
load. This primitive needs to have certain properties:
(cid:15) The LBC operation must preserve length.
(cid:15) Without knowing the key, it should be impossible to
recognize the decryption of a modiﬁed block, or to
predict the effect of a modiﬁcation on the decrypted
block.
(cid:15) The decryption and encryption operations should be
equally secure when used for encryption.
To fulﬁll the above requirements we use a variable-
length block cipher adapted to the length of the payload —
that is, a cipher that acts as a permutation on a block the size
of its input (a header or the payload). One candidate is LI-
ONESS [2]. The cryptographic property required is that of
a super-pseudo-random permutation (a.k.a. strong pseudo-
random permutation) or SPRP [20].2 Thus if any bit of the
encrypted material is changed, the decryption will look like
random bits. An SPRP is also equally secure in the encryp-
tion and decryption directions. In the following section, we
describe how this approach helps protect against tagging.
4.2 Defenses against tagging attacks
To motivate the Mixminion design, we describe an at-
tack that works against many mix-net protocols, including
Mixmaster and Babel.
A tagging attack is an active attack in which a message
is modiﬁed by altering part of it (for example by ﬂipping
2The weaker PRP property may be sufﬁcient, given that preventing re-
plays limits the number of oracle queries to 1; this will need further analy-
sis. In that case the simpler BEAR construction [2] could be used instead
of LIONESS.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
bits) so that it can be recognized later in the path. A later
mix controlled by the attacker can recognize tagged mes-
sages because the header or the body does not conform to
the expected format when decrypted. Also, the ﬁnal recip-
ient can recognize a tagged message for which the payload
has been altered. Thus, an attacker can use tagging to trace
a message from the point at which it is tagged to the point
at which the corrupted output appears.
Checking the integrity of hop headers individually is not
sufﬁcient to prevent tagging attacks. For example, in Mix-
master each hop header contains a hash of the other ﬁelds in
that header [26]. Each mix in the path checks the integrity
of its own header and drops the message immediately if it
has been altered. However, an attacking mix can still alter a
header that will be decrypted only after several more hops,
and so tagging attacks are still possible.
The most straightforward way to prevent tagging attacks
is to verify the integrity of the whole message at every hop.
For forward messages, then, the padding added to a mes-
sage must be derived deterministically, so that it is possi-
ble to calculate authentication tags for the whole message
at each hop. But the situation becomes more complicated
when reply messages are introduced – the payload and the
reply block are created by different users.
It is impossi-
ble for the creator of the SURB to include in the header a
checksum of a message he does not yet know. Therefore
conventional techniques such as semantically secure or ran-
domized encryption, that make sure an adversary does not
gain any information by sending malformed messages to the
mix (since the mix acts as a decryption oracle), cannot be
used.
Mixminion uses a hybrid strategy to protect against such
attacks: we use cryptographic checksums to protect the
headers, and the “swap” step described above insures that
the addressing information contained in the headers is de-
stroyed if the payload is modiﬁed by an adversary.
If the Mixminion design did not require the crossover
point, an adversary could mount a tagging attack by mod-
ifying the payload of a forward message as it leaves Alice
and recognizing it later when it reaches Bob. For exam-
ple, if our encryption mechanism were an ordinary counter-
mode cipher, an adversary might alter a speciﬁc byte in the
payload of a message entering the mix-net. Since many
of the outgoing messages will be in part predictable (ei-
ther entirely plaintext, or with predictable PGP header ma-
terial), the adversary could later observe messages exiting
the mix-net and look for payloads that have a correspond-
ing anomaly at that byte. Other cipher modes such as Cipher
Block Chaining (CBC) present comparable problems, since
whole blocks would look like random bytes instead of the
normal payload.
We use a large-block cipher as described in the previous
section to minimize the amount of information an adversary
can learn from tagging. If he tags a message leaving Alice,
the payload will be entirely random when it reaches Bob.
Thus, an adversary who tags a message can at worst turn the
corresponding payload into trash (pseudorandom bit strings
entirely unpredictable to the attacker).
We brieﬂy considered introducing cover-trash, dummy
messages designed to look like tagged messages, to frustrate
these tagging attacks; but that problem is as complex as the
dummy trafﬁc problem [5]. Instead, we use the “swap” step
at the crossover point to prevent the attacker from learning
information from tagging attacks. The second header of the
message, which contains the path to the ﬁnal destination of
the forward path, is encrypted by the sender with the hash of
the payload that is to arrive at the mix. The mix then needs
to perform the decryption and swap the ﬁrst header for the
second one. Our security argument has three cases:
(cid:15) Forward messages: if the message is tagged during the
ﬁrst leg, the second header is unrecoverable, and so the
adversary cannot learn the intended destination of the
message. If the message is tagged during the second
leg, then the ﬁrst leg has already provided anonymity,
and so the adversary cannot learn the sender.
(cid:15) Direct reply messages: since the decryption algorithm
provides secrecy equivalent to encryption, the effect is
similar to encrypting the payload at each step along a
reply block. Only the recipient can learn, after peeling
off all layers, whether the message has been tagged.
Thus tagging attacks are useless against direct reply
messages.
(cid:15) Anonymized reply messages: as with forward mes-
sages, if the ﬁrst leg is tagged the second header is un-
recoverable — so an adversary will never learn that the
message was addressed to a reply block. And as with
direct reply messages, only the recipient can learn if
the second leg is tagged.
While direct reply messages do not need a crossover
point in the path (the adversary can never observe his tag),
forward messages still need a crossover point to prevent
end-to-end tagging. But since the ﬁrst leg either provides
sufﬁcient anonymity or destroys the information about the
second leg, the second leg in a forward message can be
short. At the extreme, the ﬁrst hop in the second header
could directly specify the message recipient. However, the
choice of crossover point can still reveal information about
the intended recipient (imagine that some mixes only al-
low outgoing mail to local addresses; if such a node gets a
crossover message that has been trashed, it might guess that
the recipient is one of the local addresses), and so we rec-
ommend that the second leg be at least a few hops long. We
use a path length of 4 hops per leg, but with only 2 hops in
the second leg of a forward message.