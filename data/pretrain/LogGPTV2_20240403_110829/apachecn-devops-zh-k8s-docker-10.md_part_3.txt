            ports:
            - containerPort: 80
              hostPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              name: https
              protocol: TCP
    .
    .
    .
            securityContext:
              allowPrivilegeEscalation: true
              capabilities:
                add:
                - NET_BIND_SERVICE
                drop:
                - ALL
              runAsUser: 101
    ```
    首先，吊舱宣布要开放端口`80`和`443`。接下来，它的`securityContext`宣布它想要特权升级，并且它想要`NET_BIND_SERVICE`能力在不成为根的情况下打开那些端口。
7.  Similar to the `audit2rbac` tool used when debugging RBAC policies, Sysdig has published a tool that will inspect the pods in a namespace and generate a recommended policy and RBAC set. Download the latest version from [https://github.com/sysdiglabs/kube-psp-advisor/releases](https://github.com/sysdiglabs/kube-psp-advisor/releases):
    ```
    ./kubectl-advise-psp inspect  --namespace=ingress-nginx
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
     creationTimestamp: null
     name: pod-security-policy-ingress-nginx-20200611232031
    spec:
     defaultAddCapabilities:
     - NET_BIND_SERVICE
     fsGroup:
     rule: RunAsAny
     hostPorts:
     - max: 80
     min: 80
     - max: 443
     min: 443
     requiredDropCapabilities:
     - ALL
     runAsUser:
     ranges:
     - max: 101
     min: 101
     rule: MustRunAs
     seLinux:
     rule: RunAsAny
     supplementalGroups:
     rule: RunAsAny
     volumes:
     - secret
    ```
    将该策略与本章前面审查的 NGINX 入口项目提供的策略进行比较；您将看到它对端口和用户的限制更大，但对组的限制较小。`Deployment`声明的是用户而不是组，所以`kube-psp-advisor`不知道限制。与`audit2rbac`不同的是，`kube-psp-advisor`不是扫描日志来查看哪些内容被否认；它正在主动检查 pod 定义以创建策略。如果一个 pod 没有声明它需要以 root 身份运行，而只是启动了一个以 root 身份运行的容器，那么`kube-psp-advisor`就不会生成一个合适的策略。
8.  从`kube-psp-advisor`创建一个名为`psp-ingress.yaml` :
    ```
    $ ./kubectl-advise-psp inspect  --namespace=ingress-nginx > psp-ingress.yaml
    ```
    的策略文件
9.  使用`kubectl` :
    ```
    $ kubectl create -f ./psp-ingress.yaml -n ingress-nginx
    ```
    部署 PSP
10.  接下来，为`nginx-ingress-serviceaccount ServiceAccount`(在部署中引用)创建 RBAC 绑定，以访问此策略:
    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: nginx-ingress-psp
      namespace: ingress-nginx
    rules:
    - apiGroups:
      - policy
      resourceNames:
      - pod-security-policy-ingress-nginx-20200611232826
      resources:
      - podsecuritypolicies
      verbs:
      - use
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: nginx-ingress-psp
      namespace: ingress-nginx
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: nginx-ingress-psp
    subjects:
    - kind: ServiceAccount
      name: nginx-ingress-serviceaccount
      namespace: ingress-nginx
    ```
11.  Once the RBAC objects are created, the Deployment needs to be updated to force Kubernetes to attempt to recreate the pods since the API server will stop trying after a certain point:
    ```
    $ kubectl scale deployment.v1.apps/nginx-ingress-controller --replicas=0 -n ingress-nginx
    deployment.apps/nginx-ingress-controller scaled
    $ kubectl scale deployment.v1.apps/nginx-ingress-controller --replicas=1 -n ingress-nginx
    deployment.apps/nginx-ingress-controller scaled
    $ kubectl get pods -n ingress-nginx
    NAME                                        READY   STATUS    RESTARTS   AGE
    nginx-ingress-controller-7d6bf88c86-h4449   0/1     Running   0          21s
    ```
    如果您检查了窗格上的注释，`PodSecurityPolicy`注释将会出现，并且 OpenUnison 可以再次访问。
    注意
    使用 RBAC 控制 PSP 授权的一个副作用是命名空间中的管理员能够创建能够运行特权容器的`ServiceAccount`对象。下一章将讨论停止此功能，同时仍然允许名称空间管理员在其名称空间中创建 RBAC 策略。
恭喜您，在您的集群上成功实现了 PSPs！尝试运行我们在本章前面运行的中断代码，您会发现它不起作用。`Pod`连开始都不会！看到 NGINX 入口控制器无法启动和调试，它为您提供了工具来了解如何在启用策略实现后解决问题。
# 私营保安公司的替代品
如果不是 PSP，那是什么？这实际上取决于集群的用例。有人试图在 OPA 中实现完整的`PodSecurityPolicy`实现规范，这将在下一章中详细讨论。其他几个项目试图实现 PSP，如果不是像`PodSecurityPolicy`对象那样的精确规范的话。考虑到空间的流动性，本章不打算列举所有试图这样做的项目。
2020 年 5 月，认证特别兴趣小组(`sig-auth`)发布了 *pod 安全标准*文件，使安全策略的不同实现更容易在词汇和术语上实现标准化。第 e 标准发布在 Kubernetes 网站([https://Kubernetes . io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/))上。
小心在你自己的准入控制器中实现这个逻辑，作为一个验证性的网络钩子。就像任何安全实现一样，需要非常小心，不仅要验证预期的结果，还要确保以预期的方式处理意外情况。例如，如果使用`Deployment`创建`Pod`与直接创建`Pod`会发生什么？当有人试图向定义中注入无效数据时会发生什么？或者如果有人试图创造一辆侧车或一个`init` 容器？选择方法时，确保任何实现都有一个彻底的测试环境是很重要的。
# 总结
在本章中，我们首先探讨了保护节点的重要性、从安全角度来看容器和虚拟机之间的区别，以及在节点不受保护的情况下利用集群有多容易。我们还研究了安全容器设计，最后，我们实现并调试了一个 PSP 实现。
锁定集群的节点为攻击者提供了更少的攻击媒介。封装策略使得向开发人员解释如何设计容器变得更加容易，并且使得构建安全的解决方案变得更加容易。
到目前为止，我们所有的安全性都建立在 Kubernetes 的标准技术之上，并且在 Kubernetes 发行版中几乎是通用的。在下一章中，我们将使用动态准入控制器和 OPA 来应用超出 Kubernetes 范围的策略。
# 问题
1.  True or false – containers are "lightweight VMs."
    A.真实的
    B.错误的
2.  Can a container access resources from its host?
    A.不，它是孤立的。
    B.如果标记为特权，是的。
    C.只有在策略明确授权的情况下。
    D.有时候。
3.  How could an attacker gain access to a cluster through a container?
    A.容器应用中的一个错误会导致远程代码执行，这可以用来突破易受攻击的容器，然后用来获取 kubelet 的凭据。
    B.能够在一个名称空间中创建容器的受损凭证可用于创建一个容器，该容器装载节点的文件系统以获取 kubelet 的凭证。
    C.以上两者。
4.  How does the `PodSecurityPolicy` admission controller determine which policy to apply to a pod?
    A.通过阅读吊舱定义的注释
    B.通过比较吊舱的请求能力和通过吊舱的创建者和它自己的联盟授权的策略`ServiceAccount`
    C.通过比较 Pod 请求的功能和为其自身授权的策略`ServiceAccount`
    D.通过比较 pod 请求的功能和为 pod 创建者授权的策略
5.  What mechanism enforces PSPs?
    A.在创建和更新时检查所有吊舱的准入控制器
    B.`PodSecurityPolicy`空气污染指数
    C.OPA
    D.看门人
6.  True or false – the `PodSecurityPolicy` API will be removed quickly.
    A.真实的
    B.错误的
7.  True or false – containers should generally run as root.
    A.真实的
    B.错误的