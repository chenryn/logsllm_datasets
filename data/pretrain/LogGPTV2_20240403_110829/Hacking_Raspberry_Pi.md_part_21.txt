Take an image with a quality of 50% and a “shutter” delay of 10 seconds:
Click here to view code image
raspistill -o image3.jpg -q 50 -t 10000
The -q parameter goes from 0 (lowest quality) to 100 (highest quality). Quality, in this case, refers to
the degree of JPEG compression that is applied to captured images. JPEG is a lossy compression
algorithm, so even images taken at quality 100 will have some pixel loss due to the file format.
The timer value adds an exposure delay and works in thousands of seconds (milliseconds). Thus, a
value of 5000 represents a 5 second delay.
Take an image with custom dimensions, verbose command output, a quality of 80%, and a one-second
delay:
Click here to view code image
raspistill -v -w 1024 -h 768 -q 80 -o image4.jpg -t 1000
The verbose (-v) parameter is useful for educational and troubleshooting purposes. In fact, let me
show you the output of the previous raspistill command example:
Click here to view code image
pi@raspberrypi ~ $ raspistill -v -w 1024 -h 768 -q 80 -o image4.jpg -t 1000 >
output.txt
raspistill Camera App v1.2
Width 1024, Height 768, quality 80, filename image4.jpg
Time delay 1000, Raw no
Thumbnail enabled Yes, width 64, height 48, quality 35
Full resolution preview No
Preview Yes, Full screen Yes
Preview window 0,0,1024,768
Opacity 255
Sharpness 0, Contrast 0, Brightness 50
Saturation 0, ISO 400, Video Stabilisation No, Exposure compensation 0
Exposure Mode 'auto', AWB Mode 'auto', Image Effect 'none'
Metering Mode 'average', Colour Effect Enabled No with U = 128, V = 128
Rotation 0, hflip No, vflip No
ROI x 0.000000, y 0.000000, w 1.000000 h 1.000000
Camera component done
Encoder component done
Starting component connection stage
Connecting camera stills port to encoder input port
Opening output file image4.jpg
Enabling encoder output port
Starting capture 1
Finished capture 1
Closing down
Close down completed, all components disconnected, disabled and destroyed
Although the previous verbose output looks like so much gobbledygook at first glance, given
experience and practice you’ll come to appreciate the degree of detail that raspistill gives you. The
verbose output leaves nothing to the imagination, so you can figure out the source of any unexpected
behavior you see in taking still pictures with your Raspberry Pi.
Note: About Flash
Because neither the Raspberry Pi Camera Board nor any webcam I’ve ever used
includes a built-in flash, you need to pay attention to ambient light when you capture still
pictures or video. If you visit the Raspberry Pi forums (check out these threads:
http://is.gd/LaKy6m; http://is.gd/d1SoH5) you’ll find some enthusiastic debate regarding
the relative difficulty of accessing the Pi’s GPIO pins to attach and sync a flash bulb with
the camera sensor.
The consensus among Pi developers at the time of this writing is that the Omnivision
Camera Board firmware does include support for a flash, but digging into that firmware
source code isn’t something that the Raspberry Pi Foundation has addressed yet.
Recording Video with the Camera Board
As I mentioned earlier, the Raspberry Pi Foundation gives you the raspivid command-line utility to
capture full-motion video on your Pi.
Let’s get right into the thick of things by learning the raspivid command syntax:
raspivid | less
For those of you who want to see the raspivid syntax right now (nothing like instant gratification,
right?), let me give you the results of raspivid --help.
Click here to view code image
pi@raspberrypi ~ $ raspivid --help
Display camera output to display, and optionally saves an H264 capture at requested
bitrate
usage: raspivid [options]
Image parameter commands
-?, --help : This help information
-w, --width : Set image width . Default 1920
-h, --height : Set image height . Default 1080
-b, --bitrate : Set bitrate. Use bits per second (e.g. 10MBits/s would be -b
10000000)
-o, --output : Output filename  (to write to stdout, use '-o -')
-v, --verbose : Output verbose information during run
-t, --timeout : Time (in ms) to capture for. If not specified, set to 5s. Zero
to disable
-d, --demo : Run a demo mode (cycle through range of camera options, no
capture)
-fps, --framerate : Specify the frames per second to record
-e, --penc : Display preview image *after* encoding (shows compression
artifacts)
-g, --intra : Specify the intra refresh period (key frame rate/GoP size)
Preview parameter commands
-p, --preview : Preview window settings 
-f, --fullscreen : Fullscreen preview mode
-op, --opacity : Preview window opacity (0-255)
-n, --nopreview : Do not display a preview window
Image parameter commands
-sh, --sharpness : Set image sharpness (-100 to 100)
-co, --contrast : Set image contrast (-100 to 100)
-br, --brightness : Set image brightness (0 to 100)
-sa, --saturation : Set image saturation (-100 to 100)
-ISO, --ISO : Set capture ISO
-vs, --vstab : Turn on video stablisation
-ev, --ev : Set EV compensation
-ex, --exposure : Set exposure mode (see Notes)
-awb, --awb : Set AWB mode (see Notes)
-ifx, --imxfx : Set image effect (see Notes)
-cfx, --colfx : Set colour effect (U:V)
-mm, --metering : Set metering mode (see Notes)
-rot, --rotation : Set image rotation (0-359)
-hf, --hflip : Set horizontal flip
-vf, --vflip : Set vertical flip
-roi, --roi : Set region of interest (x,y,w,d as normalised coordinates [0.0-
1.0])
Notes
Exposure mode options :
off,auto,night,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks
AWB mode options :
off,auto,sun,cloud,shade,tungsten,fluorescent,incandescent,flash,horizon
Image Effect mode options :
none,negative,solarise,sketch,denoise,emboss,oilpaint,hatch,gpen,pastel,
watercolour,film,blur,saturation,colourswap,washedout,posterise,colourpoint,
colourbalance,cartoon
Metering Mode options :
average,spot,backlit,matrix
You probably noticed that the raspivid command syntax is almost identical to that of raspistill. This
behavior, of course, is by design.
Now let’s record a quick five-second video:
raspivid -o fiveseconds.h264
By default, the camera’s video capture is full 1080p HD at 1920x1080 pixels. Of course, you can
make a smaller capture; let’s make a 15-second clip:
Click here to view code image
raspivid -o smallvid.h264 -t 15000 -w 1024 -h 768
Note: Perhaps a Larger SD Card Is in Order...
Recording at 1080p equates to a disk storage footprint of 17 megabytes (MB) per
second, or 115MB per minute of video. Thus if you plan on capturing a significant amount
of video with your Pi, you might want to purchase a higher capacity SD card.
Of course, the Raspberry Pi Camera Board has no microphone, so your videos won’t have any audio.
Actually, adding an audio feed to your video captures is a good Raspberry Pi project idea!
Task: Encoding a raspivid Video File
I have some bad news and some good news for you with regard to raspivid captures.
The bad news is that the capture is a raw H.264 data stream that isn’t immediately
viewable on the Pi or any computer, for that matter. The good news is that you can wrap the
raw H.264 stream into an MPEG Layer 4 (MP4) container by following these steps:
1. Download and install MP4Box (http://is.gd/Fbti7Z):
Click here to view code image
sudo apt-get install -y gpac
The -y parameter is useful if you want to approve the download automatically instead
of having to manually specify “y.”
2. Remember that Linux is a completely case-sensitive operating system. Thus, you must
use the command MP4Box and not mp4box, MP4box, or any combination or permutation
thereof:
Click here to view code image
MP4Box -fps 30 -add smallvid.h264 smallvid.mp4
This command feeds in the smallvid.h264 movie file you created using raspivid earlier;
that is the purpose of the -add parameter. It finishes with the filename of the encoded movie
file; in this case, smallvid.mp4.
3. Raspbian includes the Omxplayer (http://is.gd/UnBEuD) media player that you can use to
view your newly converted video capture. To use it just execute the program with the
video file name:
omxplayer smallvid.mp4
You can get full documentation on Omxplayer, including keyboard controls, by visiting the Embedded
Linux Wiki at http://is.gd/PNC7Mf.
If you have trouble with Omxplayer, you can try my personal favorite media player on any platform—
VLC (http://is.gd/kfwzk5):
sudo apt-get install -y vlc
vlc smallvid.mp4
From LXDE, you can also right-click your MP4 file and select VLC media player from the shortcut
menu.
Using a Third-Party USB Webcam
If you already have a Raspberry Pi-compatible USB webcam, feel free to use that piece of hardware
instead of purchasing the Camera Board. You can check your webcam against the list of verified
peripherals here at http://is.gd/ZJA79A.
For my part, I have a nifty Logitech HD Webcam C615, shown in Figure 16.8, that works on my Pi
like a champ even without a powered hub!
FIGURE 16.8 I actually prefer using a third-party webcam to the Raspberry Pi Camera Board.
For this exercise we use an awesome piece of open source software called Motion.
Task: Configuring a Third-Party USB Webcam
One awesome thing (among many) about the Raspberry Pi is that you are rarely, if ever,
locked into any particular method of accomplishing a task. Take recording webcam video,
for instance. You don’t have to buy the Raspberry Pi Camera Board if you already have a
third-party webcam.
Let’s learn how to use a standard USB webcam with the Pi.
1. Plug in your webcam, preferably into a powered USB hub.
2. From a Terminal shell prompt, make sure your Raspberry Pi recognizes your device:
lsusb
As you can see in Figure 16.9, my Logitech C615 is detected.
FIGURE 16.9 The lsusb command is used to enumerate USB devices in Linux. Here you can
see both my Logitech webcam (device 004) as well as my Scosche portable battery (device
001).
3. To get the camera working properly with your Pi, you also need to edit two Motion
configuration files a bit. To edit the first file, enter the following command:
Click here to view code image
sudo nano /etc/default/motion
In this configuration file, change the value
start_motion_daemon=no
to
start_motion_daemon=yes
Make sure to save your changes before you exit nano.
Note: Smile—You Are on the World Wide Web
If you are interested in making your Raspberry Pi webcam accessible from the
public Internet, look no further than Chapter 15, “Raspberry Pi Web Server,” in which
I give you instructions on using the lovely No-IP service.
4. Now for the second configuration file tweak:
Click here to view code image
sudo nano /etc/motion/motion.conf
Change the Daemon option from Off to On.
Change the webcam_localhost parameter from On to Off.
Again, save and exit.
5. Start the video stream:
sudo service motion start
To view your live video stream, open a web browser (I suggest Iceweasel or Netsurf
[http://is.gd/6AfWdc]) and navigate to the following URL:
http://localhost:8081
If you want to access your webcam remotely on your LAN, substitute your Pi’s IP
address for localhost.
You can tweak detailed parameters of the stream including stuff like the following:
Video dimensions
Frame rate
Video quality
Capture storage directory
by editing /etc/motion/motion.conf. You can see my goofy mug (again) in Figure 16.10.
FIGURE 16.10 This is Motion webcam output.
When you want to stop the stream, issue the following Terminal command:
sudo service motion stop
The Pale Blue Dot blog (http://is.gd/XS6fY8) has good instructions for setting up Motion to run as a
service and auto-start each time your Pi boots up. For security reasons, though, I advise you to be
careful about this, especially if your Pi is publicly accessible.
You’re probably wondering if the raspistill and raspivid commands that were written to function with
the official Raspberry Pi Camera Board work with a third-party webcam. I’ve tested this out for you,
and the answer is no. If you try to run raspistill or raspivid against a third-party webcam, you will
receive an error message that says in part:
Click here to view code image
Camera is not detected. Please check carefully the camera module is installed
correctly.
Setting Up Your Webcam
As you just saw, Motion provides you with a video stream and a web browser in one fell swoop. But
what if you wanted your Raspberry Pi cam to monitor a particular area (be it your front door, your
back yard, your fish tank, whatever) and snap a picture at regular intervals?
Our current Motion setup feeds a live stream to a tiny web server on port 8080 (configurable through
montion.conf, naturally).
Task: Setting Up a Time-Lapse Webcam
Let’s say that your goal is to have the webcam snap a picture every 30 seconds and
save the image snapshot files in /home/pi/webcam. To do this let’s try out a different piece
of webcam software: fswebcam (). Be sure to stop the Motion service by issuing sudo
service motion stop before proceeding with the following procedure:
1. Install fswebcam:
Click here to view code image
sudo apt-get install fswebcam
2. You can get a run of the tool’s command-line help:
fswebcam --help
3. Now let’s snap a decent-sized image. Note that fswebcam uses the default ID
/dev/video0 for the first webcam it sees; assuming you have only one webcam installed,
this ID should work fine for your purposes.
Click here to view code image
fswebcam -r 1024 x 768 -d /dev/video0 picname.jpg
In the previous example, the -r switch specifies the image dimensions, and the -d switch
specifies the output directory. Finally, comes the name of the output image file in JPEG
format.
Of course, picname is a generic identifier for your picture file.
4. Create a configuration file for fswebcam so you can set your preferred defaults,
especially your output directory:
cd
sudo nano .fswebcam.conf
5. When you are in the file, add these lines, customizing the values to your liking (I’m
showing you my own setup here for illustrative purposes):
Click here to view code image
device /dev/video0
input 0
loop 15
skip 20
background
resolution 320x240
set brightness=60%
set contrast=13%
top-banner
title "Warner Webcam"
timestamp "%d-%m-%Y %H:%M:%S (%Z)"
jpeg 95
save /home/pi/webcam/viewcam.jpg
palette MJPEG
Pay particular attention to the timestamp parameter; this is where you can differentiate
your captured image files as well as make them easier to browse. Note also all the options
you have to customize the webcam’s default behavior.
6. To start fswebcam using your new configuration file (assuming that the config file
resides in the root of your home directory), type
fswebcam -c ~/.fswebcam.conf
In case you were wondering, the dot before the .fswebcam.conf makes the file hidden.
This is normally the attribute that is attached to system and configuration files to keep
novices from accidentally messing with them.
7. To stop the fswebcam process, issue this command:
pkill fswebcam
8. To create a repeating operating system-level job that snaps a picture every minute, turn
to Bash shell scripting and the age-old Linux command cron. First you must create a shell
script:
sudo nano camscript.sh
Note: About cron
The cron (pronounced krahn) utility has been around since the earliest days of
Unix and Linux. Use cron to schedule tasks to run once or on a schedule. In fact the
name cron derives from the Greek word chronos, which means time. Specifically, the
tasks that cron runs are typically binary commands or shell scripts.
9. Enter the following contents into the script file:
Click here to view code image