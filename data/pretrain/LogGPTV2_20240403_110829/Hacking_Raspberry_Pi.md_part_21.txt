### Capturing Images with raspistill

To capture an image with a quality of 50% and a shutter delay of 10 seconds, use the following command:

```bash
raspistill -o image3.jpg -q 50 -t 10000
```

- The `-q` parameter controls the JPEG compression quality, ranging from 0 (lowest) to 100 (highest). Even at the highest quality setting, some pixel loss may occur due to the nature of the JPEG format.
- The `-t` parameter sets the timer value in milliseconds. A value of 10000 represents a 10-second delay.

To capture an image with custom dimensions, verbose output, a quality of 80%, and a one-second delay, use:

```bash
raspistill -v -w 1024 -h 768 -q 80 -o image4.jpg -t 1000
```

- The `-v` parameter enables verbose output, which is useful for educational and troubleshooting purposes.
- The `-w` and `-h` parameters set the width and height of the image, respectively.
- The `-t` parameter sets the delay in milliseconds.

### Verbose Output Example

Here is the verbose output of the previous `raspistill` command:

```bash
pi@raspberrypi ~ $ raspistill -v -w 1024 -h 768 -q 80 -o image4.jpg -t 1000 > output.txt
raspistill Camera App v1.2
Width 1024, Height 768, quality 80, filename image4.jpg
Time delay 1000, Raw no
Thumbnail enabled Yes, width 64, height 48, quality 35
Full resolution preview No
Preview Yes, Full screen Yes
Preview window 0,0,1024,768
Opacity 255
Sharpness 0, Contrast 0, Brightness 50
Saturation 0, ISO 400, Video Stabilisation No, Exposure compensation 0
Exposure Mode 'auto', AWB Mode 'auto', Image Effect 'none'
Metering Mode 'average', Colour Effect Enabled No with U = 128, V = 128
Rotation 0, hflip No, vflip No
ROI x 0.000000, y 0.000000, w 1.000000 h 1.000000
Camera component done
Encoder component done
Starting component connection stage
Connecting camera stills port to encoder input port
Opening output file image4.jpg
Enabling encoder output port
Starting capture 1
Finished capture 1
Closing down
Close down completed, all components disconnected, disabled and destroyed
```

The verbose output provides detailed information about the camera settings and the capture process, which can be very helpful for debugging and understanding the behavior of the `raspistill` command.

### Note: About Flash

Neither the Raspberry Pi Camera Board nor most webcams include a built-in flash. Therefore, you need to pay attention to ambient light when capturing still pictures or videos. There are discussions on the Raspberry Pi forums about accessing the GPIO pins to attach and sync a flash bulb with the camera sensor. As of now, the Omnivision Camera Board firmware includes support for a flash, but this feature has not been fully addressed by the Raspberry Pi Foundation.

### Recording Videos with raspivid

The `raspivid` command-line utility is used to capture full-motion video on the Raspberry Pi. Here is the basic syntax:

```bash
raspivid [options]
```

For example, to record a five-second video:

```bash
raspivid -o fiveseconds.h264
```

By default, the video capture is in 1080p HD (1920x1080 pixels). To make a smaller capture, such as a 15-second clip at 1024x768 resolution:

```bash
raspivid -o smallvid.h264 -t 15000 -w 1024 -h 768
```

### Note: Storage Considerations

Recording at 1080p requires approximately 17 MB per second or 115 MB per minute. If you plan to capture a significant amount of video, consider using a higher capacity SD card.

### Encoding a raspivid Video File

The captured video is in raw H.224 format, which is not immediately viewable. You can convert it to an MP4 container using `MP4Box`:

1. Install `MP4Box`:

    ```bash
    sudo apt-get install -y gpac
    ```

2. Convert the H.264 file to MP4:

    ```bash
    MP4Box -fps 30 -add smallvid.h264 smallvid.mp4
    ```

3. Play the converted video using `omxplayer` or `VLC`:

    ```bash
    omxplayer smallvid.mp4
    ```

    Or install VLC if needed:

    ```bash
    sudo apt-get install -y vlc
    vlc smallvid.mp4
    ```

### Using a Third-Party USB Webcam

If you have a compatible USB webcam, you can use it instead of the Raspberry Pi Camera Board. For example, the Logitech HD Webcam C615 works well with the Pi.

### Configuring a Third-Party USB Webcam

1. Plug in your webcam, preferably into a powered USB hub.
2. Verify that the Pi recognizes the device:

    ```bash
    lsusb
    ```

3. Edit the Motion configuration files:

    ```bash
    sudo nano /etc/default/motion
    ```

    Change `start_motion_daemon=no` to `start_motion_daemon=yes`.

    ```bash
    sudo nano /etc/motion/motion.conf
    ```

    Change `Daemon` from `Off` to `On` and `webcam_localhost` from `On` to `Off`.

4. Start the video stream:

    ```bash
    sudo service motion start
    ```

    View the live stream in a web browser at `http://localhost:8081`.

### Setting Up a Time-Lapse Webcam

To capture images at regular intervals, you can use `fswebcam`:

1. Install `fswebcam`:

    ```bash
    sudo apt-get install fswebcam
    ```

2. Create a configuration file for `fswebcam`:

    ```bash
    cd
    sudo nano .fswebcam.conf
    ```

    Add the following lines, customizing as needed:

    ```ini
    device /dev/video0
    input 0
    loop 15
    skip 20
    background
    resolution 320x240
    set brightness=60%
    set contrast=13%
    top-banner
    title "Warner Webcam"
    timestamp "%d-%m-%Y %H:%M:%S (%Z)"
    jpeg 95
    save /home/pi/webcam/viewcam.jpg
    palette MJPEG
    ```

3. Start `fswebcam` using the configuration file:

    ```bash
    fswebcam -c ~/.fswebcam.conf
    ```

4. Stop the `fswebcam` process:

    ```bash
    pkill fswebcam
    ```

5. Create a shell script to capture images every minute using `cron`:

    ```bash
    sudo nano camscript.sh
    ```

    Add the following contents:

    ```bash
    #!/bin/bash
    fswebcam -c ~/.fswebcam.conf
    ```

    Make the script executable:

    ```bash
    chmod +x camscript.sh
    ```

6. Set up a cron job to run the script every minute:

    ```bash
    crontab -e
    ```

    Add the following line:

    ```bash
    * * * * * /path/to/camscript.sh
    ```

This setup will allow you to capture time-lapse images with your Raspberry Pi and a USB webcam.