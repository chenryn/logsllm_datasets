## Page 84
的跟老男孩学Linux运维：Shel编程实战
表5-2Shell中常见的算术运算命令
运算操作符与运算命令
意义
(0)
用于整数运算的常用运算符，效率很高
let
用于整数运算，类似于“（0）”
expr
可用于整数运算，但还有很多其他的额外功能
bc
Linux下的一个计算器程序（适合整数及小数运算）
S]
用于整数运算
awk
awk既可以用于整数运算，也可以用于小数运算
declare
定义变量值和属性，-i参数可以用于定义整形变量，做运算
在下面的章节中，我们将逐一为大家讲解Shell中的各种运算符号及运算命令。
5.2双小括号“（0）”数值运算命令
5.2.1双小括号“（0）”数值运算的基础语法
双小括号“（0）”的作用是进行数值运算与数值比较，它的效率很高，用法灵活，
是企业场景运维人员经常采用的运算操作符，其操作方法见表5-3。
表5-3双小括号“（0）”的操作方法
运算操作符与运算命令
意文
(i=i+1)
此种书写方法为运算后赋值法，即将i+1的运算结果赋值给变量i。注意，不能
用“echo（(i=i+1))的形式输出表达式的值，但可以用echoS（(i-i+1)）输出其值
i=S((i+1))
可以在“（O）”前加S符，表示将表达式运算后赋值给i
((8>7&&:5=5))
可以进行比较操作，还可以加人逻辑与和逻辑或，用于条件判断
（1+Z））soqo
5.2.2双小括号“（0）”数值运算实践
范例5-1：利用“（0)”进行简单的数值计算。
[rootθoldboy~]echo$（（1+1））#7&&5==5））7成立井且5==5成立，则打印yeB。显
>then
ti
>echoyes
yes
<==固此结果输出了yeB。
提示：上面涉及的数字及变量必须为整数（整型），不能是小数（浮点数）或字符串。
后面的bc和awk命令可以用于进行小数（浮点数）运算，但一般用到的较
少，下文对此还会讲解。
范例5-5：在变量前后使用--和++特殊运算符的表达式。
[rootoldboy-1a=10
---
## Page 86
B8跟老男孩学Linux运维：Shell编程实战
[rootBoldboy-]#echo S（（a++))
<=如果a在远算符（++或--）的前面，那么在输出整个表达式时，会输出a的值，因为a为10.
所以表达式的值为10。
[rootθoldboy-]echoSa<-执行上面的表达式后，因为有a++，因北a会自增1，因此输
10
出a的值为11。
11
[rootBoldboy-]#a11
[root8oldboy-]#echos(（a--))
<==如果a在运算符（++或--）的前面，那么在输出整个表达式时，会输出a的值，因为a为11.
所以表达式的值的为11。
11
[root&oldboy-]echoSa<a=执行上面的表达式后，因为有a--，因此a会音动减1，因此
10
a为10
[root8oldboy-]a=10
[rootBoldboy-]echo Sa
10
[root8oldboy-]+echo s（（--a）)
#<如来a在运算符（+或--）的后面，那么在输出整个表达式时，先进行自增或自减计算，因为a
为10，且要自减，所以表达式的值为9。
[rootoldboy-]#echoSa＜==执行上面的表选式后，a自减1，因此a为9。
[rootoldboy-]#echos（（++a）)
<==如来a在运算符（++或--）的后面，输出整个表达式时，先进行自增或自减计算，因为a为9
且要自增1.所以输出10。
10
[root8oldboy-]#echoSa<==执行上面的表达式后，a自增1.因此a为10。
10
执行echoS（a++)）和echoS（a--)）命令输出整个表达式时，输出的值即为a的值，
表达式执行完毕后，会对a进行++、--的运算，面执行cchoS（++a）和echoS（--a)）命
令输出整个表达式时，会先对a进行++、--的运算，然后再输出表达式的值，即为a运
算后的值。
提示：有关++、--运算的记忆方法：
变量a在运算符之前，输出表达式的值为a，然后a自增或自减：变量a在运
算符之后，输出表达式会先自增或自减，表达式的值就是自增或自减后a的值。
如果实在理解不了这里的++和--，跳过就可以了，不会影响读者学好
Linux运维，在工作中，使用它们前先测试好结果即可。
范例5-6：通过“（0）”运算后赋值给变量。
[rootoldboy-]myvar=99
---
## Page 87
[root@oldboy -] echo $((myvar+1))
#<=“（（））”中的变量myvar首也可以加
s符号，也可以不加。
100
[rootθoldboy-]echoS（（myvar，11）<==“（（））”内都内容的两墙有儿个空格无
所调，变量和运算符号之同有无空格包无所调，可以有一个或多个，也可以没有。
100
[root@oldboy ~]# myvar=$((myvar+1))
<==还可以在“（（））”表达式前加S符号，
将表达式赋值给变量。
[rootθoldboy ~]#echo Smyvar
100
提示：在“（0）”中使用变量时可以去掉变量前的$符号。
范例5-7：包含“（0）”的各种常见运算符命令行的执行示例。
[rootθo1dboy -]#echo $（（6+2））<==加法
[rootθo1dboy-1echos（（6-2））<==减法
[root@oldboy -]echo $（（6*2））<==乘法
[rootθoldboy~]echo$（（6/2））<==除法，取商数
1.2
[rootθo1dboy-]echoS（（62））<==取模，即余数
[rootθo1dboy-]echo S（（6**2））#<==运算
36
提示：
口“（0）”表达式在命令行执行时不需要加$符号，直接使用（（6%2））形式即可，
但是如果需要输出，就要加S符，例如：echo$（6%2））。
口“（（)）”里的所有字符之间没有空格、有一个或多个空格都不会影响结果。
范例5-8：各种“（O）”运算的Shell脚本示例。
[rooteoldboy scripts]#cat test.sh
+1/bin/bash
8=6
<==在脚本中定义a和b两个变量并分别赋值。
b=2
.（（qs-s））s=q-.ouo
<对定义的变量值进行各种将号运算，并通过表达式的形式输出，下同。
（（qs.es）)s=q.ou
echo*a+b=S(（Sa+$b）)*
echo *a/b=s((Sa/Sb))*
echo
"a**b=S((Sa**$b))*
echo *atb=S((SatSb))*
---
## Page 88
71跟老男孩学Linux运维：Shell编程实战
建议读者手动输人一遍这个脚本，并执行看看结果。这个例子很重要，后文经常会
使用到，可保留起来备用。
其执行结果如下，看看能否理解该结果：
[rootgoldboy scripts]sh test.8h
a-b=4
a+b=8
a*b=12
a/b=3
a**b=36
atb=0
范例5-9：把范例5-8脚本中的a、b两个变量通过命令行脚本传参，以实现混合运
算脚本的功能。
这是一个考察实战编程思想的综合实践考试题，将涉及前面提到的特殊位置参数变
量的知识。
提示：该范例的答题时间为5分钟，建议读者先不要看答案，思考一下。
参考答案1：
[rooteoldboyscripts]cat test.sh
+!/bin/bash
a=$1
<=直接把特殊位置参数变量S1赋值给a
b=$2
2<==并且把特殊位置参数变量S2赋值给b，这样，脚本传参的内容就会赋值给a和D。
.(（qs-e）)s=q-.o
.(（qs+es）)s=q+e,oqoe
.(（qses）)s=q.oq
echo*a/b=s（（Sa/Sb))*
.（（qs.））s=q...oq
执行结果如下：
[rooteoldboy scripts]#sh test.sh62
a-b=4
a+bu8
a*b=12
a/b=3
a**b=36
atb=0
[rooteoldboy scripts]sh test.sh 105
a-b=5
a+b=15
a*b=50
a/b=2
a**b-100000
atb-0
---
## Page 89
第5章变量的数值计算实践7
使用脚本传参的好处是可以进行各种数字间的运算，不像前一个脚本，因为是直接
定义变量的，所以只能做6和2这两个数字的运算，也就是说，使用传参，可以让脚本
更具备通用性。
参考答案2°：
1/bin/bash
echo*a-b=s（（$1-$2））·
echo*a+b=S（（s1+$2））*
.（（s.s））=q.ou
.（（zs/s））s=q/e.oq
.（（ss））s=q.ou
echo*ab=s（（$1$2））*
老男孩点评：这个方法虽然可以实现同样的功能，但是对原脚本的改动过大，不过，
可以看出，该同学对编程思想已有一定的领悟，只是仍需进一步提高。
范例5-10：实现输人2个数进行加、减、乘、除功能的计算器。
此题超过了本书当前已学的知识范围，读者可以在学完本书后再回来查看此题的解
答方案。
参考答案1：本解答方案利用了read命令的读人功能，并对读人的内容是否为整数，
传人的符号是否符合加、减、乘、除之一做了判断。
add,subtract,multiply and dividebyyubing2013-07-13
#!/bin/bash
print_usage() (
<==定义-个函数，名字为print_uage。
printf *Please enter an integer\n*
<==打印符合脚本要求的提示信息。
exit1<==以返器值1选出脚本，这个在前面讲特殊进程变量时已经讲过这个返回值的
用法了。
if[-n*echo Sfirstnum|seds/[0-9]g];then
read.
<==判新是否为整数，删除读入内容的数字部分看是否为空（-n功能）。进面判断读入的内容是否为数字。
Drint_usage<u=如果上述条件变量值不为空，说明不是整数，则调用用户帮瑞函数。
（s2o2ado）s.][..（xdo）s.19[+.=].（2oedo）s.]T
*]s[*S（operators）*1=/];then＜==判新第二个输入内容操作是否为+-*/任
<==如果操作将不特合要求，则给出提示。
意运算符之一。
echo*please use （+1-1*1/)
exit2
<因为不将合要求，因业以返因值2退出脚本，表示出现错误了。
read-p*Please inputsecondnumber：·secondnun<-读入第二个要运算的数字。
fi.
if[-nechoSsecondnumlsed‘s/（0-9]/g]：then<==同第一个运算的数字，判新
是否为整数。
此方法为老男孩教育的学生实现的方法。
---
## Page 90
7跟老男孩学Linux运维：Shell编程实战
Drint_usage<==如果上述条件变量值不为空，说明不是整数，则调用用户帮助函数。
fi
echo*s（firstnum)S(operators)s（secondnum)=$((s(firstnum)s(operators)s（seco
.（（(unupu
<==上述条件都符合后，进入运算，输出运算表达式和计算结果。
执行结果如下：
[rooteoldboy scripts]sh 05_10_jisuan.sh
Please input firstnumber：6#<输入数字6。
Pleaseinput the operators：-<n输入运算将号减号。
Pleaseinput secondnumber:2<==输入数字2。
6-2=4
[rooteoldboy scripts]#sh 05_10_jisuan.sh
Please input first mumber:6
Please input the operators:·
Please input second number:3
6*3=18
Pleaseinput firat number：oldboy <==当输入非数字时，系统就会提示“请输入数字”，并
[rooteoldboy scripts]#sh 05_10_jisuan.sh
终止程序选行。
Please enter an integer
<==提示“请输入数字”。
[rootgoldboy scripts]#sh 05_10_jisuan.sh
Please input the operators:
Please input first nunber:10
<==运算符号不符合-*/之一时，也会提示，并终止程
序运行。
please use (+|-1*1/)
参考答案2：本解答方案利用了脚本命令行传参的功能，并对传参的内容是否为整
数，传入的符号是否符合加、减、乘、除之一做了判断。
[rooteoldboy scripts] cat 0s_il_jisuan.sh
1/bin/bash
add, subtract,
print_usage() (
exit1
if1S#-ne3]<==如果脚本传入的参数个数不等于3个（因为要输入两个数字及一个运算符号）。
then
Drint_uage<==则调用用户帮助函数。
fi