SCRIPT LOAD 命令接受一个Lua 脚本为参数，为该脚本在Lua 环境中创建函数，并
scripts 字典来确认校验和对应的脚本是否存在。
SCRIPT EXISTS命令接受一个或多个 SHA1校验和为参数，并通过检查lua
的脚本，或者发送 SHUTDOWN nosave 命令来让钩子关闭整个服务器。
环境。
脚本执行效果。
会将EVALSHA命令转换成等效的EVAL命令，并通过传播EVAL命令来获得相同的
行情况时，客户端可以通过向服务器发送SCRIPTKILL命令来让钩子停止正在执行
第20章Lua脚本◆343
---
## Page 348
的例子：
乱序排列的集合元素
redis> SADD alphabet a b c d e f g
以下代码展示了 SORT命令使用 ALPHA 选项，对一个包含字符串值的集合键进行排序
67
按值从小到大有序排列的列表元素
按插入顺序排列的列表元素
redis> RPUsH numbers 5 3 1 4 2
以下代码展示了SORT命令对列表键进行排序的例子：
Redis 的 SORT命令可以对列表键、集合键或者有序集合键的值进行排序。
5
(integer)
5
5）
4）
(integer) 5
"a"
"5n
"4
"4"
#1#
排
第21章
序
---
## Page 349
21.1
序，以
STORE、BY、GET 在内的所有SORT命令选项的实现原理。
"peter"、
除此之外，本章还将说明当 SORT命令同时使用多个选项时，各个不同选项的执行顺
1）"1"
以下示例展示了如何使用SORT命令对一个包含三个数字值的列表键进行排序：
这个命令可以对一个包含数字值的键key 进行排序。
SORT 
SORT命令的最简单执行形式为：
redis> SoRT numbers
(integer) 3
redis> RPUsH numbers 3 1 2
以及选项的执行顺序对排序结果所产生的影响。
本章将对 SORT命令的实现原理进行介绍，并说明包括 ASC、DESC、ALPHA、LIMIT、
以序号为权重，对有序集合中的元素进行排序
OK
redis> MsET peter_number 1 tom_number 2 jack_number 3
#按元素的分值排列
(integer)
redis> ZADD test-result 3.0 jack 3.5 peter 4.0 tom
接下来的例子使用了 SORT命令和 BY选项，
5
redis> SORT alphabet ALPHA
#排序后的集合元素
为各个元素设置序号
redis> ZRANGE test-result 0 -1
SORT 命令的实现
"jack"
"tom"
tom"
"jack"
"d"
、"tom"三个成员（member）进行排序：
3
第21章排
序345
---
## Page 350
346◆第四部分独立功能的实现
索引2，返回u.score 值为3.0 的列表项"3"。
项"1"；然后访问数组的索引1，返回u.score 值为 2.0的列表项“2"；最后访问数组的
作为排序结果返回给客户端，程序首先访问数组的索引 0，返回u.score 值为 1.0 的列表
图 21-4 所示。
序，排序后的数组项按u.score 属性的值从小到大排列，如
的u.score 属性里面，如图 21-3所示。
个 double类型的浮点数，并将这个浮点数保存在相应数组项
图 21-2 所示。
列表的各个项，
redisSortObject 结构，如图 21-1 所示。
5）遍历数组，将各个数组项的 obj指针所指向的列表项
3）遍历数组，将各个 obj指针所指向的列表项转换成一
2）遍历数组，将各个数组项的obj 指针分别指向 numbers
4）根据数组项u.score 属性的值，对数组进行数字值排
其他 SORT命令的执行步骤也和这里给出的 SORT numbers 命令的执行步骤类似。
1）创建一个和 numbers 列表长度相同的数组，该数组的每个项都是一个redis.h/
服务器执行 sORT numbers 命令的详细步骤如下：
uEn(E
redissortobject
2)"2#
redisSortobject
redissortobject
array[2]
 array[l]
 array[0]
array
array
，构成obj指针和列表项之间的一对一关系，如
u.score
u
obj
rqo
u
obj
obj
图 2l-2将 obj 指针指向列表的各个项
图21-3
设置数组项的u.score 属性
numbers 链表
numbers链表
列表而创建的数组
图 21-1命令为排序 numbers
= = = = -
redisSortobject
redisSortobject
redisSortobject
 array[2] 
 array[i]
array[0]
array
fqo
ao
u
obj
u
---
## Page 351
21.2ALPHA 选项的实现
一点。
redisSortObject 结构的方式也不同，稍后介绍 SORT命令的各种选项时我们会看到这
都是一个redisSortObject 结构，根据 SORT命令使用的选项不同，程序使用
SORT  ALPHA
通过使用ALPHA选项，SORT命令可以对包含字符申值的键进行排序：
SORT命令为每个被排序的键都创建一个与键长度相同的数组，数组的每个项
#元素在集合中是乱序存放的
redis> SADD fruits apple banana cherry
1 redissortobject;
以下是redisSortobject结构的完整定义：
(integer) 3
redisSortobject
redissortobject
redisSortobject
"banana”
"cherry"
"atddeu
array[2]
array[1]
 array[0]
union{
//权重
u；
robj *obj;
/！被排序键的值
robj *cmpobj;
// 排序带有 BY 选项的字符串值时使用
double score;
//排序数字值时使用
array
obj
Cao
obj
图 21-4排序后的数组
Stringobject
"3"
Stringobject
numbers 链表
第21章 排
"2"
序·347
---
## Page 352
348·第四部分独立功能的实现
下两个命令是完全等价的：
21.3
令的执行步骤类似。
素，第二项指向"banana"元素，第三项指向"cherry"元素，如图 21-6所示。
元素的字符串值从小到大排列：因为"apple"、"banana"、"cherry”三个字符串的大
所示。
3）根据obj 指针所指向的集合元素，对数组进行字符串排序，排序后的数组项按集合
在默认情况下，SORT命令执行升序排序，排序后的结果按值的大小从小到大排列，以
其他 SORT ALPHA 命令的执行步骤也和这里给出的 SORT fruits ALPHA命
SORT 
4）遍历数组，依次将数组项的obj指针所指向的元素返回给客户端。
2）遍历数组，将各个数组项的obj 指针分别指向fruits 集合的各个元素，如图 21-5
1）创建一个redisSortObject 结构数组，数组的长度等于 fruits 集合的大小。
服务器执行 SORTfruitsALPHA 命令的详细步骤如下：
3) "cherry"
redis> SORT fruits ALPHA
#对 fruits 键进行字符串排序
redisSortobject
redissortobject
redissortobject
ASC选项和DESC选项的实现
"aIdde.
array[0]
array[2]
array[0]
array
 array
Cao
C
obj
fqo
obj
cao
u
fqo
图21-5将obj指针指向集合的各个元素
图 21-6按集合元素进行排序后的数组
Stringobject
Stringobject
"cherry
che
1
Stringobject
Stringobject
---
## Page 353
种排序结果。以numbers列表为例：
表进行升序排序，两个命令产生的结果完全一样：
numbers 列表进行升序排序，而第二个命令则通过显式地使用 ASC 选项，对 numbers 列
结果按值的大小从大到小排列：
口 图 21-8 展示了 SORT命令在对 numbers 列表执行降序排序时所创建的数组,
口 图 21-7展示了 SORT命令在对 numbers 列表执行升序排序时所创建的数组。
因为升序对比和降序对比的结果正好相反，所以它们会产生元素排列方式正好相反的两
口而在执行降序排序时，排序算法所使用的对比函数产生降序对比结果。
口在执行升序排序时，排序算法使用的对比函数产生升序对比结果。
升序排序和降序排序都由相同的快速排序算法执行，它们之间的不同之处在于：
与升序排序相反，以下是一个对 numbers 列表进行降序排序的例子:
redis> SORT numbers AsC
redis> SORT numbers
redis> RPUSH numbers 3 1 2
以下是两个对 numbers 列表进行升序排序的例子，第一个命令根据默认设置，对
SORT  DESC
相反地，在执行 SORT命令时使用DESC 选项，可以让命令执行降序排序，让排序后的
redis> SORT numbers DEsC
9
3）
2
(integer) 3
SORT  ASC
"2"
"3"
"1*
"3"r
"2"
"1"
array
u.score
u.score
u.sco
3.0
obj
obj
1:0
obj
bre
图21-7执行升序排序的数组
Z..--..-
Stringobject
+
Stringobject
numbers 链表
Stringobject
第21章
序349
---
## Page 354
350·第四部分独立功能的实现
模式*-price，查找相应的权重键：
行了排序：
包含的某些域（feld）来作为元素的权重，对一个键进行排序。
"cherry”三个元素本身：
元素在排序之后所处的位置。
21.4
例如，
例如，在下面这个例子里面，排序 fruits 集合所使用的权重就是"apple"、"banana"、
口对于“banana”元素，查找程序返回权重键“banana-price"。
口对于“apple"元素，查找程序返回权重键"apple-price"。
3）遍历数组，根据各个数组项的 obj 指针所指向的集合元素，以及 BY 选项所给定的
2）遍历数组，将各个数组项的obj 指针分别指向 fruits 集合的各个元素，如图 21-9所示。
1）创建一个 redisSortobject 结构数组，数组的长度等于 fruits 集合的大小。
另一方面，通过使用 BY选项，SORT命令可以指定某些字符申键，或者某个哈希键所
在默认情况下，SORT命令使用被排序键包含的元素作为排序的权重，元素本身决定了
服务器执行 SORTfruits BY*-price 命令的详细步骤如下：
redis> SORT fruits BY *-price
redis> SORT fruits ALPHA
redis> SADD fruits "apple" "banana" "cherry"
其他 SORT《Key> DESC 命令的执行步骤也和这里给出的步骤类似。
"banana"
"cherry"
"apple"
BY选项的实现
，以下这个例子就使用苹果、香蕉、樱桃三种水果的价钱，对集合键fruits 进
array
u.score
obj
obj
obi