Cryptology and Information Security: Advances in Cryptol-
ogy, pages 319–333, 2009.
[3] G. Ateniese, R. Burns, R. Curtmola, J. Herring, O. Khan,
L. Kissner, Z. Peterson, and D. Song. Remote data checking
using provable data possession. ACM Transactions on Infor-
mation and System Security, 14:12:1–12:34, 2011.
[4] S. Benabbas, R. Gennaro, and Y. Vahlis. Veriﬁable Delegation
of Computation over Large Datasets. In CRYPTO, page 110,
2011.
[5] D. Boneh and X. Boyen. Short Signatures Without Random
In Advances in Cryptology—EUROCRYPT 2004,
Oracles.
pages 56–73, 2004.
[6] D. Boneh and X. Boyen. Short signatures without random
oracles and the sdh assumption in bilinear groups. J. Cryptol.,
21:149–177, 2008. ISSN 0933-2790.
[7] K. Bowers, A. Juels, and A. Oprea. Proofs of retrievability:
theory and implementation. In CCSW ’09: ACM workshop on
Cloud computing security, pages 43–54, 2009.
22.533.544.555.5Time (Sec)00.511.52010020030040050060070080090010001100KeySize (Number of group elements)81012141618202224Time (Sec)16M32M64M128M02468010020030040050060070080090010001100BlockSize (Number of group elements in one data block)128M256M512M2.533.544.555.566.5Time (Sec)BlockSize=40BlockSize=80BlockSize=160BlockSize=32000.511.522.50100200300400500600700800Number of blocks accessed in a verificationBlockSize=320BlockSize=640BlockSize=9602.533.544.555.566.5Time (Sec)BlockSize=40BlockSize=80BlockSize=160BlockSize=32000.511.522.50100200300400500600700800Number of blocks accessed in a verificationBlockSize=320BlockSize=640BlockSize=960[8] K. D. Bowers, A. Juels, and A. Oprea. HAIL: a high-
availability and integrity layer for cloud storage. In CCS ’09:
ACM conference on Computer and communications security,
pages 187–198, 2009.
[9] E.-C. Chang and J. Xu. Remote Integrity Check with Dishon-
est Storage Server. In ESORICS ’08: European Symposium
on Research in Computer Security: Computer Security, pages
223–237, 2008.
[10] R. Curtmola, O. Khan, R. Burns, and G. Ateniese. MR-PDP:
In ICDCS ’08:
Multiple-Replica Provable Data Possession.
International Conference on Distributed Computing Systems,
pages 411–420, 2008.
[11] J. Daemen and V. Rijmen. The Design of Rijndael: AES - The
Advanced Encryption Standard. 2002.
[12] Y. Deswarte, J.-J. Quisquater, and A. Sa¨ıdane. Remote In-
tegrity Checking: How to Trust Files Stored on Untrusted
In Proceeding of the Conference on Integrity and
Servers .
Internal Control in Information Systems, pages 1–11, 2003.
[13] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of Retrievability
via Hardness Ampliﬁcation. In Proceedings of the 6th The-
ory of Cryptography Conference on Theory of Cryptography,
TCC ’09, pages 109–127, 2009.
[14] Dropbox. Dropbox Forums on Data Loss Topic. http:
//forums.dropbox.com/tags.php?tag=data-loss.
[15] C. Erway, A. K¨upc¸ ¨u, C. Papamanthou, and R. Tamassia. Dy-
namic provable data possession. In CCS ’09: ACM conference
on Computer and communications security, pages 213–222,
2009.
[16] Amazon Forum.
Major Outage for Amazon S3 and
EC2. https://forums.aws.amazon.com/thread.jspa?
threadID=19714&start=15&tstart=0.
[17] GMP.
The GNU Multiple Precision Arithmetic Library.
http://www.gmplib.org/.
[18] O. Goldreich. Foundations of Cryptography: Volume 1, Basic
Tools. Cambridge University Press, New York, NY, USA,
2006. ISBN 0521035368.
[19] O. Goldreich. A Sample of Samplers - A Computational
Perspective on Sampling (survey). Electronic Colloquium on
Computational Complexity (ECCC), 4(20), 1997.
[20] Z. Hao, S. Zhong, and N. Yu. A Privacy-Preserving Remote
Data Integrity Checking Protocol with Data Dynamics and
IEEE Transactions on Knowledge and
Public Veriﬁability.
Data Engineering (Concise Paper), 23(9):1432 – 1437, 2011.
[21] A. Juels and B. Kaliski. Pors: proofs of retrievability for
In CCS ’07: ACM conference on Computer and
large ﬁles.
communications security, pages 584–597, 2007. ISBN 978-1-
59593-703-2.
[22] A. Kate, G. Zaverucha, and I. Goldberg. Constant-Size Com-
In ASI-
mitments to Polynomials and Their Applications.
ACRYPT, pages 177–194, 2010.
[23] M. Naor and G. Rothblum. The complexity of online memory
checking. J. ACM, 56:2:1–2:46, 2009.
[24] OpenSSL. OpenSSL Project. http://www.openssl.org/.
[25] I. Reed and G. Solomon. Polynomial Codes over Certain
Finite Fields. Journal of the Society for Industrial and Applied
Mathematics (SIAM), 8(2):300–304, 1960.
[26] H. Shacham and B. Waters. Compact Proofs of Retrievability.
In ASIACRYPT, pages 90–107, 2008.
[27] Business Insider. Amazon’s Cloud Crash Disaster Perma-
http://www.
nently Destroyed Many Customers’ Data.
businessinsider.com/amazon-lost-data-2011-4.
[28] C. Wang, Q. Wang, K. Ren, and W. Lou. Privacy-Preserving
Public Auditing for Data Storage Security in Cloud Comput-
ing. In IEEE INFOCOM ’10, pages 525–533, 2010.
[29] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou. Enabling
public veriﬁability and data dynamics for storage security in
cloud computing. In ESORICS’09: European conference on
Research in computer security, pages 355–370, 2009.
[30] K. Yang and X. Jia. Data storage auditing service in cloud
computing: challenges, methods and opportunities. (will ap-
pear in) Journal of World Wide Web, 2011.
[31] A. Young and M. Yung Malicious Cryptography: Exposing
Cryptovirology ISBN 0764549758
A. Security Proof
Here we provide the proof of Theorem 1.
A.1 The underlying authenticator is unforgeable
LEMMA 2. Suppose the pseudorandom function PRF is secure and
Strong Difﬁe-Hellman Assumption holds. In the proposed scheme
EPOR, the prover’s response (y, ψ, σ) is unforgeable.
The pseudorandom function can be replaced with a true random
generator function, with negligible difference, due the the standard
hybrid argument [18]. In the below proof, we just treat the output
of PRF as true randomness.
Proof : Suppose a PPT adversary A can forge a response (y(cid:48), ψ(cid:48), σ(cid:48))
such that Verify(sk, id, Chall, (y(cid:48), ψ(cid:48), σ(cid:48))) = accept. Since both
the forgery response (y(cid:48), ψ(cid:48), σ(cid:48), ) and the corresponding gen-
uine output (y, ψ, σ) which is generated by an honest prover
are accepted by the veriﬁer algorithm Verify w.r.t. the challenge
Chall = ({(i, νi) : i ∈ C}, r), the two tuples satisfy the Equa-
tion (7) (on page 6):
i∈C νiPRFseed(id(cid:107)i)) − y mod q
i∈C νiPRFseed(id(cid:107)i)) − y(cid:48)
mod q
(8)
(9)
(10)
ψ
ψα−r = gτ−1(σ−(cid:80)
(cid:48)α−r = gτ−1(σ(cid:48)−(cid:80)
(cid:19)α−r
(cid:18) ψ
Dividing Equation (8) with Equation (9), we obtain
= gτ−1(σ−σ(cid:48)) + y(cid:48)−y
ψ(cid:48)
(cid:54)= σ mod p.
Now we do a case analysis on whether σ(cid:48) is equal to σ.
Case 1: σ(cid:48)
If a computationally unbounded
adversary can ﬁnd a valid forgery response (y(cid:48), ψ(cid:48), σ(cid:48)) (cid:54)= (y, ψ, σ)
(cid:54)= σ with non-negligible probability, then it can ﬁnd the
and σ(cid:48)
value of τ from Eq (10) with non-negligible probability.
Recall that in this proof, the pseudorandom function PRF is
replaced by a true randomness generator. Thus, the secret value τ is
hidden perfectly in the authentication tags ti = PRFseed(id(cid:107)i) +
= g y(cid:48)−y mod q.
(11)
(cid:126)µ :=
νi(cid:126)xi mod p.
τ f (cid:126)mi (α) mod p. Any malicious adversary (playing the role of
Bob) cannot ﬁnd the value of τ ∈ Z∗
p after interacting with Alice
by running the scheme EPOR with probability larger than
p−1 ,
even if it is computationally unbounded. Therefore, there is no
PPT adversary that can ﬁnd a valid forgery response (y(cid:48), ψ(cid:48), σ(cid:48)) (cid:54)=
(y, ψ, σ) and σ(cid:48) (cid:54)= σ with non-negligible probability.
Case 2: σ(cid:48) = σ mod p.
below
In case 2, we rewrite the Eq (10) as
1
(cid:19)α−r
(cid:18) ψ
ψ(cid:48)
Now, we do a case analysis on whether y(cid:48) is equal to y.
Case 2.1: y(cid:48) = y mod p. The equality that y(cid:48) = y, implies
ψ(cid:48) (cid:54)= ψ, since (y(cid:48), ψ(cid:48), σ(cid:48)) (cid:54)= (y, ψ, σ) and σ(cid:48) = σ. Note that the
veriﬁer algorithm Verify accepts the forgery output (genuine output
respectively) only if ψ(cid:48) (ψ respectively) is a quadratic residue
modulo q. In the subgroup QR of quadratic residue modulo q,
all elements, except unity element 1, have multiplicative order p
modulo q. We know that ψ(cid:48)/ψ (cid:54)= 1, so the element ψ(cid:48)/ψ ∈
QRq has multiplicative order p. Thus, Equation (11) and y(cid:48) = y
mod p together imply α = r mod p. Thus adversary A can ﬁnd
(c, w = g1/(r+c) = g1/(α+c)) which is a valid solution to the
s-SDH problem6.
Case 2.2: y(cid:48) (cid:54)= y mod p. Equation (10) and y(cid:48) (cid:54)= y mod p
together imply that α (cid:54)= r mod p. In this case, adversary A
computes (c = −r, w =
mod q) as solution to
the SDH problem. Next, we will show that this solution to SDH
problem is valid.
Substituting ψ
ψ(cid:48) with(cid:0)wy(cid:48)−y mod q(cid:1) into the Equation (10),
(cid:17)1/(y(cid:48)−y)
(cid:16) ψ
ψ(cid:48)
w(y(cid:48)−y)(α−r) = gy(cid:48)−y mod q
(12)
Since y(cid:48) − y (cid:54)= 0 mod p and α − r (cid:54)= 0 mod p, their inverses
1/(y(cid:48) − y) mod p and 1/(α − r) mod p exist. Therefore, the
following equality can be derived from Equation (12):
we have
1
(y(cid:48)−y)(α−r) = g
1
w =
α−r mod q
(c = −r, w) is a valid solution to the SDH problem.
(13)
The above Equation (13) shows that the adversary A’s output
(cid:3)
Therefore, Lemma 2 is proved.
We remark that the above proof in Case 2.2 borrows ideas from
(cid:16)
gy(cid:48)−y(cid:17)
2. Secondary encoding: In a veriﬁcation, Alice (i.e. veriﬁer)
chooses a challenge (C, ν, r), where C ⊂ [0, n − 1] is a sub-
set of size (cid:96) and ν, r ∈ Zp. The cloud storage server Bob
(i.e. prover) ﬁnds all data blocks with index in set C. Let us
rename the selected data blocks (ordered by increasing block
index) as sequence ((cid:126)x0, . . . , (cid:126)x(cid:96)−1). Bob computes a vector
(cid:126)ν = (ν0, . . . , ν(cid:96)−1) and a Reed-Solomon codeword of (cid:126)xi’s:
(cid:96)−1(cid:88)
i=0
The linear homomorphism of the underlying homomorphic lin-
ear authenticator allows Bob to compute an authentication tag
σ for (cid:126)µ.
long message (cid:126)µ, to obtain a short message: y := (cid:80)s−1
3. Tertiary encoding: The third part r of the challenge (C, ν, r),
will be used for the tertiary encoding. Instead of sending ((cid:126)µ, σ)
as response to Alice like [13, 26], in our proposed scheme, Bob
will apply a Reed-Solomon encoding with parameter r on the
i=0 riµi,
where (cid:126)µ = (µ0, . . . , µs−1). A short authentication tag σy for y
can be computed from ((cid:126)µ, σ) using the idea of [22]. As a result,
only the short message-tag pair (y, σy) is sent back to Alice as
response.
We may view our tertiary encoding for input data ﬁle M in this
way: Take the selected blocks X := ((cid:126)x0, . . . , (cid:126)x(cid:96)−1) as data ﬁle.
Let the primary encoding7 w.r.t. ﬁle X be:
(cid:40)(cid:96)−1(cid:88)
(cid:41)
νi(cid:126)xi mod p : ν ∈ Zp
.
i=0
(cid:80)(cid:96)−1
y := (cid:80)s−1
In each veriﬁcation, a veriﬁer chooses a challenge (ν0, r), where
ν0 speciﬁes one block in the encoded ﬁle of X. The prover
should apply a Reed-Solomon code on the selected block (cid:126)µ :=
0(cid:126)xi mod p with parameter r to obtain a short message
i=0 riµi, where (cid:126)µ = (µ0, . . . , µs−1). In summary, the
tertiary encoding w.r.t. input data ﬁle M can be considered as the
secondary encoding w.r.t. ﬁle X.
i=0 νi
Consequently, the security of the proposed scheme can be
proved using results of [13] (Precisely, apply Lemma 6 of [13]
twice8 and then apply Lemma 7 of [13].)
the proof in Kate et al. [22].
A.2 User ﬁle can be retrieved through erasure
decoding
The proof of retrievability through erasure decoding is sketched as
below. Full proof will be provided in the full version of this paper.
As discussed in the overview in Section 2.1.3, the proposed
scheme EPOR applies three encoding schemes subsequently upon
an input data ﬁle M, using the jargon of [13]:
1. Primary encoding: In the setup, the data owner Alice applies an
error erasure encoding scheme on her data ﬁle M, and obtain a
encoded ﬁle which consists of n data blocks { (cid:126)mi ∈ Zs
p : i ∈
[0, n − 1]}.
6 From the input of SDH problem, one can simulate scheme EPOR. Details
are saved due to space constraint.
7 This primary encoding will be computed on the ﬂy.
8 In contrast, the proof of the improved version of SW scheme in [13] only
applies Lemma 6 for one time.