##### Description of the problem
Given 2D geometry like
    var vertices = new Float32Array( [-1,0, 0,1, 1,0, 0,-1, -1,0] );
    var geometry = new THREE.BufferGeometry();
    geometry.addAttribute( "position", new THREE.BufferAttribute( vertices, 2 ) );
I get the following console error (via `render` -> `projectObject` ->
`intersectsObject`):
    THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.
I've only started playing with three.js today so I may be doing something
derpy, but it looks like the problem is that `computeBoundingSphere` assumes 3
components per vertex and so unconditionally calls
    position.getZ( i )
and that method returns
    this.array[ index * this.itemSize + 2 ];
So each 2-component primitive uses a spurious `z` from the following
primitive's `x`, and the last one falls off the end and gets `NaN`.
It doesn't seem to affect rendering and could presumably be avoided by setting
the bounding sphere manually, but I'm guessing this wasn't intentional.
Fiddle demonstrating console error, dev is the same.
##### Three.js version
  * Dev
  * r87
  * ...
##### Browser
  * All of them
  * Chrome
  * Firefox
  * Internet Explorer
##### OS
  * All of them
  * Windows
  * macOS
  * Linux
  * Android
  * iOS
##### Hardware (graphics card, VR Device, ...)
Intel HD Graphics 3000