0x00000720    3 23           sym._init
0x00000750    1 6            sym.imp.errx
0x00000760    1 6            sym.imp.ioctl
0x00000770    1 6            sym.imp.close
0x00000780    1 6            sym.imp.read
0x00000790    1 6            sym.imp.signal
0x000007a0    1 6            sym.imp.fprintf
0x000007b0    1 6            sym.imp.err
0x000007c0    1 6            sym.imp.open
0x000007d0    1 6            sym.imp.atoi
0x000007e0    1 6            sym.imp.exit
0x000007f0    1 6            fcn.000007f0
0x00000800    1 43           entry0
0x00000830    4 50   -> 40   sym.deregister_tm_clones
0x00000870    4 66   -> 57   sym.register_tm_clones
0x000008c0    5 58   -> 51   sym.__do_global_dtors_aux
0x00000900    1 10           entry1.init
0x0000090a    4 191          sym.handle_sigterm
0x000009c9   13 311          main
0x00000b00    3 101  -> 92   sym.__libc_csu_init
0x00000b70    1 2            sym.__libc_csu_fini
0x00000b74    1 9            sym._fini
[0x00000800]> s sym.main
[0x000009c9]> VV
```
The two important parts of the main function are:
```assembly
0x000009d8      488d352bffff.  lea rsi, [sym.handle_sigterm] ; 0x90a
0x000009df      bf0f000000     mov edi, 0xf
0x000009e4      e8a7fdffff     call sym.imp.signal         ; void signal(int sig, void *func)
```
... which sets `handle_sigterm` as `sigterm` handler, and:
```assembly
0x00000a32      488d3de20100.  lea rdi, str.dev_console    ; 0xc1b ; "dev/console"
0x00000a39      b800000000     mov eax, 0
0x00000a3e      e87dfdffff     call sym.imp.open           ; int open(const char *path, int oflag)
0x00000a43      89052f062000   mov dword obj.device, eax   ; [0x201078:4]=-1
```
... which opens `dev/console` (notice no leading slash) as `obj.device`.
Now, to `handle_sigterm`:
```assembly
[0x0000090a]> pdf
/ (fcn) sym.handle_sigterm 191
|   sym.handle_sigterm (int arg1);
|           ; var int local_404h @ rbp-0x404
|           ; var int local_400h @ rbp-0x400
|           ; arg int arg1 @ rdi
|           ; DATA XREF from main (0x9d8)