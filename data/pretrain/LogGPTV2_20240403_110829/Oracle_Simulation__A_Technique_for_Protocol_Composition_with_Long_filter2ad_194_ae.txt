= Pρs,ρr,ρO{D[AO
ρs = v}
Applying once more the Lemma 10, there is a machine AO
s. t., for every c ∈ {0, 1}(cid:63),
Q
Pρs,ρr,ρO{DO,OP ,OQ(ρr, 1η) = c | [[n]]η
ρs = v}
= Pρs,ρr,ρO{D[AO
ρs = v}
P(cid:107)Q(Mf , ρr1, θ, 1η, m) as the machine that behaves as AO
P (Mf , ρr1,P , θP , 1η, m)
We deﬁne AO
(resp. AO
Q(Mf , ρr1,Q, θQ, m)) if m is a message supposed to be handled by P (resp. by Q)
(use of action determinism) Then the result is appended to θP (resp. θQ). This assumes (this
is an invariant) that θ can be split into θP and θQ.
Q]O(ρr, 1η) = c | [[n]]η
P ][AO
We note that D[AO
P ][AO
Q]O = D[AO
P(cid:107)Q]O. Then we use Lemma 11 to conclude.
22
Alternative notions of simulatability We discuss here some variation on our notion of
simulatability. First, let us note that our notion of simulatability assumes that models are
preﬁxed. As demonstrated previously this is necessary in order to get an achievable notion of
simulatability. We will therefore not consider models that are not preﬁxed. We may consider
variants of simulatability, depending on the order of the quantiﬁers and sharing of randomness
between simulator and distinguisher. We deﬁne simulatability as the existence of a simulator
that works for all distinguishers. In other words our ordering of quantiﬁer is:
∃AO(ρr1)∀D(ρr2)
In a preﬁxed model, we believe that switching the quantiﬁers lead to the same notion:
∃AO(ρr1)∀D(ρr2) ⇔ ∀D(ρr2)∃AO(ρr1)
We provide no proof, but the intuition is that there exists a “universal” distinguisher, namely
the PTOM D, which performs any possible queries with uniform probability. Now, consid-
ering any other distinguisher D(cid:48), as the simulator AO for D has to provide the exact same
distribution as the protocol for each query of D, as D performs all possible queries (with very
small probability), AO will also be a correct simulator for D(cid:48).
Another alternative is to allow the simulator and the distinguisher to share the same
randomness. Then, ∃AO(ρr)∀D(ρr) seems to provide an unachievable deﬁnition. Indeed, if
the simulator is not allowed to use private randomness while the protocol is, the simulator
cannot mimic the probabilistic behavior of the protocol.
The last possibility however seems to oﬀer an alternative deﬁnition for simulatability:
∀D(ρr)∃AO(ρr)
This seems to be a weaker deﬁnition than ours as the choices of the simulator can depend on
the ones of the distinguisher. It may simplify (slightly) the proofs for the main theorem, but
it would create issues for the unbounded replication as it would break uniformity of reductions
(since the runtime of the simulator may now depend on the environment it is running in).
3.2 Generic Oracles for Tagged Protocols
In order for our deﬁnition of simulatability to be useful, the design of oracles is a key point.
They need to be:
1. generic/simple, yet powerful enough so that protocols can be easily shown to be simu-
latable,
2. restrictive enough so that proving protocols in the presence of oracles is doable.
We provide here with examples of such oracles, namely generic tagged oracles for signature,
that will be parameterized by arbitrary functions, together with security properties that are
still true in the presence of tagged oracles.
In practice, protocols that use some shared secrets use tags, for instance string preﬁxes,
to ensure that messages meant for one of the protocol cannot be confused with messages
meant for the other one. These tags can ensure what is called “domain separation” of the two
protocols, ensuring that the messages obtained from one cannot interfere with the security of
the second protocol. These tags can be explicit, for instance by adding a ﬁxed constant to
23
the messages, or implicit, where each message of a protocol depend on some fresh randomness
that can be used to deﬁne some kind of session identiﬁer.
We deﬁne generic oracles for decryption and signatures, parameterized by an abstract
tagging function T and a secret key sk, that allow to perform a cryptographic operation with
the key sk, on any message m satisfying T (m). T can then simply check the presence of a
preﬁx, or realize some implicit tagging, checking that the message depends on the randomness
used by a speciﬁc session.
After deﬁning those generic oracles, we deﬁne generic axioms, parameterized by T , that
allow to perform proofs against attackers with access to the oracle. The generic axiom for
signatures (or any other primitive) are implied by the classical cryptographic axioms.
We see tagging as a boolean function T computable in polynomial time over the inter-
pretation of messages. For instance, if the messages of protocol P are all preﬁxed with the
identiﬁer idP , T is expressed as T (m) := ∃x.m = (cid:104)idP , x(cid:105). In a real life protocol, idP could
for instance contain the name and version of the protocol.
Intuitively tagged oracles produce the signature of any properly tagged message and allow
to simulate P .
T,sk
T,sk
With these oracles, an immediate consequence of the composition Theorems found in
Section 4 is the classical result that if two protocols tag their messages diﬀerently, they can be
safely composed [28]. Note that as our tag checking function is an arbitrary boolean function:
tagging can be implicit, as illustrated in our applications in Section 6.
As an example, we provide two oracles, one for encryption and one for signing, that allow
to simulate any protocol that only produces messages that are well tagged for T .
Deﬁnition 14. Given a name sk and a tagging function T , we deﬁne the generic signing
oracle Osign
and the generic decryption oracle Odec
as follows:
Osign
T,sk (m) := if T (m) then
Odec
T,sk(m) := if T (dec(m, sk)) then
output(dec(m, sk))
output(sign(m, sk))
Any well-tagged protocol according to T , i.e., a protocol that only decrypts or signs well
tagged messages, will be simulatable using the previous oracles. Hence we meet the goal 1
stated at the beginning of this section, as this can be checked syntactically on a protocol. We
provide, as an example, the conditions for a tagged signature.
Example 3.3. Any protocol P whose signatures are all of the form if T (t) then sign(t, sk)
for some term t (that does not use sk) is immediately νsk.P Osign
Indeed,
informally, all internal values of the protocol except sk can be picked by the simulator from
its own randomness, while all terms using sk can be obtained by calls to the tagged signing
oracle, as all signed terms in P are correctly tagged. Let us emphasize that the simulation
holds for any speciﬁc value of sk, as the distribution of outputs is the same, whether it is the
simulator that draws the internal names of P , except sk, or P itself.
-simulatable.
T,sk
As we need to perform cryptographic proofs in the presence of oracles, it is useful to
deﬁne security properties that cannot be broken by attackers with access to these oracles
(without having to consider the speciﬁc calls made to these oracles). The games deﬁning
these properties slightly diﬀer from the classical security games. Consider the example of
24
signatures and the usual EUF-CMA game. If the attacker is, in addition, equipped with an
oracle O that signs tagged messages, they immediately win the EUF-CMA game, “forging” a
signature by a simple call to O. We thus deﬁne a tagged unforgeability game (T-EUF-CMA),
derived from the EUF-CMA game, where the adversary wins the game only if they are able
to produce the signature of a message that is not tagged.
Deﬁnition 15. A signature scheme (Sign, Vrfy) is T-EUF-CMA secure for oracle O and
interpretation of keys Ask if, for any PTOM A, the game described in Figure 3 returns true
with probability (over ρr, ρs, ρO) negligible in η.
Game EUF-CMAΣ,A
List ← []
(pk, sk) ← ([[pk]]ρs, [[sk]]ρs)
(m, σ) ← AO(ρs,ρO),Sign(pk, η, ρr)
Return ¬T (m) ∧ Vrfy(pk, m, σ) ∧ m (cid:54)∈ List
Oracle Sign(m):
List ← (m : List)
σ ← Sign(sk, m)
Return σ
T,sk(η, ρr, ρs, ρO):
Figure 3: Game for Tagged Unforgeability (T-EUF-CMA)
The main goal of the previous deﬁnition is to allow us to prove protocols in the presence
of oracles (hence composed with simulated ones), reaching the goal 2 stated at the beginning
of the section.
More precisely, one can, for instance, simply design a classical game based proof, reducing
the security of the protocol to the security of the T-EUF-CMA game rather than the classical
EUF-CMA game. This reasoning is valid as EUF-CMA implies T-EUF-CMA even in the
presence of the corresponding oracle.
Proposition 16. If a signature scheme (Sign, Vrfy) is EUF-CMA secure for keys given by
Ask, then (Sign, Vrfy) is T-EUF-CMA secure for the oracle Osign
T,sk and the interpretation of
keys Ask.
Remark that the base assumptions made about the cryptographic primitives are classi-
cal ones, and thus the ﬁnal proof of the composed protocol only depends on some classical
cryptographic hypotheses.
4 Main Composition Theorems
We distinguish between two complementary cases. First, Theorem 2 covers protocols composed
in a way where they do not share states besides the shared secrets (e.g., parallel composition
of diﬀerent protocols using the same master secret key). Second, Theorem 4 covers protocols
passing states from one to the other (e.g., a key exchange passing an ephemeral key to a
secure channel protocol). We ﬁnally extend these composition results to self-composition, i.e.,
proving the security of multiple sessions from the security of a single one or the security of a
protocol lopping on itself, for instance a key renewal protocol.
4.1 Composition without State Passing
Essentially, if two protocols P, Q are indistinguishable, they are still indistinguishable when
running in any simulatable context. The context must be simulatable for any ﬁxed values
25
of the shared names of P, Q and the context. The context can contain parallel or sequential
composition as illustrated by the following example.
Example 4.1. Let P, Q, R, S be protocols and O an oracle. Let n = N (P(cid:107)Q) ∩ N (R(cid:107)S). If
P ∼=O Q and νn.R(cid:107)S is O-simulatable, then some applications of Theorem 2 can yield
1. P(cid:107)R ∼=O Q(cid:107)R
2. R; P ∼=O R; Q
3. (R; P )(cid:107)S ∼=O (R; Q)(cid:107)S
We generalize the previous example to any simulatable context and to n protocols. For
n] a context, i.e., a protocol built using the syntax
, viewed as elementary processes. C[P1, . . . , Pn] is the
any integer n, we denote by C[_
of protocols and distinct symbols _
i
protocol in which each hole _i is replaced with Pi.
Example 4.2. In the three examples of Example 4.1, in order to apply the next theorem, we
respectively use as contexts
1, . . . , _
1
1)(cid:107)S.
1(cid:107)R
1] := _
1] := R; _
1] := (R; _
• C[_
• C[_
• C[_
In this ﬁrst Theorem, no values (e.g., ephemeral keys) are passed from the context to the
protocols. In particular, the protocols do not have free variables which may be bound by the
context.
Theorem 2. Given a cryptographic library Mf and an oracle O, let P1, . . . , Pn, Q1, . . . , Qn
be protocols and C[_1, . . . , _n] be a context such that all their channels are disjoint, 0 some
constant, n a sequence of names and c1, . . . , cn fresh channel names. If
1. N (C) ∩ N (P1, . . . , Pn, Q1, . . . , Qn) ⊆ n
2. νn.C[out(c1, 0), . . . , out(cn, 0)] is O-simulatable
3. P1(cid:107) . . .(cid:107)Pn
∼=O Q1(cid:107) . . .(cid:107)Qn
Then
C[P1, . . . , Pn] ∼=O C[Q1, . . . , Qn]
Speciﬁcally3, there exists a polynomial pS (independent of C) such that, if pC is the polynomial
bound on the runtime of the simulator for C, we have,
AdvC[P1,...,Pn]∼=OC[Q1,...,Qn](t)
≤ AdvP1(cid:107)...(cid:107)Pn∼=OQ1(cid:107)...(cid:107)Qn
pS
(cid:16)
(cid:0)t, n,|C|, pC(t)(cid:1)(cid:17)
3We provide, in this Theorem and the following ones, explicit advantages, as our constructions do not
directly allow for unbounded replication. This will later be used to ensure that the advantage of the adversary
only grows polynomially with respect to the number of sessions.
26
Note that the bound we obtain for the reduction is polynomial in the running time of
the context. We denote by C the protocol C in which each _i is replaced with out(ci, 0).0,
Intuitively, C abstracts out the com-
where ci is a channel name and 0 is a public value.
ponents Pi, only revealing which Pi is running at any time. The intuition behind the proof
∼=O C(cid:107)Q1(cid:107) . . .(cid:107)Qn
of the Theorem is then as follows. First, we show that C(cid:107)P1(cid:107) . . .(cid:107)Pn
implies C[P1, . . . , Pn] ∼=O C[Q1, . . . , Qn]. This is done by a reduction, where we mainly
have to handle the scheduling, which is possible thanks to the information leaked by C, and
the action determinism of the protocols. In a sense, this means that indistinguishability for
protocols in parallel implies indistinguishability for any scheduling of those protocols. Sec-
ondly, by simulating C thanks to Proposition 7, the two hypothesis of the Theorem imply
∼=O C(cid:107)Q1(cid:107) . . .(cid:107)Qn. The second part is where our notion of simulatability
C(cid:107)P1(cid:107) . . .(cid:107)Pn
comes into play, and where it is essential to deal carefully with the shared secrets.
For our latter results, we must actually generalize slightly this Theorem. A use case is for
instance when we want to prove that P(cid:107)Q ∼= P(cid:107)P implies that ifbthenP elseQ ∼= P for some
boolean condition b. In this case, we actually need to rename the channels used by P and Q
in the second protocol, so that both P and Q uses the same channels. We thus introduce a
renaming on channels σ that allows us to compose components in an arbitrary way.
The generalized version of the Theorem is as follows.
Theorem 3. Let C[_1, . . . , _n] be a context. Let P1, . . . , Pn, Q1, . . . , Qn be protocols, and let
σ : C(P1, . . . , Pn) (cid:55)→ C such that C(cid:107)P1(cid:107) . . .(cid:107)Pn, C(cid:107)Q1(cid:107) . . .(cid:107)Qn, C[P1σ, . . . , Pnσ], C[Q1σ, . . . , Qnσ]
are protocols. Given a cryptographic library Mf , an oracle O, if
1. n ⊇ N (C) ∩ N (P1, . . . , Pn, Q1, . . . , Qn)
2. νn.C is O-simulatable
3. P1(cid:107) . . .(cid:107)Pn
∼=O Q1(cid:107) . . .(cid:107)Qn
Then
AdvC[P1σ,...,Pnσ]∼=OC[Q1σ,...,Qnσ](t) ≤ AdvP1(cid:107)...(cid:107)Pn∼=OQ1(cid:107)...(cid:107)Qn
Proof. Let A be an attacker against
C[P1σ, . . . , Pnσ] ∼=O C[Q1σ, . . . , Qnσ].
In the scheduling part, we ﬁrst build an attacker against
∼=O C(cid:107)Q1(cid:107) . . .(cid:107)Qn.
We then remove the context C through the O-simulatability.
C(cid:107)P1(cid:107) . . .(cid:107)Pn
27
Speciﬁcally, there exists a polynomial pS (independent of C) such that, if pC is the polynomial
bound on the runtime of the simulator for C, we have,
C[P1σ, . . . , Pnσ] ∼=O C[Q1σ, . . . , Qnσ]
(cid:16)
(cid:0)t, n,|C|,|σ|, pC(t)(cid:1)(cid:17)
pS
Scheduling part Let us construct BO,OC ,OR1 ,...,ORn with either for every i, Ri = Pi, or,
for every i, Ri = Qi. BO,OC ,OR1 ,...,ORn initially sets variables c1, . . . , cn to 0 (intuitively, ci
records which processes have been triggered) and sets x to the empty list. It then simulates
AO,OC[R1σ,...,Rnσ] but, each interaction with OC[R1σ,...,Rnσ] and the corresponding request (c, m)
is replaced with:
• if there exist i such that ci = 1 and c ∈ C(Riσ) then
with (cσ−1, m)
– query ORi
– if ORi
C1[_
sequential composition: an error message disables the continuation).
n] =
i; C2], it adds to x the channels C(C2). (This corresponds to the semantics of
returns ⊥, then, if contexts C1 and C2 are such that C[_
1, . . . , _
– else the answer (c(cid:48), m(cid:48)) is changed (c(cid:48)σ, m(cid:48)) (and the simulation goes on)
• else if c ∈ C(C) and c /∈ x then
with (c, m)
– query OC
– if OC
– else continue with the reply of OC
answers (cid:62) on channel γi, set ci = 1
This new attacker is basically simply handling the scheduling of the protocols, using the
signals raised in the context to synchronize everything. The condition that there exists i such
that ci = 1 and c ∈ C(Ri) is always satisﬁed by a unique i, otherwise C[P1σ, . . . , Pnσ] or
C[Q1σ, . . . , Qnσ] would not be well formed.
The execution time of B then only depends on the number of channels in C, the size of
the channel substitution σ, the number of protocols n in addition to the cost of simulating
such that the runtime of B is bounded
A. Hence if t is the runtime of A, there exists pS1
(uniformly in C, P1, . . . , Pn, Q1, . . . Qn) by pS1(n, t,|C|,|σ|):
AdvC[P1,...,Pn]∼=C[Q1,...,Qn]
AO
(t) ≤ AdvP1(cid:107)...(cid:107)Pn∼=Q1(cid:107)...(cid:107)Qn
BO,O
C
(pS1(t, n,|C|,|σ|))
Simulatability Now, with the fact that νn.C is O-simulatable, we have a simulator AO
such that, thanks to Lemma 10, B[AO
]O,OR behaves exactly as BO,OC ,OR. We have, for pC
the polynomial bound on the runtime of AC
C
C
AdvP1(cid:107)...(cid:107)Pn∼=Q1(cid:107)...(cid:107)Qn
BO,O
C
and ﬁnally,
, by Deﬁnition 5,
(t) ≤ AdvP1(cid:107)...(cid:107)Pn∼=Q1(cid:107)...(cid:107)Qn
B[AO
]O
C
(q(pC(t) + t))
AO
≤ AdvP1(cid:107)...(cid:107)Pn∼=Q1(cid:107)...(cid:107)Qn
(q(pC ◦ pS1(n, t,|C|,|σ|) + pS1(n, t,|C|,|σ|)))
(t)
AdvC[P1σ,...,Pnσ]∼=C[Q1σ,...,Qnσ]