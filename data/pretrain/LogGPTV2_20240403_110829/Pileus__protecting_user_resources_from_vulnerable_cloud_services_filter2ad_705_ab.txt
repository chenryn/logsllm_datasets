### 4. PILEUS DESIGN

#### 4.1 Pileus Overview
Based on the issues highlighted in Section 2.2, we have identified the following security objectives for the Pileus design:

- **Minimize Permissions**: Restrict event handler permissions to only those necessary for executing the specific operation, typically the permissions of the user requesting the operation.
- **Minimize Security Decisions**: Limit security decisions to only those cloud services that are trusted by the users to manage their data security.
- **Eliminate Dependence on Untrusted Nodes**: Ensure that a user’s data security does not depend on cloud nodes that the user does not trust. Additionally, when performing an operation, a user should delegate their trust to the node with the least likelihood of compromise.

To achieve these goals, we leverage the following insights:
1. **On-Demand Cloud Services**: We can spawn cloud services on demand as event handlers with only the necessary permissions for the specific command. This approach was proposed in the Asbestos system [15].
2. **Decentralized Security Principle**: Researchers have proposed the decentralized security principle [4], which states that the security of a principal must not depend on any part of the system that it does not trust. Pileus targets this goal by selecting nodes most capable of enforcing the user’s security policy and preventing untrusted nodes from tampering with the user’s data security.
3. **Decentralized Information Flow Control (DIFC)**: DIFC enables access control that explicitly expresses a subject’s (e.g., event handler) authority over security decisions as ownerships (see Section 3). Pileus leverages this insight to restrict security decisions to only event handlers trusted by the user to manage their data security.

Pileus implements user operations as follows, as shown in Figure 3:
1. **Operation Submission and Validation**: When a user submits an operation to the cloud, the Pileus initiator validates the user’s identity and computes the access control requirements for executing the operation (Section 4.3).
2. **Event Handler Execution**: Each user operation is executed as a set of on-demand event handlers corresponding to the cloud services needed to complete the operation. The Pileus initiator submits requests to the Pileus ownership registry (OR) to select nodes that satisfy the cloud security policy and minimize the risk of attack from other users (Section 4.4).
3. **Secure Enforcement**: Each node enforces DIFC policies securely to govern the execution of all event handlers. When a node receives a request to spawn an event handler, it validates that it has been approved to run the specific event handler by obtaining an authority token from the OR. After completing the execution, the node no longer needs the authority to access user data (Section 4.5).

The remainder of this section details the key design tasks for building the Pileus system:
- **Spawn Protocol** (Section 4.2): Determines how to distribute the authority to enforce DIFC policies over every event handler while preventing unauthorized access to user data.
- **Restricting Security Decisions** (Section 4.3): Best effort methods to restrict the event handlers that may make security decisions.
- **Node Selection** (Section 4.4): Methods to select nodes that satisfy a cloud security policy while minimizing risk.
- **Authority Revocation** (Section 4.5): Enabling individual cloud nodes to revoke authority from their delegatees.

#### Security Model
In Pileus, we assume the trustworthiness of two global services:
- **Pileus Initiator**: Authenticates users and computes access control requirements for their operations.
- **Pileus Ownership Registry (OR)**: Manages the authority distribution.

These services are relatively static and simple, and we expect them to be fully trusted by any user in the cloud. We also trust the cloud vendor at the organizational level.

Each cloud node runs a Pileus daemon and a DIFC kernel. Users trust these services on any cloud nodes running their cloud services. However, we do not assume mutual trust between enforcement mechanisms on different cloud nodes; individual cloud nodes may be under the complete control of an adversary. Therefore, the Trusted Computing Base (TCB) of a cloud user includes the globally trusted services and the local enforcement mechanisms to which the user has delegated their authority. The attacks we aim to block are exemplified in Section 2.1, including confused deputy attacks and privilege escalation through kernel vulnerabilities.

Pileus mitigates adversarial cloud services and nodes by enforcing the decentralized security principle: a user’s data security does not depend on any components of the cloud platform that are not part of her TCB.

#### 4.2 Pileus Spawn Protocol
The execution of a user operation in Pileus is implemented by spawning a sequence of event handlers for each program necessary to complete the operation. The security of operation execution is governed by the spawn protocol, as shown in Figure 4(a).

In the spawn protocol, a cloud node wishing to spawn an event handler on another cloud node (the parent node) presents evidence of its authority over a user operation (an authority token) and the program to be spawned to the Pileus ownership registry (OR). The OR completes the spawn protocol by choosing a target node to execute the specified event handler and producing evidence that the target node can act on behalf of the user operation (i.e., access user data and make further spawn requests).

The spawn protocol aims to prevent:
1. **Unauthorized Access**: Nodes lacking a user’s authority from spawning event handlers that may access that user’s data.
2. **Policy Violations**: Nodes failing to satisfy a cloud security policy from being selected as target nodes or given the authority to execute the user’s handler.

In Pileus, authority over a user’s operation is distributed to cloud nodes as authority tokens, \( t = \{own, n, auth, sig\} \), where:
- **own**: DIFC ownerships describing the authority of the token, usually the user’s DIFC label.
- **n**: The node for which the token applies.
- **auth**: Conditions under which an event handler may obtain ownerships for the operation, called ownership authorizations (Section 4.3), to control how ownerships may be used in the execution of the operation.
- **sig**: An OR signature over the first three elements that certifies the token.

When an OR grants an authority token to a target node, it implies that the user trusts the node to protect their data security requirements (i.e., enforce their DIFC policy) for the execution of the operation. Each cloud node runs a Pileus daemon that obtains, propagates, and revokes (Section 4.5) authority tokens for each node.

The OR produces authority tokens for a target node only if the distribution of a user’s trust to that node complies with a cloud security policy. Such policies could include:
- **Conflict-of-Interest Policies**: Prevent mutually distrustful users from running handlers on the same node.
- **Information Flow Policies**: Prevent handlers from being deployed on nodes that ran privileged handlers on behalf of other users.
- **Cardinality Policies**: Prevent the use of nodes that have run too many handlers or handlers on behalf of too many users.

Figure 4(a) illustrates how an event handler dynamically spawns another event handler. When a handler \( p \) needs to spawn another event handler, its request (event) is proxied by its Pileus daemon \( D_p \) (Step 1). \( D_p \) sends the spawn request to the OR (Step 2), specifying the authority token \( t \) it would like to delegate. The OR checks its ownership graph to see if \( D_p \) holds the user’s ownership. If so, the OR selects a target node using the spawn scheduling algorithm (Section 4.4) and updates its ownership graph to mark the ownership delegation. It produces a new authority token for the target node and returns a reference to the new authority token and the target node identity to \( D_p \) (Step 3).

Assume the Pileus daemon running on the target node is \( D_q \). \( D_p \) then sends \( p \)'s event, \( q \)'s security label (inherited from \( p \)), and the authority token reference to \( D_q \) (Step 4). \( D_q \) queries the OR to retrieve the authority token created for it (Steps 5 and 6). It validates if the authority token is sufficient to create \( q \)'s label. If so, \( D_q \) launches \( q \) with the specified label and may or may not delegate ownerships to \( q \) depending on whether \( q \) meets the ownership authorizations specified in the authority token (Step 7). As \( q \) runs, the Pileus kernel and other Pileus enforcement mechanisms on \( q \)'s node ensure that all \( q \)'s data accesses comply with the DIFC policy.

This spawn protocol satisfies the expected security properties:
1. **Prevent Unauthorized Access**: A parent node lacking a user’s authority cannot spawn event handlers that may access that user’s data.
2. **Compliance with Cloud Security Policy**: No node that fails to satisfy a cloud security policy will obtain an authority token for that user’s operation.

As an optimization, the parent node can cache a set of approved nodes or reuse nodes from previous spawn requests for that operation. In this case, the parent node can submit an event and its authority token in a spawn request to a target node optimistically to reduce messaging. The target node will still only be allowed with the user’s authority if the OR provides an authority token for that user to the target node. The spawn request from the parent node must be signed to enable the OR to verify the source and include a nonce for replay protection.

#### 4.3 Restricting Security Decisions
In Pileus, security decisions, such as declassification and endorsement of cloud objects, are localized to certain event handlers that a cloud user trusts to manage their data security. For example, Figure 2(b) shows that a volume declassifier (e.g., Alice-Declassifier) is trusted by Alice to remove secrets before releasing the volume to the public. Since event handlers are dynamically spawned, one way for a trusted event handler to obtain ownership is by inheriting the ownership from its parent (e.g., Alice-Volume). However, this defeats the purpose of DIFC, as we want to localize the authority to make security decisions to only the event handlers the user trusts. Other event handlers are confined so that they cannot violate the user’s data security either inadvertently or intentionally.

Therefore, Pileus needs a mechanism to authorize the invocation of event handlers with user ownerships. This problem is analogous to the setuid problem in UNIX systems, where a process runs with the permissions of the file owner rather than the user who invoked the process.