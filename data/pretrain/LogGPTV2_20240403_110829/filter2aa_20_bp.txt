用户登录时创建令牌
在用户登录成功的时候，创建令牌并保存到 Cookie 中。Cookie 的 Expires 属性可以设置为 1 周左右，令牌的值使用伪随机数。最好同时设置 HttpOnly 属性，另外如果是 HTTPS 连接的话，需要同时设置 secure 属性。
令牌的值只是个随机数，每个登录用户的信息，可以用下图那样的结构保存到数据库中进行管理。
令牌（唯一）
用户 ID
有效期
图 5-10 自动登录用户信息
如上图所示，通过令牌的值可以知道哪个用户在什么时间之内能进行自动登录。
令牌是在用户登录时候创建的（只有在用户选择了自动登录的时候才会创建），下面的伪代码展示了该方法的大致思路。
代码清单 自动登录令牌创建过程（伪代码）
function set_auth_token($id, $expires) {
  do {
    $token = 随机数 ;
    准备查询 ('insert into autologin values(?, ?, ?)');
    执行查询 ($token, $id, $expires);
    if ( 查询成功 )
      return $token;
  } while( 数据重复错误 );
  die(' 访问数据库错误 ');
}
$timeout = 7 * 24 * 60 * 60;  // 认证的有效期（1 周）
$expires = time() + $timeout;  // 认证的有效期
$token = set_auth_token($id, $expires);  // 设置令牌
setcookie('token', $token, $expires);  // 将令牌的值保存到 Cookie
set_auth_token
 方法用来生成令牌，输入参数为用户 ID 和令牌的有效期间，生成令牌的值后将这些信息保存到数据库中，并返回生成的令牌值给调用函数。如果生成令牌值的过程中发生了值重复问题，则需要继续尝试直到生成不重复的令牌值为止。
在上面的示例代码里最后，也展示了如何调用生成令牌函数。这里将表示自动登录的有效期参数设为一周后调用 set_auth_token
 ，并将返回的令牌保存到了 Cookie。
判断用户的登录状态和执行自动登录
接着我们再看看如何实现判断用户是否处在登录中状态，以及如何实现自动登录。处理逻辑见下面的伪代码。
代码清单 判断用户是否已登录以及如何实现自动登录（伪代码）
function check_auth_token($token) {
  准备查询 ('select * from autologin where token = ?');
  执行查询 ($token);
  取得 $id 和有效期 ;
  if ( 不存在相应记录 )
    return false;
  if ( 有效期 
">
这段代码通过 POST 方式向执行退出操作的脚本（51-012.php）发起请求，作为预防 CSRF 的措施，同时传一个 hidden 的参数 token，token 直接使用了会话 ID 的值。
执行退出登录的处理如下所示。
代码清单 /51/51-012.php