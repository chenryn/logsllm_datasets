# Go Go Gadget Python
## Authors: Nick Waite and Furkan Caycı

### Introduction
Hardware development can be a daunting task, especially for software developers. While gadgets are fascinating, writing drivers is often challenging. This presentation aims to explore the use of Python as a rapid prototyping tool for developing hardware drivers.

### Challenges in Writing Drivers
- **Complexity**: Typically, drivers are written in C, which requires a deep understanding of low-level interfaces.
- **Risk**: Incorrectly written drivers can easily crash your system.
- **Simplicity**: Many devices do not require compiled drivers, especially those with low data rates, where abstraction layers like libUSB can be used.

### Is There a Way to Rapid Prototype Drivers?
- **Desired Characteristics**:
  - Fast
  - Easy
  - Fun
  - Cross-platform compatibility

### Python: A Versatile Scripting Language
- **Features**:
  - Extensive module support
  - Libraries for hardware interaction (e.g., Pyserial, Pyparallel, PyUSB)
- **Advantages**:
  - Simplifies driver development
  - Cross-platform compatibility

### Today’s Menu
1. USB
2. Serial

### The Serial Port
- **Electrical Characteristics**:
  - Full-duplex communication
  - Hardware flow control (often unused)
  - Signal levels: 0 = -3 to -15 volts, 1 = 3 to 15 volts
- **Mechanical Connectors**:
  - DB-25, DE-9
- **USB Emulation**: Often, USB devices emulate serial ports.

### Handshaking and Cables
- **Flow Control**:
  - True hardware flow control
  - Fake local loopback flow control
  - Software flow control (XON/XOFF)
  - No flow control (most common)
- **DCE/DTE Configuration**: Understanding the roles of DCE (Data Circuit-terminating Equipment) and DTE (Data Terminal Equipment).
- **Null Modem Cables**: Used for direct communication between two DTE devices.

### Serial Communication in Python
- **Ease of Use**:
  - Simple to implement
  - Some nuances to be aware of
- **Example Code**:
  ```python
  import serial
  s = serial.Serial('/dev/ttyS1', 9600)
  s.write(b"hello")
  print(s.readline())
  s.close()
  ```
- **Considerations**:
  - Timeouts
  - Flow control
  - Buffering
  - Alternating reads and writes
  - Flushing ports

### Actual Gadgets
- **Demo**:
  - Showcasing actual code
  - Sniffing serial transactions using a special cable

### USB
- **Standard Overview**:
  - Introduced in 1996 and still backward compatible
  - Universal bus for various devices
- **Relevance**:
  - Many modern gadgets use USB
  - HID-class devices are common

### USB Device Structure
- **Components**:
  - Configurations
  - Interfaces
  - Endpoints
- **Simplified View**:
  - Most real USB devices are HID-class and do not require an OS driver
  - Typical structure: 1 configuration, 1 interface, 1 or 2 endpoints

### PyUSB
- **Overview**:
  - Python wrapper for openUSB, libUSB 0.x, and libUSB 1.0
  - Autodetects the installed library
  - Best Windows compatibility with libUSB 1.0
- **Procedure**:
  1. Find the device
  2. Set the interface
  3. Read and write data
  4. Close the connection (if necessary)

### Example: USB Missile Launcher
```python
import usb.core, usb.util
usb_device = usb.core.find(idVendor=0x1941, idProduct=0x8021)
if not usb_device:
    raise usb.core.USBError('USB missile not detected')
usb_device.set_configuration()
status = usb_device.read(0x81, 8)
```

### Types of Transfers
- **Bulk/Interrupt Transfers**: For bulk data
- **Isochronous Transfers**: For time-sensitive data (not covered here)
- **Control Transfers**: For control messages and configuration

### Reverse-Engineering USB
- **Challenges**:
  - Limited documentation
  - Windows-only drivers
  - Poor quality drivers
- **Solution**:
  - Use Python to create custom drivers
  - Sniff USB traffic to understand communication

### Sniffing USB
- **Tools**:
  - Old and basic tools that output text log files
  - Python scripts for post-processing
  - Eliminate unnecessary data
  - Translate hex codes to opcodes
  - Convert hex blocks to binary files for replay attacks or editing
- **Output**: Corresponds to PyUSB function calls

### Specific Examples
- **Biopac MP35**:
  - Two-stage driver required
  - Stage 1: Cypress EZ-USB chip with soft firmware
  - Stage 2: TI DSP chip with soft firmware
  - Custom Python code for 60 different commands and multiple modes

- **Dream Cheeky USB Missile Launcher**:
  - HID-class device
  - Control motors with control transfers
  - Read limit switch status with bulk read
  - Developed a rough driver in about 30 minutes

### Recap
- **Python's Role**:
  - Facilitates fast and easy hardware control for serial and USB devices
  - Simplifies USB sniffing and reverse-engineering
- **Additional Resources**:
  - Scripts for USB sniffing and log cleanup available at: [http://www.cvorg.ece.udel.edu/](http://www.cvorg.ece.udel.edu/)

By leveraging Python, we can bridge the gap between software and hardware, making it easier to prototype and develop robust drivers.