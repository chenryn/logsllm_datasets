title:Proof-of-Stake Sidechains
author:Peter Gazi and
Aggelos Kiayias and
Dionysis Zindros
2019 IEEE Symposium on Security and Privacy
Proof-of-Stake Sidechains
Peter Gaˇzi
IOHK
Bratislava, Slovakia
PI:EMAIL
Aggelos Kiayias
University of Edinburgh
IOHK
Edinburgh, UK
PI:EMAIL
Dionysis Zindros
University of Athens
IOHK
Athens, Greece
PI:EMAIL
Abstract—Sidechains have long been heralded as the key
enabler of blockchain scalability and interoperability. However,
no modeling of the concept or a provably secure construction
has so far been attempted.
We provide the ﬁrst formal deﬁnition of what a sidechain
system is and how assets can be moved between sidechains
securely. We put forth a security deﬁnition that augments the
known transaction ledger properties of liveness and safety to hold
across multiple ledgers and enhance them with a new “ﬁrewall”
security property which safeguards each blockchain from its
sidechains,
limiting the impact of an otherwise catastrophic
sidechain failure.
We then provide a sidechain construction that is suitable
for proof-of-stake (PoS) sidechain systems. As an exemplary
concrete instantiation we present our construction for an epoch-
based PoS system consistent with Ouroboros (Crypto 2017), the
PoS blockchain protocol used in Cardano which is one of the
largest pure PoS systems by market capitalisation, and we also
comment how the construction can be adapted for other protocols
such as Ouroboros Praos (Eurocrypt 2018), Ouroboros Genesis
(CCS 2018), Snow White and Algorand. An important feature
of our construction is merged-staking that prevents “goldﬁnger”
attacks against a sidechain that is only carrying a small amount
of stake. An important technique for pegging chains that we use
in our construction is cross-chain certiﬁcation which is facilitated
by a novel cryptographic primitive we introduce called ad-hoc
threshold multisignatures (ATMS) which may be of independent
interest. We show how ATMS can be securely instantiated by
regular and aggregate digital signatures as well as succinct
arguments of knowledge such as STARKs and bulletproofs with
varying degrees of storage efﬁciency.
Index Terms—blockchain, sidechains, distributed systems
I. INTRODUCTION
Blockchain protocols and their most prominent application
so far, cryptocurrencies like Bitcoin [25], have been gaining
increasing popularity and acceptance by a wider community.
While enjoying wide adoption, there are several fundamental
open questions remaining to be resolved that
include (i)
Interoperability: How can different blockchains interoperate
and exchange assets or other data? (ii) Scalability: How can
blockchain protocols scale, especially proportionally to the
number of participating nodes? (iii) Upgradability: How can
a deployed blockchain protocol codebase evolve to support a
new functionality, or correct an implementation problem?
The main function of a blockchain protocol is to organise
application data into blocks so that a set of nodes that
evolves over time can arrive eventually to consensus about the
sequence of events that took place. The consensus component
can be achieved in a number of ways, the most popular is
using proof-of-work [14] (cf. [15], [25]), while a promising
alternative is to use proof-of-stake (cf. [4], [11], [18], [24]).
Application data typically consists of transactions indicating
some transfer of value as in the case of Bitcoin [25]. The
transfer of value can be conditioned on arbitrary predicates
called smart contracts such as, for example, in Ethereum [9],
[29].
The conditions used to validate transactions depend on
local blockchain events according to the view of each node
and they typically cannot be dependent on other blockchain
sessions. Being able to perform operations across blockchains,
for instance from a main blockchain such as Bitcoin to a
“sidechain” that has some enhanced functionality, has been
frequently considered a fundamental technology enabler in the
blockchain space.1
Sidechains,
introduced in [1], are a way for multiple
blockchains to communicate with each other and have one
react to events in the other. Sidechains can exist in two forms.
In the ﬁrst case, they are simply a mechanism for two existing
stand-alone blockchains to communicate, in which case any of
the two blockchains can be the sidechain of the other and they
are treated as equals. In the second case, the sidechain can be
a “child” of an existing blockchain, the mainchain, in that its
genesis block, the ﬁrst block of the blockchain, is somehow
seeded from the parent blockchain and the child blockchain is
meant to depend on the parent blockchain, at least during an
initial bootstrapping stage.
A sidechain system can choose to enable certain types of
interactions between the participating blockchains. The most
basic interaction is the transfer of assets from one blockchain
to another. In this application, the nature of the asset trans-
ferred is retained in that it is not transformed into a different
class of asset (this is in contrast to a related but different
concept of atomic swaps). As such, it maintains its value and
may also be transferred back. The ability to move assets back
and forth between two chains is sometimes referred to as a 2-
way peg. Provided the two chains are both secure as individual
blockchains, a secure sidechain protocol construction allows
this security to be carried on to cross-chain transfers.
A secure sidechain system could be of a great value vis-
`a-vis all three of the pressing open questions in blockchain
1See e.g., https://blockstream.com/technology/ and [1].
© 2019, Peter Gazi. Under license to IEEE.
DOI 10.1109/SP.2019.00040
139
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
systems mentioned above. Speciﬁcally:
Interoperability. There are currently hundreds of cryptocur-
rencies deployed in production. Transferring assets between
different chains requires transacting with intermediaries (such
as exchanges). Furthermore,
there is no way to securely
interface with another blockchain to react to events occurring
within it. Enabling sidechains allows blockchains of different
nature to communicate, including interfacing with the legacy
banking system which can be made available through the use
of a private ledger.
Scalability. While sidechains were not originally proposed
for scalability purposes, they can be used to off-load the load
of a blockchain in terms of transactions processed. As long
as 2-way pegs are enabled, a particular sidechain can offer
specialization by, e.g., industry, in order to avoid requiring
the mainchain to handle all the transactions occurring within
a particular economic sector. This provides a straightforward
way to “shard” blockchains, cf. [19], [23], [31].
Upgradability. A child sidechain can be created from a
parent mainchain as a means of exploring a new feature, e.g.,
in the scripting language, or the consensus mechanism without
requiring a soft, hard, or velvet fork [17], [32]. The sidechain
does not need to maintain its own separate currency, as value
can be moved between the sidechain and the mainchain at
will. If the feature of the sidechain proves to be popular, the
mainchain can eventually be abandoned by moving all assets
to the sidechain, which can become the new mainchain.
Given the beneﬁts listed above for distributed ledgers, there
is a pressing need to address the question of sidechain security
and feasibility, which so far, perhaps surprisingly, has not
received any proper formal treatment.
Our contributions.
First, we formalize the notion of
sidechains by proposing a rigorous cryptographic deﬁnition,
the ﬁrst one to the best of our knowledge. The deﬁnition
is abstract enough to be able to capture the security for
blockchains based on proof-of-work, proof-of-stake, and other
consensus mechanisms.
A critical security feature of a sidechain system that we
formalise is the ﬁrewall property in which a catastrophic
failure in one of the chains, such as a violation of its se-
curity assumptions, does not make the other chains vulnerable
providing a sense of limited liability.2 The ﬁrewall property
formalises and generalises the concept of a blockchain ﬁrewall
which was described in high level
in [1]. Informally the
blockchain ﬁrewall suggests that no more money can ever
2To follow the analogy with the term of limited liability in corporate law,
a catastrophic sidechain failure is akin to a corporation going bankrupt and
unable to pay its debtors. In a similar fashion, a sidechain in which the security
assumptions are violated may not be able to cover all of its debtors. We give no
assurances regarding assets residing on a sidechain if its security assumptions
are broken. However, in the same way that stakeholders of a corporation are
personally protected in case of corporate bankruptcy, the mainchain is also
protected in case of sidechain security failures. Our security will guarantee
that each incoming transaction from a sidechain will always have a valid
explanation in the sidechain ledger independently of whether the underlying
security assumptions are violated or not. A simple embodiment of this rule
is that a sidechain can return to the mainchain at most as many coins as they
have been sent to the sidechain over all time.
return from the sidechain than the amount that was moved
into it. Our general ﬁrewall property allows relying on an
arbitrary deﬁnition of exactly how assets can correctly be
moved back and forth between the two chains, we capture this
by a so-called validity language. In case of failure, the ﬁrewall
ensures that transfers from the sidechain into the mainchain are
rejected unless there exists a (not necessarily unique) plausible
history of events on the sidechain that could, in case the
sidechain was still secure, cause the particular transfers to take
place.
Second, we outline a concrete exemplary construction for
sidechains for proof-of-stake blockchains. For conciseness
our construction is described with respect to a generic PoS
blockchain consistent with the Ouroboros protocol [18] that
underlies the Cardano blockchain, which is currently one of
the largest pure PoS blockchains by market capitalisation,3
nevertheless we also discuss how to modify our construction
to operate for Ouroboros Praos [11], Ouroboros Genesis [2],
Snow White [5] and Algorand [24].
We prove our construction secure using standard cryp-
tographic assumptions. We show that our construction (i)
supports safe cross-chain value transfers when the security as-
sumptions of both chains are satisﬁed, namely that a majority
of honest stake exists in both chains, and (ii) in case of a one-
sided failure, maintains the ﬁrewall property, thus containing
the damage to the chains whose security conditions have been
violated.
A critical consideration in a sidechain construction is
safeguarding a new sidechain in its initial “bootstrapping”
stage against a “goldﬁnger” type of attack [20]. Our con-
struction features a mechanism we call merged-staking that
allows mainchain stakeholders who have signalled sidechain
awareness to create sidechain blocks even without moving
stake to the sidechain. In this way, sidechain security can be
maintained assuming honest stake majority among the entities
that have signaled sidechain awareness that, especially in the
bootstrapping stage, are expected to be a large superset of the
set of stakeholders that maintain assets in the sidechain.
Our techniques can be used to facilitate various forms of 2-
way peggings between two chains. As an illustrative example
we focus on a parrent-child mainchain-sidechain conﬁguration
where sidechain nodes follow also the mainchain (what we
call direct observation) while mainchain nodes need to be
able to receive cryptographically certiﬁed signals from the
sidechain maintainers, taking advantage of the proof-of-stake
nature of the underlying protocol. This is achieved by having
mainchain nodes maintain sufﬁcient information about
the
sidechain that allows them to authenticate a small subset of
sidechain stakeholders that is sufﬁcient to reliably represent the
view of a stakeholder majority on the sidechain. This piece of
information is updated in regular intervals to account for stake
shifting on the sidechain. Exploiting this, each withdrawal
transaction from the sidechain to the mainchain is signed
by this small subset of sidechain stakeholders. To minimise
3See https://coinmarketcap.com.
140
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:41 UTC from IEEE Xplore.  Restrictions apply. 
overheads we batch this authentication information and all the
withdrawal transactions from the sidechain in a single message
that will be prepared once per “epoch.” We will refer to this
signaling as cross-chain certiﬁcation.
In greater detail, adopting some terminology from [18],
the sidechain certiﬁcate is constructed by obtaining signatures
from the set of so-called slot leaders of the last Θ(k) slots
of the previous epoch, where k is the security parameter.
Subsequently, these signatures will be combined together with
all necessary information to convince the mainchain nodes
(that do not have access to the sidechain) that the sidechain
certiﬁcate is valid. We abstract the notion of this trust transition
into a new cryptographic primitive called ad-hoc threshold
multisignatures (ATMS) that we implement in three distinct
ways. The ﬁrst one simply concatenates signatures of elected
slot leaders. While secure, the disadvantage of this imple-
mentation is that the size of the sidechain certiﬁcate is Θ(k)
signatures. An improvement can be achieved by employing
multisignatures and Merkle-tree hashing for veriﬁcation key
aggregation; using this we can drop the sidechain-certiﬁcate
size to Θ(r) signatures where r slot leaders do not participate
in its generation; in the optimistic case r (cid:2) k and thus this
scheme can be a signiﬁcant improvement in practice. Finally,
we show that STARKs and bulletproofs [3], [8] can be used to
bring down the size of the certiﬁcate to be optimally succinct
in the random oracle model. We observe that in the case of
an active sidechain (e.g., one that returns assets at least once
per epoch) our construction with succinct sidechain certiﬁcates
has optimal storage requirements in the mainchain.
Related work.
Sidechains were ﬁrst proposed as a high
level concept in [1]. Notable proposed implementations of the
concept are given in [21], [27]. In these works, no formal proof
of security is provided and their performance is sometimes
akin to maintaining the whole blockchain within the sidechain,
limiting any potential scalability gains. There have been sev-
eral attempts to create various cross-chain transfer mechanisms
including Polkadot [30], Cosmos [7], Blockstream’s Liquid
[12] and Interledger [28]. These constructions differ in various
aspects from our work including in that they focus on proof-of-
work or private (Byzantine) blockchains, require federations,
are not decentralized and — in all cases — lack a formal
security model and analysis. Threshold multi-signatures were
considered before, e.g., [22], without the ad-hoc characteristic
we consider here. A related primitive that has been consid-
ered as potentially useful for enabling proof-of-work (PoW)
sidechains (rather than PoS ones) is a (non-interactive) proof
of proof-of-work [16], [17]; nevertheless, these works do not
give a formal security deﬁnition for sidechains, nor provide
a complete sidechain construction. We reiterate that while we
focus on PoS, our deﬁnitions and model are fully relevant for
the PoW setting as well.
II. PRELIMINARIES
A. Our Model
both synchronous and semi-synchronous communication; as
well as both semi-adaptive and fully adaptive corruptions.
1) Protocol Execution: We divide time into discrete units
called slots. Players are equipped with (roughly) synchronized
clocks that indicate the current slot: we assume that any clock
drift is subsumed in the slot length. Each slot slr is indexed
by an integer r ∈ {1, 2, . . .}. We consider a UC-style [10]
execution of a protocol Π, involving an environment Z, a
number of parties Pi, functionalities that these parties can
access while running the protocol (such as the DDiﬀuse used
for communication, described below), and an adversary A.
All these entities are interactive algorithms. The environment
controls the execution by activating parties via inputs it
provides to them. The parties, unless corrupted, respond to
such activations by following the protocol Π and invoking the
available functionalities as needed.
2) (Semi-)Adaptive Corruptions: The adversary inﬂuences
the protocol execution by interacting with the available func-
tionalities, and by corrupting parties. The adversary can only
corrupt a party Pi if it is given permission by the environment
Z running the protocol execution (captured as a special
message from Z to A). Upon receiving permission from the
environment, the adversary corrupts Pi after a certain delay of
Λ slots, where Λ is a parameter of our model. In particular,
if Λ = 0 we talk about fully adaptive corruptions and the
corruption is immediate. The model with Λ > 0 is referred to
as allowing Λ-semi-adaptive corruptions (as opposed to the
static corruptions model, where parties can only be corrupted
before the start of the execution). A corrupted party Pi
will relinquish its entire state to A; from this point on, the
adversary will be activated in place of the party Pi.
3) (Semi-)Synchronous Communication: We employ the
“Delayed Diffuse” functionality DDiﬀuseΔ given in [11] to
model (semi-)synchronous communication among the parties.
It allows each party to diffuse a message once per round, with
the guarantee that it will be delivered to all other parties in at
most Δ slots (the delay within this interval is under adversarial
control). The adversary can also read and reorder all messages
that are in transit, as well as inject new messages. We
provide a detailed description of the functionality DDiﬀuseΔ
in Appendix A for completeness.
We refer to the setting where honest parties communicate
via DDiﬀuseΔ as the Δ-semi-synchronous setting and some-
times omit Δ if it is clear from the context. The special case
of Δ = 0 is referred to as the synchronous setting.
Clearly, the above model is by itself too strong to allow us
to prove any meaningful security guarantees for the executed
protocol without further restrictions (as it, for example, does
not prevent the adversary from corrupting all the participating
parties). Therefore, in what follows, we will consider such ad-
ditional assumptions, and will only provide security guarantees
as long as such assumptions are satisﬁed. These assumptions
will be speciﬁc to the protocol in consideration, and will be
an explicit part of our statements.4
We employ the model from [11], which is in turn based
on [18] and [15]. The formalization we use below captures
4As an example, we will be assuming that a majority of a certain pool of
stake is controlled by uncorrupted parties.