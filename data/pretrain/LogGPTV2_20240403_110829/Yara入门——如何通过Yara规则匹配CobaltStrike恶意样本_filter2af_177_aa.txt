# Yara入门——如何通过Yara规则匹配CobaltStrike恶意样本
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
首先，YARA规则是VT的开发人员发布的，用于同类样本的批量检索和查杀。
通过Yara引擎和我们编写的Yara规则，可以快速对一批样本进行扫描和识别，从而找到我们希望得到的样本。
官方的github库地址：
官方文档说明：
## 0x01 Yara的安装和使用
###  如何安装Yara
Yara的安装非常简单，在Windows操作系统下，我们可以直接在yara的github库下载可执行文件到本地，配置环境变量即可用
可以看到，当前（2020-07-20）的最新版本是Yara4.0.2
这里下载yara-v3.11.0-994-win64.zip，下载到本地之后直接将压缩包中了两个exe解压并到C:\Windows目录下并分别重命名为yarac.exe和yara.exe
然后启动cmd 直接输入yara —help 即可查看yara的参数
在Mac下，可以直接使用pip工具或者brew直接安装。
我是通过brew install yara的方式直接安装的。安装完成之后，使用方式也是一样的。
###  Yara食用
现在，以官方提供的yara规则示例我们来看看yara可以做什么。  
官方给出的示例yara如下：
    rule silent_banker : banker
    {
        meta:
            description = "This is just an example"
            thread_level = 3
            in_the_wild = true
        strings:
            $a = {6A 40 68 00 30 00 00 6A 14 8D 91}
            $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}
            $c = "UVODFRYSIHLNWPEJXQZAKCBGMT"
        condition:
            $a or $b or $c
    }
首先，第一行的rule silent_banker : banker是声明该规则用于检出banker类型的样本。
meta 后面的是一些描述信息，比如规则说明、作者信息等。
strings 定义了$a $b $c 两个十六进制字符串（十六进制字符串用大括号括起来）和一个文本字符串（文本字符串直接用双引号括起来）
最后condition 规定了匹配的条件，这里写的是or，表明样本中只要匹配到了$a $b $c 三个字符串中的任意一个，那么样本就会被识别为banker
我们新建一个demo1.yara文件，然后将这部分内容复制进去。
然后在当前目录下新建一个文件夹 在该文件夹中分别存放三个文件，一个py文件，一个json文件和一个exe文件。
现在我们回到demo1.yara所在的目录，执行yara demo1.yara 111/
执行完之后，没有任何输出，根据Unix内核的无回显则运行成功原则，我们可以知道该指令已经成功执行。
而没有输出是因为我们的yara规则没有命中111文件夹下的任何文件。于是我们修改规则如下：
我们增加了一个十六进制字符串$d 所匹配的值是4D 5A。 而4D
5A是PE文件（包括exe、dll等）的文件头，也就是说一个正常的PE文件中是一定会包含4D 5A这个十六进制的数据的。
且我们在最后的condition中加入了or $d，表示如果$d条件满足，样本也可以成功识别。
demo1.yara保存之后我们重新对111文件夹下的文件进行扫描：
这里可以看到，yara规则已经成功识别到了111/svchost.exe文件命中了我们的yara特征，并且提扫描之后自动标记为silent_banker，这个silent_banker就是我们在最上面定义的检出名称。
现在我们将更多的PE文件拷贝到111文件夹下以及111文件夹下的子目录中。
然后再次对111文件夹进行扫描
这里可以看到还是只有一条结果，于是我们通过yara —hlep查看一些帮助文档：
      -t,  --tag=TAG                   print only rules tagged as TAG
      -i,  --identifier=IDENTIFIER     print only rules named IDENTIFIER
      -n,  --negate                    print only not satisfied rules (negate)
      -D,  --print-module-data         print module data
      -g,  --print-tags                print tags
      -m,  --print-meta                print metadata
      -s,  --print-strings             print matching strings
      -L,  --print-string-length       print length of matched strings
      -e,  --print-namespace           print rules' namespace
      -p,  --threads=NUMBER            use the specified NUMBER of threads to scan a directory
      -l,  --max-rules=NUMBER          abort scanning after matching a NUMBER of rules
      -d VAR=VALUE                     define external variable
      -x MODULE=FILE                   pass FILE's content as extra data to MODULE
      -a,  --timeout=SECONDS           abort scanning after the given number of SECONDS
      -k,  --stack-size=SLOTS          set maximum stack size (default=16384)
      -r,  --recursive                 recursively search directories
      -f,  --fast-scan                 fast matching mode
      -w,  --no-warnings               disable warnings
           --fail-on-warnings          fail on warnings
      -v,  --version                   show version information
      -h,  --help                      show this help and exit
这些参数很重要，我们可以翻译了之后多看，多用
    -t、 --tag=tag只打印标记为tag的规则
    -i、 --identifier=identifier只打印名为identifier的规则
    -n、 --negate只打印不满足的规则（negate）
    -D、 --打印模块数据打印模块数据
    -g、 --打印标签打印标签
    -m、 --打印元数据
    -s、 --打印字符串打印匹配的字符串
    -L、 --打印字符串长度打印匹配字符串的长度
    -e、 --打印命名空间打印规则的命名空间
    -p、 --threads=NUMBER使用指定的线程数扫描目录
    -l、 --max rules=NUMBER匹配多个规则后中止扫描
    -d VAR=值定义外部变量
    -x MODULE=文件将文件内容作为额外数据传递到模块
    -a、 --timeout=秒在给定秒数后中止扫描
    -k、 --堆栈大小=插槽设置的最大堆栈大小（默认值=16384）
    -r、 --递归递归搜索目录
    -f、 ——快速扫描快速匹配模式
    -w、 --无警告禁用警告
             --警告失败警告失败
    -v、 --版本显示版本信息
    -h、 --help显示此帮助并退出
这里可以看到 -r recursively search directories  
表示递归遍历所有子目录。  
于是我们重新运行，带上-r 参数：yara -r demo1.yara 111/
这样就可以对指定目录进行递归扫描了。
我们还可以集合-r和-m参数，在扫描时输出详细信息：
通过上面的例子，我们对Yara有了一个大概的了解，接下来我们来看一下Yara的一些更方便的特性。  
我们上面提到，Yara可以匹配文本字符串、十六进制字符串。其实除了这两种，Yara还支持正则表达式的写法。
在上面，我们已经测试了十六进制字符串的匹配。匹配的方式是扫描文件是否包含了4D
5A。这里都不能算是一条规则，因为这条规则没有意义。其实十六进制还包含了很多高级的写法，包括通配符、可变长度等。这里空讲无用，之后遇到比较好的样本再做分享。
我们来测试一下字符串的写法，我们新建一个demo2.yara，内容如下：
这条yara的规则很简单，就是扫描的文件中是否包含了if **name** == ‘ **main**
‘:这个字符串，如果有，则将其标记为python_file
然后还是对111目录进行扫描：
可以看到成功扫描到python文件。这里需要注意，我们在yara中直接写字符串的话，是区分大小写的，如果想要扫描时不区分大小写，可以加入nocase关键字，比如：
接下来我们看看yara中的正则是如何写的。  
Yara的正则其实和字符串写法很类似，并且可以用在字符串上的特性都可以用在正则表达式中。
以匹配身份证号为例，我就直接以一个非常简单粗暴的方式来匹配身份证，就是直接查看文件中是否包含了18位连续的数字（我这种匹配当然不标准，只是为了方便测试）。  
此外，我还加上了一个$peflag的标志条件，在condition的地方通过 and not 的方式过滤掉所有的PE文件。  
demo3.yara如下：
扫描结果如下：
这里出现了一个warning：demo3.yara(11): warning: $reg1 is slowing down scanning
(critical!)
提示demo3.yara规则中的$reg1这个匹配条件写的不好，会引起yara的性能下降。  
这是因为我们直接使用正则表达式瞎匹配，这样肯定是不对的，因为如果扫描一个1M或是2M的脚本文件，这个yara规则一跑，基本上就会卡死。所以在书写yara规则的时候，在可达成目的的情况下，也要考虑扫描的性能。关于yara的优化，我们在后面的实战样本中会提到。
## 0x02 CobaltStrike安装和使用
###  CobaltStrike安装
CobaltStrike的安装非常简单，只需要在本机装好JAVA环境，然后分别运行CobaltStrike的客户端和服务器端即可。  
以3.14为例，3.14版本的CobaltStrike解压后文件结构如下：
其中的teamserver就是CobaltStrike的服务器端，CobaltStrike文件就是客户端。
只需要  
./teamserver 服务器ip地址 cs密码  
即可成功启动CobaltStrike的服务器。  
然后在客户端使用./cobaltstrike 然后填写服务器的ip地址和密码即可（端口一般不变）成功登录。
4.0的结构稍微有所不同
在4.0中不再有CobaltStrike客户端文件，取而代之的是CobaltStrike.bat文件  
所以我们首先启动CobaltStrike服务器，这里的ip地址就是本机的ip地址，后面的123456是登录密码
服务器成功启动之后，我们启动客户端：
成功登录上cs客户端：
大概介绍一下CobaltStrike各个菜单的的功能：
CobaltStrike的监听器主要分为beacon和foreign，其中bacon是CobaltStrike内置的，我们使用CobaltStrike生成的payload反弹shell回来直接就可以用  
foreign是外置的，比如想通过CobaltStrike反弹到msf，就可以使用foreign
###  CobaltStrike生成马
我们可以通过上面介绍的图标快捷菜单生成木马，也可以通过Attacks菜单栏生成我们想要的木马。
我这里分别生成了beacon、foreign、HTML、powershell、VBS、office宏等cs马。接下里先分析分析这些木马尝试提取CobaltStrike特征，生成马如下（3.14）：
## 0x03 CobaltStrike样本查杀
###  Win32_PE
我们首先来看看32位的PE文件，包括exe和dll。  
为了防止样本在Windows操作系统下被误执行，我这里给所有逇样本都加上了.bin后缀，然后统计这些文件的时候可以发现，通常情况下CobaltStrike默认生成的beacon的PE马大小都在278kb到303kb的样子。红框部分的foreign马的大小却只有十多kb。
所以我们可以尝试编写第一个filter来过滤掉其他的样本。
为什么要编写filter呢，因为比如我们扫描Windows的系统目录或是一个程序目录，该目录下有上千，上万甚至上十万的文件，如果我们不写filter，那么Yara在扫描的时候将会每个文件都完整的去匹配我们写的规则，在上面的时候我们提到，yara规则是会全文扫描的，那么这样将会大大降低扫描效率，如果我们能够写一些filter过滤掉大部分的不相关样本，那么yara在扫描的时候将会只对疑似的文件进行有效的扫描而不会浪费资源。
Yara提供了文件大小的变量，标准写法为
rule FileSizeExample  
{  
condition:  
filesize > 200KB  
}
第一个条件写好之后，可以看到基本上就筛选了刚才我们看到的PE我文件，但是多了一个beacon3.ps1，没关系，我们在后面的规则中过滤掉。
现在我们随便加载两个exe到IDA中分析。
IDA加载之后，一对比发现两个马的入口点是几乎完全一样的，唯一细微的区别就是这里mov语句的参数2不同。
空格转换为汇编代码显示，可以看到样本此时默认是main函数。这里目前至少是说明CobaltStrike的两个beacon马的main函数入口点结构相同。
Ctrl + E ，然后跳转到start函数，看看两个样本的入口点是否相同：
来到start函数之后，我们可以发现两个CobaltStrike样本的入口点是完全一致的，程序入口点都是004014B0
减去基地址00400000，那么入口点应该就是偏移14B0的位置。