title:Taking a long look at QUIC: an approach for rigorous evaluation
of rapidly evolving transport protocols
author:Arash Molavi Kakhki and
Samuel Jero and
David R. Choffnes and
Cristina Nita-Rotaru and
Alan Mislove
Taking a Long Look at QUIC
An Approach for Rigorous Evaluation of Rapidly Evolving Transport Protocols
Arash Molavi Kakhki
Northeastern University
PI:EMAIL
Samuel Jero
Purdue University
PI:EMAIL
David Choffnes
Northeastern University
PI:EMAIL
Cristina Nita-Rotaru
Northeastern University
PI:EMAIL
Alan Mislove
Northeastern University
PI:EMAIL
ABSTRACT
Google’s QUIC protocol, which implements TCP-like properties at
the application layer atop a UDP transport, is now used by the vast
majority of Chrome clients accessing Google properties but has
no formal state machine specification, limited analysis, and ad-hoc
evaluations based on snapshots of the protocol implementation in
a small number of environments. Further frustrating attempts to
evaluate QUIC is the fact that the protocol is under rapid develop-
ment, with extensive rewriting of the protocol occurring over the
scale of months, making individual studies of the protocol obsolete
before publication.
Given this unique scenario, there is a need for alternative tech-
niques for understanding and evaluating QUIC when compared
with previous transport-layer protocols. First, we develop an ap-
proach that allows us to conduct analysis across multiple versions
of QUIC to understand how code changes impact protocol effec-
tiveness. Next, we instrument the source code to infer QUIC’s state
machine from execution traces. With this model, we run QUIC in
a large number of environments that include desktop and mobile,
wired and wireless environments and use the state machine to
understand differences in transport- and application-layer perfor-
mance across multiple versions of QUIC and in different environ-
ments. QUIC generally outperforms TCP, but we also identified
performance issues related to window sizes, re-ordered packets,
and multiplexing large number of small objects; further, we identify
that QUIC’s performance diminishes on mobile devices and over
cellular networks.
CCS CONCEPTS
• Networks → Transport protocols; Network measurement;
KEYWORDS
QUIC, transport-layer performance
Permission to make digital or hard copies of all or part of this work for personal or classroom use
is granted without fee provided that copies are not made or distributed for profit or commercial
advantage and that copies bear this notice and the full citation on the first page. Copyrights for
components of this work owned by others than the author(s) must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists,
requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Association for Com-
puting Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131368
ACM Reference Format:
Arash Molavi Kakhki, Samuel Jero, David Choffnes, Cristina Nita-Rotaru,
and Alan Mislove. 2017. Taking a Long Look at QUIC. In Proceedings of IMC
’17, London, United Kingdom, November 1–3, 2017, 14 pages.
https://doi.org/10.1145/3131365.3131368
1 INTRODUCTION
Transport-layer congestion control is one of the most important
elements for enabling both fair and high utilization of Internet
links shared by multiple flows. As such, new transport-layer proto-
cols typically undergo rigorous design, analysis, and evaluation—
producing public and repeatable results demonstrating a candidate
protocol’s correctness and fairness to existing protocols—before
deployment in the OS kernel at scale.
Because this process takes time, years can pass between devel-
opment of a new transport-layer protocol and its wide deployment
in operating systems. In contrast, developing an application-layer
transport (i.e., one not requiring OS kernel support) can enable rapid
evolution and innovation by requiring only changes to application
code, with the potential cost due to performance issues arising from
processing packets in userspace instead of in the kernel.
The QUIC protocol,
initially released by Google in 2013
[10], takes the latter approach by implementing reliable, high-
performance, in-order packet delivery with congestion control at
the application layer (and using UDP as the transport layer).1 Far
from just an experiment in a lab, QUIC is supported by all Google
services and the Google Chrome browser; as of 2016, more than 85%
of Chrome requests to Google servers use QUIC [36].2 In fact, given
the popularity of Google services (including search and video),
QUIC now represents a substantial fraction (estimated at 7% [26])
of all Internet traffic. While initial performance results from Google
show significant gains compared to TCP for the slowest 1% of con-
nections and for video streaming [18], there have been very few
repeatable studies measuring and explaining the performance of
QUIC compared with standard HTTP/2+TCP [17, 20, 30].
Our overarching goal is to understand the benefits and trade-
offs that QUIC provides. However, during our attempts to evaluate
QUIC, we identified several key challenges for repeatable, rigor-
ous analyses of application-layer transport protocols in general.
First, even when the protocol’s source code is publicly available, as
QUIC’s is, there may be a gap between what is publicly released
and what is deployed on Google clients (i.e., Google Chrome) and
1It also implements TLS and SPDY, as described in the next section.
2Newer versions of QUIC running on servers are incompatibile with older clients, and ISPs some-
times block QUIC as an unknown protocol. In such cases, Chrome falls back to TCP.
IMC ’17, November 1–3, 2017, London, United Kingdom
A. Molavi Kakhki et al.
servers. This requires gray-box testing and calibration to ensure
fair comparisons with code running in the wild. Second, explaining
protocol performance often requires knowing formal specifications
and state machine diagrams, which may quickly become stale due
to code evolution (if published at all). As a result, we need a way to
automatically generate protocol details from execution traces and
use them to explain observed performance differences. Third, given
that application-layer protocols encounter a potentially endless
array of execution environments in the wild, we need to carefully
select and configure experimental environments to determine the
impact of network conditions, middleboxes, server settings, and
client device configurations on end-to-end performance.
In this work, we address these challenges to properly evaluate
QUIC and make the following key contributions.
First, we identify a number of pitfalls for application-layer pro-
tocol evaluation in emulated environments and across multiple
QUIC versions. Through extensive calibration and validation, we
identify a set of configuration parameters that fairly compare QUIC,
as deployed by Google, with TCP-based alternatives.
Second, we develop a methodology that automatically generates
network traffic to QUIC- and TCP-supporting servers in a way that
enables head-to-head comparisons. Further, we instrument QUIC to
identify the root causes behind observed performance differences
and to generate inferred state machine diagrams. We make this
code (and our dataset) publicly available at http://quic.ccs.neu.edu.
Third, we conduct tests using a variety of emulated network
conditions, against our own servers and those run by Google, from
both desktop and mobile-phone clients, and using multiple histori-
cal versions of QUIC. This analysis allows us to understand how
QUIC performance evolved over time, and to determine how code
changes impact relevant metrics. In doing so, we produce the first
state machine diagrams for QUIC based on execution traces.
Our key findings are as follows.
• In the desktop environment, QUIC outperforms TCP+HTTPS
in nearly every scenario. This is due to factors that include
0-RTT connection establishment and recovering from loss
quickly—properties known to provide performance benefits.
• However, we found QUIC to be sensitive to out-of-order packet
delivery. In presence of packet re-ordering, QUIC performs
significantly worse than TCP in many scenarios. This occurs
because QUIC interprets such behavior as loss, which causes
it to send packets more slowly.
• Due to its reliance on application-layer packet processing and
encryption, we find that all of QUIC’s performance gains are
diminished on phones from 2013 and late 2014. It is likely that
even older phones will see worse performance with QUIC.
• QUIC outperforms TCP in scenarios with fluctuating band-
width. This is because QUIC’s ACK implementation eliminates
ACK ambiguity, resulting in more precise RTT and bandwidth
estimations.
• We found that when competing with TCP flows, QUIC is unfair
to TCP by consuming more than twice its fair share of the
bottleneck bandwidth.
• QUIC achieves better quality of experience for video streaming,
but only for high-resolution video.
• A TCP proxy can help TCP to shrink the performance gap with
QUIC in low latency cases and also under loss. Furthermore, an
unoptimized QUIC proxy improves performance under loss for
large objects but can hurt performance for small object sizes
due to lack of 0-RTT connection establishment.
• QUIC performance has improved since 2016 mainly due to a
change from a conservative maximum congestion window to
a much larger one.
• We identified a bug affecting the QUIC server included in
Chromium version 52 (the stable version at the time of our
experiments), where the initial congestion window and Slow
Start threshold led to poor performance compared with TCP.
2 BACKGROUND AND RELATED WORK
In this section, we provide background information on QUIC and
detail work related to our study.
2.1 Background
Google’s Quick UDP Internet Connections (QUIC) protocol is an
application-layer transport protocol that is designed to provide high
performance, reliable in-order packet delivery, and encryption [10].
The protocol was introduced in 2013, and has undergone rapid
development by Google developers. QUIC is included as a separate
module in the Chromium source; at the time of our experiments,
the latest stable version of Chrome is 60, which supports QUIC
versions up to 37. 12 versions of QUIC have been released during
our study, i.e., between September 2015 and January 2017.3
The design of QUIC is motivated largely by
QUIC motivation.
two factors. First, experimenting with and deploying new transport
layers in the OS is difficult to do quickly and at scale. On the other
hand, changing application-layer code can be done relatively easily,
particularly when client and server code are controlled by the same
entity (e.g., in the case of Google). As such, QUIC is implemented
at the application layer to allow Google to more quickly modify
and deploy new transport-layer optimizations at scale.
Second, to avoid privacy violations as well as transparent proxy-
ing and content modification by middleboxes, QUIC is encrypted
end-to-end, protecting not only the application-layer content (e.g.,
HTTP) but also the transport-layer headers.
QUIC implements several optimizations and
QUIC features.
features borrowed from existing and proposed TCP, TLS, and
HTTP/2 designs. These include:
• “0-RTT” connection establishment: Clients that have previously
communicated with a server can start a new session without
a three-way handshake, using limited state stored at clients
and servers. This shaves multiple RTTs from connection estab-
lishment, which we demonstrate to be a significant savings for
data flows that fit within a small number of packets.
• Reduced “head of line blocking”: HTTP/2 allows multiple objects
to be fetched over the same connection, using multiple streams
within a single flow. If a loss occurs in one stream when using
TCP, all streams stall while waiting for packet recovery. In
3Throughout this paper, unless stated otherwise, we use QUIC version 34, which we found to exhibit
identical performance to versions 35 and 36. Changelogs and source code analysis confirm that none
of the changes should impact protocol performance.
Taking a Long Look at QUIC
IMC ’17, November 1–3, 2017, London, United Kingdom
Test
Environments5
Root
Cause
Analysis3
✗
✗
✗
✗
✓
PLT Experiments
# of
Tested
Pages4
Emulated
Scenarios
# of
6
3
20
500†
13
12
9
10
18
100 (9)‡
Net.
type
F
F
F
F/C
F/C
Devices
Fair-
ness
Video
QoE
Packet
Reorder.
Proxy-
ing
D
D
D
D
D/M
✓
✗
✗
✗
✓
✗
✗
✗
✗
✓
✗
✗
✗
✗
✓
✗
✗
✗
✗
✓
QUIC
Version
Calib-
ration2
Megyesi [30]
Carlucci1 [17]
Biswal [16]