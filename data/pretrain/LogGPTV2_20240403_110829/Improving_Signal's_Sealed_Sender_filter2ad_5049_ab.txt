sent message, her device will display a second check mark on
her sent message to indicate that Bob’s device has received
the message (see Figure 2). If Bob’s device is online when
Alice sends her message, the delivery receipt will be sent back
immediately. We measured a median time of 1480 milliseconds
between sending a message and receiving a delivery receipt
from an online device. (See Figure 3 for CDF of times.) These
receipts cannot be disabled in Signal.
Read receipt (optional). Bob’s device will (optionally) send
a read receipt to the sender when he has viewed a normal
message, triggering a UI update on Alice’s device (see Fig-
3
PaddingText Message ReceiptTyping NotificationMessageEncrypted MessageTo: BobFrom:AliceSignal MessageEncrypted Signal MessageTo: BobPublic Ephem. KeySealed Sender Messagecould be solved by using a popular VPN or an anonymizing
proxy such as Tor [45], [19]. For the purposes of this paper, we
assume that users who wish to remain anonymous to Signal can
use such proxies (e.g. Orbot [2]) when sending sealed sender
messages (and, in our solution, when receiving messages to
ephemeral mailboxes), and we do not use network metadata
in our attack.
In terms of impact, we note that a recent study suggests as
many as 15% of mobile users already use VPNs every day [28];
this prevalence is even higher in east Asia and, presumably,
among vulnerable user populations.
III. ATTACK DESCRIPTION
We will present a kind of statistical disclosure attack
(SDA) that can be used to de-anonymize a single user’s
contacts after a chain of back-and-forth messages, each of
which is sent using sealed sender.
We ﬁrst explain how, especially in the presence of delivery
receipts, a sealed-sender messaging system can be viewed as
a kind of mix network; this observation allows for the use
of SDAs in our context and can be viewed as one of our
contributions.
Next, we detail a simple attack for our speciﬁc use-case
of sealed sender messaging, which can be viewed as a special
case of an SDA attack proposed in [40].
A. From mixnets to sealed-sender
In anonymous networking, a simple threshold mix works
as follows: When Alice wants to send a message to Bob, she
instead encrypts it and sends it to a trusted party called the
mix. Once the mix receives messages from a certain threshold
τ number of other senders, the mix decrypts their destinations,
shufﬂes them, and sends all messages out to their destinations
at once. In this way, a network attacker can observe which
users are sending messages and which are receiving message,
but cannot easily infer which pairs of individuals are directly
communicating.
The basis of SDAs, ﬁrst proposed by [14], is that the
messages sent through the mix over multiple rounds are not
independent; a user such as Alice will normally send messages
to the same associates (such as Bob) multiple times in different
rounds. In the simplest case, if Alice sends messages only to
Bob, and the other users in each round of mixing are random,
then a simple intersection attack works by ﬁnding the unique
common destination (Bob) out of all the mixes where Alice
was one of the senders.
Over the last two decades, increasingly sophisticated vari-
ants of SDAs have been proposed to incorporate more complex
mix networks [40],
infer sender-receiver connections [37],
adapt to the possibility of anonymous replies [16], and to
use more powerful techniques to discover information about
the entire network topology [17], [44]. Fundamentally, these
all follow a similar anonymous networking model, where an
attacker observes messages into and out of a mix network, and
tries to correlate senders and receivers after a large number of
observations.
At ﬁrst, it seems that the setting of sealed-sender messaging
is quite different: the server (acting as the mix) does not
Fig. 3: CDF of Delivery Receipt timing — CDF of time between a
device sending a message (to another online device) and receiving a
Delivery Receipt. The median time is 1480ms and 90% of Delivery
Receipts were received within 1909ms.
ure 2). Unlike delivery receipts, Bob can disable read receipts.
However, Alice may still send read receipts for messages she
receives from Bob. If Bob receives a read receipt but has
the feature disabled, his user interface will not display the
notiﬁcation.
Typing notiﬁcations (optional). Alice’s device will (option-
ally) send a start
typing event when Alice is entering a
message, which Bob’s device will use to show that Alice is
typing. If she does not edit the message for 3 seconds, a stop
typing event will be sent. Each sent message is accompanied by
a stop typing event to clear the receiver’s typing notiﬁcation.
Like read receipts, typing notiﬁcations can be disabled such
that the user will not send or display received notiﬁcations.
C. Threat Model
We assume that the service provider (e.g. Signal) passively
monitors messages to determine which pairs of users are com-
municating. This models either an insider threat or a service
provider compelled to perform surveillance in response to a
government request. We assume Alice and Bob have already
exchanged delivery tokens and they communicate using sealed
sender. Once initiated, we assume that Alice and Bob will
continue to communicate over time. Finally, we also assume
that many other users will be communicating concurrently
during Alice and Bob’s conversation, potentially with Alice
and/or Bob.
The service provider cannot view the contents of the
encrypted sealed sender messages, but knows the destination
user for these messages (e.g. someone sends a message to
Bob). We assume that Alice and Bob have veriﬁed their
respective keys out of band, and that the applications/devices
they are using are secure. Although the service provider
publishes the application, they typically distribute open-source
code with deterministic builds, which we assume prevents
targeting individual users.
We note that the service provider could infer a sender’s
identity from network metadata such as the IP address used to
send a sealed sender message. However, this is a problem that
4
010002000300040005000Time (ms)0.00.20.40.60.81.0CDFapply any thresholds or delays in relaying messages, and the
sender of each message is completely anonymous. Our key
observation is that, when many messages receive a quick reply,
as will be guaranteed in the presence of delivery receipts, a
sealed-sender messaging system can be modeled as a kind of
mix network:
• The recipient of a message, Bob, is more likely to send
some reply in a short time window immediately after he
receives a message: we call this time window an epoch.
• Bob’s reply to Alice is “mixed” with an unknown, arbi-
trary number of other messages (which could be either
normal messages or replies) during that epoch.
• The recipients of all messages during that epoch (follow-
ing the message Bob received), can be considered as the
message recipients out of the mix. Alice, who originally
sent a message to Bob and is expected to receive a quick
reply, will be among these recipients.
The task of our SDA, then, is to observe many such epochs
following messages to a single target user, Bob, and attempt
to discern the user Alice who is actually sending messages to
Bob.
B. Attack Overview
Before proceeding to an overview of our attack, we ﬁrst
ﬁx the terminology we will use:
Target/Bob The single user who is being monitored.
Associate/Alice Any user who sends some message(s) to the
target Bob during the attack window
Non-associate/Charlie Any other user not sending messages
to the target Bob.
Attack window The entire time frame under which the attack
takes place, necessarily spanning multiple messages sent
to the target Bob.
Target epoch A single epoch during the attack window imme-
diately following a sealed sender message to the target.
The epoch length is ﬁxed depending on how long we
should expect to see a response from the recipient.
Random epoch A single epoch during the attack window, of
the same length as a Target epoch, but chosen uniformly
at random over the attack window independently from
Bob.
As discussed above, our attack setting is that a single user,
Bob, is being targeted to discover an unknown associate Alice
who is sending messages to Bob. Our SDA variant is successful
when we can assume that Alice is more likely to appear as a
message recipient in a target epoch immediately following a
message received by Bob, than she is to appear in a random
epoch when Bob did not receive a message.
Speciﬁcally, our attack is executed as follows:
1) Create an empty table of counts; initially each user’s count
is zero.
2) Sample a target epoch. For each user that received a
message during the target epoch, increase their count in
the table by 1.
3) Sample a random epoch. For each user that received a
message during the random epoch, decrease their count
in the table by 1.
Fig. 4: Attack Overview — Our SDA variant has the service provider
(Signal) keep count of all users who receive messages in the epoch
after Bob receives a message to determine who is consistently mes-
saging at the same time as Bob is receiving a message. Additionally,
the service provider will begin an epoch at a random time to keep
track of users which are messaging independent of the associates of
Bob, and those users will be deducted from the counter. As such,
“popular” users such as Charlie will not mask Alice’s behavior.
4) Repeat steps 2 and 3 for n target and random epochs.
5) The users in the table with the highest counts are most
likely to be associates of the target.
Figure 4 gives a small example to illustrate this attack.
This is similar to the original SDA of [14], with a few of the
improvements from [40] that allow for unknown recipient and
background trafﬁc distributions, more complex mixes such as
pool mixes, and dummy trafﬁc. In our setting, this means that
we do not need to know a priori which users in the system, or
which associates of the target user, are more or less likely to
receive messages. We also do not need a guarantee that a reply
is sent during every target epoch, or that the reply is always
sent to the same associate Alice.
Essentially, our attack relies only on the assumptions that
the distribution of background noise in each target/random
epoch pair is the same, and that associates of the target are
more likely to appear in target epochs than random epochs.
Under only these assumptions, we can see that the expected
count of any non-associate, over enough samples, is zero, while
the expected count of any associate will increase linearly with
the number of samples.
Compared to existing SDAs in the literature, our attack
is more limited in scope: it does not attempt to model the
complete distribution of all connections in the system, but
merely to separate the associates from non-associates of a
single target user. We also assume that the number of target
and random epochs are the same (though this limitation would
be easy to overcome). These limitations allow our attack to be
very efﬁcient for the attacker, who just needs to update a table
for each user in each sample, and then ﬁnd the largest values
at the end to identify Bob’s (likely) associates.
Clearly the question that remains is, how large must the
number of samples n be in order for this attack to succeed? As
we will see in the next section, the limited scope of our attack
also makes it efﬁcient in this sense: in reasonable settings, our
5
Signal TrafficTo: CharlieTo: AliceEpoch 1To: FredTo: EveTo: BobTo: BobTo: JudyTo: IvanTo: DavidCounterAlice: 2Charlie: 1Dave: 1Judy: 1Henry:-1George:-1To: CharlieTo: GeorgeRandom EpochTo: HenryTo: AliceTo: CharlieEpoch 2To: Judyattack requires only a handful of epochs to identify the target’s
associates with high probability.
is ranked higher than all non-associates after n random and
target epochs is at least
IV. ATTACK EVALUATION
In this section, we evaluate our attacks from Section III
ﬁrst from a theoretical perspective, and second using a custom
simulation.
While our attack is a variant of existing statistical disclo-
sure attacks (SDAs) in the literature, the setting is slightly
different, and our goals are more modest, seeking only to de-
anonymize the contacts of a single target user.
A. Theoretical analysis of attack success
Here we provide statistical bounds to estimate the number
of epochs needed for our attack to successfully de-anonymize
one participant in a conversation. As before, say Bob is the
target of the attack, and we wish to ﬁnd which other users are
communicating with Bob.
Roughly speaking, we demonstrate that (1) all users in
conversations with Bob can be identiﬁed provided he is not in
too many other simultaneous conversations with other users,
and (2) the number of epochs needed for this de-anonymization
depends logarithmically on the total number of users. These
results hold under some regularity assumptions on communi-
cation patterns, which are most sensible for short periods of
back-and-forth messaging.
Statistical Model. Our statistical analysis relies on the follow-
ing assumptions:
1) The probability of receiving a message during any epoch
is independent of receiving a message during any other
epoch.
2) Each user u (both associates and non-associates) has a
ﬁxed probability ru of receiving a message during a
random epoch.
3) Any associate u has a ﬁxed probability tu of receiving a
message during a target epoch, where tu > ru.
4) Every non-associate u has the same probability of re-
ceiving a message during a target or random epoch, i.e.,
tu = ru.
The last assumption states that the communications of non-
associates is not correlated with the communication patterns of
Bob, which makes intuitive sense, as they are not involved in
conversations with Bob. The regularity (that these probabilities
are ﬁxed and the events are independent) is most reasonable
when considering short attack windows, during which any
user’s activity level will be relatively constant.
1 − m
c n
a
,
where ca = exp((ta−ra)2/4) > 1 is a parameter that depends
only on Alice’s probabilities ta and ra.
The proof is a relatively standard analysis based on Ho-
effding’s inequality [27], and can be found in Appendix A.
We point out a few consequences of this theorem:
• The success of the attack depends only on the target
user Bob and his sought-after associate Alice, not on the
relative activity of any other users.
• The number of epochs needed to de-anonymize Alice
with high probability scales logarithmically with the total
number of users.
• The attack succeeds most quickly when Bob is in few
other conversations (so ta is large) and Alice is commu-
nicating mostly just with Bob (so ra is small).
The following corollary, which results from solving the
inequality of Theorem 1 and applying a straightforward union
bound, gives an estimate on how many epochs are necessary
to discover all of Bob’s contacts with high probability.
Corollary 2. Let 0 < p < 1 be a desired probability
bound, and assume m total users in a messaging system, of
whom b are associates of a target user Bob, where the i’th
associate has probabilities ri, ti of appearing in a random
or target epoch respectively. Then, under the previous stated
assumptions, with probability at least p, all b associates of Bob
are correctly identiﬁed after observing
(cid:16)
(cid:17)(cid:17)
(cid:16) 1
1−p
4
mini(ti − ri)2
ln(m) + ln(b) + ln
target and random epochs.
Comparing to prior work, the closest SDA which has a
similar theoretical bound is from Danezis [14]4. That work
makes much stronger regularity assumptions than our model,
assuming essentially that (1) all epochs contain the same
number of messages (2) every target epoch contains exactly
one reply from Bob, (3) Bob receives a message from each
associate with uniform probability, and (4) all other users, and
recipients, are selected uniformly at random from all m users.