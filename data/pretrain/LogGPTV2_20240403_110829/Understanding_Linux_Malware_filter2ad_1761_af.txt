but it is often used in embedded devices with architectures that
do not support ﬂoating point operations. The second interesting
aspect is that, while in total we identiﬁed more than 200
172
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:40 UTC from IEEE Xplore.  Restrictions apply. 
different libraries, the distribution has a very long tail and it
drops very steeply. For instance, the tenth most popular library
is only used by 1% of the samples.
VI. INTRA-FAMILY VARIETY
In the previous section we described several characteristics
of Linux-based malware. For each of them, we presented
the number of samples instead of the count of families that
exhibited a given trait. This is because we noted that samples
belonging to the same family often had very different charac-
teristics, probably due to the availability of the source codes
for several classes of Linux malware.
As an example of this variety, we want to discuss the case
of a popular malware family, Tsunami, for which we have
743 samples in our dataset. Those samples are compiled for
nine different architectures, the most common being x86-64,
and the rarest being Hitachi SuperH. In total, 86% of them
are statically linked and 13% are stripped. Dynamically linked
Tsunami samples rely on different loaders, and their entropy
varies from 1.85 to 7.99. Out of the 19 samples with higher
entropy, one is packed with vanilla UPX while the other 18
use modiﬁed versions of the same algorithm.
This variability is not limited to static features. For instance,
looking at our dynamic traces we noted the use of different
persistence techniques with some samples only relying on
user-level approached and other using run-level scripts or cron
jobs for system-wide persistence. Concerning unprivileged and
privileged execution, only 15% of the Tsunami samples we
analyzed in our sandboxes tested the user privileges or got
privileges-related errors. Differences arise even in terms of
evasion: 17 samples contain code to evade the sandbox while
all the others did not include evasive functionalities.
VII. RELATED WORK
In the past two decades the security community has focused
almost exclusively on ﬁghting malware targeting Microsoft
Windows. As a result, hundreds of papers have described
techniques to analyze PE binaries [25]–[28], detecting ongoing
threats [27], [29], [30], and preventing possible infection at-
tempts [31]–[33] on Windows operating systems. The commu-
nity also developed many analysis tools for dissecting threats
related to the Windows environment, ranging from dynamic
analysis solutions [34]–[37] to dissectors for ﬁle formats used
as attack vectors [38]–[40].
With the exception of mobile malware, non-Windows ma-
licious software did not receive the same level of atten-
tion. While the hacking community developed—almost two
decades ago—interesting techniques to implement malicious
ELF ﬁles [13], [41]–[44], rootkits [45], [46], and tools to
dissect them [47]–[49], none of them has seen vast adoption.
In fact, the security industry has only recently started looking
at ELF ﬁles—mainly driven by newsworthy cases like the
Mirai botnet [50] and Shellshock [51]. Many blog posts and
papers were published for the analysis and dissection of spe-
ciﬁc families [52]–[57], but these investigations were mainly
conducted by manual reverse engineering. Recent research by
Shazhad et al. [58] and by Bai et al. [59] extracts static features
from ELF binaries to train a classiﬁer for malware detection.
Unfortunately, these works are not comprehensive, do not take
into account different architectures, or are easily evaded by
stripping a binary or by using packing.
Researchers have also started to explore dynamic analysis
for non-Windows malware only very recently. The few solu-
tions that are available at the moment support a limited number
of platforms or provide very limited analysis capabilities. For
example, Limon [60] is an analysis sandbox based on strace
(and thus easily detectable), and it only supports the analysis
of x86-ﬂavored binaries. Sysdig [61] and PayloadSecurity [62]
are affected by similar issues and they also only work for
x86 binaries. Detux [63],
instead, supports four different
architectures (i.e., x86, x86-64, ARM, and MIPS). However,
it only performs a very basic analysis by running readelf
and provides network dumps. Cuckoo sandbox [64] is another
available tool that supports the analysis of Linux samples.
However, the Cuckoo project only provides the external orches-
tration analysis framework, while the preparation of the various
sandbox images is left to the user. Last, in November 2017
VirusTotal announced the integration of the Tencent HABO
sandbox solution, which reportedly is able to analyze also
Linux-based malware [9]. Unfortunately, there is no public
report on how the system works and it currently works only
for x86 binaries.
One of the ﬁrst systematic studies of IoT malware was done
by Pa et al. [65]. In their paper, they present a Telnet honeypot
to measure the current attack trends as well as the ﬁrst sandbox
environment based on Qemu and OpenWRT called IoTBOX
for analyzing IoT malware. They showed the issue of IoT
devices exposing Telnet online and they collected few families
actively targeting this service. Similarly, Antonakakis et al. [4]
studied in detail a speciﬁc Linux malware family, the Mirai
botnet. They measure systematically the evolution and growth
of the botnet mainly from the network point of view. These
works are invaluable to the community, but only look at limited
aspects of the entire picture: the samples network behavior.
We believe that our work can complement these efforts and
provide a clearer overview of how Linux malware actually
works. Moreover, the datasets used in these previous studies
are not representative of the overall Linux malware, since they
were collected via telnet-based honeypots.
VIII. CONCLUSIONS
This paper presents the ﬁrst comprehensive study of Linux-
based malware. We document the design and implementation
of the ﬁrst analysis pipeline speciﬁcally tailored for Linux
malware, and we discuss the results of the ﬁrst large-scale em-
pirical study on how Linux malware implements its malicious
behavior. While the complexity of current Linux malware is
not very high, we have identiﬁed a number of samples already
adopting techniques borrowed from their Windows counter-
parts. We believe these insights can be the foundation for more
systematic future works in the area, which is, unfortunately,
bound to have an ever-increasing importance.
173
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:40 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] StatCounter, “Desktop Operating System Market Share Worldwide.”
http://gs.statcounter.com/os-market-share/desktop/worldwide.
[2] ZDnet,
under
googles-virustotal-puts-linux-malware-under-the-spotlight/.
puts
malware
http://www.zdnet.com/article/
“Google’s
the
VirusTotal
spotlight.”
Linux
[3] “Malware Must Die!.” http://blog.malwaremustdie.org/.
[4] Antonakakis et al., “Understanding the Mirai Botnet,” in Proceedings of
the USENIX Security Symposium, 2017.
[5] M. Sebasti´an, R. Rivera, P. Kotzias, and J. Caballero, “AVclass: A Tool
for Massive Malware Labeling,” in RAID, 2016.
[6] “radare2, a portable reversing framework.” http://www.radare.org/.
[7] D. Andriesse, A. Slowinska, and H. Bos, “Compiler-Agnostic Function
Detection in Binaries,” in IEEE European Symposium on Security and
Privacy, 2017.
[8] “SystemTap.” https://sourceware.org/systemtap/.
[9] “Malware analysis sandbox aggregation: Welcome Tencent HABO.” http:
//blog.virustotal.com/2017/11/malware-analysis-sandbox-aggregation.
html.
“Unicorn Emulator.”
https://github.com/
[10] Nguyen Anh Quynh,
unicorn-engine/unicorn.
[11] “Shodan, the world’s ﬁrst search engine for Internet-connected devices.”
https://www.shodan.io/.
[12] Z. Durumeric, E. Wustrow, and A. Halderman, “ZMap: Fast Internet-
wide Scanning and Its Security Applications,” in Proceedings of the
USENIX Security Symposium, 2013.
[13] Silvio Cesare, “Unix ELF parasites and virus.” http://vxer.org/lib/vsc01.
html.
[14] SophosLabs,
Linux/Rst-B.”
botnets-a-free-tool-and-6-years-of-linuxrst-b.
of
https://nakedsecurity.sophos.com/2008/02/13/
“Botnets,
years
tool
free
and
6
a
[15] Team TESO,
“Burneye
ELF
encryption
program.”
https:
//packetstormsecurity.com/ﬁles/30648/burneye-1.0.1-src.tar.bz2.html.
[16] elfmaster,
“ELF Packer
v0.3.”
http://www.bitlackeys.org/projects/
elfpacker.tgz.
[17] grugq and scut, “Armouring the ELF: Binary encryption on the UNIX
platform.” http://phrack.org/issues/58/5.html.
[18] R. Lyda and J. Hamrock, “Using entropy analysis to ﬁnd encrypted and
packed malware,” IEEE Security & Privacy, vol. 5, no. 2, 2007.
[19] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G. Bringas, “RAMBO:
Run-time packer Analysis with Multiple Branch Observation,” July 2016.
[20] S. Cesare and Y. Xiang, “Classiﬁcation of malware using structured
control ﬂow,” in Proceedings of the Eighth Australasian Symposium on
Parallel and Distributed Computing-Volume 107, pp. 61–70, Australian
Computer Society, Inc., 2010.
[21] R. Perdisci, A. Lanzi, and W. Lee, “Mcboost: Boosting scalability in
malware collection and analysis using statistical classiﬁcation of exe-
cutables,” in Computer Security Applications Conference, 2008. ACSAC
2008. Annual, pp. 301–310, IEEE, 2008.
[22] M. Z. Shaﬁq, S. M. Tabish, F. Mirza, and M. Farooq, “Pe-miner: Mining
information to detect malicious executables in realtime.,”
[23] M.L´eveill´e, Marc-Etienne, “Unboxing Linux/Mumblehard.” https://www.
welivesecurity.com/wp-content/uploads/2015/04/mumblehard.pdf.
[24] “OpenVZ, a container-based virtualization for Linux.” https://openvz.org/
structural
Springer.
Main Page.
[25] G. Wicherski, “pehash: A novel approach to fast malware clustering,”
in Proceedings of the 2Nd USENIX Conference on Large-scale Exploits
and Emergent Threats: Botnets, Spyware, Worms, and More, LEET’09,
2009.
[26] Ferrie, Peter and Peter, Szr, “Hunting for metamorphic.” http://vxer.org/
lib/apf39.html.
[27] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant,
“Semantics-aware malware detection,” in Proceedings of the 2005 IEEE
Symposium on Security and Privacy, SP ’05, 2005.
[28] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna, “Static disassembly
of obfuscated binaries,”
[29] S. J. Stolfo, K. Wang, and W.-J. Li, “Fileprint analysis for malware
detection,” ACM CCS WORM, 2005.
[30] D. Dagon, X. Qin, G. Gu, W. Lee, J. Grizzard, J. Levine, and H. Owen,
“Honeystat: Local worm detection using honeypots,” in RAID, vol. 4,
pp. 39–58, Springer, 2004.
[31] P. Mell, K. Kent, and J. Nusbaum, Guide to malware incident prevention
and handling. US Department of Commerce, Technology Administra-
tion, National Institute of Standards and Technology, 2005.
[32] D. Harley, U. E. Gattiker, and R. Slade, Viruses revealed. McGraw-Hill
Professional, 2001.
[33] M. E. Locasto, K. Wang, A. D. Keromytis, and S. J. Stolfo, “Flips:
Hybrid adaptive intrusion prevention,” in RAID, pp. 82–101, Springer,
2005.
[34] “malwr.” https://www.malwr.com/.
[35] “CWsandbox.” http://www.mwanalysis.org.
[36] “Anubis.” https://anubis.iseclab.org.
[37] “VirusTotal += Behavioural
2012/07/virustotal-behavioural-information.html.
Information.” http://blog.virustotal.com/
[38] “oletools - python tools to analyze OLE and MS Ofﬁce ﬁles.” https:
//www.decalage.info/python/oletools.
[39] “peepdf
-
PDF Analysis
Tool.”
http://eternal-todo.com/tools/
peepdf-pdf-analysis-tool.
[40] “oledump-py.” https://blog.didierstevens.com/programs/oledump-py/.
[41] Silvio Cesare, “Shared Library Redirection via ELF PLT Infection.” http:
//www.phrack.org/issues/56/7.html#article.
[42] Silvio Cesare,
“Runtime kernel kmem patching.” https://github.
com/BuddhaLabs/PacketStorm-Exploits/blob/master/9901-exploits/
runtime-kernel-kmem-patching.txt.
[43] Z0mbie, “Injected Evil.” http://z0mbie.daemonlab.org/infelf.html.
[44] Alexander Bartolich,
ELF Virus Writing HOWTO.”
“The
http://www.linuxsecurity.com/resource ﬁles/documentation/
virus-writing-HOWTO/ html/index.html.
[45] darkangel, “Mood-NT.” http://darkangel.antifork.org/codes/mood-nt.tgz.
[46] sd and devik, “Linux on-the-ﬂy kernel patching without LKM.” http:
//phrack.org/issues/58/7.html.
[47] Mayhem, “The Cerberus ELF Interface.” http://phrack.org/issues/61/8.
html.
[48] elfmaster, “ftrace.” https://github.com/elfmaster/ftrace.
[49] elfmaster, “ECFS.” https://github.com/elfmaster/ecfs.
[50] Nicky Woolf, “DDoS attack that disrupted internet was largest of its
kind in history, experts say.” https://www.theguardian.com/technology/
2016/oct/26/ddos-attack-dyn-mirai-botnet.
[51] Dave Lee, “Shellshock: ’Deadly serious’ new vulnerability found.” http:
//www.bbc.com/news/technology-29361794.
all.”
[52] Cathal, Mullaney and Sayali, Kulkarni, “VB2014 paper: Linux-
based Apache malware infections: biting the hand that
serves
us
https://www.virusbulletin.com/virusbulletin/2016/01/
paper-linux-based-apache-malware-infections-biting-hand-serves-us-all/.
[53] MMD, “MMD-0062-2017 - Credential harvesting by SSH Direct TCP
Forward attack via IoT botnet.” http://blog.malwaremustdie.org/2017/02/
mmd-0062-2017-ssh-direct-tcp-forward-attack.html.
[54] MMD,
shock:
mmd-0030-2015-new-elf-malware-on.html.
“MMD-0030-2015
the
ChinaZ.”
- New ELF malware
Shell-
http://blog.malwaremustdie.org/2015/01/
on
[55] MMD, “MMD-0025-2014 - ITW Infection of ELF .IptabLex and .Ipta-
bLes China DDoS bots malware.” http://blog.malwaremustdie.org/2014/
06/mmd-0025-2014-itw-infection-of-elf.html.
[56] A. Wang, R. Liang, X. Liu, Y. Zhang, K. Chen, and J. Li, An Inside
Look at IoT Malware.
[57] P. Celeda, R. Krejci, J. Vykopal, and M. Drasar, “Embedded malware-
an analysis of the chuck norris botnet,” in Computer Network Defense
(EC2ND), 2010 European Conference on, pp. 3–10, IEEE, 2010.
[58] F. Shahzad and M. Farooq, “Elf-miner: Using structural knowledge
and data mining methods to detect new (linux) malicious executables,”
Knowledge and Information Systems, 2012.
[59] J. Bai, Y. Yang, S. Mu, and Y. Ma, “Malware detection through mining
symbol table of Linux executables,” Information Technology Journal,
2013.
[60] K. Monnappa, “Automating Linux Malware Analysis Using Limon
[63] “Multiplatform Linux Sandbox.” https://detux.org/.
[64] “Cuckoo Sandbox 2.0 Release Candidate 1.” https://cuckoosandbox.org/
blog/cuckoo-sandbox-v2-rc1.
[65] Y. P. Minn, S. Suzuki, K. Yoshioka, T. Matsumoto, and C. Rossow,
“IoTPOT: Analysing the rise of IoT compromises,” in 9th USENIX
Sandbox,” Black Hat Europe 2015, 2015.
[61] “Sysdig.” https://www.sysdig.org/.
[62] PayloadSecurity,
“VxStream
payload-security.com/products/linux.
Sandbox
Linux.”
https://www.
174
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:40 UTC from IEEE Xplore.  Restrictions apply. 
Workshop on Offensive Technologies (WOOT). USENIX Association,
2015.
APPENDIX
Fig. 5. Number of imported symbols in dynamically linked samples
Fig. 2. File size distribution of ELF malware in the dataset
Fig. 3. Number of functions identiﬁed by IDA Pro in dynamically linked
samples
Fig. 6. Entropy distribution over the dataset
Fig. 4. Percentage of LOAD segments analyzed by IDA Pro
Fig. 7. Library imports for dynamically linked executables
175
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:40 UTC from IEEE Xplore.  Restrictions apply.