Certainly! Here is the optimized version of the text, with a focus on clarity, coherence, and professionalism:

---

### V. Intra-Family Variability

In the previous section, we described several characteristics of Linux-based malware. For each characteristic, we presented the number of samples rather than the count of families that exhibited a given trait. This approach was chosen because we observed that samples within the same family often displayed significant differences, likely due to the availability of source code for many types of Linux malware.

As an example of this variability, we will discuss the case of a popular malware family, Tsunami, for which we have 743 samples in our dataset. These samples are compiled for nine different architectures, with x86-64 being the most common and Hitachi SuperH being the rarest. Overall, 86% of the samples are statically linked, and 13% are stripped. The dynamically linked Tsunami samples use various loaders, and their entropy ranges from 1.85 to 7.99. Out of the 19 samples with the highest entropy, one is packed with vanilla UPX, while the other 18 use modified versions of the same algorithm.

This variability extends beyond static features. For instance, our dynamic traces reveal the use of different persistence techniques. Some samples rely solely on user-level approaches, while others use run-level scripts or cron jobs for system-wide persistence. Regarding unprivileged and privileged execution, only 15% of the Tsunami samples we analyzed in our sandboxes tested user privileges or encountered privilege-related errors. Differences also arise in terms of evasion: 17 samples contain code to evade the sandbox, while all others do not include such evasive functionalities.

### VI. Related Work

Over the past two decades, the security community has primarily focused on combating malware targeting Microsoft Windows. Consequently, numerous papers have detailed techniques for analyzing PE binaries [25]–[28], detecting ongoing threats [27], [29], [30], and preventing infection attempts [31]–[33] on Windows operating systems. Additionally, the community has developed many analysis tools for dissecting threats in the Windows environment, including dynamic analysis solutions [34]–[37] and dissectors for file formats used as attack vectors [38]–[40].

Non-Windows malicious software, with the exception of mobile malware, has not received the same level of attention. Although the hacking community developed interesting techniques for implementing malicious ELF files [13], [41]–[44], rootkits [45], [46], and tools to dissect them [47]–[49] almost two decades ago, these techniques have not seen widespread adoption. The security industry has only recently started to focus on ELF files, largely driven by high-profile cases like the Mirai botnet [50] and Shellshock [51]. Many blog posts and papers have been published for the analysis and dissection of specific families [52]–[57], but these investigations were primarily conducted through manual reverse engineering. Recent research by Shahzad et al. [58] and Bai et al. [59] extracts static features from ELF binaries to train a classifier for malware detection. However, these works are not comprehensive, do not account for different architectures, and can be easily evaded by stripping a binary or using packing.

Dynamic analysis for non-Windows malware has also only recently begun to be explored. The few available solutions support a limited number of platforms or offer very basic analysis capabilities. For example, Limon [60] is an analysis sandbox based on strace (and thus easily detectable) and supports only x86-flavored binaries. Sysdig [61] and PayloadSecurity [62] face similar limitations and work only for x86 binaries. Detux [63] supports four different architectures (x86, x86-64, ARM, and MIPS) but performs only a basic analysis by running readelf and providing network dumps. Cuckoo sandbox [64] is another tool that supports the analysis of Linux samples, but the Cuckoo project provides only the external orchestration analysis framework, leaving the preparation of sandbox images to the user. In November 2017, VirusTotal announced the integration of the Tencent HABO sandbox solution, which reportedly can analyze Linux-based malware [9]. Unfortunately, there is no public report on how the system works, and it currently supports only x86 binaries.

One of the first systematic studies of IoT malware was conducted by Pa et al. [65]. In their paper, they present a Telnet honeypot to measure current attack trends and introduce the first sandbox environment based on Qemu and OpenWRT called IoTBOX for analyzing IoT malware. They highlighted the issue of IoT devices exposing Telnet online and collected a few families actively targeting this service. Similarly, Antonakakis et al. [4] studied the Mirai botnet in detail, systematically measuring its evolution and growth from a network perspective. These works provide valuable insights but focus only on the network behavior of the samples. We believe our work can complement these efforts by providing a clearer overview of how Linux malware operates. Moreover, the datasets used in these previous studies are not representative of overall Linux malware, as they were collected via telnet-based honeypots.

### VII. Conclusions

This paper presents the first comprehensive study of Linux-based malware. We document the design and implementation of the first analysis pipeline specifically tailored for Linux malware and discuss the results of the first large-scale empirical study on how Linux malware implements its malicious behavior. While the complexity of current Linux malware is not very high, we have identified several samples adopting techniques borrowed from their Windows counterparts. We believe these insights can form the foundation for more systematic future research in this area, which, unfortunately, is bound to become increasingly important.

---

I hope this helps! Let me know if you need any further adjustments.