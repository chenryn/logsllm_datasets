# Triton and Symbolic Execution on GDB

**Presenter:** bananaappletw @ HITCON 2017/08/26

## About the Presenter
- **Name:** 陈威伯 (bananaappletw)
- **Education:** Master, National Chiao Tung University
- **Affiliations:**
  - Software Quality Laboratory
  - Bamboofox Member
  - Vice President, NCTUCSC
- **Specializations:**
  - Symbolic Execution
  - Binary Exploitation
- **Previous Talks:**
  - HITCON CMT 2015

## Outline
1. Why Symbolic Execution?
2. What is Symbolic Execution?
3. Introduction to Triton
4. SymGDB Overview

## Why Symbolic Execution?

### Traditional Analysis Methods
- **Static Analysis:**
  - Tools: `objdump`, `IDA Pro`
- **Dynamic Analysis:**
  - Tools: `GDB`, `ltrace`, `strace`

### Symbolic Execution
- **Definition:**
  - Symbolic execution is a method for analyzing a program to determine which inputs cause each part of the program to execute.
- **Types:**
  - **System-level:**
    - S2E (https://github.com/dslab-epfl/s2e)
  - **User-level:**
    - Angr (http://angr.io/)
    - Triton (https://triton.quarkslab.com/)
  - **Code-based:**
    - KLEE (http://klee.github.io/)

## Symbolic Execution Example
- **Condition:**
  - `Z == 12` → `fail()`
  - Otherwise, "OK"

## Introduction to Triton

### Overview
- **Website:** https://triton.quarkslab.com/
- **Description:**
  - A dynamic binary analysis framework written in C++.
  - Developed by Jonathan Salwan.
  - Python bindings available.
- **Components:**
  - Symbolic Execution Engine
  - Tracer
  - AST Representations
  - SMT Solver Interface

### Symbolic Execution Engine
- **Functionality:**
  - Maintains:
    - Table of symbolic register states.
    - Map of symbolic memory states.
    - Global set of all symbolic references.

### Example
- **Initial State:**
  - `eax = UNSET`, `None`
- **Step 1:**
  - `eax = φ1`
  - `mov eax, 0` → `{φ1=0}`
- **Step 2:**
  - `eax = φ2`
  - `inc eax` → `{φ1=0, φ2=φ1+1}`
- **Step 3:**
  - `eax = φ3`
  - `add eax, 5` → `{φ1=0, φ2=φ1+1, φ3=φ2+5}`

### Triton Tracer
- **Features:**
  - Provides current opcode executed.
  - Captures state context (registers and memory).
  - Translates control flow into AST representations.
  - Supports Pin tracer.

### AST Representations
- **Conversion:**
  - Converts x86 and x86-64 instruction set semantics into AST representations.
  - Expressions are in SSA form.
- **Example:**
  - `add rax, rdx`
  - Expression: `ref!41 = (bvadd ((_ extract 63 0) ref!40) ((_ extract 63 0) ref!39))`
  - `ref!41`: New expression for RAX.
  - `ref!40`: Previous expression for RAX.
  - `ref!39`: Previous expression for RDX.

### Static Single Assignment (SSA) Form
- **Purpose:**
  - Each variable is assigned exactly once.
- **Example:**
  - Original:
    - `y := 1`
    - `y := 2`
    - `x := y`
  - In SSA form:
    - `y1 := 1`
    - `y2 := 2`
    - `x1 := y2`

### Symbolic Variables
- **Concept:**
  - Imagine symbolic variables as infections.
- **Example:**
  - `convertRegisterToSymbolicVariable(REG.ECX)`
  - `isRegisterSymbolized(REG.ECX) == True`
  - `test ecx, ecx` (ZF = ECX & ECX = ECX)
  - `je +7` (jump to `nop` if ZF=1)
  - `mov edx, 0x64`
  - `nop`

### SMT Solver Interface
- **Example:**
  - Defcamp 2015 r100
  - Program requires inputting a password.
  - Password length can be up to 255 characters.

### Process
- **Steps:**
  - Set architecture.
  - Load segments into Triton.
  - Define fake stack (RBP and RSP).
  - Symbolize user input.
  - Start processing opcodes.
  - Set constraints at specific points.
  - Get symbolic expression and solve it.

### Challenges with Triton
- **Complexity:**
  - The entire process is too complicated.
  - High learning cost.
  - Simplification possible with debugger support.

## SymGDB

### Overview
- **Repository:** https://github.com/SQLab/symgdb
- **Description:**
  - Symbolic execution support for GDB.
  - Combined with:
    - Triton
    - GDB Python API
    - Symbolic environment (symbolize `argv`)

### Design and Implementation
- **GDB Python API:**
  - Documentation: https://sourceware.org/gdb/onlinedocs/gdb/Python-API.html
  - Functionalities:
    - Register GDB command.
    - Register event handler (e.g., breakpoint).
    - Execute GDB command and get output.
    - Read, write, search memory.

### Supported Commands and System Structure
- **Flow:**
  - GDB Python API
  - Failed and successful methods
  - SymGDB system structure
  - Implementation of system internals
  - Relationship between SymGDB classes
  - Supported commands
  - Symbolic execution process in GDB
  - Symbolic environment (symbolize `argv`)
  - Debug tips

This optimized version of the text provides a clear and structured overview of the presentation, making it easier to follow and understand.