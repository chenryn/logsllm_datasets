Triton	
  and	
  Symbolic	
execution	
  on	
  GDB
bananaappletw @	
  HITCON
2017/08/26
$whoami
• 陈威伯(bananaappletw)
• Master	
  of	
  National	
  Chiao Tung	
University
• Organizations:
• Software	
  Quality	
  Laboratory
• Bamboofox member
• Vice	
  president	
  of	
  NCTUCSC
• Specialize	
  in:
• symbolic	
  execution
• binary	
  exploit
• Talks:
• HITCON	
  CMT	
  2015
Outline
• Why	
  symbolic	
  execution?
• Symbolic	
  execution?
• Triton
• SymGDB
Why	
  symbolic	
  execution?
In	
  the	
  old	
  days
• Static	
  analysis
• Dynamic	
  analysis
Static	
  analysis
• objdump
• IDA	
  PRO
Dynamic	
  analysis
• GDB
• ltrace
• strace
Symbolic	
  execution!!!
What	
  is	
  symbolic	
  execution?
• Symbolic	
  execution	
  is	
  a	
  means	
  of	
  analyzing	
  a	
  program	
  to	
  determine	
what	
  inputs	
  cause	
  each	
  part	
  of	
  a	
  program	
  to	
  execute
• System-­‐level
• S2e(https://github.com/dslab-­‐epfl/s2e)
• User-­‐level
• Angr(http://angr.io/)
• Triton(https://triton.quarkslab.com/)
• Code-­‐based
• klee(http://klee.github.io/)
Symbolic	
  execution
Z	
  ==	
  12
fail()
"OK"
Triton
• Website:	
  https://triton.quarkslab.com/
• A	
  dynamic	
  binary	
  analysis	
  framework	
  written	
  in	
  C++.
• developed	
  by	
  Jonathan	
  Salwan
• Python	
  bindings
• Triton	
  components:
• Symbolic	
  execution	
  engine
• Tracer
• AST	
  representations
• SMT	
  solver	
  Interface
Triton	
  Structure
Symbolic	
  execution	
  engine
• The	
  symbolic	
  engine	
  maintains:
• a	
  table	
  of	
  symbolic	
  registers	
  states
• a	
  map	
  of	
  symbolic	
  memory	
  states
• a	
  global	
  set	
  of	
  all	
  symbolic	
  references
Step
Register
Instruction Set	
  of	
  symbolic	
  expressions
init
eax =	
  UNSET None
⊥
1
eax =	
  φ1
mov eax,	
  0 {φ1=0}
2
eax =	
  φ2
inc eax
{φ1=0,φ2=φ1+1}
3
eax	
  =	
  φ3
add	
  eax,	
  5 {φ1=0,φ2=φ1+1,φ3=φ2+5}
Triton	
  Tracer
• Tracer	
  provides:
• Current	
  opcode	
  executed
• State	
  context	
  (register	
  and	
  memory)
• Translate	
  the	
  control	
  flow	
  into	
  AST	
  Representations
• Pin	
  tracer	
  support
AST	
  representations
• Triton	
  converts	
  the	
  x86	
  and	
  the	
  x86-­‐64	
  instruction	
  set	
  semantics	
  into	
AST	
  representations
• Triton's	
  expressions	
  are	
  on	
  SSA	
  form
• Instruction:	
  add	
  rax,	
  rdx
• Expression:	
  ref!41 =	
  (bvadd ((_	
  extract	
  63	
  0)	
  ref!40)	
  ((_	
  extract	
  63	
  0)	
ref!39))
• ref!41 is	
  the	
  new	
  expression	
  of	
  the	
  RAX	
  register
• ref!40 is	
  the	
  previous	
  expression	
  of	
  the	
  RAX	
  register	
• ref!39 is	
  the	
  previous	
  expression	
  of	
  the	
  RDX	
  register
AST	
  representations
• mov al,	
  1
• mov cl,	
  10
• mov dl,	
  20
• xor cl,	
  dl
• add	
  al,	
  cl
Static	
  single	
  assignment	
  form(SSA	
  form)
• Each	
  variable	
  is	
  assigned	
  exactly	
  once
• y	
  :=	
  1
• y	
  :=	
  2
• x	
  :=	
  y
Turns	
  into
• y1	
  :=	
  1
• y2	
  :=	
  2
• x1	
  :=	
  y2
Why	
  SSA	
  form?
y1	
  :=	
  1	
   (This assignment is not necessary)
y2	
  :=	
  2
x1	
  :=	
  y2
• When Triton	
  process instructions,	
  it could ignore	
  some unnecessary
instructions.
• It saves time and	
  memory.
Symbolic	
  variables
• Imagine	
  symbolic	
  is	
  a	
  infection
• Make	
  ecx as	
  symbolic	
  variable
• convertRegisterToSymbolicVariable(REG.ECX)
• isRegisterSymbolized(REG.ECX)	
  ==	
  True
• test	
  ecx,	
  ecx (ZF	
  =	
  ECX	
  &	
  ECX	
  =	
  ECX)
• je	
  +7	
  (isRegisterSymbolized(REG.EIP)	
  ==	
  True)(jump	
  to	
  nop if	
  ZF=1)
• mov edx,	
  0x64
• nop
SMT	
  solver	
  Interface
Example
• Defcamp 2015	
  r100
• Program	
  require	
  to	
  input	
  the	
  password
• Password	
  length	
  could	
  up	
  to	
  255	
  characters
Defcamp 2015	
  r100
Defcamp 2015	
  r100
Defcamp 2015	
  r100
• Set	
  Architecture
• Load	
  segments	
  into	
  triton
• Define	
  fake	
  stack	
  (	
  RBP	
  and	
  RSP	
  )
• Symbolize	
  user	
  input
• Start	
  to	
  processing	
  opcodes
• Set	
  constraint	
  on	
  specific	
  point	
  of	
  program
• Get	
  symbolic	
  expression	
  and	
  solve	
  it
Set	
  Architecture
Load	
  segments	
  into	
  triton
Define	
  fake	
  stack	
  (	
  RBP	
  and	
  RSP	
  )
Symbolize	
  user	
  input
Start	
  to	
  processing	
  opcodes
Get	
  symbolic	
  expression	
  and	
  solve	
  it
Some	
  problems	
  of	
  Triton
• The	
  whole	
  procedure	
  is	
  too	
  complicated
• High	
  learning	
  cost	
  to	
  use	
  Triton
• With	
  support	
  of	
  debugger,	
  many	
  steps	
  could	
  be	
  simplified
SymGDB
• Repo:	
  https://github.com/SQLab/symgdb
• Symbolic	
  execution	
  support	
  for	
  GDB
• Combined	
  with:
• Triton
• GDB	
  Python	
  API
• Symbolic	
  environment
• symbolize	
  argv
Design	
  and	
  Implementation
• GDB	
  Python	
  API
• Failed	
  method
• Successful	
  method
• Flow
• SymGDB System	
  Structure
• Implementation	
  of	
  System	
  Internals
• Relationship	
  between	
  SymGDB classes
• Supported	
  Commands
• Symbolic	
  Execution	
  Process	
  in	
  GDB
• Symbolic	
  Environment
• symbolic	
  argv
• Debug	
  tips
GDB	
  Python	
  API
• API:	
  https://sourceware.org/gdb/onlinedocs/gdb/Python-­‐API.html
• Source	
  python	
  script	
  in	
  .gdbinit
• Functionalities:
• Register	
  GDB	
  command
• Register	
  event	
  handler	
  (ex:	
  breakpoint)
• Execute	
  GDB	
  command	
  and	
  get	
  output
• Read,	
  write,	
  search	
  memory
Register	
  GDB	
  command
Register	
  event	
  handler
Execute	
  GDB	
  command	
  and	
  get	