(without detecting poison) before the one where poison was
encountered, which is tracked in a counter updated by the
trampoline. In this case, TASE attempts another transaction
tx(cid:48) beginning at the same place as tx, but with a stride of c.
If tx(cid:48) completes successfully, then the interpreter is invoked
to interpret through the next basic block (where poison is
known to appear), and native execution is resumed afterward,
if possible.
If tx aborts for another reason, then it is generally necessary
to interpret through the basic block where the abort occurred
(see [28, Sec. 16.3.8.2]). For example, if tx aborted due to
triggering a page fault, then it will likely trigger the page
fault again if retried in full [30]. TASE thus attempts to
natively execute as many of the basic blocks in tx as possible
while incurring few transaction aborts, before leveraging the
interpreter to interpret through the basic block that caused tx
to abort. TASE does this using the following logic (inspired
by binary search), assuming the stride of tx is smax:
1) s ← smax/2.
2) While s ≥ smin do:
a) Attempt a transaction tx(cid:48) of s basic blocks.
b) s ← s/2 (regardless of whether tx(cid:48) aborted and, if so,
the reason for the abort).
3) Trap to the interpreter and have it interpret through smin
basic blocks.
After step 3, TASE resumes native execution with its
default stride of smax. Note that each tx(cid:48) of stride s in step 2a
will either advance the program counter past the s blocks
attempted if tx(cid:48) does not abort, or will leave the program
counter unchanged if tx(cid:48) aborts. The logic above attempts to
ensure that if the condition that caused tx to abort is persistent
(e.g., a page fault incurred during a particular basic block),
then the troublesome basic block is interpreted in step 3.
C. Poison Checking
To prevent native transactions from interacting with sym-
bolic information in an “unsafe” way, we implement a poison
checking scheme. One such “unsafe” interaction we prohibit is
the loading of a symbolic variable into a register; this allows us
to assume that arithmetic performed within the general purpose
registers cannot access symbolic values and therefore needs no
additional instrumentation.
Broadly speaking, on a byte-level basis each memory loca-
tion that contains a symbolic value or expression is “poisoned”
with a reserved numeric value. Reads and writes within a
native transaction are instrumented at compile time to store
the values read and overwritten in reserved SIMD and general
purpose registers. At the end of each basic block and prior to a
transaction’s commitment, the values in the registers are tested
in bulk to determine if a poison value was read or overwritten.
If a poison value is found in the SIMD registers reserved for
instrumentation, the transaction is aborted.
If tx aborts due to reading or overwriting a poisoned
memory location (see Sec. IV-C), then tx is aborted using
an xabort instruction. This instruction permits information
about the abort to be conveyed to the abort handler in a
register. We use this facility to convey the number c of
basic blocks that were successfully executed in the transaction
To make this scheme sound and efﬁcient, several
im-
plementation reﬁnements were required. First, we implement
poisoning on an aligned two-byte basis. Byte-level poisoning
would potentially result in a large number of “false positives”
in which a native transaction reads a value concretely that, by
coincidence, matches the poison value. Consequently, if any
5
single byte b needs to be marked as symbolic by the interpreter,
we poison the 2-byte-aligned buffer B containing b. If B also
contains a concrete byte b(cid:48), then we mark b(cid:48) as symbolic as
well, but with a constraint that b(cid:48) equals its concrete value
prior to B’s poisoning. Of course, the risk of false positives
could be reduced further by poisoning 4-byte buffers, though
we have found 2-byte poisoning to sufﬁce so far.
Second, to prevent natively executing instructions that read
from or write to memory locations containing symbolic data,
we copy reads and memory values prior to writes to our
reserved SIMD and general purpose registers during native
execution. These read and overwritten values are later checked
at the end of the basic block to determine if an instruction
could have operated on symbolic data. If so, the transaction
rolls back and the interpreter handles the transaction, refer-
encing its internal bitmap indicator to determine if memory
operands are concrete or symbolic. For example, suppose some
instruction instr in basic block blk performs a load or store
to a symbolic address (i.e., a symbolic pointer) during native
execution. As noted earlier, TASE remains in the interpreter
while symbolic data remains in its simulated registers, so the
registers must be entirely concrete at the beginning of blk.
Some instruction instr(cid:48) (possibly instr itself) must read from
memory (explicitly or as a side-effect) the poisoned symbolic
data used as an address by instr. When instr(cid:48) is executed,
TASE’s instrumentation copies the poison tag associated with
symbolic data to its reserved SIMD registers for batched
checking at the end of the basic block, at which time the
transaction will abort. In this example, even if instructions
after instr(cid:48)
in the basic block perform memory operations
using malformed addresses impacted by the poison tag (e.g.,
calculating offsets from the poison), our checks at the end of
the basic block discard the changes (or the transaction will
roll back via segmentation fault if the malformed address
is for an unmapped page). In other words, when the ﬁrst
poison value is read or overwritten within a basic block and
stashed away for batched poison checking later, regardless of
subsequent instructions, the transaction containing the entire
basic block is destined to abort. Compared to instruction-by-
instruction instrumentation, batching poison checks at the end
of the basic block in SIMD registers reduces the total number
of instructions required to perform the poison checks, and
simpliﬁes the process of verifying that instrumentation checks
do not clobber the FLAGS register.
Third,
to ensure that control ﬂow within a transaction
containing one or more instructions operating on poisoned data
reaches the SIMD checks and aborts, we add additional instru-
mentation before indirect control ﬂow instructions which allow
jumps to arbitrary destinations. Without such a safeguard, our
belated poison checking scheme could allow poison-dependent
indirect control ﬂow arithmetic (e.g., jump table calculations
and function pointers) to erroneously transfer control to des-
tination addresses computed with the poison sentinel value,
thereby circumventing the poison checking logic. Speciﬁcally,
we add an additional trampoline jump to the poison checking
logic before instructions that jump to an operand address (e.g.,
call %rax, jmp %rax), effectively placing the instructions
in a separate basic block and preventing their execution if the
operand is symbolic; as stated earlier, control ﬂow between
basic blocks traps to our interpreter if symbolic taint enters
a register. Similarly, if the indirect control ﬂow instruction
performs a jump to an address stored in memory pointed to by
its operands (e.g., ret), we inject an additional poison check
for the destination address and a jump to the batched poison-
checking logic before the instruction is executed. Fortunately,
assuming access to the source code for target applications
in TASE and restricting our custom compiler’s instruction
selection simpliﬁes the task of instrumenting indirect control
ﬂow instructions.
The above design points help to ensure that native exe-
cution does not interact with symbolic values in any way,
including “clobbering” writes to symbolic variables that would,
in effect, concretize them without notifying the interpreter.
Our “in-place” poison-checking scheme along with KLEE’s
symbolic bitmap indicator provides a mechanism for accom-
plishing this.
The design choices for our poisoning scheme were made
to minimize the cost of instrumentation. Whenever possible,
our instrumentation to save values read from or overwritten
in memory is inserted into the target code to prevent any
additional reads from or writes to memory. With the help
of alignment guarantees from the compiler, many instructions
reading data larger than a byte can be instrumented by moving
the data read from a general purpose register to a reserved
register, where it is later checked en masse with other data
values. Taint trackers such as Minemu [6] use similar tech-
niques to reserve SIMD registers for instrumentation purposes.
Although TASE does not currently support native execution
or interpretation of SIMD instructions (i.e., SIMD instructions
are currently only executed as instrumentation), this limitation
is not fundamental; we plan to extend TASE in future work
to emit SIMD instructions as part of the program being
symbolically executed, as our poisoning scheme only requires
three SIMD registers to be reserved.
D. Interpretation
Should a native transaction encounter symbolic data, con-
trol ﬂow in TASE transfers to a KLEE-based interpreter. Given
the representation of the project as a set of x86 registers
and an address space,
the interpreter executes instructions
until a transactional entry point is reached (i.e., an instruction
corresponding to the code trampoline) and the registers contain
no symbolic data. The interpreter tracks symbolic data on a
per-byte basis.
Invoking the interpreter requires saving a snapshot of
the GPRs as they appeared at the end of the last success-
ful transaction; crucially, TASE does not require that main
memory is snapshotted or copied during the context switch.
In the interpreter, reads and writes to main memory are
performed directly on the addresses being read from or written
to. However, changes to the simulated x86 registers in the
interpreter must be faithfully tracked so that native execution
can be resumed by a context switch after interpretation has
completed. As KLEE interprets LLVM IR, we provide LLVM
IR representations of each x86 machine instruction within a
given transaction to preserve the semantics of the program
and produce a system state that may be restored for native
execution; see Fig. 2a and Fig. 2b for a simpliﬁed example of
how the x86 instruction pop %r9 is modeled, and Sec. V-A
for details on further optimizations. In order to avoid directly
6
1 void interp_pop_r9 (greg_t* gregs) {
2
3
4
5 }
gregs[REG_R9] = *(greg_t*)gregs[REG_RSP];
gregs[REG_RSP] = gregs[REG_RSP] + 8;
gregs[REG_RIP] = gregs[REG_RIP] + 2;
(a) C model
1 define void @interp_pop_r9(i64* nocapture %gregs) #1 {
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
%1 = getelementptr inbounds i64* %gregs, i64 15
%2 = load i64* %1
%3 = inttoptr i64 %2 to i64*
%4 = load i64* %3
%5 = getelementptr inbounds i64* %gregs, i64 1
store i64 %4, i64* %5
%6 = add nsw i64 %2, 8
store i64 %6, i64* %1
%7 = getelementptr inbounds i64* %gregs, i64 16
%8 = load i64* %7
%9 = add nsw i64 %8, 2
store i64 %9, i64* %7
ret void
(b) LLVM IR model
Fig. 2: Simpliﬁed models for interpreting pop %r9
writing LLVM IR, our method for producing an LLVM IR
model for each x86 instruction is to write the state changes
performed by the instruction in C (as in Fig. 2a), and use
Clang (https://clang.llvm.org) to emit LLVM IR (as in Fig. 2b).
Note that the interpretation of pop %r9 in Fig. 2a is modeled
as the execution of a function. The function takes a context
containing a set of simulated general registers (greg_t *
gregs), copies the value in main memory pointed to by the
simulated stack pointer to the interpreter’s simulated register
%r9 (line 2 in Fig. 2a), and increments the simulated stack
and instruction pointers (lines 3–4 in Fig. 2a).
Equivalent LLVM IR is provided in Fig. 2b. Note that
the offsets of the stack pointer, %r9, and the instruction
pointer in the greg_t * gregs struct are 15, 1, and 16,
respectively. The instructions on lines 2–5 retrieve the value
of our simulated stack pointer into temporary variable %2
and load the value at that address into %4, and lines 6–7
copy this value into the interpreter’s model of %r9. In line 5,
our interpreter directly reads from TASE’s virtual memory
located at the address speciﬁed by our model of %rsp in the
greg_t * gregs struct; because of this, context switches
between the interpreter and native execution do not require
expensive copy operations for memory other than the saving