title:Delay Wreaks Havoc on Your Smart Home: Delay-based Automation Interference
Attacks
author:Haotian Chi and
Chenglong Fu and
Qiang Zeng and
Xiaojiang Du
0
2
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Delay Wreaks Havoc on Your Smart Home:
Delay-based Automation Interference Attacks
Haotian Chi1∗, Chenglong Fu1∗, Qiang Zeng2, Xiaojiang Du3
1 Department of Computer and Information Sciences, Temple University, Philadelphia, PA 19122, USA
2 Department of Computer Science and Engineering, University of South Carolina, Columbia, SC 29201, USA
3 Department of Electrical and Computer Engineering, Stevens Institute of Technology, Hoboken, NJ 07030, USA
∗ The first two authors contributed equally to this work.
Email: {htchi, chenglong.fu}@temple.edu, PI:EMAIL, PI:EMAIL
two issues,
Abstract—With the proliferation of Internet of Things (IoT)
devices and platforms,
it becomes a trend that IoT devices
associated with different IoT platforms coexist in a smart home,
demonstrating the following characteristics. First, a smart home
may use more than one platform to support its devices and
automation. Second, IoT devices of a home may transmit mes-
sages over different paths. By selectively delaying IoT messages,
our study finds that
inconsistency and disorder,
can be exacerbated by attackers significantly. We then explore
how these issues can be exploited and present seven types of
exploitation, collectively referred to as Delay-based Automation
Interference (DAI) attacks. DAI attacks cause home automation
to yield incorrect interaction results, placing the IoT devices
and smart home in insecure, unsafe, or unexpected states. It
is worth highlighting that DAI attacks do not depend on any
IoT implementation vulnerabilities or leaked keys/tokens, and
they do not trigger alarms at any layers of the IoT protocol
stack. To demonstrate and evaluate the new attacks, we set up
two real-world testbeds, where commercial IoT devices and apps
are deployed. The week-long experiments from both testbeds
show that an attacker has adequate opportunities to launch DAI
attacks that cause security or safety issues.
I. INTRODUCTION
Rapid development of Internet of Things (IoT) has led to
flourishing smart environments, (e.g., smart homes, offices,
and laboratories). IoT platforms, such as Apple HomeKit [1],
Samsung SmartThings [2], and Amazon Alexa [3], enable
configurations of automation rules for interactions between
IoT devices in a home, also known as home automation. For
example, users can create automations on SmartThings, or
routines on Alexa, to have their devices automatically react
to sensor measurements, device status, time, etc.1
When multiple rules interplay in a physical environment,
they may interfere with each other and cause unexpected
automation. The cross-rule interference (CRI) problem has
been intensively studied (on individual platforms) [4], [5],
[6], [7], [8], [9], [10], [11], [12], [13]. However, existing
work that studies the CRI problem makes the following two
assumptions: (1) They assume that all rules run on the same
platform [6], [7], [9], [10], [5], [12], [13], [8] (or rules on
different platforms do not interact with one another and can
be analyzed separately [11]); (2) They also assume that all IoT
1We refer to automations and routines as automation rules or rules.
Fig. 1: An example showing a unique CRI problem. If the trans-
mission of the button-pressed event (which sets “Away” mode) to
Platform B suffers a non-negligible delay due to the DAI attack, the
rule on Platform B will fail to lock the door.
messages are transmitted with identical delays. For example,
the first systematic categorization of CRI [4], [5] assumes both.
The assumptions, however, do not necessarily hold true in
real-world systems. Due to the fragmented IoT ecosystem [14],
[15], different platforms are compatible with different subsets
of IoT devices. When users cannot find a single platform
to work with all their devices, they need to use multiple
platforms. Furthermore, different devices use heterogeneous
communication technologies and transmit messages through
different paths. For example, a ZigBee device talks with a
platform A’s server via an IoT hub, while a WiFi-based device
talks with its vendor’s cloud B, which then delegates access
to the device to the platform A. The communication paths are
different and thus have different transmission delays. Worse,
such delays can be manipulated by attackers without relying
on any implementation vulnerabilities (Section II-C).
We thus consider a more general and realistic smart home
system, where (1) users may use more than one platform to
support their devices and install automation, and (2) IoT de-
vices can transmit messages via more than one communication
path. We classify smart home systems into three categories:
single-platform single-path (SPSP) systems, single-platform
multi-path (SPMP) systems, and multi-platform (MP) systems,
which certainly contain multiple paths (Section III describes
the three categories in details). By incorporating message
transmission delays as a factor, we study two issues which do
not exist in SPSP (where the two assumptions aforementioned
hold): disorder and inconsistency. Disorder occurs when two
© 2022, Haotian Chi. Under license to IEEE.
DOI 10.1109/SP46214.2022.00146
285
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
IoT events (or commands) arrive at platforms (or devices) in
an order different from their actual occurrence order, while
inconsistency arises when two platforms have inconsistent
observations on the state of the same device.
We then re-examine cross-rule interference (CRI) in SPMP
and MP systems, and reveal a new family of attacks that
are overlooked by previous work, referred to as Delay-based
Automation Interference (DAI) attacks, which exploit the in-
teraction of automation rules in SPMP or MP systems. Fig. 1
illustrates an example. If the button-pressed event (which sets
the home mode on both platforms to “Away”) sent to Platform
B is delayed by an attacker, the automation rule on Platform
A succeeds in closing garage door when the homeowner’s
car leaves, but the rule on Platform B fails to lock the front
door. We utilize two attack primitives [16], selective event
delaying and selective command delaying (which leverage
TCP hijacking attacks to significantly delay IoT events and
commands without requiring session keys or triggering any
alarms), as a building block to realize the DAI attacks. In
short, an attacker exacerbates the inconsistency and disorder
issues to launch DAI attacks, which exploit new CRI patterns
and cannot be detected by existing work on CRI [6], [7], [8],
[9], [10], [5], [11], [12], [13].
To demonstrate and evaluate the new attacks, we set up
two real-world testbeds in two apartments. In the testbeds, we
examine a variety of IoT devices, six cloud-based platforms
and two local platforms. We validate all of the new attacks
in the testbeds and verify that the attacks put the devices
into insecure, unsafe or unexpected states. The one-week
data from both testbeds also demonstrate that the attackers
have adequate opportunities to launch the attacks. Finally, we
discuss countermeasures. Our contributions are as follows:
• Given the fragmented IoT ecosystem, we present a much
more general and realistic smart home model, where mul-
tiple IoT devices associated with multiple IoT platforms
interact in the same physical space. Under this model, we
study the disorder and inconsistency issues and leverage
delay-attack primitives to exacerbate them.
• Compared to existing work on CRI [4], [5], we are the first
to incorporate the delay factor into analyzing CRI problems.
We are thus able to reveal new CRI patterns and build Delay-
based Automation Interference attacks that are overlooked
by existing work. These attacks do not rely on any leaked
tokens or implementation vulnerabilities. Unlike jamming
or discarding packets, the attacks do not trigger alarms at
any layers of the IoT protocol stack.
• We evaluate the proposed attacks in two real-world testbeds,
where commercial off-the-shelf (COTS) IoT devices and
multiple popular platforms are used. It is demonstrated that
the attacks can cause various problematic home automations
and put the IoT devices and home in hazardous states.
II. BACKGROUND AND ATTACK MODEL
A. Smart Home Systems
Fig. 2: Architecture of a smart home ecosystem. The arrows (labeled
with circled numbers) denote the paths and directions of event flows.
Command flows follow the same paths but in reverse directions.
in the same physical space. We show the architecture of a
modern smart home ecosystem in Fig. 2.
Devices and Hubs: IoT devices consist of sensors and actua-
tors. A sensor (e.g., temperature sensor) simply reports mea-
surements of a physical property, while an actuator (e.g., smart
lock) can receive and execute commands (e.g., unlock/lock) to
change its status and report that after executing a command.
The sensor measurements and actuator statuses are sent to an
IoT platform via events. The current sensor measurement or
actuator status is called the device’s state. A device’s state at
a platform is updated by the device’s latest event.
IoT devices employ a variety of techniques (e.g., WiFi, Zig-
Bee, Z-Wave, Bluetooth) to send events or receive commands.2
Devices that use WiFi (e.g., LIFX bulbs, Amazon Echo
speakers) can connect to the home router directly 1 ; those
that use non-IP protocols (e.g., ZigBee, Z-Wave, Bluetooth,
etc.) usually require a hub. The hub converts non-IP payloads
from IoT devices 2 to IP-based payloads, which can be sent
to the home router 3 . The home router then forwards the
IP-based payloads to cloud servers 4 or to other devices in
the local area network (LAN) 5 for further processing. A
local platform (e.g., HomeKit) can connect non-IP devices
directly ( 6 ). Multiple IoT hubs may be deployed in a home
to accommodate their supported devices.
Platforms: Cloud-based IoT platforms may be classified into
three types: endpoint, service, and hybrid. An endpoint plat-
form is a messaging cloud that mediates communication be-
tween IoT devices and service platforms. It may be maintained
by a device manufacturer or a third-party service provider
(e.g., AWS IoT [17]). A service platform such as IFTTT (If
This Then That) is a cloud that runs automation rules and
usually obtains access to devices from endpoint platforms,
via a cloud-to-cloud integration 7 . A hybrid platform is a
combination of an endpoint and a service platform. Many
popular smart home platforms, such as Amazon Alexa and
SmartThings, belong to this category. In contrast
to the
aforementioned cloud-based platforms, a local platform (e.g.,
HomeKit, openHAB) is usually hosted on a local device (e.g.,
PC, laptop, HomePod speaker) in the home area network, and
In modern smart homes, various components (e.g., IoT
devices, IoT hubs, home router, and IoT platforms) interact
2For the sake of brevity, we mainly discuss event flows. Command flows
follow the same paths but in the reverse direction.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
2286
can connect with IoT devices directly, via non-IP protocols
(e.g., ZigBee, Z-Wave, Bluetooth) 6 or via LAN 1 → 5 .
A local platform can also access devices that have been
connected to an IoT hub ( 2 → 3 → 5 ) or an endpoint/hybrid
platform ( 1 → 4 → 9 → 5 or 1 → 4 → 7 → 8 → 5 ), by using
the APIs provided by the hub (e.g., Hue bridge) or the
endpoint/hybrid platform (e.g., LIFX cloud), respectively. For
the sake of brevity, in this paper, we collectively use the term
platforms to denote all service, hybrid, and local platforms
that can run automation rules.
Automation: An automation rule is a reactive app that follows
a trigger-condition-action paradigm. A rule’s trigger specifies
a constraint that a certain type of event (termed as trigger
event) must satisfy to activate the rule. Before an action in
a rule is taken, its condition is checked to verify whether
states (e.g., devices states, time) have satisfied the predefined
constraints. Different platforms may have distinct supports
for defining rule conditions. For instance, SmartThings allows