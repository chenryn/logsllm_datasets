The Phantom Network Database API
Having defined the capabilities of the Phantom Network Database above, we can now finally
present the exact interface that Phantom nodes will be using to interact with it, e.g. the “allowed
queries and operations” on it. This interface will use a subset of the full power of the Phantom
Network Database abstraction, and each and every individual node will help making sure, in the
best way possible, that no other node can use anything but this subset of the full capabilities, as
an extra security measure.
•
RegisterMyNodeInTheNetwork(own_ip_address,
                           communication_certificate,
                           path_building_certificate)
This API will be called by each node as soon as it goes online on the anonymous network.
The result will be access granted to the network database, and registration of the node’s IP
address in this database at the same time.
•
ReserveNewAPAddress(routing_certificate)
This API will be called when a node in the network wants to acquire a time limited lease of an
own incoming AP address in the network. The API returns a new reserved AP address,
whose routing table entries will only be able to be updated with valid signatures from the
“routing certificate” supplied as a parameter to the API. The same applies for extensions of
the lease. In order not to risk compromising the anonymity of the node requesting this AP
address, such a request would also have to be passed through a routing path before being
issued towards the network database.
•
ExtendAPAddressLease(ap_address)
                     signed_lease_request,
                     routing_certificate)
This API will be called when a node in the network wants to extend its current lease of an AP
address already reserved for it. The extension will only be granted if the lease request has a
valid signature created by the same routing certificate that was used for the original
reservation of the AP address.
•
UpdateRoutingTableEntry(ap_address,
                        signed_routing_entry,
                        routing_certificate)
This API will be called when a node in the network wants to update the routing table entry of
its AP address in the network database, to add or remove an entry path. The update will only
be granted if the new routing entry has a valid signature created by the same routing
certificate that was used for the original reservation of the AP address.
•
GetRandomNodeIPAddresses(noof_addresses)
This API will be called when a node in the network wants a list of random IP addresses for
nodes in the anonymous network, e.g. for use in building a new routing path. The network will
return the given number of addresses (together with their corresponding communication
certificate and path building certificate), where a maximum of only one result comes from the
same network database node, in order to prevent any single node from being able to
influence or bias the returned set of IP addresses in any significant way.
• 
GetEntryNodesForAPAddress(ap_address)
This API will be called when a node in the network wants to resolve a given AP address to the
entry nodes through which it can be contacted. A list of all such entry nodes (i.e. their IP
addresses and ports) is returned.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
59(68)
7.5.  Additional Details
7.5.1.   
High-Availability Routing Paths
In the routing path model presented so far, it can be noted that such paths are not resilient to
disappearing nodes inside the path. If only one node becomes unavailable, e.g. shuts down their
computer, the entire routing path will fail, in an irreparable fashion. In some situations this is not a
very critical problem, while in other it makes the protocol less useful. Thus, having access to a
high-availability version of the simple routing path would be an interesting option to have.
Even though the creation of high-availability paths that maintain all the secure properties of the
normal paths isn’t nearly as easy as could be thought at first glance, it is indeed possible, and, in
this section we will see a brief example of such a design.
The high-availability path in this example, having double redundancy for all its nodes, would look
as follows:
Figure 25. High-availability routing path with double redundancy.
One of the first problems encountered in this situation is that the anonymized node itself could
obviously never be redundant. This causes an asymmetry, which, if not handled carefully, would
make it possible for the surrounding X-nodes to know that they are adjacent to the anonymized
node. Since the zero-knowledge property of the protocol in this aspect is an important part of the
total strength of the anonymity it provides, we don’t want to lose this property. This can be solved
by making all high-availability routing paths double-ended, having the actual anonymized node
located somewhere between these two ends, just as can be seen in the figure above.
As can be seen in the figure, all X-nodes now have both a number and a letter in their
designation. The number represents their priority redundancy-wise, and the letter represents their
position throughout the routing path.
A very short description of the workings of the high-availability routing path follows, purposely
incomplete due to the large volume of details necessary to make such a routing path design work
in a secure way:
• 
All normal communications go through the X1 nodes, i.e. the ones in the “middle row”.
• 
If any of these X1 nodes should become unavailable at any point, data will be immediately
routed around this new “hole” in the path by going through the corresponding X2 node instead
(and if this node should also be unavailable, the corresponding X3 node will be used instead),
without disrupting the active connection or losing data in any way.
• 
The communication will be immediately routed back to the main X1 path right after this point.
• 
When a node malfunction such as this is detected, it will be immediately communicated to the
anonymized node, through a separate command channel, which will in turn repair the routing
path by replacing the lost node with a new node, using techniques similar to those used when
building normal routing paths. All seamlessly while keeping the connection alive and active.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
60(68)
8.  Legal Aspects and Implications
8.1.  On a Technical Level
In order to exemplify what kind of protection the Phantom protocol really offers, and the limitations
of the same, let us use one of the most extreme real-world examples of today, where people are
being ferociously persecuted by powerful organizations online. Namely, file sharing.
As it now stands, in some jurisdictions a user can be sued for being connected to a torrent
containing copyrighted material. Questionable evidence gathering methods aside, it might
nevertheless still be claimed that the user in question willingly connected to and participated in
the given torrent. These are perfectly valid grounds to sue someone today (which in practice
occurs in the form of a John Doe lawsuit against the IP address in question, through which the
court will later discover the true identity of the person behind this IP address, by means of a court
order issued against the ISP owning the IP address).
The “next step” in this scenario might be the ability to sue someone for just using certain file
sharing programs or protocols, no matter the content being accessed, or distributed, by the
person in question. As far as the author of this paper knows, this has not happened yet, but the
boundaries within this and similar fields are constantly being pushed forward, so it would not be
overwhelmingly surprising if such legal actions were to be attempted.
Going yet a step further, generic anonymization protocols like Phantom enables people to
anonymize all kinds of Internet communication, be they political discussions, communications
between people in repressed regimes and people in the outside world, and also things like file
sharing. This potential for “socially valuable” utility makes it much harder to altogether ban the
use of such protocols, and thus, presents the opportunity for a protocol such as Phantom to
facilitate and enhance the cause of free and uncensored Internet communication.
In the specific example of file sharing, it might still be claimed that people who are “unwittingly”
participating in routing file sharing connections through their Phantom enabled computer could
still be sued, by means of their IP addresses (i.e. the exit/entry nodes of routing paths). There
are, however, some considerable differences between the current litigation models and the
participation in a Phantom network. First of all, a Phantom network participant is not in any way
willingly participating in the activities against which such a lawsuit is directed. Even more
importantly, the user participating in the Phantom network does not in any way have access to
any of the potentially “illegal” information itself, due to the encryption being employed to protect it.
This makes the participant’s computer more or less equal to any router on the Internet through
which an encrypted connection containing illegal information might pass, and I wouldn’t guess
that any of those are to be sued anytime soon.
The next step that hypothetical Internet censors might take would be to altogether ban encryption
on the Internet. This would of course make protocols like Phantom (and a very large group of
other protocols) illegal, but such a turn of events would be extremely difficult to get enacted, due
to the extreme consequences it would have in a wide variety of fields. Nor would it be easy to
enforce. This author would rather say that it would be quite impossible to do so.
The last resort for overzealous Internet censors would be to ban the use of Internet altogether,
which would of course also seem like an impossible task, considering its use and integration into
the very fabric of society today.
So, the only remotely realistic, while still seemingly quite difficult, avenue of attacking the protocol
and/or its users, would seem to be to attempt to sue users who unwittingly have encrypted pieces
of “illegal information” passing through their computers. In order to potentially limit the effective-
ness of such claims, the license of the protocol and its implementations could possibly be
optimized with the goal of countering or limiting such claims, which will be discussed in the next
section.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
61(68)
8.2.  On a Legal/License Related Level
As mentioned in the previous section, the only even remotely realistic way of attempting to attack
the deployment and use of the protocol (still without any possibility to track down its anonymized
users though) would be to attempt to sue the users owning the entry and exit nodes of routing
paths, despite the fact that these are in no way willingly sponsoring any of the communication
that passes through their computers, nor have access to, or specific knowledge of, any of its
contents.
In order to make such legal attacks even more difficult, it would perhaps be possible to make
some adaptations to the license of the protocol and its implementations (do note that I in no way
claim to have any legal skills, so this is just hopeful speculation!).
Put as simply as possible, such a license tweak would amount to stating in the license of the main
protocol specification that any and all implementations of it will have to use a certain EULA.
This EULA, in turn, would state that through use of the protocol implementation in question, the
user understands, and agrees, that no node in the anonymous network may be held responsible
for any of the data that is being routed through it, due to the simple fact that the user neither
controls what such data may contain, nor has any possibility whatsoever of accessing the data
itself, and that thus, no data gathered through use of the specific protocol implementation may be
used in support of a lawsuit against any of its users who are just routing data.
If such a license and EULA clause would work as intended (I’m quite sure there will be several
different kinds of problems with it though, but hopefully it would contribute at least somewhat to
the security of the protocol), it would put any would-be Internet censor in somewhat of a
predicament, since if they use the protocol specification to create their own implementation, they
will be breaking the main protocol license if they don’t include the specified EULA, and if they use
any legal protocol implementation, i.e. one using the specified EULA, they have been explicitly
informed about the innocence of the intermediate notes of routing paths (which are the only
nodes whose IP address they will ever know), and are also forbidden, by their own express
agreement, from gathering data with it for any lawsuit.
Oh well, as mentioned above, just a crazy idea, which will most likely not be fully effective in all
countries, but still, hopefully at least partly efficient in some countries.
In order to get it right from the start, it is hereby announced that this protocol implementation is
released under this exact license.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
62(68)
9.  Review of Design Goals
This chapter will try to assess how well the design that has been presented matches the initially
established design goals. This will be done by reviewing the design goals one by one, and
matching them up with features of the presented protocol design that fulfill and realize them.
9.1.  Matching of Design Goals with Features of the Protocol
9.1.1.   
Complete Decentralization
• 
The protocol design has no central points, or even nodes that are individually more valuable
to the collective functionality of the anonymous network than any other.
• 
Thus, there are no single points of the network to attack, neither technically nor legally, in
order to bring down any other parts of the network than those specific ones attacked.
9.1.2.   
Maximum Resistance against All Kinds of DoS Attacks
• 
Resistance against all kinds of DoS attack vectors has been of constant concern during the
design process of the protocol. It is always impossible to defend against all kinds of attacks
that can in any way affect the operation of a technical solution (giant meteor smashing the
earth to pieces, anyone?), and this is also an area that can always be improved infinitely
(sadly in many cases at the expense of performance or resource use), but it is my sincere
hope and belief that the design in its current form should make the protocol resilient enough
to survive the expected and predictable kinds of attacks current on the Internet of today.
9.1.3.   
Theoretically Secure Anonymization
• 
Each and every part of the design of this protocol has been created with (theoretically) secure
anonymization in mind. It is a very difficult problem for which to present a unified theoretical
proof, and as mentioned before, some of the prerequisites and design goals forces us to use
a design that is in some situations only probabilistically secure (meaning that if the same
attacker owns all the randomly selected nodes in a routing path, they could theoretically
connect the AP address and IP address of the anonymized node owning the same routing
path, thus compromising its anonymity). That being said, the design is optimized to also
minimize the probability factors of the probabilistic risks, and even make them arbitrarily small
by individual user selection, with performance loss for your own communication as the trade-
off. As with most non-theoretically provable security systems, however, I guess that, in the
end, the truth will be decided only by the test of time (or possibly even at once by the
collected hacker elite of the world, when this paper is presented in Las Vegas, but hopefully
not). I can only hope that I have been able to present the different parts of the protocol in a
way that makes them understandable and clear enough to enable efficient analysis and
consideration.
9.1.4.   
Theoretically Secure End-to-End Encryption
• 
It is made impossible for any node in a routing tunnel or routing path to decrypt anything
being sent locally inside this tunnel, by means of symmetrical stream encryption of each
individual byte in all communicated data.
• 
SSL connections are used as an external shell for all connections going between nodes in the
protocol, ensuring that no external attacker can eavesdrop on any data.
• 
SSL equivalent functionality is also suggested to always be applied inside each anonymized
connection being made over the anonymized network (i.e. already being inside the external
SSL shell and the symmetrical stream encryption provided by all routing paths).
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
63(68)
9.1.5.   
Complete (Virtual) Isolation from the "Normal" Internet
• 
It is impossible to contact and communicate with any regular IP address on the Internet from
inside the anonymous network, unless the computer at the IP address has willfully installed a
Phantom client on the computer. Thus, the network cannot be used to anonymously commit
illegal acts against any computer that has not itself joined the anonymous network, and thus
accepted the risks involved in anonymous communication.
9.1.6.   
Maximum Protection against Protocol Identification/Profiling
• 
SSL connections are used as an external shell for all connections used by the protocol, and
by default they also use the standard web server SSL port (tcp/443). Thus, neither the port
number nor any of the contents of the communication can be directly used to distinguish it
from common secure web traffic (there are of course always enough advanced traffic analysis
methods to identify certain kinds of traffic, or at least distinguish traffic from a certain other
kind of traffic, but if this is made sufficiently difficult, it will take up too much resources or
produce too many false positives to be practically and commercially viable).
9.1.7.   
High Traffic Volume and Throughput Capacity
• 
Due to the design of the protocol, there is no practical way for a node to know if it is