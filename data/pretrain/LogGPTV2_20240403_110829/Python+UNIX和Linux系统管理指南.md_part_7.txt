www.TopSage.com
---
## Page 51
接下来，我们看看这两个数据类型保存了什么内容。
在开始使用In和Out之后，你会对此习以为常。
在这里，有两个内置变量应该引起注意，它们是In和Out。前者是IPython输入列表
而使得IPython这种不同类型的交互式shell与标准Python shell能够相互区分。，
毫无疑问是有深层根源的。事实上，这种差异反映了IPython的功能区不同于Python，从
这种In［some number]:和Out［some number]:的方式或许会让人迷惑，是否在IPython
Python则直接显示值。对于打印输出变量，两者没有什么区别，都是以无提示符方式显
字符串表示的变量时，IPython和标准Python有所不同。IPython显示一个Out提示符，而
在IPython和Python中，对整数进行赋值的方式没有什么差异。一个是IPython提示符，一
接下来是标准Python的提示符：
（list）对象，后者是一个字典（dict）对象。以下是type对In和Out的说明：
与标准的Python之间存在着更深层的差异，还是这种差异纯粹就是表面上的？这种差异
示输出。
个是标准Python提示符，两者都能够快速地向用户返回变量的赋值。但是，在显示正式
对变量求值的结果，以及打印输出变量。首先是IPython的提示符：
变量进行求值运算，最后打印输出变量值。注意这三者之间的差异：为变量赋值、显示
Out[1]:1）。下面是一个示例，演示了在IPython中如何将一个整数赋值给变量，然后对
In [2]:type(out)
Out[1]:>> a= 1
In[4]:
In [3]: print a
Out[2]: 1
In [2]: a
In[1]:a = 1
>>>
>>
printa
www.TopSage.com
IPython | 37
PDG
---
## Page 52
38
注意，在本示例的最后一行，只需按Tab键一次即可。
在IPython中，可以实现相同的功能而无须进行任何额外的配置。对于Python，该项功能
os，输入os.lis，按Tab键一次，让自动完成功能将其匹配成os.listdir。也可以输人
在加载了rlcompleter和readline，并设置了readline的Tab自动完成选项后，可以载人
经过上述设置，我们可以使用如下功能：
同的示例：
是可选的，
los.li，然后按Tab键两次，将会出现一个所有可能匹配的列表。
具有tab自动完成功能，但需要做如下处理：
该功能在默认状态下是开启的。标准Python shell如果编译时增加了readline支持特性，将
另外一个极为有用的有关IPython数据输人（data-entry）的特征是Tab自动完成功能，
Tab自动完成
纯粹的字典（dict）对象对输出进行跟踪就显得十分有意义了。
是每一行都会有可求值的非空输出，采用类字典（dictionary-like）的数据结构或是一个
（list-like）结构的输出却可能导致一些空字段或所包含的内容为空的字段。因此，并不
由于每一行必须有输人，这对于跟踪类列表结构的输人非常有效。但是，跟踪类列表
正如所期望的，In和Out分别保存了输入，以及非空语句和表达式求值运算的输出。
os.linesep os.link os.listdir
In [2]: 0s.lis
In [1]:import os
os.linesep os.link os.listdir
>>>os.li
>>> import os
>>> readline.parse_and_bind('tab: complete')
>>> import rlcompleter, readline
['\n', u'type(In)\n', u'type(Out)\n', u'print In\n']
In[3]:print In
第2章
[2]: os.listdir
os.lis
os.listdir
，而对于IPython，该功能则为默认开启的。下面是在IPython中运行与之前相
www.TopSage.com
---
## Page 53
shell直接交互所带来的便捷和灵敏。当这两种来编写代码的方法可以整合时，其各自的
可以简便地编辑代码块，对代码块中的循环或是函数的方法进行修改。而且，还具有与
式之间的折中。其好处是可以利用手边的资源，尽情享用你选择的编辑器的全部优点。
魔力编辑功能类似于上面提到的在Pythonshell的纯命令行交互方式与使用文本编辑器方
尽管具有相当大的优势，但是也存在一定限制的原因。
面向命令行的输人方式就显得功能有些受限了。这就是为什么我们说面向命令行的方式
行整合，然后向shell提供需要执行的命令。可以说，有了对多行代码处理的支持，严格
谈论的内容。我们将要讨论的是在面向命令行的输人方式与文本编辑器输人方式之间进
在这方面有所改进，如可以使用文本编辑器编写Python模块，但这不是我们想在这里要
功能，使用文本编辑器对多行命令进行编辑是不错的做法。虽然IPython的readline支持
效的。但是，有时候如果一次能够处理多行命令，那将是非常不错的选择。为实现这一
行的返回结果，然后再输入下一条命令。这个过程就是一个循环。事实上，也是非常有
式。每次输人一行命令，接下来shell会对命令进行处理，有时候你会坐下来等待命令执
起来有些矛盾，接下来我们一点一点分析解释。在shell中，采用一次输入一行命令的方
oriented）的用户交互方式，尽管具有相当大的优势，但是也存在一定限制。这句话听
下来的章节中将进一步介绍魔力编辑）。严格地说，使用shel1这种面向命令行（line-
最后一个将要涉及的基本输入输出主题是关于魔力编辑（magic edit）功能的。
魔力编辑
简单的设置，轻松修改IPython的原有配置。
每一次都会切换到下一个可能的替换。IPython的默认自动完成是“完成”。也可以通过
单完成”会扩展主题词，直接匹配可以替换列表中的一个，并且如果连续按Tab键时，
者的差别在于“完成”尽可能扩展当前的主题词，并提供一个可能的替换列表，而“菜
IPython提供了两类自动完成功能：完成（complete）与菜单完成（menu-complete）。两
是IPython的特点。
注意：所有通过import自动完成功能所列出的项都是模块，不需要为此感到意外，这就
将如何帮助我们找到需要载人的模块：
完成功能，则体现在模块导人方面。打开一个新的IPython shell，这样可以看到IPython
这个os.TAB示例仅仅演示了IPython的属性查找和自动完成功能，而另一个更不错的自动
opcode
In [1]:import o
operator
xmlrpclib
optparse
www.TopSage.com
OS
os2emxpath
Aapotpnesso
6E   uoudl 
（在接
---
## Page 54
40
魔力函数可供使用。也可以像下面这样列出所有的魔力函数：
正如你所看到的，这里有非常多的函数可供使用。事实上，在写这本书时，已经有69个
力函数是lsmagic。lsmagic可以列出所有的魔力函数。下面是运行lsmagic的结果示例：
有两个魔力函数可以帮助你查看所有的函数，并且排序输出那些有用的函数。第一个魔
正如已经提到的，IPython有着强大的功能。原因之一是它具有非常多的、内建的
从功能强大的函数获得帮助
含了你所需要的配置项或希望设置的配置项。
就是IPython有一个配置文件，并且它值得你仔细阅读一下，因为这有利于确定它是否包
的默认文件编辑器。这里，我们不再进一步描述其中的细节了。你只需要知道一点，那
以选择所使用shell的颜色，选择用于shell提示的组件，设置用%edit编辑文件时所使用
心所欲地使用IPython，配置文件中包含了大量的配置项，用户可以自行定制。例如，可
ipy_user_conf.py的文件。这就是使用Python语法的简单用户配置文件。为了让你可以随
他信息，它会在home目录下创建一个ipython目录。在.ipython目录中的是一个名为
最后需要学习的基础知识是如何配置IPython。如果第一次运行IPython时没有指定其
配置IPython
使用熟悉的shell工作时，可以看到在编辑器中刚刚做的修改所带来的变化。
优点也被整合了。你可以保留shell环境，在编辑器中暂停、编辑和执行代码。当你继续
（built-in）魔力函数。什么是魔力函数？在IPython的文档中是这样描述的：
Automagic is ON, % prefix NOT needed for magic functions.
%Exit
In [1]: lsmagic
run
%bookmark
目录修改到mydir。
例如：输入“%cd mydir”
不包含括号或者引号。
控制IPython，为其增加许多系统级的特征。魔力函数都是以%为前缀，并且参数中
IPython会将任何第一个字母为%的行，视为对魔力函数的特殊调用。这样你就可以
logstart
第2章
%runlog
%pdoc
%Pprint
pMd%
%cd
%pycat
%pfile
%save
%ed%edit%env
%Quit
%sC
%logstop
%quickref
%color_info
%alias
%store
（不包括引号），表示如果mydir存在的话，将当前工作
%lsmagic
%autocall
www.TopSage.com
%quit
%exit
%whos
%sx
%profile%prun
%colors
%autoindent
%xmode
%macro
%psearch
%automagic %bg
%logoff
%page
%dhist
%timeit
%psource
%dirs
PDG
---
## Page 55
使用%page?之后的结果：
字之后，在其后输入问号（?），能够得到与使用%magic几乎相同的帮助信息。下面是
效。所有的函数按照字母顺序排列，因此无论是搜索还是滚动，都非常方便。
具体函数，并且想直接跳到该函数所在位置而不是上下滚动进行查找，这么做非常有
你可以在执行magic函数之后搜索或前后滚动，找到需要的内容。如果知道需要查找的
述。以下是魔力page函数的帮助说明：
法。这个帮助文档包括函数名，函数的用法（适用于何处），以及函数工作方式的描
力。运行magic可以打开一个分页的帮助文档，其中记录了所有IPython内建函数的用
而这正是神奇的魔力函数发挥作用的另一个地方。魔力函数的名字magic本身就具有魔
看到具体的函数说明，否则仅靠列表，不足以帮助你了解每个函数的具体功能。
做。或者你可以使用上述方法快速浏览所有的函数，看看都有哪些函数可用。但是除非
Tab，都是为了快速查看所有可用的函数，当你正在寻找某一特定的函数时就可以这样
输入%然后按Tab键，可以看到69个magic函数的列表。使用lsmagic函数或输入%然后按
在本章的后面将介绍另外一种使用帮助的方法。在键入希望获得帮助信息的魔力函数名
In [1]: %page ?
%page:
%cpaste
%colors
%color_info
%clear
%bookmark
%bg
%automagic
%autoindent
%autocall
%alias
%Quit
%Pprint
In [2]: %
Base Class:
%cd
%Exit
%page[options] OBJECT
Pretty print the object and display it through a pager.
Options:
-r: page str(object), don't pretty-print it.
www.TopSage.com
%prun
%profile
%popd
%pinfo
%pfile
%pdoc
%pdef
%page
%p
%magic
%macro
%lsmagic
%logstop
%runlog
%run
%reset
%rep
%rehashx
%rehash
%quit
%quickref
%pycat
%pwd
%pushd
%psource
%psearch
%xmode
%whos
%who_1s
%who
%upgrade
%unalias
%timeit
%system_verbose
%sx
%store
%sc
%save
IPython | 41
---
## Page 56
42
其结束部分内容如下所示：
数自身的总结。在IPython提示符下输入%quickref后，可以看到一个分页的参考文档信
这是IPython帮助文档中的一部分，用它非常适于生成一个总结，也可以用于生成魔力函
息，如下所示：
%timeit:
%time:
System commands:
cd /usr/share
%alias d ls -F
Example magic function calls:
anum sure iaue axet Xrretdst pue % Aq paxttaid are suoaount st
?foo.*abc*
obj?，obj??
IPython --An enhanced Interactive Python - Quick Reference Card
Docstring:
%magic
Definition:
File: