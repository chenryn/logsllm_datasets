### Honeypot Emulation and Real-Time Pacing

The honeypot emulation setup, illustrated in Figure 8, involves the execution of two types of PDNS instances: AFAP (As Fast As Possible) and Real. The PDNS-Real instances create an emulator object that registers with the proxy server. During registration, the emulator object transmits its instance ID and the IP address range it covers. This information is used by the proxy to maintain a connection table, which routes traffic between the simulated environment and the honeypot. A TCP connection is established and maintained throughout the simulation for packet exchange between the emulator and the proxy.

#### 4.2.1 Experimental Hardware Setup

Figure 9 depicts the hardware configuration for the honeypot emulation. The machine running the proxy server is equipped with two network interfaces to bridge the public and private networks. A DHCP daemon is started on one of the network interfaces, serving as a gateway for honeyd. Since honeyd simulates virtual IP addresses, a route entry is added to forward packets destined for these virtual IPs to the appropriate network interface.

To avoid the runtime overhead of ARP lookups at the proxy server for honeyd’s virtual IP addresses, the mapping of these virtual IPs to honeyd’s MAC address is hardcoded in the proxy’s ARP table. The proxy server listens for packets from both sides of the network (PDNS and honeyd). It uses iptables rules to capture and encapsulate packets from honeyd, inserting them into PDNS, and raw sockets to emit forwarded packets to the honeyd side.

#### 4.3 Emulation Issues

Several challenges were encountered in implementing the constructive emulation architecture, some of which are discussed below.

##### 4.3.1 Traffic Conversion

In PDNS, TCP sequence numbers always start at a fixed value (zero), whereas in real TCP implementations, such as those used in the honeypot, sequence numbers are randomly generated. To prevent incorrect packet drops or buffering, we implemented a conversion module within the emulated TCP agents in PDNS to dynamically translate sequence numbers to match the receiver’s view. Similarly, TCP and IP checksums, which are not modeled in PDNS but are required for real packets, are generated (or stripped) just before packet emission (or reception) in the emulated TCP agent. These conversions must be performed on a per-connection basis, and state (e.g., starting sequence numbers) must be maintained for each connection.

##### 4.3.2 Real-time Pacing

In a network simulator, packet events are processed by dequeuing the next earliest event and advancing to its timestamp. This results in the simulator processing all events in an as-fast-as-possible (AFAP) mode. However, when interfaced with a real network, packet arrivals are dynamic and unpredictable. This necessitates real-time pacing, which was added to the main event processing loop of PDNS. Constructive emulation shares this real-time aspect with traditional emulation, but with the nuance that the simulator executes in parallel. To maximize runtime performance, we implemented a scheme where AFAP instances are not constrained by real-time, while non-AFAP instances are paced with real-time. This allows for intelligent load balancing across processors, ensuring that most of the simulated network operates in AFAP mode, while only a few processors containing emulated nodes are constrained by real-time.

Another challenge related to parallel execution is lookahead (LA), a crucial factor in simulators. We expanded this notion using two types of LA: simulation LA and emulation LA. Both schemes are essential for ensuring maximal parallelism in the system.

#### 4.4 Sample Execution

In an experimental setup, we used two laptops (an IBM Pentium-4 ThinkPad and an IBM Pentium-III ThinkPad) to run the proxy server and honeyd, respectively. The Code Red II worm model was used to attack a network where honeyd was integrated into a 2-CPU PDNS execution. As expected, honeyd received and logged incoming TCP malicious connections. Since no other traffic was destined for the honeypot, every incoming TCP connection constituted a scan/infection attempt. Honeyd’s virtual subsystem feature was used to log the number of infections.

Figures 10a and 10b show the propagation of the worm in a sample 200-node network (simulated on 2 CPUs) and the number of infection attempts logged by honeyd. The number of infections in the honeypot roughly tracks the total infections in the entire network, reflecting the fact that uniformly random addresses are generated by our worm model. In larger experiments, we can run the honeypot with networks of tens of thousands of nodes by employing a larger number of CPUs. While honeypot-based tracking is not novel, integrating actual honeypot installations into large virtual networks has not been realized before.

### 5. Full System Virtualization

Packet-level modeling represents a significant step towards even higher levels of system virtualization.