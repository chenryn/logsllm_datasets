```  
2\. 跟踪执行计划  
```  
digoal=# set client_min_messages=log;  
digoal=# set debug_pretty_print = on;  
digoal=# set debug_print_parse=on;  
SET  
digoal=# select count(*) from (select * from pg_class order by relpages) t;  
LOG:  parse tree:  
DETAIL:     {QUERY   
... 略  
digoal=# set debug_print_rewritten = on;  
LOG:  rewritten parse tree:  
DETAIL:  (  
   {QUERY   
... 略  
digoal=# set debug_print_plan = on;  
digoal=# select count(*) from (select * from pg_class order by relpages) t;  
LOG:  plan:  
DETAIL:     {PLANNEDSTMT   
   :commandType 1   
... 略  
```  
3\. 跟踪死锁  
```  
SESSION A :   
digoal=# create table t(id int, info text);  
CREATE TABLE  
digoal=# insert into t values (1,'test'),(2,'test');  
INSERT 0 2  
digoal=# begin;  
BEGIN  
digoal=# update t set info='new' where id=1;  
UPDATE 1  
SESSOIN B :   
digoal=# begin;  
BEGIN  
digoal=# update t set info='new' where id=2;  
UPDATE 1  
digoal=# update t set info='new' where id=1;  
SESSION A :   
digoal=# update t set info='new' where id=2;  
ERROR:  deadlock detected  
DETAIL:  Process 6173 waits for ShareLock on transaction 3268512748; blocked by process 6214.  
Process 6214 waits for ShareLock on transaction 3268512747; blocked by process 6173.  
HINT:  See server log for query details.  
```  
4\. 跟踪锁超时SQL  
```  
log_lock_waits = on  
deadlock_timeout = 1s  
SESSION A :   
digoal=# begin;  
BEGIN  
digoal=# update t set info='new' where id=1;  
UPDATE 1  
SESSION B :   
digoal=# set client_min_messages=log;  
SET  
digoal=# begin;  
BEGIN  
digoal=# update t set info='new' where id=1;  
LOG:  statement: update t set info='new' where id=1;  
LOG:  process 6499 still waiting for ShareLock on transaction 3268512749 after 1000.177 ms  
```  
5\. 跟踪超时SQL  
```  
log_min_duration_statement = 100ms  # 记录执行时间超过100毫秒的SQL  
```  
6\. 跟踪检查点,连接和断开连接信息  
```  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
```  
7\. 跟踪函数  
```  
track_functions = all  
```  
### 需要打开某些宏才可以跟踪的信息  
不推荐在生产环境中使用, 举例  
```  
[root@db-172-16-3-150 postgresql-9.3.3]# vi src/Makefile.custom  
CFLAGS+=-DLOCK_DEBUG  
CFLAGS+=-DBTREE_BUILD_STATS  
CFLAGS+=-DWAL_DEBUG  
CFLAGS+=-DOPTIMIZER_DEBUG  
CFLAGS+=-DGEQO_DEBUG  
CFLAGS+=-DCOPY_PARSE_PLAN_TREES  
CFLAGS+=-DTRACE_SYNCSCAN  
```  
重新编译安装PostgreSQL.  
1\. 跟踪btree索引建立时的信息  
```  
digoal=# create table test(id int, info text);  
digoal=# set client_min_messages=log;  
digoal=# insert into test select generate_series(1,100000),'test';  
LOG:  statement: insert into test select generate_series(1,100000),'test';  
INSERT 0 100000  
digoal=# set log_btree_build_stats =on;  
SET  
digoal=# \set VERBOSITY verbose  
digoal=# create index idx_test_1 on test(id);  
LOG:  00000: statement: create index idx_test_1 on test(id);  
LOCATION:  exec_simple_query, postgres.c:890  
LOG:  00000: BTREE BUILD (Spool) STATISTICS  
DETAIL:  ! system usage stats:  
!       0.048502 elapsed 0.040993 user 0.006999 system sec  
!       [0.328949 user 0.038994 sys total]  
!       0/0 [0/13888] filesystem blocks in/out  
!       0/1706 [0/8926] page faults/reclaims, 0 [0] swaps  
!       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent  
!       0/0 [74/1] voluntary/involuntary context switches  
LOCATION:  ShowUsage, postgres.c:4400  
LOG:  00000: BTREE BUILD STATS  
DETAIL:  ! system usage stats:  
!       0.043534 elapsed 0.031996 user 0.002999 system sec  
!       [0.360945 user 0.041993 sys total]  
!       0/4864 [0/18752] filesystem blocks in/out  
!       0/741 [0/9667] page faults/reclaims, 0 [0] swaps  
!       0 [0] signals rcvd, 0/0 [0/0] messages rcvd/sent  
!       9/1 [83/2] voluntary/involuntary context switches  
LOCATION:  ShowUsage, postgres.c:4400  
CREATE INDEX  
```  
2\. 跟踪锁  
```  
digoal=# set trace_locks=on;  
LOG:  00000: LockReleaseAll: lockmethod=1  
LOCATION:  LockReleaseAll, lock.c:1954  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2199  
SET  
digoal=# update t set info='test' where id=1;  
LOG:  00000: statement: update t set info='test' where id=1;  
LOCATION:  exec_simple_query, postgres.c:890  
LOG:  00000: LockAcquire: lock [16384,26061] RowExclusiveLock  
LINE 1: update t set info='test' where id=1;  
               ^  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,26061] RowExclusiveLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: lock [16384,26061] ExclusiveLock  
LOCATION:  LockAcquireExtended, lock.c:729  
LOG:  00000: LockAcquire: new: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(ExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: LockAcquire: new: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: LockCheckConflicts: no conflict: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: GrantLock: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(80) req(0,0,0,0,0,0,1)=1 grant(0,0,0,0,0,0,1)=1 wait(0) type(ExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: process 6499 still waiting for ShareLock on transaction 3268512749 after 1000.118 ms  
LOCATION:  ProcSleep, proc.c:1246  
LOG:  00000: process 6499 acquired ShareLock on transaction 3268512749 after 5021.627 ms  
LOCATION:  ProcSleep, proc.c:1250  
LOG:  00000: LockRelease: lock [16384,26061] ExclusiveLock  
LOCATION:  LockRelease, lock.c:1761  
LOG:  00000: LockRelease: found: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(80) req(0,0,0,0,0,0,1)=1 grant(0,0,0,0,0,0,1)=1 wait(0) type(ExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: LockRelease: found: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(80)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: UnGrantLock: updated: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(ExclusiveLock)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: UnGrantLock: updated: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: CleanUpLock: deleting: proclock(0x7f6970d98440) lock(0x7f6970d12b00) method(1) proc(0x7f6971004860) hold(0)  
LOCATION:  PROCLOCK_PRINT, lock.c:330  
LOG:  00000: CleanUpLock: deleting: lock(0x7f6970d12b00) id(16384,26061,0,1,3,1) grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0 wait(0) type(INVALID)  
LOCATION:  LOCK_PRINT, lock.c:318  
LOG:  00000: LockReleaseAll: lockmethod=1  
LOCATION:  LockReleaseAll, lock.c:1954  
LOG:  00000: LockReleaseAll done  
LOCATION:  LockReleaseAll, lock.c:2199  
UPDATE 1  
```  
3\. 跟踪wal  
```  
#ifdef WAL_DEBUG  
static void  
xlog_outrec(StringInfo buf, XLogRecord *record)  
{  
        int                     i;  
        appendStringInfo(buf, "prev %X/%X; xid %u",  
                                         (uint32) (record->xl_prev >> 32),  
                                         (uint32) record->xl_prev,  
                                         record->xl_xid);  
        appendStringInfo(buf, "; len %u",  
                                         record->xl_len);  
        for (i = 0; i xl_info & XLR_BKP_BLOCK(i))  
                        appendStringInfo(buf, "; bkpb%d", i);  
        }  
        appendStringInfo(buf, ": %s", RmgrTable[record->xl_rmid].rm_name);  
}  
#endif   /* WAL_DEBUG */  
digoal=# set wal_debug=on;  
digoal=# select pg_switch_xlog();  
LOG:  00000: INSERT @ 20E/D4BB2878: prev 20E/D4BB2848; xid 0; len 0: XLOG  
LOCATION:  XLogInsert, xlog.c:1077  
 pg_switch_xlog   
----------------  
 20E/D4BB2898  
(1 row)  
```  
其他跟踪方法, 本文不再举例.  
1\. stap  
2\. strace  
3\. gdb  
4\. perf  
...  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201302843359574/  
2\. src/include/utils/elog.h  
3\. http://www.postgresql.org/docs/9.3/static/runtime-config-developer.html  
4\. http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-WHAT  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")