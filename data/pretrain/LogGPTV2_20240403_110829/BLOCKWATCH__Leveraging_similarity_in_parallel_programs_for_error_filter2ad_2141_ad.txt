### Branch and Performance Data

| Program | LOC in Parallel Section | Total Number of Branches | Continuous Ocean | FFT | FMM | Non-Continuous Ocean | Radix | Raytrace | Water-nsquared |
|---------|------------------------|--------------------------|------------------|-----|-----|-----------------------|-------|----------|----------------|
|         | 5329                   | 4217                     | 1086             | 4772 | 3549 | 1112                  | 10861 | 2564     | 561            |
|         | 3246                   | 2487                     | 441              | 7709 | 1474 | 876                   | 110   | 395      | 543            |
|         | 99                     | 726                      | 144              |     |     |                       |       |          |                |

### Performance Evaluation

We evaluate the performance overhead of BLOCKWATCH on a 32-core processor, which consists of four 8-core AMD Opteron 6128 processors, each running at 2 GHz. To study the performance overhead and scalability of BLOCKWATCH, we vary the number of threads from 1 to 32 and measure the time spent in the parallel section of the program, both with and without BLOCKWATCH. We do not measure the checking time of the monitor thread, as it is executed asynchronously and does not significantly affect the execution time of the program’s parallel section. The SPLASH-2 programs can scale to at least 64 threads [13].

To measure the performance with 32 threads, we disable the monitor thread during the main program's execution to avoid interference, as our machine has only 32 cores and we need 33 threads to execute the program with the monitor. We have verified that the difference in execution times is negligible under this scenario for the 16-thread case. Note that the threads still send branch information to the front-end queues of the monitor, but the monitor does not process this information.

### False Positives

To verify the absence of false positives, we perform 100 error-free runs for each program instrumented by BLOCKWATCH and check if any errors are reported. The results show that BLOCKWATCH does not report any errors, indicating no false positives.

### Coverage Evaluation

We evaluate the error detection coverage of BLOCKWATCH through fault injection studies, focusing on Silent Data Corruptions (SDCs). SDCs are failures where the program completes execution, but the output deviates from the expected result. In this paper, we focus on SDCs because crashes and hangs can be easily detected through other means (e.g., heartbeats), and the program can be restarted from a checkpoint upon a crash or hang.

We use the PIN tool [19] to build a fault injector. PIN is a dynamic instrumentation framework for X86 processors. The fault injector simulates transient hardware faults that propagate to a branch instruction in exactly one thread of the program. We focus on branch instructions because BLOCKWATCH targets hardware faults that propagate to the control data of programs (i.e., data used by branches) in this study.

The fault injection procedure consists of three steps:
1. Instrument an m-thread program using PIN and record the number of branches executed by each thread at runtime (say \( n_i \) where \( 0 < i < m \)).
2. Randomly pick a thread from 1 to m, say j, and choose the jth thread to inject faults. Then select a number from 1 to \( n_j \), say k, and choose the kth branch of the jth thread at runtime to inject.
3. Flip a single bit in either the flag register or condition variable of the chosen branch instruction of the jth thread. This can lead to the branch being flipped or the condition variable being corrupted, verifying BLOCKWATCH's effectiveness in detecting branch runtime behavior deviations and control-data errors.

Only one fault is injected in each run to ensure controllability. PIN monitors all executed instructions, so the fault injection considers all branches in the program, not just those instrumented by BLOCKWATCH. Errors affecting these branches can at worst lead to additional crashes or hangs, but not to SDCs.

After injecting the fault, we track its activation and whether it is detected by the monitor. If not, we let the program execute to completion (if it does not crash/hang) and compare the results with the golden result to measure the SDC percentage. For each experiment, we inject 1000 faults of each type and count how many faults are activated (over 75% of the injected faults are activated in our experiments). We calculate the coverage as the probability that an activated fault will not lead to an SDC: \( \text{coverage} = 1 - \text{SDC}_f \), where \( \text{SDC}_f \) is the fraction of activated faults that lead to an SDC. The coverage includes faults that lead to program crashes or hangs as well as masked faults. Even an unprotected program will typically have non-zero coverage due to natural redundancies and memory protections provided by the operating system, so we measure the coverage of the program both with and without BLOCKWATCH.

### Results

#### A. Similarity Category Statistics of Branches

We run the static analysis part of BLOCKWATCH on the seven SPLASH-2 programs. Table V shows the number of branches in each program that fall into the similarity categories in Table I, as discovered by the static analysis phase of BLOCKWATCH. We also calculate the percentage of branches that belong to each similarity category based on the total number of branches in the program’s parallel section.

**Table V: Similarity Category Statistics of the Branches in 7 Programs**

| Program           | Total No. (%) of Branches | Shared | ThreadID Partial | None |
|-------------------|---------------------------|--------|------------------|------|
| Continuous Ocean  | 785                       | 30 (4%) | 12 (2%)          | 20 (2%) |
| FFT               | 44                        | 14 (32%) | 11 (25%)        | 1 (2%) |
| FMM               | 321                       | 51 (16%) | 8 (2%)          | 164 (51%) |
| Non-Continuous Ocean | 478                    | 22 (5%) | 116 (24%)       | 11 (2%) |
| Radix             | 35                        | 18 (41%) | 723 (92%)       | 11 (31%) |
| Raytrace          | 268                       | 98 (31%) | 12 (4%)         | 12 (4%) |
| Water-nsquared    | 103                       | 34 (33%) | 26 (25%)        | 8 (23%) |

In general, between 49% to 98% of the branches fall into the shared, threadID, and partial categories. This means BLOCKWATCH is able to statically identify at least 50% of the branches as similar across the seven programs. FMM and raytrace have relatively fewer similar branches, as many branches in these programs have both variables in the branch conditions as local variables, identified as belonging to the "none" category according to the propagation rules in Section III-A.

Thus, a significant fraction of branches in each program are identified as similar by the static analysis phase of BLOCKWATCH, making them eligible for checking in the runtime phase. This shows that BLOCKWATCH can be applied to commonly used parallel programs. Note that our static analysis is conservative, providing lower bounds on the number of similar branches in a program.

#### B. Performance Overheads

Figure 6 shows the execution times of the seven SPLASH-2 programs with BLOCKWATCH for 4 threads and 32 threads. The results are normalized to the execution time of the program without BLOCKWATCH (for the same number of threads), with the baseline set to 1.0.

From Figure 6, the geometric mean of the performance overhead of BLOCKWATCH is 2.15X with 4 threads and 1.16X with 32 threads. Thus, the performance overhead of BLOCKWATCH with 32 threads is only 16%, and is lower than that for 4 threads (see below for why).

**Scalability:**
We study the scalability of BLOCKWATCH by considering the variation of the geometric mean of the performance overheads (across all 7 programs) with the number of threads. The results are shown in Figure 7 as the number of threads is varied from 1 to 32.

In Figure 7, we find that the overhead of BLOCKWATCH first increases as the number of threads increases from 1 to 2, and then decreases as the number of threads increases from 2 to 32. The reason for the overhead increase from 1 to 2 threads is that the machine we use consists of four 8-core processors and is not fully symmetric. This asymmetry causes the memory access time to depend on where the threads execute. When we increase the number of threads from 1 to 2, the operating system assigns the 2 threads to cores in different processors, increasing memory access time and hurting the program with BLOCKWATCH more than the original program, thus increasing the overhead.

The reason for the decrease of overhead from 2 to 32 threads is that when the number of threads doubles, the work done by each thread reduces by half, as does the number of branches executed by each thread. However, due to communication and waiting among threads, the reduction in execution time of the program is less than 2X. Nonetheless, when the number of threads increases, the relative time spent by BLOCKWATCH reduces, and so does the overhead of BLOCKWATCH (up to 32 threads in Figure 7).

#### C. Error Detection Coverage

We study the coverage of BLOCKWATCH under two kinds of faults: branch-flip faults and branch-condition faults. The former type of fault is guaranteed to flip the branch but does not corrupt any program data directly. The latter type of fault corrupts the branch’s condition data but does not necessarily lead to a branch flip.

The results are shown in Figures 8 and 9. Note that the coverage of the y-axis in both figures starts from 50%. In the figures, \( \text{coverage}_{\text{original}} \) is the coverage of the original program, and \( \text{coverage}_{\text{BLOCKWATCH}} \) is the coverage of the program protected by BLOCKWATCH.

**1. Coverage Results for Branch-Flip Faults:**
Figure 8 shows the coverage with and without BLOCKWATCH for all programs under branch flip faults. Across the programs, the average \( \text{coverage}_{\text{original}} \) is 83%, while the average \( \text{coverage}_{\text{BLOCKWATCH}} \) is 97% for the 4-thread program and 98% for the 32-thread program. Other than raytrace, all programs have a coverage value between 99% - 100% when protected with BLOCKWATCH, whereas without BLOCKWATCH, their coverage value is between 60% (radix) and 98% (FMM). In other words, BLOCKWATCH detects almost all branch-flip faults that cause SDCs for six of the seven programs.

For raytrace, the coverage with BLOCKWATCH is about 85%, which is comparable to the coverage obtained without BLOCKWATCH (for both 4 and 32 threads). Thus, the coverage benefit provided by BLOCKWATCH for this program is negligible. There are two main reasons for this result. First, raytrace makes extensive use of function pointers, which may complicate the detection of branch-flip faults. Second, the specific structure and logic of raytrace may make it less susceptible to certain types of faults, reducing the effectiveness of BLOCKWATCH in this context.