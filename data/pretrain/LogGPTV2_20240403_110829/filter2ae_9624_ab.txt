部署合约](https://etherscan.io/tx/0x588509fdc98457887b955a4133cafaeda20ebe276e5aeaae32c816cdd082e153)
攻击者部署合约，准备攻击。
合约地址：[0x7F325efC3521088a225de98F82E6dd7D4d2D02f8](https://etherscan.io/address/0x7f325efc3521088a225de98f82e6dd7d4d2d02f8)
  2. 购买token   
tx:[2\.
购买token](https://etherscan.io/tx/0xf0784e082cd71621dd459ca1cbff12a523809216b1aa97af790ec9fe08955b92)
攻击者购买一定量token，准备攻击。
  3. 向攻击合约转账token   
tx:[3\. transfer(attacker -> attack-contract)](https://etherscan.io/tx/0x5f5cf4b0e7ad914124f2b95781069adbc0ee681884dac11d43f8c41022b51ee9)
攻击者本身购买了少量token，使用游戏合约中的transfer()，向攻击合约转账。
  4. 攻击合约withdraw()   
tx:[4\.
withdraw()](https://etherscan.io/tx/0x87b1d2811af27b358a585194264cfa6266f37b13b72e1d4f98a8633f09966880)
攻击合约调用了God的withdraw()，攻击合约因此获得了红利对应以太币【不重要】
  5. 攻击合约transfer()   
tx:[5\. transfer(attack-contract ->
attacker)](https://etherscan.io/tx/0x5f5cf4b0e7ad914124f2b95781069adbc0ee681884dac11d43f8c41022b51ee9)
将token转回，攻击合约token不变，红利溢出。
  6. 攻击合约reinvest()   
tx:[6\.
reinvest()](https://etherscan.io/tx/0x368688a944059fdd657e7842d8762b05250bd45f3a2a16cbae1b29727023b00f)
再投资，将红利买token，可以大量购买token。
  7. 攻击合约sell()   
tx:[7\.
sell()](https://etherscan.io/tx/0xa0ba99f78ab8c346256a2414a9aa3c25d84b09423ad84da2998661c130edee36)
卖出一部分token，因为发行的token过多，会导致token价值太低，提取以太币较少。
  8. 攻击合约transfer()   
tx:[8\. transfer(attack-contract ->
受益者)](https://etherscan.io/tx/0x446a009cc560abbf9fcf95af1507c5f5e9a40e96409cefcbb42ebf2fdad48d23)
把智能合约账户的token转给受益者(0xc30e)一部分。
  9. 受益者sell()+withdraw()   
受益者(0xc30e)卖掉token，并withdraw()红利，得到以太币。
### 0x05 更简单的攻击手法
回顾上述攻击流程，攻击成立主要依赖 **红利由 token - payout 得到，时常变化，而不是记录** 这个特性。
在交易token时，变化的只是双方持有的token数，双方的红利应该不变，换言之，就是用户的payout也需要变化才能保证红利变化。
漏洞就在于在用户和合约交易token时，合约方的payout并没有相应的增加，导致红利平白无故的多出来，最终导致了凭空生币。
这样一来，我们就可以使用更简单的攻击手法。
下面是详细的介绍：
  1. 攻击者 ==转账==> 攻击合约   
合约收到转账时，红利本应为0，却变得很多，账户可用资金变得很多。
  2. 攻击合约 withdraw()   
把可用的钱提款为eth，token不变。
  3. 攻击合约 ==转账==> 攻击者   
token原路返回攻击者，token不变，但合约中多出了 eth 。
我们发现智能合约在这个过程中，因为接受转账未增加payout，导致在第二步中可以提取不少的以太币，并在第三步将token原路转回。
这一过程，合约账户便可凭空得到以太币。而只需要支付一部分手续费以及token的轻微贬值。如此反复创建新的合约，并按以上步骤，可以提出God.Game中大量的以太币。
#### 注意事项
此攻击方法理论成立，还需仔细考察手续费和token价值变化等细节问题，但从合约中提取部分以太币是可行的。
#### 具体分析
  1. 购买token   
攻击者购买一定量token，准备攻击。  
  2. 向攻击合约转账token   
攻击者本身购买了少量token，使用游戏合约中的transfer()，向攻击合约转账。  
  3. 攻击合约调用 withdraw()   
withdraw() 的主要逻辑如下：  
攻击合约调用withdraw()，通过以太币的形式取出利息 dividents。  
  4. 攻击合约transfer()   
将token转回，攻击者token恢复为1000。  
### 0x06 总结
以上就是God.Game合约的分析，以及本次攻击的复现。这次攻击的发生距离合约部署仅有两天，整个攻击流程非常巧妙。按照前面的分析，仅通过合约账户的withdraw()就可以提出以太币。但攻击者还利用了红利溢出，进而获得了大量的token。根据上面多方面因素，虽然主办方在事件发生后声明自己是受害者。但是根据telegram上记录，主办方在游戏开始之前就再未查看玩家群。这些现像，引人深思。
区块链游戏看似充满诱惑，实则迷雾重重。无论如何谨慎，都有可能跌入深渊。谁也不知道游戏背后的创建者究竟有什么打算，但人皆贪婪，有钱财的地方，必有隐患。
### 0x07 相关链接
  * PoWH 3D 源码分析   
  * God.Game官网   
* * *
**智能合约审计服务**
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队： https://www.scanv.com/lca/index.html
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
**区块链行业安全解决方案**
黑客通过DDoS攻击、CC攻击、系统漏洞、代码漏洞、业务流程漏洞、API-Key漏洞等进行攻击和入侵，给区块链项目的管理运营团队及用户造成巨大的经济损失。知道创宇十余年安全经验，凭借多重防护+云端大数据技术，为区块链应用提供专属安全解决方案。
欢迎扫码咨询：
* * *
### 附录1 此次事件相关地址
  * God合约创建者 0x802dF0C73EB17E540b39F1aE73C13dcea5A1CAAa
  * God合约地址 0xCA6378fcdf24Ef34B4062Dda9F1862Ea59BaFD4d
  * 最终以太币存储的账户 0xC30E89DB73798E4CB3b204Be0a4C735c453E5C74
  * 攻击者 0x2368beb43da49c4323e47399033f5166b5023cda
  * 攻击合约 0x7f325efc3521088a225de98f82e6dd7d4d2d02f8
* * *
### 附录2 God.Game合约的函数分析
  * buy() - 购买token
  * sell() - 出售token
未使用的分红增加，可用来withdraw(提款)或reinvest(再投资)。
  * withdraw() - 将分红清0，分红换为eth取出
清零分红，获得相应的eth。
  * reinvest() - 再投资
消耗掉账户的分红，换成token。
  * transfer() - 转账
from:
to:
### 附录3 根据昊天塔逆向结果，构造的攻击合约
    pragma solidity ^0.4.23;
    contract Attack {
        address public owner;
        address public victim;
        function Attack() payable { owner = msg.sender; }
        function setVictim(address target) public { victim = target; }
        function withdraw() payable public {
            victim.call(bytes4(keccak256("withdraw()")));
        }
        function reinvest() payable public {
            victim.call(bytes4(keccak256("reinvest()")));
        }
        function transfer(address to_, uint256 amount) payable public{
            victim.call(bytes4(keccak256("transfer(address,uint256)")),to_,amount);
        }
        function () payable public{}
        function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool){
          return true;
        }
    }
* * *