We have a solid suite of unit tests for our codebase, and these tests typically complete within two minutes. We also utilize TeamCity to build and run tests after each commit. However, we still encounter issues where developers "forget" to run all the tests before committing, leading to failed builds in TeamCity. If a commit is made late in the day, say at 6 PM, the build may remain broken overnight.

The term "forgets" is somewhat generic, as there are other common reasons why even a developer who remembers to run the tests might still cause a failure in TeamCity. For example:
- A developer might only check in some of the modified files in their workspace.
- A file might be modified outside of Eclipse, causing the IDE's team synchronization perspective to not detect it as dirty.

How does your organization handle these situations?

We are considering implementing a "check-in procedure" for developers, which would involve an automated tool that runs all unit tests and then commits all modified files in the workspace. Do you have any experience with such a process? Are you aware of any tools that could facilitate this? Our development environment is Python, using the PyDev plugin for Eclipse.

---

In my experience, this issue is more of a cultural and procedural challenge rather than a deficiency in the automated systems. While improving the systems can help, it is crucial for developers to understand the implications of their commits and to test their changes thoroughly before committing. 

To address this, consider the following steps:

1. **Education and Training**: Ensure that all developers understand the importance of running all tests before committing. Regular training sessions and reminders can help reinforce this practice.

2. **Automated Pre-Commit Hooks**: Implement pre-commit hooks in your version control system (e.g., Git) to automatically run all unit tests before allowing a commit. This can catch many issues before they reach TeamCity.

3. **Continuous Integration Best Practices**: Encourage frequent, small commits and continuous integration. This helps in identifying and fixing issues early.

4. **Tooling**: There are several tools that can help automate the check-in process. For Python and Eclipse, you might consider:
   - **Git Hooks**: Custom scripts that run tests and ensure all changes are committed.
   - **Pre-commit**: A framework for managing and maintaining multi-language pre-commit, pre-push, and commit-msg hooks.
   - **Eclipse Plugins**: Look for plugins or extensions that integrate with your CI/CD pipeline and enforce pre-commit testing.

5. **Code Reviews**: Implement a code review process to ensure that changes are thoroughly reviewed and tested by another set of eyes before being merged into the main branch.

By combining these strategies, you can create a more robust and reliable development workflow.