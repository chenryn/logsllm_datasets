2. R is attacked (so v1 = m), and for every 1 < j < i it
follows that vj announcing the route (vj, . . . , d) to vj+1
does not violate Ex.
Intuitively, an AS’s set of perceivable routes captures all
the routes this AS could potentially learn during the S*BGP
convergence process. All non-perceivable routes from an AS
can safely be removed from consideration as the Ex condi-
tion ensures that they will not propagate from the destina-
tion/attacker to that AS.
two-rooted tree (rooted at d and m on the graph, using a
BFS computation in which only customer-to-provider edges
are traversed.Initially, d has path length 0 and m has path
length 1 (to capture the fact that m announces that it is
directly connected to d in the attack of Section 3.1).
We set PR0(vi) = PR(vi, m, d) and BPR0(vi) = BPR(vi, S, m, d)
for every AS vi. We let r be the FR iteration and initialize
it to r := 0.
While there is an AS s /∈ I such that PRr−1(s) contains
at least one customer route, we “ﬁx” the route of (at least)
one AS by executing the following steps:
1. r++;
2. Select the AS vi /∈ I that has the shortest customer
route in its set BPRr−1(vi) (if there are multiple such
ASes, choose one arbitrarily);
3. Add vi to I; set Nxt(vi) to be vi’s next-hop on the route
in BPRr−1(vi) selected according to its tie-breaking rule
TB;
4. Remove, for every AS vj, all routes in PRr−1(vi) that
contain vi but whose suﬃx at vi is not in BPRr−1(vi)
to obtain the new set PRr(vi); set BPRr(vj) to be vj’s
most preferred routes in PRr(vi)
5. Add all ASes vj such that PRr(vi) = ∅ to I.
Step II: the FPeeR subroutine. This step starts with
I and the conﬁguration of the routing system and the PR
and BPR sets the way it is after execution of FCR (all the
ASes discovered the FCR step have their route selections
locked), i.e., I contains only d, m, and ASes with either
empty or customer routes. We now use only single peer-to-
peer edges to connect new yet-unexplored ASes to the ASes
that were locked in the partial routing tree in the 1st stage
of the algorithm.
While there is an AS s /∈ I such that PRr−1(s) contains
at least one peer route, the following steps are executed:
1. r++
2. select an AS vi /∈ I;
3. add vi to I; set Nxt(vi) to be vi’s next-hop on the route
in BPRr−1(vi) selected according to its tie-breaking rule
TB;
4. remove, for every AS vj, all routes in PRr−1(vi) that
contain vi but whose suﬃx at vi is not in BPRr−1(vi)
to obtain the new set PRr(vi); set BPRr(vj) to be vj’s
most preferred routes in PRr(vi)
5. add all ASes vj such that PRr(vi) = ∅ to I.
Step III: The FPrvR subroutine. We now run a BFS
computation in which only provider-to-customer edges are
traversed, that is, only ASes who are direct customer of
those ASes that have already been added to the partial two-
rooted tree are explored. This step starts with I and the
conﬁguration of the routing system and the PR and BPR
sets the way it is after the consecutive execution of FCR
and FPeeR.
While there is an AS s /∈ I such that PRr−1(s) contains
at least one provider route, we execute the identical steps as
in FCR, with the exception that we look for the vi that has
the shortest provider route in its set BPRr−1(vi).
We say that a route (vi−1, . . . , v1, d) is a customer route
if vi−1 is a customer of vi. We deﬁne peer routes and
provider routes analogously. We say that a route R =
{vi, vi−1, ..., v1, d} contains AS x, if at least one AS in {vi, vi−1, ..., v1, d}
is x.
PR and BPR sets. Let PR(vi, m, d) be the set of perceiv-
able routes from vi for the attacker-victim pair (m, d) when
attacker m attacks destination d using the attack described
in Section 3.1. (We set m = ∅ when there is no attacker.)
Given a set of secure ASes S, for every AS vi we deﬁne
the BPR(vi, S, m, d) to be the set of all perceivable routes in
PR(vi, m, d) that are preferred by vi over all other perceiv-
able routes, before the arbitrary tiebreak step TB, according
to the routing policy model (i.e., security 1st, 2nd, or 3rd)
under consideration. (Again, we set m = ∅ when there is no
attacker and S = ∅ when no ASes are secure). We deﬁne
Nxt(vi, S, m, d) to be the set of all neighbors of vi that are
next hops of all routes in BPR(vi, S, m, d). We will just use
Nxt(vi) when it is clear what S, m and d are.
Observe that in each of our models, all routes in BPR(vi, S, m, d)