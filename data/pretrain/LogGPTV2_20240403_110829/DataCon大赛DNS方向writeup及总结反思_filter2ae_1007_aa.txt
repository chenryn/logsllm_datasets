# DataCon大赛DNS方向writeup及总结反思
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 题目一 DNS恶意流量检测
###  0x00 题目解读
题目介绍是在赛前就给出的，从介绍中我们可以了解到
  * 目标  
> 找出五种攻击流量，并将其进行分类
>
> 意味着首先需要了解DNS攻击的种类及其特点
  * 数据  
> 描述中并没有讲太多，仅仅提到`给定的DNS流量`,对这个流量的形式没有说明，猜测应该是pcap文件或者是处理过的数据文件。
>
> 如果是pcap文件则需要由数据包分析的知识，可能需要利用程序对数据包进行处理，如果是后者，便简单许多，不用再进行数据处理。
>
>
> 因为数据包再赛前也提供下载，设置了密码，无法提前获得数据。但是虽然不能获取数据但是解压后可以看到文件夹或文件的的名字，这样基本验证了提供的数据文件pcap文件。
  * 提交  
>
> 提交提供了精简版的提交格式，详细要求会提供一个文档，在上一步已经看到这个文件名。着重强调提交的文件类型，应该是和之后的得分计算有关。类型或格式不当，计算得分的程序会无法计算。
  * 评分  
> 评分开始并没有讲的很明白，只是说明在4号会有一次评分。但是可以知道在赛程中间会有评分，可以通过评分调整自己的答案结构。
比赛开始，获得压缩包密码，解压文件后，得到
  * `example_dns1.zip`：zip压缩文件，打开后发现应该是提交的样本实例。
  * `q1_final.pcap`：pcap文件，看下大小，是这次的数据文件无疑了。
  * `Readme-第一题.pdf`：赛题详细介绍。  
> 确定最终题目：准确判断出五种DNS攻击，并说明PCAP文件中哪些数据包是攻击流量。
>
>
> 提交：2个csv文件(攻击分类和数据包序号)，writeup，解题代码，zip格式打包。不要添加密码，不要打包文件夹。writeup影响最终得分，未详细说明，应该是想了解选手对DNS攻击的了解程度。
>
> 最终得分取最后提交的得分，不是取最高分。猜测可能是因为赛程过程中有多次提交，如果保存中间文件比较复杂，而最终评测还需要提交文件做判定。
>
> 重点：
>
>     * 数据包仅包含为五类攻击，确定数据包的攻击时可以使用。
>     * 评分与选手攻击编号无关，不需要关心攻击类型的排序。
>     *
> 提交攻击的请求包，那么是否可以理解，如果某种DNS攻击并不能在请求中体现出来或者不需要攻击者进行请求，应该不存在于这个数据包中，缩减攻击类型判定的范围。
>     * 评分规则：得分由每一类得分累加而得，每类攻击占比20%。
>
>
> 通过计算规则我们可以知道，每类攻击有固定的占比，所以不会因为某种攻击数量多而占去大部分分数，解题过程中就可以单独提交某种类型，进行测试；计算不是简单按照提交中正确数据包个数，如果出现误判会进行扣分，所以在提交后扣分的原因会有两个，一是提交数据包太少，攻击数据包没有找全，二是提交数据包太多，其中包含了太多错误分类，当然也会同时存在数据包不全并且包括错误分类的情况。
###  0x01 解题思路
在初步查看数据包后，我们队决定从两个方面入手，一利用聚类算法对数据包进行聚类，再对聚类的后的每个分类进行校验；二是对数据包进行手工查验。当然这两个方法是同步进行的。无论使用哪个方法，首先要做的第一步就是确定DNS攻击的类别。
**DNS攻击类别分析**
我们的思路是想把所有的攻击分类先列出来，在根据攻击特征进行查找，但后来发现，题目中出现的攻击并不在我们最初列出的攻击中，说明我们对攻击理解的还不够全面。接下来对攻击类型进行简单介绍。
  1. 拒绝服务攻击拒绝服务攻击分为两种，一是面向DNS服务器的，可以称为洪泛攻击，目的是使得DNS服务器无法提供服务；二是面向客户机的，称为DNS反射放大攻击，通过伪造数据包，伪装客户机发送解析请求，使得DNS回应包阻塞指定客户机的网络通路，目的是使得客户机无法正常工作。分析攻击的特征：对第一种情况，可能会存在某一或某些主机短时间内向同一DNS服务器发送大量解析请求，造成目标DNS服务器的拒绝服务  
> 【攻击可能存在，使用某时间段内是否存在大量向同一服务器的解析请求，且造成了服务器不正常工作】
第二种情况，是存在一个主机向DNS服务器发送大量解析请求，且请求字段为`ANY`，而服务器返回的数据包远远大于平常的返回包
> 【攻击可能存在，查看是否存在单一主机非常集中的请求`ANY`解析，其`transaction
> ID`可能会出现重复，且服务器返回的数据包远远大于正常数据包】
  2. DNS欺骗攻击欺骗攻击同样包含很多类别，这里将DNS劫持和中间人攻击放在这里，同时还有DNS缓存注入。DNS劫持一般的操作是在服务器的层次进行攻击。  
> 【攻击存在可能性不大，判定难度较大】
中间人攻击同样也多发生在服务器层次。
> 【攻击存在可能性不大，判定难度较大】
缓存注入攻击有两种方式，一种是传统的对客户机的解析请求直接进行伪造响应包，将目标IP直接注入。另一种是Kaminsky缓存投毒，这种攻击方式是攻击者首先伪装客户机解析一个服务器一定不存在的域名，然后在服务器进行递归解析时，攻击者向服务器发送伪造的响应包，同时将域名的权威服务器加入额外字段，一旦服务器将其缓存，则被投毒。
> 【结合题目要求，kaminsky攻击可能存在，判定条件为某一主机向服务器解析大量不存在域名，且存在大量返回`不存在域名`的响应，其额外字段为相同的值】
  3. DNS隐通道利用DNS数据包越过防火墙规则，进行传输数据。  
> 【攻击存在可能性不大，若攻击存在可能存在明显的构造的特殊的解析请求】
  4. DNS区域传送区域传送是将某台服务器的区域文件传送至另一台服务器，主要目的是实现快速的服务器更换。但若设置不当，可能造成区域文件泄露。  
> 【攻击可能存在，关注区域文件传送的数据包】
  5. NSEC枚举这是针对DNSSEC的一种攻击，在未使用NSEC3的DNSSEC中，若查询区文件中不存在的域名，会以NSEC记录的形式提供靠近其的最近的下一条域名，这就造成了可能构造特殊请求，来遍历区文件，造成区文件的泄露。  
> 【攻击可能存在，关注NSEC记录】
以上就是最初的攻击分类，类别不够完整，在之后的分析过程中在再补充。
**流量聚类分析**
**数据基本特征提取**
通过 wireshark 查看 q1_final.pcap 数据，查看数据中的可用字段，分析后选择如下 28 个字段:
字段 | 描述 | 字段 | 描述  
---|---|---|---  
frame.len | 数据长度 | dns.flags.authenticated | 服务器是否为域权威服务器  
ip.src | 源 ip | dns.flags.checkdisable | 非认证数据是否可接收  
ip.dst | 目的 ip | dns.flags.rcode | DNS reply code  
udp.srcport | 源 udp 端口号 | dns.count.queries | s数据包中 DNS 请求数  
udp.dstport | 目的 udp 端口号 | dns.count.answers | 数据包中的应答数  
eth.src | 源 MAC 地址 | dns.count.auth_rr | 数据包中权威记录数  
eth.dst | 目的 MAC 地址 | dns.count.add_rr | 数据包中额外记录数  
dns.id | DNS Transaction ID | dns.qry.name | DNS 请求名  
dns.flags.response | DNS请求/响应标志 | dns.qry.class | DNS 请求类型  
dns.flags.opcode | DNS opcode | dns.resp.name | DNS 响应名  
dns.flags.authoritative | 应答是否被服务器认证 | dns.resp.type | DNS 回复类型  
dns.flags.truncated | 消息是否剪裁 | dns.resp.ttl | DNS 响应生存时间  
dns.flags.recdesired | 是否递归查询 | dns.resp.z.do | DNS 是否支持 DNSSEC  
dns.flags.reavail | 服务器是否能递归查询 | frame.time_relative | frame 的相对时间  
使用 tshark 命令从 pcap 数据抽取上述字段，保存到 csv 文件中:
    tshark.exe -r q1_final.pcap -T fields -e frame.number -e frame.time_relative -e ip.src -e ip.dst -e frame.len -e eth.src -e eth.dst -e udp.srcport -e udp.dstport -e dns.id -e dns.flags.response -e dns.flags.opcode -e dns.flags.authoritative -e dns.flags.truncated -e dns.flags.recdesired -e dns.flags.recavail -e dns.flags.authenticated -e dns.flags.checkdisable -e dns.flags.rcode -e dns.count.queries -e dns.count.answers -e dns.count.auth_rr -e dns.count.add_rr -e dns.qry.name -e dns.qry.type -e dns.qry.class -e dns.resp.name -e dns.resp.type -e dns.resp.ttl -e dns.resp.z.do -E separator="," -E aggregator=" " -E header=y -E occurrence=f -E quote=d > q1_final.csv
**数据特征分析**
使用 jupyter notebook 分析数据：
  1. 导入必要的库 
        import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    # show plot in jupyter notebook
    %matplotlib inline
  2. 读取数据 
        # read data
    file_name = 'q1_final.csv'
    data = pd.read_csv(file_name,index_col=0)
  3. 分析数据基本特征的分布，选择值分布较为分散的特征，如果只有一个值的特征则直接删除：
  * eth.src 和 eth.dst 只有两个值，不能很好的作为可区分特征，故删除；
  * dns.qry.class 只有一个值，根本没有区分度，故删除；
  * dns.srcport 和 dns.dstport 的值相当分散，这是由于客户端可以随机生成端口号所致，故作用不大，删除
  * ip.src 和 ip.dst 以及 dns.id 分布随机，可以用于标识一个 frame，但不能反映 frame 的行为，故不使用；同时发现主要的 ip 地址为 `45.80.170.1` ，该地址相关的 frames 占总 frames 数的 98% 左右，故猜测为正常数据诸多，构建模型时可以先不使用该部分数据，观察聚类的效果；
**特征设计**
根据已经得出的每种攻击类型的特征进行特征设计，初步设想以一个 frame 作为基本处理单元，但是一个 frame只能为 DNS 请求或者 DNS
响应，并不能完整的反映 DNS 会话的整个流程，因此使用集合 `{ip.src, ip.dst, udp.srcport, udp.dstprot,
dns.id}` 标识一个 DNS 流， 故一个 DNS 流中至少包含一个请求的 frame ，但实际中绝大部分 DNS 流都包含 DNS 请求和响应两个
frame。那么 DNS 流 的特征如何构造才能区分正常的和异常的的 DNS 流呢？考虑到可能的攻击方式，异常的情况分析如下：
  * 对于放大攻击, DNS 流中的响应的长度应该会很大, 同时响应长度和请求长度之比会很大;
  * 对于 DNS 缓存投毒攻击, DNS 流中 DNS 请求 frame 的源地址可能和很多不同的服务器进行DNS会话;
  * 对于区域传送攻击, DNS 流中 请求类型 `dns.qry.type`字段为255;
  * 其它异常情况还可能有 DNS 流中只有请求没有响应, DNS 持续时间异常, DNS 流中的权威记录和额外记录过少等;
根据分析,得到如下特征：
特征名 | 含义  
---|---  
#frames | DNS 流 中的 frame 数  
qry.len | 请求长度  
resp.len | 请求相对应的响应长度  
len.ratio | 响应长度和请求长度的比值  
duration | 会话持续时间  
servers | 某一主机连接的不同服务器数量  
flags.resp | 标记区分请求和响应  
flags.opcode | 请求执行的操作  
flags.rcode | DNS 流中是否有响应标  
qry.type | 解析请求类型  
resp.type | 响应类型  
#auth_rr | 数据包中权威记录数  
#add_rr | 数据包中额外记录数  
**聚类**
使用 `Python scikit-learn 库中 sklearn.cluster`
模块中的聚类算法进行聚类，首先考虑使用小的数据集上进行特征抽取和聚类,验证特征的有效性, 因为根据对数据基本特征分析时发现的主要 ip地址为
`45.80.170.1` , 与该地址相关的数据占 98% 左右, 所以可以先过滤调这部分数据构造一个小数据集上进行实验性验证。
  1. 在 jupyter notebook 中完成数据中缺失值的处理
  2. 编写 python 脚本完成数据特征的抽取, 保存成 hdf 文件
  3. 在 jupyter notebook 中完成聚类模型的构建
最终分类结果如下:
类别 0: DNS cache pullution
ip | frame 数  