### User Interface and Functionality Issues

Some programs can produce unintuitive user experiences. For instance, on certain laptops, Microsoft PowerPoint may fail to display a slide show when it incorrectly assumes, based on Registry information, that there is a second monitor to which it should direct the video output.

#### Problem Manifestation
- **Unstable/Unusable System**
- **Cannot Perform Function/Action**
- **Unanticipated Response**
- **Unanticipated Side-Effect**
- **Cannot Locate UI**
- **UI Disappears, Functionality OK**
- **Unexpected Program Adaptation**

**Figure 2: Summary of Problem Manifestations for Two Data Sets**

| Category                         | TMDS (out of 5,379) | SVDS |
|----------------------------------|---------------------|------|
| Unstable/Unusable System         | 143                 | 6    |
| Cannot Perform Function/Action   | 4,212               | 32   |
| Unanticipated Response           | 676                 | 23   |
| Unanticipated Side-Effect        | 196                 | 14   |
| Cannot Locate UI                 | 16                  | 9    |
| UI Disappears, Functionality OK  | 65                  | 12   |
| Unexpected Program Adaptation    | 71                  | 4    |

The data in Figure 2 indicates that the inability to perform a function or action was the most frequently reported problem. Among the remaining categories, "Unanticipated Response" had the highest case count. These issues are more frustrating for users than customization nuisances or user interface problems. Additionally, "Unstable/Unusable System" also contributes significantly to user frustration, necessitating careful investigation.

### Scope of Impact

This category captures the impact of Registry problems on a machine's functionality:

1. **Impact Scope I**: The impact can be system-wide or specific to a particular user.
2. **Impact Scope II**: A problem can affect a single application (e.g., Internet Explorer), multiple applications (e.g., all Microsoft Office applications), or the entire system. This information helps us provide feedback to the appropriate development groups (OS or applications) on potential issues to consider.

**Figure 3: Impact Scope of TMDS and SVDS Problems**

| Impact Scope I       | TMDS (out of 5,379) | SVDS |
|----------------------|---------------------|------|
| System-Wide          | 4,312               | 59   |
| User-Specific        | 1,067               | 41   |

| Impact Scope II      | TMDS (out of 5,379) | SVDS |
|----------------------|---------------------|------|
| Single Application   | 994                 | 48   |
| Multiple Applications| 3,081               | 16   |
| System Level         | 1,304               | 36   |

The categorization in Figure 3 shows that system-wide problems are more common than user-specific ones. This suggests that more misconfigurations are caused by applications or OS components incorrectly updating Registry entries and/or non-robustly reading Registry data, leading to inappropriate settings. The even distribution of problems between application-level and system-level impacts indicates that addressing PC fragility requires coordinated efforts from both OS and application developers.

### Addressing PC Fragility

We identify three key areas to address PC fragility:

1. **Monitoring Tools**: For existing applications running on a released OS platform, a monitoring tool can detect known bad changes to Registry entries.
2. **Fault Injection Tools**: For applications under development, a fault injection tool can help verify immunity to known problems.
3. **Access Protection Mechanisms**: For designing a new operating system, we describe and evaluate access protection mechanisms that are most effective according to our fragility data.

**Figure 4: Categorization of Text-Mined and Strider-Verified Data Based on Monitoring, Fault Injection, and Access Protection Axes**

| How to Monitor              | TMDS (out of 5,379) | SVDS |
|-----------------------------|---------------------|------|
| Known Bad Entry             | 2,746               | 35   |
| Potential Bad + Symptom Match| 2,390               | 60   |
| Can’t Help                  | 243                 | 5    |

| What to Inject              | TMDS (out of 5,379) | SVDS |
|----------------------------|---------------------|------|
| Bad Data                   | 832                 | 22   |
| Data Legal but Considered Bad| 933                 | 39   |
| Item Exists                | 278                 | 5    |
| Item Missing               | 136                 | 24   |

| How to Protect              | TMDS (out of 5,379) | SVDS |
|-----------------------------|---------------------|------|
| OS Lockdown                 | 2,454               | 14   |
| Check Rules Upon Modification| 146                 | 1    |
| Copy on Write               | 263                 | 12   |
| Log Changes                 | 325                 | 5    |
| Can’t Help                  | 12                  | 9    |
| Ignore                      | 296                 | 18   |

### Monitoring Techniques

During the interim period between discovering a Registry problem and its subsequent repair by developers, PC monitoring is essential. Maintaining a knowledge base of known bad predicates from past Registry troubleshooting provides an invaluable resource for problem diagnosis and prevention. Monitoring can be performed either periodically or by registering to receive change notifications. Such protective measures can prevent problems from causing eventual failures and ease troubleshooting after a failure occurs.

In general, the presence or absence of a Registry entry's data can positively identify problems. For example, the SirCam virus changing the data of the `HKEY_CLASSES_ROOT\exefile\shell\open\command\(Default)` Registry entry to `C:\recycled\sirc32.exe "%1" %*` would generate a "File Not Found" error when the user double-clicks an `.exe` file. The presence of `C:\recycled\sirc32.exe "%1" %*` can be monitored to positively identify the problem. Similarly, the absence of `HKEY_CLASSES_ROOT\CLSID\{00021401-0000-0000-C000-000000000046}\shellex\MayChangeDefaultMenu` can be monitored to positively identify the problem of dysfunctional shortcuts that fail to launch an application when the user double-clicks them.

The breakdown in Figure 4 shows that many of the problems we studied can be immediately flagged upon detection of known bad Registry entries. In other cases, the software used by the user and the underlying environment dictate if the data of a Registry entry is problematic. Many configurations are purely for customization purposes; an unusual configuration in one user's perspective may not necessarily be a problem, rather a valid choice made by a different user or the same user at an earlier time. In such cases, the monitor must record the "potentially bad" Registry entry and await user complaint to perform symptom-based troubleshooting. It is important not to warn the user upon detecting every known "potentially bad" entry, as numerous false positives can eventually lead the user to disable the monitoring tool.

For example, if `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\EnableAutodial` is set to 1, some versions of Windows Media Player's "Open URL" function will fail even if the user has internet connectivity. However, some users do not use this application and may set `EnableAutodial` to 1 for preferred functionality of other internet applications. The monitor is unsure whether the user intended to make this change, as it is a valid customization. Alternatively, the monitor can be fully prepared to point to the entry as the root cause if and when the user complains with a symptom matching previously reported occurrences.

Policy-related settings also belong to the "Potential Bad Entry + Symptom Matching" category and account for a significant percentage of the cases we studied. In a corporate environment, policy-related Registry entries allow the IT organization to disable certain functions on employees' desktops to increase stability and simplify maintenance. Many such settings have caused user complaints as they could not perform functions that were normally available to them outside the corporate environment. We should not warn all employees about potential problems when the IT organization implements a new policy because most people may never use the disabled function. Nevertheless, our monitor can quickly point to the root cause when a user actually complains with a matching symptom.

A small percentage of problems are categorized as "Can't Help." These primarily consist of highly case-specific data corruption that is difficult to monitor and generally valid settings that cause problems only in specific situations. For example, an application window may not display properly if window position-related Registry data is corrupted; a browser proxy setting may cause confusing network connection problems if the user inadvertently uses it in an environment where the specified proxy cannot be found.

We believe our monitoring methodology is feasible as there are over a dozen rule-based monitoring tools already in use. Examples include Registry Mechanic, Registry Healer, and Registry Medic, which incorporate rule-based mechanisms to identify dubious Registry entries. However, these tools monitor upon user demand.