made  by  some  programs  can  be  unintuitive  to  the  user. 
For  example,  on  some  laptops,  Microsoft  PowerPoint 
fails to display a slide show when it incorrectly assumes, 
based on Registry information, that there exists a second 
monitor to which it should direct the video output. 
Problem Manifestation 
    Unstable/unusable system 
    Cannot perform function/action 
    Unanticipated response 
    Unanticipated side-effect  
    Cannot locate UI 
    UI disappears, functionality ok 
    Unexpected program adaptation  
Figure  2:  This  table  summarizes  the  manifestation 
categorization for the two data sets. The frequency of 
problems (out of 5,379) in TMDS is parenthesized. 
TMDS 
2    (143) 
62  (4212) 
18  (676) 
9    (196) 
1    (16) 
3    (65) 
5    (71) 
SVDS 
6 
32 
23 
14 
9 
12 
4 
The  data  in  Figure  2  reveals  that  user  inability  to 
perform  a  function/action  was  the  dominant  form  of 
reported  problems.  Among 
remaining  categories, 
“Unanticipated  response”  has  the  highest  case  count. 
Intuitively,  such  problems  are  more  frustrating  to  users 
than  customization-related  nuisances  and  user  interface 
issues.  Finally,  the  category  of  “Unstable/unusable 
system”  contributes  a  non-trivial  amount  of  problems; 
each  problem  needs  to  be  carefully  investigated as  they 
cause a high degree of user frustration. 
4.2. Scope of Impact 
This  category  captures  the  impact  of  Registry 
problems on a machine’s functionality:  
(1)  Impact Scope I – The impact can be system-wide or 
affecting only a particular user. 
(2)  Impact  Scope  II  –  A  problem  can  impact  a  single 
application 
Explorer),  multiple 
applications  (e.g.,  all  Microsoft  Office  applications)  or 
the entire system. This information enables us to provide 
feedback  to  appropriate  development  groups  (OS  or 
applications) on potential tribulations to consider.  
Internet 
(e.g., 
Impact Scope I 
    System-wide 
    User-specific 
Impact Scope II 
    Single Application 
    Multiple Applications 
    System Level 
TMDS 
71  (4312) 
29  (1067) 
28  (994) 
31  (3081) 
41  (1304) 
SVDS 
59 
41 
48 
16 
36 
Figure 3: This table shows the impact scope of TMDS 
and SVDS problems. The frequency of problems (out 
of 5,379) in TMDS is parenthesized. 
The  categorization  presented  in  Figure  3  suggests 
that  reported  system-wide  problems  are  more  common 
than  user-specific  problems.  This  observation  implies 
that  more  mis-configurations  are  caused  by  application 
programs  or  OS  components 
incorrectly  updating 
Registry  entries  and/or  non-robustly  reading  Registry 
data, 
inappropriately  modifying 
settings. The approximate even distribution of problems 
between  application-level  and  system-level 
impact 
suggests  that  tackling  PC  fragility  problems  requires 
coordinated  efforts  from  both  OS  and  application 
developers. 
than  user  actions 
5.  What We Can Do About PC Fragility  
We identify three areas of focus to address the issue 
of  PC  fragility.  For  existing  applications  running  on  a 
released  OS  platform,  a  monitoring  tool  can  detect 
known bad changes to Registry entries. For applications 
that  are  under  development,  a  fault  injection  tool  can 
help verify immunity to known problems. For designing 
a new operating system, we describe and evaluate access 
protection mechanisms that are most effective, according 
to  our  fragility  data.      Figure  4  summarizes  the 
categorization  of  text-mined  and  strider-verified  data 
based  on  monitoring, 
injection  and  access 
protection axes. 
fault 
How to Monitor 
    Known bad entry 
    Potential bad + symptom match 
    Can’t help 
What to Inject 
    Bad data  
    Data legal but considered bad  
    Item exists 
    Item missing 
TMDS 
22  (2746) 
71  (2390) 
7    (243) 
SVDS 
35 
60 
5 
22  (832) 
39  (933) 
3    (278) 
5    (136)
24 
41 
9 
10 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:36 UTC from IEEE Xplore.  Restrictions apply. 
    Key exists 
    Key missing 
    Bad key 
    Bad sub-key 
    Type corrupt 
How to Protect 
    OS lockdown 
    Check rules upon modification 
    Copy on Write 
    Log changes 
    Can’t help 
    Ignore 
7 
9 
0 
0 
0 
20 
14 
1 
12  (2454) 
5    (146) 
8    (263) 
5    (325) 
1    (12) 
9    (296)   
18  (659) 
3    (118) 
56  (1757)   58 
14  (2549) 
0    (0) 
2 
5 
Figure 4: This table shows the number of TMDS and 
SVDS  problems  per  category  described  in  sections 
5.1 to 5.3. The frequency of problems (out of 5,379) in 
TMDS is parenthesized. 
5.1. Monitoring Techniques 
During the interim period between Registry-problem 
discovery  and  consequent  repair  by  developers,  PC 
monitoring is essential. Maintaining a knowledge base of 
known  bad  predicates  from  past  Registry  troubleshoots 
provides  an  invaluable  resource  for  problem  diagnosis 
and  prevention.  Monitoring  can  be  performed  either 
periodically  or  by 
to  receive  change 
notifications.  Such  protective  measures  can  prevent 
problems  from  causing  eventual  failures  and  ease 
troubleshooting after failure occurence.  
registering 
item 
from 
"%1"  %* 
In general, a Registry entry’s presence or absence of 
data  can  positively  identify  problems.  For  example, 
consider  the  SirCam  virus  changing  the  data  of  the 
HKEY_CLASSES_ROOT\exefile\shell\open\command\(D
efault)  Registry 
to 
C:\recycled\sirc32.exe  "%1"  %*.  This  change  would 
generate a “File Not Found” error when the user double-
clicks 
data 
C:\recycled\sirc32.exe  "%1"  %*  can  be  monitored  to 
positively identify the problem. Similarly, the absence of 
HKEY_CLASSES_ROOT\CLSID\{00021401-0000-0000-
C000-000000000046}\shellex\MayChangeDefaultMenu 
can  be  monitored  to  positively  identify  the  problem  of 
dysfunctional shortcuts that fail to launch an application 
when the user double clicks them.  
presence 
a 
.exe 
file.  The 
of 
The breakdown in Figure 4 shows that many  of the 
problems  we  studied  can  be  immediately  flagged  upon 
detection of known bad  Registry  entries. In other cases, 
the  software  used  by  the  user  and  the  underlying 
environment  dictate  if  the  data  of  a  Registry  entry  is 
problematic.  Furthermore,  many  configurations  are 
purely  for  purposes  of  customization;  an  unusual 
configuration 
in  one  user’s  perspective  may  not 
necessarily be a problem, rather a valid choice made by a 
different user or the same user at an earlier time. In such 
cases,  the  monitor  must  record  the  “potentially  bad” 
Registry  entry  and  await  user  complaint  to  perform 
example, 
symptom-based  troubleshooting.  It  is  important  to  not 
warn  the  user  upon  detecting  every  such  known 
“potentially  bad”  entry  as  numerous  false  positives  can 
eventually  lead  the  user  to  disable  the  monitoring  tool. 
For 
if 
HKEY_CURRENT_USER\Software\Microsoft\Windows\
CurrentVersion\Internet  Settings\EnableAutodial  is  set 
to  1,  some  versions  of  Windows  Media  Player’s  “Open 
URL”  function  will  fail  even  if  the  user  has  Internet 
connectivity.  However,  some  users  do  not  use  this 
application  and  may  set  EnableAutodial  to  1  for 
preferred functionality of other Internet applications. The 
monitor is unsure whether the user intended to make this 
change,  as  it  is  a  valid  customization.  Alternately,  the 
monitor can be fully prepared to point to the entry as the 
root  cause  if  and  when  the  user  complains  with  a 
symptom matching previously reported occurrences.  
Policy-related  settings also  belong  to  the  “Potential 
bad  entry  +  symptom  matching”  category  and  account 
for a significant percentage of the cases we studied. In a 
corporate  environment,  policy-related  Registry  entries 
allow the IT organization to disable certain functions on 
employees’  desktops  to  increase  stability  and  simplify 
maintenance.  Many  such  settings  have  caused  user 
complaints as  they  could  not  perform  the  functions that 
were  normally  available  to  them  outside  the  corporate 
environment.  Obviously,  we  should  not  warn  all 
employees  about  potential  problems  when  the  IT 
organization  implements  a  new  policy  because  most 
people  may  never  use 
function. 
Nevertheless,  our  monitor  can  quickly  point  to  the  root 
cause  when  a  user  actually  complains  with  a  matching 
symptom. 
the  disabled 
We  note  that  a  small  percentage  of  problems  are 
categorized  as  “Can’t  help”.  These  problems  primarily 
consist  of  highly  case-specific  data  corruption  that  are 
difficult  to  monitor  and  generally  valid  settings  that 
cause problems only in specific situations. For example, 
an  application  window  may  not  display  properly  if 
window  position-related  Registry  data  is  corrupted;  a 
browser  proxy  setting  may  cause  confusing  network 
connection  problems  if  the  user  inadvertently  uses  it  in 
an  environment  where  the  specified  proxy  cannot  be 
found.     
We  believe  our monitoring methodology is feasible 
as  there  are  over  a  dozen  rule-based  monitoring  tools 
already in use. Registry Mechanic3, Registry Healer4 and  
Registry  Medic5  are  a  few  examples  of  tools  that 
incorporate  rule-based  mechanism  to  identify  dubious 
Registry entries. However, these tools monitor upon user 
demand 
the 
3 http://www.winguides.com/regmech 