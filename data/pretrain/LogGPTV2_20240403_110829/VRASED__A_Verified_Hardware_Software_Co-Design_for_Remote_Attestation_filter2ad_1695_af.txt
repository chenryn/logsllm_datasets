1. Modify_Mem(i) → (Wen ∧ Daddr = i) ∨ (DMAen ∧ DMAaddr = i)
predicament of Android custom permissions. In NDSS, 2018.
[49] J. Vijayan. Stuxnet renews power grid security concerns. http://www.
computerworld.com/article/2519574/security0/
stuxnet-renews-power-grid-security-concerns.
html, june 2010.
[50] Xilinx. Vivado design suite user guide, 2017.
[51] Xilinx Inc. Artix-7 FPGA family. https://www.xilinx.com/
products/silicon-devices/fpga/artix-7.html, 2018.
[52] J.-K. Zinzindohoué, K. Bhargavan, J. Protzenko, and B. Beurdouche.
HACL*: A veriﬁed modern cryptographic library. In CCS, 2017.
APPENDIX
A RA Soundness and Security Proofs
A.1 Proof Strategy
We present the proofs for RA soundness (Deﬁnition 1) and
RA security (Deﬁnition 2). Soundness is proved entirely via
LTL equivalences. In the proof of security we ﬁrst show, via
LTL equivalences, that VRASED guarantees that adversary
A can never learn K with more than negligible probability.
We then prove security by showing a reduction of HMAC’s
existential unforgeability to VRASED’s security. In other words,
we show that existence of A that breaks VRASED implies
existence of HMAC-A able to break conjectured existential
unforgeability of HMAC. The full machine-checked proofs
for the LTL equivalences (using Spot 2.0 [19] proof assistant)
discussed in the remainder of this section are available in [1].
2. Read_Mem(i) → (Ren ∧ Daddr = i) ∨ (DMAen ∧ DMAaddr = i)
3.
Interrupt → irq
Our execution model, in Deﬁnition 5, translates MSP430
behavior by capturing the effects on the processor signals when
reading and writing from/to memory. We do not model the
effects of instructions that only modify register values (e.g.,
ALU operations, such as add and mul) because they are not
necessary in our proofs.
The execution model deﬁnes that a given memory address
can be modiﬁed in two cases: by a CPU instruction or by
DMA. In the ﬁrst case, the Wen signal must be on and Daddr
must contain the memory address being accessed. In the second
case, DMAen signal must be on and DMAaddr must contain the
address being modiﬁed by DMA. The requirements for reading
from a given address are similar, except that instead of Wen,
Ren must be on. Finally, the execution model also captures the
fact that an interrupt implies setting the irq signal to 1.
A.3 RA Soundness Proof
The proof follows from SW-Att functional correctness (ex-
pressed by Deﬁnition 3) and LTL speciﬁcations 3, 5, 7, and
10
Theorem 1. VRASED is sound according to Deﬁnition 1.
Proof.
De f inition 3 ∧ LT L3 ∧ LT L5 ∧ LT L7 ∧ LT L10 → T heorem 1
1444    28th USENIX Security Symposium
USENIX Association
The formal computer proof for Theorem 1 can be found
in [1]. Due to space limitations, we only provide some intu-
ition, by splitting the proof into two parts. First, SW-Att func-
tional correctness (Deﬁnition 3) would imply Theorem 1 if AR,
CR, KR never change and an interrupt does not happen during
SW-Att computation. However, memory model Deﬁnitions 4.1
and 4.2 already guarantee that CR and KR never change. Also,
LTL 5 states that an interrupt cannot happen during SW-Att
computation, otherwise the device resets. Therefore, it remains
for us to show that AR does not change during SW-Att com-
putation. This is stated in Lemma 1.
Lemma 1. Temporal Consistency – Attested memory does not change during
SW-Att computation
G : {
PC = CRmin ∧ AR = M ∧ ¬reset U (PC = CRmax) →
(AR = M) U (PC = CRmax) }
In turn, Lemma 1 can be proved by:
LT L3 ∧ LT L7 ∧ LT L10 → Lemma 1
(12)
The reasoning for Equation 12 is as follows:
• LT L3 prevents the CPU from stopping execution of
SW-Att before its last instruction.
• LT L7 guarantees that the only memory regions written by
the CPU during SW-Att execution are X S and MR, which
do not overlap with AR.
• LT L10 prevents DMA from writing to memory during
SW-Att execution.
Therefore, there are no means for modifying AR during
SW-Att execution, implying Lemma 1. As discussed above, it
is easy to see that:
Lemma 1 ∧ LT L5 ∧ De f inition 3 → T heorem 1
(13)
A.4 RA Security Proof
Recall the deﬁnition of RA security in the game in Figure 6.
The game makes two key assumptions:
1. SW-Att call results in a temporally consistent HMAC of
AR using a key derived from K and C hal. This is already
proved by VRASED’s soundness.
2. A never learns K with more than negligible probability.
By proving that VRASED’s design satisﬁes assumptions 1 and
2, we show that the capabilities of untrusted software (any
DMA or CPU software other than SW-Att) on P rv are equiv-
alent to the capabilities of A in RA-game. Therefore, we still
need to prove item 2 before we can use such game to prove
VRASED’s security. The proof of A’s inability to learn K with
Lemma 2. Key conﬁdentiality – K can not be accessed directly by untrusted
software (¬(PC ∈ CR)) and any memory written to by SW-Att can never be read
by untrusted software.
G : {
(¬(PC ∈ CR) ∧ Read_Mem(i) ∧ i ∈ KR → reset)∧
(DMAen ∧ DMAaddr = i ∧ i ∈ KR → reset)∧
[¬reset ∧ PC ∈ CR ∧ Modi f y_Mem(i) ∧ ¬(i ∈ MR) →
G : {(¬(PC ∈ CR) ∧ Read_Mem(i) ∨ DMAen ∧ DMAaddr = i)
→ reset}]
}
more than negligible probability is facilitated by A6 - Callee-
Saves-Register convention stated in Section 3. A6 directly
implies no leakage of information through registers on the re-
turn of SW-Att. This is because, before the return of a function,
registers must be restored to their state prior to the function call.
Thus, untrusted software can only learn K (or any function
of K ) through memory. However, if untrusted software can
never read memory written by SW-Att, it never learns anything
about K (the secret-independence of SW-Att at the HACL*
level even implies a lack of timing side-channels, subject to
our assumption that this property is preserved by msp430-gcc
and the MCU implementation). Now, it sufﬁces to prove that
untrusted software can not access K directly and that it can
never read memory written by SW-Att. These conditions are
stated in LTL in Lemma 2. We prove that VRASED satisﬁes
Lemma 2 by writing a computer proof (available in [1]) for
Equation 14. The reasoning for this proof is similar to that of
RA soundness and omitted due to space constraints.
LT L2 ∧ LT L6 ∧ LT L7 ∧ LT L8 ∧ LT L9 ∧ LT L10 → Lemma 2
(14)
We emphasize that Lemma 2 does not restrict reads and writes
to MR, since this memory is used for inputting C hal and re-
ceiving SW-Att result. Nonetheless, the already proved RA
soundness and LTL 4 (which makes it impossible to execute
fractions of SW-Att) guarantee that MR will not leak anything,
because at the end of SW-Att computation it will always con-
tain an HMAC result, which does not leak information about K .
After proving Lemma 2, the capabilities of untrusted software
on P rv are equivalent to those of adversary A in RA-game of
Deﬁnition 2. Therefore, in order to prove VRASED’s security,
it remains to show a reduction from HMAC security according
to the game in Deﬁnition 2. VRASED’s security is stated and
proved in Theorem 2.
Theorem 2. VRASED is secure according to Deﬁnition 2 as
long as HMAC is a secure MAC.
tuple
deﬁned as
Proof. A MAC is
of algorithms
{Gen, Mac, Vrf}. For the reduction we construct a
slightly modiﬁed HMAC′, which has the same Mac and Vrf
algorithms as standard HMAC but Gen ← KDF(K , C hal)
where C hal ← ${0, 1}l. Since KDF function itself is imple-
mented as a Mac call, it is easy to see that the outputs of
USENIX Association
28th USENIX Security Symposium    1445
Gen are indistinguishable from random. In other words, the
security of this slightly modiﬁed construction follows from the
security of HMAC itself. Assuming that there exists A such
that Pr[A , RAgame] > negl(l), we show that such adversary
can be used to construct HMAC-A that breaks existential
unforgeability of HMAC’ with probability Pr[HMAC-A ,MAC-
game] > negl(l). To that purpose HMAC-A behaves as
follows:
1. HMAC-A selects msg to be the same M 6= AR as in RA-
game and asks A to produce the same output used to win
RA-game.
2. HMAC-A outputs the pair (msg,σ) as a response for the
challenge in the standard existential unforgeability game,
where σ is the output produced by A in step 1.
By construction, (msg,σ) is a valid response to a challenge in
the existential unforgeability MAC game considering HMAC′
as deﬁned above. Therefore, HMAC-A is able to win the exis-
tential unforgeability game with the same > negl(l) probability
that A has of winning RA-game in Deﬁnition 2.
authentication of V rf as part of SW-Att execution. Our imple-
mentation is based on the protocol in [10].
Figure 14 presents an implementation of SW-Att that in-
cludes V rf authentication. It also builds upon HACL* ver-
iﬁed HMAC to authenticate V rf, in addition to computing
the authenticated integrity check. In this case, V rf’s request
additionally contains an HMAC of the challenge computed
using K . Before calling SW-Att, software running on P rv is
expected to store the received challenge on a ﬁxed address
CHALL_ADDR and the corresponding received HMAC on
V RF_AU T H. SW-Att discards the attestation request if (1)
the received challenge is less than or equal to the latest chal-
lenge, or (2) HMAC of the received challenge is mismatched.
After that, it derives a new unique key using HKDF [32] from
K and the received HMAC and uses it as the attestation key.
HW-Mod must also be slightly modiﬁed to ensure security of
V rf’s authentication. In particular, regular software must not
be able modify the memory region that stores P rv’s counter.
Notably, the counter requires persistent and writable storage,
because SW-Att needs to modify it at the end of each attesta-
tion execution. Therefore, CT R region resides on FLASH. We
denote this region as:
B Optional Veriﬁer Authentication
• CT R = [CT Rmin,CT Rmax];
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
void Hacl_HMAC_SHA2_256_hmac_entry ( ) {
u i n t 8 _ t key [ 6 4 ] = { 0 } ;
u i n t 8 _ t v e r i f i c a t i o n [ 3 2 ] = { 0 } ;
if ( memcmp (CHALL_ADDR, CTR_ADDR, 3 2 ) > 0 )
{
memcpy ( key , KEY_ADDR, 6 4 ) ;
h a c l _ h m a c ( ( u i n t 8 _ t * ) v e r i f i c a t i o n ,
( u i n t 3 2 _ t ) 6 4 , * ( ( u i n t 8 _ t * )CHALL_ADDR)
( u i n t 3 2 _ t ) 3 2 ) ;
( u i n t 8 _ t * ) key ,
,
if ( ! memcmp (VRF_AUTH, v e r i f i c a t i o n , 3 2 )
{
h a c l _ h m a c ( ( u i n t 8 _ t * ) key ,
( u i n t 8 _ t * ) key ,
( u i n t 3 2 _ t ) 6 4 ,
( u i n t 3 2 _ t ) 3 2 ) ;
( u i n t 8 _ t * ) v e r i f i c a t i o n ,
h a c l _ h m a c ( ( u i n t 8 _ t * ) MAC_ADDR,
( u i n t 8 _ t * ) key ,
( u i n t 3 2 _ t ) 3 2 ,
( u i n t 3 2 _ t ) ATTEST_SIZE ) ;
( u i n t 8 _ t * ) ATTEST_DATA_ADDR,
memcpy (CTR_ADDR, CHALL_ADDR, 3 2 ) ;
}
}
return ( ) ;
}
Figure 14: SW-Att Implementation with V rf authentication
LTL Speciﬁcations (15) and (16) must hold (in addition to
the ones discussed in Section 4).
G : {¬(PC ∈ CR) ∧Wen ∧ (Daddr ∈ CT R) → reset }
G : {DMAen ∧ (DMAaddr ∈ CT R) → reset}
(15)
(16)
LTL Speciﬁcation (15) ensures that regular software does not
modify P rv’s counter, while (16) ensures that the same is not
possible via the DMA controller. FSMs in Figures 8 and 11, cor-
responding to HW-Mod access control and DMA sub-modules,
must be modiﬁed to transition into Reset state according to
these new conditions. In addition, LTL Speciﬁcation (7) must
be relaxed to allow SW-Att to write to CT R. Implementation
and veriﬁcation of the modiﬁed version of these sub-modules
are publicly available at VRASED’s repository [1] as an op-
tional part of the design.
Depending on the setting where P rv is deployed, authenti-
cating the attestation request before executing SW-Att may
be required. For example, if P rv is in a public network, the
adversary may try to communicate with it. In particular, the
adversary can impersonate V rf and send fake attestation re-
quests to P rv, attempting to cause denial-of-service. This is
particularly relevant if P rv is a safety-critical device. If P rv re-
ceives too many attestation requests, regular (and likely honest)
software running on P rv would not execute because SW-Att
would run all the time. Thus, we now discuss an optional part
of VRASED’s design suitable for such settings. It supports
C API & Sample Application
VRASED ensures that any violation of secure RA properties is
detected and causes the system to reset. However, benign appli-
cations running on the MCU must also comply with VRASED
rules to execute successfully. To ease the process of setting up
the system for a call to SW-Att, VRASED provides an API that
takes care of necessary conﬁguration on the application’s be-
half. This API and a sample application deployed using FPGAs
are described in the extended version of this paper, available
at [18].
1446    28th USENIX Security Symposium
USENIX Association