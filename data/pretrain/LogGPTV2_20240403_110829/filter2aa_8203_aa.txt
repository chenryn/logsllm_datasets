class BitfieldBase:
    def __init__(self, x):
        if isinstance(x,BitfieldBase):
            self.f = x.f
            self.bits = x.bits
            self.bitfield = x.bitfield
            self.count = x.bitfield
        else:
            self.f = x
            self.bits = 0
            self.bitfield = 0x0
            self.count = 0
    def _read(self, n):
        s = self.f.read(n)
        if not s:
            raise Exception("Length Error")
        self.count += len(s)
        return s
    def needbits(self, n):
        while self.bits = self.bits and n > 7:
            n -= self.bits
            self.bits = 0
            n -= len(self.f._read(n >> 3)) > 3), 7 - ((self.bits-1) & 0x7)
    def tellbits(self):
        bytes, bits = self.tell()
        return (bytes  self.bits:
            self.needbits(n)
        return self.bitfield & self._mask(n)
    def readbits(self, n = 8):
        if n > self.bits:
            self.needbits(n)
        r = self.bitfield & self._mask(n)
        self.bits -= n
        self.bitfield >>= n
        return r
class RBitfield(BitfieldBase):
    def _more(self):
        c = self._read(1)
        self.bitfield  self.bits:
            self.needbits(n)
        return (self.bitfield >> (self.bits - n)) & self._mask(n)
    def readbits(self, n = 8):
        if n > self.bits:
            self.needbits(n)
        r = (self.bitfield >> (self.bits - n)) & self._mask(n)
        self.bits -= n
        self.bitfield &= ~(self._mask(n) >= 1
    return o
class HuffmanLength:
    def __init__(self, code, bits = 0):
        self.code = code
        self.bits = bits
        self.symbol = None
    def __repr__(self):
        return str((self.code, self.bits, self.symbol, self.reverse_symbol))
    def __cmp__(self, other):
        if self.bits == other.bits:
            return cmp(self.code, other.code)
        else:
            return cmp(self.bits, other.bits)
def reverse_bits(v, n):
    a = 1 > i) & a
        z |= (v >= 1
    return z
def reverse_bytes(v, n):
    a = 0xff > i) & a
        z |= (v >= 8
    return z
class HuffmanTable:
    def __init__(self, bootstrap):
        l = []
        start, bits = bootstrap[0]
        for finish, endbits in bootstrap[1:]:
            if bits:
                for code in range(start, finish):
                    l.append(HuffmanLength(code, bits))
            start, bits = finish, endbits
            if endbits == -1:
                break
        l.sort()
        self.table = l
    def populate_huffman_symbols(self):
        bits, symbol = -1, -1
        for x in self.table:
            symbol += 1
            if x.bits != bits:
                symbol  self.max_bits: self.max_bits = x.bits
    def _find_symbol(self, bits, symbol, table):
        for h in table:
            if h.bits == bits and h.reverse_symbol == symbol:
                #print "found, processing", h.code
                return h.code
        return -1
    def find_next_symbol(self, field, reversed = True):
        cached_length = -1
        cached = None
        for x in self.table:
            if cached_length != x.bits:
                cached = field.snoopbits(x.bits)
                cached_length = x.bits
            if (reversed and x.reverse_symbol == cached) or (not reversed and x.symbol == cached):
                field.readbits(x.bits)
                #print "found symbol", hex(cached), "of len", cached_length, "mapping to", hex(x.code)
                return x.code
        raise  Exception("unfound symbol, even after end of table @ " + str(field.tell()))
        for bits in range(self.min_bits, self.max_bits + 1):
            #print printbits(field.snoopbits(bits),bits)
            r = self._find_symbol(bits, field.snoopbits(bits), self.table)
            if 0 > 1) - 1
    else:
        raise  Exception("illegal distance code")
def extra_length_bits(n):
    if 257 > 2) - 1
    else:
        raise Exception("illegal length code")
def move_to_front(l, c):
    l[:] = l[c:c+1] + l[0:c] + l[c+1:]
def bwt_transform(L):
    # Semi-inefficient way to get the character counts
    F = ''.join(sorted(L))
    base = map(F.find,map(chr,range(256)))
    pointers = [-1] * len(L)
    for symbol, i in map(None, map(ord,L), xrange(len(L))):
        pointers[base[symbol]] = i
        base[symbol] += 1
    return pointers
def bwt_reverse(L, end):
    out = ''
    if len(L):
        T = bwt_transform(L)
        # STRAGENESS WARNING: There was a bug somewhere here in that
        # if the output of the BWT resolves to a perfect copy of N
        # identical strings (think exact multiples of 255 'X' here),
        # then a loop is formed.  When decoded, the output string would
        # be cut off after the first loop, typically '\0\0\0\0\xfb'.
        # The previous loop construct was:
        #
        #  next = T[end]
        #  while next != end:
        #      out += L[next]
        #      next = T[next]
        #  out += L[next]
        #
        # For the moment, I've instead replaced it with a check to see
        # if there has been enough output generated.  I didn't figured
        # out where the off-by-one-ism is yet---that actually produced
        # the cyclic loop.
        for i in xrange(len(L)):
            end = T[end]
            out += L[end]
    return out
# Sixteen bits of magic have been removed by the time we start decoding
def bzip2_main(input):
    b = RBitfield(input)
    method = b.readbits(8)
    if method != ord('h'):
        raise Exception("Unknown (not type 'h'uffman Bzip2) compression method")
    blocksize = b.readbits(8)
    if ord('1')  0:
                if huffman_used_map & map_mask:
                    huffman_used_bitmap = b.readbits(16)
                    bit_mask = 1  0:
                        if huffman_used_bitmap & bit_mask:
                            ##print 'hit', len(used)
                            pass
                        used += [bool(huffman_used_bitmap & bit_mask)]
                        bit_mask >>= 1
                else:
                    used += [False] * 16
                map_mask >>= 1
            huffman_groups = b.readbits(3)
            ##print 'huffman groups', huffman_groups
            if not 2 = huffman_groups:
                        raise "Bzip2 chosen selector greater than number of groups (max 6)"
                if c >= 0:
                    move_to_front(mtf, c)
                ##print c, mtf
                selectors_list += mtf[0:1]
            groups_lengths = []
            symbols_in_use = sum(used) + 2  # remember RUN[AB] RLE symbols
            for j in range(huffman_groups):
                length = start_huffman_length = b.readbits(5)
                ##print 'start_huffman_length', start_huffman_length
                lengths = []
                for i in range(symbols_in_use):
                    if not 0 <= length <= 20:
                        raise "Bzip2 Huffman length code outside range 0..20"
                    while b.readbits(1):
                        length -= (b.readbits(1) * 2) - 1
                    lengths += [length]
                groups_lengths += [lengths]
                ##print groups_lengths
            tables = []