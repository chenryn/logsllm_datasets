Let V be the set of values that can be proposed by the
processes, and ⊥ be a value /∈ V. The proposed values in an
execution are represented as an input vector, such that the
i-th entry contains the value proposed by pi, or ⊥ if pi does
not take step in the execution. We usually denote with I an
input vector with all entries in V, and with J an input vector
that may have some entries equal to ⊥.
Notations. V n denotes the set of all possible input vectors
with all entries in V, and V n
f denotes the set of all possible
vectors with at most f entries equal to ⊥. For I ∈ V n, If
denotes the set of possible views, i.e., the set of all input
vectors J with at most f entries equal to ⊥, and such that
I agrees with J in all the non-⊥ entries of J. For a set C,
C ⊆ V n, Cf denotes the union of the If ’s over all I ∈ C.
Thus, every vector J ∈ V n
f is a possible input vector (also
called a view from a process point of view). For vectors
f , J1 ≤ J2 if ∀k : J1[k] (cid:13)= ⊥ ⇒ J1[k] =
J1, J2 ∈ V n
J2[k]. The expression #x(J) denotes number of entries of
J whose value is x, with x ∈ V ∪ {⊥}.
The Approach The condition-based approach consists in
considering subsets C of V n, called conditions, that repre-
sent common input vectors in a particular distributed appli-
cation. We are interested in conditions C that, when sat-
isﬁed (i.e., when the proposed input vector does belong to
Cf ), make the consensus problem solvable, despite up to f
process crashes.
Acceptability of a Condition Given a condition C and a
value of f , acceptability (is a combinatorial property that)
deﬁnes the constraints C has to satisfy in order the consen-
sus problem to be solvable for C. Operationally, it is de-
ﬁned in terms of a predicate P and a function S that have to
satisfy three properties5 related to the termination, validity
and agreement, respectively.
The intuition for the ﬁrst property is the following. The
predicate P allows a process pi to test if a decision value
can be computed from its view. Thus, P returns true at least
for all those input vectors J such that J ∈ If for I ∈ C.
• Property TC→P : I ∈ C ⇒ ∀J ∈ If : P (J).
The second property is related to validity.
• Property VP→S: ∀I ∈ V n : ∀J ∈ If :
P (J) ⇒ S(J)= a non-⊥ value of J.
The next property concerns agreement. Given an input vec-
tor I, if two processes pi and pj get the views J1 and J2,
and both belong to If such that P (J1) and P (J2) are sat-
5A combinatorial characterization of acceptability is given in [13, 14].
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
isﬁed, these processes have to decide the same value of V,
from J1 for pi and J2 for pj, whenever the following holds:
• Property AP→S: ∀I ∈ V n : ∀J1, J2 ∈ If :
P (J1) ∧ P (J2) ∧ (J1 ≤ J2) ⇒ S(J1) = S(J2).
Deﬁnition 3.1 A condition C is f -acceptable if there ex-
ist a predicate P and a function S satisfying the properties
TC→P , AP→S and VP→S for f .
The following theorem (a main result of [13]) deﬁnes the
largest set of conditions that allows to solve consensus.
Theorem 1 In presence of up to f crashes, the consensus
problem is solvable for C iff C is f -acceptable.
An Example of Condition Several conditions are inves-
tigated in [13, 14]. We present one of them, named C1f in
[14]. The idea of this condition is to guarantee that all the
processes have the same extremal (largest or smallest) value
in their local views in order to decide on it. We (arbitrari-
ly) consider the largest value (max(J) denotes the largest
non-⊥ value of J). Formally, we have:
(I ∈ C1f ) iff
[ a =max(I) ⇒ #a(I) > f ].
C1f is f -acceptable with [13]:
• P 1f(J) ≡ [a = max(J)] ⇒ [#a(J) + #⊥(J) > f],
• S1(J) = max(J).
Moreover, let a condition be maximal if any vector added
to it makes it non f -acceptable.
It is shown in [13] that
C1f is maximal. (As noted in the Introduction, it follows
that, when we consider binary consensus, the condition
{[0, . . . , 0], [1, . . . , 1]} is not maximal.) A general method
to deﬁne f -acceptable conditions is described in [15]. It us-
es a weight function associating a positive weight with each
value that can be proposed.
4 A Versatile Protocol
The protocol assumes f  0) probability that all the esti variables that
were equal to ⊥ at the beginning of the phase be equal
to the same non-⊥ value after the processes have exe-
cuted line 101.
• The module LO considers a leader oracle. Each pro-
cess broadcasts its current estimate esti (whose value
has been determined at the end of the previous round or
is pi’s initial value). Then, every pi waits for the value
broadcast by the process it considers as the leader, and
considers that value as its new estimate esti.
Let us note that if all the processes consider the same
process as the leader, they get its estimate value, and
consequently, all estimates esti are equal after line
204. Let us also notice that we have the same result
when, whatever the processes that are considered as
leaders, they all have the same estimates before enter-
ing the LO module.
• The third module (COND) implements the part rele-
vant to the condition-based approach. As previously,
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
if its esti local variable is equal to ⊥, a process pi ﬁrst
sets it to a non-⊥ value (namely its initial value). Then,
the processes exchange their estimate values to deﬁne
their current views (Vi) of proposed values, after which
they apply the condition predicate P to Vi, and accord-
ingly update their estimate esti.
Let V be the vector of the esti estimates after line 305.
If V ∈ Cf , the vector V belongs to the condition. It
follows that all P (Vi) hold, and consequently all esti
are equal to the same value (namely, S(V )) after line
306.
Second phase The aim of the second phase (made up of
two steps) is to allow the processes to decide when their esti
estimates are equal. If they are not, its aim is to prevent the
agreement property to from being violated.
• During the ﬁrst step, the processes exchange their cur-
If a process pi sees a value v
rent estimate values.
broadcast by a majority of processes it adopts it as its
estimate. Otherwise, it adopts the default value ⊥ as
estimate (lines 7-8).
It is important to notice that, at the end of this step, we
have the following: if esti (cid:13)= ⊥ ∧ estj (cid:13)= ⊥, then
esti = estj = v where v is an estimate value that was
a majority value just before starting the second phase.
Hence, this ﬁrst step of phase 2 is a “ﬁlter” that can be
passed through only by a majority estimate.
• The second step (lines 9-15) is ﬁrst made up of a sec-
ond exchange of the new estimates (equal to the same
v or to ⊥). Then, the behavior of a process pi depends
on the set reci of estimate values it has received. There
are three cases:
- If reci = {v}, pi decides on v. Note that in that case,
as pi receives v from (n − f) > n/2 processes, any
process pj receives v from at least one process.
- If reci = {v,⊥}, pi considers v as its new esti-
mate value, and proceeds to the next round. In the case
where some pj decided v, this update actually imple-
ments the locking of v (the mechanism that ensures no
other value can be decided).
- if reci = {⊥}, pi adopts ⊥ as estimate, and proceed-
s to the next round. The adoption of ⊥ as estimate is
transitory: as we have seen, an estimate equal to ⊥ is
updated to a non-⊥ value by any module used during
phase 1 (see lines 101, 201 and 301).
It is important to note that, at any round r, the lines
12 and 14 are mutually exclusive: if some processes
execute one of them, no process can execute the other
one. This exclusion actually “locks” the decided value,
thereby guaranteeing consensus agreement. It follows
that when the processes start a new round r > 1, the
esti variables whose value is different from ⊥ are e-
qual to the same value v.
4.3 On the Use of the Modules
A modular dimension of the protocol lies in the way the
modules RO, LO and COND (or even additional modules,
see Section 7) can be used. More precisely, the implementa-
tion of the deterministic function comp est(r) is deﬁned by
“words” of the regular language (RO + LO + COND)+.
During each round r, each process invokes comp est(r),
and executes the corresponding sequence of module invo-
cations and ﬁnally gets a value as a result.
Let I(comp est(r)) be the implementation of com-
p est(r).
Interestingly, I(comp est(r)) can be such that
I(comp est(1))=COND. Then, the ﬁrst phase uses only the
COND module. It follows that, if the initial input vector be-
longs to the condition, the protocol decides during the ﬁrst
round and without requiring the help of the underlying ora-
cles. Moreover, for the rounds r such that RO (or LO) and
COND are used to implement comp est(r), it is more efﬁ-
cient to place the invocation of RO (or LO) before the one
of COND.
RO
(101)
if (esti = ⊥) then esti ← random endif
Figure 2. Random-Based Module
4.4 A More Abstract View
We have considered that the implementation of the func-
tion comp est() is deﬁned by the words of a regular lan-
guage. To be concrete we have considered that the vo-
cabulary of this language are the particular modules named
RO, LO and COND. Actually, as shown in Section 7, other
oracle-based modules can be used. Used alone or in combi-
nation with others, such modules (or even oracle modules
that will be designed in the future) have to satisfy some
properties in order to allow solving the consensus. Those
can be abstractly expressed as properties any sequence of
invocations of the comp est() function has to satisfy. They
are:
• Validity. If pi invokes comp est(r) and gets a value,
this value is a proposed value.
• Fixed point. Let ESTr be the set of the current esti-
mate values of the processes that invoke comp est(r).
If ESTr = {v} (v (cid:13)= ⊥), then no value different from
v can be output by comp est(r).
• Termination.
If, in presence of at most f process
crashes, comp est(r) is invoked by all correct process-
es, it terminates.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:08:23 UTC from IEEE Xplore.  Restrictions apply. 
Function Consensus(vi)