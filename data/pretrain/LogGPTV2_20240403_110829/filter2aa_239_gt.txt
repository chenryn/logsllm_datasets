      foreach (var header in request.Headers)
      {
        sb.Append(GetDiv(header.Key, string.Join("; ", header.Value)));
      }
      return sb.ToString();
    }
结果取决于所使用的浏览器。下面比较一下其中的一些结果。下面的结果来自
Windows 10触摸设备上的Internet Explorer 11：
    Connection: Keep-Alive
    Accept: text/html, application/xhtml+xml, image/jxr, ＊.＊
    Accept-Encoding: gzip, deflate
    Accept-Language: en-Us, en; q=0.8, de-AT; q=0.6, de-DE; q=0.4, de; q=0.2
    Host: localhost:5000
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; rv:11.0)
    like Gecko
Google Chrome 47.0版本显示了下面的信息，包括AppleWebKit、Chrome和Safari的版
本号：
    Connection: keep-alive
    Accept: text/html, application/xhtml, application/xml; q=0.9, image/webp, ＊.
＊; q=0.8
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-Us; en; q=0.8
    Host: localhost:5000
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36
    (KHTML, like Gecko) Chrome 47.0.2526.80 Safari/537.36
Microsoft Edge显示了下面的信息，包括AppleWebKit、Chrome、Safari和Edge的版本
号：
    Connection: Keep-Alive
    Accept: text/html, application/xhtml+xml, image/jxr, ＊.＊
    Accept-Encoding: gzip, deflate
    Accept-Language: en-Us, en; q=0.8, de-AT; q=0.6, de-DE; q=0.4, de; q=0.2
    Host: localhost:5000
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
    (KHTML,
可以从这个标题信息获得什么？
Connection标题是HTTP 1.1协议的一个增强。有了这个标题，客户端可以请求一直打
开连接。客户端通常使用HTML发出多个请求，例如获得图像、CSS和JavaScript文件。服
务器可能会处理请求，如果负载过高，就忽略请求，关闭连接。
Accept标题定义了浏览器接受的mime格式。列表按首选格式排序。根据这些信息，
可能基于客户端的需求以不同的格式返回数据。IE喜欢HTML格式，其次是XHTML和
JXR。Google 
Chrome有不同的列表。它更喜欢如下格式：HTML、XHTML、XML和
WEBP。有了这些信息，也可以定义数量。用于输出的浏览器在列表的最后都有*.*，接
受返回的所有数据。
Accept-Language标题信息显示用户配置的语言。使用这个信息，可以返回本地化信
息。本地化参见第28章。
  注意： 以前，服务器保存着浏览器功能的长列表。这些列表用来了解什么功
能可用于哪些浏览器。为了确定浏览器，浏览器的代理字符串用于映射功能。随着时
间的推移，浏览器会给出错误的信息，甚至允许用户配置应使用的浏览器名称，以得
到更多的功能（因为浏览器列表通常不在服务器上更新）。在过去，IE经常需要进行
与其他浏览器不同的编程。Microsoft Edge非常不同于IE，与其他供应商的浏览器有更
多的共同点。这就是为什么Microsoft 
Edge会在User-Agent字符串中显示Mozilla、
AppleWebKit、Chrome、Safari和Edge的原因。最好不要用这个User-Agent字符串获取
可用的特性列表。相反，应以编程方式检查需要的特定功能。
前面介绍的、用浏览器发送的标题信息是给非常简单的网站发送的。通常情况下会有
更多的细节，如cookie、身份验证信息和自定义信息。为了查看服务器收发的所有信息，
包括标题信息，可以使用浏览器的开发工具，启动一个网络会话。这样不仅会看到发送到
服务器的所有请求，还会看到标题、请求体、参数、cookie和时间信息，如图40-11所示。
图40-11
40.6.2 查询字符串
可以使用Add方法分析查询字符串。此方法需要x和y参数，如果这些参数是数字，就
执行相加操作，并在div标记中返回计算结果。前一节演示的方法GetRequestInformation显
示了如何使用HttpRequest对象的QueryString属性访问完整的查询字符串。为了访问查询字
符串的各个部分，可以使用Query属性。下面的代码片段使用Get方法访问x和y的值。如果
在查询字符串中没有找到相应的键，这个方法就返回null（代码文件
WebSampleApp/RequestAndResponseSample.cs）：
    public static string QueryString(HttpRequest request)
    {
      var sb = new StringBuilder();
      string xtext = request.Query["x"];
      string ytext = request.Query["y"];
      if (xtext == null   ytext == null)
      {
        return "x and y must be set";
      }
      int x, y;
      if (! int.TryParse(xtext, out x))
      {
        return $"Error parsing {xtext}";
      }
      if (! int.TryParse(ytext, out y))
      {
        return $"Error parsing {ytext}";
      }
      return $"{x} + {y} = {x + y}".Div();
    }
从查询字符串返回的IQueryCollection还允许使用Keys属性访问所有的键，它提供了
一个ContainsKey方法来检查指定的键是否可用。
使用URL http://localhost:5000/add? x=39&y=3在浏览器中显示这个结果：
    39 + 3 = 42
40.6.3 编码
返回用户输入的数据可能很危险。下面用Content方法实现这个任务。下面的方法直
接返回用查询数据字符串传递的数据（代码文件
WebSampleApp/RequestAndResponseSample.cs）：
    public static string Content(HttpRequest request) =>
      request.Query["data"];
使用URL http://localhost:5000/content? data=sample调用这个方法，只返回字符串示
例。使用相同的方法，用户还可以传递HTML内容，如http://localhost:5000/content? data=
Heading 1，结果是什么？图40-12显示了h1元素由浏览器解释，文本用标题格式
显示。我们有时希望这么做，例如用户（也许不是匿名用户）为一个网站写文章。
图40-12
不检查用户输入，也可以让用户传递JavaScript，如http://localhost:5000/content? data=
。可以使用JavaScript的alert函数弹出一个消息框。同
样，很容易将用户重定向到另一个网站。当这个用户输入存储在网站中时，一个用户可以
输入这样的脚本，打开这个页面的所有其他用户就会被重定向。
返回用户输入的数据应总是进行编码。下面看看不编码的结果。可以使用
HtmlEncoder类进行HTML编码，如下面的代码片段所示（代码文件
WebSampleApp/RequestResponseSample.cs）：
    public static string ContentEncoded(HttpRequest request) =>
      HtmlEncoder.Default.Encode(request.Query["data"]);
  注意： 使用HtmlEncoder需要NuGet包System.Text.Encodings.Web。
当应用程序运行时，进行了编码的JavaScript代码使用http://localhost:5000/encoded?
data=传递，客户就会在浏览器中看到JavaScript代码；
它们没有被解释（参见图40-13）。
图40-13
发送的编码字符串如下面的例子所示，有字符引用小于号（）和引
号（"）：
40.6.4 表单数据
除了通过查询字符串把数据从用户传递给服务器之外，还可以使用表单HTML元素。
下面这个例子使用HTTP POST请求替代GET。对于POST请求，用户数据与请求体一起传
递，而不是在查询字符串中传递。
表单数据的使用通过两个请求定义。首先，表单通过GET请求发送到客户端，然后用
户填写表单，用POST请求提交数据。相应地，通过/form路径调用的方法根据HTTP方法
类型调用GetForm或ShowForm方法（代码文件
WebSampleApp/RequestResponseSample.cs）：
    public static string GetForm(HttpRequest request)
    {
      string result = string.Empty;
      switch (request.Method)
      {
        case "GET":
        result = GetForm();
        break;
        case "POST":
        result = ShowForm(request);
        break;
        default:
        break;
      }
      return result;
    }
创建一个表单，其中包含输入元素text1和一个Submit按钮。单击Submit按钮，调用表
单的action方法以及用method参数定义的HTTP方法：
    private static string GetForm() =>
      "" +
        "" +
        "" +
      "";
为了读取表单数据，HttpRequest类定义了Form属性。这个属性返回一个
IFormCollection对象，其中包含发送到服务器的表单中的所有数据：
    private static string ShowForm(HttpRequest request)
    {
      var sb = new StringBuilder();
      if (request.HasFormContentType)
      {
        IFormCollection coll = request.Form;
        foreach (var key in coll.Keys)
        {
        sb.Append(GetDiv(key, HtmlEncoder.Default.Encode(coll[key])));
        }
        return sb.ToString();
      }
      else return "no form".Div();
    }
使用/form链接，通过GET请求接收表单（参见图40-14）。单击Submit按钮时，表单
用POST请求发送，可以查看表单数据的text1键（参见图40-15）。
图40-14
图40-15
40.6.5 cookie
为了在多个请求之间记住用户数据，可以使用cookie。给HttpResponse对象增加cookie
会把HTTP标题内的cookie从服务器发送到客户端。默认情况下，cookie是暂时的（没有存
储在客户端）。如果URL和cookie在同一个域中，浏览器就将其发送回服务器。可以设置
Path限制浏览器何时返回cookie。在这种情况下，只有cookie来自同一个域且使用/cookies
路径，才返回cookie。设置Expires属性时，cookie是永久性的，因此存储在客户端。时间
到了后，就删除cookie。然而，不能保证cookie在之前不被删除（代码文件
WebSampleApp/RequestResponseSample.cs）：
    public static string WriteCookie(HttpResponse response)
    {
      response.Cookies.Append("color", "red",
        new CookieOptions
        {
        Path = "/cookies",
        Expires = DateTime.Now.AddDays(1)
        });
      return "cookie written".Div();
    }
通过读取HttpRequest对象，可以再次读取cookie。Cookies属性包含浏览器返回的所有
cookie：
    public static string ReadCookie(HttpRequest request)
    {
      var sb = new StringBuilder();
      IRequestCookieCollection cookies = request.Cookies;
      foreach (var key in cookies.Keys)
      {
        sb.Append(GetDiv(key, cookies[key]));
      }
      return sb.ToString();
    }
为了测试cookie，还可以使用浏览器的开发人员工具。这些工具会显示收发的cookie
的所有信息。
40.6.6 发送JSON
服务器不仅返回HTML代码，还返回许多不同的数据格式，例如CSS文件、图像和视
频。客户端通过响应标题中的mime类型，确定接收什么类型的数据。
GetJson方法通过一个匿名对象创建JSON字符串，包括Title、Publisher和Author属
性。为了用JSON序列化该对象，添加NuGet包NewtonSoft.Json，导入NewtonSoft.Json名称
空间。JSON格式的mime类型是application/json。这通过HttpResponse的ContentType属性来
设置（代码文件WebSampleApp/RequestResponseSample.cs）：
    public static string GetJson(HttpResponse response)
    {
      var b = new
      {
        Title = "Professional C# 6",
        Publisher = "Wrox Press",
        Author = "Christian Nagel"
      };
      string json = JsonConvert.SerializeObject(b);
      response.ContentType = "application/json";
      return json;
    }
  注意： 要使用JsonConvert类，需要添加NuGet包Newtonsoft.Json。
下面是返回给客户端的数据：
    {"Title":"Professional C# 6", "Publisher":"Wrox Press",
     "Author":"Christian Nagel"}
  注意： 发送和接收JSON的内容参见第42章。
40.7 依赖注入
依赖注入深深地集成在ASP.NET Core中。这种设计模式提供了松散耦合，因为一个
服务只用一个接口。实现接口的具体类型是注入的。在ASP.NET内置的依赖注入机制
中，注入通过构造函数来实现，构造函数的参数是注入的接口类型。
依赖注入将服务协定和服务实现分隔开。使用该服务时，无须了解具体的实现，只需
要一个协定。这允许在一个地方给所有使用该服务的代码替换服务（如日志记录）。
下面创建一个定制的服务，来详细论述依赖注入。
40.7.1 定义服务
首先，为示例服务声明一个协定。通过接口定义协定可以把服务实现及其使用分隔
开，例如为单元测试使用不同的实现（代码文件
WebSampleApp/Services/ISampleService.cs）：
    public interface ISampleService
    {
      IEnumerable GetSampleStrings();
    }
用DefaultSampleService类实现接口ISampleService（代码文件
WebSampleApp/Services/DefaultSampleService.cs）：
    public class DefaultSampleService : ISampleService
    {
      private List _strings = new List { "one", "two", "three" };
      public IEnumerable GetSampleStrings() => _strings;
    }
40.7.2 注册服务
使用AddTransient方法（这是IServiceCollection的一个扩展方法，在程序集
Microsoft.Extensions. 
DependencyInjection.Abstractions的名称空间
Microsoft.Extensions.DependencyInjection中定义）, 
DefaultSampleService类型被映射到
ISampleService。使用ISampleService接口时，实例化DefaultSampleService类型（代码文件
WebSampleApp/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddTransient();
      // etc.
    }
内置的依赖注入服务定义了几个生命周期选项。使用AddTransient方法，每次注入服
务时，都会实例化新的服务。
使用AddSingleton方法，服务只实例化一次。每次注入都使用相同的实例：
    services.AddSingleton();
AddInstance方法需要实例化一个服务，并将实例传递给该方法。这样就定义了服务
的生命周期：
    var sampleService = new DefaultSampleService();
    services.AddInstance(sampleService);
在第4个选项中，服务的生命周期基于当前上下文。在ASP.NET 
MVC中，当前上下
文基于HTTP请求。只要给同样的请求调用动作，不同的注入就使用相同的实例。对于新
的请求，要创建一个新实例。为了定义基于上下文的生命周期，AddScoped方法把服务协
定映射到服务上：
    services.AddScoped();
40.7.3 注入服务
注册服务之后，就可以注入它。在Controllers目录中创建一个控制器类型
HomeController。内置的依赖注入框架利用构造函数注入功能；因此定义一个构造函数来
接收ISampleService接口。Index方法接收一个HttpContext，可以使用它读取请求信息，并
返回一个HTTP状态值。在实现代码中，从服务中使用ISampleService获得字符串。控制器
添加了一些HTML元素，把字符串放在列表中（代码文件
WebSampleApp/Controllers/HomeController.cs）：
    public class HomeController
    {
      private readonly ISampleService _service;