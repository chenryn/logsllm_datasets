### Graphic Operations and Performance Analysis

The graphic operations in Hyrax are proportional to \( M \). Hyrax demonstrates lower prover (P) time compared to other systems because it employs cryptographic operations exclusively for P's messages in Gir++ and for \( w \) (Sections 4–6).

- **Memory Usage:**
  - The provers in both BCCGP-sqrt and Bulletproofs ran out of memory for the largest benchmarks (Figures 2b and 2h), even with twice as much RAM as Hyrax. This is due to their need to operate over all wire values in the arithmetic circuit (AC) simultaneously. In contrast, Hyrax's P operates layer-by-layer (Section 3.2).
  
- **Comparison with Other Systems:**
  - Hyrax's P is more expensive than ZKB++'s or Ligero's because these systems do not use any public-key cryptography.
  - Although Ligero's P is asymptotically more costly than Hyrax's P, this difference is not noticeable at the problem sizes we consider.
  - libSTARK's P is 12–40 times more expensive than Hyrax's for the same problem sizes. It is also memory-intensive; for the largest problem, it exceeded available RAM despite having twice as much as Hyrax.
  - Hyrax's refinements compared to Hyrax-naive (Sections 5–6) yield a constant factor reduction in P cost, at most ≈3×.

### Verifier (V) Time Analysis

- **Matrix Factoring:**
  - For matrix factoring, Hyrax's V bottleneck is sum-check invocations for small \( N \), and \( \tilde{V}_y \) evaluation for large \( N \) (Section 3.2). The Recursive Depth-Limited (RDL) protocol (Section 6.2) dominates V's costs in the other two benchmarks.
  
- **Comparative Costs:**
  - Hyrax's V cost is lower than BCCGP-sqrt for sufficiently large problems, as the latter requires \( O(M) \) field operations.
  - Hyrax's V cost is significantly less than Bulletproofs, which requires a multi-exponentiation of length \( 2M \) (computed using \( O(M/\log M) \) cryptographic operations [83]).
  - ZKB++ has verification costs linear in the problem size, so Hyrax is more efficient for large enough problems.
  - Ligero's V amortizes its bottleneck computation over repeated SHA-256 instances [1, §5.4], resulting in sublinear scaling and fast verification times.
  - libSTARK's V has the best asymptotic performance and extremely low concrete costs.
  - Hyrax-naive requires cryptographic operations proportional to \( |w| \); Hyrax's refinements provide more than 100× savings.

### Effect of Trading V Runtime for Smaller Proofs

**Method:**
- We run the Merkle tree benchmark using the same setup as in Section 8.1, varying the size of P's witness commitment (Section 6.1). We experiment with commitments of size \( \log |w| \), \( |w|^{1/3} \), and \( |w|^{1/2} \). V's witness-related work at these three settings is \( O(|w|) \), \( O(|w|^{2/3}) \), and \( O(|w|^{1/2}) \), respectively.

**Results:**
- Figure 3 shows proof size and runtime for the specified commitment sizes. Hyrax-1/2 produces large proofs but has the fastest runtimes, while Hyrax-log produces the smallest proofs but has the longest runtimes. Hyrax-1/3 has similar runtimes to Hyrax-1/2, with P's costs dominated by Gir++ and V's by the RDL (Section 6.2). Its proof sizes are not much larger than Hyrax-log, indicating that the log and cube-root protocols have similar concrete costs at these problem sizes. Thus, Hyrax-1/3 offers a balanced solution.

### Discussion

- **Competitiveness:**
  - Our results show that Hyrax is competitive with the baselines, and the refinements in Sections 5 and 6 provide substantial improvements. Hyrax produces smaller proofs than all but Bulletproofs, which achieve smaller proofs at the cost of high computational overhead. For practical problem sizes, only Ligero is faster for both P and V; ZKB++ has faster P but often slower V; libSTARK has faster V but much slower P; and all three systems produce larger proofs than Hyrax.

- **Limitations:**
  - First, because Gir++ is designed for data-parallel computations (Section 3.2; Theorem 1), Hyrax is competitive primarily when computations contain sufficient parallelism or can be batched. This is evident in the performance improvement as parallelism increases in Figure 2. While the RDL (Section 6.2) allows Hyrax to leverage parallelism within one computation, not all applications fit these paradigms. Additionally, the RDL is both asymptotically and concretely costly for V, and eliminating this bottleneck is a future goal.
  - Second, we compare ZKB++, Ligero, and libSTARK only on the SHA-256 Merkle tree benchmark. This is appropriate for ZKB++ and Ligero, but for libSTARK, a more efficient hash function in \( F_{2^{64}} \) would improve performance [11, Fig. 4]. Future work includes comparing Hyrax and all baselines on Merkle trees using hash functions tailored to each system.
  - Third, our comparison does not consider multi-threaded performance, as libSTARK is the only baseline with a multi-threaded implementation [11, 67]. Prior work [99, 103, 104] suggests that Gir++ is highly parallelizable, and exploring this in Hyrax is a future direction.
  - Finally, our comparison does not include argument systems like libsnark [16, 66] that require trusted setup and non-standard, non-falsifiable assumptions (Section 2, paragraph 2). Hyrax aims to avoid these requirements. Ignoring this, Hyrax's proofs are larger, but its P cost is concretely and asymptotically smaller. For V, libsnark's offline setup is very expensive [105, §5.4], but its online V costs are generally cheaper than Hyrax's.

### Conclusion

We have described a succinct zero-knowledge argument for NP with no trusted setup and low concrete cost for both the prover and the verifier, based on standard cryptographic assumptions. This scheme is practical because it tightly integrates three components: a state-of-the-art interactive proof (IP), optimized transformation from IPs to zero-knowledge arguments, and a new cryptographic commitment scheme tailored to multilinear polynomials. A careful comparison with prior work shows that our argument system is competitive in both proof size and computational costs. Key future work includes further reducing proof size without increasing verifier runtime.