Individual bugs aside, the situation with innerHTML is pretty dire: Sec-
tion 10.3 of the current draft of HTML5 simply acknowledges that certain
script-created DOM structures are completely impossible to serialize to
HTML and does not require browsers to behave sensibly in such a case.
Caveat emptor!
Access to Other Documents
Scripts may come into possession of object handles that point to the root
hierarchy of another scripting context. For example, by default, every con-
text can readily reference parent, top, opener, and frames[], all supplied to it in
the top-level object. Calling the window.open(...) function to create a new win-
dow will also return a reference, and so will an attempt to look up an existing
named window using this syntax:
var window_handle = window.open("", "window_name");
Once the program holds a handle pointing to another scripting context,
it may attempt to interact with that context, subject to security checks dis-
cussed in Chapter 9. An example of a simple interaction might be as follows:
top.location.path = "/new_path.html";
or
frames[2].document.getElementById("output").innerHTML = "Hi mom!";
Browser-Side Scripts 111
In the absence of a valid handle, JavaScript-level interaction with an
unrelated document should not be possible. In particular, there is no way
tolook up unnamed windows opened in completely separate navigation
flows, at least until their name is explicitly set by one of the visited pages
(thewindow.name property permits this).
Script Character Encoding
JavaScript engines support several familiar, backslash-based string-encoding
methods that can be employed to escape quote characters, HTML markup,
and other problematic bits in the embedded text. These methods are as follows:
 C-style shorthand notation for certain control characters: \b for back-
space, \t for horizontal tab, \v for vertical tab, \f for form feed, \r for CR,
and \n for LF. This exact set of escape codes is recognized by both
ECMAScript and the JSON RFC.
 Three-digit, zero-padded, 8-bit octal character codes with no prefix
(such as “\145” instead of “e”). This C-inspired syntax is not a part of
ECMAScript but is in practice supported by all scripting engines, both
innormal code and in JSON.parse(...).
 Two-digit, zero-padded, 8-bit hexadecimal character codes, prefixed
with“x” (“e” becomes “\x65”). Again, this scheme is not endorsed by
ECMAScript or RFC 4627, but having its roots in the C language, it is
widely supported in practice.
 Four-digit, zero-padded, 16-bit hexadecimal Unicode values, prefixed
with “u” (“e” turns into “\u0065”). This format is sanctioned by ECMA-
Script and RFC 4627 and is supported by all modern browsers.
 A backslash followed by any character other than an octal digit; “b”, “t”,
“v”, “f”, “r,” or “n” characters used for other predefined escape sequences;
and “x” or “u”. In this scheme, the subsequent character will be treated
as a literal. ECMAScript permits this scheme to be used to escape only
quotes and the backslash character itself, but in practice, any other value
is accepted as well.
This approach is somewhat error prone, and as in the case of CSS,
itshould not be used to escape angle brackets and other HTML syntax
delimiters. This is because JavaScript parsing takes place after HTML
parsing, and the backslash prefix will be not treated in any special way
bythe HTML parser itself.
NOTE Somewhat inexplicably, Internet Explorer does not recognize the vertical tab (“\v”)
shorthand, thereby creating one of the more convenient (but very naughty!) ways to
testfor that particular browser:
if ("\v" == "v") alert("Looks like Internet Explorer!");
112 Chapter 6
Surprisingly, the Unicode-based escaping method (but not the other
ones) is also recognized outside strings. Although the idea seems arbitrary, the
behavior is a bit more sensible than with CSS: Escape codes can be used only
in identifiers, and they will not work as a substitute for any syntax-sensitive
symbols. Therefore, the following is possible:
\u0061lert("This displays a message!");
On the other hand, any attempt to substitute the parentheses or quotes
in a similar fashion would fail.
Unlike in some C or C++ implementations, stray multiline string literals
are not tolerated by any JavaScript engine. That said, despite a strongly worded
prohibition in ECMAScript specs, there is one exception: A lone backslash at
the end of a line may be used to join multiline literals seamlessly. This behav-
ior is illustrated below:
var text = 'This syntax
is invalid.';
var text = 'This syntax, on the other hand, \
is OK in all browsers.';
Code Inclusion Modes and Nesting Risks
As should be evident from the earlier discussions in this chapter, there are
several ways to execute scripts in the context of the current page. It is proba-
bly useful to enumerate some of the most common ones:
 Inline  blocks
 Remote scripts loaded with *
 javascript: URLs in various HTML parameters and in CSS
 CSS expression(...) syntax and XBL bindings in certain browsers
 Event handlers (onload, onerror, onclick, etc.)
 Timers (setTimeout, setInterval)
 eval(...) calls
Combining these methods often seems natural, but doing so can create
very unexpected and dangerous parsing chains. For example, consider the
transformation that would need to be applied to the value inserted by the
server in place of user_string in this code:
* On both types of  blocks, Microsoft supports a pseudo-dialect called JScript.Encode. This
mode can be selected by specifying a language parameter on the  tag and simply permits
the actual script to be encoded using a trivial alphabet substitution cipher to make it unreadable
to casual users. The mechanism is completely worthless from the security standpoint, as the
“encryption” can be reverted easily.
Browser-Side Scripts 113
It is often difficult to notice that the value will go through no fewer
thanthree rounds of parsing! First, the HTML parser will extract the onclick
parameter and put it into DOM; next, when the button is clicked, the first
round of JavaScript parsing will extract the setTimeout(...) syntax; and finally,
one second after the initial click, the actual do_stuff(...) sequence will be
parsed and executed.
Therefore, in the example above, in order to survive the process, user_string
needs to be double-encoded using JavaScript backslash sequences, and then
encoded again using HTML entities, in that exact order. Any different approach
will likely lead to code injection.
Another tricky escaping situation is illustrated here:
Even though the initial assignment of some_value requires user_string to
be escaped just once, the subsequent ad hoc construction of a second-order
script in the setTimeout(...) parameter introduces a vulnerability if no addi-
tional escaping is applied beforehand.
Such coding patterns happen frequently in JavaScript programs, and
they are very easy to miss. It is much better to consistently discourage them
than to audit the resulting code.
The Living Dead: Visual Basic
Having covered most of the needed ground related to JavaScript, it’s time
foran honorable mention of the long-forgotten contender for the scripting
throne. Despite 15 years of lingering in almost complete obscurity, browser-
side VBScript is still supported in Internet Explorer. In most aspects, Micro-
soft’s language is supposed to be functionally equivalent to JavaScript, and it
has access to exactly the same Document Object Model APIs and other built-
in functions as JavaScript. But, as one might expect, some tweaks and exten-
sions are present—for example, a couple of VB-specific functions in place of
the JavaScript built-ins.
There is virtually no research into the security properties of VBScript,
the robustness of the parser, or its potential incompatibilities with the mod-
ern DOM. Anecdotal evidence suggests that the language receives no consis-
tent scrutiny on Microsoft’s end, either. For example, the built-in MsgBox8
can be used to display modal, always-on-top prompts with a degree of flexibil-
ity completely unheard of in the JavaScript world, leaving alert(...) in the dust.
It is difficult to predict how long VBScript will continue to be supported
in this browser and what unexpected consequences for user and web applica-
tion security it is yet to have. Only time will tell.
114 Chapter 6
Security Engineering Cheat Sheet
When Loading Remote Scripts
As with CSS, you are linking the security of your site to the originating domain of the script.
When in doubt, make a local copy of the data instead. On HTTPS sites, require all scripts to
be served over HTTPS.
When Parsing JSON Received from the Server
Rely on JSON.parse(...) where supported. Do not use eval(...) or the eval-based implementation
provided in RFC 4627. Both are unsafe, especially when processing data from third parties. A
later implementation from the author of RFC 4627, json2.js,9 is probably okay.
When Putting User-Supplied Data Inside JavaScript Blocks
 Stand-alone strings in  blocks: Backslash-escape all control characters (0x00–0x1F),
“\”, “”, and quotes using numerical codes. It is also preferable to escape high-bit
characters.
Do not rely on user-supplied strings to construct dynamic HTML. Always use safe
DOM features such as innerText or createTextNode(...) instead. Do not use user-supplied
strings to construct second-order scripts; avoid eval(...), setTimeout(...), and so on.
 Stand-alone strings in separately served scripts: Follow the same rules as for 
blocks. If your scripts contain any sensitive, user-specific information, be sure to account
for cross-site script inclusion risks; use reliable parser-busting prefixes, such as “)}]'\n”,
near the beginning of a file or, at the very minimum, use a proper JSON serialization with
no padding or other tweaks. Additionally, consult Chapter 13 for tips on how to prevent
cross-site scripting in non-HTML content.
 Strings in inlined event handlers, javascript: URLs, and so on: Multiple levels of escaping
are involved. Do not attempt this because it is error prone. If unavoidable, apply the above
JS escaping rules first and then apply HTML or URL parameter encoding, as applicable,
to the resulting string. Never use in conjunction with eval(...), setTimeout(...), innerHTML,
and such.
 Nonstring content: Allow only whitelisted alphanumeric keywords and carefully validated
numerical values. Do not attempt to reject known bad patterns instead.
When Interacting with Browser Objects on the Client Side
 Generating HTML content on the client side: Do not resort to innerHTML, document.write(...),
and similar tools because they are prone to introducing cross-site scripting flaws, often in
unexpected ways. Use safe methods such as createElement(...) and appendChild(...) and
properties such as innerText or textContent to construct the document instead.
 Relying on user-controlled data: Make no assumptions about the escaping rules applied
to any values read back from the browser and, in particular, to location properties and
other external sources of URLs, which are inconsistent and vary from one implementa-
tion to another. Always do your own escaping.
Browser-Side Scripts 115
If You Want to Allow User-Controlled Scripts on Your Page
It is virtually impossible to do this safely. Experimental JavaScript rewriting frameworks,
suchas Caja (http://code.google.com/p/google-caja/), are the only portable option. Also see
Chapter 16 for information on sandboxed frames, an upcoming alternative for embedding
untrusted gadgets on web pages.
116 Chapter 6
N O N - H T M L
D O C U M E N T T Y P E S
In addition to HTML documents, about a dozen other
file formats are recognized and displayed by the ren-
dering engines of modern web browsers; a list that is
likely to grow over time.
Because of the powerful scripting capabilities available in some of these
formats, and because of the antics of browser-content handling, the set of
natively supported non-HTML inputs deserves a closer examination at this
point, even if a detailed discussion of some of their less-obvious security
consequences—such as content sniffing—will have to wait until Part II of
thisbook.
Plaintext Files
Perhaps the most prosaic type of non-HTML document recognized by every
single browser is a plaintext file. In this rendering mode, the input is simply
displayed as is, typically using a nonproportional typeface, and save for
optional character set transcoding, the data is not altered in any way.
All browsers recognize plaintext files served with Content-Type: text/plain
in the HTTP headers. In all implementations but Internet Explorer, plain-
text is also the fallback display method for headerless HTTP/0.9 responses
and HTTP/1.x data with Content-Type missing; in both these cases, plaintext
isused when all other content detection heuristics fail. (Internet Explorer
unconditionally falls back to HTML rendering, true to the letter of Tim
Berners-Lee’s original protocol drafts.)
For the convenience of developers, most browsers also automatically
map several other MIME types, including application/javascript and friends*
or text/css, to plaintext. Interestingly, application/json, the value mandated for
JSON responses in RFC 4627, is not on the list (perhaps because it is seldom
used in practice).
Plaintext rendering has no specific security consequences. That said,
dueto a range of poor design decisions in other browser components and in
third-party code, even seemingly harmless non-HTML formats are at a risk
ofbeing misidentified as, for example, HTML. Attacker-controlled plaintext
documents are of special concern because their layout is often fairly uncon-
strained and therefore particularly conducive to being misidentified. Chap-
ter 13 dissects these threats and provides advice on how to mitigate the risk.
Bitmap Images
Browser-rendering engines recognize direct navigation to the same set of bit-
map image formats that are normally supported in HTML documents when
loaded via the  tag, including JPEG, PNG, GIF, BMP, and a couple more.
When the user navigates directly to such a resource, the decoded bitmap is
shown in the document window, allowing the user little more than the ability
to scroll, zoom in and out, and save the file to disk.
In the absence of Content-Type information, images are detected based on
fileheader checks. When a Content-Type value is present, it is compared with
about a dozen predefined image types, and the user is routed accordingly.
But if an attempt to decode the image fails, file headers are used to make a
second guess. It is therefore possible (but, for the reasons explored in Chap-
ter 13, often unwise) to serve a GIF file as image/jpeg.
As with text files, bitmap images are a passive resource and carry no
unusual security risks.† However, whenever serving user-supplied images,
remember that attackers will have a degree of control over the data, even if
the format is carefully validated and scaled or recompressed. Therefore, the
concerns about such a document format being misinterpreted by a browser
or a plug-in still remain.
* The official MIME type for JavaScript is application/javascript, as per RFC 4329, but about a
dozen other values have been used in the past (e.g., text/javascript, application/x-javascript,
application/ecmascript).
† Naturally, exploitable coding errors occasionally happen in all programs that deal with
complex data formats, and image parsers are no exception.
118 Chapter 7
Audio and Video
For a very long time, browsers had no built-in support for playing audio and
video content, save for an obscure and oft-ridiculed  tag in Internet
Explorer, which to this day can be used to play simple MID or WAV files. In
the absence of real, cross-browser multimedia playback functionality, audio
and video were almost exclusively the domain of browser plug-ins, whether
purpose-built (such as Windows Media Player or Apple QuickTime) or generic
(Adobe Flash, Microsoft Silverlight, and so on).
The ongoing work on HTML5 seeks to change this through support for
 and  tags: convenient, scriptable methods to interface with
built-in media decoders. Unfortunately, there is substantial vendor-level dis-
agreement as to which video formats to support and what patent consequences
this decision may have. For example, while many browsers already support
Ogg Theora (a free, open source, but somewhat niche codec), spirited argu-
ments surrounding the merits of supporting the very popular but patent- and
royalty-encumbered H.264 format and the prospects of a new, Google-backed
WebM alternative will probably continue for the foreseeable future.
As with other passive media formats (and unlike some types of plug-in-
rendered content!), neither  nor HTML5 multimedia are expected
to have any unusual implications for web application security, as long as the
possibility of content misidentification is mitigated appropriately.*
XML-Based Documents
Readers who found the handling of the formats discussed so far to be too
sane for their tastes are in for a well-deserved treat. The largest and definitely
most interesting family of browser-supported non-HTML document types
relies on the common XML syntax and provides more than a fair share of
interesting surprises.
Several of the formats belonging to this category are forwarded to
specialized, single-purpose XML analyzers, usually based on the received
Content-Type value or other simple heuristics. But more commonly, the pay-
load is routed to the same parser that is relied upon to render XHTML docu-
ments and then displayed using this common pipeline.
In the latter case, the actual meaning of the document is determined by
the URL-like xmlns namespace directives present in the markup itself, and
the namespace parameter may have nothing to do with the value originally
supplied in Content-Type. Quite simply, there is no mechanism that would pre-
vent a document served as application/mathml+xml from containing nothing
but XHTML markup and beginning with .
* But some far-fetched interactions between various technologies are a distinct possibility. For
example, what if the  tag supports raw, uncompressed audio and is pointed to a sensitive
nonaudio document, and then the proposed HTML5 microphone API is used by another
website to capture the resulting waveform and reconstruct the contents of the file?
Non-HTML Document Types 119
In the most common scenario, the namespace for the entire XML file is
defined only once and is attached to the top-level tag. In principle, however,
any number of different xmlns directives may appear in a single file, giving