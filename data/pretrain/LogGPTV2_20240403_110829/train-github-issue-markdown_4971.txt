Consider implementing an asynchronous file system API.
On the Web, the Native File System API implements an API surface that provides
file and directory access.
  * Spec: https://wicg.github.io/native-file-system/
  * Explainer: https://github.com/WICG/native-file-system/blob/master/EXPLAINER.md
A similar API shape for asynchronous file access would be great for interop
between server/command-line and web code.
The API has a shape that allows streaming to a file, creating new files,
opening an existing file, cloberring or not, iterating through directories,
etc.
Adapted from the explainer, here's an example:
    const dir_ref = ... // Some mechanism to obtain a directory handle TBD.
    for await (const [name, entry] of dir_ref) {
        // Iterate through a directory.
        // entry is a FileSystemFileHandle or a FileSystemDirectoryHandle.
        // name is equal to entry.name
    }
    const new_file = await dir_ref.getFile('foo.txt', {create: true}); // Create a file.
    // Write to a file using an API resembling something like pwrite.
    const new_file_writer = await new_file.createWritable();
    await new_file_writer.write(await file_ref.getFile());
    await new_file_writer.close();
    // Or using streams.
    const file_ref = await dir_ref.getFile('foo.js'); // Get a file from a directory.
    const copy2 = await dir_ref.getFile('foo2.txt', {create: true});
    (await file_ref.getFile()).stream().pipeTo(await copy2.createWritable());
    ...