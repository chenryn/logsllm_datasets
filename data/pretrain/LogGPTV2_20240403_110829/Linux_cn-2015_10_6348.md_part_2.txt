* cn=config 指的是全局配置选项。
* olcDatabase 指的是一个特定的数据库实例的名称，并且通常可以在 `/etc/openldap/slapd.d/cn=config` 目录中发现。
根据上面提供的理论背景，`ldaprootpasswd.ldif` 文件将添加一个条目到 LDAP 目录中。在那个条目中，每一行代表一个属性键值对（其中 dn，changetype，add 和 olcRootPW 为属性，每个冒号右边的字符串为相应的键值）。
随着我们的进一步深入，请记住上面的这些，并注意到在这篇文章的余下部分，我们使用相同的 通用名   （    Common Names    ）  `(cn=)`，而这些余下的步骤中的每一步都将与其上一步相关。
**5. 现在，通过特别指定相对于 ldap 服务的 URI ，添加相应的 LDAP 条目，其中只有 protocol/host/port 这几个域被允许使用。**
```
# ldapadd -H ldapi:/// -f ldaprootpasswd.ldif
```
上面命令的输出应该与下面的图像相似：
![LDAP 配置](/data/attachment/album/201510/04/004638s7p4gpsjp7fjdoyg.png)
*LDAP 配置*
接着从 `/etc/openldap/schema` 目录导入一个基本的 LDAP 定义：
```
# for def in cosine.ldif nis.ldif inetorgperson.ldif; do ldapadd -H ldapi:/// -f /etc/openldap/schema/$def; done
```
![LDAP 定义](/data/attachment/album/201510/04/004640rmcxcjjty9myy9xj.png)
*LDAP 定义*
**6. 让 LDAP 在它的数据库中使用你的域名。**
以下面的内容创建另一个 LDIF 文件，我们称之为 `ldapdomain.ldif`， 然后酌情替换这个文件中的域名（在 域名部分   （    Domain Component    ）  dc=） 和密码：
```
dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"
  read by dn.base="cn=Manager,dc=mydomain,dc=com" read by * none
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=mydomain,dc=com
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=mydomain,dc=com
dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcRootPW
olcRootPW: {SSHA}PASSWORD
dn: olcDatabase={2}hdb,cn=config
changetype: modify
add: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by
  dn="cn=Manager,dc=mydomain,dc=com" write by anonymous auth by self write by * none
olcAccess: {1}to dn.base="" by * read
olcAccess: {2}to * by dn="cn=Manager,dc=mydomain,dc=com" write by * read
```
接着使用下面的命令来加载：
```
# ldapmodify -H ldapi:/// -f ldapdomain.ldif
```
![LDAP 域名配置](/data/attachment/album/201510/04/004642ymmnt77gm1shm31m.png)
*LDAP 域名配置*
**7. 现在，该是添加一些条目到我们的 LDAP 目录的时候了。在下面的文件中，属性和键值由一个冒号`(:)` 所分隔，这个文件我们将命名为 `baseldapdomain.ldif`:**
```
dn: dc=mydomain,dc=com
objectClass: top
objectClass: dcObject
objectclass: organization
o: mydomain com
dc: mydomain
dn: cn=Manager,dc=mydomain,dc=com
objectClass: organizationalRole
cn: Manager
description: Directory Manager
dn: ou=People,dc=mydomain,dc=com
objectClass: organizationalUnit
ou: People
dn: ou=Group,dc=mydomain,dc=com
objectClass: organizationalUnit
ou: Group
```
添加条目到 LDAP 目录中：
```
# ldapadd -x -D cn=Manager,dc=mydomain,dc=com -W -f baseldapdomain.ldif
```
![添加 LDAP 域名，属性和键值](/data/attachment/album/201510/04/004644u0tql4lbqahttsus.png)
*添加 LDAP 域名，属性和键值*
**8. 创建一个名为 ldapuser 的 LDAP 用户(`adduser ldapuser`)，然后在`ldapgroup.ldif` 中为一个 LDAP 组创建定义。**
```
# adduser ldapuser
# vi ldapgroup.ldif
```
添加下面的内容：
```
dn: cn=Manager,ou=Group,dc=mydomain,dc=com
objectClass: top
objectClass: posixGroup
gidNumber: 1004
```
其中 gidNumber 是 ldapuser 在 `/etc/group` 中的 GID，然后加载这个文件：
```
# ldapadd -x -W -D "cn=Manager,dc=mydomain,dc=com" -f ldapgroup.ldif
```
**9. 为用户 ldapuser 添加一个带有定义的 LDIF 文件（`ldapuser.ldif`）：**
```
dn: uid=ldapuser,ou=People,dc=mydomain,dc=com
objectClass: top
objectClass: account
objectClass: posixAccount
objectClass: shadowAccount
cn: ldapuser
uid: ldapuser
uidNumber: 1004
gidNumber: 1004
homeDirectory: /home/ldapuser
userPassword: {SSHA}fiN0YqzbDuDI0Fpqq9UudWmjZQY28S3M
loginShell: /bin/bash
gecos: ldapuser
shadowLastChange: 0
shadowMax: 0
shadowWarning: 0
```
并加载它：
```
# ldapadd -x -D cn=Manager,dc=mydomain,dc=com -W -f ldapuser.ldif
```
![LDAP 用户配置](/data/attachment/album/201510/04/004646t32khzaa1ffk1n8w.png)
*LDAP 用户配置*
相似地，你可以删除你刚刚创建的用户条目：
```
# ldapdelete -x -W -D cn=Manager,dc=mydomain,dc=com "uid=ldapuser,ou=People,dc=mydomain,dc=com"
```
**10. 允许有关 ldap 的通信通过防火墙：**
```
# firewall-cmd --add-service=ldap
```
**11. 最后，但并非最不重要的是使用 LDAP 开启客户端的认证。**
为了在最后一步中对我们有所帮助，我们将使用 authconfig 工具（一个配置系统认证资源的界面）。
使用下面的命令，在通过 LDAP 服务器认证成功后，假如请求的用户的家目录不存在，则将会被创建：
```
# authconfig --enableldap --enableldapauth --ldapserver=rhel7.mydomain.com --ldapbasedn="dc=mydomain,dc=com" --enablemkhomedir --update
```
![LDAP 客户端认证](/data/attachment/album/201510/04/004646j981egi08v198j0v.png)
*LDAP 客户端认证*
### 总结
在这篇文章中，我们已经解释了如何利用一个 LDAP 服务器来设置基本的认证。若想对当前这个指南里描述的设置进行更深入的配置，请参考位于 RHEL 系统管理员指南里的 [第 13 章 – LDAP 的配置](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Directory_Servers.html)，并特别注意使用 TLS 来进行安全设定。
请随意使用下面的评论框来留下你的提问。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[FSSlc](https://github.com/FSSlc) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出