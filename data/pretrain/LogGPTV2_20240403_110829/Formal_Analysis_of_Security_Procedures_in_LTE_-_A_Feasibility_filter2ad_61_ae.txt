13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
Fig. 8. X2 handover model
shared between the UE and the S-eNB (26). The remaining additional steps are
needed to establish some parameters required for deriving the current and future
handover keys such as the next hop key (27-28) and the cell identiﬁer for the
T-eNB (29).
The model of S1 handover (Fig. 9) requires almost the same initialization
steps (omitted here) except that the additional cell identiﬁer cellid parameter
of HO X2 is no longer needed. The main diﬀerence between the models is in
the MME role. In HO S1, it is the MME that computes the key to be used in
the T-eNB which is NH2. However, in HO X2 it is the S-eNB that computes the
∗
target’s key which is the K
eNB. In addition, the MME provides its key (NH2) in
the last steps of the protocols (lines 7-8 and 20-21) for use in the next handover.
In both handover models, we consider the same type of sanity queries in order
to check correctness. Recall that such queries are for special reachability events
executed at each end of the process macros. ProVerif is not able to prove all of
them. Nevertheless, the attack traces of the queries that ProVerif was able to
falsify, show that the reachability events for the unresolved queries are executed
as well. For the correspondence assertions, the aim is to prove agreement on the
∗
eNB or NH2) and the chosen algorithm between the UE
received handover key (K
and the T-eNB. ProVerif is able to prove all the assertions for the HO X2 model
358
N.B. Henda and K. Norrman
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
l e t UE( u e c a p s : c a p s , n h 2 : k e y ) =
i n ( s e c c h , (=CMD, a : a l g ) ) ;
i f mem( a , u e c a p s )
then
out ( pubch ,
( CPL ,
s e n c ( ( a , mac ( ( CPL , a ) , n h 2 ) ) , n h 2 ) ) ) .
l e t MME( u e c a p s : c a p s , n h 2 : k e y ) =
i n ( s e c c h , =RQD) ;
out ( s e c c h ,
(ACK, nh 2 , u e c a p s ) ) .
l e t SeNodeB ( kenb : k e y ) =
out ( s e c c h , RQD) .
l e t TeNodeB ( ) =
i n ( s e c c h , (=ACK, n h 2 : key , u e c a p s : c a p s ) ) ;
l e t a : a l g s u c h t h a t mem( a , u e c a p s )
out ( s e c c h ,
i n ( pubch , (=CPL , msg : b i t s t r i n g ) ) ;
l e t
i f
r r c m a c = mac ( ( CPL , a ) , n h 2 )
r r c m a c : b i t s t r i n g ) = s d e c ( msg , n h 2 )
(CMD, a ) ) ;
then 0 .
i n
i n
p r o c e s s
(=a ,
. . .
(
( ! UE( u e c a p s , n h 2 ) )
( ! TeNodeB ( ) )
|
|
( ! SeNodeB ( kenb ) )
|
( !MME( u e c a p s , n h 2 ) )
)
Fig. 9. S1 handover model
Table 1. Analysis Results
Property
AKA
NAS SCP NAS SRP HO X2
HO S1
secrecy
true
true
weak-agree UE =⇒ . . . true
true
weak-agree . . . =⇒ UE true
true
inj-agree UE =⇒ . . .
true
false
inj-agree . . . =⇒ UE unresolved false
true
true
true
true
true
true
true
unresolved
unresolved unresolved unresolved
true
true
true
true
except one (see Table 1). For the HO S1 model, ProVerif is unable to prove the
injective assertions, but proves the basic ones.
6 Conclusion
We have presented our work on security protocols in LTE. We have used ProVerif
to formalize and verify the protocols. Our analysis has shown that all the secrecy
and weak agreement properties hold which was expected. However, we had dif-
ﬁculties proving stronger agreement properties. All our results are summarized
in Table 1. To the best of our knowledge, the security command procedures and
handover procedures have not been previously analyzed in this manner. During
the modeling process, our aim was to remain as faithful as possible to the 3GPP
speciﬁcations [1] of the protocols and their trust model. One important aspect
that is lacking in ProVerif is the support for modeling local state information.
As we explain later, support for that would relieve protocol designers from the
common and tedious tasks of ensuring uniqueness of inputs to key derivations
functions.
Formal Analysis of Security Procedures in LTE - A Feasibility Study
359
ProVerif veriﬁes the models in the order of seconds on a regular laptop and
the runtime is hence adequate for practical use. The concepts of the ProVerif
input language matches the concepts used in the 3GPP speciﬁcations. Therefore,
constructing the models does not take any signiﬁcant time assuming familiarity
with ProVerif and the system under study.
Future Work. We have been experimenting with other formal veriﬁcation tools.
For this ﬁrst work, we thought that ProVerif oﬀers a good compromise for ease
of use and expressiveness of the input language. Nevertheless, we are planning
to conduct a more thorough evaluation and comparison of similar tools. Fur-
thermore, we believe that in an industrial context, such as for proposals to
standardization processes, several tools should be used in combination in order
to overcome their shortcomings. This does not necessarily mean that a process
as deﬁned by a standardization organization must formally mandate the use of
such tools. In fact, as we explain below, there are few aspects in the protocols
that we could not handle properly with ProVerif.
In general, freshness is achieved by guaranteeing uniqueness of the derived
keys in each session. This can be implemented by using nonces, like in AKA for
the derivation of the KASME key. However, all the derivation of lower level keys
rely on other protocol parameters such as counters, cell identiﬁers, etc. Counters
are part of the protocol state that is continuously being updated. We believe
that any issue in the considered protocols would be most likely related to this
aspect, especially when diﬀerent protocols are interleaved and used arbitrarily
in other more complex compound procedures. State-based formal veriﬁcation
tools can be better suited to model check such features. However in order to
improve eﬃciency of such (usually exhaustive) state search, one can assume a
weaker attacker model. As a future work, we are investigating to which extent
the attacker model can be simpliﬁed and still be able to ﬁnd attacks.
Other continuations of this work include performing similar analysis of the
protocols for inter-operability between LTE and other types of radio access net-
works (GSM and WCDMA), and updating our models to handle diﬀerent sce-
narios. For example, in the AKA model of Fig. 3, each run of the UE process
represents a new device because in every run, a new fresh pair of IMSI, K is cre-
ated and used. The model can be changed by adding another similar UE process
which instead, gets the pair from the table being ﬁlled by the original process.
This is how one can model arbitrary reruns of AKA by the same UE. In addition,
the mobility models can be enhanced to include multi hop handovers. This can
be used to verify further security properties, e.g. two hop forward security.
References
1. 3GPP The Mobile Broadband Standard, http://www.3gpp.org/specifications/
2. 10th Computer Security Foundations Workshop (CSFW 1997), Rockport, Mas-
sachusetts, USA, June 10-12. IEEE Computer Society (1997)
3. Abadi, M., Blanchet, B., Fournet, C.: Just Fast Keying in the Pi Calculus. In:
Schmidt, D. (ed.) ESOP 2004. LNCS, vol. 2986, pp. 340–354. Springer, Heidelberg
(2004)
360
N.B. Henda and K. Norrman
4. Abadi, M., Fournet, C.: Mobile values, new names, and secure communication. In:
Hankin, C., Schmidt, D. (eds.) POPL, pp. 104–115. ACM (2001)
5. Arapinis, M., Mancini, L.I., Ritter, E., Ryan, M., Golde, N., Redon, K., Bor-
gaonkar, R.: New privacy issues in mobile telephony: ﬁx and veriﬁcation. In: Yu,
T., Danezis, G., Gligor, V.D. (eds.) ACM Conference on Computer and Commu-
nications Security, pp. 205–216. ACM (2012)
6. Armando, A., et al.: The AVISPA Tool for the Automated Validation of Internet
Security Protocols and Applications. In: Etessami, K., Rajamani, S.K. (eds.) CAV
2005. LNCS, vol. 3576, pp. 281–285. Springer, Heidelberg (2005)
7. Blanchet, B.: Automatic veriﬁcation of correspondences for security protocols
8. Blanchet, B.: An Eﬃcient Cryptographic Protocol Veriﬁer Based on Prolog Rules.
In: CSFW, pp. 82–96. IEEE Computer Society (2001)
9. Blanchet, B., Chaudhuri, A.: Automated Formal Analysis of a Protocol for Secure
File Sharing on Untrusted Storage. In: IEEE Symposium on Security and Privacy,
pp. 417–431. IEEE Computer Society (2008)
10. Blanchet, B., Smyth, B., Cheval, V.: ProVerif 1.88: Automatic Cryptographic Pro-
tocol Veriﬁer, User Manual and Tutorial
11. Bodei, C., Buchholtz, M., Degano, P., Nielson, F., Nielson, H.R.: Automatic vali-
dation of protocol narration
12. Bouassida, M.S., Chridi, N., Chrisment, I., Festor, O., Vigneron, L.: Automated
veriﬁcation of a key management architecture for hierarchical group protocols.
Annales des T´el´ecommunications 62(11-12), 1365–1387 (2007)
13. Cremers, C.J.F.: The Scyther Tool: Veriﬁcation, Falsiﬁcation, and Analysis of Se-
curity Protocols. In: Gupta, A., Malik, S. (eds.) CAV 2008. LNCS, vol. 5123, pp.
414–418. Springer, Heidelberg (2008)
14. Cremers, C.J.F.: Session-state Reveal Is Stronger Than Ephemeral Key Reveal:
Attacking the NAXOS Authenticated Key Exchange Protocol. In: Abdalla, M.,
Pointcheval, D., Fouque, P.-A., Vergnaud, D. (eds.) ACNS 2009. LNCS, vol. 5536,
pp. 20–33. Springer, Heidelberg (2009)
15. Cremers, C.: Key Exchange in IPsec Revisited: Formal Analysis of IKEv1 and IKEv2.
In: Atluri, V., Diaz, C. (eds.) ESORICS 2011. LNCS, vol. 6879, pp. 315–334. Springer,
Heidelberg (2011)
16. Dolev, D., Yao, A.C.-C.: On the security of public key protocols. IEEE Transactions
on Information Theory 29(2), 198–207 (1983)
17. Fang, J., Jiang, R.: An analysis and improvement of 3GPP SAE AKA protocol
based on strand space model. In: 2010 2nd IEEE International Conference on
Network Infrastructure and Digital Content, pp. 789–793 (September 2010)
18. Holzmann, G.J.: The Model Checker SPIN. IEEE Trans. Software Eng. 23(5),
279–295 (1997)
19. Jakobsson, M., Wetzel, S.: Security Weaknesses in Bluetooth. In: Naccache, D.
(ed.) CT-RSA 2001. LNCS, vol. 2020, pp. 176–191. Springer, Heidelberg (2001)
20. Lowe, G.: A Hierarchy of Authentication Speciﬁcation. In: CSFW [2], pp. 31–44
21. Lowe, G.: Casper: A Compiler for the Analysis of Security Protocols. In: CSFW
[2], pp. 18–30
22. Meadows, C.: The NRL Protocol Analyzer: An Overview. J. Log. Program. 26(2),
113–131 (1996)
23. Meier, S., Schmidt, B., Cremers, C., Basin, D.: The TAMARIN Prover for the
Symbolic Analysis of Security Protocols. In: Sharygina, N., Veith, H. (eds.) CAV
2013. LNCS, vol. 8044, pp. 696–701. Springer, Heidelberg (2013)
Formal Analysis of Security Procedures in LTE - A Feasibility Study
361
24. Qachri, N., Markowitch, O., Dricot, J.-M.: A formally Veriﬁfed Protocol for Se-
cure Vertical Handovers in 4G Heterogeneous Networks. International Journal of
Security and Its Applications 7(6) (2013)
25. Schmidt, B., Sasse, R., Basin, D.: Automated Veriﬁcation of Group Key Agreement
Protocols. In: IEEE Symposium on Security and Privacy (to appear, 2014)
26. Taha, A.M., Abdel-Hamid, A.T., Tahar, S.: Formal analysis of the handover
schemes in mobile WiMAX networks. In: IFIP International Conference on Wire-
less and Optical Communications Networks, WOCN 2009, pp. 1–5 (April 2009)
27. Taha, A.M., Abdel-Hamid, A.T., Tahar, S.: Formal Veriﬁcation of IEEE 802.16
Security Sublayer Using Scyther Tool. In: International Conference on Network
and Service Security, N2S 2009, pp. 1–5 (June 2009)
28. Tang, C., Naumann, D.A., Wetzel, S.: Symbolic Analysis for Security of Roaming
Protocols in Mobile Networks - (Extended Abstract). In: Rajarajan, M., Piper, F.,
Wang, H., Kesidis, G. (eds.) SecureComm. LNICST, vol. 96, pp. 480–490. Springer
(2011)
29. Tsay, J.-K., Mjølsnes, S.F.: A Vulnerability in the UMTS and LTE Authentication
and Key Agreement Protocols. In: Kotenko, I., Skormin, V. (eds.) MMM-ACNS
2012. LNCS, vol. 7531, pp. 65–76. Springer, Heidelberg (2012)
30. Zhang, M., Fang, Y.: Security analysis and enhancements of 3gpp authentication
and key agreement protocol