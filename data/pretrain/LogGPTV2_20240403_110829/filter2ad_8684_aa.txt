**作者：小黑猪（朱文哲）@银河安全实验室  
公众号：[银河安全实验室](https://mp.weixin.qq.com/s/lDZWjgAoJmD141ppd8DjgA "银河安全实验室")**
VxWorks
操作系统是美国WindRiver公司于1983年设计开发的一种嵌入式实时操作系统（RTOS），它以其良好的可靠性和卓越的实时性被广泛地应用在通信、军事、航空及航天等高精尖技术领域中。2012年8月登陆的好奇号，以及近日成功降落火星的洞察号均使用了VxWorks系统。
本文将以施耐德昆腾系列PLC的NOE-711以太网模块的固件为例，讲解一下基于VxWorks操作系统的嵌入式设备固件的一些常用分析方法。
### 1\. 固件提取
通常我们能够通过设备厂商的官网获取到设备固件的升级包，从该升级包中将真正的固件进行提取后才能进行分析。提取固件的常用方法是使用Binwalk等二进制分析工具对固件升级包进行自动化分析，待确认升级包类型后再进行固件提取或其他操作。
通过Binwalk进行自动分析可以发现，NOE 771模块的升级包NOE77101.bin中内嵌了一个使用zlib压缩的文件。
![
](https://images.seebug.org/content/images/2018/12/3b98fd02-d276-413d-8ed3-9b1ff2a68fc3.jpg)
通过调用Binwalk的-e参数进行自动提取后，Binwalk会把自动提取后的文件以偏移地址命名并存储在特定的目录中。
![
](https://images.seebug.org/content/images/2018/12/47acedbf-0f8d-49fe-a9f0-15df6a5a1ae4.jpg)
继续使用Binwalk对提取的385文件进行分析可以确认，该文件的确是我们所需要分析的VxWorks固件，因此提取的385文件也就是我们需要分析的固件文件了。
![
](https://images.seebug.org/content/images/2018/12/da4afc8e-b8a2-4bd7-8d25-e780eac63594.jpg)
### 2\. 分析固件内存加载地址
为了对VxWorks系统固件进行逆向分析，我们首先必须要知道固件在内存中的加载地址。加载地址的偏差会影响到一些绝对地址的引用例如跳转函数表、字符串表的引用等。
下图是VxWorks系统在PowerPC架构下的内存分布图，如图所示VxWorks的系统固件将会被加载到一个由BSP (Board Support
Package)定义的内存地址中。
![
](https://images.seebug.org/content/images/2018/12/49d18eaf-9a0e-4e06-8b00-2e4fcab995c2.jpg)
#### 2.1 方法一：通过封装的二进制文件头直接识别加载地址
某些设备的固件会使用某种格式进行封装，比较常见的是使用ELF(executable and linkable
format)格式进行封装。采用ELF格式封装后的文件头部有特定的数据位记录了该固件的加载地址，因此针对该情况我们可以直接使用greadelf等工具直接读取ELF文件头，从而直接获取到固件的加载地址，此外IDA也能直接识别ELF格式封装的VxWorks固件，无需额外处理即可进行自动化分析。
![
](https://images.seebug.org/content/images/2018/12/1a4a267e-4ca4-4aaf-b572-63918c0bc375.jpg)
#### 2.2 方法二：分析固件头部的初始化代码，寻找加载地址的特征
在很多情况下我们拿到的固件是没有采用ELF格式封装的，这时就需要我们通过对固件的某些特征进行分析来判断具体的加载地址。还是以施耐德的NOE 711固件为例,
在具体分析某个固件时首先我们需要知道目标设备的CPU架构，具体可以如下图所示通过 **binwalk -A**
指令来对固件的CPU架构进行分析，此外也可以用 **binwalk -Y**
指令来调用capstone反汇编引擎来进行辅助判断，不过我实际测试下来存在一些误报的情况会把NOE 711的固件识别成arm架构的。
![
](https://images.seebug.org/content/images/2018/12/a378f74a-0bd3-4912-91f0-e5eeb280bdc3.jpg)
在得知目标CPU架构后就可以使用IDA加载固件并对其代码进行初步分析。
![
](https://images.seebug.org/content/images/2018/12/c6adc90c-8da6-4bde-b9cc-4a232e71fdc7.jpg)
![
](https://images.seebug.org/content/images/2018/12/745a1452-aeb2-40e2-abfc-d1ec174ab130.jpg)
下图是默认加载后的IDA界面，仅仅分析出了极少数的函数。接下来就需要根据固件头部的这段代码来寻找加载地址的特征。
![
](https://images.seebug.org/content/images/2018/12/0efc16f4-e3ae-4d81-8e6c-28a9d15dc5d7.jpg)
在固件头部有如下图所示的一段有趣的代码，在对r1和r3寄存器进行赋值后进行了跳转。
![
](https://images.seebug.org/content/images/2018/12/fd07f3ea-3198-4c1f-9ba9-0ed4af9a02e1.jpg)
下图是PowerPC的寄存器用途说明，从图中可以看到R1寄存器是栈指针，而R3寄存器则是第一个参数。
![
](https://images.seebug.org/content/images/2018/12/e0da9f6e-8f70-431f-8850-c412d05eba35.jpg)
现在回到我们之前看的固件头部代码处，这段代码相当于是先将栈地址设置为0x10000，将第一个参数(r3寄存器)设置为0x0，随后在栈上开辟0x10个字节的空间后跳转到当前地址+0x1cd34处执行。
![
](https://images.seebug.org/content/images/2018/12/f31c807e-3009-4962-b8e1-cd4b42e9a731.jpg)
根据VxWorks官网文档对对内存布局的描述， **Initial Stack** 是 **usrInit** 函数的初始化栈。
![
](https://images.seebug.org/content/images/2018/12/1ded37b5-6408-4651-9b14-173a71a4881b.jpg)
而 **usrInit** 函数则是VxWorks系统引导后运行的第一个函数，再结合之前我们分析的那段代码，可以基本确定在大部分情况下第一个跳转的地址就是
**usrInit** 这个函数的地址。
![
](https://images.seebug.org/content/images/2018/12/34033440-ce1a-4759-8529-6dab27f3684d.jpg)
随后我们再回忆一下之前看到的VxWorks
PowerPC内存布局图可以发现，初始化栈的地址同时也是固件的内存加载地址，因此r1寄存器指向的0x10000就是我们所寻找的固件加载地址。
![
](https://images.seebug.org/content/images/2018/12/fabc2a8e-b89a-4f4d-909a-e2c17586371d.jpg)
#### 2.3 方法三：基于bss区数据初始化代码的特征，计算加载地址
另一个分析固件加载地址的常用方法是，找到bss区域的初始化代码后间接计算出固件加载地址。bss(Block Started by
Symbol)区在VxWorks系统中主要用于存储一些当前未赋值的变量,在系统启动过程中VxWorks会使用 **bzero**
函数对bss区的数据进行清零 。
如下图所示我们可以得知VxWorks固件自身有三个section， **text、 ** _*data_
*以及**bss**这三个部分共同组成了VxWorks固件。