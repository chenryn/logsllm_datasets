### 节点上的容器部署

在一个节点上运行以下命令启动名为`logger`的容器，并设置亲和性（affinity）以确保它与名为`front`的容器在同一节点上：
```sh
$ docker run -d --name logger -e affinity:container==front logger
87c4376856a8
```

使用`docker ps`命令查看当前节点上的容器状态：
```sh
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
87c4376856a8   nginx:latest   "nginx"  < 1 second ago  running        192.168.0.42:80->80/tcp  node-1   front
963841b138d8   logger:latest  "logger" < 1 second ago  running                             node-1   logger
```
新启动的`logger`容器将被部署到`node-1`节点上。

### 镜像亲和性过滤

通过镜像亲和性过滤，可以避免从网络上拉取镜像，从而节省启动时间。这种过滤方式只将任务分配给那些本地已有相应镜像的节点。

假设我们已经执行了以下命令来预先拉取镜像：
```sh
$ docker -H node-1:2375 pull redis
$ docker -H node-2:2375 pull mysql
$ docker -H node-3:2375 pull redis
```

此时，我们知道`node-1`和`node-3`已经有了`redis`镜像。因此，在启动新的`redis`容器时，可以使用`-e affinity:image==redis`来保证这些容器不会被调度到没有该镜像的`node-2`节点上，具体操作如下：
```sh
$ docker run -d --name redis1 -e affinity:image==redis redis
$ docker run -d --name redis2 -e affinity:image==redis redis
$ docker run -d --name redis3 -e affinity:image==redis redis
$ docker run -d --name redis4 -e affinity:image==redis redis
$ docker run -d --name redis5 -e affinity:image==redis redis
$ docker run -d --name redis6 -e affinity:image==redis redis
$ docker run -d --name redis7 -e affinity:image==redis redis
$ docker run -d --name redis8 -e affinity:image==redis redis
```

使用`docker ps`命令查看新启动的`redis`容器的状态：
```sh
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
87c4376856a8   redis:latest   "redis"  < 1 second ago  running                            node-1   redis1
1212386856a8   redis:latest   "redis"  < 1 second ago  running                            node-1   redis2
87c4376639a8   redis:latest   "redis"  < 1 second ago  running                            node-3   redis3
1234376856a8   redis:latest   "redis"  < 1 second ago  running                            node-1   redis4
86c2136253a8   redis:latest   "redis"  < 1 second ago  running                            node-3   redis5
87c3236856a8   redis:latest   "redis"  < 1 second ago  running                            node-3   redis6
87c4376856a8   redis:latest   "redis"  < 1 second ago  running                            node-3   redis7
963841b138d8   redis:latest   "redis"  < 1 second ago  running                            node-3   redis8
```

### 端口过滤

如果主机上的端口已被一个容器绑定，则其他容器无法再绑定相同的端口。Swarm中的端口过滤功能会根据指定的端口映射选择合适的节点来部署容器。如果没有满足条件的节点，请求将失败。

例如，我们的集群有三个节点：`node-1`、`node-2`和`node-3`。首先，我们将主机的80端口绑定到`nginx`容器的80端口：
```sh
$ docker run -d -p 80:80 nginx
87c4376856a8
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
87c4376856a8   nginx:latest   "nginx"  < 1 second ago  running        192.168.0.42:80->80/tcp  node-1   prickly_engelbart
```

继续部署第二个`nginx`容器：
```sh
$ docker run -d -p 80:80 nginx
963841b138d8
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
963841b138d8   nginx:latest   "nginx"  < 1 second ago  running        192.168.0.43:80->80/tcp  node-2   dreamy_turing
87c4376856a8   nginx:latest   "nginx"  Up About a minute  running        192.168.0.42:80->80/tcp  node-1   prickly_engelbart
```

继续部署第三个`nginx`容器：
```sh
$ docker run -d -p 80:80 nginx
f8b693db9cd6
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
f8b693db9cd6   nginx:latest   "nginx"  < 1 second ago  running        192.168.0.44:80->80/tcp  node-3   stoic_albattani
963841b138d8   nginx:latest   "nginx"  Up About a minute  running        192.168.0.43:80->80/tcp  node-2   dreamy_turing
87c4376856a8   nginx:latest   "nginx"  Up About a minute  running        192.168.0.42:80->80/tcp  node-1   prickly_engelbart
```

尝试部署第四个`nginx`容器时，由于所有节点的80端口都已被占用，调度器将返回错误：
```sh
$ docker run -d -p 80:80 nginx
Error response from daemon: no resources available to schedule container
```

### 调度策略

#### Binpacking策略

Binpacking策略尽可能紧凑地使用节点资源，减少碎片化。它根据节点的CPU和RAM等资源为节点排序，并选择能够使节点资源利用最紧凑的节点来运行容器。

例如，假设集群有两个节点`node-1`和`node-2`，每个节点都有2GB的RAM。首先部署一个占用1GB内存的`mysql`容器：
```sh
$ docker run -d -P -m 1G --name db mysql
f8b693db9cd6
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
f8b693db9cd6   mysql:latest   "mysqld" < 1 second ago  running        192.168.0.42:49178->3306/tcp  node-1   db
```

接着部署一个同样占用1GB内存的`nginx`容器：
```sh
$ docker run -d -P -m 1G --name frontend nginx
963841b138d8
$ docker ps
CONTAINER ID   IMAGE          COMMAND  CREATED         STATUS         PORTS                   NODE     NAMES
963841b138d8   nginx:latest   "nginx"  < 1 second ago  running        192.168.0.42:49177->80/tcp  node-1   frontend
f8b693db9cd6   mysql:latest   "mysqld" Up About a minute  running        192.168.0.42:49178->3306/tcp  node-1   db
```

在Binpacking策略下，`nginx`容器也被部署到`node-1`，以保留`node-2`供后续容器使用。

### Compose

Compose用于管理Docker容器的应用部署，类似于Fig。它通过YAML文件定义应用配置，并通过一条命令启动多个相关容器。

示例配置文件`group.yml`：
```yaml
name: rails_example
containers:
  db:
    image: postgres:latest
  web:
    build: .
    command: bundle exec rackup -p 3000
    volumes:
      - .:/myapp
    ports:
      - "3000:3000"
    links:
      - db
```

在第15章中见过这种格式。`name`定义了容器组的名字为`rails_example`。该容器组包含两个容器：`db`和`web`。这是一个典型的Web应用程序，`web`容器根据当前目录下的`Dockerfile`构建，将当前目录映射为容器内的`/myapp`数据卷，将本地的3000端口和容器内的3000端口进行映射，并连接到`db`容器。

定义好配置及相关文件后，只需执行`docker-compose up`命令即可启动容器组。需要注意的是，目前Docker中并不包含Compose组件，需要读者自行下载并替换原有的Docker文件。

### 常见镜像

#### 系统镜像

系统镜像主要用于提供系统环境或基本工具集。以下是一些常用的系统镜像：

##### BusyBox

BusyBox是一个包含一百多个常用Linux命令和工具的工具集。可以通过Docker Hub搜索并拉取：
```sh
$ docker search busybox
NAME                DESCRIPTION                               STARS   OFFICIAL   AUTOMATED
busybox             Busybox base image.                       126     [OK]
progrium/busybox    33                                        [OK]
jeanblanchard/busybox-java  Minimal Docker image with Java       14      [OK]
jeanblanchard/busybox-tomcat  Minimal Docker image with Apache Tomcat  9       [OK]
radial/busyboxplus  Full-chain, Internet enabled, 4           [OK]
sequenceiq/busybox  1                                         [OK]

$ sudo docker pull busybox
$ docker run -it busybox
/ # grep
BusyBox v1.22.1 (2014-05-22 23:22:11 UTC) multi-call binary.
Usage: grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...
Search for PATTERN in FILEs (or stdin)
-H Add 'filename:' prefix
-h Do not add 'filename:' prefix
```

##### Ubuntu

Ubuntu是一个非常流行的Linux系统。可以通过Docker Hub搜索并拉取：
```sh
$ docker search ubuntu
NAME                DESCRIPTION                               STARS   OFFICIAL   AUTOMATED
ubuntu              Official Ubuntu base image                 1233    [OK]
dockerfile/ubuntu   Trusted automated Ubuntu                   41      [OK]
ansible/ubuntu14.04-ansible  Ubuntu 14.04 LTS with ansible       35      [OK]
dockerfile/ubuntu-desktop  Trusted automated Ubuntu Desktop (LXDE)  20      [OK]
ubuntu-upstart      Upstart                                    5       [OK]

$ docker run -ti ubuntu:14.04 /bin/bash
root@a74a37bd4bc0:/# ls
bin  dev  home  lib64  mnt  proc  run  srv  tmp  var
boot  etc  lib  media  opt  root  sbin  sys  usr
root@a74a37bd4bc0:/# lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.1 LTS
Release:        14.04
Codename:       trusty
root@a74a37bd4bc0:/#
```

##### CentOS

CentOS是基于Red Hat企业版源代码再编译的产物，常用于服务器，性能稳定可靠。可以通过Docker Hub搜索并拉取：
```sh
$ docker pull centos:6
$ docker pull centos:7
```

虽然CentOS 7已将systemd服务替换为fakesystemd以解决依赖管理问题，但有时仍需使用systemd组件。下面简要说明如何集成systemd服务，具体的Dockerfile如下：
```Dockerfile
FROM centos:7
MAINTAINER "you"
ENV container docker
RUN yum -y swap -- remove fakesystemd -- install systemd systemd-libs
RUN yum -y update; yum clean all; \
    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
```

希望这些信息对您有所帮助！