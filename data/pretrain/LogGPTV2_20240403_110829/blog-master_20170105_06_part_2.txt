  foreach v_func in array v_func_agg loop  
    -- 更新log_read_func where isinit=true  
    update log_read_func set   
      init_xid=v_log_read_func_xid,  
      init_xip=v_log_read_func_xip,  
      isinit=false   
      where tablename='log'   
      and func=v_func   
      and isinit;  
    -- 执行统计函数  
    execute 'select '||v_func||'($1)' using v_log;  
    execute 'select '||v_func||'($1)' using v_log_doxip;  
  end loop;  
return;  
end;  
$$ language plpgsql;  
```  
统计函数stat_log_c1  
```  
CREATE OR REPLACE FUNCTION public.stat_log_c1(v_log log[])  
 RETURNS void  
 LANGUAGE plpgsql  
AS $function$  
declare  
  v_stat_time text;  
  v_c1 int;  
  v_cnt int8;  
begin  
  -- 统计log_c1_cnt_day  
  for v_stat_time, v_c1, v_cnt in select to_char(crt_time, 'yyyymmdd'), c1 , count(*) from (select ((unnest(v_log)::log)).*) t group by to_char(crt_time, 'yyyymmdd'), c1 loop  
    perform 1 from log_c1_cnt_day where c1=v_c1 and stat_time=v_stat_time;  
    if not found then  
      insert into log_c1_cnt_day(c1, cnt, stat_time) values (v_c1, v_cnt, v_stat_time);  
    else  
      update log_c1_cnt_day set cnt=cnt+v_cnt where c1=v_c1 and stat_time=v_stat_time;  
    end if;  
  end loop;  
end;  
$function$;  
```  
测试, 清理原始数据  
```  
truncate log;  
truncate log_c1_cnt_day;  
truncate log_c1_cnt_week;  
update log_read set xid=0, xip=null, xip_res=null;  
update log_read_func set isinit=true;  
```  
pgbench脚本, 测试插入场景  
```  
cat ins.sql   
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
```  
pgbench  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -f ./ins.sql -r -n -h $PGDATA -U postgres -T 60 -c 8 -j 2  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 2  
duration: 60 s  
number of transactions actually processed: 2940924  
tps = 49015.188418 (including connections establishing)  
tps = 49026.219678 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.161868        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
```  
压力测试的同时执行analyze_log. 确保pgbench同时执行analyze_log.  
```  
pg92@digoal-PowerEdge-R610-> cat analyze.sh   
#!/bin/bash  
for ((i=0;i0 order by c1;  
 c1 |  cnt   | stat_time   
----+--------+-----------  
  0 | 147225 | 20130422  
  1 | 294651 | 20130422  
  2 | 294146 | 20130422  
  3 | 293377 | 20130422  
  4 | 295507 | 20130422  
  5 | 294433 | 20130422  
  6 | 293960 | 20130422  
  7 | 292733 | 20130422  
  8 | 294489 | 20130422  
  9 | 293249 | 20130422  
 10 | 147154 | 20130422  
(11 rows)  
Time: 0.660 ms  
```  
测试多SQL, 带回滚场景.  
pgbench脚本  
```  
cat ins.sql  
begin;  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
end;  
begin;  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
rollback;  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
```  
pgbench  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -f ./ins.sql -r -n -h $PGDATA -U postgres -T 60 -c 8 -j 2  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 2  
duration: 60 s  
number of transactions actually processed: 394520  
tps = 6573.363077 (including connections establishing)  
tps = 6574.835673 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.057675        begin;  
        0.152981        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.148598        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.076637        end;  
        0.054797        begin;  
        0.153712        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.148711        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.077051        rollback;  
        0.168767        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.167405        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
```  
压力测试的同时执行analyze_log. 确保pgbench同时执行analyze_log.  
```  
pg92@digoal-PowerEdge-R610-> cat analyze.sh   
#!/bin/bash  
for ((i=0;i0 order by c1;  
 c1 |  cnt   | stat_time   
----+--------+-----------  
  0 | 206061 | 20130422  
  1 | 412799 | 20130422  
  2 | 411847 | 20130422  
  3 | 409796 | 20130422  
  4 | 411644 | 20130422  
  5 | 412170 | 20130422  
  6 | 410857 | 20130422  
  7 | 411128 | 20130422  
  8 | 411509 | 20130422  
  9 | 411140 | 20130422  
 10 | 205053 | 20130422  
(11 rows)  
Time: 0.716 ms  
```  
新增测试项目, 增加统计维度.  
统计函数stat_log_c1_week  
```  
CREATE OR REPLACE FUNCTION public.stat_log_c1_week(v_log log[])  
 RETURNS void  
 LANGUAGE plpgsql  
AS $function$  
declare  
  v_stat_time text;  
  v_c1 int;  
  v_cnt int8;  
begin  
  -- 统计log_c1_cnt_week  
  for v_stat_time, v_c1, v_cnt in select to_char(date(crt_time)-(EXTRACT(ISODOW FROM date(crt_time)))::int+1,'yyyymmdd'), c1 , count(*) from (select ((unnest(v_log)::log)).*) t group by to_char(date(crt_time)-(EXTRACT(ISODOW FROM date(crt_time)))::int+1,'yyyymmdd'), c1 loop  
    perform 1 from log_c1_cnt_week where c1=v_c1 and stat_time=v_stat_time;  
    if not found then  
      insert into log_c1_cnt_week(c1, cnt, stat_time) values (v_c1, v_cnt, v_stat_time);  
    else  
      update log_c1_cnt_week set cnt=cnt+v_cnt where c1=v_c1 and stat_time=v_stat_time;  
    end if;  
  end loop;  
end;  
$function$;  
```  
注册统计维度函数, 注册时isinit=true. 第一次调用analyze_log后更新为false, 同时更新init_xid, init_xip等.  
```  
insert into log_read_func(tablename,func,init_xid,init_xip,isinit,info) values('log','stat_log_c1_week',null,null,true,null);  
```  
pgbench  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -f ./ins.sql -r -n -h $PGDATA -U postgres -T 60 -c 8 -j 2  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 2  
duration: 60 s  
number of transactions actually processed: 365012  
tps = 6083.034829 (including connections establishing)  
tps = 6084.366283 (excluding connections establishing)  
statement latencies in milliseconds:  