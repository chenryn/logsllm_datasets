C
S
C
S
–○
+○
–○
+○
+○
–○
–○
+○
high
medium
high
low
low
medium
medium
high
Table 5.3: Comparison of the four combinations
all documents of the system. Moreover, the policy decision point must access
all rules of the system which also can contain conﬁdential information, e.g.,
the existence of some top secret information might be revealed by inspecting
the rules. As a result, we regard all combinations where the policy decision
point is implemented on the client as having a higher risk of manipulations.
We choose Combination 4 as basis for our security architecture and for our
implementation, because its implementation of critical services on the server
makes is robust against manipulations. Moreover, the protocol for performing
an operation can be designed in a way that makes the protocol very eﬃcient.
In scenarios where the security requirements are low and servers with high
performance are not available Combination 1 is a good choice. Combination
1 is only acceptable if client machines with a very high protection level are
used. These clients must be setup in way where the risk of manipulations is
very low. Nevertheless, the risk of loosing the conﬁdentiality of all documents
as a result of a successful attack on a client is still present.
Figure 5.4: Distributed System architecture
The ﬁnal distributed system architecture is presented in Figure 5.4. In
UIASPDPUserDPPEPClientServerRule DBCopy DBDoc DBUser DBUIPDPUserDPPEPClientServerRule DBCopy DBDoc DBUser DB5.3. DISTRIBUTED SYSTEM ARCHITECTURE
85
this architecture, all components except of the user interface are implemented
on the server side. Since the server has to handle many performance intensive
tasks like rule evaluation, we have the risk that the system does not scale
well with the number of documents or the number of clients. Therefore, we
conclude this section with a discussion on the scalability of our distributed
system architecture.
5.3.3 The scalability of the distributed system archi-
tecture
As mentioned before, the components of the server are not required be im-
plemented on a single physical machine. Instead, every component can be
set up on a dedicated machine. Each component of the server can also be
set up by combining multiple machines to perform the service of one compo-
nent. In this case, each component exists redundantly several times, where
each instance is located on an individual machine. This technique is used to
increase both performance and availability. The workload for the component
in question must be distributed to the individual instances of the component.
This distribution process is referred to as load balancing.
Concerning the four databases of our system, there has been a lot of re-
search on increasing the performance of databases and making them more
scalable, e.g., [DR92, PSTT96, JPPMKA02, Tal03]. The techniques to achieve
these goals are query optimization, replication and eﬃcient mechanisms to
keep the replicas in a consistent state. Query optimization is about to ﬁnd a
semantically identical expression of a query which can be executed in the
shortest possible time compared to the original expression of the query.
Databases can be replicated across several physical machines to increase the
performance of read operations. On the downside, these so-called replicas
must be kept in a consistent state, when they are updated by a write oper-
ation. Replication increases also the availability of a system, since if one of
the replicas becomes unavailable, the other replicas can still be used. This
also reduces the problem of a single point of failure. Since, the replication
techniques for databases are a well known research topic and since the repli-
cation of the databases does not aﬀect our architecture design, we do not
focus on this topic and view each database as a single component. If replica-
tion is required, it can be applied any time without the need to change the
architecture.
The replication technique can also be applied to the remaining four com-
ponents of the server. Since these components only perform computations
and store their data in databases, replication can be done with less com-
86
CHAPTER 5. SYSTEM ARCHITECTURE
plexity, since no mechanisms are required to keep the replicas in a consistent
state. Nevertheless, we also do not replicate our components. If this should
be required, we are conﬁdent that these components can be replicated with-
out adding to much complexity to the architecture, since these components
are only performing computations and access the data in the databases.
Now, we have deﬁned a distributed system architecture. In the next chap-
ter, we will analyze this architecture and investigate which security mecha-
nisms are required to avoid potential threats.
Chapter 6
Security Architecture
In this chapter, we will design the security architecture for the system archi-
tecture that we have proposed in the previous chapter. For this purpose, in
Section 6.1, we analyze potential threats on our architecture. After this, we
present the security mechanisms that avoid or reduce the risks described in
the risk analysis in Section 6.2. Finally, we evaluate the security mechanisms
and discuss whether they achieve their goals in Section 6.3.
6.1 Risk Analysis
In this section, we evaluate possible attacks on the components of our archi-
tecture. Attacks in general can can aim at diﬀerent goals, e.g., at stealing
data or at performing sabotage. We present ﬁve of these goals, explain them
in general and give an example of what types of attacks are possible on our
architecture.
Conﬁdentiality: A system ensures the conﬁdentiality if only authorized
subjects are able to access protected data. Within our architecture, we
must ensure the conﬁdentiality of the documents and the conﬁdentiality
of the rules. Therefore, we must ensure that the documents and the
rules are not accessed by an unauthorized subject.
Integrity: Integrity deﬁnes that data is not manipulated by an unauthorized
subject without detecting the manipulation. If possible the manipula-
tion of data by unauthorized subject can be prevented at all. Within
our architecture, we must ensure that neither the documents nor the
rules are manipulated by an unauthorized subject.
Availability: The available of a system is given, if the system is able to
execute its intended function in a timely acceptable way. If an attacker
87
88
CHAPTER 6. SECURITY ARCHITECTURE
is able to manipulate a system to operate very slow or to be non-
functional then the availability of the system is compromised.
Authenticity: Authenticity deﬁnes that the identity of a subject or an ob-
ject is not forged.
Non-repudiation: Non-repudiation deﬁnes that a user must not be able do
deny having performed an action that he has performed.
In addition to that, an attack can have diﬀerent targets and can be per-
formed in diﬀerent modes. Theoretically, each of the components of our
system architecture (see Figure 5.4) can be the target of an attack, but since
only the document processor must be reachable for the clients, we assume
that for a successful attack this component this component must be attacked.
An attack can be either performed locally or remotely. In a local attack,
the attacker has physical access to the attacked machine and has a user ac-
count on the corresponding machine. For example this type of attacker can
access the local ﬁle system or reboot the machine with another operating
system. In contrast to this, in a remote attack, the attacker uses a communi-
cation network to attack his target. The only options for a remote attack are
to use the communication channels of our architecture. We further assume
that an attacker has no physical access to server components, which we think
is realistic, since servers can be protected by placing them in a secured server
room. As a result, local attacks can be performed only on the client machine.
Moreover, we assume that the administrator of the server is trustworthy.
Next, we will describe two diﬀerent types of attackers, namely the in-
side attacker and the outside attacker. Each type of attacker has certain
characteristics that we will describe in the following.
Inside Attacker: An insider attacker is a legitimate user of the system
who misuses his permissions to perform an attack. We assume that
an inside attacker also has physical access to the client machine, which
enables additional attacks. In addition to this, an inside attacker can
perform remote attacks on the document processor. For example, if our
system is used within a company then an inside attacker is typically
an employee of the company.
Outside Attacker: An outside attacker is a user who does not has legiti-
mate access to the system, which means that he has no credentials to
login into the server and also has no physical access to any machine.
The outside attacker can only perform remote attacks on the client and
the document processor. For example, if our system is used within a
6.1. RISK ANALYSIS
89
company then an outside attacker could be either a professional hacker
hired by a competitor, a spy performing industry espionage or a hacker
who tries to perform attacks just for his own entertainment.
An inside attacker can perform local attacks on his client machine on
which the user interface is executed. In addition to that, an inside attacker
can also perform remote attacks on the document processor and on a user
interface, which runs on another client machine. As a consequence, an inside
attacker can perform four types of attacks according to this classiﬁcation
scheme. An outside attacker can only perform remote attacks on the user
interface and on the document processor. All together, an inside attacker
can perform every attack an outside attacker can perform plus an additional
attack, which only he can do. Therefore, we believe it is suﬃcient to inspect
the attacks which can be performed by an inside attacker, since this type of
attacker has the most options for an attack. We will start with a discussion
of possible attacks on the client.
6.1.1 Attacks on the Client Machine
In this section, we describe possible attacks in the scenario mentioned above.
We focus on attacks that compromise the conﬁdentiality of the protected
data. Moreover, we organize the attacks in groups, where all attacks of the
group have a common method of attacking the client.
Software Manipulations.
In the following, we discuss software manipulations on the client, which can
be performed on diﬀerent components of the system.
Extract data from the user interface. An inside attacker can try to extract
conﬁdential information from the user interface. As a result, the user inter-
face must be designed in a way, that it is not possible to extract conﬁdential
data from it and transfer it to another application, e.g., an e-mail client.
Manipulate the user interface. If the user interface prevents the extraction
of conﬁdential data, the attacker can try to manipulate the corresponding
protection mechanisms. Alternatively, the attacker could use another user
interface that is compatible with the protocols used in our system architec-
ture, but allows data to be extracted. Therefore, we must have a mechanism
to ensure that the user interface is not modiﬁed and that it is the version
that has been deployed originally.
Use the operating system mechanisms to extract data. The attacker could
also use the underlying operating system on which the user interface runs to
90
CHAPTER 6. SECURITY ARCHITECTURE
extract data. One such method is to extract the conﬁdential data from the
memory by writing the memory used by the user interface to a ﬁle, which
is also referred to as a memory dump. An attack like this requires that
the application of the attacker runs in kernel mode, which enables access to
the entire physical memory of the machine. There are many other similar
methods, which all have in common that they use the services oﬀered by the
underlying operating system. Consequently, we must conﬁgure the underly-
ing operating system in a way that prevents the use of services like memory
dumps to extract the conﬁdential data from the user interface.
Manipulate operating system. If the underlying operating system is con-
ﬁgured in a way that prevents the extraction of conﬁdential data using its
services, the attacker could modify the operating system or its conﬁguration.
The attacker could try to re-enable the mechanisms that we have disabled
before. For example, he could exchange a system module, e.g., the module
that performs memory management or the module that displays data on the
screen. Another similar approach is to replace the entire operating system
with a system that allows the extraction of data. As a result, we need a
mechanism to ensure that the operating system is neither manipulated nor
entirely replaced. This mechanism must ensure that the operating system is
authentic, which means that it is the one that has been deployed and it is
conﬁgured as we have deﬁned.
Extract conﬁdential data from the swap ﬁle. Our system architecture
does not store documents permanently on the client. Instead, our system
architecture keeps them in the memory to display and edit them, which avoids
attacks based on accessing the hard drive of a client machine. Nevertheless,
we must also ensure that the operating system does not swap the memory
used by the user interface to the hard disk, if available memory is getting
low. This again must be done by conﬁguring the operating system. As a
consequence, there is no risk of losing conﬁdential data by stealing a hard
drive of an authorized client.
Masquerading Attacks.
In the following, we discuss diﬀerent types of masquerading attacks on our
system architecture. We describe the cloning of a client machine and the
spooﬁng of the server of our system architecture.
Clone a client machine. Another type of attack is to clone an authorized
client machine by creating an exact copy of the conﬁguration of an existing
machine, e.g., by creating an exact copy of the hard disk of the authentic
client or by copying the authentication credentials to another client. For
example, a legitimate user could set up such a cloned client machine in an
6.1. RISK ANALYSIS
91
area which is not under surveillance to extract data by taking pictures of
the displayed data. To reduce the risk of this type of attack, we need a
mechanisms that prevents the cloning of a client machine. This mechanism
must ensure that the identity of the client machine is bound to the hardware
of the machine.
Masquerade the server. The attacker can also masquerade the server, e.g.,
by redirecting the network traﬃc using a DNS poisoning attack. Therefore,
we need mutual authentication between client and server. In our scenario, the
masquerading of a server is less dangerous, since no conﬁdential documents
are uploaded to the server. However, this can be the case in the scenario of
corporate computing on home computers.
Hardware Attacks and Analogue Attacks
In the following, we discuss attacks on the hardware and analogue attacks.
We consider Direct Memory Access (DMA) attacks as hardware attacks and
discuss them in this section, too.
Use DMA to extract data. Another type of attack is to use a device with
DMA to extract conﬁdential data. DMA bypasses any protection managed
by the CPU and allows to access the entire memory.
Extract data using probing attacks. Moreover, the attacker can perform
probing attacks, such as mechanical or electrical probing attacks, on the
hardware components of our system architecture. Using this attack, he can
extract conﬁdential data directly from the hardware, e.g., from the TPM or
from a memory module.
Use analogue channels to extract data. Besides the attacks mentioned
above, the attacker can take an analogous screen shot of the display using a
camera.
All attacks discussed so far are summarized in Table 6.1 together with
the mechanisms that are required to prevent the corresponding attack.
Required mechanism
Authentication mechanism for UI
Mutual authentication
Attack
Manipulate UI
Spoof the server
Use OS to extract data from UI Conﬁgure OS to prevent this
Manipulate OS
DMA attack
Extract data from swap space
Clone a client
Authentication mechanism for OS
Countermeasures against DMA
Conﬁgure OS not to swap UI
Prevent cloning of clients
Table 6.1: Attacks on the client and required mechanisms
92
CHAPTER 6. SECURITY ARCHITECTURE
6.1.2 Attacks on the Server
Since only the document processor must be reachable for clients, we assume
that only this component of the server side can be attacked. Moreover,
we assume that the server components run on dedicated machines and no
user is working locally at such a machine. Thus, the server can be attacked
only remotely using the communication network. We further assume, that