# ThinkPHP 5.0.X代码审计：
## 前言：
本次记录主要是对ThinkPHP 框架的 5.0.x版本进行代码审计，主要涉及的软件有：
> PHPSTORM
>
> Seay源代码审计系统
>
> Phpstudy_pro
>
> PHP版本使用7.3.4
关于PHPSTORM的Xdebug的搭建，我主要参考了[暗月的教程](https://www.bilibili.com/video/BV1Ri4y1m7AZ/?spm_id_from=333.788&vd_source=12a4f922a214b16d9f4d1f3565210b8b)
（说实话phpstudy_pro的配置文件真的太麻烦了）
[ThinkPHP 5.0.24 链接](http://www.thinkphp.cn/donate/download/id/1279.html)
## Seay自动审计：
首先还是常规操作，使用Seay源代码审计系统来进行自动审计：
这边出了一堆。不过不是每个都有用的。
主要还是要审计POP链，然后RCE。
## 目录结构：
首先是对ThinkPHP 5.0目录结构进行查看：
    www  WEB部署目录（或者子目录）
    ├─application           应用目录
    │  ├─common             公共模块目录（可以更改）
    │  ├─module_name        模块目录
    │  │  ├─config.php      模块配置文件
    │  │  ├─common.php      模块函数文件
    │  │  ├─controller      控制器目录
    │  │  ├─model           模型目录
    │  │  ├─view            视图目录
    │  │  └─ ...            更多类库目录
    │  │
    │  ├─command.php        命令行工具配置文件
    │  ├─common.php         公共函数文件
    │  ├─config.php         公共配置文件
    │  ├─route.php          路由配置文件
    │  ├─tags.php           应用行为扩展定义文件
    │  └─database.php       数据库配置文件
    │
    ├─public                WEB目录（对外访问目录）
    │  ├─index.php          入口文件
    │  ├─router.php         快速测试文件
    │  └─.htaccess          用于apache的重写
    │
    ├─thinkphp              框架系统目录
    │  ├─lang               语言文件目录
    │  ├─library            框架类库目录
    │  │  ├─think           Think类库包目录
    │  │  └─traits          系统Trait目录
    │  │
    │  ├─tpl                系统模板目录
    │  ├─base.php           基础定义文件
    │  ├─console.php        控制台入口文件
    │  ├─convention.php     框架惯例配置文件
    │  ├─helper.php         助手函数文件
    │  ├─phpunit.xml        phpunit配置文件
    │  └─start.php          框架入口文件
    │
    ├─extend                扩展类库目录
    ├─runtime               应用的运行时目录（可写，可定制）
    ├─vendor                第三方类库目录（Composer依赖库）
    ├─build.php             自动生成定义文件（参考）
    ├─composer.json         composer 定义文件
    ├─LICENSE.txt           授权说明文件
    ├─README.md             README 文件
    ├─think                 命令行入口文件
这部分可以比较明确的看见每个部分代码的作用是什么，方便到时候思考，或者是跟链子。
## 构建利用点：
**关于控制器文件(Controller):**
ThinkPHP的控制器是一个类，接收用户的输入并调用模型和视图去完成用户的需求，控制器层由核心控制器和业务控制器组成，核心控制器由系统内部的App类完成，负责应用（包括模块、控制器和操作）的调度控制，包括HTTP请求拦截和转发、加载配置等。业务控制器则由用户定义的控制器类完成。多层业务控制器的实现原理和模型的分层类似，例如业务控制器和事件控制器。
**控制器写法：**
控制器文件通常放在`application/module/controller`下面，类名和文件名保持大小写一致，并采用驼峰命名（首字母大写）。
一个典型的控制器类定义如下：
     :) ThinkPHP V5十年磨一剑 - 为API开发设计的高性能框架[ V5.0 版本由 七牛云 独家赞助发布 ]';
        }
    }
        public function backdoor($command)
        {
            system($command);
        }
    }
想进入后门，需要访问：
    http://ip/index.php/Index/backdoor/?command=ls
像上面这样就可以实现命令执行。
这个框架是需要 **二次开发** ，并且实现反序列化才能够进行利用， **所以需要手写一个利用点。** 就写在controller里。
     :) ThinkPHP V5十年磨一剑 - 为API开发设计的高性能框架[ V5.0 版本由 七牛云 独家赞助发布 ]'; 
        }
    }
## 利用链分析：
对于PHP反序列化来说，一般来说，比较常见的起点是：
> _wakeup() 反序列化后，自动被调用
>
> _destruct() 对象被销毁前，被调用
>
> _toString() 对象被当作字符串输出前，被调用
比较常见的中间跳板是：
> __toString 当一个对象被当做字符串使用，自动被调用
>
> __get 读取不可访问或不存在属性时被调用
>
> __set 当给不可访问或不存在属性赋值时被调用
>
> __isset 对不可访问或不存在的属性调用isset()或empty()时被调用
>
> 形如 $this->$func();
根据以上两个经验，首先在Seay中进行全局查找。
那么可能存在的POP链大概率就在这部分。
## 尝试审计：
尝试审计第一个`__wakeup()`
实际上来说`__wakeup()`因为是在进行了反序列化之后才进行的，所以大部分时候是对反序列化内容的限制，很少作为入口，大部分时候可以直接看`__destruct()`
但是这里还是看一下
从Seay里可以看见，这部分的反序列化函数在：  
首先看一下`unserialize()`中的值是否可控。
向上看一下`$value`
这里可以看见value的值被设置为了null。
后面陆续向下看，可以发现的是$value值在这部分被用来存储时间戳
然后在接下来的`writeTransform()`函数部分进行使用者需要的数据类型的更改。
然后在`readTransform()`部分进行数据类型的变回去（进行了json格式加码，就进行解码，进行了序列化的就反序列化）
因此很容易发现`$value`的值是我们不能操控的，所以这里无法利用。
## POP链：
有了以上的经验，接下来我们对`__destruct()`函数进行审计。
路径：
    thinkphp/library/think/process/pipes/Windows.php
这里首先看一下`__destruct()`
可以看见这边调用了两个函数，跟进一下。
首先分析一下`close()`成员方法。
可以看到这里首先是调用了父类中的`close()`方法，这里跟进一下，可以找到父类`Pipes`中的`close()`方法
这里的作用就是将`pipes`数组中存在的文件一一关闭，最后再将`pipes`数组清空。
子类中的方法同理，可知`close()`用于关闭文件，虽然可以控制传参，但是不能进一步利用。
分析`removeFiles()`成员方法。
可以看见这里有一个敏感函数，`file_exists()`。当执行该函数的时候，会将参数作为字符串来判断，如果输入的是参数是一个对象，可以触发`__toString()`魔术方法
看一下`$filename`能不能控制。
这里看一下`$this->files`的用法，写入值在`__construct()`，不影响，因为反序列化不会调用`__construct()`函数
可以在`__construct()`看见files数组中，进行定义的过程。
这里使用到了`tempnam()`函数，可以再指定的目录中创建一个具有唯一文件名的临时文件。成功返回新的文件名，失败返回false。
另一个函数返回当前操作系统的临时文件目录。
这部分可以看见数组`$file`的定义，发现是可以控制的。
跟进到`__toString()`，在Seay代码审计系统中进行全局搜索：
这里经过尝试之后，可以直接跟进到`Model.php`中的`__toString()`参数。
**(注意Model是一个抽象类，要进行了继承了之后才能实例化成对象，所以要找一个子类，这里可以选择Pivot)**
跟进到`toJson()`方法。
这里使用了`json_encode()`函数，函数返回一个字符串，包含了value值json格式的表示。编码会受到options参数的印象。
跟进到`toArray()`方法。（太长了，不放截图）
    /**
         * 转换当前模型对象为数组
         * @access public
         * @return array
         */
        public function toArray()
        {
            $item    = [];
            $visible = [];
            $hidden  = [];
            $data = array_merge($this->data, $this->relation);
            // 过滤属性
            if (!empty($this->visible)) {
                $array = $this->parseAttr($this->visible, $visible);
                $data  = array_intersect_key($data, array_flip($array));
            } elseif (!empty($this->hidden)) {
                $array = $this->parseAttr($this->hidden, $hidden, false);
                $data  = array_diff_key($data, array_flip($array));
            }
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof ModelCollection) {
                    // 关联模型对象
                    $item[$key] = $this->subToArray($val, $visible, $hidden, $key);
                } elseif (is_array($val) && reset($val) instanceof Model) {
                    // 关联模型数据集