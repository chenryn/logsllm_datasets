               │          │ /         ┌───────────────┐│
                          └──────────>│ IndexServlet  │
               │                      └───────────────┘│
                              Web Server
               └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
```
这种根据路径转发的功能我们一般称为 Dispatch。映射到 / 的 IndexServlet 比较特殊，它实际上会接收所有未匹配的路径，相当于 /*，因为 Dispatcher 的逻辑可以用伪代码实现如下：
```java
String path = ...
if (path.equals("/hello")) {
    dispatchTo(helloServlet);
} else if (path.equals("/signin")) {
    dispatchTo(signinServlet);
} else {
    // 所有未匹配的路径均转发到"/"
    dispatchTo(indexServlet);
}
```
所以我们在浏览器输入一个 http://localhost:8080/abc 也会看到 IndexServlet 生成的页面。
---
## Request和Response
在 b/s 架构里面，请求和响应是必不可少的。访问网页时，会发出一个 request 请求，服务器接收到请求后，根据设定代码，给我们响应对应的内容。
request对象是来获取请求消息，response对象是来设置响应消息
### HttpServletRequest
`HttpServletRequest` 封装了一个 HTTP 请求，它实际上是从 ServletRequest 继承而来。最早设计 Servlet 时，设计者希望 Servlet 不仅能处理 HTTP，也能处理类似 SMTP 等其他协议，因此，单独抽出了 ServletRequest 接口，但实际上除了 HTTP 外，并没有其他协议会用 Servlet 处理，所以这是一个过度设计。
我们通过 `HttpServletRequest` 提供的接口方法可以拿到 HTTP 请求的几乎全部信息，常用的方法有：
* getMethod()：返回请求方法，例如，`"GET"`，`"POST"`；
* getRequestURI()：返回请求路径，但不包括请求参数，例如，`"/hello"`；
* getQueryString()：返回请求参数，例如，`"name=Bob&a=1&b=2"`；
* getParameter(name)：返回请求参数，GET 请求从 URL 读取参数，POST 请求从 Body 中读取参数；
* getContentType()：获取请求 Body 的类型，例如，`"application/x-www-form-urlencoded"`；
* getContextPath()：获取当前 Webapp 挂载的路径，对于 ROOT 来说，总是返回空字符串 `""`；
* getCookies()：返回请求携带的所有 Cookie；
* getHeader(name)：获取指定的 Header，对 Header 名称不区分大小写；
* getHeaderNames()：返回所有 Header 名称；
* getInputStream()：如果该请求带有 HTTP Body，该方法将打开一个输入流用于读取 Body；
* getReader()：和 getInputStream() 类似，但打开的是 Reader；
* getRemoteAddr()：返回客户端的 IP 地址；
* getScheme()：返回协议类型，例如，`"http"`，`"https"`；
此外，HttpServletRequest 还有两个方法：`setAttribute()` 和 `getAttribute()`，可以给当前 HttpServletRequest 对象附加多个 Key-Value，相当于把 HttpServletRequest 当作一个 `Map` 使用。
调用 HttpServletRequest 的方法时，注意务必阅读接口方法的文档说明，因为有的方法会返回 null，例如 `getQueryString()` 的文档就写了：
```
... This method returns null if the URL does not have a query string...
```
---
### HttpServletResponse
HttpServletResponse 封装了一个 HTTP 响应。由于 HTTP 响应必须先发送 Header，再发送 Body，所以，操作 HttpServletResponse 对象时，必须先调用设置 Header 的方法，最后调用发送 Body 的方法。
常用的设置 Header 的方法有：
* setStatus(sc)：设置响应代码，默认是 `200`；
* setContentType(type)：设置 Body 的类型，例如，`"text/html"`；
* setCharacterEncoding(charset)：设置字符编码，例如，`"UTF-8"`；
* setHeader(name, value)：设置一个 Header 的值；
* addCookie(cookie)：给响应添加一个 Cookie；
* addHeader(name, value)：给响应添加一个 Header，因为 HTTP 协议允许有多个相同的 Header；
写入响应时，需要通过 `getOutputStream()` 获取写入流，或者通过 `getWriter()` 获取字符流，二者只能获取其中一个。
写入响应前，无需设置 `setContentLength()`，因为底层服务器会根据写入的字节数自动设置，如果写入的数据量很小，实际上会先写入缓冲区，如果写入的数据量很大，服务器会自动采用 Chunked 编码让浏览器能识别数据结束符而不需要设置 Content-Length 头。
但是，写入完毕后调用 `flush()` 却是必须的，因为大部分 Web 服务器都基于 HTTP/1.1 协议，会复用 TCP 连接。如果没有调用 `flush()`，将导致缓冲区的内容无法及时发送到客户端。此外，写入完毕后千万不要调用 `close()`，原因同样是因为会复用 TCP 连接，如果关闭写入流，将关闭 TCP 连接，使得 Web 服务器无法复用此 TCP 连接。
> 写入完毕后对输出流调用 `flush()` 而不是 `close()` 方法！
有了 `HttpServletRequest` 和 `HttpServletResponse` 这两个高级接口，我们就不需要直接处理 HTTP 协议。注意到具体的实现类是由各服务器提供的，而我们编写的 Web 应用程序只关心接口方法，并不需要关心具体实现的子类。
---
### ServletContext
ServletContext: 代表整个web应用，可以和程序的容器(服务器)来通信
常用方法：
```java
request.getServletContext();   : 通过request对象获取
this.getServletContext();     : 通过HttpServlet获取
String getMimeType(String file)  : 获取MIME对象
域对象：共享数据
1. setAttribute(String name,Object value)
2. getAttribute(String name)
3. removeAttribute(String name)
获取文件的真实(服务器)路径：
String getRealPath(String path)
```
文件下载案例
```html
    downlaod
图片查看
图片下载
```
downloadSerlet类
```java
@WebServlet("/downloadServlet")
public class downloadServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doGet(request,response);
    }
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String filename = request.getParameter("filename");  //接收filename传参的值
        ServletContext servletContext = this.getServletContext();   //创建servletContext 对象
        String Path = servletContext.getRealPath("/img/" + filename);  //获取文件真实路径
        String mimeType = servletContext.getMimeType(filename);//获取mimel类型
        FileInputStream fis = new FileInputStream(Path);   //路径参数文件输入流对象中
        response.setHeader("content-type",mimeType);  //响应头设置mime类型
        response.setHeader("content-disposition","attachment;filename="+filename); //设置为附件类型
            ServletOutputStream outputStream = response.getOutputStream();   //获取文件输出流
            byte[] buff = new byte[1024];   //设置每次读取的字节大小
            int len =0;
            while ((len = fis.read(buff))!=-1){
                outputStream.write(buff,0,len);
            }
    }
}
```
---
## Servlet 多线程模型
一个 Servlet 类在服务器中只有一个实例，但对于每个 HTTP 请求，Web 服务器会使用多线程执行请求。因此，一个 Servlet 的 `doGet()`、`doPost()` 等处理请求的方法是多线程并发执行的。如果 Servlet 中定义了字段，要注意多线程并发访问的问题：
```java
public class HelloServlet extends HttpServlet {
    private Map map = new ConcurrentHashMap<>();
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 注意读写map字段是多线程并发的:
        this.map.put(key, value);
    }
}
```
对于每个请求，Web 服务器会创建唯一的 `HttpServletRequest` 和 `HttpServletResponse` `实例，因此，HttpServletRequest` 和 `HttpServletResponse` 实例只有在当前处理线程中有效，它们总是局部变量，不存在多线程共享的问题。
一个 Webapp 中的多个 Servlet 依靠路径映射来处理不同的请求；
映射为 `/` 的 Servlet 可处理所有 “未匹配” 的请求；
如何处理请求取决于 Servlet 覆写的对应方法；
Web 服务器通过多线程处理 HTTP 请求，一个 Servlet 的处理方法可以由多线程并发执行。
---
## 重定向与转发
### Redirect
重定向是指当浏览器请求一个 URL 时，服务器返回一个重定向指令，告诉浏览器地址已经变了，麻烦使用新的 URL 再重新发送新请求。
例如，我们已经编写了一个能处理 `/hello` 的 `HelloServlet`，如果收到的路径为 `/hi`，希望能重定向到 `/hello`，可以再编写一个 `RedirectServlet`：
```java
@WebServlet(urlPatterns = "/hi")
public class RedirectServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        // 构造重定向的路径:
        String name = req.getParameter("name");
        String redirectToUrl = "/hello" + (name == null ? "" : "?name=" + name);
        // 发送重定向响应:
        resp.sendRedirect(redirectToUrl);
    }
}
```
如果浏览器发送 `GET /hi` 请求，`RedirectServlet` 将处理此请求。由于 `RedirectServlet` 在内部又发送了重定向响应，因此，浏览器会收到如下响应：
```
HTTP/1.1 302 Found
Location: /hello
```
当浏览器收到 302 响应后，它会立刻根据 `Location` 的指示发送一个新的 `GET /hello` 请求，这个过程就是重定向：
```
┌───────┐   GET /hi     ┌───────────────┐
│Browser│ ────────────> │RedirectServlet│
│       │  │ HelloServlet  │
│       │   └───────────────┘
```
观察Chrome浏览器的网络请求，可以看到两次HTTP请求：
并且浏览器的地址栏路径自动更新为 /hello。
重定向有两种：一种是302响应，称为临时重定向，一种是301响应，称为永久重定向。两者的区别是，如果服务器发送301永久重定向响应，浏览器会缓存 /hi 到 /hello 这个重定向的关联，下次请求 /hi 的时候，浏览器就直接发送 /hello 请求了。
重定向有什么作用？重定向的目的是当 Web 应用升级后，如果请求路径发生了变化，可以将原来的路径重定向到新路径，从而避免浏览器请求原路径找不到资源。
HttpServletResponse 提供了快捷的 `redirect()` 方法实现 302 重定向。如果要实现 301 永久重定向，可以这么写：
```java
resp.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); // 301
resp.setHeader("Location", "/hello");
```
### Forward
Forward 是指内部转发。当一个 Servlet 处理请求的时候，它可以决定自己不继续处理，而是转发给另一个 Servlet 处理。
例如，我们已经编写了一个能处理 /hello 的 HelloServlet，继续编写一个能处理 /morning 的 ForwardServlet：
```java
@WebServlet(urlPatterns = "/morning")
public class ForwardServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.getRequestDispatcher("/hello").forward(req, resp);
    }
}
```
ForwardServlet 在收到请求后，它并不自己发送响应，而是把请求和响应都转发给路径为 /hello 的 Servlet，即下面的代码：
```java
req.getRequestDispatcher("/hello").forward(req, resp);
```
后续请求的处理实际上是由 HelloServlet 完成的。这种处理方式称为转发（Forward），我们用流程图画出来如下：
```
                          ┌────────────────────────┐
                          │      ┌───────────────┐ │
                          │ ────>│ForwardServlet │ │
┌───────┐  GET /morning   │      └───────────────┘ │
│Browser│ ──────────────> │              │         │
│       │    │      ┌───────────────┐ │
                          │  users = Map.of("bob", "bob123", "alice", "alice123", "tom", "tomcat");
    // GET请求时显示登录页:
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html");
        PrintWriter pw = resp.getWriter();
        pw.write("Sign In");
        pw.write("");
        pw.write("Username: ");
        pw.write("Password: ");
        pw.write("Sign In Cancel");