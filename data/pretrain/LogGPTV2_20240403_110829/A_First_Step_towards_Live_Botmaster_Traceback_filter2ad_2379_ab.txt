Therefore,
(e(lr, le, L, w) − lr) mod 2L
(2)
64
D. Ramsbrock, X. Wang, and X. Jiang
= {(le − lr) + [(0.5 + w)L − (le − lr)] mod 2L} mod 2L
= {(0.5 + w)L} mod 2L
= (w + 0.5)L
This indicates that the packet length diﬀerence Z = le− lr, after le is adjusted
by the watermark bit encoding function e(lr, le, L, w), falls within the middle of
either an even or odd numbered bucket depending on whether the watermark
bit w is even or odd.
Watermark Bit Decoding. Assuming the decoder knows the watermarking
parameters: PRNG, s, n, l, W and L, the watermark decoder can obtain the
exact pseudo-random mapping (cid:3)ri, ei, k(cid:4) as that used by the watermark encoder.
We use the following watermark bit decoding function to decode watermark bit
wk from the packet lengths of packets Pri and Pei
d(lr, le, L) = (cid:5) le − lr
L
(cid:6) mod 2
(3)
The equation below proves that any watermark bit w encoded by the encod-
ing function deﬁned in equation (1) will be correctly decoded by the decoding
function deﬁned in equation (3).
d(lr, e(lr, le, L, w), L)
L
(cid:6) mod 2
= (cid:5) e(lr, le, L, w) − lr
= (cid:5) (le − lr) mod 2L + [(0.5 + w)L − (le − lr)] mod 2L
= (cid:5) (0.5 + w)L
= w
(cid:6) mod 2
L
L
(4)
(cid:6) mod 2
Assume the lengths of packets Pr and Pe (lr and le) have been increased
for xr ≥ 0 and xe ≥ 0 bytes respectively when they are transmitted over the
network (e.g., due to padding of encryption), then xe − xr is the distortion over
the packet length diﬀerence le − lr. Then the decoding with such distortion is
(5)
d(lr + xr, e(lr, le, L, w) + xe, L)
= (cid:5) e(lr, le, L, w) − lr + (xe − xr)
= w + (cid:5)0.5 + xe − xr
(cid:6) mod 2
L
L
(cid:6) mod 2
Therefore, the decoding with distortion will be correct if and only if
(−0.5 + 2i)L ≤ xe − xr  0 is small, then the
potential packets used for decoding to [tei
chances that some chaﬀ packet happens to fall within the range [tei
2 , tei + δ
2]
is small. This means we can decode the watermark correctly even if there are
substantial encrypted chaﬀ packets.
Watermark Encoding. The watermark bit encoding process is exactly the
same as that of the basic length-based watermarking scheme. The diﬀerence is
that now we send out each watermarked packet Pei at a precise time. Speciﬁcally,
we use the watermark bit encoding function deﬁned in equation (1) to adjust the
length of the watermark encoding packet Pei. We use a pseudo-random number
generator PRNG and seed st to generate the random time tei at which Pei will
be sent out.
An implicit requirement for the hybrid length-timing watermarking scheme
is that we need to know when each watermark encoding packet Pei will be
available. In our watermark tracing model, the tracer owns a rogue bot who can
determine what to send out and when to send it. Since we have full control over
the outgoing traﬃc, we can use the hybrid length-timing scheme to watermark
the traﬃc in real-time.
Watermark Decoding. When we decode the encrypted botnet traﬃc, we do
not know which packet is a watermark encoding packet Pei. However, given the
PRNG and st we do know the approximate time tei at which the watermark
encoding packet Pei should arrive. We then use all packets in the time interval
2] to decode. Speciﬁcally, we use the sum of the lengths of all
[tei
the packets in the time interval [tei
2] as the length of the watermark
encoding packet and apply that to the watermark bit decoding function (3).
2 , tei + δ
2 , tei + δ
− δ
− δ
Due to network delay jitter and/or active timing perturbation by the adver-
sary, the exact arrival time of watermark encoding packet Pei may be diﬀer-
ent from tei. Fortunately, the decoding can self-synchronize with the encoding
by leveraging an intrinsic property of our hybrid length-timing watermarking
scheme. Speciﬁcally, if the decoding of a watermarked ﬂow uses the wrong oﬀset
(cid:3) will almost
or wrong seeds (s and st), then the decoded l-bit watermark W
2 bits matched with the true watermark W . This gives us an
always have about l
easy way to determine if we are using the correct oﬀset, and we can try a range
of possible oﬀsets and pick the best decoding result.
4 Implementation and Experiment
To validate the practicality of our watermarking scheme, we implemented both
the length-only algorithm (unencrypted traﬃc) and the length-timing hybrid
algorithm (encrypted traﬃc). To let our watermarking proxy interact with a
realistic but benign IRC bot, we obtained a sanitized version of Agobot from
its source code, containing only benign IRC communication features. We ran
the sanitized Agobot on a local machine to generate benign IRC traﬃc to test
the eﬀectiveness of our watermarking scheme across public IRC servers and
PlanetLab nodes. At no time did we send malicious traﬃc to anyone in the
course of our experiments.
68
D. Ramsbrock, X. Wang, and X. Jiang
4.1 Length-Only Algorithm (Unencrypted Traﬃc)
We implemented the length-only algorithm in a modiﬁed open-source IRC proxy
server and ran a series of experiments using the sanitized Agobot and public
Internet IRC servers. We were able to recover the watermark successfully from
unencrypted traﬃc in all ten of our trials.