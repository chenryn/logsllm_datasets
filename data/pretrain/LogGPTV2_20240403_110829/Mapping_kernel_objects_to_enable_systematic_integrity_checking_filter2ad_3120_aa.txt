# Title: Mapping Kernel Objects to Enable Systematic Integrity Checking

## Authors:
- Martim Carbone, Georgia Institute of Technology, Atlanta, GA, USA
- Weidong Cui, Microsoft Research, Redmond, WA, USA
- Long Lu, Georgia Institute of Technology, Atlanta, GA, USA
- Wenke Lee, Georgia Institute of Technology, Atlanta, GA, USA
- Marcus Peinado, Microsoft Research, Redmond, WA, USA
- Xuxian Jiang, North Carolina State University, Raleigh, NC, USA

## Abstract
Dynamic kernel data have become a prime target for kernel-mode malware. However, existing solutions for checking kernel integrity are limited to code and static data or can only inspect a fraction of dynamic data, resulting in inadequate protection. Our study shows that previous solutions may cover only 28% of the dynamic kernel data, often failing to identify function pointers manipulated by many kernel-mode malware.

To address this, we present KOP (Kernel Object Pinpointer), a system that maps dynamic kernel data with nearly complete coverage and near-perfect accuracy. Unlike previous approaches, KOP:
1. Applies interprocedural points-to analysis to compute all possible types for generic pointers (e.g., `void*`).
2. Uses a pattern matching algorithm to resolve type ambiguities (e.g., unions).
3. Recognizes dynamic arrays by leveraging knowledge of kernel memory pool boundaries.

We implemented a prototype of KOP and evaluated it on a Windows Vista SP1 system loaded with 63 kernel drivers. KOP accurately mapped 99% of all dynamic kernel data. To demonstrate KOP's capabilities, we developed two tools: SFPD (Subverted Function Pointer Detector) and GHOST (General Hidden Object Scanning Tool). These tools correctly identified all malicious function pointers and hidden objects from nine real-world kernel-mode malware samples, with no false alarms.

## Keywords
Kernel Integrity, Malware, Introspection, Pointer Analysis, Memory Analysis

## 1. Introduction
Modern operating systems are vulnerable to various attacks, particularly kernel-mode malware, which can compromise the security of the entire software stack by tampering with kernel code and data. Ensuring the integrity of the complete kernel code and data is essential to mitigate this threat.

While it is relatively straightforward to check the integrity of kernel code and static data due to their read-only nature and well-defined locations, verifying the integrity of dynamic data is much more challenging due to their unpredictable memory locations and volatile nature. Dynamic data have thus become a prime target for kernel-mode malware.

Previous solutions for kernel integrity either focus on code and static data or can only inspect a fraction of dynamic data, leading to limited protection. Our study shows that these solutions may miss up to 72% of dynamic kernel data, making it easy for attackers to implement new malware that manipulates function pointers in unreachable objects. A comprehensive and accurate understanding of all kernel memory is crucial for effective integrity checks.

### Locating Dynamic Kernel Objects
The first and most challenging step in enabling systematic integrity checks is locating dynamic kernel objects in memory and identifying their types. This process, known as mapping, involves finding references to dynamic objects, typically in the form of pointers, and recursively traversing memory starting from globally defined objects.

Previous systems [3, 22] suffer from three major limitations:
1. They cannot follow generic pointers (e.g., `void*`) because they rely solely on type definitions.
2. They cannot handle pointers within unions, as they cannot determine the correct union subtype.
3. They cannot recognize dynamic arrays, thus missing objects within them.

These limitations result in incomplete memory traversal. Additionally, these systems require significant manual annotations, which is error-prone and time-consuming.

### KOP: Kernel Object Pinpointer
In this paper, we present KOP, a system that automatically maps all kernel objects to enable systematic kernel integrity checking. KOP addresses the challenges in pointer-based memory traversal through the following steps:
1. **Static Analysis:** Constructs an extended type graph from the kernel's source code, including type definitions, global variables, and candidate target types for generic pointers.
2. **Memory Analysis:** Given a memory snapshot, KOP resolves type ambiguities caused by unions and generic pointers, identifies dynamic arrays, and outputs an object graph containing all identified kernel objects and their pointers.

KOP's high coverage and accuracy enable various systematic kernel integrity checks. We developed two tools based on KOP:
- **SFPD (Subverted Function Pointer Detector):** Identifies function pointers manipulated by kernel-mode malware, including implicit function pointers.
- **GHOST (General Hidden Object Scanning Tool):** Unveils hidden kernel objects by comparing system attributes derived from KOP-identified objects with information collected internally.

### Evaluation
We implemented a prototype of KOP using the Phoenix compiler framework and evaluated it on a Windows Vista SP1 system with 63 drivers. KOP's traversal reached 99% of all dynamic kernel data, with 99% type accuracy. We also tested SFPD and GHOST with real-world malware, demonstrating their effectiveness in identifying malicious function pointers and hidden objects. Previous approaches, in contrast, covered only up to 28% of dynamic kernel data and missed malicious function pointers in six out of eight rootkits tested.

### Contributions
- Designed a points-to analysis algorithm for interprocedural, field-sensitive, and context-sensitive analysis of large C/C++ programs.
- Developed an algorithm to infer candidate types for generic pointers.
- Created techniques to resolve type ambiguities in memory traversal.
- Devised an approach to recognize dynamic arrays and their sizes in memory snapshots.
- Built the first tool to identify implicit function pointers manipulated by kernel-mode malware.
- Implemented a prototype system of KOP with nearly complete coverage and near-perfect accuracy.

## 2. Overview
KOP aims to map all kernel objects in a memory snapshot to enable systematic kernel integrity checking. It consists of two main components:
- **Static Analysis Component:** Constructs an extended type graph from the kernel's source code.
- **Memory Analysis Component:** Analyzes a memory snapshot based on the extended type graph, resolving type ambiguities and identifying dynamic arrays.

### Example
Consider the following example structure:

```c
SLIST_ENTRY WrapDataListHead;

typedef struct _WRAP_DATA {
    SLIST_ENTRY List;
    int32 Type;
    void* Data;
} WRAP_DATA;

typedef struct _BIN_DATA {
    int32 BinLength;
    char* BinData;
} BIN_DATA;

// Function to insert data into the list
void _InsertWrapList(int32 _type, void* _data) {
    WRAP_DATA* _WrapData = _AllocateWrapData();
    _WrapData->Type = _type;
    _WrapData->Data = _data;
    _InsertSList(&_WrapDataListHead, &_WrapData->List);
}
```

In this example, KOP would analyze the `WRAP_DATA` and `BIN_DATA` structures, resolve the type of the `void* Data` pointer, and ensure that all instances of these structures are correctly identified and mapped in the memory snapshot.

By providing a comprehensive and accurate mapping of kernel objects, KOP enables robust and systematic kernel integrity checking, enhancing the security of modern operating systems against kernel-mode malware.