Let us explain why our technique is correct. We ﬁrst review
the notion of interpretation in ﬁrst-order logic [22]. An in-
terpretation I : (DI , αI ) is a pair of a domain (DI) and an
assignment (αI). The domain DI is a nonempty set of values
(or objects). The assignment αI maps variables, constants,
functions, and predicate symbols to elements, functions, and
predicates over DI. Let J : I (cid:2) {x (cid:17)→ v} denote an x-variant
of I such that J accords with I on everything except for x.
That is, DI = DJ and αI [y] = αJ [y] if y (cid:3)= x, but αI [x] and
αJ [x] may be different. Then, we have the following result
(see Appendix B for proof).
Proposition 1: Let p and q be ﬁrst-order formulas. Then,
p → q is invalid if the following three conditions hold:
(i) FV(p) (cid:3)⊇ FV(q),
(ii) p is satisﬁable: ∃I. I |= p, and
(iii) q has a nontrivial variable: there exists x ∈ FV(q)\FV(p)
such that for any interpretation I, if I |= q then I (cid:2)
{x (cid:17)→ v} |= ¬q for some v ∈ DI \ {αI [x]}.
Our technique is based on this result but checks the ﬁrst
condition (i) only, which can be done syntactically and ef-
ﬁciently. We do not check the last two conditions (ii) and (iii)
as they require invoking SMT solvers in general. Therefore,
our technique may decide valid VCs as invalid (i.e., producing
false positives) although no invalid VCs are determined to be
valid (i.e., no false negatives). Because the technique causes
no false negatives, it can be used by sound veriﬁers.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1684
Although approximated, our technique rarely produces false
positives in practice. For example, consider the valid formula
true → a ≥ a. Our technique may incorrectly conclude
that the formula is invalid, since FV(true) (cid:3)⊇ FV(a ≥ a)
but we do not check the condition (iii) that
the formula
violates. Note that, however, such a trivial formula is unlikely
to appear during the veriﬁcation of real-world smart contracts;
the veriﬁcation condition true → a ≥ a would be generated
from the trivial expression a−a that does not appear frequently
in programs. Even when they appear, we can easily remove the
triviality. For example, it is easy to simplify true → a ≥ a
into true → true that is not determined as invalid by our
technique since FV(true) ⊇ FV(true). In fact, no false
positives were caused by our technique in our experiments
in Section V.
Efﬁcient Validity Checking: We also quickly identify
some valid formulas by using a number of domain-speciﬁc
templates. This is because our veriﬁcation conditions are likely
to involve arrays and non-linear expressions extensively but
modern SMT solvers are particularly inefﬁcient for handling
them. For example, a simple yet important validity template
is as follows:
F (cid:3) → x ≥ (x ∗ n1)/n2
n1 ≤ n2
where F (cid:3) denotes an arbitrary formula, x a 256-bit unsigned
integer variable, and n1 and n2 some integer constants.
This template asserts that, regardless of the precondition F (cid:3),
x ≥ (x ∗ n1)/n2 holds if n1 ≤ n2. Using the template, we
can conclude that a formula ··· → y ≥ (y ∗ 99)/100 is valid
(i.e., the subtraction y − (y ∗ 99)/100 is safe from underﬂow)
without calling an external SMT solver. These templates are
used before the preprocessing step; several templates were
designed to determine the validity of formulas containing
domain-speciﬁc symbols at a high level without preprocessing.
We provide more examples in Appendix C.
IV. IMPLEMENTATION
In this section, we explain implementation details of VERIS-
MART, which consists of about 7,000 lines of OCaml code.
Although Section III describes our algorithm for a small subset
of Solidity, our implementation supports the full language
(except for inline assembly). Most Solidity features (e.g.,
function modifers) can be desugared into our core language
in a straightforward way. We discuss nontrivial issues below.
Function Calls: Basically, we handle function calls by
inlining them into their call-sites up to a predeﬁned inlining
depth k (currently, less than or equal to 2). Exceptions include
relatively large functions (with more than 20 statements) that
might cause scalability issues and inter-contract function calls
(i.e., calling functions in other contracts via contract objects).
To perform exhaustive veriﬁcation, we handle those remaining
function calls conservatively as follows.
First, we conservatively reﬂect side-effects of function calls
on the caller side. To do so, we ﬁrst run a side-effect
analysis [25] to ﬁnd variables whose values may be changed
by the called functions. Next, we weaken the formulas at
call-sites by replacing each of atomic predicates that involve
those variables by true. For example, consider a call statement
x:=foo() and assume foo may change the value of variable
a in its body. Suppose further the precondition of the call-site
is a ≥ 1∧b ≥ 1∧c ≥ 1∧x ≥ y. Then, we obtain the following
postcondition of the call-site: true ∧ b ≥ 1 ∧ c ≥ 1 ∧ true
where a ≥ 1 and x ≥ y get replaced by true. Regarding
inter-contract function calls, it is enough to invalidate the
value of return variables only, as inter-contract calls in Solidity
cannot directly modify other contracts’ states. For example,
consider the precondition above and an inter-contract call x
: = o.foo (). We produce the postcondition a ≥ 1 ∧ b ≥
1 ∧ c ≥ 1 ∧ true, where only x ≥ y is replaced by true.
Second, we separately analyze function bodies not inlined.
This step is needed to detect potential bugs in the functions
skipped during the step described in the preceding paragraph.
To perform exhaustive veriﬁcation, we analyze these functions
by over-approximating their input states. Speciﬁcally, when
the function in a main contract has public or external
visibility, we run the algorithm in Section III which annotates
entry and exit with transaction invariant. On the other hand,
when the function in a main contract has internal or
private visibility (i.e., the functions which cannot be called
from the outside and can only be accessed via function call
statements) or the function is deﬁned in other contracts, we
generate the VCs after we annotate entries and exits of them
with true, i.e., incoming state at the entry is over-approximated
as true and inductiveness condition can be trivially checked at
the exit.
In summary, VERISMART performs exhaustive safety ver-
iﬁcation without missing any possible behaviors. In theory,
we may lose precision due to the conservative function-call
analysis. However, as our experimental results in Section V
demonstrate, our approach is precise enough in practice.
Inheritance: In Section III, we assumed a single contract
is given. To support contract inheritance, we copy functions
and global variables of parent contracts to a main contract
using the inheritance graph provided by the Solidity compiler.
During this conversion, we consider function overriding and
variable hiding, and do not copy functions with the same
signatures and the same variables.
Structures: We encode structures in Solidity with arrays.
To do so, we introduce a special mapping variable for each
member of a structure type, which maps structures to the
member values. For example, given a precondition φ, the
strongest postcondition of command x.y := z is my =
y(cid:12)x (cid:2) z(cid:13) ∧ φ[m(cid:3)
m(cid:3)
y/my], where my is a map (or an array)
from structures to the corresponding values of member y and
x is an uninterpreted symbol for the structure variable x.
Note that we are able to handle aliasing among structures
using this encoding. For example, if two structures p and q
are aliased and they both have y as a member, then we can
access the same member y using either of the structures, i.e.,
my[p] = my[q].
Inline Assembly: One potential source of false negatives
of source code analyzer (e.g., ZEUS [11]) is inline assembly.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1685
VERISMART also has this limitation and may miss bugs
hidden in embedded bytecode. However, VERISMART con-
servatively analyzes the remaining parts of the source code
by considering the side-effects of the assembly blocks in a
similar way that we handle function call statements, i.e., we
replace each atomic predicate by true if it involves variables
used in assembly code (using the information provided by the
Solidity compiler). Note that this limitation does not impair the
practicality of VERISMART signiﬁcantly, as inline assembly is
not very common in practice. For example, in our benchmarks
in Section V, only four contracts (#4, #16, #52 in Table II,
#24 in Table IV) contain assembly blocks but none of these
assembly blocks include arithmetic operations.
V. EVALUATION
We evaluate the effectiveness of VERISMART by comparing
it with existing tools. Research questions are as follows:
(1) How precisely can VERISMART detect arithmetic bugs
compared to the existing bug-ﬁnders, i.e., OSIRIS [7],
OYENTE [9], MYTHRIL [8], MANTICORE [10]?
(2) How does VERISMART compare to the existing veriﬁers,
i.e., ZEUS [11] and SMTCHECKER [12]?
In addition, we conduct a case study to show VERISMART can
be easily extended to support other types of vulnerabilities
(Section V-C). We used the latest versions of the existing tools
(as of May 1st, 2019). All experiments were conducted on a
machine with Intel Core i7-9700K and 64GB RAM.
A. Comparison with Bug-ﬁnders
We evaluate the bug-ﬁnding capability of VERISMART by
comparing it with four bug-ﬁnding analyzers for Ethereum
smart contracts: OSIRIS [7], OYENTE [26], MYTHRIL [8], and
MANTICORE [10]. They are well-known open-sourced tools
that support detection of integer overﬂows (OSIRIS, OYENTE,
MYTHRIL, MANTICORE) and division-by-zeros (MYTHRIL).
In particular, OSIRIS is arguably the state-of-the-art tailored
for ﬁnding integer overﬂow bugs [7].
Setup: We used 60 smart contracts that have vulnerabilities
with assigned CVE IDs. We have chosen these contracts to
enable in-depth manual study on the analysis results with
known vulnerabilities conﬁrmed by CVE reports. The 60
benchmark contracts were selected randomly from the 487
CVE reports that are related to arithmetic overﬂows (Table I),
excluding duplicated contracts with minor syntactic differ-
ences (e.g., differences in contract names or logging events).
During evaluation, we found four incorrect CVE reports (#13,
#20, #31, #32 in Table II), which will be discussed in more
detail at the end of the section.
To run OSIRIS, OYENTE, MYTHRIL, and MANTICORE, we
used public docker images provided together with these tools.
Following prior work [7], we set the timeout to 30 minutes per
contract. For fair comparison, we activated only the analysis
modules for arithmetic bug detection when such option is
available (MYTHRIL, MANTICORE). We left other options
as default. For VERISMART, we set the timeout to 1 minute
for the last entrance of the loop in Algorithm 1, and set the
timeout to 10 seconds for Z3 request, because these numbers
worked effectively in our experience; if we set each timeout
to a lower value, the precision may decrease (Section V-D). In
analysis reports of each tool, we only counted alarms related
to arithmetic bugs (integer over/underﬂows and division-by-
zeros) for a main contract whose name is available at the
Etherscan website [27].
that
Results: Table II shows the evaluation results on the CVE
dataset. For each benchmark contract and tool, the table shows
the number of alarms (#Alarm) and the number of false
positives (#FP) reported by the tool; regarding these two
numbers, we did not count cases where the tools (OYENTE and
MYTHRIL) ambiguously report
the entire body of a
function or the entire contract is vulnerable. The CVE columns
indicate whether the tool detected the vulnerabilities in CVE
reports or not (: a tool successfully pinpoints all vulnerable
locations in each CVE report, : a tool does not detect any
of them, (cid:23): a tool detects only a part of vulnerable points in
each CVE report or, obscurely reports the body of an entire
function containing CVE vulnerabilities is vulnerable without
pinpointing speciﬁc locations. N/A: all vulnerabilities in CVE
reports are actually safe; see Table III).
The results show that VERISMART far outperforms the
existing bug-ﬁnders in both precision and recall.
In to-
tal, VERISMART reported 492 arithmetic over/underﬂow and
division-by-zero alarms. We carefully inspected these alarms
and conﬁrmed that 490 out of 492 were true positives (i.e.,
safety can be violated for some feasible inputs), resulting
in a false positive rate ( #FP
#Alarm) of 0.41% (2/492). We also
inspected 484 (=976-492) unreported queries to conﬁrm that
all of them are true negatives (i.e., no feasible inputs exist
to violate safety), resulting in a recall of 100%. Of course,
VERISMART detected all CVE vulnerabilities. In contrast,
existing bug-ﬁnders missed many vulnerabilities. For example,
OSIRIS managed to detect 41 CVE vulnerabilities with 17
pinpointed 20
undetected known vulnerabilities. OYENTE
exact vulnerable locations in CVE, partly detected vulner-
abilities in 4 CVE reports, vaguely raised alarms on 11
functions containing vulnerable locations, and missed 23 CVE
vulnerabilities. MYTHRIL detected vulnerabilities in 10 CVE
reports, obscurely warned that 1 function is vulnerable, and
missed 46 known issues. MANTICORE was successful
in
only two CVE reports, failing on 42 CVE reports. The false
positive rates of OSIRIS, OYENTE, and MYTHRIL were 5.42%
(13/240), 8.19% (14/171), and 10.64% (10/94), respectively.
Efﬁciency: VERISMART was also competitive in terms of
efﬁciency. To obtain the results in Table II on the 60 bench-
mark programs, VERISMART, OSIRIS, OYENTE, MYTHRIL,
and MANTICORE took 1.1 hour (3,807 seconds), 4.2 hours
(14,942 seconds), 14 minutes, 13.8 hours (49,680 seconds),
and 31.4 hours (112,920 seconds) respectively, excluding the
cases of timeout (though we set the timeout to 30 minutes,
MANTICORE sometimes did not terminate within 3 days)
and internal errors (e.g., unsupported operations encountered,
abnormal termination) of MYTHRIL and MANTICORE.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1686
EVALUATION OF EXISTING TOOLS ON CVE REPORTS. LOC: LINES OF CODE. #Q: THE TOTAL NUMBER OF QUERIES FOR EACH CONTRACT AFTER
REMOVING UNREACHABLE FUNCTIONS. #ALARM: THE NUMBER OF ENTIRE ALARMS PRODUCED BY EACH TOOL. #FP: THE NUMBER OF FALSE ALARMS.
CVE: A MARKER THAT INDICATES WHETHER EACH TOOL SUCCESSFULLY DETECTS VULNERABILITIES IN CVE. : A TOOL SUCCESSFULLY PINPOINTS
ALL VULNERABLE LOCATIONS IN CVE. (cid:3): A TOOL DETECTS ONLY A PART OF VULNERABILITIES IN CVE, OR OBSCURELY REPORTS THAT AN ENTIRE
FUNCTION BODY IS VULNERABLE WITHOUT PINPOINTING SPECIFIC LOCATIONS. : A TOOL TOTALLY FAILED TO DETECT VULNERABILITIES IN CVE.
N/A: ALL VULNERABILITIES REPORTED IN CVE ARE ACTUALLY SAFE (#13, #31). FOR PARTLY CORRECT CVE REPORTS (#20, #32), THE
CVE INFORMATION IS VALID W.R.T. THEM.
TABLE II
VERISMART
OSIRIS [7]
#Alarm #FP CVE #Alarm #FP CVE #Alarm #FP CVE #Alarm #FP CVE #Alarm #FP CVE
MYTHRIL [8]
MANTICORE [10]
internal error
2
1
5
2
3
5
0
4
2
3
3
0
0
0
1
0
1
0
0
1
1
2
1
2
0
2
2
2
0
0
0
3
1
0
1
0
5
2
0
0
1
0
2
0
3
3
2
3
0
3
0
4
2
0
0
14
0
0
0
94
0

0

0

0

0

0

0

2

0

2

1

0

0 N/A
0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0 N/A
0

0

0

0

0

0

0

1

0

0

0

0

0

0
