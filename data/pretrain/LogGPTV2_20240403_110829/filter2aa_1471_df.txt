system is ready to generate and write a dump using a safe, noncorrupted path.
Indeed, when the system crashes, the crash dump driver
(%SystemRoot%\System32\Drivers\Crashdmp.sys) verifies the integrity of
the two dump-context structures obtained at boot by performing a memory
comparison. If there’s not a match, it does not write a crash dump because
doing so would likely fail or corrupt the disk. Upon a successful verification
match, Crashdmp.sys, with support from the copied disk miniport driver and
any required filter drivers, writes the dump information directly to the sectors
on disk occupied by the paging file, bypassing the file system driver and
storage driver stack (which might be corrupted or even have caused the
crash).
 Note
Because the page file is opened early during system startup for crash
dump use, most crashes that are caused by bugs in system-start driver
initialization result in a dump file. Crashes in early Windows boot
components such as the HAL or the initialization of boot drivers occur too
early for the system to have a page file, so using another computer to
debug the startup process is the only way to perform crash analysis in
those cases.
During the boot process, the Session Manager (Smss.exe) checks the
registry value HKLM\SYSTEM\CurrentControlSet\Control\Session
Manager\Memory Management\ExistingPageFiles for a list of existing page
files from the previous boot. (See Chapter 5 of Part 1 for more information
on page files.) It then cycles through the list, calling the function
SmpCheckForCrashDump on each file present, looking to see whether it
contains crash dump data. It checks by searching the header at the top of each
paging file for the signature PAGEDUMP or PAGEDU64 on 32-bit or 64-bit
systems, respectively. (A match indicates that the paging file contains crash
dump information.) If crash dump data is present, the Session Manager then
reads a set of crash parameters from the
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl registry key,
including the DumpFile value that contains the name of the target dump file
(typically %SystemRoot%\Memory.dmp, unless configured otherwise).
Smss.exe then checks whether the target dump file is on a different volume
than the paging file. If so, it checks whether the target volume has enough
free disk space (the size required for the crash dump is stored in the dump
header of the page file) before truncating the paging file to the size of the
crash data and renaming it to a temporary dump file name. (A new page file
will be created later when the Session Manager calls the NtCreatePagingFile
function.) The temporary dump file name takes the format DUMPxxxx.tmp,
where xxxx is the current low-word value of the system’s tick count (The
system attempts 100 times to find a nonconflicting value.) After renaming the
page file, the system removes both the hidden and system attributes from the
file and sets the appropriate security descriptors to secure the crash dump.
Next, the Session Manager creates the volatile registry key
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl\MachineCrash
and stores the temporary dump file name in the value DumpFile. It then
writes a DWORD to the TempDestination value indicating whether the dump
file location is only a temporary destination. If the paging file is on the same
volume as the destination dump file, a temporary dump file isn’t used
because the paging file is truncated and directly renamed to the target dump
file name. In this case, the DumpFile value will be that of the target dump
file, and TempDestination will be 0.
Later in the boot, Wininit checks for the presence of the MachineCrash
key, and if it exists, launches the Windows Fault Reporting process
(Werfault.exe) with the -k -c command-line switches (the k flag indicates
kernel error reporting, and the c flag indicates that the full or kernel dump
should be converted to a minidump). WerFault reads the TempDestination
and DumpFile values. If the TempDestination value is set to 1, which
indicates a temporary file was used, WerFault moves the temporary file to its
target location and secures the target file by allowing only the System
account and the local Administrators group access. WerFault then writes the
final dump file name to the FinalDumpFileLocation value in the
MachineCrash key. These steps are shown in Figure 10-43.
Figure 10-43 Crash dump file generation.
To provide more control over where the dump file data is written to—for
example, on systems that boot from a SAN or systems with insufficient disk
space on the volume where the paging file is configured—Windows also
supports the use of a dedicated dump file that is configured in the
DedicatedDumpFile and DumpFileSize values under the
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl registry key.
When a dedicated dump file is specified, the crash dump driver creates the
dump file of the specified size and writes the crash data there instead of to
the paging file. If no DumpFileSize value is given, Windows creates a
dedicated dump file using the largest file size that would be required to store
a complete dump. Windows calculates the required size as the size of the
total number of physical pages of memory present in the system plus the size
required for the dump header (one page on 32-bit systems, and two pages on
64-bit systems), plus the maximum value for secondary crash dump data,
which is 256 MB. If a full or kernel dump is configured but there is not
enough space on the target volume to create the dedicated dump file of the
required size, the system falls back to writing a minidump.
Kernel reports
After the WerFault process is started by Wininit and has correctly generated
the final dump file, WerFault generates the report to send to the Microsoft
Online Crash Analysis site (or, if configured, an internal error reporting
server). Generating a report for a kernel crash is a procedure that involves the
following:
1. 
If the type of dump generated was not a minidump, it extracts a
minidump from the dump file and stores it in the default location of
%SystemRoot%\Minidump, unless otherwise configured through the
MinidumpDir value in the
HKLM\SYSTEM\CurrentControlSet\Control\CrashControl key.
2. 
It writes the name of the minidump files to
HKLM\SOFTWARE\Microsoft\Windows\Windows Error
Reporting\KernelFaults\Queue.
3. 
It adds a command to execute WerFault.exe
(%SystemRoot%\System32\WerFault.exe) with the –k –rq flags (the
rq flag specifies to use queued reporting mode and that WerFault
should be restarted) to
HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce
so that WerFault is executed during the first user’s logon to the
system for purposes of actually sending the error report.
When the WerFault utility executes during logon, as a result of having
configured itself to start, it launches itself again using the –k –q flags (the q
flag on its own specifies queued reporting mode) and terminates the previous
instance. It does this to prevent the Windows shell from waiting on WerFault
by returning control to RunOnce as quickly as possible. The newly launched
WerFault.exe checks the
HKLM\SOFTWARE\Microsoft\Windows\Windows Error
Reporting\KernelFaults\Queue key to look for queued reports that may have
been added in the previous dump conversion phase. It also checks whether
there are previously unsent crash reports from previous sessions. If there are,
WerFault.exe generates two XML-formatted files:
■    The first contains a basic description of the system, including the
operating system version, a list of drivers installed on the machine,
and the list of devices present in the system.
■    The second contains metadata used by the OCA service, including the
event type that triggered WER and additional configuration
information, such as the system manufacturer.
WerFault then sends a copy of the two XML files and the minidump to
Microsoft OCA server, which forwards the data to a server farm for
automated analysis. The server farm’s automated analysis uses the same
analysis engine that the Microsoft kernel debuggers use when you load a
crash dump file into them. The analysis generates a bucket ID, which is a
signature that identifies a particular crash type.
Process hang detection
Windows Error reporting is also used when an application hangs and stops
work because of some defect or bug in its code. An immediate effect of an
application hanging is that it would not react to any user interaction. The
algorithm used for detecting a hanging application depends on the application
type: the Modern application stack detects that a Centennial or UWP
application is hung when a request sent from the HAM (Host Activity
Manager) is not processed after a well-defined timeout (usually 30 seconds);
the Task manager detects a hung application when an application does not
reply to the WM_QUIT message; Win32 desktop applications are considered
not responding and hung when a foreground window stops to process GDI
messages for more than 5 seconds.
Describing all the hung detection algorithms is outside the scope of this
book. Instead, we will consider the most likely case of a classical Win32
desktop application that stopped to respond to any user input. The detection
starts in the Win32k kernel driver, which, after the 5-second timeout, sends a
message to the DwmApiPort ALPC port created by the Desktop Windows
Manager (DWM.exe). The DWM processes the message using a complex
algorithm that ends up creating a “ghost” window on top of the hanging
window. The ghost redraws the window’s original content, blurring it out and
adding the (Not Responding) string in the title. The ghost window processes
GDI messages through an internal message pump routine, which intercepts
the close, exit, and activate messages by calling the ReportHang routine
exported by the Windows User Mode Crash Reporting DLL (faultrep.dll).
The ReportHang function simply builds a WERSVC_REPORT_HANG
message and sends it to the WER service to wait for a reply.
The WER service processes the message and initializes the Hang reporting
by reading settings values from the
HKLM\Software\Microsoft\Windows\Windows Error Reporting\Hangs root
registry key. In particular, the MaxHangrepInstances value is used to indicate
how many hanging reports can be generated in the same time (the default
number is eight if the value does not exist), while the TerminationTimeout
value specifies the time that needs to pass after WER has tried to terminate
the hanging process before considering the entire system to be in hanging
situation (10 seconds by default). This situation can happen for various
reasons—for example, an application has an active pending IRP that is never
completed by a kernel driver. The WER service opens the hanging process
and obtains its token, and some other basic information. It then creates a
shared memory section object to store them (similar to user application
crashes; in this case, the shared section has a name: Global\).
A WerFault process is spawned in a suspended state using the faulting
process’s token and the -h command-line switch (which is used to specify to
generate a report for a hanging process). Unlike with user application
crashes, a snapshot of the hanging process is taken from the WER service
using a full SYSTEM token by invoking the the PssNtCaptureSnapshot API
exported in Ntdll. The snapshot’s handle is duplicated in the suspended
WerFault process, which is resumed after the snapshot has been successfully
acquired. When the WerFault starts, it signals an event indicating that the
report generation has started. From this stage, the original process can be
terminated. Information for the report is grabbed from the cloned process.
The report for a hanging process is similar to the one acquired for a
crashing process: The WerFault process starts by querying the value of the
Debugger registry value located in the global
HKLM\Software\Microsoft\Windows\Windows Error Reporting\Hangs root
registry key. If there is a valid debugger, it is launched and attached to the
original hanging process. In case the Disable registry value is set to 1, the
procedure is aborted and the WerFault process exits without generating any
report. Otherwise, WerFault opens the shared memory section, validates it,
and grabs all the information previously saved by the WER service. The
report is initialized by using the WerReportCreate function exported in
WER.dll and used also for crashing processes. The dialog box for a hanging
process (shown in Figure 10-44) is always displayed independently on the
WER configuration. Finally, the WerReportSubmit function (exported in
WER.dll) is used to generate all the files for the report (including the
minidump file) similarly to user applications crashes (see the “Crash report
generation” section earlier in this chapter). The report is finally sent to the
Online Crash Analysis server.
Figure 10-44 The Windows Error Reporting dialog box for hanging
applications.
After the report generation is started and the
WERSVC_HANG_REPORTING_STARTED message is returned to DWM,
WER kills the hanging process using the TerminateProcess API. If the
process is not terminated in an expected time frame (generally 10 seconds,
but customizable through the TerminationTimeout setting as explained
earlier), the WER service relaunches another WerFault instance running
under a full SYSTEM token and waits another longer timeout (usually 60
seconds but customizable through the LongTerminationTimeout setting). If
the process is not terminated even by the end of the longer timeout, WER has
no other chances than to write an ETW event on the Application event log,
reporting the impossibility to terminate the process. The ETW event is shown
in Figure 10-45. Note that the event description is misleading because WER
hasn’t been able to terminate the hanging application.
Figure 10-45 ETW error event written to the Application log for a
nonterminating hanging application.
Global flags
Windows has a set of flags stored in two systemwide global variables named
NtGlobalFlag and NtGlobalFlag2 that enable various internal debugging,
tracing, and validation support in the operating system. The two system
variables are initialized from the registry key
HKLM\SYSTEM\CurrentControlSet\Control\Session Manager in the values
GlobalFlag and GlobalFlag2 at system boot time (phase 0 of the NT kernel
initialization). By default, both registry values are 0, so it’s likely that on
your systems, you’re not using any global flags. In addition, each image has a
set of global flags that also turn on internal tracing and validation code
(although the bit layout of these flags is slightly different from the
systemwide global flags).
Fortunately, the debugging tools contain a utility named Gflags.exe that
you can use to view and change the system global flags (either in the registry
or in the running system) as well as image global flags. Gflags has both a
command-line and a GUI interface. To see the command-line flags, type
gflags /?. If you run the utility without any switches, the dialog box shown in
Figure 10-46 is displayed.
Figure 10-46 Setting system debugging options with GFlags.
Flags belonging to the Windows Global flags variables can be split in
different categories:
■    Kernel flags are processed directly by various components of the NT
kernel (the heap manager, exceptions, interrupts handlers, and so on).
■    User flags are processed by components running in user-mode
applications (usually Ntdll).
■    Boot-only flags are processed only when the system is starting.
■    Per-image file global flags (which have a slightly different meaning
than the others) are processed by the loader, WER, and some other
user-mode components, depending on the user-mode process context
in which they are running.
The names of the group pages shown by the GFlags tool is a little
misleading. Kernel, boot-only, and user flags are mixed together in each
page. The main difference is that the System Registry page allows the user to
set global flags on the GlobalFlag and GlobalFlag2 registry values, parsed at
system boot time. This implies that eventual new flags will be enabled only
after the system is rebooted. The Kernel Flags page, despite its name, does
not allow kernel flags to be applied on the fly to a live system. Only certain
user-mode flags can be set or removed (the enable page heap flag is a good
example) without requiring a system reboot: the Gflags tool sets those flags
using the NtSetSystemInformation native API (with the
SystemFlagsInformation information class). Only user-mode flags can be set
in that way.
EXPERIMENT: Viewing and setting global flags
You can use the !gflag kernel debugger command to view and set
the state of the NtGlobalFlag kernel variable. The !gflag command
lists all the flags that are enabled. You can use !gflag -? to get the
entire list of supported global flags. At the time of this writing, the
!gflag extension has not been updated to display the content of the
NtGlobalFlag2 variable.
The Image File page requires you to fill in the file name of an executable
image. Use this option to change a set of global flags that apply to an
individual image (rather than to the whole system). The page is shown in
Figure 10-47. Notice that the flags are different from the operating system
ones shown in Figure 10-46. Most of the flags and the setting available in the
Image File and Silent Process Exit pages are applied by storing new values in
a subkey with the same name as the image file (that is, notepad.exe for the
case shown in Figure 10-47) under the
HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File
Execution Options registry key (also known as the IFEO key). In particular,
the GlobalFlag (and GlobalFlag2) value represents a bitmask of all the
available per-image global flags.
Figure 10-47 Setting per-image global flags with GFlags.
When the loader initializes a new process previously created and loads all
the dependent libraries of the main base executable (see Chapter 3 of Part 1
for more details about the birth of a process), the system processes the per-
image global flags. The LdrpInitializeExecutionOptions internal function
opens the IFEO key based on the name of the base image and parses all the
per-image settings and flags. In particular, after the per-image global flags
are retrieved from the registry, they are stored in the NtGlobalFlag (and
NtGlobalFlag2) field of the process PEB. In this way, they can be easily
accessed by any image mapped in the process (including Ntdll).
Most of the available global flags are documented at
https://docs.microsoft.com/en-us/windows-
hardware/drivers/debugger/gflags-flag-table.
EXPERIMENT: Troubleshooting Windows loader
issues
In the “Watching the image loader” experiment in Chapter 3 of Part
1, you used the GFlags tool to display the Windows loader runtime
information. That information can be useful for understanding why
an application does not start at all (without returning any useful
error information). You can retry the same experiment on
mspaint.exe by renaming the Msftedit.dll file (the Rich Text Edit
Control library) located in %SystemRoot%\system32. Indeed, Paint
depends on that DLL indirectly. The Msftedit library is loaded
dynamically by MSCTF.dll. (It is not statically linked in the Paint
executable.) Open an administrative command prompt window and
type the following commands:
Click here to view code image
cd /d c:\windows\system32
takeown /f msftedit.dll
icacls msftedit.dll /grant Administrators:F
ren msftedit.dll msftedit.disabled
Then enable the loader snaps using the Gflags tool, as specified
in the “Watching the image loader” experiment. If you start
mspaint.exe using Windbg, the loader snaps would be able to
highlight the problem almost immediately, returning the following
text:
Click here to view code image
142c:1e18 @ 00056578 - LdrpInitializeNode - INFO: Calling 
init routine 00007FFC79258820 for
DLL "C:\Windows\System32\MSCTF.dll"142c:133c @ 00229625 - 
LdrpResolveDllName - ENTER: DLL
name: .\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 
0xc0000135
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: 
C:\Program Files\Debugging Tools
for Windows (x64)\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 
0xc0000135
142c:133c @ 00229625 - LdrpResolveDllName - ENTER: DLL name: 
C:\Windows\system32\MSFTEDIT.DLL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 
0xc0000135
. . .
C:\Users\test\AppData\Local\Microsoft\WindowsApps\MSFTEDIT.D
LL
142c:133c @ 00229625 - LdrpResolveDllName - RETURN: Status: 
0xc0000135
142c:133c @ 00229625 - LdrpSearchPath - RETURN: Status: 
0xc0000135
142c:133c @ 00229625 - LdrpProcessWork - ERROR: Unable to 
load DLL: "MSFTEDIT.DLL", Parent
Module: "(null)", Status: 0xc0000135
142c:133c @ 00229625 - LdrpLoadDllInternal - RETURN: Status: 
0xc0000135
142c:133c @ 00229625 - LdrLoadDll - RETURN: Status: 
0xc0000135
Kernel shims
New releases of the Windows operating system can sometime bring issues
with old drivers, which can have difficulties in operating in the new
environment, producing system hangs or blue screens of death. To overcome
the problem, Windows 8.1 introduced a Kernel Shim engine that’s able to
dynamically modify old drivers, which can continue to run in the new OS
release. The Kernel Shim engine is implemented mainly in the NT kernel.
Driver’s shims are registered through the Windows Registry and the Shim
Database file. Drivers’ shims are provided by shim drivers. A shim driver
uses the exported KseRegisterShimEx API to register a shim that can be
applied to target drivers that need it. The Kernel Shim engine supports mainly
two kinds of shims applied to devices or drivers.
Shim engine initialization
In early OS boot stages, the Windows Loader, while loading all the boot-
loaded drivers, reads and maps the driver compatibility database file, located
in %SystemRoot%\apppatch\Drvmain.sdb (and, if it exists, also in the
Drvpatch.sdb file). In phase 1 of the NT kernel initialization, the I/O manager
starts the two phases of the Kernel Shim engine initialization. The NT kernel
copies the binary content of the database file(s) in a global buffer allocated
from the paged pool (pointed by the internal global KsepShimDb variable). It