Click here to view code image
enum Value { Two, Three, Four, Five, Six, Seven, Eight, Nine,
Ten, Jack, Queen, King, Ace }
7. Open the Suit.cs file in the Code and Text Editor window.
This file contains an enumeration called Suit, which represents the suits
of cards in a regular pack:
Click here to view code image
enum Suit { Clubs, Diamonds, Hearts, Spades }
8. Display the PlayingCard.cs file in the Code and Text Editor window.
This file contains the PlayingCard class. This class models a single
playing card.
Click here to view code image
class PlayingCard
{
    private readonly Suit suit;
    private readonly Value value;
    public PlayingCard(Suit s, Value v)
    {
        this.suit = s;
        this.value = v;
    }
    public override string ToString()
    {
        string result = $"{this.value} of {this.suit}";
             return result;
    }
    public Suit CardSuit()
    {
        return this.suit;
    }
    public Value CardValue()
    {
        return this.value;
    }
Download from finelybook PI:EMAIL
377
}
This class has two readonly fields that represent the value and suit of the
card. The constructor initializes these fields.
Note A readonly field is useful for modeling data that should not
change after it has been initialized. You can assign a value to a
readonly field by using an initializer when you declare it or in a
constructor, but thereafter you cannot change it.
The class contains a pair of methods named CardValue and CardSuit
that return this information, and it overrides the ToString method to
return a string representation of the card.
Note The CardValue and CardSuit methods are actually better
implemented as properties, which you learn how to do in Chapter
15.
9. Open the Pack.cs file in the Code and Text Editor window.
This file contains the Pack class, which models a pack of playing cards.
At the top of the Pack class are two public const int fields called
NumSuits and CardsPerSuit. These two fields specify the number of
suits in a pack of cards and the number of cards in each suit. The private
cardPack variable is a two-dimensional array of PlayingCard objects.
You will use the first dimension to specify the suit and the second
dimension to specify the value of the card in the suit. The
randomCardSelector variable is a random number generated based on
the Random class. You will use the randomCardSelector variable to
help shuffle the cards before they are dealt to each hand.
Download from finelybook PI:EMAIL
378
Click here to view code image
class Pack
{
    public const int NumSuits = 4;
    public const int CardsPerSuit = 13;
    private PlayingCard[,] cardPack;
    private Random randomCardSelector = new Random();
    ...
}
10. Locate the default constructor for the Pack class. Currently this
constructor is empty apart from a // TODO: comment. Delete the
comment, and add the following statement shown in bold to instantiate
the cardPack array with the appropriate values for each dimension:
Click here to view code image
public Pack()
{
    this.cardPack = new PlayingCard[NumSuits, CardsPerSuit];
}
11. Add the following code shown in bold to the Pack constructor. These
statements populate the cardPack array with a full, sorted deck of cards.
Click here to view code image
public Pack()
{
    this.cardPack = new PlayingCard[NumSuits, CardsPerSuit];
    for (Suit suit = Suit.Clubs; suit = HandSize)
    {
        throw new ArgumentException("Too many cards");
    }
    this.cards[this.playingCardCount] = cardDealt;
    this.playingCardCount++;
}
This code first checks to ensure that the hand is not already full. If the
hand is full, it throws an ArgumentException exception (this should
never occur, but it is good practice to be safe). Otherwise, the card is
added to the cards array at the index specified by the playingCardCount
variable, and this variable is then incremented.
20. In Solution Explorer, expand the MainPage.xaml node and then open the
MainPage.xaml.cs file in the Code and Text Editor window.
This is the code for the Card Game window. Locate the dealClick
method. This method runs when the user clicks the Deal button.
Currently, it contains an empty try block and an exception handler that
displays a message if an exception occurs.
21. Delete the comment then add the following statement shown in bold to
the try block:
Click here to view code image
private void dealClick(object sender, RoutedEventArgs e)
{
    try
    {
        pack = new Pack();
    }
    catch (Exception ex)
    {
Download from finelybook PI:EMAIL
384
        ...
    }
}
This statement simply creates a new pack of cards. You saw earlier that
this class contains a two-dimensional array holding the cards in the
pack, and the constructor populates this array with the details of each
card. You now need to create four hands of cards from this pack.
22. Add the following statements shown in bold to the try block:
Click here to view code image
try
{
    pack = new Pack();
    for (int handNum = 0; handNum < NumHands; handNum++)
    {
        hands[handNum] = new Hand();
    ,}
}
catch (Exception ex)
{
    ...
}
This for loop creates four hands from the pack of cards and stores them
in an array called hands. Each hand is initially empty, so you need to
deal the cards from the pack to each hand.
23. Add the following code shown in bold to the for loop:
Click here to view code image
try
{
    ...
    for (int handNum = 0; handNum < NumHands; handNum++)
    {
        hands[handNum] = new Hand();
        for (int numCards = 0; numCards < Hand.HandSize;
numCards++)
        {
            PlayingCard cardDealt = pack.DealCardFromPack();
            hands[handNum].AddCardToHand(cardDealt);
        }
    }
}
Download from finelybook PI:EMAIL
385
catch (Exception ex)
{
    ...
}
The inner for loop populates each hand by using the
DealCardFromPack method to retrieve a card at random from the pack
and the AddCardToHand method to add this card to a hand.
24. Add the following code shown in bold after the outer for loop:
Click here to view code image
try
{
    ...
    for (int handNum = 0; handNum < NumHands; handNum++)
    {
        ...
    }
    north.Text = hands[0].ToString();
    south.Text = hands[1].ToString();
    east.Text = hands[2].ToString();
    west.Text = hands[3].ToString();
}
catch (Exception ex)
{
    ...
}
When all the cards have been dealt, this code displays each hand in the
text boxes on the form. These text boxes are called north, south, east,
and west. The code uses the ToString method of each hand to format the
output.
If an exception occurs at any point, the catch handler displays a message
box with the error message for the exception.
25. On the Debug menu, click Start Debugging. When the Card Game
window appears, expand the command bar and click Deal.
The cards in the pack should be dealt at random to each hand, and the
cards in each hand should be displayed on the form, similarly as shown
in the following image:
Download from finelybook PI:EMAIL
386
26. Click Deal again. Verify that a new set of hands is dealt and the cards in
each hand change.
27. Return to Visual Studio and stop debugging.
Accessing arrays that contain value types
You can think of an array as a simple collection of data, ordered by an index.
You can easily retrieve an item if you know its index, but if you want to find
data based on some other attribute, then you typically have to implement a
helper method that performs the search and returns the index of the required
item.
As an example, consider the following code that creates an array of
Person objects, where Person is a class:
Click here to view code image
class Person
{
    public string Name;
Download from finelybook PI:EMAIL
387
    public int Age;
    public Person(string name, int age)
    {
        this.Name = name;
        this.Age = age;
    }
}
...
Person[] family = new[] {
    new Person("John", 53),
    new Person("Diana", 53),
    new Person("James", 26),
    new Person("Francesca", 23)
};
You want to find the youngest member of the family in the Person array,
so you write the following method:
Click here to view code image
Person findYoungest()
{
    int youngest = 0;
    for (int i = 1; i < family.Length; i++)
    {
        if (family[i].Age < family[youngest].Age)
        {
            youngest = i;
        }
    }
    return family[youngest];
}
You can then call this method and display the results in the following
manner:
Click here to view code image
var mostYouthful = findYoungest();
Console.WriteLine($"Name: {mostYouthful.Name}, Age:
{mostYouthful.Age}");
Hopefully, this displays the following result: