### Code Snippets and Conditions
```python
x = 10
x >= 10  # True
x % 1337 != 0  # True
x % 1337 == 0  # False
```

### Driller: AFL + angr
- **Fuzzing**: Effective at finding solutions for general inputs.
- **Symbolic Execution**: Effective at finding solutions for specific inputs.

### Test Cases
- **Driller**:
  - "Cheap" fuzzing coverage
  - Test Cases: "Y", "X"
- **Dynamic Symbolic Execution**:
  - New test cases generated: "CGC_MAGIC", "CGC_MAGICY"

### Auto Exploitation - Simplified
```c
typedef struct component {
    char name[32];
    int (*do_something)(int arg);
} comp_t;

comp_t *initialize_component(char *cmp_name) {
    int i = 0;
    comp_t *cmp = malloc(sizeof(comp_t));
    cmp->do_something = sample_func;
    while (*cmp_name)
        cmp->name[i++] = *cmp_name++;
    cmp->name[i] = '\0';
    return cmp;
}

char *x = get_input();
comp_t *cmp = initialize_component(x);
cmp->do_something(1);
```

### Memory Layout
- **HEAP**:
  - `char name[32]`
  - `int (*do_something)(int arg)`
  - `Symbolic Byte[0]` to `Symbolic Byte[36]`
  - `'\0'`
  - `&sample_func`

### Turning the State into an Exploited State
- **angr**:
  - `assert state.se.symbolic(state.regs.pc)`
  - Constrain buffer to contain shellcode:
    ```python
    buf_addr = find_symbolic_buffer(state, len(shellcode))
    mem = state.memory.load(buf_addr, len(shellcode))
    state.add_constraints(mem == state.se.bvv(shellcode))
    ```
  - Constrain PC to point to the buffer:
    ```python
    state.se.add_constraints(state.regs.pc == buf_addr)
    ```
  - Synthesize:
    ```python
    exploit = state.posix.dumps(0)
    ```

### Detecting Leaks of the Flag Page
- Make only the flag page symbolic.
- Everything else is completely concrete.
- Can execute most basic blocks with the Unicorn Engine.
- When we have idle cores on the CRS, trace all our test cases.
- Solved DEFCON CTF LEGIT_00009 challenge.

### Patcherex
- **Unpatched Binary** → **Patching Backend** → **Patched Binary**
- **Patching Techniques**:
  - Stack randomization
  - Return pointer encryption
  - ...
- **Patches**:
  - Insert code
  - Insert data
  - ...
- **Patching Backend**:
  - Detour
  - Reassembler
  - Reassembler Optimized

### Adversarial Patches
- **Detect QEMU**:
  ```assembly
  xor eax, eax
  inc eax
  push eax
  push eax
  push eax
  fld TBYTE PTR [esp]
  fsqrt
  ```
- **Transmit the flag**:
  - To stderr!
- **Backdoor**:
  - Hash-based challenge-response backdoor
  - Not cryptographically secure, but good enough to defeat automatic systems.

### Generic Patches
- Return pointer encryption
- Protect indirect calls/jmps
- Extended Malloc allocations
- Randomly shift the stack (ASLR)
- Clean uninitialized stack space

### Targeted Patches
- **Qualification event**: Avoid crashes!
- **Final event**:
  - Reassembler & Optimizer
  - Prototypes in 3 days

### CGC CFE Statistics
- **Challenge Sets fielded**: 82
- **Exploits generated**: 2442
- **Exploits for 14/82 CS with 100% Reliability**: 1709
- **Longest exploit**: 3791 lines of C code
- **Shortest exploit**: 226 lines of C code
- **crackaddr**: 517 lines of C code
- **100% reliable exploits generated for**:
  - YAN01_000{15,16}
  - CROMU_000{46,51,55,65,94,98}
  - NRFIN_000{52,59,63}
  - KPRCA_00{065,094,112}
- **Rematch Challenges**:
  - SQLSlammer (CROMU_00094)
  - crackaddr (CROMU_00098)

### Vulnerabilities in Challenge Sets
- CWE-20: Improper Input Validation
- CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer
- CWE-121: Stack-based Buffer Overflow
- CWE-122: Heap-based Buffer Overflow
- CWE-126: Buffer Over-read
- CWE-131: Incorrect Calculation of Buffer Size
- CWE-190: Integer Overflow or Wraparound
- CWE-193: Off-by-one Error
- CWE-201: Information Exposure Through Sent Data
- CWE-202: Exposure of Sensitive Data Through Data Queries
- CWE-291: Information Exposure Through Sent Data
- CWE-681: Incorrect Conversion between Numeric Types
- CWE-787: Out-of-bounds Write
- CWE-788: Access of Memory Location After End of Buffer

### Human Augmentation
- **Awesome**:
  - CRS assisted with 5 exploits
  - Human exploration → CRS exploitation
  - Backdoors!
- **Tough**:
  - API incompatibilities are brutal
  - Computer programs are brittle

### Stay in Touch
- Twitter: @Shellphish
- Email: PI:EMAIL or PI:EMAIL
- IRC: #shellphish on freenode
- CRS chat: #shellphish-crs on freenode
- angr chat: #angr on freenode

### Conclusions
- Automated vulnerability analysis and mitigation is a growing field.
- The DARPA CGC Competition is pushing the limits of what can be done in a self-managed, autonomous setting.
- This is the first of its kind, but not the last.
- ... to the singularity!

### Self-Managing Hacking
- **Infrastructure availability**: No event can cause a catastrophic downtime.
- **Novel approaches to orchestration for resilience**.
- **Analysis scalability**: Efficient and autonomous fuzzing and state exploration.
- **Novel techniques for state exploration triaging**.
- **Performance/security trade-off**: Which patched binary to field?
- **Smart approaches to security performance evaluation**.

### Hacking Binary Code
- Low abstraction level
- No structured types
- No modules or clearly defined functions
- Compiler optimization and other artifacts can make the code more complex to analyze
- WYSIWYE: What you see is what you execute

### Finding Vulnerabilities
- **Human**: Manual vulnerability analysis
- **Semi-Automated**: Tool-assisted vulnerability analysis
- **Fully Automated**: Automated vulnerability analysis

### Vulnerability Analysis Systems
- Usually a composition of static and dynamic techniques.
- Model how attacker-controlled information enters the system.
- Model how information is processed.
- Model a number of unsafe conditions.

### Static Analysis
- Characterize all possible run-time behaviors over all possible inputs without running the program.
- Find possible bugs, or prove the absence of certain kinds of vulnerabilities.
- Challenges: soundness, precision, and scalability.
- **Example Analyses**:
  - Control-flow analysis
  - Data-flow analysis
  - Data dependency analysis
  - Points-to analysis
  - Alias analysis
  - Value-set analysis

### Dynamic Analysis
- Very precise for particular environments and inputs.
- Provide no guarantee of coverage.
- **Example Analyses**:
  - Dynamic taint analysis
  - Fuzzing
  - Forward symbolic execution

### The Shellphish CRS: Mechanical Phish
- **Vulnerable Binary** → **Automatic Testing** → **Crashes**
- **Automatic Vulnerability Finding** → **Proposed Patches** → **Patched Binary**
- **Automatic Exploitation** → **Proposed Exploits** → **Exploit**

### Interactive, Online CTFs
- Very difficult to organize.
- Require substantial infrastructure.
- Difficult to scale.
- Focused on both attacking and defending in real time.
- From ctftime.org: 100+ events listed.
- **Online attack-defense competitions**:
  - UCSB iCTF: 13 editions
  - RuCTF: 5 editions
  - FAUST: 1 edition

### DECREE API
- `void _terminate(unsigned int status);`
- `int allocate(size_t length, int prot, void **addr);`
- `int deallocate(void *addr, size_t length);`
- `int fdwait(int nfds, fd_set *readfds, fd_set *writefds, struct timeval *timeout, int *readyfds);`
- `int random(void *buf, size_t count, size_t *rnd_bytes);`
- `int receive(int fd, void *buf, size_t count, size_t *rx_bytes);`
- `int transmit(int fd, const void *buf, size_t count, size_t *tx_bytes);`

### Soundness and Completeness
- **Over-approximation (sound)**
- **More precise over-approximation (sound)**
- **Under-approximation (complete)**
- **Unsound, incomplete analysis**

### Simulation for Team Shellphish
- **R00**: Competition fields CB1, CB2, CB3
  - Points: Availability=1, Security=2, Evaluation=1 → Score = 2
  - Total score: 6
- **R01**: Competition fields CB1, RB2, CB3
  - Points: 
    - CB1: Availability=1, Security=1, Evaluation=1+(6/6) → Score = 2
    - RB2: 0
    - CB3: Availability=1, Security=2, Evaluation=1 → Score = 2
  - Total score: 4
- **R02**: Competition fields CB1, RB2, CB3
  - Points:
    - CB1: Availability=1, Security=1, Evaluation=1+(3/6) → Score = 1.5
    - RB2: Availability=0.8, Security=2, Evaluation=1 → Score = 1.6
    - CB3: Availability=1, Security=2, Evaluation=1 → Score = 2
  - Total score: 5.1

### Open Source All the Code!
- **Human + Machine = WIN!**
- **OMG, can’t do stairs?!?**