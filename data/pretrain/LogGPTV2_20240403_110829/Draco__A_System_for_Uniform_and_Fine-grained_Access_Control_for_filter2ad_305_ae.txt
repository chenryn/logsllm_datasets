### Methods and System Components

Our system consists of three primary components: 
1. A decompilation and static analysis unit that converts class files associated with Draconian policy rules into smali bytecode.
2. A data structure insertion unit that inserts the parsed policies into our data structures.
3. An enforcement unit that intercepts invocations on JavaScript (JS) bridges and invocations made via HTML5 APIs to ensure that the origin making the request is granted access by the developer. If not, the request is blocked, or the user is prompted to grant permissions.

### Performance Analysis

We will analyze the performance of each component separately. All experiments are conducted on an LG Google Nexus 5 smartphone, which runs Android 6.0 (Marshmallow) and is equipped with a 2.26GHz quad-core Qualcomm Snapdragon 800 processor and 2GB RAM.

#### App Decompilation and Static Analysis Unit

The first step involves decompiling class files associated with Draconian policy rules into smali bytecode. Currently, this process is performed off-line, but there are existing tools, such as apktool [13], that can decompile apps directly on the Android platform.

#### Policy Rule Parsing and Insertion

We consider two cases for permission files:
1. A small permission file for a class with five methods, where each method uses five or fewer permissions.
2. A large permission file with 20 class methods and five permissions for each method.

The second case is less likely to occur and is used as an upper bound for performance. For both cases, we use a simple policy rule including five methods, with the addition of a permission list containing all five permissions granted to the given subject.

Table 3 shows the results of policy parsing, which includes permission parsing. The run times are in the order of milliseconds, with the total run time being higher when the permission file contains many methods using all app permissions.

| Policy Type | Average (ms) | Standard Deviation |
|-------------|--------------|--------------------|
| Small policy | 1.874        | 2.453              |
| Large policy | 1.633        | 2.428              |
| Semantically large policy | 8.434 | 1.248 |
| Small permission file | 0.811 | 0.847 |
| Large permission file | 0.820 | 2.269 |

#### Enforcement Unit

Efficient enforcement is crucial as it is frequently performed during the app's lifetime. Any delay can affect the app’s runtime performance and degrade user experience. We evaluate the enforcement unit for the JavaScript interface and HTML5 channels. Results for the event handler channel are similar to those of the JavaScript interface channel and are not presented here.

##### JavaScript Interface Channel

We perform enforcement corresponding to small (five methods), large (fifteen methods), and semantically large (all methods) policy rules. We assume the origin wants to access the last method in the provided method list to get an upper bound on the run time (since we perform a linear search in a vector containing the methods associated with a policy rule).

| Policy Type | Action | Average (ms) | Standard Deviation |
|-------------|--------|--------------|--------------------|
| Small policy | Allow  | 0.356        | 0.243              |
|             | Block  | 0.260        | 0.051              |
| Large policy | Allow  | 0.965        | 1.214              |
|             | Block  | 0.551        | 0.124              |
| Semantically large policy | Allow | 0.146 | 0.0252 |

##### HTML5 API Channel

For the HTML5 API channel, we consider two cases:
1. An access control decision made solely by the system.
2. The user is prompted to make a decision on the use of permissions.

| Decision Maker | Action | Average (ms) | Standard Deviation |
|----------------|--------|--------------|--------------------|
| System         | Allow  | 0.282        | 0.130              |
|                | Block  | 0.326        | 0.286              |
| User           | Allow  | 0.093        | 0.029              |
|                | Block  | 0.116        | 0.076              |

### Related Work

Previous work has discussed the problem of foreign code governing the same privileges as the host application in different contexts. Solutions like AdSplit [23] and Morbs [24] address third-party library threats, while FlexDroid [25] and Case [26] provide fine-grained access control for system resources. However, these solutions do not fully protect against arbitrary foreign content loaded within a single in-app module.

Vulnerabilities in WebViews have been extensively studied [7, 8, 1, 9, 10], but few implement defense mechanisms. NoFrak [2] and [3] propose origin-based access control, but they have limitations in terms of framework specificity and resource coverage.

### Conclusion and Future Work

In this work, we investigate JavaScript bridge vulnerabilities in native mobile web applications using embedded web browsers (WebView). We show cases where highly-downloaded vulnerable Android apps inadvertently expose their internal resources to untrusted web code. We propose Draco, a unified access control framework that allows developers to declare fine-grained access rules and enforces these policies at runtime. Draco is easily deployable and does not require Android OS modifications. In future work, we plan to investigate the use of server credentials for authorization and explore efficient infrastructures for credential management, distribution, and revocation.

### Acknowledgments

This work was supported in part by NSF CNS 12-23967, 14-08944, and 15-13939. The views expressed are those of the authors only.

### References

[1] P. Mutchler, A. Doupé, Kruegel C. Mitchell, J., and G. Vigna. A large-scale study of mobile web app security. In MoST, 2015.
[2] M. Georgiev, S. Jana, and V. Shmatikov. Breaking and fixing origin-based access control in hybrid web/mobile application frameworks. In NDSS, 2014.
[3] X. Jin, L. Wang, T. Luo, and W. Du. Fine-grained access control for HTML5-based mobile applications in Android. In Information Security, 2015.
[4] Webkit: Open source web browser engine. https://webkit.org/.
[5] The Chromium Project. https://chromium.org/.
[6] Android Open Source Project. https://source.android.com/.
[7] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on WebView in the Android system. In ACSAC. ACM, 2011.
[8] E. Chin and D. Wagner. Bifocals: Analyzing WebView vulnerabilities in Android applications. In Information Security Applications, 2013.
[9] M. Neugschwandtner, M. Lindorfer, and C. Platzer. A view to a kill: WebView exploitation. In LEET, 2013.
[10] D. Thomas, A. Beresford, T.s Coudray, T. Sutcliffe, and A. Taylor. The lifetime of Android API vulnerabilities: Case study on the JavaScript-to-Java interface. In Security Protocols XXIII, 2015.
[11] Dex2jar. https://github.com/pxb1988/dex2jar.
[12] JD-GUI. http://jd.benow.ca/.
[13] Apktool Decompiler. http://ibotpeaches.github.io/Apktool/.
[14] D. McCracken and E. Reilly. Backus-Naur Form (BNF). In Encyclopedia of Computer Science.
[15] Eddystone BLE Beacons. http://bit.ly/1WMaylQ.
[16] Bluetooth Low Energy. http://bit.ly/1Rw9grs.
[17] 15 Companies Using Beacon Technology. http://bit.ly/16qwASy.
[18] The Apktool’s Failed App List. http://bit.ly/2aUyE9T.
[19] K. Au, Y. Zhou, Z. Huang, and D. Lie. PScout: Analyzing the Android permission specification. In CCS, 2012.
[20] Dexdump. http://bit.ly/1NBg7QM.
[21] Cold Start Times: Analysis of Top Apps. http://bit.ly/1TFTtb0.
[22] Key Takeaways for Mobile Apps. http://pewrsr.ch/1M4LqyY.
[23] S. Shekhar, M. Dietz, and D. Wallach. AdSplit: Separating smartphone advertising from applications. In USENIX, 2012.
[24] R. Wang and X. and Chen S. Xing, L. and Wang. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In CCS, 2013.
[25] J. Seo, D. Kim, D. Cho, T. Kim, and I. Shin. FlexDroid: Enforcing in-app privilege separation in Android. 2016.
[26] S. Zhu, L. Lu, and K. Singh. CASE: Comprehensive Application Security Enforcement on COTS Mobile Devices. In MobiSys, 2016.
[27] Y. Jing and T. Yamauchi. Access control to prevent malicious JavaScript code exploiting vulnerabilities of WebView in Android OS. IEICE TRANSACTIONS on Information and Systems, 2015.
[28] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection, and mitigation. In CCS, 2014.
[29] M. Georgiev, S. Jana, and V. Shmatikov. Rethinking security of web-based system applications. In WWW, 2015.