信息。有很多开发人员在 Mysql 语句执行出错时会调用函数 mysql_error()来报告
错误。见下面的例子：  
虽然该方法在开发中十分有用，但它能向攻击者暴露重要信息。如果攻击者
把单引号做为用户名，mypass 做为密码，查询语句就会变成：  
当该语句发送到 MySQL 后，系统就会显示如下错误信息： 
You have an error in your SQL syntax. Check the manual that corresponds to 
your 
MySQL server version for the right syntax to use near 'WHERE username = ''' 
AND 
password = 'a029d0df84eb55 
《PHP 安全基础详解》        www.528163.cn 提供 
不费吹灰之力，攻击者已经知道了两个字段名(username 和 password)以及他
们出现在查询中的顺序。除此以外，攻击者还知道了数据没有正确进行过滤（程
序没有提示非法用户名）和转义（出现了数据库错误），同时整个 WHERE 条件
的格式也暴露了，这样，攻击者就可以尝试操纵符合查询的记录了。 
在这一点上，攻击者有很多选择。一是尝试填入一个特殊的用户名，以使查
询无论用户名密码是否符合，都能得到匹配： 
myuser' or 'foo' = 'foo' -- 
假定将 mypass 作为密码，整个查询就会变成：  
由于中间插入了一个 SQL 注释标记，所以查询语句会在此中断。这就允许
了一个攻击者在不知道任何合法用户名和密码的情况下登录。 
如果知道合法的用户名，攻击者就可以该用户(如 chris)身份登录： 
chris' -- 
只要 chris 是合法的用户名，攻击者就可以控制该帐号。原因是查询变成了
下面的样子：  
幸运的是，SQL 注入是很容易避免的。正如第一章所提及的，你必须坚持
过滤输入和转义输出。 
虽然两个步骤都不能省略，但只要实现其中的一个就能消除大多数的 SQL
注入风险。如果你只是过滤输入而没有转义输出，你很可能会遇到数据库错误（合
法的数据也可能影响 SQL 查询的正确格式），但这也不可靠，合法的数据还可能
《PHP 安全基础详解》        www.528163.cn 提供 
改变 SQL 语句的行为。另一方面，如果你转义了输出，而没有过滤输入，就能
保证数据不会影响 SQL 语句的格式，同时也防止了多种常见 SQL 注入攻击的方
法。 
当然，还是要坚持同时使用这两个步骤。过滤输入的方式完全取决于输入数
据的类型（见第一章的示例），但转义用于向数据库发送的输出数据只要使用同
一个函数即可。对于 MySQL 用户，可以使用函数 mysql_real_escape_string( )：  
尽量使用为你的数据库设计的转义函数。如果没有，使用函数 addslashes( )
是最终的比较好的方法。 
当所有用于建立一个 SQL 语句的数据被正确过滤和转义时，实际上也就避
免了 SQL 注入的风险。  
如果你正在使用支持参数化查询语句和占位符的数据库操作类（如
PEAR::DB, PDO 等），你就会多得到一层保护。见下面的使用 PEAR::DB 的例子： 
query($sql, array($clean['last_name'])); 
?> 
由于在上例中数据不能直接影响查询语句的格式，SQL 注入的风险就降低
了。PEAR::DB 会自动根据你的数据库的要求进行转义，所以你只需要过滤输出
即可。 
如果你正在使用参数化查询语句，输入的内容就只会作为数据来处理。这样
《PHP 安全基础详解》        www.528163.cn 提供 
就没有必要进行转义了，尽管你可能认为这是必要的一步（如果你希望坚持转义
输出习惯的话）。实际上，这时是否转义基本上不会产生影响，因为这时没有特
殊字符需要转换。在防止 SQL 注入这一点上，参数化查询语句为你的程序提供
了强大的保护。 
译注：关于 SQL 注入，不得不说的是现在大多虚拟主机都会把
magic_quotes_gpc 选项打开，在这种情况下所有的客户端 GET 和 POST 的数据
都会自动进行 addslashes 处理，所以此时对字符串值的 SQL 注入是不可行的，
但要防止对数字值的 SQL 注入，如用 intval()等函数进行处理。但如果你编写的
是通用软件，则需要读取服务器的 magic_quotes_gpc 后进行相应处理。 
3.3. 数据的暴露
数据的暴露
数据的暴露
数据的暴露 
关于数据库，另外需要关心的一点是敏感数据的暴露。不管你是否保存了信
用卡号，社会保险号，或其它数据，你还是希望确认数据库是安全的。 
虽然数据库安全已经超出了本书所讨论的范围（也不是 PHP 开发者要负责
的），但是你可以加密最敏感的数据，这样只要密钥不泄露，数据库的安全问题
就不会造成灾难性的后果。（关于加密的详细介绍参见本书附录 C） 
第四章
第四章
第四章
第四章 会话与
会话与
会话与
会话与 Cookies 
本章主要讨论会话和有状态的 Web 应用的内在风险。你会首先学习状态、
cookies、与会话；然后我会讨论关于 cookie 盗窃、会话数据暴露、会话固定、
及会话劫持的问题及防范它们的方法。 
正如大家知道的，HTTP 是一种无状态的协议。这说明了两个 HTTP 请求之
间缺乏联系。由于协议中未提供任何让客户端标识自己的方法，因此服务器也就
无法区分客户端。 
虽然 HTTP 无状态的特性还是有一些好处，毕竟维护状态是比较麻烦的，但
是它向需要开发有状态的 Web 应用的开发人员提出了前所未有的挑战。由于无
法标识客户端，就不可能确认用户是否已登录，在购物车中加入商品，或者是需
要注册。 
一个最初由网景公司构思的超强解决方案诞生了，它就是被命名为 cookies
的一种状态管理机制。Cookies 是对 HTTP 协议的扩充。更确切地说，它们由两
个 HTTP 头部组成：Set-Cookie 响应头部和 Cookie 请求头部。 
当客户端发出对一个特定 URL 的请求时，服务器会在响应时选择包含一个
《PHP 安全基础详解》        www.528163.cn 提供 
Set-Cookie 头部。它要求客户端在下面的请求中包含一个相就的 Cookie 头部。
图 4-1 说明了这个基本的交互过程。 
图 4-1. 两个 HTTP 事务间 Cookie 的完整交互过程 
如果你根据这个基本概念在每一个请求中包含同一个唯一标识码（在 cookie
头部中），你就能唯一标识客户端从而把它发出的所有请求联系起来。这就是状
态所要求的，同时也是这一机制的主要应用。 
小提示 
迄今为止，最好的 cookies 使用指南依然是网景公司提供的规范，网址是：
http://wp.netscape.com/newsref/std/cookie_spec.html 。它是最类似和接近于全行业
支持的标准。 
基于会话管理的概念，可以通过管理每一个客户端的各自数据来管理状态。
数据被存储在会话存储区中，通过每一次请求进行更新。由于会话记录在存储时
有唯一的标识，因此它通常被称为会话标识。 
如果你使用 PHP 内建的会话机制，所有的这些复杂过程都会由 PHP 为你处
理。当你调用函数 session_start()时，PHP 首先要确认在本次请求中是否包含会
话标识。如果有的话，PHP 就会读取该会话数据并通过$_SESSION 超级公用数
组提供给你。如果不存在，PHP 会生成一个会话标识并在会话存储区建立一个新
记录。PHP 还会处理会话标识的传递并在每一个请求时更新会话存储区。图 4-2
演示了这个过程。 
虽然这很简便有效，但最重要的还是要意识到这并不是一个完整的解决方
案，因为在 PHP 的会话机制中没有内建的安全处理。除此之外，由于会话标识
是完全随机产生的，因此是不可预测的。你必须自行建立安全机制以防止所有其
它的会话攻击手段。在本章中，我会提出一些问题，并提供相应的解决方案。 
4.1. Cookie 盗窃
盗窃
盗窃
盗窃 
因使用 Cookie 而产生的一个风险是用户的 cookie 会被攻击者所盗窃。如果
会话标识保存在 cookie 中，cookie 的暴露就是一个严重的风险，因为它能导致会
话劫持。 
图 4-2. PHP 为你处理相关会话管理的复杂过程 
最常见的 cookie 暴露原因是浏览器漏洞和跨站脚本攻击（见第 2 章）。虽然
现在并没有已知的该类浏览器漏洞，但是以往出现过几例，其中最有名的一例同
时发生在 IE 浏览器的 4.0，5.0，5.5 及 6.0 版本（这些漏洞都有相应补丁提供）。 
《PHP 安全基础详解》        www.528163.cn 提供 
虽然浏览器漏洞的确不是 web 开发人员的错，但是你可以采取步骤以减轻
它对用户的威胁。在某些情况下，你可能通过使用一些安全措施有效地消除风险。
至少你可以告诉和指导用户打上修正漏洞的安全补丁。 
基于以上原因，知道新的安全漏洞是很有必要的。你可以跟踪下面提供的几
个网站和邮件列表，同时有很多服务提供了 RSS 推送，因此只要订阅 RSS 即可
以得到新安全漏洞的警告。SecurityFocus 网站维护着一系列软件漏洞的列表
（http://online.securityfocus.com/vulnerabilities），你可以通过开发商、主题和版本
进行检索。PHP 安全协会也维护着 SecurityFocus 的所有最新通知。
（http://phpsec.org/projects/vulnerabilities/securityfocus.html） 
跨站脚本攻击是攻击者盗窃 cookie 的更为常见的手段。其中之一已有第二
章中描述。由于客户端脚本能访问 cookies，攻击者所要的送是写一段传送数据
的脚本即可。唯一能限制这种情况发生的因素只有攻击者的创造力了。 
防止 cookie 盗窃的手段是通过防止跨站脚本漏洞和检测导致 cookie 暴露的
浏览器漏洞相结合。由于后者非常少见（此类漏洞将来也会比较罕见），所以它
并不是需要关心的首要问题，但还是最好要紧记。 
4.2. 会话数据暴露
会话数据暴露
会话数据暴露
会话数据暴露 
会话数据常会包含一些个人信息和其它敏感数据。基于这个原因，会话数据
的暴露是被普遍关心的问题。一般来说，暴露的范围不会很大，因为会话数据是
保存在服务器环境中的，而不是在数据库或文件系统中。因此，会话数据自然不
会公开暴露。 
使用 SSL 是一种特别有效的手段，它可以使数据在服务器和客户端之间传
送时暴露的可能性降到最低。这对于传送敏感数据的应用来说非常重要。SSL 在
HTTP 之上提供了一个保护层，以使所有在 HTTP 请求和应答中的数据都得到了
保护。 
如果你关心的是会话数据保存区本身的安全，你可以对会话数据进行加密，
这样没有正确的密钥就无法读取它的内容。这在 PHP 中非常容易做到，你只要
使用 session_set_save_handler( )并写上你自己的 session 加密存储和解密读取的处
理函数即可。关于加密会话数据保存区的问题，参见附录 C。 
4.3. 会话固定
会话固定