title:SMS of Death: From Analyzing to Attacking Mobile Phones on a Large
Scale
author:Collin Mulliner and
Nico Golde and
Jean-Pierre Seifert
SMS of Death: from analyzing to attacking mobile phones on a large scale
Collin Mulliner, Nico Golde and Jean-Pierre Seifert
Security in Telecommunications
Technische Universit¨at Berlin and Deutsche Telekom Laboratories
{collin,nico,jpseifert}@sec.t-labs.tu-berlin.de
Abstract
Mobile communication is an essential part of our
daily lives. Therefore, it needs to be secure and reliable.
In this paper, we study the security of feature phones,
the most common type of mobile phone in the world.
We built a framework to analyze the security of SMS
clients of feature phones. The framework is based on
a small GSM base station, which is readily available
on the market. Through our analysis we discovered
vulnerabilities in the feature phone platforms of all
major manufacturers. Using these vulnerabilities we
designed attacks against end-users as well as mobile
operators. The threat is serious since the attacks can
be used to prohibit communication on a large scale
and can be carried out from anywhere in the world.
Through further analysis we determined that such
attacks are ampliﬁed by certain conﬁgurations of the
mobile network. We conclude our research by providing
a set of countermeasures.
1 Introduction
In recent years a lot of effort has been put into analyz-
ing and attacking smartphones [18, 20, 24, 21, 22, 23,
46, 45], neglecting the so-called feature phones. Feature
phones, mobile phones that have advanced capabilities
besides voice calling and text messaging, but are not con-
sidered smartphones, make up the largest percentage of
mobile devices currently deployed on mobile networks
around the world. In comparison, smartphones only ac-
count for about 16% of all mobile phones [43]. The lack
of security research into the far more popular feature
phones is explained by the fact that smartphones share
much commonality with desktop computers, and, there-
fore are easier to analyze. Researches are able to use the
same or similar tools that they are already familiar with
on desktop computers. Feature phones on the other hand
are highly embedded systems that are closed to develop-
ers. This results in billions (there are about 4.6 billion
mobile phone subscribers [43, 16]) of potentially vulner-
able mobile devices out in the ﬁeld, just waiting to be
taken advantage of by a knowledgeable attacker.
In this paper, we investigate the security of feature
phones and the possibility for large scale attacks based on
discovered vulnerabilities in these devices. We present a
novel approach to the vulnerability analysis of feature
phones, more speciﬁcally for their SMS client imple-
mentations. SMS is interesting because it is the feature
that exists on every mobile phone. Furthermore, security
issues related to SMS messaging can be exploited from
almost anywhere in the world, and, thus present the ideal
attack vector against such devices. To the best of our
knowledge, no attempt has been made before to analyze
or test feature phones for security vulnerabilities.
Analyzing feature phones is difﬁcult for several rea-
sons. First of all, feature phones are completely closed
devices that do not allow for development of native appli-
cations and do not provide debugging tools. Moreover,
analyzing the part of the phone that interacts with the
mobile phone network is hard since the mobile phone
network between us and the target device is essentially
a black box. As a consequence, analysis becomes time
consuming, unreliable, and costly.
We address these problems by building our own GSM
network using equipment that can be bought on the mar-
ket. We use this network not only for sending SMS mes-
sages to the phones we analyze, but also as an advanced
monitoring system. The monitoring system replaces our
need for debuggers and other tools that are normally re-
quired for thorough vulnerability analysis, but do not ex-
ist for feature phones.
Vulnerability analysis was conducted using fuzzing.
We chose fuzzing as the testing technique because we
did not have access to source code and reverse engineer-
ing a large number of devices is not feasible. Addition-
ally, fuzzing proved to be very efﬁcient since this allowed
us to analyze a large amount of mobile handsets with the
same set of tests.
So far, we have found numerous vulnerabilities in fea-
ture phones sold by the six market leading mobile phone
manufacturers. The vulnerabilities are security critical
as they can remotely crash and reboot the entire target
phone. In the process the mobile phone is disconnected
from the mobile network, interrupting any active calls
and data connections. Such bugs and attacks have ex-
isted before on the Internet, known as Ping-of-Death [6].
We believe this represents a serious threat to mobile tele-
phony world wide.
To complete our research we further analyzed the
effect of such attacks on the mobile phone core network.
This resulted in two interesting ﬁndings.
the
mobile phone network can be abused to amplify our
Denial-of-Service attacks. Second, by attacking mobile
phones one can attack the mobile phone network itself.
First,
The main contributions of this paper are:
• Vulnerability Analysis Framework for Feature
Phones: We introduce a novel method to conduct
vulnerability analysis of feature phones that is based
on a small GSM base transceiver station. We solve
the major issue of such analysis:
the monitoring
for crashes and other unexpected behavior. We
present multiple solutions for monitoring such de-
vices while analyzing them. Our method further-
more shows that once a system, such as GSM, be-
comes partially open, the security of the entire sys-
tem, including the parts that are still closed, can be
analyzed and exploited.
• Bugs Present in Most Phones: We show that vul-
nerabilities exist in most mobile phones that are de-
ployed on mobile networks around the world today.
The bugs we discovered can be abused for carrying
out large scale Denial-of-Service attacks.
• Attack Impact: We show that a small number of
bugs in the most popular mobile phone brands is
enough to take down a signiﬁcant number of mobile
phones around the world. We further show that bugs
present in mobile phones can possibly be used to
attack the mobile phone network infrastructure.
The rest of this paper is structured in the following
way. In Section 2 we discuss related work and show how
our research extends previous work in this area. In Sec-
tion 3 we explain how we selected our targets for analy-
sis and resulting attacks. In Section 4 we show in great
detail how to analyze feature phones for security vulner-
abilities. In Section 5 we layout methods to use the vul-
nerabilities discovered for large scale attacks on mobile
communication. In Section 6 we present methods for de-
tecting and preventing the attacks we designed. In Sec-
tion 7 we brieﬂy conclude.
2 Related Work
Related work is separated into four parts. First, smart-
phone vulnerability analysis. Second, mobile and feature
phone bugs, which were all found purely by accident.
Third, studies on attacks against mobile phone networks.
Fourth, Denial-of-Service (DoS) attacks since we are go-
ing to present a large scale mobile phone DoS attack in
this paper.
The authors of [24] built a framework for security
analysis of Multimedia Messaging Service (MMS) im-
plementations on Windows Mobile based smartphones.
Similar research in [23] conducted vulnerability analy-
sis of Short Message Service (SMS) implementations of
smartphones. Both used traditional techniques such as
debuggers and analysis of crash dumps to catch excep-
tions generated during fuzzing.
Our work presented in this paper is different, as we do
not rely on debugging capabilities provided by the vari-
ous manufacturers, which mostly do not provide such ca-
pabilities at all. Instead we use a small GSM base station
to monitor and catch abnormal behavior of the phones
by monitoring and analyzing radio link activity. MMS-
based attacks that lead to battery exhaustion due to in-
creasing power consumption have been studied in [39].
They utilized the fact that MMS messages use more bat-
tery resources because of GPRS and increased CPU us-
age. However, we did not conduct this kind of analysis
since our focus was software bugs in SMS implementa-
tions.
Over the last few years a small number of bugs have
been discovered by individuals. Most of them have been
found by accident. To our knowledge no systematic test-
ing has been conducted. Some examples are: the Curse-
of-Silence [44] named bug for Symbian OS that prevents
a phone from further receiving any SMS after receiving
the curse SMS message. The WAP-Push vCard bug on
Sony Ericsson phones [33] that caused a target phone to
reboot. Some Nokia phones [34] contained a bug that
could be abused to remotely crash a phone by sending it
a specially crafted vCard via SMS. Some mobile phones
produced by Siemens contained a bug [17] that would
shutdown the phone when displaying an SMS message
that contained a special character. Bugs like these fuelled
our research effort since we believed that most phones
contain similar bugs. A large number of similar issues
in an exploit arsenal can likely be used to carry out at-
tacks against a bigger percentage of mobile phone users
around the world.
Enck et al. show in [47] that SMS messages sent over
2
the Internet can be used to carry out a Denial-of-Service
attack against mobile phone networks. The attack fo-
cused on blocking the mobile network’s control chan-
nels, therefore, no more calls could be initiated. Solu-
tions against this type of resource consumption attack
are investigated in [37]. However our attacks, described
in this paper, are not based on attacking the radio link
(the control channel) in any way. We attack the hand-
sets directly without targeting the control channel. A
study on the capabilities of mobile phone botnets [36]
shows that these could be used to carry out DoS attacks
against a mobile network. The attack works by over-
loading the Home Location Register (HLR) by trigger-
ing large amounts of state changes by zombie phones.
However, in this paper we show that one can achieve a
similar kind of DoS attack against an operators network
by disconnecting large amounts of mobile phones from
the network. The difference to the botnet approach is that
we do not need to have control over the zombie phones in
the ﬁrst place. We can remotely force them to reboot and
disconnect and re-authenticate to the network and thus
cause a higher load on the network core infrastructure.
Denial-of-Service attacks such as the one presented in
this work have been studied in a wide area. Attacks rang-
ing from the Web to DNS [38]. More interesting in our
context are attacks that disable real-world systems and
processes such as emergency services [29] (although just
as a side effect) or even postal services [40].
Essentially the work presented in this paper is differ-
ent in many aspects. We focus on feature phones because
feature phones are much more popular than smartphones.
Therefore, attacks against feature phones have a larger
global impact. In this work we present a security testing
framework for analyzing SMS implementations of any
kind of mobile phone. We used this framework to ana-
lyze feature phones of the most popular manufacturers in
the world, as shown in Section 3. We also performed this
type of analysis because it has not been done in the past,
even though these devices are widely deployed.
3 Target Selection
To achieve maximum impact with an attack, it makes
sense to target the most popular devices. We deter-
mined that feature phones are the dominant type of mo-
bile phones. They account for 83% of the U.S. mobile
market [10], smartphones in comparison just make for
16% of all mobile phones world wide [43]. We acknowl-
edge that today smartphone sales are rising very fast, but
feature phones still dominate when it comes to deployed
devices in the ﬁeld.
Most of the deﬁnitions of the term feature phone are
a bit fuzzy. A loose deﬁnition of the term is: every mo-
bile phone that is neither a dumb phone nor a smartphone
is considered a feature phone. Dumb phones are phones
with minimal functionality, often they only support voice
calls and sending SMS messages, just basic functional-
ity. Feature phones have less functionality than smart-
phones but still more than dumb phones. Feature phones
have proprietary operating systems (ﬁrmware) and have
additional features (thus the term feature) such as play-
ing music, surﬁng the web, and running simple applica-
tions (mostly J2ME [41]). Despite this lack of function-
ality (compared to smartphones) they are quite popular
because they are cheap and offer long battery life.
Technically interesting is the fact that feature phones
are based on a single processor that implements the base-
band, the applications, and user interface. Smartphones
usually have a dedicated processor for the baseband. The
consequence of this is that a simple bug on a feature
phone may bring down the complete system.
Mobile phones are produced by many different manu-
facturers that all have their own OS, therefore, targeting
a single one of them will not result in global effect. Since
we can not simply target all mobile phone platforms we
have to select the few ones that have enough market share
to be of global relevance.
To determine the major mobile phone manufacturers
we analyzed various market reports: World wide [42]
and European [31] market share. Market shares in the
United States [28] and in Germany [27]. In the Appendix
of this paper we include a table containing the raw num-
bers we gathered from the various market reports.
Through this analysis we got a clear picture about the
top manufacturers. These are Nokia, Samsung, LG,
Sony Ericsson, and Motorola. We further chose
to add Micromax [4] to the list of interesting mobile
phone manufacturers because we read [9] that they are
the third most popular brand of mobile phones in India.
4 Security Analysis of Feature Phones
Analyzing feature phones for security vulnerabilities is
hard for several reasons. There is no access to source
code of the OS and applications. There are no exist-
ing native-SDKs, therefore, there is no way to run native
code on the device and further no access to a debugger.
JTAG-based debugging is also no option since not all de-
vices have JTAG enabled. Furthermore, deeper knowl-
edge of the hardware and software is required in order to
use JTAG debugging in a meaningful way.
Because of these reasons we choose to conduct fuzz-
based testing. The testing is carried out on our own GSM
network. In order to monitor for misbehavior, crashes,
and to ﬁnd the related bugs, we designed our own mon-
itoring system. Throughout this section we will ﬁrst de-
scribe the setup of our GSM network. Followed by the
way we send SMS messages in this setup. Then we will
3
describe our novel monitoring setup. The ﬁnal part of the
section will discuss test cases and the resulting bugs that
were discovered throughout this work.
4.1 Network Setup
Since we want to send large amounts of SMS messages
we decided to build our own GSM network rather than
sending SMS messages over a real network. On the one
hand this has the advantage of not costing any money
and on the other hand we do not risk to interfere with the
telecommunication networks. We want to avoid crash-
ing the operator’s network equipment by either content
or quantity of SMS messages. Having our own network
assures reproducible results because we have control of
the entire system and are able to quickly ﬁnd parameters
that cause unexpected results. Analysis over a real oper-
ator network would only leave us with the possibility of
guessing in many cases. In addition, the delivery of SMS
messages is much faster on our small network compared
to a production setup of a mobile operator.
On the hardware side we decided to use an ip.access
nanoBTS [32], which is a small, fairly cheap (about 3500
Euro) GSM Base Transceiver Station (BTS) that pro-
vides an A-bis over IP interface. The A-bis interface
is used to communicate between the BTS and the Base
Station Controller (BSC). The BSC part of our setup is
driven by OpenBSC [30]. OpenBSC is a Free Software
implementation of the A-bis protocol that implements
a minimal version of the BSC, Mobile Switching Cen-
ter (MSC), Home Location Register (HLR), Authenti-
cation Center (AuC) and Short Message Service Center
(SMSC) components of a GSM network. Figure 1 shows
a picture of our setup.
Figure 1: Our setup: A laptop that runs OpenBSC and
the fuzzing tools, the nanoBTS, and some of the phones
we analyzed.
As GSM operates on a licensed frequency spectrum
we had to carry out our experiments in an Faraday cage.
Utilizing this setup we are able to send SMS mes-
sages to a mobile phone. OpenBSC allows us to either
send a text message from its telnet interface to a sub-
4
scriber of our choice or it processes an SMS message
that it received Over-the-Air in a store and forward fash-