HostDeviceGetDeviceDescriptors ResetDevice/AssignAddress GetConﬁgDescriptors GetInterfaceDescriptors Load Drivers USB Communications DeviceHostBus InterfaceOperatingSystemClientBus InterfaceFirmwareFunctionPhysical LayerTransport LayerApplication LayerHuman Layerdocumented 400 different companies; they found that these
companies have lost more than $2.5 million per company
because of misplaced USB drives [75]. Later in 2011, an
Australian defense aide lost top secret documents stored on
a USB drive in transit through Kuwait [37]. Humans are error
prone, and even honest parties can make mistakes that can
heavily cost companies and even countries.
Edward Snowden used a USB drive, for which exit re-
strictions were lax, to siphon top-secret NSA data from his
Hawaii base [9]. Similarly, Reality Leigh Winner, another
NSA contractor, allegedly placed a USB drive into a classiﬁed
computer system [46] with the goal of exﬁltrating sensitive
data, according to a court document [120]. These are only a
few cases that we as a security community know of—it is
possible and highly probable that USB storage has been used
to conduct similar attacks in many different scenarios.
The ubiquity and portability of USB devices are both a
challenge and an opportunity. On the one hand, their ease of
use greatly aids consumers and companies in day to day tasks.
On the other, USB devices are the currently de facto method
of bypassing technical and personal security precautions and
can lead to large, detrimental effects to organizations.
B. Abuse of Application Layer
Application layer attacks involve user-space processes on
the host and their interactions with the functionality of a
device. Attacks in this layer typically fall into two categories:
code injection attacks, where the attacker injects malicious
code into the host, and data exﬁltration attacks, in which the
device accesses data from the host without authorization.
1) Code Injection: USB storage devices have been used
to inject malware to a host by several high-proﬁle attacks.
Stuxnet [44], [31] allegedly attacked nuclear centrifuge equip-
ment in an airgapped environment; it propagated infection via
USB storage drives. Duqu [112] used a user-mode rootkit
to hide malicious ﬁles on the USB storage device. Con-
ﬁcker [106], [45], [94] and Flame [134], [135], [130] used
zero-day exploits and malicious autorun.inf ﬁles to au-
tomatically execute malware when a storage device was con-
nected to the host. Although the auto-run feature was restricted
after it became one of the top threats for the Windows
platform [79], similar functionality remains available due to
bugs in the operating system [71].
2) Data Exﬁltration: Since the USB device often does
not authenticate the communicating application on the host,
the device may send or receive sensitive data to or from an
unintended application. This is particularly problematic for
sensing devices that can be used to perform surveillance on an
unsuspecting user. For example, webcams have been leveraged
by both government agencies [87] and malware [28], [101] to
obtain information about the computer’s user and environment.
In the case of malware, the attackers can then demand a
ransom payment from the user. Web pages may request
that a vulnerable browser enable the microphone without the
user’s permission, allowing the site to capture audio from the
system [113]. Portnoff et al. found that less than half of people
noticed that their webcam indicator light illuminated during
computer-based tasks [95]. Attacks such as USBee [49], do
not provide any indicator visible to the user. USBee permits
the exﬁltration of data from the host system by turning any
USB device connected with the machine into a RF transmitter.
Similarly, an exploit of the Linux resource manager [30]
allows arbitrary users to bypass system restrictions and access
any USB devices on the system.
C. Abuse of Transport Layer
Attacks on the USB transport layer fall into two general cat-
egories: those that perform masquerading through additional
interfaces and those that send maliciously crafted packets/mes-
sages to compromise the host operating system.
1) Protocol Masquerading: These devices provide addi-
tional, obscured interfaces to the host operating system, taking
advantage of the permissive trust model in USB whereby the
host host fully trusts any connected device. When a device
such as the Rubber Ducky [50], [51] or USBdriveby [65]
connects to the host system, all of its interfaces – some of
which are intentionally concealed from the user – are enumer-
ated. Hidden functionality can be implemented as additional
circuitry into an otherwise innocuous device such as a network
adapter in an audio headset. TURNIPSCHOOL [4], adoption
of NSA CottonMouth [5], [6] is a modiﬁed USB cable that
contains an RF transmitter in the plastic around the connector.
When the device is connected to a host, the transmitter is
enumerated along with the user’s expected interfaces. Soft-
ware running on the host can then exﬁltrate data or receive
commands via the RF interface. Identifying and mitigating
these additional interfaces has traditionally been difﬁcult as
an adversary can simply reprogram any USB descriptive data
(e.g., VID and PID) to evade device whitelisting or blacklisting
rules in the operating system. Furthermore, mitigation is
complicated by the legitimate use of composite devices such
as audio headsets with both input and output.
Devices do not have to be equipped with new hardware
components to be malicious. The lack of authentication for
ﬁrmware in USB devices allows attackers to overwrite the
ﬁrmware with malicious code [14]. Devices infected with
BadUSB [85], where attackers re-ﬂash the ﬁrmware to add
more functionalities, for example, can present malicious inter-
faces as simple as a HID interface or as complex as a network
adapter on a USB thumb drive. iSeeYou [24] modiﬁes a we-
bcam’s ﬁrmware to disable the indicator light. Psychson [27]
modiﬁes the ﬁrmware of a USB storage device by adding
a keyboard functionality, which can run the malicious script
automatically. These attacks are invisible to the user and the
resulting modiﬁed device can be moved between hosts, leaving
a number of host machines exploited.
2) Protocol Corruption: The host’s USB software stack
generally expects devices to conform to the USB standard.
Fuzzing techniques using FaceDancer [47], [103], [63] and
debuggers [15] have led to the discovery of a number of
kernel-mode arbitrary code execution vulnerabilities, e.g., in
the Windows USB drivers [1], [2], [3], FreeBSD [23], Linux
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1035
4
kernel USB subsystem [10], [99], [20], and other operating
systems [38]. In 2017, the syzkaller syscall fuzzer also found
more than 40 bugs in Linux kernel USB drivers [48]. In some
cases, exploitation of these vulnerabilities can occur during the
host’s device enumeration, making the physical connection of
the device the only barrier to compromise. Man-in-the-middle
devices such as embedded systems running USBProxy [41]
can manipulate legitimate protocol
trafﬁc from devices to
inject malicious content.
D. Abuse of Physical Layer
Physical layer attacks consist of attacks against conﬁdential-
ity and integrity in the communication across the USB bus.
In this context, signal refers to activities that occur over the
USB bus.
1) Signal Eavesdropping: In signal eavesdropping attacks,
sensitive data is recovered through physical observation of
messages moving between the host and peripheral. Keyloggers
are miniature,
inconspicuous shim devices that are placed
between the host port and peripheral
to record keystroke
packets, e.g., KeyGrabber [67]. In Shah et al.’s JitterBug [104],
a single trip keylogging attack that exﬁltrates keystrokes
from the target over a timing-based network side channel.
Neugschwandtner et al. demonstrate that, prior to USB 3.0, a
malicious peripheral can eavesdrop on the downstream trafﬁc
of all connected devices [82]. USB snooping [110] attacks
leverage current leakage on the power line of the USB bus
to infer the USB data trafﬁc. There have also been in-the-
wild appearances of malicious USB peripherals and cables that
use network connectivity to eavesdrop and exﬁltrate sensitive
messages, such as CottonMouth [5], [6] and GPS locator [77],
[11]. Of particular concern is that many hosts contain internal
USB hubs which are often reprogrammable [84], allowing
for a persistent bus eavesdropping compromise via ﬁrmware
rewriting regardless of BIOS or UEFI integrity defenses.
A variety of ﬁngerprinting attacks have also been demon-
strated in which low layer messages are shown to leak signiﬁ-
cant information about host characteristics. Wang and Stavrou
demonstrate that USB Request Blocks leak information about
the host operating system [132], which can be used by a
malicious smartphone to compose a targeted malware payload.
Davis observes that variations in the implementation of USB
enumeration can be used to identify the operating system,
e.g., Windows 8 is the only common operating system to
issue 3 GetConfiguration descriptor requests [39]. A
more resilient approach to host ﬁngerprinting relies on timing
side channels (e.g., inter-packet gaps) to infer host machine
characteristics. Letaw et al. [72] employ a USB protocol
analyzer [43] to extract timing features of bus states and use
machine learning classiﬁcation to infer the operating system
of the host. Bates et al. present a timing-based ﬁngerprinting
scheme that can be launched from a commodity smart phone.
They show that speciﬁc operating system versions and model
numbers can be inferred with upwards of 90% accuracy,
that
inter-packet gaps can be used by devices to detect
the presence of virtualized environments [16]. While timing-
based ﬁngerprinting signiﬁcantly raises the bar for evasion, it
seems likely that resource-rich hosts could modify their timing
characteristics to evade detection, although this has not been
demonstrated in the literature. Besides timing, power analysis
and EM side-channel [108], [89] are also used, e.g., to extract
secret information from USB devices.
2) Signal Injection: Analog signals are used to convey sen-
sitive data, leaking information to the outside of the machine,
where an adversary is able to receive the signal, decode it,
and recover the sensitive data. Unlike USB bus eavesdropping
mentioned above, USBee [49] does not require any speciﬁc
devices or cables to leak the data from the host machine.
Instead, it uses connected USB devices as an RF transmitter
to emit electromagnetic emissions that encode sensitive data,
by “injecting” the data into USB devices available on the bus.
Where there is no “victim” RF transmitter available on the
laptop, the adversary can touch the exposed metal part of the
machine with a plain wire.
The ability to inject analog power has also been used to
cause physical damage to the host machine. USB Killer (and
USB Kill 2.0) [127] embeds a number of capacitors on the
two sides of the PCB board of the USB key. Once connected
with the host machine, USB Killer draws the power from the
host USB bus, charging the capacitors. Once fully charged, a
negative 200VDC is discharged over the USB data lines of the
host machine. This charge/discharge cycle keeps going until
the USB Killer is removed or the host machine is damaged. In
newer releases of USB Power Delivery and Type-C connector
standards, device are able to draw and transmit so much power,
e.g., up to 100W, that they can irreparably damage the host.
The use of poor quality USB Type-C cables have already led
to circumstances that inadvertently resemble this attack. For
example, a cable has damaged a Pixel book and two USB
PD analyzers, because the GND and Vbus were mis-wired
between a Type-A plug and a Type-C plug [18].
USB ATTACK VECTOR SUMMARY
Based on this examination of attacks, we identify several
offensive primitives that are leveraged in USB-based attacks.
Note that we exclude DMA attacks from USB devices, which
are an example of I/O attacks against host machines and
peer devices [100], [136]. Table I provides a mapping of
notable attacks surveyed above to their respective layers and
primitives. We report the following ﬁndings:
F1. Trust by Default: Across all communications layers,
a common characteristic of attacks is that they abuse the
trust-by-default assumption that pervades the USB ecosystem.
This trust model is inextricably linked to the “Plug & Play”
philosophy that led to USB’s ubiquity, making popular the
notion that peripherals should work instantly upon connection
without any additional conﬁguration. Violations at the human
layer are the result of misplaced trust in the intentions of
devices and other humans. Within the application layer, host
machines blindly trust the integrity of the contents of portable
media and devices assume that all transactions emanate from
a trustworthy agent. At the transport layer, USB protocols
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1036
5
Layer
Human Layer
Application Layer
Transport Layer
Physical Layer
Offensive Primitive
Outsider Threats
Insider Threats
Code Injection
Data Extraction
Protocol Masquerading
Protocol Corruption
Signal Eavesdropping
Signal Injection
Attack
Social Engineering USB [109], U.S. Government [91], USB Attack Vector [60], Users Really Do [119]
Ponemon Study [75], Australian Defense Loss [37], Manning Inﬁltration [68], Snowden Documents [9]
Brain [56], Stuxnet [31], Conﬁcker [106], Flame [134], User-mode rootkit [112]
Webcam Extraction [87], [28], Audio Extraction [113], USBee [49], TURNIPSCHOOL [4]
Rubber Ducky [50], USBdriveby [65], TURNIPSCHOOL [4], USB Bypassing Tool [14], BadUSB [85], iSeeYou [24]
FaceDancer [47], Syzkaller [48]
Smart Phone USB Connectivity [132], USB Stack Interaction Intelligence [39], Power/EM Side-channels [108], [89], BadUSB Hubs [84],
USB Fingerprinting [72], [16], USB Eavesdropping [82], USB Snoop [110], CottonMouth [5], [6], USB GPS locator [77], [11]
USBKiller [127], Cable Quality [18], USBee [49], TURNIPSCHOOL [4]
Table I: Notable real-world attacks on the peripheral ecosystem, grouped by the layer at which they operate and the offensive
primitive of which they are an instance.
assume that kernel drivers will only be requested for legitimate
purposes. Finally, at the physical layer, USB host controllers
supporting the USB 1.x and 2.x protocols broadcast messages
downstream assuming that they would only be read by the
recipient.
Unfortunately, trust-by-default is not strictly a legacy prob-
lem. As recently as late 2014, the USB-IF stated that “con-
sumers should always ensure their devices are from a trusted
source and that only trusted source interact with their de-
vices” [123]. The assertion that the consumer is responsible for
the integrity of the USB interaction is problematic; consumers
have no means of establishing the identity or provenance of a
device, making it impossible to determine if it originates from
a trusted chain of custody.
F2. Attacks Transcend Layers: Attacks that exploit hosts
or exﬁltrate data from them appear to demonstrate correct
operation to the layer they are communicating with. For
example, attacks such as USBee allow the passing of messages
that look for all intents and purposes like legitimate trafﬁc, or
at least trafﬁc that is allowable within the USB standard, while
the actual exﬁltration is a physical layer activity based on RF
or GSM emanations. Similarly, attacks such as BadUSB and
TURNIPSCHOOL do not subvert the USB protocol itself, but
rather exploit its inherent openness to augment functionality
that users would not think to look for. The consequence of this
is that solutions that simply consider one particular segment
of USB activity without adopting a more holistic approach to
the entire USB stack will be incomplete and susceptible to
cross-layer attacks.
IV. SECURING USB
Defenses are organized based on the layer that attacks target,
not on the layer of the system that they modify to provide
the defense. For example, on-device encryption is a low-
layer solution to defending against a human-layer problem
(data loss). In some cases, individual systems feature defen-
sive mechanisms for multiple operational layers; we discuss
these in multiple subsections below. As mentioned earlier,
the derived defensive primitives describe both the mechanism
employed as well as the security properties guaranteed.
A. Defense of Human Layer