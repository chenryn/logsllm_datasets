addresses and hosts rises with every
run.
Fig. 4. Distribution of the geolocation
of the detected IP addresses.
cases where we fail to do so, the malware tries to dynamically link to a custom
library, which are not publicly available. Furthermore, these malware binaries
are usually obfuscated, so faking the libraries is not straightforward.
B. Extracting useful information: 203 botnet IP addresses/hosts. We
highlight initial elements of the information that we can extract with our app-
roach. Overall, we ﬁnd that RARE ﬁnds 203 malicious entities, IP addresses and
host names, which are used used by the malware for botnet communications.
Static analysis: 48 addresses and hosts. Using static analysis, we traversed
the CFG for all the paths from binary’s Entry Point to system call connect
and traced the input arguments values. We were able to extract 22 unique IP
addresses and 26 host names.
RARE dynamic analysis: 155 addresses and hosts. Using RARE’s con-
secutive runs, we extracted an additional 155 IP addresses and hosts. As shown
in Fig. 3 with every run the number of extracted IP addresses and hosts rises
until the 6th run after which no new IP or hosts are detected.
The dynamic analysis ﬁnds 75% of the malicious entities. The corollary
of the observations above is that the dynamic analysis is essential in detecting
malicious entities of botnet communication. Using just static analysis, we ﬁnd
less than 25% of these C&C communication addresses and domain names. The
issue is that the malware often obfuscates the addresses and the domain names,
by using hexadecimal numbers and using number transformation and encryption
techniques. For example, one binary has the following address generation app-
roach: a hardcoded hexadecimal base value, and a function that adds decimals
values to this base to obtain a series of IP addresses.
What is the geographical distribution of these malicious Internet entities? In
Fig. 4, we do a reverse look up to identify the geolocation of the IP addresses,
and we observe that China (64.3%) and United States (18.7%) are the top des-
tinations for hosting C&C servers. Many times these botnet entities could be
compromised machines. In Fig. 3, we plot the number of malicious IP addresses
RARE: A Systematic Augmented Router Emulation for Malware Analysis
69
extracted at each run of RARE. Initially, more information is extracted with
each run, but this stops by the sixth or seventh execution for most binaries. In
future work we intend to study the uniqueness and timeliness of the IP addresses
that we ﬁnd compare to well known blacklists.
Fig. 5. The number of system calls of
a benign and two infected routers for
the last 1200 s of the execution. The
infected routers have consistently 1.5
times more system calls.
Fig. 6. The number of active processes
of a benign and two infected routers
for our 1300 s experiment.
Initially,
the malware spawns child processes to
make itself persistent.
C. Proﬁling infected router behavior. Our approach gives us the ability
to compare the behavior of non-infected and infected router with a rich set of
information at both the network and OS layers.
In all malware, we observe an increase in the number of system calls of almost
50% or more in an infected router compared to a benign one. Figure 1 shows a
comparison of the number of system calls between infected router using the
baseline, and the diﬀerent RARE executions (numbers 1 to 8). This particular
malware binary, reaches the activation stage at the third run. On the fourth run,
we impersonate the C&C and we start issuing commands to the malware.
To better understand the malware, we show the number of system calls over
time for two infected routers compared to a benign one in Fig. 5. For visual
clarity, we show only 1200 s of the execution to avoid the huge initial spike,
which corresponds typically to the reconnaissance of each malware. However,
we do show the initial spike in the number of processes of an infected router in
Fig. 6: the malware makes itself persistent by spawning child processes.
Discussion: Becoming the botmaster. Using RARE we identify the func-
tions available on two of the malware binaries from MIPS LE and MIPS BE.
This was achieved by combining the static analysis and proﬁling information
after the execution. We were able to convince the malware that we are the bot-
master, and we were able to have it do: (1) HTTP ﬂooding, (2) reverse shell,
and (3) kill processes based on their process ID.
70
A. Darki et al.
4 Related Work
We brieﬂy review related work due to space limitations.
Emulation techniques: Several emulation techniques and tools exist, but they
mostly focus on PC and Android platforms: Anubis [4], PANDA [12], DECAF [17].
The approach is to simulate the target platform and apply monitoring tools
to record the execution traces of the malware. PC and Android platforms and
malware diﬀer signiﬁcantly from router-speciﬁc ones, which is our focus here.
Vulnerability detection in embedded systems: Several recent studies focus
on detecting vulnerabilities in the ﬁrmware of embedded devices [6,10]. Chen
et al. [6] argue that emulating platforms for speciﬁc ﬁrmware is not a trivial
task since it includes emulating hardware components designed by vendors who
do not necessarily practice a global Hardware/Software design standard. Other
approaches [28] use real hardware to overcome this diﬃculty, but introduce the
high cost and overhead. In our case, with thousands of router conﬁgurations,
this approach would be very expensive and time consuming.
PC and smartphone malware studies: Many studies propose malware anal-
ysis tools using static or dynamic analysis. In static analysis, several studies
focus on Control Flow Graphs characteristics [9,19]. Static analysis on binary
code requires platform speciﬁc tools, so PC-based or smartphone bases tools do
not work for ARM and MIPs platforms. A limitation of the static analysis is that
it does not work for obfuscated malware [23]. Several studies use dynamic analy-
sis to classify and distinguish between diﬀerent families of malware by studying
the operation at the OS level [15,20,22]. In the PC and smartphone space, get-
ting the malware to activate is an easier task given the more limited diversity in
these platforms.
5 Conclusion
We propose, RARE, a comprehensive approach to analyze router malware. The
key novelty is the augmented operation of our approach: instead of trying to
guess the right router platform for each malware, we start with a generic one
and we iteratively “adapt” it to fool the malware.
Our system provide the following key capabilities: (a) perform static analysis
on the malware, (b) instantiate an emulated router, (c) inject malware into the
router and fool it to activate, (d) replay arbitrary network traﬃc, and (e) proﬁle
the malware behavior. Using real router malware, we are able to show that:
(a) our system works eﬀectively and manages to activate 94% of all our binaries,
and (b) we can extract useful and insightful information from the execution of
the malware. First, we ﬁnd that we can identify malicious IP addresses and
domain names, which subsequently could be investigated and blocked in ﬁrewall
ﬁlters. Second, we identify tell-tale signs of an infected router operation, such as
50% increase of the system calls.
Our approach is a solid ﬁrst step towards developing a key capability for an
under-served segment of devices. Although the results are already promising,
RARE: A Systematic Augmented Router Emulation for Malware Analysis
71
we plan on expanding the capabilities signiﬁcantly in two diﬀerent dimensions.
First, we will develop a more extensive static analysis capability, where we could
infer the structure and key operations of the malware code. Second, we will
further explore how to fully interact, and ultimately control both a bot, but
ultimately a C&C server.
References
1. Openwrt embedded devices linux. https://openwrt.org/. Accessed 22 Sep 2017
2. Antonakakis, M., et al.: Understanding the Mirai botnet. In: 26th USENIX Security
Symposium (USENIX Security 2017) (2017)
3. Appneta: Tcpreplay (2016). http://tcpreplay.appneta.com/
4. Bayer, U., et al.: Dynamic analysis of malicious code. J. Comput. Virol. 2(1), 67–77
(2006)
5. Bellard, F.: QEMU, a fast and portable dynamic translator. In: USENIX,
FREENIX Track (2005)
6. Chen, D.D., Woo, M., Brumley, D., Egele, M.: Towards automated dynamic anal-
ysis for linux-based embedded ﬁrmware. In: NDSS (2016)
7. Cho, K., Mitsuya, K., Kato, A.: Traﬃc data repository maintained by the MAWI
working group of the wide project (2005). http://mawi.wide.ad.jp/mawi
8. Cho, K., et al.: Traﬃc data repository at the wide project. In: USENIX, ATEC
(2000)
9. Christodorescu, M., Jha, S.: Static analysis of executables to detect malicious pat-
terns. Technical report, Wisconsin Univ-Madison Department of Computer Sci-
ences (2006)
10. Costin, A., et al.: Automated dynamic ﬁrmware analysis at scale: a case study on
embedded web interfaces. In: Asia CCS (2016)
11. Costin, A., Zaddach, J., Francillon, A., Balzarotti, D., Antipolis, S.: A large-scale
analysis of the security of embedded ﬁrmwares. In: USENIX Security (2014)
12. Dolan-Gavitt, B., et al.: Tappan zee (north) bridge: mining memory accesses for
introspection. In: ACM SIGSAC CCS. ACM (2013)
13. Enck, W., et al.: Taintdroid: an information-ﬂow tracking system for realtime pri-
vacy monitoring on smartphones. ACM TOCS 32, 5 (2014)
14. Feng, Q., et al.: Scalable graph-based bug search for ﬁrmware images. In: ACM
SIGSAC CCS (2016)
15. Gasparis, I., Qian, Z., Song, C., Krishnamurthy, S.V.: Detecting android root
exploits by learning from root providers. In: USENIX Security (2017)
16. Hampton, N., et al.: A survey and method for analysing soho router ﬁrmware
currency. In: Australian Information Security Management Conference (2015)
17. Henderson, A., et al.: Make it work, make it right, make it fast: building a platform-
neutral whole-system dynamic binary analysis platform. In: ACM STA (2014)
18. Hex-Rays: IDA pro disassembler (2008)
19. Kinable, J., Kostakis, O.: Malware classiﬁcation based on call graph clustering. J.
Comput. Virol. 7, 233–245 (2011)
20. Kolbitsch, C., et al.: Eﬀective and eﬃcient malware detection at the end host. In:
USENIX Security Symposium (2009)
21. Kolbitsch, C., Holz, T., Kruegel, C., Kirda, E.: Inspector gadget: automated extrac-
tion of proprietary gadgets from malware binaries. In: IEEE S&P (2010)
72
A. Darki et al.
22. Lanzi, A., et al.: Accessminer: using system-centric models for malware protection.
In: ACM CCS (2010)
23. Moser, A., et al.: Limits of static analysis for malware detection. In: IEEE ACSAC
(2007)
24. Papp, D., et al.: Embedded systems security: threats, vulnerabilities, and attack
taxonomy. In: IEEE PST (2015)
25. Paquet-Clouston, M., et al.: Can we trust social media data?: Social network
manipulation by an IoT botnet. In: ACM Conference on Social Media & Soci-
ety (2017)
26. Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z.,
Newsome, J., Poosankam, P., Saxena, P.: BitBlaze: a new approach to computer
security via binary analysis. In: Sekar, R., Pujari, A.K. (eds.) ICISS 2008. LNCS,
vol. 5352, pp. 1–25. Springer, Heidelberg (2008). https://doi.org/10.1007/978-3-
540-89862-7 1
27. Tam, K., et al.: Copperdroid: automatic reconstruction of android malware behav-
iors. In: NDSS (2015)
28. Zaddach, J., Bruno, L., Francillon, A., Balzarotti, D.: Avatar: a framework to sup-
port dynamic security analysis of embedded systems’ ﬁrmwares. In: NDSS (2014)