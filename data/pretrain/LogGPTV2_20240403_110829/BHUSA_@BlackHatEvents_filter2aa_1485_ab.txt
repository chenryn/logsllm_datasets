APPLE80211_IOC_UNKNOWN (NULL/No corresponding handler)  0x166
#define APPLE80211_IOC_HW_ADDR                                  0x167
#define APPLE80211_IOC_SCAN_CONTROL                             0x168
APPLE80211_IOC_UNKNOWN (NULL/No corresponding handler)  0x169
#define APPLE80211_IOC_CHIP_DIAGS                               0x16A
#define APPLE80211_IOC_USB_HOST_NOTIFICATION                    0x16B
#define APPLE80211_IOC_LOWLATENCY_STATISTICS                    0x16C
#define APPLE80211_IOC_DISPLAY_STATE                            0x16D
#define APPLE80211_IOC_NAN_OOB_AF_TX                            0x16E
#define APPLE80211_IOC_NAN_DATA_PATH_KEEP_ALIVE_IDENTIFIER      0x16F
#define APPLE80211_IOC_SET_MAC_ADDRESS                          0x170
#define APPLE80211_IOC_ASSOCIATE_EXTENDED_RESULT                0x171
#define APPLE80211_IOC_AWDL_AIRPLAY_STATISTICS                  0x172
#define APPLE80211_IOC_HP2P_CTRL                                0x173
#define APPLE80211_IOC_REQUEST_BSS_BLACKLIST                    0x174
#define APPLE80211_IOC_ASSOC_READY_STATUS                       0x175
#define APPLE80211_IOC_TXRX_CHAIN_INFO                          0x176
#BHUSA @BlackHatEvents
Information Classification: General
Conclusion
- About network interfaces and attack surfaces
- About static and dynamic analysis methods
- About creating tools
- About others
1. Pay attention to the tools provided in the macOS/iOS operating system.
2. We should make full use of the apple SDKs, and contribute to Wi-Fi developer 
community.
#BHUSA @BlackHatEvents
Information Classification: General
DEMO
Apple 80211 Wi-Fi subsystem fuzzing framework
on the latest macOS Ventura 13.0 Beta 4 (22A5311f)
#BHUSA @BlackHatEvents
Information Classification: General
Apple 80211 Wi-Fi Subsystem
Latest Zero-day Vulnerability Case Studies
#BHUSA @BlackHatEvents
Information Classification: General
Apple Product Security Follow-up IDs:
791541097 (CVE-2022-32837), 797421595 (CVE-2022-26761),
797590499 (CVE-2022-26762), OE089684257715 (CVE-2022-32860),
OE089692707433 (CVE-2022-32847), OE089712553931,
OE089712773100, OE0900967233115, OE0908765113017,
OE090916270706, etc.
Follow-up ID and CVE ID
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2020-9899:
AirPortBrcmNIC`AirPort_BrcmNIC::setROAM_PROFILE
Kernel Stack Overflow Vulnerability
About the security content of macOS Catalina 10.15.6,
Security Update 2020-004 Mojave,
Security Update 2020-004 High Sierra
https://support.apple.com/en-us/HT211289
#BHUSA @BlackHatEvents
Information Classification: General
Two years have passed, are there still such high-quality arbitrary (kernel) memory 
write vulnerabilities?
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2022-32847:
AirPort_BrcmNIC::setup_btc_select_profile
Kernel Stack Overwrite Vulnerability
About the security content of iOS 15.6 and iPadOS 15.6
https://support.apple.com/en-us/HT213346
About the security content of macOS Monterey 12.5
https://support.apple.com/en-us/HT213345
About the security content of macOS Big Sur 11.6.8
https://support.apple.com/en-us/HT213344
Yes, definitely
#BHUSA @BlackHatEvents
Information Classification: General
Process 1 stopped
* thread #1, stop reason = EXC_BAD_ACCESS (code=10, address=0xd1dd0000)
frame #0: 0xffffff8005a53fbb
->  0xffffff8005a53fbb: cmpl
$0x1, 0x18(%rbx,%rcx,4)
0xffffff8005a53fc0: cmovnel %esi, %edi
0xffffff8005a53fc3: orl
%edi, %edx
0xffffff8005a53fc5: incq
%rcx
Target 0: (kernel.kasan) stopped.
(lldb) register read 
General Purpose Registers:
rax = 0x00000000481b8d16
rbx = 0xffffffb0d1dcf3f4
rcx = 0x00000000000002fd
rbp = 0xffffffb0d1dcf3e0
rsp = 0xffffffb0d1dcf3c0
rip = 0xffffff8005a53fbb  AirPortBrcmNIC`AirPort_BrcmNIC::setup_btc_select_profile + 61
(lldb) bt
* thread #1, stop reason = signal SIGSTOP
* frame #0: 0xffffff8005a53fbb AirPortBrcmNIC`AirPort_BrcmNIC::setup_btc_select_profile + 61
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2020-10013:
AppleBCMWLANCoreDbg
Arbitrary Memory Write Vulnerability
About the security content of iOS 14.0 and iPadOS 14.0
https://support.apple.com/en-us/HT211850
About the security content of macOS Catalina 10.15.7,
Security Update 2020-005 High Sierra,
Security Update 2020-005 Mojave
https://support.apple.com/en-us/HT211849
#BHUSA @BlackHatEvents
Information Classification: General
kernel`bcopy:
->  0xffffff8000398082  : rep
0xffffff8000398083  : movsb
(%rsi), %es:(%rdi)
0xffffff8000398084  : retq
0xffffff8000398085  : addq
%rcx, %rdi
(lldb) register read rcx rsi rdi
General Purpose Registers:
rcx = 0x0000000000000023
rsi = 0xffffff81b1d5e000
rdi = 0xffffff80deadbeef
(lldb) bt
* thread #1, stop reason = signal SIGSTOP
* frame #0: 0xffffff8000398082 kernel`bcopy + 18
frame #1: 0xffffff800063abd4 kernel`memmove + 20
frame #2: 0xffffff7f828e1a64 AppleBCMWLANCore`AppleBCMWLANUserPrint + 260
frame #3: 0xffffff7f8292bab7 AppleBCMWLANCore`AppleBCMWLANCoreDbg::cmdSetScanIterationTimeout + 91
frame #4: 0xffffff7f82925949 AppleBCMWLANCore`AppleBCMWLANCoreDbg::dispatchCommand + 479
frame #5: 0xffffff7f828b37bd AppleBCMWLANCore::apple80211Request + 1319
#BHUSA @BlackHatEvents
Information Classification: General
1. CVE-2020-10013 is an arbitrary memory write vulnerability caused by boundary 
checking errors.
2. The value to be written is predictable or controllable.
3. Combined with kernel information disclosure vulnerabilities, a complete local 
EoP exploit chain can be formed. The write primitive is stable and does not require 
heap Feng Shui manipulation.
CVE-2020-9833 (p44-p49):
https://i.blackhat.com/USA-20/Thursday/us-20-Wang-Dive-into-Apple-IO80211FamilyV2.pdf
4. This vulnerability affects hundreds of AppleBCMWLANCoreDbg handlers!
Summary of case #3
#BHUSA @BlackHatEvents
Information Classification: General
Two years have passed, are there still such high-quality arbitrary (kernel) memory 
write vulnerabilities?
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2022-26762:
IO80211Family`getRxRate
Arbitrary Memory Write Vulnerability
About the security content of iOS 15.5 and iPadOS 15.5
https://support.apple.com/en-us/HT213258
About the security content of macOS Monterey 12.4
https://support.apple.com/en-us/HT213257
Yes, definitely
#BHUSA @BlackHatEvents
Information Classification: General
Process 1 stopped
* thread #1, stop reason = signal SIGSTOP
frame #0: 0xffffff8008b23ed7 IO80211Family`getRxRate + 166
IO80211Family`getRxRate:
->  0xffffff8008b23ed7 : movl
%eax, (%rbx)
0xffffff8008b23ed9 : xorl
%eax, %eax
0xffffff8008b23edb : movq
0xca256(%rip), %rcx
0xffffff8008b23ee2 : movq
(%rcx), %rcx
Target 2: (kernel) stopped.
(lldb) register read 
General Purpose Registers:
rax = 0x0000000000000258
rbx = 0xdeadbeefdeadcafe
rip = 0xffffff8008b23ed7  IO80211Family`getRxRate + 166
(lldb) bt
* thread #1, stop reason = signal SIGSTOP
* frame #0: 0xffffff8008b23ed7 IO80211Family`getRxRate + 166
frame #1: 0xffffff8008af9326 IO80211Family`IO80211Controller::_apple80211_ioctl_getLegacy + 70
frame #2: 0xffffff8008b14adc IO80211Family`IO80211SkywalkInterface::performGatedCommandIOCTL + 274
#BHUSA @BlackHatEvents
Information Classification: General
1. Compared with CVE-2020-10013, the root cause of CVE-2022-26762 is simpler: 
the vulnerable kernel function forgets to sanitize user-mode pointer. These simple 
and stable kernel Vulnerabilities are powerful, they are perfect for Pwn2Own.
2. The value to be written is fixed. The write primitive is stable and does not require 
heap Feng Shui manipulation.
3. Kernel vulnerabilities caused by copyin/copyout, copy_from_user/copy_to_user, 
ProbeForRead/ProbeForWrite are very common.
4. All inputs are potentially harmful.
Summary of case #4
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2022-32860 and CVE-2022-32837
Kernel Out-of-bounds Read and Write Vulnerability
About the security content of iOS 15.6 and iPadOS 15.6
https://support.apple.com/en-us/HT213346
About the security content of macOS Monterey 12.5
https://support.apple.com/en-us/HT213345
About the security content of macOS Big Sur 11.6.8
https://support.apple.com/en-us/HT213344
#BHUSA @BlackHatEvents
Information Classification: General
#BHUSA @BlackHatEvents
Information Classification: General
CVE-2022-26761:
IO80211AWDLPeerManager::updateBroadcastMI
Out-of-bounds Read and Write Vulnerability caused by Type Confusion
About the security content of macOS Monterey 12.4
https://support.apple.com/en-us/HT213257
About the security content of macOS Big Sur 11.6.6
https://support.apple.com/en-us/HT213256
#BHUSA @BlackHatEvents
Information Classification: General
Takeaways and The End
#BHUSA @BlackHatEvents
Information Classification: General
From the perspective of kernel development
1. Apple has made a lot of efforts, and the security of macOS/iOS has been 
significantly improved.
2. All inputs are potentially harmful, kernel developers should carefully check all 
input parameters.
3. New features always mean new attack surfaces.
4. Callback functions, especially those that support different architectures or working 
modes, and state machine, exception handling need to be carefully designed.
5. Corner cases matter.
#BHUSA @BlackHatEvents
Information Classification: General
From the perspective of vulnerability research
1. Arbitrary kernel memory write vulnerabilities represented by CVE-2022-26762 are 
powerful, they are simple and stable enough.
2. Combined with kernel information disclosure vulnerabilities such as CVE-2020-
9833, a complete local EoP exploit chain can be formed.
3. Stack out-of-bounds read and write vulnerabilities represented by CVE-2022-
32847 are often found. The root cause is related to stack-based variables being 
passed and used for calculation or parsing. The stack canary can't solve all the 
problems.
#BHUSA @BlackHatEvents
Information Classification: General
From the perspective of vulnerability research (cont)
4. Vulnerabilities represented by CVE-2022-26761 indicate that handlers that 
support different architectures or working modes are prone to problems.
5. Vulnerabilities represented by CVE-2020-9834 and Follow-up ID 
OE0908765113017 indicate that some handlers with complex logic will be 
introduced with new vulnerabilities every once in a while, even if the old ones have 
just been fixed.
#BHUSA @BlackHatEvents
Information Classification: General
From the perspective of engineering and hunting
1. It is important to integrate subsystem interfaces at different levels and their attack 
surfaces.
2. It is important to integrate KASAN and code coverage analysis tools.
3. Many work needs to be ported to Apple Silicon platform, such as Kemon.
4. We should combine all available means such as reverse engineering, kernel 
debugging, XNU resources, Apple SDKs, third-party tools, etc.
5. If you've done this, or just started, you'll find that Apple did a lot of work, but the 
results seem to be similar to 2020.
#BHUSA @BlackHatEvents
Information Classification: General
Q&A
wang yu
Cyberserval