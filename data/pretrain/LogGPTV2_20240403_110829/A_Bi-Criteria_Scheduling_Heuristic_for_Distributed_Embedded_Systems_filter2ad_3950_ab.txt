height is proportional to its WCTT, and whose ends are
bound by two arrows: one from the source operation and
one to the destination operation.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
l23
p3
l24
l34
p4
p1
l12
o1o2
e
m
i
t
o2
p1
l12
p2
o1
p2
o1
1
(a)
l23
p3
l24
l34
p4
o2
1
9
o1
2
o1
1o1
2
o1
1o2
2
o2
2
(b)
o2
1o2
2
Figure 3. Temporary schedule diagram:
without and (b) with replication.
(a)
3.2 Reliability criterion
Our second objective is to generate a reliable schedule,
that is, the system reliability Rel sched must be greater than
Rel obj. In order to evaluate the overall reliability of a such
systems, we propose to use the Reliability Block Diagrams
(RBDs) [1, 7], which are well suited for representing and
analyzing the reliability of systems with redundancy. An
RBD depicts the components in a system and their connec-
tions in terms of functioning requirements.
if
S
(o1, p2)
not fail
and
(o1o2, l12) and
not fail
(o2, p2)
not fail
and
then
succes
D
(a)
(o1o2, l12)
and
not fail
(o1
2, p1)
not fail
or
(o1o2, l23)
not fail
(o2
2, p3)
not fail
or
(o1
1, p2)
not fail
ifS
or
(o2
1, p4)
not fail
and (o1o2, l34)
not fail
(b)
Figure 4. The reliability block diagram:
without and (b) with replication.
(a)
Figures 4(a) and 4(b) show respectively the RBD cor-
responding to the schedules of Figures 3(a) and 3(b), with
appropriate links and terminals. A system is operational
if there is a path from the source S to the destination D
in its RBD. In our model, each component {oi, cj} of an
RBD is assigned the reliability cost of executing the opera-
tion/communication oi on the processor/link cj.
The system reliability of an RBD is based on the relia-
bility of each of its components. The computation of the
component reliability Rel sched(oi, cj) value is given by the
following equation [21]:
Rel sched(oi, cj) = e−λcj
Exe(oi, cj)
(1)
To compute the overall reliability Rel
∗
sched of a system,
we start by drawing the RBD of its ﬁnal distributed sched-
ule. Then, using Equation (1), we compute the reliability of
the overall system as follows:
• In systems without replication, the RBD of the sched-
ule has a serial structure (see Figure 4(a)); its reliability
can therefore be obtained in linear time by multiplying
the reliability of each component of the RBD.
• In systems with replication, the RBD of the sched-
ule does not have a serial/parallel structure (see Fig-
ure 4(b)); its exact reliability can only be obtained in
exponential time. However, we can compute an upper
bound of the reliability Rel sched in polynomial time,
thanks to the Minimal Cut Sets (Mcs) method [4].
The Mcs is the minimum combination of failures that
might cause a system to fail. When processors/links
failures are assumed to be independent, the reliability
of an Mcs Mi is computed as follows:
Rel sched(Mi) = 1 −
(1 − Rel sched(o, c))
(cid:3)
(o,c) ∈ Mi
Since cut structures operate in series and components
in a cut set operate in parallel, the Mcs allows us to
compute the upper bound of the system’s reliability in
a linear time, as follows:
then
succes
D
Rel
∗
sched
(cid:4)
≤ k(cid:3)
i=1
1 −
(cid:3)
(o,c) ∈ Mi
(cid:5)
(1 − Rel sched(o, c))
4 The reliable bi-criteria scheduling algo-
rithm RBSA
We now present our scheduling algorithm RBSA for
maximizing the system’s reliability (Rel sched) and mini-
mizing the system’s run-time (Rtsched). We present the al-
gorithm in macro-steps; the superscript number in paren-
theses refers to the step of the algorithm, e.g., O(n)
sched. First,
we introduce the following notations:
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
• O(n)
cand is the list of candidate operations, built from the
algorithm graph vertices. An operation is candidate if
all its predecessors are already scheduled.
• O(n)
sched is the list of already scheduled operations.
• pred(oi) is the set of predecessors of operation oi.
• succ(oi) is the set of successors of operation oi.
• P is the set of all processors of Arc.
• 2P
• Rt (n−1)
is the set of combinations of processors of P.
sched is the length of the temporary schedule at
step n − 1.
sched
• Rt (n)
(oi,{p1, ..., pj}) is the length of the tempo-
rary schedule at step n where the j replicas o1
, . . . , oj
i
i
of oi are scheduled respectively on the j processors
p1, . . . , pj.
• Rel (n−1)
step n − 1.
sched is the reliability of the temporary schedule at
• Rel (n)
sched
(oi,{p1, ..., pj}) is the reliability of the tem-
porary schedule at step n where the j replicas
o1
i of oi are scheduled respectively on the j
i
processors p1, . . . , pj.
, . . . , oj
4.1 Algorithm principles
The algorithm that we propose is a greedy list scheduling
heuristic [23], called RBSA (Reliable Bi-Criteria Schedul-
ing Algorithm), which uses a bi-criteria compromise func-
tion (Bcf ) as a cost function to introduce priority between
operations to be scheduled. It is based on two functions:
the reliability loss (L) and the schedule length gain (G).
The ﬁrst function L(n)(oi,{p1, . . . , pj}) computes, at each
step n of the algorithm, the loss on reliability resulting from
the scheduling of the j replicas o1
, . . . , oj
i of oi respectively
i
on the j processors p1, . . . , pj (Figure 5):
L(n) =
Rel (n)
sched
(oi,{p1, . . . , pj}) − Rel (n−1)
Rel obj − Rel (n−1)
sched
sched
(2)
The second function G(n)(oi,{p1, . . . , pj}) computes, at
each step n of the algorithm, the gain on the schedule length
resulting from the scheduling of the j replicas o1
, . . . , oj
i of
i
oi respectively on the j processors p1, . . . , pj (Figure 5):
G(n) =
Rt (n)
sched
(oi,{p1, . . . , pj}) − Rt (n−1)
Rtobj − Rt (n−1)
sched
sched
(3)
schedule length gain
∞
)
1
−
n
(
d
e
h
c
s
t
R
−
j
b
o
t
R
)
1
−
n
(
d
e
h
c
s
t
R
−
d
e
h
c
s
)
n
(
t
R
Rtobj
Rt
(n)
sched
Rt
(n−1)
sched
0
d
e
h
c
s
)
n
(
(n−1)
sched
l
e
R
−
1
Rel
Rel
Rel obj
0
reliability loss
j
b
o
l
e
R
−
)
1
−
n
(
d
e
h
c
s
l
e
R
(n)
sched
)
1
−
n
(
d
e
h
c
s
l
e
R
Figure 5. Reliability and run-time objectives
The cost function Bcf computes the bi-criteria compro-
mise value between L and G; it tries to minimize the loss
on reliability and maximize the gain on schedule length by
replicating each operation oi on a subset of P . It selects, for
each operation oi, the best subset {p1, . . . , pj} which gives
the smallest compromise value Bcf (n)(oi,{p1, . . . , pj}) be-
tween L(n)(oi,{p1, . . . , pj}) and G(n)(oi,{p1, . . . , pj}).
To compute Bcf , we introduce a parameter θ (provided by
the user and set to 45
by default):
◦
Bcf (n) = cos(θ)L(n) + sin(θ)G(n)
(4)
Here lies the advantage of having normalized both ob-
jectives within their respective functions L and G: we can
combine them inside the compromise function Bcf . Other-
wise, the reliability being intrinsically in the interval [0,1],
while the schedule length can be several orders of magni-
tude greater, it would have been meaningless to compare
them. Actually, this would have resulted in giving much
more weight to Rtobj than to Rel obj.
Relative loss L(n)(o1, Pj )
1
0.8
0.6
0.4
0.2
(o1, {p3})
})
{ p 1, p 3
−−−−−−−−−−−−−−−→
) ( o 1,