### Height and WCTT Proportionality
The height is proportional to its WCTT, with the ends bound by two arrows: one from the source operation and one to the destination operation.

### Conference Proceedings Citation
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 05:38:08 UTC from IEEE Xplore. Restrictions apply.

### Temporary Schedule Diagram
#### (a) Without Replication
- Components: l23, p3, l24, l34, p4, p1, l12, o1o2, e, m, i, t, o2, p1, l12, p2, o1, p2, o1, 1

#### (b) With Replication
- Components: l23, p3, l24, l34, p4, o2, 1, 9, o1, 2, o1, 1o1, 2, o1, 1o2, 2, o2, 2, o2, 1o2, 2

**Figure 3.** Temporary schedule diagram: (a) without and (b) with replication.

### Reliability Criterion
Our second objective is to generate a reliable schedule, ensuring that the system reliability \( \text{Rel}_{\text{sched}} \) exceeds the target reliability \( \text{Rel}_{\text{obj}} \). To evaluate the overall reliability of such systems, we propose using Reliability Block Diagrams (RBDs) [1, 7], which are well-suited for representing and analyzing the reliability of systems with redundancy. An RBD depicts the components in a system and their connections in terms of functioning requirements.

### Reliability Block Diagram
#### (a) Without Replication
- Components: S, (o1, p2), (o1o2, l12), (o2, p2), D

#### (b) With Replication
- Components: (o1o2, l12), (o1_2, p1), (o1o2, l23), (o2_2, p3), (o1_1, p2), (o2_1, p4), (o1o2, l34), D

**Figure 4.** The reliability block diagram: (a) without and (b) with replication.

### System Reliability Computation
Figures 4(a) and 4(b) show the RBDs corresponding to the schedules in Figures 3(a) and 3(b), respectively, with appropriate links and terminals. A system is operational if there is a path from the source S to the destination D in its RBD. In our model, each component \(\{o_i, c_j\}\) of an RBD is assigned the reliability cost of executing the operation/communication \(o_i\) on the processor/link \(c_j\).

The system reliability of an RBD is based on the reliability of each of its components. The computation of the component reliability \(\text{Rel}_{\text{sched}}(o_i, c_j)\) value is given by the following equation [21]:
\[ \text{Rel}_{\text{sched}}(o_i, c_j) = e^{-\lambda_{c_j} \cdot \text{Exe}(o_i, c_j)} \]

To compute the overall reliability \(\text{Rel}^*_{\text{sched}}\) of a system, we start by drawing the RBD of its final distributed schedule. Then, using Equation (1), we compute the reliability of the overall system as follows:

- **Without Replication:** The RBD of the schedule has a serial structure (see Figure 4(a)). Its reliability can be obtained in linear time by multiplying the reliability of each component of the RBD.
- **With Replication:** The RBD of the schedule does not have a serial/parallel structure (see Figure 4(b)). Its exact reliability can only be obtained in exponential time. However, we can compute an upper bound of the reliability \(\text{Rel}_{\text{sched}}\) in polynomial time using the Minimal Cut Sets (MCS) method [4]. The MCS is the minimum combination of failures that might cause a system to fail. When processor/link failures are assumed to be independent, the reliability of an MCS \(M_i\) is computed as follows:
\[ \text{Rel}_{\text{sched}}(M_i) = 1 - \prod_{(o, c) \in M_i} (1 - \text{Rel}_{\text{sched}}(o, c)) \]
Since cut structures operate in series and components in a cut set operate in parallel, the MCS allows us to compute the upper bound of the system’s reliability in linear time, as follows:
\[ \text{Rel}^*_{\text{sched}} \leq \sum_{i=1}^k \left(1 - \prod_{(o, c) \in M_i} (1 - \text{Rel}_{\text{sched}}(o, c))\right) \]

### Reliable Bi-Criteria Scheduling Algorithm (RBSA)
We present our scheduling algorithm RBSA for maximizing the system’s reliability (\(\text{Rel}_{\text{sched}}\)) and minimizing the system’s run-time (\(\text{Rt}_{\text{sched}}\)). We introduce the following notations:

- \(O(n)_{\text{cand}}\): List of candidate operations, built from the algorithm graph vertices. An operation is a candidate if all its predecessors are already scheduled.
- \(O(n)_{\text{sched}}\): List of already scheduled operations.
- \(\text{pred}(o_i)\): Set of predecessors of operation \(o_i\).
- \(\text{succ}(o_i)\): Set of successors of operation \(o_i\).
- \(P\): Set of all processors of Arc.
- \(2^P\): Set of combinations of processors of \(P\).
- \(\text{Rt}^{(n-1)}_{\text{sched}}\): Length of the temporary schedule at step \(n-1\).
- \(\text{Rt}^{(n)}_{\text{sched}}(o_i, \{p_1, \ldots, p_j\})\): Length of the temporary schedule at step \(n\) where the \(j\) replicas \(o_{i1}, \ldots, o_{ij}\) of \(o_i\) are scheduled respectively on the \(j\) processors \(p_1, \ldots, p_j\).
- \(\text{Rel}^{(n-1)}_{\text{sched}}\): Reliability of the temporary schedule at step \(n-1\).
- \(\text{Rel}^{(n)}_{\text{sched}}(o_i, \{p_1, \ldots, p_j\})\): Reliability of the temporary schedule at step \(n\) where the \(j\) replicas \(o_{i1}, \ldots, o_{ij}\) of \(o_i\) are scheduled respectively on the \(j\) processors \(p_1, \ldots, p_j\).

### Algorithm Principles
The proposed algorithm is a greedy list scheduling heuristic [23], called RBSA (Reliable Bi-Criteria Scheduling Algorithm), which uses a bi-criteria compromise function (BCF) as a cost function to introduce priority between operations to be scheduled. It is based on two functions: the reliability loss (L) and the schedule length gain (G).

- **Reliability Loss Function \(L(n)(o_i, \{p_1, \ldots, p_j\})\):** Computes, at each step \(n\) of the algorithm, the loss on reliability resulting from the scheduling of the \(j\) replicas \(o_{i1}, \ldots, o_{ij}\) of \(o_i\) respectively on the \(j\) processors \(p_1, \ldots, p_j\):
\[ L(n) = \frac{\text{Rel}^{(n)}_{\text{sched}}(o_i, \{p_1, \ldots, p_j\}) - \text{Rel}^{(n-1)}_{\text{sched}}}{\text{Rel}_{\text{obj}} - \text{Rel}^{(n-1)}_{\text{sched}}} \]

- **Schedule Length Gain Function \(G(n)(o_i, \{p_1, \ldots, p_j\})\):** Computes, at each step \(n\) of the algorithm, the gain on the schedule length resulting from the scheduling of the \(j\) replicas \(o_{i1}, \ldots, o_{ij}\) of \(o_i\) respectively on the \(j\) processors \(p_1, \ldots, p_j\):
\[ G(n) = \frac{\text{Rt}^{(n)}_{\text{sched}}(o_i, \{p_1, \ldots, p_j\}) - \text{Rt}^{(n-1)}_{\text{sched}}}{\text{Rt}_{\text{obj}} - \text{Rt}^{(n-1)}_{\text{sched}}} \]

**Figure 5.** Reliability and run-time objectives

The cost function BCF computes the bi-criteria compromise value between L and G; it tries to minimize the loss on reliability and maximize the gain on schedule length by replicating each operation \(o_i\) on a subset of \(P\). It selects, for each operation \(o_i\), the best subset \(\{p_1, \ldots, p_j\}\) which gives the smallest compromise value \(\text{BCF}^{(n)}(o_i, \{p_1, \ldots, p_j\})\) between \(L(n)(o_i, \{p_1, \ldots, p_j\})\) and \(G(n)(o_i, \{p_1, \ldots, p_j\})\).

To compute BCF, we introduce a parameter \(\theta\) (provided by the user and set to 45° by default):
\[ \text{BCF}^{(n)} = \cos(\theta) \cdot L(n) + \sin(\theta) \cdot G(n) \]

The advantage of normalizing both objectives within their respective functions L and G is that they can be combined inside the compromise function BCF. Otherwise, the reliability being intrinsically in the interval [0,1], while the schedule length can be several orders of magnitude greater, it would have been meaningless to compare them. This approach ensures that both criteria are balanced appropriately.

**Relative Loss \(L(n)(o_1, P_j)\):**
- 1
- 0.8
- 0.6
- 0.4
- 0.2
- (o1, {p3})
- (o1, {p1, p3})

**Figure 6.** Relative loss L(n)(o1, Pj)