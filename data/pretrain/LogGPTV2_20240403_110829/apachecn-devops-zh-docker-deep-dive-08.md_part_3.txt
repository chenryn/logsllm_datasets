我们来看一个例子！
这个示例应用在 https://github.com/nigelpoulton/atsea-sample-shop-app.git 可用，Dockerfile 在`app`目录中。这是一个基于 Linux 的应用，因此只能在 Linux Docker 主机上工作。它也很旧了，所以不要部署到重要的系统上，一定要一完成就删除。
文件如下所示:
```
FROM node:latest AS storefront
WORKDIR /usr/src/atsea/app/react-app
COPY react-app .
RUN npm install
RUN npm run build
FROM maven:latest AS appserver
WORKDIR /usr/src/atsea
COPY pom.xml .
RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolve
COPY . .
RUN mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTests
FROM java:8-jdk-alpine AS production
RUN adduser -Dh /home/gordon gordon
WORKDIR /static
COPY --from=storefront /usr/src/atsea/app/react-app/build/ .
WORKDIR /app
COPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .
ENTRYPOINT ["java", "-jar", "/app/AtSea-0.0.1-SNAPSHOT.jar"]
CMD ["--spring.profiles.active=postgres"] 
```
 `首先要注意的是 Dockerfile 有三个`FROM`指令。每一个都构成了一个独特的**建造阶段**。在内部，它们从 0 开始从顶部开始编号。然而，我们也给每个阶段起了一个友好的名字。
*   阶段 0 称为`storefront`
*   第一阶段称为`appserver`
*   第二阶段称为`production`
`storefront`阶段拉取尺寸超过 900MB 的`node:latest`映像。它设置工作目录，复制一些应用代码，并使用两条 RUN 指令来执行一些`npm`魔法。这增加了三层和相当大的尺寸。生成的映像甚至比基本的`node:latest`映像还要大，因为它包含了大量的构建内容，而没有太多的应用代码。
`appserver`阶段拉取大小超过 500MB 的`maven:latest`映像。它通过两条 COPY 指令和两条 RUN 指令添加了四层内容。这产生了另一个非常大的映像，有大量的构建工具和非常少的实际生产代码。
`production`阶段从拉动`java:8-jdk-alpine`映像开始。该映像大约为 150MB，比之前构建阶段使用的节点和 maven 映像小得多。它添加一个用户，设置工作目录，并从`storefront`舞台产生的映像中复制一些应用代码。之后，它设置一个不同的工作目录，并从`appserver`阶段生成的映像中复制应用代码。最后，它设置映像的主应用在作为容器启动时运行。
需要注意的一点是，`COPY --from`指令用于**只从前面阶段构建的映像中复制生产相关的应用代码**。他们不会复制生产不需要的建筑人工制品。
还需要注意的是，我们只需要一个 Dockerfile，并且`docker image build`命令不需要额外的参数！
说到这里…让我们建造它。
克隆回购协议。
```
$ git clone https://github.com/nigelpoulton/atsea-sample-shop-app.git
Cloning into 'atsea-sample-shop-app'...
remote: Counting objects: 632, done.
remote: Total 632 (delta 0), reused 0 (delta 0), pack-reused 632
Receiving objects: 100% (632/632), 7.23 MiB | 1.88 MiB/s, done.
Resolving deltas: 100% (195/195), done.
Checking connectivity... done. 
```
 `将目录更改为克隆报告的`app`文件夹，并验证 Dockerfile 是否存在。
```
$ cd atsea-sample-shop-app/app
$ ls -l
total 24
-rw-r--r-- 1 root root  682 Oct  1 22:03 Dockerfile
-rw-r--r-- 1 root root 4365 Oct  1 22:03 pom.xml
drwxr-xr-x 4 root root 4096 Oct  1 22:03 react-app
drwxr-xr-x 4 root root 4096 Oct  1 22:03 src 
```
 `执行构建(这可能需要几分钟才能完成，因为提取的一些映像很大)。
```
$ docker image build -t multi:stage .
Sending build context to Docker daemon  3.658MB
Step 1/19 : FROM node:latest AS storefront
latest: Pulling from library/node
aa18ad1a0d33: Pull complete
15a33158a136: Pull complete
Step 19/19 : CMD --spring.profiles.active=postgres
 ---> Running in b4df9850f7ed
 ---> 3dc0d5e6223e
Removing intermediate container b4df9850f7ed
Successfully built 3dc0d5e6223e
Successfully tagged multi:stage 
```
 `> **注意:**上面例子中使用的`multi:stage`标记是任意的。您可以根据自己的要求和标准来标记您的映像，不需要像我们在本例中那样标记多阶段构建。
运行`docker image ls`查看构建操作提取和创建的映像列表。
```
$ docker image ls
REPO    TAG             IMAGE ID        CREATED        SIZE
node    latest          a5a6a9c32877    5 days ago     941MB
            d2ab20c11203    9 mins ago     1.11GB
maven   latest          45d27d110099    9 days ago     508MB
            fa26694f57cb    7 mins ago     649MB
java    8-jdk-alpine    3fd9dd82815c    7 months ago   145MB
multi   stage           3dc0d5e6223e    1 min ago      210MB 
```
 `上面输出中的顶行显示了由`storefront`级拉动的`node:latest`映像。下图是该阶段生成的映像(通过添加代码并运行 npm 安装和构建操作创建)。这两个都是非常大的映像，包括大量的建筑垃圾。
第三、四行是`appserver`阶段拉出来的映像。它们都很大，并且包含许多构建工具。
最后一行是 Dockerfile 中最终构建阶段构建的`multi:stage`映像(阶段 2/生产)。您可以看到，这明显小于前几个阶段提取和生成的映像。这是因为它基于小得多的`java:8-jdk-alpine`映像，并且只添加了之前阶段与生产相关的应用文件。
最终结果是一个小的生产映像，由一个 Dockerfile、一个普通的`docker image build`命令和零个额外的脚本创建！
多阶段构建在 Docker 17.05 中是新的，并且是构建小的值得生产的映像的一个优秀特性。
#### 一些最佳实践
在结束本章之前，让我们列出一些最佳实践。这份清单并非详尽无遗。
##### 利用构建缓存
Docker 使用的构建过程有一个缓存的概念，它用来加速构建过程。查看缓存影响的最佳方式是在干净的 Docker 主机上构建新映像，然后立即重复相同的构建。第一次构建将提取映像并花时间构建图层。第二次建造将几乎瞬间完成。这是因为来自第一个构建的人工产物，例如图层，被缓存并被以后的构建所利用。
正如我们所知，`docker image build`过程从顶部开始一次一行地遍历一个 Dockerfile。对于每条指令，Docker 都会查看其缓存中是否已经有该指令的映像层。如果是的话，这是一个*缓存命中*，它使用该层。如果没有，这是一个*缓存未命中*，它根据指令构建一个新的层。获得*缓存命中*可以极大地加快构建过程。
让我们仔细看看。
我们将使用这个示例 Dockerfile 来提供快速浏览:
```
FROM alpine
RUN apk add --update nodejs nodejs-npm
COPY . /src
WORKDIR /src
RUN npm install
EXPOSE 8080
ENTRYPOINT ["node", "./app.js"] 
```
 `第一条指令告诉 Docker 使用`alpine:latest`映像作为其*基础映像*。如果此映像已经存在于主机上，构建将继续下一个指令。如果映像不存在，它将从 Docker Hub (index.docker.io)中拉出。
下一条指令(`RUN apk...`)运行命令更新包列表并安装`nodejs`和`nodejs-npm`。在执行该指令之前，Docker 检查其构建缓存中是否有从相同的基础映像构建的层，以及是否使用了当前要求其执行的相同指令。在这种情况下，它通过执行`RUN apk add --update nodejs nodejs-npm`指令寻找直接构建在`alpine:latest`之上的层。
如果它找到了一个层，它会跳过指令，链接到该现有层，然后继续构建缓存。如果它没有**而不是**找到图层，它将使缓存无效并构建图层。这种使缓存无效的操作会使其在构建的剩余时间内无效。这意味着所有后续的 Dockerfile 指令都完全完成，而不会尝试引用构建缓存。
让我们假设 Docker 在缓存中已经有了该指令的层(缓存命中)。让我们假设该层的 ID 是`AAA`。
下一条指令将一些代码复制到映像中(`COPY . /src`)。因为之前的指令导致了缓存命中，所以 Docker 现在检查它是否有一个缓存层，该缓存层是使用`COPY . /src`命令从`AAA`层构建的。如果是，它链接到该层并继续执行下一条指令。如果没有，它将构建该层，并使构建剩余部分的缓存无效。
让我们假设 Docker 在高速缓存中已经有了该指令的层(高速缓存命中)。假设该层的 ID 为`BBB`。
这个过程在 Dockerfile 的其余部分继续。
多了解一些事情很重要。
首先，一旦任何指令导致缓存未命中(没有为该指令找到层)，缓存就不再用于整个构建的其余部分。这对你如何编写 Dockerfiles 有着重要的影响。尝试以这样一种方式写入它们:将可能使缓存无效的指令放在 Dockerfile 的末尾。这意味着直到构建的后期才会发生缓存未命中，从而使构建尽可能多地受益于缓存。
通过向`docker image build`命令传递`--no-cache=true`标志，可以强制构建过程忽略整个缓存。
理解`COPY`和`ADD`指令包括确保复制到映像中的内容自上次构建以来没有改变的步骤也很重要。例如，Dockerfile 中的`COPY . /src` **指令**可能自上一次**后没有变化，但是……**复制到映像**中的目录内容**发生了变化！
为了防止这种情况，Docker 对每个被复制的文件执行校验和，并将其与缓存层中相同文件的校验和进行比较。如果校验和不匹配，缓存将失效，并构建一个新层。
##### 挤压映像
挤压映像实际上不是一个最佳实践，因为它有优点也有缺点。
在高层次上，Docker 遵循正常的过程来构建一个映像，但随后增加了一个额外的步骤，将所有东西挤压成一个单一的层。
挤压在映像开始有很多层的情况下是很好的，但这并不理想。一个例子可能是当创建一个新的基础映像时，您希望将来从它构建其他映像，这个基础映像作为单层映像要好得多。
从负面来看，被挤压的映像不共享映像层。这可能导致存储效率低下和更大的推拉操作。
如果你想创建一个压扁的映像，在`docker image build`命令中添加`--squash`标志。
图 8.8 显示了压缩映像带来的一些低效率。两个映像完全相同，除了一个被压扁，另一个没有。未压缩的映像与主机上的其他映像共享图层(节省磁盘空间)，但压缩的映像不共享图层。压扁的映像还需要通过`docker image push`命令将每个字节发送到 Docker Hub，而未压扁的映像只需要发送唯一的图层。
![Figure 8.8 - Squashed images vs non-squashed images](img/figure8-8.png)
Figure 8.8 - Squashed images vs non-squashed images
##### 使用不安装-推荐
如果您正在构建 Linux 映像，并且使用 apt 包管理器，您应该使用带有`apt-get install`命令的`no-install-recommends`标志。这确保了`apt`只安装主依赖项(在`Depends`字段中的包)，而不安装推荐或建议的包。这可以大大减少下载到映像中的不需要的包的数量。
### 应用容器化-命令
*   `docker image build`是读取 Dockerfile 并容器化应用的命令。`-t`标志标记映像，`-f`标志允许您指定 Dockerfile 的名称和位置。使用`-f`标志，可以在任意位置使用任意名称的 Dockerfile。*构建上下文*是应用文件存在的地方，它可以是本地 Docker 主机上的目录，也可以是远程 Git repo。
*   Dockerfile 中的`FROM`指令为您将要构建的新映像指定了基础映像。它通常是 Dockerfile 中的第一条指令，最佳实践是在这条线上使用来自官方转帖的映像。
*   Dockerfile 中的`RUN`指令允许您在映像中运行命令。每个`RUN`指令创建一个新的层。
*   Dockerfile 中的`COPY`指令将文件作为新层添加到映像中。通常使用`COPY`指令将应用代码复制到映像中。
*   Dockerfile 中的`EXPOSE`指令记录了应用使用的网络端口。
*   Dockerfile 中的`ENTRYPOINT`指令将默认应用设置为当映像作为容器启动时运行。
*   其他 Dockerfile 指令包括`LABEL`、`ENV`、`ONBUILD`、`HEALTHCHECK`、`CMD`等…
### 章节总结
在本章中，我们学习了如何将应用容器化。
我们从远程 Git repo 中提取了一些应用代码。该报告包括应用代码，以及包含如何将应用构建到映像中的说明的 Dockerfile。我们学习了 Dockerfiles 如何工作的基础知识，并将其输入到`docker image build`命令中以创建新映像。
一旦创建了映像，我们就从它开始一个容器，并用网络浏览器测试它。
之后，我们看到了多阶段构建如何为我们提供一种简单的方法来构建较小的映像并将其运送到我们的生产环境中。
我们还了解到 Dockerfile 是记录应用的一个很好的工具。因此，它可以加快新开发人员的入职速度，弥合开发人员和运营人员之间的鸿沟。考虑到这一点，把它当作代码来对待，并将其签入和签出源代码控制系统。
虽然引用的例子是一个基于 Linux 的例子，但是容器化 Windows 应用的过程是一样的:从你的应用代码开始，创建一个描述应用的 Dockerfile，用`docker image build`构建映像。任务完成！````````````````````