### Java Program
### Perl Script
### PHP Script
### PHP Script
### Python Script
### Python Script
### Python Script
### Python Script
### Python Script
### CLI Execution

**Table 2: Libraries and Wrappers Manually Confirmed to be Supported by CertShim**

### 5.1.2 Less Dangerous Code?

Next, we consider the safe default features of CertShim and how they protect against the SSL vulnerabilities identified by Georgiev et al. [19]. Through manual testing, we confirmed that CertShim secures SSL communications in 100% of the SSL libraries, 89% of the data-transport libraries, and 71% of the applications mentioned in this work.

- **SSL Libraries**: Error-prone aspects of the SSL API are identified in OpenSSL, GnuTLS, and JSSE. CertShim enforces proper certificate handling for OpenSSL and GnuTLS, even if the application fails to call the verification function. We provide partial support for JSSE, ensuring that hostname verification is always performed, regardless of how the API is invoked.
  
- **Data-Transport Libraries**: Georgiev et al. discuss nine data-transport frameworks that wrap major SSL libraries. CertShim provides full support for cURL, PHP's `fsockopen`, `urllib`, `urllib2`, `httplib`, and `python ssl`. We also offer partial support for the Java libraries Apache HttpClient and Weberknecht. The only unsupported library is `php_curl` due to static linking.

- **SSL Applications**: We obtained vulnerable versions of several applications, including Lynx, Apache HttpClient, and Apache Axis. Based on our review and manual tests, we conclude that CertShim secures the SSL communications of 12 out of 17 applications mentioned that can run on Linux systems. All five unsupported applications were payment services with a vulnerable `php_curl` dependency.

These findings demonstrate the effectiveness of the CertShim methodology. It also shows that, as long as the API remains unchanged, CertShim can protect against both known and undiscovered vulnerabilities and misconfigurations in SSL APIs and wrapper libraries.

### 5.1.3 Large-Scale Coverage Survey

On a general computing platform like Linux, automated dynamic analysis of SSL proved challenging due to the variety of SSL implementations, languages, and usage scenarios. During manual testing, we found that a thorough understanding of an application's purpose and behavior was necessary to trigger SSL connections. Consequently, large-scale dynamic analysis of CertShim was not feasible. However, based on the supported libraries shown in Table 2, we used a combination of static analysis and manual inspection to estimate CertShim coverage for a large corpus of applications.

For real-world SSL usage, we selected the Ubuntu Popularity Contest [34], which tracks the most commonly installed packages on Ubuntu. Starting with the top 10,000 packages, we used `apt-rdepends` to recursively find library dependencies for each package. We recovered library dependency information for 7,789 packages, discovering 2,949 packages with dependencies on known SSL libraries. We then gathered the corresponding source files using `apt-get source`, resulting in 1,809 codebases. We checked these files against a list of keywords related to networking, SSL, and HTTPS, and manually inspected the remaining packages to confirm SSL connections. Since CertShim only partially supports Java, these packages were excluded from the survey.

| Dependency | Pkg. Count | Support? |
|------------|------------|----------|
| urllib/httplib | 123 | Yes |
| OpenSSL | 92 | Yes |
| GnuTLS | 51 | Yes |
| cURL/libcurl | 48 | Yes |
| Misc SSL Wrappers | 56 | Yes |
| Total Supported | 370 | - |
| Total Unsupported | 26 | - |

**Table 4: Details of Estimated CertShim Support and SSL Usage in the Ubuntu Popularity Contest**

To determine the prevalence of static linking, we installed the 395 packages containing SSL activity and ran `ldd` to check shared library dependencies. Out of 10,707 files, only 12 were statically linked.

As illustrated in Figure 5a, CertShim supported 370 out of 395 packages making SSL connections, achieving a coverage ratio of 94%. Our use of the word "support" means that the application may make an SSL connection during execution, and if it does, CertShim will hook it. A more robust assurance would require dynamic analysis, which was not feasible. A summary of our results is provided in Table 4 and Figure 5b. The miscellaneous SSL wrappers included QSSL, Pidgin’s Purple SSL, URLGrabber, Serf, and Neon; we confirmed that they wrapped OpenSSL or GnuTLS and used one of CertShim’s function hooks. The unsupported packages included previously discovered gaps such as NSS, as well as other wrappers like KSSL and QCA, for which we could not confirm support. This coverage result is an estimate; without dynamic analysis, it was impossible to definitively confirm that these applications attempted to make SSL connections. However, we did confirm that each application had code paths that made web requests with SSL-ready libraries.

### 5.2 Performance

We generated several benchmarks for CertShim's baseline performance, testing on a Dell PC running a Linux 3.5 kernel with 2 GB of RAM and a Pentium 3Ghz dual-core processor. We measured the time it took for the `wget` utility to retrieve a small, 9 KB file over HTTPS from a nearby web server. This call triggers the `SSL_get_verify_result()` function, which is supported by CertShim. The throughput to the server was approximately 80 MB per second. The server used a CA-signed certificate, validated by `wget` during the download. Each result was averaged over 500 measurements.

- **Without CertShim**: `wget` returned in 88 ms.
- **With CertShim (no verification module)**: The operation completed in 108 ms, imposing a 20 ms base overhead on OpenSSL. This overhead is largely due to CertShim hooks for the `connect()` and `getaddrinfo()` functions, which collect contextual data required by the hooked OpenSSL and GnuTLS functions and write it to a SQLite database. The policy engine demonstrated an average run time of just 0.061 ms while parsing the sample configuration file and initializing policies. With an 86 kilobyte configuration file consisting of 392 policies, the policy engine required an average run time of 3.075 ms. Each average was based on 1,000 iterations.

We repeated these trials with different verification modules enabled. The results are summarized in Table 5.

| Module | Time (ms) | 95% CI |
|--------|-----------|--------|
| OpenSSL w/o CertShim | 88 | [84, 92] |
| CertShim Baseline | 108 | [107, 109] |
| Convergence Baseline | 108 | [107, 110] |
| Key Pinning, First Use | 130 | [120, 139] |
| Key Pinning, Revisit | 119 | [118, 119] |
| DANE | 7000 | - |

**Table 5: Benchmarks for CertShim Usage. 95% confidence intervals are included in brackets.**

The minimum time for Convergence verification was 108 ms, corresponding to the case where the client already has a locally cached copy of the certificate fingerprint. For Key Pinning, verification took 130 ms when visiting a domain for the first time and 119 ms when checking a previously visited domain. The DANE module required 7 seconds, attributed to the sequential verification of 9 IP addresses associated with `https://www.torproject.org`.

Initially, we observed a base cost of 900 ms for CertShim, which was due to the SQLite configuration. Each attempt to open a write transaction to the database cost approximately 100 ms. To improve performance, we disabled journaling on the database, noting that this also disabled protections against database corruption due to hardware failures or unexpected interrupts. In a future iteration of CertShim, we intend to restore these protections while imposing minimal additional performance cost by implementing an in-memory database that flushes to disk during idle periods.

### 6. Limitations & Future Work

We now discuss several potential gaps in CertShim's coverage and possible solutions:

- **Root Processes**: By default, `LD_PRELOAD` is not permitted for processes running as root. However, support for root can be provided by symbolically linking a root-owned copy of CertShim to the `/lib` directory.
  
- **Alternative Libraries**: CertShim supports modern versions of two popular open-source SSL libraries, `libssl1.0.0` and `gnutls26`. Other implementations, such as PolarSSL and NSS, can be supported with modest additional work. CertShim provides a blueprint for interposing on function calls in any C-based SSL library. Our approach could be deployed on Windows' SChannel library as an `AppInit_DLL`.
  
- **SSL in Java**: Linux dynamic linking cannot be used to interpose on Java libraries. However, in Section 3.5, we demonstrate that our approach is applicable in Java through instrumentation objects.
  
- **Static Linking**: As our methodology is based on dynamic linking, CertShim cannot interpose on statically linked executables. In our evaluation, we encountered one instance of static linking in PHP's cURL wrapper. As a stop-gap solution, we are investigating the use of Conti et al.'s approach of correlating SSL traffic to applications [11]. If a flow's network context is not already present in the CertShim database, CertShim can infer that the flow is from a statically linked application and warn the user. This limitation could be more fully addressed via static binary instrumentation using tools like PEBIL [25] and DynInst [6, 8].
  
- **Usability**: CertShim already has a complete logging system, making it easy to develop a graphical user interface layer and other utilities. We envision a notification system similar to Red Hat's `setroubleshootd` daemon, which simplifies SELinux usage by alerting users to new AVC log messages. Because CertShim logs a template policy entry upon verification failure, an `audit2allow`-like application could be developed to simplify policy debugging.
  
- **Policy Engine**: We intend to extend the policy mechanism to support pattern matching on command line arguments. Some applications' certificate verification behaviors should change based on these arguments; for example, CertShim should take no action when `wget` is invoked with the `-no-check-certificate` option. We also plan to release additional verification modules.

### 7. Related Work

Recent research has sought to better understand and prevent SSL vulnerabilities in non-browser software. Georgiev et al. manually surveyed different layers of the SSL stack, discovering pervasive misconfigurations of certificate validation routines and usage issues.