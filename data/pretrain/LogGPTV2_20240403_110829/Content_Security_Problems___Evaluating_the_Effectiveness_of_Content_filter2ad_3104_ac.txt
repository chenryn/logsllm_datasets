obj.addEventListener("click", someEvent); 
Click Me 
events.js 
HTTPS://WWW.ISECPARTNERS.COM 
8/13 
html file 
The restriction on inline scripts by Content Security Policy can be avoided by including the  unsafe-inline 
directive. This would greatly weaken Content Security Policy’s power to prevent XSS but can be a simple way 
to use Content Security Policy without substantial upfront investment in bringing the application code into 
compliance with Content Security Policy. The use of unsafe-inline can allow the development team time to 
remove  inline  scripts  and  inline  CSS  while  still  taking  advantage  of  the  other  security  features  offered  by 
Content Security Policy1. 
3.1.3   EVALUATING YOUR FUNCTIONS 
In order to take advantage of the most secure form of Content Security Policy, several functions need to be 
eliminated  from the code  base. These  functions  are dangerous  in that  they can cause a web application  to 
execute user input as JavaScript code:  
Javascript operator and function eval() 
Function() constructor 
setTimeout() method without a function as the first argument 
setInterval() method without a function as the first argument 
The removal of these functions from an established codebase can be non-trivial. When Content-Security-
Policy  is defined,  the  former  two  functions will  throw a security exception, while  the  latter will  return  0. 
This restriction can also be avoided by including the unsafe-eval directive but would significantly weaken a 
lot of the protection that Content Security Policy provides. Just like the unsafe-inline directive, the unsafe-
eval directive could be used in the Content Security Policy declaration in order to give the development team 
time to convert from using the above functions. 
3.1.4    CONVERTING TO REGULAR CONTENT SECURITY POLICY 
Once  the  Content-Security-Policy-Report-Only  has  been  established  and  the  violation  reporting  is 
happening  as  desired,  the  Content-Security-Policy  header  can  be  used  without  negatively  affecting  the 
application. Simply copy the approved directives from the Content-Security-Policy-Report-Only header and 
add them to a Content-Security-Policy header. Any violations of the directives will now be blocked.  
The report-uri can either be different for the Content-Security-Policy header or the same as the Report-
Only header, but it is important that the violation reports are logged. Any violations will be representative of 
malicious intent, mistakes in the header, or mistakes in the application code. It is important to monitor these 
violation reports to determine the reason.  
3.1.5    ITERATIVE CONTENT SECURITY POLICY 
The best way to use the Content-Security-Policy-Report-Only header after the Content Security Policy has 
been  established  is  to  adjust  and  analyze  the  Content-Security-Policy-Report-Only  header  to  find  even 
more  strict  and  secure  ways  to  use  the  directives.  Having  a  report  only  feature  allows  for  testing  new 
directives and trying out new ways to make the application more secure. For instance, a good starter header 
might be something as simple as: 
1 http://nmatatal.blogspot.com/2013/01/removing-inline-javascript-for-csp.html 
HTTPS://WWW.ISECPARTNERS.COM 
9/13 
Content-Security-Policy: default-src ‘self’ *.csp.com unsafe-inline; report-uri 
‘/reporting’ 
This will only allow resources from the application’s origin and from subdomains. But if, after experimenting 
with the  Content-Seucrity-Policy-Report-Only  header,  it  is  found that  the application only  loads scripts 
from scripts.csp.com, then a more secure policy would be: 
Content-Security-Policy: default-src ‘self’ *.csp.com unsafe-inline; script-src 
scripts.csp.com unsafe-inline; report-uri ‘/reporting’ 
This would be the same as the previous header for all resources except scripts which can now only load from 
the scripts.csp.com. Now, after the development team has worked very hard to remove all inline scripts, the 
Content-Security-Policy-Report-Only header can be modified to be: 
Content-Security-Policy-Report-Only: default-src ‘self’; script-src scripts.csp.com; 
report-uri ‘/reporting’ 
This  header removes the unsafe-inline directive  from both the  default-src and  script-src directives and 
instructs  browsers  to  report  any  violations  of  the  more  restrictive  policy.  After  any  remaining  issues  are 
corrected,  the  main  Content-Security-Policy  header  can  be  updated  to  reflect  the  changes  made  to  the 
Content-Security-Policy-Report-Only header; 
Content-Security-Policy: default-src ‘self’ *.csp.com; script-src scripts.csp.com; 
report-uri ‘reporting’ 
Using this process the Content-Security-Policy-Report-Only header can be used to iteratively increase the 
security of the web application. 
4  BEST PRACTICES 
The best practices listed below are a list of rules to follow that would create the most secure Content Security 
Policy and deploying it in a disciplined fashion that doesn’t break existing functionality. Not all of these are 
trivial, and for many legacy applications the upfront refactoring investment required to comply with these 
recommendations will be prohibitive. This is not a list of things all web applications must do, but a list of 
practices that web applications should work toward in order to improve their security. There are also a couple 
real-world examples of companies implementing Content Security Policy, Twitter, Github. 
4.1  SUPPORT STANDARD CONTENT SECURITY POLICY HEADER 
A  Content  Security  Policy  helps  to  detect  and  mitigate  certain  types  of  attacks,  including  XSS  and  other 
injection attacks. These attacks are used for everything from data theft to site defacement or distribution of 
malware. Web applications should have a Content-Security-Policy header on HTTP responses. There are 3 
variations  of  the  header  right  now:  X-WebKit-CSP,  Content-Security-Policy,  and  X-Content-Security-
Policy. Even though it would seem natural to support all headers, the behavior of the non-standard headers 
can  vary,  so  it  is  recommended  to  support  only  the  standard  header  unless  a  specific  functionality  is 
targetted. 
4.2  AVOID THE UNSAFE-INLINE DIRECTIVE 
Content Security Policy allows the server to control the locations from which the application expects to load 
resources. If the unsafe-inline directive is specified then Content Security Policy has no way to control the 
HTTPS://WWW.ISECPARTNERS.COM 
10/13 
injection of inline scripts. Authors should not include unsafe-inline in their Content Security Policy if they 
wish to protect their web application from XSS. 
4.3  AVOID THE UNSAFE-EVAL DIRECTIVE 
Content  Security  Policy  prevents  the  use  of  specific Javascript  functions  such  as  eval(),  which  can  execute 
user  submitted  data  as  code.  The  unsafe-eval  directive  will  disable  this  feature  and  allow  the  use  of  the 
unsafe  functions.  Adding  this  directive  bypasses  one  of  the  most  important  aspects  of  Content  Security 
Policy and should not be used. 
4.4  NEVER SPECIFY A WILDCARD (*) AS THE DEFAULT POLICY 
Content Security Policy allows wildcards through the use of ‘*’. A Content Security Policy containing a bare ‘*’ 
as the default policy will not be able to mitigate the risk of script or content injection. This would be the same 
as not including the Content-Security-Policy header, and would provide no protection.  
4.5  NEVER SPECIFY A WILDCARD (*) WHEN REFERENCING TOP LEVEL DOMAINS, E.G. *.COM 
Content Security Policy allows wildcards through the use of '*'. The misuse of a wildcard can be very dramatic 
and  the  server  could  allow  access  to  more  than  intended.  A  directive  of  default-src  *.com  would  allow 
anyone with a .com domain to have their content included within the application resources. 
4.6  ALWAYS SPECIFY A DEFAULT-SRC DIRECTIVE 
There are several Content Security Policy directives that a user agent must enforce: script-src, object-src, 
style-src,  image-src,  media-src,  frame-src,  font-src,  and  connect-src.  Since  some  of  these  may  be 
unneeded  or  not  considered,  the  most  secure  way  to  establish  a  Content  Security  Policy  is  to  first  set  the 
default-src to 'self' or ‘none’ and then build up the other directives as needed. This will make the web 
application  “secure  by default” with additional directives serving as exceptions added  in order to  maintain 
functionality. Not supplying a default-src directive means that the application is by default insecure except 
where specified. 
4.7  ALWAYS SPECIFY A REPORT-URI DIRECTIVE 
Adding  a  reporting  URI  allows  the  web  application  to  log  violations  against  the  defined  Content  Security 
Policy.  Without  this  directive,  the  administrators/developers  have  no  way  of  detecting  flaws  in  their  web 
application or Content Security Policy configuration.  Reporting is also very important for the initial phase of 
setting  up  Content  Security  Policy.  Analysis  of  the  report-uri  of  the  Content-Security-Policy-Report-
Only  header can  inform as to what  resources are currently  being  loaded and  from which  locations. This  is 
vital in determining the Content Security Policy for an application. 
4.8   NO RESOURCE-SPECIFIC DIRECTIVE MAY INDUCE A LOWER SECURITY SCHEME THAN THE 
DEFAULT-SRC DIRECTIVE 
If a  default-src directive has a defined scheme and resource-specific directives are defined after  default-
src,  the  resource-specific directive  must specify  the same scheme or one of  higher security.  The  resource-
specific  directives,  when  declared  after  a  default-src  directive,  will  overwrite  the  default-src  directive 
HTTPS://WWW.ISECPARTNERS.COM 
11/13 
completely for that particular resource. Care needs to be taken when schemes are defined to not induce lower 
security restrictions for specific resources. An example of improper use: 
Content-Security-Policy: default-src https:; frame-src frame.csp.com; //WRONG 
This  header  would  restrict  all  resources  except  frames  from  being  passed  over  HTTPS,  but  would  allow 
frames to be loaded over an HTTP connection. There are rare cases where this is the intended functionality, 
but generally this is not advisable. 
4.9  ALL CONTENT SECURITY POLICIES SHOULD USE THE REPORT-ONLY FUNCTIONALITY TO OBSERVE 
AND DETECT ANY NEEDED CHANGES IN THE CONTENT SECURITY POLICY 
A  Content  Security  Policy  configuration  is  only  as  secure  as  the  directives  used  to  define  it.  Once  the 
Content-Security-Policy  header  is  established,  using  the  Content-Security-Policy-Report-Only  header 
will allow for testing different directives to see how the current policy can be trimmed or modified to create 
the most restrictive policy possible while still allowing all resources to be obtained. The Content-Security-
Policy-Report-Only  header  should  be  used  in  tandem  with  the  Content-Security-Policy  header  to 
monitor the application for any resource violations and to secure the application. 
The  report-only  mode  should  also  be  used  to  test  significant  changes  in  the  Content  Security  Policy 
configuration before adding to the Content-Security-Policy header in order to maintain site functionality. 
4.10   NEVER USE A PATH WITHIN THE RESOURCE LOCATION 
According to Content Security Policy 1.0 client browsers should ignore any paths specified a directive source 
location. If a path is specified in the source location and the author of the policy does not realize that it will 
be dropped during processing, the directive may include resource locations that are not secure or not under 
the author’s control. An example of including an unsupported path: 
Content-Security-Policy: default-src csp.com/secure/; 
This header specifies a path “/secure” in the csp.com domain as the source of all resources for the application. 
Content  Security  Policy  1.0  does  not  support  paths  in  this  manner,  so  the  header  would  actually  allow  all 
resources from the csp.com domain instead of only from the “/secure” path. 
Note: Content Security Policy 1.1 may support the use of paths, so this recommendation may change in the 
future. 
5  CONCLUSION 
Content  Security  Policy  allows  for  fine-grain  access  control  over  resource  origin  for  web  applications.  The 
implementation of a basic form of Content Security Policy can be easily accomplished on any website. The 
Content-Security-Policy-Report-Only  header  gives  the  developers/administrators  a  process  for  adding 
Content Security Policy to a web application without breaking the functionality. The removal of inline script, 
inline style, and insecure functions can be a large task, so the Content Security Policy can be configured to 
allow  these  until  the application code can  be  properly  modified.  If  the  prerequisite work  is done,  Content 
Security  Policy  can  mitigate  common  content  injection  vulnerabilities.  The  best  practices  proposed  above 
give  the  developers  a  guideline  for  designing  a  secure  policy  and  avoiding  some  common  missteps  in  the 
process.
HTTPS://WWW.ISECPARTNERS.COM 
12/13 
REFERENCES 
  1. W3C, Content Security Policy 1.0, http://www.w3.org/TR/CSP/ 
  2. M. West, An Introduction to Content Security Policy, 
http://www.html5rocks.com/en/tutorials/security/content-security-policy/ 
3. http://caniuse.com/contentsecuritypolicy 
HTTPS://WWW.ISECPARTNERS.COM 
13/13