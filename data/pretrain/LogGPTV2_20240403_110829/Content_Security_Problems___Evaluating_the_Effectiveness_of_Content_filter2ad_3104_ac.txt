# Content Security Policy (CSP) Implementation and Best Practices

## Introduction
Content Security Policy (CSP) is a security feature that helps detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and other injection attacks. This document provides an overview of CSP, its implementation, and best practices for ensuring web application security.

## 1. Inline Scripts and Unsafe Directives
### 1.1 Avoiding the `unsafe-inline` Directive
The restriction on inline scripts by CSP can be bypassed by including the `unsafe-inline` directive. However, this significantly weakens CSP's ability to prevent XSS. Using `unsafe-inline` allows development teams time to remove inline scripts and CSS while still benefiting from other CSP security features.

### 1.2 Evaluating Functions
To implement the most secure form of CSP, several functions must be eliminated from the codebase:
- `eval()`
- `Function()` constructor
- `setTimeout()` without a function as the first argument
- `setInterval()` without a function as the first argument

These functions are dangerous because they can execute user input as JavaScript code. When CSP is defined, these functions will throw security exceptions or return 0. The `unsafe-eval` directive can be used to allow these functions, but it significantly weakens CSP's protection. It can be used temporarily to give the development team time to refactor the code.

## 2. Converting to Regular CSP
### 2.1 Transitioning from Report-Only to Enforced
Once the `Content-Security-Policy-Report-Only` header is established and violation reporting is functioning as expected, the `Content-Security-Policy` header can be implemented. Copy the approved directives from the `Content-Security-Policy-Report-Only` header to the `Content-Security-Policy` header. Violations will now be blocked.

### 2.2 Monitoring Violation Reports
The `report-uri` can be different for the `Content-Security-Policy` header or the same as the `Report-Only` header. It is crucial to log violation reports, as they may indicate malicious intent, mistakes in the header, or issues in the application code. Monitoring these reports helps in determining the root cause of violations.

## 3. Iterative CSP
### 3.1 Iterative Improvement
The `Content-Security-Policy-Report-Only` header can be used to test and refine CSP directives. For example, a simple starting point might be:
```http
Content-Security-Policy: default-src 'self' *.csp.com unsafe-inline; report-uri /reporting
```
This allows resources from the application's origin and subdomains. If experimentation shows that scripts only load from `scripts.csp.com`, a more secure policy would be:
```http
Content-Security-Policy: default-src 'self' *.csp.com unsafe-inline; script-src scripts.csp.com unsafe-inline; report-uri /reporting
```
After removing all inline scripts, the `Content-Security-Policy-Report-Only` header can be modified to:
```http
Content-Security-Policy-Report-Only: default-src 'self'; script-src scripts.csp.com; report-uri /reporting
```
This removes the `unsafe-inline` directive and instructs browsers to report any violations. Once all issues are resolved, the main `Content-Security-Policy` header can be updated:
```http
Content-Security-Policy: default-src 'self' *.csp.com; script-src scripts.csp.com; report-uri /reporting
```

## 4. Best Practices
### 4.1 Support Standard CSP Header
Web applications should use the standard `Content-Security-Policy` header. Avoid using non-standard headers like `X-WebKit-CSP` and `X-Content-Security-Policy` unless specific functionality requires them.

### 4.2 Avoid `unsafe-inline` Directive
The `unsafe-inline` directive allows inline scripts, which can be exploited for XSS. Avoid using this directive if you want to protect your application from such attacks.

### 4.3 Avoid `unsafe-eval` Directive
The `unsafe-eval` directive allows the use of functions like `eval()`, which can execute user-submitted data as code. Avoid this directive to maintain the security benefits of CSP.

### 4.4 Never Use Wildcard (*) as Default Policy
A wildcard (`*`) in the `default-src` directive disables CSP's ability to mitigate script or content injection risks. Always specify a more restrictive policy.

### 4.5 Avoid Wildcards with Top-Level Domains
Using wildcards with top-level domains (e.g., `*.com`) can allow unintended access to resources. Be specific with domain names.

### 4.6 Specify `default-src` Directive
Always set the `default-src` directive to `'self'` or `'none'` and build up other directives as needed. This ensures the application is "secure by default" with additional directives serving as exceptions.

### 4.7 Specify `report-uri` Directive
Include a `report-uri` to log violations against the CSP. This helps in detecting flaws in the application or CSP configuration.

### 4.8 No Resource-Specific Directive Should Lower Security
Resource-specific directives should not induce a lower security scheme than the `default-src` directive. Ensure that resource-specific directives do not override the `default-src` with less secure settings.

### 4.9 Use Report-Only Mode for Testing
Use the `Content-Security-Policy-Report-Only` header to test and observe changes before implementing them in the `Content-Security-Policy` header. This helps in maintaining site functionality while refining the CSP.

### 4.10 Avoid Paths in Resource Locations
CSP 1.0 does not support paths in source locations. Specifying a path in the `default-src` directive will be ignored, potentially allowing insecure resources. CSP 1.1 may support paths, so this recommendation may change in the future.

## 5. Conclusion
CSP provides fine-grained control over resource origins for web applications. Implementing a basic form of CSP is straightforward, and the `Content-Security-Policy-Report-Only` header allows developers to add CSP without breaking functionality. Removing inline scripts and insecure functions can be a significant task, but CSP can be configured to allow these until the application code is properly modified. Following the best practices outlined above will help in designing a secure CSP and avoiding common missteps.

## References
1. W3C, Content Security Policy 1.0, <http://www.w3.org/TR/CSP/>
2. M. West, An Introduction to Content Security Policy, <http://www.html5rocks.com/en/tutorials/security/content-security-policy/>
3. Can I Use, Content Security Policy, <http://caniuse.com/contentsecuritypolicy>