### Introduction

The Nepenthes platform, with its moderate hardware and maintenance requirements, allows for the efficient deployment of thousands of honeypots in parallel. This enables the collection of information on malicious network traffic.

### 2.1 Architecture of the Nepenthes Platform

Nepenthes is designed with a highly flexible and modular architecture. The core component, the daemon, manages the network interface and coordinates the actions of various modules. These modules register themselves with the Nepenthes core and perform specific tasks. The current types of modules include:

- **Vulnerability Modules**: These modules emulate the vulnerable parts of network services.
- **Shellcode Parsing Modules**: These analyze the payload received by the vulnerability modules. They extract information about the malware from the shellcode (an assembly language program).
- **Fetch Modules**: Using the information extracted by the shellcode parsing modules, these modules download the malware from remote locations.
- **Submission Modules**: These handle the downloaded malware, such as saving it to a hard drive, storing it in a database, or sending it to antivirus vendors.
- **Logging Modules**: These log information about the emulation process and help in identifying patterns in the collected data.

Additionally, several other components enhance the functionality and efficiency of the Nepenthes platform:
- **Shell Emulation**: Emulates a rudimentary Windows shell to interact with attackers.
- **Virtual Filesystem**: Each emulated shell has its own virtual filesystem, allowing for scalable and efficient file creation and modification.
- **Geolocation Modules**: Provide geolocation data for the attacking IP addresses.
- **Sniffing Modules**: Monitor new activity on specified ports.
- **Asynchronous DNS Resolution**: Improves performance by resolving domain names asynchronously.

Figure 1 illustrates the interaction between the different components, which we will detail in the following sections.

#### Vulnerability Modules

Vulnerability modules are the cornerstone of the Nepenthes platform. They enable an effective mechanism for collecting malware by emulating only the necessary parts of a vulnerable service. This approach reduces the resource requirements and allows for large-scale deployment. The emulation can be simple, often requiring minimal information at specific offsets in the network flow to deceive the malware into believing it can exploit the honeypot.

#### Shellcode Parsing Modules

These modules analyze the received payload and extract relevant information about the exploitation attempt. Currently, one shellcode parsing module can analyze all shellcodes found in the wild. The module first decodes the shellcode, typically encrypted with an XOR encoder, and then applies pattern detection to identify functions like `CreateProcess()` or generic URL patterns. If sufficient information is extracted, it is passed to the fetch modules. A more generic shellcode parsing module that emulates a Windows environment is under development.

#### Fetch Modules

Fetch modules are responsible for downloading files from remote locations. There are currently seven different fetch modules supporting protocols such as TFTP, HTTP, FTP, and csend/creceive (an IRC-based submission method). Custom protocols used by some malware are also supported. Ethical considerations are addressed by allowing the option to disable fetch modules, turning the system into a warning system that collects information without contacting external systems.

#### Submission Modules

Submission modules handle the successfully downloaded files. There are four types of submission modules:
- **File Storage Module**: Stores the file in a configurable location on the filesystem and can change ownership.
- **Central Database Module**: Submits the file to a central database for distributed logging.
- **Hierarchical Submission Module**: Submits the file to another Nepenthes instance, enabling a hierarchical structure.
- **Antivirus Vendor Module**: Submits the file to an antivirus vendor for further analysis.

#### Shell Emulation and Virtual Filesystem

For malware that spreads by providing a shell to the attacker, Nepenthes offers shell emulation. It emulates a basic Windows shell, supporting several commands and batch file execution. A virtual filesystem is implemented for each shell session, allowing for scalable and efficient file creation. This ensures that concurrent infection sessions do not interfere with each other. After the attack, the temporary file is analyzed, and the malware is automatically downloaded based on the extracted information.

### 2.2 Flexible Deployment

Nepenthes offers a flexible design that supports various deployment scenarios:
- **Local Sensor**: Deployed in a LAN, it collects and stores information locally.
- **Distributed Setup**: Information is collected by local sensors and forwarded to a higher-level sensor, enabling load distribution and centralized logging.
- **Hierarchical Structure**: Multiple levels of sensors send information to a central sensor, distributing the load and collecting information efficiently.
- **Remote Sensor via VPN**: Traffic is rerouted from a LAN to a remote Nepenthes sensor using a VPN tunnel, simplifying deployment and reducing maintenance.

### 2.3 Capturing New Exploits

Nepenthes can detect and respond to zero-day (0day) attacks. The portwatch and bridging modules track network traffic and help in analyzing new exploits. When a new exploit targets the platform, it triggers the initial steps of a vulnerability module. Divergence from the emulation can be detected, and the system can switch to a real honeypot or a specialized system for dynamic taint analysis, such as Argos. This approach allows for the capture of all aspects of the new attack and the extraction of response patterns.

### 2.4 Limitations

Despite its capabilities, the Nepenthes platform has several limitations:
- **Autonomous Spreading Malware**: Nepenthes is primarily effective against malware that propagates by scanning and exploiting vulnerable systems. Client-side honeypots are needed for detecting browser exploits.
- **Hitlist-Based Propagation**: Malware that uses hitlists to find vulnerable systems is difficult to detect. Becoming part of the hitlist could be a solution, but this is currently not implemented.
- **Stealthiness**: The presence of Nepenthes can be detected due to the large number of open TCP ports. To mitigate this, only specific vulnerability modules can be used, but this reduces the expressiveness.
- **Exploit Analysis**: Nepenthes does not comprehensively analyze the exploits targeted by malware. Static or dynamic analysis of the downloaded binary can overcome this limitation.

### 3. Results

Vulnerability modules are crucial for the Nepenthes platform. As of now, there are 21 vulnerability modules available. Table 1 provides an overview of selected modules, including references to related security advisories or brief summaries of their functions.