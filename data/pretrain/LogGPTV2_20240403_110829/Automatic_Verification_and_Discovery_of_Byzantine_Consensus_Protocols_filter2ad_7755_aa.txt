title:Automatic Verification and Discovery of Byzantine Consensus Protocols
author:Piotr Zielinski
Automatic Veriﬁcation and Discovery of Byzantine Consensus Protocols
Piotr Zieli´nski
Cavendish Laboratory, University of Cambridge, UK
PI:EMAIL
Abstract
Model-checking of asynchronous distributed protocols is
challenging because of the large size of the state and solu-
tion spaces. This paper tackles this problem in the context
of low-latency Byzantine Consensus protocols. It reduces
the state space by focusing on the latency-determining ﬁrst
round only, ignoring the order of messages in this round,
and distinguishing between state-modifying actions and
state-preserving predicates. In addition, the monotonicity
of the predicates and veriﬁed properties allows one to use
a Tarski-style ﬁxpoint algorithm, which results in an expo-
nential veriﬁcation speed-up.
This model checker has been applied to scan the space
of possible Consensus algorithms in order to discover new
ones. The search automatically discovered not only many
familiar patterns but also several interesting improvements
to known algorithms. Due to its speed and reliability, auto-
matic protocol design is an attractive paradigm, especially
in the notoriously difﬁcult Byzantine case.
1. Introduction
In the Consensus problem, a ﬁxed group of processes,
communicating through an asynchronous network, cooper-
ate to reach a common decision. Each of the processes pro-
poses a value, say a number, and then they all try to agree
on one of the proposals. Despite the apparent simplicity,
Consensus is universal: it can be used to implement any se-
quential object in a distributed and fault-tolerant way [11].
Consensus is surprisingly difﬁcult to solve in a fault-
tolerant manner, so that even if some processes fail, the oth-
ers will still reach an agreement. This is especially true in
the presence of malicious participants; protocols operating
in such settings are extremely subtle and complicated, and
the proofs of their correctness are rather lengthy. Moreover,
slight changes in the requirements often require a complete
redesign of the algorithm. A more efﬁcient approach is nec-
essary.
This paper proposes such an approach: automatic veriﬁ-
cation and discovery through model-checking. In automatic
veriﬁcation, the user provides a collection of decision rules
such as “if all four processes report to have proposed x, then
decide on x”. These rules are given to the model-checker,
which tests the correctness of the implied Consensus algo-
rithm. In automatic discovery, the user speciﬁes a set of la-
tency conditions such as “if at most one non-leader process
fails, then all correct processes must decide within two com-
munication steps.” A model-checker is then used to check
all possible Consensus algorithms that satisfy those condi-
tions, and output the correct ones if any.
The ﬁrst challenge is choosing a good model: it should
be general enough to express all “sensible” Consensus algo-
rithms, but sufﬁciently speciﬁc to avoid an intractably large
state space. Several such models have been used in the liter-
ature [26, 28], however, none of them allows for Byzantine
algorithms, which beneﬁt from automated veriﬁcation most.
Secondly, any sufﬁciently expressive model permits in-
ﬁnitely many correct Consensus algorithms, so we need a
criterion for selecting the “best” ones. This paper focuses
on the number of communication steps necessary to decide
in typical runs. This criterion allows us to concentrate on
the latency-determining ﬁrst round only, thereby reducing
the size of the state space. Nevertheless, we still need to
ensure that processes will always have enough information
to decide even if the ﬁrst round fails. The formalization
of the required properties is provided by the Optimistically
Terminating Consensus abstraction [30]. This abstraction
can handle malicious participants and is ﬂexible enough to
match the latencies of all known asynchronous Consensus
protocols in a single framework.
Depending on the chosen model, the search space can
be sufﬁciently small for a limited number of veriﬁcations,
however, performing it for millions of possible protocols
requires a different approach. The method presented in this
paper uses the monotonicity of Consensus properties. In-
stead of checking every possible state, the algorithm com-
putes the “minimal possibly violating state” and checks
whether that state actually violates the required properties.
The resulting exponential speed-up makes automatic dis-
covery practical.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Processes
Correctness
Honesty
Behaviour
 F
(cid:4)
P
(cid:5)
M
correct
faulty
faulty
honest
honest
malicious
according to the speciﬁcation
according to the speciﬁcation until it crashes
completely arbitrary
Figure 1. Categories of processes
Roadmap. Section 2 provides a short summary of the Op-
timistically Terminating Consensus framework (OTC), with
an emphasis on the concepts relevant to automated veriﬁca-
tion. The OTC properties are used in Section 3 to construct
an execution model and present an algorithm to verify the
correctness of OTC protocols. Section 4 uses automated
correctness testing to search the space of possible protocols
to discover new ones. Section 5 presents the results. Sec-
tion 6 concludes the paper.
1.1. Related work
A large amount of work has been done on asynchronous
Consensus protocols, see [23] for a survey. A number of al-
gorithms have been proposed, both for the crash-stop model
[4, 16, 19, 24] and for the Byzantine settings [3].
Automatic reasoning about protocols is common in secu-
rity protocol research [2, 5, 17, 18, 20]. In the area of agree-
ment protocols, Paxos [13] and its variants [7, 8, 15] seem
to have undergone the most signiﬁcant amount of formal
analysis [12, 14, 22, 27, 28]. Other work on formal veriﬁ-
cation and/or model checking of Consensus algorithms can
be found in [21, 26]. All those methods are restricted to
crash failures and veriﬁcation only.
Bar-David and Taubenfeld [1] used a combination of
model checking and program generation to automatically
discover new mutual exclusion algorithms. Apart from their
work, I am not aware of any previous attempt at automatic
discovery of fault-tolerant distributed algorithms.
2. Introduction to OTC
2.1. System model
Processes. This paper assumes a system consisting of a
ﬁxed number n of processes.
In the set of all processes
P = {p1, . . . , pn}, some processes F ⊆ P are faulty, and
some M ⊆ F are malicious (Figure 1). Processes do not
know sets F and M, however, they do know the sets F and
M of possible values of F and M. Note that the standard
model of at most f faulty processes out of which at most m
malicious is a special case:
F = { F ⊆ P | |F| ≤ f }, M = { M ⊆ P | |M| ≤ m}.
OTC
propose(x)
x
OTC
decide(x)
OTC
p1
p2
p3
p4
Figure 2. A run of Byzantine Consensus [3]
Channels. Processes communicate through asynchronous
reliable channels: messages sent from one correct process
to another correct process will eventually be received (reli-
ability) but the message delay is unbounded (asynchrony).
These assumptions are sufﬁcient to implement the ﬁrst
round of Consensus; to construct the entire protocol and
ensure its liveness, failure detectors or eventual synchrony
assumptions are needed, but these are protocol-independent
and do not affect the latency in typical runs [30].
2.2. Consensus
In Consensus, processes propose values and are expected
to eventually agree on one of them. The following holds:
Validity. The decision was proposed by some process.
Agreement. No two processes decide differently.
Termination. All correct processes eventually decide.
In the Byzantine model, these requirements apply only
to honest (non-malicious) processes. Since malicious pro-
cesses can undetectably lie about their proposals, I also as-
sume that Validity must be satisﬁed only if all processes are
honest in a particular run.
In the most popular approach to solve Consensus, a dis-
tinguished process, called the leader or coordinator, tries
to impose its proposal on the others. This succeeds if suf-
ﬁciently many processes accept the coordinator’s proposal.
Otherwise, another process becomes the coordinator and re-
peats the protocol. Coordinators keep changing until one of
them succeeds and makes all correct processes decide.
As an example, Figure 2 shows a single round the Con-
sensus protocol [3], in a four-process system with one pro-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Name
propose(x)
stop
decision(x)
valid(x)
possible(x)
Type
Meaning
action
action
predicate
predicate
predicate
propose x
stop processing
if true, then x is the decision
if true, then an honest process proposed x
if any process ever decides on x, then true
Deﬁnition in the OT (P, P, 1) example
broadcast x if no stop before
broadcast ⊥ if no propose before
x received from all 4 processes
x received from more than 1 process
non-x received from at most 1 process
Figure 3. Summary of the primitives provided by OTC
cess possibly maliciously faulty:
F = M = {∅,{p1},{p2},{p3},{p4}}
The coordinator p1 broadcasts its proposal. In the second
step, processes rebroadcast the proposal received, to protect
against a malicious coordinator broadcasting different pro-
posals. In the third step, they broadcast again, this time to
ensure the recoverability of the decision in case of failures,
and decide.
The ﬁrst round can only succeed if p1 is correct. There-
fore, if no decision has been made after a while, the next
round is started with another coordinator, and so on, until
all correct processes decide.
2.3. Optimistically Terminating Consensus
Optimistically Terminating Consensus (OTC) [30] is a
formalization of the grey cloud in Figure 2. Various Con-
sensus protocols can be constructed by changing the imple-
mentation of the OTC in one or more rounds, and keeping
the rest of the algorithm intact.
In fact, it is possible to
match the latencies of all known asynchronous Consensus
algorithms just by manipulating the ﬁrst round OTC [30].
This is why this paper focuses on constructing the ﬁrst-
round OTC only.
Treated as a black-box, OTC communicates with the en-
vironment with predicates and actions (Figure 3). Actions
can change a process’ state (e.g., send messages) but they
do not return any information. On the other hand, predicates
do not affect the state but return information. In a sense, the
difference between predicates and actions is similar to that
between reads and writes.
OTC-based Consensus algorithms [30] proceed in the
same way as that in Figure 2. When a process receives
the coordinator’s proposal x, it executes the OTC action
propose(x). Each process monitors its decision(y) predi-
cate for all y; when it becomes true, y is the decision.
If the coordinator fails, some or all processes might never
decide. When processes suspect this is the case, they exe-
cute action stop of the ﬁrst OTC, and start the second round
with another coordinator. Since some processes might have
decided in the ﬁrst round, the second coordinator must
decision(x)
at some honest process
Standard Validity
x proposed
by some honest process
StandardAgreement
e m e
P
o
s
s
i
b
i