    NetAgent 公司的长谷川阳介在"@IT"上连载了《教科书上学不到 Web
    应用安全知识》系列文章，围绕着浏览器关于 XSS
    的特有问题等进行了浅显易懂的讲解。
    -   
## **4.4 SQL 调用相关的安全隐患** {#text00000.html#nav_point_25}
大多数 Web 应用都使用 SQL 来访问关系型数据库。但如果程序中使用 SQL
语句访问数据库的实现代码不完善，就会产生 SQL
注入漏洞。接下来，本节就将对 SQL 注入漏洞做一介绍。
### **4.4.1 SQL 注入** {#text00000.html#nav_point_26}
#### **概要**
SQL 注入漏洞是由于 SQL
语句的调用方法不完善而产生的安全隐患。一旦应用中存在 SQL
注入漏洞，就可能会造成如下影响。值得注意的是，以下影响中攻击者都能够直接对服务器实施主动攻击，而不需要用户的参与。
-   数据库内的信息全部被外界窃取
-   数据库中的内容被篡改
-   登录认证被绕过（应用程序登录不需要用户名和密码）
-   其他，例如服务器上的文件被读取或修改、服务器上的程序被执行等
可见 SQL
注入漏洞的破坏力极大，因此，作为程序开发人员，在编程时务必要确保不引入
SQL 注入漏洞。其中，使用静态占位符调用 SQL
语句就是一种有效的对策。详情请参考本节的"对策"。
**SQL 注入漏洞总览**
![{%}](Image00069.jpg)
#### **攻击手段与影响**
接下来，笔者将使用示例脚本来讲解 SQL 注入攻击的方法与影响。
-   **示例脚本解说**
    以下 PHP
    脚本的作用为检索数据库（PostgreSQL）内的图书库存，该脚本含有 SQL
    注入漏洞。
    > **代码清单 /44/44-001.php**
    ``` 代码无行号
     图书 ID 书名  作者名  出版社 
     出版年份  价格 
    \n";
        for ($j = 0; $j " . $row[$j] . "\n";
        }
        echo "\n";
      }
      pg_close($con);
    ?>
    ```
    首先来看一下正常情况下脚本的运行情况，比如，使用如下 URL
    来检索作者为 Shakespeare 的图书。
    ``` 代码无行号
    http://example.jp/44/44-001.php?author=Shakespeare
    ```
    ![{%}](Image00070.jpg)
    **图 4-29 正常调用示例**
    接下来就让我们来看一下针对此脚本的攻击方法。
-   **错误消息导致的信息泄漏**
    以下 URL 的目的在于攻击 44-001.php 以导致信息泄露。使用该 URL
    打开页面，显示结果如图 4-30 所示。
    ``` 代码无行号
    http://example.jp/44-001.php? author='+and+cast((select+id||':'||pwd+from+users+offset+0+limit+1)+as+integer)>1--
    ```
    ![{%}](Image00071.jpg)
    **图 4-30 错误消息导致的信息泄漏**
    错误消息中显示了用户名和密码为 yamada:pass1。这就是利用 SQL
    注入攻击致使信息泄露的手段。
    此攻击的核心部分为下面的子查询语句。
    ``` 代码无行号
    (select id||':'||pwd from users offset 0 limit 1)
    ```
    该子查询查找 users 表中第一条数据的 id 和
    pwd（用户名和密码）字段后，返回将两者以冒号相连后的字符串，即上图中的
    yamada:pass1。然后，语句中尝试将字符串 yamada:pass1 通过 cast
    函数转换为 integer
    类型，但由于转换类型时出错，页面上显示了错误消息。
    此处并不需要透彻理解这条 SQL 语句，但一定要知道通过 SQL
    注入攻击能够取得数据库中的任意信息。即使 SQL
    注入漏洞存在于一些不起眼的地方，也可能会直接导致网站的重要信息泄漏。
    另外，上述 SQL
    注入攻击也是恶意利用错误消息的典型案例。因此，开发时应该注意不要将程序内部的错误内容显示在错误消息中。
-   **UNION SELECT 致使的信息泄漏**
    SQL
    注入引发的信息泄漏中，除了利用错误消息的方法外，还有一种手段是使用
    UNION SELECT。UNION SELECT 的作用为将两个 SQL 语句的检索结果求和。
    下面我们来看一个利用 UNION SELECT 致使信息泄漏的例子。执行以下 URL
    后，页面显示结果如图 4-31
    所示。从图中可以看出，本应显示图书信息的页面上显示了用户的个人信息。
    ``` 代码无行号
    http://example.jp/44/44-001.php?author='+union+select+id,pwd,name,addr,null,null,null+from+users--
    ```
    ![{%}](Image00072.jpg)
    **图 4-31 使用 UNION SELECT 进行攻击的结果**
    此处不对攻击的详情进行说明，读者只需记住一旦使用 UNION SELECT
    的攻击得逞，仅此一次攻击就能使大量信息泄漏。
-   **使用 SQL 注入绕过认证**
    当登录页面存在 SQL
    注入漏洞时，认证处理就能被绕过，从而导致在不知道密码的情况下也能成功登录应用。
    以下就是一个含有 SQL
    注入漏洞的登录页面。首先是用户名和密码的输入页面，为了方便演示，此处密码输入框的
    type 属性使用了 text。
    > **代码清单 /44/44-002.html**
    ``` 代码无行号
     请登录 
    用户名 
    密码 
    ```
    下面是接收用户名和密码后进行登录处理的脚本。
    > **代码清单 /44/44-003.php**
    ``` 代码无行号
     0) { // 如果存在 SELECT 结果则登录成功
        $_SESSION['id'] = $id;
        echo ' 登录成功 ';
      } else {
        echo ' 登录失败 ';
      }
      pg_close($con);
    ?>
    ```
    正常情况下，登录页面中输入用户名 yamada 和密码 pass1
    后就能认证成功。
    ![{%}](Image00073.jpg)
    **图 4-32 认证成功例**
    下面我们来看一下对此登录页面进行攻击的例子。假设攻击者在不知道密码的情况下输入以下密码。
    ``` 代码无行号
    ' or 'a'='a
    ```
    这时登录竟然也成功了。
    ![{%}](Image00074.jpg)
    **图 4-33 认证被绕过**
    此时，拼接后的 SQL 语句如下。阴影部分为密码输入框内输入的字符串。
        SELECT * FROM users WHERE id ='yamada' and pwd = '' OR 'a'='a
        '
    SQL 语句的末尾被添加了 `OR 'a' = 'a'` ，因此 WHERE
    语句始终保持成立状态。
    由此可知，如果登录页面存在 SQL
    注入漏洞，就可能使密码输入框形同虚设。
-   **通过 SQL 注入攻击篡改数据**
    接下来向大家介绍一下使用 SQL 注入攻击篡改页面数据的例子。首先用以下
    URL 打开页面。
        http://example.jp/44/44-001.php?author=';update+books+set+title%3D'cracked!'+where+id%3d'1001
        '--
    然后再次检索
    Shakespeare，页面显示就如下图所示。"仲夏夜之梦"变成了"cracked
    ！"，字体也变成了斜体。
    ![{%}](Image00075.jpg)
    **图 4-34 篡改数据的例子**
    第一次打开页面时执行的 SQL
    文如下。阴影部分为外界传入的字符串，此处为了方便阅读加入了换行。\--
    后面的字符被当成 SQL 文的注释而被忽略。
        SELECT * FROM books WHERE author ='';update books set title='cracked!' where id='1001'--
        'ORDER BM id
    同时我们看到 HTML 的 i 元素也生效了，由此可以得知插入的 HTML
    标签是有效的。而在实际的攻击中，攻击者使用 iframe 或 script
    元素等发动攻击，使用户的计算机感染病毒的案例可以说是层出不穷。