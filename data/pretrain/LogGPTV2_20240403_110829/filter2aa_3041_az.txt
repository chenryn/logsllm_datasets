不同的错误值，如代码清单 7-7 所示。 
代码清单 7-7  runner/runner.go：第 30 行到第 34 行
30 // ErrTimeout 会在任务执行超时时返回 
31 var ErrTimeout = errors.New("received timeout") 
32 
33 // ErrInterrupt 会在接收到操作系统的事件时返回 
34 var ErrInterrupt = errors.New("received interrupt") 
第一个 error 接口变量名为 ErrTimeout。这个错误值会在收到超时事件时，由 Start
方法返回。第二个 error 接口变量名为 ErrInterrupt。这个错误值会在收到操作系统的中断
事件时，由 Start 方法返回。
现在我们来看一下用户如何创建一个 Runner 类型的值，如代码清单 7-8 所示。
代码清单 7-8  runner/runner.go：第 36 行到第 43 行
36 // New 返回一个新的准备使用的 Runner 
37 func New(d time.Duration) *Runner { 
38 
 return &Runner{ 
39 
 interrupt: make(chan os.Signal, 1), 
40 
 complete:  make(chan error), 
41 
 timeout:   time.After(d), 
42 
 } 
43 } 
代码清单 7-8 展示了名为 New 的工厂函数。这个函数接收一个 time.Duration 类型的值，
并返回 Runner 类型的指针。这个函数会创建一个 Runner 类型的值，并初始化每个通道字段。
因为 task 字段的零值是 nil，已经满足初始化的要求，所以没有被明确初始化。每个通道字段
都有独立的初始化过程，让我们探究一下每个字段的初始化细节。 
通道 interrupt 被初始化为缓冲区容量为 1 的通道。这可以保证通道至少能接收一个来自
语言运行时的 os.Signal 值，确保语言运行时发送这个事件的时候不会被阻塞。如果 goroutine
没有准备好接收这个值，这个值就会被丢弃。例如，如果用户反复敲 Ctrl+C 组合键，程序只会
在这个通道的缓冲区可用的时候接收事件，其余的所有事件都会被丢弃。 
通道 complete 被初始化为无缓冲的通道。当执行任务的 goroutine 完成时，会向这个通道
发送一个 error 类型的值或者 nil 值。之后就会等待 main 函数接收这个值。一旦 main 接收
了这个 error 值，goroutine 就可以安全地终止了。
最后一个通道 timeout 是用 time 包的 After 函数初始化的。After 函数返回一个
time.Time 类型的通道。语言运行时会在指定的 duration 时间到期之后，向这个通道发送一
个 time.Time 的值。
现在知道了如何创建并初始化一个 Runner 值，我们再来看一下与 Runner 类型关联的方
法。第一个方法 Add 用来增加一个要执行的任务函数，如代码清单 7-9 所示。
代码清单 7-9  runner/runner.go：第 45 行到第 49 行
45 // Add 将一个任务附加到 Runner 上。这个任务是一个 
46 // 接收一个 int 类型的 ID 作为参数的函数 
47 func (r *Runner) Add(tasks ...func(int)) { 
48 
 r.tasks = append(r.tasks, tasks...) 
49 } 
代码清单 7-9 展示了 Add 方法，这个方法接收一个名为 tasks 的可变参数。可变参数可以
接受任意数量的值作为传入参数。这个例子里，这些传入的值必须是一个接收一个整数且什么都
不返回的函数。函数执行时的参数 tasks 是一个存储所有这些传入函数值的切片。
现在让我们来看一下 run 方法，如代码清单 7-10 所示。
代码清单 7-10  runner/runner.go：第 72 行到第 85 行
72 // run 执行每一个已注册的任务 
73 func (r *Runner) run() error { 
74 
 for id, task := range r.tasks { 
75 
 // 检测操作系统的中断信号 
76 
 if r.gotInterrupt() { 
77 
 return ErrInterrupt 
78 
 } 
79 
80 
 // 执行已注册的任务 
81 
 task(id) 
82 
 } 
83 
84 
 return nil 
85 } 
代码清单 7-10 的第 73 行的 run 方法会迭代 tasks 切片，并按顺序执行每个函数。函数会
在第 81 行被执行。在执行之前，会在第 76 行调用 gotInterrupt 方法来检查是否有要从操作
系统接收的事件。 
代码清单 7-11 中的方法 gotInterrupt 展示了带 default 分支的 select 语句的经典
用法。 
代码清单 7-11  runner/runner.go：第 87 行到第 101 行
 87 // gotInterrupt 验证是否接收到了中断信号 
 88 func (r *Runner) gotInterrupt() bool { 
 89 
 select { 
 90 
 // 当中断事件被触发时发出的信号 
 91 
 case <-r.interrupt: 
 92 
 // 停止接收后续的任何信号 
 93 
 signal.Stop(r.interrupt) 
 95 
 return true 
 96 
 97 
 // 继续正常运行 
 98 
 default: 
 99 
 return false 
100 
 } 
101 } 
在第 91 行，代码试图从 interrupt 通道去接收信号。一般来说，select 语句在没有任
何要接收的数据时会阻塞，不过有了第 98 行的 default 分支就不会阻塞了。default 分支会
将接收 interrupt 通道的阻塞调用转变为非阻塞的。如果 interrupt 通道有中断信号需要接
收，就会接收并处理这个中断。如果没有需要接收的信号，就会执行 default 分支。
当收到中断信号后，代码会通过在第 93 行调用 Stop 方法来停止接收之后的所有事件。之
后函数返回 true。如果没有收到中断信号，在第 99 行该方法会返回 false。本质上，
gotInterrupt 方法会让 goroutine 检查中断信号，如果没有发出中断信号，就继续处理工作。 
这个包里的最后一个方法名为 Start，如代码清单 7-12 所示。
代码清单 7-12  runner/runner.go：第 51 行到第 70 行
51 // Start 执行所有任务，并监视通道事件 
52 func (r *Runner) Start() error { 
53 
 // 我们希望接收所有中断信号 
54 
 signal.Notify(r.interrupt, os.Interrupt) 
55 
56 
 // 用不同的 goroutine 执行不同的任务 
57 
 go func() { 
58 
 r.complete <- r.run() 
59 
 }() 
60 
61 
 select { 
62 
 // 当任务处理完成时发出的信号 
63 
 case err := <-r.complete: 
64 
 return err 
65 
66 
 // 当任务处理程序运行超时时发出的信号 
67 
 case <-r.timeout: 
68 
 return ErrTimeout 
69 
 } 
70 } 
方法 Start 实现了程序的主流程。在代码清单 7-12 的第 52 行，Start 设置了 gotInterrupt
方法要从操作系统接收的中断信号。在第 56 行到第 59 行，声明了一个匿名函数，并单独启动
goroutine 来执行。这个 goroutine 会执行一系列被赋予的任务。在第 58 行，在 goroutine 的内部
调用了 run 方法，并将这个方法返回的 error 接口值发送到 complete 通道。一旦 error 接
口的值被接收，该 goroutine 就会通过通道将这个值返回给调用者。 
创建 goroutine 后，Start 进入一个 select 语句，阻塞等待两个事件中的任意一个。如果
从 complete 通道接收到 error 接口值，那么该 goroutine 要么在规定的时间内完成了分配的工
作，要么收到了操作系统的中断信号。无论哪种情况，收到的 error 接口值都会被返回，随后
方法终止。如果从 timeout 通道接收到 time.Time 值，就表示 goroutine 没有在规定的时间内
完成工作。这种情况下，程序会返回 ErrTimeout 变量。
现在看过了 runner 包的代码，并了解了代码是如何工作的，让我们看一下 main.go 代码文
件中的测试程序，如代码清单 7-13 所示。 
代码清单 7-13  runner/main/main.go
01 // 这个示例程序演示如何使用通道来监视 
02 // 程序运行的时间，以在程序运行时间过长 
03 // 时如何终止程序 
03 package main 
04 
05 import ( 
06 
 "log" 
07 
 "time" 
08 
09 
 "github.com/goinaction/code/chapter7/patterns/runner" 
10 ) 
11 
12 // timeout 规定了必须在多少秒内处理完成 
13 const timeout = 3 * time.Second 
14 
15 // main 是程序的入口 
16 func main() { 
17 
 log.Println("Starting work.") 
18 
19 
 // 为本次执行分配超时时间 
20 
 r := runner.New(timeout) 
21 
22 
 // 加入要执行的任务 
23 
 r.Add(createTask(), createTask(), createTask()) 
24 
25 
 // 执行任务并处理结果 
26 
 if err := r.Start(); err != nil { 
27 
 switch err { 
28 
 case runner.ErrTimeout: 
29 
 log.Println("Terminating due to timeout.") 
30 
    os.Exit(1) 
31 
 case runner.ErrInterrupt: 
32 
 log.Println("Terminating due to interrupt.") 
33 
 os.Exit(2) 
34 
 } 
35 
 } 
36 
37 
 log.Println("Process ended.") 
38 } 
39 
40 // createTask 返回一个根据 id  
41 // 休眠指定秒数的示例任务 
42 func createTask() func(int) { 
43 
 return func(id int) { 
44 
 log.Printf("Processor - Task #%d.", id) 
45 
 time.Sleep(time.Duration(id) * time.Second) 
46 
 } 
47 } 
代码清单 7-13 的第 16 行是 main 函数。在第 20 行，使用 timeout 作为超时时间传给 New
函数，并返回了一个指向 Runner 类型的指针。之后在第 23 行，使用 createTask 函数创建了
几个任务，并被加入 Runner 里。在第 42 行声明了 createTask 函数。这个函数创建的任务只
是休眠了一段时间，用来模拟正在进行工作。增加完任务后，在第 26 行调用了 Start 方法，main
函数会等待 Start 方法的返回。
当 Start 返回时，会检查其返回的 error 接口值，并存入 err 变量。如果确实发生了错
误，代码会根据 err 变量的值来判断方法是由于超时终止的，还是由于收到了中断信号终止。
如果没有错误，任务就是按时执行完成的。如果执行超时，程序就会用错误码 1 终止。如果接收
到中断信号，程序就会用错误码 2 终止。其他情况下，程序会使用错误码 0 正常终止。 
7.2  pool 
本章会介绍pool包
①
① 本书是以 Go 1.5 版本为基础写作而成的。在 Go 1.6 及之后的版本中，标准库里自带了资源池的实现
（sync.Pool）。推荐使用。——译者注
。这个包用于展示如何使用有缓冲的通道实现资源池，来管理可以在
任意数量的goroutine之间共享及独立使用的资源。这种模式在需要共享一组静态资源的情况（如
共享数据库连接或者内存缓冲区）下非 常有用。如果goroutine需要从池里得到这些资源中的一个，
它可以从池里申请，使用完后归还到资源池里。 
让我们看一下 pool 包里的 pool.go 代码文件，如代码清单 7-14 所示。
代码清单 7-14  pool/pool.go
 01 // Fatih Arslan 和 Gabriel Aszalos 协助完成了这个示例 
 02 // 包 pool 管理用户定义的一组资源 
 03 package pool 
 04 
 05 import ( 
 06 
 "errors" 
 07 
 "log" 
 08 
 "io" 
 09 
 "sync" 
 10 ) 
 11 
 12 // Pool 管理一组可以安全地在多个 goroutine 间 
 13 // 共享的资源。被管理的资源必须 
 14 // 实现 io.Closer 接口 
 15 type Pool struct { 
 16 
 m 
 sync.Mutex 
 17 
 resources  chan io.Closer 
 18 
 factory    func() (io.Closer, error) 
 19 
 closed     bool 
 20 } 
 21 