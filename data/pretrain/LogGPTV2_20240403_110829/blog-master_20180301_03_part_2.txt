 (500029,2181)  
 (499998,2174)  
(20 rows)  
```  
对比原始数据，精确度也蛮OK的  
```  
select c1,count(*) from test where id<=10 group by c1 order by count(*) desc limit 20;  
   c1   | count   
--------+-------  
 500003 |  2250  
 499875 |  2238  
 499967 |  2232  
 500004 |  2227  
 499999 |  2212  
 499981 |  2208  
 499902 |  2206  
 500033 |  2202  
 500010 |  2200  
 500014 |  2198  
 500005 |  2197  
 499924 |  2193  
 499977 |  2193  
 499965 |  2193  
 500022 |  2186  
 499978 |  2186  
 500035 |  2182  
 499982 |  2182  
 500016 |  2181  
 500029 |  2181  
(20 rows)  
```  
8、查看某个值的出现频率  
```  
postgres=# select cms_topn_frequency(c1_topn, 500000) from topn_test where id=1;  
 cms_topn_frequency   
--------------------  
                206  
(1 row)  
```  
与精确值一致  
```  
postgres=# select count(*) from test where id=1 and c1=500000;  
 count   
-------  
   206  
(1 row)  
```  
如果输入了一个不在TOP-N中的值，返回计数0.  
```  
postgres=# select cms_topn_frequency(c1_topn, 50000) from topn_test where id=1;  
 cms_topn_frequency   
--------------------  
                  0  
(1 row)  
```  
9、查看某个cms_topn字段的统计信息  
```  
postgres=# select cms_topn_info(c1_topn) from topn_test where id=1;   
                    cms_topn_info                      
-----------------------------------------------------  
 Sketch depth = 5, Sketch width = 2719, Size = 106kB  
(1 row)  
```  
## 例子2  
既然我们可以批量聚合，也可以利用PostgreSQL的规则实现实时聚合，生成cms_topn的统计值。  
1、在原始表上面，增加一个规则，当数据写入时，自动将值添加到topn统计表中。  
```  
create rule r1 as on insert to test   
  do also   
  insert into topn_test values (NEW.id, cms_topn_add(cms_topn(20), NEW.c1))   
    on conflict (id) do update   
      set c1_topn=cms_topn_add(topn_test.c1_topn, NEW.c1);  
CREATE RULE  
```  
2、现在往原始表写入数据，就会自动将数据合并到topn了。  
3、其他流式计算的方法，参考：  
[《PostgreSQL 流式统计 - insert on conflict 实现 流式 UV(distinct), min, max, avg, sum, count ...》](../201711/20171123_02.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 32 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 31 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(读写大吞吐并测)》](../201711/20171107_32.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 27 - (OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)    
[《(流式、lambda、触发器)实时处理大比拼 - 物联网(IoT)\金融,时序处理最佳实践》](../201705/20170518_01.md)    
## 小结  
cms_topn为概率计算的一种，用于生成高频词、高频词的出现次数。  
使用cms_topn，按时间区间进行统计，结合WINDOW窗口用法，可以非常快速的生成同比、环比、滑动窗口等top-n的数据。  
我在另一篇文档中，提到过HLL的估值计算和滑窗分析，感兴趣的朋友可以观看：  
[《阿里云 PostgreSQL 产品生态；案例、开发实践、管理实践、学习资料、学习视频》](../201801/20180121_01.md)    
包含大量案例、开发实践。  
## 参考  
[《生成泊松、高斯、指数、随机分布数据 - PostgreSQL 9.5 new feature - pgbench improve, gaussian (standard normal) & exponential distribution》](../201506/20150618_01.md)    
[《Greenplum 最佳实践 - 估值插件hll的使用(以及hll分式聚合函数优化)》](../201608/20160825_02.md)    
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 3》](../201302/20130228_01.md)    
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 2》](../201302/20130227_01.md)    
[《PostgreSQL hll (HyperLogLog) extension for "State of The Art Cardinality Estimation Algorithm" - 1》](../201302/20130226_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")