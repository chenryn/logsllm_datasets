−
−
1.10
0.97
0.97
0.97
0.97
0.98
0.98
1.11
1.15
0.93
0.97
0.95
1.00
−
−
−
0.95
0.98
0.99
1.03
1.03
1.04
1.05
0.93
2http://snap.stanford.edu/data,
http://konect.uni-koblenz.de,
http://socialcomputing.asu.edu/pages/
datasets
Figure 3: Effect of parameter cf on the number of nodes in the
system
Figure 4: Lookup success rate for varying attack ratio g/n]
Figure 5: Comparison with X-Vine for R = 5
In all of our experiments, we simulate for a 31-bit ID space.
Unless otherwise speciﬁed, we use default system values of chunk-
factor cf = 0.65, redundancy R = 7, and Kad parameters α = 5,
β = 7, and bucket size k = 7. Although the redundancy param-
eters (R, α, and β) may seem high, we show in Section 6.2.4 that
the overheads for lookups are quite reasonable.
6.1 Building the Network and Joining of At-
tackers
To build the bootstrap tree, we emulate the process of nodes join-
ing via existing connections in a social network graph. Although
Persea does not rely on the structure of the social graph for its se-
curity properties, we use real social network graphs to provide a
realistic basis for the choices that nodes make in building the tree.
To show that Persea will work for a variety of underlying so-
cial networks, we evaluate over six different social networks2with
a range of mixing times. We evaluate Persea in simulations for
ﬁve social network datasets: advogato (adv), hamsterster (ham),
youtube (ytub), ﬂickr (ﬂic), and catster (cat), and one collaboration
network: ca-AstroPh (astro). ham, ﬂic, ytub, and cat are social
networks drawn from users on the Hamsterster.com, Flickr.com,
Youtube.com, and Catster.com Websites, respectively. Table 2 shows
the sizes and mixing times of the network datasets. We measure the
mixing times of these networks by using the code and procedures
 0 20 40 60 80 100 120 0 0.2 0.4 0.6 0.8 1Nodes (thousands)Chunk Factor cfhamadvfliccatytubastro 85 90 95 100 0 0.2 0.4 0.6 0.8 1Lookup success rate (%)g/nhamadvfliccatytubastro 95 96 97 98 99 100 0 0.02 0.04 0.06 0.08 0.1Lookup success rate (%)g/nPerseaX-Vine (succ=20)X-Vine (succ=10)81(a) Varying attackers per attack edge (g/n =
0.10)
(b) Varying percentage of node failure
(c) Varying R (g/n = 0.50)
Figure 6: Lookup success rates in Persea. Note the different y-axis ranges.
6.2 Results
the ratio of attack edges to honest nodes is not small.
cial networks.
In this section, we justify our claims through the results of sim-
ulation. We also analyze the effects of changing parameters and
report the results for overhead.
6.2.1 Justiﬁcation of claims
In this paper, we make the following claims about Persea:
• Claim I: Persea provides a high lookup success rate, even when
• Claim II: Persea works well for both fast- and slow-mixing so-
• Claim III: The hierarchical node ID distribution conﬁnes the
• Claim IV: The lookup success rate in Persea is not signiﬁcantly
• Claim V: Even when a signiﬁcant fraction of nodes fail simulta-
affected by varying the number of attackers per attack edge.
attackers in considerably smaller regions of ID space.
neously, lookups should still succeed.
Claims I and III-V all speak to Design Goal #1 of offering Sybil-
resistent lookups. Claim II concerns Design Goal #2 of not depend-
ing on the structure of the underlying social network. We justify our
claims through our simulation experiments.
Claim I.
In Persea, we get a 100% lookup success rate for up to
g/n = 0.45 in a network of 149, 700 honest nodes (Figure 4).
When g/n = 1.0 in the largest network in our evaluation, Persea’s
lookup success rate is 95.6%. In comparison, X-Vine only shows
results for g/n up to 0.1, where the success rate is already below
100% [19]. We directly compare Persea with X-Vine in Figure 5,
which is limited to at most g/n = 0.07 using results from Mittal
et al. [19]. See the Appendix for details. Persea performs simi-
larly to X-Vine using 20 successors per node. Wh¯anau has signif-
icantly lower success rates for g/n ≥ 0.15 [11] and can be ex-
panded to improve success rates at the cost of greatly increased
overheads [12].
Persea’s DHT is based on Kad, which originally did not have
any protections against the Sybil attack. Cholez et al. report that
recent versions of Kad clients (aMule and eMule) attempt to pro-
tect against Sybil attacks by restricting IP addresses from appearing
more than once in a node’s k-buckets [6]. This does not affect our
attacker, who we assume to have a large number of IP addresses,
e.g. by running a botnet. We evaluated Kad in our experiments as
well. For g/n = 0.1, the lookup success rate in Kad is 30% in
cat and 40% in ﬂic, both much worse than Persea.
Claim II. For these experiments, we select six networks with mix-
ing times varying from 2.3 steps (fast-mixing) to 11.5 steps (slow-
mixing) (Table 2). Using the lookup results when g/n = 1.0,
we do ﬁnd an inverse correlation between mixing time and lookup
success (r(4) = 0.60, p = 0.1). Though it is not statistically
signiﬁcant, we do note that Persea performed the worst on two of
the slowest mixing graphs (ﬂic and astro). It is possible that faster
mixing leads to better distribution of ID space among honest nodes,
though we have not investigated this in detail. Nevertheless, the
lookup results remain reasonable for these social networks. When
g/n = 0.5, Persea has a success rate of 96.2% on ﬂic, the slowest
mixing graph, and 94.7% on astro.
In tables showing lookup overhead (Table 5, 6, and 7) and the
amount of attacker-controlled ID space (Table 4), we show the mix-
ing time in parentheses after the network name. Slower mixing net-
works also have higher overheads, though all overheads are quite
reasonable for all six networks. The amount of attacker-controlled
ID space does not seem to be correlated with mixing time.
Claim III.
In Persea, the hierarchical node ID distribution limits
the attacker nodes to a small fraction of the ID space, even for a
signiﬁcant number of attack edges. Table 4 shows the fraction of
ID space controlled by the attacker. Even for g/n = 1.0, no more
than 0.9% of the ID space is controlled by attacker nodes.
Claim IV. When an attacker joins the system, it can invite more
malicious nodes. However, the lookup success rate in Persea should
not be signiﬁcantly affected by increasing the number of attackers
per attack edge, since the hierarchical node ID distribution limits
the attackers to isolated regions in the ID space. To test this, we
increase the number of attackers per attack edge from one to ﬁfty,
which makes the number of attackers become 60% of total nodes in
the network. We keep g/n = 0.10 ﬁxed. For example, the lookup
success rate is 99.5% in ytub and 99% in ham and cat when the
number of attackers per attack edge is 50 (Figure 6(a)). We see no
drops in performance in any network when the number of attackers
per attack edges grows above 25.
Claim V. We evaluate the performance of Persea under node fail-
ure. We are interested in the static resilience of our system, i.e., the
lookup success rate after a percentage of nodes in the system fail
simultaneously. This is a worst-case version of a system with churn
Table 4: Fraction of ID space occupied by the attackers for
varying g/n
g/n
0.10
0.50
0.80
1.0
adv (2.3)
ham (3.0)
ytub (3.0)
astro (8.0)
ﬂic (11.5)
cat (8.0)
0.0004
0.0005
0.001
0.0003
0.001
0.0007
0.001
0.0006
0.004
0.001
0.005
0.003
0.002
0.001
0.006
0.002
0.007
0.006
0.003
0.002
0.007
0.003
0.009
0.007
 90 92 94 96 98 100 0 10 20 30 40 50Lookup success rate (%)Attackers per attack edgehamadvfliccatytubastro 94 95 96 97 98 99 100 0 2 4 6 8 10 12 14Lookup success rate (%)Node failure (%)hamadvfliccatytubastro 0 20 40 60 80 100 2 4 6 8 10Lookup success rate (%)Redundancy Rhamadvfliccatytubastro82(a) Nodes queried α
(b) Nodes returned β
(c) k-bucket size
Figure 7: Lookup success rate for varying Kad-based system parameters [g/n = 0.50]
ID ownership distribution
6.2.3
We now examine the distribution of IDs across nodes. Figure 8
shows the distribution of IDs when using cat, the largest network on
which we tested. In vanilla Persea, with in-order ID distribution,
some nodes own 11.4% of the ID space. With our balanced ap-
proach, however, no node owns more than 0.077% of the ID space.
The balanced approach provides much more even distribution of
IDs to the peers.
6.2.4 Overheads
We now discuss how our system meets Design Goal #4 of hav-
ing moderate overheads. One overhead in DHTs is maintaining
routing tables due to churn, e.g. by using heartbeat messages. Mit-
tal et al. report that Wh¯anau has an average routing table size of
20,000 in a network of 100,000 nodes, leading to very high mainte-
nance costs [19]. In our experiments, however, Persea systems had
between 10.1 and 68.1 routing table entries per node for different
networks. This suggests moderate maintenance costs and is in line
with other DHTs, including X-Vine.
Another overhead is in lookup costs, as measured by the number
of messages and the hop count, the number of nodes required to
reach a lookup target. In Persea, the certiﬁcate of a peer is stored
in R nodes in the DHT, and the source retrieves them for vali-
dation by using the lookup mechanism (§4.4). Thus, the lookup
overhead shown in Table 5 also includes the overhead for the re-
trieval of the certiﬁcates of a node. The number of messages is
quite reasonable at less than 27 in all cases. As for hop count, Ta-
ble 5 shows that the average hop count in Persea is low, e.g., 3.48
for g/n = 1.0 in the 149,700-node cat network. In contrast, for
topologies with 100, 000 nodes, X-Vine requires 10-15 hops for
routing [19]. Wh¯anau has a ﬁxed hop count of two.
Increasing the rate of node failure does not greatly increase the
average hop count and messages during lookup in Persea. Results
(shown in Table 6 in the Appendix) show that for 15% node fail-
ure in the largest network in our evaluation, the average hop count
per lookup increases by only 0.31. Finally, we ﬁnd that increasing
the number of attackers per attack edge has a small impact on the
lookup overhead in Persea, as shown in Table 7 (in the Appendix).
7. CONCLUSION
Persea leverages the social relationships among honest peers to
build a Sybil-resistant DHT that does not depend on the assump-
tions of a fast-mixing social network and a small number of attack
edges. Persea also provides resilience against attacks (denial of ser-
vice, node ID hijacking, and node insertion) launched by attacker
nodes.
We see Persea as a ﬁrst step in exploring mechanisms for using
one’s social network as an identiﬁer and leveraging that for secu-
rity. It is well known that social network information is strongly
identifying [21], but it is non-obvious as to how we can convert
Figure 8: Empirical CDF of ID ownership in the catster net-
work
in which the nodes fail and routing updates have not yet propagated
to any peers. Figure 6(b) depicts the lookup success rate as a func-
tion of the percentage of nodes that fail simultaneously, averaged
over 10, 000 lookups. The results show that the lookup success rate
remains 100% in the largest network of our evaluation, even when
10% of nodes fail. We do not add any malicious peers during this
experiment. In Figure 9 (in the Appendix), we present the results
of an experiment in which we vary the percentage of node failure
and have attackers, with g/n = 0.1.
6.2.2 Varying system parameters
We now examine the effect of changing the key system parame-
ters. When we increase redundancy R, nodes will store each (key,
value) pair in more nodes and consequently lookup the key in more
nodes. Thus, a larger value of R will result in better lookup perfor-
mance at the cost of greater overheads. In Figure 6(c), we see that
success rates appear to level off at R = 7. When β is increased,
more nodes are returned to the source by each of α nodes in an
iteration. We get the maximum lookup success rates for α = 5
(Figure 7(a)) and β = 7 (Figure 7(b)). For a large number of at-
tackers, higher values of α and β may increase the probability of
selecting more malicious nodes in each iteration. We also examine
settings for the bucket size k. We get seven as the optimal value for
k with these settings (Figure 7(c)). The lookup success rate may
decrease for higher values of k, since it means that routing tables
can hold more attackers.
Table 5: Lookup Overhead [g/n = 1.0]
Network Msgs (R lookups)
adv (2.3)
ham (3.0)
ytub (3.0)
astro (8.0)
ﬂic (11.5)
cat (8.0)
21.65
18.87