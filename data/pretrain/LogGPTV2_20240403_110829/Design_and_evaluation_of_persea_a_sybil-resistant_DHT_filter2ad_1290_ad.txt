### 1. 数据集与实验设置

在所有实验中，我们模拟了一个31位ID空间。除非另有说明，我们使用默认系统参数：块因子（chunk-factor）\( cf = 0.65 \)，冗余度 \( R = 7 \)，以及Kad参数 \( \alpha = 5 \)、\( \beta = 7 \) 和桶大小 \( k = 7 \)。尽管冗余参数（\( R \)、\( \alpha \) 和 \( \beta \)）可能看起来较高，但在第6.2.4节中，我们将展示查询开销是相当合理的。

### 2. 网络构建与攻击者加入

为了构建引导树，我们通过现有连接在社交网络图中模拟节点的加入过程。虽然Persea不依赖于社交图结构来实现其安全特性，但我们使用真实的社交网络图来提供节点在构建树时选择的基础。为了证明Persea可以在多种底层社交网络上工作，我们在六个不同的社交网络上进行了评估，这些网络具有不同的混合时间。我们对五个社交网络数据集进行了仿真评估：advogato (adv)、hamsterster (ham)、youtube (ytub)、flickr (flic) 和 catster (cat)，以及一个合作网络 ca-AstroPh (astro)。表2显示了这些网络数据集的规模和混合时间。

### 3. 实验结果

#### 3.1 声明验证

本文中，我们对Persea提出了以下声明：

- **声明I**：即使在攻击边与诚实节点的比例不小时，Persea也能提供高查询成功率。
- **声明II**：Persea适用于快混和慢混社交网络。
- **声明III**：分层节点ID分布将攻击者限制在较小的ID空间区域内。
- **声明IV**：增加每条攻击边的攻击者数量不会显著影响Persea的查询成功率。
- **声明V**：即使大量节点同时失败，查询仍应成功。

##### 3.1.1 声明I

在Persea中，当 \( g/n = 0.45 \) 时，我们在包含149,700个诚实节点的网络中获得了100%的查询成功率（图4）。当 \( g/n = 1.0 \) 时，在最大的网络中，Persea的查询成功率为95.6%。相比之下，X-Vine仅展示了 \( g/n \leq 0.1 \) 的结果，其中成功率已经低于100% [19]。我们在图5中直接比较了Persea和X-Vine，后者最多只能达到 \( g/n = 0.07 \) [19]。Persea的表现与每个节点有20个后继者的X-Vine相似。

##### 3.1.2 声明II

对于这些实验，我们选择了六个混合时间从2.3步（快混）到11.5步（慢混）的网络（表2）。当 \( g/n = 1.0 \) 时，我们发现混合时间和查询成功率之间存在负相关关系（\( r(4) = 0.60, p = 0.1 \)）。尽管统计上不显著，但Persea在两个最慢混合的图（flic 和 astro）上的表现最差。更快的混合可能导致诚实节点之间的ID空间分布更好，但我们尚未对此进行详细研究。无论如何，这些社交网络的查询结果仍然合理。当 \( g/n = 0.5 \) 时，Persea在最慢混合的flic图上的成功率为96.2%，在astro图上的成功率为94.7%。

##### 3.1.3 声明III

在Persea中，分层节点ID分布将攻击者限制在ID空间的一小部分内，即使有大量的攻击边。表4显示了攻击者控制的ID空间比例。即使在 \( g/n = 1.0 \) 时，攻击者控制的ID空间比例也不超过0.9%。

##### 3.1.4 声明IV

当攻击者加入系统时，它可以邀请更多的恶意节点。然而，由于分层节点ID分布将攻击者限制在孤立的ID空间区域，Persea的查询成功率不应受到每条攻击边攻击者数量增加的显著影响。为此，我们将每条攻击边的攻击者数量从1增加到50，使攻击者数量占网络总节点数的60%。保持 \( g/n = 0.10 \) 不变。例如，在ytub图中，当每条攻击边的攻击者数量为50时，查询成功率为99.5%；在ham和cat图中，查询成功率为99%（图6(a)）。当每条攻击边的攻击者数量超过25时，任何网络的性能都没有下降。

##### 3.1.5 声明V

我们评估了Persea在节点失败情况下的性能。我们关注系统的静态韧性，即系统中一定百分比的节点同时失败后的查询成功率。这是带有节点流失的系统的最坏情况版本。图6(b)显示了查询成功率作为同时失败节点百分比的函数，平均进行了10,000次查询。结果显示，即使在最大网络中，当10%的节点失败时，查询成功率仍为100%。在这个实验中，我们没有添加任何恶意节点。图9（附录中）展示了我们在不同节点失败百分比下进行的实验结果，其中 \( g/n = 0.1 \)。

### 4. 系统参数变化的影响

我们现在检查关键系统参数变化的影响。当增加冗余度 \( R \) 时，节点将在更多节点中存储每个（键，值）对，并因此在更多节点中查询该键。因此，较大的 \( R \) 值将以更大的开销为代价提高查询性能。在图6(c)中，我们看到当 \( R = 7 \) 时，成功率趋于平稳。当 \( \beta \) 增加时，每次迭代中每个 \( \alpha \) 节点返回给源节点的节点数量会增加。我们得到的最大查询成功率为 \( \alpha = 5 \)（图7(a)）和 \( \beta = 7 \)（图7(b)）。对于大量的攻击者，较高的 \( \alpha \) 和 \( \beta \) 值可能会增加每次迭代中选择更多恶意节点的概率。我们还检查了桶大小 \( k \) 的设置。在这种设置下，最优的 \( k \) 值为7（图7(c)）。较高的 \( k \) 值可能会导致路由表中包含更多的攻击者，从而降低查询成功率。

### 5. 结论

Persea利用诚实节点之间的社交关系构建了一个Sybil抵抗型DHT，不依赖于快速混合社交网络和少量攻击边的假设。Persea还提供了针对攻击者节点发起的拒绝服务、节点ID劫持和节点插入攻击的韧性。我们认为Persea是在探索如何利用个人社交网络作为标识符并用于安全机制的第一步。众所周知，社交网络信息具有强烈的标识性 [21]，但如何将其转换为安全机制尚不清楚。

---

希望这些优化后的文本能够更好地传达您的研究成果，并使其更加清晰、连贯和专业。如果需要进一步的修改或补充，请随时告知。