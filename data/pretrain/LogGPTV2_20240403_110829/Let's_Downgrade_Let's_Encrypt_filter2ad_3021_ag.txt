attacking AS, the target domain and the victim resolver. If the AS
prefers the path announced by the attacker to the nameserver, then
the hijack succeeds.
Figure 11: Same-prefix hijack: (a) Request and (b) Response.
Sub-prefix BGP hijack. The attack is illustrated in Figure 12
A.2.2
(a). The attacker can advertise a subprefix 2.2.2.0/24 of the victim
AS 1. The routers prefer more specific IP prefixes over less specific
ones, hence the longest-matching prefix (/24) gets chosen over the
less-specific prefix (/16). Nevertheless, the adversary cannot adver-
tise arbitrary long prefixes, e.g., (/32), since BGP routers typically
discard prefixes which are more specific than 24 bits to reduce the
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1435domain to the IP addresses controlled by the attacker. In step 3○
the attacker sends the DNS response to the VA from a spoofed IP
address (of one of the nameservers in the victim domain).
When launching a sub-prefix hijack attack, Figure 12 (a), the
difference is that the attacker announces a more specific prefix of
the nameservers of the victim domain than the victim AS.
Successful cache poisoning occurs once a DNS resolver at the
VA accepts and caches the malicious records from the spoofed DNS
response. The VA with the poisoned DNS resolver performs the
domain validation against the hosts controlled by the attacker. In
addition, all the subsequent DNS records will be queried from the
hosts controlled by the attacker, including the services (e.g., HTTP,
Email) against which the domain validation is performed.
A.3.2 DNS response interception. In a symmetric attack, illustrated
in Figure 11 (b) in order to intercept the DNS response sent by the
nameserver the attacker hijacks the traffic sent by the nameserver
to the VA. In step 1○ the attacker announces the prefix 54.202.0.0/15
on which the VA is hosted. ASes that are closer to the attacker
than to AS 16509 start routing the traffic for IP addresses in prefix
54.202.0.0/15 to AS 6. In Figure 11 (b) this includes AS 1 where the
nameserver is hosted. The attacker configures forwarding rules,
to relay all the traffic to 54.202.0.0/15 to AS 16509. The attacker
also sets filtering rules to capture DNS responses from AS 1 sent to
54.202.0.0/15. Notice that in contrast to previous attack, the DNS
request from the VA reaches the nameserver and the attacker cannot
intercept it. The nameserver issues a response following the request.
In step 2○ the attacker intercepts the response, changes the value
of the DNS record to point at the IP addresses controlled by the
attacker, and sends the modified response to the VA.
A.4 Attacks Against Single Point DV
Previous work [14] demonstrated BGP hijack attacks against sin-
gle point DV: the attacker used fraudulent BGP announcements,
mapping the prefix of the victim domain to the AS number of the
attacker. If the network of the VA accepted that BGP announcement,
the DNS lookup requests as well as DV, were performed against
the hosts controlled by the attacker. The evaluations in [14] used
a domain with a single nameserver and the hijacks were aimed at
intercepting only the communication with that nameserver. For
instance, the sub-prefix hijack attack was aimed at intercepting
the sub-prefix with the victim nameserver, while the same-prefix
hijacks used the fact that the attacker was located topologically
closer to the VA than the victim domain. In reality, domains have
multiple nameservers, and the DNS resolvers select a nameserver to
which they send a query in an unpredictable fashion. Our measure-
ments show that there are an average of more than 3 nameservers
per domain and that there are even domains with more than 30
nameservers. Furthermore, following best practices for resilience
typically each nameserver in a domain is located on a different
network. For attack in [14] to be practical against realistic domains
in the Internet it needs to be extended: since the attacker does not
know which nameserver the VA will select, it has to hijack the
communication channels between the VA to all the nameservers.
Therefore, the attacker needs to issue multiple hijacking BGP an-
nouncements, per prefix of each nameserver.
Figure 12: Sub-prefix hijack: (a) Request and (b) Response.
size of the internal routing tables. Therefore, only prefixes with
less than 24 bits are vulnerable to sub-prefix hijacks. Once an AS
accepts the hijacking announcement it sends all the traffic for that
sub-prefix to the attacker.
How effective are sub-prefix attacks? Sub-prefix attack is highly
effective since in contrast to same-prefix hijacks, all the traffic from
any Internet AS globally is sent to the attacker, irrespective of the
location of the attacking AS. To support these huge traffic volumes
the attacker needs to set up a large infrastructure to relay traffic to
the real destination ASes in the Internet. Otherwise, the attack will
result in a blackhole and the attacker risks detection.
The effectiveness and applicability of the attack depends on the
victim prefix size, a subset of which the attacker wishes to hijack.
Our measurement evaluations of the networks of the VAs and of the
nameservers showing vulnerabilities to sub-prefix hijack attacks
are in Figure 10.
A.3 DNS Response vs. Request Interception
Our attacker makes malicious BGP announcements for a same-
prefix or a sub-prefix containing the victim domain, for intercept-
ing the DNS request sent by the CA, or containing the prefix of
the victim resolver for intercepting the DNS response sent by the
nameserver in the domain. In Section A.5 we explain that hijacking
one direction, say communication sent from the CA to the domain,
does not imply hijacking the other direction, since the routing paths
in the Internet are asymmetric. In our attack, it suffices to hijack
either the requests or the responses.
A.3.1 DNS request interception. The same-prefix hijack attack for
intercepting a DNS request is illustrated in Figure 11 (a). The victim
network announces its prefix 2.2.0.0/16. In step 1○ the attacker
starts by originating a malicious BGP announcement which maps
prefix 2.2.0.0/16 to AS 6. We wait between 1 to 3 minutes for the
announcement to propagate; see our evaluation on the conver-
gence duration in Section 4.5. When the announcement reaches AS
16509 its border router applies preferences to decide if to accept the
announcement. In our example illustration in Figure 11 since AS
16509 has less hops to 2.2.0.0/16 through AS 6 than through AS 1, it
decides to route the packets for IP addresses in prefix 2.2.0.0/16 to
AS 6. To avoid blackholing the attacker sets up forwarding to relay
all the packets to AS 1. Our attacker configures rules to intercept
DNS packets sent to port 53 to an IP address in block 2.2.0.0/16 (i.e.,
DNS requests). Once the attacker captures the target DNS request,
in step 2○, Figure 11), it creates a corresponding DNS response with
the malicious DNS records that map the nameservers in the victim
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1436the local preference of AS A to override the shortest path. Hence,
the path from AS A to AS B would be A-X-Y-B. In contrast, if AS
Y and AS Z have the same price from the perspective of AS B, it
is likely that AS B would not change local preference and would
therefore use the shortest path B-Z-A for sending traffic to AS A.
Every AS can apply local preference to set precedence of incom-
ing routes and therefore direct outgoing traffic. But the opposite
direction for directing incoming traffic is much less controllable,
and can be done by coordinating between multiple ASes a special
14, [RFC3345] [47] or
configuration (using always-compare-med
14Configures the device always to compare the Multi-Exit Discriminators (MEDs),
regardless of the autonomous system (AS) information in the paths.
on arranging communities that all the ASes on the path would
accept and interpret as external triggers for local preference).
• The best path selection algorithm of BGP uses end-rules that de-
cide according to Interior Gateway Protocol (IGP) metric [RFC3785]
[43] or router ID15 if all important metrics (local preference, MED,
AS-path length) are equal. From an external perspective it is not
possible to know which parameters an AS uses for computing the
best path.
Implications of asymmetric routing on our attack. Which network
the attacker will hijack in a real attack in the Internet depends
on the location of the attacker and on the topological location of
the victim. If the network of the nameserver accepts a bogus BGP
announcement of the attacker claiming to originate the prefix of
the VA, the responses from the nameserver will be sent through
the attacker.
Launching symmetric hijacks. Such scenarios are quite easy to
achieve in practice and it is quite a common form of “business
intelligence gathering”: A network X wants to eavesdrop on traffic
between networks A and B. Network A has peerings in one IXP (say
London) and network B in another IXP (for example Amsterdam).
The legitimate path from A to B goes through upstream providers
that both networks A and B prefer less than their peerings. Network
X has peerings with both A and B in the proper IXPs (London and
Amsterdam). So the only thing that X needs to do to intercept traffic
between A and B is to propagate routes from A to B and vice-versa.
It means that the traffic between A and B starts flowing over X
(since A and B prefer peerings over upstreams), so X can eavesdrop
on it. However, X has to carry the traffic between Amsterdam
and London for free (since it was just peering on both sides) and
therefore both A and B were benefiting from the redirection by
saving some money on transit connectivity.
B ATTACK COMPONENTS
We illustrate the conceptual components of the attack in Figure 13.
The attacker first eliminates the nameservers by removing them
from the VAs’ list of usable servers. The attacker then launches the
prefix hijacks against a network of NS3, and injects a malicious
DNS records into a spoofed DNS response.
C VULNERABLE DOMAINS
Through experimental evaluations we found 23.27% Let’s Encrypt-
certified domains with nameservers that apply rate limiting, and
15A router ID is a 32-bit IP address that uniquely identifies a router in an AS.
Figure 13: Attacking DV with MultiVA.
Following [14], Let’s Encrypt was the first to deploy multiple
domain validation with four VAs (called multiVA), which since Feb-
ruary 2020 runs in production mode. Recently [15] demonstrated
the security of multiVA of Let’s Encrypt and showed that it sig-
nificantly raises the bar for attackers, making attacks against DV
impractical. The reason is that every VA selects the nameserver to
which it sends the query at random and independently of other
VAs. The lookup and the validation succeed, if at least three of the
responses arrived, and they are identical. Since the attacker does
not know to which nameserver each VA sends its query, it has to
attack the communication from every VA to any nameserver. For
instance, given a domain with 3 nameservers, each VA can send
its query to any of the 3 nameservers. Therefore, for a successful
hijack of a query the attacker would have to make the network
of every VA accept a fraudulent BGP announcement for a prefix
of every nameserver, and for a successful hijack of the response,
the attacker would have to make the network of every nameserver
accept a fraudulent BGP announcement mapping the prefix of the
VA to the AS of the attacker. Such attacks are not practical even
with very strong attackers.
A.5 Asymmetric Routing Paths
Forward and backward paths. Let the path, that the requests
A.5.1
from the VA to the nameserver take, be the forward path, and let
the path that the responses from the nameserver to the VA take
be the backward path. Both forward and backward paths are com-
puted individually by each BGP router along the path and inserted
into the routing tables along the paths. Each AS in the forward
and backward paths may have different local preferences and can
use various communities and filter configurations for selecting the
routes based on the received BGP announcements. This computa-
tion often results in asymmetric forward and backward paths.
A.5.2 Reasons for asymmetric routing paths. There are many fac-
tors for differences in forward and backward routing paths. During
our measurements we identified the following reasons for asym-
metric routing:
• Manually configured preference of paths going through cheaper
links: typically smaller networks prefer paths to peerings with
higher local preference. The best path selection algorithm of BGP
assigns higher priority to the local preference than to the “select
shortest path” rule. We explain this with the following example: as-
sume we have two possible paths between AS A and AS B: A-X-Y-B
and A-Z-B. If sending traffic from AS A to AS X is much cheaper (for
AS A) than sending it to AS Z, it could and likely would configure
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1437UNKNOWN_SERVER_NICENESS = 376ms
= 400ms
RTT_BAND
rtt_lost(s){
s.RTO *=2
}
iter_fill_rtt(){
for each server s in servers:
RTO = infra_get_lame_rtt(s)
If s is new:
RTO = UNKNOWN_SERVER_NICENESS
FastestRTO = compute_fastest_rto()
}
iter_filter_order(){
for each server s in servers:
if (RTO - FastestRTO  120sec)
// enter blocking regime
// block 900sec until s expires from infra_cache
infra-host-ttl = 900sec
infra_cache <- s
}
Figure 14: Server selection algorithm of Unbound.
2% of Alexa domains that fragment responses. These are domains
with nameservers that the VAs of Let’s Encryptcan be forced to
query. As an example case study in our work we count nameservers
vulnerable to sub-prefix hijacks. Out of 35% nameservers 10.60% are
vulnerable to sub-prefix hijack attacks. Alternately, the adversary
may select nameservers with some other vulnerability, e.g., depend-
ing on the topological location of the attacker, it can also select
nameservers that can be same-prefix hijacked. We list vulnerable
domains in our dataset in Table 6.
D ANALYSIS OF UNBOUND
D.1 Server Selection
In the first step (function iter_fill_rtt) the DNS software uses
function infra_get_lame_rtt() to read the Round Trip Time (RTT)
information for each nameserver from the infrastructure cache,
called infra_cache (this is where the information about the servers
is cached). If this is a new nameserver for which Unbound does not
have information about RTT, its RTO is set to 376ms. The fastest
Round Trip Timeout (RTO) is then marked. The RTO is the timeout
including the exponential backoff, it is used for server selection and
as a timeout for the transmitted request. The exponential backoff
is implemented in function rtt_lost() in file rtt.c.
In the second step Unbound rearranges the list of servers, moving
all the servers that satisfy (RTO-FastestRTO <= 400ms) to the front of
the server list, this is implemented in function iter_filter_order().
In the next step Unbound randomly chooses a nameserver from
the list created in second step, and sends a query to it. If the re-
sponse times-out, the RTO of that server is doubled. When the
RTO exceeds 12 seconds after 2 consecutive time-outs, the server
enters a ‘probing regime’. This allows not more than a single query
to that nameserver per RTO period. If the RTO further exceeds
120 seconds, it enters the ‘blocking regime’. This means that the
nameserver is moved to infra_cache for 900 sec (15 minutes) and
will not be queried during that time period.
The pseudocode for server selection mechanism in Unbound is
described in Figure 14.
D.2 Query Retransmissions
Unbound has two parameters for limiting the number of times