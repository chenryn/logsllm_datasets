source code of a web applications, and then detect any unchecked
accesses to these pages. Resin [74] is a runtime system that enforces
data-flow assertions to prevent exploits of web application security
vulnerabilities. Nemesis [14] is a runtime system for preventing
authentication and access control bypass attacks. Space [38] is
a tool to find access control bugs in web application based on
a catalog of patterns. Our work has a complementary focus on
access control misconfigurations—even if we have a correct coded
software, misconfigurations can still introduce security holes.
12.4 Intrusion Detection
One related research area on security-related log analysis is intru-
sion detection [18]. An intrusion detection system (IDS) monitors
system or network events, detects malicious activities, and reports
them to sysadmins. Previous works on IDS can be classified into
signature-based and anomaly-based methods. Signature-based IDS
detects known attacks by recognizing their patterns, such as a
specific sequence of network traffic. Anomaly-based IDS detects un-
known attacks by heuristics or rules [32]. P-DIFF aims at detecting
access control policy changes (that may open up to attacks) instead
of detecting the attacks. It can help backtrack the configuration
change that permitted the detected intrusions.
12.5 Decision Tree Algorithms
Handling time-changing data, known as concept drift adaption in
the literature, has been one of the main challenges in machine
learning [21]. Concept drift means the underlying model of the
data is changed along with time, i.e., an access control policy is
changed from ALLOW to DENY in our case. Previously most works
propose to build concept drift decision tree by learning multiple
trees, each with the data in a time window [26, 44, 58]. However,
it is hard to apply those approaches in the access-control policy
change problem, due to the challenges of choosing the appropriate
time window length, as different policies change can be performed
by sysadmins at some random time. To address this problem, we
propose a new TCDT learning algorithm which treats the whole
dataset as a consecutive time series instead of discrete time win-
dows and encodes all the policies along with their changes in a
single decision tree. Although the TCDT is designed for the access-
control policy change problem, it can be applied to other binary
classification problem with concept drift.
13 CONCLUSION
This paper presents P-DIFF, a practical tool for continuously moni-
toring access logs to help sysadmins detects unintended access
control policy changes as well as help identify historical policy
changes for a known security incident. We propose a novel TCDT
structure and learning algorithm to automatically infer access poli-
cies and changes from access logs. We evaluate P-DIFF with access
logs from five real-world systems. The results show P-DIFF is effec-
tive in both detection of access control policy changes and forensic
investigation of security incidents. In addition, although our TCDT
learning algorithm is only used for inferring access control policies
in this paper, it can be generally adopted to address the challenges
in inferring other policies with result changes.
ACKNOWLEDGMENTS
We greatly appreciate the anonymous reviewers for their insight-
ful comments and feedbacks. We thank Geoffrey M. Voelker, Guo
(Vector) Li, Shelby Thomas, Wang-Cheng Kang, Jianmo Ni and a
host of others in the Opera group, the Systems and Networking
group at UC San Diego and Whova Inc. for useful discussions and
paper proofreading. We also thank Scott Stoller and Thang Bui at
Stony Brook University for helpful feedbacks. This work is sup-
ported in part by NSF grants (CNS-1814388, CNS-1526966) and the
Qualcomm Chair Endowment.
REFERENCES
[1] Rakesh Agrawal, Tomasz Imieliński, and Arun Swami. 1993. Mining Association
Rules Between Sets of Items in Large Databases. In Proceedings of the 1993 ACM
SIGMOD International Conference on Management of Data (SIGMOD’93).
[2] Alexa Internet, Inc. 2019. Alexa traffic ranks. https://www.alexa.com/siteinfo/
wikipedia.org.
[3] Hussein Almuallim, Yasuhiro Akiba, and Shigeo Kaneda. 1995. On Handling
Tree-Structured Attributes in Decision Tree Learning. In Proceedings of the 12th
International Conference on Machine Learning (ICML’95).
[4] Amos Jeffries. 2015. Squid proxy access log format. https://wiki.squid-cache.org/
Features/LogFormat.
[5] Mona Attariyan, Michael Chow, and Jason Flinn. 2012. X-ray: Automating
Root-Cause Diagnosis of Performance Anomalies in Production Software. In
Proceedings of the 10th USENIX Conference on Operating Systems Design and
Implementation (OSDI’12).
[6] Mona Attariyan and Jason Flinn. 2010. Automating Configuration Troubleshoot-
ing with Dynamic Information Flow Analysis. In Proceedings of the 9th USENIX
Conference on Operating Systems Design and Implementation (OSDI’10).
[7] Lujo Bauer, Lorrie Faith Cranor, Robert W. Reeder, Michael K. Reiter, and Kami
Vaniea. 2009. Real Life Challenges in Access-control Management. In Proceedings
of the 2009 CHI Conference on Human Factors in Computing Systems.
[8] Lujo Bauer, Scott Garriss, and Michael K Reiter. 2008. Detecting and resolving
policy misconfigurations in access-control systems. In Proceedings of the 13th
ACM Symposium on Access Control Models and Technologies (SACMAT’08).
[9] Lujo Bauer, Scott Garriss, and Michael K Reiter. 2011. Detecting and resolv-
ing policy misconfigurations in access-control systems. ACM Transactions on
Information and System Security (TISSEC) 14, 1 (2011), 2.
[10] Leo Breiman, Jerome H. Friedman, Richard A. Olshen, and Charles J. Stone. 1983.
Classification and Regression Trees. Wadsworth Publishing.
[11] Anton Chuvakin and Gunnar Peterson. 2010. How to Do Application Logging
Right. IEEE Security & Privacy 8, 4 (July 2010), 82–85.
[12] Cloudera, Inc. 2019.
Hadoop Audit Event.
https://docs.cloudera.com/
documentation/enterprise/5-4-x/topics/cn_iu_audits.html.
[13] Carlos Cotrini, Thilo Weghorn, and David Basin. 2018. Mining ABAC Rules
from Sparse Logs. In Proceedings of the 3rd European Symposium on Security and
Privacy (EuroS&P’18).
[14] Michael Dalton, Christos Kozyrakis, and Nickolai Zeldovich. 2009. Nemesis:
Preventing Authentication & Access Control Vulnerabilities in Web Applications.
In Proceedings of the 18th USENIX Security Symposium (USENIX Security’09).
[15] Tathagata Das, Ranjita Bhagwan, and Prasad Naldurg. 2010. Baaz: A System for
Detecting Access Control Misconfigurations. In Proceedings of the 19th USENIX
Security Symposium (USENIX Security’10).
[16] Jessica Davis. Apr. 2018. 63,500 patient records breached by New York provider’s
misconfigured database. https://tinyurl.com/y88vh8u5.
[17] Jessica Davis. Mar. 2018. Long Island provider exposes data of 42,000 patients in
misconfigured database. https://tinyurl.com/y7t5p99n.
[18] Dorothy E Denning. 1987. An Intrusion-Detection Model. IEEE Transactions on
Software Engineering 2 (1987), 222–232.
[19] BOB DIACHENKO.
2019.
Credit
Left
document-management-company-leaks-data-online/.
Reports
Online.
Document Management Company
https://securitydiscovery.com/
[20] Kathi Fisler, Shriram Krishnamurthi, Leo A Meyerovich, and Michael Carl
Tschantz. 2005. Verification and Change-Impact Analysis of Access-Control
Policies. In Proceedings of the 27th International Conference on Software Engineer-
ing (ICSE’05).
[21] João Gama, Indr˙e Žliobait˙e, Albert Bifet, Mykola Pechenizkiy, and Abdelhamid
Bouchachia. 2014. A Survey on Concept Drift Adaptation. ACM Computing
Hall PTR.
Surveys (CSUR) 46, 4 (2014), 44.
[22] François Gauthier, Dominic Letarte, Thierry Lavoie, and Ettore Merlo. 2011.
Extraction and comprehension of moodle’s access control model: A case study.
In Proceedings of the 9th Annual International Conference on Privacy, Security and
Trust.
[23] Simon Haykin. 1994. Neural Networks: A Comprehensive Foundation. Prentice
[24] Hewlett Packard Enterprise. 2015. 2015. HP Cyber Risk Report 2015. http:
//www8.hp.com/h20195/v2/GetPDF.aspx/4AA5-0858ENN.pdf.
[25] David W Hosmer Jr, Stanley Lemeshow, and Rodney X Sturdivant. 2013. Applied
logistic regression. Vol. 398. John Wiley & Sons.
[26] Geoff Hulten, Laurie Spencer, and Pedro Domingos. 2001. Mining Time-Changing
Data Streams. In Proceedings of the 7th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD’01).
[27] Junbeom Hur and Dong Kun Noh. 2011. Attribute-based access control with
efficient revocation in data outsourcing systems. IEEE Transactions on Parallel
and Distributed Systems 22, 7 (2011), 1214–1221.
[28] Kromtech Security Center. 2017. Auto Tracking Company Leaks Hundreds of
Thousands of Records Online. https://tinyurl.com/y8uvdy9j.
[29] Kromtech Security Center. 2018. FedEx Customer Records Exposed. https:
//mackeepersecurity.com/post/fedex-customer-records-exposed.
[30] Butler W Lampson. 1974. Protection. ACM SIGOPS Operating Systems Review 8,
[31] Butler W. Lampson. 2004. Computer Security in the Real World. IEEE Computer
1 (1974), 18–24.
37, 6 (June 2004), 37–46.
[32] Hung-Jen Liao, Chun-Hung Richard Lin, Ying-Chih Lin, and Kuang-Yuan Tung.
2013. Intrusion Detection System: A Comprehensive Review. Journal of Network
and Computer Applications 36, 1 (2013), 16–24.
[33] Luke Irwin. 2019. How long does it take to detect a cyber attack? https://www.
itgovernanceusa.com/blog/how-long-does-it-take-to-detect-a-cyber-attack/.
[34] Evan Martin and Tao Xie. 2007. Automated Test Generation for Access Con-
trol Policies via Change-Impact Analysis. In Proceedings of the 3rd International
Workshop on Software Engineering for Secure Systems.
[35] MediaWiki. 2019. MediaWiki is a collaboration and documentation platform
brought to you by a vibrant community. https://www.mediawiki.org/wiki/
MediaWiki.
[36] MediaWiki. Apr. 2018. enwiki dump progress on 20180420. "https://dumps.
wikimedia.org/enwiki/20180420/".
[37] Tejeddine Mouelhi, Franck Fleurey, Benoit Baudry, and Yves Le Traon. 2008. A
model-based framework for security policy specification, deployment and testing.
In Proceedings of the 7th International Conference on Model Driven Engineering
Languages and Systems (MoDELs/UML08).
[38] Joseph P Near and Daniel Jackson. 2016. Finding Security Bugs in Web Appli-
cations using a Catalog of Access Control Patterns. In Proceedings of the 38th
International Conference on Software Engineering (ICSE’16).
[39] Lily Hay Newman. 2017.
posed 198 Millions Voter Record.
voter-records-exposed-database/.
The Scarily Common Screw-Up That Ex-
https://www.wired.com/story/
[40] NumPy developers. 2018. NumPy. https://www.numpy.org.
[41] Oracle. 2019. MySQL audit log file formats. https://dev.mysql.com/doc/refman/8.
0/en/audit-log-file-formats.html.
[42] Dan O’Sullivan. 2017. Cloud Leak: How A Verizon Partner Exposed Millions of
Customer Accounts. https://www.upguard.com/breaches/verizon-cloud-leak.
[43] Pandas. 2018. pandas: Python Data Analysis Library. https://pandas.pydata.org/.
[44] Lena Pietruczuk, Piotr Duda, and Maciej Jaworski. 2013. Adaptation of deci-
sion trees for handling concept drift. In International Conference on Artificial
Intelligence and Soft Computing. Springer, 459–473.
[45] pure-ftpd. 2017. pure-ftpd - Linux man page. https://linux.die.net/man/8/
[46] Lili Qiu, Yin Zhang, Feng Wang, Mi Kyung, and Han Ratul Mahajan. 1985. Trusted
computer system evaluation criteria. In National Computer Security Center. Cite-
seer.
[47] J. Ross Quinlan. 1986. Induction of Decision Trees. Machine Learning 1, 1 (1986),
[48] J. Ross Quinlan. 1993. C4.5: Programs for Machine Learning. Morgan Kaufmann
pure-ftpd.
81–106.
Publishers, Inc.
[49] Ariel Rabkin and Randy Katz. 2011. Precomputing Possible Configuration Er-
ror Diagnosis. In Proceedings of the 26th IEEE/ACM International Conference on
Automated Software Engineering (ASE’11).
[50] Charles M Rader. 1972. Discrete Convolutions via Mersenne Transrorms. IEEE
Trans. Comput. 100, 12 (1972), 1269–1273.
[51] Ravi S Sandhu, Edward J Coyne, Hal L Feinstein, and Charles E Youman. 1996.
Role-Based Access Control Models. IEEE Computer 29, 2 (1996), 38–47.
[52] Bruce Schneier. 2009. Real-World Access Control. https://www.schneier.com/
blog/archives/2009/09/real-world_acce.html.
[53] SELinux. 2014. SELinux auditing events. https://selinuxproject.org/page/NB_AL.
[54] Riaz Ahmed Shaikh, Kamel Adi, and Luigi Logrippo. 2017. A Data Classification
Method for Inconsistency and Incompleteness Detection in Access Control Policy
Sets. International Journal of Information Security 16, 1 (2017), 91–113.
[55] Sara Sinclair and Sean W. Smith. 2010. What’s Wrong with Access Control in
the Real World? IEEE Security & Privacy 8, 4 (July 2010), 74–77.
[56] Sara Sinclair, Sean W. Smith, Stephanie Trudeau, M. Eric Johnson, and Anthony
Portera. 2007. Information Risk in Financial Institutions: Field Study and Re-
search Roadmap. In Proceedings for the 3rd International Workshop on Enterprise
Applications and Services in the Finance Industry (FinanceCom’07),. Montreal,
Canada.
[57] Spark. 2018. Spark MLlib. https://spark.apache.org/docs/latest/ml-guide.html.
[58] Kenneth O Stanley. 2003. Learning Concept Drift with a Committee of Decision
Trees. Technical Report UT-AI-TR-03-302. Department of Computer Sciences,
The University of Texas at Austin.
[59] Fangqi Sun, Liang Xu, and Zhendong Su. 2011. Static Detection of Access Control
Vulnerabilities in Web Applications. In Proceedings of the 20th USENIX Security
Symposium (USENIX Security’11).
[60] The Apache Software Foundation. 2019. Apache2 access log format. https:
//httpd.apache.org/docs/current/logs.html.
[61] The Open Web Application Security Project. 2017. Jan. 2018. OWASP Top 10 -
2017: The Ten Most Critical Web Application Security Risks. https://www.owasp.
org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf.
[62] Guido Urdaneta, Guillaume Pierre, and Maarten van Steen. 2009. Wikipedia
Workload Analysis for Decentralized Hosting. Elsevier Computer Networks 53,
11 (July 2009), 1830–1845. http://www.globule.org/publi/WWADH_comnet2009.
html.
[63] Helen J. Wang, John C. Platt, Yu Chen, Ruyun Zhang, and Yi-Min Wang. 2004.
Automatic Misconfiguration Troubleshooting with PeerPressure. In Proceedings
of the 6th USENIX Conference on Operating Systems Design and Implementation
(OSDI’04).
[64] Rui Wang, XiaoFeng Wang, Kehuan Zhang, and Zhuowei Li. 2008. Towards Au-
tomatic Reverse Engineering of Software Security Configurations. In Proceedings
of the 15th ACM Conference on Computer and Communications Security (CCS’08).
[65] Yi-Min Wang, Chad Verbowski, John Dunagan, Yu Chen, Helen J. Wang, Chun
Yuan, and Zheng Zhang. 2003. STRIDER: A Black-box, State-based Approach to
Change and Configuration Management and Support. In Proceedings of the 17th
Large Installation Systems Administration Conference (LISA’03).
[66] Wikipedia. 2018. One-hot. https://en.wikipedia.org/wiki/One-hot.
[67] Tianyin Xu, Xinxin Jin, Peng Huang, Yuanyuan Zhou, Shan Lu, Long Jin, and
Shankar Pasupathy. 2016. Early Detection of Configuration Errors to Reduce
Failure Damage. In Proceedings of the 12th USENIX Conference on Operating
Systems Design and Implementation (OSDI’16).
[68] Tianyin Xu, Han Min Naing, Le Lu, and Yuanyuan Zhou. 2017. How Do System
Administrators Resolve Access-Denied Issues in the Real World?. In Proceedings of
the 35th Annual CHI Conference on Human Factors in Computing Systems (CHI’17).
[69] Tianyin Xu, Vineet Pandey, and Scott Klemmer. 2016. An HCI View of Configu-
ration Problems. arXiv:1601.01747 (Jan. 2016).
[70] Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng, Ding Yuan,
Yuanyuan Zhou, and Shankar Pasupathy. 2013. Do Not Blame Users for Miscon-
figurations. In Proceedings of the 24th Symposium on Operating System Principles
(SOSP’13).
[71] Tianyin Xu and Yuanyuan Zhou. 2015. Systems Approaches to Tackling Config-
uration Errors: A Survey. ACM Computing Surveys (CSUR) 47, 4 (July 2015).
[72] Yuu Yamada, Einoshin Suzuki, Hideto Yokoi, and Katsuhiko Takabayashi. 2003.
Decision-tree Induction from Time-series Data Based on a Standard-example
Split Test. In Proceedings of the 20th International Conference on Machine Learning
(ICML’03).
[73] Zuoning Yin, Xiao Ma, Jing Zheng, Yuanyuan Zhou, Lakshmi N. Bairavasundaram,
and Shankar Pasupathy. 2011. An Empirical Study on Configuration Errors in
Commercial and Open Source Systems. In Proceedings of the 23rd ACM Symposium
on Operating Systems Principles (SOSP’11).
[74] Alexander Yip, Xi Wang, Nickolai Zeldovich, and M Frans Kaashoek. 2009. Im-
proving Application Security with Data Flow Assertions. In Proceedings of the
ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP’09).
[75] Chun Yuan, Ni Lao, Ji-Rong Wen, Jiwei Li, Zheng Zhang, Yi-Min Wang, and
Wei-Ying Ma. 2006. Automated Known Problem Diagnosis with Event Traces. In
Proceedings of the 1st EuroSys Conference (EuroSys’06).
[76] ZDNet. 2019.
including 6.7 million children.
zens,
database-leaks-data-on-most-of-ecuadors-citizens-including-6-7-million-children/.
Database leaks data on most of Ecuador’s
citi-
https://www.zdnet.com/article/
[77] Jun Zhang and Vasant Honavar. 2003. Learning Decision Tree Classifiers from
Attribute Value Taxonomies and Partially Specified Data. In Proceedings of the
20th International Conference on Machine Learning (ICML’03).
[78] Jiaqi Zhang, Lakshmi Renganarayana, Xiaolan Zhang, Niyu Ge, Vasanth Bala,
Tianyin Xu, and Yuanyuan Zhou. 2014. EnCore: Exploiting System Environment
and Correlation Information for Misconfiguration Detection. In Proceedings of the
19th International Conference on Architecture Support for Programming Languages
and Operating Systems (ASPLOS’14).
[79] Sai Zhang and Michael D Ernst. 2013. Automated Diagnosis of Software Con-
figuration Errors. In Proceedings of the 35th International Conference on Software
Engineering (ICSE’13).