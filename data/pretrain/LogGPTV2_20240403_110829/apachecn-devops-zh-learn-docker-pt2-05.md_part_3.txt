 $ sudo docker push myregistrydomain.com:5000/ubuntu 
 The push refers to a repository 
 [myregistrydomain.com:5000/ubuntu] 
 f215f043863e: Pushed 
 0c291dc95357: Pushed 
 latest: digest: sha256:68ae734b19b499ae57bc8d9dd4c4f90d5ff17cfe801ffbd7b840b120f d61d3b4 size: 1357 
 $ sudo docker rmi myregistrydomain.com:5000/ubuntu 
 Untagged: myregistrydomain.com:5000/ubuntu:latest 
 Untagged: myregistrydomain.com:5000/ubuntu@sha256:68ae734b19b499ae57bc8d9dd4c4f90d5ff17cfe801ffbd7b840b120fd61d3b4 
 $ sudo docker pull myregistrydomain.com:5000/ubuntu 
 Using default tag: latest 
 latest: Pulling from ubuntu 
 Digest: sha256:68ae734b19b499ae57bc8d9dd4c4f90d5ff17cfe801ffbd7b840b120fd61d3b4 
 Status: Downloaded newer image for 
 myregistrydomain.com:5000/ubuntu:latest 
```
## 使用复合 Docker 管理 Docker 注册表
随着 Docker Registry 变得越来越复杂，处理它的配置将是乏味的。因此，强烈建议您使用 Docker Compose。Docker 作曲将在后面的第 8 章、*编排容器*中讨论。
`docker-compose.yml`文件创建如下:
```
registry:
 image: registry:2
 ports:
   - 5000:5000
 environment:
   REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
   REGISTRY_HTTP_TLS_KEY: /certs/domain.key
   REGISTRY_AUTH: htpasswd
   REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
   REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
 volumes:
   - /path/data:/var/lib/registry
   - /path/certs:/certs
   - /path/auth:/auth
```
现在，运行命令来运行注册表:
```
$ sudo docker-compose up -d 
Creating ubuntu_registry_1  
```
这确保了 Docker 注册表再次启动并运行。
## 负载平衡考虑
在 Docker 注册表的企业部署中，负载平衡器需要在注册表集群之间分配负载。为了使负载平衡器正确工作，我们需要考虑存储驱动程序、HTTP secret 和 Redis 缓存(如果已配置)对于注册表集群是相同的。如果这些参数中的任何一个不同，注册中心将很难处理这些请求。
例如，用于 Docker 映像的存储驱动程序在所有注册表实例中应该是相同的。如果某个特定的装载点被用作文件系统，它应该是可访问的，并连接到所有注册表实例。同样，如果使用 S3 或 IBM 对象存储，注册中心应该能够访问相同的存储资源。上传的 HTTP 秘密坐标在所有实例中也必须相同。实际上，从现在开始，为不同的注册表实例配置不同的 Redis 缓存可能会起作用。然而，这不是一个好的实践，并且就更多的请求被重定向到后端而言，这将是昂贵的。
## webhook 通知
Docker 注册表具有基于注册表活动发送通知的内置功能:
![](img/image_05_003.png)
通知通过 HTTP 发送到端点。这个完整的通知是基于收听者和广播者的体系结构。每个端点都有自己的队列，所有操作(推/拉/删除)都会触发事件。这些事件被排队，一旦事件到达队列的末尾，它就会向端点触发一个 HTTP 请求。事件被发送到每个端点，但是顺序没有保证。
事件具有定义良好的 JSON 结构，并作为通知正文发送。一个或多个事件在结构中发送，并被称为**包络**。一个信封可能包含一个或多个事件。注册表还能够接收来自端点的响应。带有 2XX 或 3XX 响应代码的响应被视为有效响应，并被视为已传递的消息。
## docker registry http api 支持
Docker 注册表有一个 HTTP 接口来与 Docker 引擎交互。这用于管理有关 Docker 映像的信息，并支持其分发。
来自 V1 的关键更新是 Docker 映像格式和签名清单概念的一系列变化。新的独立映像清单简化了映像定义并提高了安全性。该规范将建立在这项工作的基础上，利用清单格式的新属性来提高性能，减少带宽使用，并降低后端损坏的可能性。
Docker 注册表 V2 API 的完整文档可在此找到:
[https://github . com/Docker/distribution/blob/master/docs/spec/API . MD .](https://github.com/docker/distribution/blob/master/docs/spec/api.md)
这里讨论了重要的 API:
*   应用编程接口版本检查:
`GET /v2/`: This API provides version support information based on its response statuses.
以下是检查 Docker 注册表 API 版本的`curl`命令:
```
 $ curl -i http://localhost:5000/v2/
 HTTP/1.1 200 OK
 Content-Length: 2
 Content-Type: application/json; charset=utf-8
 Docker-Distribution-Api-Version: registry/2.0
 X-Content-Type-Options: nosniff
 Date: Mon, 21 Nov 2016 18:37:06 GMT
```
支持的错误代码有`401 Unauthorized`和`404 Not Found`。
*   列出存储库:
`GET /v2/_catalog`: This API provides the content of repositories.
以下是获取存储库内容的`curl`命令:
```
 $ curl -i http://localhost:5000/v2/_catalog
 HTTP/1.1 200 OK
 Content-Type: application/json; charset=utf-8
 Docker-Distribution-Api-Version: registry/2.0
 X-Content-Type-Options: nosniff
 Date: Mon, 21 Nov 2016 18:36:42 GMT
 Content-Length: 33
 {"repositories":["hello-world"]}
```
读者可能还记得，在启动 Docker 注册表时，我们只上传了一个文件。
*   拉一个映像:Docker 映像主要由两部分组成——一个 JSON 清单和单独的层文件。
可以使用以下网址提取映像清单:
```
 GET /v2//manifests/
```
这里是`curl`命令获取映像清单细节。
```
 curl -i http://localhost:5000/v2/
 hello-world/manifests/latestHTTP/1.1 200 OK
 Content-Length: 2742
 Content-Type: application/vnd.docker.distribution.
 manifest.v1+prettyjws
 Docker-Content-Digest: 
 sha256:f18d040ea7bf47c7ea8f7ff1a8682811cf375
 51c747158e37b9c75f5450e6fac
 Docker-Distribution-Api-Version: registry/2.0
 Date: Mon, 21 Nov 2016 18:54:05 GMT
 {
 "schemaVersion": 1,
 "name": "hello-world",
 "tag": "latest",
 "architecture": "amd64",
 "fsLayers": [
 {
 "blobSum": 
 "sha256:a3ed95caeb02ffe68cdd9fd8440
 6680ae93d633cb16422d00e8a7c22955b46d4"
 },
 {
 "blobSum": 
 "sha256:c04b14da8d1441880ed3fe6106fb2cc
 6fa1c9661846ac0266b8a5ec8edf37b7c"
 }
 ],
 "history": [ 
 }{ 
 "v1Compatibility": "----
 }
 ],
 "signatures":[
 {
 "----------------"
 }
 ]
 }
```
*   提取存储在 blob 中的映像图层:
```
 GET /v2//blobs/ 
```
这将是一个练习，让读者使用在前面的拉取清单应用编程接口中收到的``下载映像。
下表列出了方法和 URIs:
| **方法** | **路径** | **实体** | **描述** |
| `GET` | `/v2/` | 基础 | 检查端点是否实现了 Docker 注册表 API V2 |
| `GET` | `/v2//tag/list` | 标签 | 获取由名称标识的存储库下的标签 |
| `GET` | `/v2//manifests/` | 显示 | 获取由名称和引用标识的清单，其中引用可以是标记或摘要 |
| `PUT` | `/v2//manifests/` | 显示 | 将清单通过名称和引用进行标识，其中引用可以是标签或摘要 |
| `Delete` | `/v2//manifests/` | 显示 | 删除由名称和引用标识的清单，其中引用可以是标记或摘要 |
| `GET` | `/v2//blobs/` | 一滴 | 从由摘要标识的注册表中检索 blob |
| `DELETE` | `/v2//blobs/` | 一滴 | 从由摘要标识的注册表中删除 blob |
| `POST` | `/v2//blobs/uploads` | 启动 blob 上传 | 启动可恢复的 blob 上载；如果成功，将提供上传位置以完成上传 |
| `GET` | `/v2//blobs/uploads/` | Blob 上载 | 检索`uuid`标识的上传状态 |
| `PATCH` | `/v2//blobs/uploads/` | Blob 上载 | 为指定的上载更新数据块 |
| `PUT` | `/v2//blobs/uploads/` | Blob 上载 | 完成`uuid`指定的上传 |
| `DELETE` | `/v2//blobs/uploads/` | Blob 上载 | 取消未完成的上传过程，释放相关资源 |
| `GET` | `/v2/_catalog` | 目录 | 从注册表中检索已排序的 JSON 存储库列表 |
## 摘要
Docker Engine 允许对每一个增值软件解决方案进行容器化、索引化、注册和存储。Docker 是一个很好的工具，可以在任何地方系统地开发、运输、部署和运行容器。虽然`docker.io`可以让你免费上传你的 Docker 作品到它的注册中心，但是你上传到那里的任何东西都是可以公开发现和访问的。创新者和公司并不热衷于此，因此坚持私人 Docker 中心。在本章中，我们以易于理解的方式为您解释了所有步骤、语法和语义。我们展示了如何检索映像来生成 Docker 容器，并描述了如何以安全的方式将我们的映像推送到 Docker 注册表，以便被经过身份验证的开发人员找到和使用。认证和授权机制是整个过程的主要部分，已经详细解释过了。准确地说，这一章是作为建立自己的 Docker 中心的指南而构思和具体化的。随着世界组织对拥有容器化的云表现出模范般的兴趣，私有容器枢纽变得越来越重要。
在这个时间点上，我们知道使用 DTR 的 Docker Hub 和 Docker 开源注册表可以分发和管理 Docker 映像。Docker Hub 和 DTR 都是商业产品，它们将开源注册中心的功能整合到各自的解决方案中。Docker Hub 是一项多租户服务，而 DTR 和开源注册中心为用户提供了在自己的防火墙或专用云环境后托管私有注册中心的选项。
在下一章中，我们将深入容器，这是映像的自然发展。我们将展示运行服务的能力，例如 Docker 容器中的 web 服务器及其与主机和外部世界的交互。