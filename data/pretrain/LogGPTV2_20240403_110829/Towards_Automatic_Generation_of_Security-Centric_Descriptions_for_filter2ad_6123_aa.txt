title:Towards Automatic Generation of Security-Centric Descriptions for
Android Apps
author:Mu Zhang and
Yue Duan and
Qian Feng and
Heng Yin
Towards Automatic Generation of Security-Centric
Descriptions for Android Apps
∗
Heng Yin†
Mu Zhang$
$NEC Labs America, Inc. †Department of EECS, Syracuse University, USA
Qian Feng†
Yue Duan†
$PI:EMAIL †{yuduan,qifeng,heyin}@syr.edu
ABSTRACT
To improve the security awareness of end users, Android markets
directly present two classes of literal app information: 1) permis-
sion requests and 2) textual descriptions. Unfortunately, neither can
serve the needs. A permission list is not only hard to understand but
also inadequate; textual descriptions provided by developers are
not security-centric and are signiﬁcantly deviated from the permis-
sions. To ﬁll in this gap, we propose a novel technique to automat-
ically generate security-centric app descriptions, based on program
analysis. We implement a prototype system, DESCRIBEME, and
evaluate our system using both DroidBench and real-world An-
droid apps. Experimental results demonstrate that DESCRIBEME
enables a promising technique which bridges the gap between de-
scriptions and permissions. A further user study shows that au-
tomatically produced descriptions are not only readable but also
effectively help users avoid malware and privacy-breaching apps.
Categories and Subject Descriptors
D.2.7 [Software Engineering]: Distribution, Maintenance, and
Enhancement—Documentation; D.4.6 [Operating Systems]: Se-
curity and Protection—Invasive software
General Terms
Security
Keywords
Android; Malware prevention; Textual description; Program anal-
ysis; Subgraph mining; Natural language generation
1.
INTRODUCTION
As usage of Android platform has grown, security concerns have
also increased. Malware [12, 43, 45], software vulnerabilities [17,
20, 24, 44] and privacy issues [14, 46] severely violate end user se-
curity and privacy.
∗This work was conducted while Mu Zhang was a PhD student at
Syracuse University, advised by Prof. Heng Yin.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813669.
Unlike traditional desktop systems, Android provides end users
with an opportunity to proactively accept or deny the installation of
any app to the system. As a result, it is essential that the users be-
come aware of app behaviors so as to make appropriate decisions.
To this end, Android markets directly present the consumers with
two classes of information regarding each app: 1) the requested An-
droid permissions and 2) textual description provided by the app’s
developer. Unfortunately, neither can fully serve this need.
Permission requests are not easy to understand. First, prior study [15]
has shown that few users are cautious or knowledgeable enough
to comprehend the security implications of Android permissions.
Second, a permission list merely tells the users which permissions
are used, but does not explain how they are used. Without such
knowledge, one cannot properly assess the risk of allowing a per-
mission request. For instance, both a benign navigation app and
a spyware instance of the same app can require the same permis-
sion to access GPS location, yet use it
for completely different
purposes. While the benign app delivers GPS data to a legitimate
map server upon the user’s approval, the spyware instance can pe-
riodically and stealthily leak the user’s location information to an
attacker’s site. Due to the lack of context clues, a user is not able to
perceive such differences via the simple permission enumeration.
Textual descriptions provided by developers are not security-
centric. There exists very little incentive for app developers to de-
scribe their products from a security perspective, and it is still a dif-
ﬁcult task for average developers (usually inexperienced) to write
dependable descriptions. Malware authors can also intentionally
hide malice from innocent users by providing misleading descrip-
tions. Studies [26, 28] have revealed that the existing descriptions
deviate considerably from requested permissions. Thus, developer-
driven description generation cannot be considered trustworthy.
To address this issue, we propose a novel technique to auto-
matically generate app descriptions which accurately describe the
security-related behaviors of Android apps. To interpret panoramic
app behaviors, we extract security behavior graphs as high-level
program semantics. To create concise descriptions, we further con-
dense the graphs by mining and compressing the frequent sub-
graphs. As we traverse and parse these graphs, we leverage Natu-
ral Language Generation (NLG) to automatically produce concise,
human-understandable descriptions.
A series of efforts have been made to describe the functionali-
ties of traditional Java programs as human readable text via NLG.
Textual summaries are automatically produced for methods [30],
method parameters [32], classes [25], conditional code snippets [11]
and algorithmic code structures [31] through program analysis and
comprehension. However, these studies focus upon depicting the
intra-procedural structure-based operations. In contrast, our tech-
nique presents the whole-program’s semantic-level activities. Fur-
(a) Permission Requests.
(b) Old+New Descriptions.
Figure 1: Metadata of the Example App.
thermore, we take the ﬁrst step towards automating Android app
description generation for security purposes.
We implement a prototype system, DESCRIBEME, in 25 thou-
sand lines of Java code. Our behavior graph generation is built
on top of Soot [8], while our description production leverages an
NLG engine [7] to realize texts from the graphs. We evaluate our
system using both DroidBench [3] and real-world Android apps.
Experimental results demonstrate that DESCRIBEME is able to ef-
fectively bridge the gap between descriptions and permissions. A
further user study shows that our automatically-produced descrip-
tions are both readable and effective at helping users avoid malware
and privacy-breaching apps.
Natural language generation is in general a hard problem, and it
is an even more challenging task to describe app behaviors to av-
erage users in a comprehensive yet concise, and most importantly,
human-readable manner. While we have demonstrated promising
results, we do not claim that our system is fully mature and has ad-
dressed all the challenges. However, we believe that we have made
a solid step towards this goal. We also hope the report of our expe-
rience can attract more attention and stimulate further research.
In summary, this paper makes the following contributions:
• We propose a novel technique that automatically describes
security-related app behaviors to the end users in natural lan-
guage. To the best of our knowledge, we are the ﬁrst to pro-
duce Android app descriptions for security purpose.
• We implement a prototype system, DESCRIBEME, that com-
bines multiple techniques, including program analysis, sub-
graph mining and natural language generation, and adapts
them to the new problem domain, which is to systematically
create expressive, concise and human-readable descriptions.
• Evaluation and user study demonstrate that DESCRIBEME
signiﬁcantly improves the expressiveness of textual descrip-
tions, with respect to security-related behaviors.
2. OVERVIEW
2.1 Problem Statement
Figure 1a and Figure 1b demonstrate the two classes of descrip-
tive metadata that are associated with an Android app available via
Google Play. The app shown leaks the user’s phone number and
Figure 2: Deployment of DESCRIBEME
service provider to a remote site. Unfortunately, neither of these
two pieces of metadata can effectively inform end users of the risk.
The permission list (Figure 1a) simply enumerates all of the per-
missions requested by the app while replacing permission primi-
tives with straightforward explanations. Besides, it can merely tell
users that the app uses two separate permissions, READ_PHONE_STATE
and INTERNET, but cannot indicate that these two permissions are
used consecutively to send out phone number. The textual descrip-
tions are not focused on security. As depicted in the example (the
top part in Figure 1b), developers are more interested in describing
the app’s functionalities, unique features, special offers, use of con-
tact information, etc. Prior studies [26,28] have revealed signiﬁcant
inconsistencies between app descriptions and permissions.
We propose a new technique, DESCRIBEME, which addresses
these shortcomings and can automatically produce complementary
security-centric descriptions for apps in Android markets.
It is
worth noting that we do not expect to replace the developers’ de-
scriptions with ours. Instead, we hope to provide additional app
information that is written from a security perspective. For exam-
ple, as shown in the bottom part of Figure 1b, our security-sensitive
descriptions are attached to the existing ones. The new description
states that the app retrieves the phone number and writes data to
network, and therefore indicates the privacy-breaching behavior.
Notice that Figure 1b only shows a portion of our descriptions, and
a complete version is depicted in Appendix A.
We expect to primarily deploy DESCRIBEME directly into the
Android markets, as illustrated in Figure 2. Upon receiving an app
submission from a developer, the market drives our system to an-
alyze the app and create a security-centric description. The gener-
ated descriptions are then attached to the corresponding apps in the
markets. Thus, the new descriptions, along with the original ones,
are displayed to consumers once the app is ready for purchase.
Given an app, DESCRIBEME aims at generating natural language
descriptions based on security-centric program analyses. More specif-
ically, we achieve the following design goals:
• Semantic-level Description. Our approach produces descrip-
tions for Android apps solely based upon their program se-
mantics. It does not rely upon developers’ statements, users’
review, or permission listings.
• Security-centric Description. The generated descriptions
focus on the security and privacy aspects of Android apps.
They do not exhaustively describe all program behaviors.
• Human Readability. The crafted descriptions are natural
language based scripts that are comprehensible to end users.
Besides, the descriptive texts are concise. They do not con-
tain superﬂuous components or repetitive elements.
2.2 Architecture Overview
Figure 3 depicts the workﬂow of our automated description gen-
eration. This takes the following steps:
Android App MarketBehavior Analysis & Natural Language GenerationDeveloper’s AppSubmitAnalysisNLGSecurity-centric DescriptionsAttachFigure 3: Overview of DESCRIBEME
(1) Behavior Graph Generation. Our natural language descrip-
tions are generated via directly interpreting program behavior
graphs. To this end, we ﬁrst perform static program analyses to
extract behavior graphs from Android bytecode programs. Our
program analyses enable a condition analysis to reveal the trig-
gering conditions of critical operations, provide entry point dis-
covery to better understand the API calling contexts, and lever-
age both forward and backward dataﬂow analyses to explore
API dependencies and uncover constant parameters. The result
of these analyses is expressed via Security Behavior Graphs
that expose security-related behaviors of Android apps.
(2) Subgraph Mining & Graph Compression. Due to the com-
plexity of object-oriented, event-driven Android programs, static
program analyses may yield sizable behavior graphs which are
extremely challenging for automated interpretation. To address
this problem, we next reduce the graph size using subgraph
mining. More concretely, we ﬁrst leverage data mining based
technique to discover the frequent subgraphs that bear speciﬁc
behavior patterns. Then, we compress the original graphs by
substituting the identiﬁed subgraphs with single nodes.
(3) Natural Language Generation. Finally, we utilize natural
language generation technique to automatically convert the se-
mantically rich graphs to human understandable scripts. Given
a compressed behavior graph, we traverse all of its paths and
translate each graph node into a corresponding natural lan-
guage sentence. To avoid redundancy, we perform sentence
aggregation to organically combine the produced texts of the
same path, and further assemble only the distinctive descrip-
tions among all the paths. Hence, we generate descriptive scripts
for every individual behavior graph derived from an app and
eventually develop the full description for the app.
3. SECURITY BEHAVIOR GRAPH
3.1 Security-related Behavioral Factors
We consider the following four factors as essential when describ-
ing the security-centric behaviors of an Android app sample:
1) API call and Dependencies. Permission-related API calls di-
rectly reﬂect the security-related app behaviors. Besides, the
dependencies between certain APIs indicate speciﬁc activities.
2) Condition. The triggering conditions of certain API calls imply
potential security risks. The malice of an API call is sometimes
dependent on the absence or presence of speciﬁc preconditions.
For instance, a missing check for user consent may indicate un-
wanted operations; a condition check for time or geolocation
may correspond to trigger-based malware.
3) Entry point. Prior studies [12, 40] have demonstrated that the
entry point of a subsequent API call is an important security in-
dicator. Depending on the fact an entry point is a user interface
or background event handler, one can infer whether the user is
aware that such an API call has been made or not.
4) Constant. Constant parameters of certain API calls are also es-
sential to security analysis. The presence of a constant argument
or particular constant values should arouse analysts’ suspicions.
3.2 Formal Deﬁnition
To consider all these factors, we describe app behaviors using
Security Behavior Graphs (SBG). An SBG consists of behavioral
operations where some operations have data dependencies.
(i.e., APIs or behavior patterns) in Σ;
= (V, E, α) over a set of operations Σ, where:
Deﬁnition 1. A Security Behavior Graph is a directed graph G
• The set of vertices V corresponds to the behavioral operations
• The set of edges E ⊆ V × V corresponds to the data dependen-
• The labeling function α : V → Σ associates nodes with the
labels of corresponding semantic-level operations, where each label
is comprised of 4 elements: behavior name, entry point, constant
parameter set and precondition list.
cies between operations;
Notice that a behavior name can be either an API prototype or a
behavior pattern ID. However, when we build SBGs using static
program analysis, we only extract API-level dependency graphs
(i.e., the raw SBGs). Then, we perform frequent subgraph mining
to identify common behavior patterns and replace the subgraphs