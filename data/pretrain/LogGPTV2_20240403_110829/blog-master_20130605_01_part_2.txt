```  
postgres=# select age(datfrozenxid),datname from pg_database;  
   age    |  datname    
----------+-----------  
 41050570 | template1  
 41050570 | template0  
 41050570 | postgres  
 41050570 | digoal_01  
 41050570 | digoal_02  
 41050570 | digoal  
(6 rows)  
postgres=# show autovacuum_freeze_max_age;  
 autovacuum_freeze_max_age   
---------------------------  
 200000000  
(1 row)  
postgres=# select 41050570/200000000.0;  
        ?column?          
------------------------  
 0.20525285000000000000  
(1 row)  
```  
使用方法, 可以过滤一些不想检查的数据库. 如果告警了, 说明数据库快要被freeze了, 这个会带来巨大的io开销, 建议在自动触发前安排一下在数据库空闲时段手工执行vacuumdb --freeze操作. 或者找出age最大的表(age(pg_class.relfrozenxid))手工执行vacuum freeze. 总之尽量不要让数据库自动触发, 因为自动触发的时间无法控制, 可能发生在业务最繁忙的时候.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=autovac_freeze -w 90% -c 95% --exclude=template1,template0,postgres  
POSTGRES_AUTOVAC_FREEZE OK: DB "postgres" (host:127.0.0.1) (port=1919)  digoal=21%;90;95  digoal_01=21%;90;95  digoal_02=21%;90;95 | time=0.01s digoal=21%;90;95  digoal_01=21%;90;95  digoal_02=21%;90;95   
```  
6\.4\.3 连接数监控  
阈值可以配置正数, 负数, 百分比.   
正数表示已使用连接数  
负数表示剩余可用连接数, 需要用到max_connections参数.  
百分比表示已使用连接数占max_connections的百分比.  
正数  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=backends -w=120 -c=150  
POSTGRES_BACKENDS OK: DB "postgres" (host:127.0.0.1) (port=1919) 1 of 1000 connections (1%) | time=0.01s digoal=0;120;150;0;1000 digoal_01=0;120;150;0;1000 digoal_02=0;120;150;0;1000 postgres=1;120;150;0;1000 template0=0;120;150;0;1000 template1=0;120;150;0;1000   
```  
负数  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=backends -w=-120 -c=-100  
POSTGRES_BACKENDS OK: DB "postgres" (host:127.0.0.1) (port=1919) 1 of 1000 connections (1%) | time=0.01s digoal=0;880;900;0;1000 digoal_01=0;880;900;0;1000 digoal_02=0;880;900;0;1000 postgres=1;880;900;0;1000 template0=0;880;900;0;1000 template1=0;880;900;0;1000   
```  
百分比  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=backends -w=80% -c=90%  
POSTGRES_BACKENDS OK: DB "postgres" (host:127.0.0.1) (port=1919) 1 of 1000 connections (1%) | time=0.01s digoal=0;800;900;0;1000 digoal_01=0;800;900;0;1000 digoal_02=0;800;900;0;1000 postgres=1;800;900;0;1000 template0=0;800;900;0;1000 template1=0;800;900;0;1000   
```  
6\.4\.4 表和索引的数据膨胀监控  
```  
Checks the amount of bloat in tables and indexes.   
(Bloat is generally the amount of dead unused space taken up in a table or index. This space is usually reclaimed by use of the VACUUM command.)   
This action requires that stats collection be enabled on the target databases, and requires that ANALYZE is run frequently.   
The --include and --exclude options can be used to filter out which tables to look at.   
```  
阈值可以使用数字或者百分比.  
数字表示膨胀多少容量, 单位可以是bytes, kilobytes, megabytes, gigabytes, terabytes, exabytes, petabytes, and zettabytes. 可以使用两位缩写.  
百分比表示膨胀的百分比.  
--perflimit这个参数用来限制输出的对象个数. 如果膨胀超过阈值的比较多, 可以使用这个参数限制一下输出.  
注意膨胀系数和以下参数有关 :   
autovacuum_vacuum_scale_factor = 0.2, 这样的话基本上DML频繁的表都会膨胀20%左右. 所以告警的阈值最好设置在20%以上.  
举例 :   
百分比  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=bloat -w=30% -c=40% --perflimit=5  
POSTGRES_BLOAT CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) (db postgres) table public.test rows:1000000 pages:4425 shouldbe:4406 (1.0X) wasted size:155648 (152 kB) * (db postgres) index idx_test_id rows:? pages:2745 shouldbe:1958 (1.4X) wasted bytes:6447104 (6 MB) * (db postgres) table public.batch rows:9163560 pages:76363 shouldbe:76251 (1.0X) wasted size:917504 (896 kB) | idx_test_id=6447104B public.batch=917504B public.test=155648B pg_catalog.pg_depend_depender_index=0B pg_toast.pg_toast_2618=0B   
```  
百分比和容量  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=bloat -w="30% and 100M" -c="40% and 200M" --perflimit=5  
POSTGRES_BLOAT OK: DB "postgres" (host:127.0.0.1) (port=1919) (db postgres) index idx_test_id rows:? pages:2745 shouldbe:1958 (1.4X) wasted bytes:6447104 (6 MB) | idx_test_id=6447104B public.batch=917504B public.test=155648B pg_catalog.pg_depend_depender_index=0B pg_toast.pg_toast_2618=0B   
```  
百分比或容量  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=bloat -w="30% or 100M" -c="40% or 200M" --perflimit=5  
POSTGRES_BLOAT CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) (db postgres) table public.test rows:1000000 pages:4425 shouldbe:4406 (1.0X) wasted size:155648 (152 kB) * (db postgres) index idx_test_id rows:? pages:2745 shouldbe:1958 (1.4X) wasted bytes:6447104 (6 MB) * (db postgres) table public.batch rows:9163560 pages:76363 shouldbe:76251 (1.0X) wasted size:917504 (896 kB) | idx_test_id=6447104B public.batch=917504B public.test=155648B pg_catalog.pg_depend_depender_index=0B pg_toast.pg_toast_2618=0B   
```  
如果发现膨胀太大, 可以使用vacuum full 回收空间. 百分比不准, 建议使用容量.  
如果要监控多个数据库需要在参数中指定, 例如 :  
```  
--db postgres,digoal_01,digoal_02  
```  
6\.4\.5 checkpoint监控  
检查最后一次checkpoint到现在已经过去多长时间了, 超过阈值则告警. 但是需要注意LC_TIME变量需要与数据库一致.  
checkpoint检测必须在本机进行, 不需要连接参数, 但是需要提供$PGDATA环境变量或目录, 同时pg_controldata要在路径中.  
```  
pg92@db-172-16-3-39-> export LC_TIME=C  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios --datadir=$PGDATA --action=checkpoint -w 10s -c 200000s  
POSTGRES_CHECKPOINT WARNING:  Last checkpoint was 1420 seconds ago | age=1420;10;200000   
```  
或者写$PGDATA路径  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios --datadir=/pgdata1919 --action=checkpoint -w 10s -c 200000s  
POSTGRES_CHECKPOINT WARNING:  Last checkpoint was 1531 seconds ago | age=1531;10;200000   
```  
把LC_TIME写到环境变量中.  
```  
pg92@db-172-16-3-39-> vi ~/.bash_profile  
export LC_TIME=C  
```  
6\.4\.6 检查数据库集群的ID是否发生变化  
类似checkpoint, 只能用于本地监控. 首先使用-c 0 找出ID, 当然使用pg_controldata也可以找到这个id.   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios --datadir=/pgdata1919 --action=cluster_id -c 0  
POSTGRES_CLUSTER_ID UNKNOWN:  cluster_id: 5742948541169127399   
```  
然后正式监控使用这个id,   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios --datadir=/pgdata1919 --action=cluster_id -c 5742948541169127399  
POSTGRES_CLUSTER_ID OK:  cluster_id: 5742948541169127399   
```  
如果ID发生变化, 告警.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios --datadir=/pgdata1919 --action=cluster_id -c 5742948541169127398  
POSTGRES_CLUSTER_ID CRITICAL:  cluster_id: 5742948541169127399  
```  
6\.4\.7 监控数据库事务提交的百分比.  
反过来想, 其实是监控回滚的百分比.  
```  
postgres=# select * from pg_stat_database  
-[ RECORD 3 ]--+------------------------------  
datid          | 12788  
datname        | postgres  
numbackends    | 1  
xact_commit    | 1498  
xact_rollback  | 1  
blks_read      | 347126  
blks_hit       | 261131  
tup_returned   | 40780490  
tup_fetched    | 94728  
tup_inserted   | 5223  
tup_updated    | 1512  
tup_deleted    | 4664  
conflicts      | 0  
temp_files     | 0  
temp_bytes     | 0  
deadlocks      | 0  
blk_read_time  | 0  
blk_write_time | 0  
stats_reset    | 2013-06-04 08:07:33.154495+08  
```  
使用阈值百分比  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=commitratio -w 90% -c 80%  
POSTGRES_COMMITRATIO OK: DB "postgres" (host:127.0.0.1) (port=1919) postgres: 99.93  | time=0.02s postgres=99.93;90;80  
```  
6\.4\.8 数据库连接状态监控  
执行SELECT version(), 如果正常则返回0. 异常则为psql的返回.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=connection  
POSTGRES_CONNECTION OK: DB "postgres" (host:127.0.0.1) (port=1919) version 9.2beta1 | time=0.01s   
```  
不能连接的情况 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1918 -db postgres -u postgres --action=connection  
ERROR: could not connect to server: Connection refused  
        Is the server running on host "127.0.0.1" and accepting  
        TCP/IP connections on port 1918?  
pg92@db-172-16-3-39-> echo $?  
3  
```  
6\.4\.9 定制化SQL监控  
SQL语句必须至少返回一个名为result的列值, 或者额外再返回一个任意列值. 也就是最多返回2个列.  
result列作为返回值的阈值比较列.  
返回值类型可以选择如下, 共计4种返回类型, 使用参数--valtype指定返回类型 :   
```  
integer: Does a simple integer comparison. The first column should be a simple integer, and the warning and critical values should be the same.  
string: The warning and critical are strings, and are triggered only if the value in the first column matches it exactly. This is case-sensitive.  
time: The warning and the critical are times, and can have units of seconds, minutes, hours, or days. Each may be written singular or abbreviated to just the first letter. If no units are given, seconds are assumed. The first column should be an integer representing the number of seconds to check.  
size: The warning and the critical are sizes, and can have units of bytes, kilobytes, megabytes, gigabytes, terabytes, or exabytes. Each may be abbreviated to the first letter. If no units are given, bytes are assumed. The first column should be an integer representing the number of bytes to check.  
```  
阈值比较可以是大于或者小于, 默认是大于. 使用 --reverse 参数则是小于.  
举例 :   
1\. 如果test这个对象的占用空间大于10个页面则严重警告.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=custom_query --valtype=string -c "test" --query="select relname AS result, relpages AS pages from pg_class where relpages>10"  
POSTGRES_CUSTOM_QUERY CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) test | time=0.01s pages=4425;;test  
```  
其他 :   
```  
Example 2: Give a critical if the "foobar" function returns a number over 5MB:  
  check_postgres_custom_query --critical='5MB'--valtype=size --query="SELECT foobar() AS result"  
Example 2: Warn if the function "snazzo" returns less than 42:  
  check_postgres_custom_query --critical=42 --query="SELECT snazzo() AS result" --reverse  
```  
6\.4\.10 数据库容量监控  
可以使用include或者exclude. 单个数据库的容量超过阈值则告警.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=database_size -w 10M -c 20M  
POSTGRES_DATABASE_SIZE CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) postgres: 770831480 (735 MB) digoal: 582435332 (555 MB) digoal_01: 169705988 (162 MB) digoal_02: 8094212 (7905 kB) template1: 6496772 (6345 kB) template0: 6488580 (6337 kB)  | time=0.02s postgres=770831480;10485760;20971520 digoal=582435332;10485760;20971520 digoal_01=169705988;10485760;20971520 digoal_02=8094212;10485760;20971520 template1=6496772;10485760;20971520 template0=6488580;10485760;20971520   
```  
使用exclude排除不监控的库  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=database_size -w 10M -c 20M --exclude=template0,template1  
POSTGRES_DATABASE_SIZE CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) postgres: 770831480 (735 MB) digoal: 582435332 (555 MB) digoal_01: 169705988 (162 MB) digoal_02: 8094212 (7905 kB)  | time=0.02s postgres=770831480;10485760;20971520 digoal=582435332;10485760;20971520 digoal_01=169705988;10485760;20971520 digoal_02=8094212;10485760;20971520   
```  
6\.4\.11 数据库运行统计信息, 这个一般给cacti用来画图. 不返回异常结果  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=dbstats  
backends:2 commits:1587 rollbacks:1 read:347126 hit:264246 idxscan:0 idxtupread:0 idxtupfetch:0 idxblksread:2744 idxblkshit:1 seqscan:12 seqtupread:40043328 ret:40799382 fetch:95747 ins:5223 upd:1512 del:4664 dbname:postgres  
```  
6\.4\.12 触发器监控, 监控是否有disabled的触发器.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=disabled_triggers -w 1 -c 2  
POSTGRES_DISABLED_TRIGGERS OK: DB "postgres" (host:127.0.0.1) (port=1919) Disabled triggers: 0 | time=0.01s  
```  
多个数据库则使用--db postgres,other_dbname,...指定.  
6\.4\.13 磁盘空间监控  
阈值为百分比或者容量.  
使用超过指定的百分比或容量则告警.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=disk_space -w "10% or 5GB"  
POSTGRES_DISK_SPACE WARNING: DB "postgres" (host:127.0.0.1) (port=1919) FS /dev/sda1 mounted on / is using 9.34 GB of 28.38 GB (35%) | time=0.01s size=10027884544B   
```  
使用规则表达式限定设备名.  
```  