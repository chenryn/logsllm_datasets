terms and conditions. Users who fulﬁll this policy with idemix ev-
idence reveal – aside from their credit card number – merely the
facts that (1) the credentials they own do fulﬁll the stated require-
ments and (2) they indeed disclosed the proper values to the escrow
agent. In particular, the server neither learns the exact values of the
attributes occurring in the policy’s where clause nor the number of
the insurance policy. However, despite the users’ preserved privacy,
they are accountable in case of damage due to the information the
escrow agent learned. Note that identities such as Visa represent
aliases (e.g., to cryptographic keys) that are resolved by the cre-
dential technology used to fulﬁll the policy. We refer to Sections 4
and 5 of [9] for more detailed information on syntax and semantics
of CARL, respectively.
3.2 Idemix Proof Speciﬁcation
The idemix anonymous credential system consists of a number
of cryptographic building blocks including signature scheme, en-
15cryption, and commitment schemes. Combined they can achieve
the different features of the idemix authentication system. The
components as well as their combination is driven by speciﬁca-
tion languages that abstract from cryptographic details [2]. Thus,
to generate an idemix credential, i.e., the evidence, that fulﬁlls a
given claim, we have to translate claims into the idemix proof spec-
iﬁcation language. We summarize the main features that idemix
provides and that can be realized using the idemix proof speciﬁ-
cation. One major advantage of anonymous credentials over other
credential technology is their ability to disclose attributes selec-
tively. The language supports this feature by specifying for each
attribute of each credential whether it should be revealed or not. A
further advantage is that they allow a user to prove that attributes
encoded in different credentials fulﬁll a speciﬁed predicate by so
called cross-credential proofs.
Note that there is a gap between what has been proposed as fea-
tures for idemix in the scientiﬁc community (e.g., limited spend-
ing [7]), what is speciﬁed and implemented [18], and what can be
expressed with the language proposed in [2]. We will highlight
what predicates can be expressed by the language as this is the most
limited set. Those predicates are (1) equality among attributes, (2)
inequality between attributes and constants, and (3) set member-
ship proofs. First, equality among attributes can cryptographically
be proven by using the same values for both attributes within a
zero-knowledge proof. The proof speciﬁcation achieves this fea-
ture by using one so-called identiﬁer for several attributes. Second,
inequalities allow the user to specify that an attribute is smaller
or larger than some constant.
In fact, the language supports the
operators  and provides a distinct construct for the
speciﬁcation of the attribute, the constant, and the operator. Third,
the language speciﬁes a construct to deﬁne attributes that should be
used in a set membership proof. Set membership proofs are only
available for specially encoded attributes, where the idemix imple-
mentation uses prime encoded attributes as proposed by Camenisch
and Gross [6].
In addition to the given predicates the library implements con-
cepts such as disclosure of attributes to a third party, or signature
on messages. The former is realized using veriﬁable encryption
as proposed in [10] and the latter amounts to signing the message
using the Fiat-Shamir heuristic [13]. As those features are not
credential-speciﬁc, they are addressed by dedicated statements in
the proof speciﬁcation language. Furthermore, the library imple-
ments that idemix proofs can be tied to pseudonyms. However, this
concept is currently not reﬂected in our claim language.
Finally, the proof speciﬁcation language offers the creation of
commitments as well as representations. Both are cryptographic
objects that can be employed to implement high level functionality.
In this paper we show how those constructs can be used to imple-
ment arbitrary arithmetic statements about certiﬁed attributes. For
example, in Figure 2 we provide the idemix proof speciﬁcation cor-
responding to the claim described in Section 4.2. Note that we only
indicate the attributes required in the claim.
3.3 Privacy Beneﬁts
The choice of anonymous credential systems as credential tech-
nology lies in their privacy beneﬁts over competing technologies.
We provide an overview of the privacy features and distinguish
again between on-line and certiﬁed credentials. Depending on the
deﬁnition of privacy, on-line credentials may have many advan-
tages. That is, if we only care about a user’s privacy w.r.t. to the
relying parties, they are a feature-rich and privacy-friendly variant.
Their main drawback is that the issuer of the credential (i.e., the
IdP) is involved in each transaction, i.e., it provides unlinkability
type="int"
/>
id1
id2
[...]
id3
[...]
id4
[...]
id1
id5
id6
[...]
id2
id6
id5
I agree with the
general terms and conditions.
Figure 2: Idemix proof speciﬁcation that realizes the example
claim speciﬁed in Section 4.2.
when using a credential multiple times only w.r.t. the relying par-
ties. In addition, features such as proving predicates that involve
credentials issued by different IdPs can only be achieved using spe-
cial protocols between those IdPs. Table 1 shows that, except for
the generation of the evidence independently from the IdP, all pri-
vacy features are provided by on-line credentials. Note that the
16restrictions on unlinkability and cross-credential proofs are due to
the reasons mentioned before.
policy is fulﬁlled, however, an adequate claim language is needed
to express the statements made about the credential’s attributes.
Certiﬁed credentials such as X.509, idemix, or U-Prove creden-
tials provide a signiﬁcant advantage over on-line credentials. They
allow a user to proof possession of the credential without involv-
ing the IdP, which provides privacy w.r.t. to the issuer that an on-
line credential can never provide. However, when it comes to the
privacy w.r.t. to the relying party, certiﬁed credentials cause some
difﬁculty. On one hand, protection of the user’s privacy demands
that the latter can change the credential to make it ﬁt for a given
purpose. On the other hand the issuer needs to make sure that only
speciﬁc changes to the credential can be made, i.e., the semantics
of the credential must remain unchanged.
Feature
On-line
X.509 U-Prove Idemix
X
X
Message Signatures
Proof of Ownership
Evidence w/o IdP
Selective Disclosure
X
Predicate Proofs
X
Disclosure to Third-Parties X
Limited Spending
X
(X)
Cross-Credential Proofs
Unlinkable Multi-Use
(X)
X
X
X
X
X
X
X
X(+)
X(+)
X(+)
X(+)
X
X
X
X
X
X
X(+)
X
X
Table 1: Certiﬁcation technology feature comparison. X: Sup-
ported. (X): Limited support. X(+): Possible and described in
the literature, but currently not implemented.
Table 1 shows that X.509 credentials only support basic signa-
tures and ownership proofs. As mentioned before they do allow
to generate this proof (or evidence) without involving the IdP. The
reason for providing such limited set of functionality lies in the fact
that a user cannot adapt the cryptographic signature.
Implementations of anonymous credentials, such as idemix or U-
Prove, provide more ﬂexibility in terms of privacy protection. Both
allow a user to selectively reveal attributes that have been certiﬁed
in a credential (cf. Selective Disclosure in Table 1). U-Prove strives
for simplicity, thus, it currently does not provide further privacy
protecting features even though the underlying signature scheme
would support further features. The idemix library1 is currently
the most advanced implementation of a privacy-preserving authen-
tication system. In addition to all previously mentioned features it
supports proofs of predicates over attributes, e.g., proving equal-
ity among attributes, and other features described in Section 3.2.
Using veriﬁable encryption, it allows for conditionally disclosing
attributes to a (trusted) third party. Limiting the possibilities of
spending a credentials such as only allowing a credential to be used
only k times within a certain time interval as proposed in [7] is
currently not implemented but it could be added to the current im-
plementation. The distinction between idemix and U-Prove boils
down to the fact that an individual idemix credential can be used
multiple times without the resulting evidence becoming linkable.
This is referred to as Unlinkable Multi-Use in Table 1.
4. CLAIM HANDLING
We compare in Section 4.1 different ways on how an authentica-
tion policy can be fulﬁlled . The decision on which way is chosen is
mainly driven by the capabilities of the underlying credential tech-
nology. Therefore, those capabilities have to be known and con-
sidered at the time of claim generation. No matter which way the
1http://www.zurich.ibm.com/~pbi/identityMixer_gettingStarted/
In general, claims may be accompanied with evidence from dif-
ferent credential technologies. However, requirements across dif-
ferent credentials, so called cross-credential requirements cannot
be proven using different credential technologies. Although the
claim language itself is independent from technology, the expressed
statement must be in accordance with the capabilities of the under-
lying credential technology. In this section we describe how to gen-
erate claims for the anonymous credential technologies idemix and
U-Prove. Naturally, of interest are only claims that logically imply
the policy, therefore we deﬁne claim semantics in Section 4.2.
4.1 Methods To Fulﬁll A Policy
An authentication policy can be fulﬁlled in several ways. Intu-
itively, in case a policy requires the user to show that she owns a
driver’s license, we can see that the user can comply by provid-
ing a proof of such statement or by simply revealing the driver’s
license information as we do today. On a more conceptual level
we can distinguish three methods for complying with a given au-
thentication policy. First, using non-certiﬁed credentials a user can
request a claim that closely matches the given policy. Second, using
a standard certiﬁed credentials as introduced in Section 2 allows a
user to generate a claim without involvement of the IdP. However,
this technology lacks the ability to adapt claims to a given policy.
Third, privacy-preserving certiﬁed credentials such as anonymous
credentials enable a user to generate a claim speciﬁc to a given
policy. The privacy implications on each of those options are dis-
cussed in more detail in Section 3.3. For all three methods we need
a claim language to describe what the content or structure of gen-
erated evidence is. Therefore, we need a claim language and deﬁne
is now.
4.2 Claim Language
Analog to servers who express their authentication requirements
in a policy language, users make authentication statements in a
claim language. A claim precisely describes the statements that a
user proves by means of technology-dependent evidence. In partic-
ular, claims serve as technology-independent input to technology-
speciﬁc evidence generation modules. Although such claim lan-
guage is a crucial building block for data-minimizing authentica-
tion systems, no adequate claim language has been proposed yet.
The claim language we propose allows a user to state which cre-
dentials she owns and what properties those credentials have. Such
properties are expressed in terms of a logical predicate over the
credential’s attributes. Additionally, the language allows users to
consent to a certain message or to disclose attributes to a (trusted)
third party. The language we propose is intended as counterpart to
the CARL policy language (cf. Section 3.1). In fact, most language
constructs can be reused, however, three concepts need special at-
tention.
First, for credential ownership (i.e., ‘own’ lines) CARL policies
allow for specifying a list of issuers with disjunctive semantics,
i.e., ownership can be proven for any of those issuers. As it must
be unambiguous for the underlying credential technology which
cryptographic key to use for generating the claim’s evidence, the
claim language just states one issuer. Second, disclosure requests
for attributes that are to reveal to the server (i.e., ‘reveal’ lines
without ‘to’) are only meaningful in policies. A claim must rather
fulﬁll those requests by disclosing the corresponding attribute val-
ues. In our language, such attribute disclosure is addressed by stat-
ing equality between the respective attribute and its value. Third,
CARL supports basic variables that may act as substitute for a num-
17ber of syntax elements. While being useful in policies, such vari-
ables provide no beneﬁt to a claim language. Therefore, the only
kind of variable we consider are attribute variables which reference
credential attributes.
Figure 3 shows the (left factored) grammar of our claim lan-
guage. Apart from above mentioned restriction, credential owner-
ship is expressed with ‘i own’ lines in the same way as ‘own’ lines
in CARL. We preﬁx the main keywords with ‘i’ to stress the claim’s
active statement character. The attribute predicate is expressed after