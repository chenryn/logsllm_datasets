title:BLADE: Slashing the Invisible Channel of Drive-by Download Malware
author:Long Lu and
Vinod Yegneswaran and
Phillip A. Porras and
Wenke Lee
BLADE: Slashing the Invisible Channel of
Drive-by Download Malware
Long Lu1, Vinod Yegneswaran2, Phillip Porras2, and Wenke Lee1
1 School of Computer Science, Georgia Tech, Atlanta, GA 30332 USA
2 SRI International, Menlo Park, CA, 94025 USA
{long,wenke}@cc.gatech.edu, {vinod,porras}@csl.sri.com
Abstract. Drive-by downloads, which result in the unauthorized instal-
lation of code through the browser and into the victim host, have become
one of the dominant means through which mass infections now occur.
We present BLADE (Block All Drive-by download Exploits), a browser-
independent system that seeks to eliminate the drive-by threat. BLADE
prudently assumes that the legitimate download of any executable must
result from explicit user consent. BLADE transparently redirects every
browser download into a non-executable safe zone on disk, unless it is
associated with a programmatically inferred user-consent event. BLADE
thwarts the necessary underlying transaction on which all drive-by down-
loads rely, therefore it requires no prior knowledge of the exploit methods,
and is not subject to circumvention by obfuscations or zero-day threats.
1 The BLADE System
Unlike push-based approaches adopted by Internet scanning worms and viruses,
contemporary malware publishers rely on drive-by exploits for silent dissemina-
tion of spyware, trojans, and bots [2]. As a countermeasure, BLADE is a kernel-
based monitor designed to block all malware delivered without user knowledge
via browsers and overcomes the challenges described in [1].
BLADE’s design is motivated by the fundamental observation that all browser
downloads fall into either of two basic categories: supported ﬁle types (e.g., html,
jpeg) or unsupported ﬁle types (e.g., exe, zip). While browsers silently fetch and
render all supported ﬁle types, they must prompt the user when an unsupported-
type is encountered. The objective of client-side download exploits is to deliver
malicious (unsupported) content through the browser using methods that essen-
tially bypass the standard unsupported-type user prompt interactions. BLADE’s
approach is to intercept and impose “execution prevention” of all downloaded
content that has not been directly consented to by user-to-browser interaction.
To achieve this, BLADE introduces two key OS-level capabilities:
(1) User-Interaction Tracking. A novel aspect of BLADE is the introduction
of user-interaction tracking as a means to discern transparent browser down-
loads from those that involve direct user authorization. Operating from the ker-
nel space, BLADE introduces a browser-independent supervisor, which infers user
E. Kirda, S. Jha, and D. Balzarotti (Eds.): RAID 2009, LNCS 5758, pp. 350–352, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
BLADE: Slashing the Invisible Channel of Drive-by Download Malware
351
User Interactions
Kernel Space
 On-Screen UI
Browser
Browser
Browsers
Disk
 I/O
User
Interupt
Dispatch
Win32K
Blade
Supervisor
FileSys
View
I/O-
Redirector
Safe
Zone
File
System
Fig. 1. BLADE’s Architecture
consent-to-download events, by reconstructing on-screen user interfaces (UI) from
kernel memory and monitoring user interactions in the form of hardware inter-
rupts. Speciﬁcally, it retrieves semantic UI information from the kernel objects
maintained by the windowing subsystem (Win32K), discovers interested UI ele-
ments and their status changes (e.g., download conﬁrmation dialogs), and listens
to hardware-interaction events (e.g., mouse clicks) targeted at any interested UI
element. Once a download consent event is inferred, the supervisor records it as
an authorization along with the information parsed from UI elements (e.g., ﬁle
names and URLs).
(2) Disk I/O Redirection. BLADE’s I/O-Redirector transparently redirects all
hard disk write operations to a safe zone. This safe zone, created and managed
by BLADE, represents oﬀshore storage inaccessible from the local ﬁle system.
Being addressable only through BLADE ensures that ﬁles in the safe zone can
never be loaded or executed, even by the OS. Upon ﬁnishing each ﬁle write
operation, the I/O-Redirector queries the supervisor and maps the current ﬁle
to the local ﬁle system if a stored authorization correlates with it. To maintain
functional consistency, the supervised processes are also provided a modiﬁed ﬁle
system view, which renders the impression that all disk writes are carried out in
their respective locations, while actual disk I/O to these ﬁles are forwarded by
BLADE to the safe zone. A prototype of BLADE is now under development as a
kernel driver for Windows platforms, which will be tested with multiple versions
of Firefox, Internet Explorer and Chrome.
Threat Model. We assume that the OS, the underlying hardware and network
infrastructure are uncompromised. The attacker’s goal is to perform a forced
upload and execution of malicious binary content on the victim machine. Upon
successfully hijacking control of a browser process, an attacker may pursue either
of two possible paths to bypass BLADE and install a malware binary: (a) evading
I/O redirection, or (b) executing the malware stored in the safe zone. As a kernel
driver only dealing with trusted OS components and unforgeable hardware events
(e.g., mouse clicks), BLADE is not subject to code injection or data manipulation
attacks, and not deceived by fake UI messages which makes (a) diﬃcult. Likewise,
attempts to launch the malware from outside the browser process are naturally
prevented as the the malware is only addressable through BLADE.
352
L. Lu et al.
References
1. Egele, M., Kirda, E., Kruegel, C.: Mitigating drive-by download attacks: Challenges
and open problems. In: iNetSec 2009, Zurich, Switzerland (April 2009)
2. Provos, N., Mavrommatis, P., Rajab, M.A., Monrose, F.: All your iframes point to
us. In: Proceedings of the 17th USENIX Security Symposium (2008)