# BLADE: Slashing the Invisible Channel of Drive-by Download Malware

**Authors:**
- Long Lu<sup>1</sup>
- Vinod Yegneswaran<sup>2</sup>
- Phillip A. Porras<sup>2</sup>
- Wenke Lee<sup>1</sup>

**Affiliations:**
- <sup>1</sup> School of Computer Science, Georgia Tech, Atlanta, GA 30332, USA
- <sup>2</sup> SRI International, Menlo Park, CA 94025, USA

**Emails:**
- {long,wenke}@cc.gatech.edu
- {vinod,porras}@csl.sri.com

## Abstract
Drive-by downloads, which result in the unauthorized installation of code through a browser, have become a primary method for mass malware infections. We present BLADE (Block All Drive-by download Exploits), a browser-independent system designed to eliminate the drive-by threat. BLADE operates on the principle that the legitimate download of any executable must be explicitly authorized by the user. It transparently redirects all browser downloads to a non-executable safe zone on disk unless they are associated with a programmatically inferred user-consent event. By disrupting the underlying transaction necessary for drive-by downloads, BLADE does not require prior knowledge of exploit methods and is resilient to obfuscation and zero-day threats.

## 1. The BLADE System
Unlike push-based approaches used by Internet scanning worms and viruses, contemporary malware publishers rely on drive-by exploits for the silent dissemination of spyware, trojans, and bots. As a countermeasure, BLADE is a kernel-based monitor designed to block all malware delivered via browsers without user knowledge, addressing the challenges outlined in [1].

BLADE’s design is based on the fundamental observation that all browser downloads can be categorized into two types: supported file types (e.g., HTML, JPEG) and unsupported file types (e.g., EXE, ZIP). Browsers silently fetch and render supported file types but prompt the user when encountering unsupported types. The goal of client-side download exploits is to deliver malicious content (unsupported types) through the browser, bypassing the standard user prompts. BLADE intercepts and enforces "execution prevention" on all downloaded content that lacks direct user consent.

To achieve this, BLADE introduces two key OS-level capabilities:

### 1.1 User-Interaction Tracking
A novel aspect of BLADE is the introduction of user-interaction tracking to distinguish between transparent browser downloads and those involving direct user authorization. Operating from the kernel space, BLADE introduces a browser-independent supervisor that infers user consent-to-download events. This is achieved by reconstructing on-screen user interfaces (UI) from kernel memory and monitoring user interactions in the form of hardware interrupts. Specifically, it retrieves semantic UI information from the kernel objects maintained by the windowing subsystem (Win32K), identifies relevant UI elements and their status changes (e.g., download confirmation dialogs), and listens to hardware-interaction events (e.g., mouse clicks) targeted at these UI elements. Once a download consent event is inferred, the supervisor records it as an authorization along with the parsed information (e.g., file names and URLs).

### 1.2 Disk I/O Redirection
BLADE’s I/O-Redirector transparently redirects all hard disk write operations to a safe zone. This safe zone, created and managed by BLADE, represents offshore storage inaccessible from the local file system. Being addressable only through BLADE ensures that files in the safe zone can never be loaded or executed, even by the OS. Upon completing each file write operation, the I/O-Redirector queries the supervisor and maps the current file to the local file system if a stored authorization correlates with it. To maintain functional consistency, the supervised processes are provided a modified file system view, which gives the impression that all disk writes are carried out in their respective locations, while actual disk I/O to these files is forwarded by BLADE to the safe zone. A prototype of BLADE is currently under development as a kernel driver for Windows platforms and will be tested with multiple versions of Firefox, Internet Explorer, and Chrome.

## Threat Model
We assume that the OS, underlying hardware, and network infrastructure are uncompromised. The attacker's goal is to perform a forced upload and execution of malicious binary content on the victim machine. Upon successfully hijacking control of a browser process, an attacker may attempt to bypass BLADE and install malware by either evading I/O redirection or executing the malware stored in the safe zone. As a kernel driver dealing only with trusted OS components and unforgeable hardware events (e.g., mouse clicks), BLADE is resistant to code injection and data manipulation attacks and is not deceived by fake UI messages, making evasion difficult. Similarly, attempts to launch the malware from outside the browser process are naturally prevented because the malware is only addressable through BLADE.

## References
1. Egele, M., Kirda, E., Kruegel, C.: Mitigating drive-by download attacks: Challenges and open problems. In: iNetSec 2009, Zurich, Switzerland (April 2009)
2. Provos, N., Mavrommatis, P., Rajab, M.A., Monrose, F.: All your iframes point to us. In: Proceedings of the 17th USENIX Security Symposium (2008)