写在前面：本文尝试用一道例题教会小白 Phar反序列化 以及关于POP链建立时的思考 （第一次写文章，多多包涵）题目来自 《Bilibili 2022
1024 程序员节》
## 前置知识：
### Phar 反序列化
#### Phar 是什么？
如果读者们接触过java，是知道Jar文件的，一个应用，包括所有的可执行、可访问的文件，都打包进了一个JAR文件里，使得部署过程十分简单。
Phar是类似 jar 的一种打包文件，通过将 **PHP代码文件** 和 **其他资源** （例如图像，样式表等） **打包** 到一个文件中，
**本质上是一个压缩文件**
#### Phar的文件结构
通过对[官网](https://www.php.net/manual/zh/phar.fileformat.phar.php)的查看，可以知道Phar文件的结构如下
> 1.Stub ---> Phar 的文件头  
>  2.manifest ---> 压缩文件信息  
>  3.contents ---> 压缩文件内容  
>  4.signature ---> 签名
其中 Stub 可以理解是 Phar 的文件头标识，Stub 是一个简单的 PHP 文件，它有一定的格式要求：`xxx` xxx 里的内容可以自定义，但是`__HALT_COMPILER()`是必需的，没有这句 php
语句，PHP就无法识别该文件
manifest 里存放的是文件的属性，权限等详细信息，这里面包含的 Meta-data 是我们主要攻击的地方，这里的 Meta-data
是我们用户自定义的（详细见下图）
contents 用于存放压缩的文件内容
signature 签名（Hash值），参数是可选的（修改签名函数），这里我们只需要知道我们最好是使用脚本创建 Phar 文件，创建好之后就不能轻易修改
Phar 文件中的内容了，否则签名与内容对不上。（修改Phar签名的Python脚本与参考链接我放最后）
> PHP_version >=5.3 默认开启支持 Phar 文件，但要创建自己的 Phar 文件的时候，需要进入 php.ini 设置
> `phar.readonly = Off`  
>  否则会报错：`Fatal error: Uncaught UnexpectedValueException: creating archive
> "test.phar" disabled by the php.ini setting phar.readonly in`
#### 创建一个简单的 Phar 文件
一个简单的 Phar 文件创建脚本：
    name;
        }
    }
    $a = new test();
    $a->name="phpinfo();";
    $phartest=new phar('phartest.phar',0); //创建时后缀名必须为phar 上传文件的时候可以修改后缀 bypass
    $phartest->startBuffering(); //设置缓冲去，准备 Phar 的写操作
    $phartest->setMetadata($a);//将自定义的 Meta-data 存入manifest
    $phartest->setStub("");//设置stub
    //stub是一个简单的php文件。PHP通过 stub 识别一个文件为PHAR文件，可以利用这点绕过文件上传检测
    $phartest->addFromString("test.txt","test");//添加要压缩的文件以及文件的内容
    $phartest->stopBuffering();//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘
    ?>
访问 `127.0.0.1/creat_phar.php` ，生成 Phar 文件，查看文件：
可以清晰的看到我们自定义的序列化字符串，那么什么时候这个字符串会被反序列化呢？
#### Phar 反序列化以及可利用函数
PHP 大部分的文件系统函数在通过 `phar://`伪协议解析 phar 文件时，都会将 meta-data 进行反序列化操作，受影响的函数如下：
能够利用的函数 |  |  |  
---|---|---|---  
fileatime | filectime | file_exists | file_get_contents  
file_put_contents | file | filegroup | fopen  
fileinode | filemtime | fileowner | fileperms  
is_dir | is_executable | is_file | is_link  
is_readable | is_writable | is_writeable | parse_ini_file  
copy | unlink | stat | readfile  
所以当这些函数接收到`phar://`伪协议处理到 phar 文件的时候，Meta-data 里的序列化字符串就会被反序列化，实现‘不使用’
unserialize() 函数实现反序列化操作
### POP链
#### POP构造时常使用的 PHP 魔法函数
    __destruct( 类执行完毕--PHP文件结束--以后调用，其最主要的作用是拿来做垃圾回收机制。)
    __construct( 类一执行就开始调用，其作用是拿来初始化一些值。)
    __toString( 在对象当做  字符串  的时候会被调用。)
    __wakeup( 该魔术方法在 反序列化 的时候自动调用，为反序列化生成的对象做一些初始化操作 )
    __sleep( 在对象被序列化的过程中自动调用。sleep要加数组 )
    __invoke( 当尝试以调用函数的方式调用一个对象时，方法会被自动调用 )
    __get( 当访问类中的私有属性或者是不存在的属性，触发\_\_get魔术方法 )
    __set( 在对象访问私有成员的时候自动被调用，达到了给你看，但是不能给你修改的效果！在对象访问一个私有的成员的时候就会自动的调用该魔术方法 )
    __call( 当所调用的成员方法不存在（或者没有权限）该类时调用，用于对错误后做一些操作或者提示信息 )
    __isset( 方法用于检测私有属性值是否被设定。当外部使用isset读类内部进行检测对象是否有具有某个私有成员的时候就会被自动调用！)
    __unset( 方法用于删除私有属性。在外部调用类内部的私有成员的时候就会自动的调用该魔术方法 )
#### 魔法函数执行顺序：
序列化时：`__construct() __sleep()`  
反序列化时：`__wakeup() __destruct()`
## BiliBili 2022 1024程序员节 第二题
前置知识了解的差不多了就该上题了，毕竟这才是主菜。
### 代码分析
直接访问 index.php 没有任何信息，在没有任何信息的情况下，目录扫描就是一个思路，目录扫描之后发现了 upload.php 和
upload.html 两个文件
upload.php 给出源码
     2*1024*1024){
                echo "";
                exit();
            }
            $arr = pathinfo($filename);
            $ext_suffix = $arr['extension'];
            $allow_suffix = array('jpg','gif','jpeg','png');
            if(!in_array($ext_suffix, $allow_suffix)){  
                echo "";
                exit();
            }
            $new_filename = date('YmdHis',time()).rand(100,1000).'.'.$ext_suffix; 
            move_uploaded_file($temp_name, 'upload/'.$new_filename);
            echo "success save in: ".'upload/'.$new_filename;
        } else if ($_SERVER['REQUEST_METHOD']==='GET') {
            if (isset($_GET['c'])){
                include("5d47c5d8a6299792.php");
                $fpath = $_GET['c'];
                if(file_exists($fpath)){
                    echo "file exists";
                } else { 
                    echo "file not exists";
                }
            } else {
                highlight_file(__FILE__);
            } 
        }  
     ?>
upload.html 就是一个简单的文件上传表单（上传至upload.php）
    upload
        文件名：
简单分析可知，upload.php 有两个功能，如果我们上传了文件，就对我们上传的文件进行处理，用时间戳修改文件名，并且传入 `./upload`文件夹下
如果我们没有传入文件的话，尝试接收GET参数，有设置GET参数的话，包含一个名为 `5d47c5d8a6299792.php`
的文件，再使用file_exists函数对我们的参数进行处理（我们输入的参数没有经过然后处理）
我们再看看`5d47c5d8a6299792.php`文件，同样也是给出了源码
    checkAccess, 'upload') !== false || strpos($this->checkAccess, 'log') !== false){ 
                echo "error path";
                exit();
            } 
            if ($this->id !== 0 && $this->id !== 1) {
                switch($this->id) {
                    case 0:
                        if ($this->checkAccess) {
                            include($this->checkAccess);
                        }
                        break;
                    case 1:
                        throw new Exception("id invalid in ".__CLASS__.__FUNCTION__);
                        break;
                    default:
                        break;         
                }
            }
        }
    }
    class Content {
        public $formatters;
        public function getFormatter($formatter){
            if (isset($this->formatters[$formatter])) {
                return $this->formatters[$formatter];
            }
            foreach ($this->providers as $provider) {
                if (method_exists($provider, $formatter)) {
                    $this->formatters[$formatter] = array($provider, $formatter);
                    return $this->formatters[$formatter];
                }
            }
            throw new \InvalidArgumentException(sprintf('Unknown formatter "%s"', $formatter));
        }
        public function __call($name, $arguments)
        {
            return call_user_func_array($this->getFormatter($name), $arguments);
        }
    }
    class Show{
        public $source;
        public $str;
        public $reader;
        public function __construct($file='index.php') {
            $this->source = $file;
            echo 'Welcome to '.$this->source."";
        }
        public function __toString() {
            $this->str->reset();
        }
        public function __wakeup() {
            if(preg_match("/gopher|phar|http|file|ftp|dict|\.\./i", $this->source)) {
                throw new Exception('invalid protocol found in '.__CLASS__);
            }
        }
        public function reset() {
            if ($this->reader !== null) {
                $this->reader->close();
            }
        }
    }
    highlight_file(__FILE__);
提示 `flag` 在 `/tmp/flag.php`
，然后给出了一些类，仔细观察，发现了`include($this->checkAccess)`，其中这个`$this->checkAccess`没有经过严格的过滤，如果我们设置为`/tmp/flag.php`
完全是可以的，那么加上有前置知识的储备，这时候就出现了一个大致的思路：
  * 我们可以构造一个 phar 文件，其中的序列化字符串是我们精心构造的，在我们上传之后，使用GET方法传参让 file_exists() 处理`phar://`伪协议！！找到我们上传的文件，触发反序列化，最终实现目标文件的包含
### POP链构造
所以现在的难点在于我们如何构造这个序列化字符串呢？  
有两个下手点
  * 第一是我们构造的序列化字符串会被反序列化，所以会触发`__wakeup() __destruct()`魔法函数，发现没有`__destruct()`，只有 Show 类中有 `__wakeup()`，可以正向思维构造POP链
  * 第二是可以逆向思维，我们的最终目的是触发 Action 中的`include($this->checkAccess)`，所以我们应该想办法运行 Action 中的 `run()`
  * 当前POP链 （`file_exists() 触发 Show::__wakeup() --> ............. --> Action::run()`）
但不管正向思维还是逆向思维，现在都没办法直接找到一条路，所以我们继续看完`5d47c5d8a6299792.php`的源代码，发现了很多有用的信息，有很多POP链中常用的魔法函数，并且类
`Content`有`call_user_func_array()`这样的大杀器
> 也许能使用的魔法函数：`__toString() __wakeup() __call() __invoke()` 以及
> `call_user_func_array()`
所以我们的构造应该使用`call_user_func_array()`为跳板，去运行 Action 中的`run()`
[call_user_func_array()调用类方法](https://www.php.net/manual/zh/function.call-user-func.php)（参考`call_user_func()`可以发现以下）
> 支持这样的调用：`call_user_func_array(array($a,'func'),"a")`其中 `$a` 是一个对象，调用了 a
> 对象的类中的`func()`函数，且参数是`"a"`
知道这一点之后，POP链的最后一条就出来了`call_user_func_array--> Action::run()`
  * 当前POP链 （`file_exists() 触发 Show::__wakeup() --> ............. -->Content::__call(){call_user_func_array} --> Action::run()`）
且因为`call_user_func_array()`是`__call()`魔法函数中的一条，由前置知识的储备可知
> `__call( 当所调用的成员方法不存在（或者没有权限）该类时调用，用于对错误后做一些操作或者提示信息 )`  
>  例如：
>  
>  
>       
>     class test{
>      public $test;
>      public function __call($name,$arguments){
>          echo "你调用的函数不存在";
>          echo "你调用的函数名：";
>          var_dump($name);
>  
>          echo "";
>  
>          echo "你所使用的参数：";
>          var_dump($arguments);