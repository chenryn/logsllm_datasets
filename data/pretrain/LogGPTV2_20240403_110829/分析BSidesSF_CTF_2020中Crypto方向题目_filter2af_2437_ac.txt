    sage: E = EllipticCurve(GF(n), [a,b])
    sage: P = E([7446047202987944211,10385346314533718897])
    sage: s = 7780639736
    sage: R = s*P
    sage: R
    (611642810769681786 : 2794026609502217488 : 1)
提交至服务器即可得到flag：
    R? (enter in form [1234,5678])> [611642810769681786,2794026609502217488]
    Great!
    CTF{babys_first_scalar_multiplication}
## haystack
题目描述：  
This vendor claims they have figured out a way to preserve the integrity and
confidentiality of a message using signing instead of encryption. We only have
a binary pycache file and a message off the wire — can you find the content of
the message?
题目附件：  
[chaffing.pyc](https://github.com/ichunqiu-resources/anquanke/blob/master/009/haystack/chaffing.pyc)  
[message.pcap](https://github.com/ichunqiu-resources/anquanke/blob/master/009/haystack/message.pcap)
题目给了一个pyc文件和一个流量包，我们可以先使用uncompyle6来反编译一下pyc文件：
    uncompyle6 chaffing.pyc > chaffing.py
这段反编译出来的代码在python2/3中关于str和bytes的用法上出现了一些混用，我们将其统一修改为python3的版本，整理后chaffing.py文件的内容如下：
    import hmac
    import hashlib
    import random
    import struct
    CHAFF_SIZE = 32
    SIG_SIZE = 16
    ALL_BYTES = set(c for c in range(256))
    KEY = b'af5f76f605a700ae8c0895c3e6175909'
    def byte(v):
        return bytes([v])
    def sign_byte(val, key):
        return hmac.new(
                key, val, digestmod=hashlib.sha256).digest()[:SIG_SIZE]
    def chaff_byte(val, key):
        msgs = {}
        msgs[val[0]] = sign_byte(val, key)
        while len(msgs) I', len(val)) + outval
    def winnow_msg(val, key):
        if not isinstance(val, bytes):
            val = val.encode('utf-8')
        msglen = struct.unpack('>I', val[:4])[0]
        val = val[4:]
        chunk_len = (SIG_SIZE + 1) * CHAFF_SIZE
        expected_len = chunk_len * msglen
        if len(val) != expected_len:
            raise ValueError(
                    'Expected length %d, saw %d.' % (expected_len, len(val)))
        pieces = []
        for c in range(msglen):
            chunk = val[chunk_len*c:chunk_len*(c+1)]
            res = winnow_byte(chunk, key)
            pieces.append(res)
        return b''.join(pieces)
    def winnow_byte(val, key):
        while val:
            c = byte(val[0])
            sig = val[1:SIG_SIZE+1]
            if sign_byte(c, key) == sig:
                return c
            val = val[SIG_SIZE+1:]
        raise ValueError('No valid sig found!')
    def main():
        inp = b'This is a test message!'
        msg = chaff_msg(inp, KEY)
        ret = winnow_msg(msg, KEY)
        if inp != ret:
            print('Wrong ret: %s' % ret)
    if __name__ == '__main__':
        main()
这里的chaff和winnow函数实际上是指代密码学领域当中的一种技术[Chaffing and
winnowing](https://en.wikipedia.org/wiki/Chaffing_and_winnowing)，其中chaff表示谷壳，winnow表示风选，这里的名字来源于农业中：人们收获谷物并对其进行脱粒后，仍然有一些部分和不可食用的谷壳混合在一起，为了分开并去除这些杂质，人们利用物料与杂质之间悬浮速度的差别，借助风力来除杂，这一过程称为风选，分开后的谷壳部分就可以被丢弃了。这一过程和我们这里的过程很相似：
    1. 假设Alice和Bob两人进行通信，两人协商好使用某一key作为密钥。
    2. 假设Alice想要向Bob发送消息，Alice首先对其想要发送的消息的第一个字节（假设为字节1）使用hmac with sha256（hmac使用协商好的key）计算出一个签名并取该签名的前16个字节作为签名值，记录下{字节1的值:签名值}。
    3. Alice随机生成一个不同于字节1的字节，然后随机生成16个字节作为签名值，记录下{随机字节，随机签名}，重复31次该操作，共得到31个{随机字节，随机签名}。
    4. 将{字节1的值:签名值}和31个{随机字节，随机签名}放在一起并打乱顺序，然后以bytes形式拼接，作为字节1的处理结果。
    5. Alice对想要发送的后续字节（字节2、字节3、...、字节n）依次进行上述处理，然后以bytes形式拼接，作为要发送的消息的处理结果，最后把要发送的消息的长度padding成4个字节，拼接在要发送的消息的处理结果的最前面作为最终结果进行发送。
    6. Bob收到这一结果后，对其中第一组的32个{字节：签名}对，使用协商好的key计算其中每一个字节的签名，哪一个字节计算出的签名值和该字节在{字节：签名}对中对应的签名值相同，则说明Alice发送的第一个字节为该字节，依次类推，直到Bob恢复出所有字节，从而得到Alice想要发送的完整消息。
Alice向Bob发送的内容，我们可以从message.pcap中获取，使用wireshark打开pcap文件，追踪一个TCP流，将其内容dump出来，将其命名为message.dump（该文件见此[链接](https://github.com/ichunqiu-resources/anquanke/blob/master/009/haystack/message.dump)）。
我们现在的问题在于，我们并没有key，因此无法像Bob那样使用key来依次判断出Alice发送的消息是什么。但是这里有其他的漏洞点可以供我们利用，注意到这里在对每个字节计算签名时，没有引入类似计数器一类的概念去参与到签名的运算当中，导致相同字节的签名一直相同，比如以字节’a’为例，第一次计算其签名时，其结果为sig1，第N次计算其签名时，其结果仍为sig1，而本题中`消息的字节数=len(message.dump)//(32*17)=1421`，数量比较大，这就导致我们可以采用统计的方法进行攻击：对于消息的第一个字节的位置的32个{字节：签名}，我们可以在其他位置的若干个{字节：签名}当中，去查找有没有出现过这32个签名当中的某个签名，由于正确的签名是计算出来的而且该字节很有可能在消息中重复出现，而错误的签名是随机生成的，理论上不会再次出现，因此如果我们找到某一个签名在后面再次出现了，一定程度上就可以认为该签名对应的字节就是消息在这一位置的正确的字节。
将上述推导过程写成代码形式如下：
    from Crypto.Util.number import *
    f = open('message.dump', 'rb').read()[4:]
    data = []
    for i in range(0, len(f), 32*17):
        data.append(f[i:i+32*17])
    data2 = [[] for _ in range(len(f)//(32*17))]
    allres = []
    count = 0
    for item in data:
        l = []
        for i in range(0, len(item), 17):
            l.append(item[i:i+17])
        for j in l:
            c = j[0]
            sig = j[1:]
            data2[count].append((c, sig))
            allres.append((c, sig))
        count += 1
    msg = []
    for item in data2:
        for m in item:
            if allres.count(m) > 1:
                msg.append(m)
                break
    print(b''.join([long_to_bytes(item[0]) for item in msg]))
执行代码即可得到消息如下：
    b'This message is encoded using a technique called "Chaffing and Winnowing"[1],na technique that was first published by Ron Rivest in an article published onnthe 18th of March 1998 (1998/03/18).  Unfortunately, my implementation of thentechnique suffers from very significant flaws, not the least of which is thenfailure to include a counter within the the MAC'd portion of the data.  Thisnleads to all valid bytes with the same value having the same MAC, which shouldnallow for a fairly trivial frequency analysis attack on the message.nUltimately, if you're reading this, then you've found *some* way to crack thenencoding applied here.nnChaffing and winnowing also leads to a pretty major blow up in size.  Imaginenif, instead of 31 bytes of chaff per byte of message, I had used the maximumn255.  Imagine that I used a 256-bit MAC instead of 128.  (256 bits: militaryngrade crypto!!@!)nnAt this point, you've been patient enough through my diatribe (which is reallynjust to give you the plaintext you need to launch your attack against the outputnof this encoding).  What you're really here for is the FLAG.  Like most of ournother flags, this is in the typical CTF{} format.nnCTF{thanks_to_rivest_for_all_his_contributions}nn- Matir.n(@Matir, https://systemoverlord.com)nnGreetz to decreasedsales, dissect0r, poptart, ehntoo, illusorycake, andnzerobitsmith.nnn[1]: https://en.wikipedia.org/wiki/Chaffing_and_winnowingn'
在消息中我们找到flag：
    CTF{thanks_to_rivest_for_all_his_contributions}
## mentalist
题目描述：  
Can you read the mind of a computer?  
mentalist-a05ae893.challenges.bsidessf.net:12345
题目只给了一个服务器地址和端口，nc连接上去看一下：
    Welcome Chosen One! I have been waiting for you...
    The legend fortold of one that could read minds.
    If you can read my mind I will reveal my great knowledge.
    What number am I thinking of?
本题要求我们预测服务器端产生的数字，但是我们没有源码，因此并不知道数字的生成规则，随便输入几个数字，发现每次的提示语句不一样，因此我们尝试不断提交来查看一共有多少提示语句：
    What number am I thinking of? 0
    Actually I was thinking of 935066503044, try again
    What number am I thinking of? 0
    No I'm sorry, I was thinking of 30146363867131
    What number am I thinking of? 0
    Hmmm no. My number was 18007953872258, are you sure you're okay?
    What number am I thinking of? 0
    I'm getting worried. I was thinking of 19185121492725; you're not doing so well.
    What number am I thinking of? 0
    I grow tired of your failures. My number was 12023741535832
    What number am I thinking of? 0
    Nope. 20750859143879 Perhaps you aren't the one I was waiting for?
    What number am I thinking of? 0
    WRONG! It was 23824254417666
    What number am I thinking of? 0
    My patience thins... 15032732667493 was my number
    What number am I thinking of? 0
    You're getting on my nerves. It was 3496124413160
    What number am I thinking of? 0
    I'm only going to give you one more chance. I was thinking of 13665285383967
    What number am I thinking of? 0
    I see now that you aren't who I was looking for.
    It's too late now but I was thinking of 24221806267714
    In case you were wondering how I was thinking of these numbers,
    they were for the form x_n+1 = x_n * 2332350940921 + 523873619107 % 30550145125500
    And my initial seed x_0 was 13240382517197
    With this you can verify that I wasn't cheating.
    Good luck in your future endeavors!
经过11次提交，我们发现服务器在最后一次提交后告诉了我们这些数字的生成规则和使用的参数值，可以得知题目使用了LCG伪随机数生成器来生成数字，但是与此同时服务器也切断了连接，下次再nc连接时，LCG生成器使用的参数值都会刷新，因此我们的任务就是通过一些LCG生成的值来恢复出所有参数的值，继而可以直接计算出后续的值，从而实现预测。
假设一个LCG模型为：
    s_(i+1) ≡ s_i * m + c (mod n)
其中s0为种子，我们从服务器端获取的11个数字依次为s1到s11，我们需要恢复出m、c、n的值来计算出后续的值，首先我们来恢复n，考虑如下同余方程：
    s2 ≡ s1 * m + c  (mod n)
    s3 ≡ s2 * m + c  (mod n)
    s4 ≡ s3 * m + c  (mod n)
    s5 ≡ s4 * m + c  (mod n)