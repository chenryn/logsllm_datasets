iot-embedded-os-firmware-tools/ )
Option 1: It’s a UNIX 
system, I know this
If you can get a shell, 
sometimes just beating 
against your target can be fun
Limited to only what is on the 
target (or what you can get to 
the target)
Can feel a bit like going into 
the wild with a bowie knife 
and a jar full of your own piss
Debugger? Fuzzer? Compiler?
What are those?
Option 2: Black-Box it
Lots of fun once you’re 
used to it or live service 
attacks. 
Safe: Never directly 
exposes you to “secrets” 
(IP)
You don’t have the bowie 
knife, just two jars of piss.
These options suck
Option 3: Reverse it
Pull out IDA/Radare
Grab a beer
Learn you a new ISA
The way of reversing IoT 
things that don’t run Linux!
… but how the fuck do you 
get the binaries?
Yeah but I’m fucking 
lazy, asshole.
I don’t want to learn 
IDA. I want to fuzz.
Option 4: Emulate It
You have every tool at your 
disposal
Hot damn is that a 
debugger?
Oh shit waddup it’s fuzzy 
boiii
Once again, how the fuck 
do you get your binary of 
choice?
Getting root(fs)
Easy Mode: Update 
Packages
Updates for devices are the easiest way to extract a root filesystem
Sometimes little more than a filesystem/partition layout that 
gets dd’d right to disk
Android updates are ZIPs containing some executables, a script, 
and some filesystems
Newer android updates (small ones) are very regularly "delta" 
updates: These touch a known filesystem directly, and are very 
small but don't contain a full filesystem.
Sometimes, rarely, they're an *actual executable* that gets run on 
the device
Probably isn't signed
Probably fetched over HTTP
Downside: They’re occasionally very hard to find or are 
incremental, incomplete patches. Sometimes they’re encrypted. 
Medium: In-Vivo 
extraction
You need a shell
Can you hijack an administrative interface? 
Some ping functions can be hijacked into shells
Sometimes it’s literally “telnet to the thing”
Refer to step 0 for more
You need some kind of packer (cpio, tar, etc)
Find is a builtin for most busybox implementations. 
You need some way to put it somewhere (netcat, curl, etc)
You might have an HTTPD to fall back on
Need to do reconnaissance on your device
Might need some creativity
Wireshark, Ettercap, Fiddler, etc
Demo: Router firmware 
extraction (Actiontec 
Router)
What did we get?
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
http://blog.oshpark.com/2017/02/23/retro-cpc-dongle/
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the 
data lines, but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS 
partition tables.
Having some in-vivo information is helpful
Surprise Mode: Direct 
Extraction
Could be as simple as “remove SD card, image it”
eMMC is harder though, since you need to get to the data lines, 
but it can be done!
You will need to understand how the disk is laid out
Binwalk can help later, as can “standard” DOS partition tables.
Having some in-vivo information is helpful
All Else Fails: Solder to the rescue
Might need to desolder some storage, or otherwise physically 
attack the hardware
MTD devices are weird. Prepare to get your hands dirty
Interested in more? HHV and friends are the place to start 
looking.
JTAG, etc. might be the hard way out.
Logic 
Analyzers
Salae makes a good one
Cheap
Basic
Runs over USB
Hardware interfaces
https://www.crowdsupply.com/excamera/spidriver
http://dangerousprototypes.com/docs/Bus_Pirate
Now that we have that, 
what do?
Try mounting it/extracting it/etc. `file` might give you a 
good idea of what it thinks it might be, as will `strings` 
and the like.
eMMCs sometimes have real partition tables
SD cards often do
Look at the reconnaissance you did
Boot logs: lots of good information about partitions
Fstab, /proc/mounts
Let automation do your 
work
Binwalk!
Takes a rough guess at what might be in a place
Makes educated guesses about filesystems
High false positive rate
Photorec might be helpful
Get creative
Losetup and friends are capable of more than you give them 
credit for.
There are a lot of filesystems that are read-only or create-and-
read, like cramfs and such. These are often spotted by binwalk
but are even sometimes seen as lzma or other compressed or 
high-entropy data
If you’re only looking to play in IDA/Radare/etc, the bulk extraction 
from binwalk might help.
QEMU: the 
Quick 
EMUlator
QEMU is a fast processor 
emulator for a variety of 
targets.
Targets you’ve never 
heard of?
Mainframes
ARM, MIPS
PowerPC
OpenRISC
DEC Alpha
Lots of different ports and 
targets have been ported. 
Did 
someone 
say “OSX on 
Amiga 
hardware”?
Or Haiku 
on BeOS?
Two ways to run QEMU
AS A FULL FAT VM
You preserve full control over the 
whole process
You’ve got access to things like gdb at 
a kernel level
Requires zero trust in the safety of the 
binary
But you probably want a special 
kernel and board setup, though there 
are generic setups to get you started
Any tools are going to need to be 
compiled for the target environment
I hate cross-compilers.
AS A TRANSLATING LOADER
You have access to all your existing 
x86-64 tools (or whatever your native 
tools are)
They’re not only native, but they’re 
running full-speed.
You can run AFL like it’s meant to
Runs nicely in containers
You don’t even need a container!
Full-Fat VM: 9 tracks of 
DOS
Binfmt: Linux’ way of 
loading executables
Long ago, Linux added loadable loaders
Originally for the purposes of running JARs from the 
command line like God and Sun Microsystems intended.
Turns out this is a great place to put emulators.
Debian ships with support for this in its binfmt-misc package.
QEMU can be shipped as a “static userspace” environment 
(think WINE)
Uses “magic numbers” – signatures from a database – to 
determine which ones are supposed to load what.
Fairly simple to add new kinds of binaries. You could actually 
execute JPEGs if you really wanted to?
QEMU as loader
WITHOUT A CONTAINER
Dumb simple to set up:
qemu-whatever-static 
With binfmt, just call your binary.
Must trust that the executable 
is not malicious
Might depend on your local 
environment looking like its 
target environment
This works best for static, 
monolithic executables
WITH A CONTAINER
Bring that whole root filesystem 
along!
Run it in the confines of a jail, 
Docker instance, even 
something like Systemd 
containers
Might need root depending on 
your container (systemd)
Great for when your binary 
loads its own special versions of 
libraries that have weird things 
added to them
QEMU user Demo
AFL setup
Oh boy. Let’s talk about AFL. 
AFL needs to compiled with QEMU support
Magic sauce: CPU_TARGET=whatever 
./build_qemu_support.sh
AFL needs to bring along the host’s libraries
Easiest bound with systemd-nspawn
Don’t do this in a VM
It hurts
AFL Demo
Wrapping up
What did we learn today?
Hardware vendors are lazy
Attacking hardware means getting creative
QEMU is pretty neato
AFL runs really slow when you’re emulating an X86
emulating an IBM mainframe.
Going forward:
I hope I’ve given you some idea of the landscape of 
tools
Always remember rule 0
More Resources
Non-Linux  targets:
RECON 2010 with Igor Skochinsky: Reverse Engineering for 
PC Reversers: 
http://hexblog.com/files/recon%202010%20Skochinsky.pdf
JTAG Explained: https://blog.senr.io/blog/jtag-explained
https://www.blackhat.com/presentations/bh-europe-
04/bh-eu-04-dehaas/bh-eu-04-dehaas.pdf
https://beckus.github.io/qemu_stm32/ (among others)
Linux targets:
eLinux.org – Fucking Gigantic wiki about embedded Linux. 
linux-mips.org – Linux on MIPS 
Thank you
Keep on hacking.