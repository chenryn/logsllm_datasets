::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`forward`{.literal} 方向类似于
`Requires:`{.literal}。`backward`{.literal}
在之前的依赖项系统中没有类似。
:::
::: table
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867786802416}
**表 5.1. 可能将 Weak 依赖关系与方向相结合**
::: table-contents
  强度/方向   向前     向后
  ----------- -------- --------
  弱          建议：   补充：
  提示        建议：   增强：
:::
:::
`Weak dependencies`{.literal} 策略的主要优点是：
::: itemizedlist
-   它允许较小的最小安装，同时保持默认安装功能丰富。
-   软件包可以指定特定提供商的首选项，同时保持虚拟提供的灵活性。
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#weak-dependencies-feature}弱依赖项 {.title}
:::
默认情况下，`Weak dependencies`{.literal} 与常规 `Requires:`{.literal}
类似。[**[YUM]{.application}**]{.strong}
事务中包含匹配的软件包。[**[如果添加软件包会导致错误，YUM]{.application}**]{.strong}
默认忽略依赖项。因此，用户可以排除 `Weak dependencies`{.literal}
添加的软件包，或稍后将其删除。
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#conditions_of_use}使用条件
只有在软件包在没有依赖项的情况下才可以使用
`Weak dependencies`{.literal}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
可以在不添加任何弱要求的情况下创建功能受限的软件包。
:::
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#use_cases}使用案例
`Weak dependencies`{.literal}
尤其是在合理用例能够最大程度减少安装时使用，如构建单一用途且不需要软件包完整功能集的虚拟机或容器。
`Weak dependencies`{.literal} 的典型用例有：
::: itemizedlist
-   Documentation
    ::: itemizedlist
    -   文档查看器如果缺少它们会被安全处理
    :::
-   示例
-   插件或附加组件
    ::: itemizedlist
    -   支持文件格式
    -   支持协议
    :::
:::
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#hints-feature}提示 {.title}
:::
`Hints`{.literal} [**[YUM]{.application}**]{.strong} 默认忽略。GUI
工具可使用它们来提供默认情况下不安装的附加包，但与已安装的包组合非常有用。
不要将 `Hints`{.literal} 用于软件包的主要用例的要求。相反，在强或
`Weak dependencies`{.literal} 中包含这样的要求。
##### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#package_preference}软件包首选项
[**[如果选择了]{.application}多个同样有效的软件包**]{.strong}，YUM 使用
`Weak dependencies`{.literal} 和 `Hints`{.literal}
来决定使用哪些软件包。首选由已安装或安装的软件包的依赖关系指向的软件包。
请注意，这个功能不会影响到依赖项解析的正常规则。例如：
`Weak dependencies`{.literal} 无法强制选择软件包的旧版本。
如果依赖关系有多个供应商，需要的软件包可以添加 `Suggests:`{.literal}
来向依赖项解析器提供提示信息，了解首选哪个选项。
`Enhances:`{.literal}
仅在主软件包和其他供应商同意在所需软件包中添加提示是出于某种原因而使用。
::: example
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867807244896}
**例 5.1. 使用提示来首选一个软件包**
::: example-contents
``` literallayout
Package A: Requires: mysql
Package mariadb: Provides: mysql
Package community-mysql: Provides: mysql
```
如果要首选 `mariadb`{.literal} 软件包而不是 `community-mysql`{.literal}
软件包，请使用：
``` literallayout
Suggests: mariadb to Package A.
```
:::
:::
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#forward-backward-dependencies-feature}正向和反向依赖项 {.title}
:::
`Forward dependencies`{.literal} 与 `Requires`{.literal}
类似，为正在安装的软件包评估。同时也安装了最佳匹配的软件包。
通常，首选使用
`Forward dependencies`{.literal}。在获取系统中添加的其他软件包时，将依赖项添加到
软件包。
对于
`Backward dependencies`{.literal}，如果安装了匹配的软件包，则会安装包含依赖项的软件包。
`Backward dependencies`{.literal}
主要为第三方供应商设计，他们可以将其插件、附加组件或扩展附加到分发包或其他第三方包。
:::
:::
:::
::: section
::: titlepage
# []{#new-features-in-rhel-8_packaging-and-distributing-software.html#support-for-boolean-dependencies_new-features-in-rhel-8}支持布尔值依赖项 {.title}
:::
从版本 4.13 开始,RPM 可以在以下依赖关系中处理布尔表达式：
::: itemizedlist
-   `Requires`{.literal}
-   `Recommends`{.literal}
-   `Suggests`{.literal}
-   `Supplements`{.literal}
-   `Enhances`{.literal}
-   `Conflicts`{.literal}
:::
[这部分论述了布尔值依赖关系语法 ，提供布尔值运算符的列表
，并解释布尔值依赖项嵌套以及
布尔值依赖关系语义](#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-dependencies-syntax "布尔值依赖项语法"){.link}。
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-dependencies-syntax}布尔值依赖项语法 {.title}
:::
布尔值表达式始终包含在括号中。
它们构建出普通的依赖软件包：
::: itemizedlist
-   仅名称或名称
-   比较
-   版本描述
:::
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-operators}布尔值运算符 {.title}
:::
RPM 4.13 引入了以下布尔值 Operator：
::: table
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867791744880}
**表 5.2. RPM 4.13 引入的布尔值 Operator**
::: table-contents
  布尔值 operator       描述                                                                                       示例使用
  --------------------- ------------------------------------------------------------------------------------------ --------------------------------------------------------------
  `and`{.literal}       需要实现所有运算对象，以便术语变为 true。                                                  冲突：（pkgA 和 pkgB）
  `or`{.literal}        需要完成其中一个运算对象，以便术语变为 true。                                              requires:（pkgA \>= 3.2 或 pkgB）
  `if`{.literal}        如果第二个运算对象是.（反含义），则要求完成第一个运算对象。                                建议：（如果 langsupportCZ，则为myPkg-langCZ）
  `if else`{.literal}   与 `if`{.literal} 运算符相同，加号如果第二个操作对象没有完成，则需要完成第三个运算对象。   Requires：myPkg-backend-mariaDB 如果其他 sqlite 则为 mariaDB
:::
:::
RPM 4.14 引入了以下附加布尔值 Operator：
::: table
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867729464112}
**表 5.3. RPM 4.14 引入的布尔值 Operator**
::: table-contents
  布尔值 operator           描述                                                                 示例使用
  ------------------------- -------------------------------------------------------------------- -----------------------------------------------------------------
  `with`{.literal}          要求所有运算对象通过同一个软件包来实现，以便术语变为 true。          Requires：(pkgA-foo with pkgA-bar)
  `without`{.literal}       需要满足第一个运算对象但不满足第二个操作对象的单个包（设置减法）     Requires：（pkgA-foo 没有 pkgA-bar）
  `unless`{.literal}        如果第二个运算对象不是（反向负含义），则要求完成第一个运算对象。     冲突：（myPkg-driverA，除非 driverB）
  `unless else`{.literal}   与 `unless`{.literal} 运算符相同，加号如果第二个操作对象需要完成。   冲突：（myPkg-backend-SDL1，除非 myPkg-backend-SDL2 else SDL2）
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`if`{.literal} 运算符不能与 `or`{.literal}
运算符在同一上下文中使用，`unless`{.literal} 运算符不能与
`and`{.literal} 在同一上下文中使用。
:::
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-dependencies-nesting}嵌套 {.title}
:::
操作对象自身可用作布尔值表达式，如下例中所示。
请注意，在这种情况下，操作对象也需要用括号括起。您可以把 `and`{.literal}
和 `or`{.literal}
运算符串联在一起重复相同的运算符，而只有一组周围的括号。
::: example
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867799025584}
**例 5.2. 应用为布尔值表达式的操作对象示例**
::: example-contents
``` literallayout
Requires: (pkgA or pkgB or pkgC)
```
``` literallayout
Requires: (pkgA or (pkgB and pkgC))
```
``` literallayout
Supplements: (foo and (lang-support-cz or lang-support-all))
```
``` literallayout
Requires: (pkgA with capB) or (pkgB without capA)
```
``` literallayout
Supplements: ((driverA and driverA-tools) unless driverB)
```
``` literallayout
Recommends: myPkg-langCZ and (font1-langCZ or font2-langCZ) if langsupportCZ
```
:::
:::
:::
::: section
::: titlepage
## []{#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-dependencies-semantics}语义 {.title}
:::
使用 `Boolean dependencies`{.literal} 不会更改常规依赖项的语义。
如果使用
`Boolean dependencies`{.literal}，检查是否匹配所有名称，然后通过布尔值
Operator 聚合匹配项的布尔值。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
对于除 `Conflicts:`{.literal} 以外的所有依赖项，结果必须是
`True`{.literal} 不阻止安装。对于 `Conflicts:`{.literal}，结果必须是
`False`{.literal} 不阻止安装。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
`Provides`{.literal} 不是依赖项，不能包含布尔值表达式。
:::
::: section
::: titlepage
### []{#new-features-in-rhel-8_packaging-and-distributing-software.html#boolean-dependencies-cautionary-tale-about-if}了解 if 运算符的输出 {.title}
:::
`if`{.literal}
运算符还返回一个布尔值，它通常与直观理解接近。但是，以下示例表明，在某些情况下直观理解
`if`{.literal} 可能会产生误导。
::: example
[]{#new-features-in-rhel-8_packaging-and-distributing-software.html#idm139867784397200}
**例 5.3. 如果 Operator 错误地输出**
::: example-contents
如果没有安装 pkgB，此陈述为 true。但是，如果默认结果为 false
时使用这个语句，则情况会变得复杂：
``` literallayout
Requires: (pkgA if pkgB)
```
除非安装了 pkgB，且 pkgA 不安装，否则此语句冲突：
``` literallayout
Conflicts: (pkgA if pkgB)
```
因此，您可能想要使用：
``` literallayout
Conflicts: (pkgA and pkgB)
```
如果 `if`{.literal} 操作器嵌套在 `or`{.literal} 术语中，情况也是如此：
``` literallayout
Requires: ((pkgA if pkgB) or pkgC or pkg)
```
这也使整个术语都为 true，如果未安装 pkgB，则 `if`{.literal} 术语为
true。如果 pkgA 仅在安装 pkgB 时有帮助，请使用 `and`{.literal} ：
``` literallayout
Requires: ((pkgA and pkgB) or pkgC or pkg)
```