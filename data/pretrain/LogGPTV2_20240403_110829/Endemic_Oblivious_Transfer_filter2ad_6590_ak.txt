interactive DDH assumption.
D.2 Optimized, Interactive DDH based Instantiation
In Figure 14, we show an optimized variant of our OT. It reduces the communication cost from
the sender to the receiver by sending only a single group element. This is possible since it does not
depend on any of the n elements sent by the receiver. A drawback of this construction is that we
do not know how to prove its security under the standard DDH assumption.
The reason is simple, in our security proof during the simulation, A(cid:48) needs compute the key(cid:74)ab(cid:75)
while at the same time given(cid:74)1(cid:75),(cid:74)a(cid:48)(cid:75),(cid:74)b(cid:75), (cid:74)ab(cid:48)(cid:75) needs to be hard to distinguish from a uniformly
random group element. Since a is picked by the adversary A and only transmits (cid:74)a(cid:75), we do not
know how to simulate correctly. The next deﬁnition formally states the assumption under which
the protocol in Figure 14 can be proven to be secure.
Deﬁnition D.5 (Interactive Decisional Diﬃe-Hellman (IDDH) Assumption). For a group G, the
interactive decisional Diﬃe-Hellman assumption is hard if for any ppt distinguisher D1, D2,
| Pr[D2(st,(cid:74)1(cid:75),(cid:74)a(cid:75),(cid:74)xb(cid:75),(cid:74)ab(cid:75)) = 1]
− Pr[D2(st,(cid:74)1(cid:75),(cid:74)a(cid:75),(cid:74)xb(cid:75),(cid:74)c(cid:75)) = 1]| = negl,
where a ← Zp, b ← Zp and c ← Zp and (st,(cid:74)x(cid:75)) ← D1((cid:74)b(cid:75)).
D.3 Instantiation based on Crystals-Kyber
A:
(sk, mA) ← Kyber.KeyGen()
mA
mB
B:
kB ← B32
mB = Kyber.Enc(pk, kB)
kA = Kyber.Dec(sk, mB)
kB
Figure 15: The ﬁgure shows a Kyber based key agreement protocol between parties A and B.
Deﬁnition D.6 (Crystals-Kyber CPAPKE). Crystals-Kyber CPAPKE is a correct and CPA
secure public key encryption based on the Module LWE (MLWE) assumption. We follow the speciﬁ-
cations of Kyber, in which B denotes the set {0, 1, . . . , 255}. Kyber is parameterized by parameters
dt = 11, nLWE = 256, kLWE ∈ {2, 3, 4}, q = 7681 and ring Rq = Zq[X]/(X nLWE + 1).
(Kyber.KeyGen, Kyber.Enc, Kyber.Dec) have the following syntax.
Kyber.KeyGen: Outputs a secret and public key pair pk, sk, where pk = (˜t, ρ) ∈ B kLWEnLWEdt
8
× B32.
40
Kyber.Enc: Takes as input a public key pk, a message m ∈ B32 and random coins t ∈ B32.
It
outputs a ciphertext c.
Kyber.Dec: Takes as input secret key sk and a ciphertext c. It outputs a message m.
Further, Crystals-Kyber speciﬁes the following algorithms.
Decode(cid:96): Takes a an element in B32(cid:96) and maps it to Rq. The inverse operation is Encode(cid:96).
Compressq(∗, d): Takes a an element in Rq and maps it to a polynomial with coeﬃcients in Z
2d.
The inverse is Decompressq(∗, d).
Parse: Takes a uniform byte stream in B∗ and maps it to a uniform element in Rq.
q
It is important to know, that ˜t := Encodedt(Compressq(t, dt), where t is computationally indis-
tinguishable from a uniform element in RkLWE
based on the MLWE assumption. In the following,
we will choose dt = 13 such that q < 2dt and no compression takes place. This will help us to avoid
complications and does not decrease eﬃciency besides a slightly larger public key pk. Further, we
will keep component ρ of pk consistent between all pk used in a single 1 out of n OT.
In order to instantiate our framework, we need to deﬁne a group operation pk ⊕ pk and a hash
functions that maps to a uniform ˜t component of pk, i.e. a uniform element in RkLWE
. For the
latter, we use a hash function that produces an output bit stream, which is in B∗, and use kLWE
diﬀerent parts of the stream and apply Parse to the kLWE streams to obtain a (pseudo) uniform
element in RkLWE
We deﬁne the group operation pk1⊕pk2, by mapping pk1 = (˜t1, ρ), pk2 = (˜t2, ρ) to pk3 = (˜t3, ρ),
. (cid:9) is deﬁned
where ˜t3 = Encode13(Decode13(˜t1) + Decode13(˜t2)) and + is the addition in RkLWE
correspondingly.
whenever the bit streams are (pseudo) uniform.
q
q
q
By using Theorem 4.1, Lemma A.7 and Lemma A.8, we get the following corollary.
Corollary D.7. When instantiating an 1 out of n OT in Figure D.3 with Crystals-Kyber, then
in the programmable random oracle model the resulting endemic OT is secure against a malicious
sender except advantage (n−1)MLWE +negl and secure against malicious receivers except advantage
QMLWE +negl and a runing time loss Q, where the MLWE assumption holds except advantage MLWE
and Q is a bound on the amount of adversarial random oracle queries.
In this work, we will instantiate Kyber with k = 3 which is claimed to have a qbit security level
of 161 bit. This security level does not immediately carry over to our Kyber based OT, there is
an additional security loss of Q2. Though we are unaware of an attack that is signiﬁcantly more
eﬃcient on our Kyber based OT than the attacks on Kyber.
E UC Security against Malicious Receivers
In Theorem 4.1 in Section 4, we only show stand-alone security. While UC security for a malicious
sender is already covered by Claim C.2, Claim C.3 uses an adversary A’ that rewinds A and hence
does not accomplish UC security. Here, we proof UC security against a malicious receiver for two
settings. First, in case of a two-round OT from any uniform two-round key agreement. Second, in
case of a one-round OT based on the Diﬃe Hellman key agreement under a variant of DDH.
41
E.1 UC Security of the Two-Round OT
Claim E.1. Given a δ correct, Q-multi-instance u-uniform, (Q, n−1)-multi-instance k-key indis-
tinguishable two-round UKA scheme, where Q upper bounds the amount of random oracle queries
by an adversary. Then the proposed two-round OT is UC-secure against malicious receivers, i.e.
in the programmable random oracle model for any ppt adversary A, there exists a ppt adversary A’
such that for any ppt distinguisher D and any polynomial size auxiliary input z,
| Pr[D(z, (S,A)Π) = 1] − Pr[D(z, (F E
OT,A(cid:48))) = 1]| ≤ 2Qu + Qk + (1 − δ),
where all algorithms receive input 1κ.
Proof. We follow the same line of arguement as in Claim C.3 with the exception that we now use
a hybrid argument rather than guessing the correct random oracle query.
A malicious receiver will make random oracle queries and each query will correspond to a
potential choice for (ri)i∈[n]. For each potential choice of (ri)i∈[n] there will be corresponding OT
strings, i.e. keys computed by the key agreement.
During the ﬁrst hybrid, we replace the corresponding keys of the ﬁrst random oracle query with
uniform. Through a sequence of hybrids, we will do this for every query until all the keys are
replaced with uniform. Notice that in each hybrid, D will only get to see the key that corresponds
to the malicious receivers choice of (ri)i∈[n] and not for all potential choices of (ri)i∈[n].
We start by giving a description of A’. For each random oracle query q to Hi for an i ∈ [n], A’
responds with a random group element Hi(q) ← G. When A sends (ri)i∈[n], A’ looks up the ﬁrst
oracle query of the form q = (r1, . . . , ri∗−1, ri∗+1, . . . , rn) for an i∗ ∈ [n]. A’ sends i∗ to F E
OT. A’
computes for all i ∈ [n] mA,i := ri ⊕ Hi((r(cid:96))(cid:96)(cid:54)=i), tB,i ← {0, 1}∗ and mB,i ← B(tB,i, mA,i). It also
OT, (mB,i)i∈[n] to A and outputs the output
computes sB,i∗ := Key(tB,i∗, mA,i∗). A’ sends sB,i∗ to F E
of A. This concludes the description of A’. We emphasize that here, the other OT strings (sB,i)i(cid:54)=i∗
will not be the output of Key(tB,i, mA,i) but sampled uniformly by F E
OT.
We now deﬁne a sequence of hybrids. The ﬁrst hybrid is hyb1 and corresponds the interac-
tion of A with the sender of the protocol description. The last hybrid, hyb3Q+1, corresponds to
simulator A(cid:48). Let us deﬁne the critical query with index j∗ ∈ [Q] as the ﬁrst query of the form
Hd(r1, . . . , rd−1, rd+1, . . . , rn) where A sends (ri)i∈[n]. For k ∈ [Q + 1], we deﬁne:
hyb3k−2: In this hybrid the simulator A(cid:48) does not program the random oracle and outputs uniform
OT messages as the ideal functionality would if j∗ < k. In more detail, A(cid:48) does the following:
When A makes an oracle query qj respond normally with a random group element Hi(qj) ← G.
When A sends (ri)i∈[n], look up the the critical query of the form qj∗ = (r1, . . . , rd−1, rd+1, . . . , rn)
to Hd for a d ∈ [n]. Let j∗ be the query index. Compute for all i ∈ [n], mA,i := ri⊕Hi((r(cid:96))(cid:96)(cid:54)=i),
tB,i ← {0, 1}∗ and mB,i ← B(tB,i, mA,i). Further, compute sB,i := Key(tB,i, mA,i).
If j∗ < k, sample for all i (cid:54)= d, si uniformly. Otherwise, for all i (cid:54)= d, si := sB,i. Deﬁne
SB := (s1, . . . , sd−1, sB,d, sd+1, . . . , sn). Send (mB,i)i∈[n] to A and output SB together with the
output of A.
hyb3k−1: In this hybrid A(cid:48) programs the oracle to prepare a switch to uniform keys when j∗ = k.
In particular, the hybrid is:
When A makes an oracle query qj respond normally with a random group element Hi(qj) ← G
except for the following queries. Let us deﬁne i∗, (g∗
n) := qk s.t. the
k’th oracle query A makes is Hi∗(qk). For all following random oracle queries Hi(qj) and
i | g ∈ G}, sample random tape tj ← {0, 1}∗
i (cid:54)= i∗ s.t. qj ∈ {(g∗
i∗+1, . . . , g∗
1, . . . , g∗
i∗−1, g∗
1, . . . , g∗
i∗−1, g, g∗
i∗+1, . . . , g∗
n)\ g∗
42
n) \ g∗
i∗−1, g, g∗
i∗+1, . . . , g∗
i as the ordered sequence with the element g∗
and compute mj ← A(tj). Respond abnormally with Hi(qj) := mj (cid:9) g∗
(g∗
1, . . . , g∗
When A sends (ri)i∈[n], look up the the critical query of the form qj∗ = (r1, . . . , rd−1, rd+1, . . . , rn)
to Hd for a d ∈ [n]. Let j∗ be the query index. Compute for all i ∈ [n], mA,i := ri⊕Hi((r(cid:96))(cid:96)(cid:54)=i),
tB,i ← {0, 1}∗ and mB,i ← B(tB,i, mA,i). Further, compute sB,i := Key(tB,i, mA,i).
If j∗ < k, sample for all i (cid:54)= d, si uniformly. Otherwise, for all i (cid:54)= d, si := sB,i. Deﬁne
SB := (s1, . . . , sd−1, sB,d, sd+1, . . . , sn). Send (mB,i)i∈[n] to A and output SB together with the
output of A.
i . Here we deﬁne
i removed.
hyb3k: In this hybrid A(cid:48) replaces the true key exchange keys for query k with the uniform challenges.
i∗−1, g∗
1, . . . , g∗
i∗+1, . . . , g∗
1, . . . , g∗
i∗+1, . . . , g∗
This change is only observable if j∗ = k. In particular, the hybrid is:
When A makes an oracle query qj respond normally with a random group element Hi(qj) ← G
except for the following queries. Let us deﬁne i∗, (g∗
n) := qk s.t. the
k’th oracle query A makes is Hi∗(qk). For all following random oracle queries Hi(qj) and
i (cid:54)= i∗ s.t. qj ∈ {(g∗
i | g ∈ G}, sample random tape tj ← {0, 1}∗
and compute mj ← A(tj). Respond abnormally with Hi(qj) := mj (cid:9) g∗
i . Here we deﬁne
i∗−1, g, g∗
1, . . . , g∗
(g∗
When A sends (ri)i∈[n], look up the the critical query of the form qj∗ = (r1, . . . , rd−1, rd+1, . . . , rn)
to Hd for a d ∈ [n]. Let j∗ be the query index. Compute for all i ∈ [n], mA,i := ri⊕Hi((r(cid:96))(cid:96)(cid:54)=i),
tB,i ← {0, 1}∗ and mB,i ← B(tB,i, mA,i). Further, compute sB,i := Key(tB,i, mA,i).
If j∗ ≤ k, sample for all i (cid:54)= d, si uniformly. Otherwise, for all i (cid:54)= d, si := sB,i. Deﬁne
SB := (s1, . . . , sd−1, sB,d, sd+1, . . . , sn). Send (mB,i)i∈[n] to A and output SB together with the
output of A.
i∗+1, . . . , g∗
i as the ordered sequence with the element g∗
i∗−1, g, g∗
n) \ g∗
i removed.
n)\ g∗
Claim E.2. For any k ∈ [Q + 1], let there be a distinguisher D and a polynomial size auxiliary
input z with
D := | Pr[D(z, hyb3k−2) = 1] − Pr[D(z, hyb3k−1) = 1]|.
Then, there is a distinguisher Du breaking the Q-multi-instance uniformity of the UKA protocol.
Proof. Du gets access to an oracle O which either outputs uniform messages, i.e. Ou or messages
of the form mA ← A(tA) for tA ← {0, 1}∗. Du invokes D and creates its input as follows. It invokes
A and interacts with him as hyb3k−1 does with the diﬀerence that mj are requested from O rather
than computing them. After receiving the output, Du uses it as input for D together with (sB,i)i∈[n],
where sB,i ← Key(tB,i, mA,i). Du outputs the output of D.
If O is oracle Ou, all mj are uniform and hence all random oracle queries q are answered with
a uniformly random Hi(q) ∈ G. Otherwise, A’ is identical with S as well as (sB,i)i∈[n] are identical
with the output of S. Hence
u = | Pr[DOA
= | Pr[D(z, ((sB,i)i∈[n],A)
u (z)] = 1] − P r[DOu
u (z) = 1]|
OA
) = 1]
D
) = 1]|
− Pr[D(z, ((sB,i)i∈[n],A)D
Ou
u
u
≥ D.
43
Claim E.3. For any k ∈ [Q + 1], let there be a distinguisher D and a polynomial size auxiliary
input z with
D := | Pr[D(z, hyb3k−1) = 1] − Pr[D(z, hyb3k) = 1]|.
Then there is a distinguisher Dk that breaks the (Q, n − 1)-multi-instance key-indistinguishability
of the UKA protocol.
Proof. Dk has access to oracles O(cid:104)A,B(cid:105) and O which is either Ou or Ok. Dk invokes D and creates
its input as follows. Dk invokes A and interacts with it as hyb3k+2 does with the diﬀerence, that
Dk generates mj by querying a transcript (cid:104)A, B(cid:105) = (m(cid:48)
A,j.
If (ri)i∈[n] corresponds to a query j (cid:54)= k, then hyb3k−1 and hyb3k are equivalent. Follow the
description of hyb3k−1 and ignore oracle O, since the keys for the challenge transcripts are not
needed.
B,j) from O(cid:104)A,B(cid:105) and setting mj = m(cid:48)
A,j, m(cid:48)
If (ri)i∈[n] corresponds to query k, compute for all i ∈ [n] \ {i∗}
mA,i := ri ⊕ Hi((r(cid:96))(cid:96)(cid:54)=i) = m(cid:48)
A,j
where there exists a j ∈ [Q] such that the last equality holds. It also uses oracle O to query for
all i ∈ [n] \ {i∗} the n − 1 corresponding keys ki that match with the transcripts containing mA,i.
B,j and sB,i := ki. It creates mB,i∗ and sB,i∗ as usual. It sends (mB,i)i∈[n] to A to
Dk sets mB,i := m(cid:48)
receive its output which it uses together with (sB,i)i∈[n] as input for D. Dk outputs D’s output.
k = | Pr[D
Ok
k (z)] = 1] − P r[DOu
k (z) = 1]|
Ok
D
k
) = 1]|
= | Pr[D(z, ((sB,i)i∈[n],A)
−P r[D(z, (SB,i∗,A)D
Ou
k
) = 1]