title:Check It Again: Detecting Lacking-Recheck Bugs in OS Kernels
author:Wenwen Wang and
Kangjie Lu and
Pen-Chung Yew
Check It Again: Detecting Lacking-Recheck Bugs in OS Kernels
Wenwen Wang, Kangjie Lu, and Pen-Chung Yew
University of Minnesota, Twin Cities
ABSTRACT
Operating system kernels carry a large number of security checks
to validate security-sensitive variables and operations. For example,
a security check should be embedded in a code to ensure that a
user-supplied pointer does not point to the kernel space. Using
security-checked variables is typically safe. However, in reality,
security-checked variables are often subject to modification after
the check. If a recheck is lacking after a modification, security
issues may arise, e.g., adversaries can control the checked variable
to launch critical attacks such as out-of-bound memory access or
privilege escalation. We call such cases lacking-recheck (LRC) bugs,
a subclass of TOCTTOU bugs, which have not been explored yet.
In this paper, we present the first in-depth study of LRC bugs
and develop LRSan, a static analysis system that systematically
detects LRC bugs in OS kernels. Using an inter-procedural analysis
and multiple new techniques, LRSan first automatically identifies
security checks, critical variables, and uses of the checked variables,
and then reasons about whether a modification is present after
a security check. A case in which a modification is present but
a recheck is lacking is an LRC bug. We apply LRSan to the latest
Linux kernel and evaluate the effectiveness of LRSan. LRSan reports
thousands of potential LRC cases, and we have confirmed 19 new
LRC bugs. We also discuss patching strategies of LRC bugs based
on our study and bug-fixing experience.
CCS CONCEPTS
• Security and privacy → Operating systems security;
KEYWORDS
OS Kernel Bug; Missing Check; Lacking-Recheck; Error Code; TOCT-
TOU; Static Analysis
ACM Reference Format:
Wenwen Wang, Kangjie Lu, and Pen-Chung Yew. 2018. Check It Again:
Detecting Lacking-Recheck Bugs in OS Kernels. In 2018 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’18), October
15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3243734.3243844
1 INTRODUCTION
Operating system (OS) kernels, as the core of computer systems,
play a critical role in managing hardware and system resources.
They also provide services in the form of system calls to user-space
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243844
code. In order to safely manage resources and to stop attacks from
the user space, OS kernels carry a large number of security checks
that validate key variables and operations. For instance, when the
Linux kernel fetches a data pointer, ptr, from the user space for
a memory write, it uses access_ok(VERIFY_WRITE, ptr, size) to
check if both ptr and ptr+size point to the user space. If the check
fails, OS kernels typically return an error code and stop executing
the current function. Such a check is critical because it ensures that
a memory write from the user space will not overwrite kernel data.
Common security checks in OS kernels include permission checks,
bound checks, return-value checks, NULL-pointer checks, etc.
A security-checked variable should not be modified before being
used. Otherwise, the security check is rendered ineffective. How-
ever, in practice, due to the existence of unusual execution flows
and implicit modification, a checked variable may be further modi-
fied unintentionally because of developers’ ignorance of such an
occurrence. If a recheck is not enforced after the modification, po-
tential violation against the security check may occur, leading to
critical security issues such as out-of-bound memory access and
privilege escalation. We define such a case as an LRC bug—a vari-
able is modified after being security checked, but it lacks a recheck
after the modification. In other words, an LRC bug exists when two
conditions are satisfied: (1) the execution has a sequence of three
operations—security checking a variable, modifying the variable,
and using the variable; (2) a recheck does not exist between the
modification and a use of the variable.
LRC bugs can be considered a subclass of time-of-check-to-time-
of-use (TOCTTOU) bugs because both of them refer to the ab-
stract concept of modification after check but before use. How-
ever, LRC bugs differ from traditional bugs such as missing-check
bugs [35, 47], double-fetch bugs [16, 33, 41, 46], and atomicity-
violation bugs [14, 15, 20, 27, 42]. Inherently, LRC bugs are different
from missing-check bugs [35, 47]. A check is completely absent in
a missing-check bug, which by definition will not be identified as
an LRC bug. For LRC bugs, checks are not “missing” at all. Existing
missing-check detection [35, 47] does not warn against modifica-
tions to checked variables—so long as at least a check has been
performed. We also differentiate LRC bugs from double-fetch bugs.
Double fetching is a common programming practice for perfor-
mance reason. It is not a bug by itself if recheck is enforced after
the second copy. By contrast, LRC bugs are actual check-bypassing
bugs that violate security checks. Moreover, LRC bugs target general
critical data, not just the one from the user space. To compare with
atomicity-violation bugs that exist in only concurrent programs, an
LRC bug can exist in a single-threaded program—a thread itself may
modify a security-checked variable. We will discuss in detail about
the characteristics of LRC bugs by comparing them to traditional
bugs in §8.
We find that LRC bugs are common in OS kernels for several
reasons. First, execution paths from a security check of a variable to
a use of this variable can be fairly long and complicated, especially
when involving multiple variables in both user and kernel spaces.
It is extremely difficult, if not impossible, for kernel developers
to reason about all possible execution flows on these paths, espe-
cially when multiple threads are involved. Therefore, the checked
variables could be modified unintentionally when developers are
not aware of such modifications. Second, harmful modifications to
checked variables can occur in several common scenarios. (1) Ker-
nel race: As the central resource manager, an OS kernel maintains
many shared data structures (e.g., global variables and heap objects)
for threads and processes. It is hard to ensure that various threads
will never modify checked variables of those shared data structures
and objects. (2) User race: Fetching data incrementally with multi-
ple batches is common for performance reason. The security check
is often performed only on the first batch, but ignored in the later
batches. In practice, malicious user-space code can race to control
the data in the later batches. This case shares a similar scenario
to that of double-fetch bugs [41, 46]. (3) Logic errors: The thread
itself may also incorrectly modify a security-checked variable due
to logic errors. Such logic errors may be latent if the execution path
can only be triggered with special inputs. (4) Semantic errors: Se-
mantic errors such as type casting and integer overflow can violate
a security-checked variable as well.
LRC bugs can cause critical security issues because the security
checks are no longer respected. Depending on the purposes of
the security checks, the security impact of LRC bugs varies. For
example, if the security check is for a privilege validation, an LRC
bug may succumb to a privilege escalation attack. Other common
security impacts include out-of-bound memory access, arbitrary
kernel memory read/write, information leaks, denial of service, etc.
Therefore, it is important to detect and patch LRC bugs.
However, detecting LRC bugs in OS kernels is challenging. First,
in order to detect a class of bugs, we need a clear specification of
the bug patterns. LRC bugs usually result from logic errors. Unlike
other bugs such as those caused by memory errors [1, 18, 37, 45],
which have simple and clear patterns, LRC bugs can be complicated,
and involve multiple operations (i.e., security checking a variable,
modifying the security-checked variable, and using the modified
variable). We need to first define and model LRC bugs so that we
can automatically detect them. Second, identifying each operation
constituting an LRC bug is challenging because of the lack of rules.
For example, there is no general and clear rule to decide if a check
is security critical or not. Third, LRC bugs typically span multiple
functions. A more precise inter-procedural analysis is required. Last
but not least, OS kernels are quite complex. For example, the Linux
kernel has more than 22 millions lines of code and is filled with
indirect calls and hand-written assemblies. The detection must not
only be efficient enough to scale to millions lines of code, but also
be capable of handling various challenges and corner cases.
In this paper, we first formally define LRC bugs and perform
the first in-depth study of LRC bugs in the Linux kernel. We then
present LRSan (Lacking-Recheck Sanitizer), an inter-procedural
static analysis system for detecting LRC bugs in OS kernels. LRSan
first automatically identifies security checks using a novel approach.
This approach is based on an observation that if a security check
fails, OS kernels will typically return an error code, or otherwise
continue the execution. We thus define a security check as a check
statement (e.g., if statement) that is followed by two branches, and
one branch will always result in issuing of an error code while the
other must have a possibility of not resulting in issuing of an error
code. This way, LRSan is able to automatically infer security checks.
LRSan then identifies the checked variable(s) as critical variables.
Since the checked variables are typically derived from other vari-
ables, LRSan also employs backward analysis to recursively find
the “source” variables and identifies them as critical variables as
well. After that, LRSan employs a data-flow analysis to find uses of
the critical variable (e.g., using a size variable in kmalloc()). At this
point, check-use chains (e.g., execution paths) from the security
checks to the uses of the critical variables are formed. In the third
step, LRSan traverses these execution paths to find potential modi-
fications of the critical variables. If a modification is found, LRSan
further reasons about if a recheck is enforced between modification
and use. Cases in which recheck is absent are detected as potential
LRC cases. In the final step, we manually confirm LRC cases for
real LRC bugs.
To the best of our knowledge, LRSan is the first system to sys-
tematically detect LRC bugs in OS kernels, which typically contain
a large number (more than 131K in Linux kernel according to our
recent count) of checks. Identifying security-related checks is chal-
lenging because there lacks a general rule to differentiate security
checks from other checks. Finding security checks automatically
thus constitutes a major building block of LRSan in LRC bug de-
tection. We believe such security check identification is beneficial
to future research in OS kernels as well. For example, identifying
security checks can help us find control-dependent values, and by
focusing on such values, fuzzers can significantly improve code
coverage efficiently [2, 28, 29, 34]. In LRSan, we build a static global
call graph and adopt a static inter-procedural analysis, which enable
us to detect LRC bugs across multiple modules. LRSan’s analysis is
also precise, by that we mean its analysis is flow sensitive, context
sensitive, and field sensitive (see §4 for details).
We have implemented LRSan based on LLVM and applied it
to the Linux kernel. LRSan is able to finish the detection within
four hours. The results show that LRSan find 2,808 potential LRC
cases. We then manually validate those cases. At the time of paper
submission, we have confirmed 19 new LRC bugs, most of which
have been fixed with our patches by Linux developers. The results
show that LRC cases are common in OS kernels and that LRSan
is capable of finding LRC bugs effectively. We also perform an in-
depth study on the found LRC cases and bugs. Based on the study,
we summarize causes of LRC bugs, discuss bug-fixing strategies
and possible improvements to the detection of LRC bugs.
Contributions. In summary, we make the following contributions.
• A common class of OS-kernel bugs. We identify and de-
fine LRC bugs, which can cause critical security impact
such as privilege escalation or out-of-bound access. We also
present the first in-depth study of LRC bugs.
• An automated detection system. We develop an auto-
mated system, namely LRSan, for detecting LRC bugs in
OS kernels. LRSan incorporates multiple new static program
analysis techniques dedicated to LRC bug detection. LRSan
serves as the first step towards preventing LRC bugs. We
will open source the implementation.
1 /* File: net/sctp/socket.c */
2 int min_len, max_len;
3 min_len = SCTP_DEFAULT_MINSEGMENT - af->net_header_len;
4 min_len -= af->ip_options_len(sk);
5 min_len -= sizeof(struct sctphdr) +
6
sizeof(struct sctp_data_chunk);
7 max_len = SCTP_MAX_CHUNK_LEN - sizeof(struct sctp_data_chunk);
8
9 /* val is identified as a critival variable */
10 if (val  max_len)
11
12
13 if (asoc) {
14
15
16
17
18
19
20
21
22
23 }
val = asoc->pathmtu - af->net_header_len;
val -= af->ip_options_len(sk);
val -= sizeof(struct sctphdr) +
/* val is used without a recheck */
sctp_datachk_len(&asoc->stream);
return -EINVAL;
/* val is modified */
asoc->user_frag = val;
Figure 2: An LRC example in which a checked variable is
modified and used without a recheck. The code is simplified
for demonstration.
2.1 A Formal Definition of LRC Bugs
While the basic idea of finding LRC bugs is shown in Figure 1, to
automatically and precisely detect LRC bugs through a program
analysis, we need a formal definition of LRC bugs. An LRC bug
exists with the following conditions:
• Having a check-use chain. Execution paths containing a
security check of a variable and a use of the variable (after
the check) exist. In the example of Figure 2, the check-use
chain contains the execution path from line 10 to line 22.
• Being subject to modification. The security-checked vari-
able might be changed in the check-use chain. Lines from
16 to 19, in Figure 2, change the value of the variable var.
• Missing a recheck. Modification to a security-checked vari-
able is safe if a recheck is enforced after the modification.
Thus, missing a recheck is also a condition to form an LRC
bug.
Let us consider a program P. The variable V is in P. V has a set of
possible values, [S]. P has a set of execution paths, [E], and each
execution path has a set of instructions, [I]. With these notations,
we now define the following terms.
Security check. We define a security check as a conditional state-
ment that has the following three properties. (1) It is followed by
two branches (i.e., execution paths) Et and Ec; (2) ist reads a vari-
able V and splits its value set into Vt and Vc; and (3) Et is control
dependent on Vt , i.e., Et is taken when the actual value of V falls
in Vt , and Ec is control dependent on Vc.
In general, whether a check is a security check or not is highly
dependent on developers’ logic. However, based on our observation,
security checks act as validators that inspect the value of a target
variable, and if the value is invalid, the execution is terminated (e.g.,
by returning an error code). Therefore, we identify a check as a
security check if Et terminates current execution, and Ec continues
the execution.
Figure 1: A sequence of three operations that form an LRC
bug. The modification can come from user space, other
threads, or even the thread itself. A recheck is not enforced
between modification and use.
• Security check identification We develop an automated
technique to identify security checks and critical variables,
which we believe can benefit related research in the future
such as coverage-guided fuzzing [2, 28, 29].
• New LRC bugs. We have implemented LRSan based on
LLVM, and applied it to the whole Linux kernel. LRSan re-
ports thousands of potential LRC cases, and we have con-