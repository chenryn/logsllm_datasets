IBIS – Interoperability in Business Information Systems
Using Semantic Web Technologies to Build Adaptable
Enterprise Information Systems
Bruno Caires
Department of Communications and Computing
University of Madeira
Funchal, Portugal
PI:EMAIL
Jorge Cardoso
Department of Mathematics and Engineering
University of Madeira
Funchal, Portugal
PI:EMAIL
Abstract: In most existing software systems, client applications are tightly coupled to
database systems (client/server), which imply that when changes occur in the
database, those changes also have to be propagated to all connected clients. Another
issue is that since several database engines may exist in the organization, in most cases
relational databases, the integration may be a very difficult process. To overcome the
above-mentioned problems, we propose a solution based on a middleware located
between clients and database servers that provide both an abstraction layer and a
unified view over a set of databases. The middleware is based in semantic Web
technologies and uses a semantic global model specified in OWL. Interoperability with
other systems/organizations is achieved providing the middleware services as Web
Services. Therefore, our approach allows clients to be loosely coupled from the
database servers, minimizing maintenance when changes occur.
Introduction
With the constant grow of enterprises and the need to share information across
departments and business areas becomes more critical, companies are turning to
integration to provide a method for interconnecting heterogeneous, distributed and
autonomous systems. Whether the sales application needs to interface with the
inventory application, the procurement application connect to an auction site, the
PDA calendar synchronize with the corporate calendar server, it seems that any
application can be made better by integrating it with other applications [HW04].
To confirm the importance that integration has assumed, studies show that
European corporations spend over 10 billion euros in information integration
[ABBFLL05]. In addition, integration costs assume an average of 24% of yearly IT
budget [Yag02]. Therefore, integration is one of the most important challenges
that organizations face today.
Semantic and semantic Web technologies offer a new way to integrate data and
applications [O06]. These new technologies have find one of their first commercial
users in organizations facing data integration needs [O06] and always seeking for
better data integration solutions. According to TopQuadrant, a consulting firm that
© IBIS – Issue 3 (3), 2006
http://www.ibis-journal.net ISSN:1862-6378 IBIS – Issue 3 (3), 2006
specializes in semantic Web technologies, the market for semantic technologies
will grow at an annual rate of between 60% and 70% until 2010.
Based on semantic technologies [Pal01], the semantic Web is an extension of the
current Web in which information is given well-defined meaning, better enabling
computers and people to work in cooperation [BM02]. Toward this objective, and in
order to achieve the "well defined meaning of information", a fundamental concept
in the centre of the semantic Web is ontology. An ontology is a formal, explicit
specification of a shared conceptualization [Grub93] allowing the definition of
concepts, attributes and relations between concepts. Ontologies allow data to be
defined and linked in a way that enables its use for more effective discovery,
integration, re-use across various applications and machine processing [BM02].
Our approach for integrating several Relational Database Management Systems
(RDBMS) is achieved by using an abstraction layer, providing a virtual view over a
set of data sources in order to allow the data accessibility in real time. This virtual
view represents the knowledge that the users of the system want to store and
access, rather than the data that implements that knowledge. The global model,
built using semantic Web technologies is not only human readable but also
computer readable. Applications access data sources through a global virtual view,
abstracting from aspects like data source type, connection type and data source
query language, focussing on the ‘what data’ and not on ‘how to get the data’.
Ontologies expressed in Web Ontology Language (OWL) constitute a good candidate
to represent the virtual view of our system. In fact, the shared conceptualization
(ontology) can be an abstract model for all the enterprise domain concepts. These
domain concepts are explicitly defined and related independently of the underlying
applications. This model is created independently from the data sources, allowing
reuse and distribution of the created ontology among stakeholders. It should
describe the most accurate domain model of the organization, not being limited or
restricted by any existing application or data source schema.
A middleware system, that implements the global view, should be built improving
reuse, evolution and organization of the developed system [Rit05]. Thus, one
possible approach to break apart a complicated software system is layering
[FRFHM02]. The architecture of our system is based in three layers: data source,
domain and interface, described in the following sections. The interoperability of
our system is achieved through the use of a Service Oriented Architecture (SOA)
[He03] that relies on Web Services [WS] to expose and allow clients (both
applications or external organizations) to interoperate with the virtual view.
Data Source Heterogeneity
When several database systems exist in an organization, a common problem
associated to the creation of a global view is heterogeneity. It occurs when there is
a disagreement about the meaning, interpretation or intended use of the same or
related data. Four types of information heterogeneity may arise: system
heterogeneity, syntactic heterogeneity, structural or schematic heterogeneity, and
semantic heterogeneity [CA06]:
• System heterogeneity: Applications and data may reside in different
hardware platforms and operation systems.
© IBIS – Issue 1 (1), 2006
IBIS – Interoperability in Business Information Systems
• Syntactic heterogeneity: Information resources may use different
representation and encodings of data. Syntactic interoperability can be
achieved when compatible forms of encoding and access protocols are used
to allow information systems to communicate.
• Structural heterogeneity: Different information systems store their data in
different data models, data structures and schemas.
• Semantic heterogeneity: The meaning of the data can be expressed in
different ways leading to heterogeneity. Semantic heterogeneity considers
the content of an information item and its intended meaning.
The use of Web Services can solve the syntactic and system heterogeneity. XML and
XSD (schemas) [W3CXC] can solve the structural heterogeneity because a XML file
that respects a specific XSD Schema has a well-defined structure. Using OWL, as a
shared ontology, semantic heterogeneity is resolved [CA06]. These technologies are
the foundation of the system we have developed.
Figure 1: Integration using a shared Ontology
As illustrated in Figure 1, the middleware (middle-tier located between the client-
tier and the database-tier) contains the global virtual view over a set of databases.
The global virtual view is specified using ontology, described in OWL. There are
services (S1, S2, Sn) exposing and allowing access to databases through Web
Services. Service requests and responses are XML messages. Therefore, syntactic,
system and structural heterogeneity are achieved.
Motivating Scenario
Let us suppose an organization that has several software systems, each one
connected to a particular RDBMS database. Examples include the human resource
management system, the accounting system, among others. Typically, developed
applications followed two tier (client/server) architecture. Client applications
were commonly “Commercial of-the-shelf” (COTS), implemented in a language
such as java or php, while database servers were engines such as mysql. With this
approach, clients were directly connected to servers (databases) and business rules
© IBIS – Issue 3 (3), 2006
http://www.ibis-journal.net ISSN:1862-6378 IBIS – Issue 3 (3), 2006
were stored in the database server or in each application. In this specific scenario,
business rules represent the rules that must be followed in order to insert or
retrieve data from the database. It may also imply calculations and data
transformation. If the business rules are stored in the application, it makes difficult
its reutilization. It also implies a new release of the application for each change. If
the business rules are stored in the server (database) there is a dependence of the
database server technology, which makes difficult its change. Also, in most
database systems, the programming language is data-centric, therefore not
appropriated for business rules manipulation. Nevertheless, having the
development time as an advantage, a disadvantage from the typical client/server
architecture is that if changes occur in the database schema, all the clients need to
be changed. Changes in the database can be either structural (change completely
the structure of the database) or just a change in the name of a table or attribute.
Applications frequently suffer changes along their lifetime. These changes are
motivated by immediate needs, maintenance tasks and changes in the evolving
environment. Consequences of this situation are backward and expensive
modernization and adjustment of the built systems.
In our approach, we developed a middle-tier that besides acting as an abstraction
layer [HL], is also suitable to the integration of data from multiple systems into a
unified, consistent and accurate representation geared toward the viewing and
manipulation of data. Through the middle-tier, data is aggregated, restructured,
relabelled and presented to the user [T06], therefore centralizing the business
rules.
With the use of semantic Web technologies to develop the middleware and by
creating a model of data entities (ontology), mapping those entities to their
respective sources and exposing its services as Web Services we intend to:
• Isolate changes that may occur in the database. When the database
changes, it is not necessary to change all the clients.
• Increase productivity of developers presenting them the domain model and
with not complex database schemas.
• Allow the ‘interface developers’ (like php, asp, etc) to make queries
dynamically and in the domain language described by the ontology,
abstracting from technical aspects like in which database is the data, type
of server and SQL query language.
• Minimize the time developers spend learning our database system and
creating access points to the information (views and stored procedures).
• Increase productivity and reduce maintenance to the developed solutions.
• Achieve interoperability with other applications/organizations using Web
Services.
The Prototype
In this section, we start by defining the methodology used to build the abstraction
layer (middleware) by providing a virtual view over a set of RDBMS data sources. It
follows with the architecture of the developed prototype, describing each of its
layers. The mapping process to the data sources and the XML query language that
allows users (even non-technical) and applications (internal or external to the
organization) to make requests to the created virtual view are presented. As an
© IBIS – Issue 1 (1), 2006
IBIS – Interoperability in Business Information Systems
example, we will use the “personal data” ontology to show a running example. This
ontology describes personal data such as name, birth date, address, contact and
identification associated to a person.
Methodology
Our approach is based in the Semantic Information Management (SIM) methodology
[BJ04]. The aim of this approach is to provide enterprises with insight into the
information residing in different sources, in different formats, with different
schemas across the enterprise. The SIM aims to provide a solution to this problem
by creating a central ontology and mapping the individual source schemas to this
central ontology, thereby creating a global view of all data residing in the
organization [ABBFLL05, BJ04 and Bru04].
Figure 2: The Semantic Information Management Methodology
As illustrated in Figure 2, the SIM methodology consists of six steps:
1. Gather requirements: the requirements for the information architecture are
collected and the scope of the project established.
2. Collect metadata: all data assets relevant to the project are catalogued and
an interface to access the data created.
3. Construct ontology: Create the ontology.
4. Rationalize: Establish the mappings between the data schemas and the
ontology.
5. Publish/Deploy: The ontology, along with the mappings, is published to
relevant stakeholders.
6. Utilize: Processes need to be created to ensure maintenance of
architecture.
Our SIM based methodology differs from the original definition because the
ontology created is not generated by ‘reverse engineering’ the database schemas
but instead generated from scratch (LAV) [LAN02], and then map it to the database
object (table or view) that stores the data described by the concept. This way, the
created ontology, describes the ‘as it should be’ and not the ‘as is implemented’.
Because the ontology is generated from scratch, already created ontologies can be
reused, and the created ontology can be distributed. Another aspect that
motivated the LAV approach is that the ontology is going to describe the structure
of the XML response of a service request. This is going to be illustrated in more
detail in the “Querying the middleware” section.
The drawback of the adopted solution is that mappings from the ontology to the