**IBIS â€“ Interoperability in Business Information Systems**

**Using Semantic Web Technologies to Build Adaptable Enterprise Information Systems**

**Authors:**
- Bruno Caires, Department of Communications and Computing, University of Madeira, Funchal, Portugal (Email: [PI:EMAIL])
- Jorge Cardoso, Department of Mathematics and Engineering, University of Madeira, Funchal, Portugal (Email: [PI:EMAIL])

**Abstract:**
In traditional software systems, client applications are often tightly coupled with database systems, leading to the need for extensive modifications when changes occur in the database. Additionally, integrating multiple database engines, particularly relational databases, can be a complex and challenging process. To address these issues, we propose a middleware solution that sits between clients and database servers. This middleware provides an abstraction layer and a unified view over a set of databases using semantic Web technologies, specifically the Web Ontology Language (OWL). By exposing its services as Web Services, our approach enables loose coupling between clients and database servers, thereby minimizing maintenance efforts when changes are made.

**Introduction:**
As enterprises grow, the need to share information across departments and business areas becomes increasingly critical. Integration is essential for interconnecting heterogeneous, distributed, and autonomous systems. Whether it's a sales application interfacing with an inventory system, a procurement application connecting to an auction site, or a PDA calendar synchronizing with a corporate calendar server, integration enhances the functionality of various applications [HW04].

The importance of integration is underscored by the significant financial investment it requires. European corporations spend over 10 billion euros annually on information integration, with integration costs accounting for approximately 24% of yearly IT budgets [Yag02]. Thus, integration is one of the most pressing challenges faced by organizations today.

Semantic Web technologies offer a new and effective way to integrate data and applications [O06]. These technologies have found early commercial adoption in organizations with data integration needs, driven by the desire for better integration solutions. According to TopQuadrant, a consulting firm specializing in semantic Web technologies, the market for these technologies is expected to grow at an annual rate of 60% to 70% until 2010.

The semantic Web, based on semantic technologies [Pal01], extends the current Web by providing well-defined meaning to information, facilitating better cooperation between computers and people [BM02]. At the core of the semantic Web is the concept of ontology, which is a formal, explicit specification of a shared conceptualization [Grub93]. Ontologies define concepts, attributes, and relationships, enabling more effective data discovery, integration, re-use, and machine processing [BM02].

Our approach to integrating multiple Relational Database Management Systems (RDBMS) involves using an abstraction layer to provide a virtual view over a set of data sources. This virtual view represents the knowledge that users want to store and access, rather than the underlying data. The global model, built using semantic Web technologies, is both human-readable and computer-readable. Applications access data through this global virtual view, abstracting from details such as data source type, connection type, and query language, focusing instead on the "what" of the data rather than the "how."

Ontologies expressed in OWL are ideal for representing the virtual view of our system. The shared conceptualization (ontology) serves as an abstract model for all enterprise domain concepts, defined independently of the underlying applications. This model, created separately from the data sources, allows for reuse and distribution among stakeholders. It should accurately describe the domain model of the organization, free from the limitations of existing applications or data source schemas.

A middleware system implementing the global view should enhance reuse, evolution, and organization [Rit05]. Layering is a common approach to manage complexity in software systems [FRFHM02]. Our system architecture consists of three layers: data source, domain, and interface. Interoperability is achieved through a Service-Oriented Architecture (SOA) [He03] that uses Web Services to expose and allow clients (both applications and external organizations) to interoperate with the virtual view.

**Data Source Heterogeneity:**
Organizations often face heterogeneity when integrating multiple database systems. This heterogeneity can be categorized into four types: system, syntactic, structural, and semantic [CA06]:

- **System Heterogeneity:** Applications and data may reside on different hardware platforms and operating systems.
- **Syntactic Heterogeneity:** Information resources may use different data representations and encodings. Syntactic interoperability is achieved through compatible encoding and access protocols.
- **Structural Heterogeneity:** Different information systems store data in different models, structures, and schemas.
- **Semantic Heterogeneity:** The meaning of data can vary, leading to inconsistencies. Semantic heterogeneity considers the content and intended meaning of information items.

Web Services can resolve syntactic and system heterogeneity. XML and XSD (schemas) [W3CXC] address structural heterogeneity by ensuring well-defined data structures. Using OWL as a shared ontology resolves semantic heterogeneity [CA06]. These technologies form the foundation of our system.

**Figure 1: Integration Using a Shared Ontology**

As shown in Figure 1, the middleware (middle-tier) between the client-tier and the database-tier contains the global virtual view over a set of databases. This view is specified using an ontology described in OWL. Web Services (S1, S2, Sn) expose and allow access to the databases. Service requests and responses are in XML format, ensuring syntactic, system, and structural interoperability.

**Motivating Scenario:**
Consider an organization with multiple software systems, each connected to a specific RDBMS. Examples include a human resource management system and an accounting system. Typically, these applications follow a two-tier (client/server) architecture, with client applications implemented in languages like Java or PHP, and database servers using engines like MySQL. In this setup, clients are directly connected to the servers, and business rules are stored either in the database server or within the applications. This direct connection makes it difficult to reuse business rules and necessitates application updates for any database changes.

In our approach, we developed a middle-tier that acts as an abstraction layer, suitable for integrating data from multiple systems into a unified, consistent, and accurate representation. This middle-tier centralizes business rules, allowing for dynamic queries in the domain language described by the ontology, abstracting from technical details.

**The Prototype:**
This section describes the methodology used to build the abstraction layer (middleware) and the architecture of the developed prototype. We also present the mapping process to the data sources and the XML query language that enables users and applications to make requests to the virtual view. As an example, we will use the "personal data" ontology, which describes personal information such as name, birth date, address, contact, and identification.

**Methodology:**
Our approach is based on the Semantic Information Management (SIM) methodology [BJ04], which aims to provide insight into the information residing in different sources, formats, and schemas across the enterprise. SIM creates a central ontology and maps individual source schemas to this ontology, creating a global view of all organizational data [ABBFLL05, BJ04, Bru04].

**Figure 2: The Semantic Information Management Methodology**

The SIM methodology consists of six steps:

1. **Gather Requirements:** Collect requirements and establish the project scope.
2. **Collect Metadata:** Catalog all relevant data assets and create an interface for data access.
3. **Construct Ontology:** Create the ontology.
4. **Rationalize:** Establish mappings between data schemas and the ontology.
5. **Publish/Deploy:** Publish the ontology and mappings to relevant stakeholders.
6. **Utilize:** Create processes for maintaining the architecture.

Our SIM-based methodology differs from the original definition in that the ontology is generated from scratch (LAV) [LAN02] and then mapped to the database objects (tables or views) that store the described data. This approach ensures that the ontology represents the "as it should be" rather than the "as implemented." Because the ontology is generated from scratch, it can be reused and distributed. This method also aligns with the structure of the XML response of a service request, as detailed in the "Querying the Middleware" section.

The drawback of this approach is that it requires mappings from the ontology to the actual data sources, which can be a complex task.