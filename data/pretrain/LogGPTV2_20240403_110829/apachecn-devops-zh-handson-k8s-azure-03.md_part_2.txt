    7 元数据:
    8 名称:example-redis-config
3.  You can now create your ConfigMap via the following command:
    忽必烈 create-f example-redis-config . YAML
    您应该得到如下输出:
    configmap/example-redis-config 已创建
4.  Next, run the following command:
    忽必烈描述了 configmap/example-redis-config
    该命令返回与前一条相同的输出，如图*图 3.6* 所示。
如您所见，使用 YAML 文件，您能够创建相同的配置映射。
#### 注意
**kubectl get** 有有用的 **-o** 选项，可以用来获取 YAML 或 JSON 中对象的输出。当您对系统进行了手动更改并希望看到 YAML 格式的结果对象时，这非常有用。您可以使用以下命令获取 YAML 的当前配置图:
**立方得到-o YAML config map/example-redis config**
现在您已经定义了配置映射，让我们使用它。
### 使用配置映射读入配置数据
在本节中，您将重新配置 **redis-master** 部署，以从配置图中读取配置:
1.  To start, modify **redis-master-deployment.yaml** to use the ConfigMap as follows. The changes you need to make will be explained after the source code:
    1 API 版本:apps/v1
    2 种:部署
    3 元数据:
    4 名称:redis master
    5 个标签:
    6 应用:重定向
    7 规格:
    8 选择器:
    9 个匹配标签:
    10 个应用:redis
    11 角色:主人
    12 层:后端
    13 个副本:1 个
    14 模板:
    15 元数据:
    16 个标签:
    17 应用:redis
    18 角色:大师
    19 层:后端
    20 规格:
    21 个容器:
    22 -姓名:主人
    23 图片:k8s gcr . io/redis:e2e
    24 命令:
    25 - redis 服务器
    26-" redis-master/redis . conf "
    27 环境:
    28 -姓名:MASTER
    29 值:“真”
    30 卷安装:
    31 - mountPath: /redis 主服务器
    32 名称:配置
    33 资源:
    34 项请求:
    35 个 CPU:100 米
    36 内存:100 兆
    37 个端口:
    38 -容器港口:6379
    39 卷:
    40 -名称:配置
    41 configMap:
    42 名称:example-redis-config
    43 项:
    44 键:redis-config
    45 路径:redis.conf
    #### 注意
    如果你下载了这本书附带的源代码，在*第三章【AKS 上的应用部署】*中有一个名为**redis-master-deployment _ modified . YAML**的文件，对其进行了必要的修改。
    让我们深入研究代码，了解不同的部分:
    *   **第 24-26 行**:这些行引入了一个命令，当你的 Pod 启动时，这个命令将被执行。在这种情况下，这将启动指向特定配置文件的 **redis 服务器**。
    *   **第 27-29 行**:这些行显示了如何将配置数据传递给你的运行容器。此方法使用环境变量。在 Docker 形式中，这相当于**Docker run-e“MASTER = true”。-名称 master-p 6379:6379-m 100M-c 100M-d Kubernetes/redis:v1**。这将环境变量**主**设置为**真**。您的应用可以读取其配置的环境变量设置。
    *   **第 30-32 行**:这些行将名为**配置**的卷(该卷在第 39-45 行中定义)安装在运行容器的 **/redis-master** 路径上。它将隐藏原始容器上 **/redis-master** 上的任何内容。
    *   用 Docker 术语来说，它相当于**Docker run-v config:/redis-master。-e "MASTER=TRUE" -名称 MASTER-p 6379:6379-m 100M-c 100M-d Kubernetes/redis:v1**。
    *   **第 40 行**:这给该卷命名为**配置**。该名称将在此 pod 的上下文中使用。
    *   **第 41-42 行**:声明应该从**示例-redis-config** 配置图加载该卷。该配置映射应该已经存在于系统中。你已经定义了这个，所以你是好的。
    *   **第 43-45 行**:这里，您正在将 **redis-config** 键(两行 **maxmemory** 设置)的值加载为 **redis.conf** 文件。
通过将配置映射添加为卷并装载该卷，您可以加载动态配置。
1.  Let's create this updated deployment:
    kube CTL create-f redis-master-deployment _ modified . YAML
    这将输出以下内容:
    deployment.apps/redis-master 创造了
2.  Let's now make sure that the configuration was successfully applied. First, get the pod's name:
    忽必烈得到 pods
    这将返回类似于图 3.7 的输出:
    ![Fetching the details of the Redis-master pod using the kubectl get pods command](img/B17338_03_07.jpg)
    图 3.7:Pod 的细节
3.  Then **exec** into the pod and verify that the settings were applied:
    kubi KL exec-it redis-master-redis-CLI
    这将打开一个与运行窗格的 **redis-cli** 会话。现在您可以获得 **maxmemory** 配置:
    配置获取最大内存
    然后就可以得到 **maxmemory-policy** 配置:
    配置获取最大内存-策略
    这会给你一个类似于*图 3.8* 的输出:
    ![Verifying the maxmemoery and maxmemory-policy custom configuration](img/B17338_03_08.jpg)
    图 3.8:验证 pod 中的 Redis 配置
4.  要离开 Redis 外壳，键入**退出**命令。
总而言之，您刚刚完成了配置云原生应用的一个重要部分，即向应用提供动态配置数据。您还会注意到，应用必须配置为动态读取配置。使用配置设置应用后，您访问了一个运行容器来验证运行配置。在本书中，您将经常使用这种方法来验证运行应用的功能。
#### 注意
使用 **kubectl exec** 命令连接到正在运行的容器对于故障排除和进行诊断非常有用。由于容器的短暂性，您不应该连接到容器来进行额外的配置或安装。这应该是您通过 Kubernetes 提供的容器映像或配置的一部分(就像您刚刚做的那样)。
在本节中，您将 Redis 主服务器配置为从配置映射加载配置数据。在下一节中，我们将部署端到端应用。
## 完成样本留言簿应用的部署
为了理解使用 ConfigMap 的应用的动态配置，我们走了一段弯路，现在将返回到留言簿应用的其余部分的部署。您将再次遇到部署、复制集和单元的概念。除此之外，还将向您介绍另一个关键概念，称为服务。
为了开始完整的部署，我们将创建一个服务来公开 Redis 主服务。
### 暴露 Redis 主服务
当在普通 Docker 中公开一个端口时，公开的端口受限于它运行的主机。使用 Kubernetes 网络，集群中的不同 Pod 之间可以实现网络连接。然而，PODS 本身本质上是短暂的，这意味着它们可以关闭、重启，甚至移动到其他主机，而无需维护它们的 IP 地址。如果您要直接连接到一个 pod 的 IP，如果该 pod 被移动到新的主机，您可能会失去连接。
Kubernetes 提供了**服务**对象，处理这个确切的问题。使用标签匹配选择器，它将流量发送到正确的 Pod 。如果有多个 pod 为一项服务提供流量，它还会进行负载平衡。在这种情况下，主节点只有一个 pod，因此它只是确保流量被定向到独立于 pod 运行节点的 pod。要创建服务，请运行以下命令:
立方结构套用-f redis 主要服务。yaml
**redis-master-service . YAML**文件包含以下内容:
1 堆叠版本:v1
2 种:服务
3 元数据:
4 名称:redis master
5 个标签:
6 应用:重定向
7 角色:主人
第 8 层:后端
9 规格:
10 个端口:
11 端口:6379
12 目标端口：6379
13 选择器:
14 应用:redis
15 角色:大师
16 层:后端
现在让我们看看您使用前面的代码创建了什么:
*   **第 1-8 行**:这些行告诉 Kubernetes 我们想要一个叫做 **redis-master** 的服务，它和我们的 **redis-master** 服务器 pod 有着相同的标签。
*   **第 10-12 行**:这些行表示服务应该处理到达港口 **6379** 的流量，并将其转发到与第 13 行和第 16 行之间定义的选择器相匹配的 Pod 的港口 **6379** 。
*   **13-16 号线**:这些线是用来寻找需要发送进来的流量的 Pod 的。因此，任何标签匹配的 pod(**app:redis，角色:主和层:后端**)都有望处理端口 **6379** 流量。如果您回顾前面的示例，这些正是我们应用于该部署的标签。
您可以通过运行以下命令来检查服务的属性:
忽必烈得到服务
这将为您提供如图 3.9 所示的输出:
![Obtaining the properties of the Redis-master service using the kubectl get service command](img/B17338_03_09.jpg)
图 3.9:创建的服务的属性
您会看到一个名为 **redis-master** 的新服务已经创建。它拥有 **10.0.106.207** 的集群知识产权(在您的情况下，知识产权可能会有所不同)。请注意，该 IP 仅在集群内有效(因此称为**集群 IP** 类型)。
#### 注意
您现在正在创建类型为**集群 IP** 的服务。还有其他类型的服务，这将在本章后面介绍。
一项服务还为该服务引入了一个**域名服务器** ( **域名系统**)名称。域名的形式为 **。. SVC . cluster . local**；在这种情况下，应该是**redis-master . default . SVC . cluster . local**。为了看到这一点，我们将在 **redis-master** pod 上进行名称解析。默认映像没有安装 **nslookup** ，所以我们将通过运行 **ping** 命令来绕过它。如果流量没有返回，不要担心；这是因为你没有在你的服务上暴露 **ping** ，只有 **redis** 端口。但是，该命令对于查看完整的域名和名称解析工作非常有用。我们来看看:
忽必烈得到 pods
#注意你的 redis-master pod 的名称
忽必烈执行-it 重定向大师-bash
ping redis 主节点
这会输出结果名称解析，向您显示您的服务的**完全合格域名** ( **FQDN** )和之前显示的 IP 地址。按下 *Ctrl* + *C* 可以停止 ping 命令的运行。可以通过**退出**命令退出 Pod ，如图*图 3.10* :
![Using a ping command to view the FQDN of your service](img/B17338_03_10.jpg)
图 3.10:使用 ping 命令查看服务的 FQDN