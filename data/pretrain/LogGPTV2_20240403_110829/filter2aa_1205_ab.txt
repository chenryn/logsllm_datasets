• Simpler is better
– Most widespread distribution; no special viewer required
– Complex formats mean fewer potential readers (due to higher 
possibility of vulnerabilities)
• Think “plain text”. “Markdown” is a decent compromise.
– Easy to copy-and-paste key details (also, language translation)
• Please never, EVER PDF!
• If you’re going to make a video...
– Respect people’s time!
– Keep it short and sweet, and accompany it with a text advisory.
– A clear picture is essential
– Show reproduction steps
– Give the viewer enough time to read and understand each step
26
Advisory Formats - Pros and Cons
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• There are many scenarios, each disclosure is a unique snowflake
– Inability to find right contact (who might not exist)
– Unless they’re very experienced, you’re calling their baby ugly
– Lack of understanding of the issue
– Legal threats
– Acknowledgement of receipt, followed by silence
– Corporate bureaucracy or politics preventing openness
– Refusal to share patches with you to re-test
– Lack of credits
– Commitment to a fix, but with an unreasonable timeline
– Disagreement on severity of the issue
– Release of patch without mentioning a vulnerability at all
27
What to Expect from Vendors
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Please post your advisory to at least one source that is archived 
forever (or archived widely)!
• Mailing lists: Bugtraq, Full-Disclosure, oss-security
• Exploit-DB or other exploit sites
• Vulnerability databases
• Your own blog or website
Then again, maybe you are okay with relying on vendor credits or 
“hall of fame” -- no separate publication needed.
28
Where to Disclose Publicly
Josh
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Testing live sites or networks without permission
• Interacting with a vendor in a way that seems like a threat or 
blackmail
• Failing to ensure a problem exists
– E.g., trusting automated tool findings without verifying them
– Easy to declare a vulnerability exists, but harder to prove it
– Corollary: if you can’t exploit it, maybe somebody else can
• Not verifying whether the issue was already discovered
• Skipping root-cause analysis
– Often leads you to more interesting findings
• Suggesting poor workarounds (e.g., “uninstall software”)
• Over-hyping the severity of your findings
29
Common Mistakes to Avoid (1)
Josh + Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Treating multiple attacks, or attack chains, as if they were 
separate vulnerabilities, even when they originate from a 
single vulnerability
– Decision point: “if an issue is fixed, are the other issues still a 
problem?”
• Copying one of your old advisories to make a new advisory, 
and forgetting to change all the data for the new vulnerability
– Start with an empty template!
• Relying too heavily on memes or cultural references
• Assuming developers are stupid and lazy
• Assuming customers can patch instantly
30
Common Mistakes to Avoid (2)
Josh + Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Vulnerability Research Growth Stages
(just our take)
Newbie
Workhorse
Subject 
Matter 
Expert
“Elite”
●
Easy vulns
●
Easy attacks
●
Easy software
●
Sometimes 
wrong
●
No clean 
advisory format
●
Mult vulns
●
Mult vuln types
●
Simple 
bypasses
●
Evolving 
advisory format
●
Enhances 
existing 
techniques
●
Early adopter
●
White papers / 
conf speaker
●
Root cause 
analysis
●
Clear body of 
work
●
Rarely wrong
●
New vuln classes
●
New attacks
●
New tools
●
New bypasses
●
Complex chains
●
Most popular/heavily-audited 
software
●
Highly specialized
31
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Disclaimer! Everyone develops differently; this is just an 
approximation
• Not everybody wants to be, can be, or needs to be elite
• Malcolm Gladwell’s Outliers says it takes about 10,000 hours of 
focused practice to become an expert
– Varies based on aptitude and prior experience, e.g. developers pivoting 
to security
• It can take 3 years or more before you build a reputation
• To progress further, you can:
– Team up with a peer
– Find a mentor
• Be polite and respectful of their time; accept that some will say “no”
• QUIZ: what happens when you’re an elite researcher who targets 
software with low-hanging fruit?  Ask @taviso ;-)
32
Growth and Development
(A Perspective)
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Vulnerability research is a trying 
profession/hobby
• FAILZ are inevitable
• FEELZ are inevitable
– You're (probably) subject to trying to find 
rationales and logic to explain away your feelz
• Hack/life balance is key
– But each person has a different balance
• You don't have to be elite to make a 
difference
33
Feelz and Failz: Your “Objective,” 
Technical Research is a Lie
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
It's normal to:
–
Get frustrated
–
Give up (temporarily or permanently) and look for something else
–
“Waste” time on a promising theory that doesn’t work out
–
Let your pride & ego get in the way of communication or success
–
Believe you're an expert when you’re not
–
Feel you’re weak when others think you’re not
–
Be afraid your work isn’t worthwhile
–
Be unable to see yourself reaching the level of those you respect
–
Feel hurt or embarrassed by criticism from people you respect
•
Try to prevent your feelz from negatively affecting anyone…
–
Including yourself!
•
Try to temper your emotion and avoid premature celebration
34
FEELZ ARE OK
Josh and Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Your research heroes and heroines, plumbers and rock stars, whoever they 
are, probably:
– Failed privately, or before everybody cared about infosec
– Got “scooped” by bug collisions
– Were defeated by a technical barrier they couldn’t overcome
– Couldn’t understand somebody else’s findings
– Operated in a world where the “rules” weren't yet defined… but today those 
rules aren't made explicit
– Over-hyped some findings
– Recovered, and forgot how they messed up
– Recovered, but won't admit how they messed up (see: ego)
– Might misrepresent accomplishments or how easy things were for them
•
Failz are not fatal! (usually; we are in the age of IoT, unfortunately)
35
FAILZ ARE OK
Josh and Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• May you fail fast, fail uniquely, and fail well!
• Everybody forges their own path, but others have 
made the journey before
• Good luck and have fun!
Josh: @jduck
Steve: @sushidude
36
Conclusion
Image: wocintechchat.com
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Backup Slides / Details
37
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Easy-to-find vulnerabilities
• Easy-to-conduct, simplistic attacks
• One vulnerability type only
• Misses more important vulns
• Misses nearby issues
• Finds and discloses each bug, one at a time
• Limited to highly insecure, previously-unaudited software
• No “advisories” per se
• Sometimes wrong
Stage 1: Newbie
(Details)
38
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• More comprehensive findings - multiple bugs per package
• Multiple types of well-understood vuln/attack classes
• Recognizes simplistic protection mechanisms e.g. blacklists
• Evolves a disclosure policy and approach to working with 
vendors (or not)
• Evolving, stable advisory format
• Learns new techniques from others and applies them to own 
work
• Ensures findings are new and references related work
39
Stage 2: Workhorse
(Details)
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Recognizes multiple audiences
•
Significant experience in one or more vuln or attack classes
•
Develops new enhancements for existing techniques
•
Writes white papers or speaks at conferences
•
Bypasses common protection mechanisms
•
Performs more comprehensive root cause analysis
•
Applies experience to previously-uninvestigated product classes
•
Creates a noticeable body of work
•
Extensive findings for any package audited
•
Experience with multiple techniques & methodologies
•
Able to find bugs in most packages
•
Detailed, well-written advisories with all relevant information
•
Rarely wrong (able to be trusted without verification)
40
Stage 3: Subject Matter Expert
(Details)
Steve
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Hates that term (probably)
• Finds new vuln classes, invents new attack classes, makes 
new tools
• Bypasses state-of-the-art protection mechanisms
• Anticipates industry-wide developments
• Is “elite” only for a particular specialty
–
NOBODY knows everything anymore
• Finds vulns in any software package, anywhere, anytime*
• Analyzes most popular, secure software
• Finds complex vulnerability chains
* as applied to their particular specialty
41
Stage 4: “Elite”
(Details)
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
Vulnerability Research Process (an 
attempt…)
Discovery
Analysis
Reporting
Remediation
Finding security bugs by 
applying various 
techniques
●
Auditing
●
Fuzzing
●
Manual testing
●
etc.
Understanding the bugs 
as much as possible
●
Reachability
●
Impact
●
Affected 
product(s) and 
version(s)
●
Minimize test 
cases
●
Exploitability
Communicating your 
research with vendors 
(and potentially the 
general public)
●
Drafting an 
advisory
●
Notifying 
affected parties
●
Coordinating 
with vendors
●
Once 
remediated, 
notifying a wider 
audience
42
Fixing the issues, 
typically handled by the 
receiving end (vendor).
●
Craft and 
deploy a fix
●
Notifying 
affected parties
●
Coordinating 
with 
researchers
Affected parties
●
Prioritize, test, 
and apply 
patches
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
•
Presentation
–
Andrew M. Hay - “Bootstrapping A Security Research Project”
•
https://speakerdeck.com/andrewsmhay/source-boston-2016-bootstrapping-a-security-research-project
–
Larry Cashdollar - “How to find 1,352 WordPress XSS plugin vulnerabilities in 1 hour (not really)”
•
http://www.wallofsheep.com/blogs/news/tagged/defcon#larry
–
Nick Jones / MWR Labs, “Bug Hunting with Static Code Analysis”
•
https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-bug-hunting-with-static-code-analysis-bsides-2016.pdf
•
Books
–
Dowd, McDonald, and Schuh: “The Art of Software Security Assessment: Identifying and Preventing 
Software Vulnerabilities” (the code auditing bible!)
–
“Hacker’s Handbook” series, e.g. Drake, Lanier, Mulliner, Fora, Ridley, Wicherski: “Android 
Hacker’s Handbook”
•
Documents
–
Phrack Magazine: http://www.phrack.org/
–
PoC||GTFO https://www.alchemistowl.org/pocorgtfo/
–
“Introduction to Vulnerability Theory” - 
https://cwe.mitre.org/documents/vulnerability_theory/intro.html
43
References/Links: Research Process
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• This is far from exhaustive; there are dozens of 
commercial and freeware software scanners
• Consider: $$$, false-positive rate, 
false-negative rate, explanations, ...
• Kali Linux - many different tools 
https://www.kali.org/
• Metasploit https://www.metasploit.com/
• Grep (yes, grep!)
44
References/Links: Tools
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• OWASP WebGoat 
https://www.owasp.org/index.php/Category:OWASP
_WebGoat_Project
• NIST SAMATE test suites, e.g. Juliet and 
STONESOUP 
https://samate.nist.gov/SARD/testsuite.php
• CWE “Demonstrative Examples” for individual 
entries https://cwe.mitre.org
• Intentionally vulnerable distros, e.g. Damn 
Vulnerable Linux or https://www.vulnhub.com/
45
References/Links: Intentionally 
Vulnerable Software
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• Kymberlee Price, “Writing Vulnerability Reports that Maximize 
Your Bounty Payouts”
– https://youtu.be/zyp2DoBqaO0
• John Stauffacher, “Geekspeed’s Advice for Writing a Great 
Vulnerability Report”
– https://blog.bugcrowd.com/advice-for-writing-a-great-vulnerability-repor
t/
• OSVDB “Researcher Security Advisory Writing Guidelines”
– https://blog.osvdb.org/2013/01/15/researcher-security-advisory-writing-g
uidelines
• CVRF (Common Vulnerability Reporting Framework)
– http://www.icasi.org/cvrf/
• Christey advisory format suggestion (2003)
– http://www.securityfocus.com/archive/1/344559
46
References/Links: Advisory & Disclosure 
Advice
Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game - DEF CON 24
• http://howdoireportavuln.com/
• http://attrition.org/errata/legal_threats/
• ISO 29147 vulnerability disclosure standard 
http://www.iso.org/iso/catalogue_detail.htm?csnumber=45170
• Christey/Wysopal IETF draft 
https://tools.ietf.org/html/draft-christey-wysopal-vuln-disclosu
re-00
• RFPolicy 2.0 
https://dl.packetstormsecurity.net/papers/general/rfpolicy-2.0.t
xt
47
References/Links: Disclosure Processes