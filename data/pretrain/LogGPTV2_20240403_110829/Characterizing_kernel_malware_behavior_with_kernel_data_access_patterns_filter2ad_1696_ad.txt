# Data Access Patterns in Kernel Malware Detection

## Introduction
This document provides a detailed analysis of the data access patterns utilized by various rootkits, particularly focusing on the `task_struct` and other kernel objects. The objective is to present a comprehensive understanding of how these patterns can be used to detect and classify malware, specifically through the DataGene approach.

## Data Access Patterns

### Task Struct Access
- **W D task struct**: Write operation on the `task_struct`.
- **R D task struct**: Read operation on the `task_struct`.
- **Accessing code (c)**: Code that accesses the `task_struct`.

### Memory and File Operations
- **read kmem, write kmem R, W D file**: Reading and writing to kernel memory and files.
- **memory lseek**: Seeking within memory.
- **do write mem**: Writing to memory.
- **generic copy from user W S**: Copying data from user space to kernel space.

### System Call Table
- **sys call table**: Manipulation of the system call table.

### Process Control Block (PCB) Fields
- **Field, Offset (f)**: Specific fields and their offsets within the `task_struct`.
  - **pid**: Process ID.
  - **flags**: Process flags.
  - **uid, euid, gid, egid**: User and group IDs.
  - **next task**: Pointer to the next task.
  - **addr limit**: Address limit.
  - **suid, fsuid, fsgid**: Set user and group IDs.
  - **cap effective, cap inheritable, cap permitted**: Capability sets.
  - **comm**: Command name.
  - **next task, prev task**: Pointers to the next and previous tasks.
  - **f pos**: File position.

## Rootkit Behaviors

### Attacks on Process Control Blocks (PCBs)
- **Reading a process’s ID**: Seven rootkits (Ad1, Ad2, Ad3, hp, knark, linuxfu, kis) read process IDs.
- **Reading a process’s flag**: Six rootkits (Ad1, Ad2, Ad3, SK, superkit, knark) read process flags.
- **Privilege escalation**: Five rootkits (Ad1, Ad2, Ad3, kbdv3, knark) escalate privileges.
- **Listing processes**: Five rootkits (Ad1, Ad2, Ad3, hp, linuxfu) list processes.
- **Setting an address space information**: Four rootkits (Ad1, SK, superkit, kis) set address space information.
- **Reading a user’s ID**: Three rootkits (Ad1, Ad2, kbdv3) read user IDs.
- **Reading a process’ name**: Three rootkits (Ad1, Ad3, linuxfu) read process names.
- **Hiding a process**: Two rootkits hide processes.

### Attacks Using /dev/kmem
- **Manipulation via /dev/kmem**: Several rootkits (fuuld, hide_lkm, SucKIT, superkit) manipulate kernel memory using `/dev/kmem`.

### Attacks on the Kernel Module List
- **Scanning the kernel module list**: Four rootkits (kis, cleaner, modhide, modhide1) scan the kernel module list.
- **Hiding a kernel module**: Three rootkits (cleaner, modhide, modhide1) hide kernel modules.

### Attacks on Static Kernel Objects
- **Hijacking a system-call**: Multiple rootkits (Ad1, Ad2, knark, Rial) hijack system calls by replacing entries in the system call table.
- **Hijacking a hook on static memory**: Rootkits (hp, linuxfu, fuuld, hide_lkm, SK, superkit) hijack hooks on static memory.

## DataGene Approach

### Overview
- **DataGene** is a signature-based approach that detects known and unknown rootkits based on kernel data access patterns.
- **Coverage**: Detects rootkits with similar data access patterns to existing signatures. Does not cover rootkits without kernel data access or with highly obfuscated behavior.

### Advantages
- **Obfuscation Resistance**: More resistant to code obfuscation compared to control flow-based approaches.
- **Generalization**: Generalizes malware code information to create abstracted data behavior signatures.
- **No False Alarms**: In controlled environments, no false alarms are produced.

### Limitations
- **Dynamic Execution**: In production environments, false alarms may occur due to dynamic execution.

## Related Work

### Malware Defense Based on Code Behavior
- **Control Flow Analysis**: Approaches like instruction sequences and system-call sequences [2, 3, 9, 14, 15].
- **Challenges**: Obfuscation techniques and runtime variations in control flow.

### Kernel Malware Defense Based on Code Integrity
- **Code Integrity**: Approaches that allow only authorized kernel code [23, 24].
- **Limitations**: Ineffective against advanced rootkits that do not inject malicious code.

### Kernel Rootkit Profilers
- **Profilers**: Provide detailed aspects of rootkit behavior [22, 27].
- **Specificity**: Results are specific to analyzed malware, unlike DataGene's generalized approach.

### Signatures Based on Data Structures
- **Laika**: Determines and classifies unique data structure patterns [11].
- **Kernel Data Structure Detection**: Approaches that detect kernel data structures based on properties [7, 12, 16].

### Inter-Relationship Between Code and Data
- **SegSlice**: Trapping framework that enforces relationships between code and data units [5].

## Conclusion
- **New Approach**: DataGene characterizes kernel malware behavior using unique data access patterns.
- **Experiments**: Signatures of three classic rootkits effectively detect 16 kernel rootkits without false positives.
- **Common Behavior**: Common data behavior across rootkits provides an in-depth understanding of popular attack patterns.

## Acknowledgements
- **Thanks to Reviewers**: Insightful comments from anonymous reviewers.
- **Funding**: Supported by the US Air Force Office of Scientific Research (AFOSR), the US Air Force Research Laboratory (AFRL), and the US National Science Foundation (NSF).

## References
[References listed as provided]

This structured and detailed analysis should provide a clear and professional overview of the topic, making it easier for readers to understand the complex interactions and behaviors of kernel malware.