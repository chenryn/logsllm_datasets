### 业务逻辑和设计

1. **特权使用**
   - 设计是否对外部连接/命令使用任何提升的操作系统或系统特权？

2. **API和技术缺陷**
   - 使用的API和技术是否存在已知的缺陷？例如：DWR。

3. **内置安全控制**
   - 设计框架是否提供任何内置的安全控制，如ASP.NET MVC中的控件？应用程序是否利用了这些控件？

4. **特权减少**
   - 特权是否在任何时候都尽可能地减少？

5. **故障处理**
   - 程序是否设计为在出现异常时能够正常失败？

6. **风险分析**
   - 设计是否确定了所有切入点和信任边界，并在风险分析报告中进行了分析？

### 授权

1. **身份验证和授权审计**
   - 身份验证和授权审计的位置是否正确？

2. **无效请求处理**
   - 在无效请求（例如，验证/授权审计失败）后，执行是否停止/终止？

3. **审计执行**
   - 审计是否正确执行？是否存在后门参数？

4. **文件和文件夹审计**
   - 审计是否应用于Web根目录内的所有必需文件和文件夹？

5. **输入安全审计**
   - 在处理输入之前是否进行安全审计？

6. **容器管理的身份验证**
   - 如果是容器管理的身份验证，身份验证是否仅基于Web方法？
   - 身份验证是否适用于所有资源？

7. **密码复杂性审计**
   - 是否对密码执行了复杂性审计？

8. **密码披露**
   - 是否以将密码写入文件、日志或控制台的方式向用户披露密码？

9. **服务器身份验证**
   - 应用程序设计是否要求服务器身份验证（防欺骗措施）？

10. **密码过期**
    - 应用程序是否支持密码过期？

### 会话管理

1. **会话安全性**
   - 设计是否可以安全地处理会话？

2. **会话共享**
   - 设计是否涉及组件/模块之间的会话共享？会话两端是否正确验证？

3. **会话参数**
   - URL中未传递任何会话参数。

4. **会话Cookie过期**
   - 会话Cookie在合理的短时间内过期。

5. **会话Cookie加密**
   - 会话Cookie被加密。

6. **会话数据验证**
   - 会话数据已验证。

7. **会话ID复杂性**
   - 会话ID很复杂。

8. **会话存储安全性**
   - 会话存储是安全的。

9. **会话不活动超时**
   - 会话不活动超时被强制执行。

### 密码学

1. **密码存储**
   - 密码是否以加密格式存储？

2. **数据库凭证存储**
   - 数据库凭证是否以加密格式存储？

3. **敏感信息传输**
   - 通过网络发送的所有PI和敏感信息是否都是加密形式？

4. **加密通道**
   - 数据是否在加密通道上发送？应用程序是否使用HTTP客户端进行外部连接？

5. **自定义加密方案**
   - 应用程序是否使用自定义方案进行哈希或加密？

6. **加密协议更新**
   - 应用程序使用的加密功能是否是这些协议的最新版本，已打补丁并进行了适当处理以保持更新？

7. **跳过验证的请求**
   - 是否有任何特殊的请求从验证中跳过？

8. **密钥存储**
   - 密钥不在代码中存储。

### 输入验证

- 所有不受信任的输入都经过验证了吗？输入数据受类型、长度、格式和范围的约束和验证。

### 日志和审计

1. **日志记录**
   - 日志记录的是个人信息、密码或其他敏感信息吗？

2. **连接尝试记录**
   - 审核日志是否记录连接尝试（成功和失败）？

3. **审核流程**
   - 是否有适当的流程来读取审核日志以了解意外/恶意行为？

### 用户管理和认证

1. **特权记录**
   - 记录了基于用户和角色的特权。

2. **身份验证Cookie**
   - 身份验证Cookie不会保留。
   - 身份验证Cookie已加密。

3. **身份验证凭据**
   - 身份验证凭据未通过HTTP GET传递。

4. **细粒度授权**
   - 授权审计是细粒度的（页面和目录级别）。

5. **角色定义**
   - 根据明确定义的角色进行授权。

6. **授权工作**
   - 授权工作正常，不能通过参数操纵来规避。
   - Cookie操作无法绕过授权。

### 数据管理

1. **服务器端验证**
   - 数据在服务器端验证。

2. **HTTP标头验证**
   - 针对每个请求验证HTTP标头。

3. **XML输入验证**
   - 是否所有XML输入数据都根据约定的模式进行了验证？

4. **输出编码**
   - 包含不受信任的数据提供的输入的输出是否具有正确的编码类型（URL编码，HTML编码）？
   - 是否已将正确的编码应用于应用程序正在输出的所有数据。

### Web服务器

1. **动态WSDL生成**
   - 如果应用程序不需要动态生成WSDL，则禁用Web服务的文档协议。

2. **WSDL有效性**
   - 审计Web服务描述语言（WSDL）中的Web服务端点地址的有效性。

3. **不必要的协议**
   - 禁用不必要的Web服务协议（除了HTTP GET和HTTP POST）。

### 威胁模型示例

#### 5.4.1.1 分解应用程序

**目标**
- 分解应用程序的目标是了解应用程序及其与外部实体的交互。信息收集和文档可以帮助实现这一目标。

**信息收集过程**
- 信息收集过程使用明确定义的结构来执行，确保收集到正确的信息。该结构还定义了如何记录信息以生成威胁模型。

**表：一般信息**

| 项目 | 描述 |
|------|------|
| 应用程序名称 | 应用程序的名称 |
| 应用程序版本 | 应用程序的版本 |
| 描述 | 应用程序的高级描述 |
| 文档所有者 | 威胁建模文档的所有者 |
| 参与者 | 参与此应用程序威胁建模过程的参与者 |
| 审计者 | 威胁模型的审计者 |

**描述**
- 学院图书馆网站是第一个为图书馆员和图书馆顾客（学生和学院工作人员）提供在线服务的网站。由于这是网站的第一次实施，功能将是有限的。该应用程序有三种用户：
  1. 学生
  2. 全体职员
  3. 图书馆员
  - 工作人员和学生将能够登录并搜索书籍，工作人员可以请求书籍。图书管理员将能够登录、添加图书、添加用户和搜索图书。

**表：入口点**

| 项目 | 描述 |
|------|------|
| 身份 | 分配给入口点的唯一标识。这将用于入口点与任何已识别的威胁或漏洞进行交叉参考。在层入口点的情况下，应该使用主要的、次要的符号。 |
| 名字 | 标识入口点及其用途的描述性名称。 |
| 描述 | 详述在入口点发生的交互或处理的文本描述。 |
| 信任级别 | 此处记录了入口点所需的访问级别。这些将与文档后面定义的信任级别相互参照。 |

**表：资产**

| 项目 | 描述 |
|------|------|
| 身份 | 分配一个唯一的标识来标识每个资产。这将用于将资产与任何已识别的威胁或漏洞进行交叉参考。 |
| 名字 | 明确标识资产的描述性名称。 |
| 描述 | 资产是什么以及为什么需要保护的文本描述。 |
| 信任级别 | 此处记录了访问入口点所需的访问级别。这些将与下一步中定义的信任级别相互参照。 |

**表：信任级别**

| 项目 | 描述 |
|------|------|
| 身份 | 每个信任级别都有一个唯一的编号。这用于交叉参考入口点和资产的信任级别。 |
| 名字 | 一个描述性名称，允许标识已被授予此信任级别的外部实体。 |
| 描述 | 信任级别的文本描述，详细说明被授予信任级别的外部实体。 |

**数据流图**
- 通过对学院图书馆网站架构和设计的理解，可以创建如图十所示的数据流图。
- 具体来说，用户登录数据流图将如下图所示。

#### 5.4.1.2 威胁建模示例:步骤 2a 威胁分类

**确定威胁的第一步是采用威胁分类。威胁分类提供了一组带有相应示例的威胁类别，因此可以在应用程序中以结构化和可重复的方式系统地识别威胁。**