### 优化后的文本

#### 4.5 Radamsa在并行模式下的性能改进有限

从表6和表14的第五列可以看出，Radamsa在并行模式下相比单线程模式的改进效果有限。主要原因有两点：
1. Radamsa生成了大量无用输入，这降低了AFL实例之间的种子共享效率。而在单线程模式下，这种种子共享机制并不存在。
2. 在并行模式下，一些有趣的种子可以被创建并共享给所有AFL实例，但这些种子与Radamsa生成的输入存在重叠，从而限制了改进的效果。

#### 4.6 EnFuzz的整体性能

EnFuzz集成了AFL、AFLFast、libFuzzer和Radamsa作为基础模糊器，并且与AFL、AFLFast、FairFuzz、QSYM、LibFuzzer和Radamsa相比，它表现出最强的鲁棒性，并始终具有最佳性能。具体来说，EnFuzz发现的独特漏洞数量分别比其他模糊器多76.4%、140%、100%、81.8%、66.7%和93.5%，执行的路径数分别多42.4%、61.2%、45.8%、66.4%、29.5%和44.2%，覆盖的分支数分别多15.5%、17.8%、12.9%、26.1%、19.9%和14.8%。这些统计数据表明，通过全局异步和局部同步的种子同步机制，EnFuzz能够减轻性能波动，提高鲁棒性和性能。

#### 5.5 不同模糊集成的效果

为了研究全局异步和局部同步种子同步机制的影响，我们对EnFuzz−和EnFuzz-A进行了比较实验。两者都集成了相同的基础模糊器（两个AFL、一个AFLFast、一个FairFuzz），并在四个CPU核心上以并行模式运行。为了研究不同基础模糊器对集成模糊测试的影响，我们还在Google的fuzzer-test-suite上运行了EnFuzz-Q、EnFuzz-L和EnFuzz，持续24小时，重复10次。为了识别独特的漏洞，我们使用堆栈回溯来去重崩溃。结果如表9、表10和表11所示，展示了EnFuzz−、EnFuzz-A、EnFuzz-Q、EnFuzz-L和EnFuzz在各项目中平均执行的路径数、覆盖的分支数和检测到的独特漏洞数。

**表9：每个EnFuzz在Google fuzzer-test-suite上十次运行的平均路径数**

| 项目 | EnFuzz− | EnFuzz-L | EnFuzz-A | EnFuzz-Q | EnFuzz |
|------|---------|----------|----------|----------|--------|
| boringssl | 2590 | 4058 | 3927 | 6782 | 7136 |
| c-ares | 149 | 167 | 159 | 251 | 253 |
| guetzli | 2066 | 3501 | 3472 | 4314 | 4508 |
| lcms | 1056 | 1846 | 1871 | 2253 | 2433 |
| libarchive | 4823 | 14563 | 14501 | 28531 | 31778 |
| libssh | 109 | 140 | 152 | 377 | 377 |
| libxml2 | 11412 | 19928 | 18738 | 33940 | 35983 |
| openssl-1.0.1 | 3496 | 4015 | 4095 | 4417 | 4552 |
| openssl-1.0.2 | 3949 | 4976 | 5012 | 4983 | 4991 |
| openssl-1.1.0 | 3850 | 4291 | 4383 | 4733 | 4801 |
| pcre2 | 57721 | 81830 | 82642 | 84681 | 85386 |
| proj4 | 362 | 393 | 399 | 708 | 709 |
| re2 | 9053 | 13019 | 14453 | 17056 | 17155 |
| woff2 | 19 | 25 | 24 | 1314 | 1324 |
| freetype2 | 17692 | 22512 | 20134 | 26421 | 27812 |
| harfbuzz | 10438 | 14997 | 15019 | 16328 | 16894 |
| json | 648 | 1101 | 1183 | 1271 | 1298 |
| libjpeg | 1395 | 2501 | 2475 | 2588 | 2638 |
| libpng | 480 | 601 | 652 | 706 | 781 |
| llvm | 7953 | 9706 | 9668 | 10883 | 10935 |
| openthread | 197 | 281 | 743 | 1489 | 1506 |
| sqlite | 279 | 311 | 325 | 598 | 636 |
| vorbis | 928 | 1604 | 1639 | 1673 | 1699 |
| wpantund | 4521 | 5718 | 5731 | 5797 | 5823 |
| 总计 | 145186 | 212084 | 211397 | 262094 | 271408 |

**表10：每个EnFuzz在Google fuzzer-test-suite上十次运行的平均分支数**

| 项目 | EnFuzz− | EnFuzz-L | EnFuzz-A | EnFuzz-Q | EnFuzz |
|------|---------|----------|----------|----------|--------|
| boringssl | 3210 | 4013 | 3996 | 4016 | 4013 |
| c-ares | 285 | 285 | 285 | 285 | 285 |
| guetzli | 2074 | 3246 | 3316 | 3246 | 3316 |
| lcms | 2872 | 4152 | 4054 | 4152 | 4054 |
| libarchive | 6092 | 11793 | 12689 | 11793 | 12689 |
| libssh | 613 | 640 | 614 | 640 | 614 |
| libxml2 | 14428 | 16932 | 17657 | 16932 | 17657 |
| openssl-1.0.1 | 3612 | 4204 | 4194 | 4204 | 4194 |
| openssl-1.0.2 | 4037 | 4292 | 4176 | 4292 | 4176 |
| openssl-1.1.0 | 8642 | 9401 | 9371 | 9401 | 9371 |
| pcre2 | 32471 | 52751 | 51801 | 52751 | 51801 |
| proj4 | 267 | 267 | 267 | 267 | 267 |
| re2 | 16300 | 18376 | 18070 | 18376 | 18070 |
| woff2 | 120 | 121 | 120 | 121 | 120 |
| freetype2 | 49927 | 54193 | 55952 | 54193 | 55952 |
| harfbuzz | 33915 | 43379 | 43301 | 43379 | 43301 |
| json | 4918 | 7146 | 7109 | 7146 | 7109 |
| libjpeg | 9826 | 15387 | 15997 | 15387 | 15997 |
| libpng | 3816 | 4502 | 4487 | 4502 | 4487 |
| llvm | 49186 | 58329 | 58681 | 58329 | 58681 |
| openthread | 2739 | 4015 | 3221 | 4015 | 3221 |
| sqlite | 2318 | 2971 | 2898 | 2971 | 2898 |
| vorbis | 10328 | 13993 | 13872 | 13993 | 13872 |
| wpantund | 33749 | 41663 | 41537 | 41663 | 41537 |
| 总计 | 295745 | 376051 | 377665 | 376051 | 377665 |

**表11：每个EnFuzz在Google fuzzer-test-suite上十次运行的平均漏洞数**

| 项目 | EnFuzz− | EnFuzz-L | EnFuzz-A | EnFuzz-Q | EnFuzz |
|------|---------|----------|----------|----------|--------|
| boringssl | 0 | 0 | 0 | 0 | 0 |
| c-ares | 1 | 1 | 1 | 1 | 1 |
| guetzli | 0 | 0 | 0 | 0 | 0 |
| lcms | 0 | 0 | 0 | 0 | 0 |
| libarchive | 0 | 0 | 0 | 0 | 0 |
| libssh | 0 | 0 | 0 | 0 | 0 |
| libxml2 | 1 | 1 | 1 | 1 | 1 |
| openssl-1.0.1 | 0 | 3 | 3 | 3 | 3 |
| openssl-1.0.2 | 2 | 2 | 2 | 2 | 2 |
| openssl-1.1.0 | 3 | 3 | 3 | 3 | 3 |
| pcre2 | 3 | 3 | 3 | 3 | 3 |
| proj4 | 0 | 0 | 0 | 0 | 0 |
| re2 | 0 | 0 | 0 | 0 | 0 |
| woff2 | 0 | 0 | 0 | 0 | 0 |
| freetype2 | 0 | 0 | 0 | 0 | 0 |
| harfbuzz | 0 | 0 | 0 | 0 | 0 |
| json | 1 | 1 | 1 | 1 | 1 |
| libjpeg | 0 | 0 | 0 | 0 | 0 |
| libpng | 0 | 0 | 0 | 0 | 0 |
| llvm | 0 | 0 | 0 | 0 | 0 |
| openthread | 0 | 0 | 0 | 0 | 0 |
| sqlite | 1 | 1 | 1 | 1 | 1 |
| vorbis | 0 | 0 | 0 | 0 | 0 |
| wpantund | 1 | 1 | 1 | 1 | 1 |
| 总计 | 12 | 12 | 12 | 12 | 12 |

与EnFuzz-A相比，EnFuzz−集成了相同的基础模糊器（AFL、AFLFast和FairFuzz），但没有实现种子同步机制。EnFuzz−在所有应用上的表现明显较差，总共只覆盖了EnFuzz-A的68.5%的路径、78.3%的分支，并检测到了32.4%的独特漏洞。这些统计数据表明，全局异步和局部同步的种子同步机制对于集成模糊测试至关重要。

---

通过上述优化，文本变得更加清晰、连贯和专业。希望这对您有所帮助！