4
0
0
0
0
0
1
0
0
1
0
0
4
0
25
26% ↓
1
1
1
2
1
1
3
2
1
3
2
1
1
2
0
1
1
0
0
2
4
3
3
0
37
6% ↓
0
2
0
1
0
0
2
2
5
4
5
1
0
1
0
0
3
0
0
1
0
1
3
0
31
9% ↑
0
2
0
1
0
1
1
3
5
5
4
1
1
1
0
0
2
0
0
1
0
1
4
0
33
3%↓
0
3
0
1
0
0
1
3
5
5
6
2
1
1
0
0
2
0
0
1
0
0
3
0
34
–
From the ﬁfth columns of Table 6 and Table 14, we ﬁnd that
compared with Radamsa in single mode, the improvement
achieved by Radamsa is limited in parallel mode. There are
two main reasons: (1) Too many useless inputs generated by
Radamsa slow down the seed-sharing efﬁciency among all
USENIX Association
28th USENIX Security Symposium    1975
instances of AFL. This seed-sharing mechanism does not exist
in single mode. (2) Some interesting seeds can be created in
parallel mode and shared among all instances of AFL. These
seeds overlap with the inputs generated by Radamsa. So this
improvement is limited in parallel mode.
For the EnFuzz which integrates AFL, AFLFast, libFuzzer
and Radamsa as base fuzzers and, compared with AFL,
AFLFast, FairFuzz, QSYM, LibFuzzer and Radamsa, it shows
the strongest robustness and always performs the best. In total,
it discovers 76.4%, 140%, 100%, 81.8%, 66.7% and 93.5%
more unique bugs, executes 42.4%, 61.2%, 45.8%, 66.4%,
29.5% and 44.2% more paths and covers 15.5%, 17.8%,
12.9%, 26.1%, 19.9% and 14.8% more branches respectively.
These statistics demonstrate that it helps mitigate performance
variation and improves robustness and performance by the
ensemble approach with globally asynchronous and locally
synchronous seed synchronization mechanism.
5.5 Effects of Different Fuzzing Integration
To study the effects of the globally asynchronous and locally
synchronous based seed synchronization mechanism, we con-
duct a comparative experiment on EnFuzz−and EnFuzz-A,
both ensemble the same base fuzzers (two AFL, one AFLFast,
one FairFuzz) in parallel mode with four CPU cores. To study
the effects of different base fuzzers on ensemble fuzzing,
we also run EnFuzz-Q, EnFuzz-L and EnFuzz on Google’s
fuzzer-test-suite for 24 hours 10 times. To identify unique
bugs, we used stack backtraces to deduplicate crashes. The re-
sults are presented in Tables 9, 10 and 11, which shows the av-
erage number of paths executed, branches covered and unique
bugs detected by EnFuzz−, EnFuzz-A, EnFuzz-Q, EnFuzz-L,
and EnFuzz, respectively.
Project
boringssl
c-ares
guetzli
lcms
libarchive
libssh
libxml2
openssl-1.0.1
openssl-1.0.2
openssl-1.1.0
pcre2
proj4
re2
woff2
freetype2
harfbuzz
json
libjpeg
libpng
llvm
openthread
sqlite
vorbis
wpantund
Total
Improvement
EnFuzz−
2590
149
2066
1056
4823
109
11412
3496
3949
3850
57721
362
9053
19
17692
10438
648
1395
480
7953
197
279
928
4521
145186
–
EnFuzz-L
4058
167
3501
1846
14563
140
19928
4015
4976
4291
81830
393
13019
25
22512
14997
1101
2501
601
9706
281
311
1604
5718
212084
46% ↑
3927
159
3472
1871
14501
152
18738
4095
5012
4383
82642
399
14453
24
20134
15019
1183
2475
652
9668
743
325
1639
5731
211397
48% ↑
6782
251
4314
2253
28531
377
33940
4417
4983
4733
84681
708
17056
1314
26421
16328
1271
2588
706
10883
1489
598
1673
5797
262094
80% ↑
EnFuzz
7136
253
4508
2433
31778
377
35983
4552
4991
4801
85386
709
17155
1324
27812
16894
1298
2638
781
10935
1506
636
1699
5823
271408
87% ↑
Table 9: Average number of paths covered by each Enfuzz on
Google’s fuzzer-test-suite for ten times.
EnFuzz-Q
EnFuzz-A
Table 11: Average number of bugs found by each Enfuzz on
Google’s fuzzer-test-suite for ten times.
EnFuzz-Q
EnFuzz-A
1976    28th USENIX Security Symposium
USENIX Association
Compared with EnFuzz-A, EnFuzz− ensembles the same
base fuzzers (AFL, AFLFast and FairFuzz), but does not im-
plement the seed synchronization mechanism. EnFuzz− per-
forms much worse on all applications. In total, it only covers
68.5% paths, 78.3% branches and detects 32.4% unique bugs
of EnFuzz-A. These statistics demonstrate that the globally
asynchronous and locally synchronous based seed synchro-
nization mechanism is critical to the ensemble fuzzing.
Table 10: Average number of branches covered by each En-
fuzz on Google’s fuzzer-test-suite for ten times.
Project
boringssl
c-ares
guetzli
lcms
libarchive
libssh
libxml2
openssl-1.0.1
openssl-1.0.2
openssl-1.1.0
pcre2
proj4
re2
woff2
freetype2
harfbuzz
json
libjpeg
libpng
llvm
openthread
sqlite
vorbis
wpantund
Total
Improvement
Project
boringssl
c-ares
guetzli
lcms
libarchive
libssh
libxml2
openssl-1.0.1
openssl-1.0.2
openssl-1.1.0
pcre2
proj4
re2
woff2
freetype2
harfbuzz
json
libjpeg
libpng
llvm
openthread
sqlite
vorbis
wpantund
Total
Improvement
EnFuzz−
3210
285
2074
2872
6092
613
14428
3612
4037
8642
32471
267
16300
120
49927
33915
4918
9826
3816
49186
2739
2318
10328
33749
295745
–
EnFuzz−
0
1
0
0
0
0
1
0
3
2
3
0
0
0
0
0
1
0
0
0
0
0
1
0
12
–
EnFuzz-A
3996
285
3316
4054
12689
614
17657
4194
4176
9371
51801
267
18070
120
55952
43301
7109
15997
4487
58681
3221
2898
13872
41537
377665
27% ↑
EnFuzz-Q
EnFuzz-L
4013
285
3246
4152
11793
640
16932
4204
4292
9401
52751
267
18376
121
54193
43379
7146
15387
4502
58329
4015
2971
13993
41663
376051
28% ↑
4016
285