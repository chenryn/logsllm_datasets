of i’s quality premium, (
CI
 ranges from 0, when each node spends all of its potential profit 
on  its  quality  premium,  to  infinite,  when  a  node  absorbs  positive 
profit,  but  uses  the  lowest  price  next  hop.    A  high  value  for  CI
implies  that  nodes  are  spending  little  of  their  money  inflow  on 
purchasing high quality for the rest of the path.  As the next claim 
shows, this is exactly what happens as the path grows long: 
i
0
0 >t
First  a  bit  of  notation:  Recall  that  a  cheater  can  benefit  from  its 
actions  for 
  before  other  players  can  react.    When  a  node 
cheats, it can expect a higher profit flow, at least until it is caught 
and  other  players  react,  perhaps  by  diverting  traffic.    Let  node i’s 
ip ,  and  her  profit  flow  during  cheating  be 
normal  profit  flow  be 
some  greater  value,  yi.    We  will  call  the  ratio, 
,  the 
temptation to cheat. 
Lemma  1.    If  the  only  monitors  are  E2E,  ROP,  and  PRc,  the 
discounted  time,  (cid:1)
least as fast as the product of the temptations to cheat along the data 
path, 
,  needed  to  punish  a  cheater  increases  at 
-nt
rte
0
iy p/
i
(cid:1)
t
0
-
rt
en
‡
(cid:7)
(cid:5)
(cid:5)
(cid:6)
i
(cid:213)
on 
path
data
y
i
p
i
(cid:4)
(cid:2)
(cid:2)
(cid:3)
(cid:1)
t
0
0
-
rt
e
(1) 
Corollary. If nodes share a minimum temptation to cheat,  p/y
, 
the  discounted  time  needed  to  punish  cheating  increases  at  least 
exponentially in the length of the data path, n, 
(cid:1)
t
0
-
rt
en
(cid:13)‡
(cid:11)
(cid:12)
y
(cid:10)
(cid:8)
p
(cid:9)
n
(cid:1)
t
0
0
-
rt
e
(2) 
Since it is the discounted time that increases exponentially, the 
actual time increases faster than exponentially.  If n is so large that 
tn is undefined, the given path cannot be maintained in equilibrium. 
Proof. The proof proceeds by induction on the number of nodes on 
the equilibrium data path, n.  For 
, there is a single node, say i.  
By cheating, the node earns extra profit  (
.  If node i 
1=n
y p
i
i
-
e
rt
-
t
0
)(cid:1)
0
is then punished until time  1t , the extra profit must be cancelled out 
by  the  lost  profit  between  time  0t
  and  1t , 
t
-1
ep
i
(cid:1)
t
0
rt
.    A  little 
manipulation gives 
(cid:1)
t
1
0
- =
rt
e
y
i
p
i
(cid:1)
t
0
0
-
rt
e
, as required. 
1-n
1>n
, assume for induction that the claim holds for 
For 
.  The 
source does not know whether the cheater is the first hop, or after 
the first hop.  Because the source does not know the data path after 
the first hop, it is unable to punish nodes beyond it.  If it chooses a 
new first hop, it might not affect the rest of the data path.  Because 
of  this,  the  source  must  rely  on  the  first  hop  to  punish  cheating 
nodes farther along the path.  The first hop needs discounted time, 
(cid:7)
(cid:5)
(cid:5)
(cid:6)
the source must give the first hop this much discounted time in order 
to punish defectors further down the line (and the source will expect 
poor quality during this period). 
,  to  accomplish  this  by  assumption.    So 
(cid:213)
y
i
p
i
i
after 
(cid:4)
(cid:2)
(cid:2)
(cid:3)
first 
hop
(cid:1)
e
rt
-
0
t
0
Claim 1.  If the only monitors are E2E, ROP, and PRc, 
as 
, where n is the number of nodes on the data path. 
¥ﬁn
¥ﬁCI
Next,  the  source  must  be  protected  against  a  first  hop  that  cheats, 
and pretends that the problem is later in the path.  The first hop can 
do  this  for  the  full  discounted  time, 
(cid:7)
(cid:5)
(cid:5)
(cid:6)
(cid:213)
i
after 
first 
hop
y
i
p
i
(cid:4)
(cid:2)
(cid:2)
(cid:3)
(cid:1)
t
0
0
-
rt
e
,  so 
Available Bargain Path:  A competitive market exists for low-
cost transit, such that every node can route to the destination for 
no more than flow payment, 
lp . 
the source must punish the first hop long enough to remove the extra 
profit it can make.  Following the same argument as for 
, we 
can show that the full discounted time is 
which completes the proof.  (cid:2) 
(cid:7)
(cid:5)
(cid:5)
(cid:6)
(cid:213)
data
i
on 
path
y
i
p
i
1=n
(cid:4)
(cid:2)
(cid:2)
(cid:3)
(cid:1)
0
t
0
-
rt
, 
e
The  above  lemma  and  its  corollary  show  that  punishing  cheaters 
becomes more and more difficult as the data path grows long, until 
doing so is impossible.  To capture some intuition behind this result, 
imagine that you are an end user, and you notice a sudden drop in 
service  quality.    If  your  data  only  travels  through  your  access 
provider,  you  know  it  is  that  provider’s  fault.    You  can  therefore 
take  your  business  elsewhere,  at  least  for  some  time.    This  threat 
should motivate your provider to maintain high quality. 
Suppose, on the other hand, that your data traverses two providers.  
When you complain to your ISP, he responds, “yes, we know your 
quality went down, but it’s not our fault, it’s the next ISP.  Give us 
some time to punish them and then normal quality will resume.”  If 
your  access  provider  is  telling  the  truth,  you  will  want  to  listen, 
since  switching  access  providers  may  not  even  route  around  the 
actual offender.  Thus, you will have to accept lower quality service 
for some longer time.  On the other hand, you may want to punish 
your access provider as well, in case he is lying.  This means you 
have  to  wait  longer  to  resume  normal  service.    As  more  ISPs  are 
added to the path, the time increases in a recursive fashion. 
With this lemma in hand, we can return to prove Claim 1. 
Proof of Claim 1.  Fix an equilibrium data path of length n.  Label 
the path nodes 1,2,…,n.  For each node i, let i’s quality premium be 
d
.  Then we have, 
p
p
=
+ -
1
i
'1
+
i
i
I
C
=
1
n
n
(cid:14)
=
i
1
p
i
--
c
i
d
i
p
i
+
1
=
=
1
n
n
(cid:14)
=
i
1
(cid:7)
(cid:5)
(cid:6)
p
i
p
i
--
c
i
--
c
i
'
p
+
i
1
p
+
i
1
-
(cid:4)