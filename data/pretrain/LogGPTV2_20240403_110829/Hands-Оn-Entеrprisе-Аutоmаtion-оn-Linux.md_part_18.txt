[ 179 ]
Configuration Management with Ansible Chapter 7
Before we build on this example, a note on package removal. Ansible tasks are, as we have
discussed previously, idempotent. For example, if we run our playbook a second time, we
will see that the results returned are all ok. In the following instance, Ansible has detected
that our chosen packages are already installed, and doesn't attempt a second installation:
However, what if you need to tidy something up? Perhaps a package that features in the
standard image has become obsolete or needs removing, for security reasons. In this
instance, it is not sufficient simply to remove the playbook or role. While the presence of
our example role ensures the installation of packages, the removal of the role does not
reverse this. In short, we must manually uninstall or remove changes if they are not
required. Backing out of our installation would require a role such as this:
---
- name: Uninstall MariaDB Server on Ubuntu or Debian
apt:
name: "{{ item }}"
state: absent
loop:
- mariadb-server
- mariadb-client
when: ansible_distribution == 'Debian' or ansible_distribution ==
'Ubuntu'
[ 180 ]
Configuration Management with Ansible Chapter 7
- name: Uninstall MariaDB Server on CentOS or RHEL
yum:
name: "{{ item }}"
state: absent
loop:
- mariadb-server
- mariadb
when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red
Hat Enterprise Linux'
Notice the almost identical nature of the role, except that we are now using state:
absent instead of state: present. This is common to most Ansible tasks you might
run—if you want to define a procedure for backing out or otherwise reverting a change,
you will need to write that separately. Now, when we run the preceding role by calling it
from a suitable playbook, we can see that the packages are cleanly uninstalled, as shown in
the following screenshot:
Sometimes, of course, the packages we want to install are not available as part of the
default operating system package repositories.
In the next section, we will look at how to handle this in accordance with the automation
principles we have set out so far.
[ 181 ]
Configuration Management with Ansible Chapter 7
Installing non-native packages
Thankfully, the installation of non-native packages is not significantly more difficult with
Ansible than with native ones. Ideally, in an enterprise environment, all required packages
would be served out of an internal repository, and indeed, we will cover this later in the
book. In this instance, the enterprise repository would be used in conjunction with Ansible
roles, such as those from the previous section.
Occasionally, though, this may not be possible, or desirable. Take, for instance, a
development or test system where a new package is being evaluated—here, you would
probably not want to upload a test package to an enterprise repository server when it is not
known whether there will be a requirement for the package moving forward. Nonetheless,
we wish to adhere to our principles of automation and ensure that we perform our testing
in a repeatable, self-documenting manner.
Suppose you are evaluating the Duplicati backup software for your enterprise and need to
install the latest beta version to perform some testing. Obviously, you could download this
manually from their releases page, copy it across to your target server, and install it by
hand. However, this is inefficient, and certainly not a repeatable process. Luckily,
the apt and yum modules we used earlier support the installation of packages, both from a
local path and a remote URL.
Thus, to test the installation of Duplicati beta version 2.0.4.23, you could write a role such as
this:
---
- name: Install Duplicati beta on Ubuntu
apt:
deb:
https://github.com/duplicati/duplicati/releases/download/v2.0.4.23-2.0.4.23
_beta_2019-07-14/duplicati_2.0.4.23-1_all.deb
when: ansible_distribution == 'Debian' or ansible_distribution ==
'Ubuntu'
- name: Install Duplicati beta on CentOS or RHEL
yum:
name:
https://github.com/duplicati/duplicati/releases/download/v2.0.4.23-2.0.4.23
_beta_2019-07-14/duplicati-2.0.4.23-2.0.4.23_beta_20190714.noarch.rpm
state: present
when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red
Hat Enterprise Linux'
[ 182 ]
Configuration Management with Ansible Chapter 7
As you can see from this role, the installation proceeds without needing to separately
download the package first, as shown in the following screenshot:
Thus, in this way, whether for testing or production purposes, you can install packages that
are not available in the default package repositories of your chosen operating system, and
maintain the benefits of automation. In the next section, we will explore how Ansible can
install software that is not packaged at all and that requires manual installation.
Installing unpackaged software
Some software, of course, doesn't come neatly packaged and requires a more manual
approach to installation. Take, for example, the hosting control panel software Virtualmin.
This, at the time of writing, normally requires the user to download a shell script and
execute it to perform the installation.
Fortunately, once again, Ansible can help here—consider the following role:
---
- name: download virtualmin install script
get_url:
url: http://software.virtualmin.com/gpl/scripts/install.sh
dest: /root/install.sh
mode: 0755
- name: virtualmin install (takes around 10 mins) you can see progress
using: tail -f /root/virtualmin-install.log
shell: /root/install.sh --force --hostname {{ inventory_hostname }} --
[ 183 ]
Configuration Management with Ansible Chapter 7
minimal --yes
args:
chdir: /root
Here, we are making use of the Ansible get_url module to download the installation
script and then using the shell module to run it. Notice also how we can put helpful
instructions into the task names—although no substitute for good documentation, this is
incredibly helpful as it tells anyone running the script how to check on the progress of the
installation using the tail command.
Note that the shell module requires some care in its use—as it cannot
possibly know whether the shell task you have given it has been run
before, it runs the command every time the playbook is run. Thus, if you
run the preceding role a second time, it will attempt to install Virtualmin
again. You should use a when clause under your shell task to ensure it
only runs under certain conditions—perhaps in the preceding example,
when /usr/sbin/virtualmin (which is installed by install.sh) is not
present.
This method could be extended to almost any software you can imagine—you could even
download a source code tarball and extract it and build the code using a series of shell
module calls in Ansible. This is an unlikely case, of course, but the emphasis here is that
Ansible can help you create repeatable installations, even if you don't have access to pre-
packaged software in an RPM or DEB format.
In this manner, almost any software can be installed—after all, the process of software
installation is to download a file (or archive), put it into the right location, and configure it.
This is, in essence, what package managers such as yum and apt are doing behind the
scenes, and Ansible can handle this kind of activity just as well, as we have demonstrated
here. In the next section, we will explore the use of Ansible to make configuration changes
on systems on which you have built and/or installed software.
Making configuration changes with Ansible
When it comes to configuring a new service, the task is rarely completed by simply
installing the required software. There is almost always a configuration stage required after
the installation.
Let's consider in detail some fundamental examples of the myriad of configuration changes
that might be required.
[ 184 ]
Configuration Management with Ansible Chapter 7
Making small configuration changes with Ansible
When it comes to making configuration changes, the lineinfile Ansible module is often
your first port of call and can handle a lot of the small-scale changes that might be required.
Consider the example of deploying a MariaDB server that we started earlier in this chapter.
Although we successfully installed the packages, they will have been installed with their
default configuration, and this is unlikely to suit all but the most basic of use cases.
For example, the default bind address for the MariaDB server is 127.0.0.1, meaning that
it is not possible to make use of our MariaDB installation from an external application. We
have well established the need to make changes in a reliable, repeatable manner, so let's
take a look at how we might change this using Ansible.
In order to change this configuration, the first thing we need to do is establish where the
default configuration is located and what it looks like. From here, we will define an Ansible
task, to rewrite the configuration.
Taking our Ubuntu server by way of example, the service bind-address is configured in the
/etc/mysql/mariadb.conf.d/50-server.cnf file—the default directive looks like this:
bind-address = 127.0.0.1
Thus, in order to change this, we might employ a simple role, like this:
---
- name: Reconfigure MariaDB Server to listen for external connections
lineinfile:
path: /etc/mysql/mariadb.conf.d/50-server.cnf
regexp: '^bind-address\s+='
line: 'bind-address = 0.0.0.0'
insertafter: '^\[mysqld\]'
state: present
- name: Restart MariaDB to pick up configuration changes
service:
name: mariadb
state: restarted
Let's break the lineinfile task down and look at it in more detail:
path: Tells the module which configuration file to modify.
regexp: Used to locate an existing line to modify if there is one so that we don't
end up with two conflicting bind-address directives.
line: The line to replace/insert into the configuration file.
[ 185 ]
Configuration Management with Ansible Chapter 7
insertafter: If the regexp is not matched (that is, the line is not present in the
file), this directive ensures that the lineinfile module inserts a new line after
the [mysqld] statement, thus ensuring it is in the correct part of the file.
state: Setting this to present state ensures that the line is present in the file,
even if the original regexp is not matched—in this instance, a line is added to the
file in accordance with the value of line.
Following on from this modification, we know that the MariaDB server will not pick up
any configuration changes unless we restart it, so we do exactly that at the end of the role.
Now, if we run this, we can see that it has the desired effect, as shown in the following
screenshot:
For simple configuration adjustments such as this, on a small number of systems, this
achieves exactly the result that we desire. There are, however, drawbacks to this approach
that need to be addressed, especially when it comes to not just the point in time where the
change is made, but also to the long-term integrity of the system. Even with the best
automation strategies in the world, someone making manual changes can remove the
consistency and standardization that is core to good automation practice, and hence there is
a real need to ensure that future playbook runs will still yield the desired end result. We
will explore this issue in the next section.
[ 186 ]
Configuration Management with Ansible Chapter 7
Maintaining configuration integrity
The issue with making changes in this manner is that they do not scale well. Tuning a
MariaDB server for a production workload often requires setting perhaps half a dozen, or
more, parameters. Thus, that simple role that we wrote previously could well grow to
become a tangle of regular expressions and directives that are difficult to decipher, let alone
manage.
Regular expressions themselves are not foolproof and are only as good as they are written
to be. In our previous example, we used the following line to look for the bind-address
directive, with a view to changing it. The regular expression ^bind-address\s+= means
to look for lines in the file that have the following:
Have the bind-address literal string at the start of the line (denoted by the ^)
Have one or more spaces after the bind-address literal string
Have a = sign after these spaces
The idea behind this regular expression is to ensure that we ignore comments such as the
following one:
#bind-address = 0.0.0.0
However, MariaDB is quite tolerant of whitespace in its configuration files, and the regular
expression we have defined here will fail to match the following permutations of this line,
all of which are equally valid:
bind-address=127.0.0.1
bind-address = 127.0.0.1
In these instances, since the regexp parameter didn't match, our role will add a new line to
the configuration file with the bind-address = 0.0.0.0 directive. As MariaDB treats the
preceding examples as valid configuration, we end up with two configuration directives in
the file which, may well give you unexpected results. Different software packages will
handle this differently too, adding to the confusion. There are other complexities to
consider too. Many Linux services feature highly complex configurations that are often
broken down across multiple files to make them easier to manage. The documentation that
comes with the native MariaDB server package on our test Ubuntu system states the
following:
# The MariaDB/MySQL tools read configuration files in the following order:
# 1. "/etc/mysql/mariadb.cnf" (this file) to set global defaults,
# 2. "/etc/mysql/conf.d/*.cnf" to set global options.
# 3. "/etc/mysql/mariadb.conf.d/*.cnf" to set MariaDB-only options.
# 4. "~/.my.cnf" to set user-specific options.
[ 187 ]
Configuration Management with Ansible Chapter 7
However, this configuration order is dictated by
the /etc/mysql/mariadb.cnf file, which at the bottom has directives to include the files
listed on lines 2 and 3 in the preceding code block. It is entirely possible for someone (well-
meaning or otherwise) to simply come along and
overwrite /etc/mysql/mariadb.cnf with a new version that removes the include
statements for these subdirectories, and instead includes the following:
[mysqld]
bind-address = 127.0.0.1
As our role that makes use of lineinfile is completely unaware of this file, it will
faithfully set the parameter in /etc/mysql/mariadb.conf.d/50-server.cnf, without
understanding that this configuration file is no longer being referenced, and again, the
results on the server will—at best—be unpredictable.
While the goal of enterprise automation is that all systems should have their changes
managed centrally with a tool such as Ansible, the reality is that you cannot always
guarantee that this will occur. Occasionally, things will break, and people who are in a
hurry to fix them may be forced to bypass processes to save time. Equally, new staff
members who are unfamiliar with systems may make changes in a manner such as we have
suggested here.
Alternatively, take—for example—our proposed SSH daemon configuration from Chapter
5, Using Ansible to Build Virtual Machine Templates for Deployment. Here, we proposed a
simple role (shown again in the following code block, for reference) that would disable root
logins over SSH, one of a number of recommended security parameters for the SSH
daemon:
---
- name: Disable root logins over SSH
lineinfile:
dest: /etc/ssh/sshd_config
regexp: "^PermitRootLogin"
line: "PermitRootLogin no"
state: present
Note that our regexp has the same weaknesses as our other role when it comes to
whitespace. When sshd has two duplicate parameters in its configuration file, it takes the
first value as the correct one. Thus, if I knew that the role listed in the previous code block
was being run against a system, all I would have to do is put these lines at the very top
of /etc/ssh/sshd_config:
# Override Ansible roles
PermitRootLogin yes
[ 188 ]
Configuration Management with Ansible Chapter 7
Thus, our Ansible role will run faithfully against this server and report that it has
successfully managed the SSH daemon configuration, while in reality, we have overridden
it and enabled root logins.
These examples show us two things. First of all, be very careful when working with regular
expressions. The more thorough you can be, especially when dealing with whitespace, the
better. Obviously, in an ideal world, this would not even be necessary, but unexpected
changes such as this have brought down many systems. To prevent the preceding SSH
daemon example from being possible, we might try the following regular expression:
^\s*PermitRootLogin\s+
This will take account of zero or more spaces before the PermitRootLogin keyword, and
then take account of one or more spaces afterward, all while taking account of the
whitespace tolerance built into sshd. However, regular expressions are very literal, and we
haven't even taken account of tabs yet!
Ultimately, this brings us to the second factor demonstrated through these examples—that
to maintain configuration and, hence, system integrity at enterprise scale, and ensure that
you have a high degree of confidence in both your automation and the systems it produces,
another approach might be required for configuration management. This is exactly what
we go on to explore in the next section—techniques for reliably managing configuration at
large, enterprise scales.
Managing configuration at an enterprise
scale
Clearly, from these examples, another approach is required for the management of
configuration at an enterprise scale. There is nothing wrong with
the lineinfile approach we discussed previously when it comes to making small
numbers of changes in a well-controlled environment, yet let us consider a more robust
approach to configuration management, better suited to a large organization.
We will start by considering scalable methods for simple static configuration changes (that
is, those that are the same across all servers) in the next section.
[ 189 ]
Configuration Management with Ansible Chapter 7