### Comparison of ReDoSHunter with Baselines

ReDoSHunter outperforms all baselines in terms of both the number of detected vulnerabilities and the false positive (FP) rate. Specifically, ReDoSHunter achieved a relatively high number of true positives (TPs), up to 10,233, compared to the zero false negatives (FNs) reported by some baselines. The FP count for the baselines ranged from 0 to 2,348, with an average of 379.42 ((5 + 288 + 13 + 2348 + 2 + 0 + 0) / 7 = 379.42). Some baselines, such as SDL, had no FPs but at the cost of a high FN rate, leading to poor recall (e.g., 1.08% for SDL). The experimental results show that ReDoSHunter can detect significantly more vulnerabilities with higher precision.

### Effectiveness Analysis

To further evaluate the effectiveness of ReDoSHunter, we analyzed the vulnerabilities commonly detected by each tool. As shown in Figure 6 (Venn diagram), the total number of vulnerabilities detected by all baselines is still less than that of ReDoSHunter (indicated in yellow). Additionally, ReDoSHunter uniquely identified 4,487 ReDoS vulnerabilities, whereas no baseline could uniquely detect any vulnerabilities. These results demonstrate that ReDoSHunter is significantly more effective than all baselines in detecting ReDoS vulnerabilities.

#### Figure 6: Effectiveness of ReDoSHunter in Java-8
- **Left-hand side bar chart**: Total number of ReDoS-vulnerabilities detected by each tool.
- **Venn diagrams**: Intersection of detected vulnerabilities.
- **Right-hand side vertical bar charts**: Number of ReDoS-vulnerabilities (upper chart) and unique detections (lower chart with lined dots).

### Evaluation on Different Regex Engines

Some regular expressions (regexes) may not be ReDoS-vulnerable in specific engines due to implementation optimizations. For example, the regex `([0-9]*)+(\.[0-9]+)+` is ReDoS-vulnerable in Python 2/3, Java-8, and Node.js 4-16, but not in Java-13. We evaluated the tools across multiple regex engines (Python 2/3, Java 7-15, Node.js 6-14) for TP, FP, FN, precision, and recall. 

The precision and recall of baselines varied across engines. For instance, NFAA achieved 98.68% precision on Java-8 but only 85.22% on Node.js-14. In contrast, ReDoSHunter consistently achieved 100% precision and recall across all engines, demonstrating its robustness. The number of detected vulnerabilities also indicated that the Java-8 engine is the least optimized, with all eight techniques detecting the most vulnerabilities on this engine.

### Multiple Vulnerabilities in One Regex

Our observations indicate that a single ReDoS-vulnerable regex often contains more than one vulnerability. Figure 7 summarizes the distribution of different numbers of vulnerabilities in ReDoS-vulnerable regexes detected by ReDoSHunter. Over half (66.4% and 60.4%) of the vulnerable regexes in the RegExLib and Snort datasets contained more than one ReDoS-vulnerability. Existing tools often overlook this, making it crucial to develop tools like ReDoSHunter that can identify multiple vulnerabilities in a single regex.

#### Figure 7: Distribution of ReDoS-Vulnerabilities in Regexes Detected by ReDoSHunter in Java-8

### Efficiency

Figure 8 compares the efficiency of different tools. Static methods are generally faster, processing a regex in less than one second, while dynamic methods take about one minute. ReDoSHunter has a comparable running time to static methods, taking around 1.06 seconds per regex, and outperforms dynamic methods (up to 54.15 seconds). Given the significantly higher number of vulnerabilities detected, ReDoSHunter is highly efficient.

#### Figure 8: Running Time and Number of ReDoS-Vulnerable Regexes Detected

### Effectiveness of Generated Attack Strings

We evaluated the effectiveness of attack strings generated by each tool in terms of the success attack rate (successful attacks over TPs). Table 9 shows the results. For example, in Java-8, the success rates for existing tools ranged from 56.25% to 96.81%, with none achieving 100%. ReDoSHunter, however, consistently achieved a 100% success rate.

#### Table 9: Effectiveness of Generated Attack Strings
- **Java-8**: RXXR2 (67.86%), NFAA (74.26%), SDL (56.25%), ReScue (96.81%), ReDoSHunter (100.00%)
- **Java-13**: RXXR2 (52.78%), NFAA (75.52%), SDL (33.88%), ReScue (92.57%), ReDoSHunter (100.00%)
- **Python-3.7**: RXXR2 (60.56%), NFAA (60.56%), SDL (55.10%), ReScue (83.80%), ReDoSHunter (100.00%)
- **Node.js-14**: RXXR2 (64.84%), NFAA (58.91%), SDL (45.10%), ReScue (91.47%), ReDoSHunter (100.00%)

These results highlight the superior performance and reliability of ReDoSHunter in generating effective attack strings.