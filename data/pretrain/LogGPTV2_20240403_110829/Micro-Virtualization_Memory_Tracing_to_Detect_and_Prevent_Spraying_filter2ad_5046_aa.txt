# Micro-Virtualization Memory Tracing to Detect and Prevent Spraying Attacks

**Authors:**
- Stefano Cristalli, University of Milan
- Mattia Pagnozzi, University of Milan
- Mariano Graziano, Cisco Systems Inc.
- Andrea Lanzi, University of Milan
- Davide Balzarotti, Eurecom

**Publication:**
- [Proceedings of the 25th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/stefano)
- August 10–12, 2016, Austin, TX
- ISBN 978-1-931971-32-4
- Open access sponsored by USENIX

## Abstract

Spraying is a common payload delivery technique used by attackers to execute arbitrary code in the presence of Address Space Layout Randomization (ASLR). In this paper, we present Graffiti, an efficient hypervisor-based memory analysis framework for the detection and prevention of spraying attacks. Compared to previous solutions, our system is the first to offer an efficient, complete, extensible, and OS-independent protection against all known spraying techniques. We developed an open-source prototype based on our approach and thoroughly evaluated it against all known variations of spraying attacks on Linux and Microsoft Windows. Our tool can be applied out-of-the-box to protect any application, and its overhead can be tuned according to the application behavior and the desired level of protection.

## 1. Introduction

Memory corruption vulnerabilities are currently one of the biggest threats to software and information security. Education plays a crucial role in making programmers aware of common threats and teaching them how to avoid mistakes that may lead to exploitable bugs. However, education alone is not enough; a robust defense-in-depth approach requires multiple layers of mitigation, detection, and exploit prevention mechanisms.

Over the past decade, we have witnessed a constant arms race between system designers and attackers. The former have introduced many new security features to increase the complexity of exploiting memory corruption vulnerabilities, including stack canaries, Data Execution Prevention (DEP), ASLR, Structured Exception Handling Overwrite Protection (SEHOP), and Control Flow Integrity (CFI). Despite these advancements, attackers have consistently found ways to overcome these protections.

ASLR is one of the most common and successful techniques adopted by modern operating systems. It randomizes the layout of process memory, making it much harder for attackers to predict where a certain buffer or code gadget will be located at runtime. Unfortunately, attackers have found a simple and effective solution: filling the memory with tens of thousands of identical copies of malicious code and then jumping to a random page, hoping to land in one of the pre-loaded areas. This technique, called spraying, is a key element in many recent memory corruption exploits.

Researchers have proposed several solutions to mitigate spraying, but these have been limited to specific applications, memory allocators, operating systems, and types of heap spraying. This makes them difficult to port and unable to cope with all possible variations of spraying attacks. In this paper, we present Graffiti, a hypervisor-based solution for the detection and prevention of all known variations of spraying attacks. Our system is modular, efficient, and OS-agnostic, offering a comprehensive and portable solution.

Graffiti leverages a novel micro-virtualization technique to monitor memory allocations of arbitrary applications. It includes a set of plugins to detect suspicious patterns in real-time. Our experiments, conducted on both Linux and Microsoft Windows, show that Graffiti has no false negatives and low false positives, with an overhead similar to previous, more limited solutions.

**Contributions:**
- We present the principles, design, and implementation of an effective real-time memory analysis framework. We developed heuristics to detect existing heap spraying techniques, providing a general, efficient, and comprehensive solution applicable to all modern operating systems and applications.
- We propose a novel micro-virtualization technique that allows Graffiti to monitor the entire system with low overhead.
- We developed a prototype tool and performed an experimental evaluation on several real-world spraying techniques, demonstrating that the system can detect all classes of analyzed spraying attacks with low false positives and acceptable performance.
- We released the source code of the current Graffiti prototype, available at [GitHub](https://github.com/graffiti-hypervisor/graffiti-hypervisor).

The rest of the paper is organized as follows:
- Section 2 provides background information on spraying attacks.
- Section 3 introduces preliminary concepts related to Intel VT-x technology.
- Sections 4, 5, and 6 describe our solution from an architectural perspective.
- Section 7 reports the results of evaluating Graffiti.
- Section 8 discusses the security evaluation of our system.
- Section 9 compares our work with other relevant research.
- Section 10 discusses future directions and concludes the paper.

## 2. Spraying Attacks

Heap spraying is a payload delivery technique first publicly used in 2001 in the telnetd remote root exploit and the eEye’s ISS AD20010618 exploit. It became popular in 2004 as a way to circumvent ASLR in exploits against Internet Explorer. Since then, spraying attacks have evolved and become more reliable, thanks to improvements in precise heap manipulation.

Spraying can be classified into two main categories based on the target machine's protection mechanisms: Code Spraying and Data Spraying. If DEP is not enabled, the attacker can directly spray malicious code (e.g., shellcode) into the victim process memory. When DEP is enabled, the attacker must either use components not subjected to DEP (e.g., JITs) or inject data that points to Return-Oriented Programming (ROP) gadgets.

### 2.1 Memory Footprint

A characteristic of heap spraying is the large amount of memory suddenly allocated by a process. A simple approach to detect such attacks might measure the speed of memory allocation and the average amount of memory usually allocated by the application. However, our experiments show that this approach is insufficient. An attacker can tune the memory allocation behavior of an exploit to mimic that of a normal application, making it difficult to detect using only these parameters.

In our tests, we used a classic heap spray attack against Internet Explorer 8 (CVE-2011-1996) as a case study. We measured the memory allocation curve while visiting a small set of web sites and compared it to the allocation curve of the exploit. The exploit produced a significant memory allocation in a short period, which dropped after the exploit's success. However, by modifying the exploit to reduce the amount of sprayed memory and introducing delays, the attacker could mimic the behavior of a benign application, making detection challenging.

This conclusion motivated our further investigation into designing a better memory monitoring and spraying attack detection technique.

## 3. Preliminary Notions on Intel VT-x

Before discussing our solution, we briefly introduce some virtualization concepts. Intel VT-x is a technology available in various Intel CPUs to support virtualization. VT-x defines two transitions: `vmexit` to move from the guest to the hypervisor, and `vmentry` to move in the opposite direction. These transitions enable the hypervisor to manage and monitor the execution of the guest, which is essential for our solution.