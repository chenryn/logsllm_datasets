### University Campus as the Victim Client

**Victim Server:**
- A virtual machine running FreeBSD OS, hosted on a different Ubuntu 14.04 machine.

**Attack Machine:**
- A Ubuntu 16.04 host located on the same campus.

### Attack Process
The attack process involves the following steps:

1. **Synchronize Machine Times:**
   - Synchronize the system times between the attacker and the server to ensure accurate timing of packets.

2. **Port Number Guessing:**
   - Send both spoofed and unspoofed ACK packets to linearly guess a port number range based on the number of RST (Reset) packets received.
   - The attacker can guess 200 different port numbers in one second using spoofed packets. If this limit is exceeded, the reset counter will be reached, preventing further guesses.

3. **Binary Search for Specific Port:**
   - Given a port number range, use a binary search algorithm to locate the specific port number.
   - The guessing starts from the Ephemeral port range and then proceeds to the remainder of the port range.

**Experimental Results:**
- The experiment shows that inferring the correct port number is achievable within an average time of 73 seconds with a 100% success rate.

### Related Work

#### TCP Side Channel Attacks
In the past decade, researchers have manually discovered several TCP side channels. These side channels can be exploited for:
1. **TCP Inference Attacks:**
   - Leading to connection hijacking and injection of malicious data [7, 11, 18, 37, 38].
2. **Host Attribute Measurement:**
   - Measuring host attributes without exposing the attackerâ€™s IP address, such as performing an idle port scan [16] or measuring the Round-Trip Time (RTT) between two hosts [1].

These attacks can be categorized into four types of side-channel vulnerabilities:
1. **Shared Rate Limit:**
   - Shared across the victim and an off-path attacker, such as the IPID counter [4, 10, 18, 35, 39, 49], the challenge ACK rate limit [7], the reset rate limit, and the shared SYN backlog queue limit [1, 16].
2. **System-Wide Packet Counter:**
   - A global packet counter shared across the system [37, 38].
3. **Wireless Link:**
   - Information leakage due to wireless contention [11] (timing-based side channel).
4. **Browser Implementation Features:**
   - Per destination port-counter and FIFO HTTP request queue causing information leaks [19].

While most side-channels are discovered manually by domain experts, SCENT aims to automate the discovery in a principled way. Our evaluation shows that SCENT can detect both new and known side-channels.

#### Side Channel Detection
Most previous side-channel vulnerabilities have been discovered manually. However, some tools have been proposed for automated detection. For example, [9] uses static taint analysis to discover system-wide TCP packet counter side-channel vulnerabilities. Static taint analysis can guarantee finding all true violations but suffers from high false positives. SCENT avoids high false positives by relying on the non-interference property and can detect side-channels caused by different shared variables. Other efforts related to detecting different types of side-channels are orthogonal to our work [5, 44].

#### Program Analysis and Testing
Several efforts use program analysis (e.g., static and dynamic analysis) to find bugs or other types of attacks in TCP implementations [26, 28]. These are orthogonal to our work and address significantly different problems.

Model checking and formal verification have been used to analyze the robustness of TCP implementations [17, 33], but their objectives are significantly different. SCENT uses automated downscaling to improve the effectiveness of model checking.

Bounded model checking [14, 29, 31] and bounded testing [32] are also relevant. Bounded testing does not require additional modifications to the target program, while model checking usually requires generating a model amenable to the model checker. By avoiding redundant states, a model checker can help explore a larger input space.

Program transformation has been used to assist testing using fuzzing to patch hard-to-hit branches (like checksum checks) to improve code coverage [27, 36, 45]. In contrast, SCENT tries to coerce both true and false paths to be visited, and most target branches have simple constraints. Additionally, SCENT changes internal states instead of "disabling" the branch.

### Conclusions
In this paper, we address the challenging problem of developing a principled approach to discovering hard-to-find TCP side-channels. We use model checking to find violations of the non-interference property between simultaneous TCP connections, which is a precursor to exploitable side channels. Our main contribution is the development of SCENT, a tool that addresses two key challenges in making model checking amenable to our goal:
1. **Pruning Irrelevant Parts:**
   - Making a TCP code base self-contained by pruning irrelevant parts.
2. **Downscaling:**
   - Systematically downscaling both the input space and the model state space through principled program transformations.

We use the counter-examples generated by the transformed model checker in SCENT to discover 12 new side channels and validate all previously discovered ones. In this work, we focus on side channels that facilitate the inference of specific secret attributes (e.g., SEQ number). Future work will expand our threat model to include other types of vulnerabilities (e.g., idle port scans) and more scenarios (e.g., attackers sending packets to both the client and the server and/or with different operating systems).

### Acknowledgments
This research was partially sponsored by the U.S. Army Combat Capabilities Development Command Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Combat Capabilities Development Command Army Research Laboratory or the U.S. Government. The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation hereon. It was also partially supported by the NSF grant 1652954.

### References
[References listed in the original text are preserved and formatted for clarity.]

This version of the text is more structured, clear, and professional, with improved readability and coherence.