university campus as the victim client. The victim server is a virtual
machine running FreeBSD OS from a dierent Ubuntu 14.04 host.
The attack machine is a Ubuntu 16.04 host on the same campus.
The steps in the attack process are listed below:
(1) Synchronize machine times between attacker and server;
(2) Send spoofed and unspoofed ACK packets to linearly guess a
port number range based on the number of RST packets re-
ceived;
(3) Given a port number range, use binary search to locate the
specic port number.
The attacker can guess 200 dierent port numbers (via spoofed
packets) in one second; otherwise, spoofed packets will always
reach the reset counter limit. The attacker can guess the port num-
ber starting from the Ephemeral port range [15], and then guess
the remainder of the port range. Our experiment shows that this
attack of inferring a correct port number is achievable within an
average time of 73 seconds with a 100% success rate.
10 RELATED WORK
TCP side channel attacks. In the last decade, several TCP side
channels have been manually found by researchers. These side
channels can be utilized to (1) cause a TCP inference attack [7, 11,
18, 37, 38], which in turn can lead to a hijack of the connection
and injection of malicious data; (2) measure host attributes without
exposing the attacker’s IP address (examples include performing an
idle port scan [16] or measuring the RTT between two hosts [1]).
Roughly these distinct attacks can be mapped onto the exploita-
tion of four categories of side-channel vulnerabilities: (1) Shared
rate limit: these side-channels relate to a rate limit that is shared
across the victim and an o-path attacker connection, such as IPID
counter [4, 10, 18, 35, 39, 49], the challenge ACK rate limit [7], the
reset rate limit and the shared SYN backlog queue limit [1, 16]. (2)
System-wide packet counter: As the name suggests a packet counter
is shared globally in these cases [37, 38]. (3) Wireless link: Wire-
less contention results in information leakage in these cases [11]
(timing-based side channel). (4) Browser implementation’s feature:
A per destination port-counter and a FIFO HTTP request queue
cause information leaks [19].
While most of these side-channels are discovered manual by do-
main experts, SCENT aims to automate the discovery in a principled
way. Our evaluation shows that SCENT indeed can detected (both
new and known) side-channels.
Side channel detection. Most previous side-channel vulnerabili-
ties have been discovered manually (e.g., using domain expertise).
However, a few side-channel detection tools have been proposed.
[9] uses static taint analysis to discover system-wide TCP packet
counter side-channel vulnerabilities. Generally, static taint analy-
sis can be guaranteed to nd all true violations, but suers from
high false positives. By relying on violation of the non-interference
property, SCENT can avoid high false positives and can detect side-
channels caused by dierent shared variables. There are also several
eorts relating to the detection of other types of side-channels but
these are orthogonal to our work [5, 44].
Program analysis and testing. There are also several eorts
that use program analysis (e.g., static and/or dynamic analysis) to
nd bugs or other types of attacks in TCP implementations [26, 28].
These are orthogonal to our work and address signicantly dierent
problems.
Model checking and formal verication have been used to an-
alyze the robustness of TCP implementations [17, 33]; however,
their objectives are signciantly dierent. More importantly, SCENT
uses automated downscaling to improve the eectivenss of model
checking.
Besides bounded module checking [14, 29, 31], one could also
do bounded testing [32]. The advantage of bounded testing is that
it does not require additional modication to the target program,
while model checking usually requires generating a model amenable
to the model checker. However, as shown in our evaluations, by
avoiding redundant states, a model checker can help explore a
larger input space.
Program transformation has been used to assist testing using
fuzzing to patch hard-to-ip branches (like checksum checks) as
a way of improving code coverage [27, 36, 45]. In contrast, SCENT
tries to coerce both true and false path to be visited and most of
the target branches (Table 3 column 3) have simple constraints. In
addition, SCENT changes the internal states instead of “disabling”
the branch.
11 CONCLUSIONS
In this paper, we consider the challenging problem of developing a
principled approach to discovering hard-to-nd TCP side-channels.
We use model checking as a basis for nding violations of the
non-interference property between simultaneous TCP connections,
which we argue is a precursor to exploitable side channels. As
our main contribution, we build a tool SCENT that achieves our
goal by addressing two hard challenges in making model check-
ing amenable to our goal namely, (a) making a TCP code base
self contained after pruning irrelevant parts and (b) systematically
downscaling both the input space and the model state space by
means of principled program transformations. We use the counter-
examples generated by the transformed model checker in SCENT
to discover 12 new side channels and also validate all previously
discovered ones. In this work, we limit ourselves to side channels
that facilitate the inference of a specic set of secret attributes (e.g.,
Figure 10: Number of testing iter-
ations versus number of incoming
packets
Figure 11: Timecost of one model
checking run versus number of in-
coming packets
Figure 12: Memory cost of one
model checking run versus number
of incoming packets
SEQ number); we will expand our threat model to nd other types
of vulnerabilities (e.g., idle port scans) and with more scenarios
(e.g., attacker can send packets to both the client and the server
and/or with dierent OSes) in the future.
ACKNOWLEDGMENTS
This research was partially sponsored by the U.S. Army Combat Ca-
pabilities Development Command Army Research Laboratory and
was accomplished under Cooperative Agreement Number W911NF-
13-2-0045 (ARL Cyber Security CRA). The views and conclusions
contained in this document are those of the authors and should not
be interpreted as representing the ocial policies, either expressed
or implied, of the Combat Capabilities Development Command
Army Research Laboratory or the U.S. Government. The U.S. Gov-
ernment is authorized to reproduce and distribute reprints for Gov-
ernment purposes notwithstanding any copyright notation here on.
It was also partially supported by the NSF grant 1652954.
REFERENCES
[1] Georey Alexander and Jedidiah R Crandall. 2015. O-path round trip time
measurement via TCP/IP side channels. In 2015 IEEE Conference on Computer
Communications (INFOCOM). IEEE, 1589–1597.
[2] Apache Geode Documentation [n. d.]. Disable TCP SYN Cookies. Retrieved
May 15, 2019 from https://geode.apache.org/docs/guide/14/managing/monitor_
tune/disabling_tcp_syn_cookies.html
[3] Thomas Ball and Sriram K. Rajamani. 2001. The SLAM Toolkit. In Computer
Aided Verication, Gérard Berry, Hubert Comon, and Alain Finkel (Eds.). Springer
Berlin Heidelberg, Berlin, Heidelberg, 260–264.
[4] Steven M Bellovin. 2002. A technique for counting NATted hosts. In Proceedings
of the 2nd ACM SIGCOMM Workshop on Internet measurment. ACM, 267–272.
[5] Robert Brotzman, Shen Liu, Danfeng Zhang, Gang Tan, and Mahmut Kandemir.
2019. CaSym: Cache aware symbolic execution for side channel detection and
mitigation. In CaSym: Cache Aware Symbolic Execution for Side Channel Detection
and Mitigation. IEEE, 0.
[6] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. 2008. KLEE: Unassisted and
Automatic Generation of High-Coverage Tests for Complex Systems Programs..
In OSDI, Vol. 8. 209–224.
[7] Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan Dao, Srikanth V. Krishnamurthy,
and Lisa M. Marvel. 2016. O-Path TCP Exploits: Global Rate Limit Consid-
ered Dangerous. In 25th USENIX Security Symposium (USENIX Security 16).
USENIX Association, Austin, TX, 209–225. https://www.usenix.org/conference/
usenixsecurity16/technical-sessions/presentation/cao
[8] Martim Carbone, Weidong Cui, Long Lu, Wenke Lee, Marcus Peinado, and Xuxian
Jiang. 2009. Mapping kernel objects to enable systematic integrity checking. In
Proceedings of the 16th ACM conference on Computer and communications security.
ACM, 555–565.
[9] Qi Alfred Chen, Zhiyun Qian, Yunhan Jack Jia, Yuru Shao, and Zhuoqing Mor-
ley Mao. 2015. Static detection of packet injection vulnerabilities: A case for
identifying attacker-controlled implicit information leaks. In Proceedings of the
22nd ACM SIGSAC Conference on Computer and Communications Security. ACM,
388–400.
[10] Weifeng Chen, Yong Huang, Bruno F Ribeiro, Kyoungwon Suh, Honggang Zhang,
Edmundo de Souza e Silva, Jim Kurose, and Don Towsley. 2005. Exploiting the
IPID eld to infer network path and end-system characteristics. In International
Workshop on Passive and Active Network Measurement. Springer, 108–120.
[11] Weiteng Chen and Zhiyun Qian. 2018. O-Path {TCP} Exploit: How Wireless
Routers Can Jeopardize Your Secrets. In 27th {USENIX} Security Symposium
({USENIX} Security 18). 1581–1598.
[12] Cisco [n. d.]. Defenses Against TCP SYN Flooding Attacks. Retrieved May 15,
2019 from https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/
back-issues/table-contents-34/syn-ooding-attacks.html
[13] Edmund M. Clarke and E. Allen Emerson. 1982. Design and synthesis of synchro-
nization skeletons using branching time temporal logic. In Logics of Programs,
Dexter Kozen (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 52–71.
[14] Lucas Cordeiro, Jeremy Morse, Denis Nicole, and Bernd Fischer. 2012. Context-
bounded model checking with ESBMC 1.17. In International Conference on Tools
and Algorithms for the Construction and Analysis of Systems. Springer, 534–537.
[15] Cymru [n. d.]. Ephemeral Source Port Selection Strategies. Retrieved May 15,
2019 from https://www.cymru.com/jtk/misc/ephemeralports.html
[16] Roya Ensa, Jong Chun Park, Deepak Kapur, and Jedidiah R. Crandall. 2010.
Idle Port Scanning and Non-interference Analysis of Network Protocol Stacks
Using Model Checking. In Proceedings of the 19th USENIX Conference on Security
(USENIX Security’10). USENIX Association, Berkeley, CA, USA, 17–17. http:
//dl.acm.org/citation.cfm?id=1929820.1929843
[17] Paul Fiterău-Broştean, Ramon Janssen, and Frits Vaandrager. 2016. Combin-
ing model learning and model checking to analyze TCP implementations. In
International Conference on Computer Aided Verication. Springer, 454–471.
[18] Yossi Gilad and Amir Herzberg. 2012. O-Path Attacking the Web.. In WOOT.
41–52.
[19] Yossi Gilad and Amir Herzberg. 2013. When tolerance causes weakness: the case
of injection-friendly browsers. In Proceedings of the 22nd international conference
on World Wide Web. ACM, 435–446.
[20] Patrice Godefroid. 1997. Model Checking for Programming Languages Using
VeriSoft. In Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on Princi-
ples of Programming Languages (POPL ’97). ACM, New York, NY, USA, 174–186.
https://doi.org/10.1145/263699.263717
[21] J. A. Goguen and J. Meseguer. 1982. Security Policies and Security Models. In
1982 IEEE Symposium on Security and Privacy. 11–11. https://doi.org/10.1109/SP.
1982.10014
[22] Thomas A. Henzinger, Ranjit Jhala, Rupak Majumdar, and Grégoire Sutre. 2003.
Software Verication with BLAST. In Proceedings of the 10th International Confer-
ence on Model Checking Software (SPIN’03). Springer-Verlag, Berlin, Heidelberg,
235–239. http://dl.acm.org/citation.cfm?id=1767111.1767128
[23] Gerard J. Holzmann. 1997. The model checker SPIN. IEEE Transactions on software
engineering 23, 5 (1997), 279–295.
[24] Gerard J. Holzmann and Rajeev Joshi. 2004. Model-Driven Software Verication.
In Model Checking Software, Susanne Graf and Laurent Mounier (Eds.). Springer
Berlin Heidelberg, Berlin, Heidelberg, 76–91.
[25] G. J. Holzmann and M. H. Smith. 1999. A practical method for verifying event-
driven software. In Proceedings of the 1999 International Conference on Software
Engineering (IEEE Cat. No.99CB37002). 597–607. https://doi.org/10.1145/302405.
302710
[26] Samuel Jero, Endadul Hoque, David Chones, Alan Mislove, and Cristina Nita-
Rotaru. 2018. Automated attack discovery in TCP congestion control using a
model-guided approach. In Proceedings of NDSS.
[27] Ulf Kargén and Nahid Shahmehri. 2015. Turning programs against each other:
high coverage fuzz-testing using binary-code mutation and dynamic slicing. In
Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering.
ACM, 782–792.
[28] Nupur Kothari, Ratul Mahajan, Todd Millstein, Ramesh Govindan, and Madanlal
Musuvathi. 2011. Finding protocol manipulation attacks. In ACM SIGCOMM
computer communication review, Vol. 41. ACM, 26–37.
[29] Daniel Kroening and Michael Tautschnig. 2014. CBMC–C bounded model checker.
In International Conference on Tools and Algorithms for the Construction and
Analysis of Systems. Springer, 389–391.
[30] Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for
Lifelong Program Analysis & Transformation. In Proceedings of the International
Symposium on Code Generation and Optimization: Feedback-directed and Runtime
Optimization (CGO ’04). IEEE Computer Society, Washington, DC, USA, 75–.
http://dl.acm.org/citation.cfm?id=977395.977673
[31] Florian Merz, Stephan Falke, and Carsten Sinz. 2012. LLBMC: Bounded model
checking of C and C++ programs using a compiler IR. In International Conference
on Veried Software: Tools, Theories, Experiments. Springer, 146–161.
[32] Jayashree Mohan, Ashlie Martinez, Soujanya Ponnapalli, Pandian Raju, and Vijay
Chidambaram. 2018. Finding crash-consistency bugs with bounded black-box
crash testing. In 13th {USENIX} Symposium on Operating Systems Design and
Implementation ({OSDI} 18). 33–50.
[33] Madanlal Musuvathi and Dawson R. Engler. 2004. Model Checking Large Network
Protocol Implementations. In Proceedings of the 1st Conference on Symposium on
Networked Systems Design and Implementation - Volume 1 (NSDI’04). USENIX As-
sociation, Berkeley, CA, USA, 12–12. http://dl.acm.org/citation.cfm?id=1251175.
1251187
[34] Madanlal Musuvathi, David Y. W. Park, Andy Chou, Dawson R. Engler, and
David L. Dill. 2002. CMC: A Pragmatic Approach to Model Checking Real Code.
SIGOPS Oper. Syst. Rev. 36, SI (Dec. 2002), 75–88. https://doi.org/10.1145/844128.
844136
[35] Paul Pearce, Roya Ensa, Frank Li, Nick Feamster, and Vern Paxson. 2017. Augur:
Internet-wide detection of connectivity disruptions. In 2017 IEEE Symposium on
Security and Privacy (SP). IEEE, 427–443.
[36] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. 2018. T-Fuzz: fuzzing by
program transformation. In 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 697–710.
[37] Zhiyun Qian and Z Morley Mao. 2012. O-path TCP sequence number inference
attack-how rewall middleboxes reduce security. In 2012 IEEE Symposium on
Security and Privacy. IEEE, 347–361.
[38] Zhiyun Qian, Z Morley Mao, and Yinglian Xie. 2012. Collaborative TCP sequence
number inference attack: how to crack sequence number under a second. In
Proceedings of the 2012 ACM conference on Computer and communications security.
ACM, 593–604.
[39] Zhiyun Qian, Z Morley Mao, Yinglian Xie, and Fang Yu. 2010. Investigation of
triangular spamming: A stealthy and ecient spamming technique. In 2010 IEEE
Symposium on Security and Privacy. IEEE, 207–222.
[40] Jean-Pierre Queille and Joseph Sifakis. 1982. Specication and Verication of
Concurrent Systems in CESAR. In Proceedings of the 5th Colloquium on Interna-
tional Symposium on Programming. Springer-Verlag, London, UK, UK, 337–351.
http://dl.acm.org/citation.cfm?id=647325.721668
[41] SCENT [n. d.]. SCENT: TCP Side Channel Excavation Tool. https://github.com/
seclab-ucr/SCENT
[42] Kevin Sullivan, Jinlin Yang, David Coppit, Sarfraz Khurshid, and Daniel Jackson.
2004. Software assurance by bounded exhaustive testing. In ACM SIGSOFT
Software Engineering Notes, Vol. 29. ACM, 133–142.
[43] Rijnard van Tonder, John Kotheimer, and Claire Le Goues. 2018. Semantic crash
bucketing. In Proceedings of the 33rd ACM/IEEE International Conference on Auto-
mated Software Engineering.
[44] Shuai Wang, Pei Wang, Xiao Liu, Danfeng Zhang, and Dinghao Wu. 2017.
CacheD: Identifying cache-based timing channels in production software. In
26th {USENIX} Security Symposium ({USENIX} Security 17). 235–252.
[45] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. 2010. TaintScope: A checksum-
aware directed fuzzing tool for automatic software vulnerability detection. In
2010 IEEE Symposium on Security and Privacy. IEEE, 497–512.
[46] Xi Wang, Haogang Chen, Zhihao Jia, Nickolai Zeldovich, and M Frans Kaashoek.
2012. Improving Integer Security for Systems with {KINT}. In Presented as part of
the 10th {USENIX} Symposium on Operating Systems Design and Implementation
({OSDI} 12). 163–177.
Retrieved May 4, 2019 from
https://github.com/Z3Prover/z3
[47] Z3Prover/z3 [n. d.]. The Z3 Theorem Prover.
[48] Xu Zhang, Jerey Knockel, and Jedidiah R Crandall. 2015. Original SYN: Find-
ing machines hidden behind rewalls. In 2015 IEEE Conference on Computer
Communications (INFOCOM). IEEE, 720–728.
[49] Xu Zhang, Jerey Knockel, and Jedidiah R Crandall. 2018. ONIS: Inferring TCP/IP-
based Trust Relationships Completely O-Path. In IEEE INFOCOM 2018-IEEE
Conference on Computer Communications. IEEE, 2069–2077.