近期三场ctf，题目都比较简单。
# Securinets Prequals 2K19
## AutomateMe
获取输入后比对长度3296，然后是3296个if一个一个的比对，一共有下面两种比对方式：
    .text:0000000000000774 ; ----------------------------------------------------------    .text:0000000000000774
    .text:0000000000000774 loc_774:                                ; CODE XREF: main+82↑j
    .text:0000000000000774                 mov     rax, [rbp+var_20]
    .text:0000000000000778                 add     rax, 8
    .text:000000000000077C                 mov     rax, [rax]
    .text:000000000000077F                 add     rax, 1
    .text:0000000000000783                 movzx   eax, byte ptr [rax]
    .text:0000000000000786                 cmp     al, 68h ; 'h'
    .text:0000000000000788                 jz      short loc_7A0
    .text:000000000000078A                 lea     rdi, aNope      ; "nope :( "
    .text:0000000000000791                 mov     eax, 0
    .text:0000000000000796                 call    _printf
    .text:000000000000079B                 jmp     locret_283A0
    .text:00000000000007A0 ; ----------------------------------------------------------    .text:00000000000007A0
    .text:00000000000007A0 loc_7A0:                                ; CODE XREF: main+AE↑j
    .text:00000000000007A0                 mov     rax, [rbp+var_20]
    .text:00000000000007A4                 add     rax, 8
    .text:00000000000007A8                 mov     rax, [rax]
    .text:00000000000007AB                 movzx   eax, byte ptr [rax+2]
    .text:00000000000007AF                 mov     [rbp+var_1], al
    .text:00000000000007B2                 xor     [rbp+var_1], 0EBh
    .text:00000000000007B6                 cmp     [rbp+var_1], 8Eh
    .text:00000000000007BA                 jz      short loc_7D2
    .text:00000000000007BC                 lea     rdi, aNope      ; "nope :( "
    .text:00000000000007C3                 mov     eax, 0
    .text:00000000000007C8                 call    _printf
    .text:00000000000007CD                 jmp     locret_283A0
    .text:00000000000007D2 ; ----------------------------------------------------------
由于代码都是相似的，比对的过程也是从头到尾，所以直接找到特定的代码提取出数据就行了
    f = open('bin','rb')
    f.read(0x74C)
    g = open('flag.txt','ab')
    with open('bin','rb') as f:
        f.read(0x74C)
        while(True):
            temp = f.read(1)
            if temp =='':
                break
            temp = ord(temp)
            if temp == 0x3C:
                t = f.read(1)
                k = f.read(1)
                if k=='\x74':
                    g.write(t)
            elif temp ==0x80:
                if ord(f.read(1))==0x75:
                    f.read(1)
                    t = ord(f.read(1))
                    f.read(1)
                    f.read(1)
                    f.read(1)
                    k = ord(f.read(1))
                    g.write(chr(k^t))
flag就在输出的中间一部分。
## warmup
先将输入base64编码，然后在25个check里比对某一位的字符或某两位的相对位置。细心一点把25个check求一遍就行了。
    table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    k = [0 for i in range(36)]
    k[0] = table[28]
    k[1] = table[54]
    k[2] = k[10] = table[((28+54)>>2) + 1]
    k[3] = 'j'
    k[4] = chr(ord(k[0])+1)
    k[12] = k[22] = k[24] = chr(ord(k[4])-1)
    k[23] = k[11] = chr(48)
    k[35] = chr(ord(k[11])+9)
    k[6] = chr(ord(k[3]) - 32)
    k[8] = chr(ord(k[0]) - 1)
    k[27] = k[31] = chr(ord(k[4]) + 2)
    k[25] = k[9] = chr(ord(k[27]) + 7)
    k[13] = k[17] = k[21] = chr(ord(k[1]) + 1)
    k[7] = 'p'
    k[15] = chr(ord(k[7]) + 3)
    k[14] = chr(ord(k[15]) + 1)
    k[19] = 'z'
    k[34] = chr(ord(k[0]) - 33)
    k[5] = k[20] = k[29] = k[33] = 'X'
    k[26] = chr(49)
    k[16] = k[28] = chr(ord(k[9]) - 32)
    k[1] = chr(50)
    k[18] = k[30] = chr(ord(k[7]) - 30)
    k[32] = k[4]
    t = ''
    for i in range(36):
        t+=k[i]
    print(t.decode('base64'))
25个check比较繁琐，需要细心一点。话说应该可以用angr，但是翻了好多文档试了好多脚本都求不出，有时间再仔细学学angr
## Matrix of Hell
加密逻辑：
    gets(s);
    if ( strlen(s) != 14 || (sub_5593FC1E383A(), !v3) )
    {
      printf("ACCESS DENIED");
      exit(0);
    }
    v16 = 0;
    for ( k = 0; k < strlen(s); ++k )
    {
      for ( l = 0; l <= 4; ++l )
      {
        for ( m = 0; m <= 4; ++m )
        {
          if ( matrix[m + 6LL * l] == s[k] )
          {
            s1[v16] = l + 65;
            v4 = v16 + 1;
            s1[v4] = m + 49;
            v16 = v4 + 1;
          }
        }
      }
    }
    for ( n = 0; n < strlen(s1); ++n )
      s2[n] = n % 4 ^ s1[n];
    if ( strcmp(s3, s2) )
    {
      printf("ACCESS DENIED", s2);
      exit(0);
    }
先生成一个5*6的固定的矩阵，然后获取输入，输入长度需为14
从输入的第一位开始，在矩阵中找到对应的元素，行数 l+65 放到 字符串s1的2*i位置，列数
m+49放到字符串s2的2*i+1位置，最后将字符串的每一位异或位数(n%4)得到s2，再和常量字符串s3对比。
解密脚本：
    t1 = [0x41, 0x42, 0x43, 0x44, 0x45, 0x0, 0x46, 0x47, 0x48, 0x49, 0x4B, 0x0, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x0, 0x51, 0x52, 0x53, 0x54, 0x55, 0x0, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x0]
    s = 'B0C2A2C6A3A7C5@6B5F0A4G2B5A2'
    s1 = []
    for i in range(len(s)):
        s1.append(ord(s[i])^(i%4))
    pswd = ''
    for i in range(14):
        l = s1[2*i] - 65
        m = s1[2*i+1] - 49
        pswd += chr(t1[m + 6*l])
    print(pswd)
## Vectors
输入一个64位的十六进制数
接下来对数据的操作用到了vector，静态分析比较蛋疼，直接动调。先将输入的数据分成8个字节放入一个vector，在`sub_F37`可以看到它将另7个不同的8位16进制数放入另一个vector。直接调试到`sub_F37`可以看到它将两个vector排好序了
    [heap]:0000564A82C794B0 dword_564A82C794B0 dd 0Ch
    [heap]:0000564A82C794B0 dd 0Dh
    [heap]:0000564A82C794B0 dd 0ADh
    [heap]:0000564A82C794B0 dd 0BEh
    [heap]:0000564A82C794B0 dd 0DEh
    [heap]:0000564A82C794B0 dd 0EDh
    [heap]:0000564A82C794B0 dd 0EFh