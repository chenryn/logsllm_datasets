per second [10,21]. To avoid this abuse, interpreter services need to limit the
request rate. Another source of resource exhaustion is data compression. With
reference to Table 3c, data compression is supported by most tested services, and
one also supports HTTP request decompression. Decompressing HTTP requests
is not a standardized behavior, but instead is a web server-speciﬁc feature [20].
We are not aware of the reasons to support this feature, and we would recom-
mend disabling it. Unlike this particular case, HTTP response compression is
standardized and a more common feature. Also in this case, we would recom-
mend disabling data compression. If this is not possible, then developers should
410
G. Pellegrino et al.
verify that their services limit the resources used when decompressing incom-
ing messages (see [20] for guidelines toward a secure implementation of data
decompression).
(M6) Remove Open Access Control Policies for CORs—As OOP services
can be accessed via CORs from any domain, they can be used by interpreters
to chain SSR services in order to mount the attack. Among our case studies,
four services use the header ACAO: *, which is bad practice in the presence of
our threat model. The other 64 services omit ACAO headers, thus eﬀectively
blocking cross-origin requests. Another eﬀective countermeasure to block this
attack is to limit the access to SSR services to CORs from trusted origins.
(M7) Limit Information Leakage—72 % of the services can be used as probes
to perform network reconnaissance. This makes this role the most widespread
behavior among the applications we tested. All probe services of Table 3a allow,
with diﬀerent degrees of granularity, network reconnaissance via response time
analysis and response code. Information leaks can be solved by making S’s behav-
ior independent from the success of the SSR. For example, S can enforce a con-
stant response time (i.e., a ﬁxed delay between C’s request and the response sent
to C). We observed this behavior for 15 services that do not allow distinguishing
the port state, seven services that do not leak information about the host avail-
ability, and 24 services that do not disclose the availability of an HTTP resource.
However, enforcing a constant time introduces undesired delays, thus making it
unsustainable for scenarios in which responsiveness is important. In these cases,
S may deploy weaker security measures which can limit network reconnaissance
attacks. This can be achieved, for example, by accepting URLs only with selected
TCP ports with mitigation M3, or by rate-limiting the requests.
(M8) Enforce URL-Based Browser Countermeasures—None of the mit-
igations we obseved in the wild (M1-7) can solve Web Origin Laundering Attack
1.2. The root cause of this attack is that S allows one to retrieve and serve
malicious content, and hide the true origin of the malicious content with S’s
domain.
To block Web Origin Laundering Attack 1.2, we propose that SSR services
should implement the same countermeasures deployed by browsers in order to
block harmful and unwanted content, e.g., Google Safe Browsing. Once the client
submits the URL to S, S validates the URL using the Google Safe Browsing pro-
tocol. If the URL is malicious, then S refuses to retrieve it. While this approach
at least partially mitigates the distribution of malicious content, it does not ﬁx
the problem if web browsers implement custom security policies, e.g., NoScript
or AdBlock custom domain blacklists. In conclusion, a general solution to Web
Origin Laundering Attack 1.2 is still lacking.
7 Developers Feedback
We responsibly disclosed all vulnerabilities to the respective developers. In most
of the cases, developers reacted to our ﬁrst reports. If developers were unrespon-
sive for over a month, we tried a second time and then alerted the US CERT. Our
Uses and Abuses of Server-Side Requests
411
disclosure resulted in a variety of responses from developers, strongly related to
the type of ﬂaw of our classiﬁcation.
Forgery—75 % of such vulnerabilities have been ﬁxed by now. Six vendors (i.e.,
S1, S14, S15, S35, S46, and S64) patched their services, while two vendors (S12
and S41) were unresponsive. The high number of ﬁxes may be due to a partial
awareness of the security risks of forgery vulnerabilities: forgery is the ﬁrst doc-
umented SSR ﬂaw, and developers deploy countermeasures against forgery, i.e.,
URL validation (e.g., 64 services reject URLs with non-HTTP schemes, 13 with
TCP ports, and eight with IPs). However, the fact that countermeasures can be
bypassed with HTTP redirections indicates that the complete exploitation space
of SSR ﬂaws is not entirely understood.
Information Gathering—The disclosure of these vulnerabilities revealed a
more fragmented situation. Five services patched the problem, while the vast
majority ignored the issue or did not respond to our report. An interpretation of
these results is in the rejected reports. In three cases, developers did not want to
modify S as they are using monitoring to prevent abuses (i.e., S3, S5, and S59).
The use of monitoring suggests prudence and a general attention to security-
related issues. However, the choice of monitoring over a patch in S may indicate
that developers rate this risk a low priority. Other developers (S7, S60, and S62)
consider this ﬂaw not to be a security risk at all.
Enforcement of Security Policies—Out of four aﬀected services, S15 has
been shut down and S2 has partially solved the ﬂaw by adding the content
disposition header into the response. Developers of S16 reported having ﬁxed the
ﬂaw, but the patch did not solve the problem. Lastly, developers of S5 rejected
our report because they use monitoring to prevent abuses. As discussed in Sect. 6,
monitoring may work for large-scale abuses, but potentially still misses individual
exploitations.
8 Related Work
In this section, we review SSR literature according to four thematic groups.
First, we review academic literature with a focus on vulnerability analysis and
detection. Then, we review known SSR-based attacks against popular web appli-
cations. Third, we present current attempts to classify and categorize existing
SSR threats. Finally, we survey existing tools to detect SSR vulnerabilities.
Vulnerability Analyses and Detection—Web vulnerabilities have been
extensively studied from diﬀerent angles, e.g., categorization and prioritiza-
tion [17,23], impact and trends [18], detection techniques [2,19] and eﬀective-
ness [4], and defense mechanisms [3]. While existing works focused largely on
classical, yet severe, vulnerabilities, to the best of our knowledge, no scientiﬁc
work has studied the SSR communication pattern.
Attacks and Classiﬁcations—The vast majority of security incidents are
described in reports and whitepapers. These attacks are SSR forgery attacks
412
G. Pellegrino et al.
and were brought to the community’s attention by Polyakov et al. [22] and
Walikar [27]. Polyakov et al.
[22] described an XXE vulnerability in SAP
NetWeaver whereas Walikar [27] described an insuﬃcient input validation vul-
nerability in popular social networks. Other exploitations of SSR forgery vul-
nerabilities were reported by Almroth et al. [1], in which they retrieve local
resources in Google services. All these attacks are included in Polyakov’s threat
model. With respect to the current knowledge about SSR-based attacks, our
paper presents ﬁve previously-unknown SSR-based attacks, i.e., two Web Origin
Laundering attacks and three DoS attacks.
Following the initial incidents, the community started classifying and catego-
rizing known SSR-based vulnerabilities. All eﬀorts focused on SSR forgery (e.g.,
CWE [25] and OnSec [16]). However, current knowledge on SSR vulnerabilities
is sparse, disjoint, and incomplete. While the CWE database includes some SSR-
related vulnerabilities, they are mainly isolated entries which are not correlated
to each other. As a result, developers cannot identify all possible ﬂaws that can
aﬀect an SSR service. Furthermore, as we have shown, there are other attacks
targeting C and S which do not rely on forgery but instead abuse improper
enforcement of security policies.
Detection Tools—Existing detection tools target only SSRF vulnerabilities.
They are available in the form of proof-of-concept scripts (e.g., the SSRF
bible [16]) or as testing tools. A proprietary tool that can ﬁnd SSRF vulner-
abilities is Acunetix WVS version 9 with AcuMonitor5. However, this tool is not
freely available and we were not able to inspect it. Existing public tools oﬀer
limited detection power (only SSRF) which make them inapplicable to the pur-
pose of this paper. Ussrfuzzer [28] fuzzes HTTP requests with URLs to detect
SSRs, however, it does not perform any security test. In contrast, the OWASP
Skanda [5] tool can detect information disclosure ﬂaws, in particular leaks of
TCP port status. However, it cannot be used to detect other types of leakage,
e.g., web application ﬁngerprint, nor other vulnerabilities or security related fea-
tures. For all these reasons, we developed g¨unther, a ﬁrst comprehensive SSR
testing tool, that we plan to release to the public.
9 Conclusion
To the best of our knowledge, this is the ﬁrst comprehensive study of the security
of SSRs. We presented a classiﬁcation of SSRs based on the type of ﬂaw, the
level of control of the messages, the behavior of the vulnerable services, and the
potential attack targets. Furthermore, we unveiled previously-unknown exploita-
tions techniques in which a combination of seemingly innocuous services can be
used to mount sophisticated attacks targeting both users and servers on the
Internet. We also presented experiments on 68 popular web applications. Our
experiments showed that the majority of the web applications can be abused
to perform malicious activities, ranging from server-side code execution to DoS
5 See http://www.acunetix.com/vulnerability-scanner/.
Uses and Abuses of Server-Side Requests
413
attacks. We also presented eight mitigations to help developers to implement
SSRs in a more secure way.
Acknowledgments. This work was supported by the German Federal Ministry of
Education and Research (BMBF) through funding for the Center for IT-Security, Pri-
vacy and Accountability (CISPA) and for the BMBF project 13N13250.
References
1. Almroth, F., Karlsson, M.: How we got read access on Googles production
servers. http://blog.detectify.com/post/82370846588/how-we-got-read-access-on-
googles-production
2. Balzarotti, D., Cova, M., Felmetsger, V.V., Vigna, G.: Multi-module vulnerability
analysis of web-based applications. In: ACM CCS 2007 (2007)
3. Barth, A., Jackson, C., Mitchell, J.C.: Robust defenses for cross-site request forgery.
In: ACM CCS 2008 (2008)
4. Bau, J., Bursztein, E., Gupta, D., Mitchell, J.: State of the art:Automated black-
box web application vulnerability testing. In: IEEE S&P 2010 (2010)
5. Chauhan,
SSRF Exploitation
J.: OWASP SKANDA -
framework.
http://www.chmag.in/article/may2013/owasp-skanda-%E2%80%93-ssrf-exploita
tion-framework
6. Eyeo GmbH: Adblock plus. https://adblockplus.org/
7. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., Berners-
Lee, T.: Hypertext Transfer Protocol – HTTP/1.1. In: RFC 2616 (Draft Standard).
Request for Comments. Internet Engineering Task Force (1999). http://www.ietf.
org/rfc/rfc2616.txt
8. Fitzpatrick, B., Recordon, D., Hardt, D., Hoyt, J.: OpenID authentication 2.0 -
Final. http://openid.net/specs/openid-authentication-2 0.html
9. Google Inc.: Safe browsing API. https://developers.google.com/safe%2Dbrowsing/
10. Grossman, J., Johansen, M.: Million browser botnet. https://media.blackhat.com/
us%2D13/us%2D13%2DGrossman%2DMillion%2DBrowsed%2DBotnet.pdf
11. Haﬁf, O.: Reﬂected ﬁle download a new web attack vector. https://drive.google.
com/ﬁle/d/0B0KLoHg gR XQnV4RVhlNl96MHM/view
12. Heiland, D.: Web portals gateway to information or a hole
in our
perimeter defenses. http://www.shmoocon.org/2008/presentations/Web+portals,
+gateway+to+information.ppt
13. InformAction: NoScript. https://noscript.net/
14. Jack Whitton: SafeCurl. https://github.com/ﬁn1te/safecurl
15. Kulkarni, P.: SSRF/XSPA bug in https://www.coinbase.com 06, http://www.
prajalkulkarni.com/2013/06/ssrfxspa
16. ONsec Lab: SSRF Bible, Cheatsheet. https://docs.google.com/document/d/
1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM
17. OWASP: The OWASP top 10 project. https://www.owasp.org/index.php/
Category:OWASP Top Ten Project
18. Payet, P., Doup´e, A., Kruegel, C., Vigna, G.: Ears in the wild: large-scale analysis
of execution after redirect vulnerabilities. In: ACM SAC 2013 (2013)
19. Pellegrino, G., Balzarotti, D.: Toward black-box detection of logic ﬂaws in web
applications. In: NDSS 2014 (2014)
414
G. Pellegrino et al.
20. Pellegrino, G., Balzarotti, D., Winter, S., Suri, N.: In the compression Hornet’s
Nest: a security study of data compression in network services. In: USENIX Secu-
rity 2015 (2015)
21. Pellegrino, G., Rossow, C., Ryba, F.J., Schmidt, T.C., W¨ahlisch, M.: Cashing out
the great Cannon? On browser-based DDoS attacks and Economics. In: USENIX
WOOT 2015 (2015)
22. Polyakov, A.,
Chastukjin, D.,
critical
NetWeaver.
SSRF%2Dvs%2DBusinness%2Dcritical%2Dapplications%2Dwhitepaper.pdf
business-
SAP
http://erpscan.com/wp%2Dcontent/uploads/2012/08/
applications.
Tyurin, A.:
SSRF
vs.
Part
1:
XXE
Tunnelling
in
23. SANS Institute: Critical security controls for eﬀective cyber defense. https://www.
sans.org/media/critical-security-controls/CSC-5.pdf
24. Santese, A.: Yahoo! SSRF/XSPA vulnerability, 06. http://hacksecproject.com/
yahoo%2Dssrfxspa%2Dvulnerability/
25. The MITRE Corporation: Common weakness enumeration. http://cwe.mitre.org/
26. van Kesteren, A.: Cross-origin resource sharing - W3C Recommendation, 16 Jan-
uary 2014. http://www.w3.org/TR/cors/
27. Walikar, R.A.: Cross site port attacks - XSPA. http://www.riyazwalikar.com/
2012/11/cross%2Dsite%2Dport%2Dattacks%2Dxspa%2Dpart%2D1.html
28. Zaitov, E.: Universal SSRF fuzzer. https://github.com/kyprizel/ussrfuzzer