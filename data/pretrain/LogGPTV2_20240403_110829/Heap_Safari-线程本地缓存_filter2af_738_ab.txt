## tcache_put
tcache_put负责往相应的entries[]索引中存放已释放的区块，并更新counts[idx]的值。
    // Make sure the chunk's size is within the tcache boundaries
    cmp    rdx,0x3f
    // tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
    lea    rdi,[rbx+0x10]
    ja     0x7ffff7a80334
    // &counts[idx]
    lea    rax,[rcx+rdx*8]
    add    esi,0x1
    // tcache->entries[tc_idx]
    mov    r8,QWORD PTR [rax+0x40]
    // e->next = tcache->entries[tc_idx];
    mov    QWORD PTR [rbx+0x10],r8
    // tcache->entries[tc_idx] = e
    mov    QWORD PTR [rax+0x40],rdi
    // counts[idx]++
    mov    BYTE PTR [rcx+rdx*1],sil
    /* Caller must ensure that we know tc_idx is valid and there's room
       for more chunks.  */
    static void
    tcache_put (mchunkptr chunk, size_t tc_idx)
    {
      tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
      assert (tc_idx next = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e;
      ++(tcache->counts[tc_idx]);
    }
下面给出的是ASCII版本：
    Before:
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251
    tcache-->counts[] --> 0x602010:	0x0000000000000000	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000000000 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
                          0x602240:	0x0000000000000000	0x0000000000000000
                          0x602250:	0x0000000000000000	0x0000000000000031 counts[]
       0       1       2            63
    +------++------++------+     +------+ 
    |   0  ||  1   ||  0   | ... |  0   |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
    tcache->entries[]
       0       1       2            63
    +------++------++------+     +------+ 
    | NULL ||  a   || NULL | ... | NULL |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
               |
               |
              NULL
    After:
                      gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251 
    tcache-->counts[] --> 0x602010:	0x0000000000000100	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000602260 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
                          0x602240:	0x0000000000000000	0x0000000000000000
                          0x602250:	0x0000000000000000	0x0000000000000031 counts[]
       0       1       2            63
    +------++------++------+     +------+ 
    |   0  ||  2   ||  0   | ... |  0   |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
    tcache->entries[]
       0       1       2            63
    +------++------++------+     +------+ 
    | NULL ||  b   || NULL | ... | NULL |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
                |
                |
            +------+
            |   a  |
            |      |
            +------+
                |
                |
               NULL
    After:
                       gdb-peda$ x/80gx 0x602000
                          0x602000:	0x0000000000000000	0x0000000000000251 
    tcache-->counts[] --> 0x602010:	0x0000000000000200	0x0000000000000000
                          0x602020:	0x0000000000000000	0x0000000000000000
                          0x602030:	0x0000000000000000	0x0000000000000000
                          0x602040:	0x0000000000000000	0x0000000000000000
                          0x602050:	0x0000000000000000	0x0000000000602290 entries[]
                          0x602060:	0x0000000000000000	0x0000000000000000
                                            ...                ...
                          0x602240:	0x0000000000000000	0x0000000000000000
                          0x602250:	0x0000000000000000	0x0000000000000031 next
    0x602260:	0x0000000000000000    counts[]
       0       1       2            63
    +------++------++------+     +------+ 
    |   0  ||  7   ||  0   | ... |  0   |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
    tcache->entries[]
       0       1       2            63
    +------++------++------+     +------+ 
    | NULL ||  g   || NULL | ... | NULL |
    |      ||      ||      |     |      |
    +------++------++------+     +------+
                |
                |
            +------+
            |  f   |
            |      |
            +------+
                |
                |
            +------+
            |  e   |
            |      |
            +------+
                |
                |
            +------+
            |  d   |
            |      |
            +------+
                |
                |
            +------+
            |  c   |
            |      |
            +------+
                |
                |
            +------+
            |  b   |
            |      |
            +------+
                |
                |
            +------+
            |  a   |
            |      |
            +------+
                |
                |
               NULL
如果tcache检测失败的话，系统将采用fastbin路径运行：
    static void
    _int_free (mstate av, mchunkptr p, int have_lock)
    {
      ...
      size = chunksize (p);
      ...
      check_inuse_chunk(av, p);
    #if USE_TCACHE
      {
        size_t tc_idx = csize2tidx (size);
        if (tcache
    	&& tc_idx counts[tc_idx] have_fastchunks, true);
        unsigned int idx = fastbin_index(size);
        fb = &fastbin (av, idx);
        /* Atomically link P to its fastbin: P->FD = *FB; *FB = P;  */
        mchunkptr old = *fb, old2;
        ...
          do
    	{
    	  /* Check that the top of the bin is not the record we are going to
    	     add (i.e., double free).  */
    	  if (__builtin_expect (old == p, 0))
    	    malloc_printerr ("double free or corruption (fasttop)");
    	  p->fd = old2 = old;
    	}
          while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2))
    	     != old2);
          ...
    free(h);
    free(i);
    free(j);
    free(k);
    fastbinsY[NFASTBINS]
       0       1       2            
    +------++------++------+     
    | NULL ||  k   || NULL | ...
    |      ||      ||      |     
    +------++------++------+     
                |
                |
            +------+
            |  j   |
            |      |
            +------+
                |
                |
            +------+
            |  i   |
            |      |
            +------+
                |
                |
            +------+
            |  h   |
            |      |
            +------+
                |
                |
               NULL
    gdb-peda$ printfastbin 
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x602430 --> 0x602400 --> 0x6023d0 --> 0x6023a0 --> 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
如果区块的分配大小为0x20，tcache_get将会运行：
    // Allocate the chunks out of tcache. 
    // returns g
    malloc(0x20);
    // returns f
    malloc(0x20); 
    // returns e
    malloc(0x20); 