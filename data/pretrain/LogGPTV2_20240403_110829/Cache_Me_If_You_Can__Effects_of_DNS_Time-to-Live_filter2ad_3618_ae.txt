prevent caching which can help latency (§6.2), and increase DDoS
vulnerability [36].
We reached out to the operators of the eight ccTLDs, asking them
why they chose such short TTLs. Five of them responded, with three
stating that they had not considered the implications of such short
TTLs. After our contact, three operators increased their NS records
TTL to 1 day: Uruguay’s .uy increased it from 300 s, a middle-eastern
ccTLD increased it from 30 s, and an African ccTLD increased their
TTL from 480 s, both to one day. We report in §5.3 the implications of
this increase in TTL for .uy. Two other operators said the short TTLs
were intentional to account for planned infrastructure changes.
Another reply was from a large operator who stated they kept the
TTL values in place when they took over service (“if it ain’t broke
don’t fix it” approach we discussed in §1).
One should be cautious in drawing conclusions from such a small
sample but while some operators intentionally use small TTLs,
many appear to have not carefully considered the implications and
are interested in considering longer TTLs.
5.3 Early Feedback from Uruguay’s .uy
Our study of Uruguay’s ccTLD shows that in early 2019 they had
very different TTLs between their parent and child, with authorita-
tive TTLs of only 5 minutes while the root zone defaults to 2 days
(300 s vs. 172800 s!). During the time of our analysis, .uy had 8 NS
records (5 in-bailiwick, 3 out). After sharing our early results with
them, on 2019-03-04 they changed their child NS records TTLs to
one day (86400 s).
Uruguay’s .uy change provides a natural experiment to test the
effects of different TTLs on DNS latency. Our studies had measure-
ments from RIPE Atlas VPs both before and after this change (see
110
(a) VPs combined
(b) Median and quantiles of RTT as seen by RIPE Atlas VPs per re-
gion (AF:Africa, AS:Asia, EU:Europe, NA:North America, OC:Oceania,
SA:South America); Halo symbols (left) are for TTL 300s and filled for
TTL 86400s
Figure 10: RTT from RIPE Atlas VPs for NS .uy queries be-
fore and after changing TTL NS records.
uy-NS and uy-NS-new in Table 2). We measure the response time
for a .uy/NS query from around 15k VPs, querying for two hours
every 600 s. Since .uy is a country-level TLD, it may be cached, so
this study reflects a dynamic snapshot remaining TTL.
Results: Figure 10a shows the CDF of query response times for
.uy before, with a short TTL (the top, red line), and after, with long
TTLs (the bottom, blue line). With short TTLs, .uy often falls out
of the cache, and the median response time is 28.7 ms. With long
TTLs .uy remains in the cache and so many queries are handled
directly by the recursive, providing an 8 ms response time.
Differences in tail latency are even larger: at the 75%ile, longer
TTLs have median of 21 ms compared to 183 ms with short TTLs;
at the 95%ile, longer TTLs have a median of 200 ms compared to
450 ms, and, at 99%ile, these values raise to 1375 ms and 678 ms,
respectively.
To confirm these differences are not biased by geographic distri-
bution of RIPE probes, we evaluate RTT changes by continent based
on each probe’s self-reported geolocation. Figure 10b shows the
distribution of RTT per continent as seen by more than 13.7k VPs
worldwide. We see that all regions observe latency reduction after
changing TTL; higher reductions are seen for those with larger
range of latency.
This natural experiment shows the large benefit to user latency
from increased caching and long TTLs. We do not have access to
 0 0.2 0.4 0.6 0.8 1 1 5 10 50 500 5000CDFRTT (ms)TTL 300sTTL 86400s 0 50 100 150 200 250 300 350 400 450AF(327)AS(846)EU(9691)NA(2307)OC(267)SA(293)ALL(13731)RTT (ms)continent code (# of VPs)TTL 300sTTL 86400sCache Me If You Can
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
authoritative traffic at .uy, so we cannot evaluate traffic reduction,
but it too is likely substantial (we evaluate traffic reduction due to
longer TTLs in §6.2) .
Besides .uy, two other ccTLDs also increased their NS records
TTL to one day after our initial contact, from 30 s and 480 s ,respec-
tively. Their users can also expect similar perform gains as from
.uy users.
6 RECOMMENDATIONS FOR DNS
OPERATORS
We next consider recommendations for DNS operators and domain
owners, about TTL durations and the other operational issues.
6.1 Reasons for Longer or Shorter TTLs
TTLs in use range from as short as 5 minutes, to a few hours, to
one or two days (§5.1). This wide range of time values seen in
TTL configurations is because there are many trade-offs in “short”
vs. “long”, and which factors are most important is specific to each
organization. Here are at least factors operators consider:
Longer caching results in faster responses: The largest ef-
fect of caching is to enable queries to be answered directly from
recursive resolvers. With a cache hit, the resolver can respond di-
rectly to a client, while a cache miss requires an additional query
(or queries, in some cases) to authoritative servers. Although a
query to the authoritative is usually fast (less than 100 ms), a direct
reply from the recursive resolver is much faster. While caching
has long been recognized as important, we are the first to show
how important it is, both for Uruguay’s .uy in §5.3, and through
controlled experiments in §6.2.
Longer caching results in lower DNS traffic: caching can sig-
nificantly reduce DNS traffic. However, DNS queries and replies are
quite small, and DNS servers are relatively lightweight. Therefore,
costs of DNS traffic are likely smaller than costs of web hosting or
e-mail. We evaluate this effect in §6.2.
Longer caching results in lower cost if DNS is metered:
Some DNS-As-A-Service providers charges are metered, with a
per query cost (often added to a fixed monthly cost). Even if incre-
mental costs are small relative to fixed charges, caching can reduce
this cost.
Longer caching is more robust to DDoS attacks on DNS:
DDoS attacks on a DNS service provider [21] harmed several promi-
nent websites [41]. Recent work has shown that DNS caching can
greatly reduce the effects of DDoS on DNS, provided caches last
longer than the attack [36].
Shorter caching supports operational changes: An easy way
to transition from an old server to a new one is to change the DNS
records. Since there is no method to remove cached DNS records,
the TTL duration represents a necessary transition delay to fully
shift to a new server, so low TTLs allow more rapid transition. How-
ever, when deployments are planned in advance (that is, longer
than the TTL), then TTLs can be lowered “just-before” a major
operational change, and raised again once accomplished.
Shorter caching can help with a DNS-based response to
DDoS attacks: Some DDoS-scrubbing services use DNS to redi-
rect traffic during an attack [38]. Since DDoS attacks arrive unan-
nounced, DNS-based traffic redirection requires the TTL be kept
quite low at all times to be ready to respond to a potential attack.
Shorter caching helps DNS-based load balancing: Many large
services use DNS-based load balancing (for example, the Akamai
CDN [12] and Bing search engine [10]). Each arriving DNS request
provides an opportunity to adjust load, so short TTLs may be de-
sired to react more quickly to traffic dynamics. (Although many
recursive resolvers have minimum caching times of tens of seconds,
placing a limit on agility.)
Organizations must weigh these trade-offs to find a good balance,
after considering other factors such as server load and maintenance.
6.2 Caching Reduces Query Volume and
Latency
Latency is not the only factor to consider; one should also consider
query volume. Caching reduces query volume at the authoritative
server, reducing load and indirectly improving latency. Exactly
how much depends on the workload: who queries, when, and from
where. We saw a significant reduction in latency for Uruguay in in
§5.3. We next study those questions with a controlled experiment.
Methodology: We carry out five experiments listed in Table 10.
We use DNS servers at Amazon EC2 in Frankfurt, with short (60 s)
and long (84,400 s) TTLs, and we use anycast (Route53, with 45
global sites at experiment time) with 60 s TTLs.
We place queries to a test domain (unique to this experiment)
from 15k Atlas VPs to different types of DNS configurations. We
use either unique names (the left two columns) or a common name
(the right three).
Longer TTL reduces authoritatives load: We see that the
traffic to authoritative servers is reduced by about 77% with the
long TTL (from 127k to 43k with unique names, and from 92k to
20k with shared names). Similarly, in 2016, when .nl reduced the
TTL of the A records of its NS records from 7200 to 3600 s, it saw a
traffic increase by 22 to 30% in two of its authoritative servers [55].
Our controlled experiment shows the economic savings when DNS
is provided as a metered service [5].
Longer TTL improves response time: Figure 11 shows la-
tency distributions, comparing short TTLs with long TTLs. We can
see that for unique queries (Figure 11a), using a TTL of 60 s leads
to a median RTT of 49.28 ms, while a TTL of 84600 s reduces the
median to 9.68 ms.
For shared query names (Figure 11b), the median RTT for a
TTL60 s is 35.59 ms, and 7.38 ms for TTL86400, which can be ex-
plained that some VPs benefit from caches being warmed by others
VPs. This controlled experiment confirms improved latency seen
for Uruguay (Figure 10a), since TTL86400 (the leftmost, green line)
has much lower median latency than TTL60 (the right, daker, blue
line).
Longer TTL reduces latency, even more than anycast: In
addition, this controlled experiment lets us compare to an anycast
service (Figure 11b). We see that caching is far better than anycast
at reducing latency, comparing TTL86400 (the left, ligher red line)
against anycast (the center orange line, median RTT =29.95 ms).
While anycast helps a great deal in the tail of the distribution,
caching greatly helps the median. (At 75%ile, 60 s TTLs have 106 ms
latency, with anycast that drops to 67 ms, but 86,400 s TTLs reduce
it to 24 ms.) This result is consistent with prior work that showed
diminishing returns from very large anycast networks [47]. The
111
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
G. C. M. Moura et al.
Frequency
Duration
Query
Query Type
Date
unique QNAME
TTL60-u
TTL86400-u
600s
60min
600s
60min
PID.mapache-de-madrid.co
AAAA
20190227
AAAA
20190227
TTL60-s
600s
65min
AAAA
20190228
shared QNAME
TTL86400-s
600s
65min
AAAA
20190228
1.mapache-de-madrid.co
2.mapache-de-madrid.co
4.mapache-de-madrid.co
Probes
Probes (val.)
Probes (disc.)
VPs
Queries
Responses
Responses (val.)
Responses (disc.)
Querying IPs
Queries
Responses
9095
8991
104
15996
96438
96492
96469
23
12967
126763
126763
9109
9009
100
16025
96585
96645
96603
42
Client Side
9105
8950
155
15834
103666
103666
103640
26
9117
8981
136
15910
107912
107912
107861
51
10334
43220
43220
Authoritative Server
11166
92547
92547
7882
20325
20325
Table 10: TTL experiments: clients and authoritative view [43].
TTL60-s-anycast
600s
60min
AAAA
20190228
8869
8572
117
15274
90553
90553
90553
0
13773
60813(only AAAA)
60813(only AAAA)
(a) RTT CDF for unique QNAMES
(b) RTT CDF for shared QNAMES
(c) RTT distribution for unique QNAMES
(d) RTT distribution for shared QNAMES
Figure 11: Distribution of client latency from Atlas VPs to controlled DNS with different TTLs.
cache in a recursive close to the client is often far faster even than
an anycast site 100 km away.
6.3 Recommendations
While our analysis does not suggest one “best” TTL value, we care-
fully describe the trade-offs, resulting in the following recommen-
dations for different situations:
TTL Duration: Choice of TTL depends in part on external fac-
tors (§6.1) so no single recommendation is appropriate for all net-
works or network types.
For general zone owners, we recommend longer TTLs: at least one
hour, and ideally 4, 8, or 24 hours. Assuming planned maintenance
can be scheduled in advance, long TTLs have little cost.
For TLD and other registry operators: DNS operators that allow
public registration of domains (such as most ccTLDs, .com, .net,
.org and many SLDs) allow clients to duplicate the TTLs in their
zone files for client NS records (and glues if in-bailiwick). While §3.3
shows that most resolvers use TTL values from the child delegation,
some use the parent’s TTL. We therefore recommend longer TTLs
112
 0 0.2 0.4 0.6 0.8 1 1 5 10 50 500 5000ECDFRTT (ms)TTL 60sTTL 86400s 0 0.2 0.4 0.6 0.8 1 1 5 10 50 500 5000ECDFRTT (ms)TTL 60sTTL 60s anycastTTL 86400s 0 50 100 150 200 250 300 350 400 450AF(372)AS(1386)EU(10542)NA(2495)OC(427)SA(306)ALL(15528)RTT (ms)continent code (# of VPs)TTL 60sTTL 86400s 0 50 100 150 200 250 300 350 400 450AF(345)AS(882)EU(10047)NA(2385)OC(264)SA(293)ALL(14216)RTT (ms)continent code (# of VPs)TTL 60sTTL 60s, anycastTTL 86400sCache Me If You Can
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
for NS records of both parent and child records (at least one hour,