# Optimized Text

## Platform Events and Stacks Analysis

### Stack Traces

- **os::PlatformEvent:spark (long) [clone -part.12]**
  - Monitor::INait (Thread*, long)
  - Monitor:ait (bool, Long, bool)
  - KatcherThread::sleep (const)
  - KatcherThread::run ()
  - thread_native_entry (Thread*)
  - start_thread
  - clone
  - VM Periodic Task (122029)
  - TOS0L66

The output was truncated due to its length, but a few significant stacks are included for discussion. The first stack indicates that Java was blocked for 5.1 milliseconds (S717 us) in total on a safepoint, which was managed using a futex lock in the kernel. This 5.1 ms may include multiple blocking events.

### Page 593

**Chapter 12: Languages**

The final stack shows Java blocking in `pthread_cond_timedwait()` for almost the same 10-second duration of the trace. This is a WatcherThread waiting for work, with the thread name *VM Periodic Task* (truncated to appear without the *k*). For applications that use many threads waiting for work, the output of `offcputime(8)` can be dominated by these waiting stacks. To find relevant stacks, you need to read past them to identify the wait events during application requests.

The second stack is surprising: it shows Java blocked on an `unlink(2)` syscall, which resulted in disk I/O blocking (e.g., `io_schedule()` etc.). To determine which files were being deleted, a `bpftrace` one-liner was used:

```bash
bpftrace -e 'tracepoint:syscalls:sys_enter_unlink { printf("%s\n", str(args->pathname)) }'
```

This revealed that `freecol` was deleting auto-save games.

### libpthread Stacks

Given the common nature of this issue, here is how the final stack looked with a default installation:

- finish_task_switch
- schedule
- futex_wait_queue_me
- futex_wait
- do_futex
- SyS_futex
- do_syscall_64
- entry_SYSCALL_64_after_hwframe
- pthread_cond_timedwait
- VM Periodic Task (16936)

The stack ends at `pthread_cond_timedwait()`. The current default `libpthread` shipped with some distributions breaks frame pointer-based stack walking. My earlier example used a custom-compiled version of `libpthread` with `-fno-omit-frame-pointer`. See Section 2.4 in Chapter 2 for more details.

### Off-CPU Time Flame Graphs

The `offcputime(8)` output was hundreds of pages long. To navigate it more efficiently, it can be used to generate off-CPU time flame graphs. Here is an example using the FlameGraph software [37]:

```bash
jmaps; offcputime -fp 16914 10 > out.offcpu01.txt
flamegraph.pl --color=java --bgcolor=blue --title="Off-CPU Time Flame Graph" out.offcpu01.svg
```

This generated the graph shown in Figure 12-5. The top of the flame graph is truncated, and the width of each frame is relative to the blocked off-CPU time. The `--countname=us` option was used to match the total blocking time in microseconds, and the background color was changed to blue to indicate blocking stacks (CPU flame graphs use a yellow background).

### Application-Specific Flame Graphs

The flame graph is dominated by threads waiting for events. By including the thread name as the first frame in the stack, threads with the same name are grouped together. Using the flame graph search feature for "freecol" highlighted those frames in magenta (see Figure 12-6).

Using click-to-zoom on the narrow third tower showed code during the game (see Figure 12-7). This graph provides targets for optimization, with many frames still marked as "Interpreter" because the JVM had not executed the method enough times to hit the CompileThreshold.

### Narrowing Down Stacks

Sometimes, application code paths can be so narrow that they are elided from the flame graph. One approach to solve this is to use `grep(1)` to include only the stacks of interest. For example:

```bash
grep freecol out.offcpu01.txt | flamegraph.pl ... > out.offcpu01.svg
```

### BCC Tools for Java

#### stackcount

The BCC `stackcount(8)` tool can collect stacks on any event, showing the libjvm and Java method code paths leading to the event. For example, to show user-level page faults:

```bash
stackcount -p 16914 t:exceptions:page_fault_user
```

#### Page Fault Flame Graph

A flame graph can be generated from the `stackcount` output:

```bash
jmaps; stackcount -p 16914 t:exceptions:page_fault_user > out.faults01.txt
flamegraph.pl ... out.faults01.svg
```

#### javastat

`javastat(8)` is a BCC tool that provides high-level Java and JVM statistics, refreshing the screen similarly to `top(1)`. Example usage:

```bash
javastat -C
```

Columns include:
- PID: Process ID
- CMDLINE: Process command line
- METHOD/s: Method calls per second
- GC/s: Garbage collection events per second
- OBJNEW/s: New objects per second
- CLOAD/s: Class loads per second
- EXC/s: Exceptions per second
- THR/s: Threads created per second

#### javathreads

`javathreads(8)` is a `bpftrace` tool to show thread start and stop events. Example output:

```bash
Attaching 3 probes...
TIME    PID/TID  -- THREAD
14:15:00 3892/3904 => Reference Handler
14:15:00 3892/3905 => Finalizer
14:15:00 3892/3906 => C2 CompilerThread0
14:15:00 3892/3908 => C1 CompilerThread0
14:15:00 3892/3909 => Common-Cleaner
14:15:01 3892/3911 => C2 CompilerThread1
14:15:02 3892/3935 => FreeCo1Client:Resource Loader
14:15:02 3892/3937 => FreeCo1Client:Worker
14:15:02 3892/3935 => FreeCo1Client:Resource Loader
14:15:02 3892/3939 => Image Fetcher 0
14:15:03 3892/3952 => FreeCo1Client:Resource Loader
```

#### javacalls

`javacalls(8)` is a BCC and `bpftrace` tool that counts Java method calls. Example usage:

```bash
javacalls 16914
```

Output:

- net/sf/freeco1/client/control/InGameInputHandler$$Lambda$443,get$Lambda
- sun/awt/X11/XWindowPeer, getLocalHostname
- net/sf/freecol/common/model/unitType, getSpace
- java/awt/image/Raster, getHeight

If no results are seen, ensure that Java is run with the `-XX:+ExtendedDTraceProbes` option.