### 3.13.2 ADD_POLICY

The `add_policy` procedure creates a new data redaction policy for a table.

#### Syntax
```sql
PROCEDURE add_policy (
    object_schema IN VARCHAR2 DEFAULT NULL,
    object_name IN VARCHAR2,
    policy_name IN VARCHAR2,
    policy_description IN VARCHAR2 DEFAULT NULL,
    column_name IN VARCHAR2 DEFAULT NULL,
    column_description IN VARCHAR2 DEFAULT NULL,
    function_type IN INTEGER DEFAULT DBMS_REDACT.FULL,
    function_parameters IN VARCHAR2 DEFAULT NULL,
    expression IN VARCHAR2,
    enable IN BOOLEAN DEFAULT TRUE,
    regexp_pattern IN VARCHAR2 DEFAULT NULL,
    regexp_replace_string IN VARCHAR2 DEFAULT NULL,
    regexp_position IN INTEGER DEFAULT DBMS_REDACT.RE_BEGINNING,
    regexp_occurrence IN INTEGER DEFAULT DBMS_REDACT.RE_ALL,
    regexp_match_parameter IN VARCHAR2 DEFAULT NULL,
    custom_function_expression IN VARCHAR2 DEFAULT NULL
);
```

#### Parameters
- **object_schema**: Specifies the name of the schema in which the object resides and on which the data redaction policy will be applied. If `NULL`, the given object is searched by the order specified by the `search_path` setting.
- **object_name**: Name of the table on which the data redaction policy is created.
- **policy_name**: Name of the policy to be added. Ensure that the `policy_name` is unique for the table on which the policy is created.
- **policy_description**: Description of the redaction policy.
- **column_name**: Name of the column to which the redaction policy applies. To redact more than one column, use the `alter_policy` procedure to add additional columns.
- **column_description**: Description of the column to be redacted. This parameter is not supported; if you specify a description for a column, you will receive a warning message.
- **function_type**: The type of redaction function to be used. Possible values are `NONE`, `FULL`, `PARTIAL`, `RANDOM`, `REGEXP`, and `CUSTOM`.
- **function_parameters**: Specifies the function parameters for partial redaction and is applicable only for partial redaction.
- **expression**: Specifies the Boolean expression for the table and determines how the policy is to be applied. Redaction occurs if this policy expression evaluates to `TRUE`.
- **enable**: When set to `TRUE`, the policy is enabled upon creation. The default is `TRUE`. When set to `FALSE`, the policy is disabled but can be enabled by calling the `enable_policy` procedure.
- **regexp_pattern**: Specifies the regular expression pattern to redact data. If the `regexp_pattern` does not match, then the `NULL` value is returned.
- **regexp_replace_string**: Specifies the replacement string value.
- **regexp_position**: Specifies the position of a character where the search must begin. By default, the function parameter is `RE_BEGINNING`.
- **regexp_occurrence**: Specifies the replacement occurrence of a substring. If the constant is `RE_ALL`, then the replacement of each matching substring occurs. If the constant is `RE_FIRST`, then the replacement of the first matching substring occurs.
- **regexp_match_parameter**: Changes the default matching behavior of a function. Possible `regexp_match_parameter` constants include `RE_CASE_SENSITIVE`, `RE_CASE_INSENSITIVE`, `RE_MULTIPLE_LINES`, `RE_NEWLINE_WILDCARD`, and `RE_IGNORE_WHITESPACE`.
- **custom_function_expression**: Applicable only for the `CUSTOM` redaction type. This is a function expression (e.g., `schema_name.function_name(argument1, ...)`), allowing users to use their own redaction logic to redact the column data.

#### Example
The following example illustrates how to create a policy and use full redaction for values in the `payment_details_tab` table's `customer_id` column.

```sql
-- Create the table
CREATE TABLE payment_details_tab (
    customer_id NUMBER NOT NULL,
    card_string VARCHAR2(19) NOT NULL
);

-- Insert sample data
BEGIN
    INSERT INTO payment_details_tab VALUES (4000, '1234-1234-1234-1234');
    INSERT INTO payment_details_tab VALUES (4001, '2345-2345-2345-2345');
END;

-- Create a user
CREATE USER redact_user;

-- Grant SELECT permission
GRANT SELECT ON payment_details_tab TO redact_user;

-- Add the redaction policy
BEGIN
    DBMS_REDACT.add_policy(
        object_schema => 'public',
        object_name => 'payment_details_tab',
        policy_name => 'redactPolicy_001',
        policy_description => 'redactPolicy_001 for payment_details_tab table',
        column_name => 'customer_id',
        function_type => DBMS_REDACT.FULL,
        expression => '1=1',
        enable => TRUE
    );
END;
```

**Note:**
- For more information on constants, `function_parameters`, or `regexp` (regular expressions), see "Using DBMS_REDACT Constants and Function Parameters."
- Ensure that the result after redaction is compatible with the column type to avoid runtime errors.