Device Name
Nuband Activ+
Kinsa Smart
Chipolo ONE
SwitchBot Button Pusher
XOSS Cycling Computer
Attacks
Category
Vulnerabilities
IT AM PM A1 A2 A3
Wearable
✓
✓
Thermometer ✓
✓
Tag
✓
Smart Home
✓
Sensor
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Table 8: Vulnerable BLE devices and attack case studies.
may also cause FN, since incomplete disassembled code may be
produced that does not cover the desired configurations. Other
sources of FP or FN could come from the fundamental limitations
of program analysis, such as branch explosion [55] [42].
On the exploitability of the vulnerabilities. While FirmXRay
has identified three types of vulnerabilities from firmware, not all
of them can be exploited. For instance, stationary devices such as
smart home devices are not subject to identity tracking even though
they use random static MAC addresses identified by FirmXRay. In
addition, many devices may have additional layer of security to mit-
igate active and passive MITM attacks, such as authentication and
encryption in application layer. However, through the case studies
of the 5 devices, we have not witnessed such a case among them.
Disclosure of findings. In June 2020, we disclosed our vulnera-
bility findings to all device vendors (in total 205) through emails.
As of the time of this writing, 12 vendors have acknowledged our
findings and taken our suggestions into account, such as Wattbike,
INPEAK, SRM, WOOLF, goTenna, and Chipolo.
Root causes of the vulnerabilities. We believe there are two
main root causes for the identified vulnerabilities. The first is the
lack of hardware capabilities. For instance, a device without I/O
capability is very likely to be configured as no I/O. The second is
the misconfiguration by the developers of the firmware. For exam-
ple, a device with sufficient I/O support is misconfigured as no I/O.
There are multiple reasons for developers to misconfigure firmware.
First, according to our engagement with vendors, many of them
were actually aware of the security problems (e.g., using Just Works
pairing), but they still prefer simpler implementation to favor user
experience. Second, there are also limitations of the BLE module on
smartphones, which make some implementations (e.g., randomized
MAC address) challenging in practice. For instance, the iOS has
limited the BLE capability for app developers [4].
Future work. First, as described in §5.1, we directly unpacked the
mobile app APKs to extract the embedded firmware. Thus, there
may also exist other firmware we cannot obtain, such as those
downloaded from servers. Second, while we have demonstrated
FirmXRay for Nordic and TI, FirmXRay can also be adapted to
other SDKs and architectures. Third, FirmXRay faces a challenge
of confirming the vulnerabilities due to the static analysis, and we
also plan to enable emulation and dynamic analysis on bare-metal
IoT firmware to confirm our results.
7 RELATED WORK
Firmware analysis. Over the past decade, firmware has been an
attractive target for security analysis. With static analysis, FIE [28]
detects memory-safety bugs in micro-controllers, FirmUSB [35]
and ProXray [33] vet the embedded USB devices, FirmAlice [47] un-
covers authentication bypassing vulnerabilities, and Karonte [42]
detects insecure interactions between multiple embedded firmware
binaries. With dynamic analysis, Avatar [56] forwards I/O assess
from emulators to real embedded devices, FirmDyn [23] employs
full system emulation for scalable and automatic analysis of Linux
binaries, Firm-AFL [60] combines system-mode and user-mode em-
ulations for high-throughput firmware fuzzing, P2IM [31] automati-
cally models the I/O behaviours of peripherals to achieve hardware-
independent firmware testing; HALucinator [26] relies on replacing
high-level hardware abstraction layer functions to achieve firmware
re-hosting. Once firmware is able to be executed, a common tech-
nique to find vulnerabilities is fuzzing, such as IoTFuzzer [25] for
IoT devices and PeriScope [52] for Linux kernel peripherals.
BLE security. There have been numerous efforts in BLE attacks and
defenses, including the discovery of vulnerable pairing (e.g., [43, 44,
57]) and BLE packets eavesdropping [44]. Recently, there were also
identity tracking attacks that leverage the static MAC address [27],
signal strength [29], and advertised information [37], and static
UUIDs [63] [20]. To mitigate these privacy attacks, Fawaz et al.
proposed BLE-Guardian [30], a channel-level protection to allow
only authorized peripherals to connect with the protected device.
Most recently, a handful of other research focus on other types of
attacks, such as cross-app co-located attacks [48] and downgrade
attacks [58].
Misconfiguration detection. Misconfiguration has been a prob-
lem in IoT platforms [17] and cloud services [62] [18]. In particular,
as summarized by Alrawi et al., many devices use insecure default
configurations [17]. In addition, some devices have also been re-
vealed to have misconfigurations, such as smart lock [53], smart
speaker [22], and smart light [21], which have led to serious se-
curity concerns such as insecure access control. Compared with
these works, FirmXRay represents a scalable and binary code only
approach to uncover vulnerabilities reflected in the configurations
from bare-metal firmware.
8 CONCLUSION
We have presented FirmXRay, the first automated static binary anal-
ysis tool to detect BLE link layer vulnerabilities from bare-metal
firmware. It features a novel algorithm to systematically recognize
firmware base address for robust disassembling, then precisely iden-
tifies configurations from SDK functions, and finally resolves con-
figuration values to detect the vulnerabilities. The prototype of Fir-
mXRay has been implemented atop Ghidra. To evaluate FirmXRay,
we developed a mobile app based approach to collect bare-metal
firmware at scale, which resulted in 793 unique ones corresponding
to 538 devices. Among them, FirmXRay discovered that 71.5% of
these devices only use Just Works pairing, and nearly all of them
have configured random static MAC addresses and insecure key ex-
changes. We have demonstrated concrete attacks with 5 real-world
BLE devices, which not only undermine user privacy but also safety.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their construc-
tive feedback. This research was supported in part by NSF 1750809
and 1834215, DARPA N6600120C4020, and ONR N00014-17-1-2995.
REFERENCES
[1] 16 bit uuids for members. https://www.bluetooth.com/specifications/assigned-
numbers/16-bit-uuids-for-members/. (Accessed on 09/20/2020).
[2] Ble-stack bluetooth low energy. https://www.ti.com/tool/BLE-STACK. (Accessed
on 09/20/2020).
[3] Bluetooth sig, inc. https://www.bluetooth.com/. (Accessed on 09/20/2020).
[4] Core bluetooth background processing for ios apps. https://developer.apple.
com/library/archive/documentation/NetworkingInternetWeb/Conceptual/
CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/
PerformingTasksWhileYourAppIsInTheBackground.html.
(Accessed on
09/20/2020).
[5] Developing a bluetooth low energy application.
http://software-
dl.ti.com/simplelink/esd/simplelink_cc13x0_sdk/2.20.00.38/exports/docs/
blestack/software-developers-guide/ble-stack-2.x/index.html.
09/20/2020).
(Accessed on
[6] Dialog semiconductor. https://www.dialog-semiconductor.com. (Accessed on
09/20/2020).
[7] Gatt overview.
https://developer.android.com/reference/android/bluetooth/
BluetoothGatt. (Accessed on 09/20/2020).
[8] Ghidra. https://ghidra-sre.org/. (Accessed on 09/20/2020).
[9] Instruction sets - arm developers. https://developer.arm.com/architectures/
instruction-sets. (Accessed on 09/20/2020).
[10] Memory layout. https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.
(Accessed on
nordic.infocenter.sdk5.v11.0.0%2Fbledfu_memory.html.
09/20/2020).
[11] Nordic semiconductor. https://www.nordicsemi.com. (Accessed on 09/20/2020).
[12] Nordic semiconductor infocenter.
https://infocenter.nordicsemi.com/topic/
struct_nrf52/struct/nrf52_softdevices.html?cp=4_5. (Accessed on 09/20/2020).
[13] nrf52 dk - development kit for bluetooth low energy and bluetooth mesh. https:
//www.nordicsemi.com/Software-and-Tools/Development-Kits/nRF52-DK. (Ac-
cessed on 09/20/2020).
[14] Supervisor call interface. https://infocenter.nordicsemi.com/index.jsp?topic=
%2Fcom.nordic.infocenter.sdk5.v14.1.0%2Flib_svc.html. (Accessed on 09/20/2020).
[15] Texas instruments. http://www.ti.com. (Accessed on 09/20/2020).
[16] Bluetooth specification version 4.2.
https://www.bluetooth.org/DocMan/
handlers/DownloadDoc.ashx?doc_id=286439, 2014.
[17] Omar Alrawi, Chaz Lever, Manos Antonakakis, and Fabian Monrose. Sok: Security
evaluation of home-based iot deployments. In 40th IEEE Symposium on Security
and Privacy (SP), pages 1362–1380, May 2019.
[18] Omar Alrawi, Chaoshun Zuo, Ruian Duan, Ranjita Kasturi, Zhiqiang Lin, and
Brendan Saltaformaggio. The betrayal at cloud city: An empirical analysis of
cloud-based mobile backends.
In 28th USENIX Security Symposium (USENIX
Security 19), pages 551–566, Santa Clara, CA, August 2019.
[19] Igor Bisio, Andrea Sciarrone, and Sandro Zappatore. A new asset tracking
architecture integrating rfid, bluetooth low energy tags and ad hoc smartphone
applications. Pervasive and Mobile Computing, 31:79–93, 2016.
[20] Guillaume Celosia and Mathieu Cunche. Fingerprinting bluetooth-low-energy
devices based on the generic attribute profile. In Proceedings of the 2nd Interna-
tional ACM Workshop on Security and Privacy for the Internet-of-Things, pages
24–31, 2019.
[21] Alex Chapman. Hacking into internet connected light bulbs. https://www.
contextis.com/us/blog/hacking-into-internet-connected-light-bulbs, 2014.
[22] Alex Chapman. Alexa, are you listening? https://www.contextis.com/us/blog/
hacking-into-internet-connected-light-bulbs, 2017.
[23] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. Towards
automated dynamic analysis for linux-based embedded firmware. In 2016 Network
and Distributed Systems Security Symposium (NDSS), volume 16, pages 1–16, 2016.
[24] Dongyao Chen, Kang G Shin, Yurong Jiang, and Kyu-Han Kim. Locating and
tracking ble beacons with smartphones. In Proceedings of the 13th International
Conference on emerging Networking EXperiments and Technologies, pages 263–275,
2017.
[25] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan
Zhang. Iotfuzzer: Discovering memory corruptions in iot through app-based
fuzzing. In Proceedings of the 25th Annual Network and Distributed System Security
Symposium (NDSS 18), San Diego, CA, February 2018.
[26] Abraham Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David
Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer.
Halucinator: Firmware re-hosting through abstraction layer emulation. In Pro-
ceedings of the 29th USENIX Security Symposium (USENIX Security 20). USENIX
Association, 2020.
[27] Aveek K Das, Parth H Pathak, Chen-Nee Chuah, and Prasant Mohapatra. Un-
covering privacy leakage in ble network traffic of wearable fitness trackers. In
Proceedings of the 17th International Workshop on Mobile Computing Systems and
Applications, pages 99–104, 2016.
[28] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. {FIE}
on firmware: Finding vulnerabilities in embedded systems using symbolic execu-
tion. In 22nd USENIX Security Symposium (USENIX Security 13), pages 463–478,
2013.
[29] Ramsey Faragher and Robert Harle. Location fingerprinting with bluetooth low
energy beacons. IEEE journal on Selected Areas in Communications, 33(11):2418–
2428, 2015.
[30] Kassem Fawaz, Kyu-Han Kim, and Kang G Shin. Protecting privacy of ble device
users. In 25th USENIX Security Symposium (USENIX Security 16), pages 1205–1221,
2016.
[31] Bo Feng, Alejandro Mera, and Long Lu. P2im: Scalable and hardware-independent
firmware testing via automatic peripheral interface modeling. In Proceedings of
the 29th USENIX Security Symposium (USENIX Security 20). USENIX Association,
2020.
[32] Daniel Filizzola, Sean Fraser, and Nikita Samsonau. Security analysis of bluetooth
technology. 2018.
[33] Farhaan Fowze, Dave Jing Tian, Grant Hernandez, Kevin Butler, and Tuba Yavuz.
Proxray: Protocol model learning and guided firmware analysis. IEEE Transactions
on Software Engineering, 2019.
[34] Carles Gomez, Joaquim Oller, and Josep Paradells. Overview and evaluation of
bluetooth low energy: An emerging low-power wireless technology. Sensors,
12(9):11734–11753, 2012.
[35] Grant Hernandez, Farhaan Fowze, Dave Tian, Tuba Yavuz, and Kevin RB But-
ler. Firmusb: Vetting usb device firmware using domain informed symbolic
execution. In Proceedings of the 24th ACM SIGSAC Conference on Computer and
Communications Security, pages 2245–2262, 2017.
[36] Kai Ren. Bluetooth pairing part 4: Le secure connections - numeric comparison.
https://blog.bluetooth.com/bluetooth-pairing-part-4, 2017.
[37] Aleksandra Korolova and Vinod Sharma. Cross-app tracking via nearby bluetooth
low energy devices. In Proceedings of the Eighth ACM Conference on Data and
Application Security and Privacy, pages 43–52, 2018.
[38] JongHyup Lee, Thanassis Avgerinos, and David Brumley. Tie: Principled reverse
engineering of types in binary programs. In 18th Network and Distributed Systems
Security Symposium (NDSS), 2011.
[39] Zhiqiang Lin, Xiangyu Zhang, and Dongyan Xu. Automatic reverse engineering
of data structures from binary execution.
In Proceedings of the 17th Annual
Network and Distributed System Security Symposium (NDSS’10), San Diego, CA,
February 2010.
[40] Jeremy Martin, Douglas Alpuche, Kristina Bodeman, Lamont Brown, Ellis Fenske,
Lucas Foppe, Travis Mayberry, Erik Rye, Brandon Sipes, and Sam Teplov. Handoff
all your privacy–a review of apple’s bluetooth low energy continuity protocol.
Proceedings on Privacy Enhancing Technologies, 2019(4):34–53, 2019.
[41] Sode Pallavi and V Anantha Narayanan. An overview of practical attacks on
ble based iot devices and their security. In 2019 5th International Conference on
Advanced Computing & Communication Systems (ICACCS), pages 694–698, 2019.
[42] Nilo Redini, Aravind Machiry, Ruoyu Wang, Chad Spensky, Andrea Continella,
Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. Karonte: Detecting
insecure multi-binary interactions in embedded firmware. In 41st IEEE Symposium
on Security and Privacy (SP), pages 431–448.
[43] Tomas Rosa. Bypassing passkey authentication in bluetooth low energy. IACR
Cryptology ePrint Archive, 2013:309, 2013.
[44] Mike Ryan. Bluetooth: With low energy comes low security. In Presented as part
of the 7th USENIX Workshop on Offensive Technologies, 2013.
[45] Benjamin Schwarz, Saumya Debray, and Gregory Andrews. Disassembly of
executable code revisited. In Ninth Working Conference on Reverse Engineering,
2002. Proceedings., pages 45–54. IEEE, 2002.
https:
//www.nordicsemi.com/-/media/Investor-Relations-and-QA/Quarterly-
Presentations/2019/Q4_Quarterly_presentation_2019.pdf?la=en&hash=
EE265776035B52B96B1BE14541877A97500CD05B, 2019.
Quarterly presentation q4 2019.
[46] Nordic Semiconductor.
[47] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and
Giovanni Vigna. Firmalice-automatic detection of authentication bypass vulner-
abilities in binary firmware. In 22nd Network and Distributed Systems Security
Symposium (NDSS), 2015.
[48] Pallavi Sivakumaran and Jorge Blasco. A study of the feasibility of co-located
app attacks against ble and a large-scale analysis of the current application-layer
security landscape. In 28th USENIX Security Symposium, pages 1–18, 2019.
[49] Pallavi Sivakumaran and Jorge Blasco Alis. A low energy profile: Analysing
characteristic security on ble peripherals.
In Proceedings of the Eighth ACM
Conference on Data and Application Security and Privacy, pages 152–154, 2018.
[50] Igor Skochinsky. Intro to embedded reverse engineering for pc reversers. In
REcon conference, Montreal, Canada, 2010.
[51] Asia Slowinska, Traian Stancescu, and Herbert Bos. Howard: A dynamic exca-
vator for reverse engineering data structures. In 18th Network and Distributed
Systems Security Symposium (NDSS), 2011.
[52] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn
Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael
Franz. Periscope: An effective probing and fuzzing framework for the hardware-
os boundary. In 26th Network and Distributed Systems Security Symposium (NDSS),
pages 1–15. Internet Society, 2019.
[53] Blase Ur, Jaeyeon Jung, and Stuart Schechter. The current state of access control
for smart devices in homes. In Workshop on Home Usable Privacy and Security
(HUPS), volume 29, pages 209–218. HUPS 2014, 2013.
[54] Mark Weiser. Program slicing. IEEE Transactions on software engineering, (4):352–
357, 1984.
[55] Yan Xiong, Cheng Su, Wenchao Huang, Fuyou Miao, Wansen Wang, and Hengyi
Ouyang. Smartverif: Push the limit of automation capability of verifying security
protocols by dynamic strategies. In 29th USENIX Security Symposium (USENIX
Security 20), pages 253–270, 2020.
[56] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti, et al. Avatar: A
framework to support dynamic security analysis of embedded systems’ firmwares.
In 21st Network and Distributed Systems Security Symposium (NDSS), volume 14,
pages 1–16, 2014.
[57] Wondimu K Zegeye. Exploiting bluetooth low energy pairing vulnerability in
telemedicine. International Foundation for Telemetering, 2015.
[58] Yue Zhang, Jian Weng, Rajib Dey, Yier Jin, Zhiqiang Lin, and Xinwen Fu. Breaking
secure pairing of bluetooth low energy using downgrade attacks. In 29th USENIX
Security Symposium (USENIX Security 20), pages 37–54, 2020.
[59] Qingchuan Zhao, Haohuang Wen, Zhiqiang Lin, Dong Xuan, and Ness Shroff.
On the accuracy of measured proximity of bluetooth-based contact tracing apps.
In International Conference on Security and Privacy in Communication Networks,
2020.
[60] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and
Limin Sun. Firm-afl: high-throughput greybox fuzzing of iot firmware via aug-
mented process emulation. In 28th USENIX Security Symposium (USENIX Security
19), pages 1099–1114, 2019.
[61] Ruijin Zhu, Yu-an Tan, Quanxin Zhang, Fei Wu, Jun Zheng, and Yuan Xue.
Determining image base of firmware files for arm devices. IEICE TRANSACTIONS
on Information and Systems, 99(2):351–359, 2016.
[62] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. Why does your data leak?
uncovering the data leakage in cloud from mobile apps. In 40th IEEE Symposium
on Security and Privacy (SP), pages 1296–1310, May 2019.
[63] Chaoshun Zuo, Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. Automatic
fingerprinting of vulnerable ble iot devices with static uuids from mobile apps. In
Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications
Security, pages 1469–1483, November 2019.