# Device Vulnerabilities and Attack Case Studies

## Table 8: Vulnerable BLE Devices and Attack Case Studies
| Device Name         | Category        | IT | AM | PM | A1 | A2 | A3 |
|---------------------|-----------------|----|----|----|----|----|----|
| Nuband Activ+       | Wearable        | ✓  |    |    |    |    |    |
| Kinsa Smart         | Thermometer     |    | ✓  |    |    |    |    |
| Chipolo ONE         | Tag             |    |    | ✓  |    |    |    |
| SwitchBot Button Pusher | Smart Home  |    |    |    | ✓  |    |    |
| XOSS Cycling Computer | Sensor        |    |    |    |    | ✓  | ✓  |

### Potential False Positives (FP) and False Negatives (FN)
Incomplete disassembled code may result in false negatives (FN), as it may not cover all desired configurations. Other sources of FP or FN could arise from the inherent limitations of program analysis, such as branch explosion [55] [42].

### Exploitability of Vulnerabilities
While FirmXRay has identified three types of vulnerabilities from firmware, not all can be exploited. For example, stationary devices like smart home devices are not susceptible to identity tracking, even if they use random static MAC addresses. Additionally, many devices have additional security layers, such as authentication and encryption at the application layer, to mitigate active and passive Man-in-the-Middle (MITM) attacks. However, our case studies of the five devices did not reveal any such mitigations.

### Disclosure of Findings
In June 2020, we disclosed our vulnerability findings to 205 device vendors via email. As of this writing, 12 vendors, including Wattbike, INPEAK, SRM, WOOLF, goTenna, and Chipolo, have acknowledged our findings and taken our suggestions into account.

### Root Causes of Vulnerabilities
We believe there are two primary root causes for the identified vulnerabilities:
1. **Lack of Hardware Capabilities**: Devices without I/O capability are often configured with no I/O.
2. **Misconfiguration by Developers**: Devices with sufficient I/O support are misconfigured as no I/O. This can occur due to:
   - Vendors prioritizing user experience over security, despite being aware of issues like using Just Works pairing.
   - Limitations of the BLE module on smartphones, which make some implementations (e.g., randomized MAC addresses) challenging in practice. For instance, iOS has limited BLE capabilities for app developers [4].

### Future Work
1. **Firmware Extraction**: We directly unpacked mobile app APKs to extract embedded firmware. There may be other firmware we cannot obtain, such as those downloaded from servers.
2. **Adaptation to Other SDKs**: While FirmXRay is demonstrated for Nordic and TI, it can be adapted to other SDKs and architectures.
3. **Vulnerability Confirmation**: FirmXRay faces challenges in confirming vulnerabilities due to static analysis. We plan to enable emulation and dynamic analysis on bare-metal IoT firmware to confirm our results.

## Related Work

### Firmware Analysis
Over the past decade, firmware has been a target for security analysis. Static analysis tools like FIE [28], FirmUSB [35], ProXray [33], FirmAlice [47], and Karonte [42] detect various vulnerabilities. Dynamic analysis tools include Avatar [56], FirmDyn [23], Firm-AFL [60], P2IM [31], and HALucinator [26]. Once firmware is executable, fuzzing techniques like IoTFuzzer [25] and PeriScope [52] are commonly used to find vulnerabilities.

### BLE Security
Numerous efforts have been made in BLE attacks and defenses, including the discovery of vulnerable pairing [43, 44, 57] and BLE packet eavesdropping [44]. Identity tracking attacks leverage static MAC addresses [27], signal strength [29], advertised information [37], and static UUIDs [63, 20]. To mitigate these privacy attacks, solutions like BLE-Guardian [30] have been proposed. Recent research also focuses on cross-app co-located attacks [48] and downgrade attacks [58].

### Misconfiguration Detection
Misconfiguration is a problem in IoT platforms [17] and cloud services [62, 18]. Many devices use insecure default configurations [17], and some have revealed misconfigurations leading to serious security concerns, such as insecure access control [53, 22, 21]. FirmXRay offers a scalable and binary-only approach to uncover vulnerabilities reflected in configurations from bare-metal firmware.

## Conclusion
We presented FirmXRay, an automated static binary analysis tool to detect BLE link layer vulnerabilities from bare-metal firmware. It features a novel algorithm to recognize firmware base addresses, identify configurations from SDK functions, and resolve configuration values to detect vulnerabilities. The prototype was implemented atop Ghidra. Our evaluation involved collecting 793 unique firmwares corresponding to 538 devices. FirmXRay discovered that 71.5% of these devices use Just Works pairing, and nearly all have configured random static MAC addresses and insecure key exchanges. We demonstrated concrete attacks with five real-world BLE devices, which not only undermine user privacy but also safety.

## Acknowledgment
We thank the anonymous reviewers for their constructive feedback. This research was supported in part by NSF 1750809 and 1834215, DARPA N6600120C4020, and ONR N00014-17-1-2995.

## References
[References listed here as in the original document]