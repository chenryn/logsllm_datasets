title:Dead Store Elimination (Still) Considered Harmful
author:Zhaomo Yang and
Brian Johannesmeyer and
Anders Trier Olesen and
Sorin Lerner and
Kirill Levchenko
Dead Store Elimination (Still) Considered Harmful
Zhaomo Yang and Brian Johannesmeyer, University of California, San Diego;  
Anders Trier Olesen, Aalborg University; Sorin Lerner and Kirill Levchenko,  
University of California, San Diego
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/yang
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXDead Store Elimination (Still) Considered Harmful
Zhaomo Yang1 Brian Johannesmeyer1 Anders Trier Olesen2 Sorin Lerner1 Kirill Levchenko1
1 UC San Diego
2 Aalborg University
Abstract
Dead store elimination is a widely used compiler op-
timization that reduces code size and improves perfor-
mance. However, it can also remove seemingly useless
memory writes that the programmer intended to clear
sensitive data after its last use. Security-savvy develop-
ers have long been aware of this phenomenon and have
devised ways to prevent the compiler from eliminating
these data scrubbing operations.
In this paper, we survey the set of techniques found
in the wild that are intended to prevent data-scrubbing
operations from being removed during dead store elim-
ination. We evaluated the effectiveness and availabil-
ity of each technique and found that some fail to pro-
tect data-scrubbing writes. We also examined eleven
open source security projects to determine whether their
speciﬁc memory scrubbing function was effective and
whether it was used consistently. We found four of the
eleven projects using ﬂawed scrubbing techniques that
may fail to scrub sensitive data and an additional four
projects not using their scrubbing function consistently.
We address the problem of dead store elimination remov-
ing scrubbing operations with a compiler-based approach
by adding a new option to an LLVM-based compiler
that retains scrubbing operations. We also synthesized
existing techniques to develop a best-of-breed scrubbing
function and are making it available to developers.
1
Concerns over memory disclosure vulnerabilities in C
and C++ programs have long led security application
developers to explicitly scrub sensitive data from mem-
ory. A typical case might look like the following:
Introduction
char * password = malloc(PASSWORD_SIZE);
// ... read and check password
memset(password, 0, PASSWORD_SIZE);
free(password);
The memset is intended to clear the sensitive password
buffer after its last use so that a memory disclosure vul-
nerability could not reveal the password. Unfortunately,
compilers perform an optimization—called dead store
elimination (DSE)—that removes stores that have no
effect on the program result, either because the stored
value is overwritten or because it is never read again.
In this case, because the buffer is passed to free after
being cleared, the compiler determines that the memory
scrubbing memset has no effect and eliminates it.
Removing buffer scrubbing code is an example of
what D’Silva et al. [30] call a “correctness-security gap.”
From the perspective of the C standard, removing the
memset above is allowed because the contents of un-
reachable memory are not considered part of the seman-
tics of the C program. However, leaving sensitive data in
memory increases the damage posed by memory disclo-
sure vulnerabilities and direct attacks on physical mem-
ory. This leaves gap between what the standard considers
correct and what a security developer might deem cor-
rect. Unfortunately, the C language does not provide a
guaranteed way to achieve what the developer intends,
and attempts to add a memory scrubbing function to the
C standard library have not seen mainstream adoption.
Security-conscious developers have been left to devise
their own means to keep the compiler from optimizing
away their scrubbing functions, and this has led to a pro-
liferation of “secure memset” implementations of vary-
ing quality.
The aim of this paper is to understand the current state
of the dead store elimination problem and developers’
attempts to circumvent it. We begin with a survey of ex-
isting techniques used to scrub memory found in open
source security projects. Among more than half a dozen
techniques, we found that several are ﬂawed and that
none are both universally available and effective. Next,
using a specially instrumented version of the Clang com-
piler, we analyzed eleven high-proﬁle security projects to
determine whether their implementation of a scrubbing
function is effective and whether it is used consistently
within the project. We found that only three of the eleven
projects did so.
To aid the current state of affairs, we developed a
single best-of-breed scrubbing function that combines
the effective techniques we found in our survey. We
have shared our implementation with developers of the
projects we surveyed that lacked a reliable scrubbing
function and have made it available to the public. While
not a perfect solution, we believe ours combines the best
techniques available today and offers developers a ready-
to-use solution for their own projects.
We also developed a scrubbing aware C compiler
based on Clang. Our compiler protects scrubbing oper-
USENIX Association
26th USENIX Security Symposium    1025
ations by inhibiting dead store elimination in case where
a store operation may have been intended as a scrubbing
operation by the developer. Our solution does not com-
pletely disable DSE, minimizing the performance impact
of our mechanism. Our performance evaluation shows
that our modiﬁed compiler introduces virtually no per-
formance penalty.
In total, our contributions are as follows:
O We survey scrubbing techniques currently found in
the wild, scoring each in terms of its availabil-
ity and reliability. In particular, we identify several
ﬂawed techniques, which we reported to developers
of projects relying on them. We also report on the per-
formance of each technique, where we found an order
of magnitude difference between the best and worst
performing techniques.
O We present a case study of eleven security projects
that have implemented their own scrubbing function.
We found that no two projects’ scrubbing functions
use the same set of techniques. We also identify com-
mon pitfalls encountered in real projects.
O We develop and make publicly available a best-of-
breed scrubbing function that combines the most reli-
able techniques found in use today.
O We develop a scrubbing-safe dead store elimination
optimization pass that protects memory writes in-
tended to scrub sensitive data from being eliminated.
Our mechanism has negligible performance overhead
and can be used without any source code changes.
The rest of the paper is organized as follows. Section 2
provides background for the rest of the paper and de-
scribes the related work. Section 3 surveys the existing
techniques that are used to implement reliable scrubbing
functions and then Section 4 evaluates their performance.
Section 5 examines the reliability and usage of scrub-
bing functions of eleven popular open source applica-
tions. Section 6 describes our secure_memzero imple-
mentation. Section 7 describes our secure DSE imple-
mentation and evaluates its performance. Section 8 dis-
cusses our results. Section 9 concludes the paper.
2 Background and Related Work
D’Silva et al. [30] use the term correctness-security gap
to describe the gap between the traditional notion of
compiler correctness and the correctness notion that a
security-conscious developers might have. They found
instances of a correctness-security gap in several opti-
mizations, including dead store elimination, function in-
lining, code motion, common subexpression elimination,
and strength reduction.
Lu et al. [32] investigate an instance of this gap in
which the compiler introduces padding bytes in data
structures to improve performance. These padding bytes
may remain uninitialized and thus leak data if sent to the
outside world. By looking for such data leakage, they
found previously undiscovered bugs in the Linux and
Android kernels. Wang et al. [38] explore another in-
stance of the correctness-security gap: compilers some-
times remove code that has undeﬁned behavior that, in
some cases, includes security checks. They developed a
static checker called STACK that identiﬁes such code in
C/C++ programs and they used it to uncover 160 new
bugs in commonly deployed systems.
Our work examines how developers handle the
correctness-security gap introduced by aggressive dead
store elimination. While the soundness and security of
dead store elimination has been studied formally [28, 31,
29], the aim of our work is to study the phenomenon em-
pirically.
Bug reports are littered with reports of DSE negatively
affecting program security, as far back as 2002 from Bug
8537 in GCC titled “Optimizer Removes Code Neces-
sary for Security” [3], to January 2016 when OpenSSH
patched CVE-2016-0777, which allowed a malicious
server to read private SSH keys by combining a memory
disclosure vulnerability with errant memset and bzero
memory scrubs [10]; or February 2016 when OpenSSL
changed its memory scrubbing technique after discussion
in Issue 445 [22]; or Bug 751 in OpenVPN from October
2016 about secret data scrubs being optimized away [26].
Despite developers’ awareness of such problems, there
is no uniformly-used solution. The CERT C Secure Cod-
ing Standard [37] recommends SecureZeroMemory as
a Windows solution, memset_s as a C11 solution, and
the volatile data pointer technique as a C99 solution. Un-
fortunately, each of these solutions has problems. The
Windows solution is not cross-platform. For the rec-
ommended C11 memset_s solution, to the best of our
knowledge, there is no standard-compliant implemen-
tation. Furthermore, while the CERT solution for C99
solution may prevent most compilers from removing
scrubbing operations, the standard does not guarantee
its correctness [36]. Furthermore, another common tech-
nique, using a volatile function pointer, is not guaran-
teed to work according to the standard because although
the standard requires compilers to access the function
pointer, it does not require them to make a call via that
pointer [35].
3 Existing Approaches
Until recently, the C standard did not provide a way to
ensure that a memset is not removed, leaving developers
who wanted to clear sensitive memory were left to
devise their own techniques. We surveyed
security-related open source projects to determine what
techniques developers were using to clear memory, and
in this section we present the results of our survey. For
1026    26th USENIX Security Symposium
USENIX Association
each technique, we describe how it is intended to work,
its availability on different platforms, and its
effectiveness at ensuring that sensitive data is scrubbed.
We rate the effectiveness of a technique on a three-level
scale:
(cid:5) Effective. Guaranteed to work (barring ﬂaws in
(cid:5) Effective in practice. Works with all
implementation).
compilation options and on all the compilers we
tested (GCC, Clang, and MSVC), but is not
guaranteed in principle.
(cid:5) Flawed. Fails in at least one conﬁguration.
In Section 4 we also compare the performance of a
subset of the surveyed techniques.
The scrubbing techniques we found can be divided
into four groups based on how they attempt to force
memory to be cleared:
(cid:5) Rely on the platform. Use a function offered
by the operating system or a library that
guarantees memory will be cleared.
(cid:5) Disable optimization. Disable the optimization
(cid:5) Hide semantics. Hide the semantics of the
that removes the scrubbing operation.
clearing operation, preventing the compiler from
recognizing it as a dead store.
(cid:5) Force write. Directly force the compiler to
write to memory.
In the remainder of this section, we describe and discuss
each technique in detail.
3.1 Platform-Supplied Functions
The easiest way to ensure that memory is scrubbed
is to call a function that guarantees that memory will
be scrubbed. These deus ex machina techniques rely
on a platform-provided function that guarantees the de-
sired behavior and lift the burden of ﬁghting the op-
timizer from the developers’ shoulders. Unfortunately,
these techniques are not universally available, forcing de-
velopers to come up with backup solutions.
3.1.1 Windows SecureZeroMemory
On Windows, SecureZeroMemory is designed to be a
reliable scrubbing function even in the presence of opti-
mizations. This is achieved by the support from the Mi-
crosoft Visual Studio compiler, which never optimizes
out a call to SecureZeroMemory. Unfortunately, this
function is only available on Windows.
Used in: Kerberos’s zap, Libsodium’s sodium_mem-
zero, Tor’s memwipe.
Availability: Windows platforms.
Effectiveness: Effective.
3.1.2 OpenBSD explicit_bzero
Similarly OpenBSD provides explicit_bzero, a
optimization-resistant analogue of the BSD bzero func-
tion. The explicit_bzero function has been available
in OpenBSD since version 5.5 and FreeBSD since ver-
sion 11. Under the hood, explicit_bzero simply calls
bzero, however, because explicit_bzero is deﬁned
in the C standard library shipped with the operating sys-
tem and not in the compilation unit of the program using
it, the compiler is not aware of this and does not elimi-
nate the call to explicit_bzero. As discussed in Sec-
tion 3.3.1, this way of keeping the compiler in the dark
only works if deﬁnition and use remain separate through
compilation and linking. This is the case with OpenBSD
and FreeBSD, which dynamically link to the C library at
runtime.
Used in: Libsodium’s sodium_memzero, Tor’s mem-
wipe, OpenSSH’s explicit_bzero.
Availability: FreeBSD and OpenBSD.
Effectiveness: Effective (when libc is a shared library).
3.1.3 C11 memset_s
Annex K of the C standard (ISO/IEC 9899-2011) intro-
duced the memset_s function, declared as
errno_t memset_s(void* s, rsize_t smax,
int c, rsize_t n);
Similar to memset, the memset_s function sets a num-
ber of the bytes starting at address s to the byte value c.
The number of bytes written is the lesser of smax or n.
By analogy to strncpy, the intention of having two size
arguments is prevent a buffer overﬂow when n is an un-
trusted user-supplied argument; setting smax to the size
allocated for s guarantees that the buffer will not be over-
ﬂowed. More importantly, the standard requires that the
function actually write to memory, regardless of whether
or not the written values are read.
The use of two size arguments, while consistent stylis-
tically with other _s functions, has drawbacks. It differs
from the familiar memset function which takes one size
argument. The use of two arguments means that a devel-
oper can’t use memset_s as a drop-in replacement for
memset. It may also lead to incorrect usage, for exam-
ple, by setting smax or n to 0, and thus, while preventing
a buffer overﬂow, would fail to clear the buffer as in-
tended.
While memset_s seems like the ideal solution, it’s
implementation has been slow. There may be several
reasons for this. First, memset_s is not required by the
standard. It is part of the optional Appendix K. C11
treats all the function in the Annex K as a unit. That
is, if a C library wants to implement the Annex K in a
standard-conforming fashion, it has to implement all
of the functions deﬁned in this annex. At the time of
USENIX Association
26th USENIX Security Symposium    1027
this writing, memset_s is not provided by the GNU C
Library nor by the FreeBSD, OpenBSD, or NetBSD
standard libraries. It’s poor adoption and perceived ﬂaws
have led to calls for its removal from the standard [33].
Used
sodium_memzero, Tor’s
memwipe, OpenSSH’s
explicit_bzero, CERT’s
Windows-compliant solution [37].
Availability: No mainstream support.
Effectiveness: Effective.
in: Libsodium’s
3.2 Disabling Optimization
Since the dead store elimination problem is caused by
compiler optimization, it is possible to prevent scrubbing
stores from being eliminated by disabling compiler op-
timization. Dead store elimination is enabled (on GCC
and Clang) at optimization level -O1, so code compiled
with no optimization would retain the scrubbing writes.
However, disabling optimization completely can signiﬁ-
cantly degrade performance, and is eschewed by devel-
opers. Alternatively, some compilers allow optimizations
to be enabled individually, so, in principle, a program
could be compiled with all optimizations except dead
store elimination enabled. However, some optimization
passes work better when dead stores have already been
eliminated. Also, specifying the whole list of optimiza-
tion passes instead of a simple optimization level like O2
is cumbersome.
Many compilers, including Microsoft Visual C, GCC
and Clang, provide built-in versions of some C library
functions, including memset. During compilation, the
compiler replaces calls to the C library function with its
built-in equivalent to improve performance. In at least
one case we found, developers attempted to preserve
scrubbing stores by disabling the built-in memset in-
trinsic using the -fno-builtin-memset ﬂag. Unfortu-
nately, while this may disable the promotion of standard
C library functions to intrinsics, it does not prevent the
compiler from understanding the semantics of memset.
Furthermore, as we found during our performance mea-
surements (Section 4), the -fno-builtin-memset ﬂag
does not not prevent the developer from calling the
intrinsic directly, triggering dead store elimination. In
particular, starting with glibc 2.3.4 on Linux, deﬁning
_FORTIFY_SOURCE to be an integer greater than 0 en-
ables additional compile-time bounds checks in common
functions like memset. In this case, if the checks succeed,
the inline deﬁnition of memset simply calls the built-in
memset. As a result, the -fno-builtin-memset option
did not protect scrubbing stores from dead store elimina-
tion.
Used in: We are not aware of any programs using this
technique.
Availability: Widely available.
Effectiveness: Flawed (not working when newer versions
of glibc and GCC are used and optimization level is O2
or O3).
3.3 Hiding Semantics
Several scrubbing techniques attempt to hide the seman-
tics of the scrubbing operation from the compiler. The
thinking goes, if the compiler doesn’t recognize that an
operation is clearing memory, it will not remove it.
3.3.1 Separate Compilation
The simplest way to hide the semantics of a scrubbing
operation from the compiler is to implement the scrub-
bing operation (e.g. by simply calling memset) in a sep-
arate compilation unit. When this scrubbing function is
called in a different compilation unit than the deﬁning
one, the compiler cannot remove any calls to the scrub-
bing function because the compiler does not know that