two use cases are connected with one another using inheritance, 
>,  or  >  relationships,  respectively.  From 
[18,  p.2-138], 
is  for 
specialization  (containing  all  of  the  common  behaviors  of  the 
parent use case and some other ones). For two use cases uci and 
ucj  connected  by  an 
(the 
generalization  arrow  from  ucj  to  uci),  the  CLS  of  the  child  use 
case ucj must dominate the CLS of the parent use case uci. 
SAR UCIS (Use Case Inheritance for Specialization): ∀ use cases 
uci and ucj, ucj securely (MAC) inherits uci (the generalization 
arrow from ucj to uci) ⇔ ucj.CLS ≥ uci.CLS. 
Example:  In  “Create  New  Survey”  (Figure  1),  the  use  case 
Add  Special  Question  is  securely  connected  to  use  case  Add 
Question by specialization as Add_Special_Question.CLS = S 
≥ Add_Question.CLS = C.♦ 
type  of  use  cases 
for  specialization 
inheritance 
inheritance 
the 
For two use cases uci and ucj connected by an >, the 
CLS of uci on the origin of the include arrow must dominate the 
CLS of ucj on the destination of the include arrow: 
SAR  UCI  (Use  Case  Inclusion):  ∀  use  cases  uci  and  ucj,  uci 
securely (MAC) includes ucj ⇔ uci.CLS ≥ ucj.CLS. 
Example:  In  “Create  New  Survey”  (Figure  1),  the  use  case 
Add Question securely includes use case Categorize Question 
as Add_Question.CLS = C ≥ Categorize_Question.CLS = C.♦ 
For  two use cases uci and ucj connected by an >, the 
CLS of the extending ucj on the origin of the extend arrow must 
be less than or equal to the CLS of the base uci on the destination 
of the extend arrow: 
SAR  UCE  (Use  Case  Extension):  ∀  uci  and  ucj,  ucj  securely 
(MAC) extends uci  ⇔ uci.CLS ≥ ucj.CLS. 
Example:  In  “Create  New  Survey”  (Figure  1),  the  use  case 
Add Question Category securely extends use case Categorize 
Question 
≥ 
Add_Question_Category.CLS = C.♦ 
Categorize_Question.CLS 
as 
C 
= 
As  software  designers  are  defining  use  cases  and  establishing 
dependencies (inheritance, inclusion, and extension) among them, 
the SARs UCIS, UCI, and UCE insure that the assigned CLSs of 
the use cases remain consistent with respect to domination in the 
appropriate direction of the relationship. 
4.2  Tier 2 MAC Security Assurance Rules 
In Tier 2 of the software/security design process, the emphasis is 
on defining the classes that are utilized by each use case. We have 
added  this  step  to  the  software/security  design  process,  as  a 
prelude to the message passing dependencies that are defined in 
sequence  diagrams.  The  UML  does  not  support  an  explicit 
diagram type to associate use cases with the classes that will be 
utilized to realize them; rather, it is accomplished implicitly when 
the designer chooses the classes (objects) that are involved in the 
sequence diagram in order to describe the activities of the related 
use  cases.  In  Tier  2,  for  a  class  c  (intended)  to  be  used  in  a 
sequence diagram to serve the goal (i.e., realize the functionality) 
of  use  case  uc,  the  CLS  of  the  uc  must  dominate  the  minimum 
CLS of c. 
SAR UCC (Use Case-Class): ∀ use cases uc and c, uc securely 
(MAC) uses c ⇒  uc.CLS ≥ c.CLSmin. 
Note  that  Tier  2  represents  the  initial  creation  stage  of  the 
sequence  diagram  when 
the  use  cases  and  associated 
classes/objects  are  chosen,  and  does  not  include  the  method 
dependencies.    Note  also  that  in  order  to  explicitly  support  the 
associations of classes with use cases for Tier 2, we are planning 
on adding this capability as a property for secure software design 
in  UML  into  our  prototype  environment  (see  Section  5).    The 
objective  would  be  to  provide  the  means  to  perform  the  SAR 
UCC checks at an even earlier stage than the sequence diagram 
creation.  
4.3  Tier 3 MAC Security Assurance Rules 
Tier 3 is a refinement of Tier 2 to support method calls between 
the different entities (use case and objects) in a sequence diagram.  
To  present  the  SARs  for  Tier  3,  it  is  necessary  to  provide 
additional notation. A method m defined in a class c (denoted c.m) 
is the implementation of an operation to describe a set of activities 
for a specific behavior of the class c. Let c.M be the set of all of 
If cj.my ∈ cj.M¬W: ac.CLR ≥ cj.my.CLS. 
If cj.my ∈ cj.MW: 
ac.CLR = cj.my.CLS for the Strict *-Property 
ac.CLR ≤ cj.my.CLS for the Liberal *-Property 
ac.CLR ≥ cj.my.CLS for the Simple Integrity Property. 
the  methods  defined  in  c.  In  support  of  OO  design,  we  assume 
that all of the attributes of a class are private by default (secure), 
attributes  can  only  be  modified  by  public  or  private  methods  - 
they cannot be modified directly (without a method call).  Further, 
we adopt from [26] that there are two types of disjoint methods in 
a class: mutators that alter the state of an instance and observers 
that report on the state of an instance. This leads to: (1). c.MW = 
{c.m | c.m modifies attribute(s) of an object of class c} (mutators) 
and  (2).  c.M¬W  =  c.M  \  c.MW
  as  the  set  of  methods  that  do  not 
modify attribute(s) of an object of class c (observers). An element 
of  c.MW  (c.M¬W,  respectively)  is  called  a  mutable  (immutable) 
method or MuM (IMuM) for short. Using these method sets, we 
can define SARs in a sequence diagram for the actor ac directly 
calling  method  cj.my  and  method  ci.mx  directly  calling  method 
cj.my (message passing). Note that the classes ci and cj may be the 
same  but  mx  must  be  different  from  my,  at  this  time,  we  do  not 
support  recursion  in  sequence  diagrams  for  security  assurance.  
The  relevant  SARs  to  enforce  actor/method  and  method/method 
interactions are: 
SAR AM (Actor Calling Method): ∀ actor ac and method cj.my, 
ac securely (MAC) uses cj.my ⇔   
(1). 
(2). 
2a. 
2b. 
2c. 
SAR MM (Method Calling Method): ∀ methods ci.mx and cj.my, 
ci.mx securely (MAC) calls cj.my ⇔   
If cj.my ∈ cj.M¬W: ci.mx.CLS ≥ cj.my.CLS. 
(1). 
If cj.my ∈ cj.MW: 
(2). 
ci.mx.CLS = cj.my.CLS for the Strict *-Property 
2a. 
ci.mx.CLS ≤ cj.my.CLS for the Liberal *-Property 
2b. 
ci.mx.CLS ≥ cj.my.CLS for the Simple Integrity Property. 
2c. 
The MuM cj.my may be used by actor ac indirectly via the calling 
of  other  methods.  For  the  Simple  Integrity  Property,  due  to  the 
transitivity of the  ≥ relation, no matter the type of method cj.my 
(MuM or IMuM), we always have ac.CLR ≥ cj.my.CLS. However, 
we  have  to  check  explicitly  whether  ac.CLR  =  cj.my.CLS  (for 
Strict *-Property) or ac.CLR ≤ cj.my.CLS (for Liberal *-Property) 
if the MuM cj.my is used by actor ac indirectly via the calling of at 
least  an  IMuM  ci.mx.CLR.  Similarly  for  the  case  of  an  IMuM 
cj.my,  we  also  need  to  check  explicitly  whether  ac.CLR  = 
cj.my.CLS  (for  Strict  *-Property)  or  ac.CLR  ≥  cj.my.CLS  (for 
Liberal  *-Property)  if  the  IMuM  cj.my  is  used  by  actor  ac 
indirectly via the calling of at least a MuM ci.mx.CLR. 
While  SARs  AM  and  MM  contain  both  the  Simple  Integrity 
Property and Liberal *-Property, since they are opposites of one 
another, one must be chosen by the security administrator based 
on  the  customer’s  security  policy  requirement.  Simple  Integrity 
prevents “blind write” (i.e., modify an object without seeing it - 
allowed  by  the  Liberal  *-Property),  but  may  allow  information 
leakage  (i.e.,  transfer  of  information  from  a  higher  to  a  lower 
security  level  -  prohibited  by  the  Liberal  *-Property).    In  our 
approach, we can mitigate both “information leakage” (for Simple 
Integrity Property) and “blind write” (for Liberal *-Property) for 
use cases to a limited extent by using the CLS of the use case as 
the lower bound threshold for the CLS of MuMs utilized by that 
use case. Particularly, for any MuM c.m ∈ c.MW that is utilized in 
a  sequence  diagram  Dseq  describing  actions  of  use  case  uc,  the 
CLS of c.m must dominate the CLS of uc.  This leads to the SAR: 
raised 
to 
restrict 
in  SAR  UCM, 
the  gap  between  uc.CLS 
SAR  UCM  (Use  Case-Method):  ∀  use  case  uc  and  sequence 
diagram Dseq, uc is securely (MAC) described by methods in Dseq 
⇔  uc.CLS  ≤  min(ci1.mx1.CLS,…,  cik.mxk.CLS)  where  ci1.mx1,…, 
cik.mxk are MuMs used in Dseq to describe actions of uc. 
If the Simple Integrity Property is active, uc.CLS can be viewed 
as  the  lower  bound  of  the  sensitivity  level  that  allows  the 
information to flow downward. If in use case uc, the designer uses 
some MuM with the CLS less than uc.CLS, the SAR UCM will 
report  that  information  is  leaking  beyond  the  acceptable  range. 
Note that the SAR UM does not affect the SARs AM and MM, 
thus  maintaining  the  “blind  write”  prohibition.  To  prohibit 
information  leakage  downward,  all  MuMs  with  CLS  equal  to 
uc.CLS  (and  greater  than  or  equal  to  CLS  of  IMuMs)  must  be 
chosen for that use case (Strict *-Property usage locally in uc). 
Conversely,  if  the  Liberal  *-Property  is  active,  the  value  of 
min(ci1.mx1.CLS,…,  cik.mxk.CLS)  can  be  a  hint  for  adjusting  the 
value  of  uc.CLS  downward  to  a  sensitivity  level  that  allows 
limited “blind write” for an actor. The higher the value of uc.CLS 
and 
is 
min(ci1.mx1.CLS,…,  cik.mxk.CLS) 
the  more 
responsibility and knowledge are needed by the users (as reflected 
in CLRs of their actors) in order to play the actor roles associated 
with use case uc (to satisfy the SAR AUC: acn.CLR  ≥ uc.CLS). 
For  good  security  practice,  actors  with  low  CLR  must  be 
prohibited  from  performing  “blind  write”.  For  example,  if 
min(ci1.mx1.CLS,…, cik.mxk.CLS) = TS, the value of uc.CLS should 
be TS or S rather than C (too dangerous) or U (very dangerous). 
On the other hand, if SAR UCM does not hold (uc.CLS is set too 
high and greater than min(ci1.mx1.CLS,…, cik.mxk.CLS)), but SAR 
AUC  holds  for  some  actor  acn  associated  with  uc  (acn.CLR  ≥ 
uc.CLS > min(ci1.mx1.CLS,…, cik.mxk.CLS)), then acn.CLR may not 
satisfy SAR AM.2b for some cij.mxj.CLS (1≤ j ≤ k), which violates 
“no  write  down”  of  the  Liberal  *-Property.  In  such  cases,  the 
designer must decrease the value of uc.CLS to satisfy both SAR 
UCM and SAR AM.2b. 
Finally,  we  need  a  rule  that  estimates  the  range  of  CLS  of  the 
class based on its defining methods. 
SAR CM (Class with its Methods):  
- CMa: c.CLSmin ≤ min{c.mx.CLS | method mx defined in class c} 
- CMb: c.CLSmax ≥ max{c.mx.CLS | method mx defined in class c} 
The class c must have at least one IMuM c.mk to report the status 
of class instances (otherwise it is a useless “black hole” object). 
Under the guideline of the least privilege principle, the value of 
c.mk.CLS should be as low as possible according to the attributes 
that the method reveals as a result of the invocation. For example, 
if the attributes of a class used by a method are evaluated only at 
the C level, it is not reasonable to assign c.mk.CLS as S or TS, as 
this would require actors with unnecessarily high CLR (S or TS) 
to obtain information at the C level via the method call. Hence, 
the SAR CMa provides a hint for the c.CLSmin.  
By combining SAR CM with the SAR UCC in Tier 2 (see Section 
4.2),  the  designer  can  verify  classes  and  the  associated  class 
methods  that  are  utilized  for  a  use  case.  Consider  a  situation 
where  classes  are  being  defined  at  the  conceptual  level,  and  for 
some class c, c.CLSmin is estimated at a low value.  Later in the 
process, after defining methods (with CLSs) of c for use case ucm 
in  Tier  3,  if  the  designer  finds  that  c.CLSmin  is  too  low  (i.e.,  all 
methods in c are more sensitive than expected), the c.CLSmin can 
be raised as high as needed as long as the SAR CMa still holds. 
Then,  when  a  sequence  diagram  for  another  use  case  ucn  is 
defined, by using SAR UCC, the designer has a better indication 
of whether the class c is appropriate for use case ucn. If ucn needs 
only  low  sensitivity  actions  (methods),  it  is  better  to  choose 
classes other than c. If ucn really needs a method of c, the CLS of 
ucn  should  be  raised  higher  than  its  previously  underestimated 
value.  Conversely,  if  the  designer  finds  that  c.CLSmin  was 
previously  defined  too  high  (i.e.,  all  methods  in  c  are  less 
sensitive than expected) and does not satisfy CMa, then c.CLSmin 
can be decreased. The SAR UCC allows more use cases to have a 
chance  to  utilize  class  c  if  needed.  In  summary,  as  stated  in 
Principle 1 in Section 3, the process of secure software design is 
iterative  along  with  the  calibration  of  proper  security  levels 
assigned  to  concerned  UML  elements  for  the  application,  while 
maintaining the satisfaction of the SARs for Tiers 1, 2, and 3, as 
we have described. 
I = (VA, EA
Inc,  and  use  case  extension  graph  DUC.GU
4.4  Algorithms for MAC Security Assurance  
In  this  section,  we  define  algorithms  for  overall  security 
assurance for the situation when a software engineer provides an 
existing UML design of use case, class, and sequence diagrams in 
which the assigned security levels occurred in isolation from the 
SARs.  In this case, there must be automated algorithms that can 
verify  whether  the  design  as  a  whole  satisfies  the  SARs  by 
conducting  a  comprehensive  analysis  of  an  entire  design.    To 
begin,  we  formalize  terminology  related  to  UML  diagrams  and 
dependencies. Let DUC represent a use case diagram and define an 
I) as a directed graph of 
actor inheritance graph DUC.GA
actors in DUC where VA is the set of actors (each node is an actor) 