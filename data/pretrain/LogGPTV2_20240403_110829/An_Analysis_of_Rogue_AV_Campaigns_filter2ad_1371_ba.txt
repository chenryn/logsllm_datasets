### References

1. King, S.T., Chen, P.M.: Backtracking Intrusions. In: ACM Symposium on Operating Systems Principles (SOSP), Bolton Landing, NY, USA (October 2003).

2. Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor Support for Identifying Covertly Executing Binaries. In: USENIX Security Symposium, San Jose, CA, USA (August 2008).

3. Martignoni, L., Stinson, E., Fredrikson, M., Jha, S., Mitchell, J.C.: A Layered Architecture for Detecting Malicious Behaviors. In: RAID 2008, LNCS, vol. 5230, pp. 78–97. Springer, Heidelberg (2008).

4. MSDN. Asynchronous Procedure Calls. [Online] Available: http://msdn.microsoft.com/en-us/library/ms681951VS.85.aspx (Accessed: April 15, 2010).

5. OffensiveComputing. Storm Worm Process Injection from the Windows Kernel. [Online] Available: http://www.offensivecomputing.net/?q=node/661 (Accessed: April 15, 2010).

6. Passmark Software. PassMark Performance Test. [Online] Available: http://www.passmark.com/products/pt.htm (Accessed: April 15, 2010).

7. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. In: Usenix Security, San Antonio, TX, USA (January 1998).

8. Payne, B.D., Carbone, M., Sharif, M., Lee, W.: Lares: An Architecture for Secure Active Monitoring Using Virtualization. In: IEEE Symposium on Security and Privacy, Oakland, CA, USA (May 2008).

9. Petroni Jr., N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An Architecture for Specification-Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In: USENIX Security Symposium, Vancouver, BC, Canada (August 2006).

10. Petroni Jr., N.L., Hicks, M.: Automated Detection of Persistent Kernel Control-Flow Attacks. In: ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, USA (November 2007).

11. Richter, J.: Load Your 32-bit DLL into Another Process’s Address Space Using injlib. Microsoft Systems Journal 9(5) (May 1994).

12. Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits with VMM-Based Memory Shadowing. In: RAID 2008, LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008).

13. Roesch, M.: Snort - Lightweight Intrusion Detection for Networks. In: Proceedings of USENIX LISA, Seattle, WA, USA (November 1999).

14. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A Fast Automaton-Based Method for Detecting Anomalous Program Behaviors. In: IEEE Symposium on Security and Privacy, Oakland, CA, USA (May 2001).

15. Sharif, M., Lee, W., Cui, W., Lanzi, A.: Secure In-VM Monitoring Using Hardware Virtualization. In: ACM CCS, Chicago, IL, USA (November 2009).

16. Srivastava, A., Erete, I., Griffin, J.: Kernel Data Integrity Protection via Memory Access Control. Technical Report GT-CS-09-05, Georgia Institute of Technology, Atlanta, GA, USA (2009).

17. Srivastava, A., Griffin, J.: Tamper-Resistant, Application-Aware Blocking of Malicious Network Connections. In: RAID 2008, LNCS, vol. 5230, pp. 39–58. Springer, Heidelberg (2008).

18. Staniford, S., Paxson, V., Weaver, N.: How to 0wn the Internet in Your Spare Time. In: USENIX Security Symposium, San Francisco, CA, USA (August 2002).

19. Swift, M.M., Bershad, B.N., Levy, H.M.: Improving the Reliability of Commodity Operating Systems. In: ACM SOSP, Bolton Landing, NY, USA (October 2003).

20. ThreatExpert. Conficker/Downadup: Memory Injection Model. [Online] Available: http://blog.threatexpert.com/2009/01/confickerdownadup-memory-injection.html (Accessed: April 15, 2010).

21. Valdes, A., Skinner, K.: Probabilistic Alert Correlation. In: RAID 2001, LNCS, vol. 2212, p. 54. Springer, Heidelberg (2001).

22. Wang, Z., Jiang, X., Cui, W., Ning, P.: Countering Kernel Rootkits with Lightweight Hook Protection. In: ACM CCS, Chicago, IL, USA (November 2009).

23. Willems, C., Holz, T., Freiling, F.: Toward Automated Dynamic Malware Analysis Using CWSandbox. IEEE Security & Privacy 5(2) (March 2007).

### BotSwindler: Tamper-Resistant Injection of Believable Decoys in VM-Based Hosts for Crimeware Detection

**Brian M. Bowen, Pratap Prabhu, Vasileios P. Kemerlis, Stelios Sidiroglou, Angelos D. Keromytis, Salvatore J. Stolfo**

*Department of Computer Science, Columbia University, {bb2281, pvp2105, vk2209, ak2052, sjs11}@columbia.edu*

*Computer Science and Artificial Intelligence Laboratory, MIT, PI:EMAIL*

#### Abstract
We introduce BotSwindler, a bait injection system designed to deceive and detect crimeware by forcing it to reveal itself during the exploitation of monitored information. The implementation of BotSwindler relies on an out-of-host software agent that simulates user-like interactions in a virtual machine, aiming to convince malware within the guest OS that it has captured legitimate credentials. To enhance the accuracy and realism of these simulations, we propose a low-overhead approach called Virtual Machine Verification (VMV) for verifying the state of the guest OS. We present results from experiments with real credential-collecting malware, demonstrating the injection of monitored financial bait for detecting compromises. Additionally, through computational analysis and a user study, we illustrate the believability of the simulations and show that they are sufficiently human-like. Finally, we provide performance measurements to demonstrate that our approach does not impose a significant performance burden.

#### 1. Introduction
The rise of an underground economy trading in stolen digital credentials has driven the growth of crime-driven bots that harvest sensitive data from unsuspecting users. These bots use various techniques, including web-based form grabbing, keylogging, screenshots, and video capture, to pilfer data and automate financial crimes. Targets range from individual users to large organizations, with recent studies indicating that up to 9% of machines in an enterprise are now bot-infected.

Traditional detection methods, such as signature-based and anomaly-based approaches, have known weaknesses. Signature-based methods struggle with the large number of possible variants, while anomaly-based methods suffer from false positives and negatives. Consequently, much existing crimeware remains undetected by antivirus software. For example, a recent study found that the Zeus botnet, which has over 3.6 million PC infections in the US alone, bypasses up-to-date antivirus software 55% of the time.

BotSwindler addresses these issues by introducing a novel system for proactive detection of credential-stealing malware on VM-based hosts. It uses an out-of-host software agent to simulate user interactions, making it tamper-resistant and difficult for malware to detect. The simulator must verify the success or failure of mouse and keyboard events passed to the guest OS, which is achieved through VMV. By injecting monitored decoy credentials, BotSwindler aims to detect malware when it exploits this information.

#### 1.1 Overview of Results
To demonstrate the effectiveness of BotSwindler, we tested our prototype against real crimeware samples. Our results from two separate experiments with different types of decoy credentials show that BotSwindler successfully detects malware through the exploitation of monitored bait. In our first experiment with 116 Zeus samples, we received 14 distinct alerts using PayPal and Gmail decoys. In a second experiment with 59 different Zeus samples, we received 3 alerts from banking decoys.

We also performed a computational analysis to determine if attackers could use machine learning algorithms to distinguish between real and simulated keystrokes. Results from experiments using Naive Bayes and Support Vector Machine (SVM) classifiers on real and generated timing data show that they produce nearly identical classification results, making this kind of analysis ineffective for adversaries.

To further evaluate the believability of the simulations, we conducted a user study where human judges tried to distinguish BotSwindler's actions from those of a real human. The judges' average success rate was 46%, indicating that the simulations provide a good approximation of human actions.

Finally, we evaluated the overhead of our approach by measuring the cost imposed by VMV. Our results indicate that VMV imposes no measurable overhead, making the technique difficult to detect via performance analysis.

#### 1.2 Summary of Contributions
- **BotSwindler Architecture**: Introduces a novel, accurate, efficient, and tamper-resistant zero-day crimeware detection system.
- **VMSim Language**: A new language for expressing simulated user behavior, facilitating the construction and reproduction of complex user activity.
- **Virtual Machine Verification (VMV)**: A low-overhead approach for verifying simulation state, enabling robust out-of-host user action simulation.
- **Real Malware Detection Results**: Demonstrates the effectiveness of BotSwindler in detecting real malware using decoy PayPal, Gmail, and banking credentials.
- **Statistical and Information Theoretic Analysis**: Shows that it is difficult to detect simulations through machine learning algorithms or entropy measurements.
- **Believability User Study Results**: Presents user study results indicating the believability of simulations created with VMSim.
- **Performance Overhead Results**: Demonstrates that BotSwindler imposes no measurable overhead, making it undetectable via timing measurement methods.

#### 2. Related Work
Honeypots and honeytokens are commonly used to attract and detect adversaries. While honeypots are effective for profiling attacker behavior, they are typically limited to capturing malicious activity. Injecting human input to detect malware has been explored in systems like Siren, which manually injects human input to generate network requests and identifies deviations from known sequences. However, these systems often rely on components within the host, making them detectable by malware. Taint analysis, another technique, tracks information flow but can be detected due to its high overhead.

BotSwindler differs by injecting monitored bait into VM-based hosts, simulating user activity outside the VM, and using VMV to verify the state of the simulation. This makes it more resistant to detection and evasion.

#### 3. BotSwindler Components
The BotSwindler architecture consists of two primary components: the VMSim simulator engine and the Virtual Machine Verification (VMV) component. VMSim performs simulations designed to convince malware that the command sequences are genuine. The VMSim language provides a flexible way to generate variable simulation behaviors and workflows, supporting both cover and carry actions. Cover actions include opening and editing text documents or windows, while carry actions result in the injection of decoys. The VerifyAction allows VMSim to interact with VMV, ensuring the accuracy of simulations by blocking on random delays before proceeding to the next action.

**Figure 1. BotSwindler Architecture**

**Figure 2. VMSim Language Details**

This structured and detailed approach ensures that BotSwindler is a robust and effective tool for detecting and deceiving credential-stealing malware.