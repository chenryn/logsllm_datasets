19. King, S.T., Chen, P.M.: Backtracking intrusions. In: ACM SOSP, Bolton Landing,
NY (October 2003)
20. Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor support for identifying covertly
executing binaries. In: USENIX Security Symposium, San Jose, CA (August 2008)
Automatic Discovery of Parasitic Malware
117
21. Martignoni, L., Stinson, E., Fredrikson, M., Jha, S., Mitchell, J.C.: A layered archi-
tecture for detecting malicious behaviors. In: Lippmann, R., Kirda, E., Trachtenberg,
A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 78–97. Springer, Heidelberg (2008)
22. MSDN. Asynchronous procedure calls,
http://msdn.microsoft.com/en-us/library/ms681951VS.85.aspx (last accessed
April 15, 2010)
23. OﬀensiveComputing. Storm Worm Process Injection from the Windows Kernel,
http://www.offensivecomputing.net/?q=node/661 (last accessed April 15, 2010)
24. Passmark Software. PassMark Performance Test,
http://www.passmark.com/products/pt.htm (last accessed April 15, 2010)
25. Paxson, V.: Bro: A system for detecting network intruders in real-time. In: Usenix
Security, San Antonio, TA (January 1998)
26. Payne, B.D., Carbone, M., Sharif, M., Lee, W.: Lares: An architecture for secure
active monitoring using virtualization. In: IEEE Symposium on Security and Pri-
vacy, Oakland, CA (May 2008)
27. Petroni Jr., N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An architecture for
speciﬁcation-based detection of semantic integrity violations in kernel dynamic
data. In: USENIX Security Symposium, Vancouver, BC, Canada (August 2006)
28. Petroni Jr., N.L., Hicks, M.: Automated detection of persistent kernel control-ﬂow
attacks. In: ACM CCS, Alexandria, VA (November 2007)
29. Richter, J.: Load your 32-bit DLL into another process’s address space using injlib.
Microsoft Systems Journal 9(5) (May 1994)
30. Riley, R., Jiang, X., Xu, D.: Guest-transparent prevention of kernel rootkits with
VMM-based memory shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A.
(eds.) RAID 2008. LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
31. Roesch, M.: Snort - lightweight intrusion detection for networks. In: Proceedings
of USENIX LISA, Seattle, WA (November 1999)
32. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A fast automaton-based method
for detecting anomalous program behaviors. In: IEEE Symposium on Security and
Privacy, Oakland, CA (May 2001)
33. Sharif, M., Lee, W., Cui, W., Lanzi, A.: Secure in-vm monitoring using hardware
virtualization. In: ACM CCS, Chicago, IL (November 2009)
34. Srivastava, A., Erete, I., Giﬃn, J.: Kernel data integrity protection via memory
access control. Technical Report GT-CS-09-05, Georgia Institute of Technology,
Atlanta, GA (2009)
35. Srivastava, A., Giﬃn, J.: Tamper-resistant, application-aware blocking of malicious
network connections. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID
2008. LNCS, vol. 5230, pp. 39–58. Springer, Heidelberg (2008)
36. Staniford, S., Paxson, V., Weaver, N.: How to 0wn the internet in your spare time.
In: USENIX Security Symposium, San Francisco, CA (August 2002)
37. Swift, M.M., Bershad, B.N., Levy, H.M.: Improving the reliability of commodity
operating systems. In: ACM SOSP, Bolton Landing, NY (October 2003)
38. ThreatExpert. Conﬁcker/downadup: Memory injection model.
http://blog.threatexpert.com/2009/01/
confickerdownadup-memory-injection.html (last accessed April 15, 2010)
39. Valdes, A., Skinner, K.: Probabilistic alert correlation. In: Lee, W., M´e, L., Wespi,
A. (eds.) RAID 2001. LNCS, vol. 2212, p. 54. Springer, Heidelberg (2001)
40. Wang, Z., Jiang, X., Cui, W., Ning, P.: Countering kernel rootkits with lightweight
hook protection. In: ACM CCS, Chicago, IL (November 2009)
41. Willems, C., Holz, T., Freiling, F.: Toward automated dynamic malware analysis
using cwsandbox. IEEE Security & Privacy 5(2) (March 2007)
BotSwindler: Tamper Resistant Injection of Believable
Decoys in VM-Based Hosts for Crimeware Detection(cid:2)
Brian M. Bowen1, Pratap Prabhu1, Vasileios P. Kemerlis1, Stelios Sidiroglou2,
Angelos D. Keromytis1, and Salvatore J. Stolfo1
1 Department of Computer Science, Columbia University
{bb2281,pvp2105,vk2209,ak2052,sjs11}@columbia.edu
2 Computer Science and Artiﬁcial Intelligence Laboratory, MIT
PI:EMAIL
Abstract. We introduce BotSwindler, a bait injection system designed to delude
and detect crimeware by forcing it to reveal during the exploitation of moni-
tored information. The implementation of BotSwindler relies upon an out-of-host
software agent that drives user-like interactions in a virtual machine, seeking to
convince malware residing within the guest OS that it has captured legitimate
credentials. To aid in the accuracy and realism of the simulations, we propose a
low overhead approach, called virtual machine veriﬁcation, for verifying whether
the guest OS is in one of a predeﬁned set of states. We present results from exper-
iments with real credential-collecting malware that demonstrate the injection of
monitored ﬁnancial bait for detecting compromises. Additionally, using a compu-
tational analysis and a user study, we illustrate the believability of the simulations
and we demonstrate that they are sufﬁciently human-like. Finally, we provide re-
sults from performance measurements to show our approach does not impose a
performance burden.
1 Introduction
The creation and rapid growth of an underground economy that trades in stolen digital
credentials has spurred the growth of crime-driven bots that harvest sensitive data from
unsuspecting users. This form of malevolent software employs a variety of techniques
ranging from web-based form grabbing and key stroke logging, to screenshots and video
capture for the purposes of pilfering data on remote hosts to automate ﬁnancial crime
[1,2]. The targets of such malware range from individual users and small companies to
the most wealthiest organizations [3]—recent studies indicate that bot infections are on
the rise and up to 9% of the machines in an enterprise are now bot-infected [4].
Traditional crimeware detection techniques rely on comparing signatures of known
malicious instances to identify unknown samples, or on anomaly-based detection tech-
niques in which host behaviors are monitored for large deviations from a baseline.
(cid:2) This work was partly supported by the National Science Foundation through grants CNS-
07-14647 and CNS-09-14312. Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do not necessarily reﬂect the views of
the NSF.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 118–137, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
BotSwindler: Tamper Resistant Injection of Believable Decoys
119
Unfortunately, these approaches suffer a large number of known weaknesses. Signature-
based methods can be useful when a signature is known, but due to the large number
of possible variants, learning and searching all possible signatures to identify unknown
binaries is intractable [5]. On the other hand, anomaly-based methods are susceptible
to false positives and negatives, limiting their potential utility. Consequently, a large
amount of existing crimeware now operate undetected by antivirus software. A recent
study focused of Zeus1 (the largest botnet with over 3.6 million PC infections in the US
alone [7]), revealed that the malware bypassed up-to-date antivirus software 55% of the
time [8].
Another drawback of conventional host-based antivirus software is that it typically
monitors from within the host it is trying to protect, making it vulnerable to evasion or
subversion by malware; we see an increasing number of malware attacks that disable
defenses such as antivirus software prior to undertaking some malicious activity [9].
In this work, we introduce BotSwindler, a novel system designed for the proactive
detection of credential stealing malware on VM-based hosts. BotSwindler relies upon
an out-of-host software agent to drive user simulations that are meant to convince mal-
ware residing within the guest OS that it has captured legitimate credentials. By the
nature of its out-of-host operating position, the simulator is tamper resistant and difﬁ-
cult to detect by malware residing within the host environment. We posit that malware
that detects BotSwindler would need to analyze the behavior of its host and decide
whether it is observing a human or not. In other words, the crimeware would need to
solve a Turing Test [10]. We assert that if attackers are forced to spend their time look-
ing at the actions on each infected host one by one to determine if they are real or not
in order to steal information, BotSwindler would be a success; the attackers’ task does
not scale. To generate simulations, BotSwindler relies on a formal language that is used
to specify a simulation of human user’s sequence of actions. The language provides a
ﬂexible way to generate variable simulation behaviors that appear realistic. Simulations
can be tuned to mimic particular users by using various models for keystroke speed,
mouse speed and the frequency of errors made during typing.
One of the challenges in designing an out-of-host simulator lies in the ability to
detect the underlying state of the OS. That is, to verify the success or failure of mouse
and keyboard events that are passed to the guest OS. For example, if the command is
given to open a browser and navigate to a particular URL, the simulator must validate
that the URL was successfully opened before proceeding with the next command. To aid
in the accuracy and realism of the simulations, we developed a low overhead approach,
called virtual machine veriﬁcation (VMV), for verifying whether the state of the guest
OS is in one of a predeﬁned set of states.
BotSwindler aims to detect crimeware by deceptively inducing it into an observable
action during the exploitation of monitored information injected into the guest OS. To
entice attackers with information of value, the system supports a variety of different
types of bait credentials including decoy Gmail and PayPal authentication credentials,
as well as those from a large ﬁnancial institution2. Our system automatically monitors
1 Zeus uses key-logging techniques to steal sensitive data such as user names, passwords, ac-
count numbers. It can be purchased on the black market for $600, complete with support and
maintenance [6].
2 By agreement, the institution requested that its name be withheld.
120
B.M. Bowen et al.
the decoy accounts for misuse to signal exploitation and thus detect the host infection
by credential stealing malware.
BotSwindler presents an instance of a system and approach that can be used to deal
with information-level attacks, regardless of their origin. In our prototype, we rely on
credentials for ﬁnancial institutions because they are good examples that we can easily
evaluate, but the approach is aimed at any kind of large-scale automated harvesting of
“interesting” data — where “interesting” depends on both the environment and the mal-
ware. Although we demonstrate our system with three types of credentials, the system
can be extended to support any type of credential that can be monitored for misuse. As
one of the contributions of this work, we consider different applications of BotSwindler
including how it could be applied practically in an enterprise environment with simu-
lations and decoys adapted to the speciﬁc deployment setting. In part of doing so, we
discuss how BotSwindler can be deployed to service hosts that include those which are
not VM-based, making this approach broadly applicable.
We have implemented a prototype version of BotSwindler using a modiﬁed version
of QEMU [11] running on a Linux host. User simulation is implemented using X11
libraries and interaction with the graphical frame buffer. We demonstrate our prototype
through experiments with crimeware on a Windows guest, but BotSwindler can oper-
ate on any guest operating system supported by the underlying hypervisor or virtual
machine monitor (VMM).
1.1 Overview of Results
To demonstrate the effectiveness of BotSwindler, we tested our prototype against real
crimeware samples obtained from the wild. Our results from two separate experiments
with different types of decoy credentials show that BotSwindler succeeds in detecting
malware through attackers’ exploitation of the monitored bait. In our ﬁrst experiment
with 116 Zeus samples, we received 14 distinct alerts using PayPal and Gmail decoys.
In a second experiment with 59 different Zeus samples, we received 3 alerts from our
banking decoys.
The long-term viability of BotSwindler defense largely depends on the believabil-
ity of the bait-injecting simulations by the attackers. We performed a computational
analysis to see if attackers could employ machine learning algorithms on keystrokes to
distinguish simulations. We present results from experiments running Naive Bayes and
Support Vector Machine (SVM) classiﬁers on real and generated timing data to show
that they produce nearly identical classiﬁcation results making this kind of analysis in-
effectual for an adversary. To show that adversaries resorting to manual inspection of
the user activities would be sufﬁciently challenged, we evaluated the believability of
user simulations via a decoy Turing Test in which human judges were tasked with try-
ing to distinguish BotSwindler’s actions from those of a real human. The failure of the
judges to distinguish suggests BotSwindler’s simulations are convincingly human-like.
In our study with 25 human judges evaluating 10 videos of BotSwindler actions and of
a human, the judges’ average success rate was 46%, indicating the simulations provide
a good approximation of human actions.
Finally, recognizing that attackers may try to distinguish simulated behavior via per-
formance metrics, we evaluated the overhead of our approach by measuring the cost
BotSwindler: Tamper Resistant Injection of Believable Decoys
121
imposed by the virtual machine veriﬁcation (VMV) technique. Our results indicate that
VMV imposes no measurable overhead, making the technique difﬁcult to detect by
malware using performance analysis [12].
1.2 Summary of Contributions
This paper makes the following contributions:
– BotSwindler architecture: It introduces BotSwindler, a novel, accurate, efﬁcient,
and tamper-resistant zero-day crimeware detection system. BotSwindler relies on
the use of decoy injection whereby bogus information is used to bait and de-
lude crimeware, causing it to reveal itself during the exploitation of the monitored
information.
– VMSim language: It introduces VMSim, a new language for expressing simulated
user behavior. VMSim facilitates the construction and reproduction of complex user
activity, including specifying aggregate statistical behavior.
– Virtual Machine Veriﬁcation (VMV): It introduces virtual machine veriﬁcation,
a low overhead approach for verifying simulation state. VMV enables robust out-
of-host user action simulation through graphical state veriﬁcation.
– Real malware detection results: It presents results to show the effectiveness of
BotSwindler in detecting real malware when decoy PayPal, Gmail, and banking
credentials are injected, stolen, and exploited by the attackers.
– Statistical and information theoretic analysis: It presents the results of a compu-
tational analysis on generated keystroke timing data to show it would be difﬁcult
to detect simulations through analysis with machine learning algorithms or entropy
measurements.
– Believability user study results: It presents user study results that show the be-
lievability of simulations created with BotSwindler’s VMSim language.
– Performance overhead results: It shows that BotSwindler imposes no measurable
overhead, hence making itself undetectable via timing measurement methods.
2 Related Work
Deception-based information resources that have no production value other than to at-
tract and detect adversaries are commonly known as honeypots. Honeypots serve as ef-
fective tools for proﬁling attacker behavior and to gather intelligence to understand how
attackers operate. They are considered to have low false positive rates since they are de-
signed to capture only malicious attackers, except for perhaps an occasional mistake by
innocent users. Spitzner discusses the use of honeytokens [13], which he deﬁnes as “a
honeypot that is not a computer,” citing examples that include bogus medical records,
credit card numbers, and credentials. Our work harnesses the honeytoken concept to
detect crimeware that may otherwise go undetected.
Injecting human input to detect malware has been shown to be useful by Borders
et al. [14] with their Siren system. The aim of Siren is to thwart malware that attempts
122
B.M. Bowen et al.
to blend in with normal user activity to avoid anomaly detection systems. However,
detection is performed by manually injecting human input to generate a sequence of
network requests and observing the resulting network trafﬁc to identify differences
from the known sequences of requests; deviations are ﬂagged as malicious. Expand-
ing upon Siren, Chandrasekaran et al. [15], developed a system to randomize generated
human input to foil potential analysis techniques that may be employed by malware.
The work by Holz et al. [1] to investigate keyloggers and dropzones, relied on execut-
ing maleware in CWSandbox [16] and automating user input with AutoIt3. However, it
was limited to ad hoc scenarios designed for the sole purpose of detecting harvesting
channels. Their approach depends on miss-conﬁgured and insecure dropzone servers to
learn about what sort of information is being stolen. While this effort did reveal lots of
interesting details about stolen information, it is limited by law and skill of the attack-
ers (i.e., they can just secure their dropzone servers). In addition, relying on simulator
software that resides within the host, such as AutoIt, provides attackers with a simple
means to detect and avoid it. In contrast to these systems, BotSwindler is difﬁcult to
detect, automatically injects input that is designed to be believable, relies on monitored
decoy credentials for detection, and provides a platform to convince malware that it has
captured legitimate credentials.
Taint analysis is another technique that has been used to detect credential stealing
malware. Egele et al. [17] used taint analysis to track information as it is processed by
the web browser and loaded in to browser helper objects (BHOs). Their approach allows
for a human analyst to observe where information is being sent in ofﬂine analysis.
Similarly, Yin et al. [18] built Panorama, a taint tracking system that extends beyond
BHOs to handle tracking throughout multiple processes, memory swapping, and disks.
These systems may work well to track information in a system, but they do so with large
overhead (factor of 10-20 slowdown in the systems described) or contain components
that reside on the guest [18]; both these features that can be detected by malware and
used for evasion purposes.
BotSwindler injects monitored bait into VM-based hosts by simulating user activity
that is of interest to crimeware. The simulation is performed on the native OS out-
side of the VM to minimize artifacts that could be used to tip-off resident malicious
software. To keep track of the simulation state within the virtual environment, our ap-
proach relies on a form of virtual machine introspection (VMI), a concept proposed by
Garﬁnkel and Rosenblum [19] to describe the act of inspecting a virtual machine’s soft-
ware from outside the virtual environment. The challenge of VMI lies in overcoming
the semantic gap [20] between the two levels of abstraction represented by the VM and
the underlying service or OS. Garﬁnkel and Rosenblum focused on inspecting memory,
registers, device state, and other process related information to implement an attack re-
sistant host-based IDS for VMs whereby the IDS is located outside of the guest in the
virtual machine monitor (VMM). Other VMI implementations include [21,22,23], but
unlike most of these approaches, we circumvent the semantic gap and rely on artifacts
found in the VMM graphical framebuffer. To the best of our knowledge, we are the
ﬁrst to focus on the veriﬁcation of state for user simulations, a challenge with unique
requirements.
3 http://www.autoitscript.com
BotSwindler: Tamper Resistant Injection of Believable Decoys
123
3 BotSwindler Components
The BotSwindler architecture, as shown in Fig. 1, consists of two primary components
including a simulator engine, VMSim, and a virtual machine veriﬁcation component.
Another aspect of BotSwindler (although not shown in the ﬁgure) are the monitored
decoys that we employ for detecting malware. These components are described in the
next three sections.
3.1 VMSim
BotSwindler’s user simulator component, VMSim, performs simulations that are de-
signed to convince malware residing inside the VM that command sequences are gen-
uine. We posit that successfully creating a sequence of actions that tricks the malware
into stealing and uploading a decoy credential can be achieved only if two essential
requirements are met:
1. the simulator process remains undetected by the malware
2. the actions of the simulator appear to be generated by a human
We approach the ﬁrst requirement by decoupling the location of where the simulation
process is executed and where its actions are received. To do this, we run the simulator
outside of a virtual machine and pass its actions to the guest host by utilizing the X-
Window subsystem on the native host. The second requirement is addressed through
a simulation creation process that entails recording, modifying, and replaying mouse
and keyboard events captured from real users. To support this process, we leverage
the Xorg Record and XTest extension libraries for recording and replaying X-Window
events. The product is a simulator that runs on the native host producing human-like
events without introducing technical artifacts that could be used to alert malware of the
BotSwindler facade.
VMSim relies on formal language to specify the sequence of actions in the simula-
tions. Representative details of the formal language are provided in Fig. 2 (many details
VMSim
User Actions
Decoys
Guest Operating 
System
Veriﬁcation
Virtualization Layer
VMV
Host Operating System
Fig. 1. BotSwindler architecture
124
B.M. Bowen et al.
are omitted due to space limitations). The language provides a ﬂexible way to generate
variable simulation behaviors and workﬂows, but more importantly it supports the use
of cover and carry actions; carry actions result in the injection of decoys (described
in Sect. 3.3), whereas cover actions include everything else to support the believabil-
ity of carry trafﬁc. For example, cover actions may include the opening and editing
of a text document (WordActions) or the opening and closing of particular win-
dows (SysActions). The VerifyAction allows VMSim to interact with VMV
(described in Sect. 3.2) and provides support for conditional operations, synchroniza-
tion, and error checking. Interaction with the VMV is crucial for the accuracy of sim-
ulations because a particular action may cause random delays for which the simulation
must block on before proceeding to the next action.


 : : =  
|   |  
|  |   | e
 : : =  