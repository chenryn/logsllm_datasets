import socket
import sys
TCP_IP = '127.0.0.1'
TCP_PORT = 5005
BUFFER_SIZE = 0x200
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((TCP_IP, TCP_PORT))
s.listen(1)
conn, addr = s.accept()
sys.stderr.write('Connection address: {}'.format(addr))
while True:
    data = conn.recv(BUFFER_SIZE)
    if not data: 
        break
    sys.stdout.write(data)
conn.close()
```
The VirtualBox settings:
![](images/vbox_client.png)
We start our TCP server, start our VirtualBox guest, boot Windows 3.11 via DOSBox in our guest and launch our client.
The result:
```
â€˜06E820075A5DE9ED1ECA0200558BEC6823018B4608E80C078B4606E806075A5DE91B20CA0400558BEC683D018B4608E800078B4606E8EC065A5DE91588CA0400558BEC6857018B4608E8E6068B4606E8D2065A5DE98485B8FFFFCA0400558BEC6874018B460CE8C9068B460AE8B5065A5DE9C683CA0800558BEC6888018B4606E8AF065A5DE9A086CA0200558BEC689C018B4606E89B065A5DE9D585CA0200558BEC68B6018B4608E887068B4606E873065A5DE90487CA0400558BEC68CA018B4606E85F065A5DE9B648CA0200558BEC68EA018B460CE84B068B46088B4E0A8D5E06E8C2065A5DE9CF48558BEC8B4E068B5E088B560A5DE83B07CA0800558BEC
```
If we inspect the result with a HEX editor, we see that the first character is indeed 0x91 (our magic byte), following by the textual representation of a byte stream (512 characters, representing our 256-byte key):
```console
root@kali:/media/sf_CTFs/bsidestlv/DoSaTTaCK# xxd -g 1 incoming.txt | head -1
00000000: 91 30 36 45 38 32 30 30 37 35 41 35 44 45 39 45  .06E820075A5DE9E
root@kali:/media/sf_CTFs/bsidestlv/DoSaTTaCK# stat --printf="%s" incoming.txt
513
```
Note: A different approach to extract the key, used by another team member, was to patch the client with an infinite loop, mark the memory location of the key with an easy-to-find pattern and inspect the emulator memory, searching for the pattern.
Now we have to send the data back, feeding the server. We setup the virtual COM device as a server and implement a TCP client.
The VirtualBox settings:
![](images/vbox_server.png)
The implementation:
```python
import socket
TCP_IP = '127.0.0.1'
TCP_PORT = 2023
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
with open ("incoming.txt", "r") as f:
    buf = f.read()
    for b in buf:
        s.send(b)
    # We send some NULLs in order to flush the COM1 buffer
    # Without this, only ~half of the key would be passed
    #  to the application, causing every other ~128B chunk to 
    #  be decrypted. 
    for i in range(1024):
        s.send("\x00")
print "Done"
```
We start our VirtualBox guest, boot Windows 3.11 via DOSBox in our guest and launch our server. We then trigger our TCP client.
(Note the after some trial and error, we found out that there is need to send some NULL bytes after the key due to some OS buffering issue. Otherwise, only ~half of the buffer would be passed to the application. This was reproducible even by popping up a command line in the guest OS and running `type COM1`, so it's not related to DOSBox or the challenge executable).
The result:
![](images/decrypted.png)
Looks good! We now should have a DOS executable. However, when we try to run in in DOSBox, it crashes!
Time to take a look at the server disassembly.
We start from the strings:
![](images/server_stringref.png)
We follow `"Decrypted OK. Outputfile: MAIN.EXE"` and arrive to:
```assembly
* Referenced by a (U)nconditional or (C)onditional Jump at Addresses:
|:0001.0CED(U), :0001.0CF7(U)
|
:0001.0C3A 685802                 push 0258
:0001.0C3D 8D8680FD               lea ax, [bp+FD80]
:0001.0C41 16                     push ss
:0001.0C42 50                     push ax
:0001.0C43 57                     push di
:0001.0C44 E86D03                 call 0FB4
:0001.0C47 83C408                 add sp, 0008
:0001.0C4A 8946FE                 mov [bp-02], ax
:0001.0C4D 0BC0                   or ax, ax
:0001.0C4F 7443                   je 0C94
:0001.0C51 80BE80FD91             cmp byte ptr [bp+FD80], 91
:0001.0C56 7526                   jne 0C7E
:0001.0C58 8D8680FD               lea ax, [bp+FD80]
:0001.0C5C 16                     push ss
:0001.0C5D 50                     push ax
:0001.0C5E 0E                     push cs
:0001.0C5F E8EAF3                 call 004C
:0001.0C62 83C404                 add sp, 0004
:0001.0C65 57                     push di
:0001.0C66 1E                     push ds
* Possible StringData Ref from Data Seg 002 ->"Decrypted OK. Outputfile: MAIN.EXE"
                                  |
:0001.0C67 687701                 push 0177
:0001.0C6A 1E                     push ds
* Possible StringData Ref from Data Seg 002 ->"BSidesTLV"
                                  |
:0001.0C6B 686D01                 push 016D
:0001.0C6E 6A40                   push 0040
:0001.0C70 9AFF030000             call USER.MESSAGEBOX
```
Here we can see the check for the magic byte at address `0001.0C51`, after which the program calls `call 004C` and declares that the decryptions was successful.
Inspecting that function, the main decryption loop seems to be:
```assembly
* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0001.0178(C)
|
:0001.013C 57                     push di
:0001.013D 9AA22B6F01             call 0001.2BA2
:0001.0142 83C402                 add sp, 0002
:0001.0145 8846FF                 mov [bp-01], al 
:0001.0148 81FE0001               cmp si, 0100
:0001.014C 7E15                   jle 0163
:0001.014E 8BC6                   mov ax, si
:0001.0150 B9FF00                 mov cx, 00FF
:0001.0153 99                     cwd
:0001.0154 F7F9                   idiv cx
:0001.0156 8BDA                   mov bx, dx
:0001.0158 8D86ECFE               lea ax, [bp+FEEC]
:0001.015C 03D8                   add bx, ax
:0001.015E 8A07                   mov al , [bx]
:0001.0160 3046FF                 xor [bp-01], al 
* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0001.014C(C)
|
:0001.0163 FF76F8                 push word ptr [bp-08]
:0001.0166 8A46FF                 mov al , [bp-01]
:0001.0169 2AE4                   sub ah, ah
:0001.016B 50                     push ax
:0001.016C 9A522B7E01             call 0001.2B52
:0001.0171 83C404                 add sp, 0004
:0001.0174 46                     inc si
:0001.0175 3B76F6                 cmp si, [bp-0A]
:0001.0178 72C2                   jb 013C
```
It jumps over the first 0x100 bytes of `MAIN.ENC` and performs a simple XOR decryption on the remaining file.