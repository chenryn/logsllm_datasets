I
No mitigation
HoneyIM
Throttling
250
300
100
0
50
No mitigation
HoneyIM
Throttling
250
300
100
0
50
100
150
200
Virtual Time (tick)
100
150
200
Virtual Time (tick)
100
150
200
Virtual Time (tick)
Figure 5. Effect comparisons between HoneyIM and IM throttling
|V| = 1000, E[D] = 8
|V| = 6000, E[D] = 8
|V| = 6000, E[D] = 16
Pr = 1
Pr = 0.5
Pr = 0.25
8
10
)
%
(
s
r
e
s
u
d
e
t
c
e
n
f
i
n
a
e
M
35
30
25
20
15
10
5
0
0
2
4
6
Coverage of HoneyIM (%)
4
6
Coverage of HoneyIM (%)
Pr = 1
Pr = 0.5
Pr = 0.25
8
10
)
%
(
s
r
e
s
u
d
e
t
c
e
n
f
i
n
a
e
M
35
30
25
20
15
10
5
0
0
2
4
6
Coverage of HoneyIM (%)
No mitigation
HoneyIM
Throttling
250
300
Pr = 1
Pr = 0.5
Pr = 0.25
8
10
Figure 6. Effects of randomly selecting infection targets on HoneyIM
given by deep-inspection. Thus, we reconﬁgure the detec-
tion module to skip the deep-inspection step and rerun the
tests. The suppression and notiﬁcation modules work well
as expected.
We also test the prototype using a generic approach
which overcomes the difﬁculty caused by the invalidity of
the known malicious URLs. We mimic IM malware by
sending malicious URLs collected by ourselves to decoy
accounts. The malicious URLs we used, in principle, have
no difference from those carried by known IM malware in
terms of Web exploits. Thus, they should have the same ef-
fect on normal IM clients and HoneyIM. The URL process
time of HoneyIM is mainly determined by deep-inspection,
which is usually ﬁnished within 30 seconds. Overall, Hon-
eyIM successfully detects all malicious URLs, updates the
URL blacklist, and sends the attack information to the des-
ignated recipient via SMS and email. For emulated mali-
cious ﬁle transfers, HoneyIM automatically receives ﬁles,
reveals ﬁle names to the suppression module, and sends ﬁle
payloads to the designated recipient via email. The whole
process takes seconds to complete, since no deep-inspection
is performed for ﬁle transfer.
6. Discussion
In previous sections, we assume that IM malware always
attempts to infect all online contacts by either initiating a
ﬁle transfer or sending a malicious URL during its spread.
This hit-all propagation strategy, however, might not always
be used. For example, “smart” IM malware may send ma-
licious URLs or ﬁles only to the active online contacts, i.e.,
those contacts that the infected IM client is talking to; or
the propagation is activated only after the infected client re-
ceives a message. Taking the non-hit-all strategy, IM mal-
ware might not hit the decoy contact even if the contact list
of the infected IM user includes the decoy accounts.
IM malware can realize the non-hit-all propagation strat-
egy by either intentionally or randomly selecting a part of
all online contacts as targets. To prevent decoys from being
easily distinguished, we can enhance HoneyIM with inter-
action functionality. As a countermeasure, HoneyIM uses
the interaction functionality to mimic human users for de-
coys by initiating chat sessions with normal users, making
it much harder for IM malware to tell decoys from others.
The chat content can be important security notices or other
user interested information. We readily agree that IM mal-
ware can still avoid decoy contacts even with the interaction
functionality, for example, by infecting the most active con-
tacts. However, the spread of this type of IM malware could
be signiﬁcantly reduced. According to a recent IM trafﬁc
measurement [34], IM users only contact a small portion of
users in their contact lists. On average an AIM user chats
with only 1.9 users and an MSN user chats with 5.5 users.
The random selection of infection targets may also help
IM malware bypass decoy contacts. To study the effect of
the random selection on HoneyIM, we conduct the follow-
ing experiments based on the previous simulation for Hon-
eyIM. We apply a probabilistic propagation strategy to the
7272
experiments. That is, when IM malware propagates, it will
send malicious content to each contact with a probability
p. With the probabilistic infection, the number of users that
malware will contact becomes p× n on average, where n is
the total number of the online contacts of the infected user.
We test and compare the effects of random target se-
lection on HoneyIM with three different probabilities p =
1, 0.5, 0.25 on the three IM networks, respectively. Here
p = 1 refers to the aforementioned deterministic infection.
The comparison is displayed in Figure 6, in which the curve
of p = 0.5 is above the curve of p = 1 but below the curve
of p = 0.25. It indicates that with the decrease of the prob-
ability value, the average number of infected users becomes
larger. However, the difference among three curves quickly
becomes negligible with the increase of the coverage. In
general, the random target selection has little effect on Hon-
eyIM.
7. Conclusion
In this paper we have proposed HoneyIM, a novel de-
tection and suppression mechanism to defend against IM
malware for enterprise-like networks. Distinct from all pre-
vious defense schemes, HoneyIM introduces decoy users
for IM malware detection. It exploits the basic spreading
characteristics of IM malware and guarantees almost zero
false positive. With accurate detection, the suppression of
HoneyIM achieves instant network-wide blocking. More-
over, HoneyIM notiﬁes network administrators of the in-
fected machines and the infection features of IM malware in
real-time. The generic design of HoneyIM enables its ﬂex-
ible realization on a network that uses either enterprise IM
services or public IM services. We have built a prototype of
HoneyIM that works with public IM services using open-
source IM client Pidgin and client honeypot Capture.
The simulation studies demonstrate that even with a small
portion of IM users equipped with decoy accounts, Hon-
eyIM can still detect and block IM malware in the early
stage of its spread. The real experiments on the prototype
further demonstrate that HoneyIM is competently capable
of detecting and suppressing the spread of IM malware.
Acknowledgments
We are very grateful to the anonymous reviewers for their
insightful comments. This work was supported by NSF
grants CNS-0627339 and CNS-0627340.
References
[1] Pidgin. http://pidgin.im/, 2007.
[2] T. Bu and D. Towsley. On Distinguishing Between Internet Power Law Topol-
ogy Generators. In Proceedings of the 2002 IEEE INFOCOM, pages 638–647,
New York, NY, June 2002.
7373
[3] A. Gostev.
the latest chapter.
http://www.
viruslist.com/en/weblog?weblogid=168136245, August 2005.
[4] M. Hicks. Reuters suspends im service due to kelvir worm. http://www.
Social engineering:
eweek.com/article2/0,1759,1786151,00.asp, Apri 2005.
[5] N. Hindocha and E. Chien. Malicious Threats and Vulnerabilities in Instant
Messaging. http://www.symantec.com/avcenter/reference/
malicious.threats.instant.me%ssaging.pdf, 2003.
IBM.
Lotus Sametime.
sw-lotus/sametime.
http://www-142.ibm.com/software/
[6]
[7] Kaspersky. IM-Worm.Win32.Bropia.aj. http://www.viruslist.com/
en/viruses/encyclopedia?virusid=72841.
[8] Kaspersky. IM-Worm.Win32.Opanki.d. http://www.viruslist.com/
en/viruses/encyclopedia?virusid=84950.
[9] N. Leavitt. Instant messaging: A new target for hackers. Computer, 38(7):20–
23, July 2005.
[10] Z. Liu and D. Lee. Coping with instant messaging worms - statistical mod-
eling and analysis. In Proceedings of the 15th IEEE Workshop on Local and
Metropolitan Area Networks, Princeton, NJ, June 2007.
[11] Z. Liu, G. Shu, N. Li, , and D. Lee. Defending against instant messaging
worms. In Proceedings of IEEE GLOBECOM 2006, pages 1–6, San Francisco,
CA, Nov. 2006.
[12] M. Mannan and P. C. van Oorschot. Secure Public Instant Messaging: A Sur-
vey. In Proceedings of the 2nd Annual Conference on Privacy, Security, and
Trust, pages 69–77, Fredericton, NB, Canada, 2004.
[13] M. Mannan and P. C. van Oorschot. On Instant Messaging Worms, Analysis
and Countermeasures. In Proceedings of WORM 2005, pages 2–11, Fairfax,
VA, Nov. 2005.
[14] Microsoft.
Ofﬁce Live Communications Server.
http://www.
microsoft.com/office/livecomm/prodinfo/default.mspx.
[15] C. D. Morse and H. Wang. The Structure of An Instant Messenger Network
and Its Vulnerability to Malicious Codes. In Proceedings of ACM SIGCOMM
2005 Poster Session, Philadelphia, PA, Aug. 2005.
[16] Netﬁlter.
iptables project. http://www.netfilter.org/projects/
iptables/.
[17] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, anal-
ysis, and signature generation of exploits on commodity software. In Proceed-
ings of the 12th NDSS, San Diego, CA, Feb. 2005.
[18] Norman. Norman sandbox whitepaper. http://download.norman.no/
whitepapers/whitepaper_Norman_SandBox.pdf.
[19] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for ﬁngerprint-
ing zeroday attacks. In Proceedings of the EUROSYS 2006, Leuven, Belgium,
April 2006.
[20] C. Raiu. The IM worms armada. http://www.viruslist.com/en/
weblog?weblogid=203678309, October 2006.
[21] R. Schouwenberg.
Kelvir changes
its approach.
http://www.
viruslist.com/en/weblog?weblogid=162243612, April 2005.
[22] R. Schouwenberg. Do you like photos? http://www.viruslist.com/
en/weblog?weblogid=199354341, Sept. 2006.
[23] R. Schouwenberg. MSN ﬁlter bypassing - part 2.
http://www.
viruslist.com/en/weblog?weblogid=199850358, Sept. 2006.
[24] R. D. Smith. Instant Messaging as a Scale-Free Network. http://arxiv.
org/abs/cond-mat/0206378v2, 2002.
[25] Sophos.
Troj/Kelvir-M.
http://www.sophos.com/virusinfo/
analyses/trojkelvirm.html.
[26] Sophos. W32/Jitux-A.
http://www.sophos.com/virusinfo/
analyses/w32jituxa.html.
[27] Sophos. W32/Kelvir-F.
http://www.sophos.com/virusinfo/
analyses/w32kelvirf.html.
[28] Sophos. W32/Kelvir-Q.
http://www.sophos.com/virusinfo/
analyses/w32kelvirq.html.
[29] R. Steenson and C. Seifert. Capture: A high interaction client honeypot. http:
//www.nz-honeynet.org/capture.html.
[30] The Honeynet Project. Know Your Enemy: Learning about Security Threats
(2nd Edition). Addison-Wesley Professional, May 2004.
[31] A. J. Trivedi, P. Q. Judge, and S. Krasser. Analyzing Network and Content
Characteristics of Spim Using Honeypots. In Proceedings of the 3rd USENIX
SRUTI, Santa Clara, CA, June 2007.
[32] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and
S. King. Automated web patrol with strider honeymonkeys: Finding web sites
that exploit browser vulnerabilities.
In Proceedings of the 13th NDSS, San
Diego, CA, Feb. 2006.
[33] M. M. Williamson, A. Parry, and A. Byde. Virus throttling for instant messag-
ing. Technical report, HP Lab Bristol, May 2004.
[34] Z. Xiao, L. Guo, and J. Tracey. Understanding Instant Messaging Trafﬁc Char-
acteristics. In Proceedings of the 27th ICDCS, Toronto, Canada, June 2007.
[35] C. C. Zou, D. Towsley, and W. Gong. Modeling and Simulation Study of the
Propagation and Defense of Internet Email Worm. IEEE Transactions on De-
pendable and Secure Computing, 4(2):105–118, April-June 2007.