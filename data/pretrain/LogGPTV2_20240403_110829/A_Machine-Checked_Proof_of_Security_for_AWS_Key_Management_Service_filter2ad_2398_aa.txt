title:A Machine-Checked Proof of Security for AWS Key Management Service
author:Jos&apos;e Bacelar Almeida and
Manuel Barbosa and
Gilles Barthe and
Matthew Campagna and
Ernie Cohen and
Benjamin Gr&apos;egoire and
Vitor Pereira and
Bernardo Portela and
Pierre-Yves Strub and
Serdar Tasiran
A Machine-Checked Proof of Security for AWS Key Management
Service
Jos´e Bacelar Almeida1, Manuel Barbosa2, Gilles Barthe3, Matthew Campagna4, Ernie Cohen4,
Benjamin Gregoire5, Vitor Pereira2, Bernardo Portela2, Pierre-Yves Strub5, and Serdar Tasiran4
1 University of Minho and INESC TEC
2 University of Porto (FCUP) and INESC TEC
3 IMDEA Software Institute
4 Amazon Web Services
5 INRIA Sophia Antipolis
6 ´Ecole Polytechnique
Abstract. We present a machine-checked proof of security for the domain management protocol of
Amazon Web Services’ KMS (Key Management Service) a critical security service used throughout
AWS and by AWS customers. Domain management is at the core of AWS KMS; it governs the top-
level keys that anchor the security of encryption services at AWS. We show that the protocol securely
implements an ideal distributed encryption mechanism under standard cryptographic assumptions. The
proof is machine-checked in the EasyCrypt proof assistant and is the largest EasyCrypt development
to date.
1 Introduction
Today’s cloud services use sophisticated distributed architectures and algorithms to make data
highly available and durable. To improve security, data at rest is typically encrypted, and de-
crypted only when/where necessary. The encryption keys themselves must be similarly durable and
available; however, directly providing all keys to whichever service needs to use them unnecessarily
increases the attack surface. For the most sensitive keys, it is more prudent to encapsulate them
within a separate distributed encryption service. Such a service allows the creation of new keys, and
uses these keys to encrypt and decrypt data, but does not expose the keys themselves to clients.
The subject of this paper is the AWS domain management protocol (henceforth abbreviated
DMP), a distributed encryption service underlying the Amazon Web Services (AWS) Key Manage-
ment Service (KMS [5]). AWS KMS, a core component of the AWS cloud, lets AWS customers create
and manage encryption keys, providing a consistent view of encryption/decryption operations across
AWS services, and controlling their use through AWS Identity and Access Management (IAM).7
The widespread usage of AWS KMS and the central role of the DMP justiﬁes a high-assurance
security proof, leveraging recent developments in computer-aided cryptography such as [7,4,3].
In this paper, we present a fully mechanized, concrete proof of security of the DMP. Informally,
the proof shows that the DMP provides an idealized encryption service.
Security goal. The DMP is designed to protect the conﬁdentiality of data encrypted under domain
keys and guarantee the correct operation of the interface it provides, even in the presence of a
malicious individual interfering with the inner workings of the system. In particular, we consider
an adversary that can commission and decommission hosts and HSMs (Hardware Security Mod-
ules), assumed to be under adversarial control, and manipulate (insert, delete, modify) messages
7 Within AWS KMS, the DMP is used only to encrypt and decrypt customer master keys, the roots of the customer
key hierarchies. The use of these master keys, and the design of KMS (outside of the DMP itself) is described in
[5].
exchanged between system entities. Our goal is to show that such an adversary cannot gain further
advantage than possibly causing the system to go unresponsive.
Formally, this security goal is deﬁned using an ideal functionality and the real-vs-ideal world
paradigm, similarly to the Universal Composability [14] framework. We prove that the DMP is
indistinguishable from an idealized encryption service to an arbitrary external environment that
can collude with a malicious insider adversary. This formalization captures precisely the security
that the rest of AWS KMS needs from the DMP.
Main Theorem. Our main theorem states that the DMP behaves like an ideal authenticated encryp-
tion service. The theorem rules out attacks from arbitrary computationally bounded adversaries,
under standard cryptographic assumptions for digital signatures, hash-functions and encryption
schemes. Formally, we prove that the probability of breaking the protocol is smaller than
2 · ((qops + qhid) · sig + qdom · aead + cr + mrpke + coll) ,
where qops and qhid are upper bounds on the number of human operators and HSMs in the system,
respectively; qdom upper-bounds the number of domain keys; sig, aead and cr denote the maximum
probabilities of breaking a standard signature, authenticated encryption and cryptographic hash
function, respectively; mrpke denotes the maximum probability of breaking a multi-recipient vari-
ant of public-key encryption; and coll is a small statistical term related to collisions of signature
veriﬁcation keys. The security of cryptographic signatures, hashes, and authenticated encryption
implies that all of the epsilons above (and hence the total probability of breaking the protocol) are
negligible. A more precise statement of the concrete cryptographic setting and bound can be found
in Sections 4 and 5.
Formalization. The proof is fully machine-checked in EasyCrypt [6], a proof assistant for crypto-
graphic proofs. The development is 15K lines of code (loc), of which 500 loc comprise the protocol
speciﬁcation. Besides being the largest EasyCrypt development to date, the proof combines game-
hopping techniques that are standard in cryptographic proofs, and rich inductive reasoning that is
standard in program veriﬁcation. The machine-checked proof is novel for the following reasons:
– We formalize a notion of key secrecy for KMS DMP in the style of cryptographic APIs [23] and
extend prior work in this area by i. addressing a substantially more complex (distributed) API;
and ii. making explicit which assumptions on the behaviour of human operators are necessary
(as otherwise trivial breaks would be possible), whilst excluding all non-trivial breaks as in prior
work by reducing to standard cryptographic assumptions.
– We relate the above deﬁnition of security with a real-vs-ideal world security deﬁnition for en-
cryption services, by proving a (reusable) general composition result for combining cryptographic
key management APIs with AEAD schemes. Our resulting top-level security theorem establishes
that KMS DMP is as good as an ideal authenticated encryption service in the speciﬁed trust
model.
– The machine-checked proof follows best proof engineering practices and favors reusable compo-
nents, breaking down the veriﬁcation eﬀort in three types of steps:
i. reusable results that lift standard cryptographic assumptions on signatures and hash func-
tions to idealized versions that permit reasoning symbolically about complex invariants on
authenticated data structures;
ii. use rich inductive reasoning to prove that intricate authentication invariants hold in the se-
curity experiments, and rewrite (slice) the code of the security games to make explicit the
split between data which is under adversarial control (due to trivial strategies that do not
contradict the security claim) and data which is outside of the adversary’s reach; and
2
iii. build on the previous results to conduct a game hopping proof that, ﬁrst, idealizes digital sig-
natures and hash functions, accouting for concrete (negligible) security losses; then modularly
uses the authentication invariants to perform security experiment slicing; and ﬁnally reduces
the key-secrecy property to the security of multi-recipient encryption.
Paper Structure. In Section 2 we give a bird’s eye view of our approach and provide a road-map for
the paper, before moving on to more technical sections. In Section 3 we give a detailed description
of the DMP and of its formalization in EasyCrypt. Then, in Section 4 we formalize the security
model that we have adopted and in which we have proved security of the DMP. In Section 5 we
describe the machine-checked security proof. Section 6 gives an overview of the improvements to
EasyCrypt that were developed during the project. Section 8 contains a summary of related work,
and Section 9 the concluding remarks.
2 Overview
In this section we present an overview of the DMP goals and interface, and then outline the structure
and contents of the EasyCrypt model and proof (shown in Figure 1).
DMP Concepts. The fundamental unit of security in the DMP is a domain. Each domain provides
an independent distributed encryption functionality using a combination of machines and people
(collectively referred to as entities) which may change over time. Each entity can participate in
multiple domains.
Concretely, a domain is given by its entities, the rules governing the domain, and a set of
(symmetric) domain keys. The entities are of three types: HSMs, human operators, and front-end
hosts. HSMs are the inner security boundary of the DMP, and have a limited web-based API and
no other active physical interfaces to their operational state. Sensitive cryptographic materials
of an HSM are stored only in volatile memory, and are erased when the HSM exits operational
state, including shutdowns and resets. Domain keys likewise appear in the clear only in the volatile
memory of HSMs in the domain.
The goal of the DMP is to govern the operations on domain keys and to manage membership of
HSMs in a domain, as well as authorizing operators to act on a domain. HSMs do not communicate
directly with each other. Thus, a central function of the DMP is to synchronize the domain state
between domain participants. For this purpose, all information about a domain state, including its
domain keys, is transferred and stored in a domain token. A domain token contains encryptions of
the domain keys, and is authenticated in order to bind these encryptions to the domain state.
Domain state is modiﬁed through quorum-authenticated commands issued by authorized oper-
ators for that domain. Changes to domain state include modifying the list of trusted participants
in the domain, modifying the set of quorum rules, and periodically rotating domain keys. Rules
on quorum-signed commands are designed to mitigate attacks by colluding dishonest operators,