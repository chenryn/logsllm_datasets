英⽂文地址
翻译：blood_zer0、Lingﬁghting
如果翻译的有问题：联系我(Lzero2012)。匆忙翻译肯定会有很多错误，欢迎⼤大家⼀一起讨论Go语⾔言安全能⼒力力建设。
Go语⾔言-Web应⽤用程序安全编码实践是为了了给任何使⽤用Go进⾏行行编程与Web开发的⼈人员提供指导。
这本书是Checkmarx安全研究团队共同努⼒力力的结晶，它遵循OWASP安全编码实践快速参考指南。
这本书主要的⽬目的是为了了帮助开发⼈人员避免常⻅见错误，同时通过"实践⽅方法"学习编程语⾔言⼼心得。本书提供了了关于"如何安全执⾏行行"详细信息，展示了了在
开发过程中可能出现的安全问题。
Checkmarx是⼀一家应⽤用程序软件安全公司，公司使命是为企业组织提供应⽤用程序安全测试产品与服务，提⾼高开发⼈人员交付安全应⽤用程序。拥有1000
家客服包括全球⼗十⼤大软件供应商中的物价，美国顶级银⾏行行中的四家，以及许多财富500强和政府机构，包括SAP、三星和Salesforce.com
关于Checkmarx的更更多信息，可以访问checkmarx.com或者关注我们的twitter：@checkmarx
"安全编程实践快速参考指南"是OWASP开源Web安全项⽬目。它是⼀一种"技术⽆无关的通⽤用软件安全编程实践集，采⽤用全⾯面的列列表格式，可以集成到开发
⽣生命周期中"
OWASP本身是"⼀一个开放的社区，致⼒力力于使组织能够构思、开发、获取、操作和维护可信任的应⽤用程序。所有的OWASP⼯工具、⽂文档、论坛和章节都
是免费的，并且对任何有兴趣提⾼高应⽤用程序安全性的⼈人开放。"
在Web应⽤用程序安全性中，如果未对⽤用户输⼊入及相关数据进⾏行行验证则会存在安全⻛风险。我们通过"输⼊入验证"与"输出处理理"技术来解决这些问题。根据
服务器器的功能，应在应⽤用程序的每个层中执⾏行行这些验证。重要的⼀一点是，所有数据验证程序必须在可信系统上（即在服务器器上）完成。
如"OWASP SCP快速参考指南"中所述，有16个要点涵盖了了开发⼈人员在处理理输⼊入验证时应注意的问题。在开发应⽤用程序时缺乏对这些安全⻛风险的考虑
是注⼊入"OWASP Top 10"中排名第⼀一的主要原因之⼀一。
⽤用户交互是Web应⽤用程序当前开发范例例的主要内容。随着Web应⽤用程序内容和可能性越来越丰富，⽤用户交互和提交的⽤用户数据也会增加。正是在这种
背景下，输⼊入验证起着重要作⽤用。
当应⽤用程序处理理⽤用户数据时，默认情况下提交的数据必须被视为不不安全，并且只有在进⾏行行了了适当的安全检查后才能接受。还必须将数据源标识为受信
任或不不受信任，并且在不不受信任的源的情况下，必须进⾏行行验证检查。
在验证检查中，根据⼀一组条件检查⽤用户输⼊入，以保证⽤用户确实输⼊入了了预期数据。
重要信息：如果验证失败，则必须拒绝输⼊入。
这不不仅从安全⻆角度⽽而且从数据⼀一致性和完整性的⻆角度来看很重要，因为数据通常⽤用于各种系统和应⽤用程序。
本⽂文列列出了了开发⼈人员在Go中开发Web应⽤用程序时应注意的安全⻛风险。
Go语⾔言安全编码规范-翻译
介绍
关于Checkmarx
关于OWASP安全编程实践
输⼊入验证
验证
⽤用户交互
bloodzer0&Lingfighting
允许⽤用户输⼊入的应⽤用程序的任何部分都存在潜在的安全⻛风险。 问题不不仅可能来⾃自寻求危害应⽤用程序的⽅方法，也可能来⾃自⼈人为错误导致的错误输⼊入
（统计上，⼤大多数⽆无效数据情况通常是由⼈人为错误引起的）。 在Go中，有⼏几种⽅方法可以防⽌止此类问题。
Go具有本机库，其中包括有助于确保不不会发⽣生此类错误的⽅方法。 在处理理字符串串时，我们可以使⽤用类似以下示例例的包：
strconv 包处理理到其他数据类型的字符串串转换。
Atoi
ParseBool
ParseFloat
ParseInt
strings  包包含处理理字符串串及其属性的所有函数。
Trim
ToLower
ToTitle
regexp  包⽀支持正则表达式以适应⾃自定义格式。
utf8  包实现函数和常量量以⽀支持以UTF-8编码的⽂文本。它包括在runes和utf-8字节序列列之间转换的函数。
Valid（验证UTF-8编码）
ValidRune（验证UTF-8编码）
ValidString（验证UTF-8编码）
EncodeRune（UTF-8编码）
DecodeLastRune（UTF-8解码）
DecodeLastRuneInString（UTF-8解码）
注意：Form被go视为字符串串值的映射。
确保数据有效性的其他技术包括：
⽩白名单-尽可能根据允许的字符⽩白名单验证输⼊入。请参⻅见Validation - Strip tags。
边界检查-应验证数据和数字⻓长度。
字符转义-⽤用于特殊字符，如独⽴立引号。
数字验证-如果输⼊入是数字。
检查空字节-（%00）
检查新⾏行行字符-%0d，%0a，\r\n
检查路路径更更改字符-../或\..
检查扩展的UTF-8-检查特殊字符的可选表示形式
注意：确保HTTP请求和响应头只包含ASCII字符。
存在处理理go中安全性的第三⽅方软件包：
Gorilla是Web应⽤用程序安全性最常⽤用的包之⼀一。它⽀支持websockets、cookie会话、rpc等。
Form 将url.values解码为go值，并将go值编码为url.values。Dual Array和Full map⽀支持。
Validator 进⾏行行Go 结构体和字段验证，包括跨字段、跨结构体、映射以及切⽚片和数组。
当需要使⽤用⽂文件时（read或write⽂文件）也应该进⾏行行验证，因为⼤大多数⽂文件操作操作都处理理⽤用户数据。
其他⽂文件检查过程包括"⽂文件存在性检查"，以验证⽂文件名是否存在。
附加⽂文件信息在⽂文件管理理部分，有关错误处理理的信息可以在⽂文档的错误处理理部分找到。
当数据从受信任的源传递到不不受信任的源时，应进⾏行行完整性检查。这保证了了数据没有被篡改，我们正在接收预期的数据。其他数据源检查包括：
⽂文件操作
数据源
bloodzer0&Lingfighting
跨系统⼀一致性检查
Hash统计
参照完整性
注意：在现代关系数据库中，如果主键字段中的值不不受数据库内部机制的约束，那么应该对它们进⾏行行验证：
唯⼀一性检查
表查询检查
根据数据验证的最佳实践，输⼊入验证只是数据验证指南的第⼀一部分。因此，还应执⾏行行验证后操作。使⽤用的验证后操作因上下⽂文⽽而异，分为三类：
强制执⾏行行：为了了更更好地保证我们的应⽤用和数据，存在着⼏几种执⾏行行类型。
通知⽤用户提交的数据不不符合要求，因此应修改数据以符合要求。
在服务器器端修改⽤用户提交的数据，⽽而不不通知⽤用户所做的更更改，这最适⽤用于具有交互使⽤用的系统。
注意：后者主要⽤用于外观更更改（修改⽤用户敏敏感数据可能导致截断等问题，从⽽而导致数据丢失）。
咨询：建议操作通常允许输⼊入不不变的数据，但消息来源参与者被告知所述数据存在问题。这最适⽤用于⾮非交互式系统。
验证：验证是指建议操作中的特殊情况。在这些情况下，⽤用户提交数据，源参与者要求⽤用户验证所述数据并建议更更改。然后，⽤用户接受这些更更改
或保留留其原始输⼊入。
⼀一个简单的⽅方法来说明这是⼀一个账单地址表单，⽤用户输⼊入他的地址，系统建议与帐户相关的地址。然后，⽤用户接受其中⼀一个建议或发送到最初输⼊入的
地址。
处理理是指删除或替换提交的数据的过程。在处理理数据时，在进⾏行行了了正确的验证检查之后，通常会采取⼀一个额外的步骤来加强数据安全性，即处理理。
最常⽤用的处理理⽅方法如下：
在本机包HTML中，有两个⽤用于清理理的函数：⼀一个⽤用于转义HTML⽂文本，另⼀一个⽤用于取消转义HTML。函数 escapeString() 接受⼀一个字符串串并返
回带有特殊转义字符的相同字符串串。即，、&、'和'。相反，还有 unescapeString() 函
数可以从实体转换为字符。
虽然 html/template 包有 striptags() 函数，但它是未导出的。由于没有其他本机包具有去除所有标记的功能，因此可以选择使⽤用第三⽅方
库，或者复制整个函数以及它的私有类和函数。
⼀一些第三⽅方库可以实现这⼀一点：
https://github.com/kennygrant/sanitize
https://github.com/maxwells/sanitize
https://github.com/microcosm-cc/bluemonday
text/template 和 html/template 包括⼀一种从模板中删除空⽩白的⽅方法，⽅方法是在操作的分隔符内使⽤用减号。
使⽤用源代码执⾏行行模板
{{- 23}}  ，则 Content-Type 将是text/html。
bloodzer0&Lingfighting