𝑗
𝑝𝑤( 𝑗𝑖) =
𝑏𝑤 ∀𝑠, 𝑡, 𝑖 = 𝑠, 𝑤 ∈ 𝑊 (𝑠, 𝑡)
0 ∀𝑠, 𝑡, 𝑖 ≠ 𝑠, 𝑖 ≠ 𝑡, 𝑤 ∈ 𝑊 (𝑠, 𝑡)
−𝑏𝑤 ∀𝑠, 𝑡, 𝑖 = 𝑡, 𝑤 ∈ 𝑊 (𝑠, 𝑡)
.
(8)
Here, 𝑏𝑤 is the reservation associated with the logical flow, and
𝑝𝑤(𝑖 𝑗) is the amount of this reservation that must be supported
on logical segment 𝑖 𝑗. Each logical flow 𝑤 may itself be associated
with a condition ℎ𝑤, which indicates the reservation associated
with 𝑤 is only guaranteed when ℎ𝑤 is satisfied. Let 𝑊 (𝑠, 𝑡) be the
set of all logical flows for traffic from 𝑠 to 𝑡. Then, relative to (P2),
the logical flow model involves adding (8), and changing (7) to

𝑙∈𝑇 (𝑠,𝑡)
≥
𝑎𝑙 (1 − 𝑦𝑙) + 

𝑠′,𝑡′∈𝑉 ,𝑤′∈𝑊 (𝑠′,𝑡′)
𝑏𝑤ℎ𝑤
𝑤∈𝑊 (𝑠,𝑡)
𝑝𝑤′(𝑠𝑡)ℎ𝑤′ + 𝑧𝑠𝑡𝑑𝑠𝑡
∀𝑠, 𝑡 ∈ 𝑉 ,∀(𝑦, ℎ) ∈ 𝑌 𝐻 .
The first term on the RHS captures the reservation that must be
supported on (𝑠, 𝑡) for any logical flow 𝑤′ from 𝑠′ to 𝑡′.
To obtain LSs, we decompose the flow into sequences [9, 23].
For each flow 𝑤 ∈ 𝑊 (𝑠, 𝑡), this approach generates a derived graph
with the same nodes as the original topology. For each node pair
(𝑖, 𝑗), if 𝑝𝑤(𝑖 𝑗) > 0, we add an edge from 𝑖 to 𝑗 with the weight
being 𝑝𝑤(𝑖 𝑗). Then, we search for the widest path from 𝑠 to 𝑡 on
this graph, and use the sequence of hops in this widest path as a LS
with condition ℎ𝑤.
Relationship to link bypass. While we have focused on tunnel
based mechanisms so far [26], we next discuss the relationship
of our work to R3 [37], another congestion-free routing scheme.
Instead of tunnels, R3 [37] focuses on a link bypass mechanism,
where traffic on a link 𝑒 = ⟨𝑖, 𝑗⟩ is re-routed upon its failure, along
a pre-computed flow from 𝑖 to 𝑗 and this flow does not use 𝑒.
We first illustrate using Fig. 5 that our models can out-perform
R3. As Table 1 shows, when R3 is applied to Fig. 5, no traffic can
be carried from 𝑠 to 𝑡 if two link failures must be tolerated. To
understand why, consider a scenario where links 1 − 5, and 5 − 𝑡
fail. Since a link bypass for 1 − 5 must start at 1 and end at 5, and a
link bypass for 5 − 𝑡 must start at 5 and end at 𝑡, no viable bypass
paths exist for either link. Instead, an obvious feasible strategy is
to route the traffic along the path 𝑠 − 2 − 6 − 𝑡, an option that is not
considered by R3 because 𝑠 is not an end point of either 1 − 5 or
5 − 𝑡.
We now state a more formal result:
PCF: Provably Resilient Flexible Routing
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Proposition 4. A special case of PCF’s logical flow model where
conditions are restricted to the no failure or single link failure scenarios,
and links are tunnels, dominates (performs as well as or better than)
R3.
Proof. To see this, consider the logical flow model under the
conditions above. More specifically, for each node pair (𝑠, 𝑡), we
have a flow 𝑤 with the condition being no failure and we constrain
the flow to exactly serve the demand, i.e., 𝑏𝑤 = 𝑧𝑠𝑡𝑑𝑠𝑡. For node pair
(𝑖, 𝑗) which has an edge, we have a flow 𝑤 with the condition being
the link (𝑖, 𝑗) being dead. This model is exactly the Generalized-R3
model presented in [10] which has been shown to dominate R3. □
Shared risk links groups (SRLGs) and node failures While
we have focused on link failures, a few modifications allow for the
treatment of shared risk link groups (SRLGs), and node failures. An
SRLG captures that a group of links may fail together (e.g., owing
to failure of an underlying optical element) [27]. Each SRLG is
modeled by a condition ℎ𝑞 which indicates all links in that SRLG
fail. Observe that the first constraint in (4) is imposed on 𝑥 variables
that capture link failures. Instead, the constraint can be imposed on
conditions dependent on the 𝑥 variables. For example, a requirement
that at most 𝑓 SRLGs fail is modeled by requiring that𝑞∈𝑄 ℎ𝑞 ≤ 𝑓 ,
where 𝑄 is the set of SRLGs. Similarly, the failure of each node is
modeled by a condition that all links incident on that router fail. Our
discussion and results in §3.2 holds for node failures as well - i.e.,
relative to FFC, PCF-TF performs better, and PCF-TF’s performance
does not degrade with tunnels. Further, our models do not suffer
from the weaknesses of link bypass mechanisms including R3 [37],
that cannot deal with node failures (since no viable bypass paths
for link ⟨𝑖, 𝑗⟩ from 𝑖 to 𝑗 exist when node 𝑗 itself fails).
4 REALIZING PCF’S MECHANISMS
In this section, we discuss how to realize PCF’s network response
mechanisms associated with the models in §3.
First, PCF-TF employs the same response mechanism as FFC,
which we describe in the rest of this paragraph. Under any failure
scenario, traffic across tunnels between a source 𝑠 and destination 𝑡
is carried on all live tunnels, and in proportion to the reservations
on the tunnels. Consider three tunnels from 𝑠 to 𝑡 with reservations
of (2, 3, 5). When all the tunnels are alive, the (𝑠, 𝑡) traffic is split
across the tunnels in the ratio (0.2, 0.3, 0.5). If the first tunnels fails,
the traffic is sent across the tunnels in the ratio (0, 0.3
We next discuss the response mechanisms associated with our
models based on LSs. First, we discuss a mechanism that works
for arbitrary LSs (§4.1). We then show that when LSs are topologi-
cally sorted (more formally explained later), a response mechanism
similar to FFC may be used (§4.2).
0.8).
0.8 , 0.5
4.1 Realizing general logical sequences
Consider Fig. 6(a) which shows the physical tunnels and the LSs
used with our offline PCF-LS, and PCF-CLS models for an example
setting (e.g., 𝑙1 is a physical tunnel between 𝐴 and 𝐶, while 𝑞1 is
a LS between 𝐴 and 𝐷) where traffic is carried from 𝐴 to 𝐵. These
models determine the reservations associated with each tunnel, and
each LS (e.g., 𝑎𝑙1 and 𝑏𝑞1 are respectively the reservation on 𝑙1 and
𝑞1).
We discuss an approach to realize this abstract model only using
tunnels (in §4.2, we discuss an alternate implementation). While in
FFC, a tunnel 𝑙 from 𝑖 to 𝑗 may carry traffic only from 𝑖 to 𝑗, PCF
permits some flexibility – e.g., 𝑙 may carry traffic from 𝑠 to 𝑡 if in
the abstract model, (𝑖, 𝑗) is a segment in a LS from 𝑠 to 𝑡.
Like FFC, our models are run at the granularity of several minutes
to periodically recompute reservations (e.g., to handle significant
shifts in traffic demands). Once computed for a given traffic matrix,
we show that the traffic carried on tunnel 𝑙 to destination 𝑡 for any
failure scenario may be computed online by solving a system of
linear equations, which is much faster than solving linear programs
(LPs) such as the multi-commodity flow problem (e.g., a popular
approach to solving LPs involves solving many linear systems).
In describing our approach, it is helpful to consider a matrix 𝑀
that summarizes the reservations. For instance, for the topology
in Fig. 6, the reservation matrix 𝑀 is summarized in Fig. 7. Each
row and column corresponds to a node pair. The diagonal entries
indicate the total reservation across all live tunnels and active logical
sequences associated with that node pair. A non-diagonal entry
in column 𝑖 and row 𝑗 indicates that the node pair 𝑗 must carry
traffic corresponding to column 𝑖. For instance, in the third row
corresponding to the node pair (𝐴, 𝐷), the diagonal entry 𝑎𝑙3+𝑏𝑞1 is
the total reservation associated with that node pair (over tunnel 𝑙3
and LS 𝑞1). Further, the entry −𝑏𝑞2 reflects that (𝐴, 𝐷) is a segment
of the LS 𝑞2 from 𝐴 to 𝐵 and must be able to carry the reservation
𝑏𝑞2 associated with 𝑞2.
A node pair (𝑠, 𝑡) is considered to be of interest if it carries
positive demand, or if it carries traffic for another node pair of
interest. Let 𝑃 be the set of node pairs of interest (more formally
defined in the Appendix). Constraint (7) in our LS model can be
equivalently expressed in matrix notation as 𝑀 × (cid:174)1 ≥𝑣 (cid:174)𝐷. Here, (cid:174)1
and (cid:174)𝐷 are 𝑃 × 1 column vectors. All entries of (cid:174)1 are 1, while the 𝑝th
row of (cid:174)𝐷 has an entry 𝑧𝑝𝑑𝑝 indicating the total traffic associated
with pair 𝑝 that can be carried. Let (cid:174)𝑈 be a 𝑃 × 1 column vector.
Then, we have:
Proposition 5. 𝑀 is an invertible M-matrix1, and there is a
unique solution (cid:174)𝑈 ∗ to the linear system 𝑀 × (cid:174)𝑈 = (cid:174)𝐷, where ∀(𝑖, 𝑗) ∈ 𝑃,
(cid:174)𝑈 ∗(𝑖, 𝑗) ∈ [0, 1].
We defer a proof to the appendix but discuss the implications
here. While PCF’s models determine the reservations, realizing
them in practice requires determining the fraction of the reserva-
tion that is actually used in any given failure scenario. The above
result indicates that such a fraction exists and may be obtained as
a solution to a linear system of equations. While linear systems are
already much faster to solve than LPs, the result also indicates that
the matrix 𝑀 is of a type for which simple and memory-efficient
iterative algorithms for solving linear systems can be used [4].
For 𝑡 ∈ 𝑉 , let (cid:174)𝐷𝑡 be a 𝑃 × 1 column vector where the 𝑝th row
of (cid:174)𝐷𝑡 has an entry 𝑧𝑝𝑑𝑝 if 𝑡 is an end point of 𝑝, and 0 otherwise.
Using the same argument as for Proposition 5, there is a unique
solution (cid:174)𝑈 ∗
𝑡 to the linear system 𝑀 × (cid:174)𝑈𝑡 = (cid:174)𝐷𝑡. Then, the following
holds:
1A matrix 𝑇 is an invertible M-matrix if 𝑇𝑖 𝑗 ≤ 0 when 𝑖 ≠ 𝑗 and 𝑇 𝑥 ≥ 0 implies that
𝑥 ≥ 0.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Chuan Jiang, Sanjay Rao, and Mohit Tawarmalani
Figure 6: Realizing PCF in practice. (a) Example abstract model; (b) a practical realization using only tunnels applicable
for arbitrary LSs (§4.1); (c) an alternate realization when LSs can be topologically sorted (§4.2).
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
𝐴𝐶 𝐶𝐷
0
𝑎𝑙1
0
𝑎𝑙2
0
0
0
0
0
0
𝐴𝐷
−𝑏𝑞1
−𝑏𝑞1
𝑎𝑙3 + 𝑏𝑞1
0
0
𝐷𝐵
0
0
0
𝑎𝑙4
0
𝐴𝐵
0
𝐴𝐶
0
𝐶𝐷
−𝑏𝑞2
𝐴𝐷
−𝑏𝑞2
𝐷𝐵
𝑎𝑙5 + 𝑏𝑞2 𝐴𝐵
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
𝑀1 =
𝑡1
, (cid:174)𝑈 ∗
𝑡2
Figure 7: Reservation matrix associated with Fig. 6.
Proposition 6. For any live tunnel 𝑙 from 𝑖 to 𝑗 and any destina-
tion 𝑡, let 𝑟𝑙𝑡 = (cid:174)𝑈 ∗
𝑡 (𝑖, 𝑗)𝑎𝑙 be the total traffic carried to destination 𝑡
on tunnel 𝑙. Then 𝑟𝑙𝑡 represents a valid routing which carries all the
traffic with the destination of 𝑡.
We compute 𝑈 ∗
, ... (cid:174)𝑈 ∗
𝑡 for every node 𝑡 by solving the linear system
𝑀 × [ (cid:174)𝑈 ∗
𝑡|𝑉 |] = [ (cid:174)𝐷𝑡1, (cid:174)𝐷𝑡2, ... (cid:174)𝐷𝑡|𝑉 |] , which in turn allows
𝑟𝑙𝑡 to be computed. As computed, 𝑟𝑙𝑡 may have cycles that can be
eliminated by subtracting flow associated with the cycle. Fig. 6(b)
shows a concrete realization of PCF’s routing on tunnels for the