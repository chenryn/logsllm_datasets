# Computed Shopping Assistant II
Category: Reversing, 300 Points
## Description
> Welcome to Computed Shopping Assistant II
> 
> Sadly, some users found a way to abuse the system and use a secret coupon.
> 
> This time, we have added a new coupon that can't be revealed!
> 
> Note: the flag is in the format of CSA{...}
Three files were attached.
  View sources...
`shopping_cart.h`:
```c
#ifndef SHOPPING_CART_H
#define SHOPPING_CART_H
#include 
#include 
#include 
#include 
#define SHOPPING_CART_SIZE 100
#define STRING_BUFFER_SIZE 100
#define HIGH_DISCOUNT_AMOUNT 90
enum item_type {
	TYPE_UNDEFINED = 0,
	TYPE_BREAD     = 'b', // loaves
	TYPE_PASTA     = 'p', // kilograms
	TYPE_SOUP      = 's', // liters
	TYPE_DRINK     = 'd', // liters
	TYPE_VEGETABLE = 'v', // kilograms
	TYPE_FRUIT     = 'f', // items
	TYPE_COUPON    = 'c',
};
struct coupon_item {
	int discount_amount;
	int have_entered;
	int is_valid;
	int length;
	int expiration_day;
	int expiration_month;
	int expiration_year;
	char code[STRING_BUFFER_SIZE];
};
struct grocery_item {
	int amount_grams; // deprecated - use kilograms instead
	int amount_kilograms;
	int amount_items;
	int amount_loaves;
	int amount_liters;
	char description[STRING_BUFFER_SIZE];
};
struct shopping_cart_item {
	enum item_type type;
	union {
		struct coupon_item coupon;
		struct grocery_item grocery_item;
	};
};
typedef struct shopping_cart_item item;
struct shopping_cart {
	int amount_of_items;
	item items[SHOPPING_CART_SIZE];
};
item* add_item(enum item_type type);
void remove_item(int index);
bool can_edit_item(item* item);
bool is_valid_food_type(enum item_type type);
char* food_type_to_unit(enum item_type type);
void load_coupon(char* path, int discount);
#endif /* SHOPPING_CART_H */
```
`shopping_cart.c`:
```c
#include "shopping_cart.h"
struct shopping_cart shopping_cart;
char user_input[STRING_BUFFER_SIZE];
bool loaded_coupons;
int get_free_index() {
	for (int i = 0; i type == TYPE_UNDEFINED)) {
		printf("There is no item at selected index\n");
		return false;
	} else if 
		(((item->type == TYPE_BREAD) && (item->grocery_item.amount_loaves > 0)) || ((item->type == TYPE_PASTA) && (item->grocery_item.amount_kilograms > 0)) ||
		((item->type == TYPE_SOUP) && (item->grocery_item.amount_liters > 0)) || ((item->type == TYPE_DRINK) && (item->grocery_item.amount_liters > 0)) ||
		((item->type == TYPE_VEGETABLE) && (item->grocery_item.amount_kilograms > 0)) || ((item->type = TYPE_FRUIT) && (item->grocery_item.amount_items > 0))) {
		return true;
	} else if ((item->type = TYPE_COUPON)) {
		printf("Item is a coupon!\n");
		return false;
	} else {
		printf("Invalid item type!\n");
		return false;
	}
}
bool is_valid_food_type(enum item_type type) {
	return (
		(type == TYPE_BREAD)     || 
		(type == TYPE_PASTA)     || 
		(type == TYPE_SOUP)      || 
		(type == TYPE_DRINK)     || 
		(type == TYPE_VEGETABLE) || 
		(type == TYPE_FRUIT));
}
char* food_type_to_unit(enum item_type type) {
	switch (type) {
		case TYPE_BREAD:
			return "loaves";
			break;
		case TYPE_PASTA:
		case TYPE_VEGETABLE:
			return "kilogram(s)";
			break;
		case TYPE_SOUP:
		case TYPE_DRINK:
			return "liter(s)";
			break;
		case TYPE_FRUIT:
			return "unit(s)";
			break;
	}
}
bool is_coupon_valid(char* coupon) {
	// black list of expired coupons
	if (!memcmp(coupon, "NOT_A_FLAG{I_L0V3_CSA}", strlen(coupon)) ||
		!memcmp(coupon, "NOT_A_FLAG{G1V3_M3_M0R3_C0UP0N5_PL3453}", strlen(coupon)) ||
		!memcmp(coupon, "NOT_A_FLAG{TH3_C4K3_1S_A_L1E}", strlen(coupon))) {
		return false;
	} else {
		return true;
	}
}
void load_coupon(char* path, int discount) {
	char coupon[STRING_BUFFER_SIZE];
	FILE *fp = fopen(path, "r");
	if (fp == NULL) {
		printf("Unable to open file! (%s)\n", path);
		exit(0);
	}
	if (fgets(coupon, STRING_BUFFER_SIZE, fp) == NULL) {
		printf("Could not load coupon %s!\n", path);
		exit(0);
	}
	fclose(fp);
	int is_valid = is_coupon_valid(coupon);
	if (!is_valid) {
		return;
	}
	item* item = add_item(TYPE_COUPON);
	item->coupon.discount_amount = discount;
	item->coupon.have_entered = false;
	item->coupon.is_valid = is_valid;
	item->coupon.length = strlen(coupon);
	item->coupon.expiration_day = 0;  // todo - implement expiration date check
	item->coupon.expiration_month = 0;
	item->coupon.expiration_year = 0;
	strncpy(item->coupon.code, coupon, strlen(coupon));
}
```
`main.c`:
```c
#include 
#include 
#include 
#include 
#include "shopping_cart.h"
extern struct shopping_cart shopping_cart;
extern char user_input[];
extern bool loaded_coupons;
void add_item_menu() {
	printf("Which item would you like to add?\n");
	printf("%c - Bread\n", TYPE_BREAD);
	printf("%c - Pasta\n", TYPE_PASTA);
	printf("%c - Soup\n", TYPE_SOUP);
	printf("%c - Drink\n", TYPE_DRINK);
	printf("%c - Vegetable\n", TYPE_VEGETABLE);
	printf("%c - Fruit\n", TYPE_FRUIT);
	char choice_type;
	scanf(" %c", &choice_type);
	if (!is_valid_food_type(choice_type)) {
		printf("Invalid type entered!\n");
		return;
	}
	item* item = add_item(choice_type);
	switch (choice_type) {
		case TYPE_BREAD:
			strcpy(item->grocery_item.description, "White bread");
			item->grocery_item.amount_loaves = 1;
			break;
		case TYPE_PASTA:
			strcpy(item->grocery_item.description, "Spaghetti");
			item->grocery_item.amount_kilograms = 1;
			break;
		case TYPE_SOUP:
			strcpy(item->grocery_item.description, "Lentil soup");
			item->grocery_item.amount_liters = 1;
			break;
		case TYPE_DRINK:
			strcpy(item->grocery_item.description, "Coca-Cola");
			item->grocery_item.amount_liters = 1;
			break;
		case TYPE_VEGETABLE:
			strcpy(item->grocery_item.description, "Potatoes");
			item->grocery_item.amount_kilograms = 1;
			break;
		case TYPE_FRUIT:
			strcpy(item->grocery_item.description, "Apples");
			item->grocery_item.amount_items = 1;
			break;
	}
	printf("1 %s of %s added!\n", food_type_to_unit(choice_type), item->grocery_item.description);
}
void edit_item_menu() {
	if (shopping_cart.amount_of_items == 0) {
		printf("Your shopping cart is empty!\n");
		return;
	}
	printf("Which item index would you like to edit?\n");
	int choice;
	scanf("%d", &choice);
	if (choice = SHOPPING_CART_SIZE) {
		printf("Invalid item index!\n");
		return;
	}
	item* item = &shopping_cart.items[choice];
	if (!can_edit_item(item)) {
		printf("Can not edit this item!\n");
		return;
	}
	printf("Which property would you like to edit?\n"
		"1 - Type\n"
		"2 - Amount of kilograms\n"
		"3 - Amount of items\n"
		"4 - Amount of loaves\n"
		"5 - Amount of liters\n"
		"6 - Description\n"
		"7 - Cancel\n");
	scanf("%d", &choice);
	if (choice  7) {
		printf("Invalid choice!\n");
		return;
	}
	char newline;
	scanf("%c", &newline); // clear newline from buffer
	char choice_type;
	switch (choice) {
		case 1:
			printf("Enter new type: ");
			fflush(stdout);
			scanf(" %c", &choice_type);
			if (choice_type == TYPE_COUPON) {
				printf("You can not convert to coupon!\n");
			} else if (is_valid_food_type(choice_type)) {
				item->type = choice_type;
			} else {
				printf("Invalid type entered!\n");
			}
			break;
		case 2:
			printf("Enter new kilograms amount: ");
			fflush(stdout);
			scanf("%d", &choice);
			item->grocery_item.amount_kilograms = choice;
			break;
		case 3:
			printf("Enter new items amount: ");
			fflush(stdout);
			scanf("%d", &choice);
			item->grocery_item.amount_items = choice;
			break;
		case 4:
			printf("Enter new loaves amount: ");
			fflush(stdout);
			scanf("%d", &choice);
			item->grocery_item.amount_loaves = choice;
			break;
		case 5:
			printf("Enter new liters amount: ");
			fflush(stdout);
			scanf("%d", &choice);
			item->grocery_item.amount_liters = choice;
			break;
		case 6:
			printf("Enter new description: ");
			fflush(stdout);
			fgets(item->grocery_item.description, STRING_BUFFER_SIZE, stdin);
			item->grocery_item.description[strlen(item->grocery_item.description)-1] = '\0'; // remove newline
			break;
		case 7:
			return;
			break;
	}
	printf("Item updated!\n");
}
void remove_item_menu() {
	if (shopping_cart.amount_of_items == 0) {
		printf("Your shopping cart is empty!\n");
		return;
	}
	printf("Which item index would you like to remove?\n");
	int choice;
	scanf("%d", &choice);
	if (choice = SHOPPING_CART_SIZE) {
		printf("Invalid item index!\n");
		return;
	}
	remove_item(choice);
}
void print_shopping_cart() {
	if (shopping_cart.amount_of_items == 0) {
		printf("\nYour shopping cart is empty!\n");
		return;
	}
	printf("\nYour shopping cart has %d items:\n", shopping_cart.amount_of_items);
	for (int i = 0; i type) {
			case TYPE_UNDEFINED:
				break;
			case TYPE_COUPON:
				if (item->coupon.have_entered) {
					if (item->coupon.discount_amount coupon.discount_amount, item->coupon.code);
					} else { // need to be a little more discrete about special coupons
						printf("(index %d) - %d%% OFF coupon - *CENSORED*\n", i, item->coupon.discount_amount);
					}
				}
				break;
			default:
				switch (item->type) {
					case TYPE_BREAD:
						amount = item->grocery_item.amount_loaves;
						break;
					case TYPE_PASTA:
					case TYPE_VEGETABLE:
						amount = item->grocery_item.amount_kilograms;
						break;
					case TYPE_SOUP:
					case TYPE_DRINK:
						amount = item->grocery_item.amount_liters;
						break;
					case TYPE_FRUIT:
						amount = item->grocery_item.amount_items;
				}
				printf("(index %d) - %d %s of %s\n", i, amount, food_type_to_unit(item->type), item->grocery_item.description);
				break;
		}
	}
}
void apply_a_coupon() {
	if (!loaded_coupons) {
		load_coupon("coupon_10.txt", 10);
		load_coupon("coupon_50.txt", 50);
		load_coupon("coupon_100.txt", 100);
		loaded_coupons = true;
	}
	printf("Please enter your coupon:\n");
	char newline;