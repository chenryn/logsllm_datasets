zeros to eliminate the uncertainty in allocated memory
blocks. Further, for each request, NaPu will start a
new segment start from address 0x10000, and for each
function executed in NaPu, its memory address is a ﬁxed
value. Finally, any instruction that can get the value of
segment registers is disallowed.
Memory exception handling. Memory allocation may
fail. To deal with this situation, one solution is to
suspend the execution until free memory appears. But
this method is easy to create a deadlock, hence it is
not suitable for most pure computing scenarios. Another
12
Mechanism
PLAIN
CRAM-MD5
HOTP
TOTP
Response computing function f
Base64(pw)
Base64(HM ACMD5(pw, nonce))
Truncate(HM ACSHA-1(pw, C))
Truncate(HM ACSHA-1(pw, time))
Table I
RESPONSE-COMPUTATION FUNCTION f OF DIFFERENT
AUTHENTICATION MECHANISMS.
solution is to return an error. However, if this error
information is returned directly to the inner function
in NaPu, the inner function can generate different val-
ues according to the allocation results, which violates
the pure function characteristics. NaPu takes a simple
method that the outermost function in NaPu will be
stopped as failure and its caller will get an exception if
any memory allocation fails. The framework will catch
this exception and directly reject the login attempt.
Through global state isolation and internal state reset,
the only inputs of response-computation function are
the challenge and the password. Meanwhile, all the
instructions allowed by NaPu are all deterministic. Then
for the same cha and pw pairs, the return values of f
will be identical, which meets the requirements of the
theorems in Section IV-B.
NaPu and DeterministicExecution [1] are parallel
projects that are independent to each other. The Deter-
ministicExecution is a subproject of NaCl to disabling
sources of non-determinism for guest code, while Na-
Pu’s scenario is more succinct because response com-
puting function usually only takes arithmetic operations.
VI. EVALUATION
In this section, we describe our results in porting
several widely used RCA modules into our framework,
measuring their performance overhead in NaPu, and
checking whether they are backdoor-free. We also did
experiments to show the ability to detect real-world
backdoors. In our experiments, NaPu is deployed in
the authentication module, and the authentication is per-
formed on the server side. The performance evaluation
was carried out on a Linux Ubuntu server 10.10 with
Intel Core2 Duo CPU at 2.40GHz. Because the response
computing function f is pure, we can test its property
in parallel when needed.
We evaluated NaPu by porting response computing
functions of different RCA mechanisms into our frame-
work. These RCA mechanisms are from widely adopted
authentication layer SASL and OTP, shown in table I.
• In PLAIN, the challenge is a simple query for
login, and the response is the password encoded
by base64. Hence f = Base64(pw).
• In CRAM-MD5, the challenge is a base64 encoded
nonce. When receiving the challenge, the user de-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
Mechanism
PLAIN
CRAM-MD5
HOTP
TOTP
PLAIN
CRAM-MD5
HOTP
TOTP
pw
length(bit)
128
128
128
128
256
256
256
256
Original
Time(μs)
0.0923
1.8121
3.5615
3.6286
0.1704
1.8962
3.6748
3.6512
NaPu
Time(μs)
0.0917
1.8588
4.1756
4.1652
0.1555
1.9342
4.2393
4.2267
Runtime
Overhead
-0.65%
2.57%
17.24%
14.78%
-8.74%
2.00%
15.36%
15.76%
Table II
RUNTIME OVERHEAD OF NAPU.
codes it to get the nonce, then hash it using HMAC
with the user’s password pw as the secret key.
Therefore f = Base64(HM AC(pw, nonce)).
• In HOTP, the challenge is an increasing counter,
usually 8-byte. We denote it as C. The re-
sponse is a truncated value on HMAC of
the key pw and the counter C. Therefore
f=Truncate(HM ACSHA-1(pw, C)). Here Truncate
represents the function that converts an HMAC-
SHA-1 value into an HOTP value which usually a
6-digit number.
• In TOTP,
the challenge is an anticipated time,
the response is a truncated value on HMAC of
the key pw and the time-stamp time. There-
fore f=Truncate(HM ACSHA-1(pw, time)). Here
Truncate represents the function that converts an
HMAC-SHA-1 value into an TOTP value which
usually a 6-digit number.
A. Performance overhead
We compared the performance of these response-
computation functions ported in NaPu with its original
implementation. For each function, we measured 107
times for both 128-bit pw and 256bit pw and then av-
eraged the time measurements. These functions seldom
use heavy memory operations, so NaPu only introduces
initial reset and more API/OPCode restrictions over
NaCl, and the performance overhead is about the same
as NaCl.
The results, shown in Table II, show that the max-
imum performance overhead is less than 20%, and
the single processing time is less than 5 μs, which is
acceptable in real login modules. The interesting part
is in PLAIN mechanism, the f in NaPu is faster than
native code. The reason is that NaPu uses 32-bytes
block alignment which is more suitable for Base64
transformation.
B. Backdoor usability testing
1) Ported login modules: We conducted experiments
to measure the weak collision probability of response
computing functions in these ported login modules.
13
.
• For CRAM-MD5, the challenge is random. We
randomly generate 106 cha. For each cha, we
generated 105 random pw to test its Pcol, and then
got their maximum number as P max
col
• For TOTP, the challenge is predictable. We as-
sumed cha is increased every 30 seconds and we
generated all possible cha for the next ten years,
which are 10 million different cha; For each cha,
we randomly generated 105 pw to test its Pcol, and
then got their maximum number as P max
col
• For HOTP, the challenge is predictable. We as-
sumed the counter is increased 100 times at most
every day, which means that a person normally
logins less than 100 times per day. We generated
365000 cha for the next 10 years. For each cha,
we randomly generated 105 pw to test its Pcol, and
then get their maximum number as P max
col
.
.
We set
the backdoor usability threshold Pthres as
0.01%, which means that an attacker can get no more
than 1 successful login in 10,000 attempts.
We had different test cases for different scenarios of
cha. We designed these experiments as the following:
• For PLAIN, the challenge is not involved in the
response computing. We generated 105 random
passwords as the input of f, and got 105 responded
values. The password was 128 bit and the response
was 144 bit. The weak collision probability (i.e.,
the upper bound of Pbackdoor) was almost 0.
All passwords used in experiments are 128-bit long.
The output response length is from RFC standard. All of
these tests are completed within a week using 10 severs
in parallel. The results, shown in Table III, present that
are less than 10−4, so Pbackdoor is less than
all P max
col
Pthres = 0.01%. So we can assert that there are no usable
backdoors in these authentication mechanisms.
2) Volunteer-created backdoor: To test the frame-
work’s ability to detect the backdoor, we asked some
student volunteers who study computer science to cre-
ate different backdoors. Because most of the existing
login backdoors are using pre-set special credential
to circumvent
the authentication, which is naturally
eliminated in our framework, for simplicity, we limited
the scope of Type-2 backdoors so that the response
should be compared explicitly. The students can use
different trigger conditions or modify hash functions but
the challenges were randomly generated.
We used our testing strategy to test their backdoor
probability. The framework caught all of these back-
doors. There were two representative backdoors in these
experiments. Both of them can reach a very high P max
.
col
One is 100% and the other is 67%.
We asked the backdoor creators to explain their
methods. One used a special challenge as the trigger. He
ﬁrst changed the challenge to bit form. If the fourth bit
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
Mechanism
PLAIN
TOTP
HOTP
CRAM-MD5
pw
len(bit)
128
128
128
128
cha
len(bit)
None
64
64
64
res
len(bit)
144
20
20
128
(∗103)
None
10000
365
1000
cha num pw num per cha
P max
col
(/105)
0
2
2
0
Time
(hours)
≈ 0
1065
30
97
105
105
105
105
COLLISION TESTING OF PORTED RESPONSE COMPUTING FUNCTION f .
Table III
of the challenge is 1 and the ﬁfth bit is 0, then f outputs
a special response. Then he tried several times and
waited for an appropriate challenge to log in. Basically
he had 1/4 probability to log in successfully. During our
testing, we easily found this backdoor because the P max
col
is 100%.
In another case, the hash function was wrapped to
be insecure. The creator ﬁrst computed the response as
normal. Then he mapped those response value to a small
space with high collision probability to some special
responses, which means f () compresses the image of a
secure hash function. Through the standard testing, we
discovered this malicious response computing function
with P max
col = 67%.
VII. DISCUSSION AND LIMITATION
Since either malicious developers or outsourced con-
tractors have chances to instrument backdoors, back-
doors are a constant threat for large software system-
s [19]. Advanced attackers can even plant backdoors
into cryptography algorithms which are even more d-
ifﬁcult to discover. For reference, even for well-known
algorithms such as DES and MD5, their weaknesses
were found after they had been used widely for many
years.
Instead of trying to detect all possible backdoors in
software, this paper focuses on preventing usable back-
doors in response-computable login modules, which was
widely used in many authentication systems.
In our login framework, we need several
trusted
modules (see Section IV). In fact, these trusted modules
contain very simple logic, such as ﬁle read and socket
communications. In general, operating systems directly
implement these functionalities. In addition, we also
need a trusted random number generator, which is also a
basic kind of system service (such as /dev/urandom
in Linux systems).
Thus, unless the backdoor creator can take control
of operating systems, we think existing mechanisms
such as manual code review and program veriﬁcation
approaches can ensure that the assistant modules are
trusted. Furthermore, techniques such as CFI/SFI can
be used to prevent an attacker from bypassing the
authentication procedure. On the other hand, for the en-
terprises which publish user-space software, malicious
programmers hardly compromise the OS kernel. How
to protect OS kernel is out of the scope of this paper.
In real-world systems there may be other require-
ments. For example, a user is only allowed to login
between 8am and 6pm or only from a speciﬁc set of
IP addresses. The system can enforce these constraints
before reading the password from the database outside
NaPu, so that the pure function in NaPu only handles
password and challenge.
This paper assumes a uniform probability distribution
for the testing selection space for the password. In the
future, approaches of more adaptive distributions [10]
can be used.
A possible attack is timing-based attack [7] that used
to guess passwords. However, from the table II we can
see that the time taken by computation functions is so
little that its variation can hardly be measured exter-
nally. If necessary, intentional delays can be inserted
to prevent this attack. In our framework the attacker
cannot have any other information to launch a side-
channel attack.
VIII. RELATED WORK
Backdoor detection based on network trafﬁc be-
havior. To detect backdoors which can be triggered
remotely, many studies focus on analyzing network
trafﬁcs based on network intrusion detection systems
(NIDS). Zhang and Paxson [39] developed a set of
algorithms that exploit many novel characteristics such
as the frequency of small packets, the size of pack-
ets, connection directionality and keystroke times to
detect machine-driven interactive backdoors. Based on
the work [39], Gonzalez et al. [17] proposed trafﬁc
sampling and ﬁltering methods and further implement-
ed a backdoor detector. Besides trafﬁc characteristics,
Horng et al. [20] adopted the Dynamic Link Library
(DLL) injection technique to record all DLLs used
by the target application, and took advantage of these
extra characteristics to determine whether the target
application has backdoors.
These methods prevent certain type of backdoors
that can cause anomalous network behaviors. However,
these methods can be evaded if backdoors do not cause
anomalous network behaviors. For example, during a
normal login connection, an attacker directly uses a
14
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:58 UTC from IEEE Xplore.  Restrictions apply. 
backdoor username or super password to log in to a
system.
Backdoor detection by program analysis. Natural-
ly, many malware detection or analysis methods can