# strng2 湖湘杯 2019
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1\. 前言
比赛的时候没做出来, 最近正好在跟着大佬的仓库[1]学习 qemu pwn , 所以就复现一下. 现在看来这题真的挺简单的.
希望以后也能多多遇见这种简单的qemu pwn题23333.
关于qemu pwn的一些基础知识网上相关的文章已经很多了, 我就不再重复了. 可以参考[4]
这是我发的第一道关于 qemu pwn的文章, 所以写的比较详细. 会把做题的具体步骤都详细说一下. 一是总结一下做这种题的流程,
而是尽量保证读者跟着做就可以复现成功. 如果遇到什么问题欢迎评论指出.
题目文件
    链接: https://pan.baidu.com/s/1VhjF9v1tKGyH9-3IcPoJJg 提取码: uw7g
目前做过的qemu pwn题的形式大都是基于qemu源码进行修改或这添加, 使得 qemu 模拟的某个pci设备有漏洞, 而用户需要通过利用这些漏洞获取
宿主机上的 flag.
## 2\. 漏洞分析
拿到题目先解压, 然后看一下启动脚本
    ➜  strng2 cat launch.sh
    #! /bin/sh
    ./qemu-system-x86_64 
    -initrd ./rootfs.cpio 
    -kernel ./vmlinuz-4.8.0-52-generic 
    -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' 
    -enable-kvm 
    -monitor /dev/null 
    -m 64M --nographic -L ./dependency/usr/local/share/qemu 
    -L pc-bios 
    -device strng
通过 `-device strng` 可以得知设备名称为 `strng`
然后用 IDA 加载 qemu-system-x86_64, 并搜索函数名中包含 strng 的函数.
先看看 class_init 函数
    void __cdecl strng_class_init(ObjectClass_0 *a1, void *data)
    {
      PCIDeviceClass_0 *k; // ST18_8
      k = (PCIDeviceClass_0 *)object_class_dynamic_cast_assert(
                                a1,
                                "pci-device",
                                "/home/w0lfzhang/Desktop/qemu-2.8.1.1/hw/misc/strng.c",
                                172,
                                "strng_class_init");
      k->realize = (void (*)(PCIDevice_0 *, Error_0 **))pci_strng_realize;
      k->exit = pci_strng_uninit;
      k->vendor_id = 0x1234;
      k->device_id = 0x11E9;
      k->revision = 0x10;
      k->class_id = 0xFF;
    }
可以得知该设备的vendor_id:device_id 为 1234:11e9
然后启动qemu, 并执行 lspci
    Welcome to QEMU-ESCAPE
    qemu login: root
    # lspci
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 00ff: 1234:11e9
通过比对vendor_id 和 device_id 可以确定 该设备的 pci 地址为 00:04.0
然后我们就可以进入该设备的目录, 并cat resource 文件看一下该设备的地址空间(关于这个目录中文件的作用可以参考[2])
    # cd /sys/devices/pci0000:00/0000:00:04.0/
    # cat resource
    start              end                flags
    0x00000000febf1000 0x00000000febf10ff 0x0000000000040200
    0x000000000000c050 0x000000000000c057 0x0000000000040101
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
可以看到有两块地址空间.
因为这儿的文件系统是用busybox 制作的, 提供的lspci功能比较简陋. 所以无法看出两个地址空间究竟是 PMIO 还是 MMIO (关于PMIO 和
MMIO 可以参考 [4]).
但是我们可以通过 `/proc/iomem` 和 `/proc/ioports` 这两个文件来确定
    # cat /proc/ioports
    ...
    c050-c057 : 0000:00:04.0
    ...
    # cat /proc/iomem
    ...
    febf1000-febf10ff : 0000:00:04.0
    ...
至此可以确定 端口号 `c050-c057` 和物理地址 `febf1000-febf10ff` 是属于这个设备的, 对这些地址空间进行读写操作就可以触发
qemu 中对应的函数.
还可以根据resource文件中对应的flags判断. 根据 linux 源码[5]中如下定义
    #define IORESOURCE_IO        0x00000100    /* PCI/ISA I/O ports */
    #define IORESOURCE_MEM        0x00000200
也可以确定第一行是 MMIO, 第二行是 PMIO.
到这儿已经可以确定设备的地址空间了, 我们就可以通过对这些地址空间进行读写操作来调用对应的回调函数.
比如往物理地址 `0xfebf1000` 写一个字节, qemu就会调用 `strng_pmio_write` 这个函数.
地址空间和回调函数的绑定是在 realize 函数中 调用 `memory_region_init_io` 实现的.
    void __cdecl pci_strng_realize(struct STRNGState *pdev, Error_0 **errp)
    {
      struct STRNGState *strng; // ST18_8
      strng = pdev;
      timer_init_ms_0(&pdev->strng_timer, QEMU_CLOCK_VIRTUAL_0, (QEMUTimerCB *)strng_timer, pdev);
      // 注册 mmio
      memory_region_init_io(&strng->mmio, &strng->pdev.qdev.parent_obj, &strng_mmio_ops, strng, "strng-mmio", 0x100uLL);
      pci_register_bar(&pdev->pdev, 0, 0, &pdev->mmio);
        // 注册 pmio
      memory_region_init_io(&strng->pmio, &strng->pdev.qdev.parent_obj, &strng_pmio_ops, strng, "strng-pmio", 8uLL);
      pci_register_bar(&pdev->pdev, 1, 1u, &pdev->pmio);
    }
    /*
    ...
    .data.rel.ro:000055555636D080 strng_mmio_ops  dq offset strng_mmio_read; read
    .data.rel.ro:000055555636D080                                         ; DATA XREF: pci_strng_realize+75↑o
    .data.rel.ro:000055555636D080                 dq offset strng_mmio_write; write
    ...
    .data.rel.ro:000055555636D100 ; const MemoryRegionOps_0 strng_pmio_ops
    .data.rel.ro:000055555636D100 strng_pmio_ops  dq offset strng_pmio_read; read
    .data.rel.ro:000055555636D100                                         ; DATA XREF: pci_strng_realize+CB↑o
    .data.rel.ro:000055555636D100                 dq offset strng_pmio_write; write
    */
接下来就要分析这个设备的实现了, 重点自然是 MMIO, PMIO 的读写回调函数.
    uint64_t __cdecl strng_mmio_read(struct STRNGState *opaque, hwaddr addr, unsigned int size)
    {
      uint64_t result; // rax
      if ( size != 4 || addr & 3 )
        result = -1LL;
      else
        result = opaque->regs[addr>>2]; //oob read
      return result;
    }
    void __cdecl strng_pmio_write(struct STRNGState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      int64_t v4; // rax
      uint32_t saddr; // [rsp+24h] [rbp-Ch]
      if ( size == 4 )
      {
        if ( addr )
        {
          if ( addr == 4 && !(opaque->addr & 3) )
          {
            saddr = opaque->addr >> 2;
            if ( saddr == 1 )
            {
              opaque->regs[1] = rand();
            }
            else if ( saddr regs[3] = rand_r(&opaque->regs[2]);
            }
            else
            {
              opaque->regs[saddr] = val; // oob write
              if ( opaque->flag )
              {
                v4 = qemu_clock_get_ms_4(QEMU_CLOCK_VIRTUAL_0);
                timer_mod(&opaque->strng_timer, v4 + 100);
              }
            }
          }
        }
        else
        {
          opaque->addr = val;
        }
      }
    }
    void __cdecl strng_pmio_write(struct STRNGState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      int64_t v4; // rax
      uint32_t saddr; // [rsp+24h] [rbp-Ch]
      if ( size == 4 )
      {
        if ( addr )
        {
          if ( addr == 4 && !(opaque->addr & 3) )
          {
            saddr = opaque->addr >> 2;
            if ( saddr == 1 )
            {
              opaque->regs[1] = rand();
            }
            else if ( saddr regs[3] = rand_r(&opaque->regs[2]);
            }
            else