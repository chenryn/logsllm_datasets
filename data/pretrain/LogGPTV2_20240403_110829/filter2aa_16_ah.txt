级非常低，仅高于赋值运算符。但我们还是建议使用圆括号，因为这可以使表达式的条件部
分更易于阅读。
采用条件表达式可以编写出很简洁的代码。例如，下面的这个循环语句打印一个数组的 n 个元素，每行打印 10 个元素，每列之间用一个空格隔开，每行用一个换行符结束(包括最后 一行):
for (i = 0; i 和. 用于访问结构成员，第 6 章将讨论这两个运算符以及 sizeof(对象长度)运算符。第 5 章将
讨论运算符*(通过指针间接访问)与&(对象地址)，第 3 章将讨论逗号运算符。
表 2•1   运算符的优先级与结合性
 运算符              结合性
()
[]
•
>
.            
 从左至右
!
~
+
+
••
+
•
*
(
t
y
p
e
)
s
i
z
e
of            
 从右至左
*
/
%            
 从左至右
+
•            
 从左至右
>            
 从左至右
>=            
 从左至右
==
!=            
 从左至右
&
 从左至右
^
 从左至右
|
 从左至右
&&
 从左至右
||
 从左至右
?:
 从左至右
=
+
=
•=
*
=
/=
%
=
&=
^
=
|=
>=            
 从右至左
,
 从右至左
主:一元运算符+、 、&与*比相应的二元运算符+、 、&与*的优先级高。
注意，位运算符&、^与|的优先级比运算符==与!=的低。这意味着，位测试表达式，如
if ((x & MASK) == 0) ...
必须用圆括号括起来才能得到正确结果。
同大多数语言一样，C  语言没有指定同一运算符中多个操作数的计算顺序(&&、||、?: 和,运算符除外)。例如，在形如
x = f() + g();
的语句中，f()可以在 g()之前计算，也可以在 g()之后计算。因此，如果函数 f 或 g 改变 了另一个函数所使用的变量，那么 x 的结果可能会依赖于这两个函数的计算顺序。为了保证 特定的计算顺序，可以把中间结果保存在临时变量中。
类似地，C 语言也没有指定函数各参数的求值顺序。因此，下列语句
printf("%d %d\n", ++n, power(2, n)); /* 错 */
在不同的编译器中可能会产生不同的结果，这取决于 n 的自增运算在 power 调用之前还是之 后执行。解决的办法是把该语句改写成下列形式:
++n;
printf("%d %d\n", n, power(2, n));
函数调用、嵌套赋值语句、自增与自减运算符都有可能产生"副作用” ——在对表达式 求值的同时，修改了某些变量的值。在有副作用影响的表达式中，其执行结果同表达式中的 变量被修改的顺序之间存在着微妙的依赖关系，下列语句就是一个典型的令人不愉快的情况:
a[i] = i++;
问题是:数组下标 i 是引用旧值还是引用新值?对这种情况编译器的解释可能不同，并因此 产生不同的结果。C 语言标准对大多数这类问题有意未作具体规定。表达式何时会产生这种副 作用(对变量赋值)，将由编译器决定，因为最佳的求值顺序同机器结构有很大关系。(ANSI C 标准明确规定了所有对参数的副作用都必须在函数调用之前生效，但这对前面介绍的 printf
函数调用没有什么帮助。)
在任何一种编程语言中，如果代码的执行结果与求值顺序相关，则都是不好的程序设计 风格。很自然，有必要了解哪些问题需要避免，但是，如果不知道这些问题在各种机器上是 如何解决的，就最好不要尝试运用某种特殊的实现方式。
第3章 控制流
程序语言中的控制流语句用于控制各计算操作执行的次序。在前面的例子中，我们曾经 使用了一些最常用的控制流结构。本章将更详细地讲述控制流语句。
3.1 语旬与程序块
在 x = 0、i++或 printf(...)这样的表达式之后加上一个分号(;)，它们就变成了 语句。例如:
x = 0; i++;
printf(...);
在 C 语言中，分号是语句结束符，而 Pascal 等语言却把分号用作语句之间的分隔符。 用一对花括号“ {"与“ }"把一组声明和语句括在一起就构成了一个复合语句(也叫作
程序块)，复合语句在语法上等价于单条语句。函数体中被花括号括起来的语句便是明显一例。
if、else，while 与 for 之后被花括号括住的多条语句也是类似的例子。(在任何程序块中 都可以声明变量，第 4 章将对此进行讨论。)右花括号用于结束程序块，其后不需要分号。
3.2 if•else 语旬
if•else 语句用于条件判定，其语法如下所示:
if {表达式}
语句 1
else
语句 2
其中 else 部分是可选的。该语句执行时，先计算表达式的值，如果其值为真(即表达式的值 为非 0)，则执行语句 1;如果其值为假(即表达式的值为 0)，并且该语句包含 else 部分， 则执行语句 2。
由于 if 语句只是简单测试表达式的数值，因此可以对某些代码的编写进行简化。最明显 的例子是用如下写法
if (表达式)
来代替
if (表达式 !0)
某些情况下这种形式是自然清晰的，但也有些情况下可能会含义不清。
因为 if•else 语句的 else 部分是可选的，所以在嵌套的 if 语句中省略它的 else 部 分将导致歧义。解决的方法是将每个 else 与最近的前一个没有 else 配对的 if 进行匹配。
例如，在下列语句中:
if (n > 0)
if (a > b)
z = a; else
z = b;