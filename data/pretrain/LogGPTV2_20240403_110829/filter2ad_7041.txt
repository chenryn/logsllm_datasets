title:Distributed content storage for just-in-time streaming
author:Sourav Kumar Dandapat and
Sanyam Jain and
Romit Roy Choudhury and
Niloy Ganguly
Distributed Content Storage for Just-in-Time Streaming
Sourav Kumar Dandapat
Department of CSE,
IIT Kharagpur, India
Sanyam Jain
Department of CSE,
IIT Kharagpur, India
Niloy Ganguly
Department of CSE,
IIT Kharagpur, India
PI:EMAIL
PI:EMAIL
PI:EMAIL
Romit Roy Choudhury
Department of ECE and CS,
Duke University, USA
PI:EMAIL
ABSTRACT
We propose a content distribution strategy over municipal
WiFi networks where Access Points (APs) collaboratively
cache popular multimedia content, and disseminate them in
a manner that each mobile device has the portion of the
content just-in-time for playback. If successful, we envision
that a child will be able to seamlessly watch a movie in a
car, as her tablet downloads diﬀerent parts of the movie over
diﬀerent WiFi APs at diﬀerent times.
Categories and Subject Descriptors
C.2.4 [Distributed System]: Distributed Applications
General Terms
Design, Performance
Keywords
Content Distribution, Municipal WiFi Network, Distributed
Content Storage
1.
INTRODUCTION
Video on Demand (VoD) has gained immense popularity
in recent years whereby almost 50% of the entire Internet
traﬃc is due to video. Video distribution becomes a chal-
lenging task especially when we consider distribution over
wireless networks (which carries 18% of overall traﬃc). The
challenges arise from low wireless data rates, high packet loss
probability, link disconnections due to mobility, etc. Hence
attention needs to be paid towards designing strategies to
distribute content over wireless network [1] to fulﬁll the dual
objectives of upholding user-experience and congestion con-
trol.
The increasingly large number of WiFi APs deployed across
cities opens up new opportunities for seamless distribution
of such content. A feasible strategy can be to cache pop-
ular content in such APs, whereby a traveler moving (say,
by car) past those APs can download content from them.
Speciﬁcally, a traveler during her journey might be inter-
ested in a movie, so she starts the process of simultaneous
download and playback. However, it is almost infeasible to
Copyright is held by the author/owner(s).
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
ACM 978-1-4503-1419-0/12/08.
download a complete movie (assumed to be large in size)
from a single AP due to the short association duration of
the mobile device. So the download needs to be performed
through successive APs and hence (diﬀerent parts of) the
same movie needs to be available in other APs in order to
support just-in-time download. Caching the entire (movie)
ﬁle in every AP reduces the total number of movies available
to users, and is undesirable. We propose a content distri-
bution strategy that ensures minimum redundancy storage
while also oﬀering uninterrupted playback to all users, re-
gardless of their travel path.
2. CONTENT DISTRIBUTION
Let us assume that the total number of APs in a munic-
ipal WiFi network is n and every AP is capable of storing
m ﬁles (each of same size). So the described network can
cache up to n × m number of unique ﬁles.
To allow seamless download on the move, one trivial solution
is to keep same set of m ﬁles across all n APs. However, it
would limit the total number of cached ﬁle to m from n × m.
Almost similar eﬃciency can be achieved if we break each
ﬁle into set of chunks of identical size and place 1st chunk
at the 1st AP that client comes across, 2nd chunk at the 2nd
AP and so on. This solution, while requiring less storage,
would not be useful for another client (say) C, which travels
the same path in the reverse direction. In this case, C would
still download all the chunks but in reverse order, hence has
to wait until the end (referred as idle time) before it can
start playback.
Chunk Frequency: An intuition which can be derived
from the above mentioned situation is that to eliminate idle
time, the 1st chunk of the ﬁle must be available at every AP
given that a user can start her journey from any point. If
we assume that a car normally moves at 40 km/hour and
the range of an AP is 50 m (radius), then the car would
stay associated with an AP for 9 seconds. If a ﬁle can be
downloaded at 1 Mbps rate then at most 9 Mb can be down-
loaded from an AP, which would then require approximately
61 seconds to play (assuming 80 minutes is needed to watch
a 700 MB movie). By this time of 61 seconds, a user may
encounter other APs, depending on the density of WiFi de-
ployment. Assuming, a WiFi AP every 100m, the vehicle
may encounter 6 APs. Thus, the 2nd and 3rd chunks of the
ﬁle must be available at least in one of the next 6 and 12
APs respectively, starting from the source where the user
77starts moving. To generalize, the qth chunk must be avail-
able within (q − 1) × p APs, while q ≥ 2 or frequency dis-
tribution of qth chunk fq is ≥ 1/((q − 1) × p), where p is
the number of APs a user encounters while playing a video
chunk.
Chunk Distribution Strategy: We assume that each
traveler follows the shortest path from the source to her des-
tination. To determine which chunks must be cached at each
AP, we need to consider all shortest paths between pairs of
locations. We assume X1, X2, ...Xn represent n APs of the
network. We also assume that a binary variable zj
i is asso-
ciated with every Xi AP, where zj
i = 0 signiﬁes the absence
of the jth chunk at node Xi and zj
i = 1 signiﬁes presence.
To ensure that the qth chunk is present at least once in a
path (Xi, ..., Xi+(q−1)×p) of length (q − 1) × p, the following
condition must be satisﬁed: zq
≥ 1.
We assume that ﬁle has been divided into κ chunks and each
AP can host at most k (≤ κ) chunks.
With these constraints in mind we minimize the objective
function fobj that represents total storage required for the
ﬁle caching. We use a Integer Linear Programming (ILP)
solver (LPSOLVE) – the ILP package outputs the assign-
ments of chunks to AP.
i+1 + ... + zq
i + zq
i+(q−1)×p
Random Distribution Strategy (RDS): Since the ILP
package also provides the frequency of diﬀerent chunks in
the entire network for the proposed solution, a random dis-
tribution strategy can be to distribute identical number of
chunks randomly among APs. We use the RDS as a baseline
scheme for comparison.
3. EXPERIMENT
We have considered a region of the IIT Delhi campus
(rectangular area with dimension 1km × 1km) for our case
study [2]. 83 APs are assumed to be placed in the entire re-
gion. The movie ﬁle distributed is of size 45 Mb and divided
into 5 equal sized chunks.
We use network simulator (NS3) to simulate and evaluate
the performance of our proposed solution. “The ONE” [3]
simulator is used to generate shortest path mobility model
trace of clients. We place chunks in an AP cache as obtained
from the ILP solution stated above. A client sends request
to the associated AP for the desired ﬁle. In response, AP
sends available chunks of requested ﬁle. The client selects
a particular chunk for downloading depending on chunk se-
lection strategy. We have done experiments for diﬀerent
storage constraints (percentage of AP memory allocated to
storing a given ﬁle).
0.05
)
%
(
n
o
i
t
c
a
r
F
n
o
i
t
p
u
r
r
e
n
t
I
0.04
0.03
0.02
0.01
0
40
Least Sequence
0.28
0.27
Inset3
0.26
40
Least Sequence
60
80
100
Storage Constraint
Inset1
Rarest Sequence
First Then Rarest Sequence
60
80
Storage Constraint
100
Least Sequence RDS
Inset2
60
80
100
Storage Constraint
)
%
(
n
o
i
t
c
a
r
F
n
o
i
t
p
u
r
r
e
t
n
I
8
6
4
2
0
40
)
%
(
n
o
i
t
c
a
r
F
n
o
i
t
p
u
r
r
e
t
n
I
7.5
7
6.5
40
50
60
70
80
90
100
Storage Constraint
y
c
n
e
c
i
f
f
i
E
d
a
o
n
w
o
D
l
Figure 1:
schemes w.r.t chunk selection strategies.
IF and DE of proposed and random
Discussion: Fig. 1 shows variation of IF with diﬀerent
storage constraint of the proposed algorithm while client al-
ways downloads the chunk with Least Sequence First (LSF).
Result shows that the IF is almost negligible in this strat-
egy. Inset1 of Fig. 1 shows the variation of IF while the
chunk selection strategies are ﬁrst then rarest (priority of
ﬁrst chunk is highest then it selects rarest chunk) and rarest
respectively. Rarest selection strategy has signiﬁcantly higher
IF as client needs to wait long for the initial chunks. Inset2
of Fig. 1 shows the variation of IF of RDS while chunk se-
lection strategy is LSF. IF of RDS is signiﬁcantly high com-
pared to the proposed algorithm. An interesting observation
is that in our algorithm the performance degrades (though
very slowly) with loosening of storage constraint while it has
opposite eﬀect in case of RDS. This is because with loosen-
ing of constraint, rare pieces have a tendency of clustering,
which sometimes makes them unavailable, whereas the aver-
age pieces are relatively easier to ﬁnd, thus improving per-
formance of RDS. The same tendency is noticed when we
capture the DE (Inset3).
5. CONCLUSION & FUTURE DIRECTION
The key contribution of this poster is in showing that
chunks of a (video) ﬁle can be scattered in distributed caches
(in WiFi APs) in a manner that a mobile user may be able to
download the needed chunk just in time for playback. This
may allow the user to watch streaming content without in-
terruption, thereby oﬄoading cellular network traﬃc. Our
simulation results present early promise, motivating a full
scale implementation and evaluation on a real end-to-end
system.
4. RESULTS AND DISCUSSION
Metrics: The performance of the proposed algorithm is
evaluated using the following metrics:
6. ACKNOWLEDGEMENT
Authors would like to thank Vodafone for their partial
ﬁnancial support.
(a) Interruption Fraction(%)(IF ): Lets assume that
a client takes t1 unit time in her total journey and was
idle (could not watch movie) for t2 unit time. IF of
this client can be formally expressed as t2×100
.
t1
(b) Download Eﬃciency(DE): It signiﬁes average num-
ber of chunks downloaded from each AP. If a device
crosses p APs and collects q chunks then DE of the
device is q
p .
7. REFERENCES
[1] J. Eriksson, H. Balakrishnan, S. Madden, Cabernet:
Vehicular Content Delivery Using WiFi, Mobicom 2008
[2] http://www.openstreetmap.org/
[3] The Opportunistic Network Environment simulator
www.netlab.tkk.ﬁ/tutkimus/dtn/theone/
78