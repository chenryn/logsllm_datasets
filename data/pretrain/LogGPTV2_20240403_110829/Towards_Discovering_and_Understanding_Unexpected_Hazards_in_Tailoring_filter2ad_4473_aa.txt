# Title: Discovering and Understanding Unexpected Hazards in Tailoring Antivirus Software for Android

## Authors
- Heqing Huang†
- Kai Chen‡
- Chuangang Ren†
- Peng Liu†
- Sencun Zhu†
- Dinghao Wu†

### Affiliations
- † The Pennsylvania State University, University Park, PA, USA
- ‡ Institute of Information Engineering, Chinese Academy of Sciences, China

### Contact Information
- {hhuang, szhu, cyr5126}@cse.psu.edu
- chenkai@iie.ac.cn
- {pliu, dwu}@ist.psu.edu

## Abstract
The independent lab AV-TEST reports that current Android Virus Detectors (AVDs) achieve an average malware detection rate of around 95%. While this indicates that AVDs have robust malware signature databases, their effectiveness on the rapidly evolving Android platform should also be evaluated based on their runtime behavior. We conducted a comprehensive analysis of the top 30 AVDs tailored for Android, leading to the discovery of significant hazards in their design. These include vulnerabilities in malware scan (malScan) mechanisms and engine update (engineUpdate) procedures.

First, we found that the malScan mechanisms of all analyzed AVDs lack comprehensive and continuous scan coverage. To measure the severity of these hazards, we implemented targeted evasions at specific times (e.g., end of the scan) and locations (e.g., certain folders). Our results show that evasions can succeed even if the AVDs are equipped with "complete" virus definition files.

Second, during the engineUpdate, the Android system nullifies all protections provided by the AVDs, rendering the system vulnerable for a period. This vulnerability is present in all versions of the Google Android source code and other vendor-customized system images.

Given that AVDs have approximately 650–1070 million downloads on the Google Play Store, we reported these findings to AVD vendors across 16 countries. Google confirmed the hazard in the engineUpdate procedure and indicated that feature enhancements may be included in future versions. Our research highlights the importance of secure and preventive design strategies for AVDs and other mission-critical apps on fast-evolving mobile systems.

## Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection – Invasive software; Access controls

## Keywords
- Mobile
- Malware
- Anti-malware
- Vulnerability measurement

## Introduction
The increasing popularity of mobile computing devices, such as smartphones and tablets, has attracted both normal users and malware writers. Among popular mobile platforms, Android not only dominates the market but also accounts for 98.1% of detected mobile malware in 2013 [13]. Many companies, including reputable ones focusing on PC security and new startups, have turned their attention to mobile platform security and tailored their antivirus detectors specifically for Android [2].

Every three months, the independent antivirus test lab, AV-TEST, generates a report [6] comparing the detection rates of Android Virus Detectors (AVDs). The latest report indicates that the malware signature databases (MSDs) of popular AVDs under test have achieved an average malware detection rate of about 95%. However, since Android allows executing both ARM binaries and Dalvik bytecode files (e.g., .so and .dex files) from dynamically loaded payload files, more malware based on dynamic code loading is being created and spread through widely used Android app repackaging techniques [26, 34, 32, 48, 49]. Therefore, the success of AVD designs on the fast-evolving Android platform must also be measured based on their efficacy in identifying malware's dynamic behavior (e.g., dynamic malicious payloads dropping/executing).

In this work, we conduct the first comprehensive analysis of the top 30 AVDs (listed in Table 1), which collectively have 650-1070 million user downloads on the Google Play Store. Previous works [44, 40] have focused on evaluating the quality of Virus Definition Files (VDFs) for virus detectors based on known AVD weaknesses (e.g., vulnerability to transformation attacks). We take it a step further and focus on the scanning mechanisms of Android AVDs.

### Protection Assumption I
We assume that Android AVD vendors have developed a complete MSD, updated with all reported malicious payloads and all possible obfuscated versions. Under this assumption, Android AVDs are immune to common transformation attacks [44, 40]. With this in mind, we aim to understand if there are still deficiencies in the malware scan (malScan) mechanism itself that can cause potential hazards.

#### Hazards in malScan
The malScan operation refers to the general malware recognition mechanism, which fingerprints malware based on the VDF updated from the MSD. There are two types of malScan operations for Android: light monitoring malScan and heavy sweeping malScan.

- **Light Monitoring malScan**: Four out of the top 30 AVDs use the Android FileObserver class to perform continuous monitoring. However, our detailed measurement study shows that these four AVDs only monitor selected folders (e.g., the Downloads folder) and limited file types (e.g., APK files). By dropping malicious payloads into non-monitored folders or using archived versions of malicious payloads, light monitoring malScan can be evaded. This indicates that FileObserver-based light monitoring malScan lacks comprehensiveness.

- **Heavy Sweeping malScan**: All 30 tested AVDs have designed the heavy sweeping malScan, which is a comprehensive malware scan. However, due to its comprehensiveness, distinguishable system resource usage patterns (e.g., CPU and memory) are emitted during scanning. We find that Android records per-process/per-thread resource usage statistics in /proc/[PID]/stat and /proc/[PID]/task/[TID]/stat, making the resource usage patterns of each AVD’s processes/threads readily available to unprivileged third-party apps. Consequently, the scanning status of heavy sweeping malScan can be revealed by fingerprinting the high peaks of the AVD’s resource usages, making the scan vulnerable to targeted evasions. Adversaries can evade this scan by identifying its scanning period and performing malicious actions subsequently. To clearly differentiate scanning and idle periods and provide proof-of-concept evasions, we leverage Fast Fourier Transformation (FFT) to preprocess the per process/thread usage signals. We design and implement a signal steganography technique to identify scanning locations (folders). Our analysis highlights the importance of developing a malware scanning mechanism with both comprehensive and continuous scanning properties.

### Protection Assumption II
We further assume that AVDs continuously monitor the entire file system efficiently and can perform behavior-based detections efficiently. By adding such strong protection, we aim to find if there are still security holes in deploying AVDs on the Android system.

#### Hazards in engineUpdate
Our study and various sources [23, 10] show that AVDs on the fast-evolving Android system tend to perform engine updates (engineUpdate) frequently, as these updates serve important tasks such as enhancing malScan mechanisms, patching vulnerabilities [8, 20, 21, 19], and improving functionality [7]. However, we discovered that the critical AVD engineUpdate procedure itself can cause devastating hazards to AVDs, even under both Protection Assumptions I and II. In Android, the Package Manager Service (PMS) updates the engine by removing the whole APK file and killing the AVD processes. Various system components then perform complex tasks (e.g., Dalvik bytecode optimization, configuration file parsing) for the newly downloaded APK file before setting up the AVD engine and reactivating it. This design, while seemingly safe, surprisingly kills the AVD process and nullifies any perfect protections for a period of high risk, known as the null-protection window. Worse, some AVD developers leave the engines inactivated after finishing the update. The lack of consideration in the AVDs’ design indicates that developers have not realized the potential hazard in engineUpdate. Without automatic relaunch functionality, users can be exposed to high risk for a longer period.

### Main Contributions
- Comprehensive analysis of the top 30 AVDs tailored for Android.
- Discovery of significant hazards in malScan mechanisms and engineUpdate procedures.
- Implementation of targeted evasions to measure the severity of identified hazards.
- Reporting of findings to AVD vendors and confirmation from Google.
- Highlighting the importance of secure and preventive design strategies for AVDs and other mission-critical apps on fast-evolving mobile systems.