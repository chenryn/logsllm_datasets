title:Towards Discovering and Understanding Unexpected Hazards in Tailoring
Antivirus Software for Android
author:Heqing Huang and
Kai Chen and
Chuangang Ren and
Peng Liu and
Sencun Zhu and
Dinghao Wu
Towards Discovering and Understanding Unexpected
Hazards in Tailoring Antivirus Software for Android
Heqing Huang†, Kai Chen‡, Chuangang Ren†, Peng Liu†, Sencun Zhu†, Dinghao Wu†
†The Pennsylvania State University, University Park, PA, USA
‡Institute of Information Engineering, Chinese Academy of Sciences, China
{hhuang, szhu, cyr5126}@cse.psu.edu, {chenkai}@iie.ac.cn, {pliu, dwu}@ist.psu.edu
ABSTRACT
In its latest comparison of Android Virus Detectors (AVDs), the
independent lab AV-TEST reports that they have around 95% mal-
ware detection rate. This only indicates that current AVDs on An-
droid have good malware signature databases. When the AVDs are
deployed on the fast-evolving mobile system, their effectiveness
should also be measured on their runtime behavior. Therefore, we
perform a comprehensive analysis on the design of top 30 AVDs
tailored for Android. Our new understanding of the AVDs’ design
leads us to discover the hazards in adopting AVD solutions for An-
droid, including hazards in malware scan (malScan) mechanisms
and the engine update (engineUpdate). First, the malScan mecha-
nisms of all the analyzed AVDs lack comprehensive and continuous
scan coverage. To measure the seriousness of the identiﬁed haz-
ards, we implement targeted evasions at certain time (e.g., end of
the scan) and locations (certain folders) and ﬁnd that the evasions
can work even under the assumption that the AVDs are equipped
with “complete” virus deﬁnition ﬁles. Second, we discover that,
during the engineUpdate, the Android system surprisingly nulliﬁes
all types of protections of the AVDs and renders the system for a
period of high risk. We conﬁrmed the presence of this vulnerable
program logic in all versions of Google Android source code and
other vendor customized system images.
Since AVDs have about 650–1070 million downloads on the Google
store, we immediately reported these hazards to AVD vendors across
16 countries. Google also conﬁrmed our discovered hazard in the
engineUpdate procedure, so feature enhancements might be in-
cluded in later versions. Our research sheds the light on the impor-
tance of taking the secure and preventive design strategies for AVD
or other mission critical apps for fast-evolving mobile-systems.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection–Invasive
software; Access controls
Keywords
Mobile; Malware; Anti-malware; Vulnerability measurement
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714589 .
1.
INTRODUCTION
The increasing popularity of mobile computing devices (e.g.,
smartphones and tablets) attracts both normal users and malware
writers. Among the popular mobile platforms, Android has not
only conquered a lion’s share of the market, but also gained 98.1%
share of mobile malware detected in 2013 [13]. Many companies,
including those reputable ones focusing on PC security as well as
some new startups, have turned their attention to mobile platform
security and tailored their antivirus detectors particularly for An-
droid [2]. Every three months, the independent antivirus test lab,
AV-TEST, generates a report [6], comparing the detection rates of
Android Virus Detectors (AVDs). The latest report indicated that
the malware signature databases (MSD) of popular AVDs under
test have achieved on average about 95% high malware detection
rate. However, since Android allows executing both ARM bina-
ries and Dalvik bytecode ﬁle (e.g., .so and .dex ﬁles) from dynami-
cally loaded payload ﬁles to better serve application (app) develop-
ers at runtime [43], it has been shown that more malware [53, 52]
based on the dynamic code loading are created and spread through
the widely used Android app repackaging techniques [26, 34, 32,
48, 49]. Therefore, besides evaluation based on the quality of the
MSDs, the success of the AVD’s design on the fast-evolving An-
droid platform must also be measured based on its efﬁcacy in iden-
tifying malware’s dynamic behavior (e.g., dynamic malicious pay-
loads dropping/executing).
In this work, we conduct the ﬁrst comprehensive analysis of top
30 AVDs (listed in Table 1), which currently has a total of 650-1070
million user downloads for the Google-Play store alone. Previous
works [44, 40] have only focused on evaluating the quality of Virus
Deﬁnition File (VDF) for virus detectors based on the well-known
AVD weaknesses (e.g., vulnerable to transformation attacks). We
take it a step further and our analysis concentrates on the scanning
mechanism of Android AVDs.
Protection Assumption I: We assume Android AVD vendors
have developed a complete MSD, which has been updated with
all the reported malicious payloads and all the possible obfuscated
versions of the payloads. Note that under this assumption, the An-
droid AVDs are immune to common transformation attacks [44,
40]. Bearing this assumption in mind, we would like to understand
if there are still deﬁciencies in the malware scan (malScan) mecha-
nism itself that can cause potential hazards.
Hazards in malScan. The malScan operation here means the
general malware recognition mechanism, which ﬁngerprints the
malware based on the VDF updated from the MSD. Generally,
there are two types of malScan operations for Android: light mon-
itoring malScan and heavy sweeping malScan. Four out of the top
30 AVDs have implemented the light monitoring malScan, which
leverages the APIs from the Android FileObserver class. This en-
ESET
ID Vendor
1 Avast
3 AVG
5 Avira
7
Bitdefender
9 Kaspersky
11
13 Dr. Web
15
Lookout
17 McAfee
19 Norton
21
TrendMicro
23
Tencent
25 Webroot
27 G Data
29
TrustGo
AVD package name & version #
com.avast.android;.........3.0.6915
com.antivirus;.........................3.6
com.avira.android;..................3.1
com.bitdefender.security;2.8.217
com.kms (premium);.........11.2.3
com.eset.ems2.gp;...........2.0.843
com.drweb.pro;................7.00.11
com.lookout;..........8.28-879ce69
com.wsandroid.suite;...4.0.0.143
com.symantec.mbsec;....3.8.0.12
com.trendmicro.tmmspsnl;....5.0
com.tencent.qqpimsecure;.....4.6
com.webroot.security;3.6.0.6579
de.gdata.mobilesecurity;...24.5.4
com.trustgo.mb.sec;..........1.3.13
Downloads #
50M-100M
100M-150M
ID Vendor
2 AntiyAVL
4 AegisLab
6 Qihoo360
1M-5M
Bornaria
8
1M-5M
F-Secure
10
5M-10M
12
CleanMaster
1M-5M
Ikarus
10M-50M
14
Comodo
50M-100M 16
18
5M-10M
CMCInfoSec
20 NetQin
10M-50M
Sophos
22
1M-5M
1M-5M
24
Panda
26 AnGuanJia
500K-1M
28 Virusﬁghter
500K-1M
5M-10M
30
Zoner
Table 1: Popular Android virus detectors (AVDs) in our study
AVD package name & version #
com.antiy.avlpro;................2.3.02
com.aegislab.sd3prj.av;.........2.1.5
com.qihoo360.mobilesafe;....4.0.1
com.bornaria.antivirus;.......1.3.60
com.fsecure.ms.dc;........9.0.14504
com.cleanmaster.security;......5.1.0
com.ikarus.mobile.security 1.7.20
com.comodo.pimsecure;.......2.4.5
com.cmcinfosec.mbsec;3.11.18/u5
com.nqmobile.antivirus20;..7.0.10
com.sophos.smsec;..........3.0.1244
com.pandasecurity.pandaav;.....1.1
com.anguanjia.safe;...............4.5.2
com.virusﬁghter.android;.......2.1.3
com.zoner.android.av;............1.8.3
Downloads #
50K-100K
100K-500K
150M-200M
50K-100K
100K-500K
100M-150M
100K-500K
100K-500K
100K-500K
150M-200M
100K-500K
100K-500K
100K-500K
500K-1M
1M-5M
ables the AVD developers to come up with an ad-hoc design to per-
form continuous monitoring. However, our further detailed mea-
surement study shows that these four AVDs only monitor several
selected folders (e.g., the ﬁle Downloads folder) and only focus
on limited ﬁle types (e.g., Android Application Package (APK)
ﬁle). Therefore, by dropping the malicious payload onto any non-
monitored folders or simply using an archived version of a mali-
cious payload, light monitoring malScan can be evaded. This anal-
ysis indicates that the FileObserver based light monitoring malScan
lacks comprehensiveness.
On the other hand, all 30 tested AVDs have designed the heavy
sweeping malScan operation, which is a comprehensive malware
scan. However, it is just due to the comprehensiveness of this type
of scan that distinguishable system resource (e.g., CPU and mem-
ory) usage patterns are emitted when scanning. Also, we ﬁnd that
Android records the per process/per thread resource usage statis-
tics in /proc/[P ID]/stat and /proc/[P ID]/task/[T ID]/stat
respectively, thus the resource usage patterns of each AVD’s pro-
cess/threads are readily available for all unprivileged third party
apps. As a result, the scanning status of heavy sweeping malScan
can be revealed by ﬁngerprinting the high peaks of the AVD’s re-
source usages, which makes the scanning vulnerable to targeted
evasions. Thus, adversaries can evade this scan by identifying its
scanning period and perform malicious action subsequently. So
to clearly differentiate their scanning and idle periods and provide
proof-of-concept evasions, we leverage Fast Fourier Transforma-
tion (FFT) to preprocess the per process/thread usage signals. We
design and implement a signal steganography technique to identify
the scanning locations (folders). We demonstrate that the adver-
sary can plan targeted evasions by recognizing the (sub)folders that
have just been scanned. Our analysis shed the light on the impor-
tance of developing a malware scanning mechanism that has both
the comprehensive and continuous scanning properties.
Protection Assumption II: We then further assume AVD keeps
monitor the whole ﬁle system completely and efﬁciently, and it can
even perform behavior-based detections efﬁciently. By adding such
a strong protection, we aim to ﬁnd if there are still security holes in
deploying AVDs on Android system.
Hazards in engineUpdate. Our study and various sources [23,
10] also show that AVDs on the fast-evolving Android system tend
to perform engine updates (engineUpdate) fairly frequently, since
AVD engineUpdates serve for various important tasks, including
malScan mechanism enhancement, vulnerabilities [8, 20, 21, 19]
patching and other functionality improvement [7]. However, we
discover that the critical AVD engineUpdate procedure itself can
cause devastating hazards to AVD even under both Protection As-
sumption I and II. In Android, Package Manager Service (PMS)
updates the engine by removing the whole APK ﬁle and killing the
AVD processes. Various components in the system have to per-
form complicated tasks (e.g., Dalvik bytecode optimization, con-
ﬁguration ﬁle parsing and etc.)
for the newly downloaded APK
ﬁle before setting up the AVD engine and reactivating it. As any
strong defense mechanism relies on continuous running processes
of the AVDs, this seemingly safe but complicated design of An-
droid app-updating mechanism surprisingly kills the AVD process
and nulliﬁes any perfect protections for a period of high risk, which
is called null-protection window. What’s worse, our analysis shows
that some AVD developers leave the engines inactivated after ﬁn-
ishing its update. The lack of consideration in the AVDs’ design in-
dicates that AVD developers have not realized the potential hazard
in engineUpdate yet. Without the automatic relaunch functionality,
users can be exposed under high risk for a longer period.
The main contributions of this paper are summarized as follows: