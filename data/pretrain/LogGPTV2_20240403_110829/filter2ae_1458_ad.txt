            inc_dword_data_ptr(a1);
            break;
          case 0x9B:
            cmp_reg_reg(a1);
            break;
          case 0x9C:
            jl(a1);
            break;
          case 0x9D:
            jg(a1);
            break;
          case 0x9E:
            jz(a1);
            break;
          case 0x9F:
            jnz(a1);
            break;
          case 0xA0:
            sub_401346(a1);
            break;
          case 0xA1:
            sub_4014CC(a1);
            break;
          case 0xA2:
            nop(a1);
            break;
          case 0xA3:
            return result;
          default:
            nop(a1);
            break;
        }
第一段
    0  mov r3, 0x1c
    4  mov r1, [data]
    6  cmp r1, r0
    8  jz $+7
    10 dec r3
    12 inc data
    13 jmp $-9   // strlen
    15 cmp r3, r2
    17 jnz $+6
    19 mov r0, 1
    23 gg
Flag长度为0x1b
第二段
    0  mov r4, r0
    2  jnz $+2
    4  GG
    5  mov r0, 0x80
    9  mov r2, 0x3f
    13 mov r3, 0x7b
    17 mov r4, 0x1c
    21 mov r1, [data]
    23 mul r1, r2
    25 add r1, r3
    27 mod r1, r0
    29 mov [data], r1
    31 inc data
    32 dec r4
    34 push r4
    36 mov r4, r4
    38 jnz $+2
    40 GG
    41 pop r4
    43 jmp $-22
    45 GG
对Flag做了一个变形
    for i in xrange(0x1b):
        flag[i] = (flag[i] * 0x3f + 0x7b) % 0x80
第三段
    0  mov r4, r0
    2  jnz $+2
    4  GG
    5  push 0x3E
    8  push 0x1a
    11 push 0x56
    14 push 0x0d
    17 push 0x52
    20 push 0x13
    23 push 0x58
    26 push 0x5a
    29 push 0x6e
    32 push 0x5c
    35 push 0x0f
    38 push 0x5a
    41 push 0x46
    44 push 0x07
    47 push 0x09
    50 push 0x52
    53 push 0x25
    56 push 0x5c
    59 push 0x4c 
    62 push 0x0a
    65 push 0x0a
    68 push 0x56
    71 push 0x33
    74 push 0x40
    77 push 0x15
    80 push 0x07
    83 push 0x58
    86 push 0x0f
    89 mov r0, 0
    93 mov r3, 0x1c
    97 mov r1, [data]
    99 pop r2
    101 cmp r1, r2
    103 jz $+3
    105 GG
    106 inc data
    107 dec r3
    109 mov r4, r3
    111 jnz $+5
    113 mov r0, 1
    117 GG
    118 jmp $-21
    120 GG
就是个比较
    import string
    a = [i for i in xrange(0x80)]
    b = [(i * 0x3f + 0x7b) % 0x80 for i in a]
    a = ''.join(map(chr, a))
    b = ''.join(map(chr, b))
    t = string.maketrans(b, a)
    correct = [0x0f, 0x58, 0x07, 0x15, 0x40, 0x33, 0x56, 0x0a, 0x0a, 0x4c, 0x5c, 0x25, 0x52, 0x09, 0x07, 0x46, 0x5a, 0x0f, 0x5c, 0x6e, 0x5a, 0x58, 0x13, 0x52, 0x0d, 0x56, 0x1a, 0x3e]
    flag = ''.join(map(chr, correct)).translate(t)
    print flag
真的可以逐位爆破的……卧槽
### 想起“Qt
correct=DQYHTONIJLYNDLA
先试一下爆破
    AEEEEEEEEEEEEEE => AGIKMOQSUWYACEG
    BEEEEEEEEEEEEEE => BGIKMOQSUWYACEG
    DAAAAAAAAAAAAAA => DCEGIKMOQSUWYAC
    DBAAAAAAAAAAAAA => DDEGIKMOQSUWYAC
好像可以。。。
    DOBAAAAAAAAAAAA => DQFGIKMOQSUWYAC
好像就是个多表移位？
    >>> a = 'AEEEEEEEEEEEEEE'
    >>> b = 'AGIKMOQSUWYACEG'
    >>> c = 'DQYHTONIJLYNDLA'
    >>> flag  = ''.join(map(chr, [((ord(c[i]) - 65) - (ord(b[i]) - ord(a[i])) % 26) % 26 + 65 for i in xrange(15)]))
    >>> flag
    'DOUBLEBUTTERFLY'
...这么水吗
太真实了
### b2w
400E66似乎是把图片变成黑白 二值化
400F38是取周围一圈颜色的平均值？ 高斯模糊？？？
402C7F先算了白色的点离原点的距离，取一个距离最小的点，加入数组
    from pwn import *
    key = 'LCTF{LcTF_1s_S0Oo0Oo_c0o1_6uT_tH1S_iS_n0t_fL4g}'
    f = open('out.wav','rb')
    d = f.read()
    f.close()
    res = ''
    def de1(a,k):
        t = k * 0x101
        t = t & 0xffff
        return a ^ t
    j = 0
    h = []
    r = []
    for i in xrange(len(d)/2):
        t = d[i*2:i*2+2]
        tt = u16(t)
        tt = (de1(tt,ord(key[j % len(key)])))
        if tt >= 0x8000:
            tt -= 0x10000
        j += ord(key[j % len(key)])
        if i %2 == 0:
            h.append(tt/200.0)
        else:
            r.append(tt/200.0)
    for i in xrange(len(h)):
        print h[i],r[i]
还在跑图片还原，matlab怪慢的
    d = load("C:\Users\pzhxbz\Desktop\lctf\test_out");
    x=d(:,1);
    y=d(:,2);
    hold on;
    for i = 1:44
        for j = 1:2000
                index = i*2000+j;
                plot(x(index) + i*200,-y(index),'r.','markersize',30);
        end
    end
    hold off;
    %LCTF{NOW_YOU_GOT_A_OSCILLOSCOPE_MEDIA_PLAYER}
### 想起“ Lunatic Game ”
GHC编译的haskell binary
直接设置ip到4023C8运行即可获得flag
### 想起“壶中的大银河 ～ Lunatic ”
最后是个b16
    from pwn import *
    table = 'QWERTYUIOP!@#$%^'
    def b16decode(s):
        res = ''
        for i in s:
            a = table.index(i)
            res += hex(a)[-1]
        return res.decode('hex')
    de1 = (b16decode('IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE')) 
    for i in xrange(len(de1)/4):
        print(hex(u32(de1[i*4:(i+1)*4])))
然后在编码函数8B7A处下断点看内存，发现是四字节四字节的加密的，所以尝试一波黑盒
输入为aaaa时加密结果是4457415d  
输入为baaa时加密结果是4457415e
非常有规律。  
尝试了简单的加法，失败
尝试了一下亦或，居然成功的解出了LCTF四个字符，但是观察到前四个字符对后四个字符有影响，所以每解密对四个字符时就直接重新运行程序继续解出下四个字符
还好flag长度不长。。。。。
### MSP430
看符号发现可能是个RC4
但是秘钥位置未知，进入main函数发现有个keygen，但是也只有后四位的生成算法，但是看到文件中字符串有LCTF，大胆猜测前四位是LCTF，然后根据算法遍历后四位可能的值，就可以解出flag
    from Crypto.Cipher import ARC4
    from pwn import *
    s = '2db7b1a0bda4772d11f04412e96e037c370be773cd982cb03bc1eade'.decode('hex')
    k = 'LCTF'
    for i in xrange(255):
        kk = k
        kk += chr(i * 3 & 0xff)
        kk += chr(i * 2 & 0xff)
        kk += chr( ((i & 0x74 )  LCTF{5d7b9adcbe1c629ec722529dd12e5129}
太真实了
### 你会玩osu!么？
数位板和鼠标的流量包
根据这篇文章，提取流量包里面的数据，作图，得到非常乱的图形，调整力度的阈值，连蒙带猜得到flag LCTF{OSU_1S_GUUUD}
### gg bank
这题骚的不行，开头有个checkfriend，要爆破出一个地址。。然后不能随便爆破。。要不然你做出来了，其他人也跟着出来了
爆破出了一个
    addr = 0x9bf312b5bbbbd496c99983ce9cb521d10fe7d7ec
    priv = "f56e2522d53316406"
    priv = 0xb040b3a864aa437ac02030e5cfa1199991214112b5dedbd11535c5298f16b31a
    public = '9bf312b5bbbbd496c99983ce9cb521d10fe7d7ec'
    random = int(sha3.keccak_256(int(public,16).to_bytes(20, "big")).hexdigest(),16)%100
    random = 57
爆破出200个账号。。。。
payload:
    #!/usr/bin/env python3
    # -*- coding=utf-8 -*-    
    from web3 import Web3
    import time
    from ethereum.utils import privtoaddr
    import os
    import sha3
    import threading
    my_ipc = Web3.HTTPProvider("https://ropsten.infura.io/v3/c695ce08952c49599827379d10b5e308")
    assert my_ipc.isConnected()