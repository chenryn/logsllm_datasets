# Agenda

- **Who We Are**
- **What This Talk is About**
- **Why This Topic?**
- **Background**
- **Timing as a Channel**
- **Timing as a Vector**
- **Privacy Implications: XSRT?**
- **Another Acronym: (D)XSRT!**
- **Conclusion / Questions**

## Who We Are
- **SensePost**
  - Founded in 2000
  - Published several research papers and books
  - Presented at various conferences
  - Conducted training sessions
- **Team Members**
  - Marco
  - Haroon
- **Website**: [http://www.sensepost.com/blog](http://www.sensepost.com/blog)

## What This Talk is About
- **Focus on Timing Attacks**
- **Target Audience**
  - Developers: Awareness of application leakage
  - Penetration Testers: Identifying potential attack vectors
  - Enthusiasts: Introduction to new acronyms like X.S.R.T and (D)X.S.R.T

## Why This Topic?
- **Historical Context**
  - Side-channel attacks on computing systems, including:
    - Differential power analysis (hardware)
    - EM radiation emission analysis (hardware)
    - Timing analysis (software/hardware)

## Background
- **Traditional Timing Analysis**
  - Extensive research in crypt-analysis
  - Notable works:
    - Kocher [1996]: First local results against RSA and DH
    - Brumley & Boneh [2003]: Derived partial RSA over network due to OpenSSL weaknesses
    - Bernstein [2004]: Derived full AES key across custom network clients
    - Percival [2005]: Used L1 cache access times to derive RSA key bits on HT processors

- **Web Time**
  - Early work by Felten & Schneider [2000] focused on privacy issues like browser and DNS cache snooping
  - Grossman & Niedzialkowski [2006] and SPI Dynamics [2006] released JavaScript port scanners using timing attacks
  - Bortz, Boneh & Nandy [2007]: Direct timing for valid usernames and hidden gallery sizes

## Timing as a Channel
- **Communication Channel**
  - Basic requirement for a solid channel
  - Progression of remote command execution attacks relevant to channels

- **Application as the Channel**
  - Data leakage through application behavior
  - Command injection and friendly SQL queries
  - Firewalling and its limitations

- **Example Code Snippet**
  ```python
  $search_term = $user_input;
  if($recordset =~ /$search_term/ig)
      do_stuff();
  ```

- **Proof of Concept**
  - Example of a timing attack using `uname` and `sleep` commands
  - Python script demonstrating the attack

## Squeeza: A Tool for Data Extraction
- **Overview**
  - Inspired by Sec-1 Automagic SQL Injector
  - Provides a simple shell for server-side data extraction and a reliable return channel
  - Requirements: Ruby, tcpdump, possible access to a DNS server, and a large SQL injection point

- **DNS Internals**
  - Basic operation involves pulling data into a predefined table and initiating DNS lookups
  - Alternative methods for initiating DNS requests

- **Squeeza Demo**
  - Demonstrates the use of SQL Serverâ€™s `waitfor delay` for boolean operations
  - Encoding and decoding data using binary strings

## Timing as Its Own Vector
- **Information Leakage**
  - Importance in application testing
  - Subtle timing differences and their implications
  - Examples: hardware security tokens and failed login attempts

## Privacy Implications
- **Same Origin Policy**
  - Prevents site-A from accessing results from site-B unless related
  - Port scanning and history checking using JavaScript events and CSS

- **Cross Site Request Timing (XSRT)**
  - Attack vector to determine user login status
  - Latency-resistant method using base-page and target-page load times

## Distributed Cross Site Request Timing (DXSRT)
- **Concept**
  - Implementation of timing scripts in JavaScript
  - Granular timer using Java applet
  - Running timing scripts in the victim's browser and reporting success to the attacker's machine

## Conclusion
- **Developers**
  - Ensure no valuable information is leaked through timing deltas
  - Implement standard XSRF detection techniques

- **Network Security Admins**
  - Re-examine least privilege policies
  - Detect spurious DNS requests and timing attacks in logs

- **Penetration Testers / Researchers**
  - Explore XSS and header injection
  - Use tools like squeeza and provide feedback

- **All**
  - Provide feedback and stay updated via [http://www.sensepost.com/blog](http://www.sensepost.com/blog)

## Questions?

---

This revised version aims to make the content more structured, clear, and professional.