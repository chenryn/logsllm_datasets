FPGA. SwitchBlade ensures that the data planes do not interface
even though they share hardware modules.
Existing platforms satisfy some or all of these goals, but they do not
address all the goals at once or with the prioritization we have out-
lined above. For example, SwitchBlade trades off higher customiz-
ability in hardware for easier and faster deployability by providing
a well-de(cid:2)ned but modular customizable pipeline. Similarly, while
SwitchBlade provides parallel data planes, it still gives each data
plane direct access to the hardware, and allows each VDP access to
a common set of hardware modules. This level of sharing still al-
lows protocol designers enough isolation to implement a variety of
protocols and systems; for example, in Section 7, we will see that
designers can run virtual control planes and virtual environments
(e.g., OpenVZ [20], Trellis [6]) on top of SwitchBlade.
4. DESIGN
SwitchBlade has several unique design features that enable rapid
development of customized routing protocols with wire-speed per-
formance. SwitchBlade has a pipelined architecture (x4.1) with
various processing stages. SwitchBlade implements Virtual Data
Planes (VDP) (x4.2) so that multiple data plane implementations
can be supported on the same platform with performance isola-
tion between the different forwarding protocols. SwitchBlade pro-
vides customizable hardware modules (x4.3) that can be enabled or
disabled to customize packet processing at runtime. SwitchBlade
implements a (cid:3)exible matching forwarding engine (x4.4) that pro-
vides a longest pre(cid:2)x match and an exact hash-based lookup on
185User Interfaces
SwitchBlade Modules
Module Descriptions
Incoming Packet
VDP Selector
Shaper
Preprocessor
Selector
Custom
Preprocessor
Hasher
Output
Port
Lookup
VDP Selection Stage
Attaches platform header 
Copies VDP-id in the 
platform header
Shaping Stage
Rate controls VDP traffic
based on admin-specified
traffice rates
Preprocessing Stage
Selects preprocessing 
module, copies mode bits 
to platform header
Extracts custom fields from 
the packet header, prepares
 input for the Hasher module
Hashes input from 
preprocessor.
Fills hash in platform header
Forwarding Stage
Performs LPM, exact match, 
unconditional  or exception-
based  forwarding to CPU 
based on mode bits
Postprocessor
Wrappers
Selects custom fields for 
postprocessors
Admin interface
MAC addresses,
VDP-identfiers
Admin interface
for per-VDP rate
per-VDP
mode bits,
Module selection
bitmap
per-VDP
packet field
selections
per-VDP 
LPM,  exact match,
software exception, 
ARP tables
per-VDP
counters and stats
Key
Common Module
Pluggable Module
Register Interface
Packet Path
Stage Boundary
Custom
Postprocessors
Packet sent to 
output queues
Executes a subset of
post processors based on 
module selection bitmap
Figure 1: SwitchBlade Packet Processing Pipeline.
32-bits
Hash value
16-bits
Module selector 
bitmap
8-bits
8-bits
Mode
VDP-id
Figure 2: Platform header format. This 64 bit header is ap-
plied to every incoming packet and removed before the packet
is forwarded.
various (cid:2)elds in the packet header. There are also programmable
software exceptions (x4.5) that can be con(cid:2)gured from software to
direct individual packets or (cid:3)ows to the CPU for additional pro-
cessing.
4.1 SwitchBlade Pipeline
Figure 1 shows the SwitchBlade pipeline. There are four main
stages in the pipeline. Each stage consists of one or more hardware
modules. We use a pipelined architecture because it is the most
straightforward choice in hardware-based architectures. Addition-
ally, SwitchBlade is based on reference router from the NetFPGA
group at Stanford [2]; this reference router has a pipelined archi-
tecture as well.
VDP Selection Stage. An incoming packet to SwitchBlade is as-
sociated with one of the VDPs. The VDP Selector module classi-
(cid:2)es the packet based on its MAC address and uses a stored table
that maps MAC addresses to VDP identi(cid:2)ers. A register interface
populates the table with the VDP identi(cid:2)ers and is described later.
Field
Mode
Module
Selector
Bitmap
Value Description/Action
0
1
2
3
1
2
4
8
16
32
64
128
Default, Perform LPM on IPv4 destination address
Perform exact matching on hash value
Send packet to software for custom processing
Lookup hash in software exceptions table
Source MAC not updated
Don’t decrement TTL
Don’t Calculate Checksum
Dest. MAC not updated
Update IPv6 Hop Limit
Use Custom Module 1
Use Custom Module 2
Use Custom Module 3
Table 2: Platform Header: The Mode (cid:2)eld selects the forward-
ing mechanism employed by the Output Port Lookup module.
The Module Selector Bitmap selects the appropriate postpro-
cessing modules.
This stage also attaches a 64-bit platform header on the incom-
ing packet, as shown in Figure 2. The registers corresponding to
each VDP are used to (cid:2)ll the various (cid:2)elds in the platform header.
SwitchBlade is a pipelined architecture, so we use a speci(cid:2)c header
format that to make the architecture extensible. The (cid:2)rst byte of
this header is used to select the VDP for every incoming packet.
Table 2 describes the functionality of the different (cid:2)elds in the plat-
form header.
Shaping Stage. After a packet is designated to a particular VDP,
the packet is sent to the shaper module. The shaper module rate
limits traf(cid:2)c on per VDP basis. There is a register interface for the
module that speci(cid:2)es the traf(cid:2)c rate limits for each VDP.
Preprocessing Stage. This stage includes all the VDP-speci(cid:2)c pre-
processing hardware modules. Each VDP can customize which
preprocessor module in this stage to use for preprocessing the
packet via a register interface . In addition to selecting the prepro-
cessor, a VDP can select the various bit (cid:2)elds from the preprocessor
using a register interface. A register interface provides information
about the mode bits and the preprocessing module con(cid:2)gurations.
In addition to the custom preprocessing of the packet, this stage
also has the hasher module, which can compute a hash of an arbi-
trary set of bits in the packet header and insert the value of the hash
in the packet’s platform header.
Forwarding Stage. This (cid:2)nal stage in the pipeline handles the op-
erations related to the actual packet forwarding. The Output Port
Lookup module determines the destination of the packet, which
could be one of: (1) longest-pre(cid:2)x match on the packet’s desti-
nation address (cid:2)eld to determine the output port; (2) exact match-
ing on the hash value in the packet’s platform header to determine
the output port; or (3) exception-based forwarding to the CPU for
further processing. This stage uses the mode bits speci(cid:2)ed in the
preprocessing stage. The Postprocessor Wrappers and the Cus-
tom Postprocessors perform operations such as decrementing the
packet’s time-to-live (cid:2)eld. After this stage, SwitchBlade queues
the packet in the appropriate output queue for forwarding. Switch-
Blade selects the postprocessing module or modules based on the
module selection bits in the packet’s platform header.
4.2 Custom Virtual Data Plane (VDP)
SwitchBlade enables multiple customized data planes top oper-
ate simultaneously in parallel on the same hardware. We refer to
each data plane as Virtual Data Plane (VDP). SwitchBlade provides
a separate packet processing pipeline, as well as separate lookup ta-
186bles and register interfaces for each VDP. Each VDP may provide
custom modules or share modules with other VDPs. With Switch-
Blade, shared modules are not replicated on the hardware, saving
valuable resources. Software exceptions include VDP identi(cid:2)ers,
making it easy to use separate software handlers for each VDP.
Traf(cid:2)c Shaping. The performance of a VDP should not be affected
by the presence of other VDPs. The shaper module enables Switch-
Blade to limit bandwidth utilization of different VDPs. When sev-
eral VDPs are sharing the platform, they can send traf(cid:2)c through
any of the four ports of the VDP to be sent out from any of the
four router ports. Since a VDP can start sending more traf(cid:2)c than
what is its bandwidth limit thus affecting the performance of other
VDPs. In our implementation, the shaper module comes after the
Preprocessing stage not before it as shown in Figure 1. This imple-
mentation choice, although convenient, does not affect our results
because the FPGA data plane can process packets faster than any
of the inputs. Hence, the traf(cid:2)c shaping does not really matter.
We expect, however, that in the future FPGAs there might be much
more than the current four network interfaces for a single NetFPGA
which would make traf(cid:2)c shaping of individual VDPs necessary. In
the existing implementation, packets arriving at a rate greater than
the allocated limit for a VDP are dropped immediately. We made
this decision to save memory resources on the FPGA and to prevent
any VDP from abusing resources.
Register interface. SwitchBlade provides a register interface for
a VDP to control the selection of preprocessing modules, to cus-
tomize packet processing modules (e.g., which (cid:2)elds to use for cal-
culating hash), and to set rate limits in the shaper module. Some of
the values in the registers are accessible by each VDP, while others
are only available for the SwitchBlade administrator. SwitchBlade
divides the register interfaces into these two security modes: the
admin mode and the VDP mode. The admin mode allows setting of
global policies such as traf(cid:2)c shaping, while the VDP mode is for
per-VDP module customization.
SwitchBlade modules also provide statistics, which are recorded
in the registers and are accessible via the admin interface. The
statistics are speci(cid:2)c to each module; for example, the VDP selector
module can provide statistics on packets accepted or dropped. The
admin mode provides access to all registers on the SwitchBlade
platform, whereas the VDPmode is only to registers related to a
single VDP.
4.3 Customizable Hardware Modules
Rapidly deploying new routing protocols may require custom
packet processing.
Implementing each routing protocol from
scratch can signi(cid:2)cantly increase development time. There is a sig-
ni(cid:2)cant implementation cycle for implementing hardware modules;
this cycle includes design, coding, regression tests, and (cid:2)nally syn-
thesis of the module on hardware. Fortunately, many basic oper-
ations are common among different forwarding mechanisms, such
as extracting the destination address for lookup, checksum calcu-
lation, and TTL decrement. This commonality presents an oppor-
tunity for a design that can reuse and even allow sharing the im-
plementations of basic operations which can signi(cid:2)cantly shorten
development cycles and also save precious resources on the FPGA.
SwitchBlade achieves this reuse by providing modules that sup-
port a few basic packet processing operations that are common
across many common forwarding mechanism. Because Switch-
Blade provides these modules as part of its base implementation,
data plane protocols that can be composed from only the base mod-
ules can be implemented without resynthesizing the hardware and
can be programmed purely using a register interface. As an exam-
ple, to implement a new routing protocol such as Path Splicing [17],
which requires manipulation of splicing bits (a custom (cid:2)eld in the
packet header), a VDP can provide a new module that is included
at synthesis time. This module can append preprocessing headers
that are later used by SwitchBlade’s forwarding engine. A proto-
col such as OpenFlow [19] may depend only on modules that are
already synthesized on the SwitchBlade platform, so it can choose
the subset of modules that it needs.
SwitchBlade’s reusable modules enable new protocol develop-
ers to focus more on the protocol implementation. The developer
needs to focus only on bit extraction for custom forwarding. Each
pluggable module must still follow the overall timing constraints,
but for development and veri(cid:2)cation purposes, the protocol devel-
oper’s job is reduced to the module’s implementation. Adding new
modules or algorithms that offer new functionality of course re-
quires conventional hardware development and must still strictly
follow the platform’s overall timing constraints.
A challenge with reusing modules is that different VDPs may
need the same postprocessing module (e.g., decrementing TTL),
but the postprocessing module may need to operate on different
locations in the packet header for different protocols. In a na(cid:239)ve
implementation, SwitchBlade would have to implement two sepa-
rate modules, each looking up the corresponding bits in the packet
header. This approach doubles the implementation effort and also
wastes resources on the FPGA. To address this challenge, Switch-
Blade allows a developer to include wrapper modules that can cus-
tomize the behavior of existing modules, within same data word
and for same length of data to be operated upon.
As shown in Figure 1 custom modules can be used in the pre-
processing and forwarding stages. In the preprocessing stage, the
customized modules can be selected by a VDP by specifying the
appropriate selection using the register interface. Figure 3 shows
an example: the incoming packet from the previous shaping stage
which goes to a demultiplexer which selects the appropriate mod-
ule or modules for the packet based on the input from the register
interface speci(cid:2)c to the particular VDP that the packet belongs to.
After being processed by one of the protocol modules (e.g., IPv6,
OpenFlow), the packet arrives at the hasher module. The hasher
module takes 256 bits as input and generates a 32-bit hash of the
input. The hasher module need not be restricted to 256 bits of input
data, but a larger input data bus would mean using more resources.
Therefore, we decided to implement a 256-bit wide hash data bus
to accommodate our design on the NetFPGA.
Each VDP can also use custom modules in the forwarding stage,
by selecting the appropriate postprocessor wrappers and custom
postprocessor modules as shown in Figure 1. SwitchBlade selects
these modules based on the module selection bitmap in the platform
header of the packet. Figure 4(b) shows an example of the custom
wrapper and postprocessor module selection operation.
4.4 Flexible Matching for Forwarding
New routing protocols often require customized routing tables,
or forwarding decisions on customized (cid:2)elds in the packet. For
example, Path Splicing requires multiple IP-based forwarding ta-
bles, and the router chooses one of them based on splicing bits
in the packet header. SEATTLE [15] and Portland [18] use MAC
address-based forwarding. Some of the forwarding mechanisms are
still simple enough to be implemented in hardware and can bene(cid:2)t
from fast-path forwarding; others might be more complicated and
it might be easier to just have the forwarding decision be made in
software. Ideally, all forwarding should take place in hardware, but
there is a tradeoff in terms of forwarding performance and hardware
implementation complexity.
187Code
1