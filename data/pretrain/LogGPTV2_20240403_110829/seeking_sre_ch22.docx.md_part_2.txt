当公司成长为具有多个开发团队时，各个团队通常最终将高度关注他们负责交付功能的整个站点"技术堆栈"的特定部分。堆栈的其余部分将渐渐成为外围感知，但对于
SRE，站点的各个部分组合和互操作的方式至关重要。当各个团队做出设计决策时，SRE
会掌管一切重要领域。
通过提供工具框架来探测并可视化站点和各个（微型）服务的性能，SRE
可帮助开发团队识别其网站各个部分的优劣。SRE
具有适当的工具，用于提高可观察性以及围绕测量值的监视和警报，使开发人员能够通过实际用户操作，互近乎实时地观察其代码的性能。这样，网站或服务的每个组件都实现了业务目标的快速迭代。
使开发团队能够从整体的角度理解其作品的效果，这既是 SRE
团队有效性的基础，也能促进一种对自己负责的文化。在这种文化中，问题不会以一个非此即彼的态度被不断"扔到墙对面"。
## 将运维视为工程问题
  Brian Koen 对工程的描述如下：
> 以现有资源，在信息不足或状况不明的情况下采取最佳变化的战略。[Koen,
> Billy V.（1985年）。由 John Allspaw
> 引用。*工程方法的定义。*华盛顿特区：美国工程教育学会，第5页](https://www.kitchensoap.com/2017/08/12/multiple-perspectives-on-technical-problems-and-solutions/)。
站点可靠性作为一个角色已经出现，用于处理现代分布式系统的复杂性，以及为在线服务交付启用近乎实时的反馈循环。计算机系统和网络过去属于个人可理解性范畴，往往可以用"七个小矮人"的名字来为所有服务器命名。随着系统从像对待宠物一样被对待，发展到需要像[牛群](http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/)一样管理的规模，现在人们建议，他们需要被视为更短暂（或多产），好像[家禽](https://dzone.com/articles/cloud-computing-pets-cattle)，如今的系统已经不只是难以理解，几乎可以说是非常复杂了。
 复杂的分布式系统不一定以直观的方式响应，需要工具来公开内部状态信息以及对系统施加控制。复杂系统还具有非线性效应的特点，因此工具对于大型系统的安全管理至关重要。只有通过这个工具，团队才能有机会处理通过它们执行的不断增加的大量系统和软件服务，这些系统和软件服务通常存在（且执行活动的）时间很短，随即在系统中被其他服务取代。
这种不断变化的和不断增长的环境是为什么"工程"是推动站点可靠性发展的关键理念。 正如
Dave Zwieback
在[*《超越指责》*](http://shop.oreilly.com/product/0636920033981.do)（O\'Reilly）中写到的：
> 所有复杂系统功能和故障的根本原因都是无常的（即所有系统本质上都是可更改的）。知道根本原因后，我们不必再寻找，而是通过许多条件使特定情况显现。我们承认并非所有条件都是可知的或可修复的。
 Mathias Lafeldt
将这种"单一根源"概括为："所有事物都是条件不断变化的复合对象"。Lafeldt,
Mathias.（2017）
["没有恒常：问题的唯一根源"](https://medium.com/production-ready/impermanence-the-single-root-cause-bd9ebadf1e8e)，Medium.com。
SRE
团队的日常工作是处理他们支持的系统的常变性质：某一时刻的快照给人一种可靠的相关服务网络的印象，但现实是：服务之间的关系，甚至服务本身的组成是不断变化的组件矩阵。由于人机界面甚至基本物理的本质，这些多变的组件进一步模糊了对人机界面甚至基本物理的本质的真正理解。[观看
Grace Hooper
形象化的说明什么是一纳秒](https://www.youtube.com/watch?v=9eyFDBPk4Yw)。 如果对该系统的看法是从实际执行时消耗不确定的时间长度，那么试着了解每纳秒执行几条指令的计算机系统的状态，通过这样的角度来了解系统状态就只能算是"黑箱测试"。
如 [*Stella
报告*](https://stella.report)中所述并在[#schematic_drawing_of_a\_system_including_e](#schematic_drawing_of_a_system_including_e)（同样来自
Stella
报告）中所示，人们严重依赖于他们构建的工具来呈现有关系统的信息。 Tim
O\'Reilly 在 *什么是未来？* 做了如下描述：
> 每个硅谷公司都构建了两个相互交织的系统：为用户服务的应用程序，以及一组秘密的应用程序，他们用来了解正在发生的事情，以便他们可以不断改进他们的服务。
构建和维护"隐藏的应用程序集"或工具（用来确保需要它的每一个人都能随时获得最新的心理模型）是
SRE 团队的一个重要功能。  
## 通过承诺（服务级别）实现业务成功
 进入 SRE
的所有工作都必须面向基本的核心业务目标，以及为实现这些目标做出贡献的推动因素，否则是一种浪费。正如 正如
Peter Drucker 所写的：
当然，没有什么比高效完成无聊的事更荒谬的了。[Drucker, Peter
F.（1963年）。"管理商业效率"，哈佛商业评论。](https://hbr.org/1963/05/managing-for-business-effectiveness)
成功的 SRE
团队既了解业务指标，又开发了有助于实现这些目标的度量框架，同时支持站点性能和使用模式。服务级别协议（SAS）、
目标和现场[*可靠性工程*](https://www.safaribooksonline.com/library/view/site-reliability-engineering/9781491929117/)中涵盖的指标的处理可能是这些主题的规范框架。服务级别的最重要方面（协议、目标和指标）与开发团队与其
SRE
之间的目标一致性有关。目标是让两个小组共同努力，定义目标、实现这些目标，并每天保持性能，尽管网站组件和用户需求都在不断演变。
设置这些基准，然后制定并实施计划以实现它们，这是 SRE
与其他相关学科（如软件工程）不同之处。这也是我们常常说的那句话："希望不是计划"。
### 服务级别执行的进展
  服务水平监测的初步努力通常是由于合同要求而开始的。在这个阶段，SLA
是外在驱动的，并且通常仅反映可用性或响应时间的某些组件等总体度量。监督通常具有高度选择性或临时性，定期生成合同规定的报告，并且主要目标是避免经济处罚。无论是可观察性还是对服务执行机制的理解，这些都不是这个执行级别的目标。
随着组织的发展，它将开始了解临时 SLA
报告的限制和支持报告的强制性度量，并将开发内部激励的
SLO，开始提供有关执行的一些见解其服务的特点。通常，这些 SLO
会从测量相对容易确定或测量的参数开始。
较先进的组织将制定一套"领先指标"或 KPI，使它们能够主动应对可能危及其 SLO
实现的威胁，并对其服务的运作和绩效提供更细致的了解。依赖于相关服务（内部或外部）。随着时间的推移，对
KPI 和 SLO 的持续监控将提供一个基准，经验丰富的 SRE
团队可以从该基准中对其支持的服务以及在整个堆栈中与相关服务的关系进行有根据的推断。 
# SRE 的关键启用功能
  对于没有根深蒂固的文化原则的组织来说，实现服务水平是一项艰巨的任务。为了支持面向服务水平的实践，SRE
团队实践需要跨越五大支柱：
-   监视、指标和 KPI
-   事件管理和应急响应
-   容量规划和需求预测
-   性能分析和优化
-   预配、更改管理和速度
## 监视、指标和 KPI
     如前所述，如果你无法衡量，那么就真的不明白问题在哪里。拥有一组与业务真正重要相关的强大指标（KPI）对于开发服务级别定义（和针对这些定义进行报告）至关重要。
由于指标对 SRE 的实践至关重要，因此 SRE
团队通常会参与其公司或组织内的核心支持技术，从而提供方法来推动广大开发团队一致编写可靠代码。
SR
还经常位于指标管道的"导出"端，使数据可见且可供需要访问数据的人使用，无论是管理自己的代码的软件工程师还是需要掌握宏观趋势的业务主管。
## 事件管理和应急响应
由于 SRE
团队经常处于多个软件开发团队的交叉点，并且涉及不同服务之间的系统级动态，因此他们在事件响应中起着关键作用。通常情况下，SRE
将参与事件指挥和协调角色，他们的系统范围视角可能是事件发生后事后分析中有效学习的关键。SRE
团队还可以帮助确保工程团队中有效的待命函数的元任务，例如开源的来自
LinkedIn SRE 团队的[Iris
和轮值工具](https://engineering.linkedin.com/blog/2017/06/open-sourcing-iris-and-oncall)，并将代码提交职责集成到分布式响应框架中，详见[此博客文章](https://engineering.linkedin.com/blog/2018/01/project-star-streamlining-our-on-call-process)。
## 容量规划和需求预测
    通常，软件工程师无法准确理解他们的软件在实践中的使用方式。设计使用与实际使用之间的差距会对实施和维护服务的 资本支出（CapEx）和 运维支出（OpEx）产生巨大影响和影响。SRE团队可以很好地衡量，报告和预测系统可以提供的内容（容量），以及在进行业务讨论和持续设计策略时，可以了解未来的使用趋势（需求）。
## 性能分析和优化
    理解能力的很大一部分涉及了解服务（或多项服务的搭配）如何执行，无论是否有压力（又称失败）。通过可用的测量框架，SRE
可以帮助他们的开发合作伙伴汇总服务的性能，并使用他们的系统级观点来建议可以提高容量或性能的优化。