Currently, the buildout recipe `collective.recipe.omelette` uses `junction.exe` on all versions of Windows to create symbolic links. However, `junction.exe` is not included by default in Windows and, more importantly, it only supports creating symbolic links for directories, not for individual files. This limitation causes issues with several Python packages.

For Windows NT6+ (Vista and 7), there is now the `mklink` utility, which is included by default and can create symbolic links for both files and directories. I would like to update `collective.recipe.omelette` to use `mklink` if it is available. I have already made this change, except for one feature: detecting whether a file or folder is actually a symbolic link. Given that this is a small buildout recipe, requiring Pywin32 seems excessive (unless setuptools could somehow download it only on Windows).

Currently, on Windows, `omelette` calls `junction.exe` on the folder and then searches the response for "Substitute Name:" to determine if a symlink exists. Unfortunately, I haven't found a similarly simple method for `mklink`.

The only solution I can think of is to call the `dir` command in the directory and then parse the output line by line, looking for "<SYMLINK>" and the folder/filename on the same line. Is there a better approach?

**Suggestion:**
You could leverage the Tcl capabilities available through Tkinter, as Tcl's `file link` command can recognize junctions, unlike Python's `os` module.