of each parameter:
1. pSubjectInfo: A structure passed in from the calling trust provider that contains all the relevant
information about the file from which a signature should be extracted. Here is an example dump
of the structure passed to pwrshsip!PsGetSignature (the CryptSIPDllGetSignedDataMsg
component for the PowerShell SIP):
0:017> dt -r urlmon!SIP_SUBJECTINFO @rcx
+0x000 cbSize : 0x80
+0x008 pgSubjectType : 0x0000021a`95cfce10 _GUID {603bcc1f-4b59-
4e08-b724-d2c6297ef351}
+0x000 Data1 : 0x603bcc1f
+0x004 Data2 : 0x4b59
+0x006 Data3 : 0x4e08
+0x008 Data4 : [8] "???"
+0x010 hFile : 0x00000000`00000a0c Void
+0x018 pwsFileName : 0x0000021a`9ad8c0d4 "C:\Program
Files\WindowsPowerShell\Modules\Pester\4.0.3\Pester.psd1"
+0x020 pwsDisplayName : 0x0000021a`9ad8c0d4 "C:\Program
Files\WindowsPowerShell\Modules\Pester\4.0.3\Pester.psd1"
+0x028 dwReserved1 : 0
+0x02c dwIntVersion : 0
+0x030 hProv : 0x0000021a`ae7089e0
+0x038 DigestAlgorithm : _CRYPT_ALGORITHM_IDENTIFIER
+0x000 pszObjId : (null)
+0x008 Parameters : _CRYPTOAPI_BLOB
+0x000 cbData : 0
+0x008 pbData : (null)
+0x050 dwFlags : 0
+0x054 dwEncodingType : 0
+0x058 dwReserved2 : 0
+0x05c fdwCAPISettings : 0x23c00
+0x060 fdwSecuritySettings : 1
+0x064 dwIndex : 0
+0x068 dwUnionChoice : 0
+0x070 psFlat : (null)
+0x070 psCatMember : (null)
+0x070 psBlob : (null)
+0x078 pClientData : (null)
- 19 -
2. pdwEncodingType: Upon retrieving the digital signature from the file specified in
pSubjectInfo, this argument instructs the calling function (the trust provider “Message”
component) how to properly decode the return digital signature. This will most often be
PKCS_7_ASN_ENCODING and X509_ASN_ENCODING binary OR’ed together.
3. dwIndex: This parameter should be zero but in theory, your SIP can have the ability to contain
multiple embedded signatures and dwIndex would indicate which digital signature to extract
from the specified file.
4. pcbSignedDataMsg: The length of the digital signature (in bytes) returned via
pbSignedDataMsg.
5. pbSignedDataMsg: The encoded digital signature that’s returned to the calling trust
provider.
So if an attacker were to implement this function and use it, as an example, to overwrite the
CryptSIPDllGetSignedDataMsg component of the portable executable SIP (C689AAB8-8E78-11D0-8C47-
00C04FC295EE), any digital signature of the attackers choosing could be returned for any PE file.
Imagine the following fictional attack scenario:
1. An attacker implements the CryptSIPDllGetSignedDataMsg component of the portable
executable SIP and hijacks it in the registry.
2. The implementation simply consists of returning the same Microsoft certificate for any
executable file whether it has an embedded Authenticode signature or not.
3. In order to ensure that a digital signature of the appropriate format is returned, it is best to set a
breakpoint on the legitimate CryptSIPDllGetSignedDataMsg in a debugger prior to hijacking it.
Doing so confirms that Authenticode PKCS #7 signed data is always returned.
a. In a PowerShell script, this involves base64 decoding the “SIG # Begin signature block”.
b. In a PE file with an embedded Authenticode signature, Authenticode PKCS #7 signed
data is present in the bCertificate field of the embedded WIN_CERTIFICATE structure as
documented in the PE Authenticode specification.
c. A catalog file itself is Authenticode PKCS #7 signed data (which can actually be used in
an embedded PE Authenticode signature).
4. Now, the attacker implementation simply needs to return the correct encoding, signature data
length, and signature data.
In this attack scenario, the hijacked CryptSIPDllGetSignedDataMsg will return the bytes of a catalog file
used to sign many system components like notepad.exe. To easily determine the catalog file associated
with a signed file, sigcheck.exe can be used:
● sigcheck -i C:\Windows\System32\notepad.exe
In this instance, it returns the following catalog file path:
● C:\WINDOWS\system32\CatRoot\{F750E6C3-38EE-11D1-85E5-
00C04FC295EE}\Microsoft-Windows-Client-Features-Package-
AutoMerged-shell~31bf3856ad364e35~amd64~~10.0.15063.0.cat
- 20 -
Now, the attacker implementation need only to return the bytes from that catalog file to have any PE
file appear to be signed using the same certificate as notepad.exe. A modular design approach might be
to embed the desired signature content in an embedded resource in the attacker-supplied SIP DLL.
What follows is an illustration showing how the PowerShell SIP CryptSIPDllGetSignedDataMsg
component is hijacked using a custom, malicious SIP that will always return the same, legitimate
Microsoft certificate for PowerShell files:
Demonstration of a PowerShell CryptSIPDllGetSignedDataMsg Hijack
It can be seen that prior to the hijack, as expected, test.ps1 shows up as not signed. After the hijack
occurs, however, test.ps1 appears to be signed with a Microsoft certificate:
An unsigned PowerShell script that appears to all of a sudden be signed by Microsoft
- 21 -
While the unsigned PowerShell script appears to be signed by Microsoft, it's hash will fail to validate accordingly.
So the hijack was successful but with one caveat - the signature fails to validate because the computed
hash doesn’t match with that of the signed hash in the digital signature. An additional side effect of this
hijack is that any PowerShell code will have the same digital signature applied which would lead to hash
mismatches in most cases.
In order to prevent trust validation from failing due to hash mismatches, the
CryptSIPDllVerifyIndirectData also requires hijacking.
SIP Hijack #2: CryptSIPDllVerifyIndirectData
As was explained in the previous hijack scenario, hijacking the CryptSIPDllGetSignedDataMsg component
of a registered SIP enables otherwise unsigned code to give the appearance of being signed. Considering
the hash will not match, however, the digital signature will fail to validate on attacker-supplied code.
Hijacking CryptSIPDllVerifyIndirectData will get the job done, however.
As a reminder, CryptSIPDllVerifyIndirectData implementations are stored in the following registry
values:
- 22 -
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingTy
pe 0\CryptSIPDllVerifyIndirectData\{SIP Guid}
○ Dll
○ FuncName
This is its function prototype:
BOOL WINAPI CryptSIPVerifyIndirectData(
IN SIP_SUBJECTINFO *pSubjectInfo,
IN SIP_INDIRECT_DATA *pIndirectData);
Debugging legitimate implementations of CryptSIPVerifyIndirectData confirmed that when the
calculated Authenticode hash matches that of the signed hash value, CryptSIPVerifyIndirectData returns
TRUE. Therefore, all a malicious SIP needs to do is return TRUE resulting in the appearance of hash
validation producing a match for the respective SIP[s] that were hijacked. Continuing with the
PowerShell hijack example, a malicious SIP that simply returns true for the hash validation routine will
alleviate the issue of attacker-supplied code not validating properly.
The implementation of this function could not be more straightforward:
BOOL WINAPI AutoApproveHash(
SIP_SUBJECTINFO *pSubjectInfo,
SIP_INDIRECT_DATA *pIndirectData) {
UNREFERENCED_PARAMETER(pSubjectInfo);
UNREFERENCED_PARAMETER(pIndirectData);
return TRUE;
}
Next, hijacking the hash verification handler (along with the previously hijack signature retrieval
function) will give pass all the checks of having unsigned PowerShell code pose as signed, Microsoft
code:
Hijacking the CryptSIPVerifyIndirectData component of the PowerShell SIP
- 23 -
Now, an unsigned PowerShell file appears signed and properly validated.
The "Digital Signatures" UI tab shows an unsigned PowerShell file that appears signed and properly validated.
- 24 -
Sysinternals sigcheck shows an unsigned PowerShell file that appears signed and properly validated.
A more ideal hijack scenario is to not even bother hijacking CryptSIPDllGetSignedDataMsg for the
targeted SIP. Rather, simply apply a legitimate Authenticode signature (e.g. from
C:\Windows\System32\WindowsPowerShell\v1.0\Modules\ISE\ise.psm1) to attacker-supplied code,
and to only hijack CryptSIPVerifyIndirectData. Doing so affords an attacker the following benefits:
1) There is less to hijack and clean up from.
2) Benign, legitimately signed code will have its respective signature applied properly.
3) Attacker-supplied code with a “legitimate” embedded Authenticode certificate is likely to
receive less scrutiny from a defender or security product.
test.ps1 has the same embedded Authenticode signature applied as ise.psm1. The matching SignerCertificate thumbprint
value confirms the match.
- 25 -
Note that while the examples up to this point have focused on the PowerShell SIP, these hijack
principles apply to all SIPs. Here is an example of a hijacked portable executable SIP (C689AAB8-8E78-
11D0-8C47-00C04FC295EE) that has a legitimate Microsoft digital signature applied to an attacker-
supplied binary:
notepad_backdoored.exe has the digital signature of notepad.exe (catalog-signed) applied to it.
The "Digital Signatures" UI tab also confirms that the attacker-suppled notepad_backdoored.exe validates as a signed
Microsoft file.
- 26 -
This hijack will convince any program that performs user-mode trust/signature validation including
Sysinternals Process Explorer:
notepad_backdoored.exe appears as a "verified signer" in Sysinternals Process Explorer.
Bypassing Device Guard UMCI Enforcement
In an application whitelisting scenario, hijacking the mechanism by which trust is validated using an
unsigned/unapproved binary poses a bit of a “chicken and the egg” problem whereby the trust of the
malicious SIP DLL needs to be validated per the deployed whitelisting policy. It turns out, with Device
Guard at least, that the system will fail to load the malicious SIP DLL which will subsequently cause trust
validation to fail in many cases. This understandably has the potential to cause system stability issues.
Ideally (for attackers) there would be a signed DLL that could serve the CryptSIPVerifyIndirectData role.
Fortunately, there is. Recall that CryptSIPVerifyIndirectData functions take on the following function
signature:
BOOL WINAPI CryptSIPVerifyIndirectData(
IN SIP_SUBJECTINFO *pSubjectInfo,
IN SIP_INDIRECT_DATA *pIndirectData);
Also, in order to pass the validation check, the function must return TRUE. So, one is faced with the
following requirements to produce a signed CryptSIPVerifyIndirectData function:
1) The DLL must be signed.
2) The function must accept two parameters.
3) The function must use the WINAPI/stdcall calling convention.
4) The function must return TRUE (which is most often interpreted as a non-zero and/or odd
number).
5) The function must not alter the arguments passed in as this would likely lead to memory
corruption.
- 27 -
6) The function must ideally have no other unanticipated side effects other than returning “TRUE.”
7) The function must be exported.
While undoubtedly, such a process of finding candidate functions could be automated by translating
functions into an intermediate language for analysis, it didn’t take long to find a candidate export
function - ntdll!DbgUiContinue:
Annotated Disassembly of ntdll!DbgUiContinue
Simply setting the CryptSIPVerifyIndirectData registry key for the target SIP to
“C:\Windows\System32\ntdll.dll” and “DbgUiContinue” was sufficient to pass the hash validation check
for any code that has a legitimate embedded Authenticode signature applied to it. In practice, when
tested against the portable executable SIP on a Device Guard enforced system, attacker-supplied code
was blocked from executing. Hijacking the PowerShell SIP, however, enabled a constrained language
mode bypass, enabling arbitrary, unsigned code execution. At this point, it is unclear as to what
additional (likely kernel-backed) trust assertions are made with portable executables versus PowerShell
code. There are also likely to be better hijack functions than DbgUiContinue but it was sufficient to
demonstrate a hijack without required an unsigned, attacker-supplied SIP DLL.
The following examples demonstrate Device Guard-enabled constrained language mode in PowerShell
preventing the execution of Add-Type prior to the hijack followed by the subsequent bypass after the
CryptSIPVerifyIndirectData hijack occurs:
- 28 -
Prior to the hijack, the code in test.psm1 will be prevented from executing due to constrained language mode enforcement.
- 29 -
After the "signed code reuse" attack occurs, constrained language mode is circumvented.
Despite this form of hijack not representing a complete takeover of Device Guard user mode integrity
enforcement (UMCI), it does however pose a good hijacking method from a stealth perspective because
it doesn’t require an attacker to drop any malicious code to disk - i.e. the attacker supplied SIP.
Trust Provider “FinalPolicy” Hijack
As was described in the trust provider architecture section, the final trust decision is made by the
FinalPolicy component of the trust provider. This is the function signature for FinalPolicy:
HRESULT WINAPI FinalPolicyFunction(_Inout_ struct _CRYPT_PROVIDER_DATA
*pProvData);
The FinalPolicy implementing function for the respective trust provider is located here:
- 30 -
HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Providers\Trust\Fin
alPolicy\{trust provider GUID}
While an attacker could choose to implement their own trust provider DLL to subvert FinalPolicy, this
would require dropping attacker-supplied, malicious code to disk. Additionally, the implementation of a
trust provider is sufficiently complex to fully implement compared to that of a SIP. As was described
previously however, signed code can be used to hijack FinalPolicy as a means of getting it to simulate
passing all of its checks. A candidate signed hijack function would need to meet the following
requirements:
1. The DLL must be signed.
2. The function must accept one parameter.
3. The function must use the WINAPI/stdcall calling convention.
4. The function must return 0 (S_OK) which indicates success as an HRESULT.
5. The function must not alter the arguments passed in as this would likely lead to memory
corruption.
6. The function must ideally have no other unanticipated side effects other than returning 0.
7. The function must be exported.
The unimplemented export function wintrust!SoftpubCleanup meets all the requirements to perform a
hijack.
Annotated SoftpubCleanup Disassembly
Written in C, this function is equivalent to the following:
HRESULT WINAPI SoftpubCleanup(CRYPT_PROVIDER_DATA *data)
{
return S_OK;
}
- 31 -
As an example, setting the FinalPolicy component of WINTRUST_ACTION_GENERIC_VERIFY_V2
(00AAC56B-CD44-11D0-8CC2-00C04FC295EE) will cause many signature validation tools to consider
unsigned code, or code with a legitimate signature applied, as trusted (e.g. Get-AuthenticodeSignature,
sigcheck, signtool, etc.). In practice, performing this hijack with SoftpubCleanup causes Process Explorer
(procexp) to reliably crash.
Hiding from Autoruns
A side effect of applying a legitimate Microsoft Authenticode digital signature to attacker-supplied code
hijacking the CryptSIPVerifyIndirectData component of a targeted SIP is that it will hide from Autoruns
by default which does not display “Microsoft” or “Windows” entries by default.
With the portable executable SIP hijack in place, a persistent, attacker-supplied EXE does not show up by
default:
notepad_backdoored.exe is hidden from the default view in Autoruns.
When “Hide Microsoft Entries” and “Hide Windows Entries” are both deselected however, the malicious
entry in the Run key becomes visible:
Confirmation that notepad_backdoored.exe only appears upon deselecting "Hide Windows Entries"
- 32 -
Persistence and Code Execution
With knowledge of how to hijack SIPs and trust providers, it should be clear that beyond subverting
trust, these hijack attacks also permit persistent code execution in the context of any application that
performs code signing or signature validation. By implementing a SIP or trust provider, code execution is
possible in the following non-exhaustive list of programs:
1) DllHost.exe - When the “Digital Signatures” tab is displayed in file properties
2) Process Explorer - When the “Verified Signer” tab is displayed
3) Autoruns
4) Sigcheck
5) consent.exe - Any time a UAC prompt is displayed
6) signtool.exe
7) smartscreen.exe
8) Get-AuthenticodeSignature
9) Set-AuthenticodeSignature
10) Security vendor software that performs certificate validation based on calls to WinVerifyTrust.
Additional persistence and code execution opportunities exist and can be discovered by filtering off the
following registry key paths in Process Monitor:
1) HKLM\SOFTWARE\Microsoft\Cryptography\Providers
2) HKLM\SOFTWARE\WOW6432Node\Microsoft\Cryptography\Providers
3) HKLM\SOFTWARE\Microsoft\Cryptography\OID
4) HKLM\SOFTWARE\WOW6432Node\Microsoft\Cryptography\OID
When hijacking a trust provider using attacker-supplied code, one possible stability consideration would
be to implement malicious logic as part of the “DiagnosticPolicy” component so as to not interfere with
legitimate trust functionality.