唯一真正新的钥匙是`stop_grace_period`钥匙。这个键告诉 Docker 在它告诉容器停止后要等待多长时间，它才会强制停止容器。如果不使用`stop_grace_period`键，默认时间段为 10 秒。当您需要更新栈，本质上是重新栈时，服务的容器将被告知优雅地关闭。Docker 将等待`stop_grace_period`键中指定的时间，如果没有提供该键，则等待 10 秒。如果容器在此期间关闭，容器将被移除，新的容器将在其位置启动。如果容器在这段时间内没有关闭，它将被强制停止，杀死它，然后移除它，然后启动一个新的容器来代替它。这个键的意义在于，它允许运行需要更长时间才能正常停止的进程的容器有必要的时间来真正正常停止。
我想指出的这项服务的最后一个方面是关于列出的那种奇怪的卷。这不是典型的卷，卷密钥定义中没有条目。`/var/run/docker.sock:/var/run/docker.sock`卷是访问主机的 Docker 守护程序正在监听的 Unix 套接字的一种方式。在这种情况下，它允许容器与其主机通信。可视化工具容器正在收集关于哪些容器在哪些主机上运行的信息，并且能够以图形方式呈现这些数据。您会注意到，它将 8080 主机端口映射到 8080 容器端口，因此我们可以通过浏览到我们的任何群集节点上的 8080 端口来查看它共享了什么数据。以下是我的(当前)三节点群的外观:
![](img/51807fb7-0768-419a-80af-5281df5e2ef8.png)
# 其余的栈命令
现在，让我们通过我们部署`voteapp`栈的群体镜头来快速查看我们的其他栈相关命令。首先，我们有列表栈命令:`docker stack ls`。试一试看起来是这样的:
```
# List the stacks deployed in a swarm
docker stack ls
```
以下是示例环境中的情况:
![](img/9b32a41a-3a67-427f-bc1c-a6d2167d52aa.png)
这表明我们目前部署了一个名为 voteapp 的栈，它由六个服务组成，并使用 swarm 模式进行编排。知道部署栈的名称允许我们使用其他栈命令收集更多关于它的信息。接下来是列表栈任务命令。让我们在示例环境中尝试一下这个命令:
```
# List the tasks for our voteapp stack filtered by desried state
docker stack ps voteapp --filter desired-state=running
```
这是我现在所处环境的结果；你的应该看起来很相似:
![](img/d6dbb6ce-fbfb-4386-8250-2bfd9bc4857e.png)
现在，我们来看看 stack services 命令。这个命令将为我们提供作为栈应用一部分部署的服务的概要。该命令如下所示:
```
# Look at the services associated with a deployed stack
docker stack services voteapp
```
这是我们在示例环境中看到的:
![](img/d7c657d4-540a-433b-97ee-b230735ed4c8.png)
这个命令提供了一些非常有用的信息。我们可以快速查看我们服务的名称、所需的副本数量以及每个服务的实际副本数量。我们可以看到用于部署每个服务的映像，还可以看到用于每个服务的端口映射。在这里，我们可以看到可视化工具服务正在使用端口`8080`，正如我们前面提到的。我们还可以看到我们的投票服务暴露在我们的群主机的端口`5000`上。现在，让我们通过浏览到端口`5000`(在群中的任何节点上)来看看我们在 voteapp 中呈现的内容:
![](img/96258e39-c554-4dd6-b33c-697eb17986ec.png)
你是养狗的人还是养猫的人？你可以用自己的投票来表达自己！投票，然后使用 stack service 命令中的数据，通过浏览端口`5001`查看投票结果:
![](img/7c015ab2-78dd-47e0-b949-dffb749946d9.png)
是的，我是一个爱狗的人。最后还有一个栈命令:remove 命令。通过发出`rm`命令，我们可以快速轻松地取下使用栈部署命令部署的应用。这是它的样子:
```
# Remove a deploy stack using the rm command
docker stack rm voteapp
```
现在你看到了，现在你没有:
![](img/46c33edf-aa70-4eb8-9eb3-598d69cab70a.png)
你应该注意到没有你确定吗？手持，所以在按下*进入*这个命令之前一定要非常确定和小心。让我们以快速查看扩展或重新堆叠作为 Docker 栈部署的应用的最佳实践来结束关于 Docker 栈的讨论。
# 扩展栈应用的最佳实践
和 Docker 的大多数东西一样，有几种不同的方法来实现应用的期望状态。当您使用 Docker 栈时，您应该始终使用与部署应用相同的方法来更新应用。在栈组成文件中进行任何所需的状态更改，然后运行与部署栈完全相同的命令。这允许您使用标准源代码控制功能来正确处理您的合成文件，例如跟踪和检查更改。而且，它允许 Docker 为编排您的应用做正确的事情。如果需要在应用中向上或向下扩展服务，应该更新栈合成文件中的副本密钥，然后再次运行 deploy 命令。在我们的示例中，我们的投票服务有两个副本。如果投票需求激增，我们可以通过编辑`docker-stack.yml`文件，将副本值从 2 更改为 16，然后发出最初用于部署应用的相同命令，从而轻松扩展我们的应用:
```
# After updating the docker-stack.yml file, scale the app using the same deploy command
docker stack deploy -c docker-stack.yml voteapp
```
现在，当我们检查服务时，我们可以看到我们正在扩展我们的应用:
![](img/c8149abc-acce-4e48-bf42-3d65cb21a180.png)
这就是它，一个易于使用、易于理解、非常非常强大的 Docker 应用编排！
# 参考
有关更多信息，请查看以下链接:
*   撰写文件参考:[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)
*   一些编写文件的例子:[https://github.com/play-with-docker/stacks](https://github.com/play-with-docker/stacks)
*   Docker 上的 Docker 示例映像:https://hub . docker . com/u/dock samples/
*   在 Docker 上发现的官方 redis 映像标记:https://hub . docker . com/r/library/redis/tags/
*   一篇关于使用 Docker 守护程序套接字的精彩文章:[https://medium . com/lucjuggery/about-var-run-Docker-sock-3 bfd 276 e 12 FD](https://medium.com/lucjuggery/about-var-run-docker-sock-3bfd276e12fd)
*   栈部署命令引用:[https://docs . docker . com/engine/reference/command line/stack _ deploy/](https://docs.docker.com/engine/reference/commandline/stack_deploy/)
*   栈 ps 命令引用:[https://docs . docker . com/engine/reference/command line/stack _ PS/](https://docs.docker.com/engine/reference/commandline/stack_ps/)
*   栈服务命令引用:[https://docs . docker . com/engine/reference/command line/stack _ services/](https://docs.docker.com/engine/reference/commandline/stack_services/)
# 摘要
现在你知道了很多关于 Docker stacks 的知识。您可以使用合成文件轻松创建应用定义，然后使用 stack deploy 命令部署这些应用。您可以使用 ls、ps 和 services 命令探索已部署栈的细节。您可以通过对撰写文件进行简单的修改并执行与部署应用相同的命令来扩展应用。最后，您可以使用 stack rm 命令删除一个已经到达生命周期终点的应用。权力越大，责任越大，所以要非常小心删除命令。您现在有足够的信息来创建和编排世界一流的企业级应用，所以快去忙吧！然而，如果你想学习如何与 Jenkins 一起使用 Docker，你会很高兴知道这是[第 8 章](8.html)、 *Docker 和 Jenkins* 的主题，所以请翻页开始阅读！