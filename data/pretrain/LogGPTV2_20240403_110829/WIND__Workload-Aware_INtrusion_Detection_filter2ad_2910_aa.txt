title:WIND: Workload-Aware INtrusion Detection
author:Sushant Sinha and
Farnam Jahanian and
Jignesh M. Patel
WIND: Workload-Aware INtrusion Detection
Sushant Sinha, Farnam Jahanian, and Jignesh M. Patel
Electrical Engineering and Computer Science,
University of Michigan,
Ann Arbor, MI-48109
{sushant, farnam, jignesh}@umich.edu
Abstract. Intrusion detection and prevention systems have become es-
sential to the protection of critical networks across the Internet. Widely
deployed IDS and IPS systems are based around a database of known ma-
licious signatures. This database is growing quickly while at the same time
the signatures are getting more complex. These trends place additional
performance requirements on the rule-matching engine inside IDSs and
IPSs, which check each signature against an incoming packet. Existing
approaches to signature evaluation apply statically-deﬁned optimizations
that do not take into account the network in which the IDS or IPS is de-
ployed or the characteristics of the signature database. We argue that for
higher performance, IDS and IPS systems should adapt according to the
workload, which includes the set of input signatures and the network traﬃc
characteristics. To demonstrate this idea, we have developed an adaptive
algorithm that systematically proﬁles attack signatures and network traf-
ﬁc to generate a high performance and memory-eﬃcient packet inspection
strategy. We have implemented our idea by building two distinct compo-
nents over Snort: a proﬁler that analyzes the input rules and the observed
network traﬃc to produce a packet inspection strategy, and an evaluation
engine that pre-processes rules according to the strategy and evaluates
incoming packets to determine the set of applicable signatures. We have
conducted an extensive evaluation of our workload-aware Snort implemen-
tation on a collection of publicly available datasets and on live traﬃc from
a border router at a large university network. Our evaluation shows that
the workload-aware implementation outperforms Snort in the number of
packets processed per second by a factor of up to 1.6x for all Snort rules
and 2.7x for web-based rules with reduction in memory requirements. Sim-
ilar comparison with Bro shows that the workload-aware implementation
outperforms Bro by more than six times in most cases.
Keywords: Intrusion detection and prevention, deep packet inspection,
workload aware, adaptive algorithm.
1 Introduction
New critical software vulnerabilities are a common occurrence today. Symantec
documented 1,896 new software vulnerabilities from July 1, 2005 to December
31, 2005, over 40% more than in 2004 [1]. Of these, 97% were considered moder-
ately or highly severe, and 79% were considered easy to exploit. To address this
rapid increase in vulnerabilities, organizations around the world are turning to
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 290–310, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
WIND: Workload-Aware INtrusion Detection
291
Intrusion Detection Systems (IDS) and Intrusion Prevention Systems (IPS) to
detect and prevent attacks against networked devices.
The core component of popular IDSs, like Snort [2], is a deep packet inspec-
tion engine that checks incoming packets against a database of known signatures
(also called rules). The performance of this signature-matching system is criti-
cal to the scalability of IDS and IPS systems, including packet per second rate.
The dominant factor in determining the performance of this signature matching
engine, whether implemented in software or hardware, is the number and com-
plexity of the signatures that must be tested against incoming packets. However,
both the number and complexity of rules appears to be increasing. For example,
the recent Windows Meta-File (WMF) exploit [3] required inspecting and decod-
ing more than 300 bytes into the HTTP payload which could quickly overwhelm
the CPU of the IDS or IPS, causing massive packet drops [4].
As a result, there has been signiﬁcant eﬀort in developing methods for eﬃcient
deep packet inspection. Current IDSs like Snort and Bro attempt to evaluate as
few rules as possible in a highly parallel way. For example, Snort pre-processes
rules to separate them by TCP ports, and then parallelizes the evaluation based
on port. However, these groupings can be ineﬃcient because all of the rules in
a given group do not apply to incoming packets. Moreover, separating rules by
multiple protocol ﬁelds in a naive way does not solve the problem because of the
additional memory overhead associated with managing groups.
In this paper, we argue that IDS and IPS should dynamically adapt the par-
allelization and separation of rules based on the observed traﬃc on the network
and the input rules database. That is, all IDS and IPS workloads are not the
same, and systems should adapt to the environment in which they are placed
to eﬀectively trade-oﬀ memory requirements for run-time rule evaluation. To
demonstrate this idea, we have developed an adaptive algorithm that system-
atically proﬁles the traﬃc and the input rules to determine a high performance
and memory eﬃcient packet inspection strategy that matches the workload. To
eﬀectively use memory for high performance, the rules are separated into groups
by values of protocol ﬁelds and then these rule groups are chosen to be main-
tained in memory following a simple idea of “the rule groups that have a large
number of rules and match the network traﬃc only a few times should be sepa-
rated from others.” This idea follows our observation that if rules with value v
for a protocol ﬁeld are grouped separately from others, then for any packet that
does not have value v for the protocol ﬁeld, we can quickly reject all those rules,
and if only a few packets have that value, then those rules will be rejected most
of the time. Therefore, our workload-aware scheme aims to determine a small
number of eﬀective groups for a given workload.
Our algorithm determines which rule groups are maintained in the memory
by choosing protocol ﬁelds and values recursively. It ﬁrst determines the protocol
ﬁeld that is most eﬀective in rejecting the rules, and then separates those groups
with values of the chosen protocol ﬁeld that reject at least a threshold number
of rules. After forming groups for each of these values, the algorithm recursively
splits the groups by other protocol ﬁelds, producing smaller groups. In this way,
292
S. Sinha, F. Jahanian, and J.M. Patel
we generate a hierarchy of protocol ﬁelds and values for which groups are main-
tained. By lowering the threshold, memory can be traded-oﬀ for performance.
Using this systematic approach for computing a protocol evaluation structure,
we automatically adapt an IDS for a given workload.
In this paper we develop a prototype Snort implementation based on our
workload-aware framework, which we call Wind. The implementation has two
main components. The ﬁrst component proﬁles the workload (i.e., the input rules
and the observed network traﬃc) to generate the hierarchical evaluation tree.
The second component takes the evaluation tree, pre-processes the rules, and
matches incoming packet to the rules organized in the tree.
We evaluate our prototype workload-aware Snort implementation on the wid-
ely recognized DARPA intrusion detection datasets, and on live traﬃc from a
border router at a large live academic network. We ﬁnd that our workload-
aware algorithm improves the performance of Snort up to 1.6 times on all Snort
rules and up to 2.7 times for web-based rules. Surprisingly, we also ﬁnd that
the algorithm reduces memory consumption by 10 − 20%. We also compare the
workload-aware algorithm with Bro, and ﬁnd it outperforms Bro by more than
six times on most workloads.
To summarize, the main contributions of this paper are:
– We propose a method for improving the performance of IDS and IPS systems
by adapting to the input rules and the observed network traﬃc.
– To demonstrate our idea, we constructed a workload-aware Snort prototype
called Wind that consists of two components: a component that proﬁles both
the input rules and the observed network traﬃc to produce an evaluation
strategy, and a second component that pre-process the rules according to
the evaluation strategy, and then matches incoming packets.
– We evaluate our prototype on publicly-available datasets and on live traﬃc
from a border router. Our evaluation shows that Wind outperforms Snort
up to 1.6 times and Bro by six times with less memory requirements.
The rest of the paper is organized as follows: Section 2 presents background
and related work. Section 3 presents the design of Wind, and Section 4 presents
empirical results comparing Wind with existing IDSs. Section 5 discusses tech-
niques for dynamically adapting Wind to changing workloads. We ﬁnally con-
clude with directions for future work in Section 6.
2 Background and Related Work
The interaction between high-volume traﬃc, number of rules, and the complex-
ity of rules has created problems for Intrusion Detection Systems that examine
individual ﬂows. Dreger et. al. [5] present practical problems when Intrusion De-
tection Systems are deployed in high-speed networks. They show that current
systems, like Bro [6] and Snort [2], quickly overload CPU and exhaust the mem-
ory when deployed in high-volume networks. This causes IDS to drop excessive
WIND: Workload-Aware INtrusion Detection
293
number of packets, some of which may be attack incidents. Therefore, they pro-
pose some optimizations to reduce memory consumption and CPU usage which
are orthogonal to the Wind approach.
Lee et. al. [7] ﬁnd that it is diﬃcult to apply all possible rules on an incoming
packet. Therefore, they evaluated the cost-beneﬁt for the application of various
rules and determined the best set of rules that can be applied without dropping
packets. However, they trade-oﬀ accuracy for achieving high bandwidth. Kruegel
and Valeur [8] propose to slice traﬃc across a number of intrusion detection (ID)
sensors. The design of their traﬃc slicer ensures that an ID sensor conﬁgured to
apply certain rules on a packet does not miss any attack packet.
Sekar et. al. [9] developed a high-performance IDS with language support
that helps users easily write intrusion speciﬁcations. To specify attack signatures
within a payload, they used regular expressions. This speciﬁcation is diﬀerent
from Snort in which attack signatures contain exact substrings, in addition to
regular expressions, to be matched with a payload. Using regular expressions is
a more generic approach than using substrings to specify an attack signature.
However, regular expressions are more expensive to evaluate than exact substring
matches. (The complexity of checking a regular expression of size m over a
payload of size n is O(mn) [10] and it is more expensive than checking for exact
substring within a payload, which has a time complexity of O(n) [10]). Aho-
Corasick [10] matches a set of substrings over a payload in O(n). Alternative
schemes like Wu-Manber [11] speed up matching by processing the common
case quickly. The multi-pattern optimizations to speed up an Intrusion Detection
System are complementary to our approach, as we speed up an IDS by reducing
the expected number of patterns to be checked with a packet.
Versions of Snort prior to 2.0 evaluated rules one by one on a packet. This
required multiple passes of a packet and the complexity of intrusion detection
grew with the number of rules. To eliminate redundant checking of protocol
ﬁelds, rules that have the same values for a protocol ﬁeld can be pre-processed
and aggregated together. Then, a check on the protocol ﬁeld value would equiv-
alently check a number of rules. By clustering rules in this way and arranging
the protocol ﬁelds by their entropy in a decision tree, Kruegel and Toth [12], and
Egorov and Savchuk [13] independently demonstrated that Snort (version 1.8.7)
performance can be improved up to three times. However, these papers only
examined the input rules to determine the rule evaluation order. In contrast, we
analyze the traﬃc, as well as the rules, to determine the rule evaluation order.
Secondly, they use entropy as an ordering metric, whereas we use a more intu-
itive metric for selecting as few rules as possible. Lastly, a naive arrangement
of protocol ﬁelds would drastically increase memory usage, and these papers
have not considered the memory costs associated with their approaches. Wind
improves performance and at the same time reduces the memory usage of an
intrusion detection and prevention system.
Snort 2.0 [14] uses a method in which rules are partitioned by TCP ports, and
a packet’s destination and source port determines the sets of applicable rules.
Then, the content speciﬁed by these applicable rules are checked in one pass
294
S. Sinha, F. Jahanian, and J.M. Patel
of the payload, using either the Aho-Corasick or the Wu-Manber algorithm, for
multiple substring search. If a substring speciﬁed in some attack rule matches
with the packet, then that rule is evaluated alone. We found that the parallel
evaluation signiﬁcantly sped up Snort. Snort now takes 2-3 microseconds per
packet, when compared to earlier ﬁndings of 20-25 [13] microseconds per packet
for Snort versions prior to 2.0 1. This optimization signiﬁcantly improved Snort
performance. Nevertheless, we further speed up a multi-rule Snort on many
workloads. This is achieved by partitioning the rules in an optimized evaluation
structure.
Recently, specialized hardware [15,16] for intrusion detection in high-volume
networks has been developed. However, hardware-based solutions are complex
to modify (e.g., to change the detection algorithm). Nevertheless, the techniques
presented here will further enhance performance of these systems.
Our work is also related, and inspired, by database multi-query optimization
methods that have long been of interest to the database community (see [17, 18,
19, 20 ]) for a partial list of related work). However, rather than ﬁnding common
subexpressions amongst multiple SQL queries against a static database instance,
the problem that we tackle requires designing a hierarchical data structure to
group network rules based on common subexpressions, and using this data struc-
ture in a data streaming environment.
3 Designing a Workload-Aware IDS
In this section, we ﬁrst show that checking a protocol ﬁeld can reject a large
number of rules, and the number of rejected rules varies signiﬁcantly with the
protocol ﬁeld. Then, we take this observation a step further and construct an
evaluation strategy that decomposes the set of rules recursively by protocol ﬁelds
and constructs a hierarchical evaluation tree. However, a naive strategy that
separates rules by all values of a protocol ﬁeld will use too much memory. To
address this issue, we present a mathematical model that addresses the trade-oﬀ
between memory occupied by a group of rules and the improvement in run-
time packet processing. Finally, we present a novel algorithm and a concrete
implementation to capture statistical properties of the traﬃc and the rule set to
determine a high-performance and memory-eﬃcient packet inspection strategy.
3.1 Separating Rules by Protocol Fields
An IDS has to match a large number of rules with each incoming packet. Snort
2.1.3 [2] is distributed with a set of 2, 059 attack rules. A rule may contain speciﬁc
values for protocol ﬁelds and a string matching predicate over the rest of the packet.
For example, a Snort rule that detects the Nimda exploit is shown below:
alert tcp EXTERNAL NET any -> HOME NET 139 (msg:‘‘NETBIOS nimda
.nws’’; content:‘‘|00|.|00|N|00|W|00|S";)
1 Diﬀerence in computing systems and rules not taken into account for rough discussion.
WIND: Workload-Aware INtrusion Detection
295
This rule matches a packet if the value of transport protocol ﬁeld is TCP, the
value in the source address ﬁeld matches the external network, the destination
address ﬁeld contains an address in the home network, the value of destination
TCP port ﬁeld is 139, and if the payload contains the string ‘‘|00|.|00|N|00|
W|00|S".
 0
 200
 400
 600
 800
 1000
 1200
 1400
 1600
avg. num. of rules rejected
CheckDstPort
CheckDstIp
CheckFromClient
CheckSrcPort
IcmpTypeCheck
CheckFromServer
CheckSrcIp
IcmpCodeCheck
CheckTcpFlags
IcmpIdCheck
CheckDsizeGT
CheckDsizeEq
IpIdCheckEq
IcmpSeqCheck
CheckTcpSeqEq
CheckTcpAckEq
TcpWinCheckEq
CheckFragBits
CheckIpOptions
CheckTtleq
CheckTtlGT
CheckDsizeLT
Fig. 1. Average number of rules (out of 2, 059) rejected by checking diﬀerent protocol
ﬁelds for the DARPA dataset (99-test-w4-thu)
A simple approach for evaluating multiple rules on an incoming packet is to check
each rule, one-by-one. However, this solution involves multiple passes over each
packet and is too costly to be deployed in a high-speed network. Therefore, the
evaluation of the rules should be parallelized as much as possible and evaluated in
only a few passes over the packet. To evaluate a protocol ﬁeld in the packet only
once, we need to pre-process rules and separate them by the values of the protocol
ﬁeld. Then, by checking the value of just one protocol ﬁeld, the applicable rules can
be selected. The advantage of separating rules by the protocol ﬁeld values is that a
large number of rules can be rejected in a single check. In Snort, the rules are pre-
processed and grouped by destination port and source port. The TCP ports of an
incoming packet are checked to determine the set of rules that must be considered
further, and all other rules are immediately rejected. The expected number of rules
that will be rejected by checking a protocol ﬁeld of an incoming packet depends
on two factors: the traﬃc characteristics and the rule characteristics. Consider an
input rule set with a large number of rules that check if the destination port is
80. Assuming that the rules are grouped together by the destination port, for a
packet not destined to port 80, a large number of port-80 rules will be rejected
296
S. Sinha, F. Jahanian, and J.M. Patel
immediately. If only a few packets are destined to port 80, then a large number of
rules will be rejected most of the time.
Figure 1 shows the number of rules that can be rejected immediately for an
incoming packet when rules are grouped by diﬀerent protocol ﬁelds. For this
ﬁgure, we used the 2, 059 rules that came with Snort 2.1.3 distribution and