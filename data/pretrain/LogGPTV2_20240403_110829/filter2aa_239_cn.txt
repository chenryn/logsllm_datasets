        "Vector can be treated as a collection")]
      [LastModified("10 Feb 2010", "IFormattable interface implemented " +
        "Vector accepts N and VE format specifiers")]
      public class Vector : IFormattable, IEnumerable
      {
        public Vector(double x, double y, double z)
        {
          X = x;
          Y = y;
          Z = z;
        }
        public Vector(Vector vector)
          : this (vector.X, vector.Y, vector.Z)
        {
        }
        public double X { get; }
        public double Y { get; }
        public double Z { get; }
        public string ToString(string format, IFormatProvider formatProvider)
        {
          //...
再把包含的VectorEnumerator类标记为new：
    [LastModified("6 Jun 2015",
      "Changed to implement the generic interface IEnumerator")]
    [LastModified("14 Feb 2010",
      "Class created as part of collection support for Vector")]
    private class VectorEnumerator : IEnumerator
    {
上面是这个示例的代码。目前还不能运行它，因为我们只有两个库。在描述了反射的
工作原理后，就介绍这个示例的最后一部分，从中可以查看和显示这些特性。
16.3 反射
本节先介绍System.Type类，通过这个类可以访问关于任何数据类型的信息。然后简
要介绍System.Reflection.Assembly类，它可以用于访问给定程序集的相关信息，或者把这
个程序集加载到程序中。最后把本节的代码和上一节的代码结合起来，完成
WhatsNewAttributes示例。
16.3.1 System.Type类
这里使用Type类只为了存储类型的引用：
    Type t = typeof(double);
我们以前把Type看作一个类，但它实际上是一个抽象的基类。只要实例化了一个
Type对象，实际上就实例化了Type的一个派生类。尽管一般情况下派生类只提供各种
Type方法和属性的不同重载，但是这些方法和属性返回对应数据类型的正确数据，Type
有与每种数据类型对应的派生类。它们一般不添加新的方法或属性。通常，获取指向任何
给定类型的Type引用有3种常用方式：
● 使用C#的typeof运算符，如上述代码所示。这个运算符的参数是类型的名称（但不
放在引号中）。
● 使用GetType（）方法，所有的类都会从System.Object继承这个方法。
        double d = 10;
        Type t = d.GetType();
在一个变量上调用GetType（）方法，而不是把类型的名称作为其参数。但要注意，
返回的Type对象仍只与该数据类型相关：它不包含与该类型的实例相关的任何信息。如
果引用了一个对象，但不能确保该对象实际上是哪个类的实例，GetType方法就很有用。
● 还可以调用Type类的静态方法GetType（）：
      Type t = Type.GetType("System.Double");
Type是许多反射功能的入口。它实现许多方法和属性，这里不可能列出所有的方法
和属性，而主要介绍如何使用这个类。注意，可用的属性都是只读的：可以使用Type确
定数据的类型，但不能使用它修改该类型！
1. Type的属性
由Type实现的属性可以分为下述三类。首先，许多属性都可以获取包含与类相关的
各种名称的字符串，如表16-1所示。
表16-1
属性
返回值
Name
数据类型名
FullName
数据类型的完全限定名（包括名称空间名）
Namespace
在其中定义数据类型的名称空间名
其次，属性还可以进一步获取Type对象的引用，这些引用表示相关的类，如表16-2所
示。
表16-2
属性
返回对应的Type引用
BaseType
该Type的直接基本类型
UnderlyingSystemType
该Type在.NET运行库中映射到的类型（某些.NET基类实际
上映射到由IL识别的特定预定义类型）
许多布尔属性表示这种类型是一个类，还是一个枚举等。这些特性包括IsAbstract、
IsArray、IsClass、IsEnum、IsInterface、IsPointer、IsPrimitive（一种预定义的基元数据类
型）、IsPublic、IsSealed以及IsValueType。例如，使用一种基元数据类型：
    Type intType = typeof(int);
    WriteLine(intType.IsAbstract);      // writes false
    WriteLine(intType.IsClass);         // writes false
    WriteLine(intType.IsEnum);          // writes false
    WriteLine(intType.IsPrimitive);     // writes true
    WriteLine(intType.IsValueType);     // writes true
或者使用Vector类：
    Type vecType = typeof(Vector);
    WriteLine(vecType.IsAbstract);      // writes false
    WriteLine(vecType.IsClass);         // writes true
    WriteLine(vecType.IsEnum);          // writes false
    WriteLine(vecType.IsPrimitive);     // writes false
    WriteLine(vecType.IsValueType);     // writes false
也可以获取在其中定义该类型的程序集的引用，该引用作为
System.Reflection.Assembly类的实例的一个引用来返回：
    Type t = typeof (Vector);
    Assembly containingAssembly = new Assembly(t);
2．方法
System.Type的大多数方法都用于获取对应数据类型的成员信息：构造函数、属性、
方法和事件等。它有许多方法，但它们都有相同的模式。例如，有两个方法可以获取数据
类型的方法的细节信息：GetMethod（）和GetMethods（）。GetMethod（）方法返回
System.Reflection.MethodInfo对象的一个引用，其中包含一个方法的细节信息。
GetMethods（）返回这种引用的一个数组。其区别是GetMethods（）方法返回所有方法的
细节信息；而GetMethod（）方法返回一个方法的细节信息，其中该方法包含特定的参数
列表。这两个方法都有重载方法，重载方法有一个附加的参数，即BindingFlags枚举值，
该值表示应返回哪些成员，例如，返回公有成员、实例成员和静态成员等。
例如，GetMethods（）最简单的一个重载方法不带参数，返回数据类型的所有公共方
法的信息：
    Type t = typeof(double);
    foreach (MethodInfo nextMethod in t.GetMethods())
    {
        // etc.
    }
Type的成员方法如表16-3所示，遵循同一个模式。注意名称为复数形式的方法返回一
个数组。
表16-3
返回的对象类型
方法
ConstructorInfo
GetConstructor（）, GetConstructors（）
EventInfo
GetEvent（）, GetEvents（）
FieldInfo
GetField（）, GetFields（）
MemberInfo
GetMember（）, GetMembers（）, GetDefaultMembers（）
MethodInfo
GetMethod（）, GetMethods（）
PropertyInfo
GetProperty（）, GetProperties（）
GetMember（）和GetMembers（）方法返回数据类型的任何成员或所有成员的详细
信息，不管这些成员是构造函数、属性和方法等。
16.3.2 TypeView示例
下面用一个短小的示例TypeView来说明Type类的一些功能，这个示例可以用来列出
数据类型的所有成员。本例主要说明对于double型TypeView的用法，也可以修改该样例中
的一行代码，使用其他的数据类型。
运行应用程序的结果输出到控制台上，如下：
    Analysis of type Double
      Type Name: Double
      Full Name: System.Double
      Namespace: System
      Base Type: ValueType
    public members:
      System.Double Method IsInfinity
      System.Double Method IsPositiveInfinity
      System.Double Method IsNegativeInfinity
      System.Double Method IsNaN
      System.Double Method CompareTo
      System.Double Method CompareTo
      System.Double Method Equals
      System.Double Method op_Equality
      System.Double Method op_Inequality
      System.Double Method op_LessThan
      System.Double Method op_GreaterThan
      System.Double Method op_LessThanOrEqual
      System.Double Method op_GreaterThanOrEqual
      System.Double Method Equals
      System.Double Method GetHashCode
      System.Double Method ToString
      System.Double Method ToString
      System.Double Method ToString
      System.Double Method ToString
      System.Double Method Parse
      System.Double Method Parse
      System.Double Method Parse
      System.Double Method Parse
      System.Double Method TryParse
      System.Double Method TryParse
      System.Double Method GetTypeCode
      System.Object Method GetType
      System.Double Field MinValue
      System.Double Field MaxValue
      System.Double Field Epsilon
      System.Double Field NegativeInfinity
      System.Double Field PositiveInfinity
      System.Double Field NaN
控制台显示了数据类型的名称、全名和名称空间，以及底层类型的名称。然后，它迭
代该数据类型的所有公有实例成员，显示所声明类型的每个成员、成员的类型（方法、字
段等）以及成员的名称。声明类型是实际声明类型成员的类的名称（例如，如果在
System.Double中定义或重载它，该声明类型就是System.Double，如果成员继承自某个基
类，该声明类型就是相关基类的名称）。
TypeView不会显示方法的签名，因为我们是通过MemberInfo对象获取所有公有实例
成员的详细信息，参数的相关信息不能通过MemberInfo对象来获得。为了获取该信息，
需要引用MemberInfo和其他更特殊的对象，即需要分别获取每一种类型的成员的详细信
息。
TypeView示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Reflection
    System.Text
    static System.Console
TypeView会显示所有公有实例成员的详细信息，但对于double类型，仅定义了字段和
方法。下面列出TypeView的代码。开始时需要添加几条using语句：
    using System;
    using System.Reflection;
    using System.Text;
    using static System.Console;
需要System.Text的原因是我们要使用StringBuilder对象构建文本。全部代码都放在
Program一个类中，这个类包含两个静态方法和一个静态字段，StringBuilder的一个实例称
为OutputText, OutputText用于创建在消息框中显示的文本。Main（）方法和类的声明如下
所示：
    class Program
    {
      private static StringBuilder OutputText = new StringBuilder();
      static void Main()
      {
        // modify this line to retrieve details of any other data type
        Type t = typeof(double);
        AnalyzeType(t);
        WriteLine($"Analysis of type {t.Name}");
        WriteLine(OutputText.ToString());
        ReadLine();
      }
实现的Main（）方法首先声明一个Type对象，来表示我们选择的数据类型，再调用
方法AnalyzeType（）, AnalyzeType（）方法从Type对象中提取信息，并使用该信息构建
输出文本。最后在控制台中显示输出。这些都由AnalyzeType（）方法来完成：
    static void AnalyzeType(Type t)
    {
      TypeInfo typeInfo = t.GetTypeInfo();
      AddToOutput($"Type Name: {t.Name}");
      AddToOutput($"Full Name: {t.FullName}");
      AddToOutput($"Namespace: {t.Namespace}");
      Type tBase = t.BaseType;
      if (tBase ! = null)
      {
        AddToOutput($"Base Type: {tBase.Name}");
      }
      AddToOutput("\npublic members:");
      foreach (MemberInfo NextMember in t.GetMembers())
      {
    #if DNXCORE
        AddToOutput($"{member.DeclaringType} {member.Name}");
    #else
        AddToOutput($"{member.DeclaringType} {member.MemberType} {member.Name}");
    #endif
      }
    }
实现AnalyzeType（）方法，仅需要调用Type对象的各种属性，就可以获得我们需要
的类型名称的相关信息，再调用GetMembers（）方法，获得一个MemberInfo对象的数
组，该数组用于显示每个成员的信息。注意，这里使用了一个辅助方法
AddToOutput（），该方法创建要显示的文本：
    static void AddToOutput(string Text)
    {
      OutputText.Append("\n" + Text);
    }
16.3.3 Assembly类
Assembly类在System.Reflection名称空间中定义，它允许访问给定程序集的元数据，
它也包含可以加载和执行程序集（假定该程序集是可执行的）的方法。与Type类一样，
Assembly类包含非常多的方法和属性，这里不可能逐一论述。下面仅介绍完成
WhatsNewAttributes示例所需要的方法和属性。
在使用Assembly实例做一些工作前，需要把相应的程序集加载到正在运行的进程中。
为此，可以使用静态成员Assembly.Load（）或Assembly.LoadFrom（）。这两个方法的区
别是Load（）方法的参数是程序集的名称，运行库会在各个位置上搜索该程序集，试图
找到该程序集，这些位置包括本地目录和全局程序集缓存。而LoadFrom（）方法的参数
是程序集的完整路径名，它不会在其他位置搜索该程序集：
    Assembly assembly1 = Assembly.Load("SomeAssembly");
    Assembly assembly2 = Assembly.LoadFrom
      (@"C:\My Projects\Software\SomeOtherAssembly");
这两个方法都有许多其他重载版本，它们提供了其他安全信息。加载了一个程序集
后，就可以使用它的各种属性进行查询，例如，查找它的全名：
    string name = assembly1.FullName;
1．获取在程序集中定义的类型的详细信息
Assembly类的一个功能是它可以获得在相应程序集中定义的所有类型的详细信息，只
要调用Assembly.GetTypes（）方法，它就可以返回一个包含所有类型的详细信息的
System.Type引用数组，然后就可以按照上一节的方式处理这些Type引用：
    Type[] types = theAssembly.GetTypes();
    foreach(Type definedType in types)
    {
      DoSomethingWith(definedType);
    }
2．获取自定义特性的详细信息
用于查找在程序集或类型中定义了什么自定义特性的方法取决于与该特性相关的对象
类型。如果要确定程序集从整体上关联了什么自定义特性，就需要调用Attribute类的一个
静态方法GetCustomAttributes（），给它传递程序集的引用：
    Attribute[] definedAttributes =
      Attribute.GetCustomAttributes(assembly1);
      // assembly1 is an Assembly object
  注意： 这是相当重要的。以前你可能想知道，在定义自定义特性时，为什么
必须费尽周折为它们编写类，以及为什么Microsoft没有更简单的语法。答案就在于
此。自定义特性确实与对象一样，加载了程序集后，就可以读取这些特性对象，查看
它们的属性，调用它们的方法。
GetCustomAttributes（）方法用于获取程序集的特性，它有两个重载方法：如果在调
用它时，除了程序集的引用外，没有指定其他参数，该方法就会返回为这个程序集定义的
所有自定义特性。当然，也可以通过指定第二个参数来调用它，第二个参数是表示感兴趣