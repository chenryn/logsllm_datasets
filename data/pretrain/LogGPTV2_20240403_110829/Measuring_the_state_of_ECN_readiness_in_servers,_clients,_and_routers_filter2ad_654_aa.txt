title:Measuring the state of ECN readiness in servers, clients, and routers
author:Steven J. Bauer and
Robert Beverly and
Arthur W. Berger
Measuring the State of ECN Readiness in Servers, Clients,
and Routers
Steven Bauer
MIT CSAIL
PI:EMAIL
Robert Beverly
Naval Postgraduate School
PI:EMAIL
Arthur Berger
MIT CSAIL / Akamai
PI:EMAIL
ABSTRACT
Better exposing congestion can improve traﬃc management
in the wide-area, at peering points, among residential broad-
band connections, and in the data center. TCP’s network
utilization and eﬃciency depends on congestion informa-
tion, while recent research proposes economic and policy
models based on congestion. Such motivations have driven
widespread support of Explicit Congestion Notiﬁcation (ECN)
in modern operating systems. We reappraise the Internet’s
ECN readiness, updating and extending previous measure-
ments. Across large and diverse server populations, we ﬁnd
a three-fold increase in ECN support over prior studies. Us-
ing new methods, we characterize ECN within mobile infras-
tructure and at the client-side, populations previously un-
measured. Via large-scale path measurements, we ﬁnd the
ECN feedback loop failing in the core of the network 40% of
the time, typically at AS boundaries. Finally, we discover
new examples of infrastructure violating ECN Internet stan-
dards, and discuss remaining impediments to running ECN
while suggesting mechanisms to aid adoption.
Categories and Subject Descriptors
C.2.3 [Computer Communication Networks]: Network
Operations—network monitoring; C.2.1 [Computer Com-
munication Networks]: Network Architecture and Design
General Terms
ECN, Measurement, Experimentation
Keywords
Explicit Congestion Notiﬁcation, Router-Assisted Conges-
tion Control
1.
INTRODUCTION
The Internet’s traditional end-to-end approach to conges-
tion control, TCP, attempts to simultaneously optimize ef-
ﬁciency and fairness between traﬃc ﬂows[14]. Cooperating
end host TCPs must infer congestion via packet loss. As a
Copyright 2011 Association for Computing Machinery. ACM acknowl-
edges that this contribution was authored or co-authored by an employee,
contractor or afﬁliate of the U.S. Government. As such, the Government re-
tains a nonexclusive, royalty-free right to publish or reproduce this article,
or to allow others to do so, for Government purposes only.
IMC’11, November 2–4, 2011, Berlin, Germany.
Copyright 2011 ACM 978-1-4503-1013-0/11/11 ...$10.00.
distributed control problem, on the whole, TCP works re-
markably well and has scaled through orders of magnitude
speed increases. However, a large body of prior work recog-
nizes several shortcomings.
First, the TCP rate equation biases against particular
ﬂows, particularly those that are short-lived or with high de-
lay. Second, given the ubiquity of wireless devices, loss may
be an inappropriate congestion signal. Third, the TCP feed-
back control loop necessarily results in under-utilization and
oscillatory behavior (the TCP “sawtooth”). Finally, large
bandwidth-delay ﬂows are unable to fully utilize available
bandwidth as the bandwidth-probing is conservative [14].
A well-studied approach to congestion is active queue man-
agement. Routers along a path know precisely their buﬀer
occupancy and may signal an end host to slow its sending
rate in the face of incipient congestion, i.e. without induc-
ing packet loss. Explicit Congestion Notiﬁcation (ECN) is a
standardized TCP addition providing such feedback [24].
The beneﬁts of ECN are only realized when end-hosts
and routers support ECN. Today, equipment vendors largely
support ECN and all major operating systems (Windows,
Linux, OSX) support ECN. After more than a decade, much
of the Internet has the capability to leverage ECN. However,
few networks employ ECN and few devices at the edge ini-
tiate ECN connections.
The adoption of ECN may change given a renewed interest
in managing congestion (e.g. [12]). Recent work illustrates
how ECN may be leveraged to provide new Internet prim-
itives and semantics. In addition to IETF standards lever-
aging ECN [10, 23], the IETF congestion exposure (conex)
group is developing experimental standards that expose the
source and location of congestion along a path potentially
enabling new economic and billing models [7]. Among ser-
vice providers, congestion, rather than traﬃc volume, is a
potential alternative basis for interconnection and peering
agreements [8]. Similar arguments apply to using induced
congestion to bill and monitor residential broadband con-
nections rather than adopting volume caps [4].
Finally, managing congestion is increasingly important
within data centers and cloud providers. The common prac-
tice of partitioning a problem (e.g. web query) and aggre-
gating the results must be performed within stringent la-
tency requirements. Long-lived heavy bandwidth ﬂows ham-
per this ability by inducing large queues. Recent proposals
based on an analysis of real-world data center traﬃc rely on
ECN to better handle such workloads [2].
In light of recent system and infrastructure adoption of
ECN and the growing realization that ECN provides poten-
171tial beneﬁts to managing congestion [15], we perform large-
scale measurements to reappraise the Internet’s ability to
properly support ECN. Our primary contributions include:
1. An examination of ECN support among various server
populations, including updated measurements of a pre-
viously surveyed population [17, 22].
2. Analysis of millions of Internet paths to identify where
ECN fails or is mis-marked, and the implications for
congestion safety.
3. Case studies of infrastructure ECN misbehavior; im-
plications on deployment and protocol design.
4. A novel measurement of client-side, e.g. eyeball, ECN
support.
2. BACKGROUND
Explicit Congestion Notiﬁcation (ECN) [24, 26, 6] deﬁnes
an enhancement to TCP/IP that provides router-assisted
congestion control in the Internet. The fundamental idea is
to allow routers along a path, devices with explicit knowl-
edge of their output queue occupancy, to mark packets of
a TCP ﬂow. This mark is echoed back to the source TCP.
The source TCP thus receives notiﬁcation of incipient con-
gestion, allowing it to reduce congestion before loss occurs.
Mechanically, ECN adds two additional bits in the ﬂags
portion of the TCP header: ECN Echo (ECE) and Con-
gestion Window Reduced (CWR), and changes the original
semantics of the 8-bit type-of-service (ToS) ﬁeld in the IP
header. Instead of a byte of ToS, six bits are used for the
Diﬀerentiated Service Code Point while two remaining bits
encode three possible ECN states: no-ECN ‘00’, ECN Ca-
pable Transport (ECT) ‘10’ or ‘01’, and Congestion Expe-
rienced (CE) ‘11’. As shown in §4, legacy handling of these
bits as the old ToS ﬁeld is a frequent cause of ECN failure.
ECN capability is negotiated between TCP end-points by
setting the ECE and CWR ﬂags in the SYN and the ECE
ﬂag in the SYN/ACK of TCP’s three-way handshake. If ne-
gotiated, TCP sets ECT in the IP header of data segments.
Routers along the path may, in response to congestion, set
CE on packets marked as ECN capable with ECT. Upon re-
ceiving a segment with CE, a TCP sets ECE on all acknowl-
edgments until the source reduces its congestion window and
sets CWR.
ECN requires both TCPs and routers along an end-to-end
path of a ﬂow to support ECN. There are several points of
potential failure or misbehavior. In this paper, we examine
all of these points. In particular, we ask several questions:
1. What fraction of hosts successfully negotiate ECN?
2. When TCP negotiates ECN, is the connection marked
as ECN capable at the IP layer?
3. Do routers and/or middleboxes erroneously clear or set
congestion marks?
4. If a synthetic IP congestion signal (CE) is introduced,
is a corresponding TCP ECE observed?
5. If a synthetic TCP ECE is sent, is the corresponding
TCP CWR observed?
Previous measurement eﬀorts [17, 22] found little sup-
port for ECN: on the order of 2% of servers or less, and
an even smaller percentage of ﬂows with ECN apparently
enabled [19]. These results were not surprising as ECN was
turned oﬀ by default on most operating systems due to an
ECN blackhole problem. Of servers tested [22] in 2008, TCP
SYN packets with ECN set were silently dropped 0.56% of
the time. However, the recent widespread adoption of, and
support for, ECN in operating systems suggests that a reap-
praisal of previous studies is warranted. For instance, server-
mode ECN was introduced into the Linux kernel (2.6.29) in
2009, and enables ECN for incoming TCP connections that
indicate ECN capability. Thus, while ECN is ﬁnally part of
all major operating system TCP/IP stacks, it is being de-
ployed conservatively – clients must be explicitly conﬁgured
to initiate ECN for outgoing TCP connections, presenting a
challenge we address in §3.3.
Given the potential network impact of these widespread
changes, we reexamine and extend previous studies of ECN.
In addition to enhanced testing of all the ECN messages two
hosts can exchange, we also sought to test other parts of the
network for ECN readiness, not just popular web servers.
These include client-side (e.g. eyeball) networks such as res-
idential broadband networks and tests that provide insight
into the use of ECN by mobile devices. Mobile infrastruc-
ture is of interest not only because of the particular utility
of ECN in wireless environments, but also because operators
often control both the handset and network proxies.
3. METHODOLOGY
3.1 Server Testing
We measure three web server populations: 1) the top one
million web servers [1] as ranked by Alexa; 2) a collection
of approximately 7500 university and college web servers
identiﬁed by [11]; and 3) web servers that handle requests
from mobile devices (which we discuss separately below).
For each domain, we retrieve the complete web page (HTML
and all page resources hosted by the same domain) using a
client conﬁgured to initiate outgoing ECN connections. We
use the native TCP stack of the measurement host’s Linux
operating system to retrieve the resources. Using Linux’s
iptables ﬁrewall connection tracking and mangling rules we
artiﬁcially introduce all ECN signals.1 We simulate con-
gestion along the outgoing path by setting CE on all data
packets sent by the measurement host and we simulate con-
gestion along the incoming data path by reporting ECE to
the remote sender. Our implementation guarantees that all
data packets, including retransmissions, sent by our client
have CE set until ECE is heard. Similarly it guarantees ECE
is sent in response to all incoming data packets until CWR
is heard. If a server fails to respond to SYNs with ECN, we
retry the server with a non-ECN enabled SYN to identify
possible ECN blackholes. A beneﬁt of our implementation
is that we can easily test any application or service which
relies upon TCP – a feature we leverage to test additional
populations described below.
We capture all packets that occur during the exchange
and analyze the resulting trace. The analysis of whether or
not ECN is negotiated on a particular connection is straight-
forward – does the response SYN/ACK from the server have
the ECE ﬂag set. Next, we examine whether the ECN ca-
pable transport code point (ECT) is set in the IP header
of data packets for those ﬂows which negotiate ECN. Note,
re-transmitted packets and packets without data do not set
ECT. However, if no data packets are marked with ECT,
1See http://ecn.csail.mit.edu for full details.
172Table 1: Server population results; “-” indicates no data available
Year/Population
Hosts classiﬁed
ECN-capable
Not ECN-capable
Possible ECN blackhole
ECT in non-ECN ﬂow
no ECT in ECN ﬂow
no ECE for CE
no CWR for ECE
2004
80,498 (100%)
1,765 ( 2.2%)
78,733 (97.8%)
814 (1.0%)
-
758 ( 42%)
1,302 ( 1.6%)
-
2008
1,349,711 (100%)
14,407 ( 1.1%)
1,335,304 (98.9%)
7,627 (0.6%)
-
-
-
-
Alexa
541,885 (100%)
93,232 (17.2%)
448,653 (82.8%)
3293 (0.6%)
698 (0.15%)
5,598 ( 6.0%)
3,995 ( 4.3%)
55 ( 0.05%)
University
7563 (100%)
1061 (14.0%)
6,502 (86.0%)
37 ( 0.5%)
13 ( 0.2%)
302 (28.5%)
267 (25.2%)
0 ( 0.0%)
Mobile
3,591 (100%)
559 (15.6%)
3032 (84.4%)
5 ( 0.1%)
9 ( 0.3%)
63 (11.3%)