1 
TAKING WINDOWS 10 KERNEL EXPLOITATION TO THE NEXT LEVEL – LEVERAING WRITE-WHAT-WHERE 
VULNERABILITIES IN CREATORS UPDATE 
Morten Schenk PI:EMAIL 
Contents 
Abstract ............................................................................................................................................................. 2 
Background and Windows Kernel Exploitation History ..................................................................................... 3 
Kernel Read and Write Primitives ..................................................................................................................... 4 
Windows 10 Mitigations .................................................................................................................................... 7 
Windows 10 1607 Mitigations ........................................................................................................................... 8 
Revival of Kernel Read and Write Primitives ..................................................................................................... 8 
Windows 10 1703 Mitigations ......................................................................................................................... 12 
Revival of Kernel Read and Write Primitives Take 2 ....................................................................................... 14 
Kernel ASLR Bypass .......................................................................................................................................... 17 
Dynamic Function Location ............................................................................................................................. 22 
Page Table Randomization .............................................................................................................................. 23 
Executable Memory Allocation ....................................................................................................................... 25 
2 
Abstract 
Microsoft has put significant effort into mitigating and increasing the difficulty in exploiting vulnerabilities 
in Windows 10, this also applies for kernel exploits and greatly raises the bar. Most kernel exploits today 
require a kernel-mode read and write primitive along with a KASLR bypass. Windows 10 Anniversary 
Update and Creators Update has mitigated and broken most known techniques. 
As this paper shows it is possible, despite the numerous implemented changes and mitigations, to still 
make use of the bitmap and tagWND kernel-mode read and write primitives. Furthermore, KASLR bypasses 
are still possible due to design issues and function pointers in kernel-mode structures.  
KASLR bypasses together with kernel-mode read primitives allow for de-randomization of the Page Table 
base address, which allows for reuse of the Page Table Entry overwrite technique. Additionally, it is possible 
to hook kernel-mode function calls to perform kernel memory allocations of writable, readable and 
executable memory and retrieving the kernel address of that memory. Using this method overwriting Page 
Table Entries is not needed and any shellcode can be executed directly when it has been copied onto the 
newly allocated memory pages. 
The overall conclusion is that despite the increased number of mitigations and changes it is still possible to 
take advantage of Write-What-Where vulnerabilities in Creators Update to gain kernel-mode execution. 
3 
Background and Windows Kernel Exploitation History 
Kernel Exploitation has been on the rise in recent years, this is most likely a response to the increased 
security in popular user-mode applications like Internet Explorer, Google Chrome and Adobe Reader. Most 
of these major applications have implemented sandboxing technologies which must be escaped to gain 
control of the compromised endpoint. 
While sandboxing techniques are not as powerful on Windows 7, kernel exploits have an interest 
nonetheless, since they allow for privilege escalation. Leveraging kernel vulnerabilities on Windows 7 is 
considered rather simple, this is due to the lack of security mitigations and availability of kernel 
information.  
It is possible to gain information on almost any kernel object using API’s built into Windows. These include 
NtQuerySystemInformation1 and EnumDeviceDrivers2 which will reveal kernel drivers base address as well 
as many kernel objects or pool memory locations3. Using NtQuerySystemInformation it is quite simple to 
reveal the base address of ntoskrnl.exe 
Likewise, objects allocated on the big pool can also be found as described by Alex Ionescu4 
While having the addresses of kernel drivers and objects is only a small part of kernel exploitation, it is 
important. Another crucial factor is storing the shellcode somewhere and getting kernel-mode execution of 
it. On Windows 7 the two easiest ways of storing the shellcode was to either allocate executable kernel 
memory with the shellcode in place or by using user memory but executing it from kernel-mode. 
Allocating executable kernel memory with arbitrary content can on Windows 7 be done using CreatePipe 
and WriteFile5, since the content is stored on the NonPagedPool which is executable 
1 https://msdn.microsoft.com/en-us/library/windows/desktop/ms724509(v=vs.85).aspx 
2 https://msdn.microsoft.com/en-us/library/windows/desktop/ms682617(v=vs.85).aspx 
3 https://recon.cx/2013/slides/Recon2013-Alex%20Ionescu-
I%20got%2099%20problems%20but%20a%20kernel%20pointer%20ain't%20one.pdf 
4 http://www.alex-ionescu.com/?p=231 
5 http://www.alex-ionescu.com/?p=231 
4 
Gaining kernel-mod execution can be achieved by either overwriting the bServerSideWindowProc bit of a 
kernel-mode Window object. This causes the associated WProc function to be executed by a kernel thread 
instead of a user-mode thread. A different way is by overwriting a function pointer in a virtual table, a very 
commonly used one is HalDispatchTable in ntoskrnl.exe. 
Windows 8.1 introduced several hardening initiatives, which resulted in increasing the difficulty of kernel 
exploitation. To start with the kernel leaking API’s like NtQuerySystemInformation are blocked if called 
from low integrity, which is the case when the application is running inside a sandbox. Windows 8.1 also 
made the use of non-executable memory in the kernel widespread, NonPagedPool memory was generally 
replaced with NonPagedPoolNx memory. Finally, Windows 8.1 introduced Supervisor Mode Execution 
Prevention (SMEP), which blocks execution of code from user-mode addresses from a kernel-mode context. 
These mitigations stop most exploitation techniques which are known in Windows 7, however exploitation 
is still very much possible, it does require new techniques however. Windows 10 has the same mitigations 
in place. The two first editions of Windows 10, which are called Windows 10 1507 and 1511 do not have 
any additional mitigations in place however. 
Kernel Read and Write Primitives 
To overcome the mitigations put in place in Windows 8.1 and Windows 10, the concept of memory read 
and write primitives known from user-mode browser exploits were adapted into kernel exploitation. Two 
kernel-mode read and write primitives are the most popular and mostly used. These are coined bitmap 
primitive and tagWND primitive. 
The bitmap primitive makes use of the GDI object Bitmap, which in kernel-mode is called a Surface object. 
The principle is to perform allocations of these Surface objects using CreateBitmap such that two bitmap 
objects are placed next to each other. When this is the case a Write-What-Where vulnerability may be used 
to modify the size of the first Surface object. The size of a Surface object is controlled by the sizlBitmap field 
which is at offset 0x38 of the object, it consists of the bitmaps dimensions defined by a DWORD each. 
When the size of the bitmap has been increased it is possible to use the API’s SetBitmapBits and 
GetBitmapBits to modify the second Surface object6. The field modified is the pointer which controls where 
the bitmap content is stored. This allows both read and write capabilities at arbitrary kernel memory 
locations. The read and write functionality can be implemented as shown below: 
6 https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives 
5 
To perform the overwrite using a Write-What-Where vulnerability requires knowledge of where the 
Surface object is in kernel-mode. Since this must also work from Low Integrity API’s like 
NtQuerySystemInformation cannot be used. It is however possible to find the address of the Surface object 
through the GdiSharedHandleTable structure which is held by the Process Environment Block. The 
GdiSharedHandleTable is a structure containing all GDI objects, including Surface objects. Using the handle 
to the user-mode bitmap object it is possible to look up the correct entry in the table, where the kernel-
mode address of the Surface object is given. 
The second read and write kernel-mode primitive was the tagWND. It uses a similar technique to the 
bitmap read and write primitive, by allocating two Windows, which has corresponding kernel-mode objects 
called tagWND. These tagWND objects must also be located next to each other.  
A tagWND object may contain a variable size field called ExtraBytes, if the size of this field, which is called 
cbWndExtra, is overwritten then it is possible to modify the next tagWND object. Using the 
SetWindowLongPtr API it is now possible to modify arbitrary fields of the following tagWND object, 
specifically the StrName field, which specifies the location of the title name of the Window. Using the user-
mode API’s InternalGetWindowText and NtUserDefSetText it is possible to perform read and write 
operations at arbitrary kernel memory addresses7. 
A write primitive may be implemented as shown below: 
7 https://www.blackhat.com/docs/eu-16/materials/eu-16-Liang-Attacking-Windows-By-Windows.pdf 
6 
Just like with the bitmap read and write primitive, the location of the tagWND object must be known. This 
is possible using the UserHandleTable presented by the exportable structure called gSharedInfo located in 
User32.dll. It contains a list of all objects located in the Desktop Heap in kernel-mode, having the handle of 
the user-mode Window object allows a search through the UserHandleTable, which reveals the kernel-
mode address of the associated tagWND object. An implementation is shown below: 
To overcome the issue of non-executable kernel memory a technique called Page Table Entry overwrite has 
become very common. The idea is to allocate shellcode at a user-mode address, resolve its corresponding 
Page Table Entry and overwrite it. The Page Table contains the metadata of all virtual memory, including 
bits indicating whether the memory page is executable or not and whether it is kernel memory or not. 
Leveraging the kernel-mode write primitive against a Page Table Entry for an allocated page allows for 
modification of execution status and kernel-mode status. It is possible to turn user-mode memory into 
kernel-mode memory in regards to SMEP allowing for execution. The base address of the Page Tables is 
static on Windows 8.1 and Windows 10 1507 and 1511 and the address of the Page Table Entry may be 
found using the algorithm below 
Performing an overwrite can also turn non-executable kernel memory into executable kernel memory 
7 
Windows 10 Mitigations 
Once executable kernel-mode memory has been created gaining execution may be performed by the same 
methods as on Windows 7.  
In many instances, the base address of ntoskrnl.exe is needed, previously this was done using 
NtQuerySystemInformation, but since that is no longer possible a very effective way is to use the HAL 
Heap8. This was in many cases allocted at a static address and contains a pointer into ntoskrnl.exe at offset 
0x448. Using the kernel-mode read primitive to read the content at address 0xFFFFFFFFFD00448 yields a 
pointer into ntoskrnl.exe, this may then be used to find the base address of the driver by looking for the MZ 
header, as shown below 
This concludes the brief history of kernel exploitation from Windows 7 up to Windows 10 1511. 
8 https://www.coresecurity.com/blog/getting-physical-extreme-abuse-of-intel-based-paging-systems-part-3-windows-
hals-heap 
8 
Windows 10 1607 Mitigations 
Windows 10 Anniversary Update, which is also called Windows 10 1607 introduced additional mitigations 
against kernel exploitation. First, the base address of Page Tables is randomized on startup, making the 
simple translation of memory address to Page Table Entry impossible9. This mitigates the creation of 
executable kernel-mode memory in many kernel exploits.  
Next the kernel-mode address of GDI objects in the GdiSharedHandleTable were removed. This means that 
it is no longer possible to use this method to locate the kernel-mode address of the Surface objects, which 
in turn means that it is not possible to overwrite the size of a Surface object, breaking the bitmap kernel-
mode read and write primitive.  
Finally, the strName field of a tagWND object must contain a pointer which is inside the Desktop Heap 
when being used by InternalGetWindowText and NtUserDefSetText10. This limits it usage since it can no 
longer be used to read and write at arbitrary kernel-mode address.  
Revival of Kernel Read and Write Primitives 
This section goes into the mitigations which break the kernel-mode read and write primitives. The first 
primitive to be examined is the bitmap primitive. The issue to be resolved is how to find the kernel-mode 
address of the Surface object. If the Surface object has a size of 0x1000 or larger it is in the Large Paged 
Pool. Furthermore, if the Surface object has a size of exactly 0x1000 the Surface objects will be allocated to 
individual memory pages.  
Allocating many Surface objects of size 0x1000 will cause them to be allocated to consecutive memory 
pages. This makes sure that locating one Surface object will reveal several Surface objects, which is needed 
for the kernel-mode read and write primitive. The Large Paged Pool base address is randomized on startup, 
which requires a kernel address leak. 
Inspecting the Win32ThreadInfo field of the TEB shows 
It turns out the pointer is exactly the address leak we need, since the base address of the Large Paged Pool 
can be found from it by removing the lower bits. If very large Surface objects are created they will give a 
predictable offset from the base address, this may be done as seen below 
9 https://www.blackhat.com/docs/us-16/materials/us-16-Weston-Windows-10-Mitigation-Improvements.pdf 
10 https://blogs.technet.microsoft.com/mmpc/2017/01/13/hardening-windows-10-with-zero-day-exploit-mitigations/ 
9 
Using the static offset 0x16300000 will turn the Win32ThreadInfo pointer into an information leak of the 
Surface object as shown below 
Inspecting the memory address given by the leakPool function after allocating the large Surface objects 
shows 
While this does point into the Surface object, it is only the data content of the object. It turns out that it will 
almost always be the second Surface object, if that is deleted and the freed memory space is reallocated by 
Surface objects which take up exactly 0x1000 bytes. This is done by allocating close to 10000 Surface 
objects as seen below 
Inspecting the memory address given by the address leak will now reveal a Surface object as seen below 
10 
By exploiting a Write-Where-What vulnerability the size of the Surface can be modified since the size is now 
at a predictable address. 
The second issue is the mitigation of the tagWND kernel-mode read and write primitive. The strName 
pointer of tagWND can only point inside the Desktop Heap when it is used through InternalGetWindowText 
and NtUserDefSetText. This limitation is enforced by a new function called DesktopVerifyHeapPointer as 
seen below 
The strName pointer which is in RDX is compared with the base address of the Desktop Heap as well as the 
maximum address of the Desktop Heap. If either of these comparisons fail a BugCheck occur. While these 
checks cannot be avoided the Desktop Heap addresses come from a tagDESKTOP object. The pointer for 
the tagDESKTOP object is never validated and is taken from the tagWND object. The structure of the 
tagWND concerning the tagDESKTOP is seen below 
11 
The tagDESKTOP object used in the comparison is taken from offset 0x18 of the tagWND object. When 
SetWindowLongPtr is used to modify the strName pointer, it is also possible to modify the tagDESKTOP 
pointer. This allows for creating a fake tagDESKTOP object as seen below 
This allows the exploit to supply a fake Desktop Heap base and maximum address which is just below and 
above the pointer dereferenced by strName. This can be implemented as shown below 
Using the modification discussed in this section allows the continued use of both the bitmap and the 
tagWND kernel-mode read and write primitives.  
12 
Windows 10 1703 Mitigations 
Windows 10 Creators Update or Windows 10 1703 introduce further mitigations against kernel 
exploitation. The first mitigation is directed against the tagWND kernel-mode read and write primitive. This 
is performed in two ways, first the UserHandleTable from the gSharedInfo structure in User32.dll is 
changed. The previous kernel-mode addresses of all objects in the Desktop Heap is removed as seen below. 
First the Windows 10 1607 UserHandleTable is shown 
Then for Windows 10 1703 
Like the removal of kernel-mode addresses in GdiSharedHandleTable in Windows 10 1607, this removal of 
kernel-mode addresses in UserHandleTable removes the possibility of locating the tagWND object. The 
second change is modification of SetWindowLongPtr, any ExtraBytes written are no longer located in 
kernel-mode. As shown below the ExtraBytes pointer is taken at offset 0x180 from the beginning of the 
tagWND object. 
Inspecting registers at the point of write shows the value in R14 of 0xFFFFF78000000000 to be written to 
the address in RCX, which is an address in user-mode 
13 
This clearly breaks the primitive since the strName field of the second tagWND can no longer be modified. 
There are two additional changes in Creators Update, the first, which is a minor change, modifies the size of 