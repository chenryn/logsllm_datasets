uid-setting system calls was discovered by a combina-
tion of manual inspection of kernel source code and for-
mal methods. We will defer discussion of the latter until
Section 6.
4.2 BSD kept the real uid and effective uid but changed
the system call from setuid to setreuid. Processes could
then directly control both their user IDs, under the fol-
lowing rules:
The POSIX Speciﬁcation To understand the seman-
tics of the uid-setting system calls, we begin with the
POSIX standard, which has inﬂuenced the design of the
system calls in many systems. In particular, the behavior
of setuid(newuid) is deﬁned by the POSIX speciﬁcation.
See Figure 1 for the relevant text.
The POSIX standard refers repeatedly to the term ap-
propriate privileges, which is deﬁned in Section 2.3 of
POSIX 1003.1-1988 as:
An implementation-deﬁned means of associ-
ating privileges with a process with regard to
the function calls and function call options de-
ﬁned in this standard that need special privi-
leges. There may be zero or more such means.
Essentially, the term appropriate privilege serves as a
wildcard that allows compliant operating systems to
use any policy whatsoever for deeming when a call
to setuid should be allowed.
The conditional ﬂag
{ POSIX SAVED IDS} parametrizes the speciﬁcation,
allowing POSIX-compatible operating systems to use ei-
ther of two schemes (as described in Figure 1). We will
see how different interpretations of the term appropriate
privilege have led to considerable differences in the be-
havior of the uid-setting system calls between operating
systems.
5.1 Operating System-Speciﬁc Differences
Much of the confusion is caused by different interpreta-
tions of appropriate privileges among Unix systems.
Solaris
In Solaris 8, a System V based system, a
process is considered to have appropriate privileges
if its effective uid is zero (root). Also, Solaris de-
ﬁnes { POSIX SAVED IDS}. Consequently, calling se-
tuid(newuid) sets all three user IDs to newuid if the ef-
fective uid is zero, but otherwise sets only the effective
uid to newuid (if the setuid call is permitted).
FreeBSD FreeBSD 4.4 interprets appropriate privi-
leges differently, as noted in Appendix B4.2.2 of POSIX:
The behavior of 4.2BSD and 4.3BSD that al-
lows setting the real ID to the effective ID is
viewed as a value-dependent special case of
appropriate privilege.
This means that a process is deemed to have ap-
propriate privileges when it calls setuid(newuid) with
If { POSIX SAVED IDS} is deﬁned:
1. If the process has appropriate privileges, the se-
tuid() function sets the real user ID, effective user
ID, and the [saved user ID] to newuid.
2. If the process does not have appropriate privi-
leges, but newuid is equal to the real user ID or
the [saved user ID], the setuid() function sets the
effective user ID to newuid; the real user ID and
[saved user ID] remain unchanged by this func-
tion call.
Otherwise:
1. If the process has appropriate privileges, the se-
tuid() function sets the real user ID and effective
user ID to newuid.
2. If the process does not have appropriate privi-
leges, but newuid is equal to the real user ID,
the setuid() function sets the effective user ID to
newuid; the real user ID remains unchanged by
this function call.
(POSIX 1003.1-1988, Section 4.2.2.2)
Figure 1: An excerpt from the POSIX speciﬁcation [5]
covering the behavior of the setuid system call.
newuid=geteuid(), in addition to when its effective uid is
zero. Also in contrast to Solaris, FreeBSD does not de-
ﬁne { POSIX SAVED IDS}, although every FreeBSD
process does have a saved uid. Therefore, by calling se-
tuid(newuid), a process sets both its real uid and effective
uid to newuid if the system call is permitted, in agree-
ment with POSIX. FreeBSD also sets the saved uid in all
permitted setuid calls.
Linux Linux introduces a capability2 model for ﬁner-
grained control of privileges.
Instead of a single level
of privilege determined by the effective uid (i.e., root or
non-root), there are a number of capability bits each of
which is used to determine access control to certain re-
sources3. One of them, the SETUID capability, carries
the POSIX appropriate privileges. To make the new ca-
2Beware: the word “capability” is a bit of a misnomer. In this con-
text, it refers to special privileges that a process can possess, and not
to the usual meaning in the security literature of an unforgeable refer-
ence. Regrettably, the former usage comes from the POSIX standard
and seems to be in common use, and so we follow their convention in
this paper.
3More accurately, a Linux process has three sets of capabilities, but
only the set of effective capabilities determine access control. All ref-
erences to capabilities in this paper refer to the effective capabilities.
pability model compatible with the traditional user ID
model where appropriate privileges are carried by a zero
effective uid, the Linux SETUID capability tracks the ef-
fective uid during all uid-setting system calls: Whenever
the effective uid becomes zero, the SETUID capability
is set; whenever the effective uid becomes non-zero, the
SETUID capability is cleared.
However, the SETUID capability can be modiﬁed out-
side the uid-setting system calls. A process can clear
its SETUID capability, and a process with the SETP-
CAP capability can remove the SETUID capability of
other processes (but note that in Linux 2.4.18, no process
has or can acquire the SETPCAP capability, a change
that was made to close a security hole; see Section 7.1
for details). Therefore, explicitly setting or clearing the
SETUID capability changes the properties of uid-setting
systems calls.
5.2 Comparison among Uid-setting System
Calls
Next we compare and contrast the uid-setting system
calls and point out several unexpected properties and an
inconsistency in the handling of fsuid in the Linux ker-
nel.
setresuid()
setresuid has the clearest semantics among
the four uid-setting system calls. The permission check
for setresuid() is intuitive and common to all OSs: for the
setresuid() system call to be allowed, either the euid of
the process must be root, or each of the three parameters
must be equal to one of the three user IDs of the process.
As each of the real uid, effective uid, and saved uid is
set directly by setresuid, the programmer knows clearly
what to expect after the call. Moreover, the setresuid
call is guaranteed to have an all-or-nothing effect: if it
succeeds, all user IDs are changed, and if it fails, none
are; it will not fail after having changed some but not all
of the user IDs.
Note that while FreeBSD and Linux offer setresuid, So-
laris does not. However, Solaris does offer equivalent
functionality via the /proc ﬁlesystem. Any process can
examine its three user IDs, and a superuser process can
set any of them, in line with the traditional System V
notion of appropriate privilege.
seteuid()
It sets
the effective uid while leaving the real uid and saved
seteuid has also a clear semantics.
uid unchanged. However, when the current effective uid
is not zero, there is a slight difference in the permis-
sion required by seteuid among Unix systems. While
Solaris and Linux allow the parameter neweuid to be
equal to any of the three user IDs, FreeBSD only allows
neweuid to be equal to either the real uid or saved uid;
in FreeBSD, the effective uid is not used in the decision.
As a surprising result, seteuid(geteuid()), which a pro-
grammer might intuitively expect to be always permitted,
can fail in FreeBSD, e.g., when ruid=100, euid=200, and
suid=100.
setreuid() The semantics of setreuid is confusing. It
modiﬁes the real uid and effective uid, and in some
cases, the saved uid. The rule by which the saved uid
is modiﬁed is complicated. Furthermore, the permis-
sion required for setreuid differs among the three op-
erating systems.
In Solaris and Linux, a process can
always swap the real uid and effective uid by calling
setreuid(geteuid(), getuid()). In FreeBSD, however, se-
treuid(geteuid(), getuid()) sometimes fails, e.g., when
ruid=100, euid=200, and suid=100.
setuid() Although setuid is the only uid-setting sys-
tem call standardized in POSIX 1003.1-1988, it is also
the most confusing one. First, the required permission
differs among Unix systems. Both Linux and Solaris
require the parameter newuid to be equal to either the
real uid or saved uid if the effective uid is not zero. As
a surprising result, setuid(geteuid()), which a program-
mer might reasonably expect to be always permitted, can
fail in some cases, e.g., when ruid=100, euid=200, and
suid=100. On the other hand, setuid(geteuid()) always
succeeds in FreeBSD. Second, the action of setuid dif-
fers not only among different operating systems but also
between privileged and unprivileged processes. In So-
laris and Linux, if the effective uid is zero, a successful
setuid(newuid) call sets all three user IDs to newuid; oth-
erwise, it sets only the effective user ID to newuid. On
the other hand, in FreeBSD a successful setuid(newuid)
call sets all three user IDs to newuid regardless of the
effective uid.
setfsuid()
In Linux, each process has also an fsuid in
addition to its real uid, effective uid, and saved uid. The
fsuid is used for access control to the ﬁlesystem. It nor-
mally follows the effective uid unless when explicitly set
by the setfsuid system call. The Linux kernel tries to
maintain the invariant that the fsuid is zero only if at least
one of the real uid, effective uid, or saved uid is zero, as
by the egid in the setgid-like calls, but this is not how
it actually works. This misconception caused a mistake
in the manual page of setgid in Redhat Linux 7.2 (Sec-
tion 6.4.1).
In many Unix systems, a process has also a set of supple-
mentary group IDs which are modiﬁed by the setgroups
and initgroups calls. They are not closely related to the
topic of this paper and will not be discussed.
6 Formal Models
We initially began developing the summary in the previ-
ous section by manually reading operating system source
code. Although reading kernel sources is a natural
method to study the semantics of the uid-setting sys-
tem calls, it has many serious limitations. First, it is
a laborious task, especially when various Unix systems
implement the system calls differently. Second, since
our ﬁndings are based on current kernel sources, they
may become invalid should the implementation change
in the future. Third, we cannot prove that our ﬁndings
are correct and that we have not misunderstood kernel
sources. Finally, informal speciﬁcations are not well-
suited to programmatic use, such as automated veriﬁ-
cation of properties of the operating system or use in
static analysis of application programs to check proper
usage of the uid-setting system calls. These problems
with manual source code analysis motivate the need for
more principled methods for building a formal model of
the uid-setting system calls.
6.1 Building a Formal Model
Figure 2: The call sequence shows that the invariant that
the fsuid is zero only if at least one of the ruid, euid, or
suid is zero is violated in Linux. In the ﬁgure, x repre-
sents a non-zero user ID.
manifested in the comment in a source ﬁles. The ratio-
nale is that once a process has dropped root privilege in
each of its real uid, effective uid, and saved uid, the pro-
cess cannot have any leftover root privilege in the fsuid.
Since the fsuid is Linux speciﬁc, this invariant allows a
cross-platform application that is not aware of the fsuid
to securely drop all privileges.
Unfortunately, we discovered that this invariant may be
violated due to a bug in the kernel up to the latest version
of Linux (2.4.18, as of this writing). The bug is that while
every successful setuid and setreuid call sets the fsuid to
the effective uid, a successful setresuid call will fail to
do the same if the effective uid does not change during
the call 4. This causes the call sequence in Figure 2 to
violate the invariant. The bug has been conﬁrmed by the
Linux community. Section 6.4.3 will describe how we
discovered this bug using a formal model.
setgid() and relatives There are also a set of calls
for manipulating group IDs, namely, setgid, setegid, se-
tregid, and setresgid. They behave much like their se-
tuid counterpart, with only one minor exception (the per-
mission check in setregid differs slightly from setreuid
in Solaris). However, the appropriate privileges are al-