eter, which can be found in Table 2. In this attack, the frequency
of attacker core is 0.42GHZ and victim core has a frequency of
2.65GHZ. From the experiment results, we can observe that it is
more likely to succeed when the glitch voltage is 0.6V and the dura-
tion is 4100 NOP loops. We then obtain the distributions of modified
bytes in the input of the eighth round by conducting VoltJockey
to acquire the AES key for 200 times with the attack parameter of
{Fa = 0.42GHZ, Fv = 2.65GHZ, Vl = 0.6V , Vb = 1.055V , Tw =
0, Tp = 48132, Td = 4100}. The distributions of modified bytes are
illustrated with the yellow bar in Figure 9. We can see that the byte
errors obtained by certain parameters are relatively stable.
5.3 Secure World Attack
TrustZone core uses the same physical core as the application core,
and therefore is also vulnerable to the threats from VoltJockey like
normal world. System users cannot specify a customized program
to be executed in TrustZone, even privileged managers. In this
study, we utilize the vulnerability described in [31] to execute AES
in the TrustZone and regain the attacking parameters to perform
attacks.
Inserting AES into TrustZone. As with the normal world that
5.3.1
contains a general OS, Qualcomm provides a secure environment
operating system (QSEOS) for supplying several security services
to normal applications by means of system-calls. QSEOS does not
trust any information provided by procedures outside TrustZone
and always authenticates it. However, the system-call vulnerability
in [31] exposes risks for attackers to escalate privilege, and then
execute arbitrary codes in TrustZone. We develop shellcodes based
on our AES program and combine it with the exploit codes of the
vulnerability [31] to push AES instructions into the code cave of
widevine trustlet, which is a digital rights management application.
When the exploit codes are performed, the execution flow of Trust-
Zone will jump to the code cave to execute the AES encryption
function.
5.3.2 Waiting time for the victim function. The exploit codes em-
ploy several memory probes to trigger the vulnerability and the
number of memory probes is uncertain. Therefore, attacking AES
running in TrustZone requires to wait for the start of AES. Re-
garding the execution time from the start of exploit codes to the
start of AES in a specific run as the waiting time for the victim
function is incorrect. However, once the vulnerability is activated,
the execution of exploit codes is considerably stable. We monitor
the execution time from the function call that invokes the injected
codes to the start of AES with different victim core frequencies and
depict the experimental results with the green curve in Figure 10.
Figure 10: The waiting time for AES and RSA in TrustZone.
In this experiment, the frequency of attacker core is 0.42GHZ
and the core voltage is 0.6V .
5.3.3 Attacking parameters. Although TrustZone adds some security-
enhanced mechanisms and always checks an operation before it is
performed, these measures are actually implemented in hardware
and have negligible influences on the execution time of trustlets.
Therefore, the attacking parameters in the normal world will be
operative for breaking AES executed in TrustZone. In order to keep
0246810121416Fault Location0255075100125150175Occurrence Number00001840001000200105418480408110700602Normal worldTrustZone5001000150020002500Frequency (MHZ)05001000150020002500Waiting time (K Loop cycles)Waiting time for AES in TrustZoneWaiting time for RSA in TrustZoneSession 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom203the integrity of AES in TrustZone, we utilize the cache side channel
attacks to continually check the state matrix.
5.3.4 Performing attack. We select the attacking parameters as
them in the normal world attack to steal the encryption key and
shows the success ratio in Table 2. The experiment on {Fa =
0.42GHZ, Fv = 2.65GHZ, Vl = 0.65V , Vb = 1.055V , Tw = 7680, Tp =
48132, Td = 4200} indicates that the success rate is about 5%, which
is an acceptable value.
We examine the one-byte error distributions in the input of the
eighth round by stealing AES key for 200 times with the above
attacking parameters and illustrate them using the red bar in Figure
9. The byte errors are mainly concentrated on the tenth byte of state
matrix due to the same attacking conditions. The error locations
are not the same as those in the normal world because the working
mechanisms of TrustZone is different from the normal world. When
the error location is 10, it takes about 12 minutes to generate 1892
key hypotheses using differential fault analysis [43] with the laptop.
Besides, the laptop spends around 8 minutes to generate 1159 key
candidates when the fault location is 15. The two key hypotheses
only have one common value, which is the encryption key.
6 BREACHING RSA-BASED TRUSTZONE
AUTHENTICATION
In this section, we first provide the differential fault attack to the
RSA decryption algorithm based on the signature verification func-
tion of an Android library mincrypt [37] by faulting the public
modulus N . The attack makes it possible for the adversaries to re-
vise the decryption result into a desired one. Next, we demonstrate
the attack details of applying VoltJockey on RSA of the normal
world and TrustZone respectively.
6.1 RSA Decryption and the Differential Attack
As one of the first public-key cryptosystems, RSA is vastly deployed
on secure data transmissions, signature, and verification. However,
RSA is still vulnerable to differential fault attacks [3, 4, 12, 65].
Given ciphertext C, public modulus N , public exponent e, RSA
decrypts C to plaintext P through equation (2). Algorithm 1 shows
the RSA decryption function RSA_Decoding (the public exponent
e is limited to the widely used 65537 and 3) based on the Android
library, which is an optimized implementation of equation (2) uti-
lizing the Montgomery modular multiplication (function MonMul)
whose output is calculated by operating the two integer parameters
x and y, modulus N , and Montgomery radix r−1(modular inverse of
22048 (modulo N )) as: MonMul(x, y, N , r−1) ← x ∗ y ∗ r−1
mod N .
What should be mentioned is that Algorithm 1 applies a machine
word size radix n0inv (line 4) instead of r−1 to reduce the loop times
and computation complexity of function MonMul.
P = Ce(mod N)
(2)
MonMul takes advantages of little-endian data to speed-up the
multiplication operations. However, the input N and C are usually
big-endian data. RSA_Decoding utilizes the function EndianIn-
version to convert N (line 5) and C (line 6) into little-endian Nin
and Cin as well as transfer the little-endian multiplication result into
2 mod N )
Algorithm 1 The RSA decryption algorithm
Input: Ciphertext, C; Public modulus, N ; Public key, e
Output: Decoding plaintext, P
1: procedure RSA_Decoding(C, N , e)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end procedure
r ← 22048
R ← EndianInversion(r
n0inv ← 232 - ModuleInverse(N , 232)
Nin ← EndianInversion(N )
Cin ← EndianInversion(C)
Pin ← MonMul(Cin, R, Nin, n0inv)
Pin_temp ← Pin
for i ∈ [0, bitlen(e) − 1) do
Pin ← MonMul(Pin, Pin, Nin, n0inv)
end for
Pin ← MonMul(Pin, Pin_temp, Nin, n0inv)
Pin ← MonMul(Pin, 1, Nin, n0inv)
P ← EndianInversion(Pin)
return P
big-endian value as the decryption output (line 14). We append the
implementation of EndianInversion in Algorithm 2 in Appendix.
Our attack goal is to guide the RSA_Decoding to output a de-
sired plaintext P(m), which is usually the hash of malicious message
m in data verification applications. The tremendous computation
complexity of factorizing the public modulus N is the security guar-
antee for RSA. Therefore, damaging N is a useful method to change
the RSA behaviors. Function EndianInversion implements sev-
eral byte-level OR and shift operations on the input to achieve the
reversal of the input in machine word size. CLKscrew [65] proposes
to induce hardware faults into this function to fault N and control
the output. However, it requires the input r−1 (similar as n0inv) of
MonMul is calculated based on the faulted N . Nevertheless, n0inv
is computed before line 5 instead of after it in Algorithm 1. In this
work, we extend the CLKscrew [65] to achieve the differential fault
attack on Algorithm 1.
Similar with [65], we change N into Nm in line 5 and fabricate
′
m to get the desired plaintext P(m). Nm acts as the
ciphertext C
public modulus of the broken decryption function, it should be
factorable and can be factorized in finite time. The Pollard’s ρ al-
gorithm [44] can be used to factorize Nm with sufficiently small
factors of up to 60 bits. Besides, the Lenstra’s Elliptic Curve factor-
ization Method (ECM) is proposed to factorize a big number into
up to 270 bits factors [47]. Nm does not need to exactly have two
factors as traditional RSA algorithms and it sure will have multi-
ple factors in real attacks since it is changed with random bytes
errors. As long as it can be factorized, attackers can construct an
RSA key pair {Nm, dm, e} for the broken RSA_Decoding with the
Carmichael function [55]. Thus, they are able to encrypt P(m) to
get its ciphertext Cm with Cm = P(m)dm mod Nm, where dm is the
private key. When {Cm, Nm, e} is inputted into the RSA_Decoding,
the result Pin of MonMul in line 7 will be as equation 3.
Pin ← Cm ∗ (r
2
mod Nm) ∗ r
−1
m mod Nm
−1
m ∗ r)%Nm ≡ 1%Nm
where (r
(3)
Session 2A: Side Channels ICCS ’19, November 11–15, 2019, London, United Kingdom204′
If the broken RSA_Decoding decrypts the constructed input C
m
totally based on Nm and e, the output will be P(m) if and only if
′
m equals to Cm. However, as we can see from Algorithm 1, N is
C
used in line 3 and line 4, and thus is propagated to lines 7, 10, 12,
and 13 before being altered in line 5. Therefore, the computation
result P
of line 7 will be as equation 4 in real attacks.
′
in
′
in ← C
P
′
m ∗ (r
2
mod N) ∗ r
−1
where (r
mod Nm
−1 ∗ r)%N ≡ 1%N
(4)
′
in
If P
n0inv = (−1/N)%232
= Pin, which is shown in the equation (6). The r
equals to Pin and later MonMul is irrelevant to N , the
output of RSA_Decoding will be P(m). However, r−1
m is hard to be
equal with r−1 since Nm is different from N . Therefore, it is very
m if MonMul receives r−1 as one of the param-
′
tough to analyze C
eters. Luckily, Algorithm 1 is implemented based on n0inv instead
of r−1. n0inv is a machine word integer and means as equation 5.
(5)
If n0inv that is calculated based on Nm equals to it based on N ,
the function MonMul after line 5 will be irrespective to N . In this
situation, we can get the expected output P(m) by simply making
2, N , r−1
′
m , Pin,
P
in
′
and Nm are known values, it is convenient to calculate C
m.
−1
m mod Nm ≡ Pin mod Nm
(6)
In most situations, the injected hardware faults only influence
a small continuous part of N . We generate the possible Nm with
different lengths of continuous bits-errors and judge whether the
n0inv based on them equals with it based on N . Table 3 gives the
related data. For longer bits-error, it requires a mass of time to get
all of the possible Nm and we do not test them. However, as shown
in Table 3, for a specific Nm, it will have the same n0inv as N in a
very high possibility. We develop a tool to check whether a Nm can
be used in VoltJockey. Besides, we provide a tool to automatically
generate C
′
m with N , Nm, and desired P(m).
mod N) ∗ r
′
m ∗ (r
2
C
Table 3: The equal rate of n0inv based on N and possible Nm.
Len of bit-error
#Possible Nm
#Available Nm
#Equal ration(%)
8
4
7680 65280
7560 64260
98.44 98.44
12
696150
683880
98.24
16
8388480
8257410