to an
optimal attacker. We caution that it does not imply that for
any attacker there is no security loss. Rather it is easy to
give examples of password settings for which there exists
some attack that achieves a speed-up due to tolerance. This
attack, whatever it may be, cannot perform better than the
optimal one. Finding good analogs to OpChk and the free
correction theorem for non-optimal attackers is an interesting,
open research problem. We empirically investigate in the next
section the relative performance of some non-optimal attacks,
showing that these achieve no meaningful speed-up due to
typo tolerance.
VI. PRACTICAL TYPO-TOLERANT CHECKERS
AND THEIR SECURITY
heuristics to try to avoid balls with high aggregate mass;
these are directly inspired by the results regarding OpChk.
As we show experimentally, our checkers can achieve high
acceptance utility with minimal security degradation, and the
heuristics help reduce security loss even against adversaries
with exact knowledge of the probability distribution p. We
also investigate the security of these checkers against more
realistic adversaries that must themselves estimate the distri-
bution p. For these adversaries our results here suggest that
typo tolerance does not really help adversaries at all because
of the difﬁculty of getting estimates right.
The tolerant checkers. For the following, let ˜w denote the
input to the checker and ˆB( ˜w) the ball of potential passwords
to check as deﬁned by the set of correctors C for the checker.
Presented in increasing order of sophistication (and similarity
to OpChk), the checkers are:
• Check-always
construction (Chk-All): This
checker
checks all passwords in ˆB( ˜w). Among the three check-
ers presented here, it achieves the greatest acceptance
the largest potential security
utility—and, conversely,
degradation.
• Blacklist construction (Chk-wBL). This checker uses a
blacklist L of (ostensibly high-probability) passwords. It
checks ˜w and every other password w ∈ ˆB( ˜w) such that
w (cid:7)∈ L. Blacklisting in Chk-wBL aims to prune or elim-
inate non-singleton balls with high aggregate probability
(as OpChk does). In our experiments, we use for the
blacklist the 1,000 most popular passwords in RockYou,
although one could use other blacklists as well, such as
Twitter’s banned password list [4].6
• Approximately optimal construction (Chk-AOp). This
checker heuristically approximates OpChk. It estimates
the distribution p of passwords using the empirical dis-
tribution of the RockYou password leak, and the distri-
bution τ of typos using the empirical distribution learned
from our MTurk study (see Figure 2). We denote these
empirically derived distributions respectively by ˜p and ˜τ.
Chk-AOp computes B( ˜w) using the constraints used by
OpChk (see the last section), but under the empirical
distribution pair (˜p, ˜τ ), rather than the (generally un-
known) true distribution pair (p, τ ). We set q = 103
for our experiments with Chk-AOp. We note that for
the correction set sizes we consider, c ≤ 5, solving the
optimization problem is fast, as only 2c possibilities for
B( ˜w) must be considered.
In the previous section, we presented an optimal checker
OpChk that achieves the maximum acceptance utility that
is achievable with no loss in security (relative to optimal
attacker). Unfortunately, OpChk is hard in general to imple-
ment, as it requires exact knowledge of the distribution pair
(p, τ ), which is not practically obtainable in most settings.
Here, we explore checkers that do not rely on exact distri-
bution knowledge and are simple to implement. The ﬁrst tries
all corrections in some checker set. The latter two incorporate
We will investigate these checkers for typo correction sets
Ctop2 = {swc-all, swc-ﬁrst}, Ctop3 = Ctop2 ∪ {rm-last} and
Ctop5 = Ctop3 ∪ {rm-ﬁrst, n2s-last}. In terms of utility, we
know from the second Dropbox study (Section IV) the im-
provements obtained when using Chk-All with Ctop3. The other
two constructions will obtain slightly less utility due to the fact
that some corrections will not be checked.
6We emphasize that the blacklist is only used for typo corrections: we do
not assume users are restricted from registering blacklisted passwords.
810810
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
Our preliminary analysis, however, suggests that this utility
reduction will be slight: both strategies, by design, prevent
corrections only to popular passwords, which are rarely in-
duced by typos in the ﬁrst place (see Section III). For example,
we can simulate acceptance utility for a given checker as
deﬁned in Section V by letting p be deﬁned to be the RockYou
empirical distribution and τ to be the empirical frequencies
of typo types observed. Then for Ctop3 we have that
the
blacklist and approximately optimal strategies only reduce
utility by 0.03 percentage points and 0.08 percentage points,
respectively.7
Implementation considerations. The checkers above are
all easy to implement, but care must be taken to optimize
performance and ensure timing attacks do not arise. Generally,
each checker should ﬁrst run ExChk( ˜w) since this must
always be computed. If that fails, then a constant-time check
of the remainder of the ball should be performed. This involves
running ExChk for the maximum number of checks that could
occur for any ˜w, i.e., |C|. If implemented in this manner, timing
and other side-channels will only potentially leak that a user
made a typo, but nothing else about their password. Users
that correctly input their passwords experience no performance
degradation compared to existing systems.
If one instead does not use a constant time implementation,
for example just running a check for each string in B( ˜w), then
timing side channels will arise that leak partial information
about a user’s password. For example, checking a singleton
ball (which is induced by some inputs and not other inputs
for Chk-wBL and Chk-AOp) would be faster than checking
a ball with multiple passwords. Thus the side-channel would
reveal whether the user entered a high-probability password.
Security evaluation.
In the remainder of this section we
evaluate the security of our schemes against two types of
attacker:
(A) Exact-knowledge attackers: We start by evaluating
security of the constructions in the face of attackers that
(unrealistically) know the precise distribution from which
passwords are drawn. We will use a range of simulated
password distributions and adversarial query budgets.
(B) Estimating attackers: We will then turn to more re-
alistic attackers that do not have exact knowledge of
the password distribution. Our evaluations will show that
in this context an attacker attempting to take advantage
of tolerant checking, even when they know the precise
checker, can be quite error-prone: attackers can even do
worse than naive approaches that just guess the most
probable passwords in order.
Our approach for these analyses will be to utilize differ-
ent password leaks to simulate true password selection. We
will use the RockYou, phpBB, and Myspace leaks for these
7The absolute acceptance utilities for Ctop3 in these simulations are 0.9628,
0.9625, and 0.9620. But the low overall rate of typos in the MTurk experiments
means that exact checking here obtains 0.9564 acceptance utility already,
which is signiﬁcantly less than what is implied by our Dropbox measurements.
purposes. These leaks contain respectively the passwords of
more than 32 million, 255,421, and 41,545 users of three
different websites. Below when we say the RockYou, phpBB,
or Myspace distribution we mean sampling according to the
empirical distribution given by the indicated leak. Note that
this means for some analyses we will use RockYou both within
the designs of Chk-wBL and Chk-AOp as well as to test those
designs’ security, optimistically modeling that a “best-case”
estimate of the distribution is known to the checker. While
we could use a holdout set (sampled from RockYou without
replacement, for example) to be more realistic, we instead
simply perform analyses using the independent Myspace and
phpBB data sets and report all of them for completeness.
A. Security against exact-knowledge attackers
We will focus on the greedy success rate increase λgreedy
We now evaluate the security of our constructions against
attackers that have exact knowledge of the password distribu-
tion. Thus in this section we assume that the adversary knows
not only the exact functioning of the checker being used (i.e.,
what typos it corrects for any submitted password), but also the
precise distribution of passwords. The latter is a conservative
assumption. Attackers in practice will lack such knowledge
and we are therefore measuring worst-case security from this
point of view.
−λq
for various values of the query budget q. We will also report
on λq to put loss in context. To compute these values, we use
the RockYou, Myspace, and phpBB distributions as a stand-
ins to simulate a challenge distribution p. Since the optimal
attacker is assumed to know the distributions exactly, in the
exact checking setting she will simply guess the most probable
q passwords. Here λq is straightforwardly computable (just
sum the probabilities of the top q passwords in the challenge
distribution). In the typo-tolerant settings, the attacker will
construct a sequence of queries that achieves λgreedy
using the
algorithm given in Appendix E.
q
q
We start by comparing security for attackers given q =
1, 000 queries across the various distributions, schemes, and
corrector sets. We are here being conservative: a query budget
of 1,000 is very generous to an attacker, as many websites will
lock an account after tens of failed requests. Figure 5 reports
the optimal success probability λq against an exact checker
− λq for
for each setting, as well as the improvements λgreedy
each typo tolerant checker, correction set pair. All numbers
are reported as percentages. The worst degradation occurs for
correcting all top ﬁve errors in the Myspace setting, where
the attacker’s success probability increases by 3% (from 9.5%
to 12.5%). To put this worst-case in perspective, consider the
naive (and incorrect) assumption that seems to underlie the
criticism of typo tolerance [2]: it suggests instead a ﬁvefold
increase in attacker success when correcting ﬁve errors and
thus an increase to 47.5% in the Myspace setting.
q
Elsewhere the increase is much smaller. For example, with
Rockyou, one can always correct all
top ﬁve errors with
increase only 1.6%: an attacker’s probability of success goes
from 11.2% to 12.8%, a small
improvement. This means
811811
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
Challenge
Dist.
RockYou
phpBB
Myspace
Set
Ctop2
Ctop3
Ctop5
Ctop2
Ctop3
Ctop5
Ctop2
Ctop3
Ctop5
q = 10
All wBL
0.00
0.03
0.06
0.00
0.02
0.03
0.01
0.06
0.15
0.03
0.22
0.25
0.03
0.19
0.20
0.03
0.17
0.27
AOp
0.00
0.00
0.00
0.00
0.00
0.01
0.00
0.02
0.04
Ex
1.95
2.75
0.79
q = 100
All wBL AOp
0.00
0.00
0.00
0.00
0.01
0.02
0.03
0.32
0.52
0.05
0.14
0.18
0.02
0.04
0.05
0.12
0.46
0.68
0.15
0.56
0.63
0.12
0.28
0.31
0.15
0.62
0.87
Ex
4.50
5.50
2.86
q = 1000
All wBL AOp
0.00
0.00
0.00
0.15
0.42
0.47
0.35
1.59
1.94
0.32
0.86
0.87
0.19
0.60
0.72
0.45
2.21
2.66
0.51
1.41
1.57
0.38
1.01
1.13
0.49
2.46
3.00
Ex
11.23
12.71
9.54
Fig. 5: Percentage improvements in an exact-knowledge adversary’s success (λgreedy
and correction set) and each of the challenge distributions, for q ∈ {10, 100, 1000}.
q
− λq) for each setting (corrector strategy
that the adversary’s ﬁrst 1,000 guesses against a typo-tolerant
checker do not beneﬁt much from high-probability balls.
Moving from Ctop2 to Ctop3 can result in a relatively big
jump in security loss. The reason is that the rm-last typo
corrector admits many higher-mass balls than only correcting
the considered capitalization errors. For example, adding a
character to many popular passwords results in another pop-
ular password: password and password1, abc123 and
abc1234. Fewer such pairs exist for capitalization errors
since fewer users choose passwords with capital letters. Indeed
in the worst case for Ctop2 we see a just a 0.5% improvement
in adversarial success compared to the 2.42% worst-case jump
for Ctop3. It is no coincidence, perhaps, that Facebook’s policy
seems to align with Chk-All for Ctop2. Our measurements are
the ﬁrst reported validation of this policy.
Even though security loss is low for Chk-All, one may
want to do better. The blacklist and approximately optimal
checkers help. When the challenge distribution is RockYou
the approximately optimal checker Chk-AOp is, in this case,
actually optimally secure by construction, hence it suffers no
security loss at all. Also note that Chk-wBL may beneﬁt
unduly by knowing exactly the top 1,000 passwords from
RockYou. Thus the more important analyses are when tested
on independent distributions. Here we see some loss as one
would expect given that the attacker in these cases has, after
all, more information about the challenge distribution than the
checker. But now the loss is small, and Chk-AOp reduces the
security loss compared to Chk-All by 0.53% on average over
the Myspace and phpBB settings. Chk-wBL also reduces loss
compared to Chk-All by 0.27% on average over Myspace and
phpBB, but never improves security more than Chk-AOp.
We now turn to what happens as q varies. In Figure 5 shows
the attack success increases for the q = 10 and q = 100 cases.
We note that the most realistic in practice is q = 10, since
companies often will raise alarms after 10 consecutive failed
login attempts. Here we see that attackers beneﬁt little from
typo-tolerance, and our Chk-AOp reduces loss to 0.04% or
less. Often it is zero.
It is concievable that in some settings an attacker might
be able to make more than q = 1, 000 queries, which
implies that our checker assumed too low of a bound on