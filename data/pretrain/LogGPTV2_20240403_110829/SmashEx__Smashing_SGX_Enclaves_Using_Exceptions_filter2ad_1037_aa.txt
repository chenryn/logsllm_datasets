title:SmashEx: Smashing SGX Enclaves Using Exceptions
author:Jinhua Cui and
Jason Zhijingcheng Yu and
Shweta Shinde and
Prateek Saxena and
Zhiping Cai
SmashEx: Smashing SGX Enclaves Using Exceptions
Jinhua Cui∗2
Jason Zhijingcheng Yu∗
National University of Defense Technology
National University of Singapore
Shweta Shinde
ETH Zürich
Zürich, Switzerland
Changsha, China
PI:EMAIL
Singapore
PI:EMAIL
shweta.shivajishinde@inf .ethz.ch
Prateek Saxena
Zhiping Cai
National University of Singapore
National University of Defense Technology
Singapore
PI:EMAIL
Changsha, China
PI:EMAIL
ABSTRACT
Exceptions are a commodity hardware functionality which is central
to multi-tasking OSes as well as event-driven user applications.
Normally, the OS assists the user application by lifting the semantics
of exceptions received from hardware to program-friendly user
signals and exception handling interfaces. However, can exception
handlers work securely in user enclaves, such as those enabled by
Intel SGX, where the OS is not trusted by the enclave code?
In this paper, we introduce a new attack called SmashEx which
exploits the OS-enclave interface for asynchronous exceptions in
SGX. It demonstrates the importance of a fundamental property
of safe atomic execution that is required on this interface. In the
absence of atomicity, we show that asynchronous exception han-
dling in SGX enclaves is complicated and prone to re-entrancy
vulnerabilities. Our attacks do not assume any memory errors in
the enclave code, side channels, or application-specific logic flaws.
We concretely demonstrate exploits that cause arbitrary disclo-
sure of enclave private memory and code-reuse (ROP) attacks in
the enclave. We show reliable exploits on two widely-used SGX
runtimes, Intel SGX SDK and Microsoft Open Enclave, running
OpenSSL and cURL libraries respectively. We tested a total of 14
frameworks, including Intel SGX SDK and Microsoft Open Enclave,
10 of which are vulnerable. We discuss how the vulnerability mani-
fests on both SGX1-based and SGX2-based platforms. We present
potential mitigation and long-term defenses for SmashEx.
CCS CONCEPTS
• Security and privacy → Trusted computing; Software secu-
rity engineering.
∗Both authors contributed equally to this research.
2The author carried out this research while visiting National University of Singapore.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15ś19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11. . . $15.00
https://doi.org/10.1145/3460120.3484821
KEYWORDS
TEE; Intel SGX; Exception handling; Atomicity; Re-entrancy vul-
nerability; Code-reuse attack
ACM Reference Format:
Jinhua Cui, Jason Zhijingcheng Yu, Shweta Shinde, Prateek Saxena, and Zhip-
ing Cai. 2021. SmashEx: Smashing SGX Enclaves Using Exceptions. In Pro-
ceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15ś19, 2021, Virtual Event, Repub-
lic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3460120.3484821
1 INTRODUCTION
Exceptions are a basic functionality available on modern processors
and are ubiquitously used by the OS and real-world applications.
The OS makes use of exceptions for multiplexing processes and re-
sources, e.g., via timer interrupts and page faults. Applications use
programmatic constructs, such as exception and signal handling,
to deal with dynamic events or runtime errors. The underlying
OS is in charge of monitoring and delivering hardware generated-
exceptions to a user process. This design allows application devel-
opers to focus on what to do when an event occurs.
Recently, a new form of hardware isolation has been enabled
by enclaves such as those provided by Intel SGX. SGX allows user
applications to be partitioned into hardware-isolated compartments
called enclaves, which are protected from privileged system soft-
ware (e.g., the hypervisor and the OS). The main guarantee provided
by enclaves is protecting the confidentiality and integrity of code
running in them. Enclaves are an important step, for example, to-
wards reducing the dependence on privileged OSes and towards
confidential computation [3, 4]. This presents a unique security
modelÐa trusted enclave running alongside an untrusted OS. This
paper studies how exceptions are handled on SGX, a platform where
the OS and user enclave do not trust each other.
Exceptions are events that hardware generates and software
handles. There are two design choices for enabling exceptions for
enclaves. The trusted hardware can directly deliver the exceptions
to the enclave code. Alternatively, the hardware can deliver it to the
OS, as in non-SGX systems. The current SGX implementation takes
the second approach. In such a design, the OS can route an exception
to the enclave along with the description of the exception event.
Once the exception is delivered to the enclave by either mechanism,
the enclave can execute the exception handler. Since the enclave
does not trust the OS, this interface requires careful design to ensure
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea779security. There are three entities interacting: the user enclave, the
trusted SGX hardware, and the untrusted OS.
Many exceptions are synchronous in the sense that the enclave
code can control when these exceptions are raised. But, certain
exceptions are asynchronous, i.e., they can be triggered outside the
control of the enclave. The OS has the power to trigger such excep-
tions at any time. The design of any hardware enclave abstraction
that supports asynchronous exceptions needs to provide at least
three security properties on enclave-OS context switches:
• Register state save/restore. When an exception interrupts an
enclave, the integrity and confidentiality of the requisite
enclave register state should be preserved in the presence of
a malicious OS.
• Safe control resumption. After an exception, the execution
resumes either at the point of interruption or at the start of
an enclave-defined handler.
• Atomicity. The hardware must support sufficient mecha-
nisms for the enclave to prevent exception handling when it
is executing inside certain critical sections.
The SGX hardware provides the first two properties, but not
the third. An enclave can turn off delivery of certain programmer-
defined exception throughout its execution by statically setting
its hardware configuration. However, if the enclave does not stati-
cally disable exceptionsÐwhich is useful for signal handlingÐSGX
does not allow the enclave to selectively mask exceptions at certain
times during execution. This effectively means that the SGX hard-
ware does not provide any explicit runtime primitives for ensuring
atomicity of critical sections in the enclave, when exceptions are
statically enabled. The lack of such a primitive opens up enclaves to
re-entrancy vulnerabilities which can in turn lead to serious exploits.
To demonstrate this clearly, we introduce a powerful attack called
SmashEx, which does not assume any side channels or pre-existing
memory safety bugs in the enclave application code. We success-
fully execute the attack to compromise both confidentiality and
integrity guarantees for enclave applications on SGX. Our attack on
SSL implementations for instance can cause a malicious OS to spill
out secret keys residing in private memory. To demonstrate the
full power of SmashEx, we leverage the re-entrancy vulnerability
to effect code-reuse (e.g., ROP [50]) and arbitrary memory disclo-
sure attacks on enclaves. We construct end-to-end PoC exploits for
two widely-used SGX runtimes: Intel SGX SDK [16] and Microsoft
Open Enclave [45]. We target an OpenSSL implementation based
on Intel SGX SDK and the cURL application based on Open Enclave
respectively. The attacks are demonstrated on the latest SGX2 hard-
ware, but also extends to SGX1 runtimes that have asynchronous
exception handling enabled.
In this paper, we explain why the root re-entrancy vulnerabil-
ity exploited by SmashEx is fundamentalÐif we want to support
asynchronous exception handling on SGX, careful re-entrant de-
sign in the enclave is critical. In total, we survey 14 SGX runtime
frameworks and deem that the vulnerability affects 10 of them on
SGX2. While the exploits do not immediately carry over to 4 of
the runtimes, we point out that this comes at the cost of a limit to
their exception handling functionality or extra complexity in their
design and implementation. We discuss the effectiveness of vari-
ous software mitigations for SmashEx. We recommend potential
Figure 1: SGX enclave interfaces and memory protection.
hardware abstractions for exposing atomic execution primitives to
enclaves to simplify defenses. These may be of independent interest
to future enclave designs.
Contribution. Much prior attention has been devoted to safe data
and control exchange at the enclave-OS interface (e.g., for Iago
attacks [34]). Our main contribution is to highlight a third missing
defense primitive at the enclave-OS interface: ensuring atomicity in
re-entrant enclave code. When enclaves support the standard pro-
gramming model of asynchronous exceptions, re-entrancy concerns
arise. Our SmashEx attack makes this issue concrete for study.
2 BACKGROUND
Intel SGX introduces the notion of enclavesÐhardware isolated
memory regions for sensitive execution. We refer to the code that
executes inside an enclave as enclave software. The code and the
data of enclave software, including its stack (enclave private stack),
are stored inside enclave memory and protected by the SGX hard-
ware. In the SGX trust model, only the hardware and the enclave
software are trusted. All the other software on the system, including
privileged software such as the OS, is considered untrusted. This
includes the user process in charge of creating and interacting with
the enclave, which we refer to as its host process. The SGX hardware
does not allow the untrusted software to access enclave memory.
However, enclave software can read or write memory regions out-
side the enclave boundary, which are also accessible to the host
process. We refer to such a shared virtual address space accessible
to both an enclave and its host process as the public memory.
Enclave software requires mechanisms to request services from
the non-enclave/OS code as well as to receive notifications (e.g.,
signals) from it. The SGX hardware has two kinds of interfaces,
synchronous and asynchronous, for switching between the OS and
an enclave. Figure 1 depicts such interfaces alongside the protected
memory region for an SGX enclave.
Synchronous Entry/Exits. Synchronous entry/exits are needed
in enclaves to interface with the host application and the OS for
synchronous or blocking communication. To help safeguard the
interface, the SGX hardware strictly restricts the transfer of control
between enclave and non-enclave code. Two specific instructions,
EENTER and EEXIT, are used to synchronously enter and exit an
enclave respectively. The EENTER instruction jumps to a fixed en-
clave entry point that is pre-configured during enclave creation.
2
TrustedUntrustedPublicmemoryEnclaveprivatememoryR/WRing 0-2HardwareOS kernelHostEnclaveInterrupthandlerAPIC timerinterfaceEEXITEENTERERESUMEAEXR/W/XRing 3Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea780Figure 2: Synchronous entry/exit in an ocall on SGX.
An enclave can specify a public memory location and exit to it via
the EEXIT instruction. EENTER and EEXIT do not scrub or replace
the register state during context switches. Instead, the hardware
keeps most of the registers unchanged. It is the responsibility of the
enclave software to prepare the register state for enclave execution
after EENTER and to prevent leaking secrets through the register
state after EEXIT. This is necessary for normal functionality, for
example, to propagate any data arguments between the enclave and
the OS. An enclave can provide functions for untrusted software
to invoke in a so-called ecall, which consists of a paired EENTER
and a subsequent EEXIT. In addition, synchronous entry/exits can
also be used to support ocalls, where enclaves request to invoke
functions provided by untrusted software (shown in Figure 2).
Since EEXIT and EENTER do not take care of the register state,
the enclave code has to save the enclave CPU context on its private
stack and restore it when returning from the ocall later. The ocall
interface has been the subject of much scrutiny in prior work,
largely due to the risk of Iago attacks [34, 42, 56, 59].
Asynchronous Entry/Exits. In addition to synchronous exits, an
enclave can exit asynchronously as a result of exceptions (e.g.,
timer interrupts, page faults, division-by-zero). During such an
AEX (Asynchronous Enclave eXit), the enclave stores the current
enclave execution context in a special data structure called the
State Save Area (SSA) located inside the enclave private memory.
Asynchronous entry/exits are different from synchronous events
because they can arise at any time during the enclave execution,
interrupting it involuntarily. To ensure safe enclave-OS transitions,
the SGX hardware implements the following mechanisms:
• Safe control resumption. At an AEX, the hardware automati-
cally stores the current instruction pointer (rip) in the SSA.
The untrusted host process may execute an ERESUME instruc-
tion later to transfer control back to the enclave. At this point,
SGX hardware enforces that the enclave resumes execution
from the rip value stored inside the SSA.
• Register save/restore. In addition to rip, the hardware saves
the remaining enclave execution context (e.g., general-purpose
registers) in the SSA. Before exit, the hardware scrubs the
register values to prevent data leakage through them. On
ERESUME, the hardware restores the register values from SSA.
Asynchronous Exception Handling in SGX Enclaves. The sim-
ple mechanisms above are sufficient to protect an enclave while
3
Figure 3: Exception handling mechanism in Intel SGX SDK.
The SGX hardware performs an AEX and transfers the con-
trol to the OS when an exception occurs ( 1○ 2○). The OS deliv-
ers a corresponding signal to the host process, which then re-
enters the enclave via EENTER ( 3○). The enclave performs in-
enclave exception handling ( 4○) and exits to the host process
via EEXIT ( 5○), which then resumes the enclave execution via
ERESUME ( 6○). During this process, the CPU state of the in-
terrupted enclave is first saved into the SSA upon the AEX,
from which it is then copied to the enclave private stack dur-
ing in-enclave exception handling.
allowing exceptions to interrupt its execution. However, in order
to also allow the enclave to handle exceptions (including decid-
ing the resumption point by modifying the SSA content), a more
complex mechanism is designed (shown in Figure 3) in SGX run-
times. Instead of resuming the enclave immediately via ERESUME,
the untrusted host process re-enters the enclave using EENTER and
passes relevant information about the exception. Note that this
new flow starts with a normal EENTER which leaves the rsp value
uninitialized, so the enclave has to set up its private stack before
executing any real exception handler. In both Intel SGX SDK and
Microsoft Open Enclave (among others; see Section 8), the enclave
loads the stack pointer from the saved rsp in the SSA, effectively
reusing the same stack of the interrupted thread. After the enclave
finishes handling the exception in the SDK, it uses EEXIT to return
control to the untrusted software, which then resumes the enclave
execution via ERESUME.
Key Observation. To perform exception handling, the enclave