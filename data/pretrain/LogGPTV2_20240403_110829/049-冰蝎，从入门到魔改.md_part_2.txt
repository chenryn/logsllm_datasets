化问题，最新版本已经解决了这个问题。解决⽅案是：每
个 shell 连接会从 17 个内置的 UA ⾥随机选择⼀个。
来看下这部分的 JAVA 代码：
可以看到是随机从常量 Constants.userAgents 中取了⼀
个值。
这块的问题是 UA 包含的浏览器版本⽐较旧，⽐如：
Chrome/14.0.835.163 是 2011 年发布的版本，
Firefox/6.0 也是 2011 年的版本。这种浏览器基本很少
⼈使⽤，所以特征较为明显，可以作为规则参考。
修改思路：
使⽤较新版本的常⻅浏览器 UA 来替换内置的旧的 UA
常量。
修改后的效果：
2020 年发布的 Firefox 75.0：
2019 年 11 ⽉发布的 Chrome 78.0.3904.108：
4.header 中的 Accept
在请求 header 中的 Accept 字段默认会是⼀个⽐较奇怪
的值，此值在 GET 形式和 POST 形式的请求中均存在。
⽽在正常的浏览器或其他设备访问的报⽂中 Accept 的值
不会是这样的，所以此处也可以作为⼀个强⼒有效的规则
检测依据。
GET 请求：
POST 请求：
此处产⽣的原因是 JAVA 的 HTTPURLConnection 库
（"冰蝎" 使⽤的 HTTP 通信库）在没有设置 Accept 值
时会⾃动设置该值作为默认值，⽽源码中默认并没有对
Accept 进⾏处理。
修改思路：
修改请求 header 中的 Accept 的值。
修改后的效果：
GET 请求
GET 请求：
POST 请求：
5. ⼆次密钥获取
在 "冰蝎" 的默认流量中，会有两次通过 GET 形式的请
求获取密钥的过程，这点⽐较奇怪。
此处也可作为⼀个检测点。
我们来看下代码实现：
这⼀步是将密钥存⼊ rawkey_1 变量中。
再次获取的密钥存到 rawkey_2 变量中，之后 rawkey_1
和 rawkey_2 进⾏了异或操作，通过异或结果来判断，
从⽽结束循环条件，最多尝试获取 10 次密钥。实话说这
块代码没太看出来作⽤，实际是⼤部分情况 2 次就 OK
了，3 次获取密钥的情况都不太多。个⼈感觉这块是为了
校验获取到的密钥是否可⽤以及控制获取密钥的次数
校验获取到的密钥是否可⽤以及控制获取密钥的次数。
修改思路：
删掉多次获取密钥的过程，可以改成⼀次获取密钥。或者
直接把密钥写到 webshell ⾥，省去获取密钥的过程。
修改后的效果：
6.response 中返回密钥
在获取密钥时，密钥返回是直接以 16 位字符的形式返回
到客户端。这时会有⽐较⼤的破绽，我们来看下常⽤的检
测规则：
\r\n\r\n[a-z0-9]{16}$
和
Content-Length: 16
检测内容是：以两个 \ r\n 完整换⾏加上 16 位字⺟⼩写
+ 数字组合为结尾，再配合 Content-Length: 16 为规则
⼀起检测。
我们来看下客户端代码对于密钥的匹配规则：
源码只匹配了 16 位的字⺟ a-f ⼤⼩写 + 数字，hah~ 这
是因为啥呢？？？
原因在 "冰蝎" 默认⾃带的 webshell ⾥：
因为 webshell ⽣成的密码算法为 md5，md5 输出结果
显示是 16 进制，所以只有 0-9a-f。
修改思路：
GET 形式访问时，可以加⼊⼀些混淆的返回内容，或者
将密钥变型。
修改后的效果：
以先 视觉效 上隐藏起来
可以先从视觉效果上隐藏起来：
流量侧：
这⾥只是简单的加了⼀些内容作为演示，实战时可以根据
情况混淆。
7.header 中的 Cookie
因为 "冰蝎" 默认⾃带的 webshell 中的 key 在将密钥返
回客户端后，会将密钥保存在 Session 中。⽽
SessionId 在第⼀次客户端请求时作为 Cookie 发送给了
客户端，所以 Cookie 也是作为我们⼀个重要检查点。
Cookie 中的问题是 "path=/" 这部分。在访问服务器
时，服务端将 Cookie 以 Set-Cookie 的 response 头中
的形式返回，其中 Path 是该 Cookie 的应⽤路径。
举个例⼦：
Cookie1; Path=/
Cookie2; Path=/admin/
当浏览器访问⽹站 "/" 路径时，只会携带 Cookie1。当访
问 "/admin/" 路径时，会同时携带 Cookie1 和
Cookie2。
在正常浏览器访问下，path 是不会作为 Cookie 本身的
⼀部分发送到服务端的。
来看下客户端代码：
此处将服务端返回的 Cookie 所有字符都在客户端存储起
来，当客户端发送请求时全部将这些字符作为 Cookie 发
送出去。
修改思路：
将发送请求中 Cookie 的 Path 字段去掉。
修改后的效果：
0x07 总结
在实际检测中，单⼀的规则检测对 "冰蝎" 的误报率会⽐
较⾼，⼀些⽐较明显的特征相互结合使⽤，会有事半功倍
的效果。通过魔改程序也只能在⼀定时间内绕过安全设备
的检测。真正想要持续有效必须不断更新，不断学习，在
这攻防的浪潮中砥砺前⾏
这攻防的浪潮中砥砺前⾏。
安全路漫漫，与君共勉。
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明
|---|--|--|--|--|--|
| 0 |  |  |  |  |  |
| 1 |  |  |  |  |  |
| 2 |  |  |  |  |  |
| 3 |  |  |  |  |  |
| 4 |  |  |  |  |  |
| 5 |  |  |  |  |  |
| 6 |  |  |  |  |  |