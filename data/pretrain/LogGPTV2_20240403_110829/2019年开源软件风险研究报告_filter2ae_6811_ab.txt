其中，中危等级的组件漏洞数量最多，占比35.26%，超危与高危组件漏洞数量分别为31.44%和27.67%，低危漏洞较少，占比5.62%。
**超危与高危组件漏洞数量之和占比达64.49%。**
总体而言，中危及以上漏洞即已具有一定危害性，而其占比达94.38%，高危及以上漏洞则具有较高危害性，而其占比达64.49%，显而易见，依赖组件的安全漏洞是不可忽视的重要安全风险之一。
#####  2.2. 高危及以上组件漏洞数量不断增长，安全风险持续升高
超危、高危组件漏洞数量近年来一直保持着较高的增长率，2017年相较2016年环比增长172.91%，2018年环比增长108.37%，2019年环比增长103.96%，
**超危、高危组件漏洞数量历年均保持着大于100%的较高的增长率。**
Github样本项目和Gitee样本项目的超危与高危漏洞数量也基本符合这一规律。而在实际开发中，组件漏洞被发现后，大量开源组件的漏洞修复周期也较长，不能做到对组件漏洞的及时响应。据英国安全厂商Snyk调研，37%的开源开发者在持续集成(CI)期间没有实施任何类型的安全测试，25%的开发者在发现漏洞后未通知用户有漏洞，从漏洞添加至组件到修复漏洞的时间中位数也超过2年，而超危、高危漏洞的危害性较高且占比较高，若大量开发者未能做到对漏洞的及时响应，将对组件使用者带来较高的安全风险。
#####  2.3. 约80%的高危及以上的组件漏洞来自Maven组件
各包管理器每年的超危、高危组件漏洞数量均在不断变化，上表反映了各包管理器每年的超危、高危组件漏洞占超危、高危漏洞总数量的比例的变化情况。尽管Maven平台高危及以上的组件漏洞在2016-2018年期间占比略微下降，但仍旧在每年中均保持最高占比，平均每年占比超80%，并超出位于第二名的NPM至少65%。而除了Maven和NPM外的其它包管理器则一直处于占比较低的状态。总体而言，
**历年大部分的高危及以上的组件漏洞来自于Maven组件，也侧面说明了Maven组件使用范围较广，Maven组件漏洞的影响范围也相应较广。**
#####  2.4. 被引用次数最多的含高危及以上漏洞的组件Top10
**开源组件被引用的次数越多，软件开发者直接或间接依赖到该组件的可能性越大，如果该组件包含高危及以上漏洞，安全风险越高，安全风险影响范围也越广。**
了解各包管理器中被引用最多的高危组件信息，对于开源安全风险防范至关重要。本报告从样本项目依赖组件中按包管理器分别选取了被样本项目引用次数最多的且包含高危及以上漏洞的组件Top10，其中，图中横坐标表示该组件被样本项目引用的次数：
#####  1、Maven
#####  2、Nuget
#####  3、Packagist
#####  4、PyPI
#####  5、NPM
#####  6、RubyGems
###  （二）开源许可证分析
本报告对样本开源项目与依赖组件（来自于Maven、Nuget、Packagist、PyPI、NPM、RubyGems这6个包管理平台的依赖组件）的许可证使用情况进行了统计，无论是开源项目还是依赖组件，
**MIT和Apache-2.0许可证占比最多。**
依赖组件许可证中，MIT占比55.58%，Apache-2.0占比14.94%；开源项目许可证中，MIT占比32.93%，Apache-2.0占比14.84%；AGPL-3.0、LGPL-2.1、LGPL-3.0、GPL-2.0、GPL-3.0占比最少，5个许可证占比之和不足10%。依赖组件中，未在社区网页申明许可证的占比仅为2.88%，而在开源项目中，未在社区网页直接申明许可证的占比为39.44%。当然，开源项目许可证存在一种情况，即未在社区网页直接申明，而将许可证声明放到源代码项目中。因此，实际未申明许可证的开源项目比例会略低于39.44%，但侧面反映了开源项目中，未申明许可证的开源项目数量较多。对于未申明许可证的开源项目或开源依赖组件的使用，可能存在侵权风险。  
 **许可证兼容是指不同许可证的开源项目，能在同时不违反所有开源项目许可证的前提下进行合并或者融合，反之则成为许可证不兼容。**
许可证兼容性风险是使用开源软件时面临的常见风险。开源许可证可以简单划分为宽松型许可证和著佐权型许可证。例如MIT、Apache-2.0、BSD-2-Clause、BSD-3-Clause属于宽松型许可证，AGPL-3.0、LGPL-2.1、LGPL-3.0、GPL-2.0、GPL-3.0属于著佐权型许可证。开源软件或依赖组件在混合使用时，由于不同的开源软件或依赖组件具有不同的开源许可证，因此可能存在许可证兼容性风险。  
本次分析中， **2372个样本项目存在许可证兼容性问题，**
占比7.52%。这些项目中，有的使用了许可证不兼容的依赖组件，有的是依赖组件许可证与项目自身的许可证不兼容。例如Mycat-Server项目，其项目许可证为GPL-2.0，项目中使用的依赖组件的许可证有Apache-2.0、GPL-2.0等。但由于Apache-2.0存在某些专利条款和赔偿条款，而GPL-2.0未做相关要求，导致Apache-2.0与GPL-2.0不兼容。因此，当整个项目在GPL-2.0许可证下，整个项目就存在兼容性问题。
## 三、开源安全风险防范建议
《网络安全审查办法》要求加强关键信息基础设施供应链安全，开源软件作为关键信息基础设施软件供应链中的重要组成部分，其安全性亟需予以重视。因此，开发者应该采取适当的措施进行规避，可有效降低其安全风险。为此，建议开发者采取以下主要措施：
1.在引入开源软件时做好安全审查，避免在开发时就引入含漏洞的开源软件，导致安全风险传递到后续流程；
2.在引入开源软件时做好法律审查，避免引入不符合使用需求的开源许可证项目；
3.获取专业的开源软件安全信息的服务支持，以加强开源漏洞信息的获取能力；
4.做好开源软件清单的管理，以便在获取开源软件威胁情报时，及时发现受影响的产品和项目，快速进行处置；
5.建立开源软件管理制度，加强人员对于开源软件风险意识的培训；
6.配备开源软件安全分析和管理的自动化工具，提高开源软件的应急响应能力。