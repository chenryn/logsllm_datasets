# 九、使用 Docker 测试
毫无疑问，测试的特性一直处于软件工程学科的前沿。如今，为了拥有大量智能、互联和数字化的资产，软件在我们日常环境中的各种有形物体中的深入和决定性存在被广泛接受。此外，随着对分布式和同步软件的日益关注，软件设计、开发、测试和调试、部署和交付的复杂性也在不断上升。各种方法和机制被发掘出来，以简化和精简软件构建的迫切需要的自动化以及软件可靠性、弹性和可持续性的认证。Docker 正在成为一种极其灵活的工具来测试各种各样的软件应用。在本章中，我们将讨论如何有效地利用 Docker 在软件测试方面的显著进步及其在加速和增强测试自动化方面的独特优势。
本章将讨论以下主题:
*   TDD 概述
*   在 Docker 中测试您的代码
*   将 Docker 测试过程集成到 Jenkins 中
Docker 容器目前正被用来创建开发和测试环境，它们是生产环境的精确副本。与虚拟机相比，容器需要更少的开销，虚拟机一直是开发、转移和部署环境的主要环境。让我们从下一代软件的**测试驱动开发** ( **TDD** )以及 Docker 启发的容器化在简化 TDD 过程中是如何变得得心应手的概述开始。
## TDD 概述
在过去的几十年里，软件开发的漫长而艰难的旅程经历了许多波折，然而其中一个突出的软件工程技术是 TDD。
For more details and documents on TDD refer to [http://agiledata.org/essays/tdd.html](http://agiledata.org/essays/tdd.html).
简单来说，TDD 是一种软件开发实践，其中开发周期从编写一个会失败的测试用例开始，然后编写实际的软件使测试通过，并继续重构和重复这个周期，直到软件达到可接受的水平。下图描述了这一过程:
![](img/image_09_001.jpg)
## 在 Docker 中测试您的代码
在本节中，我们将带您完成一段旅程，在这段旅程中，我们将向您展示如何使用存根来完成 TDD，以及在部署等效系统中开发软件时，Docker 如何派上用场。为此，我们采用一个 web 应用用例，该用例具有跟踪每个用户访问次数的功能。对于这个例子，我们使用 Python 作为实现语言，`redis`作为键值对数据库来存储用户命中次数。此外，为了展示 Docker 的测试能力，我们将我们的实现限制在两个功能上——`hit`和`getHit`。
All the examples in this chapter use Python 3 as the runtime environment. The Ubuntu 16.04 installation comes with Python 3 by default. If you don't have Python 3 installed on your system, refer to the respective manual to install Python 3.
根据 TDD 实践，我们从为`hit`和`getHit`函数添加单元测试用例开始，如下面的代码片段所示。这里，测试文件被命名为`test_hitcount.py`:
```
import unittest 
import hitcount 
class HitCountTest (unittest.TestCase): 
     def testOneHit(self): 
         # increase the hit count for user user1 
         hitcount.hit("user1") 
         # ensure that the hit count for user1 is just 1 
         self.assertEqual(b'1', hitcount.getHit("user1")) 
if __name__ == '__main__': 
    unittest.main() 
```
这个例子在[https://github.com/thedocker/testing/tree/master/src](https://github.com/thedocker/testing/tree/master/src)也有。
这里，在第一行，我们正在导入`unittest` Python 模块，该模块提供了运行单元测试和生成测试执行详细报告所需的框架和功能。在第二行中，我们将导入`hitcount` Python 模块，在这里我们将实现命中计数功能。然后，我们将继续添加测试`hitcount`模块功能的测试代码。
现在，使用 Python 的单元测试框架运行测试套件，如下所示:
```
$ python3 -m unittest   
```
以下是单元测试框架生成的输出:
```
E
======================================================================
ERROR: test_hitcount (unittest.loader.ModuleImportFailure)
----------------------------------------------------------------------
Traceback (most recent call last):
...OUTPUT TRUNCATED ...
ImportError: No module named 'hitcount'
----------------------------------------------------------------------
Ran 1 test in 0.001s
FAILED (errors=1)
```
不出所料，测试失败，出现`ImportError: No module named 'hitcount'`错误消息，因为我们甚至没有创建文件，因此无法导入`hitcount`模块。
现在，在与`test_hitcount.py`相同的目录下创建一个名为`hitcount.py`的文件:
```
$ touch hitcount.py  
```
继续运行单元测试套件:
```
$ python3 -m unittest  
```
以下是单元测试框架生成的输出:
```
E
======================================================================
ERROR: testOneHit (test_hitcount.HitCountTest)
----------------------------------------------------------------------
Traceback (most recent call last):
 File "/home/user/test_hitcount.py", line 10, in testOneHit
 hitcount.hit("peter")
AttributeError: 'module' object has no attribute 'hit'
---------------------------------------------------------------------- 
Ran 1 test in 0.001s
FAILED (errors=1)
```
同样，测试套件像前面一样失败了，但是出现了不同的错误消息`AttributeError: 'module' object has no attribute 'hit'`。我们得到这个错误是因为我们还没有实现`hit`功能。
让我们继续在`hitcount.py`中实现`hit`和`getHit`功能，如下图所示:
```
import redis 
# connect to redis server 
r = redis.StrictRedis(host='0.0.0.0', port=6379, db=0) 
# increase the hit count for the usr 
def hit(usr): 
    r.incr(usr) 
# get the hit count for the usr 
def getHit(usr): 
    return (r.get(usr)) 
```
这个例子也可以在 https://github.com/thedocker/testing/tree/master/src 的 GitHub 上找到。
To continue with this example, you must have the Python 3 compatible version of package installer (`pip3`).
以下命令用于安装`pip3`:
```
$ wget -qO- https://bootstrap.pypa.io/get-pip.py | sudo python3 -
```
在前面程序的第一行，我们正在导入`redis`驱动程序，它是`redis`数据库的连接驱动程序。在下面一行中，我们正在连接到`redis`数据库，然后我们将继续实现`hit`和`getHit`功能。
`redis`驱动程序是可选的 Python 模块，所以让我们使用`pip`安装程序继续安装`redis`驱动程序，如下图所示:
```
$ sudo pip3 install redis  
```
即使安装了`redis`驱动程序，我们的`unittest`模块仍然会失败，因为我们还没有运行`redis`数据库服务器。因此，我们可以运行一个`redis`数据库服务器来成功地完成我们的单元测试，或者采用嘲笑`redis`驱动程序的传统 TDD 方法。模仿是一种测试方法，其中复杂的行为被预先定义或模拟的行为所替代。在我们的示例中，为了模拟`redis`驱动程序，我们将利用名为`mockredis`的第三方 Python 包。该模拟包在[https://github.com/locationlabs/mockredis](https://github.com/locationlabs/mockredis)提供，`pip`安装程序名称为`mockredispy`。让我们使用`pip`安装程序安装这个模拟:
```
$ sudo pip3 install mockredispy  
```
安装了`mockredispy`、`redis` mock 之后，让我们重构我们的测试代码`test_hitcount.py`(我们之前已经写过了)来使用由`mockredis`模块提供的模拟的`redis`功能。这是通过`unittest.mock`嘲讽框架提供的`patch`方法完成的，如下代码所示:
```
import unittest 
from unittest.mock import patch 
# Mock for redis 
import mockredis 
import hitcount 
class HitCountTest(unittest.TestCase): 
    @patch('hitcount.r',
        mockredis.mock_strict_redis_client(host='0.0.0.0', 
        port=6379,  db=0)) 
    def testOneHit(self): 
        # increase the hit count for user user1 
        hitcount.hit("user1") 
        # ensure that the hit count for user1 is just 1 
        self.assertEqual(b'1', hitcount.getHit("user1")) 
if __name__ == '__main__': 
    unittest.main() 
```
这个例子也可以在 https://github.com/thedocker/testing/tree/master/src 的 GitHub 上找到。
现在，再次运行测试套件:
```
$ python3 -m unittest
.
----------------------------------------------------------------------
Ran 1 test in 0.000s
OK
```
最后，正如我们在前面的输出中所看到的，我们通过测试、代码和重构周期成功地实现了访问者计数功能。
### 在容器中运行测试
在前一节中，我们向您介绍了 TDD 的完整周期，在这个周期中，我们安装了额外的 Python 包来完成我们的开发。然而，在现实世界中，一个人可能在多个项目上工作，这些项目可能有冲突的库，因此需要隔离运行时环境。在 Docker 技术出现之前，Python 社区曾经利用 Virtualenv 工具来隔离 Python 运行时环境。Docker 通过打包操作系统、Python 工具链和运行时环境，将这种隔离更进一步。这种类型的隔离为开发社区提供了很大的灵活性，可以根据项目需要使用合适的软件版本和库。
下面是将前一节的测试和访问者计数实现打包到 Docker 容器中并在容器内执行测试的分步过程:
1.  用`python3`运行时、`redis`和`mockredispy`包、`test_hitcount.py`测试文件和访客计数实现`hitcount.py`创建一个映像，最后启动单元测试:
```
      ############################################# 
      # Dockerfile to build the unittest container 
      ############################################# 
      # Base image is python 
      FROM python:latest 
      # Author: Dr. Peter 
      MAINTAINER Dr. Peter  
      # Install redis driver for python and the redis mock 
      RUN pip install redis && pip install mockredispy 
      # Copy the test and source to the Docker image 
      ADD src/ /src/ 
      # Change the working directory to /src/ 
      WORKDIR /src/ 
      # Make unittest as the default execution 
      ENTRYPOINT python3 -m unittest 
```
这个例子也可以在 https://github.com/thedocker/testing/tree/master/src 的 GitHub 上找到。
2.  现在创建一个名为`src`的目录，我们在这里制作了`Dockerfile`。将`test_hitcount.py`和`hitcount.py`文件移动到新创建的`src`目录。
3.  使用`docker build`子命令构建`hit_unittest` Docker 映像:
```
 $ sudo docker build -t hit_unittest .
 Sending build context to Docker daemon 11.78 kB
 Sending build context to Docker daemon
 Step 0 : FROM python:latest
 ---> 32b9d937b993
 Step 1 : MAINTAINER Dr. Peter 
 ---> Using cache
 ---> bf40ee5f5563
 Step 2 : RUN pip install redis && pip install mockredispy
 ---> Using cache
 ---> a55f3bdb62b3
 Step 3 : ADD src/ /src/
 ---> 526e13dbf4c3
 Removing intermediate container a6d89cbce053
 Step 4 : WORKDIR /src/
 ---> Running in 5c180e180a93
 ---> 53d3f4e68f6b
 Removing intermediate container 5c180e180a93
 Step 5 : ENTRYPOINT python3 -m unittest
 ---> Running in 74d81f4fe817
 ---> 063bfe92eae0
 Removing intermediate container 74d81f4fe817
 Successfully built 063bfe92eae0  
```
4.  现在我们已经成功构建了映像，让我们使用`docker run`子命令启动带有单元测试包的容器，如下图所示:
```
 $ sudo docker run --rm -it hit_unittest .
 --------------------------------------------------------------- 
 -------
 Ran 1 test in 0.001s 
 OK
```
显然，单元测试运行成功，没有错误，因为我们已经打包了测试过的代码。
在这种方法中，对于每一个变化，都构建 Docker 映像，然后启动容器来完成测试。
#### 使用 Docker 容器作为运行时环境
在前一节中，我们构建了一个 Docker 映像来执行测试。特别是，在 TDD 实践中，单元测试用例和代码会经历多次变更。因此，需要一遍又一遍地建立 Docker 映像，这是一项艰巨的任务。在本节中，我们将看到一种替代方法，其中 Docker 容器是用运行时环境构建的，开发目录作为卷装载，测试在容器内部执行。
在此 TDD 周期中，如果需要额外的库或对现有库的更新，则容器将使用所需的库进行更新，更新后的容器将作为新映像提交。这种方法提供了任何开发人员梦寐以求的隔离性和灵活性，因为运行时及其依赖关系存在于容器中，任何错误配置的运行时环境都可以被丢弃，并且可以从以前的工作映像构建新的运行时环境。这也有助于从库的安装和卸载中保持 Docker 主机的健全性。
以下示例是如何将 Docker 容器用作无污染但非常强大的运行时环境的分步说明:
1.  我们从启动 Python 运行时交互容器开始，使用`docker run`子命令:
```
      $ sudo docker run -it \
 -v /home/peter/src/hitcount:/src \
 python:latest /bin/bash
```
这里，在这个例子中，`/home/peter/src/hitcount` Docker 主机目录被指定为源代码和测试文件的占位符。该目录作为`/src`安装在容器中。
2.  现在，在 Docker 主机的另一个终端上，将`test_hitcount.py`测试文件和`hitcount.py`访客计数实现复制到`/home/peter/src/hitcount`目录。