38 
4.2.3 Implementation bugs 
In this chapter vulnerabilities are listed which contained logic flaws in the implementation 
which resulted in memory corruptions. 
Examples: 
Chromium issue 664411, CVE-2016-9651 (Pwnfest 2016) – Private property re-assign 
issue in Object.assign() 
01: class short { }  
// short becomes a function object 
02: class longlonglong { } // longlonglong becomes a function object 
03: let result = Object.assign(short, longlonglong); 
04: console.log(result.toString()); // Reads data OOB 
Objects in JavaScript have public and private properties. Public properties are available from 
JavaScript whereas private properties are just internally used and should not be accessible. 
Keys of public properties can be enumerated by using functions such as 
Object.getOwnPropertyNames(obj) 
and 
Object.getOwnPropertySymbols(obj). 
However, keys and values of private properties cannot be enumerated and therefore not be 
modified because they should not be accessible from JavaScript code. The 
Object.assign(target, source) code copies enumerable properties from the source 
object to the target object and returns an object of the type of target. The vulnerability exists 
because the function copies not only public, but also private properties. That means an 
object can be created which has the private property of another object. 
For example, when a new class is created, the function object has the private symbols 
class_start_position_symbol and class_end_position_symbol which mark the indexes where 
in-memory the function name starts and ends. If a function with a short and a function with 
a long name are created and the private properties of the long function are copied to the 
short function object, the class_end_position_symbol becomes corrupted for the short 
function object. By reading this function name using the toString() function OOB read access 
is possible.  
The OOB read access can be turned to OOB write access by using the unescaped function. 
The idea is that uninitialized memory is sprayed with %41%41%41… strings and free is 
immediately called on them which means the OOB access reads this string. The unescaped 
function initially calculates the length of the result buffer and calculates per %41 substring a 
target length of one byte for the decoded character. However, during execution of the 
unescaped function the code internally allocates memory which overwrites the %41%41%41… 
string with data like someOtherData%41%41%41%41…. Now more bytes will be written than 
allocated because a string like %41%41%41 resulted in the allocation of 3 bytes. However, the 
string was overwritten with someOther which consumes 9 bytes. 
39 
A more detailed explanation of this exploitation technique together with the exploit can be 
found at 75. The private class properties, which were used in this exploitation technique, are 
nowadays removed in v8. 
Generalization for variation analysis: 
• 
Object.assign() is an interesting function which may lead to other problems when it 
gets invoked during callbacks. A fuzzer should therefore add such function calls more 
frequently. 
Firefox bug 1493900, CVE-2018-12386 (Hack2Win 2018) – Register allocation bug  
01: // Generate objects with inline properties 
02: for (var i = 0; i < 100; i++) 
03:     var o1 = { s: "foo", x: 13.37 }; // 2nd inline property is a double value 
04: for(var i = 0; i < 100; i++) 
05:     var o2 = { s: "foo", y: {} }; 
// 2nd inline property is an object 
06: function f(a, b) { 
07:     let p = b; 
08:     for( ; p.s < 0; p = p.s ) 
09:         while (p === p) { } 
10:     for (var i = 0; i < 10000000; ++i) { } 
11:     // a points now incorrectly to b due to register misallocation 
12:     a.x = 3.54484805889626e−310;    // Sets b.y to 0x414141414141 
13:     return a.x; 
14: } 
15: f(o1, o2); 
16: f(o1, o2); 
17: f(o1, o2); 
18: o2.y; // Crashes (attempt to resolve 0x414141414141 as heap object pointer) 
“The vulnerability occurs due to a special combination of control and data flow caused by 
the loops and essentially leads to a scenario in which the wrong value is stored in a register. 
This can be abused to cause a type-confusion by loading a value of type X into a register 
that is expected to contain a value of type Y.“ [39] 
In the above PoC lines 7 to 10 lead to an incorrect register allocation which means that 
variable a points in line 12 incorrectly to b. Elements of objects are typically stored in 
separate arrays or dictionaries. However, if they are often accessed, inline properties are 
created which means that commonly accessed properties are stored within the object’s main 
heap chunk. The for-loops from line 2 and 4 enforce the use of inlined properties and the x 
and y properties are therefore stored each in their second inline property slot. While x is 
stored as raw floating-point value, y is stored as a pointer to a heap object. When writing to 
a.x in line 12, a floating-point value is written. Since it points at runtime to b, the heap pointer 
at b.y is overwritten with the encoded floating-point value which is 0x414141414141. 
Accessing the property in line 18 therefore leads to a crash. 
75 https://github.com/secmob/pwnfest2016 
40 
The vulnerability was exploited during Hack2Win 2018. More details can be found in Groß 
master thesis [39] and in a blog post at 76. A full exploit is available at 77 and at 78. The 
vulnerability was found with the fuzzilli fuzzer together with two other vulnerabilities after 
fuzzing on eight cores for approximately one year 79. 
Generalization for variation analysis: 
• 
A fuzzer should generate objects with inline properties but with different internal data 
types and pass these objects as arguments to a function. The function code can be 
fuzzed to perform various operations. At the end a floating-point value should be 
written to all floating-point properties. After that, the object properties should be 
accessed to see if a crash occurs.  
• 
Line 9 on its own would result in an endless loop. However, since the loop condition 
in line 8 is false, line 9 does not get executed. The fuzzer should add such endless 
loops inside if-conditions or loops which never get executed. Similar code constructs 
can be found by applying feedback-based fuzzing. 
4.2.4 Type-Confusion bugs 
Type-confusion bugs are often the result of logic or copy and paste errors. In JavaScript 
engines they commonly arise because of comprehensive optimizations. JavaScript is a 
loosely typed language, but for optimization reasons the engine stores internally precise type 
information. For example, a JavaScript developer can create an array and store integers, 
double values or objects in it, change the size of the array or just access an element at a 
very high index and the developer would not notice that types internally change.  
However, under the hood, the engine tracks the types of stored elements. If only integers 
are stored, it creates internally a special array which just stores SMIs (small integers). When 
a floating-point value gets assigned, the type changes to a more generic one to store 
numbers as doubles. When an object or a string gets assigned, the most generic element 
type is used where double values and objects are stored in separate heap objects and only 
pointers to the heap objects are stored in the array. The engine can therefore store a double 
value as a raw floating-point number using IEEE 754 encoding or as a pointer to a heap 
object which stores the value. 
The exact implementation depends on the browser. The above explanation corresponds to 
the v8 engine which stores pointers to heap objects as tagged pointers. Since pointers in v8 
are always word-aligned, the least significant bit can be ignored and can therefore be used 
to mark pointers. Since SMI values just use 32-bits, they can be stored in the upper 32 bits 
76 https://ssd-disclosure.com/archives/3765/ssd-advisory-firefox-javascript-type-confusion-rce 
77 https://github.com/phoenhex/files/blob/master/exploits/hack2win2018-firefox-rce/exploit.html 
78 https://github.com/niklasb/sploits/blob/master/firefox/rce-register-misalloc.js 
79 https://youtu.be/OHjq9Y66yfc?t=1456 
41 
on 64-bit systems which leaves the lowest bits set to zero. With pointer compression 80 a 
SMI value can just store 31-bit integers and the actual value is shifted one bit to the left to 
set the least significant bit to zero. Pointer compression is discussed in more depth in chapter 
4.5.3. Using this least significant bit, the engine can differentiate between SMIs and pointers. 
This has the advantage that an integer must not be stored in a heap object and basic 
arithmetic operations, such as incrementing a SMI, do not lead to a new heap allocation. 
However, an IEEE 754 encoded double value can look similar to a pointer because the least 
significant bit could be zero or one depending on the floating-point value. This means such 
a value could be interpreted as a floating-point value or as a pointer, depending on the type 
stored in fields such as the elements-kind field in the object’s main chunk. Confusing these 
types results in strong primitives because pointers can be read as double values and double 
values can be used to create pointers to fake in-memory objects. The incorrect interpretation 
of these values is the source of many recent vulnerabilities. Other vulnerabilities are often 
first turned to such an incorrect interpretation because it leads to powerful exploitation 
primitives. This technique is used in nearly every JavaScript engine exploit released in the 
last years. 
Other browsers such as JSC or SpiderMonkey do not use tagged pointers. Instead, a 
technique named NaN-boxing 81 is used. This technique takes advantages of the fact that 
IEEE 754 defines multiple bit patterns to encode the NaN (not-a-number) value. A subset of 
these bit patterns can be used to store SMIs and pointers.  
Other internal types represent if all element slots in the array are in-use or if the array 
contains holes in which case the type changes to a HOLEY version. Another difference can 
occur in the in-memory representation of array elements. For example, if the array is stored 
as a contiguous buffer or as a dictionary. If the array is sparse because only one very high 
index is in-use, storing it contiguous would waste a lot of memory and a dictionary is therefore 
a better data structure. A type-confusion between these two storage methods results in OOB 
memory access because a dictionary uses less space. Interpreting a dictionary as 
contiguous array therefore results in OOB access. 
80 https://v8.dev/blog/pointer-compression 
81 https://brionv.com/log/2018/05/17/javascript-engine-internals-nan-boxing/ 
42 
Examples: 
Chromium issue 992914 (2019) – Type-Confusion in v8 map migration  
01: function trigger() { 
02:    const obj1 = { foo: 1.1 };   // create an object of type map1 
03:    // The .seal() method prevents new properties from being added to the object. 
04:    // The next line changes the map to map2 (which has elements_kind set to 
05:    // HOLEY_SEALED_ELEMENTS) and elements points to a FixedArray[] 
06:    Object.seal(obj1);     
07: 
08:    const obj2 = { foo: 2.2 };   // create a second object of type map1 
09:    // The .preventExtensions() method prevents new properties from ever being  
10:    // added to an object (prevents future extensions to the object). 
11:    // The next line changes the map to map3 (which has elements_kind  
12:    // DICTIONARY_ELEMENTS) and elements points to a NumberDictionary[] 
13:    Object.preventExtensions(obj2);  
14: 
15:    // The next line creates a new map map4 but the types keep the same     
16:    // (elements_kind is  DICTIONARY_ELEMENTS; elements points to NumberDictionary[]) 
17:    Object.seal(obj2);       
18:    // The back_pointer of map4 now points to map3 and map3 has a transition  
19:    // to map4 when .seal() is called 
20: 
21:    // The next line creates an object of type map5 which is different to map1  
22:    // because the property foo is now an Object instead of a double. 
23:    const obj3 = { foo: Object };    
24: 
25:    // The next line assigns obj2 a new map map6 which has elements_kind still  
26:    // set to DICTIONARY_ELEMENTS and elements still points to a NumberDictionary[] 
27:    // However, the map back pointer now points to map5 from obj3. That means a  
28:    // transition from map5 to map6 is added when .seal() is called 
29:    obj2.__proto__ = 0;     
30: 
31:    // Finally, by accessing a not existing index of the sealed obj1, an  
32:    // IC (inline-cache) miss happens which leads to a map transition to map5 of  
33:    // obj3 and then to map6 of obj2. After that, the map of obj1 has elements_kind  
34:    // set to DICTIONARY_ELEMENTS, but the elements pointer was not updated 
35:    // and is still FixedArray[]. The elements_kind of DICTIONARY_ELEMENTS  
36:    // should always point to NumberDictionary[]. This leads to a type confusion and  
37:    // a fully controlled FixedArray[] can be interpreted as NumberDictionary[]. 
38:    obj1[5] = 1; 
39: } 
40: trigger();  
43 
Figure 3: Map transition tree which leads to the vulnerability 
“This is indeed complicated.”  82  
The bug is triggered by a logic flaw in the map transitions. In v8 objects of the same type 
share the same map. A map describes the object like the name, type and order of properties. 
In other engines a map is often referenced as the shape or as the hidden class of an object. 
Figure 3 illustrates the map transitions generated by the PoC. 
When a property is added or modified a new map is created and a transition is created to 
link the old to the new map. If the same operation is performed on another object, which has 
the old map configured, the transition can be followed to find the new map which is then 
reused. Then both objects can share the same map because both use the same properties 
in the same order. 
Elements are typically stored in a plain array like in a FixedArray. However, if most indexes 
are not in-use, the sparse array would consume unnecessarily memory. In such a case the 
elements type can change to a dictionary where the index is used as a key. A similar affect 
is triggered when the preventExtensions function is called which changes the type to a 
dictionary. To differentiate between the two cases the elements-kind variable in the map 
must be updated to DICTIONARY_ELEMENTS for dictionaries or to an array-like type such 
as HOLEY_ELEMENTS or HOLEY_SEALED_ELEMENTS. The vulnerability occurs 
82 https://bugs.chromium.org/p/chromium/issues/detail?id=992914 
44 
because a logic bug allows to create a map transition which changes elements-kind to 
DICTIONARY_ELEMENTS but which does not update the underlying type of the elements 
array. This allows to interpret a FixedArray as NumberDictionary which can be exploited to 
manipulate the dictionary capacity. 
Initially, the NumberDictionary has a capacity for zero elements and therefore space for 
elements afterwards is not allocated. Since this data structure is confused with a FixedArray 
and the elements of the FixedArray are fully controllable, overwriting them changes the fields 
of the NumberDictionary. This allows to modify the capacity of the NumberDictionary. Figure 
4 visualizes the attack. 
By allocating immediately afterwards a fixed double array, the data can be accessed as 
double values or as tagged objects via the dictionary. This can be used to read object 
pointers as double values to leak their address and it can be used to fake objects in-memory 
by writing a double value. Faked in-memory objects can immediately be turned into arbitrary 
read- and write-primitives which leads to full code execution. An alternative solution is to 
delete an element from the dictionary in which case the entry gets overwritten with a pointer 
to the the_hole object. By using the length of the adjacent fixed double array as index, the 
length will be overwritten with the_hole which leads to an out-of-bounds access in the double 
array which can be turned to arbitrary read and write. 
Figure 4: Exploitation of the type confusion 
The bug was found 83 by Groß with the fuzzilli fuzzer and independently by two anonymous 
researchers 84 85. The bug was first reported on 2019-08-12. A commit with a temporary fix 
83 https://bugs.chromium.org/p/chromium/issues/detail?id=992914 
84 https://bugs.chromium.org/p/chromium/issues/detail?id=997997 
85 https://bugs.chromium.org/p/chromium/issues/detail?id=993630 
45 
was pushed upstream on 2019-08-20. Bug reports were initially hidden, however, commit 
messages are publicly available and therefore attackers can create an exploit based on 
them. The next stable release, Chrome version 77, was shipped on 2019-09-10. This left a 
22-day gap for attackers to exploit the vulnerability. Exodus Intelligence developed during 
this gap an exploit 86 and published it together with a blogpost 87 for demonstration one day 
before the fixed Chrome version 77 was released. 
In 2019 4.39 billion active internet users were counted 88. Based on browser usage statistics 
collected by W3schools 89 81.2 percent of all internet users were affected by the vulnerability 
in August 2019 because Chrome version 77 was not released at that time. This means that 
approximately 3.5 billion internet users could potentially be exploited because enough 
information was publicly available to develop an exploit. Since users do not immediately 
update their browsers, 62.2 percent of users used Chrome prior to version 77 in September 
2019 although a patch was already available. This left another 2.7 billion users exposed to 
the vulnerability. In October 2019 most users installed the update, but still 10.2 percent used 
a vulnerable version and were therefore affected. 
A CVE number was never assigned to this vulnerability because it was internally discovered 
90. 
To assess the feasibility and difficulty of developing an exploit for the vulnerability, the author 
of this thesis wrote an exploit just based on the public available commit message and 
regression tests. It was possible to write a reliable exploit within two business days and it 
can therefore be concluded that a proficient and determined attacker could had started 
exploitation within the first days the public commit message was released. 
Generalization for variation analysis: 
• 
Instead of creating random objects and invoking random operations on them, a fuzzer 
should sometimes create objects with same internal data types. Operations should 
be performed in a similar order to stress the transition tree creation. Additional 
operations should be added for just one or a few of these objects like done in line 13. 
• 
A fuzzer should create last operations like the assignment of zero to the __proto__ 
property as shown in line 29. This leads to the creation of a new transition like 
explained above.  
86 https://github.com/exodusintel/Chrome-Issue-992914-Sealed-Frozen-Element-Kind-Type-Confusion-RCE-
Exploit/tree/master/chrome_992914 
87 https://blog.exodusintel.com/2019/09/09/patch-gapping-chrome/ 
88 https://wearesocial.com/blog/2019/01/digital-2019-global-internet-use-accelerates 