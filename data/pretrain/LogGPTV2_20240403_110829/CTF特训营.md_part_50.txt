17.1.1大小修改法
605/1144
正在加载中
---
## Page 606
CTF特训营：技术详解、解题方法与
17.1.2函数替换法
606/1144
17.1.2函数替换法
对于一些特殊的漏洞，比如格式化字符串漏洞，我们可以将
printf函数替换为puts函数，不过这种方法通常要求程序本身带有能替
换的函数。以图17-4所示的反编译代码为例。
1int do_fmt（)
2
m
int result;// eax
4
L
while（1）
6
{
7
read（0,buf,0xC8u);
result=strncmp(buf，"quit",4u）;
6
if（!result）
10
break;
11
printf(buf);
12
13
return result;
format:char[2o0]
14
1
int play()
m
puts(
4
puts("
Magic
echo Server
5
puts(
L
returndo_fmt(）;
---
## Page 607
CTF特训营：技术详解、解题方法与
17.1.2函数替换法
607/1144
图17-4程序主逻辑的反编译代码
如图17-4所示，此时do-fmt（函数的printf是一个明显的格式化字
符漏洞，在play函数里存在对puts函数的调用，因此，这里可以将
printf替换为puts函数，具体步骤如下。
1）确定计算方法：新地址=目标地址（这里就是puts的plt地
址）-当前被修改指令的下一指令地址。
2）获取puts的plt地址，该地址为0x80483B0，如图17-5所示。
plt:e8e483Be;int puts（const char*s)
p1t:080483Be
_puts
proc near
CODE XREF:play+E↓p
plt:080483B0
;play+1E+p ...
plt:080483B0
plt:080483B0
dwordptr
plt:080483B0
plt:080483B0
jmp
ds:off_804A014
图17-5puts的plt地址
3）确定被修改指令的下一指令地址为0x8048540，如图17-6所
示。
---
## Page 608
CTF特训营：技术详解、解题方法与
17.1.2函数替换法
608/1144
.text:08048501 1oc_8048501:
.text:08048501
XREF
do_fmt+481
sub
esp,4
.text:08048504
push
eC8h
;nbytes
.text:08048509
push
offset buf
;buf
text:0804850E
push
;fd
text:08048510
cal1
.text:08048515
_read
add
esp, 1eh
text:08048518
sub
esp,4
text:0804851B
push
text:0804851D
push
offset s2
"quit“
text:08048522
push
offset buf
;s1
text :08048527
cal1
_strncmp
text:0804852C
add
esp, 10h
text:0804852F
test
eax, eax
text:08048531
jz
short 1oc_8848545
text:08048533
sub
esp,ech
text:08048536
push
offset buf
;format
text:08048538
cal1
_printf
text:08048540
add
esp, 10h
.text:08048543
Jmp
short 1oc_8e48501
图17-6
修改位置的反汇编代码
4）计算出结果，并进行补码运算，如下：
>>>hex(0xfffff+(0x80483B0-0x8048540)+1)
'Oxfffe70'
5）修改并保存：E860FEFF->E870FEFF，如图17-7所示。
PatchBytes
×
Address
0x804853B
File offset
0x53B
Original value
E860FEFFFF83C410EBBC9090C9C35589
Values
E87DFEFFFF83C410EBBC9090C9C35589
OK
Cancel
Help
---
## Page 609
CTF特训营：技术详解、解题方法与
17.1.2函数蓄换法
609/1144
图17-7PatchByte的设置
结果展示如图17-8所示。
int
do_fmt（）
int result;// eax
4
while（1）
LC
{
read（0,buf，0xC8u);
result=strncmp(buf，"quit"，4u);
6
if（!result）
break;
puts(buf);
r~
return result;
1
图17-8patch后的反编译代码
保存到二进制文件。
---
## Page 610
CTF特训营：技术详解、解题方法与
17.1.3.eh_frame段Patch法
610/1144
17.1.3
ehframe段Patch法
首先，在“ehframe”段写上相应的Patch代码，然后jmp到相
应位置，最后再jmp到原处继续之后的逻辑，如图17-9所示。
3=
_readfsqword（ex28u);
if（dword_6041Aθ)
10
printf("Please enter the index of scordboard:");
11
read（e,&buf,8uLL);
12
v1=atoi（&buf);
13
if（note[2*v1]）
14
free(note[2 *v1]）;
15
.text:0000000000402363
mov
eax,[rbp+var_14]
.text:0000000000402366
cdqe
.text:0000000000402368
sh1
rax,
4
text:000000000040236C
mov
rdx,rax
text:000000000040236F
lea
rax,note
text:0000000000402376
mov
ra,[rdx+rax]
text:000000000040237A
mov
rdi,rax
;ptr
.text:000000000040237D
cal1
_free
图17-9漏洞点的关键代码
如图17-9所示，第14行可能存在uaf风险，需要将释放后的指针
置为0，可在.eh_frame段中将指针设为0，此时free的对象为[rdx+rax]，
并将该对象赋给rdi。在执行Patch的时候，仍需要保证不影响free的
对象。因此在.eh_frame中编写的代码如图17-10所示。
---
## Page 611
CTF特训营：技术详解、解题方法与
17.1.3.eh_frame段Patch法
611/1144
me:00000000084034c8
一
me:00000000004034c8 sub_4034c8
proc near
；CODE）
me:00000000004034c8
mov
rdi,[rdx+rax]
me:00000000004034CC
mov
qword ptr[rdx+rax]，θ
me:00000000004034D4
jmp
1oc_40237D
me:00000000004034D4sub_4034C8
endp
me:00000000004034D4
me:00000000004034D9
图17-10Patch的主要代码
将原有指针清零，最后再jmp回原逻辑。
---
## Page 612
CTF特训营：技术详解、解题方法与
17.1.4其他方法
612/1144
17.1.4其他方法
通常而言，我们除了可以利用IDAKeypatch手动进行漏洞修补之
外，还可以利用一些已有的半自动化工具进行Patch操作，如
lief(https://github.com/lief-project/LIEF)
或
patchkit (https://
github.com/lunixbochs/patchkit)等。
---
## Page 613
CTF特训营：技术详解、解题方法与.
17.2攻防策略
613/1144
17.2攻防策略
1.服务上下线策略
很多人在看到自己的服务被打岩之后就下线，防止被植入后门不
好维护，但是这种处理方式其实是错误的，需要根据具体情况来进行
防守。
如果在赛场上，某道题自只有自己一支战队（或只有较少战队）
的flag被拿走提交，特别是在自己战队排名靠前的情况下，此时可以
选择将服务下线（也就是将二进制服务删除掉），这样做可以达到两
个自的：减少被植入的后门，减少修补漏洞后的后门清理工作；在不
岩掉服务的情况下丢失的分数会被排名靠前的战队独享，但是服务岩
掉后，可以将分数均摊给其他战队，缩小与前面战队的分数差
如果大面积出现服务岩掉的情况，那么在保证自己的服务不会被
打岩的情况下，可以选择将服务上线，让前面的人拿自己的分数，同
时自己也可以获得很多别人岩掉服务的分数
如果想要拿到exp流量或者提示流量也应该将服务上线
---
## Page 614
CTF特训营：技术详解、解题方法与
17.2攻防策略
614/1144
2.后门植入策略
后门大概可分为两种。一种是持久性后，通过crontab、at等各
种方式来起后门，或者直接写”ssh”。此类后门可能是直接将提交
的脚本都写进去，也就是说在流量里你甚至都看不到flag丢失的流量
另外一种后门是破坏性后门，通过killall指令，或者直接通过
forkbang来使gamebox的服务宕掉，所以此时会出现在拿flag的同时
服务也岩掉的情况。
3.后门清理策略
后门清理可以分成几种方式。如果是Web题目，要在题自权限和
CTF权限上清理后门。二进制题自的后门清理方法大都具有一定的套
路，su到题目权限上，然后直接killal即可。在清理后门和进程后要
注意清理crontab和at等位置。
4.流量策略
通常来说，选手会拿到两种流量。一种是别的队伍攻击你的流量
另外一种是在大家都做不出题目的时候，主办方进行进攻发送的提示
流量。
---
## Page 615
CTF特训营：技术详解、解题方法与.
17.2攻防策略
615/1144
流量是非常重要的信息。通过定位丢失flag的流量可以快速发现
别的队伍的exp。所以现在很多队伍会对流量进行混淆操作，让其他
队伍难以从流量中复现exp。分析完流量后可以进行二进制文件的修
补，并复现exp。这个速度也是值得锻炼的，特别是在中层徘徊的队
伍，大部分的exp靠复现，大部分的Patch靠流量。
还有一种情况刚才也提到了，在流量中你会发现没有flag去失的
流量，但是自己的flag却被提交了，这很可能是因为有后门（需要通
过直接在gamebox上提交flag达到隐蔽的目的）。此时需要通过后门
清理的方式来解决此类问题。
5.强弱者策略
二进制漏洞的挖癌和利用的速度直接决定了一个战队在A&D模式
中的强弱。弱队在觉得自己不能拿到分数的情况下，应该紧盯强队的
动作，在攻击动作完成的2～3轮内完成Patch操作，在4～5轮内完成
复现，这个速度越快你的排名就越靠前。所以这也决定了除了前2～
3名之外，真他队伍的游戏模式会发生根本上的变化，从漏洞挖掘变
成了流量分析。
上述工作中很多都可以通过脚本自动化完成。总结来说，有如下
---
## Page 616
CTF特训营：技术详解、解题方法与
17.2攻防策略
616/1144
几个可以自动化实现的点。
1）流量抓取和分析：很多强队都用自己的服务来进行流量分析、
定位flag等，这在现场会节约很多时间。
2）后门和管理：在赛前可以准备很多后门方便后续使用。
3）exp管理：实现exp的自动化，节约从exp到批量脚本的时
间；同时应尽可能实现混淆。
相关知识链接推荐
与PWN相关的学习资料列举如下，读者可自行阅读。
漏洞学习系列实验：http://security.cs.rpi.edu/courses/binexp