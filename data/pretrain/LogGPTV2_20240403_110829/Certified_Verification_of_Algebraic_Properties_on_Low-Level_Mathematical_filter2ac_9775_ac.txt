Similarly, algebraic and range predicates must refer to most re-
cent copies of variables. They are transformed according to the finite
mapping θ. Thanks to the formalization of finite mappings in Coq.
Both algorithms are easily specified in Gallina. Let SSAPreda and
SSAPredr denote the transformations for bPreda and bPredr respec-
tively. The function SSAPred then transforms the algebraic part
30:
31:
32:
33:
34:
35:
36:
2⟩
1 + aθ
2⟩
1 + aθ
1 + aθ
2 + yθ (y )⟩
1 + aθ
2 + yθ (y )⟩
(cid:57)SSAPredr(θ, qr ).
case v ← a1 + a2:
case c v ← a1 + a2:
case v ← a1 + a2 + y:
match s with
case v ← a:
(cid:57)qr ) ≜ SSAPreda(θ, qa )(cid:57)
and the range part of a predicate separatedly with SSAPreda and
SSAPredr, that is, given qa ∈ bPreda, qr ∈ bPredr, and a mapping
θ, SSAPred(θ, qa(cid:57)
Algorithm 3 Static Single Assignment Transformation for State-
ments
1: function SSAStmt(θ, s)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ⟩
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ
θ′ ← θ[c ← θ (c) + 1]
θ′′ ← θ′[v ← θ (v) + 1]
return ⟨θ′′, cθ′(c ) vθ′′(v ) ← aθ
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ
case c v ← a1 + a2 + y:
θ′ ← θ[c ← θ (c) + 1]
θ′′ ← θ′[v ← θ (v) + 1]
return ⟨θ′′, cθ′(c ) vθ′′(v ) ← aθ
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ
θ′ ← θ[vh ← θ (vh ) + 1]
θ′′ ← θ′[vl ← θ (vl ) + 1]
θ′′(vl )
return ⟨θ′′, v
v
l
case v ← a ≪ n:
θ′ ← θ[v ← θ (v) + 1]
return ⟨θ′, vθ′(v ) ← aθ ≪ n⟩
θ′ ← θ[vh ← θ (vh ) + 1]
θ′′ ← θ′[vl ← θ (vl ) + 1]
θ′′(vl )
return ⟨θ′′, v
l
case vh vl ← (a1.a2) ≪ n:
θ′ ← θ[vh ← θ (vh ) + 1]
θ′′ ← θ′[vl ← θ (vl ) + 1]
θ′′(vl )
return ⟨θ′′, v
l
case vh vl ← a1 × a2:
case vh vl ← a@n:
← (aθ
1 . aθ
2 ) @ n⟩
37:
38:
39:
40:
41: end function
case v ← a1 × a2:
1 − aθ
2⟩
1 × aθ
2⟩
θ′(vh )
h
v
← aθ @ n⟩
θ′(vh )
h
← aθ
1 × aθ
2⟩
case v ← a1 − a2:
θ′(vh )
h
v
Statement transformation is slightly more complicated (Algo-
rithm 3). For atoms and variables on the right hand side, they are
transformed by the given finite mapping θ. The algorithm of state-
ment transformation then updates θ and replaces assigned variables
with their latest copies.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA19781:
2:
3:
4:
5:
0 ← x0
r1
0;
1 ← x0
r1
1;
2 ← x0
r1
2;
3 ← x0
r1
3;
4 ← x0
r1
4;
6:
7:
8:
9:
10:
0 ← r1
r2
1 ← r1
r2
2 ← r1
r2
3 ← r1
r2
4 ← r1
r2
0 + 0xF F F F F F F F F F F DA;
1 + 0xF F F F F F F F F F F F E;
2 + 0xF F F F F F F F F F F F E;
3 + 0xF F F F F F F F F F F F E;
4 + 0xF F F F F F F F F F F F E;
11:
12:
13:
14:
15:
0 ← r2
r3
1 ← r2
r3
2 ← r2
r3
3 ← r2
r3
4 ← r2
r3
0 − y0
0;
1 − y0
1;
2 − y0
2;
3 − y0
3;
4 − y0
4;
Figure 4: Subtraction bSubSSA in Static Single Assignment Form
It is straightforward to transform programs to static single as-
signment form (Algorithm 4). Using the initial mapping θ0 from
variables to 0, the algorithm starts from the first statement and
obtains an updated mapping with the statement in static single
assignment form. It continues to transform the next statement with
the updated mapping. Note that our algorithm works for any initial
mapping but we choose θ0 to simplify our Coq proof.
Algorithm 4 Static Single Assignment for Programs
1: function SSAProg(θ, p)
2:
3:
4:
5:
6:
7:
8: end function
⟨θ′, s′⟩ ← SSAStmt(θ, s)
⟨θ′′, pp′′⟩ ← SSAProg(θ′, pp)
return ⟨θ′′, s′; pp′′⟩
case ϵ: return ⟨θ, ϵ⟩
case s; pp:
match p with
Using the specifications of Algorithm 3 and 4 in Gallina, prop-
erties of these algorithms are formally proven in Coq. We first
show that Algorithm 4 preserves well-formedness and produces a
program in static single assignment form.
Lemma 4.1. Let θ0 (v) = 0 for every v ∈ Var and p ∈ bProg a well-
formed program. If ⟨ ˆθ, ˆp⟩ = SSAProg(θ0, p), then ˆp is well-formed
and in static single assignment form.
The next theorem shows that our transformation is both sound
and complete. That is, a specification is valid if and only if its
corresponding specification in static single assignment form is
valid.
Theorem 4.2. Let θ0(v) = 0 for every v ∈ Var. For every q, q′ ∈
bPred and p ∈ bProg,
|= (|q|) p (|q′|) if and only if |= (|SSAPred(θ0, q)|) ˆp (|SSAPred( ˆθ, q′)|)
where ⟨ ˆθ, ˆp⟩ = SSAProg(θ0, p).
Example. Figure 4 gives the subtraction program bSub in static
single assignment form. Starting from 0, the index of a variable is
incremented when the variable is assigned to an expression. After
the static single assignment translation, the variables xi’s, yi’s are
indexed by 0 and ri’s are indexed by 3 for 0 ≤ i ≤ 4. Subsequently,
variables in pre- and post-conditions of the specification for subtrac-
tion need to be indexed. Let ˆqa ≜ ⊤, ˆqr ≜ 0 ≤ x0
0, x0
4, y0
3, x0
2, x0
1, x0
0,
0 ) −
a ≜ radix51V (x0
y0
4, x0
1, y0
3, x0
3, y0
2, x0
1, x0
0 ) ≡ radix51V (r3
3 , r3
radix51V (y0
2 , r3
1 , r3
0 ) mod ϱ, and
q′
r ≜ 0 ≤ r3
4 < bv64 (254). The corresponding specifi-
cation of in static single assignment form is then
′
r |).
2, y0
1, y0
2 , r3
3 , r3
(| ˆqa ∧ ˆqr |)bSubSSA(| ˆq
4 ≤ bv64 (251 +Z215), ˆq′
3, y0
4, y0
1 , r3
0 , r3
′
a ∧ ˆq
2, y0
4 , r3
4.2 zCryptoLine
Algebraic specifications in bvCryptoLine are transformed to mod-
ular polynomial equation entailment problems via an intermediate
language zCryptoLine. A program in zCryptoLine is but a straight
line of variable assignments on expressions. Consider the following
syntactic classes:
zExpr
::= Z | Var | −zExpr | zExpr+zExpr | zExpr−zExpr
| zExpr×zExpr | Pow(zExpr, N)
We allow exact integers as constants in zCryptoLine. Variables
are thus integer variables. An expression can be a constant, a vari-
able, or a negative expression. Additions, subtractions, and multi-
plications of expressions are available. The expression Pow(e, n)
denotes en for any expression e and natural number n. More for-
mally, let zSt ≜ Var → Z and µ ∈ zSt be a state. That is, a state µ in
zCryptoLine is a mapping from variables to integers. Define the
semantic function [[e]]Z (µ) as follows.
[[i]]Z (µ) ≜ i for i ∈ Z
[[v]]Z (µ) ≜ µ (v) for v ∈ Var
[[−e]]Z (µ) ≜ −Z[[e]]Z (µ)
[[e0 + e1]]Z (µ) ≜ [[e0]]Z (µ) +Z [[e1]]Z (µ)
[[e0 − e1]]Z (µ) ≜ [[e0]]Z (µ) −Z [[e1]]Z (µ)
[[e0 × e1]]Z (µ) ≜ [[e0]]Z (µ) ×Z [[e1]]Z (µ)
[[Pow(e, n)]]Z (µ) ≜ ([[e]]Z (µ))n
In zCryptoLine, only assignments are allowed. The statement
v ← e assigns the value of e to the variable v. For bounded additions,
multiplications, and right shifting, they are modeled by the con-
struct Split in zCryptoLine. The statement [vh, vl ] ← Split(e, n)
splits the value of e into two parts; the lowest n bits are stored in vl
and the remaining higher bits are stored in vh. Consider the relation
zTr ⊆ zSt × zStmt × zSt defined by (µ, v ← e, µ[v ← [[e]]Z (µ)]) ∈
zTr, and (µ, [vh, vl ] ← Split(e, n), µ[vh ← hi][vl ← lo]) ∈ zTr
where hi = ([[e]]Z (µ) − lo) ÷ 2n and lo = [[e]]Z (µ) mod 2n. Intu-
itively, (µ, s, µ′) ∈ zTr denotes that the state µ transits to the state
µ′ after executing the statement s.
zStmt
zProg
::= Var ← zExpr | [Var, Var] ← Split(zExpr, N)
::= ϵ | zStmt; zProg
A program is a sequence of statements. Again, we denote the empty
program by ϵ. The semantics of a program is defined by the relation
zTr∗ ⊆ zSt × zProg × zSt where (µ, ϵ, µ) ∈ zTr∗ and (µ, s; p, µ′′) ∈
zTr∗ if there is a µ′ with (µ, s, µ′) ∈ zTr and (µ′, p, µ′′) ∈ zTr∗. We
write µ
=⇒ µ′ when (µ, p, µ′) ∈ zTr∗.
p
The predicates zPred in zCryptoLine share the same syntax as
the algebraic predicates in bvCryptoLine but are evaluated on zSt
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA19791:
2:
3:
4:
5:
0 ← x0
r1
0;
1 ← x0
r1
1;
2 ← x0
r1
2;
3 ← x0