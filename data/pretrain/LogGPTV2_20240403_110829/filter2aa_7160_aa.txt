# Encoding 类
---
- https://www.kancloud.cn/imxieke/ruby-base/107307
---
# Ruby 的编码与字符串
字符编码是计算机进行字符操作的基础，字符编码有多种，而且即使是在同一个程序中，有时候输入 / 输出的字符编码也有可能不一样。例如程序输入是 `UTF-8` 字符编码，而输出却是 `Shift_JIS` 字符编码等情况。虽然“あ”的 `UTF-8` 的字符编码与 `Shift_JIS` 的字符编码实际上是不同的，但经过适当的转换，也是可以编写这样的程序的。
至于程序如何处理字符编码，不同的编程语言有不同的解决方案。Ruby 的每个字符串对象都包含“字符串数据本身”以及“该数据的字符编码”两个信息。其中，关于字符编码的信息即我们一般所讲的编码。
创建字符串对象一般有两种方法，一种是在脚本中直接以字面量的形式定义，另外一种是从程序的外部（文件、控制台、网络等）获取字符串数据。数据的获取方式决定了它的编码方式。截取字符串的某部分，或者连接多个字符串生成新字符串等的时候，编码会继承原有的字符串的编码。
程序向外部输出字符串时，必须指定适当的编码。
Ruby 会按照以下信息决定字符串对象的编码，或者在输入 / 输出处理时转换编码。
# 脚本编码与魔法注释
Ruby 脚本的编码就是通过在脚本的开头书写魔法注释来指定的。
脚本自身的编码称为脚本编码（script encoding）。脚本中的字符串、正则表达式的字面量会依据脚本编码进行解释。脚本编码为 EUC-JP 时，字符串、正则表达式的字面量也都为 EUC-JP。同样，如果脚本编码为 Shift_JIS，那么字符串、正则表达式的字面量也为 Shift_JIS。
我们把指定脚本编码的注释称为魔法注释（magic comment）。Ruby 在解释脚本前，会先读取魔法注释来决定脚本编码。
魔法注释必须写在脚本的首行（第 1 行以 #! ～ 开头时，则写在第 2 行）。下面是将脚本编码指定为 UTF-8 的例子。
```ruby
# encoding: utf-8
```
> 在 Unix 中，赋予脚本执行权限后，就可以直接执行脚本。这时，可以在文件开头以 `#!` 命令的路径 的形式来指定执行脚本的命令。在本书的例子中，我们经常使用 >ruby 脚本名 这样的形式来表示 在命令行执行脚本的命令为 ruby，但若像“#! /usr/bin/ruby”这样，在文件开头写上 ruby 命令的路径的话，那么就能直接以 `>` 脚本名的形式执行脚本了。
此外，为了可以兼容 Emacs、VIM 等编辑器的编码指定方式，我们也可以像下面这样写。
```ruby
# -*- coding: utf-8 -*-        # 编辑器为Emacs 的时候
# vim:set fileencoding=utf-8:  # 编辑器为VIM 的时候
```
程序代码的编码会严格检查是否与脚本编码一致。因此，有时候直接写上日语的字符串后就会产生错误。
```ruby
# encoding: US-ASCII
a = 'こんにちは'    #=> invalid multibyte char (US-ASCII)
```
由于 US-ASCII 不能表示日语的字符串，因此会产生错误。在 Ruby1.9 中，没有魔法注释时默认脚本编码也为 US-ASCII，因此也会产生这个错误。
为了使日语或中文字符能正常显示，必须指定适当的编码。而在 Ruby2.0 中，由于没有魔法注释时的默认脚本编码为 UTF-8，因此如果代码是以 UTF-8 编码编写的话，那么就无须使用魔法注释了。
但有时仅使用魔法注释是不够的。例如，使用特殊字符 `\u` 创建字符串后，即使脚本编码不是 UTF-8，其生成的字符串也一定是 UTF-8。
```ruby
# encoding: EUC-JP
a = "\u3042\u3044"
puts a          #=> "あい"
p a.encoding    #=> #
```
因此，必须使用 `encode!` 方法明确进行编码转换。
```ruby
# encoding: EUC-JP
a = "\u3042\u3044"
a.encode!("EUC-JP")
p a.encoding    #=> #
```
这样，变量 `a` 的字符串的编码也就变为 EUC-JP 了。
# Encoding 类
我们可以用 `String.encoding` 方法来调查字符串的编码。`String.encoding` 方法返回 `Encoding` 对象。
```ruby
p "こんにちは".encoding #=> #
```
本例中的“こんにちは”字符串对象的编码为 UTF-8。
> 日语 Windows 环境中的字符编码一般为 Windows-31J。这是 Windows 专用的扩展自 Shift_JIS 的编码，例如，Shift_JIS 中原本并没有①。Windows-31J 还有一个别名叫 CP932（Microsoft code page932 的意思），在互联网上就字符编码讨论时，有时候会用到这个名称。
在脚本中使用不同的编码时，需要进行必要的转换。我们可以用 `String.encode` 方法转换字符串对象的编码。
```ruby
str = "こんにちは"
p str.encoding     #=> #
str2 = str.encode("EUC-JP")
p str2.encoding    #=> #
```
在本例中，我们尝试把 UTF-8 字符串对象转换为新的 EUC-JP 字符串对象。
在操作字符串时，Ruby 会自动进行检查。例如，如果要连接不同编码的字符串则会产生错误。
```ruby
# encoding: utf-8
str1 = "こんにちは"
p str1.encoding    #=> #
str2 = "あいうえお".encode("EUC-JP")
p str2.encoding    #=> #
str3 = str1 + str2 #=> incompatible character encodings: UTF-8
                   #=> and EUC-JP(Encoding::CompatibilityError)
```
为了防止错误，在连接字符串前，必须使用 `encode` 方法等把两者转换为相同的编码。
还有，在进行字符串比较时，如果编码不一样，即使表面的值相同，程序也会将其判断为不同的字符串。
```ruby
# encoding: utf-8
p "あ" == "あ".encode("Shift_JIS")    #=> false
```
另外，在本例中，用 `String.encode` 指定编码时，除了可以使用编码名的字符串外，还可以直接使用 `Encoding` 对象来指定。
**Encoding 类的方法**
接下来，我们将会介绍 `Encoding` 类的方法。
- `Encoding.compatible?(str1, str2)`
    检查两个字符串的兼容性。这里所说的兼容性是指两个字符串是否可以连接。可兼容则返回字符串连接后的编码，不可兼容则返回 `nil`。
    ```ruby
    p Encoding.compatible?("AB".encode("EUC-JP"),
                        "あ".encode("UTF-8"))    #=> #
    p Encoding.compatible?("あ".encode("EUC-JP"),
                        "あ".encode("UTF-8"))    #=> nil
    ```
    AB 这个字符串的编码无论是 EUC-JP 还是 UTF-8 都是一样的，因此，将其转换为 EUC-JP 后也可以与 UTF-8 字符串连接；而あ这个字符串则无法连接，因此返回 `nil`。
- `Encoding.default_external`
    返回默认的外部编码，这个值会影响 `IO` 类的外部编码。
- `Encoding.default_internal`
    返回默认的内部编码，这个值会影响 `IO` 类的内部编码。
- `Encoding.find(name)`
    返回编码名 `name` 对应的 `Encoding` 对象。预定义的编码名由不含空格的英文字母、数字与符号构成。查找编码的时候不区分 `name` 的大小写。
    ```ruby
    p Encoding.find("Shift_JIS")   # => #
    p Encoding.find("shift_JIS")   # => #
    ```
    特殊的编码名
    名称	    | 意义
    - | -
    locale	    | 根据本地信息决定的编码
    external	| 默认的外部编码
    internal	| 默认的内部编码
    filesystem	| 文件系统的编码
- `Encoding.list`
- `Encoding.name_list`
    返回 Ruby 支持的编码一览表。`list` 方法返回的是 `Encoding` 对象一览表，`Encoding.name_list` 返回的是表示编码名的字符串一览表，两者的结果都以数组形式返回。
    ```ruby
    p Encoding.list
        #=> [#, #, ...
    p Encoding.name_list
        #=> ["ASCII-8BIT", "UTF-8", "US-ASCII", "Big5", ...
    ```
- `enc.name`
    返回 `Encoding` 对象 `enc` 的编码名。
    ```ruby
    p Encoding.find("shift_jis").name    #=> "Shift_JIS"
    ```
- `enc.names`
    像 EUC-JP、eucJP 这样，有些编码有多个名称。这个方法会返回包含 `Encoding` 对象的名称一览表的数组。只要是这个方法中的编码名称，都可以在通过 `Encoding.find` 方法检索时使用。
    ```ruby
    enc = Encoding.find("Shift_JIS")
    p enc.names    #=> ["Shift_JIS", "SJIS"]
    ```
**ASCII-8BIT 与字节串**
ASCII-8BIT 是一个特殊的编码，被用于表示二进制数据以及字节串。因此有时候我们也称这个编码为 BINARY。
此外，把字符串对象用字节串形式保存的时候也会用到这个编码。例如，使用 `Array.pack` 方法将二进制数据生成为字符串时，或者使用 `Marsha1.dump` 方法将对象序列化后的数据生成为字符串时，都会使用该编码。
下面是用 `Array.pack` 方法，把 IP 地址的 4 个数值转换为 4 个字节的字节串。
```ruby
str = [127, 0, 0, 1].pack("C4")
p str                #=> "\x7F\x00\x00\x01"
p str.encoding       # => #
```
`pack` 方法的参数为字节串化时使用的模式，C4 表示 4 个 8 位的不带符号的整数。执行结果为 4 个字节的字节串，编码为 ASCII-8BIT。
此外，在使用 `open-uri` 库等工具通过网络获取文件时，有时候并不知道字符编码是什么。这时候的编码也默认使用 ASCII-8BIT。
```ruby
# encoding: utf-8