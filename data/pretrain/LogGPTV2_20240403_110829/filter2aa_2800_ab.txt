 libaprutil-0.so.0 => /usr/local/apache/lib/libaprutil-0.so.0 
(0xb75d6000)
 libcrypt.so.1 => /lib/libcrypt.so.1 (0xb7457000)
 libc.so.6 => /lib/tls/libc.so.6 (0xb72f8000)
 libdb-4.1.so => /lib/libdb-4.1.so (0xb74f9000)
 libdl.so.2 => /lib/libdl.so.2 (0xb742f000)
 libexpat.so.0 => /usr/lib/libexpat.so.0 (0xb74d9000)
 libgdbm.so.2 => /usr/lib/libgdbm.so.2 (0xb75bb000)
 /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0xb75eb000)
 libm.so.6 => /lib/tls/libm.so.6 (0xb7484000)
libnsl.so.1 => /lib/libnsl.so.1 (0xb7442000)
 Copy in Libraries
 cp -p /usr/local/apache/lib/libapr-0.so.0 
/usr/local/apache/lib/libaprutil-0.so.0 /jail/usr/local/apache/lib
 cp -r /lib/libcrypt.so.1 /lib/libdb-4.1.so /lib/libdl.so.2 
/lib/ld-linux.so.2 /lib/libnsl.so.1 /jail/lib
 cp -r /lib/tls/libc.so.6 /lib/tls/libm.so.6 /lib/tls/libpthread.so.0 
/lib/tls/librt.so.1 /jail/tls/lib
 cp -r /usr/lib/libexpat.so.0 /usr/lib/libgdbm.so.2 /jail/usr/lib
 Copy in Resolution Libraries and Files
 cp -p /lib/nss_files.so.1 /lib/libnss_files.so.2 
/lib/libnss_dns.so.1 /lib/libnss_dns.so.2 lib
 cat >/jail/etc/nsswitch.conf
 passwd: files
 shadow: files
 group: files
 hosts: files dns
 echo "127.0.0.1 localhost.localdomain localhost" 
>/jail/etc/hosts
 Time Zone Files
 Either copy all time zone files in:
 mkdir -p /jail/usr/share
 cp -r /usr/share/zoneinfo /jail/usr/share/
 or a single file:
 mkdir -p /jail/usr/share/zoneinfo/America
 cp -r /usr/share/zoneinfo/America/Chicago 
/jail/usr/share/zoneinfo/America
 Putting Apache into the Jail
 cp -pr /usr/local/apache2 /jail/usr/local
 Change HTTPD variable in 
/jail/usr/local/apache/bin/apachectl
 from:
 ’/usr/local/apache/bin/httpd’
 to 
 ’chroot /jail /usr/local/apache/bin/httpd’
 Now start the daemon with /usr/local/apache/bin/apachectl 
start
 mod_rewrite
 The apache module mod_rewrite was created as a general
 swiss-army knife for rewriting incoming requests.  It
 can be used as a security tool, though. 
 mod_rewrite is very general, but its simplest use looks
 like this:
 RewriteEngine on
 RewriteRule ^/bad-url$ /index.html
 Using mod_rewrite to protect .htaccess files
 We can use modrewrite to make a particular
 request fail:
 RewriteEngine on
 RewriteRule /\.htaccess - [F]
 This rewrites the URL as a -, but also causes the
 request to fail.
 Removing TRACE functionality
 We place the following in the general config file.
 RewriteEngine on 
 RewriteCondition %{REQUEST_METHOD} ^TRACE
 RewriteRule .* [F]
 mod_rewrite wrapup
 mod_rewrite is extremely flexible and extremely powerful.
 The great thing about mod_rewrite is it gives you all the 
 configurability and flexibility of Sendmail. The downside 
 to mod_rewrite is that it gives you all the configurability 
 and flexibility of Sendmail.’
 - Brian Behlendorf, Apache Group
You can pass the rewrite to an external program.
You can rewrite a given string with a randomly entry
 in a replacement table (originally used for load-balancing...)
You can set a cookie on the client’s browser.
 Advanced Web Server Security: Remove 
modules!
 We can remove modules that we’re not using.  Not all
 vulnerabilities aren’t in the core Apache code.
 Much is in the modules.
 http://httpd.apache.org/docs-2.0/mod/
 Figuring Out Which Modules to Remove
 This page allows you to look at a module and 
 see what configuration directives it provides:
 http://httpd.apache.org/docs-2.0/mod/
 This page allows you to look at configuration
 directives and see what modules provide them:
 http://httpd.apache.org/docs-2.0/mod/directives.html
 Let’s look at the  default module list in Apache on 
 Red Hat 9.
 Default Module List in Apache in RH9
mod_access.so
 Provides access control based on client hostname, IP 
 address, or other characteristics of the client request.
mod_auth.so
 User authentication using text files
mod_auth_anon.so
 Allows "anonymous" user access to authenticated areas
mod_auth_dbm.so
 Provides for user authentication using DBM files
mod_auth_digest.so
 User authentication using MD5 Digest Authentication.
 Default Module List in Apache in RH9
mod_include.so
 Server-parsed html documents (Server Side Includes)
mod_log_config.so
 Configurable-logging of the requests made to the server.
mod_env.so
 Modifies the environment which is passed to CGI scripts 
 and SSI pages.
mod_mime_magic.so
 Determines the MIME type of a file by looking at a few 
 bytes of its contents.
mod_cern_meta.so
 Older "CERN" header modification method for setting
 expires or other custom headers.
 Default Module List in Apache in RH9
mod_expires.so
 Generation of Expires HTTP headers according to config file
mod_headers.so
 Customization of HTTP request and response headers
mod_usertrack.so
 "Clickstream" cookie-based logging of individual user activity
mod_unique_id.so
 Provides an environment variable with a unique identifier 
 for each request, potentially used in webapps.
 Default Module List in Apache in RH9
mod_setenvif.so
 Allows the setting of environment variables based on 
characteristics of the request
mod_mime.so
 Associates the requested filename’s extensions with the 
 file’s behavior (handlers and filters) and content (mime-type, 
 language, character set and encoding)
mod_dav.so
 Distributed Authoring and Versioning (WebDAV) functionality
(www.webdav.org)
 Default Module List in Apache in RH9
mod_status.so
 Provides information on server activity and performance
mod_autoindex.so
 Generates directory indexes, automatically, similar to 
 the Unix ls command or the Win32 dir shell command
 Requires mod_dir.so.
mod_asis.so
 Sends files that contain their own HTTP headers
mod_info.so
 Provides a comprehensive overview of the server 
 configuration
 Default Module List in Apache in RH9
mod_cgi.so
 Execution of CGI scripts
mod_dav_fs.so
 filesystem provider for mod_dav
mod_vhost_alias.so
 Provides for virtual hosting
mod_negotiation.so
 Provides for content negotiation (best representation based 
 on browser-supplied media type, languages, character 
 set and encoding)
 Default Module List in Apache in RH9
mod_dir.so
 Provides for "trailing slash" redirects and serving directory 
index files
 Requires: mod_autoindex.so
mod_imap.so
 Server-side imagemap processing
mod_actions.so
 This module provides for executing CGI scripts based on 
media type or request method.
mod_speling.so (not a typo!)
 Attempts to correct mistaken URLs that users might have 
entered by ignoring 
 capitalization and by allowing up to one misspelling
 Default Module List in Apache in RH9
mod_userdir.so
 User-specific directories
mod_alias.so
 Provides for mapping different parts of the host filesystem in 
the document tree 
 and for URL redirection.  Required for CGI ScriptAlias 
directive.
mod_rewrite.so
 Provides a rule-based rewriting engine to rewrite requested 
URLs on the fly.
mod_proxy.so
 HTTP/1.1 proxy/gateway server
 Default Module List in Apache in RH9
mod_proxy_ftp.so
 FTP support module for mod_proxy
mod_proxy_http.so
 HTTP support module for mod_proxy
mod_proxy_connect.so
 mod_proxy extension for CONNECT request handling
 Figuring Out Which Modules to Remove
 This page allows you to look at a module and 
 see what configuration directives it provides:
 http://httpd.apache.org/docs-2.0/mod/
 This page allows you to look at configuration
 directives and see what modules provide them:
 http://httpd.apache.org/docs-2.0/mod/directives.html
 Apache Security Modules
 There are new modules being written specifically
 to increase the security of the Apache server.
 mod_security
 mod_paramguard
 mod_hackprotect
 mod_hackdetect
 mod_dosevasive
 mod_bandwidth
 mod_security
 This module looks for predefined attack signatures
 in the client’s requests.  It can block or simply
 alert on those requests.  This is stronger than
 mod_rewrite primarily because it can detect and
 block data in any part of the request, not simply
 in the GET URI.
 It also performs canonicalization features.
www.modsecurity.org
 mod_security filtering
Prevent SQL injection in a cookie:
 SecFilterSelective COOKIE_sessionid "!^(|[0-9]{1,9})$"
Reject Googlebot
 SecFilter HTTP_USER_AGENT "Google" 
nolog,redirect:http://www.google.com
Reject Javascript in all variables except varfoo
 SecFilter "ARGS|!ARG_varfoo" "
 ServerName www.modsecurity.org
 DocumentRoot /rproxy/nowhere
 ProxyRequests Off
 ProxyPass / http://192.168.254.10/
 ProxyPassReverse / http://192.168.254.10/
 mod_security as a Reverse Proxy 
(continued)
 SecFilterEngine On
 SecFilterScanPOST On
 SecFilterCheckURLEncoding On
  # Scan response body
 SecFilterScanOutput On
  # On only if using Unicode
 SecFilterCheckUnicodeEncoding Off
  # Only allow certain byte values to be a part of the request.
  # Most English-only applications will work with 32 - 126.
 SecFilterForceByteRange 1 255
 mod_security as a Reverse Proxy 
(continued)
  # Audit log logs complete requests. Configured as below it
  # will only log invalid requests for further analysis.
 SecAuditEngine RelevantOnly
 SecAuditLog logs/audit_log
 SecFilterDebugLevel 0 
 SecFilterDebugLog logs/modsec_debug_log
  # By default, deny requests with status 500
 SecFilterDefaultAction "deny,log,status:500"
  # Put your mod_security rules here
  # ...
 mod_parmguard
 Definitely the most useful of the Apache modules,
 mod_parmguard (parameter guard) inspects incoming
 form submittals for abnormally-set parameters.
 The module includes a script that spiders your 
 web application, building up a profile of all 
 forms in use.  You can use this profile directly
 or instead tune it for better detection.
 For instance, the script might make sure that 
 a parameter only got numeric values, but you
 could force those numeric values to be between
 1 and 5.
 www.trickytools.com
 mod_paramguard - Setting up Apache to 
Use
 Make sure your Apache server has the module
 activated:
 LoadModule parmguard_module 
modules/mod_parmguard.so
 ParmguardConfFile /usr/local/apache/conf/mainconf.xml
 ...
     ParmguardEngine on
 mod_paramguard configuration
 >
     validate.php
 mod_paramguard configuration (continued)
 Managing paramguard’s configuration
 htmlspider creates a config file that you
 can start with.  Obviously, it gets radio
 buttons very right, but can only do length
 checks on strings.  It’s up to you to then
 tighten this up:
 htmlspider.pl -v -h www.mysite.com/target_form.php
 As you build more profiles using htmlspider.pl, or
 as you re-run it on changed sites, you can use
 confmerger to combine them.
 confmerger.pl current-config file1 file2
 mod_hackprotect
 Commercially sold for $50 per server, this module 
 detects brute-forcing password guessing attempts
 and locks out those IPs.
 This only detects HTTP auth, not custom script
 authentication.  
 www.howlingfrog.com/products/apache
 mod_hackdetect
 Commercially sold for $50 per server, this one
 detects multiple logins for a given user from
 different IP addresses and alerts or deactivates
 the user account.
 This can be strong for detecting users who are
 sharing their accounts or having their accounts
 stolen.  Utility is limited by the fact that 
 this is focused on HTTP auth.
 www.howlingfrog.com/products/apache
 mod_dosevasive
 This module is quite simple.  It keeps count of 
 the number of concurrent connections from each IP
 address connecting to the server and cuts off an 
 IP that’s making too many connections too fast.
 The cutoff lasts for 10 seconds since the last
 attempted connection.
 www.freshmeat.net/projects/mod_dosevasive
 mod_bandwidth
 This module, only for Apache 1.3, allows you to
 configure strong bandwidth limits into Apache.
 While this isn’t primarily a security tool, it can
 be useful for blocking DoS attacks.
 www.cohprog.com/mod_bandwidth.html
 Credits and Book Reference
 The chroot process and much of the security
 module research is based strongly on Tony Mobily’s
 book:
Hardening Apache
 by Tony Mobily
 ISBN 1590593782
 Mod_security info comes from Ivan Ristic’s OnLamp article:
http://www.onlamp.com/pub/a/apache/2003/11/26/mod_secu
 and Ivan Ristic’s SecurityFocus article:
http://www.securityfocus.com/infocus/1739
Much of the other Apache research comes from
 Speaker Bio
 Jay Beale is the Lead Developer of the Bastille
 Linux project, the creator of the Center for
 Internet Security Unix Audit Tool and Linux
 Benchmark, and a member of the Honeynet Project.
 www.bastille-linux.org/jay
 He earns his living as a security consultant
 and penetration tester with the firm
 Intelguardians.
 www.intelguardians.com