# 针对过时的RNG随机数发生器的有效状态恢复攻击
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 作者：CryptoPentest
“Practical state recovery attacks against legacy RNG implementations”由Shaanan
N. Cohney, Matthew D. Green, Nadia Heninger三位研究员发表于CCS2018会议上。论文中，作者对数百种经FIPS
140-2认证的应用ANSI
X9.31随机数发生器的公开产品进行了系统研究，发现其中12个产品中使用了静态硬编码密钥，攻击者可从源代码或二进制文件中获取该密钥。
为了证明这种攻击的实用性，作者对应用FortiOS v4的 FortiGate VPN网关实施完全被动解密攻击，可在几秒钟内恢复私钥。
研究者使用主动扫描在Internet上测量此漏洞的普遍程度，并展示 状态恢复和完全私钥恢复普遍存在。
作者的工作突出显示出验证和认证过程未能在多大程度上提供适度的安全保障。论文中，作者并没有对固件逆向、/dev/uramdom实现、及攻击代码实现等具体细节做详细阐述。笔者复现了随机数生成器代码及部分攻击过程，并将扩展介绍该攻击的技术细节。
## 一、ANSI X9.17/31随机数生成标准
随机数生成是加密系统的重要组成部分。近年来，已发现许多密码系统的随机数生成器存在缺陷或被恶意植入后门。例如，Edward
Snowden泄漏的文件表明NIST Dual EC
DRBG标准可能设计有后门。2015年，Juniper公司透露他们的ScreenOS系列VPN设备已被修改为包含一组恶意的双EC参数，可导致VPN会话被动解密。
ANSI X9.17“金融机构密钥管理（批发）”标准由ANSI-American National Standards
Institute（美国国家标准学会）于1985年首次发布，为金融行业的加密密钥生成和分发定义了一个自愿的互操作性标准。
该标准在附录C中包括伪随机数发生器（PRG），作为生成密钥素材的建议方法。
此生成器使用分组密码（在原始描述中为DES）从当前状态生成输出，并使用当前时间更新状态。
在接下来的三十年中，相同的PRG设计出现在美国政府的加密标准中，偶尔会更新新的分组密码。 1992年，ANSI
X9.17-1985标准的一个子集作为FIPS标准FIPS-171被采用。FIPS-171规定“只有NIST认可的密钥生成算法（例如，ANSI
X9.17附录C中定义的技术）才能使用。 1994年采用的FIPS 140-1规定模块应使用FIPS认可的密钥生成算法; FIPS
186-1是1998年采用的DSA标准的原始版本，它将X9.17 PRG列为生成私钥的批准方法。1998年的ANSI X9.31标准（作为X9.17
PRG的变体）使用双密钥3DES作为分组密码;此变体作为批准的随机数生成器包含在其他标准中，例如2004年的FIPS
186-2。NIST使用三密钥的3DES和AES作为分组密码[39]发布了此设计的扩展，正式包含在FIPS中140-2 2005年批准的随机数生成算法列表。
ede _X(Y)表示通过DEA(Data Encryption Algorithm)算法，应用密钥_ K加密，其中*K保密，但ANSI X9.31
PRG设计的NIST文档没有指定如何生成密码密钥；
V是64比特种子，同样保密；
DT是日期/时间向量，每次调用更新；
I为中间值；
64比特R生成方法如下：
    I=ede*K(DT)
    R=ede*K(I^V)    #R通过级连生成连续的随机数
    V=ede*K(R^I)    #下一轮V生成方法
## 二、随机数状态恢复攻击
随机数生成算法详细描述如下：
K是在初始化时以某种方式生成的对称加密算法（如3DES、AES）加密密钥。随机数迭代 生成过程如下：
    Ti = EK(current timestamp)
    output[i] = EK(Ti ⊕ seed[i])
    seed[i + 1] = EK(Ti ⊕ output[i])
直接密码分析攻击这个生成器需要对 AES（或者正在使用其它分组密码）。
当K不保密时，随机数发生器就变得十分脆弱。已知K的攻击者可以使用两个连续的输出块并猜测时间戳来恢复当前状态。单个输出块不会唯一地标识状态，但两个块几乎肯定会。中间相遇攻击算法如下：
    seed[i + 1] = EK(output[i] ⊕ Ti)
    seed[i + 1] = DK(output[i + 1]) ⊕ Ti+1
攻击者尝试Ti的所有可能值，并形成一个可能的种子[i + 1]值的排序列表。然后他尝试Ti + 1的所有可能值，并形成另一个可能的种子[i +
1]值的排序列表。正确的种子[i + 1]值是两个列表中出现的值。
如果只是大致知道时间戳，可以在一定范围内暴破它们，直到我们找到一对产生相等或者应用中间相遇的攻击。
如果只知道分组的部分值，则可以重新排列加密和解密，并验证块的已知部分的相等性。 一旦知道时间戳T1和T2，下一个种子就是：
    seed[i+2] = EK(output[i + 1]  ⊕ Ti+1) 
    #通过猜测下一个current timestamp，验证output[i+2]，确定确定的随机数
    Ti+2 = EK(current timestamp)
    output[i+2] = EK(Ti+2  ⊕ seed[i+2])
其中Ti+2由下一时刻的系统时间唯一确定，可通过有限穷尽，验证随机数生成的正确性。
## 三、随机数生成算法实现与攻击验证
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define FIPS_RAND_SIZE_T size_t
    #define SEED_SIZE    8
    static unsigned char seed[SEED_SIZE];
    static FIPS_RAND_SIZE_T n_seed;
    static FIPS_RAND_SIZE_T o_seed;
    static DES_cblock key1;
    static DES_cblock key2;
    static DES_key_schedule ks1,ks2;
    static int key_set;
    static int key_init;
    static int test_mode;
    static unsigned char test_faketime[8];
    static int second;
    void FIPS_set_prng_key(const unsigned char k1[8],const unsigned char k2[8]);
    void FIPS_rand_seed(const void *buf, FIPS_RAND_SIZE_T num);
    static void FIPS_rand_cleanup(void);
    static int FIPS_rand_bytes(unsigned char *buf, FIPS_RAND_SIZE_T num);
    static void dump(const unsigned char *b,int n);
    void FIPS_test_mode(int test,const unsigned char faketime[8])
    {
        test_mode=test;
        if(!test_mode)
        return;
        memcpy(test_faketime,faketime,sizeof test_faketime);
    }
    void FIPS_set_prng_key(const unsigned char k1[8],const unsigned char k2[8])
    {
        memcpy(&key1,k1,sizeof key1);
        memcpy(&key2,k2,sizeof key2);
        key_set=1;
        second=0;
    }
    // struct timeval {
    //     time_t      tv_sec;      seconds 
    //     suseconds_t tv_usec;    /* microseconds */
    // };
    static void FIPS_gettime(unsigned char buf[8])
    {
        if(test_mode)
        {
            memcpy(buf,test_faketime,sizeof test_faketime);
            return;
        }
        struct timeval tv;
        gettimeofday(&tv,NULL);
        buf[0] = (unsigned char) (tv.tv_sec & 0xff);
        buf[1] = (unsigned char) ((tv.tv_sec >> 8) & 0xff);
        buf[2] = (unsigned char) ((tv.tv_sec >> 16) & 0xff);
        buf[3] = (unsigned char) ((tv.tv_sec >> 24) & 0xff);
        buf[4] = (unsigned char) (tv.tv_usec & 0xff);
        buf[5] = (unsigned char) ((tv.tv_usec >> 8) & 0xff);
        buf[6] = (unsigned char) ((tv.tv_usec >> 16) & 0xff);
        buf[7] = (unsigned char) ((tv.tv_usec >> 24) & 0xff);
    }
    static void FIPS_rand_encrypt(unsigned char *out,const unsigned char *in)
    {
        DES_ecb2_encrypt(in,out,&ks1,&ks2,1);
    }
    static void FIPS_rand_cleanup(void)
    {
        OPENSSL_cleanse(seed,sizeof seed);
        n_seed=0;
        o_seed=0;
        key_init=0;
    }
    void FIPS_rand_seed(const void *buf_, FIPS_RAND_SIZE_T num)
    {
        const char *buf=buf_;
        FIPS_RAND_SIZE_T n;
        /* If the key hasn't been set, we can't seed! */
        if(!key_set)
        return;
        if(!key_init)
        {
            key_init=1;
            DES_set_key(&key1,&ks1);
            DES_set_key(&key2,&ks2);
        }
        /*
         * This algorithm only uses 64 bits of seed, so ensure that we use
         * the most recent 64 bits.
         */
        for(n=0 ; n  sizeof seed)
                t=sizeof seed-o_seed;
            memcpy(seed+o_seed,buf+n,t);
            n+=t;
            o_seed+=t;
            if(o_seed == sizeof seed)
                o_seed=0;
            if(n_seed < sizeof seed)
                n_seed+=t;
        }
    }
    static int FIPS_rand_bytes(unsigned char *buf,FIPS_RAND_SIZE_T num)
    {
        FIPS_RAND_SIZE_T n;
        unsigned char timeseed[8];
        unsigned char intermediate[SEED_SIZE];
        unsigned char output[SEED_SIZE];
        static unsigned char previous[SEED_SIZE];
        if(n_seed < sizeof seed)
        {
            printf("n_seed<sizeof(seed)!n");
            return 0;
        }
        for(n=0 ; n < num ; )
        {
            unsigned char t[SEED_SIZE];
            FIPS_RAND_SIZE_T l;
            /* ANS X9.31 A.2.4:    I = ede*K(DT)
                   timeseed == DT
                   intermediate == I
            */
            FIPS_gettime(timeseed);
            printf("time: ");
            dump(timeseed,8);
            putchar('t');
            printf("seed1: ");
            dump(seed,8);
            putchar('t');
            FIPS_rand_encrypt(intermediate,timeseed);
            printf("I: ");
            dump(intermediate,8);
            putchar('t');
            /* ANS X9.31 A.2.4:     R = ede*K(I^V)
                   intermediate == I
                   seed == V
                   output == R
            */
            for(l=0 ; l < sizeof t ; ++l)
                t[l]=intermediate[l]^seed[l];
            FIPS_rand_encrypt(output,t);
            printf("rand: ");
            dump(output,8);
            putchar('t');
            /* ANS X9.31 A.2.4:     V = ede*K(R^I)
                   output == R
                   intermediate == I
                   seed == V
            */
            for(l=0 ; l < sizeof t ; ++l)
                t[l]=output[l]^intermediate[l];
            FIPS_rand_encrypt(seed,t);
            printf("seed2: ");
            dump(seed,8);
            putchar('n');
            if(second && !memcmp(output,previous,sizeof previous))
            {
                printf("output is the same with the previous!n");
                return 0;
            }
            memcpy(previous,output,sizeof previous);
            second=1;
            /* Successive values of R may be concatenated to produce a
               pseudo random number of the desired length */ 
            l=SEED_SIZE < num-n ? SEED_SIZE : num-n;
            memcpy(buf+n,output,l);
            n+=l;
        }
        return 1;
    }
    typedef struct
    {
        DES_cblock keys[2];
        const unsigned char time[8];