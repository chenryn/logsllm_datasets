of alarms (3.5%) and error status (19.3%). In effect, exceptions
are more related to low level errors (e.g., segmentation faults)
than to  errors affecting  parameters  of  system  calls,  unlike  the
error  status  mechanism,  intended  to  check  the  validity  of
system  calls.  On  the  other  hand,  some  of  the  corrupted
parameters altered the frequency of activation of tasks, leading
to a larger number of alarms. Clearly, the perceived impact of
the injected faults was lower in this campaign, as indicated by
the high percentage of correct experiments (72%).
As  explained  in  Section  4,  failure  percentages  and  error
detection  coverage  can  significantly  vary  depending  on  the
strategy used for the analysis of experiments, in particular of
those  experiments  in  which  both  failure  and  error  detection
events  are  observed.  Results  presented  above  took  into
account the order of occurrence of such events. However,  if
we  consider  that  the  ordering  of  events  is  not  important,
results  can  be  presented  differently,  giving  priority  either  to
error  detection  events  or  to  failure  events.  This  analysis  is
undertaken in Figure 5.
Figure  5  shows  failure  rates  for  the  previous  campaigns
according to the three different analysis strategies identified in
Section 4, namely, ILUVWHYHQW (ordering of events considered, as
in  Figure  4),  SULRULW\ WR '  (priority  to  error  detection  events,
like in [9, 10]), and SULRULW\WR) (priority to failure events, like
in  [11]).  Failure  rates  include  classes  'HDGOLQH PLVVHG,
,QFRUUHFW UHVXOWV,  $SSOLFDWLRQ KDQJ  and  6\VWHP KDQJ.  The
complementary  percentages  correspond  to  the  error  detection
coverage,  which  includes  classes  $ODUP,  (UURU VWDWXV  and
([FHSWLRQ. Class &RUUHFW is not represented.
Strategies ILUVWHYHQW and SULRULW\WR' provide similar figures.
The reason is that when both failure and error detection events
were  observed  in  an  experiment,  in  most  cases  the  error
detection was the first event. From the figures provided, it can
be deduced that an error detection preceded a failure 98.3% of
the  times  in  campaign  mSCH  (calculated  as  

),  98.4%  in  campaign  mTIM,  and  95.3%  in
campaign  pTIM.  Conversely,  when  strategy  SULRULW\ WR )  is
used,  results  are  completely  different,  since  the  failure  rates
increase considerably. Indeed, the large number of experiments
where  a  failure  was  preceded  by  an  error  detection,  are  now
included  into  the  failure  figures.  The  total  number  of  such
experiments  in  percentage  was  of  80.2%  in  campaign  mSCH
(calculated as ), 87% in campaign mTIM, and 24.3% in
campaign  pTIM.  Finally,  we  can  observe  that  in  general
campaign  pTIM  is  the  less  affected  by  the  analysis  strategy
used,  which  is  explained  by  the  fact  that  it  contains  few
experiments with both failure and error detection events (only
25.5% of the total).
,PSDFWRQUHDOWLPHSURSHUWLHV
We present in this section an example of how MAFALDA-RT
carries  out  the  analysis  of  timing  properties  of  the  real-time
system in presence of faults. In particular, we compare the values
experimentally observed for  the  response  time  of  tasks  in  each
campaign with those analytically predicted by the schedulability
analysis provided in Table 1 (see also [13]).
This comparison is presented in Figure 6. It is worth noting
that we only represent response times as long as a measurement
can  be  made,  i.e.,  whenever  tasks  are  not  hanged.  Figure  6a
presents the maximum values observed for the response time of
tasks before the activation of the injected fault, whereas Figure
6b  presents  those  observed  afterwards.  Interval  EHIRUH  fault
activation  goes  from  the  beginning  of  the  experiment  to  the
activation  of  the  injected  fault,  whereas  interval  DIWHU  fault
activation goes from the  activation of the injected fault to  the
end  of  the  experiment.  Curve  3UHGLFWHG  represents  the
analytically predicted  worst-case  values  of  the  response  times
provided in Table 1. Curves P6&+, P7,0 and S7,0 represent
the  maximum  values  of  the  response  times  observed  in
campaigns mSCH, mTIM and pTIM, respectively.
than 
lower 
In  the  absence  of  faults  (Figure  6a),  the  observed  response
times  were  all 
their  predicted  worst-case,
irrespective  of  the  fault  injection  campaign  considered.  Note
also  that  the  curves  of  the  observed  values  have  the  same
tendency  (same  shape)  as  the  curve  of  the  predicted  values.
Therefore,  this  figure  shows  that,  before  fault  activation,  the
type  of  campaign  has  no  effect  on  response  times,  and  most
important, 
the  results
analytically predicted by the schedulability tests.
it  also  corroborates 
LQ SUDFWLFH 
However,  the  presence  of  faults  considerably  impairs  the
timing predictability of the system. Indeed, after fault activation
(Figure  6b),  some  tasks  exceeded  their  predicted  worst-case
Proceedings of the International Conference on Dependable Systems and Networks (DSN‚Äô02) 
0-7695-1597-5/02 $17.00 ¬© 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:17 UTC from IEEE Xplore.  Restrictions apply. 
response time in some campaigns. In particular, the maximum
response  time  of  the  SHULRGLF  tasks  (i.e.,  CH4  Sensor,
CO Sensor,  Air-Flow Sensor  and  Water-Flow  Sensor)  is  very
sensitive  to  faults  affecting  the  WLPHUV  component  of  the
microkernel (P7,0 curve). The reason is that timers are used to
compute  release  times  of  periodic  tasks.  An  error  in  such  a
component  can  thus  alter  the  frequency  of  tasks,  which  in
practice  can  result  in  an  augmentation  of  the  response  times.
Sporadic  task  HLW Handler  was  however  not  affected  since
this  task  is  activated  by  an  external  interrupt,  not  by  a  timer.
Furthermore,  task  CO Sensor  experimented  a  very  high
response  time  in  campaign  pTIM.  This  was  caused  by  an
LQFRUUHFWWDVNDUULYDO, making this task be released beyond its
corresponding  period  interval  in  one  occasion.  Actually,  the
origin of the problem was a corrupted parameter of the system
call responsible for releasing periodic tasks at the beginning of
their  periods.  Finally,  when  faults  were  injected  into  the
scheduling  component,  the  response  times  were  not  affected.
This is due to the fact that most measured response times were
extracted from experiments in class &RUUHFW. Indeed, very few
response  times  could  be  extracted  from  experiments  in  other
classes,  because  in  such  experiments  the  application  KDQJHG
just after the activation of the fault, as explained in Section 5.2.
It  is  worth  noting  that  other  types  of  abnormal  overheads
were observed by MAFALDA-RT not only into the application
(e.g.,  affecting  computation 
the
microkernel (e.g., affecting context-switches and system calls).
As  a  summary,  the  main  benefits  of  the  analysis  of  timing
times),  but  also 
into 
properties carried out by MAFALDA-RT are the following:
‚Ä¢ They help validate LQSUDFWLFH worst-case scheduling analyses
concerned or not with dependability requirements.
‚Ä¢ They  help  identify  the  main  sources  of  overheads  into  the
tasks or into the software executive in presence of faults.
‚Ä¢ They  help  complement  worst-case  measurements  obtained
with other techniques, such as static code analysis.
&RQFOXVLRQ
MAFALDA-RT provides a comprehensive environment that
supports the characterization of both  the  performance  and  the
dependability  features  of  real-time  systems  based  on  COTS
microkernels  that  are  to  be  integrated  into  a  large  range  of
application  domains. 
tool
encompasses application domains with stringent dependability
requirements (e.g., avionics), but also systems which are critical
from  an  economical  viewpoint  (e.g.,  mobile  telecom)  or  both
(e.g., automobile).
interest  of 
the 
Indeed, 
the 
MAFALDA-RT  supports  features  for  eliminating 
the
temporal  intrusiveness  caused  by  the  SWIFI  instrumentation
(both  fault  injection  and  observation),  and  for  analyzing  a
comprehensive set of measurements (including timing aspects)
both at the kernel and at the application task levels.
The demonstration illustrated the development of fault injection
campaigns and the provided facilities to analyze results.
MAFALDA-RT is being extended with wrapping capabilities
for  facilitating  the  integration  of  COTS  microkernels  into  real-
time systems. Such wrappers are meant to guarantee timing and
functional properties by means of error confinement and recovery
mechanisms relying on a formal description of the system [14].
$FNQRZOHGJHPHQWV The work reported in this paper, was partially
carried  out  in  the  framework  of  LIS1  and  is  currently  partially
financed by the DSOS project (IST-1999-11585). Manuel Rodr√≠guez
was supported in part by THALES. The authors would like to thank
Jean-Charles Fabre for  his inspiring role and suggestions.
5HIHUHQFHV
[1] H.  Madeira,  D.  Costa  and  M.  Vieira,  ‚ÄúOn  the  Emulation  of
Software  Faults  by  Software  Fault  Injection‚Äù,  in  Proc.
DSN 2000, New York, NY (USA), pp. 417-426, 2000.
[2] G.  A.  Kanawati,  N.  A.  Kanawati  and  J.  A.  Abraham,
‚ÄúFERRARI:  A  Tool 
the  Validation  of  System
Dependability  Properties‚Äù,  in  Proc.  FTCS-22,  Boston,  MA
(USA), pp. 336-344, 1992.
for 
[3] J.  Carreira,  H.  Madeira  and  J.  G.  Silva,  ‚ÄúXception:  A
Technique for the Experimental Evaluation of Dependability in
Modern  Computers‚Äù, 
IEEE  Transactions  on  Software
Engineering, vol. 24, no. 2, pp. 125-136, 1998.
[4] J.  Arlat,  J.-C.  Fabre,  M.  Rodr√≠guez  and  F.  Salles,
‚ÄúDependability  of  COTS Microkernel-Based Systems‚Äù, IEEE
Transactions on Computers, vol. 51, no. 2, pp. 138-163, 2002.
[5] J.  L.  Aidemark,  J.  P.  Vinter,  P.  Folkesson  and  J.  Karlsson,
‚ÄúGOOFI - A Generic Fault Injection Tool‚Äù, in Proc. DSN 2001,
G√∂teborg, Sweden, pp. 83-88, 2001.
[6] PostgreSQL, http://www.postgresql.org/.
[7] S. Dawson, F. Jahanian, T. Mitton and T. Tung, ‚ÄúTesting of Fault-
Tolerant  and  Real-Time  Distributed  Systems  via  Protocol  Fault
Injection‚Äù, in Proc. FTCS-26, Sendai, Japan, pp. 404-414, 1996.
[8] J.  C.  Cunha,  M.  Z.  Rela  and  J.  G.  Silva,  ‚ÄúCan  Software
Implemented Fault-Injection be Used on Real-Time Systems?‚Äù,
in  Proc.  3rd  European  Dependable  Computing  Conference
(EDCC-3), Prague, Czech Republic, pp. 209-226, 1999.
[9] P.  Chevochot  and  I.  Puaut,  ‚ÄúExperimental  Evaluation  of  the
Fail-Silent  Behavior  of  a  Distributed  Real-Time  Run-Time
Support  built  from  COTS  Components‚Äù,  in  Proc.  DSN 2001,
G√∂teborg, Sweden, 2001.
[10]A.  Steininger  and  C.  Scherrer,  ‚ÄúIdentifying  Efficient
Combinations  of  Error  Detecting  Mechanisms  Based  on
Results of Fault Injection Experiments‚Äù, IEEE Transactions on
Computers, vol. 51, no. 2, pp. 235-239, 2002.
[11]E.  Marsden  and  J.-C.  Fabre,  ‚ÄúFailure  Mode  Analysis  of
CORBA  Service  Implementations‚Äù, 
in  Proc.  IFIP/ACM
International  Conference  on  Distributed  Systems  Platforms
(Middleware 2001), Heidelberg, Germany, 2001.
[12]Chorus  Systems,  ‚ÄúCHORUS/ClassiX  release  3  -  Technical
Overview‚Äù,  Technical  Report  no.  CS/TR-96-119.12,  Chorus
Systems, 1997 (www.sun.com/chorusos).
[13]A.  Burns  and  A.  J.  Wellings,  Real-time  Systems  and  their
Programming Languages, Addison Wesley, 1997.
[14]M. Rodr√≠guez, J.-C. Fabre and J. Arlat, ‚ÄúFormal Specification
for  Building  Robust  Real-time  Microkernels‚Äù,  in  Proc.  21st
IEEE  Real-Time  Systems  Symposium  (RTSS  2000),  Orlando,
Florida (USA), pp. 119-128, 2000.
1 Located at LAAS, the Laboratory for Dependability Engineering (LIS) was a
Cooperative  Laboratory  between  five  industrial  companies  (Airbus  France,
Astrium, √âlectricit√© de France, Technicatome, THALES) and LAAS-CNRS.
Proceedings of the International Conference on Dependable Systems and Networks (DSN‚Äô02) 
0-7695-1597-5/02 $17.00 ¬© 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:17 UTC from IEEE Xplore.  Restrictions apply.