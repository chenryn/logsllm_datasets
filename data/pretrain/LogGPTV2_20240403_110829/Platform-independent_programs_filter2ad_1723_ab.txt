behavior on each platform mi as bi, e.g., mi(bi) = mi(bpip).
More formally, we deﬁne the PIP generation challenge as
Definition 2.2. (PIP generation challenge) Given a
list of n programs, machine pairs (bi, mj), the PIP genera-
tion challenge is to automatically generate a single program
bpip such that
∀(bi, mj) : mj(bi) = mj(bpip)
The PIP generation challenge takes in a list of programs
and outputs a single PIP that i) meets the deﬁnition of a
PIP, and ii) meets the desired functionality speciﬁcation (as
given by bi) for each architecture. Note that the PIP genera-
tion challenge allows for both cases where the ﬁnal program
bpip has the same functionality on all architectures, as well
as diﬀerent functionalities, depending on the architectures.
3. APPROACH
3.1 Gadgets
The central intuition behind our approach is that there are
program strings which are valid for multiple platforms, but
their behaviors depend upon which platform executes these
strings. We call these program strings gadgets 2, which are
chunks of program logic. We solve the PIP generation chal-
lenge by constructing the desired behavior using gadgets.
One of the main challenges we address is ﬁnding enough gad-
gets so that we have Turing-complete functionality for each
platform. For example, one gadget might be xor on x86,
while add on ARM. We need to make sure we have enough
gadgets to cover all needed operations for each platform. By
creating a Turing-complete set of gadgets, we ensure we can
address the PIP challenge in the broadest set of scenarios
possible.
Gadgets themselves consist of two parts: a platform in-
dependent gadget header that identiﬁes the underlying plat-
form, and a platform-speciﬁc gadget body. Figure 2 shows
the overall structure of a gadget. A gadget header h is a
platform-independent jump statement whose jump target
19090289016 decodes to nop; nop; .byte 0x28 ; nop on
x86, which is not a valid instruction sequence.
2Our gadgets are chunks of logic and are not to be confused
with gadgets in return-oriented programming [17].
90eb202a(nop)12 bytex86ARMMIPSA 12 byte header (90eb202a90eb203a2477010416), read from left to right90eb203a(nop)24770104(b)90eb202a(bcs)90eb203a(bcc)Not Executedx86-speciﬁclogicMIPS-speciﬁclogicARM nopARM-speciﬁclogiceb20(jmp)Not Executed90(nop)549Figure 2: Gadget structure:
gadget.
single
Figure 3: Gadget structure: multiple gadgets (instruction-by-instruction).
oﬀset depends upon the executing platform. More specif-
ically, h begins with zero or more semantic nops, followed
by an architecture-identifying jump for all architectures. We
discuss gadget headers whose preﬁx is not a nop in § 8. Fig-
ure 1 depicts a gadget header for x86, ARM, and MIPS. The
header is the 12-byte string 90eb202a90eb2023a2477010416
which decodes to
• A nop followed by the jump jmp 0x22 to the relative
• A nop followed by the jump b 0x1dc94 to oﬀset omips
• Two conditional jumps bcs and bcc, one of which will
jump target oﬀset ox86 on x86.
on MIPS.
always be taken, to oﬀset oarm on ARM.
The gadget header transfers control to a platform-speciﬁc
gadget body. Each gadget body will be at a diﬀerent oﬀset
from the gadget header. For example, in Figure 1, the gadget
header transfers control to bx86 at oﬀset ox86, bmips at oﬀset
omips, and barm at oﬀset oarm.
3.2 Generation Algorithm
In the PIP generation challenge, we are given as input a
program specifying the desired behavior for each architec-
ture. At a high level, our approach matches each disassem-
bled instruction for a program with a gadget. The gadgets
are assembled into the ﬁnal PIP. Note that we describe meth-
ods for solving the challenge at the instruction level in order
to be the most general, e.g., one could implement a PI com-
piler that produces binary code PIP from a given source. It
is straight-forward to modify our approach to handle coarser
granularities, such as the per-program level.
For example, suppose we are given two programs bx86 and
barm of the same length, we disassemble each to get a pair
of lists of instructions [b1x86, b2x86, ...] and [b1arm, b2arm, ...].
We then ﬁnd a gadget bpip such that executing it on x86 is
the same as executing b1x86, and on ARM is the same as
executing b1arm. We then assemble the gadgets into a com-
plete program implementing the correct control ﬂow. For
example, if an instruction in ARM branches to address a1,
we need to make sure the gadget for the instruction branches
to the corresponding gadget for address a1 when executed
on ARM.
More formally, our overall approach to solving the PIP
generation challenge consists of four algorithms: header-
init, disassemble, gadget-gen, and merge. We use B to
denote the type of programs, M for machines, H for headers,
and G for gadgets.
Header-Init: (l, M list) → H list. header-init returns a
list of gadget headers up to maximal length l bytes for
the given list of machines. We assume l is an overall
In our implementation, header-
system parameter.
init is a pre-computation step which is ran once. One
challenge we address in our system is eﬃciently ﬁnding
such headers.
Disassemble: (B,M) list → ((B,M) list) list. disassem-
ble ﬁrst disassembles each input program [(b1, m1),
(b2, m2), ...] into a list of instructions [([ba1
1 , ...
1 ], m1), ([ba1
ban
(Without loss
of generality, assume that the number of instructions
in each list is identical because we can pad shorter
lists with junk instructions). Then disassemble pairs
instructions at each address, and outputs [[(ba1
1 , m1),
(ba1
2 ], m2), ...].
2 , ... ban
2 , ba2
1 , ba2
2 , m2), ...], [(ba2
1 , m1), (ba2
2 , m2), ...], ...].
Gadget-Gen: (H list, (B,M) list) → (G, (B,M) list). gadget-
gen takes a list of programs, machine pairs (b1, m1),
(b2, m2), ..., and the set of headers for the platforms
under consideration, and generates an appropriate gad-
get g such that
∀i.mi(bi) = mi(g)
gadget-gen returns the tuple (g, (b, m) list) where g
is the gadget and the ((b, m) list) is the list passed in.
Merge: ((G, (B, M) list) list) → B. merge assembles gad-
gets into the ﬁnal PIP as b = g1||g2||...||gn where ||
denotes concatenation, as shown in Figure 3. When
there is more than one tuple given, merge handles
control ﬂow between gadgets, e.g., when the gadgets
themselves are constructed from single instructions in
a larger program. merge “ﬁxes” the control ﬂow in
the PIP b to match control ﬂow between the list of
instructions, or, more generally, programs:
• merge rewrites conditional jump targets. When-
ever an input program mi(bi) results in a con-
ditional jump to address a, then merge needs
to rewrite the jump of the corresponding gadget
body gi target to be the new gadget containing a.
• merge ensures appropriate sequential control ﬂow
by adding a jump at the end of each gadget (for
each machine type) to the next gadget.
One of the signiﬁcant challenges we address in our de-
sign and implementation is ensuring that we handle
all direct jump types in the program. (We do not cur-
rently handle computed jump targets or self-modifying
code but discuss possible directions in § 8.)
Given a list of programs (bi, mi), the overall algorithm for
solving the PIP challenges is:
GadgetHeaderGadget Body(bx86)Gadget Body(bMIPS)Gadgetxor eax,eaxpush $0x6c702e30push $0x30307470...sub t0, t1, t2and t2, t0, t1...x86-speciﬁc logicMIPS-speciﬁc logicox86Gadget Body(bARM)add r0, #100add r1, #97...ARM-speciﬁc logicoMIPSoARMEntityGadgetHeaderGadget Body(Bx86,1)Gadget Body(BARM,1)Gadget 1EntityGadgetHeaderGadget Body(Bx86,2)Gadget Body(BARM,2)Gadget 2...add eax,0x100x861push 0x6c702e30x862add r0, r0, #0x100ARM1ldr r12, [r15]b #0x1.word 0x6c702e30str r12, [r13,#-0x4]!ARM2550Figure 4: Overview of platform-independent program generation components and algorithm steps.
1. let PIP-Gen input:(bi, mi) list =
2.
3.
4.
let machines = List.map snd input in
let headers = header-init (max, machines) in
merge([gadget-gen headers input])
Given two programs (b1, m1) and (b2, m2), the PIP gen-
eration challenge is solved by ﬁrst ﬁnding headers for m1
and m2 (line 3), creating a gadget for b1 and b2, and assem-
bling the gadget into the ﬁnal PIP. Figure 4 describes the
high-level algorithm of the PIP generation.
In the above deﬁnitions, pip-gen passes merge a whole
program at a time. It is trivial to modify the algorithms to
perform PIP generation at a ﬁner-grained level, such as the
per-instruction or per-block level. For example, we can gen-
erate gadgets at the per-instruction level by, ﬁrst, running
a disassembler on the input, then running gadget-gen and
merge:
1. let PIP-Gen input:(bi, mi) list =
2.
3.
4.
5.
let machines = List.map snd input in
let headers = header-init (max, machines) in
let insts = disassemble input in
merge (List.map (gadget-gen headers) insts)
PI-Translate. In our implementation, we employ an op-
tional algorithm, called PI translation (§ 4.4). PI transla-
tion takes as input a program (b1, m1) and a list of desired
target architectures (m2, m3, ...). The translation procedure
outputs a semantically equivalent program bi for each target
architecture, and then runs the regular PIP generation solu-
tion. The PI translation algorithm has the practical beneﬁt
that we can leverage one binary as a speciﬁcation for the
behavior on multiple platforms for PIP generation.
4. RG DESIGN
In this section we describe the design of RG, our archi-
tecture for addressing the PIP challenge. 3 Figure 5 shows
the overall design of RG. We ﬁrst look at how RG eﬃciently
implements the header-init, gadget-gen, merge, disas-
semble algorithms. We also describe RG’s translation capa-
bilities, as well as additional problem-speciﬁc enhancements
and considerations.
4.1 Header-Init: Finding Gadget Headers
At a high level, RG’s header-init algorithm consists of
two steps. First, for each architecture, it ﬁnds all sequences
of instructions up to length l of the form (nop)∗(jump)(.)∗.
We call these potential headers. Second, it computes the set
3RG is named after Rube Goldberg machines, which ac-
complish tasks with a (sometimes convoluted) number of
connected gadgets.
Figure 5: RG Architecture.
of gadget headers in common between all architectures by
computing the conjunction of all potential header strings.
RG uses a template-based algorithm to speed up ﬁnding
potential headers and enumerating the ﬁnal header set.
Gadget headers are found once during precomputation in
RG, then stored in a database for subsequent steps. Gadget
headers are represented internally by RG as tuples (b, (mi, o)
list), where b is the binary gadget header string, and each
(mi, o) pair is the size of jump oﬀset for machine mi, so
we can place a machine-speciﬁc gadget body at the corre-
sponding address in the gadget-gen phase. For instance,
(eb0200ea16, [(mx86, 0x4), (marm, 0xbb4)]) represents a header
string eb0200ea16. When it is executed on x86, it transfers
control to the current instruction pointer plus 4 byte from
the header, and on ARM transfers control to the current
instruction pointer plus 2,996 byte.
nop Instructions
Below we ﬁrst describe the types of nop and jump state-
ments we look for. We then describe our algorithm for ﬁnd-
ing potential headers.
4.1.1
Every gadget header begins with zero or more instructions
that are semantically a nop. In our setting, a nop is a se-
quence of one or more instructions that may advance the
program counter, but does not otherwise change the state
of the machine. RG uses four heuristics for ﬁnding nops:
• Instructions that move the same value from a regis-
ter to the same register, e.g., a consecutive push and
pop instruction for the same register (push eax; pop
Phase 1: Gadget Header GenerationPhase 2: Gadget GenerationHeader-InitPlatform-IndependentProgram (b′)MergeGagetHeaderTable(H list)ISAs(M list)Gadget-GenPhase 3: PIP GenerationPlatform-speciﬁc programs((B, M) list)(G, (B,M) list) listPre-computationGagetHeaderTable(H list)ISA1ISA1ISAs(M list)Header-InitPlatform-speciﬁc programs((B, M) list)Platform-IndependentProgram (b′)TranslateISA1ISA1ISAs(M list)ISA1 Mapping TableMapping TablesGadget Merging / Fix offsetGadget1Gadget1List of GadgetsPIPGenerationPI TranslationGadget GenerationPlatform-speciﬁc program((B, M))Translated Platform-speciﬁc programs((B, M) list)551eax), exchange instructions (xchg), and move instruc-
tions whose operand are the same register (mov eax,
eax).
• A sequence of jumps (branches) to the next instruc-
tion, e.g., i: jmp i+1, where the instruction at ad-
dress i will simply increment the program counter.
Note we can use conditional branches to the next in-
struction since it does not matter whether or not the
branch is taken.
• Identity arithmetic operations such as addi $t0,$t0,0
on MIPS. Note we avoid such operations on x86 be-
cause the instruction may have side-eﬀects on status
registers.
• Miscellaneous platform-speciﬁc heuristics. For exam-
ple, MIPS has a special register r0, which always main-
tains the zero value. Any instruction that assigns a
value to r0 is a semantic nop.
4.1.2 Jump Instructions
RG uses syntactic and semantic jump instructions. Syn-
tactic jumps are straight-forward to ﬁnd. RG ﬁnds semantic
jumps by looking for mutually exclusive branch instructions
where the conjunction of branch guards is always true [23].
For example, the bcs and bcc instruction in Figure 1 are
mutually exclusive. In some cases, we need to pad the jump
targets during gadget generation with nops, as done in Fig-
ure 1.
4.1.3 Header Generation Algorithm
One naive approach for ﬁnding potential headers is a brute-
force search through all possible instructions up to some
ﬁxed length. For example, if l = 4 bytes, the brute force
approach enumerates each 32-bit number from 0 to 232, de-
codes it, and checks if it is a potential header. Initially, we
took this approach and found all headers up to 32-bits long
using several computers over several days. We have now op-
timized the search for potential headers by deﬁning header
templates, described in the following steps:
Step 1: Making a list of header templates. These tem-
plates are regular expressions over bit strings. We
generate the possible gadget header templates of ﬁxed
length for each machine based upon the list of nop and
jump instructions and the pre-deﬁned header length.
The gadget header is the concatenation of nop instruc-
(nop)∗
tion, jump instruction, and any characters:
(jump)(.)∗. Since we ﬁnd ﬁxed-length gadget head-
ers, the last dot character of the regular expression
is to pad extra bytes after a jump instruction. This
allows us to ﬁnd headers of arbitrary length if needed.
Step 2: Computing the intersection of templates. We
compute the intersection of all the possible templates
of given machines. Note since the templates are regular
expressions, intersection is well deﬁned. For example,
given a header template 4 (90eb....) for x86, and
(......ea) for ARM, the intersection is (90eb....)∧
(......ea) = (90eb..ea). The advantage of using
templates is that we do not need to explicitly enumer-
ate all the possible instructions to ﬁnd the possible
gadgets.
4We must represent all the instructions using a regular ex-
pression where the alphabet is binary numbers. However, we
take hexadecimal notation in this paper for space eﬃciency.