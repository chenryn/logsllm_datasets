# A Hybrid and Adaptive Model for Fault-Tolerant Distributed Computing

**Authors:**
- S'ergio Gorender
- Raimundo A. Macêdo
- Michel Raynal

**Affiliations:**
- S'ergio Gorender, Raimundo A. Macêdo: Distributed Systems Laboratory (LaSiD), Department of Computing Science (DCC), Federal University of Bahia, Campus de Ondina, 40170-110, Salvador-BA, Brazil
- Michel Raynal: IRISA, Université de Rennes 1, Campus de Beaulieu, 35042 Rennes Cedex, France

**Contact:**
- {gorender|macedo}@ufba.br

## Abstract

The ability to dynamically adapt to varying runtime conditions is crucial in designing distributed systems where negotiated Quality of Service (QoS) cannot always be guaranteed. Providing fault tolerance in such dynamic environments is a significant challenge. This paper proposes an adaptive model for fault-tolerant distributed computing that integrates both synchronous and asynchronous models. The synchronous model assumes time bounds on processing speed and message delay, while the asynchronous model has no such bounds. To illustrate the capabilities and usage of this model, we use the consensus problem as a benchmark. We also describe an implementation of the model that relies on a negotiated QoS for communication channels, which can be either timely or untimely. Additionally, the QoS of a channel can change dynamically during execution, adding uncertainty to the system.

**Keywords:** Adaptability, Asynchronous/Synchronous Distributed Systems, Consensus, Distributed Computing Model, Fault Tolerance, Quality of Service

## 1. Introduction

### 1.1 Synchronous vs. Asynchronous Models

Distributed systems consist of processes located on one or more sites that communicate to provide services to upper-layer applications. A key challenge in these systems is capturing consistent global states to ensure safe decisions and progress. Two prominent distributed computing models are the synchronous and asynchronous models.

#### Synchronous Model
In the synchronous model, processes have known bounds on processing time and message transfer delay. These bounds allow processes to safely detect crashes and enable non-crashed processes to progress with a safe view of the system state. However, if the time bounds are violated, the safety properties of upper-layer protocols may be compromised.

#### Asynchronous Model
The asynchronous model, often called the "time-free" model, lacks time bounds. In this model, designers can only assume an upper bound on the number of process crashes (denoted by \( f \)). Protocols are designed under the assumption that at least \( n - f \) processes are alive, where \( n \) is the total number of processes. If more than \( f \) processes crash, the protocol's liveness property may be lost. Notably, some fundamental problems, such as the consensus problem, have no deterministic solution in asynchronous systems.

### 1.2 Consensus Problem
The consensus problem requires each process to propose a value and decide on a single value, unless it crashes. The decided value must be a proposed value, and all non-crashed processes must agree on the same value. This problem is fundamental in fault-tolerant asynchronous distributed computing and is equivalent to the Atomic Broadcast problem, which combines communication and agreement aspects.

### 1.3 Content of the Paper
In practice, systems are neither fully synchronous nor fully asynchronous. They typically behave synchronously but can experience unstable periods. The advent of QoS architectures allows processes to dynamically negotiate the quality of their communication channels. This motivates the design of an adaptive distributed computing model that provides processes with safe information about the current state of other processes.

This model is time-free, meaning processes do not have guaranteed time bounds. Each process \( p_i \) maintains three sets: \( \text{down}_i \), \( \text{live}_i \), and \( \text{uncertain}_i \). These sets partition the set of all processes and define \( p_i \)'s view of the system state. The sets can evolve over time and differ between processes. For example, if the QoS of a channel degrades, a process might move from \( \text{live}_i \) to \( \text{uncertain}_i \). Conversely, if a stable period lasts long enough, a process might move from \( \text{uncertain}_i \) to \( \text{live}_i \).

### 1.4 Related Work
Our approach relates to previous work on distributed system models and adaptiveness. The timed asynchronous model considers processes with physical clocks, while the timely computing base provides services on a dedicated synchronous network. Various works aim to circumvent the impossibility of consensus in asynchronous systems, such as minimal synchronism and partial synchrony. Systems like AquA, Ensemble, and CactusRT address adaptiveness and QoS in different ways. Our work focuses on adapting to available QoS and providing safe information on the current state of processes.

### 1.5 Roadmap
- **Section 2:** Introduces the adaptive model.
- **Section 3:** Presents and proves a consensus protocol suited to the model.
- **Section 4:** Describes an implementation based on a distributed system architecture with negotiated QoS guarantees.
- **Section 5:** Concludes the paper.

## 2. An Adaptive Model for Fault-Tolerant Distributed Computing

### 2.1 Asynchronous Distributed System with Process Crash Failures

We consider a system with a finite set \( \Pi \) of \( n \geq 2 \) processes, denoted as \( \Pi = \{p_1, p_2, \ldots, p_n\} \). A process executes steps, which include receiving or sending messages, and local state changes. A process can fail by crashing, halting prematurely. After crashing, a process does not recover and behaves correctly until it crashes. A process is correct in a run if it does not crash; otherwise, it is faulty. Let \( f \) denote the maximum number of faulty processes.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.