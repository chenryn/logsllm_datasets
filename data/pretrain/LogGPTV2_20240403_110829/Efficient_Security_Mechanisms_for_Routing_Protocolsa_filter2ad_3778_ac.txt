(cid:1) = (cid:0)n(cid:0)2m+1+3
q
q
q
q
2(cid:0)n(cid:0)2m+1
q
The probability of successful defense, then, is
q (cid:1) possible distributions.
q
(cid:1) (cid:0)(cid:0)n(cid:0)2m+1+3
2(cid:0)n(cid:0)2m+1
q
(cid:1), of (cid:0)n(cid:0)1
(cid:1)(cid:0)(cid:0)n(cid:0)2m+1+3
(cid:1)
(cid:0)n(cid:0)1
q (cid:1)
q
.
For example, when m = 8, then n = 32640, and an
attacker that hears q = 3 advertisements has a 0:000361
(3:61(cid:2) 10(cid:0)4, or 1:49(cid:2) 2(cid:0)12) probability of forging a valid
authenticator from the three advertisements, without in-
creasing the distance to the destination.
In other words,
an attacker can decrease its advertised metric by 0:00036
in expectation, or on average once every 2752 rounds. To
improve security and reduce route oscillations, we can also
require that a node advertise a particular metric for several
consecutive sequence numbers before we choose that route.
For example, if we require a route to be advertised three
consecutive times before we accept it, and if routing up-
dates are sent (and accepted if valid) once per second, then
the attacker can successfully send a forged routing update
on average only once in over 660 years, given the parame-
ters of n, m, and q above.
To generalize our analysis, we consider the security of
the hash tree chain scheme, where a node corresponds to
a set of b values. First, we consider the number of ways
that an attacker can fail to obtain a speci(cid:2)c set of g different
b (cid:1) nodes that do not help the attacker,
(cid:1) ways to pick q nodes that do
Let Ai be the set of combinations of nodes that do not
include value bi needed by the attacker. The attacker, then,
values. There are(cid:0)2m(cid:0)g
so there are a total of (cid:0)(2m(cid:0)g
not help the attacker.
b )
q
PSfrag replacements
A
N
B
F
C
G
S
E
D
Figure 4: Sample network to demonstrate the sequence number rushing attack.
has j [
exclusion principle:
g
i=1 Aij ways to fail. We now apply the inclusion-
g
[i=1
(cid:12)(cid:12)(cid:12)(cid:12)
Ai(cid:12)(cid:12)(cid:12)(cid:12)
= (cid:229)
i1;i2
i jAij(cid:0) (cid:229)
((cid:0)1)i+1(cid:18)g
jAi1 \ Ai2j +(cid:1)(cid:1)(cid:1) + ((cid:0)1)g+1(cid:12)(cid:12)(cid:12)(cid:12)
i(cid:19)(cid:18)(cid:0)2m(cid:0)i
g (cid:1)q (cid:19)
g
(cid:229)
i=1
=
g
\i=1
Ai(cid:12)(cid:12)(cid:12)(cid:12)
Then the probability of a successful defense is
g
(cid:229)
i=1
g )
((cid:0)1)i+1(cid:0)g
(cid:0)(2m
g )(cid:0)1
q
i(cid:1)(cid:0)(2m(cid:0)i
q (cid:1)
(cid:1)
We can now use this to analyze variants of the scheme
described earlier. In particular, we look for n > 32000.
When m = 6, g = 3.
(This represents a four-fold re-
duction in computation, in exchange for a 17% increase
in overhead). Using q = 3 as before, an attacker has a
1:675(cid:2) 10(cid:0)3 probability of success; when three consecu-
tive advertisements are required for the same metric before
a routing change is made, the attacker succeeds once every
6.74 years.
When m = 5, g = 4.
(This represents a eight-fold re-
duction in computation, in exchange for a 33% increase
in overhead). Using q = 3 as before, an attacker has a
8:023(cid:2) 10(cid:0)3 probability of success; when four consecu-
tive advertisements are required for the same metric before
a routing change is made, the attacker succeeds once every
7.65 years.
4.5. Tree-Authenticated One-Way Chains for
Preventing the Sequence Number Rushing Attack
In protocols such as SEAD, a node that has missed a number
of sequence numbers may need to perform a large number
of hash operations to bring its chain up-to-date. This creates
a potential denial-of-service vulnerability:
if an attacker
knows that a victim missed several recent updates for a
destination, the attacker can (cid:3)ood the victim with updates
containing recent sequence numbers but bogus authentica-
tors; the victim must then perform many hash operations
for each update received in an attempt to verify each up-
date. Alternatively, the attacker can fabricate an update with
sequence numbers far in the future, thus requiring each node
receiving such an update to perform a large number of hash
operations to determine that the update is bogus, although
this attack can be somewhat mitigated using loose time syn-
chronization, and rate limiting the use of new sequence
numbers.
Another attack is the sequence number rushing attack.
We explain this attack with an example. Consider the case
in which a malicious node A tries to attract traf(cid:2)c (cid:3)owing
from a source S to a destination D through S’s neighbor
N. Figure 4 shows the network setup. Let the attacker A
be 4 hops from D, and N be 3 hops from D.
If A hears
new routing updates from D before they reach N, A can
rush the routing update to N. If we use the policy that a
node always uses the routing update with the most recent
sequence number, N will forward traf(cid:2)c from S to D through
A until it hears the routing update with the new sequence
number from F which contains a shorter route. To rem-
edy this rushing attack, we adapt a delayed route update
adoption policy: always use the shortest route from the pre-
vious sequence number. For example, when node N hears
the (cid:2)rst routing update with sequence number i for destina-
tion D, it will use the shortest update of sequence number
i(cid:0) 1. Unfortunately, this approach is still vulnerable to an
attack in which A sends two routing updates to N after it
hears the update for sequence i:
it forges an update with
distance 0 of sequence number i(cid:0) 1, followed by an update
of distance 3 for sequence number i. The tree-authenticated
one-way chain mechanism we present in this section pre-
vents A from forging low distance metrics for previous route
updates. Together with the delayed route update adoption
policy, we can prevent the sequence number rushing attack.
We describe here our ef(cid:2)cient tree-authenticated one-
way chain mechanism, which has two properties in addition
to those of the hash chain in SEAD: (cid:2)rst, it bounds the ef-
fort to verify an update; and second, it prevents a node with
fresh sequence number information from fabricating lower
metric authenticators for old sequence numbers.
In our new scheme, we use a new hash chain for each
sequence number. A node using this scheme generates a
random hash chain root h0;s for each sequence number s,
PSfrag replacements
v01 = F (X ;0)
v02 = H[v01] v03 = H[v02] v04 = H[v03] m0 = H[v04]
v11 = F (X ;1)
v12 = H[v11] v13 = H[v12] v14 = H[v13] m1 = H[v14]
m01 = H[m0 jj m1]
v21 = F (X ;2)
v22 = H[v21] v23 = H[v22] v24 = H[v23] m2 = H[v24]
m03 = H[m01 jj m23]
v31 = F (X ;3)
v32 = H[v31] v33 = H[v32] v34 = H[v33] m3 = H[v34]
m23 = H[m2 jj m3]
Figure 5: Example tree-authenticated one-way chain construction for authenticating a sequence of one-way chains.
The instance in this (cid:2)gure allows 4 sequence numbers to be authenticated, and metrics up to 3. The shaded values
represent sequence number 1 metric 1.
for example by using a PRF F and a secret master key X
to derive h0;s = F (X ;s). Given the authentic anchor of this
hash chain hk;s = Hk[h0;s] (where k is the maximum metric),
any node can authenticate hm;s, which is the authenticator
for sequence number s and metric m.
To allow nodes to authenticate these anchors hk;s, each
node builds a hash tree, using the hash chain anchors as
leaves (Section 3.1). When a node sends an update with
a new sequence number s, it includes the root of the hash
chain h0;s, the anchor of the hash chain hk;s, and the path
to the root of the hash tree. To authenticate any update, the
node veri(cid:2)es the anchor by following the path to the root of
the hash tree. It then veri(cid:2)es the hash value hm;s by verify-
ing that hk;s = Hk(cid:0)m[hm;s]. Since the maximum hash chain
length is k and the anchor veri(cid:2)cation requires O(log(s))
effort, where s is the number of sequence numbers repre-
sented by any root, the computation required to verify any
update is bounded by k + log(s).
4.6. The MW-Chains Mechanism
In this section, we present a new cryptographic mechanism,
which we use in the next section to improve the ef(cid:2)ciency
of secure network routing and to prevent a class of denial-
of-service attacks. This mechanism is an extension to
the Merkle-Winternitz one-time signature construction [26].
That construction was subsequently used and extended by
Even, Goldreich, and Micali [7], and by Rohatgi [37]. Our
extension to this signature construction, which we call a
one-way Merkle-Winternitz chain, or MW-chain, provides
instant authentication and low storage overhead. This one-
way chain contains a list of values, called heads, and be-
tween any two heads are a set of signature branches and
a set of checksum branches. To achieve low storage over-
head, we derive these branches from a single head using a
one-way hash function H.
The most basic way to construct an MW-chain is with
one signature branch and one checksum branch between
each head. Assuming we want one set of branches to
sign up to N values, we choose the length of the signature
branch and the checksum branch to be N; that is, we choose
‘1 = ‘01 = N. A random value that is r bits long is chosen
as the (cid:2)rst head value vn. Next, the signature and checksum
branches are computed using
s1;‘1 = H [vi jj (cid:147)s(cid:148) jj 1]
s1;x(cid:0)1 = H [s1;x]
c1;‘01
c1;x(cid:0)1 = H [c1;x]
= H [vi jj (cid:147)c(cid:148) jj 1]
Finally,
for 2 (cid:20) x (cid:20) ‘1.
the next head value is
vn(cid:0)1 = H [s1;1 jj c1;1]. The signature of a value n using
this MW-chain is the ordered set fs1;n;c1;N(cid:0)ng. An attacker
can produce s1; j, for j  n, but then
cannot produce s1; j.
More generally, an MW-chain can have m signature
branches and m0 checksum branches. We call the lengths of
the signature branches ‘1; ‘2; : : : ; ‘m and the lengths of the
checksum branches ‘01; ‘02; : : : ; ‘0m0. The signature for some
value n is the ordered set
fs1;n1;s2;n2 ; : : : ;sm;nm ;c1;n01
;c2;n02
; : : : ;cm0;n0m0g
where
ni =(cid:18)(cid:22) n
j=1 ‘ j(cid:23)mod ‘i(cid:19) + 1,
(cid:213)i
and
n0i =(cid:18)(cid:22) (cid:229)m
j=1 ‘ j(cid:0)n j(cid:0)1
(cid:213)i
j=1 ‘0j
(cid:23) mod ‘0i(cid:19) + 1.
For example, Figure 6 shows an example MW-chain
being used to sign the value 58. In this example, there are 3
signature chains, each of length 4, and 2 checksum chains,
also each of length 4. To sign the value 58 in this case,
PSfrag replacements
Generation
Veri(cid:2)cation
s1;4 =H [vijj(cid:147)s(cid:148)jj1]
s2;4 =H [vijj(cid:147)s(cid:148)jj2]
s3;4 =H [vijj(cid:147)s(cid:148)jj3]
c1;4 =H [vijj(cid:147)c(cid:148)jj1]
c2;4 =H [vijj(cid:147)c(cid:148)jj2]
s1;3 =H [s1;4]
s1;2 =H [s1;3]
s1;1 =H [s1;2]
s2;3 =H [s2;4]
s2;2 =H [s2;3]
s2;1 =H [s2;2]
s3;3 =H [s3;4]
s3;2 =H [s3;3]
s3;1 =H [s3;2]
c1;3 =H [c1;4]
c1;2 =H [c1;3]
c1;1 =H [c1;2]
c2;3 =H [c2;4]
c2;2 =H [c2;3]
c2;1 =H [c2;2]
Head vi
Branches
Head vi(cid:0)1 =
H [s(cid:3);1jjc(cid:3);1]
Figure 6: An example MW-chain being used to sign the value 58
4
n3 = (cid:0)(cid:4) 58
4 (cid:5) mod 4(cid:1) + 1 = 3,
so
and
The signature
n1 = (58 mod 4) + 1 = 3, n2 = (cid:0)(cid:4) 58
16(cid:5) mod 4(cid:1) + 1 = 4,
and
n01 = ((12(cid:0) (2 + 2 + 3)) mod 4) + 1 = 2
n02 = (cid:16)j 12(cid:0)(2+2+3)
k mod 4(cid:17) + 1 = 2.
is thus the ordered set fs1;3; s2;3; s3;4; c1;2; c2;2g.
Every signature chain i can sign log2(‘i) bits. All signa-
log2(‘i) bits. To sign
ture chains together can sign b =
a message M of b bits, the signer splits the message into m
chunks M1; : : : ;Mm, each of size log2(‘) bits. The signer
adds the values si;Mi+1 to the signature. Note that the (cid:2)rst
value of a signature chain signs the number 0, the second
value a 1, and so on.
m
(cid:229)
i=1
To prevent an attacker from forging a message M0, where
Mi (cid:21) M0i ;1 (cid:20) i (cid:20) m (because anybody can compute the one-
way chain into that direction to know the previous values)
the sender uses a checksum chain that moves in the op-
posite direction of the signature chains. Consequently, an
attacker that tries to sign M0 as described above would need
to invert the checksum chain, which is computationally in-
feasible. The checksum chains need to be long enough to
sign the maximum sum that might occur in the signature
chains:
m0
(cid:213)
i=1
‘0i (cid:21) 1 +