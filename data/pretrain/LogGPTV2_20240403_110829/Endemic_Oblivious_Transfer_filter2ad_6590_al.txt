≥ D.
Claim E.4. For any k ∈ [Q], let there be a distinguisher D and a polynomial size auxiliary input
z with
D := | Pr[D(z, hyb3k) = 1] − Pr[D(z, hyb3k+1) = 1]|.
Then, there is a distinguisher Du breaking the Q-multi-instance uniformity of the UKA protocol.
Proof. The proof is almost identical to the proof of Claim E.4 and therefore omitted.
For the last step, we need to replace sB,i∗ with sA,i∗. We use the same argument as in Claim C.2
using the correctness of the scheme. Hence we obtain
OT = | Pr[D(z, (S,A)Π) = 1] − Pr[D(z, (F E
OT,A)) = 1]|
≤ 2Qu + Qk + (1 − δ).
Remark E.5. For stand alone security, security of UKA against uniform adversaries is suﬃcient,
i.e. auxiliary input z is the empty string. Further, for UC security in the global random oracle
model, it is suﬃcient for the sender to send a salt at the start of each session that is used as an
additional input to the random oracle within the session.
44
E.2 Diﬃe-Hellman based One-Round Endemic OT with UC Security
Deﬁnition E.6 (Choose-and-Open Decisional Diﬃe-Hellman (CODDH) Assumption). For a group
G, the choose-and-open decisional Diﬃe-Hellman assumption for parameters k, m is hard if for any
ppt distinguisher D1, D2 and any polynomial size auxiliary input z,
| Pr[D2(st, (aj)j∈K, ((cid:74)ajbj(cid:75))j(cid:54)∈K) = 1]
− Pr[D2(st, (aj)j∈K, ((cid:74)cj(cid:75))j(cid:54)∈K) = 1]| = negl,
where for j ∈ [m], aj, bj, cj ← Zp and (st, K) ← D1(z,(cid:74)1(cid:75), ((cid:74)aj(cid:75),(cid:74)bj(cid:75))j∈[m]) with K ⊂ [m], |K| = k.
Lemma E.7. Let the Choose-and-Open DDH assumption for parameters k = n, m = 2n (Def-
inition E.6) hold over group G. Then the one-round Diﬃe-Hellman based protocol on Figure 8
satisﬁes malicious receiver security (Deﬁnition 2.6) in the UC model with respect to the 1-out-of-n
F E
OT functionality.
Proof. The diﬀerence to the previous regimes is that now the simulator A(cid:48) and sender will send
their message before seeing the adversaries ﬁrst message. The simulator for the malicious receiver
is still straight forward. It sends the ﬁrst message according to protocol. As previously, he will
extract the receiver’s input after seeing the malicious receveirs response (ri)i∈[n]. The input will
be the index i∗ of random oracle Hi∗ for which the malicious receiver makes the ﬁrst query of
the form (g1, . . . , gi∗−1, gi∗+1, . . . , gn). The simulator sends the choice bit and all keys to the ideal
functionality, where only the i∗th key will be computed according to the protocol, all other keys
are uniformly random.
As in the previous regime, we deﬁne a sequence of hybrids. We now deﬁne a sequence of hybrids.
The ﬁrst hybrid is hyb1 and corresponds the interaction of A with the sender of the protocol
description. The last hybrid, hybQ+1, corresponds to simulator A(cid:48). Since the messages in the
Diﬃe-Hellman key agreement are statistically close to uniform, we need less hybrids. Let us deﬁne
the critical query with index j∗ ∈ [Q] as the ﬁrst query of the form Hd(r1, . . . , rd−1, rd+1, . . . , rn)
where A sends (ri)i∈[n]. For k ∈ [Q + 1], we deﬁne:
hybk: In this hybrid the simulator A(cid:48) outputs uniform OT messages as the ideal functionality would
A(cid:48) sends ((cid:74)aj(cid:75))j∈[n] to the malicious receiver as its OT message. When A makes an oracle
query qj, respond with a random group element Hi(qj) ← G. When A sends (ri)i∈[n], look up
the the critical query of the form qj∗ = (r1, . . . , rd−1, rd+1, . . . , rn) to Hd for a d ∈ [n]. Let j∗
be the query index. Compute for all i ∈ [n], sB,i := ai · (ri ⊕ Hi((r(cid:96))(cid:96)(cid:54)=i)).
If j∗ < k, sample for all i (cid:54)= d, si uniformly. Otherwise, for all i (cid:54)= d, si := sB,i. Deﬁne
SB := (s1, . . . , sd−1, sB,d, sd+1, . . . , sn). Output SB together with the output of A.
if j∗ < k. In more detail, A(cid:48) does the following:
Claim E.8. For any k ∈ [Q + 1], let there be a distinguisher D and a polynomial size auxiliary
input z with
D := | Pr[D(z, hybk) = 1] − Pr[D(z, hybk+1) = 1]|.
Then there is a distinguisher D(cid:48) that breaks CODDH for parameter k = n, m = 2n.
Proof. First, D(cid:48) receives challenge(cid:74)1(cid:75), ((cid:74)ai(cid:75),(cid:74)bi(cid:75))i∈[m]. He sends ((cid:74)ai(cid:75))i∈[n] to the malicious receiver
as its OT message (((cid:74)ai(cid:75),(cid:74)bi(cid:75))i∈[m]\[n] are ignored). He programs the random oracle similar as in the
i∗+1, . . . , g∗
proof of Claim E.1. I.e. when A makes an oracle query qj respond normally with a random group
element Hi(qj) ← G except for the following queries. Let us deﬁne i∗, (g∗
n) :=
1, . . . , g∗
i∗−1, g∗
45
i
i∗−1, g, g∗
i∗+1, . . . , g∗
n) \ g∗
i removed.
n) \ g∗
1, . . . , g∗
i∗−1, g, g∗
i∗+1, . . . , g∗
and continues as the honest server.
1, . . . , g∗
i . Here we deﬁne (g∗
qk s.t. the k’th oracle query A makes is Hi∗(qk). For all following random oracle queries Hi(qj) and
i (cid:54)= i∗ s.t. qj ∈ {(g∗
| g ∈ G}, sample βj ← Zp and respond with
i as the ordered sequence
with the element g∗
Hi(qj) :=(cid:74)bi(cid:75) · βj − g∗
challenges(cid:74)ci(cid:75)i∈[n]\{i∗} and computes sB,i∗ according to protocol. For all i (cid:54)= i∗, si :=(cid:74)ci(cid:75)· δj, where
After A sends (ri)i∈[n], D’ checks whether it corresponds to query k. If not, D’ requests (ai)i∈[n]
If (ri)i∈[n] corresponds to oracle query k, D’ requests ai∗,
δj was sampled when query (r(cid:96))(cid:96)(cid:54)=i was made to the random oracle, i.e. the jth query for some
j ∈ [Q]. D’ outputs SB := (s1, . . . , sd−1, sB,d, sd+1, . . . , sn) and the output of A to D.
Clearly, since for all j ∈ [Q], δj is uniform, Hi(qj) for the corresponding i ∈ [n] is uniform as
well. When ci is uniform, so will be si and thus it is distributed as the ideal functionalities output.
When ci = aibi,
si =(cid:74)ciδj(cid:75) = ai ·(cid:74)biδj(cid:75) = ai · (ri + H((rj)j(cid:54)=i))
and thus distributed as the OT strings computed by the honest sender.
For the last step, we need to replace sB,i∗ with sA,i∗. We use the same argument as in Claim C.2
using the correctness of the scheme. Hence we obtain
OT = | Pr[D(z, (S,A)Π) = 1] − Pr[D(z, (F E
OT,A)) = 1]|
≤ Q + (1 − δ),
where k is the advantage for breaking CODDH for parameters k, m.
F OT Extension
F.1 Protocol Diagrams
F.2 Proof of Lemma F.1 (Attack of ΠOOS)
Lemma F.1. There exists a ppt adversary A and distinguisher D s.t. ∀A(cid:48)
| Pr[D((S,A)ΠOOS) = 1] − Pr[D((F U
OT,A(cid:48))) = 1]| = 1 − 2−κ
where ΠOOS is the protocol in Deﬁnition 5.1. All algorithms also receive input 1κ.
Proof. For simplicity let N = 2 and m = 1. We deﬁne A as follows. A plays the role of R and
replaces the input to base OTs, the sender input, with strings tj
and then completes
the protocol as normal.
We deﬁne D as follows. D executes S and A with input x1 = 1. S outputs (v1,1, v1,2) and
D outputs 1 if v1,1 = H(1,{0}nC ) and 0 otherwise.
In the real interaction it clearly holds that
Pr[D((S,A)ΠOOS) = 1] = 1. In the ideal interaction the honest S will output a uniformly distributed
v1,1 ∈ {0, 1}κ which was sampled by F U
OT and therefore Pr[D((F U
OT,A(cid:48))) = 1] = 2−κ.
1 ∈ {0}m(cid:48)
0, tj
F.3 Proof of Lemma F.2 (Attack of ΠOOS+)
Lemma F.2. There exists a ppt adversary A and distinguisher D s.t. ∀A(cid:48)
| Pr[D((S,A)ΠOOS+) = 1] − Pr[D((F U
OT,A(cid:48))) = 1]| = 1 − 2−κ
where ΠOOS+ is the protocol in Deﬁnition 5.4 and all algorithms additionally receive input 1κ.
46
Πext-S : F R
OT, FS, RO → F S
mA
mB
U, ZKP (H(U ))
k
OT
OT, FS, RO → F R
Πext-R : F Su
mA
mB, U, ZKP (H(U )), u-select.
OT
Πext-U : F Su
OT, FS, RO → F U
mA, Com(k)
mB, U, ZKP (H(U )), u-select.
Decom(k)
OT
OT, FS, IC → F S
Πext-Sπ : F R
mA
mB
U, ZKP (H(U )).
k
OT
Πext-Rπ : F Uu
OT, FS, IC → F R
OT
mA, Com(u)
mB
Decom(u), U, ZKP (H(U )), u-select.
Πext-S : F R
OT, RO → F S
mA
mB
U
c, k
ZKP (c)
OT,RO → F R
Πext-R : F Su
mA
mB, U, u-select.
c
ZKP (c)
OT,RO → F U
mA, Com(k)
mB, U, u-select.
c, Decom(k)
ZKP (c)
Πext-U : F Su
OT
OT
OT
Πext-Sπ : F Uu
OT, IC → F R
OT
mA
mB
U .
c, k
ZKP (c).
Πext-Rπ : F Uu
OT, IC → F R
OT
mA, Com(u)
mB
Decom(u), U, u-select.
c
ZKP (c)
Πext-Uπ : F Uu
OT, FS, IC → F U
OT
mA, Com(u)
mB, Com(k)
Decom(u), U, ZKP (H(U )), u-select.
Decom(k)
Πext-Uπ : F Uu
OT, IC → F U
OT
mA, Com(u)
mB, Com(k)
Decom(u), U, u-select.
c, Decom(k)
ZKP (c)
Figure 16: Messages ﬂow for our various OT extension protocols. The protocols on the left have
the Fiat-Shamir transformation applied, where the challenge value c is replaced with H(U ). mA, mB
are the ﬁrst and second messages of the base OTs. U is the OT extension matrix. ZKP (x) is the
proof that U is correct given a challenge value of x ∈ {H(U ), c}. u is a seed used to randomized
the sender or receiver chosen message OTs into uniform message OTs. u must be committed to in
the ﬁrst round. u-select similarly transforms the receiver’s selection into a uniform selection. k is
the key used to generated the output messages as described in Section 5.
47
1 ∈ {0}m(cid:48)
0, tj
Proof. For simplicity let N = 2 and m = κ. We deﬁne A as follows. A plays the role of R and
from FOT. A redeﬁnes the selection values x1, ..., xm ∈ [2] of R
receives the strings tj
such that xi := lsb(H(i, ti)) + 1. That is, xi equals the least signiﬁcant bit of vi,xi = H(i, ti) plus
1. A executes the rest of the protocol as R would and outputs (xi)i∈[m].
We deﬁne D as follows. D executes S and A. S outputs (vi,1, vi,2)i∈[m] and D outputs 1
if ∀i ∈ [m], lsb(vi,xi) + 1 = xi and 0 otherwise.
In the real interaction it clearly holds that
Pr[D((S,A)ΠOOS+) = 1] = 1. In the ideal interaction the honest S will output a uniformly distributed
vi,1, vi,2 ∈ {0, 1}κ which are independent of xi and therefore Pr[D((F U
OT,A(cid:48))) = 1] = 2−κ.
F.4 Proof of Lemma F.3 (Attack of ΠOOS+)
Lemma F.3. There exists a ppt adversary A and distinguisher D s.t. ∀A(cid:48)
| Pr[D((A, R)ΠOOS+) = 1] − Pr[D((A(cid:48),F E
OT)) = 1]| = 1 − negl
where ΠOOS+ is the protocol in Deﬁnition 5.4 and all algorithms additionally receive input 1κ.
Proof. For simplicity let N = 2 and m = κ. We deﬁne A as follows. A plays the role of S and
OT, the receiver input, with the string b := {0}nC . A outputs the matrix Q.
replaces the input to F S
We deﬁne D as follows. D samples the selection bits x1, ..., xm ← [2] and sends them to R. D
executes A who outputs Q and R outputs v1,x1, ..., vm,xm. If vi,xi = H(i, qi) for all i ∈ [m], output
1, otherwise 0. In the real interaction it clearly holds that Pr[D((A, R)ΠOOS+) = 1] = 1 since qi = ti.
OT (apart from
their input (v0,i, v1,i)i∈[m]). Therefore, it must hold that Pr[D((A(cid:48),F R
F.5 Proof of Lemma F.7: F U
Proof.
By deﬁnition the input of A(cid:48) is independent of xi and receives no output from F E
OT)) = 1] = 2κ.
OT Extension with a Random Oracle
Claim F.4 (Malicious Sender Security). Πext-Su+ satisﬁes security against a malicious sender