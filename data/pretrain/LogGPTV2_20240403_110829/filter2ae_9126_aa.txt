**作者： 深信服千里目安全实验室  
原文链接：**
## 一、Spring全家桶简介
Spring发展到现在，全家桶所包含的内容非常庞大，这里主要介绍其中关键的5个部分，分别是spring framework、 springboot、
spring cloud、spring security、spring mvc。 其中的spring framework就是大家常常提到的spring，
这是所有spring内容最基本的底层架构，其包含spring mvc、springboot、spring core、IOC和AOP等等。Spring
mvc就是spring中的一个MVC框架，主要用来开发web应用和网络接口，但是其使用之前需要配置大量的xml文件，比较繁琐，所以出现springboot，其内置tomcat并且内置默认的XML配置信息，从而方便了用户的使用。下图就直观表现了他们之间的关系。
而spring security主要是用来做鉴权，保证安全性的。Spring Cloud基于Spring
Boot，简化了分布式系统的开发，集成了服务发现、配置管理、消息总线、负载均衡、断路器、数据监控等各种服务治理能力。
整个spring家族有四个重要的基本概念，分别是IOC、Context、Bean和AOP。
其中IOC指控制反转，在spring中的体现就是将对象属性的创建权限回收，然后统一配置，实现解耦合，便于代码的维护。在实际使用过程中可以通过autowired注解，不是直接指定某个类，将对象的真实类型放置在XML文件中的bean中声明，具体例子如下：
    public?class?WelcomeController?{??
    ????@Autowired??
    ????private?WelcomeService?service;??
    ????@RequestMapping("/welcome")??
    ????public?String?welcome()?{??
    ????????return?service.retrieveWelcomeMessage();??
    ????}??
    }??
Spring将所有创建或者管理的对象称为bean，并放在context上下文中统一管理。至于AOP就是对各个MVC架构的衔接层做统一处理，增强了代码的鲁棒性。下面这张图就形象描述了上述基本概念。
## 二、各子组件介绍
Spring发展至今，整个体系不断壮大，子分类非常庞大，这里只对本次涉及的一些组件做简单的介绍。
首先是Spring
Websocket，Spring内置简单消息代理。这个代理处理来自客户端的订阅请求，将它们存储在内存中，并将消息广播到具有匹配目标的连接客户端。Spring
Data是一个用于简化数据库访问，并支持云服务的开源框架，其主要目标是使数据库的访问变得方便快捷。Spring Data Commons是Spring
Data下所有子项目共享的基础框架，Spring Data家族中的所有实现都是基于Spring Data Commons。简单点说，Spring Data
REST把我们需要编写的大量REST模版接口做了自动化实现，并符合HAL的规范。Spring Web Flow是Spring
MVC的扩展，它支持开发基于流程的应用程序，可以将流程的定义和实现流程行为的类和视图分离开来。
## 三、使用量及使用分布
根据全网数据统计，使用Spring的网站多达80万余，其中大部分集中在美国，中国的使用量排在第二位。其中香港、北京、上海、广东四省市使用量最高。通过网络空间搜索引擎的数据统计和柱状图表，如下图所示。
## 四、漏洞背景介绍（SpEL使用）
### 0x10 SpEL是什么
SpEL是基于spring的一个表达式语言，类似于struts的OGNL，能够在运行时动态执行一些运算甚至一些指令，类似于Java的反射功能。就使用方法上来看，一共分为三类，分别是直接在注解中使用，在XML文件中使用和直接在代码块中使用。
### 0x20 SpEL能做什么
  * 基本表达式
包括逻辑运算，三目运算和正则表达式等等。
  * 类操作表达式
对象方法调用，对象属性引用，自定义函数和类实例化等等。
  * 集合操作表达式
字典的访问，投影和修改等等。
  * 其他表达式
模板表达式
### 0x30 SpEL demo
#### 0x31 基于注解的SpEL
可以结合sping的@Value注解来使用，可以直接初始化Bean的属性值
    @RestController
    class Sangfor {
        @Value(value = "${'aaa'.toUpperCase()}")
        private String test;
        public String getTest(){return test;}
        public void setTest(String value){this.test = value;}
    }
在这种情况下可以直接将test的值初始化为 ** _AAA_**. 此外，还有很多其他注解的使用方式，可以结合上面提到的表达式的四种使用模式。
#### 0x32 基于XML的SpEL
可以直接在XML文件中使用SpEL表达式如下：
    public class SpEL {
        public static void main(String[] args){
            ApplicationContext ctx = new ClassPathXmlApplicationContext("test.xml");
            String hello = ctx.getBean("hello", String.class);
            System.out.println(hello);
        }
    }
上面的代码将会输出 ** _Hello World!_** , 可以看到递归往下找到world的值，最终成功返回。
#### 0x33 字符串操作
    import org.springframework.expression.Expression;
    import org.springframework.expression.ExpressionParser;
    import org.springframework.expression.spel.standard.SpelExpressionParser;
    public class SpEL {
        public static void main(String[] args){
            ExpressionParser parser = new SpelExpressionParser();
            // Expression exp = parser.parseExpression("'Hello '.concat('World')");
            Expression exp = parser.parseExpression("'Hello ' + 'World'");
            String message = (String) exp.getValue();
            System.out.println(message);
        }
    }
注：类似的字符串操作比如toUpperCase(), substr()等等
#### 0x34 类相关操作
使用T(class)来表示类的实例，除了java.lang的包，剩下的包需要指明。此外还可以访问类的静态方法和静态字段，甚至实例化类。
    public class SpEL {
        public static void main(String[] args){
            ExpressionParser parser = new SpelExpressionParser();
            Expression exp = parser.parseExpression("T(Runtime).getRuntime().exec('calc.exe')");
            Object message = exp.getValue();
            System.out.println(message);
        }
    }
如上述操作，最终就可以执行命令，弹出计算器。这也是后面SpEL RCE漏洞的利用形式。
#### 0x35 集合相关操作
    public class SpEL {
        public static void main(String[] args){
            ExpressionParser parser = new SpelExpressionParser();
            Expression exp = parser.parseExpression("{'sangfor', 'busyer', 'test'}");
            List message = (List) exp.getValue();
            System.out.println(message.get(1));  //busyer
        }
    }
通过上面的操作，可以将字符串转化成数组，最终可以输出busyer。
#### 0x36 SpEL原理
**_SpEL原理_**
首先来了解几个概念：
  * 表达式
可以认为就是传入的字符串内容
  * 解析器
将字符串解析为表达式内容
  * 上下文
表达式对象执行的环境
  * 根对象和活动上下文对象
根对象是默认的活动上下文对象，活动上下文对象表示了当前表达式操作的对象
具体的流程如下，其实就是编译原理里面的词法分析和句法分析：
（1）首先给定表达式1+2
（2）然后给定SpelExpressionParser解析器，该解析器就实现了上图中的分析
（3）定义上下文对象，这个是可选的，默认是StandardEvaluationContext
（4）使用表达式对象求值，例如getValue
具体代码如下：
    ExpressionParser parser = new SpelExpressionParser();
    Expression exp = parser.parseExpression("{'sangfor', 'busyer', 'test'}");
    //StandardEvaluationContext context = new StandardEvaluationContext();
    String message = (String)exp.getValue(context, String.class); 
**_root和this_**
SpEL中#root总是指的刚开始的表达式对象，而#this总是指的当前的表达式对象，用他们可以直接操作当前上下文。
**_SimpleEvaluationContext和S_** ** _tandardEvaluationContext_**
SimpleEvaluationContext: 不包含类相关的危险操作，比较安全
StandardEvaluationContext: 包含所有功能，存在风险
## 五、高危漏洞介绍
通过对Spring漏洞的收集和整理，过滤出其中影响较大的远程代码执行高危漏洞，可以得出如下列表：
漏洞名称 | 漏洞ID | 影响版本 | 漏洞披露日期  
---|---|---|---  
**Spring Websocket 远程代码执行漏洞** | **CVE-2018-1270** | **Spring Framework 5.0 -5.0.5  
Spring Framework 4.3 - 4.3.15** | **2018/4/5**  
**Spring Data 远程代码执行漏洞** | **CVE-2018-1273** | **Spring Data Commons 1.13 -1.13.10  
Spring Data REST 2.6 - 2.6.10  
Spring Data Commons 2.0 - 2.0.5  
Spring Data REST 3.0 - 3.0.5** | **2018/4/10**  
**SpringBoot 远程代码执行漏洞** | **CNVD-2016-04742** | **SpringBoot 1.1.0-1.1.12  