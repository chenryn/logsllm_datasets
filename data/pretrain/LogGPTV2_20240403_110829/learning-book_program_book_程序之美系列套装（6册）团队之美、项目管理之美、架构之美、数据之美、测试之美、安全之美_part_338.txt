配置
在软件应用程序或系统的早期计划阶段，团队会决定软件将要运行
在何种配置上。这些配置可能是基于某些常见的安装场景、语言或
匹配的平台。例如，一个正在做门户站点和服务的团队会决定他们
有效的测试平台是最近两个版本的InternetExplorer和Firefox，还有最
新版本的Chrome、Safari和Opera。并不是每一项测试都需要在每一
个平台上运行。对一些测试团队，测试自动化的兴奋鼓励他们把每
一个测试在各个版本上都运行一遍。最后，这些团队发现他们得到
的是大量究余的测试和一个时间过长而没有帮助的自动化测试。聪
明地用参数配对组合（Pair-wise）来划分测试或其他方法来减少矩
阵组合来决定测试配置是在部署大规模测试时一个更聪明的方法。
标签
标签是一个可选的用来描述测试的附加数据的方法。使用标签可以
方便地定制测试的运行结果的报告。例如，如果所有的性能测试都
制作标签，那么运行所有的“性能测试"就会很简单。有了多个标
签，查看类似定制的所有结果或深入到特定方面也会很简单。查询
的例子可以是“从所有的测试中，仅仅查看性能测试”或者“从所有文
件系统的测试中，显示所有BVT测试，除了那些在WindowsXP上运
行的”。
详细分解
1931
---
## Page 1933
对于测试自动化的作者，把多个测试放在一个测试二进制文件从构
架角度来说比较有意义。最常见的方法是把测试写在一个二进制文
件里（Windows上的一个.dll），然后用一个“测试插件"来运行DLL
里的测试。
对于托管的（例如，C#或VB.NET）测试二进制，attribute是常用的
方法：
[TestCaseAttribute("Checkout Tests",ID=1)]
public TestResult BuyItemsO
TestResult.AddComment("executing Checkout Tests:Buy One Item");
//implementation removed...
return TestResult.Pass;
[TestCaseAttribute("Checkout Tests",ID=2)]
public TestResult BuyltemsO
TestResult.AddComment("executing Checkout Tests:Buy Zero Items");
//code removed...
return TestResult.Pass;
托管代码的插件（或"rumner"）用.NET反射来发现和运行二进制文件
里的测试。像Unit和MSTest之类的单元测试框架就是用这个方法来执
行嵌套在二进制文件里的测试。
1932
---
## Page 1934
原生代码（如C或C++）则可以用把测试分配到内部库函数的方法来
代替。一个比较常用的方法是建立一个表来放置内部函数的地址和
其他关于测试的信息。
struct functionTable[]=
"Checkout tests:Buy one Item",101,Buyltems,1 ′,
{"Checkout tests:Buy invalid number of items(0)",102,Buyltems,0},
"Checkout tests:Buy negative number of items(-1)",103,BuyItems,-1}
{"Checkout tests:Buying Scenario_One",104,BuyingScenarioOne,0},
 /...
1；
这个简单例子的结构包含了四个元素。他们是：
测试描述
测试的一个纯文本描述（可能用在日志和报告中）。
测试编号
测试的唯一标识。
函数指针
插件运行测试时需要调用的函数地址。
可选参数
插件用来传给函数指针所指向的函数的值。这可以让测试作者可以
创建一个测试函数，根据一个参数，来执行多个测试用例。
在这里列出的结构中，第一个测试的描述是"Checkout tests:Buyone
Item"，测试的编号是104，测试调用的函数是BuyItems，还有参数传
1933
---
## Page 1935
给函数的参数是1。当然，在原生代码中实现一个测试插件有很多种
方法，但是这个方法又简单又可能很常用。
一个简单的可以让原生代码的测试插件来在一个库文件里获取测试
信息的方法是，让每一个测试二进制文件有一个入口指针来取出所
有测试的测试编号和入口指针。而更有用的是对那些想要一个快速
的方法来决定一个二进制文件里有哪些测试的来说，自动化工具可
以手动地从一个测试二进制文件里的描述和唯一标识号来手动解析
数据以在一个测试用例管理器里创建测试用例：
void PrintFunctionTableO)
/display descriptions,entry points,test ID and parameters
//forfunctionTable
这里还剩下一个困难。在一个由成打的测试人员写的上百个测试库
的大型系统里，确保测试二进制文件或脚本中的测试编号的唯一几
乎是不可能的。在早前展现的代码片段中，例如，托管函
数"CheckoutTests"和原生函数"Checkout tests:BuyoneItem"就被分配了
同一个编号。
一个解决方案就是给每一个测试人员分配一组测试编号。只要测试
人员仅使用分配给他们的那些编号，就不会有问题。这一方案的可
用性很快就会随着一个项目的测试人员来了又走和测试库在各个组
之间共享而减退。当然，一个更好的解决方案是一个自动的方案。
一个可行的方法是用一个测试插件或一个类似的工具和用诸如下列
的步骤来给每一个测试分配一个整个项目唯一的编号：
1.用前面提到的技巧来获取一个库里的测试信息（托管代码用反
射，原生代码用函数表）。
1934
---
## Page 1936
3.在数据库里存储一个库名字、原始编号和唯一编号的映射（见表8-
2）。这一编号的映射可以使一个大型系统内的编号具有唯一性并且
对单个测试人员的编写需求影响最小。
表8-2：局部编号和全局编号的映射表
库名
局部编号
全局编号
命令行（示例）
buyTest.dll
1
1000001
harness.exe buyTest.dll/id:1
buyTest.dl1
2
1000002
harness.exe buyTest.dll/id:1
shoppingTest.dll
1
1100001
nHarness.exe shoppingTest.dll 1
shoppingTest.d11
12
1100002
nHarness.exe shoppingTest.d11 2
shoppingTest.dll
1100003
nHarness.exe shoppingTest.d1l 3
这里的例子表明了这个测试团队用了（至少）两个测试插件，并且
他们用不同的命令行来执行测试。更多的关于测试的元数据（如目
标模块、测试历史）通常被包括在测试元数据中。
考虑周到、有计划的测试用例管理的要点，是要节省自动化流程后
期的时间。如果一个测试失败，给测试人员30分钟来“挖掘”错误并
获得更多细节显然太长了。当有一个失败的结果的时候，你需要知
道具体哪一项测试失败了，它测试的是哪一个组件，是什么造成了
失败，并且它运行的是哪一类测试。不然，你也许要耸下你的肩膀
说，“我不知道，老板，一些东西出了错。”你不能指望在没有仔细
准备和组织测试数据的情况下运行了上百万个测试还让一切并并有
条。
自动化测试实验室
测试需要地方来运行。无论它是一个办公室里的10台机器还是一个
在外面数据中心的上百台机器，对实验室细心的规划，包括一个测
试部署策略，是非常关键的。出于效率的原因，在一组测试机器上
并行地运行测试要比在一台机器上顺序地运行要更有意义。如果对
测试团队来说兼容性是一个考虑因素，或者如果因为其他原因要求
多样化的环境，那么需要在一个合理时间内完成自动化测试的机器
的数目增长得很快。
一个有效配置的测试实验室要求有足够可用的机器来允许自动化测
试可以在一个合理的时间内完成而且没有很多利用率太低的机器。
1935
---
## Page 1937
测试实验室要求计算机、空间、电力和冷却设施。为了最好地抵消
运行测试实验室的并销，一个自动化测试实验室里的机器应该越忙
越好。除了有效地利用测试实验室的机器来运行自动化测试，另一
个策略是用实验室里的机器来运行测试的扩展版本、压力测试，或
者介于自动化测试运行之间的特定客户场景。
部署测试台
测试实验室可能既有物理的机器又有虚拟的机器。部署虚拟机器通
常就像把合适的虚拟硬盘驱动复制到宿主系统上去那样简单。对物
理的机器来说，装一个干净版本的操作系统外加更新和任何必需的
测试应用程序对实际的测试自动化来说太花费时间。如果测试需要
一个干净的准备就绪的操作安装，对于操作系统和应用程序安装来
说，一个更有效的方法是通过一个可以快速把一个操作系统外加相
关程序的镜像写到磁盘上去的磁盘镜像工具。任何实验室中的电脑
在被准备进行测试的时候就是它们不在测试的时候。花上2个小时的
安装过程来运行10分钟的测试是只有很少人才会认为有效率的事
情。将测试台准备时间最小化是增加实验室效率的一个关键部分。
其他要考虑的事情
在测试技术的范畴之外，对部署一个成功的测试实验室必需的事情
是对维护、电力和冷却设施的规划。一个良好计划和良好组织的实
验室将会节省时间，如果有任何关于电脑硬件或网络问题需要研
究。
把测试实验室安置在一个远程的位置当然也是可能的。如果这样
做，这个实验室应该包括远程电源板或者一大24小时服务级别的协
议，以防一台机器在测试时候死机或正常重启都没有办法。
测试分配
一旦测试实验室里的电脑准备好了，下一个部分（并且有可能是整
个系统最重要的一部分）是部署和执行测试。如果你投资了一个放
满上百台机器的测试实验室，你想要确保机器的高使用率一—比
如，尽可能减少那些机器在等待运行测试指令的空闲时间。
图8-2中的流程图描述了测试分配中可能作出的决定。
1936
---
## Page 1938
从测试用例
管理系统获
有兼客性测试
部署和运行