experiment, we restored VM to the snapshot and installed the latest
version of the AV software to be tested (available at the time of this
writing), which was usually determined by the installer application
downloaded from the vendor’s website.
The list of the AV programs that we would test in the experiments
was determined from the product list published by AV-TEST4, an
independent company which tests AV products of 34 vendors. Most
of the software that we decided to test are certified as "top product"
in the latest test results of AV solutions for Windows users, which is
available at [5]. In addition, we also added some other AV programs
to our test set due to their popularity. After the selection procedure,
our test set contained 13 AV programs, including most of the AV
products of notable vendors.
6.2 Bypassing Protected Folders Feature via
Simulated Inputs
In this section, we report the test results where Cut-and-Mouse
attack is run against AVs. Before we continue, we share the results
of some attacks that were detected by AVs.
6.2.1 Attacks Detected by AVs. We first verified whether AVs are
able to detect and block known attacks aimed at bypassing the
anti-ransomware module. In the first experiment, we injected a
malicious DLL into a trusted application, where the DLL would
start encrypting the default files protected by AVs. As expected, all
of the 13 AVs in our dataset detected this technique, and suspended
(or sometimes killed, e.g., AV13) the injected trusted application
before the first write operation, as DLL injection is one of the oldest
attack techniques.
The next experiment was aimed at maliciously controlling a
trusted application to save encrypted content to protected files. In
this attack, we instructed a ransomware program implemented in
C# language to launch the trusted application using Process.Start
method. As expected, this attack is also not effective as the trusted
application is created as a child process of the ransomware, which
is not trusted, and therefore blocked by AVs.
4AV-TEST, https://www.av-test.org
Lastly, we executed a ransomware with elevated privileges while
protected folders feature of AVs were active. The sample, instead of
using our Cut-and-Mouse technique, is designed to directly encrypt
and overwrite the files in Documents and Pictures folders. Again,
all AVs in our dataset detected the attack and blocked the malicious
operations, which shows that protected folders feature of AVs is
immune to ransomware having admin privileges.
In the next section, we describe the technical requirements for
the successful exploitation of Cut-and-Mouse attack, and our imple-
mentation.
6.2.2 Technical Requirements. Successfully performing Cut-and-
Mouse attack requires a trusted application that should be available
on the victim’s machine. Furthermore, this specific trusted applica-
tion should possess the capabilities to: (i) be started from command
line; (ii) accept file paths as argument; (iii) edit/manipulate files;
and (iv) receive inputs from clipboard. We have discovered that the
best candidate that fulfills all these requirements is the Notepad
application, since it is one of the most commonly-used built-in Win-
dows application, and it is digitally signed5, therefore, whitelisted
by AV programs. In addition, file size limit of Notepad is 56 MB on
Windows 7, while it can open documents with size more than 512
MB on Windows 8.1. To send data to from a ransomware sample to
Notepad application, we exploit Windows Clipboard, which stores
objects that can be shared between all running applications. The
memory area to store these objects are allocated using GlobalAlloc
function. On 32-bit systems, virtual memory of a process is limited
with 2GB, which also determines the maximum capacity of the
clipboard. This gives us a sufficiently large memory space to store
encrypted and encoded data, so makes the clipboard suitable to use
as a swap area in our attack.
Implementation. We implemented a prototype of Cut-and-
6.2.3
Mouse in C# language, using .NET Framework version 4.6.1. The pro-
totype synthesizes only keystrokes as input simulation, for which,
SendInput is employed.
Our prototype implements Alg. 1 and works as follows. First, all
of the files in the target directory are enumerated using Directory.
GetFiles, and the files with the target extensions are filtered.
Namely, in the experiments, we targeted the following file exten-
sions: .docx, .xlsx and .png. Next, using Clipboard.SetText,
ransomware copies the command attrib.exe -r targetPath\*.*
to the clipboard, where targetPath is replaced with the absolute
path of the target directory. We instructed the ransomware program
to simulate keystrokes Win+R to open the Run window, and Ctrl+V
and ENTER to run the copied command. This step ensures that the
read-only attribute was removed from the target files.
Next, for each file, our Cut-and-Mouse prototype proceeds as
follows. Firstly, the file is read using File.ReadAllBytes and then,
using AesCryptoServiceProvider, the content of the file is en-
crypted in memory. After this, the byte stream is converted into
printable text using Base64 encoding, and copied to the system
clipboard. As previously discussed, our prototype uses Notepad
as Apptrusted, so it executes Win+R command, sleeps 500ms while
waiting for the Run window to open, and then pastes the command
5The digital signature of Notepad, as is the case for many built-in Windows applications,
is not embedded in the binary but can be found in the appropriate catalog file.
A Game of “Cut and Mouse”: Bypassing Antivirus by Simulating User Inputs
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
notepad.exe targetFile into the Run window, where targetFile
is replaced with the absolute path of Ftarget. At this step, the proto-
type sleeps for an additional 500ms to ensure that Notepad window
is opened – this window displays the contents of the file. Next, the
prototype sends the keystrokes Ctrl+A to select all the text in the
Notepad window and Ctrl+V to paste the clipboard data into it,
which replaces the selected content with the ciphertext. Here, the
prototype performs one final sleep of 500ms to ensure that all the
data are correctly pasted into Notepad. To save the file, Ctrl+S
command is sent to Notepad, which effectively overwrites the file
with the encrypted data. Finally, Alt+F4 command is sent to close
Notepad.
6.2.4 Test Results of Cut-and-Mouse Attack. After installing the
AV software on the VM snapshot, we placed decoy files in the Doc-
uments and Pictures folders of the user – these are both protected
folders, hence protected from ransomware attacks. Next, we run
our Cut-and-Mouse prototype and checked the effect of the attack
on the files.
The results of our tests are shown in the second column of Table 1.
In particular, the results demonstrate the effectiveness of the Cut-
and-Mouse attack, which was able to bypass seven AV programs
and encrypt the files in the protected folders. The other six AVs
were not tested against Cut-and-Mouse (denoted by n.t.), as they
contain a more critical vulnerability which we report in the next
section.
To the best of our belief, Cut-and-Mouse is a new attack that
controls legitimate applications for malicious purposes via simu-
lated user inputs. The evidence that even the latest AV products
cannot detect this attack suggests that this new attack type can
cause more damages if used by real-world attackers with different
–and possibly creative– ideas to perform powerful exploitation of
systems.
6.3 Controlling Real-Time Protection of AVs
In order to demonstrate the feasibility of our attack in §5, we imple-
mented the prototype of Ghost Control in C# language, using .NET
Framework version 4.6.1. To collect the coordinates of the mouse
on the screen, the prototype uses GetCursorPos() API. For synthe-
sizing keystrokes, mouse motions, and button clicks, SendInput()
API is used. Between each simulated mouse clicks, the prototype
sleeps for 500ms to ensure that the next menu on the GUI is avail-
able to be selected.
6.3.1 Collecting Coordinates to Disable AVs. After installing the tar-
get AV, we started Collect phase and performed cursor movements
towards the tray icon area as to select and click the AV icon6 and
used AV’s GUI to disable the real-time scanning using the provided
menus. During this procedure, we recorded the (x, y) coordinates of
the cursor and the types of clicks that we had performed until the
protection was disabled, i.e., AV’s security notification appeared.
For instance, the output of Collect while a real user disables AV8 on
a VM with screen resolution set to 4096x2022, is as follows:
6For the sake of proof-of-concept, we did not implement a function to detect AV’s
icon among the tray icons. Actual malware would need to do that, for example, by
checking window titles to find AV’s icon, but this is not a difficult routine.
Table 1: Evaluation of AV products. Check marks in Weak
Self Protection column denotes that the AV product was suc-
cessfully disabled by Ghost Control. No further test are per-
formed on AVs that are found to have weak self protection.
Check marks in Weak RW Detection column denotes that
our Cut-and-Mouse could bypass the AV product and en-
crypt the protected files.
Product
Weak Self
Protection
Weak RW
Detection
AV1
AV2
AV3
AV4
AV5
AV6
AV7
AV8
AV9
AV10
AV11
AV12
AV13
✓
✓
✓
✓
✓
✓
✓
✓
n.t.
n.t.
✓
✓
✓
n.t.
✓
n.t.
n.t.
n.t.
✓
Left Click,
x=1868, y=992 // Show Tray Icons
Right Click, x=1866, y=952 // Open AV's Menu
Move Cursor, x=1860, y=873 // Change Settings Submenu
x=1700, y=877 // Real-Time Scan Settings
Left Click,
x=1315, y=430 // Turn-off Button
Left Click,
Left Click,
x=1280, y=555 // Verify Turn-off
Figure 3: Output of Collect, which sniffed the real user ac-
tions while disabling AV8.
For the duration of the deactivation, we used the default values
suggested by AVs to freeze their functions. The minimum length
is usually set to be 15 minutes, which is a sufficient time frame to
successfully conduct an effective attack. Here, the attackers could
also select an option that gives them a longer time-period.
Stopping Real-Time Protection. Using the information ob-
6.3.2
tained from Collect, we instrumented the recorded actions and
parameters into Control, which is used to exploit the specific AV
that we tested in each experiment. Next, we run Control and waited
until all the events are simulated.
If Control attack succeeds, a warning window appears which
notifies the user that the computer is not protected. In some ex-
periments, we even went further and simulated mouse clicks to
remove this notification window, which would be expected from a
real-world malware. This shows how this class of attacks can be
further extended to perform potentially more powerful malicious
actions.
As shown in the first column of Table 1, during our experiments
on 13 AV products, we detected that 6 AVs could be efficiently
deactivated by Ghost Control using our attack in §5. According to a
recent report by OPSWAT [24], the market share of AVs that are
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Ziya Alper Genç, Gabriele Lenzini, and Daniele Sgandurra
vulnerable to Ghost Control is at least 23%7. Furthermore, 4 of these
AVs have been frequently rated as “top product” in the reports of
AV-TEST. It is surprising for us that such a critical vulnerability,
arguably one of the worst that an AV might have, is found in such
a large share of AVs.
In the experiments in which Ghost Control was not able to suc-
cessfully disable the AV, we noticed that this was due to User Ac-
count Control (UAC) prompt, which uses MIC. In these cases, after
Ghost Control generated a click event to turn-off protection, UAC
notification appeared, which always runs with High IL. However,
since Ghost Control is a Medium IL process, it was not be able to
bypass UAC verification successfully.
7 DISCUSSION
Secure composability is a well known problem in security engi-
neering. It challenges developers to ensure that security properties
enjoyed by individual software components are preserved when the
components are put together. It also challenges them to demonstrate
that the components together give stronger security assurances
than just the mere sum of their original properties. This rarely
happens in practice, and the opposite is quite often true. Compo-
nents that, when taken in isolation, offer a certain known attack
surface do generate a wider surface when integrated into a system.
Intuitively this seems obvious. Components interact one another
and with other parts of the system create a dynamic with which
an attacker can interact too and in ways that were not foreseen by
the designer. An attacker can, for example, uses a component as an
oracle or replay its output to impersonate it while interacting with
another.
This is exactly what we have found happening to mechanisms
like UIPI and AV software. They provide a robust defense when
tested individually against a certain target, but the attacks that we
demonstrate in this paper show that their combination reveals new
vulnerabilities. We draw two considerations from it.
First, in complex systems it is essential to control the message-
flow between security critical components. This is actually enabled
by Microsoft via UIPI. It allows messages flowing from sender
applications to receiver applications only when the integrity level
of the first is not less than the integrity level of the second. In
principle, UIPI enables a good defence mechanism, but the problem
is that integrity levels do not reflect trust: they merely indicate when
an application runs with administrative right (high), in standard
mode (medium), or in a sandbox (low). The authority who decides
which level an application takes is generally the operating system,
and sometimes the user, after a request from the application. It
may be, like in the scenario that we illustrated in Section 5, that
developers do not implement that request.
This is against what Microsoft Driver Security Guidance sug-
gests [20]: “It is important to understand that if lower privilege callers
are allowed to access the kernel, code risk is increased. [..] Following
the general least privilege security principle, configure only the mini-
mum level of access that is required for your driver to function.”. We
think that the process which controls the status of the anti-malware
and AV’s kernel module should be designed to require ‘high’ IL. Our
7We were not able to calculate the exact statistics as the shares of the 3 AVs that we
could stop are consolidated into "Others".
findings show that several anti-malware companies either failed
to follow this guidance or have misjudged the minimum level re-
quested for their security, or did not diversify enough between
kernel and non-kernel modules.
Secondly, and this is linked to our finding in Section 4, relying
only on integrity levels is not sufficient to ensure system security.
This does not surprise, since UIPI has been designed to protect pro-