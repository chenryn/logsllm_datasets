title:Improving Signature Testing through Dynamic Data Flow Analysis
author:Christopher Kruegel and
Davide Balzarotti and
William K. Robertson and
Giovanni Vigna
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Improving Signature Testing Through Dynamic Data Flow Analysis
Christopher Kruegel
Technical University Vienna
PI:EMAIL
Davide Balzarotti, William Robertson, Giovanni Vigna
University of California, Santa Barbara
balzarot,wkr,PI:EMAIL
Abstract
The effectiveness and precision of network-based intru-
sion detection signatures can be evaluated either by di-
rect analysis of the signatures (if they are available) or
by using black-box testing (if the system is closed-source).
Recently, several techniques have been proposed to gen-
erate test cases by automatically deriving variations (or
mutations) of attacks. Even though these techniques have
been useful in identifying “blind spots” in the signatures of
closed-source, network-based intrusion detection systems,
the generation of test cases is performed in a random, un-
guided fashion. The reason is that there is no information
available about the signatures to be tested. As a result,
identifying a test case that is able to evade detection is dif-
ﬁcult.
In this paper, we propose a novel approach to drive the
generation of test cases by using the information gathered
by analyzing the dynamic behavior of the intrusion detec-
tion system. Our approach applies dynamic data ﬂow anal-
ysis techniques to the intrusion detection system to identify
which parts of a network stream are used to detect an at-
tack and how these parts are matched by a signature. The
result of our analysis is a set of constraints that is used to
guide the black-box testing process, so that the mutations
are applied to only those parts of the attack that are rele-
vant for detection. By doing this, we are able to perform
a more focused generation of the test cases and improve
the process of identifying an attack variation that evades
detection.
1. Introduction
Intrusion detection systems (IDSs) can be broadly di-
vided into two classes: those that rely on models of nor-
mal behavior and detect deviations from these models (i.e.,
anomaly-based systems), and those that contain descrip-
tions of malicious behavior and detect events (or sequences
of events) that match these descriptions (i.e., signature-
based systems). While both classes of intrusion detection
systems have complementary strengths, they are both vul-
nerable to evasion attacks.
In the case of anomaly-based systems, evasion tech-
niques are used to craft an exploit so that it resembles nor-
mal behavior. The application of these techniques is usu-
ally called a mimicry attack [30]. In the case of signature-
based systems, evasion techniques are used to modify an
exploit so that it does not match any of the signatures used
by the intrusion detection system, while retaining the abil-
ity to compromise the security of the target system [20].
Recently, a number of approaches [4, 13, 16, 18, 22, 23,
29] have been proposed to test the effectiveness and preci-
sion of network-based intrusion detection systems. In par-
ticular, approaches based on the generation of test cases by
automatically deriving variations (or mutations) of known
exploits have been shown to be able to identify problems
in the detection mechanisms used by both open-source
and commercial, state-of-the-art systems [13, 29]. These
approaches leverage a number of transformations, called
“mutant operators”, that are applied to an exploit template.
The goal of applying these mutation operators is to obtain
a modiﬁed version that has a different network manifesta-
tion with respect to the original attack, but it is still able to
compromise a vulnerable target.
Mutant operators can work at different levels of abstrac-
tion (e.g., at the network level or at the application level),
and they can be composed and/or applied multiple times.
For example, consider a ﬁrst mutant operator that adds
effect-free commands to an FTP session (e.g., adds a “CWD
.” or a “NOOP” command) and a second one that applies
fragmentation to the IP trafﬁc. The ﬁrst operator can be ap-
plied multiple times to an FTP-based exploit template with-
out invalidating the attack (unless, of course, the length of
the session affects the success of the exploit), while the sec-
ond one can be applied in different ways (e.g., by specify-
ing different fragment sizes). Thus, the number of possible
variations of the original exploit that can be used as test
cases quickly grows very large.
In current approaches, the generation of test cases is ei-
ther manually guided or a random process. In the former
case, a human expert selects which operators to apply to
the exploit template and which parameters to use for each
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.40
DOI 10.1109/ACSAC.2007.40
53
53
operator. The results obtained by running the selected test
cases might provide hints on how to select the operators
and their parameters in the next round of tests. In the lat-
ter case, the operators (and the values of their parameters)
are selected randomly. Both these approaches are less than
optimal because they either require extensive expert knowl-
edge or represent “shots in the dark.” Therefore, there is the
need for a new technique for testing network-based signa-
tures that is both automated and more focused than a purely
random approach. In theory, some guidance about how to
generate the relevant test cases can be derived from the sig-
natures themselves. For example, by looking at which fea-
tures of the network trafﬁc are analyzed by a signature, it is
possible to focus the test case generation by using only the
mutant operators that affect those features. Unfortunately,
most intrusion detection system vendors do not make their
signatures available because they consider them to be their
intellectual property and an advantage with respect to their
competitors. Thus, in general, one cannot rely on the avail-
ability of the signatures to guide the generation of the test
cases.
To address this problem, we propose a novel approach
to drive the generation of test cases based on the analysis
of the dynamic behavior of a network-based intrusion de-
tection system. As a ﬁrst step, we apply dynamic data ﬂow
analysis techniques to the NIDS binary to determine which
parts of the attack trace are checked by the NIDS. We then
leverage this information to restrict the test case generation
process to only use the mutant operators that modify the
relevant parts of the attack.
Based on the knowledge of which parts of a network
trace are considered by the detection process, we further
reﬁne our analysis to also take into account how these parts
are used. For simple checks (e.g., the comparison of a
source port number with an integer constant), the constant
value speciﬁed by the signature is extracted from the dy-
namic trace. Most of the signatures also specify strings or
regular expression to be matched against the packet pay-
load. To address these cases, we developed a technique
that aims at reconstructing a ﬁnite state machine that cap-
tures the behavior of the pattern matching process. That
is, the state machine derived from the analysis should ac-
cept an input string if and only if this string matches a
pattern speciﬁed by the signature. While it might not al-
ways be possible to precisely reconstruct this state machine
(particularly in the case of regular expressions), patterns
can be reconstructed by observing the execution of popu-
lar string matching algorithms such as Boyer-Moore [5] or
Aho-Corasick [1].
The contributions of this paper are the following:
• We present a novel, practical technique to effectively
drive the generation of test cases for the evaluation of
network-based signatures. Our technique analyzes the
dynamic behavior of a NIDS program to determine
which parts of an attack are used by the detection pro-
cess.
• In addition to locating the parts of the attack trafﬁc that
are used in the detection process, we also determine
the nature of the checks that the NIDS performs. In
particular, our analysis can automatically extract both
speciﬁc numerical values and strings that the NIDS is
searching for.
• We have developed a prototype tool to evaluate our
technique on both open-source and closed-source
commercial NIDSs. The results demonstrate that our
approach allows for effective generation of exploit
mutants that are able to avoid detection, even when
no signature information is available.
The remainder of the paper is structured as follows. Sec-
tion 2 presents the dynamic analysis technique utilized to
analyze the behavior of the IDS being tested. Section 3
introduces our mechanisms to extract signature constraints
from the observed behavior. Section 4 explains how the
analysis results can be used to generate the test cases for a
network-based signature. Section 5 evaluates the effective-
ness of our approach. Section 6 discusses related work.
Finally, Section 7 draws conclusions and outlines future
work.
2. Dynamic Data Flow Analysis
The goal of our dynamic data ﬂow analysis is to deter-
mine which parts of a network stream are used by the in-
trusion detection system to identify the presence of an at-
tack. More precisely, we are interested in the positions of
all values, or bytes, that are analyzed by the IDS during the
detection process.
To determine the input bytes that affect detection, we
dynamically monitor the intrusion detection sensor while it
is processing the network data. In particular, we tag each
input byte that is introduced into the address space of the
IDS process with a unique label. This label establishes a
relationship between a particular input byte and a location
in memory. Then, we keep track of each labeled value as
the sensor’s execution progresses. To this end, the output of
every instruction that uses a labeled value as input is tagged
with the same label as well. For example, consider the case
of a data transfer operation that loads a value with the label
“123” from memory into a register. After the instruction is
executed, the contents of the target register is also labeled
with “123”. Clearly, it is possible that the result of an op-
eration depends on more than one input byte. For example,
consider an operation that adds together two values, each
of which is tagged with a different label. In this case, the
result is tagged with a set that holds both labels (called a
label set).
5454
Machine instructions typically read one or more data
values from registers or memory locations that are spec-
iﬁed by their source operands. These values are then pro-
cessed and a result is written to the location speciﬁed by the
destination operand. For example, move operations (e.g.,
mov), arithmetic instructions (e.g., add), logic operations
(e.g., and), and stack manipulation operations (e.g., push,
pop) all belong to this class. For these instructions, the la-
bel set that is assigned to the result of the operation is the
union of the label sets of all the operation’s operands. Prop-
agating label information by tracking the use of input bytes
as source (and destination) operands results in an analy-
sis that is very similar to the propagation of taint values
in Perl or as implemented by TaintCheck [19] and related
approaches [6, 7, 8]. That is, for every instruction that is
executed, we can determine whether there exists a direct
dependency of the value of one or more of its operands on
certain input bytes.
In addition to directly inﬂuencing operand values by la-
beled input, input bytes can also have an indirect effect on
an instruction’s operands. More precisely, the value of a
memory operand can also depend on the value of an input
byte if this byte is used during the operand’s address calcu-
lation. That is, when a labeled value is used to determine
the location from which a certain value is loaded, the out-
come of the load operation depends not only on the loaded
value itself (a direct dependency) but also on the memory
address where this value is taken from. This is called an
indirect or address dependency. Therefore, when a value is
loaded from memory location L, we perform the union of
the label set of the value at location L with the label sets of
all values that are used to determine the address L.
A typical example for an indirect dependency is the use
of labeled data as an index into a table. In this case, the
result of a table lookup does not directly depend on the in-
put value, but it is indirectly inﬂuenced by the selection of
the respective table element. It is important that indirect
dependencies are tracked as well. For example, the simple
transformation of a string contained in the payload of a net-
work packet into its uppercase representation (e.g., using
the toupper() function) would break the dependencies
between the resulting string and the original labeled input
if only direct dependencies were taken into account. The
reason is that toupper() relies on a table that stores the
mappings of all 255 possible input characters to their cor-
responding uppercase representations.
Our data labeling mechanism is used as a basis to iden-
tify all input bytes that can inﬂuence the detection process.
A byte of the network stream is considered to be involved in
the detection process if it has an inﬂuence on the IDS’ con-
trol ﬂow. More precisely, the control ﬂow is inﬂuenced by
an input byte whenever the outcome of a conditional branch
or the target of an indirect control transfer instruction (i.e.,
an indirect call or jmp instruction) depends on that byte.
The inﬂuence of input bytes on control ﬂow decisions can
be determined in a straightforward fashion using the propa-
gation of label sets during program execution. To this end,
whenever a labeled operand is used in a branch or indirect
control ﬂow operation, its label set can be inspected and the
appropriate labels extracted. An interesting technical detail
is related to the fact that the Intel x86 instruction set does
not contain conditional branch instructions that use regis-
ter or memory operands. Instead, these branch instructions
evaluate a number of ﬂag bits, which are usually set by pre-
ceding compare or test instructions. As a consequence, our
dynamic analysis has to retain the label sets of operands of
compare and test operations until a subsequent conditional
branch operation is encountered.
The dynamic monitoring of the IDS is realized with
the help of iTrace, an instruction-tracing tool developed
by our group. The iTrace tool leverages the single-step
functionality of ptrace to execute the process under anal-
ysis one instruction at the time. Before each instruction is
run, iTrace propagates the label information appropriately
to keep track of both direct and indirect dependencies. This
allows us to keep track of which bytes of the network trafﬁc
are involved in the detection process.
3. Constraint Generation
In addition to the knowledge of which bytes of the trafﬁc
generated by the exploit are used to identify an attack, our
dynamic data ﬂow analysis was extended to also provide