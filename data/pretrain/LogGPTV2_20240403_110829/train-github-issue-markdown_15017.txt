  * I tried using the `@types/xxxx` package and had problems.
  * I tried using the latest stable version of tsc. https://www.npmjs.com/package/typescript
  * I have a question that is inappropriate for StackOverflow. (Please ask any appropriate questions there).
  * Mention the authors (see `Definitions by:` in `index.d.ts`) so they can respond. 
    * Authors: @davidparsson @borisyankov
Please consider this case:
    class Service {
        setValue(value: string, option?: undefined): void;
        setValue(value: string, option: string): void;
        setValue(value: string, option: string | undefined): void { /* some implementation*/ }
    }
    const service = new Service();
    expect(service.setValue).toHaveBeenCalledWith('v'); 
    //                       ^ Gives a ts error "Expected 2 arguments, but got 1. (2254)"
    // Even though all of these use cases are valid and work fine:
    service.setValue('v');
    service.setValue('v', undefined);
    service.setValue('v', 'someValue');
For some reason, the `toHaveBeenCalledWith()` matcher only accepts 2
arguments, even though the method under test (`setValue()`) has a second
argument that is optional.
The expected behavior is that
`expect(service.setValue).toHaveBeenCalledWith('v');` should not throw a ts
compilation error.
Note: one might think that this can be worked around by adding a second
parameter of `undefined` (like
`expect(service.setValue).toHaveBeenCalledWith('v', undefined);`). However,
calling `service.setValue('v');` is different from `service.setValue('v',
undefined);`, since the value of `arguments.length` object inside the
`setValue()` method is different.