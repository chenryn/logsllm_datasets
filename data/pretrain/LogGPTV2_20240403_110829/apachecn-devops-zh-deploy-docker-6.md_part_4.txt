# Checks for dozens of common best-practices around deploying Docker containers in production.
# Inspired by the CIS Docker Community Edition Benchmark v1.1.0.
# ------------------------------------------------------------------------------
Initializing Mon Oct  2 00:03:29 CDT 2017
[INFO] 1 - Host Configuration
[WARN] 1.1  - Ensure a separate partition for containers has been created
[NOTE] 1.2  - Ensure the container host has been Hardened
date: invalid date '17-10-1 -1 month'
sh: out of range
sh: out of range
[PASS] 1.3  - Ensure Docker is up to date
[INFO]      * Using 17.09.0 which is current
[INFO]      * Check with your operating system vendor for support and security maintenance for Docker
[INFO] 1.4  - Ensure only trusted users are allowed to control Docker daemon
[INFO]      * docker:x:999
[WARN] 1.5  - Ensure auditing is configured for the Docker daemon
[WARN] 1.6  - Ensure auditing is configured for Docker files and directories - /var/lib/docker
[WARN] 1.7  - Ensure auditing is configured for Docker files and directories - /etc/docker
[INFO] 1.8  - Ensure auditing is configured for Docker files and directories - docker.service
[PASS] 2.10 - Ensure base device size is not changed until needed
[WARN] 2.11 - Ensure that authorization for Docker client commands is enabled
[WARN] 2.12 - Ensure centralized and remote logging is configured
[WARN] 2.13 - Ensure operations on legacy registry (v1) are Disabled
[WARN] 2.14 - Ensure live restore is Enabled
[WARN] 2.15 - Ensure Userland Proxy is Disabled
[PASS] 7.9  - Ensure CA certificates are rotated as appropriate (Swarm mode not enabled)
[PASS] 7.10 - Ensure management plane traffic has been separated from data plane traffic (Swarm mode not enabled)
```
这个列表很长，所以大部分输出行都被删除了，但是你应该对这个工具的功能和使用方法有一个很好的了解。请注意，这并不是该领域唯一的产品(例如，来自 https://github.com/coreos/clair 的 CoreOS 公司的克莱尔)，因此尽可能多地使用这些产品，以了解您在基础架构方面的弱点。
# 只读容器
在我们前面跨越大部分章节的例子的开发中，我们并没有真正关注容器在运行时是否改变了文件系统的状态。对于测试和开发系统来说，这不是一个问题，但是在生产中，为了防止来自内部和外部的恶意运行时利用，进一步锁定是非常重要的。为此，有一个`docker run --read-only`标志，它(不出所料)将容器的根文件系统安装为只读。通过这样做，我们可以确保所有未装载卷的数据都像构建映像时一样原始，从而确保一致性并保护您的群集。如果以这种方式运行容器，您可能需要注意的唯一一点是，在执行过程中，容器极有可能需要在`/run`、`/tmp`和`/var/tmp`等位置临时存储文件的位置，因此这些挂载应该作为`tmpfs`卷额外挂载:
```
$ # Start a regular container
$ docker run -it \
 --rm \
 ubuntu /bin/bash 
root@79042a966943:/# # Write something to /bin
root@79042a966943:/# echo "just_a_test" > /bin/test
root@79042a966943:/# # Check if it's there
root@79042a966943:/# ls -la /bin | grep test
-rw-r--r-- 1 root root      12 Sep 27 17:43 test
root@79042a966943:/# exit
exit
$ # Now try a read-only container
$ docker run -it \
 --rm \
 --tmpfs /run \
 --tmpfs /tmp \
 --tmpfs /var/tmp \
 --read-only \
 ubuntu /bin/bash 
root@5b4574a46c09:/# # Try to write to /bin
root@5b4574a46c09:/# echo "just_a_test" > /bin/test
bash: /bin/test: Read-only file system
root@5b4574a46c09:/# # Works as expected! What about /tmp?
root@5b4574a46c09:/# echo "just_a_test" > /tmp/test
root@5b4574a46c09:/# ls /tmp
test
root@5b4574a46c09:/# exit
exit
```
如果您不希望您的容器改变文件系统上的任何内容，并且由于容器通常不需要写入路径，如`/usr`，强烈建议在生产中使用此标志，因此如果可能的话，将其自由地应用于您的所有静态服务。
# 基本系统(包)更新
我们之前谈过一点，但是似乎在大多数在线文档和博客中，包更新在 Docker 容器的范围内被严重忽略了。虽然这两个阵营都有支持者，但重要的是要记住，不能保证从 Docker Hub 等地方获得的标记映像是用最新的更新构建的，即使有，标记映像也可能是前一段时间构建的，因此不包含最新的安全补丁。
诚然，在 Docker 容器中，主机的内核用于运行容器的上下文，但容器中任何支持库的安全漏洞都可能(通常也会)导致漏洞，这些漏洞通常会级联到主机和整个网络中。由于这个事实，我个人对将要部署到生产中的容器的建议是，如果可能的话，您应该始终确保容器是用最新的库构建的。手动升级一些基本映像上的包确实存在风险，尽管风险很小，但这是由升级时发生的库不兼容引起的，但一般来说，这是一个值得冒的风险。
在大多数情况下，为了进行这种升级，就像我们前面在大多数 Docker 示例中介绍的那样，您非常需要在`Dockerfile`中调用特定于映像的基本操作系统分布的系统升级行。对于我们的默认部署操作系统(Ubuntu LTS)，这个操作是通过`apt-get update`和`apt-get dist-upgrade`完成的:
```
...
RUN apt-get update && apt-get -y dist-upgrade
...
```
Caution! Do not forget that by default, `docker build` will cache all individual layers that have unchanged `Dockerfile` directives, so this command will work as expected the first time, but its layer will be pulled from the cache any subsequent time it is used if none of the lines preceding it have changed due to the fact that this line will stay the same regardless of packages changing upstream. If you want to ensure that you get the latest updates, you will have to break the cache either by changing a line above `apt-get` in your `Dockerfile` or by adding `--no-cache` to your `docker build` command. Also, note that using `--no-cache`, all layers will be regenerated, possibly causing a prolonged build cycle and/or registry disk use.
# 特权模式对上限增加和上限降低
您可能希望在容器中执行的一些高级操作，例如 **Docker-in-Docker (DinD)** 、NTP、安装环回设备以及许多其他操作，将需要比默认情况下授予容器根用户的权限更高的权限。因此，需要允许额外的特权来使容器无问题地运行，因此对于该用例，Docker 有一个非常简单但极其广泛的特权模式，它将完整的主机功能添加到容器中。要使用该模式，只需在`docker run`命令后添加`--privileged`:
**Docker-in-Docker** (commonly known as **DinD**) is a special configuration of a container that allows you to run the Docker Engine within the container that is already running on a Docker Engine but without sharing the Docker socket, which allows (if precautions are taken) a more secure and robust way to build containers within your infrastructure that is already containerized. The prevalence of this configuration is somewhat rare but is very powerful when used as part of a **Continuous Integration** (**CI**) and **Continuous Delivery** (**CD**) setup.
```
$ # Run an NTP daemon without the extra privileges and see what happens
$ docker run -it \
 --rm \
 cguenther/ntpd 
ntpd: can't set priority: Permission denied
reset adjtime failed: Operation not permitted
creating new /var/db/ntpd.drift
adjtimex failed: Operation not permitted
adjtimex adjusted frequency by 0.000000ppm
ntp engine ready
reply from 38.229.71.1: offset -2.312472 delay 0.023870, next query 8s
settimeofday: Operation not permitted
reply from 198.206.133.14: offset -2.312562 delay 0.032579, next query 8s
reply from 96.244.96.19: offset -2.302669 delay 0.035253, next query 9s
reply from 66.228.42.59: offset -2.302408 delay 0.035170, next query 7s
^C
$ And now with our new privileged mode
$ docker run -it \
 --rm \
 --privileged \
 cguenther/ntpd 
creating new /var/db/ntpd.drift
adjtimex adjusted frequency by 0.000000ppm
ntp engine ready
^C
```
如您所见，添加此标志会从输出中删除所有错误，因为我们现在可以更改系统时间。
解释了这种模式的功能后，我们现在可以讨论为什么理想情况下，如果可能的话，永远不要使用特权模式。默认情况下，特权模式实际上允许完全访问大多数主机系统，并且在大多数情况下不够精细，因此在您发现您的容器需要额外的特权后，您应该使用`--cap-add`来选择性地添加它们。这些标志是标准的 Linux 功能标识符，您可以在[http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html)等地方找到，并允许微调到您想要的访问级别。如果我们现在将之前的 NTP 守护程序示例转换为这种新样式，它应该看起来更像这样:
```
$ # Sanity check
$ docker run -it \
 --rm \
 cguenther/ntpd 
ntpd: can't set priority: Permission denied
settimeofday: Operation not permitted
^C
$ # Now with the added SYS_TIME capability
$ docker run -it \
 --rm \
 --cap-add SYS_TIME \
 cguenther/ntpd 
ntpd: can't set priority: Permission denied
creating new /var/db/ntpd.drift
adjtimex adjusted frequency by 0.000000ppm
ntp engine ready
reply from 204.9.54.119: offset 15.805277 delay 0.023080, next query 5s
set local clock to Mon Oct  2 06:05:47 UTC 2017 (offset 15.805277s)
reply from 38.229.71.1: offset 0.005709 delay 31.617842, next query 9s
^C
```
如果您注意到，由于另一个缺失的功能，我们仍然有一个可见的错误，但是`settimeofday`错误已经消失，这是我们需要修复的最重要的问题，以便该容器运行。
有趣的是，如果我们想提高安全性，我们还可以从容器中删除不与`--cap-drop`一起使用的功能。对于这个标志，还有一个特殊的关键字`ALL`，可以用来删除所有可用的特权。如果我们使用这个来完全锁定我们的 NTP 容器，但让一切正常工作，让我们看看会是什么样子:
```
docker run -it \
 --rm \
 --cap-drop ALL \
 --cap-add SYS_TIME \
 --cap-add SYS_CHROOT \
 --cap-add SETUID \
 --cap-add SETGID \
 --cap-add SYS_NICE \
 cguenther/ntpd 
creating new /var/db/ntpd.drift
adjtimex adjusted frequency by 0.000000ppm
ntp engine ready
reply from 216.229.0.49: offset 14.738336 delay 1.993620, next query 8s
set local clock to Mon Oct  2 06:16:09 UTC 2017 (offset 14.738336s)
reply from 216.6.2.70: offset 0.523095 delay 30.422572, next query 6s
^C
```
在这里，我们首先删除了所有功能，然后重新添加了运行容器所需的几个功能，正如您所看到的，事情进展顺利。在您自己的部署中，我强烈建议，如果您有多余的开发能力或者是面向安全的，请花一些时间以这种方式锁定您正在运行的容器，因为它们将更加安全，并且您将更加确信容器正在以最小特权的原则运行。
The **Principle of Least Privilege** is a concept in computer security where you allow only the minimal privileges needed to run a component to the user or a service. This principle is very much a staple of high-security implementations but is often not found elsewhere due to the assumed overhead of managing the access even though it is a great way to increase the security and stability of your systems. If you would like to find out more about this concept, you should definitely make your way to [https://en.wikipedia.org/wiki/Principle_of_least_privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) and check it out.
# 摘要
在本章中，我们学习了部署健壮集群所需的许多高级工具和技术，例如:
*   管理容器问题的附加调试选项。
*   深入探讨 Docker 的高级网络主题。
*   实现我们自己的队列消息传递。
*   各种安全强化提示和技巧。
所有这些主题与之前的资料结合在一起，应该涵盖大多数集群的所有部署需求。但是在下一章中，我们将看到当主机、服务和任务的数量达到通常不期望的水平，并且我们开始看到集群崩溃时，我们需要担心什么问题，以及我们可以做些什么来缓解这些问题。