系统内的 log 之后， 重新给予一个跟原本不一样的 UUID 后，才能够顺利挂载！同时，为了让系统继续利用后续没有用到的磁盘空间，那个
xfs_growfs 就得要理解一下。 关于 xfs_growfs 我们会在后续第十四章继续强调！这里先理解即可。
这个指令挺有趣的，因为 cpio 可以备份任何东西，包括设备设备文件。不过 cpio 有个大问题， 那就是 cpio 不会主动的去找文件来备
份！啊！那怎办？所以啰，一般来说， cpio 得要配合类似 find 等可以找到文件名的指令来告知 cpio 该被备份的数据在哪里啊！ 有点小麻烦啦
～因为牵涉到我们在第三篇才会谈到的数据流重导向说～ 所以这里你就先背一下语法，等到第三篇讲完你就知道如何使用 cpio 啰！
[root@study ~]# cpio -ovcB > [file|device] ） 与小于 （） 一个新的文件！ 至于还原呢？就是将备份
文件读进来 cpio （ /tmp/boot.cpio
[root@study /]# ll -h /tmp/boot.cpio
-rw-r--r--. 1 root root 108M Jul 3 00:05 /tmp/boot.cpio
[root@study ~]# file /tmp/boot.cpio
/tmp/boot.cpio: ASCII cpio archive （SVR4 with no CRC）
我们使用 find boot 可以找出文件名，然后通过那条管线 （|, 亦即键盘上的 shift+\ 的组合）， 就能将文件名传给 cpio 来进行处理！最终
会得到 /tmp/boot.cpio 那个文件喔！你可能会觉得奇怪，为啥鸟哥要先转换目录到 / 再去找 boot 呢？ 为何不能直接找 /boot 呢？这是因为 cpio
很笨！它不会理会你给的是绝对路径还是相对路径的文件名，所以如果你加上绝对路径的 / 开头， 那么未来解开的时候，它就一定会覆盖掉原
本的 /boot 耶！那就太危险了！这个我们在 tar 也稍微讲过那个 -P 的选项！！理解吧！ 好了，那接下来让我们来进行解压缩看看。
范例：将刚刚的文件给他在 /root/ 目录下解开
[root@study ~]# cd ~
[root@study ~]# cpio -idvc  /dev/st0
还原：cpio -idvc < /dev/st0
这个 cpio 好像不怎么好用呦！但是，他可是备份的时候的一项利器呢！因为他可以备份任何的文件， 包括 /dev 下面的任何设备文件！
所以他可是相当重要的呢！而由于 cpio 必需要配合其他的程序，例如 find 来创建文件名，所以 cpio 与管线命令及数据流重导向的相关性就相
当的重要了！
其实系统里面已经含有一个使用 cpio 创建的文件喔！那就是 /boot/initramfs-xxx 这个文件啦！现在让我们来将这个文件解压缩看看，看
你能不能发现该文件的内容为何？
# 1. 我们先来看看该文件是属于什么文件格式，然后再加以处理：
[root@study ~]# file /boot/initramfs-3.10.0-229.el7.x86_64.img
/boot/initramfs-3.10.0-229.el7.x86_64.img: ASCII cpio archive （SVR4 with no CRC）
[root@study ~]# mkdir /tmp/initramfs
[root@study ~]# cd /tmp/initramfs
[root@study initramfs]# cpio -idvc < /boot/initramfs-3.10.0-229.el7.x86_64.img
.
kernel
kernel/x86
kernel/x86/microcode
kernel/x86/microcode/GenuineIntel.bin
early_cpio
22 blocks
# 瞧！这样就将这个文件解开啰！这样了解乎？
压缩指令为通过一些运算方法去将原本的文件进行压缩，以减少文件所占用的磁盘容量。 压缩前与压缩后的文件所占用的磁盘容量比
值， 就可以被称为是“压缩比”
压缩的好处是可以减少磁盘容量的浪费，在 WWW 网站也可以利用文件压缩的技术来进行数据的传送，好让网站带宽的可利用率上升喔
压缩文件的扩展名大多是：“*.gz, *.bz2, *.xz, *.tar, *.tar.gz, *.tar.bz2, *.tar.xz”
常见的压缩指令有 gzip, bzip2, xz。压缩率最佳的是 xz，若可以不计时间成本，建议使用 xz 进行压缩。
tar 可以用来进行文件打包，并可支持 gzip, bzip2, xz 的压缩。
压 缩：tar -Jcv -f filename.tar.xz 要被压缩的文件或目录名称
查 询：tar -Jtv -f filename.tar.xz
解压缩：tar -Jxv -f filename.tar.xz -C 欲解压缩的目录
xfsdump 指令可备份文件系统或单一目录
xfsdump 的备份若针对文件系统时，可进行 0-9 的 level 差异备份！其中 level 0 为完整备份；
xfsrestore 指令可还原被 xfsdump 创建的备份文件；
要创建光盘烧录数据时，可通过 mkisofs 指令来创建；
可通过 wodim 来写入 CD 或 DVD 烧录机
dd 可备份完整的 partition 或 disk ，因为 dd 可读取磁盘的 sector 表面数据
cpio 为相当优秀的备份指令，不过必须要搭配类似 find 指令来读入欲备份的文件名数据，方可进行备份动作。
（要看答案请将鼠标移动到“答：”下面的空白处，按下左键圈选空白处即可察看）
情境仿真题一：请将本章练习过程中产生的不必要的文件删除，以保持系统容量不要被恶搞！
rm /home/CentOS-7-x86_64-Minimal-1503-01.iso
rm -rf /srv/newcd/
rm /custom.iso
rm -rf /tmp/vda2.img /tmp/boot.cpio /tmp/boot /tmp/boot2 /tmp/boot3
rm -rf /tmp/services* /tmp/system.*
rm -rf /root/etc* /root/system.tar.bz2 /root/boot
情境仿真题二：你想要逐时备份 /home 这个目录内的数据，又担心每次备份的信息太多， 因此想要使用 xfsdump 的方式来逐一备份数据
到 /backups 这个目录下。该如何处理？
目标：了解到 xfsdump 以及各个不同 level 的作用；
前提：被备份的数据为单一 partition ，亦即本例中的 /home
实际处理的方法其实还挺简单的！我们可以这样做看看：
1. 先替该目录制作一些数据，亦即复制一些东西过去吧！
mkdir /home/chapter8; cp -a /etc /boot /home/chapter8
2. 开始进行 xfsdump ，记得，一开始是使用 level 0 的完整备份喔！
mkdir /backups
xfsdump -l 0 -L home_all -M home_all -f /backups/home.dump /home
3. 尝试将 /home 这个文件系统加大，将 /var/log/ 的数据复制进去吧！
cp -a /var/log/ /home/chapter8
此时原本的 /home 已经被改变了！继续进行备份看看！
4. 将 /home 以 level 1 来进行备份：
xfsdump -l 1 -L home_1 -M home_1 -f /backups/home.dump.1 /home
ls -l /backups
你应该就会看到两个文件，其中第二个文件 （home.dump.1） 会小的多！这样就搞定啰备份数据！
情境仿真三：假设过了一段时间后，你的 /home 变的怪怪的，你想要将该 filesystem 以刚刚的备份数据还原， 此时该如何处理呢？你可
以这样做的：
1. 由于 /home 这个 partition 是用户只要有登陆就会使用，因此你应该无法卸载这个东西！因此，你必须要登出所有一般用户， 然后
在 tty2 直接以 root 登陆系统，不要使用一般帐号来登陆后 su 转成 root ！这样才有办法卸载 /home 喔！
2. 先将 /home 卸载，并且将该 partition 重新格式化！
df -h /home
/dev/mapper/centos-home 5.0G 245M 4.8G 5% /home
umount /home
mkfs.xfs -f /dev/mapper/centos-home
3. 重新挂载原本的 partition ，此时该目录内容应该是空的！
mount -a
你可以自行使用 df 以及 ls -l /home 查阅一下该目录的内容，是空的啦！
4. 将完整备份的 level 0 的文件 /backups/home.dump 还原回来：
cd /home
xfsrestore -f /backups/home.dump .
此时该目录的内容为第一次备份的状态！还需要进行后续的处理才行！
5. 将后续的 level 1 的备份也还原回来：
xfsrestore -f /backups/home.dump.1 .
此时才是恢复到最后一次备份的阶段！如果还有 level 2, level 3 时，就得要一个一个的依序还原才行！
6. 最后删除本章练习的复制档
rm -rf /home/chapter8