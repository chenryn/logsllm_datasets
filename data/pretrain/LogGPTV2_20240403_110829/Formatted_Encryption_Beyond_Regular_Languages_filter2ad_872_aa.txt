title:Formatted Encryption Beyond Regular Languages
author:Daniel Luchaup and
Thomas Shrimpton and
Thomas Ristenpart and
Somesh Jha
Formatted Encryption Beyond Regular Languages
Daniel Luchaup
Madison, WI, USA
University of Wisconsin
PI:EMAIL
Thomas Ristenpart
University of Wisconsin
Madison, WI, USA
PI:EMAIL
Thomas Shrimpton
Portland State University
PI:EMAIL
Portland, OR, USA
Somesh Jha
University of Wisconsin
Madison, WI, USA
PI:EMAIL
ABSTRACT
Format-preserving and format-transforming encryption (FPE
and FTE, respectively) are relatively new cryptographic prim-
itives, yet are already being used in a broad range of real-
world applications. The most ﬂexible existing FPE and FTE
implementations use regular expressions to specify plaintext
and/or ciphertext formats. These constructions rely on the
ability to eﬃciently map strings accepted by a regular ex-
pression to integers and back, called ranking and unranking,
respectively.
In this paper, we provide new algorithms that allow en-
cryption with formats speciﬁed by context-free grammars
(CFGs). Our work allows for CFGs as they appear in prac-
tice, partly a pure grammar for describing syntax, and partly
a set of lexical rules for handling tokens. We describe a
new relaxed ranking method, structural ranking, that nat-
urally accommodates practical CFGs, thereby empowering
new FPE and FTE designs. We provide a new code library
for implementing structural ranking, and a tool that turns
a simple YACC/LEX-style grammar speciﬁcation into rank-
ing code. Our experimental analysis of the code shows that
the new CFG ranking algorithm is eﬃcient in interesting
settings, even when the grammars are ambiguous. For ex-
ample, we show that one can eﬃciently rank C programs of
size thousands of kilobytes in milliseconds.
Keywords
Format-preserving encryption; format-transforming encryp-
tion; ranking
1.
INTRODUCTION
Format-preserving encryption (FPE) [2–4] and Format-
transforming encryption (FTE) [7], have recently emerged
as practically important versions of formatted encryption.
Loosely speaking, formatted encryption is like conventional
encryption in terms of the security goals, but with the addi-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660351 .
tional functionality of transforming plaintexts conforming to
one format — say, described by a regular expression (regex)
— into ciphertexts conforming to another.
When FPE is used, the plaintext and ciphertext formats
are the same. This admits, for example, in-place encryption
of database entries that must abide by some strict format-
ting requirements, such as being a valid credit-card number,
social security number, or postal address. FPE is already
widely used in the payment industry.
FTE, on the other hand, encrypts a plaintext of a given
format to ciphertext of a diﬀerent format. FTE is a gen-
eralization of FPE. Dyer et al. [7] recently introduced FTE
and showed its eﬃcacy as a tool for circumventing network
monitors that use deep-packet inspection to block protocols
such as Tor [6].
Ranking schemes and formatted encryption. At the
core of all known instantiations of FPE and FTE schemes are
eﬃcient algorithms for ranking languages, i.e., for mapping
language elements to integers in an invertible fashion. Gold-
berg and Sipser (GS) [8] introduced the notion of ranking as
a technique for optimal language compression. In particu-
lar, the GS rank of a word w in a language L is the position
of w in the lexicographical ordering of L, given as a non-
negative integer. Thus, ranking deﬁnes a bijective function
(rank), and unranking deﬁnes the inverse function (unrank)
that maps n ∈ {0, 1, . . . ,|L| − 1} to the word w ∈ L whose
rank is n. A pair of ranking and unranking algorithms for a
language L constitute a ranking scheme.
GS [8] gave a polynomial-time ranking scheme for lan-
guages represented by unambiguous context-free grammars
(CFGs). They also suggest a method for ranking a regu-
lar language, given a DFA for it, but it was Bellare et al. [2]
who provided the ﬁrst detailed algorithm for such a method.
(Since they credit the method to GS, we will continue to call
it GS ranking.)
Moreover, Bellare et al. [2] show how to instantiate eﬃ-
cient FPE when the format is the regular language L speci-
ﬁed by a DFA. Given a blockcipher E that operates over the
integers {0, 1, . . .|L|−1 } (an integer cipher ), the FPE cipher-
text of plaintext x ∈ L is deﬁned by y = unrank(EK (rank(x)).
For obvious reasons, this is known as rank-encipher-unrank
FPE.
This scheme is deterministic, as no per-plaintext random-
ness or internal state is used. On the other hand, the FTE
scheme of Dyer et al. [7] uses conventional (randomized or
stateful) authenticated encryption (AE) as its underlying
1292encryption primitive in their scheme. To encrypt a plain-
text x ∈ L1, one represents x as a bit string, encrypts it
using the AE scheme, treats the resulting AE ciphertext as
the base-2 representation of an integer, and unranks this
to the appropriate string y ∈ L2. The Dyer et al. scheme
supports ciphertext formats speciﬁed by regular expressions
(regexes), by way of ﬁrst converting the regex to an NFA
and then to a (minimal) DFA using standard algorithms.
The latter NFA-to-DFA step can result in an exponential
increase in the number of states of the resulting DFA au-
tomaton.
Luchaup et al. [14] provide a uniﬁed framework for for-
matted encryption that captures all of the FPE and FTE
schemes so far described, and they go on to give regex-
speciﬁed FTE and FPE schemes that avoid NFA-to-DFA
conversion. To do so, they introduced the notion of relaxed
ranking, which maps strings in a language L to integers in
ZN for N ≥ |L|. The relaxed ranking must also be eﬃ-
ciently invertible on the image of L. They show how to
build FTE/FPE schemes using relaxed ranking, and pro-
vide an eﬃcient relaxed ranking scheme starting only from
the NFA representation of a language.
Context-free-language formats. All the work so far
shows how to eﬃciently support formats deﬁned by regular
languages. But there are important settings in which allow-
ing formats to be speciﬁed by CFGs would be more useful.
For example, network protocol messages, ﬁle formats, and
(programming) language speciﬁcations are often described
by CFGs, not regexes. To overcome the restriction to regu-
lar languages, one needs an algorithm for eﬃciently ranking
strings in a format described by a CFG. To the best of our
knowledge, the only known ranking method using CFGs,
that of GS [8], works only for unambiguous CFGs, is far
too slow in practice, and lacks a corresponding unranking
method.
What’s more, while CFGs are more expressive then regexes,
they are typically more diﬃcult to specify and use, hence the
widespread reliance on tools such as YACC and LEX [13]. In
practice, almost no context-free language (CFL) is speciﬁed
solely based on a CFG. A CFL is typically speciﬁed at two
levels: a syntax level speciﬁed using a CFG; and a lexical
level speciﬁed using regular expressions. The lexical level
deﬁnes the symbols, also called tokens, used by the CFG. A
grammar that uses regexes for tokens can be converted to
a pure CFG, by including token deﬁnition in the CFG de-
scription, but this comes at the cost of programming eﬀort,
ﬂexibility, explosion of the number of symbols, and, most
importantly, runtime performance. Formatted encryption
supporting CFLs should likewise handle this separation.
To sum up, the potential of formatted encryption is lim-
ited by the lack of (relaxed-)ranking schemes that eﬃciently
handle context-free languages in practical settings. The
main eﬀort of this work is to move beyond this limitations.
Our contributions. We provide the ﬁrst eﬃcient approach
for performing relaxed ranking from a CFG (either pure,
or using lexical tokens). Our approach for CFLs follows a
general two-step framework ﬁrst introduced by Luchaup et
al. [14], here we ﬁrst map strings in the language to one of
their parse trees (chosen deterministically), and then we per-
form a (strict) ranking of parse trees. Thus if the grammar
is not ambiguous (each string has only one parse tree), then
our relaxed-ranking approach becomes strict ranking. For
the second step, we give a ranking method for parse trees
which is “structural” in the sense that it allows the use of
distinct ranking algorithms for trees derived from distinct
grammar symbols. In particular, it allows for distinct rank-
ing algorithms for the tokens of the language. As a result
our method also works with languages speciﬁed using the
two levels, syntax and lexical. This is an essential feature
for eﬃciency and for using existing grammar speciﬁcations.
In fact, our method allows relaxed ranking of a slightly
more general class of languages that we call cfg-parseable
languages. An example is a format that starts with a byte
counter that speciﬁes how long the rest of the data is, and
that ends with a checksum. This format is not context-free,
or even context-sensitive.
Since ranking has applications beyond formatted encryp-
tion, such as compression and random language member
generation [8, 11, 16], we also provide the ﬁrst analysis of
the issues involved when we replace ranking with relaxed
ranking in those applications. One central matter in this
analysis is the ambiguity of the grammar. We quantify am-
biguity, and then show how it aﬀects the quality of ranking
applications, including formatted encryption.
We also provide a library that implements our relaxed
ranking for arbitrary CFGs, and we deliver a tool that turns
a simple YACC/LEX-like grammar speciﬁcation into code
that performs ranking for that grammar. This is then used
as a pluggable component in the FPE/FTE framework from
Luchaup et al. [14], yielding formatted encryption of context-
free languages. We report on performance of our relaxed-
ranking schemes, and show that we can rank C programs up
to 5,000 bytes in under one second, or even under 12 ms if
we bound the length of lexical tokens.
2. BACKGROUND
In this section we describe the state of the art in Format-
ted Encryption. We start with a formal deﬁnition of ranking
and unranking, followed by a description of FTE and FPE
(by extension). After that, we introduce relaxed ranking,
and explain how FTE and FPE are adapted to use it. We
conclude with the limitations of the current work.
Basic notions. A format is simply a language L, a set of
strings over some alphabet. We will use the terms language
and format interchangeably, and for simplicity we assume
languages that are ﬁnite. In practice one may use inﬁnite
languages, but then take as format a slice of the language:
= {w ∈ L : |w| = n}
if L is a language and n ∈ N, then L
is the slice of L that contains all its strings of length n.
(n)
A format speciﬁcation describes a format L. A trivial
speciﬁcation is simply to list all elements of L, but for large
languages this won’t be eﬃcient, so we do not consider it
further. Rather, we seek compact and developer-friendly
speciﬁcations. When L is regular, then options for spec-
iﬁcation include using a regular expression (regex), a non-
deterministic ﬁnite automaton (NFA), or deterministic ﬁnite
automaton (DFA). When L is context-free (but not regular),
then a CFG becomes a natural option. Supporting CFG
speciﬁcations is the goal of our paper.
Following Luchaup et al. [14], a format-transforming en-
cryption (FTE) scheme is a pair of algorithms (E,D). The
encryption algorithm E may or may not be randomized. It
takes as input a pair of format speciﬁcations that specify
a plaintext format Lp and a ciphertext format Lc, as well
1293as a message M ∈ Lp, and a secret key. It produces a ci-
phertext C ∈ Lc or a special error symbol ⊥. Decryption D
reverses the operation. To indicate the type of speciﬁcations
supported by a scheme, we will often refer to XXX-speciﬁed
FTE, where XXX ∈ {DFA, NFA, regex, CFG}.
An FPE scheme is an FTE scheme for which Lp = Lc,
meaning that ciphertexts and plaintexts must share the same
format. We will use the term FTE to refer to schemes that
may or may not be format-preserving.
DFA-speciﬁed FTE. Bellare, Ristenpart, Rogaway, and
Stegers (BRRS) [2] ﬁrst formalized the notion of FPE, build-
ing oﬀ prior work on de novo constructions [18], arbitrary-
set enciphering schemes [3], and industry demand for the
primitive. They also introduced an FPE scheme that works
for any regular language.
In BRRS, formats are speciﬁed
using a deterministic ﬁnite automaton (DFA). Their con-
struction makes use of ranking, which was ﬁrst introduced
in the context of language compression by Goldberg and
Sipser (GS) [8]. Ranking found subsequent use in appli-
cations such as random language member generation [16],
biology (c.f. [11]), and now in formatted encryption.
Let L be a language with |L| = N . A ranking scheme
for L is a bijection rankL : L → ZN together with its inverse
unrankL : ZN → L. It is common to deﬁne the ranking func-
tion with respect to some total order ≺ on L; for example,
the GS ranking takes ≺ to be the lexicographical ordering.
Given a total order, the ranking function (relative to ≺) is
deﬁned by rankL(x) = |{y ∈ L : y ≺ x}|.
BRRS give an FPE scheme for arbitrary regular languages
using DFA-based ranking. A simple generalization of their
FPE scheme to an FTE scheme is the following. Consider
two languages X and Y , such that rankX and unrankX form
a ranking scheme for X, and rankY and unrankY form a
ranking scheme for Y . Assume that |X| = |Y |, and a cipher
E : {0, 1}k× Z|Y | → Z|Y | for some key length k. (Recall that
a cipher is a family of functions such that for any K ∈ {0, 1}k
it is the case that EK (·) = E(K,·) deﬁnes a permutation on
−1
K . Then a plain-
its domain.) Let the inverse of EK be E
text M ∈ X can be encrypted to ciphertext C ∈ Y using
the rank-encipher-unrank construction deﬁned as shown in
Figure 1.
EK (M ) :
If M /∈ X then Return ⊥
r ← rankX (M )
c ← EK (r)
Return unrankY (c)
DK (C) :
If C /∈ Y then Return ⊥
c ← rankY (C)
r ← DK (c)
Return unrankX (r)
Figure 1: Encryption and decryption using the rank-
encipher-unrank construction.
When X = Y , this matches the BRRS FPE scheme.
We note that the BRRS scheme uses the GS algorithm for
(un)ranking, and this requires X and Y to be speciﬁed by
DFAs. BRRS also argue that the DFA representation is ef-
fectively necessary for regular X, Y , because ranking from
given either the regex or NFA representations is PSPACE-
complete.
Regex-speciﬁed FTE. FTE was ﬁrst introduced by Dyer,
Coull, Ristenpart, and Shrimpton (DCRS) [7]. Their mo-
tivating application was avoidance of network censors that
identify anti-censorship protocols via regex-based deep-packet
inspection. Hence, they targeted FTE with formats speciﬁed
by regular expressions. They also sought to support arbi-
trary unformatted data as plaintexts. Like BRRS, they used
the DFA-based GS ranking scheme. To accommodate regex
speciﬁcations, DCRS employed the classic regex-to-NFA-to-
DFA conversion process (c.f., [19]). For some regexes, this
process leads to poor performance (or even failure) because
the NFA-to-DFA conversion results in an exponential in-
crease in automaton size. However, they show experimen-
tally that this behavior is not typical in their use cases.
FTE was revisited by Luchaup, Dyer, Jha, Ristenpart,
and Shrimpton (LDJRS) [14], who generalized the DCRS
treatment in various ways. LDJRS also provided a new
method for regex-speciﬁed FTE that completely avoids the
NFA-to-DFA conversion. The basis of their new technique is
called relaxed ranking. Consider a language L and the inte-
gers ZN for some N ≥ |L|. A relaxed-ranking scheme for L is
a pair of functions RankL : L → ZN and UnrankL : ZN → L
such that for all x ∈ L it holds that UnrankL(RankL(x)) = x.
See Figure 2. (We capitalize Rank and Unrank to distinguish
them from strict ranking with functions rank and unrank.)
It follows that Rank is always injective, while Unrank may
be surjective in the case that |L| < N .
LDJRS gave a recipe for building a relaxed-ranking scheme
for a language L, requiring three ingredients (see the mid-
dle diagram in Figure 2). First, one speciﬁes an “inter-
mediate” set I for which one has eﬃcient algorithms for
rankI : I → ZN and unrankI : ZN → I where N = |I|. Sec-