straightforward to augment strand systems to capture this stronger
notion of conﬂict, it is not clear that such a notion is of particular
interest.
1116. DISCUSSION
In this paper, we have investigated the relationship between s-
trand spaces and multi-agent systems. Our results show that strand
spaces are strictly less expressive than strand systems, a subclass of
multi-agent systems that seems to capture the assumptions under-
lying strand spaces, in two quite distinct respects. The ﬁrst is that
strand spaces cannot express choice, the fact that exactly one of t-
wo possible behaviors is chosen. The second is that strand spaces
have no notion of agents.
How serious are these two issues? That depends, of course, on
what we are trying to prove. Consider ﬁrst the inability of strand
spaces to express choice. In [21], the types of properties proved
typically have the form “for all bundles in the strand space, X hap-
pens”. One way to interpret our result of Section 4 is that when a
strand space is used to model a system, some of the bundles may
not correspond to situations that may actually arise in the system—
those bundles can be seen as “impossible” bundles. This is not a
problem, of course, if the property of interest in fact holds in the
larger system. However, this may not always be the case. For ex-
ample, we may well want to prove that a property like “agent 2
sends at most one message” holds in all executions of a protocol. If
the protocol also has the property that agent 2 can send messages to
either 1 or 3 (as is the case in the protocol described by the system
R1 in Section 4), then the fact that agent 2 sends at most one mes-
sage in every execution of the protocol will simply not be provable
in the strand-space framework.
The runs of a strand system can be viewed as a linearization of
bundles, that is, an explicit ordering of the actions performed by
agents in different bundles. Thayer et al. [21] suggest that results
about strands can be imported to runs. For example, in [21, p.
226], they say “[Alternatively,] results about authentication proto-
cols proved in a strand space context can be imported into the more
usual linear models by linearizing the bundles.” Our results point to
subtleties in doing this. More precisely, while results about strands
can be imported to results about runs (the runs that arise from trans-
lating the strand space to a system), the converse may not be true,
depending on the expressiveness of the language.
Turning to the issue of agents, the strand-space framework as-
sumes that messages relayed between strands form the only means
of exchanging information between strands. In other words, there
is no shared state between strands. Therefore, for all intents and
purposes, we can imagine that every strand is executed by a diffe-
rent agent. On the other hand, if the same agent is executing two
strands then, intuitively, it should know whatever is happening on
both strands, without requiring communication between them. Fur-
thermore, as soon as one wants to analyze the properties of strand
spaces using belief and knowledge, agents to which the knowl-
edge can be ascribed are needed. But even without bringing in
knowledge, we need to be careful in interpreting security results
proved under the assumption that different agents perform diffe-
rent strands. Clearly this assumption is not, in general, true. Ide-
ally, security protocols should be proved correct under any “rea-
sonable” assignment of agents to roles in the security protocol. At
the very least it should be clear under which assignments the re-
sult holds. For instance, it is known that methods for the analysis
of cryptographic protocols that fail to handle multiple roles for the
same agent do not yield dependable results, as they may not reveal
multi-role ﬂaws. Snekkenes [16] studies such ﬂaws in the context of
various cryptographic protocol logics. Multi-role ﬂaws commonly
arise when a cryptographic protocol logic implicitly assumes that if
an agent a takes on a role A in some session, then he will not also
take on another role B in some different session. This assumption
is often a consequence of the identiﬁcation of the notions of role
and agent. Snekkenes shows that reasonable protocols that can be
proved correct under the assumption that an agent takes on the same
role in all sessions are ﬂawed if this assumption is dropped. Recent
work on analyzing mixed protocols using strand spaces [20] shows
that strand spaces can be extended to deal with what essentially
amount to multi-role ﬂaws. However, the approach often requires
phantom messages (messages that are not actually exchanged dur-
ing runs of the protocols) to carry state information between the
different protocol strands corresponding to the same agent.
Some of the topics we have explored in this paper appear in var-
ious forms in other work. For example, Cervesato et al. [6] deﬁne
a notion of parametric strand, essentially a strand where messages
may contain variables. Parameterized strands correspond to roles,
which are implicit in the original work on strand spaces. The work
of Cervesato et al. also deals with the evolution of the system de-
scribed by a strand space; they deﬁne a one-step transition between
bundles. The transition is reminiscent of the one we describe in
Section 3, but is restricted to extending a single strand at a time.
(They also allow actions speciﬁc to their formalization, such as the
instantiation of a strand from a parametric strand.)
The set of runs in the system and the agent assignment are partic-
ularly signiﬁcant when we consider speciﬁcations that are not run-
based [7, 11]. A run-based speciﬁcation is checked on a per-run
basis. For example, “agent 2 sends at most 1 message” is a run-
based speciﬁcation: given a run, one can check whether the prop-
erty holds for that run. A run-based speciﬁcation holds for a set of
runs if it holds for all runs in the set. In contrast, a knowledge-based
speciﬁcation [7, 11] such as “after running the protocol, agent 2
knows X” cannot be checked on a per-run basis, as it relies on the
set of runs as a whole to verify the property. It holds if, in all runs
in the system that agent 2 considers possible after running the pro-
tocol, X holds. Clearly it does not sufﬁce to look at an individual
run to determine whether such a property holds. Similarly, prob-
abilistic speciﬁcations like “X holds in at most 3% of the runs”
also depend on the whole system and cannot be checked simply by
examining individual runs.
Typical speciﬁcations in the security literature are safety prop-
erties (in the sense of Alpern and Schneider [1], “bad things don’t
happen”), and hence are run-based. Run-based speciﬁcations have
the property that if they hold in a system, they hold in any subset of
the runs of the system. It is “safe” to prove that a run-based spec-
iﬁcation holds of a strand space which translates to a superset of
the intended system. Proving that the property holds for “impossi-
ble” runs does not hurt. This is not the case for properties that are
not run-based. We believe that knowledge-based speciﬁcations, as
well as probabilistic ones, will play a signiﬁcant role in the design
and analysis of security protocols. Fairness is a good example. A
protocol is fair if intuitively no protocol participant can gain an ad-
vantage over other participants by misbehaving. In the context of
fair exchange protocols [2, 3, 15], where two agents exchange one
item for another, fairness ensures that either each agent receives the
item it expects, or neither receives any information about the oth-
er’s item. This notion of “not receiving any information” can be
interpreted as meaning that no knowledge is gained. Our results
suggest that strand spaces, as currently deﬁned, will have difﬁculty
handling such speciﬁcations.
We should point out that it is straightforward to reason about
knowledge in the context of strand spaces. For instance, Syverson
[19] describes a framework where the set of bundles in a strand
space is viewed as a set of possible worlds. He associates with ev-
ery strand in the strand space a principal, as we do, and uses this
setting to provide a model for the knowledge of principals. As his
framework is directly based on strand spaces, it suffers from the
112same expressiveness problems we pointed out in Section 4. This
emphasizes that the problem we point out is not a problem of how
to express knowledge in strand spaces. Rather, it is purely a prob-
lem with expressiveness of the models allowed in the strand-space
framework.
Despite these criticisms, we feel strand spaces are an impor-
tant and useful formalism. They can be used to provide simple,
transparent proofs of run-based properties. Our results suggest it
is worth exploring their limitations and the extent to which exten-
sions of strand spaces (such as the extended strand spaces intro-
duced here) retain these properties.
7. ACKNOWLEDGMENTS
We would like to thank Andre Scedrov for pointing us to fair
exchange protocols as a likely source of knowledge-based speciﬁ-
cations in security protocols. Vicky Weissman and Kevin O’Neill
read a draft of this paper and provided numerous helpful sugges-
tions.
8. REFERENCES
[1] B. Alpern and F. B. Schneider. Deﬁning liveness.
Information Processing Letters, 21:181–185, 1985.
[2] N. Asokan, V. Shoup, and M. Waidner. Asynchronous
protocols for optimistic fair exchange. In Proceedings of the
IEEE Symposium on Research in Security and Privacy,
pages 86–99. IEEE Computer Society Press, 1998.
[3] M. Ben-Or, O. Goldreich, S. Micali, and R. L. Rivest. A fair
protocol for signing contracts. IEEE Transactions on
Information Theory, 36(1):40–46, 1990.
[4] M. Burrows, M. Abadi, and R. M. Needham. A logic of
authentication. ACM Transactions on Computer Systems,
8(1):18–36, 1990.
[5] N. Busi and R. Gorrieri. Distributed conﬂicts in
communicating systems. In ECOOP Workshop, volume 924
of Lecture Notes in Computer Science, pages 49–65.
Springer, 1994.
[6] I. Cervesato, N. Durgin, J. Mitchell, P. Lincoln, and
A. Scedrov. Relating strands and multiset rewriting for
security protocol analysis. In Proceedings of the 13th IEEE
Computer Security Foundations Workshop, pages 35–51.
IEEE Computer Society Press, 2000.
[7] R. Fagin, J. Y. Halpern, Y. Moses, and M. Y. Vardi.
Reasoning about Knowledge. The MIT Press, 1995.
[8] J. W. Gray III and P. F. Syverson. A logical approach to
multilevel security of probabilistic systems. Distributed
Computing, 11(2):73–90, 1998.
[9] A. J. Grove. Naming and identity in epistemic logic II: a
ﬁrst-order logic for naming. Artiﬁcial Intelligence,
74(2):311–350, 1995.
[10] A. J. Grove and J. Y. Halpern. Naming and identity in
propositional logics, Part I: the propositional case. Journal of
Logic and Computation, 3(4):345–378, 1993.
[11] J. Y. Halpern. A note on knowledge-based programs and
speciﬁcations. Distributed Computing, 13:145–153, 2000.
[12] J. Y. Halpern, Y. Moses, and M. R. Tuttle. A
knowledge-based analysis of zero knowledge. In Proc. 20th
ACM Symp. on Theory of Computing, pages 132–147, 1988.
[13] J. McLean. Security models. In J. Marciniak, editor,
Encyclopedia of Software Engineering. Wiley Press, 1994.
[14] C. Palamidessi. Comparing the expressive power of the
synchronous and the asynchronous pi-calculus. In
Conference Record of the Twenty-Fourth Annual ACM
Symposium on Principles of Programming Languages, pages
256–265. ACM Press, 1997.
[15] V. Shmatikov and J. C. Mitchell. Analysis of a fair exchange
protocol. In Seventh Annual Symposium on Network and
Distributed System Security (NDSS 2000), pages 119–128,
2000.
[16] E. Snekkenes. Roles in cryptographic protocols. In
Proceedings of the 1992 IEEE Symposium on Security and
Privacy, pages 105–119. IEEE Computer Society Press,
1992.
[17] S. Stubblebine and R. Wright. An authentication logic
supporting synchronization, revocation, and recency. In 3rd
ACM Conference on Computer and Communications
Security. ACM Press, 1996.
[18] P. Syverson. A logic for the analysis of cryptographic
protocols. NRL Report 9305, Naval Research Laboratory,
1990.
[19] P. Syverson. Towards a strand semantics for authentication
logic. Electronic Notes in Theoretical Computer Science, 20,
1999.
[20] F. J. Thayer F´abrega, J. C. Herzog, and J. D. Guttman. Mixed
strand spaces. In Proceedings of the 12th IEEE Computer
Security Foundations Workshop. IEEE Computer Society
Press, 1999.
[21] F. J. Thayer F´abrega, J. C. Herzog, and J. D. Guttman. Strand
spaces: Proving security protocols correct. Journal of
Computer Security, 7(2/3):191–230, 1999.
APPENDIX
A. PROOFS
Theorem 3.1: R; A; A is a strand system.
Proof: Let Va consist of all the histories a for  2 R; A; A.
Let R0 be the strand system generated by the sequence hVa : a 2
Ai. To show that R; A; A is a strand system, it clearly sufﬁces
to show that R; A; A = R0. It is easy to check from the con-
struction that every run in R; A; A satisﬁes MP1–3, and thus is
in R0. This shows that R; A; A (cid:18) R0.
To show that R0 (cid:18) R; A; A, let  be a run in R0. We know
that  satisﬁes MP1–3, and that a 2 Va for all  (cid:21) 0. We
need to construct a chain C such that a = hi 
a C for all
a 2 A. Unfortunately, we cannot simply construct the chain induc-
tively, bundle by bundle. While this would work if different strands
strand were associated with different agents, in general, making the
correct choice of strands at each step (correct in the sense that the
construction will not get stuck at a later point) turns out to require
arbitrary lookahead into the run. Roughly speaking, this is because
it is not clear which combination of strands for agent a to choose
to make up a’s local state in a particular bundle.
Instead, we proceed as follows. Intuitively, we want to determine
for each agent which strand preﬁx to extend at every step of the
chain. Once we have found for each agent an appropriate way of
extending strand preﬁxes at every step, it is not hard to construct
the bundles in the chain.
We start with some deﬁnitions. Given a node h; ki in , let
tr; k be the preﬁx of tr of length k. Given a bundle B and an
agent a, let
TraB = fftr; k : h; ki 2 B; h; k  1i =2 B;
k (cid:21) 1; A = agg;
113where we use the ffgg notation to denote multisets. Thus, TraB
is the multiset consisting of all the maximal preﬁxes of strands as-
sociated with a having at least one node in B. Note that TraB
is a multiset, not a set. It is quite possible that there are distinct
nodes h; ki and h0; ki in B such that tr; k = tr0; k and
h; k  1i; h0; k  1i =2 B.
In this case, tr; k is listed at
least twice in the multiset. Given a multiset  of sequences, let
Ba  = fB : TraB =  g. That is, Ba  consists of all
bundles where the actions performed are precisely those speciﬁed
by the sequences in .
For each agent a, we inductively construct the following tree,
whose vertices are labeled by multisets of sequences. The root is
labeled by the empty multiset. Suppose a vertex 	 at level  (that