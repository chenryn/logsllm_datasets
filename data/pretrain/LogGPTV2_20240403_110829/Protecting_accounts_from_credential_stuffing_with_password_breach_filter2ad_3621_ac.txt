Private Information Retrieval (PIR): PIR protocols, in-
troduced by Chor et al. [6], require that a user be able to
query an item from a server without revealing which item
was queried. While PIR protocols which are secure against
computationally-bounded adversaries [32] exceed our re-
quester anonymity and password secrecy requirements, their
security guarantees are one-sided—they allow the server to
leak arbitrary information about the database to the clients.
Additionally, single-server PIR protocols require commu-
nication that is effectively comparable to the size of the
database [22]. Multi-server PIR protocols reduce this over-
head, and even offer security guarantees against adversarial
clients [19], but require that users trust that there is no risk of
collusion amongst servers.
Oblivious Transfer (OT): 1-out-of-N OT protocols [8, 46]
extend the PIR threat model to also require that a client learns
no information about unaccessed elements of the server’s
database during the query. (Here N refers to the number of
database entries.) While OT appears to capture the ideal re-
quirements for a breach alerting protocol, we note that with-
out weakening its security requirements, OT turns out to be a
powerful crypto primitive [29] and requires communication
overhead proportional to N.
Private Set Intersection (PSI): PSI protocols allow two par-
ties with sets S1 and S2 respectively to compute some func-
tions each of S1∩S2 and learn nothing more about each other’s
sets. We can model our use case as PSI where the client has
a singleton set and the server learns nothing (an additional
requirement needed in our work not typically seen in PSI).
USENIX Association
28th USENIX Security Symposium    1559
Early works leading to PSI [24,38] are based off of the Difﬁe-
Hellman assumption which we also leverage in our protocol.
While PSI protocols based on OT have been shown to be the
fastest in practice, they require signiﬁcant communication
overhead that is unsuitable for a network setting [45]. Ad-
ditionally, they are designed for settings where both parties
have large, balanced sets which does not map to our scenario.
2.6 Ethics
Providing a breach alerting service necessitates access to cre-
dentials that were illicitly obtained and then released. For our
work, we exclusively rely on credential breaches that are now
publicly accessible, which any sophisticated attacker is likely
to already have access to. As such, we argue that making this
information accessible to users and identity providers does
not materially increase the potential for harm—but that any
protocol should have measures in place to protect against
abuse. Passwords exposed by breaches have a history of re-
search applications including improving password strength
meters [11,39,57] and studying password use in the wild [10].
Surveyed users have also expressed a positive attitude to-
wards breach alerting services, particularly in the context of
password resetting [28]. We believe the potential to reduce ac-
count hijacking outweighs any risk of collating already public
credential data.
3 Breach alerting protocol
Our design for a data breach alerting protocol relies on a com-
bination of k-anonymity, private set intersection, and computa-
tionally expensive hashing to address all the risks outlined in
our threat model. Here, we detail the cryptographic primitives
we use to implement our protocol and the data exchanged be-
tween a client and server. We consider two variants: one that
leaks some bits of password material that is secure against
a resource-constrained attacker (e.g., the attacker is unable
to circumvent k-anonymity and expensive hashing); and one
that leaks zero bits of password material, but where clients
must spend twice as much time hashing and receive weaker
bounds on requester anonymity.
3.1 Resource-constrained attacker variant
CreateDatabase: Prior to any client lookup, the server must
construct a secure database containing all known breached cre-
dentials. We outline this process in Algorithm 1. The server
ﬁrst canonicalizes the username associated with a creden-
tial by removing any capitalization and stripping information
related to email providers (e.g., PI:EMAIL becomes
user). This step aids in de-duplication while also enabling
us to detect reuse across sites that exclusively use usernames
rather than email addresses. Post-canonicalization, the server
calculates a computationally expensive hash of both the canon-
ical username and credential password. We rely on Argon2
with a conﬁguration that uses a single thread, 256 MB of
memory, and a time cost of three.2
The server then blinds the 16-byte hash output with a 224-
bit secret key b by mapping the hash to the elliptic curve
NID_secp224r1 and raising the resulting point to the power
b.3 The server saves only a 2-byte preﬁx of hash unblinded
which it uses for partitioning the entire database, where we de-
note a partition as S(cid:48). Here, hashing satisﬁes our requirement
for an inefﬁcient oracle even in the event that an attacker gains
direct access to the underlying database. Blinding serves as an
additional layer of defense in the event of a breach, but also to
prevent information leakage and ensure requester anonymity
and password secrecy via private set intersection (detailed
shortly). As the key b has no external dependencies, the server
can rotate it regularly by ﬁrst decrypting old records and then
re-blinding with a new key b(cid:48).
CreateRequest: When generating a request, a client repeats
the same hashing and blinding strategy as the server. We
outline this process in Algorithm 2. In contrast to the server,
the client adopts its own secret key a which it initializes per
request. The resulting request includes the 2-byte hash preﬁx
and the blinded full hash. This 2-byte preﬁx—while leaking
some bits of password material—provides the client with k-
anonymity over the universe of all username and password
pairs (not just those in breaches). Previous investigations of
password usage estimate that users have roughly 6–8 unique
passwords [16, 44, 56]. With an estimated 3.9 billion Internet
users in the world [52], if we assume each user has just one
unique username, this amounts to an estimated 23.4–31.2
billion unique credential pairs. As a rough approximation then,
a user will share their credential preﬁx with 357,000–476,000
other credentials. Even if an adversarial server were to pre-
compute a dictionary of the most popular passwords, they
would have to repeat this process for each individual username.
As such, our protocol satisﬁes our computational requirement
for requester anonymity and password secrecy. In the case
of an adversarial client, any request for a guessed credential
is gated on the successful computation of an expensive hash,
thus satisfying our requirement for an inefﬁcient oracle.
CreateResponse: A server responds to a request according to
Algorithm 3. Given a hash preﬁx, the server returns all known
unsafe credentials S(cid:48) tied to the preﬁx. While ideally we could
provide the entire blinded contents of S to a client, in practice
this is too computationally expensive as |S| scales to billions
of records. By partitioning S, we can limit the data down-
loaded to a client while ensuring membership correctness, at
the cost of working with anonymity sets rather than perfect se-
2According to libsodium, this amounts to roughly 0.7 seconds on a 2.8
3We use multiplicative notation to refer to elliptic-curve group operations
Ghz Core i7 CPU [34].
in the paper.
1560    28th USENIX Security Symposium
USENIX Association
Algorithm 1 CreateDatabase: Store a blinded and strongly
hashed copy of all known breached credentials.
Require: S = {(u1, p1), . . . , (un, pn)}, b = rand(), and n = 2,
a preﬁx length
for (ui, pi) ∈ S do
i ← CANONCIALIZE(ui)
u(cid:48)
H ← HASH(u(cid:48)
i, pi)
Hb ← BLIND(H,b)
H[0:n] ← BYTESUBSTRING(H,n)
PARTITIONSTORE(H[0:n],Hb)
1: function CREATEDATABASE(S,b,n)
2:
3:
4:
5:
6:
7:
8:
9: end function
end for
crecy. As noted in Section 2.5, the best current constructions
dictate that without partitioning S, we cannot hope to deploy a
scheme with reasonable limits on data downloaded by clients
and computation performed by the server. By avoiding any
client nonce or salt for hashing, retrieval is entirely static for
the server apart from inexpensive blinding (at least compared
to hashing). This satisﬁes our requirement for resistance to
denial of service.
Providing S(cid:48) absent blinding would leak information about
other exposed credentials. Instead, we rely on Difﬁe-Hellman
private set intersection [24] which is relatively efﬁcient for
a network setting on non-mobile devices [45]. The server re-
turns all known breached credentials blinded with b while pro-
viding a client with an index into the doubly-blinded list Hab.
This requires the commutative properties of elliptic curve
Difﬁe–Hellman (ECDH) such that the client can decrypt this
result to recover Hb during veriﬁcation, while the remaining
contents of S(cid:48) remain hidden.
More formally, under the random oracle model [3], with
Argon2 modeled as a perfect hash function, our hash-and-
blind scheme implements an oblivious pseudorandom func-
tion (OPRF) against honest-but-curious adversaries under the
decisional Difﬁe-Hellman assumption. When b is kept se-
cret, outputs of the hash-and-blind scheme on any user inputs
(ui, pi) reveal no information about the hashed and blinded
output on any other (u(cid:48), p(cid:48)). A more technical and detailed
note is laid out in Appendix B. This achieves bounded leakage
and given only the leakage L as deﬁned in Section 2.3, we
can construct a Simulator to simulate the entire response of
the server.
Verdict: Finally, a client determines whether their credential
was exposed in a breach by ﬁnishing the private set inter-
section protocol as detailed in Algorithm 4. This process is
entirely local and, absent independent telemetry, never reveals
the verdict of a match to the server.
Algorithm 2 CreateRequest: Client query to determine
whether a blinded username and password with a cleartext
hash preﬁx was exposed in a breach.
Require: n, a preﬁx length
1: function CREATEREQUEST(u, p,n)
2:
3:
4:
5:
6:
7:
8:
9: end function
a ← RAND()
i ← CANONCIALIZE(u)
u(cid:48)
H ← HASH(u(cid:48), p)
Ha ← BLIND(H,a)
H[0:n] ← BYTESUBSTRING(H,n)
LOCALSTORE(a)
return HSTSREQUEST(H[0:n],Ha)
Algorithm 3 CreateResponse: Server response for all infor-
mation known about the cleartext hash preﬁx.
Require: b = rand()
1: function CREATERESPONSE(H[0:n],Ha)
2:
3:
4:
5: end function
Hab ← BLIND(Ha,b)
S(cid:48) ← PARTITIONLOOKUP(H[0:n])
return HSTSRESPONSE(Hab,S(cid:48))
3.2 Zero-password leakage variant
Our previous approach makes a practical tradeoff between
client hashing overhead and revealing some bits of a client’s
password. (While still protected by a computationally ex-
pensive hash and anonymity sets spanning both usernames
and passwords, this information can be leaked if an attacker
has auxiliary information about the username.) As an alter-
native, we outline a zero-password leakage variant. In Al-
gorithm 2, a client now calculates a hash preﬁx of only the
username H(u(cid:48))[0:n] along with a blinded hash of the entire cre-
dential. Algorithm 1 is modiﬁed to create a mapping between
H(u(cid:48)
i)[0:n] to H(u(cid:48)
i) and to use it to partition the database by
H(u(cid:48)
i)[0:n]. This variant still provides the same protection with
bounded leakage, denial of service resistance, and an inefﬁ-
cient oracle, and modiﬁes (and reduces) the anonymity set of
credentials to only usernames. For an estimated 3.9 billion
unique usernames, this amounts to |K| = 60,000.4 However,
this variant ensures that all password material from the client
is protected by blinding. In practice, given near real-time con-
straints, this requires that a client spend twice as much time
hashing which is non-negligible.5 For the purposes of our
initial deployment (detailed in Section 5), we opted for the
ﬁrst variant to understand the computational bounds of clients.
We now plan to migrate to the zero-password leakage variant.
i, p(cid:48)
4With no password guessing required, it also enables an attacker to rea-
sonably pre-compute the Argon2 hash of all possible usernames.
5This expense can be amortized if the client reuses their username for
multiple sites with distinct passwords, or if the client regularly polls the
server for the same username to obtain the most recent breach status.
USENIX Association
28th USENIX Security Symposium    1561
Algorithm 4 Verdict: Final client-side verdict for whether a
username or password was exposed in a breach.
Require: a, secret key for original request
1: function VERDICT(Hab,S(cid:48),a)
Hb ← UNBLIND(Hab,a)
2:
return Hb ∈ S(cid:48)
3:
4: end function
Canonicalization further reduces this set to 3.36 billion cre-
dentials. We also developed a Chrome extension as a proof
of concept client that we could share among early testers to
gather telemetry on the frequency and impact of breach notiﬁ-
cations in the wild. In practice, other applications that handles
credentials can integrate with our service by implementing
the client half of our protocol.
3.3 Expansion to metadata
Our protocol currently does not include information on the
origin of an exposed credential as metadata (e.g., which ser-
vice was compromised). In practice, we believe this is the best
strategy as origin information is both untrustworthy and often
unavailable. For example, large composite breaches such as
Collection 1-5 and Antipublic include hundreds of millions of
credentials, all of which are unattributed [21, 25]. Moreover,
metadata expands the size of data downloaded as part of S(cid:48).
For completeness, our protocol can be extended to include
origin information, or any metadata, by encrypting it with the
output of a cryptographically secure key-derivation function
such as HKDF [30] applied to H(u, p). This approach limits
access strictly to clients that prove knowledge of the associ-
ated, strongly hashed username and password. This is easy to
observe; as outlined in Appendix B, the hashed-and-blinded
outputs still hide information about other usernames and pass-
words and hence the derived keys are cryptographically strong
and hide the contents of encrypted metadata. This is only done
once when creating the database and adds very little overhead
to the system. We note that it is crucially important that this
metadata not include sensitive personally identifying informa-
tion as it is not hidden from a compromised service.
3.4 Limitations
Our protocol requires that clients are capable of computing an
expensive hash with 256MB of memory. This is a necessary re-
quirement to hamper attackers, but it may also prove untenable
for resource-constrained devices. Additionally, our approach
requires that clients download a non-negligible amount of data.
For context, with 1 billion credentials uniformly split into 216
preﬁxes, this equates to roughly 15,000 blinded hashes per
request. At 29-bytes per item, that amounts to roughly 435KB
on average. This grows linearly with the volume of newly
discovered credentials.
4 Implementation
We implemented our protocol as a publicly accessible API
hosted on Google Cloud. The API mediates access to over
4 billion unique usernames and passwords collected using
an approach previously documented by Thomas et al. [51].
4.1 Client
Our Chrome extension monitors when users submit their user-
name and password on a login page and generates a browser
warning for breached credentials detected by our API. We rely
on a JavaScript implementation of Argon2 from libsodium
for all hashing and a web assembly compilation of OpenSSL