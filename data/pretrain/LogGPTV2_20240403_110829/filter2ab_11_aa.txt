.\"; Copyright (C) 1994, 1995 by Daniel Quinlan (PI:EMAIL)
.\"; with networking additions from Alan Cox (PI:EMAIL)
.\"; and scsi additions from Michael Neuffer (PI:EMAIL)
.\"; and sysctl additions from Andries Brouwer (PI:EMAIL)
.\"; 中文版版权所有 mapping, Laser www.linuxforum.net 2000
.\";
.\"; This is free documentation; you can redistribute it and/or
.\"; modify it under the terms of the GNU General Public License as
.\"; published by the Free Software Foundation; either version 2 of
.\"; the License, or (at your option) any later version.
.\";
.\"; The GNU General Public License's references to ";object code";
.\"; and ";executables"; are to be interpreted as the output of any
.\"; document formatting or typesetting system, including
.\"; intermediate and printed output.
.\";
.\"; This manual is distributed in the hope that it will be useful,
.\"; but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"; GNU General Public License for more details.
.\";
.\"; You should have received a copy of the GNU General Public
.\"; License along with this manual; if not, write to the Free
.\"; Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\"; USA.
.\";
.\"; Wed May 17 15:26:04 1995: PI:EMAIL, updated BUGS section
.\"; Minor changes by aeb and Marty Leisner (PI:EMAIL).
.\"; Sat Apr 13 02:32:45 1996: PI:EMAIL, added sys, various fixes.
.\"; Mon Jul 22 17:14:44 1996: PI:EMAIL, minor fix.
.TH PROC 5 "22 July 1996" "Linux Programmer's Manual"
.SH NAME
proc \- 进程信息伪文件系统
.SH 描述
/proc 是一个伪文件系统, 被用作内核数据结构的接口, 而不仅仅
是解释说明 /dev/kmem. /proc里的大多数文件都是只读的, 但也可
以通过写一些文件来改变内核变量. 
.LP
下面对整个 /proc 目录作一个大略的介绍.
.LP
.na
.nh
.PD 1
.TP
.I [number]
在 /proc 目录里, 每个正在运行的进程都有一个以该进程
ID 命名的子目录, 其下包括如下的目录和伪文件.
.RS
.TP
.I cmdline
该文件保存了进程的完整命令行. 如果该进程已经
被交换出内存, 或者该进程已经僵死, 那么就没有
任何东西在该文件里, 这时候对该文件的读操作将返回零
个字符. 该文件以空字符 null 而不是换行符作为结
束标志. 
.TP
.I cwd
一个符号连接, 指向进程当前的工作目录. 例如, 
要找出进程 20 的 cwd, 你可以: 
.br
.nf
.ft CW
cd /proc/20/cwd; /bin/pwd
.fi
.ft
.PP
请注意 pwd 命令通常是 shell 内置的, 在这样的情况下可能
工作得不是很好. 
.TP
.I environ
该文件保存进程的环境变量, 各项之间以空字符分隔, 
结尾也可能是一个空字符. 因此, 如果要输出进程 1 的环境变量, 
你应该: 
.br
.nf
.ft CW
(cat /proc/1/environ; echo) | tr ";\\000"; ";\\n";
.fi
.ft P
.PP
(至于为什么想要这么做, 请参阅
.IR lilo (8).)
.TP
.I exe
也是一个符号连接, 指向被执行的二进制代码.
在 Linux 2.0 或者更早的版本下, 对 exe 特殊文件的
.I readlink(2)
返回一个如下格式的字符串: 
[设备号]:节点号
举个例子, [0301]:1502 就是某设备的 1502 节点, 
该设备的主设备号为 03 (如 IDE, MFM 等驱动器),
从设备号为 01 (第一个驱动器的第一分区).
而在 Linux 2.2 下, 
.I readlink(2) 
则给出命令的实际路径名.
另外, 该符号连接也可以正常析引用(试图打开 exe 
文件实际上将打开一个可执行文件). 你甚至可以键入
.I /proc/[number]/exe
来运行 [number] 进程的副本. 
带 -inum 选项的
.IR find(1)
命令可以定位该文件. 
.TP
.I fd
进程所打开的每个文件都有一个符号连接在该子目
录里, 以文件描述符命名, 这个名字实际上是指向
真正的文件的符号连接，（和 exe 记录一样）．
例如, 0 是标准输入, 1 是标准输出, 2 是标准错误, 等等.
程序有时可能想要读取一个文件却不想要标准输入，
或者想写到一个文件却不想将输出送到标准输出去，
那么就可以很有效地用如下的办法骗过(假定 -i 是输入
文件的标志, 而 -o 是输出文件的标志): 
.br
.nf
\f(CWfoobar -i /proc/self/fd/0 -o /proc/self/fd/1 ...\fP
.fi
.br
这样就是一个能运转的过滤器. 请注意该方法不能
用来在文件里搜索, 这是因为 fd 目录里的文件是
不可搜索的.
在 UNIX 类的系统下, /proc/self/fd/N 基本上就与
/dev/fd/N 相同. 实际上, 大多数的 Linux MAKEDEV
脚本都将 /dev/fd 符号连接到 [..]/proc/self/fd 上. 
.TP
.I maps
该文件包含当前的映象内存区及他们的访问许可. 
格式如下:
.nf
.ft CW
.in +3n
address           perms offset   dev   inode
00000000-0002f000 r-x-- 00000400 03:03 1401
0002f000-00032000 rwx-p 0002f400 03:03 1401
00032000-0005b000 rwx-p 00000000 00:00 0
60000000-60098000 rwx-p 00000400 03:03 215
60098000-600c7000 rwx-p 00000000 00:00 0
bfffa000-c0000000 rwx-p 00000000 00:00 0
.ft
.fi
.in
.PP
address 是进程所占据的地址空间, perms 是权限集: 
.nf
.in +5
r = read
w = write
x = execute
s = shared
p = private (copy on write)
.fi
.in
.PP
offset 是文件或者别的什么的偏移量, dev 是设备号(主设
备号:从设备号), 而 inode 则是设备的节点号. 0 表明没有
节点与内存相对应, 就象 bss 的情形.
.PP
在 Linux 2.2 下还增加了一个域给可用的路径名. 
.TP
.I mem
该文件并不是 mem (1:1) 设备, 尽管它们有相同的设备号.
/dev/mem 设备是做任何地址转换之前的物理内存,
而这里的 mem 文件是访问它的进程的内存.目前这个 mem 还不能
.I mmap(2)
（内存映射）出去，而且可能一直要等到内核中增加了一个通用的
.I mmap(2)
以后才能实现．
(也许在你读本手册页时这一切已经发生了)
.TP
.I mmap
.I mmap(2)
做的 maps 映射目录，是和 exe, fd/* 等类似的符号连接.
请注意 maps 包含了比 /proc/*/mmap 更多的信息,
所以应该废弃 mmap.
";0"; 通常指 libc.so.4.
在 linux 内核 1.1.40 里, 
.I /proc/*/mmap
被取消了.
(现在是
.B 真的
废弃不用了!)
.TP
.I root
依靠系统调用
.I chroot(2), 
unix 和 linux 可以让
每个进程有各自的文件系统根目录. 
由
.I chroot(2)
系统调用设置．
根指向文件系统的根，性质就象 exe, fd/* 等一样．
.TP
.I stat
进程状态信息, 被命令
.I ps(1)
使用. 
现将该文件里各域, 以及他们的
.I scanf(3)
格式说明符, 按顺序分述如下:
.RS
.TP
\fIpid\fP %d
进程标识．
.TP
\fIcomm\fP %s
可执行文件的文件名, 包括路径. 该文件是否可
见取决于该文件是否已被交换出内存. 
.TP
\fIstate\fP %c
";RSDZT"; 中的一个, R 是正在运行, S 是
在可中断的就绪态中睡眠, D 是在不可中
断的等待或交换态中睡眠, Z 是僵死, T 
是被跟踪或被停止(由于收到信号). 
.TP
\fIppid\fP %d
父进程 PID.
.TP
\fIpgrp\fP %d
进程的进程组 ID.
.TP
\fIsession\fP %d
进程的会话 ID.
.TP
\fItty\fP %d
进程所使用终端.
.TP
\fItpgid\fP %d
当前拥有该进程所连接终端的进程所在的进程
组 ID. 
.TP
\fIflags\fP %u  
进程标志. 目前每个标志都设了数学位, 
所以输出里就不包括该位. crt0.s 检查数学仿真
这可能是一个臭虫, 因为不是每个进
程都是用 c 编译的程序. 数学位应该是十
进制的 4, 而跟踪位应该是十进制的 10.
.TP
\fIminflt\fP %u
进程所导致的小错误（minor faults）数目, 这样的
小错误（minor faults）不需要从磁盘重新载入一个
内存页. 
.TP