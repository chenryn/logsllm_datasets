title:Efficient Cryptographic Password Hardening Services from Partially
Oblivious Commitments
author:Jonas Schneider and
Nils Fleischhacker and
Dominique Schr&quot;oder and
Michael Backes
Efﬁcient Cryptographic Password Hardening Services
from Partially Oblivious Commitments
Jonas Schneider
CISPA, Saarland University
Saarland Informatics Campus
Nils Fleischhacker
CISPA, Saarland University
Saarland Informatics Campus
Dominique Schröder
Friedrich-Alexander-University,
Erlangen-Nürnberg
Michael Backes
CISPA, Saarland University &
MPI-SWS
Saarland Informatics Campus
ABSTRACT
Password authentication still constitutes the most widespread
authentication concept on the Internet today, but the human
incapability to memorize safe passwords has left this concept
vulnerable to various attacks ever since. Aﬀected enterprises
such as Facebook now strive to mitigate such attacks by
involving external cryptographic services that harden pass-
words. Everspaugh et al. provided the ﬁrst comprehensive
formal treatment of such a service, and proposed the Pythia
PRF-Service as a cryptographically secure solution (Usenix
Security’15). Pythia relies on a novel cryptographic primi-
tive called partially oblivious pseudorandom functions and its
security is proven under a strong new interactive assumption
in the random oracle model.
In this work, we prove that this strong assumption is inher-
ently necessary for the Pythia construction, i.e., it cannot be
weakened without invalidating the security of Pythia. More
generally, it is impossible to reduce the security of Pythia
to any non-interactive assumptions. Hence any eﬃcient,
scalable password hardening service that is secure under
weaker assumptions necessarily requires a conceptually diﬀer-
ent construction. To this end, we propose a construction for
password hardening services based on a novel cryptographic
primitive called partially oblivious commitments, along with
an eﬃcient secure instantiation based on simple assumptions.
The performance and storage evaluation of our prototype
implementation shows that our protocol runs almost twice
as fast as Pythia, while achieving a slightly relaxed security
notion but relying on weaker assumptions.
1.
INTRODUCTION
Password-based authentication is still the most widespread
means of authentication on the Internet today. In such a
system, a user sends her username and password to a server,
which compares both values against its stored record. Se-
c(cid:13) 2016 Copyright held by the authors. This is the author’s version of the work. It
is posted here for your personal use. Not for redistribution. The deﬁnitive Version
of Record was published in CCS’16, October 24 - 28, 2016, Vienna, Austria, http:
//dx.doi.org/10.1145/2976749.2978375.
curely realizing such a system turns out to be diﬃcult. In
addition to numerous usability pitfalls [25, 17], attackers
can steal password databases and mount eﬃcient brute-force
attacks, even in the face of known security properties of
a password scheme [41]. Practical attacks against several
enterprises, such as Target, Adobe, or AOL (an overview is
given in [42]) have shown that storing passwords as salted
hash values is not suﬃcient to ensure conﬁdentiality in case
of a breach. From this insuﬃciency arose a multitude of pro-
posals for authentication mechanisms which avoid passwords
altogether, e.g. [13, 30, 12]. However, if a password-based
authentication system has already been established it is of-
ten more economically viable to harden it against possible
attacks than to replace it from scratch.
One way to harden the security of password-based au-
thentication which has recently seen adoption from large
companies like Facebook [32] is to involve external crypto-
graphic PRF-Services [6, 38]. The basic idea is to physically
separate the database that stores the password records from
the server which computes the corresponding hashes. This
way, stealing a database of password records is not suﬃcient
to mount oﬄine attacks and the adversary has to compro-
mise the cryptographic service as well. Failing to do this the
adversary is forced to interact with the service, pretending to
be a legitimate client. This interaction can then be detected
via ﬁne-grained monitoring of suspicious use of the API.
While cryptographic PRF-Services have received attention
in industrial systems [32], a comprehensive formal treatment
of such a service was only recently provided by Everspaugh
et al. [19], who described the Pythia PRF-Service and gave
the ﬁrst formal consideration to its security. The Pythia
PRF-Service is ﬂexible and eﬃcient enough to be deployed
within an enterprise and it oﬀers several security features
that conventional PRF-Services do not oﬀer. Among others,
Pythia supports message privacy, rate-limiting, and individ-
ual key rotation. To achieve these properties, the authors
introduced a novel cryptographic primitive called partially
oblivious pseudorandom functions (PO-PRFs). A PO-PRF
is a two-party protocol where one party, a cryptographic
service provider, holds a key k for a function fk and a client
wishes to learn y ← fk(t, m), where t is called a tweak and
m the message. The output of the function is pseudorandom
and the service provider is partially oblivious about the input
meaning that the value t is public and m remains hidden.
The main motivation for revealing t is to enable rate-limiting
of online attacks, as a speciﬁc t being requested over and
over again is visible in the requests. Going beyond password
hardening applications, [19] discusses additional applications
of PO-PRFs such as Bitcoin brainwallets.
Partially oblivious PRFs are clearly an extremely pow-
erful primitive and realizing them seems to require strong
assumptions. Indeed, the construction of Everspaugh et al. is
similar to the left-or-right constrained PRF of Boneh and
Waters [9] and the non-interactive key-agreement protocol
of Sakai, Ohgishi, and Kasahara [39], thus the scheme also
requires similar assumptions. That is, the security of their
scheme is proven under an interactive assumption and the
proof is given in the random oracle model. The authors
leave open the question if these (trusted) assumptions are
necessary or if one could ﬁnd a scheme based on simple
assumptions in the standard model.
In this work, we show that this is not the case. We give
an impossibility result that rules out any security proof to
an arbitrary non-interactive assumption (using black-box
techniques only). Driven by the idea to develop an eﬃcient
password hardening service based on simple assumptions, we
develop a diﬀerent cryptographic primitive in order to bypass
this impossibility result. This primitive is general enough
to capture all requirements for a modern password harden-
ing system, yet it is not aﬀected by the impossibility result.
This is achieved by relaxing the requirement of pseudoran-
dom protocol outputs. Pseudorandomness provides ample
security for password hashes but is not ultimately necessary
to achieve a suﬃcient level of security. We call this new
primitive Partially Oblivious Commitments and propose an
instance based on simple assumptions. The main diﬀerence
to PO-PRFs is that the record output is not required to be
pseudorandom, although it can be, and that there exists a ver-
iﬁcation algorithm to check whether a stored record matches
(t, m) (rather than an equality test). Our comprehensive
performance evaluations demonstrate the practicability of
our approach and also show that our scheme is nearly twice
as fast as the scheme suggested by Everspaugh et al. [19] in
terms of latency in common settings.
1.1 Our Contribution
Our main contribution is the ﬁrst eﬃcient and scalable
password hardening scheme that is provably secure under
simple assumptions. The construction is based on a novel
cryptographic primitive called Partially Oblivious Commit-
ment (PO-COM). A PO-COM is an interactive two-party
protocol which allows one party to commit to a message
m and a tweak t. The commitment is binding in the usual
sense and partially hiding meaning that t is public, but m
remains hidden. In addition, there exists an eﬃcient protocol
that allows to verify whether a commitment contains (t, m).
PO-COMs are similar to partially oblivious pseudorandom
functions as introduced by Everspaugh et al. [19]. However,
we show that the security of their scheme inherently relies on
strong interactive assumptions and cannot be reduced to any
simple assumptions in the standard model (using black-box
techniques only). In fact, our result is more general as it
also rules out achieving weaker security notions. This result
answers a question explicitly left open by Everspaugh et
al. [19].
Our deﬁnition of PO-COMs is general enough to capture all
(functional) properties speciﬁed by the Pythia framework for
password hardening mechanisms and yet remains impervious
to the impossibility result. We give a simple and eﬃcient
instantiation of PO-COM that can be seen as a “twin-key”
variant of the Pedersen commitment scheme [36]. The main
idea of our twin-key technique is to derive a second key
s ← Fk(t) via a pseudorandom function and to use this key
to blind its twin key x. The purpose of the twin key is to
deterministically bind the stored record to the non-hidden
tweak t.
We demonstrate the eﬃciency of our construction via com-
prehensive performance evaluations and compare it to the
original implementation of Pythia. Our performance evalua-
tions show the practicability of our scheme. In particular, our
scheme is almost twice as fast as the construction Everspaugh
et al. [19], which is somewhat surprising given that our con-
struction is provably secure under simple assumptions and
fulﬁlls all properties put forward in the work of Everspaugh
et al. [19].
1.2 Related Work
Primitives that are related to partially oblivious pseudo-
random functions, and by extension to our generalization,
include delegatable PRFs [29], fully oblivious PRFs, intro-
duced in [33, 24] and variants of those which also provide
veriﬁability [26]. These primitives are close in functionality
to the requirements of our setting, but as noted in [19] do
not allow (only partial) obliviousness.
The security properties introduced in [19] are similare to
the security properties of blind signature schemes [14, 27, 37,
21, 23, 40, 34]. This similarity to blind signatures opens the
possibility for a translation of results regarding the ability
to instantiate the primitive under various assumptions.
Our analysis in this respect draws from the results of [22]
which say that there cannot be a black-box reduction from
the unforgeability of a three-move blind signature scheme to
any non-interactive problem. Moreover, there are a number
of separation results regarding “one-more” type assumptions
and security notions, e.g. [10, 11] and there is recent progress
on automatically analyzing certain classes of assumptions [4].
Our goal of oﬄine attack resistance is similar to that of
threshold password-authenticated key-exchange (t-PAKE) [31],
where a client has to interact with a threshold k out of n
available servers to authenticate. However, our primitive
is not distributed as we only consider protocols between a
client and a single server. Additionally, although the schemes
presented in [31, 3, 16] support blinding, they do not sup-
port partial blinding and the rate-limiting enabled by it, as
required for our primitive. The overall result of the protocol
execution in our case is a binary decision on a provided piece
of information, whereas PAKE, t-PAKE, and group key ex-
change [2] aim to derive a new key each time the protocol is
executed.
Our primitive is similar to P-Signatures [5], in that there
is a way to verify whether two commitments are for the
same value. However, this capability is restricted to the
client in our setting, whereas in P-Signatures, the client
should convince the server that they hold a signature for a
committed value.
2. PASSWORD AUTHENTICATION
In this section, we discuss the main security and functional
properties that modern password authentication services
should have, following the discussion in [19]. A password-
based authentication scheme has two phases:
Registration. A user registers at a service providing user-
name and password of her choice. The service stores the
username together with an authentication token, such as a
salted hash value.
Verification. A registered user sends her username and
password to the server, which checks if this information
matches the stored record.
The aim of a password registration and veriﬁcation pro-
cedure is to ensure that legitimate users have access to the
service. At the same time, an attacker should not be able to
use/guess the credentials of an honest user. Sophisticated
online and oﬄine attacks have shown that the passwords
should not be permanently stored in plain anywhere on the
server. Instead, the server has to derive a check value, such
as a salted hash, from the password upon registration, which
can then be derived also from the oﬀered password in the
veriﬁcation phase.
In oﬄine brute-force attacks, an attacker has obtained the
information used by the server to verify a password. This
information typically consists of the hash of the original
password together with a random salt per password, which
is stored together with the hash. The attacker now tries to
verify a large number of (precomputed) password guesses to
determine the correct password.
While such attacks are hard to prevent in general, it is
possible to inhibit their eﬀectiveness, e.g., through the in-