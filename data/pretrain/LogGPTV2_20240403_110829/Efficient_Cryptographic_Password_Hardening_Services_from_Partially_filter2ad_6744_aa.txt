# Efficient Cryptographic Password Hardening Services from Partially Oblivious Commitments

**Authors:**
- Jonas Schneider, CISPA, Saarland University, Saarland Informatics Campus
- Nils Fleischhacker, CISPA, Saarland University, Saarland Informatics Campus
- Dominique Schröder, Friedrich-Alexander-University, Erlangen-Nürnberg
- Michael Backes, CISPA, Saarland University & MPI-SWS, Saarland Informatics Campus

## Abstract
Password authentication remains the most widely used method on the Internet. However, the human inability to memorize strong passwords has made this method vulnerable to various attacks. Companies like Facebook are now implementing external cryptographic services to enhance password security. Everspaugh et al. introduced the Pythia PRF-Service, a cryptographically secure solution that relies on partially oblivious pseudorandom functions (PO-PRFs) and is proven secure under a strong interactive assumption in the random oracle model.

In this paper, we demonstrate that the strong assumption required by Pythia is inherently necessary; it cannot be weakened without compromising its security. We also show that it is impossible to reduce the security of Pythia to any non-interactive assumptions. Therefore, any efficient and scalable password hardening service that relies on weaker assumptions must use a different construction. To address this, we propose a new cryptographic primitive called partially oblivious commitments (PO-COMs) and provide an efficient and secure instantiation based on simple assumptions. Our performance and storage evaluations show that our protocol runs almost twice as fast as Pythia while achieving a slightly relaxed security notion but relying on weaker assumptions.

## 1. Introduction
Password-based authentication is still the most prevalent form of authentication on the Internet. In such systems, a user sends their username and password to a server, which compares these values against stored records. However, securely implementing such a system is challenging. Attackers can steal password databases and perform efficient brute-force attacks, even when known security properties are in place. High-profile breaches at companies like Target, Adobe, and AOL have shown that storing passwords as salted hash values is insufficient for ensuring confidentiality in the event of a breach.

To address these issues, several proposals have been made for alternative authentication mechanisms that avoid passwords entirely. However, for existing systems, it is often more economically viable to enhance the security of the current password-based system rather than replace it.

One approach to enhancing the security of password-based authentication, adopted by large companies like Facebook, involves using external cryptographic PRF-Services. The idea is to physically separate the database storing password records from the server that computes the corresponding hashes. This separation means that stealing a database of password records is not sufficient for offline attacks; the adversary must also compromise the cryptographic service. If the adversary fails to do so, they must interact with the service, which can be detected through fine-grained monitoring of API usage.

While cryptographic PRF-Services have gained attention in industrial systems, a comprehensive formal treatment was only recently provided by Everspaugh et al., who introduced the Pythia PRF-Service. Pythia is flexible and efficient enough for enterprise deployment and offers several security features, including message privacy, rate-limiting, and individual key rotation. These features are achieved through a novel cryptographic primitive called partially oblivious pseudorandom functions (PO-PRFs). A PO-PRF is a two-party protocol where one party, the cryptographic service provider, holds a key \( k \) for a function \( f_k \), and a client wishes to learn \( y \leftarrow f_k(t, m) \), where \( t \) is a tweak and \( m \) is the message. The output is pseudorandom, and the service provider is partially oblivious about the input, meaning \( t \) is public, and \( m \) remains hidden. Revealing \( t \) enables rate-limiting of online attacks, as repeated requests for the same \( t \) are visible.

PO-PRFs are powerful, but their realization requires strong assumptions. The security of Pythia is proven under an interactive assumption in the random oracle model, and the authors left open the question of whether these assumptions are necessary or if a simpler scheme could be found.

In this work, we show that strong assumptions are indeed necessary for Pythia. We provide an impossibility result that rules out any security proof based on non-interactive assumptions. To develop an efficient password hardening service based on simpler assumptions, we introduce a new cryptographic primitive called partially oblivious commitments (PO-COMs). This primitive relaxes the requirement of pseudorandom outputs, which is not ultimately necessary for achieving a sufficient level of security. Our performance evaluations demonstrate that our scheme is nearly twice as fast as Pythia in common settings.

### 1.1 Our Contribution
Our main contribution is the first efficient and scalable password hardening scheme that is provably secure under simple assumptions. The construction is based on a novel cryptographic primitive called Partially Oblivious Commitment (PO-COM). A PO-COM is an interactive two-party protocol that allows one party to commit to a message \( m \) and a tweak \( t \). The commitment is binding in the usual sense and partially hiding, meaning \( t \) is public, but \( m \) remains hidden. There exists an efficient protocol to verify whether a commitment contains \( (t, m) \).

We show that the security of the Pythia scheme inherently relies on strong interactive assumptions and cannot be reduced to any simple assumptions in the standard model. Our definition of PO-COMs captures all functional properties specified by the Pythia framework and remains impervious to the impossibility result. We provide a simple and efficient instantiation of PO-COM that can be seen as a "twin-key" variant of the Pedersen commitment scheme. The main idea is to derive a second key \( s \leftarrow F_k(t) \) via a pseudorandom function and use this key to blind its twin key \( x \). The purpose of the twin key is to deterministically bind the stored record to the non-hidden tweak \( t \).

Our performance evaluations demonstrate the practicality of our scheme. In particular, our scheme is almost twice as fast as the construction by Everspaugh et al., which is surprising given that our construction is provably secure under simple assumptions and fulfills all properties put forward in their work.

### 1.2 Related Work
Primitives related to partially oblivious pseudorandom functions include delegatable PRFs, fully oblivious PRFs, and variants that provide verifiability. These primitives are similar in functionality to our setting but do not allow partial obliviousness. The security properties of Pythia are similar to those of blind signature schemes, and our analysis draws from results showing that there cannot be a black-box reduction from the unforgeability of a three-move blind signature scheme to any non-interactive problem. Additionally, there are separation results regarding "one-more" type assumptions and security notions.

Our goal of offline attack resistance is similar to that of threshold password-authenticated key-exchange (t-PAKE), where a client interacts with a threshold \( k \) out of \( n \) available servers to authenticate. However, our primitive is not distributed and only considers protocols between a client and a single server. Our primitive is also similar to P-Signatures, but the capability to verify whether two commitments are for the same value is restricted to the client in our setting.

## 2. Password Authentication
In this section, we discuss the main security and functional properties that modern password authentication services should have, following the discussion in [19]. A password-based authentication scheme typically consists of two phases:

### Registration
A user registers at a service by providing a username and password. The service stores the username along with an authentication token, such as a salted hash value.

### Verification
A registered user sends their username and password to the server, which checks if this information matches the stored record.

The aim of the registration and verification process is to ensure that legitimate users have access to the service while preventing attackers from using or guessing the credentials of honest users. Offline brute-force attacks, where an attacker obtains the information used by the server to verify a password, can be mitigated by inhibiting their effectiveness, for example, through the use of rate-limiting and other security measures.