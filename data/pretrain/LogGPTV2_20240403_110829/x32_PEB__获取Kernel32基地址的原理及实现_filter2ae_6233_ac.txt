        {
            pNext = pNext->Flink;
            pLdrMod = (MY_LDR_MODULE*)pNext;
            printf("0x%08x\t\t", pLdrMod->BaseAddress);
            wprintf(L"%s\n", pLdrMod->BaseDllName.Buffer);
        } while (pNext != pStart);
        printf("LDR->InMemoryOrderModuleList:\t\t0x%08x\n", pEBLDR->InMemoryOrderModuleList);
        printf("BaseAddress\t\t BaseDllName\n================================================\n");
        pNext = (LIST_ENTRY*)&(pEBLDR->InMemoryOrderModuleList);
        pStart = pNext;
        do
        {
            pNext = pNext->Flink;
            pLdrMod = CONTAINING_RECORD(pNext, LDR_DATA_TABLE_ENTRY, InMemoryOrderModuleList);
            printf("0x%08x\t\t", pLdrMod->BaseAddress);
            wprintf(L"%s\n", pLdrMod->BaseDllName.Buffer);
        } while (pNext != pStart);
        printf("LDR->InInitializationOrderModuleList:\t0x%08x\n", pEBLDR->InInitializationOrderModuleList);
        printf("BaseAddress\t\t BaseDllName\n================================================\n");
        pNext = (LIST_ENTRY*)&(pEBLDR->InInitializationOrderModuleList);
        pStart = pNext;
        do
        {
            pNext = pNext->Flink;
            pLdrMod = CONTAINING_RECORD(pNext, LDR_DATA_TABLE_ENTRY, InInitializationOrderModuleList);
            printf("0x%08x\t\t", pLdrMod->BaseAddress);
            wprintf(L"%s\n", pLdrMod->BaseDllName.Buffer);
        } while (pNext != pStart);
        getchar();
    }
Win10:  
win7/winxp:  
可以观察到在
    InLoadOrderModuleList
    InMemoryOrderModuleList
前3个DLL无论内容还是顺序都是完全一样的。
而`InInitializationOrderModuleLists`则在不同Window版本存在差异，故一般不选用这个内存顺序的方式。
### 0x2.3 搜索思路
在第二小节，在C高级语言层面，已经有了大体的搜索逻辑，但是在汇编过程需要对寄存器的选用和值的传递，条件判断进行一些规划，这样在编写汇编的时候，写出的代码不仅简洁还可以更容易理解。
1)`xor eax, eax`清零，`mov eax, fs:[0x30]` 获取PEB地址
2)`mov eax, [eax + 0x0c]` 获取LDR地址，0x30和0x0c上面都有讲的，偏移量。
3)
`mov esi, [eax + 0Ch]` //则指向InLoadOrderModuleList
`mov esi, [eax + 14h]` //则指向InMemoryOrderModuleList  
4)遍历Flink，找到Kernel32.dll的位置
位置在第3个，这里需要简单计算下。
指向InLoadOrderModuleList 的同时就是第一个了。
再指向一次`mov esi, [esi]`,就是第二个了。
`lodsd`或者`mov esi,[esi];mov eax, esi`,就是第三个了
5)获取Kernel地址，这里也需要小小计算一下。
`mov eax,[eax+08h]` //InLoadOrderModuleList 顺序
`mov eax, [eax+18h]` //InMemoryOrderModuleList 顺序  
6)完成赋值,`mov address, eax`; 最后输入验证结果。
### 0x2.4 汇编实现
//InLoadOrderModuleList
    #include 
    #include 
    int main()
    {
        unsigned int address;
        __asm {
            xor eax, eax
            mov eax, fs: [eax + 30h] ; 指向PEB的指针
            mov eax, [eax + 0ch]; 指向PEB_LDR_DATA的指针
            mov eax, [eax + 0ch]; 根据PEB_LDR_DATA得出InLoadOrderModuleList的Flink字段
            mov esi, [eax];
            lodsd;
            mov eax, [eax + 18h]; Kernel.dll的基地址
            mov address, eax;
        }
        printf("0x:%p\n", address);
        HANDLE kernelA = LoadLibrary(L"kernel32.dll");
        printf("0x:%p\n", kernelA);
        system("pause");
        return 0;
    }
//InMemoryOrderModuleList 顺序的实现
    #include 
    #include 
    int main()
    {
        unsigned int address;
        __asm {
            xor eax, eax;
            mov eax, fs: [eax + 30h] ; 指向PEB的指针
            mov eax, [eax + 0ch]; 指向PEB_LDR_DATA的指针
            mov eax, [eax + 14h]; 根据PEB_LDR_DATA得出InMemoryOrderModuleList的Flink字段
            mov esi, [eax];
            lodsd;
            mov eax, [eax + 10h]; Kernel.dll的基地址
            mov address, eax;
        }
        printf("0x:%p\n", address);
        HANDLE kernelA = LoadLibrary(L"kernel32.dll");
        printf("0x:%p\n", kernelA);
        system("pause");
        return 0;
    }
当然我知道有些怀疑主义严重的小伙伴会想这个加载顺序是不是固定一样的呀？
要是变了的话怎么办，这种固定的写法，是不是会出错呀？
其实这种顾虑不用担心，因为绝大多数都是固定的，不过针对这个问题，我可以优化下汇编代码，使其更加通用。
代码优化实现选择先顺序遍历，再判断长度，因为判断名字有差不多24字节，入栈的话需要倒序，然后小端序来排列，12个push，有点累呀，就没做完整的基于模块名字的准确判断，这里只给个判断长度的Demo代码。当然本质上这种优化Duck
可不必，作为一个脚本小子应该没有机会遇到那么阴间的情况。
    #include 
    #include 
    int main()
    {
        unsigned int address;
        __asm {
            xor eax, eax
            mov eax, fs: [eax + 30h] ; 指向PEB的指针
            mov eax, [eax + 0ch]; 指向PEB_LDR_DATA的指针
            mov eax, [eax + 0ch]; 根据PEB_LDR_DATA得出InLoadOrderModuleList的Flink字段
            push 0x001a0018; //BaseDllName-> Length MaximumLength
            mov edi, [esp];
            Next: // Foreach InLoadOrderModuleList item
            mov eax, [eax]; //  Flink -> Flink
            cmp edi, [eax + 0x2c];
            jne Next
            mov eax, [eax + 18h]; Kernel.dll的基地址
            mov address, eax;
            add esp, 0x4;  // make stack balanced
        }
        printf("0x:%p\n", address);
        HANDLE kernelA = LoadLibrary(L"kernel32.dll");
        printf("0x:%p\n", kernelA);
        system("pause");
        return 0;
    }
## 0x3 总结
本文内容较为基础简单，是老生常谈的Window x86
ShellCode的组成部分，当然其也是关键的一部分。本文从两个方面对此技术展开了详细的介绍，首先从暴力搜索方面，其作为最早的搜索手段，有一定的时期合理性，但是在现在看来不是一个很好的选择，接着本文继续对基于PEB定位基址的技术，进行了逐步分解介绍，最终以Demo代码实现完结，并给读者留下了进一步尝试的空间。
>
> 穿插一句，如果你与笔者一样是个萌新/脚本小子，一样想低门槛地编写无视常规杀软，进阶至在驱动层面透明的ShellCodeLoader,那么可以关注后续笔者相关的产出和找我一起交流。
## 0x4 参考链接
[通用ShellCode的编写](https://wizardforcel.gitbooks.io/q-buffer-overflow-tutorial/content/116.html)
[旧书重温：0day2【2】
实验：三种获取kernel32.dll基址的方法](https://www.cnblogs.com/witty/p/3457105.html)
[《基于监督学习的病毒检测技术研究》](https://books.google.ru/books?id=-cLsDwAAQBAJ&pg=PT57&lpg=PT57&dq=Kernel32.dll%E4%B8%AD%E7%9A%84CreateProcess%E5%87%BD%E6%95%B0+%E8%8E%B7%E5%8F%96%E5%9F%BA%E5%9D%80&source=bl&ots=O-jEzLeuDN&sig=ACfU3U05xAiMQdJgHDnnYlKP6WARnVTinA&hl=zh-CN&sa=X&ved=2ahUKEwiT5vDOr-jzAhWQv4sKHc6OB_UQ6AF6BAgdEAM#v=onepage&q=Kernel32.dll%E4%B8%AD%E7%9A%84CreateProcess%E5%87%BD%E6%95%B0%20%E8%8E%B7%E5%8F%96%E5%9F%BA%E5%9D%80&f=false)
[[求助]Win32汇编问题](https://bbs.pediy.com/thread-97264.htm)
[关于Windows下ShellCode编写的一点思考](http://www.reddragonfly.org/index.php?action=list&id=30)
[获取DLL的函数地址](https://blog.qwerdf.com/2019/01/08/GetFunctionAddr/)
[基于shellcode检测的缓冲区溢出攻击防御技术研究 -计算机应用](http://www.joca.cn/CN/abstract/abstract10077.shtml)
[详解CreateProcess调用内核创建进程的过程](https://www.cnblogs.com/Gotogoo/p/5262536.html)
[结构化异常SEH处理机制详细介绍(一）](https://www.cnblogs.com/yilang/p/11233935.html)
......