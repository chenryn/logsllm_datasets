Directory Command and
Component Manipulation Graphical User
Local Port Monitor Discovery Data from Exfiltration Over Control Protocol
Firmware Exploitation of Interface
Network Shared Alternative
Credentials in Vulnerability
New Service DLL Side-Loading Local Network InstallUtil Drive Protocol Custom
Files
Configuration Cryptographic
Disabling
Path Interception Input Capture Discovery Logon Scripts PowerShell Data from Protocol
Security Tools
Removable Exfiltration Over
Process
Scheduled Task File Deletion Network Sniffing Local Network Pass the Hash Media Command and Data Obfuscation
Hollowing
Connections Control Channel
Regsvcs / Fallback
Service File Permissions Weakness Discovery Pass the Ticket Email Collection
Regasm Channels
File System
Two-Factor
Service Registry Permissions Logical Offsets Network Service Remote Desktop Multi-Stage
Authentication Regsvr32 Input Capture Exfiltration Over
Weakness Scanning Protocol Channels
Interception Other Network
Indicator Medium
Web Shell Remote File Copy Rundll32 Screen Capture
Blocking Peripheral Multiband
Device Discovery Communication
Basic Exploitation of Vulnerability Remote Services Scheduled Task
Exfiltration Over
Input/Output
Replication Physical Medium Multilayer
System Bypass User Account Control Permission Scripting
Through Encryption
Groups
Removable Service Scheduled
Bootkit DLL Injection Discovery Peer Connections
Media Execution Transfer
Process
Indicator Shared Webroot Windows Remote File Copy
Change Default Discovery
Removal from Management
File Association Taint Shared
Tools Query Registry Instrumentation
Content Standard
Application Layer
Component Remote System Windows Admin
Indicator Protocol
Firmware Discovery Shares
Removal on Host
Hypervisor Security Standard
Software Cryptographic
Logon Scripts InstallUtil Discovery Protocol
Modify Existing
Masquerading System Standard Non-
Service
Information Application Layer
Redundant Discovery Protocol
Modify Registry
Access
Registry Run NTFS Extended System Uncommonly
Keys / Start Attributes Owner/User Used Port
Folder Discovery Web Service
Obfuscated Files
Security Support or Information System Service
Provider Discovery
Shortcut Process
Modification Hollowing
Redundant
Windows
Access
Management
Regsvcs /
Instrumentation
Regasm
Event
Subscription Regsvr32
Winlogon Helper
Rootkit
DLL
Rundll32
Scripting
Software Packing
Timestomp
Figure 5. Color Coded ATT&CK Matrix Covering Notional Perimeter-based Defenses
19
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
4.3 Step 3: Develop Analytics
Once organizations possess the requisite sensors and data, they can then develop analytics.
Developing analytics requires a hardware and software platform on which to design and run
analytics, as well as data scientists to design analytics. While this is often done through an
organization’s SIEM (Security Information and Event Management) platform, this may not be
the only way. The MITRE implementation instantiated analytics using Splunk’s query language.
MITRE researchers categorized the ATT&CK-related analytics into four major types:
• Behavioral – An analytic designed to detect a specific adversary behavior, such as creating a
new Windows service. The behavior by itself may or may not be malicious. These behaviors
should map back to techniques identified within the ATT&CK model.
• Situational Awareness – Analytics geared towards a general understanding of what is
occurring within a network environment at a given time. Not all analytics need to be geared
towards generating alerts on malicious behavior. Rather, an analytic can prove valuable to an
organization by providing general information on the state of the environment. Information
such as login times do not indicate malicious activity, but when coupled with other
indicators, even this type of data can provide much needed information about adversary
behaviors. Situational awareness analytics can also be helpful for monitoring the health of a
network environment (e.g., determining on which hosts sensors are not operating correctly).
• Anomaly/Outlier – Analytics that may detect behavior that is not malicious, but which is
unusual and may be suspect. Some examples would be detecting executables that have never
been run before or identifying processes running on the network that do not typically do so.
Like Situational Awareness analytics, these types of analytics do not necessarily indicate an
attack.
• Forensic – Analytics that are most useful when conducting an investigation regarding an
event. Oftentimes, forensic analytics will need some kind of input to be most useful. For
example, if an analyst finds that a credential dumper was used on a host, an analytic can be
run that will reveal all the users whose credentials were compromised.
A team of defenders may use a combination of these four types of analytics during a cyber game
exercise or when developing analytics for real-life application. Examples of how to combine
these types of analytics can be demonstrated in the context of the previously described example
in Section 1.1 as follows:
1. Security Operation Center (SOC) analysts are first alerted that there may be an attack in
progress through an alert generated by an analytic looking for remote creation of a
scheduled task (Behavioral).
2. After seeing this alert from the compromised machine, the analyst runs an analytic
looking for any anomalous services that have been scheduled on that host. This analytic
reveals that not long before the remote task was scheduled, a new service was in fact
created on the originating host (Anomaly/Outlier).
3. After identifying the new suspicious service, the analyst then investigates further. He runs
an analytic that identifies all child processes of the suspicious service. Investigating in
this way may reveal indicators of what activity was being performed on the host. This
20
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
investigation exposes the behavior of the RAT. Running the same analytic again, looking
for children of the RAT child process reveals the execution of PowerShell by the RAT
(Forensic).
4. Having suspected the remote access of other hosts from the compromised machine, the
analyst decides to investigate any other remote connections that may have been attempted
from that machine. To this end, the analyst runs an analytic detailing all of the remote
logins that have occurred in the environment from the machine in question and discovers
other hosts to which connections were made (Situational Awareness).
Section 5.2 provides a detailed example of how MITRE iteratively developed analytics during its
cyber games.
4.4 Step 4: Develop an Adversary Emulation Scenario
There are many definitions of what activities and types of tests are covered under the umbrella of
offensive cyber security testing. Traditional penetration tests focus on highlighting
vulnerabilities across different types of systems that an adversary may leverage at some point so
that they are remediated. Red Team engagements may focus on a long-term, impactful goal
within a target network, such as taking control over a mission critical system. Over the course of
a test operation, the Red Team will likely discover vulnerabilities that should be fixed, but the
team’s scope is generally limited to the path they took to reach an objective and may not cover
the breadth of discoveries found while conducting their penetration testing. [20]
MITRE’s approach to adversary emulation differs from these traditional approaches. Its goal is
for Red Team members to execute behaviors and techniques based from a particular or many
known adversaries to test specific aspects of a system or network’s defense. The adversary
emulation exercises consist of small-scale, repeated engagements that are designed to improve
and test defenses on a live network through systematically introducing a variety of new
malicious behaviors into the environment. The threat-emulating Red Team works closely with
the Blue Team (often referred to as purple teaming [21]) to ensure open lines of communication
that are important to quickly honing an organization’s defenses so they are tested before an
actual adversary begins operating in a targeted network environment. As such, adversary
emulation tests are often conducted in a more rapid and focused manner than fully-scoped
penetration tests or mission objective focused Red Teams.
As novel detection methods are developed, matured, and deployed across the cyber community,
security research will focus on circumventing them, and adversaries will continue to adapt. [22]
[23] Adversary emulation scenarios should be developed around this idea and should always
keep in mind that most real adversaries have specific objectives, such as gaining access to
sensitive information. During testing operations, the Red Team may be given specific objectives
as well, but their simulated adversary operations should focus on how they go about trying to
achieve their objectives and not whether or not they achieve them, so that the Blue Team will be
able to conduct a successful and thorough test of network defenses and capabilities against the
most likely adversary techniques.
21
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
4.4.1 Scenario Development
When developing an adversary emulation scenario for the purposes of testing network defenses,
cyber games may require a high-level plan to facilitate the communication of operational goals
without giving away the details of the operational test scenario to either the Red or Blue Team.
The White Team should craft this plan, using their knowledge of Blue Team sensor and analytic
detection gaps against threat behavior, and changes that the Blue Team has made or new
analytics that need to be evaluated. The White Team should also determine whether the Red
Team has the capabilities to adequately test adversary behavior. If not, the White Team should
work with the Red Team to address any gaps, including any tool development, acquisition, and
testing that may be required. The high-level plan can be used as the basis for the full adversary
emulation scenario, to communicate requirements, and to coordinate with asset owners and other
stakeholders.
Details of the high-level scenario plan may include:
1. Sensor/analytic and defensive capabilities to be tested
2. Common adversary behavior to be used
3. Rough plan with sequences of actions suggested to verify defensive capabilities
4. System, network, or other resources needed for the cyber game/test.
The adversary emulation scenario can be, but is not necessarily, a detailed command-by-
command script. It should be detailed enough to give direction to the Red Team to verify defense
capabilities but also should be flexible enough as to free the Red Team to adapt their operations
as necessary during the exercise to test behavior variations that may not have been considered by
the Blue Team. Since Blue Team defenses may also reach a maturity that covers known threat
behaviors, the Red Team must also be free to expand beyond pure emulation. By using the White
Team to decide which new behaviors should be tested, the Blue Team can remain unaware of
what specific activity to expect, and the Red Team can remain untethered by assumptions about
Blue Team capabilities that may impact Red Team decisions. The White Team also continues to
be free to inform the Red Team of details about the environment to fully test detection methods
against sequences of adversary behavior.
4.4.1.1 Example Scenario 1
In Scenario 1, an adversary uses functionality of the Windows operating system and available
system utilities to perform certain actions. [11] An adversary’s custom tools provide an access
point and a C2 channel, but the adversary chooses to interact with systems through an interactive
command shell. The Blue Team has deployed Microsoft Sysinternal’s Sysmon for persistent
process monitoring and command-line argument collection. The goal of this scenario is to test
and develop post-compromise detection analytics based on the telemetry data Sysmon collects
from endpoints within the live network.
High-level scenario:
1. The Red Team may be given a specific end goal. For example, to gain access to a
particular system, domain account, or to gather specific information to exfiltrate.
22
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
2. Assume breach and give the Red Team access to an internal system to test post-
compromise behavior. The Red Team is given execution of a loader or RAT on one
system in the environment to simulate the success of pre-compromise actions and gaining
an initial foothold regardless of prior knowledge, access, exploit, or social engineering
variables.
3. The Red Team must use discovery techniques from the ATT&CK model to learn about
the environment and to gather data to continue. This is done using available Windows
utilities.
4. The Red Team dumps credentials on the initial system and attempts to locate nearby
systems against which the credentials can be leveraged.
5. The Red Team moves laterally until the target system/account/information is obtained
The high-level scenario is used to construct a more defined plan for the Red Team using
ATT&CK as an adversary emulation guidebook. The selection of techniques is focused on those
that are required to meet the test objective based on how they are commonly applied in known
intrusion activity, but allow for some variation in technique use by the red team to introduce
additional behavior.
Figure 6 shows the ATT&CK matrix representation of Scenario 1. Green highlighted cells depict
techniques required to achieve the test objective. The operation may be conducted in a shallow
manner with just the main techniques or as a more comprehensive test with the Red Team
performing additional actions that are left open-ended. The yellow highlighted cells represent
general suggested techniques for a more comprehensive adversary emulation scenario. See
Appendix B for the full scenario sequence breakdown and ATT&CK tactic and technique
mapping with specific tools and commands.
23
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.
Privilege Credential Lateral Command and
Persistence Defense Evasion Discovery Execution Collection Exfiltration
Escalation Access Movement Control
Account Automated Automated Commonly Used
DLL Search Order Hijacking Brute Force Windows Remote Management
Discovery Collection Exfiltration Port
Data Communication
Legitimate Credentials Application Third-party Software Clipboard Data
Credential Compressed Through
Window
Dumping Removable
Accessibility Features Binary Padding Discovery Application Command-Line Data Staged Data Encrypted
Media
Deployment
Execution Data from Local Data Transfer
AppInit DLLs Code Signing File and Software Custom
Credential through API System Size Limits
Directory Command and
Component Manipulation Graphical User
Local Port Monitor Discovery Data from Exfiltration Over Control Protocol
Firmware Exploitation of Interface
Network Shared Alternative
Credentials in Vulnerability
New Service DLL Side-Loading Local Network InstallUtil Drive Protocol Custom
Files
Configuration Cryptographic
Disabling
Path Interception Input Capture Discovery Logon Scripts PowerShell Data from Protocol
Security Tools
Removable Exfiltration Over
Process
Scheduled Task File Deletion Network Sniffing Local Network Pass the Hash Media Command and Data Obfuscation
Hollowing
Connections Control Channel
Regsvcs / Fallback
Service File Permissions Weakness Discovery Pass the Ticket Email Collection
Regasm Channels
File System
Two-Factor
Service Registry Permissions Logical Offsets Network Service Remote Desktop Multi-Stage
Authentication Regsvr32 Input Capture Exfiltration Over
Weakness Scanning Protocol Channels
Interception Other Network
Indicator Medium