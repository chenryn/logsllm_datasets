# Directory and Component Manipulation
- **Graphical User Interface (GUI) Local Port Monitor Discovery**
- **Data Exfiltration Over Control Protocol**
- **Firmware Exploitation of Interface**
- **Network Shared Alternative Credentials in Vulnerability**

# New Service DLL Side-Loading
- **Local Network InstallUtil Drive Protocol Custom Files**
- **Configuration Cryptographic Disabling Path Interception**
- **Input Capture Discovery Logon Scripts PowerShell Data from Protocol**
- **Security Tools Removable Exfiltration Over Process Scheduled Task File Deletion**
- **Network Sniffing Local Network Pass the Hash Media Command and Data Obfuscation**
- **Hollowing Connections Control Channel Regsvcs / Fallback Service File Permissions Weakness Discovery**
- **Pass the Ticket Email Collection Regasm Channels File System Two-Factor Authentication**
- **Regsvr32 Input Capture Exfiltration Over Weakness Scanning Protocol Channels Interception Other Network Indicator Medium**

# Web Shell and Remote File Copy
- **Rundll32 Screen Capture Blocking Peripheral Multiband Device Discovery Communication**
- **Basic Exploitation of Vulnerability Remote Services Scheduled Task Exfiltration Over Input/Output Replication Physical Medium Multilayer System Bypass User Account Control Permission Scripting Through Encryption Groups**
- **Removable Service Scheduled Bootkit DLL Injection Discovery Peer Connections Media Execution Transfer Process Indicator Shared Webroot Windows Remote File Copy Change Default Discovery Removal from Management File Association Taint Shared Tools Query Registry Instrumentation Content Standard Application Layer Component Remote System Windows Admin Indicator Protocol Firmware Discovery Shares Removal on Host Hypervisor Security Standard Software Cryptographic Logon Scripts InstallUtil Discovery Protocol Modify Existing Masquerading System Standard Non-Service Information Application Layer Redundant Discovery Protocol Modify Registry Access Registry Run NTFS Extended System Uncommonly Used Port Folder Discovery Web Service Obfuscated Files Security Support or Information System Service Provider Discovery Shortcut Process Modification Hollowing Redundant Windows Access Management Regsvcs / Instrumentation Regasm Event Subscription Regsvr32 Winlogon Helper Rootkit DLL Rundll32 Scripting Software Packing Timestomp**

## Figure 5. Color Coded ATT&CK Matrix Covering Notional Perimeter-based Defenses
19
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.

### 4.3 Step 3: Develop Analytics
Once organizations have the necessary sensors and data, they can develop analytics. This process requires a hardware and software platform to design and run analytics, as well as data scientists to create them. While this is often done through an organization’s SIEM (Security Information and Event Management) platform, it is not the only method. The MITRE implementation used Splunk’s query language to instantiate analytics.

MITRE researchers categorized ATT&CK-related analytics into four major types:
1. **Behavioral**: An analytic designed to detect specific adversary behaviors, such as creating a new Windows service. These behaviors may or may not be malicious but should map back to techniques in the ATT&CK model.
2. **Situational Awareness**: Analytics that provide a general understanding of what is happening in the network environment. They do not necessarily generate alerts on malicious behavior but can provide valuable information, such as login times, which can be combined with other indicators to identify adversary behaviors. They are also useful for monitoring the health of the network environment.
3. **Anomaly/Outlier**: Analytics that detect unusual behavior, which may not be malicious but is suspect. Examples include detecting executables that have never been run before or identifying processes running on the network that do not typically do so.
4. **Forensic**: Analytics that are most useful during investigations. For example, if a credential dumper was used on a host, an analytic can reveal all users whose credentials were compromised.

A team of defenders may use a combination of these analytics during a cyber game exercise or when developing real-life applications. For example:
1. **SOC Analysts** are alerted to a potential attack by an analytic looking for remote creation of a scheduled task (Behavioral).
2. **After seeing the alert**, the analyst runs an analytic to find any anomalous services scheduled on the host, revealing a new service created just before the remote task (Anomaly/Outlier).
3. **Investigating further**, the analyst runs an analytic to identify child processes of the suspicious service, exposing the behavior of the RAT and the execution of PowerShell (Forensic).
4. **Suspecting remote access to other hosts**, the analyst runs an analytic detailing all remote logins from the compromised machine, discovering other connected hosts (Situational Awareness).

Section 5.2 provides a detailed example of how MITRE iteratively developed analytics during its cyber games.

### 4.4 Step 4: Develop an Adversary Emulation Scenario
There are various definitions of offensive cybersecurity testing. Traditional penetration tests highlight vulnerabilities across different systems, while Red Team engagements focus on long-term, impactful goals within a target network. MITRE’s approach to adversary emulation differs by focusing on executing behaviors and techniques from known adversaries to test specific aspects of a system or network’s defense. These exercises are small-scale, repeated, and designed to improve and test defenses on a live network through systematically introducing new malicious behaviors.

As detection methods evolve, security research will focus on circumventing them, and adversaries will adapt. Adversary emulation scenarios should be developed with this in mind, focusing on specific objectives like gaining access to sensitive information. During testing, the Red Team may be given specific objectives, but their operations should focus on the methods used to achieve these objectives, allowing the Blue Team to thoroughly test network defenses.

#### 4.4.1 Scenario Development
When developing an adversary emulation scenario, a high-level plan is needed to facilitate communication of operational goals without revealing details to the Red or Blue Teams. The White Team should craft this plan, using their knowledge of Blue Team sensor and analytic detection gaps, and work with the Red Team to address any capability gaps.

The high-level plan may include:
1. **Sensor/analytic and defensive capabilities to be tested**
2. **Common adversary behavior to be used**
3. **Rough plan with sequences of actions to verify defensive capabilities**
4. **System, network, or other resources needed for the cyber game/test**

The scenario can be a detailed command-by-command script but should be flexible enough for the Red Team to adapt and test variations not considered by the Blue Team. The White Team can inform the Red Team about the environment to fully test detection methods.

#### 4.4.1.1 Example Scenario 1
In Scenario 1, an adversary uses Windows operating system functionality and available utilities to perform certain actions. The Blue Team has deployed Microsoft Sysmon for persistent process monitoring and command-line argument collection. The goal is to test and develop post-compromise detection analytics based on the telemetry data Sysmon collects.

High-level scenario:
1. **The Red Team is given a specific end goal**, such as gaining access to a particular system, domain account, or gathering specific information to exfiltrate.
2. **Assume breach and give the Red Team access to an internal system** to test post-compromise behavior. The Red Team is given execution of a loader or RAT on one system to simulate the success of pre-compromise actions.
3. **The Red Team uses discovery techniques from the ATT&CK model** to learn about the environment and gather data using available Windows utilities.
4. **The Red Team dumps credentials on the initial system** and attempts to locate nearby systems to leverage the credentials.
5. **The Red Team moves laterally until the target system/account/information is obtained**.

The high-level scenario is used to construct a more defined plan for the Red Team, using ATT&CK as a guidebook. The selection of techniques focuses on those required to meet the test objective, but allows for variation in technique use by the Red Team to introduce additional behavior.

Figure 6 shows the ATT&CK matrix representation of Scenario 1. Green highlighted cells depict techniques required to achieve the test objective, while yellow highlighted cells represent suggested techniques for a more comprehensive adversary emulation scenario. See Appendix B for the full scenario sequence breakdown and ATT&CK tactic and technique mapping with specific tools and commands.

23
©2017 The MITRE Corporation. All rights reserved.
Approved for Public Release; Distribution Unlimited. Case Number 16-3713.