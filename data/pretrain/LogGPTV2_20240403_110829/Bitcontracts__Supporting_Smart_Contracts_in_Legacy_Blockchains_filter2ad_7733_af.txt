0.060
0.065
100KB
92KB
6.1
DASH
0.008
0.009
100KB
92KB
12.2
DOGE
0.000
0.000
100KB
92KB
15.3
ZEC
0.068
0.073
2MB
1.86MB
12.2
6) Ethereum
-
1.44 - 5.75
-
16 - 63KB
1.0 - 4.2
system from running more complex contracts similar to those
supported by ACE [50], Arbitrum [25] or Yoda [17]. We do
not provide a detailed evaluation of the speed of smart contract
execution, since contract calls are simply Python program
executions and thus measuring their execution speed would not
provide any new insights and the cost for contract execution
is mainly dominated by the on-chain storage cost described
below.
To illustrate this, we compared the execution cost of quick-
sort in an Ethereum contract with the cost of executing a com-
parable Python implementation on an AWS t2.micro instance.
To sort 2048 integer elements, the Ethereum implementation
requires 6.5 million gas (close to the block gas limit), which
costs roughly USD 59 (based on the fee prices of 2020-06-
08), while on the t2.micro instance, the Python implementation
takes less than 6 milliseconds to execute, which corresponds
to an effective total execution cost of less than USD 3 · 10−7,
if we assume that this is executed on every service provider
in an executing set of maximum size 154.
Communication. The communication cost is low, since every
call only requires a query to each involved service provider
(max |E| = 15) and its response. The latency until a client
receives the response from the service provider consists of
one Internet round-trip-time plus the time required for the data
transfer, which depends on the size of the state changes. For
most contracts this would be in the order of milliseconds or a
few seconds at most for contracts with many state changes. We
do not evaluate this experimentally, as Internet communication
latency has already been studied extensively elsewhere. The
latency for transaction conﬁrmations in blocks is the same as
the latency for other transactions in the underlying blockchain
(e.g. on average 10 minutes in Bitcoin). Note that, as is the case
with other transactions, Bitcontracts contract calls can also
be executed based on unconﬁrmed transactions, i.e. multiple
Bitcontracts transactions for the same contract can be included
in the same block.
Storage cost. The ﬁrst interesting evaluation metric of Bit-
contracts is its storage cost. In Table II we ﬁrst show for
reference the current transaction fees (next block inclusion as
of 2020-06-08) in popular blockchain platforms. After that, we
show the storage cost of Bitcontracts per KB of state changes
4Of course, this does not imply that fees will be this low in practice, since
service providers will need to be proﬁtable and therefore fees in practice will
be determined by a market and are hard to predict, but it shows that execution
in Bitcontracts is generally cheap.
for the same blockchain platforms. As can be seen from the
table, the storage cost overhead caused by Bitcontracts is very
small.
We also compare the storage cost of Bitcontracts to
Ethereum. As can be seen from Table II, an Ethereum contract
storing 1KB of data would cost between $1.44 (if no values
are changed from zero to non-zero) and $5.75 (if all changed
values are from zero to non-zero), which does not include any
computation. Compared to this, the on-chain storage fees of
Bitcontracts are signiﬁcantly smaller ($0.80 or less).
Maximum storage. The second relevant evaluation metric is
the maximum amount of data (i.e., state changes) that can
be stored per transaction. Table II shows that
in Bitcoin,
Bitcoin Cash, Litecoin, Dash, and Dogecoin one can store 195
bytes per 210 byte output, and thus the maximum storage
per transaction is limited to at most 92KB, due to their
standardness rules that will not propagate transactions larger
than 100KB. In Zcash, the maximum transaction size is only
limited by the maximum block size (2MB), which allows
storing data of up to 1.86MB per transaction. We note that
these limits do not restrict the overall size of the state of a
contract, but only the number of state changes per contract
call. In addition, these limits are affected by other parts of
the transaction. For example, if a transaction has a lot of
client inputs or outputs, the limit for data storage is reduced
accordingly.
In contrast, as can be seen from from Table II, a current
Ethereum contract can only change between 16 and 63KB
of storage (depending on whether values are set from zero
to non-zero) in one transaction given the current block gas
limit. Such a transaction would completely ﬁll a block. Using
Bitcontracts on Ethereum would allow increasing this limit.
Since Bitcontracts does not require the state transitions to
be stored in storage and only requires them to be visible in
a transaction, they could simply be sent as transaction data,
which requires less gas and thus would theoretically allow to
store up to 625KB of data per transaction. In practice this
would be slightly less, depending on the quorum size and the
resulting signature veriﬁcation cost.
Throughput. Another meaningful evaluation metric for Bit-
contracts is throughput. We evaluate throughput by measuring
the amount of state-update data the system can process per sec-
ond. This throughput value depends on the block interval and
the maximum storage per block of the underlying blockchain
platform. As shown in Table II, executing smart contract
14
using Bitcontracts on top of legacy platforms that do not
support contracts natively compares favorably to Ethereum’s
throughput in terms of the possible amount of changed data.
Costs in different fee models. Some cryptocurrencies, such
as EOS, follow a different fee model. Instead of paying
for computation and state changes directly, participants in
EOS stake funds, i.e., they lock them for some amount of
time, and in return they are allowed to use a fraction of the
computational and bandwidth resources in proportion to their
staked funds. Thus, the main cost for transactions comes from
the opportunity cost of not using the staked funds. Storage
(called “RAM” in EOS) is bought (and can be traded), but is
different from Ethereum and Bitcontracts as participants do
not pay for state changes, but instead pay for owning RAM.
The cost for 1KB of storage in EOS is $0.15 (as of 2020-06-
08) which is more expensive than newly allocating storage in
Bitcontracts (except on top of Bitcoin), but changing already
allocated storage is free of charge.
B. Popular Ethereum Contracts on Bitcontracts
In our second part of the evaluation, we analyze storage
requirements and transaction costs for popular real-world smart
contracts, if they were executed in Bitcontracts. We obtained
our evaluation data set by crawling the Ethereum blockchain
for several weeks (in October/November 2020) and collected
smart contract execution data from 130k blocks, from which
we extracted transaction information for all transactions of
the most popular 100 contracts (based on transaction count).
This resulted in a data set containing 10 million contract call
transactions. For each transaction, we collected the number and
the size of the state changes, the number of involved contracts,
the number of clients receiving funds and the Ethereum gas
cost.
We then use this information to calculate the transaction
size resulting from a potential similar contract execution in
Bitcontracts and, based on this size, the resulting costs on
different chains, such as Bitcoin. The size of a contract
transaction in Bitcontracts depends on the number of involved
contracts, the sizes of their executing sets, the number of
clients receiving funds from the contract and the number and
size of the state outputs (cf. Section VIII-B), which is derived
from the number of state changes and the size of the storage
that is changed. This allows a straight forward calculation for
the size and cost of the resulting transaction.
Transaction Size. Figure 4 shows a comparison of the re-
sulting transaction sizes when executing the contract calls
in Bitcontracts with executing sets of size 5 and a quorum
size of 3. The transaction size distribution for transactions in
Bitcontracts is shown on the left next to the size distribution
for the same transactions in Ethereum.
The median transaction size in Bitcontracts is 693 bytes,
which is only roughly 3 times as large as a basic Bitcoin
transaction with one input and two outputs (226 bytes). Trans-
actions are generally larger in Bitcontracts than in Ethereum
(which has a median transaction size of 174 bytes), which was
expected, since the quorum based off-chain execution requires
additional signatures in the transactions and adds some addi-
tional overhead for each involved contract, namely the contract
Fig. 4. Full transaction size (left) and transaction data size (right) comparison
between Bitcontracts and Ethereum. In Ethereum, the transaction data size
includes all transaction inputs, such as function arguments. In Bitcontracts,
the transaction data size is the size of all state outputs of the transaction. In
the box plots, the whiskers show the 2nd and 98th percentile respectively. The
orange line (coinciding with the bottom of the boxes in all but the third box)
shows the median value and the bottom and top of the boxes show the 25th
and 75th percentile, respectively.
inputs and outputs. The right side of Figure 4 compares the
transaction data size between Bitcontracts and Ethereum. In
Bitcontracts, the transaction data size includes state change
outputs. In Ethereum, the transaction data size consists of the
transaction inputs, such as function arguments. Our analysis
shows that the base cost (that is largely independent of the
executed contract) accounts for most of the transaction size and
that storing state changes on chain is not the main contributor
to the size difference. In fact, transaction data is smaller in
most transactions in Bitcontracts compared to Ethereum, with
median data sizes of 39 bytes and 68 bytes, respectively, since
inputs such as function arguments do not need to be stored in
Bitcontracts. This indicates that many contracts change only
a small amount of storage data compared to the size of their
input parameters.
Throughput. Considering only contract executions (i.e. ex-
cluding pure money transfers), based on the collected trans-
action data, Bitcontracts could support a throughput of 1.8
transactions per second (tps) if run on top of Bitcoin, 7.0 tps
on Litecoin, and 9.6 tps on top of Bitcoin Cash (the ﬁrst two
with, the latter without SegWit). Ethereum, for the same set
of transaction, supports a throughput of 10.2 tps, which shows
that Bitcontracts can achieve a throughput for contract calls
on top of legacy cryptocurrencies (Litecoin and Bitcoin Cash)
in the same order of magnitude as the throughput achieved by
a platform purposefully built to support smart contracts. The
throughput of Bitcontracts on top of Bitcoin is lower, but this
is expected, since Bitcoin’s throughput is more limited even
for normal transactions with an average of 3.7 tps.
Transaction cost. Figure 5 shows the transaction costs (in
USD) for transactions in our collected set of contract calls for
the 100 most popular contracts. The plot compares the costs of
these transactions in Bitcontracts on top of Bitcoin, Litecoin,
and Bitcoin Cash with the costs of the same transactions in
15
BitcontractsTx SizeETHTx Size101102103104size [bytes]BitcontractsTx Data SizeETHTx Data Size[6] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek,
“Secure multiparty computations on bitcoin,” in IEEE Symposium on
Security and Privacy (SP), 2014.
[7] A. Back, “Hashcash-a denial of service counter-measure,” 2002, http:
//www.hashcash.org/hashcash.pdf.
[8] W. Banasik, S. Dziembowski, and D. Malinowski, “Efﬁcient zero-
knowledge contingent payments in cryptocurrencies without scripts,” in
European Symposium on Research in Computer Security (ESORICS),
2016.
I. Bentov and R. Kumaresan, “How to use bitcoin to design fair
protocols,” in Annual Cryptology Conference (CRYPTO), 2014.
[9]
[10] D. Boneh, B. Lynn, and H. Shacham, “Short signatures from the weil
pairing,” in International Conference on the Theory and Application of
Cryptology, 2001.
[11] F. Brasser, U. Muller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-
R. Sadeghi, “Software grand exposure: Sgx cache attacks are practical,”
in USENIX Workshop on Offensive Technologies (WOOT’17), 2017.
[12] M. Campanelli, R. Gennaro, S. Goldfeder, and L. Nizzardo, “Zero-
knowledge contingent payments revisited: Attacks and payments for
services,” in ACM Conference on Computer and Communications
Security (CCS), 2017.
[13] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “Sgxpectre:
Stealing intel secrets from sgx enclaves via speculative execution,” in
IEEE European Symposium on Security and Privacy (EuroS&P), 2019.
[14] R. Cheng, F. Zhang, J. Kos, W. He, N. Hynes, N. Johnson, A. Juels,
A. Miller, and D. Song, “Ekiden: A platform for conﬁdentiality-
trustworthy, and performant smart contracts,” in IEEE
preserving,
European Symposium on Security and Privacy (EuroS&P), 2019.
[15] R. Cleve, “Limits on the security of coin ﬂips when half the processors
are faulty,” in ACM symposium on Theory of computing, 1986.
[16] P. Das, L. Eckey, T. Frassetto, D. Gens, K. Hostáková, P. Jauernig,
S. Faust, and A.-R. Sadeghi, “Fastkitten: Practical smart contracts on
bitcoin,” in USENIX Security Symposium, 2019.
[17] S. Das, V. J. Ribeiro, and A. Anand, “Yoda: Enabling computationally
intensive contracts on blockchains with byzantine and selﬁsh nodes,”
in Network and Distributed System Security Symposium (NDSS), 2019.
[18] C. Decker and R. Wattenhofer, “A fast and scalable payment network
with bitcoin duplex micropayment channels,” in Symposium on Self-
Stabilizing Systems, 2015.
J. Dilley, A. Poelstra, J. Wilkins, M. Piekarska, B. Gorlick, and
M. Friedenbach, “Strong federations: An interoperable blockchain solu-
tion to centralized third-party risks,” arXiv preprint arXiv:1612.05491,
2016.
[19]
[20] C. Dwork and M. Naor, “Pricing via processing or combatting junk
mail,” in Annual International Cryptology Conference (CRYPT)), 1992.
[21] S. Dziembowski, L. Eckey, S. Faust, and D. Malinowski, “Perun: Virtual
payment hubs over cryptocurrencies,” in IEEE Symposium on Security
and Privacy (SP), 2019.
[22] S. Dziembowski, S. Faust, and K. Hostáková, “General state channel
networks,” in ACM Conference on Computer and Communications
Security (CCS), 2018.
[23] R. Guerraoui, N. Kneževi´c, V. Quéma, and M. Vukoli´c, “The next 700
bft protocols,” in EuroSys, 2010.
[24] A. Juels, “Client puzzles: A cryptographic countermeasure against
connection depletion attacks,” in Networks and Distributed System
Security Symposium (NDSS), 1999.
[25] H. Kalodner, S. Goldfeder, X. Chen, S. M. Weinberg, and E. W. Felten,
“Arbitrum: Scalable, private smart contracts,” in USENIX Security
Symposium, 2018.
[26] A. Kiayias, H.-S. Zhou, and V. Zikas, “Fair and robust multi-party
computation using a global transaction ledger,” in Conference on the
Theory and Applications of Cryptographic Techniques (EUROCRYPT),
2016.
[27] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, “Hawk:
The blockchain model of cryptography and privacy-preserving smart
contracts,” in IEEE symposium on security and privacy (SP), 2016.
[28] R. Kumaresan, T. Moran, and I. Bentov, “How to use bitcoin to play
decentralized poker,” in ACM Conference on Computer and Communi-
cations Security (CCS), 2015.
Fig. 5. Transaction cost comparison between Bitcontracts and Ethereumas
box plots with the whiskers showing the 2nd and 98th percentile respectively.
The orange line (coinciding with the bottom of the boxes in all but the last
box) shows the median value and the bottom and top of the boxes show the
25th and 75th percentile, respectively.
Ethereum (based on transaction fee data from 2020-06-08).
We see that the transaction cost distribution for Bitcontracts
on Bitcoin (median cost $0.35) has a similar range as the cost
distribution of the same transactions in Ethereum (median cost
$0.51), while executing them on top of other legacy cryp-
tocurrencies, such as Litecoin (LTC) or Bitcoin Cash (BCH),
is much cheaper (median is $0.03 and $0.004, respectively).
Note, that this is the on-chain transaction cost, i.e. service
provider fees are not
included. However, as discussed in
Section IX-A, computation time (and thus execution fees) is
relatively cheap and the on-chain transaction fees are likely to
be the dominant cost factor.
X. CONCLUSION
In this paper, we introduced a new system, Bitcon-
tracts,
that extends legacy blockchains such as Bitcoin
with Ethereum-style smart contracts without changes to the
base protocol. Bitcontracts achieves this by executing smart
contracts in service providers with a quorum based trust
model and leveraging the consensus protocol of the under-
lying blockchain. Bitcontracts only requires the underlying
blockchain to provide four basic properties—that are supported
by most popular blockchain systems. Our implementation and
evaluation show that running smart contracts on top of legacy
blockchains is feasible and cost-effective in practice.
REFERENCES
“CoinMarketCap,” 2020, https://coinmarketcap.com/.
“Ripple,” 2020, https://ripple.com/.
“Stellar,” 2020, https://www.stellar.org/.
[1]