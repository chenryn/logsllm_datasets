i }i∈[n])
i [0]}i∈[n]⟩ ← vssShare(s, q, {vpki}i∈[n])
i [j]) = false then
i [j]) = false then
⟨c∗[0], {u∗
return ⟨c∗, r, {u∗
13:
14:
15:
16:
17:
i }i∈[n]⟩
18:
19: procedure vssVerify∗(vpk∗
⟨vpki , dpki⟩ ← vpk∗
20:
if vssVerify(vpki , c∗[0], u∗
21:
22:
if u∗
23:
24:
25:
26:
27:
28:
29:
30:
return false
i [1] (cid:44) ⊥ then
j ← ⌈i/(k − 1)⌉
if dprfVerify(dpki , ⟨r, i⟩, u∗
for j ∈ [ℓ] do
return false
if vssVerify(vpki , c∗[j], u∗
return false
return true
i
i , c∗, r, u∗
i )
i [0]) = false then
i
i
i
i
i , u∗
i [j])⟩
return false
return ⊥
i [0] + u∗
i , c∗, r, u∗
i , vpk∗
i , ˆi)
for i ∈ I do
i ⟩}i∈I)
i ) = false then
if vssVerify∗(vpk∗
⟨vpki , dpki⟩ ← vpk∗
j ← ⌈ˆi/(k − 1)⌉
⟨di , u⟩ ← v∗
⟨vpki , dpki⟩ ← vpk∗
if dprfVerify(dpki , ⟨r, ˆi⟩, di) = false then
c ← vssCombineCommitments(c∗[0], c∗[j])
if vssVerify(vpki , c, u) = false then
return true
31: procedure vssReconstruct∗(c∗, r, {⟨vpk∗
32:
33:
34:
35:
return vssReconstruct(c∗[0], {⟨vpki , u∗
i [0]⟩}i∈I)
36:
37: procedure vssRecoverContrib∗(c∗, r, vsk∗
i , u∗
i , ˆi)
⟨vski , dski⟩ ← vsk∗
38:
di ← dprfContrib(dski , ⟨r, ˆi⟩)
39:
j ← ⌈ˆi/(k − 1)⌉
40:
return ⟨di ,(u∗
41:
42: procedure vssRecoverVerify∗(c∗, r, v∗
43:
44:
45:
46:
47:
48:
49:
50:
51:
52: procedure vssRecover∗(c∗, r, {⟨vpk∗
53:
54:
55:
56:
57:
58:
59:
60:
61:
62:
63:
64:
65:
c ← vssCombineCommitments(c∗[0], c∗[j])
s ← vssReconstruct(c, {⟨vpki , ui⟩}i∈I)
yˆi ← dprfEval(⟨r, ˆi⟩, {di}i∈I)
u∗
← ⟨(s(ˆi) − yˆi),⊥, . . . ,⊥⟩
ˆi
if vssVerify∗(vpk∗
, c∗, r, u∗
ˆi
ˆi
return ⊥
return u∗
ˆi
if vssRecoverVerify∗(c∗, r, v∗
return ⊥
⟨di , ui⟩ ← v∗
⟨vpki , dpki⟩ ← vpk∗
i
j ← ⌈ˆi/(k − 1)⌉
for i ∈ I do
) = false then
return false
i , v∗
i ⟩}i∈I , ˆi, vpk∗
ˆi
i
)
i , vpk∗
i , ˆi) = false then
Figure 1: Pseudocode for our VSS scheme
(line 55). vssRecover∗ then leverages vssReconstruct (line 60) to re-
construct a polynomial s ∈ Zq[x] that is the sum of the polynomial
originally shared in vssShare∗ that resulted in commitment c∗[0]
and the j-th masking polynomial sj that resulted in commitment
c∗[j], where j = ⌈ˆi/(k − 1)⌉. vssRecover∗ then evaluates s(ˆi) and
subtracts sj(ˆi) = dprfEval(⟨r, ˆi⟩, {di}i∈I) (lines 60–62) to obtain
u∗
[0].
ˆi
3.6 Security
Below, we sketch a proof that our modified VSS scheme preserves
the security properties from the underlying VSS protocol.
First note that if a hiding adversary AV∗ for V∗ is legiti-
Hiding
mate, then it is legitimate for both F and V. Consider an execution
in which O?F (used in place of dprfEval) is instantiated as OrandF .
For any commitment c∗, the set of indices I for which AV∗ obtains
the shares {u∗
i [0]}i∈I produced in line 17 (i.e., in its invocation of
ObV∗ that returned c∗) satisfies |I| < k. To see why, note that AV∗
can obtain u∗
i [0] for any i in one of three ways: (i) by invoking
OV∗,i .compromise; (ii) by invoking OV∗,i .contrib(c∗); or (iii) by in-
voking OV∗,ˆi .recover(c∗, i) at each ˆi ∈ ˆI where |ˆI| ≥ k, in which
case AV∗ can recover u∗
i [0] using the vssRecover∗ routine (line 62).
Critically, invoking OV∗,ˆi .recover(c∗, i) at each ˆi ∈ ˆI where |ˆI| < k
yields no information about u∗
i [0], since when |ˆI| < k, the value
yi is random (line 61) and so u∗
i [0] = s(i) − yi (line 62) is hidden
information-theoretically. Because AV∗ is legitimate, it thus ob-
tains u∗
i [0] for only fewer than k values of i, and so if its success
(in the sense of (2)) is nonnegligible in κ, then we can construct a
hiding attacker for V with success nonnegligible in κ, as well.
Now suppose AV∗ has success in the execution above that is
only negligible in κ, and consider an execution in which O?F is
instead instantiated as OrealF . If AV∗ now has success that is non-
negligible in κ, then we can use AV∗ to construct a DPRF attacker
for F with success nonnegligible in κ (in the sense of (1)).
To summarize, if there is a hiding attacker that breaks V∗ with
nonnegligible probability, then either there is a hiding attacker that
breaks V with nonnegligible probability or there is a DPRF attacker
that breaks F with nonnegligible probability.
Binding A binding adversary AV∗ is provided inputs ⟨q, {⟨vpk∗
i ,
vsk∗
i ⟩}i∈[n]⟩ ← vssInit∗(1κ , k, n), and succeeds if it outputs c∗, {u∗
i }i∈I
and { ˆu∗
i }i∈ ˆI for which
vssReconstruct∗(c∗, r, {⟨vpk∗
∧ vssReconstruct∗(c∗, r, {⟨vpk∗
∧ s (cid:44) ⊥ ∧ ˆs (cid:44) ⊥ ∧ s (cid:44) ˆs
i , u∗
i , ˆu∗
i ⟩}i∈I) = s
i ⟩}i∈ ˆI) = ˆs
Let s and ˆs be values satisfying this condition. Then,
s = vssReconstruct(c
ˆs = vssReconstruct(c
∗[0], {⟨vpki , u
∗[0], {⟨vpki , u
∗
i [0]⟩}i∈I)
∗
i [0]⟩}i∈ ˆI)
where ⟨q, {⟨vpki , vski⟩}i∈[n]⟩ ← vssInit(1κ , k, n) (see lines 2 and 36).
That is, breaking binding for V∗ implies breaking binding for V,
and so if V ensures the binding property, then so does V∗.
3.7 Instantiating VSSR
Now we discuss how to instantiate VSSR concretely given a DPRF
scheme [38] and a VSS scheme from Kate et al. [29]. We also in-
stantiate our VSSR with a VSS scheme from Pedersen [42], whose
details can be found in Appendix B.
3.7.1 Kate et al. Secret Sharing We describe how to fit the secret
sharing scheme from Kate et al. [29] into our framework. Note that
this secret sharing scheme also has a witness, which proves that
a particular share is consistent with the polynomial commitment.
Witnesses are additively homomorphic as well and can be manipu-
lated the same way as the shares can. In particular, we can perform
polynomial interpolation in order to take a set of f witnesses and
obtain the witness for any other share. Additionally, we only need
to send a witness when we transmit the corresponding share. Thus,
witnesses only increase the communication overhead by a constant
factor. In the description below, we assume that we have the witness
corresponding to each share.
• vssInit(1κ , k, n) first chooses a safe prime q at least κ bits in
length. Then, we initialize two groups of order q: G and Gt
such that there exists a bilinear map e : G × G → Gt . We
then generate a τ ∈ Zq and pick a generator д ∈ G. Set vpki
to be ⟨G, Gt , e, д, {дτ j }j∈[f ]⟩ and vski to be ⊥ for all i. Then,
we delete τ. Finally, vssInit returns ⟨q, {⟨vpki , vski⟩}i∈[n]⟩.
• vssShare(s, q, {vpki}i∈[n]) first extracts the public key and
gets д and {дτ j }j∈[f ]. Let sj be the coefficient of the x j term
in s and s(i) be the evaluation of s at point i. We now compute
j=0(дτ j)sj and assign it to c. Now, us-
ing polynomial division, we can compute the coefficients of
s(x)−s(i)
τ −i which is
the witness for ui. We also set ui to be s(i). Finally, vssShare
returns ⟨c, {ui}i∈[n]⟩.
дs(τ) by computingf
, which will allow us to compute д
s(τ )−s(i)
x−i
,
дτ
τ −i
τ −i
s(τ )−s(i)
дi )e(д, д)s(i) and false otherwise.
• vssVerify(vpki , c, ui) first extracts дs(τ) from c, s(i) from ui,
and e, д, дτ from vpki. We also have access to the value
s(τ )−s(i)
since the witness for the share is transmitted along
д
with the share. Then, vssVerify returns true if e(дs(τ), д)
equals e(д
• vssReconstruct(c, {⟨vpki , ui⟩}i∈I) first calls
vssVerify(vpki , c, ui) for all i ∈ I. If all of vssVerify calls re-
turn true, then we continue. Otherwise, vssReconstruct re-
turns ⊥. Then, we extract s(i) from each ui and do Lagrange
interpolation to identify the original polynomial and return