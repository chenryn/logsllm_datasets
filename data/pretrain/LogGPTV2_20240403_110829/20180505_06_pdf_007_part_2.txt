# Migrating from Oracle to PostgreSQL Using ora2pg

## Introduction
This document outlines the steps required to migrate a database from Oracle to PostgreSQL, including schema and data migration, using the `ora2pg` tool. The process is detailed below, with examples and configurations.

## Can This Run on PostgreSQL?
Yes, it can. To achieve this, we need to:
- Create the schema (e.g., table `countries`) in PostgreSQL.
- Copy over the data.
- Change the JDBC driver and connection information.

### Manual Steps
1. **Create the Schema**:
   - Manually create the schema in PostgreSQL.
   - Example: 
     ```sql
     CREATE TABLE countries (
       country_id CHAR(2) PRIMARY KEY,
       country_name VARCHAR(40)
     );
     ```

2. **Copy Over the Data**:
   - Use SQL Developer or similar tools to export the data from Oracle and import it into PostgreSQL.
   - Example:
     ```sql
     -- Export from Oracle
     SELECT * FROM countries INTO OUTFILE 'countries.csv' FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n';

     -- Import into PostgreSQL
     COPY countries FROM 'countries.csv' WITH CSV HEADER;
     ```

3. **Change the JDBC Driver and Connection Info**:
   - Update the application's configuration to use the PostgreSQL JDBC driver.
   - Example:
     ```properties
     db.driver=org.postgresql.Driver
     db.url=jdbc:postgresql://localhost:5432/mydatabase
     db.user=myuser
     db.password=mypassword
     ```

### Challenges
- **Schema Compatibility**: Data types and case sensitivity of identifiers may differ between Oracle and PostgreSQL.
  - Example: `VARCHAR2` in Oracle vs `VARCHAR` in PostgreSQL.
- **Constraints and Syntax**: Unique, primary, foreign key, and check constraints need to be correctly translated.

## Using ora2pg for Migration

### Installation
1. **Install Oracle Instant Client**:
   - Download and install the necessary RPMs:
     ```sh
     wget https://download.oracle.com/otn_software/linux/instantclient/12.1/oracle-instantclient12.1-basic-12.1.0.2.0-1.x86_64.rpm
     wget https://download.oracle.com/otn_software/linux/instantclient/12.1/oracle-instantclient12.1-devel-12.1.0.2.0-1.x86_64.rpm
     wget https://download.oracle.com/otn_software/linux/instantclient/12.1/oracle-instantclient12.1-sqlplus-12.1.0.2.0-1.x86_64.rpm
     sudo rpm -Uvh oracle-instantclient12.1-*.rpm
     ```
   - Set the environment variables:
     ```sh
     export LD_LIBRARY_PATH=/usr/lib/oracle/12.1/client64/lib:$LD_LIBRARY_PATH
     export PATH=/usr/lib/oracle/12.1/client64/bin:$PATH
     export ORACLE_HOME=/usr/lib/oracle/12.1/client64
     ```

2. **Test Oracle Connection**:
   ```sh
   sqlplus hr/hr@oracle-xe.pgtraining.com:1521/XE
   ```

3. **Install PostgreSQL Client**:
   ```sh
   sudo yum install postgresql
   ```

4. **Test PostgreSQL Connection**:
   ```sh
   psql -h postgres.pgtraining.com -U hr hr
   ```

5. **Install Perl Modules**:
   ```sh
   sudo yum install perl-DBI perl-DBD-Pg perl-ExtUtils-MakeMaker gcc
   wget http://search.cpan.org/CPAN/authors/id/P/PY/PYTHIAN/DBD-Oracle-1.74.tar.gz
   tar xf DBD-Oracle-1.74.tar.gz
   cd DBD-Oracle-1.74
   perl Makefile.PL -l
   make
   make install
   ```

6. **Install ora2pg**:
   ```sh
   wget https://github.com/darold/ora2pg/archive/v17.4.tar.gz
   tar xf v17.4.tar.gz
   cd ora2pg-17.4
   perl Makefile.PL
   make
   make install
   ```

### Configuration
- A template configuration file is installed at `/etc/ora2pg/ora2pg.conf.dist`.
- Customize the configuration file as needed. For example:
  ```ini
  ORACLE_HOME /usr/lib/oracle/12.1/client64
  ORACLE_DSN dbi:Oracle:host=oracle-xe.pgtraining.com;sid=xe
  ORACLE_USER hr
  ORACLE_PWD hr
  USER_GRANTS 1
  SCHEMA hr
  TYPE TABLE,VIEW,PROCEDURE,TRIGGER
  DROP_FKEY 1
  ```

### Running ora2pg
1. **Dump Schema to File**:
   ```sh
   /usr/local/bin/ora2pg -c ora2pg-schema-to-file.conf
   psql -h postgres.pgtraining.com -U hr hr < output.sql
   ```

2. **Dump Schema and Data to File**:
   ```sh
   /usr/local/bin/ora2pg -c ora2pg-all-to-file.conf
   psql -h postgres.pgtraining.com -U hr hr < output.sql
   ```

### Post-Migration Testing
- Verify the data and run some test queries:
  ```sql
  SELECT * FROM job_history;
  UPDATE employees SET job_id = 'ST_MAN' WHERE employee_id = 100;
  SELECT * FROM job_history;
  ```

### PL/SQL vs. PL/PgSQL
- `ora2pg` can automatically translate simple procedures or functions.
- More complex procedures need manual translation.
- PL/PgSQL is feature-rich and often easy to rewrite typical procedures.

### Migration Scenarios
1. **Bad Scenario**:
   - Application linked against OCI/uses TNS natively (like SQL*Plus).
   - If source code is not available, migration is not possible.
   - If source code is available, the database access layer needs to be rewritten.

2. **Bad Scenario**:
   - Application uses proprietary software like Oracle Forms.
   - An easy migration is generally not possible.

3. **So-So Scenario**:
   - Application uses ODBC, JDBC, etc., but with lots of Oracle-specific syntax.
   - If source code is not available, migration is not possible.
   - If source code is available, queries and procedures need to be manually translated.

4. **Good Scenario**:
   - Application uses ODBC, JDBC, etc., with minimal Oracle-specific syntax.
   - Migration is usually straightforward unless the software is completely locked down.

### Conclusion
- Determine your specific scenario and plan the migration accordingly.
- Use `ora2pg` for automated and semi-automated migration tasks.
- Test thoroughly to ensure data integrity and application functionality.

If you have any further questions or need assistance, feel free to ask!