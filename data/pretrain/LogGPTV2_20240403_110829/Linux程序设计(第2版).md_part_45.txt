个数据文件。它们都需要在同一时间对字节1和字节2进行修改。程序A选择先修改字节2，再修
改字节1；而程序B则决定先修改字节1，再修改字节2。
两个程序同时开始运行。程序A封锁住了字节2，程序B封锁住了字节1。接着，程序A尝试封
锁字节1，但因为它已经被程序B封锁住了，所以程序A开始等待。面程序B也在尝试封锁字节2，
但因为它已经被程序A封锁住了，所以程序B也开始等待。
在这种情况下，两个程序谁都无法继续前进，这一现象就叫做“死锁”或“致命拥抱”，大
多数商业化的数据库软件能够检测到死锁现象并解开它们：但UNIX操作系统的内核不会这样
做。要想从这团乱麻里找出头绪，必须有来自外界的旋，比如我们可以强行终止其中的一个
程序。
加入jaVa编程群：524621833
---
## Page 236
218Linux程序设计
程序员必须对这种局面提高警惕。当你有多个程序在等待封锁的时候，就必须非常认真地
的：两个程序应该以同样的顺序对它们准备修改的字节施行封锁，或者对一个更大的文件区域
施行封锁。
我们没有足够的篇幅在这里对共发程序所面临的困难进行分析。如果读者有兴趣做进步
阅读，可以考虑购买一本“Principles of Concurrent and Distributed Programming”（《共发和分布
式程序设计原理》），它的作者是M.Ben-Ari，由PrenticeHall出版社出版，国际书号是ISBN
013711821X,
7.3数据库
我们已经学习了如何用文件来存储数据，那为什么还要使用数据库呢？其实原因很简单，
在某些情况下，数据库功能可以为我们提供一个更好的解决问题的办法。与单纯用来保存数据
的文件相比，数据库有两方面优点。首先，允许保存长度不固定的记录数据，这对非结构化的
平面文件来说实现起来就有困难。第二，数据库通过-个索引来存储和检索记录数据。索引不
必非得是记录号等简单的东西一这在平面文件里也很容易实现，它可以是任意的字符串。
7.3.1dbm数据库
符合X/Open技术规范的UNIX版本白备了一个数据库。但这个数据库并不符合ANSI标准的
SQL技术规范，只能说是一些用来存储和检索记录数据的例程面已。
有的Linux发行版本自带一个名为PostgreSQL的SQL数据库，它确实支持SQL规范，但要讨
论它可就超出这本书的范围了。
dbm数据库适合存储相对比较静态的索引化数据。有些数据库人士认为dbm根本就算不上足
个数据库，顶多算是个索引化的文件存储系统。但X/Open技术规范的确把dbm看做是一个数据库，
所以我们在这本书里也这么称呼它。另外，不少Linux发行版本自带的数据库产品是GNU的gdbm。
dbm数据库使我们能够通过索引把长度可变的数据结构保存起来；在对这些结构进行检索的
时候，既可以使用索引，也可以简单地顺序扫描整个数据库。dbm数据库最适合保存那些经常被
访问但很少需要修改的数据，它创建数据项时会非常慢，但检索数据时却会很快。
讲到这我们遇上个小问题—不同Linux发行版本自带的dbm库版本是多种多样的。它们有的
使用卷BSD授权版本，我们可以在FTP站点ftp://ftp.cs.berkeley.cdu/ucb/4bsd/和Web站点
http://www.openbsd.org上找到它。其他一些使用的是GNU版本，这个版本可以在Web站点
http:/www.gnu.org上找到。使情况更加复杂的是：GNU系列又分为两种安装方式，一种是与
X/Open的dbm技术规范不完全兼容的“普通安装方式”，另一种是与X/Open的dbm技术规范兼容的
“兼容安装方式”。在我们写作这本书的时候，Sleepycat软件公司（它的网址是http://
www.sleepycal.com）推出了一个名为“The BerkleyDatabase”的开放源代码产品，这个产品也支
持Dbm/Ndbm一脉相承的程序设计接U1
这一章内容将假设读者机器里安装的是一个与X/Open技术规范兼容的版本。如果读者在编
译本章中的程序示例时遇到了麻烦，原因一般有两种：如果编译器提示找不到DBM类型的定义，
加入iaVa编程群：524621833
---
## Page 237
第7章数据管理219
就可能是缺少ndbm.h头文件；如果在程序编译的链接阶段出现了问题，我们建议读者去安装一
个GNUdbm库的升级版本，具体做法如下：
先建立一个临时子目录。然后到http://www.gnu.org站点上下载一份最新版的gdbm库，这个
库被放在--个文件里，文件名一般采用“gdbm_？_？_tar.gz”的形式。把文件下载到你的临时子
目录里，用“tarzxvf”命令展开它。先读读README文件，它会告诉你如何对它进
行编译和安装。常见的做法是先执行一条“fconfigure”命令检查你的系统配置情况，再用
“make”命令对程序进行编译、最后，用“make install”和“make install-compat”命令把基本
文件和附带的兼容文件安装好。完成这些安装步骤可能需要你具备根用户的权限。最好先用“-n”
选项做一次模拟性质的安装操作，看看它都会干此什么，模拟安装使用的命令是“make-B
install"。
完成上面这些操作之后，你就应该拥有一个与X/Open技术规范兼容的ndbm版本了，它一般
被安装在你系统的/usr/local子目录下。你编译器的默认配置可能不会去搜索这些地方，如果真
是这样，就还得给gcc命令加上一个搜索头文件用的“-I/usr/localinclude”选项和一个搜索库文
件用的“-L/usr/local/lib”选项。
7.3.2dbm例程
dbm数据库和我们在上--章见到的curses-一样、都是山两个部分组成，一个是程序源代码文
件里用的头文件，另一个是链接程序目标代码用的库文件。库文件就简单地被称为dbm，给编译
“n”表示这是一个“新”dbm库，因为曾经出现过好多种不同版本的dbm库，加上这个字母就可
以把它和老版本dbm库区分开。
dbm数据库的基本概念
在向大家介绍dbm数据库的各个函数之前，我们先来看看它到底能干些什么：这可是个很关
键的问题，能够帮助我们更好地理解dbm函数的使用方法
dbm数据库的基本元素包括两个数据块，一块是想要保存起来的数据，另一块是对其进行检
索时用做关键字的数据。对每个dbm数据库面言，保存在其中的每一个数据块都必须有一个独一
无二的关键字。对关键字和数据本身倒没有什么限制，对使用超长数据或超长关键字的情况也
没有定义什么错误。技术规范里倒是允许在具体实现时把关键字/数据对的最大长度限制在1024
个字节，但这个限制通常并没有什么意义，因为具体实现出来的东西往往比技术规范的要求更
灵活。关键字的取值被用做检索存储数据的索引，就像图7-2里的标签一样、
为了对这些数据块进行操作，人们在头文件ndbm.h里定义了一个新的类型，即datum类型。
这个类型的具体内容会随版本的不同面不同，但它至少会包含如下所示的成员：
void*dptr
Blzo_t dsize
datum是一个用typedef语句定义的类型：在ndbm.h文件里还定义了一个DBM类型，这是一
个用来访问数据库的结构，其作用与用来访问文件的FILE很相似。DBM类型的内部结构依赖于
具体的版本，不允许程序直接访问。
加入jaVa编程群：524621833
---
## Page 238
220
Linux程序设计
EMPLOYEES
图7-2
在使用dbm数据库的时候，要想引用一个数据块，必须先声明一个datum类型的结构，让参
的记录数据，还是用来访问数据库记录的索引数据，都必须通过一个datum类型来引用。
我们可以把DBM类型看做是FILE类型的一个翻版。在打开一个dbm数据库的时候，我们将
一个，即一个DBM类型的指针，对那两个文件的访问就要靠这个指针来完成。永远不要直接读
写这两个文件，对它们的访问一定要通过dbm函数来进行。
gdbm库把这两个文件合并到了一起，打开数据库时也只会创建出一个文件来。这
一点请使用gdbm率的读者多加注意。
如果读者熟悉SQL数据库，就会注意到dbm数据库没有与之关联的数据表或数据栏结构。这
是因为dbm不仅对数据库记录中的数据项是否是固定长度没有要求，对数据的内部构造也没有要
求。dbm工作在非结构化二进制数据块的基础上。
7.3.3dbm数据库的访问函数
介绍完dbm的工作基础之后，下面开始对有关函数进行说明。常用的dbm函数主要有以下
几种：
include
D *dlm_open（conat char *fllename, int file_opan_flaga,mode_t file_mode);
int dbm_store（cax *databaso_descriptor, datum key, datun content,int store_mode))
datun dibm_fetch（Dam *database_dencriptor,datum key）1
void dbm_close（Dax*database_descriptor))
加入jaVva编程群：524621833
---
## Page 239
第7章数据管理
1.dbm_open函数
这个函数的作用是打开一个现有的数据库，也可以用来创建新数据库，filename参数是一个
基本文件名，不要加上“pag”或“.dir”扩展名、
其余参数与我们在第5章里学过的open函数的第二个和第三个参数是一样的。我们可以使用
同样的“#define”定义。数据库的读、写或读/写权限由第二个参数控制。创建新数据库的时候
要把这些标志与O_CREAT用二进制OR操作“或”在-起，O_CREAT标志表示将创建个新文
件。第三个参数的作用是设定被创建文件的初始权限。
dbm_open函数返回的是--个DBM类型的指针，数据库的后续操作将通过这个指针来完成。
如果失败，dbm_open函数将返回“（DBM*）0"。
2.dbm_store函数
我们用这个函数把记录数据存放到数据库里去。我们在前面曾经说过，任何被保存到数据
库里去的记录数据都必须有一个独一无.的索引。而要想定义准备保存到数据库里的记录数据
和用来引用记录数据的索引数据，就必须设置两个datum类型的结构：“-个用于索引数据，另一
个用于记录数据。store_mode参数控制用一个已经存在的关键字再次向数据库里存放数据的时候
会发生什么样的事情：如果它被设置为“dbm_insert"，存放操作将失败，dbm_store返回
“1”；如果它被设置为“dbm_replace”，新数据就会覆盖掉现有数据，存放成功，dbm_store返
回“o”。如果出现其他错误，dbm_store将返回一个负数值。
3.dbm_fetch函数
这个函数的作用是在数据库里检索数据：它的参数包括一个从dbm_open调用返回的dbm指
针和一个datum类型的结构——这个结构必须指向一个关键字。它返回的是一个datum类型的结
构。如果在数据库里找到了与关键字对应的记录数据，被返回的datum结构里的dptr和dsize值
将指向那条被找到的记录数据：如果没有搜到与关键字对应的记录数据，dptr将被设置为
"null"。
dbm_fetch返回的datum结构里只有一个指向记录数据的指针，记录数据本身依然放在dbm库
内部的一个本地存储区里，在继续调用其他dbm函数之前，必须先把它拷员到程序变量里才行。
4.dbm_close函数
这个函数的作用是关闭用dbm_open打开的数据库，它的参数是个dbm指针，面这个指针
必须是以前的某个dbm_open调用的返回值。
介绍了这么多dbm数据库的基本函数之后，我们来编写我们的第一个dbm程序，程序名是
dbm1.c。在这个程序里，我们将使用一个名为test_data的结构。
动手试试：一个简单的dbm数据库
1)程序开始部分是头文件、常数定义、main函数和对tes_data结构的定义：
#include 
include 
ginclude 
include 
#include 
加入jaVa编程群：524621833
---
## Page 240
222
Linux程序设计
define I7EMS_USED 3
*/tmp/dbml_test
etruct test_data [
(har misc_chars[15]:
char more_chars[21]:
int
any_integer:
) ;
int nain()
2）我们在main函数里安排了items_to_store和items_received这两个结构，还设置“索引数据
和记录数据这两个datum类型的结构：
struct test_data itens_to_store[1TEMS_USED]:
struct test_data itee_retrieved:
char key_to_use[20]:
int i. result;
datum key_datum;
datum data_datum:
:xqd"uqp. WBC
3）dbm_ptr被定义为一个指向dbm类型的结构的指针，我们用它以读写方式打开测试用的数
据库，如果文件不存在，就创建它：
dbm_ptr = dbe_openiTEST_DB_PILE, O_RDWR | O_CREAT. 06661:
if(:dbn_ptr)[
fprintf (stderr, *Failed to open databasen*);
exit (EXIT_FAILURE) :
4)现在往items_to_store结构里添加一些数据：
memset(items_to_store,“0, sizeof(items_to_store));
menset(items_to_store,'\o',sizeof{items_co_storell;
strcpy(items_to_store(0).misc_chars.
itens_to_store[0].any_integer =47:
*First!');
strcpyfitems_to_store[0].more_chars,*foo*);
strcpy(items_to_store[1].misc_chars,*bar*);
strcpy(items_to_atore[1].more_chars,*unlucky?*);
itens_to_store[l].any_integer =13;
strcpy(items_to_store[2].misc_chars,*Third*):
itens_to_store[2).any_integer =3:
strcpy(items_to_store{2).more_chars, “baz*);
5）我们必须为每个数据项建立个供今后引用的关键字。我们把关键字设置为字符串的头
-个字符加那个整数。这个关键字将由key_datum标识，而data_datum则指的是数据项
items_to_store。然后，我们把数据保存到数据库里。
for 1 0: ikey_tn_use;
data_datun.dptr =Ivoid *&items_to_storeii]:
xey_datut.dsize = strlen(key_to_use) :
data_datum.dsize = sizeof |etruct test_datal :
result = dbm_storeIdbe_ptr, key_datum. data_datum, DBM_REPLACE);
if (result!= 0){
fprintf (stderr, *dbm_stote failed on key $s^n*, key_to_use);
exit (2) :
6）现在看看能不能检索到这个新数据，最后，关闭数据库文件。
sprintt(key_to_use.“bukd,13);
key_datun.dsize α strlen(key_to_use) ;
key_datun.dptr =key_to_use;
data_datun = dbn_fetch(dbm, ptr, key_datun) ;
1f（data_datum.dptr}（
printf(*Data retrievedn*):
printf(*Retrieved iten-s id gsin*.
memcpy(&item_retrieved. data_datun.dptr. data_datun,dsize):
iten_retrieved.misc_chars.
iton_retrieved.any_integer.
item_retrieved.more_chars) :
clse [
printf(*No data found for key sn*. key_to_use);
dbm_e1ose(dbm_ptr);
当我们编译并运行这个程序的时候，它会给出下面这样简单的输出：
 gce -o dbm1 dbm1.c -1dbe
Data retrleved
Sdbm1
Retrieved item - bar 13 unlucky?
如果编译失败了，视具体情况可能还要再装上GNUgdbm库的兼容文件才行，或者还需要在
编译时指定其他的子目录，如下所示：
 gcc -1/usr/local/1nclude -L/uar/1ocal/1ib -o dbml dbml.c -1dbm
如果还不行，再试试用“-lgdbm”替换命令行上的“-1dbm”参数，即：
gcc -1/usr/1ocsl/1nclude -L/usr/local/1ib -0 dbm1 dbml.c -1gdbm
操作注释：
首先、打开数据库，如果不存在就创建它。接着填写了三个做为测试数据的item_to_store数
据项。我们为这三条记录数据各创建-个索引关键字。为简单起见，我们就用两个字符串各自
的头一个字母和记录中的整数来构战关键字。