A lot of interfaces defined in `service_worker_api` are overrides of
interfaces that fetch type definitions lie `watwg-fetch` or `isomorphic-fetch`
are provided. `service_worker_api` is usually used in conjunction with one of
fetch libs and when user do that, interface mismatches will throw TypeScript
errors.
There are two options to fix it:
  * Remove all of interface properties that are colliding with fetch interfaces
  * Import of of the fetch type definitions and extend those interfaces
Here is the type definition with removed interface members that collide with
`isomorphic-fetch` type definition:
    // Type definitions for service_worker_api
    // Project: https://developer.mozilla.org/fr/docs/Web/API/ServiceWorker_API
    // Definitions by: Tristan Caron 
    // Definitions: https://github.com/borisyankov/DefinitelyTyped
    //  // REMOVED third "/" so this doesn't fire. Problem with duplicate Promises
    // between es6 and typescript - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/5015
    /**
     * Provides methods relating to the body of the response/request, allowing you
     * to declare what its content type is and how it should be handled.
     */
    interface Body {
        /**
         * Contains a Boolean that indicates whether the body has been read.
         * @readonly
         */
        bodyUsed: boolean;
        /**
         * Takes a Response stream and reads it to completion.
         * It returns a promise that resolves with an ArrayBuffer.
         */
        arrayBuffer(): Promise;
        /**
         * Takes a Response stream and reads it to completion.
         * It returns a promise that resolves with a Blob.
         */
        blob(): Promise;
        /**
         * Takes a Response stream and reads it to completion.
         * It returns a promise that resolves with a FormData object.
         */
        formData(): Promise;
        /**
         * Takes a Response stream and reads it to completion.
         * It returns a promise that resolves with a JSON object.
         */
        json(): Promise;
        /**
         * Takes a Response stream and reads it to completion.
         * It returns a promise that resolves with a USVString (text).
         */
        text(): Promise;
    }
    /**
     * Represents response/request headers, allowing you to query them and take
     * different actions depending on the results.
     */
    interface Header {
        new(): Header;
        /**
         * Appends a new value onto an existing header inside a Headers object, or
         * adds the header if it does not already exist.
         *
         * @param name The name of the HTTP header you want to add to the Headers
         * object.
         * @param value The value of the HTTP header you want to add.
         */
        append(name: string, value: string): void;
        /**
         * Deletes a header from a Headers object.
         *
         * @param name The name of the HTTP header you want to delete from the
         * Headers object.
         */
        delete(name: string): void;
        /**
         * Returns the first value of a given header from within a Headers object.
         *
         * @param name The name of the HTTP header whose value you want to retrieve
         * from the Headers object. If the given name is not the name of an
         * HTTP header, this method throws a TypeError.
         */
        get(name: string): string;
        /**
         * Returns an array of all the values of a header within a Headers object
         * with a given name.
         *
         * @param name The name of the HTTP header whose values you want to retrieve
         * from the Headers object. If the given name is not the name of an
         * HTTP header, this method throws a TypeError.
         */
        getAll(name:string): Array;
        /**
         * Returns a boolean stating whether a Headers object contains a
         * certain header.
         *
         * @param name The name of the HTTP header you want to test for. If the
         * given name is not the name of an HTTP header, this method throws
         * a TypeError.
         */
        has(name: string): boolean;
        /**
         * Sets a new value for an existing header inside a Headers object, or
         * adds the header if it does not already exist.
         *
         * @param name The name of the HTTP header you want to set to a new value.
         * If the given name is not the name of an HTTP header, this method throws
         * a TypeError.
         * @param value The new value you want to set.
         */
        set(name: string, value: string): void;
    }
    /**
     * Represents the response to a request.
     */
    interface Response extends Body {
        new(): Response;
        /**
         * Contains the URL of the response.
         * @readonly
         */
        url: string;
        /**
         * Contains a boolean stating whether this is the final URL of the response.
         */
        useFinalURL: boolean;
        /**
         * Contains the status code of the response (e.g., 200 for a success).
         * @readonly
         */
        status: number;
        /**
         * Contains a boolean stating whether the response was successful
         * (status in the range 200-299) or not.
         * @readonly
         */
        ok: boolean;
        /**
         * Contains the status message corresponding to the status code
         * (e.g., OK for 200).
         * @readonly
         */
        statusText: string;
        /**
         * Creates a clone of a Response object.
         */
        clone(): Response;
        /**
         * Returns a new Response object associated with a network error.
         */
        error(): Response;
        /**
         * Creates a new response with a different URL.
         */
        redirect(): Response;
    }
    /**
     * Represents a resource request.
     */
    interface Request extends Body {
        new(): Request;
        /**
         * Contains the request's method (GET, POST, etc.).
         * @readonly
         */
        method: string;
        /**
         * Contains the URL of the request.
         * @readonly
         */
        url: string;
        /**
         * Contains the context of the request (e.g., audio, image, iframe, etc.).
         * @readonly
         */
        context: string;
        /**
         * Contains the referrer of the request (e.g., client).
         * @readonly
         */
        referrer: string;
        /**
         * Creates a copy of the current Request object.
         */
        clone(): Request;
    }
    /**
     * An CacheOptions object allowing you to set specific control options for the
     * matching done in the match operation.
     *
     * @property [ignoreSearch] A Boolean that specifies whether the matching
     * process should ignore the query string in the url.  If set to true,
     * the ?value=bar part of http://foo.com/?value=bar would be ignored when
     * performing a match. It defaults to false.
     *
     * @property [ignoreMethod] A Boolean that, when set to true, prevents matching
     * operations from validating the Request http method (normally only GET
     * and HEAD are allowed.) It defaults to false.
     *
     * @property [ignoreVary] A Boolean that when set to true tells the matching
     * operation not to perform VARY header matching â€” i.e. if the URL matches you
     * will get a match regardless of the Response object having a VARY header or
     * not. It defaults to false.
     *
     * @property [cacheName] A DOMString that represents a specific cache to search
     * within. Note that this option is ignored by Cache.match().
     */
    interface CacheOptions {
        ignoreSearch?: boolean;
        ignoreMethod?: boolean;
        ignoreVary?: boolean;
        cacheName?: string;
    }
    /**
     * Represents the storage for Request / Response object pairs that are cached as
     * part of the ServiceWorker life cycle.
     */
    interface Cache {
        /**
         * Returns a Promise that resolves to the response associated with the first
         * matching request in the Cache object.
         *
         * @param request The Request you are attempting to find in the Cache.
         * @param {CacheOptions} options
         */
        match(request: Request | string, options?: CacheOptions): Promise;
        /**
         * Returns a Promise that resolves to an array of all matching responses in
         * the Cache object.
         *
         * @param request The Request you are attempting to find in the Cache.
         * @param {CacheOptions} options
         */
        matchAll(request: Request | string, options?: CacheOptions): Promise>;
        /**
         * Returns a Promise that resolves to a new Cache entry whose key
         * is the request.
         *
         * @param request The Request you want to add to the cache.
         */
        add(request: Request | string): Promise;
        /**
         * Returns a Promise that resolves to a new array of Cache entries whose
         * keys are the requests.
         *
         * @param request An array of Request objects you want to add to the cache.
         */
        addAll(...request: Array): Promise;
        /**
         * Adds additional key/value pairs to the current Cache object.
         *
         * @param request The Request you want to add to the cache.
         * @param response The response you want to match up to the request.
         */
        put(request: Request, response: Response): Promise;
        /**
         * Finds the Cache entry whose key is the request, and if found, deletes the
         * Cache entry and returns a Promise that resolves to true. If no Cache
         * entry is found, it returns false.
         *
         * @param request The Request you are looking to delete.
         * @param {CacheOptions} options
         */
        delete(request: Request | string, options?: CacheOptions): Promise;
        /**
         * Returns a Promise that resolves to an array of Cache keys.
         *
         * @param request The Request want to return, if a specific key is desired.
         * @param {CacheOptions} options
         */
        keys(request?: Request, options?: CacheOptions): Promise>;
    }
    /**
     * Represents the storage for Cache objects. It provides a master directory of
     * all the named caches that a ServiceWorker can access and maintains a mapping
     * of string names to corresponding Cache objects.
     */
    interface CacheStorage {
        /**
         * Checks if a given Request is a key in any of the Cache objects that the
         * CacheStorage object tracks and returns a Promise that resolves
         * to that match.
         *
         * @param request The Request you are looking for a match for in the CacheStorage.
         * @param {CacheOptions} options
         */
        match(request: Request | string, options?: CacheOptions): Promise;
        /**
         * Returns a Promise that resolves to true if a Cache object matching
         * the cacheName exists.
         *
         * @param cacheName The Request you are looking for a match for in the
         * CacheStorage.
         */
        has(cacheName: string): Promise;
        /**
         * Returns a Promise that resolves to the Cache object matching
         * the cacheName.
         *
         * @param cacheName The name of the cache you want to open.
         */
        open(cacheName: string): Promise;
        /**
         * Finds the Cache object matching the cacheName, and if found, deletes the
         * Cache object and returns a Promise that resolves to true. If no
         * Cache object is found, it returns false.
         *
         * @param cacheName The name of the cache you want to delete.
         */
        delete(cacheName: string): Promise;
        /**
         * Returns a Promise that will resolve with an array containing strings
         * corresponding to all of the named Cache objects tracked by the
         * CacheStorage. Use this method to iterate over a list of all the
         * Cache objects.
         */
        keys(): Promise>;
    }
    /**
     * Represents the scope of a service worker client. A service worker client is
     * either a document in a browser context or a SharedWorker, which is controlled
     * by an active worker.
     */
    interface ServiceWorkerClient {
        /**
         * Allows a service worker client to send a message to a ServiceWorker.
         *
         * @param message The message to send to the service worker.
         * @param [transfer] A transferable object such as, for example, a reference
         * to a port.
         */
        postMessage(message: string, transfer?: Object): void;
        /**
         * Indicates the type of browsing context of the current client.
         * This value can be one of auxiliary, top-level, nested, or none.
         * @readonly
         */
        frameType: string;
        /**
         * Returns the id of the Client object.
         * @readonly
         */
        id: string;
        /**
         * The URL of the current service worker client.
         * @readonly
         */
        url: string;
    }
    interface WindowClient extends ServiceWorkerClient {
        /**
         * Gives user input focus to the current client.
         */
        focus(): Promise;
        /**
         * A boolean that indicates whether the current client has focus.
         * @readonly
         */
        focused: boolean;
        /**
         * Indicates the visibility of the current client. This value can be one of
         * hidden, visible, prerender, or unloaded.
         * @readonly
         */
        visibilityState: string;
    }
    interface ServiceWorkerClientsMatchOptions {
        includeUncontrolled?: boolean;
        type?: string;
    }
    /**
     * Represents a container for a list of Client objects; the main way to access
     * the active service worker clients at the current origin.
     */
    interface ServiceWorkerClients {
        /**
         * Gets a list of service worker clients and returns them in a Promise.
         * Include the options parameter to return all service worker clients whose
         * origin is the same as the associated service worker's origin. If options
         * are not included, the method returns only the service worker clients
         * controlled by the service worker.
         *