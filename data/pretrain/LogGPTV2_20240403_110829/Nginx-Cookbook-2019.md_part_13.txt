### NGINX Configuration and Monitoring

#### 12.5 State Sharing with Zone Sync

**Configuration Example:**
```nginx
server {
    listen 80;
    location / {
        proxy_pass http://my_backend;
    }
}
```

**Discussion:**
The zone sync module is an exclusive feature of NGINX Plus that enables true clustering. As shown in the configuration, you must set up a stream server configured for zone_sync. In the example, this is the server listening on port 9000. NGINX Plus communicates with other servers defined by the `zone_sync_server` directive. You can set this directive to a domain name that resolves to multiple IP addresses for dynamic clusters or statically define a series of `zone_sync_server` directives. Access to the zone sync server should be restricted; specific SSL/TLS directives are available for machine authentication.

The benefit of configuring NGINX Plus into a cluster is that you can synchronize shared memory zones for rate limiting, sticky learn sessions, and key-value stores. The example provided shows the `sync` parameter added to the end of a `sticky learn` directive. In this example, a user is bound to an upstream server based on a cookie named `session`. Without the zone sync module, if a user makes a request to a different NGINX Plus server, they could lose their session. With the zone sync module, all NGINX Plus servers are aware of the session and the associated upstream server.

---

### Chapter 13: Advanced Activity Monitoring

#### 13.0 Introduction
To ensure optimal performance and precision, you need insight into monitoring metrics about your application's activity. NGINX Plus offers an advanced monitoring dashboard and a JSON feed to provide in-depth monitoring of all requests. This chapter details the power and possibilities of the NGINX Plus dashboard, the NGINX Plus API, and the Open Source stub status module.

#### 13.1 Enable NGINX Open Source Stub Status

**Problem:**
You need to enable basic monitoring for NGINX.

**Solution:**
Enable the `stub_status` module in a location block within an NGINX HTTP server:
```nginx
location /stub_status {
    stub_status;
    allow 127.0.0.1;
    deny all;
    # Set IP restrictions as appropriate
}
```
Test your configuration by making a request for the status:
```sh
$ curl localhost/stub_status
Active connections: 1
server accepts handled requests
1 1 1
Reading: 0 Writing: 1 Waiting: 0
```

**Discussion:**
The `stub_status` module provides basic monitoring of the Open Source NGINX server. It returns information on active connections, total connections accepted, handled, and served, as well as the current number of connections in read, write, or waiting states. The information is global and not specific to the parent server where the `stub_status` directive is defined. This module also provides active connection counts as embedded variables for use in logs and elsewhere, such as `$connections_active`, `$connections_reading`, `$connections_writing`, and `$connections_waiting`.

#### 13.2 Enabling the NGINX Plus Monitoring Dashboard

**Problem:**
You require in-depth metrics about the traffic flowing through your NGINX Plus server.

**Solution:**
Utilize the real-time activity monitoring dashboard:
```nginx
server {
    # ...
    location /api {
        api [write=on];
        # Directives limiting access to the API
        # See chapter 7
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }
}
```
This configuration sets up an HTTP server to serve the API and the status dashboard. The dashboard is served as static content from the `/usr/share/nginx/html` directory and makes requests to the API at `/api/` to retrieve and display the status in real time.

**Discussion:**
NGINX Plus provides an advanced status monitoring dashboard that details the system's status, including active connections, uptime, upstream server pool information, and more. The landing page provides an overview, while tabs like "Server Zones," "Upstream," "TCP/UDP Zones," "Caches," and others offer detailed statistics. The dashboard is invaluable for monitoring the heart of your applications and traffic flow.

#### 13.3 Collecting Metrics Using the NGINX Plus API

**Problem:**
You need API access to the detailed metrics provided by the NGINX Plus status dashboard.

**Solution:**
Use the RESTful API to collect metrics. For example:
```sh
$ curl "demo.nginx.com/api/3/" | json_pp
[
    "nginx",
    "processes",
    "connections",
    "ssl",
    "slabs",
    "http",
    "stream"
]
```
To get information about the NGINX Plus server:
```sh
$ curl "demo.nginx.com/api/3/nginx" | json_pp
{
    "version" : "1.15.2",
    "ppid" : 79909,
    "build" : "nginx-plus-r16",
    "pid" : 77242,
    "address" : "206.251.255.64",
    "timestamp" : "2018-09-29T23:12:20.525Z",
    "load_timestamp" : "2018-09-29T10:00:00.404Z",
    "generation" : 2
}
```
You can limit the information returned by the API using arguments:
```sh
$ curl "demo.nginx.com/api/3/nginx?fields=version,build" | json_pp
{
    "build" : "nginx-plus-r16",
    "version" : "1.15.2"
}
```
Other useful URIs include:
- `/api/{version}/connections` for connection statistics.
- `/api/{version}/http/requests` for request statistics.
- `/api/{version}/http/server_zones/{httpServerZoneName}` for server zone statistics.

**Discussion:**
The NGINX Plus API can return detailed statistics about various parts of the NGINX Plus server, including processes, connections, slabs, HTTP and stream servers, and more. This provides in-depth insights into the server's performance.

---

### Chapter 14: Debugging and Troubleshooting with Access Logs, Error Logs, and Request Tracing

#### 14.0 Introduction
Logging is essential for understanding your application. NGINX allows you to configure access and error logs, stream logs over Syslog, and trace requests end-to-end with request identifiers. This chapter discusses these logging and tracing capabilities.

#### 14.1 Configuring Access Logs

**Problem:**
You need to configure access log formats to add embedded variables to your request logs.

**Solution:**
Configure an access log format:
```nginx
http {
    log_format geoproxy
    '[$time_local] $remote_addr '
    '$realip_remote_addr $remote_user '
    '$request_method $server_protocol '
    '$scheme $server_name $uri $status '
    '$request_time $body_bytes_sent '
    '$geoip_city_country_code3 $geoip_region '
    '"$geoip_city" $http_x_forwarded_for '
    '$upstream_status $upstream_response_time '
    '"$http_referer" "$http_user_agent"';
    ...
}

server {
    access_log /var/log/nginx/access.log geoproxy;
    ...
}
```
This log format, named `geoproxy`, includes various embedded variables to provide detailed information about each request.

**Discussion:**
The log module in NGINX allows you to configure log formats for different scenarios and log to numerous files. You can create different log formats for each context or a single, comprehensive format. These logs help in understanding traffic patterns, client usage, and troubleshooting issues.

#### 14.2 Configuring Error Logs

**Problem:**
You need to configure error logging to better understand issues with your NGINX server.

**Solution:**
Use the `error_log` directive to define the log path and log level:
```nginx
error_log /var/log/nginx/error.log warn;
```
The `error_log` directive requires a path, and the log level is optional. Available log levels are `debug`, `info`, `notice`, `warn`, `error`, `crit`, `alert`, and `emerg`.

**Discussion:**
The error log is the first place to look when configuration files are not working correctly. It is also useful for finding errors produced by application servers like FastCGI. The error log cannot be formatted but follows a specific format of date, log level, and message.

#### 14.3 Forwarding to Syslog

**Problem:**
You need to forward your logs to a Syslog listener to aggregate logs to a centralized service.

**Solution:**
Use the `access_log` and `error_log` directives to send logs to a Syslog listener:
```nginx
error_log syslog:server=10.0.1.42 debug;
access_log syslog:server=10.0.1.42,tag=nginx,severity=info geoproxy;
```
The `syslog` parameter includes options such as `server`, `facility`, `severity`, `tag`, and `nohostname`.

**Discussion:**
Syslog is a standard protocol for sending and collecting log messages. Sending logs to a centralized location helps in debugging, especially when you have multiple instances running on different hosts. A common log aggregation stack is the ELK Stack (ElasticSearch, Logstash, and Kibana).

#### 14.4 Request Tracing

**Problem:**
You need to correlate NGINX logs with application logs to have an end-to-end understanding of a request.

**Solution:**
Use the request identifying variable and pass it to your application to log as well:
```nginx
log_format trace '$remote_addr - $remote_user [$time_local]';
```
This format can be used to track and correlate requests across different systems.