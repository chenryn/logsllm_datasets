# 《Chrome V8原理讲解》第十二篇 JSFunction源码分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 摘要
编译Javascript源码得到的字节码流（Bytecode
Array）不能直接执行，绑定了入口（Entry）和上下文（Context）的字节码流才能被解释器（Ignition）执行，绑定了“入口+上下文”的字码流称为JSFunction，JSFunction是Ignition可以执行的实例。读懂JSFunction，可以深入了解Igntion的工作原理，更有助于在脑海中、在演草纸上擘画出字节码的解释（interpreter）过程。本文以SharedFunction（字节码流的表示方法）为输入，讲解JSFuncition源码和重要功能函数，分析JSFunction创建（new）、绑定入口和上下文的过程（章节2）；最后，分析JSFunction内存布局，讲解读/写（getter/setter）方法（章节3）。
## 2 JSFunction分析
一段C语言程序要经过编译（Compilation）、汇编（Assembly）和链接（Linking）之后才能执行。不太严谨但很形象的类比：字节码流类似汇编之后的结果（V8称之为SharedFunction），JSFunction类似链接之后的程序，所以说JSFunction是可以执行的实例。下面来看JSFunction源码：
    1.  class JSFunction : public JSObject {
    2.    public:
    3.     DECL_ACCESSORS(prototype_or_initial_map, HeapObject)
    4.     DECL_ACCESSORS(shared, SharedFunctionInfo)
    5.     static const int kLengthDescriptorIndex = 0;
    6.     static const int kNameDescriptorIndex = 1;
    7.     static const int kMaybeHomeObjectDescriptorIndex = 2;
    8.     inline Context context();
    9.     inline bool has_context() const;
    10.    inline void set_context(HeapObject context);
    11.    inline JSGlobalProxy global_proxy();
    12.    inline NativeContext native_context();
    13.    inline int length();
    14.    static Handle GetName(Isolate* isolate, Handle function);
    15.    static Handle GetFunctionRealm(Handle function);
    16.    inline Code code() const;
    17.    inline void set_code(Code code);
    18.    inline void set_code_no_write_barrier(Code code);
    19.    inline AbstractCode abstract_code();
    20.    inline bool IsInterpreted();
    21.    inline bool ChecksOptimizationMarker();
    22.    inline bool IsOptimized();
    23.    inline bool HasOptimizedCode();
    24.    inline bool HasOptimizationMarker();
    25.    void MarkForOptimization(ConcurrencyMode mode);
    26.    inline bool IsMarkedForOptimization();
    27.    inline bool IsMarkedForConcurrentOptimization();
    28.    inline bool IsInOptimizationQueue();
    29.    inline void ClearOptimizedCodeSlot(const char* reason);
    30.    inline void SetOptimizationMarker(OptimizationMarker marker);
    31.    inline void ClearOptimizationMarker();
    32.    int ComputeInstanceSizeWithMinSlack(Isolate* isolate);
    33.    inline void CompleteInobjectSlackTrackingIfActive();
    34.    DECL_ACCESSORS(raw_feedback_cell, FeedbackCell)
    35.    inline FeedbackVector feedback_vector() const;
    36.    inline bool has_feedback_vector() const;
    37.    V8_EXPORT_PRIVATE static void EnsureFeedbackVector(
    38.        Handle function);
    39.    inline bool has_closure_feedback_cell_array() const;
    40.    inline ClosureFeedbackCellArray closure_feedback_cell_array() const;
    41.    static void EnsureClosureFeedbackCellArray(Handle function);
    42.    static void InitializeFeedbackCell(Handle function);
    43.    void ClearTypeFeedbackInfo();
    44.    inline bool NeedsResetDueToFlushedBytecode();
    45.    inline void ResetIfBytecodeFlushed();
    46.    DECL_GETTER(has_prototype_slot, bool)
    47.    DECL_GETTER(initial_map, Map)
    48.    static void SetInitialMap(Handle function, Handle map,
    49.                              Handle prototype);
    50.    DECL_GETTER(has_initial_map, bool)
    51.    V8_EXPORT_PRIVATE static void EnsureHasInitialMap(
    52.        Handle function);
    53.    static V8_WARN_UNUSED_RESULT MaybeHandle GetDerivedMap(
    54.        Isolate* isolate, Handle constructor,
    55.        Handle new_target);
    56.    DECL_GETTER(has_prototype, bool)
    57.    DECL_GETTER(has_instance_prototype, bool)
    58.    DECL_GETTER(prototype, Object)
    59.    DECL_GETTER(instance_prototype, HeapObject)
    60.    DECL_GETTER(has_prototype_property, bool)
    61.    DECL_GETTER(PrototypeRequiresRuntimeLookup, bool)
    62.    static void SetPrototype(Handle function, Handle value);
    63.    inline bool is_compiled() const;
    64.    static int GetHeaderSize(bool function_has_prototype_slot) {
    65.      return function_has_prototype_slot ? JSFunction::kSizeWithPrototype
    66.                                         : JSFunction::kSizeWithoutPrototype;
    67.    }
    68.    void PrintName(FILE* out = stdout);
    69.    DECL_CAST(JSFunction)
    70.    static V8_WARN_UNUSED_RESULT int CalculateExpectedNofProperties(
    71.        Isolate* isolate, Handle function);
    72.    static void CalculateInstanceSizeHelper(InstanceType instance_type,
    73.                                            bool has_prototype_slot,
    74.                                            int requested_embedder_fields,
    75.                                            int requested_in_object_properties,
    76.                                            int* instance_size,
    77.                                            int* in_object_properties);
    78.    DECL_PRINTER(JSFunction)
    79.    DECL_VERIFIER(JSFunction)
    80.    static Handle GetName(Handle function);
    81.    static V8_WARN_UNUSED_RESULT bool SetName(Handle function,
    82.                                              Handle name,
    83.                                              Handle prefix);
    84.    static Handle GetDebugName(Handle function);
    85.    static Handle ToString(Handle function);
    86.  //
    87.    DEFINE_FIELD_OFFSET_CONSTANTS(JSObject::kHeaderSize,
    88.                                  TORQUE_GENERATED_JSFUNCTION_FIELDS)
    89.    static constexpr int kSizeWithoutPrototype = kPrototypeOrInitialMapOffset;
    90.    static constexpr int kSizeWithPrototype = kSize;
    91.    OBJECT_CONSTRUCTORS(JSFunction, JSObject);
    92.  };
代码18~45行是关于优化及反优化的功能，这些优化机制用于热点统计，反馈给TurboFan用于优化编译；46~68行定义了`GETTER`方法。5~7行定义了几个重要的数据索引（index）；10，11，12行代码绑定上下文和全局Reciver；17行代码绑定入口的Builtin功能（InterpreterEntryTrampoline），87行是JSFunction的内存布局，下面跟随new
JSFunction过程逐步分析:  
 **（1）** 获得SharedFunction
    1.  void InstallBytecodeArray(Handle bytecode_array,
    2.                            Handle shared_info,
    3.                            ParseInfo* parse_info, Isolate* isolate) {
    4.    if (!FLAG_interpreted_frames_native_stack) {
    5.      shared_info->set_bytecode_array(*bytecode_array);
    6.      return;
    7.    }
    8.    Handle code = isolate->factory()->CopyCode(Handle::cast(
    9.        isolate->factory()->interpreter_entry_trampoline_for_profiling()));
    10.    Handle interpreter_data =
    11.        Handle::cast(isolate->factory()->NewStruct(
    12.            INTERPRETER_DATA_TYPE, AllocationType::kOld));
    13.    interpreter_data->set_bytecode_array(*bytecode_array);
    14.    interpreter_data->set_interpreter_trampoline(*code);
    15.    shared_info->set_interpreter_data(*interpreter_data);
    16.    Handle script = parse_info->script();
    17.    Handle abstract_code = Handle::cast(code);
    18.    int line_num =
    19.        Script::GetLineNumber(script, shared_info->StartPosition()) + 1;
    20.    int column_num =
    21.        Script::GetColumnNumber(script, shared_info->StartPosition()) + 1;
    22.    String script_name = script->name().IsString()
    23.                             ? String::cast(script->name())
    24.                             : ReadOnlyRoots(isolate).empty_string();
    25.    CodeEventListener::LogEventsAndTags log_tag = Logger::ToNativeByScript(
    26.        CodeEventListener::INTERPRETED_FUNCTION_TAG, *script);
    27.    PROFILE(isolate, CodeCreateEvent(log_tag, *abstract_code, *shared_info,
    28.                                     script_name, line_num, column_num));
    29.  }
`InstallBytecodeArray()`最重要的作用是把编译生成的`bytecode_array`安装到shared_info中，代码第5行。
**注：** 我的编译选项：FLAG_interpreted_frames_native_stack为`false`。  
 **（2）** 生成JSFunction
    1.  Local UnboundScript::BindToCurrentContext() {
    2.    auto function_info =
    3.        i::Handle::cast(Utils::OpenHandle(this));