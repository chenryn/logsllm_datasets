        else if ((kc != null ||
                  (kc = comparableClassFor(k)) != null) &&
                 (dir = compareComparables(kc, k, pk)) != 0)
            p = (dir  t = root;
    // 根节点为空，直接将插入节点作为根节点
    if (t == null) {
        compare(key, key); // type (and possibly null) check
        root = new Entry<>(key, value, null);
        size = 1;
        modCount++;
        return null;
    }
    int cmp;
    Entry parent;
    // split comparator and comparable paths
    Comparator cpr = comparator;
    if (cpr != null) {
        // 遍历找到插入节点应该插入的位置，parent保存了该位置的父节点
        do {
            parent = t;
            cmp = cpr.compare(key, t.key);
            if (cmp  0)
                t = t.right;
            else
                return t.setValue(value);
        } while (t != null);
    }
    else {
        // 实现了Comparable的情况下的比较
        if (key == null)
            throw new NullPointerException();
        @SuppressWarnings("unchecked")
            Comparable k = (Comparable) key;
        do {
            parent = t;
            cmp = k.compareTo(t.key);
            if (cmp  0)
                t = t.right;
            else
                return t.setValue(value);
        } while (t != null);
    }
    Entry e = new Entry<>(key, value, parent);
    if (cmp  newNode(int hash, K key, V value, Node e) {
    LinkedHashMap.Entry p =
        new LinkedHashMap.Entry<>(hash, key, value, e);
    linkNodeLast(p);
    return p;
}
private void linkNodeLast(LinkedHashMap.Entry p) {
    LinkedHashMap.Entry last = tail;
    tail = p;
    if (last == null)
        head = p;
    else {
        p.before = last;
        last.after = p;
    }
}
```
**按照插入顺序访问**
```java
// 跟链表的迭代器一样
final LinkedHashMap.Entry nextNode() {
    LinkedHashMap.Entry e = next;
    if (modCount != expectedModCount)
        throw new ConcurrentModificationException();
    if (e == null)
        throw new NoSuchElementException();
    current = e;
    next = e.after;
    return e;
}
```
**最少访问删除的实现**
在get之后，LinkedHashMap会对获取到的节点执行移到链表尾部的操作
```java
public V get(Object key) {
    Node e;
    if ((e = getNode(hash(key), key)) == null)
        return null;
    if (accessOrder)
        afterNodeAccess(e);
    return e.value;
}
```
```java
// 这段代码是负责把e移到末尾
// 这样就队头的元素就是访问最少的元素
void afterNodeAccess(Node e) { // move node to last
    LinkedHashMap.Entry last;
    if (accessOrder && (last = tail) != e) {
        LinkedHashMap.Entry p =
            (LinkedHashMap.Entry)e, b = p.before, a = p.after;
        p.after = null;
        if (b == null)
            head = a;
        else
            b.after = a;
        if (a != null)
            a.before = b;
        else
            last = b;
        if (last == null)
            head = p;
        else {
            p.before = last;
            last.after = p;
        }
        tail = p;
        ++modCount;
    }
}
```
## 问题
### HashMap 底层数据结构
底层采用了数组、链表、红黑树来实现的
数组的主要作用是查找，时间复杂度为O(1)，默认大小16，元素存放的下标是根据key的hashCode计算出来的
元素存放在Node里面，当key的hashCode一样时，但是key并不相等，Node就会串起来，形成链表，链表的时间复杂度是O(N)
当链表长度大于等于8且数组长度大于等于64时，链表就会转成红黑树，红黑树的时间复杂度为O(lg n)
### HashMap、TreeMap、LinkedHashMap 三者有啥相同点，有啥不同点
相同点：
- 都使用了红黑树
- hash算法相同
- 都非线程安全
不同点：
- HashMap数据结构以数组为主，查询速度快，TreeMap利用了红黑树左小右大的特点，可以实现对key的排序，LinkedHashMap则增加了链表的结构，实现了顺序访问以及最少访问删除
### hash算法
```java
n=array.length;
tab[i = (n - 1) & hash]
```
取模算法的好处，就是可以保证计算出来的索引下标值可以均匀的分布在数组的各个索引位置上
当 b 是 2 的幂次方时，a % b = a &（b-1）
### 解决hash冲突的办法
- 好的hash算法
- 自动扩容
- 冲突后使用链表与红黑树
### HashMap 是如何扩容的
- put时，发现数组为空，初始化扩容，默认大小16
- put成功后，发现数组大于现在数组的容量*0.75，会进行扩容，每次扩容为原来数组大小的两倍
- 扩容之后，需要对数组中的Node节点重新计算hash值，重新放置
### 对象作为 Map 的 key 时，需要注意的点
一定需要覆写 equals 和 hashCode 方法，如果是 TreeMap 的话，需要实现 Comparable 接口