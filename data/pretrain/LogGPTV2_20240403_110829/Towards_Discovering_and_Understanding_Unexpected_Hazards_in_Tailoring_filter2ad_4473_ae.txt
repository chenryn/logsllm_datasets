### Null-Protection Window Lengths for AVDs

For all tested Android Virtual Devices (AVDs), the null-protection window lengths vary significantly across different devices. Specifically, the Samsung Note II and Google Nexus IV (LG) exhibit the smallest window lengths, while the Nexus S (Samsung) has the largest, ranging from approximately 9.2 to 16.8 seconds. It is important to note that these results represent theoretical lower bounds for the null-protection window. During testing, our Dynamic Tester continuously sends launch events via the adb tool, ensuring that the AVD is automatically relaunched immediately after an update.

### Comparison with Chen et al. [27]

Our approach shares similarities with the work of Chen et al. [27] in that both methods check the reachability of certain temporal logic in the code. However, our model checker is specifically designed to target the Dalvik bytecode of the PackageManager Service (PMS) in Android, focusing on the vulnerable temporal program logic associated with the engineUpdate process.

### Preventive Design for AVD Relaunch

Given our ability to automate the AVD relaunch process, we propose a preventive design where the updated AVD code itself can trigger a relaunch immediately after the engineUpdate completes. This can be achieved by adding a receiver component in the AVD to listen for the `PACKAGE_REPLACED` broadcast intent, which signals the end of the engineUpdate. Upon receiving this intent, the registered receiver in the updated AVD engine can automatically relaunch the main monitoring process using the `startActivity()` API. 

While this mitigation does not eliminate the fundamental issue of the old AVD process being killed and the creation of a vulnerable period, it can reduce the null-protection window length to its theoretical lower bound. None of the 23 tested AVDs that registered the `PACKAGE_REPLACED` action actually implemented this preventive design for their own updates; instead, they used the registered receiver to start a service for malware detection. We have reported our findings to all AVD vendors and proposed this short-term mitigation. The vendors have confirmed the hazard and plan to include similar patches in their next release. For a complete solution, the PMS design needs to be enhanced. This hazard is also relevant to other apps requiring continuous monitoring, such as Mobile Device Manager (MDM) and Intrusion Prevention Systems (IPS). We have reported this to Google, who have confirmed our findings and are working with us on possible feature enhancements.

### Model Checking the Vulnerable Logic

To automate the verification of the vulnerable temporal logic in the AVD engine update procedure, we use model checking techniques, which have been widely applied for system bug and vulnerability examination, as well as temporal property checking in both mobile and PC platforms. Our model checker for the Android platform follows a similar approach.

#### Model Checking Framework

1. **Input**: Android factory images from multiple vendors.
2. **Preprocessing**: Extract the relevant `.odex` file of the PMS components from the `system.img`.
3. **Decompile**: Convert the `.odex` file into Dalvik bytecode and generate Control Flow Graphs (CFGs).
4. **Identify Traces**: From the CFGs, identify execution traces corresponding to the engineUpdate's temporal logic.
5. **Construct FSAs**: Build Finite State Automatons (FSAs) to describe the vulnerable program logic in the PMS. Each edge in the FSA represents a critical method invocation.
6. **Model Checking**: Perform a depth-first search along the CFGs, matching method invocations to FSA edges. When a sequence of method invocations matches a sequence leading to the final state, a trace is printed for further verification.

We use the "liveness property" of model checking to verify if the vulnerable logic exists. If the newly constructed CFGs do not match the specified FSAs, we manually construct a new FSA. We only needed to create four FSAs to cover all PMS versions of Android OSes, as shown in Table 7.

### Systematic Verification of Google Android Factory Images

We systematically checked all Google Android factory images from v1.5_r4 (April 2009) to v4.4.4_r1 (June 2014), confirming that the same vulnerable logic in the PMS appears in all versions. We also analyzed vendor-customized stock images from HTC, Samsung, Sony, and LG, finding the same vulnerable PMS logic, likely due to the reuse of core design logic from the Google AOSP codebase.

### Mitigations

1. **Fine-Grained Mandatory Access Control**: Use SEAndroid to restrict access to sensitive information channels, assigning new subject domains and allow rules to authorized apps/services.
2. **Mitigation for Heavy Sweeping MalScan**: Provide generalized usage statistics for mission-critical apps by normalizing or delaying the reporting of system resource usage.

These mitigations aim to address the discovered vulnerabilities and enhance the overall security of the Android system.