tion. Based on a shared secret between the user and the service,
the tool calculates a cryptographic hash over the shared secret
and the current time. A part of this hash is then used as the
one-time password for the authentication. An attacker who can
extract the shared secret can generate a one-time password at
any time. Hence, we use ConTExT-light to protect this shared
secret. We do not protect the one-time password, as this is just
a temporary second factor that is valid for at most 30 s.
Adding ConTExT-light to oathtool requires only 27
lines of code changes in 7 ﬁles. The main changes ensure that
the buffers storing the shared secret, as well as the buffers
used for the hash calculations, are marked as uncachable.
This is achieved by allocating them on the non-cachable
heap using malloc_nospec instead of on the stack or
normal heap. We veriﬁed the functional correctness of the
changes by comparing the generated one-time passwords with
the Google Authenticator application. As new passwords are
only generated every 30 seconds, any performance overhead
introduced by ConTExT-light is not relevant.
Password Manager. LastPass is a tool that can be used to
generate and securely store passwords and other sensitive data.
The command-line client, LastPass-cli, connects to a remote
server with user-provided credentials and retrieves or stores
the password and additional information on the remote server,
e.g., notes or attachments. To access the data, a user requires
the master password associated with an account for the ﬁrst
access. This will store an encrypted local version of the data
from the server on the user’s disk. The second access will use
a key stored by an agent to decrypt the local version of the
data. Hence, we protect the password as well as the decryption
key as all other transmitted data is short-lived.
We enhanced LastPass-cli by adding ConTExT-light, which
requires changing 19 lines of code. These changes ensure
that buffers storing the master password, as well as the
decryption key, are marked as uncacheable. We tested the
application repeatedly to ensure functional correctness. To
evaluate the performance slowdown of ConTExT-light, we
repeatedly queried a password. In the experiment, we observed
a slowdown from 0.162 s to 0.248 s for a slowdown of 53 %
with ConTExT-light applied.
NGINX. NGINX is a web server that can also be used for
a variety of other tasks, e.g., as a load balancer, mail proxy,
and HTTP cache. Similar to other web servers, NGINX allows
for secure connections to a client via HTTPS. To authenticate
that the client is communicating with the server, the client
veriﬁes the server identity by checking its signature generated
using the certiﬁcate key, i.e., the server’s private key, with the
certiﬁcate, i.e., the server’s public key. Hence, when extracting
the certiﬁcate key, the attacker can impersonate the server.
We modiﬁed NGINX to protect the certiﬁcate key using
ConTExT-light, which requires changing 11 lines of code. We
do not protect individual sessions as the session keys are short-
lived and, hence, very hard to extract using a Spectre attack.
To determine the effect of ConTExT-light on the performance
of NGINX, we conﬁgured a local server with a generated
certiﬁcate and used the siege load testing and bechmarking
utility.6 With siege, we simulate 255 clients for a duration of
300 s. With this test, we observe a decrease from 63 695 to
59 071 transactions, a decrease of 7.3 %. The average response
time per transaction increased from 0.62 s to 0.65 s.
Protected Data and Overhead Comparison. In all evaluated
applications, the amount of protected data is relatively small.
Sensitive data with the highest value for an attacker is mostly
either a password, passphrase, or key. Leaking a password
usually gives an attacker full access to the application or the
rest of the data. Hence, this is the preferable target for a Spectre
attack. Especially given the leakage and error rate of Spectre
attacks, it is only feasible to leak small amounts of data.
In an artiﬁcial proof-of-concept, Spectre-PHT achieved up to
10 kB/s, whereas the fastest real-world attack only achieves
41 B/s with an error rate of 2 % [50]. Similarly, Spectre-BTB
achieves 1809 B/s with an error rate of 1.7 % [50]. While these
leakage rates are sufﬁcient to extract a password or private key,
it is not feasible to leak larger amounts of data, such as emails
or databases. Moreover, Spectre attacks also require a speciﬁc
knowledge of where the data is located in memory [50]. Hence,
locating the targeted data might also require leaking other data
ﬁrst, e.g., pointers, reducing the effective leakage rate further.
State-of-the-art Spectre mitigations always have a perfor-
mance impact on the software, regardless whether secrets are
present: For instance serialization barriers, the recommended
mitigation strategy for Spectre-PHT attacks, cause a high per-
formance overhead, i.e., 62–74.8 % [16]. Additional overheads
are caused by Spectre-BTB mitigations, e.g., retpoline (5–
10 %), or alternatively STIBP (30–50 %) [53] and IBRS (20–
30 %) [87], as well as mitigations for other Spectre variants.
ConTExT reduces the overheads for non-annotated soft-
ware to a minimum (cf. Table II). The performance overheads
for annotated software when heavily using secrets is similar
to the state-of-the-art Spectre mitigations. However, this is
often just for a small period of time, e.g., for authentication.
Hence, ConTExT is a viable alternative as its overhead is
inherently lower than the ones we observe with ConTExT-light,
and ConTExT-light already is in the range of state-of-the-art
mitigation approaches. ConTExT improves the performance of
ConTExT-light by regular caching and hiding the latency of
register loads. Hence, the performance will be higher.
6https://github.com/JoeDog/siege
VI. DISCUSSION
ConTExT is not a defense for commodity systems. Con-
TExT requires changes across all layers. Yet, compared to
all other defenses, it is the ﬁrst proposal to achieve com-
plete protection [67], [14]. Concurrent to our work, NVIDIA
patented a similar idea [10]. However, they focus solely on
the protection of memory locations, i.e., not speculating on
memory that might contain secrets. As NVIDIA only provides
a patent and no whitepaper or scientiﬁc paper, it does not
discuss any changes required to the software level, e.g., the
operating system, compiler, or applications. Hence, there is
also no evaluation of the expected overheads. In contrast
to their work, we do provide protection on a register-level,
allowing speculatively cache and register ﬁlls. This clearly has
a lower performance impact. However, the various patents in
this area [45], [56], [10] give us additional conﬁdence in the
practicality of our approach.
Naturally, ConTExT is particularly interesting in cases
where isolation is not clear, e.g., to protect a sandbox envi-
ronment from the sandboxed code. There are different ways
to select what are secrets to protect. One extreme would be to
generally mark all data secret. As this is not practical, related
works either restrict it to an architecturally already deﬁned
group, or let the user annotate secrets. Taram et al. [85] deﬁned
all userspace memory and user input as secret. However, this
can be very expensive, and consequently, Yu et al. [101] pro-
posed a less expensive annotation-based protection mechanism.
While this is an important discussion, it is orthogonal to this
work. In related work, Brahmakshatriya et al. [11] annotate
secrets and modify LLVM to store the annotated and derived
secrets in a separate memory area. This approach is similar
to our approach. However, they do not try to mitigate Spectre
attacks, but memory leaks caused by traditional vulnerabilities.
Similarly, Carr and Payer [15] use data annotations to split
memory into sensitive and non-sensitive memory ranges based
on the data type. These papers show that annotating secrets is
a feasible approach to protect against memory leaks. Our work
shows that if we can mark secrets, we can provide complete
protection against Spectre attacks. From a problem which is,
according to Mcilroy et al. [65], currently not solvable in
software, ConTExT shifts the landscape such that the problem
is not easy to solve, but solvable in software. ConTExT is
the foundation to research future proposals investigating how
annotations can be automated, replaced, or simpliﬁed. Having
a backward-compatible way to annotate secrets and propagate
this information through the microarchitecture can be an
alternative to something like a CHERI-based processor [95].
Inadvertent Untainting. In line with countermeasures against
side-channel attacks,
the countermeasure does not protect
secrets if a developer actively exposes the secret, e.g., by
writing it to memory not marked as non-transient. Even with
ConTExT, it is the developer’s responsibility to take care of
secrets, i.e., when temporarily storing them somewhere.
ConTExT only ensures that the compiler does not im-
plicitly copy annotated secrets to insecure memory locations,
e.g., when temporarily storing register values on the stack to
free a register. The developer is assumed to have the domain
knowledge on whether a particular variable is a secret. Hence,
we expect the developer to correctly decide whether data can
be moved to a normal memory location. If sensitive data has to
15
be copied to a different memory location, then the destination
has to be marked as non-transient as well. Moving sensitive
data only between registers is handled by the hardware taint
tracking. This does not complicate the workﬂow of a developer.
Currently, a developer has to decide for every branch whether
it can leak a value, and whether this value is a secret.
Secret Aliases. Pointer aliases to secret values marked as non-
transient are not a problem, as the pointer value itself (i.e., the
address) is not a secret. The check whether a memory area is
marked as non-transient is done at the page-table entry (which
might already be in the TLB). Pointer aliases still point to the
same physical location, i.e., the secret, and hence the same
page-table entry is used in the access. The CPU detects the
memory type upon this access and either stalls or continues,
independent of which pointer was used for the access. For
multiple mappings of the same memory location, i.e., shared
memory, all mappings must be marked non-transient unless
the programmer intends to keep one of them non-secret.
Dealing with Edge Cases. There are many elements in a
processor that generally could leak data such that a register
contains a secret. No matter where the data was leaked from—
the memory, the cache, the line ﬁll buffer, the load buffer, the
store buffer, or just another register—if the register is tainted,
ConTExT does not execute any operation that depends on the
value from that register. Hence, under the assumption that
the secret has to move through a register (or already be in a
register), the protection ConTExT provides is complete. Only
violating this assumption would allow bypassing ConTExT. To
the best of our knowledge, there is no mechanism on x86-64
that would allow performing an indexed array access without
loading the index into a register. This supports our assumption.
As ConTExT prevents the value from being passed on from
the tainted register, we do not have any edge cases around the
various microarchitectural elements.
Microcode. ConTExT likely cannot be implemented (efﬁ-
ciently) in microcode or microcode updates. The reason is that
the behavior in the critical path when forwarding a value from
a register to a dependent instruction has to be modiﬁed. To the
best of our knowledge, there is no microcode involved in this
part for performance reasons.
Virtualization. Our approach is oblivious to virtualization.
EPTs equally contain non-transient bits. Identical to the way
several other page table bits are combined (e.g., the non-
executable bit),
to non-
transient, the page is non-transient. Naturally, the extensions
we implemented on the operating system level would have to
be identically implemented on the hypervisor level. We leave
this implementation effort for future work.
Implementation of the Microarchitectural Changes. While
a microarchitectural implementation would be interesting, this
is not necessary to see the practicality of our work. We already
have the uncacheable memory mapping, which is marked in the
page table. Uncacheable memory is not used during speculative
execution, although if it is already in a cache, line ﬁll buffer,
load buffer, or store buffer, it might be leaked. Hence, there
is already a mechanism in current processors, which is very
similar to the one we propose. While uncacheable memory is
much slower than what we propose with ConTExT, it clearly
in the hierarchy is set
if any bit
shows that an implementation is possible and provides an
upper bound for the performance overhead.
VII. CONCLUSION
In this paper, we presented ConTExT, a technique to
effectively and efﬁciently prevent leakage of secrets during
transient execution. The basic idea of ConTExT is to transform
Spectre from a problem that cannot be solved purely in soft-
ware [65], to a problem that is not easy to solve, but solvable in
software. For this, ConTExT requires minimal modiﬁcations of
applications, compilers, operating systems, and hardware. We
implemented these in applications, compilers, and operating
systems, as well as in a processor simulator.
Mitigating all transient-execution attacks with a principled
approach of course costs performance. We provide an approx-
imative proof-of-concept for ConTExT which we use on com-
modity systems to obtain an upper bound for the performance
overhead. We argue why the actual performance overhead
for ConTExT can be expected to be substantially lower. As
seen in our security evaluation, ConTExT is the ﬁrst proposal
for a principled defense tackling the root cause of transient-
execution attacks. ConTExT has no performance overhead
for regular applications. Even with the over-approximation of
ConTExT-light, namely between 0 % and 338 % for security-
critical applications, it is still below the combined overhead of
recommended state-of-the-art mitigation strategies. The over-
head with ConTExT will be substantially lower for most real-
world workloads. Our work shows that transient execution can
be made secure while maintaining a high system performance.
ACKNOWLEDGMENTS
We thank our anonymous reviewers for their comments and
suggestions that helped improving the paper. The project was
supported by the European Research Council (ERC) under the
European Union’s Horizon 2020 research and innovation pro-
gramme (grant agreement No 681402). It was also supported
by the Austrian Research Promotion Agency (FFG) via the K-
project DeSSnet, which is funded in the context of COMET
- Competence Centers for Excellent Technologies by BMVIT,
BMWFW, Styria and Carinthia. This work has additionally
been supported by the Austrian Research Promotion Agency
(FFG) via the project ESPRESSO, which is funded by the
Province of Styria and the Business Promotion Agencies of
Styria and Carinthia. This work has also been supported by
the Austrian Research Promotion Agency (FFG) via the com-
petence center Know-Center (grant number 844595), which
is funded in the context of COMET – Competence Centers
for Excellent Technologies by BMVIT, BMWFW, and Styria.
Additional funding was provided by generous gifts from ARM
and Intel. Any opinions, ﬁndings, and conclusions or recom-
mendations expressed in this paper are those of the authors
and do not necessarily reﬂect the views of the funding parties.
REFERENCES
[1] AMD, Software Optimization Guide for AMD Family 17h Processors,
Jun. 2017.
[2] AMD, “AMD64 Technology: Speculative Store Bypass Disable,”
2018, revision 5.21.18.
[3] AMD, “Software Techniques for Managing Speculation on AMD
Processors,” 2018, revison 7.10.18.
16
[4] AMD, “Software techniques for managing speculation on AMD pro-
cessors,” 2018.
[5] ARM Limited, “Vulnerability of Speculative Processors to Cache
Timing Side-Channel Mechanism,” 2018.
[6] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise
context, ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis
for android apps,” Acm Sigplan Notices, 2014.
[7] S. Bhattacharya, C. Maurice, S. Bhasin, and D. Mukhopadhyay,
“Template attack on blinded scalar multiplication with asynchronous
perf-ioctl calls,” Cryptology ePrint Archive, Report 2017/968, 2017.
[8] A. Bhattacharyya, A. Sandulescu, M. Neugschwandtner, A. Sorniotti,
B. Falsaﬁ, M. Payer, and A. Kurmus, “SMoTherSpectre: exploiting
speculative execution through port contention,” in CCS, 2019.
[9] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu,