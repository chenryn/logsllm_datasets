Security model that is capable of addressing the problems
of conﬂict-of-interest in the decentralized workﬂow environ-
ment. We call this as DW Chinese Wall Security Policy.
Note that the conventional Chinese Wall security model ad-
dresses the issue of a company information leaking to an-
other company, which is in the same conﬂict of interest
group.
In our model, the sensitive information is not in-
herent to a company (task agent), but rather the workﬂow
deﬁnition itself. First, the sensitive dependency information
could leak to a task agent, thus the output of a task can be
manipulated. Second, the output or “response” of a task
can be sensitive and can leak to another task. In the fol-
lowing, we will ﬁrst deﬁne objects, subjects, read and write
operations by drawing an analogy with those of the original
Chinese wall security model. Based on these deﬁnitions, we
then deﬁne our security model.
Objects: Objects include, the data objects in a company
data set, and the dependencies in a workﬂow. We refer
the latter as dependency objects. We categorize the data
objects in the workﬂow into two: sensitive and non-sensitive.
Sensitive data objects are those that change the execution
ﬂow of the workﬂow. In other words, these are the objects
involved in the dependencies. We are concerned about only
sensitive objects, so from now on, data objects refer to only
sensitive objects.
• Object COI Property: A distinguishing property that
we impose here is that, if x is a data object involved in
a dependency object o, then o belongs to the company
of x as well as to all companies in the same COI class.
bf∨price>400
−→
t3 in example 1
Let us consider dependency t2
to illustrate sensitive and non-sensitive objects. Since the
execution ﬂow depends on the value of the price written by
A(t2), price is a sensitive object. On the other hand, con-
sider the workﬂow which simply gathers the price from each
airline and reports them back to the user where the user de-
cides the airline of his choice. In such a case, although price
is one of the output parameters of t2, since there is no depen-
dency deﬁned over price, it cannot inﬂuence the execution
ﬂow. Therefore, in this case, price is a non-sensitive object.
There are two sensitive dependency objects in the workﬂow
in example 1, which is price > $400 and price ≤ $400.
Subjects: A subject is the task execution agent that ex-
ecutes a task in a workﬂow. A subject S, by deﬁnition
belongs to one company and therefore belongs to that COI
class, which is denoted as COI(S) (unlike the conventional
Chinese wall policy in which a subject’s association with a
company is determined by his ﬁrst access.) A subject is al-
lowed to access (both read and write) any data object from
its company dataset.
Read and Write operations: A read operation includes
reading data and dependency objects, and evaluating the
dependency expressions. A write operation includes writing
to data objects, and generating self-describing workﬂows.
Definition 8. [DW Chinese Wall Security Policy]
1. [Evaluation/Read Rule]: A subject S can read an
object O,
if O belongs to its own company data set,
or if O is a dependency object that does not belong to
another company in COI(S).
2. [Write Rule]: A subject S can write an object O,
if S can read O
(bf )∨(price>400)
−→
The read rule says that a subject is allowed to read its
own company data objects. A subject is also allowed to
read any dependency object that does not belong to a com-
pany which is in the same COI as that of the subject’s com-
pany. Considering once again example 1, the dependency
t2
t3 belongs to both A(t2) and A(t3), ac-
cording to our object COI property. Hence both A(t2) and
A(t3) are not allowed to read this, thus not allowed to eval-
uate it. The write rule says that a subject is allowed to
write any object, both data and the dependency type, if it
is allowed to read. Note that writing an object includes par-
titioning the workﬂow to generate self-describing workﬂows.
6. DECENTRALIZED CONTROL WITH
THE DW CHINESE WALL POLICY
In this section, we provide the partitioning and WFMS
stub algorithms that enforce the DW Chinese wall security
policy.
6.1 Restrictive Partitioning
According to the read and write rules of this policy, a
task execution agent cannot read, evaluate preconditions,
or write to any sensitive object that belongs to a diﬀerent
company within its own COI class. In other words, it not
only is not allowed to view, but also not allowed to construct
a self-describing workﬂow that involves sensitive objects or
tasks that belong to the same COI class. To accomplish
this, we restrict the partitions using the following rule.
Definition 9. [Restrictive Partitions Rule] Let ti be
a task in W. Let Pi be a partition sent to A(ti). A restrictive
partition Pj of ti is such that there exist no sensitive objects
belonging to COI(A(ti)).
Definition 10. [Critical Partition] A partition Pi is
said to be a critical partition if it does not comply with the
restrictive partition rule.
53A trivial solution to obtain restrictive partitions is as fol-
lows. When a workﬂow is submitted to the central WFMS,
it partitions the entire workﬂow so that no two tasks that
belong to the same COI class exist in a partition. However,
the central WFMS stub has to ensure the execution of each
partition as a separate workﬂow. Although this solution is
simple and straight forward, this requires relying heavily on
the central WFMS for the execution of the entire workﬂow.
In the worst case, it eﬀectively results in centralized control.
The challenge, therefore, is to decompose a workﬂow into
partitions that satisfy the restrictive partition rule (1) with-
out having to introduce any additional centralized control,
and (2) without making the intermediate task execution
agents take over part of the control.
In the following, we propose a restrictive partition algo-
rithm that meets these two challenges. We divide P repr
ti
as P relocal
comprises of the
predicate involving non-sensitive objects, and P reremote
com-
ti
prises of the predicate involving sensitive objects.
, where P relocal
and P reremote
ti
ti
ti
Algorithm 2. [Restrictive Partition]
Given Pi,
Pj = Partition(Pi)
for each critical partition Pj
Given tm such that tj
Case 1: tj−→tm is sensitive for both A(tj) and A(tm)
/*COI(A(tj ))=COI(A(tm)) and d belongs to both */
i at A(ti) such that C(ti)=∅
d−→ tm in Pj
add a dummy task td
split Pj as follows:
signal−→ td
i
Pj : tj
Pi : remove the dependency (tj
add dependency td
i
tj =P relocal
d−→ tm),
(cid:1)−→ tm such that d
(cid:2)
P repr
ti =P reremote
Output(tj) = Outstate(tj)∪Output(tj)
Case 2: tj−→tm is sensitive only for A(tj)
/*A(tm) evaluates the sensitive part of the dependency*/
and P repr
= d
tj
tj
d
split Pj as follows:
signal−→ tm
Pj : tj
Pm : remove tj−→tm from Pj
P repr
tm=P reremote
Output(tj) = Outstate(tj)∪Output(tj)
tj =P relocal
and P repr
tj
tj
Case 3: d is not sensitive to either A(tj) or A(tm)
signal−→ tm
split Pj into
Pj : tj
Pm : remove tj−→tm from Pj
and P repr
P repr
tm=P relocal
Output(tj) = Outstate(tj)∪Output(tj)
tj =P reremote
tj
tj
In the following, we explain the three diﬀerent cases of
restrictive partitioning: Case 1: when the sensitive infor-
mation pertains to both task agents (A(tj) and A(tm)), the
sensitive dependency information is split and routed through
a neutral task agent (A(ti)), thus avoiding the information
leakage to both A(tj) and A(tm); Case 2: when the sensi-
tive information is only to A(tj), then the sensitive part of
the dependency will be evaluated at A(tm), leaving A(tj)
with non-sensitive information, thus preventing A(tj) from
manipulation; Case 3: when the sensitive information per-
tains to A(tm) only or somewhere along the path there exists
sensitive information to A(tj), then the algorithm splits the
rest of the workﬂow into two to prevent A(tj) to get hold
P24 Before Split
P23
t2
(Bf) OR price>$400
t3
(A)
Bs
Bf
t4
t5
Bs
Bs
Bf
t6
t7
p24
t2
price$400
t3 and t2
price $400) should be evaluated in the
dummy task (td
1), so that reading the sensitive information
by the same COI class, A(t2) as well as A(t3), is prohibited.
A(t1) contains enough information to evaluate the precondi-
tion price < $400, and if the condition evaluates to true, it
(cid:2)(cid:2)
24 as (t4, t6, t7), and sends the workﬂow
splits the partition P