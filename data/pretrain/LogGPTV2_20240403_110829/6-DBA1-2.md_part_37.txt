-\> declare x int;
-\> declare y int;
-\> declare name char(10);
-\> set x=9;
-\> set y=11;
-\> set name=\"bob\";
-\> select x,y,name;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call p2;
+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| x \| y \| name \|
+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
\| 9 \| 11 \| bob \|
+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter //
create procedure p4()
-\> begin
-\> declare x int;
-\> select count(username) into x from db9.user; #查询结果复制给变量
-\> select x;
-\> end
-\> //
mysql\> delimiter ;
### 算数运算
![](media/image44.png){width="5.766666666666667in"
height="2.685416666666667in"}
mysql\> set \@z=1+2;select \@z;
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@x=1; set \@y=2; set \@z=@x\*@y;select \@z;
Query OK, 0 rows affected (0.01 sec)
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 2 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@x=1; set \@y=2; set \@z=@x+@y;select \@z;
Query OK, 0 rows affected (0.01 sec)
Query OK, 0 rows affected (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> set \@var5=10 DIV 3; select \@var5; #整除运算,并输出@var5
Query OK, 0 rows affected (0.00 sec)
+\-\-\-\-\-\--+
\| \@var5 \|
+\-\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\-\--+
1 row in set (0.00 sec)
## 存储过程参数类型
in 输入类型
out 输出类型 该值可在存储过程内部被改变,并可返回
inout 输入/输出类型 调用是指定,并且可被改变和返回
调用参数时,名称前不需要加@
多个参数之间用逗号分隔
### in 输入类型:
mysql\> create procedure sa1( in username char(10)) #定义输入参数
-\> begin
-\> select username; #输出定义的参数
-\> select \* from user where name=username; #使用定义的参数
-\> end
-\> //
Query OK, 0 rows affected (0.01 sec)
mysql\>call sa1("bob") #调用存储过程时,输入参数
##调用后相当于执行:select \* from user where name="bob";
如果定义好输入参数,调用存储过程时未输入参数"bob",会报错
### out 输出类型
该值可在存储过程内部被改变,并可返回
mysql\>delimiter //
mysql\> create procedure sa2(out x int) #定义输入参数
-\> begin
-\> select count(username) into x from db9.user wher shell!="/bin/bash";
-\> select x;
-\> end
-\> //
Query OK, 0 rows affected (0.01 sec)
mysql\> call sa2();
ERROR 1318 (42000): Incorrect number of arguments for PROCEDURE db9.sa2;
expected 1, got 0
mysql\> call sa2(@z); #调用sa2同时将x 的值赋值给变量@z
+\-\-\-\-\--+
\| x \|
+\-\-\-\-\--+
\| 39 \|
+\-\-\-\-\--+
1 row in set (0.01 sec)
Query OK, 0 rows affected (0.01 sec)
mysql\> select \@z; #输出
+\-\-\-\-\--+
\| \@z \|
+\-\-\-\-\--+
\| 39 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
### inout 输入/输出类型 
调用时指定,并且可被改变和返回
mysql\> delimiter //
mysql\> create procedure sa3(inout x int)
-\> begin
-\> select \* from db9.user where id\ select count(id) into x from db9.user;
-\> select x;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call sa3();
ERROR 1318 (42000): Incorrect number of arguments for PROCEDURE db9.sa3;
expected 1, got 0 #需要赋值1个,已复制0个
mysql\> call sa3(9);
ERROR 1414 (42000): OUT or INOUT argument 1 for routine db9.sa3 is not a
variable or NEW pseudo-variable in BEFORE trigger
**第一种:**
mysql\> call sa3(@i); #赋值一个空变量
Empty set (0.00 sec)
+\-\-\-\-\--+
\| x \|
+\-\-\-\-\--+
\| 41 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
**第二种:**
mysql\> set \@k=4; #先赋值给k
Query OK, 0 rows affected (0.00 sec)
mysql\> call sa3(@k); #调用sa3同时把k的值4输入给x,处理结果赋值给k
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| id \| username \| password \| uid \| gid \| comment \| homedir \|
shell \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 1 \| root \| x \| 0 \| 0 \| root \| /root \| /bin/bash \|
\| 2 \| bin \| x \| 1 \| 1 \| bin \| /bin \| /sbin/nologin \|
\| 3 \| daemon \| x \| 2 \| 2 \| daemon \| /sbin \| /sbin/nologin \|
\| 4 \| adm \| x \| 3 \| 4 \| adm \| /var/adm \| /sbin/nologin \|
+\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.00 sec)
+\-\-\-\-\--+
\| x \|
+\-\-\-\-\--+
\| 41 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)
mysql\> select \@k; #保存输出类型参数x 的处理结果
+\-\-\-\-\--+
\| \@k \|
+\-\-\-\-\--+
\| 41 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
## 流程控制
流程控制 条件判断 流程控制语句
### 流程控制 
选择结构 循环结构
#### 选择结构
单分支选择结构
if 条件测试 then
代码\...
\...
end if;
双分支选择结构
if 条件测试 then
代码1\...
else
代码2\...
end if;
mysql\> delimiter //
mysql\> create procedure db9.sqy7(in linenum int)
-\> begin
-\> if linenum \ select \* from db9.user where id \ else
-\> select \* from db9.user where id \> 10 ;
-\> end if;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call sqy7(3); #给linenum 赋值3,进行判断,执行第一句查询
mysql\> call sqy7(11); #给linenum 赋值11,进行判断,执行第二句查询
#### 循环结构
**While条件循环:反复测试条件,只要成立就执行命令代码**
mysql\> delimiter //
mysql\> create procedure say9(in y int)
-\> begin
-\> declare x int;
-\> set x = 1 ;
-\> while x \ select x;
-\> set x = x + 1 ;
-\> end while;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call say9(3);
**loop死循环:无条件,反复执行某一段代码**
loop
循环体
end loop;
mysql\>delimiter //
mysql\>creater procedure say12()
-\> begin
-\> loop
-\> select \* from db9.user where id=1;
-\> end loop;
-\> end
-\> //
mysql\> delimiter ;
mysql\>call say12()
**repeat条件式循环:当条件成立时结束循环**
repeat
循环体
Until 条件判断
end repeat;
mysql\> delimiter //
mysql\> create procedure say11(in y int)
-\> begin
-\> declare x int;
-\> set x = 1 ;
-\> repeat
-\> select x;
-\> set x = x + 1 ;
-\> until x \> y
-\> end repeat;
-\> end
-\> //
Query OK, 0 rows affected (0.00 sec)
mysql\> delimiter ;
mysql\> call say11(3);
### 条件判断
### 流程控制语句