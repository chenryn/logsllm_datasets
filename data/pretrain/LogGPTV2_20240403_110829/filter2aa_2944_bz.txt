Natter API project and update the natter-ingress.yaml file to add the new annotations
shown in bold in the following listing.
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: api-ingress
  namespace: natter-api
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: 
        "$service_name.$namespace.svc.cluster.local:$service_port"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"        
    nginx.ingress.kubernetes.io/auth-tls-secret: "natter-api/ca-secret"   
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"                
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream:    
        "true"                                                            
spec:
  tls:
    - hosts:
        - api.natter.local
      secretName: natter-tls
  rules:
    - host: api.natter.local
      http:
        paths:
          - backend:
              serviceName: natter-api-service
              servicePort: 4567
If you still have Minikube running from chapter 10, you can now update the ingress
definition by running:
kubectl apply -f kubernetes/natter-ingress.yaml
Listing 11.5
Ingress with optional client certificate authentication
Annotations to
allow optional
client certificate
authentication
402
CHAPTER 11
Securing service-to-service APIs
TIP
If changes to the ingress controller don’t seem to be working, check the
output of kubectl describe ingress -n natter-api to ensure the annota-
tions are correct. For further troubleshooting tips, check the official docu-
mentation at http://mng.bz/X0rG.
11.4.3 Verifying client identity
The verification performed by NGINX is limited to checking that the client provided
a certificate that was signed by one of the trusted CAs, and that any constraints speci-
fied in the certificates themselves are satisfied, such as the expiry time of the certifi-
cate. To verify the identity of the client and apply appropriate permissions, the ingress
controller sets several HTTP headers that you can use to check details of the client
certificate, shown in table 11.2.
Figure 11.5 shows the overall process. The NGINX ingress controller terminates the cli-
ent’s TLS connection and verifies the client certificate during the TLS handshake. After
the client has authenticated, the ingress controller forwards the request to the backend
service and includes the verified client certificate in the ssl-client-cert header.
 The mkcert utility that you’ll use for development in this chapter sets the client
name that you specify as a Subject Alternative Name (SAN) extension on the certifi-
cate rather than using the Subject DN field. Because NGINX doesn’t expose SAN val-
ues directly in a header, you’ll need to parse the full certificate to extract it. Listing 11.5
shows how to parse the header supplied by NGINX into a java.security.cert
.X509Certificate object using a CertificateFactory, from which you can then
extract the client identifier from the SAN. Open the UserController.java file and add
the new method from listing 11.6. You’ll also need to add the following import state-
ments to the top of the file:
import java.io.ByteArrayInputStream;
import java.net.URLDecoder;
import java.security.cert.*;
Table 11.2
HTTP headers set by NGINX
Header
Description
ssl-client-verify
Indicates whether a client certificate was presented and, if so, whether 
it was verified. The possible values are NONE to indicate no certificate 
was supplied, SUCCESS if a certificate was presented and is valid, or 
FAILURE: if a certificate was supplied but is invalid or not 
signed by a trusted CA.
ssl-client-subject-dn
The Subject Distinguished Name (DN) field of the certificate if one was 
supplied.
ssl-client-issuer-dn
The Issuer DN, which will match the Subject DN of the CA certificate.
ssl-client-cert
If auth-tls-pass-certificate-to-upstream is enabled, then 
this will contain the full client certificate in URL-encoded PEM format.
403
Mutual TLS authentication
public static X509Certificate decodeCert(String encodedCert) {
    var pem = URLDecoder.decode(encodedCert, UTF_8);          
    try (var in = new ByteArrayInputStream(pem.getBytes(UTF_8))) {
        var certFactory = CertificateFactory.getInstance("X.509");       
        return (X509Certificate) certFactory.generateCertificate(in);    
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
} 
There can be multiple SAN entries in a certificate and each entry can have a different
type. Mkcert uses the DNS type, so the code looks for the first DNS SAN entry and
returns that as the name. Java returns the SAN entries as a collection of two-element
List objects, the first of which is the type (as an integer) and the second is the
actual value (either a String or a byte array, depending on the type). DNS entries
have type value 2. If the certificate contains a matching entry, you can set the client
ID as the subject attribute on the request, just as you’ve done when authenticating
users. Because the trusted CA issues client certificates, you can instruct the CA not
to issue a certificate that clashes with the name of an existing user. Open the User-
Controller.java file again and add the new constant and method definition from the
following listing.
Listing 11.6
Parsing a certificate
NGINX
ingress
Backend
service
Client
TLS handshake
Client certiﬁcate
ssl-client-cert:
...
ssl-client-verify:
SUCCESS
NGINX terminates the client TLS
connection and veriﬁes the client
certiﬁcate as part of the handshake.
If authentication was successful, NGINX forwards
the client certiﬁcate to the backend service
in the
ssl-client-cert header and indicates
whether authentication was successful.
Figure 11.5
To allow client certificate authentication by external clients, you 
configure the NGINX ingress controller to request and verify the client certificate 
during the TLS handshake. NGINX then forwards the client certificate in the ssl-
client-cert HTTP header.
Decode the URL-encoding added by NGINX.
Parse the PEM-encoded
certificate using a
CertificateFactory.
404
CHAPTER 11
Securing service-to-service APIs
private static final int DNS_TYPE = 2;
void processClientCertificateAuth(Request request) {
    var pem = request.headers("ssl-client-cert");     
    var cert = decodeCert(pem);                       
    try {
        if (cert.getSubjectAlternativeNames() == null) {
            return;
        }
        for (var san : cert.getSubjectAlternativeNames()) {   
            if ((Integer) san.get(0) == DNS_TYPE) {           
                var subject = (String) san.get(1);
                request.attribute("subject", subject);     
                return;
            }
        }
    } catch (CertificateParsingException e) {
        throw new RuntimeException(e);
    }
}
To allow a service account to authenticate using a client certificate instead of username
and password, you can add a case to the UserController authenticate method that
checks if a client certificate was supplied. You should only trust the certificate if the
ingress controller could verify it. As mentioned in table 11.2, NGINX sets the header
ssl-client-verify to the value SUCCESS if the certificate was valid and signed by a
trusted CA, so you can use this to decide whether to trust the client certificate.
WARNING
If a client can set their own ssl-client-verify and ssl-client-
cert headers, they can bypass the certificate authentication. You should test
that your ingress controller strips these headers from any incoming requests.
If your ingress controller supports using custom header names, you can
reduce the risk by adding a random string to them, such as ssl-client-
cert-zOAGY18FHbAAljJV. This makes it harder for an attacker to guess the
correct header names even if the ingress is accidentally misconfigured.
You can now enable client certificate authentication by updating the authenticate
method to check for a valid client certificate and extract the subject identifier from
that instead. Listing 11.8 shows the changes required. Open the UserController.java
file again, add the lines highlighted in bold from the listing to the authenticate
method and save your changes.
public void authenticate(Request request, Response response) {
    if ("SUCCESS".equals(request.headers("ssl-client-verify"))) {  
        processClientCertificateAuth(request);                     
        return;                                                    
    }
Listing 11.7
Parsing a client certificate
Listing 11.8
Enabling client certificate authentication
Extract the client 
certificate from the 
header and decode it.
Find the first SAN 
entry with DNS type.
Set the service 
account identity as 
the subject of the 
request.
If certificate 
authentication was 
successful, then 
use the supplied 
certificate.
405
Mutual TLS authentication
    var credentials = getCredentials(request);    
    if (credentials == null) return;
    var username = credentials[0];
    var password = credentials[1];
    var hash = database.findOptional(String.class,
            "SELECT pw_hash FROM users WHERE user_id = ?", username);
    if (hash.isPresent() && SCryptUtil.check(password, hash.get())) {
        request.attribute("subject", username);
        var groups = database.findAll(String.class,
            "SELECT DISTINCT group_id FROM group_members " +
                   "WHERE user_id = ?", username);
        request.attribute("groups", groups);
    }
}
You can now rebuild the Natter API service by running
eval $(minikube docker-env)
mvn clean compile jib:dockerBuild
in the root directory of the Natter project. Then restart the Natter API and database
to pick up the changes,3 by running:
kubectl rollout restart deployment \
    natter-api-deployment natter-database-deployment -n natter-api
After the pods have restarted (using kubectl get pods -n natter-api to check), you
can register a new service user as if it were a regular user account:
curl -H 'Content-Type: application/json' \
  -d '{"username":"testservice","password":"password"}' \
  https://api.natter.local/users
3 The database must be restarted because the Natter API tries to recreate the schema on startup and will throw
an exception if it already exists. 
Mini project 
You still need to supply a dummy password to create the service account, and some-
body could log in using that password if it’s weak. Update the UserController register-
User method (and database schema) to allow the password to be missing, in which
case password authentication is disabled. The GitHub repository accompanying the
book has a solution in the chapter11-end branch.
Otherwise, use the 
existing password-
based authentication.
406
CHAPTER 11
Securing service-to-service APIs
You can now use mkcert to generate a client certificate for this account, signed by the
mkcert root CA that you imported as the ca-secret. Use the -client option to mkcert
to generate a client certificate and specify the service account username:
mkcert -client testservice
This will generate a new certificate for client authentication in the file testservice-
client.pem, with the corresponding private key in testservice-client-key.pem. You can
now log in using the client certificate to obtain a session token:
curl -H 'Content-Type: application/json' -d '{}' \
    --key testservice-client-key.pem \            
    --cert testservice-client.pem \     
    https://api.natter.local/sessions
Because TLS certificate authentication effectively authenticates every request sent in
the same TLS session, it can be more efficient for a client to reuse the same TLS ses-
sion for many HTTP API requests. In this case, you can do without token-based authen-
tication and just use the certificate.
11.4.4 Using a service mesh
Although TLS certificate authentication is very secure, client certificates still must be
generated and distributed to clients, and periodically renewed when they expire. If
the private key associated with a certificate might be compromised, then you also
need to have processes for handling revocation or use short-lived certificates. These
are the same problems discussed in chapter 10 for server certificates, which is one of
the reasons that you installed a service mesh to automate handling of TLS configura-
tion within the network in section 10.3.2.
 To support network authorization policies, most service mesh implementations
already implement mutual TLS and distribute both server and client certificates to the
service mesh proxies. Whenever an API request is made between a client and a server
within the service mesh, that request is transparently upgraded to mutual TLS by the
Pop quiz
7
Which one of the following headers is used by the NGINX ingress controller to
indicate whether client certificate authentication was successful?
a
ssl-client-cert
b
ssl-client-verify
c
ssl-client-issuer-dn
d
ssl-client-subject-dn
e
ssl-client-naughty-or-nice
The answer is at the end of the chapter.
Use the --key option to 
specify the private key.
Supply the certificate 
with --cert.
407
Mutual TLS authentication
proxies and both ends authenticate to each other with TLS certificates. This raises the
possibility of using the service mesh to authenticate service clients to the API itself.
For this to work, the service mesh proxy would need to forward the client certificate
details from the sidecar proxy to the underlying service as a HTTP header, just like
you’ve configured the ingress controller to do. Istio supports this by default since the
1.1.0 release, using the X-Forwarded-Client-Cert header, but Linkerd currently
doesn’t have this feature.
 Unlike NGINX, which uses separate headers for different fields extracted from
the client certificate, Istio combines the fields into a single header like the following
example:4
x-forwarded-client-cert: By=http://frontend.lyft.com;Hash=
➥ 468ed33be74eee6556d90c0149c1309e9ba61d6425303443c0748a
➥ 02dd8de688;Subject="CN=Test Client,OU=Lyft,L=San
➥ Francisco,ST=CA,C=US"
The fields for a single certificate are separated by semicolons, as in the example. The
valid fields are given in table 11.3.
The behavior of Istio when setting this header is not configurable and depends on the
version of Istio being used. The latest version sets the By, Hash, Subject, URI, and DNS
fields when they are present in the client certificate used by the Istio sidecar proxy for
mTLS. Istio’s own certificates use a URI SAN entry to identify clients and servers,
using a standard called SPIFFE (Secure Production Identity Framework for Everyone),
which provides a way to name services in microservices environments. Figure 11.6
shows the components of a SPIFFE identifier, which consists of a trust domain and a
4 The Istio sidecar proxy is based on Envoy, which is developed by Lyft, in case you’re wondering about the
examples!
Table 11.3
Istio X-Forwarded-Client-Cert fields
Field
Description
By
The URI of the proxy that is forwarding the client details.
Hash
A hex-encoded SHA-256 hash of the full client certificate.
Cert
The client certificate in URL-encoded PEM format.
Chain
The full client certificate chain, in URL-encoded PEM format.
Subject
The Subject DN field as a double-quoted string.
URI
Any URI-type SAN entries from the client certificate. This field may be repeated if 
there are multiple entries.
DNS
Any DNS-type SAN entries. This field can be repeated if there’s more than one 
matching SAN entry.
408
CHAPTER 11
Securing service-to-service APIs
path. In Istio, the workload identifier consists of the Kubernetes namespace and ser-
vice account. SPIFFE allows Kubernetes services to be given stable IDs that can be
included in a certificate without having to publish DNS entries for each one; Istio can
use its knowledge of Kubernetes metadata to ensure that the SPIFFE ID matches the
service a client is connecting to.
DEFINITION
SPIFFE stands for Secure Production Identity Framework for Everyone
and is a standard URI for identifying services and workloads running in a clus-
ter. See https://spiffe.io for more information.
NOTE
Istio identities are based on Kubernetes service accounts, which are dis-
tinct from services. By default, there is only a single service account in each
namespace, shared by all pods in that namespace. See http://mng.bz/yrJG
for instructions on how to create separate service accounts and associate them
with your pods.
Istio also has its own version of Kubernetes’ ingress controller, in the form of the Istio
Gateway. The gateway allows external traffic into the service mesh and can also be con-
figured to process egress traffic leaving the service mesh.5 The gateway can also be
configured to accept TLS client certificates from external clients, in which case it
will also set the X-Forwarded-Client-Cert header (and strip it from any incoming
requests). The gateway sets the same fields as the Istio sidecar proxies, but also sets
the Cert field with the full encoded certificate.
 Because a request may pass through multiple Istio sidecar proxies as it is being pro-
cessed, there may be more than one client certificate involved. For example, an exter-
nal client might make a HTTPS request to the Istio Gateway using a client certificate,
and this request then gets forwarded to a microservice over Istio mTLS. In this case,
the Istio sidecar proxy’s certificate would overwrite the certificate presented by the
real client and the microservice would only ever see the identity of the gateway in
the X-Forwarded-Client-Cert header. To solve this problem, Istio sidecar proxies
don’t replace the header but instead append the new certificate details to the existing
header, separated by a comma. The microservice would then see a header with multi-
ple certificate details in it, as in the following example:
5 The Istio Gateway is not just a Kubernetes ingress controller. An Istio service mesh may involve only part of a
Kubernetes cluster, or may span multiple Kubernetes clusters, while a Kubernetes ingress controller always
deals with external traffic coming into a single cluster.
spiffe://k8s.example.com/ns/natter-api/sa/natter-db
Trust domain
Workload identiﬁer
Namespace
Service account
Figure 11.6
A SPIFFE identifier 
consists of a trust domain and 
a workload identifier. In Istio, the 
workload identifier is made up of 
the namespace and service 
account of the service.
409
Mutual TLS authentication
X-Forwarded-Client-Cert: By=https://gateway.example.org;