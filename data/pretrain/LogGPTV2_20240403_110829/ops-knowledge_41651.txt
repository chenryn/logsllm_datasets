Certainly! Hereâ€™s a more polished and detailed version of your text:

---

I am trying to determine the file name of the currently running script. Typically, this can be achieved using `__file__`, `__main__.__file__`, or even `sys.argv[0]`. However, when the script is installed as a shell command using `setup.py` with `entry_points` or `console_scripts`, these methods return the path to the executable (e.g., `/usr/local/bin/...`) instead of the actual script file name.

I also attempted to use the `inspect` module, specifically `inspect.stack()[1].filename`, but found it to be inconsistent and not always reliable.

Could you please suggest a more robust method to obtain the file name of the running script in this scenario?

---

**Response:**

To extract only the file name from the full path, you can use `os.path.basename` on the path you currently have. For example:

```python
import os

# Assuming you have the full path in a variable
full_path = sys.argv[0]

# Extract the file name
file_name = os.path.basename(full_path)

print(file_name)
```

This will give you the base name of the file, which should be the actual script file name, regardless of where it is installed.

---