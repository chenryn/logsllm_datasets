strategies.
1 Introduction
In their seminal work [1], Hofmeyr et al. proposed a biologically-inspired host-
based IDS which detects anomalies on a running process. This IDS and its later
reﬁnements [2, 3, 4], which we will call self-based IDS, compare the unparame-
terized system-call trace of a process against the process’ normal proﬁle stored
as a set of k-grams, i.e. short sequences of system calls with length k. In the rest
of this paper, we will simply use IDS to refer to self-based IDS.
While self-based IDS seem quite reasonable and have been shown to be eﬀec-
tive in detecting intrusions, they can be susceptible to evasion or mimicry attacks
[5, 6] which disguise an attack so that it appears “normal” to the IDS. In the ﬁrst
part of this paper, we investigate the susceptibility of self-based IDS to mimicry
attacks. Earlier works [5, 6, 7, 8] have pointed out the weaknesses of self-based
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 146–164, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
Improving Host-Based IDS with Argument Abstraction
147
IDS. In this paper, we focus on exploring practical attack constructions and
whether changing parameter(s) of the self-based IDS can help to prevent such
attacks. We present a branch-and-bound algorithm for automatically construct-
ing the shortest mimicry attack on self-based IDS and its variants. Our experi-
mental results show that using larger window sizes or disallowing pseudo-edges
(deﬁned in Section 3.2) do not prevent attacks; and furthermore, the shortest
length mimicry attacks can be constructed without much computation diﬃculty
even for relatively large window sizes.
Our results extend earlier results that mimicry attacks can successfully evade
self-based IDS, thus compromising the security of the IDS. In this paper, we
seek to ﬁnd extensions to self-based IDS which can maintain the good self-
based IDS properties but make it more diﬃcult to evade detection. Following
the terminology used in [9], which classiﬁes IDS as black, gray or white-box
detectors, we adopt black and gray-box approaches to enhance IDS. We remark
that white-box approaches do complement black and gray-box enhancements
such as ours here, but are beyond the scope of this paper.
We propose a simple extension to self-based IDS which incorporates sys-
tem call arguments and process privileges. We do not use the actual values
of arguments and privileges as this could lead to a higher false positive rate
from the IDS. Rather we abstract these values by categorizing them into dif-
ferent classes that are deﬁned by a user-supplied1 category speciﬁcation. The
idea here is that an appropriate category speciﬁcation will take into account
the potential security impact of system call operations on system’s objects and
resources, e.g. ﬁles or directories. This combines a slightly more ﬁne-grained
gray-box model with a very simple security model. In addition, the security
model additionally also allows for immediate rejection/detection of dangerous
system calls.
Our experiments show that our extension does increase the strength of a self-
based IDS against mimicry attacks. In the sample programs we investigated,
mimicry attacks on the enhanced IDS were no longer possible. Our preliminary
results indicate that making the proﬁle more ﬁne-grained has little impact on
the false positive rate. This is important since we would like to improve the IDS
detection capability but without increasing the false positive rate. We believe
that the approach in this paper which abstracts arguments and privileges is easy
to apply to self-based and similar IDS models while providing more robustness
against an intelligent attacker.
The remainder of this paper is organized as follows. Section 2 discusses re-
lated work. We examine mimicry attacks and give a branch-and-bound algorithm
for constructing mimicry attacks in Section 3. Section 4 describes our IDS en-
hancement using argument and privilege abstraction. Section 5 gives the results
of our experiments on automatically attacking self-based IDS variants and our
enhanced IDS. We discuss our empirical results in Section 6, and conclude in
Section 7.
1 This could be one from the system administrator or program developer.
148
Sufatrio and R.H.C. Yap
2 Related Work
Mimicry attacks on self-based IDS were introduced in [5, 6]. Wagner and Soto
[5] use ﬁnite state automata (FSA) as a framework for studying and evaluating
mimicry attacks. They show that a mimicry attack is possible because additional
system calls which behave like no-ops can be inserted into the original attack
trace so that the resulting trace is accepted by the automaton of the IDS model.
They demonstrate how a mimicry attack can be crafted from the autowux WU-
FTPD exploit. Independently, Tan et al. [6] show attack construction on self-
based IDS as a process of moving an attack sequence into the IDS detection’s
blind region through successive attack modiﬁcation. The focus in these works
was to demonstrate the feasibility of mimicry attacks, but not on a detailed look
at automatic attacks.
Recently, Gao et al. [9] performed a study of black-box self-based IDS and
also several gray-box IDS. They investigated mimicry attacks with window sizes
up to length 6 and showed the existence of mimicry attacks across the methods
and window sizes studied. They demonstrated that various forms of IDS are
susceptible to attacks but did not go into details of attack generation. Here we
give an automatic attack construction algorithm for self-based IDS and similar
IDS models, and show empirically that it is computationally easy to generate
attacks on self-based IDS for larger window sizes ranging from k = 5 to 11.
There are a number of other gray-box enhancements using run-time informa-
tion which aim to increase the IDS’ robustness. Sekar et al. [10] propose a FSA
model built from both system calls and program counter information. Feng et
al. [11] also make use of the call stack to extract return addresses. These en-
hancements have been evaluated in [9] where it is shown that attacks still can
be constructed.
The idea of analyzing arguments of operations for detecting behavior deviance
appears in a number of works. For example, [12] shows how the use of enriched
command-line data can enhance the detection of masqueraders. Our work in this
paper is based on an established self-based IDS model, and focuses on system
call arguments. Kruegel et al. [13] make use of statistical analysis of system
call arguments which can be used to evaluate features of the arguments such as:
string length, string character distribution, structural inference and token ﬁnder.
It is however unclear whether the statistical approach is robust against mimicry
attacks.
White-box techniques which incorporate some form of program analysis can
complement gray-box techniques. Giﬃn et al. [14] present a white-box IDS which
makes use of static analysis to counter mimicry attacks. They provide some
partial results which show how static analysis can make it more diﬃcult for an
attacker to manipulate the process and generate a mimicry attack. However,
they do not show that the prevention of mimicry attacks. In this paper, we focus
on gray and black box techniques which do not require the analysis of source
codes or the binaries of the executables.
Finally, we mention that sandboxing techniques also make use of system call
argument checking. The systrace system [15] uses system call policies to specify
Improving Host-Based IDS with Argument Abstraction
149
that certain system calls with speciﬁc arguments can be allowed or denied. This
can be thought of as being a self-based IDS with a window size of one.
3 Constructing Mimicry Attacks
Before explaining our mimicry attack generation algorithm, let us ﬁrst establish
some deﬁnitions. A trace is a sequence of system calls invoked by a program in
its execution. For our purposes, a trace can be viewed simply as a string over
some deﬁned alphabet. In this section, we consider self-based IDS model [1, 2, 3]
where the alphabet for traces are the system call numbers.
We want to distinguish traces generated by a “normal” program execution
versus one where the program has been attacked in some fashion. In this paper,
we will look at subtraces, which are simply substrings of a trace. We also consider
subsequences, which diﬀer from subtraces as they are a subset of letters from the
trace arranged in the original relative trace order, i.e. need not be contiguous in
the trace.
The objective of a self-based IDS is to examine subtraces and determine
whether they are normal or not. We will call a basic attack subtrace, one which
is detected by the IDS. A mimicry attack disguises a basic attack subtrace into
a stealthy attack subtrace which the IDS classiﬁes as being normal.
3.1 Pseudo Subtraces
A weakness of a self-based IDS which makes use of a normal proﬁle represented
as a set of k-grams is that it can accept subtraces which actually do not occur
in the normal trace(s). For example, consider the following two subtraces of a
normal trace:
(cid:14). . . , mi−4, mi−3, mi−2, mi−1, A, B, C, D, E, . . .
. . . , B, C, D, E, F, ni+1, ni+2, ni+3, ni+4, . . .(cid:15)
Suppose the window size is 5, and assume that the subtrace (cid:14)A, B, C, D, E, F(cid:15)
never occurs in the normal trace. This subtrace, however, will be accepted as
normal by a self-based IDS since the two 5-grams derived are present in the
normal proﬁle. We call such a subtrace, a pseudo subtrace for window size k,
since it is not supported by the actual normal trace, yet passes the IDS detection
as all its k-grams are present in the normal proﬁle.
A pseudo subtrace can be constructed by ﬁnding a common substring of
length k − 1 + l with l ≥ 0 in two separate subtraces of length m(≥ k + l)
and n(≥ k + l) respectively, and then joining them to form a new subtrace
of length m + n − k − l + 1.2 We can then concatenate a pseudo subtrace
with a normal subtrace or another pseudo subtrace to create a longer pseudo
2 For attack construction, we set l = 0 so as to put the weakest constraint on mimicry
attack construction with window size k.
150
Sufatrio and R.H.C. Yap
: Attack System Call 
…
…
.....
Normal portion 
Resulting attack portion (with no-ops in between)
Fig. 1. Mimicry attack construction by composing pseudo subtraces
subtrace. A stealthy attack version of a basic attack is simply a pseudo subtrace
in which the basic attack subtrace is its subsequence. Figure 1 illustrates such a
process which combines subtraces containing attack sequences interspersed with
no-ops.
In this paper, we use the term pseudo subtrace to speciﬁcally refer to the
resulting overall subtrace which is obtained by joining two separate subtraces.
The resulting subtrace contains a foreign sequence of foreign order type in the
terminology of Tan and Maxion [7, 8] with length k + 1 + l as a substring. When
l = 0 in the joining operation, the foreign sequence is a minimal foreign sequence.
In the previous example, (cid:14)A, B, C, D, E, F(cid:15) is a minimal foreign sequence for
k = 5. The process in Figure 1 constructs a pseudo subtrace for a mimicry
attack where minimal foreign sequences of length k + 1 may exist along that
subtrace, each combining two unconnected subtraces of normal traces together.
Here, we emphasise that the core components of mimicry attacks depend on the
notions of subtraces and subsequences.3
3.2 The Overlapping Graph Representation
Given a normal trace, we represent a proﬁle using what we call an overlapping
graph. This is similar to the De-Bruijn graph construction used in the “sequenc-
ing by hybridization” problem in computational biology [16].
Consider the normal trace of a program N of length n, (cid:14)N1, N2, N3, ..., Nn(cid:15),
where Ni is the letter representing a system call. Let K be the set of all k-
gram subtraces derived from N according to the proﬁle generation rule of a
self-based IDS. Given two strings p and q, the function overlap(p, q) gives the
maximal length of a suﬃx of p that matches a preﬁx of q. The overlapping graph
G is deﬁned as a directed graph (V, E) where the vertices V are the k-grams
in K and the edges E connect two vertices p and q whenever overlap(p, q) =
k − 1.
We also augment the trace N by adding a suﬃx consisting of the k − 1
occurrences of sentinel symbol, denoted by ’$’, signifying the end of the trace.
This adds some additional k-grams and simpliﬁes the algorithm.
3 We remark that not all foreign sequences are pseudo subtraces. Foreign sequences
containing system calls not in the k-grams are not considered since they cannot be
used to generate mimicry attacks.
Improving Host-Based IDS with Argument Abstraction
151
Figure 2 illustrates the overlapping graph constructed from a normal trace
N : (cid:14)A, B, C, D, E, F, G, A, B, E, F, H(cid:15) with a sliding window of length 3. For
simplicity, we have not shown the 3-grams corresponding to (cid:14)F, H, $(cid:15) and
(cid:14)H, $, $(cid:15) which are in G.
There are two kinds of edges in G: direct edges and pseudo edges. The direct
edges are those edges which result from normal subtraces. Pseudo edges are those
which are not created by two consecutive substrings of length k − 1 in the trace.
Thus, pseudo edges can be used to generate certain pseudo subtraces since it is
not in a normal subtrace. In Figure 2, the direct edges are drawn with a single
arrow, while the pseudo edges are drawn with a double arrow.
GAB 
ABC
ABE
BEF
FGA 
BCD
EFH
EFG
DEF
CDE
Fig. 2. Overlapping graph G for N : (cid:2)A, B, C, D, E, F, G, A, B, E, F, H(cid:3) with k = 3
The graph G can also be viewed as a ﬁnite state automata model for recog-
nizing normal traces. A slightly diﬀerent graph representation is described in
[5] where the k-gram database are the state transitions. Their representation
however does not distinguish between what in the overlapping graph corre-
sponds to direct and pseudo edges. Since our concern is to address the limi-
tations of self-based IDS, the overlapping graph allows a natural variant where
we can evaluate the diﬀerence between allowing pseudo edges and removing
them.
3.3 Mimicry Attack Construction
Rather than working with the FSA, it is more convenient to directly use the
overlapping graph for constructing mimicry attacks. Given an overlapping graph
G and a basic attack sequence A : (cid:14)A1, A2, A3, ..., Al(cid:15) which is detectable by the
IDS, we want to automatically construct the shortest stealthy attack subtrace
L : (cid:14)L1, L2, L3, ..., Lm(cid:15) where m ≥ l which contains A1, A2, A3, ..., Al as a sub-
sequence and where the other system calls in {L − A} behave as no-ops with
respect to A.
Transforming a basic attack subtrace A into the shortest stealthy subtrace L
is equivalent to:
152
Sufatrio and R.H.C. Yap
Finding the shortest path P on the overlapping graph G which monoton-
ically visits nodes whose k-gram label begins with the symbol Ai for all
1 ≤ i ≤ l.
We augment G with an additional sub-graph, the occurrence subgraph. The
nodes in the occurrence subgraph, which we will call W , are individual letters
for each occurrence of the letter from its k-grams in G. For each node wi in W ,
we add an outgoing edge to all nodes in G where the ﬁrst letter in its k-gram
label is the same as the letter for wi. We call the set of new edges from W to V ,
(cid:4) is simply (V + W, E + Occ), which we call
the Occ set. The resulting graph G
the extended overlapping graph. Figure 3 shows the extended overlapping graph
for the graph in Figure 2.
We illustrate the mimicry attack construction with the following example.
Suppose that we want to construct a stealthy subtrace from a basic attack sub-
trace A : (cid:14)G, C, D(cid:15) using the extended overlapping graph G
(cid:4) in Figure 3. Note
that the subtrace (cid:14)G, C, D(cid:15) is detected as it is not a 3-gram of the normal trace.
(cid:4), we ﬁnd the stealthy path: GAB-ABC-BCD-CDE-DEF .
Inspecting graph G
Thus, the stealthy attack subtrace is the sequence of (cid:14)G, A, B, C, D(cid:15), with A and
B added as no-ops. This example uses the pseudo edge (GAB, ABC).
A
B
C
D
E
F
G
GAB
ABC
FGA
ABH
BCD
EFG
DEF
CDE
Fig. 3. Extended overlapping graph G(cid:2) from graph in Figure 2
Our attack construction performs a search to ﬁnd the shortest mimicry attack.
Each node in the search tree corresponds to one letter in the original attack
string, Ai. The branches from Ai are the choices of constructing a subtrace
starting from the potential k-grams for Ai+1 pointed to by Occ. The process
continues until we reach Al which is the last node in the attack.
In order to make the search more eﬃcient, we employ a branch-and-bound
strategy to prune the constructed attacks which exceed the best solution found
so far. Our implementation uses the Dijkstra all-pair shortest path algorithm [17]
both to test connectivity between two nodes in G and also to assist in pruning
for branch-and-bound search. A sketch of the algorithm is as follows.
Improving Host-Based IDS with Argument Abstraction
153
Attack Construction Algorithm
Input:
- Sliding window length k
- A normal trace N : N1, N2, N3, . . . , Nn
- Basic attack subtrace A : A1, A2, A3, . . . , Al
Output:
- Shortest stealthy subtrace L : L1, L2, L3, . . . , Lm
- Or failure, if no solution trace can be found.
1. Perform Dijkstra all-pairs shortest path algorithm for all the nodes V .
Between two adjacent nodes, set distance:=1.
If two nodes are not connected then distance:= ∞.
Set M in distance:= ∞ and M in path:=(cid:2)(cid:3).
Create a special node v0 where ∀i.distance(v0, vi) := 0.
2.
3. Perform branch-and-bound search on the search tree,
for all i:=1 to l choose vi from {vi|(Ai, vi) ∈ Occ}:
- If distance(vi−1, vi) = ∞ then backtrack.
- Add distance(vi−1, vi) to current cost.
- If current cost ≥ Min distance then backtrack.
- If complete solution is found then
If current cost < Min distance then
Min distance := current cost;
Min path := current path.
4. Once the search tree is fully explored:
If Min distance = ∞ then return failure;
Else return L : L1, L2, L3, ..., Lm.
In order to use this algorithm in a buﬀer overﬂow setting, it needs to be