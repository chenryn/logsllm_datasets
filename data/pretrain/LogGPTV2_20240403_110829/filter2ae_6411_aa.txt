# 前言
这一系类的文章是对Sulley fuzzer的学习，文章的开始部分是对Sulley使用手册的翻译，后续的还有Sulley的实际应用。  
手册链接：
# Sulley: Fuzzing Framework
Sulley是一个可开发的fuzzer和多个可扩展组件组成的fuzz框架。恕我直言，Sulley无论从商业还是公共领域所表现的能力来看都超出了以前发布的大多数fuzz技术。该框架的目标不仅是简化数据表示，还简化数据传输和目标监控。Sulley以Monsters
Inc.(怪兽电力公司这部电影)的主角亲切地命名，well，因为它有绒毛（fuzzy）
在大多数情况下，现代的fuzzers仅专注于数据生成。Sulley不仅数据生成的能力让人印象深刻，而且更进一步地包括了一个现代fuzzer应该提供的很多其他重要方面的信息。
  * Sulley可以条不紊地监视网络并保留记录。
  * Sulley可以检测和监控目标的健康状况，能够使用多种方法恢复到已知的良好状态。
  * Sulley可以检测，跟踪和分类检测到的故障。
  * Sulley可以并行地fuzz，显著地提高测试速度。
  * Sulley可以自动确定测试用例触发的特殊错误。
  * Sulley自动完成了这一切，而且不需要再有人动手。  
Sulley的总体用法分解如下：
  * Data Representation：使用任何fuzzer的第一步。 在抓住数据包的同时运行目标并勾选一些接口。 将协议分解为单独的请求，并将其表示为Sulley中的block。
  * Session：将您的请求链接在一起形成一个session，附加各种可用的Sulley监控代理（网络，调试器等）并开始fuzzing。 
  * Post Mortem：查看生成的数据和监控结果。 重现个别测试用例。
## Authors
  * Pedram Amini, PI:EMAIL
  * Aaron Portnoy, PI:EMAIL
## Documentation
  * SulleyDirectoryStructure
  * SulleyInstallation
  * SulleyDataRepresentation
  * SulleySessions
  * SulleyPostMortem
  * SulleyWalkthroughTrend
  * SulleyDevNotes
# Sulley Directory Structure
Sulley目录结构有一些排版理由。维护目录结构将确保使用Legos,requests,utilities扩展fuzzer时一切都能够保持得井井有条。以下概述了您需要了解的目录结构（目录以粗体突出显示）：  
**archived_fuzzies:** 这是一个由fuzz目标名称组成的目录(Free)，用来存储归档的fuzzers以及从fuzz
session生成的数据。
  * **trend_server_protect_5168:** 这种已停用的fuzz会在本文档后面的逐步介绍中被引用。
  * **trillian_jabber:** :文档中引用的另一个已停用的fuzz。
**audits:** 应将已记录的PCAP，崩溃数据，代码覆盖范围和active fuzz seesion的分析情况保存到此目录中。
一旦被停用，记录的数据将会被移至'archived_fuzzies'。  
**docs:** 本文档和生成的Epydoc API参考。  
**requests:** Sulley的需求库。 每个目标都应该有自己的文件，可以用来存储多个请求。
  * **REQUESTS.html：** 此文件包含存储的请求类别的说明，并列出了各种类型。 以字母顺序。
  * **http.py：** 各种Web服务器fuzzing测试请求。
  * **trend.py：** 包含与本文档后面讨论的完整的fuzz演练相关的请求。
**sulley：** fuzzer框架。 除非您想扩展框架，否则您不需要触接触这些文件。
  * **legos：** 用户定义的复杂基元:  
ber.py:ASN.1 / BER原语  
cerpc.py:Microsoft RPC NDR原语  
misc.py: 各种未分类的复杂原语，如电子邮件地址和主机名  
xdr.py:XDR类型
  * **pgraph：** Python图形抽象库。 在建立session中使用。
  * **utils：** 各种帮助程序。  
dcerpc.py：Microsoft RPC帮助程序例程，例如绑定到接口和生成请求。  
misc.py：各种未分类的例程，例如CRC-16和UUID操作例程。  
scada.py：SCADA特定的辅助程序，包括DNP3block编码器。
  * init.py：此处定义了用于创建请求的各种's_'别名。
  * blocks.py：Blocks和Blocks helps在这里定义。
  * pedrpc.py：此文件定义了Sulley用于各种代理和主要的fuzzer之间通信的客户端和服务器类。
  * primitives.py：这里定义了各种fuzzer原语，包括静态，随机，字符串和整数。
  * sessions.py：用于构建和执行会话的功能
  * sex.py:Sulley的自定义异常处理类
  * **unit_tests:** Sulley's unit testing harness.
  * **utils：** 各种独立的实用程序。  
ida_fuzz_library_extend.py：一个IDApython脚本，它静态搜索二进制文件以获取扩展fuzz库的值。  
crashbin_explorer.py：用于浏览存储在序列化崩溃bin文件中的结果的命令行实用程序
WikiStart  
pcap_cleaner.py：用于清除与故障无关的所有条目的PCAP目录的命令行实用程序。  
network_monitor.py:PedRPC网络监控代理驱动。  
process_monitor.py:PedRPC基于调试器的目标监视代理程序的驱动。  
unit_test.py:Sulley的单元测试线束。  
vmcontrol.py:PedRPCVMWare控制代理驱动。
# Data Representation
Aitel had it right with
SPIKE，我们已经仔细研究了每一个我可以得到的fuzzer，并且Sulley基于协议的block表示方法比其他的方法更简单，同时也代表了大多数协议的灵活性。Sulley利用基于block的方法生成单独的“request”。然后将这些请求绑定在一起形成“session”。首先，使用新名称进行初始化：
    s_initialize("new request")
现在，您开始向request添加基元，block和嵌套block。每个基元都可以单独渲染和变异。渲染原语以原始数据格式返回其内容。变异原语会转换其内部内容。渲染和变异的概念大部分是从fuzzer
developers中抽象出来的，所以不要担心。但是要知道当fuzzable values耗尽时，每个可变基元都会接受一个默认值.
## Static and Random Primitives
让我们从最简单的原语s_static（）开始，它为请求添加任意长度的静态不可变异值。Sulley中有各种别名，s_dunno（），s_raw（）和s_unknown（）都是s_static（）的别名：
    # these are all equivalent:（＃这些都是等价的：）
    s_static("pedram\x00was\x01here\x02")
    s_raw("pedram\x00was\x01here\x02")
    s_dunno("pedram\x00was\x01here\x02")
    s_unknown("pedram\x00was\x01here\x02")
基元，block等都采用可选的关键字名称作为参数。指定名称允许您通过request.namesname直接从请求访问命名项，而不必遍历block结构以到达所需元素。
与上述相关但不相同的是s_binary（）原语，它接受以多种格式表示的二进制数据。 SPIKE用户将识别此API，其功能（或者应该）与您已熟悉的相同:
    # yeah, it can handle all these formats.（＃是的，它可以处理所有这些格式。）
    s_binary("0xde 0xad be ef \xca fe 00 01 02 0xba0xdd f0 0d", name="complex")
Sulley的大多数原语都是由“fuzz heuristics”驱动的，因此具有有限数量的变异。
一个例外是s_random（）原语，它可用于生成不同长度的随机数据。
该原语采用两个必需参数'min_length'和'max_length'，分别指定在每次迭代时生成的随机数据的最小和最大长度。
该原语还接受以下可选关键字参数：
  * num_mutations: (integer, default=25) 恢复为默认值之前要进行的变异次数。
  * fuzzable: (boolean, default=True) 启用或禁用此原语的fuzzing测试。
  * name: (string, default=None) 与指定名称的所有Sulley对象一样，您可以在整个请求中直接访问此原语。
通常使用分隔符将字符串解析为子字段。 例如，空格字符用作HTTP请求“GET /index.html HTTP / 1.0”中的分隔符。
同一请求中的前斜杠（/）和点（。）字符也是分隔符。 在Sulley中定义协议时，请务必使用s_delim（）原语表示分隔符。
与其他原语一样，第一个参数是必需的，用于指定默认值。 与其他原语一样，s_delim（）接受选项'fuzzable'和'name'关键字参数。
分隔符突变包括重复，替换和排除。 作为一个完整的示例，请考虑以下基元序列来模糊HTMLbody标签。
    # fuzzes the string: 
    s_delim("")
## Fuzz Library Extensions
Sulley的原语包含一个内部的“fuzz library”，一个潜在的有趣的循环值列。 如果您不想破解源文件来扩展字符串和/或整数的fuzz
library，那么您可以轻松地进行外部操作,您只需在要启动模糊驱动程序的目录中创建.fuzz_strings或.fuzz_ints文件即可。
将每个模糊值放在它自己的行上。 Sulley将使用这些文件中的值在运行时更新原始库。
## Blocks
掌握了原语之后，让我们接下来看看它们如何组织和嵌套在block中。
使用closeslock_start（）定义和打开新block，并使用closeslock_end（）关闭。
必须为每个block指定一个名称，并将其指定为closeslock_start（）的第一个参数。 此例程还接受以下可选关键字参数：
  * group: (string, default=None) 与此block关联的组的名称，稍后将对此进行更多说明。
  * encoder: (function pointer, default=None)指向函数的指针，用于将呈现的数据传递到返回之前。
  * dep: (string, default=None) 可选原语，其特定值取决于此block。
  * dep_value: (mixed, default=None) 对于要呈现的block，字段“dep”必须包含的值。
  * dep_values: (list of mixed types, default=[]) 字段“dep”的值可以包含要呈现的block。
  * dep_compare (string, default="==")应用于依赖的比较方法。 有效选项包括："==", "!=", ">", ">=", "<" and "<=".
分组，编码和dependencies是大多数其他框架中没有的强大功能，值得进一步剖析。关于block的重要而简单的注释。 block关闭后无法更新例如：
    block-a:
    integer
    string
    size(block-b)
    block-b:
    integer
    Integer
适用于block-b的block-a中的sizer将永远不会在上述场景中呈现，这是因为当block关闭时，所有基元的渲染被bubbled up到block。
所以当block-b关闭并更新sizer时，它实际上并没有bubbled up。
这种限制只是暂时的，在将来可以得到解决。在这种情况下，简单地将sizer放在block-a之外即可。
### Groups
Groupping允许您将block绑定到group原语，以指定block应循环遍历group中每个值的所有可能变异。
例如，group原语用于表示具有类似参数结构的有效操作码或动词的列表。 原语s_group（）定义一个group并接受两个必需参数。
第一个指定group的名称，第二个指定要迭代的可能原始值的列表。 举一个简单的例子，考虑以下完整的Sulley请求，用于fuzz Web服务器：
    # import all of Sulley's functionality.
    from sulley import *
    # this request is for fuzzing: {GET,HEAD,POST,TRACE} /index.html HTTP/1.1
    # define a new block named "HTTP BASIC".
    s_initialize("HTTP BASIC")
    # define a group primitive listing the various HTTP verbs we wish to fuzz.
    s_group("verbs", values=["GET", "HEAD", "POST", "TRACE"])
    # define a new block named "body" and associate with the above group.
    if s_block_start("body", group="verbs"):
    # break the remainder of the HTTP request into individual primitives.
    s_delim(" ")
    s_delim("/")
    s_string("index.html")
    s_delim(" ")
    s_string("HTTP")
    s_delim("/")
    s_string("1")
    s_delim(".")