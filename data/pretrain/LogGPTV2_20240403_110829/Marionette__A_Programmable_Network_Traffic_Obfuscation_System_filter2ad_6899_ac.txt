be used to capture stateful and probabilistic communica-
tions between two parties. The notion of abstract actions
(and action-blocks) gives us a way to use models gener-
atively, too. In this section, we give a high-level descrip-
tion of an architecture that supports this use, so that we
may transport arbitrary datastreams via ciphertexts that
adhere to our models. We will discuss certain aspects
of our design in detail in subsequent sections. Figure ??
provides a diagram of this client-server proxy architec-
ture. In addition to models, this architecture consists of
the following components:
• The client-side driver runs the main event loop, in-
stantiates models (from a model speciﬁcation ﬁle,
see Section 6.3), and destructs them when they have
reached the end of their execution. The complimen-
tary receiver-side broker is responsible for listening
to incoming connections and constructing and de-
structing models.
• Plugins are the mechanism that allow user-speciﬁed
actions to be invoked in action-blocks. We discuss
plugins in greater detail in Section 6.2.
372  24th USENIX Security Symposium 
USENIX Association
data  
src.
formats
muxer
driver
plugins
model
model
...
channel
channel
...
plugins
dmuxer
data  
sink
broker
model
model
...
create new model/channel?
marionette client
formats
marionette server
Figure 4: A high-level diagram of the Marionette client-server architecture and its major components for the client-server stream
of communications in the Marionette system.
• The client-side multiplexer is an interface that al-
lows plugins to serialize incoming datastreams into
bitstrings of precise lengths, to be encoded into
messages via plugins. The receiver-side demulti-
plexer parses and deserializes streams of cells to
recover the underlying datastream. We discuss
the implementation details of our (de)multiplexer
in Section 6.1.
• A channel is a logical construct that connects Mar-
ionette models to real-world (e.g., TCP) data con-
nections, and represents the communications be-
tween a speciﬁc pair of Marionette models. We note
that, over the course of a channel’s lifetime, it may
be associated with multiple real-world connections.
Let’s start by discussing how data traverses the compo-
nents of a Marionette system. A datastream’s ﬁrst point
of contact with the system is the incoming multiplexer,
where it enters a FIFO buffer. Then a driver invokes a
model that, in turn, invokes a plugin that wants to encode
n bits of data into a message. Note that if the FIFO buffer
is empty, the multiplexer returns a string that contains no
payload data and is padded to n bits. The resultant mes-
sage produced by the plugin is then relayed to the server.
Server-side, the broker attempts to dispatch the received
message to a model. There are three possible outcomes
when the broker dispatches the message: (1) an active
model is able to process it, (2) a new model needs to be
spawned, or (3) an error has occurred and the message
cannot be processed. In case 1 or 2, the cell is forwarded
to the demultiplexer, and onward to its ultimate destina-
tion. In case 3, the server enters an error state for that
message, where it can respond to a non-Marionette con-
nection. We also note that the Marionette system can, in
fact, operate with some of its components disabled. As
an example, by disabling the multiplexer/demultiplexer
we have a trafﬁc generation system that doesn’t carry ac-
tual data payloads, but generates trafﬁc that abides by our
model(s). This shows that there’s a clear decoupling of
our two main system features: control over cover trafﬁc
and relaying datastreams.
6
Implementation
Our implementation of Marionette consists of two com-
mand line applications, a client and server, which share
a common codebase, and differ only in how they inter-
pret a model. (e.g., initiate connection vs. receive con-
nection) Given a model and its current state, each party
determines the set of valid transitions and selects one ac-
cording to the model’s transition probabilities. In cases
where normal transitions and error transitions are both
valid, the normal transitions are preferred.
Our prototype of Marionette is written in roughly three
thousand lines of Python code. All source code and en-
gineering details are available as free and open-source
software2. In this section, we will provide an overview
of some of the major engineering obstacles we overcame
to realize Marionette.
6.1 Record Layer
First, we will brieﬂy describe the Marionette record layer
and its objectives and design. Our record layer aims to
achieve three goals: (1) enable multiplexing and reliabil-
ity of multiple, simultaneous datastreams, (2) aid Mari-
onette in negotiating and initializing models, and (3) pro-
vide privacy and authenticity of payload data. We imple-
ment the record layer using variable-length cells, as de-
picted in Figure 5, that are relayed between the client and
server. In this section, we will walk through each of our
goals and discuss how our record layer achieves them.
Multiplexing of datastreams. Our goal is to enable re-
liability and in-order delivery of datastreams that we tun-
nel through the Marionette system. If multiple streams
are multiplexed over a single marionette channel, it must
be capable of segmenting these streams. We achieve this
by including a datastream ID and datastream sequence
number in each cell, as depicted in Figure 5. Sender
side, these values are populated at the time of the cell
2https://github.com/kpdyer/marionette
USENIX Association  
24th USENIX Security Symposium  373
31
0
16
cell length
payload length
model UUID
model ﬂags
model instance ID
datastream ID
datastream ﬂags
datastream sequence number
payload (variable length)
padding (variable length)
Figure 5: Format of the plaintext Marionette record layer cell.
creation. Receiver side, these values used to reassem-
ble streams and delegate them to the appropriate data
sink. The datastream ﬂags ﬁeld may have the value of
OPEN, RELAY or CLOSE, to indicate the state of the
datastream.
Negotiation and initialization of Marionette models.
Upon accepting an incoming message, a Marionette re-
ceiver iterates through all transitions from the given
model’s start state. If one of the action blocks for a transi-
tion is successful, the underlying record layer (Figure 5)
is recovered and then processed. The model ﬂags ﬁeld,
in Figure 5, may have three values: START, RUNNING,
or END. A START value is set when this is the ﬁrst
cell transmitted by this model, otherwise the value is
set to RELAY until the ﬁnal transmission of the model
where an END is sent. The model UUID ﬁeld is a global
identiﬁer that uniquely identiﬁes the model that trans-
mitted the message. The model instance ID is used to
uniquely identify the instance of the model that relayed
the cell from amongst all currently running instances of
the model.
For practical purposes, in our proof of concept, we as-
sume that a Marionette instance ID is created by either
the client or server, but not both. By convention, the
party that sends the ﬁrst information-carrying message
(i.e., ﬁrst-sender) initiates the instance ID. Once estab-
lished, the model instance ID has two potential uses. In
settings where we have a proxy between the Marionette
client and server, the instance ID can be used to deter-
mine the model that originated a message despite multi-
plexing performed by the proxy. In other settings, the in-
stance ID can be used to enhance performance and seed
a random number generator for shared randomness be-
tween the client and server.
K1
Encryption of the cell.
We encrypt each record-
layer cell M using a slightly modiﬁed encrypt-
then-MAC authenticated encryption scheme, namely
C = AESK1(IV1(cid:31)(cid:30)|M|(cid:28))(cid:31)CTR[AES]IV2
(M )(cid:31)T , where
IV1 = 0(cid:31)R and IV2 = 1(cid:31)R for per-message random R.
The ﬁrst component of the encrypted record is a header.
Here we use AES with key K1 to encrypt IV1 along with
an encoding of the length of M 3. The second compo-
nent is the record body, which is the counter-mode en-
cryption of M under IV2 and key K1, using AES as the
underlying blockcipher4. Note that CTR can be length-
preserving, not sending IV2 as part of its output, be-
cause IV2 is recoverable from IV1. The third and com-
ponent is an authentication tag T resulting from run-
ning HMAC-SHA256K2 over the entire record header
and record body. One decrypts in the standard manner
for encrypt-then-MAC.
6.2 Plugins
User-speciﬁed plugins are used to execute actions de-
scribed in each model’s action blocks. A plugin is called
by the Marionette system with four parameters: the cur-
rent channel, global variables shared across all active
models, local variables scoped to our speciﬁc model, and
the input parameters for this speciﬁc plugin (e.g., the
FTE regex or the template grammar).
It is the job of
the plugin to attempt its action given the input parame-
ters. By using global and local dictionaries, plugins can
maintain long-term state and even enable message pass-
ing between models. We place few restrictions on plu-
gins, however we do require that if a plugin fails (e.g.,
couldn’t receive a message) it must return a failure ﬂag
and revert any changes it made when attempting to per-
form the action. Meanwhile, if it encounters a fatal error
(e.g., channel is unexpectedly closed) then it must throw
an exception.
To enable multi-level models, we provide a spawn plu-
gin that can be used to spawn new model instances. In
addition, we provide puts and gets for the purpose of
transmitting static strings. As one example, this can be
used to transmit a static, non-information carrying ban-
ner to emulate an FTP server.
In addition, we imple-
mented FTE and template grammars (Section 4) as our
primary message-level plugins. Each plugin has a syn-
chronous (i.e., blocking) and asynchronous (i.e., non-
blocking) implementation. The FTE plugin is a wrapper
around the FTE5 and regex2dfa6 libraries used by the Tor
Project for FTE [15].
3One could also use the cell-length ﬁeld in place of (cid:31)|M|(cid:29).
4Since IV1 (cid:28)= IV2 we enforce domain separation between the uses
of AESK1. Without this we would need an extra key.
5https://github.com/kpdyer/libfte
6https://github.com/kpdyer/regex2dfa
374  24th USENIX Security Symposium 
USENIX Association
6.3 The Marionette DSL
Finally, we present a domain-speciﬁc language that can
be used to compactly describe Marionette models. We
refer to the formats that are created using this language
as Marionette model speciﬁcations or model speciﬁca-
tions for short. Figure 6 shows the Marionette modeling
language syntax.
We have two primary, logical blocks in the model
speciﬁcation. The connection block is responsible for
establishing model states, actions blocks that are exe-
cuted upon a transition, and transition probabilities. An
error transition may be speciﬁed for each state and is
taken if all other potential transitions encounter a fatal
error. The action block is responsible for deﬁning a set
of actions, which is a line for each party (client or server)
and the plugin the party should execute. Let’s illustrate
the Marionette language by considering the following ex-
ample.
Example: Simple HTTP model speciﬁcation. Re-
call the model in Figure 3, which (partially) captures an
HTTP connection where the ﬁrst client-server message
is an HTTP get for a JS or PNG ﬁle. Translating the
diagram into our Marionette language is a straightfor-
ward process. First, we establish our connection block
and specify tcp and port 80 — the server listens on this
port and the client connects to it. For each transition we
create an entry in our connection block. As an example,
we added a transition between the http_get_png and
http_404 state with probability 0.1. For this transition
we execute the get_png action block. We repeat this
process for all transitions in the model ensuring that we
have the appropriate action block for each transition.
For each action block we use synchronous FTE. One
party is sending, one is receiving, and neither party can
advance to the next state until the action successfully
completes. Marionette transparently handles the open-
ing and closing of the underlying TCP connection.
7 Case Studies
We evaluate the Marionette implementation described
in Section 6 by building model speciﬁcations for a
breadth of scenarios: protocol misidentiﬁcation against
regex-based DPI, protocol compliance for complex state-
ful protocols, traversal of proxy systems that actively ma-
nipulate Marionette messages, controlling statistical fea-
tures of trafﬁc, and responding to network scanners. We
then conclude this section with a performance analysis
of the formats considered.
For each case study, we analyze the performance
of Marionette for the given model speciﬁcation using
connection([connection_type]):
start [dst] [block_name] [prob | error]
[src] [dst] [block_name] [prob | error]
...
[src]
[block_name] [prob | error]
end
action [block_name]:
[client | server] plugin(arg1, arg2, ...)
...
connection(tcp, 80):
start
start
http_get_png http_404
http_get_png http_ok_png
http_ok_png
...
http_get_js
NULL
http_get_png NULL
0.25
0.7
get_png 0.1
get_png 0.9
action get_png:
client fte.send("GET /\w+ HTTP/1\.1...")
action ok_png:
server fte.send("HTTP/1\.1 200 OK...")
...
Figure 6: Top: The Marionette DSL. The connection block is
responsible for establishing the Marionette model, its states and
transitions probabilities. Optionally, the connection_type
parameter speciﬁes the type of channel that will be used for the
model. Bottom: The partial model speciﬁcation that imple-
ments the model from Figure 3.
our testbed. In our testbed, we deployed our Marionette
client and server on Amazon Web Services m3.2xlarge
instances, in the us-west (Oregon) and us-east (N. Vir-
ginia) zones, respectively. These instances include 8 vir-
tual CPUs based on the Xeon E5-2670 v2 (Ivy Bridge)
processor at 2.5GHz and 30GB of memory. The aver-
age round-trip latency between the client and server was
75ms. Downstream and upstream goodput was measured
by transmitting a 1MB ﬁle, and averaged across 100 tri-
als. Due to space constraints we omit the full model
speciﬁcations used in our experiments, but note that each
of these speciﬁcations is available with the Marionette
source code7.
7.1 Regex-Based DPI
As our ﬁrst case study, we conﬁrm that Marionette is able
to generate trafﬁc that is misclassiﬁed by regex-based
DPI as a target protocol of our choosing. We are repro-
ducing the tests from [15], using the regular expressions
referred to as manual-http, manual-ssh and manual-smb
in order to provide a baseline for the performance of the
Marionette system under the simplest of speciﬁcations.
Using these regular expressions, we engineered a Mari-
7https://github.com/kpdyer/marionette
USENIX Association  
24th USENIX Security Symposium  375
Target Protocol
HTTP (manual-http from [15])
SSH (manual-ssh from [15])
SMB (manual-smb from [15])
Misclassiﬁcation
bro [28] YAF [22]
100%
100%
100%
100%
100%
100%
Figure 7: Summary of misclassiﬁcation using existing FTE for-
mats for HTTP, SSH, and SMB.
onette model that invokes the non-blocking implementa-
tion of our FTE plugins.
For each conﬁguration we generated 100 datastreams
in our testbed and classiﬁed this trafﬁc using bro [28]
(version 2.3.2) and YAF [22] (version 2.7.1.) We con-
sidered it a success if the classiﬁer reported the manual-
http datastreams as HTTP, the manual-ssh datastreams
as SSH, and so on.
In all six cases (two classiﬁers,
three protocols) we achieved 100% success. These re-
sults are summarized in Figure 7. All three formats
exhibited similar performance characteristics, which is
consistent with the results from [15]. On average, we
achieved 68.2Mbps goodput for both the upstream and
downstream directions, which actually exceeds the good-
put reported in [15].