线​​​​​​​程​​​​​​​中​​​​​​​会​​​​​​​为​​​​​​​每​​​​​​​个​​​​​​​单​​​​​​​一​​​​​​​线​​​​​​​程​​​​​​​复​​​​​​​制​​​​​​​数​​​​​​​据​​​​​​​（写​​​​​​​时​​​​​​​复​​​​​​​制​​​​​​​）。​​​​​​​数​​​​​​​据​​​​​​​不​​​​​​​是​​​​​​​默​​​​​​​认​​​​​​​共​​​​​​​享​​​​​​​的​​​​​​​，因​​​​​​​为​​​​​​​用​​​​​​​户​​​​​​​应​​​​​​​该​​​​​​​可​​​​​​​以​​​​​​​定​​​​​​​义​​​​​​​数​​​​​​​据​​​​​​​共​​​​​​​享​​​​​​​等​​​​​​​级​​​​​​​。​​​​​​​必​​​​​​​须​​​​​​​包​​​​​​​括​​​​​​​共​​​​​​​享​​​​​​​
[**threads::shared**]{.application}
模​​​​​​​块​​​​​​​的​​​​​​​数​​​​​​​据​​​​​​​。​​​​​​​但​​​​​​​是​​​​​​​数​​​​​​​据​​​​​​​不​​​​​​​仅​​​​​​​仅​​​​​​​是​​​​​​​被​​​​​​​复​​​​​​​制​​​​​​​（写​​​​​​​时​​​​​​​复​​​​​​​制​​​​​​​），该​​​​​​​模​​​​​​​块​​​​​​​还​​​​​​​为​​​​​​​这​​​​​​​些​​​​​​​数​​​​​​​据​​​​​​​生​​​​​​​成​​​​​​​了​​​​​​​捆​​​​​​​绑​​​​​​​变​​​​​​​量​​​​​​​，这​​​​​​​就​​​​​​​需​​​​​​​要​​​​​​​更​​​​​​​多​​​​​​​的​​​​​​​时​​​​​​​间​​​​​​​，且​​​​​​​速​​​​​​​度​​​​​​​更​​​​​​​慢​​​​​​​。​​​​​​​
[⁠]{#Developer_Tips.html#idm140289451350560}[^\[3\]^](#Developer_Tips.html#ftn.idm140289451350560){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
::: para
::: {.title xmlns:d="http://docbook.org/ns/docbook"}
C
:::
C
线​​​​​​​程​​​​​​​共​​​​​​​享​​​​​​​同​​​​​​​一​​​​​​​内​​​​​​​存​​​​​​​，每​​​​​​​个​​​​​​​线​​​​​​​程​​​​​​​都​​​​​​​有​​​​​​​自​​​​​​​己​​​​​​​的​​​​​​​栈​​​​​​​，同​​​​​​​时​​​​​​​内​​​​​​​核​​​​​​​不​​​​​​​一​​​​​​​定​​​​​​​要​​​​​​​生​​​​​​​成​​​​​​​新​​​​​​​的​​​​​​​文​​​​​​​件​​​​​​​描​​​​​​​述​​​​​​​符​​​​​​​并​​​​​​​分​​​​​​​配​​​​​​​新​​​​​​​的​​​​​​​内​​​​​​​存​​​​​​​空​​​​​​​间​​​​​​​。​​​​​​​C
可​​​​​​​以​​​​​​​真​​​​​​​正​​​​​​​在​​​​​​​更​​​​​​​多​​​​​​​线​​​​​​​程​​​​​​​中​​​​​​​使​​​​​​​用​​​​​​​更​​​​​​​多​​​​​​​ CPU
支​​​​​​​持​​​​​​​。​​​​​​​因​​​​​​​此​​​​​​​要​​​​​​​最​​​​​​​大​​​​​​​化​​​​​​​您​​​​​​​的​​​​​​​线​​​​​​​程​​​​​​​性​​​​​​​能​​​​​​​，请​​​​​​​使​​​​​​​用​​​​​​​低​​​​​​​级​​​​​​​语​​​​​​​言​​​​​​​，比​​​​​​​如​​​​​​​ C 或​​​​​​​者​​​​​​​
C++。​​​​​​​如​​​​​​​果​​​​​​​您​​​​​​​使​​​​​​​用​​​​​​​脚​​​​​​​本​​​​​​​语​​​​​​​言​​​​​​​，请​​​​​​​考​​​​​​​虑​​​​​​​写​​​​​​​入​​​​​​​一​​​​​​​个​​​​​​​ C
绑​​​​​​​定​​​​​​​。​​​​​​​请​​​​​​​使​​​​​​​用​​​​​​​分​​​​​​​析​​​​​​​器​​​​​​​识​​​​​​​别​​​​​​​不​​​​​​​能​​​​​​​很​​​​​​​好​​​​​​​执​​​​​​​行​​​​​​​的​​​​​​​代​​​​​​​码​​​​​​​。​​​​​​​
[⁠]{#Developer_Tips.html#idm140289451806944}[^\[4\]^](#Developer_Tips.html#ftn.idm140289451806944){.footnote
xmlns:d="http://docbook.org/ns/docbook"}
:::
:::
::: section
::: titlepage
# [⁠]{#Developer_Tips.html#Developer_Tips-Wake-ups}A.2. 唤​​​​​​​醒​​​​​​​ {.title}
:::
::: para
很​​​​​​​多​​​​​​​应​​​​​​​用​​​​​​​程​​​​​​​序​​​​​​​都​​​​​​​会​​​​​​​扫​​​​​​​描​​​​​​​配​​​​​​​置​​​​​​​文​​​​​​​件​​​​​​​中​​​​​​​的​​​​​​​更​​​​​​​改​​​​​​​。​​​​​​​在​​​​​​​很​​​​​​​多​​​​​​​情​​​​​​​况​​​​​​​下​​​​​​​，这​​​​​​​种​​​​​​​扫​​​​​​​描​​​​​​​的​​​​​​​时​​​​​​​间​​​​​​​间​​​​​​​隔​​​​​​​是​​​​​​​固​​​​​​​定​​​​​​​的​​​​​​​，例​​​​​​​如​​​​​​​：每​​​​​​​分​​​​​​​钟​​​​​​​。​​​​​​​这​​​​​​​可​​​​​​​能​​​​​​​是​​​​​​​个​​​​​​​问​​​​​​​题​​​​​​​，因​​​​​​​为​​​​​​​它​​​​​​​强​​​​​​​制​​​​​​​将​​​​​​​磁​​​​​​​盘​​​​​​​从​​​​​​​低​​​​​​​转​​​​​​​速​​​​​​​状​​​​​​​态​​​​​​​唤​​​​​​​醒​​​​​​​。​​​​​​​最​​​​​​​佳​​​​​​​解​​​​​​​决​​​​​​​方​​​​​​​案​​​​​​​是​​​​​​​找​​​​​​​到​​​​​​​合​​​​​​​理​​​​​​​的​​​​​​​时​​​​​​​间​​​​​​​间​​​​​​​隔​​​​​​​，好​​​​​​​的​​​​​​​检​​​​​​​查​​​​​​​机​​​​​​​制​​​​​​​或​​​​​​​者​​​​​​​使​​​​​​​用​​​​​​​
[**inotify**]{.application}
检​​​​​​​查​​​​​​​并​​​​​​​响​​​​​​​应​​​​​​​每​​​​​​​个​​​​​​​事​​​​​​​件​​​​​​​。​​​​​​​[**Inotify**]{.application}
可​​​​​​​查​​​​​​​看​​​​​​​文​​​​​​​件​​​​​​​或​​​​​​​者​​​​​​​目​​​​​​​录​​​​​​​中​​​​​​​的​​​​​​​各​​​​​​​种​​​​​​​更​​​​​​​改​​​​​​​。​​​​​​​
:::
::: para
例​​​​​​​如​​​​​​​：
:::
``` programlisting
​int fd;
​fd = inotify_init();
​int wd;
​/* checking modification of a file - writing into */
​wd = inotify_add_watch(fd, "./myConfig", IN_MODIFY);
​if (wd 
# [⁠]{#Developer_Tips.html#Developer_Tips-Fsync}A.3. Fsync {.title}
:::
::: para
`Fsync`{.function} 被​​​​​​​视​​​​​​​为​​​​​​​大​​​​​​​量​​​​​​​消​​​​​​​耗​​​​​​​ I/O
的​​​​​​​操​​​​​​​作​​​​​​​，但​​​​​​​这​​​​​​​并​​​​​​​不​​​​​​​完​​​​​​​全​​​​​​​正​​​​​​​确​​​​​​​。​​​​​​​例​​​​​​​如​​​​​​​：参​​​​​​​见​​​​​​​ Theodore Ts\'o\'s 的​​​​​​​文​​​​​​​章​​​​​​​*《​​​​​​​不​​​​​​​要​​​​​​​害​​​​​​​怕​​​​​​​
fsync！》​​​​​​​*
[⁠]{#Developer_Tips.html#idm140289451378384}[^\[5\]^](#Developer_Tips.html#ftn.idm140289451378384){.footnote
xmlns:d="http://docbook.org/ns/docbook"} 以​​​​​​​及​​​​​​​附​​​​​​​带​​​​​​​的​​​​​​​讨​​​​​​​论​​​​​​​。​​​​​​​
:::
::: para
[**Firefox**]{.application} 原​​​​​​​来​​​​​​​在​​​​​​​用​​​​​​​户​​​​​​​每​​​​​​​次​​​​​​​点​​​​​​​击​​​​​​​一​​​​​​​个​​​​​​​链​​​​​​​接​​​​​​​时​​​​​​​都​​​​​​​调​​​​​​​用​​​​​​​
[**sqlite**]{.application}
程​​​​​​​序​​​​​​​库​​​​​​​进​​​​​​​入​​​​​​​新​​​​​​​的​​​​​​​页​​​​​​​面​​​​​​​。​​​​​​​[**Sqlite**]{.application} 调​​​​​​​用​​​​​​​
`fsync`{.function}，且​​​​​​​由​​​​​​​于​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​设​​​​​​​置​​​​​​​（主​​​​​​​要​​​​​​​使​​​​​​​用​​​​​​​数​​​​​​​据​​​​​​​排​​​​​​​序​​​​​​​模​​​​​​​式​​​​​​​的​​​​​​​
ext3），什​​​​​​​么​​​​​​​都​​​​​​​不​​​​​​​发​​​​​​​生​​​​​​​时​​​​​​​会​​​​​​​有​​​​​​​一​​​​​​​个​​​​​​​长​​​​​​​时​​​​​​​间​​​​​​​延​​​​​​​迟​​​​​​​。​​​​​​​如​​​​​​​果​​​​​​​另​​​​​​​一​​​​​​​个​​​​​​​进​​​​​​​程​​​​​​​同​​​​​​​时​​​​​​​正​​​​​​​在​​​​​​​复​​​​​​​制​​​​​​​一​​​​​​​个​​​​​​​大​​​​​​​文​​​​​​​件​​​​​​​，这​​​​​​​就​​​​​​​需​​​​​​​要​​​​​​​很​​​​​​​长​​​​​​​的​​​​​​​时​​​​​​​间​​​​​​​（最​​​​​​​长​​​​​​​可​​​​​​​达​​​​​​​
30 秒​​​​​​​）。​​​​​​​
:::
::: para
但​​​​​​​在​​​​​​​另​​​​​​​一​​​​​​​个​​​​​​​示​​​​​​​例​​​​​​​中​​​​​​​根​​​​​​​本​​​​​​​不​​​​​​​使​​​​​​​用​​​​​​​ `fsync`{.function}，则​​​​​​​在​​​​​​​切​​​​​​​换​​​​​​​到​​​​​​​ ext4
文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​时​​​​​​​出​​​​​​​了​​​​​​​问​​​​​​​题​​​​​​​。​​​​​​​Ext3
是​​​​​​​被​​​​​​​设​​​​​​​定​​​​​​​为​​​​​​​数​​​​​​​据​​​​​​​排​​​​​​​序​​​​​​​模​​​​​​​式​​​​​​​，它​​​​​​​会​​​​​​​每​​​​​​​几​​​​​​​秒​​​​​​​钟​​​​​​​排​​​​​​​空​​​​​​​一​​​​​​​次​​​​​​​内​​​​​​​存​​​​​​​并​​​​​​​将​​​​​​​其​​​​​​​保​​​​​​​存​​​​​​​到​​​​​​​磁​​​​​​​盘​​​​​​​中​​​​​​​。​​​​​​​但​​​​​​​
ext4
使​​​​​​​用​​​​​​​的​​​​​​​是​​​​​​​笔​​​​​​​记​​​​​​​本​​​​​​​电​​​​​​​脑​​​​​​​模​​​​​​​式​​​​​​​，保​​​​​​​存​​​​​​​内​​​​​​​存​​​​​​​的​​​​​​​时​​​​​​​间​​​​​​​间​​​​​​​隔​​​​​​​较​​​​​​​长​​​​​​​，且​​​​​​​可​​​​​​​能​​​​​​​在​​​​​​​系​​​​​​​统​​​​​​​意​​​​​​​外​​​​​​​关​​​​​​​闭​​​​​​​时​​​​​​​丢​​​​​​​失​​​​​​​数​​​​​​​据​​​​​​​。​​​​​​​现​​​​​​​在​​​​​​​
ext4 有​​​​​​​一​​​​​​​个​​​​​​​补​​​​​​​丁​​​​​​​，但​​​​​​​我​​​​​​​们​​​​​​​必​​​​​​​须​​​​​​​仍​​​​​​​在​​​​​​​设​​​​​​​计​​​​​​​应​​​​​​​用​​​​​​​程​​​​​​​序​​​​​​​时​​​​​​​小​​​​​​​心​​​​​​​谨​​​​​​​慎​​​​​​​，正​​​​​​​确​​​​​​​使​​​​​​​用​​​​​​​
`fsync`{.function}。​​​​​​​
:::