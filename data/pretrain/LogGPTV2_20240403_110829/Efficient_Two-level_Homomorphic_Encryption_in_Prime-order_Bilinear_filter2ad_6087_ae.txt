(cid:18)
2,
e(❕1mb ❕1
e(❕1ρ , ❕2), 1,
$← Zp and sets
If i = 2, B chooses ρ, ˜ρ, ρ(cid:48), σ (cid:48), and τ (cid:48)
∗ =
c
Then B runs A(guess, c∗, s). When A terminates with output b(cid:48),
B outputs 1 if b = b(cid:48), otherwise outputs 0.
In this construction, if γ = α β then B perfectly simulates Game 3.
In contrast, if γ is independently random, B perfectly simulates
Game 4. Then |Pr[S3] − Pr[S4]| is identical to the probability that
B breaks the SXDH assumption in group G2. Therefore |Pr[S3] −
Pr[S4]| is negligible.
(cid:3)
(cid:48))
, σ
, τ
(cid:48)
.
Lemma 5.6.
|Pr[S4] − 1/2| = 0.
Proof. Since ˜ρ and ˜σ information-theoretically hide b from
the view of A, the output of A is independent of b. Therefore
Pr[S4] = Pr[b = b(cid:48)] = 1/2 holds.
(cid:3)
Combining all the lemmas, we conclude the theorem.
(cid:3)
6 PERFORMANCE AND IMPLEMENTATIONS
6.1 Evaluation from Sizes & Operation Counts
In this subsection, we describe an e(cid:28)ciency evaluation regarding
key/ciphertext sizes and computation time of our scheme based on
counting arguments. Along the way, we compare them with the
Freeman scheme [21]. We show comparisons for key and ciphertext
sizes in Table 2 and for operation counts in Table 3.
From Table 2, we can see that the sizes of secret key and public
key of our proposed scheme are both smaller than those of the
Freeman scheme [21]. On the other hand, the ciphertext sizes for
both schemes are exactly the same.
Table 2: Comparison for sizes
Freeman’s [21]
Ours
2,0,0,0
0,2,2,4
0,2,2,0
0,0,0,4
Size
|sk|
|pk|
|ct| level-1
|ct| level-2
∗ Each w,x,y,z denotes the number of elements of
Zp, G1, G2, GT, resp.
† |sk|, |pk|, |ct| denotes the size of secret key, public
key, and ciphertext (at level 1, 2), resp.
8,0,0,0
0,6,6,4
0,2,2,0
0,0,0,4
Table 3: Comparison for operation counts
1
2
1
2
1
2
Algo.
Level
KeyGen
Enc
Dec
Ours
Op. Exp. P. DL.
0
0,0,0 1,1,3 0
1,1,0 3,3,0 0
0
0
0,0,1 0,0,5 0
1
1,0,0 1,0,0 0
0,0,3 0,0,3 0
1
0
4,4,0 2,2,0 0
0
0,0,8 0,0,4 0
0,0,4 0,0,4 4
0
Freeman’s [21]
Op.
0,0,0
2,2,0
Exp. P. DL.
0
3,3,12 1
4,4,0
0
0
N/A
4,0,0
2,0,0
0
0,0,12 0,0,16 0
0
4,4,0
2,2,0
8
0,0,12 2,2,0
0,0,8
2,2,0
12
1
1
0
0
0
Add1
Add2
Mult
∗ Each tuple x, y, z in the column “Op.” denotes the number of
group operations in G1, G2, GT, resp.
† Each tuple x, y, z in the column “Exp.” denotes the number of
exponentiations in G1, G2, GT, resp.
‡ “P.” denotes the number of pairings.
§ “DL.” denotes the number of discrete logarithm computations.
∗∗ Operations in Zp are much cheaper, and hence omitted.
From Table 3, we can see that the numbers of operations in all
the algorithms except homomorphic addition on level-1 cipher-
text of our proposed scheme are lower than those of the Freeman
scheme [21]. In particular, the decryption for level-2 ciphertexts
and the homomorphic addition over level-2 ciphertexts are signi(cid:27)-
cantly improved due to the much lower numbers of pairings, which
are deemed the most costly part (cf. Table 6). For homomorphic
addition over level-1 ciphertexts, the computation costs for both
schemes are the same.
6.2 Software Implementation in x86
In this subsection, we show our experimental software implemen-
tation for the x86 architecture.
6.2.1 Parameter Choices. In order to implement e(cid:28)cient Type 3
pairing groups, we used Barreto–Naehrig (BN) curves [5]. A BN
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea6924+36u
4+36u
3+18u
2 = X
3+24u
2+6u+1 and p(u) = 36u
3 + b de(cid:27)ned over a prime (cid:27)eld
curve is an elliptic curve E : Y
Fq with the following properties: the order of Fq-rational points of
E, which is denoted by E(Fq), is a prime number p, and the primes
q and p are given by the following two polynomials for some u ∈ Z:
q(u) = 36u
2+6u+1,
and its embedding degree is 12. There exists a 6-th degree twist
E(cid:48) de(cid:27)ned over Fq2 with p divides the order of E(cid:48)(Fq2), and the
p-th roots of unity µp is contained in F∗
q12, and then we de(cid:27)ne
G1 := E(Fq), G2 by the order p subgroup of E(cid:48)(Fq2), and GT := µp,
and also de(cid:27)ne a Type 3 optimal pairing e : G1 × G2 → GT.
Recently, several researchers [38, 39, 53] presented improved
cryptanalysis methods for pairing groups and recommended recon-
sideration of parameter choice. Following [4, 42], we chose three
BN curves with the bit lengths of q and p are 254, 382, and 462 bits,
which are denoted by BN254, BN382, and BN462, respectively, in
order to evaluate the performance of various choices of security
levels. As mentioned above, each BN curve is de(cid:27)ned by an inte-
ger u. We used the following integers for de(cid:27)ning BN254, BN382,
and BN462: −(262 +255 +1) from [28], −(294 +276 +272 +1) from [28],
and 2114 + 2101 − 214 − 1 from [4], respectively.
The set P of messages that can be decrypted can be varied among
di(cid:29)erent applications. In the benchmark results of our software
implementation for the x86 architecture provided below, we show
that setting P := [0, 230 − 1] is feasible. That is, it can deal with the
message space of all bit strings of size less than or equal to 30 bits.
Some Optimizations. We now brie(cid:30)y describe some opti-
mizations in order to e(cid:28)ciently implement the proposed scheme.
To implement our proposed scheme, we used an open-sourced li-
brary called mcl, which is a fast and generic C++ library of pairings
(see performances of based operations already provided by mcl in
Appendix A.) Our implementation of the proposed scheme has been
included in mcl and made publicly available at the following URL.
6.2.2
https://github.com/herumi/mcl
We (cid:27)rst observe that, in all the required exponentiations in the
encryption algorithms and re-randomizations, their base points
are (cid:27)xed (which is included in the public key). For such a (cid:27)xed-
based exponentiations, we can speed up their computations by
using pre-computed look-up tables. We used pre-computed look-up
tables over G1, G2, and GT (the numbers of entries are speci(cid:27)ed
in Tables 4, 5, and 6), already implemented by the mcl library,
in order to accelerate the exponentiations in our experimental
implementation. For exponentiations in decryption, the base points
are varied (depending on ciphertexts), and the pre-computed look-
up table technique is not applicable in this case.
We next recall that decryption in our proposed scheme requires
to compute discrete logarithm for an encrypted small message. To
implement a signi(cid:27)cantly fast computation of discrete logarithm in
our experimental implementation, we used 220-entry precomputed
look-up tables. This technique is explained in Section 2.3.
6.2.3 Benchmark Result. We show the performances of each
primitive operation on Barreto–Naehrig curves [5] implemented
by the mcl library in Table 6 in Section A. We also show the per-
formances of our implementation of our proposed scheme with
several optimizations which are explained above in Table 4. All the
timings are measured on a standard desktop PC with Core i7-6700
(3.4GHz) CPU, using Ubuntu 16.04.3 LTS and a compiler GCC 7.0.1.
We wrote our scheme in C++ with the mcl library, and note that the
internal code for the multiple-precision integer arithmetic of the
mcl library is implemented by optimized x86 (x86-64) assembler.
According to Table 2, 3, and 6, we can estimate the performance
of our proposed scheme and the Freeman scheme [21]. For the rest
of this section, we evaluate and verify our e(cid:28)ciency claim of our
proposed scheme given in Table 1 based on these estimations. For
concreteness, we refer the properties and performances of BN462,
which is the most conservative parameter choice in our experiment.
Firstly, we evaluate the improvements on secret key and public
key sizes. We can see that the secret key of our proposed scheme is
4 times smaller than the Freeman scheme [21]. The public key of
our proposed scheme consists of 2 elements of G1, 2 elements of
G2, and 4 elements of GT. The bit length of a prime (cid:27)eld de(cid:27)ning
BN462 is 462 bits. By the de(cid:27)nitions of G1, G2, and GT, the bit
lengths of these elements are 924, 1848, and 5544 bit, respectively.
(These sizes might be further compressed, but we do not pursue so
in this paper.) Thus, the size of public key of our proposed scheme
is 27,720 bits. By a similar calculation, the size of public key of the
Freeman scheme is 38,808 bits. Hence, the size of public key of ours
is 100 · 38,808/27,720 ≈ 71% of the Freeman’s [21].
Next, we evaluate the improvements on computation speeds
of required algorithms. We simply substitute the timings shown
in Table 6 for the operation counts given in Table 3. Note that,
as mentioned above, all the exponentiations in all the encryption
algorithms and re-randomizations can be replaced by the exponen-
tiations with precomputed look-up table, hence we replaced these
exponentiations in this manner. In a case of estimation of the com-
putation time of homomorphic addition on level-2 ciphertext of our
proposed scheme, there are 8 group operations and 4 exponentia-
tions with precomputed look-up table over GT, hence, the estimated
time is 1099.76 micro-seconds. On the other hand, to estimate the
computation time of the Freeman scheme [21], there are 2 exponen-
tiations with precomputed look-up tables over G1 and G2, 12 group
operations over GT, and 8 pairings. By a similar calculation, the
estimated computation time of homomorphic addition on level-2
ciphertext of the Freeman scheme [21] is 19,861.41 micro-seconds.
Therefore, our proposed scheme is 100· 19,861.41/1099.76 ≈ 1806%
faster than the Freeman scheme [21].
Note that the input to one exponentiation over G1 and G2 in
encryption on level-1 ciphertext of our proposed scheme is a mes-
sage (from a small space). On the other hand, the input to two
exponentiations over G1 and G2 of the Freeman scheme is also a
message. To estimate the computation time of these encryption
algorithms, the ratio of the bit lengths of input message and the
order p is multiplied to the performance of these exponentiations.
We suppose that the bit length of the messages is 20. According to
Tables 3 and 6, estimated computation times of ours and the Free-
man’s are 1.00 +4.06 +2·(46.8 +144) +(20/462)·(46.8 +144) ≈ 394
and 2·(1.00 +4.06) +2·(46.8 +144) +2·(20/462)·(46.8 +144) ≈ 408
micro-seconds, respectively. Hence, the improvement of the level-
1 encryption algorithm of our proposed scheme is around 103%
(thus, a minor improvement). The remaining improvement claims
in Table 1 can be veri(cid:27)ed by estimating the rest analogously.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea693Table 4: The performances for our x86 implemen-
tation of our proposed scheme on Barreto–Naehrig
curves BN254, BN382, and BN462
Algo.
Level
Enc
Dec
1
2