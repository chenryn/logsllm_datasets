kernel32
mshtml
ieframe
kernelbase
ntdll
jscript9
rpcrt4
sechost
ws2 32
xmllite
before SB
70
76
129
34
96
113
22
62
133
82
10
after SB
63
66
10
22
81
65
6
20
11
29
2
execution path
40
14
3
6
0
19
4
6
0
10
1
Table III: Unique exception ﬁlters in different DLLs before and after
symbolic execution (SB).
DLL
# ﬁlter functions
before SB
x32
x64
17
9
60
7
33
128
6
29
21
54
25
71
5
19
50
11
26
126
25
55
10
0
after SB
x32
x64
15
2
50
3
2
9
0
17
19
39
15
23
4
3
8
1
1
4
17
3
2
0
user32
kernel32
mshtml
ieframe
kernelbase
ntdll
jscript9
rpcrt4
sechost
ws2 32
xmllite
C. Exception Handlers
To test the feasibility of our approach leveraging excep-
tion handlers, we collected the executed code blocks during
normal usage. Again we use Internet Explorer 11 (64bit) on
Windows 10 as an example. We instrumented the browser with
DynamoRIO and browsed again the top 500 websites from
alexa.com [1]. Then, we analyzed all DLLs that have been
loaded by the browser and extracted the exception handlers.
Afterwards, we reduced this set by symbolically executing
the corresponding ﬁlters and cross-referencing the remaining
exception handlers with those that have been visited.
Table II provides an overview of the amount of program
code that is guarded with C-speciﬁc exception handlers for a
subset of the loaded DLLs. In addition, the table shows the
code locations that are guarded with crash-resistant candidates
(including the exception handlers that use catch-all ﬁlters) as
well as their number of occurrences on the execution path.
For instance, there are 63 crash-resistant candidates from 70
exception handlers in user32.dll, whereby 40 code locations
that are guarded by those are executed while browsing the
most popular websites. Contrary, sechost.dll guards 133
code locations, whereby 11 crash-resistant candidates exist and
no guarded code location was triggered during our test. In
196
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
addition, Table III shows that symbolic execution signiﬁcantly
reduces the set of exception ﬁlters, since it drops the majority
of ﬁlter functions given that they are not ﬁt for our purposes.
As described before, we use symbolic execution to exclude all
ﬁlters that do not allow access violations to be handled. For
example, only 4 of 126 ﬁlter functions remain in sechost.dll,
while 9 of 129 are left in mshtml.dll. In total, we found
6,745 C-speciﬁc exception handlers in 187 analyzed DLLs.
These exception ﬁlters use 5,751 different ﬁlter functions. After
the symbolic execution, 808 ﬁlters remain that handle access
violations, including catch-all ﬁlters. These ﬁlter functions are
used by 1,797 exception handlers.
In the next step, we cross-referenced the visited code blocks
with those ﬁltered exceptions. These exception handlers may
lead to crash-resistant primitives that are known to be triggered.
In absolute numbers, these guarded code parts have been
triggered 736,512 times during our test, whereby 385 different
code parts have been visited. To sum up, this analysis step
reduced the target set from 6,745 to 385 C-speciﬁc handlers.
To further reduce the candidate set, we used our debugger
script to only select functions that are triggered via JavaScript.
For this we assumed that any function which has a reference
to part of the JavaScript engine in its call stack is valid. The
survivors after this step were then manually veriﬁed.
While we focused our code path analysis on Firefox and
Internet Explorer, the results of the previous analysis steps can
be reused for any application. This means the static analysis of
the system DLLs can be performed once and then be applied
to any target program.
VI. PROOF-OF-CONCEPT EXPLOITS
To demonstrate the practical applicability of our automati-
cally discovered crash-resistant primitives, we developed four
proof-of-concept exploits that we discuss next. Note that we
focussed on locating the memory oracle itself, so we assumed a
memory read/write primitive to be present. During our tests we
emulated such a vulnerability by modifying the target binary.
A. Internet Explorer 11
Our proof-of-concept exploit for Internet Explorer 11 relies
on the function MUTX::Enter contained in jscript9.dll. It
contains a call to EnterCriticalSection that is encapsulated
in a try-catch block. The exception ﬁlter address ﬁeld within
the scope table contains 0x1, which indicates that regardless of
the exception code, all exceptions are caught and the execution
resumes at the exception handler. The CRITICAL SECTION
structure passed to EnterCriticalSection lies within the
ScriptEngine object at a ﬁxed offset. The ScriptEngine
object also contains a status ﬁeld that
indicates whether
the last call to EnterCriticalSection failed. This status
ﬁeld is cleared before the call and set
in the exception
handler. The CRITICAL SECTION structure contains a pointer
to a debug info structure. Under certain circumstances,
EnterCriticalSection reads the ﬁeld at offset 0x10 from
that debug info structure. By setting three additional ﬁelds
of the CRITICAL SECTION structure to certain values, we can
force the correct circumstances. An attacker can overwrite
the pointer to debug info with x − 0x10 to probe address x.
MUTX::Enter is called by Internet Explorer’s JavaScript engine
once it processes new JavaScript code and thus, can easily be
triggered by adding a new script tag to the DOM.
B. Firefox 46
As another example, we chose Firefox 46.0.1 64bit on
Windows 10. As the general approach for both proof-of-concept
exploits is similar, we only highlight the key differences. In
contrast to Internet Explorer, where the exception handler
was located in the application itself, namely jscript9.dll,
the memory oracle in Firefox is due to an exception handler
in ntdll.dll. While all applications import this library, the
corresponding primitive was only on the execution path when
using Firefox. Another difference is that the exception handler
is not ﬂagged as catch-all, instead it excludes certain exception
types, but as it handles access violations it is usable for our
purposes. Due to the way the memory oracle is used within
the process, it does not require a manual trigger, instead a
background thread continuously calls the vulnerable function.
This means we only need to write the address to probe to the
appropriate object and read back the result after giving the
parallel thread a chance to probe.
C. Nginx 1.9
On Nginx, our framework found that the crash-resistant
primitive associated to the recv syscall becomes available
after the server receives a partial request. In detail, the server
allocates a Nginx-speciﬁc ngx buf t struct object for a
connection once some request data comes in (only deallocated
later, when request processing completes). In our proof-of-
concept exploit, we use parallel connections to implement
the individual memory probes. We ﬁrst send a recognizable
signature via a partial request over an independent connection,
so that the server allocates the buffer and saves the signature
therein. While the ﬁrst connection is waiting for the request
to complete, i.e. for a double newline marking the end of the
request, we use a second parallel connection to leak the buffer
object containing our signature. Once we leak it, we perform
arbitrary writes to the buffer to reinitialize it, i.e., set all its
pointers to the memory address we are probing for. Finally,
we send more data to complete a full request over the ﬁrst
connection. If the memory address overwritten in the buffer
was inaccessible, the server gracefully closes the connection
without sending back any response data. Otherwise, the server
sends the requested ﬁle back to the client over the connection.
D. Cherokee 1.2
On Cherokee, our framework found a crash-resistant prim-
itive associated to the epoll wait syscall. Unlike Nginx,
Cherokee’s default conﬁguration starts multiple threads to
serve parallel incoming requests. Each idle thread calls the
epoll wait syscall in a loop, with a timeout of 1 second
between iterations. Corrupting a given thread’s epoll object
pointer with an inaccessible memory address will cause the
197
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:22 UTC from IEEE Xplore.  Restrictions apply. 
thread to stop serving client requests and stall in a tight loop of
failing epoll wait invocations. This induces a performance
degradation attack on the Cherokee (lower capacity and higher
overhead), resulting in a timing side channel. In our proof-of-
concept exploit, we ﬁrst leak the location of a given thread’s
cherokee fdpoll epoll t object and then corrupt it to
probe memory. For each probe, we overwrite the struct
epoll event pointer in the target object and measure the
time for the server to handle 1,000 requests. We noticed there
is signiﬁcant time difference compared to the baseline when
even a single thread is non-functional. With all threads running
correctly (baseline), the server handles all the requests in 5.7
seconds, and when a single thread is non-functional, it does
so in 9.3 seconds (on average, with marginal variations across
runs). Based on the time difference, we can distinguish whether
the probed memory address is accessible (former case) or not
(latter case).
VII. DISCUSSION
In the following, we discuss limitations of our current
prototype implementations and reﬂect on the lessons learned.
We also explain the reasons for our disjoint approaches for
locating memory oracles on different operating systems.
A. Locating Primitives of Previous Work
To verify our tool chain, we searched for the known memory
oracles in both Internet Explorer and Firefox [22]. The primitive
in IE is based on an exception handler that is set to handle
all possible exceptions. As our tool looks for this kind of
exception handler, we were able to locate this candidate in an
automated way. After a security update, the handler handles
a set of exception classes conﬁgured by a system setting. To
detect this new version of the primitive, we had to manually
verify it due to the ﬁlter calling another function to allow
conﬁguring the behavior.
The primitive in Firefox, on the other hand, was not located
automatically because this application uses a vectored exception
handler (VEH) that is registered during runtime. As we do
not cover this class of handlers in our current prototype
implementation, our framework can not locate this candidate.
Note that this is not a fundamental limitation of our approach.
Further work can support this class by locating all calls to
AddVectoredExceptionHandler and extracting the handler
address. In addition, the semantics for the symbolic execution
need to be modiﬁed to account for the different function
prototype.
Oikonomopoulos et al. [35] recently introduced a technique
that allows an adversary to use allocations to narrow down the
location of reference-less memory. While not directly related to
crash-resistance, this method also provides a kind of memory
oracle, but it does not rely on any fault handling. However
it requires the availability of the kernel feature overcommit,
which is the ability to allocate more virtual memory than is
available as physical memory. We did not locate an allocation
oracle as it is completely different to the primitives we targeted.
B. Differences between results on Linux and Windows
On Linux we were able to directly target syscalls and their
crash-resistant nature. On Windows, certain system APIs also
provide a similar behavior, but as the Windows API often
contains more levels of abstraction, not all invalid arguments
are passed to the system calls and, instead, result in an exception
in the user-level code. However, we were still able to locate
such APIs on Windows.
Besides relying on system-level functionality, a user program