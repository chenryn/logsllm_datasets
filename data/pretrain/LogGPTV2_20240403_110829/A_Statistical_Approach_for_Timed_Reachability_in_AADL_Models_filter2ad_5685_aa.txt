title:A Statistical Approach for Timed Reachability in AADL Models
author:Harold Bruintjes and
Joost-Pieter Katoen and
David Lesens
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
A Statistical Approach for Timed Reachability in
AADL Models
Harold Bruintjes, Joost-Pieter Katoen
Software Modeling and Veriﬁcation Group
Email: {h.bruintjes,katoen}@cs.rwth-aachen.de
RWTH Aachen University, Germany
David Lesens
Airbus Defence and Space
Route de Verneuil
78133 France
Email: PI:EMAIL
Abstract—We introduce a simulator (slimsim) for a subset
of AADL extended with formalized behavioral semantics for
nominal and error models. The simulator allows to perform
probabilistic analysis using the Monte Carlo method, on linear-
hybrid, stochastic models, which describe a combination of
nominal and error behaviors of hard- and software components.
The tool supports the use of different strategies, which control
the behavior of the simulator when dealing with various forms
of non-determinism. The simulator is tested using benchmarks of
the COMPASS toolset, as well as a case study by Airbus Defense
and Space.
I.
INTRODUCTION
The design of safety critical systems requires a thorough
analysis to ensure that all the safety requirements are met.
In practice, this means that engineers must ensure that the
probability of failure for a system is below a given threshold.
Various methods are applied, such as Fault Tree Analysis, with
varying degrees of automation. In particular, the interest in
(safety) analysis of real-time systems is still growing, resulting
in the creation of new methods and tools.
As the main contribution of this paper, we present the
slimsim tool, which is a Monte Carlo simulator for speciﬁca-
tions written in an extended subset of the Architecture Analysis
& Design Language (AADL) [1]. It has been integrated into the
COMPASS toolset [2], featuring non-deterministic, real-time
and continuous stochastic semantics, which previously could
not be treated at the same time as the expressivity of all these
features goes beyond the capabilities of the numerical analysis
engines so far. Statistical model checking in these areas is not
new, and various tools such as UPPAAL-SMC [3], MODES [4]
and PLASMA-lab [5] exist, but either do not support part of
the semantics, or interpret it in a different way. In particular,
the slimsim tool can handle speciﬁcations with transitions
guarded by real-time constraints or triggered by exponential
distributions, and processes that may synchronize on a shared
alphabet of events. Non-determinism is resolved by different
strategies, allowing the simulation process to be tailored to the
speciﬁc needs of the analysis.
Additionally, by means of a small, synthetic case study we
show the effect of applying different strategies to resolve non-
determinism of the input model. Resolving non-determinism
is a well-known problem and various approaches are known,
including those mentioned in this paper as well as related work.
The paper is structured as follows: In Section II some
preliminary details are given concerning Monte Carlo analysis
and an overview of the COMPASS toolset and its SLIM
language. The implementation of the simulator is explained in
Section III, detailing its architecture, the use of strategies, and
parallelization. Section IV shows the results of a benchmark of
the simulator, followed by a case study performed on a larger
example in Section V.
II. PRELIMINARIES
A. Statistical Model Checking
Statistical model checking techniques [6] make use of the
Monte Carlo method to check the satisﬁability of a temporal
logic formula on a given model. Discrete event simulation is
used to randomly generate ﬁnite paths in the given model,
verifying whether or not some time-bounded property holds
for that path. As more paths are generated, better statistical
information about the property can be derived from these results.
This way the Monte Carlo approach approximates the
probability of the property holding based on the simulated
paths. As the outcome of each generated path can be seen as
some binary result (which is true if and only if the property
holds true), the outcomes of all paths can be seen as identically
distributed Bernoulli random variables. This allows various
statistical conclusions to be made using only a ﬁnite number
of paths.
Statistical model checking can be used both for qualitative
and quantitative purposes. Qualitative analysis is generally
based on hypothesis testing, determining whether a certain
property holds or not. The tool described in this paper focuses
on the analysis of quantitative properties, speciﬁcally timed
reachability properties, determining the probability that a given
property holds true.
B. Quantitative Statistical Analysis
In order to perform quantitative statistical analysis, we use
the Chernoff-Hoeffding (CH) bound, which is described in [7].
This bound is based on two parameters, δ and , which control
the statistical conﬁdence and error bound of the statistical
outcome respectively. These parameters drive the formula
P [| ¯
X − π0| ≤ ] = 1 − δ, stating that the probability of the
difference between the true probability π0 of the property and
the estimator ¯
X being bounded by  lies within the conﬁdence
1 − δ. The estimator ¯
X is determined by A/N, where the CH-
bound N is determined by the formula N = 4 ln( 2
δ )/2, and
A is the number of randomly generated paths satisfying the
property of interest.
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.32
DOI 10.1109/DSN.2015.32
81
81
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:59 UTC from IEEE Xplore.  Restrictions apply. 
C. COMPASS Toolset
The COMPASS toolset [2] was developed as part of several
research projects funded by the ESA in order to improve tool
capabilities for formal analysis during the early design stages
of for instance spacecraft [8]. As such, it is geared towards,
but not limited to, the space and avionics industry. The toolset
has successfully been used for various case studies by various
industrial partners and the ESA [9], [10], and is accessible
from http://compass.informatik.rwth-aachen.de.
The main modeling capabilities are expressed in the SLIM
language, a carefully designed dialect of AADL. It is used
to specify the system being analyzed (explained further in
Section II-D). This model can be analyzed in various ways:
Correctness analysis allows qualitative properties to be
checked using either BDD or SAT based model checking
[11], [12] (for explicit respectively bounded model checking),
abstracting from stochastic semantics.
Performability is its quantitative counterpart, translating the
input model to a Continuous Time Markov Chain (CTMC) or
Interactive Markov Chain (IMC) [13]. Here, real-time semantics
are abstracted away.
Properties for both analyses are expressed using user
friendly speciﬁcation patterns, which are translated into LTL,
CTL or CSL equivalents, based on the tool used to perform
that analysis.
Safety analysis allows the generation of Fault Trees and
FMEA (Failure Mode and Effects Analysis) tables for input
models containing failure modes. Furthermore, the Fault Trees
can be further evaluated to determine the probabilities of the
various events.
FDIR analysis can check whether certain fault conditions
in the model can be detected, isolated and recovered from.
These fault conditions are based on the notion of alarms and
observables, which are Boolean elements in the model that
may be triggered by certain conditions.
Finally, diagnosability [14] is supported, which veriﬁes that
the speciﬁcation is able to correctly diagnose faults, meaning
that a property expressing the diagnosis must either always or
never hold in any two states with the same set of observations.
D. The SLIM Language
The SLIM language [15] (short for System-Level Integrated
Modeling language) is strongly based on AADL, a language de-
veloped in the avionics and automotive industry [1]. It supports
the speciﬁcation of timed and hybrid systems (supporting linear
dynamics). Furthermore, it includes fault speciﬁcations, which
describe various possible causes of faults that can optionally
be triggered by events occurring with an exponential rate.
Nominal models are speciﬁed as sets of components,
representing various parts of the complete system, such as
processors, buses and threads. These components may contain
other (sub)components, which can either be another system
component, or a data component. Data components can be
deﬁned as integers (or ranges thereof), Booleans, real numbers,
and clock and continuous variables. The latter allow for the
speciﬁcation of timed or linear hybrid dynamics.
The behavior of components is speciﬁed by means of modes
and mode transitions. Transitions are triggered by a discrete
event, possibly internal, with an optional Boolean guard over
data components and optional side effects modifying data
components. Components can be connected by means of ports,
which can be data ports (where output values are expressions
over input values) or event ports. Data connections are limited
to the discrete and real types. Event port connections enable
transitions of various components to synchronize.
Based on the state of a component, its sub-components
may be enabled or disabled. This is referred to as dynamic
reconﬁguration, and allows modeling of e.g. integration or
removal of components, or change in their electrical state. This
can be used to model spare components for example, where
one component can be exchanged with another.
An example SLIM model is shown in Listing 1, which
represents a simpliﬁed GPS unit with two operational modes,
acquisition and active. When activated, the GPS at-
tempts to acquire a signal, which is speciﬁed to succeed within
two minutes (but no faster than ten seconds). It then switches
to an active mode, upon which a variable indicating a ﬁx,
measurement, is set to true.
Error models are speciﬁed separately from nominal models.
They describe fault behavior by means of error states and
transitions, similar to the modes and transitions of nominal
components. Transitions however are triggered either by error
events or error propagations. Error propagations are similar
to events in nominal speciﬁcations, and can synchronize with
other error components. Error events cannot synchronize, but
they are typically associated with exponential distributions,
controlling the rate at which they occur.
An error component can be associated with a nominal
component by means of fault injections, a process referred to
as model extension [15]. Fault injections specify the effect of
a fault occurring in the error model on the nominal model, by
means of modifying its data. Model extension automatically
adds error propagation connections between sibling components,
or components with a parent-child relationship, allowing them
to propagate.
An example error model
is depicted in Listing 2. In
this model, a system can switch from a nominal state, ok
in this example, to any error state (transient, hot, or
permanent) by means of an error event (with a different
rate for each type of fault), governed by an exponential
distribution. Recovery from a transient fault is possible by
a non-deterministic time delay in the interval [200,300] msec,
and from a hot fault by restarting (the @activation event).
E. Model Semantics
We present here a simpliﬁed version of the formal model
underlying the SLIM language, with the full semantics available
in [16]. It is similar to Priced Timed Automata [4], Stochastic
Timed Automata (STA) [17] and the Probabilistic timed
processes described in [18], but with small differences, most
notably pertaining to exponential rates for individual transitions,
support for event based synchronization and/or forms of non-
determinism.
8282
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:48:59 UTC from IEEE Xplore.  Restrictions apply. 
Listing 1. Example SLIM nominal model of a simple GPS unit
device gpsDevice features
measurement : out data port bool default false;
end gpsDevice;
device implementation gpsDevice.i
flows
modes
measurement := true in modes (active);
acquisition : activation mode
urgent in 2 min;
active
transitions
: mode;
acquisition -[ within 10 sec
to 2 min ]-> active;
end gpsDevice.i;
Listing 2. Example SLIM error model of a simple GPS unit
error model gpsError features
repair : out error propagation;
end gpsError;
error model implementation gpsError.i
: error event occurrence
poisson 0.1 per hour;
: error event occurrence
poisson 0.1 per day;
e_permanent : error event occurrence
poisson 0.01 per day;
events
e_trans
e_hot
states
ok
transient
hot
permanent
transitions