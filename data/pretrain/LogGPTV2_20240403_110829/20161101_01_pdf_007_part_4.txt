shared buffer够大, 第二次执行的时候应该全部hit.)
 Total runtime: 4637.805 ms -- 总的执行时间 (不包含parsing,rewriting,planing的时间以及网络数据传输的时间, 也不包含
after触发器的执行时间.)
 (7 rows)
EXPLAIN输出信息的解读
 组合行集例子 :
 digoal=# explain (analyze, verbose, costs, buffers, timing) select 1 union select 1; -- union去重
 QUERY PLAN
 Unique (cost=0.05..0.06 rows=2 width=0) (actual time=0.049..0.051 rows=1 loops=1)
 Output: (1)
 Buffers: shared hit=3
 -> Sort (cost=0.05..0.06 rows=2 width=0) (actual time=0.047..0.047 rows=2 loops=1)
 Output: (1)
 Sort Key: (1)
 Sort Method: quicksort Memory: 25kB
 Buffers: shared hit=3
 -> Append (cost=0.00..0.04 rows=2 width=0) (actual time=0.006..0.007 rows=2 loops=1)
 -> Result (cost=0.00..0.01 rows=1 width=0) (actual time=0.003..0.003 rows=1 loops=1)
 Output: 1
 -> Result (cost=0.00..0.01 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
 Output: 1
 Total runtime: 0.136 ms
 (14 rows)
EXPLAIN输出信息的解读
 嵌套连接例子
 nested loop join: The right relation is scanned once for every row found in the left relation. This strategy is easy to implement but
can be very time consuming. (However, if the right relation can be scanned with an index scan, this can be a good strategy. It is
possible to use values from the current row of the left relation as keys for the index scan of the right.)
 for tuple in 外(左)表查询 loop
 内(右)表查询(根据左表查询得到的行作为右表查询的条件依次输出最终结果)
 end loop;
 适合内(右)表的关联列发生在唯一键值列或者主键列上的情况.
EXPLAIN输出信息的解读
 嵌套连接例子
 digoal=# explain (analyze, verbose, costs, buffers, timing) select f.* from f,p where f.p_id=p.id and f.p_id Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.010 rows=9 loops=1) -- 外(左)表
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Only Scan using p_pkey on postgres.p (cost=0.29..2.19 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=9) -- 内(右)表
 Output: p.id
 Index Cond: (p.id = f.p_id)
 Heap Fetches: 9
 Buffers: shared hit=27
 Total runtime: 0.072 ms
 (13 rows)
EXPLAIN输出信息的解读
 嵌套循环例子2
 EXPLAIN SELECT *
 FROM tenk1 t1, tenk2 t2
 WHERE t1.unique1  Bitmap Heap Scan on tenk1 t1 (cost=4.36..39.47 rows=10 width=244)
 Recheck Cond: (unique1  Bitmap Index Scan on tenk1_unique1 (cost=0.00..4.36 rows=10 width=0)
 Index Cond: (unique1  Materialize (cost=0.29..8.51 rows=10 width=244) -- 物化节点, 小于work_mem时全部塞内存, 大时需要用到磁盘. 这里虽然是嵌套循环,
但是下面的索引扫描只有一次, 循环10次是在物化节点, 物化节点计算循环成本时, 只计算内存操作的成本.
 -> Index Scan using tenk2_unique2 on tenk2 t2 (cost=0.29..8.46 rows=10 width=244)
 Index Cond: (unique2  Seq Scan on postgres.p (cost=0.00..194.00 rows=10000 width=4) (actual time=0.014..2.016 rows=10000 loops=1) -- 外(左)表
 Output: p.id, p.info, p.crt_time
 Buffers: shared hit=94
 -> Hash (cost=2.45..2.45 rows=9 width=49) (actual time=0.017..0.017 rows=9 loops=1)
 Output: f.id, f.p_id, f.info, f.crt_time
 Buckets: 1024 Batches: 1 Memory Usage: 1kB -- 内(右)表加载到内存, hash key是join key f.p_id, 如果Batches大于1则会用到临时文件
 Buffers: shared hit=4
 -> Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.012 rows=9 loops=1) -- 内(右)表
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.012 rows=9 loops=1)
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Only Scan using p_pkey on postgres.p (cost=0.29..274.29 rows=10000 width=4) (actual time=0.017..0.022 rows=10 loops=1)
 Output: p.id
 Heap Fetches: 10
 Buffers: shared hit=4
 Total runtime: 0.118 ms
 (13 rows)
EXPLAIN输出信息的解读
 合并连接例子
 如果全表扫描+排序的成本低于使用索引扫描的成本, 那么将会选择全表扫描+排序的方式.
 EXPLAIN SELECT *
 FROM tenk1 t1, onek t2
 WHERE t1.unique1  Index Scan using tenk1_unique2 on tenk1 t1 (cost=0.29..656.28 rows=101 width=244)
 Filter: (unique1  Sort (cost=197.83..200.33 rows=1000 width=244) -- 成本200.33
 Sort Key: t2.unique2
 -> Seq Scan on onek t2 (cost=0.00..148.00 rows=1000 width=244) -- 全表扫描后排序
EXPLAIN输出信息的解读
 合并连接例子
 关闭排序功能.
 SET enable_sort = off;
 EXPLAIN SELECT *
 FROM tenk1 t1, onek t2
 WHERE t1.unique1  Index Scan using tenk1_unique2 on tenk1 t1 (cost=0.29..656.28 rows=101 width=244)
 Filter: (unique1  Index Scan using onek_unique2 on onek t2 (cost=0.28..224.79 rows=1000 width=244) -- 变成走索引了. 成本224.79, 所以没有强制关闭
排序的话, 会走全表+排序的方式.
EXPLAIN输出信息的解读
 外连接(Outer join)中: 查看执行计划时, 需要注意Join Filter和Filter的区别
 digoal=# create table j1(id int, info text);
 digoal=# create table j2(id int, info text);
Join Filter
 digoal=# insert into j1 values (1,'j1');
 digoal=# insert into j2 values (1,'j2');
 digoal=# explain select j1.*,j2.* from j1 left join j2 on (j1.id=j2.id and j1.info='no');
 QUERY PLAN
 -------------------------------------------------------------------
 Merge Left Join (cost=728.10..2905.54 rows=4960 width=72)
 Merge Cond: (j1.id = j2.id)
 Join Filter: (j1.info = 'no'::text) -- 外连接, ON子句中的过滤条件作为Join Filter, 外表即使不符合这个条件的行也被显示.
 -> Sort (cost=364.05..376.45 rows=4960 width=36)
 Sort Key: j1.id
 -> Seq Scan on j1 (cost=0.00..59.60 rows=4960 width=36)
 -> Sort (cost=364.05..376.45 rows=4960 width=36)
 Sort Key: j2.id
 -> Seq Scan on j2 (cost=0.00..59.60 rows=4960 width=36)
 (9 rows)
EXPLAIN输出信息的解读
 digoal=# select j1.*,j2.* from j1 left join j2 on (j1.id=j2.id and j1.info='no');
 id | info | id | info
 ----+------+----+------
 1 | j1 | | Filter
 (1 row)
 digoal=# explain select j1.*,j2.* from j1 left join j2 on (j1.id=j2.id) where j1.info='no';
 QUERY PLAN
 -----------------------------------------------------------------
 Hash Right Join (cost=72.31..162.91 rows=620 width=72)
 Hash Cond: (j2.id = j1.id)
 -> Seq Scan on j2 (cost=0.00..59.60 rows=4960 width=36)
 -> Hash (cost=72.00..72.00 rows=25 width=36)
 -> Seq Scan on j1 (cost=0.00..72.00 rows=25 width=36)
 Filter: (info = 'no'::text) -- Filter 过滤条件, 外表也将被过滤, 因为这个节点是关联节点的子节点.
 (6 rows)
 digoal=# select j1.*,j2.* from j1 left join j2 on (j1.id=j2.id) where j1.info='no';
 id | info | id | info
 ----+------+----+------
 (0 rows)
EXPLAIN输出信息的解读
 使用inner join 时, Join Filter和Filter效果一样. 不符合条件的都会被过滤掉.
Join Filter
 digoal=# explain select j1.*,j2.* from j1 inner join j2 on (j1.id=j2.id and j1.info='no');
 QUERY PLAN
 -------------------------------------------------------------------
 Merge Join (cost=110.88..117.43 rows=37 width=72)
 Merge Cond: (j1.id = j2.id)
 -> Sort (cost=25.45..25.47 rows=6 width=36)
 Sort Key: j1.id
 -> Seq Scan on j1 (cost=0.00..25.38 rows=6 width=36)
 Filter: (info = 'no'::text)
 -> Sort (cost=85.43..88.50 rows=1230 width=36)
 Sort Key: j2.id
 -> Seq Scan on j2 (cost=0.00..22.30 rows=1230 width=36)
 (9 rows)
EXPLAIN输出信息的解读
Filter
 digoal=# explain select j1.*,j2.* from j1 inner join j2 on (j1.id=j2.id) where j1.info='no';
 QUERY PLAN
 -------------------------------------------------------------------
 Merge Join (cost=110.88..117.43 rows=37 width=72)
 Merge Cond: (j1.id = j2.id)
 -> Sort (cost=25.45..25.47 rows=6 width=36)