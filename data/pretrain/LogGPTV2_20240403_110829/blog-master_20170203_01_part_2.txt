+       freeGinBtreeStack(stack);  
+       stepright = false;  
+   }  
+  
+   elog(DEBUG2, "entryLoadMoreItems, %u/%u, skip: %d",  
+        GinItemPointerGetBlockNumber(&advancePast),  
+        GinItemPointerGetOffsetNumber(&advancePast),  
+        !stepright);  
```  
跳跃扫描优化类似于递归查询的优化  
参考  
[《时序数据合并场景加速分析和实现 - 复合索引，窗口分组查询加速，变态递归加速》](../201611/20161128_01.md)    
[《distinct xx和count(distinct xx)的变态递归优化方法 - 索引收敛(skip scan)扫描》](../201611/20161128_02.md)   
[《用PostgreSQL找回618秒逝去的青春 - 递归收敛优化》](../201612/20161201_01.md)    
## posting list 压缩优化
posting list的压缩优化也是9.4对GIN的优化之一。  
## fastupdate, pending list 优化
由于多值类型的变更，插入，可能影响GIN索引的若干个KEY，所以IO巨大，为了减少这种IO，提高数据的写入\变更速度，提出了pending list的结构，类似缓冲区，这部分数据非树结构，可以有效合并IO，使用速度提升非常明显。  
但是要注意pending list的存在，使得查询效率有一定的下降，特别是pending list中有大量数据时，使用vacuum可以手动将pending list合并到gin tree中。  
或者等pending list写满后触发合并的动作，或者等待autovcauum来合并。  
https://www.postgresql.org/docs/9.6/static/gin-tips.html  
## 其他  
btree_gin  
https://www.postgresql.org/docs/9.6/static/btree-gin.html  
btree_gin为普通类型的GIN索引接口。  
```  
int2, int4, int8, float4, float8, timestamp with time zone, timestamp without time zone, time with time zone, time without time zone, date, interval, oid, money, "char", varchar, text, bytea, bit, varbit, macaddr, inet, and cidr  
```  
它主要是GIN的开发例子，或者复合索引（如int, tsvector的复合查询，可以建立GIN的单一索引）  
```  
Also, for queries that test both a GIN-indexable column and a B-tree-indexable column, it might be more efficient to create a multicolumn GIN index that uses one of these operator classes than to create two separate indexes that would have to be combined via bitmap ANDing.  
```  
由于这些标量类型默认只有B-Tree和hash索引扫描方法，当查询需求包含数组列，同时还包含这些标量数据列的查询时。  
1\. 如果有两个索引，那么会对两个索引的CTID进行合并  
bitmap anding  
例子
```
create table t1(id int , c1 int[]);
create index idx1 on t1 using btree (id);
create index idx2 on t1 using gin (c1);
select ? from t1 where id=? and c1 @> ....;
```
2\. 而如果是一个GIN复合索引(标量+多值类型)，则不需要bitmap anding操作。  
例子 , 使用gin复合索引  
```  
create extension btree_gin;  
create index idx3 on t1 using gin (id, c1);  
select ? from t1 where id=? and c1 @> ....;
```  
## 参考
[GIN in 9.4 and further](20170203_01_pdf_001.pdf)  
https://www.postgresql.org/docs/current/static/indexes-bitmap-scans.html  
https://www.postgresql.org/docs/current/static/indexes-multicolumn.html  
```
A multicolumn B-tree index can be used with query conditions that involve any subset of the index's columns, but the index is most efficient when there are constraints on the leading (leftmost) columns. The exact rule is that equality constraints on leading columns, plus any inequality constraints on the first column that does not have an equality constraint, will be used to limit the portion of the index that is scanned. Constraints on columns to the right of these columns are checked in the index, so they save visits to the table proper, but they do not reduce the portion of the index that has to be scanned. For example, given an index on (a, b, c) and a query condition WHERE a = 5 AND b >= 42 AND c = 77 would be skipped, but they'd still have to be scanned through. This index could in principle be used for queries that have constraints on b and/or c with no constraint on a — but the entire index would have to be scanned, so in most cases the planner would prefer a sequential table scan over using the index.
A multicolumn GiST index can be used with query conditions that involve any subset of the index's columns. Conditions on additional columns restrict the entries returned by the index, but the condition on the first column is the most important one for determining how much of the index needs to be scanned. A GiST index will be relatively ineffective if its first column has only a few distinct values, even if there are many distinct values in additional columns.
A multicolumn GIN index can be used with query conditions that involve any subset of the index's columns. Unlike B-tree or GiST, index search effectiveness is the same regardless of which index column(s) the query conditions use.
```
https://www.postgresql.org/docs/devel/static/gin-implementation.html  
```
Multicolumn GIN indexes are implemented by building a single B-tree over composite values (column number, key value). The key values for different columns can be of different types.
```
src/backend/access/gin/README  
```
* In a single-column index, a key tuple just contains the key datum, but
in a multi-column index, a key tuple contains the pair (column number,
key datum) where the column number is stored as an int2.  This is needed
to support different key data types in different columns.  This much of
the tuple is built by index_form_tuple according to the usual rules.
The column number (if present) can never be null, but the key datum can
be, in which case a null bitmap is present as usual.  (As usual for index
tuples, the size of the null bitmap is fixed at INDEX_MAX_KEYS.)
```
backend/access/gin/ginentrypage.c:      itup = index_form_tuple(ginstate->tupdesc[attnum - 1], datums, isnull);  
backend/access/nbtree/nbtree.c: itup = index_form_tuple(RelationGetDescr(rel), values, isnull);  
backend/access/common/indextuple.c:index_form_tuple(TupleDesc tupleDescriptor,    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")