### CREATE OPERATOR CLASS

The following operator classes are defined for the SP-GiST (Space-Partitioned GiST) access method:

1. **SPGiST Trie for VARCHAR:**
   ```sql
   CREATE OPERATOR CLASS spgist_trie FOR TYPE VARCHAR USING SPGiST AS
       OPERATOR 1 =,
       OPERATOR 2 #=,
       OPERATOR 3 ?=,
       FUNCTION 1 trieconsistent,
       FUNCTION 2 triepicksplit,
       FUNCTION 3 trieNNconsistent,
       FUNCTION 4 triegetparameters;
   ```

2. **SPGiST k-d Tree for POINT:**
   ```sql
   CREATE OPERATOR CLASS spgist_kdtree FOR TYPE POINT USING SPGiST AS
       OPERATOR 1 @,
       OPERATOR 2 ∧,
       OPERATOR 20 @@,
       FUNCTION 1 kdtree_consistent,
       FUNCTION 2 kdtree_picksplit,
       FUNCTION 3 kdtree_NNconsistent,
       FUNCTION 4 kdtree_getparameters;
   ```

3. **SPGiST Suffix for VARCHAR:**
   ```sql
   CREATE OPERATOR CLASS spgist_suffix FOR TYPE VARCHAR USING SPGiST AS
       OPERATOR 1 @=,
       OPERATOR 20 @@,
       FUNCTION 1 suffixconsistent,
       FUNCTION 2 suffixpicksplit,
       FUNCTION 3 suffixNNconsistent,
       FUNCTION 4 suffixgetparameters;
   ```

### Table 5: Operator Class Definitions

| Operator Class | Type | Using | Operators | Functions |
|----------------|------|-------|-----------|-----------|
| SPGiST Trie    | VARCHAR | SPGiST | `=`, `#=` | `trieconsistent`, `triepicksplit`, `trieNNconsistent`, `triegetparameters` |
| SPGiST k-d Tree | POINT | SPGiST | `@`, `∧`, `@@` | `kdtree_consistent`, `kdtree_picksplit`, `kdtree_NNconsistent`, `kdtree_getparameters` |
| SPGiST Suffix  | VARCHAR | SPGiST | `@=`, `@@` | `suffixconsistent`, `suffixpicksplit`, `suffixNNconsistent`, `suffixgetparameters` |

### Table Creation and Indexing

#### Trie (SPGiST Trie)
```sql
CREATE TABLE worddata (
    name VARCHAR(50),
    id INT
);

CREATE INDEX sptrieindex ON worddata USING SPGiST (name SPGiST Trie);
```

#### k-d Tree (SPGiST k-d Tree)
```sql
CREATE TABLE point_data (
    p POINT,
    id INT
);

CREATE INDEX spkdtree_index ON point_data USING SPGiST (p SPGiST k-d Tree);
```

### Queries

#### Trie Queries
```sql
-- Equality Query
SELECT * FROM worddata WHERE name = 'random';

-- Regular Expression Query
SELECT * FROM worddata WHERE name ?= 'r?nd?m';
```

#### k-d Tree Queries
```sql
-- Equality Query
SELECT * FROM point_data WHERE p @ '(0,1)';

-- Range Query
SELECT * FROM point_data WHERE p ∧ '(0,0,5,5)';
```

### Table 6: Index Creation and Querying

| Operation | Trie (VARCHAR) | k-d Tree (POINT) |
|-----------|----------------|------------------|
| Table Creation | `CREATE TABLE worddata (name VARCHAR(50), id INT);` | `CREATE TABLE point_data (p POINT, id INT);` |
| Index Creation | `CREATE INDEX sptrieindex ON worddata USING SPGiST (name SPGiST Trie);` | `CREATE INDEX spkdtree_index ON point_data USING SPGiST (p SPGiST k-d Tree);` |
| Equality Query | `SELECT * FROM worddata WHERE name = 'random';` | `SELECT * FROM point_data WHERE p @ '(0,1)';` |
| Regular Expression Query | `SELECT * FROM worddata WHERE name ?= 'r?nd?m';` | - |
| Range Query | - | `SELECT * FROM point_data WHERE p ∧ '(0,0,5,5)';` |

### SP-GiST Architecture in PostgreSQL

**Figure 4: SP-GiST Architecture Inside PostgreSQL**

- **Internal Methods:** The core of SP-GiST is fully isolated from the extensions.
- **External Methods:** These are implemented as dynamically loadable modules.
- **Operator Classes:** Serve as the link between the core and the extensions.
- **Function Manager:** Manages the communication among methods.
- **Storage Manager:** Handles the allocation and retrieval of disk pages.

### New Nearest-Neighbor Search in SP-GiST

We extended the SP-GiST core internal methods to support incremental nearest-neighbor searching. This extension is an adaptation of the algorithm described in [23].

**Generic NN Algorithm:**
1. Insert the root node into the priority queue with a minimum distance of 0.
2. While the priority queue is not empty:
   - Retrieve the top of the queue into P.
   - If P is an object, report P as the next nearest neighbor (NN) to the query object.
   - Otherwise, compute the minimum distances between the query object and P’s children.
   - Insert P’s children into their proper positions in the queue based on their distances.

### Experimental Results

**Table 7: Number and Percentage of External Methods' Code Lines**

| Index Structure | No. of Lines | % of Total Lines |
|-----------------|--------------|------------------|
| Trie            | 580          | 8.2%             |
| k-d Tree        | 551          | 7.8%             |
| P-Quadtree      | 562          | 8.0%             |
| PMR Quadtree    | 602          | 8.6%             |

**Figure 6: Search Performance Comparison (B+-Tree vs. Patricia Trie)**

- **Exact Match Performance**
- **Prefix Match Performance**

**Figure 7: Regular Expression Search Performance (B+-Tree vs. Patricia Trie)**

**Figure 8: Trie Search Time Standard Deviation**

**Figure 9: Insert Performance (B+-Tree vs. Patricia Trie)**

**Figure 10: Index Size Comparison (B+-Tree vs. Patricia Trie)**

**Figure 11: Maximum Tree Node Height**

**Figure 12: Maximum Tree Page Height**

### Experiments

- **Objective:** Demonstrate the extensibility of SP-GiST and highlight its strengths and weaknesses compared to B+-tree and R-tree indexes.
- **Index Structures Realized:**
  - Disk-based Patricia Trie
  - k-d Tree
  - Point Quadtree
  - PMR Quadtree
  - Suffix Tree

- **Dataset Generation:**
  - Words ranging from 500K to 32M.
  - Word size uniformly distributed over [1,15].
  - Alphabet letters from 'a' to 'z'.

- **Performance Comparisons:**
  - SP-GiST Trie vs. B+-tree for text string data.
  - SP-GiST k-d Tree and PMR Quadtree vs. R-tree for point and line segment data.
  - Suffix Tree vs. sequential scanning for substring match operations.

### Figures

- **Figure 6:** Search performance comparison (B+-Tree vs. Patricia Trie).
- **Figure 7:** Regular expression search performance (B+-Tree vs. Patricia Trie).
- **Figure 8:** Trie search time standard deviation.
- **Figure 9:** Insert performance (B+-Tree vs. Patricia Trie).
- **Figure 10:** Index size comparison (B+-Tree vs. Patricia Trie).
- **Figure 11:** Maximum tree node height.
- **Figure 12:** Maximum tree page height.

### Conclusion

The experiments illustrate that the SP-GiST trie has better search performance than the B+-tree for text string data. The results also highlight the strengths and weaknesses of SP-GiST indexes compared to B+-tree and R-tree indexes.