kind: Service
metadata:
  name: my-db
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
```
创建`my-db`服务后，集群中的所有其他 Pods 将能够通过地址`my-db`连接到端口`3306`上标签为`app:mysql`的 Pods。在下面的资源中，将展示通过使用 Kubernetes 入口资源对集群中的服务的外部访问。
## 进入
Kubernetes 集群旨在为集群内外的应用提供服务。入口资源被定义为通过外部网址和负载平衡等附加功能向外部世界公开服务。尽管入口资源是本地 Kubernetes 对象，但它们需要一个入口控制器在集群中启动和运行。换句话说，入口控制器不是`kube-controller-manager`的一部分，您需要在集群中安装一个。市场上有多种实现。不过，Kubernetes 目前正式支持和维护`GCE`和`nginx`控制器。
注意
附加入口控制器的列表可在以下链接的官方文档中获得:[https://kubernetes . io/docs/concepts/Services-networking/Ingress-controller](https://kubernetes.io/docs/concepts/Services-networking/Ingress-controllers)。
主机网址为`my-db.docker-workshop.io`的入口资源连接到`my-db`服务上的端口`3306`，如下所示:
```
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: my-db
spec:
  rules:
  - host: my-db.docker-workshop.io
    http:
      paths:
      - path: /
        backend:
          serviceName: my-db
          servicePort: 3306
```
入口资源对于向外部世界开放服务至关重要。然而，它们的配置可能比看起来更复杂。入口资源可能需要基于集群中运行的入口控制器的单独注释。
在下面的资源中，将介绍在水平吊舱自动缩放器的帮助下吊舱的自动缩放。
## 水平吊舱自动缩放
Kubernetes 集群提供了一个可扩展且可靠的容器化应用环境。然而，手动跟踪应用的使用情况并在需要时扩大或缩小规模既麻烦又不可行。因此，Kubernetes 提供了水平 Pod 自动缩放器，可以根据 CPU 利用率自动缩放 Pod 的数量。
水平吊舱自动缩放器是一种 Kubernetes 资源，具有用于缩放和目标度量的目标资源:
```
apiVersion: Autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: server-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: server
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
```
当`server-scaler`资源被创建时，Kubernetes 控制平面将通过放大或缩小名为`server`的部署来尝试实现`50%`的目标 CPU 利用率。此外，副本的最小和最大数量设置为`1`和`10`。这确保了部署在不使用时不会扩展到`0`，也不会扩展得太高而消耗集群中的所有资源。水平 Pod 自动缩放器资源是 Kubernetes 的重要组成部分，用于创建自动管理的可扩展和可靠的应用。
在下一节中，您将了解 Kubernetes 中的授权。
## RBAC 授权
Kubernetes 集群旨在安全地连接和更改资源。但是，当应用在生产环境中运行时，限制用户的操作范围至关重要。
让我们假设您已经授予项目组中的每个人广泛的权力。在这种情况下，无法保护集群中运行的应用不被删除或配置错误。Kubernetes 提供了**基于角色的访问控制** ( **RBAC** )来根据用户被赋予的角色管理用户的访问和能力。换句话说，Kubernetes 可以限制用户在特定 Kubernetes 资源上执行特定任务的能力。
让我们从`Role`资源开始定义功能:
```
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: critical-project
  name: Pod-reader
rules:
  - apiGroups: [""]
    resources: ["Pods"]
    verbs: ["get", "watch", "list"]
```
前面片段中定义的`Pod-reader`角色只允许用于`critical-project`命名空间中的`get`、`watch`和`list`Pod 资源。当用户只有`Pod-reader`角色时，他们将不能删除或修改`critical-project`命名空间中的资源。让我们看看如何使用`RoleBinding`资源将角色分配给用户:
```
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-Pods
  namespace: critical-project
subjects:
  - kind: User
    name: new-intern
roleRef:
  kind: Role
  name: Pod-reader
  apiGroup: rbac.authorization.k8s.io
```
`RoleBinding`资源将`Role`资源与主题相结合。在`read-Pods RoleBinding`中，用户`new-intern`被分配到`Pod-reader` `Role`。当`read-Pods`资源在 Kubernetes API 中创建时，`new-intern`用户将无法修改或删除`critical-project`命名空间中的 Pods。
在下面的练习中，您将看到使用`kubectl`和本地 Kubernetes 集群的 Kubernetes 资源正在运行。
## 练习 10.03:库伯内斯资源在行动
云原生容器化应用由于其复杂性，需要多个 Kubernetes 资源。在本练习中，您将使用一个**状态集**、一个**部署**和两个**服务**资源在 Kubernetes 上创建一个流行的 WordPress 应用的实例。此外，您将检查 Pods 的状态，并使用`kubectl`和`minikube`连接到服务。
要完成本练习，请执行以下步骤:
1.  Create a `StatefulSet` definition in a file, named `database.yaml`, with the following content:
    ```
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: database
    spec:
      selector:
        matchLabels:
          app: mysql
      serviceName: mysql
      replicas: 1
      template:
        metadata:
          labels:
            app: mysql
        spec:
          containers:
          - name: mysql
            image: mysql:5.7
            env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
            ports:
            - name: mysql
              containerPort: 3306
            volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
      volumeClaimTemplates:
      - metadata:
          name: data
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi
    ```
    这个`StatefulSet`资源定义了一个由 WordPress 在以下步骤中使用的数据库。只有一个名为`mysql`的容器，其 Docker 形象为`mysql:5.7`。根密码有一个环境变量，容器规范中定义了一个端口。此外，在前面的定义中，有一卷被要求并附在`/var/lib/mysql`上。
2.  Deploy the `StatefulSet` to the cluster by running the following command in your terminal:
    ```
    kubectl apply -f database.yaml
    ```
    该命令将应用`database.yaml`文件中的定义，因为它通过了`-f`标志:
    ```
    StatefulSet.apps/database created
    ```
3.  Create a `database-service.yaml` file in your local computer with the following content:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: database-service
    spec:
      selector:
        app: mysql
      ports:
        - protocol: TCP
          port: 3306
          targetPort: 3306
    ```
    该服务资源定义了数据库实例上的服务抽象。WordPress 实例将通过使用指定的服务连接到数据库。
4.  Deploy the Service resource with the following command:
    ```
    kubectl apply -f database-service.yaml
    ```
    该命令部署`database-service.yaml`文件中定义的资源:
    ```
    Service/database-service created
    ```
5.  Create a file with the name `wordpress.yaml` and the following content:
    ```
    apiVersion: apps/v1 
    kind: Deployment
    metadata:
      name: wordpress
      labels:
        app: wordpress
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: wordpress
      template:
        metadata:
          labels:
            app: wordpress
        spec:
          containers:
          - image: wordpress:4.8-apache
            name: wordpress
            env:
            - name: WORDPRESS_DB_HOST
              value: database-Service
            - name: WORDPRESS_DB_PASSWORD
              value: root