Windows和MacOSX上。试图寻找开源实现的人们有几种选择。SBCL（SteelBankCommonLisp）
Franz的Allegro Common Lisp开发者们放出了一个可用于本书的试用版产品，能够运行在Linux、
单的库来消除不同Lisp实现在对待文件名上的区别。
出完全依赖于特定实现中某些特性的代码。第15章将看到这样的代码，在那里我们将开发一个简
可以移植，但其中要用到一些标准未曾定义过的功能时，CommonLisp提供的灵活方式可以编写
代码，例如库，那么你将需要尽可能地编写可移植的CommonLisp。假如所要编写的代码大部分
时选择一种带有其他所需特性的特定实现也是合理的。另外，如果我们正在向其他人交付Lisp源
此每种实现都提供了一些依托并超越标准所规定范围的特性。根据你正打算进行的编程类型，有
许实现者在这些领域里继续探索，在这些领域中，特定的语言风格尚未找到最佳的支持方式。因
产生同样的行为。
按照标准里描述的方式使用了某些语言特性，那么就可以指望程序在任何符合标准的实现里也能
Common Lisp供应商和Common Lisp程序员之间的一份协议。这份协议告诉你，如果所写的程序
这一设计可以避免任何个体（例如某个厂商）任意修改标准。?这样，Common Lisp标准就是
但从目前而论，一个实现最重要的特点应该在于，它能否运行在我们所喜爱的操作系统上。
另一方面，标准可能并没有覆盖程序所涉及的每个方面，某些方面故意没有定义，为的是允
③OpenMCL项目自从移植到Mac OS之外的平台后，更名为Clozure CL。
②最初SBCL从CMUCL里分离出来，主要是为了集中清理其内部代码结构，以使其更容易维护。这个代码分叉现在
① 实际上，该语言标准本身被修订的可能性微乎其微。尽管其中存在一些人们想改进的缺陷，但ANSI的流程不允许
除非特别说明，本书中的所有Lisp代码都应该可以工作在任何符合标准的Common Lisp实现
已经很友好了。bug修复经常在两个项目之间传递，并且有传闻某一天他们会重新合并在一起。
或者人们将开发可移植的库来消除那些语言没有定义的特性在各种实现之间的区别。
不同的实现者试验语言标准里没有定义的应用程序接口（API）和库的时候，其他实现者可能采纳他们的工作，
Common Lisp 标准的未来很可能会通过事实上的标准来进行，就像是Perl和Python的“标准化过程”那样一
打开一个已有的标准进行细节修补，而且事实上也没有哪个打算改进的地方给任何人造成了任何严重的困难。
www.TopSage.com
2.1选择一个Lisp 实现
一译者注
一在
6
---
## Page 27
2.3放开思想：交互式编程
件时，组合键C-c C-z可以切换到与Lisp进行交互的那个缓冲区。
(Returm）键来选择它。也可以通过在缓冲区菜单里选择一个缓冲区来切换。
或者显示一个所有可能补全方式的列表。该提示同时推荐了一个默认缓冲区，你可以直接按回车
部输人一个缓冲区的名字。当输入缓冲区的名字时，按Tab键将在输入的字符基础上对其补全，
互。这个命令是switch-to-buffer，对应的组合键是C-xb，使用时将提示你在Emacs框架的底
说将一个不同的缓冲区设置为当前缓冲区，以便可以编辑某个特定的文件或者与特定的程序交
也用来表示与Common Lisp这类程序的交互。因此，一个常用的操作就是“切换缓冲区”，就是
是“当前使用的”。当前缓冲区会接收所有的输入一—无论是在打字还是调用任何命令。缓冲区
当使用Emacs时，你所编辑的每个文件都将被表示成不同的缓冲区，在任一时刻只有一个缓冲区
另一个是C-h w，告诉我们输入的命令名字所对应的组合键是什么。
还有两个最有用的帮助命令：一个是C-hk，告诉我们输入的任何组合键所对应的命令是什么；
式，全部绑定到了以C-h开头的组合键上。输入C-h?就可以得到一个完整的列表。除了向导以外
身的向导，可以简单地在阅读手册时按下h来访问。最后，Emacs提供了好几种获取帮助信息的方
以通过其内置的超文本浏览器Info来访问。阅读这些手册只需输入C-h i。这个Info系统也有其自
键组合直接写成：C-h t。
弦里，C代表Ctrl键而M代表Meta键（也就是Alt键）。这样，我们可以将刚才描述的启动向导的按
起按的键，即键和弦，用连接号（-）连接，顺序按下的键或键和弦，用空格分隔。在一个键和
通过类似的组合键来访问。由于组合键用得如此普遍，因而Emacs用户使用了一种记号来描述组
Emacs tutorial即可。或者按住Ctrl键，输入h，然后放开Ctrl键，再按t。大多数Emacs命令都可以
Emacs人门方法也许就是跟着它内置的向导走一遍。要想启动这个向导，选择帮助菜单的第一项
book/上获取相应的安装包，然后按照安装说明提示来操作即可。
需要做的就是根据你的操作系统和喜爱的Lisp平台从本书的Web站点http://www.gigamonkeys.com/
由于Lisp in a Box使用Emacs作为其编辑器，因此你至少得懂一点儿它的使用方法。最好的
2.2
在特定的上下文环境中，其他组合键也可用于切换到特定的缓冲区。例如，当编辑Lisp源文
对于那些拒绝看向导的人来说,有个至关重要的Emacs术语不得不提,那就是缓冲区(buffer)
向导里还描述了其他有用的命令以及启动它们的组合键。Emacs还提供了大量在线文档，可
键，以避免经常书写诸如“按住Ctrl键，输入h，然后放开Ctrl键，再按t”这样的组合。需要一
10
当启动Lisp in a Box时，应该可以看到一个带有类似下面提示符的缓冲区：
由于Lisp in a Box软件包可以让新Lisp程序员在一流的Lisp开发环境上近乎无痛起步，因此你
CL-USER>
安装和运行 Lisp in aBox
第2章周而复始：REPL简介
www.TopSage.com
---
## Page 28
求值，但我们现在还没必要讨论它。先从Hello World开始。
加法函数，从而返回了5。返回值5被传递给打印器从而得以输出。Lisp也可能以其他方式对列表
达式则形成了该函数的实参。在本例里，符号+是加法函数的名字。2和3对自身求值后被传递给
就变得有意思一些了。比如说，可以在Lisp提示符下输入（+23）。
程看起来似乎是费了九牛二虎之力却回到了原点，但如果你给了Lisp更有意义的信息，那么事情
中的E以后，它将对其自身求值。这个值随后被送到打印器里，打印出只有10的那行来。整个过
的Lisp对象。这个对象是一个自求值（self-evaluating）对象，也就是说当把它送给求值器，即REPL
是一个数。在Lisp提示符下，可以输入10，接着敲回车键，然后看到类似下面的东西：.
2.4
独的表达式和直接来自编辑器的整个文件或对其求值。
粘贴到REPL里，也不必因为改变了一个函数就把整个文件重新加载。Lisp环境应该允许编译单
REPL以及在编辑源文件时与Lisp进行交互。例如，没有必要把一个函数定义从源文件里复制并
程环境来。但如果追求真正的Lisp编程体验，则需要一个像SLIME这样的环境，它可以同时通过
需使用REPL和一个知道如何正确缩进Lisp代码的文本编辑器，就可以构建出一个相当合理的编
调试器，单步调试代码，以及检查个别Lisp对象的状态。
何Lisp表达式，加载含有Lisp源代码或编译后代码的文件，编译整个文件或者单独的函数，进入
它也被称为顶层（top-level）、顶层监听器（top-level listener）或Lisp监听器。
取、求值和打印的周期变化,因此它被称为读－求值－打印循环(read-eval-print loop）,简称REPL。
对它求值，然后打印结果。接着它再继续处理你输入的下一个表达式。正是由于这种无休止的读
以产生一定的结果。尽管如此，Lisp读取的是Lisp表达式而非一行shell命令，按照Lisp的规则来
所有这些机制都是语言内置的，可以通过语言标准所定义的函数来访问。如果有必要，你只
借助REPL提供的环境就可以定义或重定义诸如变量、函数、类和方法等程序要素，求值任
小括号里的东西构成了-一个列表，上述列表包括三个元素：符号+，以及数字2和3。一般来
第一个10是你输入的。Lisp 读取器，即REPL中的R，读取文本“10”并创建一个代表数字10
为了测试REPL，需要一个可以被读取、求值和打印的Lisp表达式。最简单类型的Lisp表达式
CL-USER>(+ 2 3)
CL-USER> 10
这是Lisp的提示符。就像Unix或DOS shell提示符那样，在Lisp提示符的位置上输人表达式可
体验 REPL
www.TopSage.com
2.4体验 REPL
11
---
## Page 29
近了。而且你正在体会REPL所带来的自底向上的编程风格：可以试验不同的方法，然后从已经
到标准输出）比其返回值更有意义。但Lisp中的每个表达式都会求值出某些结果。
第4章。）和目前我们所见到的其他表达式不同的是，FORMAT表达式的副作用（在本例中是打印
个NIL是REPL输出的求值FORMAT表达式的结果。（NIL是LiSp版本的逻辑假和空值。更多内容见
FORMAT表达式应如下所示。?
为第一个参数传入，那么它将会发送其输出到标准输出。因此，一个将输出“hello,world”的
或者Python的string-%那样。只要字符串里不包含一个~，那么它就会被原样输出。如果将t作
将看到这个字符串是如何包含嵌入式指令，以便将其余的参数插入到字符串里的，就像printf
受变长参数，但是只有两个必要的参数，分别代表着发送输出的位置以及字符串。在下一章里你
到标准输出。Common Lisp提供了许多产生输出的方法，但最灵活的是FORMAT函数。FORMAT接
图以一种读取器可以理解的相同语法来打印对象。
然后再以同样的语法打印出来。双引号本身不是在内存中的字符串对象的一部分一
对象：Lisp读取双引号里的字符串，求值的时候在内存里建立一个可以对自身求值的字符串对象，
再简单不过了。
2.5Lisp 风格的 “Hello, World”
③
①在Kernighan和Ritchie的C语言书极大促进了其流行以前，声誉卓著的“hello,world”就已经存在了。最初的“hello,
尽管如此，你是否已经写出了一个真正的“程序”呢？恐怕仍有争议。不过你离目标越来越
尽管如此，这还不能算是一个“hello,world”程序，而更像是一个“hello，world”值。
其工作原理是，因为字符串和数字一样，带有Lisp读取器可以理解的字面语法并且是自求值
没有“Hello，World”程序"的编程书籍是不完整的。事实上，想让REPL打印出“hello, world"
关于FORMAT表达式的结果，需要说明的一点是紧接着“hello，wOrld”输出后的NIL。那
CL-USER> (format t "hello, world")
向真正的程序迈进一步的方法是编写一段代码，其副作用可以将字符串“hello,world”打印
hello, world
"hello, world"
CL-USER> "hello, world"
的表达式，在一个需要其值的上下文环境中也将被视为返回了NIL。
不过，当我们讨论到多重返回值的时候，你将看到编写一个求不出值的表达式在理论上是可能的，但即使是这样
(print "hello,
或是：
下面是同样可以打印出字符串“hello,world”的其他表达式：
cm/cs/who/dmr/bintro.html。）
world”似乎来源于BrianKernighan的A Tutorial Introduction to theLanguage B，收录于1973年1月的BellLaboratories
第2章，周而复始：REPL简介
world")
www.TopSage.com
?
一它们只是语
---
## Page 30
重新出现。在文件中输入这个定义的时候，你可能选择将函数从形参列表那里打断成两行。如果
式将取决于所使用的具体CommonLisp实现，但其形式可能会如下所示。
了开括号和单词DEFUN以后，在EmacS窗口的底部，SLIME将会提示它所期待的参数。具体的形
Lisp源文件习惯上带有.lisp扩展名，尽管有些人用.cl来代替。
来创建一个新文件，然后根据Emacs的提示输人文件的名字。文件存放的位置并不重要。Common
然后重启，函数定义将会丢失。这么好的一个函数，你可能想要保存下来。
2.6
Lisp中的函数自动返回其最后求值的那个表达式的值。
被创建出来并被命名为HELLO-WORLD。
个表达式被求值的时候，一个不带参数且函数体为（formatt"hello，world"）的新函数会
式的副作用比其返回值更有用。但与FORMAT表达式所不同的是，它的副作用是不可见的：当这
值和打印的表达式。这里的返回值是你所定义的函数名。“但是和FORMAT表达式一样，这个表达
了。名字后面的（)是形参列表，在本例中为空，是因为该函数不带参数。其余的部分是函数体。
如helloWorld）来形成复合词的方法，是标准的Lisp风格
是合法的。像hello-world这种用连字符而不是下划线（比如hello_worla）或是内部大写（比
名字里使用，现在我们暂时假设包括-在内的很多在其他语言里非法的字符在CommonLisp里都
式来定义：
测试过的部分里构建出一个解决方案来。现在你已经写出了一个简单表达式来做想做的事，剩下
这很简单。只需创建一个文件，然后把定义保存在里面即可。在Emacs中可以通过输入C-xC-f
①我将在第4章里解释为何所有的名字都被转换成大写的。
在开始输入每一个新的列表元素时，这个信息就会消失，但当每次输入了空格以后，它又会
一旦创建了文件，就可以向其中写入之前在REPL里输入过的定义。需要注意的是，在输入
你可能会争辩说，这就是一个完整的“hello,world”程序了，但还有一个问题。如果退出Lisp
表面上看，这个表达式和你目前见到的所有其他表达式一样，只是另一个被REPL读取、求
你将看到输出和直接对FORMAT表达式求值时是一样的，包括REPL打印出的NIL值。Common
DEFUN后面的hello-worla是这个函数的名字。在第4章里我们将看到究竟哪些字符可以在
(defunnamevarlist &restbody)
hello,world
CL-USER>(hello-world)
一旦定义了这个函数，你就可以像这样来调用它：
保存工作成果
HELLO-WORLD
CL-USER>（defunhello-world()（formatt"hello,world"))
www.TopSage.com
一更不用提那接近正常英语的排版
2.6
---
## Page 31
REPL缓冲区。?现在用M-x slime重启SLIME。
入quit（或sayoonara），然后按回车。这将退出Lisp并且关闭所有SLIME创建的缓冲区，包括
用一个SLIME快捷键：在REPL中输人一个逗号。在Emacs窗口底部，将提示你输人一个命令。输
buffer。
它然后回到REPL，使用C-c C-z或者C-xb再次调用它。例如，你可以使其更合平语法。
发给Lisp进行求值并编译。为了确认这个过程有效，你可以对hello-world作些修改，重新编译
何位置或者刚好在其后面时，输入C-cC-c，这将启动slime-compile-defun命令，将当前定义
的所有开括号。
C-c C-q来调用命令slime-close-parens-at-point，它将插入必要数量的闭括号以匹配当前
输人回车然后按Tab键，SLIME将自动把第二行缩进到合适的位置，如下所示。
可用几种方式将这个定义输入到Lisp环境中。最简单的是，当光标位于DEFUN定义内部的任
14
② SLIME快捷键并不是Common Lisp的一部分，它们是SLIME的命令。
① 你也可以在REPL里将定义输人成两行，因为REPL读取整个表达式，而不是按行。
现在尝试从源文件中重新加载这个函数，这需要退出并重启Lisp环境。执行退出操作可以使
你可能需要保存工作文件。在hello.lisp缓冲区里，输入C-x C-s可以启动Emacs命令save-
SLIME也会帮助匹配括号—当输入了闭括号时，它将闪烁显示对应的开括号。也可以输入
(defun hello-world ()
Backtrace:
attempt to call 'HELLO-wORLD' which is an undefined function.
此时SLIME将弹出一个新的缓冲区并带有类似下面的内容：
CL-USER> (hello-world)
可以顺便试试直接调用hello-world。
NIL
Hello, world!
CL-USER> (hello-world)
接下来，用C-c C-c进行重新编译，然后输人C-c C-z来切换到REPL试一下新版本。
(defun hello-world {)
(format t "Hello， world!")）
(format t “hello， world"))
1：
：