# RESTing On Your Laurels Will Get You Pwned
By Abraham Kang, Dinis Cruz, and Alvaro Mu√±oz

## Goals and Main Points
- This presentation, originally a 2-hour session, will focus on identifying remote code execution and data exfiltration vulnerabilities through REST APIs.
- A REST API is essentially a web application that adheres to a structured set of rules. Therefore, it is susceptible to common web application vulnerabilities such as SQL Injection, XSS, Direct Object Reference, and Command Injection.
- If your organization has both publicly exposed and internal REST APIs, there is a high likelihood of remote code execution and data exfiltration issues.

## Causes of REST Vulnerabilities
- **Location in the Trusted Network:** Data center networks are often considered secure, leading to less stringent security measures.
- **History of REST Implementations:** Early REST implementations were criticized for being inherently unsafe, leading to their initial development for internal use only.
- **Self-Describing Nature:** REST's self-descriptive nature can make it easier for attackers to understand and exploit the system.
- **Input Types and Interfaces:** XML and JSON inputs can introduce various vulnerabilities.
- **URL Construction:** URLs to backend REST APIs are often constructed using concatenation instead of URIBuilder, making them vulnerable to Extended HPPP.
- **Inbred Architecture:** Publicly exposed REST APIs often use the same protocols and frameworks as internal ones, making internal APIs vulnerable if the public API is compromised.
- **Extensions in REST Frameworks:** Some extensions enhance REST functionality but can also enable remote code execution.
- **Incorrect Protocol Implementation:** Misconfigured SAML, XML Signature, and XML Encryption can be exploited.
- **Incorrect Assumptions:** Many developers assume REST principles prioritize security, which is not always the case.

## Application Architecture Background
The architecture typically includes firewalls (FW), internet-facing components (BH), and application servers (AS) connected to various databases and services. The internal network (BlueNet, GreenNet, Trusted Network) has characteristics such as:
- **Connectivity Freedom:** Within the trusted network, there is free connectivity.
- **Increased Physical Safeguards:** Enhanced physical security measures.
- **Hardened Systems:** Operating systems are hardened for security.
- **Shared Services and Infrastructure:** Common services and infrastructure are shared.

## REST History
- **Introduction:** Roy Fielding introduced REST in his 2000 PhD dissertation, promoting the use of HTTP methods (PUT, POST, GET, DELETE) and URLs to communicate metadata.
- **Criticism and Adoption:** Initially criticized by the security community, REST was developed for internal networks. As developers became comfortable with REST, it was extended to public interfaces.

## Attacking Backend Systems (Old School)
- **Pwn the Application Server:** Gain control over the application server.
- **Target Data-Rich Servers:** Identify and target data-rich servers on the internal network.
- **Install Client Protocols:** Install necessary client protocol binaries to connect to the targeted system.
- **Exploit Parameters:** Use network sniffing, credential reuse, default passwords, and authentication bypass to exploit the system.

## Attacking An Internal Network (REST Style)
- **HTTP Proxy or Curl Access:** Find an HTTP proxy in the publicly exposed REST API or gain access to curl on a compromised internal machine.
- **Port Scanning and Fingerprinting:** Easier due to REST's self-describing nature.
- **Data Exfiltration:** Extract data from the REST interface and pass parameters by sniffing the network, reusing credentials, and reading logs.

## REST is Self Describing
- **Initial URL:** Start with `http://host:port/` to gather information about the REST API and its backing system.
- **Comparison:** Compare this to database queries like `SELECT * FROM all_tables` in Oracle, `sp_msforeachdb` in SQL Server, and similar commands in other databases.

## NoSQL REST APIs
- **HBase, CouchDB, MongoDB, Cassandra, Neo4j:** These databases have REST APIs that closely follow their object structures, making them easy to explore and exploit.

## REST Input Types and Interfaces
- **Main Input Types:** XML and JSON.
- **XML-Related Vulnerabilities:** XXE, XSLT Injection, XDOS, XML Injection, and XML Serialization.

## XXE (eXternal XML Entity Injection)
- **File Disclosure and Port Scanning:** Raw XML deserialization can lead to file disclosure and port scanning.
- **Remote Code Execution:** Examples include passing malicious XML to execute arbitrary code.

## SSRF (Server-Side Request Forgery)
- **URI/URL in XML:** Any URI/URL in XML can be used for internal network port scanning or data exfiltration.

## XML Serialization Vulnerabilities
- **Deserialization Process:** Converting raw XML to native objects can be exploited to execute arbitrary code.
- **Examples:** XStream and XMLDecoder vulnerabilities, mass assignment attacks.

## Extended HPPP (HTTP Path & Parameter Pollution)
- **HPP Discovery:** Discovered by Stefano di Paola and Luca Carettoni in 2009.
- **Extended HPPP:** Utilizes matrix and path parameters to change the semantics of REST requests, enabling attacks like parameter pollution and path manipulation.

## Inbred Architecture
- **Common Protocols and Frameworks:** Public and internal REST APIs often use the same protocols and frameworks, making internal APIs vulnerable if the public API is compromised.

## Extensions in REST Frameworks
- **Remote Code Execution as a Feature:** Some extensions allow remote code execution, either subtly (partial script blocks) or overtly (complete Groovy scripts).

## Reliance on Incorrectly Implemented Protocols
- **SAML, XML Signature, XML Encryption:** These protocols can be subverted using wrapping-based attacks.

## Incorrect Assumptions of REST Application Behavior
- **Dynamic URLs and Resource Allocation:** REST provides dynamic URLs and resource allocation, which can lead to incorrect assumptions about security.
- **Example:** Using an "apiKey" as a GET parameter for stateless sessions, which can be logged and exposed.

## Example Case Study
- **Mongo DB REST API:** Exploiting dynamic resource allocation to create a new database and execute arbitrary code.

## REST Attacking Summary
- **Attack Serialization:** Exploit XML/JSON interfaces to execute remote code.
- **Proxied Requests:** Attack proxied requests to backend systems using Extended HPPP.
- **XXE/SSRF:** Read local config files, execute arbitrary code, or port scan and attack other internal REST APIs.
- **HATEOAS Links:** Look for other internal REST APIs through HATEOAS links in XML responses.
- **Bypass Authentication:** Bypass authentication mechanisms to gain unauthorized access.

## Questions
?