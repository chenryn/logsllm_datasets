### Constructing the Signature for Event Handling

To construct a signature for handling events, such as a left-click (`LCLICK`), in the domain `www.paypal.com`, it is essential to ensure that all participating text boxes are siblings within a tree-structured UI. The traffic trap condition for the Network Monitor should be set to check if the UI event (e.g., `LCLICK`) is correctly configured. For the PayPal application, the POST parameter `cmd=_flow` is used, and the captured text for the amount of money and recipient will be linked to the POST parameters `amount` and `email`.

### List of Activities Where Gyrus Can Protect Network Transactions

| Activity | % of Users |
| --- | --- |
| Send or read e-mail | 88% |
| Buy a product | 71% |
| Use a social networking site | 67% |
| Buy or make a reservation for travel | 65% |
| Do any banking online | 61% |
| Send instant messages | 46% |
| Pay to access or download digital content | 43% |
| Post a comment to online news groups | 32% |
| Use Twitter | 16% |
| Buy or sell stocks, bonds, or mutual funds | 11% |

**Table I.** List of activities where Gyrus can help protect the corresponding network transactions, based on the survey "What Internet Users Do Online [29]" by Pew Research Center.

### Discussion

#### Protocol and Application Support

In cases where the same protocol is used by multiple applications, a unique User-Intent Signature must be defined for each application. While this may seem labor-intensive, it is more scalable than continuously modeling new attack or malware behavior. The language we have developed allows us to easily support new applications and cleanly separates per-application logic from the core Gyrus framework. This process requires knowledge of the UI (and the structure of the UI object tree exposed by the UI Automation library, which can be obtained using standard tools like Inspect [25] from Microsoft) and some understanding of the network protocol, but no further details about the application's internals.

#### Scalability and Overhead

Although it is straightforward to create a signature for a new application, managing a large collection of signatures could introduce overhead. However, this overhead is significantly less than that of traditional IDS and anti-virus software. Traditional approaches require continuous updates for newly discovered attacks, whereas Gyrus defines user-intended, correct system behaviors, making it attack-agnostic. This means that once a user intent signature is defined, the protection mechanism remains effective regardless of how the attack evolves. In this paper, we focus on protecting the integrity of text content typed by the user, while other types of attacks, such as data confidentiality, are out of scope.

#### Application Support and Impact

Gyrus can generally support any application that sends user-generated text content from the monitored host, provided there is a direct or simple mapping between the on-screen text and the network traffic. Table I shows the results of a survey conducted by Pew Internet, indicating typical user activities on the Internet. According to the survey, 88% of users send e-mail, 67% use social networking sites, and 61% use online banking. All activities listed in Table I can be supported by Gyrus, demonstrating its potential to protect a large portion of day-to-day user activities and have a significant impact on security.

#### Extending to Image/Video Attachments

While Gyrus focuses on text-based applications, it can be extended to handle image and video attachments. We can use Access Control Gadgets [30] to capture the user’s intent to attach a specific file, compute a checksum, and match any attached file against the checksum. The only way this mechanism would fail is if an attacker/malware knows in advance which file the user will attach and changes it, which is considered unrealistic.

#### Limitations and Future Enhancements

One limitation of Gyrus is that it cannot protect applications where user-intended text is represented in a proprietary format or complex encoding. This can be a challenge when extending Gyrus to more general transactions, such as writing data to the filesystem. Recent advances in verifiable computation and tools like probabilistically checkable proofs (PCP) and fully-homomorphic encryption (FHE) offer promising solutions. When these technologies become practical, Gyrus can verify if the traffic result is from user-intended input by running application logic with these proof mechanisms. Additionally, for applications with complex encodings, Gyrus could perform more sophisticated transformations on the captured user intent and match the result with outgoing traffic.

#### Threat Model and Credentials

In our threat model, Gyrus protects the integrity of text based on user intent but does not protect confidentiality. An attacker could steal a user’s credentials (e.g., cookies, ID/passwords) and perform protected transactions on a different host without Gyrus protections. Gyrus works better when the host is equipped with a Hardware Security Module (HSM) like Trusted Platform Module (TPM) and a Smartcard, and the server-side application supports mutual authentication. While defending against credential theft is out of scope, Gyrus can intercept and modify the password entered by the user in dom-0, ensuring that malware in dom-U gets an incorrect password, and then correct the subsequent outgoing traffic to use the unmodified, correct password.

#### False Positives and Negatives

Gyrus, like any system that models benign behavior, is vulnerable to false positives caused by errors in user intent signatures. False negatives are also possible but should be less concerning. False positives occur when we fail to specify certain user actions that signify the intent to generate outgoing traffic or if our signatures incorrectly capture user intent. Both scenarios should be rare, as applications typically do not have too much variance in their UI, and the correctness of capturing user intent can be established through simple testing.

### Evaluation

#### Security

New security frameworks should be secure against both current and future attacks. We evaluated Gyrus by running existing attack samples and analyzing the framework’s security properties.

1. **Resilience Against Existing Attacks:**
   - **Windows Live Mail:** We tested Gyrus against the mail spammer malware `Win32:MassMail-A`. The dom-0 network monitor successfully caught and blocked all outgoing SMTP traffic.
   - **Yahoo! Messenger:** We ran the messenger spamming malware `ApplicUnwnt.Win32.SpamTool.Agent.˜BAAE`, and all messages generated by this malware were blocked.
   - **Facebook:** We executed the comment spamming malware `TROJ_GEN.RFFH1G1`, and it failed to send out any attack traffic.
   - **Web Applications:** We injected forged JavaScript code that automatically submits malicious content into Gmail, Facebook, and PayPal pages. Gyrus successfully blocked all malicious traffic.

2. **Resilience Against Future Attacks:**
   - Gyrus is designed to be attack-agnostic, and we believe it can handle future attacks. Standard assumptions in our threat model are widely accepted by the security community. Custom hypervisors or security operating systems can be built to achieve higher assurance.
   - **UI Monitor in Untrusted dom-U:** Gyrus is robust against errors in the UI monitor. Attackers are limited to misplacing user-generated, albeit unintended content in traffic allowed by Gyrus. Our policy of displaying only the content of the window currently in focus ensures that mistakenly sent content must be from the correct application. Further hardening can be achieved by specifying restrictions on the position of the content relative to the triggering event.
   - **User Intent Signatures:** Poorly written user intent signatures can be problematic, but the secure overlay limits the adverse effects to mistaking hardware events as user intent. The secure overlay (and the WYSIWYS policy) leaves attackers with very limited options for attacking Gyrus.

#### Usability

From our experience, Gyrus has no noticeable effect on the usability of the applications studied. User interaction is mediated by the Input Handler and Secure Overlay, with no significant delay. Gyrus only overlays text boxes, so it does not change the user’s workflow or the look-and-feel of the application. The edit box drawn by Gyrus supports basic and application-specific text editing features. Gyrus only checks and potentially blocks traffic that performs specific actions under specific protocols, ensuring it does not interfere with background networking programs.

**Table II.** Latency introduced by Gyrus while processing input. User-interaction data was collected during the use case evaluation.

| Action | Average | STDV | Median | Max |
| --- | --- | --- | --- | --- |
| Typing | 39ms | 34ms | 41ms | 128ms |
| ENTER | 19ms | 21ms | 17ms | 43ms |
| LCLICK | 43ms | 17ms | 19ms | 79ms |
| Focus Change | 21ms | 6ms | 16ms | 158ms |
| Move & Resize | 21ms | 15ms | 16ms | 85ms |