node, or (iii) unused. We next show how to distribute En-
titled and Excess bandwidth and how nodes are prioritized
based on whether they are Entitled or Excess nodes.
3.1 Determining Number of Entitled Trees
To enable a node i to compute its Entitled bandwidth ri
using Equation (1), our system includes distributed mech-
anisms to periodically approximate the total resources uti-
lized (i.e. i fi) and the number of peers N . We then
determine the number of trees i is required to join to receive
ri. However, these global parameters may change any time
due to group and network dynamics, leading to ﬂuctuation
of ri. This may reduce the stability of the system because
hosts overreact to system states. Therefore, our system in-
cludes a way to smooth out the impacts sudden changes in
ri have on the number of Entitled trees.
3.1.1 Distributed System Sampling
Collections of various system-wide parameters, for exam-
ple, i fi and N , are necessary to compute ri using Equa-
tion (1) and for some of our heuristics. We accomplish this
by having each node in a tree periodically obtain the state of
the subtree rooted at it and passing such information up the
tree to the source. The source collects the state from each
tree, generates system-wide information by aggregation, and
propagates it down each tree to keep participating nodes in-
formed about the system states in order to make cooperative
decisions. To minimize message overhead while attempting
to maintain a reasonable estimate of the transient system
states, we choose a sampling period of 10 seconds.
Every 10 seconds, a node i informs its parent in each tree:
(i) the bandwidth it is currently receiving from the tree, (ii)
the total bandwidth received by its descendants, and (iii)
the number of its descendants in each node class. The par-
ent assembles these information from its children, aggregates
with its own performance, and continues the process of pass-
ing information further up the tree. The source gathers the
most recent updates every 10 seconds from its children in
each tree, processes them, and sends along each tree a con-
trol update containing a monotonically increasing sequence
number and the following system states: (i) the total contri-
bution of the forest, i fi, by summing up the bandwidth
received by all nodes in the forest (ii) the total number of
participants, N , measured by the total number of Contrib-
utors in the system (since each peer contributes in exactly
one tree), and (iii) the number of Excess nodes connected to
each tree. Since a host may receive control updates at diﬀer-
ent times from diﬀerent trees it connects to, it will extract
data from the update with the greatest sequence number.
3.1.2 Computing Number of Entitled Trees
After joining the multi-tree system, a host i periodically
(every 3 seconds) computes the number of trees it should be
entitled to using the three-step process below:
a. Determine Tisample : A host i computes ri based on
Equation (1), using the most recent sample of system states.
To convert ri to a raw computation of Entitled trees Tisample
for peer i, we normalize it by the size of a single stripe:
Tisample =
ri
S/T
The computation occurs more frequent (once every 3 sec-
onds) than sampling (once every 10 seconds) because fi is a
transient value. Keeping the computation frequent enough
enables a node to quickly adapt to the dynamics of its chil-
dren and the system as a whole.
b. Smoothing Tisample : Since ri can change abruptly at
any time with fi and N , it is advisable to implement some
form of smoothing on Tisample to prevent the host from over-
reacting to peer and network dynamics. There are two tran-
sitions that could occur: Tisample may either increase or de-
crease. It will increase either if more resources are utilized
per node in the system, or if the node’s contribution has in-
creased. In either case, the change is likely to be relatively
long-lived and should be quickly responded to. In contrast,
the value will decrease with a drop in system resources or
with the departure of i’s children. Children departures may
be considered transient, as another child will be acquired
quickly in resource-scarce environments.
Thus, we have implemented a smoothing scheme which
tracks immediate increases in Tisample , but only gradually
responds to decreases. That is, we optimistically assume
that reductions are transient and improvements persist. To
achieve this, i calculates its estimated number of Entitled
trees, Tiest , in this way:
If Tisample < Tisample−old ,
Tiest = (1 − α) ∗ Tiest−old + α ∗ Tisample
(2)
Else, Tiest = Tisample
When the current sample, Tisample , is less than its previous
sample, Tisample−old, we smooth the sample using Equation
(2) where Tiest is a weighted combination of Tiest−old , the
previous value of Tiest , and Tisample . To put more weights on
recent samples than on old samples, we set α to be 0.125,
which from our experience has worked well. We call this
particular smoothing scheme SmoothDown-Only. We have
also evaluated other possible smoothing methods, and the
results are presented in Section 6.5.
c. Calculate Tief f : To further ensure the number of trees
entitled to a node depends on the node’s immediate history,
Tiest is fed through a hysteresis processor, with a thresh-
old of ±0.1 around an integral tree value. The greater the
threshold is, the more damping is imposed on Tiest . The
output of this processor is the eﬀective number of Entitled
trees, Tief f . For example, if the last Tiest calculated was
2.8, the current Tiest must exceed 3.1 to have a Tief f of
3. Finally, we restrict Tief f to the range [1, T ] and the re-
sulting value is the number of trees to which i is entitled.
It is lower-bounded by 1 since a host is always entitled to
its Contributor Tree and upper-bounded by T because when
Tief f is greater than the total number of trees, i will simply
be entitled to all trees.
3.2 Locating Excess Bandwidth
Since having a tax rate greater than 1 enforces each node
to contribute more than its Entitled bandwidth, there will
be leftover bandwidth in the system after nodes get their
Entitled bandwidth. However, given the system does not
know the bandwidth Fi a node i is willing to forward, it is
diﬃcult to determine the amount of theses leftover resources
and where they are located until they are found and utilized.
Thus, we choose to have a host i periodically explore for free
slots in trees where it is not entitled, as an Excess node, until
successfully connected. We call these trees Excess Trees of
i. Any successful connection represents a slot which is not
currently used to satisfy demands from Entitled nodes and
becomes a part of system’s Excess bandwidth.
Having nodes actively probe for Excess bandwidth has
an additional beneﬁt. When a node joins the system, its
contribution level is not known. A node cannot contribute
without any demand for resources, but in a steady state
this demand would not exist until it begins to contribute.
In order to accelerate this bootstrap process, there must be
an ongoing demand for bandwidth to enable under-utilized
nodes to raise their actual contribution. However, such ag-
gressive probing by Excess nodes may not be fruitful under
resource-constrained environments, as many of them may
often compete with other nodes, including Entitled nodes,
for the same slot, which may destabilize the tree structure.
Thus, our system proposes a backoﬀ scheme, in which an Ex-
cess node adaptively adjusts the aggressiveness of probing
based on feedbacks received from the tree.
Backoﬀ in Excess Trees: When an Excess node actively
explores for Excess bandwidth, there exists a possibility that
the attempt will fail due to (i) an inherent lack of resources
(no free slots nor preemptable children, will be clear later)
in the tree, or (ii) resources exist but the node is not able to
locate them. In either case, the node presumes that the tree
is saturated and will enter a phase of exponential backoﬀ in
which it waits for tbackof f seconds before retry. Consecutive
failures will result in an exponential increase in the backoﬀ
timer, which is computed as follows:
tbackof f = tbase ∗ rand(β
+ Tiexcess )
(3)
k
where tbase is the backoﬀ base, β is the backoﬀ factor, k is
the number of consecutive failures, and Tiexcess is node i’s
overall number of connected Excess trees. rand(x) returns a
random number in (0, x]. Currently, tbase and β are set to 5
and 2, respectively. Since our results show that the average
reconnection time for low-contributing nodes is around 1
minute, our choice of parameter values allow an Excess node
to successfully connect in 3-4 attempts.
This backup algorithm improves system stability since
there is less contention for slots in a tree. A node attempts to
connect to its Excess trees at a low priority level, implying
it may take longer to connect to the tree, and even if it does,
Table 1: Preemption Matrix: Can a disconnected
node A displace/preempt a connected node B?
A | B
C
Contributor (C)
By contribution
Entitled-NC (ENC)
Excess (EX)
Yes
By contribution
ENC
EX
No
No
No
By # Excess trees
Yes
Yes
chances are it will quickly be displaced by a higher priority
node. In addition, the heuristic scales the delay based on
Tiexcess to improve stability further because it biases Excess
nodes connecting to fewer Excess trees, which have a higher
priority than those connecting to more Excess trees. We
conﬁrm this beneﬁt in Section 6.5.2. The prioritization pol-
icy will be explained in detail in the next section. Finally,
to prevent nodes from repeatedly contending for the same
slot(s) in the future, we use a rand function to inject some
randomness in the backoﬀ computation.
3.3 Contribution-Aware Node Prioritization
In order to provide diﬀerential treatment to nodes for-
warding at diﬀerent levels, we introduce the notion of a
class-based design.
In this design, we further distinguish
an Entitled node by whether it contributes or not. A node
in a given tree belongs to one of three classes, in decreasing
order of priority:
Entitled Contributor (Contributor): A Contributor is
entitled to the tree and forwards its received stripe to its
children based on its forwarding bound Fi.
Entitled Non-Contributor (Entitled-NC): An Entitled-
NC is entitled to the tree but contributes no bandwidth.
Excess: An Excess node is not entitled to the tree and
contributes no bandwidth. It actively explores for a slot in
the tree and is able to connect only if free slots or slots of
lower priorities are available.
A host subscribes to multiple trees, but it may assume a
diﬀerent class in each tree. At any time, a peer joins one
tree as a Contributor. This allows all hosts, regardless of
its contribution level, to be entitled to at least one stripe
upon entering the system, which in turn guarantees them
with some minimum quality.
To assign priorities by class, we have implemented a class-
based prioritization, summarized in Table 1. In this scheme,
when a disconnected node of higher class cannot ﬁnd an
empty slot, it will displace/preempt a node of a lower class.
That is, when disconnected, Contributors may displace non-
contributors, whether Entitled-NC or Excess, and Entitled-
NCs may displace an Excess node. Further, when a parent
chooses between two Entitled nodes of the same class, the
node with a higher contribution level fi in its Contributor
tree is chosen. When choosing between two Excess nodes,
the node with fewer overall connected Excess trees is chosen.
This preference is only given for a diﬀerence of more than one
Excess tree, since otherwise a displaced node could immedi-
ately reclaim its position and destabilize the tree structure.
This provides incentives, since those nodes who contribute
more will reach the full source rate with fewer connected
Excess trees, and receive higher priorities over other Excess
nodes. This type of preemption aims to allow each host to
connect to the same number of Excess trees.
Finally, to oﬀer more stability/protection to nodes with
higher priorities, in the case a node can not ﬁnd an empty
slot, it will preempt, among nodes it knows, the one with
the lowest priority. Thus, Excess nodes with more connected
Excess trees than others are most likely to be displaced.
3.4 Multi-Tree Join Management
Upon joining the multi-tree broadcast, a host i contacts
the broadcast source and retrieves the following information
about the system: (i) the number of trees T , (ii) the source
rate S, (iii) the total number of participating hosts N , (iv)
the total contribution in the system i fi, and (v) the num-
ber of Excess nodes in each tree. i will select, with higher
probability, the tree containing fewer Excess nodes as its
Contributor Tree. Without any knowledge of i’s willingness
to contribute (i.e. Fi), balancing the non-entitled resources
(i.e. Excess and unused slots) across each tree at join-time is
diﬃcult. Our join mechanism strives to keep each tree bal-
anced in resources by encouraging new hosts to contribute
in the tree with fewer Excess slots, which implies a shortage
of resources in the tree. In Section 6.5.3, we show that using
this join mechanism maintains trees in reasonable balance.
At this point, i does not know how many trees it is entitled
to since it has not begun to contribute. An optimistic deci-
sion could provide the host with more opportunities initially
than it deserves. Thus we permit the host to initially join
the remaining T − 1 trees as an Excess node.
Note that the eﬀective number of Entitled trees Tief f com-
puted by a host i may change upon every computation pe-
riod. In case of an increase, among i’s Excess trees, it picks
one with the most Excess nodes and upgrades its class to
Entitled-NC. On the other hand, in case of an decrease,
among trees in which i is an Entitled-NC, it picks one with
the fewest Excess nodes and downgrades its class to Excess.
These processes repeat until i is entitled to Tief f trees.
4.
IMPLEMENTATION
To evaluate our heuristics on a real system, we have chosen
to implement them on the ESM Broadcasting System [9].
ESM is a functional overlay broadcast application that has
been used in academic conferences and workshops. The code
for the ESM client is approximately 43,000 lines. Having
this code base available provided a well-structured platform
to experiment with our contribution-aware heuristics. The
original ESM protocol uses a single-tree overlay to delivery
broadcast content. The rest of the section summarizes ESM
and describes how we extend it to use multiple overlay trees.
The ESM protocol [6] relies on a gossip-based group mem-
bership process to create a single overlay broadcast tree
among participating peers. For each node, knowledge about
other members is seeded by the source at join-time and aug-
mented through ongoing contact with other nodes. A node
periodically sends information about a subset of members
it knows to another node picked at random. The mem-
ber receiving this message will then update its knowledge
about other members. When a node i is disconnected from
the tree, it starts the parent selection process by probing
a random subset of the nodes it knows to inquire whether
they could accept it as a child. Each probed node responds
with information about whether it has a free space or a pre-
emptable child (a node with a lower priority than i). After
a timeout, the node evaluates potential parents, picks the
best one based on some conﬁgurable metrics and requests
addition as a child. An acceptance of this request means a
parent node will begin forwarding data to the node, while a
rejection causes i to restart the parent selection process.
Figure 2: Original vs Multi-tree implementation.
We employ a minimalist approach in adapting the code
base to the multi-tree framework.
In our multi-tree im-
plementation, we have added a layer called the Multi-Tree
Agent (MA) which contains an array of Single-Tree Protocol
Agents (SPA, the single-tree protocol is ESM in our case) as
shown in Figure 2. Each SPA is associated with one tree in
the forest. The MA maintains global states, makes global
decisions, multiplexes and de-multiplexes outgoing and in-
coming messages for a given tree to the associated SPA.
Each tree operates independently and in parallel, interact-
ing with the MA but not with the other SPAs. Finally, we
incorporate our contribution-aware heuristics introduced in
Section 3 into the Multi-tree ESM Broadcasting System.
5. EXPERIMENTAL EVALUATION
We have evaluated our contribution-aware heuristics with
a view to answering the following questions:
• How eﬀective are they in ensuring good overall perfor-
mance by utilizing the heterogeneous nature in the outgoing
bandwidth of nodes in the system?
• How eﬀective are they in oﬀering diﬀerential and equitable
performance to nodes based on their contributions?
• How stable is the resulting system, in terms of frequency
of changes in the number of connected trees?
To answer these questions, we have conducted experi-
ments on PlanetLab employing real traces of join/leave dy-
namics to compare the following two systems:
Cont-Agnostic: This system refers to multi-tree ESM with-
out any contribution-aware heuristics (e.g. no backoﬀ). When
distributing bandwidth, it does not consider nodes’ contri-
bution. The only possible preemption is that a Contributor
can preempt an Entitled-NC or Excess node. This system is
very similar to SplitStream [3] and CoopNet [17].
Cont-Aware: This system refers to multi-tree ESM with
our contribution-aware heuristics described in Section 3.
5.1 Performance Metrics
We evaluate our system based on the following metrics:
• Bandwidth: For each node, we measure the mean ap-
plication throughput in kbps over its lifetime. To maximize
quality of the received video stream, this metric should be
as close to the source rate as possible.
• Time Between Tree Reductions: This metric mea-
sures the impact of our heuristics on the stability of the
system using the average time between reductions in the
number of connected trees a node experiences. The implicit
assumption is that the user perceived quality is dictated by
the number of trees a node is connected to so each reduc-
tion degrades the user perceived streaming quality. We re-
quire they not be frequent so this metric should be as large
as possible, or application performance will be inconsistent.
However, we should be careful while interpreting this metric
Table 2: Constitution of hosts in a 20-minute segment
for each real-world trace.
Broadcast
Event
Avg
RI
SIGCOMM2002
SOSP2003
Rally
Slashdot
GrandChallenge
1.32
1.31
0.96
0.87
0.51
Low
Speed
100Kbps