#include
int main(void)
#include
，调用成功的返回值见下面的解释。我们通过一个例子来理解fork是怎样创
return 0;
} else
Kuni
*message;
!"u\quared au4 st stu. = abessaw
= 3;
全国嵌入式人才培训基地
第30章进程
3.进程控制
"This is the child\n";
570
---
## Page 571
这个程序的运行过程如下图所示。
5.
3
7
如果某个时刻父进程被调度执行了，
现在有两个一模一样的进程看起来都调用了fork进入内核等待从内核返回（实际上fork只调
内核根据父进程复制出一个子进程，父进程和子进程的PCB信息相同，
父进程调用fork，
回值是子进程的id，是一个大于0的整数，
先返回，还是这两个进程都等待，
用了一次)
父进程初始化。
核
int main()
Parent
图 30.4.fork
法。
亥，还没有从内核返回。
S
This
This 
return 0;
}else{
if
pid
int n;
char *message;
printf(message);
sleep (1);
(0 == ptd)
perror("fork failed");
=fork();
is
n=6;
exit(1);
=
is
the
the
此外系统中还有很多别的进程也等待从内核返回。是父进程先返回还是子进租
，子进程现在的状态看起来和父进程一样，做完了初始化，
the 
这是一个系统调用，
"This is the child\n";
child
一
，先去调度执行别的进程，这都不一
从内核返回后就从fork函数返回，
因此进入内核。
，因此执下面的else分支，然后执行for循环，
int main()
Child
return
if
pid
int n;
char *message;
pid_t pid;
 ptd)
n =6;
exit(1);
=3;
0：
0;n--）{
:"This is the child\n";
一定，
，保存在变量pid中的返
刚调用了fork进入内
，用户态代码和数据也
，取决于内核的调度
打
55
程
---
## Page 572
用gdb调试多进程的程序会遇到困难，gdb只能跟踪一个进程（默认是跟踪父进程）
件描述符在内核中指向同一个file结构体，
fork的另一个特性是所有由父进程打开的描述符都被复制到子进程中。
fork的返回值这样规定是有道理的。fork在子进程中返回0，
己
码。
同的值)
流程，
各返回一次。从上图可以看出，
fork函数的特点概括起来就是“调用一次，
宗多个进程，但可以设置gdb在fork之后跟踪父进程还是子进程。以上面的程序为例：
lid，然而要想得到子进程的id，只有将fork的返回值记录下来，别无它法。
的进程id，
回值则是子进程的id（从根本上说fork是从内核返回的，
7．父进程每打印一条消息就睡眠1秒，
6.
这个程序是在Shell下运行的，
眠1秒，在这1秒期间父进程也很有可能被调度到。所以程序运行的结果基本上是父子进程交
child\n"六次之后终止。fork调用把父进程的数据复制一份给子进程，但此后二者互不影
如果某个时刻子进程被调度执行了，
这七
序的运行结果如何。
统
替打印,
司
This
户仍然可以敲命令，即使命令不是紧跟在提示符后面，Shell也能正确读取。
子进程的消息打印到了Shel提示符后面。
Shell进程认为命令执行结束了
中其它进程非常繁忙则有可能观察到不同的结果。另外，
GNU
响。
d
opying"
 gdb
gcc
这样当fork函数返回后，
 gdb
is
，但这也不是一定的，
 main.c
int main(void)
（C)
-g
2008
pid_t pid;
 Free Software Foundation, Inc.
一开始是一个控制流程,
to the extent
you
，程序员可以根据返回值的不同让父进程和子进程执行不同的代
因此Shell进程是父进程的父进程。
于是打印Shell提示符，
，这时内核调度别的进程执行，
，返回两次"，在父进程中调用一次，在父进程和子进程
，从内核返回后就从fork函数返回，
，也就是说，file结构体的引用计数要增加。
。最后光标停在rhis is the child的下一行，
，调用fork之后发生了分叉，
，内核自有办法让父进程和子进程返回不
子进程仍可以调用getpid函数得到自
，而事实上子进程这时还没结束,
 law.
子进程每打印一条消息就睡
父、
 父进程运行时Shell进程处于
 在1秒这么长的间隙里（对
 Type
，子进程中相同编号的文
，保存在变量pid中的返
，而父进程中fork的
当父进程终止
 而不能同时跟
，变成两个控制
，这日
所
---
## Page 573
这些函数原型看起来很容易混，但只要掌握了规律就很好记。不带字母p（表示path）的exec函数
所以exec函数只有出错的返回值而没有成功的返回值。
这些函数如果调用成功则加载新的程序从启动代码开始执行，不再返回，如果调用出错则返回-1,
后该进程的id并未改变。
据完全被新程序替换，
要调用一种exec函数以执行另一个程序。当进程调用一
用fork创建子进程后执行的是和父进程相同的程序(但有可能执行不同的代码分支)
3.2.exec函数 请点评
其实有六种以exec开头的函数，统称exec函数:
印消息，
parent则是跟踪父进程）
·如果参数中包含l，则将其视为路径名。
envp[]);
int
envp[]);
#include 
而子进程被先前设的断点打断了。
This' is the parent"
Breakpoint 1, main () at main.c:17
Starting program: /home/akaedu/a.out
int
int
(gdb) This is the parent
(gdb)
Z
gdb）
Z
3
6
0
9
45
 execve(const char
execvp(const
 execle(const char *path, const char *arg, 
1S
the
，从新程序的启动例程开始执行。
,at 0x8048481: file main.c, line 17.
然后用run命令，
if(pid==0） {
if(pid
查找该程序
依次在PATH
, ps_argv);
因此函数原型中有..·，
一样。
execv
execl
=
，在PATH环境变量的目录列表中搜索这个程序。
的针数组中
把可变参数保存
"ps"
，其它五个函数最终都调用execve，
环境变量表
所指向的当前
使用enviorn
"pid,ppid,pgrp,session,tpgid,comm",
"pid,ppid,pgrp,session,tpgid,comm",
1
，数组中的最后一个指针也应该是NULL，
-o"
，可以把一份新的环境变量表传给它，
NULL}!
系统调用
execve
execle
，则应该先构造一个指向各参数的指针数
的数组中
把可变参数保存
所以execve在man手册
NULL};
其他exec函数
就像main函数
命令行
.45
---
## Page 575
序的现有功能，
如果希望把待转换的文件名放在命令行参数中，而不是借助于输入重定向，我们可以利用upper程
使用Shell重定向：
运行结果如下:
简单的例子，
调用exec后，
心它的值，
由于exec函数只有错误返回值，
执行此程序则得到：
例 30.4.upper
S
（按Ctrl-D表示EOF）
S
7199
6614
 cat file.txt
PID
: /upper
./a.out
把标准输入转成大写然后打印到标准输出：
原来打开的文件描述符仍然是打开的[3]。
再写-
int main(void)
#include 
￥
6614
6608
 PPID
exit(l); 
perror("exec ps");
 upper.c
一个包装程序wrapper。
file,
7199
6614
PGRP
return 0;
int ch;
*/
FILE.TXT，IT IS ALL LOWER CASE
 file.txt, it is all lower case.
只要返回了一定是出错了，
6614
6614
SESS
putchar(toupper(ch));
TPGID 
7199
7199
ps
bash
 COMMAND
。利用这一点可以实现I/O重定向。先看一个
 所以不需要判断它的返回值，直接在后
 execlp函数并不关
---
## Page 576
程终止，而父进程既不终止也不调用wait清理子进程：
3.3.wait和waitpid函数请点评
程终止的信号是哪个。这个进程的父进程可以调用wait或waitpid获取这些信息，
核在其中保存了
成大写，并不关心标准输入对应的是文件还是终端。运行结果如下：
wrapper程序将命令行参数当作文件名打开，将标准输入重定向到这个文件，然后调用exec执
父进程清理了
如果一个进程已经终止,
这
一个进程在终止时会关闭所有文件描述符，
个进程。
当它终止时Shell调用wait或waitpid得到它的退出状态同时彻底清除掉这个进程。
例 30.5. wrapper
int main(void)
THIS IS THE FILE, FILE.TXT, IT IS ALL LOWER CASE.
S
 我们知道一个进程的退出状态可以在Shel中用特殊变量s?查看，
./wrapper
为了观察到僵尸进程，我们自己写一个不正常的程序，
int main(int argc, char *argv[］)
#include 
#include
#include
一些信息：如果是正常终止则保存着退出状态，如果是异常终止则保存着导致该
 file.txt
，但是它的父进程尚未调用wait或waitpid对它进行清理，
execl(
close(:
dup2(fd, 
int fd; 
if
(argc_!= 2)
（fd）;
./upper",
exit(1);
perror("open");
exit(i);
‘(ONETIA NIGLS
fputs(
"usage: wrapper file\n", stderr);
 释放在用户空间分配的内存，
正常情况下,
，父进程fork出子进程，子进
但它的PCB还保留着，