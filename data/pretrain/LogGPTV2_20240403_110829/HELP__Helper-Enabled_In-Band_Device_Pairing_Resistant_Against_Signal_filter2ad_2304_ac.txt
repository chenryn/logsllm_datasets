chronization steps (omitted from Figure 3), D transmits
the integrity-protected form of mD : IDD,zD to the BS,
while the helper is injecting mH on slot positions denoted
by s. Here, we opt to protect both h(mD) and mD with the
PHY-layer primitive to conceal the value of mD from an
adversary A, who cannot learn the helper’s sequence mH.
This prevents a rogue BS from recovering mD, so that
it cannot pair with the device successfully. The helper
then reveals s to the BS through the secret channel im-
plemented by AE(·). The BS uses s to verify the in-
tegrity of mD and recover zD. BS replies with zBS = gXBS ,
where XBS is chosen in Zq uniformly at random. Each
party independently calculates kD,BS = gXD·XBS . Immedi-
ately following the key-agreement, D and BS engage in a
key conﬁrmation phase, initiated by D. This can be done
by executing a two-way challenge-response protocol [4],
as shown in Figure 4. If any of the veriﬁcation steps fail,
the corresponding party aborts the pairing protocol.
Given IDD,
(G,q,g)
Pick XD ∈U Zq
zD ← gXD
mD ← IDD,zD
(H active)
(H active)
kD,BS ← (zBS)XD
[h(mD),mD]
+mH−−−−−−→
−−−−−−→
AE(s,K)
mBS←−−−−−−
Given IDBS,
(G,q,g)
XBS ∈U Zq
zBS ← gXBS
mBS ← IDBS,zBS
Verify
& Extract zD
kD,BS ← (zD)XBS
Figure 3: Difﬁe-Hellman key-agreement on kD,BS using the HELP
PHY-layer integrity veriﬁcation method.
5 Security Analysis
In this section, we analyze the security of the HELP in-
tegrity veriﬁcation primitive and evaluate the security of
the DH-based pairing protocol presented in Section 4.3.
5.1 Security of the HELP primitive
Consider the transmission of [h(mD)],mD from D to the
BS, superimposed with the transmission of mH. The goal
of the adversary A is to replace mD with some desired m(cid:48)
D
and pass the veriﬁcation at the BS. In the absence of the
helper, a straightforward strategy for A is to annihilate
[h(mD)],mD and inject [h(m(cid:48)
D. However, when mH
is superimposed on [h(mD)], a cancellation of [h(mD)] +
mH leads to the likely detection of the cancellation attack
due to the “erasure” of the helper’s ON slots.
D)],m(cid:48)
Rather than blindly canceling the composite signal
[h(mD)] + mH transmitted by D and H, the adversary can
attempt to detect the ON slots of the helper and leave
those intact. He can then target only the OFF symbols of
mH and modify those to desired values so that the BS de-
codes m(cid:48)
D. To pass the integrity veriﬁcation performed by
USENIX Association
26th USENIX Security Symposium    439
BS
Table 1: Injection of desired bit b(cid:48)
can be detected.
D, when the ON slots of the helper
D
CD ∈U Zq
Ver(RBS)=true?
RD←hkD,BS
(IDD||CBS||1)
−−−−−→
IDD,CD
RBS←−−−−−
←−−−−−−
IDBS,CBS
RBS←hkD,BS
(IDBS||CD||0)
CBS ∈U Zq
RD−−−−→ Ver(RD) = true?
bD
bH
bD + bH
bA
bD + bH
+bA
b(cid:48)
D
1
2
3
4
5
6
7
8
D at the BS as a
Figure 5: Probability of accepting a forged message m(cid:48)
function of |s|, for varying inference capabilities of helper activity.
forgery by A, |s| is the length of the vector indicating
the number of the helper’s ON slots, and pI is the prob-
ability of inferring the helper’s activity during one MC
ON-OFF bit when D and H do not co-transmit. Here, δ
is a negligible function of |s|. In eq. (1), it is assumed
that a strongly universal hash function is used as part of
the HELP primitive.
Proof. The proof is provided in Appendix A.
In our analysis, we set the inference probability of H’s
activity to one when either D and H co-transmit or none
transmits. In the former case, the presence of high power
can be used to detect the superposition of D and H ON
slots, and hence infer H’s ON slot. In the latter case, the
absence of power can be used to detect a helper’s OFF
slot. When either D or H are active, the inference prob-
Figure 4: Key conﬁrmation of kD,BS using a challenge-response proto-
col.
the BS, it must hold that (a) all the ON slots indicated in
s are also ON slots in [h(m(cid:48)
D)] + mH , and (b) the removal
of mH during step 8 of HELP (see Section 4.2), leads to
the decoding of [h(m(cid:48)
D)]. As mD follows in plaintext, the
adversary can then replace mD with m(cid:48)
D.
We ﬁrst show that if the adversary can identify the ON
slots of the helper (this is equivalent to knowing mH),
then it can modify the transmitted signal such that the
desired value m(cid:48)
D is decoded at the BS. Consider the
transmission of one MC ON-OFF bit bD and the super-
position of an ON slot by H either during the ON or the
OFF slot of the coded bD. The possible outcomes of this
superposition are shown in the third column of Table 1.
Moreover, we show the signal bA that must be injected
by A to cause the decoding of the desired value b(cid:48)
D at the
BS. For illustration purposes, we show the signal cancel-
lation as a negation of the ON value.
From Table 1, we observe that if bH is known, the
adversary can always make the BS decode the desired
bit b(cid:48)
D, irrespective of the value of bD. Moreover, since
the ON bits of mH stay intact, the modiﬁed signal will
pass the PHY-layer integrity veriﬁcation at the BS. How-
ever, identifying the ON slots of the helper is difﬁcult
due to the location proximity between D and H and also
the strict reaction time necessary to perform the cancel-
lation attack in an online fashion. In the next proposition,
we prove the security of the integrity veriﬁcation mech-
anism under the realistic assumption that an ON slot for
the helper is timely identiﬁed by A with some probabil-
ity. We experimentally evaluate this probability in Sec-
tion 6. The security of the integrity veriﬁcation of HELP
is given by Proposition 1.
Proposition 1. The HELP integrity veriﬁcation primitive
is δ –secure with
(cid:18)
1− 1− pI
(cid:19)|s|
4
δ =
.
(1)
Here δ is the probability that the BS accepts a message
440    26th USENIX Security Symposium
USENIX Association
20406080100120140160NumberofHelperONSlots(|s|)10-1010-5100δpI = 0.50pI = 0.75pI = 0.90ability is set to pI < 1 due to the ambiguity in deciding
which of the two devices is active. Summarizing,
1, D & H transmit
1, D & H do not transmit
pI, D or H transmits.
Pr[Inference] =
(2)
In Proposition 1, δ depends on two variables; the car-
dinality of s and pI. From (1), it is evident that δ is a
negligible function of |s|, and a monotonically increas-
ing function of pI. In Figure 5, we show δ as a function
of |s| for various values of pI. As expected, a higher pI
yields a higher δ value for the adversary. For instance,
when pI = 0.9, δ = 0.0174, when |s| = 160, which may
not be acceptable. However, doubling the size of s low-
ers δ to 0.0003. Note that in a single use of the HELP
primitive, the attacker has only one chance to guess s
and modify the value of mD in an online fashion. Hence,
a higher probability of forgery is acceptable here relative
to standard cryptographic security (similar security val-
ues are sought in previous pairing protocols, which use
short authentication strings [40]).
5.2 Security of the Device Pairing Protocol
We now analyze the security of the device pairing pro-
tocol proposed in Section 4.3. Since the security of the
DH key-agreement protocol under a passive adversary is
standard [56], we focus on the security under active at-
tacks. We divide our analysis into two parts. In the ﬁrst
part, we examine if the adversary can pair a rogue device
to a legitimate BS. In the second part, we examine if a le-
gitimate device can be deceived to pair with a rogue base
station. These two steps are part of a MitM attack.
5.2.1 Pairing a Rogue Device with a legitimate BS
The pairing of a rogue device D(cid:48) with the BS can occur
under two different scenarios: (a) D(cid:48) pairs in the absence
of a legitimate device D, and (b) D(cid:48) pairs while D and the
BS execute a pairing session.
Pairing in the absence of a legitimate device: The pair-
ing protocol described in Section 4.3 is initiated with the
placement of H in close proximity to the legitimate de-
vice and the press of a button on H and D, respectively.
The button pressing sends a pairing initialization mes-
sage to the BS which is authenticated using the secure
AE(·) function. Without access to the helper device, the
adversary cannot initiate the pairing process from a re-
mote location.
Hijacking a legitimate pairing session: Since A cannot
initiate the pairing process with the BS, he can only at-
tempt to pair a rogue device with the BS by hijacking a
pairing session involving a legitimate device D. To estab-
lish a secret key with the BS, the adversary must modify
the DH public number zD of D into its own DH public
number z(cid:48)
D, where zD is contained in the ﬁrst message
mD sent from D to the BS (similar to a typical MitM at-
tack against a DH key exchange).
However, mD is protected by our integrity veriﬁcation
primitive. Note that in the HELP primitive, only h(mD)
is encoded using MC ON-OFF keying while mH is being
superimposed. The actual value of mD follows in plain-
text. In our proposed modiﬁed DH protocol, both h(mD)
and mD are encoded using HELP. According to Proposi-
tion 1, the adversary’s success probability in forging mD
in the HELP primitive is δ . When both h(mD) and mD
are encoded using HELP, we claim that the adversary’s
success probability in replacing mD is upper bounded by
δ . This is because in the primitive, the adversary can
change mD into any m(cid:48)
D with probability 1, but his ad-
vantage is limited by the probability of changing h(mD)
into h(m(cid:48)
D), which is δ . In the pairing protocol, the ad-
versary’s success probability of changing mD into m(cid:48)
D is
less or equal to 1. Thus overall, its success probability
is less or equal to δ , which is a negligible function of |s|
(number of ON slots injected by helper during [h(m(cid:48)
D)]).
Therefore, the adversary will be unable to pair D(cid:48) with
the legitimate BS.
5.2.2 Pairing D with a Rogue Base Station
We now examine whether the adversary acting as a rogue
BS can pair with a legitimate device D. To do so, the ad-
versary can perform a similar MitM attack as in the up-
link direction, by replacing the BS’s DH public parameter
zBS with its own number zBS(cid:48). This step of the MitM at-
tack corresponding to the message sent by A to D after
the reception of mD is shown in Figure 6.
For this attack to be successful, the adversary must
extract the DH public value zD so that it can com-
pute kD,BS(cid:48) = (zD)XBS(cid:48) . The value of zD is carried in
[h(mD),mD] +mH , using the HELP primitive. To recover
mD, the adversary must be able to determine the loca-
tion vector s that is used to generate mH for the portion
that corresponds to the transmission of mD. However, s
is transmitted from H to BS using the authenticated en-
cryption function AE(·), so A cannot obtain s directly
from the encrypted version of it.
Alternatively, A can collect and analyze the transmit-
ted signal of [h(mD),mD] + mH after receiving it and at-
tempt to identify all the ON slots in mH using radio ﬁn-
gerprinting methods [7,19,28,39,55,59]. However, none
of the ﬁngerprinting methods can achieve 100% accu-
racy. As long as A infers H’s ON slots with some prob-
ability smaller than one, we can drive the probability of
successfully extracting mD arbitrarily low by increasing
USENIX Association
26th USENIX Security Symposium    441
D
Given IDD, (G,q,g)
zD ← gXD
Pick XD ∈U Zq
mD ← IDD,zD
(H active)
(H active)
A
Given IDD(cid:48), (G,q,g)
XD(cid:48) ∈U Zq
zD(cid:48) ← gXD(cid:48)
D ← IDD(cid:48),zD(cid:48)
m(cid:48)
−−−−−−−−−→ Cancel and inject
[h(mD),mD]+mH
−−−−−−−−−→
AE(s,K)
←−−−−−−−−−
mBS(cid:48)
kD,BS(cid:48) ← (zBS(cid:48) )XD
D(cid:48),BS ← (zBS)XD(cid:48)
k(cid:48)
XBS(cid:48) ∈U Zq
zBS(cid:48) → gXBS(cid:48)
mBS(cid:48) → IDD(cid:48),zBS(cid:48)
Recover z(cid:48)
D
D,BS(cid:48) ← (z(cid:48)
k(cid:48)
D)XBS(cid:48)
BS
Given IDBS, (G,q,g)
XBS ∈U Zq
zBS ← gXBS
mBS ← IDBS,zBS
[h(m(cid:48)
D),m(cid:48)
D]
AE(s,K)
−−−−−−−−−−→
−−−−−−−−−−→ Verify & Extract zD(cid:48)
←−−−−−−−−−
D(cid:48),BS ← (zD(cid:48))XBS