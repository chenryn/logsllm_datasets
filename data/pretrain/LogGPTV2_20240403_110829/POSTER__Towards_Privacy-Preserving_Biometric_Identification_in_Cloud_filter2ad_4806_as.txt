templates in shared form and the FAR and FRR for the given template to
134
SECURE AND PRIVACY-FRIENDLY MULTIMODAL BIOMETRIC AUTHENTICATION USING
CLOUD-BASED IDENTITY PROVIDERS
the computational parties. We call the set of stored templates of a given
modality OM, and Oi is the ith binary template where i ∈ OM.
3. Calculate matching scores: The computational parties proceed to
compute the scores between the new and the stored templates of modality M.
The scores can be obtained obliviously, by utilizing the Hamming Distance
algorithm to calculate distances between the new and stored template without
any information leakage. As shown by Protocol 1, this can be achieved by
performing N M multiplications, where N M is the size of the template of the
M modality. The result of this phase is the vector of Hamming Distance
scores H M, where [h]M
is new template score T versus the stored Oj, for all
j delivered by the SP.
i
Protocol 1: Hamming Distance Protocol.
Input: Vector [T] of, Vector [O] where [T] and [O] are of size N.
Output: Hamming Distance [h]
1 for i ← 1 to N M do
2
3 [h] ←PN M
i=1 [ν]h
[ν]h
;
i
i ← [T]i + [O]i − 2 · ([T]i · [O]i);
4. Select matching scores: The protocol selects the best suitable score from
vector H M for every modality M. This unique value per modality is the one
that corresponds to the higher/lower score in each vector H M. We call the
vector, composed of the higher/lower scores of each modality SM, where
[s]M
represents the score of a biometric in the set of all modalities M in the
ith position of the vector SM. To identify such values and to construct the
vector SM in an oblivious fashion, it suﬃces to follow Protocol 2.
i
Protocol 2: Match Score Selection Protocol.
Input:
Output: Vector SM
1 for i ← 1 to M do
2
[δ] ← τ; for j ← 1 to |H M
| do
i
];
< [hM
] − [δ]) · [c] + [δ];
ij
3
4
5
[c] ← [δ] ?
[δ] ← ([hM
= [δ];
ij
[s]M
i
5. Fusion proportions: To perform fusion, a set of weights is provided to
the mechanism by the MIP and applied to the normalized matching scores.
PROPOSED MULTIMODAL AUTHENTICATION SYSTEM
135
Normalization is not needed, given that the size and weights are in the
public domain. In other words, normalization coeﬃcients could be applied
to them. In our setting, weights represent normalized performance rates for
each user of the unimodal cloud-based schemes. To reduce the processing
times, the proportions are presented in fractional form such that a weight w
is represented by the tuple {nw, dw}, where nw is its numerator and dw is
its denominator.
6. Fusion aggregation: Once the proportions are applied to the score vector
SM, they are aggregated. The result is also represented by a tuple ([n], [d])out.
Given that each normalized SM score is represented by a similar fraction,
in order to be able to aggregate them, it suﬃces to calculate the following
equations:
[nout] ← [d]
· [d]
sM
3
· [n]
sM
1
sM
2
+ [d]
[d]
sM
3
· [n]
sM
2
+ [d]
sM
1
· [d]
sM
2
[dout] ← [d]
· [d]
SM
3
· [d]
SM
1
SM
2
sM
1
·
· [n]
sM
3
(9)
(10)
7. Result delivery: The secret shares of the fusion result are transmitted
by the UAs computational parties towards the MIP. The combination of
the shares is performed by the MIP. This process is not computationally
demanding, since additive secret sharing requires the addition of n
ﬁeld elements, where n in the number of parties (Lagrange polynomial
interpolation). The MIP is the only one that accesses the ﬁnal result. The
MIP performs the fractional division to obtain a value ∈ {0, 1}.
8. Concealing fusion score: Note that the MIP is an honest-but-curious
entity. For security purposes, if the application requires the score of fusion
to be concealed; this can be achieved as follows: the MIP transmits, in
shared form, the threshold of decision [τ] in fractional representation to
the computational parties. The parties will be in charge of performing the
comparison by cross-multiplying numerators, denominators and calling to the
comparison functionality of our FABB. The resulting shares are transmitted
towards the system operator (through the MIP), for their interpolation,
yielding only {0, 1} values.
136
SECURE AND PRIVACY-FRIENDLY MULTIMODAL BIOMETRIC AUTHENTICATION USING
CLOUD-BASED IDENTITY PROVIDERS
5 Security and Privacy Analysis
Our protocol oﬀers perfect security against active adversaries under the
information-theoretic model, including unbounded adversary and assuming
secure channels and synchronous network. We proceed to show how our protocol
provides the achievable security under MPC described in Section 3.2, Deﬁnition 1.
The matching and fusion are designed in a data-oblivious fashion, from the
perspective of the computational parties and dealers. In other words, there is no
information leakage at any stage of the protocol. From an engineering perspective,
the creation of a model than can be manipulated to decide how a system works
in a real world application is considered necessary for testing whether a system
meets the performance standards. During this procedure or simulation as referred
by scientists who design complex systems, the model for a realistic scenario is
developed and compared against an ideal functionality [78]. For our protocol,
simulation provides conclusions and ideas on how to improve our design while
executing the modules needed to make the model into a functioning design
laboratory. In this way, if a UA cloud-based party would be corrupted, it would
not receive the protocol output, nor the available intermediate values for any
operation performed by our FABB, making, in this case, the simulation trivial.
This also holds for the case of a corrupted dealer. Given that our protocol can be
assembled as a unitary arithmetic circuit, made of addition and multiplication
gates, the simulation is achieved by invoking the simulation of the gates in the
predeﬁned order by the arithmetic circuit. During the execution of our protocol
π, the view of an adversary (the information that the adversary has access to)
does not compromise any private input from the honest parties, as long as the
security properties of the underlying MPC primitives hold. Consequently, we
can compose the properties of the combination of an ideal and real functionality
(hybrid model) as described in [41]. Given that no other information is made
available to any involved party, besides their corresponding private inputs and
the binary output to the SP and the user, we fulﬁll Deﬁnition 1. Practically,
the security depends exclusively on the MPC primitives that implement the
FABB functionality. We mention the perfect security against passive and active
adversaries of completeness theorems [17], adhering to the corresponding set of
assumptions such as private channels. This is also true for our MPC protocol
that is secure under composition.
EVALUATION
6 Evaluation
6.1 Complexity
137
The complexity of MPC protocol is measured in communication rounds, that
is deﬁned as a message exchange step between the computational parties.
A multiplication protocol can be implemented such that it requires one
computational round [72]. The same holds for sharing or reconstructing a
value. On the other hand, additions have no communication cost associated and
in the context of this work can be executed for “free”. Similar to the work of
Catrina and de Hoogh [44], comparisons can be implemented in constant time.
However, they are more expensive than multiplications since they need several
multiplications that can be parallelized for each round but in absolute terms,
they typically grow with the size of the input.
The Feature collection takes place during the ﬁrst two stages, it requires a
constant round complexity O(1). We do not consider the case in which a
decryption of the ciphertexts takes place. If such an approach is implemented,
the complexity of this step would vary depending on the distributed public key
decryption mechanism used. The Matching uses Protocols 1 and 2; both present
linear asymptotic complexities on the sides of their respective inputs: O(N M)
for the former, where N M is the size of the template, and O(|H|M), where |H|M
is the size of the vector of Hamming Distance scores, for each modality M. In
addition to that, the Fusion stages have constant time complexity O(1) because
the number of biometric modalities is ﬁxed. In our protocol, accompanying
constants are in single digits and inequality tests are only used when it is strictly
necessary; they can be executed in constant rounds, as described in [44], but
they are more expensive in practice.
6.2 Computational Eﬃciency
The asymptotic complexity of our protocol is relatively low, as a result of the
linear complexity in the templates’ size. However, in realistic scenarios, factors
such as the cryptographic primitives and the execution environment play an
important role. As previously stated, a multiplication requires a communication
round, whereas a comparison requires ∼ 4 rounds, even when its computation
is parallelized [44]. We have compatibilized the number of multiplications that
are needed in total for a ﬁxed standard template size. We measured the average
execution time for the number of multiplications and the necessary comparisons.
We use a custom implementation of the BGW protocol, taking into consideration
the improvements on network ﬂow problems presented in [12].
138
SECURE AND PRIVACY-FRIENDLY MULTIMODAL BIOMETRIC AUTHENTICATION USING
CLOUD-BASED IDENTITY PROVIDERS
Environment Setting
We use a RAM memory ≈ 500 KB per instance, where each party instance
takes two separate computational threads in order to manage communication
and cryptographic tasks separately. On the cryptographic MPC background
and adversarial model, we use the secret sharing model of Shamir [190], linear
addition, and BGW for multiplication, [17,72]. Comparisons were implemented
according to the results introduced in [44]. We consider input sizes of 32 bits.
Execution environment: We have run our computational evaluations using a
64-bit server equipped with 2 × 2 × 10 cores Intel Xeon E5-2687 at 3.1 GHz.
Parties: We assume the same scenario for the mechanism put forward by this
paper, considering three computational parties, under the theoretic information
model (private channels). All our tests were executed on the same server; hence
network latency was not considered.
Templates’ sizes: We used for our experiments: i) Face: 1024 bits, ii) Iris: 2048
bits and iii) Fingerprint: 4096 bits [122]. For our experimental analysis, we
have indicatively chosen ﬁve templates per modality with a relatively high sizes
to be able to easily adjust the protocol to realistic biometric deployments.
Computation Results
Following the results presented in Section 4.4, we accounted for the total number
of operations that require communication rounds, speciﬁcally, multiplications
and comparisons used by our protocol, (addition, is a linear operation and it
is well established that the cost is negligible [12,17,29,58]. Table 1 shows the
number of operations per activity, where σM is equal to the templates’ size in
bits, and γM is the number of the available templates for the analysis.
Table 1: Total atomic operations
Feature Collection PM
Stage
Fusion
Total:
Multiplications
i=1 σi · γi = 35, 840
1
35, 841
Inequality Tests
σ · γ = 15
0
15
Given that our protocol uses an arithmetic circuit approach, our tests had to
account for the cost of each arithmetic gate. Table 2 shows the CPU times
for the atomic MPC operations. The results reﬂect the average CPU time of
+2× 107 multiplications and 1.6× 106 inequality tests. Given the limited number
of equality tests, for instance 2, the impact of the diﬀerence in performance
DISCUSSION
139
between a comparison and an equality test is negligible. Table 3 presents the
details of the amortized computational time for our circuit size. Table 4 shows
the total communication cost per party in bits and in megabytes. A comparison
actually accounts for 121 multiplication operations and each share is 63 bits.
Table 2: CPU time for atomic operations
Operation
CPU Time in Secs
Multiplications
Inequality test
2.08 × 10−5
2.5 × 10−3
Table 3: Overall CPU time
Operation
Multiplications
Inequality tests
Total:
CPU Time in Secs
0.745
0.038
0.8
Table 4: Total communication cost per party
Operation
Multiplications
Inequality tests