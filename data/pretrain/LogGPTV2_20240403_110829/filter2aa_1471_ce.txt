hypervisor, resulting in a system crash. After those systems complete their
boot phase, the Secure Kernel has already processed all the nonexecutable
physical pages by SLAT-protecting them only for read and write access. In
this scenario, new executable pages can be allocated only if the target code
has been verified by Secure HVCI.
When the system, an application, or the Plug and Play manager require the
loading of a new runtime driver, a complex procedure starts that involves the
NT and the Secure Kernel memory manager, summarized here:
1. 
The NT memory manager creates a section object, allocates and fills a
new Control area (more details about the NT memory manager are
available in Chapter 5 of Part 1), reads the first page of the binary,
and calls the Secure Kernel with the goal to create the relative secure
image, which describe the new loaded module.
2. 
The Secure Kernel creates the SECURE_IMAGE data structure,
parses all the sections of the binary file, and fills the secure prototype
PTEs array.
3. 
The NT kernel reads the entire binary in nonexecutable shared
memory (pointed by the prototype PTEs of the control area). Calls the
Secure Kernel, which, using Secure HVCI, cycles between each
section of the binary image and calculates the final image hash.
4. 
If the calculated file hash matches the one stored in the digital
signature, the NT memory walks the entire image and for each page
calls the Secure Kernel, which validates the page (each page hash has
been already calculated in the previous phase), applies the needed
relocations (ASLR, Retpoline, and Import Optimization), and applies
the new SLAT protection, allowing the page to be executable but not
writable anymore.
5. 
The Section object has been created. The NT memory manager needs
to map the driver in its address space. It calls the Secure Kernel for
allocating the needed privileged PTEs for describing the driver’s
virtual address range. The Secure Kernel creates the NAR data
structure. It then maps the physical pages of the driver, which have
been previously verified, using the MiMapSystemImage routine.
 Note
When a NARs is initialized for a runtime driver, part of the NTE table is
filled for describing the new driver address space. The NTEs are not used
for keeping track of a runtime driver’s virtual address range (its virtual
pages are shared and not private), so the relative part of the NT address
table is filled with invalid “reserved” NTEs.
While VTL 0 kernel virtual address ranges are represented using the NAR
data structure, the Secure Kernel uses secure VADs (virtual address
descriptors) to track user-mode virtual addresses in VTL 1. Secure VADs are
created every time a new private virtual allocation is made, a binary image is
mapped in the address space of a trustlet (secure process), and when a VBS-
enclave is created or a module is mapped into its address space. A secure
VAD is similar to the NT kernel VAD and contains a descriptor of the VA
range, a reference counter, some flags, and a pointer to the Secure section,
which has been created by SKCI. (The secure section pointer is set to 0 in
case of secure VADs describing private virtual allocations.) More details
about Trustlets and VBS-based enclaves will be discussed later in this
chapter.
Page identity and the secure PFN database
After a driver is loaded and mapped correctly into VTL 0 memory, the NT
memory manager needs to be able to manage its memory pages (for various
reasons, like the paging out of a pageable driver’s section, the creation of
private pages, the application of private fixups, and so on; see Chapter 5 in
Part 1 for more details). Every time the NT memory manager operates on
protected memory, it needs the cooperation of the Secure Kernel. Two main
kinds of secure services are offered to the NT memory manager for operating
with privileged memory: protected pages copy and protected pages removal.
A PAGE_IDENTITY data structure is the glue that allows the Secure
Kernel to keep track of all the different kinds of pages. The data structure is
composed of two fields: an Address Context and a Virtual Address. Every
time the NT kernel calls the Secure Kernel for operating on privileged pages,
it needs to specify the physical page number along with a valid
PAGE_IDENTITY data structure describing what the physical page is used
for. Through this data structure, the Secure Kernel can verify the requested
page usage and decide whether to allow the request.
Table 9-4 shows the PAGE_IDENTITY data structure (second and third
columns), and all the types of verification performed by the Secure Kernel on
different memory pages:
■    If the Secure Kernel receives a request to copy or to release a shared
executable page of a runtime driver, it validates the secure image
handle (specified by the caller) and gets its relative data structure
(SECURE_IMAGE). It then uses the relative virtual address (RVA) as
an index into the secure prototype array to obtain the physical page
frame (PFN) of the driver’s shared page. If the found PFN is equal to
the caller’s specified one, the Secure Kernel allows the request;
otherwise it blocks it.
■    In a similar way, if the NT kernel requests to operate on a trustlet or
an enclave page (more details about trustlets and secure enclaves are
provided later in this chapter), the Secure Kernel uses the caller’s
specified virtual address to verify that the secure PTE in the secure
process page table contains the correct PFN.
■    As introduced earlier in the section ”The Secure Kernel memory
manager” , for private kernel pages, the Secure Kernel locates the
NTE starting from the caller’s specified virtual address and verifies
that it contains a valid PFN, which must be the same as the caller’s
specified one.
■    Placeholder pages are free pages that are SLAT protected. The Secure
Kernel verifies the state of a placeholder page by using the PFN
database.
Table 9-4 Different page identities managed by the Secure Kernel
Page 
Type
Address 
Context
Virtual Address
Verification 
Structure
Kernel 
Shared
Secure 
Image 
Handle
RVA of the page
Secure Prototype 
PTE
Trustlet/
Enclave
Secure 
Process 
Handle
Virtual Address of the 
Secure Process
Secure PTE
Kernel 
Private
0
Kernel Virtual 
Address of the page
NT address table 
entry (NTE)
Placehol
der
0
0
PFN entry
The Secure Kernel memory manager maintains a PFN database to
represent the state of each physical page. A PFN entry in the Secure Kernel is
much smaller compared to its NT equivalent; it basically contains the page
state and the share counter. A physical page, from the Secure Kernel
perspective, can be in one of the following states: invalid, free, shared, I/O,
secured, or image (secured NT private).
The secured state is used for physical pages that are private to the Secure
Kernel (the NT kernel can never claim them) or for physical pages that have
been allocated by the NT kernel and later SLAT-protected by the Secure
Kernel for storing executable code verified by Secure HVCI. Only secured
nonprivate physical pages have a page identity.
When the NT kernel is going to page out a protected page, it asks the
Secure Kernel for a page removal operation. The Secure Kernel analyzes the
specified page identity and does its verification (as explained earlier). In case
the page identity refers to an enclave or a trustlet page, the Secure Kernel
encrypts the page’s content before releasing it to the NT kernel, which will
then store the page in the paging file. In this way, the NT kernel still has no
chance to intercept the real content of the private memory.
Secure memory allocation
As discussed in previous sections, when the Secure Kernel initially starts, it
parses the firmware’s memory descriptor lists, with the goal of being able to
allocate physical memory for its own use. In phase 1 of its initialization, the
Secure Kernel can’t use the memory services provided by the NT kernel (the
NT kernel indeed is still not initialized), so it uses free entries of the
firmware’s memory descriptor lists for reserving 2-MB SLABs. A SLAB is a
2-MB contiguous physical memory, which is mapped by a single nested page
table directory entry in the hypervisor. All the SLAB pages have the same
SLAT protection. SLABs have been designed for performance
considerations. By mapping a 2-MB chunk of physical memory using a
single nested page entry in the hypervisor, the additional hardware memory
address translation is faster and results in less cache misses on the SLAT
table.
The first Secure Kernel page bundle is filled with 1 MB of the allocated
SLAB memory. A page bundle is the data structure shown in Figure 9-37,
which contains a list of contiguous free physical page frame numbers (PFNs).
When the Secure Kernel needs memory for its own purposes, it allocates
physical pages from a page bundle by removing one or more free page
frames from the tail of the bundle’s PFNs array. In this case, the Secure
Kernel doesn’t need to check the firmware memory descriptors list until the
bundle has been entirely consumed. When the phase 3 of the Secure Kernel
initialization is done, memory services of the NT kernel become available,
and so the Secure Kernel frees any boot memory descriptor lists, retaining
physical memory pages previously located in bundles.
Figure 9-37 A secure page bundle with 80 available pages. A bundle is
composed of a header and a free PFNs array.
Future secure memory allocations use normal calls provided by the NT
kernel. Page bundles have been designed to minimize the number of normal
calls needed for memory allocation. When a bundle gets fully allocated, it
contains no pages (all its pages are currently assigned), and a new one will be
generated by asking the NT kernel for 1 MB of contiguous physical pages
(through the ALLOC_PHYSICAL_PAGES normal call). The physical
memory will be allocated by the NT kernel from the proper SLAB.
In the same way, every time the Secure Kernel frees some of its private
memory, it stores the corresponding physical pages in the correct bundle by
growing its PFN array until the limit of 256 free pages. When the array is
entirely filled, and the bundle becomes free, a new work item is queued. The
work item will zero-out all the pages and will emit a
FREE_PHYSICAL_PAGES normal call, which ends up in executing the
MmFreePagesFromMdl function of the NT memory manager.
Every time enough pages are moved into and out of a bundle, they are
fully protected in VTL 0 by using the SLAT (this procedure is called
“securing the bundle”). The Secure Kernel supports three kinds of bundles,
which all allocate memory from different SLABs: No access, Read-only, and
Read-Execute.
Hot patching
Several years ago, the 32-bit versions of Windows were supporting the hot
patch of the operating-system’s components. Patchable functions contained a
redundant 2-byte opcode in their prolog and some padding bytes located
before the function itself. This allowed the NT kernel to dynamically replace
the initial opcode with an indirect jump, which uses the free space provided
by the padding, to divert the code to a patched function residing in a different
module. The feature was heavily used by Windows Update, which allowed
the system to be updated without the need for an immediate reboot of the
machine. When moving to 64-bit architectures, this was no longer possible
due to various problems. Kernel patch protection was a good example; there
was no longer a reliable way to modify a protected kernel mode binary and to
allow PatchGuard to be updated without exposing some of its private
interfaces, and exposed PatchGuard interfaces could have been easily
exploited by an attacker with the goal to defeat the protection.
The Secure Kernel has solved all the problems related to 64-bit
architectures and has reintroduced to the OS the ability of hot patching kernel
binaries. While the Secure Kernel is enabled, the following types of
executable images can be hot patched:
■    VTL 0 user-mode modules (both executables and libraries)
■    Kernel mode drivers, HAL, and the NT kernel binary, protected or not
by PatchGuard
■    The Secure Kernel binary and its dependent modules, which run in
VTL 1 Kernel mode
■    The hypervisor (Intel, AMD, and the ARM version).
Patch binaries created for targeting software running in VTL 0 are called
normal patches, whereas the others are called secure patches. If the Secure
Kernel is not enabled, only user mode applications can be patched.
A hot patch image is a standard Portable Executable (PE) binary that
includes the hot patch table, the data structure used for tracking the patch
functions. The hot patch table is linked in the binary through the image load
configuration data directory. It contains one or more descriptors that describe
each patchable base image, which is identified by its checksum and time date
stamp. (In this way, a hot patch is compatible only with the correct base
images. The system can’t apply a patch to the wrong image.) The hot patch
table also includes a list of functions or global data chunks that needs to be
updated in the base or in the patch image; we describe the patch engine
shortly. Every entry in this list contains the functions’ offsets in the base and
patch images and the original bytes of the base function that will be replaced.
Multiple patches can be applied to a base image, but the patch application
is idempotent. The same patch may be applied multiple times, or different
patches may be applied in sequence. Regardless, the last applied patch will
be the active patch for the base image. When the system needs to apply a hot
patch, it uses the NtManageHotPatch system call, which is employed to
install, remove, or manage hot patches. (The system call supports different
“patch information” classes for describing all the possible operations.) A hot
patch can be installed globally for the entire system, or, if a patch is for user
mode code (VTL 0), for all the processes that belong to a specific user
session.
When the system requests the application of a patch, the NT kernel locates
the hot patch table in the patch binary and validates it. It then uses the
DETERMINE_HOT_PATCH_TYPE secure call to securely determine the
type of patch. In the case of a secure patch, only the Secure Kernel can apply
it, so the APPLY_HOT_PATCH secure call is used; no other processing by
the NT kernel is needed. In all the other cases, the NT kernel first tries to
apply the patch to a kernel driver. It cycles between each loaded kernel
module, searching for a base image that has the same checksum described by
one of the patch image’s hot patch descriptors.
Hot patching is enabled only if the
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session
Manager\Memory Management\HotPatchTableSize registry value is a
multiple of a standard memory page size (4,096). Indeed, when hot patching
is enabled, every image that is mapped in the virtual address space needs to
have a certain amount of virtual address space reserved immediately after the
image itself. This reserved space is used for the image’s hot patch address
table (HPAT, not to be confused with the hot patch table). The HPAT is used
to minimize the amount of padding necessary for each function to be patched
by storing the address of the new function in the patched image. When
patching a function, the HPAT location will be used to perform an indirect
jump from the original function in the base image to the patched function in
the patch image (note that for Retpoline compatibility, another kind of
Retpoline routine is used instead of an indirect jump).
When the NT kernel finds a kernel mode driver suitable for the patch, it
loads and maps the patch binary in the kernel address space and creates the
related loader data table entry (for more details, see Chapter 12). It then scans
each memory page of both the base and the patch images and locks in
memory the ones involved in the hot patch (this is important; in this way, the
pages can’t be paged out to disk while the patch application is in progress). It
finally emits the APPLY_HOT_PATCH secure call.
The real patch application process starts in the Secure Kernel. The latter
captures and verifies the hot patch table of the patch image (by remapping
the patch image also in VTL 1) and locates the base image’s NAR (see the
previous section, “The Secure Kernel memory manager” for more details
about the NARs), which also tells the Secure Kernel whether the image is
protected by PatchGuard. The Secure Kernel then verifies whether enough
reserved space is available in the image HPAT. If so, it allocates one or more
free physical pages (getting them from the secure bundle or using the
ALLOC_PHYSICAL_PAGES normal call) that will be mapped in the
reserved space. At this point, if the base image is protected, the Secure
Kernel starts a complex process that updates the PatchGuard’s internal state
for the new patched image and finally calls the patch engine.
The kernel’s patch engine performs the following high-level operations,
which are all described by a different entry type in the hot patch table:
1. 
Patches all calls from patched functions in the patch image with the
goal to jump to the corresponding functions in the base image. This
ensures that all unpatched code always executes in the original base
image. For example, if function A calls B in the base image and the
patch changes function A but not function B, then the patch engine
will update function B in the patch to jump to function B in the base
image.
2. 
Patches the necessary references to global variables in patched
functions to point to the corresponding global variables in the base
image.
3. 
Patches the necessary import address table (IAT) references in the
patch image by copying the corresponding IAT entries from the base
image.
4. 
Atomically patches the necessary functions in the base image to jump
to the corresponding function in the patch image. As soon as this is
done for a given function in the base image, all new invocations of
that function will execute the new patched function code in the patch
image. When the patched function returns, it will return to the caller
of the original function in the base image.
Since the pointers of the new functions are 64 bits (8 bytes) wide, the
patch engine inserts each pointer in the HPAT, which is located at the end of
the binary. In this way, it needs only 5 bytes for placing the indirect jump in
the padding space located in the beginning of each function (the process has
been simplified. Retpoline compatible hot-patches requires a compatible
Retpoline. Furthermore, the HPAT is split in code and data page).
As shown in Figure 9-38, the patch engine is compatible with different
kinds of binaries. If the NT kernel has not found any patchable kernel mode
module, it restarts the search through all the user mode processes and applies
a procedure similar to properly hot patching a compatible user mode
executable or library.
Figure 9-38 A schema of the hot patch engine executing on different types
of binaries.
Isolated User Mode
Isolated User Mode (IUM), the services provided by the Secure Kernel to its
secure processes (trustlets), and the trustlets general architecture are covered
in Chapter 3 of Part 1. In this section, we continue the discussion starting
from there, and we move on to describe some services provided by the
Isolated User Mode, like the secure devices and the VBS enclaves.
As introduced in Chapter 3 of Part 1, when a trustlet is created in VTL 1, it
usually maps in its address space the following libraries:
■    Iumdll.dll The IUM Native Layer DLL implements the secure system
call stub. It’s the equivalent of Ntdll.dll of VTL 0.
■    Iumbase.dll The IUM Base Layer DLL is the library that implements
most of the secure APIs that can be consumed exclusively by VTL 1
software. It provides various services to each secure process, like
secure identification, communication, cryptography, and secure
memory management. Trustlets do not usually call secure system
calls directly, but they pass through Iumbase.dll, which is the
equivalent of kernelbase.dll in VTL 0.
■    IumCrypt.dll Exposes public/private key encryption functions used
for signing and integrity verification. Most of the crypto functions
exposed to VTL 1 are implemented in Iumbase.dll; only a small
number of specialized encryption routines are implemented in
IumCrypt. LsaIso is the main consumer of the services exposed by
IumCrypt, which is not loaded in many other trustlets.
■    Ntdll.dll, Kernelbase.dll, and Kernel32.dll A trustlet can be
designed to run both in VTL 1 and VTL 0. In that case, it should only
use routines implemented in the standard VTL 0 API surface. Not all
the services available to VTL 0 are also implemented in VTL 1. For
example, a trustlet can never do any registry I/O and any file I/O, but
it can use synchronization routines, ALPC, thread APIs, and
structured exception handling, and it can manage virtual memory and
section objects. Almost all the services offered by the kernelbase and
kernel32 libraries perform system calls through Ntdll.dll. In VTL 1,
these kinds of system calls are “translated” in normal calls and
redirected to the VTL 0 kernel. (We discussed normal calls in detail
earlier in this chapter.) Normal calls are often used by IUM functions
and by the Secure Kernel itself. This explains why ntdll.dll is always