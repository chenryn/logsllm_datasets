`fadump`{.literal}
机制通过重新引导分区并使用新内核转储之前内核崩溃中的数据，提供比传统转储类型的更高可靠性。`fadump`{.literal}
需要一个基于 IBM POWER6 处理器或更高版本的硬件平台。
有关 `fadump`{.literal} 机制的详情，包括针对 PowerPC
重置硬件的方法，请查看
`/usr/share/doc/kexec-tools/fadump-howto.txt`{.literal} 文件。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
未保留的内存区域（称为引导内存）是在崩溃事件后成功引导内核所需的 RAM
量。默认情况下，引导内存大小为 256MB 或系统 RAM 总量的
5%，以较大者为准。
:::
与 `kexec-initiated`{.literal} 事件不同，`fadump`{.literal} 机制使用
production 内核恢复崩溃转储。崩溃后引导时，PowerPC 硬件使设备节点
`/proc/device-tree/rtas/ibm.kernel-dump`{.literal} 可供 `proc`{.literal}
文件系统 (`procfs`{.literal}) 使用。`fadump-aware kdump`{.literal}
脚本，检查存储的 `vmcore`{.literal}，然后完全完成系统重启。
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#enabling-firmware-assisted-dump-mechanism_firmware-assisted-dump-mechanisms}启用固件支持的转储机制 {.title}
:::
IBM POWER 的崩溃转储功能可以通过启用固件支持的转储 (fadump) 机制来增强。
::: orderedlist
**流程**
1.  安装和配置 `kdump`{.literal}。
2.  在 `/etc/default/grub`{.literal} 文件中的
    `GRUB_CMDLINE_LINUX`{.literal} 行中添加 `fadump=on`{.literal}：
    ``` screen
    GRUB_CMDLINE_LINUX="rd.lvm.lv=rhel/swap crashkernel=auto
    rd.lvm.lv=rhel/root rhgb quiet fadump=on"
    ```
3.  （可选）如果要指定保留引导内存而不是使用默认值，请在
    `/etc/default/grub`{.literal} 中将 `crashkernel=xxM`{.literal}
    配置为 `GRUB_CMDLINE_LINUX`{.literal}，其中 `xx`{.literal} 是以 MB
    为单位所需的内存量：
    ``` screen
    GRUB_CMDLINE_LINUX="rd.lvm.lv=rhel/swap crashkernel=xxM rd.lvm.lv=rhel/root rhgb quiet fadump=on"
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    红帽建议在执行前测试所有引导选项。如果您在从崩溃内核引导时观察到内存不足
    (OOM) 错误，请增大 `crashkernel=`{.literal}
    参数中指定的值，直到崩溃内核可以完全启动。在本例中可能会需要进行一些不同的尝试。
    :::
:::
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#firmware-assisted-dump-mechanisms-on-ibm-z-hardware_firmware-assisted-dump-mechanisms}IBM Z 硬件支持的固件转储机制 {.title}
:::
IBM Z 系统支持以下固件支持的转储机制：
::: itemizedlist
-   `独立转储 (sadump) `{.literal}
-   `VMDUMP`{.literal}
:::
IBM Z 系统支持并使用 `kdump`{.literal} 基础架构。但是，使用 IBM Z
的固件支持的转储 (fadump) 方法之一可以提供各种优点：
::: itemizedlist
-   `sadump`{.literal} 机制是从系统控制台启动和控制的，并存储在
    `IPL`{.literal} 可引导设备中。
-   `VMDUMP`{.literal} 机制与 `sadump`{.literal}
    类似。此工具也从系统控制台启动，但会从硬件检索生成的转储并将其复制到系统以进行分析。
-   这些方法（与其他基于硬件的转储机制类似）能够在 `kdump`{.literal}
    服务启动前捕获机器在早期启动阶段的状态。
-   尽管 `VMDUMP`{.literal} 包含将转储文件接收到 Red Hat Enterprise
    Linux 系统中的机制，但 `VMDUMP`{.literal} 的配置和控制是从 IBM Z
    硬件控制台管理的。
:::
IBM 在[**独立转储程序**]{.strong}文章和[**使用 VMDUMP 的 z/VM
中创建转储**]{.strong}文章中 `VMDUMP`{.literal} 详细介绍了
`sadump`{.literal}。
IBM 还在 [ **Using the Dump Tools on Red Hat Enterprise Linux
7.4**]{.strong} 中介绍了在 Red Hat Enterprise Linux 7
中使用转储工具的信息。
::: itemizedlist
**其它资源**
-   [独立转储程序](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.ieav100/standa.htm){.link}
-   [使用 VMDUMP 在 z/VM
    中创建转储](https://www.ibm.com/support/knowledgecenter/en/linuxonibm/com.ibm.linux.z.lgdt/lgdt_t_vmdump.html){.link}
-   [在 Red Hat Enterprise Linux 7.4
    上使用转储工具](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lgdt/lgdt_t_usingdumptools.html){.link}
:::
:::
::: section
::: titlepage
# []{#firmware-assisted-dump-mechanisms_managing-monitoring-and-updating-the-kernel.html#using-sadump-on-fujitsu-primequest-systems_firmware-assisted-dump-mechanisms}在 Fujitsu PRIMEQUEST 系统中使用 sadump {.title}
:::
Fujitsu `sadump`{.literal} 机制旨在在 `kdump`{.literal}
无法成功完成时提供 `fallback`{.literal} 转储捕获。`sadump`{.literal}
机制是从系统管理板 (MMB) 接口手动调用的。使用 MMB，为 Intel 64 或 AMD 64
服务器配置 `kdump`{.literal}，然后执行以下步骤启用 `sadump`{.literal}。
::: orderedlist
**流程**
1.  在 `/etc/sysctl.conf`{.literal} 文件中添加或编辑以下行，以确保
    `sadump`{.literal} 的 `kdump`{.literal} 按预期启动：
    ``` screen
    kernel.panic=0
    kernel.unknown_nmi_panic=1
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    特别是，请确保在 `kdump`{.literal} 后系统不会重启。如果系统在
    `kdump`{.literal} 无法保存 `vmcore`{.literal} 文件后重启，则无法调用
    `sadump`{.literal}。
    :::
2.  适当地将 `/etc/kdump.conf`{.literal} 中的 `failure_action`{.literal}
    参数设置为 `halt`{.literal} 或 `shell`{.literal}。
    ``` screen
    failure_action shell
    ```
:::
::: itemizedlist
**其它资源**
-   FUJITSU Server PRIMEQUEST 2000 系列安装手册
:::
:::
:::
[]{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel}第 15 章 分析内核转储 {.title}
:::
要确定系统崩溃的原因，您可以使用 [**[crash]{.application}**]{.strong}
实用程序，它提供了一个与 GNU Debugger (GDB)
类似的交互式提示符。这个工具允许您交互式地分析由
`kdump`{.literal}、`netdump`{.literal}、`diskdump`{.literal} 或
`xendump`{.literal} 创建的内核转储以及正在运行的 Linux
系统。另外，您还可以使用 Kernel Oops Analyzer 或者 Kdump Helper 工具。
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#installing-the-crash-utility_analyzing-a-core-dump}安装 crash 工具 {.title}
:::
以下流程描述了如何安装 [**[crash]{.application}**]{.strong} 分析工具。
::: orderedlist
**流程**
1.  启用相关的软件仓库：
    ``` screen
    # subscription-manager repos --enable baseos repository
    ```
    ``` screen
    # subscription-manager repos --enable appstream repository
    ```
    ``` screen
    # subscription-manager repos --enable rhel-8-for-x86_64-baseos-debug-rpms
    ```
2.  安装 `crash`{.literal} 软件包：
    ``` screen
    # yum install crash
    ```
3.  安装 `kernel-debuginfo`{.literal} 软件包：
    ``` screen
    # yum install kernel-debuginfo
    ```
    软件包与您正在运行的内核对应，提供转储分析所需的数据。
:::
::: itemizedlist
**其它资源**
-   [配置基本系统设置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_basic_system_settings/index#sec-Installation-Basic-Tasks){.link}
    Red Hat Enterprise Linux
:::
:::
::: section
::: titlepage
# []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#running-and-exiting-the-crash-utility_analyzing-a-core-dump}运行和退出 crash 工具 {.title}
:::
以下流程描述了如何启动崩溃程序来分析系统崩溃原因。
::: itemizedlist
**先决条件**
-   确定当前运行的内核（例如 `4.18.0-5.el8.x86_64`{.literal}）。
:::
::: orderedlist
**流程**
1.  要启动 `crash`{.literal}
    工具程序，需要将两个必要的参数传递给该命令：
    ::: itemizedlist
    -   debug-info（解压缩的 vmlinuz 镜像），如
        `/usr/lib/debug/lib/modules/4.18.0-5.el8.x86_64/vmlinux`{.literal}，通过特定的
        `kernel-debuginfo`{.literal} 软件包提供。
    -   实际 vmcore 文件，如
        `/var/crash/127.0.0.1-2018-10-06-14:05:33/vmcore`{.literal}
        生成的 `crash`{.literal} 命令类似如下：
        ``` screen
        # crash /usr/lib/debug/lib/modules/4.18.0-5.el8.x86_64/vmlinux /var/crash/127.0.0.1-2018-10-06-14:05:33/vmcore
        ```
        使用 `kdump`{.literal} 捕获的相同 [*\*]{.emphasis}
        版本。
        ::: example
        []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#idm139694377445904}
        **例 15.1. 运行 crash 工具**
        ::: example-contents
        以下示例演示了使用 4.18.0-5.el8.x86_64 内核分析在 2018 年 10 月
        6 日下午 14:05 时创建的内核转储。
        ``` screen
        ...
        WARNING: kernel relocated [202MB]: patching 90160 gdb minimal_symbol values
              KERNEL: /usr/lib/debug/lib/modules/4.18.0-5.el8.x86_64/vmlinux
            DUMPFILE: /var/crash/127.0.0.1-2018-10-06-14:05:33/vmcore  [PARTIAL DUMP]
                CPUS: 2
                DATE: Sat Oct  6 14:05:16 2018
              UPTIME: 01:03:57
        LOAD AVERAGE: 0.00, 0.00, 0.00
               TASKS: 586
            NODENAME: localhost.localdomain
             RELEASE: 4.18.0-5.el8.x86_64
             VERSION: #1 SMP Wed Aug 29 11:51:55 UTC 2018
             MACHINE: x86_64  (2904 Mhz)
              MEMORY: 2.9 GB
               PANIC: "sysrq: SysRq : Trigger a crash"
                 PID: 10635
             COMMAND: "bash"
                TASK: ffff8d6c84271800  [THREAD_INFO: ffff8d6c84271800]
                 CPU: 1
               STATE: TASK_RUNNING (SYSRQ)
        crash>
        ```
        :::
        :::
    :::
2.  要退出交互式提示符并终止 `crash`{.literal}，请键入 `exit`{.literal}
    或 `q`{.literal}。
    ::: example
    []{#analyzing-a-core-dump_managing-monitoring-and-updating-the-kernel.html#idm139694397514832}
    **例 15.2. 退出 crash 工具**
    ::: example-contents
    ``` screen
    crash> exit
    ~]#
    ```
    :::
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`crash`{.literal}
命令也可以用作调试实时系统的强大工具。但是请谨慎使用它，以免破坏您的系统。
:::
::: itemizedlist
**其它资源**
-   [预期系统重启指南](https://access.redhat.com/articles/206873){.link}
:::