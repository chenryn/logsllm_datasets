# ThinkPHP5.0.x RCE分析与利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## ThinkPHP 5.0.x (method`新增了白名单过滤，只允许`$this->method`为常用的几个方法，否则就将其置为`POST`方法，因此我们的入口点就可以从`Request.php`跟进。
全局搜索`call_user_func`，在`Request.php`中发现在`filterValue`方法中
`/thinkphp/library/think/Request.php`
    private function filterValue(&$value, $key, $filters)
        {
            $default = array_pop($filters);
            foreach ($filters as $filter) {
                if (is_callable($filter)) {
                    // 调用函数或者方法过滤
                    $value = call_user_func($filter, $value);
                } elseif (is_scalar($value)) {
                    if (false !== strpos($filter, '/')) {
                        // 正则过滤
                        if (!preg_match($filter, $value)) {
                            // 匹配不成功返回默认值
                            $value = $default;
                            break;
                        }
                    }
将该方法的第三个参数(array)取出键值作为`call_user_func`的方法，并且将第一个参数`$value`作为回调函数的参数传入，最后将回调函数的返回重新赋值给`$value`
现在全局搜索，哪些方法调用了该`filterValue`方法
`/thinkphp/library/think/Request.php`中存在`input`方法，其中调用`filterValue`方法
     public function input($data = [], $name = '', $default = null, $filter = '')
        {
            if (false === $name) {
                // 获取原始数据
                return $data;
            }
            $name = (string) $name;
            if ('' != $name) {
                // 解析name
                if (strpos($name, '/')) {
                    list($name, $type) = explode('/', $name);
                } else {
                    $type = 's';
                }
                // 按.拆分成多维数组进行判断
                foreach (explode('.', $name) as $val) {
                    if (isset($data[$val])) {
                        $data = $data[$val];
                    } else {
                        // 无输入数据，返回默认值
                        return $default;
                    }
                }
                if (is_object($data)) {
                    return $data;
                }
            }
            // 解析过滤器
            $filter = $this->getFilter($filter, $default);
            if (is_array($data)) {
                array_walk_recursive($data, [$this, 'filterValue'], $filter);
                reset($data);
            } else {
                $this->filterValue($data, $name, $filter);
            }
            if (isset($type) && $data !== $default) {
                // 强制类型转换
                $this->typeCast($data, $type);
            }
            return $data;
        }
发现无论`$data`是不是数组最终都会调用`filterValue`方法，而`$filter`则会进行过滤器解析，跟进`$this->getFilter`方法查看解析过程:
    protected function getFilter($filter, $default)
        {
            if (is_null($filter)) {
                $filter = [];
            } else {
                $filter = $filter ?: $this->filter;
                if (is_string($filter) && false === strpos($filter, '/')) {
                    $filter = explode(',', $filter);
                } else {
                    $filter = (array) $filter;
                }
            }
            $filter[] = $default;
            return $filter;
        }
可以看到如果`$filter`不存在时，将`$filter`赋值为`$this->filter`,最后将`$filter[]`赋值为`null`，注意此时并不是将`$filter[]`数组全部清空，只是使得`$filter[n+1]=null`，即在数组的最后一个键名新增一个连续的键名，键值为null
回到`input`方法中，`array_walk_recursive`函数会对第一个数组参数中的每个元素应用第二个参数的函数。在`input`类方法中，`$data`中键名作为`filterValue(&$value,
$key,
$filters)`中的value,键值作为key,filter作为第三个参数$filters,而当这些传入到`filterValue`后，`call_user_func`又是利用`filter`作为回调的函数，`value`作为回调函数的参数，因此也就是`input`方法中的`data`是回调函数的参数，`filter`是需要回调的函数。
了解之后我们需要查找`input`方法在何处被调用，全局搜索一下：
同文件`param`方法最后调用该方法并作为返回：
    public function param($name = '', $default = null, $filter = '')
        {
            if (empty($this->mergeParam)) {
                $method = $this->method(true);
                // 自动获取请求变量
                switch ($method) {
                    case 'POST':
                        $vars = $this->post(false);
                        break;
                    case 'PUT':
                    case 'DELETE':
                    case 'PATCH':
                        $vars = $this->put(false);
                        break;
                    default:
                        $vars = [];
                }
                // 当前请求参数和URL地址中的参数合并
                $this->param      = array_merge($this->param, $this->get(false), $vars, $this->route(false));
                $this->mergeParam = true;
            }
            if (true === $name) {
                // 获取包含文件上传信息的数组
                $file = $this->file();
                $data = is_array($file) ? array_merge($this->param, $file) : $this->param;
                return $this->input($data, '', $default, $filter);
            }
            return $this->input($this->param, $name, $default, $filter);
        }
`$this->param`为当前请求参数和URL地址中的参数合并，是可控值，也就是把请求参数和路由参数以及当前方法参数进行合并，此时我们有了回调函数的参数，还缺少`$filter`，因此我们还要设法控制`Request`类的`$this->filter`
分析到这里，我们在文章开头所说的对于`Request`的改进却并没有用上，此时不妨移步到`method()`方法，前文说到在更新版本后对`method`增加了白名单，我们不妨看看此方法。
    public function method($method = false)
        {
            if (true === $method) {
                // 获取原始请求类型
                return $this->server('REQUEST_METHOD') ?: 'GET';
            } elseif (!$this->method) {
                if (isset($_POST[Config::get('var_method')])) {
                    $this->method = strtoupper($_POST[Config::get('var_method')]);
                    $this->{$this->method}($_POST);
                } elseif (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
                    $this->method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);
                } else {
                    $this->method = $this->server('REQUEST_METHOD') ?: 'GET';
                }
            }
            return $this->method;
        }
可以看到，当`$method`是`false`时，`$this->method =
strtoupper($_POST[Config::get('var_method')])`，这是否是我们可控的参数，回到TP的系统配置文件上，
可以知道，`Config::get('var_method')=='_method'`，意味着POST上传`_method`的值，是可以在`Request`类中进行的方法，即可以任意调用该类中存在的任何方法。
此时`__construct()`这个神奇的构造方法起到了奇效。
     protected function __construct($options = [])
        {
            foreach ($options as $name => $item) {
                if (property_exists($this, $name)) {