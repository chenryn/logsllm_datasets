perror (”epoll_wait”);
free (events);
return 1;
}
for (i = 0; i 
void * mmap (void *addr, size_t len, int prot,
int flags, int fd, off_t offset);
addr 内映射文件的。提示
 0。调内存映射的。
prot 对内存的。 PROT NONE时
映射（以以的的或
PROT READ
页读。
PROT WRITE 页写。
PROT EXEC
页。
的存能文件的式。程以
读方式文件 prot 能设 PROT WRITE。
性
POSIX （读写
的子集。实对处理读。
处理能读。操作上 PROT READ 即
 PROT EXEC。 x86 的。
然的处理方式程。的程们
映射的时相的设 PROT EXEC。
出的原即映射
操作处理映射的。
 x86 处理 NX（no-execute读的
映射。新的上 PROT READ 同 PROT EXEC。
flag 映射的。以进或的
– 102 –
 4 
文件 I/O
MAP FIXED
 mmap()  addr 作性。内
映射文件调。的
内存映射的原内然
新内。进程的空间
以。
MAP PRIVATE 映射。文件映射写时进程对内存的何
真的文件或进程的映射。
MAP SHARED 映射文件的进程映射内存。对内存的写操
作效写文件。读映射进程的写操作的
。
MAP SHARED  MAP PRIVATE 能同时。更
的将 8 。
映射文件的时。映
射文件文件的进程然以文件。映射或进程
时对的文件 1。
的示以读方式映射 fd 的文件
 len 
void *p;
p = mmap (0, len, PROT_READ, MAP_SHARED, fd, 0);
if (p == MAP_FAILED)
perror (”mmap”);
 4-1 示 mmap() 的对文件进程空间映射的。
4.3.1.1 页大小
页内存同的小单。页内存映射的
同时进程空间的。
mmap() 调操作页。 addr  offset 页小对。
们页小的。
以映射的页。 len 能页对（能
映射的文件小页小的映射空页。出
的内存即效映射的 0 . 的读
– 103 –
 4 
文件 I/O
 4-1 映射文件进程空间
操作将 0。即 MAP SHARED 进写操作文
件。 len 写文件。
sysconf(): POSIX 的页小方 sysconf()将
的
#include 
long sysconf (int name);
调 sysconf()  name 的 name 效 -1。出时 errno 
设 EINVAL。 -1 对能效（ limits -1 示
。的调空 errno调。
POSIX  SC PAGESIZE（SC PAGE SIZE 同小页
的小。页小
long page_size = sysconf (_SC_PAGESIZE);
getpagesize():Linux 提 getpagesize() 页小
#include 
int getpagesize (void);
– 104 –
 4 
文件 I/O
调 getpagesize() 将页的小。 sysconf() 单
int page_size = getpagesize ( );
 unix  POSIX 1003.1-2001 
出性。
页小:页小  的 PAGE SIZE 。
页小的方
int page_size= PAGE_SIZE ;
同方方时页小时。
同页小同的页
小。进文件能给的上即
处。页小能性. 时
页的小。 addr  offset  0设。
的内能将出空间。我们提
 Unix 自程。
 sysconf() 的。
4.3.1.2 返回值和错误码
调 mmap() 映射的。时 MAP FAILED设
相的 errno。 mmap()  0。
能的 errno 
EACESS
给的文件文件或式 prot 或
flags 。
EAGAIN
文件文件。
EBADF
给文件效。
EINVAL
addr len off 的或效。
ENFILE
文件上。
ENODEV
文件的文件存映射。
ENOMEM
的内存。
EOVERFLOW addr + len 的超空间小。
EPERM
设 PROT EXEC文件以方式。
– 105 –
 4 
文件 I/O
4.3.1.3 相关信号
映射相的
SIGBUS
进程效的映射时。文
件映射。
SIGSEGV 进程写读的映射时。
4.3.2 munmap()
Linux 提 munmap()  mmap() 的映射。
#include 
int munmap (void *addr, size_t len);
munmap() 进程空间 addr  len 的内存的页
的映射。映射时的内存效将
 SIGSEGV 。
 munmap() 的上 mmap() 调的 len。
调 0 -1 errno 设相的。的 errno
 EINVAL或效。
作实段内存 [addr, addr + len] 间内页的映
射。
if (munmap (addr, len) == -1)
perror (”munmap”);
4.3.3 存储映射例子
我们子 mmap 将的文件出出
#include
#include
#include
#include
#include
#include
– 106 –
 4 
文件 I/O
int main (int argc, char *argv[])
{
struct stat sb;
off_t len;
char *p;
int fd;
if (argc \n”,
argv[0]);
return 1;
}
fd = open (argv[1], O_RDONLY);
if (fd == -1) {
perror (”open”);
return 1;
}
if (fstat (fd, &sb) == -1) {
perror (”fstat”);
return 1;
}
if (!S_ISREG (sb.st_mode)) {
fprintf (stderr, ”%s is not a file\n”,
argv[1]);
return 1;
}
p = mmap (0, sb.st_size, PROT_READ,
MAP_SHARED, fd, 0);
if (p == MAP_FAILED) {
perror (”mmap”);
return 1;
}
if (close (fd) == -1) {
– 107 –
 4 
文件 I/O
perror (”close”);
return 1;
}
for (len = 0; len 
#include 
void * mremap (void *addr, size_t old_size,
size_t new_size, unsigned long flags);
mremap() 将映射 [addr, addr + old size) 的小或 new size。
进程空间的小 flags内以同时映射。
[示。) 示
作间 (interval notation)。
flags 的以 0 或 MREMAP MAYMOVE 
调的小内以映射
。内以映射的小调操作
能。
– 109 –
 4 
文件 I/O
4.3.6.1 返回值和错误码
调    mremap()     新 映 射   的  。    
MAP FAILED设 errno 以
EAGAIN
内存能调小。
EFAULT
给内的页进程空间内的效页或新映
射给页时出。
EINVAL
效。
ENOMEM 给进扩展（MREMAP MAYMOVE 
设或进程空间内空空间。
glibc  mremap() 实效的 realloc()以调
malloc() 的内存。
void * realloc (void *addr, size_t len)
{
size_t old_size = look_up_mapping_size (addr);
void *p;
p = mremap (addr, old_size, len,
MREMAP_MAYMOVE);
if (p == MAP_FAILED)
return NULL;
return p;
}
段 malloc() 操作的映射时效即段
能作展示提性能的。子设程写
 look up mapping size() 。 GNU C library  mmap() 及相进
内存。我们将更的。
4.3.7 改变映射区域的权限
POSIX  mprotect()程内存的
#include 
– 110 –
 4 
文件 I/O
int mprotect (const void *addr, size_t len, int
prot);
调 mprotect()  [addr, addr + len) 内页的 addr 页对
的。 prot  mmap() 的 prot 同的 PROT NONE PROT READ
PROT WRITE PROT EXEC。的读 prot 设
 PROT WRITE调写。
上 mprotect() 能操作 mmap() 的。 Linux
 mprotect() 以操作的内存。
4.3.7.1 返回值和错误码
调 mprotect()  0。 -1设 errno 
EACCESS 内存能设 prot 的。将读的
文件的映射设写。
EINVAL
addr 效或页对。
ENOMEM 内空间满或内页进程
空间内的效。
4.3.8 使用映射机制同步文件
POSIX 提存映射 fsync() 的调
#include 
int msync (void *addr, size_t len, int flags);
调 msync() 以将 mmap() 的映射内存的何写
同步内存的映射映射的文件的的。文件或文件
子集内存的映射 addr 的 len 写。 addr 
页对的上 mmap() 调的。
调 msync()映射的映射写
。 write() 同 write() 的存
写。写内存映射时进程内页存的文件页
内。内同步页存。
flag 同步操作的。的以的进或操作
– 111 –
 4 
文件 I/O
MS ASYNC
同步操作异步。更新操作调 msync() 
即 write() 操作。
MS INVALIDATE 映射的将效。对文件
映射的操作将同步。
MS SYNC
同步操作同步进。 msync() 页写
。
MS ASYNC  MS SYNC 能。
单
if (msync (addr, len, MS_ASYNC) == -1)
perror (”msync”);
子异步的将文件的映射 [addr, addr+len) 同步。
4.3.8.1 返回值和错误码
调 msync()  0。调 -1设 errno 相。以
 errno 的效
EINVAL
flags 同时设 MS SYNC  MS ASYNC设以上
的或页对。
ENOMEM   的 内 存  （或        映 射。   POSIX
  Linux    同 步       映 射 的 内 存 时将  
ENOMEM能同步效的。
 2.4.29 的内 msync()  EFAULT ENOMEM。
4.3.9 映射提示
Linux 提 madvise() 调以进程何映射上给内
的提示。内自的更的映射。内
调自的即提示时能的性
能的提示以的存的
读。
调示内何对 addr len 的内存映射进
操作。
– 112 –
 4 
文件 I/O
#include 
int madvise (void *addr, size_t len, int advice);
 len  0内将对 addr 的映射提示。
advice 以
MADV NORMAL
对给的内存程提示方