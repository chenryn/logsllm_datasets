### 优化后的文本

#### 1. 错误处理与内存释放
```c
perror("epoll_wait");
free(events);
return 1;
```

#### 2. `mmap` 函数详解
`mmap` 是一个用于将文件或设备映射到进程地址空间的函数。其原型如下：
```c
void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);
```
- **参数说明:**
  - `addr`: 建议的映射起始地址。若设为 `NULL`，则由系统选择合适的地址。
  - `len`: 映射区域的长度。
  - `prot`: 指定映射区域的访问权限。常用选项包括：
    - `PROT_NONE`: 无访问权限。
    - `PROT_READ`: 可读。
    - `PROT_WRITE`: 可写。
    - `PROT_EXEC`: 可执行。
  - `flags`: 控制映射行为的标志。常用选项包括：
    - `MAP_FIXED`: 使用指定的 `addr` 作为映射起始地址。
    - `MAP_PRIVATE`: 创建私有映射，对映射区域的修改不会反映到文件中。
    - `MAP_SHARED`: 创建共享映射，对映射区域的修改会反映到文件中。
  - `fd`: 文件描述符。
  - `offset`: 文件中的偏移量，必须是页大小的整数倍。

- **返回值:**
  - 成功时返回映射区域的起始地址。
  - 失败时返回 `MAP_FAILED` 并设置 `errno`。

- **示例:**
  ```c
  void *p = mmap(0, len, PROT_READ, MAP_SHARED, fd, 0);
  if (p == MAP_FAILED) {
      perror("mmap");
      return 1;
  }
  ```

#### 3. 页大小
页大小是指操作系统管理内存的基本单位。可以通过以下方法获取页大小：
- **POSIX 方法:**
  ```c
  #include <unistd.h>
  long page_size = sysconf(_SC_PAGESIZE);
  ```
- **Linux 特有方法:**
  ```c
  #include <unistd.h>
  int page_size = getpagesize();
  ```

#### 4. 返回值和错误码
`mmap` 函数可能返回的错误码包括：
- `EACCESS`: 权限不足。
- `EAGAIN`: 文件已被锁定。
- `EBADF`: 无效的文件描述符。
- `EINVAL`: 参数无效。
- `ENFILE`: 打开文件过多。
- `ENODEV`: 文件类型不支持映射。
- `ENOMEM`: 内存不足。
- `EOVERFLOW`: 地址超出范围。
- `EPERM`: 文件以只读方式打开但请求可执行权限。

#### 5. 相关信号
- `SIGBUS`: 访问无效的映射区域。
- `SIGSEGV`: 写入只读映射区域或访问未映射的内存。

#### 6. `munmap` 函数
`munmap` 用于取消内存映射。
```c
#include <sys/mman.h>
int munmap(void *addr, size_t len);
```
- **参数说明:**
  - `addr`: 映射区域的起始地址。
  - `len`: 映射区域的长度。

- **返回值:**
  - 成功时返回 0。
  - 失败时返回 -1 并设置 `errno`。

- **示例:**
  ```c
  if (munmap(addr, len) == -1) {
      perror("munmap");
      return 1;
  }
  ```

#### 7. 存储映射示例
```c
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    struct stat sb;
    off_t len;
    char *p;
    int fd;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file>\n", argv[0]);
        return 1;
    }

    fd = open(argv[1], O_RDONLY);
    if (fd == -1) {
        perror("open");
        return 1;
    }

    if (fstat(fd, &sb) == -1) {
        perror("fstat");
        return 1;
    }

    if (!S_ISREG(sb.st_mode)) {
        fprintf(stderr, "%s is not a regular file\n", argv[1]);
        return 1;
    }

    p = mmap(0, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
    if (p == MAP_FAILED) {
        perror("mmap");
        return 1;
    }

    if (close(fd) == -1) {
        perror("close");
        return 1;
    }

    for (len = 0; len < sb.st_size; len++) {
        putchar(p[len]);
    }

    if (munmap(p, sb.st_size) == -1) {
        perror("munmap");
        return 1;
    }

    return 0;
}
```

#### 8. `mremap` 函数
`mremap` 用于重新映射已映射的内存区域。
```c
#include <sys/mman.h>
void *mremap(void *addr, size_t old_size, size_t new_size, unsigned long flags);
```
- **参数说明:**
  - `addr`: 当前映射区域的起始地址。
  - `old_size`: 当前映射区域的大小。
  - `new_size`: 新映射区域的大小。
  - `flags`: 控制重新映射行为的标志。常用选项包括：
    - `MREMAP_MAYMOVE`: 允许重新映射到新的地址。

- **返回值:**
  - 成功时返回新的映射区域的起始地址。
  - 失败时返回 `MAP_FAILED` 并设置 `errno`。

- **示例:**
  ```c
  void *p = mremap(addr, old_size, new_size, MREMAP_MAYMOVE);
  if (p == MAP_FAILED) {
      perror("mremap");
      return 1;
  }
  ```

#### 9. 改变映射区域的权限
`mprotect` 用于改变已映射区域的访问权限。
```c
#include <sys/mman.h>
int mprotect(const void *addr, size_t len, int prot);
```
- **参数说明:**
  - `addr`: 映射区域的起始地址。
  - `len`: 映射区域的长度。
  - `prot`: 新的访问权限。

- **返回值:**
  - 成功时返回 0。
  - 失败时返回 -1 并设置 `errno`。

- **示例:**
  ```c
  if (mprotect(addr, len, PROT_READ | PROT_WRITE) == -1) {
      perror("mprotect");
      return 1;
  }
  ```

#### 10. 同步映射区域
`msync` 用于将映射区域的内容同步到文件。
```c
#include <sys/mman.h>
int msync(void *addr, size_t len, int flags);
```
- **参数说明:**
  - `addr`: 映射区域的起始地址。
  - `len`: 映射区域的长度。
  - `flags`: 控制同步行为的标志。常用选项包括：
    - `MS_ASYNC`: 异步同步。
    - `MS_SYNC`: 同步同步。
    - `MS_INVALIDATE`: 使映射区域无效。

- **返回值:**
  - 成功时返回 0。
  - 失败时返回 -1 并设置 `errno`。

- **示例:**
  ```c
  if (msync(addr, len, MS_SYNC) == -1) {
      perror("msync");
      return 1;
  }
  ```

#### 11. 映射提示
`madvise` 用于向内核提供关于如何使用映射区域的建议。
```c
#include <sys/mman.h>
int madvise(void *addr, size_t len, int advice);
```
- **参数说明:**
  - `addr`: 映射区域的起始地址。
  - `len`: 映射区域的长度。
  - `advice`: 提供的建议。常用选项包括：
    - `MADV_NORMAL`: 正常操作。
    - `MADV_RANDOM`: 随机访问。
    - `MADV_SEQUENTIAL`: 顺序访问。
    - `MADV_WILLNEED`: 即将需要访问。
    - `MADV_DONTNEED`: 不再需要访问。

- **返回值:**
  - 成功时返回 0。
  - 失败时返回 -1 并设置 `errno`。

- **示例:**
  ```c
  if (madvise(addr, len, MADV_SEQUENTIAL) == -1) {
      perror("madvise");
      return 1;
  }
  ```

通过以上内容，您可以更好地理解和使用 `mmap` 及相关函数进行内存映射操作。