West
Alice Smith
Bob
Asia
18
Bob Jones
Charles
East
15
Charles Adams
主备份似乎和我们的原则一一只应该同步执行代价低的操作不符。
如果Alice去纽约旅行，并在那里更新她的状态，由于她的个人信息
记录的主备份在美国西海岸，她必须等待系统把她的更新操作提交
到美国西海岸；这种高延迟的跨州更新操作正是我们应该尽量避免
的。由于用户转变使用模式（如Alice的旅行），这种跨数据中心的
写操作确实会偶尔发生，但几率很小。我们分析了对雅虎的用户数
据库的更新操作，发现记录更新在包含主备份的数据中心上执行的
概率占85%。当然，Alice可能迁移到美国东海岸或者欧洲，由于其
记录的主备份仍然在美国西海岸，她执行的写操作就不再是在本地
执行的。我们的系统会追踪一条记录更新的源起，为了保证绝大部
分的写操作还是在本地执行，系统会根据长期性访问模式（acess
pattern)的转变来修改主备份性。（我们将在下一章更详细地讨论主
备份性。）
当应用读取一条记录，它通常会读取该记录的本地副本。除非该副
本标记为主备份，否则其数据可能已经过期了。该应用可以从时间
1388
---
## Page 1390
轴识别其记录实例是和某个版本的记录一致，但是它无法从记录本
身识别该记录是否为最新版本。如果该应用要求记录必须是最新版
本，系统允许它发送最新读(u-to-dateread)请求操作，该请求会被提
交到主备份来获取记录的最新备份。执行最新读操作代价很高，而
通常情况下读本地副本（可能数据已经过期）的代价很低，这和系
统的设计原则也是一致的。幸运的是，Web应用通常对数据时效性
要求较低，能够接受过期数据。如果Alice更新了她的状态，但她的
好友Bob没有马上看到，而是过后不久看到其新状态，也是可以接
受的。
应用可以执行的另一类读操作是“临界读"（citicalread)，可以保证从
用户的角度来讲，数据只随时间向前移动。假设有这样的情况，
Alice改变了她的头像（表示一个用户的图片），Bob可能会看Alice
的信息页面（导致对数据库的一次读操作），并看到了Alice的新头
像。然后，Bob可能会刷新该页面，但由于网络问题，该刷新操作
被重定向到没有执行Alice头像更新的副本上执行。结果是Bob将看
到的数据比他刚看到的版本更老。为了避免应用程序执行这些操作
引起的这种不正常现象，数据库为读操作调用返回记录时会附上该
记录的一个版本号。该版本号可以保存在Bob的会话状态（sssion
state)或者其浏览器cookie中。当Bob刷新Alice的信息页面时，他上
次读到的版本号将和本次请求一同发送，数据库会保证返回记录的
版本不会老于该版本。这可能需要把版本号和请求提交给主备份。
指定版本号的读操作被称为"临界读”，任何版本号等于指定版本号
或者更新的副本，其返回的结果数据都是可以接受的。对于先更新
再读取数据库的用户，该技巧尤其有用。以Alice自已为例，当她更
新完头像后，如果有任何页面还显示其旧头像，她一定会感到很困
惑。因此，当她执行了某个动作需要更新数据库（如更新头像）
时，应用程序可以使用“临界读”机制来保证页面都不会显示她的旧
数据。
我们也支持"测试并设置”（tst-and-set操作，该操作使得写操作必须
依赖于当前读操作的版本和之前看到的版本（其版本号作为参数传
递给“测试并设置"请求）相同。从传统的数据库系统考虑，这是
ACID事务的一个特例，它限于单记录，使用的是乐观并发控制策略
(otimistic concurrency control)。
主备份性的其他方面
1389
---
## Page 1391
我们采用了各种技术来保证即使在工作负荷变化、失效情况下，都
能够低延迟地、平滑地执行读写操作。
举个例子，正如我们之前所述，该系统实现的是记录级(rcord-level)
的主备份性。如果一条记录的很多写操作来源于某个数据中心而不
是当前的主备份，该记录的主备份性将被及时地转移到该数据中
心，且随后的写操作将在该数据中心本地执行。此外，转移主备份
性代价很低且系统可以自动执行，因而系统可以快速地适应工作负
荷的变化。
系统还实现了即使在存储单元失效的情况下，还能够不间断地执行
读写操作的机制。当某个存储单元失效，会（手工或自动）执行对
该存储单元的覆盖操作(oeride)，并指示另一个数据中心取代失效
的存储单元，（为以该存储单元作为主备份的记录）执行写操作。
系统会采取措施（细节不在这里赘述），确保根据在失效的存储单
元已执行的更新操作执行顺序覆盖操作。这样，当其他的数据中心
开始取代失效的存储单元执行更新操作时，还能够保证时间轴一致
性。
在PNUTS中，所有读写请求会通过路由层来定位到一条记录相应的
数据备份（可能是主备份）。该间接层（lvelofindirection)是提供不
间断的系统可用性(uinterruptedsystem availability)的关键。即使当一
个存储单元失效而其数据恢复到另一个存储单元，或者根据使用模
式的变化转移记录的主备份，这些变化对于上层应用也是透明的，
应用依然可以连接到路由器，享受不间断的系统可用性，其请求可
以无缝地路由到适当的数据中心。
支持有序数据
PNUTS系统架构上同时支持散列分区和范围分区的数据。我们称散
列版的数据库为YDHT，即雅虎分布式散列表（Yhoo!DistributedHash
Table)：称有序表版的数据库为YDOT，即雅虎分布式有序表
(Yhoo!DistributedOrderedTable)。绝大多数系统不关心数据的组织
方式。但是，有个重要的方面对物理数据的组织方式是敏感的。尤
其是采用散列表方式组织的数据，往往可以把负载很均衡地分散到
不同的服务器。如果数据是有序的，部分更赖紧访问的关键字空间
(kyspace)将会出现“热点"(htpot)效应。比如，如果状态更新是通过
时间排序，那么最近的更新是用户最感兴趣的，则包含在该段时间
1390
---
## Page 1392
范围末的数据分区的服务器负荷会最重。在不影响系统向外扩展
下，我们不允许“热点”效应持续。
逻辑有序的数据实际上是存储在物理相连的记录分区上，但是当分
区无序组织时，这些数据就可能存储在多台物理服务器上。我们可
以根据负载，动态移动分区来解决“热点”效应问题。如果一台服务
器上有多个热分区(htpartition)，可以把这些分区移到负荷较低的服
务器上。此外，我们还可以动态划分分区，这样某个热分区上的负
载可以分散到几台服务器上。这种在存储单元间移动和划分分区
的策略和先前提到的改变一条记录的主备份性机制是不同的：对于
前者，改变记录的主备份会导致在一台服务器发起的更新延迟，但
通常不影响给定记录分区记录的累积读写操作负荷。需要划分和移
动分区的一个特例是当我们想要更新或插入大量的记录。在这种情
况下，如果不采取特殊措施，就会发生只向几台服务器发送大批量
更新操作，从而导致服务器负载不均衡。因此，需要理解更新操作
是如何分布在关键字空间(kyspace)，必要的时候，可以为后期的一
连串更新操作预先划分和移动分区（SIberstein等2008）。
我们把应用和物理数据组织细节相分离。对于单记录的读写操作，
使用路由层可以使应用免于受分区移动和划分的影响。对于范围扫
描，我们需要提供进一步抽象：假设我们需要扫描年龄在21～30岁
的所有注册用户，执行该查询可能意味着在一台服务器上需要扫描
包含几千条记录的数据分区，在另一台服务器上扫描另一个分区
等。每个分区有几千条记录，由于它们在磁盘上是顺序存储的，因
此可以快速扫描。我们希望这些分区的移动和划分对于应用是透明
的。解决该问题的一个巧妙方式是借鉴选代器（ierator）的思想：当应
用执行扫描时，我们返回一组记录，然后准备好下一组记录，触发
应用继续扫描。因此，当应用执行完一次批处理，开始请求更多的
数据时，可以把这些请求转换到包含下一组记录分区的新存储服务
器上执行。
牺牲一致性，换取可用性
时间轴一致性处理一般问题效率高，且语义简洁，但它也并不完
美。有时，整个数据中心崩溃（如断电）或者不可用（如断网），
那么以该数据中心作为主备份的记录将不可写。这种情况暴露了已
有的在一致性、可用性和分区容忍性(prtitiontolerance)上的平衡问
题(tade-of)：在所有情况下，这三者属性只能保证其中的两个。由
于数据库是全球性的，分区必然存在且不会造成大的影响，因此实
1391
---
## Page 1393
际上我们只需要处理一致性和可用性间的平衡。如果一个数据中心
断网了，可能有些新的更新操作还没有传播到其他的数据副本，我
们可以通过两种方式保证一致性：一是为了保持一致性，在该数据
中心可用前，不允许执行数据更新；二是为了保持可用性，要违背
时间轴一致性原则，允许一些更新操作应用到非主备份的记录。
系统为应用提供了基于表级粒度（pr-tablebasis)来选择相应策略。如
果对于某个特定的表，可用性对于该应用的优先级比一致性高，那
么当一个数据中心断网时，系统会临时转换该表中任何不可用记录
的主备份性到其他的数据中心。该决策牺牲时间轴一致性，有效地
支持了可用性，如图4-2中的例子所示。当恢复完一个不可用的数据
中心，系统会自动协调任何有冲突的更新记录，并通知应用这些冲
突信息。该协调保证了即使不能满足时间轴一致性，数据库在任何
数据备份上都能收敛到相同的值。另一方面，对于应用而言，如果
一致性优先级比可用性高，则会保持时间轴一致性而不会传递主备
份性，这样，一些写操作执行会失败。
对于某些操作，一致性和可用性间的平衡较易于把握。例如，假设
有个关于投票的应用，用户可以对各种问题进行投票（如“你最喜
欢的颜色是什么？”），投票结果作为计数存储在数据库上。计数
操作（如增加）是可交换的（cmmuitative)，因此，在不破坏时间轴一
致性的情况下，甚至可以应用于非主备份副本上。一般来说，复制
机制可以在不同副本间传递记录的新版本，但是对于可交换操作，
我们实际上是传递操作（如增加）而不是结果值。那么，主备份在
任何时间接收到操作（不论是在正常的数据操作期间还是在某个数
据中心失效后），它都可以执行该操作，而不需要担心操作是否乱
序。该策略的一个局限是可交换和非可交换的操作不可以混合：因
行排序，所以当记录插入后，禁止在任何时刻对其计数器设值。
状态：offthephone
O→美国西海岸副本
状态：none
状态：busy
o
O→美国东海岸副本
状态：asleep状态：good
morning
1392
---
## Page 1394
图4-2：西部数据中心断网，更新时间轴产生交叉(frks)
PNUTS的另一个扩展是允许对多条记录执行更新操作。我们主要研
究基于记录级的时间轴一致性的原因是很多Web应用负载涉及在某
一时刻对单条记录的更新操作。但是，有时更新多条记录更合适。
例如，在社会网络应用中，可能存在双向好友链接：如果Alice和
Bob是好友，那么Alice会出现在Bob的好友列表，同样，Bob也会出
现在Alice的好友列表。因此，当Alice和Bob成为好友时，我们需要
更新两条记录。因为系统不提供ACID事务，所以无法保证该更新是
原子性的。但是，我们可以采取绑定式写操作(bndledwrites)：当对
数据库执行一次调用时，应用可以请求两个写操作，数据库会保证
两个写操作最终都会执行。为了实现这点，系统对请求的写操作写
日志，如果初始执行失败，系统会重试这两个写操作，直到它们都