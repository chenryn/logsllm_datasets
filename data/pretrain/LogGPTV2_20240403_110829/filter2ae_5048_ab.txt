    下面的请求都会返回错误:
### script-src
script-src指令限制了所有js脚本可以被执行的地方，不仅仅是包括通过链接方式加载的脚本url，同样包括所有内联脚本，甚至包括各种方式的引用。
还有个很重要的参数叫’unsafe-inline’  
,如果加上这个参数，就不会阻止内联脚本，但这被认为是不安全的。
对于这个属性有个特殊的配置叫unsafe-eval，他会允许下面几个函数
    eval()
    Function()
    setTimeout() with an initial argument which is not callable.
    setInterval() with an initial argument which is not callable.
### style-src
style-src指令限制了所有可能被引用的css，包括下面三种引用的css属性，style也有个‘unsafe-inline’这个参数，同理会允许所有的内联css。
1、第一种是通过link标签加载的css,类似于``
2、当然还有style标签
3、还有通过@import引入的样式表
4、内联样式表，类似于`style=&quot;font-size:10px;font-color:#ff0000&quot;`
### 总的来说
CSP的检测方式是通过先判断特定的请求类型，然后通过下面的方式返回有效指令的名称，总的来说根据request类型的不同，会执行下面不同的步骤：
要读懂下面的算法，首先我们要知道什么是请求的发起者和
initiator：每个请求都有一个发起者，包括 “download”, “imageset”, “manifest”, or “xslt”.
destination:每个请求都有一个对应的目的地，包括 “document”, “embed”, “font”, “image”,
“manifest”, “media”, “object”, “report”, “script”, “serviceworker”,
“sharedworker”, “style”, “worker”, or “xslt”.
**“”**
1、If the request’s initiator is “fetch”, return connect-src.
2、If the request’s initiator is “manifest”, return manifest-src.
3、If the request’s destination is “subresource”, return connect-src.
4、If the request’s destination is “unknown”, return object-src.
5、If the request’s destination is “document” and the request’s target browsing
context is a nested browsing context, return child-src.
**“audio”**
**“track”**
**“video”**
Return media-src.
**“font”**
Return font-src.
**“image”**
Return image-src.
**“style”**
Return style-src.
**“script”**
1、Switch on request’s destination, and execute the associated steps:
    **"subresource"**
           Return script-src.
    **"serviceworker"**
    **"sharedworker"**
    **"worker"**
       Return child-src.
2、Return null.
基本上来说根据上面的文档，csp的意思已经能够理解了，那么怎么bypass csp呢
# 一个编写CSP的网站
# Bypass CSP
基本上来说，CSP上容易存在的xss漏洞不多，除非你坚持使用‘unsafe-inline’，(多数情况来说，csp仍没有得到普及的原因就是因为大量的禁用内联脚本和eval这样的函数，导致如果配置不当，甚至网站都无法正常使用)否则来说，xss会被大幅度的减少，而bypass
CSP更多来说是不容易被csp杀掉的csrf。
## xxxx-src *
上面的那个*符号出现，表示，允许除了内联函数以外所有的url式的请求，那么bypass的方式比较简单，类似于src引用的方式，很容易造成csrf漏洞。
当然，如果熟悉了解CSP，一般来说不容易出现这样的情况，大部分来说会出现这种情况大多是下面这种情况。
### 范例
首先通过响应头信息看看CSP的构成，很容易发现问题
    Content-Security-Policy    
    default-src 'none'; connect-src 'self'; frame-src *; script-src http://xxxxx/js/ 'sha256-T32nlLrKkuMnyNpkJKR7kozfPzdcJi
    +Ql4gfcfl6PSM=';font-src http://xxxx/fonts/ fonts.gstatic.com; style-src 'self' 'unsafe-inline'
    ; img-src 'self'
很容易发现问题`frame-src *`（当然为了支持W3C CSP标准，这里应该是child-src，测试环境就不乱改了）,对于iframe的来源并没有做任何限制，当然实际环境可能需要iframe标签来内联来包含别的页面…
由于iframe的内联不同源，不无法通过任何方式get
cookie，不存在xss漏洞（这也是大多开发者容易造成的想法），但是我们可以利用这种方式构造CSRF漏洞…
payload:(暂时拿www.baidu.com测试)
[
## script-src unsafe-inline
在实际开发环境中，我们往往能够遇到这样的情况发生，明明开启了CSP，但是却对xss防护并没有任何帮助，就是上面这种情况的发生。
在真实的网站中，开发人员众多，在调试各个js文件的时候，往往会出现各种问题，为了尽快的修复bug，不得已加入大量的内联脚本，导致没办法简单的指定源来构造CSP，那么就会开启这个选项，殊不知，这样一来问题变得更严重了。
### 范例
首先我们看一下CSP设置
    Content-Security-Policy    
    default-src 'none'; connect-src 'self'; frame-src *; script-src http://xxx/js/ 'unsafe-inline';font-src http://xxx/fonts/ fonts.gstatic.com; style-src 'self' 'unsafe-inline'; img-src
     'self'
重点是这一项
    script-src http://xxx/js/ 'unsafe-inline';
我们先尝试构造payload
[
可以明显的看到被拦了
[
但是我们尝试构造内联脚本
[
能看到成功执行  
[
值得庆幸的是由于同源策略，这个请求不能发往别的域下，但是实战环境中利用方式很多，就比如这个聊天版，可以通过发给别的用户的方式get cookie
    ;
所以，安全性仍然应该被更多仔细考虑…
## xxxx-src self
一般来说，self代表只接受符合同源策略的url，这样一来，大部分的xss和crsf都会失效，有个标签比较例外，虽然已经被加入的现在的csp草案中，但是的确还没有施行。
经过测试发现firefox在CSP规范的施行上还是走在前列，这种请求在firefox上会被拦截（除非同源），在公认安全性比较高的chrome确实存在
### 范例
当然首先我们先看看CSP的配置
    Content-Security-Policy    
    default-src 'none'; connect-src 'self'; frame-src 'self'; script-src http://xxxx/js 'sha256-T32nlLrKkuMnyNpkJKR7kozfPzdcJi
    +Ql4gfcfl6PSM=';font-src http://xxxx/fonts/ fonts.gstatic.com; style-src 'self' 'unsafe-inline'
    ; img-src 'self'
几乎可以说是滴水不漏了
[
然后我们刷新看,请求已经发出去了
[
当然是对外域的请求，如果站内有某种漏洞，可以通过这个构造csrf。
测试环境下admin存在特殊的权限，可以添加管理员
    -->
如果构造
发给admin，就可以在不知情的情况下添加一个管理员
## CSP滴水不漏 但存在内网文件上传点
不知道有多少人了解过cctf2016，其中有一道web题目IDS-Chicken
题目环境就符合我说的情况，CSP滴水不漏，几乎没办法用任何方式构造xss，但是内网存在上传点，上传文件会被重写为文件，link包含形成xss漏洞。
有兴趣继续了解的可以读博客的wp