https://developer.android.com/training/permissions/requesting#java
https://developer.android.com/guide/topics/permissions/overview#permission-groups
https://developer.android.com/guide/topics/manifest/provider-element#gprmsn
https://developer.android.com/reference/android/content/Context#revokeUriPermission(android.net.Uri,%20int)
https://developer.android.com/reference/android/content/Context#checkUriPermission(android.net.Uri,%20int,%2
0int,%20int)
https://developer.android.com/guide/components/broadcasts#restricting_broadcasts_with_permissions
https://developer.android.com/guide/topics/permissions/overview
https://developer.android.com/guide/topics/manifest/manifest-intro#filestruct
Android Bundles and Instant Apps
https://developer.android.com/topic/google-play-instant/getting-started/instant-enabled-app-bundle
https://developer.android.com/topic/google-play-instant/guides/multiple-entry-points
https://developer.android.com/studio/projects/dynamic-delivery
Android permissions changes in Android 8
https://developer.android.com/about/versions/oreo/android-8.0-changes
OWASP Mobile Top 10 2016
M7 - Poor Code Quality - https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality
OWASP MASVS
MSTG-PLATFORM-1: "The app only requests the minimum set of permissions necessary."
MSTG-PLATFORM-2: "All inputs from external sources and the user are validated and if necessary sanitized.
This includes data received via the UI, IPC mechanisms such as intents, custom URLs, and network sources."
MSTG-PLATFORM-3: "The app does not export sensitive functionality via custom URL schemes, unless these
mechanisms are properly protected."
MSTG-PLATFORM-4: "The app does not export sensitive functionality through IPC facilities, unless these
mechanisms are properly protected."
MSTG-PLATFORM-5: "JavaScript is disabled in WebViews unless explicitly required."
238
Android Platform APIs
MSTG-PLATFORM-6: "WebViews are configured to allow only the minimum set of protocol handlers required
(ideally, only https is supported). Potentially dangerous handlers, such as file, tel and app-id, are disabled."
MSTG-PLATFORM-7: "If native methods of the app are exposed to a WebView, verify that the WebView only
renders JavaScript contained within the app package."
MSTG-PLATFORM-8: "Object serialization, if any, is implemented using safe serialization APIs."
MSTG-ARCH-9: "A mechanism for enforcing updates of the mobile app exists."
CWE
CWE-79 - Improper Neutralization of Input During Web Page Generation
CWE-200 - Information Leak / Disclosure
CWE-749 - Exposed Dangerous Method or Function
CWE-939 - Improper Authorization in Handler for Custom URL Scheme
Tools
Drozer - https://github.com/mwrlabs/drozer
239
Code Quality and Build Settings for Android Apps
Code Quality and Build Settings of Android Apps
Making Sure That the App is Properly Signed (MSTG-CODE-1)
Overview
Android requires all APKs to be digitally signed with a certificate before they are installed or run. The digital signature
is used to verify the owner's identity for application updates. This process can prevent an app from being tampered
with or modified to include malicious code.
When an APK is signed, a public-key certificate is attached to it. This certificate uniquely associates the APK with the
developer and the developer's private key. When an app is being built in debug mode, the Android SDK signs the app
with a debug key created specifically for debugging purposes. An app signed with a debug key is not meant to be
distributed and won't be accepted in most app stores, including the Google Play Store.
The final release build of an app must be signed with a valid release key. In Android Studio, the app can be signed
manually or via creation of a signing configuration that's assigned to the release build type.
Prior Android Pie all app updates on Android need to be signed with the same certificate, so a validity period of 25
years or more is recommended. Apps published on Google Play must be signed with a key that that has a validity
period ending after October 22th, 2033.
Three APK signing schemes are available:
JAR signing (v1 scheme),
APK Signature Scheme v2 (v2 scheme),
APK Signature Scheme v3 (v3 scheme).
The v2 signature, which is supported by Android 7.0 and above, offers improved security and performance compared
to v1 scheme. The V3 signature, which is supported by Android 9.0 and above, gives apps the ability to change their
signing keys as part of an APK update. This functionality assures compatibility and apps continuous availability by
allowing both the new and the old keys to be used.
For each signing scheme the release builds should always be signed via all its previous schemes as well.
Static Analysis
Make sure that the release build has been signed via both the v1 and v2 schemes for Android 7 and above and via all
the three schemes for android 9 and above, and that the code-signing certificate in the APK belongs to the developer.
APK signatures can be verified with the apksigner tool. It is located at [SDK-Path]/build-tools/[version] .
$ apksigner verify --verbose Desktop/example.apk
Verifies
Verified using v1 scheme (JAR signing): true
Verified using v2 scheme (APK Signature Scheme v2): true
Verified using v3 scheme (APK Signature Scheme v3): true
Number of signers: 1
The contents of the signing certificate can be examined with jarsigner . Note that the Common Name (CN) attribute
is set to "Android Debug" in the debug certificate.
The output for an APK signed with a debug certificate is shown below:
240
Code Quality and Build Settings for Android Apps
$ jarsigner -verify -verbose -certs example.apk
sm 11116 Fri Nov 11 12:07:48 ICT 2016 AndroidManifest.xml
X.509, CN=Android Debug, O=Android, C=US
[certificate is valid from 3/24/16 9:18 AM to 8/10/43 9:18 AM]
[CertPath not validated: Path doesn\'t chain with any of the trust anchors]
(...)
Ignore the "CertPath not validated" error. This error occurs with Java SDK 7 and above. Instead of jarsigner , you
can rely on the apksigner to verify the certificate chain.
The signing configuration can be managed through Android Studio or the signingConfig block in build.gradle . To
activate both the v1 and v2 and v3 schemes, the following values must be set:
v1SigningEnabled true
v2SigningEnabled true
v3SigningEnabled true
Several best practices for configuring the app for release are available in the official Android developer
documentation.
Dynamic Analysis
Static analysis should be used to verify the APK signature.
Testing Whether the App is Debuggable (MSTG-CODE-2)
Overview
The android:debuggable attribute in the Application element that is defined in the Android manifest determines
whether the app can be debugged or not.
Static Analysis
Check AndroidManifest.xml to determine whether the android:debuggable attribute has been set and to find the
attribute's value:
...
...
For a release build, this attribute should always be set to "false" (the default value).
Dynamic Analysis
Drozer can be used to determine whether an application is debuggable. The Drozer module
app.package.attacksurface also displays information about IPC components exported by the application.
dz> run app.package.attacksurface com.mwr.dz
Attack Surface:
1 activities exported
1 broadcast receivers exported
0 content providers exported
0 services exported
241
Code Quality and Build Settings for Android Apps
is debuggable
To scan for all debuggable applications on a device, use the app.package.debuggable module:
dz> run app.package.debuggable
Package: com.mwr.dz
UID: 10083
Permissions:
- android.permission.INTERNET
Package: com.vulnerable.app
UID: 10084
Permissions:
- android.permission.INTERNET
If an application is debuggable, executing application commands is trivial. In the adb shell, execute run-as by
appending the package name and application command to the binary name:
$ run-as com.vulnerable.app id
uid=10084(u0_a84) gid=10084(u0_a84) groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(s
dcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_app:s0:c512,c768
Android Studio can also be used to debug an application and verify debugging activation for an app.
Another method for determining whether an application is debuggable is attaching jdb to the running process. If this
is successful, debugging will be activated.
The following procedure can be used to start a debug session with jdb :
1. Using adb and jdwp , identify the PID of the active application that you want to debug:
$ adb jdwp
2355
16346  help
A few notes about debugging:
The tool JADX can be used to identify interesting locations for breakpoint insertion.
Help with jdb is available here.
If a "the connection to the debugger has been closed" error occurs while jdb is being binded to the local
communication channel port, kill all adb sessions and start a single new session.
Testing for Debugging Symbols (MSTG-CODE-3)
242
Code Quality and Build Settings for Android Apps
Overview
Generally, you should provide compiled code with as little explanation as possible. Some metadata, such as
debugging information, line numbers, and descriptive function or method names, make the binary or byte-code easier
for the reverse engineer to understand, but these aren't needed in a release build and can therefore be safely omitted
without impacting the app's functionality.
To inspect native binaries, use a standard tool like nm or objdump to examine the symbol table. A release build
should generally not contain any debugging symbols. If the goal is to obfuscate the library, removing unnecessary
dynamic symbols is also recommended.
Static Analysis
Symbols are usually stripped during the build process, so you need the compiled byte-code and libraries to make sure
that unnecessary metadata has been discarded.
First, find the nm binary in your Android NDK and export it (or create an alias).
export $NM = $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-android
eabi-nm
To display debug symbols:
$ $NM -a libfoo.so
/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no sy
mbols
To display dynamic symbols:
$ $NM -D libfoo.so
Alternatively, open the file in your favorite disassembler and check the symbol tables manually.
Dynamic symbols can be stripped via the visibility compiler flag. Adding this flag causes gcc to discard the
function names while preserving the names of functions declared as JNIEXPORT .
Make sure that the following has been added to build.gradle:
externalNativeBuild {
cmake {
cppFlags "-fvisibility=hidden"
}
}
Dynamic Analysis
Static analysis should be used to verify debugging symbols.
Testing for Debugging Code and Verbose Error Logging (MSTG-CODE-4)
Overview
StrictMode is a developer tool for detecting violations, e.g. accidental disk or network access on the application's main
thread. It can also be used to check for good coding practices, such as implementing performant code.
243
Code Quality and Build Settings for Android Apps
Here is an example of StrictMode with policies enabled for disk and network access to the main thread:
public void onCreate() {
if (DEVELOPER_MODE) {
StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
.detectDiskReads()
.detectDiskWrites()
.detectNetwork() // or .detectAll() for all detectable problems
.penaltyLog()
.build());
StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
.detectLeakedSqlLiteObjects()
.detectLeakedClosableObjects()
.penaltyLog()
.penaltyDeath()
.build());
}
super.onCreate();
}
Inserting the policy in the if statement with the DEVELOPER_MODE condition is recommended. To disable StrictMode ,
DEVELOPER_MODE must be disabled for the release build.
Static Analysis
To determine whether StrictMode is enabled, you can look for the StrictMode.setThreadPolicy or
StrictMode.setVmPolicy methods. Most likely, they will be in the onCreate method.
The detection methods for the thread policy are
detectDiskWrites()
detectDiskReads()
detectNetwork()
The penalties for thread policy violation are
penaltyLog() // Logs a message to LogCat
penaltyDeath() // Crashes application, runs at the end of all enabled penalties
penaltyDialog() // Shows a dialog
Have a look at the best practices for using StrictMode.
Dynamic Analysis
There are several ways of detecting StrictMode ; the best choice depends on how the policies' roles are
implemented. They include
Logcat,
a warning dialog,
application crash.
Checking for Weaknesses in Third Party Libraries (MSTG-CODE-5)
Overview
Android apps often make use of third party libraries. These third party libraries accelerate development as the
developer has to write less code in order to solve a problem. There are two categories of libraries:
244
Code Quality and Build Settings for Android Apps
Libraries that are not (or should not) be packed within the actual production application, such as Mockito used
for testing and libraries like JavaAssist used to compile certain other libraries.
Libraries that are packed within the actual production application, such as Okhttp3 .
These libraries can have the following two classes of unwanted side-effects:
A library can contain a vulnerability, which will make the application vulnerable. A good example are the versions
of OKHTTP prior to 2.7.5 in which TLS chain pollution was possible to bypass SSL pinning.
A library can use a license, such as LGPL2.1, which requires the application author to provide access to the
source code for those who use the application and request insight in its sources. In fact the application should
then be allowed to be redistributed with modifications to its sourcecode. This can endanger the intellectual
property (IP) of the application.
Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the
webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova,
React-native and Xamarin apps.
Static Analysis
Detecting vulnerabilities of third party libraries
Detecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This
is best done by using a gradle plugin, such as dependency-check-gradle . In order to use the plugin, the following steps
need to be applied: Install the plugin from the Maven central repository by adding the following script to your
build.gradle:
buildscript {
repositories {
mavenCentral()
}
dependencies {
classpath 'org.owasp:dependency-check-gradle:3.2.0'
}
}
apply plugin: 'org.owasp.dependencycheck'
Once gradle has invoked the plugin, you can create a report by running:
$ gradle assemble
$ gradle dependencyCheckAnalyze --info
The report will be in build/reports unless otherwise configured. Use the report in order to analyze the vulnerabilities
found. See remediation on what to do given the vulnerabilities found with the libraries.
Please be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues
arise with the plugin.
Alternatively there are commercial tools which might have a better coverage of the dependencies found for the
libraries being used, such as SourceClear or Blackduck. The actual result of using either the OWASP Dependency
Checker or another tool varies on the type of (NDK related or SDK related) libraries.
Lastly, please note that for hybrid applications, one will have to check the JavaScript dependencies with RetireJS.
Similarly for Xamarin, one will have to check the C# dependencies.
When a library is found to contain vulnerabilities, then the following reasoning applies:
Is the library packaged with the application? Then check whether the library has a version in which the