异步社区会员 dearfuture(15918834820) 专享 尊重版权
148 
逆向工程权威指南（上册） 
  .byte   (.L2 - .Lrtx4) / 4  ;case 14 
  .byte   (.L2 - .Lrtx4) / 4  ;case 15 
  .byte   (.L2 - .Lrtx4) / 4  ;case 16 
  .byte   (.L2 - .Lrtx4) / 4  ;case 17 
  .byte   (.L2 - .Lrtx4) / 4  ;case 18 
  .byte   (.L2 - .Lrtx4) / 4  ;case 19 
  .byte   (.L6 - .Lrtx4) / 4  ;case 20 
  .byte   (.L6 - .Lrtx4) / 4  ;case 21 
  .byte   (.L7 - .Lrtx4) / 4  ;case 22 
  .text 
; everything after ".text" statement is allocated in the code (text) segment: 
.L7: 
; print "22" 
  adrp     x0, .LC3 
  add      x0, x0, :lo12:.LC3 
  b        puts 
.L6: 
; print "8, 9, 21" 
  adrp     x0, .LC2 
  add      x0, x0, :lo12:.LC2 
  b        puts 
.L5: 
; print "3, 4, 5" 
  adrp     x0, .LC1 
  add      x0, x0, :lo12:.LC1 
  b        puts 
.L3: 
; print "1, 2, 7, 10" 
  adrp     x0, .LC0 
  add      x0, x0, :lo12:.LC0 
  b        puts 
.LC0: 
  .string "1, 2, 7, 10" 
.LC1: 
  .string "3, 4, 5" 
.LC2: 
  .string "8, 9, 21" 
.LC3: 
  .string "22" 
.LC4: 
  .string "default" 
把上述程序编译为 obj 文件，然后再使用 IDA 打开，可看到其转移表如下。 
指令清单 13.12  jumptable in IDA 
.rodata:0000000000000064             AREA .rodata, DATA, READONLY 
.rodata:0000000000000064             ; ORG 0x64 
.rodata:0000000000000064  $d        DCB    9   
; case 1 
.rodata:0000000000000065             DCB    9   
; case 2 
.rodata:0000000000000066             DCB    6   
; case 3 
.rodata:0000000000000067             DCB    6   
; case 4 
.rodata:0000000000000068             DCB    6   
; case 5 
.rodata:0000000000000069             DCB    6   
; case 6 
.rodata:000000000000006A             DCB    9   
; case 7 
.rodata:000000000000006B             DCB    3   
; case 8 
.rodata:000000000000006C             DCB    3   
; case 9 
.rodata:000000000000006D             DCB    9   
; case 10 
.rodata:000000000000006E             DCB 0xF7   
; case 11 
.rodata:000000000000006F             DCB 0xF7   
; case 12 
.rodata:0000000000000070             DCB 0xF7   
; case 13 
.rodata:0000000000000071             DCB 0xF7   
; case 14 
.rodata:0000000000000072             DCB 0xF7   
; case 15 
.rodata:0000000000000073             DCB 0xF7   
; case 16 
.rodata:0000000000000074             DCB 0xF7   
; case 17 
.rodata:0000000000000075             DCB 0xF7   
; case 18 
.rodata:0000000000000076             DCB 0xF7   
; case 19 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
149 
.rodata:0000000000000077             DCB    3   
; case 20 
.rodata:0000000000000078             DCB    3   
; case 21 
.rodata:0000000000000079             DCB    0   
; case 22 
.rodata:000000000000007B ; .rodata ends 
当输入值为 1 时，目标偏移量的技术方法是：9 乘以 4、再加上 Lrtx4 的偏移量。当输入值为 22 时，
目标偏移量为：0 乘以 4、结果为 0。在转移表 Lrtx4 之后就是 L7 的标签的指令了，这部分指令将负责打
印数字 22。请注意，转移表位于单独的.rodata 段。编译器没有把它分配到.text 的代码段里。 
上述转移表有一个负数 0xF7。这个偏移量指向了打印默认字符串（.L2 标签）的相关指令。 
13.4 Fall-through 
Switch()语句还有一种常见的使用方法——fall-through。 
 1 #define R 1 
 2 #define W 2 
 3 #define RW 3 
 4 
 5 void f(int type) 
 6 { 
 7          int read=0, write=0; 
 8 
 9          switch (type) 
10          { 
11          case RW: 
12                   read=1; 
13          case W: 
14                   write=1; 
15                   break; 
16          case R: 
17                   read=1; 
18                   break; 
19          default: 
20                   break; 
21          }; 
22          printf ("read=%d, write=%d\n", read, write); 
23 }; 
如果 type 为 1（参见第一行可知，这是读取权限 R 为真的情况），则 read 的值会被设置为 1；如果 type
为 2（W），则 write 被设置 1；如果 type 为 3（RW），则 read 和 write 的值都会被设置为 1。 
无论 type 的值是 RW 还是 W，程序都会执行第 14 行的指令。type 为 RW 的陈述语句里没有 break 指
令，从而利用 switch 语句的 fall through 效应。 
13.4.1 MSVC x86 
指令清单 13.13  MSVC 2012 
$SG1305 DB     
'read=%d, write=%d', 0aH, 00H 
_write$ = -12  
; size= 4 
_read$  = -8   
; size= 4 
tv64  = -4   
; size= 4 
_type$  = 8    
; size= 4 
_f        PROC 
          push    ebp 
          mov      ebp, esp 
          sub      esp, 12 
          mov      DWORD PTR _read$[ebp], 0 
          mov      DWORD PTR _write$[ebp], 0 
          mov      eax, DWORD PTR _type$[ebp] 
          mov      DWORD PTR tv64[ebp], eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
150 
逆向工程权威指南（上册） 
          cmp      DWORD PTR tv64[ebp], 1 ; R 
          je       SHORT $LN2@f 
          cmp      DWORD PTR tv64[ebp], 2 ; W 
          je       SHORT $LN3@f 
          cmp      DWORD PTR tv64[ebp], 3 ; RW 
          je       SHORT $LN4@f 
          jmp      SHORT $LN5@f 
$LN4@f: ; case RW: 
          mov     DWORD PTR _read$[ebp], 1 
$LN3@f: ; case W: 
          mov    DWORD PTR _write$[ebp], 1 
          jmp    SHORT $LN5@f 
$LN2@f: ; case R: 
          mov      DWORD PTR _read$[ebp], 1 
$LN5@f: ; default 
          mov      ecx, DWORD PTR _write$[ebp] 
          push     ecx 
          mov      edx, DWORD PTR _read$[ebp] 
          push     edx 
          push     OFFSET $SG1305 ; 'read=%d, write=%d' 
          call     _printf 
          add      esp, 12 
          mov      esp, ebp 
          pop      ebp 
          ret      0 
_f        ENDP 
上述汇编指令与 C 语言源代码几乎一一对应。因为在$LN4@f 和$LN3@f 之间没有转移指令，所以当
程序执行了$LN4@f 处的“令 read 的值为 1”的指令之后，它还会执行后面那个标签的 write 赋值指令。这
也是“fall through”（滑梯）这个名字的来源：当执行完前面那个陈述语句的指令（read 赋值）之后，继续
执行下一个陈述语句的指令（write 赋值）。如果 type 的值为 W，程序会执行$LN3@f 的指令，而不会执行
前面那个 read 赋值指令。 
13.4.2 ARM64 
指令清单 13.14  GCC (Linaro) 4.9 
.LC0: 
  .string "read=%d, write=%d\n" 
f: 
  stp     x29, x30, [sp, -48]! 
  add     x29, sp, 0 
  str     w0, [x29,28] 
  str     wzr, [x29,44] 
; set "read" and "write" local variables to zero 
  str     wzr, [x29,40] 
  ldr     w0, [x29,28]   
; load "type" argument 
  cmp     w0, 2          
; type=W? 
  beq     .L3 
  cmp     w0, 3          
; type=RW? 
  beq     .L4 
  cmp     w0, 1          
; type=R? 
  beq     .L5 
  b       .L6            
; otherwise... 
.L4: ; case RW 
  mov     w0, 1 
  str     w0, [x29,44]  
; read=1 
.L3: ; case W 
  mov     w0, 1 
  str     w0, [x29,40]  
; write=1 
  b       .L6 
.L5: ; case R 
  mov     w0, 1 
  str     w0, [x29,44]  
; read=1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 13 章  switch()/case/default 
151 
  nop 
.L6: ; default 
  adrp    x0, .LC0  
; "read=%d, write=%d\n" 
  add     x0, x0, :lo12:.LC0 
  ldr     w1, [x29,44]  
; load "read" 
  ldr     w2, [x29,40]  
; load "write" 
  bl      printf 
  ldp     x29, x30, [sp], 48 
  ret 
Arm64 程序的汇编指令与 MSVC x86 的汇编指令大致相同。偏移器同样没有在标签.L4 和标签.L3
之间分配转移指令，从而形成了 Switch()语句的 fall-through 效应。 
13.5 练习题 
13.5.1 题目 1 
13.2 节有一段 C 语言源代码。请改写这个程序，并且在不改变程序功能的前提下，让编译器生成体积
更小的可执行程序。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1144 章
章    循
循        环
环  
14.1 举例说明 
14.1.1 x86 
x86 指令集里有一条专门的 LOOP 指令。LOOP 指令检测 ECX 寄存器的值是否是 0，如果它不是 0 则
将其递减，并将操作权交给操作符所指定的标签处（即跳转）。或许是因为循环指令过于复杂的缘故，我至
今尚未见过直接使用 LOOP 指令将循环语句转译成汇编语句的编译器。所以，如果哪个程序直接使用 LOOP
指令进行循环控制，那它很可能就是手写的汇编程序。 
C/C++语言的循环控制语句主要分为 for()、while()、do/while()语句。 
我们从 for()语句开始演示。 
for()语句定义了循环的初始态（计数器的初始值）、循环条件（在变量满足何等条件下继续进行循环），
以及循环控制（每次循环后对变量进行什么操作，通常是递增或递减）。当然这种语句也必须声明循环体，
即每次循环时要实现什么操作。简而言之，for()语句的使用方法是： 
for (初始态；循环条件；循环控制) 
{ 
    循环体； 
}  
根据 for()语句所代表的各种功能，编译器会把 for()语句在编译为 4 个相应的功能体。 
我们一起来编译下面的程序： 
#include  
void printing_function(int i) 
{ 
        printf ("f(%d)\n", i); 
}; 
int main()  
{ 
        int i; 
        for (i=2; i<10; i++) 
                printing_function(i); 
        return 0;  
}; 
使用 MSVC 2010 编译上述程序，可得到如下所示的指令。 
指令清单 14.1  MSVC 2010 
_i$ = -4  
_main   PROC 
    push   ebp 
    mov    ebp, esp 
    push   ecx 
    mov    DWORD PTR _i$[ebp], 2    
; 初始态 
    jmp    SHORT $LN3@main 
$LN2@main: 
    mov    eax, DWORD PTR _i$[ebp]  
; 循环控制语句： 
    add    eax, 1                     
; i 递增 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
153 
    mov    DWORD PTR _i$[ebp], eax 
$LN3@main: 
    cmp    DWORD PTR _i$[ebp], 10   
; 判断是否满足循环条件 
    jge    SHORT $LN1@main           
; 如果 i=10 则终止循环语句 
    mov    ecx, DWORD PTR _i$[ebp]  
; 循环体: call f(i) 
    push   ecx 
    call   _printing_function 
    add    esp, 4 
    jmp    SHORT $LN2@main           
; 跳到循环开始处 
$LN1@main:                            
; 循环结束 
    xor    eax, eax 
    mov    esp, ebp 
    pop    ebp 
    ret     0 
_main    ENDP 
上面的汇编代码可以说是中规中矩。 
使用 GCC 4.4.1（未启用优化选项）编译上述程序，可得到下述汇编指令。 
指令清单 14.2  GCC 4.4.1 
main   
proc near 