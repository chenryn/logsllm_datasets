finish ← false;
}
Fig. 14: Instrumented Auction Example.
introduced in step (1).6 The meaning of this judgment is that
statement s in program P is rewritten to s(cid:48) when performing
instrumentation for predicate φ. There are two rules associated
with each predicate (labeled PRED-TRUE and PRED-FALSE)
for assigning the corresponding boolean variable to true and
false respectively.
Start. A boolean b associated with start(f, ψ) is set to true
at a call site of function f if the formula ψ evaluates to true.
However, since ψ may contain SMARTLTL expressions, we
ﬁrst obtain a new predicate ψ(cid:48) by substituting all SMARTLTL
expressions with their corresponding program variable stored
in Γ. Thus, our instrumentation assigns b to ψ(cid:48) immediately
before an invocation of function f. Futhermore, since b should
only be true at call sites and no where else (recall SMARTLTL
semantics from Section A), we immediately set b to false as
soon as we start executing function f.
Finish. For predicate ﬁnish(f, ψ), we set its corresponding
boolean b if its condition ψ holds and if the transaction has
not reverted. Since this predicate should only evaluate to true
at return points of f and nowhere else, we again set the
corresponding boolean variable to false after f’s invocation.
Revert. The instrumentation for revert is very similar to ﬁnish
except that it is assigned to true if the transaction has reverted
and its condition is satisﬁed.
Example VI.1. Recall the auction from Figure 2 that allows
users to place a bid at most once. Suppose we extend the
ﬁxed version of this auction to allow users to place multiple
bids. We would like to ensure that we still correctly refund
the losers. The following SMARTLTL property (along with
the fairness property stated in Section II) asserts that a loser
is eventually refunded the sum of their bids.
♦ﬁnish(withdraw, L.bal − old(L.bal) =
fsum(bid, msg.val, msg.sender = L))
6Γ also maps free variables in φ to non-deterministic values.
562
input: Program P
input: ϕF , the fairness constraint
input: ϕP the property to verify
Output: Veriﬁed, Counterexample or Unknown
Aϕ := ConstructBuchi(ϕF ∧ ¬ϕP )
B := P × Aϕ
while L(B) (cid:54)= ∅ do
π ∈ L(B)
if feasible(π) =  then
1: procedure VERIFY(P, ϕF, ϕP)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
return π
return Unknown
else if feasible(π) = ? then
B := B \ π
return Veriﬁed
Algorithm 1: Veriﬁcation framework adapted from [8]
Figure 14 shows snippets of the instrumented auction. Lines
2–5 introduce the variables L for the unbound variable L,
ﬁnish for the ﬁnish atom, fsum for the fsum expression, and
old for the old(L.balance) expression. Lines 19–22 initialize
these variables to a non-deterministic value ((cid:63)), false, 0, and
(cid:63) respectively. Lines 9–10 instrument the calculation of the
fsum expression, line 14 instruments the old expression, and
lines 16, 17, and 28 instrument the ﬁnish predicate. With
this instrumentation, the SMARTLTL formula is translated to
♦ﬁnish in standard LTL.
VII. VERIFICATION ALGORITHM
In this section, we describe our technique for verifying
smart contracts against LTL speciﬁcations. Our veriﬁcation
algorithm is an instance of the counterexample-guided ab-
straction reﬁnement (CEGAR) paradigm commonly used for
temporal property checking [4], [5], [8], but it exploits domain-
speciﬁc knowledge about smart contracts to make veriﬁcation
more efﬁcient. In the remainder of this section, we ﬁrst give
an overview of the basic framework we build upon (Sec-
tion VII-B) and then discuss our domain-speciﬁc adaptations
in Sections VII-C and VII-D. 7
A. Background on B¨uchi Automata
Like all veriﬁcation techniques for temporal property check-
ing, our approach requires converting the LTL speciﬁcation to
a B¨uchi automaton:
Deﬁnition VII.1. (B¨uchi automaton.) A B¨uchi automaton
A = (Σ,Q, q0,→,F) is a ﬁnite-state automaton that accepts
inﬁnite words. Speciﬁcally, Σ denotes a ﬁnite alphabet, Q is
a ﬁnite set of states with initial state q0 and ﬁnal (accepting)
states F ⊆ Q. The transition relation → is a function Q×Σ →
Q. The automaton accepts a word w ∈ Σ∗ if a run of w on
A visits a set of ﬁnal states inﬁnitely many times.
Note that every LTL formula can be converted into an
equivalent B¨uchi automaton using standard techniques [10].
B. Overview
As mentioned earlier, our algorithm is an instance of the
CEGAR framework for temporal property checking proposed
7As we show in Appendix C, these domain-speciﬁc adaptations are quite
important for making this approach practical.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
in prior work [8]. In this section, we give an overview of this
framework and then discuss our domain-speciﬁc adaptations
in the next two subsections.
The basic CEGAR framework for LTL property checking
is presented in Algorithm 1 and works as follows: First, it
converts the LTL formula ϕF ∧ ¬ϕP to a B¨uchi automaton
whose language corresponds to words that satisfy the fair-
ness constraint but violate the correctness property. It then
constructs another B¨uchi automaton B which represents the
program together with the speciﬁcation (line 7). In particular,
this automaton is constructed in such a way that the emptiness
of B’s language constitutes a proof that P satisﬁes the spec-
iﬁcation. Then, in each iteration of the loop (lines 8–14), the
algorithm ﬁnds a word (i.e., inﬁnite path) π that is accepted
by B (line 9) and checks whether it is actually feasible under
the program semantics. If so, π is a genuine counterexample
(line 11), and, if not, the algorithm removes this spurious word
π from B (line 14) and moves on to the next word accepted
by B. On the other hand, if the feasibility of π cannot be
determined, the algorithm returns unknown (line 13).
Based on the above discussion, there are two key issues we
need to address to adopt this veriﬁcation approach:
1) How to construct a B¨uchi automaton B that represents an
embedding of the speciﬁcation into the smart contract;
2) How to determine feasibility of an inﬁnite path π
In the remainder of this section, we address these questions
and show how to leverage domain-speciﬁc knowledge to
simplify the resulting veriﬁcation problem.
C. B¨uchi Contracts
We deﬁne a B¨uchi contract to represent a smart contract
together with its speciﬁcation:
Deﬁnition VII.2. (B¨uchi contract) Let P be a smart contract
with statements S, program locations L, entry location (cid:96)0 and
a transition relation T : L × S → L. Given a speciﬁcation
automaton Aϕ = (Σ,Q, q0,→,F), the B¨uchi contract P×Aϕ
is a B¨uchi automaton B = ((cid:98)Σ, (cid:98)Q,(cid:98)q0, (cid:16), (cid:98)F) where:
• (cid:98)Σ = {s; assume(φ) | s ∈ S ∧ φ ∈ Σ}
• (cid:98)Q = L × Q and (cid:98)q0 = ((cid:96)0, q0)
• The transition relation (cid:16) maps a state ((cid:96)1, q1) to another
state ((cid:96)2, q2) on label (s; assume(φ)) iff ((cid:96)1, s, (cid:96)2) ∈ T and
(q1, φ, q2) ∈→.
• F = {((cid:96), q) | q ∈ F ∧ (ExtCall((cid:96)) ∨ ExtReturn((cid:96)))}
In this deﬁnition, ExtCall((cid:96)) (resp. ExtReturn((cid:96))) is true if
(cid:96) corresponds to a program location immediately preceding
a call to (resp. return from) an external function.8 Thus, our
B¨uchi contracts are very similar to the notion of B¨uchi product
programs from prior work [8] but differ in the construction of
the ﬁnal states. In particular, since the SMARTLTL semantics
are deﬁned over calls to and returns from external functions,
only those locations that correspond to external call/return
points are marked as ﬁnal states. This difference is quite im-
portant for making veriﬁcation practical since it signiﬁcantly
reduces the number of words (i.e., program paths) accepted
by the B¨uchi contract and allows disregarding execution traces
that are not relevant to the semantics of SMARTLTL.
8Calls to contract methods from the harness are also external calls.
then
2
return 
2 , lasso-shaped counterexample
input: π = τ1τ ω
Output: , , or ?
if ¬SAT(sp(τ1; τ2, true)) then return 
V := {v | v ∈ Vars(τ2) ∧ t ∈ Txs(τ2) ∧ Read(t, v)} )
V := Vars(τ1; τ2)\V
φ := ∃V .sp(τ1; τ2, true)
if sp(τ2, φ) ⇒ φ then return 
2 ) (cid:54)= null
if FindRankingFn(τ1τ∗
return ?
1: procedure FEASIBLE(π)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
Algorithm 2: Feasibility checking procedure. Here, sp(s, φ) denotes
strongest postcondition of s wrt φ, and Txs(τ2) corresponds to
contract transactions invoked in τ2
Theorem VII.1. A smart contract P satisﬁes the speciﬁcation
(ϕF, ϕP) iff the corresponding B¨uchi contract P × AϕF∧¬ϕP
does not have a feasible inﬁnite trace π such that π ∈ L(B).
D. Checking Feasability
2 is a terminating program; thus τ1τ ω
if so, π is feasible.
Pτ1τ ω
Our feasibility checking procedure is shown in Algorithm 2
represents
We now describe how to check whether a path π ∈ L(B)
is feasible. In general, paths that are accepted by the B¨uchi
contract are lasso-shaped, meaning that π is always of the form
2 . Intuitively, π is feasible if it is possible to execute τ2
τ1τ ω
inﬁnitely many times after executing the “stem” τ1.
and consists three conceptual steps, where Pτ1τ ω
the program τ1; while(true) τ2:
1) Check feasibility of τ1; τ2 (line 4); if not, π is infeasible.
2) Check if Pτ1τ ω
2 is a non-terminating program (lines 5–8);
3) Check if Pτ1τ ω
2 has a ranking function (lines 9). If so,
2 is infeasible.
In this work, we use a simple but effective non-termination
checking method that leverages domain knowledge for com-
puting so-called recurrent sets [12]. In particular, suppose τ2
involves contract methods F . Now, if the ﬁrst execution of
τ2 is feasible and if the program state relevant to F never
changes,
then we know that subsequent executions of τ2
will also be feasible. Essentially, lines 5–8 of Algorithm 2
implement this idea: here, φ captures program state relevant
to τ2 transactions after going through the loop once. If we can
prove that executing τ2 in a state satisfying φ always preserves
φ, then this means we can execute τ2 inﬁnitely many times.
Theorem VII.2. If Algorithm 2 returns  for a path π, then
Pπ is a non-terminating program.
Example VII.1. Consider the auction in Figure 2 and the
inﬁnite counterexample τ1τ ω
2 given in Figure 15. This trace
corresponds to a denial-of-service attack where one of the
bidders prevents the other users from receiving their refund
by reverting in its fallback method. To show this is a real
counterexample, we need to prove that τ1τ ω
2 is feasible —
i.e., we can execute τ2 inﬁnitely many times after executing
τ1 once. Now, let φ be the strongest post-condition of feasible
trace τ1; τ2. Clearly, if we have {φ}τ2{φ}, this means we can
execute τ2 inﬁnitely many times.
However, in practice, if we compute φ as the strongest
post-conditon of τ1; τ2, we can almost never prove the Hoare
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
563
τ1 :A.bid(from : B1, value : 15)) ; ... ; A.bid(from : B2, value : 16)) ; ... ; A.bid(from : B3, value : 17)) ; ... ; A.close()) ;
τ2 :A.refund()) ; ... ; bidders[0].transfer(refAmt) ; revert() ;
2 from Section II-A, where A is the instance of the auction and Bi are the bidders
In addition, the current version of SMARTPULSE makes
several assumptions. For example, it assumes that miners are
not adversarial and that transactions are executed in the order
they are submitted. It also assumes that all attacks require only
a single instance of the contract being analyzed. However, it
is worth noting that the assumptions we make in this work
are actually are less restrictive than prior work [17], [27].
In addition, SMARTPULSE can be easily extended to remove
these assumptions, albeit potentially at the cost of scalability.
Finally, SMARTLTL only allows users to specify properties
over contract variables at transaction boundaries. As a result,
users cannot specify properties intended to query the behavior
within a transaction. In addition, SMARTPULSE does not
consider a property to be violated if the violation occurs within
a transaction, but is not observable at the transaction boundary.
Fig. 15: SMARTPULSE counterexample τ1τ ω
triple {φ}τ2{φ} even when τ1τ ω
2 is obviously feasible. This
is because τ2 involves blockchain-modifying statements in the
harness in addition to invocations of the contract’s transactions.
However, the idea is that if the transactions called in τ2 do
not read from these modiﬁed blockchain states, then we can
safely ignore those variables when determining feasibility of
2 . Thus, in line 7 of Algorithm 2, we project out those
τ1τ ω
variables through existential quantiﬁcation.
Going back to our example, the only transaction involved
in τ2 is refund, which reads from variables refAmt,
bidders, and refunds. Since these variables are not
modiﬁed in τ2, we have sp(τ2, φ) ⇒ φ at line 8 of Algorithm
2 because φ only involves these three variables. Thus, our
method is able to prove the feasibility of τ1τ ω
2 .
VIII. IMPLEMENTATION AND LIMITATIONS
The implementation of SMARTPULSE consists of approx-
imately 10,000 lines of code spanning three languages (C#,
Java, C++) and supports most features of Solidity 0.5.x,
including inheritance, hashing, and important built-in con-
structs such as send, transfer and call. Given a smart contract
implemented in Solidity, SMARTPULSE ﬁrst converts it to
the Boogie intermediate representation [2] using a modiﬁed
version of the VeriSol Solidity-to-Boogie translator [35]. Our
modiﬁed version of VeriSol incorporates several optimizations,
such as splitting VeriSol’s memory maps using alias analysis to
improve analysis scalability. The program transformations de-
scribed in Section VI-A and Section VI-B are then performed
on the Boogie code in preparation for veriﬁcation, which
also occurs at the Boogie level. Our implementation of the
veriﬁcation algorithm from Section VII is an extension of the
UltimateAutomizer software model checker [8]. In particular,
given a SMARTLTL speciﬁcation, our implementation ﬁrst
constructs a B¨uchi contract as described in Section VII-C and
tries to verify it using the CEGAR approach from Algorithm 1
and using the feasibility checking procedure discussed in
Section VII-D. If the veriﬁer discovers a counterexample,
SMARTPULSE performs further post-processing and converts
it to a program trace (i.e., sequence of transaction names and
their arguments) that can be understood by users.
Modular veriﬁcation.
In addition to checking global
temporal properties, SMARTPULSE can also be used to check
method-level properties. That
implementation of
SMARTPULSE also accepts SMARTLTL speciﬁcations at the
method level.
is, our
Limitations. The current version of SMARTPULSE has several
limitations. First, it does not support some low-level Solid-
ity features, including inline assembly, singature-based call-
ing mechanisms (e.g., addr.call("function foo(int,
int)")(a, b)), bitwise operations, and Application Binary
Interface (ABI) functions. Second, SMARTPULSE cannot rea-
son precisely about non-linear arithmetic and models them
using uninterpreted functions. Third, the current gas model
used by SMARTPULSE is conservative and estimates gas usage
from Solidity code rather than EVM bytecode.
IX. EVALUATION
In this section, we present the results of our evaluation,
which is designed to answer the following research questions:
(1) Is SMARTPULSE able to verify liveness properties? (2)
How does SMARTPULSE compare against existing smart con-
tract veriﬁers? (3) Is SMARTPULSE able to generate attacks
for vulnerable contracts?
With the exception of the results in Section IX-C, all
experimental results reported in this section are conducted
on a machine running MacOS 10.15.4 with an 8-Core Intel
Core i9 and 16GB of memory. For these experiements, we
also set a timeout of 5 hours and memory limit of 16GB. The
results from Section IX-C were gathered on a machine running
Ubuntu 18.04 with an Intel Xeon(R) W-3275 2.50 GHz CPU
and 32GB of physical memory.
A. Liveness Evaluation
Since SMARTPULSE is the ﬁrst automated approach for
checking liveness properties of smart contracts, we ﬁrst
conduct an evaluation that focuses on liveness. To perform
this evaluation, we consider smart contracts and properties
considered in prior work on interactively verifying liveness
properties [30].9 In addition, we collect six other contracts
(auctions, crowdsales, and escrows) that are deployed on the
blockchain and that have interesting liveness properties. In
particular, two of these contracts are taken from the popular
OpenZeppelin library [25], and the remaining ones are taken
from EtherScan (we selected ones where users deposited the
most Ethereum throughout the contract’s lifetime and that
only use SMARTPULSE-supported features). For each of these
contracts, we inspected their interface and formalized liveness
properties we would expect them to satisfy. An English de-
scription of the properties for each benchmark can be found
in Appendix D.
The results of this evaluation are summarized in Table I,
which lists the contract’s name, number of lines of code,
and the number of properties that we checked. The column
labeled “# veriﬁed” shows the number of properties that were
successfully veriﬁed, and the “# refuted” column shows the
9Since the contracts considered in that work are written in Scilla, we
manually translated them to Solidity.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
564
Contract
RefundEscrow
EscrowVault
RefundableCrowdsale
EPXCrowdsale
Crowdfunding