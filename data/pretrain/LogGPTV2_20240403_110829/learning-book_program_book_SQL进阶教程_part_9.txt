NULL容易被认为是值的原因恐怕有两个。第一个是在C语言等编程
Relat/ona) Model for Drtatase
ngeent: lersior 2, P.173)
语言里面，NULL被定义为了一个常量（很多语言将其定义为了整数0），
“关于NL的税重要的一件事情
是, LL 并不是值。” [CJ, Dote,
这导致了人们的混淆。但是，其实SQL里的NULL和其他编程语言里的
An inrsvtise Zo Dstrbase Sotr
(f°efftioe) , P,619 1
NULL是完全不同的东西（请参考本节末尾参考文献中的“C语言初级
Q&A").
第二个原因是，ISNULL这样的谓词是由两个单词构成的，所以人们
容易把IS当作谓词，而把NULL当作值。特别是 SQL 里还有IS TRUE、
ISFALSE这样的谓词，人们由此类推，从而这样认为也不是没有道理。
但是正如讲解标准SQL的书里提醒人们注意的那样，我们应该把IS
NULL看作是一个谓词。因此，如果可以的话，写成IS_NULL这样也许更
注图
合适
CJ. Date 和 Hugh Derven 的著作
(标准 50. 折南 ( 复 4 反 1) ( 原
书名为 A Gvkde fo SOL Standint
unknown、第三个真值
fourtb E是in 尚无中文期 l
终于轮到真值unknown登场了。本节开头也提到过，它是因关系数
据库采用了NULL而被引入的“第三个真值”
这里有一点需要注意：真值unknown和作为NULL的一种的 UNKNON
---
## Page 55
42
第1章神奇的 SQL
（未知）是不同的东西。前者是明确的布尔型的真值，后者既不是值也不
是变量。为了便于区分，前者采用粗体的小写字母unknown，后者用普通
的大写字母UNKNONN来表示。为了让大家理解两者的不同，我们来看一
个x=x这样的简单等式。x是真值unknown时，x=x被判断为 true，而
x是 UNKNOWN 时被判断为 unknown。
--这个是明确的真值的比较
--这个相当于NULLUL
WOUYUE NIOEDINN -NNOIXIN
接下来我们看一下SQL遵循的三值逻辑的真值表。
三值逻辑的真值表[NOT】
NOTx
三值逻辑的真值表【AND】
AND
三值逻辑的真值表“OR}
图中浅蓝色部分是三值逻辑中独有的运算，这在二值逻辑中是没有的。
其余的SQL谓词全部都能由这三个逻辑运算组合而来。从这个意义上讲，
这个矩阵可以说是SQL的母体（matrix）。
---
## Page 56
13三值逻辑和NULL—
43
NOT的话，因为真值表比较简单，所以很好记：但是对于AND和OR,
因为组合出来的真值较多，所以全部记住非常困难。为了便于记忆，请注
意这三个真值之间有下面这样的优先级顺序。
·AND 的情况：false > unknown > true
：OR的情况：true >unknowm>false
优先级高的真值会决定计算结果。例如 trueANDunknown，因为
unknown 的优先级更高，所以结果是unknown-而 true OR unknown的话，
因为true优先级更高，所以结果是true。记住这个顺序后就能更方便地
进行三值逻辑运算了，特别需要记住的是，当AND运算中包含unknown时，
结果肯定不会是trwe（反之，如果AND运算结果为 true，则参与运算的
双方必须都为true）。这一点对理解后文非常关键。
关于理论就介绍这么多吧。接下来我们将以具体的代码为例来分析一
下三值逻辑是如何带来意料之外的结果的。有些地方违反了我们习惯了的
二值逻辑的一些常识，一开始可能会不好理解。届时，请翻回来看一看这
里的真值表，实际动手分析一下运算过程。
下面请看一个练习题。
间题：假设a=2，b=5，c=NULL，此时下面这些式子的真值是
什么？
1. a  C
2. a > b OR b  c)
答案
1. unknown; 2. unknown; 3. true : 4. unknown
实践篇
1.比较谓词和NULL(1）：排中律不成立
真是假？
图灵社区会员非洲铜(PI:EMAIL)专享尊重版权
---
## Page 57
44
—第1章神奇的 SOL
约翰是20岁，或者不是20岁，二者必居其一。——P
大家觉得正确吗？没错，在现实世界中毫无疑问这是个真命题。我们
不知道约翰是谁，但只要是人就有年龄。而且只要有年龄，那么就要么是
20岁，要么不是20岁，不可能有别的情况。类似的还有“凯撒渡过了卢
比孔河，或者没有渡过，二者必居其一”“有外星人，或者没有外星人，
二者必居其一”等，这些都是真命题。像这样，“把命题和它的否命题通
过“或者”连接而成的命题全都是真命题”这个命题在二值逻辑中被称为
排中律（Law of Excluded Middle）。顾名思义，排中律就是指不认可中间
状态，对命题真伪的判定黑白分明，是古典逻辑学的重要原理。“是否承
认这一原理”被认为是古典逻辑学和非古典逻辑学的分界线。由此可见，
排中律非常重要。
如果排中律在SQL里也成立，那么下面的查询应该能选中表里的所
有行。
--查询年龄是20岁或者不是20岁的学生
SELSCT *
02 = 36 388HI
foz <> a6e 0
遗撼的是，在SQL的世界里，排中律是不成立的。假设表Students
里的数据如下所示。
Students
name（名字)
age|年龄|
布朗
22
拉里
19
约榆
伯态
21
那么这条SQL语句无法查询到约翰，因为约翰年龄不详。关于这个
原因，我们在理论篇里学习过，即对NULL进行比较运算的结果是
unknoMm。具体来说，约输这一行是按照下面的步骤被判断的。
---
## Page 58
13 三值逻辑和 NULL —
45 
--1.约输年龄是BUL|未知的NUL
SELECT *
FROM Students
TNN = 96e 383
OR age <> NULL,
--2.对NULL使用比较谓词后，结果为umk
SELBCT *
FROM Students
OR unknomJ
--3.unknoORumknon的结果是unknoMm（参考“理论篇”中的矩阵|
SELBCT *
MHERS uninomJ
SQL语句的查询结果里只有判断结果为true的行。要想让约翰出现
在结果里，需要添加下面这样的“第3个条件”。
-添加第3个条件：年静是20岁，或者不是20岁，或者年龄未蛙
SELECT *
FROM Studenta
HHERE age = 20
OR age c> 20
TAN SI 96e wo
像这样，现实世界中正确的事情在SQL里却不正确的情况时有发生。
实际上约翰这个人是有年龄的，只是我们无法从这张表中知道而已，换句
话说，关系模型并不是用于描述现实世界的模型，而是用于描述人类认知
状态的核心（知识）的模型。因此，我们有限且不完备的知识也会直接反
映在表里。
即使不知道约翰的年龄，他在现实世界中也一定“要么是20岁，要
么不是20岁”一—我们容易自然而然地这样认为。然而，这样的常识在
三值逻辑里却未必正确。
2.比较谓词和NULL(2)：CASE表达式和NULL
下面我们来看一下在CASE表达式里将NULL作为条件使用时经常会
出现的错误。首先请看下面的简单CASE表达式。
图灵社区会员非洲钢(PI:EMAIL）专享尊重版权
---
## Page 59
46
一第1章神奇的SQL
--co1_1 为 1 时返回O、为 NULL 时返回 × 的 CASB 表达式？
CASE col_1
XHEN 1
• O, NEH
X, NEHTION NSHX
END
这个CASE表达式一定不会返回X。这是因为，第二个WHEN子句
是co1_1-NULL的缩写形式。正如大家所知，这个式子的真值永
远是unknown。而且 CASE 表达式的判断方法与 WHERE子句一样，只
认可真值为true的条件。正确的写法是像下面这样使用搜索CASE表
达式。
CASE WHEN co1_1 = 1 THEN O
NHEN co1_1 IS NULL THEN *×
END
这种错误很常见，其原因是将NULL误解成了值。这一点从NULL和
第一个WHEN子句里的1写在了同一列就可以看出。这里请再次确认自己
已经记住“NULL并不是值”这点。
3. NOT IN和NOT EXISTS 不是等价的
在对SQL语句进行性能优化时，经常用到的一个技巧是将IN改写成
EXISTS。这是等价改写，并没有什么问题。间题在于，将NOTIN改写
详见 1-11 节。
成NOT EXISTS时，结果未必一样。
例如，请看下面这两张班级学生表。
Class_A
（名学
city佳址
布朗
22
东京
拉里
19
垮玉
伯杰
21
千叶
---
## Page 60
13 三值逻辑和NULL
4/
Class_B
age（年龄）
cityI住址
齐藤
22
东京
田房
23
东京
山田
东京
和泉
18
千叶
武田
20
千叶
石川
19
神奈川
请注意，B班山田的年龄是NULL。我们考虑一下如何根据这两张表
查询“与B班住在东京的学生年龄不同的A班学生”。也就是说，希望查
询到的是拉里和伯杰。因为布朗与齐藤年龄相同，所以不是我们想要的结
果。如果单纯地按照这个条件去实现，则SQL语句如下所示。
-查调与3班住在东京的学生年龄不同的A班学生的SQL语句？
SELECT *
06e 23373s 1 NI 30N 86 383
FROM Class_A
FROH Class_B
WHERE city东京1:
结果是空，查询不到任何数据。
实际上，如果山田的年龄不是NULL（且与拉里和伯杰年龄不同），是
能顺利找到拉里和伯杰的。然而，这里NULL又一次作怪了。我们一步一
步地看看究竞发生了什么吧。
--1.执行子查询，获取年龄列表
SELECT *
MHERE age MOT IN (22, 23, NULL) 
--2.用NOT和IN等价改写NOT IN
SELECT *
MHERE NOT age IN (22, 23, NULL) /
--3.用OR等价改写谓词IN
SELECT *
MHERE NOT ( (age = 22) OR (age = 23) OR (age = NULL) 1)
---
## Page 61
48
第1章种奇的 SQL
--4.使用德·摩根定律等价改写
SEL8CT *
FROM C1ass_A
MHERE NOT (age = 221 AND NOT(age = 23) AND BOT (age = NULL))
--5.用<>等价改写0T和
SSLSCT *
MHERE (age <> 22)AND(age<> 23)AND(age <> NULL) )
--6.对NULL使用<>后，结果为umkDWm
SELBCT *
FROM C1sss_A
MHERE(age<> 22)AND(age<> 23)AND tmk
SSLSCT *
FROM Class_A
MHERE falae 或 unknowmj
可以看出，这里对A班的所有行都进行了如此繁琐的判断，然而没
有一行在WHERE子句里被判断为true。也就是说，如果NOTIN子查询
中用到的表里被选择的列中存在NULL，则SQL语句整体的查询结果永远
是空。这是很可怕的现象。
为了得到正确的结果，我们需要使用EXISTS谓词。
--正确的SQL语句：拉里和伯杰将被查询到
SELSCT *
MHERE NOT EXISTS ( SELECT *
KHERS A.age - 3.age
FROM Class_B B
AND B.city-东京"1
■执行结果
name
拉里
19
琦玉
怕杰
21
千叶
同样地，我们再来一步一步地看看这段SQL是如何处理年龄为NULL