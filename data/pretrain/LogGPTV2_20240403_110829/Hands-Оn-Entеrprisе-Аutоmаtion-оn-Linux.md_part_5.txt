1. What does the acronym SOE stand for?
2. Why would you choose an operating system with a long support cycle, such as
CentOS, rather than one with a more rapid release cycle, such as Fedora?
3. Should you ever deviate from the standards you have defined for your
environment?
4. List three challenges of scaling Linux environments up to enterprise scale.
5. Name three benefits that SOEs bring to Linux in the enterprise.
6. How does an SOE help to reduce the training requirements in an enterprise?
7. Why does an SOE benefit the security of your Linux environment?
Further reading
To learn more about SOEs from a Red Hat perspective, refer to this
article: https:/​/​servicesblog.​redhat.​com/​2016/​11/​03/​standard-​operating-
environment-​part-​i-​concepts-​and-​structures/​.
[ 27 ]
2
Automating Your IT
Infrastructure with Ansible
While there are numerous ways to automate tasks on Linux, there is one technology that
stands out above the rest for automation at scale, and that is Ansible. Although it is entirely
possible to automate a task (or tasks) easily with a shell script, there are a number of
disadvantages to this, the most significant being that shell scripting does not scale up well
in large environments. It should be said that there are other automation tools, but Ansible
makes use of native communication protocols (for example, SSH on Linux, and WinRM on
Windows) and hence is completely agentless! This makes deploying it into existing
environments simple. While automation with Ansible is a huge, in-depth subject, this
chapter is intended to cover the basics and get you up and running rapidly so that, even if
you have no prior experience, you can follow the automation examples in this book.
Indeed, this is one of the reasons for the rapid and widespread adoption of Ansible over the
last few years—although it is incredibly powerful, getting started and automating your first
tasks is extremely simple.
In this chapter, we will cover the following Ansible topics:
Exploring the Ansible playbook structure
Exploring inventories in Ansible
Understanding roles in Ansible
Understanding Ansible variables
Understanding Ansible templates
Bringing Ansible and the SOE together
Automating Your IT Infrastructure with Ansible Chapter 2
Technical requirements
This chapter includes examples based on the following technologies:
Ubuntu Server 18.04 LTS
CentOS 7.6
Ansible 2.8
To run through these examples, you will need access to a server or virtual machine running
one of the operating systems listed here, and also access to Ansible. Note that the examples
given in this chapter may be destructive in nature (for example, they involve installing files
and packages) and, if run as is, are only intended to be run in an isolated test environment.
Once you are satisfied that you have a safe environment in which to operate, let's get
started on looking at the installation of new software packages with Ansible.
All example code discussed in this chapter is available from GitHub at: https:/​/​github.
com/​PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux/​tree/​master/
chapter02.
Exploring the Ansible playbook structure
Getting up and running with Ansible is a straightforward endeavor, and packages are
available for most major Linux distributions, FreeBSD, and just about any platform where
Python runs. If you have a recent version of Microsoft Windows installed that supports the
Windows Subsystem for Linux (WSL), Ansible even installs and runs under this.
Note, though, that there are no native Windows packages at the time of
writing.
The official Ansible documentation provides installation documentation for all major
platforms. Please refer to https:/​/​docs.​ansible.​com/​ansible/​latest/​installation_
guide/​intro_​installation.​html.​
In this chapter, our examples will be run on Ubuntu Server 18.04.2. However, as Ansible
works across multiple different platforms, most examples should work on other operating
systems too (or, at most, require minimal adaptation).
[ 29 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Following the official installation documentation, the following commands are executed to
install the latest version of Ansible on our demonstration system:
$ sudo apt-get update
$ sudo apt-get install software-properties-common
$ sudo apt-add-repository --yes --update ppa:ansible/ansible
$ sudo apt-get install ansible
If all goes well, you should be able to query the Ansible binary for its version by running
the following command:
$ ansible --version
The output should look something like this:
Congratulations! Now that Ansible is installed, let's take a look at the fundamentals of
running your first set of Ansible tasks, called a playbook. To get one of these to run, you
actually need to have the following three things in place:
1. A configuration file
2. An inventory
3. The playbook itself
When Ansible is installed, a default configuration file is normally installed
in /etc/ansible/ansible.cfg. There are many advanced features that can be changed
through this file, and it can be overridden using a number of methods. For this book, we
will work almost exclusively with the default settings, meaning that for now, it is sufficient
to acknowledge the existence of this file.
To find out more about the Ansible configuration file, this document is a
good starting point, available at https:/​/​docs.​ansible.​com/​ansible/
latest/​installation_​guide/​intro_​configuration.​html
[ 30 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Nothing happens on Ansible without an inventory. The inventory is a text file (or script)
that provides the Ansible binaries with a list of hostnames to operate against, even if it is
just the localhost. We will look at inventories in more detail in the next part of the chapter,
as they are going to be important in our automation journey. For now, you will find that on
most Linux platforms, a sample inventory file is installed in /etc/ansible/hosts as part
of the Ansible installation. When the inventory file is empty (or contains only comments, as
in the case of the sample one), Ansible implicitly operates against the localhost only.
Last, but by no means least, you must actually have a playbook to run against a server (or
servers). Let's now work through an example to get a very simple playbook to run with
Ansible. Ansible playbooks are written in YAML (a recursive acronym, meaning YAML
Ain't Markup Language) and, as this is very easy to read—indeed, this is one of the core
strengths of Ansible—playbooks can very easily be picked up by someone with minimal
Ansible skills, and yet be easily understood, for either application or modification.
If you are not used to writing code in Python or YAML, then the one thing you need to
know about writing YAML for playbooks is this: indentation matters. Rather than using
brackets or braces to define blocks of code, and semicolons to denote line ends (as is
common in many high-level languages), YAML uses the indentation level itself to
determine where in the code you are, and how it relates to the surrounding code.
Indentation is always created using spaces—never use tabs. Even if the indentation looks
the same to the naked eye, the YAML parser will not see it as the same.
Consider the following block of code:
---
- name: Simple playbook
hosts: localhost
become: false
This is the beginning of an Ansible playbook. Ansible YAML files always start with three
dashes (---), with no indentation. Next, we have a single line that defines the start of the
play, denoted by the single dash (-), with no indentation. Note that an Ansible playbook
can consist of one or more plays, with each play being (at a basic level) a set of tasks to be
performed on a given set of hosts. This particular line of the playbook specifies the name for
the play. Although the name keyword is optional in most places and can be omitted, it is
strongly recommended to include it for all play definitions (just as we have here), and also,
for each and every task. This, quite simply, aids the readability of the playbook and the
speed at which someone new can pick it up, thus promoting efficiency and a low barrier to
entry for newcomers, as we discussed in the preceding chapter.
[ 31 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The third line of this block tells Ansible which hosts the tasks included in the play should
be run against. In this instance, we are only going to run against localhost. The fourth
line tells Ansible not to become the superuser (root), as it is not required for this task. Some
tasks—for example, restarting a system service—must be performed as the superuser and,
in this case, you would specify become: true. Note the two-space indentation on both the
third and fourth lines in the preceding code—this tells the YAML parser that the lines are
part of the play, defined on the second line.
Now, let's add two tasks to our playbook by appending the following block of code under
the previous one:
tasks:
- name: Show a message
debug:
msg: "Hello world!"
- name: Touch a file
file:
path: /tmp/foo
state: touch
The tasks keyword defines the end of the play definition, and the start of the actual tasks
we wish to execute. Note that it is still indented by two spaces, which tells the parser it is
part of the play we defined previously. We then increase the indentation again for the next
line, to denote that this is part of the tasks block.
By now, you will see a familiar pattern building up. Every time a line of code forms part of
a preceding statement, we increase the indentation by two spaces. Each new item starts
with a single dash (-), thus our preceding block of code contains two tasks.
The first one uses the name keyword with the value Show a message by way of
documentation (think of comments in other programming languages) and uses something
called an Ansible module. Modules are predefined blocks of code that Ansible uses to
perform given tasks. The debug module, included here, is used largely for displaying
messages or variable contents and, hence, playbook debugging. We pass the msg parameter
to the debug module by indenting msg by a further two spaces, telling the module which
message we want to be printed when the playbook is run.
[ 32 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The second task has the name and Touch a file keyword and uses the file module to
touch a file located in /tmp/foo. When we run this playbook, the output should look
something like this:
As a rule of thumb for most simple playbooks, tasks are run sequentially from top to
bottom, making the order of execution predictable and easy to manage. That's it! You have
written and executed your first Ansible playbook. You will note how easy that was, and
how little work was involved in integrating it with a single test system. Now, for such a
simple example, a valid question would be: Why go to all that trouble with Ansible when two
lines of shell scripting could achieve the same thing? An example of shell scripting can be seen
in the following code block:
echo "Hello World!"
touch /tmp/foo
[ 33 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The first reason to use Ansible is that, while this example is very simple and easy to
understand, as the required tasks for a script become more complex, they become much
harder to read and require someone who understands shell scripting to debug or modify
them. With the Ansible playbook, you can see that the code is incredibly readable, and each
part has an associated name. The enforced indentation also serves to make the code more
readable, and while both comments and indentation are supported in a shell script, neither
is enforced, and they are commonly left out. On top of this, all modules must have
documentation to be accepted into the core Ansible distribution—thus, you are guaranteed
to have good-quality documentation on hand for your playbook. Module documentation
can be found on the official Ansible website, or as part of the installed Ansible package. For
example, if we wanted to learn how to use the file module we used earlier, we would
simply enter the following command in the shell of our system:
$ ansible-doc file
When invoked, this command will give you the complete documentation for the file
module, which incidentally is the same as the documentation on the official Ansible web
site. Thus you always have the Ansible module documentation at your fingertips, even if
the system you are working on is disconnected from the Internet. The following screenshot
shows a page of the output from the command we just ran:
[ 34 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The next reason is that the Ansible modules (mostly) offer support for idempotent changes.
What this means is, if a change has already been made, we won't make it a second time.
This is especially important for some changes that might be destructive in nature. It also
saves time and compute resources, and even helps in auditing systems. On top of this,
Ansible offers flow control and robust error handling and, where a shell script will continue
even after an error, unless you integrate your own error-handling code (possibly causing
unpredictable or undesirable results), Ansible will stop all further execution and require
you to fix the problem before running the playbook again.
It is worth mentioning that while modules form a core part of the strength of Ansible, there
could be times when the functionality you need is not handled by any of the available
modules. The beauty of Ansible being open source software (OSS) is that you can write
and integrate your own modules. This is beyond the scope of this book but is well worth
exploring as you develop your Ansible skills. In instances where existing modules just
don't have the required functionality, and you don't have the time or resources to write
your own module, Ansible can also send raw shell commands to the system being
automated. In fact, there are two modules—shell and command—that can send raw
commands to remote systems. Thus, you can even mix shell scripting with Ansible if the
need arises, although you should always use native Ansible modules before resorting to the
use of shell or command. Ansible is incredibly flexible in this way—the built-in
functionality is extensive, but in the event that it ever falls short, it is incredibly easy to
extend the functionality yourself.
These benefits are just the tip of the iceberg, and we will explore some of the others as we
proceed through this chapter. As stated earlier, this chapter is not intended to be
exhaustive, but to serve as an introductory guide to Ansible, to get you started and help
you understand the examples in this book.
In the next section, we will explore probably one of the biggest reasons to use Ansible over
a simple shell script.
Exploring inventories in Ansible
As we have already touched upon, one of the key reasons for the rapid uptake of Ansible is
the fact that it can integrate, without an agent, into most major operating systems. For
example, a single Ansible host can automate commands on just about any other Linux (or
BSD) host to which it can connect over SSH. It can even automate tasks on Windows hosts
that have had remote WinRM enabled, and it is here that we start to uncover the real power
of Ansible.
[ 35 ]
Automating Your IT Infrastructure with Ansible Chapter 2
In the previous section of this chapter, we only looked at Ansible running against the
implicit localhost, without using SSH. Ansible supports two different kinds of inventories:
static and dynamic. Throughout this book, we will mostly work with static inventories, as
they serve the examples we are working with. Indeed, static inventories are perfect for
small environments, where the workload of keeping the list of servers to be automated
(which, in essence, is what an Ansible inventory is) is small. However, as inventories grow
in scale, or remain small but change rapidly (for example, cloud compute resources or
Docker containers), the work required to keep an Ansible inventory file up to date becomes
much larger and prone to error.
Ansible offers a number of ready-made dynamic inventory solutions that integrate with
popular public cloud platforms such as Microsoft Azure and Amazon Web Services, on-
premise compute platforms such as OpenStack and VMware, and infrastructure
management solutions such as Katello. It is even possible to write your own dynamic
inventory scripts, and as your environment scales, you will most likely find yourself going
down this path.
For now, let's focus on static inventories. Suppose that we want to take our example
playbook from earlier in the chapter, and run it against two remote hosts rather than the
localhost. First of all, let's create an inventory file that contains the names/addresses of the
two hosts. A static inventory is written in INI format (as opposed to the YAML used in the
playbooks) and, at its simplest level, consists of one host per line. Note that hosts can be
specified either by DNS entry or by IP address.
Here is the inventory file for our demo environment:
[test]
testhost1
testhost2
As you can see, the file is very simple. The first line, with square brackets around it, is the
name of a group in which the servers below it are placed. Servers can live in more than one
group, and this aids greatly in the day-to-day management of servers. For example, if you
have a playbook to apply security updates to all Linux servers, then you would probably
want a group called something like [linux-servers] that contains the addresses of all
such servers. If you then had a playbook to deploy a web application, you would probably
want to put all the web servers in a group called [web-servers]. This makes it easy to
target the correct set of servers when running a given playbook—remember
the hosts: line at the top of our playbook in the earlier example?
[ 36 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Groups can even be children of other groups. Thus, if you know your web servers are all
based on Linux, you could specify the web-servers group as a child of the linux-
servers group, thus including all web servers for security patching, without the need for
duplication in the inventory.
We need to make a slight modification to our earlier playbook. The first four lines should
now contain the following:
---
- name: Simple playbook
hosts: all
become: false
As you can see, we have now changed the hosts parameter
from localhost to all (all is a special keyword, meaning all hosts in the inventory,
regardless of group). If we had wanted to just specify the test group, we would have put
in hosts: test, or even hosts: testhost1, for the playbook to run only against a
single host.
Now, we know that Ansible uses SSH to connect to remote Linux hosts in the inventory
and, at this stage, we have not set up key-based SSH authentication. Thus, we need to tell
Ansible to prompt for the SSH password (by default, it does not, meaning it will fail if key-
based authentication is not set up). Similar to the SSH command-line utility, unless you tell
Ansible otherwise, it will initiate an SSH connection to the remote system, using the
username of the current session user on the local machine. Thus, in my example, the
user james exists on my Ansible server and my two test systems, and all tasks are
performed as this user. I can run the following command to run my playbook against my
two remote systems:
$ ansible-playbook -i hosts --ask-pass simple.yml
This looks a little different from the last time we ran it—note the following new parameters:
-i hosts: Tells Ansible to use the file called hosts in the current working
directory for the inventory
--ask-pass: Tells Ansible to stop and prompt for the SSH password for access
to the remote systems (it is assumed the password is the same on all systems)
simple.yml: Tells Ansible the name of the playbook to run
[ 37 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Let's see this in action, as follows: