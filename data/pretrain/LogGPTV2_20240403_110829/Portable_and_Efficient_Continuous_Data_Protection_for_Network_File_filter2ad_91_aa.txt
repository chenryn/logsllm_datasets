title:Portable and Efficient Continuous Data Protection for Network File
Servers
author:Ningning Zhu and
Tzi-cker Chiueh
Portable and Efﬁcient Continuous Data Protection for
Network File Servers
Ningning Zhu
Tzi-cker Chiueh
Computer Science Department
Stony Brook University
Abstract
Continuous data protection, which logs every update to
a ﬁle system, is an enabling technology to protect ﬁle sys-
tems against malicious attacks and/or user mistakes, be-
cause it allows each ﬁle update to be undoable. Existing
implementations of continuous data protection work either
at disk access interface or within the ﬁle system. Despite
the implementation complexity, their performance overhead
is signiﬁcant when compared with ﬁle systems that do not
support continuous data protection. Moreover, such kernel-
level ﬁle update logging implementation is complex and
cannot be easily ported to other operating systems. This
paper describes the design and implementation of four user-
level continuous data protection implementations for NFS
servers, all of which work on top of the NFS protocol and
thus can be easily ported to any operating systems that sup-
port NFS. Measurements obtained from running standard
benchmarks and real-world NFS traces on these user-level
continuous data protection systems demonstrate a surpris-
ing result: Performance of NFS servers protected by pure
user-level continuous data protection schemes is compara-
ble to that of unprotected vanilla NFS servers.
1
Introduction
Data in a ﬁle system could be lost or corrupted in the
face of natural disasters, hardware/software failures, human
mistakes or malicious attacks. While replication and mirror-
ing represent effective defenses against hardware and site
failures, they cannot protect ﬁle system data from human
mistakes, software failures and malicious attacks, against
which conventional data backup systems provide limited
protection. Advanced multi-snapshots backup systems [12]
decrease the amount of potential data loss, but still cannot
completely prevent data loss. The most effective way to
prevent these types of data losses is continuous data protec-
tion (CDP) or comprehensive versioning, which logs every
modiﬁcation to the ﬁle system and enables each ﬁle update
operation to be undoable. CDP allows a user to rollback
his ﬁle system to any point in time in the past. As per-byte
disk storage cost continues to drop precipitously and the ﬁ-
nancial penalty of data loss and system downtime increases
signiﬁcantly over time, CDP has emerged as a critical ﬁle
system feature.
The key technical challenge for CDP is how to minimize
the bandwidth and latency penalty associated with the ﬁle
update logging it requires. Because ﬁle update logs are
mainly for repair purpose, they are not expected to be ac-
cessed frequently. Therefore, it is possible to minimize the
run-time performance overhead of CDP at the expense of
increased access delay at repair time.
Previous versioning ﬁle systems [16, 11, 21] are based on
kernel-level implementation, and thus are both complex and
non-portable. Wayback [8] is a user-level versioning system
and requires only a small kernel module. All of these sys-
tems incur non-trivial performance overhead. Some com-
mercial products [3, 4] support continuous snapshotting at
the user level but are tailored to speciﬁc applications such as
Microsoft Exchange and Microsoft SQL rather than a gen-
eral CDP solution for the entire ﬁle system.
The goal of this research is to develop user-level CDP
implementations that incur minimal performance overhead
and are portable across multiple platforms. Reparable File
Service (RFS) [23] is designed to transparently augment ex-
isting NFS servers with user-level ﬁle update logging and
automatic data repair upon detection of user mistakes or
malicious attacks. RFS logs ﬁle updates in terms of NFS
commands/responses, and can inter-operate with the exist-
ing IT infrastructure without requiring any modiﬁcations.
In addition to the portability advantage, logging NFS com-
mands/responses also leads to more compact log and sim-
pler design, because one NFS operation can result in mul-
tiple inode/indirect-block/data-block updates. For example,
an NFS request create involves the following local ﬁle
system operations on the NFS server: (1) a new inode for
the created ﬁle is generated, (2) an entry for the created
ﬁle is added to the current directory, (3) the current direc-
tory ﬁle may be expanded with a new block, (4) the block
pointer of the current directory ﬁle is updated to point to the
new block, and (5) the inode of the directory ﬁle is updated
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:28 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007NFS Client
UCDP−O
NFS Client
UCDP−A
NFS Client
UCDP−I
NFS Client
UCDP−K
Bridge Device
Traffic Interceptor
Bridge Device
Traffic Interceptor
naive logger
non−overwrite
logger
NFS−Processor/
non−overwrite logger
kernel
module
NFS−Processor/
non−overwrite logger
primary image
mirror image
primary image
mirror image
NFS Server
Logging Server
NFS Server
Logging Server
file system image
Integrated Server
file system image
Integrated Server
Figure 1. Comparisonamongthesystemarchitecturesofthefouruser-levelCDPschemesstudiedinthispaper. Both
UCDP-OandUCDP-Arequirea Trafﬁc Interceptor tointerceptNFScommandsandresponses,processthemandlog
them asynchronously. They differ in how they log write requests to disk. UCDP-I integrates NFS packet processing
andﬁleupdateloggingintotheprotectedNFSserverandeliminatestheneedforaseparateloggingserver. UCDP-K
includesanin-kernelpacketinterceptionmoduletoreducecontextswitchingandmemorycopyingoverhead.
with new attributes. As a consequence, a create opera-
tion may generate multiple log records at the inode/block
level but only one NFS-level log record.
The ﬁle update logging scheme in RFS, called UCDP-
O (user-level continuous data protection using overwriting)
requires a separate logging server that contains a mirror ﬁle
system of the protected NFS server, and thus could log each
ﬁle update asynchronously to minimize the performance
impact on the protected NFS server. UCDP-O only in-
curs non-negligible performance overhead in the face of a
long burst of ﬁle write operations place. For each ﬁle write,
UCDP-O (1) reads the before-image of the written block to
compose an undo operation, (2) applies the write operation
in place to the mirror ﬁle system, and (3) ﬂushes the undo
record onto disk. The target ﬁle block is overwritten in step
(2), thus the name UCDP-O.
Although in-place update preserves on-disk data prox-
imity, it requires an expensive three-step procedure for each
ﬁle write: reading the before-image, writing the current im-
age, and writing the before-image. One way to solve this
problem is to use an append strategy to log ﬁle updates,
where a new version is written to a different disk location
than the old version. The append approach to ﬁle update
logging, while more efﬁcient, requires signiﬁcant modiﬁ-
cation to ﬁle system metadata, as is the case with existing
kernel-level versioning ﬁle systems [13, 11]. UCDP-A is
a user-level continuous data protection scheme that uses an
append approach but does not require any OS modiﬁcation.
UCDP-I improves upon UCDP-A by integrating the ﬁle
update logging functionality directly into the protected NFS
server and thus doing away with a separate logging server.
In both UCDP-O and UCDP-A, the ﬁle update logging
module only needs to process write requests, but not read re-
quests. In contrast, the logging module in UCDP-I needs to
process both read and write requests and send their replies
to NFS clients. Even though user-level ﬁle update logging
is more portable, it also incurs additional performance over-
head in the form of additional data copying and context
switch. UCDP-K improves upon UCDP-I by incorporating
kernel-level optimizations that can eliminate most of these
overheads at the expense of portability. Figure 1 compares
the system architectures used by these four CDP schemes.
A complete CDP consists of a run-time logging compo-
nent and a repair-time restoration component. Due to space
constraints, this paper mainly focuses only on the efﬁciency
of the logging component as it is the dominant factor in run-
time performance. More speciﬁcally, this work makes the
following three research contributions:
• The ﬁrst known user-level continuous data protection
system that uses an append approach to ﬁle update log-
ging and is portable across multiple platforms,
• A comprehensive comparison among four user-level
continuous data protection implementations based on
empirical measurements of their performance under
various workloads, and
• A fully operational prototype that demonstrates the
feasibility of portable and efﬁcient user-level contin-
uous data protection systems that can provide point-
in-time rollback while incurring minimal performance
overhead, and thus can be readily incorporated into
mainstream ﬁle servers.
The rest of this paper is organized as follows. Section 2 pro-
vides a comprehensive survey on previous ﬁle versioning
and continuous data protection systems. Section 3 describes
the design and implementation of the four user-level contin-
uous data protection schemes studied in this work. Section
4 presents the results of a comprehensive performance eval-
uation study of these CDP implementations and their anal-
ysis. Section 5 concludes this paper with a summary of its
major research results.
2 User-Level Continuous Data Protection
2.1 UCDP-O: Overwriting Before Image
RFS [23] uses a mirror ﬁle system that is an exact replica
of the protected ﬁle server. The mirror ﬁle system is ac-
cessed using NFS commands over a loop-back interface.
RFS’s undo log consists of a list of undo records, each of
which is essentially an NFS command, and contains all the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:28 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007necessary information to undo a ﬁle update operation, e.g.,
the before-image (or a link to it) of an updated ﬁle block.
Undo records also contain a timestamp and are kept for a
period of time called the logging window.
RFS classiﬁes update requests into three categories: ﬁle
block updates, directory updates, and ﬁle attribute updates.
To log a ﬁle block update, RFS ﬁrst reads the before-
image of the target block, updates the target block, and
then appends the before-image to the undo log. For di-
rectory updates, RFS does not need to save the old di-
rectory explicitly. For example, the undo operation for
create is remove, which RFS can directly put into the
undo log without reading any before-image. The same
holds for mkdir, rmdir, symlink, link where
the corresponding undo operations are rmdir, mkdir, and
remove, respectively. The only exception is remove,
whose undo operation depends on the object being deleted.
If the object is a hard link, the undo operation is link.
If the object is a symbolic link,
the undo operation is
symlink. If the object is a regular ﬁle, the undo opera-
tion is to create a new ﬁle, and write it to the full length;
hence the logging system needs to read the whole ﬁle and
appends the content into undo log entry. For a ﬁle attribute
update, i.e., set attribute, RFS saves the old attribute
value to the undo log and updates the attribute accordingly.
Because the NFS protocol already includes the old attribute
value in the NFS reply, RFS does not need to issue another
getattr request to get the before-image. For a ﬁle trun-
cate operation, RFS needs to read the truncated data and
write it into the undo log before truncating the ﬁle. File
block update, ﬁle truncate and regular ﬁle delete are the
most expensive NFS commands in terms of logging over-
head and thus represent promising targets for performance
optimization. Figure 3 shows the four data structures used
in UCDP-O:
• Protected ﬁle system stores the current ﬁle system im-
age, which is managed by the underlying kernel ﬁle
system.
• Mirror ﬁle system stores the mirrored ﬁle system im-
age, which is also managed by underlying kernel ﬁle
system.
• Undo log is managed by a user-level ﬁle update log-
ging daemon and consists of a list of time-stamped
undo records, each of which stores the old image nec-
essary to perform an undo operation, including old
data blocks, directory entries or and attributes.
• File handle map associates the ﬁle system objects in
the protected ﬁle system to those in the mirror ﬁle sys-
tem.
2.2 UCDP-A: Leaving Before Image In-
tact
2.2.1 Overview
UCDP-A uses a non-overwrite or append-only ﬁle update
logging strategy to reduce the three-step ﬁle update logging
procedure used in UCDP-O to one step. When a ﬁle block
is updated, UCDP-A allocates a new ﬁle block to hold the
new version, and stores a pointer to the old version in the
corresponding undo record. Unlike kernel-level versioning
ﬁle systems, which can directly modify ﬁle metadata (such
as inode) to point to the new version, UCDP-A needs to
maintain a separate user-level metadata called block map to
achieve the same purpose. Old data is kept intact during the
logging window and recycled only when the corresponding
undo record expires.
The ﬁrst version of every ﬁle block is stored in UCDP-
A’s base image, which is similar to the mirror ﬁle system
in UCDP-O. It has the same directory hierarchy and inode
attribute values (except the ﬁle length attribute) as the pro-
tected ﬁle system, but is not an exact replica of the pro-
tected ﬁle system. UCDP-A uses a separate disk block pool,
called overwrite pool, to hold the second and later versions
of each ﬁle block. Each ﬁle block in the overwrite pool
is a virtual block that is uniquely identiﬁed by a vblkno.
The pool is physically organized into multiple regular ﬁles
in the local ﬁle system. UCDP-A uses a block usage map
to keep track of the overwrite pool’s usage, and store the
obsolete time of each virtual block.
Each virtual block becomes obsolete when its associ-
ated logical ﬁle block is overwritten. Each virtual block
in the overwrite pool can be free, contain the newest ver-
sion of some ﬁle block or contain an older version of some
ﬁle block. The obsolete time of a free virtual block is 0.
The obsolete time of a virtual block containing the newest
version is inﬁnity. If a virtual block contains an older ver-
sion, its obsolete time corresponds to the timestamp of the
undo record of the ﬁle update operation that obsoletes it.
Any block with obsolete time smaller than the lower bound
of the logging window can be reused. For each block in
the base image that contains an old version, there is an en-
try in the block map of the form , which indicates that the newest ver-
sion of the block blkno of ﬁle fid is stored at the virtual
block vblkno. If vblkno is -1, it means the target ﬁle
block has been truncated.
In summary, when a logical ﬁle block is created, it is
created in the base image. When a logical ﬁle block is over-
written for the ﬁrst time, a virtual block is allocated from the
overwrite pool, and a mapping entry is added to the block
map to maintain the mapping between the logical ﬁle block
and its location in the overwrite pool. When a logical ﬁle
block is overwritten for the second time, the vblkno num-
ber currently in its block map entry is stored in an undo log
record, a new virtual block from the overwrite pool is al-
located, and the block map entry is updated with the newly
allocated block’s virtual block number.
Essentially, UCDP-A distinguishes between write-once
ﬁle blocks and overwritten ﬁle blocks. When a ﬁle con-
tains only write-once ﬁle blocks, all its blocks are stored
in the base image. However, as soon as some of them are
overwritten, they will be stored in the overwrite pool. As
a result, this design reduces the block map’s size and im-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:28 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007BASE IMAGE
DELETE POOL
1
1
    

    