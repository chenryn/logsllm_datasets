NEUTRAL. Some apps may display additional information of
the corresponding web page (see Case 2, 3, and 4 in Figure 3; we
confirm that they show the complete URL even if the URLs contain
sub-domains and additional paths) including title, domain, favicon,
and even some page content. Although such additional information
might help in a legitimate URL, it could be also misleading in other
cases. For example, a fake lock favicon is displayed in the case of
LINE in Figure 3. That said, apps in this category also display the
complete URL for inspection by end users; we therefore consider the
1We notice cases in which a subject app displays URLs in different ways in different
activities (e.g., in a chat window and in a wall/post window), in which our analysis
result is based on its worst-case categorization.
Figure 3: Examples of displayed URLs before page opening
(T1).
practice of displaying the complete URL together with additional
(potentially misleading) information as NEUTRAL.
BAD. This category refers to apps that do not display the com-
plete URL (including cases with missing HTTP/HTTPS scheme).
For example, Snapchat (Case 5) only displays the title, favicon, and
domain name (and see the lock-looking favicon). It presents an
example in which end users are given no information about the
actual security of the URL. Twitter and Quora (Case 6 and 7) have
the scheme of the URL stripped off with only the domain name left.
Weibo (Case 8) displays an identical label for every URL, which is
also BAD in failing to provide adequate information of the URL.
iOS. Most of the apps perform exactly the same on Android
and iOS in this analysis, with the exception of VK Russia whose
Android version displays only the complete URL (GOOD) while its
iOS version displays the title and domain name as well (NEUTRAL).
4.3 Usability Risks on Page Displaying
As discussed in Section 3.2, this part of the analysis focuses on
the title and address bar developers typically add to enhance the
user interface of the app. We first examine the display of URL when
WechatTwitterQuoraWeiboFacebookLINEKakaoTalk1234567Snapchat8OntheUsability(In)SecurityofIn-AppBrowsingInterfacesinMobileAppsRAID’21,October6–8,2021,SanSebastian,SpainTable1:Subjectmobileappswetestedand#oftheirAppleStoreratingsandGooglePlayinstalls.CategoryAppName#ofRatings#ofInstallsChatWeChat4,000,000+100M-500MFBMessenger1,000,000+1B-5BQQ700,000+5B-10BSnapchat300,000+1B-5BLINE200,000+500M-1BTelegram60,000+100M-500MKakaoTalk60,000+100M-500MHangouts40,000+1B-5BSocialInstagram10,000,000+1B-5BWeibo500,000+1B-5BFacebook400,000+5B-10BTwitter200,000+500M-1BTumblr200,000+100M-500MVKRussia200,000+100M-500MEmailGmail100,000+5B-10B163Mail100,000+50M-100MMail.ru100,000+50M-100MQQMail50,000+100M-500MBusinessAlipay600,000+1B-5BLinkedIn50,000+500M-1BNewsToutiao2,000,000+100M-500MReddit1,000,000+1M-50MBaidu800,000+1M-50MZhihu700,000+100M-500MQuora70,000+1M-50Mimplementation,whereeachsubjectappmakesitsowncallonthedesignandimplementation.AstheresultsonAndroidandiOSarethesameinmostsubjectapps,inthefollowingdetaileddiscussions,wewillfirstfocusonouranalysisontheAndroidplatformfollowedbyabriefcomparisonwithresultsoniOS.4.2UsabilityRisksbeforePageOpeningAsdiscussedinSection3.1,thispartoftheanalysisconcernshowtheURLisdisplayedbeforeendusersopensit.4.2.1T1:DisplayedURLsbeforepageopening.Figure3providesscreenshotsofafewrepresentativeappsonhowtheydisplayaURLbeforeendusersclickonit.Afteranalyzingthedifferenthandling,wecategorizethemintothreebuckets—Good,Neutral,andBad1.GOOD.Themostcommonway(accountsforroughly50%ofoursubjectapps)isdisplayingthecompleteURL;seeCase1inFigure3.WeconsiderthisaGOODpracticeasenduserscanseethefullURLwithoutbeingmisledbymaliciouslycraftedfaviconsortitles(seetheBADcaseslater).NEUTRAL.Someappsmaydisplayadditionalinformationofthecorrespondingwebpage(seeCase2,3,and4inFigure3;weconfirmthattheyshowthecompleteURLeveniftheURLscontainsub-domainsandadditionalpaths)includingtitle,domain,favicon,andevensomepagecontent.AlthoughsuchadditionalinformationmighthelpinalegitimateURL,itcouldbealsomisleadinginothercases.Forexample,afakelockfaviconisdisplayedinthecaseofLINEinFigure3.Thatsaid,appsinthiscategoryalsodisplaythe1WenoticecasesinwhichasubjectappdisplaysURLsindifferentwaysindifferentactivities(e.g.,inachatwindowandinawall/postwindow),inwhichouranalysisresultisbasedonitsworst-casecategorization.WechatTwitterQuoraWeiboFacebookLINEKakaoTalk1234567Snapchat8Figure3:ExamplesofdisplayedURLsbeforepageopening(T1).completeURLforinspectionbyendusers;wethereforeconsiderthepracticeofdisplayingthecompleteURLtogetherwithadditional(potentiallymisleading)informationasNEUTRAL.BAD.Thiscategoryreferstoappsthatdonotdisplaythecom-pleteURL(includingcaseswithmissingHTTP/HTTPSscheme).Forexample,Snapchat(Case5)onlydisplaysthetitle,favicon,anddomainname(andseethelock-lookingfavicon).ItpresentsanexampleinwhichendusersaregivennoinformationabouttheactualsecurityoftheURL.TwitterandQuora(Case6and7)havetheschemeoftheURLstrippedoffwithonlythedomainnameleft.Weibo(Case8)displaysanidenticallabelforeveryURL,whichisalsoBADinfailingtoprovideadequateinformationoftheURL.iOS.MostoftheappsperformexactlythesameonAndroidandiOSinthisanalysis,withtheexceptionofVKRussiawhoseAndroidversiondisplaysonlythecompleteURL(GOOD)whileitsiOSversiondisplaysthetitleanddomainnameaswell(NEUTRAL).Takeawayin§4.2:About30%ofthesubjectappsdoNOTdisplaythecompleteURL,failingtoprovidethenecessarysecurityindi-cators.Mostofthemomitthescheme(HTTPorHTTPS),whiletwoappscompletelyhidetheURLcontent.Another30%oftheapps,despiteoutputtingthefullURL,displayadditionalfavi-conortitleinformation,whichpotentiallyenablesattackerstomaliciouslycraftafakefavicon/titletomisleadendusers.4.3UsabilityRisksonPageDisplayingAsdiscussedinSection3.2,thispartoftheanalysisfocusesonthetitleandaddressbardeveloperstypicallyaddtoenhancethe390RAID ’21, October 6–8, 2021, San Sebastian, Spain
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
Table 2: Cross-platform IABI test results in terms of their usability risks in opening, displaying, and navigating a web page.
loading the web page (T2), and then test 4 types of URLs with HTTP
(T3), HTTPS (T4), SSL errors (T5), and special cases (T6 and T7).
4.3.1 T2: Displayed URLs during page opening. The importance
of proper display of URLs here is similar to that in T1, with three
notable differences. First, T2 focuses on the display of URL only
and leaves the analysis of scheme indicators to T3∼T5. Second,
web page redirection places an additional demand on the display of
URLs while pages are being opened. Third, a preview of the page no
longer adds any usability or functionality since the actual page is
now opened. Results on representative apps are shown in Figure 4.
Chrome Custom Tabs and SFSafariViewController. We first
take a look at how full-fledged browsers handle URL displays. Both
Chrome Custom Tabs (CCT) and SFSafariViewController (SF) al-
ways display the domain name in their address bars, which is con-
sidered a GOOD design. Customization of CCT allows showing or
hiding the title (using API setShowTitle(true)); see Case 1 and
2 in Figure 4). 10 of the 25 subject apps use CCT while 9 of them
use SF.
We now turn our attention to IABI with each application’s own
design and implementation without using CCT/SF. Note that not
all subject apps choose to provide their own IABI implementation;
Figure 4: Examples of displayed URLs when a page is loaded
(T2).
see column “Own IABI” in Table 2. Similar to what we did with
T1, we categorize these implementations into buckets of GOOD,
NEUTRAL, and BAD, and present our findings on the Android
RAID’21,October6–8,2021,SanSebastian,SpainZichengZhang,DaoyuanWu,LixiangLi,andDebinGaoTable2:Cross-platformIABItestresultsintermsoftheirusabilityrisksinopening,displaying,andnavigatingawebpage.CategoryAppNameCCT/SFOwnIABIBeforeopeningDetailedtestresultswhenthesubjectappusesitsownIABIDisplayingawebpageNavigatingT1:URLT2:URLT3:HTTPST4:HTTPT5:SSLT6:Lock-titleT7:Sub-domainT8:LoginCCT/SF*|**|**|*✔|✔✔|✔✔|✔✔|✔(cid:72)(cid:35)|✔✔|✔✗|(cid:72)(cid:35)ChatsWeChat✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✔|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗FBMessenger✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔✔|✔✗|✗✔|✔✗|✔✗|✔✗|✗QQ✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✔|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔Snapchat✗|✗✔|✔✗|✗✔|✔✗|✔✗|✗✔|✔✗|✗✗|✗✗|✗LINE✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔✗|✗Telegram✔|✔✗|*✔|✔-|--|--|--|--|--|--|-KakaoTalk✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔✔|✔✗|✗✔|✔✔|✔✗|✗✗|✗Hangouts✔|✔✗|*✔|✔-|--|--|--|--|--|--|-SocialInstagram✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔✗|✗✗|✗✔|✔✗|✗✗|✗✗|✗Weibo✗|✗✔|✔✗|✗✗|✗✗|✗✗|✗✔|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗Facebook✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔✔|✔✔|✔✔|✔✔|✔✗|✗✗|✗Twitter✔|✔✔|*✗|✗(o)✔|-(o)(cid:72)(cid:35)|-(o)(cid:72)(cid:35)|-(o)(cid:72)(cid:35)|-(o)(cid:72)(cid:35)|-(o)✗|-(o)✗|-Tumblr✔|✔✗|*✗|✗-|--|--|--|-(t)✔|--|--|-VKRussia✔|✔✗|*✔|(cid:72)(cid:35)-|--|--|--|--|--|--|-EmailGmail✔|✔✗|*✔|✔-|--|--|--|--|--|--|-163Mail✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✔|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗QQMail✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✔|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✔|✔Mail.ru✔|✔✗|*✔|✔-|--|--|--|--|--|--|-BusinessAlipay✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✗|✔✗|✗(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗LinkedIn✔|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)(o)✗|✔(o)✗|✗(o)✗|✗(o)✔|✔(o)✗|✗(o)(cid:72)(cid:35)|✗(o)✗|✗NewsToutiao✗|✗✔|✔✗|✗✗|✗✗|✗✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗Reddit✔|✔✔|*✔|✔(o)✔|-(o)✔|-(o)✗|-(o)✔|-(o)✔|-(o)✗|-(o)✗|-Baidu✗|✗✔|✔✔|✔✗|✗✗|✗✗|✗✔|✔(cid:72)(cid:35)|(cid:72)(cid:35)(cid:72)(cid:35)|(cid:72)(cid:35)✗|✗Zhihu✗|✗✔|✔✗|✗✗|✗✗|✗✗|✗✗|✔✗|✗✗|✗✗|✗Quora✔|✔✗|*✗|✗-|--|--|--|-(t)✔|--|--|-Column“CCT/SF”:whetherthesubjectappusesChromeCustomTabs(Android)orSFSafariViewController(iOS)toimplementIABI.Column“OwnIABI”:whetherthesubjectappusesitsownimplementationofIABI.NotethatanappcouldpresentbothCCT/SFandOwnIABIbehavior(whenthephonehasanddoesnothaveChrome/Safariinstalled,respectively).SinceSafariisinstalledbydefaultoniOS,theapp’s“ownIABI”statusisunknownwhenitalreadyhasSFimplementation.Row“CCT/SF”:analysisresultswhenusingCCT/SFtoimplementIABI.NotethatallsubjectappswillpresentthesamebehaviorwhenusingCCT/SF.Cellformat:|Symbols:✔=GoodorYes;(cid:72)(cid:35)=Neutral;✗=BadorNo;‘*’=Unknown;‘-’=SameasCCT/SF;‘(o)’=Using(o)wnIABIifnoChrome;‘(t)’=CCTwithout(t)itle.userinterfaceoftheapp.WefirstexaminethedisplayofURLwhenloadingthewebpage(T2),andthentest4typesofURLswithHTTP(T3),HTTPS(T4),SSLerrors(T5),andspecialcases(T6andT7).4.3.1T2:DisplayedURLsduringpageopening.TheimportanceofproperdisplayofURLshereissimilartothatinT1,withthreenotabledifferences.First,T2focusesonthedisplayofURLonlyandleavestheanalysisofschemeindicatorstoT3∼T5.Second,webpageredirectionplacesanadditionaldemandonthedisplayofURLswhilepagesarebeingopened.Third,apreviewofthepagenolongeraddsanyusabilityorfunctionalitysincetheactualpageisnowopened.ResultsonrepresentativeappsareshowninFigure4.ChromeCustomTabsandSFSafariViewController.Wefirsttakealookathowfull-fledgedbrowsershandleURLdisplays.BothChromeCustomTabs(CCT)andSFSafariViewController(SF)al-waysdisplaythedomainnameintheiraddressbars,whichiscon-sideredaGOODdesign.CustomizationofCCTallowsshowingorhidingthetitle(usingAPIsetShowTitle(true));seeCase1and2inFigure4).10ofthe25subjectappsuseCCTwhile9ofthemuseSF.WenowturnourattentiontoIABIwitheachapplication’sowndesignandimplementationwithoutusingCCT/SF.Notethatnot1CCT163 MailReddit(Own IABI)ToutiaoSF2345678LinkedIn(iOS)CCT(No Title)LINEFigure4:ExamplesofdisplayedURLswhenapageisloaded(T2).allsubjectappschoosetoprovidetheirownIABIimplementation;seecolumn“OwnIABI”inTable2.SimilartowhatwedidwithT1,wecategorizetheseimplementationsintobucketsofGOOD,NEUTRAL,andBAD,andpresentourfindingsontheAndroid1CCT163 MailReddit(Own IABI)ToutiaoSF2345678LinkedIn(iOS)CCT(No Title)LINE391On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Figure 6: Examples of HTTP indicators (T4).
Figure 5: Examples of HTTPS indicators (T3). ‘(Own)’ refers
to the app’s own IABI, similarly hereinafter.
platform first followed by a comparison with corresponding iOS
apps.
GOOD. We consider it a GOOD design provided that either
complete URL or its domain is displayed. A total of 8 Android apps
satisfy this requirement (e.g., Case 3 in Figure 4) out of 18 subject
apps2 that provide their own IABI implementations.
BAD. The other 10 subject apps only display the title of the web
page without the URL (or domain name), e.g., 163Mail (Case 5), or
even no title/address bar at all, e.g., Baidu, which is a BAD design
for the same reasons discussed in T1. An interesting observation is
that 9 out of these 10 subject apps are from China.
Page redirection. Web page redirection is common, and IABIs
shall always display information of the URL of the final landing page
being opened. Our evaluation shows that all the subject apps pass
this test, should they use WebView.getUrl() to directly retrieve
the URL or use the arguments of a set of hook functions within
WebViewClient (onPageStarted() and onPageFinished()).
iOS. On iOS, LinkedIn displays the title and domain name on
the address bar (Case 8), which is GOOD (as opposed to its BAD
design on the Android counterpart). Other apps have exactly the
same performance on the two mobile platforms.
4.3.2 T3: HTTPS Indicators. Apps typically provide HTTPS in-
dicators in the form of text (“https” in the URL) or a lock icon.
Screenshots of representative apps in this analysis are shown in
Figure 5.
Chrome Custom Tabs and SFSafariViewController. Both
CCT and SF use a lock icon as the indicator of HTTPS, which is
not customizable or removable by the app developers (Case 1 and 2
in Figure 5). We consider them GOOD designs.
GOOD. Similar designs can be found in own IABI implementa-
tions in three apps, Facebook (Case 3), FB Messenger and KakaoTalk
(Case 4).
2Three apps (Twitter, LinkedIn and Reddit) provide both CCT/SF and own IABI
implementations.
NEUTRAL. Some apps rely on the scheme portion of the full
URL (the text “https”) to indicate that HTTPS protocol is being used
(Case 5 and 6), which might not be very intuitive but suffice for
advanced users.
BAD. The absence of any HTTPS indicators (text or lock icon)
is a BAD design. Surprisingly, we found 12 out of the 18 subject
Android apps with their own IABI implementation falling into this
category, including Instagram developed by the Facebook company
(Facebook and FB Messenger are GOOD though).
iOS. The iOS version of Snapchat displays a lock icon in its own
IABI implementation, while its Android version does not have any
indicators. Other apps have identical behavior with respect to T2
on Android and iOS.
4.3.3 T4: HTTP Indicators. As discussed in Section 3.2, proper
indicators for HTTPS should not exempt an app from displaying
an HTTP indicator/prompt. In other words, an HTTP indicator
should always be displayed regardless of the presence or absence
of HTTPS indicators. Figure 6 shows screenshots of representative
apps in this analysis.
Chrome Custom Tabs and SFSafariViewController. CCT
uses an exclamation mark icon in place of the lock icon when the
URL does not meet TLS requirements; see Case 1 and 2 in Figure 6.
This icon is very intuitive and can give the user a clear warning.
Same as the lock icon for HTTPS, this exclamation mark icon cannot
be customized or removed by a developer. SFSafariViewController
uses the text “Not Secure” as the indicator; see Case 8. Both of them
scored GOOD in this test.
GOOD. Similar to the analysis of HTTPS indicators, a GOOD
design should always display an insecure indicator for HTTP. Un-
fortunately, Facebook is the only app scoring GOOD design in this
test (Case 3).
NEUTRAL. Displaying the complete URL with the scheme por-
tion of text “http” also serves the purpose with a less intuitive
interface, and is considered a neutral design in our analysis. LINE
and Twitter join this category (Case 4 and 5).
BAD. The absence of any HTTP indicator is considered a BAD
design, and we have 15 out of 18 apps with their own IABI im-
plementation in this category including FB Messenger. This is an
alarming finding.
CCTCCT (No Title)FacebookKakaoTalkLINETwitter (Own)Instagram163MailToutiaoSFSnapchat (iOS)1234567891011CCTCCT (No Title)FacebookFB MessengerLINEKakao TalkTwitter (Own)SFLinkedIn (iOS)123456789392RAID ’21, October 6–8, 2021, San Sebastian, Spain
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
Figure 7: Examples of displaying expired certificates (T5).
Figure 8: Examples of displaying special URLs (T6 & T7).
iOS. Similarly, Facebook is the only app with GOOD design here
with respect to HTTP indicators on iOS apps.
4.3.4 T5: Certificate Errors. As discussed in Section 3.2, an app is
supposed to inform end users upon certificate errors (with expired
or self-signed certificates, or with certificates of the wrong host).
We test all subject apps with URLs that contain such certificate
errors, and examine their corresponding prompts; see Figure 7 with
expired certificates as examples.
Chrome Custom Tabs and SFSafariViewController. Since
most layman end users do not possess the necessary technical
background to make informed decisions when they are prompted
with a certificate error, both CCT and SF (and the corresponding
full-fledged browsers) introduce “twisted” routes for end users to
proceed opening web pages with certificate errors. Cases 2 and 4
in Figure 7 show examples of the design of such “twisted” routes,
where an end user will have to choose “Advanced” or “Show Details”
before they are given the option to continue browsing. We consider
these GOOD designs with best security usability practice.
That said, both CCT and SF choose to remember such end user de-
cisions across all apps with CCT/SF implementation. In other words,
an app with CCT/SF implementation would skip the certificate
error warning if a user had chosen to proceed with browsing the
same URL on any other CCT/SF apps. Although the CCT/SF im-
plementation is generally considered GOOD, such a design choice
sacrifices security for usability.
GOOD. Here we relax the security requirement and consider
apps that either refuse to open the page or prompt end users with
various options as GOOD designs.
With such relaxation on the definition of GOOD designs, all but