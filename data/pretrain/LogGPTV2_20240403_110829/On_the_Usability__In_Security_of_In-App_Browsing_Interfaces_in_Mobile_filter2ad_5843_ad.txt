### NEUTRAL: Display of Additional Information with Complete URL

Some applications provide additional information related to the corresponding web page, such as the title, domain, favicon, and even some content (refer to Cases 2, 3, and 4 in Figure 3). Our analysis confirms that these apps display the complete URL, including sub-domains and additional paths. While this extra information can be helpful for legitimate URLs, it may also be misleading. For example, a fake lock favicon is displayed in the case of LINE (Figure 3). Despite this, these apps still show the complete URL, allowing users to inspect it. Therefore, we categorize the practice of displaying the complete URL along with potentially misleading additional information as **NEUTRAL**.

### BAD: Incomplete or Misleading URL Display

This category includes apps that do not display the complete URL, often omitting the HTTP/HTTPS scheme. For instance, Snapchat (Case 5) only shows the title, favicon, and domain name, and it displays a lock-looking favicon, which can mislead users about the security of the URL. Twitter and Quora (Cases 6 and 7) strip the URL scheme, leaving only the domain name. Weibo (Case 8) displays an identical label for every URL, which is also considered **BAD** because it fails to provide adequate information about the URL.

### iOS vs. Android: Consistency and Differences

Most apps perform similarly on both Android and iOS. However, VK Russia is an exception. Its Android version displays the complete URL (categorized as **GOOD**), while its iOS version shows the title and domain name (categorized as **NEUTRAL**).

### Usability Risks Before Page Opening

#### T1: Displayed URLs before Page Opening

Figure 3 provides screenshots of several representative apps showing how they display URLs before the user clicks on them. After analyzing different handling methods, we categorize the apps into three groups: **GOOD**, **NEUTRAL**, and **BAD**.

- **GOOD**: Approximately 50% of the apps display the complete URL (e.g., Case 1 in Figure 3). This is considered a **GOOD** practice as it allows users to see the full URL without being misled by maliciously crafted favicons or titles.
- **NEUTRAL**: Some apps display additional information such as the title, domain, favicon, and even some page content (e.g., Cases 2, 3, and 4 in Figure 3). Although this information can be useful, it can also be misleading. For example, a fake lock favicon is displayed in the case of LINE (Figure 3). These apps still show the complete URL, so we consider this practice **NEUTRAL**.
- **BAD**: Apps that do not display the complete URL, such as Snapchat (Case 5), which only shows the title, favicon, and domain name, are categorized as **BAD**. Twitter and Quora (Cases 6 and 7) strip the URL scheme, leaving only the domain name. Weibo (Case 8) displays an identical label for every URL, which is also **BAD** as it fails to provide adequate information.

### Takeaways from §4.2

- About 30% of the apps do not display the complete URL, failing to provide necessary security indicators. Most of these apps omit the HTTP/HTTPS scheme, while two completely hide the URL content.
- Another 30% of the apps, despite displaying the full URL, also show additional favicons or title information, which can enable attackers to craft fake favicons or titles to mislead users.

### Usability Risks During Page Displaying

#### T2: Displayed URLs during Page Opening

The importance of proper URL display during page opening is similar to that before page opening, with three notable differences:

1. **Focus on URL Display**: T2 focuses solely on the display of the URL and leaves the analysis of scheme indicators to T3–T5.
2. **Redirection Handling**: Web page redirection places additional demands on the display of URLs while pages are being opened.
3. **Page Preview**: A preview of the page no longer adds usability or functionality once the actual page is opened.

Results for representative apps are shown in Figure 4.

#### Chrome Custom Tabs and SFSafariViewController

Both Chrome Custom Tabs (CCT) and SFSafariViewController (SF) always display the domain name in their address bars, which is considered a **GOOD** design. CCT allows customization to show or hide the title (using `setShowTitle(true)`); see Cases 1 and 2 in Figure 4. Ten out of the 25 subject apps use CCT, while nine use SF.

For apps with their own IABI implementation, we categorize them into **GOOD**, **NEUTRAL**, and **BAD** based on the following criteria:

- **GOOD**: Displays either the complete URL or its domain. Eight Android apps satisfy this requirement (e.g., Case 3 in Figure 4).
- **BAD**: Only displays the title of the web page without the URL (or domain name), or no title/address bar at all (e.g., 163Mail, Baidu). Nine out of ten apps with **BAD** design are from China.

#### Page Redirection

Web page redirection is common, and IABIs should always display the URL of the final landing page. Our evaluation shows that all subject apps pass this test, using `WebView.getUrl()` or hook functions within `WebViewClient` (e.g., `onPageStarted()` and `onPageFinished()`).

#### iOS Comparison

On iOS, LinkedIn displays the title and domain name on the address bar (Case 8), which is **GOOD** (as opposed to its **BAD** design on Android). Other apps have the same performance on both platforms.

### HTTPS Indicators (T3)

Apps typically provide HTTPS indicators in the form of text ("https" in the URL) or a lock icon. Screenshots of representative apps are shown in Figure 5.

- **Chrome Custom Tabs and SFSafariViewController**: Both use a lock icon as the HTTPS indicator, which is not customizable or removable (Cases 1 and 2 in Figure 5). This is considered a **GOOD** design.
- **GOOD**: Similar designs are found in Facebook, FB Messenger, and KakaoTalk (Cases 3 and 4).
- **NEUTRAL**: Some apps rely on the "https" text in the URL to indicate HTTPS (Cases 5 and 6), which is less intuitive but sufficient for advanced users.
- **BAD**: The absence of any HTTPS indicators (text or lock icon) is a **BAD** design. Surprisingly, 12 out of 18 subject Android apps with their own IABI implementation fall into this category, including Instagram.

#### iOS Comparison

The iOS version of Snapchat displays a lock icon, while its Android version does not. Other apps have identical behavior on both platforms.

### HTTP Indicators (T4)

Proper indicators for HTTPS should not exempt an app from displaying an HTTP indicator. An HTTP indicator should always be displayed, regardless of the presence or absence of HTTPS indicators. Screenshots of representative apps are shown in Figure 6.

- **Chrome Custom Tabs and SFSafariViewController**: CCT uses an exclamation mark icon for non-TLS URLs (Cases 1 and 2 in Figure 6), which is very intuitive. SFSafariViewController uses the text "Not Secure" (Case 8). Both score **GOOD**.
- **GOOD**: Facebook is the only app that scores **GOOD** in this test (Case 3).
- **NEUTRAL**: LINE and Twitter display the complete URL with the "http" scheme (Cases 4 and 5), which is considered **NEUTRAL**.
- **BAD**: The absence of any HTTP indicator is **BAD**. Fifteen out of 18 apps with their own IABI implementation fall into this category, including FB Messenger.

#### iOS Comparison

Facebook is the only app with a **GOOD** design for HTTP indicators on iOS.

### Certificate Errors (T5)

An app should inform users of certificate errors (e.g., expired or self-signed certificates, wrong host). We test all subject apps with URLs containing such errors; see Figure 7 for examples with expired certificates.

- **Chrome Custom Tabs and SFSafariViewController**: Both introduce "twisted" routes for users to proceed, requiring them to choose "Advanced" or "Show Details" before continuing (Cases 2 and 4 in Figure 7). This is considered a **GOOD** design.
- **GOOD**: Apps that either refuse to open the page or prompt users with various options are considered **GOOD**. All but one app meet this criterion.

### Special URLs (T6 & T7)

Screenshots of apps displaying special URLs are shown in Figure 8. The analysis and categorization follow similar principles as described above.

### Summary

- **GOOD**: Displays complete URL or domain, provides clear HTTPS and HTTP indicators, and handles certificate errors appropriately.
- **NEUTRAL**: Displays complete URL with additional, potentially misleading information.
- **BAD**: Fails to display complete URL, lacks HTTPS and HTTP indicators, and inadequately handles certificate errors.

This structured approach ensures clarity, coherence, and professionalism in the analysis and presentation of the findings.