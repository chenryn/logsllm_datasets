### 参考文献
[17] T. Perrin 和 M. Marlinspike, “双棘轮算法,” https://signal.org/docs/specifications/doubleratchet/, 2016.

[18] M. Bellare, A. C. Singh, J. Jaeger, M. Nyayapati, 和 I. Stepanovs, “棘轮加密和密钥交换: 消息的安全性,” 在 CRYPTO 2017, 第三部分, LNCS 系列, J. Katz 和 H. Shacham 编辑, 卷 10403. Springer, 海德堡, 2017 年 8 月, 第 619-650 页.

[19] J. Jaeger 和 I. Stepanovs, “针对细粒度状态泄露的最优通道安全性: 消息的安全性,” 在 CRYPTO 2018, 第一部分, LNCS 系列, H. Shacham 和 A. Boldyreva 编辑, 卷 10991. Springer, 海德堡, 2018 年 8 月, 第 33-62 页.

[20] B. Poettering 和 P. Rössler, “迈向双向棘轮密钥交换,” 在 CRYPTO 2018, 第一部分, LNCS 系列, H. Shacham 和 A. Boldyreva 编辑, 卷 10991. Springer, 海德堡, 2018 年 8 月, 第 3-32 页.

[21] Matthew A. Weidner, “用于安全异步协作的群组消息传递,” 硕士论文, 剑桥大学, 2019 年 6 月.

[22] D. Rybski, S. V. Buldyrev, S. Havlin, F. Liljeros, 和 H. A. Makse, “人类互动活动的规模定律,” 国家科学院院刊, 卷 106, 期 31, 第 12640-12645 页, 2009. [在线]. 可访问: https://www.pnas.org/content/106/31/12640

[23] X. Gabaix, “城市中的 Zipf 定律: 一种解释,” 经济季刊, 卷 114, 期 3, 第 739-7675 页, 1999. [在线]. 可访问: https://doi.org/10.1162/003355399556133

[24] C. H. Bennett, “可逆计算的时间/空间权衡,” SIAM 计算杂志, 卷 18, 期 4, 第 766-776 页, 1989.

[25] G. Fuchsbauer, C. Kamath, K. Klein, 和 K. Pietrzak, “适应性安全代理重加密,” 在 PKC 2019, 第二部分, LNCS 系列, D. Lin 和 K. Sako 编辑, 卷 11443. Springer, 海德堡, 2019 年 4 月, 第 317-346 页.

### 附录
#### A. 符号说明
在本文档的其余部分中，我们将使用以下函数：
- `child`, `parents`, `partner`：分别表示给定节点的孩子、父母和伴侣（另一个父母）。
- `index(ID)`：返回分配给 ID 的叶子编号。
- `get_pk`, `get_sk`, `get_tainter`：分别返回给定节点的公钥、私钥和污染者 ID。
- `set_pk(vi, pki)`, `set_sk(vi, ski)`, `set_tainter(vi, ID)`：分别覆盖与 vi 关联的公钥、私钥或污染者 ID。
- `path`：恢复从用户到根节点的路径。
- `get_members()`, `get_tree()`, `get_hash()`：分别从状态中恢复成员列表、树结构或转录哈希。
- `add_party(ID, pk)`：将 ID 添加到树中最左边的空闲位置。
- `remove_party(ID)`：移除 ID。
- `update_hash(T)`：用消息 T 更新我们的转录哈希。
- `init_state(M, T, H)`：加入后初始化我们的状态。
- `update_pks_and_tainter(new_pks, ID, ID')`：更新与 ID 对应的节点的公钥，并将其污染者 ID 更改为 ID'。
- `gen-seed`：生成新的随机种子以刷新路径时生成新的密钥对。

#### B. 路径分区
在更新时，用户需要将要刷新的额外节点集（不在其路径上且有被污染祖先的节点）划分为路径，以便可以使用单个种子更新每个路径。形式上，对于用户 id，我们希望有一组路径 Pi = {vi,0, ..., vi,mi}，使得每个被污染的节点都在某个路径 Pi 中，并且满足以下条件：
- child(vi,j) = vi,j+1 对于 j < mi（Pi 是一条路径）
- vi,j ≠ vk,l 如果 i ≠ k 对于任何 j, l（每个节点只在一个路径中）
- get_tainter(vi,0) = id（每条路径的起点是被 id 污染的节点）
- ∀i, j : child(vi,mi) ≠ vj,0（路径是最大的）
- Pi ∩ Pid = ∅（路径与主路径到根节点的路径不相交）
- child(vi,mi) ∈ Pid ∨ child(vj,mj) ∈ Pi 且 i < j（分区是唯一的）
- vi,0 < vj,0 如果 i < j（路径之间存在一个总顺序）

其中 Pid 是从用户的叶子到根节点的路径，vi < vj 如果 vi 在图形表示中更靠左（任何顶点的总顺序都适用）。我们将这种有序分区记为 tainted-by(id)。前五个条件确保分区只包含要刷新的节点并且大小最小化，第六和第七个条件保证分区是唯一的。

通常需要一个共同的路径顺序，因为当我们刷新两条“相交”的路径（例如 child(vi,mi) ∈ Pj）时，“上方”路径（例如红色路径）中的节点密钥需要用“下方”路径（新蓝色节点）的新公钥加密以实现 PCS。因此，在这种情况下，蓝色路径需要在红色路径之前刷新。一般我们会从右到左刷新路径，即如果 i < j，则 Pi 将在 Pj 之后刷新。

#### 1. TTKEM 动态详细说明
在本节中，我们将提供群组操作的更详细描述，并附上伪代码。

群组操作的发起者创建一个消息 T，其中包含其他群组成员处理该操作所需的所有信息（尽管不同的成员可能只需要检索 T 的部分内容来执行更新），如果是添加操作还包括一个欢迎消息 W 用于新成员。消息 T 包含以下字段：
- Tsender - 发送者的 ID
- Top - 操作类型（移除/添加/更新）
- Tnew_seeds - 包含所有刷新节点的加密种子的密文向量
- Tnew_pks - 所有刷新节点的新公钥（从新种子派生）的向量
- TH - 哈希转录

如果操作是移除，则 Top 还会包含被移除方的 ID。同样，在添加消息中，Top 将包含被添加方的 ID 以及用于添加他的公钥。欢迎消息 W 还将包含操作类型（欢迎）和发送者 ID，但另外包括：
- Wseed - 子节点种子的加密
- WT - 当前树结构，带有公钥
- WM - 当前群组成员列表
- WH - 当前群组的哈希转录

新成员还应该被告知当前用于通信文本消息的对称纪元密钥。由于这不是严格意义上的 GCKA 的一部分，为了简单起见我们忽略了这一点。

为了刷新节点密钥，我们使用 refresh(γ, ID, T) 函数，它接受用户的本地状态、群组中的用户和消息 T。它为该用户到根节点的路径上的所有节点以及被它们污染的所有节点生成新的密钥，相应地更新 γ，并将它们的加密存储在 Tnew_seeds 中。我们使用 me 指针来引用发送协议消息的用户的身份。

我们使用 refresh-node 函数，它输入用户本地状态 γ、节点 v、种子 Δ 和消息 T。它使用 Δ 派生新的公钥和私钥并更新状态 γ 中与 v 相关的信息，并将公钥存储在 Tnew_pks 中。

```python
def refresh(γ, ID, T):
    P0 = γ.path(ID)
    {P1, ..., Pn} = γ.tainted_by(ID)  # 刷新所有从被污染节点到根节点的路径
    for i in range(n, 0, -1):
        vi,0, ..., vi,m = Pi
        {∆i,0, ..., ∆i,m} = expand(gen_seed(), m + 1)
        for p in parents(vi,0):
            if p != ⊥:
                Tnew_seeds.insert(Encγ.get_pk(p)(∆i,0))
        refresh_node(γ, vi,0, ∆i,0, T)
        for j in range(1, m + 1):
            Tnew_seeds.insert(Encγ.get_pk(γ.partner(vi,j-1))(∆i,j))
            refresh_node(γ, vi,j, ∆i,j, T)

def refresh_node(γ, v, ∆, T):
    if v == vroot:
        γ.set_sk(vroot, ∆)
    else:
        (sk, pk) = Gen(H2(∆))
        γ.set_pk(v, pk)
        γ.set_tainter(v, me)
        Tnew_pks.insert(pk)
        if v in γ.path(ID):
            γ.set_sk(v, sk)
```

图 9 显示了一个示例添加操作：(a) 显示了 Alice 添加 Frank（第 6 个节点）之前的树状态，之后变成 (b)。

```python
def add(γ, ID, pk):
    γ' = γ
    γ'.add_party(ID, pk)
    {v0, ..., vd} = γ'.path(ID)
    sk = γ'.get_sk(γ'.index(me))
    r = $; ∆ = h(sk, r)
    {∆0, ..., ∆d} = expand(∆, d + 1)
    refresh_node(γ', v0, ∆0, T)
    for i in range(1, d + 1):
        u = γ'.partner(vi-1)
        if u != ⊥:
            Tnew_seeds.insert(Encγ.get_pk(u)(∆i))
            refresh_node(γ', vi, ∆i, T)
    Top = (add, ID, pk)
    Tsender = me
    TH = γ.get_hash()
    γ'.update_hash(T)
    Wop = welcome
    Wsender = me
    Wseed = Encpk(∆)
    WT = γ'.get_tree()
    WH = γ.get_hash()
    WM = γ.get_members()
    return (γ', W, T)

def rem(γ, ID):
    req me != ID
    Top = (rem, ID)
    Tsender = me
    TH = γ.get_hash()
    γ' = γ
    refresh(γ', ID, T)
    γ'.remove_party(ID)
    γ'.update_hash(T)
    return (γ', T)

def upd(γ):
    Top = upd
    Tsender = me
    TH = γ.get_hash()
    γ' = γ
    refresh(γ', me, T)
    γ'.update_hash(T)
    return (γ', T)
```

对于我们的处理算法，我们使用 get_enc, update_path 和 proc_refresh 作为子程序。get_enc 函数输入用户本地状态 γ、节点 v0、一组路径 Pi 和从 Update/Remove 消息接收到的加密集合，并返回对应于 v0 的加密。

给定路径 P、种子 ∆ 和更新作者 ID，update_path 使用 ∆ 作为种子更新 P。

最后，proc_refresh 接受用户（me）本地状态 γ、从 Update/Remove 消息接收到的加密集合 Tnew_seeds、进行更新/被移除的用户 ID 以及执行操作的用户 sender（如果操作是移除则与 ID 不同），并更新从 me 叶子到 vroot 的路径上的所有密钥。

```python
def update_path(γ, P, ∆, ID):
    for v in P:
        if v == vroot:
            γ.set_sk(vroot, ∆)
        else:
            (sk, _) = Gen(H2(∆))
            ∆ = H1(∆)
            γ.set_sk(v, sk)

def proc_refresh(γ, Tnew_seeds, ID, sender):
    P0 = γ.path(ID)
    {P1, ..., Pn} = γ.tainted_by(ID)  # 刷新所有从被污染节点到根节点的路径
    for i in range(n, 0, -1):
        {v0, ..., vn} = intersection(Pi, γ.path(me))
        enc = get_enc(γ, v0, P0, Tnew_seeds)
        (pl, pr) = γ.parents(v0)
        if pl != ⊥ and pl in γ.path(me):
            sk = γ.get_sk(pl)
        else:
            sk = γ.get_sk(pr)
        update_path(γ, {v0, ..., vn}, Decsk(enc), sender)
```

图 11 显示了 Alice 移除 Frank（虚线）并在过程中更新他被污染的节点。旧状态再次以灰色显示。

图 10 显示了一个示例更新操作：Alice 向群组添加了 Eve，导致了一些被污染的节点（填充）。Alice 随后决定更新自己。树在更新前的状态以浅色显示。

```python
def process(γ, T):
    req TH == γ.get_hash()
    if Top == upd:
        if Top == welcome:
            γ.init_state(TM, TT, TH)
            update_path(γ, {γ.index(me), ..., vroot}, Decsk(Tseed), Tsender)
        if Top == confirm:
            γ = γ'
            γ' = 
        if Top == reject:
            γ' = 
        if Top not in {confirm, reject}:
            γ.update_hash(T)
    return (γ, key(γ))
```

授权许可限于清华大学。下载于 2022 年 2 月 25 日 12:16:47 UTC 来自 IEEE Xplore。使用受限。