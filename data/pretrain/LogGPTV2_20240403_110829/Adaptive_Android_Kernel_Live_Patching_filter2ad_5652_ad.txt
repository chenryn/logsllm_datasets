tering classiﬁes kernel functions by types and frequen-
cies of instruction opcodes; the syntax-based clustering
classiﬁes kernel functions by function calls and condi-
tional branches; and the semantic-based clustering clas-
siﬁes kernel functions according to KARMA’s seman-
tic matching results. Table 5 lists the number of clus-
ters and the percentage of kernels in the largest cluster
for each clustering method. This table shows that the
semantic-based method is the most precise one because
it has the smallest number of clusters. Technically, each
cluster may need a different adaptation of the reference
patch. Therefore, fewer clusters mean a better chance
for adaptation to succeed and less manual efforts if au-
tomated adaptation fails. Moreover, the largest clusters
in the semantic matching often contain the majority of
the vulnerable kernels. For example, a single reference
patch for the largest cluster of perf_swevent_init can
be applied to 96.3% of the vulnerable kernels.
We randomly picked some functions to manually ver-
ify the outcome of semantic matching. For example, the
source code of sock_diag_rcv_msg (the function re-
lated to CVE-2013-1763) is exactly the same in Sam-
sung Galaxy Note Edge (Android 5.0.1, Linux kernel
3.10.40) and Huawei Honor 6 Plus (Android 4.4, Linux
kernel 3.10.30) 6. However, its binaries are very dif-
ferent between these two devices because of the dif-
ferent compilers and kernel conﬁgurations. Figure 9a
and 9b show a part of the disassembly code for these
two binaries, respectively. The syntactic differences are
highlighted. There are changes to the order of instruc-
tions (BB8 on the left vs BB8’ on the right), register
5Only kernels sharing symbols are considered in the clustering.
6Both vendors have released the source code for their devices.
1262    26th USENIX Security Symposium
USENIX Association
C
s t
o
B l o
s
k
c
Kernel Function
sock_diag_rcv_msg
perf_swevent_init
fb_mmap
__get_user_1
futex_requeue
msm_isp_proc_cmd
send_write_packing_test_read
msm_cci_validate_queue
ping_unhash
q6lsm_snd_model_buf_alloc
sys_perf_event_open
kgsl_ioctl_gpumem_alloc
is_ashmem_ﬁle
CVE ID
2013-1763
2013-2094
2013-2596
2013-6282
2014-3153
2014-4321
2014-9878
2014-9890
2015-3636
2015-8940
2016-0819
2016-3842
2016-5340
C l u
e
L
e
d
o
c
% o f t h
p
O
25.0%
55.9%
20.2%
92.4%
14.8%
22.0%
57.6%
59.5%
12.5%
34.0%
36.3%
35.4%
89.6%
r s
e s t
g
o f
S
d
o
c
p
O
x
n t a
% o f t h
y
73.5%
55.9%
44.4%
92.4%
71.0%
66.5%
61.2%
84.9%
75.7%
36.6%
46.9%
88.8%
93.9%
s t e
r
a
#
7
5
7
2
9
5
4
4
5
9
6
3
2
o f
#
35
9
26
3
54
42
12
6
36
29
22
16
6
r
g
s t e
C l u
e
r s
s t e
e s t
C l u
r
a
L
e
o f
#
3
2
5
2
3
3
1
2
3
5
6
4
2
S
x
n t a
y
S
n ti c
e m a
r
a
L
% o f
75.5%
96.3%
66.9%
98.0%
99.3%
42.8%
100%
72.4%
50.5%
44.2%
84.2%
46.0%
98.1%
n
#
g
r
s t e
C l u
C l u
n ti c
r s
s t e
e m a
C l u
n ti c M a t c
S
e s t
e m a
o f I
S
72
10.5s
81
24.6s
12.2s
102
6
3.2s
459
35.8s
385
8.8s
25
4.9s
77
6.7s
4.6s
54
104
9.9s
569
34.6s
79
4.7s
0.8s
23
r
s t e
h i n
s t r
#
g
u
T i m e
s
n
c ti o
si c
a
B
o f
16
22
15
2
107
68
4
8
8
20
118
11
3
Table 5: Clustering 1,139 kernels for each function by syntax and semantics. The last-but-two column lists the time of
semantic matching to compare Nexus 5 (Android 4.4.2, kernel 3.4.0) and Samsung Note Edge (Android 6.0.1, kernel
3.10.40). The experiment was conducted on an Intel E5-2650 CPU with 16GB of memory, and the results are the
average over 10 repeats. The last two columns list the number of instructions and basic blocks for each function in
Nexus 5.
(a)
(b)
Figure 9: sock_diag_rcv_msg of (a) Huawei Honor 6 Plus (PE-TL10) with Android 4.4 and Linux kernel 3.10.30,
compiled by GCC 4.7, and (b) Samsung Galaxy Note Edge (N915R4) with Android 5.0.1 and Linux kernel 3.10.40,
compiled by GCC 4.8. Basic blocks and control ﬂows with different syntax are highlighted.
allocation (BB7 vs BB7’), instruction selection (BB2 vs
BB2’), and control ﬂow (additional BB9’ in the Sam-
sung kernel). KARMA’s semantic matching can abstract
these syntactic differences and put these two binaries of
sock_diag_rcv_msg into the same cluster. That is, both
can be patched by the same CVE-2013-1763 patch dis-
cussed in Section 2.4.
Semantic matching can also separate kernel functions
that are incorrectly classiﬁed together by the syntax
matching. For example, the control ﬂow and most in-
structions of function msm_cci_validate_queue (the
function related to CVE-2014-9890) are identical in the
USENIX Association
26th USENIX Security Symposium    1263
The rest of the control fow graph is omitted for simplicity.sock_diag_rcv_msg:MOV R12, SPSTMFD SP!, {R4-R6,R11,R12,LR,PC}SUB R11, R12, #4SUB SP, SP, #0xCLDRH R3, [R1,#4]MOV R4, R1MOV R6, R0CMP R3, #0x12BCS loc_C0D4C488loc_C0D4C478:MOV R4, #0xFFFFFFEAloc_C0D4C488:CMP R3, #0x13BHI loc_C0D4C4D4loc_C0D4C490:LDR R5, =0xC1A33F44LDR R3, [R5,#0xA4]CMP R3, #0BEQ loc_C0D4C52Cloc_C0D4C4D4:CMP R3, #0x14BNE loc_C0D4C478loc_C0D4C52C:MOV R3, #2MOV R2, #0x10STR R3, [SP,#0x24+var_24]MOV R0, #1LDR R1, =dword_C11D9904MOV R3, #4BL __request_moduleB loc_C0D4C4A0loc_C0D4C4DC:LDR R3, [R1]SUB R3, R3, #0x10CMP R3, #1BLS loc_C0D4C478loc_C0D4C4EC:LDRB R3, [R1,#0x10]CMP R3, #0x28BHI loc_C0D4C478BB 1BB 2BB 3BB 4BB 5BB 6BB 8BB 7The rest of the control fow graph is omitted forsimplicity.sock_diag_rcv_msg:STMFD SP!, {R0,R1,R4-R6,LR}MOV R5, R0LDRH R3, [R1,#4]MOV R4, R1CMP R3, #0x12BCC loc_C0A06C7Cloc_C0A06C7C:MOV R0, #0xFFFFFFEAloc_C0A06B8C:CMP R3, #0x13BLS loc_C0A06BA0loc_C0A06B94:CMP R3, #0x14BEQ loc_C0A06BECloc_C0A06BA0:LDR R3, =0xC222E584LDR R2, [R3]MOV R6, R3CMP R2, #0BNE loc_C0A06BD0loc_C0A06B9C:B loc_C0A06C7Cloc_C0A06BEC:LDR R3, [R1]SUB R3, R3, #0x10CMP R3, #1BLS loc_C0A06C7Cloc_C0A06BB4:MOV R3, #2MOV R0, #1LDR R1, =aNetPfDProtoDTyMOV R2, #0x10STR R3, [SP,#0x18+var_18]MOV R3, #4BL __request_moduleloc_C0A06BFC:LDRB R3, [R1,#0x10]CMP R3, #0x28BHI loc_C0A06C7CBB 1'BB 2'BB 4'BB 5'BB 6'BB 7'BB 8'BB 9'BB 3'The ﬁrst benchmark measures the whole system per-
formance with CF-Bench. We tested the performance
of the following four conﬁgurations: the original kernel
without any patches, the kernel with the patch for Tow-
elroot, the kernel with the patch for PingPong root, and
the kernel with both patches. The results are shown in
Fig. 11. The measured performance is virtually the same
for all four conﬁgurations. This benchmark shows that
KARMA’s kernel engine has minimal impact on the per-
formance if patches are not frequently executed.
To further quantify the overhead of KARMA, we mea-
sured the execution time of a syscall with several differ-
ent patches executed by a single Lua engine. We inserted
a hook point in the execution path of a selected syscall
(i.e., the patch was always executed for this syscall) and
measured the execution time of the syscall under the fol-
lowing conditions:
• The patch simply returns 0. This reﬂects the run-time
cost of the trampoline for function hooking. It takes
about 0.42µs to execute.
• The patch contains a set of if/elseif/else condi-
tional statements. This simulates patches that validate
input arguments. It takes about 0.98µs to execute.
• The patch consists of a single read of the kernel mem-
ory. This measures the overhead of the Lua APIs pro-
vided by KARMA. It takes about 0.82µs to execution.
• To simulate more complex patches, we created a patch
with a mixture of assignments, memory reads, and con-
ditional statements. It takes about 3.74µs to execute.
The results are shown in Figure 12.
In each test, the
syscall was invoked in a tight loop for a thousand times,
and each result is the average of 20 runs. To put this
into context, we counted all the syscalls made by Google
Chrome for Android during one minute of browsing. The
most frequently made syscall was gettimeofday for
about 110,000 times. This translates to about 0.55 sec-
onds (0.9%) of extra time even if we assume the patch
takes 5µs for each invocation.
In summary, KARMA
only incurs negligible performance overhead and per-
forms sufﬁciently well for real-world deployment.
4 Discussion and Future Work
In this section, we discuss potential improvements to
KARMA and the future work. First, KARMA aims at
protecting the Android kernel from exploits because the
kernel has a high privilege and its compromise has seri-
ous consequences on user security and privacy. An ap-
proach similar to KARMA can be applied to the Android
framework and user-space apps. In addition, Android O
formalizes the interface between the Android framework
Figure 10: Three semantically different basic blocks
of msm_cci_validate_queue in Oppo 3007 (left) and
Samsung N910G (right). They have different callees and
arguments, and thus different semantics.
kernel of Oppo 3007 (Android 4.4.4, kernel 3.10.28) and
Samsung N910G (Android 6.0.1, kernel 3.10.40). A sim-
ple syntactic matching algorithm would consider them
similar. These functions are shown in Fig. 10 (only ba-
sic blocks with different semantics are shown). However,
KARMA’s semantic matching algorithm considers basic
block A and A(cid:48), C and C(cid:48) to be different because their last
instructions call different functions with different argu-
ments. Consequently, KARMA needs to use two patches
to ﬁx this vulnerability in these devices. A further inves-
tigation shows that KARMA can actually use the same
patch for CVE-2014-9890 to ﬁx both kernels because it
only needs to validate the arguments, which are the same
for both functions.
Finally, KARMA’s semantic matching is quite efﬁ-
cient.
It simpliﬁes symbolic execution by considering
most functions remain unchanged. The last-but-two col-
umn of Table 5 lists the time used by semantic matching
to compare each listed function in two kernels. The anal-