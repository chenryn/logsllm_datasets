dominoes[j]=[c,d]等价的前提是ac且bd，或是ad且bc。
在0 0 {
result += buckets[rotatedkey]
if buckets[key]> 0{
result += buckets[key]
buckets [key]++
}else{
buckets [key]++
return result
1137.N-th TribonacciNumber
题目
The Tribonacci sequence Tn is defined as follows:
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
---
## Page 1035
Given n, return the value of Tn.
Example 1:
Input: n = 4
output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
Example 2:
Input: n = 25
output: 1389537
Constraints:
·0= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2
给你整数n，请返回第n个泰波那契数Tn的值。
提示：
●0 2 {
trib, prev, prev2 = trib+prev+prev2, trib, prev
n==
return trib
1145.BinaryTreeColoringGame
题目
aa Aeuig su yo aoou au uaai ae am aa Aeuq e uo awe paseq un e Keid safeid om
and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to
n.
Initially, the first player names a value × with 1  n 11 right > n 11 up > n
func dfsBtreeGamewinningMove(node *TreeNode, left, right *int, x int) int {
if node == nil {
return 0
1, r := dfsBtreeGamewinningMove(node.Left, 1eft, right, x),
dfsBtreeGamewinningMove(node.Right, 1eft, right, x)
if node.Val == x {
*1eft，*right = 1,r
return 1 + r + 1
1154.DayoftheYear
题目
Given a string date representing a Gregorian calendar date formatted as YYYY-MM-Do, return
the day number of the year.
Example 1:
Input: date = "2019-01-09"
output: 9
Explanation: Given date is the 9th day of the year in 2019.
Example 2:
Input: date = "2019-02-10"
Output: 41
Example 3:
Input: date = "2003-03-01"
Output: 60
Example 4:
Input: date = "2004-03-01"
Output: 61
Constraints:
date.1ength ==10
---
## Page 1040
p ae s, []ae auoe pue ‘-, == []aep == []aep
● date represents a calendar date between Jan 1st, 1900 and Dec 31, 2019.
题目大意
实现一个MajorityChecker的类，它应该具有下述几个APl：
●MajorityChecker(int[ arr)会用给定的数组arr来构造一个MajorityChecker的实例。
●int query(int left, int right, int threshold)有这么几个参数：
o0right-left+1，也就是说阅值threshold始终比子序列长度的一半还要大。
每次查询query(.)会返回在 arr[left],arr[left+1],..,arr[right]中至少出现阔值次数 threshold的元
素，如果不存在这样的元素，就返回-1。
提示：
●1 right-left +1
·查询次数最多为10000
解题思路
·给出一个时间字符串，求出这一天是这一年当中的第几天。
·简单题。依照题意处理即可。
代码
package leetcode
import "time"
func dayofyear(date string) int {
first := date[:4] + "-01-01"
firstDay, _ := time.Parse("2006-01-02", first)
dateDay, _ := time.Parse("2006-01-02", date)
duration := dateDay.Sub(firstDay)
return int(duration.Hours（）)/24 + 1
1157.OnlineMajorityElementInSubarray
---
## Page 1041
题目
Implementing the class MajorityChecker , which has the following APl:
●int query(int 1eft, int right, int thresho1d) has arguments such that:
o0  right - 1eft + 1, ie. the threshold is always a strict majority of
the length of the subarray
Each query(...) returns the element in arr[left], arr[left+1], ..., arr[right] that
occurs at least thresho1d times, or -1 if no such element exists.
Example:
MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]) ;
majori tychecker.query(o, 5,4) : // returns 1
majoritychecker.query(0,3,3) : // returns -1
majorityChecker.query(2,3,2) : / / returns 2
Constraints:
●1  right - 1eft + 1
● The number of queries is at most 10000
题目大意
实现一个MajorityChecker的类，它应该具有下述几个APl：
●MajorityChecker(int[] arr)会用给定的数组 arr 来构造—个 MajorityChecker 的实例。
●int query(int left, int right, int threshold) 有这么几个参数：
●0right-left+1，也就是说阅值threshold 始终比子序列长度的一半还要大。
每次查询query(.)会返回在 arr[left],arr[left+1],.,arr[right]中至少出现阔值次数 threshold的元
素，如果不存在这样的元素，就返回-1。
提示：
●1 right-left +1
·查询次数最多为10000
---
## Page 1042
解题思路
·设计一个数据结构，能在任意的一个区间内，查找是否存在众数，众数的定义是：该数字出现的次
数大于区间的一半。如果存在众数，一定唯一。如果在给定的区间内找不到众数，则输出-1。
这一题有一个很显眼的“暗示"，2°threshold>right-1eft+1，这个条件就是摩尔投票
算法的前提条件。摩尔投票的思想可以见第169题。这一题又要在区间内查询，所以选用线段树
这个数据结构来实现。经过分析，可以确定此题的解题思路，摩尔投票+线段树。
·摩尔投票的思想是用两个变量，candidate和count，用来记录待被投票投出去的元素，和候选人
累积没被投出去的轮数。如果候选人累积没有被投出去的轮数越多，那么最终成为众数的可能越
大。从左往右扫描整个数组，先去第一个元素为candidate，如果遇到相同的元素就累加轮数，如
果遇到不同的元素，就把candidate和不同的元素一起投出去。当轮数变成0了，再选下一个元
素作为candidate。从左扫到右，就能找到众数了。那怎么和线段树结合起来呢？
·线段树是把一个大的区间拆分成很多个小区间，那么考虑这样一个问题。每个小区间内使用摩尔投
票，最终把所有小区间合并起来再用一次摩尔投票，得到的结果和对整个区间使用一次摩尔投票的
结果是一样的么？答案是一样的。可以这样想，众数总会在一个区间内被选出来，那么其他区间的
摩尔投票都是起“中和“作用的，即两两元素一起出局。这个问题想通以后，说明摩尔投票具有可加
的性质。既然满足可加，就可以和线段树结合，因为线段树每个线段就是加起来，最终合并成大区
间的。
·举个例子，arr=[1,1,2,2,1,1]，先构造线段树，如下左图。
[0,5]
arr=[1,1,2,2,1,1]
[0,2]
[3,5]
[0,1]
[2.2][3,4]
[5,5]
[0,0]
[1,1][3,3]
[4,4]
线段树
摩尔投票
现在每个线段树的节点不是只存一个int数字了，而是存candidate和count。每个节点的
candidate和count分别代表的是该区间内摩尔投票的结果。初始化的时候，先把每个叶子都填
满，candidate是自己，count=1。即右图绿色节点。然后在pushUp的时候，进行摩尔投票
---
## Page 1043
mc.merge = func(i, j segmentItem) segmentItem {
if i.candidate == j.candidate {
return segmentItem{candidate: i.candidate, count: i.count + j.count}
if i.count > j.count {
return segmentItem{candidate: i.candidate, count: i.count - j.count}
return segmentItem{candidate: j.candidate, count: j.count - i.count}
直到根节点的candidate和count都填满。注意，这里的count并不是元素出现的总次数，而是
摩尔投票中坚持没有被投出去的轮数。当线段树构建完成以后，就可以开始查询任意区间内的众数
了，candidate即为众数。接下来还要确定众数是否满足threshold的条件。
·用一个字典记录每个元素在数组中出现位置的下标，例如上述这个例子，用map记录下标：
count=map[1:[0145]2:[23]]。由于下标在记录过程中是递增的，所以满足二分查找的条件。
利用这个字典就可以查出在任意区间内，指定元素出现的次数。例如这里要查找1在[0,5]区间内
出现的个数，那么利用2次二分查找，分别找到1owerBound和upperBound，在
[lowerBound，upperBound)区间内，都是元素1，那么区间长度即是该元素重复出现的次数，
和threshold比较，如果≥threshold说明找到了答案，否则没有找到就输出-1。
代码
package leetcode
import(
"sort"
type segmentItem struct {
candidate int
count
int
// Majoritychecker define
type MajorityChecker struct {
segmentTree []segmentItem
data
[]int
merge
func(i，j segmentItem) segmentItem
count
map[int][]int
}
// Constructorll57 define
func Constructorl157(arr []int) Majoritychecker {
data, tree, mc, count := make([]int, len(arr)), make([]segmentItem,
4*1en(arr)), MajorityChecker{}, make(map[int][]int)
//这个merge函数就是摩尔投票算法
---
## Page 1044
mc.merge = func(i, j segmentItem) segmentItem {
if i.candidate == j.candidate {
return segmentItem{candidate: i.candidate, count: i.count + j.count}
if i.count > j.count {
return segmentItem{candidate:i.candidate, count: i.count -j.count}
return segmentItem{candidate: j.candidate, count: j.count - i.count}
for i := 0;i0 {
mc.buildSegmentTree(0, 0, 1en(arr)-1)
return mc
func (mc *MajorityChecker) buildSegmentTree(treeIndex, left, right int) {
if 1eft == right {
mc.segmentTree[treeIndex] = segmentItem{candidate: mc.data[left], count:
1}
return
leftTreeIndex, rightTreeIndex := mc.1eftchild(treeIndex),
mc.rightChi1d(treeIndex)
midTreeIndex = left + (right-1eft)>>1
mc.buildSegmentTree(1eftTreeIndex, left, midTreeIndex)
mc.bui1dSegmentTree(rightTreeIndex, midTreeIndex+l, right)
mc.segmentTree[treeIndex] = mc.merge(mc.segmentTree[leftTreeIndex],
mc.segmentTree[rightTreeIndex])
func (mc *MajorityChecker) 1eftchild(index int) int {
return 2*index + 1
}
func (mc *MajorityChecker) rightchild(index int) int {
return 2*index + 2
// Query define
---
## Page 1045
func (mc *MajorityChecker) query(left, right int) segmentItem {