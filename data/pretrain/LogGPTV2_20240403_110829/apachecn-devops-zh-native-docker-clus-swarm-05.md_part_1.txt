# 五、管理 Swarm 集群
我们现在将看到如何管理一个正在运行的 Swarm 集群。我们将详细讨论诸如集群大小的缩放(添加和移除节点)、更新集群和节点信息等主题；处理节点状态(升级和降级)、故障排除和图形界面。
在本章中，我们将了解以下主题:
*   独立 DockerSwarm
*   DockerSwarm 体模式
*   集群管理
*   群体健康
*   Swarm 的图形界面
# DockerSwarm 体独立
在独立模式下，集群操作需要直接在容器内完成`swarm`。
在本章中，我们不打算详细介绍每个选项。Swarm v1 将很快被弃用，因为它已经被 Swarm Mode 宣布过时。
![Docker Swarm standalone](img/image_05_001.jpg)
管理 Docker Swarm 独立集群的命令如下:
*   创建(`c`):正如我们在[第 1 章](01.html "Chapter 1. Welcome to Docker Swarm")、*中看到的，欢迎来到 Docker Swarm* 这是我们如何生成 UUID 令牌，以防令牌机制被使用。通常，在生产中，人们使用 Consul 或 Etcd，因此该命令与生产无关。
*   List ( `l`):显示基于通过 consult 或 Etcd 迭代的集群节点列表，即 consult 或 Etcd 必须作为参数传递。
*   Join ( `j`):将运行群容器的节点加入集群。这里，我们需要在命令行传递一个发现机制。
*   管理(`m`):这是独立模式的核心。管理集群涉及更改集群属性，如过滤器、调度程序、外部证书颁发机构网址和超时。我们将在[第 6 章](06.html "Chapter 6. Deploy Real Applications on Swarm")、*在 Swarm* 上部署真实应用时，更多地讨论这些选项在 Swarm 模式中的应用。
# DockerSwarm 体模式
在本节中，我们将继续探索管理集群的群模式命令。
## 手动添加节点
您可以选择创建新的 Swarm 节点，这样 Docker 主机，无论您喜欢哪种方式。
如果使用 Docker Machine，它将很快达到极限。在列出机器时，您必须非常耐心，并等待几秒钟，让机器整体获取并打印信息。
手动添加节点的一种方法是将 Machine 与通用驱动程序一起使用；因此，将主机配置(操作系统安装、网络和安全组配置等)委托给其他东西(如 Ansible)，然后利用 Machine 以适当的方式安装 Docker。这是如何做到的:
1.  手动配置云环境(安全组、网络等)。)
2.  用第三方工具配置 Ubuntu 主机。
3.  在这些主机上运行带有通用驱动程序的机器，唯一的目标是正确安装 Docker。
4.  使用第 2 部分中的工具管理主机，甚至管理其他主机。
如果您使用 Machine 的通用驱动程序，它将选择最新稳定的 Docker 二进制文件。在写这本书的时候，为了使用 Docker 1.12，我们有时会克服这一点，给 Machine 一个选项，用`--engine-install-url`选项获得 Docker 的最新不稳定版本:
```
docker-machine create -d DRIVER --engine-install-url 
    https://test.docker.com mymachine
```
在读这本书的瞬间，对于一个制作 Swarm(模式)，1.12 会比较稳定；因此，这个技巧将不再必要，除非您需要使用一些最新的 Docker 功能。
## 管理者
在计划蜂群时，必须记住一些关于管理人员数量的考虑，正如我们在[第 4 章](04.html "Chapter 4. Creating a Production-Grade Swarm")、*中看到的创建生产级蜂群*。HA 理论建议管理者的数量必须是奇数且等于或大于 3。授予高可用性中的法定人数意味着大多数节点都同意主导操作的节点部分。
如果有两个经理，一个下去了又回来，有可能两个都被认为是领导。这导致集群组织中的逻辑崩溃，称为裂脑。
管理者越多，对失败的抵抗力就越高。请看下表。
| **经理人数** | **法定人数(多数)** | **最大可能故障** |
| three | Two | one |
| five | three | Two |
| seven | four | three |
| nine | five | four |
此外，在群集模式下，自动创建一个**入口**覆盖网络，并将其作为入口流量与节点相关联。其目的是与容器一起使用:
![Managers](img/image_05_002.jpg)
您将希望您的容器与内部覆盖(VxLAN 网状)网络相关联，以便相互通信，而不是使用公共或其他外部网络。因此，Swarm 为您创建了这个，它已经准备好使用了。
## 工人人数
您可以添加任意数量的员工。这是蜂群的弹性部分。有 5 个、15 个、200 个、2300 个或 4700 个运行工人完全没问题。这是最容易处理的部分；您可以在任何时间、任何规模上无负担地添加和删除员工。
## 脚本节点添加
如果您不打算总共添加 100 个节点，添加节点的最简单方法是使用基本脚本。
执行`docker swarm init`时，只需复制粘贴打印为输出的行即可。
![Scripted nodes addition](img/image_05_003.jpg)
然后，用一个循环创建一群工人:
```
#!/bin/bash
for i in `seq 0 9`; do
docker-machine create -d amazonec2 --engine-install-url 
    https://test.docker.com --amazonec2-instance-type "t2.large" swarm-
    worker-$i
done
```
之后，只需要遍历机器列表，`ssh`进入机器列表，`join`进入节点:
```
#!/bin/bash
SWARMWORKER="swarm-worker-"
for machine in `docker-machine ls --format {{.Name}} | grep 
    $SWARMWORKER`;
do
docker-machine ssh $machine sudo docker swarm join --token SWMTKN-
    1-5c3mlb7rqytm0nk795th0z0eocmcmt7i743ybsffad5e04yvxt-
    9m54q8xx8m1wa1g68im8srcme \
 172.31.10.250:2377
done
```
这个脚本在机器中运行，对于每个机器，名字以 s `warm-worker-`开始，它将`ssh`进入节点，并加入到现有的 Swarm 和领导者管理器中，领导者管理器是`172.31.10.250`。
### 注
详情见[https://github.com/swarm2k/swarm2k/tree/master/amazonec2](https://github.com/swarm2k/swarm2k/tree/master/amazonec2)或下载一个衬垫。
## 皮带
皮带是大规模供应 Docker 引擎的另一种变体。它基本上是一个固若金汤的 SSH 包装器，它要求您在`go`之前准备特定于提供商的映像以及供应模板。在本节中，我们将学习如何做到这一点。
你可以通过从 Github 获取它的源代码来自己编译 Belt。
```
# Set $GOPATH here
go get https://github.com/chanwit/belt
```
目前，Belt 仅支持数字海洋驱动程序。我们可以在`config.yml`中准备我们的模板进行供应。
```
digitalocean:
 image: "docker-1.12-rc4"
 region: nyc3
 ssh_key_fingerprint: "your SSH ID"
 ssh_user: root
```
然后，我们可以用几个命令创建数百个节点。
首先，我们创建三个管理主机，每个 16 GB，分别是`mg0`、`mg1`和`mg2`。
```
$ belt create 16gb mg[0:2]
 NAME      IPv4         MEMORY  REGION         IMAGE           STATUS
mg2   104.236.231.136  16384   nyc3    Ubuntu docker-1.12-rc4  active
 mg1   45.55.136.207    16384   nyc3    Ubuntu docker-1.12-rc4  active
mg0   45.55.145.205    16384   nyc3    Ubuntu docker-1.12-rc4  active
```
然后我们可以使用`status`命令等待所有节点激活:
```
$ belt status --wait active=3
STATUS  #NODES  NAMES
active      3   mg2, mg1, mg0
```
我们将对 10 个工作节点再次执行此操作:
```
$ belt create 512mb node[1:10]
$ belt status --wait active=13
```
```
STATUS  #NODES  NAMES
active      3   node10, node9, node8, node7
```
## 使用 Ansible
或者，您可以使用 Ansible(正如我喜欢的那样，它变得非常流行)来使事情更具可重复性。我们已经创建了一些可移植的模块来直接与机器和群体(模式)一起工作；它还兼容 Docker 1.12([https://github.com/fsoppelsa/ansible-swarm](https://github.com/fsoppelsa/ansible-swarm))。他们需要 Ansible 2.2+，这是 Ansible 与二进制模块兼容的第一个版本。
您需要编译模块(用`go`编写)，然后将它们传递给`ansible-playbook -M`参数。
```
git clone https://github.com/fsoppelsa/ansible-swarm
cd ansible-swarm/library
go build docker-machine.go
 go build docker_swarm.go
cd ..
```
剧本中有一些示例剧本。Ansible 的 plays 语法非常容易理解，甚至详细解释都是多余的。
我用这个剧本加入了 10 个工人到 **Swarm2k** 实验:
```
    ---    
 name: Join the Swarm2k project
 hosts: localhost
 connection: local
 gather_facts: False
#mg0 104.236.18.183
#mg1 104.236.78.154
#mg2 104.236.87.10
 tasks:
name: Load shell variables
 shell: >
 eval $(docker-machine env "{{ machine_name }}")
 echo $DOCKER_TLS_VERIFY &&
 echo $DOCKER_HOST &&
 echo $DOCKER_CERT_PATH &&
 echo $DOCKER_MACHINE_NAME
 register: worker
name: Set facts
 set_fact:
 whost: "{{ worker.stdout_lines[0] }}"
 wcert: "{{ worker.stdout_lines[1] }}"
name: Join a worker to Swarm2k
 docker_swarm:
 role: "worker"
 operation: "join"
 join_url: ["tcp://104.236.78.154:2377"]
 secret: "d0cker_swarm_2k"
 docker_url: "{{ whost }}"
 tls_path: "{{ wcert }}"
 register: swarm_result
name: Print final msg
 debug: msg="{{ swarm_result.msg }}"
```
基本上，它在从机器加载一些主机事实后调用`docker_swarm`模块:
*   操作完成`join`
*   新节点的作用是`worker`
*   新节点加入`tcp://104.236.78.154:2377`，加入时是领导经理。这个参数采用一组管理器，例如[ `tcp://104.236.78.154:2377`、`104.236.18.183:2377`、`tcp://104.236.87.10:2377` ]
*   它传递密码`(secret)`
*   它规定了一些基本的发动机连接事实，模块将使用`tlspath`的证书连接到`dockerurl`。
在库中编译`docker_swarm.go`后，将工人加入群就像:
```
#!/bin/bash
SWARMWORKER="swarm-worker-"
for machine in `docker-machine ls --format {{.Name}} | grep 
    $SWARMWORKER`;
do
ansible-playbook -M library --extra-vars "{machine_name: $machine}" 
    playbook.yaml
done