title:An Adaptive Architecture for Monitoring and Failure Analysis of High-Speed
Networks
author:Benjamin Floering and
B. Brothers and
Zbigniew Kalbarczyk and
Ravishankar K. Iyer
An Adaptive Architecture for Monitoring and Failure Analysis
of High-Speed Networks
B. Floering, B. Brothers, Z. Kalbarczyk, R. Iyer
Center for Reliable and High-Performance Computing
University of Illinois at Urbana-Champaign
1308 W. Main Street, Urbana, IL 61801.
Email: [floering, bjb, kalbar, iyer]@crhc.uiuc.edu
Abstract
This paper describes the design of a reconfigurable
device using an FPGA (field programmable gate array)
whose primary function is high-speed (several Gb/s)
network data monitoring and run-time adaptive fault
injection and statistics gathering for failure analysis. The
device is designed for two types of mediaMyrinet SAN
and Fibre Channeland failure analysis can be performed
simultaneously over both of these networks. Although the
device intercepts and retransmits signals on the network, no
impact on the data transfer rate is observed and the latency
caused by inserting the device in the network is negligible.
The fault
injection capabilities are demonstrated on a
Myrinet LAN. Fault injection experiments are conducted on
including control
data transmitted across the network,
packets
to
software-based
techniques.
inaccessible
previously
1.
Introduction
As
for
proper
critical
increasingly
systems become more
closely integrated via
distributed software layers, their physical interconnections
become
operation.
Furthermore, the bandwidth requirements of the underlying
networks are increasing due to advances in technology and
the need for more complex functionality. This, in turn, has
pushed voltage swings of high-speed signaling ever smaller.
Unfortunately, reducing voltage swings to allow for higher
transfer rates comes at the cost of decreased signal-to-noise
ratios. Therefore,
these devices have become more
susceptible to external phenomena (such as electromagnetic
fields and radiation), and the behavior of these systems
under possible fault stresses must be measured to ensure
their acceptable performance.
This paper describes a versatile device that not only
supports random fault injections, but can be configured to
inject specific types of faults into a high-speed network
environment (several Gb/s) for failure analysis. Basing the
design on an FPGA as the core structural component allows
the device to be programmed to accept configuration
commands generated either internally (i.e., by the device
itself) or by an external system. The design enables precise
synchronization of fault injection hardware with high speed
target systems – Myrinet network [1] and Fibre Channel [2]
- while running at the speed of the network. Our approach
requires that the fault injector be inserted in the data path
(i.e., in the network) to decode the data patterns, modify the
data if necessary (i.e., inject faults), and then retransmit the
data (i.e., send the corrupted/modified data to the network).
The demonstrated design achieves this goal
in tens of
nanoseconds. In many cases, this delay is of the same order
of magnitude as the propagation delay induced by the
transmission media, and can be simply modeled by a longer
cable.
Past hardware fault
injection methods have included
bombarding the integrated circuit (IC) with heavy ions [3]
and designing fixtures to insert into a socket for pin-level
fault-injection [4], [5]. While these methods are useful in
evaluating the fault tolerance of a system, some are not
synchronous with the target system, some may cause
catastrophic effects (latch-up), and all lack the ability to
intercept and retransmit data at a later time after an arbitrary
amount of data has been analyzed. The proposed injector
introduces a non-critical delay comparable to that caused by
cables, allowing previously inaccessible portions of the
system to be monitored. These include hardware-generated
control signals and hardware-generated cyclic redundancy
codes (CRC) for protecting data during transmission over
the network. Finally, the system-level impact of faults can
be evaluated in an automated fashion employing the
proposed fault
and an external
management and control
framework, such as the one
provided by the network fault-tolerance and performance
evaluator (NFTAPE) [6].
injection hardware
The described device has advantages over past fault
injection
fully
synchronize with the target system and to be transparent to
the target system (except for a small latency).
techniques
including
ability
its
to
As with any hardware injector,
there is a level of
inflexibility in applying this device to different networks.
However, the core FPGA design is general, and its use on a
different network would only require the redesign of the
network interface logic1. Within the limitations of the
printed circuit board (PCB), more than one interface can be
accommodated on the same board. For example, the current
board has interfaces for Myrinet and Fibre Channel. In this
paper we demonstrate its capabilities by running a fault
injection campaign on a Myrinet network. This campaign
1 We are currently working on a second generation device that
abstracts the interface logic away from the injector logic and allows
much more flexibility in this regard.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
makes use of the new capabilities described in this paper,
and looks at previously inaccessible control symbols and
messages at the physical layer. Using a realistic fault model
(bit errors in transmission) we examine the effect on
network performance.
2. Related work
fault
laser
Traditional hardware fault injection techniques can be
divided into several categories: pin-level, heavy ion
radiation,
supply
disturbances, electromagnetic interference (EMI), and built-
in scan chain logic. A discussion of key characteristics of
these techniques (e.g., level of intrusiveness to the target
system, necessity of physical contact with the target system)
can be found in [7].
injection (LFI), power
We further divide pin-level fault
injection into two
categories: injection at the signal-level and injection via
signal interception. While both techniques function at the
pin level, they exhibit unique capabilities, outlined below,
that are crucial when targeting high-speed signaling,
including high-speed networks.
In comparison, software-implemented fault
injection
(SWIFI) technologies mimic faulty behavior by corrupting a
wide variety of memory elements accessible to the
operating system and to applications. However signals such
as backplane traces and network cabling are often not
accessible to SWIFI. This is the area where extra hardware
becomes necessary. Consequently,
to achieve better
characterization of the fault tolerance of complex systems, it
is desirable to employ SWIFI and hardware fault injection
in tandem, each allowing the evaluation of parts of the
system that are inaccessible to the other. More detailed
discussions on various software-based techniques can be
found in [8] and [9].
Pin-level fault injection at signal level. Injection at the
signal level represents a subset of pin-level fault injection
techniques that do not partition the signal to be injected into
multiple signals. The signal to be injected is connected to
the fault injection hardware through a probe, test fixture, or
existing bus entry point (e.g., SBUS connector [10]) without
physically disconnecting the device under test (DUT) from
the system.
MESSALINE [4] applied faults (e.g., stuck-at and low-
voltage faults) to the system through multi-pin probes. A
hybrid fault/error injector developed as an extension of
FERARRI [11] is an advanced form of the signal-level fault
injection method that combines SWIFI with hardware
injection. Using FPGAs to inject faults, this approach is able
to inject transient errors (logic zero or logic one) down to 21
ns in duration (on SUN4, SPARC 1, SBUS).
With signal-level hardware fault injection, it is often
difficult to determine whether the injected fault actually
caused an error (e.g., forcing logic one on a line that was
already at logic one).
It is also difficult to synchronize the
injector with buses operating at high speeds (greater than
100 MHz). If a device is simply probing the signals on a bus
for a particular condition, by the time the condition is
detected, the faults are forced, and the fault effects are
propagated, the receiving devices may have already latched
the correct data.
Pin-level fault injection by signal interception. A second
subset of pin-level fault injection, fault injection by signal
interception actually partitions the system into separate
regions by physically inserting the fault injector into the
paths of the signal to be injected. This makes it easy to
ensure that errors are manifested on the signals being
injected, since the hardware can observe the incoming
signals before applying faults to the output. Even high-
speed signals are modifiable with this technique.
MESSALINE also demonstrated the ability to isolate the
DUT from the system by placing it in a external box where
transistor switches ensure that signals are sensed and
injected as appropriate. AFIT [12] uses a modularized
design to accomplish pin-level signal interception and can
inject faults at 40 MHZ. RIFLE [5] is a fault injector that
monitors the memory accesses of a processor and uses those
accesses to trigger pin-level faults at the processor pins.
RIFLE is capable of determining whether the injected fault
caused an error that was not discarded by the target DUT (in
this case, a processor). Faults that can be injected include
stuck-at,
inversion, bridging, and open circuit on any
combination of CPU pins.
of
The
fault
disadvantages
signal
interception lie in the inherent need to place hardware
between the DUT and the system. The delay induced by
inserting hardware in timing-critical paths may prohibit its
use in certain applications.
injection
by
a
chip.
Fault
In [13],
internals of
injection using built-in logic. Built-in logic
designed to enhance testability can be used to inject faults
into the
the Thor
microprocessor's error detection mechanisms were tested
using built-in scan chain logic employing a tool called
FIMBUL (fault
injection and monitoring using built-in
logic). Work at IBM [14] also made use of built-in fault
injection in the design of the ES/9000. Although this is the
only contact method that allows injection of internal faults,
fault models supported are limited, as most
logic
requires that the system be put into “test mode.” Therefore,
implementing stuck-at
and bridging faults may be
impossible and will at least require entering test mode or
scanning after each clock cycle.
test
Other hardware-based fault injection methods. Radiation
sources are capable of inducing single-event upsets (SEUs)
on exposed ICs and have been used to inject faults in target
systems [3], [15], [16]. This technique recreates conditions
observed in space and aerospace [17] environments by ion
strikes. However, current methods are unable to precisely
locate injected faults, or synchronize them with particular
system events. Power supply fault injection attempts to
mimic the effects of transients on the power bus of a circuit
or system [15]. Normal operation of the system is likely to
generate varying levels of current demands, and power
supply injection effectively simulates any worst-case
current demands that the system might endure. Laser fault
injection (LFI) has emerged as a preferred contactless
method of inducing SEUs in semiconductor circuits. In this
approach, the laser beam mimics the effects of heavy-ion
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
radiation [18]. The amount of energy injected can be finely
controlled, but LFI still suffers the inability to synchronize
with particular events in the target system unless the events
are speculated. This may be insufficient for analyzing large
systems whose behavior
is not deterministic (such as
NOWs) and which require non-speculative synchronization.
Each physical fault-injection technique has advantages
and disadvantages, each stemming from trade-offs in fault
controllability, intrusiveness, and the ability to mimic real-
world phenomena.
3.
Implementation of the fault injector
This section discusses fault models, architecture, and
implementation of a reconfigurable hardware device whose
primary function is to support the injection of controlled (in
time and space), synchronous faults in high-speed networks.
The purpose is network failure characterization.
3.1. Fault models realized by the design
An inherit limitation of using heavy ion radiation, laser
fault injection (LFI), and certain pin-level fault injectors is
the difficulty of synchronizing the time at which a fault is
injected with the data being tested. This is especially true
when data is being transmitted at high speeds and the
propagation delay induced by probes or fixtures is large
enough to allow several bits of data to pass. The target
networks evaluated here, Myrinet and Fibre Channel,
exhibit speeds of several Gb/s. As a result, several bytes of
data are always in transit. This data may be already received
at
injector can
determine the occurrence of the data pattern that triggers