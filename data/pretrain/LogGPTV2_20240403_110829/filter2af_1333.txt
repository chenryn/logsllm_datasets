# 前言
这个基于DOM的XSS是偶然间发现的，这一切都归功于Google Ads的customer
ID和美国的电话号码格式相同。当我打开Gmail并查看我的收件箱时，弹出如下内容
Gmail中存储型XSS是由Google ads规则触发的，为了避免上当受骗，我立即向google报告了这个事。
# 触发原理
触发有两个条件  
1：安装了Google语音扩展程序  
2：收件箱中有下列文本消息：`'444-555-4455 '`  
Google语音扩展程序可以在`accounts.google.com` 和`facebook.com.`上执行任何javascript。
我查看了Google语音扩展程序的源代码，发现在文件`contentscript.js`中，有一个名为`Wg()`的函数，正是这个函数触发了XSS。
    function Wg(a) {
        for (var b = /(^|\s)((\+1\d{10})|((\+1[ \.])?\(?\d{3}\)?[ \-\.\/]{1,3}\d{3}[ \-\.]{1,2}\d{4}))(\s|$)/m, c = document.evaluate('.//text()[normalize-space(.) != ""]', a, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null), d = 0; d ' + f + "",
                    k;
                if (k = a.parentNode && !(a.parentNode.nodeName in Og)) k = a.parentNode.className,
                    k = "string" === typeof k && k.match(/\S+/g) || [], k = !Fa(k, "gc-cs-link");
                if (k) try {
                    if (!document.evaluate('ancestor-or-self::*[@googlevoice = "nolinks"]', a, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null)
                        .snapshotLength) {
                        if (0 == a.parentNode.childElementCount) {
                            var w = a.parentNode.innerHTML,
                                y = w.replace(f, h);
                            a.parentNode.innerHTML = y
                        } else {
                            w = a.data;
                            y = w.replace(f, h);
                            var u = Qc("SPAN");
                            u.innerHTML = y;
                            h = u;
                            k = a;
                            v(null != h && null != k, "goog.dom.insertSiblingAfter expects non-null arguments");
                            k.parentNode && k.parentNode.insertBefore(h,
                                k.nextSibling);
                            Vc(a)
                        }
                        var t = Ic(document, g);
                        t && (Ug++, nc(t, "click", ma(Sg, t, f)))
                    }
                } catch (E) {}
            }
        }
    }
这个函数原理并不难，开发人员在body元素内容中查找电话号码，然后使用获取的电话号码作为其内容创建另一个span元素，这样方便用户直接在网页上直接单击拨打该电话。  
从第1行到第9行，它使用`document.evaluate`循环遍历body元素的内容,`document.evaluate`可以在HTML和XML文档中进行搜索，返回表示结果的XPathResult对象，在这里它用于测定和获取所有Body元素的内容，并选择当前节点中的所有文本节点并将其赋给变量‘a’，这里就存在一个DOM-Xpath注入：
    (var b = /(^|\s)((\+1\d{10})|((\+1[ \.])?\(?\d{3}\)?[ \-\.\/]{1,3}\d{3}[ \-\.]{1,2}\d{4}))(\s|$)/m, c = document.evaluate('.//text()[normalize-space(.) != ""]', a, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null), d = 0; d '`，
修复步骤：  
在接收器（(innerHTML, insertBefore)）上执行保存电话号码值（例如+12223334455）的变量‘f’
# Reward:
$3,133.7
    原文：http://www.missoumsai.com/google-accounts-xss.html