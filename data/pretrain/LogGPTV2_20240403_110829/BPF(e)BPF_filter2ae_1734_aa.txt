# BPF之路二(e)BPF汇编
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 原始的BPF汇编
原始的BPF又称之为class BPF(cBPF), BPF与eBPF类似于i386与amd64的关系,
最初的BPF只能用于套接字的过滤,内核源码树中`tools/bpf/bpf_asm`可以用于编写这种原始的BPF程序,
cBPF架构的基本元素如下
元素 | 描述  
---|---  
A | 32bit宽的累加器  
X | 32bit宽的X寄存器  
M[] | 16*32位宽的杂项寄存器寄存器, 又称为临时寄存器, 可寻找范围:0~15类似于一个`int32_t M[16];`的小内存  
cBPF汇编的一条指令为64字节, 在头文件``中有定义 . 如下. 这种结构被组装为一个 4
元组数组，其中包含code、jt、jf 和 k 值. jt 和 jf 是用于提供代码的跳转偏移量, k为通用值
    struct sock_filter {    /* Filter block */
            __u16   code;   /* 16位宽的操作码 */
            __u8    jt;     /* 如果条件为真时的8位宽的跳转偏移  */
            __u8    jf;     /* 如果条件为假时的8位宽的跳转偏移 */
            __u32   k;      /* 杂项参数 */
    };
对于套接字过滤，把`struct sock_filter`数组的指针通过setsockopt(2) 传递给内核。例子:
    #include 
    #include 
    #include 
    #include 
    /* ... */
    /* From the example above: tcpdump -i em1 port 22 -dd */
    struct sock_filter code[] = {
            { 0x28,  0,  0, 0x0000000c },
            { 0x15,  0,  8, 0x000086dd },
            { 0x30,  0,  0, 0x00000014 },
            { 0x15,  2,  0, 0x00000084 },
            { 0x15,  1,  0, 0x00000006 },
            { 0x15,  0, 17, 0x00000011 },
            { 0x28,  0,  0, 0x00000036 },
            { 0x15, 14,  0, 0x00000016 },
            { 0x28,  0,  0, 0x00000038 },
            { 0x15, 12, 13, 0x00000016 },
            { 0x15,  0, 12, 0x00000800 },
            { 0x30,  0,  0, 0x00000017 },
            { 0x15,  2,  0, 0x00000084 },
            { 0x15,  1,  0, 0x00000006 },
            { 0x15,  0,  8, 0x00000011 },
            { 0x28,  0,  0, 0x00000014 },
            { 0x45,  6,  0, 0x00001fff },
            { 0xb1,  0,  0, 0x0000000e },
            { 0x48,  0,  0, 0x0000000e },
            { 0x15,  2,  0, 0x00000016 },
            { 0x48,  0,  0, 0x00000010 },
            { 0x15,  0,  1, 0x00000016 },
            { 0x06,  0,  0, 0x0000ffff },
            { 0x06,  0,  0, 0x00000000 },
    };
    struct sock_fprog bpf = {
            .len = ARRAY_SIZE(code),
            .filter = code,
    };
    sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));    //建立套接字
    if (sock >= imm (logical)  
0x7f | rsh dst, src | dst >>= src (logical)  
0x87 | neg dst | dst = -dst  
0x97 | mod dst, imm | dst %= imm  
0x9f | mod dst, src | dst %= src  
0xa7 | xor dst, imm | dst ^= imm  
0xaf | xor dst, src | dst ^= src  
0xb7 | mov dst, imm | dst = imm  
0xbf | mov dst, src | dst = src  
0xc7 | arsh dst, imm | dst >>= imm (arithmetic)  
0xcf | arsh dst, src | dst >>= src (arithmetic)  
###  ALU指令:32-bit
这些操作码只使用了他们操作数的低32位, 并且用0初始化目标寄存器的高32位(操作对象是32位)
操作码 | 助记符 | 伪代码  
---|---|---  
0x04 | add32 dst, imm | dst += imm  
0x0c | add32 dst, src | dst += src  
0x14 | sub32 dst, imm | dst -= imm  
0x1c | sub32 dst, src | dst -= src  
0x24 | mul32 dst, imm | dst *= imm  
0x2c | mul32 dst, src | dst *= src  
0x34 | div32 dst, imm | dst /= imm  
0x3c | div32 dst, src | dst /= src  
0x44 | or32 dst, imm | dst  
0x4c | or32 dst, src | dst  
0x54 | and32 dst, imm | dst &= imm  
0x5c | and32 dst, src | dst &= src  
0x64 | lsh32 dst, imm | dst >= imm (logical)  
0x7c | rsh32 dst, src | dst >>= src (logical)  
0x84 | neg32 dst | dst = -dst  
0x94 | mod32 dst, imm | dst %= imm  
0x9c | mod32 dst, src | dst %= src  
0xa4 | xor32 dst, imm | dst ^= imm  
0xac | xor32 dst, src | dst ^= src  
0xb4 | mov32 dst, imm | dst = imm  
0xbc | mov32 dst, src | dst = src  
0xc4 | arsh32 dst, imm | dst >>= imm (arithmetic)  
0xcc | arsh32 dst, src | dst >>= src (arithmetic)  
###  字节交换指令
操作码 | 助记符 | 伪代码  
---|---|---  
0xd4 (imm == 16) | le16 dst | dst = htole16(dst)  
0xd4 (imm == 32) | le32 dst | dst = htole32(dst)  
0xd4 (imm == 64) | le64 dst | dst = htole64(dst)  
0xdc (imm == 16) | be16 dst | dst = htobe16(dst)  