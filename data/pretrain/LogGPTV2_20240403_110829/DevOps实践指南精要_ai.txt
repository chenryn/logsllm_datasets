需要改善环境的可⽤用
性，每次申请等待8周
改进
建⽴立集成和构建组，负责内建质量量，
⽽而不不是靠最后的测试
由⾃自动化专家和DBA进⾏行行⾃自动化环境建设
团队发现在开发和测试环境匹配的代
码，只有50%能够运⾏行行在⽣生产环境
每个环境的持续向前修复，但未同步
回版本控制库
团队仔细将不不同环境的所有变更更放⼊入
版本控制库
建设⾃自动化环境构造流程，可以重
复、正确的⽣生成环境
结果：得到正确环境的时间从8周降低到1天
反思
不不⼀一致构建的环境
变更更没有系统地同步回版本控制库
按需创建开发，测试和⽣生产环境
让开发可以在他们⾃自⼰己的⼯工作站运⾏行行类⽣生产环境，按需⾃自服务
开发⼯工程师可以更更早和持续得到⼯工作质量量的反馈
不不仅是把环境需求⽂文档化，⽽而是创建⼀一个通⽤用构建机制来构建环境
取代⼈人⼯工构建和配
置环境，要⾃自动化
拷⻉贝虚机镜像，启动在Amazon EC2
构建⾃自动化环境⽣生成流程（从基础镜像PXE安装）
基础设施即代码（Puppet, Chef, Ansible, Salt, CFEngine）
⾃自动化操作系统配置⼯工具（Solaris Jumpstart，
Red Hat Kickstart, Debian preseed）
从虚机镜像或容器器装配环境（Vagrant, Docker）
在公有云（AWS，Google App Engine, 
Microsoft Azure），私有云或PaaS（OpenStack 
or Cloud Foundry）创建新环境
为整个系统建⽴立单⼀一可信仓库
放到共享版本控制库的资产
应⽤用代码和依赖，库、静态内容等
创建数据库Schemas的脚本，应⽤用引⽤用的数据等
环境构建⼯工具和制品（AMI镜像，Puppet和Chef recipes）
所有创建容器器的镜像，Docker或Rocket定义⽂文件或composition ﬁle
所有⾃自动化测试和⼿手⼯工测试脚本
⽀支持代码打包，部署，数据库迁移，环境分配的脚本
所有项⽬目制品（需求⽂文档，部署流程，发布⽇日志等）
所有云配置⽂文件（AWS Cloudformation templates, 
Microsoft Azure Stack DSC ﬁles, OpenStack HEAT）
其他脚本或构建多个服务的基础设施所需的配置信息（企业服
务总线，数据管理理系统，DNS zone⽂文件，防⽕火墙配置等）
不不仅可以重建⽣生产环境，还需要重建
整个准⽣生产和构建流程
运维团队对版本控制的使⽤用，是IT效能最⾼高
的预测指标（不不仅是代码，还有环境配置）
让基础设施更更容易易重建⽽而不不是修复
原来对待服务器器像宠物，起名字，⽣生病之后治疗好
现在对待服务器器像牲畜，看数量量，⽣生病之后处理理掉
保证环境的⼀一致性，当进⾏行行⽣生产变更更时，这些变更更
都需要被复制到⽣生产和准⽣生产环境，以及新建环境
避免⼿手⼯工登录服务器器变更更，必须确保变更更
可⾃自动化复制，变更更要纳⼊入版本控制
可以依赖⾃自动化配置管理理系统（Puppet
等），或者新建虚拟机或容器器
不不可变基础设施
不不允许⼈人⼯工⽣生产环境变更更
唯⼀一⽅方式是将变更更纳⼊入版
本控制，重建代码和环境
为了了防⽌止⾮非受控配置差异，
禁⽌止远程登录到⽣生产服务器器
防⽌止配置漂移，雪花⽚片服务
器器，脆弱的⼈人⼯工产品
保持准⽣生产环境最新，让开发⼯工作在当前版本环境上
开发完成的标准（DoD），
包含运⾏行行在类⽣生产环境
⽬目标是确保开发和测试例例⾏行行集成代码到类⽣生
产环境，⽽而不不是迭代结束才第⼀一次⽣生产部署
在准⽣生产环境使⽤用与⽣生产环境相同的
监控，⽇日志，部署⼯工具
尽早和经常性的实践部署，降低⽣生产
环境代码发布时的部署⻛风险
10. 启⽤用快速可靠的⾃自动化测试
Case：Google Web Server 
(GWS)，2005
C++应⽤用，处理理⾸首⻚页和其他Google Web⻚页⾯面的请求
很多不不同的组都相互独⽴立的创建不不同
的搜索功能，放到GWS组，像垃圾场
有很多问题
构建和测试耗时太久
代码提交到⽣生产环境没有充分测试
团队签⼊入⼤大批量量变更更与其他团队冲突
请求结果错误或⾮非预期的缓慢，影响
数以千计的Google.com的搜索请求
解决⽅方案
建⽴立强硬要求：未完成⾃自动化测试的变更更不不被GWS接收
建⽴立持续构建
建⽴立测试覆盖率监控，确保覆盖率持续提升
编写测试规则和指导，让团队坚持
结果很吃惊
GWS快速成为公司效率最⾼高的团队
每周集成来⾃自其他团队的⼤大量量变更更的
同时维持快速发布
新成员可以快速在这个复杂系统贡献代
码，得益于⾼高测试覆盖率和代码质量量
成⽴立测试⼩小群，在接下来五年年，把⾃自
动化测试⽂文化复制到整个Google
现在的Google
每次提交触发数百数千⾃自动化测试
测试成功后⾃自动化合并⼊入主⼲干准备部署⽣生产
很多特性每⼩小时或每天构建，选择发布
“Push on Green” delivery philosophy
⼯工程师素养和⾼高度信任的⽂文化让这套机制可以运⾏行行
2013年年，⾃自动化测试和持续集成让超过4000个⼩小
团队⼀一起⼯工作，保持⽣生产率，同时开发测试部署
所有代码在单⼀一共享仓库，数⼗十亿⽂文件，持续构建
和集成，50%的代码每⽉月变更更
每天4万次代码提交，5万次构建，12万个⾃自动化
测试集，每天750万测试运⾏行行
100+⼯工程师负责测试⼯工程、持续集成、发布⼯工
程⼯工具，提升开发者效率（0.5%的RD⽐比率）
持续构建，测试和集成代码到环境
⽬目标：内建质量量到产品，即使在早期的阶
段，开发把构建⾃自动化测试作为⽇日常⼯工作
部署流⽔水线：代码签⼊入到变更更控制，
⾃自动在类⽣生产环境构建和测试
在专有环境⾃自动化构建和测试
构建和测试⼀一直运⾏行行，不不论个体⼯工程
师的⼯工作习惯
搞清楚所有依赖，避免只在开发⼈人员
笔记本上能⼯工作
打包应⽤用，可以重复安装代码和配置
不不仅把代码打包，可以选择打包到容器器中
让环境像更更像⽣生产环境，持续和可重复
部署流⽔水线可以⽤用来⾃自服务构建UAT等测试环境
⼯工具：Jenkins, ThoughtWorks Go, Concourse, Bamboo, 
Microsoft Team Foundation Server, TeamCity, Gitlab CI, as 
well as cloud-based solutions such as Travis CI and Snap
提交阶段
构建打包，单元测试
静态代码分析，重复率和覆盖率分析，⻛风格检查
以上内容，在代码被版本库接受之前（pre-commit 
hooks）要在本地IDE运⾏行行测试，提前快速反馈环
只打包⼀一次，同样的包，采⽤用
同样⽅方式部署到各个环境
持续集成实践
完整、可靠的⾃自动化测试⽤用例例集
当遇到测试失败，停下整条⽣生产线的⽂文化
开发⼯工作在主⼲干上，⼩小批量量的提交，
不不能使⽤用⻓长期存在的Feature分⽀支
构建快速和可靠的⾃自动化确认测试集
快速的⾃自动化测试，⽴立即发现和修复问题，需要确
保⼩小批量量，任何时间保持可部署状态
单元测试
测试单⼀一⽅方法、类，或隔离的功能
保持测试快速和⽆无状态，⽤用桩替代
数据库和外部依赖
验收测试
功能，⽤用户故事，接⼝口正确性
验证应⽤用是否满⾜足客户的意
思，⽽而不不是程序员（UT验证）
通过后执⾏行行⼿手⼯工测试（探索
性，UI测试）、集成测试
架构需要⽀支持模拟远端服务进⾏行行测试
集成测试
确保应⽤用与其他产品或服务交互正确
由于脆弱性，控制数量量，冒烟测试就够了了
有Deadline压⼒力力时，往往停⽌止编写单测
度量量和可视化测试覆盖率
如果低于特定⽬目标（如UT覆盖80%
的类），则让测试集失败
对时间的要求 by Martin Fowler
10分钟构建和测试，UT隔离数据库
时会运⾏行行⾮非常快
第⼆二个阶段是验收测试，连接真实数据
库和端到端⾏行行为，可能运⾏行行⼀一两⼩小时
通过⾃自动化测试尽量量早发现问题
如果发现测试困难或成本很⾼高，要考虑
架构是否紧耦合，模块不不能独⽴立测试
确保测试快速运⾏行行（必要的话并⾏行行）
如安全测试和性能测试并⾏行行
使⽤用最新的构建测试，⽽而不不
是等待开发给⼀一个特定版本
测试驱动开发
TDD or ATDD
研究表明，使⽤用TDD，缺陷密度要好
60%~90%，多花15%~35%的时间
变更更开始，先写测试，再写代码
为想要新增的功能写测试，测试是失败的
写功能代码直到测试通过
重构新代码和⽼老老代码，让测试通过
⾃自动化尽可能多的⼿手⼯工测试
不不稳定的测试会带来额外的成本
少量量可靠的⾃自动化测试，好过⼤大量量不不稳定或⼿手⼯工的测试
从少量量稳定的⾃自动化测试开始，逐步增加
集成性能测试到测试集
⽬目标是编写和运⾏行行⾃自动化性能测试跨越整个应⽤用栈（代码，
数据库，存储，⽹网络，虚拟化），作为部署流⽔水线的⼀一部分
通过与验收测试并⾏行行，性能测试可以做背景压⼒力力
记录性能结果偏离度，⽐比如与之前测试结果相差2%以上
集成⾮非功能需求测试到测试集
可⽤用性、可扩展性、容量量、安全性等
当部署流⽔水线破坏时触发安灯拉绳
当某⼈人引⼊入的变更更导致构建或⾃自动化测试失
败，新⼯工作不不允许进⼊入系统，直到问题解决
如果流⽔水线破坏，⾄至少通知整个团
队，这样可以修复问题或回滚
可以配置版本控制系统防⽌止进⼀一步的代码提交，
直到第⼀一个阶段（构建和单测）回到绿⾊色状态
团队⽬目标⼤大于个体⽬目标，帮助个⼈人就
是帮助整个团队