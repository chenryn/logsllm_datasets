# Constants Count: Practical Improvements to Oblivious RAM

**Authors:**
- Ling Ren, Massachusetts Institute of Technology (MIT)
- Christopher Fletcher, MIT
- Albert Kwon, MIT
- Emil Stefanov, University of California, Berkeley
- Elaine Shi, Cornell University
- Marten van Dijk, University of Connecticut
- Srinivas Devadas, MIT

**Conference:**
- 24th USENIX Security Symposium
- August 12–14, 2015, Washington, D.C.
- ISBN: 978-1-939133-11-3
- [Proceedings](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/ren-ling)

## Abstract

Oblivious RAM (ORAM) is a cryptographic primitive that hides memory access patterns from untrusted storage. This paper introduces Ring ORAM, the most bandwidth-efficient ORAM scheme for small client storage in both theory and practice. Ring ORAM is the first tree-based ORAM whose bandwidth is independent of the ORAM bucket size, enabling multiple performance improvements.

First, Ring ORAM's overall bandwidth is 2.3× to 4× better than Path ORAM, the prior state-of-the-art for small client storage. Second, if the server can perform simple untrusted computations, Ring ORAM achieves constant online bandwidth, which is approximately 60× more efficient than Path ORAM for practical parameters. As a case study, we demonstrate that Ring ORAM speeds up program completion time in a secure processor by 1.5× compared to Path ORAM. On the theoretical side, Ring ORAM offers a tighter and significantly simpler analysis than Path ORAM.

## 1. Introduction

With the increasing popularity of cloud computing and storage, the privacy of users' sensitive data has become a significant concern. Encryption alone is insufficient to ensure data privacy, as a malicious server can still infer access patterns, such as the frequency and sequence of data accesses. Prior research has shown that these access patterns can reveal substantial information about encrypted files or private user data in computation outsourcing [14, 32, 18].

Oblivious RAM (ORAM) is a cryptographic primitive designed to eliminate information leakage in memory access traces. In an ORAM scheme, a client (e.g., a local machine) accesses data blocks on a server, ensuring that for any two logical access sequences of the same length, the observable communications between the client and the server are computationally indistinguishable.

ORAMs are typically evaluated based on three metrics:
- **Bandwidth**: The number of blocks transferred between the client and the server to access one block.
- **Client Storage**: The amount of trusted local memory required at the client side.
- **Server Storage**: The amount of untrusted memory required at the server side.

These metrics are functions of \( N \), the total number of data blocks in the ORAM.

The choice of ORAM scheme depends on whether the client has large (GigaBytes or larger) or small (KiloBytes to MegaBytes) storage. For large client storage, the preferred ORAM scheme is the SSS construction [25], which has a bandwidth of approximately \( 1 \cdot \log N \) and requires GigaBytes of client storage.

In scenarios with small client storage, such as mobile phones or remote secure processors, Path ORAM [27] is typically used, as it allows for small (typically KiloBytes of) client storage. All secure processor proposals [18, 16, 8, 31, 22, 7, 5, 6] have adopted Path ORAM for this reason.

This paper focuses on the small client storage setting and proposes improvements to Path ORAM. However, in Section 7, we show that our techniques can be extended to achieve competitive performance in the large client storage setting.

### 1.2 Our Contributions

We propose Ring ORAM to address the challenges of high bandwidth and small client storage. The key technical achievements of Ring ORAM include:

- **Small Online Bandwidth**: Ring ORAM is the first tree-based ORAM scheme to achieve approximately 1 online bandwidth, relying on simple, untrusted computation logic on the server side. This represents at least a 60× improvement over Path ORAM for reasonable parameters.
- **Bucket-Size Independent Overall Bandwidth**: Unlike other tree-based ORAMs, Ring ORAM eliminates the dependence of overall bandwidth on the bucket size, improving it by 2.3× to 4× relative to Path ORAM.
- **Simple and Tight Theoretical Analysis**: We provide a much simpler and tighter theoretical analysis of Ring ORAM compared to Path ORAM. Additionally, we rigorously prove Lemma 1 from [27], which was previously incomplete but correct.

In the secure processor setting, simulations confirm that Ring ORAM improves program completion time by 1.5× over Path ORAM. Combined with other known techniques, the average program slowdown from using an ORAM is 2.4× over a set of SPEC and database benchmarks.

### 1.3 Overview of Techniques

Ring ORAM follows the tree-based ORAM paradigm, where server storage is organized as a binary tree, and each node (bucket) contains up to \( Z \) blocks. Blocks percolate down the tree during ORAM evictions. We introduce several non-trivial techniques to achieve significant savings in both online and overall bandwidth costs.

#### Eliminating Online Bandwidth Dependence on Bucket Size

In Path ORAM, reading a block involves reading and writing all \( Z \) slots in all buckets on a path. To reduce this, we randomly permute each bucket and store the permutation as metadata. By reading only the metadata, the client can determine if the requested block is in the current bucket. If so, the client uses the stored permutation to read the block from its random offset. Otherwise, the client reads a "fresh" dummy block from a random offset. The metadata size is typically much smaller than the block size, making the cost of reading metadata negligible.

To ensure security, each block in a bucket should be read at most once. Real blocks are naturally read only once, as they are invalidated and relocated after being read. Dummy blocks can be exhausted if a bucket is read many times. When this happens, Ring ORAM triggers an early reshuffle procedure to reshuffle buckets that have been read too many times. Specifically, if each bucket is guaranteed to have \( S \) dummy blocks, a bucket must be reshuffled every \( S \) times it is read.

This technique also ensures that out of the \( O(\log N) \) blocks the client reads, only one is a real block, and the rest are dummy blocks. If the server can perform simple computations, the XOR trick from Burst ORAM [3] can be applied to achieve \( O(1) \) online bandwidth. The server XORs the encrypted blocks and sends a single, XOR'ed block to the client, who can reconstruct the ciphertext of all dummy blocks and XOR them away to get the real block.

#### Eliminating Overall Bandwidth Dependence on Bucket Size

Naively applying the above strategy would increase offline and overall bandwidth. Reserving more dummy slots in each bucket increases the cost of ORAM evictions, while reserving too few leads to frequent reshuffles, also increasing overall bandwidth.

To solve this, we design a new eviction procedure that improves eviction quality. Ring ORAM performs evictions on a path in a similar fashion to Path ORAM, but selects eviction paths based on a reverse lexicographical order [9], which evenly spreads eviction paths over the entire tree. This improved eviction quality allows us to perform evictions less frequently, only once every \( A \) ORAM accesses, where \( A \) is a new parameter. We develop a proof showing that \( A \) can approach \( 2Z \) while ensuring negligible ORAM failure probability.

## 2. Formal Security Definition for ORAM

[Details of the formal security definition for ORAM]

## 3. Ring ORAM Protocol

[Detailed explanation of the Ring ORAM protocol]

## 4. Client Storage Analysis

[Formal analysis for bounding Ring ORAM’s client storage]

## 5. Bandwidth Analysis and Parameter Optimization

[Analysis of Ring ORAM’s bandwidth and methodology for setting parameters optimally]

## 6. Comparison with Prior Work

[Comparison of Ring ORAM to prior work in terms of bandwidth vs. client storage and performance in a secure processor setting]

## 7. Extension to Large Client Storage

[Description of how to extend Ring ORAM to the large client storage setting]

## 8. Related Work

[Overview of related work]

## 9. Conclusion

[Conclusion and future work]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the paper.