: 10
4194304 -> 8388607
: 2
[21:50: 04]
[..-]
This instruments the return of the __tcp_select_window() kernel function and summarizes the
return value as a power-of-2 histogram (H). By default, argdlist(8) prints this summary once
per second. The histogram shows the zero-sized window isue in the *0 -> 1* line: for the above
interval, a count of 610o. We were able to use this tool to confirm whether the issue was still
present while we madle changes to the system to rectify it.
4.8.1 argdist Syntax
The arguments to argdist(8) set the type of summary, the events to instrument, and the data to
summarize
axgdist[-C|H|[opt1ona]probe
:H o 2- ata saunba1 (g)asp81e
 C: Frequency count
•B: Power-of-two histogram
The syntax for probe is:
---
## Page 149
112
2 Chapter 4 BCC
eventname and signature have almost the same syntax as the trace(8) command, with the
exception that the kernel function name shortcut is not available. Instead, the kernel vfs_read()
parnbau Aensn st angeu8ts au1 °,pea"spA, 1uo ou s pue *,peausa:d, ea paoe s uootng
If it is left blank, empty parentheses (°O°) are required.
type shows the value type that will be summarizedl: u32 for unsigned 32-bit integers, u64 for
unsigned 64-bit integers, and so on. Many types are supported, including “char ** for strings
uodae e so uoong au og suaunie ue aq eu i azueuns o uoissandxa ue st adxa
argument. There are also special variables that can only be used in return probes:
• $retva1: The return value of the function
 $1ateney: The time from the entry to the return, in nanoseconds
• $entzy (param) : The value of param dluring the entry probe
filter is an optional Boolean expression to filter events added to the summary. Boolean operator?
supported include ==, I=, 
label is an optional setting to add label text to the output so that it can be self-documenting
4.8.2 argdist One-Liners
Many one-liners are listed in the usage message Here is a selection with additional one-liners
Print a histogram of results (sizes) returned by the kernel function vfs_read():
argdist,py -B 'riivfs_read(1*
Print a histogram of results (sizes) returned by the user-level libc read() for PID 1005:
,(1peox:511, H-500T d-48Tp63e
Count syscalls by syscall ID, using the raw_syscalls:sys_enter tracepoint:
Count tcp_sendmsg0 size:
argdist -C 'piitcp_sendnsg(struet sock *sk, struet msghdr *nsg, size_t size):u32:size*
Summarize tcp_sendmsg() size as a power-of-two histogram:
argdist -H'pi:top_sendmsg(struct sock *ak, struct msghdr *msg, size_t size):u32:size
Count the libc write() call for PID 181 by file descriptor:
Print frequency of reads by process where the latency was >0.1ms:
argdist -C 'r11__vfs_read() :u32:$P1D:$latency > 100000
---
## Page 150
4.8argdist
113
4.8.3 argdist Usage
There is more to arglist(8) than shown so far, as summarized by the usage message:
+ argdist.py -h
usage: axgdist,py [h] [-p PID] [=z STRING_SI2E] [1 INTERVAL] [d DORATION]
[n Cour] [v] [-c] [T rop] [H aspecifier] [C specifier]
[I header]
Trace a function
*sentes zeqeuexed siT Jo &xeuns e &erdstp pue
optional azguments:
-h, --help
shov this help nessage and exit
-p PID, --pid PID
Ld of the pzocess to trace (optlonal)
=z STRING_SIZE,
--string-size STRING_SIZE
naxinun string slze to read fron chaz* argunents
-1INTERVAL,
--interval INTERVAL
output Intezval, In seconds (default 1 second)
-d DURATI0N,
--duration DURAT10N
total duration of trace, In seconds
sindno to zequmg
-V,
 --verbose
print resulting BPF progran code before executing
-C,
-=cumulatlve
do not cleaz histograns and freq counts at each
-7 roP, --top 70P
interva]
numbee of top zesults to shov (not applicable to
histograes1
-H specifler,
-histogram speciflex
probe specifier to capture histogran of (see exanples
be1ov)
-C specifier,
unt specifier
probe specifler to captuze count of (see exanples
be1ov)
-I header,
additional header fLles to include in the BFF program
as eithez full path, or zelative to zelative to
current xorking directory, or relative to default
keznel header search path
Probe specifler syntax:
(p I, t,u): ( [library] category) :funetioo (signature)
[: type I type..* I:expx[ expz...1 I:$1te]1[#1abe1]
---
## Page 151
114
Chapter 4 BCC
Mhere:
P, t,u
tracepoint, or UsDT probe
In exlt probes: can use $retval, $entry(paran), $latency
J3IqTT
-- the library that contains the function
[leave enpty for kernel functions)
category
-- the category of the kerne] tracepoint (e-g. net, sched)
funct.ion
== the function nane to trace (oz tracepoint nane]
signature
-- the function*s paraneters, as in the C header
type
-- the type of the expresslon to collect (supports multiple)
expI
-- the expression to collect (supports multiple)
filtec
-- the f1lter that ia applled to collected values
1abe1
- the label for this probe in the resulting output
EXAMPLES1
,azα:p9n: (a2α gn. ooteux::d, H- ap63e
Print a histogran of allocation sizes passed to kmallcc
9==ezts:ezre:ezts: (ezts 1ezrs)ootteuo:d, 3- s00t d stpbxe
Print a frequency count of hov nany tines process 1005 called nalloc
seq.q 9t 1o e2rs uotaeotte ve uat8
sbutxxs pedoous#tesexg(xeuo) :,xeqo: () se6:o:x, 0- 1stpbxe
Snoop on all stcings returned by gets()
argdist -H *ri1_kna1loc (size_t size) :u64:$latency/$entry (size) fn& per byte*
Print a hlstogran of nanoseconds per byte fron knalloc allocatlons
azgdist -C *p::_nalloc (size_t s2, gfp_t flags)1size_t:sz:flagssGFP_AroIC
Frint frequency count of knalloc allocation sizes that have GFP_AToMIC
[.--]
argdlist(8) allows you to create many powerful one-liners. For distribution summaries that are
beyond its capabilities, see Chapter 5.
4.9ToolDocumentation
Every BCC tool has a man page and an examples file. The BCC /examples directory has some code
samples that behave like tools, but these are not documented outside of their own code. Tools
that you find in the /tools directory or that are installed elsewhere on your system when using a
distribution package should be documented.
The following section dliscusses tool documentation with opensnoop(8) as an example.
---
## Page 152
4.9 Tool Documentation 115
4.9.1Man Page:opensnoop
If your tools are installed via a package, you may find that the nan open.snoop command works.
If you are looking at the repository, the nroff(1) command can be used to format the man pages
(which are in ROFF format).
The structure of the man pages is based on those of other Linux utilities. Over the years I have
refined my approach to man page content, with attention to certain details.° The following man
page includes my explanations and advice:
Dcc5 nzoff -nan man/nan8/opensnoop 8
(8) doousuedo
Systen Manager′s Manual
[8) doousuedo
IAME
opensnoop - Trace open () syscalls. Uses Linux eBPF/bcc,
SYHOPSIS
opensnoop-Py [h] [-T] [-U]  [x] [=p PID] [t TID][-u OID]
[-d DURATIOM]  [-n KAME]  [-e]  [-f FLAG_FILTER]
DESCRIFTION
opensnoop traces the open()  syscall,  shoving which processes aze
attenpting to open which files. This can be useful for deternining the
locatlon of config and log flles, or foz tzoubleshooting appllcatlons
that are failing, especially on startup-
Th.is vorks by tracing the  kernel  sys_open()  function using dynanic
·uoTaoung sTus o sebuevo fue qoxeu o1 futaepdn peeu TtT8 pue r6uroexs
This makes use of a Linux 4.5 feature (bpf_pexf_event_output (ll; for
kernels older than 4.5, see the version under tools/old, shich uses
SD
older mechanisn.
Since this uses BPf, only the root user can use this tool.
[...]
This man page is in Section 8 because it is a system administration command that requires root
privileges, as I state at the end of the DESCRIPTION section. In the future, extended BPF may
become available to non-root users, just as the perf(1) command is. If that happens, these man
pages will be moved to Section 1.
6 've written and published more than 200 man pnges for the performance tools Ive develpec
---
## Page 153
116
Chapter 4 BCC
The NAME includes a one-sentence description of the tool. It states that it is for Linux and uses
eBPF/BCC (because I’ve developed multiple versions of these tools for different operating systems
and tracers).
The SYNOPSIS summarizes the command line usage.
The DESCRIPTION summarizes what the tool does and why it is useful. It is essential to describe
why the tool is useful, in simple termsin other words, to tell what real-world problems it solves
(which may not be obvious to everyone). Providing this information helps ensure that the tool is
useful enough to publish. Sometimes I’ve struggled to write this section, making me realize that
the particular tool has a use case too narrow for the tool to be worth publishing.
The DESCRIPTION section should also point out major caveats. It is better to warn users of an
issue than to let them discover it the hard way. This example includes a standard warning about
dynamic tracing stability and required kernel versions.
Continuing:
REQUTREXENTS
OPTI0NS
-hi
Print usage message.
T
Include a timestanp column.
[...]
The REQUIREMENTS section lists anything special, and an OPTIONS section lists every command
line option:
EXANPLES
1s[eosα (luado T[e ao9x
dooususdo #
Trace al1 open I1 syscalls, fox 10 seconds only:
OT p- doousuado
[...]
EXAMPLES explain the tool and its various capabilities by showing how it can be executed in
dlifferent ways. This may be the most useful section of the man page.
FIELDS
TIME (s)
Tlne of the call, in seconds,
In
Usex ID
---
## Page 154
4.9Tool Documentation 117
PID
Process ID
TID
Thread ID
COMK
Process nane
 FD
File descriptor (if success), or -1 (if failed)
ERR
Error nunber (see the systen′s errno.h]
[.--]
FIELDS explains every field that the tool can output. If a field has units, it should be included in
the man page. This example spells out that *TIME(s) is in seconds.
This traces the kernel open functlon and prints output fox each  event.
Asthe rate of this is generally expected to be lov (
70 /sys/kernel/debug/tracing/trace_pipe
1576
snnpd
9 0 /pzoc/net/dev
1576
snnpd
7r
 0/proc/net/if_inet6
1576
snnpd
11 0 /pzoc/sys/net/ipv4/nelgh/etho/zetzans_tine_ns
[.] 
Khile tracing, the snnpd process opened various /proc files (reading metrics),
and a “zun" pzocess read various libxazles and config flles (looks 1ike 1t
vss starting up: a nev process) 
opensnoop can be useful for discovering configuration and log files, if used
during appllcatlon startup.
The -p option can be used to filter on a PID, vhich is filtered in-kernel. Here
I've used it xith -7 to print timestanps:
---
## Page 156
4.10 Developing BCC Tools
119
/opensnoop -Tp 1956
TIME (s)
PID
COMH
FD ERR PATH
0, 000000000
1956
supervise
0supervise/status,nev
0 , 0002 89999
956T
supervl.se
0supervise/status ,new
1, 0230 68000
1956
supervise
0 supervise/status.nev
1, 023381997
956T
supervi.se
0 supezvise/status,nev
2 , 046030000
1956
supervi.se
0 supervise/status.nev
2 , 046363000
1956
superv1.se
6
0 supezvise/atatus ,nev
3,068203997
1956
supervise
6
0supervise/ststus,nev
3,068544999
1956
superv1.se
neu* snaeae/eetazedns 0
second.
[..-]
The tool output is explained in the examples file, especially in the first example.
te # inq ‘uepumpau tuaas u8u 1I alessau afesn atq jo doo e s afg saduexa ue po pua at V
be useful for browsing online. Examples files do not typically show every option in use, so ending
with the usage message shows what else the tool can do.
4.10DevelopingBCCTools
Since most readers may prefer to program in the higher-level bpftrace language, this book
focuses on bpftrace for tool development and uses BCC as a source of prewritten tools. BCC tool
development is covered in Appendix C, as optional material.
xaduo Sumq rog pas s  aoedq jo qeeae a ua g u soo doasap u
tools with various command line arguments and options, and with fully customized output and
actions. For example, a BCC tool can use networking libraries to send event data to a message
server or database. In comparison, bpftrace is well suited for one-liners or short tools that accept
no arguments or a single argument, and print text output only.
BCC also allows a lower level of control for BPF programs written in C, and for user-level
components written in Python or one of the other supported languages. This comes at the cost of
some complexity: BCC tools can take 10 times as long to develop as bpftrace tools, and they can
include 10 times as many lines of code.
Whether you code in BCC or bpftrace, it’s usually possible to port the core functionality from one
to the otheronce you've decided what that functionality should be. You might also use bpftrace
as a prototyping and proof-of-concept language before developing tools fully in BCC.
For BCC tool development resources, tips, and examples with source code explained, see
Appendix C.
The following sections cover BCC internals and debugging. If you are running but not developing
BCC tools, there may nevertheless be times when you need to debug a broken tool and need to
understand some BCC internals to help you do that
---
## Page 157
1.20
Chapter 4 BCC
4.11
BCCInternals
BCC consists of:
 C++ front-end AP1 for composing kernel-level BPF programs, including:
 A preprocessor for converting memory dereferences to bpf_probe_read( calls (and, in
future kernels, variants of bpf_probe_readO)
 C++ back-end drivers for:
 Compiling the BPF program via Clang/LLVM