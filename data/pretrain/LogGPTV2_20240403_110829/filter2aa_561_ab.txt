but must be manually enabled or 
required
> Attacking SMB
Non-DC Machines
SMB1 Client Signing
SMB1 Server 
Signing
SMB2/3 
Client 
Signing
SMB2/3 Server 
Signing
Highest 
Version
Windows Vista SP1
Supported, Not required
Disabled
Not required
Not required
2.0.2
Windows 7
Supported, Not required
Disabled
Not required
Not required
2.1.0
Windows 8
Supported, Not required
Disabled
Not required
Not required
3.0.0
Windows 8.1
Supported, Not required
Disabled
Not required
Not required
3.0.2
Windows 10*
Supported, Not required
Disabled
Not required
Not required
3.1.1
Server 2008
Supported, Not required
Disabled
Not required
Not required
2.0.2
Server 2008 R2
Supported, Not required
Disabled
Not required
Not required
2.1.0
Server 2012
Supported, Not required
Disabled
Not required
Not required
3.0.0
Server 2012 R2
Supported, Not required
Disabled
Not required
Not required
3.0.2
Server 2016*
Supported, Not required
Disabled
Not required
Not required
3.1.1
-
Domain controllers require SMB signing by default. 
-
In Windows 10 and Server 2016, signing and mutual 
authentication (ie. Kerberos auth) is always required on 
\\*\SYSVOL and \\*\NETLOGON
These default settings are enforced through UNC hardening
> Notable Exceptions
-
If a client supports SMB3, and the dialect picked for the 
connection is SMB 2.0.2 -> 3.0.2, the client will always send a 
signed FSCTL_VALIDATE_NEGOTIATE_INFO message to validate the 
negotiated “Capabilities,  Guid,  SecurityMode, and Dialects” from 
the original negotiation phase – and require a signed response. 
This feature cannot be disable in Windows 10/Server 2016 and 
later.
This prevents dialect downgrades (except to SMBv1), and stripping 
any signature/encryption support.
> Notable Exceptions
SMB 3.1.1 is a security beast. It leverages pre-authentication 
integrity hashing to verify that all information prior to 
authentication was not modified.
In a nutshell: It takes the cumulative SHA-512 hash of the every 
SMB packet prior to authentication, and uses it in the 
SessionBaseKey generation process. If any data was modified, then  
the client and server will not generate the same signing keys.
At the end of the session setup response, both client and server 
must send a signed message to prove integrity. 
> Notable Exceptions
• Signing is not used by default except on DCs, and when 
W10/Server2016 connect to \\*\NETLOGON and \\*\SYSVOL
• Encryption is only supported in SMB 3.0.0 and greater, and 
must be enabled or required manually.
• Every dialect up except for SMB 3.1.1 can be downgraded to 
NTLMv2 if it is supported.
• Signing and encryption keys are, at their root, based on 
knowledge of the user’s password.
> Recap
Introducing SMBetray
> Attacking SMB
The goal was to build a tool to take full advantage of the gaps in 
security of weak SMB sessions from a true MiTM perspective.
Primary objectives were to steal sensitive data, and gain RCE
> SMBetray
Biggest obstacle: 
Putting the tool in the ideal position for intercept. The ideal position 
was a fully transparent intercept/proxy that, when a victim routes all 
traffic through us, would transparently eavesdrop on the connection 
between the victim and their actual legitimate destination.
> SMBetray
Existing options provided two possibilities:*
1. Use of an arbitrary upstream server
2. Use of NFQUEUE to edit the packets at the kernel level
*Note: I did not flip the Internet upside down searching for the 
perfect solution
Use of pre-configured
upstream server
> SMBetray
Use of a pre-configured upstream server
Pros: 
-
Connection stability
Cons:
-
You’re most likely redirecting the requests of your victim somewhere other 
than where they meant to go. This causes disruptions, and doesn’t provide 
the true “transparent” MiTM setup desired. Once the data is re-directed 
through iptables, we lose the original “destination” information, so we can’t 
determine where the victim was originally sending the request. (HTTP MiTM
servers avoid this issue by grabbing the “Host:” info from the header)
Use of Kernel level 
NFQUEUE packet 
editing
> SMBetray
Use of a NFQUEUE
Pros: 
-
Full transparency, as packets aren’t redirected – they’re edited on the fly at 
the kernel level
Cons:
-
This level of TCP packet editing takes too long (from a TCP timeout 
perspective). This quickly leads to TCP re-transmission snowballing, and 
connections resetting.
Solution? Combine them
> SMBetray
Created ebcLib.py as a MiTM TCP proxy with the useful transparency 
of an NFQUEUE intercept, with the connection stability of an 
upstream MiTM proxy.
SMBetray is built on top of this library.
Anatomy of a new 
connection in 
ebcLib.py
Anatomy of an 
existing/established 
connection in 
ebcLib.py
> SMBetray
Now that we can put ourselves where we want, lets start attacking 
SMB
SMBetray runs the below attacks:
• Dialect downgrading & Authentication mechanism downgrading
• Passive file copying 
• File directory injection
• File content swapping/backdooring
• Lnk Swapping
• Compromise SessionKeys (if we have creds) & forge signatures
SMBetray Sample
SMBetray Sample
SMBetray Sample
SMBetray Sample
Demo
Github.com/QuickBreach/SMBetray.git
Countermeasures
> Countermeasures: Disable SMBv1
Require SMB 
signatures across the 
domain on both 
clients and servers by 
enabling “Digitally sign 
communications 
(always)”
> Countermeasures: Require SMB Signing
> Countermeasures: Require SMB Signing
SMB 3 introduced support for encryption, which can be established 
on a per-share basis, or be implemented system-wide. Encryption 
can either be “supported”, or “required”.
If an SMB 3 server supports encryption, it will encrypt any session 
after authentication with an SMB 3 client, but not reject any un-
encrypted connection with lesser versions of SMB
If an SMB 3 server requires encryption, it will reject any un-
encrypted connection.
> Countermeasures: Use Encryption
UNC hardening is a feature available in Group Policy that allows 
administrators to push connection security requirements to clients if 
the UNC the client is connecting to matches a certain pattern. These 
requirements include only supporting mutual authentication, 
requiring SMB signing, and requiring encryption. 
Eg. “RequireIntegrity=1” on “\\*\NETLOGON” will ensure that, 
regardless of the security requirements reported by the server, the 
client will only connect to the NETLOGON share if signing is used. 
> Countermeasures: Use UNC Hardening
> Countermeasures: Audit & Restrict NTLM
Audit where NTLM is needed in your organization, and restrict it to 
those systems where it is needed. 
Removing, or at least restricting NTLM in the environment, will aid 
in preventing authentication mechanism downgrades to 
NTLMv1/v2 for SMB dialects less than 3.1.1. The pre-
authentication integrity hash in 3.1.1 protects its authentication 
mechanisms, but this check only occurs after authentication –
which means an attacker would have already captured the 
NTLMv2 hashes to crack, even though the SMB 3.1.1 connection 
will be terminated.
> Countermeasures: Kerberos FAST Armoring
> Countermeasures: Kerberos FAST Armoring
Require Kerberos Flexible Authentication via Secure Tunneling (FAST)
-
The user’s Kerberos AS-REQ authentication is encapsulated within 
the machine’s TGT. This prevents an attacker who knows the user’s 
password from compromising that user’s Kerberos session key. This 
also prevents attackers from cracking AS-REP’s to compromise user 
passwords
-
This feature enables authenticated Kerberos errors, preventing KDC 
error spoofing from downgrading clients to NTLM or weaker 
cryptography.
> Countermeasures: Kerberos FAST Armoring
PRECAUTIONS WHEN REQUIRING FAST:
Armoring requires Windows 8/2012, or later, throughout the 
environment. If FAST Armoring is required, and thereby set to “Fail 
unarmored authentication requests”, any older and non-FAST 
supporting devices will no longer be able to authenticate to the 
domain – and be dead in the water.
Review documentation & your environment thoroughly before 
requiring this setting
> Countermeasures: Passphrase not Password
Push users to the passphrase from the password mindset
BAD: 
D3fc0n26!
GOOD: 
“5ome some stronger p@ssword!”
If we can’t crack the password in the first place, we can’t compromise 
Kerberos Session Keys or SMB Session Base Keys
> Contributors & Shoulders of Giants
> Contributors & Shoulders of Giants
Ned Pyle  (@NerdPyle)
Principal Program Manager in the Microsoft Windows Server High 
Availability and Storage Group at Microsoft
-
Verified authenticity of SMB protections and behaviors
Mathew George
Principal Software Engineer in the Windows Server Group at 
Microsoft
-
Verified authenticity of SMB protections and behaviors
Special thanks to CoreSecurity for the impacket libraries
> \x00
Thank you DEFCON 26!
https://github.com/QuickBreach/SMBetray.git
William Martin
@QuickBreach