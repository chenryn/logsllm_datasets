### Analysis of Vulnerability Ratios and Honeymoon Effects

#### Figure 7: Ratios of p0/p0+1 to p0+1/p0+2 and p0+2/p0+3 for Open Source Applications
- **Ratios of Primal to Subsequent for Closed Source Code:**
  - Days to Zero:Days to Second
  - Days to Second:Days to Third
  - Days to Third:Days to Fourth
- **Scale:**
  - 100
  - 10
  - 1
  - 0.1
  - 0.01

#### Figure 8: Ratios of p0/p0+1 to p0+1/p0+2 and p0+2/p0+3 for Closed Source Applications

#### Figure 9: Regressive Vulnerability Timeline
- A **progressive vulnerability** is a primary vulnerability discovered in version N that does not affect version N-1 or any earlier versions. This indicates that the vulnerability was introduced in the new version N.

#### Figure 10: Proportion of Legacy Vulnerabilities in Windows OS
- **Legacy vulnerabilities** make up a significant percentage of vulnerabilities across all products. For example, 61% of Windows Vista vulnerabilities originate in earlier versions, with 40% originating in Windows 2000, released seven years earlier.
- This analysis shows that vulnerabilities are typically long-lived and can persist over many years and product versions until they are discovered.

#### Manual Check of NVD Database
- To determine if regressive vulnerabilities could be due to code reuse rather than configuration or implementation errors, we manually checked the NVD database and original disclosure sources.
- We found that 92% of regressive vulnerabilities were the result of code errors (e.g., buffer overflows, input validation errors, exception handling errors), indicating that vulnerabilities affecting multiple versions are likely due to shared legacy code.
- We removed vulnerabilities resulting from implementation or configuration errors and focused on code errors.

### 4.1 Regressive Vulnerabilities
- In OpenBSD, Ozment et al. state, "It took more than two and a half years for the first half of these vulnerabilities to be reported." [25].
- **Including both regressives and progressives.**

#### Figure 11: Honeymoon Ratios of p0/p0+1, p0+1/p0+2, and p0+2/p0+3 for Common User Applications
- **Honeymoon Ratios:**
  - Days to Zero:Days to Second
  - Days to Second:Days to Third
  - Days to Third:Days to Fourth
- **Scale:**
  - 10
  - 1
  - 0.1

### 4.2 The Honeymoon Effect and Regressive Vulnerabilities
- Another unexpected finding is that regressive vulnerabilities also experience the honeymoon effect. Despite lying dormant in the code for more than one release and attackers having more time to familiarize themselves with the product, the first of these vulnerabilities is not necessarily found in a shorter amount of time than the second.
- **Table 3: Percentages of Regressives and Regressive Honeymoons for All Primal Vulnerabilities**
  - **Type:**
    - ALL: 77% Total Regressives, 62% Total Regr. Honeymoons
    - Open Source: 83% Total Regressives, 62% Total Regr. Honeymoons
    - Closed Source: 59% Total Regressives, 66% Total Regr. Honeymoons

### 4.3 Regressives vs. Progressives
- The strong presence of the honeymoon effect even among regressive vulnerabilities leads us to wonder about its impact on the length of the honeymoon period.
- **Figure 11: Median Honeymoon Ratios for Regressives and Progressives**
  - The median honeymoon ratio for regressive vulnerabilities is lower than that for progressive vulnerabilities, suggesting that familiarity with the system is a major contributor to the time to first vulnerability discovery.
  - Closed source code has a longer honeymoon period, even for regressives, indicating that familiarity shortens the honeymoon.

### 4.4 Less than Zero Days
- **Table 4: Percentages of Primals that are Less-than-Zero (released vulnerable to an already existing exploit) and the new expected median time to first exploit, for all products, Open source, and Closed Source**
  - **Type:**
    - ALL: 21% Less-than-Zero, 83 days Median Honeymoon Period
    - Open Source: 18% Less-than-Zero, 89 days Median Honeymoon Period
    - Closed Source: 34% Less-than-Zero, 60 days Median Honeymoon Period
- Dormant vulnerabilities are not the only cause of 0-days. Legacy vulnerabilities result in a second category of regressions.

This revised text provides a clearer and more professional presentation of the data and findings, ensuring coherence and readability.