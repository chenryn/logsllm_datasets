s
y
p
e
h
p
efo
x
n
c
nld
a
p
o
a
stg
r
e
m
b
a
s
ql
m
s
e
r
v
c
at
e
r
Figure 7: Ratios of p0/p0+1 to p0+1/p0+2 and p0+2/p0+3
for open source applications
Medians of Ratios of Primal to Subsequent for Closed Source Code
Days to Zero:Days to Second
Days to Second:Days to Third
Days to Third:Days to Fourth
 100
 10
 1
 0.1
 0.01
O
s
ola
S
X
in
9
8
ris
w
N
W
X
T
P
ie i
m
r
e
a
g
e
a
d
e
r
m
v
m
s
q
afa
ri
w
a
r
e
uic
kti
m
in
2
0
0
0
P
r
o
a
gic
k
e
w
o
r
k
statio
n
Figure 8: Ratios of p0/p0+1 to p0+1/p0+2 and p0+2/p0+3
for closed source applications
Figure 9: Regressive Vulnerability timeline
On the other hand, a progressive vulnerability is primal
vulnerability which is discovered in version N and does not
aﬀect version N-1 or any earlier versions. A progressive vul-
nerability indicates that the vulnerability was introduced
with the new version N. (see Figure 9)
Figure 10 shows that legacy vulnerabilities2 make up a
signiﬁcant percentage of vulnerabilities across all products,
e.g. 61% of the Windows Vista vulnerabilities originate in
earlier versions of the OS, 40% of which originate in Win-
dows 2000 released seven years earlier. This analysis shows
that vulnerabilities are typically long-lived and can survive
over many years and many product versions until discovered.
In order to ascertain whether regressive vulnerabilities
could be the result of code reuse rather than conﬁguration
or implementation errors, we manually checked the NVD
database description and the original disclosure sources for
information regarding the type of vulnerability. We found
that 92% of the regressive vulnerabilities were the result of
code errors (buﬀer overﬂows, input validation errors, excep-
tion handling errors) which strongly indicates that a vulner-
ability that aﬀects more than one version of a product is
most likely a result of legacy code shared between versions.
We removed the vulnerabilities which are the result of im-
plementation or conﬁguration errors from our dataset and
focused exclusively on code errors.
4.1 Regressive Vulnerabilities
1In OpenBSD, Ozment et al states ”It took more than two
and a half years for the ﬁrst half of these ... vulnerabilities
to be reported.” [25].
2including both regressives and progressives
256
WinOS
Origin of legacy vulnerabilities in major versions
new
vista
2003
xp
2000
98
95
nt
●
●
●
●
●
●
●
●
●
●
vista
2003
xp
2000
98
95
nt
●
0
0
4
0
0
3
0
0
2
s
e
i
t
i
l
i
b
a
r
e
n
u
v
l
0
0
1
0
●
●
●
nt
95
98
Honeymoon Ratios for Regressives(l) and Progressives(r)
Days to Zero:Days to Second
Days to Second:Days to Third
Days to Third:Days to Fourth
 10
 1
xp
2000
major version
2003 vista 2008
0.1
All
O
p
e
n
-
S
C
lo
s
e
d
-
S
o
u
r
c
e
o
u
r
c
e
All
O
p
e
n
-
S
C
lo
s
e
d
-
S
o
u
r
c
e
o
u
r
c
e
Figure 10: Proportion of legacy vulnerabilities in
Windows OS
If code reuse and an attacker’s familiarity with the sys-
tem has an eﬀect on the rate of vulnerability discovery, then
when one examines the primal vulnerabilities, one should
expect to see that regressive vulnerabilities make up a sig-
niﬁcant percentage of them. And indeed, after examining all
the primal vulnerabilities in our data set, we ﬁnd that 77%
of them are regressive. (ie, 77% of the primals were found
to also aﬀect earlier versions ). Table 3 lists the percentages
of regressives for all, open source, closed source primals. Ta-
ble 3 also shows that the percentage of regressives is even
higher for open source primals (rising up to 83%), and lower
for closed source (59%). The high percentage of regressive
vulnerabilities is surprising, because it shows that the ma-
jority of primal vulnerabilities, (the ﬁrst vulnerability found
after a product is released), are not the easy to ﬁnd “low-
hanging fruit” one would expect from conventional software
engineering defects, instead these regressives lay dormant
throughout the life-time of their originating release (and pos-
sibly several subsequent releases). If these regressives had
been easy to ﬁnd, then presumably, they would have been
found in the version in which they originated.
Table 3: Percentages of Regressives and Regressive
Honeymoons for all Primal Vulnerabilities
Type
ALL
Open Source
Closed Source
Total Regressives Total Regr. Honeymoons
77%
83%
59%
62%
62%
66%
4.2 The Honeymoon Effect and Regressive Vul-
nerabilities
Another unexpected ﬁnding is that regressive vulnerabil-
ities also experience the honeymoon eﬀect. Because regres-
sive vulnerabilities have been lying dormant in the code for
257
Figure 11: Honeymoon ratios of p0/p0+1, p0+1/p0+2
and p0+2/p0+3 for common user applications
more than one release, and because the attackers have had
more time to familiarize themselves with the product, it
seems reasonable to presume that the ﬁrst of these vulner-
abilities would be found in a shorter amount of time than
time to ﬁnd the second vulnerability (whether regressive or
progressive). But, our analysis shows this isn’t the case. The
second column of Table 3 lists the percentages of regressives
that were also honeymoons. In each case whether we looked
at all regressives combined, only open source or only closed
source, the percentages of honeymoons is in the low to mid
60th percentile - almost the same as the total honeymoon
eﬀect for all regressives and progressives combined. Closed
source does exhibit a slightly longer honeymoon eﬀect, but
not signiﬁcantly so. The existence of regressive honeymoons,
especially in such high proportions indicates that proper-
ties extrinsic to the quality of the code, in particular an
attacker’s familiarity with the system play a much greater
role early on in the life-cycle of a release than previously
expected.
4.3 Regressives vs. Progressives
The strong presence of the honeymoon eﬀect even among
regressive vulnerabilities leads us to wonder what if any ef-
fect regressives might have on the length of the honeymoon
period. Yes, regressive vulnerabilities experience a honey-
moon, but is it longer or shorter than the honeymoon for
progressive vulnerabilities? The honeymoon ratio provides
insight into the length of the honeymoon period. Figure 11
shows the median honeymoon ratios for regressives (all, open
and closed), progressives (all, open and closed), for the vul-
nerabilities p0/p0+1, through p0+2/p0+3. The median hon-
eymoon ratio for regressive vulnerabilities is lower than that
for progressives. In fact, the honeymoon ratio for progres-
sive vulnerabilities is almost twice as long. This strongly
suggests that familiarity with the system is a major con-
tributor to the time to ﬁrst vulnerability discovery. Inter-
estingly, it doesn’t seem to have a signiﬁcant eﬀect on open
source code, but closed source does seem to have a longer
honeymoon period, even for regressives. In other words, fa-
miliarity shortens the honeymoon.
4.4 Less than Zero Days
Table 4: Percentages of Primals that are Less-than-
Zero (released vulnerable to an already existing ex-
ploit) and the new expected median time to ﬁrst
exploit, for all products, Open source and Closed
Source
Percentages Median Honeymoon Period
Type
ALL
Open Source
Closed Source
21%
18%
34%
83
89
60
Dormant vulnerabilities are not the only cause of 0-days.
Legacy vulnerabilities result in a second category of regres-