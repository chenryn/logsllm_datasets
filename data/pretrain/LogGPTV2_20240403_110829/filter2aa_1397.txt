# One Device to Pwn Them All

## Phil Polstra
### Bloomsburg University of Pennsylvania
#### @ppolstra | [philpolstra.com](http://philpolstra.com)

---

## Overview
This talk introduces a versatile, pocket-sized device capable of various hacking and penetration testing tasks. The device can be configured as:
- A drop box (battery-powered for days if needed)
- A remote hacking drone (controlled from up to 2 miles away)
- An airborne hacking drone (when combined with RC aircraft)
- A hacking console (can be built into a lunch box)
- A tool for USB-based attacks, including:
  - Write-protecting flash drives
  - USB impersonation
  - Scriptable HID (Human Interface Device) attacks

---

## Why Should You Care?
- **BeagleBone Black** running **Deck Linux** is:
  - Small and flexible (supports wired/wireless, battery/USB/wall power)
  - Networkable, integrating into sophisticated penetration tests
  - Capable of exploiting brief physical access to a target
  - Highly effective, even in just a few seconds

---

## About the Speaker
- **Professor at Bloomsburg University** teaching digital forensics and information security
- **Author** of "Linux Forensics" and "Hacking and Penetration Testing with Low Power Devices"
- Programming since age 8, hardware hacking since age 12
- Aviation enthusiast: flies, builds planes, and engages in other aviation activities
- Course author for PentesterAcademy.com and other platforms

---

## Roadmap
1. Quick overview of BeagleBone Black (BBB) running Deck Linux
2. Exporting BBB-attached USB drive to PC (read-only)
3. Write-enabling an exported drive (BHEU12)
4. USB mass storage device impersonation (DC20)
5. Scriptable USB HID keyboard
6. Base OS and its features
7. MeshDeck: Remote control via 802.15.4/ZigBee networking
8. AirDeck: Airborne drone or router capabilities
9. 4Deck: Forensic add-on for write-blocking USB mass storage devices
10. Udeck: USB-based attacks
11. USB Gadget basics
12. USB Gadget on BBB
13. Creating and using a scriptable HID

---

## Quick Overview of BBB Running Deck Linux
- **Base OS**: Built on Ubuntu 14.04, optimized for BBB and penetration testing
- **Features**:
  - Over 4000 pre-installed packages (fluff-free)
  - Can be used as a drop box or hacking console
  - Supports various USB gadget configurations

---

## Exporting BBB-Attached USB Drive to PC (Read-Only)
```bash
#!/bin/bash
# Stop the GETTY service if needed
if which 'systemctl' ; then 
  systemctl stop serial-getty@ttyGS0.service >/dev/null
fi

# Unload current composite gadget
modprobe -r g_multi

# Variables to export all partitions
fstr=""
rostr=""

# Unmount the USB drive
for d in $(ls /dev/sd*); do
  if echo "$d" | egrep '[1-9]$' >/dev/null; then
    umount $d
    fstr+=",$d"
    rostr+=",1"
  fi
done

fstr=${fstr:1} # Strip leading comma
rostr=${rostr:1}

echo "$fstr" >/tmp/usbexports # Store for later use

# Export the drive
vend=$((0x1337)) # Choose your favorite VID/PID
prod=$((0x1337))
echo "$vend" >/tmp/usbvend # Save VID/PID for possible r/w export
echo "$prod" >/tmp/usbprod

modprobe g_multi file=$fstr cdrom=0 stall=0 ro=$rostr \
  removable=1 nofua=1 idVendor=$vend idProduct=$prod
```

---

## Making the Exported Drive Writable
```bash
#!/bin/bash
# Check if export file exists
if [ -e /tmp/usbexports ]; then
  fstr=$(cat /tmp/usbexports)
  modprobe -r g_multi
  modprobe g_multi file=$fstr cdrom=0 stall=0 \
    removable=1 nofua=1 idVendor=$(cat /tmp/usbvend) \
    idProduct=$(cat /tmp/usbprod)
fi
```

---

## USB Mass Storage Impersonation
- Some organizations block unauthorized flash drives using endpoint security software.
- The BBB can impersonate such devices with better performance (USB 2.0 High Speed vs. Full Speed).

### Impersonator: Part 1 - Setup
```bash
#!/bin/bash
usage () {
  echo "Usage: $0 [-v Vendor] [-p Product] [-d Delay]"
  echo "USB impersonator shell script. Will iterate over list if no vendor and product ID given."
  echo "Standard delay is four seconds before switching."
  exit 1
}

declare -i vend=0x1337
declare -i prod=0x1337
declare -i delay=4

parseargs () {
  useFile=true
  delay=$((2))
  while [[ $# > 1 ]]; do
    key="$1"
    case $key in
      -v)
        vend="0x$2"
        useFile=false
        shift
        ;;
      # Add more cases as needed
    esac
    shift
  done
}
```

### Impersonator: Part 2 – Unmount Drive
```bash
if which 'systemctl' ; then 
  systemctl stop serial-getty@ttyGS0.service >/dev/null
fi

# Unload current composite gadget
modprobe -r g_multi

# Variables to export all partitions
fstr=""
rostr=""

# Unmount the USB drive
for d in $(ls /dev/sd*); do
  if echo "$d" | egrep '[1-9]$' >/dev/null; then
    umount $d
    fstr+=",$d"
    rostr+=",1"
  fi
done

fstr=${fstr:1}
rostr=${rostr:1}

echo "$fstr" >/tmp/usbexports

# Store the process ID so it can be killed
echo "$BASHPID" > /tmp/impersonator-pid
```

### Impersonator: Part 3 – Export Drive
```bash
# Export the drive
if $useFile; then
  declare -a arr
  while read line; do
    arr=(${line//,/ })
    v=${arr[0]}; vend="0x$v"
    p=${arr[1]}; prod="0x$p"
    modprobe -r g_multi
    modprobe g_multi file=$fstr cdrom=0 stall=0 ro=$rostr removable=1 nofua=1 idVendor=$vend idProduct=$prod
    sleep $delay
  done < /dev/null
else
  modprobe -r g_multi
fi
```

---

## Creating a HID: Part 2 - Configfs
- **Configfs** is used to configure HID at install time.
- Ensure the `/sys/kernel/config` directory exists.

```bash
# Check for the existence of configfs
if mount | grep '/sys/kernel/config' >/dev/null; then
  umount /sys/kernel/config
fi

mount none -t configfs /sys/kernel/config
```

### Create a HID: Part 3 - Create Device
```bash
kbdir="/sys/kernel/config/usb_gadget/kb"
if [ ! -d "$kbdir" ]; then
  mkdir $kbdir
fi

echo 0x1337 >"$kbdir/idVendor"
echo 0x1337 >"$kbdir/idProduct"
echo 0x0100 >"$kbdir/bcdDevice"
echo 0x0110 >"$kbdir/bcdUSB"
```

### Create a HID: Part 4 – Add a Config
```bash
if [ ! -d "$kbdir/configs/c.1" ]; then
  mkdir "$kbdir/configs/c.1"
fi

echo 500 >"$kbdir/configs/c.1/MaxPower"

if [ ! -d "$kbdir/functions/hid.usb0" ]; then
  mkdir "$kbdir/functions/hid.usb0"
fi

echo 1 >"$kbdir/functions/hid.usb0/subclass"
echo 1 >"$kbdir/functions/hid.usb0/protocol"
echo 8 >"$kbdir/functions/hid.usb0/report_length"
```

### Create a HID: Part 5 - Finalize
- Need a report descriptor for the keyboard.
- Create a symlink for the configuration.
- Activate the HID.

```bash
cp report_descriptor_kb.bin "$kbdir/functions/hid.usb0/report_desc"
ln -s "$kbdir/functions/hid.usb0" "$kbdir/configs/c.1"
echo musb-hdrc.0.auto >"$kbdir/UDC"
```

---

## HID Report Descriptor Detail
```plaintext
0501 // usage page
0906 // usage (keyboard)
a101 // collection (application)
  0507 // usage page (keyboard)
  19e0 // usage min (left control)
  29e7 // usage max (right GUI)
  1500 // logical min (0)
  2501 // logical max (1)
  7501 // report size (1)
  9508 // report count (8)
  8102 // input (data, var, abs)
  9501 // report count (1)
  7508 // report size (8)
  8101 // input (data, var, abs)
  9505 // report count (5)
  7501 // report size (1)
  0508 // usage page (LEDs)
  1901 // usage min (num lock)
  2905 // usage max
  9102 // output (data, var, abs)
  9501 // report count (1)
  7503 // report size (3)
  9101 // output (data, var, abs)
  9506 // report count (6)
  7508 // report size (8)
  1500 // logical min (0)
  26ff00 // logical max (255)
  0507 // usage page (key codes)
  1900 // usage min (0)
  2aff00 // usage max (255)
  8100 // input (data, var, abs)
c0 // end collection
```

---

## Using the New HID
- **Byte Descriptions**:
  - **Modifier**: Shift keys
  - **Reserved**: 0x00
  - **Key 1-6**: Keycodes (e.g., "a" = 0x04)

- **Sending HID Reports**:
  - Use Python to send key press and release events.

### Python Prelims
```python
import struct, time

# Define key modifiers
KeyModifier = {
  'LeftCtrl': 1,
  # Add more modifiers as needed
}

# Example function to send a string
def send_string(udh, text):
  for char in text:
    udh.sendChar(char)
    time.sleep(0.1)
  udh.sendEnter()
```

### Simple Linux Attack Demo
```python
udh = udeckHid.UdeckHid()
udh.sendLine("touch gotyourpasswords.txt")
udh.sendLine("clear")
```

### Simple Windows Attack Demo
```python
udh.sendWindowKey('r')
udh.sendLine('notepad')
for i in range(0, 50):
  udh.sendString('You are so hacked\n')
udh.sendAltKey('f')
udh.sendChar('x')
udh.sendEnter()
udh.sendLine('hacked.txt')
udh.sendWindowsUpsideDownScreen()
udh.sendWindowsLockScreen()
```

---

## Questions?
- **Demo Labs**: Saturday 12:00 – 14:00
- **PentesterAcademy Booth**: Sign up for a chance to win one of two gift sets, which include:
  - "Hacking and Penetration Testing with Low Power Devices"
  - "Linux Forensics"
  - CatchWire appliance

Thank you for your attention!