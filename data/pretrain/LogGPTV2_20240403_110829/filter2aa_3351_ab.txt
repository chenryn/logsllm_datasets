Your advisory is likely to be read by various people with slightly different 
goals
•
The better your vendor coordination, the better your advisory details will 
be (for customers, anyway)
•
Easily identifiable advisory structure
–
Well-labeled sections, different bugs in different segments, etc.
•
Background / Explanation of software
•
Synopsis / Abstract (brief)
•
Affected software / hardware
–
Vendor name, product name, vulnerable versions
• Newest vulnerable version
• Fixed / non-vulnerable versions
–
Can quickly become a complex situation
–
Best effort in most cases
Advisory Structure and Contents (2)
•
Privileges & access required to launch an attack
•
Impact of a successful attack
–
Privileges gained; unauthorized operations that can now be conducted; etc.
–
CVSS score, along with full vector
•
Detailed Description
–
“Too Much vs. Not Enough”
–
To PoC or not PoC? That is the question.
–
Level of detail is one of those individual opinion things
– However, there is a real risk to disseminating attacks
– Use your moral compass so you can sleep well at night
–
Typical PoC details: 1 or more of: affected parameter/filename, source code extracts (from 
input to vulnerable code), sample attack string (typically harmless), pseudocode, functioning 
exploit code segment, fully executable exploit program
•
Patch availability, mitigations, workarounds
•
Key identifiers (CVE, vendor IDs, CERT IDs, etc.)
•
Disclosure timeline / Key Dates (discovery, research, patch, disclosure, etc.)
•
Credit to contributors
•
References to related work
Advisory Formats - Pros and Cons
• Simpler is better
– Most widespread distribution; no special readers or software 
required
• Think “plain text” or “markdown”
– Easy to copy-and-paste key details (also, language translation)
• Never, EVER PDF
• Video is a mixed bag
– You’re taking up people’s time and limiting when they can see it
– Clear picture is essential
– Show steps for reproducing
– Keep it short and sweet
– Accompany it with a text advisory
What to Expect from Vendors
• tl;dr – everything and nothing
• MANY scenarios; every disclosure is a unique snowflake
• Inability to find right contact (who might not exist)
• Unless they’re very experienced, you’re calling their baby ugly
• Lack of understanding of the issue
• Acknowledgement of receipt, followed by silence
• Corporate bureaucracy / politics prevent open comms
• Refusal to share patches with you to re-test
• Lack of credits
• Commitment to a fix, but with an unreasonable timeline
• Disagreement on severity of the issue
• Release of patch without mentioning a vulnerability at all
Where to Disclose Publicly
• Post to at least one source that is archived forever 
(or archived widely)
• Mailing lists: Bugtraq, Full-Disclosure, oss-
security
• Your own blog or website
• Exploit-DB or other exploit sites
• Vulnerability databases
• No separate publication - rely on vendor credits or 
“hall of fame”
Common Mistakes to Avoid
• Interacting with a vendor in a way that seems like a threat or 
blackmail
• PoC or GTFO (“Go! The Fail’s Overwhelming!”)
– Easy to declare a vulnerability exists, but harder to prove it
– Corollary: if you can’t exploit it, maybe somebody else can
• Trusting automated tool findings without verifying them
• Skipping root-cause analysis
– Often leads you to more interesting findings
• Not verifying whether the issue was already discovered
Common Mistakes to Avoid (2)
• Treating multiple attacks, or attack chains, as if they were separate 
vulnerabilities, even when they originate from a single 
vulnerability
– E.g. if a vulnerability allows you to gain admin privilege, and a 
legitimate admin is explicitly allowed to “modify configuration” or 
“disable the software,” then these abilities are NOT new vulnerabilities
– Decision point: “if an issue is fixed, are the other issues still a problem?”
• Suggesting workarounds such as “uninstall software” is just… bad
• Over-hyping the severity of your findings
• Copying one of your old advisories to make a new advisory, and 
forgetting to change all the data for the new vulnerability
• Relying too heavily on memes or cultural references
• Assuming developers are stupid and lazy
• Assuming customers can patch instantly
VR Growth and Development
(A Perspective)
• Disclaimer! Everyone develops differently, this is just an 
approximation
• Not everybody wants to be, can be, or needs to be elite
• Malcolm Gladwell’s Outliers says it takes about 10,000 hours of 
focused practice to become an expert
– Varies based on aptitude and prior experience, e.g. developers
• These days, it can take 3 years or more before you build a 
reputation
• To progress further, you can:
– Team up with somebody else
– Find a mentor
• Be polite and respectful of their time; accept that some will say “no”
• QUIZ: what happens when you’re an elite researcher who targets 
software with low-hanging fruit?  Ask @taviso ;-)
Stage 1: Newbie
• Easy-to-find vulns
• Easy-to-conduct, simplistic attacks
• One vuln class only
• Misses more important vulns
• Misses nearby issues
• Finds and discloses each bug, one at a time
• Limited to highly insecure, previously-unaudited 
software
• No “advisories” per se
• Sometimes wrong
Stage 2: Workhorse
• More comprehensive findings - multiple bugs per 
package
• Multiple types of well-understood vuln/attack classes
• Recognizes simplistic protection mechanisms e.g. 
blacklists
• Evolves a disclosure policy and approach to working 
with vendors (or not)
• Evolving, stable advisory format
• Learns new techniques from others and applies them to 
own work
• Ensures findings are new and references related work
Stage 3: Subject Matter Expert
• Significant experience in one or more vuln or attack classes
• Develops new enhancements for existing techniques
• Writes white papers / speaks at conferences
• Bypasses common protection mechanisms
• Performs more comprehensive root cause analysis
• Applies experience to previously-uninvestigated product classes
• Creates a noticeable body of work
• Extensive findings for any package audited
• Experience with multiple techniques & methodologies
• Able to find bugs in most packages
• Detailed, well-written advisories with all relevant information
• Rarely wrong
Stage 4: “Elite”
• Hates that term (probably)
• Finds new vuln classes, invents new attack classes, makes new 
tools
• Bypasses state-of-the-art protection mechanisms
• Anticipates industry-wide developments
• Is “elite” only for a particular specialty
– NOBODY knows everything anymore
• Finds vulns in any software package, anywhere, anytime*
– * as applied to their particular specialty
• Analyzes most popular, secure software
• Finds complex vulnerability chains
Feelz and Failz: Your “Objective,” 
Technical Research is a Lie
• Vulnerability research is a trying profession/hobby
– FAILZ are inevitable
• You’re (probably) not a robot
– FEELZ are inevitable
– You're (probably) subject to trying to find rationales and 
logic to explain away your feelz
• HACK/LIFE BALANCE IS KEY; but your balance !
= others’ balance
• You don't have to be l33t to make a difference
FEELZ ARE OK
•
It's normal to:
–
Get frustrated
–
Get “scooped” by bug collisions
–
Be defeated by a technical barrier you don't understand
–
“Waste” time on a promising theory that doesn’t work out
–
Not understand what someone else’s advisory says
–
Give up, temporarily or permanently, and look for something else
–
Believe that your only worth is in finding RCE in software from Top 10 vendors
–
Not be able to see yourself reaching the level of those you respect
–
Boldly declare you're awesome (Dunning-Kruger effect)
–
Think you don't know much when everyone else believes you do (also Dunning-Kruger effect)
–
Let your pride & ego get in the way of communication
–
Ghost the disclosure process when you realize you're wrong
–
Think you found something new that's actually old
–
Get criticism from researchers you respect
•
Try to prevent your feelz from negatively affecting anyone… including yourself
FAILZ ARE OK
•
Your research heroes and heroines, plumbers and rock stars, whoever they 
are, probably:
– Failed before everybody cared about infosec
– Failed privately
– Operated in a world where the “rules” weren't yet defined… but today those 
rules aren't made explicit
– Over-hyped some finding or another
– Got smacked down by somebody who raised questions they couldn't answer
– Recovered, and forgot how they messed up
– Recovered, but won't tell you how they messed up (see: ego)
– Might misrepresent accomplishments or how easy things were for them
•
Failz are not fatal! (usually; we are in the age of IoT, unfortunately)
Conclusion
● May you fail fast, fail uniquely, and fail well!
● Everybody forges their own path, but others 
have made the journey before
● Good luck and have fun!
Josh: @jduck               Steve: @sushidude
References/Links: Research 
Process
•
Presentation
–
Andrew M. Hay - “Bootstrapping A Security Research Project”
•
https://speakerdeck.com/andrewsmhay/source-boston-2016-bootstrapping-a-security-research-project
–
Larry Cashdollar - “How to find 1,352 WordPress XSS plugin vulnerabilities in 1 hour (not really)”
•
http://www.wallofsheep.com/blogs/news/tagged/defcon#larry
–
Nick Jones / MWR Labs, “Bug Hunting with Static Code Analysis”
•
https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-bug-hunting-with-static-code-analysis-bsides-2016.pdf
•
Books
–
Dowd, McDonald, and Schuh: “The Art of Software Security Assessment: Identifying and Preventing 
Software Vulnerabilities” (the code auditing bible!)
–
“Hacker’s Handbook” series, e.g. Drake, Lanier, Mulliner, Fora, Ridley, Wicherski: “Android Hacker’
s Handbook”
•
Documents
–
Phrack Magazine: http://www.phrack.org/
–
PoC||GTFO https://www.alchemistowl.org/pocorgtfo/
–
“Introduction to Vulnerability Theory” - https://cwe.mitre.org/documents/vulnerability_theory/intro.
html
References/Links: Tools
• This is far from exhaustive; there are dozens of 
commercial and freeware software scanners
• Consider: $$$, false-positive rate, false-
negative rate, explanations, ...
• Kali Linux - many different tools https://www.
kali.org/
• Metasploit https://www.metasploit.com/
• Grep (yes, grep!)
References/Links: Intentionally 
Vulnerable Software
• OWASP WebGoat https://www.owasp.org/index.
php/Category:OWASP_WebGoat_Project
• NIST SAMATE test suites, e.g. Juliet and 
STONESOUP https://samate.nist.
gov/SARD/testsuite.php
• CWE “Demonstrative Examples” for individual 
entries https://cwe.mitre.org
• Intentionally vulnerable distros, e.g. Damn 
Vulnerable Linux or https://www.vulnhub.com/
References/Links: Advisory & 
Disclosure Advice
• Kymberlee Price, “Writing Vulnerability Reports that Maximize 
Your Bounty Payouts”
– https://youtu.be/zyp2DoBqaO0
• John Stauffacher, “Geekspeed’s Advice for Writing a Great 
Vulnerability Report”
– https://blog.bugcrowd.com/advice-for-writing-a-great-vulnerability-
report/
• OSVDB “Researcher Security Advisory Writing Guidelines”
– https://blog.osvdb.org/2013/01/15/researcher-security-advisory-writing-
guidelines
• CVRF (Common Vulnerability Reporting Framework)
– http://www.icasi.org/cvrf/
• Christey advisory format suggestion (2003)
– http://www.securityfocus.com/archive/1/344559
References/Links: Disclosure 
Processes
• http://howdoireportavuln.com/
• http://attrition.org/errata/legal_threats/
• ISO 29147 vulnerability disclosure standard http://www.iso.
org/iso/catalogue_detail.htm?csnumber=45170
• Christey/Wysopal IETF draft https://tools.ietf.org/html/draft-
christey-wysopal-vuln-disclosure-00
• RFPolicy 2.0 https://dl.packetstormsecurity.
net/papers/general/rfpolicy-2.0.txt