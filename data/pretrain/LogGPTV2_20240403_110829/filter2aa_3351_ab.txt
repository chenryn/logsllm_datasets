### Crafting Effective Security Advisories

#### Audience and Goals
Your security advisory will likely be read by a diverse audience, each with slightly different objectives. Therefore, it is crucial to ensure that the advisory is comprehensive and accessible.

#### Vendor Coordination
Effective coordination with vendors enhances the quality of your advisory for customers. Clear communication and collaboration can lead to more accurate and actionable information.

#### Advisory Structure
A well-structured advisory should include:

1. **Easily Identifiable Structure:**
   - Well-labeled sections.
   - Separate segments for different vulnerabilities.

2. **Background/Explanation:**
   - Provide context about the software and its purpose.

3. **Synopsis/Abstract:**
   - A brief summary of the issue.

4. **Affected Software/Hardware:**
   - Vendor name, product name, and vulnerable versions.
   - Newest vulnerable version.
   - Fixed or non-vulnerable versions.
   - Note: This can become complex, so make your best effort to provide accurate information.

5. **Privileges & Access Required:**
   - Specify the privileges and access levels needed to launch an attack.

6. **Impact of a Successful Attack:**
   - Describe the potential consequences, such as gained privileges and unauthorized operations.
   - Include the CVSS score and full vector.

7. **Detailed Description:**
   - Balance between providing too much and too little detail.
   - Consider whether to include a Proof of Concept (PoC).
   - Typical PoC details may include:
     - Affected parameter/filename.
     - Source code extracts.
     - Sample attack string (typically harmless).
     - Pseudocode.
     - Functioning exploit code segment.
     - Fully executable exploit program.
   - Use your judgment and ethical considerations when deciding to share PoC details.

8. **Patch Availability, Mitigations, and Workarounds:**
   - Provide information on available patches, mitigations, and workarounds.

9. **Key Identifiers:**
   - Include CVE, vendor IDs, CERT IDs, etc.

10. **Disclosure Timeline:**
    - Key dates such as discovery, research, patch release, and disclosure.

11. **Credit to Contributors:**
    - Acknowledge those who contributed to the discovery and resolution.

12. **References to Related Work:**
    - Cite any related research or advisories.

#### Advisory Formats: Pros and Cons
- **Simpler is Better:**
  - Plain text or markdown formats are widely distributed and do not require special readers.
  - Easy to copy-and-paste key details and translate into other languages.
  - Avoid using PDFs.
  - Video can be useful but has limitations; always accompany it with a text advisory.

#### Expectations from Vendors
- **Vendor Responses:**
  - Every disclosure is unique, and responses can vary widely.
  - Common issues include:
    - Difficulty in finding the right contact.
    - Lack of understanding of the issue.
    - Acknowledgment followed by silence.
    - Corporate bureaucracy.
    - Refusal to share patches for re-testing.
    - Lack of credits.
    - Unreasonable timelines for fixes.
    - Disagreement on severity.
    - Patch release without mentioning the vulnerability.

#### Public Disclosure
- **Where to Disclose:**
  - Post to at least one source that is archived permanently or widely.
  - Mailing lists: Bugtraq, Full-Disclosure, oss-security.
  - Your own blog or website.
  - Exploit-DB or other exploit sites.
  - Vulnerability databases.
  - Rely on vendor credits or "hall of fame" if no separate publication is made.

#### Common Mistakes to Avoid
- **Interactions with Vendors:**
  - Avoid threatening or blackmailing behavior.
  - Be cautious with PoCs and GTFO (Go! The Fail’s Overwhelming!).
  - Verify automated tool findings.
  - Perform root-cause analysis.
  - Check if the issue was already discovered.
  - Treat multiple attacks or attack chains correctly.
  - Avoid suggesting impractical workarounds like "uninstall software."
  - Do not over-hype the severity of your findings.
  - Ensure all data is updated when reusing old advisories.
  - Minimize reliance on memes or cultural references.
  - Avoid assumptions about developers' competence or customer patching capabilities.

#### Researcher Development Stages
- **Stage 1: Newbie**
  - Finds easy-to-find vulnerabilities.
  - Conducts simplistic attacks.
  - Limited to one vulnerability class.
  - Misses important and nearby issues.
  - No formal advisories.

- **Stage 2: Workhorse**
  - More comprehensive findings.
  - Multiple types of well-understood vulnerabilities.
  - Recognizes basic protection mechanisms.
  - Evolves a disclosure policy.
  - Stable advisory format.
  - Learns and applies new techniques.
  - Ensures findings are new and references related work.

- **Stage 3: Subject Matter Expert**
  - Significant experience in specific vulnerability or attack classes.
  - Develops enhancements for existing techniques.
  - Writes white papers and speaks at conferences.
  - Bypasses common protection mechanisms.
  - Performs thorough root cause analysis.
  - Extensive findings for audited packages.
  - Rarely wrong.

- **Stage 4: Elite**
  - Finds new vulnerability classes.
  - Invents new attack classes.
  - Bypasses state-of-the-art protection mechanisms.
  - Anticipates industry-wide developments.
  - Specialized expertise.
  - Analyzes popular and secure software.
  - Finds complex vulnerability chains.

#### Emotional and Professional Balance
- **Feelings and Failures:**
  - Vulnerability research is challenging.
  - Frustration, being scooped, and technical barriers are normal.
  - Hack/life balance is key.
  - It's okay to feel frustrated, give up temporarily, or make mistakes.
  - Prevent negative emotions from affecting others and yourself.

- **Failures:**
  - Even top researchers have failed.
  - Learn from failures and recover.
  - Failures are not fatal and can be learning opportunities.

#### Conclusion
- **Embrace Failure:**
  - Fail fast, uniquely, and well.
  - Forge your own path, but learn from others.
  - Good luck and have fun!

#### References and Links
- **Research Process:**
  - Andrew M. Hay - “Bootstrapping A Security Research Project”
  - Larry Cashdollar - “How to find 1,352 WordPress XSS plugin vulnerabilities in 1 hour (not really)”
  - Nick Jones / MWR Labs, “Bug Hunting with Static Code Analysis”

- **Books:**
  - Dowd, McDonald, and Schuh: “The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities”
  - “Hacker’s Handbook” series, e.g., Drake, Lanier, Mulliner, Fora, Ridley, Wicherski: “Android Hacker’s Handbook”

- **Documents:**
  - Phrack Magazine
  - PoC||GTFO
  - “Introduction to Vulnerability Theory”

- **Tools:**
  - Kali Linux
  - Metasploit
  - Grep

- **Intentionally Vulnerable Software:**
  - OWASP WebGoat
  - NIST SAMATE test suites
  - CWE Demonstrative Examples
  - Intentionally vulnerable distros

- **Advisory & Disclosure Advice:**
  - Kymberlee Price, “Writing Vulnerability Reports that Maximize Your Bounty Payouts”
  - John Stauffacher, “Geekspeed’s Advice for Writing a Great Vulnerability Report”
  - OSVDB “Researcher Security Advisory Writing Guidelines”
  - CVRF (Common Vulnerability Reporting Framework)
  - Christey advisory format suggestion (2003)

- **Disclosure Processes:**
  - How to report a vulnerability
  - Attrition.org legal threats
  - ISO 29147 vulnerability disclosure standard
  - Christey/Wysopal IETF draft
  - RFPolicy 2.0

By following these guidelines, you can create clear, professional, and effective security advisories.