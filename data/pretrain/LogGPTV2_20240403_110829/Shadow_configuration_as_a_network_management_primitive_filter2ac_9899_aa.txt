title:Shadow configuration as a network management primitive
author:Richard Alimi and
Ye Wang and
Yang Richard Yang
Shadow Conﬁguration as a Network Management Primitive
Richard Alimi, Ye Wang, Y. Richard Yang
Laboratory of Networked Systems, Yale University
New Haven, CT, USA
ABSTRACT
Conﬁgurations for today’s IP networks are becoming increasingly
complex. As a result, conﬁguration management is becoming a
major cost factor for network providers and conﬁguration errors
are becoming a major cause of network disruptions. In this paper,
we present and evaluate the novel idea of shadow conﬁgurations.
Shadow conﬁgurations allow conﬁguration evaluation before de-
ployment and thus can reduce potential network disruptions. We
demonstrate using real implementation that shadow conﬁgurations
can be implemented with low overhead.
Categories and Subject Descriptors: C.2.1 [Computer Commu-
nication Networks]: Network Architecture and Design – Network
communications; C.2.3 [Computer Communication Networks]: Net-
work Architecture and Design – Network Operations
General Terms: Algorithms, Design, Management.
Keywords: Network Management, Network Diagnostics
1.
INTRODUCTION
Modern IP networks are becoming increasingly complex to con-
ﬁgure, as these networks continue to evolve to offer multiple ser-
vices (e.g., both routing and access control), integrate equipment
from multiple vendors, and conduct continuous performance and
feature tuning. As a result, it is difﬁcult to generate and maintain
the conﬁguration even for a moderately-sized network. A recent
survey [40] found that conﬁguration errors are a large portion of
operator errors, which are in turn the largest contributor to failures
and repair time. Another survey [29] found that more than 60% of
network downtime is due to human conﬁguration errors. It further
showed that more than 80% of IT budgets are allocated towards
maintaining the status quo, a percentage that will only increase due
to “increased complexity, lower budgets, and continued business
demand.”
One way to reduce conﬁguration errors is to use conﬁguration
generation tools (e.g., [2]) and/or validate the conﬁguration ﬁles us-
ing static analysis or simulation (e.g., [15,17,22,37,53]). Although
these tools can be quite useful, for example, it has been noted that
the conﬁguration analysis tool NetDB provides AT&T signiﬁcant
cost savings [47], these tools are inherently limited in the problems
that they can detect. In particular, since conﬁguration ﬁles alone
do not determine the behaviors of a network, analyzing only the
conﬁguration ﬁles based on an abstract model of the network and
equipment behaviors may leave many problems undetected.
Recognizing the limitations of static analysis and simulation tools,
some network operators and equipment vendors build test networks.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
For example, Cisco has built the NSite [11] facility to test network
conﬁgurations before actual deployment. However, for most com-
panies, the cost of maintaining a testbed sufﬁciently similar to the
operating network is prohibitive.
Given the limitations of these existing approaches, conﬁguration
modiﬁcations are frequently deployed into the operating networks
without realistic testing. As a contrast, software developers depend
mostly on debuggers and actually running their programs before
deployment. They run unit and regression tests for correctness and
conduct stress tests to validate the programs under load. It would be
difﬁcult to imagine the extent of software errors if programs were
deployed after only passing through analysis or simulation tools
without actually running on the target platform. However, there is
no such capability for IP network conﬁguration [38].
In this paper, we propose such a novel capability called shadow
conﬁgurations. With shadow conﬁgurations, a network operator
may specify two conﬁguration ﬁles for a router: one real (current)
and one shadow (alternate). The shadow conﬁguration ﬁles on a
set of routers form a shadow conﬁguration that the network opera-
tor intends to replace the current conﬁguration ﬁles. The operator
can test the shadow conﬁguration ﬁles on the actual network with-
out enabling them as the network’s real conﬁguration. Running on
the existing network infrastructure, this capability is low cost, and
thus may be utilized in daily operations. During the testing process,
the current network conﬁguration is still running and forwards real
trafﬁc; the shadow conﬁguration carries only testing trafﬁc and will
not cause disruptions to the operation of the current conﬁguration,
even if there are errors in the shadow conﬁguration. The operator
conducts correctness and performance tests on the shadow conﬁg-
uration. Our usage of the term “shadow” is motivated by computer
graphics, where instead of directly modifying the current display
buffer, the display system often uses a shadow buffer to compute
the next frame to be displayed.
In particular, by running a set of conﬁguration ﬁles directly on
the actual network to which they will be applied, a shadow con-
ﬁguration allows a network operator to evaluate the integrated ef-
fects of alternate conﬁguration ﬁles, router software implementa-
tion (including protocol mis-implementations!), the physical net-
work status, and dynamic information such as imported external
route advertisements. Many integrated effects on routing are natu-
rally summarized by the forwarding information base (FIB) at each
router. We take advantage of the compact FIB representation and
develop techniques to analyze the FIBs for conﬁguration validation
and adjustment.
Further exploring its beneﬁts, we show how shadow conﬁgura-
tion allows a network operator to evaluate, before actual deploy-
ment in the real network, whether a set of conﬁguration changes
will have the desired effect on network performance. Such realis-
tic performance evaluation reduces the dependency on unrealistic
models or assumptions of router processing or the network. Also,
the availability of the on-going real trafﬁc in the actual network
allows the operator to duplicate a controlled portion of it as test-
ing trafﬁc in addition to generated testing trafﬁc. This reduces the
need to generate realistic testing trafﬁc patterns. One potential is-
sue of conducting testing on the shadow conﬁguration is that if we
naively send both shadow and real trafﬁc, the combined trafﬁc may
overload some network links. Thus, we develop a novel technique,
referred to as packet cancellation, to allow both real and shadow
trafﬁc to be forwarded in parallel without overloading the network.
After the operator is satisﬁed with the new conﬁguration, she can
simply quickly and smoothly swap the real and shadow conﬁgura-
tions with minimal network disruptions. We develop a commitment
capability for shadow conﬁgurations to reduce the effects of churn
and convergence. This usage pattern can be viewed as “two-phase
commitment” for network conﬁgurations.
To demonstrate feasibility, we extend the Linux kernel and im-
plement necessary components to support shadow conﬁgurations in
both Quagga [41] and XORP [23] software routers. We show that
shadow conﬁgurations can be implemented efﬁciently, with only
12 additional lines of code on the kernel’s forwarding fast path for
packets not using packet cancellation, and no code changes to rout-
ing processes. The FIB memory increase to support both real and
shadow conﬁgurations is less than 35% for the worst-case router
under a variety of shadow conﬁgurations for a large US tier-1 ISP;
the average is much smaller, less than 7%. At run time, our shadow-
enabled forwarding engine under heavy trafﬁc has no more than
1.2% CPU usage overhead with a shadow conﬁguration installed.
We also demonstrate the usage of shadow conﬁgurations. We
show in real implementation that the commitment ability avoids
the transient routing convergence period under router maintenance,
shutdown and OSPF weight changes. We demonstrate our packet
cancellation technique in a usage scenario where the operator tests
the impact of a new conﬁguration on a streaming video application.
In this case, the combined (raw) shadow and real trafﬁc intensity
can be as high as 1.05 times the capacity of some links. However,
packet cancellation shields real trafﬁc from shadow trafﬁc while
at the same time, the measured performance of the shadow video
streams is close to the case when it is using the network alone (dif-
ference is less than 1%).
In summary, we have made the following contributions:
• We propose the novel capability of shadow conﬁgurations.
• We develop novel techniques for conﬁguration analysis, evalua-
• We provide an implementation and demonstrate that the shadow
conﬁguration capability can be implemented with low overhead.
tion and management.
2. MOTIVATING USAGE SCENARIOS
To drive our system design, we conducted a survey of operator
conﬁguration usage scenarios. Below, we list several key usage sce-
narios that we would like to support using shadow conﬁgurations.
The objective of the list is not to be complete, but to motivate our
design.
Equipment Maintenance, Testing: A network operator may need
to shutdown a running router or link for maintenance. For example,
many hardware and software updates suggest that a router or net-
work interface card be taken ofﬂine during the process. To prepare
for a shutdown, the operator makes the shadow conﬁguration the
same as the real conﬁguration except that the link or router to be
shutdown does not appear in the shadow conﬁguration. The oper-
ator evaluates the shadow conﬁguration, makes potentially neces-
sary adjustments, and then commits it as the real conﬁguration.
As another example of an equipment shutdown usage scenario,
a surveyed operator commented that he needs to periodically shut-
down a primary link to test if its backup link is operational and
will be used after network reconvergence. Since the capacity of
the backup link may be lower than the primary link, such tests may
cause network disruptions. With shadow conﬁgurations, he can just
shutdown the primary link in the shadow conﬁguration and test if
the backup link will be used in the shadow conﬁguration after re-
convergence.
After the maintenance or addition of a new network device, the
operator includes the device in the shadow conﬁguration, evaluates
Configuration Management
Delta-Debugging
Configuration User Interface
FIB analysis
Shadow Traffic Control
Run-time Shadow Management
BGP
OSPF
IS-IS
Shadow Management
Commitment
OSPF
IS-IS
BGP
Forwarding Engine
Shadow-enabled FIB
Shadow Bandwidth Control
NIC0
NIC1
NIC2
Figure 1: System architecture for network management with
shadow conﬁgurations.
the effects, and makes adjustments before switching to the new con-
ﬁguration. This step can be particularly useful as multiple surveyed
network operators commented that it is common for issues to arise
after a maintenance upgrade.
Conﬁguration Parameter Tuning: Many network operators need
to tune conﬁguration parameters to address performance or secu-
rity issues. For example, a network operator may conduct trafﬁc
engineering to improve network performance, and many trafﬁc en-
gineering techniques (e.g., [18, 19, 39, 42]) require the modiﬁca-
tion of conﬁgurable parameters (e.g., OSPF weights or egress point
selections). However, such parameter adjustments may cause dis-
ruptions due to human error or routing reconvergence. As another
example, a network operator may change its network access control
list. However, such changes may lead to network disruption due to
mis-conﬁgurations or unexpected interaction with routing. Shadow
conﬁgurations support such tuning of parameters and testing cor-
rectness and performance.
Network Diagnosis: One problem with network diagnosis is that
it is difﬁcult to conduct root-cause analysis (e.g., end-to-end perfor-
mance violations). Although many network diagnosis techniques
have been proposed lately (e.g., [5, 13, 25, 28, 31, 32, 43, 45, 46]), a
major limitation of network support is that they cannot easily con-
duct unit or “destructive” testing [47] as is done in software debug-
ging. Shadow conﬁgurations allow a network operator to construct
a shadow network on a subset of the network, and compare the
differences in the real and shadow conﬁgurations to help with root-
cause analysis. In particular, the delta [54] testing technique for
software debugging can be particularly helpful to the automation
of conﬁguration debugging.
Feature/Service Testing: A network operator may be reluctant
to enable new features (e.g., queue management or scheduling al-
gorithms) or services (e.g., VoIP) on her operational routers due to
concerns of unknown performance impacts, as many factors affect
network performance [8, 35, 49, 55]. Shadow conﬁgurations allow
the operator to conduct an evaluation in the shadow conﬁguration.
She can ﬁnally commit the shadow conﬁguration as the real one
once the integration is veriﬁed to work correctly.
3. SYSTEM OVERVIEW
We now present an overview of our system. The key components
in our system are shown in Figure 1. We focus on a high-level
overview in this section. Details and implementation of several
components will be discussed in the following sections.
We divide our system into three layers: (1) forwarding engine;
(2) run-time shadow management layer; and (3) conﬁguration man-
agement.
3.1 Forwarding Engine
Foundation
The key component is a forwarding engine supporting both real
and shadow conﬁgurations.
In this discussion, we focus on the
ISP AS
srnet
X
Peering AS
Shadow traffic
control
New router
Shadow packets dropped
Figure 2: Network with an srnet being used to install a new
router to support new services. The new router has its real
conﬁguration disabled during installation.
forwarding information base (FIB) for presentation, but note that
the forwarding engine handles other items such as access control
lists (ACLs) as well.
Let {1,··· ,N} be the set of routers in a conﬁguration. Let C =
{C1,··· ,CN} be their conﬁguration ﬁles. In abstraction, the control
plane converts the conﬁguration ﬁles into a conﬁguration for the
forwarding plane: C ⇒ { fibi}i, where fibi is the FIB at router i.
The FIB entries at an interface maps a destination IP address to an
output interface.
We refer to a set of connected routers running a shadow con-
ﬁguration as a shadow-running network or srnet for short. In this
paper, we consider only the case where a srnet belongs to a sin-
gle autonomous system (AS). A srnet is likely to be the whole IP
network of the AS, but can be only a subnet. The latter possibility
gives ﬂexibility such as incremental deployment. A router i inside
a srnet has two conﬁguration ﬁles: Cr
i for the real conﬁguration and
Cs
i for the shadow. In the forwarding engine, it will then have two
FIBs, ( fibr
A link (interface) may leave a srnet, and we refer to such a link
as a border link. The FIB at such a border link will need to contain
ingress and egress policies for how to handle incoming and exiting
shadow packets. Figure 2 shows a network containing a srnet.
i ), for the real and shadow respectively.
i , fibs
When a packet arrives at a border link of a router i, the router
uses the ingress policy to determine whether it should apply fibr
i
or fibs
i . We refer to a packet forwarded using the shadow conﬁg-
uration as a shadow packet, and a packet forwarded according to
the real conﬁguration as a real packet. Router i uses a shadow bit
in the IP header to indicate whether it is a shadow packet or a real
packet.
When another router j receives a packet, it checks whether the
packet is a real packet or a shadow packet, and uses the correspond-
ing forwarding table. If it is a shadow packet and is leaving the
srnet, the egress policy is applied (e.g., dropped).
Shadow Bandwidth Control
With both shadow and real trafﬁc using the same network, we need
a shadow bandwidth control component to regulate the bandwidth
sharing. In particular, testing the performance of a shadow conﬁg-
uration should not cause disruption to the real trafﬁc. We focus on
network bandwidth, but one could also consider processing band-
width. For example, per-packet processing such as IP lookup may
be the bottleneck.