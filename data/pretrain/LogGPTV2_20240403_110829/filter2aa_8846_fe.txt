②实现攻击（Implementation Attack）/执行攻击。利用加密程序存在的漏洞，简单易
行，破密首选。包括 3 种形式：
*旁路攻击 Side-channel analysis，依靠能量消耗、放射性等密码系统运行时的物理属
性来攻击，如计时分析和电磁差分分析。
*故障分析 Fault Analysis，通过注入错误信息来对比、记录、分析系统的加密漏洞。
*探测攻击 Probing Attacks，在密码模块周边进行探测和注入，希望能采集到算法或密
钥什么的。
③统计攻击（Statistical Attack）。利用密码系统的统计弱点，例如无法真正生成随机
数，浮点运算的错误等。统计攻击试图发现运行密码系统的硬件或操作系统的漏洞。
④穷举攻击（Brute Force/Exhaustive search）。暴力攻击。为了提高速度，通常使用
彩虹表。密码一般以散列值的方式存在数据库里，彩虹表是预先计算和整理出的散列值映射表，
可以大幅提高猜解速度。
⑤仅知密文/唯密文攻击（Ciphertext Only Attack）。最难的攻击，因为只有几条密文，
其它啥也没有。只能通过频率分析进行统计学的攻击和预测。因为 26 个字母中，E,T,O,A,I,
是出现频率最高的。
⑥己知明文攻击（Known Plaintext）。手上有明文，也有密文，然后想办法破解。
⑦选定密文/可选密文攻击（Chosen Ciphertext）。手上有密文，只有部分密文有明文。
—285—
⑧选定明文/可选明文攻击（Chosen Plaintext）。可以加密部分明文得到密文。
⑨中间相遇攻击（Meet in the Middle）。面向加密运算，通过计算查找出密钥对（K1
加密的密文可以用 K2 解密），便两轮加密算法即双重 DES(2DES)的实际强度和一轮加密一样。
⑽中间人攻击（Man in the Middle）。面向通信链路，在攻击者以通信代理的方式插入
收发又方的通信，截获所有数据流。
⑾生日攻击（Birthday）。也称为冲突攻击或逆向散列匹配，利用生日悖论来进行穷举攻
击和字典攻击，寻找可以生成相同消息摘要的不同消息。
⑿重放攻击（Replay）。既然破不了密，就截获加密的消息，下次直接重复使用它来进行
身份验证什么的。如果系统有时间戳，这个方法就不能用了。
⒀微分/差分密码分析(differential cryptanalysis)。
差分密码分析攻击以找出加密密钥为目标。这种攻击会查看对具有特定差异的明文进行加
密而生成的密文对，并且分析这些差异的影响和结果。它在 1990 年作为一种针对 DES 的攻击
发明出来，后来演变成为一种针对 DES 和其他分组算法的成功而有效的攻击。攻击者使用两
条明文消息，并在它们经过不同的 S 盒时跟踪分组上发生的变化(每条消息都以相同的密钥加
密)。得到的密文中已确定的差异用于推测不同可能密钥值的概率。攻击者使用其他几组消息
继续上述过程，并检查公共密钥概率值。随着加密过程中的大多数可能值都被用到，密钥也就
逐渐显露出来。由于攻击者选择不同的明文消息进行攻击，因此它也是一种选定明文攻击。
⒁线性密码分析(linear cryptanalysys)。是一种已知明文攻击，利用线性近似来描述块
密码的行为。如果有足够多的明文和相应密文对，便可得到有关密钥的少许信息，而数据量的
增加通常会给成功带来更高可能性。
⒂彩虹表。彩虹表是对散列输出进行过分类处理的查询表，相当于密码字典的作用，提高
了破解速度。
⒃因子分解攻击。以 RSA 算法为目标。由于该算法用大质数的乘积生成公钥和私钥，这种
攻击试图通过分解这些数的因数来找出密钥。
⒄逆向工程。这种攻击很常用。买一套同款的密码系统，反编译来分析算法找漏洞。
⒅社会工程。坑蒙拐骗、威逼利诱什么的。
六、基于编码缺陷的攻击（第三域）
①维护钩子和特权程序 Maintenance Hooks and Privileged Programs
就是后门。A maintenance hook（维护钩子）、A back door（后门）、A trap door（陷
门）都是一样的。但都不是 A Trojan horse（木马）。
②增量攻击 Incremental Attacks
某些攻击形式以缓慢的、渐进的增量方式发生，而不是通过明显的或可识别的活动来危害
系统的安全性或完整性。对数据进行细小的、随机的或增量的改变是不容易被发现的。数据欺
骗和 salami 攻击就是这样的攻击形式。Salami 就是每次雁过拔毛（就薅一点羊毛）。它的另
一种说法就是 Data diddling（数据欺骗）。
加密的文件系统可以保证不会发生数据欺骗。对于 salami 只有通过适当的责任分离和对
代码的适当控制，才能完全阻止或消除，尤其是金融上要监控小额交易。
—286—
③竞争条件 race conditions ——检查时间/使用时间(TOC/TOU)
竞争条件和 TOC/TOU 攻击之间的差异是细微的，但安全专业人员必须理解它。
检查时间/使用时间：发生在多任务操作系统中，就是在两个进程中强插一个进程。如：
进程 1 用来验证和授权用户，进程 2 用来调用被授权访问的这个文件；如果攻击者重定向进程
2 打开另一个涉密的文件，那么攻击者就执行了 TOC/TOU 攻击。为了避免 TOC/TOU 攻击，操作
系统使用软件锁的概念，即对进程要访问的文件或资源使用一个锁，此时，这个文件不能被另
外一个文件取代。
竞争条件：是 TOC/TOU 攻击的另一种形式，攻击者操纵两个进程的执行顺序，强制其乱执
行。多个进程要使用同一个资源时，竞争条件就会发生。如：先验证后访问的顺序被颠倒过来。
为了防止条件竞争攻击，程序应该不允许关键任务被分开执行，系统内要实现原子操作。
④高级持续性攻击(advanced persistent threat, APT)。
“震网”事件就是 APT。
特点：常用于军事，一般是一个攻击团队，具有很强的能力和技巧（高级性），资金充足，
针对具体明确的特点目标，低调隐蔽择机行动（持续性）。
防御：杀毒等主机检测方法是查不出高级木马的，通常通过分析网络流量来判断，即主机
有新的 IRC 连接时，则表明系统里有僵尸在尝试与外部命令中心通信。
⑤洛基攻击 Loki
Loki 攻击是今天最常用的一种隐蔽通道，这种攻击使用 ICMP 协议进行通信。Loki 工具允
许攻击者紧接着 ICMP 首部之后写入数据。
⑥中间人攻击
入侵者将自己插入两台计算机正在进行的对话中，因而能够拦截并阅读它们之间来回传送
的信息。使用数字签名和相互身份验证技术可以防止这类攻击。
⑦泪滴攻击
这种攻击向受害者发送畸形的分片数据包。通常，受害者的系统并不能正确地重新装配这
些数据包，因此造成死机。
防止这类攻击的对策是给系统安装补丁，并使用进入过滤以检测这些数据包。
①缓冲区溢出：有很多方法创建或利用缓冲区溢出，但下面是个缓冲区溢出是如何工作的
一般示例。一个是攻击目标的程序，被提供了比这个应用想处理的更多的数据。这可以通过很
多方法完成，如在一个对话框中输.入过多的文本，提交一个太长的 web 地址，或创建一个比
需要大得多的网络报文。被攻击的程序(目标)溢出了分配给输入数据的内存并且把超出的数据
写入了系统内存。过量的数据可能包含机器语言指令，这样当下一步执行时，攻击代码，像
Trojan 木马或其它类型的恶意代码，就会运行。(经常地，多佘数据的靠前部分包括被 CPU 读
做“无操作”(NOP)的字符，形成一个“NOP”雪橇。恶意代码通常在多余数据的末尾。
实际的攻击方法更为详细且高度依赖目标操作系统和硬件架构。追求的结果就是把攻击代
码放入到内存。这些指令通常做一些，诸如以一定方式给内核打补丁来在一个提升的权限级别
执行另一个程序的事情。有时，恶意代码将调用其他程序，或甚至从网络上下载它们。
②全民程序员：由于台式和个人计算机(甚至应用程序，现在)都配备了脚本和编程工具，
允许所有计算机用户创建他们自己的工具是一种常见的做法。这可能产生极其有害的后果并且
—287—
可能违反职责分离的原则。如果允许这种未被监管的编程，那么一个单独的用户可能完全控制
一个应用或过程。虽然传统上程序员很少或没有接受过安全需求培训，他们至少也要对软件质
量，可靠性和互操作性的问题有基本的了解。普通用户没有这样的培训并且可能创建安全和可
靠性都有问题的应用。Visual Basic，包含在 1vlicrosoft Office 套件中，经常被全民程序
员用来开发他们的应用或扩展一个存在的应用。公民，或普通的，程序员不可能经过系统开发
实践培训或约束，其涉及正确的应用设计，变更控制，和应用的支持。因此，以这种方式开发
应用可能是混乱的并且缺少对安全的任何形式的保证。在需要的时候，它应该作为策略，执行，
意识，和约束的问题解决。
③隐蔽信道：一个隐蔽信道或限制问题是一个信息流问题。它是一个通信信道，允许两个
协作的进程以违反系统的安全策略的方式传递信息。即使已经存在保护机制，如果末授权的信
息可以通过信号机制在实体或对象之间传递，其通常被认为不能通信的，那么一个隐蔽信道可
能存在。用简单的术语，它是任何的信息流，故意的或无意的，它使一个没有这个信息、的授
权的观察者，可以去推断它是什么或它的存在。这在包含高度敏感信息的系统中是重要的问题。
通常定义的隐蔽信道类型有两类：存储和时间。
一个隐蔽存储信道涉及一个进程直接或间接读取存储位置同时另外一个进程也在直接或
间接地读取相同的存储位置。通常，一个隐蔽存储信道涉及有限的资源，例如内存位置或磁盘
上的扇区，其被在不同安全级别的两个主体共享。
一个隐蔽时间信道取决于能够影响一些其他进程能获取资源的速率，例如 CPU，内存，或
I/O 设备。速率的变化也许可以用来传递信号。本质上，把信自、的传递给其它进程的进程调
制它自己对系统资源的使用，以这样的方式进行，这个调制影响了第二个进程观察到的真实的
啊应时间。通常认为时间信道没有存储信道效率高，因为它的带宽减小了，但它们通常更加难
以检测和控制。
这些例子只与一种情景相关，其中一个内部人员试图给外部人员提供信息且在应用中受到
很大限制。为了对隐蔽信道有一个全面的见解应该设想一个更广泛的概念，它包括，例如，无
意的隐蔽信道，其使一个未明或未授权的人员可以观察一个系统的活动，其使一个不应该知道
的人可以推理事实。
④格式不正确的输入攻击：目前己知，一些攻击利用来自用户的输入，并且各个系统检查
和防范此类攻击。因此，一些新的攻击依赖于以不寻常的方式配置那个输入。例如，一个攻击，
其将 web 浏览器重定向到另外一个站点，可能被防火墙通过检测一个不当站点的统一资源定位
符(RUL)而捕获。然而，如果该 URL 用 Unicode 编码而不是 ASCII,防火墙可能会无法识别这个
内容，而 web 浏览器则很容易地转换这个信息。
在另一种情况，很多站点允许请求访问数据库，但在请求上放置过滤器来控制访问。当允
许请求使用结构化查询语言(SQL)时，在查询中使用某些特定语法结构可能骗过过滤器，其把
查询看成了注释，于是查询可能提交到数据库引擎并且取回比所有者允许的更多的信息。在另
一个例子中，一个站点允许用户输入信息让以后其他用户检索，例如一个博客，当输入以活动
脚本的形式时，可能无法检测到。这是跨站脚本攻击的基础。(缓冲区溢出也是格式不正确输
入的一种。)
⑤内存重用(对象重用)：内存管理涉及分配给一个进程一段时间内的内存段，然后取消分
—288—
配，然后重新分配给另一个进程。因为残留的信息可能保持，当之前的进程用完它之后，一个
内存段可能被重新分配给一个新进程，一个安全违反可能出现。
当内存被重新分配后，操作系统应该确保内存被彻底清零或完全写覆盖，在它在能被新进
程访问之前。因此，内存中没有残留信息从一个进程带到另外一个进程。在这方面内存位置是
首要关心的问题，开发者也应该小心重用其它可能包含信息、的资源，例如磁盘空间。磁盘上
的分页或交换文件经常得不到保护，如果没有小心地采取保护，可能包含大量的敏感信息。
注意，内存或对象重用可能是隐蔽信道的一种形式，如前面所讨论。
⑥可执行内容/移动代码：可执行内容，或移动代码，是一种软件，它从远程源通过网络
传输到本地系统，然后在本地系统上执行。代码的传输是由用户的行为触发的，在某些情况下，
没有用户明确的行动。该代码可能作为电子邮件的附件或通过网页到达本地系统。
移动代码有很多名称：移动代理，移动代码，可下载代码，可执行的内容，活动的胶囊，
远程代码等。尽管词语似乎是相同的，但也有细微的差别。例如，移动代理是可以从主机迁移
到网络中的主机的程序，有时可能是它们自己选择的位置。它们高度自治，而不是直接地受控
于一个中心点。移动代理不同于小程序，它们是作为用户的操作结果而下载的程序，之后从头
到尾都是在一个主机上执行。例子包括 ActiveX 控件，Java 小程序，和运行在浏览器中的脚
本。所有这些都与远程源代码在本地执行相关。
七、针对网络的攻击（第四域）
1.DoS 和 DDoS/ denial-of-service
拒绝服务攻击是一种资源消耗型攻击，它以阻止受害系统的合法活动为主要目标。DoS 不
是一个单一的攻击，而是指一类攻击。一些攻击利用操作系统软件的缺陷，而其他的则把重点
放在安装的应用程序、服务或协议。一些攻击利用具体的协议，包括互联网协议 IP，传输控
制协议 TCP，lnternet 控制消息协议(ICMP)和用户数据报协议 UDP 等。
靠一台主机攻击显然力量不够，最好是 DDOS，通过僵尸网络来搞，还能隐藏自己。
怎么防 DOS 不说了，应该都想得到。考试中有使用 tarpit 来防御 DOS，类似于蜜罐，是
一个模拟的有漏洞的服务组件，当遭受一些非法扫描等攻击时，它会让攻击者的自动扫描的工
具软件出现响应失败或连接超时。
2.偷听/窃听 Eavesdropping
窃听需要搭线。由于使用的是被动攻击方式，因此检测偷听设备和软件通常较为困难。如
果偷听或窃听从而更改通信数据或在其中添加数据，则属于主动攻击类型。Sniffers、
NetWitness、T-Sight、Wireshark、Zed Attack Proxy (ZAP)等好多工具可以用。
保证在内部基础架构之外安全可靠地传输数据是极其重要的，就是要加密。
3.假冒/伪装 Impersonation/Masquerading
模仿或是伪装，是一种假装是某人或假装是某物并获得未经授权而访问系统的行为。这通
常意味着认证证书被窃取或者遭受篡改并满足(即成功地绕过)认证机制。这不同于欺骗，实体
提出了一个虚假的身份但没有任何证据(如错误地使用 IP 地址、MAC 地址、电子邮件地址、系
统名称、域名等)。模仿往往可以通过捕获网络服务会话设置中的用户名和密码加以实现。
对付假冒攻击的解决方案包括：使用一次性填充和令牌身份验证系统，使用 Kerberos ，
—289—
使用加密，从而增加从网络通信中提取身份验证凭证的难度。
4.重放攻击 Replay Attacks
重放攻击是假冒攻击的一种，它可以利用通过偷听捕获的网络通信进行攻击。重放攻击企
图通过对系统重放被捕获的通信来重建通信会话。你可以使用一次性身份验证机制和序列化会