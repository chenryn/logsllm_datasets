的警告来处理。在这种情况下，列会被更新成最近的合法值。
下，IGNORE关键字还将使得INSERT语句把会导致它终止执行的数据转换错误当作一个不那么致命
剩余的行将不再被更新。加上IGNORE将使这些行不被更新，并且不会报告出错。在严格SQL模式
那些使用表级锁定的存储引擎，如MyISAM或MEMORY。
请参考附录G里的mysql_real_connect（）函数条目。
生任何实质性变化，UPDATA语句将不把它统计在内。如此说来，把某个列设置为它的当前值不算影
SET子句里给出的每一列将被设置为相应表达式的值。
二者的区别在于：这里不再允许把子查询当作表。
tbl_refs的语法和 SELECT的相似（包括对紧跟在每个表名后面的那个PARTITION子句也一样)
情况下，如果将被更新的行不在指定的分区里，那么它会保持不变。
UPDATE支持针对分区表使用PARTITION子句，以表明行需要更新到哪一个分区或子分区。在这种
则服务器会自动释放该客户端所占有的表锁。
列出的所有列都应该会引用到第一个 SELECT 语句里的各个列的名字。
712
对于操作多个表的UPDATE语句，其WHERE子句可以基于表之间的连接指定条件，并且其 SET
如果带有ORDER BY子句，UPDATE 语句将按给定顺序依次修改行。这个子句的语法与 SELECT
如果更新行会导致某个唯一性索引出现重复的键值，那么UPDATE语句将终止执行并报告出错
LOW_PRIORITY子句将使这条语句的执行被延迟到没有客户端读取该表为止。此选项只适用于
只有用WHERE子句所给出的表达式筛选出来的那些行才会被修改。对于选出来的每一个行，在
UPDATA语句的第二种语法类似于第一种，但是允许一次给出多个表以进行一次多表修改。
USE db_name
UPDATE t INNER JOIN t2 SET t.quantity = t2.quantity WHERE t.id = t2.id;
如果给出LIMIT子句，则其中的n值指的是将被更新的最大行数。
默认情况下，UPDATE语句返回的是它实际更新的行的个数。如果某个行的列在修改前后没有发
如果没有给出任何WHERE子句，那么表里的所有行都将被修改。
WHERE子句允许包含子查询，但不允许子查询从正被修改的表选取行。
·USE
UPDATE[LOW_PRIORITY][IGNORE]
●UPDATE
这条语句会释放当前客户端所占有的所有表锁。如果客户端开始了事务，或者客户端会话终止，
UNLOCK(TABLEITABLES}
·UNLOCKTABLE
SET
[WHEREwhere_expr]
附录ESQL语法参考
CO1
expr
col
name=expr
---
## Page 733
测试任意条件。
WHEN表达式时，相应的THEN关键字后面的语句列表将被执行。这个适用于执行“不等于”测试或
较时，这个会比较有用。
在找到第一个匹配时，相应的 THEN 值后面的语句列表将被执行。在将某个给定值与一组值进行比
们必须出现在BEGIN块的开头部分。
多条语句，就必须把它们放在一个BEGIN块里。此外，如果BEGIN块包含有 DECLARE语句，则它
守以下规则。
里，每个stmt_list代表一个由一条或多条语句构成的语句块，每条语句都以一个分号字符（；）结束。
E.2.1控制结构语句
会出现在用来定义存储例程的语句里。与定义存储程序有关的更多信息请参考4.2.1节。
解释那些“;”字符。使用delimiter 命令可以做到这一点。在挑选语句分隔符时一定要保证它不
含有多条语句的存储例程，则必须临时性地重定义mysql的语句分隔符，以确保mysql 本身不会去
条或多条语句构成，可用于编写保存在服务器端的存储程序：函数、过程、触发器和事件。
E.2
collation_database 设置为数据库的字符集和排序规则。
在 USE语句执行成功之后，服务器将把会话级系统变量character_set_database 和
如果没有给出初始表达式expr，那么 CASE 语句将计算 WHEN 表达式。在遇到第一个值为真的
有些构造可以带有标签（如 BEGIN、LOOP、REPEAT和WHILE)。标签不区分大小写，
本节里将介绍一些能把语句归聚为语句块并提供各种流程控制构造的语句。在这些语句的语法表达式
程序体内部的每条语句都必须以分号（：）字符结尾。如果打算使用mysql程序来创建一个包
IF语句提供了一种分支型的流程控制构造。这条语句不同于C.2.1节里介绍的 IF（）函数。
如果没有找到匹配的 WHEN表达式，则执行ELSE子句的语句列表，如果有的话。
口如果某个构造的开头没有与之匹配的标签，那么该标签不能出现在这个构造的末尾。
口如果标签出现在某个构造的开头，那么与之同名的标签也需要出现在该构造的末尾。
本节描述的内容是用来编写复合语句的语句的语法。复合语句由关键字BEGIN 和 END 之间的一
如果指定了初始表达式expr,那么CASE 语句会将它与跟在每个 WHEN 后面的表达式进行比较。
CASE语句提供了一种分支型的流程控制构造。这条语句与C.1.4节描述的CASE运算符不同。
CASE
BEGIN...END 构造会创建一个语句块，其中可以包含多条语句。如果某个存储程序体需要包含
●BEGIN...END
如果给定数据库不存在或者是你没有访问它的权限，那么USE语句会失败。
ENDIF
IF
ENDIF
CASE [expr]
把 adb_name 设定为默认数据库(未显式给出数据库名的表、视图或存储程序引用的数据库)。
WHENexprlTHENstmt_list1
SQL语句语法（复合语句）
expr
THEN stmt_list2]..
.E.2SQL语句语法（复合语句）
，但必须遵
713
---
## Page 734
E.2.2声明语句
语句。
的执行，表达式expr的值将被传递给调用这个函数的语句。
造的内部。
REPEATE和 WHILE语句内。
如果有的话。
THEN关键字后面的语句列表。如果所有表达式的计算结果都为真，则执行ELSE子句里的语句列表，
各ELSEIF 关键字后面的表达式进行计算。在遇到第一个值为真的ELSEIF 表达式时，执行相应的
714
·如果IF关键字后面的表达式为真，则执行第一个THEN关键字后面的语句列表。否则，依次对
DECLARE var_name [, var_name] ... type [DEFAULT value]
DECALRE
这条语句用来创建一个执行循环。循环内的语句将反复执行，只要表达式expr的值为真。
DECLARE condition_name CONDITIONFOR named_condition
WHILE
RETURN 语句只能用在存储函数里（不能用在存储过程、触发器或事件里)。它会终止存储函数
handler_type:(CONTINUEIEXIT)
DECLAREcursor_name CURSORFORselect_stmt
named_condition:(SQLSTATE [VALUE] sqlstate_value Imysql_errno)
RETURN expr
●RETURN
这条语句用来创建一个执行循环。循环内的语句将反复执行，直到表达式expr的值为真为止。
这条语句用来创建一个执行循环。
·LOOP
LEAVE 语句用来退出一个带有给定标签的流程控制构造。该语句只能出现在带有给定标签的构
LEAVE
ITERATE语句用来开始循环的下一次迭代，它只能在循环构造内部使用。它可以出现在LOOP、
●ITERATE
handler_condition:
REPEAT
LEAVE label
ITERATElabel
Imysql_errno
statement
SQLSTATE [VALUE] sglstate_value
附录ESQL语法参考
，循环内的语句将反复执行，直到控制权被转出该循环。
一个存储函数里至少要有一条RETURN
---
## Page 735
演示了如何使用与游标相关的所有语句。它还展示了DECLARE的所有变体一
是只读的，并且是每次只能移动到结果集里的下一行（也就是说，它们无法滚动)。下面这个的例子
E.2.3
件发生，该语句便会被执行（该语句可以是一条 BEGIN..：END 复合语句）。那个handler_type
用CLOSE 语句关闭。
语句不得包含INTO子句。游标可以用OPEN语句打开，和FETCH语句一起使用可以检索行，可以
5-字符字符串表示的SQLSTATE值，也可以是一个数值形式的MySQL专用的错误代码。
HANDLER 语句、SIGNAL 语句和 RESIGNAL 语句里引用。named_condition可以是一个带引号的
初始值将为NULL。如果需要在例程里把值赋给局部变量，可以使用SET语句、SELECT·.．INTO
他语句块里使用。
前例程里使用的局部变量。局部变量只能在声明它们的 BEGIN 块里以及嵌套在该BEGIN 块内部的其
语句只能出现在 BEGIN 块的开头。如果有多条 DECALRE 语句，它们必须按以下顺序出现。
一起使用。
语
本节里的这些语句可用来打开或关闭游标，以及在打开期间用来获取行。在MySQL里，游标都
下一条语句；如果是EXIT，则立刻退出当前BEGIN块。
DECLARE··．HANDLER可以把一个或多个条件与一条语句关联在一起，从而只要其中某个条
DECLARE..．CURSOR 语法用来声明游标，并把它与给定的 SELECT 语句相关联，该 SELECT
DECLARE..．CONDITION 语法用来为条件创建名字。condition_name 可以在 DECLARE...
口数字形式的MySQL专用的错误代码。这个值不应该是零，因为那表示的是“成功”而不是
口由带引号的5-字符字符串表示的 SQLSTATE值。这个值不应该是由'00·开头的，因为那表
在DECALRE 语句里还可以用DEFAULT子句对局部变量进行初始化。如果没有DEFAULT子句，
handler_condition可以是任何一种以下类型的值。
如果在DECALRE关键字的后面以逗号为分隔符列出一组变量，就能把那些变量声明为可以在当
DECLARE 语句的变体用来声明局部变量、条件、游标（cursor）和处理程序（handler)。DECALRE
DECLARE more_data INT DEFAULT TRUE;
BEGIN
CREATE PROCEDURE p（)
口
口
D
（3）处理程序声明
(2）游标声明
（1）变量和条件声明
与DECLARE的各个类型有关的示例请参考E.2.3节。
NOTFOUND，它代表的是所有以‘O2·开头的SQLSTATE值。
DECLARE
SQLWARNING，它代表的是所有以‘O1·开头的SQLSTATE值，
使用DECLARE..．CONDITION语句提前声明的命名条件。
示的是“成功”而不是“错误”
BEGIN
游标语句
SQLEXCEPTION
NOT FOUND
SQLWAI
ARNING
curs
CURSORFORSELECT
E.2SQL语句语法（复合语句）
一它们通常与游标循环
715
---
## Page 736
语句。与
DIAGNOSTICS 来获得。也可以通过 SIGNAL 和 RESIGNAL 来显式地触发这些条件。本节将介绍这些
E.2.4
会变成02000（即表示NoData，无数据）。
里。该游标必须是打开的。如果已经没有可供提取的行，则会出现一个错误，并且SQLSTATE的值
声明的游标都将自动关闭。
在SQL语句执行过程中，它们会产生与发生条件有关的诊断信息。
condition_info_type:
GET[CURRENT]DIAGNOSTICS
·GET DIAGNOSTICS
打开给定的游标以便在后面的FETCH语句里使用它。
OPENcursor_name
OPEN
利用给定游标可以把结果集里的下一行提取到在关键字INTO后面列出的（一个或多个）变量
FETCH [[NExT] FROM] cursor_name INTO var_name [, var_name].
FETCH
关闭给定的游标，它在被关闭前必须是打开的。当一个 BEGIN 块结束时，在这个 BEGIN 块里
CLoSEcursor_name
·CLOSE
END;
1ROW_COUNT
与指定条件和条件处理程序的声明语法有关的信息请参考E.2.2节。
CLOSE curs;
END WHILE;
--打开游标，使用游标获取行，一直到No Data 出现为止
TABLE_NAME
RETURNED_SQLSTATE
SUBCLASS_ORIGIN
CLASS_ORIGIN
NUMBER
CONDITIONn
条件处理语句
附录ESQL语法参考
SCHEMA_NAME
CATALOG_NAME
CONSTRAINTNAME
CONSTRAINT_SCHEMA
CONSTRAINT_CATALOG
MYSQL_ERRNO
MESSAGE_TEXT
var_name = condition_info_type
var_name=stmt_info_type
END;
SET more_data = FALSE;
curs;
。这些信息可以通过GET
---
## Page 737
RETURNED_SQLSTATE的值。
目也可以用在 SIGNAL 和 RESIGNAL的 SET子句里。这两条语句会根据它们指定的条件间接设置
是字符串。
储过程参数。允许分配给这些变量的类型名将在下面介绍。其中，数字项都是整数值；其他的值都
达式组成。每个变量var_name都可以是用户定义变量、
类型条件。
件进行统计，看看是否有足够的空间存储它们。error_count 与之类似，但是它只会统计错误
的是累计出现了多少个错误、警告和注意类型的条件。这个值可以超过NUMBER，因为它会对条
式包括文本值、用户定义变量、系统变量、存储程序局部变量、存储函数参数或存储过程参数。
为把获取到的受影响行数和语句的条件数放到用户定义变量里，可以像下面这样做：
只有一个诊断区域，它始终是当前的。
引入的。
码）。这个诊断区域可以包含与多个条件有关的信息。GETDIAGNOSTICS是在MySQL5.6.4里
受影响的行数或发生的条件数）和与该语句生成的那些条件有关的信息（如错误信息和错误代
这条语句的剩下部分指明的是要获取什么样的信息，它由一个或多个以逗号分隔的变量赋值表
其中，CONDITION子句对应的条件编号必须是一个整数，范围是1到条件总数。指定它的方
每个GETDIAGNOSTICS 实例都会返回语句信息或者条件信息（带上CONDITION子句）。例如，
CURRENT关键字在MySQL里没有意义，可以省略掉。标准SQL拥有一个诊断区域栈。MySQL