title:Tell Me More Than Just Assembly! Reversing Cyber-Physical Execution
Semantics of Embedded IoT Controller Software Binaries
author:Pengfei Sun and
Luis Garcia and
Saman A. Zonouz
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Tell Me More Than Just Assembly!
Reversing Cyber-physical Execution Semantics
of Embedded IoT Controller Software Binaries
Pengfei Sun†, Luis Garcia∗ and Saman Zonouz†
† Electrical and Computer Engineering, ∗Electrical and Computer Engineering
†Rutgers University, ∗University of California, Los Angeles
{pengfei.sun, saman.zonouz}@rutgers.edu, {garcialuis}@ucla.edu
Abstract—The safety of critical cyber-physical IoT devices
hinges on the security of their embedded software that im-
plements control algorithms for monitoring and control of the
associated physical processes, e.g., robotics and drones. Reverse
engineering of the corresponding embedded controller software
binaries enables their security analysis by extracting high-
level, domain-speciﬁc, and cyber-physical execution semantic
information from executables. We present MISMO, a domain-
speciﬁc reverse engineering framework for embedded binary
code in emerging cyber-physical IoT control application domains.
The reverse engineering outcomes can be used for ﬁrmware
vulnerability assessment, memory forensics analysis, targeted
memory data attacks, or binary patching for dynamic selective
memory protection (e.g., important control algorithm param-
eters). MISMO performs semantic-matching at an algorithmic
level that can help with the understanding of any possible
cyber-physical security ﬂaws. MISMO compares low-level binary
symbolic values and high-level algorithmic expressions to extract
domain-speciﬁc semantic information for the binary’s code and
data. MISMO enables a ﬁner-grained understanding of the con-
troller by identifying the speciﬁc control and state estimation al-
gorithms used. We evaluated MISMO on 2,263 popular ﬁrmware
binaries by 30 commercial vendors from 6 application domains
including drones, self-driving cars, smart homes, robotics, 3D
printers, and the Linux kernel controllers. The results show that
MISMO can accurately extract the algorithm-level semantics of
the embedded binary code and data regions. We discovered a
zero-day vulnerability1 in the Linux kernel controllers versions
3.13 and above.
I. INTRODUCTION
Cyber-physical systems (CPS) interconnect, control and
monitor critical environments such as electrical power gen-
eration, transmission and distribution, chemical production,
oil and gas reﬁning and transport, and water treatment and
distribution. In recent years, cyber-physical Internet-of-things
(IoT) have received considerable attention due to security
concerns originated by the trend to connect
those critical
platforms to the Internet [39]. Critical infrastructures con-
nected to and controlled by CPS substantiate these security
concerns. Nevertheless, the number of CPS/IoT devices is
projected to reach 20.4 billion in 2020, forming a global
market valued $3 trillion [54]. Nation-state CPS malware such
as Stuxnet [24] against Iranian nuclear uranium enrichment
facilities and BlackEnergy [23] against the Ukranian train
railway and electricity industries show that targeted attacks
on critical infrastructures can evade traditional cybersecurity
1We have disclosed our discovery to the kernel development team.
detection and cause catastrophic failures with substantive
impact. The discoveries of Duqu [14] and Havex [43] show
that such attacks are not isolated cases as they infected critical
infrastructures in more than eight countries. Additionally, IoT
devices have been attacked over the years [7]. The Mirai
botnet [8], composed primarily of embedded and IoT devices,
took the Internet by storm in late 2016 when it overwhelmed
several high-proﬁle safety-critical targets with massive dis-
tributed denial-of-service (DDoS) attacks.
Control algorithms in cyber-physical IoT platforms act as
functional guarantees for the entire cyber-physical system [11],
[33], [37]. As indicated by the past attacks [24], [23], adver-
saries are often attracted to vulnerabilities that directly affect
the core embedded controller algorithm implementations. For
instance, Stuxnet modiﬁed the set-points for feed-back control
mechanisms within the variable frequency drives controlling
the motors for uranium enrichment centrifuges [24], [29]. This
was implemented by compromising the programmable logic
controllers (PLCs) communicating with the variable frequency
drives. BlackEnergy [23] modiﬁed the Ukraine’s power system
parameters in control algorithm implementations to cause
a blackout. Similarly, Harvey [26] implemented a ﬁrmware
rootkit in which the malicious control algorithm code issues
disruptive feedback-control actuation to the physical system.
At a higher level of abstraction, another work [47] showed
how the optimization control algorithm parameters in energy
management systems can be exploited to dispatch malicious
control commands to damage the electric power grid.
The recent exponential growth of major cyber-physical IoT
attacks indicate the insufﬁciency of existing security analysis
solutions to protect controller software in aforementioned
cyber-physical platforms. A common feature in most of the
past attacks has been the adversaries’ focus on affecting the
controller software behavior. As a result, the control algorithm
implementations within the critical controller software bina-
ries, e.g., the proportional-integral-derivative (PID) controller
in drone ﬁrmware, have become the main battleﬁeld for cyber-
physical security. Attackers try to hijack the control ﬂow
and/or corrupt sensitive parameters within those algorithms to
make the controller issue malicious actuation commands and
cause large-scale physical damage.
On the protection side, however, the state-of-the-art reverse
engineering and vulnerability assessment tools are unable to
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00045
349
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
extract and leverage precise, domain-speciﬁc cyber-physical
execution semantics of low-level embedded binary modules.
Therefore, they fail to reason about the impact of a particular
vulnerability to the overall system, e.g., the drone’s ﬂight
operation. Choi, et al. used system identiﬁcation of a drone to
generate control invariants based on a general control system
template [16]. They then instrumented the controller binary
to incorporate monitors at the end of the control loop to
ensure the system is abiding to these invariants. However, this
was a coarse-grained approach that could only detect extreme
deviations from the expected behavior and cannot pinpoint
which areas of the binary need to be protected. A prerequisite
for developing effective protection solutions would be a rich
understanding of the low-level controller software segments
that implement the core theoretical control algorithms. Such
knowledge about the high-level algorithmic semantics of the
controller software binary could then be used to identify and
protect sensitive code and data segments of an algorithm in
the binary, e.g., using CFI (Control Flow Integrity) [6] or
Intel SGX [17]. Development of the protection mechanisms
or attacks based on the discovered control algorithm details
in the software binaries is outside the scope of this paper.
Our objective is to extract the high-level algorithmic semantic
knowledge from closed-source (commercial) controller soft-
ware binaries in cyber-physical IoT platforms.
Access to source code is often unavailable for third-party se-
curity analysis of commercial off-the-shelf (COTS) embedded
software in cyber-physical control domains. This remarkably
limits the use of existing source code-based solutions [1], [10],
[2]. For binary executables, automatic reverse engineering
of their semantics provides intuitions about the program’s
functionality and expedites security analysis with respect to
discovering commonly known software bugs and vulnerabili-
ties. Advanced disassembler and debugger tools such as IDA
Pro [42] and OllyDbg [57] offer a variety of techniques to help
elevate low-level machine codes to more abstract representa-
tions (e.g., assembly instructions), increasing the readability
of a program for a user. For instance, such tools can identify
any known library functions in the disassembled program and
translate such function calls to their corresponding descriptive
symbolic names. However, such static binary analysis tools
mainly extract syntactical information and are not guaranteed
to preserve/extract the semantics of the original program [46].
Contributions. We present MISMO, a reverse engineering
framework to extract algorithm-level semantics from stripped
embedded software binary implementations of IoT and cyber-
physical control algorithms. MISMO utilizes dynamic binary
analysis and comparison of mathematical expressions to re-
cover a particular algorithm implementation’s cyber-physical
execution semantics . MISMO performs dynamic binary analy-
sis to locate the target subroutines of the executable that imple-
ments the control algorithm. The arithmetic operations of the
execution paths are analyzed symbolically to build a binary-
level abstract syntax tree (AST) for the corresponding output
values. The generated AST subtrees are recursively compared
to and matched with the algorithm-level AST subtrees of the
control theoretic expressions. Consequently, our solution ﬁlls
the semantic gap between the low-level binary executables
and high-level algorithmic descriptions with regards to control
and data ﬂows. MISMO’s ultimate output is to provide the
security analysts with domain-speciﬁc cyber-physical exe-
cution semantics information about the IoT/CPS binary by
annotating individual disassembled instructions and memory
addresses with the corresponding algorithm-level operation
and mathematical parameters, respectively.
Our contributions are summarized as follows:
• We propose a domain-speciﬁc reverse engineering solu-
tion to extract high-level algorithmic control- and data-
ﬂow semantics from embedded binary executables in
various cyber-physical IoT control applications.
• We introduce a semantic mapping using dynamic binary
analysis and symbolic comparison of the mathematical
and binary expressions to ﬁll the semantic gap between
high-level algorithm descriptions and low-level stripped
binary segments.
• We implemented the proposed framework (MISMO) as
an IDA Pro plug-in and evaluated it on 2,263 commer-
cial embedded ﬁrmware from 6 various cyber-physical
application domains. The plug-in transfers the collected
semantics to enrich the disassembled code and data
segments in order to expedite the reverse engineering
process. We validated MISMO for various use-cases, and
discovered a previously unknown Linux kernel bug that
exists in all kernel versions since 3.13.
We evaluated MISMO on a wide-ranging set of real-world
applications including drones, self-driving cars, smart homes,
robotics, 3D printers, as well as the Linux kernel.
Potential use-cases. MISMO provides an enhanced reverse
engineering solution with more informative extracted seman-
tics about the IoT ﬁrmware executables. Hence, its use-cases
include well-known software security analysis scenarios that
involve binary reverse engineering. For instance, the extracted
algorithm-level semantics of the executable code and data
segments by MISMO can be used for i) binary vulnerability
assessment (e.g.,
to determine whether any of the impor-
tant control algorithm parameters in memory - identiﬁed by
MISMO- can be corrupted by a buffer-overﬂow exploit as
shown in [30] against a drone ﬁrmware).
ii) memory forensics analysis (e.g., black-box analysis after
a plane crash - to leverage the reverse-engineered binary
semantics by MISMO to discover controller state information
such as sensor/actuation and detailed parameter values from
the crash-time dumped controller memory ﬁles similar to
[44]); iii) sensitive code and data segment protection (e.g., to
protect sensitive memory areas - identiﬁed by MISMO- where
important control algorithm logic and parameters reside to
prevent targeted attacks against controllers [26]. The protec-
tion can be possibly deployed via software-based encryption,
dynamic memory value vetting or hardware-assisted solutions
such as Intel SGX).
iv) correct algorithm implementation veriﬁcation (e.g., to
determine whether the controller ﬁrmware binary indeed im-
plements the target control algorithm correctly - possible mis-
matches - bugs - can potentially enable attackers to drive the
controller into unsafe states [51]); and v) binary-level software
similarity measures (e.g., to detect possibly unauthorized reuse
350
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
of commercial binary implementation of control algorithms
that are protected by intellectual property regulations. The
information extracted by MISMO about each executable would
help for a better semantic comparison of binaries as opposed
to purely-syntactical comparisons [56]).
It is noteworthy that our focus in this paper is mainly
to propose a solution (MISMO) that extracts cyber-physical
execution semantics knowledge from a given ﬁrmware bi-
nary ﬁle. In this paper, we explain MISMO’s design and
implementation in details, and evaluate its performance by
comparing its outcomes (extracted semantics) on real-world
ﬁrmware binaries with the ground truth. However, individual
development and demonstration of the aforementioned use-
cases and how MISMO’s outcomes can be leveraged for each
one of them (e.g., memory dump forensics analysis using
MISMO’s outputs) involve research challenges that remain
outside the scope of this paper.
II. SYSTEM OVERVIEW
Threat model. In our threat model, the binary executable is
not assumed to be malicious. It may, however, include vulnera-
bilities. We utilize MISMO in the context of IoT control appli-
cations to reverse engineer control algorithm implementations.
We leverage the fact that IoT and embedded control software
developers rarely design a new theoretical control algorithm
from scratch (see Section V for our empirical validation on
2,263 commercial binaries). Instead, they almost always pick
and implement one (or more) out of a set of commonly
used and known control algorithms that have been extensively
analyzed theoretically and for practical deployments.
As examples, proportional-integral-derivate (PID) con-
trollers are used in programmable logic controller (PLC) pro-
grams [45], Kalman ﬁlters for guidance, navigation and control
of drones [27], and Pulse-width modulation (PWM) is used for
robotics and 3D printer extruder motor control [41]. Hence, we
assume that MISMO has access to a predeﬁned set of popular
control algorithms widely used in embedded applications. This
set is used to reverse engineer the semantics of a given stripped
embedded binary executable. This is intuitively similar to
existing signature databases used by disassemblers for library
API identiﬁcation, e.g., IDA Pro’s FLIRT technology [20].
Overview. Figure 1 shows MISMO’s architecture. To reverse
engineer the semantics of a given binary executable for a
particular controller, MISMO tries to match the binary to each
control algorithm in its database of popular commonly-used
embedded control algorithms. MISMO ﬁnally picks the algo-
rithm with the highest matching score and uses its description
to annotate the binary’s disassembled code/data regions with
high-level algorithmic semantics and help the analysts to better
understand the binary’s functionalities.
MISMO starts with the control algorithm’s high-level de-
scription ﬂowchart. The high-level description can be either
in pseudo-code or block-diagram format, e.g., a MATLAB
Simulink diagram. Each possible operation ﬂow of the algo-
rithm is exercised parametrically. As a result, the mathemat-
ical expressions of the output values as a function of input
parameters are calculated. MISMO implements a symbolic
semantic-matching algorithm to map the high-level operations
from the algorithmic ﬂowcharts to low-level instructions and
memory addresses in the executable’s code and data segments.
This mapping provides semantic meaning for each assembly
instruction, e.g., the impact of each instruction with respect to
the overall system as well as the critical memory associated
with the control algorithm. Such semantic information can
enable a ﬁner-grained white-box analysis of the binary.
In summary, the ﬁrst step of MISMO entails locating the
target subroutine in the ﬁrmware that corresponds to the
core controller algorithm via dynamic data ﬂow analysis. The
second step is traditional disassembly of the function and the
recovery of its control ﬂow graph (CFG). MISMO analyzes
the CFG given the control algorithm’s high-level ﬂowchart,
and ranks the CFG’s control ﬂows based on how similar
they “look” to the algorithm’s operations. The third step
involves the symbolic expression generation for the selected
control-ﬂow path’s output variables (actuation commands) via
symbolic execution. The fourth step compares the generated
binary-level symbolic expression to the abstract syntax tree
(AST) of the associated high-level algorithm operations. The
ﬁnal step is the semantic reﬁnement of the previous results.
The previous steps may not resolve all of the mappings
between binary- and algorithm-level operations. MISMO uses
a satisﬁability modulo theories (SMT) solver to improve the
ultimate mapping accuracy. The acquired semantic informa-
tion will then be used to annotate the binary’s disassembled
code/data segments for more informed binary analyses.
III. MISMO DESIGN
We here explain the components of the MISMO framework.
A. Locating the Controller Subroutines
A high-level control algorithm’s expression cannot be di-
rectly compared to a particular embedded ﬁrmware implemen-
tation in assembly format automatically as there will most
likely be a high level of variability in both the algorithm
expression as well as the implementation. To start its analysis,
MISMO ﬁrst locates the binary subroutines that implement
the core control algorithm. A stripped COTS binary for an
embedded controller may include thousands of functions. Lo-
cating a particular algorithm function implementation without
debugging information is not trivial.
MISMO utilizes dynamic data ﬂow tracking within indi-
vidual scan cycles to locate the control algorithm functions.
Intuitively, there should be a main control loop that calls
the control algorithm subroutines for a certain frequency. We
leverage the same observations made by Choi, et al. where the
main control loop can be identiﬁed by observing the frequency
of function calls during dynamic analysis,
the main
control loop will have a much higher triggering frequency than
other subroutines excluded from the main control loop [16].
Although MISMO does not have access to debugging informa-
tion, domain-speciﬁc knowledge can also provide some hints
about input arguments that are directly related to the target
control algorithm. Speciﬁcally, we mark the input variables
that are populated by the sensor measurements as the data
taint sources. The sinks are the output variables whose values
are sent out to the actuators (i.e., the output module on the
embedded controller device).
i.e.,
351
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
(cid:4)(cid:13)(cid:14)(cid:40)(cid:10)(cid:29)(cid:15) (cid:5)(cid:20)(cid:36)(cid:24)(cid:18)(cid:20)(cid:1)
(cid:4)(cid:29)(cid:28)(cid:34)(cid:32)(cid:29)(cid:26)(cid:26)(cid:20)(cid:32)(cid:1)(cid:4)(cid:29)(cid:19)(cid:20)
(cid:42)(cid:17)(cid:24)(cid:28)(cid:16)(cid:32)(cid:39)(cid:1)(cid:20)(cid:38)(cid:20)(cid:18)(cid:35)(cid:34)(cid:16)(cid:17)(cid:26)(cid:20)(cid:43)
(cid:4)(cid:29)(cid:28)(cid:34)(cid:32)(cid:29)(cid:26)(cid:1)
(cid:4)(cid:367)(cid:336)(cid:381)(cid:396)(cid:349)(cid:410)(cid:346)(cid:373)(cid:859)(cid:400)(cid:3)
(cid:14)(cid:35)(cid:17)(cid:32)(cid:29)(cid:35)(cid:34)(cid:24)(cid:28)(cid:20)(cid:1)
(cid:10)(cid:19)(cid:20)(cid:28)(cid:34)(cid:24)(cid:21)(cid:24)(cid:18)(cid:16)(cid:34)(cid:24)(cid:29)(cid:28)
(cid:4)(cid:29)(cid:28)(cid:34)(cid:32)(cid:29)(cid:26)(cid:1)(cid:7)(cid:26)(cid:29)(cid:37)(cid:1)(cid:8)(cid:32)(cid:16)(cid:30)(cid:23)
(cid:4)(cid:13)(cid:14)(cid:40)(cid:10)(cid:29)(cid:15)
(cid:4)(cid:29)(cid:28)(cid:34)(cid:32)(cid:29)(cid:26)(cid:1)