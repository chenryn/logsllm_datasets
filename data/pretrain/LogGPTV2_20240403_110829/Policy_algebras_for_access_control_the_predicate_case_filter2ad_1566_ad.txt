Definition 12
(Consistent Policies). We say that
a policy p is possibly/necessarily consistent iﬀ for every con-
sistent state s, some/all states obtained by applying p in s
are consistent. We say that a policy p is possibly/necessarily
ultra consistent iﬀ for every state s, some/all states obtained
by applying p in s are consistent.
Now we explore suﬃcient conditions to ensure possible or
necessary consistency. For atomic constructs, because they
are deterministic, there is no distinction between necessary
and possible consistencies. Our objective here is to ﬁnd a
set of suﬃcient conditions to ensure necessary or possible
consistency of policies constructed in our algebra.
1. assignP(si, xoj, xak) ← ψ : Only changes that occur due
to the application of assignP(si, xoj, xak) ← ψ in state s
are the addition of permissions subject si’s access permis-
sions. Furthermore, added permissions are precisely those
satisfying M, s |= ψ(si, xoj , xak). Therefore, after apply-
ing assignP(si, xoj, xak) ← ψ, the post-state s’ is con-
sistent iﬀ permissions (xoj ,−xak) satisfying ψ(si, xoj, xak)
have not been granted to subject si in state s. That is, iﬀ
the pre-state satisﬁes ∀xoj , xak[scopeS(si) ∧ scopeO(xoj) ∧
scopeA(xak)∧ ψ(si, xoj, xak)] → (xoj,−xak) /∈ subPerm(xi).
assignRP(xsi, xoj, xak) ← ψ : Similar reasoning shows
2.
that assignP(xsi, xoj , xak) ← ψ leads to a consistent state
176iﬀ ∀xoj , xakscopeS(xsi) ∧ scopeO(xoj ) ∧ scopeA(xak)
ψ(xsi, xoj , xak) → (xoj ,−xak) /∈ rolePerm(xri) holds in the
pre-state.
3. assignR(xri, xoj, xak) ← ψ : Similarly, assignR(xri, xoj , xak)
← ψ leads to a consistent state iﬀ ∀xoj,∀xakscopeR(xri) ∧
scopeO(xoj )∧ scopeA(xak) ψ(xri, xoj, xak) → (xoj,−xak) /∈
rolePerm(xri) holds in the pre-state.
5. Other Atomic Policies: Other atomic policies take
away permissions, assign roles, take away roles and bring
in and take away subjects, objects and roles from scope.
Bringing in entities into scope can lead to inconsistencies
if they give rise to conﬂicts by satisfying appropriate in-
stances of conUsr, conRoleor conPerm, and thereby creat-
ing an application speciﬁed inconsistency. We show how
to address one such example application speciﬁc inconsis-
tency, namely one that arise by bringing subjects into scope.
Firstly, we need to augment the previous statement of con-
sistency ψconS by forming the conjunction with sentence
∀xsi, xsj scopeS(xsi) ∧ scopeS(xsi) → (¬conUsr(xsi, xsj )),
say ψappCon. Applying addUsr(xsi) ← ψ(xsi), makes all
subjects xsi satisfying ψ(xsi) come into scope. Therefore,
in order to avoid inconsistencies, policy (addUsr(xsi) ←
ψ(xsi)) must not add those subjects satisfying conUsr(xsi, sj )
with some other existing subject sj. Therefore, applying
(addUsr(xsi) ← ψ(xsi)) does not lead to an inconsistent
state iﬀ the state s in which it is applied satisﬁes ψconS ∧
ψappCon∧∀xsi∃xsj scopeS(xsj)∧ψ(xsi) → ¬conUsr(xsi, xsj).
6. RBAC Speciﬁc Inconsistencies: As an example, we
show how to specify inconsistencies arising out of role-role
conﬂicts. Avoiding conﬂicting roles can be stated as the sen-
tence (call it ψroleCon) ∀xri∀xrj scopeR(xri)∧scopeR(xrj ) →
(¬conRole(xri, xrj )). Because applying assignR(xsi, xrj )
← ψ(xsi, xrj ) may lead to a state violating ψroleCon, in order
to avoid this any pre-state s must satisfy ψcon ∧ ψconRole ∧
∀xsi∀xrj∀xrkψ(xsi, xrj)∧ → ¬playsRole(xsi, xrk).
7. Compound Constructs: Consequences of applying
compound policy constructs are proved in [22]. An example
result of this sort is p1 (cid:15) p2 is necessarily consistent iﬀ both
p1 and p2 are necessarily consistent. p1 (cid:15) p2 is possibly
consistent iﬀ either of p1 and p1 is consistent.
6.2 Completeness
Incompleteness results in some subjects or roles not being
granted either a positive or a negative permission to some
action on some object, as stated in Deﬁnition 13. As in
the previous subsection, we examine atomic and compound
constructs for suitable notions of possible/necessary com-
pleteness.
Definition 13
(Complete State). We say that a state
s is subject complete iﬀ every subject in scope must have ei-
ther positive or negative permissions for every action and
object in scope. We say that a state s is role complete iﬀ
every role in scope must have either positive or negative per-
missions for every action and object in scope. We say that a
state is complete iﬀ it is subject complete and role complete.
Sentences ψcomS and ψcomR deﬁne subject and role com-
pleteness given in Deﬁnition 13, making a state s is com-
plete iﬀ M, s |= ψcomS ∧ ψcomR. Next, we deﬁne complete
and ultra-complete policies in Deﬁnition 14, counterparts of
consistent and ultra-consistence deﬁned in Section 6.1.
ψcomS :
ψcomR :
∀xsi, xoj , xakscopeS(xsi) ∧ scopeO(xoj) ∧
scopeA(xak) → [(xoj , +xak) ∈ subPerm(xsi) ∨
(xoj,−xak) ∈ subPerm(xsi)]
∀xri, xoj , xakscopeR(xri) ∧ scopeO(xoj) ∧
scopeA(xak) → [(xoj , +xak) ∈ rolePerm(xri) ∨
(xoj,−xak) ∈ rolePerm(xri)]
Definition 14
(Complete Policies). We say that a
policy p is possibly/necessarily complete iﬀ for every com-
plete state s, some/all states obtained by applying p to s is
complete. We say that a policy p is possibly/necessarily ul-
tra complete iﬀ for every state s, some/all states obtained
by applying p to s is complete.
Now we explore suﬃcient conditions to ensure possible/
necessary completeness. As atomic constructs are determin-
istic, there is no distinction between necessary and possible
completeness.
1. revokeP(si, xoj, xak) ← ψ : As a consequence of applying
revokeP(si, xoj, xak) ← ψ :, the only changes that occurs in
a state are the removal of permissions to the set that main-
tains subject si’s access permissions. Furthermore, removed
permissions are precisely those that satisfy ψ(si, xoj , xak).
Thus the post state of applying revokeP(si, xoj, xak) ←
ψ, s’ is complete iﬀ permissions (xoj,−xak) that satisfy
ψ(si, xoj, xak) are are already granted to subject si prior
to the application of revokeP(si, xoj, xak) ← ψ. That is iﬀ
M, s |= ∀xoj , xakscopeS(si) ∧ scopeS(xoj ) ∧ scopeA(xak) ∧
ψ(si, xoj, xak) → [(xoj ,−xak) ∈ subPerm(si)].
2. revokeR(xi, xoj, xak) ← ψ : By similar reasoning,
revokeP(xsi, xoj, xak) ← ψ leads to a complete state iﬀ
∀xsixoj , xakscopeR(si) ∧ scopeS(xoj) ∧ scopeA(xak)∧
ψ(xsi, xoj , xak) → [(xoj ,−xak) ∈ rolePerm(xsi)] hold in
the pre-state.
3. revokeR(xri, xoj, xak) ← ψ : Similarly, applying
revokeP(xri, xoj, xak) ← ψ results in a complete state iﬀ
∀xrixoj , xakscopeR(ri) ∧ scopeS(xoj) ∧ scopeA(xak)∧
ψ(xri, xoj , xak) → [xoj, −xak) ∈ rolePerm(xri)] hold in the
pre-state.
4. Other Atomic Policies: These add permissions, assign
roles, take away roles and bring in and take away subjects,
objects and roles from scope. Taking away entities from
scope do not lead to incompleteness because our deﬁnition
of completeness does not require any permissions for out of
scope entities.
5. Compound Constructs:
Consequences of applying compond policy constructs are
proved in [22]. An example result of this sort is p1 (cid:15) p2
is necessarily complete iﬀ both p1 and p2 are necessarily
complete and p1 (cid:15) p2 is possibly complete iﬀ either p1 or p1
are possibly complete.
7. HOARE POLICY LOGIC
177Pre condition /post condition analysis has been used in
program veriﬁcation to ensure that any given sentence, re-
ferred to as a post condition is satisﬁed after executing a
program provided that it began executing when a given sen-
tence, referred to as a pre condition held [14, 10]. Because
such analysis is used to verify the correctness of programs,
a distinction is made between total correctness and partial
correctness, where the convergence has to be proved in the
former, but is assumed for the latter. One form of pre con-
dition /post condition analysis proceeds by having sound,
but generally not complete proof rules to infer pre condi-
tions for any given post condition per every constructs in
the programming language under study. Although general
completeness in the original form is not achievable, Cook
proved an important relative completeness result based on
having a suﬃciently expressive language for expressing pre
and post conditions [7, 14].
We advocate developing a systematic pre condition /post
condition analysis for security policy compositions due to
the reason that consistency and completeness of access con-
trol policies are application dependent. We have also shown
that they can be speciﬁed as sentences of our restricted
second order language in Sections 6.1 and 6.2 respectively.
Therefore, if there was a well developed pre condition post
condition analysis, then consistency completeness or any
other security related property can be veriﬁed as a conse-
quence. In this section we develop a Hoare Logic and the
associated Hoare calculus for our predicate policy composi-
tion language. We call them Hoare Policy Logic (HPL) and
Hoare Policy Calculus (HPC) respectively.
Definition 15
(HPL Syntax). A Hoare formula over
our policy compositions is an expression of the following
form, where ψ, φ are formulas of the restricted second or-
der language and p is a policy expression.
{ψ}p{φ}
Let HF denote the collection of Hoare formulas.
Definition 16
(HPL Semantics). Given a set of states
Σ (as given in Deﬁnition 5) over a structure M (as given
in Deﬁnition 7), an interpretation of I is a mapping from
HF × Σ to {0,1} where
1,
) ∈ Mp for
if M, s |= ψ and (s, s(cid:7)
some state s’, then M, s(cid:7) |= φ
I({ψ}p{φ}, ∫ ) =
0, otherwise.
According to Deﬁnition 16, Hoare policy logic is intended
to capture sentences that are true in all states that result
as a consequence of applying policies. That means, with re-
spect to consistency and completeness properties discussed
respectively in Sections 6.1 and Sections 6.2, it has been
developed to reason about necessary properties. Hoare Cal-
culus for a Hoare logic consists of axioms and proof rules
extending those of predicate calculus. They are designed to
derive formulas true in any model. We now state the extra
axioms schemas and rules of deduction for the atomic and
external policy operators sans the external negation. Work
is underway in extending these rules for others operators.
Axiom Schemas:
(cid:4)
(cid:4)
(cid:5) ¬[scopeS(x)∧scopeR(y)∧
(cid:4)
(cid:4)
[scopeS(x)∧scopeR(y)∧
(cid:5) ¬[scopeO(y)∧
(cid:5) ¬[scopeO(y)∧
[scopeO(y) ∧ scopeA(z)
1. {ρ}[assignP(xsi, xoj, xak) ← ψ]{φ} :
Here ρ is obtained from φ by replacing every instance of
(y, z) ∈ subPerm(x) with (y, z) ∈ subPerm(x)
[scopeO(y) ∧
scopeA(z)∧ψ(x, y, z)]. Here x, y and z are subject, object or
action terms. If the assignment is {ρ} [assignP(si, xoj, xak)
← ψ] {φ} we replace to replace every instance of (y, z) ∈
subPerm(x) with (y, z) ∈ subPerm(x)
∧ ψ(si, y, z)]. A similar change is necessary change from sub-
ject variables to subject constants in all following axioms.
2.{ρ}[revokeP(xsi, xoj, xak) ← ψ]{φ} :
Here ρ is obtained from ψ by replacing every instance of
(y, z) ∈ subPerm(x) with (y, z) ∈ subPerm(x)
scopeA(z) ∧ ψ(x, y, z)].
3. {ρ}[assignRP(xri, xoj, xak) ← ψ]{φ} :
Here ρ is obtained from φ by replacing every instance of
(y, z) ∈ rolePerm(x) with (y, z) ∈ rolePerm(x)
[scopeO(y)∧
scopeA(z)∧ ψ(x, y, z)] Here x, y and z are role, object or ac-
tion terms .
4.{ρ}[revokeRP(xri, xoj, xak) ← ψ]{φ} :
Here ρ is obtained from φ by replacing every instance of
(y, z) ∈ rolePerm(x) with (y, z) ∈ rolePerm(x)
scopeA(z) ∧ ψ(x, y, z)].
5.{ρ}[assignR(xsi, xrj) ← ψ]{φ} :
Here ρ is obtained from φ by replacing every instance of
playsRole(x, y) with playsRole(x, y)
ψ(x, y)]
6.{ρ}[revokeR(xsi, xrj) ← ψ]{φ} :
Here ρ is obtained from φ by replacing every instance of
playsRole(x, y) with playsRole(x, y)
ψ(x, y)]
7.{ρ}[addUsr(xsi) ← ψ]{φ} :