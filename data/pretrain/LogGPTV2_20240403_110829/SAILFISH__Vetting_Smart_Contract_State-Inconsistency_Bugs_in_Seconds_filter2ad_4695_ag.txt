The U.S. Government is authorized to reproduce and distribute
reprints for Governmental purposes notwithstanding any
copyright notation thereon. The views and conclusions contained
herein are those of the authors and should not be interpreted as
necessarily representing the official policies or endorsements,
either expressed or implied, of DARPA or the U.S. Government.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
174
REFERENCES
[1] Cream ﬁnance post mortem: Amp exploit. https://medium.com/cream-
ﬁnance/c-r-e-a-m-ﬁnance-post-mortem-amp-exploit-6ceb20a630c5.
[2] Echidna. https://github.com/crytic/echidna. [accessed 07/27/2020].
[3] Mythril. https://github.com/ConsenSys/mythril. [accessed 07/27/2020].
[4] Panoramix decompiler. https://github.com/palkeo/panoramix.
[5] Rattle: Evm static analysis framework. https://github.com/crytic/rattle.
[6] Real
https:
integrates
contracts.
business
estate
smart
//tinyurl.com/yawrkfpx/. [accessed 01/09/2019].
[7] Reentering the reentrancy bug: Disclosing burgerswap’s vulnerability.
accessed
https://www.zengo.com/burgerswap-vulnerability/.
10/22/2020].
[8] The reentrancy strikes again -
https:
//valid.network/post/the-reentrancy-strikes-again-the-case-of-lendf-me.
https://tinyurl.com/
[9] Smart contracts for shipping offer shortcut.
the case of
lendf.me.
yavel7xe/.
114
[10] Swc
-
transaction
order
dependence
attack.
https:
//swcregistry.io/docs/SWC-114. [accessed 04/26/2020].
[11] The dao attack.
https://www.coindesk.com/understanding-dao-hack-
journalists, 2016. [accessed 04/26/2020].
[12] Governmental’s 1100 eth payout is stuck because it uses too much gas.
https://tinyurl.com/y83dn2yf/, 2016. [accessed 01/09/2019].
[13] Manticore. https://github.com/trailofbits/manticore/, 2016.
[14] On the parity wallet multisig hack. https://tinyurl.com/yca83zsg/, 2017.
[15] Understanding the dao attack. https://tinyurl.com/yc3o8ffk/, 2017.
[16] Etherscan. https://etherscan.io/, 2018. [accessed 01/09/2019].
[17] Exploiting
actual
reentrancy
uniswap:
proﬁt.
from
to
https://blog.openzeppelin.com/exploiting-uniswap-from-reentrancy-
to-actual-proﬁt/, 2019.
[18] Sereum repository.
https://github.com/uni-due-syssec/eth-reentrancy-
attack-patterns/, 2019.
[19] Celery - distributed task queue. https://celeryproject.org, 2020.
[20] Saswat Anand, Patrice Godefroid, and Nikolai Tillmann. Demand-
In Tools and Algorithms
driven compositional symbolic execution.
for the Construction and Analysis of Systems, 14th International
Conference, TACAS, 2008.
[21] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. A survey of
In Principles of Security
attacks on ethereum smart contracts (sok).
and Trust - 6th International Conference, POST, 2017.
[22] Domagoj Babi´c, Lorenzo Martignoni, Stephen McCamant, and Dawn
In
Song.
Proceedings of the 2011 International Symposium on Software Testing
and Analysis, 2011.
Statically-directed dynamic automated test generation.
[23] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois Gauthier,
Vincent Gramoli, Ralph Holz, and Bernhard Scholz. Vandal: A scalable
security analysis framework for smart contracts, 2018.
[24] Fraser Brown, Deian Stefan, and Dawson Engler. Sys: A static/symbolic
In 29th USENIX
tool for ﬁnding good bugs in good (browser) code.
Security Symposium (USENIX Security). USENIX Association, 2020.
[25] Ethan Cecchetti, Siqiu Yao, Haobin Ni, and Andrew C. Myers.
Compositional security for reentrant applications. In IEEE Symposium
on Security and Privacy (SP), 2021.
[26] Ting Chen, Rong Cao, Ting Li, Xiapu Luo, Yufei Zhang, Zhou Liao,
Hang Zhu, Gang Chen, Zheyuan He, Xiaodong Lin, and Xiaosong
Zhang. Soda: A generic online detection framework for smart contracts.
In Proc. The Network and Distributed System Security Symposium, 2020.
[27] Heming Cui, Gang Hu, Jingyue Wu, and Junfeng Yang. Verifying
SIGARCH
systems rules using rule-directed symbolic execution.
Comput. Archit. News, 2013.
[28] J. Feist, G. Grieco, and A. Groce. Slither: A static analysis framework for
smart contracts. In IEEE/ACM 2nd International Workshop on Emerging
Trends in Software Engineering for Blockchain (WETSEB), 2019.
[29] Josselin Feist, Laurent Mounier, Sébastien Bardin, Robin David, and
Marie-Laure Potet. Finding the needle in the heap: Combining static
analysis and dynamic symbolic execution to trigger use-after-free.
In
Proceedings of the 6th Workshop on Software Security, Protection, and
Reverse Engineering, 2016.
[30] Yu Feng, Emina Torlak, and Rastislav Bodik. Precise attack synthesis
for smart contracts. arXiv preprint arXiv:1902.06067, 2019.
[31] Yu Feng, Emina Torlak, and Rastislav Bodík. Summary-based symbolic
In 35th IEEE/ACM International
evaluation for smart contracts.
Conference on Automated Software Engineering, ASE, 2020.
[32] Joel Frank, Cornelius Aschermann, and Thorsten Holz. ETHBMC: A
bounded model checker for smart contracts. In 29th USENIX Security
Symposium (USENIX Security), 2020.
[33] A. Yu. Gerasimov. Directed dynamic symbolic execution for static
[34] Patrice Godefroid.
analysis warnings conﬁrmation. Program. Comput. Softw., 2018.
Compositional dynamic test generation.
In
the 34th ACM SIGPLAN-SIGACT Symposium on
Proceedings of
Principles of Programming Languages, POPL, 2007.
[35] Neville Grech, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis.
Gigahorse: Thorough, declarative decompilation of smart contracts.
In IEEE/ACM 41st International Conference on Software Engineering
(ICSE), 2019.
[36] Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent, Bernhard
Scholz, and Yannis Smaragdakis. Madmax: surviving out-of-gas
International
conditions in ethereum smart contracts.
Conference on Object-Oriented Programming, Systems, Languages,
and Applications, 2018.
In Proc.
[37] Shelly Grossman, Ittai Abraham, Guy Golan-Gueta, Yan Michalevsky,
Noam Rinetzky, Mooly Sagiv, and Yoni Zohar. Online detection of
effectively callback free objects with applications to smart contracts.
In Proc. Symposium on Principles of Programming Languages, 2018.
[38] Shengjian Guo, Markus Kusano, and Chao Wang. Conc-ise: Incremental
the
IEEE/ACM International Conference on Automated Software
symbolic execution of concurrent software.
31st
Engineering, 2016.
In Proceedings of
[39] Shengjian Guo, Markus Kusano, Chao Wang, Zijiang Yang, and Aarti
Gupta. Assertion guided symbolic execution of multithreaded programs.
In Proceedings of
the 2015 10th Joint Meeting on Foundations of
Software Engineering, 2015.
[40] Bo Jiang, Ye Liu, and W. K. Chan. Contractfuzzer: fuzzing smart
contracts for vulnerability detection. In Proc. International Conference
on Automated Software Engineering, 2018.
[41] J. Jiao, S. Kan, S. Lin, D. Sanan, Y. Liu, and J. Sun.
Semantic
understanding of smart contracts: Executable operational semantics of
solidity. In IEEE Symposium on Security and Privacy (SP), 2020.
[42] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. ZEUS:
In Proc. The Network and
analyzing safety of smart contracts.
Distributed System Security Symposium, 2018.
[43] Aashish Kolluri, Ivica Nikolic, Ilya Sergey, Aquinas Hobor, and Prateek
Saxena. Exploiting the laws of order in smart contracts. In Proceedings
of
the 28th ACM SIGSOFT International Symposium on Software
Testing and Analysis, 2019.
[44] Johannes Krupp and Christian Rossow.
to automatically exploit smart contracts.
Symposium, 2018.
teether: Gnawing at ethereum
In Proc. USENIX Security
[45] Siﬁs Lagouvardos, Neville Grech,
Ilias Tsatiris,
and Yannis
Smaragdakis. Precise static modeling of ethereum memory. 2020.
[46] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas
In Proc. Conference on
Hobor. Making smart contracts smarter.
Computer and Communications Security, 2016.
[47] Tai Nguyen, Long Pham, Jun Sun, Yun Lin, and Minh Quang Tran.
sfuzz: An efﬁcient adaptive fuzzer for solidity smart contracts. In Proc.
International Conference on Software Engineering, 2020.
[48] Daniel Perez and Ben Livshits.
Vulnerable does not
Symposium (USENIX Security), 2021.
imply exploited.
Smart contract vulnerabilities:
In 30th USENIX Security
[49] Fernando Magno Quintao Pereira, Raphael Ernani Rodrigues, and
Victor Hugo Sperle Campos. A fast and low-overhead technique
In Proceedings of
to secure programs against
the IEEE/ACM International Symposium on Code Generation and
Optimization (CGO), 2013.
integer overﬂows.
[50] Michael Rodler, Wenting Li, Ghassan O. Karame, and Lucas Davi.
Sereum: Protecting existing smart contracts against re-entrancy attacks.
In 26th Annual Network and Distributed System Security Symposium,
NDSS, 2019.
[51] Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo
Maffei. Ethor: Practical and provably sound static analysis of ethereum
smart contracts. In Proc. Conference on Computer and Communications
Security, 2020.
[52] Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil
Takhaviev, Evgeny Marchenko, and Yaroslav Alexandrov. Smartcheck:
Static analysis of ethereum smart contracts. In Proceedings of the 1st
International Workshop on Emerging Trends in Software Engineering
for Blockchain, 2018.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
175
untrusted
the code, and masked the program elements for the sake of
anonymity and simplicity. The fact that the origin of the smart
contracts can not be traced back in most of the cases makes it
hard to report these bugs to the concerned developers. Also, once
a contract gets deployed, it is difficult to fix any bug due to the
immutable nature of the blockchain.
Cross-function reentrancy: Figure 13 presents a simplified
real-world contract—vulnerable to cross-function reentrancy
attack due to Destructive Write (DW). An attacker can set both
item_1.creator (Line 11), and item_1.game (Line 12)
to an arbitrary value by invoking funcB(). In funcA(),
an amount amt is transferred to item_1.creator through
transferFrom—an
call.
Therefore, when the external call is underway, the attacker
can call funcB() to reset both item_1.creator, and
item_1.game. Hence, item_1.fee gets transferred to a
different address when Line 6 gets executed.
1 function funcA(to, amt) public {
2
3
4
5
6
7 }
8
9 function funcB(_creator, _game) {
10
11
12
13
14 }
Delegate-based reentrancy: Figure 14 presents a real-world
contract, which is vulnerable to delegate-based reentrancy attack.
...
IERC721 erc721 = IERC721(item_1.game)
erc721.transferFrom(_, item1.creator, amt)
...
item1.creator.transfer(item_1.fee)
...
item_1.creator = _creator
item1_1.game = _game
...
Fig. 13: Real-world cross-function reentrancy
contract
external
1 function funcA(bytes _data) {
__isTokenFallback = true;
2
address(this).delegatecall(_data);
3
__isTokenFallback = false;
4
5 }
6
7 function funcB(){
8
9
10 }
11
12 function funcC(address _to) {
13
14
15
16 }
assert(__isTokenFallback);
// Write to application data
Receiver receiver = Receiver(_to)
receiver.tokenFallback(...)
...
Fig. 14: Real-world delegatecall-based reentrancy
The contract contains three functions—(a) funcA contains
the delegatecall, (b) funcB() allows application data to
be modified if the assertion is satisfied, and (c) funcC contains
an untrusted external call. A malicious payload can be injected
in the _data argument of funcA, which, in turn, invokes
funcC() with a tainted destination _to. The receiver at
Line 14 is now attacker-controlled, which allows the attacker to
reenter to funcB with _isTokenFallback inconsistently
set to true; thus rendering the assertion at Line 8 useless.
CREAM Finance
reentrancy attack. By exploiting a
reentrancy vulnerability in the CREAM Finance, a decentralized
lending protocol, the attacker stole 462,079,976 AMP tokens,
and 2,804.96 Ethers on August 31, 2021 [1]. The attack
involved two contracts: CREAM Finance contract C, and AMP
token (ERC777) contract A. The borrow() method of C
Fig. 12: Relative speedup due to value summary over a path-by-path
function summary.
[53] Emina Torlak and Rastislav Bodík. A lightweight symbolic virtual
In Proc. Conference on
machine for solver-aided host
Programming Language Design and Implementation, 2014.
languages.
[54] Petar Tsankov, Andrei Marian Dan, Dana Drachsler-Cohen, Arthur
Gervais, Florian Bünzli, and Martin T. Vechev. Securify: Practical
security analysis of smart contracts. In Proc. Conference on Computer
and Communications Security, 2018.
[55] Shuai Wang, Chengyu Zhang, and Zhendong Su.
Detecting
nondeterministic payment bugs in ethereum smart contracts. Proc.
ACM Program. Lang., 3(OOPSLA), 2019.
[56] Valentin Wüstholz and Maria Christakis. Harvey: A greybox fuzzer for
smart contracts. ArXiv, abs/1905.06944, 2019.