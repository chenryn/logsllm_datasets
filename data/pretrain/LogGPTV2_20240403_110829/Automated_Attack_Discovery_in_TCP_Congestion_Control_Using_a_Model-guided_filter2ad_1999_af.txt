J. Postel, “Transmission control protocol,” RFC 793 (Standard), 1981.
[32] Z. Qian and Z. M. Mao, “Off-path TCP sequence number inference
attack - how ﬁrewall middleboxes reduce security,” in IEEE Symposium
on Security and Privacy, 2012, pp. 347–361.
[33] Z. Qian, Z. M. Mao, and Y. Xie, “Collaborative TCP sequence number
inference attack: how to crack sequence number under a second,” in
ACM Conference on Computer and Communications Security, 2012.
I. Rhee, L. Xu, S. Ha, A. Zimmermann, L. Eggert, and R. Scheffeneg-
ger, “CUBIC for Fast Long-Distance Networks,” draft-ietf-tcpm-cubic-
02.txt, 2016.
[34]
[35] P. Sarolahti, M. Kojo, K. Yamamoto, and M. Hata, “Forward RTO-
Recovery (F-RTO): An Algorithm for Detecting Spurious Retransmis-
sion Timeouts with TCP,” RFC 5682 (Proposed Standard), 2009.
[36] R. Sasnauskas, O. Landsiedel, M. Alizai, C. Weise, S. Kowalewski, and
K. Wehrle, “KleeNet: Discovering insidious interaction bugs in wireless
sensor networks before deployment,” in IEEE International Conference
on Information Processing in Sensor Networks, 2010, pp. 186–196.
[37] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson, “TCP conges-
tion control with a misbehaving receiver,” ACM SIGCOMM Computer
Communication Review, vol. 29, no. 5, 1999.
J. Song, C. Cadar, and P. Pietzuch, “SymbexNet: Testing Network
Protocol Implementations with Symbolic Execution and Rule-Based
Speciﬁcations,” IEEE Transactions on Software Engineering, vol. 40,
no. 7, pp. 695–709, 2014.
[38]
[39] M. Sridharan, K. Tan, D. Bansal, and D. Thaler, “Compound TCP:
A New TCP Congestion Control for High-Speed and Long Distance
Networks,” draft-sridharan-tcpm-ctcp-02.txt, 2009.
[40] R. Stewart, S. Long, D. Gallatin, A. Gutarin, and E. Livengood,
“The netﬂix tech blog: Protecting netﬂix viewing privacy at
scale,” 2016. [Online]. Available: http://techblog.netﬂix.com/2016/08/
protecting-netﬂix-viewing-privacy-at.html
[41] A. Studer and A. Perrig, “The coremelt attack,” in European Symposium
on Research in Computer Security, 2009, pp. 37–52.
[42] The Linux Kernel Community,
“/proc/sys/net/ipv4/* variables,”
2017. [Online]. Available: https://www.kernel.org/doc/Documentation/
networking/ip-sysctl.txt
[43] M. Utting and B. Legeard, Practical model-based testing: a tools
approach. Morgan Kaufmann, 2010.
APPENDIX A
TCP ACKNOWLEDGEMENTS
All TCP packets contain a single, common header. (shown
in Fig. 5). This header contains source and destination ports, a
sequence number, an acknowledgment number, a set of control
bits, a checksum, and options. One of the control bits is the
ACK bit, which indicates whether the acknowledgment number
included in the header is meaningful. After the initial TCP
handshake, all packets set this bit and include the current TCP
acknowledgement number. Hence, all TCP packets include
acknowledgement information and may acknowledge new data
or indicate duplicate acknowledgements.
In most TCP connections, only one side of the connection
is sending data at any given time. In order to provide feedback
to the sender, TCP requires that receivers that are quiescent,
that is, not currently sending data themselves, must periodi-
cally send an empty TCP packet to supply the sender with
a current acknowledgement. These empty TCP packets are
simply TCP packets with no data and are usually called pure
acknowlegements, or simply acknowledgements. We focus on
Source P o r t
|
1
2
3
Sequence Number
D e s t i n a t i o n P o r t
0
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
| Data |
| O f f s e t | Reserved
|
|
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
|
|
+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+−+
Acknowledgment Number
|U|A|P|R|S|F|
|R|C|S|S|Y| I |
|G|K|H|T|N|N|
|
|
Padding
Checksum
Urgent P o i n t e r
Window
O p t i o n s
d a t a
Fig. 5. TCP Header ﬁelds. Each tick represents a bit position. [31]
these acknowledgement packets in this work because connec-
tions where both hosts are sending simultaneously are rare.
However, our attacks are equally applicable in such scenarios
and would usually be launched by injecting additional pure
acknowledgement packets into the connection.
APPENDIX B
STATE TRACKING ALGORITHM
Our attack injector uses the state information supplied by
the state tracking algorithm to apply the basic actions corre-
sponding to the current congestion control state during testing.
Our state tracking algorithm observes the network trafﬁc from
a TCP sender in order to track its current congestion control
state. We approximate the exact congestion control algorithm
in use by the sender and consider it to be New Reno for the
purposes of state tracking.
The core idea of our algorithm is to take a small (sub-RTT)
time slice and observe the packets received and sent by an
implementation. If about twice as many bytes of data have been
sent as acknowledged, the state is inferred to be Slow Start and
the sending rate is increasing exponentially. If about an equal
number of bytes have been sent and acknowledged, the state
is inferred to be Congestion Avoidance since the sender is
maintaining a steady sending rate. If fewer bytes have been
sent than acknowledged or there are retransmitted packets, the
state is inferred to be Fast Recovery, and if no packets are
received and only a few packets are sent, then an RTO event
was observed and the sender is in state Exponential Backoff.
Our algorithm uses two timers, the ﬁrst ﬁres every sub_rtt
seconds and the second ﬁres max_burst_gap seconds after
each packet unless reset. This ﬁrst timer handles the case
where TCP is operating at high speed and has packets in
ﬂight constantly while the second handles the case where TCP
has not yet reached peak efﬁciency and is sending packets
in bursts and then waiting for their acknowledgements before
sending more. We experimentally set sub_rtt to 10ms and
max_burst_gap to 5ms based on a network RTT of 20ms.
Whenever either of these timers expires, the algorithm
determines whether TCP is sending data smoothly or in bursts.
If TCP is sending data in bursts and it has been less than
max_burst_gap seconds since the last packet, this timer ex-
piration, is ignored. Otherwise, the state inference is updated.
If the most recent packet was a SYN, FIN, or Reset, then the
connection state is INIT or END. Otherwise, we compute the
ratio of sent to acknowledged data and the space between the
two most recent packets, and use this information to determine
what state the sender is in based on the intuition presented
above. We then reset our data sent and data acknowledged
14
Algorithm 2: State Tracking
1 Function Init()
2
Start timer intervalT imer to expire every sub_rtt ms
(10ms)
priorP kt = curP kt = now()
3
urgEvent = false
4
state = UNKNOWN
5
6 Function OnPacket(p)
7
update dataBytes, dataP kts, ackBytes, ackP kts,
seqHigh, highAck, curP ktT ype and rexmits based
on p
if curP kt  0 then
urgEvent = true
Reset timer packetT imer to expire now
8
9
10
11
12
13
14
15
16 Function OnTimer()
17
if urgEvent or curP kt >max_burst_gap or
lastIdle > 4∗sub_rtt then
urgEvent = false
if curP ktT ype is SYN then
state = INIT
return
counters. For the slow start and congestion avoidance state, we
average the ratios from the last two sampling periods as we
found experimentally that this helped to produce more accurate
results. Finally, if the ratio is less than 0.8, a situation that
should never occur, we ignore this sample.
APPENDIX C
ADDITIONAL RESULTS
Below we present attacks that we have automatically found
with TCPWN and which were known.
A. On-path Attacks
Optimistic Ack This class of attack operates by optimisti-
cally acknowledging data that the receiver has not received
and acknowledged yet. This reduces the effective RTT of the
connection, allowing TCP to increase its sending rate faster,
and hides lost packets, preventing TCP from slowing down in
response to congestion. By hiding lost packets, the receiver
will not receive the complete data transfer, but this may be
acceptable if the data stream can tolerate losses or if the
attacker does not care about the data, i.e., is simply conducting
a denial of service attack.
This attack class was ﬁrst identiﬁed in [37]. Unfortunately,
the mitigations proposed require non-backwards-compatible
modiﬁcations to TCP, such as inserting a random nonce into
each packet. As a result, this attack class is still present in
modern TCP implementations, and we found many instances
of it in all 5 of the implementations we tested. In our tests,
this attack usually caused the target connection to consume all
available bandwidth, starving competing connections to near
zero throughput for the duration of the attack.
B. Off-path Attacks
Desync Attack This class of attacks operates by spooﬁng
packets containing a few bytes of data to both sender and
receiver in the target connection. If a host is not currently
receiving data, this injected data will incorrectly cause its
cumulative acknowledgement number to increase. All future
packets by this host will
then have an acknowledgement
number higher than anything the other host sent and will be
ignored, causing an unrecoverable connection stall.
These attacks were ﬁrst identiﬁed by [22]. The only known
mitigation is encryption to prevent access to the sequence
numbers of the packets. We identiﬁed many instances of
this attack class against all tested implementations and in all
congestion control states.
Ack Storm Attack Ack Storm attacks are similar to
Desync Attacks but spoof packets with data into both sides
of idle connections. By doing so, the cumulative acknowl-
edgement numbers of both sender and receiver are increased.
Unfortunately, since neither side actually sent any data, both
will consider any future acknowledgements invalid and re-
spond with a duplicate acknowledgement as required by the
TCP speciﬁcation [31]. This leads to an inﬁnite storm of
acknowledgements between both sides of the connection, as
each responds to the invalid acknowledgements from the other.
This is a known attack, ﬁrst identiﬁed by [2]. One mitiga-
tion to this attack is to ignore invalid acknowledgements if they
show up too frequently. Unfortunately, neither Debian 2 nor
Windows 8.1 provide this mitigation, enabling us to discover
this attack with several different strategies.
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
15
if curP ktT ype is FIN or RST then
state = END
return
curRatio = dataBytes / ackBytes
pktSpace = curP kt − priorP kt
if dataP kts > 0 and (pktSpace > 200ms) then
state = EXP BACKOFF
else if state == FAST RECOV and
ackHigh  0 or (ackBytes == 0 and
ackP kts > 3) then
ackHold = seqHigh
state = FAST RECOV
else if (curRatio + priorRatio)/2 > 1.8 then
state = SLOW START
else if (curRatio + priorRatio)/2 > 0.8 then
state = CONG AVOID
else if state == EXP BACKOFF and
curRatio < 0.1 then
ackP kts = 0
else
priorRatio = 0.8∗ curRatio + 0.2∗ priorRatio
return
priorRatio = curRatio
ackP kts = ackBytes = 0
dataP kts = dataBytes = 0
rexmits = 0