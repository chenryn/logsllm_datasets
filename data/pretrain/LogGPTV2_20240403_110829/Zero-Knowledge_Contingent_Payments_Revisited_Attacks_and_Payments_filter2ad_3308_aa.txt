title:Zero-Knowledge Contingent Payments Revisited: Attacks and Payments
for Services
author:Matteo Campanelli and
Rosario Gennaro and
Steven Goldfeder and
Luca Nizzardo
Zero-Knowledge Contingent Payments Revisited:
Attacks and Payments for Services
Matteo Campanelli
PI:EMAIL
CUNY Graduate Center, USA
Steven Goldfeder
PI:EMAIL
Princeton University, USA
ABSTRACT
Zero Knowledge Contingent Payment (ZKCP) protocols allow fair
exchange of sold goods and payments over the Bitcoin network. In
this paper we point out two main shortcomings of current proposals
for ZKCP, and propose ways to address them.
First we show an attack that allows a buyer to learn partial
information about the digital good being sold, without paying for
it. This break in the zero-knowledge condition of ZKCP is due to
the fact that in the protocols we attack, the buyer is allowed to
choose common parameters that normally should be selected by
a trusted third party. We implemented and tested this attack: we
present code that learns, without paying, the value of a Sudoku
cell in the “Pay-to-Sudoku” ZKCP implementation [18]. We also
present ways to fix this attack that do not require a trusted third
party.
Second, we show that ZKCP are not suited for the purchase of
digital services rather than goods. Current constructions of ZKCP
do not allow a seller to receive payments after proving that a certain
service has been rendered, but only for the sale of a specific digital
good. We define the notion of Zero-Knowledge Contingent Service
Payment (ZKCSP) protocols and construct two new protocols, for
either public or private verification. We implemented our ZKCSP
protocols for Proofs of Retrievability, where a client pays the server
for providing a proof that the client’s data is correctly stored by
the server.We also implement a secure ZKCP protocol for "Pay-to-
Sudoku" via our ZKCSP protocol, which does not require a trusted
third party.
A side product of our implementation effort is a new optimized
circuit for SHA256 with less than a quarter than the number of AND
gates of the best previously publicly available one. Our new SHA256
circuit may be of independent use for circuit-based MPC and FHE
protocols that require SHA256 circuits.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134060
Rosario Gennaro
PI:EMAIL
The City College of New York, USA
Luca Nizzardo
PI:EMAIL
IMDEA Software Institute, Madrid, Spain
Universidad Politécnica de Madrid, Spain
CCS CONCEPTS
• Security and privacy → Cryptography;
KEYWORDS
Contingent Payments, Bitcoin, Zero-Knowledge Protocols
1 INTRODUCTION
The problem of fair exchange in which two parties want to swap
digital goods such that neither can cheat the other has been studied
for decades, and indeed it has been shown that fairness is unachiev-
able without the aid of a trusted third party [23]. However, using
Bitcoin or other blockchain-based cryptocurrencies, it has been
demonstrated that fair-exchange can be achieved in a completely
trustless manner. The previous results were not incorrect; a third
party is definitely necessary, but the key innovation that Bitcoin
brings to fair exchange is that the blockchain can fill the role of the
trusted party, and essentially eliminate trust.
Consider Alice, an avid fan of brainteasers that has a Sudoku
puzzle that she is stumped on. After trying for days to solve the
puzzle, Alice gives up and posts the puzzle on an online message
board proclaiming, “I will pay whoever provides me the solution to
this puzzle". Bob sees this message, solves the puzzle, and wants to
sell Alice the solution. But there’s a problem: Alice wants Bob to
first provide the solution so that she can verify it’s correct before
she pays him, whereas Bob insists that he will not send Alice the
solution until he has been paid. This is the classical problem of fair
exchange: neither party wants to impart with its good before being
sure that it will receive the other good in exchange.
To solve this problem, Alice and Bob could use a blockchain.
Bitcoin and other blockchain-based cryptocurrencies allow one to
post transactions that pay others and specify the conditions that
need to be met in order for the money to be claimed. Alice can post
a payment transaction to the blockchain that encodes the sudoku
puzzle as well as the rules, and specifies that whoever provides the
correct solution can claim the funds. In essence, the blockchain
here is serving the traditional role of a trusted third party: Alice
“deposits" funds in the blockchain, and the blockchain will only
release those funds to Bob once he provides the correct solution.
The extended version of this paper can be found at https://eprint.iacr.org/2017/566.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA229While in theory this would work, there’s one problem: Bitcoin’s
scripting language is limited, and does not allow one to directly
specify arbitrary programs or conditions that are necessary to spend
money. Zero Knowledge Contingent Payment (ZKCP) protocols
[13, 18, 37] to allow fair exchange over the Bitcoin blockchain. The
protocol makes use of a feature of the Bitcoin scripting language
that allows one to create a payment transaction that specifies a
value y and allows anyone who can provide a preimage k such that
SHA256(k ) = y to claim the bitcoins 1.
In the ZKCP protocol, Bob knows a solution s and encrypts the
solution to the puzzle using a key k such that Enck (s) = c. Bob also
computes y such that SHA256(k ) = y. He then sends Alice c and y
together with a zero-knowledge proof that c is an encryption of s
under the key k and that SHA256(k ) = y. Once Alice has verified
the proof, she creates a transaction to the blockchain that pays Bob
n bitcoins, and specifies that Bob can only claim the funds if he
provides a value k′ such that SHA256(k′) = y. Bob then published
k and claims the funds. Alice, having learned k can now decrypt c,
and hence she learns s.
When ZKCP was first introduced in 2011 it was only theoretical
as there was no known efficient general purpose zero-knowledge
protocol that could be used for the necessary proofs. Since then,
however, advances have been made in this area, and there are now
general-purpose Succinct Non-Interactive Arguments of Knowledge
(ZK-SNARK) protocols that allow for the practical implementation
of the necessary proofs. The protocol was refined to use SNARKs,
and a sample-implementation for the Sudoku problem was also
made available [18].
1.1 Breaking ZKCP
All NIZK proofs require a trusted party to generate the common
reference string (CRS) for the production and the verification of the
proof. The introduction of a third party, however, even to generate
the parameters, is undesirable – recall that the entire point of ZKCP
is to solve the fair exchange protocol in a completely trustless
manner!
To eliminate the need for a trusted third party, proofs in ZKCP are
made to convince one person – the buyer. It was natural therefore,
for the buyer to serve as the trusted third party. Since the buyer
trusts herself, she will be convinced of the correctness of the proofs.
Using this observation, the ZKCP protocol specifies that the buyer
should generate the CRS, and indeed the Sudoku implementation
follows these guidelines.
But in ZKCP, there are two potential adversaries: the seller and
the buyer. A malicious seller would try to cheat by producing a false
proof that convinces the buyer to send her money even though she
will not receive the solution. Indeed, the current protocol protects
against this attack. Since the buyer generates the CRS, the seller
(prover) is unable to produce an incorrect proof that will be accepted
by the buyer (verifier).
But the buyer can also be malicious. Indeed, if the buyer is able
to break the zero-knowledge property of the proof, she may learn
part of the solution from the seller even without paying! Intuitively,
the buyer can modify the CRS such that the proof that the seller
provides actually leaks some bits of the solution.
1We are simplifying the protocol here. See Section 2.5 for full details.
In the original SNARKs paper, it was assumed that the CRS was
generated honestly, and indeed the proof of the zero-knowledge
property made use of this fact [29]. When this assumption is vio-
lated, a malicious party can craft a CRS that allows it to break the
zero-knowledge property and learn information about the witness.
We note that if the Prover checks that the CRS is "well formed", the
SNARK in [29] remains Witness Indistinguishable (WI) – however
this is not sufficient since in this case the witness is the Sudoku
solution which is unique (and therefore even if the protocol is WI,
information can be learned about the witness). We also note that
with some additional more expensive checks, the SNARK in [29]
remains ZK [1, 7, 28]. In ZKCP however neither of these checks
are performed, and therefore, a malicious buyer can generate a
malicious CRS that allows it to learn information from the seller’s
proof without paying. We show an attack on the "pay to Sudoku"
protocol that proceeds along these lines, and we also provide code
[21, 22] that implements the attack and shows how one can break
the zero-knowledge property and learn information in the sample
sudoku code [18].
1.2 Fixing ZKCP
While issues arise when the verifier generates the CRS, the ZKCP
high-level idea remains elegant and appealing. Therefore in Sec-
tion 3.3 we discuss several ways to construct ZKCPs which do not
require the help of a trusted party.
One way is to require that the CRS is constructed via a two-
party secure computation protocol jointly by buyer and seller, a
solution which allows them to “recycle” the CRS over several ZKCP
executions. A similar approach was adopted by the designers of
Zcash [42].
Another way is to use the notion of Subversion-NIZK [7], where
ZK is preserved even when the verifier chooses the CRS. As we
pointed out above, this requires the Prover to perform some "well
formedness" checks on the CRS, which however can be somewhat
expensive (as opposed to the minimal checks described in [29] to
guarantee witness-indistinguishability).
At the end the simplest solution was to rely on a different type
of protcol for Zero-Knowledge Contingent Service Payments (ZKCSP)
which we describe below.
1.3 Zero-Knowledge Contingent Service
Payments (ZKCSP): paying for digital
services
We extend the idea of ZKCP to a new class of problems: paying for
digital services.
Consider Alice, a user of a subscription online file storage service,
FileBox. FileBox offers a service that for a small fee, it will provide a
succinct proof-of-retrievability (PoR) [43] to its users demonstrating
that all of that user’s files are being stored. Alice would like to pay
for this service, and thus we have a far exchange problem: Alice
wants to pay once she receives proof that the files are being stored,
whereas FileBox will only send the proof once it has been paid.
Notice that unlike the Sudoku example, Alice does not want any
digital good (i.e. she doesn’t want them to send her all the files).
Instead, she just wants Filebox to demonstrate that they are indeed
still storing the files.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA230The ZKCP protocol will fail in this case. If we try to apply this
protocol and view the PoR as a ”good" that Alice wants to receive,
then the first step of a ZKCP protocol is to have FileBox create a
proof that it has a PoR and send the encrypted PoR to Alice.
But a proof of a PoR is itself a PoR, and thus once Alice receives
this zero-knowledge proof, she can abort the protocol as she already
received the proof that she desired without paying.
As a second motivation, consider an online Bitcoin exchange
that will provide proofs of solvency as a service for a fee. Often
exchanges do not want to leak their inner details, and thus they may
use Provisions [24], a privacy-preserving proof of solvency that
shows that they are solvent without leaking their private accounting
details. Bob stores his coins with this exchange and wishes to pay
for the proof, and thus a fair exchange situation arrives.
Again, if we try to apply a ZKCP protocol, it will fail. If the
exchange gives a zero knowledge proof of a proof of solvency, that
itself is a proof of solvency, and Bob has received what he wants
and does not need to pay.
To address this issue, we introduce Zero-Knowledge Contin-
gent Service Payments (ZKCSP). To illustrate, let’s focus on the
PoR example. Let v be the verification algorithm for the PoR. What
Alice wants then is for FileBox to demonstrate that it knows m such
that v (m) = 1.
Intuitively, our ZKCSP protocol works as follows: The prover
outputs a string y and gives a zero-knowledge proof that attests to
the following:
If v (m) = 1, then I know the preimage of y under
SHA256. But, if v (m) = 0, then the probability that I
know a SHA256 preimage of y is negligible.
We only provide the intuition here, but in Section 4 we show how
we can efficiently construct proofs of this form. There we also
prove that it is sufficient for the underlying SNARK to be Witness-
Indistinguishable, and therefore the security of the protocol can be
achieved even if the Verifier chooses the CRS, provided that the
Prover performs the minimal checks required to guarantee witness
indistinguishability.
Other Applications of ZKCSP. Bug Bounty is another interesting
application for ZKCSP. A software company GoodCode Inc. releases
a beta version of its new product and offers a reward for people
who find bugs in the code. Normally a ZKCP would suffice: the
seller proves in ZK that she found a bug, and the payment trigger
the release of the code of the bug. But there may be situation where
just the knowledge of the existence of a bug can be valuable to
GoodCode (for example, knowing that there is a bug, they will
delay release of the code, and avoid potential costly damages). In
this case a ZKCSP must be used to make sure that GoodCode pays
for such knowledge, and not just for the code of the bug.
In general any auditing or compliance application where the
buyer is paying for this type of services will require a ZKCSP rather
than a ZKCP.
ZKCP via ZKCSP. Since ZKCP is a special case of ZKCSP we
can use our ZKCSP protocol to obtain a secure ZKCP scheme that
does not require the prover to perform the expensive checks for
"subversion-ZK" but only the minimal checks to guarantee WI.
1.4 Our Contributions
We make the following contributions:
Attacks and fixes on ZKCP: We show that the ZKCP protocol
when instantiated as it is now, is insecure, and develop several
concrete attacks that allow a malicious buyer to learn information
about the witness without paying the seller. We implement our
attack by writing code for a malicious buyer that interacts with
the unmodified implementation of the seller [18], and learns infor-
mation about the Sudoku solution. We discuss how to avoid these
attacks and various possible solutions.
Zero-Knowledge Contingent Service Payments: We introduce
this new notion, and provide protocols for ZKCSP in both the public
and private verifier setting. Again using our PoR example, the public
verifier setting is when one wants to perform the service for the
general public. The private verifier setting is when one wants to
provide the service only for a specific individual.
Implementation: We implemented and tested the ZKCP attack.
We also implemented and tested our two new ZKCSP protocol,
for the case of PoR, showing that they are feasible. Moreover we
implemented a secure Pay-to-Sudoku ZKCP via our ZKCSP protocol.
Our code is available here [21, 22].
Improved SHA256 circuit: In the process of our implementation of