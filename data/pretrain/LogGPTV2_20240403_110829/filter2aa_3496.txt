黄建忠 (from TAIWAN)
whoami
● 现任研究生
● Linux 爱好者，关注系统安全领域
● 不是哪个资 ( ㄏㄞ ˋ) 安 ( ㄎㄜ ˋ) 组织或
公司的成员
● 简单说就是一个路人 QQ
今天讲什么？
● 一点点的除错器 (debugger) 实现原理
● Memory search
● Code injection
● Dynamic library function hooking
易
一点点难
题目有点简单 ......
今天的目标
●本投影片提供足够的资
讯，希望让各位看完后，
都有能力自己实作相关技
术
我们需要的东西
● 一台 Linux 机器 (64 位元 ) Linux Mint 17
● Python(2.7.6)
● 一点点的 c 语言和 intel x64 组语
Part 1
●一点点的除错器实现原理
除错器是啥？
● 用来恶搞或蹂躏其他 process 的遥控器
● GDB,ollydbg..... 等
看起来很好很强大 ,BUT.....
● 我想找哪条指令或数值在 memory 的哪
里？
● 我想对别的 process 加很多料
● 我们需要一个客制 , 自动化的工具
你不会想一直拿著遥控器的 ...
自己的工具自己写 !!
● 除错器是怎么运作的 ?
● 怎么去改或读其他 process 的 memory ?
如何读写其他 process 的 memory?
● ptrace (linux 提供的一个 system call)
● /proc/pid/mem (kernel >= 2.6.39)
● process_vm_readv, process_vm_writev(
kernel >= 3.2)
下断点 (set breakpoint)
● 让 process 停在想停的地方
● 写入 int 3(0xcc) 指令
● 用 wait() 等待 trap 事件的发生
执行后
用 wait() 来等待 trap
ptrace(1)
● 功能很多，但我们只有下列需求
→ 读写 data  从 ( 到 ) 某个地址 (8 bytes in x64) 
→ Attach,continue,detach process
→ 读或写暂存器的值
ptrace(2)
记忆体读写
Process 控制
暂存器读写
那用什么语言写 ?
● 我就是不想用 C 语言写
●人生苦短 , 请用 python
ctypes
● python 的标准模组
● 在 python 用 c 的 library
● 要知道我们要的 function 在哪个 library
printf 在 libc.so.6
ptrace,wait, 常用
function....
ctypes- 定义变数 (1)
ctypes type
C type
Python type
c_char 
char 
1-character string
c_long 
long 
int/long
c_ulong  
unsigned long
int/long
c_char_p 
char * (NUL 
terminated) 
string or None
c_void_p 
void * 
int/long or None
在 python 定义 c 语言型态的变数
ctypes- 定义变数 (2)
定义 Array
ctypes- 定义结构体
C
Python
微 debugger
Part 2
●Memory search
Memory search
● 寻找特定指令或数值的位址
● 应用
→ 找 ROP gadget ？
→ 游戏修改器 ？
但是我后面都不是以上用途 .......
Memory search- 怎么找
● man proc
● /proc/[pid]/maps （看地图 )
→ 收集相关资讯 
●  /proc/[pid]/mem 
→ 从这边找
/proc/[pid]/maps 
r-xp code segment
r—p 和 rw-p data segment 
载入 SO
记忆体区段位址范围
也包含 heap 和 stack 相关资讯
/proc/[pid]/mem(1)
● Process 的 memory 内容
● 可当作 file 存取 (open,read,lseek)
● 需要先用 ptrace attach 后才可以存取
需要 ROOT 权限
/proc/[pid]/mem(2)
● 在 python 怎么存取？
● 就像处理普通的 file 
/proc/[pid]/mem- 范例
相关讯息都由 proc/[pid]/maps 取得
“48 83 c4 08 c3”
复制贴上就好
/proc/[pid]/mem- 执行
Part 3
●Code injection
Code injection
● 把指令写入到目标 process 的 memory
→ 白话一点，给目标 process 加点料
● 以注入 so 为范例
● 唯一用 C 语言和 x64 组语的地方（只有一点点 ...)
在 windows
这叫 DLL
要生出一个 so
注入 SO 能干啥？
● Hotpatch ( 不用重启程式就可完成更新 )
● function hooking 
● 作防毒软体！？ 
顺便一提，有些恶意软
体也采用类似的技巧
如何注入 SO ?
● 既然都可以用 ptrace 控制目标的暂存器了 ......
→ 让目标 process 执行载入 so 的 api 即可
● 哪一个 API ?
→ __libc_dlopen_mode ( 位在 libc.so)
参考 glibc-2.19 的原始码
IDEA 源自 BLACK HAT 2001 
injectso
如何注入 SO - 找位址 (1)
● 因为 ASLR(Address space layout randomization)
→ 每次载入 SO 的位址都不一样
●
● 但是 OFFSET 不变
→ 所需 API 的位址相对位址都一样
OFFSET 都一样
dlopen dlsym 
来算 OFFSET
如何注入 SO - 找位址 (2)
自己也载入相同的 SO 来算 offset  
参考目标 /proc/pid/maps
+ so 的起始位址
如何注入 SO - 准备参数
● 在 Intel x64 ，是如何传递参数的？
把参数丢到暂存器
（ 32 位元是丢到 stack)
如何注入 SO - 实现
● 准备一个要注入的 so
Part 4
●Hooking
function hooking(1)
● Hooking 是什么 ?
→ 拦截或替换 process 的某一个 function 的一种技巧
function hooking(2)
● 那我用 hook 作什么事 ？
→ 统计某个 function 被呼叫了几次
→ 替换或监视这个 function 的参数内容
1. 下断点
2. 看参数或统计断点触发次数
3. 移除断点，让目标恢复执行
不是这样就搞定了吗 ?  BUT..........
function hooking(3)
● 如果目标是 multi-thread 性质的程式
● 如果目标 function 会被大量呼叫
→ 浏览器符合以上特性 （后面以 firefox 为例 )
可～～～能～～～会～～～很～～～慢～～～
有时候目标还会崩溃 QQ
CODE      0xcc
firefox
Timer
Cache 
I/O
Socket 
Thread
断点
假设少处理到一个
thread 产生的 trap
崩溃
放张崩溃图
HOOK 前注意事项
● 目标
→ 不要让目标崩溃 (crash)
→ 对目标执行速度影响要小
→ hook 方法要容易实现
HOOK 方法
● 采用的方法
→ 1. 先注入 SO ( 前面我们已经会了 )
→ 2. 让要 hook 的 function 跳到注入的 so 里
 → 3. 再从注入的 so 跳回去原本的 function
把前面的功能拼一拼就可实现
hook 范例
● 一个非常简单的例子
● 目标
→ 拦截 puts ，让它不要在睡了
如何改变执行流程 (1) ？
● 先来看点组合语言（在呼叫 puts 之前 )
跳到 0x400430 位址
跳到 0x601000 所存的位址
如何改变执行流程 (2) ？
● 还是再来点组合语言（在呼叫 puts 之后 )
跳到 0x400430 位址 ( 跟刚刚一样 )
值不一样了，这是 puts 的实际所在位址
如何改变执行流程 (3) ？
● Linux 的动态连结实现机制
→ plt → got → 实际 function 的所在位址
● 其实这样作是有道理的 ... 但是先不管它
● 只要改写 GOT 表格的值即可搞定
→ 用 memory search 的功能找要改的值在哪 ?
如何改变执行流程 (4) ？
● 那注入的 SO 要做什么 ?
→ 备份所有的暂存器
→ 做你想做的事
→ 还原所有的暂存器
→ 跳回原本被 hook 的 function 位址
● 怎么跳回去
→ push Address → ret
都使用组合语言
64 位元要迂回一点，不能直接 push 8bytes 的值到 stack 
注入的 SO 长这样
static inline function
把暂存器丢到 stack
备份 or 还原
先用 memory 
search 找到后改为
被 hook 的位址
DEMO
以 Firefox 为例
● 要拦截哪一个 function ?
→ PR_Write 位在 libnspr4.so
● 为什么拦它 ？
→ 会被许多 thread 大量呼叫，很好的测试点
→ HTTP 的 GET,POST 请求
可以拦到神奇的东西
DEMO
结论
●Thanks
参考资料
● 1.injectso
→ https://github.com/ice799/injectso64
● 2. playing with ptrace
→ http://www.linuxjournal.com/article/6100
● 3. python ctypes
→https://docs.python.org/2/library/ctypes.html