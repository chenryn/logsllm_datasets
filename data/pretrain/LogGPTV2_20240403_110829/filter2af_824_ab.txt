    /// Find Information Response
    struct l2cc_att_find_info_rsp
    {
        /// Find Information Response - 0x05
        uint8_t     code;
        /// The format of the information data.
        uint8_t     format;
        /// Data length
        uint16_t    data_len;
        ///The information data whose format is determined by the Format field
        uint8_t     data[__ARRAY_EMPTY];
    };
### l2cc_att_rd_by_type_rsp 整数溢出导致堆溢出
sub_7F0FDB4函数用于处理 `Read By Type Response` 类型的PDU，关键代码如下
    int __fastcall sub_7F0FDB4(int id, l2cc_att_rd_by_type_rsp *payload)
    {
      operation = gattc_get_operation(id, 1);
      if ( operation != 10 )
      {
        gattc_send_complete_evt(id, 1, v5);
        return v30;
      }
      if ( gattc_get_mtu(id) - 2 > payload->each_len )
      {
        msg = ke_msg_alloc(dword_7F102F0 + 4, v23, src_id, payload->each_len + 4);
        *msg = (payload->data[1] data[0];
        sub_len = (payload->each_len - 2);
        *(msg + 4) = sub_len;
        *(msg + 2) = 0;
        qmemcpy((msg + 6), &payload->data[2], sub_len); // 整数溢出
        ke_msg_send(msg);
      }
    }
如果operation为0，就会最后一个if分支，然后会判断 `payload->each_len` 小于 `gattc_get_mtu(id) - 2`
就会去根据 `each_len` 分配内存，然后对 `each_len - 2`
保存到`sub_len`，最后拷贝`sub_len`个字节的数据到新分配的内存msg里面。
如果 `sub_len` 为 1，`msg`可用内存空间就是 `5`， 然后 `sub_len` 会由于整数溢出导致值为 `0xFFFF`
，然后进行`memcpy`时就会导致堆溢出。
### ATT PDU处理函数多处越界读
ATT PDU处理函数中，很多都没有考虑输入数据的长度，直接去访问，如果输入数据长度小于访问的大小的话就会导致越界读，本节就介绍几个典型的例子
比如sub_7F1015C
    int __fastcall sub_7F1015C(int a1, l2cc_att_rd_rsp *payload)
    {
      v4 = gattc_get_operation(a1, 1);
      if ( v4 == 4 )
      {
        v6 = gattc_get_operation_ptr(a1, 1);
        v7 = co_list_pop_front((off_7F102F4[a1] + 12));
        qmemcpy(&v7[5].next + 3, payload->value, 0x10u);  // 直接拷贝， 越界读
这里直接从
payload->value部分拷贝0x10字节，没有检查payload的实际长度，当payload剩余长度比较小（小于0x10）就会导致越界读。
这个例子是没有校验的，下面看一个校验失败的
    void sub_7F11E24(int id, l2cc_att_rd_mult_req *payload)
    {
      v2 = 0;
      v4 = co_list_size((_DWORD **)off_7F11FAC[id] + 24);
      p_payload_length = (int)(payload - 1); 获取 &l2cc_pdu->payld_len
      if ( !*p_payload_length )
      {
        *p_payload_length = gattc_get_mtu(v19) - 1;
      }
      while ( payload->nb_handles > v4 && *p_payload_length )
      {
        if ( v2 )
        {
          goto LABEL_13;
        }
        data = (int)payload + 2 * v4;
        v2 = sub_7F1126C(v19, 0, *(unsigned __int16 *)(data + 4), (int)v16);
      }
函数首先根据 `payload - 1` 可以获取到 `l2cc_pdu` 的开头，然后去访问 `l2cc_pdu` 里面的 `payld_len`
就可以得到`payload`的长度（`p_payload_length`）。
    struct l2cc_pdu
    {
        /// L2Cap Payload Length
        uint16_t payld_len;
        /// L2Cap Channel ID
        uint16_t chan_id;
但是后续代码只检查 `p_payload_length` 的值是否为0，假设 `p_payload_length` 为 1，就会进入循环，然后根据 `v4`
计算 `data` 的地址，然后去访问，这时就会导致越界读。
## 其他
没事干在SDK里面瞎浏览的时候发现gattc_write_req_ind_handler这个函数，然后在google上浏览发现该函数应该是用于处理GATT协议栈的某种报文的，然后在SDK中搜索gattc_write_req_ind_handler的引用
    const struct ke_msg_handler pasps_default_state[] =
    {
        {GATTC_WRITE_REQ_IND,           (ke_msg_func_t) gattc_write_req_ind_handler},
    };
可以看到gattc_write_req_ind_handler对应的消息ID为 GATTC_WRITE_REQ_IND（值为
0xC15），然后继续搜索GATTC_WRITE_REQ_IND看看是谁会发送该消息，不过在SDK源码中没有找到，应该是在ROM中的固件会发送该消息，我们可以使用
[之前的脚本](https://github.com/hac425xxx/BLE-DA145XX/blob/main/argument_tracker.py#L658) 把所有的msg id
使用情况导出到文件，然后在文件中搜索该消息ID, 0xC15，最后找到位于`0x7f114dc`的函数会调用发送该消息
    void __fastcall caller_gattc_write_req_ind(int a1, const void *value, size_t length, uint16_t offset, uint16_t handle, char a6)
    {
      msg = ke_msg_alloc(0xc15, v8, (a1 handle = handle;
      v10 = msg;
      msg->length = length;
      msg->offset = offset;
      qmemcpy(msg->value, value, length);
      ke_msg_send(v10);
主要就是把入参的value、length和offset通过消息发送出去，其中 length表示
value的长度，跟踪该函数的交叉引用，可以发现其中一条路径是 0x52 类型的 ATT PDU的会调函数调用
    sub_7F11F42
        caller_gattc_write_req_ind
0x52的结构体定义如下
    /// Write Command
    struct l2cc_att_wr_cmd
    {
        /// Write Command - 0x52
        uint8_t     code;
        /// The handle of the attribute to be written
        uint16_t    handle;
        /// Value length
        uint16_t    value_len;
        /// The value to be written to the attribute
        uint8_t     value[__ARRAY_EMPTY];
    };
`sub_7F11F42` 函数关键代码
    void __fastcall sub_7F11F42(int a1, l2cc_att_wr_cmd *payload)
    {
      if ( !get_elem_by_handle(a1, 2, payload->handle, elem) 
      && !verify_value_len(elem, payload->value_len, 0, v4) )
      {
        caller_gattc_write_req_ind(a1, payload->value, payload->value_len, 0, payload->handle, 82);
      }
首先根据`handle`找到对应的元素，然后检查`value_len`不能超过`elem`的最大长度，最后就会通过`caller_gattc_write_req_ind`把数据发送到`gattc_write_req_ind_handler`进行后续处理。
在SDK中搜索 `gattc_write_req_ind_handler`
可以发现该函数有多个实现，猜测是针对不同的场景，用户可以重写该函数实现特定的功能，使用
[search_msg_handler.py](https://github.com/hac425xxx/BLE-DA145XX/blob/main/search_msg_handler.py#L97) 搜索 0xC15
消息回调函数，也可以在固件中找到一些实现，其中部分可以和SDK的源码对应。
通过分析这个流程，我们可以从 `gattc_write_req_ind_handler`
开始一些漏洞挖掘，不过由于这部分在SDK中有源码，所以审计起来会轻松不少。
## 参考链接
    https://www.cnblogs.com/iini/p/8977806.html  详解BLE空口包格式—兼BLE Link layer协议解析
    https://tw511.com/a/01/14340.html