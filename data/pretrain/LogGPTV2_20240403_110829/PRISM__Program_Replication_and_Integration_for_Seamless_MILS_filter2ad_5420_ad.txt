/mls/topsecret/ (data:rw, ns:rw)
This enumeration of multiple hierarchical namespaces that
are rooted by an originating classiﬁcation provides a secure,
clean and ﬂexible abstraction on which larger scale MLS
document management can be easily managed by users or
higher-level PRISM-aware software.
290
We ﬁnalise our discussion on security properties by argu-
ing the high tractability of certifying products based on our
architecture.
A. Covert Channels
The Trusted Computer Security Evaluation Criteria (TC-
SEC) [7] deﬁne two types of covert channel: storage chan-
nels and timing channels. Both aim to hide the transfer of
information between two entities, in either an unintended
side channel or encoded within an otherwise legitimate
data stream. Storage channels hide information by directly
modifying typically unused or redundant elements within
a data stream, while timing channels signal
information
through the relative timing or ordering of events.
In this discussion we ignore any covert channels in
the underlying MILS or Annex separation kernel, since a
primary function of this kernel is to provide strong protection
against these, and focus only on additional channels relating
to the timing and content of ﬁle updates introduced by
distribution of the MLSDoc ﬁles.
PRISM’s susceptibility to such covert channels differs
is used in paranoid mode or
depending on whether it
convenience mode, plus whether or not system-low storage
is used. In all cases, however, PRISM’s use of opaque data
streams restricts covert channels to modulating metadata
such as when ﬁles are synchronised, their path, their size
or the location of convenience mode markers. This drasti-
cally reduces PRISM’s susceptibility to high capacity covert
channels.
1) Paranoid Mode: Assuming the proper operation of the
TCB, PRISM’s paranoid mode without system-low storage
results in no high to low information ﬂows of any kind;
hence there can be no covert channels.
2) Common to System-Low and Convenience Modes:
Both system-low and convenience modes involve updating
lower-level copies of an MLSDoc ﬁle.
A potential covert channel would exist if untrusted soft-
ware were allowed to control the timing of synchronisations,
thus creating a timing channel.
The potential capacity of such a channel can be approxi-
mated by modelling it as a discrete noiseless channel driven
by a Markov process where the entropy of the discrete ran-
dom variable X is given by H(X) = −Px∈X p(x) log p(x)
[20]. A binary random variable then models the presence,
or otherwise, of a synchronisation occurring during a given
time slot of length τ seconds. If the rate of synchronisations
is limited to R per second where Rτ ≪ 1 per slot
then the probability of a synchronisation occurring within
a given time slot p(x = sync) ≈ Rτ , and conversely
p(x = !sync) ≈ (1−Rτ ). Hence, the potential timing covert
channel capacity of 1
τ H(X) bits per second is then:
CCtiming ≈ −
1
τ
(Rτ log2(Rτ ) + (1 − Rτ ) log2(1 − Rτ ))
291
Figure 8. The Top Secret view when editing an MLS DokuWiki.
VIII. DOKUWIKI SUPPORT
We have used PRISM’s MLS ﬁling system to store ﬁned-
grained MLS information within DokuWiki [8]. As with
all applications that could be built on top of PRISM, the
trusted processing remains the same; only a new untrusted
difﬁng component needed to be developed. However, our
careful choice of DokuWiki – which uses plain text XML
compatible ﬁles for wiki page storage – allowed us to reuse
much of the same untrusted difﬁng engine that we used for
the Microsoft Word add-in.
Using the mlsfs system to intercept application ﬁle
changes allowed us to avoid making any invasive changes to
the DokuWiki source code, demonstrating a greater degree
of decoupling between MLS infrastructure and the native
application than was the case with MS Word. When a mod-
iﬁed wiki ﬁle is saved, the mlsfs system uses XMLStarlet
to convert any changes into MLSDiff patches and forwards
them on to the TCB for trusted BLP policy veriﬁcation,
merging into the ﬁle’s canonical MLSDoc container and the
sanitised released back to all partitions.
On arrival in a partition the mlsfs system notiﬁes the
DokuWiki plugin, which assembles the changes back into
DokuWiki native ﬁle format.
Figure 8 demonstrates a wiki version of the Top Secret
view of the MLS Word document shown in Figure 6.
IX. SECURITY PROPERTIES
This section provides a critical analysis of the security
properties of our PRISM architecture. Since data conﬁ-
dentiality was our primary concern, we have paid partic-
ular attention to identifying and mitigating potential Covert
Channels (CC). Secondary concern for data integrity and
availability encouraged us to examine the potential suscep-
tibility of our system to Replay Attacks and classiﬁcation
spooﬁng that might confuse the user. Finally, while some-
what beyond the scope of this paper, we brieﬂy comment
on how implementing PRISM on top of the Minisec’s
Silicon Trojan resistant design provides further guarantees
for conﬁdentiality, integrity and availability.
If the TCB enforced a timing resolution of 1 second and
a limit of 100 synchronisations per day (1.16 × 10−3 per
second), a covert timing channel could potentially transmit
up to 140 bytes per day.
However, rather than having the TCB blindly redistribute
high-level updates to lower levels, the sync-and-switch pro-
tocol from Section VII limits updates to whenever the user
wishes to synchronise content and switch to a different
domain. This prevents untrusted software from modulating
synchronisation operations and the timing channel is com-
pletely removed.
Further covert channels would exist if the untrusted soft-
ware were allowed to synchronise any ﬁlename in any order,
using the ﬁlename or ordering to contain or modulate a
hidden message. These can also be completely countered,
however, by TCB GUI software indicating the ﬁle being
synchronised and asking the user to conﬁrm this action; an
example of such a system will follow shortly. The attempted
operation of a such a covert channel would become rapidly
apparent to the user if the system started trying to synchro-
nise ﬁles that were not being actively edited.
3) Unique to System-Low Mode: The use of system-
low storage potentially allows a high-level process to en-
code a message readable at the low level by modulating
the length EL bytes of an MLSDoc’s encrypted content.
However, the potential channel capacity of this scheme can
be extremely constrained by padding the encrypted section’s
length to a power of two, reducing the channel capacity to
log2(log2(EL)) bits per synchronisation. For example, for
ﬁles “limited” to between a 32 byte (25) cipher block and
2261 bytes of encrypted content (i.e. practically unlimited)
this results in a potential covert channel of one byte per
synchronisation. As above, trusted sync-and-switch can limit
the number of synchronisations, and TCB GUI software can
help ﬂag wild ﬁle size variations to the user.
4) Unique to Convenience Mode: Convenience mode
introduces the most problematic potential covert channel. An
inherent side effect of the desirable functionality that conve-
nience mode affords is that there is also scope for malicious
untrusted software to modulate a covert channel using high-
level content markers between each byte of lower-level data.
This simple scheme could yield the transmission of one bit
of information per byte of low-level data synchronised.
This dangerously high capacity channel can be easily
constrained, however, by allowing for only a reasonable
number M of high-level marker insertions or deletions per
synchronisation. The potential capacity will then be bounded
by the entropy present
in the variation of where high-
level markers can potentially be inserted in (or removed
from) low-level data. Given L bytes at the low security
there are L + 1 locations where markers may be
level
inserted (or removed). Modifying m markers during any
individual synchronisation results in C L+1
m possibilities. The
total number of symbols that can be encoded is then the sum
Table II
UPPER BOUNDS IN BYTES PER SYNCHRONISATION OF POTENTIAL
COVERT CHANNEL WHEN IN CONVENIENCE MODE AND ALLOWING THE
MODIFICATION OF UP TO M MARKERS WITHIN L LOW-LEVEL BYTES
USING EQUATION 1.
L
Markers, M
(bytes)
1
5
10
50
100
200
1000
100
1000
3873
10000
100000
106
8 × 106
107
108
109
0.83
1.25
1.49
1.66
2.08
2.49
2.87
2.91
3.32
3.74
3.29
5.37
6.59
7.44
9.52
11.6
13.5
13.7
15.7
17.8
5.54
9.73
12.2
13.9
18.0
22.2
25.9
26.3
30.5
34.6
12.5
35.3
47.7
56.3
77.0
97.8
117
119
139
160
12.6
58.1
83.2
100
142
184
221
225
267
308
12.6
89.7
141
176
260
343
418
426
509
592
12.6
125
398
586
1009
1425
1800
1841
2256
2671
of possible marker combinations for all m ≤ M , leading to
a per-synchronisation potential covert channel (in bits) of:
CCconvenience = log2  M
Xm=0
(L + 1)!
(L + 1 − m)!m!! (1)
This is easily computable in O(M) operations by starting
m and rescaling
m+1 = L+1−m
at m = 0, noting that C L+1
if necessary to avoid overﬂow.
m+1 C L+1
Alternatively, the covert channel can be estimated as per
the timing channel by modelling it as a Markov process
ﬁlling L + M slots with either a data byte (X=0) or marker
(X=1). The channel capacity in bits per synchronisation is
bounded by the entropy H as follows:
CCconvenience ≤ L log2
L + M
L
+ M log2
L + M
M
This is an overestimate because it allows for ﬁles con-
taining adjacent markers and for ﬁles with greater than M
markers, both of which are precluded by the TCB.
With trivial differences, applying either of these ﬁnal
equations can give a theoretical upper limit for the potential
covert channel capacity of convenience mode. Upper bounds
for various combinations of M and L are given in Table II.
While these are theoretical limits, even simple signalling
schemes can achieve high efﬁciencies when M ≪ L,
especially when the preservation of legitimate user data
can be dispensed with – although the latter will obviously
destroy any chance of stealthy operation. For example, if
the low-level ﬁle were conceptually split into L
M blocks,
the careful positioning of one marker in each block could
L
yield a total covert channel capacity of M × log2
M bytes
per synchronisation. For an 8MB document limited by up
to 10 high-level content marker modiﬁcations at a time, this
scheme would yield 24.6 bytes per synchronisation, which
is 95% of the theoretical peak of 26 bytes.
292
the TCB would simply reject the changes. To counter this
problem in system-low mode the TCB would need to main-
tain a version identiﬁer for each system-low ﬁle, although
the data remains elsewhere.
C. Classiﬁcation Spooﬁng
A classiﬁcation spooﬁng attack against PRISM involves
attempting to fool a user or untrusted software about the
classiﬁcation of particular content by formatting it so that it
appears to belong to a different security level. For example,
top secret content may be formatted (in the top secret
domain) to appear as though it is unclassiﬁed in the hope that
the user may inappropriately treat it as such and re-divulge
that information at a lower level. Alternatively, unclassiﬁed
content may be formatted (in the unclassiﬁed domain) as top
secret in the hope that a high-level user or untrusted software
will inappropriately treat it as such and grant it more weight
than it deserves.
it
is important
In all of these cases, however,
to re-
member that regardless of what formatting any untrusted
software in an SLS partition applies to the data entered
into it, MLSDoc’s trusted processing ensures that the data
(and formatting instructions) remain inextricably linked to
the security level at which they were created. Hence, the
example misattributed “unclassiﬁed” information held at the
top secret level and the “top secret” information found at
the unclassiﬁed level actually retain their conﬁdentiality and
security-level integrity within the technical conﬁnes of the
PRISM system. If automated software becomes confused
and attempts to patch this data through MLSDoc to a differ-
ent security level, the changes will be rejected. As is the case
in existing system-high environments, an unconﬁned person
should remain on guard for these types of psychological
attacks; PRISM helps them identify such misinformation
by simply viewing the same document at different security
levels and noticing when information purporting to be of a