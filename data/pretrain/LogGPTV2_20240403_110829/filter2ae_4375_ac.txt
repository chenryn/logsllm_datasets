    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: test-role
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: test-role
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: test
    [root@pegasus01 role]# cat test_cluster_role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: test-role
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
      - watch
    [root@pegasus01 role]# cat test_pod.yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: test
      namespace: role
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - sleep 36000000
        image: grafana/grafana:5.2.3
        imagePullPolicy: IfNotPresent
        name: test
        resources:
          requests:
            cpu: 10m
      dnsPolicy: ClusterFirst
      priority: 0
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
    [root@pegasus01 role]# cat test_role_binding.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: test-role
      namespace: role
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: test-role
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: test
    [root@pegasus01 role]# cat test_role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: test-role
      namespace: role
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - get
      - list
      - delete
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - get
      - list
      - delete
      - watch
    - apiGroups:
      - ""
      resources:
      - pods/exec
      verbs:
      - create
      - get
    [root@pegasus01 role]# cat /etc/kubernetes/pki/role-token.csv
    1234567890,test-role,test-role,test
#### 8.2 websocket相关
WebSocket是一种在单个TCP连接上进行全双工通信的协议。所以WebSocket 是独立的、创建在 TCP 上的协议。Websocket 通过
HTTP/1.1
协议的101状态码进行握手。为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（handshaking）。
一个典型的Websocket握手请求如下：
客户端请求
    GET / HTTP/1.1
    Upgrade: websocket
    Connection: Upgrade
    Host: example.com
    Origin: http://example.com
    Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==
    Sec-WebSocket-Version: 13
服务器回应
    HTTP/1.1 101 Switching Protocols
    Upgrade: websocket
    Connection: Upgrade
    Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=
    Sec-WebSocket-Location: ws://example.com/
字段说明
    Connection必须设置Upgrade，表示客户端希望连接升级。
    Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。
    Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。
    Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。
    Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是，与Referer不同的是，Origin只包含了协议和主机名称。
    其他一些定义在HTTP协议中的字段，如Cookie等，也可以在Websocket中使用。
#### 8.3 TCP连接复用与HTTP复用
TCP连接复用技术通过将前端多个客户的HTTP请求复用到后端与服务器建立的一个TCP连接上。这种技术能够大大减小服务器的性能负载，减少与服务器之间新建TCP连接所带来的延时，并最大限度的降低客户端对后端服务器的并发连接数请求，减少服务器的资源占用。
在HTTP 1.0中，客户端的每一个HTTP请求都必须通过独立的TCP连接进行处理，而在HTTP
1.1中，对这种方式进行了改进。客户端可以在一个TCP连接中发送多个HTTP请求，这种技术叫做HTTP复用（HTTP
Multiplexing）。它与TCP连接复用最根本的区别在于，TCP连接复用是将多个客户端的HTTP请求复用到一个服务器端TCP连接上，而HTTP复用则是一个客户端的多个HTTP请求通过一个TCP连接进行处理。前者是负载均衡设备的独特功能；而后者是HTTP
1.1协议所支持的新功能，目前被大多数浏览器所支持。
* * *