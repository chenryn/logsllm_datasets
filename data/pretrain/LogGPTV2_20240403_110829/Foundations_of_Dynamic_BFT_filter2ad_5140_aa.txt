title:Foundations of Dynamic BFT
author:Sisi Duan and
Haibin Zhang
7
8
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Foundations of Dynamic BFT
Haibin Zhang∗
Sisi Duan†
Tsinghua University
Email: PI:EMAIL
Beijing Institute of Technology
Email: PI:EMAIL
Abstract—This paper studies dynamic BFT, where replicas
can join and leave the system dynamically, a primitive that is
nowadays increasingly needed. We provide a formal treatment
for dynamic BFT protocols, endowing them with a flexible syntax
and various security definitions.
We demonstrate the challenges of extending static BFT to
dynamic BFT. Then we design and implement Dyno, a highly
efficient dynamic BFT protocol under the partial synchrony
model. We show that Dyno can seamlessly handle membership
changes without incurring performance degradation.
I. INTRODUCTION
Byzantine fault-tolerant state machine replication (BFT) has
been traditionally known as a primitive to build mission-
critical systems. Nowadays, BFT has gained its prominence,
because it is deemed as a core building block for blockchains:
BFT is known as the model for permissioned blockchains [54],
where the membership is static and the ledgers (replicas)
know each other’s identities but may not trust one another.
BFT is also increasingly being used in various manners in
permissionless blockchains (these protocols are also called
hybrid blockchains [26, 27, 56]). This paper studies BFT with
dynamic membership, or simply dynamic BFT, where replicas
may join and leave the system dynamically. Dynamic BFT,
a primitive that may be traditionally viewed as one enabling
desirable features from the system perspective, is nowadays
increasingly needed as a core building block for a myriad of
blockchain and security applications.
Normal recovery and reconfiguration. As in any static
distributed systems, a static BFT system has practical limi-
tations [46]: if, for instance, one of the replicas crashes, needs
maintenance, or is deemed as being faulty, the probability
for the system to be always available reduces. It may not be
always feasible to recover the faulty one, because recovering a
node can take time, and more importantly, recovering may not
always be possible (due to, e.g., permanent hardware failures).
In this case, a better approach is to create a new replica to
replace the faulty one.
Proactive recovery. Dynamic BFT can be used to build a
robust BFT system with proactive recovery that works in the
long run. The problem of proactively secure BFT systems has
been studied in many previous works [10, 51]. These systems
use a trusted hardware to periodically restart nodes, in a hope it
will evict the adversary. The adversary (e.g., viruses), however,
may well stay in the system, rendering the effort useless. A
†Sisi is with Institute for Advanced Study and BNRist.
*Corresponding author.
fresh replica, however, does not have such a problem. Dynamic
BFT thus provides an alternative and arguably better solution
to the traditional proactive recovery approach.
Consortium blockchains. The static membership property of
BFT may significantly limit the applicability of consortium
blockchains. The blockchain entities may choose (or be forced)
to leave the constortium, while new entities may join the
consortium. For instance, Libra, now rebranded as Diem, has
already faced such a situation, where dynamic membership is
managed by their smart contract after an agreement has been
reached by the BFT.
Hybrid blockchains. The hybrid blockchains using BFT need
to select a fixed number of BFT replicas, called committees,
which can easily become sitting ducks. It is vital to be able to
change committees while keeping the system up and running.
A. Technical Challenges and Our Contributions
A formal treatment of dynamic BFT. Despite the need
for dynmaic BFT,
there has, until now, been no rigorous
formalization offered for dynamic BFT. While some related
primitives have been defined in crash failure model [11, 46]
and Byzantine failure model [20, 39, 40], there lacks a good
abstraction for dynamic BFT with provable security. Looking
at dynamic BFT from a modern vantage—in the “era of
blockchains”—is long overdue. This paper fills in this gap and
offers a formal treatment of dynamic BFT. Our specification
covers a syntax separating BFT from the membership service,
an approach stemming from the work of Schiper for the crash
failure model [46]. Our definitions of security, however, take
a rather different turn by treating indistinctively regular and
membership requests. More crucially, our treatment has the
following two features:
• In lifting security definitions to dynamic BFT, we define a
new property (consistent delivery) that we find crucial to
the security of dynamic BFT. We show some natural and
alternative delivery properties fail to work.
• Our treatment consists of a number of security definitions
for different notions of “being correct” for dynamic BFT,
each being meaningful, from the weakest to the strongest
we can envision.
Identifying (new) issues for dynamic BFT. Despite a long
line of work for dynamic membership (mainly in crash fault-
tolerant systems), we discover some (new) issues:
• Problems due to dynamic quorum (specified in Sec. IV).
In dynamic BFT, the membership change leads to the the
© 2022, Sisi Duan. Under license to IEEE.
DOI 10.1109/SP46214.2022.00117
11317
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
change of the quorum size, creating various liveness issues.
• Problems due to view changes (specified in Sec. IV). In dy-
namic BFT with view changes (i.e., leader election), there
are various issues as well. For instance, the next leader
may be unable to collect enough view change messages,
may even be unaware of the view change occurring. Even
worse, multiple replicas may claim they are the leader in
the same view.
• Problems due to message delivery (specified in Sec. III-E).
Static distributed systems have a message delivery assump-
tion that messages transmitted among correct replicas are
eventually delivered. This assumption does not hold for
the dynamic setting, as some correct replicas, while being
correct when sending messages, may leave the system in
some future configuration. We find that even some classic
protocols in the secure distributed computing community
(e.g., [46]) simply assume message delivery across con-
figurations and the proofs for these protocols are actually
flawed.
Configuration discovery protocols. Our protocols rely on
configuration discovery sub-protocols, where clients and new
replicas obtain the membership of the system. The config-
uration discovery protocols are not
just crucial from the
functionality perspective but to the correctness of our dynamic
BFT protocols. We provide one such protocol which uses
explicit membership discovery. We also present in appendix
two alternative protocols using implicit membership discovery.
Constructions, assumptions, and their presentation. We
consider two different assumptions: the standard quorum as-
sumption (assuming optimal resilience for each configuration)
and the G-correct assumption (assuming a fraction of correct
replicas never leave the system). Based on each assumption,
we provide protocols satisfying different definitions of security
we propose. We first present Dyno, the main protocol in the
paper. We then present the variants of Dyno. We formally
prove the security of all the protocols.
One of our aims is to handle membership change seam-
lessly. Dyno retains the full efficiency of the underlying
BFT protocol and can handle membership requests indepen-
dently of view changes. Dyno, however, does make significant
modifications—while adding no performance overhead—to
both the normal-case operation and the view change mecha-
nism of the underlying BFT protocol. We show Dyno is highly
efficient and robust under various join and leave scenarios.
II. RELATED WORK
BFT. As a generic approach that tolerates arbitrary failures,
BFT can be categorized into synchronous BFT [1], partially
synchronous BFT [10, 14, 15, 50] and asynchronous BFT [16,
17, 33]. In this work, we focus on partially synchronous BFT.
Primary partition vs. partitionable membership services.
A membership service may be primary partition or partition-
able [11]. In a primary partition service, views at all replicas
are totally ordered. In a partitionable one, views are partially
ordered, i.e., multiple disjoint views may exist at the same
time. The paper studies the primary partition model only.
Dynamic group communication. The group membership
problem and the view synchronous communication problem
were first discussed by Birman and Joseph [7]. A group mem-
bership abstraction provides a dynamic yet consistent view
of active members. View synchronous communication [7, 47]
extends group membership to support reliable broadcast within
members of views. Extended virtual synchrony [37] extends
virtual synchrony, ensuring a consistent relationship between
delivery of messages and that of configuration changes across
all replicas. Spread [5] and Secure Spread [4] encompass
both virtual synchrony and extended virtual synchrony in the
crash failure model. Secure Spread enhances Spread with
authentication, integrity, access control, and confidentiality.
Chockler et al. [11] provide a comprehensive survey on dy-
namic group communication systems: the group membership
service (for adding and removing processes) is defined first,
while the communication primitives (e.g., reliable broadcast,
atomic broadcast) are specified in a second step. In these
systems, the group membership service is the basic layer of
various communication stacks. In contrast, Schiper’s specifica-
tions describe communication primitives first and then mem-
bership changes and allow that all membership changes come
from explicit invocations of membership requests [46]. The
primitive defined for atomic broadcast, for instance, is called
dynamic atomic broadcast, or simply atomic multicast. Schiper
argued that the choice leads to more “natural” and simpler
specifications. Schiper [46] also shows that his specifications
are only slightly different from the ones surveyed in [11] in
terms of liveness properties.
Guerraoui et al. recently proposed dynamic Byzantine re-
liable broadcast (DBRB), where replicas can join and leave
the system dynamically [20]. From the definition perspective,
DBRB solves a rather different problem (broadcast) from ours
(consensus) and focuses on asynchronous settings. From the
technical perspective, DBRB allows divergent view paths that
will eventually converge to the same view.
Rampart [39] and SecureRing [25] implement state machine
replication in the Byzantine failure model and rely on Byzan-
tine failure detectors to achieve liveness.
Reconfiguration for atomic
storage. Dynamic atomic
read/write (R/W) storage can be consensus-based [19, 36, 44]
and consensus-free. Aguilera et al. demonstrate in DynaS-
tore [2] that dynamic atomic storage can be solved, without
using consensus (or randomization), in asynchronous settings.
Starting from DynaStore, a number of consensus-free dynamic
atomic storage constructions have been proposed (e.g., [3, 18,
23]). Kuznetsov and Tonkikh present asynchronous atomic
storage with Byzantine failures [28].
Reconfiguration for SMR. Lamport proposes in Paxos to
manage membership changes as part of the system state [30].
After an agreement
is reached for a membership request,
replicas wait for α batches of requests to be executed before
they install
the new configuration. Lorch et al. proposed
SMART [34] where reconfiguration of the system is managed
by creating an additional group of replicas. The two groups
of replicas run parallel Paxos instances until
the system
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
21318
state is fully migrated to the new group. For primary/backup
replication, solutions for reconfiguration are studied in a
crash failure setting [22, 49]. Raft [38] presents a two-phase
approach for reconfiguration. The first phase is a transitional
configuration called joint consensus. To transition to a new
configuration, replicas in both configurations participate in
the joint consensus, while agreement is independently main-
tained. This approach allows replicas in older configuration
to continue providing service to the clients and replicas in
new configuration to catch up with the history. Only after the
joint consensus has been committed, the system moves to the
new configuration. BFT-SMaRt is a BFT system that supports
reconfiguration [50], where membership requests are treated as
a special type of client requests and order all requests together.
Our systems use this strategy as well. But doing so alone
without further modifying the protocol, may create liveness
issues (zero throughput), as we will theoretically show for
any leader-based BFT protocols in Sec. IV and experimentally
show for BFT-SMaRt in Sec. VIII.
Reconfiguration using auxiliary master. Reconfiguration of
a system (storage, SMR, or primary backup replication) can
be managed by an auxiliary master [31, 35, 43]. For instance,
Vertical Paxos shows (in the crash failure setting) that it is
sufficient to use f + 1 replicas to build a configuration master
that manages the configuration of SMR.
Membership management. Dynamic BFT is in sharp contrast
to membership management, a service managing the nodes in
distributed systems [12, 13, 24, 32, 41, 42, 45, 52]. The service
can either be built from a standalone SMR (e.g, Apache
Zookeeper [21], Google Chubby [9]) or via self discovery of
the membership (e.g., SWIM [13]). In contrast, dynamic BFT
is a fundamentally different primitive, which can be viewed
as a self-configurable SMR.
Durability. Durability is a capacity of surviving state machine
replication system crash or shutdown and bringing recovering
replicas up to date. The property has been previously consid-
ered in the context of static groups [6, 10], while we consider
a similar one for dynamic groups from a different perspective.
III. SYSTEM AND THREAT MODEL
A. Static BFT
Conventional Byzantine fault-tolerant (BFT) protocols have
a constant set of replicas, a fraction of which may fail
arbitrarily (Byzantine failures). In BFT, a replica delivers