title:Partitioning Attacks: Or How to Rapidly Clone Some GSM Cards
author:Josyula R. Rao and
Pankaj Rohatgi and
Helmut Scherzer and
St&apos;ephane Tinguely
Partitioning Attacks: Or How to Rapidly Clone Some GSM Cards
Josyula R. Rao, Pankaj Rohatgi and Helmut Scherzer
Stephane Tinguely
IBM Watson Research Center
P.O. Box 704
Yorktown Heights, NY 10598
fjrrao@us, rohatgi@us, PI:EMAIL
Communications Systems Division
Swiss Federal Institute of Technology
1015 Lausanne
Switzerland
stephane.tinguely@epﬂ.ch
Abstract
In this paper, we introduce a new class of side–channel
attacks called partitioning attacks. We have successfully
launched a version of the attack on several implementa-
tions of COMP128, the popular GSM authentication algo-
rithm that has been deployed by different service providers
in several types of SIM cards, to retrieve the 128 bit key
using as few as 8 chosen plaintexts. We show how parti-
tioning attacks can be used effectively to attack implemen-
tations that have been equipped with ad hoc and inade-
quate countermeasures against side–channel attacks. Such
ad hoc countermeasures are systemic in implementations
of cryptographic algorithms, such as COMP128, which re-
quire the use of large tables since there has been a mistaken
belief that sound countermeasures require more resources
than are available. To address this problem, we describe
a new resource–efﬁcient countermeasure for protecting ta-
ble lookups in cryptographic implementations and justify its
correctness rigorously.
Keywords: smartcards, authentication, security protocols,
commercial and industrial security, side channel attacks,
GSM, COMP128.
1. Introduction
Side–channel attacks [6, 8, 2, 10] have recently gained
prominence as an effective and practical means for attack-
ing cryptographic systems. Cryptographic algorithms are
traditionally designed to withstand attacks that treat the im-
plementation as a black box, focusing instead on exploiting
subtle relationships between inputs and outputs. In prac-
tice, the black box model may be unrealistic, since any im-
plementation provides more information to a determined
adversary than just the inputs and outputs. For instance,
an adversary can obtain sensitive information from side–
channels such as timing of operations[5], power consump-
tion [6], electromagnetic emanations [9] etc. In fact, in con-
strained devices such as chip–cards, straightforward imple-
mentations of any cryptographic algorithm can be compro-
mised with minimal work [6, 3].
In view of these exposures, vendors of cryptographic
systems employ a variety of software and hardware counter-
measures to “harden” their implementations against side–
channel attacks. Popular software countermeasures are
based on generic principles described outlined [6, 2, 4]. Im-
plementing these principles typically requires either proto-
col changes [6] or additional resources [2, 4]. In fact, the
authors of [2] enunciate a cardinal principle, outlined in the
next section, that must be followed for implementations to
resist ﬁrst–order differential side–channel attacks. Realiz-
ing an implementation that conforms to this principle, es-
pecially on devices with resource and cost limitations, is a
challenging and error–prone task which several implemen-
tors fail to perform correctly. In addition, many implemen-
tors erroneously believe resources limitations prevent effec-
tive application of this principle and therefore apply some
ad–hoc and partly effective countermeasures.
As a consequence, many supposedly “hardened” imple-
mentations remain vulnerable. This is especially true for
algorithms that employ large table lookups since obtaining
side–channel attack resistance for table lookups is tricky
and appears to be highly resource intensive. For exam-
ple, the commonly used authentication/session-key gener-
ation algorithm in existing GSM phone networks, i.e, the
COMP128 algorithm, requires lookup of ﬁve tables of sizes
512, 256, 128, 64 and 32 bytes each.
In this paper, we develop a new class of side–channel
attacks, called partitioning attacks, which can be used to
attack implementations which may otherwise resist some
side–channel attacks. We introduce the concepts underlying
this new class of attacks by showing how an implementation
of the COMP128 algorithm on the SIM cards of a popu-
lar GSM network, that is resistant to some side–channel at-
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
tacks, can be broken1. The partitioning attack on the imple-
mentation is extremely effective. The entire 128 bit key of
COMP128 can be recovered from a SIM card with less than
1000 invocations with random inputs, or 255 chosen inputs,
or only 8 adaptively chosen inputs! Thus, an adversary who
has possession of a SIM card for a minute can easily extract
the key. In contrast, the previously best technique to attack
GSM SIM cards was to employ a cryptanalytic attack on
the COMP128 algorithm with 150,000 chosen inputs. This
entails access to a SIM card for around 8 hours and a card
reader capable of performing around 6 invocations/second
[1].
Next, we generalize the ideas underlying the attack on
COMP128 attack to develop a methodology for launching a
partitioning attack on any implementation of any algorithm
which violates the cardinal principle. Whereas, the speciﬁcs
and effectiveness of the attack would depend on the partic-
ular algorithm, platform and the manner of violation of the
cardinal principle, nevertheless the proposed methodology
will reduce the amount of entropy in the sensitive informa-
tion at the very least.
The partitioning attack on COMP128 exploits weak-
nesses and vulnerabilities in the implementation of ta-
ble lookups.
In general, protecting table lookup opera-
tions, while conforming to the cardinal principle, appears to
be very tricky, especially in resource constrained devices.
Since table lookup is a basic cryptographic primitive for in-
troducing non–linearity, the same problem also exists, to
a lesser extent, with many other cryptographic algorithms
such as DES and AES. In view of the importance of this
primitive, we feel that it is necessary to have a speciﬁc pro-
tection mechanism for this operation. We, therefore, de-
scribe a new and resource efﬁcient table lookup mechanism
which can be employed in a wide variety of devices to de-
fend against side–channel attacks. This mechanism is based
on a space–time tradeoff: it allows the implementation of
table lookups using substantially less RAM than the cumu-
lative sizes of the tables being protected at the cost of ad-
ditional operations. We believe that with the adoption of
this mechanism, table lookups will cease to be avenues for
side–channel attacks.
The paper is organized as follows: ﬁrst, we provide re-
quired background on side–channel exposures, attacks and
the cardinal principle for countermeasures in Section 2. In
Section 3 the attack on the COMP128 implementation on a
GSM SIM card is described. The methodology for devel-
oping general partitioning attacks is described in Section 4.
Finally, in Section 5, we describe a technique which can
protect against side–channel attacks on table lookup opera-
tions in resource constrained devices.
1Partitioning attacks have been validated on SIM cards deployed on
several international networks. We have contacted the affected vendors
whose identities will not be disclosed here.
2. Background
All equipment
leaks information via several side–
channels in the course of performing any computation. Ex-
amples of side–channels include timing of externally visible
operations, instantaneous power consumption, electromag-
netic (EM) emissions, etc [5, 6, 7, 9].
The timing side–channel is the easiest to describe and
protect. The timing side–channel is exploitable if the tim-
ing of an externally observable operation is affected by sen-
sitive information. Timing channels are easily addressed by
ensuring that sensitive operations take the same amount of
time or the timing depends only on other non–sensitive pa-
rameters. If that is not possible, then another effective coun-
termeasure is to limit the information leaked via the timing
side–channel.
The power and EM side–channels are signiﬁcantly more
powerful and consequently harder to defend against. These
side–channels arise due to current ﬂows within a device.
The exposure is especially pronounced in CMOS devices,
where current ﬂows only when some change occurs in the
logic state at each clock cycle: this linkage provides an un-
obstructed view into the logic state and transitions in the un-
derlying device at each clock cycle via the power and EM
side–channels. At each clock cycle, the signals carried by
these side–channels are therefore statistically correlated to
those bits in the logic state of the device which either de-
termine the events that will occur in the clock cycle or are
affected by events occurring within the cycle. These bits
are known as relevant bits [2]. For example, for a cycle
which loads a word of data from a memory location into a
register, the relevant bits include the (binary) contents of all
bus lines and circuits on which the data will ﬂow, the initial
contents of the register to which the data will be transferred
and the bits of the speciﬁc data in the accessed memory
location. While the number of relevant bits appears to be
large, it should be noted that they constitute a tiny fraction
of the overall state of device. It is also known that each of
the relevant bits contributes to the side–channel signals in
somewhat different ways; the effect of one relevant bit is
not identical to that of another even though the bits may be
similar in function (such as two bus lines). Of these two
side–channels, the EM side–channel is more powerful as it
can provide multiple views of the events unfolding within
the device [9] due to different types of emanations from dif-
ferent parts of the device whereas the power consumption
channel provides only a single aggregated view of the net
current ﬂow into the device.
Power and EM attacks on CMOS devices and counter-
measures against them can be derived from this basic un-
derstanding of information leakage. Simple power analysis
and EM attacks (SPA and SEMA) [6, 7] exploit the fact
that if an implementation follows different execution paths
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
based on the value of sensitive information, this dependence
shows up as large differences in the side–channel signals
since both the relevant bits and their values are quite dif-
ferent for different execution paths. Thus, the side–channel
for a single execution could be used to determine the execu-
tion path taken and hence obtain sensitive information. For
example, in a square and multiply based implementation of
RSA exponentiation, the sequence of squares and multiplies
performed uniquely determines the secret key; moreover,
this sequence is readily visible in the side–channel since the
code for squaring big–integers is quite different from the
code to multiply big–integers. A countermeasure for these
simple attacks is to have all operations take the same execu-
tion path.
Differential (or more precisely the ﬁrst–order differen-
tial) side–channel attacks such as DPA and DEMA [6, 7],
are a class of powerful attacks which work even when the
execution sequence is identical for all inputs and values of
the sensitive information. These attacks are based on the
fact that even though the execution path is always the same,
the values of the relevant bits at intermediate clock cycles
are determined by values of inputs and sensitive informa-
tion, since the device has to compute some function of these
quantities. Since the side–channel signals are statistically
correlated to the values of these relevant bits and hence de-
pend on the sensitive information, it is possible to extract
sensitive information by performing statistical analysis on
these signals. For example, an adversary can do hypothe-
sis testing, by forming a hypothesis on the value of some
part of the sensitive information and predicting the value of
some relevant bit in some cycle based on the hypothesis and
known or chosen inputs/outputs. The hypothesis can then
be veriﬁed by checking whether or not the signals correlate
with the predicted value of the relevant bit [6].
The only way to completely eliminate differential
attacks is to strictly adhere to the following Cardinal
Principle [2]:
Cardinal Principle: Relevant bits of all
intermediate
cycles and their values should be statistically independent
of the inputs, outputs and sensitive information.
Clearly, these intermediate cycles do not include the ini-
tial cycles that manipulate only the input and the ﬁnal clock
cycles that manipulate only the output. Techniques that
achieve this while still being able to perform computations
have been described in [2]. Whereas incomplete, improper
or inadequate implementation of this basic principle may
provide partial resistance to hypothesis testing attacks, it
will result in susceptibilities to the partitioning attack that
is described later in this paper.
An even more powerful class of attacks, known as the
higher–order differential side–channel attacks [6], are based
on multivariate statistical analysis of multiple signals from
multiple sections of the computation. Although, these at-
tacks can be used to overcome countermeasures against
differential side–channel attacks, effective countermeasures
against these attacks are extensions of the countermeasures
against ﬁrst order attacks[2]. We will not focus on these
attacks and countermeasures against them in this paper.
3. Attacks on a GSM SIM card
The main authentication and session key generation
mechanism for many GSM networks, speciﬁed by the ab-
stract algorithms A3 and A8, are often realized in practice
using a single algorithm known as COMP128. While the ac-
tual speciﬁcation of COMP128 was never made public, the
algorithm has been reverse engineered and cryptanalyzed
[1]. Since, the GSM speciﬁcation for SIM cards is widely
available, all that is needed to clone a SIM card is the 128–
bit COMP128 secret key that is embedded in the card.
3.1. COMP128 Algorithm
COMP128 is a keyed hash function. It takes a 16 byte