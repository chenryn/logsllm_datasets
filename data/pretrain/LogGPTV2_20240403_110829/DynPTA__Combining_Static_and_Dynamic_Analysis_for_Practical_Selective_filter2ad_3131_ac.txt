}
CRYPTO_malloc {
...
ret = malloc(…);
return ret;
}
ssl_cert_new {
...
cert = CRYPTO_malloc(…)
...
}
sess
object
cert
object
E&RQWH[Wsensitive +HDS0RGHOLQJ
Fig. 3: Context-insensitive (a) vs. context-sensitive (b) modeling
of OpenSSL’s heap. Without context sensitivity, pointer analysis
assumes that sess and cert point to the same object (a).
Using summarization for CRYPTO_malloc, overapproxima-
tion is reduced by creating two distinct heap objects at its two
call sites, allowing pointer analysis to distinguish that sess
and cert point to different objects (b).
challenges, we have developed a summarization-based context-
sensitive heap modeling approach tailored to the extensive use
of memory-related wrappers in popular applications.
1) Memory Allocation Wrapper Identiﬁcation: The ﬁrst step
in modeling a context-sensitive heap is to identify the memory
allocation wrappers used by a given application. A wrapper
typically allocates heap memory via a standard Libc memory
allocation function, such as malloc, performs some additional
sanitization and checks, and returns the pointer to the allocated
memory. This pointer, however, may not be the same one
returned by the Libc function—that pointer may have been
copied to other pointers, one of which in turn may be returned.
Similarly, in case of pool-based allocators, the memory is
allocated in pools and the wrapper returns a pointer into a chunk
within this pool. To track such potential pointer manipulation,
we perform a lightweight intraprocedural pointer analysis only
on the candidate function under consideration, and identify if
the returned pointer always points to the heap memory allocated
via known memory allocation functions provided by Libc.
Another challenge is that memory allocation wrappers may
be nested. For example,
in OpenSSL, CRYPTO_malloc
internally invokes Libc’s malloc, but there are other wrappers
around CRYPTO_malloc, such as CRYPTO_remalloc and
CRYPTO_realloc, which also need to be identiﬁed. There-
fore, we begin our analysis with the known Libc memory
allocation wrappers from the previous step, but also repeat
the process of identifying memory wrappers iteratively, a
conﬁgurable number of times (currently set to ﬁve), with each
iteration including the wrappers found in the previous iterations
as known memory allocation wrappers.
2) Memory Allocation Wrapper Summarization: The typical
way of modeling a context-sensitive memory model for pointer
analysis is to reanalyze each function at each call site. In our
case, to ensure context-sensitive heap modeling, we would
have to reanalyze each memory allocation wrapper at each of
their call sites. This comes at a cost of increased analysis time,
especially when dealing with nested wrappers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1923
An alternative, faster approach is to use summarization [44,
45]. Summarization-based approaches analyze each function
exactly once to derive the points-to relationships between the
arguments and the return values of the function. The result
of this analysis is called the summary of the function. When
performing pointer analysis on the entire program, at each call
site of a given function, its pregenerated summary is readily
used, instead of analyzing the function again.
We employ summarization by ﬁrst analyzing each memory
allocation wrapper intraprocedurally, and deriving the points-to
relationships between its arguments and return values. We store
these results in a summary that includes the information that
the memory allocation wrapper should allocate a new object on
the heap and return a reference to it. As shown in the example
of Figure 3(b), our analysis summarizes CRYPTO_malloc,
and then at each of its call sites, instead of analyzing the
wrapper again, its pregenerated summary is used. When the
pointer analysis algorithm analyzes these call sites, it creates
two different heap objects for the two invocations, and stores
separate references to them in the sess and cert pointers.
C. Pointer and Value Flow Analysis
Once we have modeled the heap allocations in a context-
sensitive manner, we analyze all pointers and memory objects
in the program using Steensgaard’s uniﬁcation-based pointer
analysis algorithm [37]. Every instruction in the program is
ﬁrst analyzed and constraints corresponding to that instruction
are collected. Once all constraints are collected, they are solved
according to the Steensgaard’s algorithm’s constraint resolution
rules speciﬁed in Appendix B, providing us the ﬁnal points-to
sets for each pointer in the program.
Resolving all pointer references is not enough to achieve
complete data protection, as sensitive data may propagate to
other variables and objects, which we call sensitive sink sites. To
prevent potential information leakage through these variables,
DynPTA performs static value ﬂow analysis to identify all
sensitive sink sites.
Sensitive values might ﬂow through both direct and indirect
(via pointers) memory instructions, and thus DynPTA tracks
both direct and indirect value ﬂows. Value ﬂows are represented
as directed dependency chains originating at a memory load
operation and terminating at a memory store operation. A
sensitive value ﬂow originates at a load operation from
a sensitive memory location, and results in marking the
destination memory operand of the ﬁnal memory store as
sensitive. All such directed dependency chains are linked
recursively, until no new chain is found.
To track indirect value ﬂows, we use the results of Steens-
gaard’s analysis, and consequently, the value ﬂow analysis
provides a superset of all value ﬂows that may result in the ﬂow
of sensitive values. Because the sources of these indirect value
ﬂows may include memory loads via pointers, and similarly the
destinations of these value ﬂows may include memory stores
via pointers, this superset has imprecision associated with both
the sources and the destinations of the value ﬂows. These
source and destination pointers may point to both sensitive
and non-sensitive memory objects. Consequently, if all objects
discovered through DynPTA’s static analysis were marked as
sensitive, we would be unnecessarily protecting a severely
overapproximated set of objects.
The actual sources and targets of the identiﬁed (potentially
sensitive) indirect memory accesses are available at runtime—at
which point it can be determined if they are indeed sensitive or
not. Below, we describe how DynPTA uses runtime information
in the form of labels maintained by scoped dynamic data ﬂow
tracking to mitigate the overapproximation of the static analysis.
D. Scoped Dynamic Data Flow Tracking
The result of Steensgaard’s algorithm is the superset of all
possible memory accesses that may read from or write to sensi-
tive memory locations. Due to the inherent overapproximation
of points-to analysis, this set may include indirect memory
operations that actually do not access any sensitive object, as
well as indirect memory operations through partially sensitive
pointers, which access sensitive data only during some of their
invocations. Similarly, value ﬂow analysis captures all value
ﬂows that may involve sensitive data. At runtime, however,
only a subset of them will actually involve sensitive data.
To deal with these two cases of overapproximation, we
use scoped byte-level dynamic data ﬂow tracking, which
relies on a shadow memory to associate labels to the tracked
memory locations. Labels are initialized for every object
that is marked as sensitive. Then, dynamic DFT is applied
only within the scope of the identiﬁed potentially sensitive
value ﬂows, and thus only a fraction of the whole program’s
code has to be instrumented with DFT propagation logic.
The (propagated) sensitivity labels are then used to perform
lightweight lookups when dereferencing partially sensitive
pointers, to decide whether the accessed object must undergo
cryptographic transformations.
1) Dynamic DFT on Potentially Sensitive Value Flows:
Every load–store dependency chain identiﬁed as potentially
sensitive by the value ﬂow analysis (Section IV-C) consists of
at least two instructions—a memory load and a memory store.
If a dependency chain involves an indirect memory access (via
a pointer), then DynPTA instruments all instructions in the
chain with DFT logic to propagate label information. As we
show in Section VI-B, only a fraction of all value ﬂows (1–9%)
end up being instrumented with DFT propagation logic. At the
terminating memory store operation, DynPTA determines at
runtime whether the value being stored is sensitive (that is, if
it was loaded from a sensitive memory location) or not.
If the initial load instruction reads from a sensitive memory
location, DynPTA performs two actions: i) it applies the
sensitive label to the destination operand of the store instruction,
and ii) it encrypts the value being stored so that the in-memory
representation of the value is protected against data-leakage
attacks. Similarly, if the memory store operation performs an
indirect memory access and writes to a memory location via
a pointer, the sensitive label is applied only to the memory
object that the pointer points to at runtime. Because we include
all targets of sensitive value ﬂows identiﬁed statically when
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1924
priv_key_mod_bn
priv_key_e_bn
to
from
pub_key_mod_bn
pub_key_e_bn
BIGNUM* BN_copy (BIGNUM* to, BIGNUM* from) {
...
to[0] = from[0];
to[1] = from[1];
...
3RWHQWLDOO\VHQVLWLYHYDOXHIORZ
$FWXDOO\VHQVLWLYHYDOXHIORZ
}
Fig. 4: Example of potentially sensitive (dashed arrows) and
actually sensitive (solid arrows) value ﬂows. Sensitivity labels
are maintained using dynamic DFT to distinguish between the
two. DynPTA uses these labels to decide whether the object
written through the to pointer must ﬁrst be encrypted or not.
void fun (void) {
char *pkey;
pkey = malloc(8);
mark_sensitive(pkey);
...
char *ptr = pkey;
*ptr = ‘A’;
...
ptr = malloc(8);
*ptr = ‘B’;
...
3URFHVV0HPRU\
6KDGRZ0HPRU\
pkey
encr(‘A’)
SENSITIVE
ptr
‘B’
} 
Fig. 5: In this example, ptr is a partially sensitive pointer that
can point to both sensitive and non-sensitive data. By keeping
sensitivity labels in a shadow memory, DynPTA can selectively
apply the required cryptographic transformations only when
the pointer dereference involves sensitive data.
deciding to apply the predicated transformation described in
Section IV-D2, once the sensitive label is applied to a memory
location, all memory instructions operating on that memory
location are automatically instrumented with AES operations.
Because our system relies on runtime DFT label information,
if the same load–store chain (which includes indirect memory
accesses) is invoked multiple times with sensitive and non-
sensitive values, the sensitive labels will be propagated only
to the intended targets of the sensitive value ﬂows. Figure 4
illustrates this case using a simpliﬁed code snippet from the
OpenSSL library. The function BN_copy is invoked for the
processing of both the private and the public SSL key. The
from and to pointer arguments can point to parameters of
both the public and the private key, but only the latter needs
to be protected. Based on the label of a given object, DynPTA
decides whether the object must be encrypted or not before
writing it in memory through the to pointer.
Sensitive labels are retained for the lifetime of the object.
Sensitive heap objects have their labels cleared when the object
is freed via the free Libc function. Similarly, sensitive labels
associated with local variables (allocated on the stack) are
cleared when the function returns.
2) Runtime Handling of Potentially Sensitive Pointers:
To overcome the overapproximation of points-to analysis and
avoid costly cryptographic operations for non-sensitive data,
we instrument the dereferences of partially sensitive pointers
to perform a shadow memory lookup, and decide at runtime
whether to apply the cryptographic transformation or not, as
shown in Figure 5. Absence of a label indicates that the
accessed memory location is not sensitive, in which case the
expensive cryptographic operations are elided, and the original
memory load or store operation is performed directly. In case
of loops operating incrementally over potentially sensitive
pointers, we further optimize their label lookups as discussed
in Appendix D.
We should stress that Steensgaard’s analysis identiﬁes only
a fraction of all memory accesses as potentially sensitive, and
only these are instrumented with label lookups. At runtime,
only the fraction of potentially sensitive memory operations
that truly access sensitive objects undergo the expensive AES
transformations. Indicatively, our evaluation shows that about
15% of all memory operations in the tested programs are
instrumented with label lookups, and at runtime, only 1–5%
of all memory accesses undergo AES transformation.
E. In-memory Data Protection using Encryption
Sensitive data remains encrypted in memory as long as
it ﬂows within DynPTA’s protection domain. This domain
depends on the code that takes part in DynPTA’s whole-program
analysis, on which points-to analysis is performed. If sensitive
data has to ﬂow to an external library that is not part of the
protection domain, then for compatibility reasons DynPTA ﬁrst
decrypts the data. At that point, the plaintext form of sensitive
data will exist in memory, and could be leaked due to some
vulnerability. This is the main reason we require whole program
analysis (including external libraries), to ensure that DynPTA’s
protection domain spans the whole (to the extent possible)
code base of the application. Based on our experiments with
various applications and use cases (Section VI), we did not
encounter and could not identify any other situation in which
sensitive data should escape the protection domain.
Similarly to our previous work [33], we use AES-128 in
Electronic Code Book (ECB) mode to ensure the conﬁdentiality
of sensitive data in memory. Modern processors offer hardware-
accelerated AES operations, such as the AES-NI extensions of
Intel processors, on which we rely to improve performance.
AES-128 has 10 rounds of operations for both encryption
and decryption. Each of these rounds has its own “round keys”
that are generated from the initial secret key. To avoid the
overhead of generating the round keys from scratch before
each AES operation, DynPTA pregenerates them from the
initial secret key and stores them in registers. Modern Intel
and AMD processors support SSE [46] and provide 16 128-bit
registers (XXM0–XMM15). We use these registers to store
the expanded round keys for all ten encryption round keys.
Decryption round keys are the inverse of the encryption round
keys, and Intel provides the aesimc instruction to efﬁciently
compute them. Applications that rely on XMM registers for
computation are not directly compatible with DynPTA. This
is not a major issue, however, because most such applications
have the option of being compiled without SSE support for
backwards compatibility reasons.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1925
V. IMPLEMENTATION
C. Static Value Flow Analysis
We implemented DynPTA on top of LLVM 7.0 [47]. As
DynPTA needs to perform whole-program analysis on the
application and its dependent libraries, we use link time
optimization (LTO) with the Gold linker [48]. We include
all imported libraries in our analysis except Glibc, for which
instead we provide our own implementation of commonly used
functions (e.g., memcpy, memcmp, strcpy). Our observation
is that sensitive data is not passed to other Libc functions, but
additional ones can be supported as needed. We modiﬁed
the build scripts of the applications and libraries to use the
LLVM tools (clang, llvm-ar, and llvm-ranlib), which
operate on LLVM’s intermediate representation (IR), instead
of their counterparts from the GCC toolchain.
A. Context-sensitive Heap Modeling
The ﬁrst step for modeling a context-sensitive heap is
to identify all memory allocation wrappers (as discussed in
Section IV-B), for which we have implemented an LLVM
pass. For functions that return pointers, we use the intrapro-
cedural Andersen’s points-to analysis provided by LLVM
(CFLAAAnders),
to determine if the function returns a
pointer to memory allocated from within the function. Being