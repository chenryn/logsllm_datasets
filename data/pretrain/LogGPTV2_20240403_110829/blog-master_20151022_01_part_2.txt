```  
# "local" is for Unix domain socket connections only  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            md5  
# IPv6 local connections:  
#host    all             all             ::1/128                 md5  
postgresql.conf  
#superuser_reserved_connections = 3     # (change requires restart)  
unix_socket_directories = '.'   # comma-separated list of directories  
                                        # (change requires restart)  
#unix_socket_group = ''                 # (change requires restart)  
unix_socket_permissions = 0700         # begin with 0 to use octal notation  
```  
只是现在报错变成了这样，密码错误：  
```  
2015-10-22 19:30:48.172 CST,,,3910,"",5628c8e8.f46,1,"",2015-10-22 19:30:48 CST,,0,LOG,00000,"connection received: host=127.0.0.1 port=52907",,,,,,,,"BackendInitialize, postmaster.c:4013",""  
2015-10-22 19:30:48.172 CST,"postgres","postgres",3910,"127.0.0.1:52907",5628c8e8.f46,2,"authentication",2015-10-22 19:30:48 CST,2/195843,0,FATAL,28P01,"password authentication failed for user ""postgres""","Connection matched pg_hba.conf line 86: ""host    all             all             127.0.0.1/32            md5""",,,,,,,"auth_failed, auth.c:285",""  
```  
还有一个需要注意的影响，就是IO，因为建立连接时会触发调用 write_relcache_init_file@src/backend/utils/cache/relcache.c  
```  
        /*  
         * We must write a temporary file and rename it into place. Otherwise,  
         * another backend starting at about the same time might crash trying to  
         * read the partially-complete file.  
         */  
        if (shared)  
        {  
                snprintf(tempfilename, sizeof(tempfilename), "global/%s.%d",  
                                 RELCACHE_INIT_FILENAME, MyProcPid);  
                snprintf(finalfilename, sizeof(finalfilename), "global/%s",  
                                 RELCACHE_INIT_FILENAME);  
        }  
        else  
        {  
                snprintf(tempfilename, sizeof(tempfilename), "%s/%s.%d",  
                                 DatabasePath, RELCACHE_INIT_FILENAME, MyProcPid);  
                snprintf(finalfilename, sizeof(finalfilename), "%s/%s",  
                                 DatabasePath, RELCACHE_INIT_FILENAME);  
        }  
        /*  
         * Write a magic number to serve as a file version identifier.  We can  
         * change the magic number whenever the relcache layout changes.  
         */  
        magic = RELCACHE_INIT_FILEMAGIC;  
        if (fwrite(&magic, 1, sizeof(magic), fp) != sizeof(magic))  
                elog(FATAL, "could not write init file");  
        /*  
         * Write all the appropriate reldescs (in no particular order).  
         */  
        hash_seq_init(&status, RelationIdCache);  
        while ((idhentry = (RelIdCacheEnt *) hash_seq_search(&status)) != NULL)  
        {  
                Relation        rel = idhentry->reldesc;  
                Form_pg_class relform = rel->rd_rel;  
                /* ignore if not correct group */  
                if (relform->relisshared != shared)  
                        continue;  
                /*  
                 * Ignore if not supposed to be in init file.  We can allow any shared  
                 * relation that's been loaded so far to be in the shared init file,  
                 * but unshared relations must be used for catalog caches.  (Note: if  
                 * you want to change the criterion for rels to be kept in the init  
                 * file, see also inval.c.)  
                 */  
                if (!shared && !RelationSupportsSysCache(RelationGetRelid(rel)))  
                        continue;  
                /* first write the relcache entry proper */  
                write_item(rel, sizeof(RelationData), fp);  
......  
        /*  
         * If we have received any SI relcache invals since backend start, assume  
         * we may have written out-of-date data.  
         */  
        if (relcacheInvalsReceived == 0L)  
        {  
                /*  
                 * OK, rename the temp file to its final name, deleting any  
                 * previously-existing init file.  
                 *  
                 * Note: a failure here is possible under Cygwin, if some other  
                 * backend is holding open an unlinked-but-not-yet-gone init file. So  
                 * treat this as a noncritical failure; just remove the useless temp  
                 * file on failure.  
                 */  
                if (rename(tempfilename, finalfilename) < 0)  
                        unlink(tempfilename);  
        }  
        else  
        {  
                /* Delete the already-obsolete temp file */  
                unlink(tempfilename);  
        }  
        LWLockRelease(RelCacheInitLock);  
}  
```  
另一种风险，如果用户密码泄露了，用户可能可以利用dblink建立到远端的连接，因为数据库所在的机器的IP地址段可能是内网IP地址段。  
这种风险需要通过隔离数据库实例的IP地址段，配置pg_hba.conf来杜绝。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")