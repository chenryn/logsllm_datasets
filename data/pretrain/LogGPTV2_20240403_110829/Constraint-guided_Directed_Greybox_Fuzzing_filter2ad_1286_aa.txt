title:Constraint-guided Directed Greybox Fuzzing
author:Gwangmu Lee and
Woochul Shim and
Byoungyoung Lee
Constraint-guided Directed Greybox Fuzzing
Gwangmu Lee, Seoul National University; Woochul Shim, 
Samsung Research; Byoungyoung Lee, Seoul National University
https://www.usenix.org/conference/usenixsecurity21/presentation/lee-gwangmu
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Constraint-guided Directed Greybox Fuzzing
Gwangmu Lee
Seoul National University
PI:EMAIL
Woochul Shim
Samsung Research
PI:EMAIL
Byoungyoung Lee∗
Seoul National University
PI:EMAIL
Abstract
Directed greybox fuzzing is an augmented fuzzing tech-
nique intended for the targeted usages such as crash reproduc-
tion and proof-of-concept generation, which gives directed-
ness to fuzzing by driving the seeds toward the designated
program locations called target sites. However, we find that
directed greybox fuzzing can still suffer from the long fuzzing
time before exposing the targeted crash, because it does not
consider the ordered target sites and the data conditions. This
paper presents constraint-guided directed greybox fuzzing
that aims to satisfy a sequence of constraints rather than
merely reaching a set of target sites. Constraint-guided grey-
box fuzzing defines a constraint as the combination of a target
site and the data conditions, and drives the seeds to satisfy the
constraints in the specified order. We automatically generate
the constraints with seven types of crash dumps and four types
of patch changelogs, and evaluate the prototype system CAFL
against the representative directed greybox fuzzing system
AFLGo with 47 real-world crashes and 12 patch changelogs.
The evaluation shows CAFL outperforms AFLGo by 2.88x
for crash reproduction, and better performs in PoC generation
as the constraints get explicit.
1 Introduction
Fuzz testing [32] is one of the most effective techniques in
discovering the vulnerabilities in software programs. Fuzzing
keeps running a target program with a randomly generated
input in hopes that the program exhibits an erroneous runtime
behavior (such as memory corruptions or triggering asser-
tions). Most fuzzing techniques leverage the coverage-guided
fuzzing technique [12, 46], where its input mutation is fo-
cused on extending the code coverage, because it allows to
efficiently explore the deeper level of code to be tested.
In particular, directed greybox fuzzing (DGF) [21, 22, 44]
focuses on driving the testing toward a set of specific program
locations, called target sites, which allows to intensively fuzz
∗Corresponding author
such locations. Compared to the coverage-guided fuzzing,
DGF is particularly useful if information on such locations
are available. For instance, when developers get a crash report
from third-party users, developers may need to reproduce
the reported crash to pinpoint the root cause of the crash.
Another example includes when attackers need to generate
1-day proof-of-concept (PoC) inputs for the outdated systems
with the released patch, where changed locations suggest the
potential cause of the fixed crash.
However, we find that DGF techniques take a very long
time to identify the targeted crash largely due to the following
two limitations. First, DGF assumes that the target sites are
independent to each other, implying that it does not consider
order dependency between multiple target sites (i.e., a certain
target site should be executed before another target site). The
most common examples of such cases would be the use-after-
free cases, where the crash occurs only when the program
reaches the free location before reaching the use location that
references the freed memory object. Since DGF generally
favors the shorter execution paths, the lack of order-dependent
target sites can easily lead DGF to bypass them.
Second, DGF does not consider the data conditions re-
quired for the targeted crash and overlook the seeds that sat-
isfy such data conditions. The most intuitive examples include
the buffer overflow crashes, where the seeds accessing the
memory close to the boundary would have a higher chance to
cause the crash than the seeds accessing further away from it.
Another example is the PoC generation based on the patch,
where the changed data condition may be involved in the
cause of the fixed crash. Again, since DGF is not aware of the
data conditions, it is likely to falsely prioritize the seeds with
the control-flow based distance, which may adversely affect
seed scheduling.
In this paper, we propose constraint-guided directed grey-
box fuzzing (CDGF) that resolves the limitations of DGF.
Rather than reaching a set of target sites, CDGF aims to sat-
isfy a sequence of constraints and prioritizes the seeds that
better satisfy those in order. A constraint consists of a single
target site and optionally a number of data conditions, which
USENIX Association
30th USENIX Security Symposium    3559
is regarded as being satisfied when the program reaches the
target site and satisfies the data condition at the target site.
Constraints can be specified more than one, and in such cases,
the constraints must be satisfied in the specified order.
To measure how well a given seed satisfies the constraints,
CDGF defines the seed distance based on the distance of the
constraints, as opposed to the conventional DGF that defines
the seed distance as the average distance to the target sites.
The distance of the constraints indicates how well a given seed
satisfies the constraints (i.e., the shorter the better). CDGF
prioritizes the seeds with the shorter distances so that the
mutated seeds can try the next unsatisfied constraints on the
basis of the already satisfied constraints, quickly yielding the
desired seed that exhibits the targeted crash.
In addition, we present the algorithmic methods to auto-
matically generate the constraints from the additional infor-
mation sources, namely crash dumps from memory error de-
tectors [33, 39, 41] and changelogs from patches. With the
use-after-free crash dumps, we generate the constraints to
drive the seeds to the free location first before the crash lo-
cation, so that the program first frees the vulnerable memory
object before accessing it at the crash location. With the buffer
overflow crash dumps, we generate the constraints to drive
the seeds to the boundary of the vulnerable buffer to increase
the chance of accessing the buffer out of bound. With the
patch changelogs, we generate the constraints to transform
the seeds into the buggy conditions indicated by the patch
changelogs. Overall, our auto-generated constraints support
seven kinds of crashes and four types of changelogs in total.
To demonstrate the effectiveness of CDGF in exposing the
targeted crash, we implemented CAFL based on AFL 2.52b
[46] and compared CAFL with the representative DGF system
AFLGo [21] using 47 crash dumps and 12 patch changelogs
in various real-world programs. The evaluation shows that
CAFL outperforms AFLGO by 2.88x in reproducing 47 real-
world crashes, and better performs in PoC generation as the
constraints are more explicit.
The main contributions of this paper can be summarized as
follows:
• We present the constraint-guided directed greybox
fuzzing (CDGF), which augments the conventional DGF
with the ordered target sites and the data conditions.
• We automatically generate the constraints with the given
additional information sources, namely crash dumps and
patch changelogs, that support seven crash types and
four changelog types in total.
• We implement CAFL, the prototype fuzzing system with
CDGF, and demonstrate the superior performance in ex-
posing the targeted crash compared to the representative
DGF system AFLGo under various real-world crashes.
The rest of the paper is organized as follows. In §2, we
provide a brief background about the conventional DGF and
Figure 1: Example control-flow graph with DGF distances specified
on each basic block.
its limitations by CVE examples. In §3, we present the basic
idea of CDGF and demonstrate how CDGF resolves the limi-
tations manifested by the examples. In §4, we formally define
the constraint itself and the distance metric of a sequence
of constraints. In §5, we provide an algorithmic method to
automatically generate the constraints from the additional
information sources. In §6, we describe the internal organi-
zation of CAFL, the prototype fuzzing system equipped with
CDGF. In §7, we compare the performance of CAFL against
the representative DGF system, AFLGo [21]. In §8, we dis-
cuss the various aspects of CDGF and propose the direction
of future improvements. We introduce the research work rel-
evant to this paper and DGF systems in §9, and finally we
conclude the paper in §10.
2 Background and Motivation
In this section, we briefly introduce the fundamentals of DGF
and its usage examples in §2.1 and §2.2, and point out the
limitations and the consequential effects by examples in §2.3.
Finally, we summarize the requirements of an augmented
DGF to resolve the limitations in §2.4.
2.1 Directed Greybox Fuzzing
The directed greybox fuzzing (DGF) [21, 22, 44] intends to
intensively fuzz a set of program locations, called target sites.
The target sites are the preferred program locations where
the seeds are driven to reach, usually set to the crash and its
relevant locations. For example in Figure 1 that illustrates a
simple control-flow graph with a use-after-free bug, the target
sites may be set to the free location d and the use location f.
The major premise of DGF is that, when mutated, a seed
close to the target sites is more probable to reach the target
sites than the farther one. To decide the closeness of a seed,
DGF first defines the distance of each basic block as the har-
monic mean of the shortest path length to each target site. For
example in Figure 1, the distance of a is the harmonic mean
3)−1 = 3
of the shortest path length to each of d and f, or ( 1
+ 1
2.
3
Then, DGF calculates the distance of a given seed as the aver-
age distance of every executed basic block. For example, if the
executed basic blocks are [a, b, e, f], its distance is calculated
3560    30th USENIX Security Symposium
USENIX Association
Figure 2: Simplified control-flow graph of yasm 1.3.0 (left) and the distance of example seeds in DGF and CDGF (right). To reproduce the
use-after-free vulnerability, a seed must reach the red target site (T1) and the blue target site (T2) in order. CDGF distances in red and blue
represent the distance portion of the target site T1 and T2, respectively.
+ 1 + 1 + 0)/4 = 0.875.
as ( 3
2
Generally, the seed distance gets shorter when a seed cov-
ers more target sites, but it adversely increases if it takes a
longer execution path without reaching additional target sites.
For example, if a seed reaches both target sites by execut-
ing [a, b, c, d, a, b, e, f], its distance is ( 3
+ 1 +
2
1 + 0)/8 = 0.85, which is shorter than 0.875. On the other
hands, if a seed merely takes a longer path by executing
+ 1 + 4
[a, b, c, a, b, e, f], its distance is ( 3
+ 1 + 1 + 0)/7 =
5
2
0.971, which is much longer than 0.875.
+ 3
2
+ 1 + 4
5
+ 0 + 3
2
2.2 Usage Example
DGF can be utilized in any use cases where the target sites
can be precisely defined. Below are the prime usages where
various users can leverage DGF.
2.2.1 Static Analyzer Verification
Developers of the moderate-sized projects commonly em-
ploy static analyzers, which discover the potential bug in the
source code at compile time. The static analyzers provide
a detailed diagnostic about the potential bug, including the
crash location and the assumed data conditions for the crash.
However, developers often do not have high confidence
in such diagnostics, as static analyzers are known to suffer
from a high false alarm rate [27, 35]. Such diagnostics are
often ignored until they are verified by the actual crash reports.
Rather, developers can leverage DGF to proactively verify the
diagnostics by setting the target sites to the analyzed crash
locations.
2.2.2 Crash Reproduction
Developers also accept the crash reports from the users or
other developers. Crash reports are often accompanied by a
proof-of-concept (PoC) input and a crash dump from memory
error detectors (e.g., AddressSanitizer [39] and MemorySani-
tizer [41]) that describes which type of crash occurs at which
program location and which program locations are involved
in. For example, a use-after-free crash dump specifies the
location where the memory is freed.
When fixing the reported crash with only one PoC input,
developers may have trouble in comprehending the crash as
the PoC input represents only one concrete execution path.
Furthermore, even after developers patch the source code to
invalidate a given PoC input, they may not certain that the
root cause has been fixed. In this situation, developers can
utilize DGF to reproduce the crash by setting the target sites
to the crash and its relevant locations.
2.2.3 PoC Generation
The prime targets of attackers are the outdated systems with
the unpatched vulnerabilities, whose patches are already re-
leased in public. Since the patched source locations and the
data conditions are supposed to fix the vulnerability, attackers
can analyze the patch changelog and adversely utilize DGF to
generate PoC inputs for the unpatched system, by setting the
patched program locations in the pre-patched source code.
2.3 Limitation
However in practice, DGF can easily suffer from the long
fuzzing time to expose the targeted crash due to the two major
limitations: independent target sites and no data condition.
2.3.1
Independent Target Sites
DGF regards all target sites as independent and has no concept
of reaching a preconditional site before a crash site. This lets
DGF bypass such a precondition, precluding the chance of
crash reproduction.
For example, Figure 2 describes a simplified control-flow
graph of yasm 1.3.0 that suffers from a use-after-free vul-
nerability. To reproduce the vulnerability, a seed must have
TYPE_INT to free the memory object at the target site T1, and
have ident enabled to use the freed object at the target site
T2. The seeds in Figure 2 are deemed as more desirable in the
order of C, B and A, as the latter seeds better follow the steps
required to reproduce use-after-free.
However, since DGF regards T1 and T2 independent, it
calculates the seed distances based on the average distance to
both target sites. This distance metric discourages the longer
USENIX Association
30th USENIX Security Symposium    3561
Figure 3: Simplified control-flow graph of CVE-2017-7578 (left) and the distance of example seeds in DGF and CDGF (right). To reproduce
the buffer overflow vulnerability, a seed must access buf out of bound at the blue target site (T2) at the final iteration, i=L-1. Values in red and
blue are captured at the target site T1 and T2, respectively.
execution paths, which results in even longer distances in
Seed B and C (0.971) than Seed A (0.875). As a result, DGF
focuses on the least desirable seed, Seed A.
2.3.2 No Data Condition
DGF has no mechanism to drive the seeds to a desired data
condition. For example, typical buffer overflow bugs are likely
to occur when a seed is around the boundary of the vulnerable
buffer, but DGF cannot drive a seed to such a boundary.
Figure 3 shows a simplified control-flow graph of the CVE-
2017-7578 heap buffer overflow vulnerability. To reproduce
the vulnerability, a seed must allocate buf at T1, and have
GRAD to access it out of bound at T2, which only happens when
the seed reaches T2 at the last iteration, i = L-1. Each of
example seeds in Figure 3 have different Ls (L = {4,8,8})
and access T2 at the different iterations (i = {0,5,6}). The
seeds are more desirable in the order of Seed C, B and A,
since GRAD in the seed allows the program to access out of
bound more closely.
However, since DGF does not recognize the data condition
of the seeds, it falsely prioritizes the seeds based on their dis-
tances to the target sites. For example, DGF would prioritize
Seed A the most, as it has a shortest execution path while
iterating only 4 times, while others iterate 8 times.
2.4 Requirements
With the limitations in §2.3, we set two major requirements
to enable the fast exposure of the targeted crash as follows.
Ordered target sites. Since most of the vulnerabilities have
a separate program location that represents the precondition
of the crash, DGF must be able to drive the seeds to such a
location before the crash location.
Data conditions. Since most of the vulnerabilities are ac-
companied by the desired data conditions, DGF must be able
to drive the seeds to such data conditions.
3 Constraint-guided DGF
In this section, we present constraint-guided directed grey-
box fuzzing, an augmented directed greybox fuzzing guided
with a sequence of constraints. We describe a brief overview
of constraint-guided directed greybox fuzzing in §3.1, and
explain how constraint-guided directed greybox fuzzing can
successfully prioritize the desirable seeds in §3.2.
3.1 Overview
Constraint-guided directed greybox fuzzing (CDGF) aims
to satisfy a sequence of constraints in order, as opposed
to the conventional DGF that merely aims to reach a set of
independent target sites. Each constraint has its own target
site that is required to be reached, and data conditions that
need to be satisfied at its target site.
To achieve this goal, CDFG fuzzes in favor of the seeds that
are more likely to satisfy all the constraints. In other words, it
gives a shorter seed distance for following two cases: 1) if it
satisfies more number of constraints and 2) if it is closer to
satisfy the first unsatisfied constraint than another.
To determine how close a seed is to satisfy a sequence
of given constraints, CDGF first defines the distance of an
individual constraint as the sum of the distance to the target
site and the data conditions. This yields a shorter distance
when it more closely approaches its target site, and it better
satisfies the data conditions. Specifically, CDGF combines
the DGF-style distance for target sites [21, 22, 44] with the
Angora-style distance for data conditions [23]. CDGF then
defines the distance of a constraint sequence, or the total dis-
tance, by combining the distances of each constraint. CDGF
regards the distance of an individual constraint maxed out if
the preceding constraints are not satisfied, yielding a longer
total distance when more constraints are left unsatisfied.
3.2 Example
3.2.1 Ordered Target Sites
Figure 4 shows the constraints for yasm 1.3.0 use-after-free
in Figure 2, which can be automatically generated from the
3562    30th USENIX Security Symposium
USENIX Association
CONSTRAINT %free:
site T1
cond "none"
CONSTRAINT %use:
site T2
cond "none"
CONSTRAINT %alloc:
site T1:malloc()
cond "none"
CONSTRAINT %access:
# .ret = malloc (), .size = L*10
site T2:buf[]
cond " %alloc .size <= %access .addr - %alloc .ret"
# .addr = &buf[i *10+10]
Figure 4: Constraints to reproduce yasm 1.3.0 use-after-free.
Figure 5: Constraints to reproduce CVE-2017-7578.
crash dump. The constraints instruct the program to first reach
T1 where the memory object is freed, then to reach T2 where
the freed memory object is used. Given the seeds in Figure 2
and the constraints in Figure 4, CDGF calculates the distance
of the seeds as follows.
• Seed A. Since it approaches T1 the closest at the block
b, which is two blocks away from T1, the distance of
the first constraint %free is 2. Meanwhile, since it fails
to reach T1, the target site of the first constraint %free,
the distance of the second constraint %use is maxed out
regardless of whether it reaches T2. By combining two
distances, the seed distance is calculated as 2 + max.
• Seed B. Since it approaches T1 closer by touching the
block c, which is one block away from T1, the distance of
T1 is 1. Meanwhile, the distance of %use is still maxed