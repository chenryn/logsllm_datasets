## PostgreSQL 时序数据库插件 timescaleDB 部署实践(含例子 纽约TAXI数据透视分析) - PostGIS + timescaleDB => PG时空数据库  
### 作者                  
digoal                  
### 日期                  
2018-01-29                  
### 标签                  
PostgreSQL , 时空数据库 , 时序数据库 , 空间数据库 , timescaleDB , PostGIS             
----                  
## 背景    
现实社会中，很多业务产生的数据具有时序数据属性（在时间维度上顺序写入，同时包括大量时间区间查询统计的需求）。  
例如业务的FEED数据，物联网产生的时序数据（如气象传感器、车辆轨迹、等），金融行业的实时数据等等。  
PostgreSQL的UDF和BRIN（块级索引）很适合时序数据的处理。具体有以下的两个例子  
[《PostgreSQL 按需切片的实现(TimescaleDB插件自动切片功能的plpgsql schemaless实现)》](../201711/20171102_02.md)    
[《PostgreSQL 时序最佳实践 - 证券交易系统数据库设计 - 阿里云RDS PostgreSQL最佳实践》](../201704/20170417_01.md)    
![pic](20180129_01_pic_002.jpg)  
实际上PostgreSQL生态中，衍生了一个时序插件：timescaleDB。专门用于处理时序数据。（timescale的改进，包括SQL优化器的改进(支持merge append，时间片聚合非常高效)，rotate接口，自动分片等）  
同时timescaleDB也非常受投资者的关注，已获5000万美金的投资，也间接说明时序数据库在未来是非常受用户欢迎的。  
## timescaleDB的优势  
首先，timescaleDB是自动切片的，对用户无感知，在数据量非常庞大的时候，写入性能不衰减。（主要指IOPS较低的磁盘，如果IOPS较好的磁盘PG在写入大量数据后性能也是OK的。）  
![pic](20180129_01_pic_001.jpg)  
其次，timescale改进了SQL优化器，增加了merge append的执行节点，同时在对小时间片进行group by时，可以不用HASH或GROUP整个数据范围，而是分片计算，使得效率非常高。  
最后，timescale增加了一些API，使得用户在时序数据的写入、维护、查询都非常的高效、同时易于维护。  
API如下  
http://docs.timescale.com/v0.8/api  
## 部署timescaleDB  
以CentOS 7.x x64为例。  
1、首先要安装好PostgreSQL  
参考 [《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)    
```  
LIBS=-lpthread CFLAGS="-O3" ./configure --prefix=/home/digoal/pgsql10 --with-segsize=8 --with-wal-segsize=256  
LIBS=-lpthread CFLAGS="-O3" make world -j 64  
LIBS=-lpthread CFLAGS="-O3" make install-world  
```  
2、其次需要安装cmake3  
```  
epel  
yum install -y cmake3  
ln -s /usr/bin/cmake3 /usr/bin/cmake  
```  
3、编译timescaleDB  
```  
git clone https://github.com/timescale/timescaledb/  
cd timescaledb  
git checkout release-0.8.0  
或  
wget https://github.com/timescale/timescaledb/archive/0.8.0.tar.gz  
export PATH=/home/digoal/pgsql10/bin:$PATH  
export LD_LIBRARY_PATH=/home/digoal/pgsql10/lib:$LD_LIBRARY_PATH  
# Bootstrap the build system  
./bootstrap  
cd ./build && make  
make install  
[  2%] Built target sqlupdatefile  
[  4%] Built target sqlfile  
[100%] Built target timescaledb  
Install the project...  
-- Install configuration: "Release"  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb.control  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.8.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.7.1--0.8.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.1.0--0.2.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.2.0--0.3.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.3.0--0.4.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.4.0--0.4.1.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.4.1--0.4.2.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.4.2--0.5.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.5.0--0.6.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.6.0--0.6.1.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.6.1--0.7.0.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.6.1--0.7.1.sql  
-- Installing: /home/dege.zzz/pgsql10/share/extension/timescaledb--0.7.0--0.7.1.sql  
-- Installing: /home/dege.zzz/pgsql10/lib/timescaledb.so  
```  
4、配置postgresql.conf，在数据库启动时自动加载timescale lib库。  
```  
vi $PGDATA/postgresql.conf  
shared_preload_libraries = 'timescaledb'  
pg_ctl restart -m fast  
```  
5、对需要使用timescaledb的数据库，创建插件.  
```  
psql  
psql (10.1)  
Type "help" for help.  
postgres=# create extension timescaledb ;  
```  
6、timescaledb的相关参数  
```  
timescaledb.constraint_aware_append     
timescaledb.disable_optimizations       
timescaledb.optimize_non_hypertables    
timescaledb.restoring    
postgres=# show timescaledb.constraint_aware_append ;  
 timescaledb.constraint_aware_append   
-------------------------------------  
 on  
(1 row)  
postgres=# show timescaledb.disable_optimizations ;  
 timescaledb.disable_optimizations   
-----------------------------------  
 off  
(1 row)  
postgres=# show timescaledb.optimize_non_hypertables ;  
 timescaledb.optimize_non_hypertables   
--------------------------------------  
 off  
(1 row)  
postgres=# show timescaledb.restoring ;  
 timescaledb.restoring   
-----------------------  
 off  
(1 row)  
```  
## timescaleDB使用例子1 - 纽约TAXI数据透视分析  
第一个例子是real-life New York City taxicab data ，  
http://docs.timescale.com/v0.8/tutorials/tutorial-hello-nyc  
数据为真实的数据，来自  
http://www.nyc.gov/html/tlc/html/about/trip_record_data.shtml  
1、下载样本数据  
```  
wget https://timescaledata.blob.core.windows.net/datasets/nyc_data.tar.gz  
```  
2、解压  
```  
tar -zxvf nyc_data.tar.gz   
```  
3、建表，其中包括将普通表转换为时序存储表的API create_hypertable 的使用。  
```  
psql -f nyc_data.sql  
```  
截取一些nyc_data.sql的内容如下：  
```  
cat nyc_data.sql  
-- 打车数据: 包括时长、计费、路程、上车、下车经纬度、时间、人数等等。  
CREATE TABLE "rides"(  
    vendor_id TEXT,  
    pickup_datetime TIMESTAMP WITHOUT TIME ZONE NOT NULL,  
    dropoff_datetime TIMESTAMP WITHOUT TIME ZONE NOT NULL,  
    passenger_count NUMERIC,  
    trip_distance NUMERIC,  
    pickup_longitude  NUMERIC,  
    pickup_latitude   NUMERIC,  
    rate_code         INTEGER,  
    dropoff_longitude NUMERIC,  
    dropoff_latitude  NUMERIC,  
    payment_type INTEGER,  
    fare_amount NUMERIC,  
    extra NUMERIC,  
    mta_tax NUMERIC,  
    tip_amount NUMERIC,  
    tolls_amount NUMERIC,  
    improvement_surcharge NUMERIC,  
    total_amount NUMERIC  
);  
```  
这句话，将rides转换为时序表存储  
```  
SELECT create_hypertable('rides', 'pickup_datetime', 'payment_type', 2, create_default_indexes=>FALSE);  
```  
创建索引  
```  
CREATE INDEX ON rides (vendor_id, pickup_datetime desc);  
CREATE INDEX ON rides (pickup_datetime desc, vendor_id);  
CREATE INDEX ON rides (rate_code, pickup_datetime DESC);  
CREATE INDEX ON rides (passenger_count, pickup_datetime desc);  
```  
4、导入测试数据  
```  
psql -c "\COPY rides FROM nyc_data_rides.csv CSV"  
COPY 10906858  
```  
5、对已转换为时序存储表的rides执行一些测试SQL，性能比PostgreSQL普通表要好。  
每天同车超过2人的交易，平均计费多少？  
```  
-- Average fare amount of rides with 2+ passengers by day  
SELECT date_trunc('day', pickup_datetime) as day, avg(fare_amount)  
  FROM rides  
  WHERE passenger_count > 1 AND pickup_datetime < '2016-01-08'  
  GROUP BY day ORDER BY day;  
        day         |         avg  
--------------------+---------------------  
2016-01-01 00:00:00 | 13.3990821679715529  
2016-01-02 00:00:00 | 13.0224687415181399  
2016-01-03 00:00:00 | 13.5382068607068607  
2016-01-04 00:00:00 | 12.9618895561740149  
2016-01-05 00:00:00 | 12.6614611935518309  
2016-01-06 00:00:00 | 12.5775245695086098  
2016-01-07 00:00:00 | 12.5868802584437019  
(7 rows)  
```  
6、某些查询的性能甚至超过20倍  
每天有多少笔交易。  
```  
-- Total number of rides by day for first 5 days  
SELECT date_trunc('day', pickup_datetime) as day, COUNT(*) FROM rides  
  GROUP BY day ORDER BY day  
  LIMIT 5;  
        day         | count  
--------------------+--------  
2016-01-01 00:00:00 | 345037  
2016-01-02 00:00:00 | 312831  
2016-01-03 00:00:00 | 302878  
2016-01-04 00:00:00 | 316171  
2016-01-05 00:00:00 | 343251  
(5 rows)  
```  
timescale增加了merge append的执行优化，因此在时间片上按小粒度聚合，效率非常高，数据量越大，性能提升的效果越明显。  
For example, TimescaleDB introduces a time-based "merge append" optimization to minimize the number of   
groups which must be processed to execute the following (given its knowledge that time is already ordered).   
For our 100M row table, this results in query latency that is 396x faster than PostgreSQL (82ms vs. 32566ms).  
```  
SELECT date_trunc('minute', time) AS minute, max(usage_user)  
  FROM cpu  
  WHERE time < '2017-01-01'  
  GROUP BY minute  
  ORDER BY minute DESC  
  LIMIT 5;  
```  
7、执行一些timescaleDB特有的功能函数，例如time_bucket，这里同样会用到timescaleDB内置的一些加速算法。  
每5分钟间隔为一个BUCKET，输出每个间隔产生了多少笔订单。  
```  
-- Number of rides by 5 minute intervals  
--   (using the TimescaleDB "time_bucket" function)  
SELECT time_bucket('5 minute', pickup_datetime) as five_min, count(*)  
  FROM rides  
  WHERE pickup_datetime < '2016-01-01 02:00'  
  GROUP BY five_min ORDER BY five_min;  
      five_min       | count  