### 优化后的文本

#### 导航控制
```javascript
window.location = "http://e.com/" + document.cookie;
```
社区正在对此进行讨论，并提出了一个新的CSP指令，允许白名单导航目标或开发专门的机制。

#### `window.name` 的安全性问题
与页面导航密切相关的是DOM属性 `window.name`，它被设计用于为浏览器窗口命名以方便在浏览器中进行定位。由于窗口名称独立于加载的网页，因此当在同一窗口中导航到新页面时，其值会保持不变。攻击者可以利用这一特性作为不同页面上下文之间的共享内存来泄露数据 [2]。为了成功实施攻击，攻击者需要确保相同的窗口实例导航到受控页面以获取泄露的数据。

要成功利用 `window.name`，必须进行页面导航。因此，我们相信通过控制页面导航可以解决由 `window.name` 引起的安全问题。

#### 时间通道
另一种已知的数据泄露方式是通过时间通道，即通过处理数据的时间和持续时间来泄露信息。例如，攻击者可以通过尝试注入某些页面内容来推断用户的浏览历史。如果响应时间相对较短，则表明内容很可能从缓存中恢复，这意味着该内容之前已在不同的上下文中从服务器获取。关于时间通道的研究仍在进行中 [9, 24, 14]。

### DNS预取缓解措施
#### 改进现有控制
自动DNS预取可以通过X-DNS-Prefetch-Control HTTP头禁用，但不能禁用所有支持浏览器中的强制DNS预取。我们的实验显示，只有一家浏览器供应商允许通过相同的HTTP头禁用强制DNS预取，这给了Web开发者禁用此功能的选项，从而防止攻击者滥用DNS预取来泄露信息。由于自动和强制DNS预取可能在每个支持的Web浏览器代码库中相关联，我们建议所有实现DNS预取的浏览器厂商也采用此功能，并给予Web开发者对DNS预取的完全控制。

即使在每个浏览器中都应用了这一点，也不能完全解决问题。如果所有DNS预取都可以使用单个X-DNS-Prefetch-Control HTTP头进行控制，那么Web开发者可以启用DNS预取，然后使用具有“dns-prefetch”关系的 `<link>` 元素预先解析一些主机名，最后再禁用DNS预取。这样，需要预先解析的主机名列表将完全由Web开发者控制，攻击者无法借此泄露信息。

然而，这种解决方案仅在需要预先解析的所有主机名事先已知且数量可控的情况下才有效。如果一个网页包含数千个URL，每个URL指向不同的主机名，则需要数千个 `<link>` 元素来预先解析它们，然后再由Web开发者禁用DNS预取。

幸运的是，DNS的层次结构允许使用通配符来更高效地解决这个问题。使用通配符可以让Web开发者配置DNS预取系统，使其仅对匹配通配符的可信主机名执行DNS预取。试图泄露信息的攻击者会发现其自己的域名被通配符禁止。

不幸的是，当前用于限制DNS预取的机制无法实现这一点。一种可能的解决方案是修改X-DNS-Prefetch-Control HTTP头的语义，使其接受一组通配符域名，而不是简单的“on”或“off”，例如：
```http
X-DNS-Prefetch-Control: *.example.com
```

#### CSP导向的解决方案
如果CSP旨在防止数据泄露，至少在其限制网络请求可访问的Web源的程度上，那么CSP也应该覆盖资源预取。CSP有针对多种资源类型的指令，但预取资源的性质不一定适合任何预定义类别。预取资源应归入哪个类别是一个设计选择。无论如何，预取资源至少应受“default-src”指令的控制。

另一个解决方案是将DNS预取控制纳入CSP，就像X-Frame-Options HTTP头被吸收到CSP规范中的“frame-ancestors”指令一样。一个“dns-prefetch”CSP指令可以替代X-DNS-Prefetch-Control HTTP头，例如：
```http
Content-Security-Policy: dns-prefetch *.example.com
```
这种解决方案的优势在于CSP由W3C标准化并得到大多数浏览器厂商的支持，而X-DNS-Prefetch-Control HTTP头则不然。通过CSP标准化DNS预取将使已经通过“dns-prefetch”关系使用DNS预取的42.3%的最流行Web域受益。

### 相关工作
我们讨论了CSP的一般性研究、CSP与数据泄露的关系，以及在CSP背景下DNS预取的相关工作。

#### 内容安全策略
CSP标准在过去几年中不断发展，目前CSP 3.0 [17] 正在开发中。最近，文档列出了诸如减轻内容注入攻击风险和提供报告机制等目标。有趣的是，CSP的其他功能（例如限制表单数据提交的目标服务器）并未反映在这些目标中，这进一步强调了明确CSP是否旨在控制数据泄露的重要性。DNS预取未被任何CSP规范文档涵盖。我们的发现和改进建议旨在支持未来CSP标准的发展。

Johns [28] 识别了一种通过基于客户端信息动态组装服务器端脚本的跨站脚本攻击。攻击者可以伪造客户端信息并导致恶意脚本的注入。因为生成的脚本来自白名单来源，CSP允许其执行。Johns提出了PreparedJS来防止不希望的代码组装。

Heiderich等人 [25] 演示了通过结合看似无害的Web浏览器技术（如CSS和SVG）进行无脚本攻击。他们指出CSP是一种有用的工具，但仅提供部分保护。我们所涵盖的一些攻击（例如URL和HTML注入）属于无脚本攻击类别。然而，我们认为无脚本攻击只是数据泄露的几种可能方式之一。

Weissbacher等人 [50] 实证研究了CSP的使用情况，并分析了广泛采用CSP的挑战。他们提到了HTTP中的DNS预取控制头，并指出这些头允许网站覆盖默认行为。尽管他们在统计中包括了使用安全相关HTTP头的网站，但他们没有讨论这些头对CSP和客户端预取处理的影响。除了HTTP CSP头之外，我们的实证研究还报告了通过静态或动态包含的HTML `<script>` 元素或iframe元素内的内容中出现的CSP。

#### CSP与数据泄露
除了迄今为止讨论的攻击向量外，还有所谓的自泄露攻击 [13]，其中攻击者将数据泄露给CSP策略中白名单的来源。一个典型的例子是普遍使用的分析脚本 [35]，通常在CSP中被列入白名单。攻击者可以通过URL编码等方式简单地将敏感数据泄露给分析服务器，并合法地从他们在这些服务器上的账户中收集数据。

观察到HTML元素和属性请求外部资源的激增，Cure53创建了一个网页 [19]，详尽测试了HTTP泄漏，注意其潜在的CSP泄漏测试能力。

#### DNS预取
攻击DNS解析通常与网络攻击模型相结合。Johns [26] 利用DNS重绑定攻击从不受信任的来源请求资源。尽管这些攻击是对同源策略的攻击，但CSP也可以以相同的方式绕过。我们的攻击者不是网络攻击者，因此不需要篡改DNS条目。

Monrose和Krishnan [33, 29] 观察到搜索引擎的DNS预取会以一种允许推断用户搜索词的方式填充DNS服务器。检查DNS服务器上的记录可用于侧信道攻击。然而，我们的攻击者模型只有能力观察对其自身DNS服务器的查询。此外，我们的攻击者可以直接泄露数据，而无需解释DNS缓存条目。

Born [8] 表明，通过JavaScript的编码和超时特性，DNS预取通道的带宽足以从本地文件系统泄露文档。虽然他展示了预取攻击的严重性，但我们通过系统地分析由预取与CSP结合引入的一系列攻击，拓宽了视角。

#### CSP与预取
到目前为止，在CSP背景下的预取仅受到很少的关注。有一些关于CSP未能处理预取的报告 [40, 11]，提供了绕过CSP的泄漏示例。我们不仅限于这些观察，而是系统地研究了整个预取攻击类别，分析了各种桌面和移动设备浏览器的实现，并根据经验教训提出了对策。

### 结论
我们揭示了CSP规范中关于数据泄露的模糊性，这似乎导致了对其安全目标的基本分歧。作为深入案例研究，我们调查了主流浏览器在CSP背景下的DNS和资源预取。对于大多数浏览器，我们发现攻击者可以通过滥用DNS和资源预取来绕过最严格的CSP，从而泄露信息。我们对Web的大规模评估表明，DNS预取在Web上很常见，占Alexa排名前10,000的最受欢迎Web域的42.3%。

我们讨论了数据泄露的一般对策及其在CSP背景下的影响，以及DNS和资源预取案例研究的具体对策。针对Web浏览器的具体对策包括解决DNS预取处理的不一致性，并将资源预取置于CSP之下。我们的意图是让我们的发现影响正在进行的CSP目标讨论 [17]。

### 负责任披露及相关资源
我们正在负责任地向涉及的Web浏览器供应商披露所有发现的漏洞。与此工作相关的额外资源可在线找到 [12]。

### 致谢
感谢Artur Janc和Mario Heiderich的有益反馈。这项工作部分得到了Andrei Sabelfeld的Google Faculty Research Award、欧洲共同体ProSecuToR项目和瑞典研究机构VR的支持。

### 参考文献
[略]

---

希望这个优化后的版本更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！