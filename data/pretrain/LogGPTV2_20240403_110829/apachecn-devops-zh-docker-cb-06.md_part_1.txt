# 六、Docker API 和 SDK
在本章中，我们将介绍以下食谱:
*   使用应用编程接口处理映像
*   使用 API 构建映像
*   使用 API 启动容器
*   使用 API 执行容器操作
*   探索 Docker 远程应用编程接口客户端库
*   为远程连接配置 Docker 守护程序
*   保护 Docker 守护进程的远程连接
# 介绍
在前面的章节中，我们已经使用了很多 Docker 命令来处理 Docker 映像、容器、卷和网络。Docker 的标志之一是它通过易于记忆和结构良好的命令提供了惊人的用户体验。通过一个 Docker 命令，我们可以旋转一个非常有用的微服务或实用程序容器。然而，在幕后，Docker 客户端将我们的请求翻译成多个 API 调用来实现它。这些 API 被称为 Docker 引擎 API，它们是使用 REST 范式设计的。
Note: **REST** (aka **RESTful**) stands for **REpresentational State Transfer**, which is a web standard for data communication over the HTTP protocol.
Docker 引擎 API 使用 OpenAPI(以前称为**swaggle**)规范进行记录。因此，我们可以通过任何标准的 OpenAPI 编辑器访问 API 帮助。在这本书里，我们使用了一个名为 Swagger Editor 的编辑器，它可以在[http://Editor . swaggy . io](http://editor.swagger.io)上找到；但是，您可以使用自己选择的任何 OpenAPI 编辑器。Swagger Editor 有“试用”和“执行”等选项，可用于生成带有适当选项的`curl`命令。下面的截图显示了带有 Docker 引擎 API 文档的 Swagger 编辑器:
![](img/6d510bff-1ec7-4d60-8702-d1cdedc6e78e.png)
在这里，我们从[https://docs.docker.com/engine/api/v1.35/swagger.yaml.](https://docs.docker.com/engine/api/v1.35/swagger.yaml.)提供的`swagger.yaml`文件中生成了 Docker Engine API 文档，当然，您也可以从[https://raw . githubusercontent . com/Moby/Moby/master/API/swag . YAML .](https://raw.githubusercontent.com/moby/moby/master/api/swagger.yaml)中参考当前正在进行的 API 版本
默认情况下，Docker 引擎监听`/var/run/docker.sock`，一个 Unix 域套接字，与其客户端通信。Unix 域套接字，也称为进程间通信套接字，支持主机内的可靠通信。除此之外，`/var/run/docker.sock`对用户`root`和组`docker`有读写权限；因此，客户端应用必须拥有`root`权限或者是`docker`组的成员。除了 Unix 套接字之外，Docker 守护程序还支持两种套接字类型:
*   `fd` : Systemd 的套接字激活。在基于 Systemd 的系统上，例如 Ubuntu 16.04，Docker 守护进程监听`fd`套接字，该套接字使用 systemd 的套接字激活特性在内部映射到 Unix 套接字`/var/run/docker.sock`。
*   `tcp`:用于远程连接。在配方*中，配置 Docker 守护程序进行远程连接*，我们将配置 Docker 守护程序接受来自客户端的未加密通信，在配方*中，保护 Docker 守护程序的远程连接*，我们将配置 Docker 守护程序使用安全通信。
Docker 还为 Python 和 Go 字母组合语言提供了软件开发工具包。这些 SDK 在内部使用 Docker 引擎 REST APIs。除了这些标准的 SDK 之外，还有许多其他编程语言的社区支持的 API 绑定。这些应用编程接口绑定中的一些列在[https://docs.docker.com/develop/sdk/#unofficial-libraries](https://docs.docker.com/develop/sdk/#unofficial-libraries)上。然而，Docker 并没有测试这些库。
在本章中，我们将使用两个工具:`curl`和`jq`:
*   `curl`是传输数据的命令行工具。我们使用`curl`连接到我们的 Docker 守护进程。请确保您运行的是`curl`T3 或更高版本，因为 curl 从版本`7.40`开始支持 Unix 套接字。你可以在官方网站[https://curl.haxx.se/.](https://curl.haxx.se/)找到更多关于`curl`的详细信息
*   `jq`是处理 JSON 数据的命令行工具。我们使用`jq`来处理从 Docker 守护进程接收的数据。您可以在[https://stedolan.github.io/jq/.](https://stedolan.github.io/jq/)T5 官方网站上找到更多关于`jq`的详细信息
In this chapter we are using Ubuntu 16.04 and Docker 17.10, because of an issue with the default curl command that comes along with the Ubuntu 18.04 installation.  If you choose to continue with Ubuntu 18.04 and Docker 18.03, you can do so by prefixing any text in the Docker API endpoint (http://bug/version) as a workaround.
本章中的所有配方都假设 Docker 已经安装并运行。
# 使用应用编程接口处理映像
如前所述，Docker 在内部使用 Docker 引擎 API 来满足我们所有的容器化需求
南在本食谱中，我们将使用`curl`命令和 Docker 引擎 API 对 Docker 映像执行各种操作。
# 怎么做...
在本食谱中，我们将看一些映像操作，如下所示:
1.  要列出映像，请使用以下应用编程接口:
![](img/701000e7-00f1-471b-8f53-f8630e298043.png)
下面是前面语法的一个例子:
![](img/0b2fca88-4489-48a2-b950-7d8466294c6e.png)
2.  您可以使用以下应用编程接口从任何注册表或 tar 文件中提取映像来创建映像:
![](img/aae05f52-d584-4379-ab49-3dd8f1371f0b.png)
`/img/create`应用编程接口支持几个选项来处理映像，如下所列:
![](img/2da1d948-70c3-4f60-8926-b4a780ddc878.png)
现在让我们看几个例子:
3.  从 Docker Hub 获取`cookbook/apache2`映像:
```
 $ curl -X POST \ --unix-socket /var/run/docker.sock \ 
 httimg/create?fromImage=cookbook/apache2
```
4.  获取带有`latest`标签的 WordPress 映像:
![](img/9f048367-3ee2-46ee-a6c7-6e45e962bacf.png)
5.  从`tar`文件创建映像:
![](img/e62034ba-a135-413f-93bf-bfb6701f4016.png)
在本例中，我们选择使用`curl`命令的`--data-binary`选项从 Docker 主机上传映像作为 tar 包。这里，`myimage.tar`的内容通过 HTTP 消息体发送给 Docker 守护进程。如果你仔细观察`curl`命令调用，你会注意到`-i`选项。我们正在使用`curl`命令的`-i`选项来获取 HTTP 头信息。
要删除映像，请使用以下应用编程接口:
![](img/bca4f3eb-c72f-4598-8fcd-bc313fe6977f.png)
下面是前面语法的一个例子:
```
    $ curl -X DELETE \
           --unix-socket /var/run/docker.sock \
           httimg/wordpress:latest 
```
# 它是如何工作的...
在本食谱中，我们使用`curl`命令对 Docker 映像执行了各种操作。`curl`命令通过 HTTP 将我们的应用编程接口请求作为 REST 应用编程接口请求发送给 Docker 守护程序。接下来，Docker 守护程序将对映像执行请求的操作，并回复操作状态。
# 还有更多...
在这个食谱中，我们只介绍了与 Docker 映像处理相关的三个 API，但还有更多。下面的截图列出了所有可用的`/images`API:
![](img/7f25c9a7-59b6-4e11-932e-c779c565f283.png)
# 请参见
*   每个应用编程接口端点可以有不同的输入来控制操作。有关更多详细信息，请访问 Docker 网站上的文档，网址为[https://docs.docker.com/engine/api/latest/.](https://docs.docker.com/engine/api/latest/)
# 使用 API 构建映像
在前面的食谱中，我们探索了使用 API 对 Docker 映像执行的一些操作。在这个食谱中，我们将使用`/build` API 构建一个 Docker 映像。以下是斯瓦格编辑器的`/build`应用编程接口片段:
![](img/bcf39d39-3336-420b-92a9-576325a24fa1.png)
# 怎么做...
1.  首先克隆[https://github.com/docker-cookbook/apache2](https://github.com/docker-cookbook/apache2)存储库，如下所示:
```
    $ git clone https://github.com/docker-cookbook/apache2  
```
该存储库包含用于捆绑`apache2`服务的`Dockerfile`；这里列出的是`Dockerfile`的内容:
![](img/eea8258b-f345-4c9b-a460-f52ec4588aea.png)
2.  让我们通过将克隆的`apache2`存储库的内容绑定为 tar 文件来创建构建上下文，如下所示:
```
        $ cd apache2
        $ tar cvf /tmp/apache2.tar *  
```
3.  继续使用`/build`应用编程接口构建 Docker 映像:
```
        $ curl -X POST \
           -H "Content-Type:application/tar" \
           --data-binary '@/tmp/apache2.tar' \
    --unix-socket /var/run/docker.sock \ 
           http:/build
```
在构建过程中，您会收到一系列 JSON 消息形式的构建日志。一旦构建成功完成，您将获得类似如下的 JSON 消息:
```
    {"stream":"Successfully built 3c6f5044386d\n"} 
```
在前面的 JSON 消息中，`3c6f5044386d`是我们刚刚使用`/build` API 构建的映像的 ID。
# 它是如何工作的...
在这个方法中，我们将构建上下文捆绑为一个 tar 文件，并将其作为`/build` API 调用的一部分发送给 Docker 引擎。Docker 引擎使用构建上下文和构建上下文中的`Dockerfile`来构建 Docker 映像。
# 还有更多...
1.  在这个配方中，我们没有指定任何存储库或标签名，因此创建的映像没有任何存储库或标签名，如下所示:
```
        $ curl -s --unix-socket /var/run/docker.sock \
                 httimg/json | jq ".[0].RepoTags"
    [
      ":"
    ]  
```
当然，您现在可以使 img/{name}/tag`应用编程接口用适当的存储库和标签名称来标记映像。以下是从斯瓦格编辑器中截取的帮助文档:
![](img/97773245-a1f7-41bc-99c5-e7f5017e891e.png)
或者，您可以在构建期间使用`t`参数将映像与存储库名称捆绑在一起，如下所示:
```
        $ curl -X POST \
           -H "Content-Type:application/tar" \
           --data-binary '@/tmp/apache2.tar' \
    --unix-socket /var/run/docker.sock \ 
           http:/build?t=apache2:usingapi  
```
标签名是可选的，如果没有指定标签名，Docker 构建引擎将采用标签名`latest`。
2.  您还可以使用以下应用编程接口从容器创建映像:
![](img/8d1a68f4-1249-43bd-8ebc-c6ff88dc566d.png)
以下是从容器标识`4aaec8980c43`提交映像的示例:
![](img/a45f97c5-782c-4ac3-be50-39fadfaf87b6.png)
# 请参见
每个应用编程接口端点可以有不同的输入来控制操作。有关更多详细信息，请访问 Docker 网站上的文档，网址为[https://docs.docker.com/engine/api/latest/.](https://docs.docker.com/engine/api/latest/)
# 使用 API 启动容器
在[第二章](02.html)、*与 Docker Containers 合作、*配方*启动容器*中，我们有条不紊、一丝不苟地探索了运行容器的不同方式。在所有这些场景中，我们使用了带有几个选项的`docker container run`命令，并且我们所有的容器都已启动并运行。然而，在幕后，Docker CLI 通过首先通过`/create` API 创建容器层，然后通过`/start` API 启动应用(`cmd`)来实现，如下图所示:
![](img/76d1a22d-3ebd-4099-8858-f42559dae1fe.png)