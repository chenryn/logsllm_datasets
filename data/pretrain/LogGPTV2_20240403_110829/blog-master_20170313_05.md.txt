## PostgreSQL 10.0 预览 - SQL:2016 标准（包括 SQL/JSON）和 Oracle 12c 兼容性
##### [标签 13](../class/13.md) , [标签 21](../class/21.md)

### 作者
digoal

### 日期
2017-03-13

### 标签
PostgreSQL, 10.0, SQL:2016, SQL/JSON, Oracle

---

## 背景
PostgreSQL 很早就支持 JSON 类型，是最早支持 JSON 的关系数据库之一。它内置了两种 JSON 类型：`json` 和 `jsonb`。而 Oracle 直到 12c 才开始支持 JSON。

SQL:2016 标准中包含了一个 SQL/JSON 数据模型标准，该标准的详细内容可以在 ISO 网站上购买（[链接](https://www.iso.org/standard/63556.html)）。Oracle 12c 对 JSON 的支持与这个标准非常接近，这可能是因为 Oracle 希望通过符合标准来增强其市场竞争力。

尽管 PostgreSQL 早在几年前就支持了 JSON，但由于 Oracle 在市场上占有很大份额，许多用户可能更习惯于 Oracle 的 JSON 使用方式。PostgreSQL 的 `json` 和 `jsonb` 已经形成了一个强大的生态系统，包括自身的用法以及诸如 pljava、pljavascript 和 plv8 等存储过程引擎。这些功能在实际应用中的实用性已经超过了 SQL 标准，但考虑到用户需求，PostgreSQL 社区决定在 10.0 版本中支持 SQL:2016 的 SQL/JSON 标准。

---

## 实现细节
以下是关于 PostgreSQL 10.0 支持 SQL:2016 SQL/JSON 标准的实现细节：

```plaintext
您好，

附件中的补丁实现了 SQL:2016 标准 (ISO/IEC 9075-2:2016(E)) 中的 SQL/JSON 数据模型。该标准于 2016 年 12 月 15 日发布，仅可在 ISO 网站上购买 ([链接](https://www.iso.org/standard/63556.html))。遗憾的是，我们没有找到任何公开的标准或预览文档，但我们参考了 Oracle 12c Release 2 中的 JSON 支持实现 ([链接](http://docs.oracle.com/database/122/ADJSN/json-in-oracle-database.htm))，并在 [LiveSQL](https://livesql.oracle.com/) 上进行了一些细节的理解。

PostgreSQL 已经有两种 JSON 数据类型：`json` 和 `jsonb`。再实现一种严格符合标准的 JSON 数据类型并不是一个好的选择。此外，SQL 标准并没有描述数据类型，而是描述了一个数据模型，该模型包括 SQL/JSON 项和 SQL/JSON 序列。SQL/JSON 数据模型的组件如下：
1. SQL/JSON 项定义为以下任一情况：
   a. SQL/JSON 标量，定义为非空的 Unicode 字符串、数值、布尔值或日期时间值。
   b. SQL/JSON null，定义为与任何 SQL 类型的值都不同的值。
   c. SQL/JSON 数组，定义为零个或多个 SQL/JSON 项的有序列表。
   d. SQL/JSON 对象，定义为零个或多个 SQL/JSON 成员的无序集合。

我们的 `jsonb` 类型对应于具有唯一键和隐式键排序的 SQL/JSON。我们的主要目标是提供对 `jsonb` 这种最重要且最实用的数据类型的支持。

我们创建了一个用于审查的仓库（请请求写权限）：[GitHub 链接](https://github.com/postgrespro/sqljson/tree/sqljson)

使用示例可以在 `src/test/regress/sql/sql_json.sql` 文件中找到。

整个 JSON 支持的文档需要重新组织和添加，我们计划在发布前完成这项工作，并需要社区的帮助。

我们的目标是在 10.0 版本中提供 SQL/JSON 主要功能的支持，正如我们在布鲁塞尔开发者会议上讨论的那样（Andrew Dunstan 同意审查该补丁）。

由于标准发布时间较晚，我们没有太多时间开发完整的支持，但我们希望所有主要功能都已经实现，特别是标准中描述的九个函数（参见实现注释）：
- `JSON_VALUE`：从 JSON 文本中提取预定义类型的 SQL 值。
- `JSON_QUERY`：从 JSON 文本中提取 JSON 文本。
- `JSON_TABLE`：将 JSON 文本转换为 SQL 表。
- `IS_JSON`：测试字符串是否是格式正确的 JSON 文本。
- `JSON_EXISTS`：测试 SQL/JSON 路径表达式是否返回任何 SQL/JSON 项。
- `JSON_OBJECT`：生成 SQL/JSON 对象的序列化字符串。
- `JSON_ARRAY`：生成 SQL/JSON 数组的序列化字符串。
- `JSON_OBJECTAGG`：从 SQL 数据聚合生成 SQL/JSON 对象的序列化字符串。
- `JSON_ARRAYAGG`：从 SQL 数据聚合生成 SQL/JSON 数组的序列化字符串。

标准还描述了 SQL/JSON 路径语言，用于查询 JSON 数据。我们将路径语言实现为 `JSONPATH` 数据类型，因为其他方法对规划器和执行器不够友好。

这些函数和 `JSONPATH` 提供了新的功能，即在 SQL 语言级别以标准指定的方式操作 JSON 结构，这是用户经常要求的功能。

该补丁包含约 15000 行插入（其中约 5000 行是测试代码），通过了所有回归测试，并且没有触及关键部分，因此我们希望在社区的帮助下将其完善到可提交的状态。

作者：Nikita Glukhov, Teodor Sigaev, Oleg Bartunov 和 Alexander Korotkov

实现注释：
1. 我们没有实现 `datetime` 支持，因为标准对此不明确。
2. `JSON_OBJECT/JSON_OBJECTAGG (KEY VALUE, ...)` 尚未实现，只支持 `(:, …)` 和 `(VALUE, …)`，因为语法冲突。
3. `FORMAT (JSON|JSONB))` 在 `JSON_ARRAYAGG` 中的子查询中尚未支持，因为语法冲突。
4. `JSONPATH` 仅针对 `jsonb` 数据类型实现，因此 `JSON_EXISTS()`, `JSON_VALUE()`, `JSON_QUERY()` 和 `JSON_TABLE()` 在上下文项为 `json` 数据类型时不工作。
5. 某些 `JSONPATH` 方法和谓词尚未实现，例如 `.type()`, `.size()`, `.keyvalue()` 和 `like_regex`, `starts with` 等。它们不是关键功能，我们计划在下一个版本中实现。
6. `JSONPATH` 不支持数组索引表达式，如 `[2+3 to $upperbound]`，只支持简单的常数如 `[5, 7 to 12]`。
7. `JSONPATH` 对标准的扩展：`.**`（通配路径访问器）和 `.key`（成员访问器，不带前导 `@`）。
8. `FORMAT JSONB` 是对标准的扩展，用于返回 `jsonb` —— 标准指定了返回自定义类型的可能性。
9. `JSON_EXISTS()`, `JSON_VALUE()`, `JSON_QUERY()` 使用新的执行节点 `JsonExpr` 实现。
10. `JSON_TABLE()` 转换为带有 `JSON_VALUE()` 和 `JSON_QUERY()` 的连接子查询。
11. `JSON_OBJECT()`, `JSON_ARRAY()` 构造函数和 `IS JSON` 谓词转换为原始函数调用。
12. 添加了显式的 `bytea => jsonb` 和 `jsonb => bytea` 转换（对于 `jsonb => bytea` 输出使用 `RETURNING bytea FORMAT JSONB` 和相应的 `bytea => jsonb` 输入使用 `FORMAT JSONB`）。

祝好，
Oleg
```

## 使用示例
[GitHub 链接](https://github.com/postgrespro/sqljson/blob/sqljson/src/test/regress/sql/sql_json.sql)

关于此补丁的讨论，请参阅邮件组中的详细信息（本文末尾 URL）。

PostgreSQL 社区的工作作风非常严谨，一个补丁可能在邮件组中讨论几个月甚至几年，根据大家的意见反复修正。因此，合并到 master 分支的补丁已经非常成熟，这也是 PostgreSQL 以稳定性著称的原因之一。

## 参考资料
- [CommitFest PostgreSQL 10.0](https://commitfest.postgresql.org/13/1063/)
- [邮件组讨论](https://www.postgresql.org/message-id/flat/CAF4Au4w2x-5LTnN_bxky-mq4=WOqsGsxSpENCzHRAzSnEd8+PI:EMAIL#CAF4Au4w2x-5LTnN_bxky-mq4=WOqsGsxSpENCzHRAzSnEd8+PI:EMAIL)

#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76)
您的愿望将传达给 PG kernel hacker 和数据库厂商，帮助提高数据库产品质量和功能。针对非常好的提议，奖励限量版 PG 文化衫、纪念品、贴纸、PG 热门书籍等，奖品丰富，快来许愿吧！

#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity)
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118)
#### [德哥 / digoal's GitHub - 公益是一辈子的事](https://github.com/digoal/blog/blob/master/README.md)
![德哥的微信](../pic/digoal_weixin.jpg)
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity)
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al)
#### [关于德哥](https://github.com/digoal/blog/blob/master/me/readme.md)