C艹学习笔记
本笔记主干基于书籍《C艹面向对象程序设计教程(第4版)》，在此基础上会有所扩展。
内容如有不对之处，希望大家能够指出并私信我。
我的个人博客：https://www.kn0sky.com/
Web版笔记：https://wiki.kn0sky.com/#/note_cpp/README
第一章：面向对象程序设计概述
面向过程与面向对象
面向过程程序设计的主要特征是：程序由 过程定义 和 过程调用 组成
程序 = 过程 + 调用
面向对象程序设计的主要特征是：程序由类的定义和类的使用组成（一切消息由向对象发送消息来实
现，对象收到消息启动相关方法来完成）
程序 = 对象 + 消息
面向对象程序设计基本概念
对象：对象由数据和操作代码组成
类：类是一组对象的抽象
再程序设计中，先声明类，再声明对象
消息与方法：对象收到消息，调用相应的方法
面向对象程序设计基本特征
1. 抽象：类是对象的抽象，对象是类的实例，抽象分为数据抽象和代码抽象，对应属性与方法
2. 封装：把方法用函数包起来，使用的时候只需要知道需要的参数，提供了代码的重用性
3. 继承：继承分为单继承和多继承，子类从单个或多个父类继承数据和方法，同时又与父类有所差别
4. 多态：不同对象收到相同的消息时执行不同的操作
第二章：C++概述
C++语言的特点：全面兼容C，并对C进行了扩充
注释行
C++有两种注释方式：
//单行注释
/*多
  行
  注
  释*/
多行注释可以嵌套单行注释( // )的注释方式。
C++ 的输入输出
C++ 除了可以使用C语言中使用的 scanf() ， printf() 函数进行输入输出，还增加了使用标准输入流
对象 cin 和标准输出流对象 cout 来进行。
程序示例：
cin反汇编程序：
cout反汇编程序：
#include
using namespace std;
int main(){
    int a;
    cin >> a;
    cout > a;
006718D2  mov         esi,esp  
;这里将esp栈顶指针放入esi存起来
006718D4  lea         eax,[a]  
006718D7  push        eax  
;取变量a的地址放入栈中
006718D8  mov         ecx,dword ptr [_imp_?cin@std@@3V?$basic_istream@DU?
$char_traits@D@std@@@1@A (067B0ACh)]  
006718DE  call        dword ptr 
[__imp_std::basic_istream >::operator>> (067B098h)] 
;这里把一个地址的值放到了ecx里，函数调用之后，我们输入数值，数值会存到那个地址里，从而使ecx里的
值变成了我们输入的结果
006718E4  cmp         esi,esp  
006718E6  call        __RTC_CheckEsp (0671235h)  
;对比当前栈和函数调用之前是否有变化，检查堆栈平衡
    cout > ,  >::operator
using namespace std;
int main(){
    int a, b, c;
    cin >> a >>b >> c;
    cout > a >>b >> c;
00031882  mov         esi,esp  
00031884  lea         eax,[c]  
00031887  push        eax  
00031888  mov         edi,esp  
0003188A  lea         ecx,[b]  
0003188D  push        ecx  
0003188E  mov         ebx,esp  
00031890  lea         edx,[a]  
00031893  push        edx  
;从右往左的顺序将地址依次入栈，每次入栈前都把栈顶的值取出来，分别放到esi，edi，ebx里
00031894  mov         ecx,dword ptr [_imp_?cin@std@@3V?$basic_istream@DU?
$char_traits@D@std@@@1@A (03B0ACh)]  
0003189A  call        dword ptr 
[__imp_std::basic_istream >::operator>> (03B098h)]
000318A0  cmp         ebx,esp  
000318A2  call        __RTC_CheckEsp (031235h)  
;从键盘接收变量a，函数调用完会把ecx里存的那个地址放到eax里
000318A7  mov         ecx,eax  
进制转换
可以通过设置转换基数操纵符dec（十进制），hex（十六进制），oct（八进制）进行进制转换
示例：
反汇编：
000318A9  call        dword ptr 
[__imp_std::basic_istream >::operator>> (03B098h)]  
000318AF  cmp         edi,esp  
000318B1  call        __RTC_CheckEsp (031235h)  
;从键盘接收变量b
000318B6  mov         ecx,eax  
000318B8  call        dword ptr 
[__imp_std::basic_istream >::operator>> (03B098h)]  
000318BE  cmp         esi,esp  
000318C0  call        __RTC_CheckEsp (031235h)  
;从键盘接收变量c
    cout  >::operator >::operator
using namespace std;
int main(){
    int a = 16;
    cout  
>::sentry::sentry (09511F4h)  
;类型入栈
009520DC  mov         ecx,dword ptr [_imp_?cout@std@@3V?$basic_ostream@DU?
$char_traits@D@std@@@1@A (095D0DCh)]  
009520E2  call        dword ptr 
[__imp_std::basic_ostream >::operator >::operator
using namespace std;
int main(){
    int a = 16;
    cout > b;
    return 0;
}
const 修饰符
C语言中常用 #define 来定义常量，这种方法是在编译的时候进行字符替换，不占用存储单元
C++提供了一种新的方法来定义常量： const 如：
这个常量是有类型，占用存储单元，有地址，可以被指向的，但不能修改。
如果 const 定义的是一个整型常量，关键词int可以忽略。
函数的形参也可以用const说明。
const与指针：指向常量的指针
声明的常量的值不能改变，但指针可以改变指向
const与指针：常指针
指针的地址不能改变，指针指的值可以变
const与指针：指向常量的常指针
enum Bool{FALSE,TRUE};
Bool done;//C++可以这样定义
enum Bool done; //C需要这样定义
const int LIMIT = 99;
const LIMIT =100;//两行等价
#include
using namespace std;
int main(){
    const char* name = "chen"; //声明一个指向常量的指针
    // name[3] = 'a';  const声明的常量的值不能改变
    name = "hello";         //指针指向的地址可以改变
    return 0;
}
#include
using namespace std;
int main(){
    char st1[] = "hello";
    char * const name = st1;    //指向字符地址的常量指针
    //常指针固定不能移动，但值可以修改
    name[3] = '4';//可以改变内容
    //name = "asd";     不能改变地址
    return 0;
}
函数原型
在调用函数之前需要进行函数原型声明
如果调用的函数在调用之前已经声明好了，则不用在做原型声明了
原型声明格式： 返回值类型 函数名（参数表）;
参数表可不包含参数的名字只留下类型（但写上名字更好辨认参数用途）
当参数表为空的时候，C与C++有所不同
内联函数
为了消除函数调用时的系统开销，来提高运行速度，引入了内联函数
在函数说明前冠以关键字 inline ，该函数就是内联函数
使用时，编译器会把形参变成实参，直接在调用处展开
内联函数内一般不能包含复杂控制语句如循环、判断。
例如：
#include
using namespace std;
int main(){
    char st1[] = "hello";
    const char * const name = st1;  //常量常指针
    //常指针固定不能移动，值也不能改
    //name[3] = '4';//可以改变内容
    //name = "asd";//       不能改变地址
    return 0;
}
//C语言用的函数声明
int add(int a,int b);
int add();
add();
int add(int,int)
//C:
int add(void);//参数表为空
int add();    //参数表可能有值
//C++
int add(void);
int add();
//都意味着参数表为空
会被编译器改成：
理论上是这样的，但我这实际操作里通过反汇编发现内联函数没起作用（我的环境是VS2019）
网上查找资料显示，内联函数知识对编译器的建议，是否内联还得看编译器
带有默认参数的函数
C++允许函数实参和形参个数不同，方法就是在函数定义的时候或声明的时候给形参定义默认值。
当实参不足时，会使用默认值作为实参进行调用
提供默认值的参数应该放在函数参数表的右边，省略参数也只能从右边省略
如果函数定义在调用之前，则应该在函数定义中设置默认值
如果函数定义在调用之后，则应该在函数声明中设置默认值
例如：
反汇编：
inline add(int a,int b){
    return a+b;
}
int main(){
    int c = add(1,2);
    return 0
}
int main(){
    int c;
    int a=1;
    int b=2;
    c=a+b;
    return 0;
}
#include
using namespace std;
int power(int x,int y=2);
int main(){
    int i = power(2);
    int j = power(2, 3);
    return 0;
}
int power(int x, int y) {
    int res=1;
    for (int i = 0; i < y; i++)
        res *= x;
    return res;
}
    int i = power(2);
00691848  push        2  
0069184A  push        2  
函数的重载