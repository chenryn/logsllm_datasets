technique has been extended to scenarios like ﬁle system
forensics [73] and intrusion recovery [26]. In addition to
desktop computers, the technique has been applied to high-
performance computers [15] and web servers [3, 4].
As keeping system logs from machines in an enterprise
consumes paramount storage space, recent research efforts
are focused on reducing such overhead. One main approach is
to remove logs matching certain conditions, including edges
with same source and target [83], temporary ﬁles [45], fre-
quent invocation of programs [77] and identical events with
multiple versions [37]. In addition, the labels provided by op-
erating systems [76] and access control polices [5] have been
leveraged for log removal. The fundamental difference of
SEAL is that it compresses logs under various codes, such that
all information useful for attack investigation is preserved.
As the system logs are generated by the logger of end-
hosts, a number of works studied how to improve the ef-
ﬁciency of the logger. In particular, in-kernel cache [49],
kernel-space hooks [65, 66], dual execution [43], execution
partitioning [50], tracing-tainting alternation [51], on-demand
information ﬂow tracking [39], and library-aware tracing [81]
have been proposed to enhance the logger for efﬁcient prove-
nance analysis. In addition to efﬁciency, the security of the
logger itself has been investigated [6, 9]. Since SEAL is ap-
plied on the side of the data aggregator, it can complement
the approaches on the side of end-hosts.
After the logs are collected, how to connect and repre-
sent them is very important for effective attack investigation.
Most of the effort has been spent on tailoring the logs for
graph-based analytics [31, 33, 36, 57, 58, 70]. Besides, some
works studied how to reconstruct the “crime scene” from the
logs [46,56,67,80]. Since the result of the log analytics needs
to be processed by human analysts, research has been done to
develop new domain-speciﬁc query languages [23–25, 44,72]
and task prioritization [34, 48] to reduce their workload.
Breach Detection in Enterprise Environment. Prior to at-
tack investigation, the detection systems like Firewall, Web
Proxy, and IDS deployed by the enterprise needs to identify
the breach promptly and generate alerts. A line of research has
been done to mine attacks from enterprise logs with machine-
learning techniques. Classical machine-learning models like
logistic regression and random forest have been applied to de-
tect malicious domains from network logs [62,63,84] and ma-
licious ﬁles from end-host logs [10]. Recently, deep-learning
models like Long short-term memory (LSTM) [19] and em-
bedding [47] are leveraged for the similar purposes. While the
primary application of SEAL is on causality analysis, it could
be adjusted for breach detection and we leave this exploration
as future works.
Data Compression on Databases. Compression on
databases can be traced back to Bassiouni [2] and Cor-
mack [13] in 1985, where compression techniques are ap-
plied to the properties or ﬁelds of the records. Graefe and
Shapiro [29] proposed to compress the properties and query
on compressed data as much as possible. Compression across
different properties was investigated in [68] in order to ex-
plore the dependency among related ﬁelds. Column-oriented
database [1, 38, 75] stores each column of the database sep-
arately, and compression potential along the column can be
explored. Compression of bitmap indexes has been devel-
oped in a variety of works, e.g., [12, 61, 74, 82] to improve
query processing. We investigate a new application, causality
analysis, with compression.
USENIX Association
30th USENIX Security Symposium    2999
8 Conclusion
Causality analysis reconstructs information ﬂow across dif-
ferent ﬁles, processes, and hosts to enable effective attack
investigation and forensic analysis. However, it also requires
a large amount of storage, which impedes its wide adoption by
enterprises. Our work shows the concern about storage over-
head can be eased by query-friendly compression. Comparing
to prior works based on data reduction, our system SEAL of-
fers similar or better storage (e.g., 9.81x event reduction and
2.63x database size reduction on DSind) and query efﬁciency
(average query speed is 64% of the uncompressed form) with
guarantee of no false positive and negative in casualty queries.
We make the ﬁrst attempt to integrating the techniques in
the coding area (like Delta coding and Golumb coding) with
a security application. We hope in the future more security
applications can be beneﬁted with techniques from the coding
community and we will continue such investigation.
Acknowledgments
We thank our shepherd Birhanu Eshete and the anonymous
reviewers for their helpful comments that improved the paper.
References
[1] Daniel J Abadi, Peter A Boncz, and Stavros Harizopoulos.
Column-oriented database systems. Proceedings of the VLDB
Endowment, 2(2):1664–1665, 2009.
[2] Mostafa A. Bassiouni. Data compression in scientiﬁc and sta-
tistical databases. IEEE Transactions on Software Engineering,
(10):1047–1058, 1985.
[3] Adam Bates, Kevin Butler, Alin Dobra, Brad Reaves, Patrick
Cable, Thomas Moyer, and Nabil Schear. Retroﬁtting appli-
cations with provenance-based security monitoring. arXiv
preprint arXiv:1609.00266, 2016.
[4] Adam Bates, Wajih Ul Hassan, Kevin Butler, Alin Dobra,
Bradley Reaves, Patrick Cable, Thomas Moyer, and Nabil Sc-
hear. Transparent web service auditing via network provenance
functions. In Proceedings of the 26th International Conference
on World Wide Web, pages 887–895, 2017.
[5] Adam Bates, Dave Tian, Grant Hernandez, Thomas Moyer,
Kevin RB Butler, and Trent Jaeger. Taming the costs of trust-
worthy provenance through policy reduction. ACM Transac-
tions on Internet Technology (TOIT), 17(4):1–21, 2017.
[6] Adam Bates, Dave Jing Tian, Kevin RB Butler, and Thomas
Moyer. Trustworthy whole-system provenance for the linux
kernel. In 24th {USENIX} Security Symposium ({USENIX}
Security 15), pages 319–334, 2015.
[7] Monica Bianchini, Marco Gori, and Franco Scarselli. Inside
pagerank. ACM Transactions on Internet Technology (TOIT),
5(1):92–128, 2005.
[8] VMware Carbon Black. Threat hunting and incident response
for hybrid deployments. https://www.carbonblack.com/
products/edr/, 2020.
[9] Kevin D Bowers, Catherine Hart, Ari Juels, and Nikos Trian-
dopoulos. Pillarbox: Combating next-generation malware with
fast forward-secure logging. In International Workshop on Re-
cent Advances in Intrusion Detection, pages 46–67. Springer,
2014.
[10] Ahmet Salih Buyukkayhan, Alina Oprea, Zhou Li, and William
Robertson. Lens on the endpoint: Hunting for malicious soft-
ware through endpoint data analysis. In International Sympo-
sium on Research in Attacks, Intrusions, and Defenses, pages
73–97. Springer, 2017.
[11] Bryan Cantrill, Michael W Shapiro, and Adam H Leven-
In
thal. Dynamic Instrumentation of Production Systems.
{USENIX} Annual Technical Conference (ATC), Boston, MA,
2004.
[12] Zhen Chen, Yuhao Wen, Junwei Cao, Wenxun Zheng, Jiahui
Chang, Yinjun Wu, Ge Ma, Mourad Hakmaoui, and Guodong
Peng. A survey of bitmap index compression algorithms for
big data. Tsinghua Science and Technology, 20(1):100–115,
2015.
[13] Gordon V Cormack. Data compression on a database system.
[14] Cybereason.
Communications of the ACM, 28(12):1336–1342, 1985.
defense
plat-
form.
https://www.cybereason.com/platform/
endpoint-detection-response-edr. Accessed: 2020-2-
15.
cybereason
EDR |
[15] Dong Dai, Yong Chen, Philip Carns, John Jenkins, and Robert
Ross. Lightweight provenance service for high-performance
computing. In 2017 26th International Conference on Parallel
Architectures and Compilation Techniques (PACT), pages 117–
129. IEEE, 2017.
[16] DARPA/I2O. DARPA Transparent Computing. https://
github.com/darpa-i2o/Transparent-Computing, 2020.
[17] Anirban Dasgupta, Ravi Kumar, and Tamas Sarlos. On es-
timating the average degree. In Proceedings of the 23rd in-
ternational conference on World wide web, pages 795–806,
2014.
[18] Peter Deutsch et al. Gzip ﬁle format speciﬁcation version 4.3.
Technical report, RFC 1952, May, 1996.
[19] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar.
Deeplog: Anomaly detection and diagnosis from system logs
In Proceedings of the 2017 ACM
through deep learning.
SIGSAC Conference on Computer and Communications Secu-
rity, pages 1285–1298, 2017.
[20] Wenfei Fan, Jianzhong Li, Xin Wang, and Yinghui Wu. Query
preserving graph compression. In Proceedings of the 2012
ACM SIGMOD International Conference on Management of
Data, pages 157–168, 2012.
[21] Uriel Feige. On sums of independent random variables with
unbounded variance and estimating the average degree in a
graph. SIAM Journal on Computing, 35(4):964–984, 2006.
[22] FireEye.
and solu-
Endpoint
https://www.fireeye.com/solutions/
security software
tions.
hx-endpoint-security-products.html, 2020.
3000    30th USENIX Security Symposium
USENIX Association
[23] Peng Gao, Xusheng Xiao, Ding Li, Zhichun Li, Kangkook
Jee, Zhenyu Wu, Chung Hwan Kim, Sanjeev R Kulkarni, and
Prateek Mittal. {SAQL}: A stream-based query system for real-
time abnormal system behavior detection. In 27th {USENIX}
Security Symposium ({USENIX} Security 18), pages 639–656,
2018.
[24] Peng Gao, Xusheng Xiao, Zhichun Li, Kangkook Jee,
Fengyuan Xu, Sanjeev R Kulkarni, and Prateek Mittal. A query
system for efﬁciently investigating complex attack behaviors
for enterprise security. Proceedings of the VLDB Endowment,
12(12):1802–1805, 2019.
[25] Peng Gao, Xusheng Xiao, Zhichun Li, Fengyuan Xu, Sanjeev R
Kulkarni, and Prateek Mittal. {AIQL}: Enabling efﬁcient
attack investigation from system monitoring data. In 2018
{USENIX} Annual Technical Conference ({USENIX}{ATC}
18), pages 113–126, 2018.
[26] Ashvin Goel, Kenneth Po, Kamran Farhadi, Zheng Li, and Eyal
De Lara. The taser intrusion recovery system. In Proceed-
ings of the twentieth ACM symposium on Operating systems
principles, pages 163–176, 2005.
[27] Oded Goldreich and Dana Ron. Approximating average param-
eters of graphs. Random Structures & Algorithms, 32(4):473–
493, 2008.
[28] Solomon W Golomb, Basil Gordon, and Lloyd R Welch.
Comma-free codes. Canadian Journal of Mathematics, 10:202–
209, 1958.
[29] Goetz Graefe and Leonard D Shapiro. Data compression
and database performance. University of Colorado, Boulder,
Department of Computer Science, 1990.
[30] Xueyuan Han, Thomas Pasquier, Adam Bates, James Mickens,
and Margo Seltzer. UNICORN: Runtime Provenance-Based
Detector for Advanced Persistent Threats. In NDSS, San Diego,
CA.
[31] Xueyuan Han, Thomas Pasquier, Adam Bates, James Mick-
ens, and Margo Seltzer. Unicorn: Runtime provenance-
based detector for advanced persistent threats. arXiv preprint
arXiv:2001.01525, 2020.
[32] Morris H Hansen and William N Hurwitz. On the theory of
sampling from ﬁnite populations. The Annals of Mathematical
Statistics, 14(4):333–362, 1943.
[33] Wajih Ul Hassan, Lemay Aguse, Nuraini Aguse, Adam Bates,
and Thomas Moyer. Towards scalable cluster auditing through
grammatical inference over provenance graphs. In Network
and Distributed Systems Security Symposium, 2018.
[34] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen,
Kangkook Jee, Zhichun Li, and Adam Bates. Nodoze: Com-
batting threat alert fatigue with automated provenance triage.
In NDSS, 2019.
[35] Kelly Jackson Higgins.
The rebirth of endpoint secu-
rity.
https://www.darkreading.com/%20endpoint/
the-rebirth-of-endpoint-security/d/d-id/1322775,
2015.
[36] Md Nahid Hossain, Sadegh M Milajerdi, Junao Wang,
Birhanu Eshete, Rigel Gjomemo, R Sekar, Scott Stoller, and
VN Venkatakrishnan. {SLEUTH}: Real-time attack scenario
reconstruction from {COTS} audit data. In 26th {USENIX}
Security Symposium ({USENIX} Security 17), pages 487–504,
2017.
[37] Md Nahid Hossain, Junao Wang, Oﬁr Weisse, R Sekar, Daniel
Genkin, Boyuan He, Scott D Stoller, Gan Fang, Frank Piessens,
Evan Downing, et al. Dependence-preserving data compaction
In 27th {USENIX} Security
for scalable forensic analysis.
Symposium ({USENIX} Security 18), pages 1723–1740, 2018.
[38] S Idreos, F Groffen, N Nes, S Manegold, S Mullender, and
M Kersten. Monetdb: Two decades of research in column-
oriented database. IEEE Data Engineering Bulletin, 2012.
[39] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia
Fazzini, Taesoo Kim, Alessandro Orso, and Wenke Lee. Rain:
Reﬁnable attack investigation with on-demand inter-process
information ﬂow tracking. In Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications Secu-
rity, pages 377–390, 2017.
[40] Vishal Karande, Erick Bauman, Zhiqiang Lin, and Latifur Khan.
Sgx-log: Securing system logs with sgx. In Proceedings of the
2017 ACM on Asia Conference on Computer and Communica-
tions Security, pages 19–30, 2017.
[41] Liran Katzir, Edo Liberty, and Oren Somekh. Estimating sizes
In Proceedings of
of social networks via biased sampling.
the 20th international conference on World wide web, pages
597–606, 2011.
[42] Samuel T King and Peter M Chen. Backtracking intrusions. In
Proceedings of the nineteenth ACM symposium on Operating
systems principles, pages 223–236, 2003.
[43] Yonghwi Kwon, Dohyeong Kim, William Nick Sumner,
Kyungtae Kim, Brendan Saltaformaggio, Xiangyu Zhang, and
Dongyan Xu. Ldx: Causality inference by lightweight dual
execution. In Proceedings of the Twenty-First International
Conference on Architectural Support for Programming Lan-
guages and Operating Systems, pages 503–515, 2016.
[44] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee,
Wen-Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu,
Somesh Jha, Gabriela F Ciocarlie, et al. Mci: Modeling-based
causality inference in audit logging for attack investigation. In
NDSS, 2018.
[45] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. Loggc:
garbage collecting audit log. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security,
pages 1005–1016. ACM, 2013.
[46] Bo Li, Phani Vadrevu, Kyu Hyung Lee, Roberto Perdisci,
Jienan Liu, Babak Rahbarinia, Kang Li, and Manos Anton-
akakis. Jsgraph: Enabling reconstruction of web attacks via
efﬁcient tracking of live in-browser javascript executions. In
NDSS, 2018.
[47] Fucheng Liu, Yu Wen, Dongxue Zhang, Xihe Jiang, Xinyu
Xing, and Dan Meng. Log2vec: A heterogeneous graph em-
bedding based approach for detecting cyber threats within en-
terprise. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security, pages 1777–1794,
2019.
USENIX Association
30th USENIX Security Symposium    3001
[48] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li,
Zhenyu Wu, Junghwan Rhee, and Prateek Mittal. Towards
a timely causality analysis for enterprise security. In NDSS,
2018.
[49] Shiqing Ma, Juan Zhai, Yonghwi Kwon, Kyu Hyung Lee, Xi-
angyu Zhang, Gabriela Ciocarlie, Ashish Gehani, Vinod Yeg-
neswaran, Dongyan Xu, and Somesh Jha. Kernel-supported
cost-effective audit logging for causality tracking. In 2018
{USENIX} Annual Technical Conference ({USENIX}{ATC}
18), pages 241–254, 2018.
[50] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu
Zhang, and Dongyan Xu. {MPI}: Multiple perspective attack
investigation with semantic aware execution partitioning. In
26th {USENIX} Security Symposium ({USENIX} Security 17),
pages 1111–1128, 2017.
[51] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. Protracer:
Towards practical provenance tracing by alternating between
logging and tainting. In NDSS, 2016.
[52] Antonio Maccioni and Daniel J Abadi. Scalable pattern match-
ing over compressed graphs via dedensiﬁcation. In Proceed-
ings of the 22nd ACM SIGKDD International Conference on