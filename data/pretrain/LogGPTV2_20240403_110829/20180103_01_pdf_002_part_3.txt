PointArrayProperty pointArrayProperty =
multiPoint.getPointMembers();
for (Point point : pointArrayProperty.getPoint())
pointList.add(point.toList3d());
}
if (!pointList.isEmpty()) {
String geomEWKT = "SRID=" + dbSrid + ";MULTIPOINT(";
for (List coordsList : pointList){
if (affineTransformation)
dbImporterManager.getAffineTransformer().
transformCoordinates(coordsList);
geomEWKT += coordsList.get(0) + " " +
coordsList.get(1) + " " +
coordsList.get(2) + ",";
}
geomEWKT = geomEWKT.substring(0, geomEWKT.length() - 1);
geomEWKT += ")";
multiPointGeom = new PGgeometry(
PGgeometry.geomFromString(geomEWKT));
}
}
return multiPointGeom;
}
223 // public JGeometry getCurve(AbstractCurve curve) {
rep // JGeometry curveGeom = null;
//
// if (curve != null) {
// List pointList = new ArrayList();
// generatePointList(curve, pointList, false);
// if (!pointList.isEmpty())
// curveGeom = JGeometry.createLinearLineString(
// toArray(pointList), 3, dbSrid);
// }
// return curveGeom;
// }
20
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
public PGgeometry getCurve(AbstractCurve curve) throws SQLException {
PGgeometry curveGeom = null;
if (curve != null) {
List pointList = new ArrayList();
generatePointList(curve, pointList, false);
if (!pointList.isEmpty()) {
String geomEWKT = "SRID=" + dbSrid + ";LINESTRING(";
for (int i=0; i> pointList = new ArrayList>();
//
// if (multiCurve.isSetCurveMember()) {
// for (CurveProperty curveProperty :
// multiCurve.getCurveMember()) {
// if (curveProperty.isSetCurve()) {
// AbstractCurve curve = curveProperty.getCurve();
// List points = new ArrayList();
// generatePointList(curve, points, false);
//
// if (!points.isEmpty())
// pointList.add(points);
// }
// }
// } else if (multiCurve.isSetCurveMembers()) {
// CurveArrayProperty curveArrayProperty =
// multiCurve.getCurveMembers();
// for (AbstractCurve curve :
// curveArrayProperty.getCurve()) {
// List points = new ArrayList();
// generatePointList(curve, points, false);
//
// if (!points.isEmpty())
// pointList.add(points);
// }
// }
//
// if (!pointList.isEmpty())
// multiCurveGeom = JGeometry.createLinearMultiLineString(
21
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// toObjectArray(pointList), 3, dbSrid);
// }
// return multiCurveGeom;
// }
public PGgeometry getMultiCurve(MultiCurve multiCurve) throws SQLException
{
PGgeometry multiCurveGeom = null;
if (multiCurve != null) {
List> pointList = new ArrayList>();
if (multiCurve.isSetCurveMember()) {
for (CurveProperty curveProperty : multiCurve.getCurveMember()){
if (curveProperty.isSetCurve()) {
AbstractCurve curve = curveProperty.getCurve();
List points = new ArrayList();
generatePointList(curve, points, false);
if (!points.isEmpty())
pointList.add(points);
}
}
} else if (multiCurve.isSetCurveMembers()) {
CurveArrayProperty curveArrayProperty =
multiCurve.getCurveMembers();
for (AbstractCurve curve : curveArrayProperty.getCurve()) {
List points = new ArrayList();
generatePointList(curve, points, false);
if (!points.isEmpty())
pointList.add(points);
}
}
if (!pointList.isEmpty()) {
String geomEWKT = "SRID=" + dbSrid + ";MULTILINESTRING((";
for (List coordsList : pointList) {
if (affineTransformation)
dbImporterManager.getAffineTransformer()
.transformCoordinates(coordsList);
for (int i = 0; i  coordsList : pointList) {
// Iterator iter = coordsList.iterator();
// int count = 0;
// while (iter.hasNext()) {
// iter.next();
//
// if (count++ == 2) {
// count = 0;
// iter.remove();
// }
// }
// }
// }
//
// int i = 0;
// for (List coordsList : pointList) {
// double[] coords = new double[coordsList.size()];
//
// int j = 0;
// for (Double coord : coordsList)
// coords[j++] = coord.doubleValue();
// pointArray[i++] = coords;
// }
// polygonGeom = JGeometry.createLinearPolygon(
// pointArray, dim, dbSrid);
// }
if (!pointList.isEmpty()) {
String geomEWKT="SRID=" + dbSrid + ";POLYGON((";
// int dim = is2d ? 2 : 3;
// if we have to return a 2d polygon we first have to correct the
// double lists we retrieved from citygml4j as they are always 3d
if (is2d) {
for (List coordsList : pointList) {
23
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
Iterator iter = coordsList.iterator();
int count = 0;
while (iter.hasNext()) {
iter.next();
if (count++ == 2) {
count = 0;
iter.remove();
}
}
}
}
for (List coordsList : pointList) {
for (int i=0; i ringLimits = new ArrayList();
// for (int i = 3; i =ringElem; j-=3, i+=3) {
// coords[i] = ordinatesArray[j];
// coords[i + 1] = ordinatesArray[j + 1];
// coords[i + 2] = ordinatesArray[j + 2];
// }
//
// pointArray[arrayIndex++] = coords;
// ringElem = ringLimit;
// }
//
// JGeometry geom = JGeometry.createLinearPolygon(PointArray,
// geomNode.geometry.getDimensions(),
// geomNode.geometry.getSrid());
//
// geomNode.geometry = geom;
// }
if (reverse) {
String geomEWKT = "SRID=" + geomNode.geometry.getSrid() +
";POLYGON((";
Polygon polyGeom = (Polygon) geomNode.geometry;
int dimensions = geomNode.geometry.getDimension();
for (int i = 0; i = 2) {
// Point referencePoint = new PointImpl();
// List value = new ArrayList();
// value.add(point[0]);
// value.add(point[1]);
PGgeometry pgGeom = (PGgeometry)rs.getObject("GT_REFERENCE_POINT");
if (!rs.wasNull() && pgGeom != null) {
Geometry geom = pgGeom.getGeometry();
Point referencePoint = new PointImpl();
List value = new ArrayList();
value.add(geom.getPoint(0).getX());
value.add(geom.getPoint(0).getY());
26
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
de.tub.citydb.modules.citygml.exporter.database.content.DBCityObject
163 // double[] points = geom.getMBR();
169 // if (geom.getDimension() == 2) {
// lower = new Point(points[0], points[1], 0);
// upper = new Point(points[2], points[3], 0);
// } else {
// lower = new Point(points[0], points[1], points[2]);
// upper = new Point(points[3], points[4], points[5]);
if (geom.getDimension() == 2) {
lower = new Point(geom.getFirstPoint().x, geom.getFirstPoint().y,0);
upper = new Point(geom.getPoint(2).x, geom.getPoint(2).y, 0);
} else {
lower = new Point(geom.getFirstPoint().x, geom.getFirstPoint().y,
geom.getFirstPoint().z);
upper = new Point(geom.getPoint(2).x, geom.getPoint(2).y,
geom.getPoint(2).z);
de.tub.citydb.modules.citygml.exporter.database.content.DBGeneralization
120 // double[] points = geom.getOrdinatesArray();
// Point lower = new Point(points[0], points[1], points[2]);
// Point upper = new Point(points[3], points[4], points[5]);
Point lower = new Point(geom.getFirstPoint().x, geom.getFirstPoint().y,
geom.getFirstPoint().z);
Point upper = new Point(geom.getPoint(2).x, geom.getPoint(2).y,
geom.getPoint(2).z);
de.tub.citydb.modules.citygml.exporter.database.content.DBStGeometry
95 // public Point getPoint(JGeometry geom, boolean setSrsName) {
// Point point = null;
//
// if (geom != null && geom.getType() == JGeometry.GTYPE_POINT) {
// int dimensions = geom.getDimensions();
// double[] pointCoord = geom.getPoint();
//
// if (pointCoord != null && pointCoord.length >=