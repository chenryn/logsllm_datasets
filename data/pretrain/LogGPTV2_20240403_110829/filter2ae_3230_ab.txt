                    if "Z_PARAM_RESOURCE" in x:
                        params.append("\033[39mRESOURCE")
                    if "Z_PARAM_STR" in x:
                        params.append("\033[35mSTRING")
                    if "Z_PARAM_CLASS" in x:
                        params.append("\033[37mCLASS")
                    if "Z_PARAM_PATH" in x:
                        params.append("\033[31mPATH")
                    if "Z_PARAM_OPTIONAL" in x:
                        params.append("\033[37mOPTIONAL")
                if len(params) == 0:
                    print("\033[31m\033[1mParameters not found. Try zifargs_old  or zifargs_error \033[0m")
                    return
                print("\033[1m"+' '.join(params) + "\033[0m")
        zifArgs()
以下是运行结果
    pwndbg: loaded 171 commands. Type pwndbg [filter] for a list.
    pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
    [+] Stupid GDB Helper for PHP loaded! (by @TheXC3LL)
    Reading symbols from php...done.
    pwndbg> zifargs md5
    STRING OPTIONAL BOOL
    pwndbg> zifargs time
    OPTIONAL LONG BOOL
每种方法都有缺点，这个天真的方法也会失败
    pwndbg> zifargs array_map
    CALLABLE
[array_map](http://php.net/manual/es/function.array-map.php)
函数第二个参数是数组，但是我们的脚本不能检测出来。
提取参数的另一种技术是解析PHP中某些函数存在的描述性错误信息。举例array_map 将会说明需要哪些参数。
    psyconauta@insulatergum:~/research/php/|
        ⇒  php -r 'array_map();'
        Warning: array_map() expects at least 2 parameters, 0 given in Command line code on line 1
如果我们把这两个参数设为字符串他会告警就会获得预期的参数类型
    psyconauta@insulatergum:~/research/php/
        ⇒  php -r 'array_map("aaa","bbb");'
        Warning: array_map() expects parameter 1 to be a valid callback, function 'aaa' not found or invalid function name in Command line code on line 1
所以我们可以使用这些错误信息来推断参数
  1. 在不使用参数的情况下调用这个函数
  2. 检查错误信息中 需要多少参数
  3. 使用strings 类型填充
  4. 解析告警中期望的参数类型
  5. 换成正确的参数类型
  6. 如果还有告警，重复4
我实现了另外一个破旧的GDB命令来执行这个任务
    # Don't let me use gdb when I am drunk
        # Sorry for this piece of code :(
        class zifArgsError(gdb.Command):
            "Tries to infer parameters from PHP errors"
            def __init__(self):
                super(zifArgsError, self).__init__("zifargs_error", gdb.COMMAND_SUPPORT, gdb.COMPLETE_NONE,True)
            def invoke(self, arg, from_tty):
                payload = ""
                file = open("/tmp/.zifargs", "w")
                file.write(payload)
                file.close()
                try:
                    output = str(subprocess.check_output("php /tmp/.zifargs 2>&1", shell=True))
                except:
                    print("\033[31m\033[1mFunction " + arg + " not defined!\033[0m")
                    return
                try:
                    number = output[output.index("at least ")+9:output.index("at least ")+10]
                except:
                    number = output[output.index("exactly ")+8:output.index("exactly")+9]
                print("\033[33m\033[1m" + arg+ "(\033[31m" + number + "\033[33m): \033[0m")
                params = []
                infered = []
                i = 0
                while True:
                    payload = ""
                    file = open("/tmp/.zifargs", "w")
                    file.write(payload)
                    file.close()
                    output = str(subprocess.check_output("php /tmp/.zifargs 2>&1", shell=True))
                    #print(output)
                    if "," in output:
                        separator = ","
                    elif " file " in output:
                        params[i] = "/etc/passwd" # Don't run this as root, for the god sake.
                        infered.append("\033[31mPATH")
                        i +=1
                    elif " in " in output:
                        separator = " in "
                    try:
                        dataType = output[:output.rindex(separator)]
                        dataType = dataType[dataType.rindex(" ")+1:].lower()
                        if dataType == "array":
                            params[i] = "array('a')"
                            infered.append("\033[31mARRAY")
                        if dataType == "callback":
                            params[i] = "'var_dump'"
                            infered.append("\033[33mCALLABLE")
                        if dataType == "int":
                            params[i] = "1337"
                            infered.append("\033[36mINTEGER")
                        i += 1
                        #print(params)
                    except:
                        if len(infered) > 0:
                            print("\033[1m" + ' '.join(infered) + "\033[0m")
                            return
                        else:
                            print("\033[31m\033[1mCould not retrieve parameters from " + arg + "\033[0m")
                            return
对array_map 使用的结果
    pwndbg> zifargs_error array_map
        array_map(2):
        CALLABLE ARRAY
到目前为止，我们解释了可以组合使用的不同技术，以自动获得
运行每个PHP函数所需的正确参数。正如我前面所说的，这种技术也可以用于fuzzing，以便达到其他的代码段，或者运行忽略的fuzzing实例。  
现在让我们看看如何使用收集到的信息。
## 开始分析跟踪结果
获得跟踪的最简单方法是使用知名工具，如strace和ltrace。只需几行bash，我们就可以使用函数名和参数
解析上一步中生成的日志，运行跟踪程序并将日志保存到文件中。让我们分析mail()函数生成的日志，例如:
    ⇒  strace -f /usr/bin/php -r 'mail("aaa","aaa","aaa","aaa");' 2>&1 | grep exe
        execve("/usr/bin/php", ["/usr/bin/php", "-r", "mail(\"aaa\",\"aaa\",\"aaa\",\"aaa\");"], [/* 28 vars */]) = 0
        [pid   471] execve("/bin/sh", ["sh", "-c", "/usr/sbin/sendmail -t -i "], [/* 28 vars */] 
        [pid   471]  )      = 0
        [pid   472] execve("/usr/sbin/sendmail", ["/usr/sbin/sendmail", "-t", "-i"], [/* 28 vars */]) = -1 ENOENT (No such file or directory)
你看到了吗，sendmail中使用了execve，这说明这个参数可以被用来bypass绕过 disable_functions
。只要我们被允许使用putenv 去控制LD_PRELOAD。事实上，这只是
[CHANKRO](https://github.com/TarlogicSecurity/Chankro)
的工作方式，如果我们能够设置环境变量，我们就可以 设置 LD_PRELOAD在调用外部二进制文件时
去加载恶意文件，只需要运行脚本，等待，并执行一些greps 来检测调用情况。
## 结束语
自动化参数提取可能有点棘手，所以我决定写这篇文章来贡献我的一点经验。几个月前，我阅读了[这篇文章]  
( zend_parse_parameters，我想为 PHP internals
的新手完善更多这方面的信息。其中 imap_open()漏洞是编写主题为 **:)** 的完美借口。
如果你觉得这篇文章很有用，或者想指出我的错误或排版错误，请随时在twitter上联系我[@TheXC3LL](https://twitter.com/TheXC3LL)