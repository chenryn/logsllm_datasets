    [    0xb1] | POP                  | None
    [    0xb2] | PUSH2                | ['0x7b']
    [    0xb5] | PUSH2                | ['0x116']
    [    0xb8] | JUMP                 | None
    ; 0x116: loc_116
    [   0x116] | JUMPDEST             | None
    [   0x117] | PUSH1                | ['0x0']
    [   0x119] | SLOAD                | None
    [   0x11a] | PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    [   0x12f] | AND                  | None
    [   0x130] | DUP2                 | None
    [   0x131] | JUMP                 | None
    ; 0x7B: loc_7b
    [    0x7b] | JUMPDEST             | None
    [    0x7c] | PUSH1                | ['0x40']
    [    0x7e] | DUP1                 | None
    [    0x7f] | MLOAD                | None
    [    0x80] | PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    [    0x95] | SWAP1                | None
    [    0x96] | SWAP3                | None
    [    0x97] | AND                  | None
    [    0x98] | DUP3                 | None
    [    0x99] | MSTORE               | None
    [    0x9a] | MLOAD                | None
    [    0x9b] | SWAP1                | None
    [    0x9c] | DUP2                 | None
    [    0x9d] | SWAP1                | None
    [    0x9e] | SUB                  | None
    [    0x9f] | PUSH1                | ['0x20']
    [    0xa1] | ADD                  | None
    [    0xa2] | SWAP1                | None
    [    0xa3] | RETURN               | None
所以我们可以得出结论:
    address public a;
    会被编译成(==)
    function a() public returns (address) {
        return a;
    }
    #
    address private a;
    function c() public returns (address) {
        return a;
    }
    等同于下面的变量定义(≈)
    address public c;
公有函数和私有函数的区别也很简单，公有函数会被编译进主函数中，能通过`CALLDATA`进行调用，而私有函数则只能在其他公有函数中进行调用，无法直接通过设置`CALLDATA`来调用私有函数
##### 回退函数和payable
在智能合约中，函数都能设置一个`payable`，还有一个特殊的回退函数，下面用实例来介绍回退函数
比如之前的测试合约加上了回退函数:
    function() {
        prize += 1;
    }
则主函数的反编译代码就变成了:
    def main():
        if CALLDATASIZE >= 4:
            data = CALLDATA[:4]
            if data == 0x6b59084d:
                return test1()
            elif data == 0x8da5cb5b:
                return owner()
            elif data == 0xcaf44683:
                return test2()
            elif data == 0xe3ac5d26:
                return prize()
        assert msg.value == 0
        prize += 1
        exit()
当`CALLDATA`和该合约中的函数匹配失败时，将会从抛异常，表示执行失败退出，变成调用回退函数
每一个函数，包括回退函数都可以加一个关键字:
`payable`，表示可以给该函数转帐，从OPCODE层面讲，没有`payable`关键字的函数比有`payable`的函数多了一段代码:
    JUMPDEST             | None
    CALLVALUE            | None
    DUP1                 | None
    ISZERO               | None
    PUSH2                | ['0x8e']
    JUMPI                | None
    PUSH1                | ['0x0']
    DUP1                 | None
    REVERT               | None
反编译成python，就是:
    assert msg.value == 0
`REVERT`是异常退出指令，当交易的金额大于0时，则异常退出，交易失败
##### 函数参数
函数获取数据的方式只有两种，一个是从storage中获取数据，另一个就是接受用户传参，当函数hash表匹配成功时，我们可以知道该函数的参数个数，和各个参数的类型，但是当hash表匹配失败时，我们仍然可以获取该函数参数的个数，因为获取参数和主函数、`payable`检查一样，在OPCODE层面也有固定模型:
比如上面的测试合约，调动`test2`函数的固定模型就是: `main -> payable check -> get args -> 执行函数代码`
获取参数的OPCODE如下
    ; 0xAF: loc_af
    [    0xaf] | JUMPDEST             | None
    [    0xb0] | POP                  | None
    [    0xb1] | PUSH2                | ['0xd1']
    [    0xb4] | PUSH20               | ['0xffffffffffffffffffffffffffffffffffffffff']
    [    0xc9] | PUSH1                | ['0x4']
    [    0xcb] | CALLDATALOAD         | None
    [    0xcc] | AND                  | None
    [    0xcd] | PUSH2                | ['0x18f']
    [    0xd0] | JUMP                 | None
函数test2的参数`p = CALLDATA[4:4+0x20]`
如果有第二个参数，则是`arg2 = CALLDATA[4+0x20:4+0x40]`，以此类推
所以智能合约中，调用函数的规则就是`data = sha3(func_name)[:4] + *args`
但是，上面的规则仅限于定长类型的参数，如果参数是`string`这种不定长的变量类型时，固定模型仍然不变，但是在从`calldata`获取数据的方法，变得不同了，定长的变量是通过调用`CALLDATALOAD`，把值存入栈中，而`string`类型的变量，因为长度不定，会超过256bits的原因，使用的是`calldatacopy`把参数存入MEM
可以看看`function test3(string a) public {}`函数获取参数的代码:
    ; 0xB2: loc_b2
    [    0xb2] | JUMPDEST             | None
    [    0xb3] | POP                  | None
    [    0xb4] | PUSH1                | ['0x40']
    [    0xb6] | DUP1                 | None
    [    0xb7] | MLOAD                | None
    [    0xb8] | PUSH1                | ['0x20']
    [    0xba] | PUSH1                | ['0x4']
    [    0xbc] | DUP1                 | None
    [    0xbd] | CALLDATALOAD         | None
    [    0xbe] | DUP1                 | None
    [    0xbf] | DUP3                 | None
    [    0xc0] | ADD                  | None
    [    0xc1] | CALLDATALOAD         | None
    [    0xc2] | PUSH1                | ['0x1f']
    [    0xc4] | DUP2                 | None
    [    0xc5] | ADD                  | None
    [    0xc6] | DUP5                 | None
    [    0xc7] | SWAP1                | None
    [    0xc8] | DIV                  | None
    [    0xc9] | DUP5                 | None
    [    0xca] | MUL                  | None
    [    0xcb] | DUP6                 | None
    [    0xcc] | ADD                  | None
    [    0xcd] | DUP5                 | None
    [    0xce] | ADD                  | None
    [    0xcf] | SWAP1                | None
    [    0xd0] | SWAP6                | None
    [    0xd1] | MSTORE               | None
    [    0xd2] | DUP5                 | None
    [    0xd3] | DUP5                 | None
    [    0xd4] | MSTORE               | None
    [    0xd5] | PUSH2                | ['0xff']
    [    0xd8] | SWAP5                | None
    [    0xd9] | CALLDATASIZE         | None
    [    0xda] | SWAP5                | None
    [    0xdb] | SWAP3                | None
    [    0xdc] | SWAP4                | None
    [    0xdd] | PUSH1                | ['0x24']
    [    0xdf] | SWAP4                | None
    [    0xe0] | SWAP3                | None
    [    0xe1] | DUP5                 | None
    [    0xe2] | ADD                  | None
    [    0xe3] | SWAP2                | None
    [    0xe4] | SWAP1                | None
    [    0xe5] | DUP2                 | None
    [    0xe6] | SWAP1                | None
    [    0xe7] | DUP5                 | None
    [    0xe8] | ADD                  | None