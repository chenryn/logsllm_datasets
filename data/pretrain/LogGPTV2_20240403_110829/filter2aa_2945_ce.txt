### Download from finelybook PI:EMAIL
#### 730
To select specific properties from an enumerable collection, you can use the `Select` method with a lambda expression. For example:

```csharp
var customerFirstNames = customers.Select(cust => cust.FirstName);
```

Alternatively, you can use the `from` and `select` query operators. For example:

```csharp
var customerFirstNames = from cust in customers
                         select cust.FirstName;
```

#### Filter Rows from an Enumerable Collection

To filter rows from an enumerable collection, use the `Where` method with a lambda expression that specifies the criteria. For example:

```csharp
var usCompanies = addresses
    .Where(addr => String.Equals(addr.Country, "United States"))
    .Select(usComp => usComp.CompanyName);
```

You can also use the `where` query operator. For example:

```csharp
var usCompanies = from addr in addresses
                  where String.Equals(addr.Country, "United States")
                  select addr.CompanyName;
```

#### Enumerate Data in a Specific Order

To enumerate data in a specific order, use the `OrderBy` method with a lambda expression that identifies the field to order by. For example:

```csharp
var companyNames = addresses
    .OrderBy(addr => addr.CompanyName)
    .Select(comp => comp.CompanyName);
```

Alternatively, you can use the `orderby` query operator. For example:

```csharp
var companyNames = from a in addresses
                   orderby a.CompanyName
                   select a.CompanyName;
```

#### Group Data by the Values in a Field

To group data by the values in a field, use the `GroupBy` method with a lambda expression that identifies the field to group by. For example:

```csharp
var companiesGroupedByCountry = addresses
    .GroupBy(addr => addr.Country);
```

You can also use the `group by` query operator. For example:

```csharp
var companiesGroupedByCountry = from a in addresses
                                group a by a.Country;
```

#### Join Data Held in Two Different Collections

To join data held in two different collections, use the `Join` method, specifying the collection to join, the join criteria, and the fields for the result. For example:

```csharp
var countriesAndCustomers = customers
    .Select(c => new { c.FirstName, c.LastName, c.CompanyName })
    .Join(addresses, custs => custs.CompanyName,
          addrs => addrs.CompanyName,
          (custs, addrs) => new { custs.FirstName, custs.LastName, addrs.Country });
```

Alternatively, you can use the `join` query operator. For example:

```csharp
var countriesAndCustomers = from a in addresses
                            join c in customers on a.CompanyName equals c.CompanyName
                            select new { c.FirstName, c.LastName, a.Country };
```

#### Force Immediate Generation of the Results for a LINQ Query

To force immediate generation of the results for a LINQ query, use the `ToList` or `ToArray` method. For example:

```csharp
var allEmployees = empTree.ToList();
```

### CHAPTER 22: Operator Overloading

After completing this chapter, you will be able to:
- Implement binary operators for your own types.
- Implement unary operators for your own types.
- Write increment and decrement operators for your own types.
- Understand the need to implement some operators as pairs.
- Implement implicit conversion operators for your own types.
- Implement explicit conversion operators for your own types.

The examples throughout this book make great use of the standard operator symbols (such as `+` and `-`) to perform standard operations (such as addition and subtraction) on types (such as `int` and `double`). Many of the built-in types come with their own predefined behaviors for each operator. You can also define how operators should behave in your own structures and classes, which is the subject of this chapter.

#### Understanding Operators

Before delving into the details of how operators work and how you can overload them, it is worth recapping some of the fundamental aspects of operators. The following list summarizes these aspects:
- You use operators to combine operands into expressions. Each operator has its own semantics, dependent on the type with which it works. For example, the `+` operator means "add" when used with numeric types or "concatenate" when used with strings.
- Each operator has a precedence. For example, the `*` operator has a higher precedence than the `+` operator. This means that the expression `a + b * c` is the same as `a + (b * c)`.
- Each operator also has an associativity that defines whether the operator evaluates from left to right or from right to left. For example, the `=` operator is right-associative (it evaluates from right to left), so `a = b = c` is the same as `a = (b = c)`.
- A unary operator is an operator that has just one operand. For example, the increment operator (`++`) is a unary operator.
- A binary operator is an operator that has two operands. For example, the multiplication operator (`*`) is a binary operator.

#### Operator Constraints

This book presents many examples of how with C# you can overload methods when defining your own types. With C#, you can also overload many of the existing operator symbols for your own types, although the syntax is slightly different. When you do this, the operators you implement automatically fall into a well-defined framework with the following rules:
- You cannot change the precedence and associativity of an operator. Precedence and associativity are based on the operator symbol (for example, `+`) and not on the type (for example, `int`) on which the operator symbol is being used. Hence, the expression `a + b * c` is always the same as `a + (b * c)` regardless of the types of `a`, `b`, and `c`.
- You cannot change the multiplicity (the number of operands) of an operator. For example, `*` (the symbol for multiplication) is a binary operator. If you declare a `*` operator for your own type, it must be a binary operator.
- You cannot invent new operator symbols. For example, you can’t create an operator symbol such as `**` for raising one number to the power of another number. You’d have to define a method to do that.
- You can’t change the meaning of operators when they are applied to built-in types. For example, the expression `1 + 2` has a predefined meaning, and you’re not allowed to override this meaning. If you could do this, things would be too complicated.
- There are some operator symbols that you can’t overload. For example, you can’t overload the dot (`.`) operator, which indicates access to a class member. Again, if you could do this, it would lead to unnecessary complexity.

**Tip:** You can use indexers to simulate `[ ]` as an operator. Similarly, you can use properties to simulate assignment (`=`) as an operator, and you can use delegates to mimic a function call as an operator.

#### Overloaded Operators

To define your own operator behavior, you must overload a selected operator. You use method-like syntax with a return type and parameters, but the name of the method is the keyword `operator` together with the operator symbol you are declaring. For example, the following code shows a user-defined structure named `Hour` that defines a binary `+` operator to add together two instances of `Hour`.

```csharp
struct Hour
{
    public Hour(int initialValue) => this.value = initialValue;

    public static Hour operator +(Hour lhs, Hour rhs) => new Hour(lhs.value + rhs.value);

    private int value;
}
```

Notice the following:
- The operator is `public`. All operators must be `public`.
- The operator is `static`. All operators must be `static`. Operators are never polymorphic and cannot use the `virtual`, `abstract`, `override`, or `sealed` modifiers.
- A binary operator (such as the `+` operator shown in this example) has two explicit arguments, and a unary operator has one explicit argument. (C++ programmers should note that operators never have a hidden `this` parameter.)

**Tip:** When you declare highly stylized functionality (such as operators), it is useful to adopt a naming convention for the parameters. For example, developers often use `lhs` and `rhs` (acronyms for left-hand side and right-hand side, respectively) for binary operators.

When you use the `+` operator on two expressions of type `Hour`, the C# compiler automatically converts your code to a call to your `operator +` method. The C# compiler transforms this code:

```csharp
Hour Example(Hour a, Hour b) => a + b;
```

to this:

```csharp
Hour Example(Hour a, Hour b) => Hour.operator +(a, b); // pseudocode
```

Note, however, that this syntax is pseudocode and not valid C#. You can use a binary operator only in its standard infix notation (with the symbol between the operands).

There is one final rule that you must follow when declaring an operator: at least one of the parameters must always be of the containing type. In the preceding `operator+` example for the `Hour` class, one of the parameters, `a` or `b`, must be an `Hour` object. In this example, both parameters are `Hour` objects. However, there could be times when you want to define additional implementations of `operator+` that add, for example, an integer (a number of hours) to an `Hour` object—the first parameter could be `Hour`, and the second parameter could be the integer. This rule makes it easier for the compiler to know where to look when trying to resolve an operator invocation, and it also ensures that you can’t change the meaning of the built-in operators.

#### Creating Symmetric Operators

In the preceding section, you saw how to declare a binary `+` operator to add together two instances of type `Hour`. The `Hour` structure also has a constructor that creates an `Hour` from an `int`. This means that you can add together an `Hour` and an `int`; you just have to first use the `Hour` constructor to convert the `int` to an `Hour`, as in the following example:

```csharp
Hour a = ...;
int b = ...;
Hour later = a + new Hour(b);
```

This is certainly valid code, but it is not as clear or concise as adding an `Hour` and an `int` directly, like this:

```csharp
Hour a = ...;
int b = ...;
Hour later = a + b;
```

To make the expression `(a + b)` valid, you must specify what it means to add together an `Hour` (a, on the left) and an `int` (b, on the right). In other words, you must declare a binary `+` operator whose first parameter is an `Hour` and whose second parameter is an `int`. The following code shows the recommended approach:

```csharp
struct Hour
{
    public Hour(int initialValue) => this.value = initialValue;

    public static Hour operator +(Hour lhs, Hour rhs) => new Hour(lhs.value + rhs.value);

    public static Hour operator +(Hour lhs, int rhs) => lhs + new Hour(rhs);

    private int value;
}
```

Notice that all the second version of the operator does is construct an `Hour` from its `int` argument and then call the first version. In this way, the real logic behind the operator is held in a single place. The point is that the extra `operator+` simply makes existing functionality easier to use. Also, notice that you should not provide many different versions of this operator, each with a different second parameter type; instead, cater to the common and meaningful cases only, and let the user of the class take any additional steps if an unusual case is required.

This `operator+` declares how to add together an `Hour` as the left operand and an `int` as the right operand. It does not declare how to add together an `int` as the left operand and an `Hour` as the right operand:

```csharp
int a = ...;
Hour b = ...;
Hour later = a + b; // compile-time error
```

This is counterintuitive. If you can write the expression `a + b`, you expect also to be able to write `b + a`. Therefore, you should provide another overload of `operator+`:

```csharp
struct Hour
{
    public Hour(int initialValue) => this.value = initialValue;

    public static Hour operator +(Hour lhs, int rhs) => lhs + new Hour(rhs);

    public static Hour operator +(int lhs, Hour rhs) => new Hour(lhs) + rhs;

    private int value;
}
```

**Note:** C++ programmers should notice that you must provide the overload yourself. The compiler won’t write the overload for you or silently swap the sequence of the two operands to find a matching operator.

#### Operators and Language Interoperability

Not all languages that execute using the common language runtime (CLR) support or understand operator overloading. If you overload an operator, you should provide an alternative mechanism that implements the same functionality to enable the class to be used from languages that do not support operator overloading. For example, suppose that you implement `operator+` for the `Hour` structure, as is illustrated here:

```csharp
public static Hour operator +(Hour lhs, int rhs)
{
    ...
}
```

If you need to be able to use your class from a Microsoft Visual Basic application, you should also provide an `Add` method that achieves the same thing, as demonstrated here:

```csharp
public static Hour Add(Hour lhs, int rhs)
{
    ...
}
```

#### Understanding Compound Assignment Evaluation

A compound assignment operator (such as `+=`) is always evaluated in terms of its associated simple operator (such as `+`). In other words, the statement

```csharp
a += b;
```

is automatically evaluated like this:

```csharp
a = a + b;
```

In general, the expression `a @= b` (where `@` represents any valid operator) is always evaluated as `a = a @ b`. If you have overloaded the appropriate simple operator, the overloaded version is automatically called when you use its associated compound assignment operator, as is shown in the following example:

```csharp
Hour a = ...;
int b = ...;
a += a; // same as a = a + a
a += b; // same as a = a + b
```

The first compound assignment expression (`a += a`) is valid because `a` is of type `Hour`, and the `Hour` type declares a binary `operator+` whose parameters are both `Hour`. Similarly, the second compound assignment expression (`a += b`) is also valid because `a` is of type `Hour` and `b` is of type `int`. The `Hour` type also declares a binary `operator+` whose first parameter is an `Hour` and whose second parameter is an `int`. Be aware, however, that you cannot write the expression `b += a` because that’s the same as `b = b + a`. Although the addition is valid, the assignment is not, because there is no way to assign an `Hour` to the built-in `int` type.

#### Declaring Increment and Decrement Operators

With C#, you can declare your own version of the increment (`++`) and decrement (`--`) operators. The usual rules apply when declaring these operators: they must be `public`, they must be `static`, and they must be unary (they can take only a single parameter). Here is the increment operator for the `Hour` structure:

```csharp
struct Hour
{
    ...

    public static Hour operator ++(Hour arg)
    {
        arg.value++;
        return arg;
    }

    ...

    private int value;
}
```

The increment and decrement operators are unique in that they can be used in prefix and postfix forms. C# cleverly uses the same single operator for both the prefix and postfix versions. The result of a postfix expression is the value of the operand before the expression takes place. In other words, the compiler effectively converts the code

```csharp
Hour now = new Hour(9);
Hour postfix = now++;
```

to this:

```csharp
Hour now = new Hour(9);
Hour postfix = now;
now = Hour.operator ++(now); // pseudocode, not valid C#
```

The result of a prefix expression is the return value of the operator, so the C# compiler effectively transforms the code

```csharp
Hour now = new Hour(9);
Hour prefix = ++now;
```

to this:

```csharp
Hour now = new Hour(9);
now = Hour.operator ++(now); // pseudocode, not valid in C#
Hour prefix = now;
```

This equivalence means that the return type of the increment and decrement operators must be the same as the parameter type.

#### Comparing Operators in Structures and Classes

Be aware that the implementation of the increment operator in the `Hour` structure works only because `Hour` is a structure. If you change `Hour` into a class but leave the implementation of its increment operator unchanged, you will find that the postfix translation won’t give the correct answer. If you remember that a class is a reference type, and if you revisit the compiler translations explained earlier, you can see in the following example why the operators for the `Hour` class no longer function as expected:

```csharp
Hour now = new Hour(9);
Hour postfix = now;
now = Hour.operator ++(now); // pseudocode, not valid C#
```

If `Hour` is a class, the assignment statement `postfix = now` makes the variable `postfix` refer to the same object as `now`. Updating `now` automatically updates `postfix`! If `Hour` is a structure, the assignment statement makes a copy of `now` in `postfix`, and any changes to `now` leave `postfix` unchanged, which is what you want.

The correct implementation of the increment operator when `Hour` is a class is as follows:

```csharp
class Hour
{
    public Hour(int initialValue) => this.value = initialValue;

    public static Hour operator ++(Hour arg) => new Hour(arg.value + 1);

    private int value;
}
```

Notice that `operator ++` now creates a new object based on the data in the original. The data in the new object is incremented, but the data in the original is left unchanged. Although this works, the compiler translation of the increment operator results in a new object being created each time it is used. This can be expensive in terms of memory use and garbage-collection overhead. Therefore, it is recommended that you limit operator overloads when you define types. This recommendation applies to all operators, not just to the increment operator.

#### Defining Operator Pairs

Some operators naturally come in pairs. For example, if you can compare two `Hour` values by using the `!=` operator, you would expect to be able to also compare two `Hour` values by using the `==` operator. The C# compiler enforces this very reasonable expectation by insisting that if you define either `operator ==` or `operator !=`, you must define them both. This neither-or-both rule applies to other pairs of operators as well, such as `>`, `<`, `>=`, and `<=`.