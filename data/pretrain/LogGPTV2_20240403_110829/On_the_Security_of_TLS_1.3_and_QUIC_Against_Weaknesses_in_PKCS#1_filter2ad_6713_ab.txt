We consider a client that accepts only TLS_ECDHE_RSA cipher
suites. This provides essentially the conditions required to analyze
the attack principle described above.
In order to simulate a vulnerability of the TLS_RSA cipher suite,
we patched the OpenSSL 1.0.2 TLS implementation,4 such that
it becomes vulnerable to an adoption of Manger’s attack [25] to
PKCS#1 v1.5 encryption, which is a very efﬁcient “Bleichenbacher-
type” attack. The man-in-the-middle attacker is written in Java 7.
We tested the attack with different web browsers (including Mi-
crosoft’s Internet Explorer 11 on Windows 7, Apple’s Safari 7.1.3
on OS X 10.9.5, and Firefox 35 and Google Chrome 39 on Ubuntu
Linux 14.04. We also tested the OpenSSL TLS client (used, for
instance, in machine-to-machine TLS communication) on Ubuntu
Linux 14.04.
The experimental results show that the attack can be performed
within 30 seconds (for 1024 bit moduli). While this appears very
practical, we caution that our analysis is based on a modiﬁed
OpenSSL server S that provides a very strong, “ideal” oracle that
allows one to distinguish valid from invalid ciphertexts. For in-
stance, the recent Bleichenbacher-attacks of Meyer et al. [28] take
at least about 20 hours. Thus, these attacks should not (yet) be
considered practical.
For QUIC the situation is completely different, because in this
case the Bleichenbacher-attack can be executed long before the vic-
tim client initiates a session, which makes the attack truly practical
even if it requires 20 hours (or more) of precomputation.
The difﬁculty of preventing this attack. A ﬁrst obvious solution
would be to either deactivate previous TLS versions, or at least the
vulnerable cipher suites in these versions. However, the former will
usually not be possible, because server operators may want to keep
older cipher suites for compatibility with older clients. The latter is
not possible without breaking standard-conformance, because the
only mandatory-to-implement cipher suites in TLS 1.1 and 1.2 are
based on PKCS#1 v1.5-encrypted key transport. Moreover, certain
important browsers (in particular legacy browsers) may possibly
not implement QUIC. Thus, the need for backwards compatibility
and interoperability in practice makes it impossible to employ these
countermeasures.
4OpenSSL 1.0.2 (22-Jan-2015), www.openssl.org
TLS-(EC)DHE  (TLS 1.3)TLSClientTLSClientMITMServerMITMServerTLSServerTLSServerBleichenbacher / Manger AttackTLS-RSA (TLS 1.2)ClientHello ServerHelloCertificateServerHelloDoneClientKeyExchangeAlert / No AlertClientKeyShareServerHelloServerKeyShareCertificateVerifyClientHello (Client-) Finished(Server-) FinishedCertificateClientHello ServerHelloCertificateServerHelloDoneClientKeyExchangeAlert / No Alert...sigsig C C S S A AMoreover, note that the attack is based on the assumption that the
server uses the same RSA-certiﬁcate in TLS 1.3/QUIC as in older
TLS versions, and cipher suites with either RSA encryption or RSA
signatures. One generic and cryptographically clean approach for
preventing this attack is therefore to enforce key separation, that
is, to use different keys (and thus different certiﬁcates) for differ-
ent cipher suites and protocol versions. While this is in theory the
cleanest solution, it has many drawbacks that make it impractical.
First of all, note that basic X.509 RSA certiﬁcates do not contain
any information for which algorithm (or TLS version or TLS cipher
suite) they shall be used. Thus, even if a server uses a different RSA
certiﬁcate in TLS 1.3 or QUIC than in other protocol versions, a
client would not be able to tell whether a given certiﬁcate really
belongs to version 1.3. Thus, an attacker would be able to use the
certiﬁcate from the earlier TLS version in a TLS 1.3/QUIC session
with the client, which circumvents the key separation intended by
the server.
The best practical solution is to use different keys for encryption
and signature veriﬁcation. X.509 certiﬁcates contain a key usage
extension ﬁeld, which can be used to indicate that a given certiﬁ-
cate can be used only for encryption, or only for signing, etc. Thus,
a server operator may use a “sign-only” RSA certiﬁcate for TLS
1.3/QUIC, and an “encrypt-only” certiﬁcate for previous TLS ver-
sions. A technical hurdle for realizing key separation in TLS is
that there is no obvious way to conﬁgure the popular TLS server
implementation OpenSSL (also used in Apache’s mod_ssl, for
instance) such that different RSA certiﬁcates are used for differ-
ent TLS versions or different cipher suite families. Moreover, the
popular web server nginx allows one to deploy only a single cer-
tiﬁcate. This makes it difﬁcult for users to realize key separation.
Finally, note that any solution that requires the server to use
multiple different certiﬁcates leads to a more complex (and thus
more error-prone) server conﬁguration and higher costs, in particu-
lar when expensive extended validation certiﬁcates are used. Many
server operators may want to avoid this.
Generality of the attack principle. We note that a similar attack
would work for any protocol whose security is based on RSA signa-
tures, under the same preconditions that we require for our attacks
on TLS 1.3 and QUIC. Thus, TLS 1.3 and QUIC can be seen as
particular case studies, which demonstrate the practical relevance
of the more general attack principle. The core idea behind the at-
tack presented in this paper can be seen as a corollary of the attacks
presented in [17, 28]. The main novelty is the application to TLS
1.3 and QUIC.
Note that the attack on QUIC is much more efﬁcient than the
attack on TLS 1.3, due to the subtle difference that QUIC allows
the server to use the same signature for many protocol sessions,
while TLS 1.3 requires to compute the signatures over the random
nonces chosen by both communicating parties, which requires a
fresh signature for each protocol session, which makes the attack
less efﬁcient and therefore less practical. Thus, protocols of the
latter type can be seen as more “robust” against this type of attacks,
which we consider as an interesting insight.
2. RELATED WORK
In 1996, Wagner and Schneier described the ﬁrst cross-protocol
attack on TLS [33] (called “key exchange algorithm rollback at-
tack” in this paper). The authors made the observation that the
digital signature over a key exchange message in TLS does not
cover the negotiated cipher suite. This enabled an attacker to take
a signed key exchange message from a previous TLS_DHE_RSA
connection, and let a client interpret it as a TLS_RSA_EXPORT
key exchange message. Wagner and Schneier explain that a TLS
client misinterpreting the TLS_DHE_RSA parameters as crypto-
graphically weak TLS_RSA_EXPORT parameters could be vul-
nerable to a man-in-the-middle attack. However, this attack was
described only theoretically and never applied in practice against
a real TLS client. The main problem is that the number of pa-
rameters used for TLS_DHE_RSA and TLS_RSA_EXPORT cipher
suites differ, which makes the signature invalid. A more precise
analysis is given in [26].
At ACM CCS 2012, Mavrogiannopoulos et al. [26] described a
cross-protocol attack on TLS which reﬁnes the idea of Wagner and
Schneier [33]. The authors considered a combination of TLS_DHE
and TLS_ECDHE cipher suites, and showed the possibility that
a TLS client accepts a TLS_ECDHE key exchange message in a
TLS_DHE connection. This was used to let the client misinterpret
ECDHE parameters as cryptographically weak DHE parameters,
which in turn may give rise to a man-in-the-middle attack. Because
of the strictly-speciﬁed structure of key exchange messages for the
considered cipher suites, the analysis in [26] showed that an at-
tacker would needed about 240 signed server messages to execute
a TLS man-in-the-middle attack with reasonable probability. This
makes the attack rather impractical (the authors estimate that exe-
cuting the attack in their setup would take about 9 years). Never-
theless, both previously known cross-protocol attacks on TLS [33,
26] give interesting insights into the difﬁculty of secure protocol
design in practice.
In comparison, the performance of our attack depends on the
availability of an oracle that allows the attacker to distinguish valid
from invalid PKCS#1 v1.5 ciphertexts. In an ideal (but currently
hypothetical) case, the attack could be performed in less than 30
seconds (see Section 7). In more realistic cases, based on previ-
ously published Bleichenbacher-attacks [28, 36], our attack would
take several hours. Thus, like previous works [33, 26], the practical
impact of our attack on TLS is (currently) rather limited. However,
it provides another interesting insight into the difﬁculty of secure
protocol design in practice, in particular on the difﬁculty of enforc-
ing key separation in practice and its potential effect on the secu-
rity of protocols. Moreover, note that both previous cross-protocol
attacks [33, 26] are based on the fact that the signature in TLS ver-
sions prior to 1.3 did not provide a sufﬁcient binding among crypto-
graphic parameters and used algorithms in key exchange messages.
This changes with TLS 1.3, where the signature protects not only
the cryptographic parameters, but also the negotiated cipher suite.
This makes both previous attacks impossible. Note also that re-
silience against cross-protocol attacks is an explicit goal of TLS
1.3,5 and the protocol has been designed to protect against known
attacks of this type [33, 26].
It is a well-known fact in cryptographic theory that using the
same key with both a weak algorithm and a secure algorithm may
force the secure algorithm to inherit the weaknesses of the weaker
algorithm, and therefore the principle of key separation (i.e., us-
ing different keys for different algorithms) should be enforced. For
example, the fact that the need for backwards compatibility may
lead to attacks was also pointed out in [17], which used the fact
that a vulnerable implementation of PKCS#1 v1.5 encryption gives
rise to a “signing oracle” to attack XML-based Web Services. A
different variant was explored in [9] in the context of EMV sig-
natures, but the overall principle was already mentioned in Ble-
ichenbacher’s original paper [7]. Our attacks extend this concept
to novel protocols of extremely high practical importance, namely
TLS 1.3 and QUIC. Moreover, they demonstrate the difﬁculty of
5See
slides/slides-87-tls-5.pdf.
http://www.ietf.org/proceedings/87/
enforcing proper key separation in practice, and the impact of the
lack thereof, on cryptographic protocols as important as TLS and
QUIC.
3. TRANSPORT LAYER SECURITY
In the TCP/IP reference model, the TLS protocol is located be-
tween the transport layer and the application layer. Its main purpose
is to protect insecure application protocols like HTTP or IMAP. The
ﬁrst (inofﬁcial) version was developed in 1994 by Netscape, named
Secure Sockets Layer. In 1999, SSL version 3.1 was ofﬁcially stan-
dardized by the IETF Working Group and renamed to Transport
Layer Security [10], version 1.0. Since then, two updates of the
TLS speciﬁcation were released, versions 1.1 [11] and 1.2 [12].
Version 1.3 is currently under development [13].
Cipher suites. TLS is a protocol framework that allows communi-
cating parties to choose from a large number of different algorithms
for the various cryptographic tasks performed in the protocol (key
agreement, authentication, encryption, integrity protection). A ci-
pher suite is a concrete selection of algorithms for all required cryp-
tographic tasks. For example, a connection established with the
cipher suite TLS_RSA_WITH_AES_128_CBC_SHA uses RSA-
PKCS#1 v1.5 public-key encryption [20] to establish a key, and
symmetric AES-CBC encryption with 128-bit key and SHA-1-based
HMACs. A connection with cipher suite TLS_DHE_RSA_WITH_-
AES_128_CBC_SHA uses the same symmetric algorithms, but es-
tablishes the key from a Difﬁe-Hellman key exchange with ephemeral
exponents6 and RSA-PKCS#1 v1.5 signatures [20] for authentica-
tion.
The TLS RFCs [10, 11, 12] and their extensions [6] specify a
large number of different cipher suites. Only the public-key al-
gorithms used in a TLS session will be relevant for our attack.
Therefore we will write “TLS_(EC)DHE_RSA” to denote any ci-
pher suite using (elliptic curve) DHE key exchange and RSA sig-
natures, and “TLS_RSA” to denote any cipher suite based on RSA
key transport.
3.1 The TLS Handshake up to Version 1.2
At the beginning of each TLS session the TLS Handshake proto-
col is executed, to negotiate a cipher suite and cryptographic keys.
In the following, we give a brief overview of the TLS Handshake
for all versions up to 1.2, in as much detail as required to explain
our attack. Note that the sequence of messages exchanged in the
handshake depends on the selected cipher suite. Version 1.3 will
have a slightly different handshake, we explain the differences in
Section 3.2.
Handshake overview. A TLS handshake (cf. Figure 2) is initiated
by a TLS client with a ClientHello message. This message
contains information about the TLS version and a list of references
to TLS cipher suites proposed by the client.
The server now responds with the messages ServerHello,
Certificate, an optional ServerKeyExchange message,
and ServerHelloDone. The ServerHello message contains
a reference to a cipher suite, selected by the server from the list
proposed by the client. The Certificate message contains an
X.509 certiﬁcate with the server’s public key. The ServerKey-
Exchange message is optional. It is omitted when a TLS_RSA
cipher suite is used, but sent when a TLS-(EC)DHE cipher suite
is used. We explain its contents below. The ServerHelloDone
6That is, both communicating partners choose random exponents
for each execution of the Difﬁe-Hellman protocol within TLS. Al-
ternatively, there exist TLS_DH cipher suites, where the server uses
a static exponent.
message indicates the end of this step. The client responds with a
ClientKeyExchange, which we also explain below.
Finally, both parties send the ChangeCipherSpec and
Finished messages. The former notiﬁes the receiving peer that
subsequent TLS messages will use the newly negotiated cipher
suite. The Finished message is necessary to protect against cer-
tain attacks (see [27]). After the handshake has ﬁnished, the peers
can start to exchange payload data, which are protected by the ne-
gotiated cryptographic algorithms and keys.
Key establishment and server authentication with TLS_DHE_RSA
cipher suites. If a TLS_DHE_RSA cipher suite is used, then the
ClientKeyExchange message contains the client’s contribu-
tion gc to a Difﬁe-Hellman key exchange. The ServerKey-
Exchange message contains the server’s contribution gs to the
Difﬁe-Hellman key, along with a digital signature computed with
the RSA-PKCS#1 v1.5 signature scheme. The purpose of the sig-
nature is to authenticate the server explicitly (in contrast to the im-
plicit authentication of TLS_RSA cipher suites described below).
It is computed over the random nonces rC and rS contained in
the ClientHello and ServerHello messages, the server’s
Difﬁe-Hellman share gs, and some other data whose details are
not relevant for our purposes. The established Difﬁe-Hellman key
gcs is called the PremasterSecret.
Key establishment and server authentication with TLS_RSA ci-
pher suites.
If a TLS_RSA cipher suite is used, then the client
selects a random PremasterSecret and encrypts it with the
RSA-PKCS#1 v1.5 encryption scheme, under the public key con-
tained in the server’s certiﬁcate. Then it transmits the resulting
ciphertext in the ClientKeyExchange message to the server.
The server obtains the PremasterSecret by decrypting the ci-
phertext.
REMARK 1. The correct handling of decryption errors in this
step is of paramount importance for the security of TLS_RSA ci-
pher suites. An attacker which is able to distinguish “valid” from
“invalid“ RSA-PKCS#1 v1.5 ciphertexts may apply a Bleichenbacher-
type attack to break the security of TLS. Thus, the server must not
send any error messages if decryption fails. In general it is very dif-
ﬁcult to implement this step securely, as even tiny timing differences
or other side channels may lead to practical attacks [28, 36].
Note that there is no explicit server authentication. The server
authenticates implicitly, by being able to compute the Finished
message correctly. This message depends on the Premaster-
Secret, thus, the server must have been able to decrypt the ci-
phertext contained in the ClientKeyExchange message.
On client authentication via TLS. Note that we have described
only server-authentication. It is in principle also possible to authen-
ticate clients cryptographically in the TLS handshake, however, this