        { 
                return a[1][2][3]; 
        } 
  public static int get_elem(int[][][]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: aload_0 
         1: iconst_1 
         2: aaload 
         3: iconst_2 
         4: aaload 
         5: iconst_3 
         6: iaload 
         7: ireturn 
54.13.8  小结 
在 Java 中，是否可能发生缓冲区溢出的情况？不可能。Java 数组的数据实例存储了数组长度的明确信
息，数组操作会作边界检查。一旦发生上标/下标溢出问题，运行环境就会进行异常处理。 
Java 和 C/C++的多维数组在底层结构上存在显著的区别，因此 JAVA 不太适合用进行大规模科学
计算。 
54.14  字符串 
54.14.1  第一个例子 
Java 的字符串和数组都是同等对象，因此它们的构造过程没有什么区别。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
608 
逆向工程权威指南（下册） 
        public static void main(String[] args) 
        { 
                System.out.println("What is your name?"); 
                String input = System.console().readLine(); 
                System.out.println("Hello, "+input); 
        } 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=1 
         0: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
         3: ldc   
#3   
// String What is your name? 
         5: invokevirtual  #4   
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
         8: invokestatic  #5   
// Method java/lang/System.console:()Ljava/io/Console; 
        11: invokevirtual  #6   
// Method java/io/Console.readLine:()Ljava/lang/String; 
        14: astore_1 
        15: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        18: new   
#7   
// class java/lang/StringBuilder 
        21: dup 
        22: invokespecial #8   
// Method java/lang/StringBuilder."":()V 
        25: ldc   
#9   
// String Hello, 
        27: invokevirtual #10   
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        30: aload_1 
        31: invokevirtual #10  
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        34: invokevirtual  #11   
// Method java/lang/StringBuilder.toString:()  
     Ljava/lang/String; 
        37: invokevirtual  #4   
// Method java/io/PrintStream.println:(Ljava/lang  
     /String;)V 
        40: return 
我们这里举的例子是交互式的，具体功能是能根据用户输入的用户名，显示一句问候，作为回显
结果。 
偏移量为 11 的指令调用了 readLine 函数。其返回值，即用户输入的字符串的引用指针，最后通过栈顶
TOS 返回。偏移量为 14 的指令将字符串的引用指针存储在 LVA 的第一个存储单元中。偏移量为 30 的指令
再次加载了用户输入字符串的引用指针，在 StringBuilder 类的实例中与字符串（Hello, ）连接为新的字符
串。最后偏移量为 37 的 invokevirtual 指令调用了 println 方法，显示最终的字符串。 
54.14.2  第二个例子 
另外一个例子是： 
public class strings 
{ 
        public static char test (String a) 
        { 
                return a.charAt(3); 
        }; 
        public static String concat (String a, String b) 
        { 
                return a+b; 
        } 
} 
  public static char test(java.lang.String); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: aload_0 
         1: iconst_3 
         2: invokevirtual #2  
// Method java/lang/String.charAt:(I)C 
         5: ireturn 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
609 
编译器会利用 StringBuilder 类来连接字符串：  
  public static java.lang.String concat(java.lang.String, java.lang.String); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=2, args_size=2 
         0: new   
#3   
// class java/lang/StringBuilder 
         3: dup 
         4: invokespecial  #4   
// Method java/lang/StringBuilder."":()V 
         7: aload_0 
         8: invokevirtual #5   
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        11: aload_1 
        12: invokevirtual #5 
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        15: invokevirtual #6   
// Method java/lang/StringBuilder.toString:()  
     Ljava/lang/String; 
        18: areturn 
我们再看一个将字符串和整型数连接在一起的例子： 
        public static void main(String[] args) 
        { 
                String s="Hello!"; 
                int n=123; 
                System.out.println("s=" + s + " n=" + n); 
        } 
这里同样调用了 StringBuilder 类的 append 方法连接字符串，再通过 println 函数显示最终的字符串。 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=3, args_size=1 
         0: ldc  
#2   
// String Hello! 
         2: astore_1 
         3: bipush  
123 
         5: istore_2 
         6: getstatic  
#3   
// Field java/lang/System.out:Ljava/io/PrintStream; 
         9: new   
#4   
// class java/lang/StringBuilder 
        12: dup 
        13: invokespecial  #5   
// Method java/lang/StringBuilder."":()V 
        16: ldc   
#6   
// String s= 
        18: invokevirtual #7   
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        21: aload_1 
        22: invokevirtual #7 
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        25: ldc   
#8   
// String n= 
        27: invokevirtual #7   
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        30: iload_2 
        31: invokevirtual #9   
// Method java/lang/StringBuilder.append:(I)Ljava  
     /lang/StringBuilder; 
        34: invokevirtual #10   
// Method java/lang/StringBuilder.toString:()  
     Ljava/lang/String; 
        37: invokevirtual #11   
// Method java/io/PrintStream.println:(Ljava/lang  
     /String;)V 
        40: return 
54.15  异常处理 
让我们再来回顾一下 54.13.4 节中已经讲到的例子，那是一个关于月份显示的程序实例。显然如果输入
数组的数值小于 0 或者大于 11 的话，都会触发异常处理函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
610 
逆向工程权威指南（下册） 
指令清单 54.10  IncorrectMonthException.java（不正确的月份显示例外） 
public class IncorrectMonthException extends Exception 
{ 
        private int index; 
        public IncorrectMonthException(int index) 
        { 
                this.index = index; 
        } 
        public int getIndex() 
        { 
                return index; 
        } 
}  
指令清单 54.11  Month2.java（月份 2） 
class Month2 
{ 
        public static String[] months = 
        { 
                "January", 
                "February", 
                "March", 
                "April", 
                "May", 
                "June", 
                "July", 
                "August", 
                "September", 
                "October", 
                "November", 
                "December" 
        }; 
        public static String get_month (int i) throws IncorrectMonthException 
        { 
                if (i11) 
                        throw new IncorrectMonthException(i); 
                return months[i]; 
        }; 
        public static void main (String[] args) 
        { 
                try 
                { 
                        System.out.println(get_month(100)); 
                } 
                catch(IncorrectMonthException e) 
                { 
                        System.out.println("incorrect month index: "+ e.getIndex()); 
                        e.printStackTrace(); 
                } 
        }; 
}  
本质上讲，IncorrectMonthException.class 只具备一个对象构造函数和一个访问器。 
这个类由 Exception 继承而来，因此它首先调用 Exception 类的构造函数，接着声明了自己唯一的输入值字段。 
  public IncorrectMonthException(int); 
    flags: ACC_PUBLIC 
    Code: 
      stack=2, locals=2, args_size=2 
         0: aload_0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
611 
         1: invokespecial #1  
// Method java/lang/Exception."":()V 
         4: aload_0 
         5: iload_1 
         6: putfield       #2  
// Field index:I 
         9: return 
而getIndex()就是一个访问器/accessor。它通过aload_0 指令从LVA 的第0 个存储槽获取IncorrectMonthException
的 this 指针，再通过 getfield 指令从对象实例里提取整数值。 
  public int getIndex(); 
    flags: ACC_PUBLIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: aload_0 
         1: getfield         #2   
// Field index:I 
         4: ireturn 
现在让我们来看看 Month2.class 中的 get_month()。 
指令清单 54.12  Month2.class  
  public static java.lang.String get_month(int) throws IncorrectMonthException; 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=1, args_size=1 
         0: iload_0 
         1: iflt  
10 
         4: iload_0 
         5: bipush  
11 
         7: if_icmple  
19 
        10: new   
#2   
// class IncorrectMonthException 
        13: dup 
        14: iload_0 
        15: invokespecial #3   
// Method IncorrectMonthException."":(I)V 
        18: athrow 
        19: getstatic  
#4   
// Field months:[Ljava/lang/String; 
        22: iload_0 
        23: aaload 
        24: areturn 
我们来分析分析这个程序： 
在偏移为 1 的 iflt 指令在栈顶值小于 1 的情况下触发跳转。“iflt”是英文 if less than 的缩写。 
当 index 参数是无效值时，程序会跳转到偏移量为 10 的 new 指令，创建一个新的对象。而该对象的类型就
是指令的操作数（常量解析池#2）IncorrectMonthException。接着偏移量为 15 的指令调用构造函数，并通过栈顶
TOS 传递局部变量 index。当执行到偏移量为 18 的指令处时，异常处理实例已经构造完毕， athrow 指令将从栈顶
提取由上一条指令传递的异常处理方法的引用指针，并通知 JVM 系统该方法为当前类实例的异常处理函数。 
此处的 athrow 指令并不返回控制流。此后的偏移量为 19 的指令开始是另外一个基本的模块，它与异
常处理过程没有关系，可视为从偏移量为 7 的指令开始的领悟一个逻辑分支。 
例外的句柄是如何工作的？我们来看看类 Month2.class 中的函数 main()。 
指令清单 54.13  Month2.class 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=1 
         0: getstatic  
#5   
// Field java/lang/System.out:Ljava/io/PrintStream; 
         3: bipush 100 
         5: invokestatic  #6   
// Method get_month:(I)Ljava/lang/String; 
         8: invokevirtual  #7   
// Method java/io/PrintStream.println:(Ljava/lang/String;)V 
        11: goto 47 
异步社区会员 dearfuture(15918834820) 专享 尊重版权