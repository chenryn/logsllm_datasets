    [ x ] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
Unused components/pipes/directives in my workspace are detected by the
compiler, which throws the error `Cannot determine the module for class (...)`
for each file. It stops compilation, and does not seem be configurable. This
is a problem, since I need to have those files in my workspace, but do not
need them in the resultant app (partner implementations requiring different
combos of shared components). This is especially frustrating with regards to
compiling in a webpack loader, which should be able to provide a list of files
which are included, regardless of workspace.
**Expected behavior**  
I would expect these errors to be warnings, and/or able to be silenced by a
compiler option. Alternatively, with regards to webpack, you could allow a
list of files to be inserted, so that a webpack could provide all files in the
require chain, instead of all files in the workspace.
**Minimal reproduction of the problem with instructions**  
Cannot demo in plunkr, since it uses JIT.
  1. Create a basic angular app which bootstraps an ngModule with one component, AppComponent
  2. Get this app into a state which can be AOT compiled (should be pretty easy with a hello world)
  3. Add a component to the directory structure, but do not reference it anywhere in your code.
  4. Try to AOT compile again. You will get the warning `Cannot determine the module for class`
**What is the motivation / use case for changing the behavior?**  
My company has a base app for ourselves, and our partners use modified
versions of that app as their own. Rather than maintain all partners
separately, we use a shared library of common generic components, imported as
needed. For our base app, everything is fine, since we use every component.
For partners, we cannot use AOT, since some of the components in the shared
npm package do not have a declared module.
**Please tell us about your environment:**  
Happens across all devices, but the current testing setup is:  
WIndows 10  
VS Code  
Cmder (bash terminal)
  * **Angular version:**  
v2.1.0 (though we have also tested in 2.3.1
  * **Browser:** All - this is a compiler issue, not browser specific
  * **Language:** Typescript
  * **Node (for AoT issues):** node v6.3.0