### 1. Introduction

The following section outlines the security mechanisms designed to address insider attacks. While it is impossible to completely prevent insiders from violating security, the transparency mechanism ensures that such violations will be publicly detectable.

Users of a secure service must be able to verify that their client is connected to a specific service known to provide the desired security properties. Legacy clients must be supported, allowing users to obtain most of the security benefits without installing special software. Additionally, there must be an incremental deployment path. Performance loss compared to insecure services should be minimal. Services must also be updatable, and the security properties must be maintained during the update process.

### 2. Threat Model

We assume the server hosting the service uses some secure enclave technology, such as Intel SGX, which prevents adversaries from accessing the code and data running in the enclave. Adversaries are assumed to have all the capabilities of an active network attacker and full control over non-enclave software running on the host computer (e.g., the operating system for SGX enclaves). This includes the possibility of adding malicious software or misconfiguring the service. The adversary can also run their own servers mimicking real services. We assume the user’s client is secure and cannot be tampered with. The threat model is depicted in Figure 1.

Availability is out of scope for this paper. If a malicious insider wishes to destroy all user data or deny access to the service, they can do so.

**Figure 1: Secure Service Threat Model**
- **Shaded areas** may be controlled by the adversary.
- **Client**: Connects to the server via TLS.
- **Internet**: Network connection.
- **Secure Enclave**: Runs the service code.
- **Server**: Hosts the secure enclave.
- **User**: Connects to the server.
- **Admin**: Manages the service.

### 3. Design Overview

The core idea is to run all service code, including TLS session establishment, request handling, and storage, within a secure enclave on the server. This provides isolation and ensures that even insiders on the server cannot tamper with the running code or memory of the service. Sealed storage is used to prevent malicious insiders from reading or modifying data stored on persistent storage: effectively, all data is encrypted before it leaves the enclave.

**Figure 2: Attestation Transparency Overview**
- **(1)**: The secure service emits the certificate request and attested statement.
- **(2)**: The attested statement and certificate are submitted to the Attestation and Certificate Transparency logs.
- **(3)**: The secure service receives the certificate produced by the CA.
- **(4)**: The user can now establish a regular TLS connection with the secure service.
- **(5)**: The transparency log monitor independently monitors the transparency logs for possible violations.

The user connects to the server using TLS to establish a secure channel. Remote attestation allows the user to verify the code running in the enclave: secure hardware on the server provides a signed statement indicating what code has been loaded into the enclave. A fully attestation-aware client can then use this attestation to verify that the server is running the expected code.

Legacy clients can also access the server and gain a subset of the security guarantees. They connect to the server via TLS, which is widely supported and provides a secure channel while verifying the server's authenticity. The TLS protocol checks the server's TLS certificate and authenticates the server using the public key found in the certificate. Our system extends these guarantees by further constraining the use of the private key.

A secure service generates its TLS private key inside the secure enclave, and the key never leaves the enclave in unencrypted form. It is stored using sealed storage, ensuring that only the enclave can retrieve it. Thus, even insiders cannot learn the service’s TLS private key.

When the service is first created, it publishes its TLS public key in an attested statement, proving that the enclave was launched with a certain code and that the code generated the key. Legacy clients not built with Attestation Transparency in mind won’t be able to verify these attestations, but another party can do so on their behalf. Because the attestations are public, anyone can check the code, ensure it is secure, and confirm that it will never reveal its TLS private key. This allows word to spread through out-of-band channels that the service is trustworthy.

A malicious insider could take down the secure service and replace it with malicious code, running outside an enclave. An attestation-aware client could detect this (because the attestation will change), but a legacy client could not. However, this attack is detectable. To mount such an attack, the insider would need to generate a new TLS keypair and get a new certificate issued for it, and hand the new private key to the malicious code. This is detectable because it triggers the issuance of a new certificate, which can be monitored using Certificate Transparency. In our design, secure services publicly commit to always publish a new attestation whenever they update the service or obtain a new certificate. Issuance of a new certificate without a corresponding published attestation indicates an attack or error.

Because our design focuses on transparency about what code the service will run, we call it **Attestation Transparency**.

### 4. Policy Model

To verify that a secure service will act "as promised," the user must verify:
- (a) The service code correctly implements the intended behavior.
- (b) No other program on the same computer can interfere with the operation of the service code or observe its memory.

Several flexible mechanisms are provided to enable users to verify that the service code will meet their needs:
- **Cryptographically Signed Statement**: The user may rely on a cryptographically signed statement from the secure service developer, naming both the service identity and the promised behavior.
- **Authority or Auditor**: The user can rely on an authority (e.g., an enterprise IT department) or an auditor to decide which services are trustworthy.
- **Reviewers**: The user may rely on a set of reviewers who cryptographically sign statements about the service code.
- **Policy Rules**: The user may employ policy rules to automatically determine if the specified behaviors are adequate.

Usually, the same policy model is used to decide whether an update meets the specified needs and whether user data accessible to previous versions can be made available to subsequent versions.

### 5. Secure Service Design

This section presents the architecture used to implement unalterable secure services. Unalterable here means that the functionality of the service cannot be changed, allowing a client to view the service as an extension of itself rather than a third-party program subject to external control.

Our architecture runs services inside a secure enclave and encourages secure software development. To reduce the attack surface, the architecture presents a limited interface to the programmer, implemented in a memory-safe and type-safe language, Rust.

#### 5.1 Secure Service Interface

In our architecture (Figure 3), only the CPU and the code inside the secure enclave are trusted. The secure enclave has no I/O capabilities and relies on an untrusted driver for (insecure) access to the outside world. The untrusted driver is part of the host operating system and provides persistent storage, networking, and inter-process communication (IPC). On top of this, the secure enclave library implements encrypted networking using TLS, encrypted and sealed storage, attestation, and IPC.

**Figure 3: Secure Service Architecture**
- **Shaded blocks** are not trusted.
- **Secure Enclave**: Runs the service code.
- **Application Code**: Part of the secure enclave.
- **Untrusted Driver**: Provides I/O capabilities.
- **Enclave Library**: Implements secure primitives.
- **Operating System**: Hosts the untrusted driver.
- **Network**: External network connection.
- **Storage**: Persistent storage.
- **CPU**: Trusted component.

**Table 1: Secure Storage Types**
| Benefit | Sealing Key | User Key | Both |
|---------|-------------|----------|------|
| Protect against blanket access after breach | ✓ | ✓ | ✓ |
| Protect against offline attack vs. weak user key |   | ✓ | ✓ |
| Recover data after hardware failure |   | ✓ | ✓ |

#### 5.2 Secure Server

Using the primitives defined in the previous section, we can build an unalterable secure service. Keeping the private key \( K_{\text{server}} \) of a TLS server in sealed storage and never exporting it outside the enclave ensures that only a particular secure enclave instance can access it. This means that when a TLS connection is established with a server using \( K_{\text{server}} \) to authenticate the key exchange, the server endpoint is guaranteed to terminate inside the enclave.

Since the private key should never exist outside the enclave, it must be generated inside the enclave. The key setup procedure for the secure service enclave is shown in Figure 4. Input and output happen through the IPC channel.

All static content (e.g., images and layout elements for a website) must be included in the server binary, which is measured upon enclave startup. All dynamic/user content must be stored in secure storage.

**Figure 4: Key Setup Procedure for Secure Service Enclave**

#### 5.2.1 Horizontal Scaling

Once one instance of a service is running, another instance can connect to it and verify that they are instances of the same program. After verification, sensitive information can be shared over a secure channel established using a secure key-exchange protocol. Any kind of distributed service can be supported this way.

#### 5.2.2 Multiple Enclaves

A service might consist of multiple parts, such as a database server and an application server. The enclaves should validate each other’s identity and establish a secure channel between them. There are at least two secure ways to implement this:

Consider an enclave A that accepts connections from clients and provides controlled access to information based on the client’s identity. A second enclave B wants to use enclave A’s service and has fixed A’s identity in its loaded and measured code. Enclaves A and B establish a secure channel and both attest to their parameters. Enclave B can verify A’s attestation and see that the identity matches what is expected. Enclave A can verify B’s attestation and provide B access to the information B is authorized to access.

If both enclaves must verify each other’s identity using mutual attestation, they can establish a secure and trusted connection.