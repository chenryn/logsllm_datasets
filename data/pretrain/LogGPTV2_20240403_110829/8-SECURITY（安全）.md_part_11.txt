MariaDB \[(none)\]\>set password for
root@\'localhost\'=password(\'redhat\');
//使用账户登录数据库，修改密码
MariaDB \[(none)\]\> select user,host,password from mysql.user;
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| user \| host \| password \|
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| root \| localhost \| \*84BB5DF4823DA319BBF86C99624479A198E6EEE9 \|
\| root \| 127.0.0.1 \| \*84BB5DF4823DA319BBF86C99624479A198E6EEE9 \|
\| root \| ::1 \| \*84BB5DF4823DA319BBF86C99624479A198E6EEE9 \|
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
修改密码成功，而且密码在数据库中是加密的，有什么问题吗？问题是你的密码被明文记录了，下面来看看明文密码：
**.bash_history**
\[root@proxy \~\]# cat .bash_history
mysqladmin -uroot -pxxx password \'redhat\'
//通过命令行修改的密码，bash会自动记录历史，历史记录中记录了明文密码
**.mysql_history**
\[root@proxy \~\]# cat .mysql_history
set password for root@\'localhost\'=password(\'redhat\');
select user,host,password from mysql.user;
flush privileges;
//通过mysql命令修改的密码，mysql也会有所有操作指令的记录，这里也记录了明文密码
另外数据库还有一个binlog日志里也有明文密码（5.6版本后修复了）。
怎么解决？
管理好自己的历史，不使用明文登录，选择合适的版本5.6以后的版本，
日志，行为审计（找到行为人），使用防火墙从TCP层设置ACL（禁止外网接触数据库）。
**定期执行密码安全操作**
-   **管理好历史记录**
rm .bash_history
history -C
rm .mysql_history
-   日志,行为审计
-   防火墙
## 数据备份与安全
## 数据安全
# tomcat服务安全
## 隐藏版本信息
245 cd /usr/local/tomcat/
246 ls
247 cd lib/
248 ls
249 jar -xf catalina.jar
\[root@client50 \~\]# ls
/usr/local/tomcat/lib/org/apache/catalina/util/ServerInfo.properties
/usr/local/tomcat/lib/org/apache/catalina/util/ServerInfo.properties
\[root@client50 \~\]# vim
/usr/local/tomcat/lib/org/apache/catalina/util/ServerInfo.properties
修改之前
server.info=Apache Tomcat/8.0.30
server.number=8.0.30.0
server.built=Dec 1 2015 22:30:46 UTC
修改之后
server.info=hksb
server.number=9.0.9.0
server.built=Dec 1 2015 22:30:46 UTC
![](media/image10.png){width="5.767361111111111in"
height="1.5416666666666667in"}
错误页面最后显示"hksb"
\[root@client50 \~\]# vim /usr/local/tomcat/conf/server.xml
69 \
\[root@client50 \~\]# /usr/local/tomcat/bin/shutdown.sh
\[root@client50 \~\]# /usr/local/tomcat/bin/startup.sh
## 降权启动
\[root@client50 \~\]# useradd tomcat
\[root@client50 \~\]# chown -R tomcat:tomcat /usr/local/tomcat
\[root@client50 \~\]# su -c /usr/local/tomcat/bin/startup.sh tomcat
Using CATALINA_BASE: /usr/local/tomcat
Using CATALINA_HOME: /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME: /usr
Using CLASSPATH:
/usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Tomcat started.
\[root@client50 \~\]# ps aux \|grep java
## 设置源码服务开机自启
进系统瞬间调用/etc/rc.local文件.将启动的命令写入这个文件中
\[root@client50 \~\]# vim /etc/rc.local
touch /var/lock/subsys/local
su -c /usr/local/tomcat/bin/startup.sh tomcat #文件末尾添加
## 删除默认的测试页面
\[root@client50 \~\]# rm -rf /usr/local/tomcat/webapps/\*
# Linux安全之打补丁
## 1、 diff命令
diff的功能就是用来比较两个文件的不同，然后记录下来，也就是所谓的diff补丁。
语法格式：diff 【选项】 源文件(夹)
目的文件(夹)，就是要给源文件(夹)打个补丁，使之变成目的文件(夹)，术语也就是"升级"。
下面介绍三个最为常用选项：
-r
是一个递归选项，设置了这个选项，diff会将两个不同版本源代码目录中的所有对应文
件全部都进行一次比较，包括子目录文件。
-N 选项确保补丁文件将正确地处理已经创建或删除文件的情况。
-u 输出同一内容的头部信息(打补丁使用),生成补丁文件
-a 所有文件视为文本,包括二进制程序
\[root@client50 \~\]# sh v1.sh #版本
hello boy
\[root@client50 \~\]# sh v1-1.sh #版本第一次修改
hello boy
hello girl
\[root@client50 \~\]# diff -u v1.sh v1-1.sh
\-\-- v1.sh 2019-03-08 16:49:11.830548575 +0800
+++ v1-1.sh 2019-03-08 16:49:42.118548575 +0800
@@ -1,2 +1,3 @@ #第一个文件减去1行,减第2行, 第二个文件加1行,加第3行
#! /bin/bash
echo \"hello boy\"
+echo \"hello girl\"
## 2、diff命令生成补丁(50主机)
\[root@client50 \~\]# diff -u v1.sh v1-1.sh \>one.patch
\[root@client50 \~\]# scp one.patch 192.168.4.51:/root
## patch命令
查看安装
\[root@sql51 \~\]# which patch
/usr/bin/which: no patch in
(/root/perl5/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)
\[root@sql51 \~\]# yum -y install patch #安装
\[root@sql51 \~\]# which patch
/usr/bin/patch
patch就是利用diff制作的补丁来实现源文件(夹)和目的文件(夹)的转换。这样说就意味着你可以有源文件(夹)――\>目的文件(夹)，也可以目的文件(夹)――\>源文件(夹)。
下面介绍几个最常用选项：
-p0 选项要从当前目录查找目的文件(夹),补丁文件路径不变
p:path 0:为删除补丁文件中0层路径前缀
-p1 选项要忽略掉第一层目录，从当前目录开始查找(当前所在目录判断)。
在这里以实例说明：
\-\-- old/modules/pcitable Mon Sep 27 11:03:56 1999
+++ new/modules/pcitable Tue Dec 19 20:05:41 2000
如果使用参数-p0，那就表示从当前目录找一个叫做old的文件夹，在它下面寻找modules下的pcitable文件来执行patch操作。
如果使用参数-p1，那就表示忽略第一层目录(即不管old)，从当前目录寻找modules的文件夹，在它下面找pcitable。这样的前提是
当前目录必须为modules所在的目录。而diff补丁文件则可以在任意位置，只要指明了diff补丁文件的路径就可以了。当然，可以用相对路径，也可
以用绝对路径。不过我一般习惯用相对路径。
-E 选项说明如果发现了空文件，那么就删除它
-R
选项说明在补丁文件中的"新"文件和"旧"文件现在要调换过来了(实际上就是给新版本打补丁，让它变成老版本)
## 4、patch命令打补丁(51主机)
第一次打补丁
\[root@sql51 \~\]# cat one.patch
\-\-- v1.sh 2019-03-08 16:49:11.830548575 +0800
+++ v1-1.sh 2019-03-08 16:49:42.118548575 +0800
@@ -1,2 +1,3 @@
#! /bin/bash
echo \"hello boy\"
+echo \"hello girl\"
\[root@sql51 \~\]# ls one.patch v1.sh
one.patch v1.sh
\[root@sql51 \~\]# patch -p0 -i one.patch #-i和反向重定向(重定向输入) \\>source2/find #造成不同的find文件
\[root@client50 demo\]# tree /demo
/demo
├── source1
│   ├── find
│   └── test.sh
└── source2
├── find #find文件中多了个1
├── test.sh
└── tmp.txt #source2多了tmp.txt文件
2 directories, 5 files
\[root@client50 demo\]# ls -l /demo
总用量 0
drwxr-xr-x. 2 root root 33 3月 8 17:36 source1
drwxr-xr-x. 2 root root 48 3月 8 17:36 source2
\[root@client50 demo\]# diff -uarN source1 source2 \>/root/plj.patch
\[root@client50 demo\]# scp -r source1 192.168.4.51:/demo/
#将source1拷贝给客户端51的安装目录,模拟原始安装
\[root@client50 demo\]# scp /root/plj.patch 192.168.4.51:/root
#将补丁文件plj.patch 拷贝给客户端51
**客户端打补丁(51)**
\[root@sql51 demo\]# tree /demo
/demo
└── source1
├── find
└── test.sh
1 directory, 2 files
\[root@sql51 demo\]# cat /root/plj.patch #查看一下补丁文件的路径
diff -uarN source1/find source2/find
\-\-- source1/find 2019-03-08 17:36:09.993548575 +0800
> #要给source1目录打补丁,一定要进入source1目录打补丁
+++ source2/find 2019-03-08 17:36:36.295548575 +0800 #相对路径
\[root@sql51 demo\]# cd source1/
\[root@sql51 demo\]# pwd
/demo
> #要给source1目录打补丁,一定要进入source1上级目录范围内打补丁
\[root@sql51 demo\]# patch -p0 \ source1/test.sh
\[root@client50 demo\]# echo \"hello the world\" \> source2/test.sh
\[root@client50 demo\]# tree /demo
/demo
├── source1
│   └── test.sh
└── source2
└── test.sh
# 案例
案例1：部署audit监控文件
案例2：加固常见服务的安全
案例3：使用diff和patch工具打补丁
1 案例1：部署audit监控文件
1.1 问题