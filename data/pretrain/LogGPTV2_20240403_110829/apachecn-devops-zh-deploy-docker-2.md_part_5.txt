# To serve things up with Python, we need to be in that
# same directory
WORKDIR $SRV_PATH
# Copy our test file
COPY test.txt $SRV_PATH/
# Add a URL-hosted content into the image
ADD https://raw.githubusercontent.com/moby/moby/master/README.md \
 $SRV_PATH/
# Make sure that we can read all of these files as a
# limited user
RUN chown -R pythonsrv:pythonsrv $SRV_PATH
# From here on out, use the limited user
USER pythonsrv
# Run the simple http python server to serve up the content
CMD [ "python3", "-m", "http.server" ]
```
Using Python's built-in web server is highly discouraged in almost all cases, as it is neither scalable nor configurable in any significant way, but it serves as a good example of a service that could be hosted through Docker and is available on almost all systems with Python. Do not use this in real production services unless you really know what you are doing.
除了关于在生产中使用 python 的 web 服务器模块的注释之外，这仍然是一个很好的例子，说明了我们没有涉及的所有其他主要 Dockerfile 指令，现在您将了解如何使用。
# 标签
我们这里的第一个新指令是`LABEL`:
```
LABEL version="1.0"
LABEL org.sgnn7.name="python-webserver"
```
`LABEL =`或`LABEL  `用于添加关于正在构建的映像的元数据，稍后可以通过`docker ps`和`docker images`使用类似`docker images --filter "="`的东西对其进行检查和过滤。在`reverse-dns`符号中，密钥一般都是小写的，但是你可以在这里使用你想要的任何东西，并且`version`应该出现在每个映像上，所以我们使用顶级版本密钥名称。然而，这里的版本不仅在那里，这样我们就可以过滤映像，而且如果我们改变它，也会破坏 Docker 的缓存。如果没有这种类型的缓存破坏，或者在构建期间通过手动设置标志(`docker build --no-cache`)，Docker 将一直重用缓存，直到最近更改的指令或文件，因此您的容器很可能会停留在冻结的包配置中。这种情况可能是也可能不是您想要的，但是万一您有自动化的构建工具，添加一个`version`层，每当您更改它时，它都可以破坏缓存，这使得容器非常容易更新。
# 使用 ENV 设置环境变量
`ENV`与其他一些命令不同，应该是不言自明的:它设置了`Dockerfile`和容器中的环境变量。由于我们需要在我们的`Dockerfile`中不断地重新输入`/srv/www/html`，为了防止错别字和确保对最终服务器目录目标的简单更改，我们设置了`SRV_PATH`变量，稍后我们将继续使用`$SRV_PATH`。一般来说，对于 Docker 容器，容器的几乎所有配置都是通过环境变量来完成的，所以希望在后面的章节中看到更多这个指令。
Even though we don't use it in this example, you need to watch out when using environment variables in the `CMD` directive directly as it does not get expanded but runs directly. You can ensure that your variable gets expanded in `CMD` by using it as part of a shell command structure similar to this: `CMD [ "sh", "-c", "echo", "$SRV_PATH" ]`.
# 暴露端口
我们这里的下一个新指令是`EXPOSE 8000`。还记得我们如何使用`docker info`来找出 NGINX 容器使用的端口吗？该指令在元数据中填充了该信息，并被 Docker 编排工具用来将输入端口映射到容器上正确的输入端口。由于默认情况下 Python 的 HTTP 服务器在端口`8000`上启动服务，所以我们使用`EXPOSE`来通知 Docker，无论谁使用这个容器，都应该确保他们将这个端口映射到主机上。您也可以在这里用这个指令列出多个端口，但是因为我们的服务只使用一个，所以我们现在不需要使用它。
# 有限用户的容器安全分层
在我们的`Dockerfile`中，下面这段新奇的代码可能有点复杂，但我们将一起来看看:
```
RUN mkdir -p $SRV_PATH && \
 groupadd -r -g 350 pythonsrv && \
 useradd -r -m -u 350 -g 350 pythonsrv
```
这是我们需要在多个级别上扩展的内容，但您需要知道的第一件事是，默认情况下，Dockerfile 指令作为`root`执行，如果在以后的任何时候您没有指定不同的`USER`，您的服务将使用`root`凭据运行，从安全角度来看，这是一个巨大的漏洞，我们试图通过仅作为有限用户运行我们的服务来弥补。但是，如果没有定义用户和组，我们就无法将上下文从`root`中切换出来，因此我们首先创建一个`pythonsrv`组，然后通过创建附加到所述组的`pythonsrv`用户来跟进。`-r`标志将用户和组标记为系统级实体，对于不会直接登录的组和用户来说是一种很好的做法。
说到用户和组，如果您将一个卷从主机装载到以受限用户身份运行的 Docker 容器中，如果主机和容器在用户和组 id(分别为`uid`和`gid`)上不完全一致，您就不能从卷中读取或写入文件。为了避免这种情况，我们使用了一个稳定的`350`的 UID 和 GID，这个 UID 和 GID 很容易记住，并且通常不在大多数主机系统的常规 UID/GID 表中。这个数字大多是任意的，但是只要它在您的主机操作系统的服务范围内，并且不与主机上的用户或组冲突，它应该是可以的。
最后一个还没有覆盖的标志是`-m`，它所做的是为用户创建主目录框架文件。大多数情况下，您不需要这个，但是如果任何后续操作试图使用`$HOME`(例如`npm`或大量其他服务)，将没有这样的目录，除非您指定这个标志，并且您的构建将失败，所以我们通过为`pythonsrv`用户创建`$HOME`来确保我们不会达到这个条件。
为了解决这个问题，我们将所有这些`RUN`命令链接在一起，以确保我们使用尽可能少的层。每一层都会创建额外的元数据，并增加映像的大小，因此就像 Docker 最佳实践文档状态一样，我们试图通过将这些命令堆叠在一起来减少它们。虽然这不是在所有情况下都要做的最好的事情，因为调试这种类型的配置非常困难，但它通常会显著地调整容器的大小。
# 容器外部的卷和数据
但是，如果我们想要添加容器外部的文件，即使容器死亡，这些文件也可能需要保持不变，该怎么办呢？这就是`VOLUME`指令发挥作用的地方。有了`VOLUME` s，任何时候你启动容器，这个路径实际上是假设是从容器外部挂载的，如果没有提供，会自动为你创建并附加一个。
在这里，我们将我们的`/srv/www/html/external`路径分配给这个未命名的卷，但是我们将为后面的章节保留关于卷的大部分详细讨论。
# 设置工作目录
由于 Python HTTP 服务器只能服务于它运行所在的当前目录中的文件，如果不明确正确配置，我们的容器将显示`/`目录之外的文件。为了解决这个问题，我们将`WORKDIR $SRV_ROOT`包含到`Dockerfile`中，它将我们的工作目录更改为包含我们想要提供的文件的目录。关于这个命令需要注意的一点是，您可以根据需要多次重用它，并且它适用于 Dockerfile 中的任何后续命令(例如`RUN`或`CMD`)。
# 从互联网添加文件
尝试向容器中添加非本地托管的文件和/或由于许可您无法将它们包含在`Dockerfile`所在的存储库中的文件会怎么样？为此，有`ADD`指令。该命令从提供的 URI 下载文件，并将其放入容器中。如果文件是本地压缩归档文件，如`.tgz`或`.zip`文件，并且目标路径以斜杠结束，它将扩展到该目录，这与`COPY`相比是一个非常有用的选项。在我们正在编写的示例中，我们将从 GitHub 中获取一个半随机文件，并将其放入目录中，包括以下内容:
```
ADD https://raw.githubusercontent.com/moby/moby/master/README.md \
 $SRV_PATH/
```
# 更改当前用户
我们已经解释了为什么我们需要作为受限用户运行我们的服务，以及我们是如何为其创建用户的，但是现在是将上下文永久切换到`pythonsrv`的时候了。使用`USER pythonsrv`，任何进一步的命令将作为`pythonsrv`用户执行，包括容器的`CMD`可执行命令，这正是我们想要的。就像`WORKDIR`一样，这个指令可以在一个`Dockerfile`中多次使用，但是对于我们的目的来说，没有必要像非`root`那样做其余的配置。一般来说，在`Dockerfile`中保持该层语句尽可能高是一个好的做法，因为它不太可能改变，也不太可能破坏缓存。但是，对于这个例子，我们不能将它移动得更高，因为我们之前的命令使用了`chown`，这需要`root`权限。
# 把它们放在一起
我们快完成了！我们需要做的最后一件事是在容器启动时启动 Python 内置的 HTTP 服务器模块:
```
CMD [ "python3", "-m", "http.server" ]
```
一切就绪后，我们可以构建并启动我们的新容器:
```
$ docker build -t python_server . 
Sending build context to Docker daemon 16.9kB
Step 1/14 : FROM python:3
 ---> 968120d8cbe8
Step 14/14 : CMD python3 -m http.server
 ---> Running in 55262476f342
 ---> 38fab9dca6cd
Removing intermediate container 55262476f342
Successfully built 38fab9dca6cd
Successfully tagged python_server:latest
$ docker run -d \
             -p 8000:8000 \
             --rm \
             python_server 
d19e9bf7fe70793d7fce49f3bd268917015167c51bd35d7a476feaac629c32b8
```
我们可以交叉手指，通过访问`http://localhost:8000`来检查我们构建了什么:
![](img/46c568ec-7de1-4379-8c1f-c5208daa57af.png)
有效！点击`test.txt`会显示正确的`Just a test`字符串和`README.md`，我们从 GitHub 下载中获取的字符串和【】在点击时都很好。有了所有的功能，`external/`目录中有什么？
![](img/fbc581fe-aee5-4ea7-9d15-36d1cdcd3591.png)
如果卷是空的，那么我们这里的目录也是空的也就不足为奇了。不如我们看看是否可以将主机上的一些文件装入这个目录:
```
$ # Kill our old container that is still running
$ docker kill d19e9bf7
d19e9bf7
$ # Run our image but mount our current folder to container's
$ # /srv/www/html/external folder
$ docker run -d \
             -p 8000:8000 \
             --rm \
             -v $(pwd):/srv/www/html/external \
             python_server 
9756b456074f167d698326aa4cbe5245648e5487be51b37b00fee36067464b0e
```
在这里，我们用我们的`-v`旗帜将当前目录(`$(pwd)`)挂载到我们的`/srv/www/html/external`目标。那么`http://localhost:8000/external`现在长什么样呢？我们的文件可见吗？
![](img/4a110ce7-9d92-48e6-a20f-6eea89ca4758.png)
我们确实这样做了——我们的服务完全按照我们的期望运作！从头开始写的真正的服务！
有了有效的服务，我们现在应该能够通过扩展我们的容器来继续我们进入 Docker 的旅程。
# 摘要
在本章中，我们涵盖了从基本的 Docker 容器到扩展现有容器的所有内容，一直到从头开始创建我们自己的服务。在这一过程中，我们讲述了最重要的 Docker 和 Dockerfile 命令以及如何使用它们，更重要的是，*在哪里*和*为什么要*使用它们。虽然这不是这个主题最深入的内容，但这正是我们需要的深度，以便在下一章开始扩展容器。