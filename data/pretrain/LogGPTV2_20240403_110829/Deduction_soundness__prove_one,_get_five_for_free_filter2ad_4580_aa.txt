title:Deduction soundness: prove one, get five for free
author:Florian B&quot;ohl and
V&apos;eronique Cortier and
Bogdan Warinschi
Deduction Soundness: Prove One, Get Five for Free
Florian Böhl
KIT
Karlsruhe, Germany
PI:EMAIL
Véronique Cortier
LORIA - CNRS
Nancy, France
PI:EMAIL
Bogdan Warinschi
University of Bristol
Bristol, United Kingdom
PI:EMAIL
ABSTRACT
Most computational soundness theorems deal with a limited
number of primitives, thereby limiting their applicability.
The notion of deduction soundness of Cortier and Warinschi
(CCS’11) aims to facilitate soundness theorems for richer
frameworks via composition results: deduction soundness
can be extended, generically, with asymmetric encryption
and public data structures. Unfortunately, that paper also
hints at rather serious limitations regarding further compo-
sition results: composability with digital signatures seems
to be precluded.
In this paper we provide techniques for bypassing the per-
ceived limitations of deduction soundness and demonstrate
that it enjoys vastly improved composition properties. More
precisely, we show that a deduction sound implementation
can be modularly extended with all of the ﬁve basic crypto-
graphic primitives (symmetric/asymmetric encryption, mes-
sage authentication codes, digital signatures, and hash func-
tions). We thus obtain the ﬁrst soundness framework that
allows for the joint use of multiple instances of all of the
basic primitives.
In addition, we show how to overcome an important re-
striction of the bare deduction soundness framework which
forbids sending encrypted secret keys. In turn, this prevents
its use for the analysis of a large class of interesting proto-
cols (e.g. key exchange protocols). We allow for more liberal
uses of keys as long as they are hidden in a sense that we
also deﬁne. All primitives typically used to send secret data
(symmetric/asymmetric encryption) satisfy our requirement
which we also show to be preserved under composition.
Categories and Subject Descriptors
F.0 [Theory of Computation]: General
Keywords
Computational soundness; Composability
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on theﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516711 .
1.
INTRODUCTION
Two main approaches have been developed for the anal-
ysis of security protocols. Symbolic models abstract away
the cryptographic primitives, allowing to reason at a logical
level, often in an automated way. Security proofs are there-
fore easier and often conducted by tools. In contrast, cryp-
tographic models oﬀer higher security guarantees, down to
the bitstring level. Security proofs are usually done by hand
and proceed by reduction, down to the security assumptions
(such as the computational hardness of computing a discrete
log).
Starting with the seminal work of Abadi and Rogaway [1],
many results study under which assumptions it is possible
to show that symbolic models are actually sound w.r.t. to
cryptographic models. For example, the symbolic represen-
tation of symmetric encryption consists simply of two fol-
lowing deduction rules.
k m
enc(k, m)
enc(k, m) k
m
An attacker can encrypt or decrypt only if he has the cor-
responding key. Given an encryption scheme, does it hold
that all attacker’s computations are reﬂected by these rules?
Surprisingly, the answer is yes, provided that the encryption
scheme satisﬁes some standard security requirements [2, 9]
(here IND-CCA). Such soundness theorems have been es-
tablished for active attackers for basically all standard cryp-
tographic primitives: symmetric encryption [2, 9], asymmet-
ric encryption [3, 12, 14], signatures [3, 17, 12], MACs [4],
hashes [17, 10, 16] (consult [11] for a more comprehensive
list).
However, these past results usually consider the primitives
in isolation or, in the best case, treat at most two primitives
at a time. Soundness proofs are complex, and including mul-
tiple primitives in the analysis easily leads to unmanageable
proofs. A way to bring the complexity under control is to de-
velop soundness results that are compositional. A ﬁrst step
in this direction is the work of Cortier and Warinschi [13].
They propose a notion of soundness which can be extended,
in a generic way in several ways, most notably with asym-
metric encryption: if a deduction system is sound for some
primitive (in the sense that they deﬁne) then extending the
deduction system with the usual deduction rules for asym-
metric encryption is a sound abstraction for combined uses
of the primitive and asymmetric encryption. Below, we refer
to this notion as deduction soundness.
The central idea that allows for composability is that de-
duction soundness considers the use of the primitives in the
1261presence of functions chosen adversarially from the class of
transparent functions. These are publicly computable and
eﬃciently invertible functions. Typical functions that are
transparent are the constructors of public data structures
like concatenation, lists, etc.
It is then obvious that de-
duction soundness in this sense implies soundness for the
use of primitive in the presence of other constructs that are
naturally transparent (e.g. public data structures). Less ob-
vious is that deduction soundness for a primitive also implies
soundness when the primitive is used together with asym-
metric encryption. In addition to this result (which is the
main technical contribution of [13]) that paper also shows
that deduction soundness implies that security of proto-
cols in symbolic models yields security in the computational
models, for a wide class of protocols.
Compositionality for the notion introduced in [13] is how-
ever limited, and the authors present rather compelling ev-
idence that the notion may not compose primitives other
than encryption. The problem is that deduction soundness
does not seem to preclude implementations that leak partial
information about their inputs. In turn, this leak of infor-
mation may impact the security of other primitives that one
may want to include later.
More concretely, assume that one has established sound-
ness of a deduction system that covers hash, but for an
implementation of the hash function that reveals half of
its input: h(m1(cid:2)m2) = m1(cid:2)g(m2) where g is a standard
If g is a “good” hash function then so is
hash function.
h. Now consider a signature scheme which duplicates sig-
(cid:2)
natures: sign(k, m) = sign
is
some standard signature scheme.
It is easy to see that if
(cid:2)
sign
(k, m) is a secure signature scheme, then so is sign(k, m).
Yet, given h(sign(k, m)) an adversary can easily compute
sign(k, m) without breaking the signature scheme nor the
hash: the hash function leaks suﬃcient information to be
able to recover the underlying signature.
(cid:2)
(k, m) where sign
(k, m)(cid:2)sign
(cid:2)
Our contributions.
In this paper we provide new insights
into the notion of deduction soundness. Despite the intu-
ition outlined above, we prove that the compositionality
properties of deduction soundness [13] reach further than
previously understood. For example, we prove that to any
deduction sound implementation of a set of primitives, one
can add signatures, as long as the implementation for the
signature satisﬁes a standard notion of security. This theo-
rem refutes the counterexample above and provides evidence
that deduction soundness is a more powerful (and demand-
ing) security notion than previously understood. In particu-
lar, a corollary of the theorem is that there are no deduction
sound abstractions for implementations that are “too leaky”
(as the hash function from the counterexample).
The new level of understanding facilitates further compo-
sitionality proofs for deduction soundness: to any deduction
sound system one can add any of the (remaining) standard
cryptographic primitives:
symmetric encryption, message
authentication codes, and hash functions while preserving
deduction soundness. The theorems hold under standard
security assumptions for the implementation of encryption
and MACs and require random oracles for adding hash func-
tions. As a consequence, we obtain the ﬁrst soundness result
that encompasses all standard primitives: symmetric and
asymmetric encryption, signatures, MACs, and hashes. In
addition, our composition results allow for a settings where
multiple schemes (that implement the same primitive) are
used simultaneously, provided that each implementation ful-
ﬁlls our assumptions. Moreover, composition provides a
stronger result: whenever deduction soundness is shown for
some particular primitive, our result ensures that all stan-
dard primitives can be added for free, without any further
proof.
The importance of composition cannot be overempha-
sized: obtaining such general results without being able to
study each primitive separately would be unmanageable.
Our compositionality results hold under several restric-
tions most of which are quite common in soundness proofs,
e.g. adversaries can corrupt keys only statically. Less stan-
dard is that we demand for secret keys to be used only for
the cryptographic task for which they are intended. Quite
reasonable most of the time, the restriction does not allow,
for example, for the adversary to see encryptions of sym-
metric keys under public keys. The restriction is related
If f is a primitive
to the signature-hash counterexample.
with a deduction sound system that leaks some information
about its input and Enc is a secure encryption scheme it is
not clear that (f (k), Enck(m)) hides m. Unfortunately, the
technique that we used to bypass the signature-hash coun-
terexample does not seem to apply here. At a high level, the
diﬃculty is that in a potential reduction to the security of
the encryption scheme, we are not be able to simulate f (k)
consistently.
One way to relax the restriction is to employ encryption
schemes that are secure even when some (or even most) of
the encryption key leaks [15, 18]. Current instantiations for
such schemes are highly ineﬃcient and we prefer the follow-
ing alternative solution which, essentially, allows for other
uses of symmetric keys, as long as these uses do not reveal
information about the keys.
In a bit more detail, we say
that a function is forgetful for some argument if the func-
tion hides (computationally) all of the information about
that input. The notion is a generalization for the secu-
rity of encryption schemes: these can be regarded as for-
getful with respect to their plaintext. We then show that a
forgetful deduction sound implementation can be extended
with symmetric encryption under more relaxed restrictions:
soundness is preserved if encryption keys are used for en-
cryption, or appear only in forgetful positions of other func-
tions from the implementation we are extending. Finally,
we show that, in addition to soundness, forgetfulness is pre-
served as well. Hence we can ﬂexibly and add several layers
of asymmetric/symmetric key encryption such that the keys
of each layer may appear in any forgetful position of under-
lying layers. We feel that this allows us to capture almost
every hierarchical encryption mechanism in practical proto-
cols.
Full version. Due to lack of space the formal justiﬁcations
for our results are not contained in this extended abstract.
For the beneﬁt of reviewers the full version of the paper is
online [8].
2. THE SYMBOLIC MODEL
Our abstract models for the symbolic world—called sym-
bolic models—consist of term algebras deﬁned on a typed
ﬁrst-order signature.
Speciﬁcally we have a set of data types T with a subtype
relation (≤) which we require to be a preorder. We assume
1262that T always contains a base type (cid:4) such that every other
type τ ∈ T is a subtype of (cid:4) (τ ≤ (cid:4)).
The signature Σ is a set of function symbols together with
arities of the form ar(f ) = τ1 × . . . × τn → τ , n ≥ 0 for
τi, τ ∈ T . We refer to τ as the type of f and require τ (cid:8)=
(cid:4) for all f except for garbage of basetype g(cid:3). Function
symbols with n = 0 arguments are called constants. We
distinguish deterministic function symbols, e.g., for pairs,
and randomized function symbols, e.g., for encryption.
For all symbolic models we ﬁx an inﬁnite set of typed vari-
ables {x, y . . .} and an inﬁnite set of labels labels = labelsH∪
labelsA for inﬁnite, disjoint sets of honest labels (labelsH)
and adversarial labels (labelsA). Since labels are used to
specify randomness, distinguishing honest and adversarial
labels (randomness) is important.
The set of terms of type τ is deﬁned inductively by
t
::=
|
|
|
term of type τ
x
variable x of type τ
application of deterministic f ∈ Σ
f (t1, . . . , tn)
f l(t1, . . . , tn) application of randomized f ∈ Σ
(cid:2)
i with τ
where for the last two cases, we further require that each ti is
i ≤ τi for ar(f ) = τ1×. . .×τn →
(cid:2)
a term of some type τ
τ and for the last case that l ∈ labels. The set of terms is
denoted by Terms(Σ,T ,≤) and is the union over all sets of
terms of type τ for all τ ∈ T . For ease of notation we often
write Terms(Σ) for the same set of terms, and refer to general
terms as t = f l(t1, . . . , tn) even if f could be a deterministic
function symbol which doesn’t carry a label.
Intuitively, for nonces, we use randomized constants. For
example, assume that n ∈ Σ is a constant. Then usual
nonces can be represented by nr1 , nr2 , . . . where r1, r2 ∈
labels are labels. Labels in labelsH will be used when the
function has been applied by an honest agent (thus the
randomness has been honestly generated) whereas labels in
labelsA will be used when the randomness has been gener-
ated by the adversary. Often when the label for a function
symbol is clear from the context (e.g. when there is only one
label that suits a particular function symbol) we may omit
this label.
We require Σ to contain randomized constants gτ of type
τ for any τ ∈ T that will be used for representing garbage
of type τ . Garbage will typically be the terms associated
to bit-strings produced by the adversary which cannot be
parsed as a meaningful term (yet). If garbage can at some
point be parsed as the application of a deterministic function
symbol, the label is dropped.
Substitutions are written σ = {x1 = t1, . . . , xn = tn} with
domain dom(σ) = {x1, . . . , xn}. We only consider well-typed
substitutions, that is substitutions σ = {x1 = t1, . . . , xn =
tn} for which ti is of a subtype of xi. The application of a
substitution σ to a term t is written σ(t) = tσ.
Function symbols in Σ are intended to model crypto-
graphic primitives, including generation of random data like
e.g. nonces or keys. Identities will typically be represented
by constants (deterministic function symbols without argu-
ments). The symbolic model is equipped with a deduction
relation (cid:10)⊆ 2Terms×Terms that models the information avail-
able to a symbolic adversary. T (cid:10) t means that a formal
adversary can build t out of T , where t is a term and T a
set of terms. We say that t is deducible from T . Deduction
relations are typically deﬁned through deduction systems.
t1
tn
···
t
∈ D then T (cid:10)D tσ.
t1
Definition 1. A deduction system D is a set of rules
such that t1, . . . , tn, t ∈ Terms(Σ,T ,≤). The de-
···
duction relation (cid:10)D⊆ 2Terms × Terms associated to D is the
t
smallest relation satisfying:
tn
• T (cid:10)D t for any t ∈ T ⊆ Terms(Σ,T ,≤)
• If T (cid:10)D t1σ, . . .T (cid:10)D tnσ for some substitution σ and
τ
We may omit the subscript D in (cid:10)D when it is clear from
the context. For all deduction systems D in this paper we
for all garbage symbols gτ ∈ Σ and l ∈ labelsA.
require gl
From now on we denote a symbolic model M as a tuple
(T ,≤, Σ,D) where T is the set of data types, ≤ the subtype
relation, Σ signature and D the deduction system. For all