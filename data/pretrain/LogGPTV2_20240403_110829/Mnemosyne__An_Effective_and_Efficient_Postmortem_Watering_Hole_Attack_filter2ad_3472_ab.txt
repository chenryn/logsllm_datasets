Frame
Iframe
Remote Host
File
Resource
Script
Session
Attributes
securityOrigin,
sessionId, URL
securityOrigin,
sessionId, URL
2nd-level domain,
domain
path, remoteOrigin
URI, type
hash, sourceOrigin,
URL, sessionId
user-agent,
tamp
-
-
times-
Relationship
Example
Frame → Frame
Script → Frame
Script → Frame
Frame → File
Frame → Frame
Frame → Frame
Parser → Resource
Resource → Script
Attached
CompiledBy
Created
Download
Navigated
Opened
Request
Response
SessionOpened User → Session
Resource → Host
Located
(b) Relationship between objects.
HTML Parser
User
(a) Graph Objects: each object has
a unique ID. The bolded attribute
represents the object’s identifier.
Table 1: Browser-based provenance graph objects, relation-
ships, and key attributes.
nation-state-level attacker. Mnemosyne is capable of logging details
about users’ browsing activities. This means a trade-off between
security and privacy must be found. In the envisioned deployment
scenarios, it is a reasonable assumption that the executives would
be willing to accept a potential reduction to employee privacy to
achieve a higher level of security. Furthermore, the audit logs cap-
tured by Mnemosyne can be encrypted and securely stored on a
file server. A different encryption key can be used for each website
and for different time windows. These keys can then be stored in
a key escrow, as proposed in previous work [58]. This allows the
release of only those keys that are truly needed to enable a forensic
investigation.
We also assume that the browser audit logs are stored securely,
e.g. using append only log files [15], and thus cannot be tampered
with even if the browser is later compromised. Also, we assume
that at the time of the watering hole attack, the browser itself is
not compromised and the audit logs can be trusted as correct (note
that assuming the integrity of the trusted-computing based (TCB)
is common in the auditing community [20, 22–27, 29, 30, 33, 34, 39,
40, 42, 43, 45, 47–52, 58, 61, 63, 66]). If the browser is compromised,
Mnemosyne can still record correct audit logs related to the attack
up until the point when the browser is exploited, thus allowing
a forensic analyst to reconstruct the attack setup phase. In our
extensive evaluation, we demonstrate that by only recording the
“setup” phase of a drive-by download attack campaign Mnemosyne
is still capable of identifying the victims of the attack.
3.3 Browser-level Causality Graph
As a first step to enable attack reconstruction, we construct a causal-
ity graph based on the browser-level audit logs, which will be used
during the postmortem analysis and investigation. The browser
objects are defined as nodes in the audit graph, as in Table 1a, and
the causal relationships between the objects are defined as edges
in the graph, as listed in Table 1b. The graph presents the chain
Figure 2: Mnemosyne’s browser-based causality log graph of
the social-engineering component used by APT-32 to attack
targeted visitors.
of browser events that occurred and the causal relations they in-
duced. To demonstrate Mnemosyne’s capability to reconstruct a
web-based attack, we demonstrate how Mnemosyne’s logs are able
to reconstruct the social-engineering component of the motivating
example in Figure 2. The social-engineering attack has three major
stages. The first stage fingerprints the user to identify if they match
the targeted profile. If so, the second stage blurs the original site’s
content and injects a malicious overlay into the DOM that redirects
the user to a malicious, adversary-controlled site. The final stage of
the attack occurs when users navigate to the malicious website that
contains a malicious OAuth application. If the user is tricked into
granting permission to the malicious OAuth application, it grants
the adversaries full access to the user’s Gmail accounts.
3.4 Auditor Daemon
To ensure our system can be widely deployed in enterprise set-
tings, we take a different approach than the previous systems that
alter the browser (e.g., [43, 58, 61]), and rely on the existing debug-
ging interfaces provided by Chrome that do not require extensive
modifications to the browser. Specifically, we rely on Chromium’s
DevTools interface to extract information about the user’s browsing
session. Chromium’s DevTools Protocol allows tools to instrument,
inspect, and profile Chromium, Chrome, and other Blink-based
browsers. Mnemosyne’s auditor daemon collects the necessary in-
formation related to the browser’s execution needed to reconstruct
the audit logs described in §3.3. A list of the Chrome namespaces
used to captured this information is in Table 8 in the Appendix.
3.5 Versioning System
The domain-based versioning system takes in the domain name of
the website that is suspected to have been compromised to launch
a watering hole attack. The domain versioning system has two
major components. First, the version reconstruction component re-
constructs client-side versions of the compromised domain (§3.5.1).
Second, the version prioritization component prioritizes the ver-
sions in terms of their likelihood of representing the compromised
version (§3.5.2). These two components are detailed below.
3.5.1 Version Reconstruction. The first step of the version recon-
struction component is to refine the audit graph to only include
(14) Attachediframe: https://accounts.google.com(13) Inserted(11) ParsedHTMLParserDomain: asean.orgPage:https://www.asean.orgPage:https://www.asean.org(10) User Navigation(7) Compiled(8) CreatedScript: 272/adFeedback.js(0) ParsedHTMLParser(3) Compiled(5) Request(4) DOM Insertion(4) DOM InsertionScript: 271/adv.js(7) CompiledDomain:jupyter.eﬂinwood.topDomain: jsdelivr.net(1) RequestEndpoint:index.html(1) Request(2) ResponseEndpoint:/adv.js(6) ResponseEndpoint:/adFeedback.js(6) ResponseEndpoint:/ﬁngerprint.jsDomain:malicious.com(12) RequestEndpoint:index.html(9) Attachediframe:  OverlayScript: 273/ﬁngerprint.js(5) RequestSession 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA790TTP ID
Severity
Score Description & Pattern
User-Level Property Description
T1204.001 Medium
6
T1204.002 Very High
10
T1189
Medium
6
User Execution: User navigates to an unknown domain.
(p:Page) − Navigated → (t:Page)
where p.securityOrigin = 𝑑𝑜𝑚𝑎𝑖𝑛
and t.securityOrigin ∉ 𝐷𝑝𝑟𝑜 𝑓 𝑖𝑙𝑒
User Execution: User Downloads unknown file.
(p:Page) − File-Download → (t:File)
where p.securityOrigin = 𝑑𝑜𝑚𝑎𝑖𝑛
and t.remoteOrigin ∈ 𝐷𝑣
Initial Access: Unknown iframe Injection
(s:Script) − Inserted → (i:Iframe) − Attached → (p:Page)
where (s.sourceOrigin ∈ 𝐷𝑣 or i.securityOrigin ∈ 𝐷𝑣)
and p.securityOrigin = 𝑑𝑜𝑚𝑎𝑖𝑛
Table 2: The set of TTPs used in Mnemosyne’s weighting sys-
tem.
pages related to the compromised domain. Specifically, we create
the set 𝑃𝑑𝑜𝑚𝑎𝑖𝑛 = {𝑝 : 𝑝.𝑠𝑒𝑐𝑢𝑟𝑖𝑡𝑦𝑂𝑟𝑖𝑔𝑖𝑛 = 𝑑𝑜𝑚𝑎𝑖𝑛} where 𝑑𝑜𝑚𝑎𝑖𝑛
is the compromised domain. Next, for all pages, 𝑝𝑖 ∈ 𝑃𝑑𝑜𝑚𝑎𝑖𝑛,
Mnemosyne performs a reachability analysis. The reachability anal-
ysis searches the browser causality graph, beginning at 𝑝𝑖, to collect
all of the involved objects and network events that occurred when
loading the page. This query identifies the domain set, 𝐷, which is
the set of domains that were communicated with while pages in
𝑃𝑑𝑜𝑚𝑎𝑖𝑛 were loaded into the browser and identifies the earliest and
latest timestamps in which network events were made to a domain
𝑑𝑖 ∈ 𝐷. By extracting the timestamps from the relevant network
events, Mnemosyne can reconstruct a chronology profile, which
lists the domains in 𝐷 in descending order by timestamps. Next, the
version reconstruction component converts the generated chronol-
ogy report into versions of the website. The versioning system
reconstructs versions based on the domains that were communi-
cated with while the page was loaded into the browser. To construct
versions of the website, our system breaks up the chronology report
into time windows and then aggregates domains together based on
the time the domain first interacted with the website. Specifically,
when a set of domains fall within the same time window, they are
aggregated into the same domain-version, 𝐷𝑣.
Definition 1 (Domain Version). Given a time window, [𝑡𝑠, 𝑡𝑒],
and a webpage, 𝑝𝑖, a Domain Version := {𝑑 ∈ 𝐷 : 𝑝𝑖 communicated
with d for the first time when loading 𝑝𝑖 in [𝑡𝑠, 𝑡𝑒]}
Manually inspecting the domain sets to determine the boundaries
of new versions is time-consuming and leads to analysis fatigue [23].
For this reason, we automated this process. We first rely on a profil-
ing phase that identifies the profile domain version, 𝐷𝑝𝑟𝑜 𝑓 𝑖𝑙𝑒, which
represents the set of benign domains that are responsible for com-
monly serving content to visitors of the compromised website. We
define the time window required to learn 𝐷𝑝𝑟𝑜 𝑓 𝑖𝑙𝑒 as the profiling
phase, which has a duration of 𝜔 days. We provide a detailed dis-
cussion of how to appropriately calculate 𝜔 in §8.1. After 𝐷𝑝𝑟𝑜 𝑓 𝑖𝑙𝑒
has been learned, Mnemosyne begins creating new domain ver-
sions on the date that a new domain was observed. Additionally,
when multiple domains appear in the same day, Mnemosyne will
aggregate these domains into the same domain-version.
Version ID
Parent Version ID
Page Set
Δ-Set
Size
User Set
A unique identifier for this version.
The parent version’s ID.
The set of page IDs assigned to this version.
The set of objects that were responsible for generating this version.
The number of pages assigned to this version.
The set of users for this version.
Table 3: The metadata properties of a user-level version.
3.5.2 Version Prioritization. To make Mnemosyne more efficient
in locating the window of compromise, we prioritize the domain
versions in the order of their likelihood to be the version that
truly represents the window-of-compromise. This prioritization
analyzes each domain version independently to identify suspicious
behavior causally dependent on this domain version. We quantify
the suspiciousness of these behaviors using a weighting system.
Based on the behaviors found, an overall suspiciousness score is
defined for the domain version. The domain versions are then
placed in a priority queue based on their suspiciousness score. This
prioritization focuses the analysis on the most suspicious versions,
increasing the investigator’s efficiency.
Weighting System. Mnemosyne’s weighting system is TTP-based,
analogous to existing state-of-the-art, whole-system auditing ap-
proaches (e.g., Holmes [52] and Rapsheet [24]) in the sense that
it relies on matching browser-based audit logs to existing attack
patterns in the MITRE ATT&CK Framework [5]. The set of TTPs
Mnemosyne relies on to detect suspicious domain versions and the
patterns required to match these TTPs to the browser-level audit
logs is defined in Table 2. For each domain version 𝐷𝑣, Mnemosyne
calculates a suspiciousness score. First, Mnemosyne conducts a
reachability analysis, starting from the set of domains in 𝐷𝑣, to
identify the set of pages impacted by this domain version, which
we call 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑. For each page in 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑, we search for audit
events that match a TTP pattern. The score of the domain version
is the sum of the severity scores of the matched TTPs defined in
the Score column of Table 2.
3.6 User-Level Analysis
The final stage in Mnemosyne’s analysis is the user-level analysis.
The purpose of the user-level analysis is to identify how a domain-
version behaved differently based on the user that was visiting the
compromised website, with the ultimate goal of minimizing the
effort required by the forensic analyst to determine which users
were unaffected, targeted, or victims of the attack. For each domain
version, 𝐷𝑣, pulled from the priority queue, and the set of pages,
𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑, associated with it, the user-level analysis clusters pages
in 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑 that had similar behaviors while they were loaded into
the browser. This clustering minimizes the number of pages the FA
needs to analyze by aggregating pages with similar behaviors. The
FA can then analyze clusters as one and assess and make decisions
about entire clusters of pages instead of only a single page, reducing
the amount of effort and time required to complete the investigation.
The clustering approach has two stages. The first stage extracts
a features set from each page in 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑. In the second stage, a
differential analysis is completed over the feature sets extracted.
Session 3B: Malware CCS '20, November 9–13, 2020, Virtual Event, USA791Figure 3: Three subgraphs related to visiting hxxps://www.asean.org during the window-of-compromise. (a) represents a visit
by a non-targeted user, (b) represents a visit by a targeted user, and (c) represents a visit by a victim of the attack.
The differential analysis phase generates clusters of pages. We call
these clusters user-level versions; the term cluster and user-level
version are used interchangeably.
Definition 2 (User-Level Version). A User-Level Version :=
{𝑝𝑖 ∈ 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑, 𝑚𝑒𝑡𝑎𝑑𝑎𝑡𝑎(𝑝𝑖) : all 𝑝𝑖 share the same feature set}.
For each user-level version, a set of metadata properties, defined
in Table 3, is tracked. We will provide additional information about
each property during the remainder of this section. The final step
of the differential analysis is to insert the user level versions into
a versioning tree, where nodes are user level versions and edges
represent dependencies between the versions. The benefit of this
version tree is that it orders the versions and allows the forensic
analyst to quickly determine what modifications were made to
create the new version and the ancestry of each version.
Feature Extraction Phase. For each page 𝑝𝑖 in 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑, we
3.6.1
extract a set of features. Specifically, Mnemosyne collects all paths
from the domains in 𝐷𝑣 to the page 𝑝𝑖 by querying the audit graph.
The result of this query is the set of all paths, 𝑃𝐴𝑇 𝐻𝑆𝑑→𝑝𝑖 , where
𝑑 ∈ 𝐷𝑣. For example, in Figure 3.a we see the results of this query
on the domain version, 𝐷𝑣 = { jupyter.elfinwood.top, jsdeliver.net
}. It returns four paths (cyan, purple, green, and blue). The set of
paths returned from the causality query are combined to create a
subgraph, 𝑆𝑝𝑖 . This process is repeated for all pages in 𝑃𝑎𝑓 𝑓 𝑒𝑐𝑡𝑒𝑑.
Figure 3 shows the subgraphs for three example pages. (a) represents
a page where the user was unaffected by the attack, (b) represents
a page where the user was targeted, which is highlighted in orange,
and (c) represents a page where the user was a victim of the attack,
which is highlighted in pink. The next step converts the subgraph,
𝑆𝑝 to a feature set, ˆ𝑆𝑝. For each node in 𝑆𝑝, we extract its identifier.
The identifier for each node is the bolded attribute in Table 1a. For
the edges, we create a three tuple containing the relationship type,
and the identifier of the start and end nodes. The feature set consists
of the nodes’ identifiers and the relationship tuples for the page
𝑝𝑖. This process is completed for all the related subgraphs. After
creating ˆ𝑆𝑝𝑖 for all pages, the next task is to assign each page to its
initial user-level version. A page is assigned to its initial user-level
version based on its feature sets. Specifically, pages are assigned to
a user-level version, 𝑈𝑣, if ˆ𝑆𝑝𝑖 == 𝑈𝑣 .Δ. If no match is found, a new
user-level version will be created, this page will be assigned to it,
and 𝑈𝑣 .Δ will be set to ˆ𝑆𝑝𝑖 .
3.6.2 Differential Analysis. The final phase in Mnemosyne’s anal-
ysis is differential analysis. Given the initial user-level version set
UserVersions, the differential analysis creates a version graph,
where each node represents a unique user-level version and the
edges represent ancestral relationships between the versions in
the graph. For our analysis, an ancestral relationship implies the
resources in the parent’s Δ-Set were also observed by pages in the
child’s pageSet. The advantage of presenting the versions embedded
into a version graph is that it allows the FA to assess the modifica-
tions and differences made between the child and parent versions,
and quickly determine which users observed which behaviors.
The differential analysis is initiated by selecting the root ver-
sion from the set UserVersions, shown on line 5 of Algorithm 1.
The selection of the root version is based on size of the user level
version’s pageSet. The version with the largest page set is selected
to be the current version. The current version will then be in-
serted into the VersionGraph. Next, the algorithm iterates over
the remaining user-level versions. For each user-level version, 𝑢𝑣 ∈
UserVersions, the algorithm will determine if current is a par-
ent version of 𝑢𝑣. current is considered a parent when the intersec-
tion of 𝑢𝑣 .Δ-Set and 𝑐𝑢𝑟𝑟𝑒𝑛𝑡 .Δ-Set is non-empty, as shown on line
10. When a parent version is found, the differential analysis updates
the user version’s Δ-Set. Specifically, a diff operation is performed
on the user version’s delta set, where 𝑢𝑣 .Δ := 𝑢𝑣 .Δ−𝑐𝑢𝑟𝑟𝑒𝑛𝑡 .Δ This
operation prevents duplicating the same behaviors, which would
increase the FA’s workload and prolong the analysis. After updating
the Δ-set of 𝑢𝑣, we compare 𝑢𝑣’s Δ-set to the remaining user ver-
sions’ Δ-set. If they are equivalent, we run a merge operation and
merge the two user-level versions. This step maximizes the cluster
sizes, minimizing the feature sets that the FA has to manually ana-
lyze. We repeat this process, assigning the version with the largest,
remaining page set to current, until every user-level version has
been inserted into VersionGraph. The output of this differential