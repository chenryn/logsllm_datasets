lower case
Decode percent-encoded octets
of unreserved characters
Remove default port
Add trailing ‘/’
Removing dot-segments (‘.’)
of
of
http://www.example.org:80/path
Equivalence of HTTP://WWW.EXAMPLE.ORG/PATH and
http://www.example.org/path
URL with sampled character from range %41-%5A (‘A’-‘Z’)
and %61-%7A (‘a’-‘z’)
Equivalence
http://www.example.org/path
Equivalence
http://www.example.org/path
Equivalence of http://www.example.org/path/././index.html
and http://www.example.org/path/index.html (Number of ‘.’
in the range of 1-5)
Equivalence of http://www.example.org/path/index.html#frag
and http://www.example.org/path/index.html
http://www.example.org/path/
and
and
and
and
http://www.example.org/path
https://www.example.org/path
of
http://10.0.0.1/path
Equivalence
of
http://example.org/path
Equivalence of https://www.example.org/path//index.html and
http://example.org/path/index.html
Multiple URLs with characters sampled from \x00-\xffffff
Double quote character http://www.example.org/path”path
https://www.example.org/path\index.html
Multiple URLs with character sampled from range %C0 -
%FF
URLs including characters \a, \b, \e, \n, \t, \0, \v, \f, \r
URLs including percent-encoded delimiters ‘#’, ‘?’, and ‘/’ in
the path
http://...www.example.org (Number of ‘.’ in the range of 1-5)
and
http://www.example.org/pa th
http://www.example.org/path%a0path
end fragment
Removing the
‘#frag’
Replacing IP with domain name Equivalence
Limiting protocols
Removing duplicate slashes
Unicode character handling
Printable characters that need to
be percent-encoded
Backslash character (‘\’)
Non–ASCII characters that neeed
to be percent-encoded
Control characters
Encoded delimiters
Leading dots
Whitespace/Tab
324
Q. Yang et al.
4.2 The Experiments
Our ﬁrst experiment aims to discover diﬀerences on how browsers parse and
transform URLs, before submitting a request to the server. We developed a
browser driver, as a bash script, which launches a browser and requests a URL
from the set of test inputs. The browser then performs canonicalization and
transformations on the URL and establishes a connection to our server, where
it sends the request including the transformed URL. The server was developed
using Python on top of the werkzeug library and accepts every URL request,
logs it, and responds with a default web page. After the page is loaded at the
browser, we also extract the URL that was requested from the browser’s history
database. The URLs requested, received by the server, and stored in the history
database are compared to identify discrepancies. To facilitate comparison, we use
a unique path preﬁx on each request that allows us to compare the appropriate
URLs.
The second experiment means to evaluate how online URL scanners deal with
URLs reported as being malicious, and for scanners that also follow links within
the reported pages, discover how they treat the URLs contained within those
pages. The latter test serves to establish how a scanner’s internal algorithms
parse and transform URLs, which reveals how it operates when or if it is used
to crawl the web for malicious content. For the ﬁrst part of this experiment, we
manually submit URLs pointing to malicious content to the scanners using the
interface provided, most commonly an HTML form. For the latter, we submit
URLs pointing to benign pages, which do not directly contain malicious content,
but do include URLs pointing to malicious content. All URLs point to our own
server that logs information like the remote IP address, other information like
the user-agent included in the request, and the timestamp of the request. We
also use unique paths in each case to diﬀerentiate between scanners.
In the our ﬁnal experiment, we focus on browsers and URL scanners that work
in synergy, such as Chrome and Firefox using Google’s Safe Browsing malicious-
URLs database. In this test, we submit both benign and malicious websites
located in diﬀerent URL paths, using characters and patterns discovered in the
previous experiment to “hide” malicious content from the scanner. The aim is to
conﬁrm that we can construct URLs that will point the scanner to safe content,
while a browser following the URL will visit malicious content instead.
5 Results
5.1 Browsers
We tested four browser families on three desktop operating systems (OS). We
tested Firefox v35.0.1, Chrome v40.0.2214.115, and Opera v27.0.1689.69 on
Ubuntu v14.04 LTS, Mac OS X v10.10.2, and Windows 7 SP1. We also tested
Safari v8.0.3 on Mac OS X, and Safari v5.1.7 and Internet Explorer (IE) 8.0.
7601.17514 on Windows 7. Our results show that Firefox URL-encodes back-
slashes to (\ → %5C), while every other browser canonicalizes the URL replac-
ing backlashes with forward slashes (\ → /). We also tested three mobile OS:
WYSISNWIV: What You Scan Is Not What I Visit
325
Android v4.4.2 with Firefox v38.0.5, Chrome v43.0.2357.78, and Opera Mini
v29.1, iOS 8 with Chrome v43.0.2357.51, Safari v8.3, and Opera Mini, and Win-
dows Mobile 8.1 with IE and Opera Mini. Once again, Firefox URL-encodes
backslashes. Interestingly, Opera Mini on iOS leaves the backslash character
unchanged, while every other browser replaces them with slashes. These mod-
iﬁcations occur both when a user types a URL in the address bar and when
clicking on a link. As a result, browsers doing canonicalization can never access
pages hosted on URLs containing a backslash as a legitimate character.
Table 2. The URL scanners considered during testing. All, except Wepawet, scan for
both Phishing and malware sites. Some of the scanners, such as VirusTotal, also use
third-party databases and scanners.
URL scanners
Available actions
Scan URL Query URLs DB Report URL
(cid:2)
Uses third-party
database/scanner
Wepawet
Google safe browsing
Virustotal
Sucuri sitecheck
Gred
Online link scan
urlQuery
PhishTank
Scumware
WebInspector
Zscaler Zulu
SmartScreen ﬁlter
ScanURL
Stopbadware
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
5.2 URL Scanners
Table 2 lists all the URL scanners we considered in our experiments. We selected
several state-of-the-art URL scanners, including products of academic research
and freely-accessible production systems. For example, Wepawet [20] is a prod-
uct of academic research, while VirusTotal [10], Sucuri SiteCheck [8], gred [3],
Online Link Scan [4], urlQuery [9], ScanURL [12], PhishTank [5], Scumware [6],
WebInspector [11], and Zscaler Zulu URL Risk Analyzer [13] are mature prod-
ucts. We focused our experiments on Google Safe Browsing [26] and Microsoft’s
SmartScreen Filter [36], as the ﬁrst is being used by Chrome, Firefox, and Safari,
and the latter from IE, for protecting users from malicious URLs. Most scanners
326
Q. Yang et al.
permit us to submit URLs (e.g., through a web form) for scanning, returning a
report on their state (e.g., whether it is malicious). Others, oﬀer a way to check
whether a URL is contained in their database of malicious URL, while, ﬁnally,
some allow us to report URLs, which will be later checked.
From the scanners listed in Table 2, we tested all that allowed us to submit
a URL for scanning or report URLs. We also tested ScanURL, which, after
submitting a URL query, provides feedback on the actual URL being searched
in the database, granting us this way an indication on the transformations it
performs on URLs. There was no way to test stopbadware or SmartScreen Filter.
The ﬁrst did not provide a way to expose how it handles URLs, while the latter
is integrated into IE, where the user can use the graphical interface to manually
check and report URLs. Because both the URL submission process and ﬁltering
is handled by the browser, we cannot test for discrepancies in a meaningful way.
Table 3. The tested URL scanners handle certain characters diﬀerently from browsers.
Pairs of browsers and scanners that have such discrepancies leave users exposed when
the particular scanner is used to ﬁlter URLs, as the scanner does not process the same
page the browser will visit (e.g., the pairs Chrome/Firefox and Google Safe Browsing).
Scanners
Transformations
Wepawet
VirusTotal
gred
Online Link Scan
urlQuery
ScanURL
PhishTank
Scumware
WebInspector
Zscaler Zulu
Google Safe Browsing varies(cid:2)(cid:129)
deleted(cid:2)
Sucuri SiteCheck
deleted(cid:2)
/†
/†
%3F
%3F
%3F
%3F
%3F
%3F
%3F
?(cid:2)
error(cid:2)
%23
%23
%23
%23
%23
%23
%23
%23
error(cid:2)
Manual submission
\
Injection in submitted page
\ %3F (?) %23 (#)
%3F (?)
%23 (#)
%23
#(cid:2)
%3F
?(cid:2)
%5C‡
N/A
%5C‡
N/A
deleted(cid:2) %3F , %253F %23, %2523 error(cid:2) %3F
\\(cid:2)
N/A
%5C‡
N/A
deleted(cid:2)
N/A
\\(cid:2)
N/A
N/A
%23
%5C‡
/†
/†
error(cid:2)
%3F
%3F
%3F
error(cid:2)