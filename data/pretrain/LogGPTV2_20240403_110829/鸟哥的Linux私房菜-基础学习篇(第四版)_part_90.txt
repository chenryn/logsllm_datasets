之前，也正如同上面提到的，由于系统需要一些变量来提供他数据的存取 （或者是一些环境的设置参数值， 例如是否要显示彩色等等的） ，
所以就有一些所谓的“环境变量” 需要来读入系统中了！这些环境变量例如 PATH、HOME、MAIL、SHELL 等等，都是很重要的， 为了区别与
自订变量的不同，环境变量通常以大写字符来表示呢！
脚脚本本程程序序设设计计 （（shell script）） 的的好好帮帮手手
这些还都只是系统默认的变量的目的，如果是个人的设置方面的应用呢：例如你要写一个大型的 script 时，有些数据因为可能由于使用
者习惯的不同而有差异，比如说路径好了，由于该路径在 script 被使用在相当多的地方，如果下次换了一部主机，都要修改 script 里面的所有
路径，那么我一定会疯掉！ 这个时候如果使用变量，而将该变量的定义写在最前面，后面相关的路径名称都以变量来取代， 嘿嘿！那么你只
要修改一行就等于修改整篇 script 了！方便的很！所以，良好的程序设计师都会善用变量的定义！
图10.2.2、变量应用于 shell script 的示意图
最后我们就简单的对“什么是变量”作个简单定义好了： “变量就是以一组文字或符号等，来取代一些设置或者是一串保留的数据！”， 例
如：我设置了“myname”就是“VBird”，所以当你读取 myname 这个变量的时候，系统自然就会知道！哈！那就是 VBird 啦！ 那么如何“显示变
量”呢？这就需要使用到 echo 这个指令啦！
说的口沫横飞的，也不知道“变量”与“变量代表的内容”有啥关系？ 那我们就将“变量”的“内容”拿出来给您瞧瞧好了。你可以利用 echo 这
个指令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号“ $ ”才行，举例来说，要知道 PATH 的内容，该如何是好？
变变量量的的取取用用: echo
[dmtsai@study ~]$ echo $variable
[dmtsai@study ~]$ echo $PATH
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin
[dmtsai@study ~]$ echo ${PATH} # 近年来，鸟哥比较偏向使用这种格式喔！
变量的取用就如同上面的范例，利用 echo 就能够读出，只是需要在变量名称前面加上 $ ， 或者是以 ${变量} 的方式来取用都可以！当
然啦，那个 echo 的功能可是很多的， 我们这里单纯是拿 echo 来读出变量的内容而已，更多的 echo 使用，请自行给他 man echo 吧！ ^_^
例题：
请在屏幕上面显示出您的环境变量 HOME 与 MAIL：
答：
echo $HOME 或者是 echo ${HOME}
echo $MAIL 或者是 echo ${MAIL}
现在我们知道了变量与变量内容之间的相关性了，好了，那么我要如何“设置”或者是“修改” 某个变量的内容啊？很简单啦！用“等号
（=）”连接变量与他的内容就好啦！举例来说： 我要将 myname 这个变量名称的内容设置为 VBird ，那么：
[dmtsai@study ~]$ echo ${myname}
<==这里并没有任何数据～因为这个变量尚未被设置！是空的！
[dmtsai@study ~]$ myname=VBird
[dmtsai@study ~]$ echo ${myname}
VBird <==出现了！因为这个变量已经被设置了！
瞧！如此一来，这个变量名称 myname 的内容就带有 VBird 这个数据啰～ 而由上面的例子当中，我们也可以知道： 在 bash 当中，当
一个变量名称尚未被设置时，默认的内容是“空”的。 另外，变量在设置时，还是需要符合某些规定的，否则会设置失败喔！这些规则如下所示
啊！
Tips
要请各位读者注意喔，每一种 shell 的语法都不相同～在变量的使用上，bash 在你没有设置的变量中强迫去 echo 时，它会显示出空的值。
在其他某些 shell 中，随便去 echo 一个不存在的变量，它是会出现错误讯息的喔！要注意！要注意！
变变量量的的设设置置规规则则
1. 变量与变量内容以一个等号“=”来链接，如下所示：
“myname=VBird”
2. 等号两边不能直接接空白字符，如下所示为错误：
“myname = VBird”或“myname=VBird Tsai”
3. 变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：
“2myname=VBird”
4. 变量内容若有空白字符可使用双引号“"”或单引号“'”将变量内容结合起来，但
双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：
“var="lang is $LANG"”则“echo $var”可得“lang is zh_TW.UTF-8”
单引号内的特殊字符则仅为一般字符 （纯文本），如下所示：
“var='lang is $LANG'”则“echo $var”可得“lang is $LANG”
5. 可用跳脱字符“ \ ”将特殊符号（如 [Enter], $, \, 空白字符, '等）变成一般字符，如：
“myname=VBird\ Tsai”
6. 在一串指令的执行中，还需要借由其他额外的指令所提供的信息时，可以使用反单引号“`指令`”或 “$（指令）”。特别注意，那个 ` 是键盘
上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的设置：
“version=$（uname -r）”再“echo $version”可得“3.10.0-229.el7.x86_64”
7. 若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示：
“PATH="$PATH":/home/bin”或“PATH=${PATH}:/home/bin”
8. 若该变量需要在其他子程序执行，则需要以 export 来使变量变成环境变量：
“export PATH”
9. 通常大写字符为系统默认变量，自行设置变量可以使用小写字符，方便判断 （纯粹依照使用者兴趣与嗜好） ；
10. 取消变量的方法为使用 unset ：“unset 变量名称”例如取消 myname 的设置：
“unset myname”
下面让鸟哥举几个例子来让你试看看，就知道怎么设置好你的变量啰！
范例一：设置一变量 name ，且内容为 VBird
[dmtsai@study ~]$ 12name=VBird
bash: 12name=VBird: command not found... <==屏幕会显示错误！因为不能以数字开头！
[dmtsai@study ~]$ name = VBird <==还是错误！因为有空白！
[dmtsai@study ~]$ name=VBird <==OK 的啦！
范例二：承上题，若变量内容为 VBird's name 呢，就是变量内容含有特殊符号时：
[dmtsai@study ~]$ name=VBird's name
# 单引号与双引号必须要成对，在上面的设置中仅有一个单引号，因此当你按下 enter 后，
# 你还可以继续输入变量内容。这与我们所需要的功能不同，失败啦！
# 记得，失败后要复原请按下 [ctrl]-c 结束！
[dmtsai@study ~]$ name="VBird's name" <==OK 的啦！
# 指令是由左边向右找→，先遇到的引号先有用，因此如上所示， 单引号变成一般字符！
[dmtsai@study ~]$ name='VBird's name' <==失败的啦！
# 因为前两个单引号已成对，后面就多了一个不成对的单引号了！因此也就失败了！
[dmtsai@study ~]$ name=VBird\'s\ name <==OK 的啦！
# 利用反斜线 （\） 跳脱特殊字符，例如单引号与空白键，这也是 OK 的啦！
范例三：我要在 PATH 这个变量当中“累加”:/home/dmtsai/bin 这个目录
[dmtsai@study ~]$ PATH=$PATH:/home/dmtsai/bin
[dmtsai@study ~]$ PATH="$PATH":/home/dmtsai/bin
[dmtsai@study ~]$ PATH=${PATH}:/home/dmtsai/bin
# 上面这三种格式在 PATH 里头的设置都是 OK 的！但是下面的例子就不见得啰！
范例四：承范例三，我要将 name 的内容多出 "yes" 呢？
[dmtsai@study ~]$ name=$nameyes
# 知道了吧？如果没有双引号，那么变量成了啥？name 的内容是 $nameyes 这个变量！
# 呵呵！我们可没有设置过 nameyes 这个变量呐！所以，应该是下面这样才对！
[dmtsai@study ~]$ name="$name"yes
[dmtsai@study ~]$ name=${name}yes <==以此例较佳！
范例五：如何让我刚刚设置的 name=VBird 可以用在下个 shell 的程序？
[dmtsai@study ~]$ name=VBird
[dmtsai@study ~]$ bash <==进入到所谓的子程序
[dmtsai@study ~]$ echo $name <==子程序：再次的 echo 一下；
<==嘿嘿！并没有刚刚设置的内容喔！
[dmtsai@study ~]$ exit <==子程序：离开这个子程序
[dmtsai@study ~]$ export name
[dmtsai@study ~]$ bash <==进入到所谓的子程序
[dmtsai@study ~]$ echo $name <==子程序：在此执行！
VBird <==看吧！出现设置值了！
[dmtsai@study ~]$ exit <==子程序：离开这个子程序
什么是“子程序”呢？就是说，在我目前这个 shell 的情况下，去启用另一个新的 shell ，新的那个 shell 就是子程序啦！在一般的状态下，
父程序的自订变量是无法在子程序内使用的。但是通过 export 将变量变成环境变量后，就能够在子程序下面应用了！很不赖吧！至于程序的相
关概念， 我们会在第十六章程序管理当中提到的喔！
范例六：如何进入到您目前核心的模块目录？
[dmtsai@study ~]$ cd /lib/modules/`uname -r`/kernel
[dmtsai@study ~]$ cd /lib/modules/$（（uname -r））/kernel # 以此例较佳！
每个 Linux 都能够拥有多个核心版本，且几乎 distribution 的核心版本都不相同。以 CentOS 7.1 （未更新前） 为例，他的默认核心版本
是 3.10.0-229.el7.x86_64 ，所以核心模块目录在 /lib/modules/3.10.0-229.el7.x86_64/kernel/ 内。 也由于每个 distributions 的这个值都不相同，
但是我们却可以利用 uname -r 这个指令先取得版本信息。所以啰，就可以通过上面指令当中的内含指令 $（uname -r） 先取得版本输出到 cd
... 那个指令当中，就能够顺利的进入目前核心的驱动程序所放置的目录啰！很方便吧！
其实上面的指令可以说是作了两次动作，亦即是：
1. 先进行反单引号内的动作“uname -r”并得到核心版本为 3.10.0-229.el7.x86_64
2. 将上述的结果带入原指令，故得指令为：“cd /lib/modules/3.10.0-229.el7.x86_64/kernel/”
Tips
为什么鸟哥比较建议记忆 $（ command ） 呢？还记得小时候学数学的加减乘除，我们都知道得要先乘除后加减。那如果硬要先加减再乘除呢？
当然就是加上括号 （） 来处理即可啊！所以啰，这个指令的处理方式也差不多，只是括号左边得要加个钱字号就是了！
范例七：取消刚刚设置的 name 这个变量内容
[dmtsai@study ~]$ unset name
根据上面的案例你可以试试看！就可以了解变量的设置啰！这个是很重要的呦！请勤加练习！ 其中，较为重要的一些特殊符号的使用
啰！例如单引号、双引号、跳脱字符、钱字号、反单引号等等，下面的例题想一想吧！
例题：
在变量的设置当中，单引号与双引号的用途有何不同？
答：
单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，但单引号内仅能是一般字符 ，而不会有特殊符号。我
们以下面的例子做说明：假设您定义了一个变量， name=VBird ，现在想以 name 这个变量的内容定义出 myname 显示
VBird its me 这个内容，要如何订定呢？
[dmtsai@study ~]$ name=VBird
[dmtsai@study ~]$ echo $name
VBird
[dmtsai@study ~]$ myname="$name its me"