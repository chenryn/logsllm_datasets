I want to use the main processing loop of a C-library, which implements
specific functionality in callbacks.  
The callbacks shall be implemented in Julia. The following MWE demonstrates
the difficulties, when the callback functions are invoked from POSIX-threads,
which have been launched in C.
callmtcb.jl
    module Testcb
        f1() = println("called f1()")
        f2() = exit(99)
        cf1 = @cfunction f1 Cvoid ()
        cf2 = @cfunction f2 Cvoid ()
        push!(Base.DL_LOAD_PATH, pwd())
        dl = Base.Libc.dlopen("libmtcb")
        dls = Base.Libc.Libdl.dlsym(dl, :cb_setup)
        ccall(dls, Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}), cf1, cf2)
    end
libmtcb.c
    #include 
    pthread_t threadid;
    void(*savedf2)(void);
    void* cb_thread(void* arg);
    void cb_setup(void(*f1)(void), void(*f2)(void)) {
        (*f1)();
        savedf2 = f2;
        pthread_create(&threadid, NULL, cb_thread, (void*)NULL);
        pthread_join(threadid, NULL);
        pthread_exit((void*)0);
    }
    void* cb_thread(void* arg) {
        (*savedf2)();
        return (void*)0;
    }
Result of execution:
     make run
    /home/crusius/julia/julia --startup-file=no callmtcb.jl
    called f1()
    signal (11): Segmentation fault
    in expression starting at /home/crusius/dev/FuseApi/test/embed/callmtcb.jl:11
    Allocations: 2749 (Pool: 2739; Big: 10); GC: 0
    make: *** [Makefile:18: run] Segmentation fault (core dumped)
A `gdb` session revealed, that the callback to `f2` propagates into the call
to `exit(99)` and then fails.  
Actually the threads local variable `jl_pgcstack` is not initialized, so the
Julia runtime has no chance to succeed.
The test files and the setup for a debug session are found here:
https://github.com/KlausC/FuseApi.jl/blob/main/test/embed/  
There is a `Makefile` with `run` and `debug` targets to explore the example
under Linux and Gnome.