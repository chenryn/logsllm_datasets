to
/dev/caphash. Factotum then passes the origi-
nal string to another process on the same
machine, running as user userid1, which writes
the string to /dev/capuse. The kernel hashes
the string and looks for a matching hash in its
list. If it finds one, the writing process’s user id
changes from userid1 to userid2. Once used, or
if a timeout expires, the capability is discarded
by the kernel.
The capabilities are local
to the machine on
which they are created. Hence a factotum run-
ning on one machine cannot pass capabilities to
processes on another and expect them to work.
2.4. Keys
We define the word key to mean not only a
secret, but also a description of the context in
which that secret is to be used: the protocol,
server, user, etc. to which it applies. That is, a
key is a combination of secret and descriptive
information used to authenticate the identities of
parties transmitting or
receiving information.
The set of keys used in any authentication
depends both on the protocol and on parameters
passed by the program requesting the authentica-
tion.
Taking a tip from SDSI [15], which represents
security information as textual S-expressions,
keys in Plan 9 are represented as plain UTF-8
text. Text is easily understood and manipulated
by users. By contrast, a binary or other cryptic
format can actually reduce overall security.
Binary formats are difficult for users to examine
and can only be cracked by special tools, them-
selves poorly understood by most users. For
example, very few people know or understand
what’s inside their X.509 certificates. Most
don’t even know where in the system to find
them. Therefore, they have no idea what they are
trusting, and why, and are powerless to change
their trust relationships. Textual, centrally stored
and managed keys are easier to use and safer.
Plan 9 has historically represented databases as
attribute/value pairs, since they are a good foun-
dation for selection and projection operations.
Factotum therefore represents the keys in the
format attribute=value, where attribute is an
identifier, possibly with a single-character prefix,
and value is an arbitrary quoted string. The pairs
themselves are separated by white space. For
example, a Plan 9 key and an APOP key might
be represented like this:
dom=bell−labs.com proto=p9sk1 user=gre
!password=’don’’t tell’
proto=apop server=x.y.com user=gre
!password=’open sesame’
If a value is empty or contains white space or
single quotes, it must be quoted; quotes are rep-
resented by doubled single quotes. Attributes
that begin with an exclamation mark (!) are con-
sidered secret. Factotum will never let a secret
value escape its address space and will suppress
keyboard echo when asking the user to type one.
A program requesting authentication selects a
key by providing a query, a list of elements to be
matched by the key. Each element in the list is
either an attribute=value pair, which is satisfied
by keys with exactly that pair; or an attribute fol-
lowed by a question mark, attribute?, which is
satisfied by keys with some pair specifying the
attribute. A key matches a query if every ele-
ment in the list
is satisfied. For instance, to
select the APOP key in the previous example, an
APOP client process might specify the query
server=x.y.com proto=apop
Internally, factotum’s APOP module would add
the requirements of having user and !password
attributes, forming the query
server=x.y.com proto=apop user? !password?
when searching for an appropriate key.
Factotum modules expect keys to have some
well-known attributes. For instance, the proto
attribute specifies the protocol module responsi-
ble for using a particular key, and protocol mod-
ules may expect other well-known attributes
(many expect keys to have !password attributes,
for example). Additional attributes can be used
as comments or for further discrimination with-
out intervention by factotum; for example, the
APOP and IMAP mail clients conventionally
include a server attribute to select an appropri-
ate key for authentication.
Unlike in SDSI, keys in Plan 9 have no nested
structure. This design keeps the representation
simple and straightforward.
If necessary, we
could add a nested attribute or, in the manner of
relational databases, an attribute that selects
another tuple, but so far the simple design has
been sufficient.
A simple common structure for all keys makes
them easy for users to administer, but the set of
attributes
still
protocol-specific and can be subtle. Users may
still need to consult a manual to understand all
details. Many
user,
password, server) are self-explanatory and our
short experience has not uncovered any particular
difficulty in handling keys. Things will likely
get messier, however, when we grapple with
public keys and their myriad components.
interpretation
attributes
(proto,
and
their
is
2.5. Protecting keys
Secrets must be prevented from escaping
factotum. There are a number of ways they
could leak: another process might be able to
debug the agent process, the agent might swap
out to disk, or the process might willingly dis-
close the key. The last is the easiest to avoid:
secret information in a key is marked as such,
and whenever factotum prints keys or queries
for new ones, it is careful to avoid displaying
secret information. (The only exception to this is
the ‘‘plaintext password’’ protocol, which con-
sists of sending the values of the user and
!password attributes. Only keys tagged with
proto=pass can have their passwords disclosed
by this mechanism.)
Preventing the first two forms of leakage requires
help from the kernel. In Plan 9, every process is
represented by a directory in the /proc file sys-
tem. Using the files in this directory, other pro-
cesses could (with appropriate access permission)
examine factotum’s memory and registers.
Factotum is protected from processes of other
users by the default access bits of its /proc
directory. However, we’d also like to protect the
agent from other processes owned by the same
user, both to avoid honest mistakes and to pre-
vent an unattended terminal being exploited to
discover secret passwords. To do this, we added
a control message to /proc called private.
Once the factotum process has written private
to its /proc/pid/ctl file, no process can access
factotum’s memory through /proc. (Plan 9 has
no other mechanism, such as /dev/kmem, for
accessing a process’s memory.)
Similarly, the agent’s address space should not
be swapped out, to prevent discovering unen-
crypted keys on the swapping media. The
noswap control message in /proc prevents this
scenario. Neither private nor noswap is spe-
cific to factotum. User-level file servers such as
dossrv, which interprets FAT file systems, could
use noswap to keep their buffer caches from
being swapped to disk.
Despite our precautions, attackers might still find
a way to gain access to a process running as the
host owner on a machine. Although they could
not directly access the keys, attackers could use
the local factotum to perform authentications
for them. In the case of some keys, for example
those locking bank accounts, we want a way to
disable or at least detect such access. That is the
role of the confirm attribute in a key. Whenever
a key with a confirm attribute is accessed, the
local user must confirm use of the key via a local
GUI. The next section describes the actual
mechanism.
We have not addressed leaks possible as a result
of someone rebooting or resetting a machine run-
ning factotum. For example, someone could
reset a machine and reboot it with a debugger
instead of a kernel, allowing them to examine the
contents of memory and find keys. We have not
found a satisfactory solution to this problem.
to
and
delkey
commands
2.6. Factotum transactions
External programs manage factotum’s internal
key state through its file interface, writing textual
the
key
/mnt/factotum/ctl file. Both commands take
a list of attributes as an argument. Key creates a
key with the given attributes,
replacing any
extant key with an identical set of public
attributes. Delkey deletes all keys that match the
given set of attributes. Reading the ctl file
returns a list of keys, one per line, displaying
only public attributes. The following example
illustrates these interactions.
% cd /mnt/factotum
% ls −l
−lrw−−−−−−− gre gre 0 Jan 30 22:17 confirm
−−rw−−−−−−− gre gre 0 Jan 30 22:17 ctl
−lr−−−−−−−− gre gre 0 Jan 30 22:17 log
−lrw−−−−−−− gre gre 0 Jan 30 22:17 needkey
−−r−−r−−r−− gre gre 0 Jan 30 22:17 proto
−−rw−rw−rw− gre gre 0 Jan 30 22:17 rpc
% cat >ctl
key dom=bell−labs.com proto=p9sk1 user=gre
!password=’don’’t tell’
key proto=apop server=x.y.com user=gre
!password=’bite me’
^D
% cat ctl
key dom=bell−labs.com proto=p9sk1 user=gre
key proto=apop server=x.y.com user=gre
% echo ’delkey proto=apop’ >ctl
% cat ctl
key dom=bell−labs.com proto=p9sk1 user=gre
%
If
(A file with the l bit set can be opened by only
one process at a time.)
The heart of the interface is the rpc file. Pro-
grams authenticate with factotum by writing a
request to the rpc file and reading back the reply;
this sequence is called an RPC transaction.
Requests and replies have the same format: a tex-
tual verb possibly followed by arguments, which
may be textual or binary. The most common
reply verb is ok, indicating success. An RPC
session begins with a start transaction;
the
argument is a key query as described earlier.
Once started, an RPC conversation usually con-
sists of a sequence of read and write transac-
the conversation is successful, an
tions.
authinfo transaction will
return information
about the identities learned during the transac-
tion. The attr transaction returns a list of
attributes for the current conversation; the list
includes any attributes given in the start query
as well as any public attributes from keys being
used.
As an example of the rpc file in action, consider
a mail client connecting to a mail server and
authenticating using the POP3 protocol’s APOP
challenge-response command. There are four
programs involved: the mail client P C, the client
factotum F C, the mail server P S, and the server
factotum F S. All authentication computations
are handled by the factotum processes. The
mail programs’ role is just to relay messages.
At startup, the mail server at x.y.com begins an
APOP conversation with its factotum to obtain
the banner greeting, which includes a challenge:
P S ﬁ F S: start proto=apop role=server
F S ﬁ P S: ok
P S ﬁ F S: read
F S ﬁ P S: ok +OK POP3 challenge
Having obtained the challenge, the server greets
the client:
P S ﬁ P C : +OK POP3 challenge
The client then uses an APOP conversation with
its factotum to obtain a response:
P C ﬁ F C : start proto=apop role=client
server=x.y.com
F C ﬁ P C : ok
P C ﬁ F C : write +OK POP3 challenge
F C ﬁ P C : ok
P C ﬁ F C : read
F C ﬁ P C : ok APOP gre response
requesting permission to use the key with those
public attributes. The graphical interface then
prompts the user for approval and writes back
tag=1 answer=yes
Factotum requires that start requests include a
proto attribute, and the APOP module requires
an additional role attribute, but
the other
attributes are optional and only restrict the key
space. Before responding to the start transac-
tion, the client factotum looks for a key to use
for the rest of the conversation. Because of the
arguments in the start request, the key must
have
and
server=x.y.com; as mentioned earlier,
the
APOP module additionally requires that the key
have user and !password attributes. Now that
the client has obtained a response from its
factotum, it echoes that response to the server:
proto=apop
public
attributes
P C ﬁ P S: APOP gre response
Similarly, the server passes this message to its
factotum and obtains another to send back.
P S ﬁ F S: write APOP gre response
F S ﬁ P S: ok
P S ﬁ F S: read
F S ﬁ P S: ok +OK welcome
P S ﬁ P C : +OK welcome
Now the authentication protocol is done, and the
server can retrieve information about what the
protocol established.
P S ﬁ F S: authinfo
F S ﬁ P S: ok client=gre
capability=capability
The authinfo data is a list of attr=value pairs,
here a client user name and a capability. (Proto-
cols that establish shared secrets or provide
mutual authentication indicate this by adding
appropriate attr=value pairs.) The capability can
be used by the server to change its identity to that
of the client, as described earlier. Once it has
changed its identity, the server can access and
serve the client’s mailbox.
Two more files provide hooks for a graphical
factotum control interface. The first, confirm,
allows the user detailed control over the use of
certain keys. If a key has a confirm= attribute,
then the user must approve each use of the key.
A separate program with a graphical interface
reads from the confirm file to see when a confir-
mation is necessary. The read blocks until a key
usage needs to be approved, whereupon it will
return a line of the form
confirm tag=1 attributes
(or answer=no).
The second file, needkey, diverts key requests.
In the APOP example, if a suitable key had not
been found during the start transaction,
factotum would have indicated failure by return-
ing a response indicating what key was needed:
F C ﬁ P C : needkey proto=apop
server=x.y.com user? !password?
A typical client would then prompt the user for
the desired key information, create a new key via
the ctl file, and then reissue the start request.
If the needkey file is open, then instead of fail-
ing, the transaction will block, and the next read
from the /mnt/factotum/needkey file will
return a line of the form
needkey tag=1 attributes
The graphical interface then prompts the user for
the needed key information, creates the key via
the ctl file, and writes back tag=1 to resume the
transaction.
The remaining files are informational and used
for debugging. The proto file contains a list of
supported protocols (to see what protocols the
system supports, cat /mnt/factotum/proto),
and the log file contains a log of operations and
debugging output enabled by a debug control
message.
The next few sections explain how factotum is
used by system services.
3. Authentication in 9P
Plan 9 uses a remote file access protocol, 9P
[12], to connect to resources such as the file
server and remote processes. The original design
for 9P included special messages at the start of a
conversation to authenticate the user. Multiple
users can share a single connection, such as when
a CPU server runs processes for many users con-
nected to a single file server, but each must
authenticate separately. The authentication pro-
tocol, similar to that of Kerberos [18], used a
sequence of messages passed between client, file
server, and authentication server to verify the
identities of the user, calling machine, and serv-
ing machine. One major drawback to the design
was that the authentication method was defined
by 9P itself and could not be changed. Moreover,
there was
relegate
no mechanism to
authentication to an external (trusted) agent, so a
process implementing 9P needed, besides sup-
port for file service, a substantial body of crypto-
graphic code to implement a handful of startup
messages in the protocol.
A recent redesign of 9P addressed a number of
file service issues outside the scope of this paper.
On issues of authentication,
there were two
goals: first, to remove details about authentica-
tion from the protocol itself; second, to allow an
external program to execute the authentication
part of the protocol. In particular, we wanted a
way to quickly incorporate ideas found in other
systems such as SFS [8].
Since 9P is a file service protocol, the solution
involved creating a new type of file to be served:
an authentication file. Connections to a 9P ser-
vice begin in a state that allows no general file