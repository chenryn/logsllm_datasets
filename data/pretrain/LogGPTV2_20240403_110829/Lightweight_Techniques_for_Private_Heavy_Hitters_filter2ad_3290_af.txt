incremental DPF construction more eﬃcient, especially when
using AES hardware instructions to implement the PRG.
7 Providing diﬀerential privacy
To bound the amount of information that an adversary can infer
from the system’s output, we can ensure that the system’s output
satisﬁes -diﬀerential privacy [24, 25]. This is possible with a
simple tweak to our heavy-hitters protocol (Protocol 5), which
we describe in the full version of this work [8].
Implementation and evaluation
8
We implemented our complete private heavy-hitters scheme in
Rust (1.46.0-nightly). Our implementation is roughly 3,500
lines of code, including tests. The code is online at https:
//github.com/henrycg/heavyhitters.
Our sketching scheme uses a 62-bit ﬁnite ﬁeld in the middle
of the “tree” (Figure 4) and a 255-bit ﬁeld at the leaves. With
this conﬁguration, our sketching schemes detect cheating clients,
except with probability ≈ 2−62, over the servers’ random choices,
independent of how much computation a cheating client does.
While we expect this level of security against a cheating client
to be suﬃcient in practice, by running the sketching scheme
twice—at most doubling the communication and computation—
we can achieve nearly 128-bit security. Using the larger ﬁeld
at the leaves ensures that our DPF construction satisﬁes the
extractability property (Lemma 4.1) against cheating clients that
run in time at most ≈ 2128.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
773
128256384512Stringlength(n)0.000.050.100.15Key-gen.time(sec.)128256384512Stringlength(n)0B4MiB8MiB12MiB16MiB20MiBKeysize(bytes)Count-minStandardDPFIncrementalDPFRunning time (sec.)
Clients
100k
200k
400k
DPF
107.3
211.0
433.5
Sketching
704.5
1,404.1
2,771.4
Total Clients/Sec.
828.1
120.8
122.4
1,633.5
3,226.0
124.0
Table 9: End-to-end cost of our private heavy-hitters system, used to
collect n = 256-bit strings. Each client’s string is sampled from a
Zipf distribution with parameter 1.03 and support 10, 000. We use one
c4.8xlarge server (32 virtual cores) to implement each of the two logical
servers. One server is in Amazon’s N. California data center and the
other is in N. Virginia. The servers set the heavy-hitters threshold to
collect all strings that more than 0.1% of clients hold.
Figure 10: Estimated
execution time of our
heavy-hitters protocol.
Each line represents a
number of clients. The
workload is fully paral-
lelizable, so we neglect
sharding costs. System
parameters are as in Ta-
ble 9.
which is enough to represent a 42-character domain name (un-
compressed). Table 9 shows the results of this experiment. For
400,000 clients, the total running time is around 53 minutes.
Our heavy-hitters protocol is almost completely parallelizable.
In Figure 10, we give estimates for the protocol-execution time,
as a function of the number of clients and the number of physical
machines used to implement each of the system’s two logical
servers. When deployed with 20 machines per logical server, we
estimate that the system could process ten million client requests
in just over one hour.
9 Conclusions
In this paper, we have described a system that allows two non-
colluding servers to compute the most popular strings among
a large set of client-held strings in a manner that preserves
client privacy. Along the way, we introduce several lightweight
cryptographic tools: a protocol for checking that a secret-shared
vector is a unit vector, an extractable variant of distributed
point functions that defends against badly formed keys, and a
generalization of distributed point functions for secret-sharing
weights on binary trees.
There are a number of potential extensions to this work. For
instance, instead of ﬁnding heavy hitters, the servers might like
to ﬁnd heavy clusters—strings that are close to many of the
client-held strings, under some distance metric. Perhaps each
client holds a GPS coordinate pair and the servers want to learn
the popular neighborhoods.
Figure 8: Total server communication cost (send + receive) per client for
our private heavy-hitters scheme. At left: we simulate the server-side
communication cost our scheme and compare to a scheme based on
standard DPFs. At right: we compare the US-dollar cost of the schemes
used with 256-bit strings searching for the top-900 heavy hitters, using
Amazon EC2’s current (Dec. 2020) data-transfer price of USD 0.05/GB.
Client costs. Figure 7 shows the client costs for three diﬀerent
private heavy-hitters schemes. Our client experiments run on
an Intel i7-1068NG7 CPU at 2.3 GHz. The ﬁrst is our tree-
based scheme (Section 5), based on our new incremental DPFs
(Section 6). The second uses our tree-based scheme, but with
standard DPFs [11]. The third uses private aggregation of count-
min sketches [17,40] to compute approximate heavy hitters. For
the count-min sketches, we set the approximation error  = 1/128
and failure probability δ = 2−60. (To reduce communication in
this third scheme, we use DPFs here as well.)
Our incremental DPF keys have size linear in the length of
the clients’ strings, with a small constant. In contrast, using
standard DPFs requires one linear-sized key for each layer of
the preﬁx tree (Section 5), which yields a quadratic cost. The
count-min-sketch based private aggregation scheme also has a
linear client-side cost, but the large size of each sketch makes
the constant substantially worse.
Server communication. Figure 8 shows the total communication
cost per server per client of running our end-to-end heavy hitters
protocol. In this experiment, clients sample their strings from
a Zipf distribution with parameter 1.03 and support 10,000.
This type of “power-law” distribution arises naturally in network
settings [38] and we choose the parameter conservatively (i.e., the
distribution is closer to uniform than we would expect in nature),
which likely gives an underestimate of our system’s performance.
In this experiment, servers search for strings that more than 0.1%
of clients hold. In our schemes, the total communication per
client is tens of kilobytes. Figure 8 also estimates the dollar cost
of computing private heavy hitters using the baseline scheme
(based on standard DPFs) and our scheme, as the number of
clients varies. Our scheme is roughly two orders of magnitude
less expensive.
End-to-end performance. Finally, we ran an end-to-end perfor-
mance test of the system over the Internet. We use one c4.8xlarge
server (32 virtual cores) in Amazon’s us-east-1 region (N. Vir-
ginia) and one in the us-west-1 region (N. California). The
round-trip latency between the two data centers was 61.8ms. We
measure the running time from the moment after the servers
collect the last incremental DPF keys from the clients until the
servers produce their output. Each client holds a 256-bit string,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
774
128256384512Clientstringlength(n)0B2MiB4MiB6MiB8MiB10MiBCommunicationcost(perclient)StandardDPFIncrementalDPF1M10M100M1BNumberofclients10100100010000100000Communicationcost(totalUSD,logscale)020406080100120Physicalmachinesperlogicalserver0.010.1110100Estimatedexecutiontime(hours,logscale)0.1M1M10M100MAcknowledgments. We thank Eric Rescorla for suggesting this
problem, Saba Eskandarian for comments and discussion, and
the anonymous reviewers for their feedback and suggestions.
Dan Boneh was funded by NSF, DARPA, a grant from ONR,
and the Simons Foundation. Elette Boyle was supported by ISF
grant 1861/16, AFOSR Award FA9550-17-1-0069, and ERC
Project HSS (852952). Henry Corrigan-Gibbs was funded in
part by a Facebook Research Award. Henry thanks Bryan Ford
for generously hosting him at EPFL during the early stages of
this project. Niv Gilboa was supported by ISF grant 2951/20,
ERC grant 876110, and a grant by the BGU Cyber Center. Yuval
Ishai was supported by ERC Project NTSC (742754), ISF grant
2774/20, NSF-BSF grant 2015782, and BSF grant 2018393.
References
[1] Ittai Abraham, Benny Pinkas, and Avishay Yanai. Blinder: MPC
based scalable and robust anonymous committed broadcast., 2020.
[2] Benny Applebaum, Haakon Ringberg, Michael J Freedman,
Matthew Caesar, and Jennifer Rexford. Collaborative, privacy-
In PETS, pages 56–74.
preserving data aggregation at scale.
Springer, 2010.
[3] Raef Bassily, Kobbi Nissim, Uri Stemmer, and Abhradeep Guha
In Neural
Thakurta. Practical locally private heavy hitters.
Information Processing Systems, pages 2288–2296, 2017.
[4] Raef Bassily and Adam Smith. Local, private, eﬃcient protocols
for succinct histograms. In Proceedings of the forty-seventh annual
ACM symposium on Theory of computing, pages 127–135, 2015.
[5] Donald Beaver. Eﬃcient multiparty protocols using circuit ran-
domization. In CRYPTO, pages 420–432. Springer, 1991.
[6] Mihir Bellare and Phillip Rogaway. Random oracles are practical:
A paradigm for designing eﬃcient protocols. In CCS, pages 62–73,
1993.
[7] Dan Boneh, Elette Boyle, Henry Corrigan-Gibbs, Niv Gilboa, and
Yuval Ishai. Zero-knowledge proofs on secret-shared data via fully
linear PCPs. In CRYPTO, pages 67–97. Springer, 2019.
[8] Dan Boneh, Elette Boyle, Henry Corrigan-Gibbs, Niv Gilboa,
and Yuval Ishai. Lightweight techniques for private heavy hitters.
arXiv, December 2020.
[9] Elette Boyle, Niv Gilboa, and Yuval Ishai. Secure computation
with preprocessing via function secret sharing. In Dennis Hofheinz
and Alon Rosen, editors, TCC 2019, pages 341–371.
[10] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing.
In EUROCRYPT, 2015.
[11] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing:
Improvements and extensions. In CCS, 2016.
[12] Mark Bun, Jelani Nelson, and Uri Stemmer. Heavy hitters and
the structure of local privacy. ACM Transactions on Algorithms
(TALG), 15(4):1–40, 2019.
[13] Martin Burkhart, Mario Strasser, Dilip Many, and Xenofontas
Dimitropoulos. SEPIA: Privacy-preserving aggregation of multi-
domain network events and statistics. USENIX Security, 2010.
[14] T-H Hubert Chan, Elaine Shi, and Dawn Song. Private and
continual release of statistics. ACM Transactions on Information
and System Security (TISSEC), 14(3):1–24, 2011.
[15] David L Chaum. Untraceable electronic mail, return addresses, and
digital pseudonyms. Communications of the ACM, 24(2):84–90,
1981.
[16] Graham Cormode, Flip Korn, Shanmugavelayutham Muthukrish-
nan, and Divesh Srivastava. Finding hierarchical heavy hitters in
data streams. In VLDB, 2003.
[17] Graham Cormode and S Muthukrishnan. An improved data stream
summary: the count-min sketch and its applications. Journal of
Algorithms, 55(1):58–75, 2005.
[18] Henry Corrigan-Gibbs and Dan Boneh. Prio: Private, robust,
and scalable computation of aggregate statistics. In NSDI, pages
259–282, 2017.
[19] Henry Corrigan-Gibbs, Dan Boneh, and David Mazières. Riposte:
An anonymous messaging system handling millions of users. In
IEEE Symposium on Security and Privacy, 2015.
[20] Ronald Cramer, Yevgeniy Dodis, Serge Fehr, Carles Padró, and
Daniel Wichs. Detection of algebraic manipulation with applica-
tions to robust secret sharing and fuzzy extractors. In EUROCRYPT,
pages 471–488, 2008.
[21] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias.
Multiparty computation from somewhat homomorphic encryption.
In CRYPTO, pages 643–662, 2012.
[22] George Danezis, Cédric Fournet, Markulf Kohlweiss, and Santiago
Zanella-Béguelin. Smart meter aggregation via secret-sharing. In
Workshop on Smart Energy Grid Security, pages 75–80. ACM,
2013.
[23] Jack Doerner and Abhi Shelat. Scaling ORAM for secure compu-
tation. In CCS, pages 523–535, 2017.
[24] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam Smith.
Calibrating noise to sensitivity in private data analysis. In Theory
of Cryptography Conference, pages 265–284. Springer, 2006.
[25] Cynthia Dwork, Aaron Roth, et al. The algorithmic foundations
of diﬀerential privacy. Foundations and Trends in Theoretical
Computer Science, 9(3-4):211–407, 2014.
[26] Tariq Elahi, George Danezis, and Ian Goldberg. PrivEx: Pri-
vate collection of traﬃc statistics for anonymous communication
networks. In CCS, pages 1068–1079. ACM, 2014.
[27] Úlfar Erlingsson, Vasyl Pihur, and Aleksandra Korolova. Rappor:
Randomized aggregatable privacy-preserving ordinal response. In
CCS, pages 1054–1067, 2014.
[28] Saba Eskandarian, Henry Corrigan-Gibbs, Matei Zaharia, and Dan
Boneh. Express: Lowering the cost of metadata-hiding communica-
tion with cryptographic privacy. arXiv preprint arXiv:1911.09215,
2019.
[29] Giulia Fanti, Vasyl Pihur, and Úlfar Erlingsson. Building a Rappor
with the unknown: Privacy-preserving learning of associations and
data dictionaries. Proceedings on Privacy Enhancing Technologies,
2016(3):41–61, 2016.
[30] Sanjam Garg, Steve Lu, and Rafail Ostrovsky. Black-box garbled
RAM. In FOCS, pages 210–229. IEEE, 2015.
[31] Niv Gilboa and Yuval Ishai. Distributed point functions and their
applications. In EUROCRYPT, pages 640–658, 2014.
[32] O Goldreich, S Micali, and A Wigderson. How to play any mental
game. In STOC, pages 218–229, 1987.
[33] Oded Goldreich and Rafail Ostrovsky. Software protection and
simulation on oblivious rams. Journal of the ACM, 43(3):431–473,
1996.
[34] S Dov Gordon, Jonathan Katz, Vladimir Kolesnikov, Fernando
Krell, Tal Malkin, Mariana Raykova, and Yevgeniy Vahlis. Se-
cure two-party computation in sublinear (amortized) time. In
Proceedings of the 2012 ACM conference on Computer and com-
munications security, pages 513–524, 2012.
[35] Rob Jansen and Aaron Johnson. Safely measuring Tor. In CCS,
pages 1553–1567, 2016.
[36] Marek Jawurek and Florian Kerschbaum. Fault-tolerant privacy-
preserving statistics. In PETS, pages 221–238. Springer, 2012.
[37] Marcel Keller and Avishay Yanai. Eﬃcient maliciously secure
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
775
multiparty computation for RAM. In EUROCRYPT, pages 91–124.
Springer, 2018.
[38] Jon Kleinberg and Steve Lawrence. The structure of the web.
Science, 294(5548):1849–1850, 2001.
[39] Steve Lu and Rafail Ostrovsky. Distributed oblivious RAM for
secure two-party computation. In Theory of Cryptography Confer-
ence, pages 377–396. Springer, 2013.
[40] Luca Melis, George Danezis, and Emiliano De Cristofaro. Eﬃcient
private statistics with succinct sketches. In NDSS. Internet Society,
February 2016.
[41] Mozilla. Your browser is hijacked, now what? https://blog.mozilla.
org/ﬁrefox/your-browser-is-hijacked-now-what/, Accessed 19 Au-
gust 2020, October 2018.
[42] C Andrew Neﬀ. A veriﬁable secret shuﬄe and its application to
e-voting. In CCS, pages 116–125, 2001.
[43] Raluca Ada Popa, Hari Balakrishnan, and Andrew J. Blumberg.
VPriv: Protecting privacy in location-based vehicular services. In
USENIX Security, pages 335–350, 2009.
[44] Zhan Qin, Yin Yang, Ting Yu, Issa Khalil, Xiaokui Xiao, and
Kui Ren. Heavy hitter estimation over set-valued data with local
diﬀerential privacy. In CCS, 2016.
[45] Vincent Toubiana, Arvind Narayanan, Dan Boneh, Helen Nis-
senbaum, and Solon Barocas. Adnostic: Privacy preserving tar-
geted advertising. In NDSS, 2010.
[46] David Isaac Wolinsky, Henry Corrigan-Gibbs, Aaron Johnson,
and Bryan Ford. Dissent in numbers: Making strong anonymity
scale. In 10th OSDI. USENIX, October 2012.
[47] Andrew Chi-Chih Yao. How to generate and exchange secrets. In
FOCS, pages 162–167. IEEE, 1986.
[48] Wennan Zhu, Peter Kairouz, Brendan McMahan, Haicheng Sun,
and Vivian (Wei) Li. Federated heavy hitters with diﬀerential
privacy. In AISTATS, 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
776