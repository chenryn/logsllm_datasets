how the lattice nodes are ordered; descendant nodes are placed
if doAддr eдate then
for all f in aддr eдateList do
if count (f ) ≥ thr esh then
hhh ← f
discount inputs for f
▷ check again for discount rule
▷ extract f as HHH
root ← all inputs
LatticeSearch(root, 32, 0, 32, RIGHT )
LatticeSearch(root, 0, 32, 32, LEFT )
LatticeSearch(root, 0, 0, 32, LOW ER)
▷ Starting the recursive lattice search for IPv4 address pairs
▷ visit left bottom edge
▷ visit right bottom edge
▷ visit sub-areas
close to their ancestors. The ordering can be divided into 6 regions
from (I) through (VI), the first four regions for the internal nodes
and the last two for the nodes on the bottom edges.
The Z-order changes the parent-child relationship in the lattice
from a binary tree to a quadtree [9, 19], which transforms the
HHH problem into simple space partitioning of a quadtree. To
obtain finer granularity, it suffices to recurse the partitioning until
the desired granularity, making the previous O (h′2
N ) algorithm
into O (N log h). Differing from the other methods, the algorithm is
deterministic, requires no parameter other than ϕ, and produces a
unique result without any approximation.
To aggregate inputs following the Z-order, the algorithm visits
the regions in Figure 3 in the reverse order from (VI) to (I). When
aggregating on the left bottom edge (VI), the algorithm first tries
to aggregate inputs with [32, 0], and detects all HHHs having the
full prefix length on the first dimension. Then, it recursively sub-
divides each detected HHH along the second dimension, using
[32, 16],[32, 24], [32, 32]. It works similarly on the right bottom
edge (V) in the order [0, 32], [16, 32],[24, 32], and at this point finds
all HHHs having a full prefix length in either dimension. For the
remaining internal nodes from (IV) to (I), it partitions the two-
dimensional space by recursively subdividing it into four quad-
rants, from the lower quadrant (IV) with [16, 16], the left quadrant
(III) with [16, 0], the right quadrant (II) with [0, 16] to the remain-
ing upper quadrant (I). Each quadrant can be further recursively
subdivided into quadrants.
Note that the algorithm recurses only for nodes larger than the
threshold, and the subdivision is only on the constituent inputs
of the caller. The caller performs threshold checking again after
the recursions, since its count could have been decreased by the
0,00,032,3232,3232,032,00,320,3224,32(VI)leftbottomedge(V)rightbottomedge(IV)lowersub-area(I)uppersub-area(II)rightsub-area(III)leftsub-area24,3216,3216,328,328,3232,832,832,1632,1632,2432,240,80,80,160,160,240,248,08,016,016,024,024,08,88,816,1616,1624,2424,2424,824,88,248,2424,1624,1616,816,88,168,1616,2416,240,032,3232,0(III)(VI)(II)(V)(I)(IV)0,3224,3216,328,3232,832,1632,240,80,160,248,016,024,08,816,1624,2424,88,2424,1616,88,1616,24IMC ’17, November 1–3, 2017, London, United Kingdom
Kenjiro Cho
Figure 4: Recursive Lattice Search illustrated: a step-by-step example using a 3×3 lattice for HHHs with c′ ≥ 2
(a) Initially, all 10 inputs are at the root [0,0] (step 0). RLS starts with Region (VI), the left bottom edge. The initial aggregation at [32,0] finds 2 HHHs (blue,
and green); each count is 3 (step 1). The blue HHH is further aggregated with [32,16] (step 2), and then, further again with [32,32] (step 3). This HHH is
extracted. (b) On the return path, the blue HHH at [32,16] and [32,0] were already discounted (step 4-5). Similarly, the green HHH is tried with [32,16] but no
HHH is found (step 6) so that the green HHH is extracted at [32,0] (step 7). (c) Next, RLS visits Region (V), the right bottom edge. At this point, 5 inputs
remain at the root (step 8). The pink HHH is found at [0,32] (step 9) but it cannot be further aggregated at [16,32] (step 10) so that the pink HHH is extracted
at [0,32]. (d) Third, RLS visits internal nodes with 3 remaining inputs at the root (step 11). No HHH is found in Region (IV), the lower sub-area at [16,16]
(step 12), or in Region (III), the left sub-area at [16,0] (step 13). The orange HHH is found in Region (II), the right sub-area at [0,16] (step 14). (e) Finally, the
search terminates with 4 HHHs and 1 remaining input at the root.
descendants for the discount rule. The pseudo code of RLS is given
in Algorithm 1. Figure 4 presents a step-by-step example using a
3×3 lattice, where 4 HHHs (c′ ≥ 2) are extracted from 10 inputs.
The Z-ordering, however, introduces a bias for the first dimen-
sion, and the counts along the second dimension could be under-
counted as a result. Still, this bias does not significantly affect results
for real traffic as we will see in Section 4.
It is possible to extend the algorithm for higher dimensions. For 3-
dimensions, the lattice becomes a cube, also known as an octree [14].
For partitioning, it first visits the 3 bottom edges, then the 3 bottom
faces, and finally the internal cubic space to be partitioned into 8
sub-cubes. For n-dimensions, the number of binary subspaces grows
with 2n but the depth of recursions required for space partitioning
remains log h.
4 EVALUATION
For evaluation, we have ported our RLS code implemented in our
tool to the simulation code for the Space-Saving algorithm by
Mitzenmacher et al. [15] 1, because the code is publicly available
and written in C, the programming language we used to implement
the tool. We use a packet trace from the WIDE MAWI archive [4],
a 15-minute-long packet trace taken on October 20, 2016 at 14:00
JST, containing about 73 million IPv4 packets2. The IP addresses in
the packet trace are anonymized in a prefix-preserving manner so
1The modified simulator is at https://github.com/kjc0066/hhh/
2http://mawi.wide.ad.jp/mawi/samplepoint-F/2016/201610201400.html
that HHHs are preserved. The simulator uses only packet counts
for IPv4 source-destination address pairs.
First, we observe the sensitivity in the source-destination order
in the Z-order in Table 1, by comparing outputs aggregated by
(src, dst ) and (dst, src), with ϕ = 0.05 (5%), N = 106 and д = 1.
The rightmost column shows each HHH’s count share, c′/N , in
percent. Both report 15 HHHs that are very similar with only minor
differences: both report identical HHHs from (1) through (12) with
identical percentage. The differences highlighted by the bold fonts
are only HHHs from (13) through (15) in Region (I) with very short
prefix lengths. We have similar results with other traces or with
varying ϕ and N . The result confirms that the bias introduced by
the source-destination order is negligible in practice.
Next, we compare the output of RLS to that of Space-Saving
(SS) as a baseline that was already compared with other algorithms
in [15]. Because we use a different definition for HHH, this is not
intended to make head-to-head comparison with other algorithms
but provided only to illustrate major differences. Note that, other
than the ordering, SS is a streaming approximation algorithm, using
the overlapping rollup rule (double-counting), and the code is not
optimized especially for bitwise aggregation. The simulation code
for SS has bitwise aggregation only for one-dimension so that
we have modified the code for 2-dimensional bitwise aggregation.
Again, we use ϕ = 0.05, N = 106 and д = 1, along with the SS error
bound parameter ϵ = 0.01.
The output of RLS is compared to that of SS in Table 2. The 15
HHHs reported by RLS correspond to ones for (src, dst) in Table 1,
0,0(0)0,0c≥φNc<φNdiscounted(a)Region(VI)(c)Region(V)(d)Region(IV)(III)(II)(I)(e)4HHHsextracted(b)Region(VI):backtrack,2ndHHH(8)0,0(1)32,0(3)32,3232,3232,00,3216,3232,160,1616,016,16(5)32,0(4)32,16(6)(7)(2)32,16(8)0,0(9)0,32(10)16,320,032,3232,00,3216,3232,160,1616,016,160,032,3232,00,3216,3232,160,1616,016,160,032,3232,00,3216,3232,160,1616,016,160,032,3232,00,3216,3232,160,1616,016,16(11)0,0(12)16,16(13)16,0(14)0,16Recursive Lattice Search
IMC ’17, November 1–3, 2017, London, United Kingdom
Table 1: Sensitivity of source-destination order
Table 2: Output of RLS compared to SS
no
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
(15)
(1)-(12)
(13)
(14)
(15)
region
VI
V
III
II
I
-
I
-
aggregated by (src,dst)
src
dst
112.31.100.1/32
64.0.0.0/2
128.0.0.0/1
*
163.229.96.0/23
203.179.128.0/20
163.229.97.230/32
202.203.3.13/32
202.203.3.13/32
202.26.162.46/32
*
*
*
*
*
*
0.0.0.0/1
202.192.0.0/12
202.203.3.0/24
203.179.140.0/23
163.229.128.0/17
202.192.0.0/12
*
202.0.0.0/7
128.0.0.0/4
128.0.0.0/2
*
*
*
*
128.0.0.0/2
*
aggregated by (dst,src)
identical to (src,dst)
128.0.0.0/2
*
128.0.0.0/1
*
0.0.0.0/2
128.0.0.0/3
*
*
no
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
(15)
-
RLS(%)
16.5
5.2
5.8
6.0
5.0
6.8
5.9
5.7
5.1
5.3
6.7
7.6
5.0
6.0
5.4
2.0
c′/N (%)
16.5
5.2
5.8
6.0
5.0
6.8
5.9
5.7
5.1
5.3
6.7
7.6
5.0
6.0
5.4
2.0
100.0
5.7
5.3
6.4
1.0
SS(%) missing SS HHHs with their c′/N (%)
16.5
5.2
5.8
6.0
5.0
6.8
16.9
5.7
5.1
-
-
-
-
-
-
-
-
-