您不仅限于添加规则。Falco 允许您添加规则、宏和列表。
默认情况下，包含的为空。只有在需要修改或删除现有规则或添加新规则时，才需要编辑此文件。由于文件用于更改或添加基础`falco_rules.yaml`文件的值，因此文件被 Falco 使用的顺序非常重要。
Falco 将根据所有规则文件中的名称构建规则。这些文件按照它们在基本 Falco 配置文件中被引用的顺序进行读取和评估。我们在本章开头用作示例的基本文件的规则文件顺序如下:
```
rules_file:
  - /etc/falco/falco_rules.yaml
  - /etc/falco/falco_rules.local.yaml
  - /etc/falco/k8s_audit_rules.yaml
```
注意`falco.rules.local.yaml`文件在基础`falco_rules.yaml`文件之后。保持对文件顺序的控制将有助于您跟踪规则的任何预期/意外行为。
使用 Falco 文档中的一个示例，让我们展示如何向规则追加内容。
从`falco_rules.yaml`开始的原始规则如下代码块所示:
```
- rule: program_accesses_file
  desc: track whenever a set of programs opens a file
  condition: proc.name in (cat, ls) and evt.type=open
  output: a tracked program opened a file (user=%user.name command=%proc.cmdline file=%fd.name)
  priority: INFO
```
正如描述所述，每当一组程序打开一个文件时，这个规则就会触发。当使用`cat`或`ls`打开文件时，该条件将触发。
当前规则不会忽略任何用户的打开操作。您已经决定不需要知道根用户何时使用`cat`或`ls`打开文件，并且您希望阻止 Falco 为根用户生成警报。
在`falco_rules.local.yaml`文件中，需要为现有规则创建一个`append`。要添加到规则中，您必须使用相同的规则名称，然后添加`append: true`和您想要对规则进行的任何更改。下面的代码片段显示了一个示例:
```
- rule: program_accesses_file
  append: true
  condition: and not user.name=root
```
创建新规则比附加到现有规则更容易。让我们看看它是如何工作的。
### 创建新规则
由于您正在创建一个新规则，您只需要向`falco_rules.local.yaml`添加一个标准规则。由于这是一个新规则，它将被简单地添加到 Falco 用来创建警报的规则列表中。
重要说明
Falco 的配置文件是从配置映射中读取的，因此如果您更改了配置映射中的任何值，您将需要重新启动 Falco pods。
恭喜你！这里已经向您展示了很多信息，您可能希望看到 Falco 在行动，将您的知识付诸实践。在下一节中，我们将解释如何部署 Falco，您将最终看到它的实际应用。
# 部署 Falco
我们在`chapter12`文件夹的 GitHub 存储库中包含了一个用来部署 Falco 的脚本，名为`falco-install.sh`。
将 Falco 部署到 Kubernetes 集群的两种最流行的方法是使用官方的 Helm 图表或 Falco repo 中的 DaemonSet 清单。出于本模块的目的，我们将使用本书的 GitHub 存储库中修改过的 DaemonSet 安装来部署 Falco。
要使用包含的脚本部署 Falco，请通过执行`./install-falco.sh`从`chapter12`文件夹中执行脚本。我们还在同一个目录中包含了一个名为`delete-falco.sh`的脚本，它将从集群中移除 Falco。
该脚本执行的步骤在下面的列表中有详细说明，并将在本节中详细解释。
该脚本分两部分执行以下任务:
在**第 1 节**中，它创建一个 Falco 探针，并执行以下步骤:
1.  使用`apt`安装围棋
2.  拉出 Falco 的`driverkit-builder`容器
3.  从 Git 中提取 driverkit 源并构建可执行文件
4.  使用 driverkit 创建一个 ubuntu 通用的 Falco 探测器
5.  将`falco.ko`复制到`modules`文件夹
6.  使用`modprobe`添加 Falco 探针
在**第 2 节**中，它将 Falco 添加到集群中，执行以下步骤:
1.  创建一个 Falco 命名空间
2.  从`falco/falco-config`中的文件创建名为`falco-config`的配置图
3.  部署 Falco DaemonSet
为了更好地理解安装脚本以及为什么需要这些步骤，我们将从 Falco 探针开始解释安装细节。
# Falco 内核模块
Falco 部署了一个内核模块来监控主机系统上的系统调用。因为内核模块必须与主机内核兼容，所以您需要一个能与工作节点的主机操作系统一起工作的模块。
Falco 试图以几种不同的方式加载或创建模块:
*   如果有一个预构建的模块可供主机内核使用，Falco 将自动下载并使用该模块。
*   如果工作节点的内核不存在预构建的模块，Falco 将尝试使用来自主机的任何已安装的内核头来构建模块。
在写这篇文章的时候，Falco 为 Falco 探测器提供了一种早期访问的替代方法，它们是使用名为“T2”的实用程序创建的。这个新的实用程序根据主机的内核信息自动创建新的探测器。将详细介绍使用 driverkit 创建探测器的过程，因为我们将使用它来为我们的 KinD 集群创建 Falco 探测器。
重要说明
如果您的节点没有安装正确的内核头，Falco pods 将尝试下载与主机内核版本匹配的预编译探测。
您可以通过在主机上执行`uname -r`找到您的内核信息，然后通过在以下链接中搜索可用的探测器来检查支持:
[https://S3 . amazonaws . com/download . draios . com/stable/sysdig-probe-binary/index . html](https://s3.amazonaws.com/download.draios.com/stable/sysdig-probe-binaries/index.html)
由于这需要互联网连接，因此您可能不适合在企业环境中使用，在该环境中，许多服务器运行在空气间隙环境中。在这种类型的环境中，更常见的是使用 driverkit 或内核头创建方法。
## 使用安装的内核头创建内核模块
重要说明
正如我提到的，我们不会使用这个方法来创建内核模块。本部分仅供参考。相反，我们将使用 driverkit，这将在下一节中介绍
在标准的 Kubernetes 节点上，您可能需要也可能不需要安装 Linux 头文件。根据您创建基础工作节点的方式，内核头可能已经包含在您的安装中。如果某个模块不可用，并且主机上没有安装标头，Falco 吊舱将无法启动，吊舱将进入`crashloopback`状态。这意味着在部署 Falco 之前，您需要选择并配置您的模块创建过程。
对于不同的 Linux 安装，所需的包、版本和存储库是不同的。如果您打算在您的节点上安装头，您将需要知道需要什么模块，以及任何额外的回购。由于我们已经使用 Ubuntu 作为实践练习的分发版，我们将提供为 Ubuntu 系统添加内核头的步骤。
## 使用头文件创建 Falco 模块
Falco 已经引入了一个名为 DriverKit 的实用程序，我们将使用它来为我们的 KinD Falco 安装创建内核模块。在 Falco 驱动程序可能不支持您的 Linux 发行版的情况下，我们包括使用内核头作为备份过程的过程。
如果您计划让 Falco 使用头文件创建一个内核模块，那么第一步就是为您的 Linux 版本下载内核头文件。
要为 Ubuntu 下载正确的标题，您可以使用`uname -r`命令和`linux-headers`的`apt get`命令。
`sudo apt install linux-headers-$(uname -r)`
`uname -r`将追加主机上运行的内核版本，为运行的内核提供`apt install`命令。在我们的示例主机上，运行内核是`4.4.0-142-generic`，使我们的`apt install`命令`sudo apt install linux-headers- linux-headers-4.4.0-142-generic`。
安装后，可以通过查看`/lib/modules/`目录来验证是否添加了头文件，在这里会看到一个以内核版本命名的目录；在我们的例子中，这是`4.4.0-142-generic`。
重要说明
必须在运行 Falco 的每个工作节点上安装头。
现在已经安装了头，Falco pods 将在使用工作节点上安装的头启动时构建一个内核模块。
如前所述，团队已经推出了一种更新的方法，它使用了一个名为 driverkit 的实用程序。这个过程创建了一个内核模块，您可以使用 modprobe 将其添加到主机中。我们选择这个作为我们的探针创建过程，使在 KinD 集群上部署 Falco 比使用头创建过程更容易。
## 使用 driverkit 创建内核模块
在的特殊用例中，安装内核头可能是有挑战性的或者不可能的。如果您不能使用头来构建您的模块，您可以使用一个名为 driverkit 的 Falco 实用程序来创建一个模块。
Driverkit 允许您为许多不同的 Linux 发行版创建一个内核模块。在撰写本文时，该实用程序目前支持以下发行版:
*   Ubuntu-通用
*   Ubuntu AWS(Ubuntu AWS)
*   CentOS 8
*   CentOS 7
*   CentOS 6
*   AmazonLinux
*   AmazonLinux2
*   一种自由操作系统
*   香草核
该团队正在积极寻找其他发行版的建议，因此我们可以确定，随着 driverkit 的开发，将会添加更多的发行版。
我们将使用 Ubuntu-generic 选项来查看细节，为 Ubuntu 创建一个模块。
### Driverkit 要求
在使用 driverkit 创建模块之前，您需要满足几个先决条件:
*   运行 Docker 守护程序。
*   应该安装 Go(既然我们用的是 Ubuntu，就用`longsleep/golang-backports`)。
*   您的目标内核版本和内核修订版。
如果您要使用 GitHub 存储库中的安装脚本，所有的构建和模块安装步骤都会得到处理，但是为了更好地理解这个过程，我们将在下一节中对其进行完整的解释。
### 安装 Falco 的驱动程序
构建内核模块的第一步是安装 driverkit 所需的依赖项:
1.  The first requirement is to install Go. Since we are using Ubuntu, we can install Go using `snap`:
    ```
    sudo snap install --classic go
    ```
    您的个人资料中应该已经有了第 5 章 *【Kubernetes 斯训练营】*中的 KinD 安装中的 Go 变量。如果您使用的机器不同于您的 KinD 主机，请添加任何必需的 Go 变量。
2.  我们选择使用 Docker 构建方法进行构建。driverkit 项目页面上记录了多种方法，如果您想使用不同的构建方法，可以使用这些方法构建模块。我们将提取 Docker 映像，以便在运行构建时可以执行:
    ```
    docker pull falcosecurity/driverkit-builder
    ```
3.  一旦下载了容器，我们就可以构建 driverkit 可执行文件。构建过程将从 GitHub 下载源代码，然后使用 Go 创建可执行文件。整个过程需要几分钟才能完成:
    ```
    GO111MODULE="on" go get github.com/falcosecurity/driverkit
    ```
4.  可执行文件将在您的执行路径中创建。要验证 driverkit 可执行文件是否已成功创建，请通过键入以下命令来检查版本:
    ```
    driverkit -v
    ```
5.  这可能会返回一个版本号，或者在当前的早期版本中，可能只是返回如下:
    ```
    driverkit version -+
    ```
如果 driverkit 命令返回`-+`或版本号，则成功创建。但是，如果您在检查版本时收到一个`driverkit: command not found`错误，则构建可能已经失败，或者您的 Go 路径可能没有在您的环境变量中正确设置。如果在运行构建后找不到可执行文件，请验证 Go 环境变量是否正确，然后再次运行 Go 构建步骤。
### 创建模块并将其添加到主机
随着 driverkit 的构建和验证，我们可以构建我们的模块并将其添加到主机中。
在构建模块之前，我们需要知道主机的内核版本和发行版本。对于我们的例子，我们将使用我们在本书前面章节中一直使用的 KinD 集群。Linux 内置了一些命令来获取我们需要的两个细节:
1.  To get the kernel version, execute `uname -v`, and for the release, `uname -r`:
    ![Figure 12.4 – Docker host Kernel version ](img/Fig_12.4_B15514.jpg)