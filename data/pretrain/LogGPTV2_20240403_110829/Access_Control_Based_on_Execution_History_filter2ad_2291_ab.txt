tion 7). In any case, there is no need to walk an execution
stack in order to make security decisions.
As for point 4 (Storage), storing the current rights in a
variable has several advantages:
• Security-aware programmers get ﬂexibility and con-
trol, without the need for any additional run-time
support. For instance, it is possible to code con-
structors that store private copies of the current rights
and methods that use them later to perform security
checks or modify the current rights.
• A variety of standard optimizations can be applied.
The problem of optimizing programs with mutable
variables is a well-understood one—and we need not
be concerned about interactions between optimiza-
tions and stack-based security. For instance, tail-
call elimination, which changes the stack but not the
inter-method control ﬂow, is safe in our model. Fur-
thermore, many optimizations that change the inter-
method control ﬂow (hence the stack) can be per-
formed, with some care. For instance, we can inline
a method if we also inline the corresponding code
that performs the automatic rights update before the
method. (In contrast, method inlining is limited in
the CLR because of potential interactions with stack
inspection.) In all these respects, the current rights
are just like other ordinary variables.
• From the point of view of a programmer in a high-
level language, a global variable is easy to under-
stand. Even in functional languages such as Haskell,
there is the possibility of modeling mutable vari-
ables such as the one in question.
(It is less stan-
dard and mundane to model a stack, although the cur-
rent rights obtained by stack inspection might still be
explained to the programmer as a dynamic variable
with implicit bindings, or even as a local variable
passed as an extra parameter for every call, as sug-
gested by security-passing style implementations of
stack inspection [21].)
The variable may be per-thread or per-process, depend-
ing on the chosen level of execution unit. We note that the
CLR already includes similar mechanisms, with different
information and for different purposes, so this implemen-
tation strategy appears viable and generally in tune with
existing infrastructure.
The set of rights may be explicitly represented by a list.
However, alternative representations are possible, such as
the following:
• A symbolic expression whose value is a set of rights.
The symbolic expression can be constructed using
standard set union, intersection, and difference op-
erations. It may be simpliﬁed lazily (as the rights are
used) or eagerly (as the expression is constructed).
• A symbolic expression whose value is a set of code
origins (such as users or network zones). Again, the
symbolic expression can be constructed using stan-
dard operations, and the expression may be simpli-
ﬁed lazily or eagerly. Moreover, the associated rights
can be computed as a function of these code origins,
lazily, whenever they are needed.
In this case, we
use the disjunction of code origins as the dual to the
intersection of rights. In other words, we may, for ex-
ample, keep track of the fact that all the code comes
from P or Q, rather than the intersection of the rights
associated with P and Q.
• A mixture of the two, where some of the components
refer to code origins and others to abstract represen-
tations of permissions. For instance, if the security
policy associates rights with a few “code groups”,
one may represent intersections of static rights as sets
of groups, and still represent explicit modiﬁcations of
rights by sets of permissions.
• At the other extreme, a simple bit pattern (a mask)
that represents which rights are present and which are
not. This representation is particularly efﬁcient, but
is applicable only in the case where there is a fairly
limited and ﬁxed set of rights.
3.2 Updating Current Rights
Point 5 (Automatic updates) says that, whenever a piece
of code executes, the current rights are intersected with
the static rights of this code. This update occurs automat-
ically, independently of the code itself, so that security-
unaware code is protected by default from untrusted code
(see examples in Section 4). Thus, when A calls B, B re-
turns, then A calls C, the run-time rights in effect within C
will in general depend on the fact that A and B have exe-
cuted. If C needs rights lost in A or B, then C may choose
to restore them explicitly, as explained below, but those
rights are not present by default.
Automatic updates can be efﬁciently implemented tak-
ing advantage of the following observations:
• An update can be skipped when the current rights are
already included in the static rights of the code. This
inclusion can be determined by static analysis, and
taken into account in calling conventions.
• If the ways of going from one piece of code to an-
other are method calls and returns (assuming that our
“pieces of code” are at least as large as methods),
then the updates to the current rights need to happen
only when there are method calls and returns. This
can directly be extended to exception throwing and
exception handling.
• In this setting, an effective calling convention is that,
whenever a call completes (either normally or with
an exception), the current rights after the call are in-
cluded in the current rights before the call. With this
convention, the automatic updates can be enforced by
calculating an intersection of rights at most once for
every call (before transferring control to the callee).
We expect most updates to be (conservatively) elimi-
nated, for two reasons: many updates (including in partic-
ular many updates in direct calls) will not actually change
the current rights, and many updates are irrelevant (e.g.,
because the resulting current rights are never used). We
may implement the remaining updates as follows:
• For every method (or for every remaining call), we
may use a source-language transformation that in-
serts a code preﬁx that explicitly performs the update.
This transformation can be implemented on top of a
platform with no speciﬁc support for security.
• We may proceed similarly at a lower level in a just-
in-time (JIT) compiler, using a native-code preﬁx.
In addition, we may provide several entry points for
the same methods, before and after the automatic up-
date, so that the compiler can skip the update when
compiling direct calls from code with the same static
rights (or lower static rights).
• In the case in which there is no ampliﬁcation, or few
ampliﬁcations, we may actually perform all updates
in the JIT compiler, as each piece of code is compiled
before execution.
(Later ampliﬁcations may force
some recompilation.)
• We may maintain a cache for common intersections.
We expect the same intersections to be computed
again and again.
Concerning point 6 (Explicit modiﬁcations), the modi-
ﬁcation of rights is a sensitive operation, which should be
done only with care and after adequate checking. Whereas
certain reductions of rights happen automatically as de-
scribed in point 5 (Automatic updates), other modiﬁca-
tions of rights—ampliﬁcations or not—require an explicit
step, which can be taken only by security-aware code. The
explicit step gives us a speciﬁc point on which to focus
auditing efforts, and also to place blame when things go
wrong. Code that is not security-aware need not be con-
cerned with such explicit management of rights.
The special operation that modiﬁes rights may fail. Of
course, code may acquire at most its static rights via mod-
iﬁcations; any request to acquire more will fail. In gen-
eral, conﬁgurable security policies can deﬁne the allowed
modiﬁcations, much like they deﬁne static rights. A policy
may say, in particular, that certain permissions can never
be acquired via modiﬁcations. A policy may also say that
untrusted code should not perform any modiﬁcation at all,
in order to simplify the writing of code that interacts with
it.
From an implementation perspective, the explicit mod-
iﬁcation of rights is straightforward; it may beneﬁt from
static analysis much like the automatic updates discussed
above. From a language perspective (point 7, Syntax), it
can beneﬁt from high-level syntactic support, as discussed
in Section 5.
4 Examples
In this section we illustrate history-based rights compu-
tation through several examples, written in C]. The ex-
amples do not show explicit rights modiﬁcations. The ap-
pendix contains examples with that feature.
4.1 Basic Examples
In these examples, untrusted code attempts to use some
trusted-but-naive code for deleting a ﬁle. The examples
rely on FileIOPermission objects for representing access
rights for ﬁles.
In the ﬁrst example, some untrusted code (such as an ap-
plet) calls some trusted code (such as a library) that in turn
performs a sensitive operation (such as deleting a ﬁle). For
this example, the situation is much like with stack inspec-
tion. We mention our assumptions on static permissions
in comments. (These assumptions would be enforced by
the runtime security policy.)
// Mostly untrusted : static permissions don’t
// contain any FileIOPermission .
class BadApplet {
public static void Main() {
}
NaiveLibrary .CleanUp(”..\\password”);
}
// Trusted : static permissions contain all permissions .
public class NaiveLibrary {
public static void CleanUp(string s ) {
}
File . Delete(s );
}
The sensitive operation can be protected in the File li-
brary class by requiring a permission—in our example,
some FileIOPermission:
Here, p.Demand() checks that the permission to delete s
is available. Our history-based mechanism keeps track of
the execution of BadApplet and then prevents the dele-
tion of arbitrary ﬁles: since the invocation of the delete
operation occurs after the execution of untrusted code, the
check fails and raises a security exception. Thus, the naive
library is protected by default from untrusted callers.
The sequence of operations on the current rights goes as
follow:
• As control is transferred to BadApplet.Main, the cur-
rent permissions are intersected with the static per-
missions of BadApplet, thereby removing any File-
IOPermission from the current permissions.
• As CleanUp, Delete, and Demand are invoked, the
current permissions are intersected with their respec-
tive static permissions. Since these functions have at
least the static permissions of BadApplet, these inter-
sections do not actually change the current permis-
sions (and may actually be skipped).
• Finally, p.Demand() checks whether the current per-
missions speciﬁcally contain FileIOPermission p
and, since this is not the case, raises a security ex-
ception. Thus, p.Demand() prevents the deletion of
the ﬁle ” ..\\ password”.
In the second example, conversely, some trusted code
(such as a local application) calls untrusted code (such as
a plug-in), then proceeds with the result of the call. Unlike
stack inspection, our mechanism still prevents the deletion
of the ﬁle.
// Trusted : static permissions contain all permissions .
class NaiveProgram {
public static void Main() {
string s = BadPlugIn.TempFile ();
File . Delete(s );
}
}
// Mostly untrusted : static permissions don’t
// contain any FileIOPermission .
public class BadPlugIn {
public static string TempFile () {
return ” ..\\ password”;
}
}
Operationally, the situation here is much as in the ﬁrst
// Trusted : static permissions contain all permissions .
public class File { ...
public static void Delete( string s ) {
FileIOPermission p = new FileIOPermission(s ...));
p.Demand();
Win32.Delete(s );
}
}
example:
• Initially, the current permissions contain all the static
permissions of NaiveProgram.
• When BadPlugIn.TempFile is invoked, the current
permissions are intersected with the static permis-
sions of BadPlugIn.
• When BadPlugIn returns, and later in the computa-
tion, further intersections may be performed, but the
current permissions always remain included in those
of BadPlugIn, hence they never contain any FileIO-
Permission.
• Finally, p.Demand raises a security exception, as
above.
4.2 Further Examples
The two following examples are complete (synthetic)
C] programs. They illustrate two limitations of stack-
based security that are addressed by history-based secu-
rity. They resemble problematic programs that occur in
practice, although those are typically much longer.
The examples rely on features of the CLR that may
not be familiar for all readers.
In particular, they rely
on declarative attributes (rather than assumptions on static
permissions) in order to specify the security policy for
selected methods and classes—for instance, in order to
lower the rights of selected applet methods. We provide
these details so that the examples, when executed, actu-
ally behave as we describe in the text, but the details are
otherwise unimportant.
In the ﬁrst example, untrusted code creates an object of
a library class (Task), returns it, then trusted code triggers
a call to a dangerous operation ( File . Delete(s)). Such
patterns—and, in general, higher-order programming—
are especially common with event- or delegate-based li-
braries, for instance those that provide graphical user in-
terfaces.
public sealed class Task {
private string s ;
public Task( string s ) { this . s = s ; }
public void Start () { File . Delete(s ); }
}
public class Untrusted {
attribute removes
this method.
// The following declarative
// all FileIOPermissions for
[ FileIOPermissionAttribute
( SecurityAction .Deny, Unrestricted =true )]
public static Task applet () {
return new Task(”..\\password”);
}
}
class Program {
static void Main() {
Untrusted . applet (). Start ();
}
}
The situation is similar to the one in the previous ba-
sic example, but less direct. The program erases the
ﬁle with stack inspection but triggers a security excep-
tion with our mechanism. With stack inspection, the
responsibility for preventing the ﬁle deletion seems un-
clear. There is no way to perform an adequate test in
Program.Main: the object that Untrusted . applet returns
is opaque. Program.Main may not be aware that this
object encapsulates a ﬁle name and that Task. Start can
delete a ﬁle. Perhaps, conservatively, the Task( string s)
constructor could immediately check the permissions that
may later be requested by File . Delete. However, the
details on these permissions (e.g., how to normalize ﬁle
names, which FileIOPermissions are demanded to delete
a ﬁle, and their relation to s) belong to class File, not to
class Task.
The second example is more involved. It combines in-
heritance and exception handling.
Inheritance makes it
easier for an attacker to cause a library to invoke untrusted
code by a virtual call to a method of a well-known trusted
class.
Abstractly, throwing and handling an exception is much
like calling and handling a method. However, by the time
the exception handler proceeds, the stack that contained
any evidence of the origin of the exception has been dis-
carded. Therefore, with stack-based access control, one
should implement any exception handler under the conser-
vative assumption that the exception itself and its parame-
ters are not trustworthy. This conservative assumption can
complicate handling the exception.
With history-based access control, on the other hand,
exceptions are like ordinary method calls. When a piece
of code throws an exception, the exception handler will
start running with at most the static rights of the code. If
that code is untrusted, then those rights will be limited, so
security checks in the exception handler may fail.
public class Naive {
protected string tempFile = ”C:\\temp\\myFile”;
virtual protected void proceed () { ... }
public void m() {
try {
proceed ();
}