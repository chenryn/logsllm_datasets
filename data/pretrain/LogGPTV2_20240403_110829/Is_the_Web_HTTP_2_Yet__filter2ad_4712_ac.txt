r
e
p
s
t
c
e
b
o
j
f
o
.
o
n
.
g
v
A
10
1
1.00
0.75
F
D
C
0.50
0.25
0.00
H2
H1
H2
H1
0.00
0.25
Relative inlined CSS/JS size
0.50
0.75
1.00
(a) Domains per
page.
(b) Objects perdo-
main.
(c) Relative Inline CSS/JSS size.
Fig. 3. Content analysis and delivery.
Takeaway: There is no signiﬁcant diﬀerence in object composition between the
H1 and H2 versions of a website. Also, 90 % of the websites still leverage H1 to
serve a portion of their content.
Number of Connections. We now investigate the number of TCP connections
used to load a website using H1 versus H2. Motivated by the previous result, we
diﬀerentiate websites based on how many of their objects are served with H2.
Figure 2(b) shows the Cumulative Distribution Function (CDF) of the number of
TCP connections per website as a function of th, or the fraction of the webpage’s
objects served with H2. In case of H1 we show a single curve as objects are
always served with H1. The data for this plot was collected from our machines
in Cleveland between October 6th–13th (8,492 distinct websites).
We ﬁrst focus on the H1 curve and the H2 curve obtained with th = 0, where
no websites are ﬁltered. On average, H2 requires half as many TCP connections
as H1; a few websites can even be served via a single TCP connection, but
there are extreme cases where up to 100 connections might be required. As th
increases, the required number of TCP connections decreases; this is intuitive
since H1 and H2 cannot share the same TCP connection. For th = 1, all objects
are served with H2, up to 40 % of the websites only need a single TCP connection
indicating that the websites content is hosted entirely on a single webserver; still,
the remaining 60 % need up to 20 TCP connections. This is a consequence of
the way web content is organized today, where objects might reside on 3rd party
domains. We further analyze this phenomenon next.
Takeaway: H2 does not currently succeed in serving a page using a single TCP
connection: 50 % (4,300) of the websites using H2 today use at least 20 TCP
connections.
Page Composition. Websites today try to optimize delivery using several tech-
niques like sharding, inlining, spriting and concatenation (cf. Sect. 1 and [18]).
We see no straightforward way to measure spriting and concatenation, so in this
228
M. Varvello et al.
work we only focus on sharding and inlining. Figure 3 summarizes the results of
this analysis.
Focusing ﬁrst on domain sharding, Fig. 3(a) reports the distribution of the
number of unique domains per website. The distributions for H1 and H2 are
essentially the same with a median of 18 domains per page each, and outliers of
∼250 unique domains on a single page. This ﬁnding is related to the number of
TCP connections opened per page (cf. Fig. 2(b)). While H2 allows multiplexing
object requests over a single TCP connection, most web pages embed objects
from many diﬀerent domains, thus forcing the use of a larger number of TCP
connections. There are two plausible explanations for this: (1) web masters are
deliberately sharding, and (2) it is just a natural consequence of deep linking (as
opposed to re- hosting) practices that are common across the web.
Next, Fig. 3(b) plots the distribution of the average number of objects per
domain per website. We again ﬁnd that there is no meaningful diﬀerence between
H1 and H2: most domains are used for relatively few objects (median = {3.5,
3.5}, mean = {5.5, 5.4}, top 10th-percentile of {9.7, 9.6}, and a max of {179,
171} for H1 and H2 respectively). This is further evidence of sharding-esque
behavior since web page objects are dispersed over a large number of domains.
Finally, Fig. 3(c) plots the size of inlined CSS/JS relative to the total size of
the main HTML for each website; i.e., what fraction of the total bytes making up
an HTML document are from inlined CSS/JS. We ﬁnd that there is a long tail
where inlined CSS/JS makes up a considerable portion of the page: about 25 %
of websites’ page contents is more than 25 % inlined CSS/JS. With H1, inlining
can help ensure the page loads faster by not requiring an extra TCP connection;
however this is no longer an issue in H2, so these websites are potentially suﬀering
a performance hit since inlined content cannot be cached separately by the client.
Takeaway: Most websites exhibit H1 practices like domain sharding and inlining
in H2. Sharding causes H2 websites to use more TCP connections than necessary
and inlining may reduce the utility of caching.
Fig. 4. CDFs of H2 speedup.
4.3 Performance
Is the Web HTTP/2 Yet?
229
Comparison to H1. First, we investigate H2 performance by comparing a
website’s page load time (PLT) when using H1 and H2. There is no standardized
deﬁnition of PLT; from a user perspective, it is the time from when the user
enters a URL in the browser to when the page is displayed. Similar to other
studies [7], we approximate PLT as the time from when Chrome starts fetching
the page to the ﬁring of the JavaScript “onLoad” event; this event occurs once the
page’s embedded resources have been downloaded, but possibly before all objects
loaded via scripts are downloaded. We deﬁne “H2 speedup” as the diﬀerence in
PLT between the H1 and H2 versions of a website; speedup values > 0 indicate
websites that are delivered faster with H2 than H1.
For this analysis, we leverage the data collected from multiple locations and
access networks in the second week of October. From ﬁber connections, we target
8,492 websites with veriﬁed H2 support (cf. Fig. 1(a)) using three network loca-
tions: Barcelona (Spain), Pittsburgh (U.S.), and Cleveland (U.S.). Experiments
using 3G/4G connections are performed at a single location (Barcelona) and we
restrict the list to the 200 most popular websites, as ranked by Alexa, that also
support H2.
Figure 4(a) shows the CDF of H2 speedup at each location, and access net-
work. We start by focusing on ﬁber access; the ﬁgure shows positive speedup
values for 75–85% of the websites depending upon network location. While Pitts-
burgh and Cleveland show very similar H2 speedup values (decreasing the like-
lihood of this being an anomalous observation), speedup values measured from
Barcelona are 10–15% higher. Our latency estimations coupled with the mea-
surements (cf. Sect. 3) show that, on average, the Barcelona experiments suﬀer
an additional 14 ms in RTT since most target websites are located in the U.S.
Likely, the longer RTT negatively impacts H1 more than H2 due to the hand-
shakes required by the additional TCP connections in H1 (cf. Sect. 4.2).
Next, we focus on a single location (Barcelona) and diﬀerent network access,
namely ﬁber, 4G, and 3G ordered by decreasing “speed.” Figure 4(a) shows that
as the access speed decreases, the beneﬁt of adopting H2 also increases: the
average speedup grows from 560 ms on ﬁber, up to respectively 800 ms on 4G
and 1.6 s on 3G. Latency measurements show that the median RTT more than
doubles from ﬁber to 4G (46 up to 105 ms), and it grows by an additional 10 %
on 3G (117 ms). This additional latency again negatively impacts H1 more than
H2. Figure 4(a) also shows that an additional 10 % of websites see a performance
degradation, negative speedup, over 3G compared with 4G and ﬁber. This results
is due to the fact that for 3G and 4G we target Alexa’s 200 most popular websites
that also support H2, which tend to be landing pages and are simpler than the
average website. In this case, the application protocol used has little impact as
PLT is dominated by RTT.
Takeaway: 80 % of the websites adopting H2 see an average page load time
reduction of 500 ms (ﬁber) and 1.6 s (3G). The remaining 20 % see an average
page load time increase of 1 s (ﬁber) and 1.4 s (3G).
230
M. Varvello et al.
Partial Adoption. We now analyze the impact of the fraction of the webpage
served with H2 (th) on H2 speedup (cf. Fig. 2(a)). For this analysis, we focus
on a single location and access network (Cleveland, ﬁber) since no signiﬁcant
diﬀerences arise across locations and access types. We ﬁnd that for th < 1 there
is no statistically signiﬁcant diﬀerence between the curves6 and most websites
beneﬁt from even partial H2 adoption. On average, the speedup reduces by
10 % when we consider th = 1 which seems counter-intuitive. This again related
to a simpler object composition of these websites for which H2 beneﬁts result
marginal.
Takeaway: Even partial H2 adoption improves PLT. In fact, the decrease in
PLT for websites using both H1 and H2 is often greater than that for pure H2
websites (though this is likely an artifact of the small subset of websites that are
fully H2, which tend to be very simple).
4.4 Discussion
In December 2015, a notable event shook our measurement infrastructure [1].
CloudFlare, a global CDN and DNS provider, enabled H2 for all its free cus-
tomers.7 This resulted in an additional 80,000 websites announcing H2 support
(H2-announce) of which about 60,000 exhibit true support (H2-true). Note that
CloudFlare uses an in- house version of NGINX, reported as cloudﬂare-nginx,
which rapidly became the most popular web server implementation supporting
H2.
Such rapid growth in H2-true websites aﬀected Phase III’s feasibility: at such
scale, even the lazy strategy would require over a month to complete. Considering
even further growth moving forward, we can either divide Phase III among our
vantage points or sample the websites to test. We have temporarily suspended
Phase III and are rethinking this component of our infrastructure. In addition,
we are currently collaborating directly with CloudFlare to collect both server
and client side measurements. We will soon report the outcome of an improved
Phase III on [1] as well as in an extension of this work.
5 Conclusion
This work presents a measurement platform to monitor both adoption and per-
formance of H2, the recently standardized update of H1. On a daily basis,
our platform checks the top 1 million Alexa websites for which protocols they
announce support. Next, it checks which websites actually support H2, and, once
a week, tests their content structure and performance from multiple network
locations. Once a month, a popular subset of these websites is also tested from
3G and 4G networks. Results are updated daily at [1]. In this paper, we report
our initial ﬁndings from an 11 month measurement campaign, from November
6
7
Two sample Kolmogorov-Smirnov tests provided no support to reject the null hypothesis.
https://www.cloudﬂare.com/http2/.
Is the Web HTTP/2 Yet?
231
2014 until October 2015. We ﬁnd 68,000 websites already announcing H2 sup-
port, out of which 10,000 serve actual content, i.e., not an error page or redirect.
An in-depth analysis of the content being served reveals that classic H1 hacks
are still present with H2. In performance, we ﬁnd that 80 % of the websites load
faster with H2 than H1. The average decrease in page load time is 300–560 ms
from multiple locations with a ﬁber access, and up to 1.6 s from a European 3G
connection.
References
1. Is the Web HTTP/2 Yet?. http://isthewebhttp2yet.com
2. Node.js. https://nodejs.org/
3. Planetlab. http://planet-lab.org
4. Langley, A.: TLS Next Protocol Negotiation. https://technotes.googlecode.com/
git/nextprotoneg.html
5. Akhshabi, S., Dovrolis, C.: The evolution of layered protocol stacks leads to an
hourglass-shaped architecture. In: Proceedings of the ACM SIGCOMM, Toronto,
Canada, August 2011
6. Cardaci, A.: Chrome har capturer. https://github.com/cyrus-and/chrome-har-
capturer
7. Erman, J., Gopalakrishnan, V., Jana, R., Ramakrishnan, K.: Towards a SPDYier
mobile web?. In: Proceedings of the ACM CoNEXT, Santa Barbara, CA, December
2013
8. White, G., Mule, J.-F., Rice, D.: Analysis of spdy and tcp initcwnd. https://tools.
ietf.org/html/draft-white-httpbis-spdy-analysis-00
9. Moln´ar, G.: node-http2. https://github.com/molnarg/node-http2
10. Google: Spdy whitepaper. http://www.chromium.org/spdy/spdy-whitepaper
11. Podjarny, G.: Not as spdy as you thought. http://www.guypo.com/not-as-spdy-
as-you-thought/
12. Rizzo, J., Duong, T.: The crime attack. In: Ekoparty (2012)
13. Naylor, D., Finamore, A., Leontiadis, I., Grunenberger, Y., Mellia, M., Munaf`o, M.,
Papagiannaki, K., Steenkiste, P.: The cost of the “S” in HTTPS. In: Proceedings
of the ACM CoNEXT, Sydney, Australia, December 2014
14. OpenSSL: OpenSSL: The Open Source Toolkit for SSL/TLS. https://www.openssl.
org/
15. Padhye, J., Nielsen, H.F.: A comparison of spdy and http performance. Technical
report (2012)
16. Peon, R., Ruellan, H.: Hpack - header compression for http/2. https://tools.ietf.
org/html/draft-ietf-httpbis-header-compression-12
17. Saxc`e, H.D., Oprescu,
Is HTTP/2 really faster than
HTTP/1.1?. In: Proceedings ot he IEEE Global Internet Symposium (GI), Hong
Kong, CH, April 2014
I., ChenSaamer, Y.:
18. Stenberg, D.: HTTP2, background, the protocol, the implementations and the
future. http://daniel.haxx.se/http2/http2-v1.9.pdf
19. Stenberg, D.: HTTP2 Explained. http://http2-explained.haxx.se/content/en/
part5.html
20. Friedl, S., Popov, A., Langley, A., Stephan, E.: Transport layer security
(tls) application-layer protocol negotiation extension. https://tools.ietf.org/html/
rfc7301
232
M. Varvello et al.
21. The http archive: http://httparchive.org
22. Tuan, N.A.: Maximum concurrent connections to the same domain for browsers.
http://sgdev-blog.blogspot.com.es/2014/01/maximum-concurrent-connection-to-
same.html
23. Wang, X.S., Balasubramanian, A., Krishnamurthy, A., Wetherall, D.: How speedy
is spdy. In: Proceedings of the NSDI, Seattle, WA, April 2014