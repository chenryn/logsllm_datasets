title:Static Disassembly of Obfuscated Binaries
author:Christopher Kr&quot;ugel and
William K. Robertson and
Fredrik Valeur and
Giovanni Vigna
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Static Disassembly of Obfuscated Binaries
Christopher Kruegel, William Robertson, Fredrik Valeur and Giovanni Vigna
Reliable Software Group
University of California Santa Barbara
{chris,wkr,fredrik,vigna}@cs.ucsb.edu
Abstract
Disassembly is the process of recovering a symbolic rep-
resentation of a program’s machine code instructions
from its binary representation. Recently, a number of
techniques have been proposed that attempt to foil the
disassembly process. These techniques are very effec-
tive against state-of-the-art disassemblers, preventing a
substantial fraction of a binary program from being dis-
assembled correctly. This could allow an attacker to hide
malicious code from static analysis tools that depend on
correct disassembler output (such as virus scanners).
The paper presents novel binary analysis techniques
that substantially improve the success of the disassem-
bly process when confronted with obfuscated binaries.
Based on control ﬂow graph information and statistical
methods, a large fraction of the program’s instructions
can be correctly identiﬁed. An evaluation of the accu-
racy and the performance of our tool is provided, along
with a comparison to several state-of-the-art disassem-
blers.
Keywords: Binary Obfuscation, Reverse Engineering,
Static Analysis.
1 Introduction
Software applications are often distributed in binary
form to prevent access to proprietary algorithms or to
make tampering with licensing veriﬁcation procedures
more difﬁcult. The general assumption is that under-
standing the structure of a program by looking at its bi-
nary representation is a hard problem that requires sub-
stantial resources and expertise.
Software reverse-engineering techniques provide auto-
mated support for the analysis of binary programs. The
goal of these techniques is to produce a higher-level rep-
resentation of a program that allows for comprehension
and possibly modiﬁcation of the program’s structure.
The software reverse-engineering process can be divided
into two parts: disassembly and decompilation. The
task of the disassembly phase is the extraction of the
symbolic representation of the instructions (assembly
code) from the program’s binary image [12]. Decompi-
lation [5, 6] is the process of reconstructing higher-level
semantic structures (and even source code) from the pro-
gram’s assembly-level representation.
A number of approaches have been proposed to make
the reverse-engineering process harder [8, 9, 17]. These
techniques are based on transformations that preserve
the program’s semantics and functionality and, at the
same time, make it more difﬁcult for a reverse-engineer
to extract and comprehend the program’s higher-level
structures. The process of applying one or more of these
techniques to an existing program is called obfuscation.
Most previous work on program obfuscation has focused
on the decompilation phase. To this end, researchers
have proposed to use constructs such as indirect jumps
or indirect memory references via pointers that are difﬁ-
cult to analyze [14]. In [13], Linn and Debray introduce
novel obfuscation techniques that focus on the disassem-
bly phase instead. Their techniques are independent of
and complementary to previous approaches to make de-
compilation harder. The main idea is to transform the
binary such that the parsing of instructions becomes dif-
ﬁcult. The approach exploits the fact that the Intel x86
instruction set architecture contains variable length in-
structions that can start at arbitrary memory address.
By inserting padding bytes at locations that cannot be
reached during run-time, disassemblers can be confused
to misinterpret large parts of the binary. Although their
approach is limited to Intel x86 binaries, the obfuscation
results against current state-of-the-art disassemblers are
remarkable.
Linn and Debray state that their obfuscation techniques
can enhance software security by making it harder for
an attacker to steal intellectual property, to make unau-
thorized modiﬁcations to proprietary software or to dis-
8048000
8048001
55
89 e5
push
mov
%ebp
%esp, %ebp
8048003
8048008
e8 00 00 74 11
0a 05
804800a
804800c
804800e
8048010
8048012
L1:  8048014
L2:  8048019
804801b
804801c
804801d
3c 00
75 06
b0 00
eb 07
0a 05
a1 00 00 74 01
89 ec
5d
c3
90
call
(junk)
cmp
jne
mov
jmp
(junk)
mov
mov
pop
ret
nop
19788008 
0, %eax
8048014 
0, %eax
8048019 
(1740000), %eax
%ebp, %esp
%ebp
function func(int arg) {
       int local_var, ret_val;
       local = other_func(arg);
       if (local_var == 0) 
              ret_val = 0;
       else  
              ret_val = global_var;
       return ret_val;
}
Disassembly of Obfuscated Function
C Function
Figure 1: Example function.
cover vulnerabilities. On the other hand, program obfus-
cation could also be used by attackers to hide malicious
code such as viruses or Trojan Horses from virus scan-
ners [3, 16]. Obfuscation also presents a serious threat
to tools that statically analyze binaries to isolate or to
identify malicious behavior [2, 11]. The reason is that if
relevant program structures were incorrectly extracted,
malicious code could be classiﬁed as benign.
This paper presents static analysis techniques to cor-
rectly disassemble Intel x86 binaries that are obfuscated
to resist static disassembly. The main contribution are
general control-ﬂow-based and statistical techniques to
deal with hard-to-disassemble binaries. Also, a mecha-
nism is presented that is speciﬁcally tailored against the
tool implemented by Linn and Debray [13]. An imple-
mentation based on our approach has been developed,
and the results show that our tool is able to substantially
improve the disassembly of obfuscated binaries.
In Section 2, the
The paper is structured as follows.
principal techniques used in binary disassembly are re-
viewed, together with a discussion of Linn and Debray’s
recently proposed obfuscation techniques. In Section 3,
we outline the disassembly approach and present our
assumptions. Section 4 and Section 5 provide an in-
depth description of our disassembly techniques. In Sec-
tion 6, a quantitative evaluation of the accuracy and per-
formance of our disassembler is presented. Finally, in
Section 7, we brieﬂy conclude and outline future work.
2 Related Work and Background
Disassembly techniques can be categorized into two
main classes: dynamic techniques and static techniques.
Approaches that belong to the ﬁrst category rely on mon-
itored execution traces of an application to identify the
executed instructions and recover a (partial) disassem-
bled version of the binary. Approaches that belong to
the second category analyze the binary structure stati-
cally, parsing the instruction opcodes as they are found
in the binary image.
Both static and dynamic approaches have advantages
and disadvantages. Static analysis takes into account the
complete program, while dynamic analysis can only op-
erate on the instructions that were executed in a partic-
ular set of runs. Therefore, it is impossible to guarantee
that the whole executable was covered when using dy-
namic analysis. On the other hand, dynamic analysis
assures that only actual program instructions are part of
the disassembly output. In this paper, we focus on static
analysis techniques only.
In general, static analysis techniques follow one of two
approaches. The ﬁrst approach, called linear sweep,
starts at the ﬁrst byte of the binary’s text segment and
proceeds from there, decoding one instruction after an-
other. It is used, for example, by GNU’s objdump [10].
The drawback of linear sweep disassemblers is that they
are prone to errors that result from data embedded in the
instruction stream. The second approach, called recur-
sive traversal, ﬁxes this problem by following the control
ﬂow of the program [6, 15]. This allows recursive dis-
assemblers to circumvent data that is intertwined with
the program instructions. The problem with the second
approach is that the control ﬂow cannot always be recon-
structed precisely. When the target of a control transfer
instruction such as a jump or a call cannot be determined
statically (e.g., in case of an indirect jump), the recur-
sive disassembler fails to analyze parts of the program’s
8048000
8048001
8048003
8048008
804800a
804800c
804800e
8048010
8048012
8048014
8048018
8048019
804801b
804801c
804801d
55
89 e5
push
mov
%ebp
%esp, %ebp
55
89 e5
push
mov
%ebp
%esp, %ebp
e8 00 00 74 11
0a 05 3c 00 75 06
call
or
19788008 
675003c, %al
e8 00 00 74 11
0a 05 3c 00 75 06
call
or
19788008 
675003c, %al
b0 00
eb 07
0a 05 a1 00 00 74
mov
jmp
or
0, %eax
8048019
740000a1, %al
01 89 ec 5d c3 90
adc
%ecx, 90c35dec(%ecx)
b0 00
eb 07
89 ec
5d
c3
90
mov
jmp
0, %eax
8048019
%ebp, %esp
%ebp
mov
pop
ret
nop
Linear Sweep Disassembler
Recursive Traversal Disassembler
Figure 2: Traditional disassemblers.
code. This problem is usually solved with a technique
called speculative disassembly [4], which uses a linear
sweep algorithm to analyze unreachable code regions.
Linn and Debray’s approach [13] to confuse disassem-
blers are based on two main techniques. First, junk
bytes are inserted at locations that are not reachable at
run-time. These locations can be found after control
transfer instructions such as jumps where control ﬂow
does not continue. Consider the example in Figure 1,
where a function is presented in source form and in
its corresponding assembly representation. At address
0x8048012, two junk bytes are added after the jump
instruction at address 0x8048010. Inserting junk bytes
at unreachable locations should not effect recursive dis-
assemblers, but has a profound impact on linear sweep
implementations.
The second technique relies on a branch function to
change the way regular procedure calls work. This cre-
ates more opportunities to insert junk bytes and misleads
both types of disassemblers. A normal call to a sub-
routine is replaced with a call to the branch function.
This branch function uses an indirect jump to transfer
control to the original subroutine. In addition, an offset
value is added to the return address of the subroutine.
When the subroutine is done, control is not transfered
to the address directly after the call instruction. Instead,
the instruction that is offset number of bytes after the
call instruction is executed. In the example in Figure 1,
two junk bytes are inserted after the call to the branch
function at address 0x8048003. During run-time, the
branch function modiﬁes the return address such that the
next instruction that is executed after the call is at ad-
dress 0x804800a.
Figure 2 shows the disassembly results for the exam-
ple function when using a linear sweep and a recursive
traversal disassembler. The linear sweep disassembler
is successfully confused in both cases where junk bytes
are inserted. The two junk bytes at 0x8048008 are
interpreted as or instruction, causing the the following
four bytes (which are actually a cmp and a jne instruc-
tion) as being parsed as a 32-bit argument value. A simi-
lar problem occurs at address 0x8048012, resulting in
only 5 out of 12 correctly identiﬁed instructions.
This recursive disassembler is not vulnerable to the junk
bytes inserted at address 0x8048012 because it rec-
ognizes instruction 0x8048010 as an unconditional
jump. Therefore, the analysis can continue at the jump
target, which is at address 0x8048019. However, the
junk bytes after the call instruction at 0x8048003 lead
to incorrect disassembly and the subsequent failure to
decode the jump at 0x804800c with its corresponding
target at 0x8048014.
In this example, the recursive
traversal disassembler succeeds to correctly identify 9
out of 12 instructions. However, the situation becomes
worse when dealing with real binaries. Because calls
are redirected to the branch function, large parts of the
binary become unreachable for the recursive traversal al-
gorithm. The results in Section 6 demonstrate that recur-
sive traversal disassemblers, such as IDA Pro, perform
worse on obfuscated binaries than linear sweep disas-
semblers, such as objdump.
3 Disassembling Obfuscated Binaries
Our disassembler performs static analysis on Intel x86
binaries. When analyzing an obfuscated binary, one
cannot assume that the code was generated by a well-
behaved compiler.
In fact, the obfuscation techniques
introduced by Linn and Debray [13] precisely exploit
the fact that standard disassemblers assume certain prop-
erties of compiler-generated code that can be violated
without changing the program’s functionality. By trans-
forming the binary into functionally equivalent code that
does not possess all the assumed properties, standard
disassemblers are confused and fail to correctly translate
binary code into its corresponding assembly representa-
tion. In general, certain properties are easier to change
than others and it is not straightforward to transform
(i.e., obfuscate) a binary into a functionally equivalent
representation in which all the compiler-related proper-
ties of the original code are lost. When disassembling
obfuscated binaries, we require that certain assumptions
are valid. These assumptions (some of which constitute
limiting factors for our ability to disassemble obfuscated
binaries) are described in the following subsections.
1. Valid instructions must not overlap. An instruc-
tion is denoted as valid if it belongs to the program,
that is, it is reached (and executed) at run-time as
part of some legal program execution trace. Two
instructions overlap if one or more bytes in the ex-
ecutable are shared by both instruction.
In other
words, the start of one instruction is located at an
address that is already used by another instruction.
Overlapping instructions have been suggested to
complicate disassembly in [7]. However, suitable