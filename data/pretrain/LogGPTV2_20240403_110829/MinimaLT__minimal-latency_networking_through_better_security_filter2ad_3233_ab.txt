of the MinimaLT protocol. We describe, for completeness,
an implementation that uses DNS. The implementation is
very simple: D does a DNS lookup on the hostname which
returns S’s service record. No changes are needed to DNS
software: MinimaLT only adds service records as DNS TXT
records.
Establishing a connection We depict an external lookup
in Figure 2. The full sequence is as follows:
(1) S sends its service record to its local N;
(2) C requests S’s service record from its local D (if D has
cached S’s service record, then skip to step 5);
(3) D makes a DNS query for S to N;
(4) N replies to D with S’s service record; and
(5) D replies to C with S’s service record.
Finally, after verifying the signatures on S’s service record,
C establishes a tunnel with S.
In successive sections, we will ignore steps (3) and (4)
which are not part of the MinimaLT protocol. Further in-
formation on communication between C and D is given in
§5.2 and between S and N is given in §5.4.
Discussion The directory service is designed for easy de-
ployability on the Internet today while guaranteeing at least
as much security as is currently obtained from the X.509 PKI
used in TLS. In particular, a client C checks an X.509 cer-
tiﬁcate chain leading to the long-term public key for server
S, in the same way that web browsers today check such
chains. This chain is transmitted over DNS, obtaining three
beneﬁts compared to transmitting the chain later in the pro-
tocol: (1) The chain automatically takes advantage of DNS
caching. (2) Even when not cached, the latency of transmit-
ting the chain is usually overlapped with existing latency for
DNS queries. (3) Any security added to DNS automatically
creates an extra obstacle for the attacker, forcing the at-
tacker to break both DNS security and X.509 security.
For comparison, if a client obtains merely an IP address
from DNS and then requests an X.509 certiﬁcate chain from
that IP address (the normal use of TLS today), then the
attacker wins by breaking X.509 security alone. If a client
instead obtains the S public key from DNS as a replace-
ment for X.509 certiﬁcate chains then the attacker wins by
breaking DNS security alone.
The integration of MinimaLT’s directory services with
DNS aﬀects DNS conﬁgurations in two ways. First, the
DNS record’s time to live must be set to less than or equal to
the key-erasure interval of the host it describes. We expect
this to have a small impact, because most Internet traﬃc is
to organizations that already use short times to live (e.g.,
300 seconds for www.yahoo.com and www.google.com, and
60 seconds for www.amazon.com). Second, DNS replies will
grow due to the presence of additional ﬁelds. The largest im-
pact is the long-term certiﬁcate, which as mentioned above
is encoded today as an X.509 certiﬁcate.
We do not claim that DNS and X.509 are satisfactory
from a performance perspective or from a security perspec-
tive, but improved systems and replacement systems will
integrate trivially with MinimaLT. We are planning a sayI
implementation [53] which will have a stronger trust model
and better performance.
4 MinimaLT packet format
Here we describe the MinimaLT packet format which we
will build on in §5 to describe MinimaLT’s packet ﬂow.
MinimaLT’s simple packet format spans three protocol lay-
ers: the connection, tunnel, and delivery layers. We depict
this format in Figure 3 and Table 1.
The plaintext portion of the packet contains the Ethernet,
IP, and UDP headers; the Tunnel ID (TID); a number-used-
once (nonce); and two optional ﬁelds that can be used during
tunnel initiation—an ephemeral public key and a puzzle. A
client provides the public key only on the ﬁrst packet for
427|
Ethernet
{z
IP
Delivery
}
UDP|
{z
}
|
{z
··· RPCm
}
TID Nonce Opt. ephemeral pub. key Opt. puzzle/solution
Checksum Seq Ack RPC0
Figure 3: Packet format with plaintext in white and cryptographically protected portion in gray
T unnel (plaintext)
T unnel (cryptographically protected)
Field
Size (bytes)
First Successive
serviceRequestc(. . . )
a request for some type of service on
connection c
. Ethernet Header
IP
UDP
v
i
l
e
D
. Tunnel ID
Nonce
Ephemeral public key
Puzzle/solution
Checksum
o
t
p
y
r
C
&
. Sequence Num.
l
e
R
. Connection ID
n
o
C
Acknowledgment
RPC
Total (except RPC)
14
20
8
8
8
32
148
16
4
4
4
282
variable
14
20
8
8
8
n/a
n/a
16
4
4
4
86
Table 1: Tunnel’s ﬁrst/successive packets
a tunnel, and a server requires puzzles opportunistically to
prevent memory and computation attacks.
The packet’s cryptographically protected portion contains
ciphertext and the ciphertext’s cryptographic checksum.
The ciphertext contains a sequence number, acknowledg-
ment number, and series of Remote Procedure Calls (RPCs).
4.1 RPCs
Each MinimaLT connection communicates a series of RPCs.
An RPC is of the form fc(a0, a1, . . .), where f is the name of
the remote function, c is the connection on which the RPC
is sent, and a0, a1, . . . are its arguments. On the wire this is
encoded as c, f, a0, a1, . . . A single packet can contain multi-
ple RPCs from one connection or from multiple connections
within the same tunnel.
One connection is distinguished: connection 0 is the con-
trol connection, which hosts all management operations.
These include creating, closing, accepting, and refusing con-
nections; providing service records (§5.4); rekeying (§5.5)
and IP address changes (§5.6); puzzles (§5.7); and ﬂow con-
trol (§5.9). We reference the following RPCs:
RPC
create0(c, y)
createAuth0(c, y, U, x)
Description
create anonymous connection c of
type y
create an authenticated connection
for the user with long-term public key
U, who generates authenticator x
close connection c
creation of c successful
connection c refused
get host S’s service record
close0(c)
ack0(c)
refuse0(c)
requestCert0(S)
giveCert0(certS,ecertS) provide the service record for server
ok0()
nextTid0(t, C0)
rekeyNow0()
puzz0(q, H(r), w, n0)
puzzSoln0(r, n0)
windowSize0(c, n)
All data on connections other than the control connection
are sent unchanged to their corresponding applications.
S (contents described in §3.4)
last request was OK
advertise future TID to prepare for a
rekey or IP address change (§5.5)
server request for rekey
pose a puzzle (§5.7)
provide a puzzle solution r
adjust conn. receive window (§5.9)
In general, each service provided by a host supports
a set of
service-speciﬁc RPCs on standard connec-
tions. Our illustrations use the following sample RPC:
4.2 Authenticated encryption
MinimaLT is built on top of a high-level cryptographic ab-
straction, public-key authenticated encryption, to protect
both conﬁdentiality and integrity of messages sent from one
public key to another.
It is well known (see, e.g., [6, 7,
32, 25]) how to build public-key authenticated encryption
on top of lower-level primitives: use static DH to assign a
shared secret to the two public keys; use keys derived from
the shared secret to encrypt each message and to authen-
ticate each ciphertext. Note that low-level cryptographic
message authentication should not be confused with user
authentication and host authentication.
The input to public-key authenticated encryption is a
plaintext to encrypt, the sender’s secret key, the receiver’s
public key, and a nonce (a message number used only once
for this pair of keys). The output is an authenticated cipher-
text which is longer than the plaintext because it includes
an authenticator (a cryptographic checksum). The inverse
operation produces the original plaintext given an authenti-
cated ciphertext, the same nonce, the receiver’s secret key,
and the sender’s public key.
Each MinimaLT packet contains one authenticated ci-
phertext, together with the nonce used to create the cipher-
text. The corresponding plaintext consists of reliability in-
formation (a sequence number and an acknowledgment num-
ber) and the concatenation of the RPCs sent in this packet.
MinimaLT chooses monotonically increasing nonces
within each tunnel; our implementation uses time-based
nonces. Once used, a nonce is never repeated for the same
tunnel. The client uses odd nonces, and the server uses even
nonces, so there is no risk of the two sides generating the
same nonce. Clients enforce key uniqueness by randomly
generating a new ephemeral public key for each new tunnel;
this is a low-cost operation. For a host which operates as
both client and server, its client ephemeral key is in addition
to (and diﬀerent from) its server ephemeral key.
MinimaLT uses the public-key authenticated encryption
mechanism from NaCl [6], with 32-byte public keys, 16-
byte authenticators, and 8-byte nonces. Except for these
sizes and the performance reported in §6 our description of
MinimaLT is orthogonal to this choice of encryption mech-
anism.
4.3 Tunnel IDs and ephemeral public keys
The tunnel establishment packet (the ﬁrst packet sent be-
tween two hosts) contains a TID and the sending host’s
ephemeral public DH key. The TID is pseudo-randomly
generated by the initiator. The public key is ephemeral to
avoid identifying the client host to a third party.
Subsequent packets use the TID to identify the tunnel
and thus do not repeat the DH key. The recipient uses the
TID to look up the tunnel’s shared secret used to verify and
decrypt the authenticated ciphertext inside the packet. The
TID is 64 bits—1/4 the size of a public key—with one bit
indicating the presence of a public key in the packet, one bit
indicating the presence of a puzzle/solution (see §5.7), and
62 bits identifying a tunnel.
428Conn., req. ephemeral key
Ephemeral key
D
T1
(a) Obtaining D’s ephemeral key (only at boot time)
D0
Conn., req. server information
IP address, UDP port, key,
T2
ephemeral key of S
(b) Prelude to connection (only if tunnel does not yet exist)
C0
C0
C0
Connect,
application-to-service RPC
(c) Connection establishment
Figure 4: MinimaLT protocol trace
S0
T3
4.4 Delivery
MinimaLT concatenates tunnel information with the au-
thenticated ciphertext and places the result into a UDP
packet for delivery across existing network infrastructure. A
MinimaLT packet on the wire thus contains standard Ether-
net, IP, and UDP headers. The UDP header allows packets
to traverse NATed networks [19] and enables user-space im-
plementations of MinimaLT. Aside from the UDP length
ﬁeld, the delivery ﬁelds (including UDP port numbers) are
ignored by MinimaLT. The MinimaLT protocol details are
orthogonal to the structure of IPv4/v6 addresses.
5 MinimaLT packet ﬂow
This section explains how a MinimaLT client C forms a
tunnel and connects to a server S. All application data, as
well as client and user identity, is encrypted under ephemeral
keys that will soon be discarded. (IP addresses by necessity
are visible.) Once a tunnel is formed, successive connections
are created using RPCs within the existing tunnel.
We show a complete three-step connection in Figure 4:
T1 facilitates the request by C for D’s ephemeral key (only
required if this is C’s ﬁrst lookup since booting); T2 pro-
tects the connection between C0 and D0 (used to request S’s
ephemeral key, the analogue of a DNS lookup); and T3 pro-
tects communication between C0 and S0. This section also
covers more advanced issues such as rekeying and IP-address
mobility; DoS protections; user authenticators; and conges-
tion control.
We do not usually distinguish between a host (or user),
their long-term public key, and their long-term private key,
instead relying on context to disambiguate them. Figure 5
describes the notation we will use during the course of our