    ; i++ 
    cmp    ecx, edx      ; i>8 
                   movzx   eax, al   
   ; EAX=*(key+i) 
                   mov     eax, dword ptr ds:crctab[eax*4] ; EAX=crctab[EAX] 
                   xor     eax, ecx  
   ; hash=EAX^ECX 
                   cmp     ebx, edx 
                   ja      short loc_80484B8 
loc_80484D3: 
                   pop     ebx 
                   pop     esi 
                   pop     ebp 
                   retn 
crc                endp 
\  
GCC 增加了空指令 NOP 以及 LEA esi,[esi+0]（这实际也是一个空指令），以此使得循环语句向 8 字节
对齐。另外，编译器通常还会采用 npad 指令进行边界对齐。有关详情请参阅本书第 88 章。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 3388 章
章    网
网络
络地
地址
址计
计算
算实
实例
例  
众所周知，IPv4 下的 TCP/IP 地址由 4 个数字组成，每个数字都在 0～255（十进制）之间。所以 IPv4
的地址可以表示为 4 字节数据。4 字节数据就是一个 32 位数据。因此 IPv4 的主机地址、子网掩码和网络
地址都可以表示为一个 32 位的整数。 
从使用者的角度来看，子网掩码由 4 位数字组成，写出来大致就是 255.255.255.0 这类形式的数字。但
是网络工程师或者系统管理员更喜欢使用更为紧凑的表示方法，也就是CIDR
①
CIDK 规范的掩码 
规范的“/8”“/16”一类的表
示方法。CIDR格式的子网掩码从子网掩码的MSB（最高数权位）开始计数，统计子网掩码里面有多少个 1
并将统计数字转换为 10 进制数。 
数字空间 
可用地址（个）
②
十进制子网掩码 
十六进制子网掩码 
/30 
4 
2 
255.255.255.252 
fffffffc 
/29 
8 
6 
255.255.255.248 
fffffff8 
/28 
16 
14 
255.255.255.240 
fffffff0 
/27 
32 
30 
255.255.255.224 
ffffffe0 
/26 
64 
62 
255.255.255.192 
ffffffc0 
/24 
256 
254 
255.255.255.0 
ffffff00 
C 类网段 
/23 
512 
510 
255.255.254.0 
fffffe00 
/22 
1024 
1022 
255.255.252.0 
fffffc00 
/21 
2048 
2046 
255.255.248.0 
fffff800 
/20 
4096 
4094 
255.255.240.0 
fffff000 
/19 
8192 
8190 
255.255.224.0 
ffffe000 
/18 
16384 
16382 
255.255.192.0 
ffffc000 
/17 
32768 
32766 
255.255.128.0 
ffff8000 
/16 
65536 
65534 
255.255.0.0 
ffff0000 
B 类网段 
/8 
16777216 
16777214 
255.0.0.0 
ff000000 
A 类网段 
这里举一个简单的例子：将子网掩码应用到主机地址，从而计算的网络地址。 
#include  
#include  
uint32_t form_IP (uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4) 
{ 
          return (ip1>24)&0xFF, 
                   (a>>16)&0xFF, 
                   (a>>8)&0xFF, 
                   (a)&0xFF); 
}; 
① CIDR 是 Classless Inter-Domain Routing 的缩写，即无类域间路由。 
② 可用地址二数字空间-2。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
438 
逆向工程权威指南（上册） 
// bit=31..0 
uint32_t set_bit (uint32_t input, int bit) 
{ 
          return input=input|(1<<bit); 
}; 
uint32_t form_netmask (uint8_t netmask_bits) 
{ 
          uint32_t netmask=0; 
          uint8_t i; 
          for (i=0; i<netmask_bits; i++) 
                    netmask=set_bit(netmask, 31-i); 
          return netmask; 
}; 
void calc_network_address (uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t  ip4, uint8_t netmask_bits) 
{ 
          uint32_t netmask=form_netmask(netmask_bits); 
          uint32_t ip=form_IP(ip1, ip2, ip3, ip4); 
          uint32_t netw_adr; 
          printf ("netmask="); 
          print_as_IP (netmask); 
          netw_adr=ip&netmask; 
          printf ("network address="); 
          print_as_IP (netw_adr); 
}; 
int main() 
{ 
          calc_network_address (10, 1, 2, 4, 24); // 10.1.2.4, /24 
          calc_network_address (10, 1, 2, 4, 8);  // 10.1.2.4, /8 
          calc_network_address (10, 1, 2, 4, 25);  
// 10.1.2.4, /25 
          calc_network_address (10, 1, 2, 64, 26);  
// 10.1.2.4, /26 
}; 
38.1  计算网络地址函数 calc_network_address() 
计算网络地址函数 calc_network_address()实现起来非常简单：它将主机地址和网络子网掩码进行 AND
与运算，得到的结果就是网络的实际地址。 
指令清单 38.1  MSVC 2012 采用参数/Ob0 优化 
 1  _ip1$ = 8  
; size = 1 
 2  _ip2$ = 12   
; size = 1 
 3  _ip3$ = 16   
; size = 1 
 4  _ip4$ = 20   
; size = 1 
 5  _netmask_bits$ = 24  
; size = 1 
 6  _calc_network_address PROC 
 7    
push     edi 
 8    
push     DWORD PTR _netmask_bits$[esp] 
 9    
call     _form_netmask 
10  
push     OFFSET $SG3045  ; 'netmask=' 
11  
mov      edi, eax 
12  
call     DWORD PTR __imp__printf 
13  
push     edi 
14  
call     _print_as_IP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 38 章  网络地址计算实例 
439 
15  
push     OFFSET $SG3046  ; 'network address=' 
16  
call     DWORD PTR __imp__printf 
17  
push     DWORD PTR _ip4$[esp+16] 
18  
push     DWORD PTR _ip3$[esp+20] 
19  
push     DWORD PTR _ip2$[esp+24] 
20 
push     DWORD PTR _ip1$[esp+28] 
21  
call     _form_IP 
22  
and      eax, edi  
    ; network address = host address & netmask 
23  
push     eax 
24  
call     _print_as_IP 
25  
add      esp, 36 
26  
pop      edi 
27  
ret      0 
28  _calc_network_address ENDP 
在第 22 行，我们可以看到最为重要的运算指令 AND。就是它计算出了网络地址，实现了核心功能。 
38.2  函数 form_IP() 
form_IP()函数将 IP 的 4 个字节转换成一个 32 位数值。 
它的运算流程如下： 
 给返回值分配一个变量，并赋值为 0。 
 取数权最低的第 4 个字节，与返回值 0 进行 OR/或操作，即可得到含有第 4 字节信息的 32 位值。 
 取第 3 个字节，左移 8 位，以生成 0x0000bb00（其中 bb 就是这步读取的第三字节）这种形式的
数值。此后与返回值进行 OR/或运算。如果上一步的值如果是 0x000000aa 的话，在执行 OR 或操
作后，就会得到 0x0000bbaa 这样的返回值。 
 依此类推。取第 2 个字节，左移 16 位，生成 0x00cc0000 这样一个含有第 2 字节的 32 位值，再进
行 OR/或运算。由于以上一步的返回值应当是 0x0000bbaa，因此本次运算的结果会是 0x00ccbbaa。 
 同理。取最高位，左移 24 位，以生成 0xdd000000 这样一个含有第一字节信息的 32 位值，再进行
OR/或运算。由于上一步的返回值是 0x00ccbbaa，因此最终的结果的值就是 0xddccbbaa 这样的 32
位值了。 
经 MSVC 2012 进行非优化编译，可得到下述指令： 
指令清单 38.2  非优化的 MSVC2012 的实现 
; denote ip1 as "dd", ip2 as "cc", ip3 as "bb", ip4 as "aa". 
_ip1$ = 8   
; size = 1 
_ip2$ = 12   
; size = 1 
_ip3$ = 16   
; size = 1 
_ip4$ = 20   
; size = 1 
_form_IP PROC 
         push    ebp 
         mov  
ebp, esp 
         movzx  
eax, BYTE PTR _ip1$[ebp] 
         ; EAX=000000dd 
         shl  
eax, 24 
         ; EAX=dd000000 
         movzx  
ecx, BYTE PTR _ip2$[ebp] 
         ; ECX=000000cc 
         shl  
ecx, 16 
         ; ECX=00cc0000 
         or   
eax, ecx 
         ; EAX=ddcc0000 
         movzx  
edx, BYTE PTR _ip3$[ebp] 
         ; EDX=000000bb 