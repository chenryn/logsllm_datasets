3. BACKGROUND
3.1 Smart Meter
A smart meter is a networked device that measures elec-
tricity and communicates with a server. Smart meters have
three main components, as we explain below.
Control unit:
Inside the meter, there is a Microcon-
troller that transfers data measured by the low-level meter
engine to a ﬂash memory. The Microcontroller can save logs
of important events during the activity of the smart meter.
Communication unit: For the meters to be able to com-
municate with each other and the server, they are equipped
with a Network Interface Card (NIC). Meters can be con-
nected to in-home displays, programmable controllable ther-
mostats, etc. to form a Home Area Network (HAN). In each
area, smart meters will be connected to a collector through
ﬁeld area network (FAN). This collector gathers all data and
communicates with the utility server through Wide Area
Network (WAN). The communication interface di↵ers from
region to region.
Clock: For the meters to have the capability of providing
time-of-use billing services, they are equipped with a real-
time clock (RTC). This clock should be synchronized with
the server clock on a regular basis to prevent any drift. This
is done through synchronization messages.
3.2 Threat model
Access:
In this paper, we consider both physical and
network attacks against the meter. We assume that the ad-
versary has both read and write access to the communica-
tion interfaces of the meter (e.g., WiFi, LAN, serial interface
between the components of the meter). This is a realistic
assumption as smart meters are installed in locations (e.g.,
homes, business entities) accessible to people other than the
meter vendors. Due to ﬁnancial beneﬁts that can be gained
by tampering with the meter, the owners of the meter instal-
lations may act as the adversary as well. For example, open
source tools such as Termineter [57] allow communication
via the serial interface and optical probe, and sending/re-
Access
A1
Physical access
to the device
Actions
- Tampering with the
cover seal
- Observing visible
indicators
- Disabling internal
battery
A2
Physical access to the
internal/external
communication interfaces
- Send/Receive data via
communication interfaces
A3
Access to a routing
node in the grid network
- Dropping data packets
infrastructure
Table 1: Accesses and capabilities of the adversary
playing messages. Accessing the serial interface between the
control unit and communication unit of smart meters may
need the attacker to remove the seal of the cover of the me-
ter. However, it has been shown that it is relatively easy to
do so, and the attacker can erase any traces that the cover
has been removed [38]. We also assume that the attack-
ers may intercept communication of the meter, for example,
by obtaining root access to some node on the grid network.
This is a realistic assumption as it has been shown that the
complexity and the scale of smart grid infrastructure pro-
vides several entry points for attackers to obtain such access
[42]. However, the attacker does not require root access to
the smart meter itself.
Capabilities: We assume that the attacker is able to
drop/replay the messages sent to the smart meter, drop/re-
play messages sent or received between the control unit of
the meter and the network communication unit which is nor-
mally via a serial interface, and can restart the meter (e.g.,
by resetting the power) at a precise time. We do not require
the adversary to be able to decrypt any encrypted messages,
or to be able to spoof any cryptographic tokens. We do as-
sume however that they are capable of reverse-engineering
the meters’ binary code or getting access to its source code.
This is reasonable as security through obscurity (of the code)
is known to be a weak defense strategy [35]. Further, there
are many tools that will allow reverse engineering of the
source code from a binary ﬁle, e.g., Ida Pro [49], BinNavi
[10], and OllyDBG [46].
The capabilities of the attacker in our threat model are
basic and do not require high level of expertise. We show
that even considering these basic capabilities, attackers may
mount severe attacks against smart meters (see Sec.5). Note
that it is relatively straightforward to model additional capa-
bilities of the attacker in our model as long as the capabilities
can be described formally. Also, increasing the capabilities of
attackers makes it easier to ﬁnd attacks against the system,
in our model.
We have presented the summary of accesses and capabil-
ities of the adversary in Table 1. The attacks that we are
targeting in this paper are the results of the vulnerabilities
in the software running on the meter. These vulnerabilities
may exist due to bugs in either the design or the implementa-
tion of the meter software. We are not considering network
attacks on availability such as Denial of Service (DoS). We
are also not considering attacks on privacy of smart meters,
e.g., obtaining consumption data, in this paper.
3.3 Rewriting logic
In this paper, we use Rewriting logic [33] to formally
model smart meters and attacker capabilities. Rewriting
logic is a ﬂexible framework for expressing proof systems. It
allows us to deﬁne the transitional rules that transition the
system from one state to another, as well as the functions
deﬁned in the system. Using rewriting logic, we can specify
the behavior of the system as a series of states, functions,
and rules of transitioning between the states. Also, we can
query the transition paths of the system to verify the cor-
rectness of the system behavior.
Formally a rewrite theory is a 4-tuple < = {⌃, E, L, R}.⌃
is the set of all functions (operations), and constants deﬁned
in <. E is the set of all the equations in <. Equations help
deﬁne the operation of the system (for example how two
variables are added together). R is a set of labeled rewriting
rules and L indicates those labels. Rewriting rules model
transitions in the system and express the way the system
evolves. In a rewrite theory, any of the rewrite rules may be
applied concurrently to represent the behavior of a system.
This lets us build rules that capture the behavior of both
the system and the attacker. Using model checking, we can
check if any sequence of the attacker’s rewrite rules together
with the rewrite rules of the smart meter can transition the
system to an unsafe state.
In this paper, we implement the formal model of the sys-
tem in rewriting logic using Maude [15]. Maude is a tool
that supports rewriting logic, and enables the users to both
execute rewriting logic rules and formally verify them. This
is useful as we can execute the model to gain conﬁdence in
it before formally verifying it.
Maude allows us to perform model checking of the system
with regard to invariants. This means that we can check
whether it is possible that from an initial state s in the
model, we can reach a state x, in which an invariant I does
not hold true. In Maude, this is done by using search com-
mand: search(s) ) x such that I(x) 6= true. The invariant
I (e.g., data being greater than or equal to 0), may be de-
ﬁned by the user of the system, and we deﬁne state x in
which the invariant I does not hold as an unsafe state.
Maude executes the search by doing breadth-ﬁrst-search,
starting from initial state s, and applying one rewriting rule
at a time to the previous state. This way, all possible tran-
sitions in the model are checked. This is known as explicit
state model checking (ESMC) [6]. Note that other vari-
ants of search strategies are possible in Maude e.g., sym-
bolic model checking [6], that aim to tackle the problem of
state space explosion that ESMC incurs. We do not explore
these in this paper as the state space of the smart meter was
still amenable to be analyzed by ESMC within a reasonable
amount of time, as shown in Sec. 5.
4. APPROACH
In this section, we propose a formal approach for analyzing
security of smart meters. We deﬁne a formal model for smart
meters, a set of basic actions for an attacker, and use model
checking to automatically search all the possible scenarios of
applying those actions on the model of smart meters. The
search ﬁnds the scenarios that lead to potential attacks, and
is guaranteed to ﬁnd all the attacks within the state space
of our model (both the smart meter and the attacker).
We follow a three step process for building the model as
follows. In the rest of this section, we explain each of the
steps in more detail.
• Step 1: We formally model the components of smart
meters and their operations. Smart meters are com-
puting devices and can be considered as small gen-
eral purpose computers. However, unlike general pur-
pose computers, smart meters have low memory, low
computing-capacity, and are designed to carry out a
speciﬁc set of operations. In prior work, we have pro-
posed an abstract model for operations of smart meters
in [44]. This abstract model represents an implementation-
independent model of the components of the meter,
their operations, and their execution order. In this pa-
per, we express the abstract model formally in rewrit-
ing logic. Rewriting logic lets us model all the oper-
ations (functions) of the system, and the transitions
between its states.
• Step 2: We deﬁne a set of capabilities for the attacker
also in rewriting logic. Modeling both the smart meter
and the attacker’s capabilities in rewriting logic allows
us to automatically and systematically search for all
the possible scenarios in which the attacker’s actions
on the meter can take the system to an unsafe state.
An example of an unsafe state is when consumption
data calculated by the meter are lost, and not submit-
ted to the server. The users of our model may deﬁne
their own unsafe states as a ﬁrst order logic formula
over the states of the model.
• Step 3: We compose the model of the smart meter,
concurrently with the model of attacker actions. Us-
ing model checking, our system searches through all
the execution paths of the models that lead to unsafe
states. The actions that take the smart meter into
an unsafe state will be identiﬁed as a potential attack
on the system. Because we use model-checking, we are
guaranteed to ﬁnd all the possible paths that may take
the system into an unsafe state, within the scope of the
model.
4.1 Formal Model
We use the abstract model of smart meters presented by
Molazem et. al. [44] as our input to build the formal model
of smart meters in rewriting logic. This abstract model
presents an implementation-independent model of the com-
ponents of the meter, their operations, and their execution
order. Therefore, it is valid for di↵erent implementations
of smart meters. Using the abstract model, we extract the
execution paths of components of the meter, and formally
describe them. Below, we brieﬂy explain the major opera-
tions of a smart meter as per the abstract model.
Smart meter’s operations: Upon starting, the meter
initializes the sensors and communication interfaces. The
microcontroller periodically collects data from all the sen-
sor channels by polling them, and averages data samples
to calculate consumption data for each channel. Then, the
microcontroller listens to incoming data requests from the
communication unit, via a serial interface. Upon receiving a
data request, consumption data calculated so far are sent to
the communication unit of the meter, which stores the data
on physical storage. The meter veriﬁes connection to the
network and to the server by pinging the server periodically.
At speciﬁc time intervals, the meter retrieves all the unsent
consumption data from the physical storage and transmits
them to the utility server via its network interface. The
1
2
3
Data over
serial 
interface
s
r
o
s
n
e
S
r
e
l
l
o
r
t
n
o
c
o
r
c
M
i
n
o
a
t
a
d
e
r
o
t
S
y
r
o
m
e
m
l
i
a
c
s
y
h
p
e
h
t
o
t
r
e
v
r
e
s
d
n
a
a
t
a
d
e
v
e
i
r
t
e
R
m
e
h
t
d