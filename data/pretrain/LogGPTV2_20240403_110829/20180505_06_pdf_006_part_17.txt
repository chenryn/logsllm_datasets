NOCACHE
neither or will cache 20 values to memory. In the event of a database failure, all
CACHE NOCACHE
cached sequence values that have not been used, will be lost and gaps in sequence values may occur.
Example
Creating a sequence:
SQL> CREATE SEQUENCE SEQ_EMP
START WITH 100
INCREMENT BY 1
MAXVALUE 99999999999
CACHE 20
NOCYCLE;
Dropping a sequence:
SQL> DROP SEQUENCE SEQ_EMP;
Viewing sequences created for the current schema/user:
SQL> SELECT * FROM USER_SEQUENCES;
Using sequence as part of an statement:
INSERT INTO
SQL> CREATE TABLE EMP_SEQ_TST (
COL1 NUMBER PRIMARY KEY,
COL2 VARCHAR2(30));
SQL> INSERT INTO EMP_SEQ_TST VALUES(SEQ_EMP.NEXTVAL, 'A');
COL1 COL2
---------- ------------------------------
100 A
Query the current value of a sequence:
SQL> SELECT SEQ_EMP.CURRVAL FROM DUAL;
Manually increment the value of a sequence, according to the specification:
INCREMENT BY
SQL> SELECT SEQ_EMP.NEXTVAL FROM DUAL;
200
Altering an existing sequence:
SQL> ALTER SEQUENCE SEQ_EMP MAXVALUE 1000000;
Oracle 12c Default Values Using Sequences
Starting with Oracle 12c, you can assign a sequence to a table column with the statement
CREATE TABLE
and specify the configuration of the sequence during table creation.
NEXTVAL
Example
Generating DEFAULT values using sequences in Oracle 12c:
SQL> CREATE TABLE SEQ_TST (
COL1 NUMBER DEFAULT SEQ_1.NEXTVAL PRIMARY KEY,
COL2 VARCHAR(30));
SQL> INSERT INTO SEQ_TST(COL2) VALUES('A');
SQL> SELECT * FROM SEQ_TST;
COL1 COL2
---------- ------------------------------
100 A
Oracle 12c Session Sequences (Session/Global)
Starting with Oracle 12c, sequences can be created as session-level or global-level sequences. By adding the
parameter to the sequence will be created as a session-level sequence.
SESSION CREATE SEQUENCE,
Optionally, the keyword can be used to create a sequence as a global sequence to provide consistent
GLOBAL
results across sessions in the database. Global sequences are the default. Session sequences return a unique
range of sequence numbers only within a session.
Example
Oracle 12c and sequences:
SESSION GLOBAL
SQL> CREATE SEQUENCE SESSION_SEQ SESSION;
SQL> CREATE SEQUENCE SESSION_SEQ GLOBAL;
O racle 12c Identity Columns
Sequences can be used as an type, which automatically creates a sequence and associates it with
IDENTITY
the table column. The main difference is that there is no need to create a sequence manually; the
IDENTITY
type does that for you. An type is a sequence that can be configured.
IDENTITY
Example
Oracle 12c Identity Columns:
Inserting records using an Oracle 12c column explicitly/implicitly:
IDENTITY
SQL> INSERT INTO IDENTITY_TST(COL2) VALUES('A');
SQL> INSERT INTO IDENTITY_TST(COL1, COL2) VALUES(DEFAULT, 'B');
SQL> INSERT INTO IDENTITY_TST(col1, col2) VALUES(NULL, 'C');
SQL> SELECT * FROM IDENTITY_TST;
COL1 COL2
---------- ------------------------------
120 A
201
130 B
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_6015.htm#SQLRF01314
https://docs.oracle.com/database/121/SQLRF/statements_6017.htm#SQLRF01314
http://www.oracle.com/technetwork/issue-archive/2013/13-sep/o53asktom-1999186.html
202
Migration to: PostgreSQL Sequences
[Back to TOC]
Overview
The PostgreSQL command is mostly compatible with the Oracle
CREATE SEQUENCE CREATE SEQUENCE
command. Sequences in PostgreSQL serve the same purpose as in Oracle; they generate numeric identifiers
automatically. A sequence object is owned by the user that created it.
PostgreSQL Sequence Synopsis
CREATE [ TEMPORARY | TEMP ] SEQUENCE [ IF NOT EXISTS ] name
[ INCREMENT [ BY ] increment ]
[ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]
[ START [ WITH ] start ] [ CACHE cache ] [ [ NO ] CYCLE ]
[ OWNED BY { table_name.column_name | NONE } ]
Most Oracle parameters are compatible with PostgreSQL. Similar to Oracle 12c, in
CREATE SEQUENCE
PostgreSQL you can create a sequence and use it directly as part of a statement.
CREATE TABLE
Sequence Parameters
• or
TEMPORARY TEMP
PostgreSQL can create a temporary sequence within a session. Once the session ends, the sequence is
automatically dropped.
•
IF NOT EXISTS
Creates a sequence even if a sequence with an identical name already exists. Replaces the existing
sequence.
•
INCREMENT BY
Optional parameter with a default value of 1. Positive values generate sequence values in ascending
order. Negative values generate sequence values in descending sequence.
•
START WITH
The same as Oracle. This is an optional parameter having a default of 1. It uses the MINVALUE for
ascending sequences and the MAXVALUE for descending sequences.
•
MAXVALUE | NO MAXVALUE
Defaults are between 263 for ascending sequences and -1 for descending sequences.
•
MINVALUE | NO MINVALUE
Defaults are between 1 for ascending sequences and -263 for descending sequences.
203
•
CYCLE | NO CYCLE
If the sequence value reaches or , the parameter instructs the
MAXVALUE MINVALUE CYCLE
sequence to return to the initial value ( or ). The default is .
MINVALUE MAXVALUE NO CYCLE
•
CACHE
Note that in PostgreSQL, the is not supported. By default, when not specifying the
NOCACHE CACHE
parameter, no sequence values will be pre-cached into memory, which is equivalent to the Oracle
parameter. The minimum value is 1.
NOCACHE
•
OWNED BY | OWNBY NON
Specifies that the sequence object is to be associated with a specific column in a table, which is not
supported by Oracle. When dropping this type of sequence, an error will be returned because of the
sequence/table association.
Example
Create a sequence:
demo=> CREATE SEQUENCE SEQ_1
START WITH 100
INCREMENT BY 1
MAXVALUE 99999999999
CACHE 20
NO CYCLE;
* Identical to Oracle syntax, except for the whitespace in the NO CYCLE parameter.
Drop a sequence:
demo=> DROP SEQUENCE SEQ_1;
View sequences created in the current schema and sequence specifications:
demo=> SELECT * FROM INFORMATION_SCHEMA.SEQUENCES;
OR
demo=> \ds
Use a PostgreSQL sequence as part of a and an statement:
CREATE TABLE INSERT
demo=> CREA TE TABLE SEQ_TST (
COL1 NUMERIC DEFAULT NEXTVAL('SEQ_1') PRIMARY KEY,
COL2 VARCHAR(30));
demo=> INSE RT INTO SEQ_TST (COL2) VALUES('A');
demo=> SELECT * FROM SEQ_TST;
col1 | col 2
------+---- --
100 | A
204
Use the parameter to associate the sequence with a table:
OWNED BY
demo=> CREATE SEQUENCE SEQ_1
START WITH 100
INCR EMENT BY 1
OWNE D BY SEQ_TST.COL1;
Query the current value of a sequence:
demo=> SELECT CURRVAL('SEQ_1);
Manually increment a sequence value according to the value:
INCREMENT BY
demo=> SELECT NEXTVAL('SEQ_1');
OR
demo=> SELECT SETVAL('SEQ_1', 200);
Alter an existing sequence:
demo=> ALTER SEQUENCE SEQ_1 MAXVALUE 1000000;
Generating Sequence by SERIAL Type
PostgreSQL enables you to create a sequence that is similar to the property supported by
AUTO_INCREMENT
identity columns in Oracle 12c. When creating a new table, the sequence is created through the
SERIAL
pseudo-type. Other types from the same family are and .
SMALLSERIAL BIGSERIAL
By assigning a type to a column on table creation, PostgreSQL creates a sequence using the default
SERIAL
configuration and adds a constraint to the column. The newly created sequence behaves as a
NOT NULL
regular sequence.
Example
Using a Sequence:
SERIAL
demo=> CREATE TABLE SERIAL_SEQ_TST(
COL1 SERIAL PRIMARY KEY,
COL2 V ARCHAR(10));
demo=> INSERT INTO SERIAL_SEQ_TST(COL2) VALUES('A');
demo=> SELECT * FROM SERIAL_SEQ_TST;
col1 | col2
------+------
1 | A
demo=> \ds
Schema | Name | Type | Owner
--------+-------------------------+----------+-------
public | serial_seq_tst_col1_seq | sequence | pg_tst_db
205
Oracle Sequences vs. PostgreSQL Sequences:
Parameter/Feature Compatibility with Comments
PostgreSQL
Create sequence syntax Full, with minor differences See Exceptions
Full
INCREMENT BY
Full
START WITH
MAXVALUE | Full Use “ NO MAXVALUE”
NOMAXVALUE
MINVALUE | Full Use “ NO MINVALUE”
NOMINVALUE
CYCLE | NOCYCLE Full USE “ NO CYCLE”
CACHE | NOCACHE PostgreSQL does not support
the parameter but
NOCACHE
the default behavior is
identical. The
CACHE
parameter is compatible with
Oracle.
Default values using sequences Supported by PostgreSQL CREATE TABLE TBL(
(Oracle 12c) COL1 NUMERIC
DEFAULT
NEXTVAL('SEQ_1')…
Session sequences (session / Supported by PostgreSQL by
global), Oracle 12c using the
TEMPORARY
sequence parameter to Oracle
sequence
SESSION
Oracle 12c identity columns Supported by PostgreSQL by
using the data type
SERIAL
as sequence
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createsequence.html
https://www.postgresql.org/docs/9.6/static/functions-sequence.html
https://www.postgresql.org/docs/9.6/static/datatype-numeric.html
206
Migrating from: Oracle Database Links
[Back to TOC]
Overview
Database Links are schema objects that are used to interact with remote database objects such as tables.
Common use cases for database links include selecting data from tables that reside in a remote database.
Note: To use database links, Oracle net services must be installed on both the local and remote database
servers to facilitate communications.
Example:
1. Create a database link named . When creating a database link, you have the option to
remote_db
either specify the remote database destination using a TNS Entry or specify the full TNS Connection
string.
CREATE DATABASE LINK remote_db
CONNECT TO username IDENTIFIED BY password
USING 'remote';
CREATE DATABASE LINK remotenoTNS
CONNECT TO username IDENTIFIED BY password
USING '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS = (PROTOCOL = TCP)(HOST
=192.168.1.1)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = orcl)))';
2. After the database link is created, you can use the database link directly as part of a SQL query using
the database link name ( ) as a postfix to the table name.
@remote_db
SELECT * FROM employees@remote_db;
3. Database links also support DML commands:
INSERT INTO employees@remote_db
(employee_id, last_name, email, hire_date, job_id)
VALUES (999, 'Claus', 'PI:EMAIL', SYSDATE, 'SH_CLERK');
UPDATE jobs@remote_db SET min_salary = 3000
WHERE job_id = 'SH_CLERK';
DELETE FROM employees@remote_db
WHERE employee_id = 999;
For additional details:
https://docs.oracle.com/database/121/SQLRF/statements_5006.htm#SQLRF01205
207
Migration to: PostgreSQL DBLink and FDWrapper
[Back to TOC]
Overview
Querying data in remote databases in PostgreSQL is available via two primary options:
1. database link function.
dblink
2. (Foreign Data Wrapper, FDW) extension.
postgresql_fdw
The Postgres foreign data wrapper extension is new to PostgreSQL and offers functionality that is similar to
. However, the Postgres foreign data wrapper aligns closer with the SQL standard and can provide
dblink
improved performance.
Example using the function
dblink
1. Load the extension into PostgreSQL:
dblink
CREATE EXTENSION dblink;
2. Create a persistent connection to a remote PostgreSQL database using the function
dblink_connect
specifying a connection name ( ), database name ( ), port ( ), host
myconn postgresql 5432
( ), user ( ) and password ( ).
hostname username password
SELECT dblink_connect('myconn', 'dbname=postgres port=5432
host=hostname user=username password=password');
The connection can be used to execute queries against the remote database.
3. Execute a query using the previously created connection ( via the function.
myconn) dblink
The query returns the and columns from the table. On the remote database, you
id name employees
must specify the connection name and the SQL query to execute as well as parameters and datatypes for
selected columns ( and in this example).
id name
SE LECT *
fr om dblink('myconn', 'SELECT id, name FROM EMPLOYEES')
AS p(id int,fullname text);
4. Close the connection using the function.
dblink_disconnect
SELECT dblink_disconnect('myconn');
208
5. Alternatively, you can use the function specifying the full connection string to the remote
dblink
PostgreSQL database, including: database name, port, hostname, username, and password. This can be
done instead of using a previously defined connection. You must also specify the SQL query to execute as
well as parameters and datatypes for the selected columns ( and , in this example).
id name
SE LECT *
from dblink('dbname=postgres port=5432
host=hostname user=username password=password',
'SELECT id, name FROM EMPLOYEES')
AS p(id int,fullname text);
6. DML commands are supported on tables referenced via the function. For example, you can insert
dblink
a new row and then delete it from the remote table.
SELECT * FROM dblink('myconn',$$INSERT into employees VALUES (3,'New
Employees No. 3!')$$) AS t(message text);
SELECT * FROM dblink('myconn',$$DELETE FROM employees WHERE id=3$$) AS
t(message text);
7. Create a new local table ( ) by querying data from a remote table.
new_employees_table
SELECT emps.* INTO new_employees_table FROM dblink('myconn','SELECT *
FROM employees') AS emps(id int, name varchar);
8. Join remote data with local data.
SE LECT local_emps.id , local_emps.name, s.sale_year, s.sale_amount,
FROM local_emps INNER JOIN dblink('myconn','SELECT * FROM
working_hours') AS s(id int, hours_worked int) ON
lo cal_emps.id = s.id;
9. Execute DDL statements in the remote database.
SE LECT * FROM dblink('myconn',$$CREATE table new_remote_tbl
(a int, b text)$$) AS t(a text);
For additional details:
https://www.postgresql.org/docs/9.6/static/dblink.html
209
Example using the PostgreSQL Foreign Data Wrapper
1. Load the Extension into PostgreSQL.
fdw
CREATE EXTENSION postgres_fdw;
2. Create a connection to the remote PostgreSQL database specifying the remote server ( ),
hostname
database name ( ) and the port ( ).
postgresql 5432
CREATE SERVER remote_db
FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host 'hostname', dbname 'postgresql', port '5432');
3. Create the user mapping, specifying:
The is a user with permissions in the current database.
o local_user
Specify the server connection created in the previous command ( ).
o remote_db
The and arguments specified in the options clause must have the
o user password
required permissions in the remote database.
CREATE USER MAPPING FOR local_user
SERVER remote_db
OPTIONS (user 'remote_user', password 'remote_password');
After the connection with login credentials for the remote database was created, we can either import
individual tables or the entire schema containing all, or some, of the tables and views.
4. Create a named using the remote connection
FOREIGN TABLE foreign_emp_tbl remote_db
created earlier specifying both the schema name and table name in the remote database to be
queried. For example, the table.
hr.employees
CREATE FOREIGN TABLE foreign_emp_tbl (
id int, name text)
SERVER remote_db
OPTIONS (schema_name 'hr', table_name 'employees');
5. Queries running on the local table will actually query data directly from the
foreign_emp_tbl
remote table.
hr.employees
SELECT * FROM foreign_emp_tbl;
6. You can also “import” an entire schema, or specific tables, without specifying a specific table name:
IMPORT FOREIGN SCHEMA hr LIMIT TO (employees)
FROM SERVER remote_db INTO local_hr;
210
Notes:
1. Both and store the remote database username and password as plain-text, in two
dblink FDW
locations:
a. The view, accessible only to “super users” in the database.
pg_user_mapping
b. When using the function, passwords can be stored in your code or procedures inside
dblink
the database.
2. Any changes to PostgreSQL user passwords require changing the specifications as well.
FDW/dblink
3. When using , if columns in the remote tables have been dropped or renamed, the queries will fail.
FDW