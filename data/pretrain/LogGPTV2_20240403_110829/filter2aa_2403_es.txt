码中
中发
发现
现重
重要
要而
而有
有趣
趣的
的内
内容
容  
目前的软件往往都很庞大，可以说，极简主义不是现代软件的突出特性。但是这并不是说当下的编程
者书写的程序代码行多了，而是因为很多的库都普遍与可执行文件静态地链接在一起了。如果所有的外部
库都转移至外部动态链接库 DLL 的话，那么可能情况就会有所不同（对于 C++而言，另外的一个理由是静
态模板库 STL 以及其他的模板库文件）。 
因此，确定函数的来源很重要，其或者是来自标准库或者通用库（类似 Boost 和 libpng），或者是与我
们要找的代码相关。 
为了找到我们要的代码而重新编写代码是有些荒唐。 
对于一个反编译的工程师来说，一个主要的工作是快速地发现他要找的代码。 
反编译工具 IDA 能让我们在字符串、字节串以及常数中搜索字符串。该工具甚至能将代码输出到 lst
或则 asm 文件中，进而可以采用 grep 和 awk 等命令处理字符串。 
当想要知道某些代码是做什么用的时候，它可能采用一些开源的库（类似上面提到的 libpng），因此 当
你看到一些变量、常数或者字符串很熟悉时，可以用 Google 搜索一下。如果发现一个开源工程在使用时，
就可以拿来做比较。这样的话，也能解决一部分问题。 
例如，如果一个程序采用了 XML 文件，第一步就需要确定采用了 XML 的哪个库来做处理过程，因为
通常都是采用的标准库或者通用库，而不是开发者自己来自行开发。 
再举一个例子，在 SAP 6.0 的软件中，笔者曾经试图了解网络数据包是如何压缩并解压缩的。因为它
是一个很大的软件，一个包括调试信息在内的 PDB 文件使用起来比较方便。通过它能发现一个函数
CsDecomprLZC 被调用，而这个函数就是对网络数据包进行解压缩的。因此通过查询 Google 就能发现这个
异步社区会员 dearfuture(15918834820) 专享 尊重版权
620 
逆向工程权威指南 
函数是用在了 MaxDB 中，而这就是一个 SAP 的开源项目。 
查询的命令是：http://www.google.com/search?q=CsDecomprLZC。 
令人吃惊的是，MaxDB 和 SAP 6.0 软件在网络数据的压缩和解压缩方面采用了相同的代码。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5555 章
章    编
编译
译器
器产
产生
生的
的文
文件
件特
特征
征  
55.1  Microsoft Visual C++ 
MSVC 的版本和其 DLL 的对应关系如下所示。 
市场发行的版本 
内部版本 
命令行版本 
能导入的 DLL 的版本 
发行日期 
6 
6.0 
12.00 
msvcrt.dll, msvcp60.dll 
June 1998 
.NET (2002) 
7.0 
13.00 
msvcr70.dll, msvcp70.dll 
February 13, 2002 
.NET 2003 
7.1 
13.10 
msvcr71.dll, msvcp71.dll 
April 24, 2003 
2005 
8.0 
14.00 
msvcr80.dll, msvcp80.dll 
November 7, 2005 
2008 
9.0 
15.00 
msvcr90.dll, msvcp90.dll 
November 19, 2007 
2010 
10.0 
16.00 
msvcr100.dll, msvcp100.dll 
April 12, 2010 
2012 
11.0 
17.00 
msvcr110.dll, msvcp110.dll 
September 12, 2012 
2013 
12.0 
18.00 
msvcr120.dll, msvcp120.dll 
October 17, 2013 
msvcp*.dll 含有 C++相关函数，因此导入这些 DLL 文件的可执行程序很可能是 C++程序。 
55.1.1  命名规则 
名字通常都是以“?”开始的。 
有关 MSVC 命名规则的详细介绍，请参考本书 51.1.1 节。 
55.2  GCC 编译器 
GCC 不仅可以编译*NIX 平台的应用程序，在 Cygwin 和 MinGW 环境下它同样可以编译面向 Win32
平台的应用程序。 
55.2.1  命名规则 
命名通常以符号“_Z”开始。 
有关 GCC 命名规则的详细介绍，请参考本书 51.1.1 节。 
55.2.2  Cygwin 
GCC 在 Cygwin 环境下编译的应用程序，通常会导入 cygwin1.dll 文件。 
55.2.3  MinGW 
GCC 在 Cygwin 环境下编译的应用程序，可能会导入 msvcrt.dll 文件。 
55.3  Intel FORTRAN  
由 Intel Fortran 编译的应用程序，可能会导入以下 3 个文件：  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
622 
逆向工程权威指南（下册） 
① Libifcoremd.dll。 
② Libifportmd.dll。 
③ Libiomp5.dll（支持 OpenMP）。 
库文件 libifcoremd.dll 定义了很多以字符串“for_”开头的函数。它就是 FORTRAN 的代表性前缀。 
55.4  Watcom 以及 OpenWatcom 
55.4.1  命名规则 
由 Watcom 编译出来的程序，其符号名称通常以“W”字母开头。 
以 W?method$_class$n__v 为例：大写字母 W 开头代表它是 Watcom 编译出来的程序，方法的名称为
method，类的名称为 class，没有参数且无返回值的 void 方法会命名为： 
W?method$_class$n__v 
55.5  Borland 编译器 
下面所示的是 Borland Delphi 编译器以及 C++ Builder 的命名规范： 
@TApplication@IdleAction$qv 
@TApplication@ProcessMDIAccels$qp6tagMSG 
@TModule@$bctr$qpcpvt1 
@TModule@$bdtr$qv 
@TModule@ValidWindow$qp14TWindowsObject 
@TrueColorTo8BitN$qpviiiiiit1iiiiii 
@TrueColorTo16BitN$qpviiiiiit1iiiiii 
@DIB24BitTo8BitBitmap$qpviiiiiit1iiiii 
@TrueBitmap@$bctr$qpcl 
@TrueBitmap@$bctr$qpvl 
@TrueBitmap@$bctr$qiilll 
由 Borland 编译出来的程序，其符号名称必定以字符“@”开头，后面几个字母分别代表：类名称、
方法名称以及方法的参数类型。 
这些符号名称可能出现在 exe 文件的输入表、dll 文件的输出表以及调试数据等地方。 
VCL 的全称是 Borland Visual Component Libraries，意思是 Borland 的可视化组件库。它们保存在 bpl
文件中，而不是保存在 dll 文件中。比如说文件 vcl50.dll 和 rtl60.dll。 
由 Borland 编译出来的程序还可能会导入 BORLNDMM.DLL 文件。 
55.5.1  Delphi 编程语言 
通过观察我们不难看出，几乎所有的 Delphi 可执行文件在代码段的起始部分都有一个“Boolean”字
符串，后面还跟着其他数据类型的类型名称。 
这里列出一个非常典型的 Delphi 程序的代码段片段，它就位于 Win32 程序的 PE 头之后。 
00000400  04 10 40 00 03 07 42 6f 6f 6c 65 61 6e 01 00 00  |..@...Boolean...| 
00000410  00 00 01 00 00 00 00 10 40 00 05 46 61 6c 73 65  |PI:EMAIL| 
00000420  04 54 72 75 65 8d 40 00 2c 10 40 00 09 08 57 69  |.True.@.,PI:EMAIL| 
00000430  64 65 43 68 61 72 03 00 00 00 00 ff ff 00 00 90  |deChar..........| 
00000440  44 10 40 00 02 04 43 68 61 72 01 00 00 00 00 ff  |D.@...Char......| 
00000450  00 00 00 90 58 10 40 00 01 08 53 6d 61 6c 6c 69  |PI:EMAIL| 
00000460  6e 74 02 00 80 ff ff ff 7f 00 00 90 70 10 40 00  |nt..........p.@.| 
00000470  01 07 49 6e 74 65 67 65 72 04 00 00 00 80 ff ff  |..Integer.......| 
00000480  ff 7f 8b c0 88 10 40 00 01 04 42 79 74 65 01 00  |......@...Byte..| 
00000490  00 00 00 ff 00 00 00 90 9c 10 40 00 01 04 57 6f  |PI:EMAIL| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 55 章  编译器产生的文件特征 
623 
000004a0  72 64 03 00 00 00 00 ff ff 00 00 90 b0 10 40 00  |rd............@.| 
000004b0  01 08 43 61 72 64 69 6e 61 6c 05 00 00 00 00 ff  |..Cardinal......| 
000004c0  ff ff ff 90 c8 10 40 00 10 05 49 6e 74 36 34 00  |......@...Int64.| 
000004d0  00 00 00 00 00 00 80 ff ff ff ff ff ff ff 7f 90  |................| 
000004e0  e4 10 40 00 04 08 45 78 74 65 6e 64 65 64 02 90  |..@...Extended..| 
000004f0  f4 10 40 00 04 06 44 6f 75 62 6c 65 01 8d 40 00  |..@...Double..@.| 
00000500  04 11 40 00 04 08 43 75 72 72 65 6e 63 79 04 90  |..@...Currency..| 
00000510  14 11 40 00 0a 06 73 74 72 69 6e 67 20 11 40 00  |PI:EMAIL .@.| 
00000520  0b 0a 57 69 64 65 53 74 72 69 6e 67 30 11 40 00  |..WideString0.@.| 
00000530  0c 07 56 61 72 69 61 6e 74 8d 40 00 40 11 40 00  |..Variant.@.@.@.| 
00000540  0c 0a 4f 6c 65 56 61 72 69 61 6e 74 98 11 40 00  |..OleVariant..@.| 
00000550  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 
00000560  00 00 00 00 00 00 00 00 00 00 00 00 98 11 40 00  |..............@.| 
00000570  04 00 00 00 00 00 00 00 18 4d 40 00 24 4d 40 00  |.........M@.$M@.| 
00000580  28 4d 40 00 2c 4d 40 00 20 4d 40 00 68 4a 40 00  |(M@.,M@. M@.hJ@.| 
00000590  84 4a 40 00 c0 4a 40 00 07 54 4f 62 6a 65 63 74  |.J@..J@..TObject| 
000005a0  a4 11 40 00 07 07 54 4f 62 6a 65 63 74 98 11 40  |..@...TObject..@| 
000005b0  00 00 00 00 00 00 00 06 53 79 73 74 65 6d 00 00  |........System..| 
000005c0  c4 11 40 00 0f 0a 49 49 6e 74 65 72 66 61 63 65  |..@...IInterface| 
000005d0  00 00 00 00 01 00 00 00 00 00 00 00 00 c0 00 00  |................| 
000005e0  00 00 00 00 46 06 53 79 73 74 65 6d 03 00 ff ff  |....F.System....| 
000005f0  f4 11 40 00 0f 09 49 44 69 73 70 61 74 63 68 c0  |..@...IDispatch.| 
00000600  11 40 00 01 00 04 02 00 00 00 00 00 c0 00 00 00  |.@..............| 
00000610  00 00 00 46 06 53 79 73 74 65 6d 04 00 ff ff 90  |...F.System.....| 
00000620  cc 83 44 24 04 f8 e9 51 6c 00 00 83 44 24 04 f8  |..D$...Ql...D$..| 
00000630  e9 6f 6c 00 00 83 44 24 04 f8 e9 79 6c 00 00 cc  |.ol...D$...yl...| 
00000640  cc 21 12 40 00 2b 12 40 00 35 12 40 00 01 00 00  |.!.@.+.@.5.@....| 
00000650  00 00 00 00 00 00 00 00 00 c0 00 00 00 00 00 00  |................| 
00000660  46 41 12 40 00 08 00 00 00 00 00 00 00 8d 40 00  |FA.@..........@.| 
00000670  bc 12 40 00 4d 12 40 00 00 00 00 00 00 00 00 00  |..@.M.@.........| 
00000680  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 
00000690  bc 12 40 00 0c 00 00 00 4c 11 40 00 18 4d 40 00  |..@.....L.@..M@.| 
000006a0  50 7e 40 00 5c 7e 40 00 2c 4d 40 00 20 4d 40 00  |P~@.\~@.,M@. M@.| 
000006b0  6c 7e 40 00 84 4a 40 00 c0 4a 40 00 11 54 49 6e  |l~@..J@PI:EMAIL| 
000006c0  74 65 72 66 61 63 65 64 4f 62 6a 65 63 74 8b c0  |terfacedObject..| 
000006d0  d4 12 40 00 07 11 54 49 6e 74 65 72 66 61 63 65  |..@...TInterface| 
000006e0  64 4f 62 6a 65 63 74 bc 12 40 00 a0 11 40 00 00  |dObject..@...@..| 
000006f0  00 06 53 79 73 74 65 6d 00 00 8b c0 00 13 40 00  |..System......@.| 
00000700  11 0b 54 42 6f 75 6e 64 41 72 72 61 79 04 00 00  |..TBoundArray...| 
00000710  00 00 00 00 00 03 00 00 00 6c 10 40 00 06 53 79  |PI:EMAIL| 
00000720  73 74 65 6d 28 13 40 00 04 09 54 44 61 74 65 54  |stem(PI:EMAIL| 
00000730  69 6d 65 01 ff 25 48 e0 c4 00 8b c0 ff 25 44 e0  |ime..%H......%D.| 
数据段（DATA）的头四个字节通常是以下三个组合中的一个任意一个：00 00 00 00、32 13 8B C0 或
者 FF FF FF FF。在处理被压缩或者被加密的 Dephi 可执行文件时，这组常数就会具有指标性意义。 
55.6  其他的已知 DLL 文件 
 Vcomp*.dll。微软用来实现 OpenMP 的文件。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5566 章
章    W
Wiinn3322 环
环境
境下
下与
与外
外部
部通
通信
信  
在了解函数的输入和输出的情况下，我们基本可以判断出函数的具体功能。这种分析方法能够显著地
节省分析时间。  
如需关注文件和注册表层面的行为，使用 SysInternals 的 Process Monitor 即可，它可以给我们提供关
于以上这两者的基本信息。 
如需查看网络层面的通信数据，完全可以使用 Wireshark 这类软件。 
然而要进一步分析行为级数据，就得深入程序内部挖掘指令层面的信息。 
首先就要调查该程序调用的操作系统 API 和标准库函数。 
如果目标程序由可执行文件和多个 DLL 文件构成，那么由这些 DLL 文件所提供的、可调用的函数名
称就很有指标性意义。 
如果我们只关心那些调用 MessageBox()、显示特定文字的指令，我们可以在程序的数据段检索文本字
符，找到引用这个字符串的指令，再顺藤摸瓜地找到那些调用既定 MessageBox()函数的代码。 
在分析电脑游戏时，如果可以确定特定关卡里出现的敌人总数是随机数，那么我们可以在代码中查找
rand()函数或者类似的随机数生成函数（例如梅森旋转算法），继而找到这些函数的调用指令，最终调整程
序里使用随机数的那些指令。本书 75 章演示了这种分析实例。 
那些电脑游戏以外的、仍然调用 rand()函数的程序就更值得关注了。令人感到吃惊的是，某些著名软
件采用的数据压缩算法（加密机制）都调用了 rand()函数。有兴趣的读者可参阅 https://yurichev.com/blog/44/。 
56.1  在 Windows API 中最经常使用的函数 
这里列出了一些最常使用的 API 函数。需要特别说明的是，这些函数可能不是由程序源代码直接调用
的。在程序调用库函数或者调用 CRT 的时候，下述函数可能会被后者间接调用。 
 注册表的操作可以通过库文件 advspi32.dll 的如下功能实现：RegEnumKeyEx、RegEnumValue、
RegGetValue、RegOpenKeyEx 和 RegQueryValueEx。 
 对类似 ini 的文本文件可以通过库文件 user32.dll 的如下函数实现：GetPrivateProfileString。 
 对话窗的操作通过库文件user32.dll 的如下函数实现：MessageBoxEx、SetDlgItemText 及GetDlgItemText。 
 对资源的操作（可以参考本书的 68.2.8 节）通过库文件 user32.dll 的函数 LoadMenu 实现。 
 对 TCP/IP 网络的操作是通过库文件 ws2_32.dll 的如下函数实现：WSARecv 和 WSASend。 
 对文件的操作是通过库文件 kernel32.dll 的如下函数实现相应的操作：CreateFile、ReadFile、
ReadFileEx、WriteFile 及 WriteFileEx 等。 
 访问 Internet 是通过库文件 wininet.dll 的 WinHttpOpen 等函数来实现相关功能的。 
 检查一个可执行文件是否含有数字签名则是通过库文件wintrust.dll的函数WinVerifyTrust 等来实现的。 
 如果是动态链接的话，标准的MSVC 库文件msvcr*.dll 是通过以下函数实现相关操作的：assert、itoa、ltoa、
open、printf、read、strcmp、atol、atoi、fopen、fread、fwrite、memcmp、rand、strlen、strstr 以及 strchr。 
56.2  tracer:解析指定模块的所有函数 
在调试程序时，tracer 会给目标程序设置很多 INT3 断点。虽然这种类型的断点只能运行一次，但是它
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 56 章  Win32 环境下与外部通信 
625 
同样可以用截获特定 DLL 文件的所有函数。 
一个典型的使用例子为： 
--one-time-INT3-bp:somedll.dll!.* 
如果要在调用所有以 xml 开头的函数之前设置 INT 3 断点，那么可以采用命令： 
--one-time-INT3-bp:somedll.dll!xml.* 
稍显遗憾的是，这些断点只能触发一次。 
如果程序执行到函数断点且成功发生中断，tracer 就会显示该函数的调用信息，只是它只能显示一次。
另外一个美中不足的地方是，tracer 不能查看被调用方函数获取的外来参数。 
无论如何，tracer 的这项功能还是非常有用的。一个 DLL 文件通常会定义大量的函数。当我们知道既
定程序调用了某个的 DLL 文件、想要确切知道它调用了 DLL 里的哪些函数的时候，我们就特别需要这样
的一款工具。 
举例来讲，我们可以使用 tracer 给 cygwin 的程序 uptime.exe 设置断点，看它调用了哪些系统函数： 
tracer -l:uptime.exe --one-time-INT3-bp:cygwin1.dll!.* 
这样一来，我们就可以看到它调用了 cygwin1.dll 的哪些库函数（虽然只会显示一次）以及调用指令的
地偏移量信息： 
One-time INT3 breakpoint: cygwin1.dll!__main (called from uptime.exe!OEP+0x6d (0x40106d)) 
One-time INT3 breakpoint: cygwin1.dll!_geteuid32 (called from uptime.exe!OEP+0xba3 (0x401ba3)) 
One-time INT3 breakpoint: cygwin1.dll!_getuid32 (called from uptime.exe!OEP+0xbaa (0x401baa)) 
One-time INT3 breakpoint: cygwin1.dll!_getegid32 (called from uptime.exe!OEP+0xcb7 (0x401cb7)) 
One-time INT3 breakpoint: cygwin1.dll!_getgid32 (called from uptime.exe!OEP+0xcbe (0x401cbe)) 
One-time INT3 breakpoint: cygwin1.dll!sysconf (called from uptime.exe!OEP+0x735 (0x401735)) 
One-time INT3 breakpoint: cygwin1.dll!setlocale (called from uptime.exe!OEP+0x7b2 (0x4017b2)) 
One-time INT3 breakpoint: cygwin1.dll!_open64 (called from uptime.exe!OEP+0x994 (0x401994)) 
One-time INT3 breakpoint: cygwin1.dll!_lseek64 (called from uptime.exe!OEP+0x7ea (0x4017ea)) 
One-time INT3 breakpoint: cygwin1.dll!read (called from uptime.exe!OEP+0x809 (0x401809)) 
One-time INT3 breakpoint: cygwin1.dll!sscanf (called from uptime.exe!OEP+0x839 (0x401839)) 
One-time INT3 breakpoint: cygwin1.dll!uname (called from uptime.exe!OEP+0x139 (0x401139)) 
One-time INT3 breakpoint: cygwin1.dll!time (called from uptime.exe!OEP+0x22e (0x40122e)) 
One-time INT3 breakpoint: cygwin1.dll!localtime (called from uptime.exe!OEP+0x236 (0x401236)) 
One-time INT3 breakpoint: cygwin1.dll!sprintf (called from uptime.exe!OEP+0x25a (0x40125a)) 
One-time INT3 breakpoint: cygwin1.dll!setutent (called from uptime.exe!OEP+0x3b1 (0x4013b1)) 
One-time INT3 breakpoint: cygwin1.dll!getutent (called from uptime.exe!OEP+0x3c5 (0x4013c5)) 
One-time INT3 breakpoint: cygwin1.dll!endutent (called from uptime.exe!OEP+0x3e6 (0x4013e6)) 
One-time INT3 breakpoint: cygwin1.dll!puts (called from uptime.exe!OEP+0x4c3 (0x4014c3)) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5577 章
章    字
字    符
符    串
串  
57.1  字符串 
57.1.1  C/C++中的字符串 
在 C/C++中，常规字符串都是以 0 字节结尾的 ASCII 字符串，因此又称 ASCIIZ 字符串。 
这是历史上硬件局限性决定的。在参考书目【Rit79】中，我们可以看到以下说明： 
I/O 操作的最小单位是 word 而不是 byte。毕竟 PDP-7 是一种以字为单位寻址的设备。字和字节的
差异性在这方面的唯一影响就是：处理字符串的程序必须要忽略字符串中的 Null 字符，因为在构造字
符串的时候必须使用 null 字节将字符串凑成偶数个字节、形成 word 字。 
在 Hiew 或者 FAR Manager 中，下述程序的字符串在可执行文件中会如图 57.1 所示： 
int main() 
{ 
        printf ("Hello, world!\n"); 
}; 
图 57.1  Hiew 
57.1.2  Borland Delphi 
如指令清单 57.1 所示，在 Pascal 及 Borland Delphi 编译的可执行程序中，字符串之前都会有一个声明
字符串长度的 8 位/32 位数据。 
指令清单 57.1  Delphi 
CODE:00518AC8   
    dd 19h 
CODE:00518ACC aLoading___Plea db 'Loading... , please wait.',0 
... 