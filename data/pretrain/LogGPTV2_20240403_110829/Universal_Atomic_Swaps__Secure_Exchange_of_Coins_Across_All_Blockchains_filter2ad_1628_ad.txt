On the other hand, we instantiate ΓECDSA
JKGen with the protocol
6PRAM algorithms are polynomial time algorithms that have polynomially
bounded amount of parallel computing power.
from [63] where in the end we have pk = Gsk (sk is the secret
key), and sk = (sk 0 · sk 1).
Joint Adaptor Signing. We require the parties P0 and P1 to
jointly generate adaptor signatures on messages with respect
to an instance Y of a hard (dlog) relation R, for a joint public
key pk. We denote this interactive protocol by ΓSIG
AdpSg which
takes as common input a message m, and an instance Y of the
hard relation R. As private input, party P0 and P1 input their
secret key share sk 0 and sk 1, respectively. Here sk 0 and sk 1
are shares of the secret key sk whose corresponding public key
is pk. The output of the protocol for both parties is the pre-
AS .pVf(pk , m, Y ; ˜σ) = 1.
signature ˜σ, such that it holds that ΠSIG
We efﬁciently instantiate ΓSIG
AdpSg for SIG = Schnorr and SIG =
ECDSA with the protocols from [46].
D. Our Protocol
i
We now describe our atomic swap protocol for transaction
schemes based on Schnorr and ECDSA signature schemes.
In Figure 5 and Figure 6, we present the protocol for n-to-˜n
for i ∈ [n] of party P0 are
atomic swaps. That is, coins v(0)
for k ∈ [˜n] belonging to party P1.
swapped with coins v(1)
k
On Choosing the Timing Hardness T0 and T1. The parties
shall make conservative estimates of each other’s computational
power in force opening the VTD commitments. This is to
prevent scenarios where P0 or P1 with a powerful machine
force opens its VTD commitments earlier than expected in
terms of real time. The party could potentially steal the coins
of the other party during the swap lock or swap complete
phase. In particular, the parties must ensure that ∆ (such that
T0 = T1 + ∆) is large enough such that it tolerates the time
differences to open the VTD commitments.
Security Analysis. In the below theorem, we precisely state
the security of the above atomic swap protocol. For a formal
proof, we refer the reader to Appendix F.
Theorem 5.1: Let SIG ∈ {Schnorr, ECDSA} and let ΠSIG
AS :=
(pSign, pVf, Adapt, Ext) be a secure adaptor signature scheme
with respect to a strongly unforgeable signature scheme ΠSIG
DS :=
(KGen, Sign, Vf) and a hard dlog relation R. Let ΓSIG
JKGen, ΓAdpSg
be UC secure 2PC protocols for computing JKGen and pSign,
respectively. Let ΠVTD be a timed private and sound veriﬁable
timed dlog scheme. Then the atomic swap protocol described
in Figure 5 with access to (FB,Fsmt,Fclock), UC-realizes the
functionality Fswap.
E. Cross-Curve Swaps
The protocol described in Figure 5 assumes that
the
Schnorr/ECDSA signatures used for spending different coins
are implemented on the same curve. We can easily extend
our protocol to a case where all of the n + ˜n coins are
from transaction schemes using Schnorr/ECDSA signatures
but are implemented on different curves, possibly over groups
of different orders. In such a scenario we have for i ∈ [n],
coin v(0)
is in a currency whose transaction scheme uses
SIG ∈ {Schnorr, ECDSA} implemented in the group Gi
with generator Gi and order qi. Similarly, for k ∈ [˜n],
i
10
coin v(1)
is in a currency whose transaction scheme uses
SIG ∈ {Schnorr, ECDSA} implemented in the group ˜Gk with
k
generator ˜Gk and order ˜qk.
(or ˜Yk = ˜Gy
It is not hard to see that the only bridge that connects
the different signature schemes is the hard instance Y and
as soon as the signature schemes are deﬁned over different
groups, it becomes unclear how to sample Y . The natural
solution for this problem is to deﬁne a different Yi for each
signature as Yi = Gy
k, respectively), where
i
Gi is the generator of the i-th group. At this point, we can
compute the i-th pre-signature with respect to the corresponding
instance Yi, instead of using a ﬁxed Y . Since the witness y
(i.e., the discrete logarithm) is identical for all Yi, correctness
is preserved. However, nothing prevents P0 from diverging
from the protocol, which is the reason why we also need
to include a Non-Interactive Zero Knowledge (NIZK) [64]
proof to certify that all instances (Y1, . . . , Yn, ˜Y1, . . . , ˜Y˜n) have
the same discrete logarithm. Fortunately, this NIZK can be
efﬁciently instantiated extending the construction from [65]
to support proving of equality of discrete logarithm in n + ˜n
groups. The rest of the protocol is the same as in Figure 5.
We now argue the security of the protocol with this modiﬁ-
cation in place. The analysis largely follows along the same
lines of Theorem 5.1, with the exception that we can no longer
reduce to the standard dlog problem, since we are now given
access to many instances (across different groups) with the same
discrete logarithm. While this problem has been (implicitly)
used before, to the best of our knowledge, it has never been
formalized. We call this problem the cross-group short discrete
logarithm problem and deﬁne it below.
Deﬁnition 4 (n-Cross-Group Short Discrete Logarithm):
Consider {Gi, Gi, qi}i∈[n] be n uniformly sampled groups of λ-
bits orders qi. Let qi∗ = min(q1, . . . , qn). Let y ←$ Zqi∗ . Then
for all PPT adversaries A there exists a negligible function
negl such that
Pr(cid:2)A({Gi, Gi, qi, Gy
i }i∈[n]) = y(cid:3) = negl(λ).
Observe that y cannot be sampled to be perfectly uniform over
all groups (Zq1 , . . . , Zqn ), since the groups may have different
orders, therefore we sample it uniformly from Zqi∗ , where
qi∗ is the smallest prime. The work of Corrigan-Gibbs and
Kogan [66] shows that solving the short exponent discrete
logarithm problem is as hard as solving the standard discrete
logarithm problem (in a group of order qi∗) in the generic
group model. That is, if y ←$ Zqi∗ then the running time of the
best known generic algorithm to compute y given Gy
i (for some
√
i (cid:54)= i∗) is O(
qi∗ ). We conjecture that this equivalence is still
true even when given all (Gy
n). This generalization is
a natural analogue of the computational Difﬁe-Hellman [67]
problem across groups, where different group elements are
replaced with different generators of different groups. This
assumption was implicit in prior works [68].
1, . . . , Gy
V I . P E R F O R M A N C E A N A LY S I S
We ﬁrst evaluate each building block of our protocol
separately, followed by the atomic swap protocol (Section V-D).
Global input: (G, G, q, v, pk, T), Party U0’s input: sk
Parties U0 and U1 do the following:
1) Execute the 2PC protocol ΓSIG
2) Party U1 generates (C, π) ← ΠVTD.Commit(tsk1, T) and sends (C, π) to U0.
3) Party U0 does the following:
receives (tsk1, tpk).
• Checks if SIG = Schnorr. If so it further checks if ΠVTD.Verify(cid:0)tpk/(cid:0)Gtsk0(cid:1) , C, π(cid:1) = 1, and aborts otherwise.
JKGen with with common input (G, G, q). Party U0 receives (tsk0, tpk) as output while U1
• Instead if SIG = ECDSA, it further checks if ΠVTD.Verify
• It generates tx frz := tx (pk , tpk, v) and a signature σfrz ← ΠDS.SignSIG (sk , tx frz). It posts (tx frz, σfrz) on B.
• It starts solving ΠVTD.ForceOp (C).
= 1, and aborts otherwise.
(tpk)tsk
, C, π
(cid:16)
(cid:17)
−1
0
4) Party U0 returns (tx frz, σfrz, tpk, tsk0, C, π) and party U1 returns (tpk, tsk1) as output.
Fig. 4: Freeze Protocol for SIG = {Schnorr, ECDSA}
A. Veriﬁable Time DLog
values of Zq to handle a VTD.
We developed a prototype C implementation of ΠVTD [34]
to demonstrate the feasibility of our construction. The imple-
mentation encompasses the Commit and Verify algorithms,
simulating thus the functionality that would be carried out by
the atomic swap participants during a successful swap. We omit
the Setup algorithm as this can be pre-computed and shared
across several instances of atomic swaps, and the ForceOp
algorithm, as it is only executed in case the coins are not
swapped and the running time is pre-deﬁned by the timing
hardness T [48]. For the time-lock puzzles, we leveraged the
implementation available in [69].
Computation time. We evaluated the VTD construction ΠVTD
for different values of the statistical parameter n. We set the
threshold to t = n/2 (not the same as T the hiding parameter
in ΠVTD) as required for soundness of the VTD [34]. We obtain
the results shown in Table II. We observe that even with the
value n = 256 (possibly too high to be used in practice), the
overall running time is below 1 second, which is even below the
block conﬁrmation time of virtually all cryptocurrencies today
that is in the order of several minutes. The practical advantage of
VTD shows up when comparing it to veriﬁable timed signatures
(VTS). As reported in [34], a VTS for the variants of Schnorr
and ECDSA requires approximately 7 seconds for the Commit
algorithm and 10 seconds for Verify with a value n = 30
whereas VTD requires only below 0.04 seconds.
Communication overhead. Apart from the crs and public
parameters of the underlying time-lock puzzle, the overhead
imposed by VTD is of (i) n group elements for veriﬁability of
Shamir secret sharing; (ii) a total of 4·n group elements for the
time-lock puzzles and related proofs; and (iii) a total of t − 1
pairs of two group elements (x, r) for the cut and choose style
proof. In summary, each party needs to store 5 · n + (t − 1) · n
TABLE II: Computation time of ΠVTD (in seconds).
n
32
64
128
256
t
16
32
64
128
ΠVTD.Commit ΠVTD.Verify
0.04
0.041
0.091
0.236
0.03
0.033
0.076
0.255
B. 2-Party Protocols for Adaptor Signatures
Here, we have used the implementation of the 2 party
computation protocol of adaptor signatures available at [70].
Computation time. We evaluated both the Schnorr and the
ECDSA implementations. We observe that the joint pre-
signature generation (Schnorr) requires 4.85 ms while that
for ECDSA requires 266.30 ms. For both implementations, the
pre-signature veriﬁcation, witness extraction and pre-signature
adaption are rather fast (i.e. < 1 ms). As expected, these results
are similar to those in [46].
Communication overhead. The communication overhead
is the same as reported in [46] and we report it here for
completeness. In particular, the the 2PC protocol ΓSchnorr
AdpSg
requires 256 bytes of communication between the two parties
while its ECDSA counterpart ΓECDSA
AdpSg requires 416 bytes.
C. Atomic Swap Protocol
For the sake of clarity we chose not to include several
optimisations to the description in Figure 5. We discuss them
below and also incorporate them in our implementation.
Implementation-level Optimizations. In the setup phase
(Figure 5), we create a new VTD commitment for each coin
that is being swapped, requiring thus n + ˜n VTD commitments
for both parties put together. However, in practice, one can
have the same functionality while each party has to create and
force open only a single VTD commitment.
To do this, assume for a moment that fungibility of the
transactions is not a problem. Then each party could create a
single key pair, embed the corresponding secret key in the VTD
and use the corresponding public key repeatedly as an address
for each of the coins that it owns (either n or ˜n). In order to
gain fungibility back (i.e., make each public key look random
to the eyes of the blockchain observer), the two parties carry
out a coin toss protocol to generate a common randomness r
and generate each public key with respect to it. For instance,
consider that (pk , sk ) was the key generated by P0. The i-th
public key can be computed as pk H(r||i). Note that given the
original public key pk and the randomness r, party P1 can
11
(cid:17)
(cid:17)
(cid:17)
(cid:16)
(cid:16)
(cid:110)
Global input:
Party P0’s input:
(cid:110)
v(0)
i
, pk (0)
i
sk (0)
i
(cid:111)
(cid:111)
i∈[n]
,
(cid:110)
v(1)
k , pk (1)
k
(cid:111)
, Party P1’s input:
i∈[n]
i
k∈[˜n]
(cid:110)
k∈[˜n]
(cid:111)
, T0, T1, ∆. Here T0, ∆ ∈ N and T1 = T0 − ∆.
sk (1)
Swap Setup Phase - Freezing coins
Parties P0 and P1 freeze the coins that they want to swap by doing the following:
1) For i ∈ [n], party P0 plays the role of U0 and party P1 plays the role of U1 in the freeze algorithm (Figure 4). Speciﬁcally,
• Party P0’s input:
• Party P0’s output:
v(0)
i
tx (0)
, pk (0)
frz,i, σ(0)
, sk (0)
, T0
frz,i, pk (01)
i
i
i
, and party P1’s input:
0,i , C (0)
.
, and party P1’s output:
, π(0)
, T0
, pk (0)
v(0)
i
, sk (01)
i
i
i
pk (01)
i
, sk (01)
1,i
2) For k ∈ [˜n], party P0 plays the role of U1 and party P1 plays the role of U0 in the freeze algorithm (Figure 4). Speciﬁcally,
(cid:17)
(cid:16)
(cid:16)
(cid:17)
(cid:17)
v(1)
k , pk (1)
pk (10)
• Party P0’s input:
• Party P0’s output:
v(1)
k , pk (1)
tx (1)
Swap Lock Phase
1) Party P0 picks (Y, y) ∈ R using GenR(1λ) and sends Y to party P1.
2) Parties then setup the transactions doing the following:
, and party P1’s input:
, and party P1’s output:
k , T1
, sk (10)
0,k