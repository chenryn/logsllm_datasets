`fHierarchyDropped` 标志位是否置位，如果未被置位则表示当前弹出菜单对象不存在任何弹出的子菜单，那么系统将使当前函数直接返回。
接下来函数 `xxxMNCloseHierarchy` 获取当前弹出菜单对象的成员域 `spwndNextPopup`
存储的指针，该指针指向当前弹出菜单对象所弹出的子菜单的窗口对象。函数通过 `xxxSendMessage` 函数调用向该菜单窗口对象发送
`MN_CLOSEHIERARCHY` 消息，最终在消息处理函数 `xxxMenuWindowProc` 中接收该消息并对目标窗口对象关联的弹出菜单对象调用
`xxxMNCloseHierarchy` 以处理关闭子菜单的菜单对象菜单层叠状态的任务。
      popupMenu = *(tagPOPUPMENU **)((_BYTE *)pwnd + 0xb0);
      menuState = pwnd->head.pti->pMenuState;
      [...]
    case 0x1E4u:
      xxxMNCloseHierarchy(popupMenu, menuState);
      return 0;
_函数 xxxMenuWindowProc 处理 MN_CLOSEHIERARCHY 消息_
函数 `xxxSendMessage` 返回之后，接着函数 `xxxMNCloseHierarchy` 调用 `xxxDestroyWindow`
函数以尝试销毁弹出的子菜单的窗口对象。需要注意的是，这里尝试销毁的是弹出的子菜单的窗口对象，而不是当前菜单的窗口对象。
在函数 `xxxDestroyWindow` 执行期间，系统调用函数 `xxxSetWindowPos` 以隐藏目标菜单窗口对象在屏幕中的显示。
    dwFlags = 0x97;
    if ( fAlreadyDestroyed )
      dwFlags = 0x2097;
    xxxSetWindowPos(pwnd, 0, 0, 0, 0, 0, dwFlags);
_函数 xxxDestroyWindow 隐藏目标窗口对象的显示_
在函数 `xxxSetWindowPos` 执行后期，与当初创建菜单窗口对象时相对应地，系统调用函数 `xxxSendChangedMsgs`
发送窗口位置已改变的消息。在该函数中，系统根据设置的 `SWP_HIDEWINDOW` 状态标志，通过调用函数 `xxxRemoveShadow` 在
`gpshadowFirst` 阴影窗口关联表中查找第一个与目标菜单窗口对象关联的阴影窗口关系节点，从链表中移除查找到的关系节点并销毁该阴影窗口对象。
接下来执行流从函数 `xxxDestroyWindow` 中进入函数 `xxxFreeWindow` 以执行对目标窗口对象的后续销毁操作。
函数根据目标窗口对象的成员域 `fnid` 的值调用对应的消息处理包装函数 `xxxWrapMenuWindowProc` 并传入
`WM_FINALDESTROY` 消息参数，最终在函数 `xxxMenuWindowProc` 中接收该消息并通过调用函数
`xxxMNDestroyHandler` 对目标弹出菜单对象执行清理相关数据的任务。在该函数中，目标弹出菜单对象的成员标志位 `fDestroyed`
和根弹出菜单对象的成员标志位 `fFlushDelayedFree` 被置位：
    *(_DWORD *)popupMenu |= 0x8000u;
    [...]
    if ( *((_BYTE *)popupMenu + 2) & 1 )
    {
      popupMenuRoot = popupMenu->ppopupmenuRoot;
      if ( popupMenuRoot )
        *(_DWORD *)popupMenuRoot |= 0x20000u;
    }
_函数 xxxMNDestroyHandler 置位相关成员标志位_
接着函数 `xxxFreeWindow` 对目标窗口对象再次调用函数 `xxxRemoveShadow`
以移除其阴影窗口对象的关联。如果先前已将目标窗口对象的所有阴影窗口关联移除，则函数 `xxxRemoveShadow`
将在关系表中无法查找到对应的关联节点而直接返回。
    if ( pwnd->pcls->atomClassName == gatomShadow )
      CleanupShadow(pwnd);
    else
      xxxRemoveShadow(pwnd);
_函数 xxxFreeWindow 再次移除阴影窗口对象_
函数在执行一些对象的释放操作和解除锁定操作之后向上级调用者函数返回。此时由于锁计数尚未归零，因此目标窗口对象仍旧存在于内核中并等待后续的操作。
函数 `xxxDestroyWindow` 返回后，执行流回到函数 `xxxMNCloseHierarchy` 中。接着函数对当前弹出菜单对象的成员域
`spwndNextPopup` 指向的子菜单窗口对象解锁并将成员域置空，然后将当前弹出菜单对象关联的菜单窗口对象带赋值锁地赋值给根弹出菜单对象的成员域
`spwndActivePopup` 中使当前窗口对象成为的活跃弹出菜单窗口对象，这导致原本锁定在成员域 `spwndActivePopup`
中的子菜单窗口对象解锁并使其锁计数继续减小。
    HMAssignmentLock(
      (_HEAD **)&popupMenu->ppopupmenuRoot->spwndActivePopup,
      (_HEAD *)popupMenu->spwndPopupMenu);
_函数 xxxMNCloseHierarchy 使当前窗口对象成为的活跃弹出菜单窗口对象_
执行流从函数 `xxxMNCloseHierarchy` 返回到函数 `xxxMNCancel` 中，系统根据当前弹出菜单对象的成员标志位
`fIsTrackPopup` 选择调用 `xxxDestroyWindow` 以尝试销毁当前的菜单窗口对象。弹出菜单结构体的该成员标志位只在最开始通过函数
`xxxTrackPopupMenuEx` 创建根菜单窗口对象时对关联的弹出菜单对象置位。
接下来执行流返回到函数 `xxxMenuWindowProc` 中，函数对非模态类型的菜单对象调用 `xxxMNEndMenuState`
以清理菜单状态信息并释放相关对象。
_菜单选择或取消时的简要执行流_
* * *
**弹出菜单对象延迟释放链表**
在弹出菜单结构体 `tagPOPUPMENU` 中存在成员域
`ppmDelayedFree`，该成员域用来将所有被标记为延迟释放状态的弹出菜单对象连接起来，以便在菜单的弹出状态终止时将所有弹出菜单对象统一销毁。
线程关联的菜单状态 `tagMENUSTATE` 对象的成员域 `pGlobalPopupMenu` 指向的是根弹出菜单对象，根弹出菜单对象的成员域
`ppmDelayedFree` 作为弹出菜单对象延迟释放链表的入口，指向链表的第一个节点。后续的每个被指向的弹出菜单对象的成员域
`ppmDelayedFree` 将指向下一个链表节点对象。
在函数 `xxxMNOpenHierarchy` 中，函数将新创建的子菜单窗口对象关联的弹出菜单结构体 `tagPOPUPMENU`
对象插入弹出菜单对象延迟释放链表。新的弹出菜单对象被放置在链表的起始节点位置，其地址被存储在根弹出菜单对象的成员域 `ppmDelayedFree`
中，而原本存储于根弹出菜单成员域 `ppmDelayedFree` 中的地址被存储在新的弹出菜单对象的成员域 `ppmDelayedFree` 中。
_新的弹出菜单对象被插入弹出菜单对象延迟释放链表_
* * *
**xxxMNEndMenuState**
在函数 `xxxMNEndMenuState` 执行时，系统调用函数 `MNFreePopup` 来释放由当前菜单状态 `tagMENUSTATE`
对象的成员域 `pGlobalPopupMenu` 指向的根弹出菜单对象。
函数 `MNFreePopup` 在一开始判断通过参数传入的目标弹出菜单对象是否为当前的根弹出菜单对象，如果是则调用函数
`MNFlushDestroyedPopups` 以遍历并释放其成员域 `ppmDelayedFree`
指向的弹出菜单对象延迟释放链表中的各个弹出菜单对象。
函数 `MNFlushDestroyedPopups` 遍历链表中的每个弹出菜单对象，并为每个标记了标志位 `fDestroyed` 的对象调用
`MNFreePopup` 函数。标志位 `fDestroyed` 当初在调用函数 `xxxMNDestroyHandler` 时被置位。
    ppmDestroyed = popupMenu;
    for ( i = &popupMenu->ppmDelayedFree; *i; i = &ppmDestroyed->ppmDelayedFree )
    {
      ppmFree = *i;
      if ( *(_DWORD *)*i & 0x8000 )
      {
        ppmFree = *i;
        *i = ppmFree->ppmDelayedFree;
        MNFreePopup(ppmFree);
      }
      [...]
    }
_函数 MNFlushDestroyedPopups 遍历延迟释放链表_
在函数 `MNFlushDestroyedPopups` 返回之后，函数 `MNFreePopup` 调用 `HMAssignmentUnlock`
函数解除 `spwndPopupMenu` 等各个窗口对象成员域的赋值锁。
在 Windows 内核中，所有的窗口对象起始位置存在成员结构体 `HEAD`
对象，该结构体存储句柄值（`h`）的副本，以及锁计数（`cLockObj`），每当对象被使用时其值增加；当对象不再被特定的组件使用时，它的锁计数减小。在锁计数达到零的时候，窗口管理器知道该对象不再被系统使用然后将其释放。
函数 `HMAssignmentUnlock` 被用来解除先前针对指定对象的实施的带赋值锁的引用，并减小目标对象的锁计数。当目标对象的锁计数减小到 `0`
时，系统将调用函数 `HMUnlockObjectInternal` 销毁该对象。
    bToFree = head->cLockObj == 1;
    --head->cLockObj;
    if ( bToFree )
      head = HMUnlockObjectInternal(head);
    return head;
_函数 HMUnlockObject 判断需要销毁的目标对象_
函数 `HMUnlockObjectInternal` 通过目标对象的句柄在全局共享信息结构体 `gSharedInfo` 对象的成员域 `aheList`
指向的会话句柄表中找到该对象的句柄表项，然后通过在句柄表项中存储的句柄类型在函数 `HMDestroyUnlockedObject`
中调用索引在全局句柄类型信息数组 `gahti` 中的对象销毁函数。如果当前被销毁的目标对象类型是窗口对象，这将调用到内核函数
`xxxDestroyWindow` 中。
在函数 `MNFreePopup` 的末尾，由于已完成对各个成员域的解锁和释放，系统调用函数 `ExFreePoolWithTag` 释放目标弹出菜单
`tagPOPUPMENU` 对象。
通过分析代码可知，函数 `xxxMNEndMenuState` 在调用函数 `MNFreePopup`
释放菜单信息结构体的各个成员域之后，会将当前菜单状态对象的成员域 `pmnsPrev` 存储的前菜单状态对象指针赋值给当前线程信息结构体对象的成员域
`pMenuState` 指针，而通常情况下 `pmnsPrev` 的值为 `0`。
    kd> ub
    win32k!xxxMNEndMenuState+0x50:
    93a96022 8b4620          mov     eax,dword ptr [esi+20h]
    93a96025 898704010000    mov     dword ptr [edi+104h],eax
    kd> r eax
    eax=00000000
_函数 xxxMNEndMenuState 重置线程信息结构体 pMenuState 成员域_
然而在菜单弹出期间，系统在各个追踪弹出菜单的函数或系统服务中都是通过线程信息对象的成员域 `pMenuState`
指针来获取菜单状态的，如果该成员域被赋值为其他值，就将导致触发漏洞的途径中某个节点直接失败而返回，造成漏洞利用失败。因此想要重新使线程执行流触达
`xxxMNEndMenuState` 函数中释放当前 `tagPOPUPMENU` 对象的位置以实现对目标漏洞的触发，
**则必须在系统重置线程信息对象的成员域`pMenuState` 之前的时机进行**。
在函数释放成员域 `pGlobalPopupMenu` 指向的根弹出菜单对象和重置线程信息对象的成员域 `pMenuState` 之间，只有两个函数调用：
    UnlockMFMWFPWindow(&menuState->uButtonDownHitArea);
    UnlockMFMWFPWindow(&menuState->uDraggingHitArea);
菜单状态结构体的成员域 `uButtonDownHitArea` 和 `uDraggingHitArea`
存储当前鼠标点击坐标位于的窗口对象指针和鼠标拖拽坐标位于的窗口对象指针。函数通过调用 `UnlockMFMWFPWindow`
函数解除对这两个成员域的赋值锁。
函数 `UnlockMFMWFPWindow` 在对目标参数进行简单校验之后调用 `HMAssignmentUnlock` 函数执行具体的解锁操作。
_函数 xxxMNEndMenuState 的简要执行流_
聚焦 `uButtonDownHitArea`
成员域，该成员域存储当前鼠标按下的坐标区域所属的窗口对象地址，当鼠标按键抬起时系统解锁并置零该成员域。因此，需要在系统处理鼠标按下消息期间，用户进程发起菜单终止的操作，以使执行流进入函数
`xxxMNEndMenuState` 并执行到解锁成员域 `uButtonDownHitArea` 的位置时，该成员域中存储合法的窗口对象的地址。
系统在销毁该窗口对象期间，会同时销毁与该窗口对象关联的阴影窗口对象。阴影窗口对象不带有专门的窗口消息处理函数，因此可以在用户进程中将窗口对象的消息处理函数成员域篡改为由用户进程自定义的消息处理函数，在自定义函数中，再次触发菜单终止的任务，致使漏洞成功触发。
#### 0x3 触发
接下来通过构造验证代码在系统调用 `xxxMNEndMenuState` 函数释放根弹出菜单对象之后并在重置当前线程信息对象的成员域
`pMenuState` 之前，使线程的执行流再次进入 `xxxMNEndMenuState` 函数调用，致使触发对目标成员域
`pGlobalPopupMenu` 指向对象的重复释放。
在用户进程中首先为验证代码创建单独的线程，利用代码的主体任务都在新线程的上下文中执行。在原有的主线程中监听全局变量 `bDoneExploit`
是否被赋值以等待下一步操作。
* * *
**验证代码主函数**
验证代码首先通过调用 `CreatePopupMenu` 等函数创建两个非模态的可弹出的菜单对象。由于模态的菜单将导致线程在内核中进入函数
`xxxMNLoop`
的循环等待状态，导致无法在同一线程中执行其他操作，对漏洞触发造成难度，因此我们选择非模态的菜单类型。这里的可弹出的菜单对象不是前面提到的
`tagPOPUPMENU` 类型的对象，而是带有 `MFISPOPUP` 标志位状态的 `tagMENU` 对象。结构体 `tagMENU`
是菜单对象的实体，而 `tagPOPUPMENU`
是用来描述菜单对象实体的弹出状态的对象，在菜单对象实际弹出时创建、菜单对象结束弹出状态时销毁，需要注意两者的区别。
接下来通过 `AppendMenuA` 为两个菜单添加菜单项，并使第二个成为第一个的子菜单。
    LPCSTR szMenuItem = "item";
    MENUINFO mi = { 0 };
    mi.cbSize  = sizeof(mi);
    mi.fMask   = MIM_STYLE;
    mi.dwStyle = MNS_AUTODISMISS | MNS_MODELESS | MNS_DRAGDROP;
    hpopupMenu[0] = CreatePopupMenu();
    hpopupMenu[1] = CreatePopupMenu();
    SetMenuInfo(hpopupMenu[0], &mi);
    SetMenuInfo(hpopupMenu[1], &mi);
    AppendMenuA(hpopupMenu[0], MF_BYPOSITION | MF_POPUP, (UINT_PTR)hpopupMenu[1], szMenuItem);
    AppendMenuA(hpopupMenu[1], MF_BYPOSITION | MF_POPUP, 0, szMenuItem);
_创建并关联两个菜单对象的验证代码_
接下来创建一个普通的窗口对象 `hWindowMain` 以在后续菜单弹出时作为弹出菜单的拥有者窗口对象。如果编译时选择 GUI
界面程序，则获取默认的窗口对象句柄即可，这一步就不需要创建额外的窗口对象了。