```  
D select c1,   
  array_agg(c5) OVER w as yesterdays,   
  c5 as today from his   
  window   
  w as ( order by c1 ROWS BETWEEN 5 PRECEDING AND -1 FOLLOWING )  
  order by c1 limit 10;   
┌────────────┬──────────────────────────────────────────┬────────┐  
│     c1     │                yesterdays                │ today  │  
├────────────┼──────────────────────────────────────────┼────────┤  
│ 2001-08-27 │                                          │ 35.550 │  
│ 2001-08-28 │ [35.550]                                 │ 36.860 │  
│ 2001-08-29 │ [35.550, 36.860]                         │ 36.380 │  
│ 2001-08-30 │ [35.550, 36.860, 36.380]                 │ 37.100 │  
│ 2001-08-31 │ [35.550, 36.860, 36.380, 37.100]         │ 37.010 │  
│ 2001-09-03 │ [35.550, 36.860, 36.380, 37.100, 37.010] │ 36.990 │  
│ 2001-09-04 │ [36.860, 36.380, 37.100, 37.010, 36.990] │ 37.460 │  
│ 2001-09-05 │ [36.380, 37.100, 37.010, 36.990, 37.460] │ 37.440 │  
│ 2001-09-06 │ [37.100, 37.010, 36.990, 37.460, 37.440] │ 36.700 │  
│ 2001-09-07 │ [37.010, 36.990, 37.460, 37.440, 36.700] │ 35.680 │  
└────────────┴──────────────────────────────────────────┴────────┘  
```  
DuckDB提供了类似函数的功能, 也叫宏, 以数组作为输入值, 返回相关性、截距、斜率、预测值. 因而定义以下宏:  
```  
create MACRO regr_r2_d3(i) as (select regr_r2(Y, X) from (values (i[1]::double,i[2]::double),(i[2]::double,i[3]::double)) as t(X,Y));  
create MACRO regr_intercept_d3(i) as (select regr_intercept(Y, X) from (values (i[1]::double,i[2]::double), (i[2]::double,i[3]::double)) as t(X,Y));  
create MACRO regr_slope_d3(i) as (select regr_slope(Y, X) from (values (i[1]::double,i[2]::double),(i[2]::double,i[3]::double)) as t(X,Y));  
create MACRO predict_d3(i) as (  
with t_intercept as (select regr_intercept(Y, X) as regr_intercept from (values (i[1]::double,i[2]::double),(i[2]::double,i[3]::double)) as t(X,Y)),   
t_slope as (select regr_slope(Y, X) as regr_slope from (values (i[1]::double,i[2]::double),(i[2]::double,i[3]::double)) as t(X,Y))   
select regr_intercept + regr_slope * i[3]::double from t_intercept, t_slope  
);  
```  
测试算法:   
```  
使用这组数据:  
│ 2001-08-30 │ [35.550, 36.860, 36.380]                 │ 37.100 │  
```  
```  
D select regr_r2_d3(i),regr_intercept_d3(i), regr_slope_d3(i), predict_d3(i) from (values ([35.550, 36.860, 36.380])) as t(i);  
┌────────────────────┬──────────────────────┬──────────────────────┬────────────────────┐  
│   regr_r2_d3(i)    │ regr_intercept_d3(i) │   regr_slope_d3(i)   │   predict_d3(i)    │  
├────────────────────┼──────────────────────┼──────────────────────┼────────────────────┤  
│ 1.0000000000000147 │ 49.88595419847337    │ -0.36641221374046046 │ 36.555877862595416 │  
└────────────────────┴──────────────────────┴──────────────────────┴────────────────────┘  
```  
接下来把3-15天的predict_d3, regr_r2_d3都写一下:    
用PostgreSQL来生成批量SQL语句:  
```  
create or replace function gen_vals(days int) returns text as $$  
  select string_agg(format('(i[%s]::double,i[%s]::double)', generate_series-1, generate_series),',') from generate_series(2 ,days);  
$$ language sql strict;  
postgres=# select gen_vals(3);  
                        gen_vals                           
---------------------------------------------------------  
 (i[1]::double,i[2]::double),(i[2]::double,i[3]::double)  
(1 row)  
postgres=# select gen_vals(4);  
                                      gen_vals                                         
-------------------------------------------------------------------------------------  
 (i[1]::double,i[2]::double),(i[2]::double,i[3]::double),(i[3]::double,i[4]::double)  
(1 row)  
```  
```  
create or replace function gen_sql_predict(days int) returns text as $$  
  select format ($_$create MACRO predict_d%s(i) as (with t_intercept as (select regr_intercept(Y, X) as regr_intercept from (values %s) as t(X,Y)), t_slope as (select regr_slope(Y, X) as regr_slope from (values %s) as t(X,Y)) select regr_intercept + regr_slope * i[%s]::double from t_intercept, t_slope);$_$, days, gen_vals(days), gen_vals(days), days);   
$$ language sql strict;  
create or replace function gen_sql_r2(days int) returns text as $$  
  select format ($_$create MACRO regr_r2_d%s(i) as (select regr_r2(Y, X) from (values %s) as t(X,Y));$_$, days, gen_vals(days));   
$$ language sql strict;  
```  
生成SQL文件  
```  
IT-C02YW2EFLVDL:release digoal$ psql -t -X -A  
psql (16devel)  
Type "help" for help.  
postgres=# \o gen_sql_predict  
postgres=# select gen_sql_predict(i) from generate_series(3,15) i;  
postgres=# \o gen_sql_r2  
postgres=# select gen_sql_r2(i) from generate_series(3,15) i;  
```  
在DuckDB中执行以上生成的SQL文件  
```  
D   
drop macro predict_d3;  
drop macro predict_d4;  
drop macro predict_d5;  
drop macro predict_d6;  
drop macro predict_d7;  
drop macro predict_d8;  
drop macro predict_d9;  
drop macro predict_d10;  
drop macro predict_d11;  
drop macro predict_d12;  
drop macro predict_d13;  
drop macro predict_d14;  
drop macro predict_d15;  
drop macro regr_r2_d3;  
drop macro regr_r2_d4;  
drop macro regr_r2_d5;  
drop macro regr_r2_d6;  
drop macro regr_r2_d7;  
drop macro regr_r2_d8;  
drop macro regr_r2_d9;  
drop macro regr_r2_d10;  
drop macro regr_r2_d11;  
drop macro regr_r2_d12;  
drop macro regr_r2_d13;  
drop macro regr_r2_d14;  
drop macro regr_r2_d15;  
D .read /Users/digoal/duckdb/build/release/gen_sql_predict  
D .read /Users/digoal/duckdb/build/release/gen_sql_r2  
```  
接下来, 看一下在一条SQL中, 如何返回4~15天的所有数组, 多加几个帧就可以了  
```  
D select c1,   
array_agg(c5) OVER w15 as yester15day,   
array_agg(c5) OVER w14 as yester14day,   
array_agg(c5) OVER w13 as yester13day,   
array_agg(c5) OVER w12 as yester12day,   
array_agg(c5) OVER w11 as yester11day,   
array_agg(c5) OVER w10 as yester10day,   
array_agg(c5) OVER w9 as yester9day,   
array_agg(c5) OVER w8 as yester8day,   
array_agg(c5) OVER w7 as yester7day,   
array_agg(c5) OVER w6 as yester6day,   
array_agg(c5) OVER w5 as yester5day,   
array_agg(c5) OVER w4 as yester4day,   
c5 as today from his   
window   
w15 as ( order by c1 ROWS BETWEEN 15 PRECEDING AND -1 FOLLOWING ),  
w14 as ( order by c1 ROWS BETWEEN 14 PRECEDING AND -1 FOLLOWING ),  
w13 as ( order by c1 ROWS BETWEEN 13 PRECEDING AND -1 FOLLOWING ),  
w12 as ( order by c1 ROWS BETWEEN 12 PRECEDING AND -1 FOLLOWING ),  
w11 as ( order by c1 ROWS BETWEEN 11 PRECEDING AND -1 FOLLOWING ),  
w10 as ( order by c1 ROWS BETWEEN 10 PRECEDING AND -1 FOLLOWING ),  
w9 as ( order by c1 ROWS BETWEEN 9 PRECEDING AND -1 FOLLOWING ),  
w8 as ( order by c1 ROWS BETWEEN 8 PRECEDING AND -1 FOLLOWING ),  
w7 as ( order by c1 ROWS BETWEEN 7 PRECEDING AND -1 FOLLOWING ),  
w6 as ( order by c1 ROWS BETWEEN 6 PRECEDING AND -1 FOLLOWING ),  
w5 as ( order by c1 ROWS BETWEEN 5 PRECEDING AND -1 FOLLOWING ),  
w4 as ( order by c1 ROWS BETWEEN 4 PRECEDING AND -1 FOLLOWING )  
order by c1 limit 10;   
```  
使用CTE语法, 加上前面建的宏, 可以通过以下SQL计算预测值、相关性.   
但是duckdb算了好久没出来, 可能宏套太多了, 效率比较低? 以下SQL用了24个宏.   
也可能和这个参数有关: max_expression_depth   https://duckdb.org/docs/sql/configuration   