的情况下，则为等待所有后台进程的完成。
虽然本书大多略过Shell的交谈模式功能不提，但这里还是要告诉你：bg、fg、jobs，
以及wait都为处理于目前Shell下所建立的执行中进程的Shell命令。
www.TopSage.com
---
## Page 380
368
第13章
有4组键盘字符可用以中断前台进程（foregroundprocesses）。这些字符都可通过stty
命令选项而设置，通常为Ctrl-C（intr：杀除）、Ctrl-Y（dsusp：暂时掏置，直到输入
更新为止）、Ctrl-Z（susp：暂时换置）.与Ctrl-\（quit：以核心转储（core dump）方
式杀除）。
例13-1呈现的是简易top实例的命令。/bin/sh-选项所提出的安全性议题，及IFS
们需要BSD式的pS，因为它提供的$CPU栏，可决定显示顺序，因此设置PATH先寻
找该版本。PATH设置在我们所有的系统下几乎都能运行，只有一个例外（SGIIRIX缺
乏BSD式的pe命令）。
1°
例13-1：简化的 top版本
#1/bin/sh -
持续执行DB命令，
每次显示之间，只作短时间的暂停
语法：
s1nple-top
IFS='
自订PATH，以先取得BSD式的pS
PATH=/usr/ucb1 /usr/bin: /bin
export PATH
HBADFLAGS=*-n 20*
PSFLAGS=aux
S0RTPLAGS=* k3nr -k1,1 k2n*
SLEEPFLAGS=5
 ,T U- peau 1 S0va5ds sd, -*yaava
vhile true
do
clear
uptime
echo “SHEADER*
pS $PSFLAGS 1
sed -e 1d.1. 
sort SSORTFLAGS1-
sleep $SL&EPPLAGS
bead $HEADFLAGS
done
我们将命令选项储存在HEADFLAGS、PSFLAGS、SLEEPFLAGS与SORTFLAGS，以方便某
些特定站台客户化。
simple-top输出的解释性标头相当有用，但由于它在ps实例之间有些差异，所以我们
www.TopSage.com
---
## Page 381
进程
369
不在脚本里把它写死。取而代之的是：我们只调用pa一次，然后把它储存在HEADER
变量里。
程序其余的部分就是无穷循环了，可使用我们稍早提过的键盘字符中断它。在每个循环
重复起始处的clear命令会使用TERM环境变量的设置，以决定它要传送至标准输出，
清除屏基回面的转义符，将游标留在左上角。uptine回报平均负载，echo则提供每
栏标头。管道过滤ps的输出使用sed删验标头行，再依次以CPU使用量、username，
与进程ID排序最后的输出结果，然后仅显示前20行.循环里最后的sleep命令会产生
极短的延迟，不过这和循环重复操作比起来仍是较长的，这么一来此即本对系统负载的
影响才能达到最小。
有时，你会想知道谁在使用你的系统，有多少与哪些进程正执行，而不要ps元长输出
所提供的其他额外细节。例13-2里的puser脚本即可用以产生此类报告：
$puser
显示用户，及属于他们的进程
albert
/etc/sshd
-tcsh
/bin/sh
/bin/ps
/usr/bin/ssh
/usr/11b/nfs/statd
x1oad
200.3
/usr/1ib/ssh/sshd
/etc/sshd
/usr/sadn/11b/smc/bin/smcboot
/usr/1ib/saf/ttymon
/usr/1ib/autofs/automountd
/ete/init
/usr/1ib/dni/dnispd
victoria
bash
2
/usr/bin/ssh
2
xterm
报告以username排序，为了不致于太过混乱，并提升可读性，只有在username有变动
时才显示usermame值。
例13-2:puser脚本
#1/bin/sh -
可选择性地限制星示某些特定用户（egrop（1）
显示用户，及其括动中的进程数与进程名称，
usernane 样式）。
语法：
4
IPS='
www.TopSage.com
---
## Page 382
370
PATH=/usr/1ocal/bin:/usr/bin:/bin
export PATH
com
EGREPFLAGS*
do
if test -z *SEGREPLAGS*
then
EGREPFLAGS=*$1*
else
ti
BGREPFLAGS=*$BGREPPLAGS1$1*
shift
done
then
EGR&PFLAGS=*. *
else
EGRBPPLAGS=*^*(SEGREPPLAGS)*
fi
case *uname -s·in
*BSD 1 Darvin)
PSPLAGS=*-e =O user,comm* :1
PSPLAGS=*-a -e -O user,uconm -x* 11
)
esac
pe $PSFLAGS 1
sed -e 1d 1
EGREP_OPTIONS= egrep *SEGREPFLAGS* 1
sort -b -k1,1 -k2,2 1
uniq -c 1
sort -b -k2.2 -k1nr,1 -k3,3 1
awk *(
user (LAST ==$2)？·*：$2
printf(*15s\t2d\ts\n*,user, S1, $3)
LAST = $2
在一贯熟悉的前置处理后，puser脚本开始利用循环搜集可选用的命令行参数，将之传
至EGREPFLAGS变量，使用垂直线分隔符表示交替至egrep。循环内容里的if语句处
理初始为空字符串的情况，以避免产生空的egrep样式。
参数搜集循环完成后，我们会检查EGREPFLAGS：如果它为空，则重新指定它为符合任
何的样式。否则，改为只对行的起始处进行样式比对，并要求结尾加上空格字符，以避
免因username开头字符相同而出现错误符合，例如Jon与jones。
case语句是在处理ps选项的实例差异。我们希望输出形式为只显示两个值：username
与命令名称。BSD系统与BSD扩展的MacOSX（Darwin）系统要求的选项与其他所
有我们测试过的系统有些许不同。
www.TopSage.com
---
## Page 383
进程
371
以下7阶段的管道处理报告的准备工作：
1.
自ps产生的输出如下：
USER COMNAND
root sched
root /etc/init
root /usr/lib/nfs/nfsd
daemon /usr/lib/nfs/statd
Jones dtfile
+ + r
2.
sed命令删除初始的标头行。
3.
egrep命令选定要被显示的username，我们会清除BGREP_OPTIONS环境变量，以
避免在不同的GNUegrep版本解译方式的冲突。
4.
sort先以username，再以进程，进行排序数据。
5.
uniq命令附加前置重复行的计数，并删除重复部分。
6.
第二个sort步骤，再作一次数据排序。这次先以username，再以由大而小的计
数，最后才是进程名称作排序。
7.awk命令将数据格式化为整齐的栏位，并删除重复的username。
13.3进程控制与删除
正常行为的进程，最终会如常地完成工作，再以exit（）系统调用而终止，有时需要提
早结束进程，可能是因为它一开始执行时便有误，也可能是需要你提供更多的资源才能
正常执行，或是行为模式不对。
kill命令的功能就在这，不过它的名字取得不好。kil1其实是传送信号（signal）给
指定的执行中程序，不过有两个例外，这稍后会提到。进程接到信号，并处理之，有时
可能直接选择忽略它们。只有进程的拥有者、或root、内核、进程本身，可以传送信
号给它，但接收信号的进程本身无法判断信号从何而来，
ISOStandardC只定义六、七种信号类型，但POSIX增加了20多种，大部分系统还有
更多，提供30至50种不同的倍号。你可以这样列出它们，以下为SGIIRIX系统下的
范例：
$ ki11 -1
BA 1 3 9    24A  1  TI 11 1 4
列出支持的他号名称（选项为小写的1）
 R           2 TG
XCFU XFSZ UME RTNIN RTKIN+1 RTMIN+2 RTHIN+3 RTMAX-3 RTMAX2 RTNAX1
RTNAX
www.TopSage.com
---
## Page 384
372
第13章
这些大部分都是专业用法，我们已在本书Shell脚本的trap命令中介绍过几个了，
每个处理信号的程序，都可自由决定解译这些信号的方式。信号名称反应的是惯用性
（conventions），而不是必须性（requirement），所以对不同的程序面言，信号所表示的
意义也会稍有不同。
无法抓取的信号通常会导致中断，不过STOP与TSTP通常只是暂停进程，直到CONT的
信号出现，要求它再继续执行。你应该使用STOP与CONT，以延迟合法进程的执行，直
到系统不忙的时候，像这样：
$ top
显示top的资藻请耗情况
SRES STATE
TIME
CPU COMAND
17787 johnson
- + +
$ ki11 -9r0P 17787
终止进程
$aleep 36000&k111-Cowr 17787&十小时后恢复
13.3.1删除进程
以删除进程来说，必须要知道的有四个信号：ABRT（中断）、HUP（搁置）、KILL，与
TERX（终结）。
的意思。如果你未指定信号，则ki11会送出此信号，ABRT有点类似TERK，不过它会
抑制清除的操作，并产生进程内存影像的副本，将其置于核心，即program.core或
core.PID中.
HUP信号有点类似要求中止，但是对于很多的daemon来说，它时常表示进程应先停止
现在正在作的事，然后准备处理薪的工作，好像它重新被启动一样。例如，在你改变设
置文件后，HUP信号可令daemon重读设置文件。
有两个信号是没有任何进程可捕捉或忽略的：KILL与STOP。这两个信号一定会立即被
传送。然而对休眼进程（注2）而言，这根据Shell实例与操作系统面定，大部分的其他
信号都只在进程醒着（wakeup）的时候才传送。因此，你应该预期在递送信号时，事
实上是会有延迟的。
注 2:
进程等待暴个事件，例如I/O究成或时间的过期处于拥置状态，称之为休联（sleep）.且
进程调度器认为此时它并非可执行状态，当事件最终发生时，进程会再次进入可调度以
执行的状态，这时被称为叫醒（awake）。
www.TopSage.com
---
## Page 385
进程
一次传送多个信号时，它们的传送顺序及是否传送相同信号超过一次以上，是不可预知
的。有些系统所提供的只是保证：至少传送一个信号。信号的处理方式，在各种UNIX
平台上有很大的差异，只有最简单的信号用法是具可移植性的。
我们已介绍过用以暂停进程的STOP信号，KILL信号则是让进程立即中止。以惯例而
言，你应该先送出HUP信号给进程，让进程有机会优雅地中止。如果它没有马上离开，
再试试TERM信号。如果这么做还是无法离开，再使用最后手段KILL信号。下面是它
们的使用范例。假设你正面临停滞不前的响应：执行top命令，看看发生了什么事面得
到像这样的结果：
显示top的资源消耗情况
25094 stevens
148
0456K 414M cpu243:5899.648 net8cape
网页浏览器通常只需要相当少的CPU时间，所以上述情况看起来此进程已经失控。我们
传送HUP信号给该进程：
$ ki11 -HUP 25094
传送HUP值号给进程25094
再执行一次top，如果仍发现它还是没有马上消失在显示结果上，则使用：
$ ki11 -TERM 25094
传送TERM信号给进程25094