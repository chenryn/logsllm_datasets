# Title: Modeling Computer Attacks: An Ontology for Intrusion Detection

# Authors:
- Jeffrey Undercoffer
- Anupam Joshi
- John Pinkston

# Affiliation:
University of Maryland, Baltimore County  
Department of Computer Science and Electrical Engineering  
1000 Hilltop Circle, Baltimore, MD 21250  
{undercoffer, joshi, pinkston}@umbc.edu

## Abstract
This paper discusses the advantages of transitioning from taxonomies to ontologies and ontology specification languages, which can simultaneously serve as recognition, reporting, and correlation languages. We have developed an ontology that models computer attacks using the DARPA Agent Markup Language + Ontology Inference Layer (DAML+OIL), a descriptive logic language. The ontology's logic is implemented using DAMLJessKB. We compare and contrast the IETF's IDMEF, an emerging standard that uses XML to define its data model, with a data model constructed using DAML+OIL. Our research focuses on low-level kernel attributes at the process, system, and network levels, serving as taxonomic characteristics. We illustrate the benefits of using an ontology by presenting use case scenarios within a distributed intrusion detection system.

## 1. Introduction
A critical component of an Intrusion Detection System (IDS) is the taxonomy used to characterize and classify attacks or intrusions, along with a language that describes instances of that taxonomy. The language is essential for the effectiveness of the IDS because it must convey information about an attack or intrusion clearly, especially in distributed environments, and enable appropriate action. Several taxonomies have been proposed by the research community, some including a descriptive language, but most do not. Similarly, various attack languages have been proposed, but many lack grounding in a specific taxonomy, leading to ad hoc and localized classification schemes. This approach has three main issues:

1. **Software Dependency**: To operate over instances of a data model characterized by a particular taxonomy, the data model must be encoded within a software system. Any changes or updates to the data model require corresponding changes to the software system.
2. **Reasoning Limitations**: Taxonomies provide only a schema for classification. They lack the necessary constructs to enable a software system to reason over an instance of the taxonomy, which represents the domain under observation.
3. **Non-Extensibility and Vagueness**: Most attack and signature languages are specific to particular domains, environments, and systems. Consequently, they are not extensible, cannot be communicated between non-homogeneous systems, and often have vague semantics without formal logic grounding.

To address these issues, we propose transitioning from taxonomies to ontologies. We construct a data model that characterizes the domain of computer attacks and intrusions as an ontology and implement it using an ontology representation language. Unlike taxonomies, ontologies provide powerful constructs, including machine-interpretable definitions of concepts and their relationships. This enables software systems to share a common understanding of the information, enhancing their ability to reason and analyze it. Gruber [17] defines an ontology as an explicit specification of a conceptualization, providing a formal specification of the concepts and relationships within a domain. In our case, the entities are IDSs and IDS sensors.

Ontology representation languages can be mapped into first-order relational sentences and a set of first-order logic axioms, restricting the allowable interpretations of non-logical symbols (relations, functions, and constants). This enables instances of the ontology to be operated on using formal and complete theorem provers.

The Internet Engineering Task Force's (IETF) emerging standard, the Intrusion Detection Message Exchange Format Data Model and Extensible Markup Language (XML) Document Type Definition (IDMEF), aims to enable interoperability between non-homogeneous IDS sensors. However, Kemmerer and Vigna [25] state that while IDMEF is a step forward, additional effort is needed to provide a common ontology that allows IDS sensors to agree on what they observe.

We demonstrate the benefits of using ontologies by presenting an implementation utilized by a distributed intrusion detection system. Our ontology is constructed using DAML+OIL [22] and implemented using DAMLJessKB [28], an extension to the Java Expert System Shell [13].

Although our IDS model is not the focus of this paper, we briefly describe it to provide context. Our IDS [23] is a two-phased, host-based system. The first phase is an anomaly detector that detects aberrant behavior at the system level. We instrument the Linux kernel and gather 190 distinct attributes at the process, system, and network levels several times per second. We use Principal Component Analysis (PCA) [15] to reduce the dimensionality of the data set and then apply Fuzzy Clustering [29] to obtain clusters that model the quiescent state of the system. Once the baseline is established, we use the Mahalanobis metric [5] as a dissimilarity measure to determine if subsequent data samples fall within the bounds of the normative state. The second phase reasons over the subsequent samples of the feature set that fall outside the normative state, potentially representing anomalous behavior. The sample, constrained by the ontology, is asserted into a knowledge base, which is continually queried for evidence of an intrusion or attack. Figure 1 illustrates a single component of our distributed system.

**Figure 1: Distributed IDS Framework**

[Insert Figure 1 here]

The goal of this work is to demonstrate the utility of ontologies and the significant benefits that the IDS research community can derive by transitioning from taxonomies and their linguistic and symbolic representations to ontologies and ontology representation languages.

The remainder of this paper is organized as follows: Section 2 presents related work in the areas of attack taxonomies, attack languages, and ontologies for intrusion detection. Section 3 details the motivation for transitioning from taxonomies to ontologies. Our ontology is presented in Section 4, and Section 5 details our implementation. Section 6 provides a use case scenario illustrating the utility of using an ontology in detecting Denial of Service, Mitnick, and Buffer Overflow attacks. We conclude with Section 7.

## 2. Related Work
### 2.1 Taxonomies
There are numerous attack taxonomies proposed for use in intrusion detection research. Landwehr et al. [31] present a taxonomy categorized according to genesis (how), time of introduction (when), and location (where). They include sub-categories such as validation errors, boundary condition errors, and serialization errors. We have incorporated these sub-categories into our ontology.

During the 1998 and 1999 DARPA Off Line Intrusion Detection System Evaluations [20, 26, 35], Weber provided a taxonomy that defined the category consequence, including sub-categories such as Denial of Service, Remote to Local, User to Root, and Probe. We have incorporated these classifications into our work.

Lindqvist and Jonsson [33] focus on external observations of attacks and breaches that the system owner can make. Our effort aligns with their focus, as we believe that since IDSs are either adjacent to or co-located with the target of an attack, any classification scheme should be target-centric, with each taxonomic character comprising observable properties and features.

Ning et al. [37] propose a hierarchical model for attack specification and event abstraction using three essential concepts: System View, Misuse Signature, and View Definition. Their model is based on a thorough examination of attack characteristics and attributes and is encoded within the logic of their proposed system. We include a global system view in our ontology.

Allen et al. [1] and McHugh [36] suggest that the taxonomic characterization of intrusive behavior has typically been from the attackerâ€™s point of view, and alternative taxonomies need to be developed. Allen et al. state that intrusion detection is an immature discipline lacking a commonly accepted framework. McHugh suggests classifying attacks according to protocol layer or whether a completed protocol handshake is required. Guha [18] suggests analyzing each layer of the TCP/IP protocol stack as the foundation for an attack taxonomy. We have endeavored to make our ontology as target-centric as possible.

Aslam et al. [3] observe that many potential faults and vulnerabilities are intrinsic to the software development process. Our ontology defines the class "Means of Attack" and includes many of the attributes identified by Aslam et al.

While taxonomies have served their purpose well, particularly in identifying and classifying the characteristics of computer attacks and intrusions, we advocate building upon existing taxonomies and transitioning to ontologies. According to Staab and Maedche [43], taxonomies do not contain the necessary meta-knowledge required to convey modeling primitives such as concepts, relations, and axioms. Ontologies do. A well-formed ontology subsumes a taxonomy.

### 2.2 Attack Languages
Several attack languages have been proposed in the literature, often categorized as Event, Response, Reporting, Correlation, and Recognition Languages [8, 9]. We concentrate on correlation, reporting, and recognition languages because an ontology representation language can simultaneously provide the functionality of all three.

#### A. P-BEST
P-BEST [34] (Production-Based Expert System Toolset) is a correlation language that allows users to specify inference formulas for reasoning and acting upon facts asserted into its fact base and derived from external events. P-BEST supports writing rules for signature detectors. According to Doyle et al. [8], P-BEST lacks concepts specific to event recognition and consists solely of a formalism for expressing probabilistic and linguistic rules.

#### B. STATL
STATL [9] is an extensible state/transition-based attack detection language designed to support intrusion detection. It allows describing computer penetrations as sequences of actions that an attacker performs to compromise a system. Scenarios in STATL are attacker-centric, providing constructs to represent an attack as a composition of states and transitions. These constructs are similar to those in programming languages, describing conditional, sequential, and iterative events. STATL lacks constructs for combining sub-events into larger events. Doyle et al. [8] state that STATL is the most clearly defined language for attack recognition.

#### C. LogWeaver
LogWeaver [16] is a log auditing tool that processes system logs according to a signature (rule) file. The signature file defines the types of events to be monitored and reported. LogWeaver can match regular expressions and correlate events executed by the same user. It employs logic based on model checking [42] and is essentially a specification for a detection language defining syntax and grammar for writing signatures.

#### D. CISL
The Common Intrusion Detection Framework (CIDF) [24] started as a DARPA initiative in 1998. CIDF aimed to develop protocols and application programming interfaces to enable IDS projects to share information and resources and allow IDS component reuse. The CIDF framework comprises components that exchange data in the form of a GIDO (generalized intrusion detection object) in a standard format specified by the Common Intrusion Specification Language (CISL) [10], a reporting language. The CIDF effort appears to have lost momentum, with many developers now working on the IETFâ€™s IDMEF.

#### E. Bro
Bro [39] is a real-time, network-based IDS that uses the specialized "Bro Language," a detection language. The goal is to express security policies in scripts written in the language, consisting of event handlers that specify actions for specific events. According to Paxson, the scripts require environment-specific tailoring.

#### F. Snort Rules
SNORT [41] is a network intrusion detection system that performs real-time analysis and packet logging on IP networks. SNORT uses a detection language to define rules, which consist of a header and options. The header contains the rule's action and addressing information, while the options section includes the alert message and packet inspection criteria.

#### G. IDMEF
The IETFâ€™s proposed Intrusion Detection Message Exchange Format Data Model and Extensible Markup Language (XML) Document Type Definition [6] is an effort to establish an industry-wide data model defining computer intrusions. It defines a data model representative of data exported by an IDS and specifies data formats and exchange procedures for inter/intra IDS exchanges. The data model is defined in an XML Document Type Definition and implemented in XML [47].

IDMEF assumes a hierarchical configuration of three IDS components: sensors, analyzers, and managers. Sensors are at the bottom, outputting data to analyzers, which report to a manager at the top. Because the IDMEF data model, encoded in XML, is an emerging standard, we compare and contrast it with the notion of using ontologies to represent the data model and encoding it in an ontology representation language.

### 2.3 XML in Comparison to DAML+OIL
The primary shortcoming of IDMEF is its use of XML, which is limited to a syntactic representation of the data model. This limitation requires each individual IDS to interpret and implement the data model programmatically. This issue can be mitigated by using an ontology representation language like DAML+OIL.

DAML+OIL is a descriptive logic language grounded in both model-theoretic and axiomatic semantics, specifically designed for the Internet. It can:

1. **Model Attributes and Characteristics**: Represent the attributes and characteristics of a domain.
2. **Report Instances**: Report the existence of an instance of the domain in a manner comprehensible by any entity possessing the specific ontology.
3. **Aggregate Instances**: Aggregate specific instances of the domain in a knowledge base and enable the conclusion that a larger or more comprehensive instance of the ontology exists.

Table 1 compares the features of DAML+OIL and XML, highlighting the inadequacies of XML in terms of reasoning and extensibility.

**Table 1: Language Feature Comparison: DAML+OIL versus XML**

| Feature                | Description                                                                 |
|------------------------|-----------------------------------------------------------------------------|
| Bounded Lists          | Uses a first/rest structure to represent unordered bounded lists, with nil representing the end of the list. |
| Cardinality Constraints| minCardinality and maxCardinality constraints.                              |
| Class Expressions      | Allows expressions involving unionOf, disjointUnionOf, intersectionOf, or complementOf. |
| Data Types             | Supports numerical, temporal, and string data types.                        |
| Defined Classes        | Allows new classes to be defined based on property values or other restrictions. |
| Enumerations           | Specifies a restricted set of values for a given attribute.                  |
| Equivalence            | Supports equivalentTo for classes, properties, and instances.                |
| Extensibility          | Allows new properties to be used with existing classes.                      |
| Formal Semantics       | Semantics expressed in both model-theoretic and axiomatic forms.             |
| Inheritance            | Fully supports subClassOf and subPropertyOf.                                |
| Inference              | Constructs such as TransitiveProperty, UnambiguousProperty, inverseOf, and disjointWith for reasoning engines. |
| Local Restrictions     | Allows restrictions to be associated with Class/Property pairs.              |

## 3. Motivation for Transitioning from Taxonomies to Ontologies
The transition from taxonomies to ontologies is motivated by the need for a more robust and flexible representation of the domain of computer attacks and intrusions. Taxonomies, while useful for classification, lack the necessary constructs for reasoning and sharing a common understanding of the information. Ontologies, on the other hand, provide a formal and machine-interpretable specification of concepts and relationships, enabling better reasoning, analysis, and interoperability.

## 4. Our Ontology
Our ontology for modeling computer attacks is constructed using DAML+OIL. It includes a comprehensive set of classes and properties that capture the essential characteristics of attacks and intrusions. The ontology is designed to be extensible and adaptable to different environments and systems. We define key classes such as "Attack," "Intrusion," "Means of Attack," and "Consequence," along with their relationships and constraints.

## 5. Implementation
The implementation of our ontology involves using DAMLJessKB, an extension to the Java Expert System Shell (JESS). DAMLJessKB allows us to implement the logic of the ontology and perform reasoning over instances of the data model. We describe the steps involved in the implementation, including the definition of classes and properties, the instantiation of instances, and the execution of queries and inferences.

## 6. Use Case Scenario
To illustrate the utility of using an ontology in intrusion detection, we present a use case scenario involving the detection of Denial of Service (DoS), Mitnick, and Buffer Overflow attacks. The scenario demonstrates how the ontology enables the system to reason over and correlate events, leading to the detection and classification of these attacks. We provide detailed examples and discuss the benefits of using an ontology in this context.

## 7. Conclusion
In conclusion, the transition from taxonomies to ontologies offers significant benefits for the IDS research community. Ontologies provide a more robust and flexible representation of the domain, enabling better reasoning, analysis, and interoperability. Our implementation using DAML+OIL and DAMLJessKB demonstrates the practical utility of ontologies in a distributed intrusion detection system. Future work will focus on further refining the ontology and exploring its application in different contexts and environments.

**References**
[Include references here]