title:Modeling Computer Attacks: An Ontology for Intrusion Detection
author:Jeffrey Undercoffer and
Anupam Joshi and
John Pinkston
Modeling Computer Attacks:
An Ontology for Intrusion Detection
Jeffrey Undercoffer, Anupam Joshi, and John Pinkston
University of Maryland, Baltimore County
Department of Computer Science and Electrical Engineering
1000 Hilltop Circle, Baltimore, MD 21250
{undercoffer,joshi,pinkston}@umbc.edu
Abstract. We state the beneﬁts of transitioning from taxonomies to ontologies
and ontology speciﬁcation languages, which are able to simultaneously serve as
recognition, reporting and correlation languages. We have produced an ontology
specifying a model of computer attack using the DARPA Agent Markup Lan-
guage+Ontology Inference Layer, a descriptive logic language. The ontology’s
logic is implemented using DAMLJessKB. We compare and contrast the IETF’s
IDMEF, an emerging standard that uses XML to deﬁne its data model, with a data
model constructed using DAML+OIL. In our research we focus on low level kernel
attributes at the process, system and network levels, to serve as those taxonomic
characteristics. We illustrate the beneﬁts of utilizing an ontology by presenting
use case scenarios within a distributed intrusion detection system.
1 Introduction
A central component of an IDS is the taxonomy employed to characterize and classify
the attack or intrusion, and a language that describes instances of that taxonomy. The
language is paramount to the effectiveness of the IDS because information regarding
an attack or intrusion needs to be intelligibly conveyed, especially in distributed en-
vironments, and acted upon. Several taxonomies have been proposed by the research
community. Some include a descriptive language; however, most do not. Likewise, sev-
eral attack languages have been proposed, but most are not grounded in any particular
taxonomy, hence their associated classiﬁcation schemes are ad hoc and localized. The
inherent problem with this approach is threefold:
i. In order to operate over instances of the data model characterized by a particular
taxonomy, the data model must be encoded within a software system. Any changes
or updates to the data model necessitate a change to the software system.
ii. Taxonomies only provide schemata for classiﬁcation. They lack the necessary and
sufﬁcient constructs needed to enable a software system to reason over an instance
of the taxonomy, which is representative of the domain under observation.
iii. Most attack and signature languages are particular to speciﬁc domains, environments
and systems; consequently, they are not extensible, are not communicable between
non-homogeneous systems, and their semantics are often vague and lack grounding
in any formal logic.
G. Vigna, E. Jonsson, and C. Kruegel (Eds.): RAID 2003, LNCS 2820, pp. 113–135, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003
114
J. Undercoffer, A. Joshi, and J. Pinkston
To mitigate the effects of theses problems, we suggest transitioning from taxonomies
to ontologies. We construct a data model that characterizes the domain of computer at-
tacks and intrusions as an ontology and implement that data model with an ontology
representation language. Ontologies, unlike taxonomies, provide powerful constructs
that include machine interpretable deﬁnitions of the concepts within a domain and the
relations between them. Ontologies, therefore, provide software systems with the ability
to share a common understanding of the information at issue, in turn empowering soft-
ware systems with a greater ability to reason over and analyze this information. Gruber
[17] deﬁnes an ontology as an explicit speciﬁcation of a conceptualization. The term,
which is borrowed from philosophy, is used to provide a formal speciﬁcation of the
concepts and relationships that can exist between entities within a domain. Accordingly,
ontologies are designed for the purpose of enabling knowledge sharing and reuse be-
tween the entities within a domain. In our case, those entities are Intrusion Detection
Systems (IDS) and IDS sensors.
Ontology representation languages may be mapped into ﬁrst-order relational sen-
tences and a set of ﬁrst-order logic axioms. This mapping restricts the allowable in-
terpretations of the non-logical symbols (i.e., relations, functions, and constants) [11],
enabling instances of the ontology to be operated over using formal and complete theo-
rem provers.
Commenting on the Internet Engineering Task Force’s emerging standard – the Intru-
sion Detection Message Exchange Format Data Model and Extensible Markup Language
(XML) Document Type Deﬁnition (IDMEF)[6], and its ability to enable interoperability
between non-homogeneous IDS sensors, Kemmerer and Vigna [25] state that the ID-
MEF is a ﬁrst step and that additional effort is needed to provide a common ontology
that lets IDS sensors agree on what they observe.
We illustrate the beneﬁts of using ontologies by presenting an implementation of one
being utilized by a distributed intrusion detection system. We have constructed our ontol-
ogy using the DarpaAgent Markup Language + Ontology Inference Layer (DAML+OIL)
[22] and have implemented its logic using DAMLJessKB [28], an extension to the Java
Expert System Shell [13].
Although our IDS model is not the focus of this paper, we brieﬂy describe it in order to
provide context to the reader. Our IDS [23] is a two-phased, host based system. The ﬁrst
phase is an anomaly detector which detects aberrant behavior at the system level. We have
instrumented the Linux kernel and gather 190 distinct attributes at the process, system
and network levels, several times per second. We use Principal Component Analysis
(PCA) [15] to reduce the dimensionality of the data set and then use Fuzzy Clustering
[29] on the reduced data set in order to obtain clusters that model the quiescent state of
the system. Once the baseline has been established, we use the Mahalanobis metric [5] as
a dissimilarity measure in order to determine if subsequent data samples fall within the
bounds of the normative state. The second phase of our IDS reasons over the subsequent
samples of the feature set that fall outside of the bounds of the normative state, and
possibly represent anomalous behavior. The sample, constrained by the ontology, is
asserted into a knowledge base which is continually queried for evidence of an intrusion
or an attack. Figure 1 illustrates a single component of our distributed system.
Modeling Computer Attacks: An Ontology for Intrusion Detection
115
Output Streams
Samples taken
at intervals of
time 
host under
observation
  from the
Preprocess
Using PCA
and Fuzzy
Clustering
Annotate data as
DAML triples of the
form:
triple (P, S, O)
constrained by the
ontology as defined
by Intrusion.daml
  S y s t e m s
r o m   o t h e r
I n p u t
f
Knowledge
Base
Discrete
Data
Continuous
Data
Query Results
Ontology
(Intrusion.dam)
Fig. 1. Distributed IDS Framework
The goal of this work is to demonstrate the utility of ontologies and the overwhelming
beneﬁts that may be derived by the IDS research community by transitioning from
taxonomies and their linguistic and symbolic representations, to ontologies and ontology
representation languages.
The remainder of this paper is organized as follows: Section 2 presents related work
in the area of attack taxonomies, attack languages and ontologies for intrusion detection.
Section 3 details the motivation for transitioning from taxonomies to ontologies. Our
ontology is presented in Section 4. Section 5 details our implementation and Section
6 provides a use case scenario illustrating the utility of using an ontology in detecting
instances of a Denial of Service, Mitnick and Buffer Overﬂow attacks. We conclude with
Section 7.
2 Related Work
There is little, if any, published research formally deﬁning ontologies for use in Intrusion
Detection. Raskin et al. [40] introduce and advocate the use of ontologies for information
security. In stating the case for using ontologies, they claim that an ontology organizes and
systematizes all of the phenomena (intrusive behavior) at any level of detail, consequently
reducing a large diversity of items to a smaller list of properties.
The preponderance of existing research in the area of the classiﬁcation of computer
attacks is limited to taxonomies and the taxonomies that are implicit in attack languages.
The following subsections address taxonomies and attack languages.
2.1 Related Work: Taxonomies
There are numerous attack taxonomies proposed for use in intrusion detection research.
Landwehr et al. [31] present a taxonomy categorized according to genesis (how), time
of introduction (when) and location (where). They include sub-categories of: validation
errors, boundary condition errors and serialization errors, as a means of effecting an
intrusion. We have incorporated these sub-categories into our ontology.
116
J. Undercoffer, A. Joshi, and J. Pinkston
During the 1998 and 1999 DARPA Off Line Intrusion Detection System Evaluations
[20,26,35], Weber provided a taxonomy that deﬁned the category consequence. This
includes the sub-categories of Denial of Service, Remote to Local, User to Root and
Probe. We have incorporated these classiﬁcations into our work.
In deﬁning their taxonomy, Lindqvist and Jonsson [33] state that they “focus on the
external observations of attacks and breaches which the system owner can make”. Our
effort is consistent with their focus because we hold that, since IDSs are either adjacent
to or co-located with the target of an attack, it is imperative that any classiﬁcation
scheme used to represent an attack be target-centric, where each taxonomic character is
comprised of properties and features that are observable by the target of the attack.
Ning et al.[37] propose a hierarchical model for attack speciﬁcation and event ab-
straction using three concepts essential to their approach: System View, Misuse Signature
and View Deﬁnition. Their model is based upon a thorough examination of attack char-
acteristics and attributes and is encoded within the logic of their proposed system. We
include a global system view in our ontology.
As detailed by Allen et al. [1] and McHugh [36], the taxonomic characterization of
intrusive behavior has typically been from the attacker’s point of view, each suggesting
that alternative taxonomies need to be developed.Allen et al. state that intrusion detection
is an immature discipline and has yet to establish a commonly accepted framework.
McHugh suggests classifying attacks according to protocol layer or, as an alternative,
whether or not a completed protocol handshake is required. Likewise, Guha [18] suggests
an analysis of each layer of the TCP/IP protocol stack to serve as the foundation for an
attack taxonomy. Consequently, we have endeavored to make our ontology as target
centric as possible.
Aslam et al. [3] observe that many potential faults and vulnerabilities are intrinsic to
the software development process. Their observations are consistent with our own. Our
ontology deﬁnes the class “Means of Attack” and is comprised of many of the attributes
identiﬁed by Aslam et al.
Our intent is to not criticize the use of taxonomies. To the contrary, they have served
their purpose well, particularly in identifying and classifying the characteristics of com-
puter attacks and intrusions. We do, however, advocate leveraging their work by building
upon existing taxonomies and transitioning to ontologies. We feel that this is necessary
and warranted because, according to Staab and Maedche [43], taxonomies do not contain
the necessary meta-knowledge required to convey modeling primitives such as concepts,
relations and axioms that are required to make sense of and operate on speciﬁc objects.
Ontologies do. It should be pointed out that a complete and well formed ontology sub-
sumes a taxonomy.
2.2 Related Work: Attack Languages
There are several attack languages proposed in the literature. These languages are often
categorized as Event, Response, Reporting, Correlation, and Recognition Languages
[8,9]. We concentrate on correlation, reporting and recognition languages because an
ontology representation language is able to simultaneously provide the functionality of
all three.
Modeling Computer Attacks: An Ontology for Intrusion Detection
117
A. P-Best
The P-BEST Toolset [34] (Production-Based Expert System Toolset) is a correlation
language from which users may specify the inference formula for reasoning and act-
ing upon facts asserted into its fact base and from facts derived from external events.
P-BEST supports the writing of rules for signature detectors. According to Doyle
et al. [8], the P-BEST language lacks concepts that are speciﬁc to event recognition
and consists solely of a formalism for expressing probabilistic and linguistic rules.
B. STATL
STATL [9] is an extensible state/ transition-based attack detection language designed
to support intrusion detection. STATL allows one to describe computer penetrations
as sequences of actions that an attacker performs in order to compromise a computer
system. In STATL, scenarios are attacker centric. This language provides constructs
to represent an attack as a composition of states and transitions. The constructs are
similar to those used in programming languages, which describing conditional, se-
quential and iterative events. STATL lacks constructs for combining sub-events into
larger events. Reporting on the efﬁcacy of various attack recognition languages,
Doyle et al. [8] state: “STATL constitutes the most clearly deﬁned language for use
in attack recognition”.
C. LogWeaver
LogWeaver [16] is a log auditing tool that takes a system log as input and processes
it according to a signature (rule) ﬁle. The signature ﬁle deﬁnes the type of events that
are to be monitored and reported on. LogWeaver is able to match regular expressions
and make correlations between events, provided that they are executed by the same
user. LogWeaver employs logic that is based upon model checking [42]. Essentially,
LogWeaver is a speciﬁcation for a detection language, which deﬁnes a syntax and
grammar for the end-user to use when writing signatures.
D. CISL
The Common Intrusion Detection Framework (CIDF) [24] started as a DARPA
initiative in 1998. CIDF was an effort to develop protocols and application pro-
gramming interfaces to give IDS research projects the ability to share information
and resources and to enable IDS component reuse by multiple systems. The CIDF
framework is comprised of components which exchange data in the form of a GIDO
(generalized intrusion detection object) which are represented in a standard format.
This standard format is speciﬁed in the Common Intrusion Speciﬁcation Language
(CISL) [10], a reporting language. The CIDF effort appears to have lost inertia, with
many of its developers now working on the IETF’s IDMEF.
E. BRO
Bro [39] is a real-time, network based IDS that utilizes the specialized “Bro Lan-
guage”, a detection language. The goal of the “Bro Language” is to express security
policies in terms of scripts written within that language. In turn, the scripts consist of
event handlers that specify what to do whenever a particular event occurs. According
to Paxson, the scripts require environment speciﬁc tailoring.
118
J. Undercoffer, A. Joshi, and J. Pinkston
F. Snort Rules
SNORT [41] is a network intrusion detection system that performs real time analy-
sis and packet logging on IP networks. SNORT uses a detection language to deﬁne
rules. The rules are two part: header and options. The header contains the rule’s
action and addressing information. The options section contains the alert message
as well as specifying packet inspection criteria.
G. IDMEF
The Internet Engineering Task Force’s proposed Intrusion Detection Message Ex-
change Format Data Model and Extensible Markup Language (XML) Document
Type Deﬁnition [6] is a profound effort to establish an industry wide data model
which deﬁnes computer intrusions. It deﬁnes a data model that is representative of
data exported by an IDS. It also deﬁnes data formats and exchange procedures for
inter/intra IDS exchanges. The data model is deﬁned in an XML Document Type
Deﬁnition and implemented in the Extensible Markup Language (XML) [47].
The IDMEF assumes a hierarchal conﬁguration of three IDS components: sensors,
analyzers, and managers. Sensors are located at the bottom most level of the hierar-
chy. Sensors output data to analyzers, which in turn report up to a manager, located
at the topmost level of the hierarchy.
Because the IDMEF data model, encoded in XML, is an emerging standard, we
compare and contrast it to the notion of using ontologies to represent the data model and
the subsequent encoding of the data model in an ontology representation language.
2.3 XML in Comparison to DAML+OIL
The IDMEF’s principal shortcoming is its use of XML, which is limited to a syntactic
representation of the data model. This limitation requires that each individual IDS inter-
pret and implement the data model programmaticaly. This shortcoming may be mitigated
by using an ontology representation language such as DAML+OIL.
The ontology speciﬁcation language DAML+OIL, is a descriptive logic language and
is grounded in both model-theoretic1 and axiomatic semantics2 and has been “cooked”
speciﬁcally for the Internet. Consequently it is able to:
i. Model the attributes and characteristics of a domain.
ii. Report the existence of an instance of the domain (model) in a manner that is
“comprehensible” by any entity that possess the speciﬁc ontology.
iii. Aggregate speciﬁc instances of the domain in a knowledge base and enable the
conclusion that some larger, or more comprehensive, instance of the ontology exists.
The following best explains the inadequacies of XML vis-´a-vis DAML+OIL.
Humans are able to combine new facts with existing knowledge to derive new knowl-
edge, computers are not. When a computer acquires new data in XML, it may be able
1 model-theoretic semantics is the process of constructing mathematical models of logical con-
sequence and establishing when the model satisﬁes a formula
2 axiomatic semantics is the process of deﬁning a language using axioms and proof rules
Modeling Computer Attacks: An Ontology for Intrusion Detection
119
Table 1. Language Feature Comparison: DAML+OIL versus XML
Feature
Description
Uses a ﬁrst/rest structure to represent unordered bounded lists,
with nil representing the end of the list.
bounded
lists
cardinality minCardinality and maxCardinality
constraints
class
expressions
data types
deﬁned
classes
enumerations Allows speciﬁcation of a restricted set of values for
Wherever a Class is referenced allows an expression involving
unionOf, disjointUnionOf,intersectionOf or complementOf.
e.g: numerical, temporal and string data types
Allows new classes to be deﬁned based on property values
or other restrictions of an existing class.
a given attribute to include oneOf
equivalence Supports equivalentTo for classes, properties, and instances
to support reasoning across ontologies and knowledge bases
extensibility Allows new properties to used with existing classes.
formal
semantics
inheritance
inference
Semantics have been expressed in both model-theoretic
and axiomatic forms.
Fully supports subClassOf and subPropertyOf
Has constructs such as TransitiveProperty, UnambiguousProperty,
inverseOf, and disjointWith for reasoning engines.
Allows restrictions to be associated with a Class/Property pairs.
local