---
author: Peter Bright
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 5190
date: '2018-02-26 23:53:21'
editorchoice: false
excerpt: 我们已经意识到问题的存在，但目前尚不清楚具体细节。
fromurl: https://arstechnica.com/gadgets/2018/01/whats-behind-the-intel-design-flaw-forcing-numerous-patches/
id: 9387
islctt: true
largepic: /data/attachment/album/201802/26/235324a324tj1htn23dpw2.jpg
permalink: /article-9387-1.html
pic: /data/attachment/album/201802/26/235324a324tj1htn23dpw2.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 尽管我们已知存在问题，但其具体细节仍不清楚。
tags:
- KPTI
- Intel
- CPU
thumb: false
title: Intel 设计缺陷背后的原因是什么？
titlepic: true
translator: qhwdw
updated: '2018-02-26 23:53:21'
---

> 尽管我们已知存在问题，但其具体细节仍不清楚。

![](/data/attachment/album/201802/26/235324a324tj1htn23dpw2.jpg)

（本文发表于 2018 年 1 月）最近，Windows 和 Linux 都发布了重大安全更新，以防范一个尚未完全公开的问题。在最坏的情况下，这个问题可能导致性能下降多达一半。

过去几周里，Linux 内核陆续打了几个补丁。Microsoft 自 11 月份开始内部测试 Windows 更新，并预计在下周二的例行补丁中将其推送到主流 Windows 构建版中。Microsoft 的 Azure 也在下周的维护窗口中做好了安排，而 Amazon 的 AWS 也计划在周五对相关设施进行维护。

自从第一个 Linux 补丁发布以来（参见 [KPTI：内核页表隔离的当前进展](/article-9201-1.html)），这个问题的轮廓逐渐清晰。尽管 Linux 和 Windows 对此有不同的看法，这两个操作系统——以及其他 x86 操作系统如 FreeBSD 和 macOS——在处理系统内存方面采用了相似的方法，因为这些操作系统的这一部分特性与底层处理器高度耦合。

### 地址跟踪的重要性

在一个系统中，每个内存字节都有一个隐式编码的地址。早期的操作系统使用物理内存地址，但这并不理想，因为物理内存地址中经常存在空隙，并且在 32 位系统上，物理地址需要 36 位或更多位来表示，这使得操作变得复杂。

因此，现代操作系统依赖虚拟内存的概念。虚拟内存允许程序和内核在一个简单、统一的环境中各自操作。每个程序和内核都使用连续的虚拟地址访问内存，避免了空隙问题，并且更适合操作。例如，32 位程序只需处理 32 位地址，而不必关心物理地址是 36 位还是更多位。

虽然虚拟地址对软件几乎是透明的，但处理器最终仍需知道虚拟地址对应的物理地址。为此，有一个虚拟地址到物理地址的映射，存储在一个称为页面表的数据结构中。操作系统构建页面表，并使用由处理器决定的布局。处理器和操作系统在虚拟地址和物理地址之间转换时需要用到页面表。

这个映射过程非常关键，是现代操作系统和处理器的基础之一。处理器有专用缓存（Translation Lookaside Buffer，简称 TLB），用于保存一定数量的虚拟地址到物理地址的映射，从而减少每次都需要使用完整页面表的情况。

虚拟内存不仅简化了寻址，还提供了许多其他有用的功能。最主要的是，每个程序都有自己独立的一组虚拟地址及其对应的映射。这是实现“内存保护”的关键技术，确保一个程序不能破坏或篡改其他程序使用的内存，因为其他程序的内存不在其地址映射范围内。

由于每个进程都有自己的映射，这就导致 TLB 缓存变得更加拥挤。TLB 容量有限，通常只能容纳几百个映射。随着系统使用的页面表增多，TLB 能够包含的任何特定虚拟地址到物理地址的映射就越少。

### 性能影响

这种设计缺陷可能导致性能下降，特别是在需要频繁切换进程或处理大量内存请求的情况下。尽管具体的性能影响因系统配置和工作负载而异，但在某些情况下，性能可能会下降多达一半。

通过上述分析，我们可以看到，Intel 设计缺陷背后的复杂性和其对现代计算系统的影响。未来的技术改进和优化将有助于缓解这些问题，但仍需持续关注和研究。