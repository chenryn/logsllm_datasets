P2(x)
Y
N
P3(x)
Y
N
P4(x)
Y
P5(x)
P6(x)
N
Y
N
Y
N
Figure 3: Decision tree computational model
The decision tree was originally proposed for decision prob-
lems, in which the output is binary: simply “yes” or “no”.
The model can be extended to handling more general prob-
lems the output of which is not necessarily binary. For ex-
ample, in the context of this work, the output will be the
sequence in which packets get scheduled.
Allowing diﬀerent types of predicates to be used in the
decision tree results in models of diﬀerent computational
powers. On one extreme, if the decision tree program allows
the magic predicate P (x1, x2,··· , xn) that exactly solves the
problem, then the complexity of the problem is precisely 1.
On the other extreme, if the decision tree program only al-
lows constant predicates, then nontrivial (nonconstant) de-
cision problems are simply not solvable under this model, no
matter how much computation is performed. In this work,
we consider predicates that are reasonable in the sense that
existing scheduling algorithms are able to provide O(1) GPS-
delay bounds using only such predicates.
The ﬁrst computational model we consider is the
decision tree that allows linear tests [5].
In this model,
each predicate allowed by the decision tree is in the form
of “h(x1, x2,··· , xn) ≥ 0?”, where h is a linear function
(deﬁned below) of the inputs {xi}1≤i≤n.
Definition 2
n
(Linear Function). A linear function
f of the variables {xi}1≤i≤n is deﬁned as f (x1, x2, · ·· , xn) =

i=1 aixi + a0, where {ai}0≤i≤n are real constants.
This model will be used in our proofs in Section 4. In the
context of this work, the inputs will be the lengths and the
arrival times of the packets. Note that the linear comparison
model is quite generous: functions like f in the above deﬁni-
tion may take up to O(n) steps to compute, but the model
charge only “1” for it. However, one may still argue that
linear function can be restrictive for packet scheduling since
it does not oﬀer an eﬃcient way to calculate GPS virtual
ﬁnish times from the inputs. Note that GPS virtual ﬁnish
time is in general not a linear function (actually piece-wise
linear) of the inputs. Fortunately, as we proved in Proposi-
tion 2a, under the CBFS condition, the GPS virtual ﬁnish
time of any packet is indeed a linear function of these inputs!
So under the CBFS condition, this model is not restrictive.
Under the CBFS condition, this model is reasonable also
in the sense that many existing scheduling algorithms, in-
cluding W F Q, V C, F F Q, W F 2Q, and W F 2Q+, use only
the operations allowed in the model. Due to Proposition 3,
under the CBFS condition, we only need to consider W F Q
and W F 2Q. Note that in both W F Q and W F 2Q, (1) GPS
time estimation is an O(1) operation and does not require
branching statements under the CBFS condition (see remark
after Proposition 2), and (2) comparisons between virtual
ﬁnish times (shown to be the linear functions of the inputs)
are all that is needed in making scheduling decisions. Care-
ful readers would point out that W F 2Q also involves com-
parisons with virtual start times. However, note that under
the CBFS condition, the virtual start time of a packet is
exactly the virtual ﬁnish time of the previous packet in the
same session!
The second computational model we introduce is the
decision tree that allows comparisons only between its in-
puts. It has been used in proving the Ω(nlog2n) lower bound
for comparison-based sorting algorithms [1].
It is strictly
weaker than the previous model since the set of predicates
that are allowed in this model is a proper subset of what
is allowed in the previous model. However, for the par-
ticular class of instances that are used in establishing our
lower bounds, the second computational model is also rea-
sonable. We will show that under the CBFS condition, al-
lowing comparisons among inputs is equivalent to allowing
comparisons between GPS virtual ﬁnish times of the pack-
ets in that instance class. Since both W F Q and W F 2Q
are able to provide O(1) GPS-relative delay bounds using
such comparisons only, this model is not restrictive either.
In summary, both computational models are practical and
nonrestrictive, in the sense that they are actually being used
by existing scheduling algorithms.
2.3 Remarks on the decision tree model
A decision tree program allowing certain branching predi-
cates is computationally stronger than a computer program
that allows the same types of branching predicates and is
memory-constrained. This is because (1) the decision tree
can be totally diﬀerent when the size of input changes, and
(2) the computational complexity counted in the decision
tree model is only the depth of the tree, not the size of
the tree. Neither is true about a regular computer pro-
gram. So the lower bound derived under the decision tree
model can be no larger than the lower bound achievable by a
computer program! For example, Knapsack3, a well-known
3Among a set T = {x1, x2,· ·· , xn} of n real numbers, decide
whether there exists S ⊆ T such that x∈S
x = 1.
283NP-complete problem, has an O(n5log2n) algorithm4 in the
decision tree model that allows linear comparisons [9]. De-
spite the fact that a decision tree algorithm can be computa-
tionally stronger than a computer program, when allowing
the same branching predicates, many lower bound proofs
are based on decision tree. This is because (1) they provide
powerful tools for proving lower bounds, and (2) so far there
is no model that exactly captures the computational power
of a computer program and at the same time provides such
powerful tools.
3. COMPLEXITY–DELAY TRADEOFFS
WHEN ALLOWING COMPARISONS
BETWEEN INPUTS
In this section, we prove that if only comparisons between
inputs are allowed, the complexity to assure O(1) or O(na)
(0 < a < 1) GPS-relative delay bound is Ω(log2n).
In
Section 3.1, we introduce two general lemmas used in later
proofs. Section 3.2 and 3.3 proves the Ω(log2n) complexity
lower bounds for the case of O(1) and O(na) respectively.
3.1 Preliminaries
A reduction argument similar to those used in NP com-
pleteness proofs is used in proving the complexity lower
bounds throughout this paper. The basic idea is to con-
vert a problem P1, the complexity lower bound of which is
known (say B), to the problem P2, for which we would like
to determine the complexity lower bound. If it can be shown
that the conversion cost is no more than C, then the com-
plexity lower bound of problem P2 is at least B − C. In this
paper, sorting problems with known complexity lower bound
of nlog2n − o(nlog2n) (for instance of size n), are reduced
to scheduling problems with O(na) (0 ≤ a < 1) delay or
disadvantage guarantees. We show that the reduction cost
is no more than anlog2n. Therefore, the scheduling com-
plexity has to be at least (1 − a)nlog2n − o(nlog2n) since
otherwise the resulting sorting algorithm beats its proven
complexity lower bound, which is impossible. Here we write
nlog2n− o(nlog2n) instead of Ω(nlog2n) in order to empha-
size that the constant factor of the main term is precisely
1.
In the following, we state without proof the well-known
complexity lower bound for comparison-based sorting [1]. Its
proof can be found in several algorithm textbooks, including
[1]. It is clear from the proof that this lower bound holds
even if all the real numbers are between two numbers m and
M (0 ≤ m < M ).
Lemma 1
(sorting lower bound [1]). To sort a set
of n numbers {xi}1≤i≤n using only comparisons among them,
requires nlog2n − o(nlog2n) steps in the worst case.
Reduction to the sorting problem is suﬃcient for proving
the lower bounds (when allowing direct comparisons among
inputs) for scheduling throughout this section. However, to
prove stronger results (when allowing linear tests) in Section
4, we need to reduce them to a stronger version of the sort-
ing lower bound (Lemma 3). Since the reduction steps for
proving stronger lower bounds in Section 4 can be “reused”
4This, however, does not imply P = N P , since a decision
tree algorithm can be more powerful than a computer pro-
gram.
for proving the weaker results in this section, for the overall
succinctness of the proofs, reductions in this section will also
be based on Lemma 3 (stronger version) instead of Lemma
1 (weaker version).
Definition 3. The set membership problem is to deter-
mine whether the input {xi}1≤i≤n, viewed as a point (x1, x2,
··· , xn) in the Euclidean space Rn, belongs to a set L ⊆ Rn.
In the following, we state a general lemma concerning
complexity of set membership problems (deﬁned above) un-
der the decision tree model that allows linear tests. This
lemma, due to Dobkin and Lipton [5], has been used exten-
sively in lower bound proofs (e.g., [6]). In complexity theory,
lower bound for solving a set membership problem is closely
related to the geometric properties of the set. The following
lemma essentially states that if the set consists of N dis-
connected open sets, determining its membership requires
at least log2N complexity.
Lemma 2. Any linear search tree that solves the mem-
bership problem for a disjoint union of a family {Ai}i∈I of
open subsets of Rn requires at least log2|I| queries in the
worst case [5].
Proof (adapted from [5]). Consider the decision tree
algorithm for deciding membership in a set L ⊆ Rn. At
any leaf node, the algorithm must answer “yes” or “no”
to the questions of whether the inputs x1, x2,· ·· , xn are
coordinates of a point in L. Let the set of points “accepted”
at leaf p be denoted by Tp (i.e., Tp is the set of points for
which all tests in the tree have identical outcomes and lead to
leaf node p, for which the algorithm answers “yes”). The leaf
nodes of the tree partition Rn into disjoint convex regions
because all comparisons are between linear functions of the
coordinates of the input point, so in particular each of the
accepting sets Tp is convex.
We prove the lemma by contradiction. Suppose that the
level of the tree is less than log2|I|. Then the number of leaf
nodes must be strictly less than I. Now since L consisting
of |I| disjoint regions, some accepting node Tp must accept
points in two regions due to the pigeon-hole principle, say Lα
and Lβ. Choose any points P1 ∈ Tp T Lα and P2 ∈ Tp T Lβ.
Note that the linear comparisons (viewed as hyperplanes)
dissect Rn into convex polytopes. By the convexity of Tp,
every point on the line P1P2 is in Tp. So for every such
point the algorithm answers “yes”. However, Lα and Lβ
are disjoint open sets, so the line P1P2 contains points not
in L. This contradicts the correctness of the membership
algorithm.
Now we are ready to introduce the aforementioned stronger
result, concerning sorting complexity lower bound when al-
lowing linear tests. Let 0 ≤ m < M be two real num-
bers. The following Lemma (Lemma 3) essentially states
that, when linear tests are allowed, the same sorting com-
plexity lower bound (nlog2n − o(nlog2n)) still holds when
these n numbers are evenly distributed in the following n
neighborhoods: {(m +
− , m +
n+1 + )}1≤i≤n
i(M−m)
(i.e., there exists a permutation π of n elements such that
n+1 + , i = 1, 2, ··· , n).
i(M−m)
m +
To see this, we show that this sorting problem is at least
asymptotically “as hard as” the membership problem for
−  < xπ(i) < m +
i(M−m)
i(M−m)
n+1
n+1
284i(M−m)
the following set L: L = {(y1, y2, ..., yn) ∈ Rn : there exists
− δ < yπ(i)
a permutation π of 1, ..., n such that m +
n+1 + δ, i = 1, 2,· ·· , n}. Here 0 < δ < M−m
i(M−m)
< m +
3(n+1)
is a “small” real constant. “Sorting” is at least asymptot-
ically “as hard”, since if there is an algorithm for sorting
with computational complexity B, then there is a B + O(n)
algorithm for the membership problem (just sort the num-
bers using B time and check using O(n) time if they are in
the corresponding neighborhoods).
n+1
Lemma 3. Under the decision tree model that allows lin-
ear tests, given the inputs {xi}1≤i≤n, determining whether
(x1, x2,··· , xn) ∈ L requires at least nlog2n - o(nlog2n) lin-
ear tests.
Note that this result is stronger than Lemma 1 since here
the computational model (allowing linear tests) is stronger
and there are restrictions on the values that these n numbers
can take.
n+1
i(M−m)
i(M−m)
−δ < yπ(i) < m+
Proof. Let Π be the set of permutations on the set {1, 2,
·· · , n}. Then by the deﬁnition of L, L = Sπ∈Π Lπ. Here Lπ
= {(y1, y2, ..., yn) : m+
n+1 +δ,
i = 1, 2,· ·· , n}. Each Lπ is obviously an open set. Also
Lπ1 and Lπ2 are disjoint if π1 (cid:16)= π2. To see this, note that
if π1(i) (cid:16)= π2(i) for some i, then each point in Lπ1 and each
point in Lπ2 must have a minimum distance of δ between
their i’th coordinates.
The number of such regions {Lπ}π∈Π is n! because |Π| =
least log2(n!), which by Stirling’s formula (n! ∼ √
n!. So by Lemma 2, the number of comparisons must be at
e )n),
2πn( n
is equal to nlog2n - o(nlog2n).
Remark: We emphasize that the ﬂoor (and equivalently
the ceiling) function is not allowed in the decision tree. Oth-
erwise, an O(n) algorithm obviously exists for deciding L-
membership based on bucket sorting. Note that the ﬂoor
function is a not a linear function (piecewise linear instead).
The linearity of the test is very important in the proof of
Lemma 2 since it relies on the fact that the linear tests dis-
sect the space Rn into convex regions (polytopes). These
regions are no longer convex when the ﬂoor function is al-
lowed. For this reason, the ﬂoor function5 is disallowed in
almost all lower bound proofs. Nevertheless, despite the fact
that the ﬂoor function will “spoil” our lower bound proofs
(and many other proofs), no existing scheduling algorithm
(certainly allowed to use “ﬂoor”) is known to have a worst
case computational complexity of o(log2n) and guarantee
O(1) or O(na) (0 < a < 1) worst-case GPS-relative delay.
Studying the computation power of “ﬂoor” on this schedul-
ing problem can be a topic for future research.
3.2 Ω(log2n) complexity for O(1) delay
In this section, we prove that Ω(log2n) complexity is re-
quired to guarantee O(1) GPS-relative delay, when only
comparisons between inputs (equivalently GPS virtual ﬁn-
ish times) are allowed. A naive argument for this would be
that it takes Ω(log2n) per packet to schedule the packets ac-
cording to the sorted order of their GPS virtual ﬁnish times.
However, this argument is not a proof since it can be shown
that to be sorted is not a necessary condition (although it
5Its computational power is discussed in [18] in detail.
is suﬃcient [12]) to assure O(1) GPS-relative delay. For ex-
ample, if a GPS-relative delay bound of 10 maximum size
packets needs to be assured, then given a service schedule
sorted according to their GPS virtual ﬁnish times, any 9
packets can be relocated (intra-session packet service order