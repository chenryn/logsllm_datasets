用
./node_exporter .
如果看到类似输出，
source="node_exporter.go:141"
-h
查看运行选项，
，表示启动成功。
./node_exporter 
口
---
## Page 98
本文档使用书栈(BookStack.CN)构建
配置：
打开 prometheus.yml 文件，
node_exporter 的数据。
我们可以利用Prometheus 的 static_configs 来拉取
数据存储
http://IP:9100/metrics,
当 Node Exporter 运行起来后，在浏览器中访问
我们可以使用docker 镜像安装，命令为:
Node Exporter 安装使用
2
6.
3
2
6
8
9
5
4
C
2
 docker run -d -p 9100:9100 1
- job_name: "node""
 go_gc_duration_seconds{quantile="0.5"} 0
go_gc_duration_seconds{quantile="0.25"} 0
go_gc_duration_seconds{quantile="o"} 0
# TYPE go-gc_duration_seconds summary
 # HELP go_gc_duration_seconds A summary of the GC invocation
"^/(syslproc|dev|host|etc)($|/)" 
durations.
quay.io/prometheus/node-exporter 
--net="host" \ 
-v "/sys:/host/sys:ro" \
-v "/proc:/host/proc:ro" 
-v "/:/rootfs:ro"\
 static_configs:
 -collector.filesystem.ignored-mount-points
-collector.sysfs /host/sys \
-collector.procfs /host/proc \
- targets: ["127.0.0.1:9100"]
在scrape_configs 中添加如下
将看到类似输出
6
---
## Page 99
本文档使用书栈(BookStack.CN)构建
node_exporter 的数据。
重启加载配置，
NodeExporter安装使用
然后到 Prometheus Console 查询，你会看到
---
## Page 100
本文档使用书栈(BookStack.CN)构建
机器平均负载
CPU各 mode占比率
CPU使用率
注意：以下查询均以单个节点作为例子，如果大家想查看所有节点，将
些业务查询和监控，下面是一些比较常见的查询。
收集到 node_exporter 的数据后，我们可以使用PromQL 进行一
NodeExporter常用查询语句
Node Exporter 常用查询
Node Exporter 常用查询
 instance="xxx"
1. avg by (instance, mode） (irate(node_cpu{instance="xxx"}[5m])） * 100
● Node Exporter 
100- (avg by (instance） (irate(node_cpu{instance="xxx",
mode="idle"}[5m])） * 100)
。机器平均负载
。CPU使用率
。CPU各mode占比率
网卡出/入包
网络  IO 
磁盘使用率
内存使用率
去掉即可。
常用查询语句
---
## Page 101
本文档使用书栈(BookStack.CN) 构建
网络
或者你也可以直接使用{fstype="xxx"}来指定想查看的磁盘信息
磁盘使用率
内存使用率
Node Exporter 常用查询
2
 node_load1{instance="xxx"}// 1分钟负载
//上行带宽
100－
(irate(node_network_transmit_bytes{instance="xxx", device!~"bond . *?
sum by (instance)
//下行带宽
[lo"}[5m])/128)
(irate(node_network_receive_bytes{instance="xxx", device!~"bond . *?
sum by (instance)
node_filesystem_size{instance="xxx",fstype!~"rootfs|selinuxfs|autofs|
node_filesystem_free{instance="xxx",fstype!~"rootfs|selinuxfs|autofs
100 -
((node_memory_MemFree{instance="xxx"}+node_memory_cached{instance="xx
node_load15{instance="xxx"}// 15分钟负载
node_load5{instance="xxx"} // 5分钟负载
[lo"}[5m])/128)
IO
*100
一
*100
101
口
---
## Page 102
本文档使用书栈(BookStack.CN)构建
网卡出/入包
Node Exporter 常用查询
5.
+
2
//出包量
sum by (instance)
//入包量
[5m])）
(rate(node_network_transmit_bytes{instance="xxx", device!="lo"}
sum by (instance)
---
## Page 103
本文档使用 书栈(BookStack.CN) 构建
Node Exporter Grafana 模版
Node Exporter Grafana 模版
Node Exporter Grafana 模版
·Node Exporter Grafana 模版
---
## Page 104
本文档使用书栈(BookStack.CN)构建
更多exporter 请参考链接。
exporter 或者自己编写，比较常用的 exporter 有，
除了node_exporter 我们还会根据自己的业务选择安装其他
其他 Exporter 简介
其他 Exporter 介绍
其他 Exporter 介绍
·其他 Exporter 简介
·JMX exporter 负责收集 Java 虚拟机信息
·InfluxDB exporter 负责收集 InfluxDB 信息
·MySQL server exporter 负责收集 Mysql Sever 信息
Memcached exporter 负责收集 Memcached 信息
MongoDB exporter 负责收集 MongoDB 信息 
104
---
## Page 105
本文档使用书栈(BookStack.CN) 构建
本章将介绍 pushgateway 使用经验以及注意事项。
Pushgateway
Pushgateway
· Pushgateway
---
## Page 106
本文档使用书栈(BookStack.CN)构建
据，需要手动清理 pushgateway 不要的数据。
由于以上原因，不得不使用 pushgateway，但在使用之前，有必要了
因主要是：
Pushgateway 是 Prometheus 生态中一个重要工具，使用它的原
Pushgateway 简介
Pushgateway 是什么
因此，即使你的监控已经下线，prometheus 还会拉取到l旧的监控数
解一下它的一些弊端：
Pushgateway 是什么
·将多个节点数据汇总到 pushgateway，如果 pushgateway 挂
·Pushgateway 简介
·Pushgateway 可以持久化推送给它的所有监控数据。
·Prometheus 采用 pull 模式，可能由于不在一个子网或者防火
对每个节点有效。
了，受影响比多个target大。
统一收集。
在监控业务数据的时候，需要将不同数据汇总，由 Prometheus
墙原因，导致 Prometheus 无法直接拉取各个 target 数据。
无法做到
---
## Page 107
本文档使用 书栈(BookStack.CN)构建
以 vθ.4.θ 为例子，
你可以到下载页面,选择对应的版本，
二进制安装
安装
Pushgateway 安
如何使用 Pushgateway?
如何使用 Pushgateway?
·启动 pushgateway
·使用tar 解压缩 pushgateway-0.4.0.linux-
·使用 wget下载 pushgateway
·Pushgateway 安装和使用
amd64.tar.gz
 cd pushgateway-0.4.0.1inux-amd64 
tar -xvzf ~/Download/pushgateway-0.4.0.linux-amd64.tar.gz
cd ~/Prometheus 
0.4.0.linux-amd64.tar.gz 
https://github.com/prometheus/pushgateway/releases/download/vo.4.0/pu
cd ~/Download 
。数据管理
。安装
■Docker 安装
■二进制安装
安装和使用
107
---
## Page 108
本文档使用 书栈(BookStack.CN) 构建
是我们还可以通过API来管理，
正常情况我们会使用ClientSDK 推送数据到
数据管理
我们可以使用 prom/pushgateway 的 Docker 镜像,
我们可以使用./pushgateway-h查看运行选
如何使用 Pushgateway?
Docker 
示启动成功。
 cat <<EOF | curl --data-binary @-
添加更多更复杂数据，通常数据会带上 instance，
置：
Kmazebysnd/woud t606:t60m d- p- unu uaxoop 
 docker pull prom/pushgateway
http: //pushgateway.example.org:9091/metrics/job/some_job
echo "some_metric 3.14" | curl --data-binary @- 
source=main.go:102
INFo[00o0] Listening on :9091.
date=20170609-12:26:14)
INFo[0000] Build context (go=go1.8.3, user=root@87741d1b66a9,
source=main.go:57
INFo[oooo] Starting pushgateway (version=0.4.0, branch=master,
安装
添加单条数据：
source=main.go:58
，例如：
如果看到类似输出，
J pushgateway, 
表示来源位
表
-108-
---
## Page 109
本文档使用书栈(BookStack.CN)构建
据持久化下来。
从而避免收集数据本身的
数据的含义。
因为 Prometheus 配置 pushgateway 的时候,
可以发现 pushgateway 中的数据我们通常按照
如何使用 Pushgateway?
们可以通过 
注意，
需要添加
instance,
 instance
·删除某个组下的某实例的所有数据：
·删除某个组下的所有数据：
3
，为了防止pushgateway重启或意外挂掉，导致数据丢失，我
curl -X DELETE 
EOF
# HELP another_metric Just an example.
# TYPE another_metric gauge 
some_metric{label="val1"} 42
 # TYPE some_metric counter
os/aou11sut/qo0-awos/qo0/s5tzaw/t606:64o:atduexa:<ema7e6ysnd//:dzu
another_metric 2398.283
uos/aoue1sut/qo(-awos/qo1/s5t1zaw/t606:64o atdwexa:<emazebysnd//:d2au
curl -X DELETE 
分组分类，所以这两个参数不可缺少。
honor_labels: true
所以在prometheus中配置pushgateway的时候，
但是它只表示 pushgateway 实例，
-persistence.file
[job
参数，
和
和
 -persistence.interval 
instance
被覆盖。
不能真正表达收集
job和
也会指定 job和
参数将数
109
区
---
## Page 110
本文档使用 书栈(BookStack.CN) 构建
如何使用Pushgatev
---
## Page 111
本文档使用 书栈(BookStack.CN) 构建
数据存储
数据存储
---
## Page 112
本文档使用 书栈(BookStack.CN) 构建
Local Store
LocalStore
---
## Page 113
本文档使用 书栈(BookStack.CN) 构建
Remote Store
Remote Store
---
## Page 114
本文档使用 书栈(BookStack.CN) 构建
告警规则
告警规则
---
## Page 115
本文档使用 书栈(BookStack.CN) 构建
如何配置
如何配置
---
## Page 116
本文档使用 书栈(BookStack.CN) 构建
触发逻辑
触发逻辑
---
## Page 117
本文档使用书栈(BookStack.CN)构建
使用告警服务主要的步骤如下：
在Prometheus中告警分为两部分:
Alertmanager
Alertmanager
Alertmanager
·Alertmanager
·在Prometheus 服务中设置告警规则。
。下载配置 Alertmanager。
·Alertmanager 对收到的告警信息进行处理，包括去重，降噪,
·Prometheus服务根据所设置的告警规则将告警信息发送给
通过设置 
Alertmanager 进行通信。
Alertmanager.
分组，策略路由告警通知。
 -alertmanager.url]
”让 Prometheus 服务与
---
## Page 118
组，策略路由，是一款前卫的告警通知系统。
Alertmanager 主要用于接收 Prometheus 发送的告警信息，
Alertmanager 
Alertmanager 是什么
本文档使用书栈(BookStack.CN)构建
持丰富的告警通知渠道，
Alertmanager 是什么
·Alertmanager 是什么？
Provide
Alt
。安装
Woffiehia
基本配置
Pipeiue
luhisilos
bahthed
Aler
alets
，而且很容易做到告警信息进行去重，降噪，
Sa
4P
是什么
eQ:c
Router
L
-gcoup alets
1
alredy sas?
它支
分
118
---
## Page 119
本文档使用 书栈(BookStack.CN) 构建
配置：
执行命令
基本配置
解压成功后，
amd64.tar.gz
使用
使用
安装
Alertmanager 是什么
3
2
3
3
 global:
alertmanager, version 0.14.0 (branch: HEAD, 
 cd alertmanager-0.14.0.linux-amd64
tar -xvzf ~/Download alertmanager-0.14.0.linux-amd64.tar.gz
cd Prometheus
route:
30af4d051b37ce817ea7e35b56c57a0e2ec9dbb0)
0.14.0.linux-amd64.tar.gz
https://github.com/prometheus/alertmanager/releases/download/v0.14.0/
wget
cd ~/Download
 group_by:
 resolve_timeout: 2h
 build user:
[wget]
go version:
build date:
tar
mv simple. yml alertmanager. yml
，使用
解压缩 alertmanager-0.14.0.linux-
下载按转包
['alertname']
. /alertmanager --version
g01.9.2
20180213-08:16 : 42
root@37b6a49ebba9
并修改
 revision:
来检查是否安装成功
alertmanager.yml
119
口
---
## Page 120
本文档使用书栈(BookStack.CN) 构建
地址。
接收消息，
说明：这里我们使用Alertmanager 的
Alertmanager 是什么
5
切
3
6
8
9
- name: 'webhook
receivers:
webhook_configs:
receiver: 'webhook'
repeat_interval: 1h
group_interval: 10s
group_wait: 5s
 send_resolved: true 
 url: 'http://example.com/xxxx'
当接收到新的告警信息，
它会将消息转发到配置的
webhook_configs 
url 
选项来
120
---
## Page 121
本文档使用 书栈(BookStack.CN) 构建
告警路由配置
降噪
去重
分组
全局配置
配置详情
配置详情
配置详情
·配置详情
告警路由配置
降噪
分组
全局配置
去重
---
## Page 122
本文档使用书栈(BookStack.CN)构建
其中一些关键配置如下：
修改AlertManager 配置文件
Alertmanager 默认端口为 9093。
假设该实验运行在本地机器上，
相关信息说明：
本章将通过一个简单的实验介绍如何通过 Email 接受告警。
通过Email接收告警
通过 Email接收告警
通过 Email 接收告警
·Alertmanager 版本: alertmanager-0.8.0.darwin-
· Prometheus 版本: prometheus-1.7.1.darwin-amd64
·发送告警邮件的邮箱：qq email