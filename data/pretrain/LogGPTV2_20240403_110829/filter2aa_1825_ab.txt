# Table of Contents

1. **Calling Other Drivers** ................................. 237
2. **Putting it All Together: The Melody Driver** ....... 239
3. **Client Code** ................................................ 255
4. **Invoking System Services** ............................. 256
5. **Example: Enumerating Processes** ................... 258
6. **Summary** .................................................... 261
7. **Chapter 9: Process and Thread Notifications** ....... 262
    - **Process Notifications** .............................. 262
    - **Implementing Process Notifications** ............ 265
    - **The DriverEntry Routine** .......................... 269
    - **Handling Process Exit Notifications** ........... 271
    - **Handling Process Create Notifications** ......... 274
    - **Providing Data to User Mode** .................... 277
    - **The User Mode Client** ............................ 280
    - **Thread Notifications** .............................. 283
    - **Image Load Notifications** ........................ 286
    - **Final Client Code** ................................. 293
    - **Remote Thread Detection** ........................ 296
    - **The Detector Client** .............................. 305
    - **Summary** ........................................... 306

# Introduction

Windows kernel programming is often viewed as a complex and esoteric field, accessible only to a select few who can unravel the intricacies of the Windows kernel. However, kernel development is not fundamentally different from user-mode development; both require a deep understanding of the platform to produce high-quality code.

This book serves as a comprehensive guide to programming within the Windows kernel, using the widely recognized Visual Studio integrated development environment (IDE). This familiar environment helps reduce the learning curve, allowing developers to focus on understanding the kernel, coding, and debugging, rather than struggling with the tools.

The book targets software device drivers, which are drivers that do not interact directly with hardware. These software kernel drivers have full access to the kernel, enabling them to perform any operation allowed by the kernel. Some specific types of software drivers, such as file system mini-filters, are also covered in the book.

## Who Should Read This Book

This book is intended for software developers who need to write kernel drivers for the Windows operating system. Common scenarios where kernel drivers are used include cybersecurity, where they are essential for monitoring and intercepting important events. The book uses C and C++ for code examples, with C being the primary language of the kernel API. C++ is used where it provides clear advantages in terms of maintenance, clarity, and resource management. Complex C++ constructs, such as template metaprogramming, are not used.

## What You Should Know to Use This Book

Readers should be proficient in the C programming language, particularly in areas such as pointers, structures, and the standard library, as these are frequently encountered when working with kernel APIs. Basic knowledge of C++ is highly recommended, although it is possible to follow the book with only C proficiency.

## Book Contents

Here is a brief overview of the chapters in the book:

- **Chapter 1: Windows Internals Overview** - Provides a high-level introduction to the internal workings of the Windows OS, covering the fundamentals without delving into too much detail.
- **Chapter 2: Getting Started with Kernel Development** - Describes the tools and procedures needed to set up a development environment for kernel drivers, including creating a simple driver to ensure the setup is correct.
- **Chapter 3: Kernel Programming Basics** - Covers the fundamentals of writing drivers, including basic kernel APIs, string handling, linked lists, dynamic memory allocation, and more.
- **Chapter 4: Driver from Start to Finish** - Demonstrates how to build a complete driver with useful functionality, along with a client application to control it.

If you are new to Windows kernel development, it is recommended to read Chapters 1 through 7 in order. Chapter 8 contains advanced material that can be revisited after gaining some experience. Chapters 9 and beyond cover specialized techniques and can be read in any order.

## Sample Code

All sample code from the book is freely available on the book’s GitHub repository at [https://github.com/zodiacon/windowskernelprogrammingbook2e](https://github.com/zodiacon/windowskernelprogrammingbook2e). Updates to the code samples will be pushed to this repository. It is recommended that readers clone the repository to their local machine for easy experimentation with the code.

All code samples have been compiled with Visual Studio 2019. Most code samples can be compiled with earlier versions of Visual Studio, but there may be a few features from the latest C++ standards that are not supported. These should be relatively easy to fix.

Happy reading!

Pavel Yosifovich  
June 2022

# Chapter 1: Windows Internals Overview

This chapter introduces the most important concepts in the internal workings of Windows. Some topics will be covered in more detail later in the book, where they are closely related to the subject matter. Understanding the concepts in this chapter is crucial, as they form the foundation upon which any driver and even low-level user-mode code are built.

## Topics Covered in This Chapter

- **Processes**
- **Virtual Memory**
- **Threads**
- **System Services**
- **System Architecture**
- **Handles and Objects**

### Processes

A process is a containment and management object that represents a running instance of a program. While the term "process runs" is commonly used, it is inaccurate. Processes manage resources, while threads execute code and technically run. From a high-level perspective, a process includes:

- An executable program containing the initial code and data.
- A private virtual address space for memory allocation.
- An access token (primary token) storing the security context.
- A private handle table for executive objects like events, semaphores, and files.
- One or more threads of execution.

These elements of a process are depicted in Figure 1-1.

#### Figure 1-1: Important Elements of a Process

A process is uniquely identified by its Process ID (PID), which remains unique as long as the kernel process object exists. Once the process is destroyed, the same PID may be reused. It is important to note that the executable file itself is not a unique identifier. For example, multiple instances of `notepad.exe` can run simultaneously, each with its own address space, threads, handle table, and PID.

### Virtual Memory

Every process has its own private, linear address space. This address space starts out empty, except for the executable image and `NtDll.Dll`, and more subsystem DLLs are loaded as the main thread begins execution. The address space is private, meaning other processes cannot access it directly.

The address space range depends on the process and operating system bitness:

- **32-bit processes on 32-bit Windows**: 2 GB by default, or up to 3 GB with the `LARGEADDRESSAWARE` flag.
- **64-bit processes on 64-bit Windows**: 8 TB (Windows 8 and earlier) or 128 TB (Windows 8.1 and later).
- **32-bit processes on 64-bit Windows**: 4 GB if the `LARGEADDRESSAWARE` flag is set, otherwise 2 GB.

Each process's address space is relative, and the memory is called virtual because there is an indirect relationship between an address and its physical location. The memory manager handles the translation from virtual to physical addresses, and if the memory is not resident, it raises a page fault exception to fetch the data from the appropriate file.

#### Figure 1-3: Virtual Memory Mapping

### System Memory

The lower part of the address space is for user-mode processes, while the upper part is reserved for the operating system. The layout of the virtual memory varies based on the system and process bitness:

- **32-bit systems without increased user virtual address space**: The OS resides in the upper 2 GB.
- **32-bit systems with increased user virtual address space**: The OS takes the remaining address space.
- **64-bit systems**: The OS takes the upper 8 TB (Windows 8, Server 2012) or 128 TB (Windows 8.1, Server 2012 R2 and later).

#### Figure 1-4: Virtual Memory Layout

### Threads

Threads are the entities that execute code within a process. Each thread has its own execution context, including:

- Access mode (user or kernel).
- Processor registers and execution state.
- Stacks for local variable allocations and call management.
- Thread Local Storage (TLS) array for thread-private data.
- Base and current priority.
- Processor affinity.

Threads can be in various states, such as running, ready, or waiting. The state diagram for these states is shown in Figure 1-5.

#### Figure 1-5: Common Thread States

### Thread Stacks

Each thread has at least one stack in system (kernel) space, and a user-mode thread has a second, larger stack in the process's user-space address range. The kernel stack always resides in RAM, while the user-mode stack may be paged out. The user-mode stack grows as needed, using guard pages to commit additional memory when required.

#### Figure 1-6: User-Mode Threads and Their Stacks

#### Figure 1-7: Thread’s Stack in User Space

### System Services (a.k.a. System Calls)

Applications need to perform operations that require kernel-mode code, such as memory allocation, file operations, and thread creation. These operations are performed through system calls. For example, when a user opens a file in Notepad, the `CreateFile` function in `kernel32.Dll` calls `NtCreateFile` in `NTDLL.dll`, which transitions to kernel mode using a system service number and a special CPU instruction (`syscall` on x64 or `sysenter` on x86).

#### Figure 1-8: System Call Mechanism

Understanding these concepts is essential for developing robust and efficient kernel drivers.