标签以及裁剪后的基础检测数据
![](media/image58.png){width="5.763888888888889in"
height="0.22148293963254592in"}
2、基础检测数据进行训练前，可通过训练配置加入正则表达，更好去适配基础数据关键内容，训练后会根据适配的内容生成参数，可用于参数检测，实现灵活的数据训练配置功能。
![](media/image59.png){width="5.763888888888889in"
height="2.965333552055993in"}
图 30 配置数据
3、通过周期性的检测过程中，以模型为基础，识别检测数据的模式以及参数，如果检测数据符合模式库的异常模式或者不匹配模式库中的任何模式会进行告警。
另外检测数据如果匹配上模式库中模式，会识别模式中配置的参数，如果参数不在白名单，也会进行告警。
通过检测，实现异常模式快速发现，异常参数识别，以及异常数据告警的功能。
![](media/image60.png){width="5.763888888888889in"
height="0.7715277777777778in"}
图 31 检测结果
### **落地效果**
#### 应用日志异常检测
> CRM日志每天会产生大量的报错，当中一些报错不涉及故障，日志检测可以在茫茫多的报错里面，利用日志异常模式识别以及异常参数识别功能，提高运维人员对于问题的发现能力。
-   异常模式识别
检测出新的未知模式，通过判断，可以把该模式定义成正常以及异常，异常模式如果在下一次检测发现，也会进行告警。
异常模式识别功能，识别出未知模式，通过样例判断为sql配置错误。
![](media/image61.png){width="5.763888888888889in"
height="0.6337609361329833in"}
图 32 异常模式识别
异常模式识别功能，识别出异常模式，通过样例判断为空指针错误。
![](media/image62.png){width="5.763888888888889in"
height="0.6277569991251094in"}
-   **异常参数识别**
异常参数识别功能，识别出参数异常，通过样例发现是进程的无效连接错误。
![](media/image63.png){width="5.763888888888889in"
height="1.9339720034995627in"}
图 33 异常参数识别
####  容器日志异常检测
容器日志在场景推进过程中，发现都是存在系统日志/var/log/messages中，数据量较少且日志格式较固定。相比与应用日志的数据量多，报错多，更能体现异常模式识别功能。
异常模式识别功能，识别出异常模式，通过样例判定为容器状态错误。
![](media/image60.png){width="5.763888888888889in"
height="0.7718536745406824in"}
![C:\\Users\\ADMINI\~1\\AppData\\Local\\Temp\\1614742444(1).png](media/image64.png){width="5.763888888888889in"
height="0.46319444444444446in"}
图 34 容器日志异常检测结果
##  网络设备异常检测
1.  **应用背景**
随着IT技术的不断发展，网络系统架构越来越复杂。复杂网络下，网络性能是体现网络质量的关键因素，当前网络指标异常检测手段仍根据运维人员经验为监控点配置固定阈值。基于固定阈值的告警模式，不能适应动态变化的网络设备工作环境，在实际运维中存在阈值设置不合理而引起的无效告警多和漏告警的问题。此外，由于各省各业务系统网络流量不同，如果采用个性化阈值来进行配置，运维工作量大，且阈值配置几乎以经验为主，准确性不高。
网络设备异常检测是通过机器学习对接入的网络设备时序指标的大量历史数据进行模型训练，自动预测未来的变化周期和趋势，并根据算法自动计算和输出准确性更高的阈值区间，最后通过实时性能异常检测来检测时序指标的当前性能数据是否存在异常,如存在异常，则根据比较结果生成相应级别的告警。
2.  **实现方案**
基于清洗模型以及数据工厂，对大量历史网络设备数据进行数据处理，形成网络设备核心指标。根据指标数据特征自动选择合适的异常检测算法和参数，从历史性能数据中学习数据特征训练生成指标模型。应用训练成功的指标检测模型，对时序指标数据进行实时检测，检测结果经过二次算法分析及时发现指标异常情况并产生告警。
![](media/image65.png){width="5.768055555555556in"
height="1.6604166666666667in"}
图 35 实现流程图
实时采集网络设备oid数据，在完成数据清洗补全后，通过基线判断等算法判别指标数据类型并自动选择对应的算法、参数；然后通过模型训练产生检测模型，最后通过实时接入检测数据，判别实时数据是否异常。对异常检测结果进行标注，不断迭代检测模型。
![智能运维概念图-04.jpg](media/image66.jpeg){width="5.684027777777778in"
height="1.1472222222222221in"}
图 36 基于分布对比的KDE算法
![智能运维概念图-03.jpg](media/image67.jpeg){width="4.866666666666666in"
height="2.407638888888889in"}
图 37 基于决策树的孤立IsolationFotest算法
![智能运维概念图-02.jpg](media/image68.jpeg){width="5.168055555555555in"
height="1.8729166666666666in"}
图 38 基于图像识别的VAE算法实现流程图
3.  **主要功能**
```{=html}
```
1.  通过机器学习算法实现指标异常检测。区别于传统固定规则或人工配置式指标类异常检测方式，本场景引入全过程无人工干预的机器学习算法对进程指标进行训练，使用训练生成的模型对进程指标进行故障异常检测。将数据采集后自动清洗、自动训练、智能算法选择，并周期性自动训练算法以及自动评估算法准确性，实现全自动化机器学习算法故障检测、算法检测能力迭代。
2.  故障检测下沉到性能和业务指标级别。传统的监控方式只在设备出现故障后对报出来的日志进行分析，本场景通过细致到设备各个端口的不同指标，利用机器学习算法故障检测下沉到性能和业务指标级别，可以提升运维的精细化程度，针对每台设备的故障进行快速定位和处理，缩短运维排障时间。
3.  通过线箱图模型进行告警过滤。部分AI算法检测需要长周期学习和训练，不断迭代算法检测能力，训练过程中的告警可能敏感度较高，因此将AI告警结合箱线图模型进行二次分析后过滤。将异常值设定为实际值，获取AI模型训练结果的上下界值，并在上下界值的基础上通过可容忍系数设定可容忍区间。当实际值向上超出时，通过溢出模型对告警进行定级，每超出AI上界值0.5倍，异常等级上升一级；当实际值向下超出时，通过缩减模型对告警进行定级，每超出AI下界值0.2倍，异常等级上升一级。支持告警最高等级为4级，超出倍数可通过配置按需调整。
####  CPU使用率指标
##### 数据要求
-   数据采集要求
接入方需要提供以下指标（二选一）供采集：
1、网络设备CPU使用率；
2、网络设备CPU使用值、CPU总值。
-   数据特征要求
接入方需要提供指标周期特征（四选一）供训练参考：
1、指标按天进行周期波动；
2、指标按周进行周期波动；
3、指标按月进行周期波动；
4、指标无规律波动。
##### **算法**
-   算法描述
1.  KDE
> Kernel density
> estimation(KDE)：适用于业务具有不同阶段的周期指标，但是不同阶段内特征无规律或具有突变（比如固定时间的活动办理，固定时间的业务办理情况）
![](media/image69.png){width="4.949305555555555in"
height="1.6229166666666666in"}
2.  Data Cluster
适用于复杂的，受日期影响波动较大的数据，特别是工作日与周末，月初月末与月中，平时与特殊日期差异很大的数据。（如集群负载场景下的集群维度的业务量月初月尾特征，能够非常好的拟合）
-   算法优势
目前大部分算法对于不同场景下的不同数据特征数据都有比较强的拟合度，如MA算法，在对于内存使用率，错误数，负载占比等抖动小，且长期稳定在某个值的数据，训练的模型能够有较好的检测效果，KDE算法，能够适应如单进程业务量数据，具有周期性，但是在月初月尾特征变化不明显，算法会充分考虑历史数据，训练出比较切合该数据规律的模型。Data
cluster算法，也是针对实验数据的业务特征，对KDE算法的升级版本，能够对业务场景下，月初月尾的变化特征，对月初月尾进行聚类处理，从而在检测中考虑月初月尾的数据波动，减少误报。
-   模型训练
1)  迭代周期
模型可周期性自动进行迭代训练。在迭代训练时，上一次训练所用到的数据也会参与当次训练，但由于它们离当前时刻较远，会在训练中被赋予较低的权重。同时，由于模型的训练模式和测试灵敏度等配置会影响迭代训练的模型之间性能的比较，迭代训练时会使用前一模型同样的配置进行训练，并计算几个模型评价指标进行比较。由于异常点的识别受到灵敏度的影响，故前一模型识别出的异常点仍会参与下一轮迭代训练。训练方式如下：
1、指标尚无模型且满足最低要求10080点，会自动进行训练，训练的算法以及参数会识别训练数据进行选择。