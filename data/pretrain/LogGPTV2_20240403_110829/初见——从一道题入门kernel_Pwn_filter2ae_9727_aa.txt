# 初见——从一道题入门kernel Pwn
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
初次做内核相关的题目，也算是为内核学习铺一铺路了，从一个新手的角度来看这道内核题目，简单介绍一下新手眼中的 kernel pwn
## 一、环境搭建
环境搭建始终都是绕不开的话题，其实题目环境相对于依赖较多的内核模块调试来说已经是一个很理想的环境了，但是这里还是要稍微补充一点点小 trick。
###  1\. 获取调试信息
题目中的 shell 权限通常来说都是低权限账户，当然要是直接是高权限账户也没必要来提权了，此时就会有两个问题
  * `cat /proc/kallsyms` 低权限下拿不到具体的内核地址
  * `cat /sys/module/[module name]/sections/.text` 低权限无法获取
说到底还是低权限的问题，此时来看仿佛遇到了死锁，题目肯定不会给你高权限shell，没有高权限shell就无法 cat 出对应的信息来进行调试。  
解决办法其实就在 `init` 文件中，通常情况下题目都是自己编写的 kernel +
filesystem，因此需要有一个将题目ko文件自动加载起来的方式，也就是 `init` 文件。  
这里简单介绍一下`init`文件正常的用途：是在自己编译完毕 kernel 后，打包好一个包含 busybox 的小型文件系统，在该文件系统中通过
`init` 文件来 mount 一些基本的目录。  
题目中的则是用来 insmod 题目文件了，insmod 是需要高权限才能执行成功的，因此，我们可以在 `init` 文件中 insmod
行之后添加如下两行内容：
    cat /proc/kallsyms > /tmp/kallsyms
    cat /sys/module/sudrv/sections/.text > /tmp/sudrv
即可在题目启动后获取对应的信息来进行调试了。
## 二、知识点介绍
这道题目主要是抱着学习的态度来看的，因此在自己做之前就已经看了好几个不同师傅的wp，从wp中可以提炼出来这道题的知识点主要有以下几个
  * 内核ROP
  * cred提权
  * 内核堆结构
  * 用户态与内核态切换
下面分别对这些知识点进行一下介绍
###  1\. 内核ROP
该技术主要针对的是 SMEP 技术，即管理模式执行保护，主要作用是禁止内核直接访问用户空间的数据以及内核执行用户空间的代码，SMEP 针对的是
ret2user 的攻击手段（可谓道高一尺魔高一丈，每当一个保护机制的产生总会有绕过手段的出现啊）  
检查 SEMP 开启的方法有两个：
  * `cat /proc/cpuinfo | grep semp`
  * 查看 qemu 启动脚本，包含如下内容即开启了 semp `-cpu kvm64,+smep`
内核ROP原理上同普通ROP比较接近，区别在于传参方式的不同，内核中传参通过寄存器而不是栈。  
提权 rop 链结构如下：
    |----------------------|
    | pop rdi; ret         |<== low mem
    |----------------------|
    | NULL                 |
    |----------------------|
    | addr of              |
    | prepare_kernel_cred()|
    |----------------------|
    | mov rdi, rax; ret    |
    |----------------------|
    | addr of              |
    | commit_creds()       |<== high mem
    |----------------------|
实际执行的内容是 `commit_creds(prepare_kernel_cred(0))`，在内核中执行完毕上述代码后再用户层直接执行
`system("/bin/sh")` 即可获取 root shell。  
寻找 rop gadget 可以从 vmlinux 中获取，可用工具有 ROPgadget 或 ropper 等 。
###  2\. cred 提权原理
**(1). cred简介**
在介绍提权原理之前，首先要知道 cred 究竟是什么东西。  
每个线程在内核中都有一个描述该线程的 `thread_info` 结构，在 `thread_info` 中包含一个名为 `task_struct`
的结构体，这个结构体中就包含有今天的主角 `cred` 结构体，`cred` 结构体中主要用来保存线程的权限信息。  
`task_struct` 定义于 `include/linux/sched.h` 文件中
    struct task_struct {
       ...
       ...
           /* Process credentials: */
        /* Tracer's credentials at attach: */
        const struct cred __rcu        *ptracer_cred;
        /* Objective and real subjective task credentials (COW): */
        const struct cred __rcu        *real_cred;
        /* Effective (overridable) subjective task credentials (COW): */
        const struct cred __rcu        *cred;
      ...
      ...
    }
整个 `task_struct` 定义足有700多行，这里仅截取和 `cred` 相关的定义，`cred` 结构体的定义如下
    /include/linux/cred.h
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC    0x43736564
    #define CRED_MAGIC_DEAD    0x44656144
    #endif
        kuid_t        uid;        /* real UID of the task */
        kgid_t        gid;        /* real GID of the task */
        kuid_t        suid;        /* saved UID of the task */
        kgid_t        sgid;        /* saved GID of the task */
        kuid_t        euid;        /* effective UID of the task */
        kgid_t        egid;        /* effective GID of the task */
        kuid_t        fsuid;        /* UID for VFS ops */
        kgid_t        fsgid;        /* GID for VFS ops */
        unsigned    securebits;    /* SUID-less security management */
        kernel_cap_t    cap_inheritable; /* caps our children can inherit */
        kernel_cap_t    cap_permitted;    /* caps we're permitted */
        kernel_cap_t    cap_effective;    /* caps we can actually use */
        kernel_cap_t    cap_bset;    /* capability bounding set */
        kernel_cap_t    cap_ambient;    /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char    jit_keyring;    /* default keyring to attach requested
                         * keys to */
        struct key    *session_keyring; /* keyring inherited over fork */
        struct key    *process_keyring; /* keyring private to this process */
        struct key    *thread_keyring; /* keyring private to this thread */
        struct key    *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;    /* subjective LSM security */
    #endif
        struct user_struct *user;    /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */