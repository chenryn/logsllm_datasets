Certainly! Here is the optimized version of your text, which aims to improve clarity, coherence, and professionalism:

---

A high number of false positives can complicate the fuzzing process, as analysts must manually filter out these false results. Table 2 lists the 25 bugs we discovered in the camera and GPU drivers (no bugs were found in other drivers). The table also indicates that we confirmed the validity of these bugs through various methods, including developing a Proof of Concept (PoC), checking against the latest driver commits, and manual inspection.

**Figure 3:**
- (a) Execution speed of the fuzzer.
- (b) Coverage of the fuzzer.

The fuzzer's performance slightly surpasses that of the HVM. We attribute this to the high level of concurrency in the HVM experiment, which negatively impacts its performance. Additionally, the results show that both MVM and HVM outperform the phoneâ€™s performance. This is significant because it demonstrates that Charm's remote device driver execution does not degrade the driver's performance, making it suitable for various analysis tasks.

**Figure 3(b)** also illustrates the code coverage of the fuzzing experiments. It compares the coverage for the camera device driver and the rest of the kernel. The results indicate that Charm achieves similar code coverage in the driver as direct fuzzing on the smartphone. However, the coverage in the rest of the kernel differs between Charm and the smartphone, due to the different kernel versions (x86 vs. ARM).

In the second experiment, we chose a benchmark that significantly stresses Charm: the initialization of the camera driver in Nexus 5X. This phase involves reading a large amount of data from an EEPROM chip used to store camera filters, resulting in approximately 8800 remote I/O operations. The driver's initialization time was measured at 555 ms on the smartphone and 1760 ms in MVM. This indicates that I/O-heavy benchmarks can slow down the driver's performance in Charm. However, we do not expect this to be a significant issue for many dynamic analysis tools, including fuzzing, as previously demonstrated.

**Table 2: Bugs Found in Device Drivers Through Fuzzing with Charm**

| Bug ID | Driver   | Bug Type                                   | Confirmed? (How?)  |
|--------|----------|--------------------------------------------|--------------------|
| 1      | Camera   | Out-of-bounds memory access (KASAN)        | Yes (PoC, LC)      |
| 2      | Camera   | Unaligned register access                  | Yes (LC)           |
| 3-24   | Camera   | Various NULL pointer dereferences          | Yes (PoC, LC, MI)  |
| 25     | GPU      | Explicit BUG() statement                   | Yes (MI)           |

**Legend:**
- **MI**: Manual Inspection
- **LC**: Latest Commits

We also ported the camera driver to a KASAN-enabled virtual machine, which detected one out-of-bounds bug and one use-after-free bug (bugs #1 and #13 in Table 2). This highlights an advantage of Charm, as it not only facilitates fuzzing but also enables newer fuzzer features not supported in the mobile system's kernel.

Our analysis categorized the bugs into seven types: unaligned access to I/O device registers, NULL pointer dereferences, invalid pointer dereferences, use-after-free, out-of-bounds access, divide-by-zero, and explicit BUG() statements in the driver.

Fuzzing with Charm uncovered 14 previously unknown bugs. We developed PoCs for many of these bugs and reported nine of them to kernel developers. The developers acknowledged our reports, assigned a P2-level severity, and are currently analyzing several of them. They have closed two of our reports (bugs #13 and #22) and determined that one (bug #2) is not a security issue.

Three of our PoCs did not trigger the same bugs in the mobile system. For example, bug #14 relies on certain prior device driver system calls not being issued, which are automatically issued at boot time on the mobile system, preventing the bug from being triggered. In Charm, however, we do not execute the user space camera service, allowing us to find such bugs. Users can choose whether to initialize the user space camera service in Charm, which would prevent the fuzzer from triggering such bugs. Similar issues were observed for bugs #23 and #24.

These results demonstrate that Charm can effectively find correct bugs in device drivers through fuzzing. However, false positives may occur due to x86 compiler bugs or incomplete driver ports. Additionally, false negatives are possible due to ARM compiler bugs or differences in execution characteristics in a virtual machine, such as timing. Consequently, some real bugs, particularly timing-sensitive ones, may not be detected using Charm.

**Figure 4: Vulnerable Code Snippets**

- (a) Vulnerable code snippet of CVE-2016-3903
- (b) Vulnerable code snippet of CVE-2016-2501
- (c) Vulnerable code snippet of CVE-2016-2061

Charm also enables the use of GDB for analyzing vulnerabilities in device drivers. To illustrate this, we analyzed three publicly reported vulnerabilities in the Nexus 5X.

---

This version should be more structured and easier to follow.