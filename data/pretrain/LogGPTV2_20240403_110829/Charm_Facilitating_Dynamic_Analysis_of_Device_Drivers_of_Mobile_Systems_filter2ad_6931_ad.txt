would result in a large number of false positives, which
can make the fuzzing more difﬁcult for the analyst as s/he
will have to ﬁlter out these false positives manually.
Table 2 shows the list of 25 bugs that we have found
in the camera and GPU drivers (we did not ﬁnd any
bugs in the other drivers). The table also shows that we
conﬁrmed the correctness of these bugs through various
methods (i.e., developing a PoC, checking against the lat-
est driver commits, and manual inspection). We use PoC
development and manual inspection to conﬁrm the bugs
(a)
(b)
Figure 3: (a) Execution speed of the fuzzer. (b) Coverage
of the fuzzer.
programs. It also slightly outperforms the HVM. We be-
lieve that this is due to the high level of concurrency in
the HVM experiment, which negatively impacts the per-
formance. Finally, the results also show that MVM and
HVM slightly outperform the phone’s performance. This
result is important: it shows that Charm’s remote device
driver execution does not negatively impact the perfor-
mance of the driver and hence the driver can be used for
various analysis purposes.
Figure 3b also shows the code coverage of the fuzzing
experiments. It shows the coverage for the camera de-
vice driver and the rest of the kernel. The results show
that Charm achieves similar code coverage in the driver
compared to fuzzing directly on the smartphone. Note
that the results show that the coverage in the rest of the
kernel is different in Charm and in the smartphone. This
is because the kernel in these two setups are different.
While they are close in version, one is for x86 and one is
for ARM and hence the coverage in the rest of the kernel
cannot be directly compared in these setups.
In the second experiment, we choose a benchmark
that signiﬁcantly stresses Charm:
the initialization of
the camera driver in Nexus 5X. This initialization phase,
among others, reads a large amount of data from an
EEPROM chip used to store camera ﬁlters and causes
many remote I/O operations (about 8800). We measure
the driver’s initialization time on the smartphone and in
MVM to be 555 ms and 1760 ms, respectively. This
shows that I/O-heavy benchmarks can slow down the
performance of the driver in Charm. Yet, we do not antic-
ipate this to be the case for many dynamic analysis tools
that we target for Charm, including fuzzing (as seen pre-
viously).
300    27th USENIX Security Symposium
USENIX Association
 0 200 400 600 800 1000 1200 1400LVMMVMHVMPhone# fuzzer programs / fuzz time (min) 0 20 40 60 80 100 120 140LVMMVMHVMPhoneCoverage (# basic blocks) / fuzz time (min)Camera driverRest of the kernelthat we detect in the latest version of the drivers (many
of which we have reported). However, in addition to the
latest version of the drivers, we also fuzz slightly older
versions of them (i.e., not the latest publicly available
commit of the driver). This allows us to check the bugs
detected by Syzkaller against the latest patches and con-
ﬁrm their validity. We label the bugs conﬁrmed using this
method as LC in Table 2. More speciﬁcally, by looking
at the latest version of the driver, we can ﬁnd a patch for
the bug, which conﬁrms its validity. We ﬁnd the correct
patch using its commit message as well as the location in
the code to which the patch is applied to.
We also port the camera driver to a KASAN-enabled
virtual machine for fuzzing with this sanitizer. KASAN
detected one out-of-bounds bug and one use-after-free
bug in the camera driver (bug #1 and bug #13 in Table 2).
This shows an advantage of Charm. Not only it facilitates
fuzzing, it enables newer features of the fuzzer that is not
currently supported in the kernel of the mobile system.
Our analysis showed that these bugs belong to 7 cate-
gories: one unaligned access to I/O device registers, 19
NULL pointer dereferences, one invalid pointer derefer-
ence, one use-after-free, one out-of-bounds access, one
divide-by-zero, and one explicit BUG() statement in the
driver.
Fuzzing with Charm uncovered 14 previously un-
known bugs. We have managed to develop PoCs for
many of these bugs and reported nine of them to kernel
developers already. The developers have acknowledged
our reports, assigned a P2-level severity [6] to them, and
are analyzing several of them at the time of this writing.
They have already closed our reports for two of the bugs
for which we did not have a PoC (bugs #13 and #22) and
for one that they believe is not a security bug (bug #2).
Note that 3 of our PoCs do not trigger the same bug
in the mobile system itself. We investigated the reasons
behind this. For bug #14, the PoC rely on some prior
device driver’s system calls not being issued. On the mo-
bile system, the user space camera service issues these
system calls at boot time hence preventing the bug to be
triggered afterwards. In Charm, however, we do not ex-
ecute the user space camera service, allowing us to ﬁnd
the bug. We leave this to the user of the system to decide
whether s/he wants to initialize the user space camera
service in Charm, in which case such bugs would not be
triggered by the fuzzer. We also studied a similar issue
for bugs #23 and #24, which are also triggered in Charm
(but not in the mobile system) for a similar reason.
We believe that these results demonstrate that Charm
can be used to effectively ﬁnd correct bugs in device
drivers through fuzzing. However, note that false posi-
tives are possible either as a result of x86 compiler bugs
or an incomplete driver port. For example, as mentioned
in §5, we have not supported the DMA functionalities of
Device
driver
Camera
Camera
Camera
Bug type
Out-of-bounds memory access in
msm actuator parse i2c params
(Detected by KASAN)
Unaligned reg access in
msm isp send hw cmd() (Reported
to kernel developers)
NULL ptr deref. in
msm actuator subdev ioctl()
Camera
NULL ptr deref. in msm ﬂash init()
NULL ptr deref. in
msm actuator parse i2c param()
NULL ptr deref. in
msm vfe44 get irq mask()
NULL ptr deref. in msm csid irq()
Invalid ptr deref. in cpp close node()
NULL ptr deref. in
msm ispif io dump reg()
NULL ptr deref. in
msm vfe44 process halt irq()
NULL ptr deref. in msm csiphy irq()
NULL ptr deref. in msm csid probe()
Use-after-free in
msm isp cfg axi stream (Detected by
KASAN) (Reported to kernel
developers)
NULL ptr deref. in
msm private ioctl() (Reported to
kernel developers)
NULL ptr deref. in
msm ispif io dump reg() (Reported
to kernel developers)
NULL ptr deref. in
msm vfe44 axi reload wm()
(Reported to kernel developers)
NULL ptr deref. in
msm vfe44 axi ub() (Reported to
kernel developers)
NULL ptr deref. in
msm vfe44 stats cfg ub() (Reported
to kernel developers)
NULL ptr deref. in
msm vfe44 reset hardware()
(Reported to kernel developers)
NULL ptr deref. in
msm vfe44 stats clear wm irq mask()
(Reported to kernel developers)
NULL ptr deref. in
msm vfe44 reg update() (Reported
to kernel developers)
Divide-by-zero in
msm isp calculate bandwidth()
(Reported to kernel developers)
NULL ptr deref. in
kgsl cmdbatch create()
NULL ptr deref. in
kgsl cmdbatch destroy()
kernel BUG() triggered in
adreno drawctxt detach()
1
2
3
4
5
6
7
8
9
10
11
12
13
Camera
Camera
Camera
Camera
Camera
Camera
Camera
Camera
Camera
14
Camera
15
Camera
16
Camera
17
Camera
18
Camera
19
Camera
20
Camera
21
Camera
22
23
24
25
Camera
GPU
GPU
GPU
Conﬁrmed?
(How?)
Yes (LC)
Yes (PoC)
Yes (PoC,
LC)
Yes (PoC,
LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (LC)
Yes (MI)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (PoC)
Yes (MI)
Yes (PoC)
Yes (PoC)
Yes(MI)
Table 2: Bugs we found in device drivers through fuzzing
with Charm. MI and LC refer to conﬁrming the bug by
Manual Inspection and by checking the driver’s Latest
Commits, respectively.
USENIX Association
27th USENIX Security Symposium    301
/* in msm_csid_cmd(): */
1 for (i = 0; i = 0; i--)
kfree(csid_params.lut_params.vc_cfg[i]);
rc = -EFAULT;
break;
}
csid_params.lut_params.vc_cfg[i] = vc_cfg;
3
4
5
6
7
8
9 }
...
10 rc = msm_csid_config(csid_dev, &csid_params);
1 int16_t step_index = 0;
2 uint16_t step_boundary = 0;
...
3 for (; step_index step_position_table[step_index] = cur_code;
4
5
...
6 }
(b) Vulnerable code snippet of CVE-2016-2501
1 int i = stream_cfg_cmd->stream_src;
2 if (i >= VFE_AXI_SRC_MAX) {
...
return -EINVAL;
3
4 }
...
/* in msm_csid_cid_lut(): */
...
5 memset(&axi_data->stream_info[i], 0, sizeof(struct
msm_vfe_axi_stream));
11 if (csid_lut_params->vc_cfg[i]->cid >=
...
csid_lut_params->num_cid ||
csid_lut_params->vc_cfg[i]->cid stream_info[i].session_id =
stream_cfg_cmd->session_id;
7 axi_data->stream_info[i].stream_id =
stream_cfg_cmd->stream_id;
(a) Vulnerable code snippet of CVE-2016-3903
(c) Vulnerable code snippet of CVE-2016-2061
Figure 4: Vulnerable code snippets.
the GPU driver. This can result in false positives. In ad-
dition, false negative bugs are possible either for ARM
compiler bugs or due to execution in a virtual machine,
which might affect some characteristics of driver execu-
tion, such as timing. As a result, there might be real bugs
(e.g., timing sensitive bugs), which we did not ﬁnd using
Charm.
6.5 Analyzing Vulnerabilities with GDB
Charm enables us to use GDB to analyze vulnerabilities
in device drivers. To demonstrate this, we have analyzed
three publicly reported vulnerabilities in the Nexus 5X