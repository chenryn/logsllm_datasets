SPARC/Solaris,  x86/Linux,  and  MIPS/IRIX.  More
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
importantly,  Strata’s  portability  means  that  software
implemented  using  Strata’s  extensibility  features  is
readily available on a wide range of target architectures
and operating systems.
To achieve these goals, the Strata virtual machine is
implemented  as  a  set  of  target-independent  common
services, a set of target-specific functions, and a recon-
figurable  target  interface  through  which  the  machine-
independent and machine-dependent components com-
municate (see Figure 1b). Implementing a new software
dynamic translator often requires only  a small amount
of  coding  and  a  simple  reconfiguration  of  the  target
interface.  Even  when  the  implementation  is  more
involved, e.g., when retargeting the VM to a new plat-
form,  the  programmer  is  only  obligated  to  implement
the target-specific functions required by the target inter-
face;  common  services  should  never  have  to  be  reim-
plemented or modified.
Strata consists of 5000 lines of C code, roughly half
of which is target-specific. In Figure 1b, shaded boxes
show  the  Strata  common  services  which  comprise  the
remaining half of the Strata source. The Strata common
services  are  target-independent  and  implement  func-
tions  that  may  be  useful  in  a  variety  of  Strata-based
dynamic translators. Features such as context manage-
ment, memory management, and the Strata virtual CPU
will  most  likely  be  required  by  any  Strata-based
dynamic  translator.  The  cache  manager  and  the  linker
can be used to improve the performance of Strata-based
dynamic  translators,  and  are  detailed  in  other  work
[19].
4. Strata and Safe Virtual Execution
In  Section 2  we  sketched  one example  that  demon-
strates  the process  one can  use  to  write  a  Strata-based
safe  virtual  execution  system,  specifically,  a  stack-
smashing  inhibitor.  In  this  section  we  use  Strata  to
implement a system call interposition layer. This inter-
position layer, like all Strata-based applications, is user-
level  software  and  requires  no  kernel  modifications.
Our  Strata-based  system  call  interposition  layer  also
obviates the need for special operating system services
for interception or redirection of system calls. As a con-
sequence,  our  system  call  interposition  layer  is  more
flexible and portable than many existing systems. 
SDT’s  ability  to  control  and  dynamically  modify  a
running  program  provides  an  ideal  mechanism  for
implementing  a  system  call  interposition  layer.  As  the
untrusted  binary  is  virtualized  and  executed  by  Strata,
code  is  dynamically  inserted  to  intercept  system  calls
and  potentially  redirect  those  calls  to  user  supplied
functions. In general though, this process does not need
to be limited to system calls; all access to host CPU and
operating system resources are explicitly controlled by
Strata (see Figure 2).
Untrusted
Binary
Host CPU
Strata SVE Application
Host CPU and OS
Services
Figure 2: Strata 
In this paper, we will use terms and phrases that are
typically employed when discussing the Unix operating
system (e.g., “becoming root”, “exec’ing a shell”, “per-
forming  a  setuid(0)”,  etc.).  The  actions  indicated  by
these terms have analogs in other major operating sys-
tems (e.g., Windows NT, Windows 2000, Window XP,
VxWorks,  and  PSOSystem)  and  the  approaches  we
describe would apply equally well to applications run-
ning on these systems.
A  simple,  but  realistic  example  illustrates  our
approach.  Suppose  a  user  wishes  to  enforce  a  policy
that prohibits untrusted applications from reading a file
that the user normally has permission to read. Let’s call
this file /etc/passwd (registry.dat, SAM, or sys-
tem might be equally good choices). Now assume that
the user receives an untrusted binary called funny and
wishes  to  run  it.  The  user  invokes  funny  using  the
Strata  loader. The  Strata  loader locates  the  entry point
of the application and inserts a call to the Strata startup
routine.  When  the  loader  begins  the  execution  of  the
application, the call to the Strata startup routine leads to
the dynamic loading and invocation of Strata.
As Strata processes funny’s text segment and builds
fragments  to  be  executed,  it  locates  open  system  calls
and replaces them with code that invokes the execution
steering  policy  code.  When  the  fragment  code  is  exe-
cuted,  all  open  system  calls  are  diverted  to  the  policy
code.  It  is  the  policy  code’s  job  to  examine  the  argu-
ments to the original open system call. If the untrusted
application  is  attempting  to  open  /etc/passwd,  an
error message is issued and the execution of the appli-
cation  is  terminated.  If  the  file  being  opened  is  not  /
etc/passwd,  the  security  policy  code  performs  the
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
open  request,  returns  the  result,  and  execution  contin-
ues normally (albeit under the control of Strata).
20.
21. int main(int argc, char *argv[]) {
22.
FILE *f;
4.1. A System Call Interposition API
We support system call interposition through an API
implemented  by  overriding  Strata’s  base  functionality.
The  API  is  a  simple,  efficient  mechanism  that  allows
the user to specify which operating system calls are to
be  monitored  and  the  code  to  execute  every  time  the
operating  system  call  is  invoked.  Strata’s  execution
steering API consists of four functions. They are:
void init_syscall();
watch_syscall(unsigned num, void *callback);
void strata_policy_begin(unsigned num);
void strata_policy_end(unsigned num);
The first function is called on the initial entry to Strata.
The implementation  of this  function  will  contain  calls
to the second API function watch_syscall(). Func-
tion watch_syscall() specifies an operating system
call to watch (i.e., num) and the redirected system call to
execute when that OS call is invoked (i.e., callback).
The signature of callback should match the signature
of  the  operating  system  call  being  watched.  The  final
two API functions are used to bracket redirected system
call code. The need for the bracketing functions will be
explained shortly when we describe how Strata dynam-
ically injects code into the application.
To illustrate the implementation of Strata’s security
API, we show the Strata security policy for preventing
an  untrusted  application  from  reading  /etc/passwd.
Following the style used on hacker websites to demon-
strate  the  exploitation  of  security  vulnerabilities,  we
give  a small  demonstration  program  that  exercises  the
policy. The demonstration code is given in Listing 1.
1. #include 
2. #include 
3. #include 
4. #include 
5. int myopen (const char *path, int oflag) {
6.
7.
char absfilename[1024];
int fd;
8.
9.
10.
11.
12.
13.
14.
strata_policy_begin(SYS_open);
makepath_absolute(absfilename,path,1024);
if (strcmp(absfilename,"/etc/passwd") == 0) {
strata_fatal("Naughty, naughty!");
}
fd = syscall(SYS_open, path, oflag);
strata_policy_end(SYS_open);
return fd;
15.
16. }
17. void init_syscall() {
18.
19. }
Listing 1: Code for preventing a file from being 
(*TI.watch_syscall)(SYS_open, myopen);
opened.
23.
24.
25.
26.
27.
if (argc 
2. #include 
3. #include 
4. #include 
5. #include 
6. static int curuid = -1;
7. int mysetuid (int uid) {
8.
9.
10.
11.
12. }
strata_policy_begin(SYS_setuid);
curuid = syscall(SYS_setuid, uid);
strata_policy_end(SYS_setuid);