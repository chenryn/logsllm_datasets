𝑝 and return the pre-
To show that Scheme 1 supports split signing let:
𝑝 and sends it together with (Sig1
𝑝, set (stsecr, stpub) = (𝑘, (𝑔𝑘
, i.e., it can send 𝑔𝑢
, 𝑤),
1 , 𝑔𝑘
, 𝑈 𝑤
SFPK
SFPK
.
SFPK
SFPK
It is easy to see that the only difference between SFPK.Sign and
the combination (SFPK.Sign1, SFPK.Sign2, SFPK.Sign3) is the way
Sig2
are computed. However, since 𝑟 is chosen at
random in SFPK.Sign2 and 𝑈 𝑤
2 are distributed
identical to the output of SFPK.Sign. The main difficulty is to show
that unforgeability holds in the sense as defined in Definition 3.1.
1 and 𝑈 𝑤
and Sig3
1 = 𝑔𝑟
2 = 𝑔𝑟
SFPK
SFPK
Theorem 3.2 (Unforgeability). Scheme 1 is an unforgeable
SFPK scheme with split signing in the random oracle model assuming
the bilinear decisional Diffie-Hellman assumption.
Proof. The proofs follows a similar strategy to the proof in [2],
but with small changes due to split signing. For completeness we
present the full proof of Theorem 3.2 in Appendix B.1.
□
The following readily follows from [2].
Theorem 3.3 (Class-hiding). Scheme 1 is class-hiding with key
corruption in the random oracle model assuming the decisional Diffie-
Hellman assumption.
Lemma 3.4 (Canonical Representative). A predicate defined
as canon((𝐴, 𝐵)) := 𝐴 ≡ 𝑔1 can be used to identify canonical rep-
resentatives in Scheme 1. Note that by defining canon this way the
SFPK.KeyGen algorithm outputs keys in canonical representation.
Third party re-randomization. A useful property that was not
defined in previous work on SFPK is re-randomization of the full
signature/public key pair. In the original work, the authors consider
changing representation of the public key before the actual signa-
ture. We show that there exists an algorithm (pk′
, Sig′
SFPK) ←
SFPK.ReRand(pkSFPK, 𝑚, SigSFPK, 𝑟) for which we have pk′
SFPK ←
SFPK.ChgPK(pkSFPK, 𝑟) and SFPK.Verify(pk′
, 𝑚, Sig′
SFPK) = 1
where for the original signature SFPK.Verify(pkSFPK, 𝑚, SigSFPK) =
1. We can define this algorithm as part of Scheme 1 as follows:
SFPK.ReRand(pkSFPK, 𝑚, SigSFPK, 𝑟): parse SigSFPK = (Sig1
𝑝, compute pk′
SFPK = ((Sig1
SFPK), choose random 𝑘 ←$ Z∗
Sig2
← SFPK.ChgPK(pkSFPK, 𝑟) and set Sig′
H(𝑚)𝑘, (Sig2
SFPK)𝑟 · 𝑔𝑘
2).
SFPK)𝑟 · 𝑔𝑘
SFPK)𝑟 ·
1 , (Sig3
, Sig3
SFPK
SFPK
SFPK
SFPK
SFPK
,
3.2 Tag-Based Equivalence Class Signatures
Now, we introduce a variant of SPS-EQ or more precisely equiva-
lence class signatures (as they are not strictly structure-preserving
anymore) that in addition to the message 𝑀 being a representa-
tive of class [𝑀] support an auxiliary tag 𝜏 ∈ {0, 1}∗. Therefore,
we adapt the security model from SPS-EQ as follows. The task of
the adversary is to forge a signature for a message (𝑀∗, 𝜏∗) where
the adversary did not query a signature for the class [𝑀∗] and 𝜏∗
combination (cf. Appendix A.4). Moreover, for the adaption notion
which guarantees that signatures from ChgRep and Sign are identi-
cally distributed, we only require it to hold with respect to identical
auxiliary tags 𝜏. Our construction is a modification of the SPS-EQ
scheme from [44] (denoted FHS15 henceforth) which is proven
to be EUF-CMA secure in the generic group model and provides
perfect adaption even under malicious keys. We do not provide an
abstract definition as the only changes to the SPS-EQ interface are
the additional input 𝜏 to the Sign and Verify algorithms. Our con-
struction of a tag-based equivalence class signature scheme (TBEQ)
is provided in Scheme 2 and it basically extends the FHS15 scheme
by a fourth signature element 𝑉2 = 𝐻(𝜏) 1
𝑦 where 𝐻 : {0, 1}∗ → G2
is modeled as a random oracle and 𝑦 is the signing randomness.
Note that 𝑉2 can be considered as a BLS signature [16] with the
signing randomness 1/𝑦 acting as a one-time signing key.
We will now show the unforgeability and perfect adaption of the
TBEQ in Scheme 2.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2010TBEQ.Setup(1𝜆): generate BG ←$ BGGen(𝜆), 𝐻 : {0, 1}∗ → G2 and
TBEQ.KeyGen(params, ℓ): choose (cid:174)𝑥 ←$
𝑝)ℓ and set sk = (cid:174)𝑥 and pk =
(Z∗
TBEQ.Sign(sk, 𝑀, 𝜏): parse sk = (cid:174)𝑥, 𝑀 ∈ (G∗
1)ℓ , 𝜏 ∈ {0, 1}∗ and choose
return params = (BG, 𝐻).
2 = (𝑔𝑥1
2 , . . . , 𝑔𝑥ℓ2 ).
𝑔(cid:174)𝑥
𝑦 ←$ Z𝑝. Compute
(cid:33) 𝑦
(cid:32) ℓ
𝑖=1
Return 𝜎 = (𝑍1, 𝑌1, 𝑌2, 𝑉2).
𝑍1 =
𝑀𝑥𝑖
𝑖
, 𝑌1 = 𝑔
1
𝑦
1
, 𝑌2 = 𝑔
1
𝑦
2 𝑎𝑛𝑑 𝑉2 = 𝐻 (𝜏) 1
𝑦 .
TBEQ.ChgRep(𝑀, 𝜎, 𝜇, pk): Choose 𝜓 ←$ Z∗
𝑝 and return (𝑀 𝜇, 𝜎′) with
𝜎′ = (𝑍𝜓 𝜇
1
, 𝑌
1
𝜓
1 , 𝑌
1
1
𝜓
𝜓
2 , 𝑉
2
).
TBEQ.Verify(pk, 𝑀, 𝜏, 𝜎): parse pk = (pk1 = 𝑔𝑥1
2 , . . . , pkℓ = 𝑔𝑥ℓ2 ), 𝑀 ∈
1)ℓ , 𝜏 ∈ {0, 1}∗ and 𝜎 = (𝑍1, 𝑌1, 𝑌2, 𝑉2). Return 1 if the following
(G∗
checks hold and 0 otherwise:
ℓ
𝑖=1
𝑒(𝑀𝑖, pk𝑖) = 𝑒(𝑍1, 𝑌2) ∧
𝑒(𝑌1, 𝑔2) = 𝑒(𝑔1, 𝑌2) ∧ 𝑒(𝑔1, 𝑉2) = 𝑒(𝑌1, 𝐻 (𝜏))
Scheme 2: Our TBEQ Signature Scheme
Theorem 3.5. The TBEQ in Scheme 2 is EUF-CMA secure and
provides perfect adaption (under malicious keys) assuming that 𝐻 is
a random oracle.
We argue unforgeability in the generic bilinear group model
(following the proof of the FHS15 SPS-EQ in [45]) for a version of
our TBEQ without random oracles and a polynomially bounded tag-
space. Then, we will argue our modification in the random oracle
model with an unbounded tag space and constant size public keys.
The idea for a polynomially bounded tag space T = {𝜏1, . . . , 𝜏𝑘} for
a 𝑘 ∈ poly(𝜆) is to include additional uniformly random elements
(ℎ𝑖 ∈ G2)𝑖∈[𝑘] into pk and use the corresponding value ℎ𝑖 when
signing for tag 𝜏𝑖 instead of the hash evaluation 𝐻(𝜏𝑖).
Lemma 3.6. The TBEQ in Scheme 2 with the above modifications
is EUF-CMA secure in the Type-3 generic bilinear group model.
We provide this proof in Appendix B.2.
Lemma 3.7. The TBEQ in Scheme 2 is EUF-CMA secure for an
unbounded tag-space when modeling 𝐻 as a random oracle.
Proof. Up to collisions in the random oracle, which happen with
negligible probability, the TBEQ in Scheme 2 and in particular the
security analysis is identical to the proof of Lemma 3.6, but without
the restriction of the tag space being polynomial in size.
□
Lemma 3.8. The TBEQ in Scheme 2 provides perfect adaption
(under malicious keys).
We provide this proof in Appendix B.3.
What we require for our further constructions is a derandom-
ized version of the TBEQ scheme. Subsequently, we formulate as
Lemma 3.9 (cf. [17]) a frequently used technique (see e.g., [9, 52]) to
derandomize any signature scheme, which in particular also holds
for TBEQ. Thus, we omit the proof.
and return ((sk, 𝑘), pk).
Lemma 3.9. Let Σ = (Setup, KeyGen, Sign, ChgRep, Verify) be an
EUF-CMA secure TBEQ scheme and 𝐹 : K ×MTBEQ → RTBEQ be a
secure PRF, then Σ′ = (Σ.Setup, KeyGen′, Sign′, Σ.ChgRep, Σ.Verify)
is also EUF-CMA secure, where:
KeyGen′(BG, ℓ): Run (sk, pk) ← Σ.KeyGen(BG, ℓ), choose 𝑘 ←$ K
Sign′(sk, 𝑀, 𝜏): Compute 𝑟 := 𝐹(𝑘, 𝑀) and return Σ.Sign(sk, 𝑀, 𝜏; 𝑟).
We denote the derandomized TBEQ by TBEQd. Note that in
Scheme 2 this means that in Sign we have 𝑦 ← 𝐹(𝑘, 𝑀).
3.3 Aggregatable Attribute-Based EQs
We now introduce another variant of equivalence class signatures
called aggregatable attribute-based equivalence class (AAEQ) sig-
natures, that will represent one core building block for our CHAC
system. In such a scheme there is a main key pair, which is akin
to identity-based signatures [71]. The main secret key can issue
signing keys for attributes (Attr), e.g., Attr =“age”. When signing a
message 𝑀 (a representative of a class [𝑀]) with respect to such an
attribute signing key, signing additionally takes an attribute value
𝑣Attr, e.g., 𝑣Attr =“21”. The scheme is required to be aggregatable in
a sense that signatures under different attribute signing keys for the
same representative 𝑀 of a class can be aggregated into a compact
signature. Like in SPS-EQ, the signatures are with respect to classes
and there is a ChgRep algorithm to publicly change representatives
(i.e., adapt). For the sake of simplicity, below we assume that the
set of attributes represents the integers [𝑡] with domain {0, 1}∗ for
each attribute.
Definition 3.10 (Aggregatable Attribute-Based EQs). An aggregat-
able attribute-based equivalence class (AAEQ) signature scheme
consists of the following PPT algorithms:
Setup(1𝜆, 𝑡, ℓ): on input security parameter 1𝜆, the number of at-
tributes 𝑡 (distinct attribute names) and length parameter ℓ this
algorithm outputs main key pair (msk, mpk).
AKGen(msk, Attr): on input a main secret key msk and an attribute
Attr, outputs an attribute secret key skAttr.
Sign(skAttr, 𝑣Attr, 𝑀): on input an attribute secret key skAttr, an
attribute value 𝑣Attr and a representative 𝑀, this algorithm
outputs a signature 𝜎.
ChgRep(𝑀, 𝜎, 𝜇, mpk): on input a representative 𝑀, a signature 𝜎,
a scalar 𝜇 and a main public key mpk, this algorithm outputs
an updated signature 𝜎′ for representative 𝑀 𝜇.
Agg(mpk, {𝜎𝑖}): on input a main public key mpk and a set of valid
signatures {𝜎𝑖}, outputs an aggregated signature 𝜎′.
Verify(mpk, {Attr𝑖}, 𝜎′, 𝑀): on input a public key mpk, a set of
attributes {(Attr𝑖, 𝑣Attr𝑖)}, an aggregated signature 𝜎′ and a
representative 𝑀, outputs either accept(1) or reject(0).
We require an AAEQ to be correct, unforgeable and to provide
perfect adaption. We present the formal definitions in Appendix A.5.
Intuition of our construction. We now present a construction
with 𝑂(𝜆) sized mpk and msk as Scheme 3 which is based upon the
TBEQ in Scheme 2 using the de-randomization (TBEQd). The idea
is simple and uses parallel instances of the derandomized TBEQd
scheme, where every pk represents a different attribute Attr (for
simplicity just integers in the set [𝑡], but this can easily be changed
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2011to arbitrary strings, e.g., Attr =“age”). Now the basic idea is to use
the attribute value 𝑣Attr as the tag in the TBEQ scheme.
The intuition is that signatures for multiple different attributes
and the same representative 𝑀 of class [𝑀] share the same random-
ness 𝑦 = 𝐹(𝑘, 𝑀) and thus from the set of 𝑤 signatures {(𝑍1,𝑖, 𝑌1,𝑖,
𝑌2,𝑖, 𝑉2,𝑖)}𝑖∈[𝑤] aggregation can easily be done by aggregating the
𝑍1,𝑖 components of all single signatures as well as the 𝑉2,𝑖 compo-
nents and use the 𝑌1, 𝑌2 values of one of the signatures (note that all
with respect to the same mpk and same representative 𝑀 use the
same randomness 𝑦 and are thus identical). Aggregate verification
is the verification of the TBEQ scheme using the componentwise
aggregation of the attribute public keys (see Scheme 3 for details).
Finally, the change representative algorithm is identical to the al-
gorithm of the underlying TBEQ. Note that for the simplicity of
presentation we assume that ChgRep and Agg only take valid sig-
natures as input (this can easily be handled by adding verification
of all input signatures to the respective algorithms).
𝑀 ∈ (G∗
compute
(cid:32) ℓ
(cid:33) 𝑦
(pkAttr𝑖
AAEQ.Setup(1𝜆, 𝑡, ℓ): generate BG ←$ BGGen(𝜆), choose 𝐻 : {0, 1}∗ →
G2 and set params = (BG, 𝐻) . Choose PRF key 𝑘 ←$ K and for 𝑖 ∈ [𝑡]
𝑝)ℓ , set pkAttr𝑖 = (𝑔(cid:174)𝑥𝑖2 ) and set skAttr𝑖 =
• choose (cid:174)𝑥𝑖 ←$
(Z∗
, (cid:174)𝑥𝑖, k).