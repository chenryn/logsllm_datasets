从节点
主节点
主节点
主节点
主节点
主节点
角色
以及它们正在做的工作。
从节点
从节点
主节点
主节点
主节点
主节点
角色
表 17-2集群各个节点的当前状态
表17-1集群各个节点的当前状态
在线
在线
在线
在线
下线
状态
在线
在线
在线
状态
在线
在线
在线
一
图17-33节点7004成为新的主节点
移已经完成，所以该工作已经无效。）
负责处理槽0至槽 5000
负责处理槽15001至槽16383
负责处理槽10001至槽15000
负责处理槽 5001至槽10000
负责处理槽0至槽5000（因为故障转
复制节点7004
复制节点7000
复制节点7000
负责处理槽15001至槽16383
负责处理槽10001至槽15000
负责处理槽 5001至槽 10000
负责处理槽0至槽5000
一
7004
7002
7000
1
一
复制
工作
工作
7005
7003
7001
一
---
## Page 279
17.6.1
点进行故障转移的方法。
口 接收到该命令的节点首先会在自己的clusterState.nodes 字典中找到 node_id
可以让接收命令的节点成为 node_id 所指定节点的从节点，并开始对主节点进行复制：
CLUSTER REPLICATE 
向一个节点发送命令：
本节接下来的内容将介绍节点的复制方法，检测节点是否下线的方法，以及对下线主节
表17-3展示了节点7000复制节点7004之后，集群中各个节点的状态。
struct clusterNode
指针指向这个结构，以此来记录这个节点正在复制的主节点：
所对应节点的 clusterNode结构，并将自己的clusterState.myself.slaveof
7005
7004
7003
7002
7001
7000
节点
设置从节点
!...
struct clusterNode *slaveof;
图17-34重新上线的节点7000成为节点7004的从节点
从节点
主节点
主节点
主节点
主节点
从节点
角色
表 17-3集群各个节点的当前状态
7004
100L
复制
一
在线
状态
在线
在线
在线
在线
7000
7005
在线
7002
二
1
一
一
7003
复制节点7004
负责处理槽0至槽5000
负责处理槽15001至槽16383
负责处理槽10001至槽15000
负责处理槽5001至槽10000
复制节点7004
工作
第17章
群 
+275
---
## Page 280
276·第三部分多机数据库的实现
属性中记录正在复制这个主节点的从节点名单：
节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。
集群中的所有节点都会在代表主节点的 clusterNode 结构的 slaves 属性和 numslaves
struct clusterNodef
 clusterState.myself.slaveof 指针指向代表节点 7000 的结构，表示节点
 clusterState.myself.flags 属性的值为 REDIS_NODE_SLAVE，表示节点
图17-35展示了节点7004在复制节点 7000时的clusterState 结构：
最后，节点会调用复制代码，并根据clusterState.myself.slaveof 指向的
然后节点会修改自已在clusterState.myself.flags 中的属性，关闭原本的
一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他
7004是一个从节点。
7004正在复制的主节点为节点7000。
点相当于向从节点发送命令 SLAVEOF。
制功能和单机 Redis 服务器的复制功能使用了相同的代码，所以让从节点复制主节
clusterNode 结构所保存的 IP 地址和端口号，对主节点进行复制。因为节点的复
经由原来的主节点变成了从节点。
REDIS_NODE_MASTER 标识，打开 REDIS_NODE_SLAVE 标识，表示这个节点已
1/正在复制这个主节点的从节点数量
+++
clusterstate
myself
图17-35节点7004的clusterState结构
REDIS_NODE_SLAVE
"127.0.0.1"
 clusterNode
slaveof
flags
ip
REDIS_NODE_MASTER
"127.0.0.1"
clusterNode
flags
7000
ip
---
## Page 281
中的各个节点为节点7000创建的clusterNode结构的样子：
口代表节点 7000 的 clusterNode 结构的 slaves 数组的两个项分别指向代表节点
口代表节点 7000 的 clusterNode 结构的 numslaves 属性的值为 2，这说明有两个
举个例子，图17-36记录了节点7004和节点7005成为节点7000的从节点之后，集群
7004和代表节点 7005的clusterNode 结构，这说明节点7000的两个从节点分别
从节点正在复制节点7000。
是节点7004和节点7005。
struct clusterNode **slaves;
int numslaves;
图17-36集群中的各个节点为节点7000创建的clusterNode 结构
 REDIS_NODE _MASTER
numslaves
"127.0.0.1"
clusterNode
slaves
flags
2
7000
port
ip
clusterNode*[2]
REDIS_NODE_SLAVE
REDIS_NODE_SLAVE
"127.0.0.1"
clusterNode
"127.0.0.1"
clusterNode
flags
flags
ip
ip
第17章
集
群·277
---
## Page 282
278“·第三部分多机数据库的实现
链表里面：
并将主节点B的下线报告（failure report）添加到clusterNode 结构的 fail_reports
A会在自己的clusterState.nodes字典中找到主节点C所对应的clusterNode结构，
某个节点是处于在线状态、疑似下线状态（PFAIL），还是已下线状态（FAIL）。
如图 17-37 所示。
flags 属性中打开 REDIS_NODE_PFAIL 标识，以此表示节点7000进人了疑似下线状态，
clusterState.nodes 字典中找到节点 7000所对应的clusterNode 结构，并在结构的
有在规定的时间内，向节点7001返回一条PONG消息，那么节点7001就会在自己的
( probable fail, PFAIL )。
回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为疑似下线
是否在线，如果接收 PING 消息的节点没有在规定的时间内，向发送 PING 消息的节点返
17.6.2故障检测
当一个主节点A通过消息得知主节点B认为主节点C进人了疑似下线状态时，主节点
举个例子，如果节点7001向节点7000发送了一条PING消息，但是节点7000没
集群中的每个节点都会定期地向集群中的其他节点发送 PING 消息，以此来检测对方
每个下线报告由一个clusterNodeFailReport 结构表示：
struct clusterNode {
集群中的各个节点会通过互相发送消息的方式来交换集群中各个节点的状态信息，例如
struct clusterNodeFailReport {
struct clusterNode *node;
11报告目标节点已经下线的节点
list *fail_reports;
！/一个链表，记录了所有其他节点对该节点的下线报告
!!...
图17-37代表节点7000的clusterNode结构
REDIS_NODE_MASTER & REDIS_NODE_PFAIL
"127.0.0.1"
clusterNode
flags
7000
port
ip
---
## Page 283
如图 17-39 所示。
点 7001会将主节点7000标记为已下线，并向集群广播一条关于主节点7000的 FAIL 消息，
理槽的主节点里面，有三个都将主节点7000标记为下线，数量已经超过了半数，所以主节
表主节点7000的结构打开了REDIS_NODE_PFAIL 标识），综合起来，在集群四个负责处
节点7000进人了下线状态，并且主节点7001也认为主节点7000进人了疑似下线状态（代
为已下线。
一条关于主节点x的 FAIL 消息，所有收到这条 FAIL 消息的节点都会立即将主节点x标记
那么这个主节点×将被标记为已下线（FAIL），将主节点×标记为已下线的节点会向集群广播
主节点 7000 创建图17-38所示的下线报告。
节点7002和主节点7003都认为主节点7000进人了疑似下线状态，那么主节点7001将为
举个例子，对于图17-38所示的下线报告来说，主节点 7002和主节点 7003都认为主
REDIS_NODE_PFAIL
REDIS_NODE_MASTER
举个例子，如果主节点7001在收到主节点7002、主节点7003发送的消息后得知，主
fail_reports
clusterNode
 typedef clusterNodeFailReport;
"127.0.0.1"
7000
flags
mstime_t time;
//（与当前时间相差太久的下线报告会被删除）
1390525039000
FailReport
clusterNode
time
图17-38节点7000的下线报告
node
REDIS_NODE_MASTER
1390525039321
"127.0.0.1"
clusterNode
FailReport
clusterNode
flags
time
7002
port
node
REDIS_NODE_MASTER
clusterNode
第17章
flags
集
群·
279
---
## Page 284
280
CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST 消息，要求所有收到这条消息、并且具
◆第三部分多机数据库的实现
个向主节点要求投票的从节点将获得主节点的投票。
17.6.4选举新的主节点
责处理的槽。
立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负
节点进行故障转移，以下是故障转移的执行步骤：
17.6.3
当--个从节点发现自己正在复制的主节点进人了已下线状态时，从节点将开始对下线主
3）对于每个配置纪元，集群里每个负责处理槽的主节点都有一次投票的机会，而第-一
2）当集群里的某个节点开始一次故障转移操作时，集群配置纪元的值会被增一。
5）新的主节点开始接收和自已负责处理的槽有关的命令请求，故障转移完成。
1）集群的配置纪元是一个自增计数器，
以下是集群选举新的主节点的方法：
新的主节点是通过选举产生的。
4）新的主节点向集群广播一条PONG 消息，这条 PONG 消息可以让集群中的其他节点
3）新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。
2）被选中的从节点会执行 SLAVEOF no one 命令，成为新的主节点。
1）复制下线主节点的所有从节点里面，会有一个从节点被选中。
故障转移
图17-39节点 7001向集群广播 FAIL 消息
一
7001
7000
1
发送FAIL消息
发送FAIL消息
发送FAIL消息
发送FAIL消息
，它的初始值为0。
复制