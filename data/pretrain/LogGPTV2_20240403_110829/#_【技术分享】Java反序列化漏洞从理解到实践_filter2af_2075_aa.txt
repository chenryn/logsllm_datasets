# 【技术分享】Java反序列化漏洞从理解到实践
|
##### 译文声明
本文是翻译文章，文章来源：diablohorn.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
在学习新事物时，我们需要不断提醒自己一点：纸上得来终觉浅，绝知此事要躬行。这也是为什么我们在学到知识后要付诸实践的原因所在。在本文中，我们会深入分析大家非常熟悉的
**Java发序列化漏洞** 。对我们而言，最好的实践就是真正理解手头掌握的知识，并可以根据实际需要加以改进利用。本文的主要内容包括以下两方面：
**1\. 利用某个反序列化漏洞。**
**2\. 自己手动创建利用载荷。**
更具体一点，首先我们会利用现有工具来实际操作反序列化漏洞，也会解释操作的具体含义，其次我们会深入分析载荷相关内容，比如什么是载荷、如何手动构造载荷等。完成这些步骤后，我们就能充分理解载荷的工作原理，未来碰到类似漏洞时也能掌握漏洞的处理方法。
整个过程中需要用到的工具都会在本文给出，但我建议你先了解一下这个工具：
https://github.com/NickstaDB/DeserLab
该工具包含我们准备实践的漏洞。之所以选择使用模拟漏洞而不是实际目标，原因在于我们可以从各个方面控制这个漏洞，因此也可以更好理解反序列化漏洞利用的工作原理。
**  
**
**二、利用DeserLab漏洞**
首先你可以先读一下Nick写的这篇[文章](https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/)， 文章中介绍了 **DeserLab**
以及Java反序列化相关内容。本文会详细介绍Java序列化协议的具体细节。阅读完本文后，你应该可以自己搞定DeserLab环境。接下来我们需要使用各种预编译jar工具，所以我们可以先从[Github](https://github.com/NickstaDB/)上下载这些工具。现在准备步入正题吧。
碰到某个问题后，我通常的做法是先了解目标的正常工作方式。对于DeserLab来说，我们需要做以下几件事情：
**运行服务器及客户端**
**抓取通信流量  
**
**理解通信流量**
我们可以使用如下命令来运行服务器及客户端：
    java -jar DeserLab.jar -server 127.0.0.1 6666
    java -jar DeserLab.jar -client 127.0.0.1 6666
上述命令的运行结果如下：
    java -jar DeserLab.jar -server 127.0.0.1 6666
    [+] DeserServer started, listening on 127.0.0.1:6666
    [+] Connection accepted from 127.0.0.1:50410
    [+] Sending hello...
    [+] Hello sent, waiting for hello from client...
    [+] Hello received from client...
    [+] Sending protocol version...
    [+] Version sent, waiting for version from client...
    [+] Client version is compatible, reading client name...
    [+] Client name received: testing
    [+] Hash request received, hashing: test
    [+] Hash generated: 098f6bcd4621d373cade4e832627b4f6
    [+] Done, terminating connection.
    java -jar DeserLab.jar -client 127.0.0.1 6666
    [+] DeserClient started, connecting to 127.0.0.1:6666
    [+] Connected, reading server hello packet...
    [+] Hello received, sending hello to server...
    [+] Hello sent, reading server protocol version...
    [+] Sending supported protocol version to the server...
    [+] Enter a client name to send to the server:
    testing
    [+] Enter a string to hash:
    test
    [+] Generating hash of "test"...
    [+] Hash generated: 098f6bcd4621d373cade4e832627b4f6
上述结果并不是我们想要的信息，我们想问的问题是，这个环境如何实现反序列化功能？为了回答这个问题，我们可以使用wireshark、tcpdump或者tshark来捕捉6666端口上的流量。我们可以使用如下命令，利用tcpdump来捕捉流量：
    tcpdump -i lo -n -w deserlab.pcap 'port 6666'
在继续阅读本文之前，你可以先用wireshark来浏览一下pcap文件。读完Nick的文章后，你应该已经了解目前所处的状况，至少能够识别出隐藏在流量中的序列化Java对象。
**2.1 提取序列化数据**
根据这些流量，我们可以肯定的是网络中有序列化数据正在传输，现在让我们来分析哪些数据正在传输。我选择使用[
**SerializationDumper**](https://github.com/NickstaDB/SerializationDumper)工具来解析这些流量，这个工具属于我们要用的工具集之一，作用与[
**jdeserialize**](https://github.com/frohoff/jdeserialize/tree/master/jdeserialize)类似，后者属于闻名已久且尚能发挥作用的老工具。在使用这些工具之前，我们需要先准备好待处理数据，因此，我们需要将pcap转换为可待分析的数据格式。
    tshark -r deserlab.pcap -T fields -e tcp.srcport -e data -e tcp.dstport -E separator=, | grep -v ',,' | grep '^6666,' | cut -d',' -f2 | tr 'n' ':' | sed s/://g
这条命令虽然看起来很长，但至少能正常工作。我们可以将这条命令分解为更好理解的子命令，因为该命令的功能是将pcap数据转换为经过十六进制编码的一行输出字符串。首先，该命令将pcap转换为文本，文本中只包含传输的数据、TCP源端口号以及目的端口号：
    tshark -r deserlab.pcap -T fields -e tcp.srcport -e data -e tcp.dstport -E separator=,
结果如下所示：
    50432,,6666
    6666,,50432
    50432,,6666
    50432,aced0005,6666
    6666,,50432
    6666,aced0005,50432
如上述结果所示，在TCP三次握手期间并没有传输数据，因此你可以看到',,'这样一段文本。随后，客户端发送第一个字节，服务器返回ACK报文，然后再发回某些字节数据，以此类推。命令的第二个功能是继续处理这些文本，根据端口以及每一行的开头部分来选择输出合适的载荷：
    | grep -v ',,' | grep '^6666,' | cut -d',' -f2 | tr 'n' ':' | sed s/://g
这条过滤命令会将服务器的响应数据提取出来，如果你想要提取客户端数据，你需要改变端口号。处理结果如下所示：
    aced00057704f000baaa77020101737200146e622e64657365722e486[...]
这些数据正是我们需要的数据，它将发送和接收数据以较为简洁的方式表示出来。我们可以使用前面提到的两个工具来处理这段数据，首先我们使用的是SerializationDumper，然后我们会再使用jdeserialize。之所以要这么做，原因在于使用多个工具来处理同一个任务可以便于我们分析潜在的错误或问题。如果你坚持使用一个工具的话，你可能会不小心走进错误的死胡同。当然尝试不同的工具本身就是一件非常有趣的事情。
**2.2 分析序列化数据** ****
SerializationDumper工具的使用非常简单直白，我们只需要将十六进制形式的序列化数据作为第一个参数传输进去即可，如下所示：
    java -jar SerializationDumper-v1.0.jar aced00057704f000baaa77020101
结果如下所示：