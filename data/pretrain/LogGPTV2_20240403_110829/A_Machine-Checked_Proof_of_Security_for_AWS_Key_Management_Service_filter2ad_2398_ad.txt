(proj pks(tr mems old)=fdom cphs), and that the signer is a member of the trust (sid ∈ tr mems old).19
18 Notation: In EasyCrypt tup.1 denotes the ﬁrst element of a tuple; notation is overloaded for ﬁelds in records, as
in rec.ﬁeld.
19 When this operator is used in unwrap we have old=trust. The same operator is used for checking updates by both
hosts and HSMs; in that case, the signer must be an HSM of the predecessor trust as well.
9
op proj pks (hids: HId fset) : MPk = image snd hids.
(∗ Operator used for both unwrap and trust updates ∗)
op checkToken(inst : Installable, old new : Trust, tkw : TkWrapped) =
let (cphs, sid, sig) = (tkw.tkw ekeys, tkw.tkw signer, tkw.tkw sig) in
let msg = encode msg (new,cphs,sid,inst) in
verify(sid.1, msg, sig) ∧ proj pks (tr mems old) = fdom cphs ∧
sid ∈ tr mems old.
proc wrap(hid : HId,td : TkData) : Token = {
(inst, trust, keys) ← (td.td inst, td.td trust, td.td skeys);
mem ← tr mems trust;
tag ← encode tag trust;
ptxt ← encode ptxt keys;
ekeys ←$ mencrypt (proj pks mem) tag ptxt;
msg ← encode msg (trust, ekeys, hid, inst);
sig ← SigSch.sign(hid.1, msg);
tkw ← { tkw ekeys = ekeys; tkw signer = hid; tkw sig = sig };
return { tk inst = inst; tk trust = trust; tk wdata = tkw; };
}
proc unwrap(hid : HId, tk : Token) : TkData option = {
rtd ← None;
(inst, trust, data) ← (tk.tk inst, tk.tk trust, tk.tk wdata);
(∗ Signer must be in trust: so we call check with trust as old ∗)
if (checkToken inst trust tk.tk wdata ∧
hid ∈ tr mems trust ∧ hid in hid benc keys) {
(ekey, dkey) ← benc keys[hid.1];
(tag, cphs) ← (encode tag trust, data.tkw ekeys);
cph ← cphs[ekey];
optxt ← decrypt dkey tag cph;
if (optxt(cid:54)=None)
skeys ← decode ptxt optxt;
rtd ← Some { td inst = inst; td trust = trust; td skeys = skeys; };
}
return rtd;
}
Fig. 4. HSM Operations for Domain Token (un)wrapping.
10
Encryption is formalized as tag-based multi-recipient public-key encryption [22,8]. Intuitively,
this is a variant of public-key encryption where one can provide multiple agreement keys to the
encryption algorithm, so that the resulting ciphertext can be decrypted independently by multiple
recipients using only their individual private agreement keys. Encryption therefore takes a set of
public keys (type MPk), and we model ciphertexts as a map from public keys to sub-ciphertexts that
contain only the parts of the full ciphertext that each recipient needs to decrypt. This abstraction
permits capturing the speciﬁc ﬂavor of public-key encryption used in the DMP: the multi-recipient
syntax permits modeling schemes that minimize bandwidth and encryption time via the reuse
of randomness across multiple ciphertexts. The construction is tag-based, because it binds the
ciphertext to the meta-data of the token (parameter tag) thereby preventing an adversary from
porting such a ciphertext from a domain token associated to an honest trust to a domain token
that is under its control. We describe how we formalized the proof of security for the encryption
scheme used in AWS KMS in Section 5, and how we showed that the security model it satisﬁes is
suﬃcient for the purposes of the DMP.
Trust management operations. Figure 5 shows the modeling of host operations. This consists of
checking a signed trust (token) for consistency and its relation to its predecessor. The latter means
checking that the signer is in the predecessor trust, and that the predecessor ﬁngerprint contained
in the new trust is the ﬁngerprint of the predecessor trust (so the new trust can also not be an
initial/root trust, and must actually have a ﬁngerprint). Note that, for each host, we keep track of
which trust is installed using a map hosts tr.
op tr initial(trust : Trust) = tfpr trust = None.
op checkTrustProgress(old new : Trust) = old = tfpr new.
proc installUpdatedTrust(hstid : HstId, tk : Token) : bool = {
b ← false;
if (hstid ∈ HstPolSrv.hosts tr) {
old ← hosts tr[hstid];
(∗ Signer must be in old trust and trust must be installable ∗)
b ← tk.tk inst ∧ checkToken tk.tk inst old tk.tk trust tk.tk wdata ∧
hstid ∈ hosts tr ∧ ¬tr initial (tr data tk.tk trust) ∧
checkTrustProgress hosts tr[hstid] tk.tk trust;
if (b) hosts tr[hstid] ← tk.tk trust;
}
return b;
}
Fig. 5. Host Trust Update Operation
Finally, Figure 6 shows the behavior of an HSM when checking a request for a trust update
after successful unwrapping of the domain token containing the old trust. This ensures that an
HSM member of the old trust has signed it. The update request is formalized by providing the new
trust and a set of authorizations, which are just signatures by operators on the members of the
new trust, who are not in the old trust. The check enforces that the minimum quorum size (tthr old)
is preserved, and that a quorum of at least this size of operators in the old trust have signed the
request. This is computed by a fold over the list of operators auth that signed the request.
4 Real-vs-Ideal security for KMS DMP
In this section we describe and justify the security deﬁnition we adopted for the DMP, corresponding
to the AEAD-service layer as shown in Figure 1. We begin by deﬁning a general syntax for (possibly
11
op checkTrustUpdate(old : Trust, new : Trust, auth : Authorizations) : bool =
(∗ Check threshold n preserved ∗)
tthr old = tthr new ∧
(∗ Signers are a quorum ∗)
fdom auth \subset tops old ∧
(∗ Signers are a quorum of correct size ∗)
(tthr old) ≤ card (fdom auth) ∧
(∗ Check hash consistency ∗)
tfpr new = hash old ∧
(∗ Check all new members signed ∗)
let newmems = tmems new \ tmems old in
let newops = tops new \ tops old in
(∗ Verify all signatures ∗)
let msg = encode (newmems,newops) in
all (fun o ⇒ o ∈ auth ∧ verify (o, msg, oget auth[o])) (fdom auth).
Fig. 6. HSM Trust Update Validation
distributed) cryptographic key management APIs, inspired by the work of Shrimpton, Stam and
Warinschi [23]. This formalism abstracts away all the details of the protocol that are not directly
related to key operations, and we believe it to be of independent interest to analyse the security of
other key management APIs. This allows us to reason about diﬀerent security models using simpler
deﬁnitions, and later reﬁne the results for the concrete case of the DMP. With this reﬁnement in
mind, we clarify how the introduced abstract notions map to DMP features in various remarks
throughout the text.
4.1 Key Management APIs
Key management APIs store keys in tokens. In the real world, a token can be implemented by
using trusted hardware (e.g., an HSM or a SIM card) to store and perform computations with the
keys, in which case keys may never leave the trusted boundaries of the hardware device. In other
settings, for example in the cases where the underlying hardware cannot store the key material
in its internal state, tokens are implemented as cryptographically hardened data structures, which
guarantee that only trusted devices can (temporarily) access the key material. Our formalization
abstracts these details and applies to both cases.
A token tk is a data structure mapping handles (key identiﬁers) to keys key, together with some
meta-data that is used by the API for management operations. The basic operations on tokens are:
– TkManage(tk, cmd): a generic interface that captures all management operations that can be
carried out on tokens, including creating a new empty token, changing meta-data, and all other
operations that do not aﬀect the keys stored in the token.20 On input a token tk and a command
description, it returns a (possibly updated) token.
– TkNewKey(tk, hdl, cmd): samples a new key from the appropriate distribution and adds it to the
token under the relation hdl → key and following the API-speciﬁc instructions described in cmd.
The success of this operation may depend on the consistency of the input token itself and on the
command cmd, e.g. the command might violate a check on permissions for generating keys in a
particular token.21
– TkReveal(tk, hdl, cmd): exposes the key associated with hdl within tk, following the API-speciﬁc
instructions described in cmd. As before, the success of this operation may depend on the com-
mand details cmd.
20 I.e., these commands may change the state of the API and even the meta-data associated with keys, but the