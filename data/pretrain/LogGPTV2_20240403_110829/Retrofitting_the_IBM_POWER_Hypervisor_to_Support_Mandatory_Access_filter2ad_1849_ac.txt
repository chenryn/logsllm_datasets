### Case Study: Isolated Sub-Component and STE Type Assignment

In this scenario, an isolated sub-component is assigned a single STE (Security Type Enforcement) type. Although not a physical hardware device, the internal Virtual Ethernet Switch in PHYP supports the IEEE 802.1Q VLAN standard, which provides VLAN isolation. For each VLAN ID, we assign a single STE type and verify this type when the VLAN ID is assigned to the LPAR's vEthernet adapter.

### MAC (Mandatory Access Control) Enforcement on PHYP

On the PHYP platform, MAC enforcement restricts the collocation of LPARs and the assignment of resources to LPARs according to the platform's security policy. An LPAR can be set to a bootable state if its CHW (Confidentiality, Integrity, and Availability) type does not conflict with any LPARs already in the bootable state. This prevents the activation of conflicting LPARs.

The configuration of a client LPAR adapter to a server LPAR adapter is allowed if the client LPAR and server LPAR share an STE type in their security labels. This applies to vSCSI and vTTY adapter configurations. A multi-STE typed server (or client) can determine the STE type assignment of its adapter and enforce confinement against adapters of other STE types. An LPAR can be assigned to a resource if the LPAR includes the resource's STE type in its label. Resources in our environment include IO POOLs, VLANs, physical slots, or Logical Ports from a HEA (Host Ethernet Adapter).

### Example of MAC Enforcement

To illustrate MAC operations on the PHYP platform, consider the managed platform shown in Figure 3, which includes a hosting LPAR (VIOS) and two client LPARs. The VIOS owns the physical hardware disk and serves virtual disks to the client LPARs.

#### Security Policy Definitions
- **STE Types:** {green, red, service}
- **CHW Types:** {green, red, service}
- **Conflict Set:** {green, red}

For simplicity, the figure does not differentiate between CHW and STE types. The security officer created the following security labels:
- **Red_Label:** {red}
- **Green_Label:** {green}
- **Service_Label:** {green, red, service}
- **Res_Label:** {service}

#### Configuration and Security Checks
- **STE Security Check:**
  - The administrator assigns the Service Label to the VIOS LPAR and the Res Label to the physical disk. Since the VIOS and physical disk share the "service" STE type, the physical disk can be assigned to the VIOS.
  - The VIOS is configured with two server vSCSI adapters, one tagged with STE {green} and the other with STE {red}.
  - The Green Label is assigned to client LPAR_A, and the Red Label is assigned to client LPAR_B. Each client LPAR's virtual SCSI adapter automatically inherits its STE type.
  - If an administrator tries to configure LPAR_A's client adapter to the VIOS's red vSCSI adapter, PHYP denies the assignment because the adapters do not share an STE type. Conversely, PHYP accepts the assignment of LPAR_A's client adapter to the VIOS's green vSCSI adapter.

- **CHW Security Check:**
  - While LPAR_A is the first client activated (set to bootable state), setting LPAR_B to bootable is rejected by PHYP due to conflicting CHW types in their security labels.
  - The bootable flag is controlled in the LPAR configuration to ensure that anti-collocation rules are enforced. This approach simplifies policy enforcement at configuration time, albeit with a small loss in granularity.

### Implementation

#### Policy Representation
To facilitate processing and understandability, we use three different representations of a security policy:
- **XML Representation:** Provides a standardized representation of labels and conflict sets, allowing easy authoring and updating of policies independent of platform specifics.
- **Mapping Representation:** Links the XML and binary representations, useful for policy enforcement within VIOS partitions.
- **Binary Representation:** A low-level representation designed to optimize policy processing in PHYP, used directly within the ACM (Access Control Module) for access control decisions.

#### PHYP Extensions
To implement the sHype access control architecture, we extended Dispatchable PHYP with our ACM implementation and instrumented the configuration processing module with security hooks that automatically invoke the ACM's decision API. The ACM encapsulates the STE and CHW policy engines and provides two major functions:
1. Instantiates the policy engines based on the loaded policy.
2. Delegates access decisions to the respective policy engine.

Our ACM implementation is written in C++ and consists of about 2500 lines of code, including the code for the STE and CHW policy engines. The ACM decision API is invoked with subject and object identifiers, such as LPAR ID, IO pool ID, VLAN Switch, VLAN ID, or physical slot location ID.

#### Testing
We utilized proprietary debugging tools from the PHYP Design and Development Team to test ACM functionality on the platform. We used a PHYP debugging utility to load our binary and mapping policy representation files directly into Dispatchable PHYP memory. We also implemented a cfacm macro to drive MAC operations on the platform, providing operations such as activating a policy, assigning security labels, and invoking the ACM decision API.

We tested our MAC enforcement on a System p model 520 hardware using the latest PHYP development release. Our experiments generated the expected results, with access to resources being allowed or denied based on the security label assignments.

### Lessons Learned

In providing MAC for PHYP, we learned two major lessons:
1. **Non-Intrusive Design and Implementation:**
   - MAC can be implemented non-intrusively on the commercial-grade POWER Hypervisor due to the way resources are configured exclusively through Dispatchable PHYP and allocated in PLIC during runtime.
2 - **Simplified Security Labels:**
   - Simplifying the notion of a security label helped non-security personnel understand and apply the security policy more effectively.

Initially, it was proposed to provide MAC enforcement on the HMC, but this approach does not scale for managed platforms. Enforcing MAC on the HMC would require coordination and coherence among multiple HMCs, complicating manageability. Thus, having MAC enforcement in PHYP simplifies MAC processing, eliminates dependency on the HMC, and ensures consistent enforcement of a central security policy independently of the HMC.

Ideally, the HMC can contribute to MAC enforcement by determining the validity of MAC operations before sending configuration requests to PHYP. The HMC can list only compatible resources for assignment to LPARs based on their security labels, proving useful for authoring security policies and managing label associations. However, it is less useful for single-handedly enforcing the policy.