this  case, 
however, an isolated sub-component is still assigned a 
single  STE  Type.  Although  not  a  physical  hardware 
internal  Virtual  Ethernet  Switch 
device,  PHYP’s 
supports  the  IEEE  802.1Q  VLAN  standard  which 
provides  VLAN  isolation.  In  the  PHYP  Ethernet 
Switch case,  we assign each VLAN ID a single STE 
type  and  check  this  type  when  the  VLAN  ID  is 
assigned to the LPAR’s vEthernet adapter. 
MAC  enforcement.  On  the  PHYP  platform,  MAC 
enforcement restricts the collocation of LPARs and the 
assignment  of  resources  to  LPARs  according  to  the 
platform  security  policy.  An  assignment  of 
the 
bootable state to an LPAR is permitted, if the LPAR’s 
CHW type does not conflict with any LPARs that are 
already  in  the  bootable  state.  This  prevents  the 
activation of conflicting LPARs.  
The  configuration  of  a  client  LPAR  adapter  to  a 
server LPAR adapter is permitted, if the client LPAR 
and server LPAR share an STE type in their security 
labels.  This  covers  vSCSI  and  vTTY  adapter 
configurations. A multi-STE typed server (or client) is 
able  to  determine  the  STE  type  assignment  of  its 
adapter and  enforce  the  confinement against adapters 
of  other STE types. An assignment of an LPAR to a 
resource  is  permitted,  if  the  LPAR  includes  the 
resource’s  STE  type  in  its  label.  A  resource  in  our 
environment  could  be  an IO  POOL,  VLAN,  physical 
slot, or a Logical Port from a HEA.  
3.4. An example of MAC enforcement 
We  review  MAC  operations  on  the  platform 
illustrated in Figure 3 to show how MAC enforcement 
works  on  PHYP  platforms.  This  figure  shows  a 
managed  platform  with  a  hosting  LPAR  (VIOS)  and 
two  client  LPARs.  The  VIOS  owns  the  physical 
hardware  disk  and  serves  virtual  disks  to  the  client 
LPARs. 
A  platform  security  officer  defines  STE  types 
{green,  red,  service}  and  CHW  types  {green,  red, 
service}.  For  simplicity  reasons,  the  figure  does  not 
differentiate  between  CHW  and  STE  types.  For  the 
CHW types, a conflict set {green, red} is defined. The 
security  officer  created  Red,  Green,  Res,  and  Service 
security labels to group the types as shown on the left 
in Figure 3. 
226226
Red_Label
Green_Label
Service_Label
LPAR
non-bootable
B
LPAR
bootable
A
VIOS
bootable
{green}
{red}
{red}
{green}
{green}
{red}
Res_Label
Physical
Disk
{service}
Security Policy
Types:
{ green,
red,
service}
Conflict Set:
{ green,  red }
Green_Label:
{ green } 
Red_Label:
{ red }
Service_Label:
{ green, red, 
service }
Res_Label:
{ service }
Figure 3. Labeled LPARs and resources 
STE  security  check.  At  configuration  time,  an 
administrator  assigns  the  Service  Label  to  the  VIOS 
LPAR and the Res Label to the physical disk. Since the 
VIOS and physical disk share the service STE type, the 
administrator can then assign the physical disk to the 
VIOS. To provide virtual disks from the physical disk, 
the  VIOS  is  configured  with  two  server  vSCSI 
adapters. The VIOS has tagged one vSCSI adapter with 
STE  {green}  and  the  other  with  STE  {red}.  The 
administrator  also  assigns  the  Green  Label  to  client 
LPAR, LPAR_A, and the Red Label to the other client 
LPAR, LPAR_B. Since each client LPAR has one STE 
type in its security label, its client virtual SCSI adapter 
automatically inherits its STE type accordingly.  
the  correctly 
Later during configuration, if an administrator tries 
to  configure  LPAR_A’s  client  adapter  to  the  VIOS’s 
red  vSCSI adapter, PHYP denies the assignment since 
the  adapters  do  not  share  an  STE  type.  In  contrast, 
PHYP  accepts  the  assignment  of  LPAR_A’s  client 
adapter to the VIOS’s green vSCSI adapter. The VIOS 
is required to keep the virtual disks safely separate and 
connected 
labeled  server  VSCI 
adapters.  
CHW  security  check.  While  LPAR_A  is  the  first 
client  activated,  i.e.,  set  to  bootable  state,  any  later 
setting bootable of LPAR_B is rejected by PHYP. This 
is  due  to  the  client  LPARs  having  conflicting  CHW 
types in their security labels. Since the activation of an 
LPAR is not a configuration action (uncontrolled), we 
control the bootable flag in the LPAR configuration to 
ensure that the anti-collocation rules are enforced. The 
implementation was driven by simplicity in enforcing 
the  policy  at  configuration  time  and  a  small  loss  in 
granularity through this ‘pessimistic’ interpretation of 
the  bootable  flag  instead  of  the  running  state  is 
accepted. 
to 
To 
three 
latter 
4. Implementation 
policy 
binary 
test  policy 
For  our  proof  of  concept,  we  integrated  sHype 
MAC support into Dispatchable PHYP. We employed 
debugging tools to load a policy, assign security labels, 
and 
enforcement.  Our  prototype 
implementation  focused  on  policy  representation  and 
on extensions to PHYP to support MAC. Note that the 
MAC  implementation  is  currently  not  part  of  any 
production level release of PHYP. 
4.1. Policy Representation 
facilitate 
processing 
and 
understandability,  we 
different 
representations  of  a  security  policy:  XML,  mapping 
and 
two 
representations are used for enforcing MAC on PHYP 
based systems. 
representation.  The 
employ 
Expressing a policy as an XML document provides 
for a standardized representation of labels and conflict 
sets.  This  representation  allows  users  and  automated 
tools  to  easily  author  and  update  a  policy  that  is 
independent  of  platform  specifics.  From  the  XML 
policy  representation,  we  derive  the  mapping  and 
binary policy representations.  
The  binary  policy  is  a  low-level  representation 
designed to optimize policy processing in PHYP. This 
representation  is  used  directly  within  the  ACM  to 
perform  the  access  control  decision.  The  mapping 
policy  is  an  intermediate representation  that  links the 
XML  and  binary  representations.  It  contains  the 
mapping of symbolic label and type names to the low 
level representation contained in the binary policy. The 
mapping  representation  is  most  useful  for  policy 
enforcement within VIOS partitions. 
4.2. PHYP Extensions 
To implement the sHype access control architecture, 
we  extended  Dispatchable  PHYP  with  our  ACM 
implementation  and  instrumented  the  configuration 
processing  module  with 
that 
security  hooks 
automatically invoke the ACM’s decision API. 
The  ACM  is the  access  mediation  component  that 
encapsulates  the  STE  and  CHW  policy  engines.  It 
provides  two  major  functions.  First it  instantiates  the 
policy  engines  based  on  the  loaded  policy.  Second  it 
delegates  access  decisions  to  the  respective  policy 
engine. Every ACM decision method returns a security 
access  decision  and  a  status  return  code.  The  status 
return  code  indicates  if  a  processing  error  occurred 
during the security access check.  
access 
Our ACM implementation is written in C++ and is 
about  2500  lines  of  code,  including  the  code  for  the 
STE and CHW policy engines. Since the current PHYP 
LPAR  configuration  profiles  do  not  support  security 
label  entries,  our  current  ACM  implementation  also 
includes support code for maintaining the associations 
of  security  labels  with  LPARs  and  resources.  The 
ACM  decision  API  is  invoked  with  the  subject  and 
object  identifiers,  such  as  LPAR  ID,  IO  pool  ID, 
VLAN Switch and VLAN ID, or physical slot location 
ID.  These 
label 
information  from  the  ACM  label  association  cache. 
Adding ACM decision support for the Host-Ethernet-
Adapter (HEA) is ongoing work because this hardware 
became recently available. 
identifiers  are  used 
to  retrieve 
enforcing 
The  security  hooks  are  responsible  for  triggering 
control  decisions.  We 
and 
to  control  all 
implemented  six  security  hooks 
configuration functions in Dispatchable PHYP.  These 
are  guarded  calls  to  ACM  decision  methods  and  are 
located  in  the  PHYP  module  where  Dispatchable 
PHYP  processes  configuration  requests  from  the 
HMC. Depending on the resource being configured, a 
security  hook  invokes  the  appropriate  ACM  decision 
method.  If  the  method’s  return  status  is  OK  and  the 
decision is PERMIT, Dispatchable PHYP continues its 
normal  processing  of 
the  configuration  request. 
Otherwise,  it  returns  an  error  for  the  configuration 
request. 
4.3. Testing 
We  utilized  proprietary  debugging  tools  from  the 
PHYP  Design  and  Development  Team    for  testing 
ACM  functionality  on  the  platform.  As  previously 
described,  the  access  control  decisions  are  triggered 
during  the  processing  of  configuration  requests  in 
Dispatchable PHYP. For testing the decision functions, 
we  depended  on  the  capability  to  set  a  policy  and 
assign  labels  to  LPARs  and  resources  on  a  PHYP 
platform. 
To install a policy on a platform, we used a PHYP 
debugging  utility  to  load  our  binary  and  mapping 
policy  representation  files  directly  into  Dispatchable 
PHYP  memory.  We 
leveraged  PHYP 
Development  Team’s  native  macro  feature,  which 
allows Dispatchable PHYP to be extended with a code 
module  written  in  C++.    A  native  macro  can  be 
invoked via the PHYP debugging interface. Leveraging 
this macro feature, we implemented a cfacm macro to 
drive  MAC  operations  on  the  platform.  The  cfacm 
macro provides operations such as activating a policy, 
assigning security labels to LPARs and resources, and 
invoking  the  ACM  decision  API.  Working  on  a 
also 
227227
the 
development  release  of  PHYP,  we  established  a  data 
connection via telnet to Dispatchable PHYP using the 
Virtual  Server  debugging  interface.    This  provided  a  
command line interface for invoking the cfacm macro. 
This feature is available only in development releases.  
We  tested  our  MAC  enforcement  on  a  System  p 
model  520  hardware  using 
latest  PHYP 
development release. We loaded the binary policy from 
our example in Figure 3 which consisted of 192 bytes 
into Dispatchable PHYP.  Note that the binary policy 
grows  linear  with  the  number  of  labels  and  types. 
Using  the  cfacm  macro  we  manually  tested  ACM’s 
API  for  access  control  decisions.  We  also  tested 
activation of LPARs with conflicting CHW types using 
the  HMC.  Our  experiments  generated  the  expected 
results.  Access  to  resources  was  allowed  or  denied 
depending on the security label assignments. 
5. Lessons Learned 
In providing MAC for PHYP, we learned two major 
lessons. First, we can implement MAC non-intrusively 
on  the  commercial-grade  POWER  Hypervisor  as  a 
result of the way resources are configured exclusively 
through  Dispatchable  PHYP  and  allocated  in  PLIC 
during  runtime.  Second,  simplifying  the  notion  of  a 
security  label  helped  non-security  people  with  their 
understanding and application of a security policy. 
Non-intrusive design and implementation: Initially, 
it was proposed to provide MAC  enforcement on the 
HMC. This is an attractive solution because it requires 
no  changes  to  the  PHYP  platform.  Since  the  HMC 
already provides LPAR configuration to PHYP, it can 
easily  ensure  that  an  LPAR  configuration  does  not 
violate  the  access  control  policy.  However,  this 
approach  does  not  scale  for  managed  platforms.  In  a 
PHYP  platform,  multiple  HMCs  are  allowed 
to 
manage  a  single  PHYP  platform.  Enforcing  MAC  on 
the  HMC  would  require  coordination  and  coherence 
among  the  HMCs.  This  coordination  to  synchronize 
their  MAC  operations  overly  complicates 
the 
manageability  of  MAC.  Thus,  having  MAC 
enforcement  in  PHYP  simplifies  MAC  processing, 
eliminates  the  dependency  on  the  HMC,  and  ensures 
consistent  enforcement  of  a  central  security  policy 
independently of the HMC.  
the  HMC  can  contribute 
to  MAC 
enforcement  on  the  platform  by  determining  the 
validity  of 
the  MAC  operations  before  sending 
configuration requests to PHYP. The HMC can ensure 
that  HMC  users  (administrators)  do  not  try  to  assign 
incompatible  resources  to  LPARs  by  listing  only 
resources  for  assignment  to  LPARs  based  on  their 
security labels. The HMC proves useful for authoring 
security  policies  and  managing  label  associations  as 
Ideally 
228228
well as providing configuration guidance to users. It is 
less useful for single-handedly enforcing the policy. 
Logical
Partition