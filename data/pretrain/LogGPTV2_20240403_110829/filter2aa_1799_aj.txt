### Physical and Logical States of Interrupts

- **Physically in Service:**
  - Y . . . . . . . . . Y Y Y . . . . .
- **Physically Masked:**
  - Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y
- **Physically Requested:**
  - Y . . . . . . . . . . Y Y Y . . . . .
- **Level Triggered:**
  - . . . . . . . . . . . . . . . . . . . .

### APIC Command with Hyper-V Enabled

The `!apic` command on a system running with Hyper-V enabled shows the presence of the SynIC (SINTI Controller), as described in Chapter 9. During local kernel debugging, this command displays the APIC associated with the current processor. For crash dumps or remote systems, you can use the `~` (tilde) command followed by the processor number to switch to the desired processor. The ID label will indicate which processor is being examined.

Example:
```plaintext
lkd> !apic
Apic (x2Apic mode)  ID:1 (50014)  LogDesc:00000002  TPR 00
TimeCnt: 00000000clk  SpurVec:df  FaultVec:e2  error:0
Ipi Cmd: 00000000`0004001f  Vec:1F  FixedDel    Dest=Self  edg high
Timer..: 00000000`000300d8  Vec:D8  FixedDel    Dest=Self  edg high
Linti0.: 00000000`000100d8  Vec:D8  FixedDel    Dest=Self  edg high
Linti1.: 00000000`00000400  Vec:00  NMI         Dest=Self  edg high
Sinti0.: 00000000`00020030  Vec:30  FixedDel    Dest=Self  edg high
Sinti1.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sinti2.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sinti3.: 00000000`000000d1  Vec:D1  FixedDel    Dest=Self  edg high
Sinti4.: 00000000`00020030  Vec:30  FixedDel    Dest=Self  edg high
Sinti5.: 00000000`00020031  Vec:31  FixedDel    Dest=Self  edg high
Sinti6.: 00000000`00020032  Vec:32  FixedDel    Dest=Self  edg high
Sinti7.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sinti8.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sinti9.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintia.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintib.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintic.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintid.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintie.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
Sintif.: 00000000`00010000  Vec:00  FixedDel    Dest=Self  edg high
TMR: 95, A5, B0
IRR: 
ISR: 
```

### I/O APIC Output

The following output is for the `!ioapic` command:

```plaintext
0: kd> !ioapic
Controller at 0xfffff7a8c0000898 I/O APIC at VA 0xfffff7a8c0012000
IoApic @ FEC00000  ID:8 (11)  Arb:0
Inti00.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti01.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti02.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti03.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti04.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti05.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti06.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti07.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti08.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti09.: ff000000`000089b0  Vec:B0  LowestDl  Lg:ff000000  lvl high
Inti0A.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
Inti0B.: 00000000`000100ff  Vec:FF  FixedDel  Ph:00000000  edg high  m
```

### Software Interrupt Request Levels (IRQLs)

Windows imposes its own interrupt priority scheme known as Interrupt Request Levels (IRQLs). The kernel represents IRQLs internally as a number from 0 through 31 on x86 and from 0 to 15 on x64 (and ARM/ARM64), with higher numbers indicating higher priorities. Interrupts are serviced in priority order, and a higher-priority interrupt preempts the servicing of a lower-priority interrupt. When a high-priority interrupt occurs, the processor saves the interrupted machine state. The interrupted thread resumes executing where it left off. When the kernel lowers the IRQL, lower-priority interrupts that were masked might materialize. If this happens, the kernel repeats the process to handle the new interrupts.

#### IRQL Priority Levels

IRQL priority levels have a different meaning than thread-scheduling priorities. A scheduling priority is an attribute of a thread, whereas an IRQL is an attribute of an interrupt source, such as a keyboard or a mouse. Each processor has an IRQL setting that changes as operating system code executes. On x64 systems, the IRQL is stored in the CR8 register, which maps back to the TPR on the APIC.

#### Managing IRQLs

Components of the system, including the kernel and device drivers, attempt to keep the IRQL at passive level (sometimes called low level). This is because device drivers can raise the IRQL to mask interrupts during critical operations. When the system is not performing any interrupt work or handling a software interrupt such as a DPC or APC, the IRQL is always 0. Returning to a user-mode thread with the IRQL above 0 results in an immediate system crash (bugcheck) and is a serious driver bug.

#### Preemption and Context Switching

Threads running at dispatch level (IRQL 2) behave in a single-threaded, cooperative fashion. It is illegal to wait on a dispatcher object at this IRQL, as a context switch to a different thread (or the idle thread) would never occur. Additionally, only nonpaged memory can be accessed at IRQL DPC/dispatch level or higher. Violating these restrictions results in a system crash with an `IRQL_NOT_LESS_OR_EQUAL` or `DRIVER_IRQL_NOT_LESS_OR_EQUAL` crash code.

At IRQL 1 (APC level), preemption is still active, and context switching can occur. This makes IRQL 1 behave as a thread-local IRQL instead of a processor-local IRQL. A thread at passive level (IRQL 0) can preempt a thread running at APC level (IRQL 1), as the scheduler decides which thread controls the processor below IRQL 2.