---
author: Amr Abdelrazik
category: 观点
comments_data:
- date: '2017-08-04 16:13:41'
  message: 文中所说的分布式数据服务Elastic不是一个产品，应该指的是The Open Source Elastic Stack，一系列产品。
  postip: 58.63.60.83
  username: 文剑一飞 [Chrome 60.0|Windows 10]
count:
  commentnum: 1
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 15909
date: '2017-08-04 08:03:15'
editorchoice: false
excerpt: 如果你只是听信了只言片语，你可能会认为这三个开源项目正为了称霸容器界而殊死搏斗。你可能还相信从他们中选出一个如宗教信仰般神圣——真正的信徒会忠于他们的信仰，而且会烧死那些敢于考虑替代方案的异教徒。
fromurl: https://mesosphere.com/blog/docker-vs-kubernetes-vs-apache-mesos/
id: 8751
islctt: true
largepic: /data/attachment/album/201708/04/080248k1iovvt8rgzlirij.jpg
permalink: /article-8751-1.html
pic: /data/attachment/album/201708/04/080248k1iovvt8rgzlirij.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 如果你只是听信了只言片语，你可能会认为这三个开源项目正为了称霸容器界而殊死搏斗。你可能还相信从他们中选出一个如宗教信仰般神圣——真正的信徒会忠于他们的信仰，而且会烧死那些敢于考虑替代方案的异教徒。
tags:
- Docker
- Kubernetes
- Mesos
- 容器
- 编排
thumb: false
title: Docker、Kubernetes 和 Apache Mesos 对比中的一些误区
titlepic: true
translator: rieonke
updated: '2017-08-04 08:03:15'
---
![](/data/attachment/album/201708/04/080248k1iovvt8rgzlirij.jpg)
有无数的文章、讨论、以及很多社区喋喋不休地比较 Docker、Kubernetes 和 Mesos。如果你只是听信了只言片语，你可能会认为这三个开源项目正为了称霸容器界而殊死搏斗。你可能还相信从他们中选出一个如宗教信仰般神圣——真正的信徒会忠于他们的信仰，而且会烧死那些敢于考虑替代方案的异教徒。
那都是废话。
虽然所有这三种技术都使得使用容器来部署、管理和伸缩应用成为可能，但实际上它们各自解决了不同的问题，并且根植于迥异的上下文环境中。事实上，这三种被广泛采用的工具链，都是有差别的。
让我们重新审视每个项目的原始任务、技术架构，以及它们是如何相互补充和交互的，而不是纠结于比较这些快速迭代的技术之间重叠的特性。
### 让我们从 Docker 开始……
Docker 公司，始于名为 dotCloud 的平台即服务（PaaS）供应商。dotCloud 团队发现，在许多应用和客户之间管理依赖和二进制文件时需要付出大量的工作。因此他们将 Linux 的 [cgroups](https://en.wikipedia.org/wiki/Cgroups) 和 namespace 的一些功能合并成一个单一且易于使用的软件包，以便于应用程序可以一致地运行在任何基础设施上。这个软件包就是所谓的 [Docker 镜像](https://docs.docker.com/engine/docker-overview/)，它提供了如下的功能：
* **将应用程序和依赖库封装在一个软件包**（即 Docker 镜像）中，因此应用可以被一致地部署在各个环境上；
* **提供类似 Git 的语义**，例如 `docker push`，`docker commit` 等命令让应用开发者可以快速接受这门新的技术，并将其融入到现有的工作流中；
* **定义 Docker 镜像为不可变的层**，支持不可变的基础设施。新提交的变更被分别保存为只读层，让复用镜像和追踪变更记录变得十分简单。层还通过只传输更新而不是整个镜像来节省磁盘空间和网络流量；
* **通过实例化不可变的镜像**和读写层来运行 Docker 容器，读写层可以临时地存储运行时变更，从而轻松部署和扩展应用程序的多个实例。
Docker 变得越来越受欢迎，开发者们开始从在笔记本电脑上运行容器转而在生产环境中运行容器。跨多个机器之间协调这些容器需要额外的工具，这称之为 容器编排   container orchestration 。有趣的是，第一个支持 Docker 镜像的容器编排工具（2014 年 6月）是 Apache Mesos 的 [Marathon](https://mesosphere.github.io/marathon/)（后面会有详细介绍) 。那年，Docker 的创始人兼首席技术官 Solomon Hykes 将 Mesos 推荐为“[生产集群的黄金标准](https://www.google.com/url?q=https://www.youtube.com/watch?v=sGWQ8WiGN8Y&feature=youtu.be&t=35m10s&sa=D&ust=1500923856666000&usg=AFQjCNFLtW96ZWnOUGFPX_XUuVOPdWrd_w)”。不久之后，除了 Mesos 的 Marathon 之外，还出现了许多的容器编排技术：[Nomad](https://www.google.com/url?q=https://www.youtube.com/watch?v=sGWQ8WiGN8Y&feature=youtu.be&t=35m10s&sa=D&ust=1500923856666000&usg=AFQjCNFLtW96ZWnOUGFPX_XUuVOPdWrd_w)、[Kubernetes](https://www.nomadproject.io/)，不出所料还有 Docker Swarm （[它如今是 Docker 引擎的一部分](https://blog.docker.com/2016/06/docker-1-12-built-in-orchestration/)）。
随着 Docker 开始商业化其开源的文件格式（LCTT 译注：指 Docker 镜像的 dockerfile 文件格式），该公司还开始引入工具来完善其核心的 Docker 文件格式和运行时引擎，包括：
* 为公开存储 Docker 镜像的而生的 Docker hub；
* 存储私有镜像的 Docker 仓库（Docker registry）；
* Docker cloud，用于构建和运行容器的管理性服务；
* Docker 数据中心作为一种商业产品体现了许多 Docker 技术；
![Docker](/data/attachment/album/201708/04/080318dlup8zxu1plx55uu.png)
*来源: [www.docker.com](http://www.docker.com)*
Docker 将软件及其依赖关系封装在一个软件包中的洞察力改变了软件行业的游戏规则，正如 mp3 的出现重塑了音乐行业一般。Docker 文件格式成为行业标准，领先的容器技术供应商（包括 Docker、Google、Pivotal、Mesosphere 等) 组建了 [ 云计算基金会   Cloud Native Computing Foundation  (CNCF)](https://www.cncf.io/) 和 [ 开放容器推进联盟   Open Container Initiative  (OCI)](https://www.opencontainers.org/)。如今，CNCF 和 OCI 旨在确保容器技术之间的互操性和标准化接口，并确保使用任何工具构建的任何 Docker 容器都可以在任何运行时或基础架构上运行。
### 进入 Kubernetes
Google 很早就认识到了 Docker 的潜力，并试图在 Google Cloud Platform （GCP）上提供容器编排“即服务”。 Google 在容器方面拥有丰富的经验（是他们在 Linux 中引入了 cgroups），但现有的内部容器和 Borg 等分布式计算工具直接与其基础架构相耦合。所以，Google 没有使用原有系统的任何代码，而是从头开始设计 Kubernetes （K8S）来编排 Docker 容器。 Kubernetes 于 2015 年 2 月发布，其目标和考虑如下：
* **为应用程序开发人员提供**编排 Docker 容器的强大工具，而无需与底层基础设施交互；