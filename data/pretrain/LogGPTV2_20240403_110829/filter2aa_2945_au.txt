        radius = 0;
        NumCircles++;
    }
    public Circle(int initialRadius) // overloaded constructor
    {
        radius = initialRadius;
        NumCircles++;
    }
}
All Circle objects share the same instance of the NumCircles field, so the
statement NumCircles++; increments the same data every time a new
instance is created. Notice that you cannot prefix NumCircles with the this
keyword because NumCircles does not belong to a specific object.
You can access the NumCircles field from outside the class by specifying
the Circle class rather than a Circle object, such as in the following example:
Click here to view code image
Console.WriteLine($"Number of Circle objects: {Circle.NumCircles}");
Note Keep in mind that static methods are also called class methods.
However, static fields aren’t usually called class fields; they’re just
called static fields (or sometimes static variables).
Download from finelybook PI:EMAIL
286
Creating a static field by using the const keyword
By prefixing the field with the const keyword, you can declare that a field is
static but that its value can never change. The keyword const is short for
constant. A const field does not use the static keyword in its declaration but
is nevertheless static. However, for reasons that are beyond the scope of this
book, you can declare a field as const only when the field is a numeric type
(such as int or double), a string, or an enumeration. (You will learn about
enumerations in Chapter 9, “Creating value types with enumerations and
structures.”) For example, here’s how the Math class declares PI as a const
field:
Click here to view code image
class Math
{
    ...
    public const double PI = 3.14159265358979;
}
Understanding static classes
Another feature of the C# language is the ability to declare a class as static. A
static class can contain only static members. (All objects that you create by
using the class share a single copy of these members.) The purpose of a static
class is purely to act as a holder of utility methods and fields. A static class
cannot contain any instance data or methods, and it does not make sense to
try to create an object from a static class by using the new operator. In fact,
you can’t actually use new to create an instance of an object using a static
class even if you want to. (The compiler will report an error if you try.) If you
need to perform any initialization, a static class can have a default constructor
as long as it is also declared as static. Any other types of constructor are
illegal and will be reported as such by the compiler.
If you were defining your own version of the Math class, one containing
only static members, it could look like this:
Click here to view code image
public static class Math
{
    public static double Sin(double x) {...}
    public static double Cos(double x) {...}
Download from finelybook PI:EMAIL
287
    public static double Sqrt(double x) {...}
    ...
}
Note The real Math class is not defined this way because it actually
does have some instance methods.
Static using statements
Whenever you call a static method or reference a static field, you must
specify the class to which the method or field belongs, such as Math.Sqrt or
Console.WriteLine. Static using statements enable you to bring a class into
scope and omit the class name when accessing static members. They operate
in much the same way as ordinary using statements that bring namespaces
into scope. The following example illustrates how to use them:
Click here to view code image
using static System.Math;
using static System.Console;
...
var root = Sqrt(99.9);
WriteLine($"The square root of 99.9 is ");
Note the use of the keyword static in the using statements. The example
brings the static methods of the System.Math and System.Console classes into
scope (you have to fully qualify the classes with their namespaces). You can
then simply call the Sqrt and WriteLine methods. The compiler works out to
which class each method belongs. However, herein lies a potential
maintenance issue. Although you are typing less code, you have to balance
this with the additional effort required when someone else has to maintain
your code, because it is no longer clear to which class each method belongs.
IntelliSense in Visual Studio helps to some extent, but to a developer reading
through the code, it can obfuscate matters when the developer is trying to
track down the causes of bugs. Use static using statements carefully; the
preferred style of the author is not to utilize them, although you are free to
make your own choice!
Download from finelybook PI:EMAIL
288
In the final exercise in this chapter, you will add a private static field to
the Point class and initialize the field to 0. You will increment this count in
both constructors. Finally, you will write a public static method to return the
value of this private static field. With this field, you can find out how many
Point objects you have created.
Write static members and call static methods
1. In Visual Studio 2017, display the Point class in the Code and Text
Editor window.
2. Add a private static field called objectCount of type int to the Point class
immediately before the first constructor. Initialize it to 0 as you declare
it, like this:
Click here to view code image
class Point
{
    private int x, y;
    private static int objectCount = 0;
    public Point()
    {
        ...
    }
    ...
}
Note You can write the keywords private and static in any order
when you declare a field such as objectCount. However, the
preferred order is private first, static second.
3. Add a statement to both Point constructors to increment the objectCount
field, as shown in bold type in the code example that follows.
The Point class should now look like this:
Click here to view code image
Download from finelybook PI:EMAIL
289
class Point
{
    private int x, y;
    private static int objectCount = 0;
    public Point()
    {
        this.x = -1;
        this.y = -1;
        objectCount++;
    }
    public Point(int x, int y)
    {
        this.x = x;
        this.y = y;
        objectCount++;
    }
    ...
}
Each time an object is created, its constructor is called. As long as you
increment the objectCount in each constructor (including the default
constructor), objectCount will hold the number of objects created so far.
This strategy works only because objectCount is a shared static field. If
objectCount were an instance field, each object would have its own
personal objectCount field that would be set to 1.
The question now is this: How can users of the Point class find out how
many Point objects have been created? At the moment, the objectCount
field is private and not available outside the class. A poor solution would
be to make the objectCount field publicly accessible. This strategy
would break the encapsulation of the class, and you would then have no
guarantee that the objectCount field’s value was correct because anyone
could change the value in the field. A much better idea is to provide a
public static method that returns the value of the objectCount field. This
is what you will do now.
4. Add a public static method to the end of Point class called ObjectCount
that returns an int but does not take any parameters. This method should
return the value of the objectCount field, as shown in bold type here:
Click here to view code image
class Point
Download from finelybook PI:EMAIL
290
{
    ...
    public static int ObjectCount() => objectCount;
}
5. Display the Program class in the Code and Text Editor window. Add a
statement to the doWork method to write the value returned from the
ObjectCount method of the Point class to the screen, as shown in bold
type in the following code example:
Click here to view code image
static void doWork()
{
    Point origin = new Point();
    Point bottomRight = new Point(1366, 768);
    double distance = origin.distanceTo(bottomRight);
    Console.WriteLine($"Distance is: ");
    Console.WriteLine($"Number of Point objects:
{Point.ObjectCount()}");
}
The ObjectCount method is called by referencing Point, the name of the
class, and not the name of a Point variable (such as origin or
bottomRight). Because two Point objects have been created by the time
ObjectCount is called, the method should return the value 2.
6. On the Debug menu, click Start Without Debugging.
Confirm that the message “Number of Point objects: 2“ is written to the
console window (after the message displaying the value of the distance
variable).
7. Press Enter to close the program and return to Visual Studio 2017.
Anonymous classes
An anonymous class is a class that does not have a name. This sounds rather
strange, but it is actually quite handy in some situations that you will see later
in this book, especially when using query expressions. (You learn about
query expressions in Chapter 20, “Decoupling application logic and handling
events.”) For the time being, you’ll have to take it on faith that they are
useful.
Download from finelybook PI:EMAIL
291
You create an anonymous class simply by using the new keyword and a
pair of braces defining the fields and values that you want the class to
contain, like this:
Click here to view code image
myAnonymousObject = new { Name =  "John ", Age = 47 };
This class contains public fields called Name (initialized to the string
“John“) and Age (initialized to the integer 47). The compiler infers the types
of the fields from the types of the data you specify to initialize them.
When you define an anonymous class, the compiler generates its own
name for the class, but it won’t tell you what it is. Anonymous classes,
therefore, raise a potentially interesting conundrum: if you don’t know the
name of the class, how can you create an object of the appropriate type and
assign an instance of the class to it? In the code example shown earlier, what
should the type of the variable myAnonymousObject be? The answer is that
you don’t know—that is the point of anonymous classes! However, this is not
a problem if you declare myAnonymousObject as an implicitly typed variable
by using the var keyword, like this:
Click here to view code image
var myAnonymousObject = new { Name =  "John ", Age = 47 };
Remember that the var keyword causes the compiler to create a variable
of the same type as the expression used to initialize it. In this case, the type of
the expression is whatever name the compiler happens to generate for the
anonymous class.
You can access the fields in the object by using the familiar dot notation,
as demonstrated here:
Click here to view code image
Console.WriteLine($"Name: {myAnonymousObject.Name} Age:
{myAnonymousObject.Age}"};
You can even create other instances of the same anonymous class but with
different values, such as in the following:
Click here to view code image
var anotherAnonymousObject = new { Name =  "Diana ", Age = 53 };
Download from finelybook PI:EMAIL
292
The C# compiler uses the names, types, number, and order of the fields to
determine whether two instances of an anonymous class have the same type.
In this case, the variables myAnonymousObject and
anotherAnonymousObject have the same number of fields, with the same
name and type, in the same order, so both variables are instances of the same
anonymous class. This means that you can perform assignment statements
such as this:
Click here to view code image
anotherAnonymousObject = myAnonymousObject;
Note Be warned that this assignment statement might not accomplish
what you expect to happen! You’ll learn more about assigning object
variables in Chapter 8.
There are quite a few restrictions on the contents of an anonymous class.
For example, anonymous classes can contain only public fields, the fields
must all be initialized, they cannot be static, and you cannot define any
methods for them. You will use anonymous classes periodically throughout
this book and learn more about them as you do so.
Summary
In this chapter, you saw how to define new classes. You learned that by
default the fields and methods of a class are private and inaccessible to code
outside the class, but you can use the public keyword to expose fields and
methods to the outside world. You saw how to use the new keyword to create
a new instance of a class and how to define constructors that can initialize
class instances. Finally, you saw how to implement static fields and methods
to provide data and operations that are independent of any specific instance
of a class.
If you want to continue to the next chapter, keep Visual Studio 2017
Download from finelybook PI:EMAIL
293
running and turn to  Chapter 8.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare a
class
Write the keyword class, followed by the name of the class,
followed by opening and closing braces. The methods and
fields of the class are declared between the opening and closing
braces. For example:
Click here to view code image
class Point
{
    ...
}
Declare a
constructor
Write a method whose name is the same as the name of the
class, and that has no return type (not even void). For example:
Click here to view code image
class Point
{
    public Point(int x, int y)
    {
        ...
    }
}
Call a
constructor
Use the new keyword and specify the constructor with an
appropriate set of parameters. For example:
Point origin = new Point(0, 0);
Declare a
static
method
Write the keyword static before the declaration of the method.
For example:
Click here to view code image
class Point
{
    public static int ObjectCount()
Download from finelybook PI:EMAIL
294
    {
        ...
    }
}
Call a
static
method
Write the name of the class, followed by a period, followed by
the name of the method. For example:
Click here to view code image
int pointsCreatedSoFar = Point.ObjectCount();
Declare a
static field
Use the keyword static before the type of the field. For
example:
Click here to view code image
class Point
{
    ...
    private static int objectCount;
}
Declare a
const field
Write the keyword const before the declaration of the field and
omit the static keyword. For example:
Click here to view code image
class Math
{
    ...
    public const double PI = ...;
}
Access a
static field
Write the name of the class, followed by a period, followed by
the name of the static field. For example:
Click here to view code image
double area = Math.PI * radius * radius;
Download from finelybook PI:EMAIL
295
CHAPTER 8
Understanding values and
references
After completing this chapter, you will be able to:
Explain the differences between a value type and a reference type.
Modify the way in which arguments are passed as method parameters
by using the ref and out keywords.
Convert a value into a reference by using boxing.
Convert a reference back to a value by using unboxing and casting.
Chapter 7, “Creating and managing classes and objects,” demonstrates how
to declare your own classes and how to create objects by using the new
keyword. That chapter also shows you how to initialize an object by using a
constructor. In this chapter, you will learn how the characteristics of the
primitive types—such as int, double, and char—differ from the
characteristics of class types.
Copying value type variables and classes
Most of the primitive types built into C#, such as int, float, double, and char
(but not string, for reasons that will be covered shortly) are collectively called
value types. These types have a fixed size, and when you declare a variable as
a value type, the compiler generates code that allocates a block of memory
Download from finelybook PI:EMAIL
296
big enough to hold a corresponding value. For example, declaring an int
variable causes the compiler to allocate 4 bytes of memory (32 bits) to hold
the integer value. A statement that assigns a value (such as 42) to the int
causes the value to be copied into this block of memory.
Class types such as Circle (described in Chapter 7) are handled
differently. When you declare a Circle variable, the compiler does not
generate code that allocates a block of memory big enough to hold a Circle;
all it does is allot a small piece of memory that can potentially hold the
address of (or a reference to) another block of memory containing a Circle.
(An address specifies the location of an item in memory.) The memory for
the actual Circle object is allocated only when the new keyword is used to
create the object. A class is an example of a reference type. Reference types
hold references to blocks of memory. To write effective C# programs that
make full use of the Microsoft .NET Framework, you need to understand the
difference between value types and reference types.
Note The string type in C# is actually a class. This is because there is
no standard size for a string (different strings can contain different
numbers of characters), and allocating memory for a string dynamically
when the program runs is far more efficient than doing so statically at
compile time. The description in this chapter of reference types such as
classes applies to the string type as well. In fact, the string keyword in
C# is just an alias for the System.String class.
Consider a situation in which you declare a variable named i as an int and
assign it the value 42. If you declare another variable called copyi as an int
and then assign i to copyi, copyi will hold the same value as i (42). However,
even though copyi and i happen to hold the same value, two blocks of
memory contain the value 42: one block for i and the other block for copyi. If
you modify the value of i, the value of copyi does not change. Let’s see this
in code:
Click here to view code image
Download from finelybook PI:EMAIL
297
int i = 42; // declare and initialize i
int copyi = i; /* copyi contains a copy of the data in i:
                  i and copyi both contain the value 42 */
i++;           /* incrementing i has no effect on copyi;
                  i now contains 43, but copyi still contains 42 */
The effect of declaring a variable c as a class type, such as Circle, is very
different. When you declare c as a Circle, c can refer to a Circle object; the
actual value held by c is the address of a Circle object in memory. If you
declare an additional variable named refc (also as a Circle) and you assign c
to refc, refc will have a copy of the same address as c; in other words, there is
only one Circle object, and both refc and c now refer to it. Here’s the
example in code:
Click here to view code image
Circle c = new Circle(42);
Circle refc = c;
The following illustration shows both examples. The at sign (@) in the
Circle objects represents a reference holding an address in memory:
This difference is very important. In particular, it means that the behavior
of method parameters depends on whether they are value types or reference
types. You’ll explore this difference in the next exercise.
Download from finelybook PI:EMAIL
298
Copying reference types and data privacy
If you actually want to copy the contents of a Circle object, c, into a
different Circle object, refc, instead of just copying the reference, you
must make refc refer to a new instance of the Circle class and then copy
the data, field by field, from c into refc, like this: