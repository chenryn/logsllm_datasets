# PrivateFS: A Parallel Oblivious File System

## Authors
- Peter Williams
- Radu Sion
- Alin Tomescu

### Abstract
PrivateFS is an oblivious file system that enables access to remote storage while keeping both the file contents and client access patterns secret. It is based on a new parallel Oblivious RAM mechanism (PD-ORAM), which allows client threads to engage with the server in parallel without compromising privacy.

Existing Oblivious RAMs (ORAMs) cannot support multiple client threads operating simultaneously without revealing intra- and inter-query correlations, leading to privacy leaks. Since ORAMs often require many communication rounds, this significantly constrains throughput. The mechanisms introduced in PD-ORAM eliminate this constraint, allowing throughput to be bound only by server bandwidth, thus increasing it by an order of magnitude. Additionally, new de-amortization techniques ensure that the worst-case query cost aligns with the average cost, which is fundamental for any ORAM. Extensions providing fork consistency against an actively malicious adversary are also presented.

A high-performance, fully functional PD-ORAM implementation was designed, built, and analyzed. It performs multiple queries per second on a 1TB+ database across 50ms latency links, with unamortized, bounded query latencies. Based on PD-ORAM, PrivateFS was built and deployed on Linux as a userspace file system.

### Categories and Subject Descriptors
- D.0 [Software]: General
- E.3 [Data Encryption]

### Keywords
- Access Privacy, Cloud Computing, Oblivious RAM

## 1. Introduction
Access pattern privacy is a critical concern in outsourced storage scenarios. Even with encrypted data, the sequence of locations read and written to storage can reveal information about the user and the data. For example, in a database management system running on an untrusted, encrypted file system, the file system can learn semantic information about transactions through the sequence of disk blocks accessed.

An oblivious file system allows a client to read and write without revealing the access pattern. Without access pattern privacy, accessing remote data can leak subtle information about the data itself, making full data confidentiality difficult to achieve. The oblivious file system presented here is built on the more general mechanism of Oblivious RAM (ORAM), which hides both the data and the access pattern from an untrusted host.

Since the introduction of the first ORAM, various approaches have been developed to increase query throughput. However, practical constructions have remained elusive. This paper introduces PD-ORAM ("Parallel De-amortized ORAM"), a collection of new techniques applicable to a large class of existing ORAMs, to improve their performance and practical relevance by eliminating critical bottlenecks and drawbacks. PD-ORAM is then used as the block-level building block for PrivateFS, a parallel, oblivious file system.

First, the need for supporting parallel queries in ORAM is identified and satisfied. Existing ORAMs typically require a significant number of round-trips per query, imposing strict limits on query response times and throughput. By supporting parallel querying from multiple clients, PD-ORAM eliminates the effect of query response time on throughput, enabling new multi-client scenarios.

A new de-amortization construction is introduced to process queries simultaneously with database re-shuffling. Re-shuffling is an essential and costly task that, in amortized solutions, completely blocks the server for extended periods after a certain number of queries. In PD-ORAM, the server continuously re-shuffles the database in the background, ensuring minimal client latencies for both the average and worst case.

At an overview level, the parallelization technique consists of a round-trip-optimal and wait-optimal protocol to transform a single-client "period-based" ORAM into a multi-client parallel ORAM. A "period-based" ORAM operates on small batches of queries, with its data structure not sensitive to the order of reads or modifications within a particular batch.

A fully functional PD-ORAM implementation was developed and benchmarked at multiple queries per second on a terabyte database, achieving the highest throughput to date on a medium-latency link. While the mechanisms described here can be directly applied to many different ORAM techniques, PD-ORAM is based on the ORAM described in [19], but with de-amortized level construction, support for parallel queries, and a new, simpler Bloom filter (BF) construction. PD-ORAM is then deployed and benchmarked in Linux to build PrivateFS, the first oblivious file system.

## 2. Related Work
Oblivious RAM, introduced by Goldreich and Ostrovsky [2], provides access pattern privacy to a single client accessing a remote database. The construction provided by Goldreich and Ostrovsky (GO-ORAM) requires only logarithmic storage at the client, with amortized communication and computational complexities of O(log³n). A discussion of GO-ORAM and recent extensions follows.

### 2.1 ORAM Overview
In an ORAM, the database is a set of n semantically-secure encrypted blocks, supported by read(id) and write(id, newvalue) operations. In GO-ORAM, the data is organized into log₂(n) levels, with each level consisting of up to 2^i blocks. Each block is assigned to one of the 2^i buckets at this level, determined by a hash function. Due to hash collisions, each bucket may contain from 0 to k ln n blocks.

**ORAM Reads:** To obtain the value of block id, a client must perform a read query while maintaining two invariants: (i) it never reveals which level the desired block is at, and (ii) it never looks twice in the same spot for the same block. To maintain (i), the client scans a single bucket in every level, starting at the top and working down. The hash function informs the client of the candidate bucket at each level, which the client then scans. Once the client finds the desired block, it proceeds to each lower level, scanning random buckets instead of those indicated by the hash function. For (ii), once all levels have been queried, the client re-encrypts the query result and places it in the top level, ensuring that when it repeats a search for this block, it will locate the block immediately in a different location, and the rest of the search pattern is randomized.

**ORAM Writes:** Writes are performed identically to reads in terms of the data traversal pattern, with the exception that the new value is inserted into the top level at the end.

**Level Overflows:** Once a level is full, it is emptied into the level below. This second level is then re-encrypted and re-ordered according to a new hash function. Each level overflows once the level above it has been emptied twice. Any re-ordering must be performed obliviously, so the adversary cannot make any correlation between the old and new block locations. A sorting network is used to re-order the blocks. To enforce invariant (i), all buckets must contain the same number of blocks, so partially empty buckets are filled with fake blocks.

### 2.2 Recent Developments
Starting with [18], researchers have sought to improve the overhead from the polylogarithmic performance of the original ORAM. Williams et al. [19] introduced a faster ORAM variant with correctness guarantees, with computational complexity costs and storage overheads of only O(log n log log n) (amortized per-query), under the assumption of O(√n) temporary client memory. Their work uses client storage to speed up the re-shuffle process by taking advantage of the predictable nature of a merge sort on uniform random data.

Recently, Pinkas et al. [13] introduced a new approach to speed up ORAM using the Cuckoo hash construction, but this was shown to leak access privacy information [3]. A similar, but secure, approach was then developed [3], which has found continued utility in other solutions [4, 8].

Researchers have long recognized the utility of constructions with efficient worst cases. The first de-amortized construction followed shortly after the introduction of Oblivious RAM [11]. More recent solutions have also featured de-amortized constructions [1, 4, 8, 14]. These de-amortized solutions are mostly based on the same core idea: constructing future levels in the background while still querying copies of current levels. One exceptional ORAM [14] is naturally un-amortized, performing a well-defined ORAM update on every query.

These previous solutions do not apply directly to a Bloom filter-based ORAM; this de-amortization requires maintaining a delete log to delay level updates until after the corresponding shuffle. A promising recursive construction technique is introduced in [16] under the assumption of O(n log n) reliable client storage. Using this storage, it promises to reduce the level construction cost while requiring only a constant number of online round trips. The drawback is the assumed O(n log n) client storage—enough to keep track of the positions of all items. An alternative construction, requiring only O(√n) storage, recursively uses a log n-round-trip ORAM to store this position map but now incurs log n round trips per query.

Another notable alternative to the constructions of log(n) round trips is found in [17]; Ding et al. build an Oblivious RAM requiring only a constant number of online round trips. The main idea is to extend Goldreich's √n-solution [2] to store the recent query cache in client memory. The drawback is the significantly higher shuffle cost, as the entire database must be scanned once the cache is filled (e.g., after √n queries).

Another constant-round-trip solution, based on the same core caching idea as [17] and [1], is introduced in [6], but the single-level format prevents de-amortization. The constant-round-trip claim depends on the assumption of M = n¹/u client memory for a constant u. Nevertheless, important notions regarding optimal use of local memory in performing efficient oblivious external-memory sorts are introduced.

In addition to providing de-amortization for the construction in [19], PD-ORAM introduces a general approach to de-amortization, based on rearranging levels to safely allow querying during level re-construction. Different constraints of this base ORAM require new techniques, but the core idea remains similar to related de-amortization work. This de-amortization approach applies to any ORAM with a logarithmic number of levels, including a Bloom filter-based ORAM [19], the original Goldreich-Ostrovsky logarithmic ORAM [2], and recent cuckoo-hash based solutions [3], though prior work [4, 11] has already de-amortized the latter two solutions.

A multi-client ORAM is introduced in [7]. Because the client state (aside from the secret key) is stored on the server and scanned on every access, clients can take turns performing accesses. PD-ORAM takes this notion one step further: not only are the clients "stateless," but accesses are actually performed in parallel. Clients begin future accesses while other clients are still processing previous ones.

In this paper, we choose to instantiate our Bloom-filter based ORAM from [19]. Regarding the choice to use Bloom filters, we are aware of two solutions with better than the Bloom filter ORAM’s O(log² n) complexity: one provided by Stefanov et al. [16] and one provided by Goodrich and Mitzenmacher [3]. Neither solution, however, can provide detection of misbehavior by an actively malicious adversary, which we deem to be an important property. Moreover, the techniques we introduce still apply to many existing ORAMs.

### 2.3 When Reality Hits
PD-ORAM is unique in providing a tangible de-amortized implementation. De-amortized constructions do not always lead readily to an actual implementation. Instructions such as "perform a chunk of work sized x" or "run the shuffle in the background while querying" are fine for establishing existence proofs but can be devastatingly inappropriate in achieving an actual prototype due to large hidden constants. New techniques that address these hidden complications of de-amortization are presented in Section 5.3.

A randomized shell sorting network identified by Goodrich et al. [5] was subsequently employed to construct an Oblivious RAM [3, 13]. This sort procedure was used in the first design of PD-ORAM but was found to result in too many disk seeks to make it usable even on a medium-sized database. The randomized nature of the shell sort guarantees that the order of item access appears non-sequential and random, making efficient use of rotational hard disks difficult. The amortized cost of constructing the bottom level in a terabyte database is in the range of hundreds of disk seeks per query, already putting the implementation outside the targeted performance goals.

To understand this in more detail, consider the construction of the largest level of a 1 TB database. This level contains at least 0.5 TB of data. For 10 KB blocks, this translates into 50 million blocks. The randomized shell sort makes 6k log₂ n random passes across the database, incurring a total of 6kn log₂ n seeks every n queries, where k influences the sort failure probability. For n = 5 × 10⁷, log₂ n = 23, translating to 138 × k disk seeks per query for the largest level alone.

For k = 4 as suggested in the original paper [5], this amortizes to 550+ disk seeks per query. Even for high-speed, low-latency disks with 6ms seek times, this becomes at least 3.3 seconds/query (in addition to any/all other significant network and CPU overheads).

**Multiple Disks:** This can be mitigated by using multiple disks at additional cost, reducing the number of seeks for each disk linearly in the added cost. However, increasing performance linearly in the added cost is not surprising nor desirable, and an efficient base-case construction should be found instead.

Unfortunately, ORAM imposes a unique sorting requirement that is difficult to satisfy using the randomized shell sort. This requirement derives from the fact that, to maintain privacy, the sort must succeed with overwhelming probability. Moreover, all sorts must be indistinguishable, eliminating the possibility of retrying in the case of failure. Observation of a sort failure translates into an advantage at distinguishing the permutation from random, leading to a privacy leak.

While in other applications it may suffice to repeat the sort until it succeeds, when applied to ORAM, the sort parameter k must be chosen to guarantee success with overwhelming probability. In [5], the failure rate is determined to be very low, but the practical implications of this requirement are significant.