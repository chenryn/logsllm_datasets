### Optimized Text

#### 4.3.1 Security Proof
We prove the security of the M P SI protocol variant. Note that while the server may not adhere to the prescribed computation, such as by returning an encrypted element \( El(si) \) without testing the Bloom filter, this does not compromise the correctness of the computation. The client always performs the intersection locally with its input set. The server can only violate its own privacy by revealing additional input, and in most practical situations where privacy is relevant, it has no incentive to do so. Therefore, there is always a server in the real model leading to the same output as in the ideal model.

**Theorem 2.** If the quadratic residuosity assumption holds, then the M P SI protocol implements certified private set intersection in the malicious model.

**Proof:**

- **Confidentiality of the Client:**
  All inputs are encrypted using IND-CPA secure encryption (under the quadratic residuosity assumption).

- **Confidentiality of the Server:**
  The client cannot predict the encrypted element \( se \) for any element \( s \) of the server. It is indistinguishable from a random number without the knowledge of \( e \). Therefore, the client cannot force a hash collision, even if the hash functions of the Bloom filter are reversible, with a chosen set presented to the trusted third party. Any collision is random.

  The probability of a false positive match between the Bloom filter and an element in the server’s set is \( 2^{-k} + 2^{-l} \). The probability of falsely revealing an element by the server is therefore negligible in \( k \) or \( l \).

To ensure security against a malicious client or server, it must be shown that for any possible behavior in the real model, there is an input that the client or server provides to the TTP in the ideal model, such that their view in the real protocol is efficiently simulatable from their view in the ideal model.

**Construction of a Simulator \( SIMS \) from a Malicious Real-World Server \( \hat{S} \):**

1. The simulator \( SIMS \) executes KeyGen(\( \kappa \)) in the GM encryption.
2. The simulator creates an all-ones Bloom filter \( b \), i.e., \( bi = 1 \) (for \( i = 1, \ldots, m \)). The simulator sends \( n, u, E(b1), \ldots, E(bm) \) and simulates the signature \( S(E(b1), \ldots, E(bm)) \).
3. After receiving \( El(s′_1), \ldots, El(s′_w) \) from the malicious server \( \hat{S} \), the simulator decrypts \( s′_1, \ldots, s′_w \).
4. The simulator now plays the role of the ideal server interacting with the TTP (and the ideal client). The simulator submits \( s′_1, \ldots, s′_w \) to the TTP.

Since GM encryption is IND-CPA secure under the quadratic residuosity assumption, the view of the malicious server \( \hat{S} \) in the simulation by \( SIMS \) and in the real protocol are indistinguishable.

**Output of (Honest) Real Client \( C \) Interacting with \( \hat{S} \):**

For each set \( s′_1, \ldots, s′_w \) the client \( C \) receives, there is an input set \( s1, \ldots, sw \) by the server \( \hat{S} \). The client builds the intersection \( \{c1, \ldots, cv\} \cap \{s′_1, \ldots, s′_w\} \), and each element \( s′_i \) has been used by the simulator in the ideal model, such that the outputs are identical.

**Construction of a Simulator \( SIMC \) from a Malicious Real-World Client \( \hat{C} \):**

1. The simulator \( SIMC \) plays the role of the trusted third party \( T \) performing the certification. After receiving \( c1, \ldots, cv \), the simulator computes the encrypted Bloom filter. It records the set \( C = \{c1, \ldots, cv\} \) and returns the encrypted and signed Bloom filter \( E(b1), \ldots, E(bm), S(E(b1), \ldots, E(bm)) \).
2. The simulator now plays the role of the real-world server. After receiving \( E(b1), \ldots, E(bm), S(E(b1), \ldots, E(bm)) \), the simulator verifies the signature. If it does not check, it aborts.
3. The simulator now plays the role of the ideal client interacting with the TTP (and the ideal server). The simulator submits \( C \).
4. After receiving the intersection \( I \), the simulator creates \( w - |I| \) random elements and adds them and the elements in \( I \) to \( S' = \{s′_1, \ldots, s′_w\} \). It encrypts each bit of each \( s′_i \) and sends \( E(s′_{1,1}), \ldots, E(s′_{w,l}) \) to the client \( \hat{C} \).

Since the set \( C \) equals the client set \( \{c1, \ldots, cv\} \) and the set \( S \) only contains the elements in \( I \) and randomly chosen elements, the view of the malicious client \( \hat{C} \) in the simulation by \( SIMC \) and in the real protocol are indistinguishable.

#### 4.4 Data Transfer
It is often required to transfer additional data \( di \) (e.g., a database tuple) along with a matching element \( si \). Our protocols can be easily extended to accommodate data transfer. Let \( EKi(x) \) denote the symmetric encryption with key \( Ki \). The server chooses a random key \( Ki \) in the symmetric encryption system for each element \( si \). It uses the (bit-wise) expanded ciphertext \( El(Ki) \) of the key instead of the expanded ciphertext \( El(si) \) of the element in preparing its response and also returns \( EKi(si, di) \) to the client. The client can now recover the key \( Ki \), if it used to be able to recover the element \( si \) (i.e., in case of a match). Using the key, it can decrypt the data.

#### 4.5 Comparison
We compare our M P SI protocol to the best-known private set intersection protocol in the malicious model in [10]. We compare correctness, communication complexity, and computational performance. Unlike [10], we do not require random oracles or any assumption stronger than the hardness of determining quadratic residuosity.

**4.5.1 Correctness**
Bloom filters may produce false positives. In our case, the probability of a false positive is \( 2^{-k} + 2^{-l} \). Note that the parameters can be chosen to make this probability arbitrarily small.

In [10], there is no explicit correctness parameter stated, but it has an implicit one depending on its security parameter \( \kappa \). In their case, the probability of a false positive is \( 2^{-\kappa} \).

**4.5.2 Communication**
Depending on the correctness parameters, we also increase communication complexity. We transfer \( m + lw \) group elements. Assuming \( m \) is chosen based on the client’s set size, we transfer \( O(kv + lw) \) group elements.

The protocol in [10] requires less communication, making it beneficial in congested networks. It transfers \( 7v + 3 \) group elements and \( w + 1 \) cryptographic hashes. Although we achieve better performance for very large client set sizes (and \( k < 7 \ln 2 < 4 \)), these seem unreasonable assumptions in practice.

**4.5.3 Performance**
We now compare the performance of our M P SI protocol to the performance of the best variant in [10]. A detailed analysis of the performance of all P SI protocols can be found in [10]. They conclude that the protocol in [10] has the lowest constants of the linear complexity protocols. This is supported by several implementations in [12].

GM encryption only uses modular multiplication, and we can prepare all quadratic residues \( r^2 \) for randomizing the ciphertexts in a pre-computation phase. The client does not need to perform any encryption—this is done during certification by the trusted third party. The server needs to expand the ciphertexts and compute the negation (k modular multiplications). It does not need to randomize each ciphertext in the expanded ciphertext, but only the result (l modular multiplications). Then it needs to compute the product of the expanded ciphertexts and the element (kl + l modular multiplications). The server performs these operations for each of its \( w \) elements. In summary, we have \( w(kl + k + 2l) \) modular multiplications.

De Cristofaro et al. [10] achieve \( 240w + 960v \) modular multiplications. If we instantiate \( k = 16 \) and \( l = 32 \), then we achieve \( 592w \) modular multiplications.

We emphasize that the analysis in [10] ignores \( v + w \) full-domain hash functions. If we estimate each full-domain hash function as 240 modular multiplications, then their cost increases to \( 480w + 1200v \). Our protocol is more efficient if the client set size \( v \) is at least one-tenth of the server set size \( w \). Furthermore, in any case, the computational load on the client using our protocols is significantly smaller, making it better suited for computationally weak devices.

De Cristofaro et al. [10] also assume pre-computation of fixed-base modular exponentiations. This may become a problem when dealing with multiple protocol instances with different parameters. If we ignore those (and, of course, our pre-computation of quadratic residues), then our protocol is more efficient if the client set size \( v \) is at least 6% of the server set size \( w \).

We conclude that our protocol has similar constants to the most efficient, linear-complexity version of [10]. We remind the reader that our protocol is secure in the standard model, whereas [10] requires random oracles. As the first P SI protocol, we show an outsourced variant in the next section.

#### 5. Outsourcing
A novel and useful feature of using Bloom filters for private set intersection is that the computation can be outsourced to an oblivious service provider, e.g., in cloud computing. The goal of an oblivious service provider—as opposed to the trusted third party in the ideal model—is that the provider does not learn anything about the inputs or the intersection (including its size). We modify our protocol as follows. The client still submits its encrypted Bloom filter \( b \) for its set \( \{c1, \ldots, cv\} \), but the server now submits a Bloom filter \( b′_i \) for each \( si \). Note that the service provider does not have access to the hash function results \( hj(si) \). The service provider...