最后，我们将构建和启动我们的容器:
```
$ cd ../database
$ docker build . -t local_database
$ docker service create -d --replicas 1 \
 --name local-database \
 --network service_network \
 --mount type=volume,source=database_volume,destination=/data/db \
                           local_database
pilssv8du68rg0oztm6gdsqse
$ cd ../application_server
$ docker build -t application_server .
$ docker service create -d -e DB_HOST=local-database \
 --replicas 3 \
 --network service_network \
 --name application-server \
 application_server
pue2ant1lg2u8ejocbsovsxy3
$ cd ../web_server
$ docker build -t web_server .
$ docker service create -d --name web-server \
 --network service_network \
 --replicas 3 \
 -e APP_NAME=application-server \
 -p 8080:8080 \
 web_server
swi95q7z38i2wepmdzoiuudv7
$ # Sanity checks
$ docker service ls
ID           NAME               MODE       REPLICAS IMAGE                PORTS
pilssv8du68r local-database     replicated 1/1      local_database 
pue2ant1lg2u application-server replicated 3/3      application_server
swi95q7z38i2 web-server         replicated 3/3      web_server            *:8080->8080/tcp
$ docker ps --format 'table {{.ID}}  {{.Image}}\t  {{.Ports}}'
CONTAINER ID  IMAGE                         PORTS
8cdbec233de7  application_server:latest     8000/tcp
372c0b3195cd  application_server:latest     8000/tcp
6be2d6e9ce77  web_server:latest             80/tcp, 8080/tcp
7aca0c1564f0  web_server:latest             80/tcp, 8080/tcp
3d621c697ed0  web_server:latest             80/tcp, 8080/tcp
d3dad64c4837  application_server:latest     8000/tcp
aab4b2e62952  local_database:latest         27017/tcp 
```
If you are having trouble with getting these services up and running, you can check the logs with `docker service logs ` in order to figure out what went wrong. You can also use `docker logs ` if a specific container is having trouble.
有了这些，我们现在可以检查我们的代码是否在`http://127.0.0.1:8080`(用户名:`user`，密码:`test`)工作:
**![](img/4ed72d17-ae93-4719-b816-0652c9da2694.png)** 
看起来它起作用了！输入凭据后，我们应该被重定向到主应用页面:
![](img/ead82399-f703-4b86-95b7-8f79dccc7a81.png)
如果我们输入一些单词，数据库会工作吗？
![](img/40ed66cb-8ada-4f16-b0e5-3a7229686190.png)
确实如此！我们真的创建了一个 1 节点群支持的服务，它是可扩展的，而且负载均衡！
# Docker 栈
正如前面几段中非常明显的那样，手动设置这些服务似乎有点麻烦，所以这里我们介绍一个新的工具，它可以帮助我们更容易地做到这一点:Docker Stack。这个工具使用一个 YAML 文件来轻松、重复地部署所有服务。
首先，我们将在尝试使用 Docker 栈配置之前清理我们的旧练习:
```
$ docker service ls -q | xargs docker service rm
pilssv8du68r
pue2ant1lg2u
swi95q7z38i2
$ docker network rm service_network
service_network
```
现在我们可以编写我们的 YAML 配置文件了，您可以很容易地注意到 CLI 与该配置文件的相似之处:
You can find more information about all the available options usable in Docker stack YAML files by visiting [https://docs.docker.com/docker-cloud/apps/stack-yaml-reference/](https://docs.docker.com/docker-cloud/apps/stack-yaml-reference/). Generally, anything you can set with the CLI commands, you can do the same with the YAML configuration.
```
version: "3"
services:
 local-database:
 image: local_database
 networks:
 - service_network
 deploy:
 replicas: 1
 restart_policy:
 condition: on-failure
 volumes:
 - database_volume:/data/db 
 application-server:
 image: application_server
 networks:
 - service_network
 depends_on:
 - local-database
 environment:
 - DB_HOST=local-database
 deploy:
 replicas: 3
 restart_policy:
 condition: on-failure 
 web-server:
 image: web_server
 networks:
 - service_network
 ports:
 - 8080:8080
 depends_on:
 - application-server
 environment:
 - APP_NAME=application-server
 deploy:
 replicas: 3
 restart_policy:
 condition: on-failure
networks:
 service_network:
volumes:
 database_volume:
```
开始我们的栈怎么样？那也很容易！栈的命令几乎与`docker services`相同:
```
$ docker stack deploy --compose-file swarm_application.yml swarm_test
Creating network swarm_test_service_network
Creating service swarm_test_local-database
Creating service swarm_test_application-server
Creating service swarm_test_web-server
$ # Sanity checks
$ docker stack ls
NAME        SERVICES
swarm_test  3
$ docker stack services swarm_test
ID           NAME                          MODE       REPLICAS            IMAGE                PORTS
n5qnthc6031k swarm_test_application-server replicated 3/3                 application_server 
v9ho17uniwc4 swarm_test_web-server         replicated 3/3                 web_server           *:8080->8080/tcp
vu06jxakqn6o swarm_test_local-database     replicated 1/1                 local_database
$ docker ps --format 'table {{.ID}}  {{.Image}}\t  {{.Ports}}'
CONTAINER ID  IMAGE                         PORTS
afb936897b0d  application_server:latest     8000/tcp
d9c6bab2453a  web_server:latest             80/tcp, 8080/tcp
5e6591ee608b  web_server:latest             80/tcp, 8080/tcp
c8a8dc620023  web_server:latest             80/tcp, 8080/tcp
5db03c196fda  application_server:latest     8000/tcp
d2bf613ecae0  application_server:latest     8000/tcp
369c86b73ae1  local_database:latest         27017/tcp
```
如果你在浏览器中再次转到`http://127.0.0.1:8080`，你会看到我们的 app 和以前一样工作！我们已经成功地用 Docker Swarm 集群上的一个文件部署了整个集群的映像！
# 打扫
我们不是那种留下无用服务的人，所以我们将移除栈并停止我们的 Swarm 集群，为下一章做准备:
```
$ docker stack rm swarm_test
Removing service swarm_test_application-server
Removing service swarm_test_web-server
Removing service swarm_test_local-database
Removing network swarm_test_service_network
$ docker swarm leave --force
Node left the swarm.
```
我们不需要清理网络或运行容器，因为一旦我们的栈消失，它们就会被 Docker 自动移除。完成这一部分后，我们现在可以进入下一章，重新开始。
# 摘要
在这一章中，我们讲述了许多事情，例如:什么是服务发现以及我们为什么需要它，容器编排基础和状态协调原则，以及编排领域的一些主要参与者。有了这些知识，我们继续使用 Docker Swarm 实现单节点完整集群，以展示如何完成类似的工作，在接近尾声时，我们使用 Docker stack 一起管理服务组，希望向您展示如何将这一切从理论转化为实践。
在下一章中，我们将开始探索 Docker 卷和数据持久性的复杂世界，所以请继续关注我们。