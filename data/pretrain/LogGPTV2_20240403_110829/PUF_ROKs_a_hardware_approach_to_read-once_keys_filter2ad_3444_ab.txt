cally, even if the contents of memory are returned to match
the program state γj, qj as it existed before the ﬁrst call to
2Observe that the program doing the encryption is separate
from the one doing the decryption. If the encryption and
decryption occurred in the same program, the decryption
would succeed, as the key would have just been dynamically
generated. In contrast, when the programs are distinct, only
the ﬁrst execution of the decryption program will succeed.
Figure 1: A sample 1-bit ring oscillator PUF
small to be measured. Thus, one cannot control or predict
the output of this PUF just by inspecting the device.
PUFs have been applied in a number of settings. One
common approach is to use the response to provide secure
cryptographic key storage [21, 20]. For instance, to protect
the key K, one could compute X = K ⊕ Ri, where ⊕ denotes
the bitwise XOR operator. As Ri is a random bit string, it
acts as a one-time pad and the value X can then be stored
in plaintext without sacriﬁcing the conﬁdentiality of K.
Other applications have also been proposed. One tech-
nique uses PUFs to bind software to hardware in a VM
environment [6]. The AEGIS secure processor [35, 36] in-
corporates a PUF for key generation and storage. Robust
PUFs have been proposed as an authentication scheme for
banking environments [14]. Finally, in previous work, we
have proposed the use of PUFs to combat insider threats by
binding authentication to trusted devices [22, 23]. In addi-
tion, we have presented preliminary design ideas underlying
this work as an extended abstract [24]; however, the current
paper signiﬁcantly expands on this work, adding a proto-
type implementation, security analysis, formal deﬁnitions,
and extensions for out-of-order processing of PUF ROKs.
3. ROKS
Our formal notion of a ROK is based on an adaptation of
Turing machines. Speciﬁcally, deﬁne the machine T to be
T =
where Q is the set of possible states, q0 is the initial state,
δ deﬁnes the transition from one state to another based on
processing the symbols Γ, given input ι. Readers familiar
with Turing machines will note that ι is new. In essence,
we are dividing the traditional input symbols into code (Γ)
and data (ι). For the sake of simplicity, we assume that ι
only consists of messages to be encrypted or decrypted and
ignore other types of input data. Thus, the deﬁnition of δ
is determined by the execution of instructions γ1, γ2, . . . , γi,
where consuming γi ∈ Γ results in the transition from state
qi to qi+1. Based on this formalism, we propose the following
primitives.
• The encrypt primitive Enc(γi, qi, m) encrypts the
message m ∈ ι given the instruction γi and the state
qi. The system then transitions to qi+1 and produces
the returned value as e(m) as a side eﬀect.
• The decrypt primitive Dec(γj, qj , e) decrypts the ci-
phertext e ∈ ι given the instruction γj and the state qj .
If the decryption is successful, the primitive returns m.
Otherwise, the return value is denoted ∅. The system
then transitions to qj+1.
Dec(γj, qj , e), the decryption will fail. The intuition here is
that a special-purpose hardware structure must provide this
self-destructing property.
Observe that an adversary A may opt to attack the cryp-
tographic algorithms themselves.
In such an attack, the
number of times the key K can be read by an authorized
party is irrelevant: A is never authorized.
If the crypto-
graphic scheme is suﬃciently weak, A may succeed in re-
covering the message (or the key itself). The ROK prop-
erty oﬀers no additional security against such an attack.
That is, we are making no special claims of cryptographic
prowess. For this reason, we require that ǫ be no smaller
than the probability of a successful attack on the crypto-
graphic scheme employed.
What is unique about our technique is that we are oﬀer-
ing a means to limit the usage of a key by an authorized
party. Clearly, with suﬃcient motivation, this authorized
party may become an adversary himself, attempting to re-
cover the key K and subvert the system. The parameter ǫ
oﬀers a means to specify the system’s defense against such
an insider threat. For the most sensitive data, an implemen-
tation of our design could require a very low level of ǫ, mak-
ing the probability of subverting the ROK property equal to
the probability of a brute-force attack on the cryptographic
algorithm. In applications that are less sensitive (i.e., the
ROK property is desirable, but not critically important), ǫ
could be larger. In short, ǫ captures the ﬂexibility to adjust
the security guarantees of the ROK according to desired im-
plementation characteristics. We will explore this idea more
in Sections 4 and 6.
4. PUF ROKS
In this section, we propose the use of PUFs to generate
ROKs, which we call PUF ROKs. Like previous work [34],
our design is based on the idea of using the PUF output to
generate a transient key dynamically. We start this section
by describing the basic hardware architecture for creating a
PUF ROK component. We then proceed to prove formally
that this architecture captures the desired ROK character-
istics. This section concludes with descriptions of how PUF
ROKs can be used in both symmetric key and public key
cryptography.
4.1 PUF ROK Overview
The high-level view of our hardware architecture for gen-
erating PUF ROKs consists of a number of components. We
formally deﬁne these components and their functional con-
nections as follows.
• The processor core (PC) executes the desired ap-
plication. The PC has access to volatile random ac-
cess memory (RAM) for implementing the typical C-
language execution constructs, such as a stack and
heap. The PC contains an interface to a physically
distinct crypto core (CC).
• The CC is a stand-alone hardware component that
provides cryptographic services to the PC. The CC
provides the following service interface to the PC:
– Init(x0) : an initialization routine that takes an
input x0 as a seed value for the PUF. There is no
return value.
– Enc(m) : an encryption primitive that takes a
message m as input and returns the encrypted
value e(m).
– Dec(e(m)) : a decryption primitive that takes a
ciphertext as input. Given e(m) repeatedly, this
service returns the plaintext m only on the ﬁrst
execution. Subsequent calls to this service for
e(m) return ∅.
• The CC has a unidirectional interface with a register
(Reg). Whenever the CC’s Init(x0) service is invoked,
the CC writes x0 (or a value derived from x0, if so
desired) into Reg.
• The CC can poll the PUF. When this occurs, the
value stored in Reg is used as the PUF challenge. The
response is then fed into an error correction unit
(ECU). After performing mode-speciﬁc functions, the
ECU returns a sanitized PUF output to the CC, while
simultaneously overwriting the contents of Reg. When
decrypting, the write back to Reg is contingent on feed-
back from CC. That is, Reg would only be overwritten
during Dec(e(m)) if the decryption was successful.
Figure 2 shows a high-level view of a SoC implementation
of our PUF ROK design. The key insight of this approach is
the the PUF-ECU-Reg portion form a feedback loop. The
PUF uses the values stored in the Reg as its input challenge
Ci. The raw response Ri is run through an error correction
routine to produce R′
i, which is written back into the Reg.
The cleaned response is also reported to the CC for use in
the cryptographic operations.
Figure 2: Components for a SoC PUF ROK design
The operation of the ECU depends on the cryptographic
primitive invoked. In the case of encryption, the key K is
just being created. As such, there are no errors to correct.
Instead, the ECU uses the raw PUF output as the “correct”
value and generates a small amount of error-correcting data.
This data is stored in a local cache that is accessible only
to the ECU itself. Later, when decryption occurs, this data
is used to correct any transient bit errors that may have
occurred during the PUF execution. Observe that, as the
error correction occurs before the response is stored in the
Reg, this design structure ensures that the challenge inputs
are correct.
The security parameter ǫ is used to specify the size of
x0. Speciﬁcally, to meet the security guarantees dictated by
the ROK formalism, x0 must be at least ⌈− log2 ǫ⌉ bits3 in
3Recall that 0  1/2). Our subsequent analysis holds, but
including this fact in later proofs adds unnecessary mess to
the notation. As such, we will omit this fact and implicitly
assume that x0 is at least one bit in length.
In this architecture, we make two simplifying assumptions.
First, we assume that the challenges and responses are the
same length. We also assume that Reg consists of a small
storage cache of the same size.4 In implementations where
these assumptions do not hold, additional hardware compo-
nents may be required.
4.2 System Details
Our architecture, as previously proposed, seems rather
limited in use. Primarily, keys must be used for decryp-
tion in the same order as they are created. For example,
consider the case where two messages m1 and m2 are en-
crypted. The ﬁrst encryption would generate K1 and the
second creates K2. To switch to decrypt mode, the Init(x0)
primitive would be required to return the Reg to its original
state. The implication of this design is that the user must
perform Dec(e(m1)) before Dec(e(m2)).
An intuitive solution would be to pass a counter n along
with the Dec(e(M )) invocation, indicating that the PUF
must be polled n times before the appropriate key would
be reached. Hence, to decrypt the second message ﬁrst, the
invocation would be Dec(e(m2), 2). This solution is prob-
lematic, though. Speciﬁcally, once Dec(e(m1), 2) is invoked,
the contents of Reg would no longer contain x0, and there
would be no way for Dec(e(m1), 1) to generate K1.
A similar problem is that any switch between encryption
and decryption would require resetting the contents of Reg
and polling the PUF multiple times. For instance, assume
the user has encrypted three messages m1, m2, and m3. The
PUF ROK would have generated keys K1, K2, and K3. To
decrypt e(m1), Init(x0) restores the Reg to its initial state,
and Dec(e(m1)) is invoked. After the decryption, Reg is
storing R1. In order to encrypt message m4, the PUF would
need to be polled two more times to ensure that key K4 is
generated. This can become very complicated to maintain.
To address these problems, we expand the details of our
design as shown in Figure 3.
In this ﬁgure, we partition
the high-level Reg into distinct registers for processing the
challenge input for encryption (EncReg) and for decryption
(DecReg), as well as one that stores the seed value (See-
dReg). We also introduce an error-correcting cache (EC
Cache). The intuition in this design is that the ECU will
store n error-correcting codes that can be accessed in arbi-
trary order. Once the ﬁrst k codes have been used, they
can be replaced. When this happens, the ECU synchronizes
with the SeedReg (as indicated by the Sync line).
The operation of our PUF ROK architecture can be illus-
trated by the following example. Assume n = 4. A sample
work ﬂow could be as follows:
1. The user initializes the system with Init(x0).
2. Three messages, m1, m2, and m3 are encrypted. The
keys K1, K2, and K3 are derived from the PUF re-
4Depending on the size of the PUF output, Reg may corre-
spond to an array of hardware registers. E.g., if the PUF
output is 256 bits and the hardware registers store only 32
bits each, then Reg consists of eight physical registers.
Figure 3: Extension components for out-of-order
PUF ROKS
sponses R1, R2, and R3, respectively. The ECU stores
error correcting codes EC1, EC2, and EC3 in its cache.
3. Message m2 is decrypted by invoking Dec(e(m2), 2).
The contents of SeedReg are copied into DecReg, and
the PUF is polled twice to generate R2 and the corre-
sponding K2. The ECU marks EC2 as invalid, assum-
ing the decryption is successful.
4. Message m4 is encrypted, using R4 and K4. EC4 is
generated and stored in the cache.
5. Message m1 is decrypted by Dec(e(m1), 1). At this
point, as both EC1 and EC2 have become invalid, the
ECU initiates the Sync action.
6. During the Sync, the ECU takes control of the PUF
feedback loop. The PUF is polled twice, using the
contents of SeedReg as the challenge input (x0). As
a result, responses R1 and R2 are generated, and R2
is ultimately stored in SeedReg. As a result of Sync,
the part of EC Cache that was used to store EC1 and
EC2 is now marked as available.
7. To encrypt m5, Enc(m5) is invoked like normal, using
the contents of EncReg as the challenge input. The
corresponding EC5 is then stored in one of the newly
available slots in EC Cache.
While this approach addresses the complication of using
keys out of order, a simple extension makes the design even
more powerful. Consider the case where a key is needed n
times, rather than just once. E.g., if Alice needs Bob to
encrypt 10 messages on her behalf, she could either use 10
ROKs or she could employ, for lack of a better term, a read-
10-times-key. The extension above, with the integrated EC
Cache, could accommodate this request by storing the ECi
codes 10 times. The codes would then become invalid after
all 10 slots in the EC Cache have been marked as such.
4.3 Formal Proof of PUF ROK
While it may seem intuitive that our architectural design
captures the essence of a ROK, we present the following for-
mal proof to illustrate the use of the security parameter ǫ.
In this theorem, we use the notation |s| to denote the length
of the bit string s. To simplify the proof, we elide the de-
tails discussed in Section 4.2, and simply use the high-level
architectural terms from Section 4.1.
Theorem: Assuming an ideal PUF and adequate error cor-
rection are employed, the PUF ROK architectural design
successfully enforces the ROK criteria.
Proof: To demonstrate the claim, we must show that all
three properties of ROKs hold. Clearly, our deﬁnitions of the
Enc(m) and Dec(e(m)) services provided by the CC match
those of the ROK deﬁnition. However, to see that the ﬁrst
two ROK properties hold, we must consider the interaction
of the components. When the Enc(m) service is invoked, the
contents of Reg are used as input to the PUF and replaced
with the output. This output is also used to generate the
key K. Thus, the ﬁrst property holds.
To switch the PUF ROK to decrypt mode, the seed x0
must again be written to Reg. This action must be done
by the encrypting party. After this is done, the Dec(e(m))
primitive will involve polling the PUF, thus using x0 as the
PUF’s input challenge once again. The ECU ensures that
the new PUF result matches the previous output, and the
decryption key K will be identical to that used for encryp-
tion. However, the new PUF result also replaces x0 in the
Reg. Hence, as the PUF is assumed to be ideal, the ﬁrst
execution of Dec(e(m)) will produce the correct key K. Any
future execution of Dec(e(m)) will, with near certainty, pro-
duce an incorrect key; the CC will then return ∅. Thus,
the ideal PUF assumption ensures that the second criterion
holds.
To complete the proof, we must show that our design sat-
isﬁes the third criterion, which is that the probability of
bypassing the restriction on the Dec(γj, qj , e) primitive is
less than or equal to ǫ. There are three ways this could oc-
cur. First, the adversary A could succeed in an attack on