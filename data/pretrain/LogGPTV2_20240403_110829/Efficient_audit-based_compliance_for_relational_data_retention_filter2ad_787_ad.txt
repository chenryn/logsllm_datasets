B.1.2. Why t must be in L on disk. Recall that we trust the DBMS
to carry out insertions of new tuples in its usual manner. Thus when
T writes a tuple, that write is promptly reﬂected in a dirty page in
the DBMS buffer pool. We also trust the DBMS buffers, because
we require kernel patches that prevent tampering with dirty pages
while in memory. Thus, since t is a ﬁnal value written by T , the
244
DBMS put a copy of the dirty parts of t’s page (including t) on L
before it wrote a COMMIT record for T to L. Since T commit-
ted, that part of L has reached disk by the time of the audit. Thus
the auditor will eventually reach t in L; we assume that this copy
of t will still contain a transaction ID T rather than T ’s timestamp ts.
B.1.3. Why the auditor will include t in her hash of L. The
auditor’s initial sanity check determined that there was only one
COMMIT record for T . As argued earlier, this record was not
written by Mala. Due to write-ahead logging, the COMMIT record
must appear after t in L. Thus when the auditor parses t in L, she
cannot believe that T has already committed before T wrote t. Thus
she will add the key and content for t to her data structure for T .
As T does eventually commit, the auditor will scan T ’s COMMIT
record and hash all of T ’s inserted tuples. Since t is a ﬁnal value for
T , she should include t in her hash. Mala cannot regret tuples that
are not yet committed, so she has no motivation to hide t’s existence
by making it appear that t is not a ﬁnal value, i.e., T overwrote
t. However, Mala may want to insert a backdated tuple t(cid:48) whose
absence she regrets. To get a backdated tuple t(cid:48) into the DB, she can
turn back the clock on the DBMS to the appropriate past date (r or
more time units in the past). Then she can either submit a transaction
that inserts t(cid:48), or else tamper with the DB state in such a manner
that T appears to overwrite t with t(cid:48). In part B.1.3.1, we argue that
these and any other attacks that turn back the DBMS server clock
by r or more time units would have caused the audit to fail. Since
the audit did not fail, these attacks must not have occurred.
Mala may have tried to overwrite t to cause desirable side effect-
s: to introduce of backdated tuples whose absence she regrets, or
remove old tuples whose presence she regrets. We argue in part
B.1.3.2 that these attacks cannot succeed, and conclude that Mala
will not have tried to overwrite t before T committed. Thus the
auditor will recognize that t is a ﬁnal value of T . The auditor must
ﬁnd T ’s timestamp and substitute it into t before computing the
hash. She will ﬁnd T ’s correct timestamp in L, because Mala can-
not alter the timestamp while it is in the buffer pool or overwrite it
on WORM, and because the auditor’s L sanity check has guaranteed
that there is only one timestamp for T . We conclude that the auditor
does include t in her hash correctly, a contradiction of our initial as-
sumption that t is excluded from her hash of the tuples inserted by T .
B.1.3.1 Why backdating attacks fail. At some point (call it time
0 on the WORM), Mala may regret the absence of some tuple t(cid:48)
from the DB and want to create a backdated version of t(cid:48). For this to
work, she must set back the DBMS clock to the time she would like
t(cid:48) to be stamped with, which must be at least one regret interval in
the past. (This is why we cannot support a zero regret interval. The
argument here depends on the auditor being able to detect Mala’s
tampering with the DBMS server’s clock, but no one can detect an
“attack” that involves setting the clock back by zero units of time.)
So that t(cid:48) will be included in the auditor’s hash, Mala must get a
copy of t(cid:48) onto L, followed by a COMMIT record for t(cid:48). Acting
fast, Mala can write the COMMIT record for t(cid:48) immediately after
time 0 on the WORM server, with timestamp −r or earlier.
Since we trust the WORM server’s clock, we trust the create and
last write times for each ﬁle of L. Consider the ﬁle f of L in use
at time 0 on the WORM. The create time of f must be later than
−r/2, as it is still in use after time 0, when Mala appends material
to L. The timestamp of the COMMIT record she appends is −r or
earlier. Thus the auditor’s checks will detect that the clocks on the
WORM server and the server writing the COMMIT record differ by
more than r/2 time units and the audit will fail. As the audit did not
fail, Mala cannot have mounted such an attack.
The LDA approach is also subject to DBMS clock tampering
attacks, and its authors proposed to thwart them by ﬂushing the
LDA compliance log buffers to disk every r time units. The argu-
ment given above shows that the LDA approach is ﬂawed, and the
DBMS actually needs to ﬂush those buffers every r/2 time units,
instead. TLOW also avoids the LDA requirement that the DBMS
and WORM storage server clocks be roughly synchronized.
B.1.3.2. Why tampering with t will not have the side effect of
adding/removing other regretted tuples. Perhaps Mala is over-
writing t while T is running because it will cause a desirable side
effect. The ﬁrst such effect is to introduce a backdated tuple whose
absence she regrets (e.g., due to a foreign key constraint). As ar-
gued above, the audit would have failed if she had carried out any
backdating attack. The second such effect is to delete a tuple s
whose existence she regrets, again through an integrity constraint.
However, s will not be shredded; it will still be visible to temporal
queries. If Mala wants to really get rid of s, she will have to over-
write or shred it, and the bogus overwrite of t by t(cid:48) does not help her.
B.2. Troublesome tuple t is not in the correct ﬁnal state. Sup-
pose that a tuple t is in the current DB state, but is not in the correct
ﬁnal state. Since the audit succeeded, t must be included in the
auditor’s hash of L. (This being the ﬁrst audit, previous DB instance
is empty.) Suppose that the ﬁrst occurrence of t on L has transaction
ID T as timestamp. Since t was included in the auditor’s hash, a
COMMIT record for T must appear later on L; otherwise T would
not have been included in the serialization order. Since the auditor
did a sanity check on L, L must have only one COMMIT record
for T . Thus T qualiﬁes as a “submitted transaction” in the theorem,
and the correct ﬁnal state must have included an invocation of T .
Suppose that T = Ti in the serialization order. T ’s COMMIT
record tells the auditor what timestamp to use for t in her hash. As
she included t in her hash, t must appear on L before the COMMIT
record for T . There are only a few possible reasons why t might
not be in the equivalent correct ﬁnal state. The ﬁrst possibility is
that t is not in the equivalent correct ﬁnal state because t was later
overwritten by T . In that case, the auditor did not detect that the
value for t was subsequently overwritten by T , and hence included
it in her hash. If the auditor overlooked the subsequent overwrite,
then one possibility is that the overwrite was not logged. But this
is impossible, since the DBMS operates correctly and Mala does
not tamper with the buffer pool. A second possibility is that the
overwrite appears too late on L and the auditor ignored it. Since
we trust the DBMS to log pages correctly, Mala must have inserted
a fake COMMIT record for T . But then the auditor’s sanity check
would have observed two COMMIT records for T and the audit
would have failed, which it did not. The third possibility is that
Mala altered the DB state to contain t(cid:48) instead of t, and did not
tamper with L. As the audit did not fail, Mala must have reverted
pages to their correct content before the audit. But, this violates our
assumption that Mala did not carry out any untamper attacks.
The only remaining possible reason is that Mala inserted the log
record for t on L. According to the threat model, one possibility is
that she wants to insert a copy of t that is backdated by at least one
regret interval. But the arguments given earlier show that although
she can tamper with the DBMS server’s clock, she cannot backdate t
by an entire regret interval without causing the audit to fail. Another
possibility is that t is overwriting another value written by T , and
Mala regrets the existence of that other value. However, Mala cannot
regret that other value, since it is not even committed yet. Also, the
argument given earlier shows that Mala cannot turn back the DBMS
clock far enough to successfully overwrite t. A third possibility is
that inserting of t will cause a side effect that meets Mala’s needs,
by creating a tuple s that is backdated by at least one regret inter-
245
val, or by overwriting or shredding an existing tuple. As described
earlier, these side effects are impossible. Nor can the spurious log
record on L cause any ongoing or previous transaction to abort as
the DBMS will not be aware of the page image. We conclude that
if Mala inserted such a log record, it was for reasons outside the
scope of our threat model. Thus, we have proved that the auditor
extracts the serialization order correctly, and that the hash over new
tuples in L is the same as the hash over tuples in this serialization
order T1, . . . , Tn. Therefore, the actual ﬁnal database state is also
equivalent to that obtained by running transactions T1, . . . , Tn one
by one on an initially empty database. The theorem follows.
Previous audits. Now consider the case where k previous audits
have occurred. Since audits are rare and major events, the auditor
can consult a trusted third party to see who was responsible for
the previous audit, and obtain the public key of that auditor. With
that public key, the auditor can check the digital signature on the
snapshot from the previous audit, to verify that the snapshot is
the one produced by the previous auditor. Since the snapshot, its
associated hash H, and the corresponding digital signature are on
WORM storage in non-appendable ﬁles, none of them can have
been tampered with since they were created. We trust the previous
auditor to have correctly created the snapshot and its audit hash
Ho, and correctly signed them. Thus the hash value stored with the
previous snapshot is trustworthy. The auditor adds this hash value
to that computed over L. The remainder of the argument proceeds
as for the ﬁrst audit, and the theorem follows.
5. SPEEDING UP AUDITS
Ofﬁcial audits by an external authority are likely to be infrequent
(e.g., once a year), so L may be extremely long and the audit may
be very slow. Experiments with TLOW and LDA show that if we
run a 10-warehouse TPC-C around the clock for one year, then the
audit will take 10 days to process the log, plus the time to scan the
current database instance and verify its integrity.
To reduce costs, we propose to do real-time trustworthy incremen-
tal auditing. This approach relies on an audit helper (AH) process
that can run on the DBMS server (or on its own host, as long as its
host and the WORM server keep their clocks within r/2 time units
of each other). AH reads L from WORM as fast as L is written,
ﬁnds the new tuples on L and hashes them in the same manner as an
auditor would, and periodically writes the hashes to H in a special
form discussed later. The auditor can only trust AH hashes that
reach WORM within r time units after their transaction committed.
As shown by experiments presented later, AH has a very small im-
pact on transaction throughput, for three reasons: the log pages it
reads are generally already in the ﬁle system cache on the DBMS
server or WORM server, its computational overhead is quite small,
and it imposes only a tiny write overhead on the WORM server.
If AH’s hash of a new tuple reaches WORM more than r time u-
nits after that tuple is committed, then the auditor cannot use that late
hash and must recompute it. To help the auditor identify late hashes,
AH ﬂushes H to WORM every r/2 time units. More precisely,
every r/2 time units, AH appends (hv tid1 ptr1 ··· tidn ptrn) to
H and ﬂushes it to a new ﬁle on WORM, where tid1 ··· tidn are the
IDs of the transactions whose COMMIT records AH has scanned
since the last ﬂush and whose commit timestamps are within the last
r/2 time units; ptr1 ··· ptrn point to the COMMIT records in L
for tid1 ··· tidn, respectively; and hv is the hash of the new tuples
inserted by tid1 ··· tidn.
Detecting invalid H ﬁles. Mala cannot overwrite an existing tuple
version by attacking AH, but she can insert a backdated tuple t as
follows. First, she tampers with the DB instance so that it includes t.
Then she kills AH and replaces it by a tampered audit helper, TAH.
Suppose that transaction T commits while TAH is running. TAH
hashes the tuples inserted by T plus t, and writes the result out to H.
The auditor will not recognize that the hash value for T includes t.
Mala’s attack can be detected by hashing the tuples in L and com-
paring them to the hashes stored in L, but the whole point of AH is
to entirely avoid scanning L. Catching an attack by spot-checking
a randomly selected H ﬁle is unlikely. To counter the attack, we
require AH to sign its H ﬁles using a key that Mala cannot easily
obtain. For this, AH may rely on an inexpensive Trusted Platform
Module (TPM) on the server where it runs, plus the ability to prove
that it is a legitimate copy of an audit helper (i.e., certiﬁed code).
The TPM contains a key seed, known to the auditor, that is used to
generate a secret key k for each time epoch using a one-way hash
function. AH uses a cryptographic hash function hk to compute
hk(k, i), where i is the tuple hashes that AH is writing to H. Then
AH can append hk(k, i) to H. The auditor knows the seed, which
allows her to generate k quickly. As she scans H, she looks for and
veriﬁes the signatures (keyed hashes) that she encounters.
Handing AH crashes.
If AH crashes, the DBMS can continue
running, and vice versa. When the DBMS restarts, it will start a new
transaction log ﬁle. AH must watch for this ﬁle to appear. When
AH restarts, it starts scanning the most recently created ﬁle for L.
AH must ignore new tuples that it ﬁnds in L whose PrevLSN (pre-
vious log sequence number, a ﬁeld found in each transaction log
record) is non-null, unless AH already has started a data structure
for that transaction. This way, AH will only hash new tuples from
transactions that made their ﬁrst write after AH restarted.
Audit reﬁnement to use H ﬁles. At audit time, the auditor must
perform usual sanity checks on the create and last write times of each
L ﬁle, and on the H ﬁles. Any H ﬁles written more than r/2 time
units after the DBMS crashed, and before it came up again, must be
discarded. Next, the auditor examines each H ﬁle to ﬁnd its pointers
to COMMIT records in L. (If there is no H ﬁle for an interval or the
ﬁle fails this sanity check, then the auditor must perform traditional
auditing for transactions active during the period.)
The auditor must also ensure that the COMMIT records that H
points to are legitimate, i.e., not inserted in L by Mala. This involves
a sanity check that the last write time (resp. create time) on the L ﬁle
containing each COMMIT record is less than r/2 time units after
(resp. before) the transaction’s timestamp recorded in the COMMIT
record. As its third sanity check, the auditor compares the last write
time of the H ﬁle on the WORM to the earliest commit time for
any transaction ID listed in that ﬁle. If the difference is more than
r time units, the auditor must redo the hash of the new tuples.If
the she only needs to compute the hashes for a few transactions,
she can quickly ﬁnd the relevant information for each of them by
following the PrevLSN pointers for a transaction backwards through
L, starting from its COMMIT record. After computing a hash value
over the new tuples of all the transactions for which it could not
use an H ﬁle, the auditor then adds the hash values from all the H
ﬁles that it found to be trustworthy, to arrive at the ﬁnal hash value.
She computes the hashes over‘ the current instance and previous
snapshot, and compares them as under the TLOW approach.
The other major cost of auditing is the time to scan and hash the
current instance, which may become very large over the years. We
propose to add this to the DB instance integrity check utility, which
has to fetch and parse each page of the DB anyway, so the additional
cost of hashing each tuple and reporting the sum is small.
6. BASIC FORENSIC ANALYSIS
The TLOW architecture and AH allow an auditor to quickly