previous sections, an O-QPSK modulation with half sine pulse
shaping shares with the MSK modulation the property of a
constant amplitude and a continuous phase. Moreover, the
modulation of each bit generates a ± π
2 continuous and linear
phase transition. Both MSK and O-QPSK modulations are
thus very close. In a more formal way, the research work of
[26] shows the theoretical equivalence between MSK and O-
QPSK with half sine pulse shaping, if an encoding strategy is
purposely chosen, such as Ts(M SK) = Tb(OQP SK).
3) From BLE to Zigbee: If we neglect the effect of the
Gaussian ﬁlter (which will result in more progressive phase
transitions), we can make the hypothesis that BLE modulation
can be approximated by a MSK modulation, which is close to
the O-QPSK modulation used by the Zigbee devices. To sum
up, we can make the following hypotheses:
• It should be possible to control the input message of a
GFSK modulator compatible with the BLE speciﬁcation
to generate a modulated signal corresponding to a binary
sequence that can be interpreted by a O-QPSK demodu-
lator (with half sine pulse shaping) compatible with the
802.15.4 standard.
• An arbitrary message modulated by an O-QPSK modu-
lator (with half sine pulse shaping) compatible with the
802.15.4 standard should generate a modulated signal
corresponding to a binary sequence interpretable by a
GFSK demodulator compatible with BLE speciﬁcation.
In the following, we outline how these hypotheses can be
veriﬁed.
C. Correspondence table generation
The ﬁrst problem to be addressed consists in establishing a
correspondence table between the PN sequences used by the
802.15.4 standard (which results from an interpretation of the
signal as a phase modulation, the O-QPSK with half sine pulse
shaping) and their interpretation by a MSK frequency modula-
tion. From this correspondence table, it will then be possible
to build a binary sequence to be provided as input to a BLE
compliant modulator to generate a modulated signal close to
the one expected by a 802.15.4 demodulator, but also possible
to interpret an 802.15.4 frame as a frequency modulated signal
that can be demodulated by a BLE demodulator.
The generation of MSK sequences consists in encoding each
phase transition of the O-QPSK modulation with a 1-bit if
it corresponds to a counter-clockwise rotation of the vector
2 increase of
representing the signal in the complex plan (+ π
the instantaneous phase) or with a 0-bit if it corresponds to a
clockwise rotation (− π
2 decrease in the instantaneous phase).
Algorithm 1 illustrates this encoding technique. By applying
this algorithm to the 16 PN sequences, it is possible to build
the correspondence table.
Let us note that a sequence of length n encoded in O-QPSK
has an equivalent of length n − 1 encoded in MSK, because
this one represents the transitions between phases.
D. Requirements
The practical implementation of such an attack requires to
take into account a number of requirements, related to BLE
physical layer characteristics described in previous sections.
Our objective is to implement primitives to send and receive
802.15.4 frames on a chip supporting BLE 5.0 speciﬁcation.
For that purpose, we have to control the following elements:
Output: mskSequence[31]
Input: oqpskSequence[32];
1 evenStates[4] ← {1, 0, 0, 1};
2 oddStates[4] ← {1, 1, 0, 0};
3 currentState ← 0;
4 i ← 1;
5 while i < 32 do
6
7
if i is odd then
mod 4] then
8
9
10
11
12
13
14
15
else
else
end
if oqpskSequence[i] = oddStates[(currentState + 1)
currentState ← (currentState + 1) mod 4;
mskSequence[i − 1] ← 1;
currentState ← (currentState − 1) mod 4;
mskSequence[i − 1] ← 0;
if oqpskSequence[i] = evenStates[(currentState + 1)
mod 4] then
else
currentState ← (currentState + 1) mod 4;
mskSequence[i − 1] ← 1;
currentState ← (currentState − 1) mod 4;
mskSequence[i − 1] ← 0;
16
17
18
19
20
21
22
23
24 end
Algorithm 1: Algorithm of a PN sequence conversion
end
i ← i + 1;
end
• Data rate:
the duration of one symbol encoded in
the MSK modulation must be identical to the duration
of one bit encoded by the O-QPSK modulation, i.e.,
Ts(M SK) = Tb(OQP SK). It is thus necessary to conﬁgure
the modulator and the demodulator used by the chip in
order to use a 2 Mbits/s data rate, the same data rate as
the 2Mchips/s of the 802.15.4 standard,
• Central frequency: BLE used channel central frequency
must match the frequency of the Zigbee channel,
• Modulator input: to implement an emission primitive,
it is necessary to control (directly or indirectly) the data
sent to the modulator of the chip, in order to be able to
provide the PN sequences encoded in MSK,
• Demodulator output: to implement a reception primi-
tive, it is necessary to detect the reception of a 802.15.4
frame and to retrieve (directly or indirectly) the data
output from the demodulator of the chip.
Controlling the data rate is quite easy since the introduction
in version 5.0 of a new LE 2M mode for BLE physical layer,
which allows to use a data rate of 2Mbits/s, which perfectly
corresponds to our needs. Therefore, it should be possible to
satisfy this ﬁrst requirement on any chip implementing version
5.0 of the Bluetooth speciﬁcation.
is to control
The second requirement
the BLE central
frequency according to the Zigbee channel targeted by the
attack. Several solutions can be implemented to solve this
problem according to the possibilities offered by the chip
and the available API. Indeed, most of the chips supporting
BLE version 5.0 allow to arbitrarily choose a frequency in the
2.4 to 2.5 GHz band, in this case, it is possible to directly
select the central frequency of the targeted Zigbee channel.
If the chip does not allow such a functionality, it is then
possible to select a BLE channel whose central frequency
corresponds to a Zigbee channel: only a subset of the Zigbee
channels will then be available, those deﬁned in the Bluetooth
speciﬁcation. These channels are indicated in Table II. Such
diversion of the use of BLE channels is made possible because
both Zigbee and BLE channels share the same characteristics
(2MHz bandwidth) and because the LE 2M mode allows the
use of data channels as secondary advertising channels, thus
allowing a direct transmission or reception on the channel via
the advertising mode (the connected mode indeed implements
a channel hopping algorithm that complicates a lot the im-
plementation of this attack and requires the cooperation of
another device).
TABLE II: Zigbee and BLE common channels
Zigbee Channels
12
14
16
18
20
22
24
26
BLE Channels
3
8
12
17
22
27
32
39
central frequency (fc)
2410 MHz
2420 MHz
2430 MHz
2440 MHz
2450 MHz
2460 MHz
2470 MHz
2480 MHz
The third requirement is to be able to control the data
provided as an input to the chip modulator: an arbitrary suc-
cession of PN sequences (encoded in MSK) must be provided
in order to implement a transmission primitive. The main
difﬁculty is related to the whitening process, which applies
a transformation algorithm on the data to be transmitted, thus
modifying the frame before its modulation. This functionality
can be disabled on some chips, thus allowing a direct control
on the bits transmitted to the modulator. However, even in
the whitening algorithm is
the absence of this possibility,
reversible because it is based on a simple linear feedback shift
register: it is thus possible to build a sequence of bits which,
once the transformation has been applied, corresponds to the
PN sequences, by ﬁrst applying the de-whitening algorithm
on the sequences that must be transmitted. In these two cases,
the PN sequences to be transmitted to generate the expected
802.15.4 frame can be encapsulated in the payload of a BLE
packet, for instance in the advertising data (the LE 2M mode
allows the transmission of large advertising packets with a
payload of up to 255 bytes).
The fourth requirement, which is crucial to build a reception
primitive, is to detect 802.15.4 frames and to decode these
frames to retrieve the symbols corresponding to PN sequences.
For that purpose, the Access Address of the BLE chip must be
conﬁgured: this Access Address is used as a pattern to detect
a legitimate BLE frame. The Access Address value can be
set with the PN sequence (encoded in MSK) corresponding
to the 0000 symbol, in order to detect the preamble of a
802.15.4 frame (this preamble is composed of 4 null-bytes, i.e.,
eight 0000 symbols). The integrity check must be deactivated,
because the 802.15.4 frames are not valid BLE frames (the
chip must allow this deactivation so that a reception primitive
can be implemented) and to conﬁgure the size of the frame
to the maximum available size. At this stage, the dewhitening
problem has to be solved: it must be ideally disabled, and if
this is not possible, a whitening algorithm must be applied to
the frame in order to extract the output bits of the demodulator.
The conversion to the original Zigbee symbols can be done
very simply by using Hamming distance. Each received packet
is split into 31-bits blocks and for each block, a Hamming
distance is calculated in order to ﬁnd which PN sequence
encoded in MSK ﬁts the best the received block. The use of the
Hamming distance allows here to cope with two difﬁculties:
bit errors caused by the approximation presented previously,
but also interference due to the channel, that may generate
bitﬂips during transmission.
Note that the equivalence of O-QPSK modulation with half
sine pulse shaping and MSK modulation should in theory
enable a ”symmetric” pivoting attack, i.e, to also divert the
use of Zigbee chips to attack the BLE protocol. However,
this strategy is quite difﬁcult to implement, because Zigbee
protocol stack prevents us from ﬁnely controlling the 802.15.4
modulator input or demodulator output, mainly due to the Di-
rect Sequence Spread Spectrum functionality, which performs
the operation of transforming symbols into chip sequences.
It would be necessary to be able to control the input of the
modulator and the output of the demodulator, which does not
seem to be easily achievable with existing devices.
V. BENCHMARKS
It is important to validate the WazaBee attack on chips
from different manufacturers. We have chosen two different
chips, nRF52832 designed by Nordic SemiConductors and
CC1352-R1 designed by Texas instruments. Let us note that
the attack does not depend on the chips we used, as it only
exploits similarities between the physical layers used by the
protocols themselves. Additionally, we are aware that the TI
CC1352-R1 chip natively supports 802.15.4-based protocols,
however, of course, we only used its BLE capabilities during
our experiments. In this section, we describe the proof of
concept implementations, and present the experiments carried
to evaluate the quality of the Zigbee communications
out
achieved with WazaBee.
The ﬁrst implementation was carried out on the nRF52832
chip, which chip offers great ﬂexibility in the conﬁguration of
the embedded radio component BLE 5.0, and is compliant with
the LE 2M PHY layer. Its radio API is similar to the nRF51
one. This nRF51 API is well known to the security community
for having been massively hijacked in recent years in order
to develop offensive tools dedicated to BLE and Enhanced
ShockBurst (BTLEJack, radiobit, ...). The prototype was im-
plemented on a development board proposed by AdaFruit
integrating this chip, the Adafruit Feather nRF52 Bluefruit LE.
The second implementation was carried out on the CC1352-R1
chip manufactured by Texas Instruments. The main motivation
was to test the approach on a chip offering less conﬁguration
possibilities than the nRF52 chip. The chip natively supports
several protocols, including BLE and 802.15.4. However, only
the Bluetooth API was used for the implementation. This
API being common to several chips from Texas Instruments,
the implementation of the attack should be similar on other
systems from the same manufacturer.
Two experiments were carried out in order to assess the
reception and transmission primitives previously described.
The ﬁrst experiment, dealing with reception, consisted in
transmitting one hundred 802.15.4 frames with a payload
including a counter (incremented with each frame) using a
Zigbee transmitter (AVR RZUSBStick Atmel). The develop-
ment board implementing the WazaBee attack, spaced from the
transmitter by a distance of 3 meters, received and decoded the
corresponding frames, then calculated the FCS corresponding
to the received frame to assess its integrity. For each Zigbee
channel, the frames were classiﬁed into three categories: not
received, received with integrity corruption, received without
integrity corruption. The results are shown in table III.
It can be seen that the reception primitive of WazaBee has
a very satisfactory reception rate for the two implementations
on all channels, with an average of 98.625 % of the frames
received without integrity corruption for nRF52832 and 99.375
% for CC1352-R1. In both cases, there is a slight decrease in
the reception rate for channels 17, 18, 21, 22 and 23, which can
be explained by the interference with WiFi channels 6 and 11,
used in our experimental environment. It can also be observed
that the CC1352-R1 presents a more stable reception than the
nRF52832, without any integrity corruption of the received
frames while the nRF52832 missed 0.6875 % of the frames.
The transmission primitive was assessed under similar con-
ditions: the development board implementing WazaBee was
conﬁgured to transmit one hundred frames including a counter,
and a 802.15.4 receiver (the RZUSBStick) was placed 3 meters