### 从图中可以看出，这些应用程序的运行时开销不到5%。插桩操作使Enclave二进制文件的大小增加了约64%，这主要是由于D´ej`a Vu辅助函数库的加入。

### 8. 讨论

#### 核心利用率
如第6节所述，我们的设计要求操作系统将Enclave线程（包括应用程序线程和参考时钟线程）固定在专用核心上，以尽量减少中断（以及由此产生的AEX）的发生频率。这种设计并不增加对操作系统的信任；如果操作系统未能遵守此约定，则会增加Enclave线程检测到的中断（及AEX）次数，从而导致Enclave根据安全策略进行自终止。恶意的操作系统也可以通过根本不调度Enclave线程来达到相同的效果。

尽管不需要对操作系统的信任，但这种约定确实带来了成本，尤其是干扰了操作系统的正常调度策略。结合我们设计中添加了一个额外的线程（参考时钟线程），D´ej`a Vu确实在某种程度上影响了计算机所有可用核心的最优利用。然而，该约定也提供了显著的好处。特别是，它隔离了Enclave工作负载与非Enclave工作负载。例如，一个繁忙的Web服务器在其他核心上运行并频繁产生中断，不会干扰D´ej`a Vu。

#### 训练覆盖率
D´ej`a Vu需要动态训练程序控制流图中每个执行路径段的执行时间。虽然执行路径段的时间对输入不太敏感，但训练数据的覆盖率是我们基于训练的检测方法的一个限制。然而，如第6节所述，对于未覆盖在训练数据中的路径段，提供了一个默认的时间阈值。这个阈值基本上是AEX的最小时间，通常远大于路径段的执行时间。因此，这个阈值应能减少多余的app-AEX警报，但仍能确保检测到应用程序线程上的AEX，从而使检测系统即使在训练数据不完全覆盖每个执行路径段的情况下也能合理地工作。未来的工作将探索通过使用诸如符号执行[17]等技术来最大化训练覆盖率的方法。

#### AEX检测后的安全策略
类似于任何入侵检测器，D´ej`a Vu要求用户指定一个策略，规定如何处理AEX检测。我们预计有两种类型的应用程序可能需要不同的处理方式。第一类是包含短密钥（如加密密钥）的应用程序，这些密钥可能通过特权侧信道在相对较少的侧信道观测下泄露。对于这类应用程序，可以设置更保守的AEX检测阈值以提高app-AEX警报的精度，并将少量的AEX检测视为严重威胁（例如，停止计算或更改密钥）。第二类包括像libjpeg和freetype这样的应用程序，它们包含更大的秘密，可能会在较长时间的执行过程中逐渐泄露[53]。这些应用程序可能容忍更多的AEX，因此可以将阈值设置为如第6节所示，并在AEX过多时向远程管理员发出警报。

特别是对于上述第一类应用程序，需要注意的是，即使没有攻击发生，由于计算机上的正常中断和页面错误（即使Enclave线程被固定在其自己的核心上），也会发生一些AEX。因此，零容忍政策在这种情况下是不可行的，即使在高精度的情况下也是如此。因此，特别脆弱的应用程序可能需要结合额外的防御措施（例如，频繁、主动的密钥更新）来补偿Enclave在侧信道攻击方面所处的根本模糊状态。

#### 其他侧信道威胁
虽然D´ej`a Vu是一种有效的防御手段，可以抵御诱导AEX的侧信道攻击（例如，受控通道攻击和每核缓存中的侧信道），但仍存在其他针对Enclave的侧信道攻击的可能性。例如，最后一级缓存侧信道攻击[25, 33]不需要攻击者抢占受害者即可进行，这些攻击同样有效，并且由于现有的系统级防御（例如[27, 61]）假定有一个可信的操作系统，因此这些攻击需要进一步研究以在此背景下解决（或者硬件支持，例如[51, 26]）。

### 9. 结论
本文详细介绍了D´ej`a Vu的设计与实现，这是一种用于检测由不受信任的操作系统对SGX Enclave发起的特权侧信道攻击的系统。D´ej`a Vu通过定时Enclave应用程序中的每个执行路径段，并检测其执行时间是否表明它被中断，从而检测可能导致此类攻击的AEX。D´ej`a Vu解决的关键挑战是Enclave缺乏可靠的时间源来测量路径段的执行时间。为了解决这个问题，D´ej`a Vu利用Intel平台上现在可用的硬件事务支持构建了一种新颖的参考时钟。这种事务支持允许我们在参考时钟线程被中断时以高概率触发事务中止。此外，当参考时钟线程未被中断时，它可以有效地区分路径段是否遭受了AEX。我们的评估显示D´ej`a Vu能够可靠地检测路径段执行期间的AEX。虽然最佳的响应策略因应用程序而异，但D´ej`a Vu提供的检测是防御SGX Enclave免受特权侧信道攻击的重要组成部分。

### 致谢
本研究部分得到了NSF资助1330599和1566444的支持。

### 参考文献
[此处省略具体参考文献列表]

---

通过这种方式优化后的文本更加清晰、连贯和专业。希望这对您有帮助！