### Authors
Saif El-Sherei & Etienne Stalmans

### What is Fuzzing?
Fuzzing is a technique that involves feeding an application with malformed input in the hope of discovering errors and faults in the application's code. With some luck, these faults can lead to exploitable vulnerabilities.

### Basic History of Fuzzing
- **1988-1990:**
  - Boris Beizer: Syntax Testing.
  - Barton Miller: "Fuzz: An Empirical Study of Robustness."
- **1999-2001:**
  - OUSPG: PROTOS SNMP, HTTP, SIP, H.323, LDAP, etc.
- **2002:**
  - Dave Aitel: SPIKE block-based fuzzing. Codenomicon releases the first commercial fuzzer.
- **2004:**
  - Browser fuzzing begins with lcamtuf's MangleMe.
- **2005:**
  - FileFuzz, SPIKEfile, NotSPIKEfile: File format fuzzing.
- **2006:**
  - Month of Browser Bugs (MoBB): HD Moore releases a browser bug every day for a month, including CSSDIE, COMRaider, Axman, and Hamachi.
- **2011:**
  - lcamtuf revolutionizes browser fuzzing by releasing cross_fuzz, which he describes as "a surprisingly effective but notoriously annoying cross-document DOM binding fuzzer that helped identify about one hundred bugs in all browsers on the market—many of which were exploitable—and is still finding more." It is based on ref_fuzz, which he developed in 2008.
- **2014:**
  - lcamtuf introduces American Fuzzy Lop (AFL), an evolutionary fuzzer.

### Fuzzing Types and Techniques
#### Fuzzing Methodology
- **Monitor for Memory Corruption Errors:**
  - Identify inputs and targets.
  - Generate data.
  - Fuzz target.

#### Fuzzing Types
- **Mutation/Non-Intelligent Fuzzing:**
  - Randomly apply mutation algorithms to the supplied input to generate several test cases without concern for the target format.
- **Generation/Intelligent Fuzzing:**
  - Utilize grammar to model a certain format specification and randomly generate semi-valid test cases to minimize fault conditions and ensure the target accepts the test cases.
- **Evolutionary Fuzzing:**
  - Combine either type of fuzzing with code and binary instrumentation tools to monitor code paths and generate test cases based on the results of the instrumentation. This approach aims to achieve the least number of test cases with the highest amount of code coverage and branches explored. An example is lcamtuf's American Fuzzy Lop (AFL).

### Tools of the Trade - Memory Error Detectors
- **Memory Error Detectors:**
  - Poison memory areas after memory allocations and after the memory is freed. They monitor access to these parts in memory and return detailed error information.
  - **Windows:**
    - PageHeap, part of Gflags in the Windows debugging toolkit, can be applied to some Windows processes.
  - **Linux and macOS:**
    - Google's Address Sanitizer (ASan) is a Clang compiler plugin that can be implemented during the compilation time of any Linux or macOS application.

### Tools of the Trade - Fuzzing Harnesses
- **Fuzzing Harnesses:**
  - These tools run the target process, feed it the generated test case, and monitor the process for crashes.
  - **Windows:**
    - Grinder by Stephen Fewer.
  - **Linux and macOS:**
    - NodeFuzz by Atte Kettunen of OUSPG.

### Introducing Wadi – Fuzzing Harness
- **NodeFuzz by Atte Kettunen of OUSPG:**
  - NodeFuzz is a fuzzing framework that works on Linux and macOS.
  - It is coded using Node.js and instruments the browser using ASan and a test case generation module to feed the browser the test case through web sockets.
  - The modules are not provided as part of NodeFuzz; you can code your own, which is a relatively simple process.
  - We are currently using NodeFuzz with our own custom modules.

### Wadi – Memory Error Detector
- **Google's AddressSanitizer (ASan):**
  - ASan is a Clang compiler plugin developed by Google for fast memory error detection.
  - The runtime library replaces the `malloc` and `free` functions. The memory around `malloc`-ed regions (red zones) is poisoned, and the freed memory is placed in quarantine and also poisoned.
  - Every memory access is monitored, and if an address is poisoned, a detailed error is returned.
  - It helps find use-after-free and heap, stack, and global buffer overflow bugs in C/C++ programs for Linux and macOS.
  - Google and Mozilla both release ASan pre-built binaries for testing.

### What is Wadi?
- **Exploring New Tributaries in Browser Fuzzing:**
  - Grammars are used to describe how browsers should process web content, and Wadi uses grammars to break browsers.
  - Wadi has already identified a handful of high-severity bugs in browsers.

### Why Wadi?
- **From Chrome to IE, Wadi Identifies Exploitable Bugs:**
  - The talk introduces Wadi and walks the audience through the steps taken to go from LL(1) grammar to fuzz test cases and browser crashes.

### A Simple Introduction to the DOM
- **Interfaces:**
  - Interfaces are types of objects that allow web applications and web browsers to programmatically access and interact with them to access their members.
- **The Document Object Model (DOM):**
  - The DOM provides a standard set of objects for representing HTML and XML documents, a standard model of how these objects can be combined, and a standard interface for accessing and manipulating them.
- **Web API:**
  - When writing code for the Web using JavaScript, there are many APIs available for developing web applications, such as speech, web audio, gamepad, canvas, WebGL, and animation.

### Wadi Architecture
- **Wadi is 3538 lines of code:**
  - 2932 of these are grammar for test case generation.
  - Wadi works as a NodeFuzz module and is used to fuzz Chromium and Firefox ASan builds.
  - It is already responsible for a number of bugs.

### What is Grammar?
- **Grammar in English:**
  - Explains how a sentence is constructed.
- **Grammars in Compilers:**
  - Describe how the language syntax is constructed. The input is parsed based on a set of rules (productions) and tokens defined in the grammar definitions.
- **In Fuzzing:**
  - Grammar is used to help the fuzzer generate valid test cases.
  - The W3C provides an Interface Definition Language (IDL) that defines browser technology interfaces, which is utilized by the fuzzer to create and fuzz all attributes and methods used by them.

### Grammar – IDL Interface
- **Interface:**
  - According to the IDL definitions, an interface is an object with a set of interface members, which can be constants, attributes, or functions. Each interface has a unique identifier and can inherit from a parent interface if needed.
- **LL(1) Interface Definition Grammar:**
  - `"interface" identifier Inheritance "{" InterfaceMembers "}" ";"`

### Grammar – IDL Interface Example
- **Identifier:**
  - Text
- **Inheritance:**
  - CharacterData
- **Example:**
  ```idl
  interface Text : CharacterData {
      Text splitText(in unsigned long offset) raises(DOMException);
      Text replaceWholeText(in DOMString content) raises(DOMException);
      readonly attribute boolean isElementContentWhitespace;
      attribute DOMString wholeText;
  };
  ```

### Grammar – IDL Interface Members
- **Interface Members:**
  - Can be constants, attributes, or functions.
  - **Attributes:**
    - `isElementContentWhitespace`, `wholeText`
  - **Functions:**
    - `splitText()`, `replaceWholeText()`
- **LL(1) Grammar Interface Member Definition:**
  - `InterfaceMember → Const | AttributeOrOperation`
  - `AttributeOrOperation → "stringifier" StringifierAttributeOrOperation | Attribute | Operation`

### Grammar – IDL Attributes
- **Attribute:**
  - A declared interface member with an identifier whose value can be retrieved and, in some cases, changed.
- **LL(1) Grammar Attribute Definition:**
  - `Attribute → Inherit ReadOnly "attribute" Type identifier ";"`
- **Example Interface Attributes:**
  - `readonly attribute boolean isElementContentWhitespace;`
  - `attribute DOMString wholeText;`

### Grammar – IDL Functions
- **Functions:**
  - Referred to as operations in the IDL specification. A function is an interface member that defines behavior that can be invoked on objects implementing the interface.
- **LL(1) Grammar Function Definition:**
  - `Operation → Qualifiers OperationRest`
  - `OperationRest → ReturnType OptionalIdentifier "(" ArgumentList ")" ";"`
- **Example Interface Functions:**
  - `Text replaceWholeText(in DOMString content);`
  - `Text splitText(in unsigned long offset);`