### 5. Experimental Evaluation

In this section, we present the experimental results of our security architecture, which was tested on four device drivers: RealTek RTL-8139 (8139too) and 8139C+ (8139cp) network cards, Ensoniq sound card (ens1371), and Universal Host Controller (USB) interface (uhci-hcd). We ported these drivers to our security architecture and conducted experiments using QEMU 0.9.1 for the network and USB drivers, and VMWare Workstation 6 for the sound driver, running an unmodified Linux-2.6.18.1 kernel.

#### 5.1. Driver Selection
We chose these four drivers for two main reasons:
1. **Platform Availability**: The selected drivers were available on our test platforms.
2. **Porting Effort**: DriverSlicer, the tool used for porting, is not fully automated, requiring domain-specific understanding and significant time. Despite this, the chosen drivers represent three major driver families with different kernel/driver interfaces.

#### 5.2. Privilege Separation
Using DriverSlicer, we partitioned each driver into a k-driver (kernel driver) and a u-driver (user-space driver). The k-driver contains performance-critical code and code that requires kernel privileges, while the u-driver contains non-critical functions. Figure 4 compares the sizes of the k-driver and u-driver, showing that our architecture reduces the amount of hand-written driver code running with kernel privilege and moves several non-critical functions to user space.

Figure 4 also presents the number of annotations required for DriverSlicer, classified as kernel header annotations (needed once per kernel version) and driver-specific annotations. The results indicate that device drivers can be ported with a small number of annotations.

In addition to the k-driver, the kernel runtime and the RPC monitor also execute with kernel privilege, containing RPC code for control and data transfer. Although DriverSlicer generates several thousand lines of RPC code, this code is highly stylized and automatically generated, ensuring its correctness through verification of DriverSlicer.

#### 5.3. Attack Prevention
We evaluated the ability of our architecture to prevent attacks by simulating common vulnerabilities in driver code, such as buffer overflows, especially in packet processing and ioctl handlers. Since u-drivers contain most non-performance-critical functionality, including control packet parsing and ioctl handling, we focused on preventing simulated buffer overflow attacks on u-drivers.

To do this, we first obtained a set of invariants for each driver using a benign workload in a controlled training phase. This workload exercised functions implemented in the u-driver, such as initializing and closing the device and configuring device parameters. For the network drivers, we configured several device parameters using the `ethtool` utility. For the sound driver, we played music files in various formats and adjusted parameters using `alsamixer`. For the USB driver, we inserted and removed several USB devices, and repeatedly initialized and closed the devices.

Figure 5 shows the function coverage obtained by our training workload. Although we did not achieve 100% coverage, we expect vendors to achieve higher coverage during driver development using regression test suites. Figure 6 presents the total number of invariants inferred for each driver.

In the testing phase, we used the RPC monitor to enforce these invariants on u-driver to k-driver communication. We simulated three classes of attacks:

- **Control Hijacking via Injected Downcalls**: We injected ioctl system calls that would result in downcalls to the k-driver. For example, we injected a downcall to the `netif_wake_queue` function. The RPC monitor successfully detected such injection attacks by verifying the set of allowed downcalls.
  
- **Control Hijacking via Modified Function Pointers**: An attacker could modify function pointers communicated from the u-driver to the k-driver, leading to arbitrary code execution within the kernel. We simulated this attack by modifying the `dev->hard_start_xmit` function pointer in the `rtl8139_get_link` function. The RPC monitor prevented this attack by enforcing the invariant that `dev->hard_start_xmit` should not be modified.

- **Non-Control Data Attacks**: Sensitive scalar values, such as I/O memory addresses and configuration parameters, can be maliciously modified by a compromised u-driver. We simulated this attack by modifying the `rtl8139_intr_mask` variable. The RPC monitor detected this attack using invariants that express relationships between the value of the scalar before and after an upcall.

#### 5.4. False Positives and Negatives
We ran the drivers with several benign test workloads to check for false positives and did not observe any. While it is unclear if this result will hold for other drivers, false positives can be eliminated by manually inspecting and refining the invariants.

To evaluate false negatives, we conducted fault-injection experiments using the 8139too and 8139cp drivers. We did not conduct these experiments on the ens1371 and uhci-hcd drivers due to resource constraints.

#### 5.5. Performance Impact
Figure 7 compares the performance of the original drivers and the drivers in our security architecture. The results show a slight decrease in throughput and CPU usage for some drivers, but overall, the performance impact is minimal.

In conclusion, our architecture effectively reduces the amount of critical code running with kernel privilege and prevents common attacks on device drivers, with a manageable performance overhead.