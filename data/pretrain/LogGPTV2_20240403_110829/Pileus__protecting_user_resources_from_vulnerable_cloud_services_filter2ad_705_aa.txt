# Pileus: Protecting User Resources from Vulnerable Cloud Services

## Authors
Yuqiong Sun, Giuseppe Petracca, Xinyang Ge, and Trent Jaeger  
Department of Computer Science and Engineering, The Pennsylvania State University  
Emails: yus138, gxp18, xxg13, [PI's Email]  
*Now at Microsoft Research.

### Abstract
Cloud computing platforms are now constructed as distributed, modular systems of cloud services, which enable cloud users to manage their resources. However, in current cloud platforms, cloud services fully trust each other, making it possible for a malicious user to exploit a vulnerability in one service to gain unauthorized access to another user’s data. To date, over 150 vulnerabilities have been reported in the OpenStack cloud. Research efforts in cloud security have primarily focused on attacks originating from user VMs or compromised operating systems, rather than threats caused by the compromise of distributed cloud services, leaving cloud users vulnerable to these attacks. In this paper, we propose the Pileus cloud service architecture, which isolates each user’s cloud operations to prevent vulnerabilities in cloud services from enabling malicious users to gain unauthorized access. Pileus deploys stateless cloud services "on demand" to service each user’s cloud operations, limiting cloud services to the permissions of individual users. Pileus leverages the decentralized information flow control (DIFC) model for permission management, addressing special challenges in the cloud environment: (1) restricting how cloud services may make security decisions, (2) selecting trustworthy nodes for access enforcement in a dynamic, distributed environment, and (3) limiting the set of nodes a user must trust for each operation. We have ported the OpenStack cloud platform to Pileus, finding that we can systematically prevent compromised cloud services from attacking other users’ cloud operations with less than 3% additional latency for the operation. Application of the Pileus architecture to OpenStack shows that confined cloud services can effectively service users’ cloud operations with modest overhead.

### 1. Introduction
Cloud computing has revolutionized the way we consume computing resources. Instead of maintaining a locally-administered data center, cloud users obtain resources on demand from a public cloud platform. Cloud vendors often construct their platforms as a set of cloud services that implement users' operations. For example, in the OpenStack cloud platform, cloud services authenticate users, provision VMs, manage storage, and more. Often, multiple cloud services collaborate to process a user’s operation, forming a distributed, cloud computing environment.

One significant problem with this distributed environment is that cloud services themselves are complex software components prone to vulnerabilities. In OpenStack, over 150 vulnerabilities have been reported, ranging from resource misuse to authorization bypass to the complete compromise of cloud nodes. Further, current cloud platforms assume a flawed design where distributed cloud services fully trust each other. Consequently, a security breach in a single cloud service may allow adversaries to propagate attacks to other services, posing security risks for any user’s cloud resources.

Current defenses against cloud service vulnerabilities are often limited. First, OpenStack provides defenses to protect communications among services and mechanisms for reducing user token privilege, but neither prevents a compromised cloud service from misbehaving or propagating attacks. Second, researchers have explored defenses to protect data security in clouds, including data encryption, data sealing, and protection against adversarial hypervisors and privileged domains. However, these systems aim to block cloud components from unauthorized access to user data, while cloud services often need access to perform operations. Third, researchers have explored defenses to mitigate compromises of certain cloud components, but these systems often only address compromised compute services and require all other cloud services to be trustworthy. Finally, researchers have explored approaches to better protect distributed web applications deployed on PaaS clouds, focusing on protecting data security for cloud-hosted applications, relying on the cloud platform, including the underlying cloud services, to be trustworthy.

The goal of this work is to prevent malicious users from gaining unauthorized access to other cloud users’ resources by exploiting vulnerabilities in cloud services. To achieve this, we leverage the following insights: First, many cloud services in the OpenStack cloud platform run in a stateless manner, where cloud services do not maintain internal state across user operations. Thus, we propose converting cloud services into a set of stateless event handlers that are spawned on demand to process individual user’s operations with only that user’s permissions. Second, by applying the decentralized information flow control (DIFC) model, we localize the security decisions made by cloud services to a few trusted services, thereby preventing adversaries from exploiting vulnerabilities to access users’ data. While the DIFC model has been applied to distributed systems and even to control user VMs on the cloud, a cloud platform based on spawning event handlers on demand presents special challenges: (1) restricting how cloud services may make security decisions, (2) selecting trustworthy nodes for enforcing access controls properly in a dynamic, distributed environment, and (3) limiting the set of nodes a user must trust for each operation.

We address these challenges by designing the Pileus cloud service architecture, which governs the execution of users’ cloud operations across a distributed cloud platform. When a user performs a cloud operation, a Pileus initiator configures access control for the operation’s execution in the cloud, only allowing approved programs when invoked in an operation-specific manner to exercise the user’s authority (e.g., declassify or endorse user data). To enforce the user’s access control across cloud nodes throughout the operation, the Pileus ownership registry selects the cloud nodes deemed most capable of enforcing the user’s access control throughout operation execution. On each node, a Pileus daemon configures access control enforcement to manage the spawned event handlers.

We demonstrate Pileus by porting OpenStack to the Pileus cloud architecture. We show how the OpenStack cloud services naturally comply with the Pileus cloud architecture and how we implement OpenStack cloud operations in Pileus OpenStack. Results show that we can improve the security of OpenStack in a systematic way by factoring existing OpenStack services into event handlers, resulting in no more than 3% additional latency on operation execution as perceived by cloud users.

### Contributions
- **Pileus Cloud Architecture:** We define the Pileus cloud architecture for preventing malicious users from exploiting vulnerabilities in cloud services to obtain unauthorized access to other users’ resources by spawning a set of stateless event handlers to process each user’s operation with only that user’s permissions.
- **Event Handler Confinement:** Pileus confines event handlers where: (1) a Pileus initiator configures access control at operation initiation; (2) a Pileus ownership registry selects cloud nodes to run event handlers that are deemed most capable of enforcing the user’s access control; and (3) Pileus daemons on each cloud node spawn event handlers and govern their execution.
- **Porting OpenStack to Pileus:** We have ported OpenStack cloud services to Pileus. We show how Pileus OpenStack systematically prevents the exploitation of cloud service vulnerabilities in OpenStack to protect cloud user data with low overhead.

### 2. Problem Definition

#### 2.1 Security Problems in Cloud Services
Consider a simplified cloud with only the cloud services running, as shown in Figure 1. In this example, users Alice and Bob share the same cloud platform (i.e., the same set of cloud services), but they are mutually distrustful. Consider the following cloud operations performed by Alice and Bob:

1. Alice takes a snapshot of her running VM, then terminates the VM. The used volume of the VM is returned to the volume store. The snapshot is saved to the image store.
2. Bob requires a new volume from the volume store and attaches it to his running VM.
3. Alice requires an image from the image store and launches a new VM based on it.

Below, we identify some security problems that may occur when performing these cloud operations on current cloud platforms, using the OpenStack cloud platform as an example.

**Figure 1: A Simplified Cloud Platform**
- Rounded rectangles represent cloud services.
- Rectangles represent cloud resources.
- Solid arrows represent information flows as a result of Alice’s cloud operations.
- Dashed arrows represent information flows as a result of Bob’s cloud operations.

A basic data security policy is cloud user isolation. For example, VMs owned by Alice and Bob should be kept secret from each other. However, users may exploit vulnerabilities in cloud services to bypass even this basic policy. For instance, a vulnerability in the OpenStack API service allows Alice to bypass authorization and take a snapshot of Bob’s VM in operation #1. Several similar vulnerabilities have been found in OpenStack cloud services, leading to unauthorized access to various cloud resources.

Cloud services also fail to enforce data secrecy over users’ resources. For example, when Alice returns a used volume, the volume service should ensure that sensitive data on the volume is removed. However, vulnerabilities have been found in cloud services that may cause the volume erasure to be omitted or bypassed. Thus, when Bob obtains a volume previously used by Alice, he may learn some of Alice’s sensitive data.

In addition, cloud services may fail to enforce data integrity over users’ critical cloud resources. For example, cloud platforms enable users to specify an image list, listing images that users have approved for use. Such integrity protection aims to prevent users from accidentally using corrupted images provided by adversaries. Unfortunately, vulnerabilities have been found in cloud services that subvert this protection. For example, a vulnerability in the image service allows Bob to manipulate Alice’s image list to insert his maliciously-crafted VMs. As a result, when Alice performs operation #3, she may be tricked into launching a VM using Bob’s malicious image.

Other security issues may stem from the insecure design of the cloud platform. Current cloud platforms assume a trusted computing base that includes all cloud services. If a single cloud service becomes compromised, an adversary can control the messages produced by the service and easily propagate attacks to other services. Multiple attacks have been demonstrated that enable adversaries to cause a cloud service to forge requests to other cloud services to perform operations specified by the adversaries.

#### 2.2 Problem Definition
From the above analysis, we identify three main problems of current cloud platforms:

1. **Excessive Permissions:** Cloud services run with too many permissions, acting on behalf of any and all cloud users. Consequently, vulnerabilities in these cloud services enable confused deputy attacks.
2. **Security Decisions by Cloud Services:** Cloud services make security decisions, performing various access control checks and defining policies. These checks can be bypassed or omitted, and policies may not reflect user requirements, leading to unauthorized data access.
3. **Full Trust Between Cloud Services:** Cloud services fully trust each other. An adversary can forge requests to other cloud services via cloud service messaging and trick them into performing arbitrary operations. From a user’s perspective, every cloud service must be trusted to protect the user’s security, even if the user is not using that cloud service.

Previous cloud defenses do not address these problems. Systems such as CloudVisor, Self-Service Clouds, and Haven focus on protecting user data against adversarial hypervisors and privileged domains. Systems such as Cloud Verifier and Excalibur ensure that only cloud nodes that satisfy certain properties may access user’s data. In both cases, such defenses prevent untrusted code from accessing security-critical data, but cloud services must process user requests while protecting each user’s data. Thus, these defenses do not prevent cloud services from being leveraged as confused deputies nor do they prevent adversary-controlled cloud services from propagating attacks.

These problems represent core challenges in building secure systems. For example, Asbestos studied how multi-user programs (e.g., web servers) can be confined to run with least privilege. DStar, Fabric, and Mobile-fabric studied how distributed computation can be carried out in a system where its components do not trust each other. The decentralized information flow control (DIFC) model and systems, as a general approach, show how the security of complex applications can be factored into small and simple programs.

However, the problem for cloud services is that a set of cloud services need to work together to implement individual operations on demand, isolated from the rest of the system. We need to construct assured pipelines with operation-specific restrictions on each pipeline. Additionally, these assured pipelines may leverage arbitrary cloud nodes chosen dynamically, and we need to ensure that the chosen cloud nodes are capable of enforcing the access control requirements. DIFC systems do not enforce operation-specific constraints nor evaluate the trustworthiness of nodes based on their workloads.

### 3. DIFC Model Background
Pileus adopts its definitions of security labels and ownerships from the DIFC model in Flume and its definition of message labels from DStar. Readers familiar with DIFC may skip this section.

**Security Labels:** DIFC models define security labels in terms of sets of tags. Tags are random identifiers with no inherent meaning until they are assigned to labels. Each process runs with two labels: S for secrecy and I for integrity. If tag \(a_s \in S\) for a process (e.g., cloud service), the process is assumed to hold secrets only accessible to processes with security labels containing the tag \(a_s\). Similarly, if tag \(a_i \in I\), then that process is endorsed by the creator of tag \(a_i\). Labels form a lattice under the partial order of the subset relation among tags. Data objects in the cloud (e.g., images, VMs) are also assigned security labels.

Consider an information flow from a source \(p\) to a destination \(q\). The DIFC constraint that protects the secrecy and integrity of any information flow \(p \rightarrow q\) is:
\[ S_p \subseteq S_q \text{ and } I_q \subseteq I_p \]

**Ownerships:** DIFC models may express trust in processes to make some security decisions on behalf of tags, calling the set of tags in which a process is trusted ownerships. Functionally, an ownership allows a process holding the ownership to adjust its security label by adding and removing such tags. For example, ownership of secrecy tag \(a\) allows a process to remove \(a\) from its secrecy label, trusting the process to declassify its data associated with tag \(a\). Ownership of integrity tag \(b\) allows a process to add \(b\) to its integrity label, effectively trusting the process to endorse data (e.g., input messages) to satisfy the integrity requirements associated with tag \(b\). Note that ownerships may be transferred between processes, allowing one process to delegate authority to another.

For secrecy, \(p\) would get the maximum latitude in sending data to \(q\) if it lowers its secrecy label to \(S_p - O_p\) and \(q\) raises its secrecy label to \(S_q \cup O_q\). In this case, the DIFC constraints for safe information flows are:
\[ S_p - O_p \subseteq S_q \cup O_q \text{ and } I_q - O_q \subseteq I_p \cup O_p \]

**Message Labels:** When \(p\) and \(q\) run on different hosts (e.g., cloud nodes), no single reference monitor can see the labels of \(p\) and \(q\) at the same time. In this case, information flow is transitively enforced using message labels. Say \(m\) is a message sent from \(p\) to \(q\). By attaching a message label to \(m\), the information flow constraint becomes:
\[ S_p - O_q \subseteq S_m \subseteq S_q \cup O_q \]
The left half of the above constraint \(S_p - O_p \subseteq S_m\) is enforced on \(p\)'s node, and the right half \(S_m \subseteq S_q \cup O_q\) is enforced on \(q\)'s node. The integrity constraint is similar. Thus, two hosts can work collaboratively to enforce the information flow constraint.

**Example:** Figure 2 illustrates some uses of the DIFC model in addressing problems introduced in Section 2.1. Figure 2(a) shows that by confining cloud services to their respective users’ secrecy labels, Alice (\(S = \{a\}\)) and Bob (\(S = \{b\}\)) can only access their own data.