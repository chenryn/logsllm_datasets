title:Pileus: protecting user resources from vulnerable cloud services
author:Yuqiong Sun and
Giuseppe Petracca and
Xinyang Ge and
Trent Jaeger
Pileus: Protecting User Resources from
Vulnerable Cloud Services
Yuqiong Sun, Giuseppe Petracca, Xinyang Ge∗ and Trent Jaeger
Department of Computer Science and Engineering
yus138, gxp18, xxg13, PI:EMAIL
The Pennsylvania State University
ABSTRACT
Cloud computing platforms are now constructed as distributed, mod-
ular systems of cloud services, which enable cloud users to manage
their cloud resources. However, in current cloud platforms, cloud
services fully trust each other, so a malicious user may exploit a
vulnerability in a cloud service to obtain unauthorized access to
another user’s data. To date, over 150 vulnerabilities have been re-
ported in cloud services in the OpenStack cloud. Research efforts in
cloud security have focused primarily on attacks originating from
user VMs or compromised operating systems rather than threats
caused by the compromise of distributed cloud services, leaving
cloud users open to attacks from these vulnerable cloud services. In
this paper, we propose the Pileus cloud service architecture, which
isolates each user’s cloud operations to prevent vulnerabilities in
cloud services from enabling malicious users to gain unauthorized
access. Pileus deploys stateless cloud services “on demand” to ser-
vice each user’s cloud operations, limiting cloud services to the per-
missions of individual users. Pileus leverages the decentralized in-
formation ﬂow control (DIFC) model for permission management,
but the Pileus design addresses special challenges in the cloud en-
vironment to: (1) restrict how cloud services may be allowed to
make security decisions; (2) select trustworthy nodes for access en-
forcement in a dynamic, distributed environment; and (3) limit the
set of nodes a user must trust to service each operation. We have
ported the OpenStack cloud platform to Pileus, ﬁnding that we can
systematically prevent compromised cloud services from attacking
other users’ cloud operations with less than 3% additional latency
for the operation. Application of the Pileus architecture to Open-
Stack shows that conﬁned cloud services can service users’ cloud
operations effectively for a modest overhead.
1.
INTRODUCTION
Cloud computing has revolutionized the way we consume com-
puting resources.
Instead of maintaining a locally-administered
data center, cloud users obtain resources on demand from a pub-
lic cloud platform [3, 32]. Cloud vendors often construct their
cloud platforms as a set of cloud services that implement users’
∗Now at Microsoft Research.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
© 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991109
52
operations. For example, in the OpenStack cloud platform, cloud
services authenticate users, provision VMs, manage storage, etc.
Often multiple cloud services collaborate to process a user’s oper-
ation, forming a distributed, cloud computing environment.
One signiﬁcant problem with this distributed computing environ-
ment is that cloud services themselves are complex software com-
ponents prone to vulnerabilities. In the OpenStack, over 150 vul-
nerabilities have been reported in its cloud services, ranging from
resource misuse [12] to authorization bypass [10] to the complete
compromise of cloud nodes [1]. Further, current cloud platforms
assume a ﬂawed design where distributed cloud services fully trust
each other [43]. Consequently, security breach in a single cloud
service may allow adversaries to propagate attacks to other cloud
services, producing security risks for any user’s cloud resources.
Current defenses against cloud service vulnerabilities are often
limited. First, OpenStack provides defenses to protect commu-
nications among services [28] and mechanisms for reducing user
token privilege [2], but neither defense prevents a compromised
cloud service from misbehaving or propagating attacks. Second, re-
searchers have explored defenses to protect data security in clouds,
including data encryption [31], data sealing [34] and protection
against adversarial hypervisors and privileged domains [53, 9, 6,
46]. However, these systems aim to block cloud components from
unauthorized access to user data, but cloud services often need ac-
cess to user data to perform operations. Third, researchers have
explored defenses to mitigate compromises of certain cloud com-
ponents [45]. These systems often only address compromised com-
pute services and require all other cloud services to be trustworthy.
Finally, researchers have explored approaches to better protect dis-
tributed web applications deployed on PaaS clouds [29, 5]. These
systems focus on protecting data security for cloud-hosted applica-
tions, relying on the cloud platform, including the underlying cloud
services to be trustworthy.
The goal of this work is to prevent malicious users from gaining
unauthorized access to other cloud users’ resources by exploiting
vulnerabilities in cloud services. To achieve this goal, we lever-
age the following insights. First, we ﬁnd that many cloud services
in the OpenStack cloud platform run in a stateless manner, where
cloud services do not maintain internal state across user operations.
Thus, we propose converting cloud services into a set of stateless
event handlers [15] that are spawned on demand to process indi-
vidual user’s operations with only that user’s permissions. Second,
by applying decentralized information ﬂow control (DIFC) [24]
model, we localize the security decisions made by cloud services
to a few trusted services, thereby preventing adversaries from ex-
ploiting vulnerabilities that may be present in those cloud services
to access users’ data. While the DIFC model has been applied
to distributed systems [52] and even to control user VMs on the
cloud [29, 5], a cloud platform based on spawning event handlers
on demand to service user operations presents special challenges
to: (1) restrict how cloud services may be allowed to make security
decisions; (2) select trustworthy nodes for enforcing access con-
trols properly in a dynamic, distributed environment; and (3) limit
the set of nodes a user must trust to service each operation.
We address these challenges by designing the Pileus cloud ser-
vice architecture, which governs the execution of users’ cloud op-
erations across a distributed cloud platform. When a user performs
a cloud operation, a Pileus initiator conﬁgures access control for
the operation’s execution in the cloud, only allowing approved pro-
grams when invoked in an operation-speciﬁc manner to exercise the
user’s authority (e.g., declassify or endorse user data). To enforce
the user’s access control across cloud nodes throughout the opera-
tion, the Pileus ownership registry selects the cloud nodes deemed
most capable of enforcing the user’s access control throughout op-
eration execution. On each node, a Pileus daemon conﬁgures ac-
cess control enforcement to manage the spawned event handlers.
We demonstrate Pileus by porting OpenStack to the Pileus cloud
architecture. We show how the OpenStack cloud services naturally
comply to the Pileus cloud architecture, and how we implement
OpenStack cloud operations in Pileus OpenStack. Results show
that we can improve the security of OpenStack in a systematic way
by factoring existing OpenStack services into event handlers, re-
sulting in no more than 3% additional latency on operation execu-
tion as perceived by cloud users.
We highlight the following contributions of this paper:
• We deﬁne the Pileus cloud architecture for preventing mali-
cious users from exploiting vulnerabilities in cloud services
to obtain unauthorized access to other users’ resources by
spawning a set of stateless event handlers to process each
user’s operation with only that user’s permissions.
• Pileus conﬁnes event handlers where: (1) a Pileus initiator
conﬁgures access control at operation initiation; (2) a Pileus
ownership registry selects cloud nodes to run event handlers
that are deemed most capable of enforcing user’s access con-
trol; and (3) Pileus daemons on each cloud node spawn event
handlers and govern their execution.
• We have ported OpenStack cloud services to Pileus. We
show how Pileus OpenStack systematically prevents the ex-
ploitation of cloud service vulnerabilities in OpenStack to
protect cloud user data for low overhead.
2. PROBLEM DEFINITION
2.1 Security Problems in Cloud Services
Consider a simpliﬁed cloud with only the cloud services running
as shown in Figure 1. In this example, user Alice and user Bob
share the same cloud platform (i.e., same set of cloud services), but
are mutually distrustful. Consider the following cloud operations
performed by Alice and Bob.
1. Alice takes a snapshot of her running VM, then terminates
the VM. The used volume of the VM is returned to the vol-
ume store. The snapshot is saved to the image store.
2. Bob requires a new volume from the volume store and at-
taches it to his running VM.
3. Alice requires an image from image store and launches a new
VM based on it.
Below, we identify some security problems that may occur when
performing these cloud operations on current cloud platforms, us-
ing the OpenStack cloud platform [27] as the example.
Bob
Alice
API Service
Compute 
Service
volume
Snapshot
Volume 
Service
Image 
Service
Bob
VM
Allice
VM_1
Allice
VM_2
Figure 1: A simpliﬁed cloud platform. Rounded rectangles
represent cloud services, rectangles represent cloud resources.
Solid arrows represent information ﬂows as a result of Al-
ice’s cloud operations and dashed arrows represent informa-
tion ﬂows as a result of Bob’s cloud operations.
A basic data security policy is cloud user isolation. For exam-
ple, VMs owned by Alice and Bob should be kept secret from each
other. However, users may exploit vulnerabilities in cloud services
to bypass even this basic policy. As an example, a vulnerability in
the OpenStack API service [10] allows Alice to bypass the autho-
rization and take a snapshot of Bob’s VM in operation #1 above.
Several similar vulnerabilities [39, 40] were found in OpenStack
cloud services, leading to unauthorized access to cloud resources
of various kinds.
Cloud services also fail to enforce data secrecy over users’ re-
sources. For example, when Alice returns an used volume, the vol-
ume service should ensure that sensitive data on the volume is re-
moved. However, vulnerabilities [12, 13] were found in cloud ser-
vices that may cause the volume erasure to be omitted or bypassed.
Thus, when Bob obtains a volume used by Alice previously, as in
operation #2, he may learn some of Alice’s sensitive data.
In addition, cloud services may fail to enforce data integrity over
users’ critical cloud resources. For example, cloud platforms en-
able their users to specify an image list, listing images that users
have approved for use (i.e., approved the integrity of). Such in-
tegrity protection aims to prevent users from accidentally using cor-
rupted images provided by adversaries. Unfortunately, vulnerabili-
ties were found in cloud services that would subvert this protection.
For example, a vulnerability [41] in the image service allows Bob
to manipulate Alice’s image list to insert his maliciously-crafted
VMs. As a result, when Alice performs operation #3, she may be
tricked into launching a VM using Bob’s malicious image.
Other security issues may stem from the insecure design of the
cloud platform at large. Current cloud platforms assume a trusted
computing base that includes all cloud services. Thus, if a single
cloud service becomes compromised such that an adversary can
control the messages produced by the service, it can easily propa-
gate attacks to other services. For example, multiple attacks [43,
44, 45] were shown that enable adversaries to cause a cloud ser-
vice to forge requests to other cloud services to perform operations
speciﬁed by the adversaries.
2.2 Problem Deﬁnition
From the above analysis, we identify three main problems of
current cloud platforms: First, cloud services run with too many
permissions. Current cloud services can act on behalf of any and
all cloud users. Consequently, vulnerabilities in these cloud ser-
vices enable confused deputy attacks [17]. Second, cloud services
make security decisions. Current cloud services perform a variety
of access control checks and even deﬁne the access control policies
to be enforced in some cases. Such checks can often be bypassed
or omitted and policies may not reﬂect user requirements, leading
to unauthorized data access. Third, cloud services fully trust each
other. An adversary can forge requests to other cloud services via
53
cloud service messaging and trick them into performing arbitrary
operations. From a user’s perspective, every cloud service must be
trusted to protect the user’s security, even if the user is not using
that cloud service.
Previous cloud defenses do not address these problems. Systems
such as CloudVisor [53], Self-Service Clouds [9] and Haven [6]
focus on protecting user data against adversarial hypervisors and
privileged domains. Systems such as Cloud Veriﬁer [35] and Ex-
calibur [34] ensure that only cloud nodes that satisfy certain prop-
erties may access user’s data.
In both cases, such defenses pre-
vent untrusted code from accessing security-critical data, but cloud
services must process user requests while protecting each user’s
data. Thus, these defenses do not prevent cloud services from be-
ing leveraged as confused deputies nor do they prevent adversary-
controlled cloud services from propagating attacks.
These problems represent some of the core challenges in build-
ing secure systems in general. For example, Asbestos [15] studied
how multi-user programs (e.g., web servers) can be conﬁned to run
with least privilege. DStar [52], Fabric [23] and Mobile-fabric [4]
studied how distributed computation can be carried out in a system
where its components do not trust each other. The decentralized
information ﬂow control (DIFC) model [24] and systems [51, 21,
15, 33, 11], as a general approach, show how security of complex
applications can be factored into small and simple programs.
However, the problem for cloud services is that a set of cloud
services need to work together to implement individual operations
on demand isolated from the rest of the system. In a sense, we need
to construct assured pipelines [7] with operation-speciﬁc restric-
tions on each pipeline.
In addition, these assured pipelines may
leverage arbitrary cloud nodes chosen dynamically, and we need
to ensure that the cloud nodes chosen are capable of enforcing the
access control requirements. DIFC systems do not enforce either
operation-speciﬁc constraints nor evaluate the trustworthiness of
nodes based on their workloads.
3. DIFC MODEL BACKGROUND
Pileus adopts its deﬁnitions of security labels and ownerships
from the DIFC model in Flume [21] and its deﬁnition of message
labels from DStar [52]. Readers who are familiar with DIFC may
skip this section.
Security Labels. DIFC models deﬁne security labels in terms of
sets of tags. Tags are random identiﬁers with no inherent meaning
until they are assigned to labels. Each process runs with two labels,
If tag as ∈ S for a process
S for secrecy and I for integrity.
(e.g., cloud service), the process is assumed to hold secrets only
accessible to processes with security labels containing the tag as.
Similarly, if tag ai ∈ I, then that process is endorsed by the creator
of tag ai. Labels form a lattice under the partial order of the subset
relation among tags [14]. Data objects in the cloud (e.g., images,
VMs) are also assigned security labels.
Consider an information ﬂow from a source p to a destination q1.
The DIFC constraint that protects the secrecy and integrity of any
information ﬂow p → q is:
Sp ⊆ Sq and Iq ⊆ Ip
(3.1)
Ownerships. DIFC models may express trust in processes to make
some security decisions on behalf of tags, calling the set of tags in
which a process is trusted ownerships. Functionally, an ownership
allows a process holding the ownership to adjust its security la-
1p and q can be processes or data objects, but they cannot be data objects at
the same time.
54
bel by adding and removing such tags. For example, ownership
of secrecy tag a allows a process to remove a from its secrecy la-
bel, trusting the process to declassify its data associated with tag a.
Ownership of integrity tag b allows a process to add b to its integrity
label, effectively trusting the process to endorse data (e.g., input
messages) to satisfy the integrity requirements associated with tag
b. Note that ownerships may be transferred between processes, al-
lowing one process to delegate authority to another.
For secrecy, p would get the maximum latitude in sending data
to q if it lowers its secrecy label to Sp − Op and q raises its se-
crecy label to Sq ∪ Oq. In this case, the DIFC constraints for safe
information ﬂows are:
Sp − Op ⊆ Sq ∪ Oq and Iq − Oq ⊆ Ip ∪ Op
(3.2)
Message Labels. When p and q run on different hosts (e.g., cloud
nodes), no single reference monitor can see the labels of p and q at
the same time. In this case, information ﬂow is transitively enforced
using messages labels. Say m is a message sent from p to q. By
attaching a message label to m, the information ﬂow constraint 3.2
thus becomes the following:
Sp − Oq ⊆ Sm ⊆ Sq ∪ Oq
(3.3)
The left half of above constraint Sp − Op ⊆ Sm is enforced on p’s
node and the right half Sm ⊆ Sq ∪ Oq is enforced on q’s node. The
integrity constraint is similar. Thus two hosts can work collabora-
tively to enforce the information ﬂow constraint.
Example. Figure 2 illustrates some uses of the DIFC model in ad-
dressing problems introduced in Section 2.1. Figure 2(a) shows that
by conﬁning cloud services to their respective users’ secrecy labels,
Alice (S = {a}) and Bob (S = {b}) can only access their own