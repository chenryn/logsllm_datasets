（d +(01/0s1)/000001 +dz+(01/051)/00 + d+(01/051)/00 + d+(01/091)/002) +
= 7377 + 8* Tp (seconds)
Now consider a persistent HTTP connection. The total time needed is given by:
( d +0s1/000°001 + dz+0s1/00 + d+ 0s1/00z + d+0s1/00)
+ 10*(200/150+7p + 100,000/150+ Tp )
7351 + 24*Tp (seconds)
Assuming the speed of light is 300*10° m/sec, then Tp=10/(300*10°)0.03 microsec. Tp
is therefore negligible compared with transmission delay.
Thus, we see that persistent HTTP is not significantly faster (less than 1 percent) than the
non-persistent case with parallel download
Problem 11
a) Yes, because Bob has more connections, he can get a larger share of the link
bandwidth.
b) Yes, Bob still needs to perform parallel downloads; otherwise he will get less
bandwidth than the other four users.
Problem 12
Server.py
---
## Page 30
from socket import
serverPort=12000
serverSocket=socket (AF _INET, SOCK_STREAM)
serverSocket.bind((*', serverPort))
serverSocket.listen (l)
connectionSocket, addr = serverSocket.accept ()
while 1:
sentence = connectionSocket.recv (1024)
print
'From
Server:',
sentence,
'\n '
serverSocket.close ()
Problem 13
The MAIL FROM: in SMTP is a message from the SMTP client that identifies the sender
of the mail message to the SMTP server. The From: on the mail message itself is NOT an
SMTP message, but rather is just a line in the body of the mail message.
Problem 14
SMTP uses a line containing only a period to mark the end of a message body.
HTTP uses “Content-Length header field" to indicate the length of a message body.
No, HTTP cannot use the method used by SMTP, because HTTP message could be
binary data, whereas in SMTP, the message body must be in 7-bit ASCII format.
Problem 15
MTA stands for Mail Transfer Agent. A host sends the message to an MTA. The message
then follows a sequence of MTAs to reach the receiver’s mail reader. We see that this
spam message follows a chain of MTAs. An honest MTA should report where it receives
the message. Notice that in this message, *asusus4b96 ([58 . 88 . 21 177]) " does not
report from where it received the email.Since we assume only the originator is
Problem16
UIDL abbreviates “unique-ID listing". When a POP3 client issues the UIDL command,
the server responds with the unique message ID for all of the messages present in the
user's mailbox. This command is useful for “download and keep". By maintaining a file
that lists the messages retrieved during earlier sessions, the client can use the UIDL
command to determine which messages on the server have already been seen.
---
## Page 31
Problem 17
a) C: dele 1
C: retr 2
S: (blah blah
S:
S:
C: dele 2
C: quit
S: +OK POP3 server signing off
b) C: retr 2
S: blah blah
S:
....blah
S:
C: quit
S: +OK POP3 server signing off
c)C:list
S: 1 498
S: 2 912
S:
C: retr 1
S: blah ...
S: ....blah
S:
C: retr 2
S:blah blah
S:
...blah
S:
C: quit
S: +OK POP3 server signing off
Problem 18
a)For a given input of domain name (such as ccn.com), IP address or network
administrator name, the whois database can be used to locate the corresponding
registrar, whois server, DNS server, and so on.
b) NS4.YAHOO.COM from www.register.com; NS1.MSFT.NET from ww.register.com
c)Local Domain: www.mindspring.com
Web servers : www.mindspring.com
---
## Page 32
207.69.189.21, 207.69.189.22,
207.69.189.23, 207.69.189.24,
207.69.189.25, 207.69.189.26, 207.69.189.27,
207.69.189.28
Mail Servers : mx1.mindspring.com (207.69.189.217)
mx2.mindspring.com (207.69.189.218)
mx3.mindspring.com (207.69.189.219)
mx4.mindspring.com (207.69.189.220)
Name Servers: itchy.earthlink.net (207.69.188.196)
scratchy.earthlink.net (207.69.188.197)
www.yahoo.com
Web Servers: www.yahoo.com (216.109.112.135, 66.94.234.13)
Mail Servers: a.mx.mail.yahoo.com (209.191.118.103)
b.mx.mail.yahoo.com (66.196.97.250)
c.mx.mail.yahoo.com (68.142.237.182, 216.39.53.3)
d.mx.mail.yahoo.com (216.39.53.2)
e.mx.mail.yahoo.com (216.39.53.1)
f.mx.mail.yahoo.com (209.191.88.247, 68.142.202.247)
g.mx.mail.yahoo.com (209.191.88.239, 206.190.53.191)
Name Servers: ns1.yahoo.com (66.218.71.63)
ns2.yahoo.com (68.142.255.16)
ns3.yahoo.com (217.12.4.104)
ns4.yahoo.com (68.142.196.63)
ns5.yahoo.com (216.109.116.17)
ns8.yahoo.com (202.165.104.22)
ns9.yahoo.com (202.160.176.146)
www.hotmail.com
Web Servers: www.hotmail.com (64.4.33.7, 64.4.32.7)
Mail Servers: mx1.hotmail.com (65.54.245.8, 65.54.244.8, 65.54.244.136)
mx2.hotmail.c0m (65.54.244.40, 65.54.244.168, 65.54.245.40)
mx3.hotmail.c0m (65.54.244.72, 65.54.244.200, 65.54.245.72)
mx4.hotmail.c0m (65.54.244.232, 65.54.245.104, 65.54.244.104)
Name Servers: ns1.msft.net (207.68.160.190)
ns2.msft.net (65.54.240.126)
ns3.msft.net (213.199.161.77)
ns4.msft.net (207.46.66.126)
ns5.msft.net (65.55.238.126)
d) The yahoo web server has multiple IP addresses
www.yahoo.com (216.109.112.135, 66.94.234.13)
e) The address range for Polytechnic University: 128.238.0.0  128.238.255.255
---
## Page 33
f) An attacker can use the whois database and nslookup tool to determine the IP address
ranges, DNS server addresses, etc., for the target institution.
g)By analyzing the source address of attack packets, the victim can use whois to obtain
information about domain from which the attack is coming and possibly inform the
administrators of the origin domain.
Problem 19
a)The following delegation chain is used for gaia.cs.umass.edu
a.root-servers.net
E.GTLD-SERVERS.NET
ns 1.umass.edu(authoritative)
First command:
dig +norecurse @a.root-servers.net any gaia.cs.umass.edu
：;AUTHORITY SECTION:
edu.
172800 IN
NS
E.GTLD-SERVERS.NET.
edu.
172800 IN
NS
A.GTLD-SERVERS.NET.
edu.
172800 IN
NS
G3.NSTLD.COM.
edu.
172800 IN
NS
D.GTLD-SERVERS.NET.
edu.
172800 IN
NS
H3.NSTLD.COM.
edu.
172800 IN
NS
L3.NSTLD.COM.
edu.
172800 IN
NS
M3.NSTLD.COM.
edu.
172800 IN
NS
C.GTLD-SERVERS.NET.
Among all returned edu DNS servers, we send a query to the first one.
dig +norecurse @E.GTLD-SERVERS.NET any gaia.cs.umass.edu
umass.edu.
172800 IN
NS
ns1.umass.edu.
umass.edu.
172800 IN
NS
ns2.umass.edu.
umass.edu.
172800 IN
NS
ns3.umass.edu.
Among all three returned authoritative DNS servers, we send a query to the first one.
dig +norecurse @ns1.umass.edu any gaia.cs.umass.edu
gaia.cs.umass.edu.
21600 IN
A
128.119.245.12
b)The answer for google.com could be:
a.root-servers.net
E.GTLD-SERVERS.NET
ns1.google.com(authoritative)
---
## Page 34
Problem20
We can periodically take a snapshot of the DNS caches in the local DNS servers. The
Web server that appears most frequently in the DNS caches is the most popular server.
This is because if more users are interested in a Web server, then DNS requests for that
server are more frequently sent by users. Thus, that Web server will appear in the DNS
caches more frequently.
For a complete measurement study, see:
Craig E. Wills, Mikhail Mikhailov, Hao Shang
“Inferring Relative Popularity of Internet Applications by Actively Querying DNS
Caches", in IMC'03, October 27-29, 2003, Miami Beach, Florida, USA
Problem 21
Yes, we can use dig to query that Web site in the local DNS server.
For example, “dig cnn.com" will return the query time for finding cnn.com. If cnn.com
was just accessed a couple of seconds ago, an entry for cnn.com is cached in the local
DNS cache, so the query time is O msec. Otherwise, the query time is large.
Problem 22
For calculating the minimum distribution time for client-server distribution, we use the
following formula:
Des = max {NF/us, F/dmin,
Similarly, for calculating the minimum distribution time for P2P distribution, we use the
following formula:
Dp2p = max{F/us, F/dxin, NF/(us
Where, F = 15 Gbits = 15 * 1024 Mbits
d=d= 2 Mbps
u = 30 Mbps
Note, 300Kbps = 300/1024 Mbps.
Client Server
N
10
100
1000
300 Kbps
7680
51200
512000
700 Kbps
7680
51200
512000
2 Mbps
7680
51200
512000
---
## Page 35
Peer to Peer
N
10
100
1000
300 Kbps
7680
25904
47559
u
700 Kbps
7680
15616
21525
2 Mbps
7680
7680
7680
Problem23
a)Consider a distribution scheme in which the server sends the file to each client, in
parallel, at a rate of a rate of u/N. Note that this rate is less than each of the client's
download rate, since by assumption u/N ≤ dmin. Thus each client can also receive at
rate u/N. Since each client receives at rate u/N, the time for each client to receive the
entire file is F/( u/N) = NF/ u,. Since all the clients receive the file in NF/ us, the
overall distribution time is also NF/ us.
b) Consider a distribution scheme in which the server sends the file to each client, in
parallel, at a rate of dmin. Note that the aggregate rate, N dmin, is less than the server's
link rate us, since by assumption u/N ≥ dmin. Since each client receives at rate dmin,
the time for each client to receive the entire file is F/ dmin. Since all the clients receive
the file in this time, the overall distribution time is also F/ dmin
c)From Section 2.6 we know that
Dcs ≥ max (NF/us, F/dmin}(Equation 1)
Suppose that u/N ≤ dmin. Then from Equation 1 we have Dcs > NF/us . But from (a)
we have Dcs ≤ NF/u, . Combining these two gives:
Dcs = NF/us when us/N ≤ dmin. (Equation 2)
We can similarly show that:
Dcs =F/dmin when u/N > dmin (Equation 3)
Combining Equation 2 and Equation 3 gives the desired result.
Problem24
a)Define u = ul + u2 + ..... + uN. By assumption
u; = (us + t)/V
Equation 2
Let r = u/(N-I) and
rN+1 = (us  u/(N-/)/N
In this distribution scheme, the file is broken into N+ I parts. The server sends bits
from the irh part to the irh peer (i = /, , N) at rate r. Each peer i forwards the bits
arriving at rate r to each of the other N-1 peers. Additionally, the server sends bits
from the (V+ I) ° part at rate r+ to each of the V peers. The peers do not forward the
bits from the (N+ /)" part.
The aggregate send rate of the server is
r1+ .... + rN + N rN+1 = /(N-I) + us  u/(N-I) = us
Thus, the server’s send rate does not exceed its link rate. The aggregate send rate of
peer i is
(V-I)r = i
Thus, each peer’s send rate does not exceed its link rate.
In this distribution scheme, peer i receives bits at an aggregate rate of
/(n + n) =N /(IN)/nn) +(IN)/n = fa +1+ x +u
---
## Page 37
Thus each peer receives the file in NF/(u,+u).
(For simplicity, we neglected to specify the size of the file part for i = 1, -., N+1
We now provide that here. Let  = (us+u)/N be the distribution time. For i = 1, ., N,
the ir file part is F; = r; △ bits. The (N+1)* file part is Fn+1 = rN+1 △ bits. It is
straightforward to show that F+ ..... + FN+1 = F.)
c)The solution to this part is similar to that of 17 (c). We know from section 2.6 that
Dp2p >= max{F/us, NF/(us + u)}
Combining this with a) and b) gives the desired result
Problem25
There are N nodes in the overlay network. There are N(N-1)/2 edges.
Problem26
Yes. His first claim is possible, as long as there are enough peers staying in the swarm for
a long enough time. Bob can always receive data through optimistic unchoking by other
peers.
His second claim is also true. He can run a client on each host, let each client "free-ride,"
and combine the collected chunks from the different hosts into a single file. He can even
write a small scheduling program to make the different hosts ask for different chunks of
the file. This is actually a kind of Sybil attack in P2P networks.
Problem27
d.
N files, under the assumption that we do a one-to-one matching by pairing video
versions with audio versions in a decreasing order of quality and rate.
b.
2N files.
Problem28
a)If you run TCPClient first, then the client will attempt to make a TCP connection with
a non-existent server process. A TCP connection will not be made.
b) UDPClient doesn’t establish a TCP connection with the server. Thus, everything
should work fine if you first run UDPClient, then run UDPServer, and then type some
input into the keyboard.
---
## Page 38
c)If you use different port numbers, then the client will attempt to establish a TCP
connection with the wrong process or a non-existent process. Errors will occur.
Problem29
In the original program, UDPClient does not specify a port number when it creates the
socket. In this case, the code lets the underlying operating system choose a port number.
With the additional line, when UDPClient is executed, a UDP socket is created with port
number5432.
UDPServer needs to know the client port number so that it can send packets back to the
correct client socket. Glancing at UDPServer, we see that the client port number is not
“"hard-wired” into the server code; instead, UDPServer determines the client port number
by unraveling the datagram it receives from the client. Thus UDP server will work with
any client port number, including 5432. UDPServer therefore does not need to be
modified.
Before:
Client socket = x (chosen by OS)