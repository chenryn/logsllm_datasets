# Windows调试艺术——PE文件变形（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上次的文章中我们着重探讨了导入函数和导出函数的具体过程，实际上也潜在地分析了PE文件的大部分结构，比如：导入表、导出表、延迟绑定表等等，这篇文章就把剩余的PE结构进行一下详细的总结，并在我们已经学过的知识的基础上进行简单的PE变形技术，为我们后期写壳做好充分准备。
阅读本篇前建议阅读：
[Windows调试艺术——导入函数和导出函数](https://www.anquanke.com/post/id/177462)
说起header大家应该都不陌生，jpg有jpg的头，zip有zip的头，http传输中有http头，特别是在ctf比赛中header更是“重灾区”，经常被拿来做手脚。头实际上就是起到了总览和标记的作用。所谓标记也就是标示这个文件是个啥，是pe还是zip，起到了分类的作用；所谓总览就是把文件的一些整体性的、重要的信息放进来。如此可见头的重要性。
我们还是通过一张笔者自制的图来总体浏览一下头的结构
可以看到PE的头主要由Dos header、nt_header两部分组成，我们一点一点看
## Image_Dos_Header && Dos_Stub介绍和变形技术
看到dos就知道这些是“老古董”，它主要是为了兼容MS-DOS操作系统，stub其实就是在dos环境下的代码段，header其实就是dos环境下的头，实际上在dos操作系统上，我们可以认为pe文件就是Image_Dos_Header和Dos_Stub组成的文件，其他是“垃圾数据”。
dos_header结构体如下：
    typedef struct _IMAGE_DOS_HEADER {        
    WORD   e_magic;                         // Magic number  
        WORD   e_cblp;                      // Bytes on last page of file  
        WORD   e_cp;                        // Pages in file  
        WORD   e_crlc;                      // Relocations  
        WORD   e_cparhdr;                   // Size of header in paragraphs  
        WORD   e_minalloc;                  // Minimum extra paragraphs needed  
        WORD   e_maxalloc;                  // Maximum extra paragraphs needed  
        WORD   e_ss;                        // Initial (relative) SS value  
        WORD   e_sp;                        // Initial SP value  
        WORD   e_csum;                      // Checksum  
        WORD   e_ip;                        // Initial IP value  
        WORD   e_cs;                        // Initial (relative) CS value  
        WORD   e_lfarlc;                    // File address of relocation table  
        WORD   e_ovno;                      // Overlay number  
        WORD   e_res[4];                    // Reserved words  
        WORD   e_oemid;                     // OEM identifier (for e_oeminfo)  
        WORD   e_oeminfo;                   // OEM information; e_oemid specific  
        WORD   e_res2[10];                  // Reserved words  
        LONG   e_lfanew;                    // File address of new exe header  
      } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
虽说是为了兼容Dos的老古董，但它的某些结构我们还是需要了解的。magic是魔术字，它的值固定为0x4D5A，实现的就是上面提到的标记的作用。第二个需要关心的就是最后的e_lfanew，它实际上是NT头的偏移，因为Dos部分的大小是不确定的，PE加载器要通过这个字段来找到NT头。
如图所示，lfanew的值为00 00 00 80，0+80=80，而80处正是NT头的起始位置。
实际上，我们经常通过对这部分的修改来实现PE变形，只知道这些字段的意思还远远不够，我们必须知道哪些部分能动，哪些部分不能动才能实现操作，例如：我们可以在Dos头中藏入密钥实现解密，加入效验位检查文件是否被篡改，病毒文件还可以通过在此处设置标志位来检验文件是否已经被感染等。  
这里作者尝试修改了每一项的数据进行测试，结论是——除了lfanew和magic以外的字段可以随意修改。
Dos_Stub也就是Dos程序的代码段，默认情况下我们编写的PE程序都会自动添上一段Dos代码，功能很简单：打印一句话。当然我们可以在大小范围内随意修改，只要你会写Dos。
但由于在windows上Stub并不会运行，所以，我们可以将敏感数据甚至是别的程序（病毒经常会采取这样的手段，后期再将程序释放出来）藏在这里。那这样我们就需要扩充Stub的大小了，Dos_Header的lfanew是NT头的偏移，而Dos头的大小是固定的，我们修改了它就相当于是修改了Stub的大小。下面我们就来实际试一下，程序仍沿用上次文章中的test。
  * 修改lfanew的值，这里我们就改成1080好了（因为1000恰好是4kb，也就是1个页的大小）  
  * 修改Image_Optional_Header的AddressOfEntryPoint，虽然还没讲到这部分，大家可以根据010Editor的提示先进行修改，这其实就是程序的入口点，因为之后我们要把后面的内容整体往后移1000h，所以实际上入口点的偏移（这里要注意，包括下边提到的字段大都是RVA，并不是具体的值，加1000不是说入口点的值加了1000，而是入口点对应的偏移往后偏移了1000，详细的计算之前的文章提到过了，读者可自行证明）也需要加1000h  
  * 修改Image_Optional_Header的SizeOfImage，这是整个映像的大小，同样要加1000  
  * 修改Image_Optional_Header的SizeOfHeaders，同样加1000，这里的值并不是RVA了，而是头部的大小，所以加1000的意思就是加了1000的大小  
  * Image_Section_Header的VirtualAddress和PointerToRawData，同样加1000，这里有好几个节头，就不再一一放截图了
  * 调整Image_Optional_Header的Image_Data_Directory中各个表的virtualAddress以及对应的表的RVA内容，此处要修改的内容较多，建议参考上一篇文章的进行修改。
  * 复制原来Stub之后所有的内容到新lfanew的偏移  
好了，大功告成，保存后运行，程序一切正常，完美！
## Image_NT_Header介绍和变形技术
此结构是程序在Windows中运行的真实头部，主要有三部分构成：Signatrue如同Dos的magic，他也是起到了标志的作用，值固定为0x4550，也就是字母PE；Image_File_Header是文件头的意思，它保存着最基本的信息；Image_Optional_Header我们已经打过交道了，可以看到它保存着各种重要的信息，有的书将它译作“可选头”，但显然它必须有，而不是“可选”，所以我一般叫它拓展头。
    typedef struct _IMAGE_FILE_HEADER {  
        WORD    Machine;  
        WORD    NumberOfSections;  
        DWORD   TimeDateStamp;  
        DWORD   PointerToSymbolTable;  
        DWORD   NumberOfSymbols;  
        WORD    SizeOfOptionalHeader;  
        WORD    Characteristics;  
    } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
首先来看文件头，各个字段含义如下：
  * Machine是指程序运行的cpu平台，AMD还是Intel，一般不需要关心
  * NumberOfSections是程序中节的数量
  * TimeDateStamp是时间戳，一般是链接器帮我们填写的，之前windbg调试时我们曾用它作为标志来检验我们找的偏移是否正确
  * PointerToSymbolTable，COFF文件符号表在文件中的偏移
  * NumberOfSymbols，符号的数量
  * SizeOfOptionalHeader，后续扩展头的大小
  * Characteristics，PE文件的属性，这个较为复杂，这里给出详细的表单，不再做过多说明，需要时可对照010Editor进行查看
    #define IMAGE_FILE_RELOCS_STRIPPED           0x0001  // Relocation info stripped from file.  
    #define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  // File is executable  (i.e. no unresolved externel references).  
    #define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  // Line nunbers stripped from file.  
    #define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  // Local symbols stripped from file.  
    #define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  // Agressively trim working set  
    #define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  // App can handle >2gb addresses  
    #define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  // Bytes of machine word are reversed.  
    #define IMAGE_FILE_32BIT_MACHINE             0x0100  // 32 bit word machine.  
    #define IMAGE_FILE_DEBUG_STRIPPED            0x0200  // Debugging info stripped from file in .DBG file  
    #define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  // If Image is on removable media, copy and run from the swap file.  
    #define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  // If Image is on Net, copy and run from the swap file.  
    #define IMAGE_FILE_SYSTEM                    0x1000  // System File.  
    #define IMAGE_FILE_DLL                       0x2000  // File is a DLL.  
    #define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  // File should only be run on a UP machine  
    #define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  // Bytes of machine word are reverse
可以看到文件头并不复杂，实际上大多数的重要数据都是在扩展头里的，下面就来看一下扩展头的结构
    typedef struct _IMAGE_OPTIONAL_HEADER {  
        WORD    Magic;  
        BYTE    MajorLinkerVersion;  
        BYTE    MinorLinkerVersion;  
        DWORD   SizeOfCode;  
        DWORD   SizeOfInitializedData;  
        DWORD   SizeOfUninitializedData;  
        DWORD   AddressOfEntryPoint;  
        DWORD   BaseOfCode;  