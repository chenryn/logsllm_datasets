# 条件判断
---
- https://www.kancloud.cn/imxieke/ruby-base/107292
---
# 什么是条件判断
接下来，我们来考虑一下如何将公历转换为平成纪年。首先，我们将输入的字符串转换为数值后减去 1988，最后输出运算结果，结束程序。
> 1989 年为平成元年，2014 年是平成 26 年。
```ruby
# 将公历转换为平成纪年
ad = ARGV[0].to_i
heisei = ad - 1988
puts heisei
```
```ruby
> ruby ad2heisei.rb 2013
25
```
但是，这个程序有点小问题。如果我们输入 1989 年以前的年份，返回值会变成 0 或者负数。
按道理，1989 年以前的年份是不能转换为平成 XX 年的，因此程序本不应允许输入示例中那样的年份。我们将程序稍微改进一下，若输入 1989 年以前的年份，程序则返回“无法转换”的提示。
在这样的情况下，为了实现程序在“某个条件时执行○○处理，否则执行 ×× 处理”，Ruby 为我们准备了条件判断语句。
条件判断语句主要有以下三种。
- if 语句
- unless 语句
- case 语句
# Ruby 中的条件
**条件与真假值**
我们在之前的章节已经介绍过了在条件判断中常用到的比较运算符。等号 `==`，不等号 `>`、` true
p "AAA".empty? #=> false
```
另外，除了 `true` 和 `false` 外，还有其他值可作为条件判断的值。例如，用正则表达式进行匹配时，匹配成功返回该字符串的位置，匹配失败返回 `nil`。
```ruby
p /Ruby/ =~ "Ruby"    #=> 0
p /Ruby/ =~ "Diamond" #=> nil
```
- 真 : false 、 nil 以外的所有对象
- 假 : false 、 nil
也就是说，Ruby 会认为 `false` 与 `nil` 代表假，除此以外的所有值都代表真。因此，Ruby 中的真 / 假并非绝对等同于 `true/false`。`true` 代表真，`false` 代表假，同时，不返回 `true` 或 `false` 的方法只要能返回 `nil`，也可作为条件判断的表达式来使用。另外，在 Ruby 中还有个约定俗成的规则，为了使程序更容易理解，返回真假值的方法都要以 `?` 结尾。建议大家在写程序时也遵守这个规则。
# 逻辑运算符
在判断多个条件表达式时，我们会用到逻辑运算符 `&&` 和 `||`。
条件 1 && 条件 2
表示条件 1 为真，并且条件 2 也为真时，则整体的表达式返回真。两者中只要一个返回假时，则整体的表达式返回假。
相对地，
条件 1 || 条件 2
表示条件 1 为真，或者条件 2 为真时，整体的表达式返回真。两者同时为假时，则整体的表达式返回假。
还有表示否定的逻辑运算符：
!条件
表示相反的条件。也就是，条件为假时，表达式返回真；条件为真时，表达式返回假。例如，我们想判断整数 x 是否在 1 到 10 之间，if 语句可以这么写：
```ruby
if x >= 1 && x = 1 && x  10
  ┊
end
```
条件判断对于控制程序的行为非常重要。过于复杂、难以理解的条件，会使程序的目的也会变得难以琢磨。建议大家在写程序时，注意尽量写便于理解的条件。
在 Ruby 中，还有与 `&&`、`||`、`!` 意思相同，但优先级略低的逻辑运算符 and、or、not。
# if 语句
接下来，我们就来看看条件判断语句到底如何使用。if 语句是最基本的条件判断语句，用法如下：
```ruby
if 条件 then
 处理
end
```
> 可以省略 then
在这基础上可再加上 `elsif`、`else` ：
```ruby
if 条件 1 then
 处理 1
elsif 条件 2 then
 处理 2
elsif 条件 3 then
 处理 3
else
 处理 4
end
```
> 可以省略 then
Ruby 会按照从上到下的顺序进行判断。首先，条件 1 为真时程序执行处理 1。条件 1 为假时，程序再判断条件 2，若为真时执行处理 2。同样地，条件 2 为假时，程序再判断条件 3……本例中虽然只有 4 个条件分支，但根据实际需要可以添加无限个的分支。最后，如果前面所有条件都为假时则执行处理 4。
来看看使用 elsif 的例子
```ruby
a = 10
b = 20
if a > b
  puts "a 比b 大"
elsif a  可以省略 then
`unless` 语句的形式和 `if` 语句一样。但 `if` 语句是条件为真时执行处理，`unless` 语句则刚好相反，条件为假时执行处理。
```ruby
a = 10
b = 20
unless a > b
  puts "a 不比b 大"
en
```
这个程序执行后输出“a 不比 b 大”。`unless` 语句的条件 `a > b` 为假，所以程序执行了 `puts` 方法。
`unless` 语句也可以使用 `else`。
```ruby
unless 条件
 处理 1
else
 处理 2
end
```
这个与下面的 if 语句是等价的。
```ruby
if 条件
 处理 2
else
 处理 1
end
```
对比以上两种写法，我们可以知道处理 1 和处理 2 的位置互换了，`if` 语句通过这样的互换，能达到与使用 `unless` 语句时同样的效果。
# case 语句
条件有多个时，使用 `if` 与 `elsif` 的组合虽然也能达到判断多个条件的效果，但是如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的处理时，使用 `case` 语句会使程序更简单，更便于理解。
case 语句的用法如下：