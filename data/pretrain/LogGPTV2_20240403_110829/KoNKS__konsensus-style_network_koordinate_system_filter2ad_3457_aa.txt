title:KoNKS: konsensus-style network koordinate system
author:Eric Chan-Tin and
Nicholas Hopper
KoNKS: Konsensus-style Network Koordinate System
Eric Chan-Tin
218 MSCS, Stillwater, OK 74074
Oklahoma State University
PI:EMAIL
Nicholas Hopper
University of Minnesota
200 Union Street SE, 4-192 Keller Hall,
Minneapolis, MN 55455
PI:EMAIL
ABSTRACT
A network coordinate system assigns coordinates to each
node in a network in such a way that the network latency
between any two nodes can be accurately estimated by the
distance between their coordinates. Although several net-
work coordinate systems have been shown to be accurate
and eﬃcient, nearly all of the systems in the literature are
insecure, in the sense that an attacker with knowledge of
the scheme can cause arbitrary peers to produce inaccurate
distance estimates. This includes several recently proposed
“secure” network coordinate schemes.
We describe a new decentralized network coordinate sys-
tem, KoNKS, and argue that it meets a well-speciﬁed se-
curity goal under a realistic threat model. We demonstrate
that KoNKS is as accurate as current network coordinate
systems, does not require any trusted entities, and is resis-
tant against all known attacks, in addition to arguing for its
security against future attacks within our threat model.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection
General Terms
Security
Keywords
Security, network coordinate systems, network latency
1.
INTRODUCTION
A network coordinate system [7, 13, 14] assigns virtual co-
ordinates (network positions) to every node in the network.
These coordinates are assigned so that the coordinate dis-
tance between two nodes reﬂects the real network distance
between those two nodes. This allows any peer in the sytem
to accurately estimate the network distance between any
pair of nodes, without having the pair of nodes contact each
other. Network coordinate systems’ ability to predict the
network latency between arbitrary pairs of nodes can be
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
used in many applications: ﬁnding the closest node to down-
load content from in a content distribution network or route
to in a peer-to-peer system [17], reducing inter-ISP com-
munication [5, 12], reducing the amount of state stored in
routers [1], performing byzantine leader elections [6], and
detecting Sybil attackers [2, 8].
Several schemes [10,16,18,19] have been developed to pro-
tect network coordinate systems against the attacks in [11],
where malicious peers report randomly chosen coordinates,
report random but consistent coordinates, or add random
delay in their messages to other peers; all of the schemes
were shown to eﬀectively mitigate the known attacks. Re-
cently, however, a new type of attack [3] – the frog-boiling
attack – was introduced, and it was shown that some of these
schemes fail to protect against this attack. The frog-boiling
attacker reports small but consistent lies that are not de-
tected by any of the security mechanisms, but which cumu-
latively introduce unacceptable errors; for example, it was
shown that this technique can randomly partition an over-
lay using a secure network coordinate system [19]. One of
the issues is that the current schemes aimed only to “patch”
against the known attacks. This could lead to an arms race
where new attacks bypass existing security mechanisms, re-
sulting in new improved schemes to defend against the new
attack, and so on.
To avoid this arms race, we evaluate a network coordi-
nate system in terms of an explicit security goal – an invari-
ant that should hold despite the presence and actions of an
attacker – under a concrete threat model that states what
resources the attacker can marshall. The two goals are 1)
an attacker’s inﬂuence on either the network distance or co-
ordinate distance between two honest nodes is limited, and
2) the coordinate distance between a malicious peer and an
honest peer cannot be smaller than the true network dis-
tance between these two nodes. The ﬁrst goal limits an
attacker’s inﬂuence on honest nodes’ coordinates while the
second goal prevents an attacker from appearing closer than
it actually is. Our security model will be described in more
detail in Section 2.
Our main contribution is describing a completely decen-
tralized network coordinate system, KoNKS, which is secure
under our stated security model. KoNKS – consensus-style
network coordinate system – modiﬁes the objective function
that each peer follows to update its coordinates. In current
network coordinate systems, a peer’s goal is to minimize the
sum of the prediction errors for all of its neighbors. In con-
trast, using KoNKS, a peer’s goal is to minimize the number
of neighbors whose individual relative error is unacceptable
– KoNKS puts an upper bound on each neighbor’s relative
error. The relative error determines how accurate the coor-
dinate system is, thus when there are no attackers, minimiz-
ing the sum of errors should lead to more accurate distance
predictions. However, minimizing the sum of prediction er-
rors allows each neighbor to have a signiﬁcant inﬂuence on
the position of its peers. This is one of the reasons why the
frog-boiling attack works.
We show in Section 5 that KoNKS is as accurate as Vi-
valdi [7], one of the most popular decentralized network co-
ordinate system (Vivaldi is implemented in Vuze [17] and
is the basis for previous “secure” network coordinate sys-
tems [10,16,19]), and is secure against all the current attacks,
including the network-partition frog-boiling attack. More
speciﬁcally, KoNKS puts an upper bound on the amount of
inﬂuence an adversary can have on the honest nodes. For
example, 10% of attackers can partition a network using
KoNKS only so much before their lies do not have any ef-
fect anymore because they are outside of the threshold, or
the other honest neighbors’ inﬂuence equals the malicious
neighbors’ inﬂuence. KoNKS with no attack can achieve a
median relative error as low as 12%, which is comparable to
Vivaldi’s median relative error of 10%. KoNKS also incurs a
very low overhead, similar to Vivaldi as coordinates can be
piggybacked on top of application messages. The processing
overhead of each node updating its coordinates is also small.
2. SECURITY MODEL
The network consists of n nodes, of which 0 ≤ m < n
4
are malicious. The number of malicious peers needs to be
limited to at most 1/4 of the network so that satisfying a
majority of the nodes guarantees that the median node is
honest. Clearly, a botnet or Sybil attacker [8] could in-
validate this assumption, but dealing with such attacks is
beyond the scope of this paper1. We allow for a powerful
adversary that can compromise any node in the network (up
to 1/4 of the network), but cannot adaptively compromise
nodes, so that if a peer chooses its neighbors randomly, with
high probability only 1/4 of them will be malicious. More-
over, we allow the adversary to have global knowledge of the
network, that is, it knows every peer’s coordinate, real net-
work distance to other peers, and neighbors. The adversary
can also inﬂate its network distance to other peers by delay-
ing its responses, and can report any coordinate it chooses.
However, we do limit the adversary’s power in the following
sense: we assume that a malicious peer cannot decrease its
real network distance to another peer. This can be achieved
by using an unpredictable unique nonce in every message.
Thus, a malicious peer cannot reply to a message faster than
the network conditions allow.
We next describe how a network coordinate system func-
tions. Every node computes its own k-dimensional Euclidean
coordinates (for simplicity we assume Euclidean space). The
real network distance between any two nodes A and B is
denoted as rtt(A, B), and the coordinate distance between
any two nodes A and B is denoted by distance(A, B). Em-
bedding a higher-dimensional space (pairwise network dis-
tances) into a low-dimensional Euclidean space (for example
5-dimensional Euclidean coordinates) inherently produces
errors, that is,
it is in general not possible to obtain a
1We note that an adversary controlling a botnet can likely
cause more serious problems for an overlay than disrupting
its network coordinate system.
rtt(A, B)
|distance(A, B)−rtt(A, B)|
perfect embedding from a high-dimensional space to a low-
dimensional space. A good embedding minimizes the error
produced. The prediction error between two peers A and B
is deﬁned as |distance(A, B)− rtt(A, B)|. We deﬁne the rela-
tive error as
A low relative error implies
a low prediction error, but the converse is not necessarily
true. We thus use relative error for our evaluation results.
To calculate the accuracy of the whole network, the median
relative error for all the nodes is usually used. The lower the
relative error, the more accurate the network coordinates as
the coordinate distance closely matches the real network dis-
tance. We deﬁne the network as having converged when the
median relative error for all the nodes remains unchanged,
that is, peers’ coordinates are relatively unchanged.
We now deﬁne the two goals that any network coordinate
system should meet in order to be secure.
1. The attacker cannot cause the median relative error
between pairs of honest peers to exceed the threshold
T .
honest peer by a factor of more than (1 − T ).
2. The attacker cannot reduce its apparent distance to an
The ﬁrst security goal is to prevent a “cascading” eﬀect,
where an attacker can greatly inﬂuence one honest node,
which in turn, inﬂuences another honest node. Two honest
nodes should be able to “embed” each other and calculate
their real coordinate distance even if malicious nodes are
present.
If an attacker can aﬀect the coordinate distance
between two honest nodes, then a honest node will not be
able to accurately calculate the coordinate distance to any
other honest node.The second security goal is to ensure that
an adversary cannot appear closer to another peer than it
actually is. This prevents the attacker from being close to
all the peers in the network. In certain applications such as
a peer-to-peer system or closest-server selection, the closest
peer is usually queried.
3. RELATED WORK
Existing secure network coordinate systems use various
methods as security mechanism. An anomaly detection sys-
tem such as the Kalman ﬁlter [10] uses a statistical method
to determine if a reported coordinate is acceptable. Outlier
detection mechanisms such as the Mahalanobis distance [19]
reject reported coordinates that do not conform to past ac-
cepted coordinates. Veracity [16] is a distributed reputation
system, where a peer’s coordinate is veriﬁed by other peers in
the network. All these schemes have been previously shown
to be insecure by a new attack [3, 4].
Treeple [4] is a provably secure and accurate network coor-
dinate system, using centralized and trusted “vantage points”.
Treeple provides strong, worst-case security guarantees against
a realistic adversary model, but requires a set of trusted au-
thorities to achieve these guarantees. In contrast, KoNKS
requires no central authorities and provides average case se-
curity, guaranteeing that each peer will have accurate la-
tency estimates to the majority of its peers. Furthermore,
Treeple generates “positions” that are not Euclidean coordi-
nates whereas KoNKS generates Euclidean coordinates and
can be used in place of the standard insecure schemes for any
application that expects Euclidean network coordinates.
4. KONKS DESIGN
The objective function that each node in a current net-
work coordinate system seeks to minimize is total prediction
error to all nodes. This is required for the network coordi-
nates to be accurate, as a low prediction error implies that
the coordinate distance is close to the network distance. In
these schemes, every node maintains a list of neighbors – a
subset of all the peers in the network. Each node will, reg-
ularly, pick a node from that list of neighbors to “contact”
so as to update its own coordinate. For each coordinate
update, a node will update its coordinate so that it even-
tually minimizes the sum of prediction errors for all
of its neighbors as the end goal. Although this objective
function allows a node to select a coordinate that is accu-
rate (low relative error), it allows for “outliers” in the list of
neighbors. For example, the sum of prediction errors might
be small, with most neighbors’ prediction error being very
small and one neighbor’s prediction error being large.
In
trying to minimize the sum of errors, the large error of the
one neighbor can be decreased. However, this might dou-
ble the small errors of all the other neighbors. Thus, an
adversarial neighbor might disproportionately inﬂuence the
updated coordinate of a peer.
To mitigate possible attacks and to reduce the inﬂuence
of any one neighbor, we modify the objective function so
that each node will minimize the number of neigh-
bors whose individual relative error is greater than
a threshold T . All the neighbors are considered at each lo-
cation update. However, let’s say a location C can be chosen
so that most of the neighbors’ individual relative error is less
than T , except one neighbor N whose error is greater than T .
If another location can be computed such that this neigh-
bor’s (N ) error is less than T , but if this location change
would make other neighbors’ individual error greater than
T , then the previous location C would be chosen instead.
This objective function limits the inﬂuence each neighbor
can have on a peer. More speciﬁcally, each neighbor has the
same amount of inﬂuence as each other.
For each Pi ∈ P
Choose Nj ∈ Ni ⊆ P
Deﬁne Pair(Nj) = (CoordNj , rtt(Pi, Nj))
Procedure SendUpdate(Nj):
Send CoordPi to Nj
Procedure ReplyUpdate(Nj):
Send CoordPi to Nj
Send rtt(Pi, Nj)
Procedure ReceiveUpdate(Nj, CoordNj , rtt(Pi, Nj)):
Pair(Nj) = (CoordNj , rtt(Pi, Nj))
Update()
Procedure Update():