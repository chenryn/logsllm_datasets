### 6.8 ANYWHERE

大多数现代浏览器都支持地理位置定位，借助这一功能，JavaScript可以确定用户的真实地理位置。通常情况下，浏览器通过查询操作系统获取用户附近的Wi-Fi接入点列表，并将该列表提交给某个Web服务。该服务会将附近的接入点映射成经度和纬度坐标，从而估算用户的位置。Web服务再将这些坐标值返回给浏览器，最终由浏览器传递给JavaScript。

**使用AnyWHERE扩展**

为了使浏览器获取到的位置与实际位置不符，你可以使用AnyWHERE扩展。在扩展窗口中，你可以手动输入当前位置，或从全球地理位置列表中选择一个感兴趣的位置（如图6-15所示）。

![图6-15](图6-15)

由于浏览器的地理定位Web服务查询是通过HTTPS传输的，因此要使该扩展正常工作，必须启用HTTPS解密功能。该扩展支持IE9+、Firefox 4+、Chrome和Opera。然而，如果浏览器的地理定位功能不是基于Web服务查询（例如，在包含GPS的Windows 8设备上运行IE10时，Windows会直接使用GPS而不是Web服务来确定地理位置），则该扩展可能无法正常工作。Fiddler下载包中提供了该扩展的源代码。

### 第7章 保存、导入和导出数据流

#### 7.1 Session的ARCHIVEZIP（SAZ）文件

Fiddler默认的保存格式是Session Archive Zip (SAZ) 文件。SAZ文件是一个简单的ZIP压缩存档文件，可以通过重命名`.saz`为`.zip`，然后使用Windows Explorer或WinZip查看其内容。每个Session的头部、正文以及元数据（包括注释、颜色标记和计时信息）都会被保存。由于SAZ文件包含所有数据流，因此当它包含图片、音频和视频响应时，文件可能会变得非常庞大。相比之下，HTML、脚本和CSS文件的压缩效果较好，通常压缩比为5:1。

尽管可以将几GB的数据和成千上万个Session保存在一个SAZ文件中，但大文件难以加载和传输。因此，通常需要使用Fiddler的过滤功能来最小化SAZ文件中的数据流。你还可以在后期将SAZ文件重新加载到Fiddler中，以查看其中的Session。这些Session将以浅灰色背景显示以便于区分。需要注意的是，Fiddler在加载SAZ文件时不会使用原始SessionID，而是为每个Session分配一个新的ID。

**保护SAZ文件**

SAZ文件包含所有捕获的Web数据流，可能包含敏感信息（如用户名、密码、cookie和账户信息）。因此，只应在信任者和组织之间共享SAZ文件。如果SAZ文件必须保存在不受保护的位置或通过不安全的连接传输，可以选择加密保存。在“Save Session Archive”对话框中选择“Password-Protected SAZ”选项，然后输入密码即可实现这一点（如图7-3和图7-4所示）。

![图7-3](图7-3)
![图7-4](图7-4)

通过密码保护的SAZ文件使用128位AES加密方法进行加密。AES是一种强加密格式，也用于HTTPS数据流和政府、军队的加密。要确保文件的安全性，必须对密码保密。如果与其他用户共享该文件，必须通过安全的方式告知对方密码。忘记密码将导致无法重新打开SAZ文件。

#### 7.2 FIDDLERCAP

SAZ文件已被证明对于捕捉和重现Web应用问题非常有用。为了使非技术用户能够轻松捕捉SAZ文件，我创建了FiddlerCap。FiddlerCap是一款轻量级工具，提供简单的用户界面和流式工作流程来捕捉Web数据流。与Fiddler不同，它不能修改数据流，也不包含扩展机制。FiddlerCap基于FiddlerCore库构建，使用FiddlerCore代理实例在8889端口上运行。

你可以通过访问http://fiddlercap.com下载并安装FiddlerCap。安装完成后，工具会自动打开，窗口分为三个部分：Capture、Capture Options和Tools（如图7-5所示）。

![图7-5](图7-5)

**7.2.1 Capture窗口**

Capture窗口提供最少的控制项来开始和停止数据流捕捉。按下“Start Capture”按钮开始捕捉Web数据流，然后在新的浏览器窗口中重现问题。按下“Stop Capture”按钮结束捕捉，最后点击“Save Capture”按钮选择SAZ文件的保存位置。如果需要加密SAZ文件，可以在“Save as type”下拉菜单中选择“Password-Protected SAZ”选项（如图7-6所示）。

![图7-6](图7-6)

**7.2.2 Capture Options窗口**

Capture Options窗口控制捕捉时使用的选项。例如，“Store binaries”复选框控制是否保存二进制响应体（如图片、音频、视频和应用/octet流下载）。忽略这些响应体可以显著减小SAZ文件大小，但如果问题依赖于下载的内容，则应保存二进制响应体。

“Decrypt HTTPS traffic”复选框控制FiddlerCap是否解密HTTPS数据流。如果选中该复选框，会出现一条解释信息，并提示用户信任FiddlerCap根证书（如图7-7所示）。

![图7-7](图7-7)

关闭FiddlerCap时，它会自动删除在捕捉过程中生成的所有证书，并弹出对话框让用户确认是否从受信任的证书库中删除根证书。

“Store cookies and POSTs”选项控制FiddlerCap是否保存POST请求体以及HTTP请求头中的Cookie、Set-Cookie、Set-Cookie2、Authorization和Proxy-Authorization。取消该选项可以在一定程度上减少捕捉量，并减少隐私信息的保存。即使没有选中该选项，捕捉的数据流也可能包含其他隐私信息，因此只能在信任方之间共享。

“Automatically discard traffic after # minutes”选项用于控制在SAZ文件中保存几分钟的数据流。这对于捕捉间歇性发生的数据流非常有用。可以忽略后台运行的FiddlerCap，老的数据流会周期性地自动过期，减少捕捉的数据量和内存使用。

**7.2.3 Tools窗口**

Tools窗口提供的选项有助于重现问题。“Clear Cookies”按钮会清空IE以及其他基于WinINET的所有持久Cookie。“Clear Cache”按钮会从IE/WinINET缓存中清除所有缓存文件，确保FiddlerCap可以查看所有响应，而不是从本地缓存获取。

“Clear Capture”按钮只有在FiddlerCap开始捕捉时才生效。它会立即清除所有之前捕捉到的Session。

“Snapshot”按钮会对FiddlerCap正在运行的监视器进行屏幕截图，并将其添加到捕捉的JPEG图像中。在新的Session中会保存该屏幕截图，其URL包含当前时间戳，格式为`http://localhost/Screenshot_h-mm-s.jpg`。

按下“Flag”按钮会弹出一个对话框，可以为捕捉到的数据流添加注释（如图7-8所示）。

![图7-8](图7-8)

输入的注释文本将保存为新的Session的HTTP响应体，其URL为`http://USERCOMMENT`。