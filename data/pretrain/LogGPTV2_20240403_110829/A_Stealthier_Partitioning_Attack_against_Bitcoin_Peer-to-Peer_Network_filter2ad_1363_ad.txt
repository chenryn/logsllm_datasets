to shadow IPs.
The adaptive adversary evaluates if a reboot before the ﬁnal
stage of the attack would be beneﬁcial (e.g., increase the
number of outgoing connections to shadow IPs) and triggers
a reboot if it would be helpful. We show that this adaptive
rebooting strategy indeed can shorten the attack duration to
about 40 days only with a couple of more reboots during the
attack; see Section VI-D for more details.
7To be more speciﬁc, a Bitcoin node establishes a feeler connection only
when all eight outgoing slots has been occupied and at least two minutes has
passed since the last feeler connection.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
901
Number of connections = 117
A. Accurate Bitcoin Emulation
120
100
80
60
40
20
s
n
o
i
t
c
e
n
n
o
c
f
o
r
e
b
m
u
N
0
0
Incoming Connection
Outgoing Connection
20
40
60
80
100
120
Node age (days)
Figure 6: Daily connection snapshots from one of our live
nodes. Outgoing slots are almost always fully occupied while
incoming connections tend to grow gradually.
D. Occupying Incoming Connections
As long as there exist any unused incoming connection slots,
the adversary AS can simply create an incoming connection to
the victim node with any of her shadow IPs. Figure 6 shows the
number of incoming and outgoing connections established by
one of our live Bitcoin nodes. While the node almost always
has all eight of its outgoing connections occupied, the number
of incoming connections is smaller than the maximum 117 in
most cases. Even when all incoming connection slots are full
at a moment, the adversary AS can still create an incoming
connection because the victim node should evict one existing
connection when it has 117 incoming connections, according
to a recent change to Bitcoin core [7]. Also, we found that
most of the incoming connections are very short-lived (e.g.,
a couple of minutes), the adversary, thus, can easily occupy
most of the incoming connections. For occupying nearly 100%
of all the incoming connections, the adversary AS may ﬂood
the victim with connection requests from shadow IPs after
rebooting the victim node.
VI. EVALUATION
We implement
the EREBUS attack’s execution phase in
a Python script and evaluate the attack effectiveness. Our
Python attack script is essentially a rudimentary Bitcoin core
client that can generate customized Bitcoin messages. We
particularly measure the required attack trafﬁc rate and the
attack execution duration for various attack conﬁgurations.
Attacking a real node vs. an emulated node. In Sec-
tion V-B, we evaluate a partial attack functionality (i.e., ﬁlling
the new table) by demonstrating our EREBUS attack script
against a real operating Bitcoin client node isolated in a lab.
Attacking real nodes, however, is not a feasible option for
testing the entire EREBUS attack procedures because each
attack may take a few weeks to complete and it
is hard
to test several attack instances with different conﬁgurations
and compare them. Worse yet, when attacking real nodes,
one cannot test the effectiveness of different combinations of
countermeasures in the same condition for a fair comparison.
Therefore, we develop and open-source an accurate Bitcoin
node emulator [13] that faithfully implements the behaviors
of the real Bitcoin nodes, especially IP address management
and outgoing connection establishment. For highly accurate
experiment results, we use the real Bitcoin addr messages
collected from our live nodes.
Our emulator implements the two components of Bitcoin
core version 0.18.0, i.e., the address management and outgoing
connections establishment [13]. At a high level, it includes
the following Bitcoin nodes’ operations: (1) storing IPs into
the internal tables; (2) IP allocation; (3) adding IPs to the
new table; (4) outgoing connections establishment; (5) IPs
migration from the new to the tried table; and (6) feeler
connections. For the detailed description of our emulator, we
refer the interested readers to Appendix D.
We operate the emulation with the real Bitcoin addr
messages captured by our live nodes from both incoming
and outgoing connections. In particular, we collect Bitcoin
messages from six Bitcoin clients version 0.17.08 running for
120 days (i.e., from November 18, 2018, to March 18, 2019),
in ﬁve geographic regions of Amazon EC2 (i.e., US-East, US-
West, South America, Europe, and North-Asia) and one in
National University of Singapore.
To make the emulation more realistic, the rate of addr
messages is also adjusted accordingly to the emulated victim’s
state. Before the attack begins,
the emulation is fed with
legitimate IPs from DNS seeders and addr messages collected
via incoming connections. During the attack execution, the
number of legitimate addr messages received via incoming
connection is reduced to 10%.9 Also, the legitimate addr
messages received via outgoing connections are set
to be
proportional to the number of outgoing connections with non-
shadow IPs.
To accurately determine whether an IP address is reachable
at any given time, our experiments rely on the historical
Bitcoin nodes data from Bitnodes [26], which is widely used
by existing work [3], [29].
B. Attack Execution
In our attack script, we implement all the attack strategies
for creating victim-shadow peering connections (described in
Section V). We also implement some additional strategies in
the attack script for more realistic attack execution, as follows:
(1) the attack script guarantees that shadow IPs are always
reachable by replying to all connection attempts from the
victim node (i.e., outgoing connections and feeler connections)
with the corresponding spoofed source IPs; (2) the script
keeps the shadow IPs in the victim’s tables fresh by re-
advertising a same set of shadow IPs every 30 days; (3) to
deploy the adaptive attack strategy, the adversary evaluates
the number of outgoing connections it has occupied with
the estimated probability of shadow IPs in the two tables.
If the actual number of occupied outgoing connections is
less than the expected number for a certain threshold (e.g.,
2 connections in our experiments), the attack script reboots
the victim; and (4) once the estimated probability of all eight
8The network implementation of version 0.17.0 is almost identical to the
latest version 0.18.0.
9Note that 10% is a conservatively chosen value because an adversary in
practice can occupy most of the incoming connections and easily reduce the
legitimate addr message rate much lower than 10%.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:22 UTC from IEEE Xplore.  Restrictions apply. 
902
y
t
i
l
i
b
a
b
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Prob. of single connection made to shadow IP (f)
Prob. of eight connections made to shadow IPs (f 8)
No. of outgoing connections made to shadow IPs
Rebooting the victim node
All outgoing
connections
controlled!
0
5
10
15
20
25
30
35
40
Days after attack begins
s
P
I
w
o
d
a
h
S
o
t
s
n
o
i
t
c
e
n
n
o
C
g
n
o
g
i
t
u
O
f
o
r
e
b
m
u
N
8
7
6
5
4
3
2
1
0
45
l
e
b
a
t
w
e
n
e
h
t
n
i
s
P
I
f
o
r
e
b
m
u
N
60000
50000
40000
30000
20000
10000
0    
All IPs
Reachable IPs
Shadow (existing)
Shadow (virtual)
0
5 10 15 20 25 30 35 40 45 50
Attack duration (days)
l
e
b
a
t
d
e
i
r
t
e
h
t
n
i
s
P
I
f
o
r
e
b
m
u
N
16000
14000
12000
10000
8000
6000
4000
2000
0
All IPs
Reachable IPs
Shadow (existing)
Shadow (virtual)
0
5 10 15 20 25 30 35 40 45 50
Attack duration (days)
Figure 7: An emulation instance of the adaptive EREBUS
attack against a 30-day old node. (Bold lines) Probability of
one (f ) and all eight (f 8) outgoing connections to be made
to shadow IPs. (Normal line) The actual number of outgoing
connections under adversary’s control.
outgoing connections made to shadow IPs reaches a predeﬁned
percentage (e.g., 15%), the attack script reboots the victim
every day until all eight outgoing connections are occupied
by the adversary.
C. Attack Setup
We evaluate the attack effectiveness (e.g., probability of
the outgoing connections made to shadow IPs) for varying
attack conﬁgurations: (1) adversary’s ranking indicates the
index of the adversary among all ASes sorted by their number
of available shadow IPs when targeting a speciﬁc victim; (2)
victim node’s age is deﬁned as the total lifetime of a victim
node since its ﬁrst operation, and (3) attack strategy indicates
whether the attack is adaptive or not.
When emulating all three conﬁgurations, the victim node
is hosted by Amazon (AS 16509). The adversary AS set
to Hurricane Electronic (AS 6939), except the experiments
with different adversary’s rankings, where we select various
adversary ASes based on their ranked number of available
shadow IPs to be used in the attacks. To analyze the impact
of the victim node’s age on the attack effectiveness, we run
several experiments with the victim’s age varying from 10-50
days. In all experiments, the attacks last for 50 days.
D. Experiment Results
1) Occupying All Outgoing Connections: Figure 7 shows
one instance of the EREBUS attack, illustrating how the adver-
sary gradually occupies all eight outgoing connections with the
adaptive attack strategy. Figure 7 describes the probability of
one and eight outgoing connections made to shadow IPs (i.e.,
f and f 8, respectively) and the actual number of outgoing
connections occupied by the adversary. Both probabilities f
and f 8 grows as the attack lasts longer; yet, f 8 increases with
a much slower rate compared to f and starts acquiring non-
negligible probability only after 30 days has passed since the
attack starts.
We also observe the number of outgoing connections made
to shadow IPs gradually increases and eventually the adversary
successfully occupies all victim’s outgoing connections on day
40. Moreover, the adversary reboots the victim node only a few
times when the adversary expects to occupy more outgoing
connections and a couple of more times when the probability
of occupying all eight connections reaches 15%.
(a) new table
(b) tried table
Figure 8: Dominating the reachable IPs in new and tried