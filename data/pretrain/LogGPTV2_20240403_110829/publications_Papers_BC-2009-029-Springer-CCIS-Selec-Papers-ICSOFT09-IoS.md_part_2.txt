### Understanding the Nature of Real-World Services

It is fundamental to understand the nature of real-world services, as these are the services that will be digitalized and represented with proper models to enable their trading over the Internet. Real-world services often exhibit one or more of the following characteristics: intangibility, inseparability, immersiveness, bipolarity, variability, ostensible ownership, long-running, decoupling, perishability, and qualitative nature.

#### 1. Intangibility
Services are intangible because they do not have a material existence. While one can physically touch or view a product, most services are intangible. For example, legal advice or a doctor's consultation cannot be touched. This makes it challenging to create suitable specifications to model and define attributes to objectively describe services. Therefore, research is needed to determine which fundamental aspects and characteristics of real-world services should be included in Internet of Services (IoS)-based service models and descriptions.

#### 2. Inseparability
The provisioning and consumption of services often occur simultaneously. This implies that a rigorous match between supply and demand must be achieved. Otherwise, services may be lost, or consumers may need to wait for service availability. This characteristic raises the research question: How can marketplaces in the IoS provide mechanisms to efficiently match supply and demand?

#### 3. Immersiveness
Services are frequently executed in collaboration involving both providers and consumers. This makes it difficult to determine the party responsible for the success or failure of a service. When IoS-based services are executed, it is important to define Service Level Agreements (SLAs) that account for both parties. However, if a service fails, how can responsibilities be determined when many services are executed collaboratively?

#### 4. Bipolarity or Hybrid Nature
Services are often executed by a blend of human and technological resources. While there are methods to monitor purely technological resources, solutions to monitor human involvement and the complex relationship between human and technological dimensions in highly distributed, autonomous, and heterogeneous settings like the IoS are still underdeveloped. This leads to the research question: How can mechanisms be created to monitor both technological and human resources effectively?

#### 5. Variability
Products have a high degree of standardization, while services are often tailor-made and thus heterogeneous. The quality and consistency of services can vary significantly due to human delivery. Human attitudes, such as behavior, cognitive skills, and emotions, are difficult to control, manage, and evaluate. For the IoS, this characteristic necessitates the development of new variability models for services, possibly based on existing variability models for products.

#### 6. Ostensible Ownership
Ownership between products and services is distinct. A financial product like a stock can be owned, but a service cannot. Once a transaction is completed, ownership of a product is transferred, but with a service, there is only ostensible ownership. The IoS needs to enable providers to have ostensible ownership of IoS-based services and manage them effectively.

#### 7. Long-Running
Trading products typically requires minimal interaction between providers and consumers. For example, buying a book from Amazon involves a single interaction point. In contrast, services often involve a back-end business process with ongoing human interaction until completion. For instance, a translation service may take several weeks and require significant interaction between the translator and the writer. This makes human relationships, processes, and activities integral parts of services. Therefore, IoS-based services need to account for the definition and representation of long-running business processes that include personal interactions.

#### 8. Decoupled
A simplified lifecycle of a service includes five main phases: discovery, selection, invocation, execution, and termination. To fully leverage services, consumers must have access to dynamic discovery mechanisms. These phases can be carried out with human involvement, a combination of humans and IT, or purely automated processing. In the IoS, each phase is decoupled and can position itself anywhere on the spectrum from solely human-executed to fully automated. The representation of human and IT involvement needs to be equated when modeling IoS-based services.

#### 9. Perishable
Since services are intangible, they cannot be stored. Unused capacity cannot be saved for future trade. For example, unsold car seats can be sold later, but unsold airplane seats cannot be transferred to the next flight. This characteristic poses a challenge for electronic marketplaces, requiring new management methods for service capacity.

#### 10. Qualitative
In manufacturing, product quality is generally measured quantitatively. In contrast, service quality is often qualitative. Physical evidence or tangible products resulting from service execution can provide indications of service quality. This characteristic is a challenge for the IoS. How can aspects of service execution be used to evaluate service quality quantitatively and qualitatively? Additionally, perceived service quality often results from consumers comparing the outcome of a service against their expectations. How can consumer expectations be properly captured and managed in the IoS?

### Platform Services

Platform services provide functionalities as a common infrastructure that can be used by IoS-based services in business value networks. We classify platform services into four groups: core business services, design support services, execution support services, and consumer support services. These classifications are not orthogonal, and a specific platform service can fall under one or more types.

#### Core Business Services
Core business services provide base functionalities required to complete a value-generating service for an IoS-based service. A value-generating service is the concrete service that generates value for its consumer. An IoS-based service is a composite service that includes the value-generating service and the necessary core business services for trading. These core business services should include payment, billing, security, and community rating. The set of these services can vary depending on the specific service delivery platform. More core business services mean more supported business models. A core business service often provides a customized user interface integrated into the service consumer's cockpit, requiring the consumer to provide the necessary data. For example, in a payment core service, the consumer must specify the type of payment for using an IoS-based service.

#### Execution Support Services
Execution support services extend the functionality of the runtime environment. Their usage must be specified at design time. Examples include adaptation services, monitoring services, and efficient data propagation services. An adaptation service automatically adjusts an IoS-based service to changes in the runtime environment or consumer requirements without affecting functional results. A monitoring service measures runtime characteristics and notifies service consumers, providers, or platform providers about technical and business-level anomalies. An efficient data propagation service allows services processing large data volumes to exchange data efficiently.

#### Consumer Support Services
Consumer support services help retrieve services that meet the consumer's needs and requirements. Examples include services for searching and selecting appropriate IoS-based services. These services can be accessed via the consumer cockpit and use service description repositories for search functionalities.

#### Design Support Services
Design support services assist in the design of IoS-based services. They typically have a design component for business process modeling and a runtime component that runs as part of the overall process. Examples include message matching services and data integration services. The message matching service maps complex message schemas between IoS-based services, enabling the composition of independently developed services offered on a service marketplace. It has two main components: the mapping component (design) and the translation component (runtime). The mapping component calculates a proposal for mapping between two message schemas, with a graphical user interface for manual completion. The translation component uses the specified mapping to translate messages.

### Managing Dependencies in IoS-based Service Compositions

One goal of the IoS vision is to create service compositions from atomic IoS-based services provided by different service providers. These compositions form more complex functionality and are implicitly collaborating. They are then offered to consumers via a marketplace. The provisioning of both atomic and composite IoS-based services is regulated by SLAs negotiated between service providers and consumers.

#### Important Challenges
An important challenge is managing these service compositions to ensure that the atomic services work together properly to achieve the overall goal. This task is handled by the composite service provider, who selects the atomic services and negotiates SLAs with atomic service providers and composite service consumers. Managing service compositions is challenging due to dependencies between collaborating services, leading to failure propagation. Changes to an SLA after initial negotiation may require changes to other SLAs.

#### Introducing Dependencies
A service dependency is a directed relation between services, expressed as a 1-to-n relationship where one service (dependent) depends on one or multiple services (antecedent). A service S1 is dependent on service S2 if the provisioning of S1 is conditional on the provisioning of S2. Dependencies can occur in various aspects, such as one service providing data or goods needed by another service, or the QoS of a composite service depending on the QoS of its atomic services. Dependencies can be horizontal (between atomic services in a process) or vertical (between the composite service and atomic services).

#### Approach to Managing Dependencies
To manage service dependencies, we developed an approach for capturing dependency information at design time in a dependency model and evaluating this model at runtime when problems occur or an SLA needs to be renegotiated. The approach follows a lifecycle of four steps: creation, validation, usage, and retirement. During the creation step, dependency information is extracted from the process description and related SLAs and captured in a dependency model. The model is then stored in a dependency repository. During the validation step, the dependency model is checked to ensure that SLAs have been negotiated to allow successful collaboration to achieve the composite service goals.