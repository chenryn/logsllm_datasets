isfundamentaltounderstandthenatureofrealworldservicessinceitisthistype
ofservicesthatwillbedigitalizedandrepresentedwithpropermodelstoenable
their trading over the Internet. Real world services are often known to have
one or more of the following characteristics: intangible, inseparable, immersive,
bipolar,variable,ostensible,long-running,decoupled,perishableandqualitative.
Intangible (1). Services are intangible since they do not have a material exis-
tence. One can physically touch or view a product but most services are intan-
gible. Nonetheless, it is often possible to see and evaluate the results that arise
from the execution of a service. For eaxmple, it is not feasible to touch a legal
advice or a doctor consultation. Therefore, it is difficult to create suitable spec-
ifications to model and to define attributes to objectively describe services. As
such, research needs to be undertaken to determine which fundamental aspects
7
Fig.3. Characteristics of services
and characteristics of real world services should be present in IoS-based service
models and descriptions.
Inseparable (2). The provisioning and consumption of services occurs frequently
inparallel.Thisimpliesthatarigorousmatchbetweensupplyanddemandmust
be achieved. Otherwise, services are lost or consumers are queued and need to
wait for service availability. This characteristic leads to a challenging research
question:HowcanmarketplacesoftheIoSprovidemechanismstomatchbetween
supply and demand efficiently?
Immersive (3). Services are often executed in collaboration, involving providers
and consumers. This implies that in many cases it is difficult to determine the
parties responsible for the degree of success or failure of a service. Therefore,
when IoS-based services are executed, it is important to define service level
agreements (SLA) that account for both parties. But in case of service pro-
visioning failure, since many services are executed in collaboration, how can
responsibilities be determined?
Bipolarorhybrid(4).Servicesareoftenexecutedbyablendofhumanandtech-
nological resources. While approaches to monitor purely technological resources
are already available, solutions to monitor human involvement in services’ exe-
cution and the complex relationship between the human and technological di-
mensionshavenotbeenstudiedinthecontextofhighlydistributed,autonomous
and heterogeneous settings, such as the IoS. As a result, the following research
question arises: How to create mechanisms that account for the monitoring of
technological resources with the individual monitoring of human resources?
8
Variable (5). Products have a high degree of standardization, while services are
very often tailor-made and are, therefore, heterogeneous. Organizations differ-
entiate themselves in offering products and services, but the variations between
similar products of different providers are less prominent than the variations
between services. The quality and consistency of services is subject to a con-
siderable variability since they are often delivered by humans. Human attitudes
(such as behavior, cognitive skills, emotions, style, etc.) have a high variablity
since they are difficult to control, manage and evaluate. For the IoS, this char-
acteristic brings the need to devise new variability models for services, perhaps
basedonthevariabilitymodelswhichhavealreadybeendevelopedforproducts.
Ostensible ownership (6). The ownership between products and services is dis-
tinct. A stock can be called a financial product that the provider owns. A stock
order may be placed by a consumer which might result in a transaction later
on. When the transaction is completed, the ownership is transferred to the con-
sumer. On the other hand, it is not possible to own a service. It possession is
termedasanostensibleownership.Asaresult,theIoSneedstoenableproviders
tohavetheostensibleownershipofIoS-basedservicesandenablethemtoremain
in their control and management.
Long-running(7).Generally,thetradingofproductsrequiresalowlevelofinter-
action between providers and consumers. For example, when a consumer buys
a book at Amazon.com there is only one interaction point in time: the action
of purchasing the book. In exceptional scenarios, the consumer may contact the
provider in case of non-delivery of the product. On the other hand, services are
oftenexecutedbyaback-endbusinessprocesswhichinvolveshumaninteraction
over time until the service is completed. For example, a service contracted to
translate a book from German to English may run forseveral weeks and require
a significant interaction between the translator and the writer. This brings hu-
mans, relationships between people, processes and activities to be an integral
part of services. Therefore, IoS-based services need to account for the definition
and representation of long-running business processes which include personal
interactions (e.g.,face-to-faceor a telephoneinteraction) between providers and
consumers.
Decoupled (8). A simplified lifecycle of a service includes generally five main
phases: discovery, selection, invocation, execution and termination. In order to
capturethefullpotentialofservices,consumersmusthaveaccesstodynamicdis-
covery mechanisms. Once a set of services is discovered, a selection is made and
the selected service is invoked. Finally, the service is executed and terminates.
Thesefivephasescanbecarriedoutonlywithhumaninvolvement(humansadd
value in the form of labor, advice and skills), with a conjunction of humans and
IT, or resorting purely on automated processing. Therefore, in the IoS, each
phase is decoupled and may position itself anywhere in the spectrum of services
executed solely by humans, on the one side, or purely automated on the other
9
side. Here again, the representation of human and IT involvement needs to be
equated when modeling IoS-based services.
Perishable (9). Since services have a propensity to be intangible, it is usually
notpossibletostorethem.Asaconsequence,servicesareperishableandunused
capacitycannotbestoredforfuturetrade.Forexample,ifacarisnotsoldtoday
it can be sold tomorrow but spare seats on an airplane cannot be transferred to
the next flight. Not being able to store services brings a challenge for electronic
marketplaces since new management methods for service capacity are required.
Qualitative (10). In manufacturing industries, measures determining the qual-
ity of products are generally quantitative. On the other hand, the quality of a
service is generally qualitative. The physical evidence or the tangible products
thatoriginatefromserviceexecutioncanprovideindicationsthatallowmeasur-
ing a service quality. This characteristic is again a challenge for the IoS. How
to identify which aspects of a service execution can be used to evaluate the
quality of services quantitatively and qualitatively? Furthermore, the perceived
service quality often results from consumers comparing the outcome of a service
against what they expected to receive. Thus, how can consumers’ expectations
be properly captured and managed in the IoS?
Alltheseintrinsiccharacteristicsofservicesneedtobeexploredandequated
when real world services are digitalized into electronic models to be advertized
in marketplaces and purchased remotely by consumers using the Internet.
3 Platform services
Platformservicesprovidefunctionalitiesasacommoninfrastructurethatcanbe
used by IoS-based services in business value networks. We divide platform ser-
vices into four groups: core business services, design support services, execution
support services, and consumer support services. The elements of this classifica-
tion are not orthogonal and one specific platform service can be classified under
one or more types.
Core business services provide base functionalities required to complete a
value-generatingservicetoanIoS-basedservice.Avalue-generatingserviceisthe
concrete service that generates a value for its consumer. An IoS-based service is
a composite service that contains the value-generating service and core business
servicesthatarerequiredtotradethem.Thesetofcorebusinessservicesshould
contain services for payment, billing, security, and community rating. However,
dependingontheconcreteservicedeliveryplatform,thesetoftheseservicescan
vary.Themorecorebusinessservicesareavailable,themorebusinessmodelscan
be supported. A core business service often provides a customized user interface
that is integrated in the cockpit of service consumers. As a result, a consumer
has to provide the required data for a core service to perform. For example, in
a payment core service, the consumer must specify the kind of payment for the
use of an IoS-based service.
10
Execution support services extend the functionality of the runtime environ-
ment. Their usage has to be specified at design time. Examples are adaptation
services,monitoringservices,andefficientdatapropagationservices.Anadapta-
tionserviceautomaticallyadaptsanIoS-basedservicetochangesintheruntime
environment or consumer requirements without affecting the functional results.
A monitoring service measures a number of runtime characteristics and can no-
tify service consumers, service providers or platform providers about anomalies
thatoccuratthetechnicalandbusinesslevel.Anefficientdatapropagationser-
vice allows services that process large data volumes to exchange these data in
an efficient way.
Consumer support services provide a functionality to retrieve services that
fulfill the consumer’s needs and requirements. Examples are services to search
and select appropriate IoS-based services. Consumer support services can be
accessed viathe consumer cockpit. They useservice description repositories for
the search functionalities.
Design support services help the design of IoS-based services. They typically
haveadesigncomponentthatsupportsbusinessprocessmodelingandaruntime
component that runs as part of the overall process. Examples of design support
services include message matching services and data integration services. The
message matching service serves as an example of a platform service which is
used to map complex message schemas between IoS-based services that form
compositions.Therewith,itenablesthecompositionofindependentlydeveloped
services offered on a service marketplace. The message matching service has
two main components: the mapping component and the translation component.
The mapping component is the design component. It automatically calculates a
proposalforamappingbetweentwomessageschemas.Agraphicaluserinterface
isprovidedforthatcomponentwhichpresentsaproposedmappingandsupports
its manual completion to a final mapping. The translation component is the
runtime component. It uses the specified mapping to translate messages.
4 Managing Dependencies in IoS-based Service
Compositions
One goal of the IoS vision is the creation of service compositions out of atomic
IoS-based services provided by different service providers. The different atomic
IoS-basedservicesarecomposedinawaythattheyformmorecomplexfunction-
ality, i.e. they are implicitly collaborating. These compositions are then offered
to consumers via a marketplace. The provisioning of atomic as well as com-
posite IoS-based services is regulated by service level agreements (SLA) which
are negotiated between the service providers and consumers of the respective
services.
An important challenge of this scenario is the management of such service
compositionstoensurethattheatomicservicesareworkingtogetherinaproper
way to achieve the overall goal of the composition. This management task is
handled by the composite service provider who selects the atomic services and
11
negotiates the SLAs with atomic service providers and composite service con-
sumers.Managingservicecompositionsisachallengingtaskduetothefactthat
the collaborating services have dependencies on each other. This leads to fail-
ure propagation. Also, the different SLAs need to be negotiated in a way which
ensures proper collaboration between services. Changes to an SLA after the ini-
tial negotiation may require changes to other SLAs. In the following sections we
outline the problem space of dependencies in service compositions and present
our approach to managing these dependencies.
4.1 Introducing dependencies
A service dependency is a directed relation between services. It is expressed as
a 1-to-n relationship where one service (dependant) depends on one or multiple
services(antecedent).AserviceS isdependentonaserviceS iftheprovisioning
1 2
of service S is conditional to the provisioning of service S , e.g. if a property of
1 2
service S is affected by a property of S .
1 2
A service can be dependent on another service with regard to different as-
pects. A dependency occurs e.g. when one service provides something (e.g. data
or goods) which is needed by another service to provide its functionality. A sec-
ond example would be that the quality of service (QoS) of a composite service
depends on the QoS of its atomic services. Dependencies occur either between
atomicservicesinaprocess(horizontaldependencies)orbetweenthecomposite
serviceandatomicservices(verticaldependencies)[15].Horizontaldependencies
mainlyoccurduetoprovider-consumerrelationshipsorsimultaneityconstraints
between services while vertical dependencies occur due to task-subtask relation-
ships between the composite service and the atomic services [9]. Distinguishing
theunderlyingcausesofdependenciesisimportantastheyformthebaseforthe
dependency discovery strategy (see section 4.3).
4.2 Approach to managing dependencies
Inordertomanageservicedependencieswedevelopedanapproachforcapturing
dependency information at design time in a dependency model and evaluating
thismodelatruntimewhenproblemsoccuroranSLAneedstoberenegotiated.
The approach follows a lifecycle of four steps: creation, validation, usage, retire-
ment.Duringthefirststep(creation)thedependencyinformationcapturedina
dependency model. Information about service dependencies is not available ex-
plicitlybutratherimplicitlyintheprocessdescriptionandtherelatedSLAs.To
make it available explicitly for easier handling at runtime, the process descrip-
tionandSLAinformationareanalyzedanddependencyinformationisextracted
and captured in a dependency model. The dependency model is then stored in
a dependency repository. During the second step (validation) the dependency
model is validated to check if the SLAs have been negotiated in a way that the
servicescansuccessfullycollaboratetoachievethecompositeservicegoals.Dur-