                                MethodType paramMethodType) 
  throws NoSuchMethodException, IllegalAccessException 
{ 
  MemberName localMemberName = resolveOrFail(paramClass,  
                                             paramString,  
                                             paramMethodType,  
                                             false); 
  checkSecurityManager(paramClass, localMemberName); 
  Class localClass = findBoundCallerClass(localMemberName); 
  return accessVirtual(paramClass, localMemberName, localClass); 
} 
Class findBoundCallerClass(MemberName paramMemberName) 
{ 
  Class localClass = null; 
  if (MethodHandleNatives.isCallerSensitive(paramMemberName)) 
  { 
    localClass =  
        (this.allowedModes & 0x2) != 0 ? this.lookupClass : getCallerClassAtEntryPoint(true); 
  } 
  return localClass; 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
The MethodHandles class was modified to make use of a new method, findBoundCallerClass, which uses the 
Reflection API to get the caller class of the method handle it is bound to. The MethodHandleProxies class had the 
maybeBindCaller method introduced to it and the asInterfaceInstance method was modified to use it. The 
MethodHandleImpl class had its bindCaller method modified to throw an error if the supplied Class argument is null. 
At this point, an attempt to exploit this CVE would result in the bound caller class being null which would eventually 
result in an InternallError being thrown within MethodHandleImpl's bindCaller method. 
2D Sub-component Weakness 
//MethodHandleProxies 
public static  T asInterfaceInstance(final Class paramClass,  
                                        MethodHandle paramMethodHandle) 
{ 
  if ((!paramClass.isInterface()) || (!Modifier.isPublic(paramClass.getModifiers()))) 
    throw new IllegalArgumentException("not a public interface: " + paramClass.getName()); 
  MethodHandle localMethodHandle1; 
  if (System.getSecurityManager() != null) 
  { 
    localObject1 = Reflection.getCallerClass(2); 
    localObject2 = localObject1 != null ? ((Class)localObject1).getClassLoader() : null; 
    ReflectUtil.checkProxyPackageAccess((ClassLoader)localObject2,  
                                        new Class[] { paramClass }); 
    localMethodHandle1 = maybeBindCaller(paramMethodHandle, (Class)localObject1); 
  } else { 
    localMethodHandle1 = paramMethodHandle; 
  } 
... 
} 
private static MethodHandle maybeBindCaller(MethodHandle paramMethodHandle,  
                                            Class paramClass) { 
  if ((paramClass == null) || (paramClass.getClassLoader() == null)) { 
    return paramMethodHandle; 
  } 
  MethodHandle localMethodHandle = MethodHandleImpl.bindCaller(paramMethodHandle,  
                                                               paramClass); 
  if (paramMethodHandle.isVarargsCollector()) { 
    MethodType localMethodType = localMethodHandle.type(); 
    int i = localMethodType.parameterCount(); 
    return localMethodHandle.asVarargsCollector(localMethodType.parameterType(i - 1)); 
  } 
  return localMethodHandle; 
} 
//MethodHandleImpl 
static MethodHandle bindCaller(MethodHandle paramMethodHandle, Class paramClass) 
{ 
  if ((paramClass == null) || (paramClass.isArray()) ||  
      (paramClass.isPrimitive()) || (paramClass.getName().startsWith("java.")) ||  
      (paramClass.getName().startsWith("sun."))) 
  { 
    throw new InternalError(); 
  } 
  MethodHandle localMethodHandle1 = prepareForInvoker(paramMethodHandle); 
  MethodHandle localMethodHandle2 = (MethodHandle)CV_makeInjectedInvoker.get(paramClass); 
  return restoreToType(localMethodHandle2.bindTo(localMethodHandle1), 
                                                 paramMethodHandle.type()); 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
CVE-2013-0809 â€“ Heap-based Buffer Overflow due to Integer Overflow 
Core Issue 
Integer overflow can lead to a buffer overflow; however, you must understand what an integer overflow is and how 
it occurs. Here is a single line of code that will help with the explanation: 
We will assume that an int is four bytes in size which means that with the unsigned attribute applied to it, its range 
of legal values is from 0 to 4294967295 inclusive. This means that 4294967295 + 1 can not be properly 
represented with an unsigned int. As such, when the processor attempts to add the two together, it will wrap 
around leaving x as zero with the carry flag set to one. If x was a signed integer then the range of valid values would 
be from -2147483648 to 2147483647, inclusive, and an overflow would result in the overflow flag being set to one. 
One way of looking at it is to imagine an implicit modulo 4294967296 around the operation such that 4294967295 
+ 1 becomes (4294967295 + 1) % 4294967296.  
Now that we have the basics of an integer overflow, we can look at how it can result in a buffer overflow. Here is a 
simple function to help with the explanation: 
We have a function, cwe190_to_cwe122, that takes three arguments. If x * y is greater than 0x100, then we 
allocate a buffer and copy 0x100 bytes into it. The problem lies in the assumption that x*y*sizeof(int) will not cause 
an integer overflow. As an attacker, all we have to do is provide x and y such that x*y is greater than 0x100 but such 
that (x*y*4) % 42949674296 is less than 0x100. At that point we will copy 0x100 bytes from our input buffer into a 
buffer that is much smaller, resulting in a buffer overflow. 
Root Cause Analysis 
Integer overflow can be defended against by validating the arguments used to compute the size prior to allocating 
the buffer. In fact, Sun added two C macros to the AWT mediaLib sub-component to help defend against this in 
2007. Both macros were updated in 2010 due to an integer overflow bug discovered at the time. A copy of one of 
the macros was added to the AWT splashscreen sub-component in 2009 due to another integer overflow bug. In 
February of 2013 they added two more macros to aid against integer overflow, SAFE_TO_MULT and SAFE_TO_ADD. 
unsigned int x = 4294967295 + 1; 
void cwe190_to_cwe122(int *input, int x, int y) { 
    if (x*y > 0x100) { 
        // If x*y*4 is greater than 4294967296, then we integer wrap 
        int *buf = malloc(x*y*sizeof(int)); 
        memcpy(buf, input, 0x100); 
    } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
CVE-2013-080912 is an example of an integer overflow resulting in a heap buffer overflow. The root of the issue lies 
in the mlib_ImageCreate function within jdk/src/share/native/sun/awt/medialib/mlib_ImageCreate.c. 
Here are the relevant portions of the function: 
Since mlib_s32 is a typedef for int, we can see that an overflow can occur if width * channels * 4 * height is greater 
than 4294967295. 
12 http://www.oracle.com/technetwork/topics/security/alert-cve-2013-1493-1915081.html 
mlib_image *mlib_ImageCreate(mlib_type type, mlib_s32  channels,  
       mlib_s32  width, mlib_s32  height) { 
    if (width  4) { 
        return NULL; 
    }; 
... 
    switch (type) { 
... 
        case MLIB_INT: 
            wb = width * channels * 4; 
            break;  
... 
    } 
... 
    data = mlib_malloc(wb * height);  
... 
} 
static int 
allocateArray(JNIEnv *env, BufImageS_t *imageP, 
              mlib_image **mlibImagePP, void **dataPP, int isSrc, 
              int cvtToDefault, int addAlpha) { 
    void *dataP; 
    unsigned char *cDataP; 
    RasterS_t *rasterP = &imageP->raster; 
    ColorModelS_t *cmP = &imageP->cmodel; 
    int dataType = BYTE_DATA_TYPE; 
    int width; 
    int height; 
    HintS_t *hintP = &imageP->hints; 
    *dataPP = NULL; 
    width = rasterP->width; 
    height = rasterP->height; 
    if (cvtToDefault) { 
        int status = 0; 
        *mlibImagePP = (*sMlibSysFns.createFP)(MLIB_BYTE, 4, width, height); 
        cDataP  = (unsigned char *) mlib_ImageGetData(*mlibImagePP); 
        /* Make sure the image is cleared */ 
        memset(cDataP, 0, width*height*4); 
... 
        return cvtCustomToDefault(env, imageP, -1, cDataP); 
    } 
... 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
sMlibSysFns.createFP is a pointer to the vulnerable mlib_ImageCreate function. We can see that we then call 
mlib_ImageGetData on the value returned, and then immediately call memset on the buffer returned. At the end of 
the if block, we return the value returned by the call to cvtCustomToDefault which eventually performs a memcpy 
and thus performs the controlled overflow. 
Patch Analysis 
CVE-2013-0809 was patched in JDK 7u17. To fix the vulnerability, Oracle introduced the SAFE_TO_MULT macro and 
updated the mlib_ImageCreate function to use it. Here is the updated snippet of the mlib_ImageCreate function, 
which shows the usage of the SAFE_TO_MULT macro: 
static int 
cvtCustomToDefault(JNIEnv *env, BufImageS_t *imageP, int component, 
                   unsigned char *dataP) { 
    ColorModelS_t *cmP = &imageP->cmodel; 
    RasterS_t *rasterP = &imageP->raster; 
    int y; 
    jobject jpixels = NULL; 
    jint *pixels; 
    unsigned char *dP = dataP; 
#define NUM_LINES    10 
    int numLines = NUM_LINES; 
    int nbytes = rasterP->width*4*NUM_LINES; 
    for (y=0; y height; y+=numLines) { 
        /* getData, one scanline at a time */ 
        if (y+numLines > rasterP->height) { 
            numLines = rasterP->height - y; 
            nbytes = rasterP->width*4*numLines; 
        } 
        jpixels = (*env)->CallObjectMethod(env, imageP->jimage, 
                                           g_BImgGetRGBMID, 0, y, 
                                           rasterP->width, numLines, 
                                           jpixels,0, rasterP->width); 
        if (jpixels == NULL) { 
            JNU_ThrowInternalError(env, "Can't retrieve pixels."); 
            return -1; 
        } 
        pixels = (*env)->GetPrimitiveArrayCritical(env, jpixels, NULL); 
        memcpy(dP, pixels, nbytes); 
        dP += nbytes; 
        (*env)->ReleasePrimitiveArrayCritical(env, jpixels, pixels, 
                                              JNI_ABORT); 
    } 
    return 0; 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
We see that SAFE_TO_MULT is now used at every step of calculating the size of the buffer and we can also see that 
NULL will be returned instead of a pointer to an under-allocated buffer.  
CVE-2013-2420 - Out-of-bounds Write due to Integer Overflow  
Core Issue 
These two CWEs describe the condition of an integer overflow resulting in writing data outside of the bounds of an 
allocated buffer. Building on just an integer overflow from the previous section we provide a simple function to help 
with the explanation of this issue. 
We have a function, cwe190_to_cwe787, that takes four arguments. This example is incredibly contrived, but x and 
y are multiplied and the product is added to the base pointer to determine where we write a zero. The function tries 
to be safe by only writing the zero if x and y are both above zero and if the calculated pointer is less than the end of 
the buffer. Unfortunately the function fails to consider an overflow when multiplying x and y, allowing for an out-of-
bound write at an address lower than the base pointer. 
mlib_image *mlib_ImageCreate(mlib_type type, mlib_s32  channels, mlib_s32  width,  
      mlib_s32  height) { 
  if (!SAFE_TO_MULT(width, channels)) { 
    return NULL; 
  } 
  wb = width * channels; 
... 
  switch (type) { 
... 
    case MLIB_INT: 
      if (!SAFE_TO_MULT(wb, 4)) { 
        return NULL; 
      } 
      wb *= 4; 
      break; 
... 
  } 
... 
  if (!SAFE_TO_MULT(wb, height)) { 
      return NULL; 
  } 
  data = mlib_malloc(wb * height); 
  if (data == NULL) { 
    return NULL; 
  } 
... 
} 
void cwe190_to_cwe787(int *base, int *end, int x, int y) { 
    int *pbuf = base + x * y; 
    if (x > 0 && y > 0 && pbuf GetIntField(env, jict, g_ICRscanstrID); 
    pixelStride = (*env)->GetIntField(env, jict, g_ICRpixstrID); 
    joffs = (*env)->GetObjectField(env, jict, g_ICRdataOffsetsID); 
    jdata = (*env)->GetObjectField(env, jict, g_ICRdataID); 
    srcLUT = (int *) (*env)->GetPrimitiveArrayCritical(env, jlut, NULL); 
    srcData = (unsigned char *) (*env)->GetPrimitiveArrayCritical(env, jpix, NULL); 
    cOffs = (int *) (*env)->GetPrimitiveArrayCritical(env, joffs, NULL); 
    dstData = (int *) (*env)->GetPrimitiveArrayCritical(env, jdata, NULL); 
    dstyP = dstData + cOffs[0] + y*sStride + x*pixelStride; 
    srcyP = srcData + off; 
    for (yIdx = 0; yIdx  0 ? (ss) : -(ss)); 
        if (limit = srcDataLength) {            
            return JNI_FALSE;                            
        }                                                 
        CHECK_STRIDE(0, h, scansize);                     
        /* check scansize */                              
        pixeloffset = scansize * (h - 1);                 
        if ((w - 1) > (0x7fffffff - pixeloffset)) {       
            return JNI_FALSE;                             
        }                                                
        pixeloffset += (w - 1);                           
        if (off > (0x7fffffff - pixeloffset)) {           
            return JNI_FALSE;                             
        }                                                 
    } while (0) 
#define CHECK_DST(xx, yy)                                 
    do {                                                  
        int soffset = (yy) * sStride;                     
        int poffset = (xx) * pixelStride;                 
        if (poffset > (0x7fffffff - soffset)) {           
            return JNI_FALSE;                             
        }                                                 
        poffset += soffset;                               
        if (dstDataOff > (0x7fffffff - poffset)) {        
            return JNI_FALSE;                            
        }                                                 
        poffset += dstDataOff;                            
        if (poffset = dstDataLength) {    
            return JNI_FALSE;                             
        }                                                 
    } while (0)                                           
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
JNIEXPORT jboolean JNICALL 