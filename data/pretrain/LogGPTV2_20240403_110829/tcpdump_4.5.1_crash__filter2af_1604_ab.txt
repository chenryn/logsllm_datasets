    tcpdump: pcap_loop: invalid packet capture length 385882848, bigger than maximum of 262144
    [Inferior 1 (process 8997) exited with code 01]
在`pcap_loop`中发现数据包长度过长，发生了错误并输出错误提示。
这里有一个比较难理解的地方，两个测试版本`libpcap`是相同的，那么对应的`pcap_loop`也就是一样的，为什么一个版本`pcap_loop`出错了，而另一个则没有。为了找到这出这个疑问，我连续用了一周的时间去测试。
依然顺着这个结构走一遍
    print_packet
     |
     |-->ieee802_15_4_if_print
            |
            |-->hex_and_asciii_print(ndo_default_print)
                    |
                    |-->hex_and_ascii_print_with_offset
比较`print_packet`两个版本的区别
`snapend`原本是利用一个变量存放，这里存放在了结构体`ndo`里，表示数据包最后一个数据位置。
跟进`ieee802_15_4_if_print`，首先看一下版本比较
可以看到没有比较大的变化，主要就是将一些标志位放在了`ndo`结构体中。
执行结果
可以看到目前的结果和`4.5.1`版本中是一样的。
继续跟进`hex_and_ascii_print_with_offset`，首先查看一下版本比较
代码一开始就增加了一个`caplength`的判断
    caplength = (ndo->ndo_snapend >= cp) ? ndo->ndo_snapend - cp : 0;
    if (length > caplength)
        length = caplength;
    nshorts = length / sizeof(u_short);
    i = 0;
    hsp = hexstuff; asp = asciistuff;
    while (--nshorts >= 0) {
        ...
    }
增加了这个判断，即可修复该错误。
可以看到执行完`caplength = (ndo->ndo_snapend >= cp) ? ndo->ndo_snapend - cp :
0;`，`caplength`为0，继续执行，可以推出`length`同样为0，到这里已经不会发生错误了。
## 跟踪错误输出
其实细心一点，还可以发现修复完后，会输出不一样的处理信息
    reading from file crash, link-type IEEE802_15_4_NOFCS (IEEE 802.15.4 without FCS)
    04:06:08.000000 IEEE 802.15.4 Beacon packet 
    tcpdump: pcap_loop: invalid packet capture length 385882848, bigger than maximum of 262144
    [Inferior 1 (process 8997) exited with code 01]
该错误信息是通过`pcap_loop`输出的，在`libpcap`定位一下该错误处理，可以发现其在`pcap_next_packet`函数中
    static int
    pcap_next_packet(pcap_t *p, struct pcap_pkthdr *hdr, u_char **data)
    {
        ...
        if (hdr->caplen > p->bufsize) {
            /*
             * This can happen due to Solaris 2.3 systems tripping
             * over the BUFMOD problem and not setting the snapshot
             * correctly in the savefile header.
             * This can also happen with a corrupted savefile or a
             * savefile built/modified by a fuzz tester.
             * If the caplen isn't grossly wrong, try to salvage.
             */
            size_t bytes_to_discard;
            size_t bytes_to_read, bytes_read;
            char discard_buf[4096];
            if (hdr->caplen > MAXIMUM_SNAPLEN) {    errbuf, PCAP_ERRBUF_SIZE,
                    "invalid packet capture length %u, bigger than "
                    "maximum of %u", hdr->caplen, MAXIMUM_SNAPLEN);
                return (-1);
            }
            ...
还是那个问题，都是同样的`libpcap`版本，`4.7.0`输出的是`pcap_next_packet`中的错误信息，但是`4.5.1`却直接访问异常了？
经过不停的测试，我是这么理解的：
`4.7.0`中对长度进行了判断，导致不合规的`length`没有被处理，从而导致`pcap_loop`中又重新进行了一次`pcap_next_packet`
    pcap_loop
      |
      |--> pcap_next_packet => 第一次在hex_and_ascii_print_with_offset中length为0
             |
             |--> pcap_next_packet => 第二次hdr->caplen > MAXIMUM_SNAPLEN
执行测试
确定IDA映射地址
`pcap_loop`函数会调用`pcap_read_offline`(具体可查看`libpcap`源码)，在`pcap_read_offline`函数中
    .text:B7F99BC7                 push    edi
    .text:B7F99BC8                 push    [esp+58h+var_40]
    .text:B7F99BCC                 mov     eax, [esp+5Ch+var_44]
    .text:B7F99BD0                 call    eax             ; callback(调用print_packet)
    .text:B7F99BD2                 add     esp, 10h
                ...
    .text:B7F99BED                 push    [esp+50h+var_48]
    .text:B7F99BF1                 push    edi
    .text:B7F99BF2                 push    ebp
    .text:B7F99BF3                 call    dword ptr [ebp+4] ; 调用pcap_next_packet
    .text:B7F99BF6                 add     esp, 10h
    .text:B7F99BF9                 test    eax, eax
    .text:B7F99BFB                 jnz     short loc_B7F99C30
    .text:B7F99BFD                 mov     edx, [ebp+8Ch]
    .text:B7F99C03                 mov     eax, [esp+4Ch+var_34]
    .text:B7F99C07                 test    edx, edx
    .text:B7F99C09                 jz      short loc_B7F99BC0
    .text:B7F99C0B                 push    [esp+4Ch+var_28] ; u_int
    .text:B7F99C0F                 push    [esp+50h+var_24] ; u_int
    .text:B7F99C13                 push    eax             ; u_char *
    .text:B7F99C14                 push    edx             ; struct bpf_insn *
    .text:B7F99C15                 call    _bpf_filter
比较重要的函数有`callback`和`pcap_next_packet`，在`pcap_next_packet`设置断点
第一次到断点
执行查看返回值
对照ida
可以看到返回0，会执行一遍`callback`，即打印函数。之后会因为`length=0`结束
第二次`pcap_next_packet`
跟进去 以确定`caplen`具体的值，并确认判断条件(这里无论是分析`libpcap`源码，还是ida伪码都可以)，查看ida伪码
    signed int __cdecl pcap_next_packet_B7F9A050(int a1, unsigned int *a2, _DWORD *a3)
    {
      ...
      unsigned int v33; // [esp+Ch] [ebp-1040h]
      unsigned int v34; // [esp+14h] [ebp-1038h]
      unsigned int v35; // [esp+18h] [ebp-1034h]
      size_t n; // [esp+1Ch] [ebp-1030h]
      unsigned int v37; // [esp+20h] [ebp-102Ch]
      char ptr; // [esp+2Ch] [ebp-1020h]
      unsigned int v39; // [esp+102Ch] [ebp-20h]
      v3 = a2;
      v4 = *(a1 + 36);
      v5 = *(a1 + 44);
      v39 = __readgsdword(0x14u);
      stream = v5;
      /*
       v34是一个结构体
       str_v34 {
           u_int_t v34;
           u_int_t v35;
           size_t n; // caplen
           u_int_t v37;
       }
      */
      v6 = __fread_chk(&v34, 24, 1, *v4, v5); //这里下断点查看n的值
      if ( *v4 == v6 )
      {
        caplen = n;
        v8 = v37;
        v9 = v35;
        v33 = v34;
        if ( *(a1 + 40) )
        {
          caplen = _byteswap_ulong(n); 
          v21 = _byteswap_ulong(v37);
          v22 = _byteswap_ulong(v35);
          a2[2] = caplen;
          a2[3] = v21;
          a2[1] = v22;
          *a2 = _byteswap_ulong(v33);
          v10 = v4[2];
          if ( v10 != 1 )
          {
    LABEL_4:
            if ( v10 == 2 )
              a2[1] = a2[1] / 1000;
            v11 = v4[1];
            if ( v11 != 1 )
            {
    LABEL_7:
              if ( v11 != 2 || (v23 = a2[3], v23 >= caplen) )
              {
    LABEL_8:
                bufsize = *(a1 + 16);
                if ( bufsize >= caplen )
                {
                  if ( a2[2] == fread(*(a1 + 20), 1u, caplen, stream) )
                  {
    LABEL_30:
                    v26 = *(a1 + 20);
                    result = *(a1 + 40);
                    *a3 = v26;
                    if ( result )
                    {
                      sub_B7F9C580(*(a1 + 68), v3, v26);
                      result = 0;
                    }
                    goto LABEL_27;
                  }
                  v27 = a1 + 144;
                  if ( ferror(stream) )
                  {
                    v28 = __errno_location();
                    v29 = pcap_strerror(*v28);
                    __snprintf_chk(v27, 256, 1, 257, "error reading dump file: %s", v29);
                  }
                  else
                  {
                    __snprintf_chk(
                      v27,
                      256,
                      1,
                      257,
                      "truncated dump file; tried to read %u captured bytes, only got %lu",
                      a2[2]);
                  }
                }
                else if ( caplen > 0x40000 ) // 下断点，执行判断
                {
                  __snprintf_chk(
                    a1 + 144,
                    256,
                    1,
                    257,
                    "invalid packet capture length %u, bigger than maximum of %u",
                    caplen);
                }
         ...
查看`n`
在比较处下断点，测试是否大于最大值`0x40000`
大于最大值，会将错误信息返回`pcap_loop`
至此整个过程分析完毕，包括具体的出错原因，修补代码都做了详细分析
## 参考
[exploit-db payload](https://www.exploit-db.com/exploits/39875/)
[WHEREISK0SHL分析博客](https://whereisk0shl.top/post/2016-10-23-1)
[libpcap/tcpdump源码](https://github.com/the-tcpdump-group)