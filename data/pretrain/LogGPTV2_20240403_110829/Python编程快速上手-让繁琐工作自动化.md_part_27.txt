这样，程序就可以从硬盘中恢复变量的数据。shelve模块让你在程序中添加“保存”
和“打开”功能。例如，如果运行一个程序，并输入了一些配置设置，就可以将这
些设置保存到一个shelf文件，然后让程序下一次运行时加载它们。
在交互式环境中输入以下代码：
>>> import shelve
>>> shelfFile = shelve.open('mydata')
>>> cats = ['Zophie', 'Pooka', 'Simon']
>>> shelfFile['cats'] = cats
>>> shelfFile.close()
要利用shelve模块读写数据，首先要导入它。调用函数shelve.open()并传入一个文件
名，然后将返回的值保存在一个变量中。可以对这个变量的shelf值进行修改，就像它是
一个字典一样。当你完成时，在这个值上调用close()。这里，我们的shelf值保存在shelfFile
中。我们创建了一个列表cats，并写下shelfFile['cats'] =cats，将该列表保存在shelfFile中，
作为键'cats'关联的值（就像在字典中一样）。然后我们在shelfFile上调用close()。
在 Windows 上运行前面的代码，你会看到在当前工作目录下有 3 个新文件：
mydata.bak、mydata.dat和mydata.dir。在OS X上，只会创建一个mydata.db文件。
这些二进制文件包含了存储在 shelf 中的数据。这些二进制文件的格式并不重
要，你只需要知道shelve模块做了什么，而不必知道它是怎么做的。该模块让你不
用操心如何将程序的数据保存到文件中。
你的程序稍后可以使用shelve模块，重新打开这些文件并取出数据。shelf值不
必用读模式或写模式打开，因为它们在打开后，既能读又能写。在交互式环境中输
入以下代码：
>>> shelfFile = shelve.open('mydata')
>>> type(shelfFile)
>>> shelfFile['cats']
['Zophie', 'Pooka', 'Simon']
>>> shelfFile.close()
这里，我们打开了shelf文件，检查我们的数据是否正确存储。输入shelfFile['cats']
将返回我们前面保存的同一个列表，所以我们就知道该列表得到了正确存储，然后
我们调用close()。
就像字典一样，shelf值有keys()和values()方法，返回shelf中键和值的类似列
第8章 读写文件 147
表的值。因为这些方法返回类似列表的值，而不是真正的列表，所以应该将它们传
递给list()函数，取得列表的形式。在交互式环境中输入以下代码：
>>> shelfFile = shelve.open('mydata')
>>> list(shelfFile.keys())
['cats']
>>> list(shelfFile.values())
[['Zophie', 'Pooka', 'Simon']]
>>> shelfFile.close()
创建文件时，如果你需要在 Notepad 或 TextEdit 这样的文本编辑器中读取它们，
纯文本就非常有用。但是，如果想要保存Python程序中的数据，那就使用shelve模块。
8.4 用 pprint.pformat()函数保存变量
回忆一下5.2节“漂亮打印”中，pprint.pprint()函数将列表或字典中的内容“漂
亮打印”到屏幕，而pprint.pformat()函数将返回同样的文本字符串，但不是打印它。
这个字符串不仅是易于阅读的格式，同时也是语法上正确的 Python 代码。假定你有
一个字典，保存在一个变量中，你希望保存这个变量和它的内容，以便将来使用。
pprint.pformat()函数将提供一个字符串，你可以将它写入.py文件。该文件将成为你自
己的模块，如果你需要使用存储在其中的变量，就可以导入它。
例如，在交互式环境中输入以下代码：
>>> import pprint
>>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> pprint.pformat(cats)
"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"
>>> fileObj = open('myCats.py', 'w')
>>> fileObj.write('cats = ' + pprint.pformat(cats) + '\n')
83
>>> fileObj.close()
这里，我们导入了pprint，以便能使用pprint.pformat()。我们有一个字典的列表，
保存在变量cats中。为了让cats中的列表在关闭交互式环境后仍然可用，我们利用
pprint.pformat()，将它返回为一个字符串。当我们有了 cats 中数据的字符串形式，
就很容易将该字符串写入一个文件，我们将它命名为myCats.py。
import语句导入的模块本身就是Python脚本。如果来自pprint.pformat()的字符
串保存为一个.py文件，该文件就是一个可以导入的模块，像其他模块一样。
由于Python脚本本身也是带有.py文件扩展名的文本文件，所以你的Python程
序甚至可以生成其他Python程序。然后可以将这些文件导入到脚本中。
>>> import myCats
>>> myCats.cats
[{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> myCats.cats[0]
{'name': 'Zophie', 'desc': 'chubby'}
>>> myCats.cats[0]['name']
'Zophie'
148 Python编程快速上手——让繁琐工作自动化
创建一个.py 文件（而不是利用 shelve 模块保存变量）的好处在于，因为它是
一个文本文件，所以任何人都可以用一个简单的文本编辑器读取和修改该文件的内
容。但是，对于大多数应用，利用shelve模块来保存数据，是将变量保存到文件的
最佳方式。只有基本数据类型，诸如整型、浮点型、字符串、列表和字典，可以作
为简单文本写入一个文件。例如，File对象就不能够编码为文本。
8.5 项目：生成随机的测验试卷文件
假如你是一位地理老师，班上有 35 名学生，你希望进行美国各州首府的一个
小测验。不妙的是，班里有几个坏蛋，你无法确信学生不会作弊。你希望随机调整
问题的次序，这样每份试卷都是独一无二的，这让任何人都不能从其他人那里抄袭
答案。当然，手工完成这件事又费时又无聊。好在，你懂一些Python。
下面是程序所做的事：
• 创建35份不同的测验试卷。
• 为每份试卷创建50个多重选择题，次序随机。
• 为每个问题提供一个正确答案和3个随机的错误答案，次序随机。
• 将测验试卷写到35个文本文件中。
• 将答案写到35个文本文件中。
这意味着代码需要做下面的事：
• 将州和它们的首府保存在一个字典中。
• 针对测验文本文件和答案文本文件，调用open()、write()和close()。
• 利用random.shuffle()随机调整问题和多重选项的次序。
第1步：将测验数据保存在一个字典中
第一步是创建一个脚本框架，并填入测验数据。创建一个名为 randomQuiz
Generator.py的文件，让它看起来像这样：
#! python3
# randomQuizGenerator.py - Creates quizzes with questions and answers in
# random order, along with the answer key.
 import random
# The quiz data. Keys are states and values are their capitals.
 capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix',
'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver',
'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee',
'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois':
'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas':
'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine':
'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan':
'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri':
'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada':
'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New
第8章 读写文件 149
Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh',
'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',
'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence',
'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee':
'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont':
'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West
Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}
# Generate 35 quiz files.
 for quizNum in range(35):
# TODO: Create the quiz and answer key files.
# TODO: Write out the header for the quiz.
# TODO: Shuffle the order of the states.
# TODO: Loop through all 50 states, making a question for each.
因为这个程序将随机安排问题和答案的次序，所以需要导入 random 模块，
以便利用其中的函数。capitals变量含一个字典，以美国州名作为键，以州首府作
为值。因为你希望创建 35 份测验试卷，所以实际生成测验试卷和答案文件的代码
（暂时用TODO注释标注）会放在一个for循环中，循环35次（这个数字可以改
变，生成任何数目的测验试卷文件）。
第2步：创建测验文件，并打乱问题的次序
现在是时候填入那些TODO了。
循环中的代码将重复执行35次（每次生成一份测验试卷），所以在循环中，你
只需要考虑一份测验试卷。首先你要创建一个实际的测验试卷文件，它需要有唯一
的文件名，并且有某种标准的标题部分，留出位置，让学生填写姓名、日期和班级。
然后需要得到随机排列的州的列表，稍后将用它来创建测验试卷的问题和答案。
在randomQuizGenerator.py中添加以下代码行：
#! python3
# randomQuizGenerator.py - Creates quizzes with questions and answers in
# random order, along with the answer key.
--snip--
# Generate 35 quiz files.
for quizNum in range(35):
# Create the quiz and answer key files.
 quizFile = open('capitalsquiz%s.txt' % (quizNum + 1), 'w')
 answerKeyFile = open('capitalsquiz_answers%s.txt' % (quizNum + 1), 'w')
# Write out the header for the quiz.
 quizFile.write('Name:\n\nDate:\n\nPeriod:\n\n')
quizFile.write((' ' * 20) + 'State Capitals Quiz (Form %s)' % (quizNum + 1))
quizFile.write('\n\n')
# Shuffle the order of the states.
states = list(capitals.keys())
 random.shuffle(states)
# TODO: Loop through all 50 states, making a question for each.
150 Python编程快速上手——让繁琐工作自动化
测验试卷的文件名将是capitalsquiz.txt，其中是该测验试卷的唯一编号，
来自于quizNum，即for循环的计数器。针对capitalsquiz.txt的答案将保存在一
个文本文件中，名为capitalsquiz_answers.txt。每次执行循环，'capitalsquiz%s.txt'
和'capitalsquiz_answers%s.txt'中的占位符%s都将被(quizNum + 1)取代，所以第一个
测验试卷和答案将是capitalsquiz1.txt和capitalsquiz_answers1.txt。在和的open()
函数调用将创建这些文件，以'w'作为第二个参数，以写模式打开它们。
处write()语句创建了测验标题，让学生填写。最后，利用random.shuffle()函
数，创建了美国州名的随机列表。该函数重新随机排列传递给它的列表中的值。
第3步：创建答案选项
现在需要为每个问题生成答案选项，这将是 A 到 D 的多重选择。你需要创建
另一个for循环，该循环生成测验试卷的50个问题的内容。然后里面会嵌套第三个
for循环，为每个问题生成多重选项。让你的代码看起来像这样：
#! python3
# randomQuizGenerator.py - Creates quizzes with questions and answers in
# random order, along with the answer key.
--snip--
# Loop through all 50 states, making a question for each.
for questionNum in range(50):
# Get right and wrong answers.
 correctAnswer = capitals[states[questionNum]]
 wrongAnswers = list(capitals.values())
 del wrongAnswers[wrongAnswers.index(correctAnswer)]
 wrongAnswers = random.sample(wrongAnswers, 3)
 answerOptions = wrongAnswers + [correctAnswer]
 random.shuffle(answerOptions)
# TODO: Write the question and answer options to the quiz file.
# TODO: Write the answer key to a file.
正确的答案很容易得到，它作为一个值保存在 capitals 字典中。这个循环将
遍历打乱过的states列表中的州，从states[0]到states[49]，在capitals中找到每个州，
将该州对应的首府保存在correctAnswer中。
可能的错误答案列表需要一点技巧。你可以从capitals字典中复制所有的值，
删除正确的答案，然后从该列表中选择 3 个随机的值。random.sample()函数使
得这种选择很容易，它的第一个参数是你希望选择的列表，第二个参数是你希望选
择的值的个数。完整的答案选项列表是这3个错误答案与正确答案的组合。最后，
答案需要随机排列，这样正确的答案就不会总是选项D。
第4步：将内容写入测验试卷和答案文件
剩下来就是将问题写入测验试卷文件，将答案写入答案文件。让你的代码看起
第8章 读写文件 151
来像这样：
#! python3
# randomQuizGenerator.py - Creates quizzes with questions and answers in
# random order, along with the answer key.
--snip--
# Loop through all 50 states, making a question for each.
for questionNum in range(50):
--snip--
# Write the question and the answer options to the quiz file.
quizFile.write('%s. What is the capital of %s?\n' % (questionNum + 1,
states[questionNum]))
 for i in range(4):
 quizFile.write(' %s. %s\n' % ('ABCD'[i], answerOptions[i]))
quizFile.write('\n')
# Write the answer key to a file.
 answerKeyFile.write('%s. %s\n' % (questionNum + 1, 'ABCD'[
answerOptions.index(correctAnswer)]))