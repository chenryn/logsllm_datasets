user@docker1:~$ docker network create --help
Usage:  docker network create [OPTIONS] NETWORK
Create a network
Options:
--aux-address value    Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])
-d, --driver string    Driver to manage the Network (default "bridge")
--gateway value        IPv4 or IPv6 Gateway for the master subnet (default [])
--help                 Print usage
--internal             Restrict external access to the network
--ip-range value       Allocate container ip from a sub-range (default [])
--ipam-driver string   IP Address Management Driver (default "default")
--ipam-opt value       Set IPAM driver specific options (default map[])
--ipv6                 Enable IPv6 networking
--label value          Set metadata on a network (default [])
-o, --opt value        Set driver specific options (default map[])
--subnet value         Subnet in CIDR format that represents a network segment (default [])
user@docker1:~$
```
让我们花一点时间来讨论这些选项的含义:
*   `aux-address`:这可以让你定义 Docker 在容器产生时不应该分配给容器的 IP 地址。这些相当于 DHCP 作用域中的 IP 保留。
*   `Driver`:网络实施的是哪个`Driver`。内置选项包括桥和覆盖，但你也可以使用第三方驱动程序。
*   `gateway`:网络的网关。如果未指定，Docker 将假设它是子网中第一个可用的 IP 地址。
*   `internal`:该选项允许您隔离网络，本章稍后将详细介绍。
*   `ip-range`:这个可以让你在定义的网络子网中指定一个较小的子网，用于容器寻址。
*   `ipam-driver`:在除了消费第三方网络驱动，还可以利用第三方 IPAM 驱动。出于本书的目的，我们将主要关注默认或内置的 IPAM `Driver`。
*   `ipv6`:此在网络上启用 IPv6 网络。
*   `label`:此允许您指定将作为元数据存储的网络附加信息。
*   `ipam-opt`:这个允许你指定传递给 IPAM `Driver`的选项。
*   `opt`:这个可以让你指定可以传递到网络的选项`Driver`。每个内置`Driver`的具体选项将在相关食谱中讨论。
*   `subnet`:此定义了与您正在创建的网络类型相关联的子网。
您可能会注意到，我们可以在 Docker 网络的服务级别上定义的一些设置与前面术语列表中列出的用户定义选项有些重叠。检查选项时，您可能会尝试比较以下配置标志:
![How to do it…](img/B05453_03_01.jpg)
虽然这些设置在很大程度上是等效的，但它们并不完全相同。仅有的两个行为方式完全相同的是`--fixed-cidr`和`ip-range`。这两个选项都定义了用于容器 IP 寻址的较大主网络的较小子网。另外两个选项相似，但不完全相同。
在服务选项的情况下，`--bip`适用于`docker0`桥，`--default-gateway`适用于容器本身。在用户定义方面，`--subnet`和`--gateway`选项直接应用于被定义的网络结构(在这个比较中，是一个桥)。回想一下`--bip`选项期望在网络中接收一个 IP 地址，而不是网络本身。以这种方式定义的网桥 IP 覆盖了子网和网关，这两者在定义用户定义的网络时是分开定义的。也就是说，服务定义更加灵活，因为它允许您定义桥的接口以及分配给容器的网关。
遵循具有合理默认值的主题，创建用户定义的网络实际上不需要这些选项。只需给它一个名称，您就可以创建第一个用户定义的网络:
```
user@docker1:~$ docker network create mynetwork
3fea20c313e8880538ab50fd591398bdfdac2378abac29aacb1be131cbfab40f
user@docker1:~$
```
检查后，我们可以看到 Docker 使用什么作为默认值:
```
user@docker1:~$ docker network inspect mynetwork
[
    {
        "Name": "mynetwork",
        "Id": "a09b7617c5504d4afd80c26b82587000c64046f1483de604c51fa4ba53463b50",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
user@docker1:~$
```
Docker 假设，如果您没有指定一个`Driver`，您希望使用网桥`Driver`创建一个网络。如果您在创建网络时没有定义子网，它也会自动为该网桥选择和分配子网。
### 注
建议您为自己创建的网络指定子网。正如我们稍后将看到的，并非所有的网络拓扑都依赖于将容器网络隐藏在主机接口之后。在这些情况下，定义一个可路由的非重叠子网是必要的。
它还自动为子网选择第一个可用的 IP 地址作为网关。因为我们没有定义任何特定于`Driver`的选项，网络没有，但是在这种情况下使用了默认值。这些将在与每个特定`Driver`相关的食谱中讨论。
空的网络，即没有活动端点的网络，可以使用`network rm`命令删除:
```
user@docker1:~$ docker network rm mynetwork
user@docker1:~$
```
这里值得注意的另一个项目是 Docker 使用户定义的网络持久化。在大多数情况下，任何手动定义的 Linux 网络结构都会在系统重新启动时丢失。Docker 会记录网络配置，并在 Docker 服务重新启动时负责回放。这是通过 Docker 而不是自己建立网络的巨大优势。
# 将容器连接到网络
虽然拥有创建自己的网络的能力是一个巨大的飞跃，但是如果没有连接容器的手段，这就毫无意义。在 Docker 的早期版本中，这通常是在容器运行时通过传递指定容器应该使用哪个网络的`--net`标志来完成的。虽然这种情况仍然存在，但是`docker network`子命令也允许您将正在运行的容器与现有网络连接和断开。
## 做好准备
`docker network`子命令是在 Docker 1.9 中引入的，所以你需要一个 Docker 主机至少运行那个版本。在我们的例子中，我们将使用 Docker 版本。您还需要对当前的网络布局有一个很好的了解，以便我们检查当前的配置时，您可以跟着做。假设每个 Docker 主机都处于其本机配置。
## 怎么做…
通过`network connect`和`network disconnect`子命令连接和断开容器:
```
user@docker1:~$ docker network connect --help
Usage:  docker network connect [OPTIONS] NETWORK CONTAINER
Connects a container to a network
  --alias=[]         Add network-scoped alias for the container
  --help             Print usage
  --ip               IP Address
  --ip6              IPv6 Address
  --link=[]          Add link to another container
user@docker1:~$
```
让我们回顾一下将容器连接到网络的选项:
*   **别名**:这允许在连接容器的网络中定义容器名称解析的别名。我们将在[第 5 章](05.html "Chapter 5. Container Linking and Docker DNS")、*容器链接和 Docker DNS* 中对此进行更多讨论，我们将在这里讨论 DNS 和链接。
*   **IP** :这定义了一个用于容器的 IP 地址。只要的 IP 地址当前没有被使用，这就可以工作。一旦分配，只要容器正在运行或暂停，它就会保持保留状态。停止容器将删除预订。
*   **IP6** :这个定义了一个用于容器的 IPv6 地址。适用于 IPv4 地址的相同分配和保留要求也适用于 IPv6 地址。
*   **链接**:这允许指定到另一个容器的链接。我们将在[第 5 章](05.html "Chapter 5. Container Linking and Docker DNS")、*容器链接和 Docker DNS* 中对此进行更多讨论，我们将在这里讨论 DNS 和链接。
一旦发送了`network connect`请求，Docker 将处理所有需要的配置，以便容器开始使用新的接口。让我们看一个简单的例子:
```
user@docker1:~$ docker run --name web1 -d jonlangemak/web_server_1
e112a2ab8197ec70c5ee49161613f2244f4353359b27643f28a18be47698bf59
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
8: eth0@if9:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
在上面的输出中，我们启动了一个简单的容器，没有指定任何与网络相关的配置。结果是容器被映射到`docker0`桥。现在，让我们尝试将此容器连接到我们在之前的配方`mynetwork`中创建的网络:
```
user@docker1:~$ docker network connect mynetwork web1
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
8: eth0@if9:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
10: eth1@if11:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.2/16 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe12:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
正如你看到的，容器现在在网络`mynetwork`上有一个 IP 接口。如果我们现在再次检查网络，我们应该会看到一个容器关联:
```
user@docker1:~$ docker network inspect mynetwork
[
    {
        "Name": "mynetwork",
        "Id": "a09b7617c5504d4afd80c26b82587000c64046f1483de604c51fa4ba53463b50",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {           "e112a2ab8197ec70c5ee49161613f2244f4353359b27643f28a18be47698bf59": {
 "Name": "web1",
 "EndpointID": "678b07162dc958599bf7d463da81a4c031229028ebcecb1af37ee7d448b54e3d",
 "MacAddress": "02:42:ac:12:00:02",
 "IPv4Address": "172.18.0.2/16",
 "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
user@docker1:~$
```
网络也可以轻松断开。例如，我们现在可以通过将容器从网桥网络中移除来将其从`docker0`网桥中移除: