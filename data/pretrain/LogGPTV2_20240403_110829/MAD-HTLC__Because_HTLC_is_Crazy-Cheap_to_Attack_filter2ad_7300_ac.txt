// dep-B
// dep-M
Table I: Possible redeeming entity of MH-Dep.
prea published
prea not published
preb published
Any entity
B
preb not published
A
—
Table II: Possible redeeming entity of MH-Col.
prea published
prea not published
preb published
Any entity
B
preb not published
B
B
be included even in the next block bj+1. This path is only
available to A, since only she ever knows ska.
In the dep-B path (line 2), B can redeem MH-Dep by
creating a transaction including preb and sigb, a signature
created using his secret key skb. Such a transaction can be
included in a block at least T blocks after MH-Dep’s initiation,
that is, not earlier than block bj+T . This path is only available
to B, since only he ever knows skb.
In the dep-M path (line 3), any entity can redeem MH-
Dep by creating a transaction including both prea and preb. A
transaction taking this redeem path does not require a digital
signature, and can be included even in the next block bj+1.
This path is therefore available to any entity, and speciﬁcally
to any miner, that knows both prea and preb.
C. MH-Col
is initiated with vcol
The MH-Col contract
tokens. Its
predicate is parameterized with B’s public key pkb; the hash
digest of the predeﬁned secret diga = H (prea) such that any
entity other than A and B does not know prea, and A and B
know prea based on the speciﬁc use case; the hash digest digb
such that H (preb) = digb, where only B knows preb; and
a timeout T . It has two redeem paths, denoted by col-B
Predicate 2: MH-Col
Parameters: pkb, T, diga, digb
MH-Col (pre1, pre2, sig) :=
vTime (T ) ∧
(cid:2)vSig (sig; pkb) ∨
(vPreImg (pre1; diga) ∧ vPreImg (pre2; digb))(cid:3)
1
2
3
// col-B
// col-M
and col-M, and presented in Predicate 2. Table II shows the
possible redeeming entities of MH-Col.
Both paths are constrained by the timeout T , meaning a
redeeming transaction can only be included in a block at
least T blocks after the MH-Col initiation (line 1).
In the col-B path (line 2), B can redeem MH-Col by
creating a transaction including sigb, a signature created using
his secret key skb. Only B can redeem MH-Col using this path
as he is the only one able to produce such a signature. This
path allows B to claim the collateral tokens in case either he
or A, but not both, publish a transaction redeeming MH-Dep.
The col-M path (line 3) allows any entity to redeem MH-
Col by creating a transaction including both prea and preb,
not requiring any digital signature. This path allows miners
to claim the MH-Col tokens in case B tries contesting A on
redeeming MH-Dep, thus disincentivizing his attempt.
V. MAD-HTLC SECURITY ANALYSIS
To prove the security of MAD-HTLC we ﬁrst show what
actions the participants can take to interact with it (§V-A). We
prove with the UC framework [33] the security of the setup,
initiation and redeeming of a MAD-HTLC. This analysis
yields a set of conditions on which entity can redeem tokens
from MAD-HTLC.
Then, we move to analyze how the entities should act
to maximize their gains. We formalize the redeeming of an
initiated MAD-HTLC as a game played by A, B and the
miners (§V-B), and show that they are all incentivized to act
as intended (§V-C).
A. Setup, Initiation and Redeeming Transactions Security
is
Our ﬁrst goal
to prove the setup and initiation
of MAD-HTLC are secure and to show which valid transac-
tions each participant can generate based on the mempool and
blockchain state. We present an overview of the security claims
and proofs, and bring the details in the extended report [95].
Like prior work [4], [9], [28], [31], [64], [81], [84], [96]–
[107], we assume the blockchain and predicate security holds,
including the digital signature scheme and the hash function.
We make the following observation: Transaction invalidity
due to vTime is temporal; this predicate becomes true once
sufﬁciently many blocks are created. In contrast, two valid
transactions can conﬂict, so only one of them can be con-
ﬁrmed. We neglect both invalidity reasons and show which
valid transactions can be created; clearly, any transaction that
is invalid under this relaxation is also invalid without
it.
Additionally, we consider only transactions relevant to our
protocol, ignoring unrelated transactions.
We formalize parties’ ability to redeem the contract un-
der this relaxation using the rPred () function (Eq. 1): De-
note path ∈ {dep-A, dep-B, dep-M, col-B, col-M}; P the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1235
redeeming party; ha = 1 if the redeeming party has a
suitable preimage for diga, and 0 otherwise; and hb = 1 if
the redeeming party has a suitable preimage for digb, and 0
otherwise. Then the relaxed contract predicate is expressed
by the function rPred (path,P, ha, hb). We note redeeming
transactions are published in the mempool, hence publish any
included preimages.
rPred (path,P, ha, hb) =
(P = A) ∧ ha
(P = B) ∧ hb
ha ∧ hb
P = B
path = dep-A
path = dep-B
path ∈ {dep-M, col-M}
path = col-B
(1)
We move to consider the setup, initiation, and redeeming
of a single (relaxed) contract with respect to the mempool
and the blockchain. We focus on a mempool and blockchain
projection (mbp) functionality of a relaxed MAD-HTLC,
and we model it as a single ideal functionality, Gmbp. This
functionality captures the parameter setup of a single contract
by A and B, its initiation, and redeeming transaction validity
due to the vPreImg and vSig predicates, disregarding conﬂicts
and timeouts. To facilitate the vPreImg predicate and its
underlying preimage-resistant hash function H, we model the
latter as a global random oracle ideal functionality H [33],
[108], [109]. We abstract away digital signatures by consider-
ing authenticated channels among parties and functionalities.
We consider an adversary that learns messages sent to Gmbp and
that messages were sent between parties but not their content.
This modeling is similar to previous work [8], [9], [84], [98].
We then deﬁne the (H,Gmbp)-hybrid world [33] (hereinafter,
simply the hybrid world), where the H and Gmbp
ideal
functionalities reside. In this hybrid world we then deﬁne
the relaxed MAD-HTLC (rmh) protocol Πrmh that is similar
to Πmad-htlc (Protocol 1), but (1) it is deﬁned with H and Gmbp;
(2) it considers system entities other than A and B, and
speciﬁcally miners, represented as a third party M; and (3) it
disregards timeouts and transaction conﬂicts.
The transition from Πrmh to Πmad-htlc is straightforward, and
we bring Πrmh in the extended report [95].
Then, our goal is to prove the following lemma, detailing the
possible valid transactions the entities can create and publish.
Lemma 1. Let there be a contract setup and initiated as
described by Πrmh, let puba and pubb be indicators whether
the preimages prea and preb were published in Gmbp, respec-
tively, and let shared indicate if B shared prea with A. So,
initially puba ← 0, pubb ← 0 and shared ← 0. Then,
parties A, B and M can only create and publish the following
valid redeeming transactions:
• B can publish a valid redeeming transaction using
the dep-B, dep-M, col-B or col-M redeem paths. Doing
so with either dep-M or col-M sets puba ← 1, and
with either dep-B, dep-M, or col-M sets pubb ← 1. In
addition to transaction creation and publication, B can
share prea with A (and by doing so sets shared ← 1).
1
and leak (setup-B, sid) to Sim.
b , sharedmh, publishedmh, initmh, pubmh
Ideal functionality Frmh in the ideal world represents the setup, initiation
and redeeming transaction publication of the contract for session id sid.
It interacts with parties A, B, M, and simulator Sim. It internally stores
and pubmh
indicators setupmh
a , setupmh
2 ,
all with initial value of 0.
• Upon receiving (setup-B, sid) from B when setupmh
b ← 1
b = 0, set setupmh
• Upon receiving (setup-A, sid) from A when setupmh
b = 1 ∧ setupmh
a = 0,
a ← 1 and leak (setup-A, sid) to Sim.
set setupmh
a = 1 ∧ sharedmh = 0,
• Upon receiving (share, sid) from B when setupmh
set sharedmh ← 1, and leak (share, sid) to Sim.
• Upon receiving (publish, sid) from either A or B when setupmh
a = 1 ∧
publishedmh = 0, set publishedmh ← 1, and leak (publish, sid) to Sim.
• Upon receiving (init, sid) from M when publishedmh = 1 ∧ initmh = 0,
set initmh ← 1, and leak (init, sid) to Sim.
party P such
that path ∈ {dep-A, dep-B, dep-M, col-B, col-M} when initmh = 1,
set pubmh
←
((P = B) ∧ path ∈ {dep-A, dep-M, col-M})
pubmh
de-
2
to Sim, and return resmh to P.
i ← 1.
1 ∨ (cid:0)(P = A) ∧ sharedmh ∧ (path = dep-A)(cid:1) ∨
(cid:1), leak (redeem, sid, path, P)
note resmh ← rPred(cid:0)path, P, pubmh
• Upon receiving (update, sid, i) for i ∈ {0, 1} from Sim through the
pubmh
((P = B) ∧ path ∈ {dep-B, dep-M, col-M}),
2
receiving
1 ← pubmh
(redeem, sid, path)
from any
inﬂuence port, set pubmh
1 , pubmh
2
• Upon
and
∨
Functionality 1: Frmh in the ideal world.
• If puba∨shared = 1 then A can publish a valid redeeming
transaction using the dep-A redeem path (and by doing
so she sets puba ← 1). If (puba ∨ shared) ∧ pubb = 1,
then A can publish a valid redeeming transaction with
either the dep-M or col-M redeem paths (and by doing
so sets puba ← 1 and pubb ← 1).
• If puba∧pubb = 1 then M can publish a valid redeeming
transaction with either dep-M or col-M.
To prove Lemma 1 we consider an ideal world, where we
deﬁne a relaxed MAD-HTLC ideal functionality Frmh (Func-
tionality 1) that implements the setup, initiation and redeeming
of a relaxed MAD-HTLC contract.
setupmh
a ,
and pubmh
Frmh maintains
sharedmh,
setupmh
indicators
b ,
publishedmh, initmh, and pubmh
2 , corresponding to
1
execution of MAD-HTLC (Protocol 1): setupmh
and setupmh
a
b
correspond to to A and B completing their setup; sharedmh is
set if B shared prea with B; publishedmh and initmh indicate
if the execution reached the initiation and redeeming phases,
respectively; and pubmh
2 are set if prea and preb are
published with a transaction.
1 and pubmh
or pubmh
Frmh leaks messages to Sim and receives a special update
instruction that sets either pubmh
2 . Looking ahead,
1
this allows the simulator to notify Frmh of a publication by a
corrupted party.
The construction of Frmh and the deﬁnition of rPred (Eq. 1)
imply that the properties described by Lemma 1 trivially hold
in the ideal world.
We then prove Πrmh UC-realizes Frmh, i.e., for any PPT
adversary Adv, there exists a PPT simulator Sim such that for
any PPT environment Z, the execution of Πrmh in the hybrid
world with Adv is computationally indistinguishable from the
execution of Frmh in the ideal world with Sim.
We prove the aforementioned by showing how to construct
such a Sim for any Adv, and the derived indistinguishability
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1236
towards Z. Sim internally manages two preimages on its
own, which are indistinguishable from to those chosen by B
in the hybrid world: for an honest B, Sim draws these two
preimages from the same distribution as in the real world; for
a corrupted B, Sim learns the chosen preimages throughout the
execution. Additionally, Sim internally-simulates H and Gmbp,
and interacts with Frmh through leakage and inﬂuence ports.
The existence of these simulators shows Lemma 1 applies
to the hybrid world as well, meaning it details the possible
valid redeeming transactions of a relaxed MAD-HTLC.
Recall
the relaxed version considers only the vPreImg
and vSig predicates while disregarding vTime and transactions
conﬂicts, which we now move to consider.
B. MAD-HTLC Game
The MAD-HTLC construction within the blockchain sys-
tem gives rise to a game: the participants are A, B and the
system miners; their utilities are their tokens; and the action
space is detailed by Lemma 1 while considering the timeout
constraints and transaction conﬂicts.
Note that Lemma 1 considers party M representing any
system miner, while the upcoming analysis considers all the
miners and their individual rewards.
The MAD-HTLC game begins when the MH-Dep and MH-
Col contracts are initiated in some block bj. The game, which
we denote by ΓMH, comprises T rounds, representing the
creation of blocks bj+1, ..., bj+T . Each round begins with A
and B publishing redeeming transactions, followed by a miner
creating a block including a transaction of her choice.
A and B’s strategies are their choices of published trans-
actions – which transactions to publish, when, and with what
fee. Miner strategies are the choices of which transaction to
include in a block if they are chosen to create one.
To accommodate for the stochastic nature of the game [110]
we consider entity utilities as the expected number of tokens
they own at game conclusion, i.e., after the creation of T
blocks. A and B’s utilities depend on the inclusion of their
transactions and their offered fees, and miner utilities on their
transaction inclusion choices.
We present
the game details (§V-B1) and the suitable
solution concept (§V-B2).
1) Game Details: The game progresses in rounds, where
each round comprises two steps. First, A and B alternately
publish transactions, until neither wishes to publish any more.
Note that all published transactions of the current and
previous rounds are in the mempool. Since miners prefer
higher fees, for the analysis we ignore any transaction tx if
there is another transaction tx’ such that both were created by
the same entity, both redeem the same contracts, and tx’ pays
a higher fee than tx or arrives before tx.
Tokens are discrete, hence there is a ﬁnite number of fees A
and B may offer, meaning the publication step is ﬁnite.
Then, a single miner is picked at random proportionally
to her mining power and gets to create a block including a
transaction of her choice, receiving its transaction fees. She
can also create a new transaction and include it in her block.
Figure 1: ΓMH subgames.
a) Subgames: The dynamic and turn-altering nature of
the game allows us to deﬁne subgames, representing sufﬁxes
of ΓMH. For any k ∈ [1, T ] we refer to the game starting just
before round k as the k’th subgame (Fig. 1).
Note that as miners create blocks and conﬁrm transactions,
the system state, including the state of MAD-HTLC, changes.
Speciﬁcally, if the MH-Dep is already redeemed, future blocks
do not allow inclusion of conﬂicting transactions that redeem
the MH-Dep as well.
Hence, when considering MAD-HTLC states we distinguish
whether MH-Dep is redeemable or irredeemable, which we
denote by red and irred, respectively. We also note that MH-
Col cannot be redeemed until the very last T ’th subgame.
Consequently, each subgame k ∈ [1, T ] is deﬁned by the
number of remaining blocks to be created k, and the MH-
Dep state s ∈ {red, irred}. We denote such a subgame
by ΓMH (k, s).
We use · to denote sets of subgames, e.g., ΓMH (·, red)
denotes the set of subgames where the contract state s is red.
We refer to ΓMH (T,·) as the ﬁnal subgames, as once played,
the full game ΓMH is complete. We refer to all other subgames
as non-ﬁnal.
The game begins when there are T blocks to be created, A
and B did not publish any transactions, and the MH-Dep is
redeemable. Thus, the initial, complete game is ΓMH (1, red).
Once the ﬁrst round of a non-ﬁnal subgame is complete,
the system transitions to the subsequent subgame.
dep