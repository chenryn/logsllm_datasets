### Method `goToFirstLevel` in Smali and Java

**Smali Code:**
```smali
.method public goToFirstLevel()V
    .registers 2
    .prologue
    .line 175
    const/4 v0, 0x0
    iput v0, p0, Lorg/jfedor/frozenbubble/LevelManager;->currentLevel:I
    .line 176
    return-void
.end method
```

**Equivalent Java Code:**
```java
public class LevelManager {
    private int currentLevel;

    public void goToFirstLevel() {
        currentLevel = 0;
    }
}
```

### Constants to Registers in Smali

**Constants to Registers:**
- `const/4`, `const/16`, `const`, `const/high16`
- `const-wide/16`, `const-wide/32`, `const-wide`, `const-wide/high16`
- `const-string`, `const-class`

### Modifying the Constructor of `GameView::GameThread`

**Smali Code:**
```smali
.class Lorg/jfedor/frozenbubble/GameView$GameThread;
.super Ljava/lang/Thread;
.annotation system Ldalvik/annotation/InnerClass;
    accessFlags = 0x0
    name = "GameThread"
.end annotation

# Direct methods
.method public constructor (Lorg/jfedor/frozenbubble/GameView;Landroid/view/SurfaceHolder;[BI)V
    .locals 0
    .prologue
    .line 1
    invoke-direct {p0}, Ljava/lang/Thread;-><init>()V
    .line 2
    iput-object p1, p0, Lorg/jfedor/frozenbubble/GameView$GameThread;->gameView:Lorg/jfedor/frozenbubble/GameView;
    iput-object p2, p0, Lorg/jfedor/frozenbubble/GameView$GameThread;->surfaceHolder:Landroid/view/SurfaceHolder;
    iput-object p3, p0, Lorg/jfedor/frozenbubble/GameView$GameThread;->buffer:[B
    iput p4, p0, Lorg/jfedor/frozenbubble/GameView$GameThread;->frameCount:I
    return-void
.end method
```

**Equivalent Java Code:**
```java
class GameView extends SurfaceView implements SurfaceHolder.Callback {
    class GameThread extends Thread {
        private GameView gameView;
        private SurfaceHolder surfaceHolder;
        private byte[] buffer;
        private int frameCount;

        public GameThread(GameView gameView, SurfaceHolder surfaceHolder, byte[] buffer, int frameCount) {
            this.gameView = gameView;
            this.surfaceHolder = surfaceHolder;
            this.buffer = buffer;
            this.frameCount = frameCount;
        }
    }
}
```

### Implementation of `GameView::GameThread`

**Smali Code:**
```smali
const-string v3, "level"
const/4 v4, 0x0
move-object/from16 v0, v25
move-object v1, v3
move v2, v4
invoke-interface {v0, v1, v2}, Landroid/content/SharedPreferences;->getInt(Ljava/lang/String;I)I
move-result p4
new-instance v3, Lorg/jfedor/frozenbubble/LevelManager;
move-object v0, v3
move-object/from16 v1, v22
move/from16 v2, p4
invoke-direct {v0, v1, v2}, Lorg/jfedor/frozenbubble/LevelManager;-><init>([BI)V
```

**Explanation:**
- The code retrieves an integer value from `SharedPreferences` with the key "level".
- It then creates a new instance of `LevelManager` and passes the retrieved value and a byte array to its constructor.

### DEX Optimizations

**Overview:**
- Before execution, DEX files are optimized.
- This process, known as `dexopt`, occurs before the first execution of code from the DEX file.
- The `dexopt` process loads the DEX file, replaces certain instructions with their optimized counterparts, and writes the resulting optimized DEX (ODEX) file into the `/data/dalvik-cache` directory.

**Example Optimizations:**
- **Virtual Method Calls:**
  - `invoke-virtual` → `invoke-virtual-quick`
  - Example:
    ```smali
    Before: invoke-virtual {v1,v2}, java/lang/StringBuilder/append;append(Ljava/lang/String;)Ljava/lang/StringBuilder;
    After: invoke-virtual-quick {v1,v2}, vtable #0x3b
    ```

- **Frequently Used Methods:**
  - `invoke-virtual/direct/static` → `execute-inline`
  - Example:
    ```smali
    Before: invoke-virtual {v2}, java/lang/String/length
    After: execute-inline {v2}, inline #0x4
    ```

- **Instance Fields:**
  - `iget/iput` → `iget/iput-quick`
  - Example:
    ```smali
    Before: iget-object v3, v5, android/app/Activity.mComponent
    After: iget-object-quick v3, v5, [obj+0x28]
    ```

### JNI Specificities for Reversing

**Steps:**
1. Get the function signature in Java.
2. Use IDA to generate a TIL file from `jni.h`.
3. Assign the structure to the right variable.
4. See function calls directly.
5. Do the same in Hex-Rays.

### Further Considerations

- **ProGuard:** A tool for optimizing, obfuscating, and shrinking Android applications.
- **Google's License Verification Library (LVL):** Used for license verification in Android applications.
  - Example ProGuard rule:
    ```proguard
    -keep class com.android.vending.licensing.ILicensingService
    ```

For more information on optimizing and obfuscating Android applications, refer to:
- [Optimizing, Obfuscating, and Shrinking your Android Applications with ProGuard](http://www.androidengineer.com/2010/07/optimizing-obfuscating-and-shrinking.html)
- [0xLab.org](http://0xlab.org)