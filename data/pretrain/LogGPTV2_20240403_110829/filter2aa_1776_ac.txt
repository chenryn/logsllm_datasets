.method public goToFirstLevel()V
    .registers 2
    .prologue
    .line 175
    const/4 v0, 0x0
    iput v0, p0,
 Lorg/jfedor/frozenbubble/LevelManager;­>currentLevel:I
    .line 176
    return­void
.end method
Equals to Java:
currentLevel = 0;
Equals to Java:
currentLevel = 0;
Equals to Java:
public class LevelManager {
    ...
    public void goToFirstLevel() {
         currentLevel = 0;
    }
    ...
}
Equals to Java:
public class LevelManager {
    ...
    public void goToFirstLevel() {
         currentLevel = 0;
    }
    ...
}
Constants to registers: const/4, const/16, const, const/high16, 
const-wide/16, const-wide/32, const-wide, const-wide/high16,
const-string, const-class
Constants to registers: const/4, const/16, const, const/high16, 
const-wide/16, const-wide/32, const-wide, const-wide/high16,
const-string, const-class
Modify constructor of 
GameView::GameThread()
• Look up output in GameView$GameThread.smali
.class Lorg/jfedor/frozenbubble/GameView$GameThread;
.super Ljava/lang/Thread;
.annotation system Ldalvik/annotation/InnerClass;
    accessFlags = 0x0
    name = "GameThread"
.end annotation
# direct methods
.method public constructor 
(Lorg/jfedor/frozenbubble/GameView;Landroid/view/SurfaceHol
der;[BI)V
Modify constructor of 
GameView::GameThread()
• Look up output in GameView$GameThread.smali
# direct methods
.method public constructor 
(Lorg/jfedor/frozenbubble/GameView;Landroid/view/SurfaceHol
der;[BI)V
Equals to Java:
class GameView ??? {
    class GameThread extends Thread {
        public GameThread(SurfaceHolder s,
                          byte[] b,
                          int I) {
Equals to Java:
class GameView ??? {
    class GameThread extends Thread {
        public GameThread(SurfaceHolder s,
                          byte[] b,
                          int I) {
 GameView.smali
• Look up output in GameView.smali
.class Lorg/jfedor/frozenbubble/GameView;
.super Landroid/view/SurfaceView;
# interfaces
.implements Landroid/view/SurfaceHolder$Callback;
• Look up output in GameView$GameThread.smali
.class Lorg/jfedor/frozenbubble/GameView$GameThread;
.super Ljava/lang/Thread;
Equals to Java:
class GameView extends SurfaceView
               implements SurfaceHolder.Callback {
  class GameThread extends Thread {
Equals to Java:
class GameView extends SurfaceView
               implements SurfaceHolder.Callback {
  class GameThread extends Thread {
Implementation of GameView::GameThread()
• Check GameView::public GameThread(SurfaceHolder s,  byte[] b, int I)
const­string v3, "level"
const/4 v4, 0x0
move­object/from16 v0, v25
move­object v1, v3
move v2, v4
invoke­interface {v0, v1, v2}, 
Landroid/content/SharedPreferences;­
>getInt(Ljava/lang/String;I)I
move­result p4
new­instance v3, Lorg/jfedor/frozenbubble/LevelManager;
move­object v0, v3
move­object/from16 v1, v22
move/from16 v2, p4 invoke­direct {v0, v1, v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>([BI)V
Invoke constructor of LevelManager
Invoke constructor of LevelManager
Register v1 related code
const­string v3, "level"
const/4 v4, 0x0
move­object/from16 v0, v25
move­object v1, v3
move v2, v4
invoke­interface {v0, v1, v2}, 
Landroid/content/SharedPreferences;­
>getInt(Ljava/lang/String;I)I
move­result p4
new­instance v3, 
Lorg/jfedor/frozenbubble/LevelManager;
move­object v0, v3
move­object/from16 v1, v22
move/from16 v2, p4
invoke­direct {v0, v1, v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>([BI)V
Register v2 related code
const­string v3, "level"
const/4 v4, 0x0
move­object/from16 v0, v25
move­object v1, v3
move v2, v4
invoke­interface {v0, v1, v2}, 
Landroid/content/SharedPreferences;­
>getInt(Ljava/lang/String;I)I
move­result p4
new­instance v3, 
Lorg/jfedor/frozenbubble/LevelManager;
move­object v0, v3
move­object/from16 v1, v22
move/from16 v2, p4
invoke­direct {v0, v1, v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>([BI)V
“0x0” is passed to LevelManager's
constructor as parameter
“0x0” is passed to LevelManager's
constructor as parameter
Recall the grep results
smali­src$ grep "\.method" 
org/jfedor/frozenbubble/LevelManager.smali
.method public constructor ([BI)V
.method private getLevel(Ljava/lang/String;)[[B
.method public getCurrentLevel()[[B
.method public getLevelIndex()I
.method public goToFirstLevel()V
.method public goToNextLevel()V
.method public restoreState(Landroid/os/Bundle;)V
.method public saveState(Landroid/os/Bundle;)V
Equals to Java:
public class LevelManager {
    ...
    public LevelManager(byte[] b, int i)
Equals to Java:
public class LevelManager {
    ...
    public LevelManager(byte[] b, int i)
Register v2 related code
const­string v3, "level"
const/4 v4, 0x0
move­object/from16 v0, v25
move­object v1, v3
move v2, v4
invoke­interface {v0, v1, v2}, 
Landroid/content/SharedPreferences;­
>getInt(Ljava/lang/String;I)I
move­result p4
new­instance v3, 
Lorg/jfedor/frozenbubble/LevelManager;
move­object v0, v3
move­object/from16 v1, v22
move/from16 v2, p4
invoke­direct {v0, v1, v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>([BI)V
p4 reserve the result after method invocation.
p4 reserve the result after method invocation.
Therefore, v2 has return value of method
android.content.Shared.Preference.getInt()
Therefore, v2 has return value of method
android.content.Shared.Preference.getInt()
Modify!!!
• Check GameView::public GameThread(SurfaceHolder s,  byte[] b, int I)
const­string v3, "level"
const/4 v4, 0x0
move­object/from16 v0, v25
move­object v1, v3
move v2, v4
invoke­interface {v0, v1, v2}, 
Landroid/content/SharedPreferences;­>getInt(Ljava/lang/String;I)I
move­result p4
new­instance v3, Lorg/jfedor/frozenbubble/LevelManager;
move­object v0, v3
move­object/from16 v1, v22
move/from16 v2, p4
invoke­direct {v0, v1, v2}, 
Lorg/jfedor/frozenbubble/LevelManager;­>([BI)V
Remove!
Remove!
Change value from 0x0 to 0x4
Real World Tasks
Tasks
• ODEX (Optimized DEX)
– platform-specific optimizations:
• specific bytecode
• vtables for methods
• offsets for attributes
• method inlining
• JNI
– JNIEnv
• Native Activity
• Key signing
DEX Optimizations
• Before execution, DEX files are optimized.
– Normally it happens before the first execution of code from the 
DEX file
– Combined with the bytecode verification
– In case of DEX files from APKs, when the application is launched 
for the first time.
• Process
– The dexopt process (which is actually a backdoor of Dalvik) loads 
the DEX, replaces certain instructions with their optimized 
counterparts
– Then writes the resulting optimized DEX (ODEX) file into the 
/data/dalvik-cache directory
– It is assumed that the optimized DEX file will be executed on the 
same VM that optimized it. ODEX files are NOT portable across 
VMs.
dexopt: Instruction Rewritten
• Virtual (non-private, non-constructor, non-static methods)
invoke-virtual  → invoke-virtual-quick 
Before: 
invoke-virtual 
{v1,v2},java/lang/StringBuilder/append;append(Ljava/lang/String;)Ljava/lang/StringBuilder;
After: 
invoke-virtual-quick {v1,v2},vtable #0x3b
• Frequently used methods
invoke-virtual/direct/static  → execute-inline 
– Before:
invoke-virtual {v2},java/lang/String/length
– After:
execute-inline {v2},inline #0x4
• instance fields: iget/iput  → iget/iput 
– Before: iget-object v3,v5,android/app/Activity.mComponent
–  After: iget-object-quick v3,v5,[obj+0x28]
Meaning of DEX Optimizations
• Sets byte ordering and structure alignment
• Aligns the member variables to 32-bits / 64-bits
• boundary (the structures in the DEX/ODEX file itself 
are 32-bit aligned)
• Significant optimizations because of the elimination 
of symbolic field/method lookup at runtime.
• Aid of Just-In-Time compiler
JNI specificities can ease reversing
•1- get the function signature in Java
•2- use IDA to generate a TIL file from jni.h
•3- assign the structure to the right variable
•4- see function calls directly
•5- do the same in Hex-Rays
JNI specificities can ease reversing
•1- get the function signature in Java
•2- use IDA to generate a TIL file from jni.h
•3- assign the structure to the right variable
•4- see function calls directly
•5- do the same in Hex-Rays
Further Considerations
•
Optimizing, Obfuscating, and Shrinking your Android Applications with ProGuard
http://www.androidengineer.com/2010/07/optimizing-obfuscating-and-shrinking.html
• Missions:
– Obfuscation
– Optimizing
• ProGuard
• Google's License Verification Library (LVL)
-keep class com.android.vending.licensing.ILicensingService
http://0xlab.org