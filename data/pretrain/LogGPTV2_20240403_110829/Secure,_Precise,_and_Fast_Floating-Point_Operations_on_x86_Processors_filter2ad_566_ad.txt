step approach for demonstrating the timing channel de-
fense for Escort’s elementary operations: (1) We char-
acterize the performance of Escort’s elementary opera-
tions using a speciﬁc, ﬁxed ﬂoating-point value (e.g. 1.0),
(2) using one value from each of the six different types
of values (zero, normal, subnormal, +∞, -∞, and not-
a-number), we show that our solution exhibits negligi-
ble variance in running time, and (3) to demonstrate that
each of the six values in the previous experiment is rep-
resentative of the class to which it belongs, we generate
10 million normal, subnormal, and not-a-number (NaN)
USENIX Association  
25th USENIX Security Symposium  79
80  25th USENIX Security Symposium 
USENIX Association
values,andshowthatthevarianceinrunningtimeamongeachsetof10millionvaluesisnegligible.Ourkeyﬁnd-ingsarethatEscort’soperationsruninﬁxedtime,arefast,andthattheirperformanceiscloselytiedtotheper-formanceofthehardware’ssubnormaloperations.Figure10:Comparisonofrunningtimesofelementaryoperations.spidentiﬁesEscort’ssingle-precisionopera-tions,dpidentiﬁesEscort’sdouble-precisionoperations,andﬁxidentiﬁesFTFP’sﬁxed-pointoperations.Num-bersatthetopofthebarsshowthetotalcyclecount.WeseethatEscort’sexecutiontimesaredominatedbythecostofsubnormaloperations,andweseethatFTFP’soverheadsaresigniﬁcantlygreaterthanEscort’s.Figure10comparestherunningtimesofelementaryoperationsofEscortandofprevioussolutions(FTFP).First,weobservethattherunningtimesofEscort’ssingle-anddouble-precisionoperationsareanorder-of-magnitudelowerthanthoseofFTFP’sﬁxed-precisionoperations.Second,Escort’srunningtimeisalmosten-tirelydominatedbytheprocessor’soperationonsubnor-malnumbers.Third,conversionbetweenﬁxed-pointandﬂoating-pointtakesanon-trivialamountoftime,furtherincreasingtheoverheadofFTFP’soperations.Overall,Escortelementaryoperationsareabout16×fasterthanFTFP’s.Table4showsthevariationinrunningtimeofele-mentaryoperationsacrosssixdifferenttypesofinputs(zero,normalvalue,subnormalvalue,+∞,−∞,andnot-a-numbervalue)andcomparesitwiththevariationofSSE(native)operations.WhileSSEoperationsexhibithighvariation(themaximumobservedstandarddevia-tionis176%ofthemean),Escort’soperationsshowneg-ligiblevariationacrossdifferentinputtypes.Finally,wemeasureEscort’srunningtimefor10mil-lionrandomnormal,subnormal,andnot-a-numberval-ues.Weobservethatthestandarddeviationofthesemea-surements,showninTable5,isextremelylow(atmostFunctionEscortNative(SSE)add-sp00add-dp00sub-sp00sub-dp00mul-sp049.2(175%)mul-dp049.2(175%)div-sp0.66(0.4%)65.67(163%)div-dp1.66(0.8%)69.08(164%)sqrt-sp1.49(0.8%)62.7(170%)sqrt-dp2.98(1.5%)66.87(169%)upcast040.99(178%)Table4:Comparisonofstandarddeviationofrunningtimesofelementaryoperationsacrosssixtypesofvalues(zero,normal,subnormal,+∞,−∞,andnot-a-number).Numbersinparenthesisshowthestandarddeviationasapercentageofthemean.The-spsufﬁxidentiﬁessingle-precisionoperationswhilethe-dpsufﬁxidenti-ﬁesdouble-precisionoperations.ComparedtoSSEop-erations,Escortexhibitsnegligiblevariationinrunningtimes.3.1%ofthemean).Wethusconcludethatourchosenvaluesforeachofthesixclassesfaithfullyrepresenttheirclass.02,0004,0006,0008,00010,00012,00014,000ﬂoorceilfabslog10loglog2sincostanexppowProcessor CyclesFTFPEscort-SPEscort-DPFigure11:Comparisonofrunningtimesofcommonlyusedhigher-levelfunctions.Errorbars(visibleforonlyafewfunctions)showthemaximumvariationinrunningtimefordifferentkindsofinputvalues.5.3TimingAssuranceofHigher-LevelOp-erationsUsingdifferenttypesofﬂoating-pointvalues(zero,nor-mal,subnormal,+∞,−∞,andnot-a-number),Figure11comparestheperformanceofmostofthecommonlyusedFn.
add-sp
add-dp
sub-sp
sub-dp
mul-sp
mul-dp
div-sp
div-dp
sqrt-sp
sqrt-dp
upcast
NaN
0.21 (3.1%)
0.21 (3.0%)
0.18 (2.6%)
0.19 (2.7%)
0.98 (0.7%)
0.90 (0.6%)
1.22 (0.6%)
1.39 (0.7%)
1.15 (0.6%)
1.29 (0.7%)
1.03 (0.9%)
Normal
0.21 (2.9%)
0.20 (2.9%)
0.19 (2.7%)
0.19 (2.7%)
0.94 (0.7%)
1.04 (0.7%)
1.27 (0.7%)
1.37 (0.6%)
1.13 (0.6%)
1.41 (0.7%)
0.89 (0.8%)
Subnormal
0.19 (2.7%)
0.21 (3.0%)
0.20 (2.9%)
0.19 (2.7%)
1.05 (0.7%)
1.02 (0.7%)
1.23 (0.6%)
1.17 (0.6%)
1.14 (0.6%)
1.33 (0.7%)
0.95 (0.8%)
Table 5: Standard deviation of 10 million measurements
for each type of value (normal, subnormal, and not-a-
number). All standard deviation values are within 3.1%
of the mean. Furthermore, the mean of these 10,000,000
measurements is always within 2.7% of the representa-
tive measurement.
single- and double-precision higher-level operations6.
Overall Escort’s higher-level operations are about 2×
slower than their corresponding FTFP operation, which
is the price for closing side channels that FTFP does not
close.
Figure 12: Performance breakdown of Escort’s com-
monly used higher-level functions. The baseline (non-
secure) execution and exception handling together cost
less than 250 cycles for each function, making them too
small to be clearly visible in the above plot.
Figure 12 shows the breakdown of the performance
of commonly used higher-level functions. We observe
that the performance of most higher-level functions is
dominated by the latency of operations on subnormal
operands, which is closely tied to the performance of the
underlying hardware. A handful of routines (exp10(),
6We exclude the exp2() (6,617 cycles), exp10() (14,910 cycles),
exp2f() (1,693 cycles), and exp10f() (9,134 cycles) from Figure 11
because FTFP does not implement these operations.
exp10f(), exp2(), and exp2f()) use lookup tables
that are susceptible to address-trace-based side-channel
information leaks, so the code transformed by Escort
sweeps over these lookup tables for each access to the
table. Finally, we see that the cost of control ﬂow ob-
fuscation (i.e. the cost of executing all instructions in the
program) contributes the least to the total overhead.
5.4 Side-Channel Defense in Firefox
We now evaluate Escort’s defense against the timing
channel attack by Andrysco et al. [3] on the Firefox web
browser. The attack reconstructs a two-color image in-
side a victim web page using only the timing side chan-
nel in ﬂoating-point operations. The attack convolves the
given secret image with a matrix of subnormal values.
The convolution step for each pixel is timed using high
resolution Javascript timers. By comparing the measured
time to a threshold, each pixel is classiﬁed as either black
or white, effectively reconstructing the secret image.
We integrate Escort into Firefox’s convolution code7
and re-run the timing attack. The results (see Figure 13c)
show that Escort successfully disables the timing attack.
5.5 Control- and Data-Flow Assurance
We now show that Escort’s operations do not leak infor-
mation through control ﬂow or data ﬂow. We ﬁrst use
inference rules over the LLVM IR to demonstrate non-
interference between secret inputs and digital side chan-
nels. We run a machine-learning attack on Escort and
demonstrate that Escort successfully disables the attack.
5.5.1 Non-Interference Using Inference Rules
Since Escort’s elementary operations are small and
simple—they are implemented using fewer than 15 lines
of assembly code, they do not access memory, and they
do not contain branch instructions—they are easily veri-
ﬁed for non-interference between secret inputs and digi-
tal side channels. Using an LLVM pass that applies the
inference rules from Table 6, tracking labels that can be
either L (for low-context i.e. public information) or H (for
high-context i.e. private information), we verify that Es-
cort’s higher-level operations close digital side channels.
This compiler pass initializes all function arguments with
the label H, since arguments represent secret inputs.
Inference rules for various instructions dictate updates
to the labels. The environment Γ tracks the label of each
pointer and each address. The Escort compiler tags load
7Speciﬁcally, we replace three single-precision multiplication oper-
ations with invocations to the equivalent Escort function. All source
code changes are limited to the code in the ConvolvePixel() function
in SVGFEConvolveMatrixElement.cpp.
USENIX Association  
25th USENIX Security Symposium  81
05,00010,00015,000fabsffabsceilﬂoorﬂoorfceilflogflog2flog10fexp2flogexpflog2log10expexp2powfpowtanexp10fcossintanfcosfsinfexp10MEANProcessor Cyclesbaseline (non-secure) executioncontrol ﬂow obfuscationdata access obfuscationsubnormal operands82  25th USENIX Security Symposium 
USENIX Association
(a)Originalimage.(b)Reconstructedimageusingtimingattack.(c)Reconstructedimagesin3independent,consec-utiveexperimentsafterpatchingFirefoxwithEscort.Figure13:ResultsofattackanddefenseonavulnerableFirefoxbrowserusingtiming-channelinformationleaksarisingfromtheuseofsubnormalﬂoating-pointnumbers.andstoreinstructionsassecretifthepointeristainted,orpublicotherwise.Unlikeapublicloadorstorein-struction,asecretloadorstoreinstructionisallowedtouseataintedpointersinceEscortgeneratescorrespond-ingloadsandstorestoallstatically-determinedcandi-datevaluesinthepoints-toset.Thesanitizationrulere-setsthevalue’slabeltoLandisrequiredtosuppressfalsealarmsfromEscort’sloopconditiontransformation.Es-cort’stransformedcodeincludesinstructionswithspe-cialLLVMmetadatathattriggerthesanitizationrule.Duringveriﬁcation,thecompilerpassiteratesovereachinstructionandcheckswhetheraruleisapplica-bleusingtherule’santecedents(thestatementabovethehorizontalline);ifso,itupdatesitslocalstateaspertherule’sconsequent(thestatementbelowthehorizon-talline).Ifnoapplicableruleisfound,thenthecom-pilerpassthrowsanerror.ThecompilerpassprocessesthecodeforEscort’s112higher-leveloperationswithoutthrowingerrors.5.5.2DefenseAgainstMachine-LearningAttackWeusetheTensorFlow[1]librarytodesignamachine-learningclassiﬁer,whichweusetolaunchaside-channelattackontheexecutionoftheexpf()function,wheretheinputtotheexpf()functionisassumedtobesecret.Usingthreedistinctinputs,werunthisattackontheim-plementationsinthe(non-secure)MuslClibraryandinthe(secure)Escortlibrary.WeﬁrstusethePindynamicbinaryinstrumentationtool[19]togatherthefullinstruc-tionaddresstracesofbothexpf()implementations8.WetraintheTensorFlowmachine-learningclassiﬁerbyfeed-ingtheinstructionaddresstracestotheclassiﬁer,asso-ciatingeachtracewiththesecretinputtoexpf().WeusecrossentropyasthecostfunctionforTensorFlow’strainingphase.Inthesubsequenttestingphase,weran-domlyselectoneofthecollectedaddresstracesandasktheclassiﬁertopredictthesecretinputvalue.WeﬁndthatfortheMuslimplementation,theclassi-ﬁerisaccuratelyabletopredictthecorrectsecretvaluefromtheaddresstrace.Ontheotherhand,fortheEscort8Usingthemd5sumprogram,weobservethatEscort’saddresstracesforallthreeinputsareidentical.implementation,theclassiﬁer’saccuracydropsto33%,whichisnobetterthanrandomlyguessingoneofthethreesecretinputvalues.6PrecisionEvaluationWeexaminetheprecisionofEscortandFTFPbycom-paringEscort’sandFTFP’sresultswiththoseproducedbyastandardClibrary.6.1ComparisonUsingUnitofLeastPreci-sionMethodology.Weadoptanempiricalapproachtoesti-mateprecisionintermsofUnitofLeastPrecision(ULP),sinceformalderivationofmaximumULPdifferencere-quiresanintricateunderstandingoftheoremproversandﬂoating-pointalgorithms.Werunvariousﬂoating-pointoperationson10,000randomlygeneratedpairs(usingdrand48())ofﬂoating-pointnumbersbetweenzeroandone.Forelementaryoperations,wecomparetheoutputsofEscortandFTFPwiththeoutputsofnativex86in-structions.Forallotheroperations,wecomparetheout-putsofEscortandFTFPwiththeoutputsproducedbycorrespondingfunctionfromtheMuslClibrary.Results.WeobservethatEscort’sresultsareidenti-caltotheresultsproducedbythereferenceimplemen-tations,i.e.thenative(x86)instructionsandtheMuslClibrary.Moreprecisely,theULPdifferencebetweenEscort’sresultsandreferenceimplementation’sresultsiszero.Ontheotherhand,FTFP,whichcomputesarithmeticinﬁxed-pointprecision,producesoutputthatdifferssubstantiallyfromtheoutputofMusl’sdouble-precisionfunctions(seeTable7).TheIEEE754standardrequiresthataddition,subtraction,multiplication,divi-sion,andsquarerootoperationsarecomputedwithULPdifferenceofatmost0.5.Well-knownlibrariescomputeresultsformosthigher-leveloperationswithin1ULP.T-PUBLIC-LOAD
Γ(ptr) = L
P = ptset(ptr)
Γ(addr)
m = max
addr∈P
Γ(cid:30) = Γ[val (cid:29)→ m]
T-PUBLIC-STORE
T-SECRET-LOAD
T-SECRET-STORE
T-BRANCH
T-OTHER
T-COMPOSITION
T-SANITIZER
Γ(ptr) = L
Γ (cid:27) val := public-load ptr : Γ(cid:30)
∀ addr ∈ ptset(p)
m = max(Γ(val),Γ(addr))
Γ(cid:30) = Γ[addr (cid:29)→ m]
Γ (cid:27) public-store ptr, val : Γ(cid:30)
Γ(cid:30) = Γ[val (cid:29)→ H]
Γ (cid:27) val := secret-load ptr : Γ(cid:30)
∀ addr ∈ ptset(p)
Γ(cid:30) = Γ[addr (cid:29)→ H]
Γ (cid:27) secret-store ptr, val : Γ(cid:30)
Γ(cond) = L
Γ (cid:27) br cond,block1,block2 : Γ
Γ(cid:30) = Γ[x (cid:29)→ Γ(y)]
Γ (cid:27) x:=y : Γ(cid:30)
Γ (cid:27) S1 : Γ(cid:30), Γ(cid:30) (cid:27) S2 : Γ(cid:30)(cid:30)
Γ (cid:27) S1;S2 : Γ(cid:30)(cid:30)
Γ(cid:30) = Γ[x (cid:29)→ L]
Γ (cid:27) S(x) : Γ(cid:30)
Function Min.
16
1,312
317
829
562
0
0
1,698
262
981
132
1,316
2,166
717
522
352
add
sub
mul
div
sqrt
ﬂoor
ceil
log
log2
log10
exp
sin
cos
tan
pow
fabs
Median
1,743,272
6,026,976
8,587,410
5,834,095
2,815,331
0
0
5,908,547
5,812,840
10,105,199
1,409,624
4,173,786
2,241,360
5,576,540
3,425,870
3,129,984
Max.
210,125,824
84,089,503,744
112,134,679,849
30,899,033,427
21,257,836,468
0
0
2,705,277,8104
13,890,632,367
40,631,590,323
6,066,894
40,138,955,131
10,127,702
40,126,401,802
26,876,068,127
40,134,770,688
Table 7: Floating-point difference for 10,000 operations
on random inputs in terms of Unit of Least Precision
(ULP) in FTFP versus Musl C library. Since we ob-
serve zero ULP distance between Escort’s results and
Musl’s results, this table omits Escort’s results.
103
103
10% 11%
Table 6: Inference rules for verifying the security of Es-
cort’s higher-level operations.
Table 8: Distribution of differences in answers produced
by MINPACK-FTFP and MINPACK-C. In all, 321 values
differ between the outputs of the two programs.
6.2 Comparison of Program Output
Methodology. Since differences in program outputs
provide an intuitive understanding of the error intro-
duced by approximate arithmetic operations, we com-
pare the output of the test suite of Minpack9, a li-
brary for solving non-linear equations and non-linear
least squares problems. We generate three variants of
Minpack: MINPACK-C uses the standard GNU C li-
brary, MINPACK-ESCORT uses the Escort library, and
MINPACK-FTFP uses the FTFP library. We run the 29
programs in Minpack’s test suite and compare the out-
puts produced by the three program variants.
Results. We observe that MINPACK-ESCORT produces
output that is identical to MINPACK-C’s output. We also
observe that all outputs of MINPACK-FTFP differ from
MINPACK-C. Speciﬁcally, 321 values differ between the
outputs of MINPACK-FTFP and MINPACK-C. We ana-
9https://github.com/devernay/cminpack
lyze all 321 differences between MINPACK-FTFP and
MINPACK-C by classifying them into the following ﬁve
categories: (1) smaller than 10−5, (2) between 10−5 and
10−3, (3) between 10−3 and 100, (4) between 100 and
103, and (5) larger than 103. As seen in Table 8, almost
half of the differences (49%) are extremely small (less
than 10−5), possibly arising from relatively small dif-
ferences between ﬁxed-point and ﬂoating-point calcula-
tions. However, we hypothesize that differences amplify
from propagation, since nearly 42% of the differences
are larger than 10−3.
7 Performance Evaluation
We now evaluate the end-to-end application performance
impact of Escort’s ﬂoating-point library and Escort’s
control ﬂow obfuscation.
USENIX Association  
25th USENIX Security Symposium  83
Application
Escort
Overhead
433.milc
444.namd
447.dealII
450.soplex
453.povray
470.lbm
480.sphinx3
MEAN
29.33×
57.32×
20.31×
4.74×
82.53×
56.19×
52.46×
32.63×
(geo. mean)
Static (LLVM)
Floating-Point
Instruction
Count
2,791
9,647
21,963
4,177
25,671
711
629
9,370
(arith. mean)
Table 9: Overhead of SPEC-ESCORT (SPECfp2006
using Escort operations)
to SPEC-LIBC
(SPECfp2006 using libc).
relative