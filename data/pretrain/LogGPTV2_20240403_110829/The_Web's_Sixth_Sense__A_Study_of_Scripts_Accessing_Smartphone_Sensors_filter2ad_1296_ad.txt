### Raw Sensor Data and Script Identification

The raw sensor data was not captured through our sensor spoofing mechanism. We identified this issue by manually debugging the script on a actual smartphone using the USB debugging features of the Chrome DevTools. Our analysis revealed that `doubleverify.com` scripts were loaded on 517 websites, with 7 of these appearing in the Alexa top 1000 sites (in our US1 dataset). Since `doubleverify.com` evaluates ad impressions, the presence of these scripts is dependent on the ads served on a website, leading to variations across different crawls. For example, in the US2 dataset, we found 509 sites loading the `doubleverify.com` script. The combined datasets resulted in 881 unique sites loading the script, with 145 sites being common (Jaccard index 0.16). In the EU1 dataset (European crawl), `doubleverify.com` was not present on any of the 100K sites, suggesting that script loading may depend on the visitor's location.

Some sensor reading scripts are served from the first party’s domain, making it more challenging to attribute them to specific providers. For instance, a highly obfuscated script on popular sites like `homedepot.com` and `staples.com` is always served on the `/bm/async.js` path under the first-party domain (e.g., `m.staples.com/bm/async.js`). This script sends encoded sensor data via a POST request to the endpoint `bm/_data` on the first-party site. A code snippet is provided in Appendix B (Listing 4). The prevalence of these scripts is site-dependent rather than ad-dependent. In the US1 dataset, we found 173 sites loading such scripts, with 12 ranked in the Alexa top 1000 sites. In the US2 and EU1 datasets, 140 and 158 sites, respectively, loaded these scripts.

### Efficacy of Countermeasures

#### 6.1 Fingerprinting Scripts

We examined the overlap between scripts accessing sensor APIs and those performing fingerprinting. To detect fingerprinting scripts, we followed methodologies from existing literature [1, 31], as listed in Table 2. Table 8 shows the percentage of sensor-accessing scripts that also engage in fingerprinting, as captured by the features described in Section 3.4. For example, 62.7% of scripts that access motion sensors also perform some form of browser fingerprinting.

**Table 8: Percentage of sensor-accessing scripts that also engage in fingerprinting. All columns except ‘Total’ are given as percentages. The ‘Total’ column shows the number of distinct script URLs that access a certain sensor.**

| Canvas FP | Motion | Orientation | Proximity | Light | Total |
|-----------|--------|-------------|-----------|-------|-------|
| 56.7%     | 62.7%  | 36.2%       | 19.5%     | 2.1%  | 501   |
| 0.2%      | 3.4%   | 0.0%        | 1.2%      | 19.8% | 650   |
| 5.7%      | 47.9%  | 56.1%       | 6.8%      | 6.2%  | 96    |
| 0.0%      | 15.9%  | 5.6%        | 4.5%      | 49.0% | 82    |
| 57.3%     | 76.8%  | 51.0%       | 41.7%     | 62.7% | 501   |

**Table 9: Percentage of fingerprinting scripts that also access sensors. All columns except ‘Total’ are given as percentages. The ‘Total’ column shows the number of distinct fingerprinting script URLs that use a particular fingerprinting method.**

| Motion | Orientation | Canvas FP | Canvas Font FP | Audio FP | WebRTC FP | Battery FP | Proximity | Light | Any Sensor | Total |
|--------|-------------|-----------|-----------------|----------|-----------|------------|-----------|-------|------------|-------|
| 1.5%   | 1.4%        | 34.1%     | 32.9%           | 10.9%    | 4.5%      | 2.0%       | 47.1%     | 28.6% | 15.0%      | 6.4%  |
| 2.0%   | 20.0%       | 20.7%     | 10.5%           | 4.6%     | 2.0%      | 19.9%      | 28.6%     | 81.4% | 15.0%      | 6.4%  |
| 1991   | 15.9%       | 2.0%      | 85              | 24.7%    | 47.1%     | 28.6%      | 140       | 267   | 20.2%      | 15.0% |
| 6.4%   | 7.5%        | 625       |                 |          |           |            |           |       |            |       |

#### 6.2 Ad Blocking and Tracking Protection Lists

We then evaluated the effectiveness of well-known filtering lists used for ad blocking and tracking protection: EasyList [27], EasyPrivacy [28], and Disconnect [25]. Table 10 highlights the percentage of tracking scripts that would be blocked by each of these lists. Generally, a significant portion of sensor-accessing scripts are missed by these popular blacklists, consistent with previous research on tracking protection lists [52].

**Table 10: Percentage of script domains accessing device sensors that are blocked by different filtering lists.**

| Sensor | Disconnect Blocked | EasyList Blocked | EasyPrivacy Blocked |
|--------|--------------------|------------------|---------------------|
| Motion | 1.8%               | 1.8%             | 2.9%                |
| Orientation | 3.6%         | 3.1%             | 3.1%                |
| Proximity | 2.9%            | 2.0%             | 4.0%                |
| Light | 2.9%               | 2.9%             | 8.6%                |
| Any Sensor | 2.5%          | 2.5%             | 3.3%                |

#### 6.3 Differences in Browser Behavior

To determine browser support for different sensor APIs and potential restrictions for scripts in cross-origin iframes, we set up a test page that accesses all four sensor APIs. We tested the latest versions of nine browsers as of January 2018. Browsers have minor differences in sensor support and how they block access from scripts embedded in cross-origin iframes. Table 11 summarizes our findings. Proximity and light sensors are only supported by Firefox. For privacy reasons, Firefox and Safari do not allow scripts from cross-origin iframes to access sensor data, aligning with W3C recommendations [80]. Privacy-focused browsers like Firefox Focus and Brave fare worse, allowing access to orientation data from cross-origin iframes, with Firefox Focus further allowing access to motion data.

Testing sensor API availability on insecure (HTTP) pages, we found no differences in browser behavior. We also tested whether browsers have any access restrictions when running in private browsing mode, and found no difference compared to normal browsing mode. Finally, to test the effect of the underlying mobile platform on sensor availability, we tested iOS versions of the browsers. We found that all browsers behaved identically to Safari, as Apple requires browsers to use the WebKit framework to be listed on their app store [21].

**Table 11: Browser support for different sensor APIs.**

| Browser | Light (Third-Party, Iframe) | Proximity (Third-Party, Iframe) | Orientation (Third-Party, Iframe) | Motion (Third-Party, Iframe) |
|---------|-----------------------------|---------------------------------|-----------------------------------|------------------------------|
| Chrome  | (✗, ✗)                      | (✗, ✗)                          | (✓, ✓)                            | (✓, ✓)                       |
| Edge    | (✗, ✗)                      | (✗, ✗)                          | (✓, ✓)                            | (✓, ✓)                       |
| Safari  | (✗, ✗)                      | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |
| Firefox | (✓, ✗)                      | (✓, ✗)                          | (✓, ✓)                            | (✓, ✓)                       |
| Brave   | (✗, ✗)                      | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |
| Firefox Focus | (✗, ✗)              | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |
| Dolphin | (✗, ✗)                      | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |
| Opera Mini | (✗, ✗)                  | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |
| UC Browser | (✗, ✗)                  | (✗, ✗)                          | (✓, ✗)                            | (✓, ✗)                       |

### Discussion and Recommendations

Our analysis of crawling the Alexa top 100K sites indicates that tracking scripts quickly took advantage of easily accessible sensor data, which does not require user permission. By spoofing real sensor values, we found that third-party ad and analytics scripts send raw sensor data to remote servers. Given that existing countermeasures for mobile platforms are not effective at blocking trackers, we recommend the following:

- **W3C Recommendation:** Implement W3C's recommendation for disabling sensor access on cross-origin iframes [80] to limit untrusted third-party scripts. Safari and Firefox are the only browsers currently following this recommendation. Our measurements show that 67.4% of 31,444 cases involve scripts accessing sensor APIs in cross-origin iframes, indicating that W3C's mitigation would be effective.
- **Feature Policy API:** Deploy the Feature Policy API [16] to allow publishers to selectively disable JavaScript APIs, including sensor APIs, to prevent potential misuse by third-party scripts.
- **Low-Resolution Sensor Data:** Provide low-resolution sensor data by default and require user permission for higher-resolution data.
- **Visual Indication:** Provide users with a visual indication that sensor data is being accessed to improve awareness and curb surreptitious access.
- **Private Browsing Mode:** Require user permission to access sensor data in private browsing mode, limit resolution, or disable sensor access altogether.

### Limitations

Our clustering analysis relies on OpenWPM’s instrumentation data to attribute JavaScript behavior to individual scripts. There are potential imperfections in this process. Some websites concatenate several JavaScript files and libraries into a single file, which can add noise to the clustering. Additionally, when attributing JavaScript function calls and property accesses to individual scripts, we use the script URL at the top of the calling stack, which may sometimes be misleading, especially when a script uses a library like jQuery to listen to sensor events.

OpenWPM-Mobile uses OpenWPM’s JavaScript instrumentation, capturing function calls and browser properties at runtime. This approach captures the behavior of obfuscated code but may miss code segments that do not execute during a page visit. We manually analyzed a random subsample of scripts instead of studying all scripts per cluster, which may miss some misbehaving scripts. However, the average intra- and inter-cluster similarity scores are significantly apart, so the outcomes should not be significantly affected.

OpenWPM-Mobile does not store inline scripts. We found that only 12.1% (111 of 916) of the scripts were inline. We re-crawled sites that included inline scripts and stored them for the clustering step.

There are various ways trackers can exfiltrate sensor data, such as using encryption or computing and sending statistics on the sensor data. Therefore, our results on sensor data exfiltration should be considered lower bounds.

Using fingerprinting test suites like `fingerprintjs2` [84] and EFF’s Panopticlick [30], we verified that OpenWPM-Mobile’s browser instrumentation accurately captures the behavior of fingerprinting scripts.