and the output should be:
+--------------+---------+---------+------+------------+
|city | temp_lo | temp_hi | prcp | date |
+--------------+---------+---------+------+------------+
|San Francisco | 46 | 50 | 0.25 | 11-27-1994 |
+--------------+---------+---------+------+------------+
|San Francisco | 43 | 57 | 0 | 11-29-1994 |
+--------------+---------+---------+------+------------+
|Hayward | 37 | 54 | | 11-29-1994 |
+--------------+---------+---------+------+------------+
You may specify any arbitrary expressions in the target list. For example, you can do:
SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;
Arbitrary Boolean operators (and, or and not) are allowed in the qualification of any query. For
example,
SELECT * FROM weather
WHERE city = ’San Francisco’
AND prcp > 0.0;
results in:
+--------------+---------+---------+------+------------+
|city | temp_lo | temp_hi | prcp | date |
+--------------+---------+---------+------+------------+
|San Francisco | 46 | 50 | 0.25 | 11-27-1994 |
+--------------+---------+---------+------+------------+
As a final note, you can specify that the results of a select can be returned in a sorted order or
with duplicate instances removed.
SELECT DISTINCT city
FROM weather
ORDER BY city;
Redirecting SELECT Queries
Any select query can be redirected to a new class
SELECT * INTO TABLE temp FROM weather;
34
Chapter 5. The Query Language
This forms an implicit create command, creating a new class temp with the attribute names
and types specified in the target list of the select into command. We can then, of course,
perform any operations on the resulting class that we can perform on other classes.
Joins Between Classes
Thus far, our queries have only accessed one class at a time. Queries can access multiple
classes at once, or access the same class in such a way that multiple instances of the class are
being processed at the same time. A query that accesses multiple instances of the same or
different classes at one time is called a join query. As an example, say we wish to find all the
records that are in the temperature range of other records. In effect, we need to compare the
temp_lo and temp_hi attributes of each EMP instance to the temp_lo and temp_hi attributes of
all other EMP instances.
Note: This is only a conceptual model. The actual join may be performed in a more
efficient manner, but this is invisible to the user.
We can do this with the following query:
SELECT W1.city, W1.temp_lo AS low, W1.temp_hi AS high,
W2.city, W2.temp_lo AS low, W2.temp_hi AS high
FROM weather W1, weather W2
WHERE W1.temp_lo  W2.temp_hi;
+--------------+-----+------+---------------+-----+------+
|city | low | high | city | low | high |
+--------------+-----+------+---------------+-----+------+
|San Francisco | 43 | 57 | San Francisco | 46 | 50 |
+--------------+-----+------+---------------+-----+------+
|San Francisco | 37 | 54 | San Francisco | 46 | 50 |
+--------------+-----+------+---------------+-----+------+
Note: The semantics of such a join are that the qualification is a truth expression defined
for the Cartesian product of the classes indicated in the query. For those instances in the
Cartesian product for which the qualification is true, Postgres computes and returns the
values specified in the target list. Postgres SQL does not assign any meaning to duplicate
values in such expressions. This means that Postgres sometimes recomputes the same
target list several times; this frequently happens when Boolean expressions are connected
with an "or". To remove such duplicates, you must use the select distinct statement.
In this case, both W1 and W2 are surrogates for an instance of the class weather, and both
range over all instances of the class. (In the terminology of most database systems, W1 and W2
are known as range variables.) A query can contain an arbitrary number of class names and
surrogates.
35
Chapter 5. The Query Language
Updates
You can update existing instances using the update command. Suppose you discover the
temperature readings are all off by 2 degrees as of Nov 28, you may update the data as follow:
UPDATE weather
SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2
WHERE date > ’11/28/1994’;
Deletions
Deletions are performed using the delete command:
DELETE FROM weather WHERE city = ’Hayward’;
All weather recording belongs to Hayward is removed. One should be wary of queries of the
form
DELETE FROM classname;
Without a qualification, delete will simply remove all instances of the given class, leaving it
empty. The system will not request confirmation before doing this.
Using Aggregate Functions
Like most other query languages, PostgreSQL supports aggregate functions. The current
implementation of Postgres aggregate functions have some limitations. Specifically, while
there are aggregates to compute such functions as the count, sum, avg (average), max
(maximum) and min (minimum) over a set of instances, aggregates can only appear in the
target list of a query and not directly in the qualification (the where clause). As an example,
SELECT max(temp_lo) FROM weather;
is allowed, while
SELECT city FROM weather WHERE temp_lo = max(temp_lo);
is not. However, as is often the case the query can be restated to accomplish the intended
result; here by using a subselect:
SELECT city FROM weather WHERE temp_lo = (SELECT max(temp_lo) FROM
weather);
36
Chapter 5. The Query Language
Aggregates may also have group by clauses:
SELECT city, max(temp_lo)
FROM weather
GROUP BY city;
37
Chapter 6. Advanced Postgres SQL Features
Having covered the basics of using Postgres SQL to access your data, we will now discuss
those features of Postgres that distinguish it from conventional data managers. These features
include inheritance, time travel and non-atomic data values (array- and set-valued attributes).
Examples in this section can also be found in advance.sql in the tutorial directory. (Refer to
Chapter 5 for how to use it.)
Inheritance
Let’s create two classes. The capitals class contains state capitals which are also cities.
Naturally, the capitals class should inherit from cities.
CREATE TABLE cities (
name text,
population float,
altitude int -- (in ft)
);
CREATE TABLE capitals (
state char2
) INHERITS (cities);
In this case, an instance of capitals inherits all attributes (name, population, and altitude) from
its parent, cities. The type of the attribute name is text, a native Postgres type for variable
length ASCII strings. The type of the attribute population is float, a native Postgres type for
double precision floating point numbers. State capitals have an extra attribute, state, that shows
their state. In Postgres, a class can inherit from zero or more other classes, and a query can
reference either all instances of a class or all instances of a class plus all of its descendants.
Note: The inheritance hierarchy is a directed acyclic graph.
For example, the following query finds all the cities that are situated at an attitude of 500ft or
higher:
SELECT name, altitude
FROM cities
WHERE altitude > 500;
+----------+----------+
|name | altitude |
+----------+----------+
|Las Vegas | 2174 |
+----------+----------+
|Mariposa | 1953 |
+----------+----------+
On the other hand, to find the names of all cities, including state capitals, that are located at an
altitude over 500ft, the query is:
SELECT c.name, c.altitude
FROM cities* c
WHERE c.altitude > 500;
38
Chapter 6. Advanced Postgres SQL Features
which returns:
+----------+----------+
|name | altitude |
+----------+----------+
|Las Vegas | 2174 |
+----------+----------+
|Mariposa | 1953 |
+----------+----------+
|Madison | 845 |
+----------+----------+
Here the * after cities indicates that the query should be run over cities and all classes below
cities in the inheritance hierarchy. Many of the commands that we have already discussed
(select, update and delete) support this * notation, as do others, like alter.
Non-Atomic Values
One of the tenets of the relational model is that the attributes of a relation are atomic. Postgres
does not have this restriction; attributes can themselves contain sub-values that can be accessed
from the query language. For example, you can create attributes that are arrays of base types.
Arrays
Postgres allows attributes of an instance to be defined as fixed-length or variable-length
multi-dimensional arrays. Arrays of any base type or user-defined type can be created. To
illustrate their use, we first create a class with arrays of base types.
CREATE TABLE SAL_EMP (
name text,
pay_by_quarter int4[],
schedule text[][]
);
The above query will create a class named SAL_EMP with a text string (name), a
one-dimensional array of int4 (pay_by_quarter), which represents the employee’s salary by
quarter and a two-dimensional array of text (schedule), which represents the employee’s
weekly schedule. Now we do some INSERTSs; note that when appending to an array, we
enclose the values within braces and separate them by commas. If you know C, this is not
unlike the syntax for initializing structures.
INSERT INTO SAL_EMP
VALUES (’Bill’,
’{10000, 10000, 10000, 10000}’,
’{{"meeting", "lunch"}, {}}’);
INSERT INTO SAL_EMP
VALUES (’Carol’,
’{20000, 25000, 25000, 25000}’,
’{{"talk", "consult"}, {"meeting"}}’);
By default, Postgres uses the "one-based" numbering convention for arrays -- that is, an array
of n elements starts with array[1] and ends with array[n]. Now, we can run some queries on
SAL_EMP. First, we show how to access a single element of an array at a time. This query
retrieves the names of the employees whose pay changed in the second quarter:
39
Chapter 6. Advanced Postgres SQL Features
SELECT name
FROM SAL_EMP
WHERE SAL_EMP.pay_by_quarter[1] <>
SAL_EMP.pay_by_quarter[2];
+------+
|name |
+------+
|Carol |
+------+
This query retrieves the third quarter pay of all employees:
SELECT SAL_EMP.pay_by_quarter[3] FROM SAL_EMP;
+---------------+
|pay_by_quarter |
+---------------+
|10000 |
+---------------+
|25000 |
+---------------+
We can also access arbitrary slices of an array, or subarrays. This query retrieves the first item
on Bill’s schedule for the first two days of the week.
SELECT SAL_EMP.schedule[1:2][1:1]
FROM SAL_EMP
WHERE SAL_EMP.name = ’Bill’;
+-------------------+
|schedule |
+-------------------+
|{{"meeting"},{""}} |
+-------------------+
Time Travel
As of Postgres v6.2, time travel is no longer supported. There are several reasons for this:
performance impact, storage size, and a pg_time file which grows toward infinite size in a short
period of time.
New features such as triggers allow one to mimic the behavior of time travel when desired,
without incurring the overhead when it is not needed (for most users, this is most of the time).
See examples in the contrib directory for more information.
Time travel is deprecated: The remaining text in this section is retained only until it can be
rewritten in the context of new techniques to accomplish the same purpose. Volunteers? -
thomas 1998-01-12
Postgres supports the notion of time travel. This feature allows a user to run historical queries.
For example, to find the current population of Mariposa city, one would query:
SELECT * FROM cities WHERE name = ’Mariposa’;
+---------+------------+----------+
|name | population | altitude |
+---------+------------+----------+
|Mariposa | 1320 | 1953 |
+---------+------------+----------+
40
Chapter 6. Advanced Postgres SQL Features
Postgres will automatically find the version of Mariposa’s record valid at the current time. One
can also give a time range. For example to see the past and present populations of Mariposa,
one would query:
SELECT name, population
FROM cities[’epoch’, ’now’]
WHERE name = ’Mariposa’;
where "epoch" indicates the beginning of the system clock.
Note: On UNIX systems, this is always midnight, January 1, 1970 GMT.
If you have executed all of the examples so far, then the above query returns:
+---------+------------+
|name | population |
+---------+------------+
|Mariposa | 1200 |
+---------+------------+
|Mariposa | 1320 |
+---------+------------+
The default beginning of a time range is the earliest time representable by the system and the
default end is the current time; thus, the above time range can be abbreviated as ‘‘[,].’’
More Advanced Features
Postgres has many features not touched upon in this tutorial introduction, which has been
oriented toward newer users of SQL. These are discussed in more detail in both the User’s and
Programmer’s Guides.
41
Bibliography
Selected references and readings for SQL and Postgres.
SQL Reference Books
The Practical SQL Handbook, Using Structured Query Language , 3, Judity Bowman, Sandra
Emerson, and Marcy Damovsky, 0-201-44787-8, 1996, Addison-Wesley, 1997.
A Guide to the SQL Standard, A user’s guide to the standard database language SQL , 4, C. J.
Date and Hugh Darwen, 0-201-96426-0, 1997, Addison-Wesley, 1997.
An Introduction to Database Systems, 6, C. J. Date, 1, 1994, Addison-Wesley, 1994.
Understanding the New SQL, A complete guide, Jim Melton and Alan R. Simon,
1-55860-245-3, 1993, Morgan Kaufmann, 1993.
Abstract
Accessible reference for SQL features.
Principles of Database and Knowledge : Base Systems, Jeffrey D. Ullman, 1, Computer
Science Press , 1988 .
PostgreSQL-Specific Documentation
The PostgreSQL Administrator’s Guide , The Administrator’s Guide , Edited by Thomas
Lockhart, 1998-10-01, The PostgreSQL Global Development Group.
The PostgreSQL Developer’s Guide , The Developer’s Guide , Edited by Thomas Lockhart,
1998-10-01, The PostgreSQL Global Development Group.
The PostgreSQL Programmer’s Guide , The Programmer’s Guide , Edited by Thomas
Lockhart, 1998-10-01, The PostgreSQL Global Development Group.
The PostgreSQL Tutorial Introduction , The Tutorial , Edited by Thomas Lockhart,
1998-10-01, The PostgreSQL Global Development Group.
The PostgreSQL User’s Guide , The User’s Guide , Edited by Thomas Lockhart, 1998-10-01,
The PostgreSQL Global Development Group.
Enhancement of the ANSI SQL Implementation of PostgreSQL , Simkovics, 1998 , Stefan
Simkovics, O.Univ.Prof.Dr.. Georg Gottlob, November 29, 1998, Department of
Information Systems, Vienna University of Technology .
Discusses SQL history and syntax, and describes the addition of INTERSECT and
EXCEPT constructs into Postgres. Prepared as a Master’s Thesis with the support of
O.Univ.Prof.Dr. Georg Gottlob and Univ.Ass. Mag. Katrin Seyr at Vienna University of
Technology.
The Postgres95 User Manual , Yu and Chen, 1995 , A. Yu and J. Chen, The POSTGRES
Group , Sept. 5, 1995, University of California, Berkeley CA.
42
Bibliography
Proceedings and Articles
Partial indexing in POSTGRES: research project , Olson, 1993 , Nels Olson, 1993, UCB Engin
T7.49.1993 O676, University of California, Berkeley CA.
A Unified Framework for Version Modeling Using Production Rules in a Database System ,
Ong and Goh, 1990 , L. Ong and J. Goh, April, 1990, ERL Technical Memorandum
M90/33, University of California, Berkeley CA.
The Postgres Data Model , Rowe and Stonebraker, 1987 , L. Rowe and M. Stonebraker, Sept.
1987, VLDB Conference, Brighton, England, 1987.
Generalized partial indexes
(http://simon.cs.cornell.edu/home/praveen/papers/partindex.de95.ps.Z) , , P. Seshadri and
A. Swami, March 1995, Eleventh International Conference on Data Engineering, 1995,
Cat. No.95CH35724, IEEE Computer Society Press.
The Design of Postgres , Stonebraker and Rowe, 1986 , M. Stonebraker and L. Rowe, May
1986, Conference on Management of Data, Washington DC, ACM-SIGMOD, 1986.
The Design of the Postgres Rules System, Stonebraker, Hanson, Hong, 1987 , M. Stonebraker,
E. Hanson, and C. H. Hong, Feb. 1987, Conference on Data Engineering, Los Angeles,
CA, IEEE, 1987.
The Postgres Storage System , Stonebraker, 1987 , M. Stonebraker, Sept. 1987, VLDB
Conference, Brighton, England, 1987.
A Commentary on the Postgres Rules System , Stonebraker et al, 1989, M. Stonebraker, M.
Hearst, and S. Potamianos, Sept. 1989, Record 18(3), SIGMOD, 1989.
The case for partial indexes (DBMS)
(http://s2k-ftp.CS.Berkeley.EDU:8000/postgres/papers/ERL-M89-17.pdf) , Stonebraker,
M, 1989b, M. Stonebraker, Dec. 1989, Record 18(no.4):4-11, SIGMOD, 1989.
The Implementation of Postgres , Stonebraker, Rowe, Hirohama, 1990 , M. Stonebraker, L. A.
Rowe, and M. Hirohama, March 1990, Transactions on Knowledge and Data Engineering
2(1), IEEE.
On Rules, Procedures, Caching and Views in Database Systems , Stonebraker et al, ACM,
1990 , M. Stonebraker and et al, June 1990, Conference on Management of Data,
ACM-SIGMOD.
43