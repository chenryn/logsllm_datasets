 {31208,348009}                  |    31208 |   348009 |             |       1    
 {31208,300046}                  |    31208 |   300046 |             |       1    
 {31208,344359}                  |    31208 |   344359 |             |       1    
 {31208,318790}                  |    31208 |   318790 |             |       1    
 {31208,321034}                  |    31208 |   321034 |             |       1    
 {31208,301609}                  |    31208 |   301609 |             |       1    
 {31208,344339}                  |    31208 |   344339 |             |       1    
 {31208,314087}                  |    31208 |   314087 |             |       1    
......    
 {31208,319951,3199647,31991191} |  3199647 | 31991191 |             |       3    
 {31208,319951,3199647,31954904} |  3199647 | 31954904 |             |       3    
 {31208,319951,3199647,31986691} |  3199647 | 31986691 |             |       3    
 {31208,319951,3199647,31986448} |  3199647 | 31986448 |             |       3    
 {31208,319951,3199647,31993624} |  3199647 | 31993624 |             |       3    
 {31208,319951,3199647,31997771} |  3199647 | 31997771 |             |       3    
 {31208,319951,3199647,31982764} |  3199647 | 31982764 |             |       3    
 {31208,319951,3199647,31993420} |  3199647 | 31993420 |             |       3    
 {31208,319951,3199647,31962666} |  3199647 | 31962666 |             |       3    
 {31208,319951,3199647,31957536} |  3199647 | 31957536 |             |       3    
(300 rows)    
```    
### 2、UDF2，返回游标       
```    
create or replace function graph_search2(    
  IN i_root int,                       -- 根据哪个节点开始搜      
  IN i_res name,                       -- 游标名    
  IN i_depth int  default 99999,       -- 搜索层级、深度限制    
  IN i_limit int8 default 2000000000,  -- 限制每一层返回的记录数    
  IN i_weight float8 default 0         -- 限制权重    
) returns refcursor as $$    
declare    
  sql text;    
  res refcursor := i_res;    
begin    
sql := format($_$    
WITH RECURSIVE search_graph(      
  c1,     -- 点1      
  c2,     -- 点2      
  prop,   -- 当前边的属性       
  depth,  -- 当前深度，从1开始       
  path   -- 路径，数组存储       
) AS (      
        select c1,c2,prop,depth,path from (      
        SELECT                               -- ROOT节点查询      
          g.c1,                              -- 点1      
          g.c2,                              -- 点2      
          g.prop,                            -- 边的属性      
          1 depth,                           -- 初始深度=1      
          ARRAY[g.c1] path                  -- 初始路径      
        FROM a AS g       
        WHERE       
          c1 = %s                                                    -- ROOT节点=?      
          AND coalesce((g.prop->>'weight')::float8,0) >= %s          -- 相关性权重      
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？      
        ) t      
      UNION ALL      
        select c1,c2,prop,depth,path from (      
        SELECT                               -- 递归子句       
          g.c1,                              -- 点1      
          g.c2,                              -- 点2      
          g.prop,                            -- 边的属性      
          sg.depth + 1 depth,                -- 深度+1      
          path || g.c1 path                 -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg      -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2                       -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))                      -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重      
          ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？                 
        ) t      
)      
SELECT path||c2 as o_path, c1 as o_point1, c2 as o_point2, prop as o_link_prop, depth as o_depth    
FROM search_graph;                           -- 查询递归表，可以加LIMIT输出，也可以使用游标     
$_$, i_root, i_weight, i_limit, i_depth, i_weight, i_limit    
);    
open res for execute sql;    
return res;    
end;    
$$ language plpgsql strict;    
```    
使用举例，    
```    
postgres=# begin;    
BEGIN    
postgres=# select * from graph_search2(31208, 'cur1', 3, 100, 0);    
 graph_search2     
---------------    
 cur1    
(1 row)    
postgres=# fetch 10 from cur1;    
     o_path     | o_point1 | o_point2 | o_link_prop | o_depth     
----------------+----------+----------+-------------+---------    
 {31208,344710} |    31208 |   344710 |             |       1    
 {31208,319951} |    31208 |   319951 |             |       1    
 {31208,340938} |    31208 |   340938 |             |       1    
 {31208,325272} |    31208 |   325272 |             |       1    
 {31208,346519} |    31208 |   346519 |             |       1    
 {31208,314594} |    31208 |   314594 |             |       1    
 {31208,307217} |    31208 |   307217 |             |       1    
 {31208,348009} |    31208 |   348009 |             |       1    
 {31208,300046} |    31208 |   300046 |             |       1    
 {31208,344359} |    31208 |   344359 |             |       1    
(10 rows)    
postgres=# close cur1;    
CLOSE CURSOR    
postgres=# end;    
COMMIT    
```    
### 3、UDF3，返回某两个点的最短路径  
返回某两个点的最短路径，同时限定深度，超过深度则认为不可达。      
例如搜索 1 到 100 的最短路径。        
```     
create or replace function graph_search3(    
  IN i_p1 int,                       -- 根据哪个节点开始搜      
  IN i_p2 int,                       -- 游标名      
  IN i_depth int  default 99999,     -- 搜索层级、深度限制      
  OUT o_path int[],                    -- 输出：路径, ID 组成的数组    
  OUT o_point1 int,                    -- 输出：点1 ID    
  OUT o_point2 int,                    -- 输出：点2 ID    
  OUT o_link_prop jsonb,               -- 输出：当前两点之间的连接属性    
  OUT o_depth int                      -- 输出：当前深度、层级    
) returns record as $$    
declare    
  sql text;    
begin    
sql := format($_$    
WITH RECURSIVE search_graph(      
  c1,   -- 点1      
  c2,   -- 点2      
  prop, -- 边的属性      
  depth, -- 深度，从1开始      
  path  -- 路径，数组存储      
) AS (      
        SELECT    -- ROOT节点查询      
          g.c1,   -- 点1      
          g.c2,   -- 点2      
          g.prop,   -- 边的属性      
          1 depth,        -- 初始深度=1      
          ARRAY[g.c1] path   -- 初始路径      
        FROM a AS g       
        WHERE       
          c1 = %s         -- ROOT节点=?      --（最短路径的起点）      
      UNION ALL      
        SELECT     -- 递归子句      
          g.c1,    -- 点1      
          g.c2,    -- 点2      
          g.prop,          -- 边的属性      
          sg.depth + 1 as depth,    -- 深度+1      
          path || g.c1 as path    -- 路径中加入新的点      
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2                      -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))        -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重      
          -- ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？   
        ) t      
      UNION ALL      
        select c1,c2,prop,depth,path,cycle from (      
        SELECT     -- 递归子句      
          g.c1,    -- 点1      
          g.c2,    -- 点2      
          g.prop,          -- 边的属性      
          sg.depth + 1 as depth,    -- 深度+1      
          path || g.c1 as path,    -- 路径中加入新的点      
          (g.c1 = ANY(sg.path)) as cycle    -- 是否循环，判断新点是否已经在之前的路径中      
        FROM a AS g, search_graph AS sg   -- 循环 INNER JOIN      
        WHERE       
          g.c1 = sg.c2         -- 递归JOIN条件      
          AND (g.c1 <> ALL(sg.path))       -- 防止循环      
          AND sg.depth >'weight')::float8,0) >= %s          -- 相关性权重      
          -- ORDER BY coalesce((g.prop->>'weight')::float8,0) desc      -- 可以使用ORDER BY，例如返回权重排在前面的N条。      
          limit %s                           -- 每个层级限制多少条？         