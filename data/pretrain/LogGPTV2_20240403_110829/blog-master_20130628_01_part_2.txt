Item|	Description  
---|---  
PageHeaderData|	24 bytes long. Contains general information about the page, including free space pointers.  
ItemIdData|	Array of (offset,length) pairs pointing to the actual items. 4 bytes per item.  
Free space|	The unallocated space. New item pointers are allocated from the start of this area, new items from the end.  
Items|	The actual items themselves.  
Special space|	Index access method specific data. Different methods store different data. Empty in ordinary tables.  
每个 page 头包含24字节固定长度. 每条tuple对应一条ItemIdData, 4字节.  
信息如下 :   
Table 58-3. PageHeaderData Layout  
Field|	Type|	Length|	Description  
---|---|---|---  
pd_lsn|	XLogRecPtr|	8 bytes|	LSN: next byte after last byte of xlog record for last change to this page  
pd_tli|	uint16|	2 bytes|	TimeLineID of last change (only its lowest 16 bits)  
pd_flags|	uint16|	2 bytes|	Flag bits  
pd_lower|	LocationIndex|	2 bytes|	Offset to start of free space  
pd_upper|	LocationIndex|	2 bytes|	Offset to end of free space  
pd_special|	LocationIndex|	2 bytes|	Offset to start of special space  
pd_pagesize_version|	uint16|	2 bytes|	Page size and layout version number information  
pd_prune_xid|	TransactionId|	4 bytes|	Oldest unpruned XMAX on page, or zero if none  
tuple头部则占用27字节. 如下.  
Table 58-4. HeapTupleHeaderData Layout  
Field|	Type|	Length|	Description  
---|---|---|---  
t_xmin|	TransactionId|	4 bytes|	insert XID stamp  
t_xmax|	TransactionId|	4 bytes|	delete XID stamp  
t_cid|	CommandId|	4 bytes|	insert and/or delete CID stamp (overlays with t_xvac)  
t_xvac|	TransactionId|	4 bytes|	XID for VACUUM operation moving a row version  
t_ctid|	ItemPointerData|	6 bytes|	current TID of this or newer row version  
t_infomask2|	uint16|	2 bytes|	number of attributes, plus various flag bits  
t_infomask|	uint16|	2 bytes|	various flag bits  
t_hoff|	uint8|	1 byte|	offset to user data  
因此1条记录真实的占用空间应该是ItemIdData+tupleHead+tupledata=4+27+?字节.  
第一个例子的长度如下 :   
```  
digoal=# select pg_column_size(id),pg_column_size('info') from deadtuple_teste limit 1;  
 pg_column_size | pg_column_size   
----------------+----------------  
              4 |              5  
(1 row)  
```  
一条tuple的空间是4+27+4+5=40字节.  
采样10000条计算平均值 :   
```  
digoal=# select avg(c1+c2) from (select pg_column_size(id) c1,pg_column_size('info') c2 from deadtuple_teste limit 1000) t;  
        avg           
--------------------  
 9.0000000000000000  
(1 row)  
```  
最终得到的单条tuple的空间占用是40字节.   
live tuple占用的空间如下 :   
```  
digoal=# select n_live_tup*40 from pg_stat_all_tables where relname='deadtuple_teste';  
 ?column?   
----------  
  2800040  
(1 row)  
```  
page头占用的空间如下 :   
```  
digoal=# select 24*relpages from pg_class where relname='deadtuple_teste';  
 ?column?   
----------  
    20016  
(1 row)  
```  
表的真实空间占用如下 :   
```  
digoal=# select pg_relation_size('deadtuple_teste'::regclass);  
 pg_relation_size   
------------------  
          6832128  
(1 row)  
```  
膨胀比例 ;   
```  
(6832128-2800040-20016)/6832128=0.58723607051858513189.  
```  
如果表中有字段使用了TOAST存储, 那么使用这种方法计算膨胀将更加复杂.   
```  