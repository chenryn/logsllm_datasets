Monitoring 
Tools, and click the Add button to add a counter to the chart. Select the System object, select the
System Calls/Sec counter, and then click the Add button to add the counter to the chart.
to have hundreds of thousands of system calls a second, especially the more processors the system
CHAPTER 8 System mechanisms
105
I 
Wow64.dll Implements the WoW64 core in user mode. Creates the thin software layer that
acts as a kind of intermediary kernel for 32-bit applications and starts the simulation. Handles
CPU context state changes and base system calls exported by Ntoskrnl.exe. It also implements
I 
Wow64win.dll Implements thunking (conversion) for GUI system calls exported by Win32k.
sys. Both Wow64win.dll and Wow64.dll include thunking code, which converts a calling conven-
tion from an architecture to another one.
-
longs to a different architecture. In some cases (like for ARM64) the machine code needs to be emulat-
ed or jitted. In this book, we use the term jitting to refer to the just-in-time compilation technique that 
involves compilation of small code blocks (called compilation units) at runtime instead of emulating 
and executing one instruction at a time. 
Here are the DLLs that are responsible in translating, emulating, or jitting the machine code, allow-
ing it to be run by the target operating system:
I 
Wow64cpu.dll Implements the CPU simulator for running x86 32-bit code in AMD64 op-
erating systems. Manages the 32-bit CPU context of each running thread inside WoW64 and
and vice versa.
I 
Wowarmhw.dll Implements the CPU simulator for running ARM32 (AArch32) applications on
ARM64 systems. It represents the ARM64 equivalent of the Wow64cpu.dll used in x86 systems.
I 
Xtajit.dll Implements the CPU emulator for running x86 32-bit applications on ARM64
systems. Includes a full x86 emulator, a jitter (code compiler), and the communication protocol
between the jitter and the XTA cache server. The jitter can create compilation blocks including
ARM64 code translated from the x86 image. Those blocks are stored in a local cache.
The relationship of the WoW64 user-mode libraries (together with other core WoW64 components) 
x86 on AMD64
ARM32 on ARM64
x86 on ARM64
NT Kernel
x86 32-bit
EXEs, DLLs
Ntdll.dll
x86 32-bit
Wow64cpu.dll
ARM Thumb-2
EXEs, DLLs
Ntdll.dll
ARM 32-bit
Ntdll.dll
Native
Wow64win.dll
Xtac.exe
Ntoskrnl.exe
Win32k.sys
WoW64 Core
Wow64.dll
Wowarmhw.dll
Ntdll.dll
CHPE
Xtajit.dll
x86 32-bit EXEs, DLLs
CHPE OS EXEs, DLLs
XtaCache.exe
XtaCache Service
FIGURE 8-28 The WoW64 architecture.
106 
CHAPTER 8 System mechanisms
Note Older Windows versions designed to run in Itanium machines included a full x86 emula-
tor integrated in the WoW64 layer called Wowia32x.dll. Itanium processors were not able to 
A newer Insider release version of Windows also supports executing 64-bit x86 code on 
ARM64 systems. A new jitter has been designed for that reason. However emulating AMD64 
code in ARM systems is not performed through WoW64. Describing the architecture of the 
AMD64 emulator is outside the scope of this release of this book.
The WoW64 core 
As introduced in the previous section, the WoW64 core is platform independent: It creates a software 
layer for managing the execution of 32-bit code in 64-bit operating systems. The actual translation is 
performed by another component called Simulator (also known as Binary Translator), which is platform 
Simulator. While the core of WoW64 is almost entirely implemented in user mode (in the Wow64.dll 
library), small parts of it reside in the NT kernel. 
WoW64 core in the NT kernel
During system startup (phase 1), the I/O manager invokes the PsLocateSystemDlls routine, which maps 
all the system DLLs supported by the system (and stores their base addresses in a global array) in the 
System process user address space. This also includes WoW64 versions of Ntdll, as described by Table 
8-13. Phase 2 of the process manager (PS) startup resolves some entry points of those DLLs, which are 
stored in internal kernel variables. One of the exports, LdrSystemDllInitBlock, is used to transfer WoW64 
information and function pointers to new WoW64 processes.
TABLE 8-13 Different Ntdll version list
Path
Internal Name
Description
ntdll.dll
The system Ntdll mapped in every user process (except for minimal 
processes). This is the only version marked as required.
ntdll32.dll
32-bit x86 Ntdll mapped in WoW64 processes running in 64-bit x86 
host systems.
ntdll32.dll
32-bit ARM Ntdll mapped in WoW64 processes running in 64-bit 
ARM host systems.
ntdllwow.dll
32-bit x86 CHPE Ntdll mapped in WoW64 processes running in 
64-bit ARM host systems.
When a process is initially created, the kernel determines whether it would run under WoW64 using 
an algorithm that analyzes the main process executable PE image and checks whether the correct Ntdll 
version is mapped in the system. In case the system has determined that the process is WoW64, when 
the kernel initializes its address space, it maps both the native Ntdll and the correct WoW64 version. 
CHAPTER 8 System mechanisms
107
As explained in Chapter 3 of Part 1, each nonminimal process has a PEB data structure that is acces-
and stores a pointer to it in a small data structure (EWoW64PROCESS) linked to the main EPROCESS 
the LdrSystemDllInitBlock symbol, including pointers of Wow64 Ntdll exports.
When a thread is allocated for the process, the kernel goes through a similar process: along with 
by a 32-bit TEB. 
32-bit CPU context (X86_NT5_CONTEXT or ARM_CONTEXT data structures, depending on the target
architecture), and a pointer of the per-thread WoW64 CPU shared data, which can be used by the
-
contains an initial single thread.
ID, Start Addr,…
Thread List Entry
••••
TEB
Kernel Stack
TCB
Image base
Flags
Ldr Database
Os Information
••••
Nt Global Flags
Native PEB
PCB
ID, Token, …
Thread List
WoW64Process
••••
PEB
32-bit PEB
Ntdll Type
Guest Context
Per-thr. Data
Flags
TOP
Native NT_TIB
Flags, CSR Info,…
WowTebOffset
•••
TLS Slot Array
User Stack
Native & 32-bit TEB
Native Stack
TOP
BASE
TOP
BASE
32-bit Stack
32-bit NT_TIB
Flags, CSR Info,…
WowTebOffset
•••
TLS Slots Array
User Stack
EWoW64PROCESS
Kernel-mode
User-mode
WoW64INFO
EPROCESS
ETHREAD
WoW64 CPU
Area Info
32-bit Image base
Flags
32-bit Ldr DB
Os Information
••••
Nt Global Flags
CpuFlags
CrossSection
Host/Guest
Machine
32-bit PEB
WoW64 Process
WoW64 Thread
CpuFlags
CrossSection
Host/Guest
Machine
FIGURE 8-29 
108 
CHAPTER 8 System mechanisms
User-mode WoW64 core
Aside from the differences described in the previous section, the birth of the process and its initial 
thread happen in the same way as for non-WoW64 processes, until the main thread starts its execu-
tion by invoking the loader initialization function, LdrpInitialize, in the native version of Ntdll. When the 
the process initialization routine, LdrpInitializeProcess, which, along with a lot of different things (see 
the “Early process initialization” section of Chapter 3 in Part 1 for further details), determines whether 
the process is a WoW64 one, based on the presence of the 32-bit TEB (located after the native TEB and 
linked to it). In case the check succeeded, the native Ntdll sets the internal UseWoW64 global variable 
to 1, builds the path of the WoW64 core library, wow64.dll, and maps it above the 4 GB virtual address 
gets the address of some WoW64 functions that deal with process/thread suspension and APC and 
exception dispatching and stores them in some of its internal variables. 
When the process initialization routine ends, the Windows loader transfers the execution to the 
WoW64 Core via the exported Wow64LdrpInitialize
new thread starts through that entry point (instead of the classical RtlUserThreadStart). The WoW64 
core obtains a pointer to the CPU WoW64 area stored by the kernel at the TLS slot 1. In case the thread 
-
lowing steps:
1.
Tries to load the WoW64 Thunk Logging DLL (wow64log.dll). The Dll is used for logging
WoW64 calls and is not included in commercial Windows releases, so it is simply skipped.
2.
Looks up the Ntdll32 base address and function pointers thanks to the LdrSystemDllInitBlock
3.
-
tem requests and translates their path before invoking the native system calls.
4.
Initializes the WoW64 service tables, which contains pointers to system services belonging to
the NT kernel and Win32k GUI subsystem (similar to the standard kernel system services), but
also Console and NLS service call (both WoW64 system service calls and redirection are cov-
ered later in this chapter.)
5.
archarch> can be
exported functions are resolved and stored in an internal array called BtFuncs. The array is the
BtCpuProcessInit function, for example, represents
CHAPTER 8 System mechanisms
109
6.
section. A synthesized work item is posted on the section when a WoW64 process calls an
API targeting another 32-bit process (this operation propagates thunk operations across
different processes).
7. 
The WoW64 layer informs the simulator (by invoking the exported BtCpuNotifyMapViewOfSection)
that the main module, and the 32-bit version of Ntdll have been mapped in the address space.
8.
Wow64Transition exported variable of the 32-bit version of Ntdll. This allows the system call
dispatcher to work.
When the process initialization routine ends, the thread is ready to start the CPU simulation. It 
stack for executing the 32-bit version of the LdrInitializeThunk function. The simulation is started via the 
BTCpuSimulate exported function, which will never return to the caller (unless a critical error 
in the simulator happens).
File system redirection
To maintain application compatibility and to reduce the effort of porting applications from Win32 to 
contains native 64-bit images. WoW64, as it intercepts all the system calls, translates all the path re-
lated APIs and replaces various system paths with the WoW64 equivalent (which depends on the target 
TABLE 8-14 WoW64 redirected paths
Path
Architecture
Redirected Location
X86 on AMD64
X86 on ARM64
does not exist in SyChpe32)
ARM32
Native
X86
ARM32
Native
X86 
ARM32
110 
CHAPTER 8 System mechanisms
X86
ARM32
X86
ARM32
are exempted from being redirected such that access attempts to them made by 32-bit applications 
actually access the real one. These directories include the following:
I 
I 
I 
I 
I 
I 
per-thread basis through the Wow64DisableWow64FsRedirection and Wow64RevertWow64FsRedirection 
functions. This mechanism works by storing an enabled/disabled value on the TLS index 8, which is 
consulted by the internal WoW64 RedirectPath function. However, the mechanism can have issues 
because once redirection is disabled, the system no longer uses it during internal loading either, and 
the other consistent paths introduced earlier is usually a safer methodology for developers to use.
Note Because certain 32-bit applications might indeed be aware and able to deal with 
even from an application running under WoW64.
Registry redirection
component is installed and registered both as a 32-bit binary and a 64-bit binary, the last component 
registered will override the registration of the previous component because they both write to the 
same location in the registry.
CHAPTER 8 System mechanisms
111
To help solve this problem transparently without introducing any code changes to 32-bit compo-
nents, the registry is split into two portions: Native and WoW64. By default, 32-bit components access 
the 32-bit view, and 64-bit components access the 64-bit view. This provides a safe execution environ-
ment for 32-bit and 64-bit components and separates the 32-bit application state from the 64-bit one, 
if it exists.
As discussed later in the “System calls” section, the WoW64 system call layer intercepts all the system 
calls invoked by a 32-bit process. When WoW64 intercepts the registry system calls that open or create a 
registry key, it translates the key path to point to the WoW64 view of the registry (unless the caller explic-
itly asks for the 64-bit view.) WoW64 can keep track of the redirected keys thanks to multiple tree data 
where the system should begin the redirection). WoW64 redirects the registry at these points:
I 
I 
Not the entire hive is split. Subkeys belonging to those root keys can be stored in the private 
WoW64 part of the registry (in this case, the subkey is a split key). Otherwise, the subkey can be kept 