### 优化后的文本

#### 验证算法
- **验证一级签名**：
  \[
  \text{Verify}(1, m, \sigma(1), \text{pki}): \quad \text{接受} \, \sigma(1) \, \text{如果} \, e(\sigma(1), g) = e(H(m), X_i).
  \]

- **验证二级签名**：
  \[
  \text{Verify}(2, m, \sigma(2), \text{pki}): \quad \text{接受} \, \sigma(2) = (\sigma_0, \sigma_1, \sigma_2, \sigma_3) \, \text{关于} \, \text{pki} = (X_i, Y_i) \, \text{如果以下关系成立}:
  \]
  \[
  e(\sigma_0, g) = e(\sigma_1, H(m))
  \]
  \[
  e(\sigma_2, X_i) = e(g, \sigma_1) \cdot e(Y_i, \sigma_3)
  \]

上述方案在效率上与第4节中的方案相当，但二级签名略长。遗憾的是，我们未能将其转化为多跳系统。

从安全角度来看，我们在证明中需要的假设较少，因为只需要1-Flexible Diffie-Hellman假设。

#### 定理6.1
单跳方案在选择密钥模型下，在1-FlexDH假设下是安全的。

**证明**：我们可以仅使用1-Flexible Diffie-Hellman问题来证明结果，而不依赖修改后的CDH假设。设给定实例为 \((g, A = g^a, B = g^b)\)。

**外部安全性和有限代理安全性**：对于这些概念，证明过程几乎与定理4.1的证明相同。唯一的区别在于用户公钥 \( \text{pki} = (X_i, Y_i) \) 的生成方式：第一部分 \( X_i \) 按照定理4.1中的证明选择，而第二部分 \( Y_i \) 设置为 \( Y_i = X_i^{y_i} \)。当对手最终输出一个伪造签名时，随机选取指数 \( y_i \leftarrow_R \mathbb{Z}_p^* \)：
\[
(\sigma_0', \sigma_1', \sigma_2', \sigma_3') = (H(m')^{a x t}, X^t, g^t \cdot Y^r, X^r),
\]
针对诚实用户的公钥 \((X = A^x, Y = X^y)\)（其中 \(x, y \in \mathbb{Z}_p^*\) 是模拟器最初选择的随机指数），可以计算出伪造签名并用于我们的第4节方案。具体来说，如果 \( H(m') = B^{\mu'} \) 且 \( X = A^x \) 对于已知值 \( x, \mu' \in \mathbb{Z}_p^* \)，模拟器可以获得三元组：
\[
(C^{ab}, C^a, C) = \left( \frac{\sigma_0'}{\sigma_3'}, \frac{\sigma_1'}{\mu'}, \left( \frac{\sigma_2'}{\sigma_3'} \right)^{yx \mu'} \right)
\]
这解决了问题实例。

**委托人安全性**：证明与定理4.1相同，但对手只获得一个诚实用户的公钥。

**授权者安全性**：对于具有优势 \(\epsilon\) 并进行 \(q_s\) 次签名查询的对手A，我们构建一个算法B，该算法以概率 \(O(\epsilon / q_s)\) 找到 \(g^{ab}\)。

**系统参数**：A 获得公共参数 \(\{G, G_T, g, OH\}\)，其中 \(OH\) 是随机预言机。

**密钥生成**：授权者的公钥定义为 \( \text{pk}_0 = (X_0, Y_0) = (A, g^{y_0}) \)，其中 \(y_0 \leftarrow_R \mathbb{Z}_p^*\)。

**预言机查询**：
- A 的随机预言机查询和签名查询使用Coron的技术 [15] 处理，如定理4.1的证明所示（因此在归约中有一个 \(O(q_s)\) 的退化因子）。
- 委托查询：A 可以随时提供一个公钥 \( \text{pk} = (X, Y) \)（无需揭示底层秘密），并请求预言机 \(O_{dlg}(.)\) 生成代表授权者0的重签名密钥，将 \(\text{pk}\) 作为委托人的公钥。由于我们有 \(X_0 = A, Y_0 = g^{y_0}\) 对于已知指数 \(y_0\)，B 选择 \(r \leftarrow_R \mathbb{Z}_p^*\) 并返回 \((R_1, R_2) = (g^{ry_0}, X_0^r \cdot X^{-1/y_0})\)。

如果我们定义 \(\tilde{r} = r - x / (ay_0)\)，其中 \(x = \log_g(X)\)，我们可以看到 \((R_1, R_2)\) 具有正确的形式，因为
\[
\frac{1}{a} \cdot Y_0^{\tilde{r}} = X_0^{\tilde{r}} = X_0^r \cdot (g^{y_0})^{-x / (ay_0)} = g^{ry_0} \cdot (g^{y_0})^{-x / (ay_0)} = X_0^r \cdot X^{-1/y_0}.
\]
我们注意到 B 可以在不知道 \(x = \log_g(X)\) 或 \(y = \log_g(Y)\) 的情况下计算 (11) 式的两部分。

经过多次查询后，A 提供了一个一级伪造签名，允许像定理4.1的证明那样计算 \(g^{ab}\)。与后者不同，B 在整个模拟过程中不需要 \(g^{1/a}\)，我们只需要1-Flexible Diffie-Hellman假设。

### 7. 是否可以实现常数大小的多跳签名？

虽然非常理想，但单向多跳PRS具有常数大小的签名是非常难以构造的。我们将给出一些解释，说明为什么它们在当前知识水平下似乎无法实现。

显然，如果Re-Sign算法增加了签名的大小（即使只是增加一位），那么我们最终会得到线性大小的签名。直观上，多跳单向系统要么提供常数大小，要么提供线性大小。似乎不太可能实现对数大小的签名。这表明，无论签名被转换多少次，它们都应该保持在同一签名空间内（这听起来与追求的单向性不兼容）。然而，并非所有单向方案都会在翻译时增加签名长度：如果使用适当的参数，[5] 中的第一个提案在两个级别上的签名大小相同（尽管签名的形状不同）。然而，它不适合多用途扩展：为了翻译签名，代理使用签名的一部分作为指数来对重签名密钥进行指数运算，这阻碍了长度保持不变的重复过程。

到目前为止，所有已知的单向代理重加密原语都使用双线性映射。不幸的是，这些工具仍然不足以达到上述目的。基于配对的方案通常允许代理用其与代理密钥的配对替换原始密文或签名的一个组件。如果我们让配对值留在重签名中，则不可能进行多次跳转，因为没有双线性映射定义在目标群 \(G_T\) 上。为了绕过这个问题，我们的方法推迟了配对的计算，直到验证时通过模糊其参数并将它们引入变换后的签名。不幸的是，这不可避免地会在每次转换时增加签名的长度。

我们并不声称常数大小的签名是不可能实现的，但要达到这一目标，需要开发新的想法和技术。

### 8. 双线性群中 \(\ell\)-FlexDH 的一般硬度

为了对 \(\ell\)-FlexDH 假设提供更多信心，我们给出了在配备双线性映射的通用群中 \(\ell\)-FlexDH 问题的计算复杂度下界。在 [23] 中，Kunz-Jacques 和 Pointcheval 定义了一族计算问题，使研究通用群模型中的CDH问题变体成为可能。设 A 是该模型中的对手，\(\phi(X_1, \ldots, X_k, Y_1, \ldots, Y_\ell)\) 是一个多变量多项式，其系数可能依赖于 A 的行为。对于由模拟器选择的 \(x_1, \ldots, x_k\) 值及其编码，A 的目标是计算 \(y_1, \ldots, y_\ell\) 的编码，使得
\[
\phi(x_1, \ldots, x_k, y_1, \ldots, y_\ell) = 0.
\]
A 操作的所有元素都是 \(x_1, \ldots, x_k\) 和通过群预言机引入的一些新随机元素的线性多项式。设 \(P_i\) 表示 \(y_i\) 对应的多项式（它是随机变量），Kunz-Jacques 和 Pointcheval 证明了以下结果。

**定理8.1** ([23])：设 \(d = \deg(\phi)\) 且 \(P_m\) 是概率
\[
\Pr[\phi(X_1, \ldots, X_k, P_1(X_1, \ldots, X_k), \ldots, P_\ell(X_1, \ldots, X_k)) = 0]
\]
的上界，则 A 在 \(q_G\) 次查询后获胜的概率满足
\[
\text{Succ}(q_G) \leq P_m + \frac{(3q_G + k + 2)d}{p}.
\]
选择 \(\phi(X_1, X_2, Y_1, \ldots, Y_{\ell+1}) = Y_{\ell+1} - X_1 X_2 Y_1 \cdots Y_\ell\) 暗示了 \(\ell\)-FlexDH 问题的一般难度。

几乎可以立即证明 Kunz-Jacques-Pointcheval 的结果也适用于通用双线性群，其中 \(\ell\)-FlexDH 问题仍然是难解的。详细内容见论文全文版本。

**定理8.2**：设 \(d = \deg(\phi)\) 且 \(P_m\) 是概率
\[
\Pr[\phi(X_1, \ldots, X_k, P_1(X_1, \ldots, X_k), \ldots, P_\ell(X_1, \ldots, X_k)) = 0]
\]
的上界，则 A 在 \(q_G\) 次群操作预言机查询和双线性映射 \(e\) 查询后获胜的概率满足
\[
\text{Succ}(q_G) \leq P_m + \frac{(3q_G + k + 2)d}{p}.
\]

### 9. 结论与开放问题

我们描述了第一个多用途单向代理重签名，解决了CCS 2005年留下的问题。我们的基于随机预言机的提议还提供了比现有解决方案更高效的第一级性能。另一个方案恰好是标准模型中的第一个单向PRS。最后，我们展示了如何在选择密钥模型中构建单跳方案。

两个主要的开放问题仍然存在。首先，有趣的是看看是否有多层单向PRS在更经典的不可解性假设下具有高效的实现。一个更具挑战性的任务是找出——如果有的话——这样的原语实现，其中签名的大小和验证成本不会随着翻译次数的增加而线性增长。

### 致谢

作者感谢Mark Manulis和匿名审稿人的评论。第一位作者感谢比利时国家科学研究基金（F.R.S.-F.N.R.S.）的支持。第二位作者得到了欧盟委员会IST计划（合同号IST-2002-507932 ECRYPT）以及法国国家研究署PACE项目的支持。

### 参考文献
[此处省略参考文献列表，具体内容请参见原文]

希望这个优化后的文本能更好地帮助你理解相关内容。如果有任何进一步的需求，请告诉我！