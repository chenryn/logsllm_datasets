on their parameters. Some side-effects can be consid-
ered as equivalent to updating the object attributes, e.g.,
for strcpy(dst,src), the strlen ﬁeld (a sym-
bolic value that denotes the string length) of the dst
object is updated to that of the src object. Some side-
effects, however, impose constraints on the involved pa-
rameters. For example, after calling getcwd(buf,n),
the strlen of buf is less than n if the length of the cur-
rent path is less than n, and unchanged otherwise. In this
case, we also generate a program constraint conjunction.
A program statement in the execution trace is said to be
security critical if it may violate a security requirement. In
the current implementation of SecTAC, any statement in-
volving either a security-critical function or a pointer ad-
dition is a security-critical statement. SecTAC produces a
security constraint, i.e., a ﬁrst order logic expression, at ev-
ery security-critical statement.
4.2.2 Algorithm for Symbolic Executor
We now describe the detail of the SecTAC symbolic ex-
ecutor. We ﬁrst create a stack to keep track of the current
function object, i.e., the active function object in use, which
is always the one at the top of the stack. SecTAC then
processes each statement in the trace according to the fol-
lowing rules: (1) if it is a function entry, SecTAC creates
a new object of this function class and pushes the object
into the stack; (2) if it is a function return, SecTAC pops
an object from the stack; (3) If it is an assignment state-
ment, SecTAC performs symbolic execution on the left
and right expressions, and updates the object attributes for
the involved variables; (4) if it is a conditional statement,
SecTAC produces a program constraint conjunction that
captures which branch is exercised; (5) if it is a library func-
tion call, SecTAC processes as follows. If the function is
in the right part of an assignment statement, a new object
is created according to its return type. If the function fur-
ther limits its return value to a smaller range compared to its
type, the program constraint on this object is updated. If the
function also has side-effects, the attributes of the involved
objects are updated accordingly, and the program constraint
is also updated as needed. If the function is also a security-
critical function, a security constraint is generated.
Symbolic Execution on Expressions: A critical part
of symbolic execution is the symbolic execution on expres-
sions. The symbolic execution procedure on a given ex-
pression e works as follows: (1) if e is a constant number
or character, a new object of the class for such data type is
created, and its symbolic value is set to this constant value;
(2) if it is a constant string, a Pointer object is created,
and its strlen ﬁeld is set to be the length of this constant
string; (3) if it is a variable, we will locate the correspond-
ing object and return it; (4) if it is ∗v, we locate the object
corresponding to v and return the object speciﬁed by the
point_to ﬁeld of this pointer object; (5) if it is &v, we
locate the object corresponding to v and create a Pointer
object. We then set the point_to ﬁeld of the newly cre-
ated object to the object corresponding to v; (6) if it is v.m,
we locate the object of v, then return its member object with
the name m; (7) if it is e1 op e2, we recursively perform
symbolic execution on expressions e1 and e2. Based on the
types of the returned objects, we take different actions; (8)
if it is a library function call, we handle it in the same way
as we handle library function calls.
SecTAC generates a security constraint for every pointer
addition to check whether the result still points to the same
original object. We thus take special care of the addition be-
tween a Pointer object p and an Int object i as follows:
• If p points to a buffer, we create a new Pointer
object obj and set its space, start, and strlen
ﬁelds based on p and i. Speciﬁcally, obj.space
and obj.start are set
to p.space-i.sym and
p.start+i.sym respectively. obj.strlen is set to
the following conditional expression:
((p.strlen≥i.sym) (p.strlen-i.sym) newsym)
This expression indicates that obj.strlen is set to
p.strlen-i.sym if p.strlen≥i.sym, and a new
symbol newsym otherwise. A program constraint con-
junction is also produced for the new symbol newsym,
i.e., newsym≥ 0. Finally, object obj is returned.
• If p points to a composite type object, e.g. array or struct,
then we need to ﬁnd a member object inside this com-
posite object through offset i. In this case, we use the
getObject(i) method in object p.point_to to lo-
cate and return the object.
• If p points to neither a buffer nor a composite type data,
then it is a pointer arithmetic. In this case, a new object
will be created in a similar way as the ﬁrst case. The only
difference here is that the strlen ﬁeld need not be set.
Pointer analysis : We will discuss how we address the
pointer dependency problem mentioned in Section 4.1.2.
Speciﬁcally, when we create an object for a buffer, we also
include a number of links in this object through which we
can locate all Pointer objects that operate on this buffer.
Let us consider a particular pointer p that points into a
buffer. When we update the object for this pointer, we will
need to ﬁnd the object for the original buffer this pointer
points into and locate all Pointer objects that operate on
this buffer. Let q be a Pointer object we ﬁnd. We ﬁrst
check p.start and q.start to decide their relative po-
sitions in the buffer. There are two cases:
• If q’s position in the buffer is before that of p’s, we
compare q.strlen with the distance between them. If
q.strlen is larger than the distance, we have to update
q.strlen accordingly.
• If q’s position in the buffer is after p’s, we compare
p.strlen with the distance between their positions. If
p.strlen is larger than the distance, we have to update
q.strlen accordingly.
4.3 Step 3: Satisﬁability Analysis
Finally, the program and security constraints are ex-
pressed in SMT-LIB [19] format, which is recognized by
many SMT solvers. We use the SMT solver Yices [7] to
check the satisﬁability of PC ∧¬ SC for each SC and the PC
at the same point in the trace. Note that the PC at a given
point in the trace may include a huge number of conjunc-
tions. In this case, checking the satisﬁability of PC ∧¬ SC
could be very expensive. However, we note that a lot of PC
conjunctions are actually irrelevant to SC since they only
involves variable symbols that do not impact SC. Remov-
ing these irrelevant conjunctions will not change the result
of satisﬁability analysis. We thus use only SC-dependent
PC conjunctions to save the cost. Two conjunctions are said
to be directly related if they include at least one common
variable symbol. Then, starting from an empty S, we ﬁrst
identify all PC conjunctions that are directly related to SC
and put them in S. We then repeatedly check every PC con-
junction and add it into S if it is SC-dependent, i.e., directly
related to at least one conjunction in S. We stop when there
are no more SC-dependent PC conjunctions. Let PC! be the
conjunction of all conjunctions in S. We only need to check
the satisﬁability of PC! ∧¬ SC instead of PC ∧¬ SC.
4.4 False Negatives and Positives
SecTAC can detect a security vulnerability in a program
if (1) the vulnerability is modeled by one of the security
requirements, (2) an execution path that can trigger such se-
curity problem is exercised by one of the test cases, (3) the
program and security constraints are derived correctly, and
(4) the theorem prover for satisﬁability analysis can cor-
rectly ﬁnd a solution if PC ∧¬ SC is satisﬁable. In other
words, there will be false negatives if one of the above three
conditions is false. For example, if we derive constraints on
library functions from documentation, there might be false
negatives due to the inconsistency between the documen-
tation and the actual implementation. We can use LFI to
check such consistency [17]. Similarly, SecTAC will gen-
erate a false positive if (1) the theorem prover returns a so-
lution when PC ∧¬ SC is not satisﬁable or (2) the program
and security constraints are extracted incorrectly. In our ex-
periments, we did not ﬁnd any false positive.
5 Experiments
To evaluate the effectivenessof our approach, we applied
SecTAC on 14 benchmark programs [28], two open source
http server programs, nullhttpd-0.5.1 and lancer,
and an open source ftp server program bftpd-2.3. We
used their latest versions in our experiment. The bench-
mark programs represent various kinds of memory corrup-
tion vulnerabilities in certain versions of the Bind, Send-
mail, and Wu-ftp programs. They have been used to evalu-
ate the effectiveness of many buffer overﬂowdetection tools
[28, 27, 26]. For each of these programs, there is a buggy
version and a ﬁxed version. We used the buggy version in
our experiment. Our results show that SecTAC can detect
every reported vulnerability as long as the vulnerability ex-
ists in the traces. In addition, SecTAC also detected six vul-
nerabilities in the benchmark programs, four vulnerabilities
in nullhttpd-0.5.1, four vulnerabilities in lancer,
and one vulnerability in bftpd-2.3 that, to the best of
our knowledge, have not been reported previously. Next,
we will report our ﬁndings in detail.
Table 3 summarizes our experimental results. The ﬁrst
14 rows show the result of evaluating SecTAC on the 14
benchmark programs [28]. As shown in the last column of
the table, we found new vulnerabilities in Bind 4, Sendmail
1, Sendmail 3, Wu-ftp 2, Wu-ftp 3, nullhttpd-0.5.1,
lancer, and bftpd2.3 programs.
Test inputs: For each buggy benchmark program ver-
sion, a speciﬁc input ﬁle or hard-coded assignment to vari-
ables is provided in [28] as the test data to trigger the vul-
nerability. However, a major merit of SecTAC is that it
can detect vulnerabilities under test cases from functional
testing that do not trigger vulnerability. Hence, in our ex-
periments, whenever it is possible, we construct test inputs
that exercise paths containing the reported vulnerabilities
but do not trigger them. Only when it is impossible to ﬁnd a
test case exercising the known vulnerable path without trig-
gering the vulnerability, do we use the test input provided in
[28]. For the sake of presentation, we call a test case normal
if it does not trigger any vulnerability. We call the test cases
Time(mm:ss) #KnownBugs #FoundBugs
Program
Bind 1
Bind 2
Bind 3
Bind 4
Sendmail 1
Sendmail 2
Sendmail 3
Sendmail 4
Sendmail 5
Sendmail 6
Sendmail 7
Wu-ftp 1
Wu-ftp 2
Wu-ftp 3
lancer
bftpd-2.3
nullhttpd-0.5.1
LOC
1116
1306
380
645
537
791
416
485
622
390
929
503
744
689
2328
4261
5766
www.cnn.com
Input
cnn.com
default
www.nbc.com;
www.cnn.com
default
default
default
default
default
default
default
/tmp/aa
/tmp/test.c
/tmp/aa
50 test cases
50 test cases
10 test cases
LOT
539
1117
365
162
6207
5509
2534
1379
6669
129
2145
79
106
399
12447
118657
65027
00:01
00:01
00:01
00:01
00:02
00:03
00:03
00:03
00:03
00:01
00:03
00:01
00:01
00:01
08:07
49:18
11:42
1
1
1
1
6(5)∗
1
1
4
3
1
2
4
1
6
1
0
0
1
1
1
2
6
1
2
4
3
1
2
4
2
8
3
4
1
#FP
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0