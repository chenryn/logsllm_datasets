chronous communication available to all parties. In its basic
form the send command is invoked as in Listing 1. Here,
we send the contents of the variable var to the player with
identiﬁer 2 under the message name var id. The variable
var is cleared after the send command, such that it can-
not be reused. This ensures that each variable is sent at
most once (which is also always suﬃcient).
1 send ( 2 ,
v a r , ” v a r i d ”) ;
Listing 1: Send Command
Player identiﬁers are assigned globally in a conﬁguration
ﬁle at the start of the protocol execution. An identiﬁer is
associated with an IP address and port number where the
player’s code receives messages. Message names must be
unique for a receiving party. Otherwise, messages may be
lost due to overlapping communication.
The other party can receive a previously sent value using
the read command. We show in Listing 2 an example where
the player receives content under the message name var id.
1 v ar = read ( ” v a r i d ”) ;
Listing 2: Receive Command
A particular design principle of the L1 language is that the
code for all players is integrated into one program. This one
(and the same) program is then executed by all players. This
corresponds to secure computation where the functionality
(and the protocol) is known to all players in advance. Now
in order to implement the sending and receiving of messages
between the parties – using the send and read commands
– we use player-speciﬁc code.
Player-speciﬁc code is only executed at a player with a
speciﬁc identiﬁer. This player’s identiﬁer is placed at the
start of the statement. If no such identiﬁer is present, the
statement is executed by all parties. We can therefore im-
plement the send and receive commands within the same
program. The following Listing 3 combines the code of the
previous two listings.
a secret share, but converting a secret share to an integer
requires a type cast. When an expression is assigned to a se-
cret share, a modulo operation is performed automatically.
We declare a secret share at each party as in Listing 4.
1 i n t p = getModulus( pubKey ) ;
2 share s ;
Listing 4: Secret Share Declaration
There are several ciphertext data types. It not only de-
pends on the encryption system used, but also for each pub-
lic key encryption system there are two types of ciphertexts:
one where the player has the private key and one where the
player has only the public key. Our assumption is that for
ciphertexts where the player has the private key no other
player can access the plaintext, i.e. the private key is indeed
conﬁdential. Similar to secret shares we parameterize the
ciphertext type with the respective (public or private) key.
A ciphertext contains by deﬁnition a secret share as pay-
load. This is not explicitly declared in our language exten-
sion. Furthermore, this secret share has the same modulus as
the homomorphic operation in the encryption system using
the speciﬁed key. A ciphertext can be internally represented
as an object containing multi-precision integers – the cipher-
text value – and a reference to a key. Again, an integer can
be implicitly converted into a ciphertext, but converting a
ciphertext to an integer requires a type cast. We declare
ciphertexts as in Listing 5.
1 pubk pubKey ;
2 cipher c ;
3
4 prvk priv Key ;
5 cipher d ;
1 1 : send ( 2 ,
2 2 : v ar = read ( ” v a r i d ”) ;
v a r , ” v a r i d ”) ;
Listing 5: Ciphertext Declaration
Listing 3: Message Sending and Receiving
4.2 Cryptographic Protocols
4.1 Data Types
The L1 language has its own type system for basic, non-
security relevant types. This type system is orthogonal to
our security type system. L1 provides data types for multi-
precision integers (int), public (pubk) and private (privk)
keys. We extend this for the purpose of our type system
with data types for secret shares and ciphertexts.
L1 implements copy semantics for variable assignments.
Even if a complex variable (such as a share, ciphertext or a
multi-precision integer) is assigned, then the assigned value
is copied onto the memory of the assigned variable. This
diﬀers from the pointer semantics of Java where only a ref-
erence is assigned.
A secret share type is parameterized by the modulus of
the share. We create only additive shares, i.e., let p be the
modulus and s (s  x , y ;
2 share r ;
3
4 1 :
5
6
7
8
9 2 :
} ” ,
x , y ) ;
r = gcdecrypt ( 1 , ”compare ” , x , y ) ;
Listing 6: Garbled Circuit Protocol
of possible choices in the oblivious transfer. The input array
is cleared after sending. The receiving command takes the
index as a parameter and outputs the selected message. We
need to specify the communicating party in the receive com-
mand as well, since it is an interactive protocol. In Listing 7
we show an example for an 1-out-of-2 oblivious transfer.1
1 1 : share x ∗ [ 2 ] ;
2 2 : share y ;
3 2 :
4
5 1 : otsend ( 2 , ” i d ” ,
6 2 : y = otread ( 1 , ” i d ” , b ) ;
i n t b ;
x ) ;
Listing 7: Oblivious Transfer
5. REVERSE TAINT CHECKING
Our type system ensure that only freshly and indepen-
dently chosen random variables are revealed to the other
party. We distinguish these variables by typing them as
untainted (versus tainted for variables during processing).
Each basic data type of secret share, ciphertext or array can
be tainted or untainted. We perform the operation of re-
randomization for reverse taint checking in order to create
the untainted type of variables.
Taint checking2 is a programming language operation that
allows to track whether inputs are processed safely. It helps
to prevent certain common programming errors, such as
SQL injections or buﬀer overﬂows. In taint checking mode
each variable set by an input is tainted. Then after certain
checks have been performed, e.g.
in PERL using regular
expressions, the variable can be cleared as untainted. Ev-
ery time a tainted variable is used in a dangerous operation,
such as accessing a database, the program is aborted with a
fatal error.
We call our operation reverse taint checking, because on
the one hand we use a similar variable tracking mechanism
(although statically veriﬁable), but on the other hand the
taint ﬂag is set by local operations and checked on sending
data. In detail our algorithm works as follows. Each vari-
able is either tainted or untainted. All variables assigned by
expressions are tainted, since they are result of a local com-
putation. It does not matter whether the assignment expres-
sion is a read command, some arithmetic operation or even
a constant. Every regularly assigned variable is tainted.
The fundamental check is that the sending commands do
not accept tainted variables as parameters. If the parameter
is tainted, then the program does not type check. Only
untainted variables may be sent to the other parties.
1The star in line 1 is explained after introducing our security
type system.
2http://perldoc.perl.org/perlsec.html#Taint-mode
We deﬁne the semantics of an untainted variable as we use
it in our security type system: An untainted variable is inde-
pendently random, immutable, and use-once. Independently
random implies that it contains indepedently randomly dis-
tributed data.
It is immutable, as it can only be set by
special commands and the randomness is chosen by the sys-
tem. An untainted variable can only be used once and is
cleared after use in a send or re-randomization command.
We summarize these properties in Deﬁnition 1. Next, we
need to describe how to create an untainted variable.
Definition 1. An untainted variable is an immutable ob-
ject that contains random data independent of all other un-
tainted variables. It can be used in send and re-randomization
command and is cleared after use.
5.1 Re-Randomization
We perform a type-dependent re-randomization operation
in order to create untainted variables. Re-randomization re-
news the randomness in a tainted variable using fresh ran-
dom input. Depending on the type we perform diﬀerent
re-randomization operations. A re-randomize operation is
written as in Listing 8.
1 share s ;
2 cipher c ;
3 cipher d ;
4 share x [ 2 ] ;
5 share r ;
6
7
8
9
10
s = rerandomize ( s ,
c = rerandomize ( c ,
d = rerandomize ( d , nul l ) ;
x = rerandomize ( x ,
r ) ;
r ) ;
r ) ;
Listing 8: Re-Randomization
Our diﬀerent re-randomization operations are as follows:
• Secret share: A secret share is associated with a mod-
ulus p. We choose a fresh random number r uniformly
in Zp. Let s be the value of the secret share. We return
the updated
s ← s − r
(mod p)
and copy unto the randomization parameter (given to
the function) the new secret share with the value r.
• Ciphertext with public key only: The ciphertext and
the contained secret share are associated with the same
modulus p. We again choose a fresh random number
r uniformly in Zp. We encrypt the negation of this
random number r using the associated public key. Let
E(−r) denote this encryption and c denote the cipher-
text of the re-randomized variable. We return the fol-
lowing, updated ciphertext
c ← c · E(−r)
and copy unto the randomization parameter the new
secret share with the value r.
• Ciphertext with private key: We assume that the pos-
sessor of the private key is its sole possessor. There-
fore the contained secret share cannot be accessed by
any other party and there is no need to re-randomize
it. Nevertheless, we need to re-randomize the cipher-
text. We use the usual re-randomization of IND-CPA
secure, homomorphic encryption. Let d denote this
ciphertext. We return it as
d ← d · E(0)
The randomization parameter is not used.
• Array: For arrays we choose the randomization pa-
rameter (i.e. r, E(r) or E(0)) only once. The same
randomization is applied to each element of the array
and the randomization parameter is copied as usual.
The return array contains the re-randomized elements.
Note that only the array is untainted by this operation.
Each element in the array remains tainted. This en-
ables using the array in an oblivious transfer command,
but prevents the elements from being sent individually
using the send command.
5.2 Re-Randomization with Untainted Variables
Sometimes it is necessary to choose random shares be-
fore performing an operation and sending the result. An
instance of this requirement occurs in our second example
of substring creation in Section 7.2. Usually an untainted
variable is created during a re-randomization command and
then sent over the network, but instead of directly sending it,
the untainted variable can be used to re-randomize another
variable. The semantics of this re-randomization operation
is that the untainted input parameter is cleared after the
re-randomization command (just as it is cleared after a send
command), such that it cannot be reused. Yet, the return
variable is then subsequently untainted and can be used as
such. Listing 9 shows an example where an untainted vari-
able is used to re-randomize another variable. The variable
s is null after the execution of this code.
The complete re-randomization function is depicted in Al-
gorithm 1. It is easy to verify from Algorithm 1 that after
re-randomization one variable – the untainted one – is inde-
pendently randomly distributed as required by Deﬁnition 1.
This holds even in case of re-randomization with untainted
variables.
s = s − r
1 share r ;
2
3 / /
4 / / r
5
6 / /
7 / /
8
s e t
i s
t = t − s
s
s = rerandomize ( s ,
r ) ;
a n d c h o s e n
f r e s h
i s u s e d a n d t h e n c l e a r e d
t = rerandomize ( t ,
s ) ;
Listing 9: Re-Randomization with Untainted Variable
5.3 Output
If all variables were only to be sent as re-randomized vari-
ables, no useful result could ever be obtained, i.e. every
(useful) secure computation has an admissible information
ﬂow. Therefore we need to allow reconstruction of the out-
put values from the secret shares. Let s be a secret share
designated as output. We use an output statement in L1 in
order to declare output, but before we can output the re-
sult the parties need to exchange result secret shares. The
output command is restricted to secret shares as parame-
ter. They can only send the secret share if the variable is
untainted. The programmer needs to declare that this vari-