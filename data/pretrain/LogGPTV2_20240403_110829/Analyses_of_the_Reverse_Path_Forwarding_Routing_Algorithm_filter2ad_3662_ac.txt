### Figure 7: No Further Information Propagation
- **Nodes and Links:**
  - a, b, c, d
  - Age: Recent, Recent, Old, Recent
  - Node Link Belief: Up, Up, Up, Up

**Figure 7.** No more information can be propagated, but Nodes 0 and 1 have incorrect information about link c.

### Definitions
- **Recent Edge:** An edge is considered recent if it is time-stamped strictly more recently than the last time at which a link state changed.
- **Note:** Recent information is necessarily correct.

**Definition 2.** A node \( n \) has \( d \)-stabilized if for every edge \( e \) that has at least one node within distance \( d \) of \( n \), \( n \) has recent information about \( e \).

**Definition 3.** A network has \( d \)-stabilized if every node in the network has \( d \)-stabilized.

### Proof
Let \( S \) be the set of distances between nodes in the network:
\[ S = \{d(n, n') \mid n, n' \in \text{Node}\} \]

Order \( S \) as:
\[ S = \{d_0, d_1, \ldots, d_N\} \]
where \( d_0 < d_1 < \ldots < d_N \).

We show that, assuming no further link state changes, the network will eventually \( d_k \)-stabilize for each \( k \); the proof is by induction on \( k \).

**Base Case:**
For \( d_0 = 0 \), note that the network will 0-stabilize one time unit after a link state change.

**Inductive Step:**
We will show that if the network \( d_k \)-stabilizes, then, assuming no further link state changes, it will eventually \( d_{k+1} \)-stabilize.

First, observe that once the network has \( d_k \)-stabilized, assuming no further changes in link state, it will remain \( d_k \)-stabilized: a node will never overwrite recent information with non-recent information because of the way timestamps are treated.

Now, suppose the network has \( d_k \)-stabilized, and suppose further that node \( x \) is at distance \( d_{k+1} \) from node \( n \). We need to show that \( n \) eventually accepts recent information about all edges incident to \( x \).

By definition of network \( d_k \)-stability, we know that every node has recent information about every edge that has at least one node within distance \( d_k \). In particular, node \( n \) has correct information about all the links in all shortest paths to \( x \) since every link in such a path will have at least one node within distance \( d_k \). Hence, \( n \) will pick a provider \( p \) for \( x \). We perform a case analysis over \( p \):

- **Case \( p = x \):** Then \( n \) receives and accepts recent information about edges incident to \( x \) directly from \( x \).
- **Case \( p \neq x \):** Then \( p \) is at distance at most \( d_k \) from \( x \), so \( p \) holds recent information about all edges incident to \( x \) by definition of \( d_k \)-stability; \( p \) will then pass this information to \( n \).

We have shown that \( n \) will eventually accept recent information about all edges incident to \( x \), and so the network will eventually \( d_{k+1} \)-stabilize.

Hence, by induction, the network will eventually \( d_N \)-stabilize, where \( d_N \) is the diameter of the network: every node will eventually hold recent information about all edges in its connected component.

### Discussion
In this paper, we have used a variety of techniques to explore and analyze the reverse path algorithm, a routing algorithm that aims to ensure that all messages sent will eventually be received while minimizing the number of propagations of each message. The under-specification of the algorithm means that it is open to a variety of interpretations regarding how nodes select their providers. We have considered and analyzed those that seemed plausible, using the errors discovered to identify necessary additional constraints and proving correctness under these conditions.

#### Validity of Identified Errors
- **Alloy Interpretation (Unit Cost Links):** No errors were found, but this seems too restrictive. It is unlikely that the cost of each link will be identical, making this interpretation unrealistic.
- **CSP Model (Non-deterministic Provider Selection):** This model appears unnecessarily non-deterministic, and we could not think of a scenario where a single node would sensibly choose to select two nodes as providers for each other. This model is also unrealistic.
- **CSP and Alloy Models (Cost Dependent on Originator):** Both tools identified the same error, which is a genuine error in the protocol. This scenario is plausible in both political and economic contexts, such as in telecommunications or military settings.

#### Necessary Additional Constraints
We argued that the scenario leading to the error identified in both CSP Interpretation 2 and Alloy Interpretation 2 is plausible. Our hypothesis, proven correct in Section 6, was that if the cost of links is independent of the sender, then correctness is guaranteed.

#### Comparison of FDR and Alloy Analyzer
- **FDR and Alloy Analyzer:** Both tools found the same error for a four-node ring and were unable to handle larger systems. The Alloy Analyzer took significantly longer than FDR, possibly due to our relative lack of experience in coding in Alloy.
- **Complexity:** Even for a four-node ring, the problem involves considering \( 4^{16} \approx 4 \times 10^9 \) states, making it reasonable that these tools cannot handle larger systems.

#### General Applicability of Results
- **Model-Checkers:** Although they perform an exhaustive search, they can only analyze finite and often small systems. The absence of errors in a small network does not guarantee the absence of errors in a larger network.
- **Java Tool:** This tool can consider arbitrarily large systems but performs a random rather than exhaustive search. The absence of errors does not provide a proof of correctness.
- **Hand-Proof:** This worked only once we had the correct hypothesis.

Their combined strengths enabled us to identify the necessary conditions for correctness and complete the proof.

#### Conclusions
- **Correctness Conditions:**
  - For networks where each node calculates routes based on shortest paths, the reverse path forwarding algorithm is correct if the cost of each link is independent of the sender.
  - The algorithm is incorrect if the cost of links can depend on the node using that link.
- **Tool Comparison:**
  - FDR and the Alloy Analyzer were comparable in finding the same flaw and being unable to cope with networks larger than a four-node ring.
  - This example pushes the limits of computational feasibility.
- **Combination of Techniques:**
  - A combination of proof techniques can lead to a proof of correctness for distributed algorithms where individual techniques alone could not.

**Acknowledgements:**
This research was funded by the UK Ministry of Defence through QinetiQ. We thank Irfan Zakiuddin for suggesting the analysis of the reverse path forwarding protocol and for interesting discussions. We also thank Bill Roscoe for insightful comments and useful discussions that led us towards the proof of correctness. Finally, we thank the anonymous reviewers for their helpful comments and suggestions.

**References:**
[1] Y. K. Dalal and R. M. Metcalfe, “Reverse path forwarding of broadcast packets,” Communications of the ACM, vol. 21, no. 12, pp. 1040–1048, 1978.
[2] R. Perlman, Interconnections: Bridges and Routers. Addison-Wesley, 1992.
[3] A. W. Roscoe, “Model-checking CSP,” in A Classical Mind, Essays in Honour of C. A. R. Hoare. Prentice-Hall, 1994.
[4] C. A. R. Hoare, Communicating Sequential Processes. Prentice Hall, 1985.
[5] A. W. Roscoe, The Theory and Practice of Concurrency. Prentice Hall, 1997.
[6] D. Jackson, I. Shlyakhter, and M. Sridharan, “A micromodularity mechanism,” in Proceedings of the ACM SIGSOFT Conference on Foundations of Software Engineering/European Software Engineering Conference (FSE/ESEC ’01), 2001.
[7] C. Bolton and G. Lowe, “Reverse path forwarding,” Oxford University Computing Laboratory, Tech. Rep., 2003, Available at http://web.comlab.ox.ac.uk/oucl/work/gavin.lowe/Papers/RPF.ps.
[8] E. M. Clarke, O. Grumberg, and D. Peled, Model Checking. MIT Press, 2000.
[9] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer, “Model checking a fault-tolerant startup algorithm: From design exploration to exhaustive fault simulation,” in Proceedings of the International Conference on Dependable Systems and Networks (DSN ’04), 2004.
[10] J. M. Spivey, The Z Notation: A Reference Manual. Prentice-Hall International, 1992.