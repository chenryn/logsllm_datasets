a
b
c
d
Age
Recent
Recent
Old
Recent
1
Node Link Belief
Up
Up
Up
Up
a
b
c
d
Age
Recent
Recent
Old
Recent
Figure 7. No more information can be propagated, but Nodes 0 and 1 have incorrect information about link c.
an edge is recent if it is time-stamped strictly more recently
than the last time at which a link state changed.
Note that recent information is necessarily correct.
Deﬁnition 2 A node n has d-stabilised if for every edge e
that has at least one node within distance d of n, n has
recent information about e.
Deﬁnition 3 A network has d-stabilised if every node has
d-stabilised.
Proof
Let S be the set of distances between nodes in the net-
work:
S = {d(n,n
(cid:4)) | n,n
(cid:4) ∈ Node}.
,d1
}
.
where
, . . . ,dN
Order S as
S = {d0
We show that, assuming no further link state changes, the
network will eventually dk-stabilise, for each k; the proof is
by induction on k.
= 0, note that the network will
As the base case, for d0
< . . . < dN
d0
< d1
0-stabilise one time unit after a link state change.
In our inductive step we will show that if the network
dk-stabilises then, assuming no further link state changes,
it will eventually dk+1-stabilise.
Observe ﬁrst that once the network has dk-stabilised,
assuming no further changes in link state it will remain
dk-stabilised: a node will never over-write recent informa-
tion with non-recent information because of the way time-
stamps are treated.
Now suppose the network has dk-stabilised, and sup-
pose further that node x is at distance dk+1 from node n.
We need to show that n eventually accepts recent informa-
tion about all edges incident to x. By deﬁnition of network
dk-stability, we know that every node has recent informa-
tion about every edge that has at least one node within dis-
tance dk. In particular, node n has correct information about
all the links in all shortest paths to x since every link in such
a path will have at least one node within distance dk. Hence
n will pick a provider p for x. We perform a case analysis
over p:
• Case p = x: then n receives and accepts recent infor-
mation about edges incident to x directly from x.
• Case p (cid:6)= x: then p is at distance at most dk from x5,
so holds recent information about all edges incident
to x, by deﬁnition of dk-stability; p will then pass this
information to n.
We have shown that n will eventually accept recent infor-
mation about all edges incident to x, and so the network
will eventually dk+1-stabilise.
Hence, by induction, the network will eventually dN-
stabilise, where dN is the diameter of the network: ev-
ery node will eventually hold recent information about all
edges in its connected component.
2
7. Discussion
In this paper we have used a variety of techniques to
explore and analyse the reverse path algorithm, a routing
algorithm that aims to ensure that all messages sent will
eventually be received whilst minimising the number of
propagations of each message. The under-speciﬁcation of
the algorithm means that it is open to a variety of inter-
pretations as to how nodes select their providers. We have
considered and analysed those that seemed plausible. We
have used the errors discovered to identify necessary addi-
tional constraints and have proved correctness under these
conditions.
In particular we presented counter examples found by
the model-checkers FDR and the Alloy Analyzer, illustrat-
ing that the protocol is incorrect if the cost of links is de-
pendent upon the node using that link. We then considered
the case where the cost of links is independent of the node
using that link: we used a special-purpose network sam-
pling program to increase conﬁdence in the correctness of
this stricter protocol, and then performed a hand-proof to
verify correctness.
5This step uses the assumption that the costs of each edge are the same
for all nodes; if this assumption does not hold, the cost of p sending to x
might be greater than the cost of n sending to x via p.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
7.1. Validity of identiﬁed errors
7.3. A comparison of FDR and the Alloy Analyzer
We identiﬁed errors in several interpretations of the pro-
tocol and must now decide whether these are valid errors:
could such a situation realistically arise?
Consider the ﬁrst Alloy interpretation in which links
were assumed to be of unit cost. No errors were found
in this model, however, this seems a more restrictive con-
dition than we would wish. Regardless of whether the cost
of sending a message along a link is ﬁnancial, temporal or
determined by some other measure, it is very unlikely that
the cost of each will be identical: this interpretation is un-
realistic.
At the other end other scale, the ﬁrst CSP model appears
to be unnecessarily non-deterministic: we could not think
of a scenario in which a single node would sensibly choose
to select two nodes as the providers for each other. We
conclude that this model, like the ﬁrst Alloy interpretation,
is unrealistic.
Although their implementations are different, the sec-
ond CSP model and the second Alloy model corresponded
to the same interpretation of the protocol—each node con-
structs a spanning tree that is a subgraph of those edges
it believes to be up, and then uses this to determine the
providers for all nodes to which it is connected—and, un-
surprisingly, FDR and the Alloy Analyzer identiﬁed the
same error.
This interpretation is equivalent to a scenario in which
the cost of each link might be dependent on the originator
of the message. We can think of both political and eco-
nomical reasons in which such a scenario might occur—
for instance, in the telecommunications industry it might
be more expensive for a subscriber of one network to send
a message via a particular route than for a subscriber of an-
other network; in a military setting, particular routes might
be avoided for strategic reasons—hence we consider the
circumstances under which these models fail to be perfectly
plausible: this is a real error in the protocol.
7.2. Necessary additional constraints
We argued that the scenario that led to the error identi-
ﬁed in both CSP Interpretation 2 and Alloy Interpretation
2 is a plausible one: the error identiﬁed by both tools is a
genuine error in the protocol. We therefore needed to iden-
tify additional constraints that overcame this error. Our hy-
pothesis, proved correct in Section 6, was that if the cost
of links is independent of the sender, then correctness is
guaranteed.
Whether the reverse path forwarding algorithm is used
independently or as part of a larger protocol, correctness
can be guaranteed provided the cost of a link is independent
of the node that is using that link.
This case study was a good one for comparing the ca-
pabilities of FDR and Alloy as it was equally natural to
consider the problem from either a state-based or an event-
based perspective:
it was relatively simple to construct
models of the system in both CSP and Alloy.
FDR and the Alloy Analyzer were well matched in this
task: both found the same error for the four node ring, and
both were unable to consider any larger system. Our only
reason for favouring one tool over the other is that for each
network the Alloy Analyzer took signiﬁcantly longer than
FDR either to ﬁnd an error or to conﬁrm that no such error
exists. Perhaps this discrepancy is due to our relative lack
of experience in coding in Alloy.
At ﬁrst glance it seems disappointing that both model-
checkers were stretched to the limits of their capabilities
for systems as small as a four node ring, however, when
we consider the complexity of the problem—we need to
consider 416 ≈ 4× 109 states even for a four node ring—it
is entirely reasonable that these tools should not be able to
handle larger systems. Moreover, we can be encouraged
by the fact that our analysis of the four node ring, and our
generalisation of the error identiﬁed in that instance, led us
to correctly identify the additional constraints necessary for
our ﬁnal correctness proof.
7.4. General applicability of results
Whilst the focus of this piece of work was to prove the
correctness or otherwise of the reverse path forwarding al-
gorithm, a broader goal was to explore the efﬁcacy of a
variety of proof techniques.
Each technique has its own individual limitations.
• Although they perform an exhaustive search, model-
checkers can analyse only ﬁnite (and often “small”)
systems. Whilst any errors found are valid errors, the
absence of errors in a small network does not guaran-
tee the absence of errors in a larger network.
• Unlike FDR and the Alloy Analyzer, the Java tool was
able to consider arbitrarily large systems. However,
it performed a random rather than exhaustive search.
Once more the absence of errors does not provide a
proof of correctness.
• The hand-proof worked only once we had the correct
hypothesis.
However, their combined strengths enabled us to identify
the conditions for necessary correctness and to complete
the proof.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply. 
As it turned out the errors found in the four node ring
were sufﬁcient for us to identify the necessary additional
constraints.
The analysis performed by the special-purpose Java pro-
gram, whilst far from exhaustive—indeed, given that there
are, for instance, approximately 3.5 × 1013 different 10-
node networks, an exhaustive analysis is infeasible—had
high coverage because it was relatively fast (it could im-
mediately start analysing networks, whereas the states of
interest in the FDR and Alloy models are situated quite
deep within the search tree, and so are only reached af-
ter considerable computation).
It was hoped that failing
conﬁgurations are sufﬁciently dense in the space of all
conﬁgurations that this technique would have hit one had
there been one; after a signiﬁcant number of checks—over
2× 108 networks of varying sizes and conﬁgurations were
considered—we were sufﬁciently conﬁdent in the correct-
ness of our conditions to attempt a hand proof.
Our conﬁdence turned out to be well-founded and the
hand-proof conﬁrmed the correctness of the protocol sub-
ject to the additional constraints.
In this piece of work we have demonstrated how a va-
riety of techniques, none of which could have been used
individually to solve the problem, could be used effectively
together to verify the correctness of the reverse path for-
warding protocol. We believe that a similar combination of
techniques would be useful for proving the correctness of
other large distributed algorithms.
7.5. Conclusions
Assuming the protocol to be correct if all connected
nodes have the same beliefs about all links in their con-
nected component, our conclusions are as follows:
• For networks in which each node calculates routes
based on shortest paths, and uses these to determine
the providers for nodes in its connected component,
the reverse path forwarding algorithm is
– correct if the cost of each link is independent of
the sender;
– incorrect if the cost of links can depend upon the
node using that link.
• FDR and the Alloy Analyzer were comparable in that
both found the same ﬂaw in the protocol and both
were unable to cope with networks larger than a four
node ring.
• This example is pushing the limits of what is compu-
tationally feasible.
• A combination of proof techniques can lead to a proof
of correctness of a distributed algorithm where indi-
vidual techniques alone could not.
We conclude by observing that in these days of power-
ful analysis tools, it is easy to become reluctant—or even
scared—to perform proofs; however, sometimes a hand-
proof is appropriate.
Acknowledgements
This research was funded by the UK Ministry of De-
fence through QinetiQ.
We would like to thank Irfan Zakiuddin for suggesting
that we analyse the reverse path forwarding protocol, and
for interesting discussions. We would also like to thank Bill
Roscoe for insightful comments and useful discussions that
lead us towards the proof of correctness.
Finally we would like to thank the anonymous reviews
for their helpful comments and suggestions.
References
[1] Y. K. Dalal and R. M. Metcalfe, “Reverse path forwarding
of broadcast packets,” Communications of the ACM, vol. 21,
no. 12, pp. 1040–1048, 1978.
[2] R. Perlman,
Interconnections:
Bridges and Routers.
Addison-Wesley, 1992.
[3] A. W. Roscoe, “Model-checking CSP,” in A Classical Mind,
Essays in Honour of C. A. R. Hoare. Prentice-Hall, 1994.
[4] C. A. R. Hoare, Communicating Sequential Processes.
Prentice Hall, 1985.
[5] A. W. Roscoe, The Theory and Practice of Concurrency.
Prentice Hall, 1997.
[6] D.
Jackson,
“A
I. Shlyakhter,
micromodularity mechanism,”
the
ACM SIGSOFT Conference on Foundations of Software
Engineering/European Software Engineering Conference
(FSE/ESEC ’01), 2001.
and M. Sridharan,
in Proceedings of
[7] C. Bolton and G. Lowe, “Reverse path forwarding,” Oxford
University Computing Laboratory, Tech. Rep., 2003, Avail-
able at http://web.comlab.ox.ac.uk/oucl/work/gavin.lowe/
Papers/RPF.ps.
[8] E. M. Clarke, O. Grumberg, and D. Peled, Model Checking.
MIT Press, 2000.
[9] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer, “Model
checking a fault-tolerant startup algorithm: From design ex-
ploration to exhaustive fault simulation,” in Proceedings of
the International Conference on Dependable Systems and
Networks (DSN ’04), 2004.
[10] J. M. Spivey, The Z Notation:
Prentice-Hall International, 1992.
a Reference Manual.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:36 UTC from IEEE Xplore.  Restrictions apply.