    EPOLLOUT    //表示对应的文件描述符可以写；
    EPOLLPRI    //表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；
    EPOLLERR    //表示对应的文件描述符发生错误；
    EPOLLHUP    //表示对应的文件描述符被挂断；
    EPOLLET     //将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。
    EPOLLONESHOT//只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里。
了解了基本情况，那么直接来看基本的案例代码
`epoll_server.c`
    do
    {
        int client_fd, sockfd, epfd, nfds;
        ssize_t n;
        char buf_write[READ_MAX_SIZE] = SEND_2_CLIENT_MSG;
        char buf_read[WRITE_MAX_SIZE];
        memset(buf_read, 0, sizeof(buf_read));
        socklen_t clilen;
        //声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件
        struct epoll_event ev, events[20];
        //生成用于处理accept的epoll专用的文件描述符
        epfd = epoll_create(256);
        struct sockaddr_in client_addr;
        struct sockaddr_in server_addr;
        server_fd = socket(AF_INET, SOCK_STREAM, 0);
        // 设置为非阻塞
        fcntl(server_fd, F_SETFL, O_NONBLOCK);
        if (server_fd == -1)
        {
            handle_error("socket");
            break;
        }
        //把socket设置为非阻塞方式
        //setnonblocking(server_fd);
        //设置与要处理的事件相关的文件描述符
        ev.data.fd = server_fd;
        //设置要处理的事件类型
        ev.events = EPOLLIN | EPOLLET;
        //注册epoll事件
        epoll_ctl(epfd, EPOLL_CTL_ADD, server_fd, &ev);
        bzero(&server_addr, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        server_addr.sin_port = htons(10086);
        if (-1 == bind(server_fd, (SA *)&server_addr, sizeof(server_addr)))
        {
            handle_error("bind");
            break;
        }
        if (-1 == listen(server_fd, LISTEN_BACKLOG))
        {
            handle_error("listen");
            break;
        }
        for (;;)
        {
            //等待epoll事件的发生
            nfds = epoll_wait(epfd, events, 20, 500);
            if (nfds == -1)
            {
                handle_error("epoll_wait");
                break;
            }
            //处理所发生的所有事件
            for (int i = 0; i 
    typedef void (*sighandler_t)(int);
    sighandler_t signal(int signum, sighandler_t handler);        
    int sigaction(int signum, const struct sigaction *act,     
                 struct sigaction *oldact);
其中`sigaction`结构体
    struct sigaction {
      void     (*sa_handler)(int);                           // 信号处理函数
      void     (*sa_sigaction)(int, siginfo_t *, void *);    // 同上, 某些OS实现时联合体
      sigset_t   sa_mask;                                    // 信号掩码, 用于屏蔽信号
      int        sa_flags;                                   // 设置标志
      void     (*sa_restorer)(void);                         // 不是为应用准备的,见sigreturn(2)
    };
其中设置标志，使用`fcntl`函数
    #include 
    #include 
    int fcntl(int fd, int cmd, ... /* arg */ );
这里没有看到特别大的用处，直接给一个案例代码，以后遇到再细说
`sigio_server.c`
    int server_fd;
    void do_sigio(int sig)
    {
        char buf_read[READ_MAX_SIZE];
        memset((void *)buf_read, 0, sizeof(buf_read));
        struct sockaddr_in client_addr; 
        unsigned int clntLen; 
        int recvMsgSize; 
        do 
        {
            clntLen = sizeof(client_addr);
            if ((recvMsgSize = recvfrom(server_fd, 
                                    buf_read, 
                                    READ_MAX_SIZE, 
                                    MSG_WAITALL,
                                    (SA *)&client_addr, 
                                    &clntLen)) < 0)
            {
                if (errno != EWOULDBLOCK)
                {
                    handle_error("recvfrom");
                    break;
                }
            }
            else
            {
                printf("connection from %s, port %d, data: %sn", 
                        inet_ntoa(client_addr.sin_addr), 
                        ntohs(client_addr.sin_port), buf_read);
                if (sendto(server_fd, 
                           SEND_2_CLIENT_MSG, 
                           strlen(SEND_2_CLIENT_MSG), 
                           0, 
                           (SA *)&client_addr, 
                           sizeof(client_addr)) != strlen(SEND_2_CLIENT_MSG))
                {
                    handle_error("sendto");
                    break;
                }
            }
        } while (0);
    }
    int main()
    {
        server_fd = -1;
        do
        {
            struct sockaddr_in server_addr;
            server_fd = socket(AF_INET, SOCK_DGRAM, 0);
            if (server_fd == -1)
            {
                handle_error("socket");
                break;
            }
            bzero((char *)&server_addr, sizeof(server_addr));
            server_addr.sin_family = AF_INET;
            server_addr.sin_port = htons(SERVER_PORT);
            server_addr.sin_addr.s_addr = INADDR_ANY;
            if (-1 == bind(server_fd, (SA *)&server_addr, sizeof(server_addr)))
            {
                handle_error("bind");
                break;
            }
            struct sigaction sigio_action;
            memset(&sigio_action, 0, sizeof(sigio_action));
            sigio_action.sa_flags = 0;
            sigio_action.sa_handler = do_sigio;
            if (sigfillset(&sigio_action.sa_mask) < 0) 
            {
                handle_error("sigfillset");
                break;
            }
            sigaction(SIGIO, &sigio_action, NULL);
            if (-1 == fcntl(server_fd, F_SETOWN, getpid()))
            {
                handle_error("fcntl_setdown");
                break;
            }
            int flags;
            flags = fcntl(server_fd, F_GETFL, 0);
            if (flags == -1)
            {
                handle_error("fcntl_getfl");
                break;
            }
            flags |= O_ASYNC | O_NONBLOCK;
            fcntl(server_fd, F_SETFL, flags);
            for (; ;)
            {
                printf("waiting ...n");
                sleep(3);
            }
            close(server_fd);
        } while (0);
        return 0;
    }
编译及运行
    ➜  LinuxNetwork make 
    ➜  LinuxNetwork ./sigio_server
    waiting...
    connection from 127.0.0.1, port 58119, data: Hello, message from server. 
    ➜  LinuxNetwork ./client_udp 
    recv data: Hello, message from server. size: 27
## 异步I/O
目前该方面的技术还不够成熟，对于我们寻找网络组件方面的漏洞，帮助不大，这里略过了  
套用知乎上的一个大佬说的
    glibc的aio有bug, 
    Linux kernel的aio只能以O_DIRECT方式做直接IO,libeio也是beta阶段。
    epoll是成熟的，但是epoll本身是同步的。
## 总结
至此我们简单的将`Linux`目前用到的网络模型做了介绍，每个模型，都使用了相关的代码来做案例，需要重点关注的是`I/O`复用的部分，平时碰到的可能会比较多。
介绍完这些，为我们以后挖掘网络组件方面的漏洞做了一些基础铺垫。接下来可以来挖网络组件的洞了
## 参考链接
[使用libevent和libev提高网络应用性能——I/O模型演进变化史](https://blog.csdn.net/hguisu/article/details/38638183)
[io模型详述](https://www.jianshu.com/p/486b0965c296)
[unix网络编程源码](http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/tcpcliserv/)
[Linux编程之select](https://www.cnblogs.com/skyfsm/p/7079458.html)
[IO多路复用之poll总结](https://www.cnblogs.com/anker/p/3261006.html)
[Linux编程之epoll](https://www.cnblogs.com/skyfsm/p/7102367.html)
[深入理解IO复用之epoll](https://zhuanlan.zhihu.com/p/87843750)
[demo sigio c
example](https://man7.org/tlpi/code/online/diff/altio/demo_sigio.c.html)
[UDP Echo Server c
example](http://cs.baylor.edu/~donahoo/practical/CSockets/code/UDPEchoServer-SIGIO.c)
[信号与信号驱动IO](https://evil-crow.github.io/signal_io/)
[linux下的异步IO（AIO）是否已成熟？](zhihu.com/question/26943558)