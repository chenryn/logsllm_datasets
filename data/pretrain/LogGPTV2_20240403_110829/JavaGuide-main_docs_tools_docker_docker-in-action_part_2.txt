通过该方式运行的 tomcat 是不能直接被外部访问的，因为容器具有隔离性，若是想直接通过 8080 端口访问容器内部的 tomcat，则需要对宿主机端口与容器内的端口进行映射：
```shell
docker run -p 8080:8080 tomcat:8.0-jre8
```
解释一下这两个端口的作用(`8080:8080`)，第一个 8080 为宿主机端口，第二个 8080 为容器内的端口，外部访问 8080 端口就会通过映射访问容器内的 8080 端口。
此时外部就可以访问 Tomcat 了：
![](https://oss.javaguide.cn/github/javaguide/tools/docker/docker-run-tomact-8080.png)
若是这样进行映射：
```shell
docker run -p 8088:8080 tomcat:8.0-jre8
```
则外部需访问 8088 端口才能访问 tomcat，需要注意的是，每次运行的容器都是相互独立的，所以同时运行多个 tomcat 容器并不会产生端口的冲突。
容器还能够以后台的方式运行，这样就不会占用终端：
```shell
docker run -d -p 8080:8080 tomcat:8.0-jre8
```
启动容器时默认会给容器一个名称，但这个名称其实是可以设置的，使用指令：
```shell
docker run -d -p 8080:8080 --name tomcat01 tomcat:8.0-jre8
```
此时的容器名称即为 tomcat01，容器名称必须是唯一的。
再来引申一下`docker ps`中的几个指令参数，比如`-a`：
```shell
docker ps -a
```
该参数会将运行和非运行的容器全部列举出来。
`-q`参数将只查询正在运行的容器 id：`docker ps -q` 。
```shell
[root@izrcf5u3j3q8xaz ~]# docker ps -q
f3aac8ee94a3
074bf575249b
1d557472a708
4421848ba294
```
若是组合使用，则查询运行和非运行的所有容器 id：`docker ps -qa` 。
```shell
[root@izrcf5u3j3q8xaz ~]# docker ps -aq
f3aac8ee94a3
7f7b0e80c841
074bf575249b
a1e830bddc4c
1d557472a708
4421848ba294
b0440c0a219a
c2f5d78c5d1a
5831d1bab2a6
d5b6c177c151
```
接下来是容器的停止、重启指令，因为非常简单，就不过多介绍了。
```shell
docker start c2f5d78c5d1a
```
通过该指令能够将已经停止运行的容器运行起来，可以通过容器的 id 启动，也可以通过容器的名称启动。
```shell
docker restart c2f5d78c5d1a
```
该指令能够重启指定的容器。
```shell
docker stop c2f5d78c5d1a
```
该指令能够停止指定的容器。
```shell
docker kill c2f5d78c5d1a
```
该指令能够直接杀死指定的容器。
以上指令都能够通过容器的 id 和容器名称两种方式配合使用。
---
当容器被停止之后，容器虽然不再运行了，但仍然是存在的，若是想删除它，则使用指令：
```shell
docker rm d5b6c177c151
```
需要注意的是容器的 id 无需全部写出来，只需唯一标识即可。
若是想删除正在运行的容器，则需要添加`-f`参数强制删除：
```shell
docker rm -f d5b6c177c151
```
若是想删除所有容器，则可以使用组合指令：
```shell
docker rm -f $(docker ps -qa)
```
先通过`docker ps -qa`查询出所有容器的 id，然后通过`docker rm -f`进行删除。
---
当容器以后台的方式运行时，我们无法知晓容器的运行状态，若此时需要查看容器的运行日志，则使用指令：
```shell
docker logs 289cc00dc5ed
```
这样的方式显示的日志并不是实时的，若是想实时显示，需要使用`-f`参数：
```shell
docker logs -f 289cc00dc5ed
```
通过`-t`参数还能够显示日志的时间戳，通常与`-f`参数联合使用：
```shell
docker logs -ft 289cc00dc5ed
```
---
查看容器内运行了哪些进程，可以使用指令：
```shell
docker top 289cc00dc5ed
```
若是想与容器进行交互，则使用指令：
```shell
docker exec -it 289cc00dc5ed bash
```
此时终端将会进入容器内部，执行的指令都将在容器中生效，在容器内只能执行一些比较简单的指令，如：ls、cd 等，若是想退出容器终端，重新回到 CentOS 中，则执行`exit`即可。
现在我们已经能够进入容器终端执行相关操作了，那么该如何向 tomcat 容器中部署一个项目呢？
```shell
docker cp ./test.html 289cc00dc5ed:/usr/local/tomcat/webapps
```
通过`docker cp`指令能够将文件从 CentOS 复制到容器中，`./test.html`为 CentOS 中的资源路径，`289cc00dc5ed`为容器 id，`/usr/local/tomcat/webapps`为容器的资源路径，此时`test.html`文件将会被复制到该路径下。
```shell
[root@izrcf5u3j3q8xaz ~]# docker exec -it 289cc00dc5ed bash
root@289cc00dc5ed:/usr/local/tomcat# cd webapps
root@289cc00dc5ed:/usr/local/tomcat/webapps# ls
test.html
root@289cc00dc5ed:/usr/local/tomcat/webapps#
```
若是想将容器内的文件复制到 CentOS 中，则反过来写即可：
```shell
docker cp 289cc00dc5ed:/usr/local/tomcat/webapps/test.html ./
```
所以现在若是想要部署项目，则先将项目上传到 CentOS，然后将项目从 CentOS 复制到容器内，此时启动容器即可。
---
虽然使用 Docker 启动软件环境非常简单，但同时也面临着一个问题，我们无法知晓容器内部具体的细节，比如监听的端口、绑定的 ip 地址等等，好在这些 Docker 都帮我们想到了，只需使用指令：
```shell
docker inspect 923c969b0d91
```
![](https://oss.javaguide.cn/github/javaguide/tools/docker/docker-inspect-terminal.png)
## Docker 数据卷
学习了容器的相关指令之后，我们来了解一下 Docker 中的数据卷，它能够实现宿主机与容器之间的文件共享，它的好处在于我们对宿主机的文件进行修改将直接影响容器，而无需再将宿主机的文件再复制到容器中。
现在若是想将宿主机中`/opt/apps`目录与容器中`webapps`目录做一个数据卷，则应该这样编写指令：
```shell
docker run -d -p 8080:8080 --name tomcat01 -v /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8
```
然而此时访问 tomcat 会发现无法访问：
![](https://oss.javaguide.cn/github/javaguide/tools/docker/docker-data-volume-webapp-8080.png)
这就说明我们的数据卷设置成功了，Docker 会将容器内的`webapps`目录与`/opt/apps`目录进行同步，而此时`/opt/apps`目录是空的，导致`webapps`目录也会变成空目录，所以就访问不到了。
此时我们只需向`/opt/apps`目录下添加文件，就会使得`webapps`目录也会拥有相同的文件，达到文件共享，测试一下：
```shell
[root@centos-7 opt]# cd apps/
[root@centos-7 apps]# vim test.html
[root@centos-7 apps]# ls
test.html
[root@centos-7 apps]# cat test.html
This is a test html!
```
在`/opt/apps`目录下创建了一个 `test.html` 文件，那么容器内的`webapps`目录是否会有该文件呢？进入容器的终端：
```shell
[root@centos-7 apps]# docker exec -it tomcat01 bash
root@115155c08687:/usr/local/tomcat# cd webapps/
root@115155c08687:/usr/local/tomcat/webapps# ls
test.html
```
容器内确实已经有了该文件，那接下来我们编写一个简单的 Web 应用：
```java
public class HelloServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.getWriter().println("Hello World!");
    }
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req,resp);
    }
}
```
这是一个非常简单的 Servlet，我们将其打包上传到`/opt/apps`中，那么容器内肯定就会同步到该文件，此时进行访问：
![](https://oss.javaguide.cn/github/javaguide/tools/docker/docker-data-volume-webapp-8080-hello-world.png)
这种方式设置的数据卷称为自定义数据卷，因为数据卷的目录是由我们自己设置的，Docker 还为我们提供了另外一种设置数据卷的方式：
```shell
docker run -d -p 8080:8080 --name tomcat01 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8
```
此时的`aa`并不是数据卷的目录，而是数据卷的别名，Docker 会为我们自动创建一个名为`aa`的数据卷，并且会将容器内`webapps`目录下的所有内容复制到数据卷中，该数据卷的位置在`/var/lib/docker/volumes`目录下：
```shell
[root@centos-7 volumes]# pwd
/var/lib/docker/volumes
[root@centos-7 volumes]# cd aa/
[root@centos-7 aa]# ls
_data
[root@centos-7 aa]# cd _data/
[root@centos-7 _data]# ls
docs  examples  host-manager  manager  ROOT
```
此时我们只需修改该目录的内容就能能够影响到容器。
---
最后再介绍几个容器和镜像相关的指令：
```shell
docker commit -m "描述信息" -a "镜像作者" tomcat01 my_tomcat:1.0
```
该指令能够将容器打包成一个镜像，此时查询镜像：
```shell
[root@centos-7 _data]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
my_tomcat           1.0                 79ab047fade5        2 seconds ago       463MB
tomcat              8                   a041be4a5ba5        2 weeks ago         533MB
MySQL               latest              db2b37ec6181        2 months ago        545MB
```
若是想将镜像备份出来，则可以使用指令：
```shell
docker save my_tomcat:1.0 -o my-tomcat-1.0.tar
```
```shell
[root@centos-7 ~]# docker save my_tomcat:1.0 -o my-tomcat-1.0.tar
[root@centos-7 ~]# ls
anaconda-ks.cfg  initial-setup-ks.cfg  公共  视频  文档  音乐
get-docker.sh    my-tomcat-1.0.tar     模板  图片  下载  桌面
```
若是拥有`.tar`格式的镜像，该如何将其加载到 Docker 中呢？执行指令：
```shell
docker load -i my-tomcat-1.0.tar
```
```shell
root@centos-7 ~]# docker load -i my-tomcat-1.0.tar
b28ef0b6fef8: Loading layer [==================================================>]  105.5MB/105.5MB
0b703c74a09c: Loading layer [==================================================>]  23.99MB/23.99MB
......
Loaded image: my_tomcat:1.0
[root@centos-7 ~]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
my_tomcat           1.0                 79ab047fade5        7 minutes ago       463MB
```