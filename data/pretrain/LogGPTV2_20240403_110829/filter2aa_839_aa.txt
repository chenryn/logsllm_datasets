1 
Abstract 
This paper will examine how DTrace, a kernel- 
based dynamic scriptable tracer, can be 
effectively used for reverse engineering tasks. 
DTrace offers an unprecedented view of both 
user and kernel space, which has many 
interesting implications for security researchers. 
In this paper we will introduce DTrace, 
comparing it to existing debuggers and tracers.  
We will then walk the reader through various 
applications of DTrace. We will show how to 
monitor for stack and heap overflows, generate 
code coverage graphs, trace code paths visually 
in target applications over the network with IDA 
Pro, and discuss intrusion detection and evading 
DTrace.  
Introduction 
DTrace was first introduced in Solaris 10 which 
was released in 2004 by Sun Microsystems.  Its 
development began in 2001 with Sun kernel 
engineer Bryan Cantrill as the sole developer. 
The 
composition 
of 
the 
DTrace 
core 
development team was later completed with the 
addition of Adam Leventhal and Mike Shapiro.  
Sun Microsystems describes Dtrace as a 
“dynamic tracing framework for troubleshooting 
systemic problems in real time on production 
systems.” DTrace is made up of several 
components in the OS kernel and user space and 
tied together through the D scripting language.   
DTrace dynamic tracing allows you to view 
nearly all activity in the system on demand 
through software embedded sensors called 
“probes.”  OS X Leopard and Solaris ship with 
thousands of possible probes in places ranging 
from deep inside the kernel to user-level 
applications like web browsers and chat 
programs.  This extensive visibility provides the 
data that an administrator, developer, or user 
needs to understand the dynamic and complex 
relationships between software components. 
Questions can be asked and answered by 
querying the data gathered by DTrace probes 
through D scripts.  D  is a block-based 
interpreted language that was created for use 
with DTrace.  D syntax is a described as a 
subset of C, but is structured much like the 
syntax of Awk.  The dynamic aspect of DTrace 
comes from the fact that probes can be enabled 
when needed, and are removed once the 
requested data has been gathered. This is a very 
unobtrusive way of instrumenting a system or 
process, and it is the relative safety of DTrace 
probes that enables its use on production 
systems. 
DTrace was Sun’s first software component to 
be released under their own open source 
Common Development and Distribution License 
(CDDL).  The open sourcing of DTrace paved 
the way for the framework to be included in 
other operating systems.  However, skepticism 
about CDDL had slowed efforts to port DTrace 
to FreeBSD. RedHat decided to compete with 
their SystemTap product instead. DTrace was 
DTrace: The Reverse Engineer’s 
 Unexpected Swiss Army Knife 
Tiller Beauchamp 
David Weston 
Science Applications International Corporation 
{Tiller.L.Beauchamp,David.G.Weston}@saic.com 
2 
ported to Apple’s OS X 10.5 “Leopard,” 
released in October 2007. Two weeks later it 
was announced that DTrace had been ported to 
QNX.  The DTrace community continues to be 
very dynamic. 
DTrace Vernacular 
The processing and buffering of all probe data 
takes place in the DTrace kernel module.  Each 
probe definition is composed of the four 
elements separated by colons.  The general  
form is:  
provider:module:function:name 
Provider: A provider is a DTrace kernel module, 
which logically groups together various probes 
that are related.  Examples of providers in 
DTrace include: fbt which instruments kernel 
functions, pid; which instruments user land 
processes, and syscall which instruments system 
calls. 
Module: A module is the program location of 
the group of probes.  This could be the name of 
a kernel module where the probes exist, or it 
could be a user land library.  Example modules 
are the libc.so library or the ufs kernel module. 
Function:  Specifies the specific function for 
which this probe should fire on.  This could be 
something like a particular function in a library 
such as printf() or strcpy(). 
Name:  This is usually the meaning of the probe.  
Sample names are “entry“ or “return” for a 
function or “start” for an I/O probe.  For 
instruction level tracing this field specifies the 
offset within the function.  
Understanding the DTrace vernacular allows 
you to understand the purpose of a particular 
probe.  You can list all the probes on a DTrace 
instrumented system by provider by running the 
“dtrace –l” command.  It will list the probes in 
the format described above. 
DTrace Architecture 
The bulk of DTrace functionality resides within 
the kernel.  This means that probe data collected 
in user land must be first copied into kernel 
entry points before it can be processed.  To 
provide bi-directional communication between 
user space and the kernel, DTrace provides a 
conduit in the form of the shared library 
libdtrace. 
The DTrace user command depends on libtrace 
to compile a D script into an intermediate form. 
Once the program is compiled, it is sent into the 
operating system kernel for execution by the 
DTrace kernel modules. It is at this time that the 
probes specified within your script are discretely 
activated.  After the script has completed its 
execution, the activated probes are removed and 
probe definition 
/ optional predicate / 
{ 
  optional action statements; 
} 
Figure 1. Anatomy of D Program 
Figure 2. DTrace Architectural Overview  
source: [1] 
3 
the system is returned to its normal operating 
state. 
The D Language 
As stated earlier the D language syntax is a 
subset of C.  Unlike C, the D language does not 
use traditional conditionals such as “if … else.”  
Instead D uses the concept of a “predicate” as a 
conditional statement. A predicate expression is 
evaluated as the probe is triggered. If the 
predicate is evaluated as true, then any 
statement or action associated with the clause 
executes.  If the predicate value is false then the 
probe is not triggered and instrumentation 
continues. Several predicates and probes can be 
linked together to form a D program. DTrace 
gives accessibility to an enormous amount of 
data. Effective D scripts should only instrument 
what is needed and choose the right action for 
the job. 
DTrace and Reverse Engineering 
Reverse engineering in the context of security 
research is essentially the search to understand 
how a piece of software works.  Reverse 
engineering requires time-consuming careful 
analysis, and DTrace can make that analysis 
much easier and faster in a number of ways. 
The greatest strength of DTrace is the scope and 
precision of the data that can be gathered by 
relatively simple D scripts.  A reverse engineer 
can learn a lot about a piece of software from 
just one or two well place probes.  This puts 
DTrace in category of a ‘rapid development’ 
environment for reverse engineers.  
The remainder of this paper will explore how 
DTrace can be used for various common reverse 
engineering tasks.  First we explain how DTrace 
can be used for detecting and pinpointing stack 
based buffer overflow. Secondly we examine 
detecting heap-based overflows and other heap 
memory management issues.  We then look at 
how to use DTrace with IDA Pro to visualize 
block level code coverage. Finally we discuss 
intrusion detection possibilities with DTrace and 
various ways to avoid DTrace’s monitoring. 
Stack Overflow Monitoring 
One interesting challenge is to use DTrace to 
build a stack overflow detector.  Such a monitor 
has been written in Python based on PyDbg, 
which is included with the PeiMei framework. 
[3] 
PeiMei’s 
detector 
works 
by 
setting 
breakpoints and single-stepping through the 
application.  We wish to build a similar monitor 
using DTrace that does not require the use of 
breakpoints. 
The simplest approach is to monitor the EIP 
register for a known bad value, such as 
0x41414141, or a particular value you might 
find in an exploit you want to analyze, for 
instance 0xdeadbeef.  This would require 
activating only one probe for each function 
entry.  Still, this could be a significant number 
of probes.  The table below lists some common 
applications and the number of entry probes 
available on OS X for those applications.  These 
numbers include library functions. 
Program 
Probes 
Firefox 
202561 
Quicktime 
218404 
Adium 
223055 
VMWare Fusion 
205627 
cupsd 
91892 
sshd 
59308 
ftp client 
6370 
However, we cannot accurately estimate in 
advance 
the 
performance 
impact 
of 
instrumenting 
every 
entry 
probe 
on 
an 
application since probes will only have an 
impact when they are hit.  An application may 
Figure 3. Number of entry probes in 
common applications on OS X 10.5 
4 
import many libraries but only make a few 
function calls.  Conversely, an application may 
call one function in a tight loop, creating a 
heavy performance hit when traced.  
To avoid dropping probes and hindering 
application performance, we first ensure our 
probes do not trace unimportant modules and 
functions that are called too frequently. The 
DTrace script shown in figure 4 can be used to 
report the most frequently called functions. 
When the above script is run against FireFox 
and QuickTime Player it is obvious which 
functions and libraries can be exclude from our 
traces.  In QuickTime Player, there are a large 
number of calls to the __i686.get_pc_thunk.cx 
function.  Both applications are making the 
majority of their calls to functions in the 
libSystem.B.dylib module. By excluding these 
frequently hit functions and libraries we will see 
a significant performance improvement when 
tracing these applications.  Our experience with 
DTrace has shown that it is much more effective 
to build specific scripts that activate a limited 
number of probes, rather than to try to build a 
generic DTrace script that can apply to every 
situation. 
Once a reasonable subset of the application has 
been selected for tracing, a simple DTrace 
script, shown below in figure 4, can be used to 
check the value of the next instruction at 
function return time. 
This probe will fire whenever the value of EIP 
is 0x41414141.  Typically this would cause the 
application to crash.  But with DTrace we can 
stop the application before it attempts to execute 
the instruction at 0x41414141.  This allows us 
to carry out data collection and analysis, such as 
printing CPU register values and function 
parameters, dumping memory, or attaching a 
traditional debugger and examining the stack. 
This example makes the limiting assumption 
that when an overflow occurs, EIP will be 
0x41414141.  This may be reasonable for doing 
basic fuzzing, but an effective stack overflow 
detector should be able to detect overflows in a 
much more generic fashion.   This can be 
achieved by recording the return address in the 
stack frame created at function entry time.  The 
recorded return address can then be compared to 
the return value at function return time.  We do 
not compare the value of EIP with the saved 
return value because of the way DTrace handles 
tail call optimizations ([2]).  DTrace reports a 
tail call as a return from the calling function, 
and an entry to the function being called.  
However, the EIP at function return time is the 
first instruction of the function being called, not 
the return value stored in the stack frame.  This 
will trip up an integrity monitor that compares 
saved return values with the actual value of EIP.  
Instead, we alert when the saved return address 
is different from the current return address, and 
EIP is equal to the current return address. 
The above logic works well for most 
applications.  However, some peculiarities of 
DTrace must be accounted for.  In particular, 
DTrace can not trace functions that use jump 
#!/usr/sbin/dtrace -s 
pid$target:::entry { 
@a[probemod,probefunc] = count(); 
} 
END { trunc(@a,10); } 
Figure 4. Script to count function calls 
#/usr/sbin/dtrace -s 
pid$target:a.out::return  
 / uregs[R_EIP] == 0x41414141 / { 
   printf("Don’t tase me bro!!!"); 
   printf(“Module: %s Function %s”,  
           probemod, probefunc); 
      ... 
} 