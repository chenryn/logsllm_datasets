Octopus v1.0 stable: Cobalt Strike
deployment
原文：
https://shells.systems/octopus-v1-0-stable-cobalt-strike-deployment-much-more/
使用教程:
https://shells.systems/unveiling-octopus-the-pre-operation-c2-for-red-teamers/
stable版本发布:
https://github.com/mhaskar/Octopus/releases/tag/v1.0
一.Intorduction
        很早之前就是用过Octopus beta v1.0版本，当时是听说它的免杀能力特别好。推荐说是吊打一切
AV。(当时完全不懂代码 原理什么的，当然现在还是不懂。)本文给大家带来Octopus与Cobalt Strike的
使用心得。
1.Octopus 特性
Octopus算是前置C2，并不像CS那样集成了后渗透所有的东西 比如端口扫描，横向渗透，代理等
2.更新日志
从Octopus直接部署Cobalt Strike Beacon
DigiSpark payload生成
windows 7 自定义 oneliner 
结果记录
通过配置文件自动杀死
新的绕过 AMSI
同时作者也讲了Octopus目前是基于命令行界面形式，未来发展计划增加一个Web GUI。个人觉得提炼
出每一个工具独有的特点，然后合理利用是最有效的，集成的框架类C2 CS已经很不错了。
3.修复的Bug
python2.7 执行Octopus失败
加密错误处理
处理一些EOF议题
无效的监听器处理
二. New AMSI ByPass
一键部署 CS  
Octopus 将在当前PowerShell进程中禁用AMSI，然后加载Cobalt Strike beacon接下来直接运行
 deploy_cobalt_beacon beacon.path
关于绕过AMSI研究参考：
https://xz.aliyun.com/t/3095
If you don't know what's the amsi(AntiMalware Scan Interface),you could input "amsiutils" into 
powershell console,like this.
AMSI(AntiMalware Scan Interface)基于字符串扫描接口，通常使用base64或者XOR进行编码，然后在
内存中解码绕过AMSI。（要检测编码后的字符串对于AMSI需要更高的抽象能力）通常来说还是比较有
效的。
OK，本文是研究Octopus的，powershell与AMSI的研究不在此范畴。
三. Auto_kill
简单来说就是你的C2被防火墙或者其他原因down掉了，Octopus将尝试重新连接到服务器，连接次数
为预设值在profile.py auto_kill=10 设置，超过连接次数自动杀死。
四.演示
satger VT查杀率
https://www.virustotal.com/gui/file/ae949e2a84485c8d4af87878fb058e43752744c1c8a3a8a8824
de6dccaf7c29c/detection
disable_amsi 好像不起作用。 （下文会有呼应）
deploy_cobalt_beacon 部署成功； 由于beacon.ps1本身含有恶意文件，不落地到目标磁盘上，通过进
程注入方式内存加载，目前测试 windows defenders还可以绕过。
关键词: memory patching 
禁用 AMSI
相关细节参考:
https://www.cyberark.com/resources/threat-research-blog/amsi-bypass-redux
beacon监听器选择https，执行危险行为也不会拦截。
五.原理学习
其他的日志记录，屏幕截图，dll先暂时不涉及。
主程序 octopus.py; 
配置程序 profile.py
core/ 核心包括加密模块，函数模块等
module模块  包含了 ILBypass.ps1, ASBBypass.ps1.
通读octopus.py模块
主程序 循环监听等待输入命令，后面基本上都是模块如何使用，用法简介等
其实我最想看的是 deploy_cobalt_beacon以及disable_amsi如何实现的，在此之前呢，先来看看
profile.py配置模块
profile.py
profile.py  web listener配置, 服务器为nginx，当然作者还没开发出来web端。配置就相当于Octopus
的一个路由。
core核心模块
包含四个文件
encryption.py  esa.py  functions.py  weblistener.py
1. 加密模块 （上线前奏）
默认Cotopus  agents与C2 通信采用AES(256)加密
2. esa模块 （对抗艺术）
这个模块通过遍历AV列表以及 SIEM  检测sysmon。
SIEM参考：
https://www.csoonline.com/article/2124604/what-is-siem-software-how-it-works-and-how-to-cho
ose-the-right-tool.html
有很多EDR设备都会根据事件日志分析，Winlogbeat,splunk等
3.具体实现模块 （disable_amsi）
可以看到通过disable_amsi 禁用amsi然后load_beacon加载的。
通过内置的模块 ILBypass.ps1使用 encrypt_command函数来绕过AMSI。跟进去
说好的 disable_amsi呢？？？
怪不得我直接使用 disable_amsi命令无法禁用amsi，一键部署beacon使用了加密ps1方式，这不是真
正意义上的disable_amsi。继续查看 ILBpass.ps1. (不是很懂ps代码)
乍一看 蒙蔽状态。详细请看参考第一个。
.Attempt to IEX Invoke-Mimikatz without taking care of AMSI, and it could be game over for your 
undetected campaign.
Before attempting to load a script, it has now become commonplace to run the following AMSI 
bypass:
简单点说这就是bypass amsi的。文中也有一句话很诱人，难道你不想知道怎么充满魔法的命令是怎么
卸载AMSI钩子的？ 
4.ASBBypass.ps1
ps脚本语法有点类似C#，还好可以看懂一丢丢。 导入kernel32.dll，GetProcAddress 是定位DLL中导
出函数或者变量的地址  此处函数为IntPtr 
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiI
nitFailed','NonPublic,Static').SetValue($null,$true)
参考：
https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddres
s
LoadLibrary()  在指定进程内加载dll，实现派生 deploy_cobalt_beacon功能
LoadLibrary can be used to load a library module into the address space of the process and 
return a handle that can be used in GetProcAddress to get the address of a DLL function.
参考：
https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya
VirtualProtect() 
更改对调用进程的虚拟地址空间已经提交的页面区域的保护。
参考：
https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect
最后再看 Load_beacon
通过使用 bypass amsi来实现派生cs会话（在当前进程内禁用amsi.）具体细节详见参考。
参考：
推荐指标 10：https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-
logging-evasion/