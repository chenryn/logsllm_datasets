 0  0) ll A[right] == 1) {
if K == O Il (right == len(A) && K > 0) {
 if A[right] == O { 
left++
if A[left] == 0 {
right++
K++
 res = max(res, right-left)
K--
---
## Page 972
代码
为这些正数是比较小的正数。负数越小，变成正数以后值越大。正数越小，变成负数以后对总和影响最
意一点，负数都改变成正数以后，接着不是再改变这些变成正数的负数，而是接着改变顺序的正数。因
这道题也可以用排序来实现。排序一次，
的最小元素变成它的相反数。执行K次以后求数组中所有的值之和就是最大值。
这一题可以用最小堆来做，构建最小堆，每次将最小的元素变成它的相反数。然后最小堆调整，再将新
解题思路
将数组中的元素变成它的相反数，这种操作执行K次之后，求出数组中所有元素的总和最大。
题目大意
Note:
 Example 3: 
小。具体实现见代码。
package leetcode
●-100 maxNum {
sum += num 
day: 3
day:
wnu = wnNxew 
---
## Page 975
符串就是"0"，否则返回的字符串中不能含有前导零。
给出数字 N，返回由若干"0"和"1"组成的字符串，该字符串为N的负二进制（base -2）表示。除非字
题目大意
Note:
 Example 3:
Example 2: 
Example 1: 
The returned string must have no leading zeroes, unless the string is "o"
-2 (negative two).
Given a number N, return a string consisting of "o" s and "1"'s that represents its value in base 
题目
1017. Convert to Base -2
1. 0 >1
} else { 
if calsum(mid, D, weights)
 high = mid 
low = mid + 1
---
## Page 976
Return an array of integers answer, where answer[i] = next_larger(node_{i+1}).
the next larger value is 0.
that j >i, node_j.val > node_i.val, and j is the smallest possible choice. If such a j does not exist
Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such 
node_2, node_3, ..etc.
We are given a linked list with head as the first node. Let's number the nodes in the list: node_1,
题目
1019. Next Greater Node In Linked List
代码
解题思路
提示：
·这一题仿造十进制转二进制的思路，短除法即可。
·给出一个十进制的数，要求转换成-2进制的数
●09
func baseNeg2(N int) string {
import "strconv"
package leetcode
return res
for N!=O{ 
if N== O{ 
res := ""
 return "o"
res = strconv.Itoa(remainder) + res
if remainder  0 && nums[indexes[len(indexes)-i]] 
if