# 【移动安全】重磅炸弹行动之移动篇
|
##### 译文声明
本文是翻译文章，文章来源：paloaltonetworks.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[Janus情报局](http://bobao.360.cn/member/contribute?uid=2954465307)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**简介**
Unit 42近期发现了一组新的恶意软件样本，这些样本的目标是三星设备以及韩语用户，与[重磅炸弹行动(Operation
Blockbuster)](https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf)中使用的恶意软件有一些关联。这些新样本和重磅炸弹行动存在关联的关键点如下：
**·**[ 在重磅炸弹行动后续(Operation Blockbuster
Sequel)](https://researchcenter.paloaltonetworks.com/2017/04/unit42-the-blockbuster-sequel/)中提到的，由宏指令传输的payload
**·**[ HiddenCobra](https://www.us-cert.gov/ncas/alerts/TA17-164A)威胁团队使用的恶意软件
**·**[ 孟加拉SWIFT银行系统](http://baesystemsai.blogspot.jp/2016/05/cyber-heist-attribution.html)2016入侵中使用的恶意软件
**·** 谷歌商店托管的APK样本
尽管Unit
42团队不能提供相关样本的详细信息，但他们认为该活动针对的是使用三星设备的韩语用户。基于这些证据，他们也相信，这种新型恶意软件很可能是针对韩国人的。
新发现的样本存在过去样本不具备的新功能。而之前检测到的这些活动中发现的恶意样本，与本报告中新发现的样本存在很深的关联。
**新型恶意软件集群**
该新型恶意软件样本的集群中心是一个PE文件(ed9e373a687e42a84252c2c01046824ed699b32add73dcf3569373ac929fd3b9)，可在VirusTotal查看，文件名为“
**JAVAC.EXE** ”。样本运行需要两个命令行参数，第一个是二进制文件绑定的端口号，作为webserver，第二个是用于加密协议通信的端口号。
**第一个端口模仿Apache服务器，使用Apache服务器惯用的header，并根据不同User-Agent的请求，返回不同的响应。一些响应内嵌在PE文件中，而另一些则在本地磁盘中。**
以下是在JAVAC.EXE的资源模块发现的JavaScript文件：
这个PE
HTTP服务器要执行的系统名称的主机名为“RUMPUS-5ED8EE0”。这是在JAVAC.EXE执行期间检查的。除了上表中所列的资源文件，还有一点很重要，那就是JAVAC.EXE希望在系统上存在一些其他文件。具体列表如下所示：
**·** mboard_ok.css
**·** node_n.js
**·** node_e.js
**·** node_g.js
**·** node_p.js
**·** node_ok.js
**·** node_nc.js
**·** node_ex.js
然而截止目前，仍未获得这些资源文件的副本。
**  
**
**相关ELF ARM样本**
按照main.js中的逻辑，嵌入在main.js中的ELF ARM文件被写入HTTP客户端的磁盘中。下表是内嵌的ELF ARM的指标：
这个ELF ARM文件是我们确认的三个之一。这些ELF
ARM文件与[Symantec](https://www.symantec.com/connect/blogs/wannacry-ransomware-attacks-show-strong-links-lazarus-group)命名为[Cruprox](https://www.symantec.com/security_response/writeup.jsp?docid=2017-041002-5341-99)的PE文件、Kaspersky命名为[Manuscrypt](https://securelist.com/apt-trends-report-q2-2017/79332/)的PE文件、Trend
Micro命名为[Clevore](https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_clevore.a)的PE文件相似。ELF
ARM样本中包含了一些域名(用于欺骗)和IPv4地址(用于C&C)。这些域名和IPv4地址用于生成TLS会话，这与Novetta发布的重磅炸弹行动报告的第4.3.3.1节中的“伪造TLS”通信机制相似。
ELF
ARM样本选择了一个内嵌的域名，填充TLS的[SNI字段](https://en.wikipedia.org/wiki/Server_Name_Indication)，连接到其中一个内嵌的IPv4地址。通过以这种方式执行命令和控制，分析连接流的分析师只能看到看似(但不是)与合法域名的TLS连接。
包含在ff83f3b509c0ec7070d33dceb43cef4c529338487cd7e4c6efccf2a8fd7142d中的域名如下：
**·** myservice.xbox[.]com
**·** uk.yahoo[.]com
**·** web.whatsapp[.]com
**·** www.apple[.]com
**·** www.baidu[.]com
**·** www.bing[.]com
**·** www.bitcoin[.]org
**·** www.comodo[.]com
**·** www.debian[.]org
**·** www.dropbox[.]com
**·** www.facebook[.]com
**·** www.github[.]com
**·** www.google[.]com
**·** www.lenovo[.]com
**·** www.microsoft[.]com
**·** www.paypal[.]com
**·** www.tumblr[.]com
**·** www.twitter[.]com
**·** www.wetransfer[.]com
**·** www.wikipedia[.]org
由0ff83f3b509c0ec7070d33dceb43cef4c529338487cd7e4c6efccf2a8fd7142d生成“Client
Hello”记录的例子如下所示。它包括了其SNI字段的合法域名，并被发送到C&C的IPv4地址。
通过检查字符串、二进制文件的函数和样本0ff83f3b509c0ec7070d33dceb43cef4c529338487cd7e4c6efccf2a8fd7142d内嵌的IPv4地址，我们可以捕获和定位另外两个ELF
ARM样本。以下是相关ELF ARM样本列表：
**相关APK样本**
除了ELF
ARM文件，HTTP服务器还提供APK文件。如前所述，SHA256为4694895d6cc30a336d125d20065de25246cc273ba8f55b5e56746fddaadb4d8a的APK样本被内嵌在HTTP
PE服务器样本中，并被命名为“umc.apk”。
“umc.apk”定义了意图过滤器，当APK被替换(PACKAGE_REPLACED)，或当设备收到一条文本消息(SMS_RECEIVED)，或当设备处于使用中(USER_PRESENT)，接收来自Android操作系统的事件。“umc.apk”会安装一个SHA256为a984a5ac41446db9592345e547afe7fb0a3d85fcbbbdc46e16be1336f7a54041的内嵌APK，这个内嵌APK的名称为“install.apk”。
“install.apk”的目的是清除“umc.apk”，并安装SHA256为4607082448dd745af3261ebed97013060e58c1d3241d21ea050dcdf7794df416的第三个APK，这个APK名为“object.apk”。
**这个“object.apk”才是最后的恶意payload！这个应用确保它在设备启动后运行，并为其控制器提供后门功能。**
**·** **记录麦克风**
**·** **相机捕获**
**·** **上传、执行和操作本地文件**
**·** **下载远程文件**
**·** **记录GPS信息**
**·** **读取联系人信息**
**·** **读取SMS/MMS信息**
**·** **记录浏览器历史和书签**
**·** **扫描和捕获WiFi信息**
下面是后门主要组件的反编译代码截图。它显示了这个应用的内部版本号为“4.2.160713”，目前还不清楚这个版本号是否为这个恶意软件家族更新版本的准确表示，或者是否只是为了给APK一个合法的外壳。
“object.apk”的配置信息隐藏在“assest.png”中。可以使用以下Python函数进行解码：
    def cnfdecr(s):
      b = ''
      for each in s:
        tmp = ord(each)
        tmp = tmp - 55
        tmp = tmp ^ 0x12
        b += chr(tmp)
      return b
解码后的配置信息及目的如下：
SHA256为06cadaac0710ed1ef262e79c5cf12d8cd463b226d45d0014b2085432cdabb4f3的这款应用,包含了流行的合法应用程序资源。我们推测这些资源文件是为了掩饰其真实意图，使它看起来像一个正常的app。而加入