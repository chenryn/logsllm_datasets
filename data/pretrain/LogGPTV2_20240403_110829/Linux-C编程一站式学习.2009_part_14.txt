４4５
‘*＇)则打印：
996
乙9
6. goto语句和标号
81
106
下一页
---
## Page 107
这里的error:叫做标号（Label），
6.goto语句和标号 请点评
回想一下，我们在第4节"switch语句"学过case和default后面也要跟冒号（:号，Colon），
替goto和setjmp/longjmp的这种用法。
要轻易考虑使用goto语句。有些编程语言（如C++）中有异常（Exception）处理的语法，可以代
出错处理（例如释放先前分配的资源、恢复先前改动过的全局变量等）
通常goto语句只用于这种场合,
然可以用别的办法替代，比如上面的代码段可以改写为：
Dijkstra最早指出编程语言中goto语句的危害，
goto语句过于强大了,
标识符的命名规则。
转。我们知道break只能跳出最内层的循环,
分支、循环都讲完了，
K
上一页
一个标号就行，唯一的限制是goto只能跳转到同一个函数中的某个标号处，而不能跳到别的函数
if (cond)
error:
for (..·)
出错处理；
for（...）{
if (cond)
出错处理;
从程序中的任何地方都可以无条件跳转到任何其它地方,
现在只剩下最后一种影响控制流程的语句了，
 break;
一个函数中任何地方出现了错误条件都可以立即跳转到函数末尾做
，任何语句前面都可以加若干个标号，每个标号的命名也要遵循
 goto error;
全国嵌入式人才培训基地
6.goto语句和标号
第6章循环语句
1：
，如果在一个嵌套循环中遇到某个错误条件需要立即跳
，可读性很差。著名的计算机科学家Edsger W.
就是goto语句，
处理完之后函数返回。比
在任何其它场合都不
只要在那个地方定
，实现无条件跳
事实上
10
下一页
---
## Page 108
用setjmp/longjmp机制快速返回到函数A做出错处理，
数B调用函数c，如果在c中出现某个错误条件，
它的直接或间接调用者（同时从栈空间弹出一个或多个栈帧）
是利用"switch的语句块和循环结构的语句块没有本质区别"这一点实现了一个巧妙的代码优化。
有兴趣的读者可以在网上查找有关Duffs Device的资料，Duffs Device是一段很有意思的代码，
语句→{语句列表}
语句→ switch(控制表达式)语句
说，switch的语句块和其它分支、循环结构的语句块没有本质区别：
里面是一组语句列表，
5.嵌套循环
default :
case 常量表达式：
case 常量表达式：
switch(控制表达式){
反复应用这些语法规则进行组合可以在一条语句前面添加多个标号，
语句→ default:语句
语句→ case 常量表达式:语句
语句→标识符:语句
它们是两种特殊的标号。和标号有关的语法规则如下：
它毫不相干的函数中。
式：
上一页
考[APUE2e]。
语句列表
：语句列表
语句列表
全国嵌入式人才培训基地
起始页
，使得函数B和c继续执行下去都没有意义了
上一级
，本书不详细介绍这种机制，有兴趣的读者可
而不能从一个函数跳转到另一个和
比如函数A调用函数B，
但只能从被调用的函数跳回到
，例如在例4.2
第7章结构体
可以利
函
108
FI`
H
---
## Page 109
6.goto语句和标号
4.嵌套结构体
3.数据类型标志
2.数据抽象
目录
第7 章 结构体 请点评
.复合类型与结构体
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分I.C语言入门
第7章结构体
起始页
上一级
1.复合类型与结构体
109
---
## Page 110
如果用实部和虚部表示一个复数，我们可以写成由两个double型组成的结构体:
复数由模和辐角组成，两种坐标系可以相互转换，如下图所示：
现在我们用C语言表示一个复数。从直角坐标系来看，
复杂的过程抽象。
经见过最简单的形式，就是把一组语句用一个函数名封装起来，当作一个整体使用，本章将介绍更
本章以结构体为例讲解数据类型的组合和数据抽象。
成这个复合类型的各种基本类型
是由很多字符组成的。有些场合下要把复合类型当作一个整体来用，
点型；根据语法规则由基本类型组合而成的类型称为复合类型（
在编程语言中，
1.复合类型与结构体 请点评
3．这门语言提供了哪些抽象机制，包括数据抽象和过程抽象（Procedure Abstraction）。
上一页
2.
1．这门语言提供了哪些Primitive，
如何组成复杂的表达式和语句。
这门语言提供了哪些组合规则，
图7.1.复数
-..--.-..-..-..----..-..-..--.-..-..--
lmaginary
，最基本的、不可再分的数据类型称为基本类型（Primitive Type）
一门编程语言时要特别注意以下三个方面：
复合类型的这种两面性为数据抽象（Data Abstraction）奠定了
，比如基本类型，比如基本运算符、表达式和语句。
比如基本类型如何组成复合类型，比如简单的表达式和语句
1.复合类型与结构体
全国嵌入式人才培训基地
第7章结构体 
Rcal
，复数由实部和虚部组成，从极坐标系来看，
 至于过程抽象,
(Compound Type)
，我们在第 2节“iflelse语句"已
而另外一些场合下需要分解组
 例如整型、
例如字符串
110
下一
---
## Page 111
定义之后的各函数中都可以使用。例如：
这两个标识符x属于不同的命名空间。结构体Tag也可以定义在全局作用域中，这样定义的Tag在其
编译器可以从语法上区分哪个x是变量x，
注意上例中变量x和变量z的成员x的名字并不冲突,
合在一起组成复数变量的存储空间。看下面的例子：
但这样就没办法再次引用这个结构体类型了，
如果在定义结构体类型的同时定义了变量，也可以不必写Tag，例如：
（Member）x和y，可以用.运算符（.号，Period）来访问，这两个成员的存储空间是相邻的[13]
代替类型名了。例如可以这样定义另外两个复数变量：
是一种声明，
这样z1和z2就是两个变量名，
例7.1.定义和访问结构体
struct complex_struct { double x, y; };
struct {
struct complex_struct z3, z4;
2l，z2;
zl，z2;
声明都要以;号结尾，结构体类型定义的}后面少;号是初学者常犯的错误。不管是用上
int main(void)
#include 
double x, Y;
return 0;
else
Z
struct complex_struct { double x, Y; } z;
(z.y
，变量定义后面带个;号是我们早就习惯的。但即使像先前的例子那样只
printf("z=%f+%fi\n", z.x, z.y);
printf("z=f%fi\n", z.x, z.y);
一个复合类型，如果用这个类型名来定义变量，可以这样写：
，哪个x是变量z的成员x，第3节“变量的存储布局”会讲到
，因为它没有名字。每个复数变量都有两个成员
，}后面的;号也不能少。这点一定要注意，
 因为变量z的成员x只能通过表达式z.x来访问，
一个类型名[12],
这种标识符在C语言中称
就
类型定义也
三
---
## Page 112
逻辑运算符都不能作用于结构体类型，if语句、while语句中的控制表达式的值也不能是结构体类
结构体类型用在表达式中有很多限制，不像基本类型那么自由，
数组的Memberwise Initialization语法将在下一章介绍。
例如：
用Designated Initilizer语法可以针对每个成员做初始化（Memberwise Initialization），很方便。
Designated Initializer是C99引入的新特性，
Designated-lnitializer →[常量表达式]=Initializer 
 Designated-Initializer → Initializer 
Initializer→{初始化列表}
Initializer →表达式
以前我们初始化基本类型的变量所使用的Initializer都是表达式，
0这种语法不能用于结构体的赋值，
始化全局变量还是局部变量。
量表达式来初始化。这也是C99的新特性,
注意，
员将用0来初始化，就像未初始化的全局变量一样。例如以下几种形式的初始化都是合法的：
报错，但如果只是末尾多个逗号则不算错。如果Initializer中的数据比结构体的成员少，
Initializer中的数据依次赋给结构体的各成员。
结构体变量也可以在定义时初始化，例如：
.21必须是局部变量才能用另一个变量x的值来初始化它的成员，
struct complex_struct zl;
struct
struct
struct
double
struct complex_struct z = { 3.0, 4.0 };
--------.------------------------.------------------------.--------------
int main(void)
x=3.0;
3.0,
 complex_struct
 complex_struct
complex_
struct complex_struct z;
4.0
_struct
t
 例如这样是错误的:
Z
==
，用于初始化稀疏（Sparse）结构体和稀疏数组很方
C89只允许在凸中使用常量表达式来初始化，无论是初
0
如果Initializer中的数据比结构体的成员多，
5
z3
.x=0.0,
z2.
/*
，表达式当然也可以用来赋值，但现
比如+－＊/等算术运算符和&&Ⅱ!等
 如果是全局变量就只能用常
=0.
，未指定的成
，编译器会
112
会
---
## Page 113
变量z在main函数的栈帧上,
那么调用传参的过程如下图所示：
这个函数实现了两个复数相加，如果在main函数中这样调用：
化，也就可以当作函数的参数和返回值来传递：
同样地，
的，例如：
结构体变量之间使用赋值运算符是允许的，
（Scalar Type），标量类型包括算术类型和以后要讲的指针类型，详见图 23.5“C语言类型总结"
点型。可以表示零和非零，
型。
1．用z1初始化一个临时变量。
严格来说，
图7.2.结构体传参
struct complex_struct z = { 3.0, 4.0 };
complex_struct z2)
struct complex_struct add_complex(struct complex_struct zl, struct
，22必须是局部变量才能用变量21的值来初始化。
Z1
struct
z2;
，可以做算术运算的类型称为算术类型（Arithmetic Type）
return :
z1.y
 可以参与逻辑与、或、非运算或者做控制表达式的类型称为标量类型
add_complex
main
z2.y;
z2
z1;
3.0, 4.0 };
，用一个结构体变量初始化另一个结构体变量也是允许
既然结构体变量之间可以相互赋值和初始
，z的值分别赋给z1和z2。在
算术类型包括整型和浮
13
---
## Page 114
第7章结构体
complex_struct)3.0，4.0};，本书不使用这种新语法。
[14] C99引入一种新的表达式语法Compound Literal可以用来赋值，例如z1=（struct
[13] 我们在第4节“结构体和联合体"会看到，结构体成员之间也可能有若干个填充字节。
能做右值而不能做左值，因为表达式add_complex(z，z)不能做左值。
中，
由.运算符组成的表达式能不能做左值取决于.运算符左边的表达式能不能做左值。在上面的例子
3．把临时变量的值赋给变量z，
2．函数返回并释放栈帧。
。当然，
释放临时变量。
全国嵌入式人才培训基地
起始页
2.数据抽象
114
下一页
---
## Page 115
自动做相应的转换然后返回构造的复数变量：
乘除法比较方便。如果我们定义的复数结构体是直角坐标的，那么应该提供极坐标的转换函数，
2.数据抽象 请点评
此外，
便在需要的时候可以方便地取它的模和辐角：
围绕它定义一些函数。复数可以用直角坐标或极坐标表示，
现在我们来实现一个完整的复数运算程序。在上一节我们已经定义了复数的结构体类型，
二
，我们还提供两个函数用来构造复数变量，
struct complex_struct make_from_mag_ang(double r, double A) 
struct complex_struct make_from_real_img(double x, double Y)
double angle(struct complex_struct z)
double 
double 
double real_part(struct complex_struct z)
struct complex_struct {
#include 
 magnitude(struct complex_struct z)
img_part(struct complex_struct z)
return z;
2.x
struct complex_struct z;
struct complex_struct z;
return atan2(z.y, z.x);
return sqrt(z.x * z.x + z.y * z.y);
 return z.y;
z.y
Z.Y
return z.x;
Y;
￥
全国嵌入式人才培训基地
第7章结构体
2.数据抽象
，既可以提供直角坐标也可以提供极坐标，在函数中
 直角坐标做加减法比较方便，
极坐标做
现在需要
115
下二
贝
---
## Page 116
体complex_struct 的存储表示，例如改为用极坐标来存储：
看成一个整体，通过调用相关函数来取它的直角坐标和极坐标。这样就可以非常方便地替换掉结构
可以看出,
在此基础上就可以实现复数的加减乘除运算了
struct complex_struct make_from_real_img(double x, double y)
double
double 
double real_part(struct complex_struct z)
struct complex_struct {
double 
#include 
complex_struct z2)
complex_struct z2)
struct complex_struct sub_complex(struct complex_struct zl, struct
复数加减乘除运算的实现并没有直接访问结构体complex_struct的成员x和y,
angle(struct complex_struct z)
 magnitude(struct complex_struct z)
img_part(struct complex_struct z)
return z.A;
return z.r * cos(z.A);
double r, A;
 return make_from_mag_ang(magnitude(zl)
return make_from_mag_ang(magnitude(zl)
 return make_from_real_img(real_part(zl) + real_part(z2),
return
return 
z.r * sin(z.A);
z.r;
angie(zl) - angle(z2));
angle(zl)
img_part(z1)
angle(z2));
/ magnitude(z2),
* magnitude(z2),
而是把它
116
---
## Page 117
level of indirection."这里的indirection其实就是abstraction的意思。
象使得系统的复杂性是可以控制的，任何改动都只局限在某一层，而不会波及整个系统。著名的计
越来越抽象了,
到的数据只是一个抽象的"复数"的概念，
的实现，
在我们的复数运算程序中,
式"：ab+ac=a(b+c)。如果a变了，ab和ac这两项都需要改，但如果写成a(b+c)的形式就只需要改其
这里是一种抽象的思想。其实"抽象"这个概念并没有那么抽象，
这
知
提取出来组成复数存储表示 
有直接访问它的成员，
何改动，
虽然结构体complex_struct的存储表示做了这样的改
里的复数存储表示层和复数运算层称为抽象层（AbstractionLayer）
道。
数得到这些坐标。再往上看，其它使用复数运算的程序看到的数据是一个更为抽象的"复数"的概
看到的数据是结构体的两个成员x和y,
一个因子。