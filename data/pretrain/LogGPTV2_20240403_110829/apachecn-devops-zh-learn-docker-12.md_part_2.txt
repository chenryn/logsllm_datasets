```
$ kubectl create -f sample-service.yaml
```
现在我们可以使用`curl`来访问服务:
```
$ curl -4 http://localhost
```
我们应该会收到 Nginx 欢迎页面作为回答。继续之前，请删除您刚刚创建的两个对象:
```
$ kubectl delete po/nginx
$ kubectl delete svc/nginx-service
```
# 桌面 Docker 中的 Kubernetes 支持
从版本`18.01-ce,`开始，Mac 的 Docker 和 Windows 的 Docker 已经开始支持开箱即用的 Kubernetes。希望将其容器化应用部署到 Kubernetes 的开发人员可以使用这个编排器，而不是 SwarmKit。默认情况下，Kubernetes 支持已关闭，必须在设置中启用。第一次启用 Kubernetes 时，Mac 或 Windows 的 Docker 将需要一点时间来下载创建单节点 Kubernetes 集群所需的所有组件。与同样是单节点集群的 Minikube 相反，Docker 工具提供的版本使用了所有 Kubernetes 组件的容器化版本:
![](img/00e07bf5-62d4-40f2-9579-57ec76edd036.png)
Kubernetes support in Docker for Mac and Windows
上图大致概述了如何将 Kubernetes 支持添加到 Mac 和 Windows 的 Docker 中。Docker 使用 hyperkit 来运行基于 LinuxKit 的虚拟机。Windows docker 使用 Hyper-V 实现了同样的效果。在虚拟机内部，安装了 Docker 引擎。引擎的一部分是 SwarmKit，它启用了 Swarm 模式。Mac 或 Windows 的 Docker 使用**kube dam**工具在该虚拟机中设置和配置 Kubernetes。以下三个事实值得一提:Kubernetes 将其集群状态存储在 etcd 中，因此我们在该虚拟机上运行了 etcd。然后，我们有了组成 Kubernetes 的所有服务，最后，还有一些支持将 Docker 栈从 Docker CLI 部署到 Kubernetes 的服务。这项服务不是官方 Kubernetes 发行版的一部分，而是 Docker 特有的。
Kubernetes 的所有组件都在基于 LinuxKit 的虚拟机的容器中运行。这些容器可以通过 Mac 或 Windows 的 Docker 中的设置隐藏。如果您启用了 Kubernetes 支持，请参阅下一节，了解笔记本电脑上运行的 Kubernetes 系统容器的完整列表。为了避免重复，从现在开始我将只谈论桌面的 Docker，而不是 Mac 的 Docker 和 Windows 的 Docker。我要说的一切同样适用于这两个版本。
与 Minikube 相比，支持 Kubernetes 的 Docker for Desktop 的一大优势是，前者允许开发人员使用单一工具来构建、测试和运行针对 Kubernetes 的容器化应用。甚至可以使用 Docker Compose 文件将多服务应用部署到 Kubernetes 中。
现在，让我们把手弄脏。首先，我们必须启用 Kubernetes。在 Mac 上，单击菜单栏中的 Docker 图标，然后选择首选项。在打开的对话框中，选择 Kubernetes，如下图所示:
![](img/303f6adb-4812-4edd-b9c8-a81679cd5501.png)
Enabling Kubernetes in Docker for Mac
然后，选择启用 Kubernetes 复选框。此外，勾选其他复选框显示系统容器(高级)。然后，单击应用按钮。您将被警告，Kubernetes 的安装和配置需要几分钟时间:
![](img/80aac528-6dbe-49b3-a52a-a24e54382927.png)
Warning that installation and configuration of Kubernetes takes a while
单击“安装”开始安装。现在是你休息一下，享受一杯好茶的时候了。
一旦安装完成(Docker 通过在设置对话框中显示绿色状态图标来通知我们)，我们就可以测试它了。由于我们现在的笔记本电脑上运行着两个 Kubernetes 集群，Minikube 和 Docker for Mac，我们需要配置`kubectl`来访问后者。首先，让我们列出我们拥有的所有上下文:
![](img/f7a92fdc-5bc4-4de7-acfa-08bb50e15a44.png)
List of contexts for kubectl
在这里，我们可以看到，在我的笔记本电脑上，我有前面提到的两个上下文。目前，Minikube 上下文仍处于活动状态，通过`CURRENT`列中的星号可见。我们可以使用以下命令切换到`docker-for-desktop`上下文:
![](img/f92a7ac4-23c2-4361-b821-b8fc83e3fa8e.png)
Changing the context for the Kubernetes CLI
现在，我们可以使用`kubectl`来访问 Docker for Mac 刚刚创建的集群。我们应该看到这一点:
![](img/626898a0-ba66-4cba-ba30-8bc2dc0613ea.png)
The single node Kubernetes cluster created by Docker for Mac
好吧，这个看起来很眼熟。这与我们在使用 Minikube 时看到的几乎相同。我的 Mac Docker 正在使用的 Kubernetes 版本是`1.9.2`。我们还可以看到该节点是一个主节点。
如果我们列出当前在我们的 Docker for Mac 上运行的所有容器，我们会得到这个列表(注意我使用`--format`参数只输出容器的`Container ID`和`Names`，如下图所示:
![](img/702afe62-dd7d-428a-96d2-3c1f95698552.png)
Kubernetes system containers
在该列表中，我们可以识别组成 Kubernetes 的所有现在熟悉的组件，例如:
*   应用编程接口服务器
*   和 cd
*   多维数据集代理
*   域名服务
*   Kube 控制器
*   多维数据集计划程序
也有容器里面有`compose`这个词。这些是 Docker 特定的服务，用于允许我们将 Docker Compose 应用部署到 Kubernetes 上。Docker 翻译 Docker Compose 语法，并隐式创建必要的 Kubernetes 对象，如部署、pods 和服务。
通常情况下，我们不想让这些系统容器打乱我们的容器列表。因此，我们可以在 Kubernetes 的设置中取消选中“显示系统容器”复选框。
现在，让我们尝试将 Docker Compose 应用部署到 Kubernetes。导航到我们的`labs`文件夹的子文件夹`ch12`。我们使用`docker-compose.yaml`文件将应用部署为栈:
```
$ docker stack deploy -c docker-compose.yml app
```
这就是我们看到的:
![](img/97b35bb2-c455-4fcd-a19e-886ac4f49572.png)
Deploy stack to Kubernetes
我们可以测试应用，例如，使用`curl`，我们将看到它正在按预期运行:
![](img/bf6085fd-ec85-485f-a7d2-7cece616bb77.png)
Pets application running in Kubernetes on Docker for Mac
现在，你应该很好奇，想知道当我们执行`docker stack deploy`命令时，Docker 到底做了什么。我们可以用`kubectl`来了解一下:
![](img/f32be8df-9754-45cc-8898-ac51c7188b0e.png)
Listing all Kubernetes objects created by docker stack deploy
Docker 为`web`服务创建了一个部署，为`db`服务创建了一个状态集。它还自动为`web`和`db`创建了 Kubernetes 服务，以便可以在集群内访问它们。它还创建了用于外部访问的 Kubernetes 服务`svc/web-published`。
至少可以说，这非常酷，并且极大地减少了以 Kubernetes 为指挥者的团队在开发过程中的摩擦。
继续之前，请从群集中删除栈:
```
$ docker stack rm app
```
还要确保您将`kubectl`的上下文重置回 Minikube，因为我们将在本章的所有示例中使用 Minikube:
```
$ kubectl config use-context minikube
```
现在，我们已经介绍了可以用来开发最终将在 Kubernetes 集群中运行的应用的工具，现在是时候了解用于定义和管理此类应用的所有重要 Kubernetes 对象了。我们从吊舱开始。
# 分离舱
与 Docker Swarm 中可能出现的情况相反，您不能在 Kubernetes 集群中直接运行容器。在 Kubernetes 集群中，您只能运行 pods。吊舱是 Kubernetes 斯部署的原子单位。pod 是共享相同内核命名空间(如网络命名空间)的一个或多个位于同一位置的容器的抽象。Docker CroMkit 中不存在等效的。事实上，多个容器可以位于同一位置并共享同一个网络命名空间是一个非常强大的概念。下图显示了两个吊舱:
![](img/40797c58-26cc-464d-ad98-5a7cc86a5802.png)
Kubernetes pods
在上图中，我们有两个吊舱，**吊舱 1** 和**吊舱 2** 。第一个容器包含两个容器，而第二个容器只包含一个容器。每个 pod 都获得一个由 Kubernetes 分配的 IP 地址，该地址在整个 Kubernetes 集群中是唯一的。在我们的例子中，这些是 IP 地址`10.0.12.3`和`10.0.12.5`。两者都是由 Kubernetes 网络驱动程序管理的专用子网的一部分。
一个豆荚可以容纳一到多个容器。所有这些容器共享相同的内核命名空间，特别是它们共享网络命名空间。这由包围容器的虚线矩形来标记。由于在同一个 pod 中运行的所有容器共享网络名称空间，每个容器都需要确保使用自己的端口，因为在单个网络名称空间中不允许有重复的端口。在这种情况下，在**舱 1** 中，主容器使用港口`80`，而辅助容器使用港口`3000`。
来自其他容器或节点的请求可以使用容器的 IP 地址和相应的端口号来访问各个容器。例如，您可以通过`10.0.12.3:80`访问运行在 **Pod 1** 主容器中的应用。
# Docker 容器和 Kubernetes pod 网络的比较
现在，让我们比较一下 Docker 的容器网络和 Kubernetes pod 的网络。在这里的图表中，前者在左手边，后者在右手边:
![](img/f5731c82-8f26-497d-890a-877df3957a11.png)
Containers in Pod sharing network namespace
当 Docker 容器被创建并且没有指定特定网络时，Docker 引擎创建一个**虚拟以太网** ( **veth** )端点。第一个容器得到 **veth0** ，下一个容器得到 **veth1** ，以此类推。这些虚拟以太网端点连接到安装时 docker 自动创建的 Linux 桥 **docker0** 。流量从网桥**路由到每个连接的 veth 端点。每个容器都有自己的网络命名空间。没有两个容器使用相同的命名空间。这是有意的，目的是将容器内运行的应用相互隔离。**
对于 Kubernetes 豆荚来说，情况就不同了。创建新的 pod 时，Kubernetes 首先创建一个所谓的暂停容器，其唯一目的是创建和管理 pod 将与所有容器共享的名称空间。除此之外，它没有任何用处，只是睡觉。**暂停**容器通过 **veth0** 连接至桥梁**Docker 0** 。将成为 pod 一部分的任何后续容器都使用 Docker 引擎的特殊功能，该功能允许它重用现有的网络命名空间。这样做的语法如下:
```
$ docker container create --net container:pause ... 
```
重要的部分是`--net`参数，它用作值`container:`。如果我们以这种方式创建一个新的容器，那么 Docker 不会创建一个新的 veth 端点，而是使用与`pause`容器相同的容器。
多个容器共享同一个网络命名空间的另一个重要后果是它们相互通信的方式。让我们考虑包含两个容器的吊舱的以下情况，一个在港口`80`监听，另一个在港口`3000`:
![](img/f3527deb-d627-420c-869e-0e0d62006c0a.png)
Containers in pods communicate via localhost
当两个容器使用相同的 Linux 内核网络命名空间时，它们可以通过 localhost 相互通信，类似于当两个进程在同一主机上运行时，它们也可以通过 localhost 相互通信。这在上图中有所说明。从主容器开始，其内部的容器化应用可以通过`http://localhost:3000`到达在支持容器内部运行的服务。
# 共享网络命名空间
在所有这些理论之后，你可能会想知道一个豆荚实际上是如何被 Kubernetes 创造出来的。Kubernetes 只使用 Docker 提供的内容。那么，*这个网络命名空间共享是如何工作的呢？*首先，Kubernetes 创建了前面提到的所谓的`pause`容器。这个容器除了为那个容器保留内核命名空间并保持它们活动之外没有其他功能，即使容器中没有其他容器在运行。那么，让我们模拟一个吊舱的创建。我们从创建`pause`容器开始，并为此使用 Nginx:
```
$ docker container run -d --name pause nginx:alpine
```
现在我们添加第二个名为`main`的容器，将其附加到与`pause`容器相同的网络命名空间: