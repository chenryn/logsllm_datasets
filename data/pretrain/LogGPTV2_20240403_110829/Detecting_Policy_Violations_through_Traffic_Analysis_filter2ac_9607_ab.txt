are computed separately for each.
We evaluate how well the classiﬁcation process works
using cross-validation [30] and confusion matrices. Cross-
validation is a standard technique for evaluating machine
learning algorithms.
In this case, we use 10-fold cross-
validation. We implement cross-validation by randomly
partitioning the data set into 10 partitions. One partition
is used as test data, the other nine as training data for classi-
fying the test samples. Each partition is used as test data in
turn, and the results of the classiﬁcation are used to form a
confusion matrix. The rows of the confusion matrix repre-
sents the actual class of an item, and the columns the classes
to which the classiﬁcation algorithm assigns the item. Con-
fusion matrices show how readily different classes of items
are distinguished from each other by the classiﬁcation algo-
rithm. Small variations are possible in the results of cross-
validation due to different random partitions of the data set.
4.1 Algorithm description
The classiﬁcation algorithm can be described as follows:
• Load connection packet size probability distributions
and other statistics for connections of known classiﬁ-
cation.
• Generate statistics for connection of unknown classiﬁ-
cation.
• Measure the “distance” between the statistics of the
unknown connection and each known connection.
• Sort the scores in order of closeness.
• The unknown connection is assigned to the same class
as the majority verdict (3 or more) of the closest ﬁve
connections.
4.2 Frequency distributions
The maximum size of packets will vary depending on
the physical network medium used to transmit the pack-
ets. Our experiments were conducted on Ethernet networks,
and for this medium the largest packet size is 1500 bytes.
This quantity is otherwise known as the Maximum Transfer
Unit (MTU). However, we use only the amount of user data
present in each TCP segment for generating the frequency
distributions. We do not count the IP or TCP headers. The
amount of user data that is present in packets is further con-
strained by the TCP Maximum Segment Size (MSS) for
each part of the connection. The network MTU affects the
MSS setting, but it is also affected by the presence of ﬁre-
wall equipment in the network, which can adjust the MSS
of connections. We chose a maximum for our packet size
range of 1300 bytes; larger packets would be assigned to the
same bin as a packet of 1300 bytes.
We did not count packets with no user data, such as TCP
acknowledgment-only packets.
We assigned each data point to one of 30 bins. Too few
bins do not bring out the features of each distribution sufﬁ-
ciently. Too many bins will be oversensitive to minor vari-
ations in the trafﬁc. 30 bins was considered to approximate
a distribution with a bin size of 1 (the extreme) reasonably
well. The bins were of integral size; leftovers were dis-
tributed evenly across the bins, so that all bins are very sim-
ilar in size.
After computing the packet size frequencies, the distri-
bution was normalised to form a probability distribution
which could be used with some selected distance measures.
4.3 Distance measures
There are many distance measures which can be used
to compare the closeness of two probability distributions,
including the variational distance, harmonic mean and
Kullback-Liebler divergence. We used the Jensen-Shannon
divergence [5] (a form of the Kullback-Liebler divergence)
and the Bhattacharyya distance [15].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006The Bhattacharyya distance was calculated using2:
B(P, Q) =
√
piqi
(1)
s
1 −X
i
X
i
The Jensen-Shannon divergence was calculated3 using:
DJS(PkQ) =
1
2
(pi lg
pi
pi+qi
2
+ qi lg
qi
pi+qi
2
)
(2)
In both equations P and Q represent the two probability
distributions being compared. P might represent a distribu-
tion of known classiﬁcation, Q a distribution of unknown
classiﬁcation. However, as these measures are symmetric,
which is known and which is unknown is not important.
Both measures are easily calculated, the Bhattacharyya
distance being somewhat simpler to compute than the
Jensen-Shannon divergence. Results closer to zero indicate
better matches for each measure. The Bhattacharyya dis-
tance has been used with machine learning approaches [5]
and has been used with success for signal selection [15],
for example. The Jensen-Shannon measure is symmetric,
unlike the Kullback-Liebler divergence itself, and was cho-
sen as a representative of the divergence-type measures that
were described as a form of the Kullback-Liebler diver-
gence.
Since we separate a single connection into client- and
server-sourced parts, we will have two distance measure
calculations, one for each distribution, forming a score vec-
tor. The ﬁnal score for any two distributions being com-
pared is the magnitude of the score vector. This allows ad-
ditional measures to be easily used if desired.
4.4 Additional statistics
In addition to the probability distribution distance mea-
sures we can compute, there are many other possible statis-
tics that may be used to shed some light on the type of ac-
tivity occurring during an SSH session. We compute the
following additional statistics:
• Bytes per second for packets with an inter-arrival time
of less than 2 seconds. This statistic captures informa-
tion on the amount of data transferred during the times
when the connection is active, so periods of time when
the connection is idle do not inﬂuence the generation
of the statistic. The statistic is computed by totaling
the packet sizes and dividing by the sum of the inter-
arrival times, for packets with inter-arrival times less
than 2 seconds.
2An alternative form could be B(P, Q) = − lnP
piqi.
3Note that we used logarithms to the base 2 in calculating the Jensen-
√
i
Shannon divergence.
• Packets per second for packets with an inter-arrival
time of less than 2 seconds. This statistic is computed
in the same manner as that of bytes per second.
• Bytes per packet.
• We deﬁne a “chain” as a sequence of packets of the
same size at least 5 packets in length, and use this to
calculate two statistics:
– The packet size whose chains account for the
largest number of packets in the connection.
– The packet size that accounts for the largest num-
ber of chains.
The idea behind these statistics is that an interactive
connection will consist of a large number of packets of
a very similar size.
Typically when using these statistics for classiﬁcation
the logarithm of the value rather than the value itself will be
used. Bytes per second, for example, exhibits a wide range
of values. Using a logarithm of the value reduces the range
of variation and minimizes the effect that a statistic has on
the other statistics being used in the classiﬁcation so that the
effect is not overwhelming. In the case of bytes per second
we also impose a threshold on the value of four kilobytes
per second — anything larger is treated as 4kB/second. This
is sufﬁcient for the main types of behaviour we seek to iden-
tify.
5 Experiments
5.1 Data Collection
The data collected constitutes full header and partial pay-
load information on a subset of the principal author’s SSH
sessions from late 2005 to May, 2006. This constitutes over
400 sessions and 11.5 million packets. All except some ﬁle
transfer sessions (which appears not to be truly interactive,
not even when using sftp) were operated manually. Net-
work trafﬁc was captured using tcpdump, running on ei-
ther the source or sink of the trafﬁc. Care was taken that
packets were not double-counted. Capturing trafﬁc at a
point intermediate to the SSH client and server would have
been preferred, but this option was not available for these
experiments.
Most of the trafﬁc captured comprised interactive, X11,
ﬁle transfer and Web browsing sessions tunneled through
an SSH connection. Small amounts of USENET news traf-
ﬁc (NNTP) and Samba SMB/CIFS ﬁle sharing trafﬁc were
captured4. Finally, a number of graphical sessions using
4Tunneling Samba trafﬁc through SSH required the aid of a transparent
SOCKS proxy redirector and local ﬁrewall support to redirect the trafﬁc to
the proxy.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006NoMachine’s NX X11 compression technology were cap-
tured between a NoMachine NX client and a FreeNX server.
We provide further information on the main categories of
monitored sessions:
• Interactive sessions consisted of a variety of activ-
ities, including mail reading and editing, program-
ming, system administration tasks and other command
shell work. In many sessions extensive use was made
of screen, a terminal multiplexer that allows many
command line shells to be executed simultaneously
within a single login session. The size of the window
will affect the size of response packets from the server
where screen refreshes are required, so windows of a
variety of sizes were used.
• X11 applications used in these sessions included
xterm, synaptic, Acrobat Reader, OpenOfﬁce,
xdvi and ImageMagick.
• Web browsing included access to daily news sites, cor-
porate sites, sites with programming and development
information and a variety of other sites of personal
and professional interest to the principal author. Only
small ﬁles such as PDFs or certain source code pack-
ages were downloaded during these monitored Web
browsing sessions. Web browsing used Mozilla, Sa-
fari and Firefox.
• File transfer was principally composed of small ﬁles
(on the order of several megabytes in size) or groups
of such ﬁles. File transfers were performed in both
directions; that is, ﬁles were transferred both to and
from the ﬁle transfer client.
It should be noted that as far as possible, sessions were
“pure”: a session used for HTTP tunneling would be used
only for HTTP tunneling, not interactive trafﬁc as well (it
would be possible in practice to do both, however).
NX was of interest because it is claimed that this tech-
nology can make X11 sessions useful even over network
links with very restricted bandwidth capabilities, and it was
thought that for some types of activities such a session
might more closely resemble an interactive session than
other types of graphical session. In Section 3, we identiﬁed
security concerns with the use of X11 forwarding through
SSH. In some brief experiments with NX X11 sessions, we
were unsuccessful in using the X11 xkey exploit previously
discussed to snoop on other X windows unrelated to the NX
session; it only appeared to allow snooping on other X win-
dows open in the NX session, a much less signiﬁcant prob-
lem than for ordinary X11 forwarding but still possibly of
concern.
A variety of machines were involved, all older than
3 years running some version of Linux or Mac OS X.
OpenSSH clients and servers were all using protocol 2. No
special effort was made to tune the clients and servers, with
the exception that one client was adjusted to prefer a MAC
(Message Authentication Code, used for data integrity pro-
tection) based on SHA1 instead of MD5, and in order to
prevent ﬁrewall timeouts disconnecting idle sessions keep-
alive messages were enabled to some destinations.
Sessions were established between computers over sev-
eral different types of network connection:
• university computers and researcher’s home (ADSL
512/128);
• university computers and computer of ISP offering
SSH access;
• two university computers, mostly on the same network
subnet;
• two home computers, on the same subnet.
Where possible, trafﬁc was generated with and without
SSH session compression enabled.
The SSH trafﬁc involved with X11 forwarding, NoMa-
chine NX and Samba was restricted to local network activ-
ity — we did not have cause to employ these protocols over
a wide-area network such as the Internet.
One challenge in work of this nature is identifying the
nature of the training sample.
Is this an interactive ses-
sion? Or does the data represent a tunneled Web browsing
session? In some areas, such as the identiﬁcation of P2P
connections [17], it is possible to validate a non-payload
based protocol identiﬁcation technique by using an alterna-
tive payload-based method. However, this is not an option
in this case.
So a wrapper script, written in Python, was installed
on those machines used to initiate SSH connections. This
wrapper script would log the command and start time of an
SSH session in an SQLite [14] database. On command exit,
an opportunity would be presented to the user to add a short
description of the completed session, which would also be
logged to the database. This information could be used later
in classifying a session into one of several different classes.
5.2 Data Processing
Useful information such as the source and destination
addresses and ports, TCP ﬂags and sequence numbers was
extracted from the headers of captured packets and logged
to an SQLite database. Connections were identiﬁed by
searching for the SYN-ﬂagged packets that identiﬁed the
start of each TCP session, and information on the session,
including its start and end time, and a unique 48-bit iden-
tiﬁer based on a hash of the connection start time, source
and destination addresses and ports, would be entered into
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:34:14 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006File transfer
Tunneled HTTP
Interactive
F
H
I
IX X11 forwarding
N
Tunneled NNTP
NX graphical session
Q
S
Tunneled Samba
Table 1. Trafﬁc class labels
the database. Connections were manually classiﬁed into an
appropriate class using stored information on the command
executed and user-supplied comments. Statistical informa-
tion was calculated for every classiﬁed connection. All this
information was stored in the SQLite database for later use.
When generating the statistics for each connection, we
use only packets that have arrived in sequence. The se-
quence can be disturbed by packets reordered in the net-
work, packets retransmitted (and possibly combined with
other packets, rather than the original packet alone being
retransmitted) or packets dropped by the trafﬁc capture pro-
gram. We implement some simple code to follow the TCP
sequence numbers for each connection.
5.3 Results
We use 10-fold cross-validation to generate confusion
matrices to evaluate the performance of the classiﬁcation.
In the ﬁgures and tables that follow, the different types of
trafﬁc are labeled as described in Table 1.
Figures 1, 2, 3 show sample cumulative probability dis-
tributions for trafﬁc through an SSH tunnel representing
interactive, Web browsing and compressed Web browsing
trafﬁc respectively. In each ﬁgure, the graph on the left rep-
resents trafﬁc sent by the client to the server, and the graph
on the right represents trafﬁc sent by the server to the client.
Each line represents a cumulative probability (frequency)