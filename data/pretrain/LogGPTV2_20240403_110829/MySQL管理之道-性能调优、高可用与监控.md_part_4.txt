12063021:47:10InnoDB:Starting an apply batchof logrecordsto the database...
InnoDB:Trxid counteris600
InnoDB:intotal7621rowoperationstoundo
InnoDB:1transaction(s)which must berolledbackorcleanedup
InnoDB:Doingrecovery:scanneduptologsequencenumber755420180
InnoDB:Doingrecovery:scanneduptologsequencenumber755130368
InnoDB:Doingrecovery:scanned uptologsequencenumber555900928
InnoDB:Doingrecovery:scanned uptologsequencenumber550658048
12063021:47:23[Note]/usr/local/MySQL/bin/MySQLd:readyforconnections.
12063021:47:23[Note]EventScheduler:Loaded0events
12063021:47:22
12063021:47:22InnoDB:Rollbackofnon-preparedtransactionscompleted
InnoDB:Startinginbackgroundtherollbackofuncommittedtransactions
because
2InnoDB:1.1.8started;log sequencenumber755420180
recov
take
1分44秒
MySQL5.5恢复时间
consider
this
ment
---
## Page 29
多支持64个InnoDB_Buffer_Pool实例。
的机器数量少了，管理上也轻松了，这样可以更有效地提高工作效率。
差错，领导安排的任务不能在指定的时间里完成，现在改由多个人一起管理，每个人分配
每个缓冲区实例就可以分别管理着自己的freelist、flush list和LRU，也就可以解决上面的
Pool实例的个数，并使用哈希函数将读取缓存的数据页随机分配到一个缓冲池里面，这样
好几十GB时，如果某个线程正在更新缓冲池，将会造成其他线程必须等待的瓶颈。
将其移出内存，从而腾出空间来加载另外的数据）等，当InnoDB_Buffer_Pool缓冲池达到
max_dirty_pages_pct超过设置的值时，会把修改时间较早的page 刷进磁盘）、LRU（在内存
表，等待分配）、flush list（缓冲池产生的脏页（数据库被修改，但未写人磁盘），当innodb
个 block头结构，并初始化各种mutex与rw-lock，将page加人Buffer_Pool的free list 链
访问的数据都在内存里。
innodb_buffer_pool_size设置的缓冲池大小，那么此时数据库的性能是最好的，因为客户端
得太大，因为对物理内存的竞争可能在操作系统上导致内存调度。
高可以将这个参数值设置为机器物理内存大小的80%。尽管如此，建议还是不要把它设置
注意
问题了。
中但最近又不用的数据块，按照最近最少使用算法，MySQL会根据哪些数据属于LRU而
数值设得越高，访问表中数据需要的磁盘I/O就越少。在一个专用的数据库服务器上，最
1.1.7
在MySQL5.5里，可以通过innodb_buffer_pool_instances参数来增加InnoDB_Buffer
简单地说，就是以前是由一个人负责管理上百台服务器，当任务较多时，务必会出现
InnoDB用来缓存它的数据和索引的内存缓冲区的大小。把innodb_buffer_pool_size参
innodb_buffer_pool_size必须大于1 GB，生成InnoDB_Buffer_Pool多实例才有效，最
InnoDB_Buffer_Pool缓冲池复制管理着free list（初始化空闲页，为每一个page指定一
innodb_buffer_pool_size是InnoDB性能的决定性因素，如果你的数据库大小小于
修改my.cnf配置文件，设置3个Buffer_Pool实例，添加的内容如下：
Freebuffers
Bufferpoolsize76799
Dictionarymemoryallocated22706
Totalmemory allocated1282572288;inadditionalpoolallocated0
BUFFERPOOLANDMEMORY
调整后，
innodb_buffer_pool_instances=3
InnoDB同时支持多个BufferPool实例
，你可以用命令“show engine innodb status\G;”来查看：
76657
第1章MySQL5.5介绍·15
---
## Page 30
16·第一部分MySQL5.5新特性篇
Buffer poolsize 25600
Pagesreadahead0.00/s,evicted withoutaccess0.00/s,Randomreadahead0.00/s
Database pages48
Buffer pool size 25599
LRU len:94, unzip_LRU len:0
Modified dbpages
Database pages
INDIVIDUALBUFFERPOOLINFO
Pagesreadahead0.00/s,evictedwithoutaccess0.00/sRandomreadahead0.00/s
Bufferpoolhit rate875/1000,young-makingrate0/1000not0/1000
0.16reads/s,0.00creates/s,0.00writes/s
Pagesread142,created,writtn
0.00youngs/s,0.00non-youngs/s
Pendingwrite:RUo,flushlistO,singlepage0
Pendingreads0
Modifieddbpages0
Old database pages0
Freebuffers
--BUFFERPOOL2
/0sum[0]:cur[0],unzipsum[0]:cur[0]
LRUlen:48,unzip_LRUlen:0
0.08reads/s,0.00creates/s,0.00writes/s
Pagesmadeyoung,notyoung
Pendingites:ushlistina
Pendingreads0
Modifieddbpages0
Olddatabasepages0
Freebuffers25551
-BUFFERPOOL1
/0sum[0]:cur[0],unzip sum[0]:cur[0]
Pagesreadahead0.00/s,evictedwithoutaccess0.00/s,Randomreadahead0.00/s
0.08reads/s,0.00creates/s,0.00writes/s
Pagesread94ratedwitn
0.00youngs/s,0.00 non-youngs/s
Pendingwrites:uhlistinle
Pendingreads0
Olddatabasepages0
Freebuffers
Buffer pool size25600
---BUFFERPOOLO
1/0 sum[0]:cur[0],unzip sum[0]:cur[0]
LRUlen:142,unzip_LRUlen:0
PagesmadeyoungO,notyoung0
.00 youngs/s,0.00 non-youngs/s
25600
25506
94
0
---
## Page 31
PHORES，如果发现有很多waits，那么就应该关闭该功能，从而提升系统性能。
争用，进而堵塞进程。可以使用命令“show engine innodb status\G;”来监控SEMA-
B树索引被缓存在缓冲池中。InnoDB 根据需要对被经常访问索引的那些页面建立哈希索引。
的键的一个前缀上建立哈希索引，不管该键有多长。哈希索引可以是部分的：它不要求整个
索引中获益，它会自动地这么做，无须DBA人工加以干涉。
有一个自动机制，它监视一个索引的使用情况。如果InnoDB 注意到查询会从建立一个哈希
1.1.8可关闭自适应哈希索引
通常情况下，哈希索引可以提高查询性能，但是，在高并发情况下，会造成 RW-latch
注意，哈希索引总是基于表上已存在的B 树索引来建立的。InnoDB会在为该B 树定义
G
如果一个表几乎完全驻留在内存中，执行查询最快的方法就是使用哈希索引。InnoDB
关于innodb_buffer_poo_instances 参数，请参见MySQL5.5手册：
Spinroundsperwait:10.81mutex,25.37RW-shared,98.48RW-excl
RW-excl spins4071,rounds400926,0S waits12336
Mutexspinwaits26137,rounds282623,0Swaits7904
OSWAITARRAYINFO:reservationcount38019,signalcount29541
SEMAPHORES
SEMAPHORES信息如下：
下面是一个测试机的情况：
RW-shared spins25122,rounds 637286,0Swaits17326
buffer
1/0sum[0]:cur[0],unzip sum[0]:cur[0]
LRUlen:O,unzip_LRUlen:0
PagesmadeyoungO,notyoung0
Pendingwrite:lushlistingleag
Pendingreads0
Modifieddbpages0
Olddatabasepages0
Databasepages
buffe
Pagesreadahead0.00/s,evictedwithoutaccess0.00/s,Randomreadahead0.00/s
00reads/s,0.00creates/s,0.00writes/s
Lins
We
0
yaunethe
leas
qiq
lied
ures
Da
第1章
MySQL5.5介绍·17
---
## Page 32
18●第一部分MySQL5.5新特性篇
安装命令如下：
可以在很大程度上提高MySQL服务器在高并发情况下的性能，降低了系统负载。
的成员。与标准glibc库中的malloc 相比，TCMalloc在内存的分配效率和速度上要高得多，
my.cnf 中设置新的系统配置参数innodb_use_sys_malloc来方便地进行控制。默认设置值为
使用当前操作系统中现有的更高效的内存分配程序。对此，可通过在MySQL5.5选项文件
单封装，这些管理函数也是通过互斥量的机制实现的，但这并没有解决可能存在的隐患。
能会成为一个瓶颈。虽然InnoDB 还对OS自带的内存分配管理（malloc和free）作了一次简
CPU优化的内存分配器（memory allocator libraries），所以 InnoDB实现了一个自己的内存
1，表示InnoDB使用操作系统的内存分配程序。
1.1.9在InnoDB中可选择使用内存分配程序
自适应哈希索引。
在InnoDB刚刚被开发的时候，多核CPU还不是这么流行，当时也并没有针对多核
在安装TCMalloc之前，先要安装关联的软件包libunwind(32位操作系统忽略此步骤),
从MySQL5.5.X版本开始，用户可以控制InnoDB是使用自带的内存分配程序，还是
下面介绍TCMalloc的安装和使用方法。
关于自适应哈希索引的介绍，请参见MySQL5.5手册：
可以看到，waits的次数并不是很多，且使用哈希索引的比例为50%，那么就不用关闭
#wget http://download.savannah.gnu.org/releases/ibunwind/libunwind-0.99.tar.gz
2765.81hash searches/s,2513.37non-hash searches/s
INSERTBUFFERANDADAPTIVE HASHINDEX
INSERT BUFFER AND ADAPTIVE HASH INDEX信息如下:
#tarzxvf libunwind-0.99.tar.gz
Hash table size1245217,node heaphas12buffer(s)
mergedoperations:
Ibuf:size1,freelistlen29,segsize31,2merges
insertO,deletemarkO,delete0
insert1,deletemark2,delete0
ce.
hash
.S
asource
---
## Page 33
-MySQL-socket=/tmp/
threads=6-
说明一下，测试系统为 Red Hat Enterprise Linux Server release 6.0 (Santiago）；内核为
MySQL-host=192.168.110.140--MySQL-port=3306--MySQL-user=admin
done
MySQL.sock run >> semi_replication.txt
/usr/local/bin/Sysbench--test=oltp--MysQL-table-engine=innodb
由于是虚拟机，Sysbench参数设置得很小：
下面将用Sysbench 进行压力测试，了解两种内存管理模式的性能对比情况。
如果可以显示类似以下的信息，则表明MySQL已经成功加载TCMalloc。
下面使用lsof命令来查看一下TCMalloc是否生效：
#service MySQLd restart
最后重启MySQL服务：
然后在#executing MySQLd_safe的下一行加人以下内容：
#vi/usr/local/MySQL/bin/MysQLd_safe
#make&&make install
下面开始正式安装google-perftools:
whiletrue
#!/bin/bash
MySQLd13093MySQLmem
#Isof-nIgreptcmalloc
exportLD_PRELOAD=/usr/local/lib/libtcmalloc.so
#make CFLAGS=-fPIC
#CFLAGS=-fPIC./configure--enable-shared
do
2070229936032/usr/local/lib/libtcmalloc.so.0.1.0
#cd libunwind-0.99
三
cdgoogle-perftools-1.7
tar zvxfgoogle-perftools-1.7.tar.gz
./configure
makeCFLAGS=-fPICinstall
done
leti++
while[Si-le 1000]
REG
253,0
--oltp-table-size=10000--max-requests=100--num-
-MySQL-
-password=123456--MySQL-db=test
第1章MySQL5.5介绍·19
---
## Page 34
2
2.6.32-71.el6.x86_64。来看一下压力测试结果，先说明一下，
第一部分
15:20～15:35使用的是InnoDB自带的内存分配程序。
16:20～16:40使用的是系统自带的Malloc内存分配程序。
15:40～16:00使用的是谷歌的TCMalloc内存分配程序。
Database Activity
CPU Utiization路国
D
Connections
avgstatements/sec
MySQL5.5新特性篇
%
1200
1400
#connections
B0O
1000
1
500
0
99
8
6
5
15:20
15:20
15:20
SelectInsert
15:30
15:30
15:30
图1-5
图1-4
KernelUser
15:40
15:40
TotalRunningCached
数据库TPS和CPU负载
UpdateReplace
数据库连接数和CPU
15:50
15:50
15:50
Wait 1/OTotal
16:00
16:00
16:00
16:10
16:10
DeleteCall
，在图1-4和图1-5中：
16:20
16:20
16:20
16:30
16:30
16:30
16:40
16:4
---
## Page 35
发数，表1-2中是该参数的历史默认值。
接受，那么就会进人队列中，直到最终被处理掉。
线程重新请求时无须再进行前面所说的 innodb_thread_concurrency的检查。如果还没有被
两次的机制是为了减少CPU上下文切换的次数，以降低CPU消耗。如果请求被接受了，
么就会按照innodb_thread_sleep_delay预先设定的值休眠N秒，之后再次尝试连接，重试
个用户的请求时，如果已经超过innodb_thread_concurrency预先设置的并发线程数量，那
果是真正的物理机，性能的差异会更明显，有兴趣的读者可以一试。
1.1.10
14.4.7.3.Using Operating System Memory Allocators
Built-in
从MySQL5.5.X版本开始，innodb_thread_concurrency被默认设置为0，表示不限制并
会获得一个innodb_concurrency_tickets 默认500次的通行证，在这些次数用完之前，该
InnoDB使用操作系统线程来处理用户事务请求，它是这样工作的：当InnoDB收到一
关于innodb_use_sys_malloc参数的介绍，请参见MySQL5.5手册：
从结果上看，使用谷歌的TCMalloc内存分配程序对系统的压力相对要小一些。当然如
InnoDBVersion
Load Average
提高默认InnoDB线程并发数
blei
joins).benefit from
oDBalso
LoadAverage
15:20
usinga
表1-2
Earlier than5.1.11
mory
15:30
have
MySQLVersion
more
innodb_thread_concurrency参数默认值
become
leading
inter
.there
ors
rface
15:40
pro
around
'ere
no
图1-5(续）
the
em.
me
15 15
15:50
available,