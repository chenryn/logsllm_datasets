poses, it is not surprising that there has been a signiﬁcant
amount of work on malware analysis and detection, both
using static and dynamic techniques (e.g., [33]–[36]). Also,
binary program slicing [9], [13], [37] and taint analy-
sis [12] are standard techniques that are frequently used.
Compared to previous approaches, our novel contribution is
the automated extraction of proprietary algorithms that are
embedded in malware. That is, we reuse existing code and
transform it into a stand-alone gadget that can be used to
(re)execute speciﬁc malware functionality.
Concurrently and independently of our work, Caballero
that aims to
et al. proposed BCR [10]. BCR is a tool
extract a function from a (malware) binary so that it can
be reused later. Compared to BCR, INSPECTOR has the
following advantages: First, BCR is only able to extract a
single function, while we extract the entire functionality from
a binary. Finding a particular, interesting function (and its
entry point) is a difﬁcult task in itself. We do not have to
solve this problem, since our techniques extract the entire
algorithm that translates program inputs (via system calls)
to program outputs. Of course, such external inputs and
outputs are much easier to identify than internal functions.
Second, we embed an extracted algorithm automatically into
a stand-alone component (a gadget) that can be used by an
analyst to “replay” malware actions. This is different from
BCR, where the analyst has to manually develop additional
code that makes use of the extracted functionality. As an
example, with BCR, an extracted encryption routine would
need to be embedded into a network proxy to be able to
download and decrypt a binary update. In our case, IN-
SPECTOR will generate a gadget that automates the complete
process of downloading and decrypting this binary update.
Third, we provide a mechanism to invert the functionality
of an algorithm so that we can ﬁnd the inputs that lead to
certain outputs. This is valuable when an analyst wants to
decrypt/decode data that was previously encrypted/encoded
by a malware sample.
Lin et al. introduced an attack that extracts an interface
to functionality in a benign program to add malicious
functionality [38]. The idea is to re-use existing code within
a binary (in a sense similar to return-oriented program-
ming [39], [40]) and transform the binary such that malicious
activities are performed (e.g., turning an e-mail client into
a spam-sending trojan). The general concept of reusing
binary functionality is related. However, we are interested
in isolating the algorithm from a given (malicious) binary
that is responsible for a certain activity.
Our approach could be seen as an extension to the
problem of protocol dialog replay [41], [42]. However, while
these approaches only inspect the network-level aspects of
malware communication (between the malware program and
its command and control server), we also include the host-
level operations. For example, we can decrypt an encoded
binary that was downloaded from a remote server. Clearly,
the ability to do this is valuable for practitioners in the ﬁeld.
While our approach is based on ANUBIS, the techniques
we introduced in this paper are general and can also be
realized with the help of other malware analysis platforms
(such as BitBlaze [43]).
VIII. LIMITATIONS
Adversarial code is difﬁcult to analyze. Our system needs
to observe a sample’s malicious activities inside our analysis
environment. That is, we need to see a behavior in the
ANUBIS system in order to collect the relevant log ﬁles
for starting our extraction process. Thus, attacks against the
dynamic analysis environment or the taint analysis are a
concern for us.
ANUBIS is based on an unaccelerated version of the
system emulator QEMU. While standard techniques for
detecting virtual machines do not apply to this tool, it might
be possible to detect the analysis environment using other
means (e.g., emulator speciﬁc hardware names, ANUBIS-
speciﬁc artifacts, etc.). Emulator detection versus stealthy
analysis is a continuing arms race, and detectability is
currently a limitation of dynamic analysis environments. As
a possible solution, and to address emulator checks, we
can attempt to resort to stealthy analysis techniques such
as multi-path exploration [44].
As mentioned in previous sections, our system is con-
servative in the sense that we only include instructions we
have seen during the recorded execution and ﬁx branches in
the gadget accordingly. This can cause undesired side-effects
as input during gadget execution could require the original,
excluded code paths. As a result, the gadget’s behavior may
differ from the behavior of the malware when processing
that input. This could be improved by statically analyzing
excluded code regions and include them if possible.
Evading taint
tracking is problematic for the features
of our system that rely on data tainting (e.g., the gadget
inversion). However, note that the extraction of algorithms
and the generation of gadgets is not dependent on data
tainting. Thus, the core parts of the systems can deal with
this kind of evasion attempts.
Further, our current slicing algorithm works on single
threads. If multiple threads interleave execution by providing
data to, or modifying data from each other, we cannot handle
this situation. However, an improved tracking of threads and
their interdependencies can overcome this shortcoming, and
would not require conceptual improvements.
Although our prototype implementation has some limita-
tions, our evaluation results shows that we can successfully
operate on complex, real-world malware samples. Thus, we
believe that our approach is useful for security practitioners
in many different ways.
IX. CONCLUSION
Unfortunately, malicious software (i.e., malware) is still
a major threat on the Internet
today. In fact, malware
has become the main driving force behind many attacks.
Unlike a decade ago, malware-based attacks are mainly
aiming to make a ﬁnancial proﬁt, and the attackers are
targeting Internet users with the goal of using the victims’
compromised machines for sending spam, launching denial
of service attacks, and stealing conﬁdential data.
In this paper, we improve the state of the art in malware
analysis by presenting a novel approach to automatically
extract, from a given malware binary, the instructions that
are responsible for a certain activity of the sample. These
instructions, which we call gadgets, encapsulate a speciﬁc
behavior that can autonomously perform a particular mali-
cious task (e.g., such as domain generation for command
and control).
Our approach is valuable for analysts in the ﬁeld as un-
derstanding a certain activity that is embedded in a malware
sample (e.g., the update function) is still largely a manual
and difﬁcult task.
ACKNOWLEDGMENTS
This work has been supported by the Austrian Sci-
ence Foundation (FWF) and by Secure Business Austria
(SBA) under grants P-18764, P-18157, and P-18368, by
the European Commission through project FP7-ICT-216026-
WOMBAT, by the ONR under grant no. N000140911042,
and the National Science Foundation (NSF) under grant no.
0845559.
REFERENCES
[1] C. Linn and S. Debray, “Obfuscation of Executable Code to
Improve Resistance to Static Disassembly,” in Conference on
Computer and Communications Security (CCS), 2003.
[2] I. Popov, S. Debray, and G. Andrews, “Binary Obfuscation
Using Signals,” in USENIX Security Symposium, 2007.
[3] A. Moser, C. Kruegel, and E. Kirda, “Limits of Static
Analysis for Malware Detection ,” in 23rd Annual Computer
Security Applications Conference (ACSAC), 2007.
[4] M. I. Sharif, A. Lanzi, J. T. Gifﬁn, and W. Lee, “Impeding
Malware Analysis Using Conditional Code Obfuscation,” in
Network and Distributed System Security Symposium (NDSS),
2008.
[5] L. Cavallaro, P. Saxena, and R. Sekar, “On the Limits
of Information Flow Techniques for Malware Analysis and
Containment,” in 5th Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment (DIMVA), 2008.
[6] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szyd-
lowski, R. Kemmerer, C. Kruegel, and G. Vigna, “Your Botnet
is My Botnet: Analysis of a Botnet Takeover,” in Conference
on Computer and Communication Security (CCS), 2009.
[7] F. Leder and T. Werner, “Containing Conﬁcker: Conﬁcker
Domain Name Generation,” http://net.cs.uni-bonn.de/wg/cs/
applications/containing-conﬁcker, 2009.
[8] M. Ligh and G. Sinclair, “Malware RCE: Debuggers and
Decryptor Development ,” Defcon 16, 2008.
[9] H. Agrawal and J. R. Horgan, “Dynamic Program Slicing,”
in Conference on Programming Language Design and Imple-
mentation (PLDI), 1990.
[10] J. Caballero, N. M. Johnson, S. McCamant, and D. Song,
“Binary Code Extraction and Interface Identiﬁcation for Se-
curity Applications,” in Network and Distributed Systems
Symposium (NDSS), February 2010.
[11] U. Bayer, “Anubis: Analyzing Unknown Binaries,” http://
anubis.iseclab.org, 2009.
[12] J. Newsome and D. X. Song, “Dynamic Taint Analysis for
Automatic Detection, Analysis, and SignatureGeneration of
Exploits on Commodity Software,” in Network and Dis-
tributed System Security Symposium (NDSS), 2005.
[13] X. Zhang, R. Gupta, and Y. Zhang, “Precise Dynamic Slicing
Algorithms,” in International Conference on Software Engi-
neering (ICSE), 2003.
[14] F. Bellard, “Qemu: A Fast and Portable Dynamic Translator,”
in Usenix Annual Technical Conference, Freenix Track, 2005.
[15] U. Bayer, C. Kruegel, and E. Kirda, “TTAnalyze: A Tool for
Analyzing Malware,” in Annual Conference of the European
Institute for Computer Antivirus Research (EICAR), 2006.
[16] U. Bayer, P. Milani Comparetti, C. Hlauschek, C. Kruegel,
and E. Kirda, “Scalable, Behavior-Based Malware Cluster-
ing,” in Network and Distributed System Security Symposium
(NDSS), 2009.
[17] C. Kolbitsch, P. Milani Comparetti, C. Kruegel, E. Kirda,
X. Zhou, and X. Wang, “Effective and Efﬁcient Malware De-
tection at the End Host,” in 18th Usenix Security Symposium,
2009.
[18] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace,
“ReFormat: Automatic Reverse Engineering of Encrypted
Messages,” in 14th European Symposium on Research in
Computer Security (ESORICS), 2009.
[19] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham,
“Efﬁcient Software-based Fault Isolation,” in 14th ACM Sym-
posium on Operating Systems Principles (SOSP), 1993.
[20] S. McCamant and G. Morrisett, “Evaluating SFI for a CISC
architecture,” in 15th USENIX Security Symposium, 2006.
[21] W. Sun, Z. Liang, V. Venkatakrishnan, and R. Sekar, “One-
way Isolation: An Effective Approach for Realizing Safe Ex-
ecution Environments,” in Network and Distributed Systems
Symposium (NDSS), 2005.
[22] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native Client: A
Sandbox for Portable, Untrusted x86 Native Code,” in IEEE
Symposium on Security and Privacy, 2009.
[23] T. Holz, C. Gorecki, K. Rieck, and F. C. Freiling, “Measuring
and Detecting Fast-Flux Service Networks,” in Proceedings
of the 15th Annual Network & Distributed System Security
Symposium (NDSS), 2008.
[24] N. Freed and N. Borenstein, “Multipurpose Internet Mail
Extensions (MIME) Part One: Format of Internet Message
Bodies,” http://tools.ietf.org/html/rfc2045#section-6.8, 1996.
[25] P. Porras, H. Sa¨ıdi, and V. Yegneswaran, “A Foray into Con-
ﬁcker’s Logic and Rendezvous Points,” in USENIX Workshop
on Large-Scale Exploits and Emergent Threats (LEET), 2009.
[26] A. Decker, D. Sancho, L. Kharouni, M. Goncharov, and
R. McArdle, “Pushdo/Cutwail Botnet: A study of the Push-
do/Cutwail Botnet,” TrendMicro Labs, 2009.
[27] A. Sotirov, “Tiny PE: Creating the smallest possible PE exe-
cutable,” http://www.phreedom.org/solar/code/tinype/, 2006.
[28] C. Kreibich, C. Kanich, K. Levchenko, B. Enright, G. M.
Voelker, V. Paxson, and S. Savage, “On the Spam Campaign
Trail,” in 1st Usenix Workshop on Large-Scale Exploits and
Emergent Threats (LEET), 2008.
[29] Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, and I. Os-
ipkov, “Spamming Botnets: Signatures and Characteristics,”
SIGCOMM Comput. Commun. Rev., vol. 38, no. 4, 2008.
[30] J. P. John, A. Moshchuk, S. D. Gribble, and A. Krish-
namurthy, “Studying Spamming Botnets Using Botlab,” in
6th USENIX Symposium on Networked Systems Design and
Implementation (NSDI), 2009.
[31] T. Holz, M. Engelberth, and F. Freiling, “Learning More
About the Underground Economy: A Case-Study of Keylog-
gers and Dropzones,” in European Symposium on Research
in Computer Security (ESORICS), 2009.
[32] Finjan Malicious Code Research, “Malware Analysis -
Trojan Banker URLZone/Bebloh,” http://www.ﬁnjan.com/
MCRCblog.aspx?EntryId=2345, 2009.
[33] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda,
“Panorama: Capturing System-wide Information Flow for
Malware Detection and Analysis,” in ACM Conference on
Computer and Communication Security (CCS), 2007.
[34] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song,
“Dynamic Spyware Analysis,” in Usenix Annual Technical
Conference, 2007.
[35] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. Kemmerer,
“Behavior-based Spyware Detection,” in 15th Usenix Security
Symposium, 2006.
[36] A. Lanzi, M. I. Sharif, and W. Lee, “K-Tracer: A System
for Extracting Kernel Malware Behavior,” in Network and
Distributed System Security Symposium (NDSS), 2009.
[37] M. Weiser, “Program Slicing,” in International Conference on
Software Engineering (ICSE), 1981.
[38] Z. Lin, X. Zhang, and D. Xu, “Reuse-Oriented Camouﬂaging
Trojan: Vulnerability Detection and Attack Construction,” in
IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN-DCCS 2010), June 2010.
[39] H. Shacham, “The Geometry of Innocent Flesh on the Bone:
Return-into-libc Without Function Calls (on the x86),” in
ACM Conference on Computer and Communications Security
(CCS), 2007.
[40] R. Hund, T. Holz, and F. Freiling, “Return-Oriented Rootkits:
Bypassing Kernel Code Integrity Protection Mechanisms,” in
18th USENIX Security Symposium, 2009.
[41] J. Newsome, D. Brumley, J. Franklin, and D. Song, “Re-
player: Automatic Protocol Replay by Binary Analysis,” in
13th ACM Conference on Computer and Communications
Security (CCS), 2006.
[42] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dis-
patcher: Enabling Active Botnet Inﬁltration using Automatic
Protocol Reverse-Engineering,” in ACM Conference on Com-
puter and Communication Security (CCS), 2009.
[43] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G.
Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena,
“BitBlaze: A New Approach to Computer Security via Binary
Analysis,” in 4th International Conference on Information
Systems Security (ICISS), 2008.
[44] A. Moser, C. Kruegel, and E. Kirda, “Exploring Multiple
Execution Paths for Malware Analysis,” in IEEE Symposium
on Security and Privacy, 2007.