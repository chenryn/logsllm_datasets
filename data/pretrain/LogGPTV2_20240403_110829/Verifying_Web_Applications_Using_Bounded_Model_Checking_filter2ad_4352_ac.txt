(cid:184)
(cid:185)
(cid:12)
(cid:32)
:
(cid:154)
,
(cid:12)
(cid:11)
C c g
(cid:12)
(cid:11)
C c g
,
2;c c
1
(cid:11)
C c g
Figure 5. Constraint construction procedure. 
(cid:32)
:
1
2
,
,
(cid:12)
(cid:12)
,
is 
If  B 
However,  instead  of  checking  all  assertions  at  the 
same  time  [6]  [7],  we  check  one  assertion  at  a  time  and 
generate  all  counterexamples  for  that  assertion.  For  each 
assertion,  we  generate  a  formula  B  and  check  for  its 
satisfiability. 
satisfiable,  we  obtain  a 
counterexample and make B more restrictive by negating 
out  the  counterexample.  We  iterate  this  loop  until  B  is 
unsatisfiable—that 
is,  when  we  have  collected  all 
counterexamples.  When  generating  a  formula  for  an 
assertion asserti,  we  view  it  and  all  its  preceding 
commands 
c;asserti.  The 
corresponding  formula  Bi  is  then  constructed  with  the 
concatenation 
as 
a 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:16 UTC from IEEE Xplore.  Restrictions apply. 
PHP source code 
Filtered Result  Abstract Interpretation
Renaming 
Constraints for each assertion 
…
if (Nick) {
$tmp=$_GET["nick"];
echo
(htmlspecialchars
  ($tmp) 
);
} else { 
$tmp="You are the". 
$GuestCount." guest"; 
echo($tmp);
}
...
t
…
if (Nick) { 
(cid:12)
;
;
nick
(cid:12)
tmp
(cid:12)
;
(cid:11)
nick
(cid:32)
(cid:11)
tmp
f
i
tmp
u
i
(cid:11)
f
f
;
o
;
…
if bNick then
(cid:32)
t
T
nick
(cid:32)
t
t
tmp
nick
(cid:32)
t
U
tmp
(cid:11)
assert
t
tmp
;
;
(cid:31)
T
(cid:12)
;
} else { 
(cid:32)
tmp
tmp GuestCount
f
;
(cid:11)
o
(cid:12)
;
else
(cid:32)
t
tmp
(cid:11)
assert
t
GuestCount
t
tmp
(cid:31)
T
(cid:12)
;
}
...
…
If bNick then
;
(cid:32)
(cid:32)
it
nick
j
t
jt
tmp
(cid:14)
1
tmp
assert
k
;
T
i
t
nick
(cid:32)
jt
;
U
(cid:14)
1
tmp
(cid:11)
(cid:31)
T
(cid:12)
;
;
else
(cid:14)
j
t
2
tmp
k
t
j
t
(cid:32)
(cid:11)
;
GuestCount
(cid:14)
2
(cid:31)
T
tmp
(cid:12)
;
assert
(cid:14)
1
k
(cid:12)
(cid:154)
(cid:154)
(cid:12)
(cid:154)
(cid:11)
t
t
(cid:11)
(cid:32)
:
j
t
j
t
b
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:11)
(cid:32)
:
B
k
i
t
nick
(cid:32)
b
Nick
? :
T t
i
j
j
(cid:32)
tmp
(cid:14)
1
tmp
b
Nick
i
?
t
nick
(cid:32)
b
?
:
U t
tmp
Nick
(cid:14)
1
tmp
j
(cid:31)
T
j
(cid:12)
(cid:153)
b
Nick
(cid:159)
t
(cid:12)
(cid:154)
(cid:16)
1
nick
(cid:16)
1
tmp
:
j
t
(cid:12)
(cid:154)
B
k
(cid:14)
1
(cid:11)
i
t
(cid:12)
j
(cid:16)
1
nick
(cid:16)
1
tmp
(cid:154)
(cid:12)
(cid:32)
b
i
? :
T t
nick
(cid:32)
b
Nick
i
?
t
tmp
(cid:14)
1
tmp
Nick
(cid:32)
b
Nick
(cid:14)(cid:159)
1
j
tmp
(cid:32) (cid:153)
b
t
Nick
(cid:14)
2
j
nick
?
:
U t
:
t
j
tmp
(cid:154)
(cid:12)
(cid:31)
T
k
?
t
Nick
(cid:159)
t
Nick
(cid:14)
2
j
tmp
GuestCount
(cid:31)
T
(cid:12)
t
tmp
j
(cid:14)
1
tmp
:
t
(cid:12)
(cid:154)
…
(cid:11)
Figure 6. An example of translation from PHP to Boolean formulas. 
(cid:153) (cid:153)
…
b
negation 
(cid:32)
:
Examples are given in Figure 6. 6
asserti:
of 
B
i
(cid:11)
C c g
,
(cid:12)
(cid:154) (cid:153)
(cid:11)
C assert g
,
i
(cid:12)
.
CNF(Bi) transforms Bi into a CNF formula, which can 
then be solved using the efficient SAT solver zChaff [19]. 
As  mentioned  above,  if  CNF(Bi)  is  satisfiable,  zChaff 
proposes a truth assignment (cid:302)i that violates asserti. Let BN
denote the set of all nondeterministic boolean variables in 
the  AI.  According  to  BN’s  values  in (cid:302)i,  we  can  trace  the 
AI and generate a sequence of single assignments, which 
represents  one  counterexample  trace.  In  order  to  collect 
all possible counterexamples, we iteratively make Bi more 
restrictive  until  it  becomes  unsatisfiable.  In  other  words, 
each  time  a  truth  assignment  (cid:302)i
j  is  proposed  at  the  jth
j of BN. Thus 
iteration, we generate the negation clause Ni
j  at  the  j+1th  iteration  is 
the  more  restrictive  formula  Bi
(cid:154)(cid:34)
defined as 
(cid:154)
(cid:154)
(cid:32)
N
N
.
j
j
B
i
B
i
1
i
i
Once  the  formula  becomes  unsatisfiable,  we  continue 
the  constraint  generation  procedure  (see  Figure  5) 
 until  we  encounter  the 
(cid:11)
C assert g
(cid:11)
C c g
(cid:11)
C c g
(cid:32)
:
(cid:154)
(cid:12)
(cid:12)
(cid:12)