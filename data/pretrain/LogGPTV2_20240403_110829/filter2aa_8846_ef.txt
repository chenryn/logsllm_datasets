格式内定义访问控制策略（SAML 发送身份验证消息，但并判断用户的访问权限），并且它通
常实现基于角色的访问控制。XACML 既是一个描述访问控制策略的语言，又是一个以标准化方
式解释和执行策略的处理模型。XACML 有助于给联盟中所有成员提供保证，保证他们向不同角
色授权相同级别的访问。
XACML 也有几个重要的组件：主体 行动 资源
*主体单元(请求实体) requesting entity。
*资源单元(被请求实体/客体) The requested entity /Resource unit。
*行动单元(访问类型/权限参数) types of access。
⑤总结：
GML>SGML>HTML：HTML 的演变过程
SPML(Service Provision)：服务供应：改账户：管理异地账户，交换应用数据，RA>PSP--PST
SAML(Service Assertiong)：断言标记：发账户：SOAP+SOA 交换身份验证和授权数据
XACML/EACML(extensible Access Control)：扩展访问：加权限：加上安全策略
SOAP(Simple Object Access Protocol)：Web 服务的信息交换的结构化的方式
SOA(Service oriented architecture)：对在不同业务领域，不同的系统，用统一的方
式提供独立的服务
⑥XML 与 HTML 的设计区别是：XML 被设计为传输和存储数据，关注的是数据的内容。而
HTML 被设计用来显示数据，关注的是数据的外观。HTML 旨在显示信息，而 XML 旨在传输信息。
XM 和 HTML 语法区别：HTML 的标记不是所有的都需要成对出现，XML 则要求所有的标记必
须成对出现；HTML 标记不区分大小写，XML 则大小敏感，即区分大小写。(XML 语法更严)
B.7 凭证管理系统
身份凭证和访问管理(ICAM)是结合数字身份和相关属性、凭证和访问控制的一个全面方
法。国土安全部总统第 12 号令(HSPD-12)初步提供了一个通用的，标准化的身份凭证，使普通
的物理访问证书安全并可互操作的在线交易。
现有的访问控制系统都升级过渡到“身份凭证和访问管理系统 ICAM”了。
C.整合身份即服务（如云身份）
整合身份服务 Integrating Identity Services/身份云服务
身份即服务，或身份和访问即为服务(IDaaS)，是一个第三方服务，SaaS 的一种，提供身
份和访问管理。IDaaS 为云有效提供单点登录，并在内部客户访问那些基于云的软件即服务。
谷歌、微软都提供 IDaaS，方便用户访问云资源。IDAAS 功能包括：
*身份管理：账号注册与维护。
*访问管理：用户认证，单点登录和强制授权。
*日志报告：行为记录。
它的功能角色就是实现更大的层次的安全策略，也主要实现管理企业的口令及其同步。
IDaaS 的典型案例：WidePoint Corp.
—163—
D.整合第三方身份服务（例如：内部部署）
有 3 种方法来实施基于云的用户帐户管理,如 Office365 什么的软件：
①云的身份标识：在 Office 365 中用户创建和管理，并存储在 Windows Azure 活动目录
(AD)。没有连接到任何其他目录。云身份没有集成的要求。每个用户在云中创建一次，账户只
存在于 Windows Azure AD 中。
②目录同步：用户创建和管理有一个前提—身份提供者和 Windows Azure 的 AD 都是同步
的，用于登录到 Office 365 目录同步使用现有的本地目录并同步到 Windows Azure AD。这种
同步可以完成从一个本地活动目录使用目录同步工具，或从非 AD，本地目录使用 PowerShell
和 Azure AD 图形 API。同步意味着帐户被本地管理和属性不育街恿过 Office 365 云接口进行
编辑。如果目录同步工具用于与 AD，那么口令散列也可以同步，因此用户可以在本地和云中
使用相同的密码登录。
③统一身份/联合身份：除了目录同步，还对内部的身份提供登录处理请求。联合身份通
常是用于实现单点登录。联合需要一个用户在使用联合身份时提供商对用户的密码进行检查。
目录同步需要以填充基于云的目录作为一个先决条件。当使用联合身份时，许多 Office 365
的客户使用活动目录联合服务,其中管理登录密码检查在本地 Microsoft 活动目录基础设施。
一些客户使用第三方身份提供商：微软支持 Office365 与各种资质合格的第三方身份提供商。
E.实施和管理授权机制（授权机制的实现与管理）
一、怎么确定一个用户的访问权限？
有几种机制来实现：
1.隐式拒绝 Implicit Deny
访问控制的基本原则是隐式拒绝，也就是默认拒绝，除非有授权。
2.访问控制矩阵 Access Control Matrix
一个访问控制矩阵是一个包括主体、客体和分配权限的表格。其内容远远超过一个单一的
访问控制列表(ACL)。
下面讲的功能表指定了某些主体对特定客体进行操作的访问权限。功能表和 ACL 完全不
同，这是因为主体被绑定在功能表中（横的行），而客体被绑定在 ACL 中（竖的列）。
3.功能表 Capability Tables
功能表是确定分配给主体特权的另一种方式。也不同于 ACL，因为功能表关注主体(如用
户、组或角色)。例如，为会计角色创建的功能表将包括会计角色可以访问的所有客体列表，
以及分配给会计角色对这些对象的特定权限。相比之下，ACL 专注于客体，会列出被授权访问
文件的所高用户和/或组以及其具体授权内容的文件。
访问控制矩阵=功能表(行)+访问控制列表(列)；ACM=CT+ACL
4.限制接口 Constrained Interface
如果用户没有权限去使用它，那么一个常见的方法是隐藏功能。例如，菜单命令不出现或
者是灰色的、禁用的。
5.基于内容的控制 Content-Dependent Control
数据库视图是基于内容的控制。一个视图从一个或多个表中的检索特定列，创建一个虚拟
—164—
表。被授子访问视图权的用户可以看到特定的数据字段，但不能访问底层表中的数据。
6.基于上下文的控制 Context-Dependent Control
在授予用户访问之前先审查用户之前特定的行为。例如，网上购物，如果购物车中的没有
产品，就不可能进入支付功能；限制某资源的访问时间段也是这种机制。
7.需知/知其所需/知所必须 Need to Know
就算有机密级的授权，也不能所有机密都看，只能被授予看自己工作业务有关的内容。
8.最小特权 Least Privilege
主体只被授予他们完成工作职能时所需要的最小特权。和“需知”差不多，“特权”包括
增、改、删什么的，“知”只包括查看。
9.职责分离 Separation of Duties and Responsibilities
关键数据、敏感功能必须分成由两个或两个以上员工来执行任务，这有助于通过创建一个
制衡系统来防止共谋 Collusion、欺诈 Fraud 和错误。
CISSP 考试通常会在问题中拼出所有术语和缩略词，你不需要记住缩略词，不过最好还是
熟悉下这些缩略语。
二、访问控制模型
就是指明主体如何访问客体的框架。通过访问控制技术和安全机制来加强模型的规则和目
标。最常见有 3 种：自主、强制、角色，还有规则、非自主、基于属性也会考到。
E.1 基于角色的访问控制方法(R-BAC)
R-BAC 有助于通过防止特权蠕变(creep)，从而实施最小特权原则。特权蠕变是用户随着
角色和访问需求的变化不断积累特权的过程和趋势。基于角色的访问控制在有频繁人事变动的
动态环境中是有用的，因为管理员只需将新用户添加到适当的角色就可以轻松地授予多个权
限。角色的访控主要是管主体的权限，而后面讲的自主访控主要是管客体的访问控制列表。与
此类似的还有一种基于任务的访问控制模型：TBAC。
RBAC 提供两者职责分离（separations of duties）。
①静态职责分离 SSD（Static Separation of Duty (SSD) Relations through RBAC）：
这种职责分离通过限制特权的联合（比如：用户不能是出纳和会计角色）来防止欺诈。
②动态职责分离 DSD（Dynamic Separation of Duties (DSD) Relations through RBAC）：
这种职责分离通过限制可能在任何会话中启动的特权的联合（事实上：用户不能同时成为收银
员和收银员监视者，但是用户可以是两个组的成员）来防止欺诈。
考题里会有一种混淆迷惑：
终端用户把某一个文件的访问权限分配给某一个用户组（如 Guest 组），这种方法不是基
于角色，而是自主访控。因为最关键的要素是：基于角色的权限分配一定是由集中的授权者来
实现的，也就是高级的系统管理员。只要是自己来分配，不管怎么分配，都是自主的访问控制。
RBAC 模型在具体软件中的实现方法有 2 种：：
①核心 RBAC
这个组件会集成到每一个 RBAC 实现中，其原因在于它是 RBAC 模型的基础。用户、角色、
—165—
权限、操作和会话应根据安全策略进行定义和对应。
• 用户和特权之间存在一种多对多关系。
• 会话是某个用户和一个己分配角色子集之间的对应关系。
• 提供传统但健壮的、基于组的访问控制。
许多用户可以属于多个组，并拥有每个组所享有的各种特权。当用户登入时(这是一个会
话)，该用户所分配到的各种角色和组将立即对这名用户有效。如果你是 Accounting 角色、
RD 组和 Administrative 角色的成员，那么你在登录后将立即拥有分配给这些组的所有权限。
因为在作出访问决策时能够包含其他组件，而不是仅仅根据一组凭证作出决策，所以这种
模型提供了健壮的选择。RBAC 系统还可以配置为包含时间段、角色位置、星期几等。这意味
着，除了用户 ID 和凭证之外，其他信息也可以用于访问决策。
②层次化 RBAC
这个组件允许管理员建立一个组织化 RBAC 模型，该模型对应特定环境中需要的组织机构
和功能描述。因为各种业务己经建立在一个人员层次化结构中，所以该组件非常有用。很多时
候，你在行政管理系统中的位置越高，你所拥有的访问权限就越多。
(1) 角色关系定义了用户成员和权限继承。例如，护士角色能够访问某些文件，实验室技
术员角色则能够访问另外一些文件。医生角色继承了上述两个角色的权限和访问权利，而且还
具有已经为医生角色分配的更多权限。因此，层次化是其他角色权限和权利的累积。
(2) 反映组织机构和功能描述。
(3) 存在两种层次类型：
• 有限层次只允许一个层次级别(角色 l 继承角色 2 的权限，并且没有继承其他角色)。
• 普通层次允许多个层次级别(角色 1 继承角色 2 和角色 3 的权限)。
层次是一种划分角色结构并反映组织机构授权和责任的自然方法。角色层次定义角色之间
的继承关系。这种模型提供了两种不同的职责分离。（静态的 SSD 和动态的 DSD）
RBAC 实施控制的基本架构有 4 种：
①非 RBAC
非 RBAC 授予用户访问数据或通过传统的映射应用程序，如 ACL。这些没有正式的“角色”
与映射关联，除了通过特定用户的任意标识。
②受限 RBAC
是当用户映射角色在单个应用程序，而不是通过组织范围的角色结构。在一个受限的 RBAC
系统的用户能够访问 non-RBAC-based 的应用程序或数据。受限 RBAC 的关键属性是用户的角
色是在一个应用程序中定义的，而不是基于用户的组织工作的职能。
③混合 RBAC
基于用户在组织内特定的角色，适用于多个应用程序或系统。这角色然后应用于应用程序
或系统，注册到组织的基于角色的模型。然而，随着“混合”一词表明，存在这样的情况，用
户还可以被分配给仅在特定的应用程序定义的角色
④全 RBAC
是由组织的策略和访问控制的基础设施定义的角色控制，然后应用到整个企业的应用程序
和系统。基于企业的应用程序，系统，以及相关的数据应用来定义权限，而不是一个特定的应
—166—
用程序或系统定义。
E.2 基于规则的访问控制方法(Rule-BAC)
一个基于规则的访问控制(Bule-BAC) Rule-based Access Controls，使用一套规则、限
制或过滤器来确定能和不能出现在一个系统上的东西。它包括给予主体访问客体的权利，或授
予主体执行一个动作的能力。有关规则-BAC 模型的一个独特特征是他们有适用于所有主体的
全局规则。也就是说，它不区分用户，只看规则；不识别身份，只看行为。
规则-BAC 模型的最常见例子就是防火墙。防火墙包括 ACL 中的一组规则或过滤器，由管
理员定义。防火墙都包含一个全局的、最终的规则(称为隐式拒绝规则)，会拒绝所有没有设定
的流量（白名单）。
基于规则的访问控制还有另一实现方式：即基于属性的访问控制模型(ABAC)
Attribute-based Access Controls。使用了属性比规则要更具体一些。许多软件定义的网络
应用程序使用 ABAC 模型，可以定义不有的角色使用不同的网络服务。
E.3 强制访问控制（MAC）
强制访问控制（MAC）mandatory access control 模型，需要使用分类标签，并不使用规
则。每个分类标签代表一个安全域或者安全领域。安全域是共享一个公共安全策略的主客体集
合。也就是说，主体分为不同的密级，客体也分为不同的密级，同一密级的算是一个安全域。
在桔皮书（通用准则 CC）里是等级 B。（前面基于规则的访问控制是不使用标签的），不过强
制访控也算是基于规则的一种。
MAC 模型通常被称为基于格子的模型 lattice-based model。MAC 模型是抑制型的、禁止
性的，它基于隐式拒绝原则（implicit‐deny philosophy），而不是直接拒绝原则（explicit
‐deny philosophy)。当然，同一密级的用户也要根据“知需”原则区分访问权限，同一密级
的客体也要分成不同的组。不能什么都能看。这样，MAC 访问控制模型就有 3 种应用方式：
MAC 模型中的分类使用以下三种类型的环境之一（分层+隔离+混合）：
①分层环境 Hierarchical Environment
只区分密级来管理，高密级用户可以看低密级数据，低密级肯定不能访问高密级了。
②隔间区分环境 Compartmentalized Environment