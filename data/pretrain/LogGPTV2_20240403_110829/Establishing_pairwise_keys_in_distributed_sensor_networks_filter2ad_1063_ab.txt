Ps = 1 − (1 − p)(1 − p2)d. For example, assuming p = 0.3 and
d = 30, we have Ps = 1− (1− 0.3)(1− 0.09)30 ≈ 0.959. Figure
1(b) shows the relationship between Ps and the combinations of p
and d.
It follows from the security analysis in [2] that an attacker can-
not determine non-compromised keys if he/she has compromised
no more than t sensors. Now assume an attacker randomly com-
promises Nc sensors, where Nc > t. Consider any polynomial f
in F. The probability of f being chosen for a sensor node is s(cid:1)
s ,
and the probability of this polynomial being chosen exactly i times
among Nc compromised sensor nodes is
s(cid:1)
s )
i
(1 − s(cid:1)
s )
P (i) =
Nc!
(Nc − i)!i!
(
Nc−i.
Thus, the probability of any polynomial being compromised is Pc =
1 − Pt
i=0 P (i). Since f is any polynomial in F, the fraction of
compromised links between non-compromised sensors can be esti-
mated as Pc. Figure 2 includes the relationship between the frac-
tion of compromised links for non-compromised sensors and the
number of compromised nodes for some combinations of s and s(cid:1)
.
If an attacker knows the distribution of polynomials over the sen-
sor nodes, he/she may target at speciﬁc sensors in order to compro-
mise the keys derived from a particular polynomial. In this case,
the attacker only needs to compromise t + 1 sensors. However,
it is generally more difﬁcult than randomly compromising sensors,
since the attacker has to compromise the selected nodes.
An easy ﬁx to remove the above threat is to restrict that each
polynomial be used for at most t + 1 times. As a result, an attacker
cannot recover a polynomial unless he/she compromises all related
sensors. Though effective at improving the security, this method
also puts a limit on the maximum number of sensors for a given
combination of s and s(cid:1)
. Indeed, given the above constraint, the
total number of sensors cannot exceed (t+1)·s
In this scheme, each sensor has to store s(cid:1) t-degree polynomi-
als over Fq. Thus, the storage overhead is s(cid:1)
(t + 1) log q, which
s(cid:1)
.
is equivalent to storing s(cid:1)
(t + 1) keys. During polynomial share
discovery, the source node needs to broadcast a list of s(cid:1)
IDs. The
communication overhead is mainly due to the transmission of such
lists. Once a sensor node determines the polynomial to compute
a pairwise key, the computational overhead is mainly due to the
evaluation of a t-degree polynomial over Fq.
4.2 Comparison with Previous Schemes
Now let us compare our scheme with the basic probabilistic [5],
the q-composite [4], and the random pairwise keys schemes [4].
Figures 2(a) and 2(b) show the security performance of our new
scheme, the basic probabilistic scheme [5], and the q-composite
scheme [4]. (We will compare our new scheme with the random
pairwise keys scheme later.) These ﬁgures clearly show that before
the number of compromised sensor nodes reaches a certain point,
our scheme performs much better than both of the other schemes.
When the number of compromised nodes exceeds a certain point,
the other schemes have fewer compromised links than ours. Never-
theless, under such circumstances, none of these schemes provide
sufﬁcient security due to the large fraction of compromised links
(over 60%). Thus, our scheme clearly has advantages over the ba-
sic probabilistic scheme [5] and the q-composite scheme [4].
The random pairwise keys scheme does not allow reuse of the
same key by multiple pairs of sensors. Thus, compromise of some
sensors does not lead to the compromise of links between non-
compromised sensors. As we discussed earlier, with a restriction
that no polynomial be used more than t times, our scheme can en-
sure the same property.
s(cid:1)
s×(t+1)
Now we compare the performance between our scheme under
the above restriction and the random pairwise keys scheme. The
maximum number of nodes that our scheme supports can be es-
timated as N =
. Assuming the storage overhead in each
sensor is C = s(cid:1)·(t+1), we have s = N×s(cid:1)2
C . Together with Equa-
tion 1, we can derive the probability of establishing a pairwise key
directly with a given storage overhead. Figure 3 plots the proba-
bility of two sensors sharing a pairwise key directly in terms of the
maximum network size for the random pairwise keys scheme [4]
and our scheme. We can easily see that our scheme has lower but
almost the same performance as the random pairwise keys scheme.
Our scheme has several advantages over the random pairwise
keys scheme [4]. In particular, in our scheme, sensors can be added
RS(s'=2,s=11,t=99)
q-composite(q=1)
Basic probabilistic
RS(s'=3,s=25,t=66)
q composite(q=2)
RS(s'=4,s=43,t=49)
q composite(q=3)
RS(s'=2,s=7,t=99)
q-composite(q=1)
Basic probabilistic
RS(s'=3,s=16,t=66)
q-composite(q=2)
RS(s'=4,s=27,t=49)
q-composite(q=3)
n
e
e
w
t
e
b
s
k
n
i
l
i
d
e
s
m
o
r
p
m
o
c
f
o
n
o
i
t
c
a
r
F
i
s
r
o
s
n
e
s
d
e
s
m
o
r
p
m
o
c
-
n
o
n
1.2
1
0.8
0.6
0.4
0.2
0
0
100
200
400
300
700
Number of compromised nodes
500
600
800
900
1000
n
e
e
w
t
e
b
s
k
n
i
l
i
d
e
s
m
o
r
p
m
o
c
f
o
n
o
i
t
c
a
r
F
i
s
r
o
s
n
e
s
d
e
s
m
o
r
p
m
o
c
-
n
o
n
1.2
1
0.8
0.6
0.4
0.2
0
0
50
100
200
150
350
Number of compromised nodes
250
300
400
450
500
(a) p=0.33
(b) p=0.5
Figure 2: Fraction of compromised links between non-compromised sensors v.s. number of compromised sensor nodes. RS refers to
our scheme. Assume each node has available storage for 200 keys.
y
e
k
n
o
m
m
o
c
a
g
n
i
r
a
h
s
f
o
y
t
i
l
i
b
a
b
o
r
P
RS(s'=2,t=99)
RS(s'=6,t=32)
RS(s'=10,t=19)
Random pairwise keys
1.2
1
0.8
0.6
0.4
0.2
0
0
500
1000
1500
2000
2500
3000
3500
4000
Maximum supported network size
Figure 3: The relationship between the probability of establishing a common key and the maximum supported network size in order
to be resilient against node compromise. Assume each node has available storage equivalent to 200 keys.
dynamically without having to contact the previously deployed sen-
sors. In contrast, in the random pairwise keys scheme, if it is nec-
essary to dynamically deploy sensors, the setup server has to ei-
ther reserve space for sensors that may never be deployed, which
reduces the probability that two deployed sensors share a common
key, or inform some previously deployed sensors of additional pair-
wise keys. Moreover, given sensor storage constraints, our scheme
(without the restriction on the reuse of polynomials) allows the net-
work to grow, while the random pairwise keys scheme has an upper
limit on the network size. Thus, our scheme would be a more at-
tractive choice than the random pairwise keys scheme in certain
applications.
5. GRID-BASED KEY PREDISTRIBUTION
In this section, we give another instantiation of the general frame-
work, which we call grid-based key predistribution. This scheme
has a number of attractive properties. First, it guarantees that any
two sensors can establish a pairwise key when there is no com-
promised sensors, provided that the sensors can communicate with
each other. Second, this scheme is resilient to node compromise.
Even if some sensors are compromised, there is still a high prob-
ability of establishing a pairwise key between non-compromised
i (x, y), f r
sensors. Third, a sensor can directly determine whether it can es-
tablish a pairwise key with another node, and if it can, which poly-
nomial should be used. As a result, there is no communication
overhead during polynomial share discovery.
Suppose a sensor network has at most N sensor nodes. The grid-
based key predistribution scheme then constructs a m×m grid with
i (x, y)}i=0,...,m−1, where
a set of 2m polynomials {f c
m = (cid:10)√
N(cid:12). As shown in Figure 4(a), each row i in the grid is
associated with a polynomial f r
i (x, y), and each column i is asso-
ciated with a polynomial f c
i (x, y). The setup server assigns each
sensor in the network to a unique intersection in this grid. For the
sensor at the coordinate (i, j), the setup server distributes the poly-
nomial shares of f c
j (x, y) to the sensor. As a result,
sensor nodes can perform share discovery and path discovery based
on this information.
For convenience, we encode the coordinate of a sensor into a
single-valued sensor ID. Let l = (cid:10)log2 m(cid:12). Then any valid column
or row coordinate can be represented as an l-bit binary string. We
then denote the ID of a sensor as the concatenation of the binary
representations of the column and the row coordinates. Syntacti-
cally, we represent an ID constructed from the coordinate (i, j) as
(cid:13)i, j(cid:14). For the sake of presentation, we sometimes denote ID i as
(cid:13)ci, ri(cid:14), where ci and ri are the ﬁrst and last l bits of i, respectively.
i (x, y) and f r
f r
m−
,(1
yx
)
f r
m−
,(2
yx
)
...
f r
j
,(
yx
)
...
f r
,(1
yx
)
f r
,(0
yx
)
)
y
,
x
(
c
0
f
)
y
,
x
(
c
1
f
...
)
y
,
x