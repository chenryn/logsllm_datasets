main advantage of being a simple, yet powerful, tool to capture and describe business
cases.
6
Figure 2. Example of a business case table
Each business case corresponds to an entry in the table and establishes the task
scheduled at runtime based on business variables assertion. Business variables are
variables that influence the routing or control-flow in a process. For example, in a
banking Web process application, the business variable Loan Amount determines the
acceptance or rejection of a loan request. If the variable has a value greater than
$500.000, then the loan is rejected and the task ‘reject‘ is executed, otherwise the task
‘accept’ is executed.
Business variables are identified during the participative phase in which CEOs,
managers, and staff members are interviewed alone or in small groups. Each business
variable has a domain, also identified during the participative phase.
The domain identifies the values that a business variable can take. For example, the
business variable Traveler can take the values “1st Line Manager”, “2nd Line
Manager”, “3rd Line Manager”, and “Non-Manager”, i.e.,
Traveler = {“1st Line Manager”, “2nd Line Manager”, “3rd Line Manager”, “Non-
Manager”}
3.1.1 Business case table schema
A business case table is based on a two dimensional table. The schema of the table is
the following. The columns are divided into two classes. The first class regroups a set
of business variables, while the second class includes the tasks that are part of a
7
process. Each entry of the table relates business variables and tasks with information
indicating if a task is to be scheduled at runtime or not.
The first cells of each row, corresponding to the columns of the first class, contain
values that can be assigned to business variables. For example, in Figure 2, the value
“Foreign” has been assigned to the business variable Location and the value
“Traveler” has been assigned to the variable Person Filling the Form for the first eight
data rows.
The data cells corresponding to the columns of the second class contain
information indicating if a particular task is to be scheduled at runtime or not. The
idea is to establish if a given task is to be scheduled based on the assertion of a set of
business variables. Therefore, each data cell results from the intersection of a column
(with a task name) and a row (with a set of asserted business variables.) A business
variable is a variable on which the execution of a set of tasks may depend. Formally,
we are interested in evaluating for each task the following function, where bv is a
t i
business variable:
scheduled(task, bv , bv , …, bv ) ∈ {, } (function 1)
t 1 2 n
A data cell corresponding to the columns of the second class may contain the
scheduled symbol () or the not-scheduled symbol (). The scheduled symbol
indicates that a given task is to be scheduled at runtime when the business variables
are asserted to particular values. In Figure 2 for example, if Traveler = “1st Line
Manager”, Funding Source (Payment) = “Boeing”, Person Filling the Form =
“Traveler“, Traveler/User is a CWA Mgr. for that trip? = “Yes”, Traveler/User is a
M&CT Prog. Mgr. for that trip? = “Yes”, and Is CWA and M&CT same person? =
“Yes”, then the task Check Form (OA) is scheduled for execution at runtime; the cell
contains the scheduled symbol (). On the other hand, this is not true for the task
Confirmation (Traveler), since for the same assertions the data cell contains the not-
scheduled symbol ().
3.1.2 Business case table construction
Understanding the business case table schema is relatively easy, whereas its
construction is far more challenging and complex. The methodology to construct and
fill the table with business cases is an iterative process.
Initially, the table schema has only columns of the second class (i.e., each column
represents a process task, see Figure 3.a) and no business variable exists in the table.
The columns are identified by the process analyst and staff members of an
organization as the necessary functions to archive a goal or an objective. While we do
not present a method to establish this initial set of columns, this can be accomplished
using the methodology proposed in (Casati, Fugini et al. 2002) for the analysis phase
of workflow application development. It is convenient – but not essential – to order
the tasks according to their probable chronological order of execution. This allows
users to feel more comfortable, thus, making it easier for them to understand the case
table.
In the first step, the process analyst should enquire of the interviewees if the tasks
presented in the case table are always scheduled during the execution of a process. If a
task is always scheduled, it receives the scheduled symbol (); if it is never scheduled
8
it receives the non-scheduled symbol (). In some cases, both symbols need to be
assigned to the same data cell. This is called a symbol conflict. We will see later that
this situation suggests that the task is scheduled under some logical condition.
a) Task A Task B Task C a.1) Check form Sign Notify
, , ,  , ,
b) Variable 1 Task A Task B Task C b.1) Manager Check form Sign Notify
value 1.a    1 Line Manager   
value 1.b    2 Line Manager  , ,
value 1.c    3 Line Manager   ,
c) Variable 2 Variable 1 Task A Task B Task C c.1) Travel Manager Check form Sign Notify
value 2.a    National   
value 2.b value 1.a    Foreign 1 Line Manager   
value 2.a    National   
value 2.b value 1.b    Foreign 2 Line Manager   
value 2.a    National   
value 2.b value 1.c    Foreign 3 Line Manager   
Figure 3. Constructing the business logic case table
After having analyzed and set symbols for each task individually, the table may be
in one of three states.
1) All the tasks have received the scheduled symbol (). This means that all the
tasks are scheduled at runtime. There is no non-determinism. Therefore the process
does not have any business variable and the tasks are scheduled in sequence or in
parallel. The only remaining step to carry out is to set a total order for the tasks. This
is relatively easy since no conditional routing exists. No further steps are necessary
and the process design is completed.
2) All the tasks have received the non-scheduled symbol (). In this case, the
process does not schedule any task at runtime. This is the same as saying that the
process does not have any tasks. In practice, this situation should never occur. It
indicates that the methodology followed to establish the tasks of a process was
inadequate.
3) Finally, the last state indicates that the business case table contains one or more
symbol conflicts, since the two available symbols have been assigned to the same data
cell.
Let us dwell on this last state. Consider the row of table b.1) in Figure 3 which
asserts the value “2 Line Manager” to the business variable Manager. The row
contains a symbol conflict for the task Sign and Notify, since both scheduling
symbols,  and , are present. This state of affairs was arose because during an
interview the interviewee expressed that the 2nd Line manager did not always need the
signature of his supervisor (represented with the Sign task) to travel on a business trip.
Furthermore, the 2nd Line manager also did not always need to notify his supervisees
(represented with the Notify task) of his journey. The phrase “… the 2nd Line manager
did not always need …” in the previous paragraph indicates the existence of a symbol
conflict. In our example, the conflict points out the existence of a business variable –
not yet present in the business case table – controlling the 2nd Line manager’s actions.
After the first step, if the business case table is in state 1 or 2, then the procedure
stops here. On the other hand, if the case table is in state 3, then we need to remove
symbolic conflicts using a procedure called symbol conflict resolution discussed in
the next section.
9
3.1.3 Symbol conflict resolution
Symbol conflicts indicate that the scheduling of a set of tasks depends on one or more
business variables. To resolve a symbol conflict, the process analyst – with the help of
interviewees – should identify at least one business variable that controls the
scheduling of a conflicting task. The process analyst should also identify the business
variable’s domain and establish the task which asserts the variable.
When such a variable is identified the following steps are taken. A column is added
to the left side of the business case table and rows are added to the table. The column
is labeled with the name of the business variable identified. Each row of the table is
duplicated n-1 times, where n is the domain set cardinality of the newly introduced
business variable. The data cells corresponding to the new business variable column
are set the values of its domain. For example, in Figure 3, table b.1), the variable
Manager is assigned to “1 Line Manager”, “2 Line Manager”, and “3 Line Manager”.
Once the table’s schema is updated to reflect the introduction of a new business
variable, the data cells must also be updated with appropriate scheduling symbols.
During the duplication of data rows, the rows with and without symbol conflicts are
duplicated, but only the rows with a symbol conflict need to be updated. As
previously, the process analyst should carry out (additional) interviews to determine
which tasks are scheduled at runtime based on the business variables present in the
table. Each row with a symbol conflict is individually analyzed and its contents are
discussed with interviewees.
For example, in Figure 3, the business variable Travel has been identified and
added to the table. The domain of the variable is {“National”, “Foreign”}. Its
cardinality is equal to 2. Therefore, each rows of table b.1) is duplicated once (i.e., 2-1
times). The data cells of the variable Travel have been set to “National” and
“Foreign”. Please note that adjacent business variable data cells with identical
content, such as the one from the variable Manager, have been merged for practical
reasons. The data row number 1 of table b.1) has been duplicated to the data row
number one and two of table c.1). There is no need to update the new rows since no
conflict was present before the duplication. On the other hand, the data row number 2
of table b.1) has at least one symbol conflict. Thus, after the duplication, the rows
need to be updated. In this particular example, after updating all the duplicated rows,
the case table does not contain any symbol conflict. This means that it is not necessary
to add any other variable to the table, since all the symbol conflicts have been
resolved with the introduction of the Travel and Manager business variables.
Consequently, the procedure for constructing the business case table is complete.
After the row duplication, analysis, and update, it may become apparent that some
symbol conflicts have been resolved, while others still remain in the table. In such
cases, the conflict resolution procedure needs to be reapplied until all the symbol
conflicts have been removed (please note that when applying the procedure it is
possible to add more than one business variable at a time.)
3.1.4 Handling large business case tables
In our example from Figure 3, all the symbol conflicts have been resolved with the
introduction of only two business variables. However, in practice and depending on
the size and complexity of the process being modeled, various variables may be
required to remove all the symbol conflicts. In some cases, the size of the business
table can become fairly large. For example, a medium size process (15-30 tasks) with
10
6 business variables, with the following domain cardinality 4, 3, 3, 2, 2, and 2, can
easily generate a table with approximately 288 rows.
Two techniques can be employed to deal with large tables: business case table
fragmentation and process restructuring. The first technique consists of fragmenting
the table into smaller tables based on business variable values. Each smaller table is
then placed on a different sheet. For example, the table c.1) in Figure 3 can be
fragmented into smaller table based on the Manager variable. The aim is to place the
rows for which the variable Manager has the value “1 Line Manager” on a separate
sheet. The same procedure is then carried out for the “2 Line Manager” and “3 Line
Manager”. This technique has been found to be extremely useful. Interviewees
respond in a better way when they are shown smaller tables, mostly because the
amount of information presented at a time is smaller. Also, locking one or more
business variables to a specific value reduces the complexity of the table, making its
interpretation easier for both the process analysts and interviewees.
Our development of workflows has involved the use of fragmentation technique to
reduce the complexity of the business case table. We have used a standard spreadsheet
application (Microsoft Excel) to design and manage the various fragmented tables.
Our initial table had seven business variables and 176 data rows. The fragmentation
has generated 11 tables of 16 data rows each.
The second technique consists of restructuring the tasks of a process into sub-
processes, creating a tree-like hierarchy of tasks and sub-processes. Once such a
structure is created, the methodology presented to construct business case tables can
be applied to the smaller sub-processes individually. Nevertheless, problems may
arise when sub-processes are not self-contained from a business variable perspective,
i.e. a sub-process routing depends on a business variable defined in its parent process.
When this occurs, the business case table of a sub-process must refer to the business
variable defined in the parent process. This increases the complexity and reduces the
semantics of the table.
A useful enhancement that can be performed is to reorganize the business variable
columns at any time to increase the clarity of the table’s information without affecting
its validity. For example, in Figure 3, it is possible to switch the position of the
columns Travel and Manager making the information presented clearer to the process
analysts and interviewees.
3.1.5 Methodology summary
As a summary, Figure 4 describes the main steps involved during the construction of
a business case table.
11
Methodology Create_Business_Case_Table( set-of-tasks )
1) Create a two-dimensional table with t columns, where t is the number of tasks in set-of-tasks.
2) Label each column with the name of a task in set-of-tasks.
3) Based on interviews, set the symbols  and  in the first data row of the table
4) If no conflicting symbols exist in the table, then the procedure is over; the workflow is
deterministic and it is only necessary to set sequential and parallel building blocks.
5) Otherwise, while conflicting symbols exist then
5.1) identify at least one business variable that removes at least one conflicting symbol of the
table
5.2) establish the domain and domain cardinality (n) of the business variable(s)
5.3) establish in which task the variable(s) is asserted
5.4) add the business variable(s) to the left side of the table
5.5) duplicate each data row n-1 times
5.6) update the rows with conflicting symbols based on information gathered by means of
additional interviews
6) End while
Figure 4. Methodology to construct a business case table
3.2 Extracting scheduling functions from the business case table
Once the business case table has been created, we are interested in extracting and
minimizing the Boolean expressions from the scheduling table (see equation 1) that
rule the scheduling of tasks. The extracted functions are logic disjunctions of
conjunctions of business variables.
Using Boolean algebra to simplify Boolean expressions can be awkward, apart
from being laborious. Furthermore, this approach can lead to solutions, which, though
they appear minimal, are not. The Quine-McCluskey (McCluskey 1956) method and
Karnaugh maps (Karnaugh 1953) provides a simple and straightforward method of
minimizing Boolean expressions.
While these techniques are based on the use of a power of 2 encoding, this low
level of detailed is hidden from the business analysts, since it is only used by the
Quine-McCluskey method or Karnaugh map to minimize Boolean expressions.
The Karnaugh technique can be employed to construct scheduling functions with 3
and 4 business variables. It is possible to create functions with 5 and 6 inputs, but
these can become unwieldy and difficult to construct. Furthermore, this technique is
not-automated. As a result, this technique is only considered to be adequate for small
process applications.
The Quine-McCluskey method, which is also known as the tabular method, is
particularly useful when extracting scheduling functions with a large number of
business variables. Additionally, computer programs have been developed employing
this algorithm. The use of this technique increases the degree of automation of our
methodology. Remember, that this was one of our initial goals.
Another alternative that can be considered to minimize Boolean expressions from
the scheduling table is the use of Binary Decision Diagrams, also known as BDD
(Drechsler and Sieling 2001). If the reader decides to select this method to minimize
Boolean expressions, it is importance to realize that, while this method is more
12
powerful than the two previous techniques, it is also more complex. Based on our
requirements and objectives we have decided to use the Quine-McCluskey method.
To extract scheduling functions from the business case table using Karnaugh maps
or the Quine-McCluskey method, we first need to map a business case table to a truth
table. The mapping can be achieved in the following way.
1) For each business variable, use the formula log (domain cardinality), where