title:With Gaming Technology towards Secure User Interfaces
author:Hanno Langweg
With Gaming Technology towards Secure User Interfaces
Hanno Langweg
University of Bonn
Roemerstrasse 164, 53117 Bonn, Germany
PI:EMAIL
Abstract
Technology aimed at making life easier for game devel-
opers is an issue of controversy among security experts.
Objections arise out of concerns of stability of a game-
friendly platform. However, this kind of programming in-
terfaces can be used to promote security as well. We use
Microsoft’s DirectX platform to access input and output
devices directly. Thereby we enable applications to distin-
guish between user actions and simulated behaviour by
malicious code.
With modest effort for a developer we are able to ensure
authenticity and integrity of mouse and keyboard input and
the display’s integrity.
1. Introduction
Computer games have almost always tried to exploit a
machine’s resources to full extent. Ambitious graphics and
quick responses to the player’s commands are key factors
as regards a game’s appearance. In the old days of home
and personal computers games were designed to be the
only application running on the machine. They were given
unrestrained access to display and input device resources
for fast execution. That changed with the advent of multi-
tasking operating environments. Applications had to share
resources with other programs being run at the same time.
Game developers complained about the performance pen-
alty imposed by this administrative overhead.
On the other hand, multi-tasking operating systems tak-
ing away full control of resources from an application have
been welcomed by the safety community. A misbehaving
program could be terminated while working with other ap-
plications was still possible. The operating system had full
control over e.g. the display, distributing access rights to
the applications. No application would be guaranteed to
gain access to a specific resource.
Multi-tasking makes life more complicated for develop-
ers interested in communicating directly with a user. Secu-
rity sensitive applications, e.g. creating electronic signa-
tures for documents or on-line voting, need a wilful
confirmation of the user for their actions. If the display’s
and the input’s authenticity and integrity cannot be made
certain, then there is a significant lack of security. Mali-
cious applications, e.g. Trojan horses, may simulate users’
input or lure a user into actions by way of a forged visual
interface. This is countered with expensive dedicated hard-
ware or not at all.
With the intent of pleasing game developers interfaces
are introduced to enable an additional direct access to re-
sources. Consequently execution gets faster and thus a
platform becomes more attractive to games. Namely the
Microsoft DirectX interface is a popular choice in the per-
sonal computer domain. It has drawn criticism for its reli-
ance upon third-party device drivers that could threaten the
overall stability of the system.
Not only games benefit from granting direct hardware
access. Security sensitive applications benefit, too. Control
over resources that had once been used exclusively comes
back and the need for dedicated hardware lessens. In the
security field execution speed and impeccable visual ap-
pearance are not the primary issues. Direct access admits
authenticity and integrity albeit using otherwise shared de-
vices. User commands cannot be altered or simulated en-
tirely by malicious programs. Program output cannot be
manipulated, leading to a ‘what you see is what you sign’
experience in the case of creating electronic signatures.
We present how developers can use the Microsoft Di-
rectX application programming interface to take advantage
of direct hardware access for security purposes. We cover
integrity and authenticity of user input and integrity of pro-
gram output. Authenticity of program output, however, is
outside the scope of this paper.
The paper is organized as follows. In the next section
we discuss previous and related work. We then deal with
input integrity and authenticity in section three and display
integrity in section four. This is followed by notes on the
implementation in the fifth section.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
2. Previous and related work
It has been shown that applications running on the Mi-
crosoft Windows or X-Windows platform can be vulnera-
ble to attacks by Trojan horse programs. A popular attack
is to control applications remotely by simulating user ac-
tions.[1] This is done by synthesizing user input like typing
on the keyboard or by sending messages to a window re-
questing responses.[2]
As a counter measure, messaging can be restricted at the
platform or application level. The X-Windows system, for
instance, allows to disable conveyance of messages placed
by the SendEvents function.[3] In Microsoft Windows, cer-
tain types of messages can be restricted for a desktop.
However, there may be occasions, like computer-based
training, in which remote control of another application or
parts of it is desired. Only a fraction of all applications ex-
pose an interface by which they can be explicitly automat-
ed. Consequently, simulating user input is a quick and con-
venient way for small helper applications.
Approaches to solve the problem of a trusted path be-
tween a security sensitive program and its user often focus
on separating applications from each other. Balfanz (2001)
proposes different desktops for applications to restrict in-
terference, but this reduces co-operation as well. Janacek
et. al. (2001) require a user to re-boot his personal compu-
ter in a single application mode when creating a legally
binding electronic signature. Pfitzmann et. al. (2001) want
to install a new operating system on users’ computers, sep-
arating applications completely and allowing interaction
only via a set of trusted tools.
Tygar et. al. (1996) regard window personalization as a
method to make users aware whether an interface is correct
or made up by a Trojan horse program. Weber (1998) ar-
gues in favour of secure personal devices that are free of
Trojan horses to achieve secure user input and output.
2.1. Windows input model
Microsoft Windows uses an internal messaging model
to control Windows applications. Messages are generated
whenever an event occurs. For example, when a user press-
1. Cult of the Dead Cow (2002). Back Orifice 2000. http://
bo2k.sourceforge.net
2. Spalka, A., Cremers, A.B. and Langweg, H. (2001). ’The Fairy
Tale of »What You See Is What You Sign«. Trojan Horse At-
tacks on Software for Digital Signatures’. Proceedings of IFIP
Working Conference on Security and Control of IT in Society-
II:75-86.
3. Bråthen, R. (1998). ’Crash Course in X Windows Security’.
GridLock 1(1998):1. http://www.hackphreak.org/gridlock/is-
sues/issue.1/xwin.html
es a key on the keyboard and releases it or moves the
mouse, a message is generated by the operating system.
The message is then placed in the message queue for the
appropriate thread. An application checks its message
queue to retrieve messages.[4]
Keyboard
Events
Mouse
Events
Simulated
Events
Windows Operating System
e
u
e
u
Q
e
g
a
s
s
e
M
Message
Message
Thread A
e
u
e
u
Q
e
g
a
s
s
e
M
Message
Message
Thread B
e
u
e
u
Q
e
g
a
s
s
e
M
Message
Message
Message
Message
Thread C
The system passes all input for an application to the var-
ious windows in the application. Each window has a func-
tion, called a window procedure, that the system calls
whenever it has input for the window. The window proce-
dure processes the input and returns control to the system.
All aspects of a window’s appearance and behaviour de-
pend on the window procedure’s response to these messag-
es.
In the model, it is not possible to distinguish between
messages placed in the queue by the operating system and
messages placed by another application. To make it even
worse, ordinary programs can synthesize input by help of
the SendInput API function (keybd_event, mouse_event
prior to NT4 SP3). This synthesized input is processed by
the operating system into messages for an application. This
was originally intended to assist users in operating an ap-
plication by different input facilities other than the stand-
ard keyboard and mouse, e.g. assistive technology for users
with disabilities. It is also a convenient tool for malicious
programs.
2.2. DirectX
Microsoft DirectX is a group of technologies designed
by Microsoft to make Microsoft Windows-based comput-
ers an ideal platform for running and displaying applica-
4. Microsoft (1998). Microsoft Windows Architecture for Devel-
opers Training Kit.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
tions like games. Built directly into Windows operating
systems, DirectX is an integral part of Windows 98, Win-
dows Me, and Windows 2000/XP.
DirectX gives software developers a consistent set of
APIs that provides them with improved access to hard-
ware. These APIs control what are called “low-level func-
tions,” including graphics memory management and ren-
dering, and support for input devices such as joysticks,
keyboards, and mice. The low-level functions are grouped
into components that make up DirectX: Microsoft
Direct3D, Microsoft DirectDraw, Microsoft DirectInput, to
name just a few.[5] In this paper we are concerned with Di-
rectInput and DirectDraw.
DirectInput retrieves information before it is distilled by
the operating system to Windows messages. Hence, input
synthesized by placing a forged message in a program’s
message queue is ignored.
DirectDraw allows access to the display hardware in ex-
clusive mode, keeping other programs from distorting the
information presented to the user.
In the sketch it is shown how an application actually
transfers its output to the screen. Without DirectX it uses
the GDI (Graphical Device Interface) and the DDI (Dis-
play Driver Interface). With DirectX, namely its Direct-
Draw part, the DDI is bypassed in favour of the HAL
(Hardware Abstraction Layer). If there is no direct hard-
ware support, the HEL (Hardware Emulation Layer) is
used instead.[6]
Application
GDI
DDI
DirectDraw
HEL
HAL
Hardware (Video Card)
5. Microsoft (2000). ‘Microsoft DirectX Overview’. Microsoft
Developer Network Library.
6. Microsoft (2001). ‘DirectDraw Architecture, System Integra-
tion’. Microsoft Developer Network Library.
3. Input integrity and authenticity
DirectInput provides an interface to get data from input
devices, i.e. usually keyboard and mouse, directly before
they are processed into messages for a thread’s queue. Ac-
cessing DirectInput does not require administrative privi-
leges. From a developer’s perspective, it is less convenient
compared with Windows messages. A thread has to poll a
device for new input. Standard Windows controls are pre-
pared to process messages natively; in the case of DirectIn-
put reaction to input has to be programmed individually.
Hence, it makes sense to identify security sensitive parts of
an application and then replace Windows messages with
DirectInput for limited sections of code.
An attacker could not only choose to forge Windows
messages, but also to synthesize input by way of the Send-
Input API (keybd_event/mouse_event respectively). As a
result key strokes and mouse movements appear as if they
had been provided by a (trustworthy) device driver. This
works even when using DirectInput, contradicting Micro-
soft’s claims that DirectInput communicates “directly”
with device drivers.
To distinguish input provided by a device driver from
that generated by calling SendInput one could be tempted
to use a keyboard filter driver that digitally signs its data.
An alternative could also be opening up a separate channel
by inter-process communication means. We dismiss a sep-
arate channel because we do not want to introduce another
proprietary interface that would be dependent on the driver.
A filter driver, on the other hand, could attach a digital sig-
nature to a key stroke and render it using the GetMessage-
ExtraInfo API function. The receiving application would
check the signature and determine the key stroke’s validity.
This poses a couple of challenges. First, the driver and the
application would have to agree on a key for signed mes-
sages. Second, the scheme would have to resist replay at-
tacks by malicious programs. Third, using the ExtraInfo
value could conflict with a device driver already utilizing it
for its own proprietary purposes.
We therefore take the way of prohibiting other programs
from calling the SendInput function when we need undis-
turbed input. In consequence, forgeries can only be intro-
duced at the level of Windows messages where they are
without effect owing to DirectInput. As a side effect acces-
sibility applications that do not run as a driver are not able
to assist the user during that phase of secure input. Howev-
er, this trade-off seems reasonable and inevitable here. Re-
stricting other programs’ use of SendInput requires inject-
ing some control code into other processes. For this,
administrative privileges are required during installation of
our solution.
In the fifth section we give details of our implementa-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
tion.
4. Display integrity
Security sensitive information like details of a contract
for which an electronic signature is to be computed should
be sufficiently right at the time of use for the purpose to
which the user wishes to put it. In the standard Windows
GDI interface an application cannot take for granted that
the area it uses to display information is unaffected by oth-
er applications. DirectDraw allows an application to ac-
quire the display in exclusive full screen mode—games
usually make use of this.
A program can create its own exclusive surface to draw
on. Information on that surface cannot be altered by an at-
tacker and thus reaches the user undisturbed. Since the sur-
face is independent from GDI window management func-
tions are not available and more work is put on the
developer. It is advisable that it be used only for limited
parts of an application where display integrity is needed.
However, if developers in the security realm like to create
a new user interface as much as game developers do they
are free to do so. Our intention is to use DirectDraw only
where it is needed to make it easy to adapt existing appli-
cations.
Utilizing the computer’s display in exclusive mode is an
alternative to employing dedicated secure display hard-
ware, e.g. personal digital assistants (PDAs).
Exclusive mode does not prevent other applications
from gaining foreground access. Hence, the authenticity of
the display is not assured by DirectDraw methods. It may
be useful to combine our approach with Tygar’s et. al. win-
dow customizing (1996), making it significantly more dif-
ficult for an attacker to lure the user into false assumptions
about an applications identity. Switching control away
from an application can be detected and the user may then
be warned.
Details of how we implement an exclusive drawing sur-
face are given in the following section.
5. Implementation
We give an example of how to implement our approach
using Windows 2000/XP. The first example shows how to
retrieve key strokes, the second example presents how a
form is displayed on a secure surface.
Our tests were conducted using DirectX version 8.1.
However, the DirectDraw interface used is version 7. The
source code is given as a Borland Delphi program. We use