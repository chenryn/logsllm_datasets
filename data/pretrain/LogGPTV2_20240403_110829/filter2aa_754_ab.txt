iOS!…etc).!!With!mobility!and!crossNplatform!interoperability!important!requirements,!we!decided!to!
implement!MachNO!Viz!as!an!HTML5/JavaScript!front!end!using!a!Mac!OSX!Server!backend.!!Additional!design!
features!include:!
• Use!any!client!capable!of!running!HTML5/JavaScript,!thereby!significantly!increasing!the!types!of!
devices!that!could!make!use!of!MachNO!Viz.!
• Keep!the!backNend!as!“Mac”!as!possible.!!We!wanted!to!rely!on!Apple’s!updates!of!the!MachNO!
spec!and!its!tools,!such!as!otool,!in!their!native!environment.!!This!would!keep!MachNO!Viz!updated!
and!relevant!by!default.!!
• Gain!access!to!the!LLVM!disassembler!for!the!most!accurate!ASM!we!can!feed!into!our!analytics!
engine.!
• Make!use!of!as!many!Open!Source!utilities!that!added!benefit!as!possible.!
The!initial!interface!designed!morphed!several!times!until!we!found!a!common!ground!that!included!both!the!
File!Structure!Visualization!and!the!Function!Graphing!Visualization.!!The!combination!of!these!produced!a!
simpleNtoNnavigate!interface!where!visual!interactivity!was!key!(Figure!2).!
The!File!Structure!Visualization!was!developed!in!a!drillNdown!type!of!style!capable!of!driving!the!user!deeper!
into!the!fields!represented!by!the!major!segments.!!For!example,!clicking!“Load!Commands”!in!the!1st!level!tier!
would!drill!down!so!that!you!see!a!visual!representation!of!all!of!the!individual!load!commands!and!could!
subsequently!drill!even!deeper!into!an!individual!command!(Figure!3).!The!File!Structure!Visualization!
interfaces!with!the!Function!Graphing!Panel,!as!well,!allowing!you!to!dump!various!segments!into!its!Hex!
Editor!for!easy!viewing.!!In!addition,!the!files!__TEXT!segment!is!automatically!analyzed!and!graphed!by!a!
powerful!analyticsNgraphing!engine!(Figure!4).!
!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!2.!File!Structure!Visualization.!
!
Figure!3.!Drilling!Down!into!Load!Commands!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!4.!Interactive!Function!Graphing!Visualization!
The!Function!Graphing!Visualization!provides!an!interactive!method!of!navigating!the!disassembly!of!the!
binary’s!__TEXT!segment!while!focusing!on!functional!code!blocks,!i.e.!sequences!of!basic!blocks!that!perform!
a!specific!task.!!In!addition!to!the!interactive!graph!component,!we!also!introduced!methods!for!processing!
and!analyzing!the!data!for!display!in!context!specific!Views:!Hex!View,!Strings,!ObjectiveNC,!Disassembly!View!
and!Network!Security.!
The!data!and!static!information!segments!can!be!displayed!in!the!Hex!View!while!Strings!provides!a!
breakdown!of!codeNreferenced!data.!!For!example,!to!see!all!the!strings!available!in!the!binary,!a!user!can!click!
between!the!segments!“CString”!and!“String!Table”!and!display!those!in!Hex!View.!!Clicking!the!“Strings”!tab!
displays!only!those!strings!that!have!been!resolved!in!the!code!itself!and!ultimately!show!up!in!the!Graph!
Visualization.!!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
To!view!ObjectiveNC!data!structures,!the!ObjectiveNC!tab!provides!this!information!using!the!open!source!tool!
ClassNdump3,!which!was!been!integrated!into!MachNO!Viz’s!interface.!
The!Disassembly!View!provides!a!paginated!and!colored!interface!to!the!file’s!disassembly.!!This!allows!a!user!
to!see!all!of!the!instructions!(not!just!the!function!graphs)!in!a!clickable!fashion.!
MachNO!Viz,!with!a!heavy!emphasis!on!the!information!security!risk!of!MachNO!binaries,!focuses!on!Security!by!
introducing!2!unique!features:!
1. Identifying!code!segments!which!are!using!API’s!and!Functions!flagged!as!Security!Risks.!
2. Identifying!and!automatically!generating!network!and!static!file!signatures!for!the!binary.!
o MachNO!Viz!does!this!in!2!ways:!
a) By!detecting!network!domains,!ip!addresses,!urls!&!web!protocols!embedded!in!the!
binary.!
b) Calculating!a!unique!binary!signature!for!the!file!itself!using!MachNO!MAGIC!value!in!the!
file’s!header!plus!a!unique!16!bytes!from!the!binary’s!String!Table.!
The!images!below!(Figure!5,!6)!demonstrates!these!features:!
!
Figure!5.!Flagging!risky!API’s!and!functions!in!use!by!the!MachNO!binary.!
!
Figure!6.!Automated!signature!generation!for!arbitrary!MachNO!files.!
MachNO!Viz!separates!itself!from!more!complicated!tools,!such!as!debuggers!and!disassemblers,!by!displaying!
the!file’s!structure!as!graphically!as!possible!while!still!providing!the!underlying!assembly!structure!for!more!
advanced!users!(Figure!7).!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
3!http://stevenygard.com/projects/classNdump/!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!7.!Disassembly!View!available!for!inNdepth!analysis.!
!
!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
Demonstrating!Mach:O!Viz’s!Features:!Analysis!of!CustomInstaller!a.ka.!Yontoo!Trojan!
!
!
To!demonstrate!the!effectiveness!of!MachNO!Viz!against!current!malware!and!also!exercise!some!of!its!
features,!we’ll!analyze!a!relatively!new!sample!called!the!Yontoo!Trojan.!!This!nasty!piece!of!malware!“installs!
itself!as!a!browser!plugNin!and!infects!Google!Chrome,!Firefox,!and!Safari!Browsers!via!Adware.”4!
This!malware!sample!also!demonstrates!that!Mac!operating!systems,!OSX!in!this!case,!are!still!very!much!
vulnerable!to!infection.!!The!Yontoo!Trojan!relies!on!the!user!to!enable!the!infection!by!masquerading!as!a!
browser!HD!video!plugin!(Figure!8)!to!social!engineer!the!user!into!downloading!and!installing!it.!!This!tactic!is!
not!new.!!Fooling!an!unsuspecting!user!into!opening!malicious!attachments!and!downloads!to!compromise!
their!own!systems!continues!to!be!a!technique!used!by!attackers!because!it's!simple!and!it!works.!
!
Figure!8.!CustomInstaller!social!engineering!the!user!into!installing!a!“HD”!codec.!
Uploading!the!file!to!MachNO!Viz!will!kick!start!the!automatic!analysis,!which!lasts!between!several!seconds!to!
several!minutes!depending!on!the!size!of!the!file!and!its!complexity!(ex.!number!of!functions).!!During!this!
process!MachNO!Viz!performs!the!following!functions:!
• Parses!the!file!structure!to!build!the!file!visualization’s!header,!load!commands,!text!and!data!
segments.!
• Scans!and!detects!basic!blocks,!and!from!those!basic!blocks!builds!functions.!
• Builds!DOT!(GraphViz!format)!files!for!the!graph!visualization.!
• Resolves!strings,!names!and!ObjC!components!in!the!code!(__TEXT)!segment.!
• 
Conducts!a!security!scan!of!the!file!and,!where!applicable,!builds!automated!SNORT!signatures!for!
static!file!and!network!traffic!detection.!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4!http://www.ibtimes.com/yontooNtrojanNnewNmacNosNxNmalwareNinfectsNgoogleNchromeNfirefoxNsafariNbrowsersNadwareN1142969!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
Once!the!initial!analysis!concludes,!we!are!presented!with!MachNO!Viz’s!interactive!user!interface!showing!
both!file!and!the!function!graph!visualizations!(Figure!9).!!In!addition,!the!Security!Assessment!section!warns!
us!of!15!identified!risks!(based!on!method,!function!or!API)!that!we!should!focus!our!attention!on!(Figure!10).!
!
!
Figure!9.!
The!function!graph!visualization!automatically!calculates!the!program’s!entry!point!and!places!us!at!the!
“main”!or!start!of!the!CustomInstaller!program!(Figure!11).!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!10.!Security!Assessment!identifies!15!risks!that!should!be!examined!in!further!detail.!
!
Figure!11.!The!function!visualization!calculates!and!displays!the!start/main!in!graph!view.!
Continuing!to!view!the!analysis!results,!we!find!under!the!Strings!tab!four!codeNreferenced!string!values!which!
allows!us!to!further!highlight!the!trojan’s!potential!malicious!nature!(Figure!12).!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!12.!MachNO!Viz’s!analysis!engine!locates!important!strings!and!resolves!them!to!the!code!segment.!
The!ObjectiveNC!view!provides!us!information!about!harvested!data!structures,!including!their!implementation!
addresses.!!This!provides!us!with!a!powerful!combination!to!zero!in!on!major!functions!of!interest!to!analyze.!!
In!addition,!these!data!structures!hint!at!the!true!nature!of!this!binary.!For!example,!we!find!an!interface!
declaration!for!an!“ExtensionsInstaller”!that!clearly!references!installation!support!for!Firefox,!Chrome,!and!
Safari.!!ClassNdump!(Figure!13)!also!provides!us!with!their!implementation!address!that!can!be!placed!into!the!
graphing!visualization!for!display.!
!
Figure!13.!!ObjectiveNC!tab!provides!important!information!on!declarations!and!data!structures.!
Taking!this!valuable!information,!we!can!search!this!address,!for!example,&0x1000229db,!which!is!the!method!
that!appears!to!install!the!Yontoo!trojan!browser!extension!into!Safari,!into!MachNO!Viz’s!Interactive!Function!
Search!and!generate!the!function!graph.!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!14.Zoomed!out!view!of!function!0x1000229db,!implementation!function!for!Yontoo!installation!into!Safari.!
We!can!further!dissect!this!function!to!find!out!how!the!browser!extension!is!installed!by!leveraging!the!inN
depth!analysis!and!x86_64!string!resolution!already!conducted!by!MachNO!Viz.!!The!function!begins!by!locating!
the!path!to!the!Safari!Extensions!that!have!been!resolved!correctly!(Figures!15,16).!
!
Figure!15.!String!address!for!Safari!extension!path!correctly!resolved!during!initial!analysis.!
'
Figure!16.!AutoNgenerated!string!“str_LibrarySafariEx”!identifies!user’s!Safari!extension!directory.!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
Once!the!Extension!directory!is!located,!the!installer!proceeds!to!update!Safari’s!Extensions.plist!(Figure!17,18)!
and!then!copies!and!enables!the!new!extension!to!successfully!complete!the!install.!
!
Figure!17.!AutoNgenerated!string!“str_LibrarySafariEx”!identifies!user’s!Safari!extension!directory.!
!
!
Figure!18.!Strings!tab!shows!us!the!string!in!question.!
!
Figure!18.!AutoNgenerated!string!“str_Enabled”enables!the!new!extension!in!Safari.!
!
Finally,!we!can!see!the!edge!case!wherein!if!the!plugin!already!exists!the!installation!routine!for!Safari!jumps!
past!the!code!to!install!and!enable!the!plugin!and!simply!exits!the!function.!!MachNO!Viz’s!ability!to!
dynamically!zoom!in!and!out!easily!draws!this!branch!to!our!attention!and!allows!us!to!“color”!the!code!path!
in!question!(Figure!19).!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!19.!Code!highlighting!the!branch!that!finds!the!Yontoo!plugin!installed!and!exits.!
!
To!find!crossNreferences!to!this!Safari!extension!installation!function,!we!can!simply!search!under!
“Names/XRefs”!in!the!Interactive!Graph!Function!Search!panel!for!the!address!0x1000229db.!!Alternatively,!
we!could!have!made!our!way!to!this!function!by!searching!under!“Strings”!for!occurrences!of!the!string!
“str_Extensionsplist”.!
Mach%O'Malware'Analysis:'Combatting'Mac'OSX/iOS'Malware'with'Data'Visualization!
!
!
Figure!20.!Exercising!some!of!MachNO!Viz’s!interactive!search!capabilities!to!locate!the!same!function.!
!
The!Network!Security!tab!(Figure!21)!is!equally!important.!In!this!case!MachNO!Viz!has!provided!us!with!a!
wealth!of!SNORT!style!signatures!clearly!targeting!both!the!network!traffic!generated!by!the!Yontoo!Trojan,!as!
well!as!a!static!file!signature!to!prevent!future!infection.!!For!the!network!security!administrator,!simply!
uploading!the!Yontoo!Trojan!binary!CustomInstaller&into!MachNO!Viz!and!navigating!to!this!Network!Security!
tab!would!provide!immediate!feedback!and!assistance!in!detecting!and!containing!this!real!and!very!recent!
Mac!OSX!malware!threat!rapidly!until!a!more!thorough!analysis!and!signature!could!be!created!(if!necessary).!
!
!