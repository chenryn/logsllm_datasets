### Mach-O Malware Analysis: Combatting Mac OS X/iOS Malware with Data Visualization

#### System Design and Implementation
Given the importance of mobility and cross-platform interoperability, we decided to implement Mach-O Viz as an HTML5/JavaScript front-end, backed by a Mac OS X Server. Key design features include:

- **Client Compatibility**: The use of HTML5/JavaScript allows Mach-O Viz to run on any device capable of supporting these technologies, significantly expanding its usability.
- **Backend Consistency**: We aimed to keep the back-end as "Mac" as possible, relying on Apple's updates to the Mach-O specification and tools like `otool` in their native environment. This ensures that Mach-O Viz remains up-to-date and relevant.
- **LLVM Disassembler Access**: By integrating the LLVM disassembler, we can provide the most accurate assembly (ASM) data for our analytics engine.
- **Open Source Utilities**: We incorporated as many open-source utilities as possible to enhance the functionality and efficiency of Mach-O Viz.

#### User Interface Design
The initial interface design underwent several iterations before settling on a common ground that combined both the File Structure Visualization and the Function Graphing Visualization. This combination resulted in a simple, navigable interface where visual interactivity was key (Figure 2).

**File Structure Visualization**:
- **Drill-Down Style**: The File Structure Visualization is designed in a drill-down style, allowing users to delve deeper into the fields represented by major segments. For example, clicking "Load Commands" in the first level tier would reveal a visual representation of all individual load commands, and further clicks could drill down into specific commands (Figure 3).
- **Integration with Function Graphing Panel**: The File Structure Visualization also interfaces with the Function Graphing Panel, enabling users to dump various segments into a Hex Editor for easy viewing. Additionally, the `__TEXT` segment of the file is automatically analyzed and graphed by a powerful analytics-graphing engine (Figure 4).

**Function Graphing Visualization**:
- **Interactive Navigation**: The Function Graphing Visualization provides an interactive method to navigate the disassembly of the binary’s `__TEXT` segment, focusing on functional code blocks. It includes methods for processing and analyzing the data for display in context-specific views such as Hex View, Strings, Objective-C, Disassembly View, and Network Security.
- **Context-Specific Views**:
  - **Hex View**: Displays the data and static information segments.
  - **Strings**: Provides a breakdown of code-referenced data. Users can click between segments like "CString" and "String Table" to display strings in the Hex View.
  - **Objective-C**: Uses the open-source tool Class-dump3 to show Objective-C data structures.
  - **Disassembly View**: Offers a paginated and colored interface to the file’s disassembly, allowing users to view and interact with all instructions.

#### Security Features
Mach-O Viz places a strong emphasis on information security, introducing two unique features:

1. **Identifying Security Risks**:
   - Flags code segments using APIs and functions flagged as security risks.
2. **Automated Signature Generation**:
   - Detects network domains, IP addresses, URLs, and web protocols embedded in the binary.
   - Calculates a unique binary signature using the Mach-O MAGIC value in the file’s header plus a unique 16 bytes from the binary’s String Table.

These features are demonstrated in Figures 5 and 6.

#### Demonstration: Analysis of CustomInstaller (Yontoo Trojan)
To demonstrate the effectiveness of Mach-O Viz against current malware, we analyzed the Yontoo Trojan, a recent sample that installs itself as a browser plugin and infects Google Chrome, Firefox, and Safari browsers via adware. This malware highlights the vulnerability of Mac operating systems to infection.

**Analysis Process**:
- **Upload and Initial Analysis**: Uploading the file to Mach-O Viz initiates an automatic analysis, which parses the file structure, scans for basic blocks, builds function graphs, resolves strings, and conducts a security scan.
- **Interactive Interface**: Once the initial analysis is complete, the user is presented with an interactive interface showing both the file and function graph visualizations (Figure 9). The Security Assessment section identifies 15 risks for further examination (Figure 10).
- **Function Graph Visualization**: The visualization calculates the program’s entry point and places the user at the start of the CustomInstaller program (Figure 11).
- **String Analysis**: Under the Strings tab, four code-referenced string values highlight the trojan’s potential malicious nature (Figure 12).
- **Objective-C View**: Provides information about harvested data structures, including implementation addresses, which can be used to zero in on major functions of interest (Figure 13).
- **Detailed Function Analysis**: Using the Interactive Function Search, we can generate a function graph for specific addresses, such as `0x1000229db`, which is the method for installing the Yontoo trojan browser extension into Safari (Figure 14).
- **Extension Installation**: The function locates the path to the Safari Extensions, updates the Extensions.plist, and copies and enables the new extension (Figures 15-18).
- **Edge Case Handling**: If the plugin already exists, the installation routine jumps past the code to install and enable the plugin and simply exits the function (Figure 19).
- **Cross-References**: Users can search for cross-references to the Safari extension installation function under "Names/XRefs" or "Strings" (Figure 20).
- **Network Security**: The Network Security tab provides SNORT-style signatures for both network traffic and static file detection, aiding in the rapid detection and containment of the threat (Figure 21).

By leveraging these features, Mach-O Viz provides a comprehensive and interactive tool for analyzing and combating Mac OS X/iOS malware.