puts(words);
}
puts("done");
return 0;
}
循环
767
while (words[i] != '\n' && words[i] != '\0')
i++;
遍历字符串，直至遇到换行符或空字符。如果先遇到换行符，下面的if
语句就将其替换成空字符；如果先遇到空字符，else部分便丢弃输入行的剩
余字符。下面是该程序的输出示例：
Enter strings (empty line to quit):
This
This
program seems
program s
unwilling to accept long lines.
unwilling
But it doesn't get stuck on long
But it do
lines either.
lines eit
done
空字符和空指针
程序清单 
11.9 
中出现了空字符和空指针。从概念上看，两者完全不
同。空字符（或'\0'）是用于标记C字符串末尾的字符，其对应字符编码是
768
0。由于其他字符的编码不可能是 0，所以不可能是字符串的一部分。
空指针（或NULL）有一个值，该值不会与任何数据的有效地址对应。
通常，函数使用它返回一个有效地址表示某些特殊情况发生，例如遇到文件
结尾或未能按预期执行。
空字符是整数类型，而空指针是指针类型。两者有时容易混淆的原因
是：它们都可以用数值0来表示。但是，从概念上看，两者是不同类型的0。
另外，空字符是一个字符，占1字节；而空指针是一个地址，通常占4字节。
2.gets_s()函数
C11新增的gets_s()函数（可选）和fgets()类似，用一个参数限制读入的
字符数。假设把程序清单11.9中的fgets()换成gets_s()，其他内容不变，那么
下面的代码将把一行输入中的前9个字符读入words数组中，假设末尾有换行
符：
gets_s(words, STLEN);
gets_s()与fgets()的区别如下。
gets_s()只从标准输入中读取数据，所以不需要第3个参数。
如果gets_s()读到换行符，会丢弃它而不是储存它。
如果gets_s()读到最大字符数都没有读到换行符，会执行以下几步。首
先把目标数组中的首字符设置为空字符，读取并丢弃随后的输入直至读到换
行符或文件结尾，然后返回空指针。接着，调用依赖实现的“处理函数”（或
你选择的其他函数），可能会中止或退出程序。
第2个特性说明，只要输入行未超过最大字符数，gets_s()和gets()几乎一
样，完全可以用gets_s()替换gets()。第3个特性说明，要使用这个函数还需要
进一步学习。
我们来比较一下 gets()、fgets()和 gets_s()的适用性。如果目标存储区装
769
得下输入行，3 个函数都没问题。但是fgets()会保留输入末尾的换行符作为
字符串的一部分，要编写额外的代码将其替换成空字符。
如果输入行太长会怎样？使用gets()不安全，它会擦写现有数据，存在
安全隐患。gets_s()函数很安全，但是，如果并不希望程序中止或退出，就
要知道如何编写特殊的“处理函数”。另外，如果打算让程序继续运行，
gets_s()会丢弃该输入行的其余字符，无论你是否需要。由此可见，当输入
太长，超过数组可容纳的字符数时，fgets()函数最容易使用，而且可以选择
不同的处理方式。如果要让程序继续使用输入行中超出的字符，可以参考程
序清单11.8中的处理方法。如果想丢弃输入行的超出字符，可以参考程序清
单11.9中的处理方法。
所以，当输入与预期不符时，gets_s()完全没有fgets()函数方便、灵活。
也许这也是gets_s()只作为C库的可选扩展的原因之一。鉴于此，fgets()通常
是处理类似情况的最佳选择。
3.s_gets()函数
程序清单11.9演示了fgets()函数的一种用法：读取整行输入并用空字符
代替换行符，或者读取一部分输入，并丢弃其余部分。既然没有处理这种情
况的标准函数，我们就创建一个，在后面的程序中会用得上。程序清单
11.10提供了一个这样的函数。
程序清单11.10 s_gets()函数
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
770
if (ret_val) // 即，ret_val != NULL
{
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
如果 fgets()返回 NULL，说明读到文件结尾或出现读取错误，s_gets()函
数跳过了这个过程。它模仿程序清单11.9的处理方法，如果字符串中出现换
行符，就用空字符替换它；如果字符串中出现空字符，就丢弃该输入行的其
余字符，然后返回与fgets()相同的值。我们在后面的示例中将讨论fgets()函
数。
也许读者想了解为什么要丢弃过长输入行中的余下字符。这是因为，输
入行中多出来的字符会被留在缓冲区中，成为下一次读取语句的输入。例
如，如果下一条读取语句要读取的是 double 类型的值，就可能导致程序崩
溃。丢弃输入行余下的字符保证了读取语句与键盘输入同步。
我们设计的 s_gets()函数并不完美，它最严重的缺陷是遇到不合适的输
771
入时毫无反应。它丢弃多余的字符时，既不通知程序也不告知用户。但是，
用来替换前面程序示例中的gets()足够了。
11.2.4 scanf()函数
我们再来研究一下scanf()。前面的程序中用scanf()和%s转换说明读取字
符串。scanf()和gets()或fgets()的区别在于它们如何确定字符串的末尾：
scanf()更像是“获取单词”函数，而不是“获取字符串”函数；如果预留的存储
区装得下输入行，gets()和fgets()会读取第1个换行符之前所有的字符。
scanf()函数有两种方法确定输入结束。无论哪种方法，都从第1个非空白字
符作为字符串的开始。如果使用%s转换说明，以下一个空白字符（空行、
空格、制表符或换行符）作为字符串的结束（字符串不包括空白字符）。如
果指定了字段宽度，如%10s，那么scanf()将读取10 个字符或读到第1个空白
字符停止（先满足的条件即是结束输入的条件），见图11.3。
图11.3 字段宽度和scanf()
前面介绍过，scanf()函数返回一个整数值，该值等于scanf()成功读取的
项数或EOF（读到文件结尾时返回EOF）。
程序清单11.11演示了在scanf()函数中指定字段宽度的用法。
程序清单11.11 scan_str.c程序
/* scan_str.c -- 使用 scanf() */
#include 
772
int main(void)
{
char name1[11], name2[11];
int count;
printf("Please enter 2 names.\n");
count = scanf("%5s %10s", name1, name2);
printf("I read the %d names %s and %s.\n", count, name1, 
name2);
return 0;
}
下面是该程序的3个输出示例：
Please enter 2 names.
Jesse Jukes
I read the 2 names Jesse and Jukes.
Please enter 2 names.
Liza Applebottham
I read the 2 names Liza and Applebotth.
Please enter 2 names.
Portensia Callowit
773
I read the 2 names Porte and nsia.
第1个输出示例，两个名字的字符个数都未超过字段宽度。第2个输出示
例，只读入了Applebottham的前10个字符Applebotth（因为使用了%10s转换
说明）。第3个输出示例，Portensia的后4个字符nsia被写入name2中，因为第
2次调用scanf()时，从上一次调用结束的地方继续读取数据。在该例中，读
取的仍是Portensia中的字母。
根据输入数据的性质，用fgets()读取从键盘输入的数据更合适。例如，
scanf()无法完整读取书名或歌曲名，除非这些名称是一个单词。scanf()的典
型用法是读取并转换混合数据类型为某种标准形式。例如，如果输入行包含
一种工具名、库存量和单价，就可以使用scanf()。否则可能要自己拼凑一个
函数处理一些输入检查。如果一次只输入一个单词，用scanf()也没问题。
scanf()和gets()类似，也存在一些潜在的缺点。如果输入行的内容过长，
scanf()也会导致数据溢出。不过，在%s转换说明中使用字段宽度可防止溢
出。
774
11.3 字符串输出
讨论完字符串输入，接下来我们讨论字符串输出。C有3个标准库函数
用于打印字符串：put()、fputs()和printf()。
11.3.1 puts()函数
puts()函数很容易使用，只需把字符串的地址作为参数传递给它即可。
程序清单11.12演示了puts()的一些用法。
程序清单11.12 put_out.c程序
/* put_out.c -- 使用 puts() */
#include 
#define DEF "I am a #defined string."
int main(void)
{
char str1[80] = "An array was initialized to me.";
const char * str2 = "A pointer was initialized to me.";
puts("I'm an argument to puts().");
puts(DEF);
puts(str1);
puts(str2);
puts(&str1[5]);
775
puts(str2 + 4);
return 0;
}
该程序的输出如下：
I'm an argument to puts().
I am a #defined string.
An array was initialized to me.
A pointer was initialized to me.
ray was initialized to me.
inter was initialized to me.
如上所示，每个字符串独占一行，因为puts()在显示字符串时会自动在
其末尾添加一个换行符。
该程序示例再次说明，用双引号括起来的内容是字符串常量，且被视为
该字符串的地址。另外，储存字符串的数组名也被看作是地址。在第5个
puts()调用中，表达式&str1[5]是str1数组的第6个元素（r），puts()从该元素
开始输出。与此类似，第6个puts()调用中，str2+4指向储存"pointer"中i的存
储单元，puts()从这里开始输出。
puts()如何知道在何处停止？该函数在遇到空字符时就停止输出，所以
必须确保有空字符。不要模仿程序清单11.13中的程序！
程序清单11.13 nono.c程序
/* nono.c -- 千万不要模仿！ */
776
#include 
int main(void)
{
char side_a[] = "Side A";
char dont[] = { 'W', 'O', 'W', '!' };
char side_b[] = "Side B";
puts(dont); /* dont 不是一个字符串 */
return 0;
}
由于dont缺少一个表示结束的空字符，所以它不是一个字符串，因此
puts()不知道在何处停止。它会一直打印dont后面内存中的内容，直到发现一
个空字符为止。为了让puts()能尽快读到空字符，我们把dont放在side_a和
side_b之间。下面是该程序的一个运行示例：
WOW!Side A
我们使用的编译器把side_a数组储存在dont数组之后，所以puts()一直输
出至遇到side_a中的空字符。你所使用的编译器输出的内容可能不同，这取
决于编译器如何在内存中储存数据。如果删除程序中的side_a和side_b数组
会怎样？通常内存中有许多空字符，如果幸运的话，puts()很快就会发现一
个。但是，这样做很不靠谱。
11.3.2 fputs()函数
fputs()函数是puts()针对文件定制的版本。它们的区别如下。
fputs()函数的第 2 个参数指明要写入数据的文件。如果要打印在显示器
777
上，可以用定义在stdio.h中的stdout（标准输出）作为该参数。
与puts()不同，fputs()不会在输出的末尾添加换行符。
注意，gets()丢弃输入中的换行符，但是puts()在输出中添加换行符。另
一方面，fgets()保留输入中的换行符，fputs()不在输出中添加换行符。假设
要编写一个循环，读取一行输入，另起一行打印出该输入。可以这样写：
char line[81];
while (gets(line))// 与while (gets(line) != NULL)相同
puts(line);
如果gets()读到文件结尾会返回空指针。对空指针求值为0（即为假），
这样便可结束循环。或者，可以这样写：
char line[81];
while (fgets(line, 81, stdin))
fputs(line, stdout);
第1个循环（使用gets()和puts()的while循环），line数组中的字符串显示
在下一行，因为puts()在字符串末尾添加了一个换行符。第2个循环（使用
fgets()和fputs()的while循环），line数组中的字符串也显示在下一行，因为
fgets()把换行符储存在字符串末尾。注意，如果混合使用 fgets()输入和puts()
输出，每个待显示的字符串末尾就会有两个换行符。这里关键要注意：
puts()应与gets()配对使用，fputs()应与fgets()配对使用。
我们在这里提到已被废弃的 gets()，并不是鼓励使用它，而是为了让读
者了解它的用法。如果今后遇到包含该函数的代码，不至于看不懂。
11.3.3 printf()函数
778
在第4章中，我们详细讨论过printf()函数的用法。和puts()一样，printf()
也把字符串的地址作为参数。printf()函数用起来没有puts()函数那么方便，
但是它更加多才多艺，因为它可以格式化不同的数据类型。
与puts()不同的是，printf()不会自动在每个字符串末尾加上一个换行
符。因此，必须在参数中指明应该在哪里使用换行符。例如：
printf("%s\n", string);
和下面的语句效果相同：
puts(string);
如上所示，printf()的形式更复杂些，需要输入更多代码，而且计算机执