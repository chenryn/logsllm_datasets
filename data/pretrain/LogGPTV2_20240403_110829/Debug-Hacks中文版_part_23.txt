总结
bt 命令前后即可。
哪个 mutex 的操作。例如，在 i386 的环境下，将下述命令插入到前面命令文件的
数调用时的参数传递方法（i386篇）介绍的方法调查其参数，即可明白是针对
以用“HACK#10函数调用时的参数传递方法（x86_64篇）和“HACK#11函
由于 pthread_mutex_Lock()和 pthread_mutex_unlock()的参数就是 mutex 的地址,所
mutex，那么单靠这种方法是不够的，必须明确操作是针对哪个 mutex 进行的。
前面的例子在显示加锁和解锁时中断执行并显示了 backtrace。如果使用了多个
使用多个mutex时的调试方法
从中可见，
168 1第4章应用程序调试实践
printf "# adr: %08x\n", *(int*)($esp+4)
cnt_reset () at astall.c:10
pthread mutex lock ()
thr (arg=0x0) at astall.c:18
pthread_mutex_lock ()
thr (arg=0xo) at astall.c:23
pthread_mutex_unlock ()
循环的分析方法。
本 hack 以 tcpdump 中实际存在的 bug 为例，介绍用户应用程序的死 
应用程序停止响应（死循环篇）
，最后astall.c:l8加锁之后，astall.c:10再次加锁。
www.TopSage.com
一大和一洋
---
## Page 187
了大量重复的输出，行为发生了异常。
为了让 tcpdump 显示详细信息，习惯性地添加了-vwvX选项。结果如下所示，出现
检查包内容需要执行 tcpdump.
检查包内容
包已做了该修改，以免发生该错误)。
有些环境下会产生以下错误，只需修改 config.h重新 make 即可（RHEL4的 RPM
tcpdump 采用了社区原始的 3.8.2版。这就是 RHEL4 包含的 tcpdump 的基础版本。
编译tcpdump
另一台机器上执行 tcpdump检查包的内容，以确认发送的包是否与预期一致。
测试程序将 SCTP DATA chunk 的length 成员设置为O，并发送 SCTP 包，然后在
不再给出了。我们采用了RAW socket，可以自由改变 SCTP 包的内容。
我们实施了安全测试中最常用的0长度包收发测试。测试程序比较复杂，书中就
[@target tcpdump-3.8.2]# ./tcpdump -ieth2 -vvvX sctp
# make clean; make
//#define HAVE_PCAP_DEBUG 1
* define if libpcap has pcap_debug */
# vi config.h
collect2: ld returned l exit status
: undefined reference to ^pcap_debug'
tcpdump.o( .text+0x894): In function *main':
#make
[@target tcpdump-3.8.2]# ./configure ; make
[@target]# cd tcpdump-3.8.2
[@target]# tar zxvf tcpdump-3.8.2.tar.gz
[@target]# wget -to -c http://ww.tcpdump.org/release/tcpdump-3.8.2.tar.gz
www.TopSage.com
/*注释掉该行*/
HACK#32 应用程序停止响应（死循环篇）1 169
177
---
## Page 188
178
然后确认-X、-vX，现象没有发生，但设置-wX选项时问题复现了。这个信息在调
DATA chunk 的length输出了0。这表明，测试程序发送了预期的 SCTP 包。
常工作，但输出了下述信息。
改变 tcpdump 的选项确认一下，结果只有-v选项时工作正常，-vv和-vvv 也能正
确认不同选项下行为是否有变化
调查范围。
chunk 的length 的处理部分应该就能明白，不过这里我们先不看代码，首先缩小
本次测试的前提是length 为0，恐怕这就是原因。查看源代码中对 SCTP DATA
然后用 kill-9将进程结束掉。
束程序，只好用Ctr!-Z终止进程。
170 1
[1]+ Stopped
132, length: 56) 192.168.0.145.13727 > 192.168.0.155.59671: sctp
00:21:41.678060 IP (tos 0x2,ECT(0), ttl 64, id 0, offset 0, flags [DF], proto
[@target tcpdump-3.8.2]# ./tcpdump -ieth2 -vv sctp
00:21:12.747262 IP (tos 0x2,ECT(0), ttl 64, id 0, offset 0, flags [DF], proto
[Payload:bogus chunk length 0] 
[50nd] [0x0 01dd] [0 03ss] I0 01S] [8509t6150t NS1] (3)(8) [1v] (2927
2765) [DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID Ox0] [Payload
(ped] [0x0 01dd] [0 035S] [0 :a15] [809t6150t :N51] (3)(8) [1va] (t927
1) [DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID 0x0] [Payload]
132, length: 56) 192.168.0.145.56934 > 192.168.0.155.49560: sctp
2766) [DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID Ox0] [Payload]
4) [DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID Ox0] [Payload]
3) [DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID 0x0] [Payload]
1) [DATA] (B)(E) [TSN: 2466762381] [SID: 0] [SSEQ 0] [PPID 0x0]
[DATA] (B)(E) [TSN: 4051946038] [SID: 0] [SSEQ 0] [PPID Ox0] [Payload]
第4章应用程序调试实践
./tcpdump -ieth2 -vvX sctp
www.TopSage.com
---
## Page 189
给 tcpdump 加上调试选项重新编译，并复现 bug（下面省略了部分步骤)。
由于连续输出[DATA]，因此我们将断点设置在print-sctp.c的160行。
方便，因此我们将断点设置在可能发生循环的地方。
下面用 GDB 选择设置断点的地方。在 main()中设置断点也没问题，但分析不太
选择断点
查源代码时十分有用。
[@target tcpdump-3.8.2]# gdb ./tcpdump
[@target tcpdump-3.8.2]# ./configure CFLAGS=-g
15
23
12
00
68
9
128if (vflag chunkLength));
/*因此断点不能设置在这个if语句中*/
/*因此在下面设置断点*/
/*-v的数量少于2时，直接return */
www.TopSage.com
HACK#32 应用程序停止响应(死循环篇 1 171
179
---
## Page 190
SCTP包结构如图4-5所示。
SCTP包结构
chunk的length的原因。
单步执行时发现，同样的代码被反复执行，造成了循环。检查一下是不是DATA
单步执行确认现象
现象复现之后，用gdb在断点处暂停执行。
172|第4章应用程序调试实践
(gdb）pchunkEnd
$3=（const void*）0x6da330
(gdb)pnextChunk
(gdb)s
$2=0
(gdb)p chunkDescPtr->chunkLength
$1=（const struct sctpChunkDesc*）0x6da330
(gdb）pchunkDescPtr
chunkLength));
(gdb)s
(gdb)
）at./print-sctp.c:160
available.
Starting program:/root/nooiwa/tcpdump-3.8.2/tcpdump-ieth2 sctp-vx
(gdb）run-ieth2-vvX sctp
Breakpoint 1 at 0x42d60b: file./print-sctp.c,line 160.
gdb)s
5:
（gdb)b print-sctp.c:160
nextChunk= (const void*)(chunkEnd+align);
chunkEnd =((const u_char*)chunkDescPtr+EXTRACT_16BITS（&chunkDescPtr->
printf("[DATA] "）;
www.TopSage.com
---
## Page 191
原因已经明确了，而修正方法也考虑了很多种。
确认更高的版本
图 4-6
个 chunk,
和最后一个 chunk“(E)nding”。这表示包中该 chunk 为第1个 chunk，也是最后-
的 chunk 数量，(B)(E)如图 4-6 所示为 Flags，分别为第 1 个 chunk“(B)eginning'
因而陷入了死循环。大量的输出信息“[数字）[DATA]（B)(E)…”中，数字为包中
然留在Chunk#1的开头。
length。指针前进length 本应指向 Chunk#2 的开头，但这次 Length 为0，因此仍
首先查看 Chunk#1，接下来要查看 Chunk #2，但指向 Chunk#1 的指针只前进了
Type 表明该 chunk 是个 DATA chunk，length指示 DATA chunk 的长度。tcpdump
SCTP 会检查 chunk 的长度，尽可能在包内放入多个 chunk。
SCTP 由两种数据构成：公共头部和 chunk。chunk 有多种，如果是DATA chunk,
图4-5SCTP包格式
SCTP DATA chunk 格式
Chunk#2开头
(@x6da330)
Chunk#1开头
，即不存在下一个 chunk（Chunk#2）。
Type  Flags ; Length
www.TopSage.com
User Data
Chunk #n (Flags=E)
Chunk #1 (Flags=B)
 SCTP Common Header
 IP Header
 Ether Header
HACK#32应用程序停止响应（死循环篇）】173
Chunk #2
chunkDescptr->dhunklength
（本来应该这里是chunkEnd妆nextChunk）
---
## Page 192
181>
参考文献
本 hack 以 tcpdump 为例,介绍了用户应用程序死循环的分析方法。首先确定范围,
可以从 log 或 dif的内容中查看补丁。本次 bug 的修改可以用以下命令查看。
给出了checkout的方法。
如果想确认补丁内容，可以到 tcpdump 项目的 cvs 上查看。它提供了匿名 cvs，也
运行了。
确认 CPU 使用率等。
然后在适当的地方设置断点，就能轻松地解决掉问题。
更高版本中该bug 有可能已经被修正，因此用 tcpdump 3.9.8试了一下，可以正常
信息也不输出，只是不返回到提示符的情况，此时可以用top 命令、Vmstat命令
这次的例子输出了大量相同的信息，因此能立即注意到死循环。而有时也有什么
总结
174 】第 4 章应用程序调试实践
# cvs diff -N -u -p -r 1.17 -rl.18 print-sctp.c
#
# cd tcpdump/
cvs checkout: Updating tcpdump
dunpds 4noypay Jaseu/dunpds/:bioounpds saodunpd:Jauasd: p- sao #
CVS password:
# cvs -d :pserver:PI:EMAIL:/tcpdump/master login
SCTP (132), length 56) 192.168.0.145.51816 > 192.168.0.155.10295: sctp
00:16:51.581458 IP (tos Ox2,ECT(0), ttl 64, id 0, offset 0, flags [DFl, proto
[@target tcpdump-3.9.8]# ./tcpdump -ieth2 -vvX sctp
tcpdump/libpcap 项目
cvs log print-sctp.c
0x0000: 4502 0038 0000 4000 4084 b7c3 c0a8 0091 E..8..@.@.......
1)[Bad chunk length 0] 
www.TopSage.com
]{:ipv6:icmpv6_send+1235}
Pid:6574, comm: ping6 Not tainted 2.6.9-prep
floppy ext3 jbd ata_piix libata sd_mod scsi_mod
dm_multipath dm_mod button battery ac joydev uhci_hcd ehci_hcd hw_randomtg3e100mii
i2c_dev i2c_core 8021qmd5 ipv6ide_dump scsi_dump diskdump zlib_deflate dm_miror
Moduleslinkedin:ah6deflatetwofishserpentaesblowfishdessha256crypto_nullaf_key
CPU0
0ops:0000[1]SMP
PML4226fd067PGD0
{:ipv6:icmpv6_send+1235}
Unable to handle kernel NULL pointer dereference at 00000000000160 RIP:
RBP:
RAX:
00000000000004d0 R08:00000100351f37d8 R09:0000000000000002
000000000000060cRSI:000001002808487fRDI:ffffffffa0158eb0
ffffffffa0158eb0 RBX:000000000000 RCX:0000000000000001
0018:00000100351f3918 EFLAGS:00010216
方法。
本hack以实际存在的导致内核产生Oops的问题为例，介绍内核调试的
kernelpanic（空指针引用篇）
www.TopSage.com
实践内核调试
大家网
hack#33~#42
第5章
183
---
## Page 196
184
建立复现程序
Oops 信息的阅读方法请参见“HACK#15Oops 信息的解读方法"。
这段信息第1行指出，是NULL指针访问（实际地址是0x160）导致的Oops 发生。
178|
将这个测试的内容进一步简化，利用下面的脚本成功复现。
继续调查发现，只要执行LTP 中的特定测试，就能100%地发生Oops。因此，我们
 $ cat reproducer.sh
Call Trace:{:ipv6:xfrm6_output+135}
Stack: 0000000004d0 00000000002002 0000000000000 00010026a72f58
Process ping6 (pid: 6574, threadinfo 00000100351f2000, task 000001003e4a2030)
CR2: 0000000000000160 CR3: 0000000000101000 CR4: 0000000000006e0
CS: 0010 DS: 0000 ES: 0000 CR0: 000000008005003b
FS: 0002a95b520(00) GS:fff8050cf00(0000) knlGS:00000000000
R13: 000000000040 14:00001001f76a058 R15: 0000010026272c00
R10: 0000000000000 R11: 010000000000 R12: 0000320cbd180
CR2: 0000000000000160
RIP [:ipv6:icmpv6_send+1235} RSP 
Code: 48 8b 9b 60 01 00 00 48 85 db7407f0ff 83 d0 00 00 00 48
第5章实践内核调试
{ip_generic_getfrag+66}
0000010032cbd180 0000010000000000
{system_call+126]
[do_page_fault+575]
{sys_sendmsg+463]
[:jbd:journal_dirty_metadata+391}
000000200000000000100370c03d00900000000200300000007c