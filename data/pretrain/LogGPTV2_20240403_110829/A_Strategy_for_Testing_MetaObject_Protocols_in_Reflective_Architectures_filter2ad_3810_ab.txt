### Behavioral Intercession (Step 2)
In the second step, the metaobject triggers the execution of the intercepted method invocation on its object. The considered Meta-Object Protocol (MOP) distinguishes between methods that belong to the Service interface of the object and internal methods encapsulated in the object's implementation. The activity of these internal methods (step 3) is not reified to the object's metaobject. Steps 4 and 5 illustrate the path followed by the generated output values.

**Figure 2: MOP Interactions**

### Structural View of Base-Level Objects
The structural view of the base-level object managed by its metaobject includes references to the object, its attributes and their types, its methods and their respective signatures, inheritance links, and other relevant information. This information can be retrieved using the introspection mechanisms provided by the MOP. This enables the metaobject to reason about the current state of its base-level object and customize that state using structural intercession.

### Object-Metaobject Interactions
The interactions between objects and metaobjects are defined through method invocations exchanged via two well-known interfaces called reflective interfaces:

1. **Metaobject Interface**: This interface notifies metaobjects about events governing the behavior of their objects.
2. **Object Interface**: This interface allows metaobjects to act on their objects, inspecting and modifying their state and triggering the execution of their methods.

It is important to note that both the introspection and structural intercession mechanisms of the MOP are not controllable through the Metaobject Interface. Metaobjects activate these mechanisms as needed, based on the non-functional requirements of the system or upon requests from other metaobjects.

### Assumptions
We do not consider multi-threaded objects and other sources of non-determinism in the generic MOP presented above. We assume that both objects and metaobjects are deterministic and single-threaded system components.

### A Strategy for Testing MOPs
The test strategy has been designed for the verification of MOP-based dependable reflective architectures. It is part of a comprehensive test strategy aimed at incrementally verifying:

1. Functional mechanisms defined by the base-level.
2. Reflective mechanisms used to compose functional and non-functional mechanisms supplied by the meta-level.
3. Non-functional mechanisms provided by the meta-level.
4. Composition of functional and non-functional mechanisms using MOP reflective mechanisms.

Phases 1, 3, and 4, which are highly dependent on the specific functional and non-functional mechanisms implemented in the target reflective architecture, are beyond the scope of this paper. For phase 2, we focus on analyzing the MOP interaction mechanisms shown in Figure 2 to propose a generic test strategy applicable to any MOP in the family described in Section 2.

The generic strategy specifies a test order for the protocol mechanisms, aiming to reduce testing effort by promoting a gradual increase in the observability and controllability of the mechanisms under test. The goal is to enable the reuse of already tested mechanisms for verifying the remaining ones. Four testing levels are identified, each with specific test objectives and required test environments. The objectives are focused on verifying the properties expected from each reflective mechanism to ensure confidence in their use. The instantiation of the strategy for a specific MOP will depend on its implementation, as exemplified with the !FKI!€qDS architecture [13] in Section 4.

### Overview of the Strategy
The activation of reflective mechanisms is based on the interaction channel used by objects and metaobjects. Testing these mechanisms requires a high level of confidence in the interaction channel, which can be achieved by testing the process of establishing the interconnection. However, the issues related to this initial testing level are highly dependent on the MOP implementation and vary from one MOP to another. Thus, the strategy cannot provide general guidelines for this level, although we assume it is successfully achieved initially.

Once objects and metaobjects are correctly linked, the reflective mechanisms of the MOP are exercised following a test order defined according to their dependencies. This incremental test strategy reduces the testing effort. The proposed test order is as follows:

1. **Structural Intercession Mechanisms**
2. **Behavioral Intercession Mechanisms**
3. **Reification Mechanisms**
4. **Introspection Mechanisms**

### Testing Level 1: Reification Mechanisms
The behavioral image supplied to the object’s metaobject by the reification mechanisms must be complete and consistent with the real object activity. Therefore, completeness and consistency are key requirements to verify:

1. **Completeness Requirement**: Every message received by a server object through its Service interface must be reified (notified) to the server’s metaobject. Any unobserved invocation at the meta-level invalidates the interpretation of the object’s execution model.
2. **Consistency Requirement**: Reification messages must provide the metaobject with a correct view of the events triggered at the base-level. In our case, these events are method invocations. Consequently, reification messages must identify the invoked method and provide the parameter values used in the invocation. The output values produced in response to the activation of the invoked method must be returned to the client object.

**Figure 3: Testing Environment for Reification Mechanisms**

### Testing Level 2: Behavioral Intercession Mechanisms
The behavioral intercession mechanisms allow a metaobject to trigger the execution of the invoked method on its object. The test objectives are to verify their capacity to:

1. Activate the correct code of the base-level object with the correct input parameter values.
2. Return to the metaobject the output values produced by the object's code.

To decide whether a MOP passes the tests, the oracle procedure needs a report on the actual object activity to compare it with the image obtained through the MOP. This report cannot be delivered through the MOP due to encapsulation and reliability concerns. Therefore, the report must be supplied directly by the base-level object.

**Figure 4: Testing Environment for Behavioral Intercession Mechanisms**

### Testing Level 3: Introspection Mechanisms
The introspection mechanisms provide means for a metaobject to retrieve structural data from its base-level object. These data relate to the object state defined by the current values of the object attributes. Depending on the non-functional mechanisms, the introspection mechanisms may need to supply all or some attribute values. Testing these mechanisms without making assumptions about their future use in a specific system involves considering the most general case, where all attribute values are retrieved. The test objectives are to verify that the full image of the object state obtained from the introspection mechanisms conforms to the actual object state (same attribute values).

As mentioned in Section 2.2, the introspection mechanisms are not controllable through the Metaobject Interface. They are triggered at the meta-level through a specific interface called MetaControl. The metaobject involved in the test environment must implement this interface. To check the MOP's capacity for handling a representative sample of attributes, the server object must possess attributes with various types and different levels of visibility (e.g., public, protected, private). Inheritance is another feature to be considered at this testing level.

**Figure 5: Testing Environment for Introspection Mechanisms**

### Testing Level 4: Structural Intercession Mechanisms
Like the other mechanisms, the structural intercession mechanisms also require a thorough testing process. The details of this testing level will be covered in the subsequent sections.