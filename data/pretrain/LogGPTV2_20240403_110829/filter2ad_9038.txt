作者：[n1nty@360 A-Team](http://mp.weixin.qq.com/s/7b3Fyu_K6ZRgKlp6RkdYoA
"n1nty@360 A-Team")
上一篇公众号文章写了一下如何在 Tomcat 环境下隐藏任意 Jsp 文件，可用于隐藏 Shell。文件虽然隐藏了，但是在访问 Shell
的时候依然会留下访问日志，这一篇文章来就简单说一下隐藏访问日志这件事。
上次我发在 ThreatHunter 社区的 hideshell.jsp 本身是自带日志隐藏功能的。你在访问 hideshell.jsp 的时候，如果
Tomcat 没有经过特殊的日志配置，是不会记录任何访问日志的。下面简单说一下是如何实现的。
需要知道的背景知识（简述）：
#### Container - 容器组件
Tomcat 中有 4 类容器组件，从上至下依次是：
  1. Engine，实现类为 org.apache.catalina.core.StandardEngine
  2. Host，实现类为 org.apache.catalina.core.StandardHost
  3. Context，实现类为 org.apache.catalina.core.StandardContext
  4. Wrapper，实现类为 org.apache.catalina.core.StandardWrapper
“从上至下” 的意思是，它们之间是存在父子关系的。
Engine：最顶层容器组件，其下可以包含多个 Host。  
Host：一个 Host 代表一个虚拟主机，其下可以包含多个 Context。  
Context：一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper。  
Wrapper：一个 Wrapper 代表一个 Servlet。
Container 接口中定义了 logAccess 方法，以要求组件的实现类提供日志记录的功能。
以上四个组件的实现类都继承自 org.apache.catalina.core.ContainerBase 类，此类实现了 Container
接口。也就是说StandardEngine/StandardHost/StanardContext/StandardWrapper
这四种组件都有日志记录的功能。
org.apache.catalina.core.ContainerBase 对 logAccess 方法的实现如下：
    public void logAccess(Request request, Response response, long time,
            boolean useDefault) {
        boolean logged = false;
        if (getAccessLog() != null) {
            getAccessLog().log(request, response, time);
            logged = true;
        }
        if (getParent() != null) {
            // No need to use default logger once request/response has been logged
            // once
            getParent().logAccess(request, response, time, (useDefault && !logged));
        }
    }
从实现可以看出，日志记录采用了类似冒泡的机制，当前组件记录完日志后，会触发上级组件的日志记录功能，一直到顶层。 如果从底层的 Wrapper
组件开始记录日志，则日志的记录过程将是 Wrapper.logAccess --> Context.logAccess --> Host.logAccess
--> Engine.logAccess。
当然每一层组件都会检查自己是否配置了日志记录器，如果没有配置，则跳过本层的日志记录，直接转向上级。
这里贴一段 Tomcat conf/server.xml 中的默认配置：
      ....
可以看到在 Host 标签下配置了一个 className 为
org.apache.catalina.valves.AbstractAccessLogValve 的 Vavle。这说明只有 Host 配置了日志记录器，
Context 与 Engine 都没有配置。所以在运行的时候，只有 Host 组件会记录日志，日志会以 localhost_access_log
为文件名前缀记录在 tomcat 的 logs 目录下。
上面说到了日志记录器，它在 Tomcat 做为一个 Valve 被实现，以便被插入到 Container 的 pipeline 中，以此来与
Container 关联起来。
实现类为： **org.apache.catalina.valves.AccessLogValve**  
它继承自 **org.apache.catalina.valves.AbstractAccessLogValve** 同时也继承了
AbstractAccessLogValve 定义的 log 方法。此方法是真正用来做日志记录的方法。 定义如下：
    public void log(Request request, Response response, long time) {
        if (!getState().isAvailable() || !getEnabled() || logElements == null
                || condition != null
                && null != request.getRequest().getAttribute(condition)
                || conditionIf != null
                && null == request.getRequest().getAttribute(conditionIf)) {
            return;
        }
        /**
         * XXX This is a bit silly, but we want to have start and stop time and
         * duration consistent. It would be better to keep start and stop
         * simply in the request and/or response object and remove time
         * (duration) from the interface.
         */
        long start = request.getCoyoteRequest().getStartTime();
        Date date = getDate(start + time);
        CharArrayWriter result = charArrayWriters.pop();
        if (result == null) {
            result = new CharArrayWriter(128);
        }
        for (int i = 0; i  。
* * *
**欢迎关注作者公众号**
* * *