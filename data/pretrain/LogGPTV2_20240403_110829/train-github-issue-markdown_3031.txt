Is there any particular reason to have `product` return different values
depending on the number of iterators provided?
Demo
    julia> Base.iteratorsize(Base.product(1:2))
    Base.HasShape()
    julia> Base.iteratorsize(Base.product(1:2, 1:2))
    Base.HasLength()
This currently happens because `Base.product(itr)` calls the `Zip1`
constructor which has a different behaviour.
    julia> Base.product(1:2)
    Base.Zip1{UnitRange{Int64}}(1:2)
    julia> Base.product(1:2, 1:2)
    Base.Prod2{UnitRange{Int64},UnitRange{Int64}}(1:2,1:2)
At the cost of some code duplication the alternative would be to implement a
`Prod1` type and add the required behaviour instead of calling the `Zip1`
constructor.
(this is on master)