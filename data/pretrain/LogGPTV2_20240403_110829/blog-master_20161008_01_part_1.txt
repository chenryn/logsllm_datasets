## PostgreSQL 9.6 内核优化之 聚合代码优化OP复用浅析  
### 作者             
digoal              
### 日期            
2016-10-08             
### 标签            
PostgreSQL , 9.6 , 内核优化 , 聚合代码优化 , OP复用     
----            
## 背景   
聚合操作指将分组的数据聚合为一个结果输出。   
聚合通常用在统计应用中，例如统计分组的最大值，最小值，记录数，平均值，方差，截距，相关性。  
聚合也可能被用于文本分析或者图像分析等，例如最佳相似度，行列变换，聚合为数组或JSON，图像堆叠等。    
因此聚合通常需要启动值，行的处理，以及结果的格式转换3个过程。  
PostgreSQL的聚合也包含了以上三个过程，创建一个聚合函数的语法如下：  
```
CREATE AGGREGATE name ( [ argmode ] [ argname ] arg_data_type [ , ... ] ) (
    SFUNC = sfunc,
    STYPE = state_data_type
    [ , SSPACE = state_data_size ]
    [ , FINALFUNC = ffunc ]
    [ , FINALFUNC_EXTRA ]
    [ , COMBINEFUNC = combinefunc ]
    [ , SERIALFUNC = serialfunc ]
    [ , DESERIALFUNC = deserialfunc ]
    [ , INITCOND = initial_condition ]
    [ , MSFUNC = msfunc ]
    [ , MINVFUNC = minvfunc ]
    [ , MSTYPE = mstate_data_type ]
    [ , MSSPACE = mstate_data_size ]
    [ , MFINALFUNC = mffunc ]
    [ , MFINALFUNC_EXTRA ]
    [ , MINITCOND = minitial_condition ]
    [ , SORTOP = sort_operator ]
    [ , PARALLEL = { SAFE | RESTRICTED | UNSAFE } ]
)
```
例子  
```
CREATE AGGREGATE avg (float8)
(
    sfunc = float8_accum,
    stype = float8[],
    finalfunc = float8_avg,
    initcond = '{0,0,0}'
);
```
参考  
https://www.postgresql.org/docs/9.6/static/xaggr.html  
https://www.postgresql.org/docs/9.6/static/sql-createaggregate.html  
PostgreSQL 聚合处理流程如图  
![pic1](20161008_01_pic_001.png)  
```
1. 使用initcond指定internal-state的初始值，没有则为空。    
2. 每条记录(作为next-data-values输入)，调用 sfunc( internal-state, next-data-values ) ---> next-internal-state  
   输出的结果作为中间结果继续调用sfunc
3. ffunc( internal-state ) ---> aggregate-value
   可选，作为结果转换使用
```
## 9.6 聚合OP优化
![pic2](20161008_01_pic_002.png)  
如果initcond与sfunc一致，在同一个聚合分组内，sfunc只需要计算一遍所有记录，而不需要计算多遍。  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=804163bc25e979fcd91b02e58fa2d1c6b587cc65  
```
Share transition state between different aggregates when possible.
If there are two different aggregates in the query with same inputs, 
and the aggregates have the same initial condition and transition function,
only calculate the state value once, and only call the final functionsseparately. 
For example, AVG(x) and SUM(x) aggregates have the same transition function, which accumulates the sum and number of input tuples.
For a query like "SELECT AVG(x), SUM(x) FROM x", we can therefore accumulate the state function only once, which gives a nice speedup.
David Rowley, reviewed and edited by me.
```
我们可以通过以下SQL查看可以共享OP的聚合函数，rank一致的都可以共享。  
```
postgres=# select rank() over (partition by 1 order by aggtransfn,agginitval),
           row_number() over (partition by aggtransfn,agginitval order by aggfnoid) rn,
           aggfnoid,aggtransfn,agginitval from pg_aggregate ;
```
```
 rank | rn |          aggfnoid          |          aggtransfn          |     agginitval      
------|----|----------------------------|------------------------------|---------------------
    1 |  1 | pg_catalog.sum             | float4pl                     | none
    2 |  1 | pg_catalog.avg             | float4_accum                 | {0,0,0}
    2 |  2 | pg_catalog.variance        | float4_accum                 | {0,0,0}
    2 |  3 | pg_catalog.stddev          | float4_accum                 | {0,0,0}
    2 |  4 | pg_catalog.var_samp        | float4_accum                 | {0,0,0}
    2 |  5 | pg_catalog.stddev_samp     | float4_accum                 | {0,0,0}
    2 |  6 | pg_catalog.var_pop         | float4_accum                 | {0,0,0}
    2 |  7 | pg_catalog.stddev_pop      | float4_accum                 | {0,0,0}
    9 |  1 | pg_catalog.max             | float4larger                 | none
   10 |  1 | pg_catalog.min             | float4smaller                | none
   11 |  1 | pg_catalog.sum             | float8pl                     | none
   12 |  1 | pg_catalog.avg             | float8_accum                 | {0,0,0}
   12 |  2 | pg_catalog.variance        | float8_accum                 | {0,0,0}
   12 |  3 | pg_catalog.stddev          | float8_accum                 | {0,0,0}
   12 |  4 | pg_catalog.var_samp        | float8_accum                 | {0,0,0}
   12 |  5 | pg_catalog.stddev_samp     | float8_accum                 | {0,0,0}
   12 |  6 | pg_catalog.var_pop         | float8_accum                 | {0,0,0}
   12 |  7 | pg_catalog.stddev_pop      | float8_accum                 | {0,0,0}
   19 |  1 | pg_catalog.max             | float8larger                 | none
   20 |  1 | pg_catalog.min             | float8smaller                | none
   21 |  1 | pg_catalog.max             | text_larger                  | none
   22 |  1 | pg_catalog.min             | text_smaller                 | none
   23 |  1 | pg_catalog.max             | array_larger                 | none
   24 |  1 | pg_catalog.min             | array_smaller                | none
   25 |  1 | pg_catalog.max             | int4larger                   | none
   25 |  2 | pg_catalog.max             | int4larger                   | none
   27 |  1 | pg_catalog.min             | int4smaller                  | none
   27 |  2 | pg_catalog.min             | int4smaller                  | none
   29 |  1 | pg_catalog.max             | int2larger                   | none
   30 |  1 | pg_catalog.min             | int2smaller                  | none
   31 |  1 | pg_catalog.sum             | cash_pl                      | none
   32 |  1 | pg_catalog.max             | cashlarger                   | none
   33 |  1 | pg_catalog.min             | cashsmaller                  | none
   34 |  1 | pg_catalog.max             | bpchar_larger                | none
   35 |  1 | pg_catalog.min             | bpchar_smaller               | none
   36 |  1 | pg_catalog.max             | date_larger                  | none
   37 |  1 | pg_catalog.min             | date_smaller                 | none
   38 |  1 | pg_catalog.sum             | interval_pl                  | none
   39 |  1 | pg_catalog.min             | timestamptz_smaller          | none
   40 |  1 | pg_catalog.max             | timestamptz_larger           | none
   41 |  1 | pg_catalog.min             | interval_smaller             | none
   42 |  1 | pg_catalog.max             | interval_larger              | none
   43 |  1 | pg_catalog.count           | int8inc                      | 0
   44 |  1 | pg_catalog.max             | int8larger                   | none
   45 |  1 | pg_catalog.min             | int8smaller                  | none
   46 |  1 | pg_catalog.max             | time_larger                  | none
   47 |  1 | pg_catalog.min             | time_smaller                 | none
   48 |  1 | pg_catalog.max             | timetz_larger                | none
   49 |  1 | pg_catalog.min             | timetz_smaller               | none
   50 |  1 | pg_catalog.bit_and         | bitand                       | none
   51 |  1 | pg_catalog.bit_or          | bitor                        | none
   52 |  1 | pg_catalog.min             | numeric_smaller              | none
   53 |  1 | pg_catalog.max             | numeric_larger               | none
   54 |  1 | pg_catalog.variance        | numeric_accum                | none
   54 |  2 | pg_catalog.stddev          | numeric_accum                | none
   54 |  3 | pg_catalog.var_samp        | numeric_accum                | none
   54 |  4 | pg_catalog.stddev_samp     | numeric_accum                | none
   54 |  5 | pg_catalog.var_pop         | numeric_accum                | none
   54 |  6 | pg_catalog.stddev_pop      | numeric_accum                | none
   60 |  1 | pg_catalog.variance        | int2_accum                   | none
   60 |  2 | pg_catalog.stddev          | int2_accum                   | none
   60 |  3 | pg_catalog.var_samp        | int2_accum                   | none
   60 |  4 | pg_catalog.stddev_samp     | int2_accum                   | none
   60 |  5 | pg_catalog.var_pop         | int2_accum                   | none
   60 |  6 | pg_catalog.stddev_pop      | int2_accum                   | none
   66 |  1 | pg_catalog.variance        | int4_accum                   | none
   66 |  2 | pg_catalog.stddev          | int4_accum                   | none
   66 |  3 | pg_catalog.var_samp        | int4_accum                   | none
   66 |  4 | pg_catalog.stddev_samp     | int4_accum                   | none
   66 |  5 | pg_catalog.var_pop         | int4_accum                   | none
   66 |  6 | pg_catalog.stddev_pop      | int4_accum                   | none
   72 |  1 | pg_catalog.variance        | int8_accum                   | none
   72 |  2 | pg_catalog.stddev          | int8_accum                   | none
   72 |  3 | pg_catalog.var_samp        | int8_accum                   | none
   72 |  4 | pg_catalog.stddev_samp     | int8_accum                   | none
   72 |  5 | pg_catalog.var_pop         | int8_accum                   | none
   72 |  6 | pg_catalog.stddev_pop      | int8_accum                   | none
   78 |  1 | pg_catalog.sum             | int2_sum                     | none
   79 |  1 | pg_catalog.sum             | int4_sum                     | none
   80 |  1 | pg_catalog.avg             | interval_accum               | {0 second,0 second}
   81 |  1 | pg_catalog.bit_and         | int2and                      | none
   82 |  1 | pg_catalog.bit_or          | int2or                       | none
   83 |  1 | pg_catalog.bit_and         | int4and                      | none
   84 |  1 | pg_catalog.bit_or          | int4or                       | none
   85 |  1 | pg_catalog.bit_and         | int8and                      | none
   86 |  1 | pg_catalog.bit_or          | int8or                       | none
   87 |  1 | pg_catalog.avg             | int2_avg_accum               | {0,0}
   88 |  1 | pg_catalog.avg             | int4_avg_accum               | {0,0}
   89 |  1 | pg_catalog.max             | oidlarger                    | none
   90 |  1 | pg_catalog.min             | oidsmaller                   | none
   91 |  1 | pg_catalog.min             | timestamp_smaller            | none
   92 |  1 | pg_catalog.max             | timestamp_larger             | none
   93 |  1 | pg_catalog.array_agg       | array_agg_transfn            | none
   94 |  1 | bool_and                   | booland_statefunc            | none
   94 |  2 | every                      | booland_statefunc            | none
   96 |  1 | bool_or                    | boolor_statefunc             | none
   97 |  1 | pg_catalog.avg             | int8_avg_accum               | none
   97 |  2 | pg_catalog.sum             | int8_avg_accum               | none
   99 |  1 | pg_catalog.max             | tidlarger                    | none