structure; {MHi} are the models of the host resources; MP is the model of
computation of the attack success probabilities; MHR is the model of the host
reaction in response of attack. Let us determine the model MCN of a computer
network structure CN as follows: MCN =, where A is the network
address; P is a family of protocols used (e.g., TCP/IP, FDDI, ATM, IPX, etc.);
N is a set {CNi} of sub-networks and/or a set {Hi} of hosts of the network
CN; C is a set of connections between the sub-networks (hosts) established as a
connectivity matrix. If N establishes a set of sub-networks {CNi}, then each sub-
network CNi can in turn be speciﬁed by the model MCN i (if its structure needs
to be developed in detail and if information is available about this structure).
Each host Hi is determined as a pair MHi =, where A is the host
address, T is the host type (e.g., ﬁrewall, router, host, etc.).
Models {MHi} of the network host resources serve for representing the host
parameters that are important for attack simulation. Let us determine the model
Attacks against Computer Network
231
of the network host resources as follows: MHi = , where A — IP-address, M — mask of the
network address, T — type and version of OS, N — users’ identiﬁers (IDs),
D — domain names, P — host access passwords, S — users’ security identiﬁers
(SID), DP — domain parameters (domain, names of hosts in the domain, domain
controller, related domains), ASP — active TCP and UDP ports and services
of the hosts, RA — running applications, SP — security parameters, SR —
shared resources, T H — trusted hosts.
j
Success or failure of any attack action (corresponding to terminal level of the
attack ontology) is determined by means of the model MP of computation of the
attack success probabilities. This model is speciﬁed as follows: MP = {RSP r
},
where RSP r
is a special rule that determines the action success probability de-
pending on the basic parameters of the host (attack target). The rule RSP r
includes IF and THEN parts. The IF part contains action name and precondi-
tion (values of attributes constraining the attack applicability). The THEN part
contains value of success probability (SPr). Examples of interpretations of the
probability computation rules are as follows:
j
j
‘‘If action is ’FF’ (Connection on FTP and examination of bin-files in
the directory /bin/ls) and OS Type is ’Unix, Linux’ and Service is ’FTP’
then SP is 0.7”;
‘‘If action is ’FCA’ (Free Common Access) and OS type is ’Windows 9x’
and Security parameter is ’CFP’ (shared files and printers) then SP is
0.7”.
j
j
}, RHR
The result of each attack action is determined according to the model MHR
of the host reaction. This model is determined as a set of rules of the host
reaction: MHR = {RHR
: Input → Output [& Post-Condition]; where In-
put — the malefactor’s activity, Output — the host reaction, Post-Condition —
a change of the host state, & — logical operation “AND”, [ ] — optional part of
the rule. The Input format: :  :  [; . The Output
format:
{ [: ]; { [: ]}. The Attack Success
is determined by the success probability of the attack that is
Parameter
associated with the host (attack target) depending on the implemented attack
type. The values of attack success parameter are Success (S), and Failure
(F). The part of output message shown in the  is taken from the
corresponding ﬁeld of the host (target) parameters. The part of output message
shown in quotation marks ” ” is displayed as a constant line. The Post-Condition
format: {p1 = P1, p2 = P2, :, pn = Pn}, where pi — ith parameter of the host
(for instance, SP, SR, TH, etc.) which value has changed, Pi — the value of ith
parameter.
Examples of the host reaction rules:
SFB: Scanning ‘‘FTP Bounce’’: Target host; Intermediate host (FTP-ser-
ver) → {S: ; F: ‘‘It was not
possible to determine Active ports (services)’’};
232
V. Gorodetski and I. Kotenko
IF: ICMP message quoting: Target host → { S: ; F: ‘‘It was not possible to determine the type of operating
system’’}.
6 Implementation of Attack Simulator
The software prototype of the attack simulator has been implemented. Now it
is used for validation of the accepted formal framework. It consists of three
components: the model of attacker, the model of the attacked computer network
and the background traﬃc generator. Background traﬃc is formed taking into
account the model of the attacked computer network as a set of sessions between
hosts of the network. The common traﬃc generated by integration of streams of
data from these components can be an input for IDSs evaluation and learning.
Each of the components of the attack simulator was built as an agent of multi-
agent system (MAS). The design and implementation of the attack simulator is
being carried out on the basis of MASDK — “Multi-Agent System Development
Kit” [16]. All MAS agents generated by MASDK have the same architecture.
Diﬀerences are reﬂected in the content of particular agent’s data and knowledge
bases. Each agent interacts with other agents, environment which is perceived,
and, possibly, modiﬁed by agents, and user communicating with agents through
his interface. Receiver of input and Sender of output messages perform the re-
spective functions. Messages received are recorded in Input message buﬀer. The
order of its processing is managed by Input message processor. In addition, this
component performs syntax analysis and messages interpretation and extracts
the message contents. The component Database of agent’s dialogs stores for each
input message its attributes like identiﬁers, type of message and its source. If a
message supposes to be replied it is mapped the respective output message when
it is sent.
Meta-state machine manages the semantic processing of input messages di-
recting it for processing by the respective State machines. The basic agent’s
computations are executed by a set of State machines. The selection of scenario
and therefore the output result depend on the input message content and inner
state of the State Machine. In turn, inner state of this Machine depends on pre-
history of its performance; in particular, this prehistory is reﬂected in the state
of agent’s Knowledge base and Database. One more state machine called “Self-
activated behaviour machine” is changing its inner state depending on the state
of the data and knowledge bases. In some combinations of these states it can acti-
vate functionality independently on input messages or state of the environment.
Each agent class is provided with a set of particular message templates accord-
ing to its functionalities. The developer carries out the specialization procedure
with Editor of message templates, which, in turn, is a component of MASDK.
Communication component of each agent includes also data regarding potential
addressees of messages of given template.
The screen indicating generation of the intention “Gaining Access to Re-
sources” (GAR) is depicted in Fig. 4. In this screen the attack generation at
Attacks against Computer Network
233
Fig. 4. Visualization of the attack development: the reconnaissance stage of the attack
“Gaining Access to Resources” after execution of the action EUE
the reconnaissance stage after execution of the action “Enumerating Users with
enum” (EUE) is ﬁxed. In the ﬁgure the information is divided on four groups:
(1) the attack task speciﬁcation units are mapped in the left top of the screen;
(2) to the right of them the attack generation tree is visualized; (3) the strings
of the malefactor’ s actions are placed in the left part of the screen below the
attack task speciﬁcation; (4) on the right of each malefactor’s action a tag of
success (failure) as green (black) quadrate and data obtained from an attacked
host (a host response) are depicted.
From implementation issue, a computer network attack can be considered as
a sequence of coordinated actions of the spatially distributed malefactors. Each
malefactor is mapped as an intelligent agent of the same architecture possessing
the similar functionality. While developing an attack, these agents interact via
message exchange informing each other about current state and results of the at-
tack in order to coordinate their further activity. These messages are represented
in KQML that is standard of DARPA (for message “wrapper”), and XML (for
message content).
We are developing2 a teamwork interpretation of the malefactors’ activity
performing distributed attacks on the basis of joint intention theory [37]. When
2 Currently this part of work is in progress.
234
V. Gorodetski and I. Kotenko
implementing the complex coordinated attacks, the special meta-agent should
form the common scenario of the attack and assigns areas of responsibility to
other agents based on the general attack goal constituted by simulation tool
user. The agents, responsible for the particular fragments (steps) of the common
scenario, can in turn “employ” other agents or realize particular operations inde-
pendently. For this purpose the special scenarios of operations and protocols of
messaging will be used. The concrete scenario and protocol are determined with
usage of the network attacks ontology depending on a type of the realizable goal
(intention) and the attacked network response. All set of the involved agents
realizing the concrete scenario compose a hierarchical structure.
7 Related Works
The works relevant to attack modeling and simulation can be divided into the
following groups: (1) works describing attacks and attack taxonomies, (2) works
immediately coupled with attack modeling and simulation, (3) works devoted to
the description of attack speciﬁcation languages; (4) works on evaluating IDSs;
(5) works on signature and traﬃc generation tools. This list is not exhaustive.
There are a lot of works in which attack cases are systematized as attack tax-
onomies (for example, [2], [7], [18], [24], [25], etc.). Based on these taxonomies we
built our own taxonomy as an ontology comprising a hierarchy of intentions and
actions of malefactors directed to implementation of attacks of various classes
split into macro- and micro-levels.
In diﬀerent works on attack modeling and simulation, as a rule, attack is
considered as temporal orderings of actions ([6], [8], [22], [23], [36], etc.). In [22]
the state transition analysis technique was developed to model host-based in-
trusions. A description of an attack has a “safe” starting state, zero or more
intermediate states, and (at least) one “compromised” ending state. States are
characterized by means of assertions describing diﬀerent aspects of the security
state. The work [6] presents an approach to simulate intrusions in sequential and
parallelized forms. The paper [23] suggests formal models of both network and
attacks and extends the state transition analysis technique to network-based
intrusion detection in order to represent attack scenarios in networks. In [8]
a simple network security model “Cause-Eﬀect Model of Information System
Attacks and Defenses” was proposed. It is composed of network model repre-
sented by node and link, cause-eﬀect model, characteristic functions, and pseudo-
random number generator. In ([39], [40]) the descriptive models of the network
and the attacker’s capabilities, intentions, and courses-of-action are described.
These models are used to identify the devices most likely to be compromised.
Principles from economics are used to predict the attacker’s behavior. Concep-
tual models of computer penetration were presented in [36]. The paper com-
pares the traditional and “new” attack paradigms. Traditional attack paradigm
includes phases of “information gathering”, “exploitation”, and “metastasis”.
The metastasis phase of the attack can be logically divided into sub-phases of
“consolidation” and “continuation”. The core of the new distributed metastasis
Attacks against Computer Network
235
methodology is a desire to utilize the distributed nature of network environment,
and to perform an automation of the metastasis phase using a distributed agent-
based approach. We used in our formal model the temporal orderings of actions
and proposed multi-agent teamwork-based approach for modeling of coordinated
distributed attacks.
In ([19], [32] and some other) attacks are modeled in a structured and reusable
“tree”-based form. In [19] a high-level conceptual model of attack based on the in-
truder’s intention (attack strategy) is presented. The paper determines intrusion
intention as the goal-tree: the root node corresponds to ultimate goal of attack,
and lower level nodes represent alternatives or ordered sub-goals in achieving
the upper node goal. In [32] means for documenting attacks in a form of attack
trees are described. Each attack tree enumerates and elaborates the ways that an
attacker could cause the event to occur. Two structures are used for attack rep-
resentation: an attack pattern (characterizing an individual type of attack), and
an attack proﬁle (organizing attack patterns to make it easier to apply them).
As in [19] and [32] we apply intension- and tree-based attack strategy represen-
tation, but “go further” using for node decomposition a formal framework based
on context-free grammars implemented in terms of state machines.
A model to evaluate survivability of networked systems after network inci-
dents was developed in [31]. The model consists of three sub-models: the ﬁrst
one simulates the occurrence of incidents, the second one evaluates the impact
of an attack on the system, and the third one assesses the survivability of the
system. The model of incidents is determined as a marked stochastic process,
where the incidents are the events that occur at random points in time, and the
event type is the mark associated with an incident. Besides attack generation
model, our approach includes also the model of attacked computer network that
evaluates the impact of an attack on the network hosts and generates reaction of
the network. The attacked network is considered as environment that reacts on
the malefactors’ actions. The variance of attacks is ensured by the random choice
of the grammar productions (or, what is the same, the state machine transition
rules). The peculiarity of any attack is that the malefactor’s strategy depends on
the results of the intermediate actions.
The paper [5] describes the cyber attack modeling and simulation method-
ology based on SES/MB (system entity structure and model base) framework
and Discrete Event Simulation (DEVS) formalism. This simulation methodol-
ogy allows classifying threats, specifying attack mechanisms, verifying protec-
tion mechanisms, and evaluating consequences. Our approach has resembling
purposes, but it uses stochastic formal-grammar-based speciﬁcation of the male-
factor’s intentions and scenarios of network attacks.
For attack ﬁxing, reproduction, analysis, recognition, response, document-
ing, special attack languages are used [38]: event languages ([3], etc.), exploit
languages ([4], etc.), reporting languages ([10], [13], etc.), detection languages
([12], [29], [34], etc.), correlation languages, response languages, and integrated
languages ([9], [30], etc.). Our formal language is related mostly to the exploit
and event languages, because it is used to describe attack stages and the for-
236
V. Gorodetski and I. Kotenko
mat of events generated. Our attack representation language includes parts used
for description of attack preconditions, attack intentions and actions, formats of
actions of terminal level, and postconditions (states of the attacked hosts).
In all works devoted to the evaluation of IDSs the attack simulation issues
are considered. In [35] a methodology and software tools for testing IDSs using
scripts to generate both background traﬃc and intrusions are described. In eval-
uations performed by the Lincoln Laboratory at MIT ([26], etc.), investigators
were given sniﬀed network traﬃc, audit data, and ﬁle-system snapshots. The re-
port [11] discusses issues associated with the generation of suitable background
traﬃc; attacks are obtained from a vulnerability database. In ([2], [27]) it was
marked that benchmarking IDSs is not generic and systematic enough for eval-
uation needs. In [2] another approach is investigated. It consists of comparing
and evaluating IDSs at the level of their speciﬁcation rather than at the level of
their implementation. Our approach also presumes that IDSs can be evaluated
and veriﬁed at diﬀerent phases of their development and implementation. The
more detailed level of attack representation is used in the attack model the more
advanced level of IDS is evaluated.
Now there are a lot of signature and traﬃc generation tools: FlameThrower,
Fragrouter, Hailstorm, IDS Informer, MS WCAT, nidsbench, SmartBits, Stick,
etc. But the majority of these tools are doing only simulated pseudorandom
malicious packets. As Marcus Ranum noticed in discussions on focus-idssecurity-
focus.com “Make sure that you’re not only generating “signatures” but that they
are within the context of apparently valid sessions - otherwise you’re actually
benchmarking an IDS’ ability to detect false positives, not real attacks.” On our
sight Hailstorm (Cenzic) [17] and IDS Informer (BLADE Software) [21] have
the most interesting properties. Hailstorm generates traﬃc based on patterns
specifying how a packet is to be generated over the network. IDS Informer
has been designed to allow launch S.A.F.E. (Simulated Attacks for Evaluation)
attacks. The S.A.F.E. process builds the attacks based on previously recorded
real attacks. In our approach the malicious and background traﬃc on the terminal
levels is formed within the context of valid sessions.
8 Conclusion
In the paper, attack is considered as competition of malefactor(s) and computer
network security system, i.e. attack-modeling task is considered as an adversary
domain. We proposed a formal grammar-based framework for attack modeling
and considered the basic issues of the attack simulator development. Formal
framework is built as a hierarchy of attribute stochastic context-free grammars
interconnected via the “grammar substitution” operation. The framework makes
it possible to specify and to simulate a wide spectrum of attacks at various levels
of detail. Software prototype of the attack simulator is developed. The attack
simulator allows simulating a wide spectrum of real-life attacks. The respective
software code is written using Visual C++ 6.0, Java 2 version 1.3.1, KQML and
Attacks against Computer Network
237
XML languages. The basic ideas of the modeling and simulation of coordinated
distributed attacks are developed.
Acknowledgments. This research is being funded by European Oﬃce of
Aerospace R&D (Projects #1994 P) and grant #01-01-108 of Russian Foun-
dation of Basic Research.
References
1. Aho, A.V., Ullman, J.D.: The Theory of Parsing, Translation, and Compiling, Vol.
1, 2, Prentice-Hall, Inc. (1972)
2. Alessandri, D., Cachin, C., Dacier, M., Deak, O., Julisch, K., Randell, B., Rior-
dan, J., Tscharner, A., Wespi, A., Wuest, C.: Towards a Taxonomy of Intrusion
Detection Systems and Attacks. MAFTIA deliverable D3. Version 1.01. Project
IST-1999-11583. Malicious- and Accidental-Fault Tolerance for Internet Applica-