### Structure and Models

- **MHi**: Models of the host resources.
- **MP**: Model for computing attack success probabilities.
- **MHR**: Model of the host's reaction to an attack.

#### Model of a Computer Network (MCN)
The model of a computer network structure, denoted as \( MCN \), is defined as:
\[ MCN = (A, P, N, C) \]
where:
- \( A \) is the network address.
- \( P \) is a family of protocols used (e.g., TCP/IP, FDDI, ATM, IPX, etc.).
- \( N \) is a set of sub-networks \(\{CN_i\}\) and/or a set of hosts \(\{H_i\}\) within the network \( CN \).
- \( C \) is a set of connections between the sub-networks (or hosts) represented as a connectivity matrix.

If \( N \) represents a set of sub-networks \(\{CN_i\}\), each sub-network \( CN_i \) can be further specified by the model \( MCN_i \) if detailed structural information is available.

Each host \( H_i \) is modeled as:
\[ MHi = (A, T) \]
where:
- \( A \) is the host address.
- \( T \) is the host type (e.g., firewall, router, host, etc.).

### Model of Network Host Resources
The models \(\{MHi\}\) of the network host resources are used to represent parameters important for attack simulation. The model of the network host resources is defined as:
\[ MHi = (A, M, T, N, D, P, S, DP, ASP, RA, SP, SR, TH) \]
where:
- \( A \): IP address.
- \( M \): Mask of the network address.
- \( T \): Type and version of the operating system.
- \( N \): Users' identifiers (IDs).
- \( D \): Domain names.
- \( P \): Host access passwords.
- \( S \): Users' security identifiers (SIDs).
- \( DP \): Domain parameters (domain, names of hosts in the domain, domain controller, related domains).
- \( ASP \): Active TCP and UDP ports and services of the hosts.
- \( RA \): Running applications.
- \( SP \): Security parameters.
- \( SR \): Shared resources.
- \( TH \): Trusted hosts.

### Model of Attack Success Probabilities (MP)
The success or failure of any attack action (corresponding to the terminal level of the attack ontology) is determined using the model \( MP \). This model is specified as:
\[ MP = \{RSP_r\} \]
where \( RSP_r \) is a rule that determines the action success probability based on the host's basic parameters. Each rule \( RSP_r \) includes:
- **IF part**: Action name and precondition (values of attributes constraining the attack applicability).
- **THEN part**: Value of success probability (SPr).

Examples of rules:
- "If action is 'FF' (Connection on FTP and examination of bin-files in the directory /bin/ls) and OS Type is 'Unix, Linux' and Service is 'FTP' then SP is 0.7."
- "If action is 'FCA' (Free Common Access) and OS type is 'Windows 9x' and Security parameter is 'CFP' (shared files and printers) then SP is 0.7."

### Model of Host Reaction (MHR)
The result of each attack action is determined by the model \( MHR \) of the host reaction. This model is a set of rules:
\[ MHR = \{RHR: Input \rightarrow Output [& Post-Condition]\} \]
where:
- **Input**: The malefactor's activity.
- **Output**: The host's reaction.
- **Post-Condition**: A change in the host's state.
- **&**: Logical operation "AND".
- **[ ]**: Optional part of the rule.

**Input format**: \(\langle Action \rangle : \langle Precondition \rangle\)

**Output format**: \(\{ \langle Result \rangle: \langle Message \rangle; \langle Post-Condition \rangle \}\)

**Attack Success**: Determined by the success probability associated with the host (attack target) depending on the implemented attack type. The values are Success (S) and Failure (F).

**Examples of host reaction rules**:
- "Scanning 'FTP Bounce': Target host; Intermediate host (FTP-server) → {S: ; F: 'It was not possible to determine Active ports (services)'}"
- "ICMP message quoting: Target host → {S: ; F: 'It was not possible to determine the type of operating system'}"

### Implementation of Attack Simulator
A software prototype of the attack simulator has been developed for validating the formal framework. It consists of three components:
1. **Model of the attacker**.
2. **Model of the attacked computer network**.
3. **Background traffic generator**.

The background traffic is generated based on the model of the attacked computer network, simulating sessions between network hosts. The combined traffic from these components can be used for evaluating and training Intrusion Detection Systems (IDSs).

Each component of the attack simulator is designed as an agent in a multi-agent system (MAS) using the Multi-Agent System Development Kit (MASDK). All MAS agents have a common architecture, with differences in their data and knowledge bases. Agents interact with other agents, the environment, and the user through a user interface.

### Meta-State Machine and State Machines
- **Meta-state machine**: Manages the semantic processing of input messages, directing them to the appropriate state machines.
- **State machines**: Perform the basic computations, selecting scenarios and generating output results based on the input message content and the internal state of the state machine.

### Communication and Message Templates
Each agent class has a set of message templates according to its functionalities. Specialization of these templates is done using the Editor of message templates in MASDK. The communication component includes data about potential addressees for messages of a given template.

### Visualization and Generation of Intentions
Figure 4 shows the visualization of the attack development at the reconnaissance stage after executing the action "Enumerating Users with enum" (EUE). The screen is divided into four groups:
1. **Attack task specification units**.
2. **Visualization of the attack generation tree**.
3. **Strings of the malefactor's actions**.
4. **Tags of success (failure) and data obtained from the attacked host**.

### Distributed Attacks and Teamwork
From an implementation perspective, a computer network attack can be seen as a sequence of coordinated actions by spatially distributed malefactors. Each malefactor is modeled as an intelligent agent with similar functionality. These agents interact via message exchange, using KQML (DARPA standard) for message wrappers and XML for message content.

We are developing a teamwork interpretation of malefactors' activities based on joint intention theory. For complex coordinated attacks, a meta-agent forms the common attack scenario and assigns areas of responsibility to other agents based on the general attack goal. The involved agents form a hierarchical structure.

### Related Works
Relevant works on attack modeling and simulation can be categorized into:
1. **Works describing attacks and attack taxonomies**.
2. **Works on attack modeling and simulation**.
3. **Works on attack specification languages**.
4. **Works on evaluating IDSs**.
5. **Works on signature and traffic generation tools**.

Our approach uses temporal orderings of actions and a multi-agent teamwork-based approach for modeling coordinated distributed attacks. We also use a formal grammar-based framework to specify and simulate a wide spectrum of attacks at various levels of detail.

### Conclusion
In this paper, we consider an attack as a competition between malefactors and a computer network security system. We propose a formal grammar-based framework for attack modeling and discuss the development of an attack simulator. The framework uses a hierarchy of attribute stochastic context-free grammars interconnected via the "grammar substitution" operation. A software prototype of the attack simulator has been developed, allowing the simulation of a wide spectrum of real-life attacks. The code is written using Visual C++ 6.0, Java 2 version 1.3.1, KQML, and XML.

### Acknowledgments
This research is funded by the European Office of Aerospace R&D (Projects #1994 P) and grant #01-01-108 of the Russian Foundation of Basic Research.