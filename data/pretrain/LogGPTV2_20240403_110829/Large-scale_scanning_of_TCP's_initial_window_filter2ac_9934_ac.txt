present at 0.1% of the hosts. Since the first sample requires knowing
the set of all IPs reachable for HTTP/TLS services, we further took
30 random 1% samples of the entire probable address space and
arrived at the same result. While probing the entire IPv4 space is
possible, it is (given current host configurations) not required to
obtain representative IW estimates; reducing the overall footprint
by only probing a random subset of 1% suffices. We provide weekly
results of 1% scans at https://iw.comsys.rwth-aachen.de.
Figure 4: Alexa 1 M IW distribution of HTTP and TLS scan
for IWs used by at least 100 hosts.
Since the overall distribution is likely to be impacted by (older)
legacy systems, we next focus on assessing popular Internet in-
frastructures by scanning the Alexa top 1 M list. We show the IW
distribution for the Alexa top 1 M list in Figure 4 (note the log-scale).
In contrast to probing the entire IPv4 space, the success rate at pop-
ular hosts for HTTP increases to 80% yet TLS only gains marginally
and succeeds at 85% of the hosts. We can now see that IW 10, as the
currently recommended value, dominates the scans with a support
of over 85% (80%) for HTTP (TLS). Yet, some hosts are still on IW 2
and IW 4. The IW distribution of TLS hosts is irrespective of their
Alexa rank, only IW10 is more pronounced for higher ranked HTTP
hosts. We believe that in contrast to the entire IPv4 space, hosts of
popular domains are interested in performance optimizations or
at least keep their systems up to date. Before we dig deeper into
understanding these differences, we next discuss how hosts define
their IW by looking at the differences when scanning with a larger
MSS before we analyze the data on a per-ASN/service basis.
4.2 IW defined by Byte Limit
Until now, we have only shown the results for our scan with an
MSS of 64 B. Only a marginal number (around 1%) of the scanned
hosts adjusts their IW according to the announced MSS. Roughly
50% of these hosts send 64 segments, and when doubling the MSS to
128, the segment number halves to 32. These findings suggest that
these hosts are configured to use 4 kB as their IW, i.e., the multiple
of the MSS and number of segments. We randomly sampled the
hosts and manually investigated if we can characterize the hosts.
Eight out of ten hosts present a login interface to what seems to be
residential access modems from Technicolor in different versions,
most modems are hosted by the Mexican ISP Telmex. Among the
others, we found publicly accessible power supply monitors that
show the same behavior. The remaining 50% of the hosts cannot be
clustered into large groups as above. One group that we found by
randomly sampling are hosts that seem to adjust their IW in a way
that the network MTU is filled, i.e., with a MSS of 64 they send 24
segments and on 128 they send 12, summing up to 1536 B.
4.3 IW Distribution by Network & Service
We start by analyzing the IW usage by network type represented by
Autonomous Systems (AS). We therefore cluster our data by ASes
with similar IW distributions using DBSCAN (wrt. IW 1, 2, 4, 10
and other). The lefthand side of Figure 5 shows particularly large
clusters with similar IW distributions that represent a considerable
fraction of all scanned IPs (HTTP 49%, TLS 48%). These clusters pro-
vide an intuition on per-service IW deployments. Clusters (HTTP
123456910112025304864InitialWindowSize0102030405060FractionofIPs[%]HTTPTLSHTTPTLSHTTPTLSHTTP1%HTTP30%HTTP100%TLS50%TLS10%HTTP10%HTTP50%TLS100%TLS30%TLS1%1234569101114162448InitialWindowSize101102103104105106#IPs7%7%85%8%11%80%HTTPTLSIMC ’17, November 1–3, 2017, London, United Kingdom
Rüth et al.
HTTP
TLS
Service
Akamai
EC2
Cloudflare
Azure
IW1 IW2 IW4 IW10 IW1 IW2 IW4 IW10
0.0
0.0 100.0
– 0.0
95.8
1.3
2.6
0.2
0.0 100.0
0.0
0.0
21.9
0.1
4.1 73.3
4.5 17.6 67.1
10.4
–
1.8
0.0
7.8 54.9
Access NW 3.5 50.2 20.8
–
94.7
3.4
0.0 100.0
37.1
21.7
–
0.0
0.0
0.0
Figure 5: Distribution of IWs per AS. Left, 3 HTTP and 3 TLS
clusters of ASs standing out. Right, representatives of these
clusters or ASs that do not fit into the clusters.
and TLS) with nearly exclusive use of IW 10 mostly compromise
content provider, e.g., hosters, cloud provider, and CDNs. ASes with
many IW 2 based hosts belong to ISPs or in case of HTTP also to
universities. The cluster for IW 4 is a mixture between ISPs and
hosters. While the HTTP measurement shows more ISPs, the TLS
measurement stands out with an AS from Akamai that use IW 4. In
case of GoDaddy, 19.8% (32.7%) of the 137 k HTTP (193 k TLS) hosts
that were announced by AS26496 (704 prefixes) use an IW of 48. We
remark that the number of GoDaddy hosts is ≪ 1% which is why
this IW peak is not clearly visible in Figure 3. Unlike our previous
observed 4 kB IW hosts, these hosts use a static configuration of
IW 48, irrespective of the announced MSS. We found no obvious
reason for these comparably large IWs.
We find a diverse picture of different IW configurations. To com-
pare selected content and (residential) access networks, we show
their IW distribution in Table 3. Content networks are classified
by service-provider IP ranges (e.g., [5]) or the GHost HTTP server
string in case of Akamai. Access networks are classified based on
their reverse DNS record [23]: i) we extract hosts which encode
their IP in the reverse DNS record, i.e., 38.6% (62.5%) of all HTTP
(TLS) IPs. To exclude server networks (e.g., Amazon and Akamai)
we further match their reverse DNS record against a manually cre-
ated ISP domain list and against a keyword list (e.g., “customer”,
“dialin”). This way, we classify 16% (18.1%) of all HTTP (TLS) IPs as
access. While content providers have largely adopted IW 10, older
IW configurations are observed for networks with a potentially
high share of legacy devices (e.g., home routers in access networks).
Besides differences between network types, content networks
enable further per-service or even per-customer IW configuration
(e.g., by Akamai [11]). Assessing these differences is beyond the
scope of this paper since it requires presenting valid URLs hosted by
Akamai to access different (virtualized) services. While our method-
ology cannot assess Akamai’s different services without this prior
knowledge, we used our scanner to manually probe few Akamai
HTTP hosted sites and found different IW configurations (e.g., IW
16 and 32). This is a notable case of per-service IW customization.
5 DISCUSSION AND CONCLUSION
This paper presents the first large-scale measurement of TCP’s
Initial Window (IW) configuration of HTTP/TLS reachable hosts.
Since our method does not require prior knowledge of the target
host, it is applicable to the Internet at large and enabled us to probe
Table 3: Per-service IW distribution [%] clustered by IP range
(servers) or reverse DNS (access). Dominant IWs highlighted.
reachable hosts within the entire IPv4 address space. In light of the
ongoing debate on IW sizes, our study provides an up-to-date view
of the current Internet-wide IW configurations documenting the
slow adherence to RFC recommended changes of the IW.
The main result of our study is a rather network dependent IW
configuration. Since especially service providers can benefit from
larger IWs, their IW 10 adoption (or even larger IWs) is high. We
also noted service specific customizations, e.g., Akamai enables per-
service and even per-customer specific IW configurations. Since
these services are virtualized, analyzing such service (not host)
-specific configurations requires prior knowledge to present valid
host names/URLs—a setting our generalized methodology avoids to
be applicable to the Internet at large. Circumventing this limitation
by probing selected services with manually curated URL lists thus
motivates future work. In contrast, networks with a larger fraction
of legacy and other devices show a much lower IW 10 deployment
and higher shares of older recommended IW sizes (i.e., 1, 2, 4). In
case of Linux, this can be caused by outdated systems since IW 10
was enabled in 2011 [16]. Besides these RFC recommended IWs, we
observed non-RFC configurations such as much larger IWs.
These observations motivate future work, especially in light of
a recent proposal [2] to abandon general IW size recommenda-
tions in favor of per-service customized values. While we already
observe a diverse landscape of different IW settings, this trend to-
wards customized IWs is likely to continue. Monitoring and better
understanding this trend thus motivates future research.
Concerning our methodology, we identified TLS-based scans as a
promising alternative to traditional HTTP-based IW inference meth-
ods. Our ZMap-based implementation further shows that complex
TCP probes going beyond single packet exchanges as needed for
port-scans are feasible in a time-efficient manner. The implementa-
tion as a ZMap module therefore allows daily snapshots of the Inter-
net. To reduce the footprint of Internet-wide scans, we find that al-
ready scanning a random subset of 1% of the IPv4 address space suf-
fices to obtain representative IW distributions. We publish weekly
results on these 1% scans on https://iw.comsys.rwth-aachen.de.
ACKNOWLEDGEMENTS
This work has been funded by the German Research Foundation
(DFG) as part of project B1 within the Collaborative Research Center
(CRC) 1053 – MAKI. We would like to thank the network operators
at RWTH Aachen University, especially Jens Hektor and Bernd
Kohler at RWTH Aachen ITC. We would like to thank Pascal Hein
for enhancing the ZMap module. We further thank the anonymous
IMC reviewers and our shepherd Monia Ghobadi for their valuable
comments to improve this manuscript.
1056818083261255592133115AmazonComcastGoDaddyNat.Int.BackboneCloudﬂareVodafonITAkamaiKoreaTel.0.00.20.40.60.81.0AmountIW1IW2IW4IW10HTTPTLSClusterSizeLarge-Scale Scanning of TCP’s Initial Window
IMC ’17, November 1–3, 2017, London, United Kingdom
REFERENCES
[1] Bernhard Ager, Nikolaos Chatzis, Anja Feldmann, Nadi Sarrar, Steve Uhlig, and
Walter Willinger. 2012. Anatomy of a Large European IXP. In Proceedings of
SIGCOMM ’12, Helsinki, Finland, August 13–17, 2012. 12 pages.
[2] Mark Allman. 2015. Removing TCP’s Initial Congestion Window. Internet-Draft
draft-allman-tcpm-no-initwin-00.txt. IETF Secretariat.
[3] M. Allman, S. Floyd, and C. Partridge. 1998. Increasing TCP’s Initial Window. RFC
2414. RFC Editor. 1–14 pages. http://www.rfc-editor.org/rfc/rfc2414.txt
[4] M. Allman, S. Floyd, and C. Partridge. 2002. Increasing TCP’s Initial Window. RFC
3390. RFC Editor. 1–14 pages. http://www.rfc-editor.org/rfc/rfc3390.txt
[5] Amazon.com, Inc. 2016. Amazon Web Service IP Address Ranges. https://
ip-ranges.amazonaws.com/ip-ranges.json.
[6] M. Belshe, R. Peon, and Ed. M. Thomson. 2013. Hypertext Transfer Protocol Version
2 (HTTP/2). RFC 7540. RFC Editor. 1–96 pages. http://www.rfc-editor.org/rfc/
rfc7540.txt
[7] CDNPlanet. [n. d.]. Initcwnd settings of major CDN providers. https://www.
cdnplanet.com/blog/initcwnd-settings-major-cdn-providers/
[8] J. Chu, N. Dukkipati, Y. Cheng, and M. Mathis. 2013. Increasing TCP’s Initial
Window. RFC 6928. RFC Editor. 1–24 pages. http://www.rfc-editor.org/rfc/
rfc6928.txt
[9] Nandita Dukkipati, Tiziana Refice, Yuchung Cheng, Jerry Chu, Tom Herbert,
Amit Agarwal, Arvind Jain, and Natalia Sutin. 2010. An Argument for Increasing
TCP’s Initial Congestion Window. ACM SIGCOMM CCR 40, 3 (2010), 26–33.
[10] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. 2013. ZMap: Fast
Internet-wide Scanning and Its Security Applications. In Proceedings of USENIX
Conference on Security, Washington, D.C., USA, August 14–16, 2013. 16 pages.
[11] Akamai Community Forum. [n. d.]. Can we change initial CWIN for web experi-
ence products like DSA, Ion? https://community.akamai.com/thread/2694.
[12] Janardhan Iyengar, Ian Swett, Ryan Hamilton, and Alyssa Wilk. 2016. QUIC: A
UDP-Based Secure and Reliable Transport for HTTP/2. Internet-Draft draft-tsvwg-
quic-protocol-02. Internet Engineering Task Force. https://tools.ietf.org/html/
draft-tsvwg-quic-protocol-02 Work in Progress.
[13] V. Jacobson. 1988. Congestion Avoidance and Control. In Proceedings of SIG-
COMM ’88, Stanford, California, USA, August 16–18, 1988. 16 pages.
[14] A. Langley, N. Modadugu, and B. Moeller. 2014. Transport Layer Security (TLS)
False Start. Internet-Draft draft-bmoeller-tls-falsestart-01.txt. IETF Secretariat.
[15] Alberto Medina, Mark Allman, and Sally Floyd. 2005. Measuring the Evolution
of Transport Protocols in the Internet. ACM SIGCOMM CCR 35, 2 (2005), 37–52.
[16] David S. Miller and Nandita Dukkipati. 2011. TCP: Increase the Initial Conges-
tion Window to 10. http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/
commit/?id=442b9635c569fef038d5367a7acd906db4677ae1.
[17] David Naylor, Alessandro Finamore, Ilias Leontiadis, Yan Grunenberger, Marco
Mellia, Maurizio Munafò, Konstantina Papagiannaki, and Peter Steenkiste. 2014.
The Cost of the “S” in HTTPS. In Proceedings of CoNEXT ’17, Sydney, Australia,
December 02–05, 2014. 8 pages.
[18] Jitendra Padhye and Sally Floyd. 2001. On Inferring TCP Behavior. In Proceedings
of SIGCOMM ’01, San Diego, California, USA, August 27–31, 2001. 12.
[19] W. Michael Petullo, Xu Zhang, Jon A. Solworth, Daniel J. Bernstein, and Tanja
Lange. 2013. MinimaLT: Minimal-latency Networking Through Better Security.
In Proceedings of CCS ’13, Berlin, Germany, November 04–08, 2013. 14 pages.
[20] Feng Qian, Alexandre Gerber, Zhuoqing Morley Mao, Subhabrata Sen, Oliver
Spatscheck, and Walter Willinger. 2009. TCP Revisited: A Fresh Look at TCP
in the Wild. In Proceedings of IMC ’09, Chicago, Illinois, USA, November 04–06,
2009. 14 pages.
[21] Sivasankar Radhakrishnan, Yuchung Cheng, Jerry Chu, Arvind Jain, and Barath
Raghavan. 2011. TCP Fast Open. In Proceedings of CoNEXT ’11, Tokyo, Japan,
December 06–09, 2011. 12 pages.
[22] Jan Rüth. 2017. ZMap and Modules. Retrieved 10.08.2017 from https://github.
com/COMSYS/zmap
[23] Quirin Scheitle, Oliver Gasser, Patrick Sattler, and Georg Carle. 2017. HLOC:
Hints-Based Geolocation Leveraging Multiple Measurement Frameworks. In
Proceedings of TMA ’17, Dublin, Irland, June 21–23, 2017. 9 pages.
[24] W. Stevens. 1997. TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast
Recovery Algorithms. RFC 2001. RFC Editor. 1–6 pages. http://www.rfc-editor.
org/rfc/rfc2001.txt