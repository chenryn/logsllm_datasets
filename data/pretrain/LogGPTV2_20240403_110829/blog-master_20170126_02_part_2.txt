query mode: prepared  
number of clients: 8  
number of threads: 8  
duration: 60 s  
number of transactions actually processed: 4810415  
tps = 80171.925111 (including connections establishing)  
tps = 80180.458975 (excluding connections establishing)  
```  
使用range类型还是测试一下那三个值的耗时, 分布就比较均匀了.  
```  
postgres=# explain analyze select province,ip_decimal_segment  from ip_address_pool_3 where ip_decimal_segment @> int8 '1';  
                                                                   QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using ip_address_pool_3_range on ip_address_pool_3  (cost=0.00..862.55 rows=437 width=38) (actual time=0.034..0.035 rows=1 loops=1)  
   Index Cond: (ip_decimal_segment @> 1::bigint)  
 Total runtime: 0.045 ms  
(3 rows)  
postgres=# explain analyze select province,ip_decimal_segment  from ip_address_pool_3 where ip_decimal_segment @> int8 '1123371940';  
                                                                   QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using ip_address_pool_3_range on ip_address_pool_3  (cost=0.00..862.55 rows=437 width=38) (actual time=0.036..0.036 rows=1 loops=1)  
   Index Cond: (ip_decimal_segment @> 1123371940::bigint)  
 Total runtime: 0.052 ms  
(3 rows)  
postgres=# explain analyze select province,ip_decimal_segment  from ip_address_pool_3 where ip_decimal_segment @> int8 '4123371940';  
                                                                   QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using ip_address_pool_3_range on ip_address_pool_3  (cost=0.00..862.55 rows=437 width=38) (actual time=0.058..0.059 rows=1 loops=1)  
   Index Cond: (ip_decimal_segment @> 4123371940::bigint)  
 Total runtime: 0.069 ms  
(3 rows)  
```  
## PostgreSQL第四种解法 透明优化, 函数索引, 无需变更表结构  
1\. PostgreSQL支持函数索引，所以我们不需要改表结构就可以使用函数索引来达到加速的目的。  
例如 :   
```  
CREATE TABLE ip_address_pool (  
  id serial8 primary key,  
  start_ip inet NOT NULL ,  
  end_ip inet NOT NULL ,  
  province varchar(128) NOT NULL ,  
  city varchar(128) NOT NULL ,  
  region_name varchar(128) NOT NULL ,  
  company_name varchar(128) NOT NULL ,  
  start_ip_decimal bigint ,  
  end_ip_decimal bigint   
) ;  
create index idx_ip_address_1 on ip_address_pool using index gist (int8range(start_ip_decimal, end_ip_decimal+1::int8));  
select * from ip_address_pool where int8range(start_ip_decimal, end_ip_decimal+1::int8) @> ?;  
```  
## mac book pro测试
```
全球业务
智能DNS, 性能提升200倍
PG 14, 采用2018 版mac book pro, i5 16g 256g.
create table tbl (id int, loc name, beginid int8, endid int8);
do language plpgsql $$
declare
  x int8 := 100000000;
begin
  for i in 1..1000000 loop
    insert into tbl values (i, (random()*5000)::int::text, x, x+random()*1000) returning endid into x; 
  end loop;
end;
$$;
postgres=# select * from tbl limit 10;
 id | loc  |  beginid  |   endid   
----+------+-----------+-----------
  1 | 234  | 100000000 | 100000295
  2 | 1153 | 100000295 | 100000793
  3 | 4127 | 100000793 | 100001203
  4 | 3287 | 100001203 | 100001450
  5 | 2156 | 100001450 | 100002286
  6 | 1097 | 100002286 | 100002351
  7 | 2302 | 100002351 | 100002625
  8 | 1768 | 100002625 | 100003382
  9 | 39   | 100003382 | 100003630
 10 | 887  | 100003630 | 100004209
(10 rows)
postgres=# select min(beginid), max(endid) from tbl;
    min    |    max    
-----------+-----------
 100000000 | 599684652
(1 row)
postgres=# create index idx_tbl_1 on tbl (beginid,endid);
CREATE INDEX
postgres=# select * from tbl where 599684612 >= beginid and 599684612 = beginid and 599684612  599684612))
(2 rows)
vi t1.sql
\set i random(100000000,599684652)
select * from tbl where :i >= beginid and :i = beginid and :i  599684612::int8;
   id    | loc |  beginid  |   endid   
---------+-----+-----------+-----------
 1000000 | 939 | 599683904 | 599684652
(1 row)
postgres=# explain select * from tbl where int8range(beginid,endid,'[)') @> 599684612::int8;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Index Scan using idx_tbl_2 on tbl  (cost=0.29..2.50 rows=1 width=84)
   Index Cond: (int8range(beginid, endid, '[)'::text) @> '599684612'::bigint)
(2 rows)
vi t2.sql
\set i random(100000000,599684652)
select * from tbl where int8range(beginid,endid,'[)') @> :i::int8;
pgbench -M prepared -n -r -P 1 -f t2.sql -c 8 -j 8 -T 120
pgbench (PostgreSQL) 14.0
transaction type: t2.sql
scaling factor: 1
query mode: prepared
number of clients: 8
number of threads: 8
duration: 120 s
number of transactions actually processed: 7260731
latency average = 0.132 ms
latency stddev = 0.126 ms
initial connection time = 8.498 ms
tps = 60509.892696 (without initial connection time)
statement latencies in milliseconds:
         0.001  \set i random(100000000,599684652)
         0.134  select * from tbl where int8range(beginid,endid,'[)') @> :i::int8;
```
解决全球化部署、多中心业务根据来源IP智能路由到就近机房的智能DNS性能问题, 200倍提升不是梦.    
PG 支持了Range类型, 一个字段可以存储传统数据库2个字段才能存储的数据, 同时比2个字段的between and用法性能提升200倍.  
原因是PG采用了range gist索引, 比btree的大范围链表扫描采用了更有效的访问路径, 二维收敛, 访问block急剧减少, 性能爆炸式提升.  
## 小结  
1\. 在PostgreSQL中，使用range类型后，我们对它建立了GiST的索引，这个索引可以快速的根据用户提供的IP地址定位到包含它的行。效率直接提示了20多倍，QPS从几千达到了接近10万。  
2\. PostgreSQL的range类型除了可以很好的利用它的gist索引作为检索之外, 还可以使用它来做排他约束, 也就是防止数据交叠.  
如果没有这种约束的话，需要锁全表来搞定.     
3\. 使用PostgreSQL存储IP数据的话, 还可以使用掩码, 这样的话就不需要存储两个字段了, 直接存在一个字段就可以.  
当然也可以加一个存储比特位的字段, 使用bit函数来处理包含关系.   
另一种用法是把这个比特运算放到内存中执行, 内存中存储IP比特位以及对应到数据库的记录的ID信息, 获取ID后去数据库查询, 也就是把数据库的范围查询变成主键查询. 也可以提高效率.  
4\. 关于GiST索引的原理，可以参考  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](https://github.com/digoal/blog/blob/master/201612/20161231_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")