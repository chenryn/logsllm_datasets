     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
2.  创建一个容器， `mhs-demo1,`上的`c1`并连接到 `my-net`网络:
    ```
    $ eval $(docker-machine env mhs-demo1)
    $ sudo docker run -i -t --name=c1 --net=my-net  debian /bin/bash
    Unable to find image 'ubuntu:latest' locally
    latest: Pulling from library/ubuntu
    0bf056161913: Pull complete
    1796d1c62d0c: Pull complete
    e24428725dd6: Pull complete
    89d5d8e8bafb: Pull complete
    Digest: sha256:a2b67b6107aa640044c25a03b9e06e2a2d48c95be6ac17fb1a387e75eebafd7c
    Status: Downloaded newer image for ubuntu:latest
     root@2ce83e872408:/#
    ```
3.  执行`ifconfig`找到`c1`的 IP 地址。在这种情况下，是`10.0.0.3` :
    ```
    root@2ce83e872408:/# ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:0a:00:00:03
     inet addr:10.0.0.3  Bcast:0.0.0.0  Mask:255.255.255.0
     inet6 addr: fe80::42:aff:fe00:3/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1
     RX packets:13 errors:0 dropped:0 overruns:0 frame:0
     TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:1066 (1.0 KB)  TX bytes:578 (578.0 B)
    eth1      Link encap:Ethernet  HWaddr 02:42:ac:12:00:02
     inet addr:172.18.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: fe80::42:acff:fe12:2/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:7 errors:0 dropped:0 overruns:0 frame:0
     TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:578 (578.0 B)  TX bytes:578 (578.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
4.  从`c0`(`10.0.0.4`)ping`c1`(`10.0.0.3`)反之亦然:
    ```
    root@2ce83e872408:/# ping 10.0.04
    PING 10.0.04 (10.0.0.4) 56(84) bytes of data.
    64 bytes from 10.0.0.4: icmp_seq=1 ttl=64 time=0.370 ms
    64 bytes from 10.0.0.4: icmp_seq=2 ttl=64 time=0.443 ms
    64 bytes from 10.0.0.4: icmp_seq=3 ttl=64 time=0.441 ms
    ```
## 容器网络接口
**容器网络接口** ( **CNI** )是一个规范，定义了如何使用可执行插件为 Linux 应用容器配置网络接口。CNI 的官方 GitHub 存储库解释了 go 库如何解释实现规范。
容器运行时首先为容器创建一个新的网络名称空间，它确定这个容器应该属于哪个网络以及要执行哪个插件。网络配置采用 JSON 格式，并在容器启动时定义应该为网络执行哪个插件。CNI 实际上是一种不断发展的开源技术，它源自 rkt 网络协议。每个 CNI 插件都被实现为一个可执行文件，并由容器管理系统、docker 或 rkt 调用。
在网络名称空间中插入容器后，即通过将 veth 对的一端连接到容器，将另一端连接到网桥，然后为接口分配一个 IP，并通过调用适当的 IPAM 插件建立与 IP 地址管理一致的路由。
CNI 模型目前被用于 Kubernetes 模型中库比莱人的联网。Kubernetes 是 Kubernetes 节点最重要的组件，它承担了运行容器的负载。
Kubernetes 的 CNI 包在以下 Kubernetes 包中定义:
```
Constants
const (
 CNIPluginName        = "cni"
 DefaultNetDir        = "/etc/cni/net.d"
 DefaultCNIDir        = "/opt/cni/bin"
 DefaultInterfaceName = "eth0"
 VendorCNIDirTemplate = "%s/opt/%s/bin"
)
func ProbeNetworkPlugins
func ProbeNetworkPlugins(pluginDir string) []network.NetworkPlugin
```
下图显示了 CNI 的位置:
![Container network interface](img/00053.jpeg)
# CNI 插件
根据官方 GitHub 资源库([https://github.com/appc/cni](https://github.com/appc/cni))，CNI 插件向网络添加容器所需的参数为:
*   **版本**:调用者正在使用的 CNI 规范的版本(调用插件的容器调用)。
*   **容器 ID** :这是可选的，但是推荐使用，并且定义了当容器处于活动状态时，应该有一个跨管理域的唯一 ID。例如，IPAM 系统可能要求为每个容器分配一个唯一的标识，以便它可以与后台运行的容器正确关联。
*   **网络命名空间路径**:这个代表要添加的网络命名空间的路径，例如`/proc/[pid]/ns/net`或者一个`bind-mount/link`。
*   **网络配置**:JSON 文档描述了一个容器可以加入的网络，将在下一节进行解释。
*   **额外参数**:它允许在每个容器的基础上对 CNI 插件进行粒度配置。
*   **容器**内部接口的名称:是分配给容器的名称，符合 Linux 限制，接口名称存在。
取得的成果如下:
*   **分配给接口**的 IP:这是根据要求分配给网络的 IPv4 地址或 IPv6 地址。
*   **DNS 名称服务器列表**:这是一个按优先级排序的 DNS 名称服务器地址列表。
## 网络配置
网络配置为 JSON 格式，可以存储在磁盘上，也可以由容器运行时从其他来源生成。JSON 中的以下字段很重要，如下所述:
*   **cniVersion(字符串)**:这个配置符合的是 CNI 规范的语义版本 2.0。
*   **名称(字符串)**:是网名。它在主机(或其他管理域)上的所有容器中是唯一的。
*   **类型(字符串)**:指的是 CNI 插件可执行文件的文件名。
*   **ipMasq(布尔值)**:可选，在主机上设置 IP 伪装，因为主机必须充当无法路由到分配给容器的 IP 的子网的网关。
*   **ipam** :带有 ipam 特有值的词典。
*   **类型(字符串)**:指的是 IPAM 插件可执行文件的文件名。
*   **路由(列表)**:列出子网(用 CIDR 符号表示)，CNI 插件应该确保通过网络路由可以到达这些子网。每个条目都是一个字典，包含:
    *   **dst(字符串)**:CIDR 符号中的子网
    *   **gw(字符串)**:是要使用的网关的 IP 地址。如果未指定，则假定子网的默认网关(由 IPAM 插件确定)。
特定于插件的 OVS 的配置示例如下:
```
{
  "cniVersion": "0.1.0",
  "name": "pci",
  "type": "ovs",
  // type (plugin) specific
  "bridge": "ovs0",
  "vxlanID": 42,
  "ipam": {
    "type": "dhcp",
    "routes": [ { "dst": "10.3.0.0/16" }, { "dst": "10.4.0.0/16" } ]
  }
}
```
## IP 分配
CNI 插件为接口分配一个 IP 地址，并为接口安装必要的路由，因此它为 CNI 插件提供了极大的灵活性，许多 CNI 插件内部具有相同的代码来支持多种 IP 管理方案。
为了减轻 CNI 插件的负担，定义了第二类插件**IP 地址管理插件** ( **IPAM** )，它确定接口 IP/子网、网关和路由，并将该信息返回给主插件应用。IPAM 插件通过网络配置文件中定义的协议`ipam`部分或本地文件系统中存储的数据获取信息。
## IP 地址管理界面
IPAM 插件由运行可执行文件的调用，可执行文件在预定义的路径中搜索，并由 CNI 插件通过`CNI_PATH`指示。IPAM 插件接收来自这个可执行文件的所有系统环境变量，这些变量被传递给 CNI 插件。
IPAM 通过 stdin 接收网络配置文件。成功由一个零返回代码和下面的 JSON 表示，它被打印到 stdout(在`ADD`命令的情况下):
```
{
  "cniVersion": "0.1.0",
  "ip4": {
    "ip": ,
    "gateway": ,  (optional)
    "routes":     (optional)
  },
  "ip6": {
    "ip": ,
    "gateway": ,  (optional)
    "routes":     (optional)
  },
  "dns":      (optional)
}
```
以下是与 CNI 一起运行 Docker 网络的示例:
1.  首先，安装 Go Lang 1.4+和 jq(命令行 JSON 处理器)来构建 CNI 插件:
    ```
    $ wget https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz
    $ tar -C /usr/local -xzf go1.5.2.linux-amd64.tar.gz
    $ export PATH=$PATH:/usr/local/go/bin
    $ go version
    go version go1.5.2 linux/amd64
    $ sudo apt-get install jq
    ```
2.  克隆官方 CNI GitHub 资源库:
    ```
    $ git clone https://github.com/appc/cni.git
    Cloning into 'cni'...
    remote: Counting objects: 881, done.
    remote: Total 881 (delta 0), reused 0 (delta 0), pack-reused 881
    Receiving objects: 100% (881/881), 543.54 KiB | 313.00 KiB/s, done.
    Resolving deltas: 100% (373/373), done.
    Checking connectivity... done.
    ```
3.  我们现在将创建一个`netconf`文件来描述网络:
    ```
    mkdir -p /etc/cni/net.d
    root@rajdeepd-virtual-machine:~# cat >/etc/cni/net.d/10-mynet.conf {
    >  "name": "mynet",
    >  "type": "bridge",
    >  "bridge": "cni0",
    >  "isGateway": true,
    >  "ipMasq": true,
    >  "ipam": {
    >    "type": "host-local",
    >    "subnet": "10.22.0.0/16",
    >    "routes": [
    >      { "dst": "0.0.0.0/0" }
    >    ]
    >  }
    >}
    > EOF
    ```
4.  构建 CNI 插件:
    ```
    ~/cni$ ./build