lpbcast algorithm and for our adaptive algorithm in equiv-
alent experimental runs. As expected, the atomicity ﬁg-
ure of lpbcast drops when the resources cannot sustain the
input load while the adaptive mechanisms allows to pre-
serve a satisfactory atomicity ﬁgure. It is also interesting to
note that, as expected, the atomicity values are here slightly
higher than in the simulations where all nodes decrease their
buffer space. Namely, with buffers available for 60 mes-
sages we obtain an atomicity of 87% with simulation and of
92% with experiment. This illustrates that the algorithm
effectively uses all the buffers available locally, thus the
atomicity values beneﬁt from the buffer capacity available
at nodes that did not have their resources decreased.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:57:40 UTC from IEEE Xplore.  Restrictions apply. 
 100
 80
 60
 40
 20
i
s
r
e
v
e
c
e
r
f
o
%
e
g
a
r
e
v
A
 0
 180
lpbcast
adaptive
 150
 120
 90
 60
 30
Buffer size (msg)
)
s
/
g
s
m
(
e
t
a
R
 30
 25
 20
 15
 10
 5
 0
Real change
Ideal change
 0
 50  100  150  200  250  300  350  400  450
Time (s)
(a) Average number of receivers.
(a) Allowed Rates.
)
%
i
(
s
r
e
v
e
c
e
r
f
o
%
5
9
>
o
t
s
e
g
a
s
s
e
M
 100
 80
 60
 40
 20
 0
 180
lpbcast
adaptive
 150
 120
 90
 60
 30
Buffer size (msg)
(b) Number of atomically delivered mes-
sages.
Figure 8. Reliability degradation.
5 Related Work
Gossip-based algorithm have recently been an active
area of research [3, 4, 9, 8, 6] and several optimizations
have been proposed. These optimizations target different
goals and could be combined with our proposal, as we dis-
cuss below.
An efﬁcient buffering technique has been proposed in
[10] in the context of Bimodal multicast [1] to determine
which group member should buffer messages on a long-
term for recovery purposes. Each message, is associated
with a ﬁxed number of bufferers (this number depends on
the size of the system and the probability of node failure)
responsible for buffering a message for recovery purposes.
The bufferers can be easily identiﬁed by hashing the mes-
sage identiﬁer. Nodes which need to recover from a mes-
sage loss contact directly bufferers. Although this technique
limits the amount of buffering required for a message, it tar-
gets recovery phases of gossip-based algorithms. Moreover,
it assumes that each node has a full knowledge of the group
membership since it might need to contact any node. In-
stead, our approach targets the buffering requirements and
adaptation for the gossip-based algorithms to succeed in the
ﬁrst place. Moreover, our mechanisms could be applied to
)
%
i
(
s
r
e
v
e
c
e
r
f
o
%
5
9
>
o
t
s
e
g
a
s
s
e
M
 100
 80
 60
 40
 20
 0
lpbcast
adaptive
 0
 50  100  150  200  250  300  350  400  450
Time (s)
(b) Atomicity.
Figure 9. Dynamic Buffer Size
a gossip-based algorithm relying on a partial membership
knowledge on each node.
Buffering management has also been addressed in [7] to
efﬁciently purge gossip buffers and garbage collect mes-
sages. This approach purges messages according to their
age, which is determined by the number of gossip rounds
each instance of a message has been gossiped. The age of
a message proves to be a good estimate of level of prop-
agation of a message. The goal of the work in [7] is to
provide a good heuristic to efﬁciently manage buffers but
no adaptation to varying resources availability is used there.
However, in the approach described in this paper, we use an
age-based heuristic to purge buffers.
Instead of reducing the sender’s rate, if slower senders
are expected to eventually recover, it is possible to repair
lost messages from a log [14]. This has the inconvenient of
requiring possibly very large buffers at logging servers and
to deliver some messages much later to some processes.
Network congestion also results in correlated message
loss thus degrading reliability. This is a potential weakness
of the approach since, with gossip-based algorithms, the
network usage is notably high in comparison with determin-
istic reliable broadcast algorithms. The usage of message
semantics to discard obsolete messages in order to ensure
reliability for recent messages has also been proposed [11].
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:57:40 UTC from IEEE Xplore.  Restrictions apply. 
[2] P. Eugster, R. Guerraoui, and C. Damm. On objects
and events.
In Proceedings of the Conference on Object-
Oriented Programming Systems, Languages and Applica-
tions (OOPSLA 2001), Oct. 2001.
[3] P. Eugster, R. Guerraoui, S. Handrukande, A.-M. Kermarrec,
and P. Kouznetsov. Lighweight probabilistic broadcast. In
Proceedings of IEEE Intl. Conf. on Dependable Systems and
Networks (DSN’2001), 2001.
[4] A. Ganesh, A.-M. Kermarrec, and L. Massoulie. Peer-to-
peer membership management for gossip-based protocols.
IEEE Transactions on Computers, Feb, 2003.
[5] K. Guo. Scalable Message Stability Detection Protocols.
PhD thesis, Cornell University, Computer Science, May
1998.
[6] I. Gupta, R. van Renesse, and K. Birman. Scalable fault-
tolerant aggregation in large process groups. In Intl. Conf.
Networked Computing and Applications (NCA’2001), 2001.
[7] P. Kouznetsov, R. Guerraoui, S. Handurukande, and A.-M.
Kermarrec. Reducing noise in gossip-based reliable broad-
cast. In Proceedings of IEEE Intl. Symposium on Reliable
Distributed Systems (SRDS 2001), New Orleans, USA, Oct.
2001.
[8] M. Lin, K. Marzullo, and S. Masini. Gossip versus determin-
istic ﬂooding:
low-message overhead and high-reliability
for broadcasting on small networks. In Proceedings of Intl.
Symposium on Distributed Computing (DISC 2000), Toledo,
Spain, Oct. 2000.
[9] M.-J. Lin and K. Marzullo. Directional gossip: Gossip in a
wide area network. Technical Report CS1999-0622, Univer-
sity of California, San Diego, Computer Science and Engi-
neering, June 16, 1999.
[10] O. Ozkasap, R. van Renesse, K. Birman, and Z. Xiao. Ef-
ﬁcient buffering in reliable multicast protocols. In Proceed-
ings of Intl. Workshop on Networked Group Communication,
Nov. 1999.
[11] J. Pereira, L. Rodrigues, R. Oliveira, and A.-M. Kermarrec.
Probabilistic semantically reliable multicast.
In Proceed-
ings of Intl. Conf. Networked Computing and Applications
(NCA’2001), 2001.
[12] D. Skeen. Vitria’s Publish-Subscribe Architecture: Publish-
Subscribe Overview. http://www.vitria.com, 1998.
[13] R. Strom, G. Banavar, T. Chandra, M. Kaplan, K. Miller,
B. Mukherjee, D. Sturman, and M. Ward. Gryphon: An
information ﬂow based approach to message brokering. In
Proceedings of Intl. Symposium on Software Reliability En-
gineering (ISSRE ’98), Nov. 1998.
[14] Q. Sun and D. Sturman. A gossip-based reliable multicast
for large-scale high throughput application. In Proceedings
of IEEE Intl. Conf. on Dependable Systems and Networks
(DSN’2000), 2000.
Recognizing that the probability of the message being deliv-
ered to all processes grows with the size of the initial set of
processes receiving the message, it has been suggested that
an initial optimistic broadcast phase is used [1]. The gos-
sip phase is then done by negative acknowledgments thus
saving network bandwidth. Finally, given some knowledge
about the network topology, it is possible to better spread
network trafﬁc across physical links, thus optimizing the us-
age of wide area networks [9].
6 Concluding Remarks
This paper presents a novel adaptation mechanism for
gossip-based algorithms. This mechanism allows every
node to adjust its gossiping rate according to the resources
available within other nodes of the system and also to ad-
just the message emission rate according to the global con-
gestion. As a result, the reliability properties of the broad-
cast service is increased. Our scheme allows gossip-based
broadcast algorithms to be adapted to settings where nodes
have heterogeneous resources that may change dynami-
cally. In such settings, it is impossible to adjust the parame-
ters of the gossip algorithm off-line, before the algorithm is
deployed. Our mechanism is scalable, as it does not require
any node to explicitly interact with or collect information
about other nodes in the system. Instead, the dissemination
of the information required to perform adaptation is embed-
ded in the normal gossip of data messages. Our mechanism
was validated experimentally, using both simulations and an
implementation executing in a network of 60 workstations.
It is important to notice that the goal of our adaptation
mechanism is not to recover from past message omissions
but prevent future ones. That is why we advocate the need
for quick adjustment of senders rate. Additional techniques
have to be deployed to recover from lost messages.
Furthermore, our mechanism adapts to the node with the
smallest amount of resources. It could also be extended to
consider alternative criteria. For instance, the algorithm can
be easily extended to compute not only the smallest, but the
 smaller buffers in the system (or the  smaller buffers
above a minimum threshold) to prevent a single node from
affecting the performance of the whole group.
Acknowledgment
We are very grateful to Petr Kouznetsov and Patrick Eugster
for their support in developing the lpbcast and its prototype.
References
[1] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu,
and Y. Minsky. Bimodal multicast. ACM Transactions on
Computer Systems, 17(2):41–88, May 1999.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:57:40 UTC from IEEE Xplore.  Restrictions apply.