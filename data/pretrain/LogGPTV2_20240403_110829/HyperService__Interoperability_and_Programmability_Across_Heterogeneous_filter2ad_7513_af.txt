Mean
∼4
0.2598
4.1529 ∼67
0.7295 ∼12
1.0511 ∼17
6.1933
Federated
Computing
%
Mean
∼15
1.095
4.2058 ∼60
0.7592 ∼11
0.9875 ∼14
7.0475
HSL Compilation
Session Creation
Action/Status Staking
Proof Retrieval
Total
Table 3: End-to-end dApp execution latency on HyperSer-
vice, with profiling breakdown. All times are in seconds.
Figure 10: The throughput of the NSB, measured as the total
size of committed certificates on the NSB per second.
5.3.1 End-to-End Latency
We evaluated all three applications mentioned in § 5.2 and reported
their end-to-end execution latency introduced by HyperService in
Table 3. The reported latency includes HSL program compiling,
dApp-VES session creation, and (batched) NSB action staking and
proof retrieval during the UIP protocol exchange. All reported
times include the networking latency across the global Internet.
Each datapoint is the average of more than one hundred runs.
We do not include the latency for actual on-chain execution since
the consensus efficiency of different blockchains varies and is not
controlled by HyperService. We also do not include the time for
ISC insurance claims in the end-to-end latency because they can
be done offline anytime before the ISC expires.
These dApps show similar latency profiling breakdown, where
the session creation is the most time consuming phase because it
requires handshakes between the dApp client and VES, and also
includes the time for ISC deployment and initialization. The Cryp-
toAsset dApp has a much lower HSL compilation latency since its
operation only involves one smart contract, whereas the rest two
dApps import three contracts written in Go, Vyper, and Solidity. In
each dApp, all its NSB-related operations (e.g., action/status stak-
ing and proof retrievals) are bundled and performed in a batch for
experiment purpose, even though all certificates required for ISC
arbitration have been received via off-chain channels. The sizes of
actions and proofs for three dApps are different since their executa-
bles contain different number of transactions.
5.3.2 NSB Throughput and HyperService Capacity
The throughput of the NSB affects aggregated dApp capacity on
HyperService. In this section, we report the peak throughput of
the currently implemented NSB. We stress tested the NSB by ini-
tiating up to one thousand dApp clients and VES nodes, which
concurrently dispatched action and status staking to the NSB. We
batched multiple certificate stakings by different clients into a single
 0 200 400 600 800 1000 1200 0 20 40 60 80 100 120 140Throughput (KB/s)Batch SizeCert. Size 200 BytesCert. Size 250 BytesCert. Size 500 BytesNSB-transaction, so that the effective certificate-staking through-
put perceived by those clients can exceed the consensus limit of the
NSB. Figure 10 plots the NSB throughput, measured as the total size
of committed certificates by all clients per second, under different
certificate and batch sizes. The results show that as the batch size
increases, regardless of the certificate sizes, the NSB throughput
converged to about 1000 kilobytes per second. Given any certificate
size, further enlarging the batch size cannot boost the throughput,
whereas the failure rate of certificate staking increases, indicating
that the NSB is fully loaded.
Given the above NSB throughput, the actual dApp capacity of the
HyperService platform further depends on how often the communi-
cation between dApp clients and VESes falls back to the NSB. In par-
ticular, each dApp-transaction spawns at most six NSB-transactions
(five action stakings and one status staking), assuming that the
off-chain channel is fully nonfunctional (zero NSB transaction if
otherwise). Thus, the lower bound of the aggregate dApp capacity
on HyperService, which would be reached only if all off-chain chan-
nels among dApp clients and VESes were simultaneously broken, is
about 170000
transactions per second (TPS), where s is the (average)
size (in bytes) of a certificate. This capacity and the TPS of most
PoS production blockchains are of the same magnitude. Further,
considering (i) the NSB is horizontally shardable at the granularity
of each underlying blockchain (§ 4.1.3) and (ii) not all transactions
on an underlying blockchain are cross-chain related, we anticipate
that the NSB will not become the bottleneck as HyperService scales
to support more blockchains in the future.
s
6 DISCUSSION
In this section, we discuss several aspects that have not been thor-
oughly addressed in this paper, and present our vision for future
work on HyperService and its impact.
6.1 Programming Framework Extension
HSL is a high-level programming language designed to write cross-
chain dApps under the USM programming model. The language
constructs provided by HSL allow developers to directly specify
entities, operations, and dependencies in HSL programs. To ensure
the determinism of operations, which is an important property
for the NSB and the ISC to determine the correctness or viola-
tion of dApp executions, the language constructs do not include
control-flow operations such as conditional branching, looping, and
calling/returning from a procedure. Additionally, dynamic trans-
action generation is also not supported by HSL, since it has led
to a new class of bugs known as re-entrancy vulnerabilities [55].
These design choices are consistent with the recent blockchain
programming languages that emphasize on safety guarantees, such
as Move [22] for Facebook’s Libra blockchain.
In future work, we plan to extend the design of the UIP protocol
to support dynamic transaction graphs, which allows conditional
execution of operations and certain degree of indeterminism of
operation executions, such as repeating an operation for a specific
times based on the values of state variables computed from previous
operations. With those extensions, we are able to implement control-
flow operations into HSL and provide both static and dynamic
verification to ensure the correctness of dApps.
6.2 Cross-Shards and Cross-Worlds
HyperService is motivated by heterogeneous blockchain interoper-
ation. Thanks to its generic design, HyperService can also enable
cross-shard smart contracting and transactions for sharded block-
chain platforms (e.g., OmniLedger [44] and RapidChain [60]). On the
one hand, the HSL programming framework is blockchain-neutral
and extensible. Thus, writing dApps that involve smart contracts
and accounts on different blockchains is conceptually identical
to writing dApps that operate contracts and accounts on differ-
ent shards. In fact, given that most of those sharded blockchains
are homogeneously sharded (i.e., all shards have the same format
of contracts and accounts), developing and compiling cross-shard
dApps using HSL are even simpler than cross-chain dApps. On the
other hand, realizing UIP on sharded blockchains also requires less
overhead since maintaining an NSB for all (homogeneous) shards
is more lightweight than maintaining an NSB supporting hetero-
geneous blockchains. In fact, many sharded blockchain platforms
already maintain a dedicated global blockchain as their trust anchor
(e.g., the identity chain of OmniLedger [44] and the beacon chain
of Harmony [2]), to which the NSB functionality can be ported.
Additionally, we envision that the fully connected Web 3.0 should
also include centralized platforms (i.e., Cloud) to compensate for
functionality (e.g., performing computationally intensive tasks) that
is difficult to execute on-chain. We recognize that two additional
capabilities, with minimal distribution of their operation models,
are required from those centralized platforms to make them compat-
ible with HyperService: (i) any public state they publish should be
coupled with verifiable proofs to certify the correctness of the state
(where the definition of correctness could be application-specific),
and (ii) all published state should have the concept of finality. With
such capabilities, dApps on HyperService can trustlessly incorpo-
rate the state published by those centralized platforms.
6.3 Interoperability Service Providers
VESes play vital roles on HyperService platform. We envision that
VESes would enter the HyperService ecosystem as Cross-chain
Interoperability Service Providers (CSPs) by providing required
services to support cross-chain dApps, such as compiling HSL pro-
grams into transaction dependency graphs and speaking the UIP
protocol. This vision is indeed strengthened by the practical archi-
tectures of production blockchains, where all peer-to-peer nodes
evolve into a hierarchy of stakeholders and a number of organi-
zations operate (without necessarily owning) most of the mining
power for Proof-of-Work blockchains or/and stakes for Proof-of-
Stake blockchains (whether such a hierarchical architecture under-
mines decentralization is debatable, and beyond the scope of Hy-
perService). Those organizations are perfectly qualified to operate
as CSPs since they have good connectivity to multiple blockchains
and maintain sufficient token liquidity to support insurance staking,
contract invocation, and token transfers that are required in a wide
range of cross-chain dApps.
CSPs (VESes) could be found via a community-driven directory
(similar to Tor’s relay directories [18, 31]), which we envision to be
an informal list of CSPs. Each CSP has its own operation models,
including the set of reachable blockchains, service fees charged
for correct dApp executions, and insurance plans to compensate
for CSP-induced dApp failures. Developers have full autonomy
to select CSPs based on their dApp requirements. Since all dApp
execution results are publicly verifiable, it is possible to build a CSP
reputation system to provide a valuable metric for CSP selection.
CSPs thus misbehave at their own risk.
Because a CSP may wish to limit its staked funds at risk in the
ISC, a dApp may be too large for any single CSP. Alternatively, a
dApp may span a set of blockchains such that no single CSP has
reachability to all of them. In such cases, a cross-chain dApp could
be co-executed by a collection of VESes. By design, HyperService
allows multi-VES executions since the UIP protocol does not restrict
the number of VESes or dApp clients.
We envision the industrial impact of HyperService to be the
birth of a CSP-formed liquidity network interconnected by the UIP
protocol, powering a wide range of cross-chain dApps.
6.4 Complete Atomicity for dApps
In the context of cross-chain applications, dApps should be treated
as first-class citizens because the success or failure of any individual
transaction cannot fully decide the state of a dApp. HyperService
follows this design philosophy by providing security guarantees
at the granularity of dApps. However, the current version of Hy-
perService is not fully dApp-atomic since UIP is unable to revert
any state update to smart contracts when a dApp terminates pre-
maturely. We recognize this as a fundamental challenge due to the
finality guarantee of blockchains.
To deliver full dApp-atomicity on HyperService, we propose the
concept of stateless smart contracts where contracts are able to their
load state from the blockchain before execution. As a result, even
if the state persistent on block Bn for a smart contact C eventually
becomes dirty due to dApp failure, subsequent dApps can still load
clean state for the contract C from a block (prior to Bn) agreed by all
parties. Although this design imposes additional requirements on
underlying blockchains, it is practical and deliverable using “layer-
two” protocols where smart contract executions could be decoupled
from the consensus layer, for instance, via the usage of Trusted
Execution Environment (e.g., Intel SGX [30] and Keystone [48]).
6.5 Privacy-Preserving Blockchains
The primary challenge of supporting privacy-preserving block-
chains on HyperService is the lack of a generic abstraction for
those systems. In particular, various designs have been proposed
to enhance blockchain privacy, such as encrypting blockchain
state [29], obfuscating and mixing transactions via cryptography
signature [58]. As a result, none of those blockchains can be ab-
stracted as generic programmable state machines. Therefore, our ap-
proach towards interoperating privacy-preserving blockchains will
be dApp-specific, such as relying on fast zero-knowledge proofs [25]
to allow dApps to certify the state extracted from those blockchains.
7 RELATED WORK
Blockchain interoperability is often considered as one of the pre-
requisites for the massive adoption of blockchains. The recent
academic proposals have mostly focused on moving tokens be-
tween two blockchains via trustless exchange protocol, includ-
ing side-chains [21, 36, 41], atomic cross-chain swaps [5, 38], and
cryptocurrency-backed assets [61]. However, programmability, i.e.,
smart contracting across heterogeneous blockchains, is largely ig-
nored in those protocols.
In industry, Cosmos [7] and Polkadot [12] are two notable projects
that advocate blockchain interoperability. They share the similar
spirit: each of them has a consensus engine to build blockchains (i.e.,
Tendermint [17] for Cosmos and Substrate [16] for Polkadot), and
a mainchain (i.e., the Hub in Cosmos and RelayChain for Polkadot)
to bridge individual blockchains. Although we do share the similar
vision of “an Internet of blockchains”, we also notice two notable
differences between them and HyperService. First and foremost,
the cross-chain layer of Cosmos, powered by its Inter-blockchain
Communication Protocol (IBC) [15], mainly focuses on preliminary
network-level communications. In contrast, HyperService proposes
a complete stack of designs with a unified programming framework
for writing cross-chain dApps and a provably secure cryptography
protocol to execute dApps. Further, at the time of writing, the most
recent development of Cosmos and industry adoption are heading
towards homogeneity where only Tendermint-powered blockchains
are interoperable [1]. This is in fundamental contrast with Hyper-
Service where the blockchain heterogeneity is a first-class design
requirement. Polkadot proceeds relatively slower than Cosmos:
Substrate is still in early stage [16].
Existing blockchain platforms such as Ethereum [59] and Nebu-
las [10] allow developers to write contracts using new languages
such as Solidity [14] and Vyper [19] or a tailored version of the
existing languages such as Go, Javascript, and C++. Facebook re-
cently released Move [22], a programming language in their block-
chain platform Libra, which adopts the move semantics of Rust
and C++ to prohibit copying and implicitly discarding coins and
allow only move of the coins. To unify these heterogeneous pro-
gramming languages, we propose HSL that has a multi-lang front
end to parse those contacts and convert their types to unified types.
Although there exist domain-specific languages in a variety of
security-related fields that have a well-established corpus of low
level algorithms, such as secure overlay networks [42, 49], net-
work intrusions [23, 56, 57], and enterprise systems [33, 34], these
languages are explicitly designed to solve their domain-specific
problems, and cannot meet the needs of the unified programming
framework for writing cross-chain dApps.
8 SECURITY THEOREMS
In this section, we present the main security theorems for UIP, and
rigorously prove them using the UC-framework [28].
8.1 Ideal Functionality FUIP
We first present the cryptography abstraction of the UIP in form of
an ideal functionality FUIP. The ideal functionality articulates the
correctness and security properties that HyperService wishes to
attain by assuming a trusted entity. The detailed description of FUIP
is given in Figure 11. Below we provide additional explanations.
Session Setup. Through this interface, a pair of parties (Pa, Pz)
(e.g., a dApp client and a VES) requests FUIP to securely execute a
dApp executable. They provide the executable in form of a transac-
tion dependency graph GT , as well as the correctness arbitration
code contract. As a trusted entity, FUIP generates keys for both
Pz
sid , Sig
Pa
sid ) to both parties
1 Init: Data := ∅
2 Upon Receive SessionCreate(GT , contract, Pa, Pz):
generate the session ID sid ← {0, 1}λ and keys for both parties
3
send Cert([sid, GT , contract]; Sig
4
halt until both parties deposit sufficient fund, denoted as stake
5
start a blockchain monitoring daemon for this session
6
set an expiration timer timer for executing the contract term
7
for T ∈ GT : initialize the annotations for T