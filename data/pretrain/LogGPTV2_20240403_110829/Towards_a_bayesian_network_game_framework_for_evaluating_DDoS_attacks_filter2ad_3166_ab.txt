the network state changes after the defender takes mitigation
actions, diﬀerent variables are deﬁned to reﬂect this change.
The second and third groups of variables describe possible
Figure 1: DDoS attack and defense scenario for an
enterprise network
and Lee proposed a defense system against DDoS attacks
and analyzed its performance in a game-theoretic context.
Khirwadkar et al. developed a repeated game model based
on the ﬁctitious play process for pushback-based DDoS de-
fense [7]. The key idea of their approach is that each player
estimates the mixed strategy of the opponent’s actions based
on her previous observations, and then plays the pure strat-
egy that is the best response accordingly. In [30], Yan and
Eidenbenz proposed a truthful mechanism to provide eco-
nomic incentives to ISPs to defend against DDoS attacks in
a noncooperative environment.
Besides pushback and ﬁrewall ﬁltering, client puzzle is an-
other DoS/DDoS defense mechanism, in which a client has
to solve a computational puzzle before the server commits
resources to deal with his or her request. Game theory has
also been applied to study this type of protection against
DDoS attacks [2, 6]. In this work, we do not consider de-
fense based on client puzzles, although they in principle can
be incorporated into our evaluation framework.
3. MOTIVATION
In this work, we consider DDoS attacks that target a high-
value server (e.g., a DNS server or an HTTP server) in an
enterprise network. Figure 1 illustrates an DDoS attack and
defense scenario for an enterprise network with a critical
webserver, S. In this example, the attacker acquires a num-
ber of bots to send DDoS attack traﬃc to server S. In the
enterprise network, the defender (i.e., network administra-
tor) monitors the utilization level of the link from ISP to ﬁre-
wall F0, and also the utilization level of the webserver. Once
the defender infers that an attack is taking place, she takes
actions to counter against it, including adding extra band-
width to external link ISP → F0, blocking suspicious traﬃc,
and limiting the maximum traﬃc rate from each source.
To analyze the strategies of both the attacker and the
defender, we build an evaluation framework based on semi
network-form games, which were previously proposed to model
pilots’ behaviors during mid-air encounters [10]. The semi
network-form game model uses a Bayesian network for prob-
abilistic inference of uncertain system states. Nodes in the
Bayesian network are classiﬁed into two categories: chance
nodes, which represent states of non-human components,
and decision nodes, each of which describes how a player
makes a decision based on her observed system states. Con-
ditional probability distributions of chance nodes are prede-
ﬁned according to the physical law or mechanism that gov-
erns dependencies among system states. In a player’s think-
ing process, she evaluates possible outcomes of the game
(i.e., system states) due to a certain decision she could have
made, based on a predeﬁned utility function. Due to dif-
ﬁculty of obtaining a closed-form formula of the posterior
555Table 1: Summary of system parameters
Var. Meaning
A
J
L
X bf
h
X af
h
Gh
Obf
d
D
Ysb
Yrl
Attacker’s decision
State of attacker’s traﬃc arriving at external link
State of external legitimate users’ traﬃc
Output of foreground traﬃc from h before D’s move
Output of foreground traﬃc from h after D’s move
Rate of background traﬃc traversing resource h
Defender’s observation before D’s move
Defender’s mitigation parameters
Output of foreground traﬃc after static blocking
Output of foreground traﬃc after rate limiting
actions of the attacker and the defender, respectively. In the
following, we shall explain these system variables in detail.
Network state. We ﬁrst deﬁne parameters to character-
ize the system state in an enterprise network. Let C denote
the set of resources vulnerable to DDoS attacks on the path
of inbound attack traﬃc to the target server in the enterprise
network. We call set C critical resource set and a resource
in C a critical resource. A non-critical resource is assumed
to have suﬃcient capacity so that no traﬃc is dropped due
to it. In the example shown in Figure 1, we simply assume
that C contains only the link ISP → F0 and the server.
There are partial ordering relationships among some crit-
ical resources.
In the previous example, an attack packet
must traverse ﬁrewall F0 before arriving at the server. In
this work, we assume that there is no conﬂict due to such
ordering relationships. That is to say, if an attack packet has
to use resource h1 before resource h2, no other attack packet
should use resource h2 before resource h1. This is a reason-
able assumption because in an enterprise network setting,
there is usually a unique path from the perimeter ﬁrewall to
the server. Such partial ordering constraint prevents cycles
in the Bayesian graphical model described later.
There are two types of traﬃc that traverses a critical re-
source:
foreground traﬃc refers to those packets that are
destined to the server, and background traﬃc means those
that do not go to the server. For critical resource h, we also
introduce two vector variables: X bf
h to describe
the output state of foreground traﬃc from the resource be-
fore and after the defender’s mitigation action, respectively.
Each of these variables is a vector with the following repre-
sentation:
h and X af
X = (cid:104)X[1], X[2], X[3](cid:105),
(1)
where X[1] denotes the utilization level of the resource, X[2]
and X[3] denote the states of attack traﬃc and legitimate
users’ traﬃc destined to the server, respectively.
In this work, we focus on application-level DDoS attacks.
Hence, we measure the traﬃc rate in terms of the number of
transactions per second. To simplify our analysis later, we
assume that a transaction has a constant number of packets
and contains a constant number of bytes. Another impor-
tant issue is how to represent the state of traﬃc traversing
a resource. One approach is representing the traﬃc state
as the aggregate number of transactions per second. This
method, however, suﬀers when modeling the eﬀect of the de-
fender’s mitigation. For example, the rate limiting scheme
is usually performed per individual source IP, and aggregat-
ing the transaction rates over all sources (either malicious
or benign) thus loses the information at the granularity rele-
vant to rate limiting. Hence, we need to have full knowledge
on the rate of each ﬂow. We thus let X[2] and X[3] be a
total legitimate users’ traﬃc rate is(cid:80)size(L)
rate vector in which each element represents the rate of a
ﬂow. For clarity, we also use size(X[i]), where i = 2 or 3,
to denote the number of ﬂows in X[i]. To model legitimate
traﬃc, we use rate vector L to characterize transactions gen-
erated from legitimate users. Hence, the number of source
IP addresses in legitimate transactions is size(L) and the
A critical resource such as the link ISP → F0 is usually
used not just for the traﬃc destined to the server. Hence,
Gh is used to denote the rate of background traﬃc that
traverses h. This rate is represented at the level that is
relevant to resource h.
In the example, for the link from
ISP → F0, the background traﬃc is represented in terms of
bytes per second, rather than transactions per second.
k=1 L[k].
Attacker’s move space. The goal of the attacker is to
deplete the resources at the target. As now DDoS attacks
are often launched with automatic software such as Stachel-
draht [23], which requests bots to send attack traﬃc with
the same rate, we assume that the attacker picks the same
rate for each bot. Hence, the action space of the attacker
can be characterized with a tuple:
A = (cid:104)A[1], A[2](cid:105),
(2)
where A[1] denotes the number of bots used in the attack,
and A[2] the transaction rate from each bot. When the
attack traﬃc from all bots reach the external link, its traﬃc
is denoted as a rate vector J .
Defender’s move space. The defender monitors the
network state to detect ongoing DDoS attacks. The de-
fender’s observed network state obviously depends on the
monitoring scheme deployed. We consider the following
monitoring scheme: ﬁrst, the defender monitors the uti-
lization level of every resource in the critical resource set
S; second, the defender monitors two statistics of the traf-
ﬁc destined to the server at the ﬁrewall, number of unique
source IPs and average transaction rate from each source
IP. We deﬁne the defender’s observed network state before
her mitigation action, Obf
d [i], for i = 1, 2, 3, 4,
represents the utilization level of the external link, the uti-
lization level of the server, the number of source IPs destined
to the server, and the average transaction rate per ﬂow, re-
spectively.
d , where Obf
Once the defender infers that a DDoS attack is going on
based on the network state observed, her potential moves
include requesting the upstream ISP to increase the down-
link bandwidth (bandwidth inﬂation), blocking traﬃc from
suspicious source IP addresses (static blocking), and limit-
ing the maximum transaction rate allowed per source IP
address (rate limiting). As these actions can be taken si-
multaneously, we use D to denote the defender’s mitigation
parameters:
D = (cid:104)D[1], D[2], D[3](cid:105),
(3)
where D[1] denotes the fraction of increased bandwidth from
the upstream ISP, D[2] whether static blocking is enabled
(1 if enabled and 0 if disabled), and D[3] the upper limit on
the maximum transaction rate allowed per source IP.
For ease of presentation, we assume the defender performs
static blocking before rate limiting, both taking place at the
ﬁrewall. To characterize the state of foreground traﬃc after
each of these two actions by the defender, we introduce two
other variables Ysb and Yrl, each of which contains two rate
vectors, to denote the rates of foreground traﬃc after the
556defender performs static blocking and rate limiting, respec-
tively. For Yt, where t ∈ {sb, rl}, Yt[1] and Yt[2] are the
rate vectors for the attack traﬃc and the legitimate traﬃc,
respectively.
5. MODELING CONDITIONAL DEPENDEN-
CIES WITH BAYESIAN NETWORK
In the previous section, we have introduced a number of
random variables to describe the system state in a DDoS
attack and defense scenario. The dependencies among these
variables are governed by the underlying scheduling mecha-
nism deployed by each critical resource and also the ordering
relationships among critical resources imposed by network
connectivity. We use (cid:96) to describe the dependence rela-
tionship. That is to say, Z0 (cid:96) Z1, Z2 means that variable
Z0 conditionally depends on both variables Z1 and Z2. In
the following, we describe how to model the conditional de-
pendencies with a Bayesian network. To explain the basic
principles, we take our best-eﬀort guesses about the models
that characterize conditional dependencies among the sys-
tem variables.
In a practical setting, we can adjust these
models accordingly based on realistic data.
Critical resource dependencies. As we only consider a
single server, the critical resources in set S form a path h0 =
ISP → F0, h1, ..., hm = S where output of foreground traﬃc
from hi (i.e., X bf
) depends on that from the previous one
hi
(i.e., X bf
) and its background traﬃc before the defender’s
mitigation action:
hi−1
X bf
hi
(cid:96) X bf
hi−1
, Ghi ,
i = 1, 2, ..., m.
(4)
The input traﬃc fed to the external link includes attack
traﬃc, legitimate users’ traﬃc destined to the server, and
background traﬃc that traverses the external link. Hence,
we have the following for the external link ISP → F0:
X bf
ISP →F0
(cid:96) J , L, GISP →F0 .
(5)
After the defender’s mitigation action, the path formed
by the critical resources remains intact, except that the de-
fender’s actions of static blocking and rate limiting aﬀect
the traﬃc rate at the ﬁrewall. Also, the output rate of fore-
ground traﬃc from the external link after the defender’s
mitigation action depends on D, which includes how much
bandwidth has been added to the external link. Hence we
have:
X af
ISP →F0
(cid:96) J , L, GISP →F0 , D.
(6)
As the attacker’s traﬃc seen at the external link depends
on how the attacker generates his attack traﬃc, we have:
J (cid:96) A.
(7)
Moreover, the output rate of foreground traﬃc after static
blocking depends on both the output rate of foreground traf-
ﬁc from the external link, and the defender’s decision on
whether static blocking is enabled:
Ysb (cid:96) X af
ISP →F0
, D.
(8)
Similarly, the output rate of foreground traﬃc after rate
limiting depends on the output rate of foreground traﬃc
from the static blocking component, and the defender’s choice
on the upper limit on the maximum transaction rate allowed
per source IP:
Yrl (cid:96) Ysb, D.
(9)
For critical resources after the ﬁrewall on the path, we
have:
(cid:40)
X af
hi
X af
hi
(cid:96) Yrl, Ghi
(cid:96) X af
hi−1