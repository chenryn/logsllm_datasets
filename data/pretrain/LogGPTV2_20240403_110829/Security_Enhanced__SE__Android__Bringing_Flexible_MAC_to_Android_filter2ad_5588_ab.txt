### 3.2. Userspace Support

Enabling userspace support for SELinux in Android required extensive modifications to a variety of software components, including the C library, filesystem generation tools, and the init program, as well as the Android framework services. Additionally, we had to port the core SELinux userspace components to Android. This section details the various aspects of enabling SELinux support in the Android userspace software stack.

#### 3.2.1. C Library and Dynamic Linker Support

The SELinux userspace code heavily relies on Linux extended attribute system calls to manage file security labels. To accommodate this, we extended Android's C library, known as Bionic, with wrappers for these calls. Previously, Bionic did not provide these wrappers because no other Android userspace code utilized them. Although our primary motivation was to support SELinux, these extended attributes are also generally useful for other purposes, making this a valuable enhancement for Android.

We also modified Android’s dynamic linker to recognize and use the kernel-supplied `AT_SECURE` auxiliary vector (auxv) flag. This flag is used to determine whether to enable secure mode. The Linux kernel provides this flag to inform userspace about security transitions. Checking this flag is more reliable than comparing the `uid/gid` against `euid/egid`, as it covers setuid/setgid, file capabilities, SELinux, and other security module state transitions. Using the `AT_SECURE` flag is also more efficient, as it avoids additional system calls to get the `uid/gid`.

#### 3.2.2. SELinux Libraries and Tools

To leverage SELinux facilities from the Android userspace, we ported the core SELinux userspace libraries and tools to Android. To minimize the userspace footprint, we created a minimal port of the SELinux API library (libselinux) for Android. Since Bionic lacks some GNU extensions that the mainstream libselinux uses, we adapted our port to eliminate these dependencies.

Other SELinux libraries, such as `libsepol` and `libsemanage`, are not required on the Android device, as they are only needed for creating and manipulating SELinux policy, which can be done offline. However, we adapted `libsepol` and the SELinux policy compiler (`checkpolicy`) to be built and used on both Linux and MacOS X, as many Android developers use the latter as a build host OS.

Specific SELinux utilities were ported to Android as needed. Since Android’s init program directly interprets initialization configuration files (init.rc) rather than running a shell interpreter, we added support for several SELinux utilities as init built-in commands (Table 1). We also added support for these utilities in the Android toolbox (Table 2), which supports various Linux commands via a single binary for use from a shell or by apps.

| Command | Action |
|---------|--------|
| seclabel | Set service security context. |
| restorecon | Restore file security context. |
| setcon | Set init security context. |
| setenforce | Set enforcing mode. |
| setsebool | Set policy boolean. |

**Table 1: Android init language extensions.**

| Command | Action |
|---------|--------|
| chcon | Change file security context. |
| getenforce | Get enforcing mode. |
| getsebool | Get policy boolean values. |
| id | Display process security context. |
| load_policy | Load policy file. |
| ls -Z | Display file security context. |
| ps -Z | Display process security context. |
| restorecon | Restore file security context. |
| runcon | Run program in security context. |
| setenforce | Set enforcing mode. |
| setsebool | Set policy boolean values. |

**Table 2: Android toolbox extensions.**

#### 3.2.3. Labeling Files

Android filesystem images for the device are generated using specialized tools like `mkyaffs2image` and `make_ext4fs` during the Android build process. These tools have Android-specific support for setting UID, GID, and mode bits on files within the images. However, they lacked support for setting security labels. We extended both tools to support setting file security labels based on the SELinux file contexts configuration, which specifies the initial assignment of security labels for each file. As a result, the images generated for the system and userdata partitions have correct security label assignments from the start, eliminating the need for a separate relabeling step during SE Android installation.

We also extended the Android recovery console and updater programs to ensure that files created from the recovery console, such as system updates, are correctly labeled. This ensures the system remains securely labeled even after updates and avoids the need for a separate relabeling step. A copy of the file contexts configuration file is included in the recovery image, allowing the updater program to determine the correct file labels.

#### 3.2.4. System Initialization

Android has its own unique init program and ueventd program for managing device nodes. We extended the init program to load the SELinux policy early during startup, before executing any commands from the init.rc files. We also extended the ueventd program to label device nodes according to policy. The security context of the init process is set from the early-init section of the init.rc configuration using the new `setcon` built-in command. Processes and files created after this initial setup are then automatically labeled in most cases.

Most system services are automatically transitioned into their own security contexts by the kernel when executed from the system image by init. A few early services, such as `ueventd` and `adbd`, require explicit labeling via a new `seclabel` option in the init.rc configuration, as their executables live in the root filesystem, which is an in-memory filesystem unpacked from the initial ramfs image passed to the kernel and does not have per-file security labels. This allows each system service to be distinguished in the SELinux policy.

The Android init program handles the creation and binding of local sockets for many system services. These sockets should be labeled to reflect the security attributes of the individual service, not just those of the init process. We extended init to set the security context for the sockets and socket files, allowing connections to each service socket to be controlled by SELinux policy. The other new built-in commands can be used from the init.rc to specify the initial state for SELinux operation. For example, the `setenforce` command can put SELinux into enforcing mode, and the `setsebool` command can set specific SELinux policy booleans to a desired initial state.

#### 3.2.5. App Security Labeling

All Android apps are created by the zygote process, typically at the request of the ActivityManagerService (AMS) running within the system server process. The AMS invokes the `Process.start()` method, which sends a command string over a local socket to the zygote. The zygote then calls the `Zygote.forkAndSpecialize()` method, which performs a JNI call to the native implementation within the Dalvik VM. The Dalvik VM forks a child process and sets the DAC credentials (UID, GID, supplementary groups) for the child process to reflect the credentials of the app.

Even the Android system server, which provides the Android framework services for the apps and runs in the system UID with a number of Linux superuser capabilities, is created by the zygote. This is done using a variant interface, `forkSystemServer`, which is implemented by the Dalvik runtime and internally uses the same function, `forkAndSpecializeCommon`, within the Dalvik VM.

To enable the system server and Android apps to be labeled differently from the zygote process, we extended the Dalvik VM to set the SELinux security context for the child process. We inserted a hook within the Dalvik VM to call a new interface in the libselinux library at the right point during the setup of the new child process. The setting of the SELinux security context for the child must occur after the setting of the DAC credentials, as the new SELinux security context may not be allowed to change DAC credentials. It must also occur before any other threads or objects are created by the child to ensure proper labeling of all associated threads and objects.

To support a greater range of inputs for selecting a SELinux security context for app processes, we extended the relevant interfaces and their callers to take an additional `seinfo` string argument. This argument can be used to pass higher-level information from the AMS about the particular app being started. These changes spanned the Dalvik VM, the zygote, and the AMS to convey the additional argument through the call chain for spawning an app process. We also extended the relevant interfaces and their callers to provide the name of the application package as one of the inputs.

This mechanism allows SELinux to distinguish the system server process from all apps, even those running in the system UID. It also allows SELinux to distinguish apps from one another based on their platform UID, package name, or other higher-level information provided by the AMS of the system server. The `seinfo` string for the app is determined from the middleware MAC policy configuration, described in Section 3.3.2.

In addition to setting the security label of each app process, we also needed to set the security label of each app data directory. The creation of the app data directories is performed by the `installd` daemon in Android, which receives commands over a local socket from the PackageManagerService running in the system server. Similar to the Dalvik VM, we inserted hooks into `installd` to call a new interface in the libselinux library when the app data directories are being created to set the directory security context correctly.

The new functions in libselinux that implement these hooks for both the Dalvik VM and `installd` are driven by a single shared configuration file, the `seapp_contexts` configuration. This configuration was introduced specifically for SE Android but is similar to other SELinux policy configuration files. The configuration allows specification of how to label app processes and data directories based on the available inputs.

#### 3.2.6. Userspace Policy Enforcement

SELinux provides support for extending the Mandatory Access Control (MAC) model to application layer objects and operations. The libselinux library provides interfaces for applications to obtain security contexts for their own objects and to apply SELinux permission checks on operations performed on these objects. These userspace components are typically referred to as userspace object managers in the Flask architecture, on which SELinux is based.

In Android, several applications implement their own permission checking logic, typically based on the DAC UID of the requesting process. Two such components include the init program, which provides a global property name/value space for all Android processes, and the zygote, which provides the interface for spawning new apps.

We extended the init program to apply security labeling for the system properties and to enforce mandatory access controls over attempts to set their values. Fine-grained control over reading the system properties is not currently possible, as they are stored in a single shared mapping that is mapped read-only by all processes in Android. By controlling the ability to set the system properties, SELinux can prevent a compromised privileged system service from setting arbitrary properties. SELinux can also support finer-grained distinctions over the ability to set properties than the existing DAC controls.

Similarly, the zygote was extended to enforce mandatory access controls over the use of its socket interface for spawning new apps. While the kernel can directly control what processes can connect to the zygote via this socket interface, finer-grained distinctions over the use of privileged commands issued over the socket require permission checking by the zygote itself. To enable the use of the SELinux APIs from the zygote Java code and from the Android framework services written in Java, we created a set of SELinux JNI bindings for a subset of the libselinux interfaces. The `ZygoteConnection` class was then extended to use these APIs to obtain the security context of the client process and apply SELinux permission checks for any privileged operation, such as specifying the UID and GID for the new app being spawned. These controls enable SELinux to prevent a compromised privileged system service from being leveraged to spawn apps with arbitrary credentials or resource limits.

#### 3.2.7. Middleware Policy Enforcement

Although the SELinux userspace object manager approach worked well for the init property service and the zygote, it proved more problematic at the Android middleware layer. First, apps communicate with the Android middleware via Binder IPC rather than socket IPC. The lack of support for obtaining the sender security context for Binder IPC was an initial obstacle. We overcame this problem by implementing support for passing the sender security context on Binder transactions.

However, we discovered that Binder transactions often involve multi-stage call chains that require saving and restoring caller identity for permission checking purposes. For example, content providers are accessed indirectly via the AMS, which saves the caller identity in thread-local storage before invoking the content provider, so that it can look up the original caller identity when the content provider later queries the AMS for a permission check. Providing similar support for saving and restoring the sender security context would have required an invasive and potentially costly set of changes.

Additionally, Android permission checks are often invoked by application components using the public `checkPermission` API, which only supports passing the sender PID and UID. Extending the public `checkPermission` API to fully support permission checking based on SELinux security contexts would have created compatibility problems for existing apps and impacted Android app developers. We were also concerned about the potential implications of using the SELinux policy to capture middleware MAC semantics, as it could complicate our goals of keeping the SELinux policy small, simple, and relatively static.

As a result, we chose to introduce a separate middleware MAC (MMAC) layer for Android. The MMAC layer should only interact with the kernel MAC layer with respect to determining the `seinfo` string used for app security labeling, as described in Section 3.2.5. Otherwise, the two layers should largely function independently, with the kernel MAC layer enforcing a small set of fixed security goals based on the assigned security contexts. This design decision removed the need to pass sender security context information on Binder IPC, and we reverted the corresponding code changes from our reference implementation.

We have developed several MMAC mechanisms for Android to explore the design and implementation space. These MMAC mechanisms provide different forms of mandatory restrictions over the Android permissions model. One of these mechanisms, known as install-time MAC, has been integrated as part of the core SE Android implementation, as it provides the basis for determining `seinfo` strings.