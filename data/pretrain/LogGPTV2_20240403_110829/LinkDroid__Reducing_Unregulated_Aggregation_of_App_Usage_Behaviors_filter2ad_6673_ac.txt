e
rI
D
I
M
S
u
L
i
n
c
S
A
n
C
e
ri
a
l
N
u
E
I
d
r
o
i
d
I
b
s
e
1
c
ri
b
N
D
e
rI
L
N
A
o
c
e
c
a
ti
o
a
r
b
y
I
n
B
i
n
c
o
u
d
i
n
d
ir
e
I
n
t
e
n
t
u
n
A
m
P
n
t
g
c
t
R
W
e
r
m
m
D
b
e
r
b
e
r
b
e
r
Figure 7: The percentage of apps accessing each source, and
the linkability (LR) an app can get by exploiting each source.
Figure 8: The (average) Linking Efforts (LE) of all the apps
that are linkable due to a certain linkability source.
ities a user exhibited using mobile apps are identiﬁable,
and can be linked to the real person.
Breakdown by Source: This vast linkability is con-
tributed by various sources in the mobile ecosystem.
Here, we report the percentage of apps accessing each
source and the linkability (LR) an app can acquire by ex-
ploiting each source. The results are provided in Fig. 7.
We observed that except for device identiﬁers, many
other sources contributed to the linkability substantially.
For example, an app can be linked to 39% of all in-
stalled apps (LR=0.39) using only account information,
and 36% (LR=0.36) using only Intents. The linkability
an app can get from a source is roughly equal to the per-
centage of apps that accessed that source, except for the
case of contextual information: IP, Location and Nearby
APs. This is because the contextual information an app
collected does not always contain effectively identifying
information. For example, Yelp is mostly used at infre-
quent locations to ﬁnd nearby restaurants, but is rarely
used at consistent PoIs, such as home or ofﬁce. This ren-
ders location information useless in establishing linka-
bility with Yelp.
The effort required to aggregate two apps also differs
for different linkability sources, as shown in Fig. 8. De-
vice identiﬁers have LE=0, meaning that any two apps
accessing the same device identiﬁer can be directly ag-
gregated without requiring control of an additional third
app. Linking apps using IPC channels, such as Intents
and Indirect RW, requires the adversary to control an av-
erage of 0.6 additional app as the connecting nodes. This
indicates that, from an adversary’s perspective, exploit-
ing consistent identiﬁers is easier than building pair-wise
associations.
Breakdown by Category: We group the linkability
sources into four categories — device, personal, contex-
Category
Device
Personal
Contextual
IPC
GLR
0.52 (0.13)
0.30 (0.10)
0.20 (0.13)
0.32 (0.13)
GLE
0.03 (0.03)
0.30 (0.11)
0.33 (0.20)
0.78 (0.06)
LRFacebook
0.68 (0.12)
0.54 (0.11)
0.44 (0.25)
0.59 (0.15)
Table 3: Linkability contributed by different categories of
sources.
tual, and IPC — and study the linkability contributed by
each category (see Table 3). As expected, device-speciﬁc
information introduces substantial linkability and allows
the adversary to conduct across-app aggregation effort-
lessly. Surprisingly, the other three categories of linka-
bility sources also introduce considerable linkability. In
particular, only using fuzzy contextual information, an
adversary can link more than 40% of the installed apps
to Facebook, the user’s real identity. This suggests the
naive solution of anonymizing device ids is not enough,
and hence a comprehensive solution is needed to make a
trade-off between app functionality and privacy.
4.3 Functional Analysis
Device identiﬁers (IMEI, Android ID, MAC) introduce
vast amount of linkability. We manually went through
162 mobile apps that request these device-speciﬁc iden-
tiﬁers, but could rarely identify any explicit functional-
ity that requires accessing the actual identiﬁer. In fact,
for the majority of these apps, their functionalities are
device-independent, and therefore independent of device
IDs. This indicates that device-speciﬁc identiﬁer can be
obfuscated across apps without noticeable loss of app
functionality. The only requirement for device ID is that
it should be unique to each device.
As to personal information (Account Number, Phone
776  24th USENIX Security Symposium 
USENIX Association
VJT7MTV268gDACiZN6xEh8af
356565055348652
310260981039000
356565055348652
Figure 9: Real-world example of indirect RW: an app
(fm.qingting.qradio) writes user identiﬁers to an xml ﬁle in SD
card which was later read by three other apps. This ﬁle contains
the IMEI (DID) and SubscriberID (SI) of the user.
Number, Installed Apps, etc.), we also observed many
unexpected accesses that resulted in unnecessary linka-
bility. We found that many apps that request account
information collected all user accounts even when they
only needed one to function correctly; many apps request
access to phone number even when it is unrelated to their
app functionalities. Since the legitimacy of a request de-
pends both on the user’s functional needs and the speciﬁc
app context, end-users should be prompted about the ac-
cess and make the ﬁnal decision.
The linkability introduced by contextual information
(Location, Nearby AP) also requires better regulation.
Many apps request permission for precise location, but
not all of them actually need it to function properly.
In many scenarios, apps only require coarse-grained lo-
cation information and shouldn’t reveal any identifying
points of interest (PoIs). Nearby AP information, which
is only expected to be used by Wi-Fi tools/managing
apps, is also abused for other purposes. We noticed that
many apps frequently collect Nearby AP information to
build an internal mapping between locations and access
points (APs). For example, we found that even if we turn
off all system location services, WeChat (an instant mes-
saging app) can still infer the user’s location only with
Nearby AP information. To reduce the linkability intro-
duced by these unexpected usages, the users should have
ﬁner-grained control on when and how the contextual in-
formation can be used.
Moreover, we found that IPC channels can be ex-
ploited in various ways to establish linkability across
apps. Apps can establish linkabililty using Intents, shar-
ing and aggregating app-speciﬁc information. For in-
stance, we observed that WeChat receives Intents from
three different apps right after their installations, report-
ing their existence on the same device. Apps can also
establish linkability with each other via service binding.
For example, both AdMob and Facebook allow an app
to bind to its service and exchanging the user identi-
ﬁer, completely bypassing the system permissions and
controls. Apps can also establish linkabililty through
Indirect RW, by writing and reading the same persis-
tent ﬁle. Fig. 9 shows a real-world example: an app
(fm.qingting.qradio) writes user identiﬁers to an xml ﬁle
in the SD card which was later read by three other apps.
The end-user should be promptly warned about these un-
expected communications across apps to reduce unnec-
essary linkability.
5 LinkDroid: A Practical Countermeasure
Based on our observation and ﬁndings on linkability
across real-world apps, we propose a practical counter-
measure, LinkDroid, on top of DLG. We ﬁrst intro-
duce the basic design principle of LinkDroid and its
three major privacy-enhancing features: install-time ob-
fuscation, runtime linkability monitoring, and unlinkable
mode support. We then evaluate the effectiveness of
LinkDroid with the same set of participants as in our
measurement study.
5.1 Design Overview
LinkDroid is designed with practicality in mind. Nu-
merous extensions, paradigms and ecosystems have been
proposed for mobile privacy, but access control (runtime
for iOS and install-time for Android) is the only de-
ployed mechanism. LinkDroid adds a new dimension
to access control on smartphone devices. Unlike exist-
ing approaches that check if some app behavior poses di-
rect privacy threats, LinkDroid warns users about how
it implicitly builds the linkability across apps. This
helps users reduce unnecessary links introduced by abus-
ing OS-level information and IPCs, which happens fre-
quently in reality as our measurement study indicated.
As shown in Fig. 10, LinkDroid provides runtime
monitoring and mediation of linkability by
• monitoring and intercepting app behaviors that may
introduce linkability (including interactions with
various system services, content providers, shared
external storage and other apps);
• querying a standalone linkability service to get the
user’s decision regarding this app behavior;
• prompting the user about the potential risk if the
user has not yet made a decision, getting his deci-
sion and updating the linkability graph (DLG).
We have already described in Section 3.4 how to in-
strument the Android framework to build the monitor-
ing components (corresponding to boxes A, B, C, D in
Fig. 10). In this section, we focus on how the linkability
service operates.
USENIX Association  
24th USENIX Security Symposium  777
Figure 10: An overview of LinkDroid. Shaded areas (red) represent the parts we need to extend/add in Android. (We already
explained how to extend A, B, C and D in Section 3.4.)
5.2 Install-Time Obfuscation
As mentioned earlier, app functionalities are largely in-
dependent of device identiﬁers. This allows us to obfus-
cate these identiﬁers and cut off many unnecessary edges
in the DLG. In our case, the list of device identiﬁers in-
cludes IMEI, Android ID and MAC. Every time an app
gets installed, the linkability service receives the app’s
uid and then generates a random mask code for it. The
mask code together with the types of obfuscated device
identiﬁers will be pushed into the decision database. This
way, when an app a tries to fetch the device identiﬁer of a
certain type t, it will only get a hash of the real identiﬁer
salted with the app-speciﬁc mask code:
IDa
t = hash(IDt + maska).
Note that we do this at install-time instead of during
each session because we still want to guarantee the rela-
tive consistency of the device identiﬁers within each app.
Otherwise, it will let the app think the user is switching to
a different device and trigger some security/veriﬁcation
mechanisms. The user can always cancel this default ob-
fuscation in the privacy manager (Fig. 12) if he ﬁnds it
necessary to reveal real device identiﬁers to certain apps.
5.3 Runtime Linkability Monitoring
Except for device-speciﬁc identiﬁers, obfuscating other
sources of linkability is likely to interfere with the
app functionalities. Whether there is a functional in-
terference or not is highly user-speciﬁc and context-
dependent. To make a useful trade-off, the user should
be involved in this decision-making process. Here,
LinkDroid provides just-in-time prompts before an
edge creates in the DLG. Speciﬁcally, if the linkabil-
ity service could not ﬁnd an existing decision regarding
some app behavior, it will issue the user a prompt, in-
forming him: 1) what app behavior triggers the prompt;
2) what’s the quantitative risk of allowing this behavior;
Figure 11: The UI prompt of LinkDroid’s runtime access
control, consisting of a behavioral description, descriptive and
quantitative risk indicators, and opt-out options.
and 3) what’re the opt-out options. Fig. 11 gives an illus-
trative example of the UI of the prompt.
Description of App Behavior Before the user can
make a decision, he ﬁrst needs to know what app behav-
ior triggers the prompt. Basically, we report two types
of description: access to OS-level information and cross-
app communications. To help the user understand the sit-
uation, we use a high-level descriptive language instead
of the exact technical terms. For example, when an app
tries to access Subscriber ID or IccSerialNumber, we re-
port that “App X asks for sim-card information.” When
an app tries to send Intents to other apps, we report “App
X tries to share content with App Y”. During our experi-
ments with real users (introduced later in the evaluation),
11 out of the 13 participants ﬁnd these descriptions clear
778  24th USENIX Security Symposium 
USENIX Association
LinkDroid also allows the user to set up a VPN (Virtual
Private Network) service to anonymize network identi-
ﬁers. When the user switches from a cellular network to
Wi-Fi, LinkDroid will automatically initialize the VPN
service to hide the user’s public IP. This may incur addi-
tional energy consumption and latency (see Section 5.5).
All choices made by the user will be stored in the de-
cision database for future reuse. We provide a central-
ized privacy manager such that the user can review and
change all previously made decisions (see Fig. 12).
5.4 Unlinkable Mode
Once a link is established in DLG, it cannot be removed.
This is because once a piece of identifying information
is accessed or a communication channel is established, it
can never be revoked. However, the user may sometimes
want to perform privacy-preserving tasks which have no
interference with the links that have already been intro-
duced. For example, when the user wants to write an
anonymous post in Reddit, he doesn’t want it to be link-
able with any of his previous posts as well as other apps.
LinkDroid provides an unlinkable mode to meet such
a need. The user can start an app in unlinkable mode
by pressing its icon for long in the app launcher. A new
uid as well as isolated storage will be allocated to this
unlinkable app instance. By default, access to all OS-
level identifying information and inter-app communica-
tions will be denied. This way, LinkDroid creates the il-
lusion that this app has just been installed on a brand-new
device. The unlinkable mode allows LinkDroid to pro-
vide ﬁner-grained (session-level) control, unlinking only
a certain set of app sessions.
5.5 Evaluation
We evaluate LinkDroid in terms of its overheads in us-
ability and performance, as well as its effectiveness in re-
ducing linkability. We replay the traces of the 13 partic-
ipants of our measurement study (see Section 4), prompt
them about the privacy threat and ask for their decisions.
This gives us the exact picture of the same set of users
using LinkDroid during the same period of time. We
instruct the user to make a decision in the most conser-
vative way: the user will Deny a request only when he
believes the prompted app behavior is not applicable to
any useful scenario; otherwise, he will Accept the re-
quest.
The overhead of LinkDroid mainly comes from two
parts: the usability burden of dealing with UI prompts
and the performance degradation of querying the linka-
bility service. Our experimental results show that, on av-
erage, each user was prompted only 1.06 times per day
during the 47-day period. The performance degradation
Figure 12: LinkDroid provides a centralized linkability man-
ager. The user can review and modify all of his previous deci-
sions regarding each app.
and informative.
Risk Indicator LinkDroid reports two types of risk
indicators to users: one is descriptive and the other is
quantitative. The descriptive indicator tells what apps
will be directly linkable to an app if the user allows its
current behavior. By ‘directly linkable,’ we mean with-
out requiring a third app as the connecting nodes. The
quantitative indicator, on the other hand, reﬂects the in-
ﬂuence on the overall linkability of the running app, in-
cluding those apps that are not directly linkable to it.
Here, the overall linkability is reported as a combination
of the linking ratio (LR) and linking effort (LE):
La = LRa × e−LEa.
The quantitative risk indicator is deﬁned as ∆La. A
user will be warned of a larger risk if the total number
of linkable apps signiﬁcantly increases, or the average
linking effort decreases substantially. We transform the
quantitative risk linearly into a scale of 4 and report the
risk as Low, Medium, High, and Severe.
Opt-out Options
In each prompt, the user has at least
two options: Allow or Deny. If the user chooses Deny,
LinkDroid will obfuscate the information this app tries