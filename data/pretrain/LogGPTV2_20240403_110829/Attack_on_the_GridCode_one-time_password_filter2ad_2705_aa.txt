title:Attack on the GridCode one-time password
author:Ian Molloy and
Ninghui Li
Attack on the GridCode One-Time Password
∗
Ian Molloy
IBM T.J. Watson Research Center
Hawthorne, NY USA
PI:EMAIL
Ninghui Li
Purdue University
West Lafayette, IN USA
PI:EMAIL
ABSTRACT
SyferLock presents a one-time password system, GridCode,
that allows an unaided human to authenticate, reducing the
cost of deployment. The one-time password system is a
human computable challenge-response protocol which they
claim defends against key-logging, replay, and brute force
attacks, among others. We evaluate the security of the Grid-
Code one-time password system and challenge these claims.
We identify weak preimage resistance and character inde-
pendence as key weaknesses of the GridCode system, leading
to a variety of attacks. Our analysis indicates their scheme
is akin to providing an adversary the ability to perform a
brute force attack on a user’s password in parallel without
signiﬁcant eﬀort, lowering the eﬀort required to recover a
strong user password. Given a small number of challenge-
response pairs, an adversary can recover a user’s password
(e.g., 2–4 pairs), and additional secret (e.g., 1 pair).
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Authentication; K.6.5 [Management of Computing and
Information Systems]: Security and Protection—Unau-
thorized access
General Terms
Security, Human Factors
Keywords
one-time password, human authentication, attack
1.
INTRODUCTION
Passwords are a ubiquitous and familiar method of user
authentication, however they are vulnerable to a variety of
attacks. Human memorable passwords are often low in en-
tropy [20, 22], making brute force and dictionary attacks
∗
Work performed while at Purdue University.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
feasible. Second, malware such as key loggers can record
passwords entered by users. Third, users may be tricked
into giving their passwords to phishing websites designed to
steal passwords and other sensitive information.
To mitigate these attacks, one-time passwords may be
used. one-time password (OTP) is only valid for a single
authentication, and cannot be reused if recorded or stolen.
As a result, they help mitigate the most common attacks on
password based authentication. Many OTP systems rely on
special hardware or software to generate OTPs from a shared
secret or precomputed lists. We investigate a OTP that does
not require such aids and can be more rapidly deployed.
The OTP system considered here, the GridCode [8, 9] de-
veloped by SyferLock1, combines graphical displays with
human memorable secrets to produce human computable
OTPs. The GridCode can be used can authenticate Mi-
crosoft Outlook Web Access, Cisco and Juniper VPNs, and
custom .NET and Java applications, among others. Cus-
tomers and partners include managed business IT solutions
(mbits), CA, and the Australian Government, and the sys-
tem has attained NIST FIPS 140-2 certiﬁcation. The system
promises to provide a secure OTP authentication system
without the added costs of dedicated hardware or software.
We evaluate the GridCode OTP and ﬁnd it produces a small
improvement in security over traditional passwords against
some attacks at best, and at worst reduces the security of the
authentication system. Our analysis suggests human com-
putable preimage resistance functions as future research.
The remainder of this paper is organized as follows. In the
next section we present the GridCode OTP authentication
system. In Section 3 we analyze the security at preventing
brute force, replay, and password recovery attacks. In Sec-
tion 4 we analyze the security impact of extensions to the
GridCode system and more sophisticated attacks speciﬁc to
the GridCode. We comment on the security of the system
and consider several ways in which it may practically be im-
proved in Section 5, and present related work in Section 6.
In Section 7, we conclude.
2. GRIDCODE ONE-TIME PASSWORDS
SyferLock proposes a OTP mechanism that does not re-
quire the use of additional hardware or software by the au-
thenticating user, and does not rely on precomputed lists of
OTPs or challenge-response pairs. The generation of each
new OTP (a response) is based on a random state generated
by the authenticator (a challenge) and a shared secret. Un-
like other OTP challenge-response schemes, the generation
1http://syferlock.com/
306
of the response does not require a computer and the shared
secret must be remembered by the authenticating user. We
now describe their OTP scheme and extensions.
2.1 Shared Secrets
Example alphabets for Σ include the set of digits ({0, 1,··· , 9}),
There are two shared secrets, a password and a small key.
The authenticating entity (the user) selects a password P
consistent with most familiar password based authentication
mechanisms. The password is selected from an alphabet Σ
where | Σ| = n. Without loss of generality, let | P | = r.
the standard Latin alphabet (lowercase {a, b,··· , z} and up-
percase {A, B,··· , Z}), and special characters (e.g., {!, @, #, %,∗, $},
etc.), or any union of these sets. Common deployments of
the GridCode system use the set of digits (n = 10), digits
and the Latin alphabet (n = 36 and n = 62), and the digits,
Latin alphabet, and select special characters. In general, we
can assume the password is selected from a subset of the 94
printable ISO characters [4]. We do not assume a uniform
distribution of passwords, because users have been found
to select passwords non-uniformly [4, 20, 22], and assume a
“reasonably” sized password alphabet Σ.
Next, the user selects an additional secret K from a keyspace
K where |K | = k. This additional secret is assumed to be
uniformly random, adding log2 k bits of entropy to the above
user selected password P . In the demos and implementation
by SyferLock, k = 4 and k = 8 are used, adding at most
three bits of entropy. Increasing the entropy of K increases
the authentication task for the user (more information to
remember), thus decreasing usability. For the remainder of
this paper we will refer to the pair (P, K) as the shared key
or shared secret.
2.2 Interface and Interaction
To login, the user does not enter their password or ad-
ditional secret, but instead enters an OTP they can derive
using the shared secret and a random challenge. The user is
presented with a set of mappings from the password space
Σ to the OTP space Φ via a virtual keyboard, e.g., the key-
pad in Figure 1. The OTP is derived from a random state
generated by the authenticator and the shared secret. For
each key on the virtual keyboard (there exists a key for each
σ ∈ Σ), there are k items from Φ. The placement of the
k items {ϕ0,··· , ϕk−1} ⊆ Φ indicates which mapping they
correspond to. For example, when k = 4, each character
from Σ is represented as a square, and the four corners are
used to represent the four mappings. The upper-left corner
(a) k = 4
(b) k = 8
Figure 1: Example presentation of the challenge S.
307
is K = 0, the upper-right corner is K = 1, and so on. When
k = 8, the square is divided into a 3×3 grid, where the center
cell is an item from Σ, and the remaining cells are items from
Φ. For example, let P = ⟨7, 1, 4, 0⟩, and K = 1, the upper-
right corner (in bold italics). The response is ⟨6, 3, 0, 7⟩. We
will formalize this authentication protocol next.
2.3 Authenticating
The GridCode OTP is a challenge-response protocol. Given
a challenge state, S, the OTP response is a keyed MAC, e.g.,
hS∥K (P ). The response hS∥·(·) is calculated as follows. The
OTP is taken from an alphabet Φ, where | Φ| = m. The
state S presented to the user is a mapping S : K × Σ → Φ.
The user selects the correct mapping using their additional
secret K, maps their password character-by-character using
S(K,·) from Σ to Φ, and submits the mapped password.
For example, let P = ⟨σ0, σ1,··· , σr−1⟩ be the user’s pass-
word where σi ∈ Σ. The user responds with hS∥K (P ) =
⟨S(K, σ0), S(K, σ1),··· , S(K, σr−1)⟩. The challenge, S ∈
Φkn, and the state may be selected uniform randomly, mak-
ing repeat challenges extremely unlikely (| Φ|kn/2 challenge-
response pairs by the birthday attack [6]). There are no
constraints placed on S; e.g., it does not need to be an in-
jection or surjection.
2.4 Decoy Digits
Several extensions to the basic GridCode OTP system aim
at further increasing security. One such extension is De-
coyDigits which help obscure the length of the user’s pass-
word. Decoy digits make certain attacks, e.g., shoulder surf-
ing (peering over the shoulder of an authenticating user and
observing their password), or phishing more diﬃcult.
DecoyDigits are random items from Φ that a user may
enter as part of their response that are ignored, and do not
impact user authentication. DecoyDigits work as follows.
Let Ψ be the expected OTP for the user password P , key
K, and challenge state S (as deﬁned above), and let ˆΨ be
the OTP entered by the user. The OTP ˆΨ is accepted if
| ˆΨ| − | Ψ| ≤ ℓ, and Ψ is a subsequence of ˆΨ, i.e., the longest
common subsequence, lcs(Ψ, ˆΨ) = r. The parameter ℓ is
a security parameter, and can either be an absolute string
length diﬀerence (such as 2), or based on a ratio of the user’s
password P , e.g., ℓ = α∗r. We will assume an absolute string
length diﬀerence is used.
2.5 Overview
SyferLock claims GridCode OTPs defend against key-logging,
automated attacks, sniﬃng, replay, brute force, interception,
dictionary, and shoulder surﬁng. First, we illustrate that the
GridCode is not a secure pseudo-random function, and leaks
the user’s password using very few challenge-response pairs
(e.g., two–three), and often leaks the user’s secret K after a
single accepted challenge-response. Further, the GridCode
is vulnerable to the same level of brute force attacks as a tra-
ditional password system, and an improper choice of system
parameters facilitates the attacks and reduces the cost of the
brute force attack compared to static passwords. Succinctly,
the GridCode OTP scheme provides a small improvement in
security at best, and reduces the cost of attacks against the
authentication system at worst.
In the remainder of this paper we will use the following
notation. A password P of length r is taken from an alpha-
bet Σ, i.e., P ∈ Σr. A character from Σ is σ. A OTP Ψ
12345678901538713704638763830672464216833584732390123456789015387137046387638306724642168335847323905555577722222254444999999000881116458156of length r is taken from an alphabet Φ, i.e., Ψ ∈ Φr, and
each character in Φ is ϕ. A challenge is S, and the resulting
response is Ψ = hS∥K (P ). The pair (P, K) is the user’s key.
3. SECURITY ANALYSIS
In this section we evaluate the security of the GridCode
OTP against a variety of attacks and adversarial models.
In each instance, we assume one of two main objectives:
impersonation (Imp) and key-recovery (KR). In an imper-
sonation attack the objective is to spoof a user’s identity at
least once, while a key recovery attack aims at discovering
the shared secret. For OTPs, we assume a secure pseudo-
random function F where Ψ = FK (S) and K is a large
shared secret, e.g., 128 bits (we will also consider 54 bits).
We consider the following attacks and adversarial models.
Brute Force Attack When a password or shared secret
is uniform random an adversary may try all possible input
values, a so-called brute force attack. One-time passwords
typically use large shared secrets, e.g., 128-bits, and are not
vulnerable to such attacks while traditional passwords are
shorter. The GridCode increases the work of such a na¨ıve
brute force attack by a factor of k over traditional pass-
words, however more sophisticated attacks signiﬁcantly de-
crease this cost (e.g., from 254 to 227).
Dictionary Attack Given an a priori probability distribu-
tion over user passwords, such as known common passwords
or composition rules, the adversary tries the most likely in-
puts ﬁrst. Given the entropy H(P ) of a user’s password,
Massey [16] ﬁnds the lower bound on the expected number
of guesses as 2H(P )−2 + 1. The GridCode increases the time
by a factor of k and OTP’s secrets are uniform random and
are not vulnerable to dictionary attacks.
Key Logging An adversary can record the user’s response
only, e.g., keystrokes, but cannot record external inputs, e.g.,
the challenge. An adversary learns a shared secret for tradi-
tional passwords after a single authentication. Neither the
GridCode nor OTPs are vulnerable to key logging; without
the challenge the user’s response appears uniform random.
Eavesdropping or Interception Eavesdropping is a more
sophisticated attack than key logging where the adversary
can intercept the entire authentication protocol. For ex-
ample, the adversary may perform key logging and screen
scraping (a small increase in the power of installed malware).
Given a small number (2–4) of intercepted authentications,
an adversary learns the shared secret using the GridCode.
One-time passwords are not vulnerable to eavesdropping and
an adversary learns little information exchange.
Shoulder Sur(cid:12)ng Shoulder surﬁng is often a human at-
tack where an adversary observes a user authenticating in
an imperfect environment subject to noise (e.g., obstructed
view) and cognitive limits (e.g., short term memory). As
this is a noisy version of eavesdropping, OTPs remain se-
cure. Traditional passwords are vulnerable to such attacks,
and an adversary may learn much of P . For GridCodes,
the adversary must recognize and remember the challenge,
which has entropy of nk
m log m (around 42 bits), and the re-
sponse (around 26.5 bits); the attack is largely mitigated.
Phishing The adversary tricks the user into authentica-
tion with a fraudulent entity impersonating the authentica-
tor. The number of fraudulent authentications is typically
limited, e.g., one-or-two. One-time passwords are vulnera-
ble to phishing and the key is recovered after being phished
once. A OTP allows a single impersonation from phishing
only. The GridCode is susceptible to phishing and allows an
adversary to learn the additional key in one authentication,
recover the key with high probability after one-to-two au-
thentications (low entropy passwords), and full key recovery
after three–four authentications (high entropy passwords).
A summary of our results is given in Table 1. Our anal-
ysis indicates the GridCode system is vulnerable to a wide
variety of attacks that a secure OTP is resilient against,
such as eavesdropping and brute force. The main weakness
we identify is the easily invertible function hS∥·(·), and the
space and time eﬃcient set of candidate preimage (due to the
one-character block size). Given a challenge state S and re-
sponse Ψ, the small domain of K and character-by-character
mapping allows the set of all preimages to be calculated in
O (km) time. In general, our results show GridCode:
1. Increases the security against key-logging attacks.
2. Mitigates shoulder surﬁng by increasing the required
amount of captured information.
3. Provides almost no improvement in eavesdropping and
phishing attacks.
4. Decreases cost for brute force attacks (especially for
strong passwords).
5. Main weakness is an easily invertible mapping.
The remainder of this section details our analysis and the
ﬂaws found in the GridCode system. The analysis is or-
ganized by the generality, and we present the most general
attacks ﬁrst.
In Section 4 we present more sophisticated
attacks and attacks speciﬁc to the GridCode.
3.1 Naive Brute Force and Dictionary Attacks
on the Shared Secret
First we consider what impact the GridCode has on stan-
dard brute force, dictionary, and other na¨ıve password at-
tacks. The following Lemma summarizes the results.
Lemma 1. An adversary can recover the shared key with
at most k times the work of a traditional password system.
Proof. First, note that an adversary cannot perform a
standard brute force attack on the OTP space by enumerat-
ing over Ψ ∈ Φr, and must instead attack the key. That is,
an adversary must try each user password P k times, once
for each corner. When the shared key is uniform random, a
na¨ıve brute force attack takes O (knr).
User selected passwords have been found to be susceptible
to dictionary and probabilistic attacks [20,22]. According to
NIST estimates, an eight-character user selected password
taken from an alphabet of size 94 is estimated to have 18–
30 bits of entropy depending on dictionary constraints and
composition rules [4].
Given a distribution over the password space Σr, such
as a dictionary, let P0, P1,··· ∈ Σr be the ﬁrst, second,
etc. most likely passwords with probabilities p0, p1,··· and
p0 ≥ p1 ≥ ··· . An adversary tries P0 once for each K (i.e.,
k times), then P1 k times, etc. Given the entropy H(P ) of a
user’s password the lowerbound on the expected number of
queries is k(2H(P )−2 + 1) [16]. Therefore the GridCode adds
log k bits of entropy, and the GridCode system has 19–31
bits of entropy at best for user selected passwords.
308
Attack
Dictionary
Brute Force
Key Logging
KR
Imp
KR
Imp
KR
Imp
KR
Imp
Eavesdropping / KR
Phishing
Imp
Shoulder Surﬁng
Password
252 Queries
218–230 Queries
1 Authentication
218–230 Cognition
1 Authentication
OTP
2128 (254) Queries
226 Queries
2128 (232) Queries
226 Queries
2128 (254) Queries
226 Queries
2128 (254) Queries
226 Queries
1 Auth., 2128 (254) Time
226 Queries
GridCode
227 Queries
226 Queries
220–226 Queries
227 Queries
226 Queries
226+42 Cognition
2–4 Pairs, O (knr) time
Table 1: Summary of results. Standard values are assumed: n = 94, m = 10, r = 8, k = 4, H(P ) is 18{30 bits,
and the OTP has a shared secret of 128 or 54 bits.
Given the low entropy of K, if the underlying password
was susceptible to brute force or dictionary attacks, so is
the GridCode. Here we only consider an attack on the un-
derlying shared secret. Next we consider an impersonation
attack on the GridCode, and extend it to key recovery.
3.2 Brute Force Impersonation
Instead of attacking the shared secret, the adversary can
attempt to impersonate a user by trying random GridCodes.
If the shared secret is assumed uniform random, then the
GridCode reduces the work required to authenticate.
ter
− log 2
queries with probability 0.5.