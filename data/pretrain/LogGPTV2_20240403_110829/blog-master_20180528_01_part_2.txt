## 性能测试  
对比开启checksum, 关闭checksum的性能。  
从代码我们已经了解什么时候会需要计算checksum，所以设计一个这个的CASE，数据大量写出，使得bgwrite writeout dirty page频繁。  
用到如下CASE  
[《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
### 测试结果  
checksum=0  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 56  
number of threads: 56  
duration: 120 s  
number of transactions actually processed: 885490  
latency average = 7.588 ms  
latency stddev = 10.896 ms  
tps = 7376.390493 (including connections establishing)  
tps = 7377.158206 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set sid random(1,1024)        
         7.586  select ins_sensor(:sid, 1000);  
```  
checksum=1  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 56  
number of threads: 56  
duration: 120 s  
number of transactions actually processed: 867269  
latency average = 7.748 ms  
latency stddev = 20.287 ms  
tps = 7225.742548 (including connections establishing)  
tps = 7226.431737 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set sid random(1,1024)        
         7.746  select ins_sensor(:sid, 1000);  
```  
开启checksum时，观察perf，可以看到pg_checksum_page占用了少量overhead，体现在性能差异上也非常的小。  
```  
   0.64%  postgres               [.] pg_checksum_page    
```  
## 小结  
在bgwriter, backend process write dirty page时，需要计算checksum。(耗费CPU)  
在从shared buffer外面读入page时，需要校验checksum。(耗费CPU)  
当shared buffer较少，同时产生脏页较快，bg writer 或者backend process 刷脏页较频繁时，可能会使得计算checksum引入一定的CPU消耗。实测极端写出的情况下，pg_checksum_page引入了0.64%左右的开销。  
因此开启checksum，实际引入的开销并不大。  
## 参考  
1、https://www.postgresql.org/docs/11/static/runtime-config-preset.html  
```  
data_checksums (boolean)  
```  
Reports whether data checksums are enabled for this cluster. See data checksums for more information.  
2、https://www.postgresql.org/docs/11/static/runtime-config-developer.html  
```  
ignore_checksum_failure (boolean)  
```  
Only has effect if data checksums are enabled.  
Detection of a checksum failure during a read normally causes PostgreSQL to report an error, aborting the current transaction. Setting ignore_checksum_failure to on causes the system to ignore the failure (but still report a warning), and continue processing. This behavior may cause crashes, propagate or hide corruption, or other serious problems. However, it may allow you to get past the error and retrieve undamaged tuples that might still be present in the table if the block header is still sane. If the header is corrupt an error will be reported even if this option is enabled. The default setting is off, and it can only be changed by a superuser.  
3、https://www.postgresql.org/docs/11/static/pageinspect.html#id-1.11.7.31.4  
```  
page_header(page bytea) returns record  
```  
page_header shows fields that are common to all PostgreSQL heap and index pages.  
A page image obtained with get_raw_page should be passed as argument. For example:  
```  
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));  
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid  
-----------+----------+--------+-------+-------+---------+----------+---------+-----------  
 0/24A1B50 |        0 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0  
```  
The returned columns correspond to the fields in the PageHeaderData struct. See src/include/storage/bufpage.h for details.  
The checksum field is the checksum stored in the page, which might be incorrect if the page is somehow corrupted. If data checksums are not enabled for this instance, then the value stored is meaningless.  
```  
page_checksum(page bytea, blkno int4) returns smallint  
```  
page_checksum computes the checksum for the page, as if it was located at the given block.  
A page image obtained with get_raw_page should be passed as argument. For example:  
```  
test=# SELECT page_checksum(get_raw_page('pg_class', 0), 0);  
 page_checksum  
---------------  
         13443  
```  
Note that the checksum depends on the block number, so matching block numbers should be passed (except when doing esoteric debugging).  
The checksum computed with this function can be compared with the checksum result field of the function page_header. If data checksums are enabled for this instance, then the two values should be equal.  
4、https://www.postgresql.org/docs/11/static/pgverifychecksums.html  
```  
pg_verify_checksums  
pg_verify_checksums — verify data checksums in an offline PostgreSQL database cluster  
Synopsis  
pg_verify_checksums [option] [[-D] datadir]  
Description  
pg_verify_checksums verifies data checksums in a PostgreSQL cluster.  
```  
5、https://docs.oracle.com/cd/B28359_01/server.111/b28320/initparams046.htm#REFRN10030  
DB_BLOCK_CHECKSUM determines whether DBWn and the direct loader will calculate a checksum (a number calculated from all the bytes stored in the block) and store it in the cache header of every data block when writing it to disk. Checksums are verified when a block is read - only if this parameter is TYPICAL or FULL and the last write of the block stored a checksum. In FULL mode, Oracle also verifies the checksum before a change application from update/delete statements and recomputes it after the change is applied. In addition, Oracle gives every log block a checksum before writing it to the current log.  
Starting with Oracle Database 11g, most of the log block checksum is done by the generating foreground processes, while the LGWR performs the rest of the work, for better CPU and cache efficiency. Prior to Oracle Database 11g, the LGWR solely performed the log block checksum. When this parameter is set to FULL, the LGWR verifies the checksum of each log block generated by the foreground processes before writing it to disk.  
If this parameter is set to OFF, DBWn calculates checksums only for the SYSTEM tablespace, but not for user tablespaces. In addition, no log checksum is performed when this parameter is set to OFF.  
Checksums allow Oracle to detect corruption caused by underlying disks, storage systems, or I/O systems. If set to FULL, DB_BLOCK_CHECKSUM also catches in-memory corruptions and stops them from making it to the disk. Turning on this feature in TYPICAL mode causes only an additional 1% to 2% overhead. In the FULL mode it causes 4% to 5% overhead. Oracle recommends that you set DB_BLOCK_CHECKSUM to TYPICAL.  
For backward compatibility the use of TRUE (implying TYPICAL) and FALSE (implying OFF) values is preserved.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")