.text:0100552A loc_100552A:    ; CODE XREF: QueryInterface+2Bj 
.text:0100552A    pop    edi 
.text:0100552B    pop    esi 
.text:0100552C    mov    eax, ebx 
.text:0100552E    pop    ebx 
.text:0100552F    pop    ebp 
.text:01005530    retn   0Ch 
.text:01005530 QueryInterface endp 
By finding QueryInterface(), you can figure out what interfaces are available based 
on how the ppvObject parameter is set. You don't even have to read the 
QueryInterface() code in many cases. You know that QueryInterface() is part of the 
IUnknown interface, and every COM interface must inherit from IUnknown. So vtable 
cross references to QueryInterface() are often COM interfaces, allowing you to focus 
on finding all cross-references to the QueryInterface() function. In the preceding 
code, there are two cross-references to QueryInterface(), which fits with what you 
learned from examining the code. Following one of these cross-references, you see 
this: 
.text:0100178C off_100178C    dd offset QueryInterface ; DATA XREF: 
sub_100A6B7+Do 
.text:0100178C                           ; sub_100A9AF+13o 
.text:01001790    dd offset sub_1005468 
.text:01001794    dd offset sub_1005485 
.text:01001798    dd offset sub_1005538 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
764 
.text:0100179C    dd offset sub_1005582 
.text:010017A0    dd offset sub_10055CC 
.text:010017A4    dd offset sub_100ACA1 
This code is a table of function pointers, as you expected, for one of the COM 
interfaces the object exposes. The two functions under QueryInterface() are AddRef() 
(sub_1005468) and Release() (sub_1005485): the other two IUnknown functions. These 
three functions are always at the top of every exposed COM interface vtable. 
Similarly, DLL objects need to expose the DllGetClassObject() function. The 
responsibility of this function is to provide an interface pointer for an object, given a 
CLSID and an IID. Therefore, by reading through this function, you can find what 
classes are supported as well as what interface IDs are supported on each object. 
Typically, DllGetClassObject() implementations look something like this example 
taken from MSDN at 
http://windowssdk.msdn.microsoft.com/library/en-us/com/html/42c08149-c251-47
f7-a81f-383975d7081c.asp: 
HRESULT_export  PASCAL DllGetClassObject 
        (REFCLSID rclsid, REFIID riid, LPVOID * ppvObj) 
{ 
    HRESULT hr = E_OUTOFMEMORY; 
    *ppvObj = NULL; 
    CClassFactory *pClassFactory = new CClassFactory(rclsid); 
    if (pClassFactory != NULL)  { 
        hr = pClassFactory->QueryInterface(riid, ppvObj); 
        pClassFactory->Release(); 
    } 
    return hr; 
} 
An object is usually instantiated and then queried for the specified IID. Therefore, 
initialization functions are commonly called from DllGetClassObject(), which sets up 
vtables containing the COM object's exposed methods. 
There are certainly other methods for finding object interfaces, although sometimes 
they're less precise. For example, if you know the IID of an interface you want to find 
an implementation for, you could simply do a binary search for some or all of that IID, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
765 
and then follow cross-references to methods using that IID. Often a cross-reference 
points to the QueryInterface() routine where that IID can be requested. 
Automation Objects and Fuzz Testing 
Automation objects are required to publish type information from their type 
libraries. This means clients can learn about all the callable methods and 
argument types they take just by asking the object for its type information. 
Therefore, by having a client that asks for this information and then using it 
to stress-test each available method, you could quickly find vulnerabilities in 
the application. 
It turns out that a tool exists to do just this. Frederic Bret-Mounet designed 
and developed the COMbust tool, which he spoke about at the Blackhat 
Briefings conference in 2003. This tool takes any automation object specified 
by a user and does some basic fuzz testing on any methods it identifies. It's 
configurable, so users can tune it to test for specific conditions, and is 
available at 
www.blackhat.com/html/bh-media-archives/bh-archives-2003.html. 
Another easy way to locate a QueryInterface() implementation without reading any 
code is to do a text search on the relevant binary code for the E_NOINTERFACE value 
(80004002). Any match for this number is usually a QueryInterface() 
implementation returning an error or a client checking for this error when it has called 
QueryInterface() on an object. By the context of the match, you can easily tell which 
it is. 
ActiveX Security 
An ActiveX control is simply a self-registering COM object deployed inside another 
application, such as a Web browser. The "Active" part of the name comes from the 
fact that these objects can register themselves, thus simplifying their deployment. 
Most ActiveX controls also expose IDispatch interfaces so that they can be 
instantiated and manipulated easily by scripting languages. Generally, these controls 
are hosted in Internet Explorer, although they can be hosted inside any application. 
ActiveX is an important Windows technology with serious security implications 
explored in the following sections. 
Note 
Changes to Internet Explorer 6 and the upcoming Internet Explorer 7 do a lot to 
mitigate the dangers of ActiveX controls. Internet Explorer 7 introduces site-based 
opt-in for controls to prevent a malicious site from instantiating installed controls. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
766 
ActiveX Code Signing 
An ActiveX control is just a bundle of binary code that runs in the context of 
instantiating user. Because of the potential danger of running native code, Microsoft 
designed ActiveX controls to support validation through an Authenticode signature. 
Developers can sign controls with their private keys, and users can validate the 
source of the unmodified control. This signature doesn't in any way state that the 
control is free of vulnerabilities, and it doesn't prevent the control from being 
malicious. It just means there's a verifiable paper trail leading back to the developer. 
Safe for Scripting and Safe for Initialization 
In addition to code signing, ActiveX controls have a few additional parameters to limit 
their attack surface when deployed inside Internet Explorer. These parameters are 
termed "safe for scripting" and "safe for initialization." There are two ways to mark 
interfaces as safe. The first is performed at installation by modifying the registry key 
HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\\Implemented Categories\. The safe for scripting category 
GUID is {7DD95801-9882-11CF-9FA9-00AA006C42C4}, and the safe for 
initialization category GUID is {7DD95802-9882-11CF-9FA9-00AA006C42C4}. 
The second approach to marking a control as safe requires that the control implement 
the IObjectSafety interface, which exposes the GetInterfaceSafetyOptions() method 
to the hosting container. The hosting container calls this method to determine 
whether a specific interface is marked as safe for scripting or initialization and can 
also request that the control be marked as safe by calling the 
IObjectSafety.SetInterfaceSafetyOptions() method. 
Any control marked as safe for scripting can be instantiated and manipulated in 
Internet Explorer. Microsoft advises marking a control as safe for scripting only if it 
must be manipulated from Internet Explorer and doesn't provide any means for 
unauthorized parties to alter the state of the local system or connected systems. This 
guidance is given because a safe for scripting control exposes its methods to any site 
users view, so attackers can leverage the functionally exposed by a control to exploit 
client users. For example, say a scriptable control allows the manipulation of arbitrary 
files. This issue might be part of a faulty design or the result of a vulnerability in path 
checking. Regardless, it would present an unacceptable vulnerability for an ActiveX 
control because it allows any remote attacker to drastically alter the victim's system 
after connecting to a malicious Web site. When reviewing ActiveX controls, you need 
to treat every scriptable method as attack surface and assess them as you would any 
other potentially vulnerable code. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
767 
ActiveX controls can also store and retrieve data between instantiations by using the 
IPersist interface, which is exposed to controls marked as safe for initialization. 
Microsoft advises marking a control as safe for initialization only if it must store 
persistent data internal to Internet Explorer and it handles this data properly. A 
security vulnerability can occur if the object stores sensitive data and exposes it to an 
untrusted source or if a control fails to treat persistent data as data originating from 
an untrusted source. 
Some people might be a little fuzzy on why a control must be separately marked as 
safe for initialization. After all, the control is just a binary, so it can call any Windows 
API function on its own. This means it can read the registry or file system without the 
need for an IPersist interface, so exposing sensitive data is still a concern. However, 
a control can be initialized with parameters provided by a Web site, as shown in this 
HTML fragment that instantiates a control: 
This fragment creates an instance of a control and attempts to initialize it with the 
MyServer parameter. This parameter is accepted through the IPersistPropertyBag 
interface, which inherits from the base IPersist interface. The control retrieves the 
parameter with the following code: 
STDMETHODIMP MyControl::Load(IPropertyBag *pProps, 
       IErrorLog* pErrLog) 
{ 
    _variant_t    myVar; 
    int           hr = 0; 
    hr = pProps->Read("MyServer", &myVar, pErrLog); 
    if (hr != 0) return hr; 
    strcpy(m_serverName, myVar); 
    return hr; 
} 
This code is a simple implementation of the IPersistPropertyBag::Load() method. 
Internet Explorer calls this method when loading the control, and the control then 
retrieves the PARAM values via the IPropertyBag interface. What's important here is 
that you follow the path of these properties and see what they affect. The _variant_t 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
768 
class in this code has overloaded operators to handle type conversions, so don't be 
distracted by that part. Instead, just note that the bold line copies the property string 
into a member variable. Here's the declaration of that member variable: 
char   m_serverName[512]; 
It's fairly obvious that this code is performing an unbounded string copy into a 
fixed-size buffer, so this particular IPersist interface is vulnerable to a 
straightforward buffer overflow. This vulnerability might seem obvious, but this exact 
pattern has been seen in more than one ActiveX control. The issue is that developers 
often don't consider control instantiation to be an exposure point. You need to pay 
special attention to all IPersist interfaces to see whether they handle input in an 
unsafe manner. 
Site-Restricted Controls 
One of the best ways of limiting a control's attack surface is to instantiate it only for 
a known set of locations. Implementations can limit instantiation based on hostname, 
but restrictions can be based on any connection information by implementing the 
IObjectWithSite interface and the SetSite() method. The WebBrowser control can 
then be used to provide detailed connection information. Microsoft provides the 
SiteLock template as a starting point for creating a site-restricted control. 
If a control is locked to a particular site, you need to determine how effective that lock 
is. There might be issues in the string comparisons that allow you to bypass the 
checks, similar to the topics discussed in Chapter 8(? [????.]), "Strings and 
Metacharacters." There might also be Web application vulnerabilities at the hosting 
site that allow you to instantiate the control in the context of the site, but with your 
own parameters and scripting. Read Chapters 17(? [????.]), "Web Applications," and 
18(? [????.]), "Web Technologies," for more information on vulnerabilities that 
involve this attack vector. 
The Kill Bit 
Sometimes a vulnerability is identified in a signed control. This control can then be 
delivered by a malicious Web site, allowing attackers to exploit a control that 
otherwise appears safe. A site-restricted control is less vulnerable to this type of 
attack; however, Web application vulnerabilities (such SQL injection and cross-site 
scripting) might allow attackers to exploit the underlying vulnerability. For this reason, 
Microsoft introduced the ActiveX kill bit, which is used to mark a control version as 
unauthorized. The kill bit is set by setting the CompatibilityFlags DWORD value to 
0x00000400 in this registry location: 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\ActiveX 
Compatibility\. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
769 
This key and value aren't usually present, so they need to be created by the control's 
installer. Developers often have a new control set this value for all previous versions, 
just to prevent earlier versions from being installed. Note whether this value is set; if 
it's not, you might want to look at vulnerabilities in previous control versions. 
Threading in ActiveX 
Most ActiveX controls are registered for the STA model, so thread synchronization 
issues aren't generally a problem. However, an ActiveX control can be registered as 
an MTA. This model is a bad idea from a usability perspective because it can cause 
GUI synchronization issues. However, an MTA control might also expose 
synchronization vulnerabilities. 
Reviewing ActiveX Controls 
Proprietary ActiveX controls are often frowned on in modern Web application 
development. They've mostly been replaced with newer technologies that are more 
portable and less prone to security issues. However, they are still deployed in many 
legacy and corporate intranet sites. As a reviewer, one of your first considerations 
should be whether a Web-hosted ActiveX control is necessary and determining the 
cost of replacing it. 
If the control is necessary, review it as you would any other binary application. 
However, you also need to ensure that the control handles the considerations 
mentioned previously in this section. Here's a basic checklist: 
1. If you're reviewing the control as part of a larger system, check that it's signed 
with a certificate trusted by clients. If the control isn't signed, look for 
vulnerabilities in the rest of the system that could allow attackers to deploy a 
malicious control. 
2. If the control must be marked safe for scripting, evaluate all exposed 
IDispatch paths closely, including vulnerabilities resulting from the intended 
functionality and implementation vulnerabilities. 
3. If a control must be marked safe for initialization, evaluate all IPersist calls 
closely. Look for any exposure of sensitive data. Also, look for any mishandling 
of persistent data, such as conditions that could result in memory corruption. 
4. Check whether the control is site restricted. If it is, look for vulnerabilities in 
the restriction implementation that could allow it to be instantiated by another 
site. Also, check for any other implementation vulnerabilities that could make 
this interface exploitable. If the control is part of a larger system, look for Web 
application vulnerabilities that could be used to circumvent the site lock. 
5. Check to see whether the control sets the kill bit for previous versions. If not, 
you might want to do a cursory analysis for vulnerabilities in earlier versions of 
the control. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
770 
6. If the control uses the MTA model, check for synchronization issues that could 
be exploited by scriptable methods. 
7.8.8 Summary 
Windows provides a variety of native IPC mechanisms that applications can use to 
communicate with each other, whether they exist on the same computer or on 
different computers sharing a common network. Despite providing a rich security 
model, these IPC mechanisms can increase an application's attack surface, thus 
increasing the risk of compromise. You have examined access permissions available 
with Windows IPC mechanisms and the implications of programmers using these 
access controls in different circumstances. You have also seen that rogue applications 
can attack the underlying IPC mechanisms to impersonate or disable legitimate 
system services. By understanding these vulnerabilities and how they're attacked, 
you should be able to identify, assess, and prevent them. 
7.9 Chapter 13.  Synchronization and State 
Chapter 13. Synchronization and State 
"The future influences the present just as much as the past." 
Friedrich Nietzsche 
7.9.1 Introduction 
Up to this point, most of the vulnerabilities you've seen occur in a lone synchronous 
code path; that is, each vulnerability can be traced from a single entry point to an 
endpoint. However, most modern software responds asynchronously to external 
triggers such as UNIX signals, Windows events, or thrown exceptions. Asynchronous 
execution is even more common with the growing popularity of multithreaded 
programming, in which different threads of execution share the same address space. 
These multithreading and multiprocessing applications introduce unique security 
vulnerabilities that occur when an attacker can manipulate the state of concurrent 
instances of execution. This chapter shows you how to understand and identify the 
complex vulnerabilities that result from security oversights in this type of state 
manipulation. 
7.9.2 Synchronization Problems 
Certain types of operations require atomicitythat is, they must happen in an 
uninterruptible sequence. Errors can occur when applications fail to enforce atomicity 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
771 
requirements between concurrent instances of execution. To understand this issue, 
imagine two processes sharing a memory segmentone process writing to it and one 
reading from it, as shown in Figure 13-1. 
Figure 13-1. Shared memory between two processes 
The reader process could be interrupted while copying data out of the memory 
segment by the writer process, which places alternative data at the location being 
read from. Likewise, the writer process could be interrupted by the reader when it's 
only half finished writing data into the shared memory segment. In both situations, 
the shared memory segment is said to be in an inconsistent state because it's halfway 
through an operation that should have been atomic between the two processes. 
OSs provide synchronization primitives that address concurrent programming 
requirements. Atomic access to resources is often controlled through a mutual 
exclusion (mutex) primitive. When a thread attempts to access the shared resource, 
it must first acquire the mutex. Acquiring a mutex means that other processes or 
threads attempting to acquire the same mutex are blocked (waiting) until the owner 
releases the mutex. Acquiring ownership of a mutex may also be referred to as 
locking or holding; releasing ownership of a mutex may be referred to as unlocking or 
signaling. 
Unfortunately, complex locking requirements can make it difficult to use 
synchronization APIs correctly. Additionally, code with concurrency issues exhibits 
symptoms infrequently, with error conditions that often appear random and 
non-repeatable. This combination of factors makes concurrency issues extremely 
difficult to identify and trace. As a result, it's easy for errors of this nature to go 
undiagnosed for a long time, simply because the bug can't be reproduced with what 
appears to be identical input. The following sections cover the basic problems that 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
772 
concurrent programming introduces so that you can relate this material to more 
concrete vulnerabilities later in the chapter. 
Reentrancy and Asynchronous-Safe Code 
The first step in understanding concurrency issues involves familiarizing yourself with 
the concept of reentrancy. Reentrancy refers to a function's capability to work 
correctly, even when it's interrupted by another running thread that calls the same 
function. That is, a function is reentrant if multiple instances of the same function can 
run in the same address space concurrently without creating the potential for 
inconsistent states. Take a look at an example of a non-reentrant function: 
struct list *global_list; 
int global_list_count; 
int list_add(struct list *element) 
{ 
    struct list *tmp; 