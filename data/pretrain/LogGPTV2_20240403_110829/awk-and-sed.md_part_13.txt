其中使用了
---
## Page 84
do. outline 的结果显示如下:
Do.outline脚本的目的是通过打印缩进格式的标题从而使结构更加突出。
我们使用的这个宏包中有一个章标题宏，
视图。它处理包含被编码的标题部分的行，例如：
们创建了名为 do.outline 的 shell脚本，这个脚本使用 sed 生成了文档的大纲
我们的下一个示列不仅提取了信息，而且对它进行修改从而使它更易阅读。我
生成提纲
件，在这里它可以成为重新定义宏的基础。
这个脚本在标准输出上打印了结果，
在创建这个脚本的过程中，
就会搜索-mm 宏包。而且，为了清楚和易读、$1 的值被赋给变量 mac。
值。注意，
这里的新内容是一个case 语句，
为第二个命令行参数。
“H2”
“Ah”
的
在
别
“.de”的后面指定了一个空格，后面跟一个星号，这意味着这个空格是可选
。
. Ah "Shell Programming"
。-ms 宏在“.de”和宏的名字之间有一个空格，
 $ do.outline ch13/sect1
可以通过修改模式来适应这两种情况。
sed -n "/^\. de *$mac/,/^\. \. $/p" $file 
esac
case $2 in
mac="$1"
# getmac - read macro definition for $1 from package $2 
#! /bin/sh
/^\. de *$mac/
(man)
(mm)
(sw
“H3”等等。可以使脚本适用于任何标识文档结构的宏或标志。
“Bh”和“Ch”
首先给file 赋了一个默认的值、
fi le="/usr/lib/macros/mmt";;
 file="/usr/lib/macros/an";;
QQ群：
50192241
在-mm宏包中，
我们在宏定义第一行中发现了不同宏包之间的区
它用于测试$2的值并随后给变量file 赋一个
但是它可以被很容易地重定向到一个文
- 84 -
，其名称为“Se”，
这些宏可以是“H”
、所以如果用户没有指明宏包，那么
，而-mm 和-man 没有。幸运的
第四章
分层标题命名为
编写 sed 脚本
“H1”
---
## Page 85
宏参数中的引号被同时传递进来。我们可以编写一个替换命令来删除这些引
号
当测试这个脚本时，产生如下结果：
程序的默认输出。这个 sed 脚本包含3个替换命令，
do. outline 对在命令行（“$*”）上指定的所有的文件起作用。
下面是基本的脚本:
数
我们需要在那些行上进行替换，
O
行：
让我们来看如何将这个脚本放置在一起。这个脚本需要匹配以下面的宏开始的
它将结果打印到标准输出上（当然，在文件内没有发生任何改变）。
-行。每个替换命令都可以用p 标志来修饰，这个标志表示该行应该打印。
文量的空格（使用制表符）来缩进每个标题。（记住，
。
。）
s/^\.Bh /··B. /p'
s/~\. Se 
子节标题（.Bh）
节标题（.Ah）
章标题（.Se)
s/~\. A
CHAPTER "13" "Let the Computer Do the Dirty Work"
sed -n 
CHAPTER 13 Let the Computer Do the Dirty Work
8
B
A. Shell Programming 
"Passing Arguments to Shell Scripts"
"Shell Programming"
V
"Stored Commands"
/·A./p
/CHAPTER /p
B
B
8
B
B
What We’ ve Accomplished
 Setting Default Values 
Repetitive Execution
Discarding Used Arguments
Conditional Execution
Passing Arguments to Shell Scripts 
QQ群：
$*
50192241
用文本标记（例如，A、B）取代宏并添加适当
- 85 -
 用字母替换代码并缩进每
第四章
“.”表示一个制表
编写 sed 脚本
-n选项抑制了
---
## Page 86
行。为了完成这个任务，我们使用!地址修饰符：
将会怎样？我们可以重定义这个命令来排除含有3个或多个连续的连字符的
也许在很多情况下我们不想应用这个替换命令。如果有人用连字符绘制水平线
我们在替换字符串中用两个反斜杠来表示\(em，因为反斜杠在 sed 中有特殊的
下面的命令将两个连续的破折号转换为一个长破折号。
折号提供了一个特殊的字符名、但是键入“\(em”很不方便
）来键入。在排版过程中，
在一些类似打字机的设备上（包括CRT）
这些编辑操作永远不会被写回到文件中。
让我们看看将 sed 作为真正的流编辑器的一个应用，在管道中进行编辑操作,
编辑工作转移
略版本。
可以修改这个脚本以搜索任意种类的编码格式。例如，下面是LATEX文件的粗
这个脚本当前产生的结果在前面已显示过。
改，不管它们之后是否在脚本中输出。
后删除引号。我们必须将它放在脚本的起始位置并针对所有的行进行同样的修
放在脚本中的什么位置。
指定全局标志g来捕获一行上的所有出现是必要的。然而，
含
义。
s/ "//g
 s/--/\\(em/g
s/\\section/·A. /p
s/[]//g
s/^\.Bh /··B. /p’$*
s/~\. Ah /·A. /p 
s/~\. Se 
/---/!s/--/\\(em/g 
sed -n 
s/ "//g
sed -n 
/CHAPTER /p
QQ群：
如果我们将它放在脚本的结尾，
50192241
它被作为一个长破折号（—）打印。Troff 为长破
*￥$
86-
一个长破折号被作为一对连字符（-
第四章
那么它将在输出行之
关键是将这个命令
编写 sed 脚本
---
## Page 87
shell脚本的内容：
以将 sed 变量设置为空字符串，因为如果使用 troff，我们指向生成这种改
这个格式化和打印文档的命令行（注意我们为 nroff 设置了-N选项，所以它可
这个脚本对一些变量（以美元符号为前缀）进行赋值和求值，这些变量构成了
我们使用名为 format 的 shell脚本，使用 sed 来达到这个目的。下面是这个
折号的转换对用户来说是不可见、并且在格式化进程中没有额外的步骤。
什么不再原始文件中直接进行永久性修改？一个很简单的原因是这样做没有
一个中间文件。编辑在运行中进行，
换句话说，
用做troff 文件的预处理程序。文件将用 sed 处理，然后输送到troff。
可以在脚本中使用这个命令自动插入长破折号。要实现这一功能，可以将 sed
命令。
连续的连字符的行，不要应用这个编辑操作。
影响的行，并且使用！反转模式匹配的意义。简单地说，
要
可能要花一点时间来理解这个语法。所不同的是使用模式地址限制受替换命令
Ip"
I loo$ suoiados y+ou$ l oids ubes ia+ I pass sal!t$ zeo, leaa 
done
sed ’ /---/!s/--/\\(em/g’ file | troff
shift
while ［ $#-gt 0］
sed="]
files= options= roff="ditroff -Tps"
eqn= pic= col=
#! /bin/sh 
一输入一直和用户兼容的内容保持一致，但是troff能产生看上去版面
else echo "format: $1: file not found"; exit 1 
 esac
*）
 if ［ -f $1 ]
 sed 改变了这个输入文件并且将输出直接传递到troff，而不用创建
I sed ′
QQ群：
'|eqn";;
/---/!s/--/\\(em/g’
50192241
，而且不会影响输入文件。你也许想知道为
”在所有的其他行上，应用替换
第四章
“如果找到含有3个
，所以连字符到长破
编写 sed 脚本
质
必
---
## Page 88
式化和打印文档的管道中调用它。
连字符转换成破折号的命令放置在“cleanup”脚本中，并且在使用 troff 来格
号，例如，标点符号、空格、制表符或长破折号前后的引号。最后一个命令允
找行结尾处的引号并把它换成一个右引号。剩下的命令寻找不同上下文中的
第一个替换命令寻找一行开始处的引号并把它换成一个左引号。第二个命令寻
这事一个相当困难的编辑工作，因为有许多涉及到标点符号、空格和制表符的
时，产生合适的“双引号”
引号字
troff 中，
作。例如，
当对一个文档排版时，
际的影响）。
变
。键入两个连续的单引号（’
，即使 nroff 可以理解这个特殊的字符\(em,进行这种改变也不会对输出有实
s/@DQ@/"/g
s/\l(em"/\l(em‘‘/g
s/"\. /’
s/\. "/. 111&'
s/";/'
]V/]\/s
s/("/(‘
s/"]/,
s/")/,
s/."/.
s/" /'
s/ "/
s/"?$/'′ ?/g
s/"$/'
字符换成一个单个的左引号或右引号（取决于上下文），也就是，当排版
多数键盘不允许键入左引号和右引号（“和”
，
，
’.111&/g
:/g
#
,/g
;/g
QQ 群:
%
，将连字符换成长破折号不是惟一要做的“美化的”工
50192241
’）来标识右引号。我们可以使用 sed 将每个双
- 88 -
第四章
与“和”
编写 sed 脚本
在
---
## Page 89
awk 工作时，你会发现这些提示同样很有用。
随着你的经验的增长，
4
么和为什么这么做充满信息。
创建和测试 sed 脚本的方法。你将逐渐依赖这些方法，并且对你的脚本在做什
脚本中以创建易于使用的应用。当使用 sed工作时，你会开发越来越多的用于
目前，你已经看过了 4种不同类型的 sed 脚本，
开始 PromiSed Land
下面是几个提示：
成剩下的几个编辑工作比较好。
作。如果遇到困难的情况，
要使用！尝试完成你用 sed 脚本可以完成的事，
购买之前要采样。从测试文件中出现的小示列开始。在示列上运行你的脚本
了解你的输入！在使用 grep 设计脚本之前，自信检查输入文件。
件正确的前提下，
入文件来看看发生了什么变化。亲自证明你的脚本是完整的。
做之前要仔细考虑。
作同样重要。然后增加示列的规模，试着增加输入的复杂性。
并且确信脚本角
能正常工作，
QQ群：
，你的脚本确定可以正确地工作，
，在以上列表中添加你自己的“脚本化提示”。当使用
仔细地测试你添加到脚本中的每个命令。
50192241
检查并查看它们发生的频繁程度。有时手动来完
记住，
确保脚本在你不想让它工作的地方不能工
8
以及它们如何被嵌入到 shell
第四章
，但不必100%完成这个工
而不仅仅是你认为可以。
编写 sed 脚本
，确定在输入文
，比较输出和输
---
## Page 90
记住命令还可以用大括号进行分组以使其作用于同一个地址：
式为：
有一些命令只接受单个行地址。它们不能应用于某个范围的行。它们的语法格
址，这两个地址，这两个地址用来标识行的范围。这些命令的语法格式为：
行地址对于任何命令都是可选的。它可以使一个模式，
中，我们介绍了其大部分内容。
在看单个命令以前，需要回顾一下关于所有 sed 命令的两点语法。在上一个章
sed 命令的语法
控制（例如，决定下一步执行哪个命令）的方式。
除）
Sed 命令集合由25个命令组成。本章我们介绍4个新的编辑命令：d（删
本章内容 
，a（追加）
退出
打印行号
注释
sed 命令语法
 address i
读和写文件
下一步
打印
转换
列表
追加、
删除
替换
command3
command2
command1
 [l ine-address]command 
，插入和更换
[address]command
í（插入）和c（更改）。我们还要看一下改变脚本中流程
QQ群：
50192241
90
第五章
被描述为由斜杠、
基本 sed 命令
基本 sed 命令 
第五章
行号
---
## Page 91
2）。为了前后一致，必须用#开始继续行，以便使行的目的显而易见。
如果有必要，
下列显示了一个脚本的第一行：
注释行的第一个字必须是“#”号。注释行的语法如下：
注释1：
本允许则应该使用它
在命令行的后面。
环境下运行的 sed v