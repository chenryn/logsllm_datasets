Alice et al.
256 or 1 − 3
around 1 − 3
implementation applies a mask to the address type field.
16 determines whether the Shadowsocks
In practice, the GFW is observed to send a set of type NR1 and
NR2 probes to the same server. Instead of sending the probes all at
once, the GFW sends a few of them in each hour. We conjecture
that the GFW does this in order to make the probes less noticeable
and harder to fingerprint. A design like this also allows the GFW
to use resources in a more balanced and efficient way.
The probe lengths that the GFW sends, marked in red in Fig-
ure 10, coincide with thresholds at which reactions change in certain
Shadowsocks implementations. For example, a server that uses ci-
phers with 8-byte IVs will time out 8-byte probes, and immediately
RST 9-byte probes. The GFW covers this transition point by send-
ing probes of length 7, 8, and 9 bytes. However it is worth noting
that type NR1 probes of length 32–34 bytes and 40–41 bytes, as
well as type NR2 probes of length 221 bytes, do not coincide with
any server thresholds. However, they may still be useful to identify
Shadowsocks servers. Depending on implementation, these probes
may be used to calculate the empirical probability for a server to
send a RST. If the possibility is close to 1− 3
16, the attacker
may infer that the Shadowsocks server uses stream ciphers.
256 or 1− 3
5.3 Intention Behind Replay-based Probes
Servers’ reactions to replay-based probes. Table 5 summarizes vari-
ous servers’ reactions to replay-based probes. This table only covers
the case where replays are long enough to contain a complete target
specification, because, in the absence of external traffic shaping,
the genuine payloads on which the replays are based are always
long enough to contain that information.
Implementations without a replay defense mechanism. The reac-
tion of a server to type R1 identical replays depends on whether it
has a replay defense mechanism or not. Servers without a replay
defense mechanism, such as OutlineVPN v1.0.6–v1.0.8, respond to
identical replay with a stream of data in one or many packets. As
soon as a prober receives data, it ACKs the data and sends FIN/ACK
to close the connection.
An adversary might even guess what protocol is being proxied,
by checking if the length of the server’s responses are always the
same for a given replayed payload. Although the responses of the
Shadowsocks servers are encrypted, a consistent response length
may suggest that the underlying message is an HTTP response or
TLS ServerHello, for example.
A key observation is that the offsets of the bytes that change in
probe types R2, R3 and R5 contain the IV or salt. This means that
a Shadowsocks server’s reactions to these probes are no different
from the random probes discussed in Section 5.2. Type R4 probes
may be a chosen ciphertext attack, targeting Shadowsocks servers
that use stream ciphers with a 16-byte IV. Comparing to probes of
type R2, R3 and R5, which are also essentially chosen cipher attacks,
type R4 is more fine-grained, because a censor can get the exact
probability of each reaction by enumerating all 255 altered byte
values.
Implementations with a replay defense mechanism. Even with a
replay defense mechanism, the behaviors of a Shadowsocks imple-
mentation may be distinguishable. For example, Shadowsocks-libev
120
Table 5: Servers’ reactions to identical replays (type R1) and
byte-changed replays (types R2–R5) differ depending on re-
play detection and stream/AEAD ciphers. R: Reset, T: Time-
out, F: FIN/ACK, D: Sending Data. Here we assume all re-
plays are long enough to contain a complete IV and target
specification.
Implementations
Shadowsocks-libev
v3.0.8–v3.2.5
Shadowsocks-libev
v3.3.1, v3.3.3
OutlineVPN
Encryption
Mode
Stream
AEAD
Stream
AEAD
AEAD
Identical
Replay
R
R
T
T
D
Byte-changed
Replay
R/T/F
R
T/F
T
T
implements its replay defense using a Bloom filter that remembers
what IVs and salts have already been received [40].
As shown in Table 5, when AEAD ciphers are used, servers’ reac-
tions to identical and byte-changed replays are consistent. However,
when stream ciphers are used, the servers’ reactions to identical
and byte-changed replays are inconsistent. For identical replays,
Shadowsocks-libev v3.0.8–v3.2.5 is guaranteed to send a RST imme-
diately; while the same server receiving byte-changed replays will
have one of three different reactions: Reset, Timeout, or FIN/ACK.
Furthermore, with stream ciphers, an attacker can detect whether
a replay filter exists. For example, the attacker can send the same
random probe to the server twice. If the first probe happens to
cause an outgoing connection to some remote server, while the
second probe is blocked by the replay filter, the difference in the
timing of responses will tell the attacker that a replay filter is in
place. Although we cannot confirm that this is the exact logic used
by the GFW, we did observe that around 10% of type NR2 probes
were sent to the same server more than once.
6 GFW’S BLOCKING MODULE
Since July 2019, we have been running experiments on 63 vantage
points in China, the US, the UK, the Netherlands, and Singapore.
Each vantage point was used either as a server or a client. We
used various Shadowsocks implementations [25, 44, 45, 47] and
settings. Interestingly, although many of our VPSes have been
under intensive active probing, only three have been blocked. In
this section, we analyze and speculate on the nature of the blocking
and unblocking mechanism used by the GFW.
Block by port, or by IP address? The three blocked servers were
not all blocked in the same way. Some were blocked by dropping
all traffic from a specific server port (block by port), and some by
dropping traffic from all ports (block by IP address). In either case,
only the server-to-client direction was blocked. This method of
unidirectional packet dropping, or null routing, is similar to the
way GFW blocks Tor servers, as shown in previous work [56].
It may be reasonable, from the censor’s point of view, to block
an entire IP address. The servers running Shadowsocks are usually
dedicated solely to circumvention, and do not host other services
that the censor cares to keep accessible, so there is little harm to
the censor in blocking the server entirely.
How China Detects and Blocks Shadowsocks
IMC ’20, October 27–29, 2020, Virtual Event, USA
When to unblock? GFW is known to probe blocked Tor servers
every 12 hours, and unblock them when Tor no longer appears to
be running [56]. In contrast, in our experiments, we saw no regular
checks to see whether blocked servers were still running Shadow-
socks. One of our servers became unblocked more than a week
after being blocked. The server had continued to run Shadowsocks
even after being blocked, and we observed no probes to the server
before the GFW unblocked it. This may be because, as explained in
Section 5.2, it takes more probes to confirm Shadowsocks than it
does Tor, making post-block checks more expensive.
Why were our servers rarely blocked? While the fact that active
probing happens is clear, it is still unclear to us how active probing
relates to the blocking of Shadowsocks servers. Few of the servers
that received probes were blocked. One of the servers that was
blocked had operated for only around 15 minutes, and had not
received nearly as many probes as other servers that did not get
blocked.
We have two hypotheses attempting to explain this phenom-
enon. One is that the blocking of Shadowsocks is controlled by
human factors. That is, the GFW may maintain a list of detected
or suspected Shadowsocks servers, and it is up to a human deci-
sion whether the servers on the list should be blocked or not. This
hypothesis would partially explain why more blocking has been
reported during politically sensitive periods of time [17, 21].
Another hypothesis is that active probing is ineffective against
the particular Shadowsocks implementations and versions that we
used in most of our experiments. Indeed, all three servers that
got blocked were running ShadowsocksR [47] or Shadowsocks-
python [44], which differ from the Shadowsocks-libev [45] and
OutlineVPN [25] implementations we used in most of the experi-
ments. However, numerous user reports suggest that Shadowsocks-
libev and OutlineVPN are not immune to being blocked, in general.
7 CIRCUMVENTION
The detection of Shadowsocks happens in two stages: 1) passive
identification of suspected Shadowsocks connections, then 2) ac-
tive probing of the server. Therefore, to avoid blocking, one can
1) evade the passive detector, or 2) respond to active probes in a way
that does not result in blocking. Below, we introduce and discuss
these two circumvention strategies. We have shared our findings
and proposed defenses with the developers of Shadowsocks-libev
and OutlineVPN, which has led to improvements to those tools
(see Section 11).
7.1 Defense Against Traffic Analysis
Changing payload lengths in the client-to-server stream is effective.
In Section 4.2, we showed that the GFW considers the length of the
first data packet in a connection to identify Shadowsocks traffic.
This finding suggests that we can mitigate the GFW’s traffic analysis
attack by altering packet lengths.
Brdgrd [54] (bridge guard) is software that can be run on a
Shadowsocks server that causes the client to break its Shadowsocks
handshake into several smaller packets. Brdgrd was originally in-
tended to disrupt the detection of Tor bridges by forcing the GFW
to do complicated TCP reassembly [56], but here we take advantage
of its ability to shape client packet sizes.
121
Figure 11: The intensity of active probing diminishes when
brdgrd is active.
As a test, we set up a Shadowsocks server and let a Shadowsocks
client make 16 connections to it every 5 minutes. We enabled and
disabled brdgrd at random times, and measured the rate of active
probing under both conditions. Table 1 summarizes the time span
of the experiment.
Figure 11 shows the number of probes received by the Shadow-
socks server over time. It shows probing going to zero within a few
hours of activating brdgrd. As soon as we disabled brdgrd again,
active probing resumed. The second time we enabled brdgrd, prob-
ing completely stopped for around 40 hours, but later a few more
probes arrived. Note that receiving a few active probes does not
necessarily mean that changing packet sizes is ineffective, because
the server still received a small number of probes even 50 hours
after we deactivated the client. The reduction in probing while
brdgrd was active is not just a coincidence, because no significant
change in the number of active probes was observed in a control
server that did not have brdgrd installed.
We also set up a server that had brdgrd enabled from the begin-
ning, before any Shadowsocks client had connected to it. Although
the same number of connections were made to both servers, this
server received even fewer probes than the server that had not
enabled brdgrd until after starting.
These observations further confirm that the traffic analysis mod-
ule of the GFW considers the TCP segment size of traffic from client
to server when detecting Shadowsocks traffic. Modifying packet
sizes can significantly mitigate active probing by disrupting the
first step in classification.
Limitations on Brdgrd. While brdgrd can effectively reduce active
probing for the time being, it cannot be regarded as a permanent
solution to Shadowsocks blocking for the following reasons.
First, to make brdgrd less fingerprintable, the TCP window size
is designed to be randomly picked from a range. However, having
inconsistent TCP window size announcements may itself be a fin-
gerprintable feature. This issue may be mitigated by sticking to a
fixed TCP window size for a certain amount of time.
Second, brdgrd will have to announce a TCP window size that is
uncommonly small, unlike that of any real TCP implementation.
Third, brdgrd can result in connection failure for some Shadow-
socks implementations. As shown in Figure 10, some Shadowsocks
implementations will immediately RST the connection when the
050100150200250300350400Relative time (hours)0510152025Prober SYNs per hourBrdgrd activeLegitimate client connections activeIMC ’20, October 27–29, 2020, Virtual Event, USA
Alice et al.
first data-carrying packet is not long enough to contain a complete
target specification. It is not rare for brdgrd to chop the packets
into such small pieces, triggering an immediate RST.
We conclude that a more thoughtful traffic shaping mechanism
is required to defend against the traffic analysis while preserving
usability and efficiency.
7.2 Defense Against Active Probing
Even with perfect traffic shaping—meaning the adversary cannot
passively distinguish Shadowsocks circumvention traffic from legit-
imate traffic at all—it is important to defend against active probing.
This is because a well-resourced adversary could skip the traffic
analysis step and probe all IP–port pairs that are observed to re-
ceive connections. Here we summarize and discuss strategies for
defending against replay-based probes and random probes.
Proper authentication. As introduced in Section 5, the lack of au-
thentication in Shadowsocks stream ciphers permits probing attacks
that exploit ciphertext malleability. This design flaw has been the
cause of many vulnerabilities in Shadowsocks [8, 15, 15, 16, 36, 37]
as well as other circumvention tools like V2Ray [2, 35]. We therefore
suggest that users use AEAD ciphers exclusively, and encourage
circumvention tool developers to deprecate unauthenticated cryp-
tographic constructions entirely.
Replay filtering based on both nonces and timing. We have shown
in Section 3.5 that a realistic adversary model of active probing
should permit the censor to perform replay attacks after an arbitrar-
ily long delay. Such a model reveals an asymmetry between attack
and defense for purely nonce-based replay defense mechanism.
While it does not cost much in terms of resources for the GFW
to record a few legitimate payloads and replay them after a fairly
long delay, it is costly and complicated for Shadowsocks servers
to remember the nonces of all authenticated connections forever,
or until the master password is changed. The Shadowsocks server
must remember those nonces even after being restarted; otherwise,
the replay filter will be ineffective against replays that span a restart.
Fortunately, this unfair game can be inverted by the addition of a
timing-based defense mechanism: the server only responds to au-
thenticated connections that are not replays and whose timestamp
is within an expiration time, similar to what VMess servers do [2].
This way, the server does not need to remember nonces forever,
but only for a limited time.
Being consistent in servers’ reactions. As discussed in Section 5,
circumvention protocols should react consistently not only in nor-
mal operation, but also when an error occurs. Censors may in-
tentionally trigger protocol edge cases in an attempt to finger-
print servers. Using inconsistencies similar to what we found in
Shadowsocks-libev and OutlineVPN, Frolov et al. [19] demonstrated
that various proxy servers, including Shadowsocks-python and
OutlineVPN, can be identified using TCP flags and timing metadata
after the servers close a connection. They suggest that proxy servers
should read forever when errors occur, rather than terminating the
connection. Doing so not only avoids revealing a specific timeout
value, but also lets the server close the connection with consistent
TCP flags in the non-error case.