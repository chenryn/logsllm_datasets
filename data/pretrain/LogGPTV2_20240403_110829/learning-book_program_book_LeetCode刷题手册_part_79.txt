func max(a, b float64) float64 {
if a > b {
return a
---
## Page 773
return b
815.BusRoutes
题目
We have a list of bus routes. Each routes [i] is a bus route that the i-th bus repeats forever. For
example if routes [0] = [1, 5, 7] , this means that the first bus (0-th indexed) travels in the
sequence 1->5->7->1->5->7->1->. forever.
Aq Suane,1 * dojs snq o o o juem am pue (snq e uo jou Aljeqjus) S dops snq je jejs aM
buses only, what is the least number of buses we must take to reach our destination? Return -1 if
it is not possible.
Example:
Input:
routes = [[1, 2, 7]， [3, 6, 7]]
S = 1
9 = 1
Output: 2
Exp1anation:
The best strategy is take the first bus to the bus stop 7, then take the
second bus to the bus stop 6.
Note:
●1 5->7->1->5->7->1->.的车站路线行
驶。假设我们从S车站开始（初始时不在公交车上），要去往T站。期间仅可乘坐公交车，求出最少
乘坐的公交车数量。返回-1表示不可能到达终点车站。
说明：
●1 0{
res++
qlen := 1en(queue)
for i := 0; i1->2->3
G = [0, 1, 3]
output: 2
Explanation:
0 and 1 are connected, so [o, 1] and [3] are the two connected components.
Example 2:
Input:
head: 0->1->2->3->4
G = [0, 3, 1, 4]
output: 2
Explanation:
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two
connected components.
Note:
●If N is the length of the linked list given by head, 1  -1 {
word := strings. ToLower (paragraph[start:i])
freqMap[word]++
start = -1
}else{
if start == -1 {
start = i
if start != -1 {
word := strings.ToLower(paragraph[start:])
freqMap[word]++
// Strip the banned words from the freqmap
for _, bannedword := range banned {
delete(freqMap, bannedword)
// Find most freq word
mostFreqword, mostFreqCount := "", 0
for word, freq := range freqMap {
---
## Page 779
if freq > mostFreqCount{
mostFreqword = word
mostFreqCount = freq
}
return mostFreqword
826.MostProfitAssigningWork
题目
We have jobs: dlifficulty[ij] is the difficulty of the ith job, and profit[i] is the profit of the ith job.
Now we have some workers. worker[i] is the ability of the ith worker, which means that this
worker can only complete a job with difficulty at most worker[i].
Every worker can be assigned at most one job, but one job can be completed multiple times
For example, if 3 people attempt the same job that pays 1,thenthetotalprofitwillbe3. If a
worker cannot complete any job, his profit is $0.
What is the most profit we can make?
Example 1:
Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker =
[4, 5,6,7]
Output: 100
Explanation: workers are assigned jobs of difficulty [4,4,6,6] and they get
profit of [20,20,30,30] seperately.
Note:
●1 = tasks[index].Difficulty {
++xapu,
fmt.Printf("tasks [index] = %v\n", tasks[index])
if index > 0 {
res += tasks [index-1].Profit
return res
}
828.UniqueLetterString
题目
THIS PROBLEM COPYRIGHT BELONGS TO CODILITY.COM
Example 1:
Example 2:
题目大意
如果一个字符在字符串S中有且仅有出现一次，那么我们称其为独特字符。例如，在字符串S=
"LETTER"中，“L”和“R”可以被称为独特字符。我们再定义UNIQ（S）作为字符串S中独特字符的个数
那么, 在 S =“LETTER" 中, UNIQ("LETTER") = 2。
对于给定字符串S，计算其所有非空子串的独特字符的个数（即UNIQ(substring)）之和。如果在S的
不同位置上出现两个甚至多个相同的子串，那么我们认为这些子串是不同的。考虑到答案可能会非常
大，规定返回格式为：结果mod10^9+7。
解题思路
·这一题可以先用暴力解法尝试解题，不过提交以后会发现判题结果是超时。出错的一组数据是一个
有10000个字符的字符串。暴力解法中间由于遍历了太多的子区间，导致了超时。
·这道题换一个角度思考问题。当子字符串中字符×出现了2次以上，那么它就对最终结果没有任
何影响，所以只有当某个字符只出现一次的时候才会影响最终结果。再者，一个子字符串中不重复
的字符的总个数，也就是这个子字符串UNIQ值。例如，“ABC"，这个子字符串的UNIQ值是3，
---
## Page 782
可以这样计算，它属于A的独特的字符串，也属于B的独特的字符串，也属于C的独特的字符
串，那么计算这个子字符串的问题可以分解成计算A有多少个独特的子字符串，B有多少个独特的
子字符串，C有多少个独特的子字符串的问题。在计算A有多少个子字符串的问题的时候，里面肯
定会包含“ABC”这个子字符串的。所以原问题就转换成了分别计算给出的字符串中每个字符出现
在独特字符串中的总数之和。
·假设原字符串是BAABBABBBAAABA，这个字符串中出现了很多A和很多B，假设我们当前计算
到了第3个A的位置了（index=5)，即标红色的那个A。如何计算这个A在哪些子字符串中是独
特的呢？由于子字符串题目中要求必须是连续的区间，所以这个问题很简单。找到这个A前一个A
的下标位置（index=2)，再找到这个A后一个A的下标位置（index=9)，即
BAABBABBBAAABA，第一个A和当前计算的A中间区间有2个字符，第三个A和当前计算的A
中间有3个字符。那么当前计算的A出现在（2+1）（3+1）=12个子字符串中是独特
的，这12个字符串
是：A，BA，BBA，AB，ABB，ABBB,BAB,BABB，BABBB，BBAB，BBABB，BBABBB。
计算方法，假设当前待计算的字符的下标是1，找到当前字符前一次出现的下标位置left，再找到
当前字符后一次出现的下标位置right，那么左边区间（left，i）的开区间内包含的字符数是i-left-
1，右边区间(iright)的开区间内包含的字符数是right-i-1。左右两边都还需要考虑空字符串的
情况，即左右两边都可以不取任何字符，那么对应的就是只有中间这个待计算的字符A。所以左
右两边都还需要再加上空串的情况，左边i-left-1+1=i-left，右边right-1-1+1=right-i。
左右两边的情况进行排列组合，即（i-left）*（right-i)）。针对字符串的每个字符都计算这样的值，
最后累积的总和就是题目中要求的总UNIQ值。
代码
package leetcode
func uniqueLetterString(S string) int {
res, 1eft, right := 0, 0, 0
for i := 0; i = 0 && s[1eft] != s[1]{
left--
right = i + 1
for right 1 {
++dw
if tmp == len(letterMap) {