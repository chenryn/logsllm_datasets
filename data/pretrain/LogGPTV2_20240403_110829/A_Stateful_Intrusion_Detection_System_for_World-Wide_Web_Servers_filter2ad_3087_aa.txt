title:A Stateful Intrusion Detection System for World-Wide Web Servers
author:Giovanni Vigna and
William K. Robertson and
Vishal Kher and
Richard A. Kemmerer
A Stateful Intrusion Detection System
for World-Wide Web Servers
Giovanni Vigna
William Robertson
Vishal Kher
Richard A. Kemmerer
Reliable Software Group
Department of Computer Science
University of California, Santa Barbara
{vigna,wkr,vkher,kemm}@cs.ucsb.edu
Abstract
Web servers are ubiquitous, remotely accessible, and of-
ten misconﬁgured.
In addition, custom web-based appli-
cations may introduce vulnerabilities that are overlooked
even by the most security-conscious server administrators.
Consequently, web servers are a popular target for hack-
ers. To mitigate the security exposure associated with web
servers, intrusion detection systems are deployed to analyze
and screen incoming requests. The goal is to perform early
detection of malicious activity and possibly prevent more
serious damage to the protected site. Even though intrusion
detection is critical for the security of web servers, the in-
trusion detection systems available today only perform very
simple analyses and are often vulnerable to simple evasion
techniques. In addition, most systems do not provide sophis-
ticated attack languages that allow a system administrator
to specify custom, complex attack scenarios to be detected.
This paper presents WebSTAT, an intrusion detection sys-
tem that analyzes web requests looking for evidence of mali-
cious behavior. The system is novel in several ways. First of
all, it provides a sophisticated language to describe multi-
step attacks in terms of states and transitions. In addition,
the modular nature of the system supports the integrated
analysis of network trafﬁc sent to the server host, operating
system-level audit data produced by the server host, and
the access logs produced by the web server. By correlating
different streams of events, it is possible to achieve more ef-
fective detection of web-based attacks.
Keywords: World-Wide Web, Security, Intrusion Detection
1 Introduction
Attacks against web servers and web-based applications
account for a substantial portion of the security incidents
1
on the Internet [11]. The large number of web servers and
the continuous disclosure of vulnerabilities associated with
web-based applications makes web servers a popular target
for malicious hackers and worms [3, 4]. In fact, in the pe-
riod between April 2001 and March 2002 web-related vul-
nerabilities accounted for 23% of the total number of vul-
nerabilities disclosed to the public [19].
Intrusion detection plays an important role in addressing
the security problems of web servers, by providing timely
identiﬁcation of malicious activity and supporting effective
response to attacks. Unfortunately, detection of attacks has
been performed by applying simple pattern-matching tech-
niques to the contents of HTTP requests or by identifying
trends in a large set of web-related events. In addition, most
intrusion detection systems focus on a single event stream,
such as the network trafﬁc directed to a server host or the
access logs produced by a server application. The lack of
a stateful detection model and the inability to analyze dif-
ferent event streams in an integrated way severely limits the
effectiveness of current intrusion detection approaches.
To improve the detection of web-based attacks, we pro-
pose an integrated approach that performs intrusion detec-
tion using stateful analysis of multiple event streams. The
approach is centered around the State-Transition Analy-
sis Technique (STAT) [9], which supports the modeling of
multi-step, complex attacks in terms of states and transi-
tions. STAT-based intrusion detection systems can be de-
veloped in a modular fashion, by extending an application-
independent runtime with components that deal with spe-
ciﬁc application domains.
This paper describes WebSTAT, a STAT-based intrusion
detection system that supports the modeling and detection
of sophisticated attacks. WebSTAT operates on multiple
event streams, and it is able to correlate both network-level
and operating system-level events with entries contained in
server logs. This integrated approach supports more effec-
tive detection of web-based attacks and generates a reduced
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
number of false positives.
The remainder of this paper is structured as follows. Sec-
tion 2 describes related work on the detection of web-based
intrusions. Section 3 describes the STAT framework, which
has been used as the basis for the development of WebSTAT.
The characteristics of WebSTAT are presented in Section 4.
Section 5 evaluates the performance impact of the system
on deployed web servers. Finally, Section 6 draws conclu-
sions and outlines future work.
2 Related Work
Intrusion detection is performed by analyzing one or
more input event streams, looking for the manifestation of
an attack. Historically, detection has been achieved by fol-
lowing one of two different approaches: anomaly detection
or misuse detection. Anomaly detection relies on models of
the “normal” behavior of a computer system. These models
can focus on the users, the applications, or the network. Be-
havior proﬁles are built by performing a statistical analysis
on historical data [8, 10] or by using rule-based approaches
to specify behavior patterns [12, 24, 25]. An anomaly detec-
tor then compares actual usage patterns against established
proﬁles to identify abnormal patterns of activity.
Misuse detection systems take a complementary ap-
proach. Misuse detection systems are equipped with a num-
ber of attack descriptions. These descriptions (or “signa-
tures”) are matched against a stream of audit data to ﬁnd
evidence that the modeled attack is occurring [9, 14, 16].
Anomaly and misuse detection both have advantages and
disadvantages. Anomaly detection systems have the advan-
tage of being able to detect previously unknown attacks.
This advantage is paid for with a large number of false pos-
itives and the difﬁculty of training a system for a very dy-
namic environment. Misuse detection systems can detect
only those attacks that have been modeled, even though, in
some cases, it is possible to detect variations of the attacks.
This limitation is balanced by the highly focused analysis of
the audit data that these systems can perform. As a conse-
quence, misuse detection system are less prone to the gen-
eration of false positives. Because of this, misuse detection
is by far the most popular approach to intrusion detection.
Misuse detection systems can be further classiﬁed using the
type of analysis they perform and the source event stream
they use.
Misuse detection analysis can be stateless or stateful.
Stateless analysis examines each event in the input stream
independently, while stateful analysis considers the rela-
tionships between events and is able to detect event “histo-
ries” that represent attacks. This analysis is more powerful
and allows one to detect more complex attacks. At the same
time, stateful approaches are more expensive in terms of
CPU and memory requirements and may be vulnerable to
denial-of-service attacks that target the intrusion detection
system itself.
Misuse detection analysis can be performed on different
event streams. Traditionally, event sources are either rep-
resented by packets transmitted on a network segment or
by the audit records produced by the auditing facility of an
operating system. Examples of event streams are the au-
dit records generated by the Solaris Basic Security Module
(BSM) [17] and trafﬁc logs collected using tcpdump [18].
Recently, the focus of analysis has been broadened to in-
clude other event sources, including the logs produced by
applications [1] and the alerts produced by the intrusion de-
tection systems themselves [20].
Misuse detection of web-based attacks has been per-
formed both at the network level, analyzing network traf-
ﬁc [16], and at the application level, analyzing server
logs [7]. Both of these approaches have some limitations.
Network-based intrusion detection is vulnerable to in-
sertion and evasion attacks [15]. These attacks attempt to
desynchronize the view of the intrusion detection system
(IDS) with respect to the view of the actual target, that is,
the web server. In addition, intrusion detection systems do
not take into account the application-level logic of the web
server, and, therefore, they cannot identify attacks that ex-
ploit the organization and conﬁguration of the server ap-
plication. Finally, only a few network-based intrusion de-
tection systems support stateful analysis of web requests.
Maintaining information about histories of requests is an
important aspect of intrusion detection, but this type of anal-
ysis is seldom performed because of the complexity intro-
duced by the detection of multi-step attacks.
Application-based intrusion detection solves some of the
problems that are inherent to network-based detection of
web-based attacks. For example, in [2], the authors de-
scribe an intrusion detection system that is embedded in an
Apache web server. The advantage of this solution is the
ability to perform intrusion detection analysis at different
stages in the processing of client requests. This approach
makes evasion techniques ineffective, because the view of
the intrusion detection system and the view of the server
application are tightly integrated. On the other hand, a dis-
advantage of this approach is that by “in-lining” intrusion
detection analysis the performance of the web server is im-
pacted. In addition, the proposed solution is speciﬁc to the
Apache web server and cannot be easily ported to different
servers.
A different approach is followed by the system described
in [1]. In this case, the intrusion detection system analyzes
the logs generated by a web server, looking for patterns of
malicious activity. This approach does not directly impact
the efﬁciency of the server application. On the other hand,
the attacks that were analyzed were limited to the exploita-
tion of CGI scripts. Attacks that target the web server it-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
2
In addi-
self, such as buffer overﬂows, are not detected.
tion, the analysis performs simple pattern matching on the
URL contained in a single request. Even though a module
to combine alerts is provided, composite patterns are lim-
ited to the use of Boolean logic (e.g., conjunction of alert
conditions). Therefore, attacks that may involve multiple
steps, with complex timing relationships between requests,
cannot be modeled.
The approach to intrusion detection presented in this pa-
per performs stateful analysis on a number of web-related
event streams. The approach has been implemented, and
an intrusion detection system, called WebSTAT, has been
developed by leveraging the STAT framework [22]. The
resulting system has a number of advantages in terms of
ﬂexibility and performance.
First of all, complex multi-step attacks can be modeled
in a high-level language, called STATL [6]. The expressive-
ness of the language allows the attack modeler to describe
timing relationships between events, the branching of attack
histories, and the unwinding of partially matched scenarios.
Second, the system can operate on logs produced by differ-
ent web servers, such as Apache and Microsoft IIS. Third,
the system can perform integrated analysis of multiple event
streams. The multi-threaded nature of the event collection
module supports the concurrent analysis of multiple web
server logs, and the correlation of these event streams with
lower-level event streams, such as operating system-level
audit records and network packets. Finally, the system al-
lows an administrator to associate response actions with the
intermediate steps of an attack. This feature supports timely
deployment of countermeasures and the ﬁne-tuning of intru-
sion detection responses with respect to the site’s security
policy.
3 The STAT Framework
The WebSTAT intrusion detection system has been de-
veloped by using the STAT framework. The framework pro-
vides the implementation of a domain-independent analysis
engine that can be extended in a well-deﬁned way to per-
form intrusion detection analysis in speciﬁc application do-
mains.
The STAT framework centers around an intrusion mod-
eling technique that characterizes attacks in terms of transi-
tions between the security states of a system. This approach
is supported by the STATL attack modeling language.
The STATL language provides constructs to represent an
attack as a composition of states and transitions. States are
used to characterize different snapshots of a system during
the evolution of an attack. Obviously, it is not feasible to
represent the complete state of a system (e.g., volatile mem-
ory, ﬁle system); therefore, a STATL scenario uses variables
to record just those parts of the system state that are needed
to deﬁne an attack signature (e.g., the value of a counter or
the source of an HTTP request). A transition has an associ-
ated action that is a speciﬁcation of the event that can cause
the scenario to move to a new state. For example, an action
can be the opening of a TCP connection or the execution
of a CGI script. The space of possible relevant actions is
constrained by a transition assertion, which is a ﬁlter con-
dition on the events that can possibly match the action. For
example, an assertion can require that a TCP connection be
opened with a speciﬁc destination port or that a CGI appli-
cation be invoked with speciﬁc parameters.
It is possible for several occurrences of the same attack
to be active at the same time. A STATL attack scenario,
therefore, has an operational semantics in terms of a set of
instances of the same scenario speciﬁcation. The scenario
speciﬁcation represents the scenario’s deﬁnition and global
environment, and a scenario instance represents a particular
attack that is currently in progress.
The evolution of the set of instances of a scenario is de-
termined by the type of transitions in the scenario deﬁnition.
A transition can be nonconsuming, consuming, or unwind-
ing.
A nonconsuming transition is used to represent a step
of an occurring attack that does not prevent further occur-
rences of attacks from spawning from the transition’s source
state. Therefore, when a nonconsuming transition ﬁres,
the source state remains valid, and the destination state be-
comes valid too. For example, if an attack has two steps
that are the uploading of a ﬁle to a web server though FTP
followed by an HTTP request for that ﬁle, then the second
step does not invalidate the previous state. That is, another
HTTP request for the same ﬁle can occur. Semantically,
the ﬁring of a nonconsuming transition causes the creation
of a new scenario instance. The original instance is still in
the original state, while the new instance is in the state that
is the destination state of the ﬁred transition. In contrast,
the ﬁring of a consuming transition makes the source state
of a particular attack occurrence invalid. Semantically, the
ﬁring of a consuming transition does not generate a new
scenario instance; it simply changes the state of the original
one. Unwinding transitions represent a form of “rollback,”
and they are used to describe events and conditions that can
invalidate the progress of one or more scenario instances
and require the return to an earlier state. For example, the
deletion of a ﬁle can invalidate a condition needed for an
attack to complete, and, therefore, a corresponding scenario
instance can be brought back to a previous state, such as be-
fore the ﬁle was created. For details about the semantics of
the STATL language, see [6].
The STAT Core module is the runtime for the STATL
language. The Core implements the concepts of state, tran-
sition, instance, timer, etc. In addition, the STAT Core is re-
sponsible for obtaining events from the target environment,
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
3
and matching this event stream against the actions and as-
sertions corresponding to transitions in the active attack sce-
narios.
The STATL language and the Core runtime are domain-
independent. They do not support any domain-speciﬁc fea-
tures, which may be necessary to perform intrusion detec-
tion analysis in particular domains or environments. For
example, network events such as an IP packet or the open-
ing of a TCP connection cannot be represented in STATL
natively. Therefore, the STAT framework provides a num-
ber of mechanisms to extend the STATL language and the
runtime to match the characteristics of a speciﬁc target do-
main [23].
Domain-speciﬁc events and predicates are deﬁned by
subclassing speciﬁc C++ classes of the STAT Framework.
These classes are encapsulated in a language extension
module. The module is then compiled into a dynamically
linked library (i.e., a “.so” ﬁle in a UNIX system or a
DLL ﬁle in a Windows system). Once the event set and as-
sociated predicates for a language extension are available,
it is possible to use them in a STATL scenario description
by including them with the STATL use keyword. STATL
scenarios are then translated into C++ and compiled into
dynamically linked modules as well.
The input event streams analyzed by a sensor are pro-
vided by one or more event providers. An event provider
collects events from the external environment (e.g., by ob-
taining packets from the network driver), creates events
as deﬁned in one or more STAT language extensions, en-
capsulates these events into generic STAT events, and in-
serts them into the input queue of the STAT Core. Event
providers are compiled into dynamically linked modules,
following a process that is similar to the one followed for
language extensions.
In summary, a STAT-based sensor is created by devel-
oping a language extension that describes the particular do-
main of the application, an event provider that retrieves in-
formation from the environment and produces STAT events,
and attack scenarios that describe attacks in terms of state-
transition models of STAT events. In addition, it is possi-
ble to create response libraries that are speciﬁc to a certain