its failings have become evident, but it is much worse to run a
ﬂawed system (like sVote 1.0 and iVote) in a binding election
and learn afterwards that it did not meet its security goals. The
failures that have led to decreased conﬁdence in Swiss e-voting
should substantially increase doubt in other e-voting systems,
not only those by the same vendor, but any that have not had
an extensive period of open public scrutiny.
Thanks to the Swiss process, ﬂaws that we publicly described
were found to be present in other Scytl code being used for a
running election in New South Wales (NSW), Australia. That
code was not available for open review and discussion (though
it now is). Without Switzerland’s mandated transparency,
opportunities for undetectable electoral fraud in NSW would
probably have gone unnoticed through a running election.
Scytl claims to sell Internet voting systems in numerous
other democracies,13 including Canada, Brazil, Mexico, India
and the UK, so quite possibly these same errors are present
in other systems whose administrators have been even less
forthcoming than those in NSW.
As applications of zero knowledge and MPC go mainstream,
we can expect to see more proprietary systems in which non-
experts attempt to guarantee sophisticated properties without
detailed security proofs or open review. We hope this work
can help customers assess what does, and does not, constitute
genuine veriﬁable computation. There is nothing gained by
using a proven-secure component if its assumptions are not
met in the context in which it is used. Nor is there any advantage
to sound ZKPs if they do not actually prove what is needed in
the rest of the protocol.
The aim of veriﬁable election software is veriﬁable election
outcomes, not proofs that pass. If the system itself does not
come with meaningful evidence that its veriﬁcation procedure
is sound, then an apparently-successful veriﬁcation implies
nothing about the integrity of the election result.
13https://www.scytl.com/en/customers/
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
656
REFERENCES
[1] U. M. Maurer, “Unifying zero-knowledge proofs of knowledge,” in
Progress in Cryptology - AFRICACRYPT 2009, ser. Lecture Notes in
Computer Science, vol. 5580. Springer, 2009, pp. 272–286.
[2] D. Bernhard, O. Pereira, and B. Warinschi, “How Not to Prove Yourself:
Pitfalls of the Fiat-Shamir Heuristic and Applications to Helios,” in
ASIACRYPT 2012, ser. Lecture Notes in Computer Science, X. Wang
and K. Sako, Eds., vol. 7658. Springer, 12 2012, pp. 626–643.
[3] P. Locher, R. Haenni, and R. E. Koenig, “Analysis of the cryptographic
implementation of the swiss post voting protocol,” https://www.bk.admin.
ch/bk/en/home/politische-rechte/e-voting.html, Jul. 2019.
[4] O. Pereira and V. Teague, “Report on the swisspost-scytl e-voting
system, trusted-server version,” https://www.bk.admin.ch/bk/en/home/
politische-rechte/e-voting.html, Jul. 2019.
[5] J. Benaloh and M. J. Fischer, “A robust and veriﬁable cryptographically
secure election scheme (extended abstract),” in 26th Annual Symposium
on Foundations of Computer Science (FOCS 1985).
IEEE, 1985, pp.
372–382.
[6] T. ElGamal, “A public key cryptosystem and a signature scheme based
on discrete logarithms,” IEEE Transactions on Information Theory, vol.
IT-31, no. 4, pp. 469–472, July 1985.
[7] Scytl, “Scytl sVote protocol speciﬁcations – software version 2.1 –
document version 5.1,” 2018.
[8] C.-P. Schnorr, “Efﬁcient signature generation by smart cards,” Journal
of cryptology, vol. 4, no. 3, pp. 161–174, 1991.
[9] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to
identiﬁcation and signature problems,” in Conference on the Theory and
Application of Cryptographic Techniques. Springer, 1986, pp. 186–194.
[10] Scytl, “Scytl svote – complete veriﬁability security proof report - software
version 2.1 - document 1.0,” https://www.post.ch/-/media/post/evoting/
dokumente/complete-veriﬁability-security-proof-report.pdf, 2018.
[11] D. Chaum and T. P. Pedersen, “Wallet databases with observers,” in
Advances in Cryptology - CRYPTO ’92. Springer, 1992, pp. 89–105.
[12] Scytl, “Scytl svote – audit of the process with control components -
software version 2.1 - document 3.1,” 2018.
[13] R. Haenni, “Swiss Post Public Intrusion Test: Undetectable attack
against vote integrity and secrecy,” https://e-voting.bfh.ch/app/download/
7833162361/PIT2.pdf?t=1552395691, Mar. 2019.
[14] S. Bayer and J. Groth, “Efﬁcient zero-knowledge argument for correctness
of a shufﬂe,” in Advances in Cryptology - EUROCRYPT 2012. Springer,
2012, pp. 263–280.
[15] M. Fischlin, “Trapdoor commitment schemes and their applications.”
Ph.D. dissertation, Goethe-University of Frankfurt, 2001.
[16] P. FIPS, “186-4: Federal information processing standards publication.
digital signature standard (dss),” Information Technology Laboratory,
National Institute of Standards and Technology (NIST), Gaithersburg,
MD, pp. 20 899–8900, 2013.
[17] J. Katz, A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone, Handbook
of applied cryptography. CRC press, 1996.
[18] G. Tsoukalas, K. Papadimitriou, P. Louridas, and P. Tsanakas,
“From helios
to zeus,” in 2013 Electronic Voting Technology
Workshop / Workshop on Trustworthy Elections, EVT/WOTE ’13,
Washington, D.C., USA, August 12-13, 2013. USENIX Association,
2013. [Online]. Available: https://www.usenix.org/conference/evtwote13/
workshop-program/presentation/tsoukalas
[19] P. Fauzi, H. Lipmaa, and M. Zajac, “A shufﬂe argument secure in
the generic model,” in Advances in Cryptology - ASIACRYPT 2016
- 22nd International Conference on the Theory and Application of
Cryptology and Information Security, Hanoi, Vietnam, December 4-8,
2016, Proceedings, Part II, ser. Lecture Notes in Computer Science, J. H.
Cheon and T. Takagi, Eds., vol. 10032, 2016, pp. 841–872. [Online].
Available: https://doi.org/10.1007/978-3-662-53890-6 28
[20] R. Cramer, I. Damg˚ard, and B. Schoenmakers, “Proofs of partial knowl-
edge and simpliﬁed design of witness hiding protocols,” in Advances in
Cryptology - CRYPTO ’94, ser. Lecture Notes in Computer Science, vol.
839. Springer, 1994, pp. 174–187.
X. ACKNOWLEDGEMENTS
Many thanks to Andrew Conway for tremendous help with
the code, and to Chris Culnane, Aleks Essex, Matt Green, Nadia
Heninger and Hovav Shacham for many valuable discussions.
Olivier Pereira is also grateful to the Belgian Fund for
Scientiﬁc Research (F.R.S.- FNRS) for its ﬁnancial support
provided through the the SeVoTe project, and to the European
Union (EU) and the Walloon Region through the FEDER
project USERMedia (convention number 501907-379156).
Thomas Haines acknowledges the support of the Luxembourg
National Research Fund (FNR) and the Research Council of
Norway for the joint project SURCVS.
We would like to thank Swiss Post for the civilised way
they have received our analysis, and for running a public test
of the code. Although we were not willing to sign on to the
participation conditions, in practice the code did circulate quite
freely on the web. This is a good thing for Swiss democracy.
XI. A NOTE ON CODE AUTHENTICITY
We did not ofﬁcially enrol for the Swiss Post researcher test.
We downloaded this codebase from an unofﬁcial repository
and received conﬁrmation of its authenticity from researchers
with access to the ofﬁcial codebase.
APPENDIX
A. Using trapdoored commitments to fake the shufﬂe proof
This section describes how an ability to open commitments
arbitrarily could be used to produce a shufﬂe proof that veriﬁes
but is false.
1) Faking a proof for ciphertexts with known randomness:
Our demonstration shows how an attacker who knows the
trapdoor can manipulate any votes for which it learns the
randomness used to generate the vote ciphertext. This would
allow the ﬁrst mixer, in collusion with voting clients, to manip-
ulate votes undetectably. A working demonstration transcript
is submitted together with this report. Here we explain how it
was generated.
Suppose
We write the primes used to encode the messages as
q1,q2, . . .. The prover commits to applying permutation (shuf-
ﬂe) π.
ciphertexts
we
), C3 = Epk(M3,ρ(cid:4)
C1 = Epk(M1,ρ(cid:4)
)
,ρ(cid:4)
with known messages M1,M2,M3 and randomness ρ(cid:4)
3
1
,
3
and one input ciphertext C4 whose contents and randomness
are unknown.
three
),C2 = Epk(M2,ρ(cid:4)
,ρ(cid:4)
2
input
have
1
2
The idea of the cheat is, for each prime qk, to accumulate
all the votes for qk, for which the attacker knows the contents
and randomness, into one π(i). The attacker can then substitute
all the other votes (for which it know the randomness) with
arbitrary votes of its own choice.
This attack succeeds with arbitrarily many known and
unknown votes, as long as the number of known votes is
larger than the number of candidates that received at least one
vote—the attacker can substitute the votes for which it knows
the randomness, and must honestly shufﬂe those for which it
does not know the randomness.
We illustrate with a small example. Suppose M1 = M2 = q1
and M3 = q2. M4 is unknown. The cheating prover will apply
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
657
the identity permutation (just for clarity here, this has no impact
on the attack) and set
(cid:4)
C
1
(cid:4)
C
2
(cid:4)
C
(cid:4)
3
and C
4
= Epk(1;ρ1)C1 = Epk(M1,ρ1 + ρ(cid:4)
)
1
= Epk(1;ρ2)C3 = Epk(M3,ρ2 + ρ(cid:4)
)
3
= Epk(1;ρ3)C3 = Epk(M3,ρ3 + ρ(cid:4)
)
= Epk(1;ρ4)C4 = Epk(M4,ρ4 + ρ(cid:4)
3
)
4
If C4 is an encryption of q4 (neither q1 nor q2), the substitution
of M3 for M2 in the second vote changes the winner: it used
to be q1; now it’s q2. The cheating prover knows M1,M2,M3
but not M4. It also knows ρ(cid:4)
The high-level protocol is described in Bayer & Groth p.8.
Input: m = 2,n = 2,N = 4, (cid:2)C = {C1,C2,C3,C4}, (cid:2)C(cid:4) as above;
permutation π. We will compute ρ carefully later.
i for i = 1,2,3 but not ρ(cid:4)
4.
Suppose the mix has generated the trapdoored commitment
key as in Section VI-B1. The cheating shufﬂer’s initial message
(cid:2)cA is a (truthful) commitment to π. That is,
2) Faking a proof for ciphertexts with unknown randomness:
As a second example, we exploit the trapdoor in the commit-
ment scheme to break the soundness of the proof of shufﬂe,
even in a situation in which we do not know the randomness
or the content of any vote.
In this case, the malicious party could be the last mixer.
This mixer indeed has the advantage of being able to perform
the ﬁnal decryption step, which means that it may know the
content of the votes that it mixes before actually mixing them.
(It could also be the ﬁrst mixnet if it has some other way of
learning the contents of the votes.)
We make the following assumption (many variants are
possible):
Suppose that the voting parameters are, again, maliciously
generated. In this case the mixer knows values a and d so that
vote options pyes and pno satisfy
2a = (pno/pyes)d mod p
(cid:2)cA = comck((cid:2)A1;r1), comck((cid:2)A2,r2),
.
where (cid:2)A1 = (π(1),π(2)) and (cid:2)A2 = (π(3),π(4)).
It then commits honestly to (cid:2)B as
(cid:2)cB = comck((cid:2)B1;s1), comck((cid:2)B2,s2),
where (cid:2)B1 = (xπ(1),xπ(2)) and (cid:2)B2 = (xπ(3),xπ(4)).
Now consider how the cheating shufﬂer responds to the
second challenge y,z and generates a convincing answer for
both parts. In the ﬁrst part of the challenge, when it generates
answer 1 in response to y,z, it treats (cid:2)cB as a commitment to xπ
and answers the product argument (Bayer & Groth Section 5)
honestly.
a) Cheating on the multi-exponentiation argument: In the
second part of the challenge, it generates a cheating permutation
πcheat, which isn’t actually a permutation, as follows:
πcheat(1) = x + x2
πcheat(2) = 0
πcheat(3) = x3
πcheat(4) = x4.
The attacker then runs the multi-exponentiation argument
from Section 4 of BG exactly as given, except for the following
changes.
• It sets
ρ = −ρ1x− (ρ1 + ρ(cid:4)
1)x2 + x2ρ(cid:4)
2 − ρ3x3 − ρ4x4.
(3)
(See Appendix A2a for why this works.)
• It treats (cid:2)cB = comck((cid:2)B1;s1), comck((cid:2)B2,s2) as a commit-
ment to
πcheat = ((x + x2,0)(x3,x4)).
• It computes commitment openings (cid:2)s for πcheat using
Equation 1 and the random values s1 and s2.
This produces a proof that passes veriﬁcation, though the
election outcome has been changed. An example transcript,
which passess veriﬁcation, is attached with this report.
This is probably hard to generate for a given p, but it is
not hard to generate values of p, pyes and pno for which such
a and d are known. Several sets of complying parameters are
contained in Section B below.
This allows allows a cheating mixer to change a vote for
pyes into a vote for pno by multiplying by 2a/d.
4
For concreteness, suppose that we have a single-choice
election and that the last mixer receives input ciphertexts
C1 = Epk(M1,ρ(cid:4)
), C4 =
Epk(M4,ρ(cid:4)
) such that the cheater’s preferred candidate, repre-
sented by pno, does not win the election.
), C3 = Epk(M3,ρ(cid:4)
),C2 = Epk(M2,ρ(cid:4)
3
1
2
1
The last mixer can now perform the ﬁnal decryption step
in order to identify which of these ciphertexts contain a vote
for pyes. It does not learn the randomness ρ(cid:4)
. Again,
for simplicity, let us assume that the true result is unanimous:
the mixer ﬁnds out that everyone voted for pyes.
,ρ(cid:4)
2
,ρ(cid:4)
3