### Optimized Text

The shortcomings of e-voting systems, such as sVote 1.0 and iVote, have become evident. It is far more problematic to deploy a flawed system in a binding election and later discover that it did not meet its security goals. The failures that have led to decreased confidence in Swiss e-voting should significantly increase skepticism about other e-voting systems, not just those from the same vendor, but any that have not undergone extensive public scrutiny.

Thanks to the Swiss process, flaws we publicly described were found in Scytl code used in an ongoing election in New South Wales (NSW), Australia. This code was not initially available for open review and discussion, though it is now. Without Switzerland's mandated transparency, undetectable electoral fraud in NSW might have gone unnoticed during the election.

Scytl claims to provide Internet voting systems in numerous other democracies, including Canada, Brazil, Mexico, India, and the UK. Therefore, it is possible that these same errors are present in other systems where administrators have been even less transparent than those in NSW.

As zero-knowledge proofs and Multi-Party Computation (MPC) become more mainstream, we can expect to see more proprietary systems where non-experts attempt to ensure sophisticated properties without detailed security proofs or open review. We hope this work will help customers understand what constitutes genuine verifiable computation. Using a proven-secure component is meaningless if its assumptions are not met in the context of its use. Similarly, there is no benefit to sound Zero-Knowledge Proofs (ZKPs) if they do not actually prove what is needed in the rest of the protocol.

The goal of verifiable election software is to ensure verifiable election outcomes, not merely to pass verification checks. If the system itself does not provide meaningful evidence that its verification procedure is sound, then an apparently successful verification implies nothing about the integrity of the election result.

**References:**
1. U. M. Maurer, "Unifying zero-knowledge proofs of knowledge," in *Progress in Cryptology - AFRICACRYPT 2009*, ser. Lecture Notes in Computer Science, vol. 5580. Springer, 2009, pp. 272–286.
2. D. Bernhard, O. Pereira, and B. Warinschi, "How Not to Prove Yourself: Pitfalls of the Fiat-Shamir Heuristic and Applications to Helios," in *ASIACRYPT 2012*, ser. Lecture Notes in Computer Science, X. Wang and K. Sako, Eds., vol. 7658. Springer, 12 2012, pp. 626–643.
3. P. Locher, R. Haenni, and R. E. Koenig, "Analysis of the cryptographic implementation of the Swiss Post voting protocol," https://www.bk.admin.ch/bk/en/home/politische-rechte/e-voting.html, Jul. 2019.
4. O. Pereira and V. Teague, "Report on the SwissPost-Scytl e-voting system, trusted-server version," https://www.bk.admin.ch/bk/en/home/politische-rechte/e-voting.html, Jul. 2019.
5. J. Benaloh and M. J. Fischer, "A robust and verifiable cryptographically secure election scheme (extended abstract)," in *26th Annual Symposium on Foundations of Computer Science (FOCS 1985)*. IEEE, 1985, pp. 372–382.
6. T. ElGamal, "A public key cryptosystem and a signature scheme based on discrete logarithms," *IEEE Transactions on Information Theory*, vol. IT-31, no. 4, pp. 469–472, July 1985.
7. Scytl, "Scytl sVote protocol specifications – software version 2.1 – document version 5.1," 2018.
8. C.-P. Schnorr, "Efficient signature generation by smart cards," *Journal of Cryptology*, vol. 4, no. 3, pp. 161–174, 1991.
9. A. Fiat and A. Shamir, "How to prove yourself: Practical solutions to identification and signature problems," in *Conference on the Theory and Application of Cryptographic Techniques*. Springer, 1986, pp. 186–194.
10. Scytl, "Scytl sVote – complete verifiability security proof report - software version 2.1 - document 1.0," https://www.post.ch/-/media/post/e-voting/dokumente/complete-verifiability-security-proof-report.pdf, 2018.
11. D. Chaum and T. P. Pedersen, "Wallet databases with observers," in *Advances in Cryptology - CRYPTO '92*. Springer, 1992, pp. 89–105.
12. Scytl, "Scytl sVote – audit of the process with control components - software version 2.1 - document 3.1," 2018.
13. R. Haenni, "Swiss Post Public Intrusion Test: Undetectable attack against vote integrity and secrecy," https://e-voting.bfh.ch/app/download/7833162361/PIT2.pdf?t=1552395691, Mar. 2019.
14. S. Bayer and J. Groth, "Efficient zero-knowledge argument for correctness of a shuffle," in *Advances in Cryptology - EUROCRYPT 2012*. Springer, 2012, pp. 263–280.
15. M. Fischlin, "Trapdoor commitment schemes and their applications." Ph.D. dissertation, Goethe-University of Frankfurt, 2001.
16. P. FIPS, "186-4: Federal information processing standards publication. digital signature standard (DSS)," *Information Technology Laboratory, National Institute of Standards and Technology (NIST)*, Gaithersburg, MD, pp. 20 899–8900, 2013.
17. J. Katz, A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone, *Handbook of Applied Cryptography*. CRC Press, 1996.
18. G. Tsoukalas, K. Papadimitriou, P. Louridas, and P. Tsanakas, "From Helios to Zeus," in *2013 Electronic Voting Technology Workshop / Workshop on Trustworthy Elections, EVT/WOTE '13*, Washington, D.C., USA, August 12-13, 2013. USENIX Association, 2013. [Online]. Available: https://www.usenix.org/conference/evtwote13/workshop-program/presentation/tsoukalas
19. P. Fauzi, H. Lipmaa, and M. Zajac, "A shuffle argument secure in the generic model," in *Advances in Cryptology - ASIACRYPT 2016 - 22nd International Conference on the Theory and Application of Cryptology and Information Security, Hanoi, Vietnam, December 4-8, 2016, Proceedings, Part II*, ser. Lecture Notes in Computer Science, J. H. Cheon and T. Takagi, Eds., vol. 10032, 2016, pp. 841–872. [Online]. Available: https://doi.org/10.1007/978-3-662-53890-6 28
20. R. Cramer, I. Damgård, and B. Schoenmakers, "Proofs of partial knowledge and simplified design of witness hiding protocols," in *Advances in Cryptology - CRYPTO '94*, ser. Lecture Notes in Computer Science, vol. 839. Springer, 1994, pp. 174–187.

**Acknowledgments:**
We would like to thank Andrew Conway for his tremendous help with the code, and Chris Culnane, Aleks Essex, Matt Green, Nadia Heninger, and Hovav Shacham for many valuable discussions. Olivier Pereira is also grateful to the Belgian Fund for Scientific Research (F.R.S.-FNRS) for its financial support through the SeVoTe project, and to the European Union (EU) and the Walloon Region through the FEDER project USERMedia (convention number 501907-379156). Thomas Haines acknowledges the support of the Luxembourg National Research Fund (FNR) and the Research Council of Norway for the joint project SURCVS.

We would like to thank Swiss Post for the civil way they received our analysis and for running a public test of the code. Although we were not willing to sign the participation conditions, the code did circulate quite freely on the web, which is a positive development for Swiss democracy.

**Note on Code Authenticity:**
We did not officially enroll in the Swiss Post researcher test. We downloaded the codebase from an unofficial repository and received confirmation of its authenticity from researchers with access to the official codebase.

**Appendix:**

**A. Using Trapdoored Commitments to Fake the Shuffle Proof**

This section describes how the ability to open commitments arbitrarily can be used to produce a shuffle proof that verifies but is false.

1. **Faking a Proof for Ciphertexts with Known Randomness:**
   Our demonstration shows how an attacker who knows the trapdoor can manipulate votes for which it learns the randomness used to generate the vote ciphertext. This would allow the first mixer, in collusion with voting clients, to manipulate votes undetectably. A working demonstration transcript is submitted with this report. Here, we explain how it was generated.

   Suppose the primes used to encode the messages are \( q_1, q_2, \ldots \). The prover commits to applying permutation (shuffle) \(\pi\).

   We have three input ciphertexts:
   \[
   C_1 = E_{pk}(M_1, \rho_1), \quad C_2 = E_{pk}(M_2, \rho_2), \quad C_3 = E_{pk}(M_3, \rho_3)
   \]
   with known messages \( M_1, M_2, M_3 \) and randomness \(\rho_1, \rho_2, \rho_3\), and one input ciphertext \( C_4 \) whose contents and randomness are unknown.

   The idea of the cheat is, for each prime \( q_k \), to accumulate all the votes for \( q_k \), for which the attacker knows the contents and randomness, into one \(\pi(i)\). The attacker can then substitute all the other votes (for which it knows the randomness) with arbitrary votes of its own choice.

   This attack succeeds with arbitrarily many known and unknown votes, as long as the number of known votes is larger than the number of candidates that received at least one vote—the attacker can substitute the votes for which it knows the randomness, and must honestly shuffle those for which it does not know the randomness.

   We illustrate with a small example. Suppose \( M_1 = M_2 = q_1 \) and \( M_3 = q_2 \). \( M_4 \) is unknown. The cheating prover will apply the identity permutation (just for clarity here, this has no impact on the attack) and set:
   \[
   C_1' = E_{pk}(1; \rho_1)C_1 = E_{pk}(M_1, \rho_1 + \rho_1')
   \]
   \[
   C_2' = E_{pk}(1; \rho_2)C_3 = E_{pk}(M_3, \rho_2 + \rho_3')
   \]
   \[
   C_3' = E_{pk}(1; \rho_3)C_3 = E_{pk}(M_3, \rho_3 + \rho_3')
   \]
   \[
   C_4' = E_{pk}(1; \rho_4)C_4 = E_{pk}(M_4, \rho_4 + \rho_4')
   \]

   If \( C_4 \) is an encryption of \( q_4 \) (neither \( q_1 \) nor \( q_2 \)), the substitution of \( M_3 \) for \( M_2 \) in the second vote changes the winner: it used to be \( q_1 \); now it’s \( q_2 \). The cheating prover knows \( M_1, M_2, M_3 \) but not \( M_4 \). It also knows \(\rho_1, \rho_2, \rho_3\) but not \(\rho_4\).

   The high-level protocol is described in Bayer & Groth, p. 8. Input: \( m = 2, n = 2, N = 4, \mathcal{C} = \{C_1, C_2, C_3, C_4\}, \mathcal{C}' \) as above; permutation \(\pi\). We will compute \(\rho\) carefully later.

2. **Faking a Proof for Ciphertexts with Unknown Randomness:**
   As a second example, we exploit the trapdoor in the commitment scheme to break the soundness of the proof of shuffle, even in a situation where we do not know the randomness or the content of any vote.

   In this case, the malicious party could be the last mixer. This mixer has the advantage of being able to perform the final decryption step, which means it may know the content of the votes it mixes before actually mixing them. (It could also be the first mixnet if it has some other way of learning the contents of the votes.)

   We make the following assumption (many variants are possible):
   Suppose the voting parameters are, again, maliciously generated. In this case, the mixer knows values \( a \) and \( d \) so that vote options \( p_{yes} \) and \( p_{no} \) satisfy:
   \[
   2^a = (p_{no}/p_{yes})^d \mod p
   \]

   For concreteness, suppose we have a single-choice election and the last mixer receives input ciphertexts:
   \[
   C_1 = E_{pk}(M_1, \rho_1), \quad C_2 = E_{pk}(M_2, \rho_2), \quad C_3 = E_{pk}(M_3, \rho_3), \quad C_4 = E_{pk}(M_4, \rho_4)
   \]
   such that the cheater’s preferred candidate, represented by \( p_{no} \), does not win the election.

   The last mixer can now perform the final decryption step to identify which of these ciphertexts contain a vote for \( p_{yes} \). It does not learn the randomness \(\rho_1, \rho_2, \rho_3, \rho_4\). For simplicity, let us assume that the true result is unanimous: the mixer finds out that everyone voted for \( p_{yes} \).

   The last mixer can change a vote for \( p_{yes} \) into a vote for \( p_{no} \) by multiplying by \( 2^{a/d} \).

   An example transcript, which passes verification, is attached with this report.