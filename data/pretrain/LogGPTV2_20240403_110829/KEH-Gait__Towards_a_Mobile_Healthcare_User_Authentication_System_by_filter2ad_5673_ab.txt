tack may occur when the device is communicating with the
server. Therefore, the device and server should establish a
secure communication channel. To address this attack, the
healthcare company can install a digital certiﬁcate in the wear-
able device and the device will perform SSL authentication
when communicating with the server.
B. Attack Model
The aforementioned mobile healthcare system is vulnerable
to user spooﬁng attacks. For instance, an adversary can dis-
tribute his device to another person, and upload the data of that
person aiming to obtain healthcare beneﬁts. Besides, multiple
1KINETIC: http://www.seiko-cleanenergy.com/watches/kinetic-1.html.
2IDOMOVE: https://www.idomove.com/
3https://www.behaviosec.com/
4http://eyeﬂuence.com/
3
AuthenticationUploadgait dataData centerUserWearable deviceGenuine userSpoof attackerfailpassGait recognitionGait recognitionAccelerometer DataAccelerometerAccelerometerRadioRadioGait recognitionGait recognitionRadioRadioEnergyHarvesterEnergyHarvesterOutput Voltage Data(a) Acceleration signal of subject 1
(b) Acceleration signal of subject 2
(c) Output voltage of subject 1 from a PEH device
(d) Output voltage of subject 2 from a PEH device
(e) Output voltage of subject 1 from an EEH device
(f) Output voltage of subject 1 from an EEH device
Fig. 4: A comparison of the output voltage signal from different devices: (a) and (b) exhibit the acceleration signal from 3-axis
accelerometer when two different subjects are walking; (c) and (d) plot the output voltage signal from a PEH device; (e) and (f)
show the output voltage signal from an EEH device.
users may collude to launch user spooﬁng attacks to fool
the mobile healthcare system. Therefore, the adversary model
considered in this paper focuses on impersonation attacks. We
assume the presence of two types of impersonation attacks:
a passive adversary and an active adversary. The passive
adversary tries to spoof the healthcare system by using his
own walking patterns. The active spooﬁng attacker knows the
authentication scheme and will try his best to imitate the
walking pattern of the genuine user to spoof the healthcare
system.
The main goal of our system is to detect spooﬁng attacks.
In fact, there are many other possible attacks to such healthcare
system. We discuss these possible attacks and corresponding
solutions. The ﬁrst
type of attacks we consider is replay
attacks. In replay attacks, an adversary ﬁrst records a mea-
surement trace from another person. Then he replays the data
trace to the monitoring device to fool the healthcare monitoring
system. This attack can be easily detected as discussed in [25].
Although a MITM attack during communication between the
device and server can be easily prevented, there is another type
of MIMT in which an adversary may build a MITM monitor
which bridges the user’s skin and a wearable device. For
example, once it detects a response message indicating healthy
problems such as high blood pressure, it will manipulate the
data and transmit the forged data to the server. This type
of attack can be addressed by the scheme in [25]. Further
potential
threats include deriving the walking patterns by
studying a video of the target’s gait through computer vision
techniques. We believe this is a potential vulnerability of
unknown severity and leave it as future work.
IV. SYSTEM ARCHITECTURE OF KEH-GAIT
In this section, we discuss the proposed KEH-Gait frame-
work in details. First, we compare KEH-Gait with traditional
accelerometer based gait recognition system. Figure 3(a) shows
the pipeline of a traditional accelerometer-based gait recog-
nition system, in which the accelerometer data are used to
train a classiﬁer for gait recognition. In contrast, as shown in
Figure 3(b), KEH-Gait exploits the output voltage signal of the
kinetic energy harvester for gait recognition directly. By not
using the accelerometer, KEH-Gait can save the energy that
is used to sample the accelerometer. The saved energy can
be further used to power other components in the wearable
device, such as the classiﬁer and radio. The radio can be used
to transmit the personal data to a base station or a server.
Figure 4 compares the output voltage signal from two
4
Samples0100200300400500600700Acceleration (m/s2)-1.5-1-0.500.511.52X-axisY-axisZ-axisSubject 1Samples0100200300400500600700Acceleration (m/s2)-1-0.500.511.522.5X-axisY-axisZ-axisSubject 2Samples0100200300400500600700Voltage (V)-0.6-0.4-0.200.20.4Subject 1Samples0100200300400500600700Voltage (V)-1-0.500.511.5Subject 2Samples0100200300400500600700Voltage (V)-0.500.5Subject 1Samples0100200300400500600700Voltage (V)-0.500.511.5Subject 2Fig. 5: System ﬂowchart of KEH-Gait
types of energy harvester (EH) generated by two subjects
when they are walking. These ﬁgures provide a clear visual
conﬁrmation that the voltage signal from the energy harvester
contains personalized patterns generated by the subjects. This
observation is promising as our goal is to recognize different
subjects based on the output voltage signal of the EH when
they are walking.
A. System Overview
As shown in Figure 5,
the whole procedure of KEH-
Gait consists of three parts: ofﬂine dictionary training, pre-
processing of input signals, and classiﬁcation.
During the ofﬂine dictionary training phase, gait cycles
are ﬁrst segmented from time series voltage signal and then
interpolated into the same length. All detected cycles are
passed to unusual cycles deletion to remove outliers of gait
cycles. The obtained gait cycles are used to form the training
dictionary A. After obtaining A, we apply the projection
optimization algorithm in [27] to obtain a optimized projection
matrix Ropt. Then the reduced training dictionary ˜A = RoptA
is used in the classiﬁer as described in Section II.
After the acquisition of the test signal, we again apply gait
cycle segmentation and interpolation to obtain the gait cycles
from the test signal. The same optimized projection matrix
(as used for training) is used to reduce the dimension of the
test signal and provide the measurement vector ˜yi = Roptyi,
i = 1, 2,··· , k, and k is the number of obtained gait cycles.
Now both the training dictionary ˜A and the measurements
˜yi are passed to the classiﬁer. The (cid:96)1 classiﬁer ﬁrst ﬁnds the
sparse coefﬁcient vector xi. Then the vectors of different gait
cycles are fused based on a novel sparse fusion model, and the
fused sparse vector is used to calculate the residuals. Finally,
the identity is obtained by ﬁnding the minimal residual.
In the following sections, we detail the design of signal
pre-processing, ofﬂine dictionary training, and classiﬁcation in
turn.
B. Signal Pre-processing
1) Gait Cycle Segmentation: In order to recognize a gait
signal, it is essential that we separate the time series of walking
periods into segments, such that each segment contains a com-
plete gait cycle. The gait cycle can be obtained by combining
two successive step cycles together as technically the gait
cycle is across a stride (two steps). As mentioned in [28],
typical step frequencies are around 1-2Hz, we apply a band-
pass Butterworth ﬁlter [29] on the sampled data to eliminate
out-band interference. The lower and upper cutoff frequency is
set as 1Hz and 2Hz separately (ﬁlter order is 4). After ﬁltering,
the step cycles are separated by ﬁnding peaks associated with
the heel strike as shown in Figure 6. Thereafter, the gait cycle
is obtained by combining two consecutive step cycles together.
After gait cycle extraction, the output voltage data are
segmented into short gait cycles based on the peak detection.
Figure 7 presents the distribution of cycle duration (i.e. time
length of stride) for 20 healthy subjects walking at their normal
speed. We can see that most of the gait cycle ranges between
0.8-1.3s (80-130 samples at 100Hz sampling rate). This results
in turn can be used to omit unusual gait cycles and exclude
the cycles not produced by walking, i.e., the cycles which last
less than 0.8s and exceed 1.3s are dropped.
2) Linear Interpolation: Detected cycles are normalized
to equal length by linear interpolation because SRC requires
vectors of equal length as input. As mentioned above, normal
gait duration lies between 80 and 130 samples, we apply linear
interpolation on the samples to ensure that they achieve the
same length of 130 samples.
C. Ofﬂine Training
The training data are also passed to gait cycle segmentation
and linear interpolation to obtain gait cycles with same length.
In addition, we delete unusual cycles and optimize projection
matrix to further improve recognition accuracy.
1) Deletion of Unusual Cycles: Unusual cycles caused by
occasional abnormalities like temporary walking pauses or
5
Signal Pre-processing (Sec IV.BV)Signal Pre-processing (Sec IV.BV)Classification (Sec IV.D )Offline Training (Sec IV.C )Gait CycleSegmentationGait CycleSegmentationTrainingDataTrainingDataUnusual StepDeletionUnusual StepDeletionIdentityIdentityInterpolationInterpolationDictionaryDictionaryProjectionOptimizationProjectionOptimizationAGait CycleSegmentationGait CycleSegmentationEnergyHarvesterEnergyHarvesterInterpolationInterpolationGait Cycle y1Gait Cycle y1Gait Cycle ykGait Cycle ykSparse RepresentationSparse RepresentationSparse RepresentationSparse RepresentationSparse Vector x1Sparse Vector x1Sparse Vector xkSparse Vector xkSparse FusionSparse FusionResidualResidualRopty1=RoptAx1Roptyk=RoptAxkRopt............Output VoltageFig. 6: The time series of harvested energy: raw data (blue
dash line), ﬁltered data (green solid line).
we have acquired a set of M gait cycles from the test
signal. Following the single test vector approach described
in Section II, we can obtain a set of estimated coefﬁcients
vectors ˆX = {ˆx1, ˆx2, ..., ˆxM} by solving the (cid:96)1 optimization
problem for each gait cycle. Theoretically, a precise sparse
representation will only contain the non-zero entries at the
locations related to the speciﬁc class. However, noise exists in
the empirical estimations. Therefore, the estimated coefﬁcients
vector of the m-th test gait cycle can be expressed as:
ˆxm = x + m
(1)
where x is the theoretical sparse representation of the test
vector and m is used to account for noise. The test vector
could be misclassiﬁed due to low Signal to Noise Ratio (SNR).
To enhance the SNR of the classiﬁcation system, we propose a
new sparse representation model by exploiting the information
from multiple gait cycles. The new sparse representation model
can be expressed as:
M(cid:88)
m=1
Fig. 7: Distribution of cycle duration
ˆxsum =
αm ˆxm
(2)
turning contains much noise that will deteriorate the recog-
nition accuracy. Apart from deleting unusual cycles using
cycle durations,
the detected cycles are also passed to a
function which further deletes unusual cycles. This function
uses Dynamic Time Warping (DTW) distance scores to remove
outliers from a set of cycles. Speciﬁcally, we ﬁrst compute the
DTW distance between the detected cycle and typical cycle.
Thereafter, we delete unusual cycles by a simple threshold
method, i.e., if the DTW distance of detected cycle and typical
cycle is higher than a predeﬁned value (12 in the proposed
system), the detected cycle will be dropped. The typical cycle
is the one which is assumed to represent the subject’s gait
signal. This is obtained by computing the the average of all
cycles in the training data.
2) Projection Optimization: After unusual cycles removal,
the remaining gait cycles obtained from training data are
used to form the ﬁnal training dictionary A. Motivated by a
recent work [27], we apply the projection matrix optimization
method proposed in [27] to reduce the dimensionality of SRC
while retaining the high classiﬁcation accuracy. The projection
matrix Ropt
is learned from dictionary A based on Tabu
search [30]. We refer the reader to [30] for more details.
D. MSSRC
SRC aims to solve the classiﬁcation problem of one test
vector, however, the evaluation results in Section VI-C show
that
the recognition accuracy of using one gait cycle can
achieve 86% (PEH dataset) and 75% (EEH dataset) only. To
overcome this limitation, we propose a novel sparse fusion
model which fuses the sparse coefﬁcients vectors from mul-
tiple consecutive gait cycles to further improve recognition
accuracy.
The key assumption behind the proposed method is that
gait cycles obtained from consecutive gait cycles tend to have
a high agreement on the sparse representations because each
of the gait cycles from the same person should be linearly
represented by the same class in the dictionary. Suppose
where αm is the weight assigned to ˆxm based on the Sparsity
Concentration Index (SCI) deﬁned in [31]:
SCI(ˆxm) =
K · maxj(cid:107)δj(ˆxm)(cid:107)1/(cid:107)ˆxm(cid:107)1 − 1
∈ [0, 1]
(3)
K − 1
the SCI measures how concentrated the coefﬁcients are in the
dictionary. SCI(ˆxm) = 1, if the test vector can be strictly
linearly represented using training vectors from only one class;
and SCI(ˆxm) = 0, if the coefﬁcients are spread evenly over
all classes. The weight of ˆxm is obtained by normalizing the
SCIs among the obtained M gait cycles:
αm = SCI(ˆxm)/
SCI(ˆxn)
(4)
M(cid:88)
n=1
M(cid:80)
With the knowledge of ˆxsum, the compressed residual of
each class is computed as:
ri(ysum) = (cid:107)Roptysum − RoptAδi(ˆxsum)(cid:107)2
(5)
αmym is the weighted summation of all
where ysum =
the test vectors. Following the same approach in [31], [27], the
ﬁnal classiﬁcation result is obtained by ﬁnding the minimal
residual.
m=1
To identify whether the walker is the genuine user or im-
poster, we adapt the same principle in [27] by using conﬁdence
level deﬁned as:
conf idence =
ri
(6)
The conﬁdence level is in the range of [0, 1] and the veriﬁcation
decision can be made by:
(cid:32)
1
K
K(cid:88)
i=1
(cid:33)
ri − min
K(cid:88)
(cid:26) ≥ C genuine user
i=1,...,K
i=1
ri
/
1
K
< C imposter
conf idence
where C is a threshold we set empirically. An appropriate
threshold can be chosen by data-driven approach to make the
recognition system robust to imposters.
6
Time(s)0123456Voltage(V)-2-1.5-1-0.500.511.52Filtered dataRaw  dataGait cycleStep cycleGait Cycle Duration(s)0.80.850.90.9511.051.11.151.21.251.3Probability00.020.040.060.080.10.120.14V. HARDWARE PLATFORM AND DATA COLLECTION
A. Proof-of-concept Prototype
PEH data logger. To this end, we built a data logger to
collect PEH voltage signals. The data logger includes a vi-
bration energy harvesting product from the MID `E Technology
called Volture, which implements the transducer to provide AC
voltage as its output. Our hardware also includes a 3-axis ac-
celerometer to record the acceleration signals, simultaneously
with the voltage signal. An Arduino Uno has been used as a
microcontroller device for sampling the data from the Volture.
A sampling rate of 100Hz has been used for data collection.
The sampled data has been saved on an 8GB microSD card
which has been equipped to the Arduino using microSD shield.
A nine volts battery has been used to power the Arduino. To
control the data collection, our data logger also includes two
switches, one is an on/off switch and the other to control the
start and stop of data logging. The Arduino measures voltage
between 0 and 5 volts and provides 10 bits of resolution
(i.e., 1024 different values). Therefore, we calculated the
corresponding output voltage from the measurements using
the following formula V = 5∗measurement
. The hardware
platform and the internal appearance of the data logger are
shown in Figure 8.
1023
(a)
(b)
Fig. 8: PEH data logger: (a) the external appearance and (b)
the internal details.
EEH data logger. We also built an EEH data logger to
collect voltage signals generated from an EEH device. The
data logger contains a harvesting circuit, through which energy
is generated by moving a magnet
through an inductor. A
Tmote sky board has been used as a microcontroller device
for sampling the data from the inductor. A sampling rate of
100Hz has been used for data collection. The sampled data has
been saved in the 48K Flash of the MSP430 microcontroller.