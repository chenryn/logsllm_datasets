          add      w5, w3, w4 
          add      w6, w8, w3, lsl 4 
          add      w1, w7, w3, lsr 5 
          eor      w1, w6, w1 
          eor      w1, w1, w5 
          add      w2, w2, w1 
          bne      .L2 
          str      w3, [x0] 
          str      w2, [x0,4] 
          ret 
100.3.5  Optimizing GCC 4.4.5（MIPS） 
指令清单 100.4  Optimizing GCC 4.4.5（MIPS）（IDA） 
f: 
                   lui 
   $t2, 0x9E37 
                   lui 
   $t1, 0xC6EF 
                   lw  
   $v0, 0($a0) 
                   lw  
   $v1, 4($a0) 
                   lw  
   $t6, 0xC($a1) 
                   lw  
   $t5, 0($a1) 
                   lw  
   $t4, 4($a1) 
                   lw  
   $t3, 8($a1) 
                   li  
   $t2, 0x9E3779B9 
                   li  
   $t1, 0xC6EF3720 
                   move    $a1, $zero 
loc_2C:                                           # CODE XREF: f+6C 
                   addu    $a1, $t2 
                   sll 
   $a2, $v1, 4 
                   addu    $t0, $a1, $v1 
                   srl 
   $a3, $v1, 5 
                   addu    $a2, $t5 
                   addu    $a3, $t4 
                   xor 
   $a2, $t0, $a2 
                   xor 
   $a2, $a3 
                   addu    $v0, $a2 
                   sll 
   $a3, $v0, 4 
                   srl 
   $a2, $v0, 5 
                   addu    $a3, $t3 
                   addu    $a2, $t6 
                   xor 
   $a2, $a3, $a2 
                   addu    $a3, $v0, $a1 
                   xor 
   $a2, $a3 
                   bne 
   $a1, $t1, loc_2C 
                   addu    $v1, $a2 
                   sw  
   $v1, 4($a0) 
                   jr  
   $ra 
                   sw  
   $v0, 0($a0) 
100.4  练习题 2.13 
下述程序采用了一种加密算法。这种算法的名称是什么？ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
886 
逆向工程权威指南（下册） 
100.4.1  Optimizing MSVC 2012 
_in$ = 8                  
; size = 2 
_f 
  PROC 
  movzx 
ecx, WORD PTR _in$[esp-4] 
  lea   
eax, DWORD PTR [ecx*4] 
  xor   
eax, ecx 
  add   
eax, eax 
  xor   
eax, ecx 
  shl   
eax, 2 
  xor   
eax, ecx 
  and   
eax, 32 
; 00000020H 
  shl   
eax, 10 
; 0000000aH 
  shr   
ecx, 1 
  or    
eax, ecx 
  ret   
0 
_f 
  ENDP 
100.4.2  Keil（ARM mode） 
f PROC 
          EOR   
r1,r0,r0,LSR #2 
          EOR   
r1,r1,r0,LSR #3 
          EOR   
r1,r1,r0,LSR #5 
          AND   
r1,r1,#1 
          LSR   
r0,r0,#1 
          ORR   
r0,r0,r1,LSL #15 
          BX    
lr 
          ENDP 
100.4.3  Keil（Thumb mode） 
f PROC 
          LSRS 
r1,r0,#2 
          EORS 
r1,r1,r0 
          LSRS 
r2,r0,#3 
          EORS 
r1,r1,r2 
          LSRS 
r2,r0,#5 
          EORS 
r1,r1,r2 
          LSLS 
r1,r1,#31 
          LSRS 
r0,r0,#1 
          LSRS 
r1,r1,#16 
          ORRS 
r0,r0,r1 
          BX   
lr 
          ENDP 
100.4.4  Optimizing GCC 4.9.1（ARM64） 
f: 
          uxth    w1, w0 
          lsr     w2, w1, 3 
          lsr     w0, w1, 1 
          eor     w2, w2, w1, lsr 2 
          eor     w2, w1, w2 
          eor     w1, w2, w1, lsr 5 
          and     w1, w1, 1 
          orr     w0, w0, w1, lsl 15 
          ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
887 
100.4.5  Optimizing GCC 4.4.5（MIPS） 
指令清单 100.5  Optimizing GCC 4.4.5（MIPS）（IDA） 
f: 
                   andi    $a0, 0xFFFF 
                   srl     $v1, $a0, 2 
                   srl     $v0, $a0, 3 
                   xor     $v0, $v1, $v0 
                   xor     $v0, $a0, $v0 
                   srl     $v1, $a0, 5 
                   xor     $v0, $v1 
                   andi    $v0, 1 
                   srl     $a0, 1 
                   sll     $v0, 15 
                   jr       $ra 
                   or       $v0, $a0 
100.5  练习题 2.14 
下面这段程序采用了另一种著名算法。函数把两个输入变量输出为一个返回值。 
100.5.1  MSVC 2012 
_rt$1 = −4  
;size=4 
_rt$2 = 8  
;size=4 
_x$ = 8 
;size=4 
_y$ = 12 
;size=4 
?f@@YAIII@Z PROC  
; f 
          push 
ecx 
          push 
esi 
          mov  
esi, DWORD PTR _x$[esp+4] 
          test 
esi, esi 
          jne  
SHORT $LN7@f 
          mov  
eax, DWORD PTR _y$[esp+4] 
          pop  
esi 
          pop  
ecx 
          ret  
0 
$LN7@f: 
          mov  
edx, DWORD PTR _y$[esp+4] 
          mov  
eax, esi 
          test 
edx, edx 
          je   
SHORT $LN8@f 
          or   
eax, edx 
          push 
edi 
          bsf  
edi, eax 
          bsf  
eax, esi 
          mov  
ecx, eax 
          mov  
DWORD PTR _rt$1[esp+12], eax 
          bsf  
eax, edx 
          shr  
esi, cl 
          mov  
ecx, eax 
          shr  
edx, cl 
          mov  
DWORD PTR _rt$2[esp+8], eax 
          cmp  
esi, edx 
          je   
SHORT $LN22@f 
$LN23@f: 
          jbe  
SHORT $LN2@f 
          xor  
esi, edx 
          xor  
edx, esi 
          xor  
esi, edx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
888 
逆向工程权威指南（下册） 
$LN2@f: 
          cmp  
esi, 1 
          je   
SHORT $LN22@f 
          sub  
edx, esi 
          bsf  
eax, edx 
          mov  
ecx, eax 
          shr  
edx, cl 
          mov  
DWORD PTR _rt$2[esp+8], eax 
          cmp  
esi, edx 
          jne  
SHORT $LN23@f 
$LN22@f: 
          mov  
ecx, edi 
          shl  
esi, cl 
          pop  
edi 
          mov  
eax, esi 
$LN8@f: 
          pop  
esi 
          pop  
ecx 
          ret  
0 
?f@@YAIII@Z ENDP 
100.5.2  Keil（ARM mode） 
||f1|| PROC 
          CMP   
r0,#0 
          RSB   
r1,r0,#0 
          AND   
r0,r0,r1 
          CLZ   
r0,r0 
          RSBNE 
r0,r0,#0x1f 
          BX  
lr 
          ENDP 
f PROC 
          MOVS   r2,r0 
          MOV    
r3,r1 
          MOVEQ 
r0,r1 
          CMPNE 
r3,#0 
          PUSH  
{lr} 
          POPEQ 
{pc} 
          ORR   