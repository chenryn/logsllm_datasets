CastGuard
Joe Bialek – Microsoft Offensive Research & 
Security Engineering (MORSE)
Twitter: @JosephBialek
Problem Space
Killing Bugs vs. Killing Exploit Techniques
Mitigating exploit techniques has ambiguous long-term value.
Mitigations are typically far enough away from actual bug that bugs 
are still exploitable using different techniques.
Tradeoffs between performance, compatibility, and mitigation 
durability are becoming increasingly difficult.
Unclear how many more practical opportunities there are for building 
meaningful exploit mitigations.
Killing Bugs vs. Killing Exploit Techniques
Microsoft increasingly focused on eliminating vulnerability classes, 
removing attack surface, and sandboxing code.
Hyper-V vPCI component refactored from a C kernel component to C++ (w/ GSL) user 
component.
Microsoft investigation of Rust and other safer systems languages, and use of managed 
languages.
CLFS blocked from sandboxes, Redirection Guard, etc.
Path Forward for C/C++ Code
Four high-level bug classes responsible for majority of memory safety 
vulnerabilities.
Buffer Overflow & Out-of-Bounds Accesses (i.e. attacker controls array index)
Uninitialized Memory
Type Confusion
Use-After-Free
Path Forward for C/C++ Code
Four high-level bug classes responsible for majority of memory safety 
vulnerabilities.
Buffer overflow / out-of-bounds accesses (spatial safety)
Uninitialized memory
Type confusion
Use-after-free
Memory Tagging? / CHERI?
InitAll / Zeroing Allocators
Memory Tagging? / CHERI? / Application 
Specific Solutions (MemGC)
???
Not necessarily things Microsoft is committed to using, just illustrating solution space.
Type Confusion
Come in many flavors..
Illegal static downcast (down-casting to the wrong derived type in a class hierarchy).
Improper union use.
Illegal reinterpret_cast (i.e. cast an object of some type to totally different type).
Generic logic issues (i.e. using fields incorrectly).
Offer extremely powerful primitives to attackers and can often lead to 
breaking mitigations such as Memory Tagging.
Many forms of type confusion are not possible to generically solve .
Illegal Static 
Downcasts
struct Animal {
virtual void WhoAmI() {cout (myAnimal)->WhoAmI();   // Illegal down-cast
dynamic_cast?
Code creating the object and code casting object must enable 
Runtime Type Information (RTTI).
Makes it difficult to automatically convert existing static_cast’s to dynamic_cast. Need to control 
all code to ensure RTTI settings are uniform. We cannot enforce this (3rd party DLL’s, etc.).
RTTI causes binary size bloat (may be possible to optimize).
Windows.UI.Xaml.Controls.dll grows 86.5% from RTTI (no dynamic_cast).
dynamic_cast checks have overhead (may be possible to optimize).
00007ff7`56771472 c744242000000000 mov 
dword ptr [rsp+20h], 0 ss:0000001f`baeff890=567bf330
00007ff7`5677147a 4c8d0ddf070600 
lea 
r9, [test3!MyChild1 `RTTI Type Descriptor' (00007ff7`567d1c60)]​
00007ff7`56771481 4c8d0590080600 
lea 
r8, [test3!MyBase `RTTI Type Descriptor' (00007ff7`567d1d18)]​
00007ff7`56771488 33d2 
xor
edx, edx
00007ff7`5677148a 488bcb 
mov 
rcx, rbx
00007ff7`5677148d e81ec10400 
call 
test3!__RTDynamicCast (00007ff7`567bd5b0)​
test3!__RTDynamicCast:​
00007ff7`567bd5b0 48895c2410 
mov 
qword ptr [rsp+10h], rbx ss:0000001f`baeff878=0000000000000001​
00007ff7`567bd5b5 4889742418 
mov 
qword ptr [rsp+18h], rsi
00007ff7`567bd5ba 57 
push 
rdi
00007ff7`567bd5bb 4154 
push 
r12​
00007ff7`567bd5bd 4155 
push 
r13​
00007ff7`567bd5bf 4156 
push 
r14​
00007ff7`567bd5c1 4157 
push 
r15​
00007ff7`567bd5c3 4883ec50 
sub 
rsp, 50h​
00007ff7`567bd5c7 4d8bf9 
mov 
r15, r9​
00007ff7`567bd5ca 4d8be0 
mov 
r12, r8​
00007ff7`567bd5cd 4c63ea 
movsxd
r13, edx
00007ff7`567bd5d0 488bf9 
mov 
rdi, rcx
00007ff7`567bd5d3 33db 
xor
ebx, ebx
00007ff7`567bd5d5 4885c9 
test 
rcx, rcx
00007ff7`567bd5d8 751c 
jne
test3!__RTDynamicCast+0x46 (00007ff7`567bd5f6) 
(animal);
}
Threat Model / Requirements
Code must be compiled using Link Time Code Generation (LTCG).
Code creating the object in the same LTCG module as code casting the object.
LHS type and RHS type have at least 1 vftable.
Object is valid (i.e. if RHS type is Animal*, it is a valid Animal*).
If some other component already illegally casted the object, we will not provide protection.
First-order memory safety vulnerability is the type confusion (i.e. 
attacker doesn’t already have memory corruption).
Single Inheritance 
Example
What The Compiler Knows
This is a static downcast from Animal* to Cat*.
The offset into Cat* and Animal* that the vftable pointer is located.
The location (RVA into binary) of the vftables for every type in this 
hierarchy (i.e. where the vftables are laid out in the binary).
void Foo (Animal* animal) {
static_cast(animal);
}
Object Layout
B
C
D
E
F
G
H
A
“B” members
“C” members
“B” members
“D” members
“B” members
“A” members
Object B layout
Object C layout
Object D layout
“A” members
“A” members
“B” vftable
“C” vftable
“D” vftable
Vfuncs defined by A
“A” members
Object A layout
“A” vftable
Vfuncs defined by A
Vfuncs defined by B
Vfuncs defined by A
Vfuncs defined by B
Vfuncs defined by C
Derived types begin with their base types layout and append their own member variables after the base type.
The Vftable View of the World
B::$vftable@
C::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
G::$vftable@
H::$vftable@
A::$vftable@
B
C
D
E
F
G
H
A
It is helpful to think about class hierarchies in terms of the vftables as that is the unique identifier
A::$vftable@
B::$vftable@
C::$vftable@
E::$vftable@
F::$vftable@
D::$vftable@
G::$vftable@
H::$vftable@
A
✓
✓
✓
✓
✓
✓
✓
✓
B
✓
✓
✓
✓
✓
✓
✓
C
✓
✓
✓
D
✓
✓
✓
E
✓
F
✓
G
✓
H
✓
LHS Type (Type Being Cast To)
Legal Underlying Vftables
B::$vftable@
C::$vftable@
D::$vftable@
E::$vftable@
F::$vftable@
G::$vftable@
H::$vftable@
A::$vftable@
This table shows the vftables are that legal for a pointer of some specific type to have
For example, if you cast to an “E” the only legal vftable would be E::$vftable@
Naïve Check (To Understand Concepts)
User Code:
void MyFunction (B* b)
{
static_cast(b);
}
Compiler Inserts:
// Ensure the vftable is one of the legal
// vftables, if not, fast-fail
if (b != NULL)
{
if (b->vftable != C::$vftable@ &&
b->vftable != E::$vftable@ &&
b->vftable != F::$vftable@)
{
fast-fail
}
}
static_cast on a NULL pointer is always allowed.
Naïve Check (To Understand Concepts)
void MyFunction (B* b)
{