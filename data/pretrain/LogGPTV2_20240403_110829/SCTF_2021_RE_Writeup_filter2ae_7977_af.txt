        }
        for ( i = 15; i >= 0; i-- ) {
            v6 = roundkeys--;
            plaintext[i] = *v6 ^ ciphertext[i] ^ 0x66;
        }
    }
    void aes_encrypt(char* data, char* key) {
        uint8_t roundkeys[256];
        char src[16];
        memcpy(src, data, 16);
        enc_next_ready(key, roundkeys);
        enc_next(roundkeys, src, data);
    }
    void aes_decrypt(char* data, char* key) {
        // todo: implement this method
        uint8_t roundkeys[256];
        char src[16];
        memcpy(src, data, 16);
        dec_next_ready(key, roundkeys);
        dec_next(roundkeys, src, data);
    }
    int main() {
        unsigned int delta = 0x73637466;
        // char data[33] = "0123456789abcdef";
        // cmp_arr
        char data[] = {
            0xBE, 0x1C, 0xB3, 0xF3, 0xA1, 0xF4, 0xE4, 0x63,
            0x11, 0xE1, 0x1C, 0x6B, 0x54, 0x0A, 0xDF, 0x74,
            0xF2, 0x93, 0x55, 0xDA, 0x48, 0xFC, 0xA2, 0x3C,
            0x89, 0x63, 0x2E, 0x7F, 0x8D, 0xA4, 0x6D, 0x4E,
            0
        };
        unsigned int* data_ptr = (unsigned int*) data;
        unsigned int v0, v1, v2, v3;
        char key[17] = "Welcome_to_sctf!";
        unsigned int* tea_key_ptr = (unsigned int*) key;
        unsigned int k0 = tea_key_ptr[0], k1 = tea_key_ptr[1], k2 = tea_key_ptr[2], k3 = tea_key_ptr[3];
        unsigned int sum1 = 0, sum2 = 0;
        /*
        char test_data[17] = "aaaaaaaaaaaaaaaa";
        aes_encrypt(test_data, key);
        for (int i = 0; i > 5) + k3) ^ (sum1 + i);
            v2 += ((v3 > 5) + k3) ^ (sum2 + i);
            v1 += ((v0 > 5) + k1) ^ (sum1 + i);
            v3 += ((v2 > 5) + k1) ^ (sum2 + i);
        }
        data_ptr[0] = v0 ^ ((delta >> 24) & 0xff);
        data_ptr[1] = v1 ^ ((delta >> 16) & 0xff);
        data_ptr[2] = v2 ^ ((delta >> 8) & 0xff);
        data_ptr[3] = v3 ^ (delta & 0xff);
        /**/
        for (int loop = 0; loop > 8) & 0xff);
            data_ptr[1] ^= ((delta >> 16) & 0xff);
            data_ptr[0] ^= ((delta >> 24) & 0xff);
            v0 = data_ptr[0];
            v1 = data_ptr[1];
            v2 = data_ptr[2];
            v3 = data_ptr[3];
            for (int i = 0; i = 0; i--) {
                v3 -= ((v2 > 5) + k1) ^ (sum2 + i);
                v1 -= ((v0 > 5) + k1) ^ (sum1 + i);
                v2 -= ((v3 > 5) + k3) ^ (sum2 + i);
                v0 -= ((v1 > 5) + k3) ^ (sum1 + i);
                sum2 -= delta;
                sum1 -= delta;
            }
            data_ptr[0] = v0;
            data_ptr[1] = v1;
            data_ptr[2] = v2;
            data_ptr[3] = v3;
            data_ptr += 4;
        }
        puts(data);
        /**/
        return 0;
    }
flag: SCTF{5277cc2af8f1155f7a61030f46fdf9df}
###  BabyDriver
babydriver.exe 拖入 ida ， initialize_pointers 中注册了异常处理函数 sub_140071500
，进入函数，有个参数，直接改类型为 PEXCEPTION_POINTERS ，逻辑一下就出来了：
    int __fastcall sub_140071500(PEXCEPTION_POINTERS e)
    {
      int result; // eax
      if ( e->ExceptionRecord->ExceptionCode == (unsigned int)EXCEPTION_ACCESS_VIOLATION )
      {
        e->ContextRecord->Rip = *(_QWORD *)e->ContextRecord->Rsp + 7i64;
        e->ContextRecord->Rsp += 8i64;
        result = EXCEPTION_CONTINUE_EXECUTION;
      }
      else if ( e->ExceptionRecord->ExceptionCode == (unsigned int)EXCEPTION_INT_DIVIDE_BY_ZERO )
      {
        funcs[e->ContextRecord->Rax]();
        e->ContextRecord->Rip += 8i64;
        result = EXCEPTION_CONTINUE_EXECUTION;
      }
      else
      {
        result = EXCEPTION_CONTINUE_SEARCH;
      }
      return result;
    }
这里先放着，待会要用的。
再回到 main ，直接一个 `MEMORY[0]()`，看汇编：
    .text:0000000140071318                 xor     eax, eax
    .text:000000014007131A                 call    rax
    .text:000000014007131C                 xor     eax, eax
    .text:000000014007131E                 jmp     loc_1400714DA
这 call 明显会触发 EXCEPTION_ACCESS_VIOLATION ，被上面的函数处理，`*(_QWORD
*)e->ContextRecord->Rsp`就是返回地址 0x14007131C ，再 + 7 就是 0x140071323 ，之后 rsp += 8
将返回地址弹出栈，所以什么都没做，直接将 call 指令 patch 为 jmp loc_14007131C:
    .text:0000000140071318                 xor     eax, eax
    .text:000000014007131A                 jmp     short loc_140071323 ; Keypatch modified this from:
    .text:000000014007131A                                         ;   call rax
    .text:000000014007131C ; ---------------------------------------------------------------------------    .text:000000014007131C                 xor     eax, eax
    .text:000000014007131E                 jmp     loc_1400714DA
    .text:0000000140071323 ; ---------------------------------------------------------------------------    
再 F5 ， main 就恢复了：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int result; // eax
      __int64 input_len; // [rsp+48h] [rbp-60h]
      HANDLE hFile; // [rsp+50h] [rbp-58h]
      DWORD NumberOfBytesRead; // [rsp+60h] [rbp-48h] BYREF
      char enc[16]; // [rsp+68h] [rbp-40h] BYREF
      char input[21]; // [rsp+78h] [rbp-30h] BYREF
      input[0] = 0;
      memset(&input[1], 0, 20ui64);
      enc[0] = 0;
      memset(&enc[1], 0, 15ui64);
      initialize_pointers();
      if ( query(0, 0i64, 0) )
      {
        hFile = CreateFileA("key.bin", GENERIC_READ, FILE_SHARE_READ, 0i64, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0i64);
        if ( hFile == (HANDLE)-1i64 )
        {
          printf("Can't not find the key file\n");
          result = 0;
        }
        else
        {
          NumberOfBytesRead = 0;
          if ( ReadFile(hFile, Buffer, 0x258u, &NumberOfBytesRead, 0i64) )
          {
            printf("Please input the flag:");
            scanf("%s", input);
            input_len = -1i64;
            do
              ++input_len;
            while ( input[input_len] );
            if ( test_charset(input, input_len)
              && run_function(input, input_len, enc)
              && (query(2, (__int64)enc, 16u), Sleep(500u), query(1, (__int64)enc, 16u), enc[0]) )
            {
              printf("Success!!!\n");
              result = 0;
            }
            else
            {
              printf("You fail.\n");
              result = 0;
            }
          }
          else
          {
            printf("Can't not read the key file\n");
            result = 0;
          }
        }
      }
      else
      {
        printf("Driver not running");
        result = 0;
      }
      return result;
    }
query 函数很奇怪：
    _BOOL8 __fastcall query(int a1, __int64 a2, unsigned int a3)
    {
      struct _SYSTEMTIME SystemTime; // [rsp+28h] [rbp-40h] BYREF
      __int64 v5[3]; // [rsp+38h] [rbp-30h] BYREF
      __int64 v6; // [rsp+50h] [rbp-18h]
      v5[0] = a1;
      v5[1] = a2;
      v5[2] = a3;
      v6 = 1i64;
      memset(&SystemTime, 0, sizeof(SystemTime));
      GetSystemTime(&SystemTime);
      *(_QWORD *)qword_14009DED8 = v5;
      SetSystemTime(&SystemTime);
      return v6 == 0;
    }
按理说 return v6 == 0 只会返回 0 ，那么 main 中就会输出 “Driver not running” 并结束，想到题目名叫
BabyDriver ，那就还得分析另一个文件 sctf.sys 。同样拖入 ida ，进入 DriverEntry ，跟入 sub_140001078 ：
    __int64 __fastcall sub_140001078(PDRIVER_OBJECT a1)
    {
      sub_1400010CC(sub_140001000);
      a1->DriverUnload = (PDRIVER_UNLOAD)sub_1400010A0;
      return 0i64;
    }
跟入 sub_1400010CC ：
    __int64 __fastcall sub_1400010CC(__int64 (__fastcall *a1)(__int64))
    {
      UNICODE_STRING v3; // [rsp+20h] [rbp-40h] BYREF
      struct _OBJECT_ATTRIBUTES ObjectAttributes; // [rsp+30h] [rbp-30h] BYREF
      PCALLBACK_OBJECT CallbackObject; // [rsp+78h] [rbp+18h] BYREF
      CallbackObject = 0i64;
      v3.Buffer = L"\\Callback\\SetSystemTime";
      *(_DWORD *)&v3.Length = 0x30002E;
      memset(&ObjectAttributes, 0, sizeof(ObjectAttributes));
      ObjectAttributes.Length = 48;
      ObjectAttributes.ObjectName = &v3;
      ObjectAttributes.Attributes = 80;
      if ( ExCreateCallback(&CallbackObject, &ObjectAttributes, 1u, 1u) SubSystemData;
          v6->SubSystemData = 0i64;
        }
      }
      if ( MmIsAddressValid(v5) )
      {
        v7 = sub_14000123C((__int64)v5);
        v8 = v7;
        if ( v7 >= 2u )
          __writecr8(0i64);
        *((_QWORD *)v5 + 3) = (int)func_140001000(v5);
        if ( (unsigned __int8)v8 >= 2u )
        {
          KeGetCurrentIrql();
          __writecr8(v8);
        }
        if ( *(_DWORD *)v5 == 2 )