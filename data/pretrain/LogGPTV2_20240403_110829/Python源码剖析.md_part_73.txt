一清除算法就将在merge之后所得到的那一条内存链表上进行。同时
lext
>ge.gcDrey
axeuo51obk-uoxg
>gc.ge_prev:
清除方法
"tail;
---
## Page 497
如图16-16所示。
清除算法。这个例子与图16-10所示的例子相类似，但是不同的是，它多了一个外部引用，
建立一个循环引用的最简单的例子，基于这个例子，我们将描述Python中使用的标记一
年轻的“代”都进行了回收。
其中，在Pyobject_HEAD部分标出的数值表示对象的引I用计数ob_refcnt的值。
在详细剖析Pyhon中用于打破循环引用的标记一
generation1
generation
generation
generationD
会会会会
700
700
11st4=0
List3=
=listl
liatz
listl
listl
图16-16用于演示标记一清除算法的例子
图16-15
对可收集对象链表的合井操作
list2
Python源码剖析
合井（merge）
Reference to othercontainer object
PyGC_Head gc gc_prev
16.4
PyGCHeadgegc_next
container object
PyObject HEAD
PyGC_Head
清除垃圾收集方法之前，需要先
Python中的垃圾收集
list3
深度探索动态语言核心技术
IIst4
467
---
## Page 498
Python源码剖析
16.4.3.1
468
都不会影响到对象生命周期的维护，因为这个副本的唯一作用就是寻找rootobject集
我们并不改动真实的引用计数，而是改动引用计数的副本。对于副本无论做任何的改动，
c的引用，而c并不在这个链表中，如果将c的引用计数减1：而最后A并没有被回收，
合。这个副本就是PyGC_Head中的gc.gc_ref。在垃圾收集的第一步，就是遍历可收集
的方案，那么维护引用计数的复杂度将成倍增长。换一个角度，其实我们有更好的做法，
悬空引用。这就要求我们必须在A没有被删除的情况下复原c的引用计数，如果采用这样
那么显然，
引用，同样将A的引用减1，这样，就完成了循环引用对象间环的摘除。
有一个对B的引用，则将B的引用计数减1；然后顺着引用达到B，因为B有一个对A的
个对象的引用计数都减1呢，很简单，假设这两个对象为A、B，我们从A出发，因为它
数都成为了0，我们挥去了循环引用的迷雾，使有效引用计数现出了真身。那么如何使两
除，具体的实现就是两个对象各自的引用计数值都减去1。这样一来，两个对象的引用计
从引用计数获得有效引用计数，必须将循环引用的影响去除，也就是说，将环从引用中摘
现为非0，但实际上有效的引用计数为0。这里，我们提出了有效引用计数的概念，为了
的循环引用，那么这两个对象都是需要被回收的，也就是说，虽然它们的引用计数量然表
如何设计一种算法来得到这个结果呢？
图16-16中可以看到只有1ist1应该属于rootobject。但是，这只是观察的结果，应该
有可收集对象链表外部的某个引用在引用这个对象，删除这个对象会导致错误的行为，从
object呢？
需要寻找出rootobject集合。那么在图16-16中，哪些container对象应该属于root
static void update_refs(PyGc_Head tcontainers)
[gcmodule.c]
但是这样就引出了一个问题，假设可收集对象链表中的container对象A有一个对对象
我们注意到这样一个事实，如果两个对象的引用计数都为1，但是仅仅存在它们之间
让我们换个角度来思考，前面提到，rootobject是不能被删除的对象。也就是说
第16章Python的内存管理机制
Eor.
为了使用标记一
寻找RootObject集合
gC->gc.gc_refs=FROM_GC(gc)->ob_refent;
，c的引用计数被错误地减少了1，这将导致在未来的某个时刻出现一个对c的
一深度探索动态语言核心技术
一清除算法，按照我们前面对垃圾收集算法的一般性描述，首先我们
GC_REACHABLE);
next)
---
## Page 499
义的traverse操作。
调函数的形式传递到traverse操作中。作为例子，我们来看看PyDictobject对象所定
对引用进行某种动作，而这个动作在subtract_refs中就是visit_decref，它以一个回
象中定义。一般来说，traverse的动作都是遍历container对象中的每一个引用，然后
visit_decref.
static void subtract_efs（PyGc_Head  containers)
static Int dict_traverse(byobject *op,
typedef int
[gomodule.c]
statie Int visit_decref(Pyobject *op,void *data)
PyTypeobject PyDict_Type=
[dictobject.c]
typeder
[object.h]
[gcmodule.d]
其中的traverse是与特定的container对象相关的，在container 对象的类型对
接下来的动作就是要将环引用从引用中摘除。
对于aict中的所有键和所有值都回调用回调函数，即subtractrefs中传递进来的
while(PyDict_Next（op.&,&pk,&pv)）（
For
traverseproc traversei
//Pyobject_IS_GC判断op指向的对象是不是被垃圾收集监控的
Pyobject
Pyobject
int1
(traverseproc)dict_Eraverse,
visie(pv,
(void) traverse(FRoM_cC(ge),(visitproc)visit_decref,NULL);
traverse =FRoM_Gc(gc)->ob_type->tp_traverse;
ine
Head
1
0
*PVi
*pk;
(*vieitpoc）（Pyobject*
gc
containers;
arg);
arg):
containers->gc.gc_next;
gc-gc
>gc.gc_next)
void*:
Python源码剖析
visitproc visit,void *arg)
16.4
Python中的垃圾收集
一深度探索动态语言核心技术
469
---
## Page 500
Python源码剖析
16.4.3.2垃圾标记
470
对原始链表的剖分（见代码清单16-9）。
只需限制在unreachable链表中即可
标记后，unreachable链表中剩下的对象就是名副其实的垃圾对象了，接下来的垃圾回收
的过程中，发现了这样的对象，就将其从unreachable链表中移到root链表中；当完成
存在被root链表中的对象直接或间接引用的对象，这些对象也是不能回收的，一旦在标记
表，是基于这样的一种考虑：显然，现在的unreachable链表是名不副实的，其中可能
链表，而另一条链表中维护剩下的对象，称为unreachable链表。之所以要剖成两个链
我们首先要将现在的内存链表一分为二，
因此，被这些对象直接或间接引用的对象也是不能回收的。在从rootobject出发之前
处理后所得到的rootobject集合。
集合
意味着存在对这些对象的外部引用，这些对象，就是开始标记一
用都被摘除了。这时，有一些container对象的pyGC_Head.gc.gc_ref还不为O，这就
一个接一个地标记不能回收的内存，由于rootobject集合中的对象是不能回收的
图16-17展示了图16-16所示的例子在经过了update_refs和subtract_refs两步
在完成了subtract_refs之后，可收集对象链表中所有contianer 对象之间的环引
第16章Python的内存管理机制
成功地寻找到rootobject集合之后，我们就可以从rootobject出发，沿着引用
return 0:
1--510-0606gC.gC_refS GC_TENTATIVELY_UNREACHABLE:
next=ge->gc.gc_next:
(gc->gc.gc_refs)
gc->gc.gc_refs=
ge_list_move（gc
gc_list_move(gc)
Pyobject
void)
GCUNTRACKED)：
81010656
traverse(op)
young)
refs
AS
sC(op）
gC-
GC_REACHABLE;
reachable);
GC_TENTATIVELY_UNRBACHABLE)
unreachablel:
移到unreachable表中
，设置其gC_efs为GC_RBACHABLE标志
恢复其gc_ref日
op->ob_type->tp_traverse;
Python源码剖析
PyGC_Head *reachabIe)
16.4Python中的垃圾收集
PyGC_Head *unreachable)
将其再次挪到原来的链表
深度探索动态语言核心技术
471
---
## Page 502
Python源码剖析
472
Hook机制。现在问题来了，我们已经知道，最终在unreachab1e链表中出现的对象都是
因为这个_del_就是Pyhon为开发人员提供的在对象被销毁时进行某些资源释放的
中被称为finalizer。当一个拥有finalizer的实例对象被销毁时，首先会调用这个finalizer，
用Python定义一个class时，可以为这个class定义一个特殊的方法：_de1_，这在Python
云最终将会把经典物理学的大厦摧枯拉朽般地推毁。现在，我们也遇到了这样的乌云。
以为物理学的大厦已经建立完毕时，这座大厦的上空又出现了小小的三朵乌云，而这些乌
在unreachable链表中，所有的对象都能被安全地回收吗？恐怕未必。当20世纪初人们
unreachabie链表中，就是我们所发现的垃圾对象，是垃圾回收的目标。但是，等一等，
move_unreachable访问它时将其移动到unreachable链表的诱因。图16-18显示了链表
move_unreachable操作还没有访问到的对象，这样，Pyhon就直接掐断了之后
也将其gc_rers设置为了1。想一想，这样的对象是什么对象呢？显然，它是在链表中
是一个不可回收的对象。同样，在[1]处，我们看到对A所引用的gc_refs为0的对象，
链表中搬移回原来的列表。注意，这里的reachable，即是move_nreachabi中的young，
所引用的对象进行调用visit_reachable，在visit_reachable的[4]处我们就可以发现，
因此，在代码清单16-9的[1]处，会再次调用与特定对象相关的traverse操作，依次对A中
或从某个rootobject能引用到的对象，而a所引用的所有对象也都是不可回收的对象。
但是还是通过gc_list_move将其搬移到了unreachable对象链表中，不过不要紧，马上
对象，因此在代码清单16-9的[2]处将其暂时性地标注为GC_TENTATIVELY_UNREACHABLE
rootobject，而这个rootobject将引用该对象。所以，这个对象只是一个可能的垃圾
被剖分后的结果。
也就是我们所谓的rootobject链表。Python还会将其gc_refs设置为1，表示该对象
访问到它，就意味着它也是一个不可回收对象，所以Python会重新将其从unreachable
如果A所引I用的对象之前曾被标注为GC_TENTATIVELY_UNREACHABLE，那么现在能通过
我们就能看到，Pyhon留下了一条后路
问题出在一种特殊的container 对象，即从类对象实例化得到的实例对象。当我们
当move_unreachable 完成之后，最初的一条链表就被剖分成了两条链表，在
第16章Python的内存管理机制
一深度探索动态语言核心技术
图16-18最终获得的reachable链表和unreachable链表
reachable（rootobject）)链表
list1
lst3
unreachable链表
ist4
---
## Page 503
16.4.3.3
unreachable链表中的每一个对象的ob_refcnt变为0，引发对象的销毁。
gcrefs来模拟这个打破过程，现在我们要真刀真枪对obrefent下手了，直到
们已经详细地阐述了如何打破循环引用的算法。在寻找rootobject时，我们引入了
显然是很愚蠢的，所以Pyhon采用了一种保守的做法，即将unreachable链表中的拥有
常低，但Python不能对此置之不理。这是一个非常棘手的问题，从Pyhon中拿掉_del
无疑问，Pyhon遇到麻烦了。虽然同时满足存在finalizer和循环引用这两个条件的概率非
能保证回收的顺序。于是，有可能在A被销毁之后，B在销毁时访问已经不存在的A，毫
象A一定要在对象B之后被回收，但是Py山on无法做到这一点，Python在回收垃圾时不
对象B在Enalizer中调用了对象A的某个操作，这意味着安全的垃圾回收必须保证对
只存在循环引用的对象，需要被销毁。但是假如现在在unreachbale中，有两个对象，
中。
statie void delete_garbage(Pycc_Head *collectable,PyCC_Head *old)
gc_list_is_empty(PyGe_Head Iist)
static
[gcmodule.e]
return (list->ge,gc_next ==list);
要回收urreachable链表中的垃圾对象，就必须先打破对象间的循环引用，前面我
其中会调用container对象的类型对象中的 tp_clear 操作，这个操作会调整
Hnguiryclear:
垃圾回收
gc->go.gc_reEsGC_REACHABLE;
PY_DECREE（OP）:
clear(op);