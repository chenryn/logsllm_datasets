first=1001
Rs a tree:
root-*-123
L=**
L***
R***1.00
-456
8=*
1.001
ptr=0x0058B640 Left+0x005885g0 Parent=0x00588660 Right=0x0058B5E0 Co1or=0 Isni1=0
s.begin () :
3.end() :
pt.r=0x005BB5E0 Left=0x00588640 Parent=0x0058a600 Right=0x005BB6A0 Co1or=1 Isni1=1
---
## Page 81
第51章C++
557
因为结构设计得并不紧密，所以2个char型值各占用了4字节空间。
对于 std:map 结构来说，frst 和 second 的数据数据组合可被视为 std:pair的一个数据元素。而 sd:set
的每个节点则只有1个值。
51.4.2节介绍过，MSVC编译器在构造std:：list的时候会保链表的长度信息。我们可以在程序看到它也
存储了这种数据类型的具体尺寸。
这两种数据结构和 std:list 的相同之处是，选代器都是指向节点的指针。.beginQ选代函数指向最小的
键，实际上，整个数据结构里都没有最小键的指针（和链表的情况一样）每当程序调用这个选代器的时候。
它就遍历所有键、查找出最小值。单目递增运算符operator-和单目递减运算符operator++可将指针指向树
里的前—个或后—个节点。 MIT 出版社出版的 《Introduction to Algorithms, Third Edition} (Thomas H Commen 等
人著）介绍了这两个运算符的具体算法。
选代器.endO指向了一个隐蔽的虚节点。其Isnil为1，即是说它没有对应的关键字（key）或值（value）、
不是真正意义上的数据结点，仅是一个存储控制信息的容器。这个虚节点的父节点是真正的根节点的指针，
也就是整个信息树的项点。
include 
 ape[ou+
incLsde 
include 
Include 
struct sap.pair
const char *value,
Lnt key
struct tree_node
int M_color: // 0 - Red, 1 - Black
struct tree_ode *M_left;
struct tree_node *X_pstent:
1:
struct tzee_node *K_right,
struct tree_node M_header:
Int M_key_conpare
size_t M_node_count:
veid dunp_tree_node (struct tree_node *n, bool ia_set, bool traverse,
boel duap_keys_and_ralues)
printf (*ptr=0xhp M_1eft=0xip M_parent=0xip _r1ght=0xip M_co1or=Id’\n*,
n, n>H_left, n->M_parent, n->M_right, n->M_color11
roid *point_after_stroct=( (char*)n) +sizeof (struct tree_node)]
f(dunp_keys_and_values)
if [i8_set)
printf (*key=id\n*, *(int*)point_after_st.ruct);
printf (*key=1d value=[1s] \n*, p=>key。 p~>value] /
---
## Page 82
558
逆向工程权威指南（下册）
11
if (traverse==false)
return:
if (n=>8_1eft)
dunp_tree_node (n->H_left, Is_set., traverse, dump_keys_and_valoes):
dunp_tree_node (n->M_right, Ls_set, traverse, dusp_keys_and_raloes) =
const char* ALOT_OF_Ta8s=*\t\t\t\t\t\t\t\t\t\t’t",
void dump_as_tree (int tab8, struct tree_node *n, boo] is_set)
void *point_after_struct= [ (chaz*)n) +slzeof (struct tzee_node);
if (is_set)
printf (*sdin*, *(int*)point_after_struet)
e15e
printf (*4d [lis]\n*, p=>key, p->ealue):
printf (*s,*sL-******, tabs, ALOT_or_TABS)
dunp_as_tree (tabs+1, n->M_left, is_set)/
(6u) gT
printf (*s.*sR-·.**, tabs, ALOT_OF_ABS)
dump_as_tree (tabs+1, n>M_right, is_set)
1:
1(
void dump_map_and_set (struct tree_struct *n, bool is_set)
printf (ptr=Dxip, Mkey_conpaze=0xtx, X_beader=0xip, M_node_count=id’n*,
m, m>M_key_conpare, sm->α_beader, n->node_count.) :
dump_tree_node (n->M_header.?_parent, is_set, true, true):
printf (*As a tree:\n*);
printf (*root-.**);
dump_ss_tree (1, n->M_header,M_parent, Is_set);
1 (
int nain()
// map
std::sap mj
n[10|=*ten*;
n[20]=*twenty":
n[3]=*three*;
m[100]-one hundred*;
_ouo pezpunt ouo,=1tot|u
n[12|=*twelve*:
n[107]="one hundred seven*;
n[1]-*one*;
n[0]=*zero*;
n[6]=*six*;
n[99|=*ninety-nine*;
---
## Page 83
第51章C++
559
=[5]="five*;
[1001]-*one thousand one*;
=[11]="elevena;
r_uaa puesnog auo=[0tot]=
=[2]="tvo*;
=[9[=*nine*}
printf (*dumping ± as rap:\n*):
durp_map_and_set ((struct tree_struct *) (void*)s, false]
std::map::iterator 1t1=m,begin()1
priatf (*n.begin():\n*);
dunp_tree_node ((struct tree_node *)*(void**)sitl, false, false, true);
printf (*n.end():1n*)
It1=a.end() :
dunp_tree_node ((struct tree_node *)*(void**)6it1, false, false, false];
// set
std:1set 5}
s. Insert(123)1
s.insert (4561
s.insert (11))
3.insert (12) :
s.insert (100) ;
printf (*durping s as set:\n*):
s.Insert(1001) ;
dunp_map_and_set ((struct tree_struct *) (void*)ss, true) ;
stds:set:iterator it2=s.begin (1
printf (*s.begin():\n*)
duap_tree_node ((struct tree_node *) *(void**)sit2, true, false, true):
printf (*s,end():\n*))
it2=s,end (1
duap_tree_node ((struct tree_node *) *(void**)sit2, true, false, false);
1=
指令清单51.36
GCC 4.8.1
:des se u burdanp
ptr=0x0028FE3C, M_key_compare=0x402b70, M_header=Dx0028FE40, M_node_count=17
ptr=0x007A4988 M_1eft=0x007A4c00 M_parent=0x0028FE40 M_right=0x007A4B80 8_co1or=1
key=10 valoe=[ten]
ptr=0x007A4c00 M_left=0x007A4880 M_parent=0x007A4988 X_right~0x007A4c60 α_co1or=1
[9uo =enten [=fax
ptr=0x007a4BE0 x_left=0x000c0000 M_parent=0x007A4c00 α_right~0x00000000 α_co1or=1
ptr=0x007A4C60 M_1left=0x007a4340 M_parent=0x007A4c00 M_right=0x007A4C20 M_co1or=0
[0.30z] =an[ea 0=fas
ptr0x007A4B40 _left=0x007A4c80 M_parent=0x007A4060 M_right=0x0000000 α_color=1
[9AT3]=9eTea S=f9x]
key3 valoe=[three]
ptr=0x007A4CE0 M_1left=0x0000000 M_parent=0x007A4B40 M_right=0x00000000 ?_ce1or=0
ptr=0x007A4C20 M_left=0x0000000 M_pa.rent=0x007A4C60 M_right=0x007A4D00 _co1or=1
[0x1] =an[ea =faxj
ptr=0x007x4000 _left=0x0000000 M_parent=0x007a4c20 M_right=0x0000000_co1or=0
[x1e]=0eTen 9=ax
ptr=0x007A4B80 M_1left=0x007M49A8 M_parent=0x007A4988 M_right=0x007A4BC0 _co1or=1
[autu] =an[en 6=fax
key=100 value=[one bundred]
ptr=0x007A49A8 α_1eft=0x007A48A0 M_pa.rent=0x007a4B80 M_right=0x007A4C40 _color=0
ptr=Dx007A4BA0 M_Left=0x007A4c80 M_parent=0x007A49A8 M_right=0x000000 _color=1
key=20 valoe=[tventy]
[an]=anea [fax
ptr=0x007A4C40 M_1eft=0x00000000 M_parent=0x007a49A8 M_right=0x00000000 _color=1
---
## Page 84
560
逆向工程权威指南（下册）
ptz=0x007A4BC0 _1eft=0x007A4B60 M_parent=0x007A4880 M_right=0x007A4CA0 M_co1or=0
key=99 value= [ninety-nine]
key=107 value=[one hundred seven]
ptr=0x007A4B60 _left=0x0000000 M_parent=0x007A4BC0 M_right=0x0000000 M_co1or=1
ptr=0x007A4CA0 x_left=0x0000000 M_parent=0x007A48C0 M_right=0x007A4CC0 M_color=1
[auo pezpunq aco] =antea t0t=fea
key=1001 value=[one thousand one]
key=1010 value=[one thousand ten]
As a tree:
root**10 [ten]
L====
[800][-**
-=0 [zero]
[9sT;] S-
6[six]
[x]...
100 [one hundred]
R==*
=9 [nine]
20 [twenty]
R*****-99 [ninety-nine]
L-
*--11 [eleven]
-107 [one hundred seven]
R.**-001 [ooe thouand one]
-..-101 [one hundred one]
α,begin () :
R=*****-1010 [one thousand ten]
ptr=0x007A4BE0 x_left=0x00000000 M_parent=0x007A4c00 X_right=0x00000c00 _co1or=1
[0.2az 9ntea 0K9q
n,end() :
ptr=0x0028FE40 M_1eft=0x007A48E0 M_parent=0xt07A4988 _right=0x007A4Cc0 _co1or=0
ptr=Ox0028FE20, X_key_oompare=0x8, X_header=0x0028FE24, M_node_count=6
:ras se s furdsnp
ptz=0x007A1E80 M_1eft=0x01050890 M_parent=0x0028r24 M_right=0x01050850 M_color=1
ptr=0x01050890 x_1eft=0x01050870 M_parent=0xG07A1880 M_right=0x01050880 M_color=1
key=123
ptr=0x01050870 _left=@x00000000 H_parent=0x01050890 x_right=0x00000000 M_co1or=0
key=12
key=11
00 Tfax
key=456
cuased°w 00000
t=0x01050850 X_right=0x00000000 X_co1or-0
key=1001
As a tree1
root-**123
L-=
L*
TT=
-100
R=*
-456
R=*
1001
ptr=0x01050870 M_left=0x00000000 M_par
s.begin () 1
1[ epn[ouT
include (map)
finclude 
Iinclude 
inelude 
struct nap_pair
int key1
rantes, 3euo 1s902
1:
epou"eer1 1oe3ls
Int M_color; // 0 - Red, 1 - Black
struct tree_node *K_left;
struct tree_node *K_parent:
struct tree_node *K_right:
Int M_key_conpare)
struct tree_node αheaderj
unoapoux eze
f(
const char* ALor_oF_TA8s-t1t1t1t\t1t1t1t1t\t1t*;
void durp_as_tzee (int tabs, struct tree_node *n)
roid *point_after_struct= ((char*)n) +sizeof (struct tree_node) ;
printr ("tdn*, *(int*)point_after_st.ruct)
(-)T
printf (*s,*sL--
*, tabs, ALOT_OF_TABS);
dump_sas_tree (tabs+1, n=M_left1;
f (s->8,right)
I:
printt (*s,*sR**
dusp_as_tree (tabs+1, n=>α_right)
-**, tabs, ALOT_OF_TABS):
I1
void dung_nap_and_set (st.roct tree_struct *n)
printf (*root-***);
durp_as_tree (1, m->M_bei
er.M_parent):
Int main ()
std::set s7
---
## Page 86
562
逆向工程权威指南（下册）
s.insert (123)7
printf (*123, 456 are inserted\n*))
s.insert (456)
dump_map_and_set ([struct tree_struct *) [veid*) 6s}]
s.insert (11)
s.insert (12):
printf (*\n*)
printf (*11,
(9+[pros) ( 1onxse"0ez3 1on2s)) 1espuedes"dsnp
12 are inserted\n*);
s.insert (1001):
s.Insert (100)
peintf (*\n*))
printf (*100, 100l are inserted\n*);
dump_map_and_set ((atruet tree_struct *) [void*)&s) :
s. insert (667) ;
s. insert (1):
s.Insert (7))
s. insert (4):
printe (*\w*)
printf (*667, 1, 4, 7 are inserted\n*);
r [9s (xpros) ( 1onaleae3s 4onzss)) 49e"puedeu'dunp
F:
指令清单51.38GCC4.8.1程序
123, 456 are inserted
root-**-123
R===
456
11, 12 are inserted
root--*
123
L==*
-=11
R-
456
R==
12
100, 1001 are inserted
root*=123
L=*
R==
TT--
-456
-10C
R=-
T00T
667, 1, 4, 7 are inserted
root-
-12
== 4
TT-
-123
L=*
667
==456
1001
---
## Page 87
第52章
数组与负数索引
数组的负数索引值完全不阻碍寻址。例如，array[-1]实际上表示数组array起始地址之前的存储空间！
这种技术的用途相当有限。笔者认为除了本章范例的这种场景之外，应该没有什么领城用得上这项技
术了。众所周知，在表示数组的第一个元素时，C/C++使用的数组下标是0，而部分其他编程语言（FORTRAN
等）使用的数组下标可能是1。在移植代码的时候，可能会忽视这种问题。此时借助负数索引值就可以用
查找C/C++数组中的第一个元素。
include 
int nain ()
int random_value=0x11223344;
unsigned char array[10]:
unsigned char *fakearray=5array [1];
int 11
for (1=0; 1<10; 1++)
array[1]=1;
printf (*fizst elenent id\n", fakearray[1]]
printE (°last element tdn*, fakearray[10]]
printf (*second elenent td’n", fakearray[2]):
printf (*array[-1]=$02x, array[2] =t02x, array[-3]=t02x, array[4]-s02x(n*,
*[2-]fexxe
array[-1],
array[3],
array[4]];
指令清单52.1非优化的MSVC2010下的程序
1$$G2751 0B
irst element d, aH 008
last element d', 0al， 08
'second elenent td′, Oal, 00H
3$SG2753 DB
4$562754 0B
*=402x*, DaH, 008
′array[1]=402x, array[2] =t02x, array[3] =s02x, array[4*
7
_fakearray$ = -24
: size = 4
tanTea"uopuex"
 = -20
_array$ = -16
1 size = 4
9
: size = 10
10
_1$ = -4
11
_nain
PROC
: size = 4
12
13
Push
ebp, esp
ebp
14
sub
mov
15
:set fakearray[] one byte earlier before array[]
mov
DWoRD PT8 _randon_va1ue$ [ebp], 287454020 ; 11223344H
16
17
Lea
eax, DWORD PTR _array$ [ebp]
18
add
mov
eax, -1 1 eax=eax-1
19
DWORD PTR _fakearray$ [ebp], eax
20
80V
DWORD PTR _LS[ebp], 0
21
22
j [111 array[] vith 0..9
ap
SHORT $La3enain
---
## Page 88
564
逆向工程权威指南（下册）
24
30V
add
ecx, DMORD PTR _1$[ebp]
25
26
DBCRO PTR _i$[ebp], eCx