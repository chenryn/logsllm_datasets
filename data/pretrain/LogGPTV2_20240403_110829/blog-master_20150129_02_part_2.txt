pgbench -M prepared -n -r -f ./tbl10.sql -c 1 -j 1 -T 30 &  
pgbench -M prepared -n -r -f ./tbl11.sql -c 1 -j 1 -T 30 &  
pgbench -M prepared -n -r -f ./tbl12.sql -c 1 -j 1 -T 30 &  
pgbench -M prepared -n -r -f ./tbl13.sql -c 1 -j 1 -T 30 &  
pgbench -M prepared -n -r -f ./tbl14.sql -c 1 -j 1 -T 30 &  
pgbench -M prepared -n -r -f ./tbl15.sql -c 1 -j 1 -T 30 &  
postgres@localhost-> . ./bench.sh   
postgres@localhost-> jobs  
[1]   Running                 pgbench -M prepared -n -r -f ./tbl0.sql -c 1 -j 1 -T 30 &  
[2]   Running                 pgbench -M prepared -n -r -f ./tbl1.sql -c 1 -j 1 -T 30 &  
[3]   Running                 pgbench -M prepared -n -r -f ./tbl2.sql -c 1 -j 1 -T 30 &  
[4]   Running                 pgbench -M prepared -n -r -f ./tbl3.sql -c 1 -j 1 -T 30 &  
[5]   Running                 pgbench -M prepared -n -r -f ./tbl4.sql -c 1 -j 1 -T 30 &  
[6]   Running                 pgbench -M prepared -n -r -f ./tbl5.sql -c 1 -j 1 -T 30 &  
[7]   Running                 pgbench -M prepared -n -r -f ./tbl6.sql -c 1 -j 1 -T 30 &  
[8]   Running                 pgbench -M prepared -n -r -f ./tbl7.sql -c 1 -j 1 -T 30 &  
[9]   Running                 pgbench -M prepared -n -r -f ./tbl8.sql -c 1 -j 1 -T 30 &  
[10]   Running                 pgbench -M prepared -n -r -f ./tbl9.sql -c 1 -j 1 -T 30 &  
[11]   Running                 pgbench -M prepared -n -r -f ./tbl10.sql -c 1 -j 1 -T 30 &  
[12]   Running                 pgbench -M prepared -n -r -f ./tbl11.sql -c 1 -j 1 -T 30 &  
[13]   Running                 pgbench -M prepared -n -r -f ./tbl12.sql -c 1 -j 1 -T 30 &  
[14]   Running                 pgbench -M prepared -n -r -f ./tbl13.sql -c 1 -j 1 -T 30 &  
[15]-  Running                 pgbench -M prepared -n -r -f ./tbl14.sql -c 1 -j 1 -T 30 &  
[16]+  Running                 pgbench -M prepared -n -r -f ./tbl15.sql -c 1 -j 1 -T 30 &  
postgres@localhost-> transaction type: Custom query  
transaction type: Custom query  
scaling factor: 1  
scaling factor: 1  
query mode: prepared  
query mode: prepared  
number of clients: 1  
number of clients: 1  
number of threads: 1  
number of threads: 1  
duration: 30 s  
duration: 30 s  
number of transactions actually processed: 18323  
number of transactions actually processed: 18744  
tps = 610.744476 (including connections establishing)  
tps = 624.776154 (including connections establishing)  
tps = 610.882388 (excluding connections establishing)  
tps = 624.974076 (excluding connections establishing)  
statement latencies in milliseconds:  
statement latencies in milliseconds:  
        1.635022        with t as(select ctid from tbl5 order by ctid desc limit 5) delete from tbl5 where ctid in (select ctid from t) returning *;  
        1.598122        with t as(select ctid from tbl0 order by ctid desc limit 5) delete from tbl0 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18660  
tps = 621.969606 (including connections establishing)  
tps = 622.153610 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.605455        with t as(select ctid from tbl7 order by ctid desc limit 5) delete from tbl7 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18625  
tps = 620.807135 (including connections establishing)  
tps = 621.057183 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.608170        with t as(select ctid from tbl3 order by ctid desc limit 5) delete from tbl3 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of transactions actually processed: 18679  
tps = 622.613140 (including connections establishing)  
tps = 622.763449 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.603809        with t as(select ctid from tbl4 order by ctid desc limit 5) delete from tbl4 where ctid in (select ctid from t) returning *;  
duration: 30 s  
number of transactions actually processed: 18480  
tps = 615.974889 (including connections establishing)  
tps = 616.107203 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.621196        with t as(select ctid from tbl11 order by ctid desc limit 5) delete from tbl11 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18521  
tps = 617.330182 (including connections establishing)  
tps = 617.443250 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.617626        with t as(select ctid from tbl10 order by ctid desc limit 5) delete from tbl10 where ctid in (select ctid from t) returning *;  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18366  
tps = 612.146172 (including connections establishing)  
tps = 612.431254 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.631034        with t as(select ctid from tbl9 order by ctid desc limit 5) delete from tbl9 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18738  
tps = 624.574018 (including connections establishing)  
tps = 624.715406 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.598772        with t as(select ctid from tbl6 order by ctid desc limit 5) delete from tbl6 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18448  
tps = 614.888405 (including connections establishing)  
tps = 615.075231 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.623808        with t as(select ctid from tbl12 order by ctid desc limit 5) delete from tbl12 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18875  
tps = 629.134497 (including connections establishing)  
tps = 629.315227 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.587065        with t as(select ctid from tbl2 order by ctid desc limit 5) delete from tbl2 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18449  
tps = 614.934670 (including connections establishing)  
tps = 615.066184 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.623882        with t as(select ctid from tbl8 order by ctid desc limit 5) delete from tbl8 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18633  
tps = 621.077579 (including connections establishing)  
tps = 621.244771 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.607780        with t as(select ctid from tbl13 order by ctid desc limit 5) delete from tbl13 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18573  
tps = 619.008531 (including connections establishing)  
tps = 619.148479 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.613143        with t as(select ctid from tbl1 order by ctid desc limit 5) delete from tbl1 where ctid in (select ctid from t) returning *;  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18717  
tps = 623.839093 (including connections establishing)  
tps = 623.982969 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.600710        with t as(select ctid from tbl14 order by ctid desc limit 5) delete from tbl14 where ctid in (select ctid from t) returning *;  
number of clients: 1  
number of threads: 1  
duration: 30 s  
number of transactions actually processed: 18710  
tps = 623.627170 (including connections establishing)  
tps = 623.762851 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.601275        with t as(select ctid from tbl15 order by ctid desc limit 5) delete from tbl15 where ctid in (select ctid from t) returning *;  
```  
TPS可以达到将近1W.  
```  
postgres=# select 623*16;  
 ?column?   
----------  
     9968  
(1 row)  
```  
为了达到更好的吞吐量, 建议程序一次多取一些, 例如一次取20条, 用完再来取, 那么可以减少和数据库的交互次数, 提高整体性能.  
PS：  
PostgreSQL 支持ctid扫描方法，因此本例可以不需要对ctid建立索引，方法例子请参考  
[《块级(ctid)扫描在IoT(物联网)极限写和消费读并存场景的应用》](../201706/20170607_01.md)    
[《在PostgreSQL中实现update | delete limit - CTID扫描实践》](../201608/20160827_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")