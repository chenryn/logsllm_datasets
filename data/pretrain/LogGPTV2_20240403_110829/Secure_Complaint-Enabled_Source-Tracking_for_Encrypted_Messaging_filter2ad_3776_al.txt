act dishonestly in order to alter the credentials they receive.
In each game, we remove one of these opportunities for dishonest
action and show that the resulting game is indistinguishable from
the previous game to an efficient adversary. This means that in
the final game, the adversary has no opportunity to create fake
credentials, and so cannot win the game.
1, 𝐵2/𝐵ℎ
1 , 𝐶2/𝐶ℎ
G3: After extracting the attributes 𝑀, 𝐸1, 𝐸2 as described in G2,
We present the games below.
G0: This game is identical to the standard 𝑢𝑛𝐹𝑂𝑅𝐺𝐸 game.
G1: This game is identical to the 𝑢𝑛𝐹𝑂𝑅𝐺𝐸 game, but we add
a set M𝑀𝐴𝐶, that keeps track of all attributes that the plat-
form has issued a MAC on. To do this, we modify the re-
ceiving interaction so that when a proof 𝜋 provided by the
receiver is verified by the platform, we run the knowledge
extractor to extract witnesses (ℎ, 𝑟1, 𝑟2, 𝑟3, 𝑟𝑛𝑑, 𝑑𝐴, 𝑧𝐴, 𝑑𝐹 , 𝑧𝐹 )
and abort if extraction fails. We use these witnesses to de-
crypt (𝐴1, 𝐴2), (𝐵1, 𝐵2), (𝐶1, 𝐶2) to get attributes 𝑀, 𝐸1, 𝐸2,
i.e. 𝐴2/𝐴ℎ
1 , respectively. We then add (𝑀, 𝐸1, 𝐸2)
to M𝑀𝐴𝐶. The extractor fails with negligible probability, so
this game is indistinguishable from Game 0.
G2: We further modify so that every time a message is sent or
reported, if the proof output by present verifies, we again run
the proof of knowledge extractor on the MAC presentation
proof 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 to extract attributes 𝑀, 𝐸1, and 𝐸2 and abort if
extraction fails. Once again, failure happens with negligible
probability and this is indistinguishable from G1.
we immediately abort if (𝑀, 𝐸1, 𝐸2) ∉ M𝑀𝐴𝐶.
If the game aborts due to the above reason, it means that the
user proved ownership of a MAC that the platform never
created. (Note that we’re not requiring that the attributes be
in any way correct at this stage, we are just looking directly
at the exact attributes of the MACs that the platform created
and comparing them to the attributes that the adversary tries
to prove it has. This can happen with negligible probability
due to the unforgeability of the anonymous credentials of
[5], and therefore G3 is indistinguishable from G2.
In this next game, every time an individual presents a valid
receiving proof to the platform, we run the extractor to
get witnesses ℎ, 𝑟1, 𝑟2, 𝑟3, 𝑟𝑛𝑑, 𝑑𝐴, 𝑧𝐴, 𝑑𝐹 , 𝑧𝐹 . We immediately
abort if the extractor fails. By the extractability of the proof
system, a valid proof fails extraction with negligible prob-
ability and so this game is indistinguishable to the forgery
adversary. On success, we are guaranteed that the properties
included in the proof are guaranteed to hold, i.e. that 𝑃1 ∧ 𝑃𝐴
or 𝑃1 ∧ 𝑃𝐹 as described in Figure 5 is satisfied.
We also note that by this check, if 𝑃1 ∧ 𝑃𝐴 holds, then we
are guaranteed that:
G4:
𝐴1, 𝐴2 = 𝐺𝑟1, 𝐻𝑟1𝐺𝑑𝐴
𝑑
𝐵1, 𝐵2 = 𝐺𝑟2, 𝐻𝑟2𝐺𝑟𝑛𝑑 𝐸(𝐴)
1
𝐶1, 𝐶2 = 𝐺𝑟3, 𝐻𝑟3𝑌 𝑟𝑛𝑑 𝐸(𝐴)
2
𝐶𝐴 = 𝐺𝑑𝐴
𝑑
𝐶𝑑 = 𝐺𝑑𝐹
𝑑
𝐺𝑧𝐴
𝑦3
𝐺𝑧𝐹
𝑦3
So, the encryptions are valid encryptions of 𝑑𝐴 and a re-
randomization of (𝐸1, 𝐸2) under public key 𝐻.
Similarly, if 𝑃1 ∧ 𝑃𝐹 holds, then we are guaranteed that
𝐴1, 𝐴2 = 𝐺𝑟1, 𝐻𝑟1𝐺𝑑𝐹
𝑑
𝐵1, 𝐵2 = 𝐺𝑟2, 𝐻𝑟2𝐺𝑟𝑛𝑑𝐶𝐸1/𝐺𝑧𝐹
𝑦1 𝐸1/𝐺𝑧𝐹
𝑦1
𝑦1
= 𝐻𝑟2𝐺𝑟𝑛𝑑𝐺𝑧𝐹
= 𝐻𝑟2𝐺𝑟𝑛𝑑 𝐸1
𝐶1, 𝐶2 = 𝐺𝑟3, 𝐻𝑟3𝑌 𝑟𝑛𝑑𝐶𝐸2/𝐺𝑧𝐹
𝑦2 𝐸2/𝐺𝑧𝐹
𝑦2
𝑦2
= 𝐻𝑟3𝑌 𝑟𝑛𝑑𝐺𝑧𝐹
= 𝐻𝑟3𝑌 𝑟𝑛𝑑 𝐸2
𝐶𝑑 = 𝐺𝑑𝐹
𝑑
𝐶𝐴 = 𝐺𝑑𝐴
𝑑
𝐺𝑧𝐹
𝑦3
𝐺𝑧𝐴
𝑦3
G5:
𝑑
, 𝐶′
𝐸1
So, this guarantees that in the forwarded case, the encrypted
values must be an encryption of 𝑑𝐹 and a re-randomization
of (𝐸1, 𝐸2), where (𝑧𝐹 , 𝑑𝐹 , 𝐸1, 𝐸2) is a valid opening for the
commitment 𝐶𝐹 .
In this game, we check the sending/reporting proofs in the
interaction. When given valid 𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡 and 𝜋𝑟𝑒𝑟𝑎𝑛𝑑 proofs
associated with commitments 𝐶𝐹 = (𝐶𝑑, 𝐶𝐸1, 𝐶𝐸2) and 𝐶′
𝐹 =
(𝐶′
, 𝐶′
𝐸2), we apply the proof extractor to extract the
witnesses (𝑧′, 𝑟𝑛𝑑) from 𝜋𝑟𝑒𝑟𝑎𝑛𝑑, aborting on failure. By the
strong extractability property, this extraction fails with only
negligible probability and otherwise we are guaranteed that
the statement in 𝜋𝑟𝑒𝑟𝑎𝑛𝑑 holds true for the provided values
of 𝐶𝐹 and 𝐶′
𝐹 .
Moreover, this guarantees that if (𝑧, 𝑑, 𝐸1, 𝐸2) is the open-
ing of 𝐶𝐹 extracted from the associated presentation proof
𝜋𝑝𝑟𝑒𝑠𝑒𝑛𝑡, then we must have
𝑦3 = 𝐺𝑧+𝑧′
𝐶′
𝑑 = 𝐶𝑑𝐺𝑧′
𝑦3 𝐺𝑑
𝑑
𝐶′
𝑦1𝐺𝑟𝑛𝑑𝐶𝐸1 = 𝐺𝑧+𝑧′
𝐸1 = 𝐺𝑧′
𝑦1 𝐺𝑟𝑛𝑑 𝐸1
𝑦2𝑌 𝑟𝑛𝑑𝐶𝐸2 = 𝐺𝑧+𝑧′
𝐶′
𝐸2 = 𝐺𝑧′
𝑦2 𝑌 𝑟𝑛𝑑 𝐸2
and so (𝑧 + 𝑧′, 𝑑, 𝐸1𝐺𝑟𝑛𝑑, 𝐸2𝑌 𝑟𝑛𝑑) must be a valid opening
for 𝐶′
𝐹 .
By the requirements of Game 3, the sending user must have
had a valid MAC on (𝑑, 𝐸1, 𝐸2), and so this ensures that the
opening 𝐶′
𝐹 must be a re-randomization of attributes that
the user has a valid MAC for.
G6: We have shown that the attributes used to prove and create
MACs must be internally consistent (within a send/receive
operation), but we now show that they need to consistent
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1505Because the decryption 𝐸2𝑌 𝑟/(𝐸1𝐺𝑟)𝑦 will be constant for any
value of 𝑟, we can trace back through these extracted receipts to the
first time a MAC on attributes (𝑑, 𝐸1, 𝐸2) was created. This must
either have been the result of a call to goodAuth or malSend. If it
was from malSend, then the sender wasn’t an honest user, and so
such attributes cannot be used to win the forgeability game.
Otherwise, if it was in goodAuth, then the tuple must have been
added to M𝑠𝑒𝑛𝑡, and so similarly can’t be used to win the game.
Therefore, we have shown that there is no way for the adversary
to win Game 9. Because we showed that Game 9 was indistinguish-
able from the 𝑢𝑛𝐹𝑂𝑅𝐺𝐸 game. We can conclude that any efficient
adversary will have negligible advantage against 𝑢𝑛𝐹𝑂𝑅𝐺𝐸, and
therefore Scheme 2 is unforgeable.
□
C.4 Deniability – Proof of Theorem 5.4
Proof. As in the first scheme, the complete proof that this
scheme satisfies the deniability requirements of a secure source-
tracking scheme appears in the full version of this paper.
□
across transactions too. Let G4 be identical to G3 except
for the modification that every time we have a valid pair
of sending proofs 𝜋𝑝 and 𝜋𝑟 , we extract the opening (𝑧 +
𝑧′, 𝑑, 𝐸1𝐺𝑟𝑛𝑑, 𝐸2𝑌 𝑟𝑛𝑑) of 𝐶′
𝐹 from the sending proof In the
same manner as G3. Then, during the corresponding receiv-
ing proof that uses the same 𝐶′
𝐹 and some arbitrary 𝐶𝐴, we
once again extract the witnesses (ℎ, 𝑟1, 𝑟2, 𝑟3, 𝑟𝑛𝑑, 𝑑𝐴, 𝑧𝐴, 𝑑𝐹 , 𝑧𝐹),
aborting on failure. By the extractability of the proof system,
extraction fails with negligible probability, making this game
indistinguishable from G5.
G7: We modify G6 so that after extracting the above witnesses,
we use them to compute the new opening (𝑧𝐹 , 𝑑𝐹 , 𝐸′
1 =
𝐶𝐸1/𝐺𝑧𝐹
We abort if these openings are not the same, i.e. if (𝑧 +
𝑧′, 𝑑, 𝐸1𝐺𝑟𝑛𝑑, 𝐸2𝑌 𝑟𝑛𝑑) ≠ (𝑧𝐹 , 𝑑𝐹 , 𝐸′
We first note that 𝐸′
2 are completely determined by
the value of 𝑧𝐹 , so it suffices to show that we must have
(𝑧+𝑧′, 𝑑) = (𝑧𝐹 , 𝑑𝐹). If this is not the case, this means that the
adversary was able to find distinct pairs (𝑧1, 𝑑1) and (𝑧2, 𝑑2)
such that 𝐺𝑧1
however, this implies that the
adversary knows the discrete log of 𝐺𝑦3 with respect to 𝐺𝑑
or vice versa, both of which we assume are unknown, so we
conclude that finding two such pairs will happen with only
negligible probability, and so the game is indistinguishable
from G6.
2 = 𝐶𝐸2/𝐺𝑧𝐹
𝑦2 .
1 and 𝐸′
𝑑 = 𝐺𝑧2
1, 𝐸′
2).
𝑦1 , 𝐸′
𝑦3𝐺𝑑1
𝑦3𝐺𝑑2
𝑑
G8: We just showed that the openings of the forwarding commit-
ment created by the sender can’t be changed by the receiver.
We will now do the same for authoring commitments. We
note that for authoring commitments, the source encryption
is chosen by the platform and verified in the clear, so we
need only ensure that the message stored in 𝐶𝐴 created by
an honest sender stays constant.
We modify G7 by adding the requirement that each time
goodAuth or goodFwd is called, we save the message 𝑚
(which could be ⊥) that is associated with the authoring
commitment 𝐶𝐴 that gets presented to the platform. Then, if
the receiving proof verifies, we extract witnesses 𝑧𝐴 and 𝑑𝐴
from the proof, aborting if the extraction fails. This happens
with negligible probability, so this game is indistinguishable
from G7.
𝐻(𝑚) ≠ 𝑑𝐴.
As before, if this is the case, then after being provided a valid
opening (𝑧, 𝑑) by the honest sender, the adversary found
some new (𝑧𝐴, 𝑑𝐴) such that 𝐺𝑧
. By the same
reasoning as the previous game, this can be achieved only
with negligible probability, and therefore this new game is
indistinguishable from G4 to an efficient adversary.
G9: After extracting witnesses 𝑧𝐴 and 𝑑𝐴 in G8, we abort if
𝑑 = 𝐺𝑧𝐴
𝑦3 𝐺𝑑𝐴
𝑑
𝑦3𝐺𝑑
By the definition of G9, we know that if a message is success-
fully sent or reported with attributes 𝑑, 𝐸1, 𝐸2, then either the ad-
versary must have previously received a message with attributes
𝑑, 𝐸1𝐺𝑟 , 𝐸2𝑌 𝑟 for some random 𝑟, or in the case of sending, (𝐸1, 𝐸2)
must decrypt to the sender’s identity. (If the attributes came from
an unused forwarding or authoring commitment, we would have
𝑑 = ⊥ and the protocol would automatically fail).
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1506