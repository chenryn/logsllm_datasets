> 译者：PI:EMAIL  
>  原作者：Nicky Bloor@nickstadb  
>  原文地址：
译者按：作者证明这是最新的`WordPress
4.9.4`版本存在的问题，默认安装，虽然bug有些不值一提，但会导致RCE，作者希望能够多多讨论这些事情的思路和努力，而不是过多地关注漏洞详细信息。  
PoC视频URL：
### 0x00 前序
* * *
几个月前，我正在编写一篇关于PHP反序列化漏洞的博客文章，决定为这篇文章找一个真实目标，能够让我将测试数据传输给PHP unserialize
()函数来实现演示目的。于是我下载了一批WordPress插件，并开始通过grepping来寻找调用unserialize ()的代码实例：
    $url = 'http://api.wordpress.org/plugins/info/1.0/';
    $response = wp_remote_post ($url, array ('body' => $request));
    $plugin_info = @unserialize ($response ['body']);
    if (isset ($plugin_info->ratings)) {
这个插件的问题在于发送明文HTTP请求，并且将该请求响应传递给了unserialize()函数。就真实攻击而言，它并不是最佳入口点，但是如果我能通过这种微不足道的方式向unserialize()函数提供输出来触发代码的话，这就足够了！
### 0x01 PHP反序列化攻击
* * *
简单来说，当攻击者能够将他的数据提供给应用程序，而该应用程序将数据转化为运行对象时没有作适当验证的时候就会出现反序列化漏洞。如果攻击者数据被允许去控制运行对象的属性，那么攻击者就可以操纵任何使用这些对象属性的代码执行流程，就有可能使用它发起攻击。这是一种称为面向属性编程（POP）的技术，一个POP小工具是可以通过这种方式控制任何代码片段，开发实现是通过向应用程序提供特制对象，以便在这些对象进行反序列化的时候触发一些有用的行为。如果想了解更多详情的话，可以参阅我的博客文章[Attacking
Java Deserialization](https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/) ，其中的一般概念适用于任何基础技术。
在PHP应用程序的现状来看，POP小工具最为人熟知和最可靠的原因在于类的`__wakeup()`方法（*PHP“魔术方法”，`unserialize()`函数会检查是否存在`__wakeup()`，如果存在，则会先调用`__wakeup()`方法，预先准备对象需要的资源），如果一个类定义了`__wakeup()`方法，那么无论何时该类的某个对象使用了`unserialize()`函数进行反序列化都能保证`__wakeup()`方法被调用，另外一个原因是`__destruct()`方法（当创建的对象被销毁或遇到PHP结束标记的时候，比如程序已经执行完毕，对象会自动调用`__destruct()`执行一些相应的操作，可以自行定义），例如PHP脚本执行完成时（未发生致命错误），当反序列化对象超出范围时仍几乎可以保证`__destruct()`方法被调用。
除了`__wakeup()`和`__destruct()`方法之外,
PHP还有其他“魔术方法”，可以在类中定义，也可以在反序列化之后调用，这取决于反序列化对象的使用方式。在一个更大更复杂的应用程序中可能很难追踪到反序列化对象在哪里结束以及如何来使用它或调用那些方法，于是确定那些类可以用于PHP反序列化漏洞利用也很困难，因为相关文件可能未包含在入口点，或者一个类的自动加载器（例如`spl_autoload_register()`函数）可能以及被注册来进一步混淆。
### 0x02 通用的PHP POP小工具
* * *
为了简化这个过程，我编写了一个PHP类，它定义了所有魔术方法并且在调用任何魔术方法时将详细信息写入日志文件。特别有趣的是魔术方法`__get()`和`__call()`，如果应用程序尝试获取不存在的属性或调用该类中不存在的方法时就会调用以上魔术方法，前者可以用来识别在payload
object上设置的属性，以便操纵并使用这些属性的代码，而后者可以用来识别POP小工具触发使用的非魔术方法（并且可以将它们自身用作POP小工具）。  
该类的__wakeup()方法还使用了get_declared_classes()函数来检索和记录可以利用exploit
payload的已声明类的列表（虽然这不会反映当前未声明但可以自动加载的类）。
    logEvent('UniversalPOPGadget::__construct()'); }
        public function __destruct() { $this->logEvent('UniversalPOPGadget::__destruct()'); }
        public function __call($name, $args) {
            $this->logEvent('UniversalPOPGadget::__call(' . $name . ', ' . implode(',', $args) . ')');
        }
        public static function __callStatic($name, $args) {
            $this->logEvent('UniversalPOPGadget::__callStatic(' . $name . ', ' . implode(',', $args) . ')');
        }
        public function __get($name) { $this->logEvent('UniversalPOPGadget::__get(' . $name . ')'); }
        public function __set($name, $value) { $this->logEvent('UniversalPOPGadget::__set(' . $name . ', ' . $value . ')'); }
        public function __isset($name) { $this->logEvent('UniversalPOPGadget::__isset(' . $name . ')'); }
        public function __unset($name) { $this->logEvent('UniversalPOPGadget::__unset(' . $name . ')'); }
        public function __sleep() { $this->logEvent('UniversalPOPGadget::__sleep()'); return array(); }
        public function __wakeup() {
            $this->logEvent('UniversalPOPGadget::__wakeup()');
            $this->logEvent("  [!] Defined classes:");
            foreach(get_declared_classes() as $c) {
                $this->logEvent("    [+] " . $c);
            }
        }
        public function __toString() { $this->logEvent('UniversalPOPGadget::__toString()'); }
        public function __invoke($param) { $this->logEvent('UniversalPOPGadget::__invoke(' . $param . ')'); }
        public function __set_state($properties) {
            $this->logEvent('UniversalPOPGadget::__set_state(' . implode(',', $properties) . ')');
        }
        public function __clone() { $this->logEvent('UniversalPOPGadget::__clone()'); }
        public function __debugInfo() { $this->logEvent('UniversalPOPGadget::__debugInfo()'); }
    }}
    ?>
### 0x03 PHP检测
* * *
将上面的代码保存到一个PHP文件中，我们可以通过这个在其他任何PHP脚本中插入一个`include'/path/to/UniversalPOPGadget.php'`语句，并使这个类可用。以下Python脚本将查找给定目录中所有PHP文件，并将语句写入文件前端，从而有效地检测应用程序，以便我们可以向为其提供序列化的UniversalPOPGadget对象，来用它们研究反序列化的入口点。
    import os
    import sys
    #Set this to the absolute path to the file containing the UniversalPOPGadget class
    GADGET_PATH = "/path/to/UniversalPOPGadget.php"
    #File extensions to instrument
    FILE_EXTENSIONS = [".php", ".php3", ".php4", ".php5", ".phtml", ".inc"]
    #Check command line args
    if len(sys.argv) != 2:
      print "Usage: GadgetInjector.py "
      print ""
      sys.exit()
    #Search the given path for PHP files and modify them to include the universal POP gadget
    for root, dirs, files in os.walk(sys.argv[1]):
      for filename in files:
        for ext in FILE_EXTENSIONS:
          if filename.lower().endswith(ext):
            #Instrument the file and stop checking file extensions
            fIn = open(os.path.join(root, filename), "rb")
            phpCode = fIn.read()
            fIn.close()
            fOut = open(os.path.join(root, filename), "wb")
            fOut.write("" + phpCode)
            fOut.close()
            break
### 0x04 分析反序列化入口点
* * *
回到刚刚那个调用unserialize()函数的WordPress插件代码片段，我不知道该如何去实际触发unserialize()函数的调用，我所知道的是这个插件应该向`http://api.wordpress.org/plugins/info/1.0/`发送HTTP请求，于是我使用上面的Python脚本来测试WordPress和插件代码，然后修改了服务器上的hosts文件，将`api.wordpress.org`指向同一台服务器。以下代码放在Web根目录中的`/plugins/info/1.0/index.php`文件中，以便提供UniversalPOPGadget
payload：