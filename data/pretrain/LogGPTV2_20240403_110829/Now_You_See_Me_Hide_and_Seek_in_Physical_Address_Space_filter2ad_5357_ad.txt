ysis could be quite system dependent. It is difﬁcult to determine
if the use of IORR registers is benign or malicious. The forensic
examiner may assume the use of IORR is malicious and directly
modify the value of this IORR register to reveal the memory con-
tents. However, if the use of IORR is benign and system originated,
such direct manipulation may crash the system. A more conserva-
tive approach might be to read out the contents from the address
range without modifying any of the registers. Even though this
might cause system instability as well, the probability of a system
catastrophic failure caused by memory read is much smaller. If all
the bytes read back are all identical values 0xF F or 0x00, then
most likely there is no real I/O device behind these I/O addresses.
Finally, HIveS can be detected by Cold Boot if we don’t apply
the HIveS extensions such as RAM-less encryption. Forensic ex-
aminers can ﬁrst dump the registers, including all the MSRs and
debugging registers from all processor cores. All system cache
can then be ﬂushed back into memory. Then the system is reset
to extract memory content exploiting the memory remanence char-
acteristics. This however changes many system conﬁgurations in
the system as well as some memory contents, which violates the
forensic principle of not altering the crime scene.
7. EXTENSION AND FUTURE WORK
While some of the limitations discussed above are unavoidable,
such as dependence on architecture and operating system, some
others can be overcome. We discuss possible extensions of HIveS
in this section.
7.1 Eliminating Memory Traces
One of the limitations discussed above is that the storage can
only be used to store data collected by the malware instead of pro-
tecting the entire malware. The forensic examiner might be able
to analyze the malware memory to discover the manipulation of
address layout. One key insight is that, the physical address lay-
out manipulation performed by HIveS is very infrequent if not one
time. Furthermore, the amount of code required to alter this lay-
out is very small, most likely a single instruction or two. Tak-
ing our prototype as an example, the kernel module initialization
routine can use one instruction to change the IORR register then
immediately erasing the previous instruction by zeroing it. This
leaves a very small time window, three instruction execution time,
for the forensic examiner to capture the image and discover the use
of IORR in the malware. The practical chance of catching such
moment is close to zero.
7.2 Extending HIveS to Intel Platforms
The IORR registers HIveS exploited to alter the physical ad-
dress layout is AMD speciﬁc unfortunately. To the best of our
knowledge, there is no such MSR in the Intel platform [3]. This
does not imply HIveS is impossible on Intel. Malware authors
will need to ﬁnd another way to alter the physical address lay-
out to launch the attack. For example, Intel Memory Controller
Hub (MCH) chipsets also provide capability to recover address-
able memory space lost to MMIO space [1]. One can modify the
REMAPBASE and REMAPLIMIT register in the chipset to ma-
nipulate the physical address layout (also known as system address
space in Intel manuals).
7.3 HIveS for Defense
Techniques in computer security are like weapons, it can be used
either to defend the righteousness or cause damage to the society.
For instance, virtual machine based rootkit (VMBR) introduced
by Rutkowska et al. [29] has been used to capture host image in
forensic memory analysis [23, 40]. Similarly, though we present
HIveS as a powerful anti-forensic tool, it can certainly be devel-
oped and used as a defense tool to protect sensitive data against
malicious memory scanning. For example, application passwords
can be stored in HIveS memory without having to worry about mal-
ware reading the passwords from the physical memory.
8. RELATED WORKS
There is an ongoing arms race between the attackers and the
forensic examiners in computer forensics [34, 20, 25, 37]. Mem-
ory forensic analysis is becoming an indispensable tool for foren-
sic examiners nowadays, and they have two ways to acquire com-
puter memory: software based methods that use a trusted software
module to access memory through the CPU processor [11, 21, 39,
28, 35, 14, 31, 36, 12] and hardware based methods that rely on
dedicated I/O devices to access physical memory image via Direct
Memory Access [10, 35, 27, 6].
Software based memory acquisition techniques rely on the CPU
processor to acquire physical memory through the operating sys-
tem. Unfortunately, after recognizing this dependency, attackers
have developed anti-forensic techniques to compromise the mem-
ory acquisition process, such as directly modifying the acquisition
module or the OS kernel data structure [8, 20, 34, 15], using rootk-
its to hook operating system APIs [32], or installing a thin hypervi-
sor on the ﬂy [29].
To defeat those anti-forensic techniques, Stüttgen et al. [35] pro-
pose an anti-forensic resilient method to acquire physical memory
by eliminating its dependence on the operating system routines and
data structures. Schatze [31] proposes to bootstrap a trusted new
execution environment from the normal one to make sure that the
operating system is free of malware. System management mode
(SMM) can also be used to create a trusted isolated execution envi-
ronment [28, 39]. Some researchers propose to go deeper than the
operating system level and use hardware virtualization to avoid the
memory acquisition software being subverted by rootkits [23, 40].
Stüttgen et al. suggest that the memory acquisition process can
be trusted if the acquisition module has not been tampered with and
all the operations are performed without relying on the operating
system or any other untrusted software [35]. However, in this paper,
we show that this assumption is not true. The main reason is that the
physical memory layout seen by the processor can be manipulated
through the hardware conﬁgurations on the chipset. Attackers can
misuse hardware conﬁgurations to modify this layout and conceal
the presence of malware.
A number of hardware based memory acquisition methods have
been developed recently [27, 38, 5, 10], using a trusted periph-
eral device to capture the physical memory image via DMA. Since
it does not rely on the CPU processor to get the physical mem-
ory, the hardware based approaches can successfully prevent those
anti-forensic techniques that are originally designed to defeat the
software based approaches. However, Rutkowska [30] shows that
it is possible to present a different view of the physical memory
to the peripherals by reprogramming the north bridge. Therefore,
in-memory data acquired by DMAs could be compromised as well
[28, 35].
A special type of memory acquisition technique relies on the
unique remanence property of physical DRAM [18, 11]. Despite
the popular belief that volatile contents in DRAM are gone once
the computer resets or powers off, Halderman et al. [18] demon-
strate a Cold Boot attack that can reliably recover the contents in
the memory modules even after the power has been cut off for a
short period of time. Though the original Cold Boot is demon-
strated as an attack to steal cryptographic keys and other sensitive
data from the RAM, it is also an effective method that can be used
for reliably acquiring physical memory.
9. CONCLUSIONS
In this paper, we propose a different approach to anti-memory
forensic. Instead of looking at ways to conceal presence by oper-
ating system object manipulation, we can defeat current memory
acquisition methods by manipulating the physical address layout, a
design architectural feature on modern x86 platforms.
HIveS is an anti-forensic mechanism to conceal in-memory data
shadowed behind the I/O address space. Besides I/O Shadowing
technique to prevent forensic memory acquisition tools from read-
ing the HIveS memory contents via processor, we also use Black-
box Write and TLB Camouﬂage to enable the attacker exclusive
write access and provide a single malicious core exclusive read and
write access, respectively. Furthermore, we propose several add-
ons to the basic framework to further hide from physical memory
forensics.
A prototype of HIveS is built on an AMD platform to show that
none of the popular memory acquisition tools we tested can capture
the memory data protected by HIveS. Several countermeasures are
discussed in the end. In the future, we intend to further investi-
gate possible mechanisms to retrieve trustworthy physical address
layout.
Acknowledgment
This work was supported in part by US National Science Founda-
tion under grants CNS-1217889 and CNS-1405747. Dr. Kun Sun’s
work is partially supported by U.S. Army Research Ofﬁce under
Grant W911NF-12-1-0060, W911NF-12-1-0448 and U.S. Ofﬁce
of Naval Research under Grant N00014-11-1-0471
10. REFERENCES
[1] Intel Chipset 4 GB System Memory Support . Feb 2005.
[2] Advanced Micro Devices. Amd64 Architecture
Programmer’s Manual. Vol. 2, may 2013.
[3] Intel 64 and IA-32 Architectures Software Developer’s
Manual. sep 2013.
[4] Advanced Micro Devices, Inc. BIOS and Kernel Developer’s
Guide (BKDG) For AMD Family 15h Processors, Rev 3.23.
[5] R. BBN. Fred: Forensic ram extraction device.
http://www.digitalintelligence.com/
products/fred/.
[6] M. Becher, M. Dornseif, and C. N. Klein. FireWire All Your
Memory are Belong to us. Proceedings of CanSecWest, 2005.
[7] N. Beebe. Digital forensic research: The good, the bad and
the unaddressed. In Advances in digital forensics V, pages
17–36. Springer, 2009.
[8] D. Bilby. Low down and dirty: Anti-forensic rootkits.
BlackHat Japan, 2006.
[9] D. Bovet and M. Cesati. Understanding the Linux kernel.
O’reilly, 2007.
[10] B. D. Carrier and J. Grand. A hardware-based memory
acquisition procedure for digital investigations. Digital
Investigation, 1(1):50 – 60, 2004.
[11] E. Chan, S. Venkataraman, F. David, A. Chaugule, and
R. Campbell. Forenscope: A framework for live forensics. In
Proceedings of the 26th Annual Computer Security
Applications Conference, pages 307–316. ACM, 2010.
[12] M. Cohen, D. Bilby, and G. Caronni. Distributed forensics
and incident response in the enterprise. digital investigation,
8:S101–S110, 2011.
[13] N. R. Council. Strengthening Forensic Science in the United
States: A Path Forward. https://www.ncjrs.gov/
pdffiles1/nij/grants/228091.pdf, 2009.
[14] D. Farmer and W. Venema. Forensic discovery, volume 18.
Addison-Wesley Reading, 2005.
[15] E. Florio. When malware meets rootkits. Virus Bulletin,
2005.
[16] S. L. Garﬁnkel. Digital forensics research: The next 10
years. Digital Investigation, 7:S64–S73, 2010.
Proceedings of the 27th Annual Computer Security
Applications Conference, pages 73–82. ACM, 2011.
[34] S. Sparks and J. Butler. Shadow walker: Raising the bar for
rootkit detection. Black Hat Japan, pages 504–533, 2005.
[35] J. Stüttgen and M. Cohen. Anti-forensic resilient memory
acquisition. Digital Investigation, 10:S105–S115, 2013.
[36] J. Sylve. Lime-linux memory extractor. ShmooConâ ˘A ´Z12,
2012.
[37] S. Vömel and F. C. Freiling. A survey of main memory
acquisition and analysis techniques for the windows
operating system. Digital Investigation, 8(1):3–22, 2011.
[38] J. Wang, A. Stavrou, and A. K. Ghosh. Hypercheck: A
hardware-assisted integrity monitor. In RAID, pages
158–177, 2010.
[39] J. Wang, F. Zhang, K. Sun, and A. Stavrou.
Firmware-assisted memory acquisition and analysis tools for
digital forensics. In Systematic Approaches to Digital
Forensic Engineering (SADFE), 2011 IEEE Sixth
International Workshop on, pages 1–5. IEEE, 2011.
[40] M. Yu, Q. Lin, B. Li, Z. Qi, and H. Guan. Vis: virtualization
enhanced live acquisition for native system. In Proceedings
of the Second Asia-Paciﬁc Workshop on Systems, page 13.
ACM, 2011.
[17] L. Guan, J. L. amd Bo Luo, and J. Jing. Copker: Computing
with Private Keys without RAM. In In Network and
Distributed System Security Symposium (NDSS), 2014.
[18] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and
E. W. Felten. Lest we remember: cold-boot attacks on
encryption keys. Communications of the ACM, 52(5):91–98,
2009.
[19] R. Harris. Arriving at an anti-forensics consensus:
Examining how to deﬁne and control the anti-forensics
problem. digital investigation, 3:44–49, 2006.
[20] T. Haruyama and H. Suzuki. One-byte modiﬁcations for
breaking memory forensic analysis. Black Hat Europe, 2012.
[21] E. Libster and J. D. Kornblum. A proposal for an integrated
memory acquisition mechanism. SIGOPS Oper. Syst. Rev.,
42(3):14–20, Apr. 2008.
[22] Y. Lu, L. Lo, G. Watson, and R. Minnich. CAR: Using Cache
as RAM in LinuxBIOS. http://rere.qmqm.pl/
~mirq/cache_as_ram_lb_09142006.pdf.
[23] L. Martignoni, A. Fattori, R. Paleari, and L. Cavallaro. Live
and trustworthy forensic analysis of commodity production
systems. In Recent Advances in Intrusion Detection, pages
297–316. Springer, 2010.
[24] T. Müller, F. C. Freiling, and A. Dewald. Tresor runs
encryption securely outside ram. In USENIX Security
Symposium, 2011.
[25] T. Newsham, C. Palmer, A. Stamos, and J. Burns. Breaking
forensics software: Weaknesses in critical evidence
collection. In Proceedings of the 2007 Black Hat Conference,
2007.
[26] J. Pabel. Frozencache: Mitigating cold-boot attacks for
full-disk-encryption software. In 27th Chaos Communication
Congress, 2010.
[27] N. L. Petroni Jr, T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot-a coprocessor-based kernel runtime integrity
monitor. In USENIX Security Symposium, pages 179–194,
2004.
[28] A. Reina, A. Fattori, F. Pagani, L. Cavallaro, and D. Bruschi.
When hardware meets software: A bulletproof solution to
forensic memory acquisition. In Proceedings of the 28th
Annual Computer Security Applications Conference, ACSAC
’12, pages 79–88, New York, NY, USA, 2012. ACM.
[29] J. Rutkowska. Subverting vistatm kernel for fun and proﬁt.
Black Hat Brieﬁngs, 2006.
[30] J. Rutkowska. Beyond the CPU: Defeating hardware based
RAM acquisition. Proceedings of BlackHat DC 2007, 2007.
[31] B. Schatz. Bodysnatcher: Towards reliable volatile memory
acquisition by software. digital investigation, 4:126–134,
2007.
[32] D. Sd. Linux on-the-ﬂy kernel patching without lkm. Volume
0x0b, Issue 0x3a, Phile# 0x07 of 0x0e-Phrack
Magazine-http://www. phrack-dont-give-a-shit-about-dmca.
org/show. php, 2001.
[33] P. Simmons. Security through amnesia: a software-based
solution to the cold boot attack on disk encryption. In