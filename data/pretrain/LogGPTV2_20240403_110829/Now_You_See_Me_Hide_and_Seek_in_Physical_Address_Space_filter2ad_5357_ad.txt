### Analysis and Forensic Considerations

The use of I/O Range Registers (IORR) can be highly system-dependent, making it challenging to determine whether their usage is benign or malicious. A forensic examiner might assume that the use of IORR is malicious and directly modify the register's value to reveal memory contents. However, if the IORR usage is benign and system-originated, such direct manipulation could cause a system crash. A more conservative approach would be to read the contents from the address range without modifying any registers. Although this method may still cause system instability, the likelihood of a catastrophic failure due to memory reads is significantly lower. If all the bytes read back are identical values (e.g., 0xFF or 0x00), it is likely that no real I/O device is present at these addresses.

HIveS can be detected through Cold Boot techniques if HIveS extensions like RAM-less encryption are not applied. Forensic examiners can first dump the registers, including all Model-Specific Registers (MSRs) and debugging registers from all processor cores. They can then flush the system cache back into memory and reset the system to extract memory content, leveraging the memory remanence characteristics. This process, however, changes many system configurations and some memory contents, which violates the forensic principle of not altering the crime scene.

### Extensions and Future Work

While some limitations, such as architecture and operating system dependencies, are unavoidable, others can be addressed. We discuss potential extensions of HIveS in this section.

#### Eliminating Memory Traces

One limitation is that HIveS storage can only hold data collected by malware, rather than protecting the entire malware. A key insight is that the physical address layout manipulation performed by HIveS is infrequent, possibly occurring only once. The code required to alter this layout is minimal, often just one or two instructions. For example, in our prototype, the kernel module initialization routine can change the IORR register and immediately erase the previous instruction by zeroing it. This leaves a very small window (approximately three instruction execution times) for the forensic examiner to capture the image and detect the use of IORR. The practical chance of catching this moment is nearly zero.

#### Extending HIveS to Intel Platforms

Unfortunately, the IORR registers exploited by HIveS are specific to AMD. To the best of our knowledge, there is no equivalent MSR in Intel platforms. This does not mean HIveS is impossible on Intel. Malware authors will need to find another way to alter the physical address layout. For instance, Intel Memory Controller Hub (MCH) chipsets provide the capability to recover addressable memory space lost to MMIO space. One can modify the REMAPBASE and REMAPLIMIT registers in the chipset to manipulate the physical address layout (also known as system address space in Intel manuals).

#### HIveS for Defense

Techniques in computer security can be used for both offensive and defensive purposes. For example, virtual machine-based rootkits (VMBR) introduced by Rutkowska et al. [29] have been used to capture host images in forensic memory analysis [23, 40]. Similarly, while we present HIveS as an anti-forensic tool, it can also be developed and used as a defense mechanism to protect sensitive data against malicious memory scanning. For instance, application passwords can be stored in HIveS memory, ensuring they are not accessible to malware reading physical memory.

### Related Works

There is an ongoing arms race between attackers and forensic examiners in computer forensics [34, 20, 25, 37]. Memory forensic analysis is becoming increasingly important, with two primary methods for acquiring computer memory: software-based methods that use a trusted software module to access memory through the CPU [11, 21, 39, 28, 35, 14, 31, 36, 12], and hardware-based methods that rely on dedicated I/O devices to access physical memory via Direct Memory Access (DMA) [10, 35, 27, 6].

Software-based memory acquisition techniques depend on the CPU and the operating system. Attackers have developed anti-forensic techniques to compromise this process, such as modifying the acquisition module or the OS kernel data structure [8, 20, 34, 15], using rootkits to hook operating system APIs [32], or installing a thin hypervisor on the fly [29].

To counter these anti-forensic techniques, Stüttgen et al. [35] propose a method to acquire physical memory independently of the operating system. Schatz [31] suggests bootstrapping a trusted new execution environment from the normal one to ensure the operating system is free of malware. System Management Mode (SMM) can also create a trusted isolated execution environment [28, 39]. Some researchers propose using hardware virtualization to avoid subversion by rootkits [23, 40].

Stüttgen et al. argue that the memory acquisition process can be trusted if the acquisition module has not been tampered with and all operations are performed without relying on the operating system or other untrusted software [35]. However, we show that this assumption is flawed because the physical memory layout seen by the processor can be manipulated through hardware configurations on the chipset. Attackers can misuse these configurations to conceal the presence of malware.

Several hardware-based memory acquisition methods have been developed, using trusted peripheral devices to capture physical memory via DMA [27, 38, 5, 10]. These methods do not rely on the CPU, thus preventing anti-forensic techniques designed to defeat software-based approaches. However, Rutkowska [30] demonstrates that it is possible to present a different view of physical memory to peripherals by reprogramming the north bridge, potentially compromising in-memory data acquired by DMAs [28, 35].

A special type of memory acquisition technique relies on the remanence property of physical DRAM [18, 11]. Despite the belief that volatile contents in DRAM are lost upon power loss, Halderman et al. [18] demonstrate a Cold Boot attack that can reliably recover memory contents even after a short power-off period. While originally demonstrated as an attack to steal cryptographic keys and sensitive data, Cold Boot is also an effective method for acquiring physical memory.

### Conclusions

In this paper, we propose a novel approach to anti-memory forensics. Instead of concealing presence through operating system object manipulation, we manipulate the physical address layout, a design feature on modern x86 platforms.

HIveS is an anti-forensic mechanism that conceals in-memory data shadowed behind the I/O address space. In addition to I/O Shadowing, which prevents forensic tools from reading HIveS memory via the processor, we use Blackbox Write and TLB Camouflage to enable exclusive write access and provide a single malicious core with exclusive read and write access, respectively. We also propose several add-ons to further hide from physical memory forensics.

A prototype of HIveS was built on an AMD platform, demonstrating that none of the popular memory acquisition tools tested could capture the protected memory data. Several countermeasures are discussed, and future work will investigate mechanisms to retrieve trustworthy physical address layouts.

### Acknowledgment

This work was supported in part by the US National Science Foundation under grants CNS-1217889 and CNS-1405747. Dr. Kun Sun’s work is partially supported by the U.S. Army Research Office under Grants W911NF-12-1-0060, W911NF-12-1-0448, and the U.S. Office of Naval Research under Grant N00014-11-1-0471.

### References

[1] Intel Chipset 4 GB System Memory Support. Feb 2005.
[2] Advanced Micro Devices. Amd64 Architecture Programmer’s Manual. Vol. 2, May 2013.
[3] Intel 64 and IA-32 Architectures Software Developer’s Manual. Sep 2013.
[4] Advanced Micro Devices, Inc. BIOS and Kernel Developer’s Guide (BKDG) For AMD Family 15h Processors, Rev 3.23.
[5] R. BBN. Fred: Forensic RAM Extraction Device. http://www.digitalintelligence.com/products/fred/.
[6] M. Becher, M. Dornseif, and C. N. Klein. FireWire All Your Memory Are Belong to Us. Proceedings of CanSecWest, 2005.
[7] N. Beebe. Digital Forensic Research: The Good, the Bad, and the Unaddressed. In Advances in Digital Forensics V, pages 17–36. Springer, 2009.
[8] D. Bilby. Low Down and Dirty: Anti-Forensic Rootkits. BlackHat Japan, 2006.
[9] D. Bovet and M. Cesati. Understanding the Linux Kernel. O’Reilly, 2007.
[10] B. D. Carrier and J. Grand. A Hardware-Based Memory Acquisition Procedure for Digital Investigations. Digital Investigation, 1(1):50–60, 2004.
[11] E. Chan, S. Venkataraman, F. David, A. Chaugule, and R. Campbell. Forenscope: A Framework for Live Forensics. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 307–316. ACM, 2010.
[12] M. Cohen, D. Bilby, and G. Caronni. Distributed Forensics and Incident Response in the Enterprise. Digital Investigation, 8:S101–S110, 2011.
[13] N. R. Council. Strengthening Forensic Science in the United States: A Path Forward. https://www.ncjrs.gov/pdffiles1/nij/grants/228091.pdf, 2009.
[14] D. Farmer and W. Venema. Forensic Discovery, Volume 18. Addison-Wesley Reading, 2005.
[15] E. Florio. When Malware Meets Rootkits. Virus Bulletin, 2005.
[16] S. L. Garfinkel. Digital Forensics Research: The Next 10 Years. Digital Investigation, 7:S64–S73, 2010.
[17] L. Guan, J. L. and Bo Luo, and J. Jing. Copker: Computing with Private Keys Without RAM. In Network and Distributed System Security Symposium (NDSS), 2014.
[18] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest We Remember: Cold-Boot Attacks on Encryption Keys. Communications of the ACM, 52(5):91–98, 2009.
[19] R. Harris. Arriving at an Anti-Forensics Consensus: Examining How to Define and Control the Anti-Forensics Problem. Digital Investigation, 3:44–49, 2006.
[20] T. Haruyama and H. Suzuki. One-Byte Modifications for Breaking Memory Forensic Analysis. Black Hat Europe, 2012.
[21] E. Libster and J. D. Kornblum. A Proposal for an Integrated Memory Acquisition Mechanism. SIGOPS Oper. Syst. Rev., 42(3):14–20, Apr. 2008.
[22] Y. Lu, L. Lo, G. Watson, and R. Minnich. CAR: Using Cache as RAM in LinuxBIOS. http://rere.qmqm.pl/~mirq/cache_as_ram_lb_09142006.pdf.
[23] L. Martignoni, A. Fattori, R. Paleari, and L. Cavallaro. Live and Trustworthy Forensic Analysis of Commodity Production Systems. In Recent Advances in Intrusion Detection, pages 297–316. Springer, 2010.
[24] T. Müller, F. C. Freiling, and A. Dewald. Tresor Runs Encryption Securely Outside RAM. In USENIX Security Symposium, 2011.
[25] T. Newsham, C. Palmer, A. Stamos, and J. Burns. Breaking Forensics Software: Weaknesses in Critical Evidence Collection. In Proceedings of the 2007 Black Hat Conference, 2007.
[26] J. Pabel. Frozencache: Mitigating Cold-Boot Attacks for Full-Disk-Encryption Software. In 27th Chaos Communication Congress, 2010.
[27] N. L. Petroni Jr, T. Fraser, J. Molina, and W. A. Arbaugh. Copilot-A Coprocessor-Based Kernel Runtime Integrity Monitor. In USENIX Security Symposium, pages 179–194, 2004.
[28] A. Reina, A. Fattori, F. Pagani, L. Cavallaro, and D. Bruschi. When Hardware Meets Software: A Bulletproof Solution to Forensic Memory Acquisition. In Proceedings of the 28th Annual Computer Security Applications Conference, ACSAC ’12, pages 79–88, New York, NY, USA, 2012. ACM.
[29] J. Rutkowska. Subverting Vista™ Kernel for Fun and Profit. Black Hat Briefings, 2006.
[30] J. Rutkowska. Beyond the CPU: Defeating Hardware Based RAM Acquisition. Proceedings of BlackHat DC 2007, 2007.
[31] B. Schatz. Bodysnatcher: Towards Reliable Volatile Memory Acquisition by Software. Digital Investigation, 4:126–134, 2007.
[32] D. Sd. Linux On-the-Fly Kernel Patching Without LKM. Volume 0x0b, Issue 0x3a, Phile# 0x07 of 0x0e-Phrack Magazine-http://www.phrack-dont-give-a-shit-about-dmca.org/show.php, 2001.
[33] P. Simmons. Security Through Amnesia: A Software-Based Solution to the Cold Boot Attack on Disk Encryption. In