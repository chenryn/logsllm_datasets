progress: 14.0 s, 60387.0 tps, lat 0.462 ms stddev 0.304  
progress: 15.0 s, 59698.8 tps, lat 0.467 ms stddev 0.316  
progress: 16.0 s, 59928.5 tps, lat 0.465 ms stddev 0.313  
progress: 17.0 s, 60510.5 tps, lat 0.460 ms stddev 0.302  
```
我们还可以通过stap来看到这样的效果：  
```
stap -DMAXSKIPPED=100000 -v 11111 -e '  
global f_start, stat_var;  
probe process("/opt/pgsql/bin/postgres").function("XLogInsert@/opt/soft_bak/postgresql-9.4.1/src/backend/access/transam/xlog.c").call {   
  f_start[pid(), tid()] = gettimeofday_ns()  
}  
probe process("/opt/pgsql/bin/postgres").function("XLogInsert@/opt/soft_bak/postgresql-9.4.1/src/backend/access/transam/xlog.c").return {  
  t=gettimeofday_ns()  
  a=pid()  
  b=tid()  
  if (f_start[a,b]) {  
    stat_var[a,b] 0 ) {  
      printf("pid: %d, tid: %d, min: %d, max: %d, avg: %d, sum: %d, count: %d\n", v1, v2, @min(stat_var[v1,v2]), @max(stat_var[v1,v2]), @avg(stat_var[v1,v2]), @sum(stat_var[v1,v2]), @count(stat_var[v1,v2]))  
    }  
  }  
}'  
```
当full page writes关闭时：  
```
checkpoint start  
checkpoint done  
pid: 7976, tid: 7976, min: 17660, max: 17660, avg: 17660, sum: 17660, count: 1  
pid: 8722, tid: 8722, min: 3902, max: 1795060, avg: 8797, sum: 2339179954, count: 265896  
pid: 8737, tid: 8737, min: 3804, max: 2397915, avg: 8921, sum: 2373901808, count: 266084  
pid: 8726, tid: 8726, min: 3812, max: 1544051, avg: 8876, sum: 2364795050, count: 266418  
pid: 8736, tid: 8736, min: 3932, max: 1585877, avg: 8833, sum: 2354577217, count: 266553  
pid: 8706, tid: 8706, min: 3812, max: 2242369, avg: 8776, sum: 2340338511, count: 266651  
pid: 8739, tid: 8739, min: 3913, max: 1533554, avg: 8890, sum: 2371167014, count: 266720  
pid: 8698, tid: 8698, min: 3872, max: 2141824, avg: 8759, sum: 2337391283, count: 266851  
pid: 8732, tid: 8732, min: 3834, max: 1426147, avg: 8896, sum: 2375078067, count: 266953  
pid: 8735, tid: 8735, min: 3876, max: 4253655, avg: 8908, sum: 2378517468, count: 266998  
pid: 8695, tid: 8695, min: 3872, max: 2256848, avg: 8853, sum: 2364436879, count: 267057  
pid: 8711, tid: 8711, min: 3883, max: 2840955, avg: 8792, sum: 2349657964, count: 267224  
pid: 8694, tid: 8694, min: 3947, max: 2684147, avg: 8819, sum: 2357223023, count: 267266  
pid: 8718, tid: 8718, min: 3846, max: 1666267, avg: 8924, sum: 2385454634, count: 267279  
pid: 8734, tid: 8734, min: 3835, max: 2663756, avg: 8798, sum: 2352532736, count: 267382  
pid: 8693, tid: 8693, min: 3830, max: 1915645, avg: 8764, sum: 2345468816, count: 267619  
pid: 8738, tid: 8738, min: 3876, max: 2187521, avg: 8895, sum: 2380585848, count: 267620  
pid: 8705, tid: 8705, min: 3906, max: 2579393, avg: 8964, sum: 2399871667, count: 267717  
pid: 8728, tid: 8728, min: 3872, max: 2405755, avg: 8839, sum: 2366833087, count: 267749  
pid: 8729, tid: 8729, min: 3853, max: 1613303, avg: 8947, sum: 2396649611, count: 267854  
pid: 8730, tid: 8730, min: 3906, max: 2590461, avg: 8903, sum: 2385215913, count: 267903  
pid: 8719, tid: 8719, min: 3819, max: 2737461, avg: 8696, sum: 2329969230, count: 267918  
pid: 8708, tid: 8708, min: 3909, max: 1614057, avg: 8947, sum: 2398100004, count: 268029  
pid: 8717, tid: 8717, min: 3857, max: 2158133, avg: 8798, sum: 2359353315, count: 268151  
pid: 8733, tid: 8733, min: 3831, max: 1694714, avg: 8889, sum: 2386096329, count: 268426  
pid: 8709, tid: 8709, min: 3857, max: 1501952, avg: 8930, sum: 2402379420, count: 268997  
pid: 8704, tid: 8704, min: 3857, max: 1593996, avg: 8873, sum: 2389259952, count: 269254  
pid: 8714, tid: 8714, min: 3850, max: 1428079, avg: 8869, sum: 2388105216, count: 269263  
pid: 8701, tid: 8701, min: 3860, max: 1637398, avg: 8894, sum: 2396702871, count: 269470  
```
当full page writes开启时，wal写的平均时间比关闭full page writes时长很多：  
```
checkpoint start  
checkpoint done  
pid: 8887, tid: 8887, min: 20388, max: 20388, avg: 20388, sum: 20388, count: 1  
pid: 7976, tid: 7976, min: 17660, max: 18440, avg: 18050, sum: 36100, count: 2  
pid: 9004, tid: 9004, min: 11571, max: 226607, avg: 93843, sum: 563063, count: 6  
pid: 8805, tid: 8805, min: 3545, max: 1847920, avg: 8823, sum: 1280653201, count: 145139  
pid: 8914, tid: 8914, min: 3478, max: 19553712, avg: 46633, sum: 10678936832, count: 228995  
pid: 8965, tid: 8965, min: 3857, max: 33328682, avg: 37567, sum: 9228772302, count: 245661  
pid: 8986, tid: 8986, min: 3805, max: 32983019, avg: 37369, sum: 9208748829, count: 246421  
pid: 8969, tid: 8969, min: 3824, max: 33472947, avg: 37242, sum: 9185048728, count: 246626  
pid: 8990, tid: 8990, min: 3902, max: 32383832, avg: 37270, sum: 9202617869, count: 246912  
pid: 8954, tid: 8954, min: 3902, max: 32199797, avg: 37151, sum: 9175503504, count: 246976  
pid: 8991, tid: 8991, min: 3797, max: 33125798, avg: 37156, sum: 9179089256, count: 247040  
pid: 8952, tid: 8952, min: 3782, max: 33192867, avg: 37446, sum: 9251197245, count: 247049  
pid: 8958, tid: 8958, min: 3801, max: 33094778, avg: 37337, sum: 9232970224, count: 247287  
pid: 8979, tid: 8979, min: 3842, max: 33224595, avg: 37079, sum: 9171570876, count: 247351  
pid: 8984, tid: 8984, min: 3786, max: 33242997, avg: 37090, sum: 9176002582, count: 247396  
pid: 8945, tid: 8945, min: 3819, max: 32980512, avg: 37063, sum: 9170007762, count: 247413  
pid: 8978, tid: 8978, min: 3838, max: 33609199, avg: 37452, sum: 9270596686, count: 247530  
pid: 8981, tid: 8981, min: 3759, max: 33190956, avg: 36915, sum: 9140303488, count: 247598  
pid: 8993, tid: 8993, min: 3864, max: 33163898, avg: 37178, sum: 9209639310, count: 247715  
pid: 8980, tid: 8980, min: 3838, max: 33197079, avg: 37071, sum: 9184138362, count: 247739  
pid: 8973, tid: 8973, min: 3808, max: 32933431, avg: 37014, sum: 9174981958, count: 247876  
pid: 8962, tid: 8962, min: 3838, max: 33110329, avg: 37188, sum: 9218350426, count: 247880  
pid: 8982, tid: 8982, min: 3820, max: 33107999, avg: 36969, sum: 9173436495, count: 248136  
pid: 8974, tid: 8974, min: 3834, max: 32363107, avg: 37128, sum: 9213153086, count: 248140  
pid: 8949, tid: 8949, min: 3838, max: 32520297, avg: 37266, sum: 9250689544, count: 248229  
pid: 8983, tid: 8983, min: 3827, max: 32591534, avg: 37085, sum: 9208350649, count: 248303  
pid: 8992, tid: 8992, min: 3854, max: 33391344, avg: 37197, sum: 9240135638, count: 248407  
pid: 8988, tid: 8988, min: 3775, max: 33189136, avg: 36888, sum: 9166448605, count: 248489  
pid: 8985, tid: 8985, min: 3823, max: 32310200, avg: 36714, sum: 9124542692, count: 248528  
pid: 8987, tid: 8987, min: 3793, max: 32861463, avg: 37067, sum: 9214883458, count: 248599  
pid: 8964, tid: 8964, min: 3812, max: 32963347, avg: 36984, sum: 9196461264, count: 248654  
pid: 8989, tid: 8989, min: 3790, max: 33236923, avg: 36882, sum: 9171642674, count: 248674  
pid: 8955, tid: 8955, min: 3838, max: 32400840, avg: 36901, sum: 9210718295, count: 249601  
pid: 8722, tid: 8722, min: 3880, max: 4580443, avg: 8828, sum: 3783136090, count: 428524  
pid: 8737, tid: 8737, min: 3804, max: 3539772, avg: 8888, sum: 3821238551, count: 429931  
pid: 8706, tid: 8706, min: 3812, max: 4387445, avg: 8777, sum: 3774082384, count: 429974  
pid: 8718, tid: 8718, min: 3846, max: 2775268, avg: 8949, sum: 3849426661, count: 430127  
pid: 8726, tid: 8726, min: 3782, max: 2775655, avg: 8851, sum: 3809751808, count: 430398  
pid: 8736, tid: 8736, min: 3913, max: 2712147, avg: 8786, sum: 3781992446, count: 430441  
pid: 8711, tid: 8711, min: 3868, max: 4244141, avg: 8761, sum: 3774796287, count: 430843  
pid: 8732, tid: 8732, min: 3834, max: 2296943, avg: 8887, sum: 3829627946, count: 430900  
pid: 8728, tid: 8728, min: 3868, max: 3326763, avg: 8803, sum: 3794778852, count: 431045  
pid: 8694, tid: 8694, min: 3944, max: 3331770, avg: 8837, sum: 3809602504, count: 431094  
pid: 8693, tid: 8693, min: 3820, max: 2340163, avg: 8745, sum: 3770891213, count: 431177  
pid: 8739, tid: 8739, min: -1310, max: 2893860, avg: 8881, sum: 3829692548, count: 431180  
pid: 8729, tid: 8729, min: 3781, max: 2710005, avg: 8929, sum: 3851335374, count: 431306  
pid: 8734, tid: 8734, min: 3808, max: 3303660, avg: 8766, sum: 3781832008, count: 431400  
pid: 8698, tid: 8698, min: 3868, max: 2141824, avg: 8699, sum: 3754114431, count: 431508  
pid: 8735, tid: 8735, min: 3856, max: 7316670, avg: 8899, sum: 3841025315, count: 431579  
pid: 8708, tid: 8708, min: 3857, max: 2156062, avg: 8958, sum: 3867736316, count: 431763  
pid: 8705, tid: 8705, min: 3868, max: 2579393, avg: 8908, sum: 3847521523, count: 431890  
pid: 8695, tid: 8695, min: 3823, max: 2256848, avg: 8825, sum: 3812586458, count: 431990  
pid: 8738, tid: 8738, min: 3876, max: 2187521, avg: 8833, sum: 3821431064, count: 432596  
pid: 8733, tid: 8733, min: 3831, max: 3051621, avg: 8879, sum: 3841527531, count: 432620  
pid: 8719, tid: 8719, min: 3812, max: 4460423, avg: 8708, sum: 3767820516, count: 432669  
pid: 8704, tid: 8704, min: 3857, max: 3500486, avg: 8885, sum: 3844851608, count: 432716  
pid: 8730, tid: 8730, min: 3857, max: 2942251, avg: 8861, sum: 3838738375, count: 433191  
pid: 8717, tid: 8717, min: 3845, max: 2727852, avg: 8790, sum: 3808255298, count: 433241  
pid: 8701, tid: 8701, min: -14361, max: 5013506, avg: 8887, sum: 3853784088, count: 433605  
pid: 8714, tid: 8714, min: 3846, max: 3206576, avg: 8846, sum: 3838045173, count: 433846  
pid: 8709, tid: 8709, min: -22632, max: 2128161, avg: 8916, sum: 3869261657, count: 433926  
```
最后，即使我们关闭了full page writes, 在某些情况下也会写full page, 那就是打开在线备份时做的那个检查点。  
源码如下：  
```
/*  
 * Shared state data for XLogInsert.  
 */  
typedef struct XLogCtlInsert  
{  
        slock_t         insertpos_lck;  /* protects CurrBytePos and PrevBytePos */  
        /*  
         * CurrBytePos is the end of reserved WAL. The next record will be  
         * inserted at that position. PrevBytePos is the start position of the  
         * previously inserted (or rather, reserved) record - it is copied to the  
         * prev-link of the next record. These are stored as "usable byte  
         * positions" rather than XLogRecPtrs (see XLogBytePosToRecPtr()).  
         */  
        uint64          CurrBytePos;  
        uint64          PrevBytePos;  
        /*  
         * Make sure the above heavily-contended spinlock and byte positions are  
         * on their own cache line. In particular, the RedoRecPtr and full page  
         * write variables below should be on a different cache line. They are  
         * read on every WAL insertion, but updated rarely, and we don't want  
         * those reads to steal the cache line containing Curr/PrevBytePos.  
         */  
        char            pad[PG_CACHE_LINE_SIZE];  
        /*  
         * fullPageWrites is the master copy used by all backends to determine  
         * whether to write full-page to WAL, instead of using process-local one.  
         * This is required because, when full_page_writes is changed by SIGHUP,  
         * we must WAL-log it before it actually affects WAL-logging by backends.  
         * Checkpointer sets at startup or after SIGHUP.  
         *  
         * To read these fields, you must hold an insertion lock. To modify them,  
         * you must hold ALL the locks.  
         */  
        XLogRecPtr      RedoRecPtr;             /* current redo point for insertions */  
        bool            forcePageWrites;        /* forcing full-page writes for PITR? */  // 这个就是保证做在线备份时写FULL PAGE的变量。  
        bool            fullPageWrites;  
        /*  
         * exclusiveBackup is true if a backup started with pg_start_backup() is  
         * in progress, and nonExclusiveBackups is a counter indicating the number  
         * of streaming base backups currently in progress. forcePageWrites is set  
         * to true when either of these is non-zero. lastBackupStart is the latest  
         * checkpoint redo location used as a starting point for an online backup.  
         */  
        bool            exclusiveBackup;  
        int                     nonExclusiveBackups;  
        XLogRecPtr      lastBackupStart;  
        /*  
         * WAL insertion locks.  
         */  
        WALInsertLockPadded *WALInsertLocks;  
        LWLockTranche WALInsertLockTranche;  
        int                     WALInsertLockTrancheId;  
} XLogCtlInsert;  
XLogRecPtr  
XLogInsert(RmgrId rmid, uint8 info, XLogRecData *rdata)  
{  
......  
        /*  
         * Decide if we need to do full-page writes in this XLOG record: true if  
         * full_page_writes is on or we have a PITR request for it.  Since we  
         * don't yet have an insertion lock, fullPageWrites and forcePageWrites  
         * could change under us, but we'll recheck them once we have a lock.  
         */  
        doPageWrites = Insert->fullPageWrites || Insert->forcePageWrites;  
...  
}  
/*  