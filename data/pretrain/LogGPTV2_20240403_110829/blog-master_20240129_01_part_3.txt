 韸琵慆蝾啈响夐捶燚积      
 菥芉阣瀤乐潾敾糩镽礕      
 厢垅欳事鎤懯剂掏蔷窡      
 覤綊伱鳪散当镄灳毯杸      
 鳀倯鲗錾榜晟挗觑镈壮      
(10 rows)      
```      
27、随机数组      
```      
create or replace function gen_rand_arr(int,int) returns int[] as $$        
  select array_agg((random()*$1)::int) from generate_series(1,$2);        
$$ language sql strict;        
```      
```      
postgres=# select gen_rand_arr(100,10) from generate_series(1,10);      
          gen_rand_arr                 
---------------------------------      
 {69,11,12,70,7,41,81,95,83,17}      
 {26,79,20,21,64,64,51,90,38,38}      
 {3,64,46,28,26,55,39,12,69,76}      
 {66,38,87,78,8,94,18,88,89,1}      
 {6,14,81,26,36,45,90,87,35,28}      
 {25,38,91,71,67,17,26,5,29,95}      
 {82,94,32,69,72,40,63,90,29,51}      
 {91,34,66,72,60,1,17,50,88,51}      
 {77,13,89,69,84,56,86,10,61,14}      
 {5,43,8,38,11,80,78,74,70,6}      
(10 rows)      
```      
28、连接符      
```      
postgres=# select concat('a', ' ', 'b');      
 concat       
--------      
 a b      
(1 row)      
```      
29、随机身份证号   
通过自定义函数，可以生成很多有趣的数据。  例如 随机身份证号      
```      
create or replace function gen_id(        
  a date,        
  b date        
)         
returns text as $$        
select lpad((random()*99)::int::text, 2, '0') ||         
       lpad((random()*99)::int::text, 2, '0') ||         
       lpad((random()*99)::int::text, 2, '0') ||         
       to_char(a + (random()*(b-a))::int, 'yyyymmdd') ||         
       lpad((random()*99)::int::text, 2, '0') ||         
       random()::int ||         
       (case when random()*10 >9 then 'X' else (random()*9)::int::text end ) ;        
$$ language sql strict;        
```      
```      
postgres=# select gen_id('1900-01-01', '2017-10-16') from generate_series(1,10);      
       gen_id             
--------------------      
 25614020061108330X      
 49507919010403271X      
 96764619970119860X      
 915005193407306113      
 551360192005045415      
 430005192611170108      
 299138191310237806      
 95149919670723980X      
 542053198501097403      
 482334198309182411      
(10 rows)      
```      
二、如何快速生成大量数据    
1、通过SRF函数genrate_series快速生成    
```    
drop table if exists tbl;    
create unlogged table tbl (    
  id int primary key,    
  info text,    
  c1 int,    
  c2 float,    
  ts timestamp    
);    
-- 写入100万条    
insert into tbl select id,md5(random()::text),random()*1000,random()*100,clock_timestamp() from generate_series(1,1000000) id;    
INSERT 0 1000000    
Time: 990.351 ms    
```    
```    
postgres=# select * from tbl limit 10;    
 id |               info               | c1  |         c2         |             ts                 
----+----------------------------------+-----+--------------------+----------------------------    
  1 | 2861dff7a9005fd07bd565d4c222aefc | 731 | 35.985756074820685 | 2023-09-06 07:34:43.992953    
  2 | ada46617f699b439ac3749d339a17a37 | 356 |  6.641897326709056 | 2023-09-06 07:34:43.993349    
  3 | 53e5f281c152abbe2be107273f661dcf |   2 |  79.66681115076746 | 2023-09-06 07:34:43.993352    
  4 | 42a7ab47ac773966fd80bbfb4a381cc5 | 869 |  39.64575446230825 | 2023-09-06 07:34:43.993352    
  5 | fc1fe81740821e8099f28578fe602d47 | 300 |  23.26141144641234 | 2023-09-06 07:34:43.993353    
  6 | 54f85d06b05fa1ad3e6f6c25845a8c99 | 536 |  51.24406182086716 | 2023-09-06 07:34:43.993354    
  7 | 9aac2fa6715b5136ff08c984cf39b200 | 615 |  60.35335101210144 | 2023-09-06 07:34:43.993355    
  8 | 227f02f3ce4a6778ae8b95e4b161da8e | 665 | 35.615585743405376 | 2023-09-06 07:34:43.993356    
  9 | eb2f7c304e9139be23828b764a8334a2 | 825 |  60.37908523246465 | 2023-09-06 07:34:43.993356    
 10 | dce3b8e11fbcf85e6fd0abca9546447d | 438 |  45.88193344829534 | 2023-09-06 07:34:43.993357    
(10 rows)    
```    
2、使用plpgsql或inline code, 快速创建分区表.      
```    
drop table if exists tbl;    
create unlogged table tbl (    
  id int primary key,    
  info text,    
  c1 int,    
  c2 float,    
  ts timestamp    
) PARTITION BY HASH(id);    
do language plpgsql $$    
declare    
  cnt int := 256;    
begin    
  for i in 0..cnt-1 loop    
    execute format('create unlogged table tbl_%s PARTITION OF tbl FOR VALUES WITH ( MODULUS %s, REMAINDER %s)', i, cnt, i);    
  end loop;    
end;    
$$;    
insert into tbl select id,md5(random()::text),random()*1000,random()*100,clock_timestamp() from generate_series(1,1000000) id;    
INSERT 0 1000000    
Time: 1577.707 ms (00:01.578)    
```    
3、使用 pgbench 调用自定义SQL文件, 高速写入    
```    
drop table if exists tbl;    
create unlogged table tbl (    
  id serial4 primary key,    
  info text,    
  c1 int,    
  c2 float,    
  ts timestamp    
);    
```    
```    
vi t.sql    
insert into tbl (info,c1,c2,ts) values (md5(random()::text), random()*1000, random()*100, clock_timestamp());    
```    
开启10个连接, 执行`t.sql`共120秒.      
```    
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120    
```    
```    
transaction type: ./t.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 10    
number of threads: 10    
duration: 120 s    
number of transactions actually processed: 18336072    
latency average = 0.065 ms    
latency stddev = 0.105 ms    
initial connection time = 25.519 ms    
tps = 152823.214015 (without initial connection time)    
statement latencies in milliseconds:    
         0.065  insert into tbl (info,c1,c2,ts) values (md5(random()::text), random()*1000, random()*100, clock_timestamp());    
```    
4、使用 pgbench 内置的 tpcb模型, 自动创建表和数据.     
初始化1000万条tpcb数据.     
```    
pgbench -i -s 100 --unlogged-tables     
```    
测试tpcb读请求    
```    
pgbench -M prepared -n -r -P 1 -c 10 -j 10 -S -T 120    
transaction type:     
scaling factor: 100    
query mode: prepared    
number of clients: 10    
number of threads: 10    
duration: 120 s    
number of transactions actually processed: 19554665    
latency average = 0.061 ms    
latency stddev = 0.051 ms    
initial connection time = 15.302 ms    
tps = 162975.776467 (without initial connection time)    
statement latencies in milliseconds:    
         0.000  \set aid random(1, 100000 * :scale)    
         0.061  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
```    
测试tpcb读写请求    
```    
pgbench -M prepared -n -r -P 1 -c 10 -j 10 -T 120    
transaction type:     
scaling factor: 100    
query mode: prepared    
number of clients: 10    
number of threads: 10    
duration: 120 s    
number of transactions actually processed: 2531643    
latency average = 0.474 ms    
latency stddev = 0.373 ms    
initial connection time = 18.930 ms    
tps = 21098.448090 (without initial connection time)    
statement latencies in milliseconds:    
         0.000  \set aid random(1, 100000 * :scale)    
         0.000  \set bid random(1, 1 * :scale)    
         0.000  \set tid random(1, 10 * :scale)    
         0.000  \set delta random(-5000, 5000)    
         0.045  BEGIN;    
         0.095  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;    
         0.068  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;    
         0.069  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;    
         0.077  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;    
         0.061  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);    
         0.056  END;    
```    
5、留作业, 思考一下如下模型数据怎么生成?      
- tpcc    
- tpcds    
- tpch    
三、如何生成按需求分布的随机值    
https://www.postgresql.org/docs/16/pgbench.html    
1、pgbench 内置生成按不同的概率特征分布的随机值的函数.      
例如在电商业务、游戏业务中, 活跃用户可能占比只有20%, 极度活跃的更少, 如果有一表记录了每个用户的行为, 那么生成的数据可能是高斯分布的.      
```    
均匀分布    
random ( lb, ub ) → integer    
  Computes a uniformly-distributed random integer in [lb, ub].    
  random(1, 10) → an integer between 1 and 10    
指数分布    
random_exponential ( lb, ub, parameter ) → integer    
  Computes an exponentially-distributed random integer in [lb, ub], see below.    
  random_exponential(1, 10, 3.0) → an integer between 1 and 10    
高斯分布    
random_gaussian ( lb, ub, parameter ) → integer    
  Computes a Gaussian-distributed random integer in [lb, ub], see below.    
  random_gaussian(1, 10, 2.5) → an integer between 1 and 10    