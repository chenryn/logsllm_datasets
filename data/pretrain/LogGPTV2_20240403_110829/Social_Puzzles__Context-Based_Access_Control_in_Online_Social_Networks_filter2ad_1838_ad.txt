### A. Details of Implementation 1

The first implementation is designed to be cross-platform and primarily utilizes JavaScript and HTML on the client side. All sharing and retrieval actions are performed within a JavaScript and cookie-enabled web browser, eliminating the need for any additional software installations by either the sharer or the receiver.

Our application allows users to leverage access control functionality without leaving the Facebook environment, providing a seamless and user-friendly interface. For symmetric encryption, we use GibberishAES [21], and all hash values are computed using the SHA3 implementation provided by CryptoJS [22].

#### Sharing Content
To share a new object, the application presents an HTML form (Fig. 5) to the sharer. The form requires the sharer to input the object to be shared, context questions, and corresponding answers. The sharer must also specify the threshold value \( k \). The total number of contexts \( N \) is automatically detected by counting the number of question-answer pairs entered by the sharer.

Upon submission, a JavaScript function is triggered to perform several client-side operations. This function generates a random secret \( M_O \), its corresponding hash \( K_O \), and a puzzle-specific key \( K_{ZO} \). The object is then encrypted using AES with key \( K_O \). Shamir's secret sharing algorithm is applied to \( M_O \), and the resulting shares are XOR-encoded with the context answers. Additionally, the hash values of the concatenated answers and \( K_{ZO} \) are computed. These client-side computations complete the sharing process.

The puzzle \( Z_O \) is then uploaded to the application server hosted on Amazon EC2. The server maintains a MySQL database to store information about all puzzles. Upon receiving a new puzzle, the server adds a new entry to the MySQL puzzle table with a unique puzzle identifier. This identifier is used to generate a hyperlink or URI, which is posted on the sharer’s Facebook profile (Fig. 6). The sharer can further enhance privacy by using Facebook’s privacy settings.

#### Receiving Content
When the sharer’s friends (or receivers) see the post, they can click on the hyperlink to access the shared data object. This action leads them to an interface where the server fetches the puzzle from the database and presents a randomized set of questions (Fig. 7). An HTML form is displayed to accept the receiver's answers.

On receiving the answers, a JavaScript subroutine writes them to a local cookie file. Another JavaScript function overwrites the answer fields in the HTML form with the corresponding hash values, which are sent to the server for verification. The server matches the hashed answers from the receiver to the hashed contexts stored in the database. If the threshold is not met, an error message is displayed. If the threshold is satisfied, the server redirects the receiver to the encrypted object and provides the encoded shares (XOR'ed with the correct context answers).

The receiver retrieves the actual answers from the cookie file, XORs them back with the encoded shares to retrieve the original shares, and computes the original random secret \( M_O \) using Lagrange polynomials. After calculating \( K_O \) from \( M_O \), AES decryption is performed to reveal the encrypted object.

### B. Details of Implementation 2

The second implementation uses the publicly available CP-ABE (Ciphertext-Policy Attribute-Based Encryption) toolkit. As this toolkit is currently only available for Linux, the implementation is limited to users (both sharers and receivers) who have a Linux system pre-installed with the CP-ABE toolkit. Additionally, since it is challenging to invoke CP-ABE library functions directly from the browser, users may need to switch between the browser and standalone components, which can disrupt the user interaction flow. This issue could be addressed by developing a browser plugin that interacts with CP-ABE libraries from within the browser.

Another challenge is the encoding of the access tree \( \tau \) within the ciphertext \( CT \), which is unknown, preventing us from perturbing and reconstructing the access tree. To overcome this, we do not remove the original access tree \( \tau \) from the ciphertext \( CT \) before storing it on the server. This affects the surveillance resistance property but not the core access control functionality. These limitations will be addressed in future versions. Hash values in this implementation are computed using SHA1 (available with OpenSSL [23]), and the GUI is built using the Qt widget toolkit [24].

#### Sharing Content
To share a new object, the sharer executes a client-side Qt application. The application takes as input the object to be shared, associated context questions, corresponding answers, the number of contexts \( N \), and the threshold \( k \) (Fig. 8). The object is stored in a file named `message.txt`, and the values of \( N \) and \( k \), along with the questions and hashes of answers, are written to another file, `details.txt`.

The `cpabe-setup` function is called to generate the master key file `master_key` and the public key file `pub_key`. The `cpabe-enc` process encrypts `message.txt` and replaces it with `message.txt.cpabe`. The cURL [25] library is used to upload `details.txt`, `master_key`, `pub_key`, and `message.txt.cpabe` to the server component running on Amazon EC2. If the upload is successful, the server assigns a unique post (or puzzle) identifier, stores the hashes of all context answers in a database, and deletes these hashes from `details.txt`. The server sends a reply containing the post identifier to the client-side application, which prompts the sharer to copy and pass the identifier to a Facebook canvas application. The Facebook application reads the post identifier, generates a hyperlink, and shares it on the sharer’s social network.

#### Receiving Content
When the sharer’s friends (or receivers) see the hyperlink, they can click on it to access the shared data object. This action leads them to the Facebook application, where the server displays the post identifier and prompts the receiver to copy and pass it to a client-side Qt application. The Qt application downloads the corresponding `details.txt` file (with omitted hashed answers) from the server using the cURL library. The application then presents the questions to the receiver. After the receiver answers the questions, the application computes the hash values and sends them back to the server for verification.

If fewer than \( k \) hashed answers match, an error message is returned. If verification succeeds, the server grants access to `message.txt.cpabe`, `master_key`, and `pub_key` files. The Qt application downloads these files and inputs the earlier user-entered answers to the `cpabe-keygen` function to generate the decryption key file `my_priv_key`. The `my_priv_key`, `master_key`, and `pub_key` files are used to decrypt `message.txt.cpabe` using the `cpabe-dec` function. Finally, the Qt application displays the contents of `message.txt` to the receiver (Fig. 9).

### VIII. Evaluation

In this section, we present an evaluation of preliminary performance-related measurements obtained by executing our applications in a controlled setting, along with a discussion of usability issues related to our proposed solution.

#### Experimental Setup
For both implementations, we used a common PC hardware configuration: a quad-core 2.5 GHz CPU, 1 GB RAM, and an 802.11n WLAN interface operating at 60 Mbps. The system runs Ubuntu version 13.04. Performance of the first implementation was also assessed on a Nexus 7 tablet, and compared with the performance on the PC. The latest versions of Firefox were used on both devices. The second implementation could not be benchmarked on the tablet due to its Linux dependency. Experiments were conducted for message lengths of 100 characters, answers of 20 characters, and questions of 50 characters. Measurements were taken for varying numbers \( N \) of contexts, with the threshold \( k \) set to 1. User interaction time was not included in the observations.

#### Implementation 1 vs. Implementation 2 on PC
Figures 10(a) and 10(b) show the breakdown of local processing delay and network delay (including server-side processing) for the sharer and the receiver, respectively. The network delay for Implementation 2 (I2) is significantly higher than for Implementation 1 (I1). In I2, the cURL library uploads four different CP-ABE related files (totaling approximately 600 KB) to the server. The observed network delay in I2 (Figure 10(a)) is due to the large amount of data transferred and the overhead caused by the cURL library. The instability in the measurements, which generally shows increased delay with increasing context size, is likely due to the unpredictability of the communication network speed. Additionally, I2 has slightly higher local processing delay due to the greater computational complexity of CP-ABE. The combined delay in I1 is extremely low for both sharer and receiver, while for I2, it is noticeably high at the sharer and comparatively lower at the receivers.

#### PC vs. Tablet for Implementation 1
Figures 10(c) and 10(d) show the breakdown of local processing delay and network delay for the sharer and receiver, respectively. We observe that I1 performs better on the PC than on the tablet. However, the overheads are insignificantly low on both devices.

#### Usability Aspects
Through the implemented Facebook-compliant prototypes, our goal was to validate the effectiveness and efficiency of the proposed access control mechanisms. Our experimental evaluations indicate that users can successfully and efficiently share data on the Facebook OSN using our prototype applications. However, we currently lack evidence on how intuitive the concept of context-based sharing is to OSN users and what features they expect in such an application.

Understanding the usability aspects of the proposed paradigm is crucial for improving its practical feasibility. To evaluate application usability, we plan to conduct feedback-gathering activities such as focus groups, surveys, user-experience studies, and ergonomic assessments. The ISO standard 9241 Part 11 [26] provides specific guidelines for evaluating applications involving human-computer interactions with respect to effectiveness, efficiency, and satisfaction. We intend to conduct an on-campus survey and user study following the ISO standard 9241 guidelines. We also plan to add additional features to our applications, such as support for non-textual data, picture-based puzzles, and automated client-side context recommendations, to improve ease-of-use and enhance user experience.

### IX. Conclusions

In this paper, we proposed and implemented two novel context-aware access control mechanisms that empower users to regulate access to their shared data in OSN services. Unlike traditional methods that control access based on users or user attributes, our mechanisms focus on controlling access based on the knowledge of the context associated with the data. These mechanisms enable fine-grained access control, improve the relevance of shared data, and protect it against surveillance from curious service providers. We analyzed the security of the proposed mechanisms under various passive and active adversarial scenarios and verified their correctness and performance through empirical evaluations.

### ACKNOWLEDGMENT

The authors would like to thank all the anonymous reviewers for their insightful comments and suggestions.

### REFERENCES

[1] G. A. Fowler, “Facebook: One Billion and Counting,” The Wall Street Journal, October 2012.
[2] R. Gross and A. Acquisti, “Information revelation and privacy in online social networks,” in Proceedings of WPES ’05, 2005.
[3] “Facebook privacy settings.” [Online]. Available: https://www.facebook.com/settings?tab=privacy
[4] M. Johnson, S. Egelman, and S. M. Bellovin, “Facebook and privacy: It’s complicated,” in Proceedings of SOUPS ’12, 2012.
[5] A. Tootoonchian, S. Saroiu, Y. Ganjali, and A. Wolman, “Lockr: better privacy for social networks,” in Proceedings of the 5th international conference on Emerging networking experiments and technologies, 2009.
[6] W. Luo, Q. Xie, and U. Hengartner, “Facecloak: An architecture for user privacy on social networking sites,” in Proceedings of IEEE CSE ’09, 2009.
[7] M. M. Lucas and N. Borisov, “Flybynight: mitigating the privacy risks of social networking,” in Proceedings of WPES’08, 2008.
[8] V. Pouli, J. S. Baras, and A. Arvanitis, “Increasing message relevance in social networks via context-based routing,” in Proceedings of MSM workshop, 2012.
[9] P. Jagtap, A. Joshi, T. Finin, and L. Zavala, “Preserving privacy in context-aware systems,” in Proceedings of ICSC ’11, 2011.
[10] M. Dür, F. Gschwandtner, C. K. Schindhelm, and M. Duchon, “Secure and privacy-preserving cross-layer advertising of location-based social network services,” in Mobile Computing, Applications, and Services, 2012.
[11] J. Li, Y. Tang, C. Mao, H. Lai, and J. Zhu, “Role based access control for social network sites,” in Proceedings of IEEE JCPC’09, 2009.
[12] S. Jahid, P. Mittal, and N. Borisov, “Easier: Encryption-based access control in social networks with efficient revocation,” in Proceedings of ACM ASIACCS’11, 2011.
[13] C.-m. A. Yeung, I. Liccardi, K. Lu, O. Seneviratne, and T. Berners-Lee, “Decentralization: The future of online social networking,” in W3C Workshop on the Future of Social Networking Position Papers, 2009.
[14] F. Beato, M. Kohlweiss, and K. Wouters, “Enforcing access control in social network sites,” Katholieke Universiteit Leuven, Belgium, 2009.
[15] ——, “Scramble! your social network data,” in Proceedings of PETS’11, 2011.
[16] F. Beato, I. Ion, S. Čapkun, B. Preneel, and M. Langheinrich, “For some eyes only: protecting online information sharing,” in Proceedings of ACM CODASPY’13, 2013.
[17] B. Carminati, E. Ferrari, and A. Perego, “Enforcing access control in web-based social networks,” ACM TISSEC, 2009.
[18] A. Shamir, “How to share a secret,” Comm. of ACM, 1979.
[19] J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in IEEE S & P ’07, 2007.
[20] “Amazon EC2.” [Online]. Available: http://aws.amazon.com/ec2
[21] M. Percival, “GibberishAES.” [Online]. Available: https://github.com/mdp/gibberish-aes
[22] “CryptoJS.” [Online]. Available: https://code.google.com/p/crypto-js
[23] “OpenSSL.” [Online]. Available: http://www.openssl.org
[24] “Qt project.” [Online]. Available: http://qt-project.org
[25] “cURL.” [Online]. Available: http://curl.haxx.se
[26] ISO 9241-11:1998 - Ergonomic requirements for office work with visual display terminals (VDTs) - Part 11: Guidance on usability.