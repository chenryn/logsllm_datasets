prototype uses the address of the vPtr pointer as the key
because it is more natural for MPX (i.e., the vPtr pointer
address and its real content). This is not strictly necessary
since OS-CFI nevertheless can detect these attacks.
Instrumentation at ICT Sites
3.4.2
The instrumentation at each ICT site is rather straightforward:
it ﬁrst queries the metadata storage with the key and its content
to retrieve the origin. If the origin exists, it further checks the
corresponding hash table whether the origin and the target are
valid for the ICT site. Use the indirect call as an example, we
need to reconstruct the tuple of ((CSo, Io), Ii, T ). (CSo, Io)
USENIX Association
28th USENIX Security Symposium    201
is the origin fetched from the metadata storage; Ii represents
the address of indirect call instruction; T is the target, i.e., the
value of the function pointer. OS-CFI then queries the hash
table whether this tuple is one of its items. If so, the indirect
call is allowed. For call-site sensitivity, OS-CFI retrieves the
return addresses from the shadow stack and uses a similar
method to verify the target under this context.
3.4.3 Protection of Metadata
The MPX table is protected by ASLR. The 64-bit address
space provides enough entropy to render brute force attacks
diﬃcult, if not impossible. Note that the access to the bounds
directory and tables is implemented by the hardware, similar
to the access to page tables. Particularly, the base of the bounds
directory is stored in a kernel-mode register, inaccessible to
the user space. Therefore, the address of the MPX table will
not be leaked to the user space. This prevents the attacker
from overwriting the metadata stored in the MPX table. We
consider side-channel attacks out-of-scope. A number of
defenses have been proposed to detect/mitigate them [7,45].
If a stronger protection of the MPX table is necessary, we can
use MPX’s bound check to protect it, with a small additional
overhead [4,22]. Note that this use of the bound check does
not conﬂict with OS-CFI’s use of the MPX table since the
bound check can be performed with just the bound registers.
The hash tables for CFGs are protected as the read-only
memory and thus cannot be changed by the attacker. A subtle
attack surface is the temporary data used by the reference
monitors to search the hash tables. Context-sensitive CFI
systems have more complex reference monitors, which have to
use the memory (instead of all registers) to store the temporary
data. This makes them vulnerable to race conditions in a brief
time widow. To address that, we utilize the transactional
memory (Intel TSX) to protect the reference monitors [21].
Speciﬁcally, TSX keeps tracks of the memory accessed by a
transaction and aborts the transaction if any of that memory is
changed by others (e.g., attacks). We enclose each reference
monitor in a transaction and repeat the transaction if it fails
because, with a very low probability, transactions could fail
without attacks (e.g., because of cache conﬂicts).
3.4.4 CFG Address Mapping
Our CFGs are generated using SUPA, a LLVM-based points-to
analysis. The resulting CFGs are accordingly encoded as the
LLVM IR locations. However, the instrumentation requires
the run-time addresses of the CFG nodes. We need to map the
IR locations to the run-time addresses. Previous systems often
use the debug information for this purpose, which works for
function addresses but not as well for call sites because they
are not in the symbol table. To address that, heuristics such as
the code structure are used to infer the locations of call sites.
This approach works most of the time but may not be reliable
Benchmarks
400.perlbench
403.gcc
445.gobmk
447.dealII
450.soplex
453.porvray
471.omnetpp
483.xalancbmk
NGINX
54
46
22
0
0
47
37
0
141
Out of budget
# of ICTs
SUPA
639
544
1645
-
-
317
143
-
1066
Empty points-to sets
# of ICTs
Type
2
20
1
23
157
22
67
349
4
7
107
4
37
11
24
21
29
34
Type
349
218
1637
-
-
79
44
-
102
Table 2: Failed cases of SUPA and the improvements of our
type-based matching. Column 3, 4, and 6 show the largest EC
sizes for SUPA and the type-based matching. SUPA works for
all other benchmarks.
when the compiler optimization is turned on.
OS-CFI solves this problem without using any heuristics.
Speciﬁcally, we insert a custom label after each call instruc-
tion. We then use the label-as-value extension of Clang to
store the label addresses to an array and assign the array to
a custom section. The compiler will automatically convert
these labels to the addresses. Note that the array has to be
marked as used so that the later stages of the compiler will
not optimize it away. These extensions are supported by both
GCC and Clang/LLVM. A beneﬁt of this approach is that
OS-CFI theoretically can support ASLR because the loader
will automatically ﬁx these addresses when the program is
loaded. This resolves the run-time addresses of call sites. For
the rest of the data in the CFGs, we encode the ICT and
origin sites as IDs (speciﬁcally the hashes of their source code
locations) since their concrete values are irrelevant. The target
function addresses are obtained from the symbol table. With
the address mapping information, we can encode the CFGs in
the hash tables.
4 Evaluation
In this section, we evaluate how eﬀectively OS-CFI can im-
prove the security by reducing the largest and average EC
sizes and what is the performance overhead for some standard
benchmarks. We also experimented with real-world exploits
to demonstrate how OS-CFI can block them.
Improvement in Security
4.1
The security of a CFI system can be measured by its CFGs,
assuming the enforcement mechanism does not introduce
imprecision. Particularly, the average and largest EC sizes
reﬂect the overall quality of the CFGs [21]. OS-CFI’s CFGs
are derived from SUPA, a static points-to analysis. Therefore,
the quality of its CFGs are aﬀected by SUPA.
Advancements and issues of SUPA: SUPA is a scalable
and precise context-, ﬂow-, and ﬁeld-sensitive points-to analy-
sis. Public availability of such algorithms is, to the best of our
202    28th USENIX Security Symposium
USENIX Association
knowledge, non-existent before the release of SUPA. Though,
SUPA has its own issues. More speciﬁcally, SUPA is an on-
demand points-to analysis. It allocates a speciﬁc amount of
(conﬁgurable) budgets for each query. We found that, even
with a generous budget on a relatively powerful machine (a
16-core Xeon server with 64GB of memory), SUPA can still
run out of budgets for complex programs, such as gcc and
perlbench. When that happens, SUPA may return wrong
results in the points-to sets (e.g., functions with wrong signa-
tures). In addition, SUPA may return empty results because
of the language features it does not yet support (e.g., C++’s
pointers to member functions). 5 When these issues were
detected, we used a simple type-based matching to ﬁx the
points-to sets.
The results are listed in Table 2. Generally speaking, the
type-based matching can substantially reduce the target sizes
for the failed cases. For example, we can reduce the size of
largest EC size of NGINX returned by SUPA from 1,066 to
just 102. A noticeable exception is gobmk, which has more
than 1,600 address-taken functions with the same signature
((int, int, int, int)). Our manual examination of the
program shows that no ICTs in gobmk should have more than
500 targets.
It is no surprising that SUPA has some issues because
scalable points-to analysis with multiple types of sensitivity
is a hard problem. We suspect SUPA is still more scalable
and/or precise than other publicly available points-to analysis
algorithms, and expect these problems to be solved soon.
However, these issues can put OS-CFI to a disadvantage
currently – our CFGs are generated by piggybacking on the
SUPA as it traverses the SVFG. For these failed cases, SUPA
prematurely stops traversing the graph. Accordingly,we cannot
generate call-site or origin sensitive edges for these failed ICTs.
We instead have to fallback to the context-insensitive CFI for
them. We would like to emphasize that the issues of SUPA
does not invalid the usefulness of origin sensitivity. These are
two orthogonal problems.
Eﬀectiveness of OS-CFI: Table 3 shows how OS-CFI
can signiﬁcantly reduce both the average and largest EC
sizes. This table focuses on measuring the eﬀectiveness of
origin sensitivity; the table thus does not take the ICTs that
SUPA failed to resolve (Table 2) into consideration. We
will present the overall results with all the ICTs in Table 4.
Additionally, Table 3 compares OS-CFI against the context-
insensitive CFG, which can be calculated directly from SUPA’s
points-to sets. It is technically diﬃcult to compare the origin-
sensitive CFG against path-sensitive CFGs, such as these in
PathArmor [38] or PittyPat [14]: they both use online points-to
analysis to calculate the valid targets, with the help of run-time
information; i.e., their CFGs are dynamically generated and
are, most likely, incomplete for a fair comparison. In addition,
the comparison to call-site sensitive CFG has been shown in
5SUPA may also returns empty results for ICTs in the dead code.
Benchmark
# ICTs
400.perlbench
401.bzip2
403.gcc
433.milc
445.gobmk
456.hmmer
464.h264ref
444.namd
447.dealII
450.soplex
453.porvray
471.omnetpp
473.astar
483.xalancbmk
NGINX
79
20
347
4
36
9
367
12
79
317
45
331
1
1492
248
No Context
Avg
Lg
39
23.8
2
2.0
169
30.7
2
2.0
8.1
107
10
2.8
12
2.0
3
2.5
3
2.1
1.0
1
17
9.3
109
5.7
1
1.0
11
2.5
9.4
43
OS-CFI
Avg
2.8
1.0
1.3
1.0
1.5
1.0
1.0
1.0
1.2
1.0
1.6
1.0
1.0
1.0
1.1
Lg
10
1
27
1
12
1
2
1
3
1
5
2
1
1
19
Reduce by
Avg
Lg
74%
88%
50%
50%
84%
96%
50%
50%
82%
89%
90%
64%
83%
50%
67%
60%
0%