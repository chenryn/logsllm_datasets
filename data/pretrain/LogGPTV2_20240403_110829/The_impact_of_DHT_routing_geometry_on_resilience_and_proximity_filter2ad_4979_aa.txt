title:The impact of DHT routing geometry on resilience and proximity
author:P. Krishna Gummadi and
Ramakrishna Gummadi and
Steven D. Gribble and
Sylvia Ratnasamy and
Scott Shenker and
Ion Stoica
The Impact of DHT Routing Geometry on Resilience and
Proximity
K. Gummadi∗, R. Gummadi†, S. Gribble‡, S. Ratnasamy§, S. Shenker¶, I. Stoica(cid:6),
∗
ABSTRACT
The various proposed DHT routing algorithms embody sev-
eral diﬀerent underlying routing geometries. These geome-
tries include hypercubes, rings, tree-like structures, and but-
terﬂy networks.
In this paper we focus on how these ba-
sic geometric approaches aﬀect the resilience and proximity
properties of DHTs. One factor that distinguishes these
geometries is the degree of ﬂexibility they provide in the se-
lection of neighbors and routes. Flexibility is an important
factor in achieving good static resilience and eﬀective prox-
imity neighbor and route selection. Our basic ﬁnding is that,
despite our initial preference for more complex geometries,
the ring geometry allows the greatest ﬂexibility, and hence
achieves the best resilience and proximity performance.
Categories and Subject Descriptors
C.2 [Computer Systems Organisation]: Computer Com-
munication Networks
General Terms
Algorithms, Performance
Keywords
DHT, Routing Geometry, Flexibility
∗
University of Washington. PI:EMAIL
†
USC, Los Angeles. PI:EMAIL
‡
University of Washington. PI:EMAIL
§
Intel Research, Berkeley. PI:EMAIL
¶
ICSI, Berkeley. PI:EMAIL
(cid:6)
∗
UC Berkeley. PI:EMAIL
This work is supported in part by NSF grants CCR-
0121341, ITR-0085670, IIS-0205635, ANI-0196514, ANI-
0207399, ITR-0205519, ITR-0081698, ITR-0121555, ANI-
00225660, ANI-0133811 and Stoica’s Sloan Foundation Fel-
lowship.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
1.
INTRODUCTION
The unexpected and unprecedented explosion of peer-to-
peer ﬁle-sharing, ignited by Napster and refueled by a suc-
cession of less legally vulnerable successors (e.g., Gnutella,
Kazaa), inspired the development of distributed hash ta-
bles (DHTs). DHTs oﬀer a promising combination of ex-
treme scalability (scaling typically as log n) and useful se-
mantics (supporting a hash-table-like lookup interface), and
have been proposed as a substrate for many large-scale dis-
tributed applications (see, for example, [5, 12, 22]).
Our focus here is not on the uses of DHTs but on the un-
derlying DHT routing algorithms. A wide variety of DHT
routing algorithms have been proposed, and the list grows
longer with each passing conference. However, the DHT
routing literature is still very much in its infancy; as a re-
sult, most DHT routing papers describe new algorithms and
very few provide more general insight across algorithms or
usefully compare between algorithms.
In this paper we attempt to take a very small step in this
direction by looking at the basic geometry underlying DHT
routing algorithms and how it impacts their performance in
two important areas: static resilience and proximity routing.
While the current collection of DHT routing algorithms dif-
fers in many respects, perhaps the most fundamental distinc-
tion between them lies in their diﬀerent routing geometries.
For instance, CAN [19] (when the dimension is taken to be
log n) routes along a hypercube, Chord [25] routes along
a ring, Viceroy [14] uses a butterﬂy network, and PRR’s
algorithm [16] uses a tree-like structure. These geometries
have diﬀering degrees of ﬂexibility in choosing neighbors and
next-hop paths. The importance of geometry, and the re-
sulting ﬂexibility, isn’t clear when looking only at the typical
metrics of concern – state (the number of neighbors) and ef-
ﬁciency (the average path length) – because many of these
algorithms can achieve the same state/eﬃciency trade oﬀs.
However, geometry (and ﬂexibility) becomes more relevant
when looking at other performance issues.
One of the crucial questions facing DHTs is whether they
can operate in an extremely transient environment where a
signiﬁcant fraction of the nodes are down at any one time.
There are many facets to this issue, most notably the speed
and overhead of recovery algorithms, but one relatively (but
not completely; see [13, 22]) unexplored area is static re-
silience, which is how well the DHT can route even before
the recovery algorithms have had a chance to work their
magic. We discuss this issue in Section 3.
Another crucial question is how well DHTs can adapt to
the underlying Internet topology. Much research has been
devoted to incorporating proximity into DHT routing pro-
tocols, and there are two areas of concern. The ﬁrst is the
total latency of the DHT routing path, which should be no
more than a small multiple of the underlying Internet la-
tency. We discuss path latency in Section 4. The second is
whether such paths converge; the various tasks of providing
eﬃcient caching, building parsimonious multicast trees, and
ﬁnding the closest server out of many are all made easier if
DHT routing paths have a local convergence property that
we explore in Section 5.
Our paper examines the extent to which geometry impacts
the performance in these two areas, and thus we begin our
paper by discussing geometry in Section 2. However, before
embarking on this discussion, which we hope provides some
insight, we readily confess that our paper is a very initial
stab at the problem and is undoubtedly incomplete. Our
various sins include (1) only picking a few, not all, of the
currently proposed DHT routing algorithms, (2) not consid-
ering factors, such as symmetry, that may aﬀect the state
management overhead and (3) only focusing on two perfor-
mance issues (resilience and proximity), and not considering
interactions between these various properties. Rectifying
these omissions is the subject of future work.
2. GEOMETRIES AND ALGORITHMS
To provide context for the technical material to follow,
we ﬁrst discuss the philosophy that motivates this work. As
noted before, there are a myriad of DHT designs in the liter-
ature, all extensively analyzed and energetically promoted.
However, we envision that there will be only one or a few
very large-scale DHT infrastructures. Thus, out of the cor-
nucopia of routing choices we must select one (or a few) on
which to build future systems. The question is: how do we
make that choice?
One approach is to view these systems as complete coher-
ent proposals and have a bake-oﬀ among them, comparing
their performance in real-world situations. This black-box
approach, which is taken in [1, 24] and elsewhere, compares
the designs as turn-key systems. While this provides per-
formance comparisons for a ﬁxed set of designs and a given
environment, it doesn’t provide much guidance for designing
new DHTs. A very diﬀerent approach is to view each pro-
posal as a set of somewhat independent design choices and
to evaluate the wisdom of each design choice in the hope
that this insight will eventually lead to a superior hybrid
design. This paper adopts the latter approach. Thus, we
do not intend our observations to be rankings of the current
DHT proposals, but rather to be hints about how one might
better design a future DHT routing algorithm.
2.1 Geometries
One can roughly divide DHT design issues into two cate-
gories:
Routing-level This category is conﬁned to two well-deﬁned
issues: neighbor selection – how one picks the set of
neighbors for a node – and route selection – how one
chooses the next hop when routing a message. These
choices determine what we call the routing behavior of
a DHT.
System-level This category contains everything else. These
are higher-level design decisions that apply across all
routing-level choices. Examples of system-level issues
are caching and replication and whether the actual de-
livery of messages is done iteratively or recursively.
Routing-level and system-level choices are not always com-
pletely independent, in that some routing-level design choices
aﬀect the feasibility or performance of a system-level design
choice, but often they are largely orthogonal and should be
treated as such.
Another useful distinction is between the routing algo-
rithm and the routing geometry.
Algorithm This refers to the precise details of how neigh-
bors and next-hops are chosen. Any change in these
details is a change in the routing algorithm.
Geometry This is not a precise term, and we present no
formal deﬁnition, but often the way in which neigh-
bors and routes are chosen has a compelling geomet-
ric interpretation. Conversely, the choice of a routing
geometry constrains the way in which neighbor and
routing choices are made. Small changes to the rout-
ing algorithm do not change the underlying routing
geometry.
Our work here focuses on the impact of routing geome-
try, rather than on the particular algorithmic details. As
noted earlier, most of the current DHT routing proposals
have very clear geometric interpretations. The question is
which properties of these various DHT routing algorithms
derive from their basic choice of geometry, and which can
be altered by small algorithmic changes. Understanding the
constraints and possibilities inherent in an underlying rout-
ing geometry will help guide us when designing future DHT
routing algorithms.
Note that all of these geometries are capable of providing
O(log n) path lengths with O(log n) neighbors (and Viceroy
can improve that to O(1) neighbors). Thus, we don’t focus
on how geometry eﬀects space and eﬃciency. We instead
note that these geometries place very diﬀerent constraints on
route and neighbor selection. The resulting varying degrees
of ﬂexibility each geometry provides has signiﬁcant impact
on the resilience and proximity properties of the system. We
now discuss ﬂexibility in somewhat greater depth.
2.2 Flexibility
Flexibility is nothing more than the algorithmic freedom
left after the basic routing geometry has been chosen. This
freedom is exercised in the selection of neighbors and routes.
We discuss these issues in turn:
2.2.1 Neighbor Selection
DHTs have a routing table comprised of neighbors.
In
the original set of DHT proposals, some algorithms made
this choice of neighbors purely deterministic (i.e., given the
set of identiﬁers in the system, the neighbor tables were
completely determined), and others allowed some freedom
to choose neighbors based on other criteria in addition to
the identiﬁers; most notably, proximity (i.e., latencies) have
been used to select neighbors. However, the question is
not whether the initial proposal included this feature, but
whether the basic routing geometry precludes it. That is,
if the routing geometry precludes choosing neighbors based
on proximity, then that it is a true loss of ﬂexibility; if the
routing geometry allows such a choice, then the omission is
merely a small algorithmic detail that can be changed.
Several DHT proposals make use of what we will call se-
quential neighbors. These are neighbors to which one can
route and be sure of making progress towards all destina-
tions. The leafset in Pastry and the successors in Chord
are examples of sequential neighbors. Some geometries nat-
urally support such sequential neighbors, and some don’t.
Since such neighbors play a crucial role in recovery algo-
rithms, several DHT proposals whose basic geometries don’t
naturally support sequential neighbors have augmented their
design to include them. The result is a somewhat hybrid ge-
ometry.
2.2.2 Route Selection
Given a set of neighbors, and a destination, the routing
algorithm determines the choice of the next hop. However,
ﬂexibility is relevant here, for two reasons. First, when the
determined next-hop is down, ﬂexibility describes how many
other options are there for the next-hop. If there are none,
or only a few, then the routing algorithm is likely to fare
poorly under high failure rates.
Second, analogous to choosing neighbors based on proxim-
ity, one might want to choose next hops based on proximity.
To some extent, this reﬂects the same degree of freedom al-
luded to above (for picking other options under failure) but
it arises in a diﬀerent context.
2.3 Algorithms
We now discuss some basic routing geometries. We do so
by reviewing several DHTs and describing how their rout-
ing algorithm can be interpreted geometrically. We make
special note of the ﬂexibility in neighbor and route selection
provided by these diﬀerent geometries. However, it is im-
portant to note that we consider such ﬂexibility only when
it can be exercised without signiﬁcantly altering the state-
eﬃciency tradeoﬀ for that geometry. For instance, for Chord
we could pick O(n) neighbors and choose routes with O(n)
path lengths with a spectacular degree of ﬂexibility but that
would not represent a desirable design.
In the discussion that follows, we assume systems with n
nodes and log n bit node identiﬁers. In practice, these al-
gorithms typically use log N bit identiﬁers where N (cid:2) n,
so the identiﬁer space is not wholly populated by nodes,
but for clarity and conciseness we assume wholly populated
identiﬁer spaces in the following discussion. Likewise, our
description treats identiﬁers as binary strings but in practice
they will be to some base b. Neither of these assumptions
will aﬀect the correctness of our comments, but both will
help facilitate the presentation.1 Finally, we abuse terminol-
ogy and frequently use the term node to refer to the node’s
identiﬁer.
We consider the following DHTs: PRR [16], CAN [19, 18],
Chord [25], Viceroy [14], Pastry [22] and Kademlia [15]. For
reasons of space and time, there are many algorithms that
we do not consider, among them being Tapestry [28] (though
our discussion of PRR should mostly apply to Tapestry as
well), a recent de Bruijn inspired algorithm [6], and a ran-
domized algorithm due to Kleinberg [11].
2.3.1 Tree
The tree’s hierarchical organization makes it a likely can-
didate for eﬃcient routing, and in fact it is the geometry un-
derlying PRR’s algorithm, which is perhaps the ﬁrst DHT
routing algorithm. The basic routing algorithms in Tapestry
and Pastry are both rather similar in spirit to this original
algorithm although Pastry (as we describe later) also uses a
ring-like geometry in addition to the tree. In a tree geome-
try, node identiﬁers constitute the leaf nodes in a binary tree
of depth log n; the “distance” between any two nodes is the
height of their smallest common subtree. Each node holds
log n neighbors, where the ith neighbor is at distance i from
the given node and routing works by greedy routing towards
the destination. In other words, a node has neighbor nodes
that match each preﬁx of its own identiﬁer but diﬀer in the
next bit. Routing is achieved by successively “correcting”
the highest order bit on which the forwarding node diﬀers
from the destination, eﬀectively increasing the length of the
longest preﬁx match by one at each hop.
We make the following observation on the ﬂexibility a
node has in choosing its neighbors: any given node has
2i−1 options in choosing a neighbor at distance i from it-
self, corresponding to the subtree of nodes that share the
ﬁrst log n − i bits with the given node but diﬀer on the
log n − i + 1 bit. Thus, these “unconstrained” lower or-
der bits give a great deal of freedom in choosing neighbors,
with the amount of freedom increasing exponentially with
increasing distance i. This yields a total of approximately
n(log n)/2(= Πlog n
i=1 2i) possible routing tables per node. Of
course, a node will choose exactly one of these possible rout-
ing tables.
We now consider routing ﬂexibility. Given a particular
choice of routing table, how much ﬂexibility does a node
have in selecting the next hop to a given destination? We
observe that in a tree, a node has only one neighbor that re-
duces the distance to the destination; i.e., only one neighbor
can increase the length of the longest preﬁx match. Thus,
in contrast to the generous ﬂexibility in choosing neighbors,
a tree oﬀers no ﬂexibility in route selection.
2.3.2 Hypercube
The routing used in CAN resembles a hypercube geome-
try. CAN uses a d-torus that is partitioned amongst nodes
such that every node “owns” a distinct zone within the
space. As explained in [18], a CAN node’s identiﬁer is a
binary string representing its position in the space. When
d = log n dimensions the neighbor sets in CAN are exactly
those of a log n-dimensional hypercube.2 Each node has
log n neighbors; neighbor i diﬀers from the given node on
only the ith bit. The “distance” between two nodes is the
number of bits on which their identiﬁers diﬀer and routing
works by greedy forwarding to reduce this distance. Thus
routing is eﬀectively achieved by “correcting” bits on which
forwarding node diﬀers from the destination. The key diﬀer-
ence between routing on the hypercube and the tree is that
the hypercube allows bits to be corrected in any order while
on the tree bits have to be corrected in strictly left-to-right
order. The reason the hypercube can use out-of-order bit
1Our simulation results, presented later in the paper, do not
assume dense identiﬁer space. However, they all use base 2
to allow us to work with reasonable path lengths (typically
6-8 hops); clearly however, our results would be less relevant
for DHTs with very short paths of 1-2 hops [7].
2This hypercube-like interpretation of CAN is also extend-
able to d < log n; however, for the purposes of this paper
we restrict ourselves to the case where CAN has log n di-
mensions and routes in log n hops so that it is more directly
comparable to the other DHTs.
ﬁxing is because, unlike on the tree, a node’s neighbor only
diﬀers from itself on a single bit and hence previous correc-
tions of lower order bits are maintained as higher order bits
are corrected. Thus, the hypercube oﬀers greater ﬂexibility
in route selection. Speciﬁcally, in routing from a source to
destination that are at a distance of log n, the ﬁrst node
has log n next hop choices, the second node has log n − 1
choices, and so on yielding a total of approximately (log n)!
routes between two nodes. Note that each of these paths is
of the same length – they only diﬀer on the order in which
destination bits were ﬁxed. The hypercube however pays a
price for this ﬂexibility in route selection. Because a node’s
neighbors diﬀer from itself on exactly one bit, it has only
one possible choice for each of its neighbors. Thus a node
has no ﬂexibility in selecting its neighbors. This is the oppo-
site of what occurs with the tree, which has much neighbor
selection ﬂexibility but no route selection ﬂexibility.
2.3.3 Butterﬂy
The Viceroy algorithm emulates the operation of a tra-
ditional butterﬂy network but adapts this structure to be
self-organizing and robust in the face of node arrivals and
departures. Viceroy improves on the state-eﬃciency trade-
oﬀ of previously proposed DHTs by routing in O(log n) hops
with constant state at each node. The details of Viceroy are
fairly involved, so we only provide a very sketchy overview.
In a traditional butterﬂy, the nodes are organized in a series
of log n “stages” where all the nodes at stage i are capa-
ble of (essentially) correcting the ith bit in the identiﬁer.
To ensure correctness in the face of node dynamics, Viceroy
imposes a global ordering on all the nodes in the system
and requires each node to hold, as neighbors, its immedi-
ate successor and predecessor in this ordering. A node also
holds, as neighbors, its immediate successor and predeces-
sor from among the nodes in its own stage. Viceroy routing
consists of three phases: the ﬁrst uses O(log n) hops to move
up to the ﬁrst stage, the second uses another O(log n) hops
to traverse down the stages until it reaches the vicinity of
the destination at which point routing enters its third phase
and uses the successor/predecessor neighbors to reach the
destination in a O(log n) additional hops. We note that this
ﬁnal routing phase, which uses O(log n) hops, does not per-
mit ﬂexibility in either route or neighbor selection. Thus,
while the butterﬂy achieves greater eﬃciency than the other
DHTs we consider, it results in far less ﬂexibility. We stress
that this is not a “ﬂaw” in the particular Viceroy design;
rather, we conjecture that this limitation is fundamental to
constant state algorithms.3
2.3.4 Ring
In a Ring geometry, nodes lie on a one-dimensional cyclic
identiﬁer space on which the “distance” from an identiﬁer
A to B is calculated as the clockwise numeric distance from
A to B on the circle.4 Chord embodies such a ring geome-
3Moreover, there are likely ways to restore some ﬂexibility
by keeping more state, but making that state less “critical”
to the operation of the algorithm (and hence not imposing
the same recovery requirement as the critical state). This is
the subject of future work, and we do not pursue it here.
4Diﬀerent ring-based DHTs measure distance on the ring