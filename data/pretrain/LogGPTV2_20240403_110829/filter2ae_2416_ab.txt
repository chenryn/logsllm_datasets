     * 数据库连接参数解析
     * @access private
     * @param  mixed $config 连接参数
     * @return array
     */
    private static function parseConfig($config)
    {
        if (empty($config)) {//进入
            $config = Config::get('database');//跟进，详细的在下面
        } elseif (is_string($config) && false === strpos($config, '/')) {
            $config = Config::get($config); // 支持读取配置参数
        }
        return is_string($config) ? self::parseDsn($config) : $config;
    }
跟进config的get方法
    /**
     * 获取配置参数 为空则获取所有配置
     * @access public
     * @param  string $name 配置参数名（支持二级配置 . 号分割）
     * @param  string $range  作用域
     * @return mixed
     */
    public static function get($name = null, $range = '')//name=database
    {
        $range = $range ?: self::$range;//这个文件自定义了一个静态变量，值是_sys_
        // 无参数时获取所有
        if (empty($name) && isset(self::$config[$range])) {//name不是空，所以跳过这个if
            return self::$config[$range];
        }
        // 非二级配置时直接返回
        if (!strpos($name, '.')) {//name中没有 "."  所以进入
            $name = strtolower($name);//变成小写
            return isset(self::$config[$range][$name]) ? self::$config[$range][$name] : null;
            //如果self::$config[_sys_][database]已经设置返回self::$config[_sys_][database]  否则返回Null
            //$config变量在框架初始化的时候，就已经加载完毕了，
            //关于database的内容就是 application/database.php中的内容
        }
    }
这里提到一个二级配置 看看是个啥东西
就是一个嵌套的数组  
读取二级配置
这里有个 "." 这就对应上了
    if (!strpos($name, '.'))
为啥有点"."就跳过
回到connect方法
    if (empty($options['type'])) {//这里的type是数据库的类型，我这里用的MySQL
                throw new \InvalidArgumentException('Undefined db type');
            }
            $class = false !== strpos($options['type'], '\\') ?
            $options['type'] :
            '\\think\\db\\connector\\' . ucwords($options['type']);
            // 记录初始化信息
            if (App::$debug) {
                Log::record('[ DB ] INIT ' . $options['type'], 'info');//这里会把初始化信息写入日志
            }
            if (true === $name) {//name不等于true，跳过
                $name = md5(serialize($config));
            }
            self::$instance[$name] = new $class($options);//new 一个MySQL类，参数是database中的配置信息
        }
        return self::$instance[$name];//把实例化好的MySQL类返回
    }
$class是MySQL
同样会调用自动加载
然后把文件包含进来
之后进入connection类的初始化方法，因为MySQL类是继承自connection类的，并且MySQL类没有实现初始化方法
    public function __construct(array $config = [])//传过来的config是database.php中的配置参数
    {
        if (!empty($config)) {
            $this->config = array_merge($this->config, $config);//这里进行合并
        }
    }
之后就回到了connect方法，紧接着调用insert方法，
    /**
     * 插入记录
     * @access public
     * @param mixed   $data         数据
     * @param boolean $replace      是否replace
     * @param boolean $getLastInsID 返回自增主键
     * @param string  $sequence     自增序列名
     * @return integer|string
     */
    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)
    {
        // 分析查询表达式
        $options = $this->parseExpress();
跟进parseExpress方法
    /**
     * 分析表达式（可用于查询或者写入操作）
     * @access protected
     * @return array
     */
    protected function parseExpress()
    {
        $options = $this->options;
        // 获取数据表
        if (empty($options['table'])) {//没有设置$option['table']，所以进入if
            $options['table'] = $this->getTable();//获取表名
        }
进入getTable方法，获取表名
    **
     * 得到当前或者指定名称的数据表
     * @access public
     * @param string $name
     * @return string
     */
    public function getTable($name = '')
    {
        if ($name || empty($this->table)) {//name没有设置为空，所以会进入if
            $name      = $name ?: $this->name;//把属性中的name传过来，进行赋值
            $tableName = $this->prefix;//这个prefix是表前缀，没有定义
            if ($name) {//现在name已经不为空了，==》users
                $tableName .= Loader::parseName($name);//这个parseName是命名风格转换，影响不大，跳过
            }
        } else {
            $tableName = $this->table;
        }
        return $tableName;//最后把表名返回
    }
回到parseExpress方法
    if (!isset($options['where'])) {//没有设置，置where字段为空数组
            $options['where'] = [];
        } elseif (isset($options['view'])) {
            // 视图查询条件处理
            foreach (['AND', 'OR'] as $logic) {
                if (isset($options['where'][$logic])) {
                    foreach ($options['where'][$logic] as $key => $val) {
                        if (array_key_exists($key, $options['map'])) {
                            $options['where'][$logic][$options['map'][$key]] = $val;
                            unset($options['where'][$logic][$key]);
                        }
                    }
                }
            }
            if (isset($options['order'])) {//没有设置order字段，直接跳过
                // 视图查询排序处理
                if (is_string($options['order'])) {
                    $options['order'] = explode(',', $options['order']);
                }
                foreach ($options['order'] as $key => $val) {
                    if (is_numeric($key)) {
                        if (strpos($val, ' ')) {
                            list($field, $sort) = explode(' ', $val);
                            if (array_key_exists($field, $options['map'])) {
                                $options['order'][$options['map'][$field]] = $sort;
                                unset($options['order'][$key]);
                            }
                        } elseif (array_key_exists($val, $options['map'])) {
                            $options['order'][$options['map'][$val]] = 'asc';
                            unset($options['order'][$key]);
                        }
                    } elseif (array_key_exists($key, $options['map'])) {
                        $options['order'][$options['map'][$key]] = $val;
                        unset($options['order'][$key]);
                    }
                }
            }
        }
        if (!isset($options['field'])) {//没有设置，置field字段为*
            $options['field'] = '*';
        }
        if (!isset($options['data'])) {
            $options['data'] = [];//置data字段为空数组
        }
        if (!isset($options['strict'])) {
            $options['strict'] = $this->getConfig('fields_strict');//获取数据库的配置参数，
            //这个先是调用query类的getConfig方法，之后再去调用connection类的getConfig方法，获取数据库的配置信息
        }
        foreach (['master', 'lock', 'fetch_pdo', 'fetch_sql', 'distinct'] as $name) {
            //这个foreach循环，大致意思是判断$option中有没有设置对应的单元，没有设置则置为false
            if (!isset($options[$name])) {
                $options[$name] = false;
            }
        }
        foreach (['join', 'union', 'group', 'having', 'limit', 'order', 'force', 'comment'] as $name) {
            //和上面一样，不过这个是置为空字符串
            if (!isset($options[$name])) {
                $options[$name] = '';
            }
        }
        if (isset($options['page'])) {//没有设置，直接跳过
            // 根据页数计算limit
            list($page, $listRows) = $options['page'];
            $page                  = $page > 0 ? $page : 1;
            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);
            $offset                = $listRows * ($page - 1);
            $options['limit']      = $offset . ',' . $listRows;
        }
        $this->options = [];//options属性置为空数组，他和options变量不一样
        return $options;
    }
看下options的内容
回到insert方法，继续往下看
    $data    = array_merge($options['data'], $data);//把option中的data和data数组合并
        // 生成SQL语句
        $sql = $this->builder->insert($data, $options, $replace);//调用builder类的insert方法
跟进 看一下注释就知道这个方法是干啥的了
    **
     * 生成insert SQL
     * @access public
     * @param array     $data 数据
     * @param array     $options 表达式
     * @param bool      $replace 是否replace
     * @return string
     */
    public function insert(array $data, $options = [], $replace = false)
    {
        // 分析并处理数据
        $data = $this->parseData($data, $options);//
    跟进parseData方法，
       /**
     * 数据分析
     * @access protected
     * @param array     $data 数据
     * @param array     $options 查询参数
     * @return array
     * @throws Exception
     */
    protected function parseData($data, $options)
    {
        if (empty($data)) {//data非空，跳过
            return [];
        }
        // 获取绑定信息
        $bind = $this->query->getFieldsBind($options['table']);//进入query类的getFieldsBind方法，
    跟进   getFieldsBind 方法
    // 获取当前数据表绑定信息
    public function getFieldsBind($table = '')//table=users
    {
        $types = $this->getFieldsType($table);//跟进
    跟进getFieldsType方法，
    // 获取当前数据表字段类型
    public function getFieldsType($table = '')
    {
        return $this->getTableInfo($table ?: $this->getOptions('table'), 'type');//跟进
    }
    跟进getTableInfo方法
    /**
     * 获取数据表信息
     * @access public
     * @param mixed  $tableName 数据表名 留空自动获取
     * @param string $fetch     获取信息类型 包括 fields type bind pk
     * @return mixed
     */
    public function getTableInfo($tableName = '', $fetch = '')
    {
        if (!$tableName) {//tablename已经设置，跳过
            $tableName = $this->getTable();
        }
        if (is_array($tableName)) {//不是数组,users  跳过
            $tableName = key($tableName) ?: current($tableName);
        }
        if (strpos($tableName, ',')) {//tablename中没有逗号，跳过
            // 多表不获取字段信息
            return false;