# Ours but They Showed How to Support Conjunction of Statements Cheaper

## 2. Preliminaries

### 2.1 Notation
We use \(\kappa\) and \(\rho\) to denote the computational and statistical security parameters, respectively. The notation \(x \leftarrow S\) indicates that \(x\) is sampled uniformly at random from a finite set \(S\). For \(n \in \mathbb{N}\), we denote by \([n]\) the set \(\{1, \ldots, n\}\). For \(a, b \in \mathbb{Z}\) with \(a \leq b\), we write \([a, b] = \{a, \ldots, b\}\).

We use bold lowercase letters like \(\mathbf{x}\) for column vectors, and denote by \(x_i\) the \(i\)-th component of vector \(\mathbf{x}\), where \(x_1\) is the first entry.

For an extension field \(\mathbb{F}_{p^r}\) of a finite field \(\mathbb{F}_p\), where \(p \geq 2\) is a prime or a power of a prime and \(r \geq 1\) is an integer, we fix some monic, irreducible polynomial \(f(X)\) of degree \(r\) and write \(\mathbb{F}_{p^r} \cong \mathbb{F}_p[X]/(f(X))\). Therefore, every field element \(w \in \mathbb{F}_{p^r}\) can be uniquely represented as:
\[ w = \sum_{h \in [r]} w_h \cdot X^{h-1} \]
with \(w_h \in \mathbb{F}_p\) for all \(h \in [r]\). We can view the elements over \(\mathbb{F}_{p^r}\) equivalently as the vectors in \((\mathbb{F}_p)^r\). When we write arithmetic expressions involving both elements of \(\mathbb{F}_p\) and elements of \(\mathbb{F}_{p^r}\), it is understood that field elements in \(\mathbb{F}_p\) are viewed as the polynomials lying in \(\mathbb{F}_{p^r}\) that have only constant terms.

A circuit \(C\) over \(\mathbb{F}_p\) is defined by a set of input wires \(I_{\text{in}}\), along with a list of gates of the form \((\alpha, \beta, \gamma, T)\), where \(\alpha, \beta\) are the indices of the input wires of the gate, \(\gamma\) is the index of the output wire of the gate, and \(T \in \{\text{Add}, \text{Mult}\}\) is the type of the gate. If \(p = 2\), \(C\) is a Boolean circuit with \(\text{Add} = \oplus\) and \(\text{Mult} = \land\). If \(p > 2\) is a prime or a power of a prime, \(C\) is an arithmetic circuit where \(\text{Add}/\text{Mult}\) corresponds to addition/multiplication in \(\mathbb{F}_p\). We let \(t\) denote the number of multiplication gates in the circuit, and also let \(n = |I_{\text{in}}|\).

A set of \(t\) multivariable polynomials over \(\mathbb{F}_p\) is denoted as \(\{f_1, \ldots, f_t\}\), where each polynomial has degree at most \(d\) and takes the same \(n\) variables \((x_1, \ldots, x_n)\) as input. Every polynomial \(f_i\) can be decomposed as:
\[ f_i = \sum_{h \in [0, d]} f_{i, h} \]
where all terms in \(f_{i, h}\) have degree exactly \(h\). For a vector \(\mathbf{z} = (z_1, \ldots, z_n) \in \mathbb{F}_p^n\), we define \(f_i(\mathbf{z}) = f_i(z_1, \ldots, z_n)\).

Given a polynomial \(f\) over \(\mathbb{F}_p\), we can naturally define a polynomial over \(\mathbb{F}_{p^r}\) by interpreting operations over \(\mathbb{F}_p\) (i.e., additions and multiplications) to be operations over \(\mathbb{F}_{p^r}\).

### 2.2 MACs and Functionalities

#### Information-Theoretic MACs
We use information-theoretic message authentication codes (IT-MACs) [9, 40] to authenticate values over \(\mathbb{F}_p\) or \(\mathbb{F}_{p^r}\). Specifically, let \(\Delta \in \mathbb{F}_{p^r}\) be a global key, which is sampled uniformly at random and known only by one party \(V\).

A value \(x \in \mathbb{F}_p\) or \(\mathbb{F}_{p^r}\) known by the other party \(P\) can be authenticated by giving \(V\) a uniform key \(k \in \mathbb{F}_{p^r}\) and giving \(P\) the corresponding MAC tag \(m = k - \Delta \cdot x \in \mathbb{F}_{p^r}\). We denote such an authenticated value by \([x]\). Note that authenticated values are additively homomorphic. In particular, given the public coefficients \(c_1, \ldots, c_\ell, c \in \mathbb{F}_p\) or \(\mathbb{F}_{p^r}\), the parties can compute:
\[ \sum_{i=1}^\ell c_i \cdot [x_i] + c = \sum_{i=1}^\ell c_i \cdot (k_i - \Delta \cdot x_i) + c = \sum_{i=1}^\ell c_i \cdot k_i - \Delta \cdot \left( \sum_{i=1}^\ell c_i \cdot x_i \right) + c \]

We extend the above notation to vectors of authenticated values as well. In this case, \([\mathbf{x}]\) means that \(P\) holds \(\mathbf{x} \in \mathbb{F}_p^n\) and \(\mathbf{m} \in (\mathbb{F}_{p^r})^n\), while \(V\) holds \(\mathbf{k} \in (\mathbb{F}_{p^r})^n\).

#### Security Model and Functionalities
All our protocols are proven in the universal composability (UC) framework [22] in the presence of a malicious, static adversary. We provide a brief overview of the UC framework in Appendix A. Our ZK functionality is shown in Figure 1. As we provide the protocols for both circuits and polynomial sets, we extend the ZK functionality accordingly.

We use the standard sVOLE functionality [17, 18] shown in Figure 6 of Appendix A to generate authenticated values, where \(P\) obtains \(\mathbf{x} \in \mathbb{F}_p^\ell\) and \(\mathbf{m} \in (\mathbb{F}_{p^r})^\ell\), and \(V\) obtains \(\Delta \in \mathbb{F}_{p^r}\) and \(\mathbf{k} \in (\mathbb{F}_{p^r})^\ell\), such that \(\mathbf{m} = \mathbf{k} - \Delta \cdot \mathbf{x}\). This sVOLE functionality can be efficiently realized using recent LPN-based protocols [17, 41, 48, 49], which have communication complexity sublinear to the number of resulting sVOLE correlations.

## 3. Technical Overview

In this section, we provide the intuition behind our constant-round ZK protocols, and leave the full protocol description, as well as the proofs of security, to later sections.

### 3.1 ZK Proof for Circuits over Any Field

In the previous section, we introduced authenticated values, which can also be viewed as a way for the prover to commit values to the verifier. It is a non-interactive commitment with an interactive preprocessing phase. Given this tool, recent work [3, 25, 48] designed efficient zero-knowledge proofs for circuit satisfiability with high scalability and communication linear to the circuit size. These works all follow the same paradigm below.

1. **Commitment Phase**: The prover \(P\) first commits to all wire values in the circuit to the verifier, which takes \(n + t\) field elements of communication and \(n + t\) number of (s)VOLE correlations, where \(n\) is the input size and \(t\) is the number of multiplication gates. Because the underlying commitment is additively homomorphic, addition gates can be processed for free.

2. **Checking Phase**: Prover \(P\) then proves that the committed values on multiplication gates are correct by executing a checking procedure with the verifier \(V\). This is where prior works differ. The first approach uses the (s)VOLE-based commitment as a black box so they could potentially work with different forms of commitments, while the second approach by LPZK [25] uses the fact that IT-MACs are linear relationships.

**Our ZK Protocol in the Gate-by-Gate Paradigm**: Our protocol in the circuit-based setting can be viewed as a hybrid approach of Wolverine, which uses subfield VOLE to support any field size, and LPZK, which crucially relies on the fact that the VOLE-based commitments are linear relationships.

Similar to prior work, we use a linear scan on the circuit to compute the authenticated values on all the wires in the circuit. In particular, for each multiplication gate, the prover \(P\) has \((w_\alpha, m_\alpha), (w_\beta, m_\beta), (w_\gamma, m_\gamma) \in \mathbb{F}_p \times \mathbb{F}_{p^r}\); the verifier \(V\) holds \(k_\alpha, k_\beta, k_\gamma, \Delta \in \mathbb{F}_{p^r}\) such that the following four equations hold:
\[ w_\gamma = w_\alpha \cdot w_\beta \]
and
\[ m_i = k_i - w_i \cdot \Delta \quad \text{for } i \in \{\alpha, \beta, \gamma\}. \]

If \(P\) is malicious, the first equation could potentially be incorrect, and our task is to check that this relationship holds for all multiplication gates. Although the last three equations are linear from the perspective of the verifier, the first equation is not linear.

The crucial observation is that it is possible to convert the nonlinear checking to a linear checking. Specifically, we observe that for the \(i\)-th multiplication gate with wire values \((w_\alpha, w_\beta, w_\gamma)\), if it is computed correctly (i.e., \(w_\gamma = w_\alpha \cdot w_\beta\)), then we have:
\[ m_\alpha \cdot m_\beta \quad \text{(known to } P \text{)} \]
denoted as \(A_{0,i}\)
\[ = B_i = k_\alpha \cdot k_\beta - k_\gamma \cdot \Delta \quad \text{(known to } V \text{)} \]
\[ = (m_\alpha + w_\alpha \cdot \Delta) \cdot (m_\beta + w_\beta \cdot \Delta) - (m_\gamma + w_\gamma \cdot \Delta) \cdot \Delta \]
\[ = m_\alpha \cdot m_\beta + (w_\beta \cdot m_\alpha + w_\alpha \cdot m_\beta - m_\gamma) \cdot \Delta + (w_\alpha \cdot w_\beta - w_\gamma) \cdot \Delta^2 \]

We can see that the above relationship is now linear and very similar to the IT-MAC relationship. Whatâ€™s more, we also show in Section 4 that if the underlying wire values \((w_\alpha, w_\beta, w_\gamma)\) are not computed correctly, then the above relationship can hold only with probability \(2/p^r\): now it becomes a quadratic equation of \(\Delta\), where there are at most two values of \(\Delta\) that satisfy the equation.

Now, when we look at a circuit with \(t\) multiplication gates, we can obtain one such relationship for each multiplication gate. Namely, for each \(i \in [t]\), \(P\) has \(A_{0,i}, A_{1,i} \in \mathbb{F}_{p^r}\) and \(V\) has \(B_i \in \mathbb{F}_{p^r}\) such that \(B_i = A_{0,i} + A_{1,i} \cdot \Delta\). We can check all \(t\) linear relations in a batch using a random linear combination. In particular, the verifier samples a uniform element \(\chi \in \mathbb{F}_{p^r}\) after the above values have been defined, and then checks that the following relationship holds:
\[ \sum_{i \in [t]} B_i \cdot \chi_i = \sum_{i \in [t]} A_{0,i} \cdot \chi_i + \left( \sum_{i \in [t]} A_{1,i} \cdot \chi_i \right) \cdot \Delta \]

By the verifier sending just one field element (i.e., \(\chi\)), we are able to reduce checking \(t\) equations in the circuit to checking the above single equation, that is \(B = A_0 + A_1 \cdot \Delta\), where \(V\) has \(B\) and \(\Delta\), while \(P\) has \(A_0\) and \(A_1\). This can be easily checked by using a random linear relationship \(B^* = A_0^* + A_1^* \cdot \Delta\) with \(B^*, A_0^*, A_1^* \in \mathbb{F}_{p^r}\) to mask field elements \(A_0\) and \(A_1\), and then opening the masked elements. In particular, \(P\) sends \(U = A_0 + A_0^*\) and \(V = A_1 + A_1^*\) to \(V\), who checks that \(B + B^* = U + V \cdot \Delta\). Finally, this random linear relationship over \(\mathbb{F}_{p^r}\) can be easily obtained by generating subfield VOLE correlations on \(\mathbb{F}_p\) and packing them to \(\mathbb{F}_{p^r}\).

Note that the online phase of the ZK protocol, where the circuit and witness are known, can be made non-interactive by computing \(\chi\) using a random oracle to hash the transcript up to that point. In Section 4, we provide the detailed description of our ZK protocol for circuit satisfiability and prove that it is UC-secure. We report the performance of the protocol in Section 6.

### 3.2 Zero-Knowledge Proof for Polynomial Sets

For Boolean circuits, the above ZK protocol sends only one bit per AND gate in the sVOLE-hybrid model and supports free-XOR. We believe that in the gate-by-gate paradigm, the communication cost is optimal: intuitively, each AND gate has to require some communication when we process each gate individually.

This reminds us of the successful story of garbling, where a progression of research reached the half-gates garbling scheme [50] proven to be optimal in the gate-by-gate paradigm. However, a lower bound is merely a way to rule out certain approaches, and in this case, the garbling lower bound implies that a better garbling scheme either needs to use something beyond random oracle and linear operations, or needs to go beyond the gate-by-gate paradigm and look at more gates as a whole. Indeed, the follow-up works [2, 37, 38] have shown that it is indeed possible to garble a formula more efficiently. In our second protocol, we apply the same philosophy to our ZK protocol for circuit satisfiability.

**Our ZK Protocol: Proving Inner Product with Smaller Cost**

Recall that in the above idea when we prove a multiplication gate with wire values \((x, y, z)\), two parties essentially prove \(f(x, y, z) = x \cdot y - z = 0\). This can be viewed as a degree-2 polynomial on three variables. Let's generalize it to a degree-2 polynomial with more than just one multiplication. Suppose \(f\) is a degree-2 polynomial:
\[ f = \sum_{i \in [n/2]} c_i \cdot x_i \cdot x_{n/2+i} \]

Two parties hold authenticated values \([w_1], \ldots, [w_n]\), and the prover wants to prove \(f(w_1, \ldots, w_n) = 0\). We will follow the similar thinking process as above. In particular, observe that:
\[ f(k_1, \ldots, k_n) = c_0 + \sum_{i \in [n/2]} c_i \cdot k_i \cdot k_{n/2+i} \]
\[ = c_0 + \sum_{i \in [n/2]} c_i \cdot (m_i + w_i \cdot \Delta) \cdot (m_{n/2+i} + w_{n/2+i} \cdot \Delta) \]
\[ = c_0 + \sum_{i \in [n/2]} c_i \cdot (m_i \cdot m_{n/2+i} + (w_{n/2+i} \cdot m_i + w_i \cdot m_{n/2+i} - m_{n/2+i}) \cdot \Delta + (w_i \cdot w_{n/2+i} - w_{n/2+i}) \cdot \Delta^2) \]

Reorganizing the above equation, we can obtain the following equation:
\[ f(k_1, \ldots, k_n) + c_0 \cdot \Delta = \sum_{i \in [n/2]} c_i \cdot m_i \cdot m_{n/2+i} + \sum_{i \in [n/2]} c_i \cdot (w_{n/2+i} \cdot m_i + w_i \cdot m_{n/2+i} - m_{n/2+i}) \cdot \Delta \]

The last equation is due to the fact that \(f(w_1, \ldots, w_n) = c_0 + \sum_{i \in [n/2]} c_i \cdot w_i \cdot w_{n/2+i} = 0\). Reorganizing the above equation, we can obtain the following equation:
\[ f(k_1, \ldots, k_n) + c_0 \cdot \Delta \quad \text{(known to } V \text{)} \]
denoted as \(B\)
\[ = \sum_{i \in [n/2]} c_i \cdot m_i \cdot m_{n/2+i} \quad \text{(known to } P \text{)} \]
denoted as \(A_0\)
\[ + \sum_{i \in [n/2]} c_i \cdot (w_{n/2+i} \cdot m_i + w_i \cdot m_{n/2+i} - m_{n/2+i}) \cdot \Delta \quad \text{(known to } P \text{)} \]
denoted as \(A_1\)

The last equation is due to the fact that \(f(w_1, \ldots, w_n) = c_0 + \sum_{i \in [n/2]} c_i \cdot w_i \cdot w_{n/2+i} = 0\). Reorganizing the above equation a bit, we can obtain the following equation:
\[ f(k_1, \ldots, k_n) + c_0 \cdot \Delta = A_0 + A_1 \cdot \Delta \]

Thus, we can check the above relationship using the same method as described for the circuit-based ZK protocol.