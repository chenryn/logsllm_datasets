the honest nodes, and can be a causal function of the
randomness in the protocol.
• Before a global awake time GAT, A1 determines which
honest nodes are awake/asleep and when. After GAT, all
honest nodes are awake.5 GAT is chosen by A1, unknown
to the honest nodes and can be a causal function of the
randomness in the protocol.
(A2(β),Z2) formalizes the model of P2, a synchronous
network under dynamic participation, with respect to a bound
β on the fraction of awake nodes that are adversarial:
• At all times, A2 is required to deliver all messages sent
between honest nodes in at most ∆ slots.
5Without slightly restricting dynamic participation via a GAT after which
all nodes are awake, this adversary would fall under the CAP theorem so that
no secure protocol against it can exist. In many applications it is realistic that
every now and then there is a period in which all nodes are awake.
6
• At all
times, A2 determines which honest nodes are
awake/asleep and when, subject to the constraint that at
all times at most fraction β of awake nodes are adversarial
and at least one honest node is awake.
We next formalize the notion of safety, liveness and security
after a certain time. For this purpose, we adopt and modify
the security deﬁnition given in [3]. This deﬁnition has a
security parameter σ which in the context of longest-chain
protocols represents the conﬁrmation delay for transactions.
In our analysis, we consider a ﬁnite time horizon of size
polynomial in σ. Note that in the deﬁnition below, LOGt
i
denotes the ledger LOG in view of node i at time t.
Deﬁnition 1. Let Tconﬁrm be a polynomial function of the
security parameter σ. We say that a state machine replication
protocol Π outputting a ledger LOG is secure after time T and
has transaction conﬁrmation time Tconﬁrm if LOG satisﬁes:
• Safety: For any two times t ≥ t(cid:48) ≥ T , and any two honest
nodes i and j awake at times t and t(cid:48) respectively, either
LOGt
• Liveness: If a transaction is received by an awake honest
node at some time t ≥ T , then, for any time t(cid:48) ≥ t +
Tconﬁrm and honest node j that is awake at time t(cid:48), the
transaction will be included in LOGt(cid:48)
j .
j or LOGt(cid:48)
j (cid:22) LOGt
i.
i (cid:22) LOGt(cid:48)
Deﬁnition 1 formalizes the meaning of ‘safety, liveness and
security after a certain time T ’. In general, there it might be
two different times after which a protocol is safe (live). A pro-
tocol that is safe (live) at all times (i.e., after T = 0) is simply
called safe (live) without further qualiﬁcation. With a slight
abuse of notation, we also call a ledger LOG secure/safe/live
to mean that the protocol Π outputting the ledger LOG is
secure/safe/live, respectively.
Now we are ready to deﬁne an ebb-and-ﬂow protocol and its
notion of security. First we deﬁne formally a ﬂexible protocol.
Deﬁnition 2. A ﬂexible protocol is a pair of state machine
replication protocols (Π1, Π2), where Π1 and Π2 have the
same input transactions txs and output ledgers LOG1 and
LOG2, respectively.
Deﬁnition 3. An (β1, β2)-secure ebb-and-ﬂow protocol Π is a
ﬂexible protocol (Πda, Πﬁn) which outputs an available ledger
LOGda and a ﬁnalized ledger LOGﬁn, such that for security
parameter σ (cid:44) Tconﬁrm:
1) P1 - Finality: Under (A1(β1),Z1), LOGﬁn is safe at all
times, and there exists a constant C such that LOGﬁn
is live after time C(max{GST, GAT} + σ) except with
probability negl(σ).
2) P2 - Dynamic Availability: Under (A2(β2),Z2), LOGda
is secure except with probability negl(σ).
3) Preﬁx: For any honest node i and time t, LOGt
ﬁn,i is a
preﬁx of LOGt
da,i.
In the above deﬁnition,
the negligible function negl(·)
decays faster than all polynomials, i.e., ∀c > 0 : ∃σ0 : ∀σ >
σ0 : negl(σ) < σ−c.
Designing a state machine replication protocol Πﬁn that
satisﬁes property P1 is the well-studied problem of designing
partially synchronous BFT protocols; the optimal resilience
that can be achieved is β1 = 1
3. Designing a state machine
replication protocol Πda that satisﬁes property P2 is the
problem of designing dynamically available protocols;
the
2. An ebb-
optimal resilience that can be achieved is β2 = 1
and-ﬂow protocol (Πda, Πﬁn) has a further requirement that
LOGﬁn should be a preﬁx of LOGda; this requires a careful
joint design of (Πda, Πﬁn). We now present a construction for
2 can be simultaneously
which we show that β1 = 1
achieved while respecting the preﬁx constraint.
3 and β2 = 1
B. Protocol
In this section, we give an example of our construction,
Πsac, where we instantiate Πlc with a permissioned longest-
chain protocol and Πbft with a variant of (partially syn-
chronous) Streamlet [12]. Note that all of the longest chain
protocols such as [3]–[7], [32] are suited to instantiate Πlc. For
concreteness, we will follow Sleepy [3] when we get to details.
Streamlet [12] is the latest representative of a line of works
[8], [10], [11], [34] striving to simplify and speed up BFT
consensus. Due to its remarkable simplicity, Streamlet is well-
suited to illustrate our approach. For application requirements,
other BFT protocols might be better suited. We demonstrate
in Section III-D that our technique readily extends to other
BFT protocols such as HotStuff [11] and PBFT [8].
Before we delve into the details of our construction, we
review the basic mechanics of the constituent protocols Πlc
and Πbft
(illustrated in the two boxes of Figure 5). In
permissioned longest chain protocols a cryptographic lottery
rate-limits the production of new blocks ( ? ). Honest block
proposers extend the longest chain (and thus vote for it), and
blocks of a certain depth on the longest chain are conﬁrmed
(
). Streamlet proceeds in epochs of ﬁxed duration, each of
which is associated with a pseudo-randomly chosen leader. At
the beginning of each epoch, the leader proposes a new block
(
). Then,
all nodes vote (
), and the block becomes notarized if at
least two-thirds of the nodes have voted for it. Out of three
adjacent notarized blocks from consecutive epochs, the middle
one gets ﬁnalized (
) extending the longest chain of notarized blocks (
) along with its preﬁx.
For the example construction, we follow the blueprint of
Section I-D but, in line with the protocols adopted for Πlc
and Πbft, choose blockchains as a more suitable representation
for ledgers. The above instantiation leads from the high-level
Figure 1b to the concrete Figure 5 which illustrates the overall
protocol as viewed by node i at time t.
Transactions are received from the environment and held in
i. Batched into blocks, they are ordered by Πlc
the mempool txst
which outputs a blockchain cht
i (comprised of LC blocks and
representing the ledger LOGlc in Figure 1b) of transactions
considered conﬁrmed. Snapshots of ch (which themselves are
chains) are input to and ordered by Πbft which outputs a
blockchain Cht
i (comprised of BFT blocks and representing
the ledger LOGbft in Figure 1b) of snapshots considered ﬁnal.
7
In addition, cht
i is used as side information in Πbft to boycott
the ﬁnalization of invalid snapshots proposed by the adversary.
Finally, Cht
i is ﬂattened (i.e., all snapshots are concatenated as
ordered) and sanitized (i.e., only the ﬁrst valid occurrence of
a transaction remains) to obtain the ﬁnalized ledger LOGt
ﬁn,i,
which is prepended to cht
i and sanitized to form the available
ledger LOGda (see Section III-B3).6
In the following, we provide more explanation for the
following three details, 1) how snapshots are represented
efﬁciently, 2) how Streamlet is modiﬁed to prevent that an
adversary can input an ostensible snapshot which is really un-
conﬁrmed (this would break safety), and 3) how the transaction
ledgers are extracted from the blockchains cht
i and Cht
i.
i and Cht
1) Efﬁcient representation of snapshots: We use (vari-
ants of) the symbols ‘b’ and ‘B’ to refer to blocks in the
blockchains cht
i output by Πlc and Πbft, respectively.
An LC block b contains as payload transactions denoted as
‘b.txs’. Note that due to the blockchain structure, a single
block uniquely identiﬁes a whole chain of blocks, namely
that of its ancestors all the way back to the genesis block.
A snapshot of a blockchain can thus be represented efﬁciently
by pointing to the block at the tip of the chain. Thus, instead
of copying a whole chain of LC blocks into each BFT block,
a BFT block B contains as payload only a reference, denoted
by ‘B.ch’, to an LC block representing the snapshot.
For ledgers and blockchains, ‘(cid:22)’ is canonically deﬁned as
the ‘is a preﬁx of’ relation. As blocks identify chains, the
deﬁnition of ‘(cid:22)’ naturally carries over: for two blocks (cid:91) and
(cid:91)(cid:48), (cid:91) (cid:22) (cid:91)(cid:48) iff the chain identiﬁed by (cid:91) is a preﬁx of the chain
identiﬁed by (cid:91)(cid:48). The depth of a block is the length of the chain
it identiﬁes, excluding the genesis block.
2) Modiﬁcation of Streamlet: With the payload of Streamlet
being snapshots, honest epoch leaders are instructed to, when
they propose a block, take a snapshot of cht
i and include
a reference to its tip as payload in the new BFT block.
Furthermore, Streamlet needs to be modiﬁed to ensure that
an adversary cannot input an ostensible snapshot which is
not really entirely conﬁrmed. To this end, the voting rule of
Streamlet is extended by the following condition: An honest
node only votes for a proposed BFT block B if it views B.ch
as conﬁrmed. In effect, side information about Πlc is used in
Πbft to prevent the ﬁnalization of invalid snapshots proposed
by the adversary. Pseudocode of the overall protocol as exe-
cuted on node i is found in Algorithm 1. Proper functions of
only their inputs and procedures that access global state are de-
noted as ‘Function(...)’ and ‘PROCEDURE(...)’, respectively.
Incoming network messages (new blocks, proposals and votes)
are processed, and the global state is adjusted accordingly,
in line 27. Honest nodes echo messages they receive, see
line 28. As a result, if an honest node observes a message at
time t then all honest nodes will have observed the message
by time max(GST, t + ∆). The additional constraint in the
6Formally, LOGda and LOGﬁn are now represented as sequences of LC
blocks. Proper transactions ledgers are readily obtained by concatenating
the transactions contained in the blocks and removing duplicate and invalid
transactions (sanitization).
Propose:
Network
Vote:
8
Chain
Πbft: Psync-BFT (Streamlet)
Propose:
Vote:
Finalize:
Final chain of chains
Cht
i
Mempool txst
i
Transactions
Πlc: Permissioned-Longest-Chain
Propose & Vote:
Lottery
Conﬁrm:
T -deep LC
?
?
Conﬁrmed chain
cht
i
LOGt
da,i
(cid:44) sanitize(ﬂatten(Cht
i)(cid:107)cht
i)
LOGt
ﬁn,i
(cid:44) sanitize(ﬂatten(Cht
i))
Fig. 5. Example snap-and-chat protocol (cf. Figure 1b) where Πlc is instantiated with permissioned longest chain and Πbft instantiated with Streamlet, as
viewed by node i at time t. Transactions are held in mempool txst
i (representing
LOGlc) of conﬁrmed transactions. Snapshots of ch (which themselves are chains, cf. the magnifying glass) are input to and ordered by Πbft which outputs
a chain Cht
i is used as side information in Πbft to boycott the ﬁnalization of invalid snapshots
(dashed arrow). Finally, Cht
i and sanitized to form the available
ledger LOGda (cf. Figure 6).
i. Batched into blocks, they are ordered by Πlc which outputs a chain cht
i is ﬂattened and sanitized to obtain the ﬁnalized ledger LOGt
i (representing LOGbft) of ﬁnal snapshots. In addition, cht
ﬁn,i, which is prepended to cht
Algorithm 1 Pseudocode of example ebb-and-ﬂow construction with
Sleepy as Πlc and Streamlet as Πbft
i:
Cht
if SleepyIsWinningLotteryTicket(i, t) then
b∗ ← SLEEPYTIPLC()
b ← SleepyNewBlock(b∗, t, i, txst)
BROADCAST(b)
if StreamletEpochLeader(e) = i then
e ← StreamletEpoch(t)
if StreamletIsStartOfProposePhase(t) then
B∗ ← STREAMLETTIPNOTARIZEDLC()
B ← StreamletNewBlock(B∗, e, cht)
P ← StreamletNewProposal(B, i)
BROADCAST(B, P )
end if
else if StreamletIsStartOfVotePhase(t) then
P ← STREAMLETFIRSTVALIDPROPOSAL(e)
if P.B.ch (cid:22) cht then
V ← StreamletNewVote(P.B, i)
BROADCAST(V )
end if
1: procedure LCSLOT(t)
2:
3:
4:
5:
6:
7: end procedure
8: procedure BFTSLOT(t)
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: end procedure
25: procedure MAIN()
26:
27:
28:
29:
30:
31:
32:
33:
34: end procedure
end for
end if
end if
for time slot t ← 1, 2, 3, ... do
PROCESSINCOMINGNETWORKMESSAGES()
ECHOINCOMINGNETWORKMESSAGES()
LCSLOT(t)
cht ← LCCONFIRMEDCHAIN()
BFTSLOT(t)
Cht ← BFTFINALCHAIN()
n
e
t
t
a
l
F
1
1
2
1
2
e
z
i
t
i
n
a
S
1