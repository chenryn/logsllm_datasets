107
Note If you are familiar with C or C++, you know that you can’t use the
remainder operator on float or double values in these languages.
However, C# relaxes this rule. The remainder operator is valid with all
numeric types, and the result is not necessarily an integer. For example,
the result of the expression 7.0 % 2.4 is 2.2.
Numeric types and infinite values
There are one or two other features of numbers in C# about which you
should be aware. For example, the result of dividing any number by
zero is infinity, which is outside the range of the int, long, and decimal
types; consequently, evaluating an expression such as 5/0 results in
error. However, the double and float types actually have a special value
that can represent infinity, and the value of the expression 5.0/0.0 is
Infinity. The one exception to this rule is the value of the expression
0.0/0.0. Usually, if you divide zero by anything, the result is zero, but if
you divide anything by zero, the result is infinity. The expression
0.0/0.0 results in a paradox; the value must be zero and infinity at the
same time. C# has another special value for this situation called NaN,
which stands for “not a number.” So if you evaluate 0.0/0.0, the result is
NaN.
NaN and Infinity propagate through expressions. If you evaluate 10 +
NaN, the result is NaN, and if you evaluate 10 + Infinity, the result is
Infinity. The value of the expression Infinity * 0 is NaN.
Examining arithmetic operators
The following exercise demonstrates how to use the arithmetic operators on
int values.
Run the MathsOperators project
1. Start Visual Studio 2017 if it is not already running.
Download from finelybook PI:EMAIL
108
2. Open the MathsOperators solution, located in the \Microsoft
Press\VCSBS\Chapter 2\ MathsOperators folder in your Documents
folder.
3. On the Debug menu, click Start Debugging.
The following form appears:
4. In the Left Operand box, type 54.
5. In the Right Operand box, type 13.
You can now apply any of the operators to the values in the text boxes.
6. Click the – Subtraction option, and then click Calculate.
The text in the Expression box changes to 54 – 13, but the value 0
appears in the Result box; this is clearly wrong.
7. Click the / Division option, and then click Calculate.
The text in the Expression box changes to 54/13, and again the value 0
appears in the Result box.
8. Click the % Remainder button, and then click Calculate.
The text in the Expression box changes to 54 % 13, but, once again, the
value 0 appears in the Result text box. Test other combinations of
numbers and operators; you will find that they all currently yield the
Download from finelybook PI:EMAIL
109
value 0.
Note If you type a non-integer value into either of the operand
boxes, the application detects an error and displays the message
“Input string was not in a correct format.” You will learn more
about how to catch and handle errors and exceptions in Chapter 6,
“Managing errors and exceptions.”
9. When you have finished, return to Visual Studio and then, on the Debug
menu, click Stop Debugging.
As you might have guessed, none of the calculations are currently
implemented by the MathsOperators application. In the next exercise, you
will correct this.
Perform calculations in the MathsOperators application
1. Display the MainPage.xaml form in the Design View window. (In
Solution Explorer, in the MathsOperators project, double-click the file
MainPage.xaml.)
2. On the View menu, point to Other Windows, and then click Document
Outline.
The Document Outline window appears, showing the names and types
of the controls on the form. The Document Outline window provides a
simple way to locate and select controls on a complex form. The
controls are arranged in a hierarchy, starting with the Page that
constitutes the form. As mentioned in Chapter 1, a Universal Windows
Platform (UWP) app page contains a Grid control, and the other controls
are placed within this Grid. If you expand the Grid node in the
Document Outline window, the other controls appear, starting with
another Grid (the outer Grid acts as a frame, and the inner Grid contains
the controls that you see on the form). If you expand the inner Grid, you
can see each of the controls on the form.
Download from finelybook PI:EMAIL
110
If you click any of these controls, the corresponding element is
highlighted in the Design View window. Similarly, if you select a
control in the Design View window, the corresponding control is
selected in the Document Outline window. (To see this in action, pin the
Document Outline window in place by deselecting the Auto Hide button
in the upper-right corner of the Document Outline window.)
3. On the form, click the two TextBox controls into which the user types
numbers. In the Document Outline window, verify that they are named
lhsOperand and rhsOperand.
When the form runs, the Text property of each of these controls holds
the values that the user enters.
4. Toward the bottom of the form, verify that the TextBlock control used to
display the expression being evaluated is named expression and that the
TextBlock control used to display the result of the calculation is named
result.
5. Close the Document Outline window.
Download from finelybook PI:EMAIL
111
6. On the View menu, click Code to display the code for the
MainPage.xaml.cs file in the Code and Text Editor window.
7. In the Code and Text Editor window, locate the addValues method. It
looks like this:
Click here to view code image
private void addValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
 // TODO: Add rhs to lhs and store the result in outcome
 expression.Text = $"{lhsOperand.Text} + {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
The first statement in this method declares an int variable called lhs and
initializes it with the integer corresponding to the value typed by the
user in the lhsOperand box. Remember that the Text property of a
TextBox control contains a string, but lhs is an int, so you must convert
this string to an integer before you can assign it to lhs. The int data type
provides the int.Parse method, which does precisely this.
The second statement declares an int variable called rhs and initializes it
to the value in the rhsOperand box after converting it to an int.
The third statement declares an int variable called outcome.
A comment stating that you need to add rhs to lhs and store the result in
outcome follows. This is the missing bit of code that you need to
implement, which you will do in the next step.
The fifth statement uses string interpolation to construct a string that
indicates the calculation being performed and assigns the result to the
expression.Text property. This causes the string to appear in the
Expression box on the form.
The final statement displays the result of the calculation by assigning it
to the Text property of the Result box. Remember that the Text property
is a string, and the result of the calculation is an int, so you must convert
the int to a string before assigning it to the Text property. Recall that this
is what the ToString method of the int type does.
Download from finelybook PI:EMAIL
112
8. Below the comment in the middle of the addValues method, add the
following statement (shown below in bold):
Click here to view code image
private void addValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
 // TODO: Add rhs to lhs and store the result in outcome
 outcome = lhs + rhs;
 expression.Text = $"{lhsOperand.Text} + {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
This statement evaluates the expression lhs + rhs and stores the result in
outcome.
9. Examine the subtractValues method. You should see that it follows a
similar pattern. Here you need to add the statement to calculate the result
of subtracting rhs from lhs and store it in outcome. Add the following
statement (in bold) to this method:
Click here to view code image
private void subtractValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
 // TODO: Subtract rhs from lhs and store the result in outcome
 outcome = lhs - rhs;
 expression.Text = $"{lhsOperand.Text} - {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
10. Examine the multiplyValues, divideValues, and remainderValues
methods. Again, they are all missing the crucial statement that performs
the specified calculation. Add the appropriate statements to these
methods (shown in bold).
Click here to view code image
private void multiplyValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
Download from finelybook PI:EMAIL
113
 // TODO: Multiply lhs by rhs and store the result in outcome
 outcome = lhs * rhs;
 expression.Text = $"{lhsOperand.Text} * {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
private void divideValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
 // TODO: Divide lhs by rhs and store the result in outcome
 outcome = lhs / rhs;
 expression.Text = $"{lhsOperand.Text} / {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
private void remainderValues()
{
 int lhs = int.Parse(lhsOperand.Text);
 int rhs = int.Parse(rhsOperand.Text);
 int outcome = 0;
 // TODO: Work out the remainder after dividing lhs by rhs and
store the result in outcome
 outcome = lhs % rhs;
 expression.Text = $"{lhsOperand.Text} % {rhsOperand.Text}";
 result.Text = outcome.ToString();
}
Test the MathsOperators application
1. On the Debug menu, click Start Debugging to build and run the
application.
2. Type 54 in the Left Operand box, type 13 in the Right Operand box,
click the + Addition option and then click Calculate.
3. The value 67 should appear in the Result box.
4. Click the – Subtraction option, and then click Calculate. Verify that the
result is now 41.
5. Click the * Multiplication option, and then click Calculate. Verify that
the result is now 702.
6. Click the / Division option, and then click Calculate. Verify that the
result is now 4.
Download from finelybook PI:EMAIL
114
In real life, 54/13 is 4.153846 recurring, but this is not real life, this is
C# performing integer division. When you divide one integer by another
integer, the answer you get back is an integer, as explained earlier.
7. Click the % Remainder option, and then click Calculate. Verify that the
result is now 2.
When dealing with integers, the remainder after dividing 54 by 13 is 2;
(54 – ((54/13) * 13)) is 2. This is because the calculation rounds down to
an integer at each stage. (My high school math teacher would be
horrified to be told that (54/13) * 13 does not equal 54!)
8. Return to Visual Studio and stop debugging.
Controlling precedence
Precedence governs the order in which an expression’s operators are
evaluated. Consider the following expression, which uses the + and *
operators:
2 + 3 * 4
This expression is potentially ambiguous: Do you perform the addition
first or the multiplication? The order of the operations matters because it
changes the result:
If you perform the addition first, followed by the multiplication, the
result of the addition  (2 + 3) forms the left operand of the * operator,
and the result of the whole expression is 5 * 4, which is 20.
If you perform the multiplication first, followed by the addition, the
result of the multiplication (3 * 4) forms the right operand of the +
operator, and the result of the whole expression is  2 + 12, which is 14.
In C#, the multiplicative operators (*, /, and %) have precedence over the
additive operators  (+ and –), so in expressions such as 2 + 3 * 4, the
multiplication is performed first, followed by the addition. The answer to 2 +
3 * 4 is therefore 14.
You can use parentheses to override precedence and force operands to
bind to operators in a different way. For example, in the following
expression, the parentheses force the 2 and the 3 to bind to the + operator
Download from finelybook PI:EMAIL
115
(making 5), and the result of this addition forms the left operand of the *
operator to produce the value 20:
(2 + 3) * 4
Note The term parentheses or round brackets refers to (). The term
braces or curly brackets refers to { }. The term square brackets refers to
[ ].
Using associativity to evaluate expressions
Operator precedence is only half the story. What happens when an expression
contains different operators that have the same precedence? This is where
associativity becomes important. Associativity is the direction (left or right)
in which the operands of an operator are evaluated. Consider the following
expression that uses the / and * operators:
4 / 2 * 6
At first glance, this expression is potentially ambiguous. Do you perform
the division first or the multiplication? The precedence of both operators is
the same (they are both multiplicatives), but the order in which the operators
in the expression are applied is important because you can get two different
results:
If you perform the division first, the result of the division (4/2) forms
the left operand of the * operator, and the result of the whole
expression is (4/2) * 6, or 12.
If you perform the multiplication first, the result of the multiplication
(2 * 6) forms the right operand of the / operator, and the result of the
whole expression is 4/(2 * 6), or 4/12.
In this case, the associativity of the operators determines how the
expression is evaluated. The  * and / operators are both left associative, which
means that the operands are evaluated from left to right. In this case, 4/2 will
Download from finelybook PI:EMAIL
116
be evaluated before multiplying by 6, giving the result 12.
Associativity and the assignment operator
In C#, the equal sign (=) is an operator. All operators return a value based on
their operands. The assignment operator = is no different. It takes two
operands: the operand on the right side is evaluated and then stored in the
operand on the left side. The value of the assignment operator is the value
that was assigned to the left operand. For example, in the following
assignment statement, the value returned by the assignment operator is 10,
which is also the value assigned to the variable myInt:
Click here to view code image
int myInt;
myInt = 10; // value of assignment expression is 10
At this point, you might be thinking that this is all very nice and esoteric,
but so what? Well, because the assignment operator returns a value, you can
use this same value with another occurrence of the assignment statement, like
this:
int myInt;
int myInt2;
myInt2 = myInt = 10;
The value assigned to the variable myInt2 is the value that was assigned to
myInt. The assignment statement assigns the same value to both variables.
This technique is useful if you want to initialize several variables to the same
value. It makes it very clear to anyone reading your code that all the variables
must have the same value:
Click here to view code image
myInt5 = myInt4 = myInt3 = myInt2 = myInt = 10;
From this discussion, you can probably deduce that the assignment
operator associates from right to left. The right-most assignment occurs first,
and the value assigned propagates through the variables from right to left. If
any of the variables previously had a value, it is overwritten by the value
being assigned.
You should treat this construct with caution, however. One frequent
Download from finelybook PI:EMAIL
117
mistake that new C# programmers make is to try to combine this use of the
assignment operator with variable declarations. For example, you might
expect the following code to create and initialize three variables with the
same value (10):
Click here to view code image
int myInt, myInt2, myInt3 = 10;
This is legal C# code (because it compiles). What it does is declare the
variables myInt, myInt2, and myInt3 and initialize myInt3 with the value 10.
However, it does not initialize myInt or myInt2. If you try to use myInt or
myInt2 in an expression such as
myInt3 = myInt / myInt2;
the compiler generates the following errors:
Click here to view code image
Use of unassigned local variable 'myInt'
Use of unassigned local variable 'myInt2'
Incrementing and decrementing variables
If you want to add 1 to a variable, you can use the + operator, as
demonstrated here:
count = count + 1;
However, adding 1 to a variable is so common that C# provides its own
operator just for this purpose: the ++ operator. To increment the variable
count by 1, you can write the following statement:
count++;
Similarly, C# provides the -- operator that you can use to subtract 1 from a
variable, like this:
count--;
The ++ and -- operators are unary operators, meaning that they take only a
single operand. They share the same precedence and are both left associative.
Download from finelybook PI:EMAIL
118
Prefix and postfix
The increment (++) and decrement (--) operators are unusual in that you can
place them either before or after the variable. Placing the operator symbol
before the variable is called the prefix form of the operator, and using the
operator symbol after the variable is called the postfix form. Here are
examples:
Click here to view code image
count++; // postfix increment
++count; // prefix increment
count--; // postfix decrement
--count; // prefix decrement
Whether you use the prefix or postfix form of the ++ or -- operator makes
no difference to the variable being incremented or decremented. For example,
if you write count++, the value of count increases by 1, and if you write
++count, the value of count also increases by 1. Knowing this, you’re
probably wondering why there are two ways to write the same thing. To
understand the answer, you must remember that ++ and -- are operators and
that all operators are used to evaluate an expression that has a value. The
value returned by count++ is the value of count before the increment takes
place, whereas the value returned by ++count is the value of count after the
increment takes place. Here is an example:
Click here to view code image
int x;
x = 42;
Console.WriteLine(x++); // x is now 43, 42 written out
x = 42;
Console.WriteLine(++x); // x is now 43, 43 written out
The way to remember which operand does what is to look at the order of
the elements (the operand and the operator) in a prefix or postfix expression.
In the expression x++, the variable x occurs first, so its value is used as the
value of the expression before x is incremented. In the expression ++x, the
operator occurs first, so its operation is performed before the value of x is
evaluated as the result.
These operators are most commonly used in while and do statements,
which are presented in Chapter 5, “Using compound assignment and iteration
statements.” If you are using the increment and decrement operators in
Download from finelybook PI:EMAIL
119
isolation, stick to the postfix form and be consistent.
Declaring implicitly typed local variables
Earlier in this chapter, you saw that you declare a variable by specifying a
data type and an identifier, like this:
int myInt;
It was also mentioned that you should assign a value to a variable before
you attempt to use it. You can declare and initialize a variable in the same
statement, such as illustrated in the following:
int myInt = 99;
Or, you can even do it like this, assuming that myOtherInt is an initialized
integer variable:
int myInt = myOtherInt * 99;
Now, remember that the value you assign to a variable must be of the
same type as the variable. For example, you can assign an int value only to an
int variable. The C# compiler can quickly work out the type of an expression
used to initialize a variable and indicate whether it does not match the type of
the variable. You can also ask the C# compiler to infer the type of a variable
from an expression and use this type when declaring the variable by using the
var keyword in place of the type, as demonstrated here:
Click here to view code image
var myVariable = 99;
var myOtherVariable = "Hello";
The variables myVariable and myOtherVariable are referred to as
implicitly typed variables. The var keyword causes the compiler to deduce the
type of the variables from the types of the expressions used to initialize them.
In these examples, myVariable is an int, and myOtherVariable is a string.
However, it is important for you to understand that this is a convenience for
declaring variables only. After a variable has been declared, you can assign
only values of the inferred type to it. For example, you cannot assign float,
double, or string values to myVariable at a later point in your program. You
should also understand that you can use the var keyword only when you
Download from finelybook PI:EMAIL
120
supply an expression to initialize a variable. The following declaration is
illegal and causes a compilation error:
Click here to view code image
var yetAnotherVariable; // Error - compiler cannot infer type
Important If you have programmed with Visual Basic in the past, you
might be familiar with the Variant type, which you can use to store any
type of value in a variable. I emphasize here and now that you should
forget everything you ever learned when programming with Visual
Basic about Variant variables. Although the keywords look similar, var
and Variant mean totally different things. When you declare a variable
in C# by using the var keyword, the type of values that you assign to the
variable cannot change from that used to initialize the variable.
If you are a purist, you are probably gritting your teeth at this point and