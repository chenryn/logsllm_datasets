Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
952
DPC.GenAddress
Input: public parameters pp
Output: addr. key pair (apk, ask)
DPC.Setup
Input: security parameter 1Œª
Output: public parameters pp
DPC.ExecuteL
Input:
‚Ä¢ public parameters pp
records [ri]m
‚Ä¢ old
address secret keys [aski]m
address public keys [apkj]n
record payloads [payloadj]n
record birth predicates [Œ¶b,j]n
record death predicates [Œ¶d,j]n
(cid:2)
‚éß‚é™‚é®
‚é™‚é©
‚Ä¢ new
1
1
1
1
1
1
‚Ä¢ auxiliary predicate input aux
‚Ä¢ transaction memorandum memo
Output: new records [rj]n
DPC.VerifyL
Input: public parameters pp and transaction tx
Output: decision bit b
1 and transaction tx
Fig. 1: Algorithms of a DPC scheme.
of separate game-based deÔ¨Ånitions as in [BCG+14]). The full
version contains our proof of security for this construction.
Data structures. A record is a data structure representing
a unit of data in our system. Each record is associated with
an address public key, which is a commitment to a seed for a
pseudorandom function acting as the corresponding address
secret key; addresses determine ownership of records, and in
particular consuming a record requires knowing its secret key.
A record itself consists of an address public key, a data payload,
a birth predicate, a death predicate, and a serial number nonce
and a record commitment that is a commitment to all of these
attributes. The serial number of this record is the evaluation
of a pseudorandom function, seeded with the record‚Äôs address
secret key and evaluated at the record‚Äôs serial number nonce.
The record‚Äôs commitment and serial number, which appear
on the ledger when the record is created and consumed
respectively, reveal no information about the record attributes.
This follows from the hiding property of the commitment, and
the pseudorandom nature of the serial number. The derivation
of a record‚Äôs serial number ensures that a user can create a
record for another in such a way that its serial number is fully
determined and yet cannot be predicted without knowing the
other user‚Äôs secret key. All the above is summarized in Fig. 2.
Records can be created and consumed via transactions, which
represent state changes in the system. Each transaction in the
ledger consumes some old records and creates new records in
a manner that is consistent with the records nano-kernel. To
ensure privacy, a transaction only contains serial numbers of the
consumed records, commitments of the created records, and a
zero knowledge proof attesting that there exist records consistent
with this information (and with the records nano-kernel). All
commitments on the ledger are collected in a Merkle tree,
which facilitates eÔ¨Éciently proving that a commitment appears
on the ledger (by proving in zero knowledge the knowledge
of a suitable authentication path). All serial numbers on the
ledger are collected in a list that cannot contain duplicates. This
implies that a record cannot be consumed twice because the
record r
cm
record commitment
Commit
apk
address 
public key
payload
data 
payload
Œ¶d
Œ¶b
birth & death 
predicates
ùùÜ
serial number 
nonce
Commit
address secret key ask
PRF secret key
skPRF
Fig. 2: Construction of a record.
serial 
number
sn
PRF
CRH
unique info from 
tx that created r
same serial number is revealed each time a record is consumed.
See Fig. 3.
ledger 
digest
...
all record commitments
...
all serial numbers
ledger
L
tx1 tx2 ...
tx ...
txt
sn1,...,snm
serial numbers 
of old records
memo
cm1,...,cmn
commitments 
of new records
Fig. 3: Construction of a transaction.
transaction 
memorandum
stL
ledger 
digest
ùõë
zkSNARK
System usage. To set up the system, a trusted party invokes
DPC.Setup to produce the public parameters for the system.
Later, users can invoke DPC.GenAddress to create address key
pairs. In order to create and consume records, i.e., to produce a
transaction, a user Ô¨Årst selects some previously-created records
to consume, assembles some new records to create (including
their payloads and predicates), and decides on other aspects
of the local data such as the transaction memorandum (shared
memory seen by all predicates and published on the ledger)
and the auxiliary input (shared memory seen by all predicates
but not published on the ledger); see Fig. 4. If the user
knows the secret keys of the records to consume and if all
relevant predicates are satisÔ¨Åed (death predicates of old records
and birth predicates of new predicates), then the user can
invoke DPC.Execute to produce a transaction containing a
zero knowledge proof that attests to these conditions. See
Fig. 5 for a summary of Re, the NP statement being proved.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
953
Finally, nodes maintaining the ledger use DPC.Verify to check
whether a candidate transaction is valid.
In sum, a transaction only reveals the number of consumed
records and number of created records, as well as any data
that was deliberately revealed in the transaction memorandum
(possibly nothing).6
local data for predicate (ldata)
record 
commitment
data 
from old 
records
data 
from new 
records
cmold,1
‚ãÆ
cmold,m
cmnew,1
‚ãÆ
cmnew,n
serial 
numbers
snold,1
address 
public keys
data 
payloads
apkold,1
payloadold,1
descriptions 
of birth/death predicates
(cid:18527)Œ¶b,old,1(cid:18528)
(cid:18527)Œ¶d,old,1(cid:18528)
‚ãÆ
‚ãÆ
‚ãÆ
‚ãÆ
‚ãÆ
snold,m
n/a
apkold,m
apknew,1
payloadold,m
payloadnew,1
(cid:18527)Œ¶b,old,m(cid:18528)
(cid:18527)Œ¶b,new,1(cid:18528)
(cid:18527)Œ¶d,old,m(cid:18528)
(cid:18527)Œ¶d,new,1(cid:18528)
‚ãÆ
‚ãÆ
‚ãÆ
‚ãÆ
apknew,n
payloadnew,n
(cid:18527)Œ¶b,new,m(cid:18528)
(cid:18527)Œ¶d,new,m(cid:18528)
transaction 
memorandum memo
common 
aux input
aux
old death predicates
new birth predicates
Œ¶d,old,1(ldata) = (cid:42247) = Œ¶d,old,m(ldata) = 1
Œ¶b,new,1(ldata) = (cid:42247) = Œ¶b,new,n(ldata) = 1
Fig. 4: Predicates receive local data.
serial numbers 
of old records
sn1,...,snm
commitments 
of new records
cm1,...,cmn
transaction 
memorandum
memo
ledger 
digest
stL
zkSNARK
ùõë
old records (rold,1, ..., rold,m) 
‚àÉ 
old secret keys (askold,1, ..., askold,m) 
new records (rnew,1, ..., rnew,n) 
auxiliary input aux
such that
each old record rold,i 
    - has a commitment that is in a ledger with digest stL 
    - is owned by secret key askold,i 
    - has serial number sni
each new record rnew,j has commitment cmj
each old death predicate Œ¶old,d,i (in rold,i) is satisfied by local data 
each new birth predicate Œ¶new,b,j (in rnew,j) is satisfied by local data
Fig. 5: The execute statement.
Achieving succinctness. Our discussions so far have focused
on achieving (data and function) privacy. However, we also
want to achieve succinctness, namely, that a transaction can be
validated in ‚Äúconstant time‚Äù. This follows from a straightforward
modiÔ¨Åcation: we take the protocol that we have designed so far
and use a zero knowledge succinct argument rather than just
any zero knowledge proof. Indeed, the NP statement Re being
proved involves attesting the satisÔ¨Åability of all (old) death
and (new) birth predicates, and so we need to ensure that the
time needed to verify the corresponding proof does not depend
on the complexity of these predicates. While turning this idea
into an eÔ¨Écient implementation requires more ideas (as we
discuss in Section IV), the foregoing modiÔ¨Åcation suÔ¨Éces from
a theoretical point of view.
6By supporting the use of dummy records, we can in fact ensure that only
upper bounds on the foregoing numbers are revealed.
IV. Achieving an efficient implementation
Our system Zexe (Zero knowledge EXEcution) implements
our construction of a DPC scheme (see Section III-B and Ap-
pendix B). Achieving eÔ¨Éciency in our system required overcom-
ing several challenges. Below we adopt a ‚Äúproblem-solution‚Äù
format to highlight some of these challenges and explain how
we addressed them.
Problem 1: universality is expensive. The NP statement Re
that we need to prove involves checking user-deÔ¨Åned predicates,
so it must support arbitrary computations that are not Ô¨Åxed
in advance. However, state-of-the-art zkSNARKs for universal
computations rely on expensive tools [BCG+13; BCT+14;
WSR+15; BCT+17]. Using such ‚Äúheavy duty‚Äù proof systems
would make the system costly for all users, including those that
produce transactions that attest to simple inexpensive predicates.
Solution 1: recursive proof veriÔ¨Åcation. We address this
problem by relying on one layer of recursive proof composition
[Val08; BCC+13]. Instead of tasking the NP statement with
directly checking user-deÔ¨Åned predicates, we only task it with
checking succinct proofs attesting to the satisfaction of the
same. Checking these succinct predicate proofs is a (relatively)
inexpensive computation that is Ô¨Åxed for all predicates, and
which can be ‚Äúhardcoded‚Äù in Re. Since the single succinct
proof produced for Re does not reveal information about the
predicate proofs (thanks to zero knowledge), the predicate
proofs do not have to hide what predicate was checked, and
hence can be specialized for particular user-deÔ¨Åned predicates.
This approach further ensures that a user only has to incur the
cost of proving satisÔ¨Åability of the speciÔ¨Åc predicates involved
in her transactions, regardless of the complexity of predicates
used by other users in their transactions.
Problem 2: recursion is expensive. Recursive proof composi-
tion has so far been empirically demonstrated for pairing-based
SNARKs [BCT+17] as these have proofs that are extremely
short and cheap to verify. We thus focus our attention on these,
and explain the eÔ¨Éciency challenges that we must overcome
in our setting. Recall that pairings are instantiated via elliptic
curves of small embedding degree. If we instantiate a SNARK‚Äôs
pairing via an elliptic curve E deÔ¨Åned over a prime Ô¨Åeld Fq and
having a subgroup of large prime order r, then (a) the SNARK
supports NP statements expressed as arithmetic circuits over
Fr, while (b) proof veriÔ¨Åcation involves arithmetic operations
over Fq. This means that we need to express Re via arithmetic
circuits over Fr. In turn, since the SNARK veriÔ¨Åer is part of
Re, this means that we need to also express the veriÔ¨Åer via
an arithmetic circuit over Fr, which is problematic because
the veriÔ¨Åer‚Äôs ‚Äúnative‚Äù operations are over Fq. Simulating Fq
operations via Fr operations is expensive, and one cannot avoid
simulation by picking E such that q = r [BCT+17].
Prior work overcomes this by using multiple curves
[BCT+17]. SpeciÔ¨Åcally, Ben-Sasson et al. distribute the re-
cursion across a two-cycle of pairing-friendly elliptic curves,
which is a pair of prime-order curves E1 and E2 such that the
size of one‚Äôs base Ô¨Åeld is the order of the other‚Äôs subgroup.
This ensures that a SNARK over E1 can be veriÔ¨Åed by a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
954
SNARK over E2, and vice versa. However, known cycles are
ineÔ¨Écient at 128 bits of security [BCT+17; CCW19].
Solution 2: tailored set of curves.
In our setting we merely
need ‚Äúa proof of a proof‚Äù, with the latter proof not itself
depending on further proofs. This implies that we do not
actually need a cycle of pairing-friendly elliptic curves (which
enables recursion of arbitrary depth), but rather only a ‚Äútwo-
chain‚Äù of two curves E1 and E2 such that the size of the base
Ô¨Åeld of E1 is the size of the prime order subgroup of E2. We
can use the Cocks‚ÄìPinch method [FST10] to set up such a
bounded recursion [BCT+17]. We now elaborate on this.
First, we pick a pairing-friendly elliptic curve E1 that not
only is suitable for 128 bits of security, but moreover, enables
eÔ¨Écient SNARK provers at both levels of the recursion. Namely,
letting p be the prime order of E1‚Äôs base Ô¨Åeld and r the
prime order of the group, we need that both Fr and Fp have
multiplicative subgroups whose orders are large powers of 2.
The condition on Fr ensures eÔ¨Écient proving for SNARKs
over E1, while the condition on Fp ensures eÔ¨Écient proving
for SNARKs that verify proofs over E1. In light of the above,
we set E1 to be EBLS, a curve from the Barreto‚ÄìLynn‚ÄìScott
(BLS) family [BLS02; CLN11] with embedding degree 12.
This family can be implemented at 128 bits of security very
eÔ¨Éciently [AFK+12]. We ensure that both Fr and Fp have