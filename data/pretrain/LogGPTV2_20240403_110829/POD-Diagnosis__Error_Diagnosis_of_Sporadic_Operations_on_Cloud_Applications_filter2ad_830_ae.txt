### Different Types of Error Responses from Various Systems

When handling exceptions, the system often has only local information rather than a global view when an exception is caught. This limitation underscores the need for runtime external monitoring, diagnosis, and recovery mechanisms.

### Resource Provisioning Mechanisms

Most configuration management tools, such as CFEngine, and infrastructure-as-code tools like AWS CloudFormation, use a convergence-based or declarative approach. These tools continuously retry and wait until the desired state is achieved, or they exit if the configuration is non-prescriptive or behind a black box engine. In such cases, diagnosing intermediate errors can be challenging.

### B. Configuration Error Detection and Diagnosis

#### Execution Order Errors

Cloud Confdiagnoser is designed to identify and diagnose error symptoms. Traditional operations often involve changing configurations, leading to a variety of configuration error detection and diagnosis tools and research.

- **[12]**: This method uses static analysis, dynamic profiling, and statistical analysis to link undesired behavior to specific configuration options. It can diagnose both crashing and non-crashing configuration errors but requires instrumentation around the configuration options in the source code and does not identify the root cause.
  
- **ConfAid [13]**: Utilizes information-flow tracking to analyze dependencies between configuration entries to identify root causes. ConfAid employs dynamic taint analysis to monitor causality within the program binary as it executes. This approach is primarily for diagnosing a single program's configuration rather than configuration errors introduced during operation.

- **CODE [14]**: An automated tool for detecting software configuration errors based on identifying invariant configuration access rules that predict what access events follow specific contexts. It requires no source code, application-specific semantics, or heavyweight program analysis. CODE can sift through a large number of events to detect deviant program execution. Our approach complements CODE by detecting a broader range of errors and diagnosing them.

### C. Log Analysis Tools

There are numerous log analysis tools available for error diagnosis. However, many of these tools do not perform online diagnosis through automatic diagnostic tests and lack process context during diagnosis. Logs are typically organized by sources and require manual drilling down.

- **AWS CloudTrail**: Announced in November 2013, CloudTrail logs all API calls. However, the delay (up to 15 minutes) between a call and its log appearance makes it unsuitable for real-time diagnosis.

- **SEC [15]**: An event correlation tool for advanced event processing, useful for event log monitoring, network and security management, fraud detection, and other tasks involving event correlation. SEC reads lines from files, named pipes, or standard input, matches them with patterns, and correlates events according to predefined rules. It can produce output by executing external programs, writing to files, sending data to TCP/UDP servers, or calling precompiled Perl subroutines.

- **LogMaster [16]**: An event correlation mining and prediction system. LogMaster parses logs into event sequences, where each event is represented as an informative nine-tuple. The correlations between non-failure and failure events are crucial for predicting failures.

- **[17]**: Parses console logs by combining source code analyses and applies machine learning techniques to learn common patterns and detect abnormal log patterns.

- **Sherlog [18]**: Analyzes source code by leveraging information from runtime logs to infer what must or may have happened during a failed production run. It requires neither re-execution of the program nor knowledge of the log's semantics and can infer control and data value information regarding the failed execution.

### D. Intrusive Log Improvement for Error Diagnosis

While there are several "rules of thumb" for designing better logging messages, these still do not capture specific information. 

- **LogEnhancer [20]**: Automatically enhances existing logging code to aid future post-failure debugging. It modifies each log message to collect additional causally related information, making diagnosis easier in case of failures.

- **[21]**: Proposes an approach based on software fault injection to assess the effectiveness of logs in tracking software faults triggered in the field. This work motivates their follow-up [22], which leverages artifacts produced at system design time and formalizes the placement of logging instructions within the software fault source code to make logs effective for analyzing software failures.

### E. Error Diagnosis During Normal Operation

There are also statistical, machine learning, and rule-based approaches for diagnosing errors during normal operation [23-27]. These methods assume a system has normal operation profiles that can be learned from historical data, and deviations from these profiles can help detect, localize, and identify faults.

- **Distributed Tracing Tools**: Such as Google’s Dapper [28], Twitter’s Zipkin [29], and Berkeley’s X-Trace [30] are typically used manually during diagnosis and do not incorporate process contexts.

### VIII. Conclusion and Future Work

Error diagnosis during sporadic operations is challenging due to constant changes and the absence of "normal" profiles to detect anomalies. Continuous deployment practices have increased the frequency of such operations. In this paper, we propose POD-Diagnosis, which treats a sporadic operation as a process, detects and diagnoses intermediate step errors through conformance checking, assertion evaluation, and on-demand diagnostic tests. Evaluation results show promising precision, recall, and diagnosis accuracy above 90%.

To simplify specifying boilerplate assertions, we are designing an assertion specification language and plan to automate the generation of assertions. We are also expanding the scope to include more types of configurations and operation tasks inside a virtual machine. Finally, we aim to release most of the tools and services as open-source software.

### Acknowledgements

We would like to thank all the reviewers, especially Matti Hiltunen, for guiding us to improve the paper. NICTA is funded by the Australian Government through the Department of Communications and the Australian Research Council through the ICT Centre of Excellence Program.

### References

[References listed here, formatted consistently and accurately.]

This revised version aims to provide a clear, coherent, and professional presentation of the content.