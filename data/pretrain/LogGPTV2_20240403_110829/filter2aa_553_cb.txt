#include 
#define MONTHS 12
int main(void)
{
int days[MONTHS] = { 31, 28, 31, 30, 31, 30, 31, 31, 
30, 31, 30, 31 };
int index;
for (index = 0; index 
#define SIZE 10
int sum(int ar[], int n);
int main(void)
{
int marbles[SIZE] = { 20, 10, 5, 39, 4, 16, 19, 26, 
31, 20 };
long answer;
answer = sum(marbles, SIZE);
printf("The total number of marbles is %ld.\n", answer);
printf("The size of marbles is %zd bytes.\n",
sizeof marbles);
return 0;
}
int sum(int ar[], int n)   // 这个数组的大小是？
{
675
int i;
int total = 0;
for (i = 0; i 
#define SIZE 10
int sump(int * start, int * end);
int main(void)
{
int marbles[SIZE] = { 20, 10, 5, 39, 4, 16, 19, 26, 
31, 20 };
long answer;
answer = sump(marbles, marbles + SIZE);
printf("The total number of marbles is %ld.\n", answer);
return 0;
}
/* 使用指针算法 */
int sump(int * start, int * end)
677
{
int total = 0;
while (start 
int data[2] = { 100, 200 };
679
int moredata[2] = { 300, 400 };
int main(void)
{
int * p1, *p2, *p3;
p1 = p2 = data;
p3 = moredata;
printf(" *p1 = %d,  *p2 = %d,  *p3 = %d\n",*p1, *p2, *p3);
printf("*p1++ = %d, *++p2 = %d, (*p3)++ = %d\n",*p1++, *++p2, (*p3)++);
printf(" *p1 = %d,  *p2 = %d,  *p3 = %d\n",*p1, *p2, *p3);
return 0;
}
下面是该程序的输出：
*p1 = 100,  *p2 = 100,   *p3 = 300
*p1++ = 100, *++p2 = 200, (*p3)++ = 300
*p1 = 200,  *p2 = 200,   *p3 = 301
只有(*p3)++改变了数组元素的值，其他两个操作分别把p1和p2指向数
组的下一个元素。
10.4.2 指针表示法和数组表示法
从以上分析可知，处理数组的函数实际上用指针作为参数，但是在编写
这样的函数时，可以选择是使用数组表示法还是指针表示法。如程序清单
680
10.10所示，使用数组表示法，让函数是处理数组的这一意图更加明显。另
外，许多其他语言的程序员对数组表示法更熟悉，如FORTRAN、Pascal、
Modula-2或BASIC。其他程序员可能更习惯使用指针表示法，觉得使用指针
更自然，如程序清单10.11所示。
至于C语言，ar[i]和*(ar+1)这两个表达式都是等价的。无论ar是数组名
还是指针变量，这两个表达式都没问题。但是，只有当ar是指针变量时，才
能使用ar++这样的表达式。
指针表示法（尤其与递增运算符一起使用时）更接近机器语言，因此一
些编译器在编译时能生成效率更高的代码。然而，许多程序员认为他们的主
要任务是确保代码正确、逻辑清晰，而代码优化应该留给编译器去做。
681
10.5 指针操作
可以对指针进行哪些操作？C提供了一些基本的指针操作，下面的程序
示例中演示了8种不同的操作。为了显示每种操作的结果，该程序打印了指
针的值（该指针指向的地址）、储存在指针指向地址上的值，以及指针自己
的地址。如果编译器不支持%p 转换说明，可以用%u 或%lu 代替%p；如果
编译器不支持用%td转换说明打印地址的差值，可以用%d或%ld来代替。
程序清单10.13演示了指针变量的 8种基本操作。除了这些操作，还可以
使用关系运算符来比较指针。
程序清单10.13 ptr_ops.c程序
// ptr_ops.c -- 指针操作
#include 
int main(void)
{
int urn[5] = { 100, 200, 300, 400, 500 };
int * ptr1, *ptr2, *ptr3;
ptr1 = urn;       // 把一个地址赋给指针
ptr2 = &urn[2];     // 把一个地址赋给指针
// 解引用指针，以及获得指针的地址
printf("pointer value, dereferenced pointer, pointer address:\n");
printf("ptr1 = %p, *ptr1 =%d, &ptr1 = %p\n", ptr1, *ptr1, &ptr1);
// 指针加法