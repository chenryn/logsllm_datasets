1
从javac源码看Unicode编码绕过的原因
前⾔
搭建Javac调试环境
⽀持变形Unicode的原因
注释+换⾏绕过的原因
⼀个奇怪的发现
@yzddMr6 
⼤家都知道jsp中可以⽤\uxxxx或者\uuuuuuxxxx这种格式来对恶意代码进⾏混淆，并且还可以⽤注
释+换⾏unicode的⽅式进⾏恶意代码的逃逸。那么是什么造成了这种情况呢，带着问题我们从Javac层
⾯看⼀看原因是什么。 
使⽤源码来调试的原因主要是源码⾥有变量名以及注释等，⽅便理解。 
git clone https://github.com/arthur-zhang/javac-source-code-reading 
这个项⽬打开后⽆法直接使⽤，有些源码并不完整。 
解决办法是⼿动把tools.jar加为库⽂件 
前⾔ 
搭建Javac调试环境 
2
在源码中进⾏⼀番查找，我们可以找到解析unicode编码的地⽅在 
com.sun.tools.javac.parser.UnicodeReader#convertUnicode 
这⾥ch是当前扫描的字符，bp是当前扫描到的位置，unicodeConversionBp是⽤来记录上⼀个unicode
的位置。 
关检步骤的作⽤已经在代码中给出： 
⽀持变形Unicode的原因 
3
因此我们的第⼀个问题就解决了：能⽀持\uuuuu这种的原因是javac使⽤了while循环来扫描，循环的判
断逻辑是只要\的后⾯⼀直是u就会⼀直往下读取。 
Plain Text
复制代码
protected void convertUnicode() {
        if (ch == '\\' && unicodeConversionBp != bp) {//当前字符是'\'且不是
上⼀个unicode的位置
            bp++; ch = buf[bp];//读取下⼀个字符
            if (ch == 'u') {
                do {
                    bp++; ch = buf[bp];//继续读下⼀个字符
                } while (ch == 'u');//只要'\'的下⼀个字符是u，就会⼀直⾛到
while循环
                int limit = bp + 3;//记录unicode的最后⼀个位置
                if (limit = 0) {//这⾥的主要功能是读取
\u00xx中xx的内容，并且转为对应的char字符。
                        bp++; ch = buf[bp];
                        d = digit(bp, 16);
                        code = (code = 0) {
                        ch = (char)code;//转为对应的char字符
                        unicodeConversionBp = bp;
                        return;
                    }
                }
                log.error(bp, "illegal.unicode.esc");
            } else {
                bp--;
                ch = '\\';
            }
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
4
还有⼀种利⽤姿势是⽤ //+\u000d换⾏的写法进⾏代码的逃逸，如下⾯这个例⼦： 
表⾯上java.lang.Runtime.getRuntime().exec("whoami");是在注释符的后⾯⽆法执⾏，但实际上由于前
⾯存在\u000d转义字符，导致后⾯的代码逃逸了出来。实际编译的时候是下⾯的代码形式： 
注释+换⾏绕过的原因 
Plain Text
复制代码
public class test {
    public static void main(String[] args) throws Exception {
        //\u000djava.lang.Runtime.getRuntime().exec("whoami");
    }
}
1
2
3
4
5
5
javac后的class⽂件也可以印证我们的说法 
⾄于为什么这样可以绕过呢，javac对于注释的核⼼处理代码在这⾥ 
com.sun.tools.javac.parser.JavaTokenizer#readToken 
可以看到这⾥也进⼊了⼀个do while的循环：只要当前的ch!=CR或者LF或者没有读取到最⼤⻓度都会继
续读取，最后把pos跟bp之间的字符都当作注释。这⾥的pos是进⼊token读取之前记录的⼀个起始值。 
其中我们代码中⽤到的\u000d也就是CR，关于token读取过程中⼀些特殊的字符解释如下： 
Plain Text
复制代码
public class test {
    public static void main(String[] args) throws Exception {
        //
        java.lang.Runtime.getRuntime().exec("whoami");
    }
}
1
2
3
4
5
6
6
那么为什么这⾥的换⾏可以是⼀个unicode转义过后的换⾏，⽽⾮⼀个真正的换⾏呢？ 
接着往下看，代码会⾛到com.sun.tools.javac.parser.UnicodeReader#scanCommentChar 
Plain Text
复制代码
public interface LayoutCharacters {
    /** Tabulator column increment.
     */
    final static int TabInc = 8;
    /** Standard indentation for subdiagnostics
     */
    final static int DiagInc = 4;
    /** Standard indentation for additional diagnostic lines
     */
    final static int DetailsInc = 2;
    /** Tabulator character.
     */
    final static byte TAB   = 0x9;
    /** Line feed character.
     */
    final static byte LF    = 0xA;
    /** Form feed character.
     */
    final static byte FF    = 0xC;
    /** Carriage return character.
     */
    final static byte CR    = 0xD;
    /** End of input character.  Used as a sentinel to denote the
     *  character one beyond the last defined character in a
     *  source file.
     */
    final static byte EOI   = 0x1A;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
7
⼜调⽤了com.sun.tools.javac.parser.UnicodeReader#scanChar。 
我们可以看到，Javac在扫描字符的时候，底层只提供最后转换的结果，并不会告诉上层这个char
到底是真正的⼀个字符还是从unicode转过来的。 
所以绕过的原因也就很清楚了：Javac在读取注释的过程中会判断下⼀个字符是否是CR回⻋字符，
⽽不会判断这个回⻋到底是从Unicode转过来的还是真正的⼀个回⻋符号，所以就产⽣了恶意代码的逃
逸。 
debug过后可以看到我们的comment⾥⾯到换⾏就加了个0x1a结束了，没有把恶意代码计⼊到注释
⾥⾯ 
Plain Text
复制代码
    protected void scanCommentChar() {
        this.scanChar();
        if (this.ch == '\\') {
            if (this.peekChar() == '\\' && !this.isUnicode()) {
                this.skipChar();
            } else {
                this.convertUnicode();
            }
        }
    }
1
2
3
4
5
6
7
8
9
10
11
Plain Text
复制代码
    protected void scanChar() {
        if (this.bp 
1
2
3
4
10
理论上jsp执⾏也是经历了jsp->java->class的过程，为什么跟直接编译java⽂件的结果不同呢，⾮常神
秘，感兴趣的同学可以研究⼀下。