To make the routing algorithm ﬁnd the data faster, Freenet attempts to cluster
nodes with similar locations. The network achieves this by having nodes swap
their locations under certain conditions:
1. Let L(n) be the current location of node n.
6
Anonymous
2. A node A randomly chooses a neighboring node B and initiates a swap
request. Both nodes exchange the locations of their respective neighbors and
calculate D1(A, B), the product of the products of the diﬀerences of the
locations of them to their neighbors’:
D1(A, B) =
(A,n)∈E
|L(A) − L(n)| ·
(B,n)∈E
|L(B) − L(n)|
(1)
3. The nodes also compute D2(A, B), the product of the products of the dif-
ferences of the locations of them to their neighbors’ after a potential swap:
D2(A, B) =
(A,n)∈E
|L(B) − L(n)| ·
(B,n)∈E
|L(A) − L(n)|
(2)
4. If the nodes ﬁnd that D2(A, B) ≤ D1(A, B), they swap locations, otherwise
they swap locations with probability D1(A,B)
D2(A,B).1
As a result of this swapping of locations the overlay becomes semi-structured;
the routing algorithm’s depth ﬁrst search can utilize this structure in order to
ﬁnd short paths with high probability. Sandberg’s thesis [13] shows that the
Freenet routing algorithm converges towards routing in O(log n) steps (with
high probability) under the assumption that the set of legal connections speciﬁed
by the node operators forms a small-world network. This is a signiﬁcant result
because it describes the ﬁrst fully decentralized distributed hash table (DHT)
design that achieves O(log n) routing with (severely) restricted routes. Most
other DHT designs make the unrealistic assumption that every node is able to
directly communicate with every other node [5,8,12,15].
3.4
Content Storage
Each Freenet node stores content in a datastore of bounded size. Freenet uses a
least-recently-used content replacement policy, removing the least-recently-used
content when necessary to keep the size of the datastore below the user-speciﬁed
limit.
Our simulation of routing in the Freenet network places the content at the
node whose location is closest to the key and does not allow caching or replication
of content. The reason for this is that our study focuses on routing performance
and not on content replication and caching strategies.
3.5
Example
Figure 3 shows a small example network. Each node is labeled with its location
(Ln ∈ [0, 1)) in the network. The bi-directional edges indicate the direct con-
nections between nodes. In a friend-to-friend network, these are the connections
1 Note that the Freenet implementation fails to use a secure multiparty computation
for this probabilistic step and that the nodes perform the swap based on either node
requesting to swap. This is an implementation limitation and not a fundamental
issue with the proposed routing algorithm.
Routing in the Dark: Pitch Black
7
that were speciﬁcally allowed by the individual node operators. Furthermore,
each node is only aware of its immediate neighbors. Similarly, in an ad-hoc wire-
less network, the edges would indicate which nodes are physically able to directly
communicate with which other nodes. While our example network lacks cycles,
any connected graph is allowed; the small-world property is only required to
achieve O(log n) routing performance, the algorithm itself works for any con-
nected graph.
0.60
0.10
.50
0.90
Swap?
0.30
.60
0.45
0.85
0.40
.25
0.25
.65
Fig. 3. This ﬁgure shows an example network with two nodes considering a swap.
The result of the swap equation is D1 = .60 * .65 * .25 * .50 = .04875 and D2
= .30 * .35 * .05 * .80 = .0042. Since D1 > D2, they swap.
0.90
0.10
0.80
0.60
0.30
0.30
0.45
0.85
0.40
0.05
0.25
0.35
Fig. 4. This ﬁgure shows the resulting example network after the swap has
occurred.
The network illustrated in Figure 3 happens to have an assignment of loca-
tions that would cause the nodes with locations 0.60 and 0.90 to perform a swap
in order to minimize the distance product from Equation (1). Figure 4 shows the
new assignment of locations after the swap. Note that after a swap each node
retains exactly the same set of connections; the only change is in the location
identiﬁers of the nodes. This change in node locations impacts the order of the
traversal during routing.
Figure 5 shows how a GET request would be routed after the swap. Starting
at the node with location 0.90 and targeting the key 0.23 the node picks its
closest neighbor (with respect to the key), which is 0.10. However, 0.10 does not
have the content and also lacks other neighbors to try and thus responds with
8
Anonymous
0.90
0.10
0.60
0.30
0.25
Found!
0.45
0.85
0.40
Fig. 5. Illustrates the path of a GET request looking for data with a hash value of
.23 which is stored at the node identiﬁed by the location 0.25. The GET request
is initiated from node with location 0.90. The path that the GET request travels
is displayed as the dotted lines which travel from 0.90 → 0.10 → 0.90 → 0.60 →
0.25 where the data is found.
content not found. Then 0.90 attempts its’ second-closest neighbor, 0.60. Again,
0.60 does not have the content, but it has other neighbors. The 0.25 neighbor
is closest to 0.23. The content is found at that node and returned via 0.60 (the
restricted-route topology does not allow 0.25 to send the result directly back to
0.90).
Finally, Figure 6 illustrates how Freenet routes a PUT request. The algorithm
again attempts to ﬁnd the node with the closest location in a greedy fashion.
Once a node C is found where all neighbors are further away from the node, the
algorithm essentially re-starts the PUT with all neighbors of that node. Usually,
these neighbors of C do not have other neighbors that would be closer to the
key and thus directly route back to C, which ends the process since C has seen
the request already.
0.90
0.10
0.60
0.30
0.45
0.85
0.40
0.25
0.90
0.10
0.60
0.85
0.30
0.45
0.40
0.25
Fig. 6. The graph on the left illustrates the path of a PUT request inserting data
with a hash value of .96. The request is initiated from node with location 0.25.
The path that the PUT request travels is displayed as the dotted lines which
travel from 0.25 → 0.60 → 0.90 where the data is stored. The graph on the
right shows what happens after a PUT has found a node whose neighbors are all
further away from the key. That node resets the hops-to-live of the PUT request
to its maximum and then forwards the PUT request to all of its neighbors.
Usually, as in this case, these neighbors have no node closer to the key than
their predecessor and the PUT routing ends.
Routing in the Dark: Pitch Black
9
4
Security Analysis
The routing algorithm works under the assumption that the distribution of the
keys and peer locations is random. In that case, the load is balanced, in particular
all nodes are expected to store roughly the same amount of content and all nodes
are expected to receive roughly equivalent numbers of requests.
The basic idea behind the attack is to de-randomize the distribution of the
node locations. The attacker tries to cluster the locations around a particular
small set of values. Since the distribution of the keys is still random and inde-
pendent of the distribution of the node locations, clustering of node locations
around particular values results in an uneven load distribution. Nodes within
the clusters are responsible for less content (because many other nodes are also
close to the same set of keys), whereas the load for nodes outside of the clusters
is disproportionately high.
We will now detail two scenarios which destroy the initial random distribution
of node locations resulting in clustering of locations around particular values.
The ﬁrst scenario uses attack nodes inside of the network. This attack quickly
unbalances the load in the network, causing signiﬁcant data loss; the reason for
the data loss is that the imbalance causes some nodes to greatly exceed their
storage capacity whereas other nodes store nothing. The other scenario illustrates
how location imbalance can occur naturally even without an adversary due to
churn.
4.1
Active Attack
As described in Section 3.3, a Freenet node attempts to swap with random peers
periodically. Suppose that an attacker wants to bias the location distribution
towards a particular location. In order to facilitate the attack, the attacker as-
sumes that particular location. This malicious behavior cannot be detected by
the nodes neighbors because the attacker can claim to have obtained this loca-
tion from swapping. A neighbor cannot verify whether or not such a swap has
occurred because the friend-to-friend (F2F) topology restricts communication to
immediate neighbors.
The node then creates swap requests in accordance with the Freenet proto-
col. The only diﬀerence is that when the neighbor involved in the swap asks for
the locations of the attacker’s other neighbors, the attacker responds with lo-
cations that are favorable towards swapping. Again, the F2F topology prevents
the neighbor involved in the swap from checking the validity of this informa-
tion. After the swap, the attack node again assumes the original location chosen
and continues to try to swap with its other neighbors whose locations are still
random.
The neighbors that have swapped with an attacker then continue to swap
in accordance with the swapping algorithm, possibly spreading the malicious
locations. Once the location has been spread, the adversary subjects another
neighbor to a swap, removing yet another random location from the network.
The likelihood of neighbors spreading the malicious location by swapping can be
10
Anonymous
improved by using multiple attack locations. Using a higher number of malicious
locations increases the rate of the penetration of the network. There is a tradeoﬀ
between the speed of penetration and the impact of the attack in terms of causing
load imbalances.
4.2
Natural Churn
Network churn, the joining and leaving of nodes in the network, is a crucial
issue that any peer-to-peer routing protocol needs to address. We have ignored
churn until now because the attack described in the previous section does not
require it. Intuition may suggest that natural churn may help the network against
the attack by supplying a constant inﬂux of fresh, truly random locations. This
section illustrates that the opposite is the case: natural churn can strengthen the
attack and even degenerate the Freenet network in the same manner without the
presence of malicious nodes.
For the purpose of this discussion, we need to distinguish two types of churn.
The ﬁrst kind, leave-join churn, describes ﬂuctuations in peer availability due
to a peer leaving the nextwork for a while and then joining again. In this case,
the network has to cope with temporary loss of availability in terms connectivity
and access to content stored at the node. Freenet’s use of content replication
and its routing algorithm are well-suited to handle this type of churn. Most
importantly, a node leaving does not immediately trigger signiﬁcant changes at
any other node. As a result, an adversary cannot use leave-join churn to disrupt
network operations. Since honest Freenet peers re-join with the same location
that they last had when they left the network, leave-join churn does not impact
the overall distribution of locations in the network.
The second kind, join-leave churn, describes peers who join the network and
then leave for good. In this case, the network has to cope with the permanent
loss of data stored at this peer. In the absence of adversaries, join-leave churn
may be less common in peer-to-peer networks; however, it is always possible for
users to discontinue using a particular application. Also, often users may just
test an application once and decide that it does not meet their needs. Again, we