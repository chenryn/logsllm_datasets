  * I want to talk about `jquery/jquery.d.ts`.
    * The authors of that type definition are cc/ @borisyankov @choffmeister @Steve-Fenton @Diullei @tasoili @jasons-novaleaf @seanski @Guuz @ksummerlin @basarat @nwolverson @derekcicerone @AndrewGaspar @jameshfisher @seikichi @benjaminjackman @JoshStrobl @johnnyreilly @DickvdBrink
  * I want to talk about `jquery.dataTables/jquery.dataTables.d.ts`.
    * The authors of that type definition are cc/ @Silver-Connection @omidkrad @pragmatrix @CNBoland
* * *
The static property`JQueryStatic.fn` (AKA `jQuery.fn` or `$.fn`) is declared
as `any` which makes it impossible for plugin authors to write proper type
declarations.
An example of such a plugin is the DataTables plugin, which has a handful of
static functions that you can access via `$.fn.dataTables`.
In jquery/jquery.d.ts
    fn: any;  //TODO: Decide how we want to type this
In jquery.dataTables/jquery.dataTables.d.ts
    //TODO: Wrong, as jquery.d.ts has no interface for fn
    //interface JQueryStatic {
    //    dataTable: DataTables.StaticFunctions;
    //}
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/jquery/jquery.d.ts#L966  
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/jquery.dataTables/jquery.dataTables.d.ts#L17-L20
Example: https://datatables.net/reference/api/$.fn.dataTable.tables()
    // get all DataTables on the page.
    let tables: DataTables.DataTable[] = $.fn.dataTables.tables() as DataTables.DataTable[];
Here, the inferred return type of `tables()` is `any` because the type of `fn`
is `any`, but the actual return type is an array of `DataTable`.