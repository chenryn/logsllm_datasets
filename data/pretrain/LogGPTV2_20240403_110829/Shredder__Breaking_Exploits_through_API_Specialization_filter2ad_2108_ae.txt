(LBR) feature of recent processors to inspect the sequence of indi-
rect branch instructions that led to the intercepted API function
invocation. Similarly, ROPGuard [29] performs a variety of checks,
such as validating whether the return address to the caller func-
tion points to a call-preceded instruction, and checking whether
the stack pointer falls within the boundaries of the actual stack.
Many of ROPGuard’s checks have been incorporated to Microsoft’s
Enhanced Mitigation Experience Toolkit (EMET) [49], which also
implements many of its exploit mitigation technologies by inter-
cepting critical API calls.
Several years before EMET, the security community used similar
approaches to build protections for Windows systems by enforcing
policies or implementing detection heuristics at the system API
level. WHIPS [8] is a host-based intrusion detection system (HIDS)
for Windows 2000/XP/2003 that enforces rules kept in an access
control database by intercepting Native API calls. The creation of
the enforced rules is an orthogonal issue not addressed in that work,
which the authors mention, can be performed either in a manual or
automatic manner. Anderson et al. [4] implemented a host-based
code injection attack detector by using Detours to intercept and
inspect network inputs for the presence of an excessive number of
NOP instructions, which frequently precede the shellcode.
Similar systems were prototyped for Linux even earlier. For in-
stance, the REMUS system [10] implements a reference monitor for
system call invocations as a loadable Linux kernel module. Libsafe
and Libverify [7] aim to transparently prevent bu(cid:29)er over(cid:30)ow ex-
ploits by enforcing bu(cid:29)er sizes and verifying return addresses on
the stack through library interposition. Many other systems rely
on system call interposition to enforce blacklisting or whitelisting
policies [31, 33, 56]. Numerous other works in the span of more
than two decades have proposed systems that rely on system call
interposition to defend against intrusions using anomaly detec-
tion [11, 27, 28, 37, 46, 62, 71, 74].
10Shredder: Breaking Exploits through API Specialization
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
7.2 Code Surface Reduction
Several works have started exploring the concept of “slimming
down” the code surface of applications, by removing any unneces-
sary code. This overall strategy has the dual goal of reducing the
threat of exploitation by removing any vulnerabilities that were
present in the unused code, and make exploit construction harder
(especially for code reuse), by reducing the potential functions or
ROP gadgets that could be used by an attacker.
Software winnowing [48] is one such approach that applies this
concept to specialize the code of applications and libraries. The au-
thors have implemented a code specialization tool on top of LLVM,
called OCCAM, (Object Culling and Concretization for Assurance
Maximization), which generates specialized versions of applica-
tions according to a given con(cid:27)guration or deployment context.
OCCAM supports both intra-module and inter-module winnowing,
and can perform sophisticated code specialization by taking into
account all program dependencies. Piecewise Debloating [58] is
another approach for debloating libraries and main executables. At
compilation and link time, the framework collects accurate control
(cid:30)ow graph information, which is embedded into the resulting bina-
ries. At run time, this information is used to load only the relevant
portions of code to the memory. The unused portions are replaced
by illegal instructions thus shrinking the attack surface.
Shredder employs some similar ideas, but as we have already dis-
cussed, the constraint of operating transparently on closed-source
applications severely limits the types of program analysis that we
can rely on. Furthermore, it is complementary to the above ap-
proaches, as i) it moves one step further, by debloating further the
remaining code, in terms of what part of function interfaces remains
operational, and ii) focuses on system API libraries, instead of a
program’s own modules.
Similar code surface reduction approaches have been proposed
for the Linux kernel, the multi-purpose nature of which makes the
underlying code base immense. Kurmus et al. [38] implemented
kRazor, a system that limits the amount of kernel code accessible
to an application. In a training phase, the system uses dynamic
instrumentation of all the kernel functions to collect the set of used
functions under certain workloads. In the enforcement phase, the
system then limits usage to that set of functions. Similar methods
have been employed by other systems [39, 40, 68] to create custom
minimized kernels suited for speci(cid:27)c workloads, achieving a code
surface reduction in the range of 50–85%. While the above systems
create custom single-purpose kernels for certain workloads, Face-
Change [34] uses multiple minimized kernels, one tailored to each
application, which are swapped accordingly upon context switch.
8 CONCLUSION
Motivated by the concept of attack surface reduction, and by the
need for practical and composable defense-in-depth mitigations
that can be readily and transparently applied for the protection of
applications that are targeted by in-the-wild attacks, in this work
we have presented Shredder, an exploit mitigation tool for Windows
programs. Shredder uses API specialization to restrict the interface
of critical system API functions according to the actual needs of the
protected program, and neutralize parts of their functionality that
are often crucial for the operation of malicious code. The results of
our experimental evaluations show that Shredder o(cid:29)ers a signi(cid:27)cant
improvement over code stripping [50], a previous code surface
reduction technique for closed-source Windows applications, by
blocking the execution of 18.3% more shellcode and 298% more ROP
code samples, while incurring a negligible runtime overhead.
ACKNOWLEDGMENTS
We would like to thank Collin Mulliner, Azzedine Benameur, and
the anonymous reviewers for their valuable feedback. This work
was supported by the O(cid:28)ce of Naval Research (ONR) through
award N00014-17-1-2891, the National Science Foundation (NSF)
through award CNS-1749895, and the Defense Advanced Research
Projects Agency (DARPA) through award D18AP00045, with ad-
ditional support by Accenture. Any opinions, (cid:27)ndings, and con-
clusions or recommendations expressed herein are those of the
authors and do not necessarily re(cid:30)ect the views of the ONR, NSF,
DARPA, or Accenture.
REFERENCES
[1] McSema: Framework for lifting x86, amd64, and aarch64 program binaries to
LLVM bitcode. (2017). https://github.com/trailofbits/mcsema.
[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-(cid:30)ow
integrity. In Proceedings of the 12th ACM conference on Computer and Communi-
cations Security (CCS). 340–353.
[3] Alex Abramov. Manually Enumerating Process Modules. (2015). http://www.
codereversing.com/blog/archives/265.
[4] S. Andersson, A. Clark, G. Mohay, B. Schatz, and J. Zimmermann. 2005. A
framework for detecting network-based code injection attacks targeting Windows
and UNIX. In Proceedings of the 21st Annual Computer Security Applications
Conference (ACSAC).
[5] Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert
Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries.
In Proceedings of the 25rd USENIX Security Symposium. 583–600.
[6] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn-
berger, and Jannik Pewny. 2014. You Can Run but You Can’T Read: Preventing
Disclosure Exploits in Executable Code. In Proceedings of the 21st ACM Conference
on Computer and Communications Security (CCS). 1342–1353.
[7] Arash Baratloo, Navjot Singh, and Timothy Tsai. 2000. Transparent Run-Time
Defense Against Stack Smashing Attacks. In Proceedings of the USENIX Annual
Technical Conference.
[8] Roberto Battistoni, Emanuele Gabrielli, and Luigi V. Mancini. 2004. A Host
Intrusion Prevention System for Windows Operating Systems. In Proceedings
of the 9th European Symposium on Research in Computer Security (ESORICS).
352–368.
[9] James Bennett, Yichong Lin, and Thou(cid:27)que Haq. The Number of the Beast. (2013).
http://blog.(cid:27)reeye.com/research/2013/02/the-number-of-the-beast.html.
[10] Massimo Bernaschi, Emanuele Gabrielli, and Luigi V. Mancini. 2002. Remus: A
Security-enhanced Operating System. ACM Trans. Inf. Syst. Secur. 5, 1 (Feb. 2002),
36–61.
[11] S. Bhatkar, A. Chaturvedi, and R. Sekar. 2006. Data(cid:30)ow anomaly detection. In
Proceedings of the IEEE Symposium on Security & Privacy.
[12] Erik Bosman and Herbert Bos. 2014. Framing Signals - A Return to Portable
Shellcode. In IEEE Symposium on Security and Privacy. 243–258.
[13] Kjell Braden, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2016. Leakage-Resilient Layout Random-
ization for Mobile Devices. In Proceedings of the Network and Distributed System
Security Symposium (NDSS).
[14] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael Franz, Stefan
Brunthaler, and Mathias Payer. 2017. Control-Flow Integrity: Precision, Security,
and Performance. ACM Comput. Surv. 50, 1, Article 16 (April 2017), 33 pages.
https://doi.org/10.1145/3054924
[15] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R.
Gross. 2015. Control-Flow Bending: On the E(cid:29)ectiveness of Control-Flow In-
tegrity. In Proceedings of the 24th USENIX Security Symposium. 161–176.
[16] Ping Chen, Hai Xiao, Xiaobin Shen, Xinchun Yin, Bing Mao, and Li Xie. 2009.
DROP: Detecting Return-Oriented Programming Malicious Code. In Proceedings
of the 5th International Conference on Information Systems Security (ICISS). 163–
177.
[17] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer.
2005. Non-Control-Data Attacks Are Realistic Threats. In Proceedings of the 14th
11ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Shachee Mishra and Michalis Polychronakis
USENIX Security Symposium.
[18] Yaohui Chen, Dongli Zhang, Ruowen Wang, Rui Qiao, Ahmed M Azab, Long Lu,
Hayawardh Vijayakumar, and Wenbo Shen. 2017. NORAX: Enabling Execute-
Only Memory for COTS Binaries on AArch64. In Proceedings of the 38th IEEE
Symposium on Security & Privacy (S&P).
[19] Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H. Deng.
2014. ROPecker: A Generic and Practical Approach For Defending Against ROP
Attacks. (2014).
[20] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor:
Practical Code Randomization Resilient to Memory Disclosure. In Proceedings of
the 36th IEEE Symposium on Security and Privacy (S&P).
[21] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and
Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time)
Return-Oriented Programming. In Proceedings of the Network and Distributed
System Security Symposium (NDSS).
[22] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2009. Dynamic in-
tegrity measurement and attestation: towards defense against return-oriented
programming attacks. In Proceedings of the 2009 ACM workshop on Scalable Trusted
Computing (STC). 49–54.
[23] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2011. ROPdefender:
A Detection Tool to Defend Against Return-oriented Programming Attacks. In
Proceedings of the 6th ACM ASIACCS. 40–51.
[24] Solar Designer. Getting around non-executable stack (and (cid:27)x). (1997). http:
[41] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar,
and Dawn Song. 2014. Code-pointer Integrity. In Proceedings of the 11th USENIX
Conference on Operating Systems Design and Implementation (OSDI). 147–163.
[42] MWR Labs.
MWR Labs Pwn2Own 2013 Write-up - Webkit
https : / / labs . mwrinfosecurity . com / blog /
Exploit.
mwr-labs-pwn2own-2013-write-up-webkit-exploit/.
(2013).
[43] Aaron Lamb. The Chakra Exploit And The Limitations Of Modern Cyber Security
Threat Mitigation Techniques. https://www.endgame.com/blog/technical-blog/
chakra-exploit-and-limitations-modern-mitigation-techniques. (2017).
[44] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK:
Automated Software Diversity. In Proceedings of the 35th IEEE Symposium on
Security & Privacy. 276–291.
[45] Jinku Li, Zhi Wang, Xuxian Jiang, Michael Grace, and Sina Bahram. 2010. De-
feating return-oriented rootkits with “Return-Less” kernels. In Proceedings of the
5th European conference on Computer Systems (EuroSys). 195–208.
[46] P. Li, H. Park, D. Gao, and J. Fu. 2008. Bridging the Gap between Data-Flow
and Control-Flow Analysis for Anomaly Detection. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC). 392–401.
[47] M. Russinovich, D. A. Solomon, and A. Ionescu. 2012. Windows Internals. (2012).
[48] Gregory Malecha, Ashish Gehani, and Natarajan Shankar. 2015. Automated
Software Winnowing. In Proceedings of the 30th Annual ACM Symposium on
Applied Computing (SAC ’15). 1504–1511.
[49] Microsoft. Enhanced Mitigation Experience Toolkit.
([n. d.]). http://www.
microsoft.com/emet.
//seclists.org/bugtraq/1997/Aug/63.
[50] Collin Mulliner and Matthias Neugschwandtner. 2015. Breaking Payloads with
[25] Thomas Dullien. 2018. Security, Moore’s law, and the anomaly of cheap complex-
Runtime Code Stripping and Image Freezing. Black Hat USA.
ity. CyCon.
[26] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin Rinard,
Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On the
Weaknesses of Fine-Grained Control Flow Integrity. In Proceedings of the 22nd
ACM Conference on Computer and Communications Security (CCS). 901–913.
[27] H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and Weibo Gong. 2003. Anomaly
detection using call stack information. In Proceedings of the IEEE Symposium on
Security & Privacy. 62–75.
[28] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longsta(cid:29).
1996. A Sense of Self for Unix Processes. In Proceedings of the IEEE Symposium
on Security & Privacy.
[29] Ivan Fratric. 2012. ROPGuard: Runtime Prevention of Return-Oriented Program-
ming Attacks. (2012). http://www.ieee.hr/_download/repository/Ivan_Fratric.
pdf/
[30] Galen Hunt and Doug Brubacher. 1999. Detours: Binary Interception of Win32
Functions. https://www.cs.columbia.edu/~junfeng/10fa-e6998/papers/detours.
pdf.
[31] Tal Gar(cid:27)nkel. 2003. Traps and Pitfalls: Practical Problems in System Call Interpo-
sition Based Security Tools. In Proceedings of the Network and Distributed System
Security Symposium (NDSS).
[32] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Contents
of Userspace Memory in the Face of Disclosure Vulnerabilities. In Proceedings of
the 5th ACM Conference on Data and Application Security and Privacy (CODASPY).
325–336.
[33] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. 1996. A Secure
Environment for Untrusted Helper Applications Con(cid:27)ning the Wily Hacker. In
Proceedings of the 6th USENIX Security Symposium.
[34] Zhongshu Gu, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2014.
FACE-CHANGE: Application-Driven Dynamic Kernel View Switching in a Vir-
tual Machine. In 44th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN). 491–502.
[35] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W. David-
son. 2012. ILR: Where’d My Gadgets Go?. In Proceedings of the 33rd IEEE Sympo-
sium on Security & Privacy (S&P). 571–585.
[36] Sebastian Krahmer. x86-64 bu(cid:29)er over(cid:30)ow exploits and the borrowed code
chunks exploitation technique. (2005). http://www.suse.de/~krahmer/no-nx.pdf.
[37] Christopher Kruegel, Darren Mutz, Fredrik Valeur, and Giovanni Vigna. 2003.
On the Detection of Anomalous System Call Arguments. In Proceedings of the
8th European Symposium on Research in Computer Security (ESORICS). 326–343.
[38] Anil Kurmus, Sergej Dechand, and Rüdiger Kapitza. 2014. Quanti(cid:27)able Run-
Time Kernel Attack Surface Reduction. In Proceedings of the 11th International
Conference on Detection of Intrusions and Malware, and Vulnerability Assessment
(DIMVA). 212–234.
[39] Anil Kurmus, Alessandro Sorniotti, and Rüdiger Kapitza. 2011. Attack Surface
Reduction for Commodity OS Kernels: Trimmed Garden Plants May Attract Less
Bugs. In Proceedings of the 4th European Workshop on System Security (EuroSec).
[40] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bernhard Heinloth, Valentin
Rothberg, Andreas Ruprecht, Wolfgang Schröder-Preikschat, Daniel Lohmann,
and Rüdiger Kapitza. 2013. Attack Surface Metrics and Automated Compile-Time
OS Kernel Tailoring. In Proceedings of the Network and Distributed System Security
Symposium (NDSS).
[51] Nergal. 2001. The advanced return-into-lib(c) exploits: PaX case study. Phrack
11, 58 (Dec. 2001).
[52] Tim Newsham. Non-exec stack. (2000). http://seclists.org/bugtraq/2000/May/90.
[53] Kaan Onarlioglu, Leyla Bilge, Andrea Lanzi, Davide Balzarotti, and Engin Kirda.
2010. G-Free: defeating return-oriented programming through gadget-less bina-
ries. In Proceedings of the 26th Annual Computer Security Applications Conference
(ACSAC). 49–58.
[54] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2012. Smash-
ing the gadgets: Hindering return-oriented programming using in-place code
randomization. In Proceedings of the 2012 IEEE Symposium on Security and Privacy.
601–615.
[55] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2013. Trans-
parent ROP Exploit Mitigation using Indirect Branch Tracing. In Proceedings of
the 22nd USENIX Security Symposium. 447–462.
[56] Mathias Payer and Thomas R. Gross. 2011. Fine-grained User-space Security
Through Virtualization. In Proceedings of the 7th ACM SIGPLAN/SIGOPS Interna-
tional Conference on Virtual Execution Environments (VEE). 157–168.
[57] Marios Pomonis, Theo(cid:27)los Petsios, Angelos D. Keromytis, Michalis Polychron-
akis, and Vasileios P. Kemerlis. 2017. kR^X: Comprehensive Kernel Protection
against Just-In-Time Code Reuse. In Proceedings of the 12th European conference
on Computer Systems (EuroSys). 420–436.
[58] Anh Quach, Aravind Prakash, and Lok Kwong Yan. 2018. Debloating Software
through Piece-Wise Compilation and Loading. In Proceedings of the 27th USENIX
Security Symposium.
[59] Robert Rudd, Richard Skowyra, David Bigelow, Veer Dedhia, Thomas Hobson,
Christopher Liebchen Stephen Crane, Per Larsen, Lucas Davi, Michael Franz,
Ahmad-Reza Sadeghi, and Hamed Okhravi. 2017. Address-Oblivious Code Reuse:
On the E(cid:29)ectiveness of Leakage Resilient Diversity. In Proceedings of the Network
and Distributed System Security Symposium (NDSS).
[60] Mark Russinovich.
Inside Native Applications.
microsoft.com/en-us/sysinternals/bb897447.aspx.
(Nov. 2006). http://technet.
[61] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming:
On the Di(cid:28)culty of Preventing Code Reuse Attacks in C++ Applications. In
Proceedings of the 36th IEEE Symposium on Security & Privacy (S&P). 745–762.
[62] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni. 2001. A fast automaton-based
method for detecting anomalous program behaviors. In Proceedings of the IEEE
Symposium on Security & Privacy. 144–155.
[63] Hovav Shacham. 2007. The geometry of innocent (cid:30)esh on the bone: return-into-
libc without function calls (on the x86). In Proceedings of the 14th ACM conference
on Computer and Communications Security (CCS). 552–561.
[64] Skape. Understanding Windows Shellcode. (2003). http://www.hick.org/code/
skape/papers/win32-shellcode.pdf.
[65] Kevin Z. Snow, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, Fabian
Monrose, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the Ef-
fectiveness of Fine-Grained Address Space Layout Randomization. In Proceedings
of the 34th IEEE Symposium on Security & Privacy (S&P). 574–588.
[66] Kevin Z. Snow, Roman Rogowski, Jan Werner, Hyungjoon Koo, Fabian Monrose,
and Michalis Polychronakis. 2016. Return to the Zombie Gadgets: Undermining
Destructive Code Reads via Code Inference Attacks. In Proceedings of the 37th
IEEE Symposium on Security & Privacy (S&P). 954–968.
12Shredder: Breaking Exploits through API Specialization
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
[67] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte:
Thwarting Memory Disclosure Attacks Using Destructive Code Reads. In Pro-