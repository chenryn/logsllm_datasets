the path between the censor and the server. For instance, a reverse
proxy (such as a CDN), a common hosting platform (like Amazon
AWS), or even a middlebox along the path (like in TapDance [40])
could run our strategies by manipulating packets in-flight. However,
for ease of deployment, we anticipate that our strategies will mainly
be run at whichever host is performing the 3-way handshake with
the client. Our strategies incur little computation or communication
overhead (at most three extra payloads), so we expect that they
could be deployed even in performance-critical settings.
Which Strategies to Use? As our results have shown, strategies
that work in one country or ISP do not necessarily work in another.
Thus, in deployment, the server must determine which strategy
to use on a per-client basis. This may prove challenging, as the
server must make its determination based only on the client’s SYN
packet. Coarse-grained, country-level IP geolocation may suffice
for nation-states that exhibit mostly consistent censorship behavior
throughout their borders (like China). However, for countries with
region-specific behavior (such as Iran or Russia), finer-grained de-
termination of ISP may be required. Rapid, accurate determination
of which strategies to use is an important area of future work.
9 ETHICAL CONSIDERATIONS
Ethical Experiments We designed our experiments to have min-
imal impact on other hosts and users. All of our testing and training
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
was done from machines directly under our control. Geneva gener-
ates relatively little traffic while training [9] and does not spoof IP
addresses or ports. We follow the precedent of evaluating strategies
strictly serially, which rate-limits how quickly it creates connec-
tions and sends data. We believe this mitigates any potential impact
it may have had on other hosts on the same network.
Ethical Considerations of Server-side Evasion In traditional,
client-side tools for censorship evasion, the user is directly respon-
sible for attempting to evade the censor, and is taking a deliberate
action to do so. As such, the user has the opportunity to both decide
and consent to the evasion, and (ideally) is knowledgeable of the risk
associated with attempting to (and/or failing to) evade censorship.
However, such an opportunity may not always be present when
server-side strategies are applied to traditional, non-evasive proto-
cols (like DNS, FTP, HTTP, and SMTP). Every server-side strategy
discussed in this work runs during the 3-way handshake, so the
user has no in-band opportunity to be informed or consent to the
server applying strategies over their connection. This raises an eth-
ical question: Should servers have to seek informed consent from
users before evading censorship on their behalf?
There are several precedents that lead us to believe that such
consent is not necessary. Various evasion techniques are regularly
deployed without explicit support from users, such as wider de-
ployments of HSTS, HTTPS, or encrypted SNI, and new techniques
such as DNS-over-TLS and DNS-over-HTTPS.
Whatever the answer to this question, we did not face any of
these concerns during our experimentation: our servers were not
public-facing, served no sensitive content, and were not connected
to by anyone besides our own clients.
10 CONCLUSION
We have presented eleven server-side packet-manipulation strate-
gies for evading nation-state censors—ten of which are novel and,
to our knowledge, the only working server-side strategies today.
Our results lend greater insight into how the national censors in
China, India, Iran, and Kazakhstan operate: we find, for instance,
that the GFW appears to use separate censoring systems for each
application it censors, and that each such system has gaps in its
logic, bugs in its implementation, and different network stacks—
all of which we have shown can be exploited to evade censorship.
Such heterogeneity severely complicates the process of evading cen-
sorship. Fortunately, we have shown that, by applying automated
tools like Geneva [9], it is possible to efficiently evade (across mul-
tiple protocols) and understand a threat as nuanced (and buggy) as
nation-state censors. Our code and data are publicly available at
https://geneva.cs.umd.edu.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their helpful feedback. We
also thank our collaborators from the OTF and OONI communi-
ties, who have contributed insights and resources that made this
work possible. This research was supported in part by the Open
Technology Fund and NSF grants CNS-1816802 and CNS-1943240.
596
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Bock et al.
REFERENCES
[1] 1981. Transmission Control Protocol. RFC 793. RFC Editor. https://www.
rfc-editor.org/rfc/rfc793.txt
[2] 2016. DNS Transport over TCP - Implementation Requirements. RFC 7766. RFC
Editor. https://tools.ietf.org/html/rfc7766
[3] Claudio Agosti and Giovanni Pellerano. 2011. SniffJoke: transparent TCP con-
nection scrambler. https://github.com/vecna/sniffjoke. (2011).
Iran:
Internet
2017.
[4] agrabeli.
Censorship
Find-
https://blog.torproject.org/
in
ings
internet-censorship-iran-findings-2014-2017. (2017).
2014-2017.
from
[5] Anonymous. 2012. The Collateral Damage of Internet Censorship. ACM SIG-
COMM Computer Communication Review (CCR) 42, 3 (2012), 21–27.
[6] Anonymous. 2014. Towards a Comprehensive Picture of the Great Firewall’s
DNS Censorship. In USENIX Workshop on Free and Open Communications on the
Internet (FOCI).
[7] Simurgh Aryan, Homa Aryan, and J. Alex Halderman. 2013. Internet Censorship
in Iran: A First Look. In USENIX Workshop on Free and Open Communications on
the Internet (FOCI).
[8] Tod Beardsley and Jin Qian. 2010. The TCP Split Handshake: Practical Effects
on Modern Network Equipment. Network Protocols and Algorithms 2, 1 (2010),
197–217.
[9] Kevin Bock, George Hughey, Xiao Qiang, and Dave Levin. 2019. Geneva: Evolv-
ing Censorship Evasion. In ACM Conference on Computer and Communications
Security (CCS).
[10] Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan Dao, Srikanth V. Krishnamurthy,
and Lisa M. Marvel. 2016. Off-Path TCP Exploits: Global Rate Limit Considered
Dangerous. In USENIX Security Symposium.
[11] Richard Clayton, Steven J. Murdoch, and Robert N. M. Watson. 2006. Ignoring the
Great Firewall of China. In Privacy Enhancing Technologies Symposium (PETS).
the
https://blog.torproject.org/
[12] Roger Dingledine.
arms
censorship
obfsproxy-next-step-censorship-arms-race. (2012).
[13] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-
Obfsproxy:
2012.
race.
next
step
the
in
Generation Onion Router. In USENIX Security Symposium.
[14] Roya Ensafi, David Fifield, Philipp Winter, Nick Feamster, Nicholas Weaver,
and Vern Paxson. 2015. Examining How the Great Firewall Discovers Hidden
Circumvention Servers. In ACM Internet Measurement Conference (IMC).
[15] David Fifield, Nate Hardison, Jonathan Ellithorpe, Emily Stark, Dan Boneh, Roger
Dingledine, and Phil Porras. 2012. Evading Censorship with Browser-Based
Proxies. In Privacy Enhancing Technologies Symposium (PETS).
[16] David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson. 2015.
Blocking-resistant communication through domain fronting. In Privacy Enhanc-
ing Technologies Symposium (PETS).
[17] fqrouter. 2015. Detailed GFW’s three blocking methods for SMTP pro-
https://web.archive.org/web/20151121091522/http:
tocol.
//fqrouter.tumblr.com/post/43400982633/%E8%AF%A6%E8%BF%
B0gfw%E5%AF%B9smtp%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%89%E7%
A7%8D%E5%B0%81%E9%94%81%E6%89%8B%E6%B3%95. (2015).
[18] Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov. 2013. The Parrot is
Dead: Observing Unobservable Network Communications. In IEEE Symposium
on Security and Privacy.
[19] Jill Jermyn and Nicholas Weaver. 2017. Autosonda: Discovering Rules and Trig-
gers of Censorship Devices. In USENIX Workshop on Free and Open Communica-
tions on the Internet (FOCI).
[20] Dan Kaminsky. 2008.
It’s The End of the Cache As We Know It. http://
kurser.lobner.dk/dDist/DMK_BO2K8.pdf. (2008).
[21] Sheharbano Khattak, Mobin Javed, Philip D. Anderson, and Vern Paxson. 2013.
Towards Illuminating a Censorship Monitor’s Model to Facilitate Evasion. In
USENIX Workshop on Free and Open Communications on the Internet (FOCI).
[22] George T. Klees, Andrew Ruef, Benjamin Cooper, Shiyi Wei, and Michael Hicks.
2018. Evaluating Fuzz Testing. In ACM Conference on Computer and Communica-
tions Security (CCS).
[23] Fangfan Li, Abbas Razaghpanah, Arash Molavi Kakhki, Arian Akhavan Niaki,
David Choffnes, Phillipa Gill, and Alan Mislove. 2017. lib.erate, (n): A library
for exposing (traffic-classification) rules and avoiding them efficiently. In ACM
Internet Measurement Conference (IMC).
[24] Richard McPherson, Amir Houmansadr, and Vitaly Shmatikov. 2016. Covert-
Cast: Using Live Streaming to Evade Internet Censorship. In Privacy Enhancing
Technologies Symposium (PETS).
[25] Hooman Mohajeri Moghaddam, Baiyu Li, Mohammad Derakhshani, and Ian
Goldberg. 2012. SkypeMorph: Protocol Obfuscation for Tor Bridges. In ACM
Conference on Computer and Communications Security (CCS).
[26] Zubair Nabi. 2013. The Anatomy of Web Censorship in Pakistan. In USENIX
Workshop on Free and Open Communications on the Internet (FOCI).
[27] Kei Yin Ng, Anna Feldman, and Chris Leberknight. 2018. Detecting Censorable
Content on Sina Weibo: A Pilot Study. In Hellenic Conference on Artificial Intelli-
gence (SETN).
[28] Paul Pearce, Ben Jones, Frank Li, Roya Ensafi, Nick Feamster, Nick Weaver, and
Vern Paxson. 2017. Global Measurement of DNS Manipulation. In USENIX Security
Symposium.
[29] Thomas H. Ptacek and Timothy N. Newsham. 1998.
Insertion, Evasion, and
Denial of Service: Eluding Network Intrusion Detection. In Secure Networks.
[30] Sigal Samuel. 2019. China is installing a secret surveillance app on touristsâĂŹ
phones. https://www.vox.com/future-perfect/2019/7/3/20681258/
china-uighur-surveillance-app-tourist-phone. (2019).
[31] Rachee Singh, Rishab Nithyanand, Sadia Afroz, Paul Pearce, Michael Carl
Tschantz, Phillipa Gill, and Vern Paxson. 2017. Characterizing the Nature and
Dynamics of Tor Exit Blocking. In USENIX Security Symposium.
[32] TelegramMessenger.
2019.
MTProxy.
TelegramMessenger/MTProxy. (2019).
https://github.com/
[33] Inc. The Tor Project. [n. d.]. Tor Project: Bridges. https://2019.www.
torproject.org/docs/bridges.html.en. ([n. d.]).
[34] Benjamin VanderSloot, Allison McDonald, Will Scott, J. Alex Halderman, and
Roya Ensafi. 2018. Quack: Scalable Remote Measurement of Application-Layer
Censorship. In USENIX Security Symposium.
[35] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos. 2016. IFuzzer:
An Evolutionary Interpreter Fuzzer using Genetic Programming. In European
Symposium on Research in Computer Security (ESORICS).
[36] Zhongjie Wang, Yue Cao, Zhiyun Qian, Chengyu Song, and Srikanth V. Krishna-
murthy. 2017. Your State is Not Mine: A Closer Look at Evading Stateful Internet
Censorship. In ACM Internet Measurement Conference (IMC).
[37] Zachary Weinberg, Jeffrey Wang, Vinod Yegneswaran, Linda Briesemeister,
Steven Cheung, Frank Wang, and Dan Boneh. 2012. StegoTorus: A Camou-
flage Proxy for the Tor Anonymity System. In ACM Conference on Computer and
Communications Security (CCS).
[38] Philipp Winter. 2012.
brdgrd (Bridge Guard).
NullHypothesis/brdgrd. (2012).
https://github.com/
[39] Philipp Winter and Stefan Lindskog. 2012. How the Great Firewall of China
is Blocking Tor. In USENIX Workshop on Free and Open Communications on the
Internet (FOCI).
[40] Eric Wustrow, Colleen M. Swanson, and J. Alex Halderman. 2014. TapDance: End-
to-Middle Anticensorship without Flow Blocking. In USENIX Annual Technical
Conference.
[41] Eric Wustrow, Scott Wolchok, Ian Goldberg, and J. Alex Halderman. 2011. Telex:
Anticensorship in the Network Infrastructure. In USENIX Annual Technical Con-
ference.
[42] Xueyang Xu, Morley Mao, and J. Alex Halderman. 2011. Internet Censorship in
China: Where Does the Filtering Occur?. In Passive and Active Network Measure-
ment Workshop (PAM).
[43] Tarun Kumar Yadav, Akshat Sinha, Devashish Gosain, Piyush Kumar Sharma,
and Sambuddho Chakravarty. 2018. Where The Light Gets In: Analyzing Web
Censorship Mechanisms in India. In ACM Internet Measurement Conference (IMC).
[44] Li Yuan. 2018. A Generation Grows Up in China Without Google, Face-
book or Twitter. https://www.nytimes.com/2018/08/06/technology/
china-generation-blocked-internet.html. (2018).
Appendices are supporting material that has not been peer-reviewed.
APPENDIX: GENEVA’S SYNTAX
For completeness, we include in this appendix a review of Geneva’s
syntax, which we use throughout the paper. For more details, please
see [9].
Actions Geneva forms action sequences by composing any number
of its five genetic building blocks, all of which mirror the packet
manipulations that can occur at the network layer:
(1) duplicate(A1, A2) duplicates a given packet and applies
action sequence A1 to the first copy and then A2 to the
second.
(2) fragment{protocol:offset:inOrder}(A1, A2)
performs IP-level packet fragmentation or transport-layer
packet segmentation, thereby replacing one packet with two
packets, and can deliver the fragments in- or out-of-order. It
applies A1 to the first fragment and A2 to the second.
(3) tamper{protocol:field:mode[:newValue]}(A)
modifies a particular field in the protocol header (or pay-
load) of the packet. There are two modes: replace changes
597
Come as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
the field to the newValue, whereas corrupt sets the field
to an equal number of random bits. tamper recomputes the
appropriate checksums and lengths, unless field itself is
a checksum or length; corrupt does not recompute check-
sums.
(4) drop discards the packet.
(5) send sends the packet.
Note that these primitives can be composed to construct any
stream of packets, so long as tamper supports their protocol
and field. In its original implementation [9], Geneva’s tamper
supported modifications of IPv4 and TCP; we explain in §4 how we
extend this to also support IPv6, UDP, DNS, and FTP.
Triggers Geneva applies each action sequence only to packets that
match a particular protocol:field:value. For example, a trigger
of TCP:flags:S would apply to all TCP SYN packets. Geneva’s
triggers demand an exact match: for instance, TCP:flags:S does
not match SYN+ACK packets.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Syntax Geneva represents its packet-manipulation strategies
with a domain-specific language that composes the above actions.
Geneva’s syntax for representing a trigger:action-sequence pair
is []--|. A Geneva strategy can
have a trigger:action-sequence pair for both inbound and outbound
packets; the syntax for this is  \/ .
As an example, Strategy 1 in §5 includes an outbound action se-
quence that triggers on SYN+ACK packets. It duplicates the SYN+ACK
packet: it converts the first copy into a RST packet by overwriting
the TCP flags, and likewise it converts the second copy to a SYN
packet, and sends them both in that order. (Note that there is no
“send” listed for the tamper; to simplify presentation, when no
action is given, it defaults to send.) This strategy has no inbound
action sequence. As we have shown, this is an effective server-side
evasion strategy for evading censorship of DNS, FTP, HTTP, and
HTTPS in China.
598