本章主要介绍了如何通过静态分析方式进行破解，介绍了一些工具的使用，以及破解流程、破解技巧。最常用的就是代码注入技术和全局搜索关键字符串等方式。可以看到，现在市面上的很多apk，仅通过静态分析是无法满足破解需求了，所以动态分析方式就来了，而且动态方式破解难度会很大，需要掌握的东西也很多，后面篇章会一一介绍动态破解的技巧和常见的问题。而静态方式破解也很重要，是动态分析的前提，所以这两种技术都必须很好地掌握。
第21章 动态调试smali源码
本章开始介绍另外一种破解apk方式：动态方式。动态方式相对于静态方式来说难度大一点，但是它比静态方式高效，能够针对更多的破解范围。破解一般的apk没有任何问题，不过不能代表能够破解所有的apk，因为没有绝对的安全，也是没有绝对的破解，双方都在进步，只能具体问题具体分析。
首先需要解释一下，为什么调试smali源码，而不是Java源码，因为进行过反编译的人知道，使用apktool反编译apk之后，会有一个smali文件夹，这里存放了apk对应的smali源码。
21.1 动态调试步骤
第一步：反编译apk
通过apktool工具进行apk的反编译，得到smali源码和AndroidManifest.xml，然后修改AndroidManifest.xml中的debug属性为true，同时在入口处加上waitForDebug代码，进行debug等待。一般入口都是先找到入口Activity的onCreate方法中的第一行处，这里需要注意的是，apktool工具一定要加上-d参数，这样反编译得到的文件是Java文件，这样才能够被Eclipse识别，进行调试。
第二步：回编译apk
修改完成AndroidManifest.xml和添加waitForDebug之后，需要使用apktool进行回编译，回编译之后得到的是一个没有签名的apk，还需要使用signapk.jar来进行签名，签名文件直接使用测试程序的签名文件就可以，最后进行安装。
第三步：将反编译smali工程导入Eclipse
将反编译之后的smali源码导入到Eclipse工程中，找到关键点，进行下断点。这里的关键点，一般是先大致了解程序运行的结构，然后找到需要破解的地方，使用View分析工具，或者使用jd-gui工具直接查看apk源码（使用dex2jar将dex文件转化成jar文件，然后用jd-gui进行查看），找到代码的大体位置，然后下断点。这里可以借助Eclipse的DDMS自带的View分析工具找到对应控件的resid，然后全局搜索这个控件的resid，或者直接在values/public.xml中查找，最终定位到这个控件位置，再查看它的点击事件即可。
第四步：设置远程调试
设置远程调试工程，首先运行需要调试程序，然后在DDMS中找到对应的调试服务端的端口号，然后在Debug Configurations中设置远程调试项目，设置对应的调试端口和ip地址（一般都是本机pc，那就是localhost），然后红色小蜘蛛变成绿色的，表示远程调试项目连接关联上了调试程序。这里需要注意的是，一定需要关联正确，不然是没有任何效果的，关联成功之后，就可以进行操作。
第五步：调试apk程序
操作的过程中，会进入到关键的断点处，通过F6单步，F5单步进入，F7单步跳出，进行调试。找到关键方法，然后通过分析smali语法了解逻辑，如果逻辑复杂的，可以通过查看具体的环境变量的值来观察，这里也是最重要的，也是最复杂的，同时这里也是没有规章可寻的，这与每个人的逻辑思维以及破解能力有关系。分析关键的加密方法是需要功底的，当然这里还需要注意一个信息，就是Log日志，这有时候也是很重要的一个信息。
第六步：编写代码实现核心逻辑
当知道了核心方法的逻辑，要想得到正确的密码，还是需要自己用语言去实现逻辑的，需要手动编写代码才能得到正确的密码。
21.2 案例分析
因为逆向是动手操作的过程，所以这里用一个例子来介绍如何操作。本节用阿里2014年安全挑战赛的第一题：AliCrack_one.apk，如图21-1所示。
图21-1 破解样本
这个题目输入密码就可以破解了，下面就来看看如何获取这个密码。
第一步：使用apktool来破解apk
命令如下：
命令不做解释了，但是有一个参数必须带上，那就是：-d。因为这个参数代表反编译得到的smali是Java文件，这里指文件后缀名是Java，如果不带这个参数，后缀名是smali的，但是Eclipse中是不会识别smali文件的，而能识别Java文件，所以这里一定要记得加上这个参数。
反编译成功之后，我们得到了一个out目录，如图21-2所示。
图21-2 反编译之后的目录
源码都放在smali文件夹中，如图21-3所示，进入查看一下文件。
图21-3 smali代码目录
这里全是Java文件，其实只是后缀名为Java了，内容还是smali文件：
第二步：修改AndroidManifest.xml中的debug属性
上面反编译成功了，下面为了后续的调试工作，所以还是需要做两件事：
1）修改AndroidManifest.xml中的android：debuggable=“true”。
这个属性在前面介绍run-as命令的时候也提到了，它标识这个应用是否是debug版本，这将会影响到这个应用是否可以被调试，所以这里必须设置成true。
2）在入口处添加waitForDebugger代码进行调试等待。
这里说的入口处就是程序启动的地方，就是一般的入口Activity。查找这个Activity的方法太多了，比如这里直接从上面得到的AndroidManifest.xml中找到，因为入口Activity的action和category是固定的：
当然还有其他方式，比如用aapt查看apk的内容方式，或者安装apk之后用adb dumpsys activity top命令查看。找到入口Activity之后，直接在它的onCreate方法的第一行加上waitForDebugger代码即可，找到对应的MainActivity的smali源码，然后添加一行代码：
这个是smali语法的，其实对应的Java代码就是：
注意：其实还有一种更方便的方式，就是使用am命令，以debug模式启动一个应用：
后面再进行调试的时候都会采用这种方式了。
第三步：回编译apk并且进行签名安装
代码如下：
还是使用apktool进行回编译：
编译完成之后，将得到debug.apk文件，但是这个apk是没有签名的，所以是不能安装的，那么下面需要进行签名。这里使用Android中的测试程序的签名文件和sign.jar工具进行签名，如图21-4所示。
图21-4 签名工具signapk.jar
命令如下：
签名之后，就可以进行安装了。
第四步：将smali源码导入到Eclipse中
这里新建一个Java项目，记住不是Android项目，因为最后的调试工作其实是借助于Java的调试器，然后勾选“Use default location”选项，选择smali源码目录，也就是上面反编译之后的out目录，点击完成，如图21-5所示。
图21-5 Eclipse中导入smali项目
导入源码之后的项目工程结构如图21-6所示。
主要看MainActivity类，如图21-7所示。
第五步：找到关键点，然后打断点
这一步要具体问题具体分析。比如这个例子中，当输入密码之后，肯定要点击按钮，然后触发密码的校验过程，那么要找到这个button的定义的地方，然后进入它的点击事件中就可以了。这里分为三步走：
1）使用Eclipse自带的View分析工具找到Button的ResId，如图21-8所示。点击之后，需要等待一会，分析View之后的结果，如图21-9所示。
这里能够看到整个当前页面的全部布局，以及每个控件的属性值，需要找到button的resource-id，这里看到定义是@+id/button这个值。
2）得到这个ResId之后，能否在smali项目中全局搜索这个值，就可以定位到这个button的定义的地方呢？如图21-10所示。然后看看搜到的结果，如图21-11所示。
是在资源文件中搜到了这个id的定义，这个id值对应的是0x7F05003E。当然除了这种方式，还有一种方式能快速找到这个id对应的整型值，那就是在反编译之后的values/public.xml文件中，如图21-12所示。
这个文件很有用，它是整个apk中所有资源文件定义的映射内容，比如drawable/string/anim/attr/id等这些资源文件定义的值、名字和整型值对应的地方，如图21-13所示。
图21-6 导入成功效果图
图21-7 入口类代码
图21-8 view分析工具按钮
图21-9 分析工具效果图
图21-10 全局搜索关键字
图21-11 全局搜索结果
图21-12 public.xml文件
图21-13 public.xml内容
这个文件很重要，是寻找突破口的关键点，比如有时候需要通过字符串内容来定位关键点，这里就可以通过string的定义来找到对应的整型值即可。
当找到了button对应的id值了之后，就可以用这个id值再一次全局搜索一下，因为Android中编译之后的apk，在代码中用到的ResId都是用一个整型值代替的，这个整型值就是在R文件中做了定义，将资源的id和一个值对应起来，然后代码里面一般使用R.id.button这样的值，再编译出apk的时候，这个值就会被替换成对应的整型值，所以再全局搜索0x7F05003E，如图21-14所示。搜索的结果如图21-15所示。
这里就定位到了代码中用到的这个button。进入代码看看，如图21-16所示。在这里看到使用了findViewById的方式定义Button，再简单分析一下smali语法，下面是给button添加一个按钮事件，这里用的是内部类MainActivity$1，到这个类看看，它肯定实现了OnClickListener接口，那么直接搜onClick方法，如图21-17所示。
图21-14 全局搜索id值
图21-15 全局搜索id结果值
图21-16 定位代码位置
图21-17 点击事件方法
在这里就可以下个断点了，这里就是触发密码校验过程的地方。
第六步：运行程序，设置远程调试项目
在第五步中，找到了关键点，然后打上断点，下面就来运行程序，然后在Eclipse中设置远程调试的项目，运行程序。因为加入了waitForDebug的代码，所以启动的时候会出现一个Wait debug的对话框。不过，测试的时候，手机没有出现这个对话框，而是一个白屏，不过这不影响。程序运行起来之后，看看如何在Eclipse中设置远程调试项目，首先找到需要调试的程序对应远程调试服务端的端口，如图21-18所示。
图21-18 调试端口图
这里要注意以下几点：第一点，在程序等待远程调试服务器的时候，前面会出现一个红色的小蜘蛛。第二点，在调试服务端我们会看到两个端口号8600/8700，这里需要解释一下，为什么会有两个端口号呢？首先这里的端口号代表的是，远程调试服务器端的端口，下面简单来看一下Java中的调试系统，如图21-19所示。
图21-19 Java中的调试系统
这里有三个角色：
1）被调试的客户端。可以认为需要破解的程序就是客户端，如果一个程序可以被调试，当启动的时候，会有一个JDWP线程用来和远程调试服务端进行通信，如下所示：
需要破解的程序启动了JDWP线程，注意这个线程也只有当程序是debug模式下才有的，也就是AndroidManifest.xml中的debug属性值必须是true的时候，这也是一开始为什么要修改这个值的原因。
2）JDWP协议（用于传输调试信息，比如调试的行号、当前的局部变量的信息等），这可以说明，为什么在一开始的时候，反编译成Java文件，因为为了Eclipse导入能够识别的Java文件，然后为什么能够调试呢？因为smali文件中有代码的行号和局部变量等信息，所以可以进行调试。
3）远程调试的服务端，一般是有JVM端，就是开启一个JVM程序来监听调试端，这里就可以认为是本地的PC机。当然必须有端口用来监听，那么上面的8600端口就是这个作用，而且端口是从8600开始，后续的程序端口号都是依次加1的，比如其他调试程序端口如图21-20所示。
图21-20 调试端口
那么有了8600端口，为什么还有一个8700端口呢？它是干什么的？其实它的作用就是远程调试端备用的基本端口。不过，在实际过程中，还是建议使用程序独有的端口号8600，可以查看8600和8700端口在远程调试端（本地pc机）的占用情况，如下所示。
8600端口和8700端口号都是对应的javaw程序，javaw程序就是启动一个JVM来进行监听的。到这里就弄清楚了Java中的调试系统以及远程调试的端口号。
注意，其实可以使用adb jdwp命令查看当前设备中可以被调试的程序的进程号信息，如下所示：
下面继续，知道了远程调试服务端的端口8600以及ip地址，这里就是本地ip：localhost/127.0.0.1。可以在Eclipse中新建一个远程调试项目，将smali源码工程和设备中需要调试的程序关联起来。右击被调试的项目→选择Debug Configurations，如图21-21所示。
图21-21 设置调试项目
然后开始设置调试项目，如图21-22所示。
图21-22 设置调试项目
选择Romote Java Application，在Project中选择被调试的smali项目，在Connection Type中选择SocketAttach方式。其实还有一种方式是Listener的，如图21-23所示。这两种方式的区别如下所示：
·Listner方式：调试客户端启动就准备好一个端口，当调试服务端准备好了，就连接这个端口进行调试。
·Attach方式：调试服务端开始就启动一个端口，等待调试端来连接这个端口。
图21-23 调试的两种方式
一般都是选择Attach方式来进行操作的。设置完远程调试的工程之后，开始运行，发现设备上的程序还是白屏，这是为什么呢？看看DDMS中调试程序的状态，如下所示：
关联到了这个进程，上面使用的是8700端口号，这时选中了这个进程，就把smali调试项目关联到了这个进程，破解的进程没响应了，立马改一下，用8600端口，如下所示：
这下成功了，看到红色的小蜘蛛变成绿色的了，说明调试端已经连接上远程调试服务端了。
注意：在设置远程调试项目的时候，一定要注意端口号的设置，不然没有将调试项目源码和调试程序关联起来，是没有任何效果的。
第七步：开始运行调试程序，进入调试
在程序的文本框中输入：gggg内容，点击开始，如图21-24所示。
图21-24 进入断点
到这里看到期待已久的调试界面出来了，到了开始的时候加的断点处，就可以开始调试了，使用F6单步调试，F5单步跳入，F7单步跳出进行操作。这里使用v3变量保存了输入的内容，如图21-25和图21-26所示。
图21-25 查看变量值