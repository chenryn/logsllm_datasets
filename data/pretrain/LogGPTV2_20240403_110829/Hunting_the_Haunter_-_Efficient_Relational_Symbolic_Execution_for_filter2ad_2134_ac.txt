it is deﬁned as Mem(µ
(cid:86)\ SB (µ
, δ)
(cid:86)
The evaluation of a store instruction is detailed in Algo-
rithm 3. First, the function evaluates the symbolic values of
the index and check that it can be leaked securely under the
regular path predicate πreg (i.e. the conjunction of the retired
path predicate π with all the pending conditions in(cid:101)π, plus the
invalidation of the transient loads in (cid:101)λ). Then, it updates the
symbolic memory with a symbolic store operation and sets
the retirement depth of this store to δ + ∆. This retirement
depth is used to determine which store operations are pending
in the store buffer and which ones are committed to the main
memory.
Func eval_store(σ) where P [σ.l] = store i v is
(cid:86) ← eval_expr(σ, i);
ι
(cid:86) ← eval_expr(σ, v);
ν
πreg (cid:44) retire ALL(σ.π, σ.(cid:101)π, σ.(cid:101)λ, σ.δ);
, πreg); (cid:66) Leakage of i is secure
(cid:86)
assert secLeak (ι
σ(cid:48) ← σ; σ(cid:48).l ← σ.l + 1;
(cid:66) Update memory, store will retire after ∆ steps
σ(cid:48).µ
return σ(cid:48)
(cid:86) ← (store(σ.µ
), δ + ∆);
(cid:86)
(cid:86)
, ν
, ι
(cid:86)
Algorithm 3: Evaluation of store instructions where
retire ALL returns the regular path predicate (details in
Section IV-B3).
2) Evaluation of load expressions: Load expressions can
either take their value from a pending store in the store buffer
with a matching address via store-to-load forwarding; or can
speculatively bypass pending stores in the store buffer and take
their value from the main memory [30]. Instead of considering
all possible interleavings between a load expression and prior
stores in the store-buffer, we use read-over-write [37] to
identify and discard most cases in which the load and a prior
store naturally commute. Read-over-write is a well known
simpliﬁcation for the theory of arrays which resolves select
operations on symbolic arrays ahead of the solver.
To efﬁciently compare indexes, read-over-write relies on
syntactic term equality. The comparison function eq#(i, j)
returns true (resp. false) only if i and j are syntactically
equal (resp. different). If the terms are not comparable, it is
undeﬁned, denoted ⊥.
To efﬁciently resolve select operations ahead of the solver,
read-over-write deﬁnes a lookup mem function relying on this
syntactic term equality:
(cid:86)
lookup mem(µ
(cid:86)
lookup mem(µ
(cid:86)
0, i) (cid:44) select(µ
n, i) (cid:44)
0, i)
(cid:86)
ϕ
(cid:86)
lookup mem(µ
(cid:86)
select(µ
n, i)
n−1, i)
if eq#(i, j)
if ¬eq#(i, j)
if eq#(i, j) = ⊥
(cid:44) store(µ
(cid:86)
(cid:86)
(cid:86)
).
where µ
n−1, j, ϕ
n
(cid:86)
Example: Consider a memory µ
such that:
(cid:86)
µ
(cid:86)
(cid:86)
[ ]
(cid:86)
(cid:86)
(cid:86)
eax φ
• lookup mem(µ
• lookup mem(µ
= ebp − 8 ϕ
ebp − 4 ψ
, ebp − 8) returns ϕ
(cid:86)
.
, ebp − 4) ﬁrst compares indexes ebp − 4
and ebp − 8 and determines that they are syntactically
distinct (¬eq#(ebp − 4, ebp − 8)). It then moves to the
(cid:86)
second element, returns ψ
.
, eax) compares indexes ebp − 8 and eax
but, without further information, the equality or disequal-
ity of ebp and eax cannot be determined (eq#(ebp −
4, eax) = ⊥). Therefore the select operation cannot be
simpliﬁed.
• lookup mem(µ
(cid:86)
In order to model store-to-load forwarding efﬁciently, we
deﬁne an new function lookup SB in Algorithm 4 which
returns a set of value from matching stores in the store buffer.
Additionally, lookup SB returns the depth at which each load
must be invalidated, that is, the retirement depth of a most
recent store to the same address.
Func lookup SB (SB , M em, i) is
S ← ∅; δ ← ∞;
(cid:66) Load from store buffer
(cid:86)
for ((store(µ
), δ(cid:48)) in SB ) do
, δ)}; δ ← δ(cid:48);
(cid:86)
(cid:86)
, j, ϕ
if eq#(i, j) = true then
S ← S ∪ {(ϕ
else if eq#(i, j) = ⊥ then
S ← S ∪ {(select(µ
(cid:66) Load from main memory
S ← S ∪ {(lookup mem(M em), δ)};
return S
else continue;
(cid:86)
(cid:66) Must alias
(cid:66) May alias
(cid:66) Must not alias
, i), δ)}; δ ← δ(cid:48);
Algorithm 4: Deﬁnition of lookup SB
7
(cid:86)
Finally, we deﬁne a function lookup ite(µ
, i,(cid:101)λ, δ) in Algo-
boolean variables declared in the process to(cid:101)λ. Additionally, in
rithm 5 which encodes the result of lookup SB as a symbolic
if-then-else expression using fresh boolean variables. The
function returns the value of the load expression, and adds the
the implementation of BINSEC/HAUNTED, we use the name
of the boolean variables to encode information about
the
location of the load and of the forwarding store. Therefore,
using the counterexample returned by the solver it is possible
to understand which stores have been bypassed to trigger
the violation. This helps users understand the violation and
reconstruct the attack graph [38].
Func lookup ite((cid:101)λ, µ
(cid:86)
, i, δ) is
(cid:86)
S ← lookup SB (SB (µ
(cid:86) ← get∞(S);
S, ν
(cid:86)
for (ϕ
, δret) in S do
b ← f resh_boolean_var;
(cid:86) ← ite β then ϕ
(cid:86)
(cid:86)
;
ν
else ν
(cid:101)λ ←(cid:101)λ ∪ {(β, δret)};
return ν,(cid:101)λ
(cid:86)
, δ), M em(µ
(cid:66) Get regular value from S
, δ), i);
(cid:66) Save retire depth
Algorithm 5: Deﬁnition of lookup ite
The evaluation of a load instruction is detailed in Algo-
rithm 6. First, the function evaluates the symbolic values of
the index and check that it can be leaked securely. Then it
calls lookup ite, which returns the set of symbolic values that
(cid:86)
the load can take, encoded as a single if-then-else expression ι
and updates the set of transient load(cid:101)λ. Finally, it updates the
register map with the load value and sets its retirement depth
to δ + ∆. Retirement depth is later used in the evaluation of
conditional branches to determine whether the condition might
depend on memory.
(cid:86)
Func eval_load(σ) where P [σ.l] = v := load i is
, σ.π); (cid:66) Leakage of i is secure
,(cid:101)λ(cid:48) ← lookup ite(σ.(cid:101)λ, σ.µ
σ(cid:48) ← σ; σ(cid:48).l ← σ.l + 1; σ(cid:48).(cid:101)λ ←(cid:101)λ(cid:48);
(cid:86) ← eval_expr(σ, i);
ι
(cid:86)
assert secLeak (ι
(cid:86)
ν
(cid:66) Update v with load value and current depth
σ(cid:48).ρ ← σ.ρ[v (cid:55)→ (ν
return σ(cid:48)
Algorithm 6: Evaluation of load instructions.
, σ.δ + ∆)];
(cid:86)
, σ.δ);
, ι
(cid:86)
3) Invalidate transient loads: Transient load values can
be invalidated when more recent matching stores are retired
by setting the corresponding boolean variables to f alse. The
function retire STL(π,(cid:101)λ, δ), deﬁned in Algorithm 7, removes
from the set of transient
the loads with an
invalidation depth below δ, and set the corresponding booleans
to f alse in the path predicate π. For readability, we introduce
a function retire ALL which stops all speculation by applying
both retire PHT and retire STL.
loads (cid:101)λ all
C. Theorems
In this section we prove that Haunted RelSE is correct
and complete (up-to-an-unrolling-bound) for SCT. This means
8
Func retire STL(π,(cid:101)λ, δcurrent) is
π(cid:48) ← π;(cid:101)λ(cid:48) ← ∅;
for (β, δret) in(cid:101)λ do
else (cid:101)λ(cid:48) ←(cid:101)λ(cid:48) ∪ {(β, δret)} ;
return (π(cid:48),(cid:101)λ(cid:48))
π(cid:48) ← π(cid:48) ∧ (β = f alse);
if δret ≤ δcurrent then
(cid:66) Load to retire
Algorithm 7: Retire expired load values.
that when Haunted RelSE reports a violation, it is a real
violation of SCT (no over-approximation); and when it reports
no violations up to depth k then the program is secure up
to depth k (no under-approximation). To this end, we prove
that Haunted RelSE is equicvalent to Explicit RelSE and show
that Explicit RelSE is correct and complete up-to-an-unrolling-
bound for SCT.
Theorem 1. Explicit RelSE is correct and complete up-to-an-
unrolling-bound for speculative constant-time.
Proof (Sketch). The proof is a simple extension of the proofs of
correctness and completeness of RelSE for constant-time [16],
to the speculative semantics. The extension requires to show
that 1) violations reported on transient paths in the symbolic
execution correspond to violations in concrete transient ex-
ecution, and 2) if there is a violation in concrete transient
execution, then there is a path in symbolic execution that
(cid:3)
reports this violation.
Next, we show that Haunted RelSE is equivalent to Explicit
RelSE.
Theorem 2 (Equivalence Explicit and Haunted RelSE).
Haunted RelSE detects a violation in a program if and only if
Explicit RelSE detects a violation.
A sketch a proof is given in Appendix B. We ﬁrst show that
the theorem holds for Spectre-PHT: after a conditional branch,
the two paths explored in Haunted RelSE fully capture the
behavior of the four paths explored in Explicit RelSE. Then
we show that it holds for Spectre-STL: after a load instruction,
the single path resulting from Haunted RelSE fully captures
the behavior of the multiple paths explored in Explicit RelSE.
Corollary 1. Haunted RelSE is correct and complete up-to-
an-unrolling-bound for speculative constant-time.
D. BINSEC/HAUNTED, a tool for Haunted RelSE
We implement Haunted RelSE on top of the binary-level
analyzer BINSEC [39] in a tool named BINSEC/HAUNTED2.
BINSEC/HAUNTED takes as input an x86 executable, the loca-
tion of secret inputs, an initial memory conﬁguration (possibly
fully symbolic), the speculation depth, and size of the store
buffer. BINSEC/HAUNTED explores the program in a depth-
ﬁrst search manner, prioritizing transient paths over regular
paths, and reports SCT violations with counterexamples (i.e.,
initial conﬁgurations and speculation choices leading to the
violation). It uses the SMT solver Boolector [40], currently
the best for the theory of bitvectors [37], [41].
2Open sourced at: https://github.com/binsec/haunted
V. EXPERIMENTAL EVALUATION
We answer the following research questions:
RQ1 Effectiveness. Is BINSEC/HAUNTED able to ﬁnd Spectre-
PHT and Spectre-STL violations in real-world crypto-
graphic binaries?
RQ2 Haunted vs. Explicit. How does Haunted RelSE com-
pares against Explicit RelSE?
RQ3 BINSEC/HAUNTED vs. SoA tools. How does BIN-
SEC/HAUNTED compare against state-of-the-art tools?
To answer RQ1 and RQ2, we compare the performance of
Explicit and Haunted explorations strategies for RelSE—both
implemented in BINSEC/HAUNTED — on a set of real word
cryptographic binaries and litmus benchmark (Sections V-B
and V-C). To answer RQ3, we compare BINSEC/HAUNTED
against state-of-the-art competitors, KLEESpectre [11] and
Pitchfork [5] (Section V-D).
Legend. In this section, Ix86 is the number of unique x86
instructions explored, P is the number of paths explored, T is
the overall execution time,
is the number of violations (i.e.
the number instructions leaking secret data),
is the number
of timeouts,  is the number of programs proven secure,  is
the number of programs proven insecure.
A. Benchmarks
Experiments were performed on a laptop with an Intel(R)
Xeon(R) CPU E3-1505M v6 @ 3.00GHz processor and 32GB
of RAM. In the experiments, all inputs are symbolic except for
the initial stack pointer esp (similar as related work [5]), and
data structures are statically allocated. The user is expected to
label secrets, all other values are public. We set the speculation
depth to 200 instructions and the size of the store buffer to
20 instructions. Additionally, we only consider indirect jump
targets resulting from in-order execution and implement a
shadow stack to constrain return instructions to their proper
return site. Considering transient
jump targets requires to
model indirect jumps on arbitrary locations, which is doable
but intractable for symbolic execution.
We evaluate BINSEC/HAUNTED on the following pro-
grams:
• litmus-pht: 16 small
patched with index masking [19],
test cases (litmus tests) for
Spectre-PHT taken from Pitchfork’s modiﬁed set of Paul
Kocher’s litmus tests3,
• litmus-pht-patched: litmus-pht that we
• litmus-stl: our new set of litmus tests for Spectre-
• Cryptographic primitives from OpenSSL and Libsodium
cryptographic libraries (detailed in Table I), including and
extending those analyzed in [5].
STL,4
Programs are compiled statically for a 32-bit x86 architecture
with gcc 10.1.0. Litmus tests are compiled with options
-fno-stack-protector and Spectre-STL litmus tests are
additionally compiled with -no-pie and -fno-pic in order
3https://github.com/cdisselkoen/pitchfork/blob/master/new-testcases/
spectrev1.c
4Open sourced at: https://github.com/binsec/haunted_bench
to rule out violations introduced by these options (see Sec-
tion VI). For the same reason, donna and tea are compiled
without stack protectors -fno-stack-protector and for
optimization levels O0, O1, O2, O3, and Ofast. Libsodium is
compiled with the default Makeﬁle and OpenSSL is compiled
with optimization level O3 (both including stack protector).
Programs
tea_encrypt3
curve25519-donna4
Libsodium secretbox5
OpenSSL ssl3-digest-rec6
OpenSSL mee-cbc-decrypt6
Type
Block cipher
Elliptic curve
Stream cipher
HMAC
MEE-CBC
Ix86
100
5k
3k
2k
6k
Key
Msg
16
32
32
32
16+32
8
-
256
256
64
Table I: Cryptographic benchmarks, with approximate static
instruction count (Ix86) (excluding libc code) and sizes of
secret keys and messages (Msg) in bytes.
Note on Stack Protectors: Error-handling code introduced
by stack protectors is complex and contains many syscalls
that cannot be analyzed directly in pure symbolic execution.
BINSEC/HAUNTED stops path execution on syscalls and only
jump on the error-handling code of stack protectors once per
program, meaning that it might miss violations in unexplored
parts of the code. Moreover, timeout is set to 1 hour for litmus
tests, tea, and donna; but extended to 6 hours for code
containing stack protectors (Libsodium and OpenSSL).
B. Performance for Spectre-PHT (RQ1-RQ2)
We compare the performance of Haunted RelSE and Ex-
plicit RelSE—that we call Haunted and Explicit in the tables
for brevity—for detecting Spectre-PHT violations. In order to
focus on Spectre-PHT only, we disable support for Spectre-
STL. Additionally, we also report the performance for standard
constant-time veriﬁcation (without speculation) as a baseline,
called NoSpec. Results are presented in Table II. To show the
importance of Haunted RelSE for path pruning in programs
containing loops, we also detail the execution of a litmus test
containing a loop (case_5) in Appendix C.
Results. For litmus-pht and litmus-pht-masked, we
can see that Haunted RelSE:
path explosion (see Appendix C),
• explores less paths (4×) for an equivalent result, limiting
• analyzes programs faster (1437× and 21× respectively),
• can fully explore 2 additional programs and ﬁnds 1 more
achieving performance in line with NoSpec,
violation whereas Explicit RelSE times-out.
For tea and donna there is no difference between Ex-
plicit and Haunted. Indeed, because these programs only have
a single feasible path in regular execution, Explicit RelSE forks
into two paths at each conditional branch instead of four (the
3https://www.schneier.com/sccd/TEA.C
4http://code.google.com/p/curve25519-donna/
5https://doc.libsodium.org/secret-key_cryptography/secretbox
6https://github.com/imdea-software/verifying-constant-time [42]
9
Programs
PHT
Ix86
litmus-pht
litmus-pht
masked