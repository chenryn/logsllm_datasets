title:Collusive Data Leak and More: Large-scale Threat Analysis of Inter-app
Communications
author:Amiangshu Bosu and
Fang Liu and
Danfeng (Daphne) Yao and
Gang Wang
Collusive Data Leak and More: Large-scale Threat
Analysis of Inter-app Communications
Amiangshu Bosu‡, Fang Liu∗, Danfeng (Daphne) Yao∗, Gang Wang∗
Department of Computer Science, Southern Illinois University, Carbondale, IL, USA‡
Department of Computer Science, Virginia Tech., Blacksburg, VA, USA∗
PI:EMAIL, {fbeyond, danfeng, gangwang}@vt.edu
the same app also use ICC to communicate with each other [23,
35]. App pairs may communicate via explicit or implicit intent,
depending on whether the speciﬁcation describes the name of the
target component (in the explicit intent) or only the attributes (in the
implicit intent).
ABSTRACT
Inter-Component Communication (ICC) provides a message passing
mechanism for data exchange between Android applications. It has
been long believed that inter-app ICCs can be abused by malware
writers to launch collusion attacks using two or more apps. However,
because of the complexity of performing pairwise program analysis
on apps, the scale of existing analyses is too small (e.g., up to several
hundred) to produce concrete security evidence. In this paper, we
report our ﬁndings in the ﬁrst large-scale detection of collusive
and vulnerable apps, based on inter-app ICC data ﬂows among
110,150 real-world apps. Our system design aims to balance the
accuracy of static ICC resolution/data-ﬂow analysis and run-time
scalability. This large-scale analysis provides real-world evidence
and deep insights on various types of inter-app ICC abuse. Besides
the empirical ﬁndings, we make several technical contributions,
including a new open-source ICC resolution tool with improved
accuracy over the state-of-the-art, and a large database of inter-app
ICCs and their attributes.
Keywords
Android; Security; Collusion; Inter-component communication;
Inter-app communication; Privilege escalation; Intent;
1.
INTRODUCTION
An active and continuous operational effort is necessary to detect
stand-alone malicious apps. A recent report showed that hundreds of
Trojanized apps were missed by Google’s detection and some pop-
ular DressCode apps were downloaded over 100,000 times before
taken off the Google Play Market [11]. In the meantime, researchers
(e.g., [4, 5, 19, 20]) have identiﬁed more complex threats associated
with app pairs, i.e., inter-app communication security.
Inter-app data-ﬂow analyses go beyond the scope of a single app
by bridging the data ﬂows of two potentially communicating apps
and analyzing the resulting longer paths for data leaks. For example,
an app A accesses the location of the phone, passes the data to
another app B, which sends it to an external server. Android apps
typically use Inter-Component Communication (ICC), a message
passing mechanism, to exchange data. Again, components within
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
© 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053004
Inter-app data-ﬂow analyses are motivated by the need for char-
acterizing the collective security behavior of two (or more) applica-
tions. For example, to answer questions such as How many inter-app
data ﬂows are sensitive and result in external data-leaks and/or priv-
ilege escalations? Do these leaks use explicit intents or implicit
intents for the communication between the pairs? What is the most
commonly observed sensitive information that is leaked? There may
be different reasons behind sensitive inter-app data leaks. During
an intentional malware collusion, two apps would work together
to complete an attack goal [24]. Because of the evolving nature of
attacks and defenses, this new threat is indeed conceivable. With col-
lusion, malware writers can develop multiple benign looking apps
to evade the existing single-app screening mechanisms. These apps
can complement each other’s privileges and accomplish attack goals.
Single-app scanners (e.g., [1, 2, 12, 30]) cannot provide complete
data-ﬂow characterizations essential for inter-app threat analyses.
Inter-app data leaks may also be due to vulnerable apps being ex-
ploited for privilege escalations [9, 33]. Therefore, another relevant
question is Can we distinguish intentional data leaks (i.e., collusion)
from unintentional data leaks (due to vulnerable apps)? Answers to
these questions will help securing the mobile ecosystem, but have
not been answered in the literature.
The expensive nature of pairwise app analysis is a main obstacle
to answering these questions. It requires an in-depth data-ﬂow anal-
ysis for all apps, beyond the ICC interfaces. In addition, because of
the intrinsic worst-case quadratic complexity (O(N 2), where N is
the total number of apps) of the ICC linking operation, scaling the
analysis to hundreds of thousands of apps is challenging. Despite
recent efforts on inter-app ICC analysis, no satisfactory solution
exists that can support a large-scale pairwise analysis. For instance,
ApkCombiner extracts suspicious inter-app ICCs by combining
multiple apps into a single app, and then performs a conventional
single-app data-ﬂow analysis [20]. This approach is barely scalable,
since an expensive data-ﬂow analysis is repeated for all possible
combinations of app-pairs [33]. COVERT [4] and DidFail [19] elimi-
nate the need for redundant data-ﬂow analysis by analyzing each app
only once. However, COVERT uses formal model checkers incur-
ring high overhead. DidFail’s experimental evaluation is small and
uses an erroneous ICC intent resolution mechanism [29]. Although,
PRIMO predicts the likelihoods of inter-app ICC occurrences [26],
it is not designed for collusion detection.
In this work, we develop a scalable and accurate tool DIAL-
Droid (Database powered ICC AnaLysis for anDroid) for inter-app
ICC analysis. We use DIALDroid to perform the ﬁrst systematic
large-scale security analysis on inter-app data-ﬂows among 110,150
apps, including 100,206 most popular apps from the Google Play,
and 9,944 malware apps from the Virus Share1. DIALDroid com-
pletes such a large-scale analysis within a reasonable time frame
(6,340 total hours of program analysis and 82 minutes of ICC linking
and detection). Our key design characteristics include an adaptive
and pragmatic data ﬂow analysis, highly precise ICC resolution, fast
ICC matching, and ability to execute fast queries on an optimized
relational database. Our paper provides empirical evidence on app
collusion and privilege escalations. We summarize our contributions
as follows.
• We develop an Android security tool, DIALDroid, for ana-
lyzing ICC-based sensitive inter-app data ﬂows. Our design
leverages relational database for a scalable matching of ICC en-
try and exit points, and fast analysis. DIALDroid outperforms
state-of-art solutions (IccTA+ApkCombiner2 and COVERT)
on benchmark apps, with a higher accuracy (precision 100 %,
recall 91.2%) and orders of magnitude shorter processing time.
In addition, DIALDroid’s ICC extractor is more accurate than
the state-of-the-art solution IC3 [28], with 28% more identiﬁed
intents and 33% less failed cases.
• We use DIALDroid to analyze the sensitive inter-app ICCs
among 100,206 apps from the Google Play Market, and char-
acterize them into 6 threat categories (in Table 3). Our threat
categorization is based on threat types (collusive data leak or
privilege escalation) and intent types (explicit or implicit).
We found that collusive data leaks and privilege escalations
mostly use implicit intents but did not observe any explicit-
intent based collusion. These ﬁndings suggest that collusive
data leak research should start to examine implicit intents,
rather than focusing on explicit intents (e.g., [13]). Our case
studies revealed a number of privilege escalation cases among
same developer app pairs.
Although the total numbers of sensitive ICCs and app pairs
are extremely high, the number of sender apps initiating these
ICCs is surprisingly small. E.g., 1,785,102 inter-app ICCs
exhibiting privilege escalation behavior (without collusive data
leaks) are originated from 62 sender apps. We also had similar
observations in other threat categories. We found that the
majority of inter-app ICCs (> 99%) do not carry any sensitive
data. This property implies that the typical workload of inter-
app ICC analysis is much lower than the worst case workload.
• Our dataset and tools can potentially beneﬁt the broader An-
droid community. We have open-sourced our entire tool-suite
on GitHub3 and have made our database available4 for other
researchers. Our database contains extremely rich data-ﬂow
attributes of 100,206 apps from the Google Play and 9,944 apps
from the Virus Share. These attributes are extracted by Flow-
Droid static program analysis, organized into multiple rela-
tional tables. We envision the database being useful to both the
security and data mining communities to tackle open research
questions. In addition, we have released a benchmark suite for
1
2
3
4
http://virusshare.com
IccTA [21] is designed for intra-app ICCs in a single app. It
needs to use ApkCombiner [20] to combine app-pairs for inter-
app ICC analysis.
https://github.com/dialdroid-android/.
http://amiangshu.com/dialdroid/
inter-app collusion analysis, DIALDroid-Bench5, which con-
tains 30 real-world apps from Google Play. To our knowledge,
this is the ﬁrst inter-app collusion benchmark using real-world
apps, as opposed to proof-of-concept apps.
2. THREAT MODEL
Before we present our threat model, we ﬁrst provide a brief
overview of the Android ICC architecture and how malicious apps
can leverage inter-app ICCs to leak sensitive information. Compo-
nents are the basic building blocks of Android apps. There are four
types of components6. Activities, the most common components,
represent user interfaces. Services perform background processing.
Broadcast receivers respond to system-wide broadcast announce-
ments (e.g., Wiﬁ connected). Finally, content providers manage
a shared set of application data. Components communicate using
URIs and Intents, within an application (i.e., intra-app ICC) or be-
tween applications (i.e., inter-app ICC). An ICC exit point requires
an intent object as a parameter. An intent is either explicit (i.e.,
its recipient is explicitly named) or implicit (i.e., only a general
action is declared). Android system resolves intents at runtime. An-
droid’s intent resolution7 is based on (1) attributes of an implicit in-
tent (namely action, category, and data), and (2) IntentFilter
ﬁelds declared in the manifests (AndroidManfest.xml) of po-
tential receiver apps. The receiver app provides the ICC entry point.
Resolving intents through string analysis is a key to the detection
accuracy. Failure to identify matching ICC exit and entry points
results in missed detection (i.e., false negative).
Our inter-app security analysis is oriented around identifying pair-
wise data ﬂows from a sender app A to a receiver app B that result in
two types of threats: collusive data leak or privilege escalation. Priv-
ilege escalation (aka the confused deputy problem) is a well-deﬁned
threat where the receiver app B gains unauthorized permissions or
sensitive data as a result of its ICC communications with the sender
app A [6, 9]. Although the concept of collusive data leak has been
described in the literature [5, 24], it has not been formally deﬁned.
In our work, we deﬁne collusive data leak as a threat where the
receiver app B exﬁltrates the sensitive data obtained from its ICC
communications with the sender app A to an external destination
(e.g., via disk output or network output).
Our analysis aims to detect sensitive data ﬂows that result in
privilege escalation, collusive data leak, or both. Our labeling of
sensitive source and sink statements follows the SuSi project [31],
based known sensitive APIs (e.g., API to access deviceID). Insensi-
tive data ﬂows and sensitive data ﬂows that do not exhibit collusive
data leak and privilege escalation threats are excluded from the anal-
ysis. Our threat model excludes intent spooﬁng, where the sender
app forges intents to mislead receiver apps [9]. We consider both
explicit and implicit intents.
Next, we ﬁrst give our deﬁnitions for the security terms used in
the paper, including ICC exit leak, ICC entry leak, and sensitive ICC
channel. We then give formal deﬁnitions of both privilege escalation
and collusive data leak threats. Our experiments further distinguish
6 different subtypes of threats, based on various ICC and security
properties (in Table 3).
A sensitive ICC channel refers to an ICC link between
two components,
(i.e., an outgo-
ing ICC such as startActivity, bindService, and
startActivityForResult) to an ICC entry point (i.e., an
from an ICC exit point
5
6
7
https://github.com/dialdroid-android/dialdroid-bench/
http://developer.android.com/guide/components/fundamentals.html
http://developer.android.com/guide/components/intents-
ﬁlters.html#Resolution
incoming ICC such as onActivityResult and getIntent)
that transfers intents containing sensitive information. Our analysis
is focused on sensitive ICC channels and excludes non-sensitive
ICC channels.
A property of ICC exit leak is that an app’s ICC exit point is data
dependent on a sensitive data source, i.e., there exists a data-ﬂow
path from the sensitive source to the ICC exit. In the context of
inter-app ICCs, we use the ICC exit leak to describe the sender app.
Intuitively, ICC exit leaks identify sender apps that leak sensitive
data via inter-app ICCs.
A property of ICC entry leak is that an app’s ICC entry point
is the source of data-ﬂow paths of sensitive sinks that send the
received data externally (e.g, via networks). In the context of inter-
app ICCs, we use the ICC entry leak to describe the receiver app.
Intuitively, ICC entry leaks identify receiver apps that leak received
data externally. Next, we use the terminology introduced above to
deﬁne privilege escalation and collusion data leak.
• Collusive data leak is a threat associated with a sensitive
ICC channel between a sender component A in an app and a
receiver component B in another app, where A has an ICC
exit leak and B leaks the received data from A via an ICC
entry leak.
• Privilege escalation is a threat associated with a sensitive
inter-app ICC channel between a sender component A in an
app and a receiver component B in another app, where A has
an ICC exit leak and B does not have the permission to access
the data from A.
A collusive data leak may also result in a privilege escalation. Be-
cause of the overlap between the two threats, we further divide them
into 6 sub-categories of threats in Table 3. Inter-app ICCs that result
in neither collusive data leak or privilege escalation are not recorded.
Intentional vs. Unintentional Attacks. One of the difﬁculties in
collusion detection is to conﬁrm the cause of an observed problem-
atic data ﬂow. It is well known that vulnerable sender apps (e.g., with
exposed broadcast ICC interfaces) cause privilege escalations [9],
i.e., the receiver app can intentionally exploit the vulnerabilities.
However, intentional collusion between two apps may also result
in privilege escalation. Similarly, collusive data leak may be inten-
tional or inadvertent. Regardless of the causes, these data ﬂows can
potentially compromise the device and data security. Our large-scale
empirical study helps expose and pinpoint these disguised threats.
3. DIALDROID OVERVIEW
The workﬂow of our inter-app ICC security analysis involves
four key operations: ICC ENTRY / EXIT POINT EXTRACTION,
DATAFLOW ANALYSIS, DATA AGGREGATION, and ICC LEAK CAL-
CULATION. They are brieﬂy described below.
• ICC ENTRY / EXIT POINT EXTRACTION: Given an app, we ex-
tract the permissions and the attributes of the intent ﬁlters from
the AndroidManifest.xml ﬁle. We perform static anal-
ysis to determine the attributes of the intents passing through
ICC exit points.
• DATAFLOW ANALYSIS: We use static taint analysis to de-
termine ICC exit leaks and ICC entry leaks in an app. We
dynamically adjust the precision conﬁguration of taint analysis
to ensure the timely completion of each app.
• DATA AGGREGATION: We aggregate the data extracted in
previous two steps to store in a relational MySQL database.
DIALDroid database schema is composed of 42 tables and is
designed to facilitate efﬁcient storage and fast data retrieval.
• ICC LEAK CALCULATION: We use ﬁne-grained security poli-
cies to detect potential sensitive inter-app ICC channels. Using
SQL stored procedures and SQL queries, we compute ICCs
with collusive data leaks and privilege escalations.
DIALDroid executes the ﬁrst three steps once for each app
(complexity O(N ), where N is the total number of apps being
analyzed). The complexity of ICC leak calculator is O(mN ), where
m is the number of apps with ICC exit leaks and in the worst case,
m = N. However, for real-world apps m would several times
smaller than N. In our study, we found m is 28 times smaller than
N (explained in the appendix).
3.1
ICC Entry / Exit Point Extractor
This operation identiﬁes all the ICC end points (both entries and
exits) from apps, by performing a single pass of analysis on each
app. We describe our new tool IC3-DIALDroid for this purpose.
We have made this tool open source.8 Our ICC entry point extractor
subsystem extracts the manifest ﬁle from the apk, parses the per-
missions requested by the app, and parses the ICC entry points of
that app from IntentFilters. We use static analysis to identify
intent values, similar to prior studies [28, 29, 35]. Although our im-
plementation uses the libraries provided by IC3, the state-of-the-art
ICC extractor [28], our IC3-DIALDroid has several signiﬁcant en-
hancements providing better robustness and higher intent discovery
than IC3, which are described next.
IC3 conservatively adopts call graph generation procedure from
FlowDroid skipping incremental callback analysis, which incre-
mentally extends the call graph to include the newly discovered
callbacks, and the scan is run again since callback handlers are free
to register new callbacks on their own. This process is repeated until
the call graph reaches a ﬁxed point [3]. One pass callback analysis
improves the runtime performance of IC3. However, it results in
missed intents due to imprecise Android lifecycle modeling. In com-
parison, IC3-DIALDroid implements incremental callback analysis,
which signiﬁcantly increases the number of discovered intents.
IC3-DIALDroid analyzes on Android .apks directly. It does not
require the Dare tool for reverse engineering [27], and can directly
extract the attributes of ICC exit points. In comparison, IC3 is
dependent on the Dare tool. Although Android apps are developed
in Java, those are compiled into Dalvik bytecode (a custom format
developed by the Android project), instead of traditional Java class
ﬁle. Thus, IC3 requires the Dalvik bytecode to be retargeted using
Dare, which not only requires additional preprocessing time, but
also may introduce inaccuracies [27].
We identiﬁed several defects in IC3, speciﬁcally in handling
different types of real-world apks and the constraint solver’s failure
to reach a ﬁxed point even after a long time for some apps. We
ﬁxed those defects and implemented code to identify and break race
conditions.
We compared the performance of IC3-DIALDroid with IC3 on 29
applications from DroidBench 3.0 and 1,000 randomly selected apps
with a timeout of 15 minutes for each app. Table 1 shows a compar-
ison between the two tools. On DroidBench, DIALDroid took 13
seconds (8.6%) less than IC3 to compute entry and exit points and
identiﬁed the same number of intents. On the 1,000 randomly se-
lected real-world apps, DIALDroid identiﬁed 28% more intents and
encountered 33% less failed cases. However, due to more precise
lifecycle modeling, IC3-DIALDroid spent 13.3% more time.
8
Available
ic3-dialdroid.
at:
https://github.com/dialdroid-android/
Table 1: Comparisons of our ICC extractor tool IC3-DIALDroid
with the state-of-the-art IC3, in terms of robustness, accuracy, and
runtime on benchmark apps and 1,000 real-world apps. Our tool
identiﬁes 28% more intents and has 33% fewer failed cases for
real-world apps.
1,000 Real-World Apps
Time
43hrs
48hrs
Intents
found
30,640