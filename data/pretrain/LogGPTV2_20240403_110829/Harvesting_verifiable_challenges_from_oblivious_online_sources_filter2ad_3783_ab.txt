### Applying Our Challenge Harvesting Technique

We will first present a storage application, followed by an example of a client puzzle system, and finally, we will introduce a novel approach to backward security in cryptographic signature schemes.

#### Remote Storage and Auditing Applications

In the introduction, we motivated our challenge harvesting problem with the application of auditing remote storage systems, such as SafeStore [14]. Here, we will elaborate on a few key points:

- **Security Parameters**: Ideally, the size of the security parameters (e.g., 1024-bit RSA keys and 160-bit hash functions) should correspond to "80-bit security."

- **Deriver and Verifier**:
  - **Challenge Derivation**: \( \text{Challenge} := H(\text{Derivation}) \)
  - **Timestamp and Verification**: The derived challenge is timestamped, and the source data is verified.

#### Mitigating Sybil Attacks with Client Puzzles

One technique to mitigate Sybil attacks is to require a machine to solve a client puzzle to gain an identity on a P2P system. A regular user needs to solve only one puzzle, while an attacker must solve many to be effective. This setting presents two conflicting goals:

1. **Fresh Randomness**: The client puzzle challenge should include fresh randomness to prevent attackers from building up identities over time.
2. **Verification Efficiency**: The proof of work should be verifiable by many users, but the computational effort to gain an identity should be independent of the number of verifiers.

Our framework provides a straightforward solution to this problem. Let \( H_1 \) and \( H_2 \) be two independent hash functions modeled as ideal hash functions. A node in the client puzzle system will:

1. Derive a harvested challenge \( u \) with appropriate freshness.
2. Choose a random \( r \) until \( H_1(u | r) \) satisfies the client puzzle condition (e.g., its first \( k \) bits are 0's).
3. Set \( H_2(u | r) = \text{ID} \), which becomes the user's identity in the system.

The harvested challenge is output from a random oracle with sufficient entropy outside the attacker's control. Precomputation before deriving \( u \) will not help the attacker. If an attacker manipulates the inputs, it would only result in calling the random oracle again and starting the client puzzle over.

#### Backward Secure Signatures

In digital signature applications, a party signs a message along with a timestamp. Forward secure signatures [3] evolve a private signature key forward in time so that if it is compromised at time \( t \), an attacker cannot sign messages at an earlier time \( t' \).

Here, we explore the opposite idea: preventing an attacker from signing future messages if they compromise a machine at time \( t \). In the bounded retrieval model [6], we assume an attacker who compromises a machine is limited in the amount of information they can steal due to bandwidth constraints or detection risks.

To achieve this, a user creates \( n \) private signing key/certificate pairs \((k_1, c_1), \ldots, (k_n, c_n)\) and stores them on their machine. To sign a message \( M \) at time \( t \):

1. The user derives a harvested challenge \( u \) and hashes it to get a set \( S \) of \( k \) indices between 1 and \( n \).
2. The user signs \( M \) under all the private keys in set \( S \) and includes the corresponding certificates.
3. A verifier checks that \( u \) was derived correctly and that all signatures verify.

If an attacker compromises the machine at time \( t \) and leaves, they can only sign with the keys they retrieved. If enough keys remain uncompromised at a future time \( t' \), the attacker cannot sign a message because they lack the necessary keys dictated by the challenge \( u \).

### Our Framework

In this section, we describe a generic policy framework for challenge harvesting suitable for various applications with different freshness and security requirements. This framework is simple enough for application developers and flexible enough to adapt to various data sources, including future ones.

#### Basic Operation

Our system operates in two modes: deriver and verifier, as shown in Figure 1.

- **Deriver Mode**:
  - Inputs: Policy file, content sources, and policies.
  - Process: Queries sources, breaks content into chunks, packages them into a derivation, and hashes it to derive the challenge.
  - Output: Derived challenge and derivation.

- **Verifier Mode**:
  - Inputs: Policy file and derivation.
  - Process: Inspects the derivation, verifies content chunks, and hashes the derivation to obtain the challenge.
  - Output: Timestamp and derived challenge if verification is successful.

#### Data Sources

Our framework abstracts content providers into sources, which can encapsulate various types of data, such as news stories, stock quotes, web pages, and blog entries.

- **RSS Feeds**:
  - Suitable for harvested challenges due to widespread availability and consistent data format.
  - Policy attributes: URL, minimum and maximum entries, and maximum age.
  - Example: `source NYTimes (type = RSSFeed, url = "http://www.nytimes.com/services/xml/rss/nyt/HomePage.xml", min_entries = 5, max_entries = 20, max_age = 86400)`

- **Historical Stock Market Data**:
  - Provides public randomness and long-term verifiability.
  - Policy attributes: Ticker symbols and minimum entries.
  - Example: `source TechStocks (type = DailyQuotes, symbols = "GOOG,YHOO,MSFT,INTC,IBM", min_entries = 4)`

- **Explicit Randomness Servers**:
  - Used as a primary challenge source with fallback to harvested randomness.
  - Policy attributes: URL, maximum age, and verification key.
  - Example: `source AppsRandomServer (type = RandomServer, url = "url", max_age = t, verify_key = "filename")`

This framework allows for robust and flexible challenge harvesting, ensuring security and freshness in various applications.