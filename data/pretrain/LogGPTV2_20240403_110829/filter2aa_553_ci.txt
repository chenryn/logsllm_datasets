一下哪种方法更效率：拷贝一个地址还是拷贝整个数组？通常，程序要完成
某项操作只需要知道地址就可以了。如果确实需要拷贝整个数组，可以使用
strcpy()或strncpy()函数，本章稍后介绍这两个函数。
我们已经讨论了如何在程序中定义字符串，接下来看看如何从键盘输入
755
字符串。
756
11.2 字符串输入
如果想把一个字符串读入程序，首先必须预留储存该字符串的空间，然
后用输入函数获取该字符串。
11.2.1 分配空间
要做的第 1 件事是分配空间，以储存稍后读入的字符串。前面提到过，
这意味着必须要为字符串分配足够的空间。不要指望计算机在读取字符串时
顺便计算它的长度，然后再分配空间（计算机不会这样做，除非你编写一个
处理这些任务的函数）。假设编写了如下代码：
char *name;
scanf("%s", name);
虽然可能会通过编译（编译器很可能给出警告），但是在读入name
时，name可能会擦写掉程序中的数据或代码，从而导致程序异常中止。因
为scanf()要把信息拷贝至参数指定的地址上，而此时该参数是个未初始化的
指针，name可能会指向任何地方。大多数程序员都认为出现这种情况很搞
笑，但仅限于评价别人的程序时。
最简单的方法是，在声明时显式指明数组的大小：
char name[81];
现在name是一个已分配块（81字节）的地址。还有一种方法是使用C库
函数来分配内存，第12章将详细介绍。
为字符串分配内存后，便可读入字符串。C 库提供了许多读取字符串的
函数：scanf()、gets()和fgets()。我们先讨论最常用gets()函数。
11.2.2 不幸的gets()函数
757
在读取字符串时，scanf()和转换说明%s只能读取一个单词。可是在程序
中经常要读取一整行输入，而不仅仅是一个单词。许多年前，gets()函数就
用于处理这种情况。gets()函数简单易用，它读取整行输入，直至遇到换行
符，然后丢弃换行符，储存其余字符，并在这些字符的末尾添加一个空字符
使其成为一个 C 字符串。它经常和 puts()函数配对使用，该函数用于显示字
符串，并在末尾添加换行符。程序清单11.6中演示了这两个函数的用法。
程序清单11.6 getsputs.c程序
/* getsputs.c -- 使用 gets() 和 puts() */
#include 
#define STLEN 81
int main(void)
{
char words[STLEN];
puts("Enter a string, please.");
gets(words); // 典型用法
printf("Your string twice:\n");
printf("%s\n", words);
puts(words);
puts("Done.");
return 0;
}
758
下面是该程序在某些编译器（或者至少是旧式编译器）中的运行示例：
Enter a string, please.
I want to learn about string theory!
Your string twice:
I want to learn about string theory!
I want to learn about string theory!
Done.
整行输入（除了换行符）都被储存在 
words 
中，puts(words)和
printf("%s\n, words")的效果相同。
下面是该程序在另一个编译器中的输出示例：
Enter a string, please.
warning: this program uses gets(), which is unsafe.
Oh, no!
Your string twice:
Oh, no!
Oh, no!
Done.
编译器在输出中插入了一行警告消息。每次运行这个程序，都会显示这
行消息。但是，并非所有的编译器都会这样做。其他编译器可能在编译过程
中给出警告，但不会引起你的注意。
759
这是怎么回事？问题出在 gets()唯一的参数是 words，它无法检查数组
是否装得下输入行。上一章介绍过，数组名会被转换成该数组首元素的地
址，因此，gets()函数只知道数组的开始处，并不知道数组中有多少个元
素。
如果输入的字符串过长，会导致缓冲区溢出（buffer overflow），即多
余的字符超出了指定的目标空间。如果这些多余的字符只是占用了尚未使用
的内存，就不会立即出现问题；如果它们擦写掉程序中的其他数据，会导致
程序异常中止；或者还有其他情况。为了让输入的字符串容易溢出，把程序
中的STLEN设置为5，程序的输出如下：
Enter a string, please.
warning: this program uses gets(), which is unsafe.
I think I'll be just fine.
Your string twice:
I think I'll be just fine.
I think I'll be just fine.
Done.
Segmentation fault: 11
“Segmentation 
fault”（分段错误）似乎不是个好提示，的确如此。在
UNIX系统中，这条消息说明该程序试图访问未分配的内存。
C 
提供解决某些编程问题的方法可能会导致陷入另一个尴尬棘手的困
境。但是，为什么要特别提到gets()函数？因为该函数的不安全行为造成了
安全隐患。过去，有些人通过系统编程，利用gets()插入和运行一些破坏系
统安全的代码。
760
不久，C 编程社区的许多人都建议在编程时摒弃 gets()。制定 C99 标准
的委员会把这些建议放入了标准，承认了gets()的问题并建议不要再使用
它。尽管如此，在标准中保留gets()也合情合理，因为现有程序中含有大量
使用该函数的代码。而且，只要使用得当，它的确是一个很方便的函数。
好景不长，C11标准委员会采取了更强硬的态度，直接从标准中废除了
gets()函数。既然标准已经发布，那么编译器就必须根据标准来调整支持什
么，不支持什么。然而在实际应用中，编译器为了能兼容以前的代码，大部
分都继续支持gets()函数。不过，我们使用的编译器，可没那么大方。
11.2.3 gets()的替代品
过去通常用fgets()来代替gets()，fgets()函数稍微复杂些，在处理输入方
面与gets()略有不同。C11标准新增的gets_s()函数也可代替gets()。该函数与
gets()函数更接近，而且可以替换现有代码中的gets()。但是，它是stdio.h输
入/输出函数系列中的可选扩展，所以支持C11的编译器也不一定支持它。
1.fgets()函数（和fputs()）
fgets()函数通过第2个参数限制读入的字符数来解决溢出的问题。该函
数专门设计用于处理文件输入，所以一般情况下可能不太好用。fgets()和
gets()的区别如下。
fgets()函数的第2个参数指明了读入字符的最大数量。如果该参数的值
是n，那么fgets()将读入n-1个字符，或者读到遇到的第一个换行符为止。
如果fgets()读到一个换行符，会把它储存在字符串中。这点与gets()不
同，gets()会丢弃换行符。
fgets()函数的第3 个参数指明要读入的文件。如果读入从键盘输入的数
据，则以stdin（标准输入）作为参数，该标识符定义在stdio.h中。
因为 fgets()函数把换行符放在字符串的末尾（假设输入行不溢出），通
常要与 
fputs()函数（和puts()类似）配对使用，除非该函数不在字符串末尾
761
添加换行符。fputs()函数的第2个参数指明它要写入的文件。如果要显示在
计算机显示器上，应使用stdout（标准输出）作为该参数。程序清单11.7演
示了fgets()和fputs()函数的用法。
程序清单11.7 fgets1.c程序
/* fgets1.c -- 使用 fgets() 和 fputs() */
#include 
#define STLEN 14
int main(void)
{
char words[STLEN];
puts("Enter a string, please.");
fgets(words, STLEN, stdin);
printf("Your string twice (puts(), then fputs()):\n");
puts(words);
fputs(words, stdout);
puts("Enter another string, please.");
fgets(words, STLEN, stdin);
printf("Your string twice (puts(), then fputs()):\n");
puts(words);
fputs(words, stdout);
762
puts("Done.");
return 0;
}
下面是该程序的输出示例：
Enter a string, please.
apple pie
Your string twice (puts(), then fputs()):
apple pie
apple pie
Enter another string, please.
strawberry shortcake
Your string twice (puts(), then fputs()):
strawberry sh
strawberry shDone.
第1行输入，apple pie，比fgets()读入的整行输入短，因此，apple pie\n\0
被储存在数组中。所以当puts()显示该字符串时又在末尾添加了换行符，因
此apple pie后面有一行空行。因为fputs()不在字符串末尾添加换行符，所以
并未打印出空行。
第2行输入，strawberry shortcake，超过了大小的限制，所以fgets()只读
入了13个字符，并把strawberry 
sh\0 
储存在数组中。再次提醒读者注意，
puts()函数会在待输出字符串末尾添加一个换行符，而fputs()不会这样做。
763
fputs()函数返回指向 char的指针。如果一切进行顺利，该函数返回的地
址与传入的第 1 个参数相同。但是，如果函数读到文件结尾，它将返回一个
特殊的指针：空指针（null pointer）。该指针保证不会指向有效的数据，所
以可用于标识这种特殊情况。在代码中，可以用数字0来代替，不过在C语
言中用宏NULL来代替更常见（如果在读入数据时出现某些错误，该函数也
返回NULL）。程序清单11.8演示了一个简单的循环，读入并显示用户输入
的内容，直到fgets()读到文件结尾或空行（即，首字符是换行符）。
程序清单11.8 fgets2.c程序
/* fgets2.c -- 使用 fgets() 和 fputs() */
#include 
#define STLEN 10
int main(void)
{
char words[STLEN];
puts("Enter strings (empty line to quit):");
while (fgets(words, STLEN, stdin) != NULL && 
words[0] != '\n')
fputs(words, stdout);
puts("Done.");
return 0;
}
下面是该程序的输出示例：
764
Enter strings (empty line to quit):
By the way, the gets() function
By the way, the gets() function
also returns a null pointer if it
also returns a null pointer if it
encounters end-of-file.
encounters end-of-file.
Done.
有意思，虽然STLEN被设置为10，但是该程序似乎在处理过长的输入时
完全没问题。程序中的fgets()一次读入 STLEN - 1 个字符（该例中为 9 个字
符）。所以，一开始它只读入了“By the wa”，并储存为By the wa\0；接着
fputs()打印该字符串，而且并未换行。然后while循环进入下一轮迭代，
fgets()继续从剩余的输入中读入数据，即读入“y, the ge”并储存为y, the ge\0；
接着fputs()在刚才打印字符串的这一行接着打印第 2 次读入的字符串。然后
while 进入下一轮迭代，fgets()继续读取输入、fputs()打印字符串，这一过程
循环进行，直到读入最后的“tion\n”。fgets()将其储存为tion\n\0， fputs()打印
该字符串，由于字符串中的\n，光标被移至下一行开始处。
系统使用缓冲的I/O。这意味着用户在按下Return键之前，输入都被储存
在临时存储区（即，缓冲区）中。按下Return键就在输入中增加了一个换行
符，并把整行输入发送给fgets()。对于输出，fputs()把字符发送给另一个缓
冲区，当发送换行符时，缓冲区中的内容被发送至屏幕上。
fgets()储存换行符有好处也有坏处。坏处是你可能并不想把换行符储存
在字符串中，这样的换行符会带来一些麻烦。好处是对于储存的字符串而
言，检查末尾是否有换行符可以判断是否读取了一整行。如果不是一整行，
765
要妥善处理一行中剩下的字符。
首先，如何处理掉换行符？一个方法是在已储存的字符串中查找换行
符，并将其替换成空字符：
while (words[i] != '\n') // 假设\n在words中
i++;
words[i] = '\0';
其次，如果仍有字符串留在输入行怎么办？一个可行的办法是，如果目
标数组装不下一整行输入，就丢弃那些多出的字符：
while (getchar() != '\n') // 读取但不储存输入，包括\n
continue;
程序清单11.9在程序清单11.8的基础上添加了一部分测试代码。该程序
读取输入行，删除储存在字符串中的换行符，如果没有换行符，则丢弃数组
装不下的字符。
程序清单11.9 fgets3.c程序
/* fgets3.c -- 使用 fgets() */
#include 
#define STLEN 10
int main(void)
{
char words[STLEN];
766
int i;
puts("Enter strings (empty line to quit):");
while (fgets(words, STLEN, stdin) != NULL && 
words[0] != '\n')
{
i = 0;
while (words[i] != '\n' && words[i] != '\0')
i++;
if (words[i] == '\n')
words[i] = '\0';
else // 如果word[i] == '\0'则执行这部分代码
while (getchar() != '\n')
continue;