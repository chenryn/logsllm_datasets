instructions which is required to implement speciﬁc crypto-
graphic algorithms could be extracted automatically from a
high-level language description of the algorithm, e.g. [10, 11].
At the same time, the design ﬂow can generate accompany-
ing tool-chains and simulators for the customized protected
processor which can then be used to develop protected cryp-
tographic software. In the best case, the system designer just
needs to decide on the cryptographic algorithms which need
to be supported and provide high-level language descriptions
of them.
As already mentioned, most of the administrative tasks
relating to the use of the secure zone could be oﬄoaded
to the compiler. In the ideal case, the only task left to the
developer of a cryptographic implementation would be to in-
dicate the mark the key which needs to be protected. From
this, the compiler can deduce all intermediate values which
depend on the key and which need to be protected by the
secure zone. Given the interdependency of these values, the
compiler can order the operations in a way which uses the
limited number of entries in the mask storage in an optimal
way, minimizing the number of times that masks have to
be ﬂushed to memory or restored from memory. If masks
and masked values are associated via storage location, the
compiler could make sure that a masked value is in the cor-
rect location when it is operated upon by the secure zone
(otherwise the corresponding mask cannot be found). If this
association is done via the MRT, the compiler can insert the
instructions for updating the MRT automatically.
The compiler can also manage the secure zone directly by
keeping track of the number of occupied entries in the mask
storage and the current mask index and by inserting calls
to ﬂush masks to memory, restore masks from memory, and
handle mask index overﬂows when appropriate. This would
require the compiler to model the eﬀects of the program on
parts of the secure zone. Managing of the secure zone can
also be done at runtime via traps as discussed in Section 4.7.
6. PRACTICAL RESULTS
6.1
Implementation Cost
In order to estimate the hardware overhead introduced
by the secure zone, we have performed standard-cell syn-
thesis of two versions targeting the UMC 0.18 µm standard-
cell library FSA0A C from Faraday [5]. The ﬁrst version
of the secure zone (minimal version) includes only the min-
imal functionality suﬃcient to protect implementations of
AES encryption and decryption (masking only of ﬁxed reg-
isters, 7-entry mask storage, mask generator based on 64-bit
LFSR, no task switching support, no exception handling).
The second version (full version) encompasses all features
described in the previous sections (masked register address-
ing scheme, 8-entry mask storage, mask generator based on
UnmaskFUMaskMaskgeneratorMaskstorageRegister FileSecure zoneExecutestageMemorystageExceptionstageTable 1: Synthesis results for both versions of the
secure zone.
Component
Functional unit
Mask generator
Mask storage
SZ functionality
MRT
Total
Secure Logic
yes
yes
yes
yes
no
Requires Minimal Full
GEs
3,303
1,994
7,122
4,461
5,478
22,358
GEs
2,984
779
2,833
1,777
n/a
8,373
127-bit LFSR, task switching support, exception handling).
The synthesis results for both variants are given in Ta-
ble 1. The area requirements for each sub-component are
stated separately. Note that the ﬁgures refer to implemen-
tation in standard CMOS. The column “Secure Logic” indi-
cates whether the given component requires realization in a
secure logic style. The component “SZ functionality” encom-
passes all functions which are not part of the other compo-
nents, i.e. control word decoding, unmasking and masking
logic, pipeline register stages, feedback logic, exception de-
tection, and registering of the output word.
The total size of the minimal variant of the secure zone is
about 8.4 kGates. Note that the size of the functional unit
could be further reduced by employing more light-weight
AES instructions [14]. The full variant requires a total of
about 22.4 kGates, but the part that needs to be imple-
mented in secure logic (which excluded the MRT) is only
twice the size of the minimal variant.
Note that the full implementation includes a number of
administrative functions, some of which could be stripped
in a practical implementation in order to save area. Fur-
thermore, the exception handling could also be optimized
further. Also, with the mechanism for ﬂushing masks to
memory, the number of mask storage entries could also be
reduced, given a tradeoﬀ between area and execution time.
In any case, the full implementation oﬀers a framework for
supporting multiple cryptographic algorithms with little ex-
tra cost, as only the required instructions need to be added.
For example, the raw cost for AES is only 3 kGates (in
CMOS) and could be even reduced to less than 1 kGate [14].
All other components can be reused by the various crytpo-
graphic implementations. This is a fundamental diﬀerence
to cryptographic coprocessors implemented in secure logic,
where there is typically one coprocessor per cryptographic
algorithm and the overhead for registers and control logic
is incurred for each of them. Furthermore, coprocessors are
usually not suited to be used by multiple tasks in parallel.
Note also that protecting the whole processor system in a
secure logic style is currently no viable option to achieve
the same degree of functionality oﬀered by our implemen-
tation, due to the lack of eﬃcient solutions for adequately
protecting external memories.
The overhead incurred by implementation in a secure logic
style greatly depends on the characteristics of the chosen
logic style. For example, WDDL approximately triples the
area [16]. Furthermore, the clock frequency is at least halved
and the power consumption is increased by a factor of about
3.5. Note that the decrease in clock frequency could be
limited to those execution times where the secure zone is
active via frequency scaling.
Figure 5: Setup for the DEMA attack.
6.2 Preliminary SCA Evaluation
We have prototyped our implementation on a Xilinx ML410
FPGA board which features a Virtex 4 FX FPGA. Apart
from a functional veriﬁcation in “real” hardware, this en-
abled us to perform a preliminary evaluation of the SCA
resistance of our approach. We compared two implementa-
tions of AES: One which uses unprotected AES extensions
and one which makes use of the instructions oﬀered by the
secure zone. Due to the complexity of using a secure logic
style approach on an FPGA and due to time limitations, we
had to refrain from implementing the secure zone in a se-
cure logic style. We believe that it is reasonable to assume
that a proper implementation of the secure zone in a secure
logic style can only lead to a further increase in the practi-
cal security. Therefore, our evaluation results can be seen as
estimating the lower bound for security. Even though no se-
cure logic style is employed, the protected implementation
limits the occurrence of critical values to the secure zone,
whereas in the unprotected implementation, critical values
are moved through the complete processor pipeline. Hence,
the unprotected implementation was expected to be much
more susceptible to attacks.
To test this assumption, we performed a DEMA attack
with a total of 250,000 power traces on both implementa-
tions. The setup is depicted in Figure 5. Despite the rela-
tively high noise in the setup, we were able to successfully
attack the unprotected implementation. This attack yielded
ρ ≈ 0.02 which translates to a maximum of about 70,000 re-
quired power traces [8]. On the other hand, the attack on
the protected implementation did not succeed. The attack
has thus been made harder by a factor of at least more than
3.5, just by limiting the circulation of critical values. This
factor should multiply to the protection factor oﬀered by
the secure logic style. The correlation traces for both at-
tacks are shown in Figure 6 and Figure 7. The correlation is
measured between predicted power consumption values un-
der the assumption of a speciﬁc value for a byte of the key
(key hypothesis) and the actual measured power consump-
tion. If the correlation is signiﬁcantly higher for a speciﬁc
key hypothesis in relation to all hypotheses, this indicates
that the key value has been guessed correctly and that the
attack has been successful. Thus, these correlation traces
show the result of an attack on a particular key byte (the
second key byte of the AES cipher key in this case), where
the correlation trace for the hypothesis using the correct
key byte is in dark gray whereas the correlation traces for
the 255 incorrect key hypotheses are displayed in light gray.
Note that the attack on the protected implementation has
a ghost peak5 around point 400, but this peak occurs for all
key hypotheses.
Figure 7: Attack on the protected implementation.
and potentially insecure user applications are catered for.
The task of dealing with the hardware countermeasures can
be largely oﬄoaded to the operating system and the com-
piler, so that developers can write protected cryptographic
applications in almost the same way as unprotected ones.
Our countermeasures are modular, so that certain features
can be omitted if they are not needed or if an increased
processor workload is acceptable. We have implemented the
protection mechanism in two versions for protecting AES on
a typical embedded processor, where the minimal version
required about 8.4 kGates while the full version could be re-
alized with about 22.4 kGates. Our concepts are applicable
to a large range of cryptographic algorithms and are ide-
ally suited for an automated development ﬂow of protected
embedded processors.
8. ACKNOWLEDGMENTS
The research described in this paper has been supported
by the Austrian ministry BM:VIT in the FIT-IT program
line “Trust in IT Systems” under grant 816151 (project PO-
WER-TRUST), and, in part, through the ICT Programme
under contract ICT-2007-216676 ECRYPT II. The informa-
tion in this document reﬂects only the authors’ views, is
provided as is, and no guarantee or warranty is given that
the information is ﬁt for any particular purpose. The user
thereof uses the information at its sole risk and liability.
9. REFERENCES
[1] ARM Ltd. TrustZone Technology Overview. http:
//www.arm.com/products/security/trustzone/.
[2] D. J. Bernstein. Cache-timing attacks on AES.
Available online at http://cr.yp.to/antiforgery/
cachetiming-20050414.pdf, April 2005.
[3] C. D. Canni´ere and B. Preneel. TRIVIUM
Speciﬁcations. eSTREAM, ECRYPT Stream Cipher
Project (http://www.ecrypt.eu.org/stream), Report
2005/030, April 2005.
[4] M. Dichtl and J. D. Goli´c. High-Speed True Random
Number Generation with Logic Gates Only. In
E. Oswald and P. Rohatgi, editors, Cryptographic
Hardware and Embedded Systems – CHES 2008, 10th
Figure 6: Attack on the unprotected implementa-
tion.
6.3 A Note on Higher-Order Attacks
The use of an LFSR as mask generator introduces a lin-
ear connection between some of the masks in the sequence.
More precisely, a speciﬁc bit of a new mask is a linear com-
bination (XOR) of a number of bits of some previous masks
(for our choice of LFSR, this are four bits coming from three
or four previous masks). So there is a theoretical threat of a
higher-order attack using the power consumption connected
to these dependent mask bits. As there are at least three
masks contributing to any new mask bit, an attacker would
need to mount at least a fourth-order attack, which is usu-
ally considered impractical.
If attacks of this high order
should become a threat, the required order can be arbitrar-
ily increased in software by regularly advancing the mask
generator and skipping some of the produced masks with-
out using them.
7. CONCLUSIONS
We have presented a detailed concept for protecting em-
bedded processors against SCA attacks. The main contri-
bution of our work is that it takes the roughly sketched
ideas from Tillich et al. and develops a protection mecha-
nism which builds on state-of-the-art SCA research and in-
corporates the requirements of modern embedded systems.
Our solution makes use of secure logic styles and acknowl-
edges the incurred implementation overhead by requiring
only a portion of the processor to be implemented in such a
logic style. Requirements of modern embedded systems like
multi-tasking and separation into secure operating system
5The ghost peak probably relates to the masking operation
of the plaintext.
International Workshop, Washington DC, USA,
August 10-13, 2008, Proceedings, volume 5154 of
Lecture Notes in Computer Science, pages 45–62.
Springer, August 2008.
[5] Faraday Technology Corporation. Faraday FSA0A C
0.18 µm ASIC Standard Cell Library, 2004. Details
available online at http://www.faraday-tech.com.
[6] P. Grabher, J. Großsch¨adl, and D. Page.
Non-Deterministic Processors: FPGA-Based Analysis
of Area, Performance and Security. In Proceedings of
the 4th Workshop on Embedded Systems Security
(WESS 2009), pages 1–10. ACM Press, 2009.
[7] M. Hell, T. Johansson, and W. Meier. Grain - A
Stream Cipher for Constrained Environments.
eSTREAM, ECRYPT Stream Cipher Project
(http://www.ecrypt.eu.org/stream), Report
2005/010, 2006. Revised version.
[8] S. Mangard, E. Oswald, and T. Popp. Power Analysis
Attacks – Revealing the Secrets of Smart Cards.
Springer, 2007. ISBN 978-0-387-30857-9.
[9] D. May, H. L. Muller, and N. P. Smart.
Non-deterministic Processors. In V. Varadharajan and
Y. Mu, editors, Information Security and Privacy, 6th
Australasian Conference, ACISP 2001, Sydney,
Australia, July 11-13, 2001, Proceedings, volume 2119
of Lecture Notes in Computer Science, pages 115–129.
Springer, 2001.
[10] L. Pozzi, M. Vuleti´c, and P. Ienne. Automatic
Topology-Based Identiﬁcation of Instruction-Set
Extensions for Embedded Processors. In Proceedings
of the conference on Design, automation and test in
Europe (DATE 2002), page 1138. IEEE Computer
Society, 2002.
[11] S. Ravi, A. Raghunathan, N. Potlapally, and
M. Sankaradass. System design methodologies for a
wireless security processing platform. In 39th Design
Automation Conference, DAC 2002, New Orleans,
Louisiana, USA, June 10-14, 2002, Proceedings, pages
777–782, New York, NY, USA, 2002. ACM Press.
[12] F. Regazzoni, A. Cevrero, F.-X. Standaert, S. Badel,
T. Kluter, P. Brisk, Y. Leblebici, and P. Ienne. A
Design Flow and Evaluation Framework for
DPA-Resistant Instruction Set Extensions. In
C. Clavier and K. Gaj, editors, Cryptographic
Hardware and Embedded Systems – CHES 2009, 11th
International Workshop, Lausanne, Switzerland,
September 6-9, 2009, Proceedings, volume 5747 of
Lecture Notes in Computer Science, pages 205–219.
Springer, 2009. ISBN 978-3-642-04137-2.
[13] G. E. Suh, C. W. O’Donnell, and S. Devadas. Aegis:
A Single-Chip Secure Processor. IEEE Design and
Test of Computers, 24(6):570–580, December 2007.
[14] S. Tillich and J. Großsch¨adl. Instruction Set
Extensions for Eﬃcient AES Implementation on 32-bit
Processors. In L. Goubin and M. Matsui, editors,
Cryptographic Hardware and Embedded Systems –
CHES 2006, 8th International Workshop, Yokohama,
Japan, October 10-13, 2006, Proceedings, volume 4249
of Lecture Notes in Computer Science, pages 270–284.
Springer, 2006.
[15] S. Tillich and J. Großsch¨adl. Power-Analysis Resistant
AES Implementation with Instruction Set Extensions.
In P. Paillier and I. Verbauwhede, editors,
Cryptographic Hardware and Embedded Systems –
CHES 2007, 9th International Workshop, Vienna,
Austria, September 10-13, 2007, Proceedings, volume
4727 of Lecture Notes in Computer Science, pages
303–319. Springer, September 2007.
[16] K. Tiri, D. D. Hwang, A. Hodjat, B.-C. Lai, S. Yang,
P. Schaumont, and I. Verbauwhede. Prototype IC with
WDDL and Diﬀerential Routing - DPA Resistance
Assessment. In J. R. Rao and B. Sunar, editors,
Cryptographic Hardware and Embedded Systems –
CHES 2005, 7th International Workshop, Edinburgh,
UK, August 29 - September 1, 2005, Proceedings,
volume 3659 of Lecture Notes in Computer Science,
pages 354–365. Springer, 2005.
[17] Y. Tsunoo, E. Tsujihara, K. Minematsu, and
H. Miyauchi. Cryptanalysis of Block Ciphers
Implemented on Computers with Cache. In
International Symposium on Information Theory and
Its Applications (ISITA 2002), October 2002.