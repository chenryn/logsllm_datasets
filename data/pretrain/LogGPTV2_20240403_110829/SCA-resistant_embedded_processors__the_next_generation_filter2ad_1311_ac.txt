### Instructions for Implementing Cryptographic Algorithms

Instructions for implementing specific cryptographic algorithms can be automatically extracted from a high-level language description, as demonstrated in references [10, 11]. This design flow also generates accompanying toolchains and simulators for the customized protected processor, which can then be used to develop protected cryptographic software. Ideally, the system designer only needs to decide on the cryptographic algorithms to support and provide their high-level language descriptions.

### Compiler-Managed Secure Zone

As previously mentioned, most administrative tasks related to the secure zone can be offloaded to the compiler. In the ideal scenario, the developer of a cryptographic implementation would only need to indicate the key that needs protection. The compiler can then deduce all intermediate values dependent on the key and ensure they are protected by the secure zone. Given the interdependencies of these values, the compiler can optimize the order of operations to use the limited mask storage entries efficiently, minimizing the number of times masks need to be flushed to or restored from memory.

If masks and masked values are associated via storage location, the compiler ensures that a masked value is in the correct location when operated upon by the secure zone (otherwise, the corresponding mask cannot be found). If this association is done via the Mask Register Table (MRT), the compiler can automatically insert instructions for updating the MRT.

The compiler can also manage the secure zone directly by tracking the number of occupied entries in the mask storage and the current mask index, and by inserting calls to flush masks to memory, restore masks from memory, and handle mask index overflows when appropriate. This requires the compiler to model the effects of the program on parts of the secure zone. Alternatively, managing the secure zone can be done at runtime via traps, as discussed in Section 4.7.

### Practical Results

#### Implementation Cost

To estimate the hardware overhead introduced by the secure zone, we performed standard-cell synthesis of two versions targeting the UMC 0.18 µm standard-cell library FSA0A C from Faraday [5]. The first version (minimal version) includes only the minimal functionality sufficient to protect AES encryption and decryption (masking only of fixed registers, 7-entry mask storage, mask generator based on 64-bit LFSR, no task switching support, no exception handling). The second version (full version) encompasses all features described in the previous sections (masked register addressing scheme, 8-entry mask storage, mask generator based on 127-bit LFSR, task switching support, exception handling).

The synthesis results for both variants are given in Table 1. The area requirements for each sub-component are stated separately. The column "Secure Logic" indicates whether the given component requires realization in a secure logic style. The component "SZ functionality" includes all functions not part of the other components, such as control word decoding, unmasking and masking logic, pipeline register stages, feedback logic, exception detection, and registering of the output word.

| Component          | Requires Secure Logic | Minimal (GEs) | Full (GEs) |
|--------------------|-----------------------|---------------|------------|
| Functional unit    | Yes                   | 3,303         | 2,984      |
| Mask generator     | Yes                   | 1,994         | 779        |
| Mask storage       | Yes                   | 7,122         | 2,833      |
| SZ functionality   | Yes                   | 4,461         | 1,777      |
| MRT                | No                    | 5,478         | n/a        |
| **Total**          |                       | **22,358**    | **8,373**  |

The total size of the minimal variant of the secure zone is about 8.4 kGates. The full variant requires a total of about 22.4 kGates, but the part that needs to be implemented in secure logic (excluding the MRT) is only twice the size of the minimal variant.

The full implementation includes several administrative functions, some of which could be stripped to save area. Additionally, the exception handling could be further optimized. With the mechanism for flushing masks to memory, the number of mask storage entries could also be reduced, given a tradeoff between area and execution time. The full implementation offers a framework for supporting multiple cryptographic algorithms with little extra cost, as only the required instructions need to be added. For example, the raw cost for AES is only 3 kGates (in CMOS) and could be reduced to less than 1 kGate [14].

All other components can be reused by various cryptographic implementations, which is a fundamental difference from cryptographic coprocessors implemented in secure logic, where there is typically one coprocessor per cryptographic algorithm, incurring overhead for registers and control logic for each. Furthermore, coprocessors are usually not suited for parallel use by multiple tasks.

Protecting the whole processor system in a secure logic style is currently not viable due to the lack of efficient solutions for adequately protecting external memories. The overhead incurred by implementation in a secure logic style greatly depends on the chosen logic style. For example, WDDL approximately triples the area [16], halves the clock frequency, and increases power consumption by a factor of about 3.5. The decrease in clock frequency could be limited to those execution times where the secure zone is active via frequency scaling.

### Preliminary SCA Evaluation

We prototyped our implementation on a Xilinx ML410 FPGA board featuring a Virtex 4 FX FPGA. This enabled us to perform a preliminary evaluation of the SCA resistance of our approach. We compared two implementations of AES: one using unprotected AES extensions and one using the instructions offered by the secure zone. Due to the complexity of using a secure logic style approach on an FPGA and time limitations, we did not implement the secure zone in a secure logic style. However, we believe that a proper implementation in a secure logic style would further increase practical security. Therefore, our evaluation results can be seen as estimating the lower bound for security.

Even without a secure logic style, the protected implementation limits the occurrence of critical values to the secure zone, whereas in the unprotected implementation, critical values are moved through the complete processor pipeline, making it more susceptible to attacks.

To test this, we performed a DEMA attack with 250,000 power traces on both implementations. Despite the relatively high noise in the setup, we successfully attacked the unprotected implementation, yielding ρ ≈ 0.02, which translates to a maximum of about 70,000 required power traces [8]. The attack on the protected implementation did not succeed, indicating that the attack was made at least 3.5 times harder just by limiting the circulation of critical values. This factor should multiply with the protection factor offered by the secure logic style.

### Higher-Order Attacks

The use of an LFSR as a mask generator introduces a linear connection between some of the masks in the sequence. Specifically, a new mask bit is a linear combination (XOR) of bits from previous masks. This poses a theoretical threat of a higher-order attack using the power consumption connected to these dependent mask bits. As at least three masks contribute to any new mask bit, an attacker would need to mount at least a fourth-order attack, which is generally considered impractical.

If higher-order attacks become a threat, the required order can be arbitrarily increased in software by regularly advancing the mask generator and skipping some of the produced masks without using them.

### Conclusions

We have presented a detailed concept for protecting embedded processors against SCA attacks. Our solution builds on state-of-the-art SCA research and incorporates the requirements of modern embedded systems. It uses secure logic styles and acknowledges the implementation overhead by requiring only a portion of the processor to be implemented in such a logic style. Our solution supports multi-tasking and separation into secure operating system and potentially insecure user applications. The task of dealing with hardware countermeasures can be largely offloaded to the operating system and the compiler, allowing developers to write protected cryptographic applications in almost the same way as unprotected ones. Our countermeasures are modular, so certain features can be omitted if they are not needed or if an increased processor workload is acceptable.

### Acknowledgments

This research has been supported by the Austrian ministry BM:VIT in the FIT-IT program line "Trust in IT Systems" under grant 816151 (project POWER-TRUST), and, in part, through the ICT Programme under contract ICT-2007-216676 ECRYPT II. The information in this document reflects only the authors' views, is provided as is, and no guarantee or warranty is given that the information is fit for any particular purpose. The user thereof uses the information at its sole risk and liability.

### References

[1] ARM Ltd. TrustZone Technology Overview. http://www.arm.com/products/security/trustzone/.

[2] D. J. Bernstein. Cache-timing attacks on AES. Available online at http://cr.yp.to/antiforgery/cachetiming-20050414.pdf, April 2005.

[3] C. D. Canni´ere and B. Preneel. TRIVIUM Specifications. eSTREAM, ECRYPT Stream Cipher Project (http://www.ecrypt.eu.org/stream), Report 2005/030, April 2005.

[4] M. Dichtl and J. D. Goli´c. High-Speed True Random Number Generation with Logic Gates Only. In E. Oswald and P. Rohatgi, editors, Cryptographic Hardware and Embedded Systems – CHES 2008, 10th International Workshop, Washington DC, USA, August 10-13, 2008, Proceedings, volume 5154 of Lecture Notes in Computer Science, pages 45–62. Springer, August 2008.

[5] Faraday Technology Corporation. Faraday FSA0A C 0.18 µm ASIC Standard Cell Library, 2004. Details available online at http://www.faraday-tech.com.

[6] P. Grabher, J. Großsch¨adl, and D. Page. Non-Deterministic Processors: FPGA-Based Analysis of Area, Performance and Security. In Proceedings of the 4th Workshop on Embedded Systems Security (WESS 2009), pages 1–10. ACM Press, 2009.

[7] M. Hell, T. Johansson, and W. Meier. Grain - A Stream Cipher for Constrained Environments. eSTREAM, ECRYPT Stream Cipher Project (http://www.ecrypt.eu.org/stream), Report 2005/010, 2006. Revised version.

[8] S. Mangard, E. Oswald, and T. Popp. Power Analysis Attacks – Revealing the Secrets of Smart Cards. Springer, 2007. ISBN 978-0-387-30857-9.

[9] D. May, H. L. Muller, and N. P. Smart. Non-deterministic Processors. In V. Varadharajan and Y. Mu, editors, Information Security and Privacy, 6th Australasian Conference, ACISP 2001, Sydney, Australia, July 11-13, 2001, Proceedings, volume 2119 of Lecture Notes in Computer Science, pages 115–129. Springer, 2001.

[10] L. Pozzi, M. Vuleti´c, and P. Ienne. Automatic Topology-Based Identification of Instruction-Set Extensions for Embedded Processors. In Proceedings of the conference on Design, automation and test in Europe (DATE 2002), page 1138. IEEE Computer Society, 2002.

[11] S. Ravi, A. Raghunathan, N. Potlapally, and M. Sankaradass. System design methodologies for a wireless security processing platform. In 39th Design Automation Conference, DAC 2002, New Orleans, Louisiana, USA, June 10-14, 2002, Proceedings, pages 777–782, New York, NY, USA, 2002. ACM Press.

[12] F. Regazzoni, A. Cevrero, F.-X. Standaert, S. Badel, T. Kluter, P. Brisk, Y. Leblebici, and P. Ienne. A Design Flow and Evaluation Framework for DPA-Resistant Instruction Set Extensions. In C. Clavier and K. Gaj, editors, Cryptographic Hardware and Embedded Systems – CHES 2009, 11th International Workshop, Lausanne, Switzerland, September 6-9, 2009, Proceedings, volume 5747 of Lecture Notes in Computer Science, pages 205–219. Springer, 2009. ISBN 978-3-642-04137-2.

[13] G. E. Suh, C. W. O’Donnell, and S. Devadas. Aegis: A Single-Chip Secure Processor. IEEE Design and Test of Computers, 24(6):570–580, December 2007.

[14] S. Tillich and J. Großsch¨adl. Instruction Set Extensions for Efficient AES Implementation on 32-bit Processors. In L. Goubin and M. Matsui, editors, Cryptographic Hardware and Embedded Systems – CHES 2006, 8th International Workshop, Yokohama, Japan, October 10-13, 2006, Proceedings, volume 4249 of Lecture Notes in Computer Science, pages 270–284. Springer, 2006.

[15] S. Tillich and J. Großsch¨adl. Power-Analysis Resistant AES Implementation with Instruction Set Extensions. In P. Paillier and I. Verbauwhede, editors, Cryptographic Hardware and Embedded Systems – CHES 2007, 9th International Workshop, Vienna, Austria, September 10-13, 2007, Proceedings, volume 4727 of Lecture Notes in Computer Science, pages 303–319. Springer, September 2007.

[16] K. Tiri, D. D. Hwang, A. Hodjat, B.-C. Lai, S. Yang, P. Schaumont, and I. Verbauwhede. Prototype IC with WDDL and Differential Routing - DPA Resistance Assessment. In J. R. Rao and B. Sunar, editors, Cryptographic Hardware and Embedded Systems – CHES 2005, 7th International Workshop, Edinburgh, UK, August 29 - September 1, 2005, Proceedings, volume 3659 of Lecture Notes in Computer Science, pages 354–365. Springer, 2005.

[17] Y. Tsunoo, E. Tsujihara, K. Minematsu, and H. Miyauchi. Cryptanalysis of Block Ciphers Implemented on Computers with Cache. In International Symposium on Information Theory and Its Applications (ISITA 2002), October 2002.