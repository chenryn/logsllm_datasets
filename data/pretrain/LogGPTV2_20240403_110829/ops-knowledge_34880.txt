User: Can a HDD vs SSD setup account for lower processor utilization when there are many read and write operations?
So I've written a program that spawns multiple processes. On OSX it runs great and utilizes 100% of the cpu. Overloading it with hundreds of threads works out fine. On Ubuntu, it freezes when pushing a large number of threads. When I limit the number of total threads the the max for the processors, the Ubuntu machine doesn't utilize all the computing power--only about 50%. My threads do run at nearly 100% for the first minute or so, then suddently it becomes random with a wave like utilization graph which doesn't always begin at the same time. 
Specs:
OSX, SSD, Intel i7 4 cores x 2 threads each = 8 threads
Ubuntu, HDD, 3930K Intel i7 6 cores x 2 threads each = 12 threads
Assistant: On hardware level only one operation on a device can be done at once. If the drive is busy, the requested operation is being queued. There are few different queues where it may be waiting and they vary in different operation systems, hardware or even drivers. There are different queue management methods as well most popular on software side is fifo (first in, first out), but on drive side it probably is NCQ (special queue managment that selects closest data to be written/read first)  All of those queues have limited size. If hardware level queues are full (for example disk cache have been filled), the system halts all operations of applications requesting disk access. So if your application is doing some disk operations it may simply be waiting for a disk drive.
As SSD technology makes whole processing much quicker, an access latency is about 10-20 times faster than in HDD, it is highly probable that your application doesn't use 100% of CPU because of HDD.