# Matryoshka Bug Classification and Analysis

## Table 6: Classification of Verified Bugs Found by Matryoshka
- **SBO**: Stack Buffer Overflow
- **HBO**: Heap Buffer Overflow
- **OOM**: Out of Memory
- **OBR**: Out of Bound Read

| Program | SBO | HBO | OOM | OBR | Total |
|---------|-----|-----|-----|-----|-------|
| djpeg   | 4   | 2   | 1   | 15  | 23    |
| file    | 2   | 2   | 4   | 2   | 10    |
| jhead   | 2   | 3   | 1   | 1   | 7     |
| mutool  | 1   | 1   | 1   | 1   | 4     |
| nm      | 4   | 2   | 2   | 4   | 12    |
| objdump | 2   | 2   | 3   | 2   | 9     |
| readelf | 1   | 1   | 1   | 1   | 4     |
| readpng | 1   | 1   | 1   | 1   | 4     |
| size    | 4   | 1   | 1   | 1   | 7     |
| tcpdump | 2   | 2   | 2   | 2   | 8     |
| tiff2ps | 1   | 1   | 1   | 1   | 4     |
| xmllint | 1   | 1   | 1   | 1   | 4     |
| xmlwf   | 1   | 1   | 1   | 1   | 4     |

## Table 7: Constraints Unsolved by Angora, and Nested Constraints Solved by Matryoshka

| Program | Unsolved by Angora | Solved by Matryoshka | % of Nested Constraints |
|---------|--------------------|----------------------|-------------------------|
| djpeg   | 1889               | 345                  | 20.3%                   |
| file    | 610                | 172                  | 32.6%                   |
| jhead   | 4923               | 316                  | 11.1%                   |
| mutool  | 1883               | 249                  | 16.3%                   |
| nm      | 2564               | 408                  | 18.9%                   |
| objdump | 4418               | 377                  | 9.4%                    |
| readelf | 4012               | 621                  | 18.4%                   |
| readpng | 5353               | 1170                 | 23.2%                   |
| size    | 4359               | 593                  | 15.5%                   |
| tcpdump | 4343               | 1794                 | 44.0%                   |
| tiff2ps | 8923               | 330                  | 5.0%                    |
| xmllint | 1838               | 271                  | 18.9%                   |
| xmlwf   | 5233               | 301                  | 6.0%                    |

### 5.3.2 Effective Prior Conditional Statements
A key insight that allows Matryoshka to solve nested constraints effectively is the identification of effective prior conditional statements. These are statements whose branch choices may cause the target conditional statement to become unreachable. Matryoshka solves a constraint consisting only of these effective statements, rather than all prior conditional statements on the path as done in traditional symbolic execution.

**Table 9: Average Number of Effective Prior Conditional Statements vs. All Prior Conditional Statements**

| Program | Average Prior Conditional Statements | Effective/All (%) |
|---------|--------------------------------------|-------------------|
| djpeg   | 21.69                                | 1.8%              |
| file    | 22.27                                | 6.5%              |
| jhead   | 16.81                                | 0.7%              |
| mutool  | 20.08                                | 1.0%              |
| nm      | 27.93                                | 3.3%              |
| objdump | 23.93                                | 4.9%              |
| readelf | 7.23                                 | 0.3%              |
| readpng | 21.18                                | 2.5%              |
| size    | 21.72                                | 4.6%              |
| tcpdump | 26.26                                | 9.8%              |
| tiff2ps | 30.44                                | 1.7%              |
| xmllint | 11.80                                | 2.3%              |
| xmlwf   | 5.88                                 | 0.9%              |

This fact significantly reduces the complexity of the path constraints that Matryoshka solves, increasing the likelihood that the constraints can be solved.

### 6. Discussion

#### 6.1 Comparison with Concolic Execution
We compare Matryoshka with QSYM while its last branch solving is disabled. This directly compares the effectiveness of Matryoshkaâ€™s optimization strategies to that of a concolic execution engine. Table 5 shows that Matryoshka performs better than QSYM in all the statistics. This demonstrates that prioritizing reachability, satisfiability, and joint optimization can be used effectively on most path constraints without resorting to concolic execution.

#### 6.2 Challenges and Limitations

- **Taint Flow in External Libraries**: We manually modeled the taint flow in common external libraries for Matryoshka, but this is not comprehensive.
- **Program Crashing**: When mutating the input using the strategy for prioritizing satisfiability and joint optimization, Matryoshka artificially keeps the branch choices of prior conditional statements. This may cause the program to crash if it accesses data out of bounds.
- **Difficult Joint Constraints**: The joint optimization strategy is the last resort for mutation. In the program `tiff2ps`, we found that conditional statements have, on average, 30 such prior statements, making it difficult to solve such complex joint constraints.
- **Constraint Dependent on Order of Branches**: On `xmlwf`, Matryoshka and Angora reached similar branches. The unreached branches are guarded by predicates that can only be solved through a specific combination of other branch choices, a situation that none of the fuzzers we tested are designed to handle.

These challenges highlight the need for further research and development in handling complex and interdependent constraints in fuzzing.