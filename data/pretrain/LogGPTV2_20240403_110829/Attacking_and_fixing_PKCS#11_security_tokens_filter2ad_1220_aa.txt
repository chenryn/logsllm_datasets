title:Attacking and fixing PKCS#11 security tokens
author:Matteo Bortolozzo and
Matteo Centenaro and
Riccardo Focardi and
Graham Steel
Attacking and Fixing PKCS#11 Security Tokens
Matteo Bortolozzo
Università Ca’ Foscari
Venezia, Italy
PI:EMAIL
Riccardo Focardi
Università Ca’ Foscari
Venezia, Italy
PI:EMAIL
Matteo Centenaro
Università Ca’ Foscari
Venezia, Italy
PI:EMAIL
Graham Steel
LSV, INRIA & CNRS &
ENS-Cachan
Cachan, France
PI:EMAIL
ABSTRACT
We show how to extract sensitive cryptographic keys from
a variety of commercially available tamper resistant cryp-
tographic security tokens, exploiting vulnerabilities in their
RSA PKCS#11 based APIs. The attacks are performed
by Tookan, an automated tool we have developed, which
reverse-engineers the particular token in use to deduce its
functionality, constructs a model of its API for a model
checker, and then executes any attack trace found by the
model checker directly on the token. We describe the op-
eration of Tookan and give results of testing the tool on 17
commercially available tokens: 9 were vulnerable to attack,
while the other 8 had severely restricted functionality. One
of the attacks found by the model checker has not previ-
ously appeared in the literature. We show how Tookan may
be used to verify patches to insecure devices, and give a se-
cure conﬁguration that we have implemented in a patch to
a software token simulator. This is the ﬁrst such conﬁgu-
ration to appear in the literature that does not require any
new cryptographic mechanisms to be added to the standard.
We comment on lessons for future key management APIs.
Categories and Subject Descriptors:
K.6.m [Miscellaneous]: Security
General Terms: Experimentation, Security, Veriﬁcation
Keywords: Security APIs, key management, PKCS#11,
model checking
1.
INTRODUCTION
Tamper-resistant cryptographic security tokens such as
smartcards and USB keys are an increasingly common com-
ponent of distributed systems deployed in insecure environ-
ments. They are designed, for example, to enable authenti-
cation, to protect cryptographic values from malware, and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
to facilitate secure login for a variety of applications rang-
ing from door entry to online banking.
In this paper, we
focus on tokens that achieve their goals by using internally
stored cryptographic values. A token must oﬀer an API to
the outside world that allows the keys to be used for crypto-
graphic functions and permits key management operations.
This API is critical:
it must be designed so that even if
the device comes into contact with malicious applications,
perhaps on a compromised host machine, the cryptographic
values stored remain secret.
It is diﬃcult to design such
an interface, and several key recovery attacks on so-called
‘security APIs’ have appeared in the literature [3, 5, 12].
The most commonly used standard for designing token in-
terfaces is RSA PKCS#11 [14]. The API described by this
standard, ‘Cryptoki’, is known to have vulnerabilities [6, 8],
but since diﬀerent devices implement diﬀerent subsets of the
standard, it was not previously known to what extent these
vulnerabilities aﬀected real devices.
In this paper we describe Tookan1, an automated tool that
reverse engineers the particular functionality oﬀered by a de-
vice, constructs a formal model of this functionality, calls a
model checker to search for possible attacks, and executes
any attack trace found directly on the device. Our model
is based on previous work by Delaune, Kremer and Steel,
[8], but enriched signiﬁcantly to better match the function-
ality we found on real devices. We describe optimisations
to the model building process that result in models which
can be handled eﬃciently by the model checker. We also
contribute a meta-language for describing PKCS#11 con-
ﬁgurations, used by the reverse-engineering part of our tool.
The results of testing the tool on commercially available
devices are disquieting: every device that oﬀered the func-
tionality necessary to import and export sensitive keys in an
encrypted form, a standard key management operation, did
so in an insecure way allowing the key value to be recovered
after a few calls to the API. Those not vulnerable to these
attacks have very limited functionality (e.g. just asymmetric
keypair generation and signing).
We then show how to use our tool to verify patched tokens.
We present CryptokiX, a ﬁXed variant of the openCryptoki
[13] software token simulator, which is conﬁgurable by se-
lectively enabling diﬀerent patches. This has allowed us to
test our reverse-engineering framework on (simulated) de-
vices implementing various combinations of security patches.
1Tool for cryptoki analysis
260Among its patches, CryptokiX includes the ﬁrst secure con-
ﬁguration to appear in the literature that does not require
any new cryptographic mechanisms to be added to the stan-
dard.
Finally, we comment on the lessons for the next genera-
tion of standards for cryptographic key management such
as IEEE 1619.3 and the OASIS Key Management Interop-
erability Protocol, currently in the draft stage.
The paper is organized as follows. We ﬁrst brieﬂy review
the PKCS#11 API and some of its known problems which
can lead to vulnerabilities (section 2). We then describe our
formal model of the API and show how our tool extracts in-
formation from the token to allow us to build the model for
a particular device (section 3). We give our experimental re-
sults on various commercially available devices in section 4.
We describe how to use the tool to ﬁnd secure conﬁgura-
tions in section 5. We conclude with a discussion of open
problems and future key management APIs in section 6.
2. THE PKCS#11 API
RSA PKCS#11 describes its ‘Cryptoki’ API in just under
400 pages [14]. We only have room here for a brief descrip-
tion, and we will concentrate on the details that give rise
to the category of vulnerabilities found by our tool.
In a
PKCS#11-based API, applications initiate a session with
the cryptographic token, by supplying a PIN. Note that if
malicious code is running on the host machine, then the
user PIN may easily be intercepted, e.g. by a keylogger or
by a tampered device driver, allowing an attacker to create
his own sessions with the device, a point conceded in the
security discussion in the standard [14, p. 31]. PKCS#11
is intended to protect its sensitive cryptographic keys even
when connected to a compromised host.
Once a session is initiated, the application may access the
objects stored on the token, such as keys and certiﬁcates.
However, access to the objects is controlled. Objects are
referenced in the API via handles, which can be thought
of as pointers to or names for the objects. In general, the
value of the handle, e.g.
for a secret key, does not reveal
any information about the actual value of the key. Objects
have attributes, which may be bitstrings e.g. the value of
a key, or Boolean ﬂags signalling properties of the object,
e.g. whether the key may be used for encryption, or for
encrypting other keys. New objects can be created by calling
a key generation command, or by ‘unwrapping’ an encrypted
key packet. In both cases a fresh handle is returned.
When a function in the token’s API is called with a ref-
erence to a particular object, the token ﬁrst checks that the
attributes of the object allow it to be used for that function.
For example, if the encrypt function is called with the handle
for a particular key, that key must have its encrypt attribute
set. To protect a key from being revealed, the attribute sen-
sitive must be set to true. This means that requests to view
the object’s key value via the API will result in an error
message. Once the attribute sensitive has been set to true,
it cannot be reset to false. This gives us the principal secu-
rity property stated in the standard: attacks, even if they
involve compromising the host machine to obtain the PIN,
cannot “compromise keys marked ‘sensitive’, since a key that
is sensitive will always remain sensitive”, [14, p. 31]. Such
a key may be exported outside the device if it is encrypted
by another key, but only if its extractable attribute is set to
true. An object with an extractable attribute set to false may
Initial knowledge: The intruder knows h(n1, k1) and
h(n2, k2). The name n2 has the attributes wrap and
decrypt set whereas n1 has the attribute sensitive and
extractable set.
Trace:
Wrap:
SDecrypt:
h(n2, k2), h(n1, k1) → {|k1|}k2
h(n2, k2), {|k1|}k2 → k1
Figure 1: Wrap/Decrypt attack
not be read by the API, and additionally, once set to false,
the extractable attribute cannot be set to true. Protection
of the keys essentially relies on the sensitive and extractable
attributes.
Attacks on PCKS#11
A number of recent papers have shown attacks which com-
promise sensitive keys [6, 8, 11]. Many of these are ‘key
separation’ attacks, where the attributes of a key are set in
such a way as to give a key conﬂicting roles. Clulow gives
the example of a key with the attributes set for decryp-
tion of ciphertexts, and for ‘wrapping’, i.e. encryption of
other keys for secure transport [6]. To determine the value
of a sensitive key, the attacker simply wraps it and then
decrypts it, as shown in Figure 1. Here we introduce our
notation for PKCS#11 based APIs, deﬁned more formally
in the next section: h(n1, k1) is a predicate stating that there
is a handle n1 for a key k1 stored on the device. The sym-
metric encryption of k1 under key k2 is represented by {|k1|}k2 .
Note also that according to the wrapping formats deﬁned in
PKCS#11, the device cannot tell whether an arbitrary bit-
string is a cryptographic key or some other piece of plaintext.
Thus when it executes the decrypt command, it has no way
of telling that the packet it is decrypting contains a key.
Delaune, Kremer and Steel proposed a Dolev-Yao style ab-
stract model for PKCS#11 APIs, and showed how diﬃcult
it is to prevent these kinds of attacks: the commands can
be restricted to prevent certain conﬂicting attributes from
being set on the same object, but still more attacks arise [8].
However, it was not known whether any real devices follow-
ing the standard actually implement key management like
this, since much of the functionality is optional. This was a
motivation for the tool we describe in this paper. Further-
more, no previous analysis of PKCS#11 gives a conﬁgura-
tion that is proven secure without adding new mechanisms
to the standard. This was another motivation for our work.
Note that our tool is focused on these attacks that involve
no cryptanalysis. There are further known vulnerabilities in
PKCS#11 APIs exploiting particular details of the crypto-
graphic algorithms supported [6]. Covering these remains as
further work for our tool development project.
3. MODEL
Our model follows the approach used by Delaune, Kre-
mer and Steel (DKS) [8]. The idea is to model the device
as being connected to a host under the complete control
of an intruder, representing a malicious piece of software.
The intruder can call the commands of the API in any or-
der he likes using any values that he knows. We abstract
261away details of the cryptographic algorithms in use, follow-
ing the classical approach of Dolev and Yao [10]. Bitstrings
are modelled as terms in an abstract algebra and the rules
of the API and the abilities of an attacker are written as
deduction rules in the algebra. The intruder is assumed not
to be able to crack the encryption algorithm by brute-force
search or similar means, thus he can only read an encrypted
message if he has the correct key. We analyse security as
reachability, in the model, of attack states, i.e. states where
the intruder knows the value of a key stored on the device
with the sensitive attribute set to true, or the extractable
attribute set to false.
3.1 Basic Notions
We assume a given signature Σ, i.e. a ﬁnite set of func-
tion symbols, with an arity function ar : Σ → N, a (possibly
inﬁnite) set of names N and a (possibly inﬁnite) set of vari-
ables X . Names represent keys, data values, nonces, etc.
and function symbols model cryptographic primitives, e.g.
{|x|}y representing symmetric encryption of plaintext x under
key y, and {x}y representing public key encryption of x un-
der y. Function symbols of arity 0 are called constants. This
includes the Boolean constants true (⊤) and false (⊥). The
set of plain terms PT is deﬁned by the following grammar:
t, ti
:= x
|
n
|
f (t1, . . . , tn)
x ∈ X
n ∈ N
f ∈ Σ and ar (f ) = n
We also consider a ﬁnite set F of predicate symbols, disjoint
from Σ, from which we derive a set of facts. The set of facts
is deﬁned as
FT = {p(t, b) | p ∈ F , t ∈ PT , b ∈ {⊤, ⊥}}
In this way, we can explicitly express the Boolean value b of
an attribute p on a term t by writing p(t, b). For example,
to state that the key referred to by n has the wrap attribute
set we write wrap(n, ⊤). This is a diﬀerence in the syntax of
our model compared to DKS, where attributes are expressed
as literals (wrap(n) or ¬wrap(n)).
The description of a system is given as a ﬁnite set of rules
of the form
T ; L new ˜n−−−→ T ′; L′
where T, T ′ ⊆ PT are sets of plain terms L, L′ ⊆ F are sets
of facts and ˜n ⊆ N is a set of names. The intuitive meaning
of such a rule is the following. The rule can be ﬁred if all
terms in T are in the intruder knowledge and if all the facts
in L hold in the current state. The eﬀect of the rule is that
terms in T ′ are added to the intruder knowledge and the
valuation of the attributes is updated to satisfy L′. The
new ˜n means that all the names in ˜n need to be replaced by
fresh names in T ′ and L′. This allows us to model nonce
or key generation: if the rule is executed several times, the
eﬀects are diﬀerent as diﬀerent names will be used each time.
Example The following rule models wrapping:
h(x1, y1), h(x2, y2); wrap(x1,⊤), extract(x2,⊤) → {|y2|}y1
Intuitively, h(x1, y1) is a handle x1 for key y1 while term {|y2|}y1