# OMash: Enabling Secure Web Mashups via Object Abstractions

## Authors
- Steven Crites
- Francis Hsu
- Hao Chen

### Affiliation
University of California, Davis

### Contact
- PI: EMAIL (for all authors)

## Abstract
The current security model used by web browsers, the Same Origin Policy (SOP), does not support secure cross-domain communication desired by web mashup developers. Developers must choose between no trust, where no communication is allowed, and full trust, where third-party content runs with the full privilege of the integrator. Additionally, the SOP has its own set of security vulnerabilities, including Cross-Site Request Forgery, DNS rebinding, and dynamic pharming. To overcome this tradeoff between security and functionality, we propose OMash, a simple abstraction that treats web pages as objects and allows objects to communicate only via their declared public interfaces. Since OMash does not rely on the SOP for controlling DOM access or cross-domain data exchange, it avoids the SOP's vulnerabilities. We show that OMash satisfies the trust relationships desired by mashup authors and can be configured to be backward compatible with the SOP. We implemented a prototype of OMash using Mozilla Firefox 2.0 and demonstrated several proof-of-concept applications.

### Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection

### General Terms
Design, Languages, Security

### Keywords
Web, browser, mashup, same origin policy, communication, protection, security model, object abstraction

## 1. Introduction
Web browsers are integral to everyday computing, from accessing simple web pages to using web applications like online retail, banking, webmail, wikis, blogs, and discussion boards. The rise of AJAX-style web applications has introduced dynamic, interactive content, such as Google Maps. Google provides a public API, allowing developers to create hybrid websites, such as HousingMaps, which combines data from Craigslist and presents it using Google Maps. This type of hybrid web application is known as a mashup: a website that combines content from one or more websites.

Even before the rise of AJAX and mashups, web browsers often contained pages from different domains, whether in different windows, tabs, or frames. Security is crucial because without it, a script from one web page could steal or modify critical information from another page. The solution, first introduced in Netscape Navigator 2.0, is the Same Origin Policy (SOP), now the de facto security model for web browsers.

### 1.1 Problems with the Same Origin Policy
The SOP prevents a document or script loaded from one origin from getting or setting properties of a document from a different origin. Two pages have the same origin if the protocol, port, and host are the same. A script's origin is the origin of the document containing it, not where the script is hosted. This has significant security implications, as a malicious third-party script will run in the context of the site that included it via a `<script>` tag.

Under the SOP, a Domain Name System (DNS) domain is a principal, similar to a user or group in a multi-user operating system. While this suffices for mutually distrusting web pages, it is insufficient for creating web applications with content from different domains. The only two trust relationships available are no trust, where third-party content is isolated within a different window or frame, and full trust, where the third-party content is included as a library via a `<script>` tag and thus has full access to the page that included it. This coarse-grained security model forces developers to make a tradeoff between security and functionality.

Additionally, the SOP suffers from various vulnerabilities due to design limitations or reliance on insecure services. For example, it relies on the security of the DNS, making it vulnerable to dynamic pharming attacks and DNS rebinding attacks. Furthermore, the SOP cannot prevent Cross-Site Request Forgery (CSRF) attacks.

### 1.2 OMash
We propose OMash, a new abstraction and access control model for writing secure yet flexible mashup applications. Drawing an analogy to objects in object-oriented programming languages like Java, where an object represents a principal and communicates with others via public methods, our model treats each web page as a principal. By default, all content on a web page is private; inter-page communication is enabled by declaring a public interface, accessible by all pages.

A web page's private data includes all content, such as DOM objects and JavaScript objects and functions, as well as authentication tokens like cookies. Only content on the same page can access these tokens, and they are sent out only for HTTP connections originating from that page. This mechanism reliably defeats CSRF attacks, as a malicious page cannot access or send authentication tokens held by another page.

OMash does not rely on the SOP and instead advocates abolishing it for controlling DOM accesses and cross-domain data exchange. Our model, analogous to the Java object model, is simple and familiar to programmers. We will show that OMash can express all the trust relationships discussed in MashupOS and can be configured to be backward compatible with the SOP.

We implemented a prototype of OMash using Mozilla Firefox 2.0, without modifying the JavaScript engine. To implement the public interface, we set a few preferences for Mozilla’s Configurable Security Policies (CAPS) system. To privatize authentication tokens, we used Firefox 2’s Session store API. A web page wishing to use our security model to provide a public interface can define a JavaScript function `getPublicInterface` that returns the page’s public interface. Examples are provided in Sections 3 and 4.

## 2. The Same Origin Policy
The SOP protects three browser resources: documents, cookies, and access to remote services. It prevents sites from one origin from accessing documents from another origin via the Document Object Model (DOM). Sites can only set their own cookies, and cookies are only sent to their originating site in HTTP requests. Remote services can be accessed via the XMLHttpRequest (XHR) object, which allows a script to issue an asynchronous HTTP request to a remote server. The SOP only permits XHR to issue requests to the origin of the containing document.

One exception to the SOP allows a script to set its domain to a suffix of the current domain, and use that newer, shorter domain for future SOP checks. For example, a script in a document from `foo.a.com` can set `document.domain = "a.com"`, making its origin `a.com`. Note that a site cannot set `document.domain` to a top-level domain (TLD) such as `.com`.

### 2.1 Problems

#### 2.1.1 DOM Access
The SOP enforces a single, unchangeable security policy on every site. While this is often sufficient, it can result in undesired accesses. For example, documents at `http://a.com/foo` and `http://a.com/bar` can access each other, even when this is not desired. Determining the "public suffix" (previously known as the effective TLD) for a given URL is also problematic. This cannot be inferred programmatically and must be determined via a list. Incorrectly determining the public suffix can allow for same-origin violations or cookie manipulation.

Another problem is that the SOP relies on the security of the DNS, which was not designed with security in mind. Karlof et al. demonstrated that an attacker who controls the domain name mapping can subvert the SOP using dynamic pharming. This attack can bypass all authentication schemes by first mapping the target domain to an attacker’s web page containing malicious JavaScript and then re-mapping it to the actual server, resulting in the attacker having full access to the user’s session.

#### 2.1.2 Authentication Credentials
XMLHttpRequest is restricted to communicating only with its originating page due to the handling of authentication credentials in HTTP. When a request is made, cookies matching the destination domain are added to the request, along with any other form of HTTP Authentication information. This can lead to Cross-Site Request Forgery (CSRF) attacks, where an attacker can cause a request carrying the user’s credentials to be initiated. If XMLHttpRequest were not subject to the same-origin check, an attacker could read and write data on a site for which the user possesses authentication credentials.

Another reason for restricting XMLHttpRequest is that it could be used to read information from an organization’s internal web site behind a firewall and then communicate this information back out. This is already possible using DNS rebinding, where an attacker-controlled website changes its DNS mapping to read unprotected internal documents.

### 2.2 Trust Levels
Wang et al. in MashupOS enumerate the possible trust levels between integrators and providers in a mashup. These levels include:
1. Isolated content that should be isolated from other domains.
2. Access-controlled content that should be isolated but allows for mediated access.
3. Open content that any domain can access and integrate into itself.
4. Unauthorized content that has no privileges of any domain.

Isolated content is possible via `<iframe>` elements, and open content is possible via the `<script>` tag. Due to the coarse-grained nature of the SOP, access-controlled content and unauthorized content currently have no existing abstractions, leaving mashup developers with the choice of either no trust using isolated content or full trust using open content.

## 3. Design
OMash provides mashup developers with the ability to allow safe, controlled communication and interaction between web sites, supporting various trust models.

### 3.1 Mediate DOM Access
We treat each web page as an object that declares public and private data and methods. A web page can only access its own content and the public content of another page. By content, we mean DOM objects and JavaScript objects and functions. Thus, we no longer use the SOP for determining whether an access on another page is allowed. A web page in the browser can be thought of as an OOP language object with a well-defined public interface.

To achieve this, each page declares a JavaScript function named `getPublicInterface`. Any page can access the `getPublicInterface` function of any other page but cannot modify it. Unless content is made accessible via the object returned by `getPublicInterface`, it cannot be accessed by another page.

**Example:**
- **Provider (inner.html):**
  ```javascript
  var privateVar;
  function getPublicInterface() {
      function Interface() {
          this.getHeight = function () {
              return document.body.clientHeight;
          };
          this.setVar = function (value) {
              privateVar = value;
          };
          this.anotherMethod = function (...) {
              // ...
          };
      }
      return new Interface();
  }
  ```

- **Integrator (outer.html):**
  ```javascript
  var win = document.getElementById("inner").contentWindow;
  var innerInterface = win.getPublicInterface();
  var innerHeight = innerInterface.getHeight();
  innerInterface.setVar(10);
  innerInterface.anotherMethod(...);
  ```

In this example, `inner.html` declares its public interface, and `outer.html` calls this public interface. The functions `getHeight()` and `setVar()` are closures, allowing for the creation of private members. Using closures, pages can safely get and set information on other pages in a controlled manner.

By using the `getPublicInterface` function, a page’s creator can specify what they want other pages to be able to access. This approach allows the mashup developer to model a variety of trust relationships, such as:
- P trusts I to access P’s content.
- I trusts P to access I’s resources.

This flexibility enables developers to create secure and functional mashups without the limitations and vulnerabilities of the SOP.