used in an automated fashion and thus highly vulnerable to
exposure if the system it resides on is compromised. Given
the low risk of just this role’s compromise, the timestamp
role can use a single key. The release role is similar to the
timestamp role in that the immediate risk that results from
compromise is low. Some situations may be di(cid:11)erent, but
in general, it is likely that the release role gains little from
threshold signatures and thus can use a single key.
The roles that bene(cid:12)t the most from threshold signatures
are the root role and the targets role. The root role is
very important because its compromise immediately puts all
clients at risk. Additionally, once the root role has been com-
promised, its keys cannot be reliably revoked and replaced
without a trusted communication channel. The targets role
should also use threshold signatures for similar but slightly
di(cid:11)erent reasons. Even though the immediate risk due to
compromise of just the targets role is much less than that of
69the root role, the keys for the targets role will be used more
frequently. As a result, the targets role’s keys will be more
susceptible to compromise. Even for small projects, the bur-
den of threshold signatures for these roles does not need to
be high. The threshold can be as little as (t; n) = (2; 2) to
gain some level of resilience to key compromise.
Diversity of keys. Due to the threats of weak key gener-
ation and algorithmic weaknesses discussed in Section 4, the
types of keys as well as the libraries used to generate them
should vary within a software update system. Our current
implementation of TUF only supports RSA keys and only
provides one library with which to generate keys. However,
one can generate RSA keys using other crypto libraries and
use them in TUF.
Automated signing. The timestamp role will always
be used in an automated fashion to frequently resign the
timestamp (cid:12)le. Depending on the project, the release (cid:12)le
may also be signed in an automated fashion.
In order to
reduce the likelihood of compromise of keys used for auto-
mated signing, the signing should take place on a system
that is not public-facing. Once signed, the metadata can
then be pushed to a public repository.
Metadata expiration times. All of the metadata in
TUF includes expiration times. The appropriate lengths of
these expiration times depend on the type of metadata (cid:12)le.
For the timestamp (cid:12)le, the expiration time should be short.
How short depends on the speci(cid:12)c system. For example, if
repository mirrors synchronize once a day, the timestamp
(cid:12)le will not be able to have an expiration time of less than
one to two days, depending on when the synchronizations
are done. The release (cid:12)le should have an expiration time
not much longer than the period between expected changes
to the targets role’s metadata. Similarly, the targets role’s
metadata should use expiration times on the order of the
expected time until new target (cid:12)les will be made available.
The root role’s metadata, on the other hand, should gener-
ally have a much longer expiration time than any of the other
metadata (cid:12)les. If the root role’s metadata expires too soon,
then clients who had not updated for an extended period of
time will not know whether an attacker is replaying the root
metadata. Another reason to use long expiration times on
the root metadata is that frequent usage of the root keys ex-
poses them to increased potential for compromise. Thus, it
is reasonable for some projects to use a multi-year expiration
time with the root metadata.
It is worth noting that systems which are vulnerable to at-
tacks that modify the system time, such as may result from
insecure communication with a time server, may be vulner-
able to freeze attacks due to inability to detect metadata
expiration.
Use of SSL. Our design avoided reliance on SSL in order
to ensure the design was not dependent on the security of
public-facing servers. However, the use of SSL in conjunc-
tion with our design o(cid:11)ers further defense against freeze at-
tacks as well as an additional layer of key security when the
server and PKI are not compromised. One way to gain the
bene(cid:12)ts of SSL with minimal overhead is to only transmit
the timestamp (cid:12)le over SSL.
9. RELATED WORK
Since the introduction of the (cid:12)rst threshold cryptosys-
tem in 1987 [18], many new threshold systems have been
developed [51]. Often, these schemes have impractical key
setup requirements or assumptions [6]. However, it is trivial
to construct a multi-signature scheme by having the multi-
signature of a message just be a list of signatures [6]. This
scheme is what we use in our design. The advantages of
this approach include the simplicity of implementation and
the safety from rogue-key attacks, which are generally the
result of the key setup process of proposed multi-signature
schemes. One drawback of this simple scheme is that the
signature size grows linearly with the number of signatures.
Like threshold schemes, proxy signature schemes for del-
egating signing abilities have a long history [41, 57] and the
use of rights delegation in computer systems has of course
existed much longer. Our design uses delegation by war-
rant in which signed certi(cid:12)cates indicate the public keys to
which speci(cid:12)c rights are delegated. This system lends it-
self to the use of ordinary signature schemes rather than
special-purpose proxy signature schemes [29].
The signature scheme we use is forward-secure and has
the advantage of being proactive. Forward-secure signature
schemes, which are key-evolving, need to be able to change
the secret key without having to change the public key [1].
We avoid this complication by using a certi(cid:12)cate-based sys-
tem.
Existing approaches to certi(cid:12)cate revocation include the
use of semi-trusted mediators (SEMs) [8], certi(cid:12)cate revo-
cation lists (CRLs), the Online Certi(cid:12)cate Status Protocol
(OCSP) [39], certi(cid:12)cation revocation trees (CRTs) [17], and
short-term certi(cid:12)cates [40] that allow clients to set their own
recency requirements [47].
In our design, we make use of
multiple revocation approaches, including short-term certi(cid:12)-
cates, to improve revocation against various types of adver-
saries.
Our work is not concerned with detecting key compro-
mise but rather only with maintaining a secure state both
before and after keys are known or suspected to be compro-
mised. There are methods of detecting key compromise [27],
but these generally require signature veri(cid:12)cation to be done
online.
Our previous work identi(cid:12)ed major security (cid:13)aws in Linux
package managers [11]. That work highlighted the ease with
which attackers can become mirrors for popular Linux dis-
tributions and in some cases even force speci(cid:12)c clients to
use the attacker’s mirror [37]. Previous work by Bellissimo
looked at the limited use of authenticated data by software
update systems [7]. That work recommended the develop-
ment of a standard for secure updates.
We have focused on designing a security framework that
is applicable to software update systems on any operating
system and for any application. However, some applications
and operating systems can also apply the principle of least
privilege to installed updates. That is, in addition to de-
creasing the likelihood of successful attacks on clients by
being resilient to key compromise, these systems can also
isolate compromises by not giving updates and programs
run from updates more privilege than required. For exam-
ple, web browsers that install unprivileged extensions [5, 38]
can keep the rest of the client’s system secure even if an at-
tacker causes a malicious extension update. If the installed
software is isolated from the software update system su(cid:14)-
ciently that the attacker cannot interfere with future up-
dates, a future update could return the system to a secure
state. Operating system security mechanisms such as privi-
leged users installing updates for unprivileged users as well
70as (cid:12)ne-grained mechanisms such as SELinux can be used for
this purpose.
10. CONCLUSION
Software update systems that do not authenticate updates
have received increased scrutiny in recent years. Due to this
attention, many of these systems have implemented simple
authentication mechanisms that cannot survive key compro-
mise. We feel that software update systems must move to
using the approaches we advocate in order to be resilient
to the many threats to key security. Our open source soft-
ware update framework, TUF, allows both new and existing
systems to bene(cid:12)t from a design that leverages responsibil-
ity separation, multi-signature trust, trust revocation, and
low-risk roles.
Acknowledgments
We thank those who contributed to Thandy, including Se-
bastian Hahn and Martin Peck. We are grateful to Geremy
Condra, Tadayoshi Kohno, Wenjun Hu, and the anonymous
reviewers for their valuable comments.
This material is based upon work supported by the Na-
tional Science Foundation under Grants No. CNS-0737890
and CNS-0959138, and by Google. Any opinions, (cid:12)ndings,
and conclusions or recommendations expressed in this mate-
rial are those of the author(s) and do not necessarily re(cid:13)ect
the views of BBN Technologies, Corp., the GENI Project
O(cid:14)ce, or the National Science Foundation.
11. REFERENCES
[1] M. Abdalla and L. Reyzin. A new forward-secure
digital signature scheme. Advances in Cryptology -
ASIACRYPT 2000, pages 116{129, 2000.
[2] Francisco Amato. ISR-evilgrade.
http://www.infobyte.com.ar/down/isr-evilgrade-
Readme.txt.
[3] Vulnerability note VU#944335 Apache web servers
fail to handle chunks with a negative size, Jun 2002.
http://www.kb.cert.org/vuls/id/944335.
[4] APT HOWTO.
http://www.debian.org/doc/manuals/apt-howto/.
[5] A. Barth, A.P. Felt, P. Saxena, and A. Boodman.
Protecting browsers from extension vulnerabilities. In
Proc. of the 17th Network and Distributed System
Security Symposium (NDSS 2010), 2010.
[6] Mihir Bellare and Gregory Neven. Multi-signatures in
the plain public-key model and a general forking
lemma. In CCS ’06: Proceedings of the 13th ACM
conference on Computer and communications security,
pages 390{399, New York, NY, USA, 2006. ACM.
[7] Anthony Bellissimo, John Burgess, and Kevin Fu.
Secure software updates: Disappointments and new
challenges. In 1st USENIX Workshop on Hot Topics in
Security, pages 37{43, Vancouver, Canada, Jul 2006.
[8] D. Boneh, X. Ding, G. Tsudik, and C.M. Wong. A
method for fast revocation of public key certi(cid:12)cates
and security capabilities. In Proceedings of the 10th
conference on USENIX Security Symposium-Volume
10, page 22. USENIX Association, 2001.
[9] Dan Boneh and David Brumley. Remote timing
attacks are practical. In Proc. 12th USENIX Security
Symposium, Washington, DC, Aug 2003.
[10] Canonical JSON - OLPC.
http://wiki.laptop.org/go/Canonical_JSON.
[11] Justin Cappos, Justin Samuel, Scott Baker, and John
Hartman. A look in the mirror: Attacks on package
managers. In Proc. 15th ACM Conference on
Computer and Communications Security, pages
565{574, New York, NY, USA, 2008. ACM.
[12] CERT/CC. CERT advisory CA-2000-09 (cid:13)aw in PGP
5.0 key generation, May 2000.
http://www.cert.org/advisories/CA-2000-09.html.
[13] Bug 476766 - add China Internet Network Information
Center (CNNIC) CA root certi(cid:12)cate. https:
//bugzilla.mozilla.org/show_bug.cgi?id=476766.
[14] Open client update protocol.
http://omaha.googlecode.com/svn/wiki/cup.html.
[15] Microsoft Corporation. Microsoft security bulletin
MS01-017, Mar 2001. http://www.microsoft.com/
technet/security/bulletin/MS01-017.mspx.
[16] CPAN. http://www.cpan.org/.
[17] Internet x.509 public key infrastructure certi(cid:12)cate and
certi(cid:12)cate revocation list (CRL) pro(cid:12)le.
http://tools.ietf.org/html/rfc5280.
[18] Y. Desmedt. Society and group oriented cryptography:
A new concept. In Advances in Cryptology - Crypto
1987, pages 120{127. Springer, 1987.
[19] Vulnerability note VU#800113 multiple DNS
implementations vulnerable to cache poisoning.
http://www.kb.cert.org/vuls/id/800113.
[20] EasyInstall - the PEAK developers’ center. http:
//peak.telecommunity.com/DevCenter/EasyInstall.
[21] New signing key.
https://fedoraproject.org/wiki/New_signing_key.
[22] Firefox update.
http://www.mozilla.com/en-US/firefox/update/.
[23] Paul W. Frields. Infrastructure report, 2008-08-22
UTC 1200, Aug 2008.
https://www.redhat.com/archives/fedora-
announce-list/2008-August/msg00012.html.
[24] Omaha (google update).
http://code.google.com/p/omaha/.
[25] Update Engine and security: How to use Update
Engine in a secure manner.
http://code.google.com/p/update-
engine/wiki/UpdateEngineAndSecurity.
[26] Microsoft security bulletin MS08-006 - important
vulnerability in internet information services could
allow remote code execution (942830), Feb 2008.
http://www.microsoft.com/technet/security/
bulletin/ms08-006.mspx.
[27] M. Just and P.C. van Oorschot. Addressing the
problem of undetected signature key compromise. In
Proceedings of the Network and Distributed System
Security Symposium, NDSS. Citeseer, 1999.
[28] Werner Koch. [Announce] GnuPG’s ElGamal signing
keys compromised, Nov 2003.
http://lists.gnupg.org/pipermail/gnupg-
announce/2003q4/000160.html.
[29] M. Mambo, K. Usuda, and E. Okamoto. Proxy
signatures: Delegation of the power to sign messages.
IEICE Transactions on Fundamentals of Electronics,
71Communications and Computer Sciences,
79(9):1338{1354, 1996.
[30] Moxie Marlinspike. Defeating OCSP with the number
3, 2009. http:
//www.thoughtcrime.org/papers/ocsp-attack.pdf.
contain a bu(cid:11)er over(cid:13)ow during the SSL2 handshake
process, Aug 2002.
http://www.kb.cert.org/vuls/id/102795.
[44] PEAR - PHP Extension and Application Repository.
http://pear.php.net/.
[31] Moxie Marlinspike. Null-pre(cid:12)x attacks against SSL
[45] Python package index : Pypi.
certi(cid:12)cates, 2009.
http://www.thoughtcrime.org/papers/null-
prefix-attacks.pdf.
[32] Nick Mathewson. Thandy: Automatic updates for Tor
bundles. https://git.torproject.org/checkout/
thandy/specs/thandy-spec.txt.
[33] Nick Mathewson. Thandy: Secure update for Tor -
Google open source blog.
http://google-opensource.blogspot.com/2009/03/
thandy-secure-update-for-tor.html.
[34] Extension versioning, update and compatibility:
Securing updates. https://developer.mozilla.org/
en/Extension_Versioning%2c_Update_and_
Compatibility#Securing_Updates.
[35] Microsoft SSL library remote compromise
vulnerability (ms04-011, exploit), Apr 2004.
http://www.securiteam.com/windowsntfocus/
5CP0L0KCKO.html.
[36] Greg Miller. Revving software with Update Engine,
Sep 2008.
http://googlemac.blogspot.com/2008/09/revving-
software-with-update-engine.html.
[37] Mirror manager security risks.
http://fedoraproject.org/wiki/Mirror_manager_
security_risks.
[38] Mozilla Labs Jetpack j Exploring new ways to extend
and personalize the Web.
https://jetpack.mozillalabs.com/.
[39] M. Myers, R. Ankney, A. Malpani, S. Galperin, and
C. Adams. RFC2560: X. 509 Internet public key
infrastructure online certi(cid:12)cate status protocol-OCSP.
Internet RFCs, 1999.
[40] M. Naor and K. Nissim. Certi(cid:12)cate revocation and
certi(cid:12)cate update. In in Proceedings of the 7th
USENIX Security Symposium, 1998.
[41] B.C. Neuman et al. Proxy-based authorization and
accounting for distributed systems. In International
Conference on Distributed Computing Systems,
volume 13, pages 283{283. Citeseer, 1993.
[42] O. Nordstrom and C. Dovrolis. Beware of BGP
attacks. SIGCOMM Comput. Commun. Rev,
34(2):1{8, 2004.
[43] Vulnerability note VU#102795 OpenSSL servers
http://pypi.python.org/pypi.
[46] Critical: openssh security update, Aug 2008. http:
//rhn.redhat.com/errata/RHSA-2008-0855.html.
[47] R. Rivest. Can we eliminate certi(cid:12)cate revocation
lists? In Financial Cryptography, pages 178{183.
Springer, 1998.
[48] RubyGems manuals. http://docs.rubygems.org/.
[49] Signing your gems - RubyGems user guide.
http://docs.rubygems.org/read/chapter/21.
[50] Seattle: Open peer-to-peer computing.
http://seattle.cs.washington.edu/.
[51] V. Shoup. Practical threshold signatures. In Advances
in Cryptology - EUROCRYPT 2000, pages 207{220.
Springer, 2000.
[52] Christopher Soghoian and Sid Stamm. Certi(cid:12)ed lies:
Detecting and defeating government interception
attacks against SSL. Technical Report 684, Indiana
University Computer Science Department, April 2010.
[53] Alexander Sotirov, Marc Stevens, Jacob Appelbaum,
Arjen Lenstra, David Molnar, Dag Arne Osvik, and
Benne de Weger. MD5 considered harmful today:
Creating a rogue CA certi(cid:12)cate, Dec 2008.
http://www.win.tue.nl/hashclash/rogue-ca/.
[54] Tor: anonymity online. http://www.torproject.org/.
[55] Securing python package management - tuf: The
update framework. http://www.updateframework.
com/wiki/SecuringPythonPackageManagement.
[56] /specs/tuf-spec.txt - TUF: The Update Framework.
https://www.updateframework.com/browser/specs/
tuf-spec.txt.
[57] V. Varadharajan, P. Allen, and S. Black. An analysis
of the proxy problem in distributed systems. In 1991
IEEE Computer Society Symposium on Research in
Security and Privacy, 1991. Proceedings., pages
255{275, 1991.
[58] Florian Weimer. [security] [DSA 1571-1] new openssl
packages (cid:12)x predictable random number generator,
May 2008. http://lists.debian.org/debian-
security-announce/2008/msg00152.html.
[59] YaST - openSuSE. http://en.opensuse.org/YaST.
[60] Yum: Yellow Dog Updater Modi(cid:12)ed.
http://linux.duke.edu/projects/yum/.
72