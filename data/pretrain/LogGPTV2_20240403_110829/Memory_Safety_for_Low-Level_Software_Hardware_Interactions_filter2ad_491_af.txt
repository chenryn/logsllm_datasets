proaches provide the memory safety guarantees provided
by our system, e.g., none of these prevent corruption of
memory mapped I/O devices, unsafe context switching,
or improper con(cid:2)guration of the MMU by either kernel
or device driver code. In fact, none of these approaches
could protect against the Linux exploits or device cor-
ruption cases described in Section 7.
In contrast, our
system offers protection from all of these problems for
both driver code and core kernel code.
Another approach that could provide some of the guar-
The EROS [38] and Coyotos [37] systems provide a
form of safe (dynamic) typing for abstractions, e.g., ca-
pabilities, at their higher-level OS ((cid:147)node and page(cid:148))
layer. This type safety is preserved throughout the de-
sign, even across I/O operations. The lower-level layer,
which implements these abstractions, is written in C/C++
and is theoretically vulnerable to memory safety errors
but is designed carefully to minimize them. The design
techniques used here are extremely valuable but dif(cid:2)cult
to retro(cid:2)t to commodity systems.
Some OSs written in type-safe languages, including
JX [18], SPIN [21], Singularity [22], and others [20] pro-
vide abstractions that guarantee that loads and stores to
I/O devices do not access main memory, and main mem-
ory accesses do not access I/O device memory. However,
these systems either place context switching and MMU
management within the virtual machine run-time (JX) or
provide no guarantee that errors in these operations can-
not compromise the safety guarantees of the language in
which they are written.
antees of our work is to add annotations to the C lan-
guage. For example, SafeDrive’s annotation system [51]
could be extended to provide our I/O memory protections
and perhaps some of our other safety guarantees. Such
an approach, however, would likely require changes to
every driver and kernel module, whereas our approach
only requires a one-time port to the SVA instruction set
and very minor changes to machine-independent parts of
the kernel.
The Devil project [27] de(cid:2)nes a safe interface to hard-
ware devices that enforces safety properties. Devil could
ensure that writes to the device’s memory did not ac-
cess kernel memory, but not vice versa. Our SVA ex-
tensions also protect I/O memory from kernel memory
and provide comprehensive protection for other low-
level hardware interactions, such as MMU changes, con-
text switching, and thread management.
Mondrix [49] provides isolation between memory
spaces within a kernel using a word-granularity mem-
ory isolation scheme implemented in hardware [48]. Be-
cause Mondrix enables much more (cid:2)ne-grained isolation
(with acceptable overhead) than the software supported
isolation schemes discussed earlier, it may be able to pre-
vent some or all of the memory-related exploits we dis-
cuss. Nevertheless, it cannot protect against other errors
such as control (cid:3)ow violations or stack manipulation.
A number of systems provide Dynamic Information
Flow Tracking or (cid:147)taint tracking(cid:148) to enforce a wide range
of security policies, including memory safety, but most
of these have only reported results for user-space appli-
cations. Raksha [12] employed (cid:2)ne-grain information
(cid:3)ow policies, supported by special hardware, to prevent
buffer over(cid:3)ow attacks on the Linux kernel by ensur-
ing that injected values weren’t dereferenced as point-
ers. Unlike our work, it does not protect against attacks
that inject non-pointer data nor does it prevent use-after-
free errors of kernel stacks and other state buffers used in
low-level kernel/hardware interaction. Furthermore, this
system does not work on commodity hardware.
The CacheKernel [7] partitions its functionality into an
application-speci(cid:2)c OS layer and a common (cid:147)cache ker-
nel(cid:148) that handles context-switching, memory mappings,
etc. The CacheKernel does not aim to provide memory
safety, but its two layers are conceptually similar to the
commodity OS and the virtual machine in our approach.
A key design difference, however, is that our interface
also attempts to make kernel code easier to analyze. For
example, state manipulation for interrupted programs is
no longer an arbitrary set of loads/stores to memory but
a single instruction with a semantic meaning.
Our system employs techniques from VMMs. The
API provided by SVA for con(cid:2)guring the MMU securely
is similar to that presented by para-virtualized hypervi-
sors [16, 50]. However, unlike VMMs, our use of these
mechanisms is to provide (cid:2)ne-grain protection internal
to a single domain, including isolation between user and
kernel space and protection of type-safe main memory,
saved processor state, and the kernel stack. For exam-
ple, hypervisors would not be able to guard against [42],
which our system does prevent, even though it is an
MMU error. Also, a hypervisor that uses binary rewrit-
ing internally, e.g., for instrumenting itself, could be vul-
nerable to [9], just as the Linux kernel was. We believe
VMMs could be a useful target for our work.
SecVisor [36] is a hypervisor that ensures that only
approved code is executed in the processor’s privileged
mode. In contrast, our system does not ensure that kernel
code meets a set of requirements other than being mem-
ory safe. Unlike SVA, SecVisor does not ensure that the
approved kernel code is memory safe.
9 Conclusion
In this paper, we have presented new mechanisms to en-
sure that low-level kernel operations such as processor
state manipulation, stack management, memory mapped
I/O, MMU updates, and self-modifying code do not vio-
late the assumptions made by memory safety checkers.
We implemented our design in the Secure Virtual Ar-
chitecture (SVA) system, a safe execution environment
for commodity operating systems, and its corresponding
port of Linux 2.4.22. Only around 100 lines of code were
added or changed to the SVA-ported Linux kernel for the
new techniques. To our knowledge, this is the (cid:2)rst paper
that (i) describes a design to prevent bugs in low-level
kernel operations from compromising memory safe op-
erating systems, including operating systems written in
safe or unsafe languages; and (ii) implements and evalu-
ates a system that guards against such errors.
Our experiments show that the additional runtime
checks add little overhead to the original SVA prototype
and were able to catch multiple real-world exploits that
would otherwise bypass the memory safety guarantees
provided by the original SVA system. Taken together,
these results indicate that it is clearly worthwhile to add
these techniques to an existing memory safety system.
Acknowledgments
We wish to thank our shepherd, Trent Jaeger, and the
anonymous reviewers for their helpful and insightful
feedback.
References
[1] ACCETTA, M., BARON, R., BOLOSKY, W., GOLUB, D.,
RASHID, R., TEVANIAN, A., AND YOUNG, M. Mach: A
new kernel foundation for unix development. In Proc. USENIX
Annual Technical Conference (Atlanta, GA, USA, July 1986),
pp. 93(cid:150)113.
[2] APPLE COMPUTER, INC. Apple Mac OS X kernel semop
local stack-based buffer over(cid:3)ow vulnerability, April 2005.
http://www.securityfocus.com/bid/13225.
[3] ARCANGELI,
privilege
A.
escalation
cal
http://www.securityfocus.com/bid/18177.
vulnerability,
Linux
kernel mremap
May
lo-
2006.
[4] BERSHAD, B., SAVAGE, S., PARDYAK, P., SIRER, E. G.,
BECKER, D., FIUCZYNSKI, M., CHAMBERS, C., AND EG-
GERS, S. Extensibility, Safety and Performance in the SPIN
In Proc. ACM SIGOPS Symp. on Op. Sys.
Operating System.
Principles (Copper Mountain, CO, USA, 1995), pp. 267(cid:150)284.
[5] BOVET, D. P., AND CESATI, M. Understanding the LINUX Ker-
nel, 2nd ed. O’Reilly, Sebastopol, CA, 2003.
[6] BROWN, A. A Decompositional Approach to Computer System
Performance. PhD thesis, Harvard College, April 1997.
[7] CHERITON, D. R., AND DUDA, K. J. A caching model of oper-
ating system kernel functionality. In Proc. USENIX Symp. on Op.
Sys. Design and Impl. (Monterey, CA, USA, November 1994),
pp. 179(cid:150)193.
[8] CORBET.
SMP
alternatives,
December
2005.
http://lwn.net/Articles/164121.
[9] CORBET, J. The source of the e1000e corruption bug, October
2008. http://lwn.net/Articles/304105.
[10] CRISWELL, J., LENHARTH, A., DHURJATI, D., AND ADVE, V.
Secure Virtual Architecture: A Safe Execution Environment for
Commodity Operating Systems. In Proc. ACM SIGOPS Symp.
on Op. Sys. Principles (Stevenson, WA, USA, October 2007),
pp. 351(cid:150)366.
[11] CRISWELL, J., MONROE, B., AND ADVE, V. A virtual instruc-
tion set interface for operating system kernels. In Workshop on
the Interaction between Operating Systems and Computer Archi-
tecture (Boston, MA, USA, June 2006), pp. 26(cid:150)33.
[12] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Real-world
buffer over(cid:3)ow protection for userspace & kernelspace. In Pro-
ceedings of the USENIX Security Symposium (San Jose, CA,
USA, 2008), pp. 395(cid:150)410.
[13] DEVICES, A. M. AMD64 architecture programmer’s manual
volume 2: System programming, September 2006.
[14] DHURJATI, D., AND ADVE, V. Backwards-compatible array
In Proc. of
bounds checking for C with very low overhead.
the Int’l Conf. on Software Engineering (Shanghai, China, May
2006), pp. 162(cid:150)171.
[15] DHURJATI, D., KOWSHIK, S., AND ADVE, V. SAFECode: En-
forcing alias analysis for weakly typed languages. In Proc. ACM
SIGPLAN Conf. on Programming Language Design and Imple-
mentation (PLDI) (Ottawa, Canada, June 2006), pp. 144(cid:150)157.
[16] DRAGOVIC, B., FRASER, K., HAND, S., HARRIS, T., HO, A.,
PRATT, I., WARFIELD, A., BARHAM, P., AND NEUGEBAUER,
In Proc. ACM SIGOPS
R. Xen and the art of virtualization.
Symp. on Op. Sys. Principles (Bolton Landing, NY, USA, Octo-
ber 2003), pp. 164(cid:150)177.
[17] FRASER, K., HAND, S., NEUGEBAUER, R., PRATT,
I.,
WARFIELD, A., AND WILLIAMS, M. Safe hardware access
with the xen virtual machine monitor. In Proceedings of the First
Workshop on Operating System and Architectural Support for the
on demand IT InfraStructure (Boston, MA, USA, October 2004).
[18] GOLM, M., FELSER, M., WAWERSICH, C., AND KLEINODER,
J. The JX Operating System. In Proc. USENIX Annual Technical
Conference (Monterey, CA, USA, June 2002), pp. 45(cid:150)58.
[19] GUNINSKI, G. Linux kernel multiple local vulnerabilities, 2005.
http://www.securityfocus.com/bid/11956.
[20] HALLGREN, T., JONES, M. P., LESLIE, R., AND TOLMACH,
A. A principled approach to operating system construction in
haskell. In Proc. ACM SIGPLAN Int’l Conf. on Functional Pro-
gramming (Tallin, Estonia, September 2005), pp. 116(cid:150)128.
[21] HSIEH, W., FIUCZYNSKI, M., GARRETT, C., SAVAGE, S.,
BECKER, D., AND BERSHAD, B. Language support for exten-
sible operating systems. In Workshop on Compiler Support for
System Software (Arizona, USA, February 1996).
[22] HUNT, G. C., LARUS, J. R., ABADI, M., AIKEN, M.,
BARHAM, P., FHNDRICH, M., HODSON, C. H. O., LEVI, S.,
MURPHY, N., STEENSGAARD, B., TARDITI, D., WOBBER, T.,
AND ZILL, B. An overview of the Singularity project. Tech. Rep.
MSR-TR-2005-135, Microsoft Research, October 2005.
[23] LATTNER, C., AND ADVE, V. LLVM: A compilation framework
for lifelong program analysis and transformation. In Proc. Conf.
on Code Generation and Optimization (San Jose, CA, USA, Mar
2004), pp. 75(cid:150)88.
[24] LATTNER, C., LENHARTH, A. D., AND ADVE, V. S. Making
context-sensitive points-to analysis with heap cloning practical
for the real world. In Proc. ACM SIGPLAN Conf. on Program-
ming Language Design and Implementation (PLDI) (San Diego,
CA, USA, June 2007), pp. 278(cid:150)289.
[25] LIEDTKE, J. On micro-kernel construction. SIGOPS Oper. Syst.
Rev. 29, 5 (1995), 237(cid:150)250.
[26] LMH.
Month of kernel bugs (MoKB) archive, 2006.
http://projects.info-pull.com/mokb/.
[27] M ·ERILLON, F., R ·EVEILL(cid:30)ERE, L., CONSEL, C., MARLET, R.,
AND MULLER, G. Devil: an IDL for hardware programming.
In USENIX Symposium on Operating System Deisgn and Imple-
mentation (San Diego, CA, USA, October 2000), pp. 17(cid:150)30.
[28] MICROSYSTEMS, S.
Sun solaris
kernel memory
http://www.securityfocus.com/bid/8831.
reading
vulnerability,
sysinfo system call
2003.
October
[29] MONROE, B. M. Measuring and improving the performance of
Linux on a virtual instruction set architecture. Master’s thesis,
Computer Science Dept., Univ. of Illinois at Urbana-Champaign,
Urbana, IL, Dec 2005.
[30] NECULA, G. C., CONDIT, J., HARREN, M., MCPEAK, S.,
AND WEIMER, W. Ccured: type-safe retro(cid:2)tting of legacy soft-
ware. ACM Transactions on Programming Languages and Sys-
tems (2005).
[31] POSKANZE, J.
thttpd - tiny/turbo/throttling http server, 2000.
http://www.acme.com/software/thttpd.
[32] RUWASE, O., AND LAM, M. A practical dynamic buffer
In In Proceedings of the Network and Dis-
over(cid:3)ow detector.
tributed System Security (NDSS) Symposium (San Diego, CA,
USA, 2004), pp. 159(cid:150)169.
[33] SAULPAUGH, T., AND MIRHO, C. Inside the JavaOS Operating
System. Addison-Wesley, Reading, MA, USA, 1999.
[34] SCOTT, M. L. Programming Language Pragmatics. Morgan
Kaufmann Publishers, Inc., San Francisco, CA, 2001.
[35] SELTZER, M. I., ENDO, Y., SMALL, C., AND SMITH, K. A.
Dealing with disaster: Surviving misbehaved kernel extensions.
In USENIX Symposium on Operating System Deisgn and Imple-
mentation (Seattle, WA, October 1996), pp. 213(cid:150)227.
[36] SESHADRI, A., LUK, M., QU, N., AND PERRIG, A. Secvisor: a
tiny hypervisor to provide lifetime kernel code integrity for com-
modity OSes. SIGOPS Oper. Syst. Rev. 41, 6 (2007), 335(cid:150)350.
[37] SHAPIRO, J., DOERRIE, M. S., NORTHUP, E., SRIDHAR, S.,
AND MILLER, M. Towards a veri(cid:2)ed, general-purpose operat-
ing system kernel. In 1st NICTA Workshop on Operating System
Veri(cid:2)cation (Sydney, Australia, October 2004).
[38] SHAPIRO, J. S., AND ADAMS, J. Design evolution of the EROS
single-level store. In Proceedings of the USENIX Annual Techni-
cal Conference (Berkeley, CA, USA, June 2002), pp. 59(cid:150)72.
[39] STARSETZ, P.
Linux kernel do mremap function vma
local privilege escalation vulnerability, February 2004.
limit
http://www.securityfocus.com/bid/9686.
[40] STARZETZ, P. Linux kernel elf core dump local buffer over(cid:3)ow
vulnerability. http://www.securityfocus.com/bid/13589.
[41] STARZETZ, P. Linux kernel IGMP multiple vulnerabilities, 2004.
http://www.securityfocus.com/bid/11917.
[42] STARZETZ, P., AND PURCZYNSKI, W.
Linux kernel
do mremap function boundary condition vulnerability, January
2004. http://www.securityfocus.com/bid/9356.
[43] STARZETZ, P., AND PURCZYNSKI, W. Linux kernel setsock-
opt MCAST MSFILTER integer over(cid:3)ow vulnerability, 2004.
http://www.securityfocus.com/bid/10179.
[45]
[44] SWIFT, M. M., BERSHAD, B. N., AND LEVY, H. M. Improv-
ing the reliability of commodity operating systems. ACM Trans.
Comput. Syst 23, 1 (2005), 77(cid:150)110.
·ULFAR ERLINGSSON, ABADI, M., VRABLE, M., BUDIU, M.,
AND NECULA, G. C. XFI: Software guards for system address
spaces. In USENIX Symposium on Operating System Deisgn and
Implementation (Seattle, WA, USA, November 2006), pp. 75(cid:150)88.
[46] VAN SPRUNDEL, I. Linux kernel bluetooth signed buffer index
vulnerability. http://www.securityfocus.com/bid/12911.
[47] WAHBE, R., LUCCO, S., ANDERSON, T. E., AND GRAHAM,
S. L. Ef(cid:2)cient software-based fault isolation. ACM SIGOPS
Operating Systems Review 27, 5 (1993), 203(cid:150)216.
[48] WITCHEL, E., CATES, J., AND ASANOVIC., K. Mondrian
memory protection. In Proc. Int’l Conf. on Architectural Support
for Programming Languages and Operating Systems (ASPLOS)
(San Jose, CA, USA, October 2002), pp. 304(cid:150)316.
[49] WITCHEL, E., RHEE, J., AND ASANOVIC, K. Mondrix: Mem-
ory isolation for linux using mondriaan memory protection.
In
Proc. ACM SIGOPS Symp. on Op. Sys. Principles (Brighton, UK,
October 2005), pp. 31(cid:150)44.
[50] WRIGHT,
C.
Para-virtualization
interfaces,
2006.
http://lwn.net/Articles/194340.
[51] ZHOU, F., CONDIT, J., ANDERSON, Z., BAGRAK, I., EN-
NALS, R., HARREN, M., NECULA, G., AND BREWER, E.
Safedrive: Safe and recoverable extensions using language-
In USENIX Symposium on Operating Sys-
based techniques.
tem Deisgn and Implementation (Seattle, WA, USA, November
2006), pp. 45(cid:150)60.