        Addr start [7fff2997e000] | end [7fff2999f000]
    Can't find 'Holberton'
    julien@holberton:~/holberton/w/hackthevm1$
所以我们的字符串既不在堆中也不在栈中：那么，它在哪里？是时候深入研究Python 3内部结构并使用我们将要学习的知识来找到字符串。打起精神，乐趣才刚刚开始
## 在虚拟内存中定位字符串
注意：Python 3有许多实现。但在本文中，我们使用原始而最常用的：CPython（用C编码）。下面我们将要讨论的python 3是基于此实现的
### id
有一种简单的方法可以知道对象（注意，是对象，不是字符串）在虚拟内存中的位置。 CPython有一个内置id（）的特定实现：id（）将返回对象在内存中的地址。
如果我们在Python脚本中添加一行打印对象id的语句，我们应该能得到它的地址（main_id.py）：
    #!/usr/bin/env python3
    '''
    Prints:
    - the address of the bytes object
    - a b"string" (bytes object)
    reads a char from stdin
    and prints the same (or not :)) string again
    '''
    import sys
    s = b"Holberton"
    print(hex(id(s)))
    print(s)
    sys.stdin.read(1)
    print(s)
    julien@holberton:~/holberton/w/hackthevm1$ ./main_id.py
    0x7f343f010210
    b'Holberton'
->0x7f343f010210。让我们看一下/proc/来知道我们的对象所在的位置。
    julien@holberton:/usr/include/python3.4$ ps aux | grep main_id.py | grep -v grep
    julien     4344  0.0  0.7  31412  7856 pts/0    S+   16:53   0:00 python3 ./main_id.py
    julien@holberton:/usr/include/python3.4$ cat /proc/4344/maps
    00400000-006fa000 r-xp 00000000 08:01 655561                             /usr/bin/python3.4
    008f9000-008fa000 r--p 002f9000 08:01 655561                             /usr/bin/python3.4
    008fa000-00986000 rw-p 002fa000 08:01 655561                             /usr/bin/python3.4
    00986000-009a2000 rw-p 00000000 00:00 0 
    021ba000-022a4000 rw-p 00000000 00:00 0                                  [heap]
    7f343d797000-7f343de79000 r--p 00000000 08:01 663747                     /usr/lib/locale/locale-archive
    7f343de79000-7f343df7e000 r-xp 00000000 08:01 136303                     /lib/x86_64-linux-gnu/libm-2.19.so
    7f343df7e000-7f343e17d000 ---p 00105000 08:01 136303                     /lib/x86_64-linux-gnu/libm-2.19.so
    7f343e17d000-7f343e17e000 r--p 00104000 08:01 136303                     /lib/x86_64-linux-gnu/libm-2.19.so
    7f343e17e000-7f343e17f000 rw-p 00105000 08:01 136303                     /lib/x86_64-linux-gnu/libm-2.19.so
    7f343e17f000-7f343e197000 r-xp 00000000 08:01 136416                     /lib/x86_64-linux-gnu/libz.so.1.2.8
    7f343e197000-7f343e396000 ---p 00018000 08:01 136416                     /lib/x86_64-linux-gnu/libz.so.1.2.8
    7f343e396000-7f343e397000 r--p 00017000 08:01 136416                     /lib/x86_64-linux-gnu/libz.so.1.2.8
    7f343e397000-7f343e398000 rw-p 00018000 08:01 136416                     /lib/x86_64-linux-gnu/libz.so.1.2.8
    7f343e398000-7f343e3bf000 r-xp 00000000 08:01 136275                     /lib/x86_64-linux-gnu/libexpat.so.1.6.0
    7f343e3bf000-7f343e5bf000 ---p 00027000 08:01 136275                     /lib/x86_64-linux-gnu/libexpat.so.1.6.0
    7f343e5bf000-7f343e5c1000 r--p 00027000 08:01 136275                     /lib/x86_64-linux-gnu/libexpat.so.1.6.0
    7f343e5c1000-7f343e5c2000 rw-p 00029000 08:01 136275                     /lib/x86_64-linux-gnu/libexpat.so.1.6.0
    7f343e5c2000-7f343e5c4000 r-xp 00000000 08:01 136408                     /lib/x86_64-linux-gnu/libutil-2.19.so
    7f343e5c4000-7f343e7c3000 ---p 00002000 08:01 136408                     /lib/x86_64-linux-gnu/libutil-2.19.so
    7f343e7c3000-7f343e7c4000 r--p 00001000 08:01 136408                     /lib/x86_64-linux-gnu/libutil-2.19.so
    7f343e7c4000-7f343e7c5000 rw-p 00002000 08:01 136408                     /lib/x86_64-linux-gnu/libutil-2.19.so
    7f343e7c5000-7f343e7c8000 r-xp 00000000 08:01 136270                     /lib/x86_64-linux-gnu/libdl-2.19.so
    7f343e7c8000-7f343e9c7000 ---p 00003000 08:01 136270                     /lib/x86_64-linux-gnu/libdl-2.19.so
    7f343e9c7000-7f343e9c8000 r--p 00002000 08:01 136270                     /lib/x86_64-linux-gnu/libdl-2.19.so
    7f343e9c8000-7f343e9c9000 rw-p 00003000 08:01 136270                     /lib/x86_64-linux-gnu/libdl-2.19.so
    7f343e9c9000-7f343eb83000 r-xp 00000000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f343eb83000-7f343ed83000 ---p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f343ed83000-7f343ed87000 r--p 001ba000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f343ed87000-7f343ed89000 rw-p 001be000 08:01 136253                     /lib/x86_64-linux-gnu/libc-2.19.so
    7f343ed89000-7f343ed8e000 rw-p 00000000 00:00 0 
    7f343ed8e000-7f343eda7000 r-xp 00000000 08:01 136373                     /lib/x86_64-linux-gnu/libpthread-2.19.so
    7f343eda7000-7f343efa6000 ---p 00019000 08:01 136373                     /lib/x86_64-linux-gnu/libpthread-2.19.so
    7f343efa6000-7f343efa7000 r--p 00018000 08:01 136373                     /lib/x86_64-linux-gnu/libpthread-2.19.so
    7f343efa7000-7f343efa8000 rw-p 00019000 08:01 136373                     /lib/x86_64-linux-gnu/libpthread-2.19.so
    7f343efa8000-7f343efac000 rw-p 00000000 00:00 0 
    7f343efac000-7f343efcf000 r-xp 00000000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f343f000000-7f343f1b6000 rw-p 00000000 00:00 0 
    7f343f1c5000-7f343f1cc000 r--s 00000000 08:01 918462                     /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache
    7f343f1cc000-7f343f1ce000 rw-p 00000000 00:00 0 
    7f343f1ce000-7f343f1cf000 r--p 00022000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f343f1cf000-7f343f1d0000 rw-p 00023000 08:01 136229                     /lib/x86_64-linux-gnu/ld-2.19.so
    7f343f1d0000-7f343f1d1000 rw-p 00000000 00:00 0 
    7ffccf1fd000-7ffccf21e000 rw-p 00000000 00:00 0                          [stack]
    7ffccf23c000-7ffccf23e000 r--p 00000000 00:00 0                          [vvar]
    7ffccf23e000-7ffccf240000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
    julien@holberton:/usr/include/python3.4$
->我们的对象存储在以下内存区域： **7f343f000000-7f343f1b6000 rw -p 00000000 00:00 0** ，这既不是堆也不是栈。这证实了我们之前看到的情况。但这并不意味着字符串本身也存储在同一个内存区域。例如，bytes对象可以存储一个指向字符串的指针，而不是字符串的副本。当然，此时我们可以在这个内存区域中搜索我们的字符串，但是我们希望理解并且肯定我们正在寻找正确的区域，而不是使用“暴力搜索”来找到解决方案。是时候学习更多关于字节对象的知识了。
### bytesobject.h
我们正在使用Python的C实现（CPython），所以让我们看一下字节对象的头文件。
注意：如果你没有Python 3头文件，可以在Ubuntu上使用此命令： **sudo apt-get install python3-dev**
在你的系统上下载它们。
如果你使用的是与我完全相同的环境（请参阅上面的“环境”部分），那么您应该能够在/usr/include/python3.4/目录中看到Python
3头文件。
来自bytesobject.h：
    typedef struct {
        PyObject_VAR_HEAD
        Py_hash_t ob_shash;
        char ob_sval[1];
        /* Invariants:
         *     ob_sval contains space for 'ob_size+1' elements.
         *     ob_sval[ob_size] == 0.
         *     ob_shash is the hash of the string or -1 if not computed yet.
         */
    } PyBytesObject;
从中我们可以了解到：
  * Python 3字节对象在内部使用PyBytesObject类型变量表示
  * ob_sval包含整个字符串
  * 字符串以0结尾
  * ob_size存储字符串的长度（查看objects.h中宏PyObject_VAR_HEAD的定义以找到ob_size的含义。稍后我们会看一下该文件）  
所以在我们的例子中，如果我们能够打印字节对象，我们应该会看到：
  * ob_sval：“Holberton” ->字节值：48 6f 6c 62 65 72 74 6f 6e 00
  * ob_size：9  
根据我们之前学到的内容，这意味着字符串在字节对象的“内部”。所以在同一个内存区域内 \o/  
如果我们不知道在CPython中id的实现方式怎么办？实际上我们可以使用另一种方法来查找字符串的位置：查看内存中的实际对象。
## 查看内存中的字节对象
如果我们想直接查看PyBytesObject变量，我们需要创建一个C函数，并从Python调用这个C函数。有许多方法可以从Python调用C函数。我们将使用最简单的一个：使用动态库。
### 创建C函数
因此，我们的想法是创建一个从Python调用的C函数，该对象作为参数，然后“探索”该对象以获得字符串的确切地址（以及有关该对象的其他信息）。
函数原型应该是：void print_python_bytes（PyObject *
p）;,其中p是指向我们对象的指针（因此p存储该对象的虚拟内存地址）。它不需要返回任何东西。
**object.h**
你可能已经注意到我们不使用PyBytesObject类型的参数。要了解原因，让我们看一下object.h头文件，看看我们可以从中学到什么：
    /* Object and type object interface */
    /*
    Objects are structures allocated on the heap.  Special rules apply to
    the use of objects to ensure they are properly garbage-collected.
    Objects are never allocated statically or on the stack; they must be
    ...
    */
  * “Objects are never allocated statically or on the stack” (“对象永远不会静态分配或在栈上”)->好的，现在我们知道为什么它不在堆栈中。
  * “Objects are structures allocated on the heap” （“对象是在堆上分配的结构”）->等一下... WAT？ 我们在堆中搜索了字符串，它不在那里......我很困惑！我们稍后将在另一篇文章中讨论这个问题
我们还可以了解到什么：
    /*
    ...
    Objects do not float around in memory; once allocated an object keeps the same size and address.  Objects that must hold variable-size data
    ...
    */
  * “Objects do not float around in memory; once allocated an object keeps the same size and address”（“对象不会在内存中移动; 一个对象一旦被分配了就会保持相同的大小和地址”）。好消息。这意味着如果我们修改该字符串，它将始终被修改，并且地址永远不会改变 
  * “once allocated”（“一旦分配”）->分配？但不使用堆？困惑！我们稍后将在另一篇文章中讨论这个问题
    /*
    ...
    Objects are always accessed through pointers of the type 'PyObject *'.
    The type 'PyObject' is a structure that only contains the reference count
    and the type pointer.  The actual memory allocated for an object
    contains other data that can only be accessed after casting the pointer
    to a pointer to a longer structure type.  This longer type must start
    with the reference count and type fields; the macro PyObject_HEAD should be
    used for this (to accommodate for future changes).  The implementation
    of a particular object type can cast the object pointer to the proper
    type and back.
    ...
    */
  * “Objects are always accessed through pointers of the type ‘PyObject _'”（“总是通过'PyObject_ '类型的指针访问对象”）->这就是我们必须使用PyObject类型的指针（而不是 PyBytesObject）作为我们函数的参数的原因
  * “The actual memory allocated for an object contains other data that can only be accessed after casting the pointer to a pointer to a longer structure type.”（“为对象分配的实际内存包含其他数据，这些数据只能在将指针转换为指向更长结构类型的指针后才能访问。”）->所以我们必须将我们的函数参数转换为PyBytesObject *才能访问它的所有内容。这是可能的，因为PyBytesObject的首部包含PyVarObject，PyVarObject本身首部包含PyObject：
    /* PyObject_VAR_HEAD defines the initial segment of all variable-size
     * container objects.  These end with a declaration of an array with 1
     * element, but enough space is malloc'ed so that the array actually
     * has room for ob_size elements.  Note that ob_size is an element count,
     * not necessarily a byte count.
     */
    #define PyObject_VAR_HEAD      PyVarObject ob_base;
    #define Py_INVALID_SIZE (Py_ssize_t)-1
    /* Nothing is actually declared to be a PyObject, but every pointer to
     * a Python object can be cast to a PyObject*.  This is inheritance built
     * by hand.  Similarly every pointer to a variable-size Python object can,
     * in addition, be cast to PyVarObject*.
     */
    typedef struct _object {
        _PyObject_HEAD_EXTRA
        Py_ssize_t ob_refcnt;
        struct _typeobject *ob_type;
    } PyObject;
    typedef struct {
        PyObject ob_base;
        Py_ssize_t ob_size; /* Number of items in variable part */
    } PyVarObject;
->PyVarObject里含有bytesobject.h提到的ob_size。  
C函数  
基于我们刚刚学到的所有东西，C代码非常简单（bytes.c）：
    #include "Python.h"
    /**
     * print_python_bytes - prints info about a Python 3 bytes object
     * @p: a pointer to a Python 3 bytes object
     * 
     * Return: Nothing
     */
    void print_python_bytes(PyObject *p)
    {
         /* The pointer with the correct type.*/
         PyBytesObject *s;
         unsigned int i;
         printf("[.] bytes object info\n");
         /* casting the PyObject pointer to a PyBytesObject pointer */
         s = (PyBytesObject *)p;
         /* never trust anyone, check that this is actually
            a PyBytesObject object. */
         if (s && PyBytes_Check(s))
         {
              /* a pointer holds the memory address of the first byte
             of the data it points to */
              printf("  address of the object: %p\n", (void *)s);
              /* op_size is in the ob_base structure, of type PyVarObject. */
              printf("  size: %ld\n", s->ob_base.ob_size);
              /* ob_sval is the array of bytes, ending with the value 0:
             ob_sval[ob_size] == 0 */
              printf("  trying string: %s\n", s->ob_sval);
              printf("  address of the data: %p\n", (void *)(s->ob_sval));
              printf("  bytes:");
              /* printing each byte at a time, in case this is not
             a "string". bytes doesn't have to be strings.
             ob_sval contains space for 'ob_size+1' elements.
             ob_sval[ob_size] == 0. */
              for (i = 0; i ob_base.ob_size + 1; i++)
              {
                   printf(" %02x", s->ob_sval[i] & 0xff);
              }
              printf("\n");
         }
         /* if this is not a PyBytesObject print an error message */
         else
         {
              fprintf(stderr, "  [ERROR] Invalid Bytes Object\n");
         }
    }
## 从python脚本调用C函数
### 创建动态库
正如我们之前所说，我们将使用“动态库方法”从Python 3调用我们的C函数。所以我们只需要用下列命令编译我们的C文件：
    gcc -Wall -Wextra -pedantic -Werror -std=c99 -shared -Wl,-soname,libPython.so -o libPython.so -fPIC -I/usr/include/python3.4 bytes.c
不要忘记包含Python 3头文件目录：-I /usr/include/python3.4  
这应该创建一个名为libPython.so的动态库。
### Python 3中使用动态库
为了使用我们的函数，我们需要在Python脚本中添加下列这几行：
    import ctypes
    lib = ctypes.CDLL('./libPython.so')
    lib.print_python_bytes.argtypes = [ctypes.py_object]
并以下列方式调用我们的函数：