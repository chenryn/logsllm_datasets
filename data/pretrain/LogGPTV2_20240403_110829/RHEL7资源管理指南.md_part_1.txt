[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname
xmlns:d="http://docbook.org/ns/docbook"} [7]{.productnumber
xmlns:d="http://docbook.org/ns/docbook"}
:::
# []{#index.html#idm140381107381120}资源管理指南 {.title}
## 管理 Red Hat Enterprise Linux 7 的系统资源 {.subtitle}
### [``{=html}![](Common_Content/images/title_logo.png)``{=html}]{.inlinemediaobject} {.corpauthor}
::: authorgroup
::: author
### [作者：Peter]{.firstname} [Ondrejka]{.surname} {.author}
::: affiliation
[Red Hat]{.orgname xmlns:d="http://docbook.org/ns/docbook"}
[出版中心]{.orgdiv xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [作者：Douglas]{.firstname} [Silas]{.surname} {.author}
::: affiliation
[Red Hat]{.orgname xmlns:d="http://docbook.org/ns/docbook"}
[出版中心]{.orgdiv xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [作者：Martin]{.firstname} [Prpič]{.surname} {.author}
::: affiliation
[Red Hat]{.orgname xmlns:d="http://docbook.org/ns/docbook"}
[产品安全部]{.orgdiv xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [作者：Rüdiger]{.firstname} [Landmann   ]{.surname} {.author}
::: affiliation
[Red Hat]{.orgname xmlns:d="http://docbook.org/ns/docbook"}
[出版中心]{.orgdiv xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [翻译、校对：李雪丹]{.firstname} [－ Xuedan (Evangeline) Li]{.surname} {.author}
::: affiliation
[澳大利亚昆士兰大学・笔译暨口译研究生院]{.orgname
xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [校对、编辑：傅同杰]{.firstname} [－ Tongjie (Tony) Fu]{.surname} {.author}
::: affiliation
[红帽公司・全球服务部]{.orgname xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL`{.email}
:::
::: author
### [校对、责任编辑：郑中]{.firstname} [－ Chester Cheng]{.surname} {.author}
::: affiliation
[红帽公司・全球服务部 ＆
澳大利亚昆士兰大学・笔译暨口译研究生院]{.orgname
xmlns:d="http://docbook.org/ns/docbook"}
:::
`PI:EMAIL, PI:EMAIL`{.email}
:::
:::
::: legalnotice
[]{#index.html#idm140381105978528}
# 法律通告 {.legalnotice}
::: para
Copyright []{.trademark}© 2015 Red Hat, Inc.
:::
::: para
This document is licensed by Red Hat under the [Creative Commons
Attribution-ShareAlike 3.0 Unported
License](http://creativecommons.org/licenses/by-sa/3.0/). If you
distribute this document, or a modified version of it, you must provide
attribution to Red Hat, Inc. and provide a link to the original. If the
document is modified, all Red Hat trademarks must be removed.
:::
::: para
Red Hat, as the licensor of this document, waives the right to enforce,
and agrees not to assert, Section 4d of CC-BY-SA to the fullest extent
permitted by applicable law.
:::
::: para
Red Hat, Red Hat Enterprise Linux, the Shadowman logo, JBoss, OpenShift,
Fedora, the Infinity logo, and RHCE are trademarks of Red Hat, Inc.,
registered in the United States and other countries.
:::
::: para
[Linux]{.trademark}® is the registered trademark of Linus Torvalds in
the United States and other countries.
:::
::: para
[Java]{.trademark}® is a registered trademark of Oracle and/or its
affiliates.
:::
::: para
[XFS]{.trademark}® is a trademark of Silicon Graphics International
Corp. or its subsidiaries in the United States and/or other countries.
:::
::: para
[MySQL]{.trademark}® is a registered trademark of MySQL AB in the United
States, the European Union and other countries.
:::
::: para
[Node.js]{.trademark}® is an official trademark of Joyent. Red Hat
Software Collections is not formally related to or endorsed by the
official Joyent Node.js open source or commercial project.
:::
::: para
The [OpenStack]{.trademark}® Word Mark and OpenStack logo are either
registered trademarks/service marks or trademarks/service marks of the
OpenStack Foundation, in the United States and other countries and are
used with the OpenStack Foundation\'s permission. We are not affiliated
with, endorsed or sponsored by the OpenStack Foundation, or the
OpenStack community.
:::
::: para
All other trademarks are the property of their respective owners.
:::
:::
::: abstract
**摘要**
::: para
对 Red Hat Enterprise Linux 7 的系统资源进行管理。
:::
:::
:::
:::
[]{#chap-Introduction_to_Control_Groups.html}
::: chapter
::: titlepage
# [⁠]{#chap-Introduction_to_Control_Groups.html#chap-Introduction_to_Control_Groups}第 1 章 控制群组简介 {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Introduction_to_Control_Groups.html#sec-What_are_Control_Groups}1.1. 什么是控制群组 {.title}
:::
::: para
*控制群组（control group）*（在此指南中简写为 *cgroup*）是 Linux kernel
的一项功能：在一个系统中运行的层级制进程组，您可对其进行资源分配（如 CPU
时间、系统内存、网络带宽或者这些资源的组合）。通过使用
cgroup，系统管理员在分配、排序、拒绝、管理和监控系统资源等方面，可以进行精细化控制。硬件资源可以在应用程序和用户间智能分配，从而增加整体效率。
:::
::: para
控制群组可对进程进行层级式分组并标记，并对其可用资源进行限制。传统情况下，所有的进程分得的系统资源数量相近，管理员用进程
[*niceness*]{.emphasis}
值进行调节。而用此方法，包含大量进程的应用程序可以比包含少量进程的应用程序获得更多资源，这与应用程序的重要程度无关。
:::
::: para
通过将 cgroup 层级系统与 systemd 单位树捆绑，Red Hat Enterprise Linux 7
可以把资源管理设置从进程级别移至应用程序级别。因此，您可以使用
`systemctl`{.command} 指令，或者通过修改 systemd
单位文件来管理系统资源。详情请参阅〈[第 2 章
*使用控制群组*](#chap-Using_Control_Groups.html){.xref}〉。
:::
::: para
在 Red Hat Enterprise Linux 之前的版本中，系统管理员使用
[libcgroup]{.package} 软件包中的 `cgconfig`{.command} 指令来建立自定义
cgroup
层级。但现在，这个软件包已经过时也不被推荐使用，因为它很容易与默认的
cgroup 层级产生冲突。然而，在一些特定情况下，[libcgroup]{.package}
仍然可用，如 [**systemd**]{.application} 不可用时，或使用
[*net-prio*]{.emphasis} 子系统时。详情请参考〈[第 3 章 *使用 libcgroup
工具*](#chap-Using_libcgroup_Tools.html){.xref}〉。
:::
::: para
上述工具提供了高阶接口，用与 Linux kernel 中的 cgroup
管控器（也称为子系统）互动。用于资源管理的主要 cgroup 管控器是
[*cpu*]{.emphasis}、[*memory*]{.emphasis} 和
[*blkio*]{.emphasis}。如需参考默认情况下被激活的管控器列表，请参阅〈[Red
Hat Enterprise Linux 7
中可用的管控器](#chap-Introduction_to_Control_Groups.html#itemlist-Available_Controllers_in_Red_Hat_Enterprise_Linux_7){.xref}〉；如需参考资源管控器详述及可配置参数，请参阅〈[kernel
管控器专项介绍](#chap-Introduction_to_Control_Groups.html#itemlist-Controller-Specific_Kernel_Documentation){.xref}〉。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Introduction_to_Control_Groups.html#sec-Default_Cgroup_Hierarchies}1.2. cgroup 的默认层级 {.title}
:::
::: para
默认情况下，[**systemd**]{.application} 会自动创建 *slice*、*scope* 和
*service* 单位的层级，来为 cgroup 树提供统一结构。使用
`systemctl`{.command} 指令，您可以通过创建自定义 slice
进一步修改此结构，详情请参阅〈[第 2.1 节
"创建控制群组"](#chap-Using_Control_Groups.html#sec-Creating_Cgroups){.xref}〉。[**systemd**]{.application}
也自动为 `/sys/fs/cgroup/`{.filename} 目录中重要的 kernel
资源管控器（参见〈[Red Hat Enterprise Linux 7
中可用的管控器](#chap-Introduction_to_Control_Groups.html#itemlist-Available_Controllers_in_Red_Hat_Enterprise_Linux_7){.xref}〉）挂载层级。
:::
::: {#chap-Introduction_to_Control_Groups.html#war-libcgroup .warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
虽然不推荐使用 `libcgroup`{.systemitem} 软件包中的 `cgconfig`{.command}
工具，但它可以为 [**systemd**]{.application} （尤其是
`net-prio`{.systemitem}
管控器）暂不支持的管控器挂载、处理层级。永远不要使用
`libcgropup`{.systemitem} 工具去修改 [**systemd**]{.application}
默认挂载的层级，否则可能会导致异常情况。在 Red Hat Enterprise Linux
后续版本中，`libcgroup`{.systemitem} 软件库将会被移除。更多关于如何使用
`cgconfig`{.command} 的信息，请参考〈[第 3 章 *使用 libcgroup
工具*](#chap-Using_libcgroup_Tools.html){.xref}〉。
:::
:::
:::
### [⁠]{#chap-Introduction_to_Control_Groups.html#br-Systemd_Unit_Types}systemd 的单位类型
::: para
系统中运行的所有进程，都是 [**systemd**]{.application} init
进程的子进程。在资源管控方面，systemd 提供了三种单位类型（如需
`systemd`{.systemitem} 单位类型完整列表，请参阅《[Red Hat Enterprise
Linux 7
系统管理员指南](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7-Beta/html/System_Administrators_Guide)
· [*使用 systemd 管理 service*]{.emphasis}》）：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [ **service** ]{.bold .bold} ------ 一个或一组进程，由
    `systemd`{.systemitem} 依据单位配置文件启动。service
    对指定进程进行封装，这样进程可以作为一个整体被启动或终止。service
    参照以下方式命名：
    :::
    ``` synopsis
    name.service
    ```
    ::: para
    其中，*name* 代表服务名称。
    :::
-   ::: para
    [**scope**]{.bold .bold} ------ 一组外部创建的进程。由强制进程通过
    `fork()`{.function} 函数启动和终止、之后被
    [**systemd**]{.application} 在运行时注册的进程，scope
    会将其封装。例如：用户会话、 容器和虚拟机被认为是 scope。scope
    的命名方式如下：
    :::
    ``` synopsis
    name.scope
    ```
    ::: para
    其中，*name* 代表 scope 名称。
    :::
-   ::: para
    [**slice**]{.bold .bold} ------ 一组按层级排列的单位。slice
    并不包含进程，但会组建一个层级，并将 scope 和 service
    都放置其中。真正的进程包含在 scope 或 service
    中。在这一被划分层级的树中，每一个 slice
    单位的名字对应通向层级中一个位置的路径。小横线（\"`-`{.literal}\"）起分离路径组件的作用。例如，如果一个
    slice 的名字是：
    :::
    ``` synopsis
    parent-name.slice
    ```
    ::: para
    这说明 *parent*-*name*.`slice`{.literal} 是
    *parent*.`slice`{.literal} 的一个子 slice。这一子 slice
    可以再拥有自己的子
    slice，被命名为：*parent*-*name*-*name2*.`slice`{.literal}，以此类推。
    :::
    ::: para
    根 slice 的表示方式：
    :::
    ``` synopsis
    -.slice
    ```
:::
::: para
service、scope 和 slice 单位直接映射到 cgroup
树中的对象。当这些单位被激活，它们会直接一一映射到由单位名建立的 cgroup