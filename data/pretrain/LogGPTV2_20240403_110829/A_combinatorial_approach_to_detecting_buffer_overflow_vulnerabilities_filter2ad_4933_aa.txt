title:A combinatorial approach to detecting buffer overflow vulnerabilities
author:Wenhua Wang and
Yu Lei and
Donggang Liu and
David Chenho Kung and
Christoph Csallner and
Dazhi Zhang and
Raghu Kacker and
Rick Kuhn
A Combinatorial Approach to Detecting Buffer Overflow Vulnerabilities 
Wenhua Wang, Yu Lei, Donggang Liu, David 
Kung, Christoph Csallner, Dazhi Zhang 
Department of Computer Science and Engineering 
The University of Texas at Arlington 
Arlington, Texas 76019, USA 
{wenhuawang,ylei,dliu,kung,csallner,dazhi}@uta.edu 
Abstract— Buffer overflow vulnerabilities are program defects 
that can cause a buffer to overflow at runtime. Many security 
attacks  exploit  buffer  overflow  vulnerabilities  to  compromise 
critical data structures. In this paper, we present a black-box 
testing  approach  to  detecting  buffer  overflow  vulnerabilities. 
Our  approach  is  motivated  by  a  reflection  on  how  buffer 
overflow vulnerabilities are exploited in practice. In most cases 
the attacker can influence the behavior of a target system only 
by controlling its external parameters. Therefore, launching a 
successful attack often amounts to a clever way of tweaking the 
values  of  external  parameters.  We  simulate  the  process 
performed by the attacker, but in a more systematic manner. A 
novel  aspect  of  our  approach  is  that  it  adapts  a  general 
software  testing  technique  called  combinatorial  testing  to  the 
domain of security testing. In particular, our approach exploits 
the fact that combinatorial testing often achieves a high level of 
code  coverage.  We  have  implemented  our  approach  in  a 
prototype  tool  called  Tance.  The  results  of  applying  Tance  to 
five open-source programs show that our approach can be very 
effective in detecting buffer overflow vulnerabilities. 
Keywords:  Software  Security;  Security  Testing;  Buffer 
Overflow Vulnerability 
I. 
 INTRODUCTION 
largely  classified 
Software security is a priority concern in many security 
assurance  efforts  [26].  Existing  approaches  to  software 
security  assurance  can  be 
into  two 
categories.  The  first  category  is  based  on  static  analysis 
[6][30],  which  checks  security  properties  by  analyzing  the 
source  code  of  a  subject  program,  without  executing  the 
program. The second category is based on dynamic analysis 
or  testing  [1][31],  which  executes  the  subject  program  and 
checks  whether  the  program’s  runtime  behavior  satisfies 
some expected security properties. Static analysis is typically 
fast  and  can  be  used  to  prove  properties  about  a  program. 
However, static analysis suffers from false positives or false 
negatives  or  both.  Testing,  on  the  other  hand,  only  reports 
problems  that  have  been  observed  at  runtime.  However, 
testing  requires  test  input  selection  and  program  execution, 
which  can  be  difficult  and  time  consuming.  Furthermore, 
testing typically cannot be exhaustive. 
In this paper, we present a testing approach to detecting 
buffer  overflow  vulnerabilities.  A  buffer  overflow  occurs 
when  data  is  written  beyond  the  boundary  of  an  array-like 
data  structure.  Buffer  overflow  vulnerabilities  are  program 
defects that can cause a buffer overflow to occur at runtime. 
Raghu Kacker, Rick Kuhn 
Information Technology Laboratory 
National Institute of Standards and Technology 
Gaithersburg, Maryland 20899, USA 
{raghu.kacker,kuhn}@nist.gov
Many security attacks exploit buffer overflow vulnerabilities 
to  compromise  critical  data  structures,  so  that  they  can 
influence or even take control over the behavior of a target 
system [27][32][33]. 
Our  approach  is  a  specification-based  or  black-box 
testing  approach.  That  is,  we  generate  test  data  based  on  a 
specification  of  the  subject  program,  without  analyzing  the 
source  code  of  the  program.  The  specification  required  by 
our  approach is lightweight and does not have to be formal. 
In contrast, white-box testing approaches [5][13] derive test 
inputs by  analyzing  the  data and/or control  structure of the 
source  code.  Black-box  testing  has  the  advantage  of 
requiring no access to the source code, and is widely used in 
practice. However, it often suffers from poor code coverage. 
Code coverage is considered to be an important indicator of 
testing  effectiveness  [2].  A  black-box  testing  approach  that 
has  gained  significant  recognition  in  practice  is  called  fuzz 
testing or fuzzing [35], which generates test data randomly. 
Smart  fuzzing  [14][15]  applies  advanced  heuristics  and/or 
takes  advantage  of  additional  information,  e.g.,  domain 
knowledge. Fuzzing has been shown effective for detecting 
software  vulnerabilities.  However,  like  other  black-box 
testing techniques, poor code coverage is considered to be a 
major limitation of fuzzing [35]. 
A  major  objective  of  our  approach  is  to  achieve  good 
code  coverage  while  retaining  the  advantages  of  black-box 
testing. Our approach was motivated by a reflection on how 
buffer overflow vulnerabilities are exploited by the attacker 
in  practice.  In  most  cases  the  attacker  can  influence  the 
behavior of a target system only by controlling the values of 
its external parameters. External parameters are factors that 
could  potentially  affect  the  system  behavior.  Examples  of 
external  parameters  include  input  parameters,  configuration 
options,  and  environment  variables.  Therefore,  launching  a 
successful attack often amounts to a clever way of exploring 
the input space, typically by tweaking the values of external 
parameters.  (In  this  paper,  we  do  not  consider  interactive 
systems,  i.e.  systems  that  require  a  sequence  of  user 
interactions  in  the  course  of  a  computation,  where  each 
interaction  may  depend  on  the  outcome  of  the  previous 
interactions.)  Security  testing  essentially  needs  to  do  the 
same thing, but in a more systematic manner and with a good 
intent.  
In  a  typical  exploit  attempt,  the  tweaking  of  external 
parameter values consists of the following two major steps. 
First, the attacker identifies a single external parameter P to 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:42 UTC from IEEE Xplore.  Restrictions apply. 
978-1-4244-9233-6/11/$26.00 ©2011 IEEE269carry the attack data. We will refer to P as the attack-payload 
parameter.  P  is  often  chosen  such  that  during  program 
execution, its value is likely to be copied into a buffer B that 
is vulnerable to overflow and that is located close to a critical 
data  structure  C,  e.g.,  a  return  address  on  the  call  stack, 
which the attacker intends to compromise. The attack data is 
intended  to  overwrite  C  in  a  specific  way  that  allows  the 
attacker  to  gain  control  over  the  program  execution.  In 
Section  IV.A,  we  provide  empirical  evidence  that  a  single 
external parameter  is  used  to carry  the attack data  in  many 
buffer overflow attacks. In other words, there exists a single 
attack-payload  parameter  in  many  buffer  overflow  attacks. 
This observation plays a significant role in the design of our 
approach, as discussed in Section II. 
Second,  the  attacker  tries  to  assign  proper  values  to  the 
rest of the external parameters. Some of these parameters can 
take arbitrary values, i.e., the exploit attempt will succeed or 
fail, regardless of the values of these parameters. However, 
other parameters may be important for steering the program 
execution  to  reach  a  vulnerable  point,  i.e.,  a  statement  that 
actually copies the value of attack-payload parameter P into 
buffer  B  and  whose  execution  may  give  rise  to  a  buffer 
overflow. We will refer to these parameters as attack-control 
parameters.  Choosing  appropriate  values  for  the  attack-
control  parameters  is  as  critical  as  choosing  an  appropriate 
value for the attack-payload parameter in order to carry out a 
successful attack.  
The two steps described above can be repeated by using a 
different  parameter  as  the  attack-payload  parameter.  The 
main  idea  of  our  approach  is  trying  to  systematize  the 
tweaking  of  external  parameter  values  in  a  typical  exploit 
attempt  as  described  above.  Specifically,  we  identify  two 
conditions  that  must  be  met  in  order  to  expose  a  buffer 
overflow vulnerability. Our approach is centered on how to 
generate tests such that these two conditions are likely to be 
satisfied  for  potentially  vulnerable  points.  We  provide 
guidelines  on  how  to  identify  attack-payload  and  attack-
control  parameters  and  a  set  of  values  for  each  of  these 
parameters.  Moreover,  we  adapt  a 
technique  called 
combinatorial testing [4][7] to generate a group of tests for 
each  value  identified  for  each  attack-payload  parameter, 
such  that  one  of  these  tests  is  likely  to  steer  program 
execution to reach a vulnerable point that may be triggered 
by  this  value.  Combinatorial  testing  has  been  shown  very 
effective  for  general  software 
testing  [7][16][20].  In 
particular,  empirical  results  suggest  that  there  exists  a  high 
correlation  between  combinatorial  coverage  and  code 
coverage [3][11]. It is this correlation that is exploited in our 
approach  to  increase  the  likelihood  for  our  tests  to  reach  a 
vulnerable  point,  and  thus  the  likelihood  to  detect  buffer 
overflow vulnerabilities. 
Note that attack data often needs to be carefully crafted in 
order to carry out a real attack. However, for testing, our goal 
is to demonstrate the possibility of a buffer overflow, i.e., not 
to acquire specific control to do any real harm. As discussed 
in  Section  II,  this  greatly  simplifies  the  selection  of 
the  attack-payload 
parameter  values,  especially 
parameters.  
for 
in 
For  the  purpose  of  evaluation,  we  implemented  our 
approach  in  a  prototype  tool  called  Tance.  We  conducted 
experiments  on  five  open-source  programs:  Ghttpd  [12], 
Gzip  [17],  Hypermail  [19],  Nullhttpd  [28],  and  Pine  [29]. 
The  results  show  that  our  approach  can  effectively  detect 
buffer  overflow  vulnerabilities 
these  programs.  In 
particular, we examined vulnerability reports in three public 
vulnerability  databases.  This  examination  showed  that  our 
approach  detected  all  the  known  vulnerabilities but one  for 
the  first  four  programs.  For  the  last  program,  i.e.,  Pine, 
insufficient information was available to determine whether 
the  reported  vulnerabilities  were  the  same  as  the  ones  we 
detected. In addition, our approach detected a total of 9 new 
vulnerabilities  that  have  not  been  reported  in  the  three 
databases. 
The  remainder  of  this  paper  is  organized  as  follows: 
Section II describes our approach and presents an algorithm 
that  implements  our  approach.  Section  III  describes  the 
design  of  our  prototype  tool,  namely,  Tance.  Section  IV 
presents the results of our case studies. Section V discusses 
related  work  on  detecting  buffer  overflow  vulnerabilities. 
Section VI concludes this paper and discusses future work. 
II.  THE APPROACH 
In  this  section,  we  present  our  approach  to  detecting 
buffer  overflow  vulnerabilities.  Section  II.A  explains 
combinatorial testing in more detail. Section II.B illustrates 
the  main  idea  of  our  approach.  Section  II.C  presents  an 
algorithm  that  implements  our  approach.  Section  II.D 
provides  additional  discussion  on  the  practical  applications 
of our approach. 
A.  Combinatorial Testing 
Let  M  be  a  program  with  n  parameters.  Combinatorial 
testing,  which  is  also  referred  to  as  t-way  testing,  requires 
that, for any t (out of n) parameters of M, every combination 
of values of these t parameters be covered at least once. The 
value  of  t  is  referred  to  as  the  strength  of  combinatorial 
testing. Consider a program that has three parameters p1, p2, 
and p3, each  parameter  having  two  values,  0  and  1.  Fig. 1 
shows  a  2-way  (or  pairwise)  test  set  for  these  three 
parameters.  Each  row  represents  a  test,  and  each  column 
represents  a  parameter  (in  the  sense  that  each  entry  in  a 
column  is  a  value  of  the  parameter  represented  by  the 
column). An important property of this test set is that if we 
pick any two columns, i.e., columns p1 and p2, columns p1 
and p3, or columns p2 and p3, they contain all four possible 
pairs of values of the corresponding parameters, i.e., {00, 01, 
10,  11}.  An  exhaustive  test  set  for  these  parameters  would 
consist of 23 = 8 tests. 
A  number  of  algorithms  have  been  developed  for 
combinatorial test generation [4]. In particular, we reported 
on  a  combinatorial  testing  strategy  called  IPOG  [24].  The 
IPOG strategy generates a t-way test set to cover the first t 
parameters and then extends this test set to cover the first t + 
1  parameters.  This  process  is  repeated  until  this  test  set 
covers all the parameters. In [24], we reported a tool called 
ACTS  (formerly  known  as  FireEye)  that  implements  the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:42 UTC from IEEE Xplore.  Restrictions apply. 
270IPOG  strategy.  Our  approach  uses  ACTS  to  generate 
combinatorial test sets. 
Combinatorial 
testing  can  significantly  reduce 
the 
number  of  tests.  For  example,  a  pairwise  test  set  for  10 
Boolean parameters only needs as few as 13 tests, whereas 
an exhaustive test set consists of 1024 tests [7]. Despite this 
dramatic  decrease  in  the  number  of  tests,  combinatorial 
testing  has  been  shown  very  effective  for  general  software 
testing [20]. In particular, empirical results suggest that there 
exists a high correlation between combinatorial coverage and 
branch coverage [3][11]. It is this correlation that is exploited 
in our approach to achieve a high level of code coverage.   
Recently,  we  applied  combinatorial  testing  to  several 
different  domains,  including  web  application  testing  [36], 
concurrency 
testing  [23],  and  web  navigation  graph 
construction  [37].  Combinatorial  testing  has  also  been 
applied  to  testing  configurable  systems  in  the  presence  of 
constraints  [8].  We  believe  that  our  work  presented  in  this 
paper is the first attempt to apply combinatorial testing to the 
domain of software security testing.  
 p1        p2        p3 
 0          0          0 
 0          1          1 
 1          0          1 
 1          1          0 
Figure 1.   An example pairwise test set 
B.  Main Idea 
We  use  an  example  to  illustrate  the  main  idea  of  our 
approach. Assume that a statement L copies a string variable 
S  into  a  buffer  B,  without  checking  whether  B  has  enough 