results in more naive, less systematic approaches. However, this
second model does benefit from simplicity and flexibility, as its
prediction methodology can be applied across any network prefix
at any time. Computationally, it can also be more efficient as it
does not depend on any learning process, which may have to be
performed individually for every network prefix.
Relevant to the data modeling is the data source’s completeness, a
property that is inherently unknown. The independent seeds model
may be more appropriate when the collected seeds represent only
a small portion of the actually active addresses, as patterns in seeds
may not emerge enough to be inferred by a learned model. Con-
versely, when the seeds represent a significant fraction of addresses,
it may be easier to identify and leverage patterns for effective scan-
ning, although in such a case there are inherently fewer addresses
left to discover.
Additionally, it is important to design a target generation algo-
rithm that remains effective when operators deviate from standard
practices, given that organizations do not always adhere to RFCs.
For example, several of the routed prefixes from RouteViews [7]
are longer than 64 bits. Although this behavior does not conform
with RFC 4291 [20], there is no technical reason prohibiting this
practice. A TGA should exhibit the flexibility necessary to predict
beyond proposed standard practices.
IMC ’17, November 1-3, 2017, London, UK
Murdock et al.
5 6GEN ALGORITHM
In this section we introduce our target generation algorithm, 6Gen.
We present a conceptual overview of the algorithm and the intuition
behind our design decisions. Then, we discuss the algorithm in
detail and the optimizations that we implemented to operate it on
real-world datasets.
5.1 Overview
One natural approach for generating IPv6 scan targets would be
to try to reverse engineer organizational IP allocation schemes.
However, this approach has several downsides. It may be difficult
to determine an allocation pattern from a limited number of seeds.
Networks may use multiple assignment policies for the same region
of address space (e.g., based on host type). Or, it might be difficult
to determine the boundaries between independently managed net-
works.
Instead, we develop an algorithm that identifies dense regions of
similar seeds. We assume that dense regions of seeds are associated
with dense regions of active addresses and model seed addresses
as independent and identically distributed (IID) random samples
of active addresses. This contrasts with approaches that assume
dependencies between seeds. We note that although modeling seeds
as IID random samples leads to a simpler and more flexible target
generation, it may be less efficient because it cannot learn patterns.
6Gen greedily clusters similar seeds into address space regions
with high seed density, and outputs the addresses within these
regions as scan targets. The algorithm operates iteratively, first
identifying the most similar seeds and then clustering together
those that form the densest regions, until the total size of the clus-
tered regions grows larger than a user-provided scan budget. In
other words, the algorithm allocates portions of its scan budget
to “hot spot” regions with many similar seeds, which—under the
assumption that seed density is positively correlated with active
host density—will maximize the opportunity for finding previously-
unknown, active hosts.
Note that 6Gen is not purely density-driven, as it first identifies
similar seeds before clustering them into dense regions. It is possible
that clustering between more distant seeds results in higher density
regions. The motivation behind prioritizing similarity is budget
conservation, as clusters of more similar seeds form smaller regions
that consume less budget.
5.2 Distance Metric
To cluster similar addresses, we must define an address similarity
metric. We use the Hamming distance [19] between the nybble-
level representation of addresses and ranges. This metric counts the
number of nybble positions that differ between two addresses. To
calculate the distance between two regions of IP space, we consider
the distance from any wildcard (?) nybble to be zero. For example,
the distance between 2001:db8::58 and 2001:db8::51 is one; the
distance between 2001:db8::51 2001:db8::5? is zero. We note
that the Hamming distance also equals the number of nybbles that
would become newly dynamic if two addresses were clustered into
a range. Intuitively, this indicates the addresses are less similar as a
larger region is needed to encapsulate them.
Figure 1: Dynamic nybbles for a cluster of 7 seeds (the clus-
ter’s seed set). The cluster has three dynamic nybbles (the
other 29 nybble indices have identical values for all ad-
dresses) and a range of 2::?:?0?
We calculate distance at the nybble granularity because address-
ing schemes are potentially allocated at this specificity and because
we observe that bit-level granularity can lead to pairs of addresses
that intuitively seem less similar while sharing the same bit-wise
Hamming distance. For example, 2::20 and 201:: are 2 bits apart,
as are 2:: and 2::3. However, the second pair intuitively seems
more similar and potentially suggests exploration of the range 2::?.
5.3 Cluster Range Definitions
We use ranges to encapsulate the seeds in a cluster, as shown in
Figure 1. While it is natural to represent ranges of IPv6 addresses
with nybble wildcards accepting any legal value, we additionally
consider nybble wildcards with bounded values. We extend the nyb-
ble wildcard notation to denote specific nybble value ranges with
the following syntax [1-2,8-a]. We describe the tradeoffs between
clustering at the nybble wildcard granularity (“loose” clustering)
and at nybble specificity (“tight” clustering) in §6.3.
5.4 Algorithm Details
We provide pseudocode for 6Gen in Algorithm 1 and walk through
the algorithm in this section.
6Gen accepts a set of input seeds (i.e., known addresses) and
internally maintains a set of clusters defined by a range (the region
of address space that encompasses the seeds in that cluster) and a
seed set (the seeds that lie within the cluster’s range). The algorithm
instantiates with a cluster for each seed, containing the single seed
address and with a range equal to the seed (as shown in Function
InitClusters). In each successive iteration, 6Gen calculates the impact
of growing each cluster by adding the single closest seed. We note
that 6Gen does not merge similar clusters. Instead, it allows seeds
to belong to multiple clusters, and grows clusters independent of
one another.
In each iteration, we first identify the closest seed(s) to each
cluster based on Hamming distance (as shown in Function FindCan-
didateSeeds). We consider all non-cluster seeds that are minimally
equidistant as candidate seeds. For each potential cluster growth
by a candidate seed, the cluster range would expand, potentially
encapsulating additional seeds beyond the candidate seed (thus
further growing the cluster seed set). We identify what the full seed
set of the grown cluster would be under the expanded range, and
compute the resulting seed density—the grown cluster’s seed set size
divided by its range size (as detailed in Function GrowCluster). The
Target Generation for Internet-wide IPv6 Scanning
IMC ’17, November 1-3, 2017, London, UK
iteration concludes by growing the one cluster and candidate seed
pair that results in the highest resulting seed density. If there are
multiple growth options that result in the same maximum density,
we prioritize smaller grown clusters as they consume less budget.
Further tiebreaking is performed at random. 6Gen iterates until the
sum of cluster range sizes consumes the user-provided probe bud-
get or all seeds belong to a single cluster (as seen in Function 6Gen).
If using the most recently grown cluster exceeds the probe budget,
we consume the budget exactly by randomly selecting addresses
in the newly grown cluster’s range that were not in the cluster’s
pre-growth range.
We note that the algorithm can result in overlapped clusters
because we consider every non-cluster seed for potential growth,
and we grow clusters independently. We do not attempt to simply
merge partially overlapping clusters because this can result in a
significantly less dense supercluster. Instead, we allow clusters
to partially overlap. We do delete any cluster that becomes fully
encapsulated by another, by comparing a grown cluster’s new range
with all other cluster ranges to find any that are strict subsets. To
ensure that we do not double-count addresses against the budget,
we uniquely track all addresses that would be generated by the
clusters.
5.5 Optimizations
As described in the previous section, 6Gen is conceptually simple
but computationally expensive. For example, the naive implementa-
tion involves iterating over all clusters, and for each cluster, iterating
over all external seeds to find candidates. As clusters grow inde-
pendently, we can easily parallelize cluster growth computation.
We can further reduce the computational complexity with a couple
optimizations, which we describe here.
In each iteration, 6Gen finds candidate seeds to grow each cluster
with and computes the potential change in density for each cluster
growth. We note that only one cluster is changed per iteration
and that because clusters grow independently, all other clusters
remain unchanged and their best growths can be cached between
iterations. This reduces the naive implementation’s runtime by a
factor of O (N ) for N seeds.
It is also possible to optimize finding the seeds that need to be
added to a cluster when it expands. We store all seeds in a nybble
tree—a 16-ary tree where each level in the tree represents a nybble
position and branching corresponds to that position’s nybble value.
This allows us to quickly iterate over the seeds that fall within
a given range instead of iterating over all seeds. The nybble tree
also allows reconstructing a cluster’s seed set given its range. As
a space optimization, we only store a cluster’s range and seed set
size, instead of the seed set itself.
5.6 Performance Evaluation
To measure 6Gen’s performance, we implemented a prototype
of 6Gen in 3.6K lines of C++ code, using OpenMP [1] for multi-
threading support. We evaluated it against a set of 2.96M seeds
(described in §6.1) on a Linux server with dual 10-core Intel Xeon
E5-2650 (2.30 GHz) CPUs and 256 GB of memory. We grouped the
seeds by routed network prefix and separately ran 6Gen on each of
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
for seed in seedList do
Algorithm 1 6Gen pseudocode, simplified to illustrate conceptual
steps, and without optimizations (see §5.5).
1: clusterList = []
2:
3: function InitClusters(seedList)
4:
5:
6:
7:
8:
9: function FindCandidateSeeds(cluster, seedList) ▷ Computes
the minimum Hamming distance between cluster .ranдe and
all seeds in seedList not already in cluster, and returns the list
of seeds that are this minimum distance away.
cluster = new Cluster ()
cluster .addSeedU pdateRanдe (seed )
clusterList .add (cluster )
10:
11: function GrowCluster(seedList)
▷ Consider growing all
clusters by candidate seeds, and select the growth resulting in
the highest seed density and smallest cluster range size.
maxDensity, maxIndex, maxRanдeSize = 0, 0, In f inity
maxCluster = None
for index in [0, ..., clusterList .lenдth() − 1] do
cluster = clusterList[index]
candidateSeeds = FindCandidateSeeds (cluster , seedList )
for seed in candidateSeeds do
tmpCluster = cluster .copy()
tmpCluster .addSeedU pdateRanдe (seed )
for otherSeed in candidateSeeds do
if otherSeed in tmpCluster .ranдe then
tmpCluster .addSeedU pdateRanдe (otherSeed )
▷ Does not further change the range.
newDensity = tmpCluster .seedSet .size ()
tmpCluster .r anдe .size ()
if (newDensity > maxDensity) or (newDensity ==
maxDensity and tmpCluster .ranдe.size () 
дrownCluster .seedSet .size ()) then
clusterList[дrownIndex] = дrownCluster
else
return clusterList
IMC ’17, November 1-3, 2017, London, UK
Murdock et al.
Figure 2: Median execution time of running 6Gen on routed
prefixes with differing numbers of seeds. Routed prefixes
with fewer than 10 seeds are omitted as they all required
less than one second to process.
the 10,038 prefixes. We note that while we could parallelize execu-
tion across different prefixes, dedicating all CPUs to running 6Gen
on each prefix linearly was most performant.
We show the median runtime for differing number of seeds in
Figure 2. CPU compute time divides the total number of CPU cycles
spent executing 6Gen across all CPU cores with the CPU clock rate.
Wall clock time measures the actual runtime of 6Gen. Naturally, as
the number of seeds increases, the runtime increases. However, we
note that runtime is heavily dependent on the set of seeds—prefixes
with complex address structures can involve more clustering. For
example, while the prefix with the second most number of seeds
(157K) required two hours of wall clock time, the largest prefix
(189K seeds) required only 55 minutes. Running 6Gen on the entire
seed dataset required 9 hours and a maximum 3.3 GB of memory.
6 EVALUATION
In this section, we explore 6Gen’s performance under several oper-
ating conditions to better understand its utility and the scan targets
it generates. For each experiment, we evaluate 6Gen by running it
against the IPv6 addresses in the Rapid7 Forward DNS ANY dataset
grouped by routed block (§6.1) and then scanning generated ad-
dresses on TCP/80 using the IPv6 version of ZMap from Gasser
et al. [16]. We note that we do not address how to best allocate probe
budget across networks, and instead scan networks independently
with a static probe budget in our analysis.
For each variable we tested, we sent approximately 5.8 B probes
at 100 K packets per second. We randomized the order of the destina-
tion hosts and ran each scan in serial to avoid overloading networks.
We follow the guidelines outlined by Durumeric et al. [12] for ethi-
cal scanning. In particular, we signal the benign intent of our scans
through WHOIS and reverse DNS records, and provide project de-
tails and point of contact on a website hosted on each scanning
host. We respect all scanning opt-out requests, blacklisting them