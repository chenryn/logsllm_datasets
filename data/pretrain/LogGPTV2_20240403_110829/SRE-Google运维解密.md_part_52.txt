片数量和大小随着时间趋于上涨。
为的改变，该服务处理的数据可能已经变化了：例如，某个照片存储系统的每个用户照
第22章
处理连锁故障
一个组件如果在
---
## Page 283
同样的道理也适用于大型内部客户。针对最大的客户进行模拟灾难演习，以观察他们如
取决于服务本身，我们可能无法直接控制所有的客户端代码。但是，理解大客户是如何
理解最大的客户是如何使用服务的。例如，我们想知道客户端：
测试最常用的客户端
题可能不能很好地由合成压力测试流量展示，所以真实流量的压力测试可能会提供更真
行模拟故障测试，这样可以发现在真实流量情况下系统中的哪个组件先出问题。这种问
记住，每个独立组件都可能有不同的临界点，所以应该分别测试。
行Bug出现的时候。
次交互的状态，同时检查高负载情况下的回复正确性，这通常是某些非常难以查找的并
如果我们压力测试一个有状态的服务，或者使用缓存的服务，压力测试代码应该记录多
帮助回答下列问题：
我们还应该测试一个组件在过载之后再恢复到正常水平的行为状态。这种测试可能可以
与服务交互的还是很有益处的。
确保你有足够的可用额外容量以备自动保护措施失败，需要人工进行切换。可以考虑以
实的结果，当然也可能会造成用户可见的问题。所以在测试真实流量的时候一定要小心：
如果你的系统有恰当的过载保护措施，那么可以考虑在生产环境中针对一小部分容量进
系统中的哪个组件先崩溃，但这恰恰是问题出现时最需要的信息。
虑测试这两种场景。
下几种生产环境测试：
·快速或者缓慢地降低任务数量，超越之前预期的流量模式。
·如果高负载情况下几个服务器崩溃，负载需要降低多少才能使系统重新稳定下来？
。
）能够在服务中断的情况下排队。
，如果一个组件在高负载条件下进入了降级模式，它是否能够在无人工干预的情况
某个离线客户端的缓存）。
是否会由于外部因素导致流量的突然变化（例如，某个外部软件更新可能会清空<280
遇到错误时使用随机化的指数型延迟进行重试。
屏蔽不同的后端（试验超时等因素对系统的影响）。
快速去掉某一个集群的容量。
下退出该模式？
连锁故障的测试
我们不能够预先知道
241
---
## Page 284
281
以下场景可以试图重启：
统有用，而服务健康检查对负载均衡器有用。清晰地区分这两种健康检查模式可以帮助避
能够回复这种类型的请求”）是两种概念不同的操作。进程任务的健康检查对集群管理系
停止健康检查导致的任务死亡
242
如果软件服务器由于某种问题卡住了，而无法继续推进，重新启动可能会有帮助。针对
进程任务的健康检查（“这个进程是否响应请求”）和服务级别的健康检查（“该进程是否
时禁止健康检查可能可以使系统恢复稳定状态。
如果服务已经进入了某种死亡螺旋，只增加资源可能不能完全解决问题。
增加资源
锁故障是使用故障管理流程的好时机（更多信息参见第14章）。
解决连锁故障的立即步骤
量请求、资源过限，或者延迟度大幅升高。
关键性后端仍然可能会对请求截止时间过长的前端造成影响。前端不应该因此而拒绝大
在测试非关键性后端不可用之外，还应测试如果这些后端不返回结果前端如何表现。非
后端影响而变慢，或者占用更多资源。
键性后端（如，搜索结果）和非关键性后端（如，拼写建议）。请求可能会受非关键性
例如，如果某个前端同时有关键性和非关键性后端。通常情况下，
应该测试非关键性后端，以确保它们的不可用不会影响到系统中的其他关键性组件。
测试非关键性后端
何应对。询问内部客户是如何使用该系统的，以及他们是用什么手段来应对后端问题的。
重启软件服务器
免这种场景。
正在初始化还不能够开始工作，而另外一半任务正在由于过载而无法服务健康检查。暂
可能健康检查自身反而成为导致任务失败的一种模式。例如，如果半数以上的任务由于
某些集群任务管理系统，如Borg，周期性检查任务的健康程度，自动重启不健康的任务。
如果系统容量不足，而有足够的空闲资源，增加任务数量可能是最快的解决方案。然而，
一旦检测到服务处于连锁故障的情况下，可以使用一些不同的策略来应对一
第22章处理连锁故障
一个请求同时需要关
一同时，连
---
## Page 285
实现，而且必须要求了解哪些流量可以降级，并且有能力区分不同的请求。
通过提供降级回复来减少工作量，或者丢弃不重要的流量。这个策略必须要在服务内部
进入降级模式
数量应该是首先要做的。
者是触发条件。例如，如果一个服务内存不足，而进入了死亡螺旋，增加内存或者任务
后再次发生。因此，在使用这个策略之前，应该先考虑修复（或者掩盖住）根源原因或
连锁故障的问题没有修复（如，全局容量的紧缺），那么连锁故障可能在流量级别恢复之
的流量（例如预获取操作的流量），
办法可以（或者应不应该）差异化地丢弃用户流量。如果可以使用某种手段丢弃不重要
显然，这样的操作会造成用户可见的问题。取决于该服务的配置，还应该看一下是否有
这个策略可以在负载恢复到正常水平之前帮助缓存预热，逐渐建立连接等。
例如，如果高负载导致大部分服务器刚一启动就崩溃，可以通过以下手段将服务恢复到
丢弃流量是一个重型操作，通常是在连锁故障严重而无法用其他方式解决时才会采用。
丢弃流量
那这种动作可能使现在的连锁故障更严重，
到别处。最好能够试验性地进行这种改变，同时缓慢实施。如果根本原因是因为冷缓存，
确保在重启服务之前先确定连锁故障的源头。还要确保这种操作不会简单地将流量迁移
最重要的是，这个策略只有在底层问题已经修复的情况下才能恢复服务。如果触发这个
正常水平：
4.逐渐提升负载水平。
3.允许大部分的软件服务器恢复健康。
2.将负载降低到一定水平，使得崩溃停止。考虑在这里激进一些，如果整个服务都
1.解决最初的触发原因（如增加容量）。
死锁。
某些正在处理的请求因为没有截止时间设置而正在消耗资源（如正在占用线程）。
Java服务器处于GC 死亡螺旋中。
在崩溃循环中，那么可以考虑降低流量到1%的水平。
一定要先采用这种手段。
解决连锁故障的立即步骤
|243
282
---
## Page 286
283
244
用户可见错误，或者低质量结果要比尝试继续服务所有请求要好。理解这些临界点所在，
当一个系统过载时，某些东西总是要被牺牲掉。
小结
是通过其他手段消除。
如果某些请求造成了高负载，或者是崩溃（如致死请求），可考虑将它们屏蔽掉，或者
消除有害的流量
搜索索引的更新、数据复制、请求处理过程中的资源统计等，可考虑关闭这些来降低负载。
某些服务有一些重要的，
消除批处理负载
不用再操心这类问题了。
团队启用了自动伸缩机制，于是任务的数量可以自动跟着流量增长，这样他们就
的情况下，GSLB负载均衡器可以将一些流量导入邻近的数据中心。同时，SRE
哪些可以做得更好，和一系列待办事项来避免这个情景重现。例如，在服务过载
接下来，SRE书写了一篇事后总结，详细说明了触发问题的事件，哪些做得好
搜索服务。
比亚搜索任务的任务数量。通过这种操作，成功恢复了亚洲数据中心的莎士比亚
为了解决这个问题，SRE临时向亚洲数据中心增加了一些服务容量，调整了莎士
由于这个原因，服务监控页面上的某些图表变成了红色，并且SRE收到了紧急警报。
常工作的任务数量持续减少。
护措施的存在，任务还是一个接一个地失败了，然后被Borg系统重启，这导致正
试（例如，之前提到的图片），要么采用随机指数型延迟进行重试。即使有这些保
再返回解释故事发生位置的小地图。取决于RPC的目的，超时的RPC要么不再
开发者为服务加入了优雅降级功能。当容量不够时，服务不再返回照片，或者
（production readiness review）流程指出了一些问题，开发团队已经解决。例如，
幸运的是，
过了服务容量。服务容量的问题伴随着当时正在进行的大型更新而变得更严重了
务是进行进一步研究的最佳工具。随着这次广播，亚洲数据中心的流量激增，超
某个关于莎士比亚作品的纪录片在日本上映了，同时特别指明了莎士比亚搜索服
第22章
一些安全防护措施帮助缓解了可能的故障。生产环境准备评
处理连锁故障
莎士比亚搜索服务的连锁故障
，但是并非关键的流量负载，可考虑将这些负载来源关闭。例如，
一旦一个服务越过了临界点，服务一些
---
## Page 287
接踵而至。
但是也可能会提高大规模的服务故障的几率。一定要小心评估这些改变，否则灾难就会
增加缓存以提高性能或者降低延迟：这些手段原本都是为了优化正常情况下的服务性能，
务更容易出现事故。在请求失败的时候重试、负载自动转移、自动杀掉不健康的服务器、
如果不加小心，
以及超过临界点系统的行为模式，是所有想避免连锁故障的运维人员所必需的。
，某些原本为了降低服务背景错误率或者优化稳定状态的改变反而会让服
小结
|245
284
---
## Page 288
285
第23章
246
某项事情达成一致的问题。例如，分布式系统中的几个进程可能会想对某个关键配置文
致的系统状态。
但是却带来维护系统一致状态视图的需求。解决这个问题常常是比较复杂且难以实现的。
略经常需要将该服务分布式运行。跨物理区域分布式运行系统相对来说是比较简单的，
自然灾难可能会同时让一个区域内的几个数据中心同时下线。SRE需要针对这些灾难做
编辑：TimHarvey
作者：LauraNolan
提高可靠性
管理关键状态：利用分布式共识来
件的内容，某个分布式的锁持有状态，或者某个队列中的消息是否已经被处理达成一致。
在构建可靠的、
一组服务进程可能想要可靠地对以下问题产生共识：
好事先准备，预先制定应对策略，以保障在灾难来临时系统仍能正常运行。这些应对策
一个服务进程可能会在运行中崩溃，或者由于其他原因需要被重启。硬盘可能会出故障。
·本组中都包含哪些进程？
·哪个进程目前是该组进程的领头人（leader）？
）数据存储中的某个键对应的值是什么？
某个进程目前是否还持有租约（hold a lease）？