数入口地址，程序将最终跳去执行shellcode，如图6.3.2所示。
199
---
## Page 225
day安全"
0
Object
虚表指针
（被重置为0x004088CC）
软件漏洞分析技术
寻找虚表
Shellcode
调用虚函数
伪造的虚函数入口地址
(0x0040881C)
（第
图6.3.2利用虚表
2
实验环境如表6-3-1所示。
版
表6-3-1
实验环境
推荐使用的环境
备注
操作系统
Windows XP SP2
其他Win32操作系统也可进行本实验
编详器
Visual C++ 6.0
编详选项
默认编译选项
build版本
release版本
说明：伪造的虚表指针和虚函数指针依赖于实验机器，可能需要通过动态调试重新确定，您也可以通过在程序中简单地
打印出overlow.buf的地址，从而计算出这两个值。
按照环境编译运行可以得到我们熟悉的消息框，如图6.3.3所示。
C:Woc
laiwi
图6.3.3虚表利用成功
200
---
## Page 226
第
由于虚表指针位于成员变量之前，溢出只能向后覆盖数据，所以很可惜这种利用方式在“栈
6
溢出”场景下有一定局限性。
章
题外话：之所以给“栈溢出”打引号，是因为对象的内存空间位于堆中。然而，称之
形
为“堆溢出”也不很恰当，因为这里所讨论的仍然是连续的线性覆盖，没有涉及
形
色
DWORDSHOOT。也许，这里比较准确的描述是“数组溢出”或“连续性覆盖”。
色
的
内
有攻击的机会的，如图6.3.4所示。
存
对于DWORDSHOOT的利用场景，攻击虚函数会更容易些。修改虚表指针或直接修改虚
攻
函数指针都是不错的选择。
击
说到这里，大家应该明白所谓的虚函数、面向对象在指令层次上和C语言是没有质的区别
技
术
的，以漏洞利用的眼光来着这些东西，其实都是函数指针。
虚表指针
其他成员变量
虚表指针
其他成员变量
图6.3.4溢出邻接对象的虚表
6.4HeapSpray：堆与栈的协同攻击
在针对浏览器的攻击中，常常会结合使用堆和栈协同利用漏洞。
（1）当浏览器或其使用的ActiveX控件中存在溢出漏洞时，攻击者就可以生成一个特殊的HTML
文件来触发这个漏洞。
（2）不管是堆溢出还是栈溢出，漏洞触发后最终能够获得EIP。
（3）有时我们可能很难在浏览器中复杂的内存环境下布置完整的shellcode。
（4）页面中的JavaScript可以申请堆内存，因此，把shellcode通过JavaScript布置在堆中
成为可能。
可能您立刻会有疑问，堆分配的地址通常有很大的随机性，把shellcode放在堆中怎么进行定
位呢？解决这个问题的方法就是本节将介绍的HeapSpray技术。
HeapSpray技术是Blazde和SkyLined在2004年为IE中的IFRAME漏洞写的exploit
（http://www.edup.tudelft.nl~bjwever/advisory_iframe.html.php）中第一次使用的，该漏洞的微软
201
---
## Page 227
day
0
编号为MS04-040，CVE编号为CVE-2004-1050。现在，这种技术已经发展为对浏览器攻击的
安
经典方法，并被“网马”所普遍采用。
全：
在使用HeapSpray的时候，一般会将EIP指向堆区的OxOCOCOCOC位置，然后用JavaScript
申请大量堆内存，并用包含着0x90和shellcode的“内存片”覆盖这些内存。
软
件漏
通常，JavaScript会从内存低址向高址分配内存，因此申请的内存超过200MB（200MB=200
×1024×1024=0x0C800000>0x0C0C0C0C）后，0x0C0C0C0C将被含有shellcode的内存片覆
洞
盖。只要内存片中的Ox90能够命中Ox0C0C0C0C的位置，shellcode就能最终得到执行。这个
分析技术
过程如图6.4.1所示。
Heap Spray之前的堆区
申请200MB的空间后
（第
300MB
300MB
2
空闲
空闲
版
OxOCOCOCOC
000000OXO
OxOCOCOCOC
200MB
空闲
200MB
100MB
100MB
图6.4.1HeapSpray技术示意图
我们可以用类似下面这样的JavaScript产生的内存片来覆盖内存。
var nop=unescape（"8u9090eu9090"):
while(nop.length<=0x100000/2)
!dou=+dou
）//生成一个1MB大小充满0x90的数据块
nop=nop.substring（0,0x100000/2-32/2-4/2-she11code.1ength-2/2）;
var slide=new Arrary(）;
for（vari=0;i<200;i++)
slide[i]=nop+shellcode
对于这段JavaScript需要解释如下。
（1）每个内存片大小为1MB。
202
---
## Page 228
第
（2）首先产生一个大小为1MB且全部被0x90填满的内存块。
6
（3）由于Java会为申请到的内存填上一些额外的信息，为了保证内存片恰好是1MB，我
章
们将这些额外信息所占的空间减去。具体说来，这些信息如表6-4-1所示。
形
在考虑了上述因素及shellcode的长度后，nop=nop.substring（0,0x100000/2-32/2-4/2-
形
shellcode.length-2/2）将-一个内存片恰好凑成1MB大小。
色
色
表6-4-1额外信息
的
SIZE
说明
内
malloc header
32 bytes
堆块信息
存
攻
string length
4 bytes
表示字符串长度
击
terminator
2bytes
字符串结束符，两个字节的NULL
技
术
（4）如图6.4.2所示，最终我们将使用200个这种形式的内存片来覆盖堆内存，只要其中
任意一片的nop区能够覆盖0x0C0C0C0C，攻击就可以成功。
HeaderLengh
32 bytes 4 byles
0x90 0x90 0x90 0x90 0x90 0x90
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
1MB的内存片
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90 0x90
08X006x0.06X006x0
shelloode
(2 bytos)
Nul
图6.4.2“内存片”的部署情况
为什么采用IMB大小作为内存片的单位呢？在HeapSpray时，内存片相对于shellcode和
额外的内存信息来说应该“足够大”，这样nop区域命中Ox0C0COCOC的几率将相对增加：如
果内存片较小，shellcode或额外的内存信息将有可能覆盖Ox0C0C0COC，导致溢出失败。1MB
的内存相对于200字节左右的shellcode，可以让exploit拥有足够的稳定性。
我们将在第27章中实践这种技术。
203.
---
## Page 229
第7章手机里的缓冲区溢出
7.1Windows Mobile简介
7.1.1WindowsMobile前世今生
WindowsMobile是Microsoft应用于PocketPC和Smartphone的软件平台，它是从Windows
CE的基础上发展而来的，其内核也是基于WindowsCE。WindowsMobile的一大特色是将用户
熟悉的桌面Windows扩展到了手机上，这使得WindowsMobile的操作沿用了人们熟悉的
Windows操作，大多数用户都能很快上手。与PC上的Windows一样，手机上的WindowsMobile
系统同样包含开始菜单、资源管理器、IE、WindowsMediaPlayer等功能，因此使得新手感到
非常熟悉、很容易上手。WindowsMobile也可以像桌面PC机那样安装第三方的软件、游戏，
不断扩展它的功能，使之成为一款名副其实的移动PC。由于都是微软的产品，桌面电脑系统
与手机系统可以进行无缝结合，使得手机与电脑之间的交互异常简便。
WindowsMobile发展到今天经历了数次大的变革，我们不妨从他的鼻祖WindowsCE的诞
生看起。
1996年WindowsCE1.0诞生，标志着微软正式进军嵌入式操作系统领域。
1998年WindowsCE2.0出现，WindowsCE的第一次飞跃。
2000年WindowsCE3.0发布，也许微软觉得WindowsCE的名字不够气派，所以改名为
PocketPC2000
2002年WindowsCE4.1分化为两大阵营：PocketPCPhone2002和Smartphone2002
2003年WindowsMobile这一名称正式启用，微软将PocketPC2003和SmartPhone2003
统一改称为WindowsMobile2003，该版本的WindowsMobile系统是基于WindowsCE4.2的。
2005年微软回归内核版本命名方法，将基于WindowsCE5.0的操作系命名为Windows
Mobile5.0。
2007年微软在1月份的SGSM大会上正式推出WindowsMobile6.0移动设备操作系统，
其内核版本为WindowsCE5.2。它包括3个版本，但是版本分类采用了不同的命名方式：
Professional（支持触摸屏智能手机）、Standard（非触控屏智能手机）、Classic（不具备手机功
能的手持设备）。
2008年微软推出WindowsMobile6.1操作系统，内核版本依然为WindowsCE5.2，其主
要的特性在于稳定性的提高，这也是目前被广泛应用的一个版本。
2009年WindowsMobile6.5操作系统发布，内核版本依然为WindowsCE5.2，新版系统
重点强化了对触摸操作的支持和优化，比传统方格式界面更易于触摸点击，例如蜂窝形的主菜
---
## Page 230
第
单界面。新版本的IntermetExplorerMobile浏览器也增加了可触摸的页面缩放滑竿和常用命令。
7
“WindowsMarketplace”在线商店将为手机提供各类应用的直接下载。
章
2010年发布的WindowsPhone7，微软再次修改其命名规则，并使用了全新的内核。
手
是不是有点乱？为了大家更为直观的看到WindowsMobile的发展历程，我们将其总结到
机
一张表中，通过表7-1-1大家可以清晰地看到这一过程。
里
的
表7-1-1WindowsMobile发展历史
缓
发布时间
操作系统版本
WindowsCE内核版本
冲
1996
1.0
区
Windows CE 1.0
溢
8661
Windows CE 2.0
2.0
出
2000
Pocket PC 2000
3.0
PocketPCPhone 2002
4.0
2002
Smartphone 2002
4.1
2003
Windows Mobile 2003
4.2
2005
Windows Mobile 5.0
5.0
2007
Windows Mobile 6.0
5.2
2008
Windows Mobile 6.1
5.2
2009
Windows Mobile 6.5
5.2
2010
Windows Phone 7
7
在Symbian一边独大，Iphone风生水起，Android快速发展的今天，微软即将发布的Windows
Phone7能否浴火重生，再现往日辉煌，在智能手机领域捍卫一席之地，我们将拭目以待。
7.1.2WindowsMobile架构概述
由于WindowsMobile的核心为WindowsCE，因此其架构与CE的架构一脉相承。Windows
Mobile同样采用了经典的层次化设计，整个系统被划分为彼此相关的多个层次，每个层次由若
干个模块构成，用以实现不同的功能。原则上每个层只需与其相邻的层进行交互，其他层对其
呈透明状态，这种分层结构的好处是将硬件平台与软件、操作系统与应用程序进行了最大限度
的分离，并且使系统有良好的扩展性、可移植性和可维护性。WindowsMobile的系统架构分成
了四个层次，由底向上分别为：硬件层、OEM层、操作系统层和应用层。具体的层次化体系
结构如图7.1.1所示。
接下来我们来看看各层次具体的作用。
（1）硬件层
硬件层是指由CPU、存储器、IV/O等设备构成的硬件平台，WindowsMobile系统所需
的最低硬件配置包括支持WindowsCE的32位处理器、用于线程调度的实时时钟、用于
存储和运行操作系统的存储单元。根据实际需要可能还有其他外设，如：键盘、显示屏、
GPRS等。
205
---
## Page 231
0
day
owsMobile系能架构
安全
用户应用程序
皮用晨
Internet客户墙服务
用户养面
：
WlndowsCE应用程序
（国际化）
软
件
应用与服务
操作系统层
漏
洞
Core DLL
对象存储
分
图形窗口与事
析技
多体
件系统
设备管理
通信与网络
(GWES)
术
内核
（第
OAL
2
Boot
设备驱动
Loader
配置文件
版
图7.1.1WindowsMobile系统架构
(2）OEM层
OEM层是WindowsCE内核与目标硬件之间的一个代码层，位于操作系统层与硬件层之
间，用来抽象硬件，实现操作系统的可移植性。OEM层可以分成OEM抽象层（OAL）、引导
程序（BootLoader）、配置文件和设备驱动四部分。