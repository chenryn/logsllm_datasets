adversary must ﬁrst collect all fragments of a frame before it
k{Frag0(s)} and Encn+1
k
166    30th USENIX Security Symposium
USENIX Association
Client
Attacker
AP (vulnerable)
Header
Payload
1(cid:13)
e
g
a
t
S
2(cid:13)
e
g
a
t
S
Visit attacker’s website
k{Frag0(s)}
{Frag1(s)}
Encn
Encn+1
k
Detect packet to
attacker’s server
Encn
k{Frag0(s)}
Decrypt & store fragment
normal trafﬁc & 4-way handshake rekey
Send sensitive data
Encn
Encn+1
(cid:96){Frag0(s(cid:48))}
{Frag1(s(cid:48))}
(cid:96)
Detect packet with
sensitive data
Encn+1
(cid:96)
{Frag1(s)}
Reassemble frame
Packet with sensitive
data is sent to attacker
Figure 4: Mixed key attack against fragmentation. The ﬁrst
fragment is the start of an IP packet to the attacker’s server,
which is appended in stage 2(cid:13) with user data. The reassembled
packet is sent to the attacker’s server, exﬁltrating the user data.
can determine the length of the full frame. Once the attacker-
destined packet is detected, the adversary only forwards the
ﬁrst fragment to the AP. The AP will then decrypt this frag-
ment and will store the decrypted fragment in its memory.
Between stages 1(cid:13) and 2(cid:13) of the attack, the adversary for-
wards all frames between the client and the AP. To prevent
these frames from interfering with the attack, the sequence
number s is never used when forwarding a frame to the AP.
This assures that the ﬁrst fragment of the attacker-destined
packet is not removed from the AP’s memory. Any other for-
warded fragments also will not interfere with the attack, since
the standard requires that a device must support the concur-
rent reception of at least 3 fragmented frames [31, §10.6].
Before stage 2(cid:13) starts, the client and AP must update, i. e.,
rekey, the pairwise session key from k to (cid:96) using the 4-way
handshake. Note that the adversary can predict when rekeys
occur because they happen at regular intervals, and rekeys
can be detected because they cause the packet numbers of the
data-conﬁdentiality protocol to restart from zero.
Stage 2(cid:13) of the attack starts when the client sends a frag-
ment containing sensitive information. This second fragment
must have a packet number equal to n + 1, and otherwise the
attacker has to wait until another 4-way handshake is exe-
cuted so packet numbers start from zero again. The adversary
assigns sequence number s to the second fragment, which is
possible because this ﬁeld is not authenticated, and forwards
{Frag1(s)} to the AP (stage 2(cid:13)
the resulting fragment Encn+1
in Figure 4). Upon reception of the second fragment, the AP
(cid:96)
192.168.1.2 to 3.5.1.1
GET /image.png HTTP/1.1
192.168.1.2 to 39.15.69.7
POST /login.php HTTP/1.1
user=admin&pass=SeCr3t
Mixed key attack against fragmentation
192.168.1.2 to 3.5.1.1
POST /login.php HTTP/1.1
user=admin&pass=SeCr3t
Figure 5: Mixing fragments of two packets to exﬁltrate user
data to an attacker-controlled server. The red packet is sent to
the attacker’s server, and the green packet contains user data.
combines both decrypted fragments to reassemble the packet.
This packet is now a combination of the attacker-destined
packet and a packet that contains sensitive user data.
Against devices that only accept fragments with consecu-
tive packet numbers, the second fragment must have packet
number n + 1. To increase the chance that this is the case, an
adversary can rely on the BEAST threat model to make the
client send background trafﬁc using malicious JavaScript.
Packet construction In our attack, we mix a fragment
of an attacker-destined IP packet with a fragment of a packet
containing user data. This process is illustrated in Figure 5.
The IP checksum of the forged packet is correct since it is
only calculated over the IP header. The TCP checksum will
be incorrect, but this has no impact on the attack: intermediate
hops will still forward the packet to its ﬁnal destination since
they only verify the IP checksum. And since the attacker con-
trols the ﬁnal destination, they can simply ignore the incorrect
TCP checksum. Finally, the attacker-destined packet must
not be larger than the targeted packet with sensitive user data.
Otherwise, the IP length ﬁeld will be larger than the actual
payload of the reassembled packet, causing the AP to drop
the packet. If the IP length ﬁeld is smaller than the payload,
only the trailing data is discarded.
The data that can be exﬁltrated depends on the conﬁgura-
tion of the network and the victim. When a fragmentation
threshold of 512 bytes is used, which is for example rec-
ommended by Arch Linux [8], data beyond this position is
located in the second fragment meaning it can be exﬁltrated.
Therefore we can exﬁltrate HTTP cookies, POST data, basic
auth credentials, etc. Additionally, with the BEAST threat
model, malicious JavaScript can let the client perform cross-
origin requests with extra parameters in the URL that push the
cookie towards the second fragment. This is similar to now-
standard methods used in attacks against TLS [4, 20, 22, 42].
4.4 Attack variations
Vulnerable clients Against clients we can perform a sim-
ilar attack to forge packets. However, the TCP or UDP check-
sum of the forged packet only has a 2−16 chance of being
USENIX Association
30th USENIX Security Symposium    167
correct, meaning the packet will likely be dropped. Neverthe-
less, attacks remain possible against multimedia streaming
protocols that run over UDP-Lite. This is because the check-
sum in UDP-Lite is only over a portion of a packet, so certain
data can be changed without invalidating the checksum [35].
More general mixed key attacks against clients are possible
when combined with fragment cache attacks (see Section 5).
Multiple key support The 802.11 standard contains an
optional feature where the sender can pick between two keys
to encrypt unicast frames [31, §12.6.21]. This is useful to
facilitate the switchover to a new session key, and is made
possible by including a key ID in a frame’s header that iden-
tiﬁes the used key. When this feature is used, two fragments
that are encrypted under different keys can be forwarded to
the target immediately after one another. This makes attacks
easier in case the target removes fragments from memory
after a certain timeout, or if any frames sent in-between the
fragments interfere with their reassembly on the target.
4.5 Applicability to WEP and TKIP
When using WEP with dynamic rekeying, it is also possible to
mix fragments that are encrypted under different keys. We em-
pirically conﬁrmed this against Linux, which shows that the
discovered design ﬂaw has been part of Wi-Fi since its release
in 1997. Moreover, because WEP does not require that frag-
ments have consecutive packet numbers, i. e., initialization
vectors, an adversary can even mix fragments of two frames
that are encrypted under the same key (see also Section 6.2).
The TKIP protocol is unaffected because, unlike CCMP
and GCMP, its authenticity check covers the full frame instead
of the individual fragments. However, some devices do not
perform this authenticity check, meaning mixed key attacks
can still be possible against TKIP in practice (see Section 6.7).
4.6 Experiments
To perform our attack, we have to inject frames with speciﬁc
fragment and sequence numbers. However, wireless network
cards may overwrite these ﬁelds. Additionally, network cards
may reorder frames with a different QoS priority, which can
also interfere with our attack. To overcome these problems,
we patched the driver of Intel cards, and we patched the driver
and ﬁrmware of Atheros cards (see Appendix A).
In our tests, all major operating systems are vulnerable,
including Windows, Linux, Android, macOS, and iOS. Sec-
tion 6.1 contains an overview of all tested devices. A low
number of devices are unaffected because they require that
all fragments are received immediately after one another, and
any frames sent in-between interfere with their reassembly,
preventing a default mixed key attack. This is, for example,
the case against NetBSD, FreeBSD, and against a few network
cards on Windows and Linux. We remark that this behavior
is not compliant with the standard. Additionally, we found a
method to still perform mixed key attacks against FreeBSD.
This technique relies on non-trivial conditions and is further
discussed in Appendix E. Finally, OpenBSD is not affected
because it does not support fragmentation.
All four home routers that we tested were affected, though
only one of our three professional APs was affected. Against
our Aruba AP-305, any frame sent in-between fragments in-
terferes with their reassembly. Our Cisco Catalyst 9130 did
not support renewing the pairwise session key, meaning a
default mixed key attack is not possible.
To keep experiments more reproducible, we performed end-
to-end attacks against Linux using virtual Wi-Fi interfaces.
In particular, we implemented and successfully performed
an attack against a vulnerable AP to exﬁltrate (decrypted)
fragments sent by the client.
Against Linux, the attack is more tedious because it clears
fragments from memory after two seconds. This can be over-
come in the BEAST threat model, where malicious JavaScript
on the client can trigger the transmission of an attacker-des-
tined packet before the 4-way handshake completes. After
this, trafﬁc can be generated such that a packet with sensitive
data is sent with a high enough packet number within two
seconds, which can then be exﬁltrated. We successfully tested
this method against Linux 4.9.
4.7 Discussion
To prevent mixed key attacks, a receiver should verify that all
fragments were encrypted under the same key. We elaborate
on this in Section 7.2.
Our attacks assumed that the network periodically refreshes
the pairwise session key. In our experience this is not done
by default by most routers and APs. However, this does not
limit attacks in practice because nearly all implementations
accept non-consecutive packet numbers, meaning our attacks
are possible without relying on rekeys (see Section 6.2).
A limitation of our attack is that it can only be used when
one or more devices send fragmented frames. However, we
conjecture that dynamic fragmentation can be abused to in-
duce the transmission of fragmented frames. With dynamic
fragmentation, a transmitter will send fragmented frames in
order to ﬁll allocated time slots (recall Section 2.2). To induce
this type of fragmentation, we can use our MitM position to
spoof the 802.11ax capabilities element of the client or AP,
and advertise that they support dynamic fragmentation. An
experimental analysis of this technique is left as future work.
5 Poisoning the Fragment Cache
In this section, we present a design ﬂaw that enables an adver-
sary to inject fragments into the memory, i. e., fragmentation
cache, of victims. We show that this vulnerability allows an
adversary to exﬁltrate client data and inject arbitrary packets.
This design ﬂaws has been assigned CVE-2020-24586.
168    30th USENIX Security Symposium
USENIX Association
5.1 Threat model
Our attacks work against WEP, CCMP, and GCMP. The TKIP
protocol is only affected if the authenticity of reassembled
frames is not veriﬁed (see Section 6.7). Similar to the mixed
key attack, a device in the network must be sending frag-
mented frames for the attack to be possible. In Section 6.3
we abuse implementation ﬂaws to perform fragment cache
attacks without this assumption. We also make the following
assumptions depending on whether the target is a client or AP:
Vulnerable APs Our attack will exploit vulnerable APs
in hotspot-type networks such as eduroam, and Hotspot 2.0
networks where users can, for example, authenticate using
their mobile SIM card [6]. In these networks, users may dis-
trust each other, and they will use individual authentication
and encryption keys. Our attack also works when these net-
works use downstream group-addressed forwarding and client
isolation (recall Section 2.4).
Vulnerable clients We assume the client will connect to
a protected Wi-Fi network of which the adversary also knows
the password. The client does not trust this network, and will
not send sensitive data when connected to this network. Such a
network can be a coffee shop or conference network where the
password is publicly shared. Note that in practice an adversary
can listen to probe requests to obtain the networks that (old)
devices are willing to connect to [21], and can use password
sharing apps to obtain the password of nearby hotspots.1
5.2 Exﬁltrating client data
We begin by attacking a vulnerable AP and exﬁltrating data
sent by a client. In stage 1(cid:13) of this attack, we spoof the MAC
address of the targeted client and connect to the network
using valid credentials (see Figure 6). This allows us to inject
fragments into the AP’s memory that are saved under the
victim’s MAC address. Note that the attacker possesses valid
credentials since we target hotspot-type networks.
Stage 2(cid:13) of the attack starts when the real client sends an
Auth frame in order to connect to the network. At that point,
k{Frag0(s)}
the adversary sends the encrypted fragment Encn
to the AP, which contains the start of an attacker-destined
IP packet. The AP decrypts this fragment and stores it in
its fragment cache under the victim’s MAC address. After
this, the attacker disconnects from the network by sending a
Deauth frame, and subsequently establishes a multi-channel
MitM between the client and AP. The 802.11 standard does
not state that the AP must remove fragments when a client
disconnects or reconnects, meaning the injected fragment
stays in the fragment cache of the AP.
Between stages 2(cid:13) and 3(cid:13) of the attack, the adversary lets
the client connect normally. Additionally, the adversary never
sends frames to the AP with sequence number s. This assures
1Example apps are http://wifimap.io or http://instabridge.com
1(cid:13)
e
g
a
t
S
2(cid:13)
e
g
a
t
S
3(cid:13)
e
g
a
t