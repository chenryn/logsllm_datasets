    gc handles struct/array comparisons by short-circuiting if it finds any unequal
    fields/elements, and this behavior is noticeable because the Go spec requires
    comparisons to panic in some cases; e.g., see http://play.golang.org/p/5jqSUAT1xC
    However, unlike short-circuiting for evaluating "a && b", it doesn't
    seem that short-circuiting of field/element comparisons is specified by the spec. 
    Arguably, the spec currently requires that instead both comparisons in the above program
    should panic.
    Not a major issue, but thought I'd file an issue to note it.  A couple possible ways to
    address it:
    1. Ignore it since it probably doesn't matter in practice.
    2. Specify gc's behavior since it's intuitive and easy to explain.
    3. Specify a set of allowable behaviors (e.g., allow short-circuiting or not; and/or
    allow any particular ordering for element/field comparisons).
    4. Change gc to not (visibly) short-circuit comparisons that involve comparing interface
    types; e.g., comparing two [512]int arrays can still short-circuit, but comparing two
    struct{a int; b, c interface{}; d int} structs would need to always compare the b and c
    fields, and a and d could be compared conditionally.