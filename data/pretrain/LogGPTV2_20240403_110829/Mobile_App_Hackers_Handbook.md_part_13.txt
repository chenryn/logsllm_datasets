MSFindSymbol(), as shown on line 12 of the following example:
1: #include 
2: #include 
3:
4: static int (*oldEnableEncryption)();
5:
6: int newEnableEncryption()
7: {
8: return 0;
9: }
10:
11: MSInitialize {
12: void *EnableEncryption = MSFindSymbol(NULL, "_EnableEncryption");
13:
14: MSHookFunction(EnableEncryption, newEnableEncryption,
15: &oldEnableEncryption);
16: }
Oftentimes, though, you will find that the application binary has been stripped of unnecessary symbols; hence
MSFindSymbol() cannot be used. In this scenario you will need to use the address of the function rather than
MSFindSymbol(). This may look as follows, where 0xdeadbeef is a placeholder for the address of your function:
unsigned int * EnableEncryption = (unsigned int *)0xdeadbeef;
To find the address of the function you should first disable PIE (using the tool described in
http://www.securitylearn.net/tag/remove-pie-flag-of-ios-app/) if it is enabled, and then use a disassembler
(for example, IDA Pro or Hopper) or debugger to find the address of the function you are interested in
instrumenting. This process has been somewhat simplified by the MS-Hook-C tool
(https://github.com/hexploitable/MS-Hook-C) released by Grant Douglas. The tool scans the running
application’s memory looking for a signature of your target function and can be used to calculate its runtime
address. This is also the process that you need to follow to hook a Swift function that is not derived from
NSObject.
Instrumenting an Objective-C method, as opposed to a standard C or C++ function, has some substantial
differences. First you need to extract and obtain the class and method definitions from the decrypted binary. The
process of decrypting a binary and extracting the class information was detailed in Chapter 2 in the sections
“Decrypting App Store Binaries” and “Inspecting Decrypted Binaries.” If you skipped these sections you should
refer to them to learn how to find the class and method names that can be used to inform tweak development.
Here is an example extension that instruments the isJailbroken instance method of the SecurityController
class in a hypothetical app:
1: #include 
2:
3: BOOL (*old_isJailBroken)(id self, SEL _cmd);
4:
5: BOOL new_isJailBroken(id self, SEL _cmd) {
6: NSLog(@"Hooked isJailbroken");
7: return NO;
8: }
9:
10: MSInitialize
11: {
12: MSHookMessageEx(
13: objc_getClass("SecurityController"), @selector(isJailBroken),
14: (IMP) new_isJailBroken, (IMP*)old_isJailBroken
15: );
16: }
Line 3: In a similar way to the previous example, a function is created that is filled in with a stub to call the
original implementation of the isJailBroken function if required.
Lines 5-8: A new function is created that simply returns NO whenever isJailBroken is called.
Lines 10-16: In a similar way to the previous example the MSInitialize macro is called to ensure the
MSHookMessageEx function is called when an application first loads.
Lines 12-14: The implementation of the original isJailbroken function is replaced. MSHookMessageEx takes four
arguments; the first argument is the implementation of the class, in this case the implementation of the
SecurityController class is looked up using objc_getClass(). The second is the selector that should be replaced
—in this case isJailBroken, with the final arguments being the address of the new implementation and a
pointer to the stub that should be populated with the code to call the original.
This template can be used to instrument the instance method of any Objective-C class simply by modifying the
class, method names, and method arguments. However, you need to make a subtle adjustment if you want to
call a class method. For example, if the class method were,
+ (BOOL) isJailBroken;
then the call to MSHookMessageEx() would be done as follows; note that the metaclass information is retrieved as
opposed to class object:
MSHookMessageEx(objc_getMetaClass("SecurityController"),
@selector(isJailBroken), (IMP) new_isJailBroken, (IMP*)old_isJailBroken);
Tweak Development Using Theos and Logos
A common misconception in iOS application security is that you need an install of OS X and Xcode to do
development. While it is true that using OS X eases many iOS development tasks, in most cases you can achieve
the same things using Theos.
Theos is a cross-platform suite for developing and deploying iOS software without the need for Xcode. It is
known to work on multiple operating systems, including Mac OS X, Linux, and iOS. An important feature of
Theos is the ability to develop Substrate extensions. Indeed, you can use Theos to compile and build all the
examples detailed in the previous section.
To use Theos you need a copy of the iOS toolchain compiled for your development OS and a copy of the iOS SDK
that is supported for the device that you want to run your tweak on. To obtain the iOS toolchain for Linux, refer
to the project’s Google Code site (https://code.google.com/p/ios-toolchain-based-on-clang-for-linux/), and
for the on-device toolchain consult the BigBoss Cydia repository for the “iOS Toolchain” package. You can
download and extract a copy of the SDK from the relevant Xcode package in the iOS Developer Center or from
the list of resources provided by D. Howett (http://iphone.howett.net/sdks/). You can find additional details
on how to set up your Theos environment on the iPhone Dev Wiki
(http://iphonedevwiki.net/index.php/Theos/Setup).
After you have Theos set up you are ready to start developing tweaks. To create a tweak first set up a Theos
project by running the nic.pl script as in the following output. Select option 5 and choose a name for your
project from the interactive menu:
mdsec@ubuntu:~/Desktop$ ./iostools/theos/bin/nic.pl
NIC 2.0 - New Instance Creator
------------------------------
[1.] iphone/application
[2.] iphone/library
[3.] iphone/preference_bundle
[4.] iphone/tool
[5.] iphone/tweak
Choose a Template (required): 5
Project Name (required): mahhtest
Package Name [com.yourcompany.mahhtest]: com.mdsec.mahhtest
Author/Maintainer Name [mdsec]:
[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]:
[iphone/tweak] List of applications to terminate upon installation
(space-separated, '-' for none) [SpringBoard]:
Instantiating iphone/tweak in mahhtest/...
Done.
Running the nic.pl script creates a new directory with the same name as your project, in your current working
directory; in this case the directory is named mahhtest. Several files reside within your project directory.
However, in most cases you will need to edit only the Tweak.xm file, which contains the source code for your
tweak. Although you can directly use the Substrate C API (as per the examples in the previous section) by
placing them in the Tweak.xm file, you may want to consider using Logos
(http://iphonedevwiki.net/index.php/Logos).
Logos is a set of preprocessor directives that simplifies tweak development by providing a shortened, simpler
syntax to accomplish many common tasks. Some of the Logos directives that are likely to be useful include:
%hook—Opens a hook block and allows you to hook a given class.
%ctor—Injects a new constructor into the application.
%orig—Calls the original implementation of a hooked function.
%log—Writes details of a method and its arguments to the system log.
%end—Used to close a %hook block.
To demonstrate how Logos directives can be used to simplify a substrate extension, consider the following
example, which is an equivalent implementation of the SecurityController isJailBroken example from the
previous section:
%hook SecurityController
- (BOOL)isJailBroken {
return NO;
}
%end
You can retrieve the arguments passed to a function using the %log directive. If, for example, your application
has a function that made a connection to an encrypted database, you may be able to extract the password used to
encrypt the database using a tweak similar to the following:
%hook DatabaseController
- (void)CreateDatabaseConnection:(NSString*)dbName pass: \
(NSString*)password {
%log;
%orig;
}
%end
This tweak causes the application to log the function arguments to the system log, which you can retrieve using
socat (http://theiphonewiki.com/wiki/System_Log) or via the Xcode devices window.
After you create your tweak, compile it using the standard GNU make utility by typing make in your tweak
project’s directory:
mdsec@ubuntu:~/Desktop/mahhtest$ make
Making all for tweak mahhtest...
Preprocessing Tweak.xm...
Compiling Tweak.xm...
Linking tweak mahhtest...
ld: warning: -force_cpusubtype_ALL will become unsupported for ARM
architectures
Stripping mahhtest...
Signing mahhtest...
To apply the tweak, upload the compiled dynamic library stored in the obj directory, to the
/Library/MobileSubstrate/DynamicLibraries directory on the device. Theos also creates a filter plist file that
you can use to filter the applications that the tweak is injected into, as described earlier in this chapter; you can
edit the filter file so that the tweak is only applied to the application you are interested in testing.
Instrumentation Using Cycript
A particularly useful tool that should be part of any security tester’s arsenal is Cycript
(http://www.cycript.org/). Cycript is a runtime instrumentation tool for iOS applications that blends
JavaScript and Objective-C. It allows you to programmatically instrument iOS applications by injecting into the
runtime through an interactive console. The foundations of Cycript are built upon Substrate, which is
understandable given they are developed by the same author, saurik. A useful feature of Cycript is the ability to
access and manipulate existing objects in a running application. The benefit of this is that you can allow your
application to enter the state that you require, populate relevant objects, and then inject and start to manipulate
existing objects as you want. To install Cycript on your device simply install the “cycript” package from the
http://cydiasaurik.com repository.
Cycript is useful in a number of situations. Some examples where you may find it useful in a security
assessment are:
Brute-forcing local authentication
Stealing data such as encryption keys from populated objects
Force loading of view controllers
To use Cycript to inject into a running application, from the device simply invoke Cycript with the process ID or
name of the application:
Ipod10:~ root# cycript -p BookExamples
cy#
Cycript creates a bridge to Objective-C via a JavaScript-like interpreter, allowing you to access and manipulate
Objective-C classes, methods, and objects from the Cycript console, as shown in the following simple example:
cy# var hello = [[NSString alloc] initWithString:"Hello"];
@"Hello"
cy# hello.length
5
cy# hello = [hello stringByAppendingString: " world"];
@"Hello world"
cy#
Using Cycript’s JavaScript-like syntax, you can programmatically manipulate your application, and even create
new functions. Here is an example of creating a simple function:
cy# function counter() { for(var i=0; i {
}
+(id)sharedInstance;
In these scenarios getting access to this object is relatively simple, and just calling the sharedInstance method
will get you access to the instance of the object:
cy# var UserContext = [UserContext sharedInstance]
#""
cy#
If, however, there is no class method to return an instance, you will need to find the address of the object you’re
interested in by other means. One of the simplest ways to do this is using the Objective-C classes view in Snoop-
it, which is discussed in greater detail later in this chapter. After you have the address of the instance you can
access the object using Cycript as follows:
cy# var UserContext = new Instance(0x17e86be0)
#""
cy#
All applications have a shared instance. You can access your application’s instance using the UIApp variable,
which is a shortcut for the [UIApplication sharedApplication] class method. This example shows that the
addresses for [UIApplication sharedApplication] and UIApp are identical:
cy# UIApp
#""
cy# [UIApplication sharedApplication]
#""
cy#
The UIApplication
(https://developer.apple.com/library/ios/documentation/uikit/reference/UIApplication_Class/index.html
instance is interesting from a penetration tester’s perspective because it’s a centralized point of control for the
application and manipulating it can have important consequences for an app. For example, to find out which
windows are currently loaded in the application you can use the UIApp.windows[] array, whereas the window
that was most recently made visible and therefore the most likely to be currently visible in the user interface can
be found in the UIApp.keyWindow variable.
Armed with this basic knowledge on how to use Cycript you can start to instrument applications. The following
sections detail and explain some practical examples of using Cycript.
Force Loading View Controllers Using Cycript
To demonstrate how view controllers can be force loaded, we’ll demonstrate an example using the Password
Manager Free (https://itunes.apple.com/gb/app/password-manager-free-secure/id547904729) application.
Physical access to the Password Manager application is protected using a lock screen; opening the application
loads a password entry view.
The application is first decrypted and extracted from the device. The app’s class definitions are then extracted
using class-dump-z. Examining the class-dump-z output reveals a number of views, including the following:
@interface MainView : XXUnknownSuperclass  {
With the application loaded in the foreground, you attach to it with Cycript and attempt to force-load a new view
controller by allocating and initializing a new object of type MainView:
cy# UIApp.keyWindow.rootViewController = [[MainView alloc] init];
#""
cy#
Force loading the view controller causes the currently loaded window to change without your having to enter
the lock screen password. In this case the main menu is loaded, thereby bypassing the lock screen
authentication view, as shown in Figure 3.22.
Figure 3.19 Bypassing the Password Manager lock screen
Figure 3.20 Pivoting to internal networks in Kaseya BYOD
Figure 3.21 View of the Snoop-it application
Figure 3.22 The Snoop-it Objective-C classes view
Brute-Forcing Local Authentication
Many applications implement screen locks to prevent users with physical access from entering the application.
However, instrumenting the runtime in these applications to bypass authentication is often possible.
Implementing a lock screen brute-force is illustrated next using the Safe Password Free
(https://itunes.apple.com/gb/app/safe-password-free-for-iphone/id482919221) application as an example.
The application is a typical password manager and can be used to store passwords for generic websites, bank
accounts, email accounts, and other sensitive applications. Physical access to the application is protected by a
lock screen, which requires a PIN code to be entered when the application is first launched. If you decrypt the
application, extract it from your device, and then extract its class definitions (using class-dump-z), you will
observe a number of potentially interesting methods, one of which is the checkPassword method in the
application’s delegate class:
-(BOOL)checkPassword:(id)password;
You can use Cycript to inject into the application, at which point you can invoke this method and observe its
behavior:
cy# [UIApp.delegate checkPassword:"9876"]
0
cy#
The method returns a Boolean value, which indicates whether the password is correct. The PIN to the
application is a simple four-digit numeric value, meaning that the key space for the PIN code has 10^4, or