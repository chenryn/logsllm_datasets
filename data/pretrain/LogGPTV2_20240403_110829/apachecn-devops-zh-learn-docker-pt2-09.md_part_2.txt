3.  切换到 Python 运行时交互容器 Terminal，将当前工作目录改为`/src`，运行单元测试:
```
 root@a8219ac7ed8e:~# cd /src
 root@a8219ac7ed8e:/src# python3 -m unittest
 E
 =====================================================
 =================
 ERROR: test_hitcount 
 (unittest.loader.ModuleImportFailure)
 . . . TRUNCATED OUTPUT . . . 
 File "/src/test_hitcount.py", line 4, in 
 import mockredis
 ImportError: No module named 'mockredis'
 --------------------------------------------------------------- 
 Ran 1 test in 0.001s 
 FAILED (errors=1)
```
显然，测试失败了，因为它找不到`mockredis` Python 库。
4.  继续安装`mockredispy`画中画包，因为上一步失败了，因为在运行时环境中找不到`mockredis`库:
```
      root@a8219ac7ed8e:/src# pip install mockredispy
```
5.  重新运行 Python 单元测试:
```
 root@a8219ac7ed8e:/src# python3 -m unittest
 E
 =====================================================
 ============
 ERROR: test_hitcount 
 (unittest.loader.ModuleImportFailure)
 . . . TRUNCATED OUTPUT . . . 
 File "/src/hitcount.py", line 1, in 
 import redis
 ImportError: No module named 'redis'
 Ran 1 test in 0.001s
 FAILED (errors=1)
```
再次，测试失败，因为`redis`驱动程序尚未安装。
7.  使用`pip`安装器继续安装`redis`驱动程序，如下图所示:
```
      root@a8219ac7ed8e:/src# pip install redis
```
8.  成功安装`redis`驱动程序后，让我们再次运行单元测试:
```
 root@a8219ac7ed8e:/src# python3 -m unittest
 .
 ---------------------------------------------------------------
 --
 Ran 1 test in 0.000s
 OK
```
显然，这一次单元测试通过了，没有警告或错误消息。
9.  现在我们有了一个足够好的运行环境来运行我们的测试用例。最好使用`docker commit`子命令将这些更改提交给 Docker 映像以供重用:
```
      $ sudo docker commit a8219ac7ed8e \ 
 python_rediswithmock
fcf27247ff5bb240a935ec4ba1bddbd8c90cd79cba66e52b21e1b48f984c7db2
```
10.  从现在开始，我们可以使用`python_rediswithmock`映像为我们的 TDD 推出新的容器。
在这一节中，我们生动地说明了如何使用 Docker 容器作为测试环境，同时通过隔离和限制容器内的运行时依赖性来保持 Docker 主机的健全性和神圣性。
## 将 Docker 测试集成到 Jenkins 中
在前面的部分中，我们为软件测试、如何利用 Docker 技术进行软件测试以及容器技术在测试阶段的独特优势奠定了激励性的基础。在本节中，我们将向您介绍为使用 Docker 进行测试而准备 Jenkins 环境所需的步骤，然后演示如何使用众所周知的命中数用例，扩展 Jenkins 以使用 Docker 进行集成和自动化测试。
### 准备 Jenkins 环境
在本节中，我们将带您完成 Jenkins 的安装步骤，Jenkins 和`git`的 GitHub 插件，以及修订控制工具。步骤如下:
1.  我们从添加 Jenkins 信任的 PGP 公钥开始:
```
 $ wget -q -O - \
 https://jenkins-ci.org/debian/jenkins-ci.org.key | \
 sudo apt-key add -
```
这里，我们使用`wget`下载 PGP 公钥，然后使用`apt-key`工具将其添加到可信密钥列表中。由于 Ubuntu 和 Debian 共享同一个软件包，Jenkins 为 Ubuntu 和 Debian 提供了一个通用的包。
2.  将 Debian 包位置添加到`apt`包源列表中，如下所示:
```
 $ sudo sh -c \
 'echo deb http://pkg.jenkins-ci.org/debian binary/ > \
 /etc/apt/sources.list.d/jenkins.list'
```
3.  添加包源后，继续运行`apt-get`命令`update`选项以重新同步来自源的包索引:
```
      $ sudo apt-get update
```
4.  现在，使用`apt-get`命令`install`选项安装 Jenkins，如下所示:
```
      $ sudo apt-get install jenkins
```
5.  最后，使用`service`命令激活 Jenkins 服务:
```
      $ sudo service jenkins start
```
通过指定安装了 Jenkins 的系统的 IP 地址(`54.86.87.243`)，可以通过任何网络浏览器访问 Jenkins 服务。Jenkins 的默认端口号是`8080`。已经安装了最新的 Jenkins 2.62。以下截图是 Jenkins 的登录页面或仪表板:
![](img/image_09_002.jpg)
6.  从文件中提供密码并登录。该用户是管理员:
```
 $ sudo cat \
 /var/lib/jenkins/secrets/initialAdminPassword
 b7ed7cfbde1443819455ab1502a19de2
```
7.  这将带您进入定制 Jenkins 页面，如下图所示:
![](img/image_09_003.jpg)
8.  选择屏幕左侧的安装建议插件，这将带我们进入安装页面。
9.  在“创建第一个管理员用户”页面上，选择继续作为管理员:
**![](img/image_09_004.jpg)**
这就把我们带到 Jenkins 准备好了！页面，如下图截图所示:
![](img/image_09_005.jpg)
10.  现在，点击开始使用 Jenkins 按钮将带你到欢迎来到 Jenkins！页面:
![](img/image_09_006.jpg)
11.  确保安装了`git`包，否则使用`apt-get`命令安装`git`包:
```
      $ sudo apt-get install git
```
12.  到目前为止，我们一直在使用`sudo`命令运行 Docker 客户端，但不幸的是，我们无法在 Jenkins 内部调用`sudo`，因为有时它会提示输入密码。为了克服`sudo`密码提示问题，我们可以使用 Docker 组，其中属于 Docker 组的任何用户都可以调用 Docker 客户端，而无需使用`sudo`命令。Jenkins 安装程序总是设置一个名为`jenkins`的用户和组，并使用该用户和组运行 Jenkins 服务器。因此，我们只需要将`jenkins`用户添加到 Docker 组，就可以让 Docker 客户端在没有 sudo 命令的情况下工作:
```
 $ sudo gpasswd -a jenkins docker
 Adding user jenkins to group docker  
```
13.  使用以下命令重新启动 Jenkins 服务，使组更改生效:
```
 $ sudo service jenkins restart
 * Restarting Jenkins Continuous Integration Server
 jenkins [ OK ]  
```
我们已经建立了一个 Jenkins 环境，该环境现在能够自动从[http://github.com](http://github.com)存储库中提取最新的源代码，将其打包为 Docker 映像，并执行规定的测试场景。
我们也鼓励您从 https://github.com/jenkinsci/docker 的官方 JenkinsDocker 映像中运行 JenkinsDocker 容器。这也是一个很好的练习，可以验证前面章节中的 Docker 容器概念。
### 自动化 Docker 测试流程
在本节中，我们将探索如何使用 Jenkins 和 Docker 实现测试自动化。如前所述，我们将使用 GitHub 作为我们的存储库。我们已经将上一个示例的`Dockerfile`、`test_hitcount.py`和`hitcount.py`文件上传到位于[https://github.com/thedocker/testing](https://github.com/thedocker/testing)的 GitHub，我们将在接下来的示例中使用这些文件。但是，我们强烈建议您在
[【http://github.com】](http://github.com)设置您自己的存储库，使用您可以在[https://github.com/thedocker/testing](https://github.com/thedocker/testing)找到的分叉选项，并在随后的示例中尽可能替换此地址。
以下是自动化 Docker 测试的详细步骤:
将 Jenkins 配置为在 GitHub 存储库中修改文件时触发构建，如以下子步骤所示:
1.  再次连接到 Jenkins 服务器。
2.  选择创建新作业。
3.  如下图所示，给项目命名(例如`Docker-Testing`)，选择自由式项目:
![](img/JenkinsUpdate_1.png)
4.  如下面的截图所示，选择源代码管理下的 Git 单选按钮，并在存储库 URL 文本字段中指定 GitHub 存储库 URL:
![](img/image_09_008.jpg)
5.  选择构建触发器下的轮询配置管理，为每 15 分钟的间隔安排一次 GitHub 轮询。在日程文本框中输入下面一行代码`H/15 * * * *`，如下图所示。出于测试目的，您可以缩短轮询间隔:
![](img/JenkinsUpdate_2.png)
6.  将屏幕向下滚动一点，然后单击“构建”下的“添加构建步骤”按钮。在下拉列表中，选择执行外壳并键入文本，如下图所示:
![](img/JenkinsUpdate_3.png)
7.  最后，单击保存按钮保存配置。
8.  回到 Jenkins 仪表板，您可以在仪表板上找到您的测试:
![](img/image_09_011.jpg)
9.  您可以等待 Jenkins 时间表来启动构建，也可以单击屏幕右侧的时钟图标来立即启动构建。一旦构建完成，仪表板就会更新，显示构建成功或失败的状态以及构建编号:
![](img/image_09_012.jpg)
10.  如果您将鼠标悬停在更靠近内部版本号的位置，您将获得一个带有选项的下拉按钮，如“更改”和“控制台输出”，如下图所示:
![](img/image_09_013.jpg)
11.  控制台输出选项将显示为构建突出显示的详细信息，如下所示:
```
 Started by user Vinod Singh
 Building in workspace 
 /var/lib/jenkins/workspace/Docker-testing
 Cloning the remote Git repository
 Cloning repository 
 https://github.com/thedocker/testing
 > git init \ 
 /var/lib/jenkins/workspace/Docker-testing \
 # timeout=10
 Fetching upstream changes from 
 https://github.com/thedocker/testing
 > git --version # timeout=10
 Removing intermediate container 76a53284f1e3
 Successfully built d9e22d1d52c6
 + docker run --rm docker_testing_using_jenkins
 .
 --------------------------------------------
 --------------------------
 Ran 1 test in 0.000s
 OK
 Finished: SUCCESS
```
12.  现在，让我们测试失败的案例，因为我们故意引入了错误的模块名称`error_hitcount`。现在，让我们通过在`test_hitcount.py`中故意引入一个 bug 来实验一个负面场景，并观察对 Jenkins 构建的影响。我们已经配置了 Jenkins，它忠实地轮询 GitHub 并启动构建。
显然，构建如我们所料失败了:
![](img/image_09_014.jpg)
13.  最后一步，打开失败构建的控制台输出:
```
 Started by an SCM change
 Building in workspace 
 /var/lib/jenkins/jobs/Docker-Testing/workspace
 . . . OUTPUT TRUNCATED . . . 
 ImportError: No module named 'error_hitcount'
 ---------------------------------------------
 -------------------------
 Ran 1 test in 0.001s
 FAILED (errors=1)
 Build step 'Execute shell' marked build as failure
 Finished: FAILURE  
```
显然，测试失败是因为我们故意引入了错误的模块名称`error_hitcount`。
很酷，不是吗？我们使用 Jenkins 和 Docker 自动化了我们的测试。此外，我们能够使用 Jenkins 和 Docker 体验测试自动化的力量。在一个大规模的项目中，Jenkins 和 Docker 可以结合在一起，自动完成完整的单元测试需求，从而自动捕获任何开发人员引入的任何缺陷和不足。
## 摘要
容器化的潜在好处正在软件工程的广度和长度上被发现。以前，测试复杂的软件系统涉及许多昂贵且难以管理的服务器模块和集群。考虑到所涉及的成本和复杂性，大多数软件测试都是使用模拟程序和存根完成的。随着 Docker 技术的成熟，所有这些都将永远结束。Docker 的开放性和灵活性使其能够与其他技术无缝协作，从而大大减少测试时间和复杂性。
长期以来，测试软件系统的主要方式包括模仿、依赖、注入等。通常，这些要求在代码中创建许多复杂的抽象。当前针对应用开发和运行测试用例的实践实际上是在存根上完成的，而不是在整个应用上。这意味着，使用容器化的工作流，非常有可能测试具有所有依赖关系的真实应用容器。Docker 范式的贡献，特别是对于测试现象和阶段的贡献，因此在最近的过去被仔细阐述和记录。准确地说，随着 Docker 领域的所有创新，软件工程领域正在走向更智能、更阳光的时代。
在本章中，我们清楚地阐述和解释了一个强大的测试框架，用于使用 Docker 启发的容器化范例的集成应用。越来越多的，对于敏捷世界来说，被证明和潜在的 TDD 方法被坚持作为一种有效的软件构建和支撑方法。本章利用 Python 单元测试框架来说明 TDD 方法是如何成为软件工程的先驱工具的。单元测试框架被调整为高效且优雅的容器化，Docker 容器与 Jenkins 无缝集成，Jenkins 是一个用于持续交付的现代部署工具，并且是敏捷编程世界的重要组成部分，如本章所述。Docker 容器源代码在进入 GitHub 代码存储库之前进行了预检查。Jenkins 工具从 GitHub 下载代码，并在容器中运行测试。在下一章中，我们将通过容器技术和各种调试工具和技术深入探讨和描述进程隔离的理论方面。