[toc]
## 什么是 Nosql
> NoSQL 即 Not Only SQL，意即 “不仅仅是SQL”。NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至 2009
> 年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。
## 什么是 MongoDB
> MongoDB 是当前最流行的 NoSQL 数据库产品之一，由 C++ 语言编写，是一个基于分布式文件存储的数据库。旨在为 WEB
> 应用提供可扩展的高性能数据存储解决方案。
MongoDB 将数据存储为一个文档，数据结构由键值（key=>value）对组成。MongoDB 文档类似于 JSON
对象。字段值可以包含其他文档，数组及文档数组。
    {
        "_id" : ObjectId("60fa854cf8aaaf4f21049148"),
        "name" : "whoami",
        "description" : "the admin user",
        "age" : 19,
        "status" : "A",
        "groups" : [
            "admins",
            "users"
        ]
    }
### MongoDB 基础概念解析
不管我们学习什么数据库都应该学习其中的基础概念，在 MongoDB 中基本的概念有文档、集合、数据库，如下表所示：
SQL 概念 | MongoDB 概念 | 说明  
---|---|---  
database | database | 数据库  
table | collection | 数据库表/集合  
row | document | 数据记录行/文档  
column | field | 数据字段/域  
index | index | 索引  
table joins |  | 表连接，MongoDB 不支持  
primary key | primary key | 主键，MongoDB 自动将 `_id` 字段设置为主键  
下表列出了关系型数据库 RDBMS 与 MongoDB 之间对应的术语：
RDBMS | MongoDB  
---|---  
数据库 | 数据库  
表格 | 集合  
行 | 文档  
列 | 字段  
表联合 | 嵌入文档  
主键 | 主键（MongoDB 提供了 key 为 _id）  
#### 数据库（Database）
个 MongoDB 中可以建立多个数据库。MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。
使用 `show dbs` 命令可以显示所有数据库的列表：
    $ ./mongo
    MongoDB shell version: 3.0.6
    connecting to: test
    > show dbs
    admin   0.078GB
    config  0.078GB
    local   0.078GB
    >
执行 `db` 命令可以显示当前数据库对象或集合：
    $ ./mongo
    MongoDB shell version: 3.0.6
    connecting to: test
    > db
    test
    >
#### 文档（Document）
文档是一组键值（key-value）对，类似于 RDBMS 关系型数据库中的一行。MongoDB
的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。
一个简单的文档例子如下：
    {"name":"whoami", "age":19}
#### 集合（Collection）
集合就是 MongoDB 文档组，类似于 RDBMS
关系数据库管理系统中的表格。集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据。
比如，我们可以将以下不同数据结构的文档插入到集合中：
    {"name":"whoami"}
    {"name":"bunny", "age":19}
    {"name":"bob", "age":20, "groups":["admins","users"]}
当插入一个文档时，集合就会被自动创建。
如果我们要查看已有集合，可以使用 `show collections` 或 `show tables` 命令：
    > show collections
    all_users
    > show tables
    all_users
    >
### MongoDB 基础语法解析
#### MongoDB 创建数据库
MongoDB 创建数据库的语法格式如下：
    use DATABASE_NAME
如果数据库不存在，则创建数据库，否则切连接并换到指定数据库，是不是很方便！
以下实例我们创建了数据库 love:
    > use users
    switched to db users
    > db
    users
    >
#### MongoDB 创建集合
MongoDB 中我们使用 `createCollection()` 方法来创建集合。其语法格式如下：
    db.createCollection(name, options)
参数说明：
  * name：要创建的集合名称
  * options：可选参数，指定有关内存大小及索引的选项
如下实例，我们在 users 数据库中创建一个 all_users 集合：
    > use users
    switched to db users
    > db.createCollection("all_users")
    { "ok" : 1 }
    >
#### MongoDB 插入文档
在 MongoDB 中我们可以使用 `insert()` 方法向集合中插入文档，语法如下：
    db.COLLECTION_NAME.insert(document)
如下实例，我们向存储在 users 数据库的 all_users 集合中插入一个文档：
    > db.all_users.insert({name: 'whoami', 
        description: 'the admin user',
        age: 19,
        status: 'A',
        groups: ['admins', 'users']
    })
我们也可以将文档数据定义为一个变量，然后再执行插入操作将变量插入。
#### MongoDB 更新文档
在 MongoDB 中我们可以使用 `update()` 或 `save()` 方法来更新集合中的文档。
  * **update() 方法**
update() 方法用于更新已存在的文档。语法格式如下：
    db.collection.update(
       ,
       ,
       {
         upsert: ,
         multi: ,
         writeConcern: 
       }
    )
参数说明：
  * query：update 操作的查询条件，类似 sql update 语句中 where 子句后面的内容。
  * update：update 操作的对象和一些更新的操作符（如 `$set`）等，可以理解为 sql update 语句中 set 关键字后面的内容。
  * multi：可选，默认是 false，只更新找到的第一条记录，如果这个参数为 true，就把按条件查出来多条记录全部更新。
接着我们通过 update() 方法来将年龄 age 从 19 更新到 20：
    > db.lover.update({'age':19}, {$set:{'age':20}})
    WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
    >
    > db.all_users.find().pretty()
    {
        "_id" : ObjectId("60fa854cf8aaaf4f21049148"),
        "name" : "whoami",
        "description" : "the admin user",
        "age" : 20,
        "status" : "A",
        "groups" : [
            "admins",
            "users"
        ]
    }
    >
成功将 age 从 19 改为了 20。
以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。
    > db.lover.update({'age':'19'}, {$set:{'age':20}}, {multi:true})
  * **save() 方法**
save() 方法通过传入的文档来替换已有文档，`_id` 主键存在就更新，不存在就插入。语法格式如下：
    db.collection.save(
       ,
       {
         writeConcern: 
       }
    )
参数说明：
  * document：文档数据。
如下实例中我们替换了 `_id` 为 60fa854cf8aaaf4f21049148 的文档数据：
    > db.all_users.save({
        "_id" : ObjectId("60fa854cf8aaaf4f21049148"),
        "name" : "whoami",
        "description" : "the admin user",
        "age" : 21,
        "status" : "A",
        "groups" : [
            "admins",
            "users"
        ]
    })
#### MongoDB 查询文档
在 MongoDB 中我们可以使用 `find()` 方法来查询文档。`find()` 方法以非结构化的方式来显示所有文档。其语法格式如下：
    db.collection.find(query, projection)
参数说明：
  * query：可选，使用查询操作符指定查询条件，相当于 sql select 语句中的 where 子句。
  * projection：可选，使用投影操作符指定返回的键。
如下实例我们查询了集合 all_users 中的 age 为 20 的数据：
    > db.all_users.find({"age":"20"})
    { "_id" : ObjectId("60fa854cf8aaaf4f21049148"), "name" : "whoami", "description" : "the admin user", "age" : "20", "status" : "A", "groups" : [ "admins", "users" ] }
    >
如果你需要以易读的方式来读取数据，可以使用 `pretty()` 方法以格式化的方式来显示所有文档：
    > db.all_users.find({"age":20}).pretty()
    {
        "_id" : ObjectId("60fa854cf8aaaf4f21049148"),
        "name" : "whoami",
        "description" : "the admin user",
        "age" : 20,
        "status" : "A",
        "groups" : [
            "admins",
            "users"
        ]
    }
    >
#### MongoDB 与 RDBMS Where 语句的比较
如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：
操作 | 格式 | 范例 | RDBMS 中的类似语句  
---|---|---|---  
等于 | `{:}` | `db.love.find({"name":"whoami"}).pretty()` | `where
name = 'whoami'`  
小于 | `{:{$lt:}}` | `db.love.find({"age":{$lt:19}}).pretty()` |
`where age :{$lte:}}` | `db.love.find({"age":{$lte:19}}).pretty()`
| `where likes :{$gt:}}` | `db.love.find({"age":{$gt:19}}).pretty()` |
`where likes > 19`  
大于或等于 | `{:{$gte:}}` | `db.love.find({"age":{$gte:19}}).pretty()`
| `where likes >= 19`  
不等于 | `{:{$ne:}}` | `db.love.find({"age":{$ne:19}}).pretty()` |
`where likes != 19`  
#### MongoDB AND 条件
MongoDB 中的 `find()` 方法可以传入多个键值对，每个键值对以逗号隔开，即常规 SQL 的 AND 条件。语法格式如下：
    > db.all_users.find({"status":"B", "age":20})
    { "_id" : ObjectId("60fa8ef8f8aaaf4f2104914e"), "name" : "bob", "description" : "the normal user", "age" : 20, "status" : "B", "groups" : [ "normals", "users" ] }
    >
以上实例中类似于 RDBMS 中的 WHERE 语句：`WHERE status='B' AND age=20`
#### MongoDB OR 条件
MongoDB OR 条件语句使用了关键字 `$or` 来表示，语法格式如下：
    > db.col.find(
       {
          $or: [
             {key1: value1}, {key2:value2}
          ]
       }
    ).pretty()
如下实例，我们查询键 `status` 值为 A 或键 `age` 值为 19 的文档。
    > db.all_users.find({$or:[{"status":"A", "age":"19"}]})
    { "_id" : ObjectId("60fa8ec6f8aaaf4f2104914c"), "name" : "bunny", "description" : "the normal user", "age" : 19, "status" : "A", "groups" : [ "lovers", "users" ] }
    >
#### AND 和 OR 联合使用
以下实例演示了 AND 和 OR 联合使用，类似于 RDBMS 中的 WHERE 语句： `where age>19 AND (name='whoami'
OR status='A')`
    > db.all_users.find({"age":{$gt:19}, $or: [{"name":"whoami"}, {"status":"A"}]})
    { "_id" : ObjectId("60fa9176f8aaaf4f21049150"), "name" : "whoami", "description" : "the admin user", "age" : 20, "status" : "A", "groups" : [ "admins", "users" ] }
    >
## Nosql 注入的简介
NoSQL 注入由于 NoSQL 本身的特性和传统的 SQL
注入有所区别。使用传统的SQL注入，攻击者利用不安全的用户输入来修改或替换应用程序发送到数据库引擎的 SQL 查询语句（或其他SQL语句）。  
换句话说，SQL 注入使攻击者可以在数据库中 SQL 执行命令。
与关系数据库不同，NoSQL 数据库不使用通用查询语言。NoSQL
查询语法是特定于产品的，查询是使用应用程序的编程语言编写的：PHP，JavaScript，Python，Java
等。这意味着成功的注入使攻击者不仅可以在数据库中执行命令，而且可以在应用程序本身中执行命令，这可能更加危险。
以下是 OWASP 对于 Nosql 注入的介绍：
> NoSQL databases provide looser consistency restrictions than traditional SQL
> databases. By requiring fewer relational constraints and consistency checks,
> NoSQL databases often offer performance and scaling benefits. Yet these
> databases are still potentially vulnerable to injection attacks, even if