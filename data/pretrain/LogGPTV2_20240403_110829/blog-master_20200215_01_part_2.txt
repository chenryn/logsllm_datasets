既然数据库优化器没有直接并行, 我们可以人为干预, 建立分区表, 使用dblink的异步调用功能进行并行计算.  
```  
create table bi.new_t_order (like bi.t_order) partition by hash (buyer_id);   
create table bi.new_t_order0 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 0);  
create table bi.new_t_order1 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 1);  
create table bi.new_t_order2 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 2);  
create table bi.new_t_order3 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 3);  
create table bi.new_t_order4 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 4);  
create table bi.new_t_order5 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 5);  
create table bi.new_t_order6 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 6);  
create table bi.new_t_order7 PARTITION OF bi.new_t_order FOR VALUES with (MODULUS 8, REMAINDER 7);  
insert into bi.new_t_order select * from bi.t_order;  
```  
我们看看查询单个分区的数据需要多久?  
```  
select   
count(distinct buyer_id) num,   
CASE  WHEN days >= 0 and days = 30 and days = 60 and days = 120  THEN '[120,)'  END   as diff_days ,   
CASE  WHEN payment >= 0 and payment = 50 and payment = 100 and payment = 200  THEN '[200,)'  END   as buyer_payment   
from (  
select buyer_id,   
min(date_pay_time) over w as mmin,   
max(date_pay_time) over w as mmax,   
sum(payment) over w as payment,   
date(now()) - date(date_pay_time) as days   
from   
bi.new_t_order0 o  -- 单个分区   
where o.status in (1,4,5,6,7,9)  AND o.sellerId= xxxxxxxxxxxx and o.date_pay_time is not null  
window w as (partition by buyer_id)   
) t  
where mmin = mmax   
group by diff_days, buyer_payment   
order by diff_days, buyer_payment;  
```  
```  
   num   | diff_days | buyer_payment   
---------+-----------+---------------  
    6450 | [0,30)    | [0,50)  
    1607 | [0,30)    | [100,200)  
     467 | [0,30)    | [200,)  
    6184 | [0,30)    | [50,100)  
 1412158 | [120,)    | [0,50)  
  318327 | [120,)    | [100,200)  
   88727 | [120,)    | [200,)  
  869318 | [120,)    | [50,100)  
       2 | [120,)    |   
   16045 | [30,60)   | [0,50)  
    5793 | [30,60)   | [100,200)  
    1879 | [30,60)   | [200,)  
   16619 | [30,60)   | [50,100)  
   46530 | [60,120)  | [0,50)  
   16875 | [60,120)  | [100,200)  
    4962 | [60,120)  | [200,)  
   44688 | [60,120)  | [50,100)  
       2 | [60,120)  |   
(18 rows)  
Time: 11442.948 ms (00:11.443)  
```  
89秒降低到11秒.(不过这是单分区, 我们并行后最后再看看性能)  
使用dblink异步调用, 8个分区并行计算, 从而提升性能.  使用dblink异步并行的例子很多:   
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)    
[《PostgreSQL dblink异步调用实践,跑并行多任务 - 例如开N个并行后台任务创建索引, 开N个后台任务跑若干SQL》](../201809/20180903_01.md)    
[《在PostgreSQL中跑后台长任务的方法 - 使用dblink异步接口》](../201806/20180621_03.md)    
[《PostgreSQL 批量导入性能 (采用dblink 异步调用)》](../201804/20180427_03.md)    
[《阿里云RDS PostgreSQL OSS 外部表实践 - (dblink异步调用封装并行) 从OSS并行导入数据》](../201804/20180427_01.md)    
[《PostgreSQL 变态并行拉取单表的方法 - 按块并行(按行号(ctid)并行) + dblink 异步调用》](../201804/20180410_03.md)    
[《PostgreSQL VOPS 向量计算 + DBLINK异步并行 - 单实例 10亿 聚合计算跑进2秒》](../201802/20180210_01.md)    
[《PostgreSQL 相似搜索分布式架构设计与实践 - dblink异步调用与多机并行(远程 游标+记录 UDF实例)》](../201802/20180205_03.md)    
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例 - 含dblink VS pg 11 parallel hash join VS pg 11 智能分区JOIN》](../201802/20180201_02.md)    
[《惊天性能！单RDS PostgreSQL实例 支撑 2000亿 - 实时标签透视案例 (含dblink异步并行调用)》](../201712/20171223_01.md)    
[《阿里云RDS PostgreSQL OSS 外部表实践 - (dblink异步调用封装并行) 数据并行导出到OSS》](../201709/20170906_01.md)    
本例方法如下:  
创建dblink插件  
```  
create extension dblink;  
```  
创建建立dblink链接到函数  
```  
create or replace function conn(          
  name,   -- dblink名字          
  text    -- 连接串,URL          
) returns void as $$            
declare            
begin            
  perform dblink_connect($1, $2);           
  return ;            
exception when others then            
  return ;            
end;            
$$ language plpgsql strict;      
```  
创建并行执行分区sql的函数  
```  
create or replace function get_res() returns setof record as $$      
declare      
begin      
  for i in 0..7 loop             
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=3002 user=digoal password=用户密码 dbname=digoal');  -- 建立链接           
    perform 1 from dblink_get_result('link'||i) as t(num int8, diff_days text, buyer_payment text);            
    perform dblink_send_query('link'||i, format($_$  
select   
count(distinct buyer_id) num,   
CASE  WHEN days >= 0 and days = 30 and days = 60 and days = 120  THEN '[120,)'  END   as diff_days ,   
CASE  WHEN payment >= 0 and payment = 50 and payment = 100 and payment = 200  THEN '[200,)'  END   as buyer_payment   
from (  
select buyer_id,   
min(date_pay_time) over w as mmin,   
max(date_pay_time) over w as mmax,   
sum(payment) over w as payment,   
date(now()) - date(date_pay_time) as days   
from   
bi.new_t_order%s o  -- 分区表使用这个代替   
where o.status in (1,4,5,6,7,9)  AND o.sellerId= xxxxxxxxxxxx and o.date_pay_time is not null  
window w as (partition by buyer_id)   
) t  
where mmin = mmax   
group by diff_days, buyer_payment   
    $_$, i));            
  end loop;         
  for i in 0..7 loop      
    return query select * from dblink_get_result('link'||i) as t(num int8, diff_days text, buyer_payment text);           
  end loop;      
end;      
$$ language plpgsql strict;     
```  
并行执行如下:  
```  
select sum(num) num, diff_days, buyer_payment   
from get_res() as t(num int8, diff_days text, buyer_payment text)   
group by diff_days,buyer_payment  
order by diff_days,buyer_payment;    
```  
sql计算仅19秒, 从118秒降低到了19秒.  
```  
   num    | diff_days | buyer_payment   
----------+-----------+---------------  
    51692 | [0,30)    | [0,50)  
    13022 | [0,30)    | [100,200)  
     3560 | [0,30)    | [200,)  
    50216 | [0,30)    | [50,100)  
 11315785 | [120,)    | [0,50)  
  2541471 | [120,)    | [100,200)  
   711984 | [120,)    | [200,)  
  6957021 | [120,)    | [50,100)  
       17 | [120,)    |   
   128596 | [30,60)   | [0,50)  
    46335 | [30,60)   | [100,200)  
    15399 | [30,60)   | [200,)  
   133719 | [30,60)   | [50,100)  
   372008 | [60,120)  | [0,50)  
   134772 | [60,120)  | [100,200)  
    39495 | [60,120)  | [200,)  
   356866 | [60,120)  | [50,100)  
       15 | [60,120)  |   
(18 rows)  
Time: 18524.339 ms (00:18.524)  
```  
如果你想灵活一点, 可以把sql作为参数输入, 这样更灵活, 改写sql如下:  
```  
create or replace function get_res(text) returns setof record as $$      
declare      
begin      
  for i in 0..7 loop             
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=3002 user=digoal password=用户密码 dbname=digoal');             
    perform 1 from dblink_get_result('link'||i) as t(num int8, diff_days text, buyer_payment text);            
    perform dblink_send_query('link'||i, format($1, i));      -- sql作为参数传入       
  end loop;         
  for i in 0..7 loop      
    return query select * from dblink_get_result('link'||i) as t(num int8, diff_days text, buyer_payment text);           
  end loop;      
end;      
$$ language plpgsql strict;     
```  
执行如下:  
```  
select sum(num) num, diff_days, buyer_payment   
from   
get_res($_$  
select   
count(distinct buyer_id) num,   