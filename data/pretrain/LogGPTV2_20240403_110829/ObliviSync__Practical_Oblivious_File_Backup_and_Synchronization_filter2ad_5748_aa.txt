title:ObliviSync: Practical Oblivious File Backup and Synchronization
author:Adam J. Aviv and
Seung Geol Choi and
Travis Mayberry and
Daniel S. Roche
ObliviSync: Practical Oblivious
File Backup and Synchronization
Adam J. Aviv, Seung Geol Choi, Travis Mayberry, Daniel S. Roche
United States Naval Academy
{aviv,choi,mayberry,roche}@usna.edu
Abstract—Oblivious RAM (ORAM) protocols are powerful
techniques that hide a client’s data as well as access patterns from
untrusted service providers. We present an oblivious cloud stor-
age system, ObliviSync, that speciﬁcally targets one of the most
widely-used personal cloud storage paradigms: synchronization
and backup services, popular examples of which are Dropbox,
iCloud Drive, and Google Drive. This setting provides a unique
opportunity because the above privacy properties can be achieved
with a simpler form of ORAM called write-only ORAM, which
allows for dramatically increased efﬁciency compared to related
work. Our solution is asymptotically optimal and practically
efﬁcient, with a small constant overhead of approximately 4x
compared with non-private ﬁle storage, depending only on the
total data size and parameters chosen according to the usage
rate, and not on the number or size of individual ﬁles. Our
construction also offers protection against timing-channel attacks,
which has not been previously considered in ORAM protocols.
We built and evaluated a full
implementation of ObliviSync
that supports multiple simultaneous read-only clients and a
single concurrent read/write client whose edits automatically
and seamlessly propagate to the readers. We show that our
system functions under high work loads, with realistic ﬁle size
distributions, and with small additional latency (as compared to
a baseline encrypted ﬁle system) when paired with Dropbox as
the synchronization service.
I.
INTRODUCTION
ORAM: security and efﬁciency. ORAM is a protocol which
allows a client to access ﬁles (commonly abstracted as N
ﬁxed-length blocks of data) stored on an untrusted server in
such a way that the server learns neither the contents of ﬁles
nor the access patterns of which ﬁles were accessed at which
time(s). This is traditionally accomplished by doing some type
of shufﬂing on the data in addition to reading/writing the
chosen block. This shufﬂing ensures that the server cannot
correlate logical blocks based on their storage locations.
ORAM is a powerful tool that solves a critical problem in
cloud security. Consider a hospital which uses cloud storage to
backup their patient records. Even if the records are properly
encrypted, an untrusted server that observes which patient ﬁles
are modiﬁed will learn sensitive medical information about
those patients. They will certainly learn that the patient has
visited the hospital recently, but also may learn things like
This paper is authored by an employee(s) of the United States Government and 
is  in  the  public  domain.  Non-exclusive  copying  or  redistribution  is  allowed, 
provided that the article citation is given and the authors and agency are clearly 
identiﬁed  as  its  source.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23188
whether the patient had imaging tests done based on how
large the ﬁle is that is updated. Moreover, they might learn for
instance that a patient has cancer after seeing an oncologist
update their records. This type of inference, and more, can be
done despite the fact that the records themselves are encrypted
because the access pattern to the storage is not hidden.
in order
Unfortunately,
to achieve this obliviousness
ORAMs often require a substantial amount of shufﬂing during
every access, so much so that even relatively recent ORAM
constructions could induce a several-thousand-fold overhead
on communication [22], [18]. Even Path ORAM [23], one of
the most efﬁcient ORAM constructions to date, has a practical
overhead of 60-80x on moderately sized databases compared
to non-private storage.
The setting: personal cloud storage. Our setting consists
of an untrusted cloud provider and one or more clients which
backup data to the cloud provider. If there are multiple clients,
the cloud provider propagates changes made by one client
to all other clients, so that they each have the same version
of the ﬁlesystem. We emphasize that although we may use
“Dropbox” as a shorthand for the scenario we are addressing,
our solution is not speciﬁc to Dropbox and will work with
any similar system. This setting is particularly interesting for
a number of reasons:
1) It is one of the most popular consumer cloud services
used today, and is often colloquially synonymous with
the term “cloud.” Dropbox alone has over 500 million
users [12].
2) The interface for Dropbox and similar storage providers
is “agnostic,” in that it will allow you to store any data as
long as you put it in the designated synchronization direc-
tory. This allows for one solution that works seamlessly
with all providers.
3) Synchronization and backup services do not require that
the ORAM hide a user’s read accesses, only the writes.
This is because (by default) every client stores a complete
local copy of their data, which is synchronized and
backed up via communication of changes to/from the
cloud provider.
Our goal.
In this paper, we present an efﬁcient solution for
oblivious storage on a personal cloud synchronization/backup
provider such as (but not limited to) Dropbox or Google Drive.
Write-only ORAM. The third aspect of our setting above
(i.e., we don’t need to hide read accesses) is crucial to the
efﬁciency of our system. Each client already has a copy of the
database, so when they read from it they do not need to interact
with the cloud provider at all. If a client writes to the database,
the changes are automatically propagated to the other clients
with no requests necessary on their part. Therefore, the ORAM
protocol only needs to hide the write accesses done by the
clients and not the reads. This is important because [8] have
shown that write-only ORAM can be achieved with optimal
asymptotic communication overhead of O(1). In practice,
write-only ORAM requires only a small constant overhead of
3-6x compared to much higher overheads for fully-functional
ORAM schemes, which asymptotically are Ω(log N ).
Note that Dropbox (and other cloud providers) do have
client software that allows retrieval of only individual ﬁles
or directories, for instance the Google Drive web interface.
However, to achieve privacy in those settings with partial syn-
chronization would require the full functionality of Oblivious
RAM that hides both reads and writes. We instead speciﬁcally
target the full-synchronization setting for two reasons:
1) It
is the default behavior for the desktop clients of
Dropbox, Google Drive, OneDrive, and others, making
it a widely used, practical scenario.
2) Read-write ORAMs are subject to a well-known lower
bound of Ω(N log N )[15]. We aim to show that in a
synchronization setting substantially better performance
can be achieved that rivals the performance of insecure
storage.
Providing cloud-layer transparency. One of the most note-
worthy aspects of Dropbox-like services is their ease of use.
Any user can download and install the requisite software, at
which point they have a folder on their system that “magically”
synchronizes between all their machines, with no additional
setup or interaction from the user. In order to preserve this
feature as much as possible, our system implements a FUSE
ﬁlesystem that mounts on top of the shared directory, providing
a new virtual frontend directory where the user can put their
ﬁles to have them privately stored on the cloud. The FUSE
module uses the original shared directory as a backend by
storing blocks as individual ﬁles. We stress that substantial
work is needed to add support for ﬁlesystem features such as
ﬁlenames and sizes, since the storage of ORAMs is tradition-
ally modeled as only a ﬂat array of N ﬁxed-length blocks
indexed by the numbers [0, N ).
Supporting variable-size ﬁles. When addressing the personal
cloud setting, a crucial aspect that must be dealt with is the
variable sizes of the ﬁles stored in such a system. Traditionally,
ORAMs are modeled as storage devices on N ﬁxed-length
blocks of data, with the security guarantee being that any two
access patterns of the same length are indistinguishable from
each other. In reality, ﬁles stored on Dropbox are of varying
(sometimes unique) lengths. This means that a boilerplate
ORAM protocol will actually not provide obliviousness in such
a setting because the ﬁle size, in multiples of the block size,
will be leaked to the server for every access. When ﬁle sizes
are relatively unique, knowing the size will enable the server
to deduce which individual ﬁle is being accessed, or at least
substantially reduce the number of possibilities. Therefore our
solution additionally includes a mechanism for dynamically
batching together variable-length ﬁles to hide their size from
the server. Furthermore, our solution is efﬁcient as we prove
its cost scales linearly with the total size (and not number)
of ﬁles being written, regardless of the ﬁle size distribution.
The batching aspect of our construction also allows us to
protect against timing-channel attacks (where the precise time
of an access leaks information about it), which are not usually
considered in ORAM protocols.
Summary of our contribution. To summarize, our contribu-
tions in this paper include:
1) A complete ORAM system designed for maximum ef-
ﬁciency and usability when deployed on a synchroniza-
tion/backup service like Dropbox.
2) A FUSE implementation of these contributions, incorpo-
rating variable size ﬁles as well as important ﬁlesystem
functionality into ORAM including the ability to store ﬁle
names, resize ﬁles and more.
3) A proof of strong security from an untrusted cloud
provider, even considering the timing side-channel.
4) Theoretical evaluation showing that the throughput of our
scheme requires only 4x bandwidth overhead compared to
that of unencrypted and non-private storage, regardless of
the underlying ﬁle size distribution1 . We also show that
our scheme has very high storage utilization, requiring
only 1.5-2.0x storage cost overhead in practice.
5) An empirical evaluation of the system that shows that
ObliviSync performs better than the theoretic results for
both throughput and latency, and ObliviSync functions
with limited overheads and delays when working with
Dropbox as the cloud synchronization service.
II. EFFICIENT OBLIVIOUSNESS FOR DROPBOX
A. Overview of Write-only ORAM
We start by describing the write-only ORAM of [8], as it
informs our construction.
The setting. To store N blocks in a write-only ORAM, the
server holds an array of 2N encrypted blocks. Initially, the
N blocks of data are shufﬂed and stored in random locations
in the 2N-length array, such that half of the blocks in the
array are “empty”. However, every block is encrypted with an
IND-CPA encryption scheme so the server cannot learn which
blocks are empty and which are not. The client stores a local
dictionary (or sometimes called a position map) which maps a
logical address in the range (0, N ] to the location in the server
array where it is currently stored, in the range (0, 2N ]. Using
this dictionary, the client can ﬁnd and read any block in the
storage that it needs, but the server will not know the location
of any individual block.
Read and write operations. Since by deﬁnition a write-only
ORAM does not need to hide reads, they are performed triv-
ially by reading the local dictionary and then the corresponding
block from the ORAM. Write operations, however, require
additional work. When the client wishes to write a block to
the ORAM, it chooses k random locations in the array out of
2N, where k is a constant parameter. With high probability,
at least one out of these k locations will be empty, and the
1 The bandwidth is actually set directly according to the system parameters.
If it is too high, “dummy” write operations are performed to hide the access
pattern. Our system works as long as the bandwidth is set to 4x higher than
the actual amount of data written. Of course, the user may set the parameters
poorly due to not knowing their usage in advance, in which case the bandwidth
may be higher due to the required dummy writes. See Section II-B.
2
new block is written into that location while re-encrypting the
other k − 1 locations to hide which block was changed. After
writing the block, the client also updates their dictionary to
indicate that the block now resides in its new location. The
old location for this block is implicitly marked empty because
no entry in the dictionary now points to it.
Achieving obliviousness. Since every write operation sees
the client accessing k randomly chosen blocks in the ORAM,
independent of the logical address of the block that is being
written, it cannot reveal any information about the client’s
access pattern. The only situation that can cause the client
to reveal something is if the k chosen locations do not contain
any free blocks, and it has nowhere to write the new one. Since
every block has 1/2 probability of being empty, the chance that
there are no free blocks will be 2−k, so k can be set to the
security parameter λ to give a negligible chance of failure.
Efﬁciency with stash on the client. However, setting k = λ
actually does not result in O(1) overhead; since λ > log N, the
overhead is Ω(log N ). On average, the client ﬁnds k/2 empty
blocks during a single write, many more than are needed. If the
client instead stores a buffer of blocks that it wants to write,
and writes as many blocks from the buffer as he ﬁnds empty
blocks, k can be set much more aggressively. It is shown in
[8] that k = 3 is sufﬁcient to guarantee with high probability
that the stash will never exceed O(log N ). This makes the ﬁnal
overhead for write-only ORAM 3x that of non-private storage.
Maintaining the dictionary ﬁle. The ﬁnal important detail is
that the dictionary ﬁle requires O(N log N ) bits of storage,
which might be too large for the client
to store locally.
Fortunately it
is relatively simple to store this dictionary
recursively in another ORAM [8], [23]. For some block and
databases sizes, however, it might be quite reasonable for the
client to store the entire dictionary itself. Jumping ahead, in
our system, the client locally stores the dictionary ﬁle (called
the ﬁletable) as an important metadata structure of the entire
ﬁle system, in order to keep track of the actual position of
each ﬁle block. See the detailed discussion in Section IV-A.
B. Overview of Our System
The setting. Our ObliviSync system uses the idea of write-
only ORAM on top of any ﬁle backup or synchronization tool
in order to give multiple clients simultaneous updated access
to the same virtual ﬁlesystem, without revealing anything at
all to the cloud service that is performing the synchronization
itself, even if the cloud service is corrupted to become an
honest-but-curious adverary. Write-only ORAM is ideal for
this setting because each client stores an entire copy of the
data, so that only the changes (write operations) are revealed to
the synchronization service and thus only the write operations
need to be performed obliviously.
Improvements over write-only ORAM. Compared to the
previous write-only ORAM construction [8], we make signif-
icant advances and improvements to ﬁt this emergent applica-
tion space:
• Usability: Users interact with the system as though it is
a normal system folder. All the encryption and synchro-
nization happens automatically and unobtrusively.
• Flexibility: We support a real ﬁlesystem and use innova-
tive methods to handle variable-sized ﬁles and changing
Fig. 1. Diagram for ObliviSync
client roles (read/write vs. read-only) to support multiple
users.
• Strong obliviousness: The design of our system not only
provides obliviousness in the traditional sense, but also
protects against timing channel attacks. It also conceals
the total number of write operations, a stronger guarantee
than previous ORAM protocols.