of Hypergiants have expanded significantly, we also observe
shrinking of deployments, most notably in the case of Akamai.
Artifacts. To support future research, we make our software and
results publicly accessible to the research community through our
project website [45]:
https://github.com/pgigis/sigcomm2021-hypergiants-offnets
What this paper is not about: As we do not know in detail the
business strategies, deployment planning, peering arrangements,
and the performance and cost goals of individual HGs, our study is
not a head-to-head comparison of different HGs. It is possible that
a HG with a smaller off-net footprint can still serve more users or
provide better performance. Performance evaluation of different
HG off-net footprints is out of the scope of this work.
2 BACKGROUND
In HTTPS, HTTP traffic is encrypted using the cryptographic proto-
col Transport Layer Security (TLS), which secures communication
using public certificates that are exchanged and verified. The stan-
dard format of public key certificates is X.509 [33]. The certificates
contain several fields [33, 91]. As we will explain in more detail in
Section 4, we use the following fields and properties to establish
which organization and site(s) a certificate belongs to and whether
the certificate is valid:
Subject Name. This field identifies the entity associated with
the certificate via a number of (sub)fields. This paper uses the
Organization entry, naming the organization associated with the
certificate (e.g., Google LLC).
dNSName. The DNS name dNSName extension lists the domains that
this certificate certifies (e.g., *.google.com,
*.google.com.br, *.googlevideo.com, ...).
Server Name Indication (SNI). SNI is a TLS protocol extension
that allows a server to serve multiple certificates for different host-
names, all under a single IP address [35]. During the TLS handshake
phase, the client provides the hostname that it wants to reach, and
the server replies back with the corresponding certificate. If a client
does not include this extension, the server replies with its default
certificate.
Validity Period. This uses the NotBefore and NotAfter fields
to define the time window within which a certificate should be
considered as valid. The values depend on the policy of the owner
(e.g., Netflix used short-lived ones [84]).
Certificate Authority. It indicates whether the certificate is a
Certificate Authority (CA) or an end entity one.
Certificate chains and verification. To reflect the hierarchical
chain(s) of trust from CAs down to certificate-owning organizations,
certificates are typically organized in chained lists. A certificate
chain is essentially an ordered list of certificates, containing a TLS
Certificate and CA Certificates, that enable the receiver to verify
that both the sender and all involved CAs are trustworthy. The chain
begins with the end entity (EE) certificate, and each certificate in
the chain is signed by the entity identified by the next certificate in
the chain. Any certificate that sits between the EE Certificate and
the Root Certificate is called an Intermediate Certificate. The first
Intermediate Certificate is the signer/issuer of the EE Certificate.
The Root CA Certificate is the signer/issuer of the penultimate
Intermediate Certificate and is a CA-signed certificate (typically
pre-installed client-side) that terminates the chain. The signatures
of all certificates in the chain must be verified up to the Root CA
Certificate.
3 CHALLENGES
At first glance, it may seem that scanning for TLS certificates imme-
diately solves the problem of locating all off-nets – if an IP address
outside of a Hypergiant has “the” Hypergiant’s certificate, it is an
off-net server for that Hypergiant; if it does not, it is not. How-
ever, a number of challenges arise, mainly due to the complex and
heterogeneous deployment strategies of different Hypergiants:
It is not trivial to determine which certificates to look for, as
there is not necessarily one certificate that definitively identifies
each Hypergiant. In fact, different Hypergiants deploy very different
certificate management strategies (see Appendix A.3). Further, serv-
ing infrastructure can reflect relics of business history. For example,
LinkedIn and Github have been acquired by Microsoft but might
use different serving infrastructure, either their own or third-party.
We want our technique to be general enough to accommodate these
strategies without requiring significant per-Hypergiant tuning or
compromising coverage (uncovering the HG off-net footprint) or
accuracy (confidence on the ownership of the server).
The presence of a Hypergiant certificate on a server outside
that Hypergiant does not guarantee the server is an off-net
content server of the Hypergiant. A number of deployment
models can lead to other servers having the certificate:
• Some Hypergiants use their own infrastructure for some ser-
vices and third-party CDNs for others (e.g., Twitter images come
from Akamai and Verizon, but some other content comes from
their own infrastructure, and Netflix uses Amazon for web front-
ends but its own CDN for video). Some Hypergiants (e.g., Apple
and Microsoft [95]) have their own infrastructure but also use
third-party CDN servers for resilience, capacity, and/or to extend
their footprint. These servers may have certificates from a Hy-
pergiant (possibly in addition to certificates from the CDN) and
provide the Hypergiant’s services, even though they are not part
518
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
P. Gigis et al.
of the Hypergiant’s off-net footprint in terms of the underlying
hardware.
• A certificate for a Hypergiant may exist on a server that is not
serving infrastructure for the Hypergiant. Cloud providers offer
on-premise versions of products such as AWS Outposts, Azure
Stack, and Google GKE, which are managed by the cloud provider
but do not host public services for it. However, these servers
may host a certificate for the cloud provider on a management
interface. Similarly, HG certificates may exist on servers used
for aspects of their business other than content serving, such as
payroll.
• Some Hypergiants like CloudFlare issue TLS certificates to cus-
tomers of their proxy services, and so a customer server offering a
CloudFlare-issued certificate could be mistaken for a CloudFlare
off-net.
A simple scan of the non-Hypergiant IP address space may
not uncover all off-nets. For Hypergiants serving content over
anycast [23], the user-facing IP address for on-net and off-net
servers is the same, complicating differentiating one from another,
and queries to that interface will reach a particular anycast instance
based on the source of the query. Therefore, simply scanning the IP
address space from one or a few locations is not enough to uncover
every instance of the anycast IP address [30], potentially leaving
some of the HG footprint uncovered.
4 METHODOLOGY
We develop a methodology that uses TLS certificate scans as a
building block, supplementing them with techniques we develop
to address the challenges mentioned in Section 3. First, we learn a
Hypergiant’s TLS fingerprints by scanning its on-nets (§4.2). Second,
we search for the TLS fingerprint in scans of off-net IP addresses to
identify candidates (§4.3). Third, we learn the Hypergiant’s HTTP(S)
header fingerprint by again scanning on-nets (§4.4). Fourth, we
confirm the off-net candidates by scanning them for the HTTP(S)
header fingerprints (§4.5). Our approaches address most of the
challenges, but we discuss their remaining limitations in Section 7.
4.1 Validating Certificates
Throughout, we only use valid certificates. As recommended in
prior studies [24, 29], we verify the intermediate/root certificates
of each certificate chain against a list of well-trusted root and in-
termediate certificates which form the WebPKI (extracted from the
Common CA Database [77]). We discard any certificates that (at
the time they were gathered) were expired, based on the NotAfter
and NotBefore fields. We also discard all self-signed end-entity
certificates as they can be issued by anyone to mimic valid HG
certificates. During the period of our study, more than one third of
the hosts returned invalid certificates that we excluded.
4.2 Learning Hypergiant TLS Fingerprints
A Hypergiant may not have a single defining TLS certificate, for
example if it operates different services with different certificates,
and so we first learn the fingerprints that identify a particular
Hypergiant, in order to later apply the fingerprints to Internet-wide
scans. The input to this step is the name of a Hypergiant (e.g.,
“google”) and TLS scans of all IP addresses announced by that
Hypergiant (Section 4.6 provides details on the scans we use in this
paper). The intuition is that servers in this IP space with end entity
(EE) certificates matching the Hypergiant name are extremely likely
to be on-net servers of the Hypergiant and so provide a reliable
fingerprint for the Hypergiant’s serving infrastructure. We are
interested in the EE certificates, as they include information for
the server owner, while intermediate/root certificates can contain
third-party organization information.
From the EE certificates found in the Hypergiant’s address space,
we identify Hypergiant’s on-net servers by performing a case in-
sensitive search of the Hypergiant’s name in the TLS Organiza-
tion field of the Subject Name, as organizations tend to use their
primary organization name to prove the identity and validity of
their certificates [34]. Any organization can potentially obtain a
Domain-Validated (DV) [1] certificate with, e.g., “google” in the
Organization field of the Subject Name, as the field is not vali-
dated or authoritative, and so the Organization on its own is not
a reliable fingerprint. To supplement it, we extract the list of DNS
names (the TLS dNSName field, which is authenticated) from the
end-entity certificates of the on-net servers, creating a set of DNS
names served by the Hypergiant.
4.3 Using Fingerprints to Identify Candidate
Off-nets
We then use the fingerprint – specifically the set of DNS names –
to search for the presence of certificates from the Hypergiant on IP
addresses outside the Hypergiant, as these are its candidate off-nets.
We again search for the name of a Hypergiant, e.g., “google”, in the
TLS Organization field of the Subject Name. For each matching
certificate, we check whether all of the DNS names in the certifi-
cate’s dNSNames field are in the Hypergiant’s set of DNS names
from on-net certificates we found in the previous step. If they are,
the IP address providing the TLS certificate is a candidate off-net.
By requiring that all DNS names in the certificate be present in
on-net certificates, we filter out cases where the HG is a certificate
provider (e.g., Cloudflare) and also cases where the Hypergiant
shares a certificate with another organization.
4.4 Learning Hypergiant HTTP(S) Fingerprints
We identify fingerprints in Hypergiant HTTP(S) headers as a ba-
sis for excluding off-net candidates that have a certificate from
the Hypergiant but are not in fact among its off-net servers (§3).
Large content providers and CDNs often use HTTP response head-
ers for debugging purposes, and we inspect these headers to cre-
ate a per-Hypergiant fingerprint, using responses from on-net
servers in Rapid7 HTTP and HTTPS scans from September 2020.
We filtered out common standard headers (e.g., Cache-Control
and Content-Length). Since the servers of a particular Hypergiant
are likely to share debugging headers, we identified the 50 most
frequent header name-value pairs and the most frequent header
names for each Hypergiant’s on-net servers.
Next, we performed manual classification and validation to find
header fingerprints that identify the Hypergiant’s web servers.
There is a small number of Hypergiants, so we found that exam-
ination on a per-case basis was suitable for our work. We leave
519
Seven Years in the Life of Hypergiants’ Off-Nets
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Hypergiant Header Name Header Value Documented
Akamai
Cloudflare
Google
Facebook
Server
CF-Request-Id
Server
X-FB-Debug
Yes [5]
Yes [31]
Disclosed [49, 59]
Yes [39]
AkamaiGHost
gws*
Table 1: Examples of headers used to identify HG servers. Empty
header values indicate that only the header name is used to match.
Entries ending with * indicate a prefix match.
automation of this step for future work. For most frequently occur-
ring headers, HG-specific headers were easily identifiable either
from a unique header name or value containing an abbreviated
name of the Hypergiant. For nearly 80% of cases, we found public
documentation or disclosure confirming the use of these headers
by HGs. Table 1 shows several examples, and Appendix A.5 pro-
vides the full list. We also verified the presence of the headers with
independent tests on content (e.g., google.com) for each HG. An
interesting case is Netflix, as we discovered that a fraction of its
servers responded with the default ngnix header. For our analysis,
we consider a server with a Netflix certificate and the default ngnix
HTTP(S) header as a Netflix off-net.
4.5 Confirming Candidates Using HTTP(S)
We apply these HTTP(S) header fingerprints to the off-net candi-
dates from Section 4.3 and classify as off-nets any that match the