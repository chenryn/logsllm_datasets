图1-4 九宫格
看一下代码，有行和列之分。比如L形状的手势密码应该是00 03 06 07 08，这样组成五个字节。这里为了验证手势密码是否正确，设置一个简单的手势密码，如图1-5所示。
图1-5 简单的手势密码
然后在/data/system目录下生成一个密码文件/data/system/gesture.key，取出来用二进制工具查看，不然可能看到的是乱码，这里用的是010Editor工具查看，如图1-6所示。
图1-6 手势密码加密内容
为了最大化地还原算法，依然把源码拷贝出来，然后定义一个手势九宫格类，构造出这个手势的点数据：
这是源码的加密算法，下面再构造出手势点数据：
手势点数据应该是00 01 02 05 08，打印看结果，如图1-7所示。
图1-7 运行结果
从运行结果发现，一模一样，这样就完美地分析完了手势密码加密算法。
这里再总结一下两种方式锁屏密码算法。
第一种：输入密码算法
对输入的明文密码+设备的salt值进行MD5和SHA1操作，之后转化成hex值进行拼接即可，最终加密信息保存到本地目录/data/system/password.key。
第二种：手势密码算法
将九宫格手势密码中的点数据转化成对应的字节数组，然后直接进行SHA1加密即可。最终加密信息保存到本地目录/data/system/gesture.key。
1.3 本章小结
读完本章是不是迫不及待地想动手尝试一下？在操作之前一定要记住，先得到设备的salt值，然后要注意源码版本。
第2章 Android中NDK开发
本章主要介绍Android中的NDK开发技术相关知识，因为后续章节特别是在介绍安全应用防护和逆向应用的时候，会涉及NDK的相关知识，而且考虑到项目的安全性开发，把一些重要的代码放到底层也是很重要的，同时能提高执行效率。
2.1 搭建开发环境
在搭建环境之前必须先去官网下载NDK工具包，官网地址是http://wear.techbrood.com/tools/sdk/ndk/，选择相应平台的NDK版本即可。
2.1.1 Eclipse环境搭建
第一步：配置NDK路径，如图2-1所示。
图2-1 配置NDK路径
第二步：新建Android项目，如图2-2所示。
图2-2 新建Android项目
点击Add Native Support，出现如图2-3所示的lib命令。
点击“Finish”，再次观察项目多了jni文件夹，如图2-4所示。
图2-3 命令lib
图2-4 添加了jni文件夹
在jni下面就可以开始编写native层的代码。
第三步：使用javah生成native的头文件，如图2-5所示。
图2-5 生成native头文件
注意：javah执行的目录，必须是类包名路径的最上层，然后执行：
注意没有后缀名java。
第四步：运行项目，点击工具栏中的小锤子图标如图2-6所示。
图2-6 运行项目
运行结果如图2-7所示。
图2-7 运行结果
2.1.2 Android Studio环境搭建
去官网下载NDK工具，然后使用Android Studio中进行新建一个简单项目，然后创建JNI即可，如图2-8所示。
图2-8 创建jni
第一步：在项目中新建jni目录，如图2-9所示。
第二步：用javah命令生成native的头文件，如图2-10所示。
第三步：配置项目的NDK目录，如图2-11所示。
图2-9 新建jni目录
图2-10 生成native头文件
图2-11 配置NDK目录
选择模块的设置选项Open Module Settings，如图2-12所示。
图2-12 模块的设置选项
在其中设置NDK目录即可。
第四步：配置Gradle中的ndk选项，如图2-13所示。
图2-13 配置gradle
这里只需要设置编译之后的模块名，即so文件的名称，以及产生哪几个平台下的so文件，需要用到的lib库，这里用到了Android中打印log的库文件。
第五步：编译运行生成so文件
在build目录下生成指定的so文件，拷贝到项目的libs目录下即可，如图2-14所示。
图2-14 项目的libs目录
2.2 第一行代码：HelloWorld
本节开始介绍JNI技术，先输出一个Hello World。具体流程如下，在Java中定义一个方法，在C++中实现这个方法，在方法内部输出“Hello World”，然后再回到Java中进行调用。
第一步：在Eclipse中建立一个类：JNIDemo。
命令如下：
其中sayHello就是要在C++中实现的方法。
第二步：使用javah命令将JNIDemo生成.h的头文件。
命令如下：
注意：
·首先要确保配置了Java的环境变量，不然javah命令不能用。
·案例的Java项目是放在E：\workspace中的，所以首先进入项目的bin目录中，然后使用javah命令生成头文件。
·javah后面的类文件格式是类的全名（包名+class文件名），同时不能有.class后缀。
命令执行成功后会在bin目录中生成头文件com_jni_demo_JNIDemo.h，参见图2-15。
图2-15 javah命令参数说明
注意：如果包含native方法的类，引用其他地方的类，那么进入bin\classes\目录下会出现问题提示找不到指定的类，这时候需要切换到源码目录src下运行即可。
第三步：使用VC6.0生成.dll文件。
首先创建一个dll工程，如图2-16～图2-18所示。
在.cpp文件中输入如下代码：
图2-16 VC6.0生成.dll文件
图2-17 VC6.0生成.dll文件
图2-18 VC6.0生成.dll文件
这个方法的声明可以在上面生成的com_jni_demo_JNIDemo.h头文件中找到，这个就是Java工程中的sayHello方法的实现：
这里编译会出现以下几个问题：
1）会提示找不到相应的头文件，如图2-19所示。这时需要将jni.h、jni_md.h文件拷贝到工程目录中，这两个文件的具体位置参见图2-20。
Java安装目录中的include文件夹下，jni_md.h文件在win32文件夹中，找到这两个文件后，将其拷贝到C++的工程目录中。
图2-19 编译之后的头文件
图2-20 jni.h文件
2）当拷贝到这两个文件之后，编译还是提示找不到这两个文件：主要原因是#include是从系统目录中查找jni.h头文件的，而这里只把jni.h拷贝到工程目录中，所以需要在com_jni_demo_JNIDemo.h头文件中将#include改成#include"jni.h"。同理，在jni.h文件中将#include改成#include"jni_md.h"。
3）同时还有一个错误提示：e：\c++\jnidemo\jnidemo.cpp（9）：fatal error C1010：unexpected end of file while looking for precompiled header directive，这是指预编译头文件读写错误，这时候还要在VC中进行设置：项目→设置→C/C++。在分类中选择预编译的头文件，选择不使用预补偿页眉，如图2-21所示。
这样，编译成功，生成JNIDemo.dll文件在C++工程中的Debug目录中。
注意：因为之前开发都是使用VC工具，所以这里使用了VC 6.0来进行C++代码的编写和运行，其实可以直接使用Eclipse或在Android Studio中也可以进行编写，这样会更方便。
第四步：将JNIDemo.dll文件添加到环境变量中，如图2-22所示。
注意：在用户变量中的path设置，用分号隔开：“；E：\C++\Debug”，这样就将.dll文件添加到环境变量中了。
第五步：在Eclipse中调用sayHello方法，输出“Hello World”。代码如下：
图2-21 预编译头文件
图2-22 将JNIDemo.dll文件添加到环境变量中
System.loadLibrary方法是加载JNIDemo.dll文件的，一定要注意不要有.dll后缀名，只需要文件名即可。
注意，运行的时候会报错，如图2-23所示。
图2-23 运行错误
这个提示是没有找到JNIDemo.dll文件，这时需要关闭Eclipse，然后再打开，运行就没有错了。原因是Eclipse每次打开的时候都会去读取环境变量的配置，刚才配置的path没有立即生效，所以要关闭Eclipse，然后重新打开一次即可。
注意：这里因为使用了VC编辑器进行native代码的编写，所以需要配置dll文件操作，但是现在更多的是习惯直接在Eclipse/Android Studio中配置C++环境直接编写了，这样更方便。
2.3 JNIEnv类型和jobject类型
上一节介绍的是一个简单的应用，说明JNI是怎么工作的，这一节介绍本地方法sayHello的参数及其使用。
首先来看一下C++中的sayHello方法的实现：
2.3.1 JNIEnv类型
JNIEnv类型实际上代表了Java环境，通过JNIEnv*指针就可以对Java端的代码进行操作。例如，创建Java类中的对象，调用Java对象的方法，获取Java对象中的属性等。
JNIEnv类中有很多函数可以用，如下所示：
·NewObject：创建Java类中的对象。
·NewString：创建Java类中的String对象。