## 前言
TQLCTF 2022只做了一道web，其余几道题打自闭了，回来复现。前言？没有前言了。。。焯
## DNS解析链
DNS就是域名系统，是因特网中的一项核心服务，是用于实现域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。
众所周知，DNS查询具有透明性，不会对接收到的DNS记录进行修改，恶意代码能够完整保存，并且，接收解析结果的程序不会对结果做任何验证和过滤。
上面是我做的一个DNS解析流程图
如果，我们将恶意字符编码为DNS记录的有效载荷。由攻击者的域名服务器提供的记录在攻击者控制的域下包含一个合法映射，但record被目标程序接受并处理时，获取到了错误子域的IP地址。此时，攻击者向解析器注入了大量伪造的响应，就会发生错误的解释从而导致注入攻击。
## DNS缓存攻击
在DNS资源记录中插⼊控制字符，从⽽影响DNS的解析结果，或是插⼊不符合域名规范的特殊字符，最终实现DNS缓存污染、SQL 注⼊、XSS等效果。
我们假设A为用户端，B为DNS服务器，C为A到B链路的一个节点的网络设备（路由器，交换机，网关之类的），然后我们来模拟一次被污染的DNS请求过程。
假设A向B构建UDP连接，然后，A向B发送查询请求，查询请求内容通常是：`A
example.com`，这一个数据包经过节点设备C继续前往DNS服务器B；然而在这个过程中，C通过对数据包进行特征分析（远程通讯端口为DNS服务器端口，激发内容关键字检查，检查特定的域名如上述的`example.com`,以及查询的记录类型`A记录`），从而立刻返回一个错误的解析结果（如返回了`A
123.110.119.120`），众所周知，作为链路上的一个节点，C机器的这个结果必定会先于真正的域名服务器的返回结果到达用户机器A，而我们的DNS解析机制有一个重要的原则，就是只认第一，因此C节点所返回的查询结果就被A机器当作了最终返回结果，用于构建链接。
### DNS缓存投毒
DNS缓存投毒攻击主要有两种攻击方式，分别利用`\\.`和`\\000`字符：
#### 句点注入
`\\.`在解码时会被认为是 `.`字符，因此DNS记录 `www\\.example.com. A 1.1.1.1`存入DNS缓存后就是将域名
`www.example.com`解析为 `1.1.1.1`的一条A记录。
这种攻击要求攻击者有一个特殊的域名`www\\.example.com`，且目标域名在同一父域下，但大多数应用都不太可能出现直接访问这类错误域名的情况，所以可以用CNAME记录来重定向。
CNAME对于需要在同一个IP地址上运行多个服务的情况来说非常方便。若要同时运行[文件传输](https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE
"文件传输协议")服务和[Web服务](https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1
"Web服务")，则可以把 _ftp.example.com_ 和 _www.example.com_ 都指向DNS记录 _example.com_
，而后者则有一个指向IP地址的A记录。如此一来，若服务器IP地址改变，则只需修改 _example.com_ 的A记录即可。
> CNAME记录必须指向另一个域名，而不能是IP地址。
>  
>  
>     inject.attacker.com. CNAME www\\.example.com.
>     www\\.example.com. A 1.1.1.1
>  
当我们直接对record进行解码但没有对`\\.`设置转义，`www.example.com`的 IP 地址就会变为  
`1.1.1.1`。解码后缓存这个被误解的记录导致了DNS缓存注入。
#### `\\000`截断
`\\000`是C语言字符串的结束符，指的是8进制0对应的字符，很多情况下DNS记录中的字符串也会被这一字符截断。
当我们解码并将其输入到目标缓存时，该记录使攻击者能够在缓存中注入任意域名的记录。在这个攻击中，我们还使用了一个
CNAME别名映射到某个二级域名`injectdot.attacker.com`，对于大多数客户端软件，都会直接访问解析器就触发了对`www.example.com\\000.attacker.com`的查询。当没有转义`www.example.com`后的零字节时，`.attacker.com`被重新移动，因为它在`\\\000`之后，DNS
软件误解记录并缓存一个记录映射`www.example.com`到 IP 地址 `1.1.1.1`。  
    inject.attacker.com. CNAME www.example.com\\000.attacker.com
    www.example.com\\000.attacker.com A 1.1.1.1
#### 例题 — [TQLCTF 2022]Network tools
通过DNS隧道传输恶意载荷
  * DNS缓存投毒
  * SSRF
    from flask import Flask, request, send_from_directory,session
    from flask_session import Session
    from io import BytesIO
    import re
    import os
    import ftplib
    from hashlib import md5
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.urandom(32)
    app.config['SESSION_TYPE'] = 'filesystem'  
    sess = Session()
    sess.init_app(app)
    def exec_command(cmd, addr):
        result = ''
        if re.match(r'^[a-zA-Z0-9.:-]+$', addr) != None:
            with os.popen(cmd % (addr)) as readObj:
                result = readObj.read()
        else:
            result = 'Invalid Address!'
        return result
    @app.route("/")
    def index():
        if not session.get('token'):
            token = md5(os.urandom(32)).hexdigest()[:8]
            session['token'] = token
        return send_from_directory('', 'index.html')
    @app.route("/ping", methods=['POST'])
    def ping():
        addr = request.form.get('addr', '')
        if addr == '':
            return 'Parameter "addr" Empty!'
        return exec_command("ping -c 3 -W 1 %s 2>&1", addr)
    @app.route("/traceroute", methods=['POST'])
    def traceroute():
        addr = request.form.get('addr', '')
        if addr == '':
            return 'Parameter "addr" Empty!'
        return exec_command("traceroute -q 1 -w 1 -n %s 2>&1", addr)
    @app.route("/ftpcheck")
    def ftpcheck():
        if not session.get('token'):
            return redirect("/")
        domain = session.get('token') + ".ftp.testsweb.xyz"
        file = 'robots.txt'
        fp = BytesIO()
        try:
            with ftplib.FTP(domain) as ftp:
                ftp.login("admin","admin")
                ftp.retrbinary('RETR ' + file, fp.write)
        except ftplib.all_errors as e:
            return 'FTP {} Check Error: {}'.format(domain,str(e))
        fp.seek(0)
        try:
            with ftplib.FTP(domain) as ftp:
                ftp.login("admin","admin")
                ftp.storbinary('STOR ' + file, fp)
        except ftplib.all_errors as e:
            return 'FTP {} Check Error: {}'.format(domain,str(e))
        fp.close()
        return 'FTP {} Check Success.'.format(domain)
    @app.route("/shellcheck", methods=['POST'])
    def shellcheck():
        if request.remote_addr != '127.0.0.1':
            return 'Localhost only'
        shell = request.form.get('shell', '')
        if shell == '':
            return 'Parameter "shell" Empty!'
        return str(os.system(shell))
    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=8080)
分析一下，有两个点，一个是`ftpcheck`路由的FTP SSRF，还有一个是只允许本地访问的shell
那么我们的思路就是将`token.ftp.testsweb.xyz`的缓存污染为⾃⼰服务器的IP地址，即可实现FTP
SSRF，访问到预留的webshell。
这里实现的时候，我们可以用Twisted，一个基于事件驱动的网络引擎框架，支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。
    zone = [
        SOA(
            # For whom we are the authority 
            'a.testsweb.xyz',
            # This nameserver's name 
            mname = "b.testsweb.xyz.",
            # Mailbox of individual who handles this 
            rname = "admin.a.testsweb.xyz",
            # Unique serial identifying this SOA data 
            serial = 0,
            # Time interval before zone should be refreshed 
            refresh = "1H",
            # Interval before failed refresh should be retried 
            retry = "30M",
            # Upper limit on time interval before expiry 
            expire = "1M",
            # Minimum TTL 
            minimum = "30"
        ),
        NS('a.testsweb.xyz', 'b.testsweb.xyz'),#将a.testsweb.xyz域名指定b.testsweb.xyz DNS服务器解析