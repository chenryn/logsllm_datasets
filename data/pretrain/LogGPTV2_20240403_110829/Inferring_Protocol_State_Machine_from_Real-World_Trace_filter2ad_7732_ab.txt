(cid:3)(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:86)(cid:3)(cid:82)(cid:73)(cid:3)(cid:68)(cid:3)(cid:86)(cid:83)(cid:72)(cid:70)(cid:76)(cid:73)(cid:76)(cid:70)(cid:3)
(cid:68)(cid:83)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:51)(cid:85)(cid:82)(cid:87)(cid:82)(cid:70)(cid:82)(cid:79)(cid:3)(cid:73)(cid:82)(cid:85)(cid:80)(cid:68)(cid:87)(cid:3)
(cid:80)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:86)
(cid:51)(cid:85)(cid:82)(cid:87)(cid:82)(cid:70)(cid:82)(cid:79)(cid:3)(cid:86)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)
(cid:80)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:86)
Fig. 1. The Architecture of Veritas
from network traﬃc. However, ScriptGen has to rebuilds TCP ﬂows based on
several assumptions, and it can not handle each TCP session precisely. So those
limitations prevent it from emulating all possible protocols. Prospex [3] infers
protocol state machine by means of analyzing the execution trace of a program
on a stand-alone host. In comparison, our inference is based on observed network
traﬃc that can be performed by ISPs.
3 Architecture of Veritas
The objective of our system is to infer the speciﬁcations of a protocol that is
used for communication between diﬀerent hosts. More speciﬁcally, given the
packet sequences of ﬂows of a speciﬁc application, we investigate how protocol
state changes from one state to another in the ﬂow. Our approach is to perform
machine learning and probabilistic/statistical analysis on the syntax of observed
network traces. In this section, we give the deﬁnitions used in Veritas and an
overview of Veritas architecture.
We deﬁne a protocol as a Markov chain model on sessions of length at most n,
which has a discrete state space. The Markov property states that the conditional
probability distribution of a system at the next time period depends only on
the current state of the system, i.e., not depending on the state of the system at
previous time periods.
Deﬁnition 1. The message that identiﬁes the state of a protocol is referred to
by us as a protocol state message.
Inferring Protocol State Machine from Network Traces
5
Protocol state messages are important for understanding the behaviors of the
protocol. However, one may not always be able to obtain the state message
directly from network traces. Our approach is to infer or estimate protocol state
messages by observing and analyzing messages that frequently occur next to
them.
Deﬁnition 2. The protocol format message refers to the most frequent string
(i.e., the keyword) in the protocol format.
Protocol format messages are useful for both protocol format inference and ob-
taining the protocol state message. Protocol format messages include protocol
state messages, which we will give more description in the following subsection.
In comparison, research on protocol format extraction typically regards a
protocol as a distribution on sessions of length at most n [9], which is static.
In other words, the existing solutions work only for extracting the format of a
protocol, and cannot be used to describe the protocol states and their transitions.
The input to our system is the network trace of an application. In application-
layer packet headers, there may be some protocol state messages. Each of these
messages has a message type, which indicates the protocol state of the packet.
The sequence of packets (belonging to the same ﬂow) is determined by the
protocol state machine of a speciﬁc application. Meanwhile, the protocol state
machine describes how packets of diﬀerent message types are transmitted in the
traces.
Our assumptions In our work, we assume that the network trace is not en-
crypted. In addition, we assume that the network trace is only composed of
ﬂows from the application to be investigated. That is, there is no mixed traﬃc
of multiple protocols.
Veritas has several components as shown in Figure 1, including network data
collection, packet analysis, state message inference, and state machine inference,
which we describe in more details next.
Network data collection. In this phase, network traﬃc of a speciﬁc appli-
cation (such as SMTP, DNS, BitTorrent etc.) is collected carefully. There are
several ways to get packets of a speciﬁc protocol, that is the ground truth. For
example, the GT [2] method, capturing packets on a speciﬁc transport layer port,
by means of reverse engineering and so on are all widely used. In this paper, the
method of collecting packets on a speciﬁc transport layer port is adopted.
Packet analysis. During the phase of packet analysis, we ﬁrst look for high
frequency message units from oﬀ-line application-layer packet headers. Then, we
employ Kolmogorov - Smirnov (K-S) test [11] to determine the optimal number
of message units. Finally, we replay each application-layer packet header and
construct protocol message formats with candidate message units.
State message inference. In this phase, we extract the feature from each
protocol format message. The feature is used to measure the similarity between
format messages. Then, the partitioning around medoids (PAM) clustering algo-
rithm [12] is applied to group similar messages into a cluster. Finally, the medoid
message of a cluster will be a protocol state message.
6
Y. Wang et al.
State machine inference. In order to infer protocol state machine, we
should be aware of the protocol state sequence of ﬂows. In order to label protocol
state, ﬁrstly our system builds ﬂows for a speciﬁc protocol. Then, each packet
under analysis (if it has a state) will be assigned with a state. Afterwards, by
constructing the relationship between diﬀerent states, a protocol state machine is
constructed. Moreover, in each ﬂow the transitions probabilities of diverse states
are counted. Finally, together with the protocol state messages, the probabilistic
state machine is constituted.
3.1 Packet Analysis
The ﬁrst stage of Veritas is to acquire the formats of protocol messages. In
Veritas, we extract message formats by applying statistical learning methods on
protocol packets. Protocol format messages can be extracted from application-
layer packet headers by searching for frequently occurring strings (i.e., keywords).
These keywords are typically encapsulated at the beginning of application-layer
packets. Taking SMTP (Simple Mail Transfer Protocol) for example, both of
the strings “MAIL FROM:” and “RCPT TO:” are its format messages, which
usually reside in the SMTP protocol application headers. We assume that the
protocol speciﬁcations is not available to us. Next, we describe in details how we
analyze collected packets in order to infer protocol format messages.
Message Units Extraction. Protocol format messages are deﬁned by us as
the most frequently occurred strings in the traces of a protocol. From a statistical
perspective, if each protocol format can be partitioned into a set of all possible
subsequences with ﬁxed lengths, the frequency of these subsequences can be
counted precisely.
However, there are two practical problems. The ﬁrst issue is how to choose the
length l of these subsequences, which is critical to the performance of Veritas.
The second issue is that given a packet how to determine the number n of bytes
that are protocol related (i.e., not payload). The latter problem arises, as it
is unnecessary to the payload of a packet. Thus, the problem message units
extraction turns to determining proper values for l and n.
Deﬁnition 3. The l-byte subsequence originated from the ﬁrst few bytes of each
packet header in network traces is referred to by us as a message unit.
We investigate several common application-layer protocols, and ﬁnd that the
minimum ﬁeld length of those protocols, both text and binary, is at least three
bytes. In addition, it is easy to see that the subsequences with length three will
be more diﬀerentiable than those with length two. The sequence set with three
bytes is larger than that with two characters, so high frequency of three-byte
sequences is more prominent in special subsequence seeking. On the other hand,
the subsequences with length four or more will weaken its occurrence frequency.
Therefore, in Veritas we set l = 3. Furthermore, if the packet length s is smaller
than three bytes, we regard l = s. For the other parameter n, we just give a
tentative value 12.
Inferring Protocol State Machine from Network Traces
7
(cid:39)(cid:68)(cid:87)(cid:68)(cid:54)(cid:72)(cid:87)(cid:3)(cid:20)
(cid:37)(cid:37)(cid:37)(cid:3)(cid:3)(cid:39)(cid:36)(cid:55)(cid:3)(cid:3)
(cid:36)(cid:55)(cid:36)(cid:3)(cid:3)(cid:42)(cid:42)(cid:42)
(cid:43)(cid:50)(cid:54)(cid:3)(cid:3)(cid:54)(cid:50)(cid:55)(cid:3)
(cid:54)(cid:55)(cid:54)(cid:3)(cid:3)(cid:54)(cid:54)(cid:54)
(cid:258)
(cid:39)(cid:68)(cid:87)(cid:68)(cid:54)(cid:72)(cid:87)(cid:3)(cid:21)
(cid:36)(cid:36)(cid:36)(cid:3)(cid:3)(cid:39)(cid:36)(cid:55)(cid:3)(cid:3)
(cid:36)(cid:55)(cid:36)(cid:3)(cid:3)(cid:40)(cid:40)(cid:40)
(cid:43)(cid:50)(cid:54)(cid:3)(cid:3)(cid:54)(cid:50)(cid:55)(cid:3)
(cid:54)(cid:55)(cid:54)(cid:3)(cid:3)(cid:55)(cid:55)(cid:55)
(cid:258)
(cid:46)(cid:16)(cid:54)(cid:3)(cid:55)(cid:72)(cid:86)(cid:87)(cid:3)
(cid:41)(cid:76)(cid:79)(cid:87)(cid:72)(cid:85)
(cid:38)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:48)(cid:72)(cid:86)(cid:86)(cid:68)(cid:74)(cid:72)(cid:3)(cid:56)(cid:81)(cid:76)(cid:87)(cid:86)
(cid:301)
(cid:39)(cid:36)(cid:55)(cid:3)(cid:3)
(cid:36)(cid:55)(cid:36)
(cid:43)(cid:50)(cid:54)
(cid:50)(cid:54)(cid:55)
(cid:54)(cid:55)(cid:54)
(cid:258)
(cid:56)(cid:81)(cid:76)(cid:87)(cid:86)(cid:3)
(cid:38)(cid:82)(cid:80)(cid:69)(cid:76)(cid:81)(cid:72)(cid:85)
(cid:51)(cid:68)(cid:70)(cid:78)(cid:72)(cid:87)(cid:3)
(cid:43)(cid:72)(cid:68)(cid:71)(cid:72)(cid:85)(cid:3)(cid:20)
(cid:39)
(cid:36)
(cid:55)
(cid:36)
(cid:43)
(cid:50)
(cid:54)
(cid:55)
(cid:54)
Fig. 2. Packet Analysis of Veritas
It should be noticed that not all of the message units obtained from the
method aforementioned are protocol relative. In order to get the high frequency
units helpful in characterizing application layer protocol, Veritas introduces the
two-sample Kolmogorov-Smirnov statistical testing method (abbr. K-S test) [11]
to tackle the resulting message units set.
K-S Test Filter. In this part, we employ a K-S test ﬁlter to obtain message
units, which are associated with protocol formats. A concrete example is illus-
trated in Figure 2. The input to K-S test ﬁlter is two groups of message units
which is obtained by packet analysis. Before conducting K-S test, Veritas will
turn message units into numeric values. The output to K-S test ﬁlter is candidate
units which are used for constructing protocol format messages.
i=1
(cid:2)n
The essence of K-S test is to estimate the similarity of two samples according
to their empirical probability distributions in a nonparametric way. Given two
samples, say Sn and Sn(cid:2), where the subscripts represent the sample sizes, their
empirical distribution functions (denote Fn and Fn(cid:2) respectively) can be calcu-
IXi≤x, where IXi≤x is the indicator function, equal
lated as F (X) = 1
to 1 if Xi ≤ x and equal to 0 otherwise. Then K-S test conducts the similar-
n
ity measurement by quantifying the distance between Fn and Fn(cid:2) as a statistic
Dn,n(cid:2) = supx |Fn(x) − Fn(cid:2)(x)|. The null hypothesis is that the samples are drawn
from the same distribution, without specifying what that common distribution
nn(cid:4)/(n + n(cid:4))Dn,n(cid:2) > Kα,
is. The null hypothesis is rejected (at level α) if
where Kα is the critical value which can be found from P r(K ≤ Kα) = 1 − α
under the Kolmogorov distribution.
(cid:3)
So, in order to apply K-S test, the packet collection of a speciﬁc protocol
should be randomly partitioned into two disjoint groups A and B with approx-
imately the same size by utilizing the units extraction strategy described in
Section 3.1, two groups will yield two message-unit sets, A and B respectively.
Then after turning message units into numeric values, the frequency fx of el-
ement x in each set can be counted easily. Then for set A, we partition those
elements with frequency higher than or equal to λ into a subset Aλ. Here, λ
8
Y. Wang et al.
is a frequency threshold. Doing the same thing on B generates Bλ. Now the
application of K-S test on Aλ and Bλ is just to choose a suitable value λ under
which the null hypothesis is acceptable. The rejection of K-S test on Aλ and Bλ
means the threshold λ is not high enough to cut oﬀ useless units.
In the circumstance of Veritas, the aim of K-S test is to ﬁlter out message
units that is not relevant to protocol formats. That is, it requires the result sets
Aλ and Bλ responsible for the reﬂection of protocol formats. Put it in the way of
statistical testing, the K-S test on Aλ and Bλ should be accepted at a extremely
low level (i.e., 1− α should be small enough). In Veritas, 1− α is valued less than
10−8. Then, for the purpose of accepting the K-S test under the chosen reject
level α, Veritas manipulates λ in a progressive way: it is initialized as 10−5 and
gradually increases by 10−5 till K-S test accepts.