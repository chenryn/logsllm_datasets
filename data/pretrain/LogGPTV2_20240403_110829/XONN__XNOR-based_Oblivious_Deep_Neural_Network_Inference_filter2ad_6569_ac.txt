### USENIX Association

#### Binary-VDP and Integer-VDP for Batch Normalization and Binary Activation

**Binary-VDP:**
- **BN+BA (Batch Normalization + Binary Activation)**
  - The binary-VDP circuit is designed to handle binary inputs and weights, followed by a comparison step.
  - The circuit structure is as follows:
    - Input: `x[1], x[2], ..., x[n]` (b-bit input)
    - Weights: `w[1], w[2], ..., w[n]` (binary weights, representing -1 and 1)
    - Adders: 1-bit, 2-bit, ..., log2(n)-bit
    - Comparison: Final result compared with the expected output

**Integer-VDP:**
- **BN+BA (Batch Normalization + Binary Activation)**
  - The integer-VDP circuit handles non-binary (integer) inputs and binary weights, followed by a comparison step.
  - The circuit structure is similar to the binary-VDP but with additional steps to handle integer inputs.

**Select Circuit:**
- The select circuit is used to choose between two possible values based on a selection bit.

### 3.3 Oblivious Conditional Addition Protocol (OCA)

In XONN, all activation values and neural network weights are binary. However, the user's input to the neural network is not necessarily binary. The first layer of a typical neural network, whether fully connected (FC) or convolutional (CONV), is evaluated using oblivious Integer-VDP.

- **User Input:** A vector `v1` of n (b-bit) integers.
- **Server Input:** A vector `v2` of n binary values (-1 and 1).
- **Result:** A number `y` that can be described with `b' = ⌈log2(n · (2^b - 1))⌉` bits.

**Steps in the OCA Protocol:**

1. **Bit-Extension:**
   - Extend `v1` from b-bit to b'-bit. If `v1` contains signed integers, repeat the most significant bit (b' - b) times; otherwise, zero-pad the most significant bits.
   - Denote the extended vector as `v1*`.

2. **Two's Complement:**
   - Create the two's complement vector of `v1*`.

3. **Random Vector:**
   - Generate a random vector `r` of n (b'-bit) numbers.

4. **Element-wise Subtraction:**
   - Compute `v1* - r mod 2^b'` and `v1* - r mod 2^b'`.
   - These vectors will be used as inputs to n 1-out-of-2 OTs.

5. **Oblivious Transfer (OT):**
   - The client provides `m1 = v1* - r mod 2^b'` and `m2 = v1* - r mod 2^b'` as message vectors.
   - The server provides `v2` as the selection bits.
   - After OT, the server has a list of transferred numbers `vt` where:
     - `vt[i] = v1*[i] - r[i] mod 2^b'` if `v2[i] = 0`
     - `vt[i] = v1*[i] - r[i] mod 2^b'` if `v2[i] = 1`

6. **Additive Shares:**
   - Client computes `y1 = ∑n i=1 r[i] mod 2^b'`.
   - Server computes `y2 = ∑n i=1 vt[i] mod 2^b'`.
   - The final result `y` is the sum of `y1` and `y2` modulo `2^b'`.

**Figure 6: Oblivious Conditional Addition (OCA) Protocol**

- **Sender:**
  1. Bit-extends all elements of `v1` to create `v1*`.
  2. Creates the two's complement of `v1*`.
  3. Generates a random vector `r` of the same size as `v1*`.
  4. Creates list of first messages `m2 = v1* - r mod 2^b'`.
  5. Creates list of second messages `m1 = v1* - r mod 2^b'`.

- **Sender & Receiver:**
  6. Engage in Oblivious Transfer (OT).

- **Receiver:**
  7. Gets vector `vt` where:
     - `vt[i] = v1*[i] - r[i] mod 2^b'` if `v2[i] = 0`
     - `vt[i] = v1*[i] - r[i] mod 2^b'` if `v2[i] = 1`

- **Sender:**
  8. Computes her additive share of VDP result as `y1 = ∑n i=1 r[i] mod 2^b'`.

- **Receiver:**
  9. Computes his additive share of VDP result as `y2 = ∑n i=1 vt[i] mod 2^b'`.

### Required Modifications for the Next Layer

- The OCA protocol is used only for the first layer and does not change the overall constant round complexity of XONN.
- An "addition" layer is added to reconstruct the true value of `y` from its additive shares before further processing.

### Comparison to Integer-VDP in Garbled Circuits (GC)

- **Table 1: Computation and Communication Costs of OCA**
  - **GC:**
    - Computation: `(n + 1) · b · {2, 4}` AES operations
    - Communication: `(n + 1) · b · 2 · 128` bits
  - **OT:**
    - Computation: `n · {1, 2}` AES operations
    - Communication: `n · b` bits
  - **ADD Layer:**
    - Computation: `b' · {2, 4}` AES operations
    - Communication: `b' · 2 · 128` bits

### 3.4 Security of XONN

- **Honest-but-Curious (HbC) Adversary Model:**
  - Neither party is trusted, but they follow the protocol.
  - Both server and client cannot infer any information about the other party’s input from the protocol transcript.
  - XONN relies on GC and OT protocols, which are secure in the HbC model.

- **Security Against Malicious Adversaries:**
  - In the malicious security model, the adversary can deviate from the protocol to learn more about the input.
  - Additional security measures can be added to thwart such attacks, as discussed in Appendix B.

This revised text provides a clearer and more structured explanation of the Binary-VDP and Integer-VDP processes, the OCA protocol, and the security considerations.