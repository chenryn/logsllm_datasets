## 网约车打车派单系统思考 数据库设计与实现 - 每月投入6140元, 1天最多可盈利117亿  -_-!   
### 作者                                                                   
digoal                                                                   
### 日期                                                                   
2018-04-14                                                                 
### 标签                                                                   
PostgreSQL , 网约车 , 派单  
----                                                                   
## 背景     
打车类应用，如果完全按调度系统来派单，而非抢单的话，调度系统要非常的健硕。  
比如网约车打车，如何处理供给双方的需求，并高效的完成派单呢？  
随着业务的需求增多，调度规则也会增加，比如拼车，预约，等。  
下面是一个简单的派单系统的思考，如何使用PostgreSQL与空间数据库插件PostGIS来实现一个简单的距离优先派单、拼车撮合。  
采用skip lock或advisory lock来避免锁冲突。应对高峰期问题。  
[《HTAP数据库 PostgreSQL 场景与性能测试之 30 - (OLTP) 秒杀 - 高并发单点更新》](../201711/20171107_31.md)    
[《聊一聊双十一背后的技术 - 不一样的秒杀技术, 裸秒》](../201611/20161117_01.md)    
[《PostgreSQL 秒杀场景优化》](../201509/20150914_01.md)    
## PostgreSQL 设计  
### 1、空间数据库插件PostGIS  
在PostgreSQL中创建空间数据库  
```  
postgres=# create extension postgis;  
CREATE EXTENSION  
```  
### 1、网约车车辆位置表  
记录车辆的实时位置，是否被下单，有无剩余座位（不拼单的订单直接把剩余座位设为0）    
```  
create table car (  
  id int primary key,                          -- 车辆ID，主键  
  pos geometry,                                -- 实时位置, 使用PostGIS，geometry类型  
  sites int2 not null default 4,               -- 总座位数  
  rest_sites int2,                             -- 剩余座位数 (因为有拼车业务)  
  mod_time timestamp,                          -- 位置修改时间  
  order_pos geometry[],                        -- 当前订单对应用户打车的目的地位置  
  check (rest_sites =0 and sites>0)  
);  
```  
### 2、用户表  
```  
create table users (  
  id int8 primary key,  -- ID  
  otherinfo jsonb       -- 其他信息，请允许我偷懒一下使用JSON，实际上我这里派单只需要记录ID  
);  
```  
### 3、订单表  
记录每一笔订单，以及订单的状态  
```  
create table orders (  
  id serial8 primary key,   -- 订单号  
  carid int,             -- 车辆ID  
  uid int8,              -- 用户ID  
  crt_time timestamp,    -- 订单创建时间  
  pos1 geometry,         -- 上车位置  
  pos2 geometry,         -- 目的地  
  sites int2,            -- 乘坐几人  
  status int2            -- 订单状态(进行中 2, 取消 1, 结束 0)  
);  
```  
### 4、车辆位置实时更新  
每N秒(比如5秒)，上报并更新位置。  
[《HTAP数据库 PostgreSQL 场景与性能测试之 29 - (OLTP) 空间应用 - 高并发空间位置更新（含空间索引）》](../201711/20171107_30.md)   
假设这个城市一共有1000万量车  
```  
假定车辆的活动范围经纬度(110~120, 25~30)  
vi test.sql  
\set id random(1,10000000)  
insert into car(id, pos, mod_time) values (  
  :id,   
  ST_SetSRID(ST_Point(round((random()*(120-110)+110)::numeric,6), round((random()*(30-25)+25)::numeric,6)), 4326),  
  now()  
) on conflict (id) do update set pos=ST_SetSRID(ST_Point(ST_X(excluded.pos)+random()-0.5, ST_Y(excluded.pos)+random()-0.5), 4326), mod_time=excluded.mod_time  
where car.sites <> car.rest_sites or car.rest_sites is null;     -- 不能被叫的车辆不更新位置(例如他的座位满了)  
```  
(含空间索引)压测如下：  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 56 -j 56 -T 120  
progress: 4.0 s, 200614.4 tps, lat 0.279 ms stddev 0.357  
progress: 5.0 s, 202598.0 tps, lat 0.276 ms stddev 0.336  
progress: 6.0 s, 196562.4 tps, lat 0.285 ms stddev 0.785  
progress: 7.0 s, 200305.4 tps, lat 0.280 ms stddev 0.534  
progress: 8.0 s, 207505.2 tps, lat 0.270 ms stddev 0.270  
progress: 9.0 s, 204128.0 tps, lat 0.274 ms stddev 0.347  
```  
### 5、叫车，派单  
1、用户上报位置  
2、查询附近可用车辆(按gist索引顺序返回，同时过滤锁、SITES、距离等条件)  
3、采用空间部分索引  
拼车索引  
```  
create index idx_car_pos_1 on car using gist(pos) where rest_sites>0 or rest_sites is null;  
```  
不拼车索引  
```  
create index idx_car_pos_2 on car using gist(pos) where rest_sites=sites or rest_sites is null;  
```  
4、判断是否与之拼车的函数（输入参数为目的地，以及车上已有乘客目的地）  
这里除了使用距离作为过滤条件，还结合使用旋转门，如果目的地不在一个门内，并且距离大于多少就不拼车。还可以使用pgrouting这类插件，结合地图和图算法，根据成本来评判是否适合评车。  
[《旋转门数据压缩算法在PostgreSQL中的实现 - 流式压缩在物联网、监控、传感器等场景的应用》](../201608/20160813_01.md)    
http://pgrouting.org/  
```  
create or replace function f_isbulk(  
  i_pos geometry,      -- 目的地  
  i_poss geometry[]    -- 该车已有乘客目的地  
) returns boolean as $$  
declare  
  vspheroid spheroid := 'SPHEROID["WGS84",6378137,298.257223563]' ;  -- WGS84椭球体参数定义  
begin  
  -- 先使用最简单的算法，例如任意已有乘客目的地与当前请求目的地距离在2000米以内则返回TRUE，允许拼车  
  -- 测试时，建议把允许的拼车目的地距离调大一点，否则可能很难找到合适的车辆  
  -- perform 1 from unnest(i_poss) t(pos) where ST_DistanceSpheroid(i_pos, pos, vspheroid)  0                                   -- 剩余座位数大于0    
    and rest_sites >= i_sites or rest_sites is null)  -- 剩余座位数大于等于请求座位数    
    and (order_pos is null or f_isbulk(i_pos2, order_pos))    -- 目的地满足拼车要求  
    and pg_try_advisory_xact_lock(id)                         -- adlock，提高秒杀吞吐  
    order by i_pos1  pos for update limit 1;               -- 根据距离排序，以上条件满足，锁定1条即可  
  -- 如果车辆位置超出一定公里数(比如5公里)，直接返回，不生成订单  
  -- 测试时，建议把公里数调大，便于找到车辆  
  -- if not found or ST_DistanceSpheroid(i_pos1, v_pos, vspheroid) > 5000 then  
  if not found or ST_DistanceSpheroid(i_pos1, v_pos, vspheroid) > 500000000 then  
    -- raise notice 'no car near your pos, the car leave you % meters', ST_DistanceSpheroid(i_pos1, v_pos, vspheroid);  
    return -1;  
  end if;  
  -- 更新车辆状态  
  update car set   
    rest_sites=coalesce(rest_sites-i_sites, sites-i_sites),         -- 减少剩余座位  
    order_pos=coalesce(order_pos||i_pos2, array[i_pos2])            -- 将目的地追加到车辆所有目的地中  
    where ctid=v_car_ctid    
    and coalesce(rest_sites-i_sites, sites-i_sites) >= 0  
    returning id into v_carid;         -- 返回车辆ID  
  if found then  
  -- 生成订单  
  insert into orders (carid, uid, crt_time, pos1, pos2, sites, status)   
    values(v_carid, i_uid, now(), i_pos1, i_pos2, i_sites, 2)   -- 状态为进行中  
    returning id into v_orderid;  -- 返回订单号  
  else  
    return -2;  
  end if;  
  return v_orderid;  
end;  
$$ language plpgsql strict;  
```  
2018-04-16优化   
```
create index idx_car_pos_pc_1 on car using gist(pos) where rest_sites=1;  