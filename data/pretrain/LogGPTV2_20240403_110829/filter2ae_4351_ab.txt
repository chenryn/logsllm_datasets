    warning: 'kernel' contains a debug script. To run this script in this debug session:
    command script import "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/DWARF/../Python/kernel.py"
    To run all discovered debug scripts in this session:
        settings set target.load-script-from-symbol-file true
    Current executable set to '/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development' (x86_64).
正如您所看到的，LLDB指出“kernel”中含有一个调试脚本。在当前打开的LLDB窗口中，执行settings set target.load-script-from-symbol-file true命令，以运行该脚本。
    Last login: Sun Dec  2 10:37:51 on ttys000
    MacBook-Pro-van-Mac:~ mac$ xcrun lldb /Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development
    (lldb) target create "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development"
    warning: 'kernel' contains a debug script. To run this script in this debug session:
    command script import "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/DWARF/../Python/kernel.py"
    To run all discovered debug scripts in this session:
        settings set target.load-script-from-symbol-file true
    Current executable set to '/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development' (x86_64).
    (lldb) settings set target.load-script-from-symbol-file true
    Loading kernel debugging from /Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/DWARF/../Python/kernel.py
    LLDB version lldb-360.1.70
    settings set target.process.python-os-plugin-path "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/DWARF/../Python/lldbmacros/core/operating_system.py"
    settings set target.trap-handler-names hndl_allintrs hndl_alltraps trap_from_kernel hndl_double_fault hndl_machine_check _fleh_prefabt _ExceptionVectorsBase _ExceptionVectorsTable _fleh_undef _fleh_dataabt _fleh_irq _fleh_decirq _fleh_fiq_generic _fleh_dec
    command script import "/Library/Developer/KDKs/KDK_10.13.6_17G65.kdk/System/Library/Kernels/kernel.development.dSYM/Contents/Resources/DWARF/../Python/lldbmacros/xnu.py"
    xnu debug macros loaded successfully. Run showlldbtypesummaries to enable type summaries.
    settings set target.process.optimization-warnings false
    (lldb)
现在，我们终于可以通过kdp-remote
localhost命令将LLDB连接到实时内核了。如果一切顺利的话，连接内核成功后，将看到如下所示的输出。刚开始的时候，LLDB窗口会冒出大量的文本，然后，它会停下来。
    (lldb) kdp-remote localhost
    Version: Darwin Kernel Version 17.7.0: Wed Oct 10 23:06:14 PDT 2018; root:xnu-4570.71.13~1/DEVELOPMENT_X86_64; UUID=1718D865-98B4-3F6E-97CF-42BF0D02ADD7; stext=0xffffff802e800000
    Kernel UUID: 1718D865-98B4-3F6E-97CF-42BF0D02ADD7
    Load Address: 0xffffff802e800000
    Kernel slid 0x2e600000 in memory.
    Loaded kernel file /Library/Developer/KDKs/KDK_10.13.6_17G3025.kdk/System/Library/Kernels/kernel.development
    Loading 152 kext modules warning: Can't find binary/dSYM for com.apple.kec.Libm (BC3F7DA4-03EA-30F7-B44A-62C249D51C10)
    .warning: Can't find binary/dSYM for com.apple.kec.corecrypto (B081B8C1-1DFF-342F-8DF2-C3AA925ECA3A)
    .warning: Can't find binary/dSYM for com.apple.kec.pthread (E64F7A49-CBF0-3251-9F02-3655E3B3DD31)
    .warning: Can't find binary/dSYM for com.apple.iokit.IOACPIFamily (95DA39BB-7C39-3742-A2E5-86C555E21D67)
    [...]
    .Target arch: x86_64
    .. done.
    Target arch: x86_64
    Instantiating threads completely from saved state in memory.
    Process 1 stopped
    * thread #2: tid = 0x0066, 0xffffff802e97a8d3 kernel.development`DebuggerWithContext [inlined] current_cpu_datap at cpu_data.h:401, name = '0xffffff80486a2338', queue = '0x0', stop reason = signal SIGSTOP
        frame #0: 0xffffff802e97a8d3 kernel.development`DebuggerWithContext [inlined] current_cpu_datap at cpu_data.h:401 [opt]
现在我们已经连接到了实时内核。您可以看到，该进程已终止，这意味着内核已冻结，这就是上面看到停止涌出文本的原因，但现在调试器已附加好了，所以，我们就可以让引导过程安全地继续进行，以进入正常的MacOS桌面。为此，我们只需为该进程进行解冻：键入“C”键使其继续，然后按Enter键，直到启动过程继续进行（这时，调试对象屏幕上会显示更多文本）为止。
    (lldb) c
    Process 1 resuming
    Process 1 stopped
    * thread #2: tid = 0x0066, 0xffffff802e97a8d3 kernel.development`DebuggerWithContext [inlined] current_cpu_datap at cpu_data.h:401, name = '0xffffff80486a2338', queue = '0x0', stop reason = EXC_BREAKPOINT (code=3, subcode=0x0)
        frame #0: 0xffffff802e97a8d3 kernel.development`DebuggerWithContext [inlined] current_cpu_datap at cpu_data.h:401 [opt]
    (lldb) c
一旦调试器所在系统引导进入MacOS，我们就会进入桌面，这时我们就可以开始我们的调试了。若要运行调试器命令，我们必须再次触发NMI，为此，需按一次电源按钮。之后，调试对象屏幕将冻结，但调试器机器的LLDB屏幕将处于活动状态，这样，我们可以就可以对实时内核执行读/写寄存器、读/写内存、反汇编函数等操作了。为了重新解冻，需要再次键入“C”，然后，在LLDB屏幕上按住Enter键即可。
**内核调试实例**
* * *
**示例1：使用LLDB读取所有寄存器的值，并将“AAAAAAA”写入其中一个寄存器中。**
* * *
要读取所有寄存器，需按下电源按钮以触发NMI，并在打开的LLDB窗口中键入register read --all命令。
    (lldb) register read --all
    General Purpose Registers:
          rax = 0xffffff802f40ba40  kernel.development`processor_master
          rbx = 0x0000000000000000
          rcx = 0xffffff802f40ba40  kernel.development`processor_master
          rdx = 0x0000000000000000
          rdi = 0x0000000000000004
          rsi = 0xffffff7fb1483ff4
          rbp = 0xffffff817e8ccd50
          rsp = 0xffffff817e8ccd10
           r8 = 0x0000000000000000
           r9 = 0x0000000000000001
          r10 = 0x00000000000004d1
          r11 = 0x00000000000004d0
          r12 = 0x0000000000000000
          r13 = 0x0000000000000000
          r14 = 0x0000000000000000
          r15 = 0xffffff7fb1483ff4
          rip = 0xffffff802e97a8d3  kernel.development`DebuggerWithContext + 403 [inlined] current_cpu_datap at cpu.c:220
     kernel.development`DebuggerWithContext + 403 [inlined] current_processor at debug.c:463
     kernel.development`DebuggerWithContext + 403 [inlined] DebuggerTrapWithState + 46 at debug.c:537
     kernel.development`DebuggerWithContext + 357 at debug.c:537
       rflags = 0x0000000000000046
           cs = 0x0000000000000008
           fs = 0x0000000000000000
           gs = 0x0000000000000000
    Floating Point Registers:
          fcw = 0x0000
          fsw = 0x0000
          ftw = 0x00
          fop = 0x0000
           ip = 0x00000000
           cs = 0x0000
           dp = 0x00000000
           ds = 0x0000
        mxcsr = 0x00000000
     mxcsrmask = 0x00000000
        stmm0 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm1 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm2 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm3 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm4 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm5 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm6 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        stmm7 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm0 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm1 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm2 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm3 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm4 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm5 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm6 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm7 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm8 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
         xmm9 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm10 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm11 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm12 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm13 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm14 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
        xmm15 = {0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00}
    Exception State Registers:
    3 registers were unavailable.
    (lldb)
现在，让我们对其中一个寄存器执行写操作。注意，不要向其值为0x000000000000000000的寄存器中写入内容，因为这会覆盖某些有用的内容。所以，我们需要找一个空的寄存器来练手。在我的机器上面，R13寄存器为空(R13=0x0000000000000000000000），因此，我可以向其中写入某些内容。为了将AAAS字符串写入寄存器，我可以将其值替换为0x414141414141414141，其中0x41是ASCII字符“A”的十六进制形式。要想覆盖寄存器，可以使用命令register
write r13 0x4141414141414141。现在，如果我们再次读取寄存器的内容，就会发现其中的变化情况：
    (lldb) register write R13 0x4141414141414141
    (lldb) register read --all