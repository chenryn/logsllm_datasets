·输出文件。我们将添加一个选项，以便指定一个文件名，来包含程序的输出结果。选项格
式要么是-ffile，要么是--filefile
·交互模式。这个选项将提示用户输人一个输出文件名，然后判断指定的文件是否已经存
在了。如果文件存在，在覆盖这个存在的文件之前会提示用户。这个选项可以通过-i或
者--interactive来指定。
·帮助。指定-h选项或者是--help选项，可导致程序输出提示性的使用信息。
这里是处理命令行选项所需的代码：
445
---
## Page 447
usage (){
echo *$PROGNAME: usage: SPROGKAME [-f file I -1] *
return
# process conmand line options
interactives
filenazea
vhile [[ -n $1 ]]; do
case $1 in
-f 1 --file)
shift
filenane=$1
-i | --interactive)
interactive=1
-h 1 --help)
usage
exit
*)
usage >k2
exit 1
esac
shift
done
首先，我们添加了一个叫做usage的shell函数，以便显示帮助信息，当启用帮助选项或敲
写了一个未知选项的时候。
下一步，我们开始处理循环。当位置参数$1不为空的时候，这个循环会持续运行。在循环
的底部，有一个shift命令，用来提升位置参数，以便确保该循环最终会终止。在循环体内，我
们使用了一个case语句来检查当前位置参数的值，看看它是否匹配某个支持的选项。若找到了
匹配项，就会执行与之对应的代码。若没有，就会打印出程序使用信息，该脚本终止且执行错
误。
处理-f参数的方式很有意思。当监测到-f参数的时候，会执行一次shift命令，从而提升
位置参数S1为伴随看-f选项的filename参数°
我们下一步添加代码来实现交互模式：
446
---
## Page 448
# interactive mode
if [[ -n $interactive ]]; then
vhile true; do
if [[ -e $filenane ]]; then
read -p "*$filenane′exists. Overurite?[y/n/q] > *
case $REPLY in
Y|y)
break
Q1q)
exit
*)
continue
esac
elif [[ -z $filenane ]]; then
continue
else
break
fi
done
fi
若interactive变量不为空，就会启动一个无休止的循环，该循环包含文件名提示和随后存
在的文件处理代码。如果所需要的输出文件已经存在，则提示用户覆盖，选择另一个文件名
或者退出程序。如果用户选择覆盖一个已经存在的文件，则会执行break命令终止循环。注意
case语句是怎样只检测用户选择了覆盖还是退出选项。其它任何选择都会导致循环继续并提示
用户再次选择。
为了实现这个输出文件名的功能，首先我们必须把现有的这个写页面（page-writing）的代
码转变成一个shell函数，一会儿就会明白这样做的原因：
vrite_htnl_page () {
cat 
$TITLE
447
---
## Page 449
$TITLE
$TIMESTAMP
$(report_uptine)
$(report_disk_space)
$(report_home_space)
_E0F.
return
s3ed tusg 4ndno #
if [[ -n $filename ]]; then
if touch $filename &k [[ -f $filenane ]]; then
urite_html_page > $filename
else
echo "$PROGNAME: Cannot vrite file*$filenane'" >k2
exit 1
fi
else
urite_htnl_page
fi
解决-f选项逻辑的代码出现在以上程序片段的末尾。在这段代码中，我们测试一个文件名
是否存在，若文件名存在，则执行另一个测试看看该文件是不是可写文件。为此，会运行touch
命令，紧随其后执行一个测试，来决定touch命令创建的文件是否是个普通文件。这两个测试
考虑到了输入是无效路径名（touch命令执行失败），和一个普通文件已经存在的情况。
正如我们所看到的，程序调用write_html_page函数来生成实际的网页。函数输出要么直
接定向到标准输出（若filename变量为空的话）要么重定向到具体的文件中。
33.4总结
伴随着位置参数的加入，现在我们能编写相当具有功能性的脚本。例如，重复性的任务，位置
参数使得我们可以编写非常有用的，可以放置在一个用户的.bashrc文件中的shell函数。
我们的sys_info_page程序日渐精进。这里是一个完整的程序清单，最新的更改用高亮显
示：
448
---
## Page 450
#!/bin/bash
# sys_info_page: program to output a systen infornation page
PROGNAME=$(basenane $0)
TITLE="Systen Infornation Report For $HOSTNAME*
CURRENT_TIME=$(date +*%x %z %Z")
TIMESTAMP="Generated $CURRENT_TIME, by $USER"
report_uptine () {
cat Systen Uptime
$(uptine) 
_EOF
return
J
report_disk_space () {
cat Disk Space Utilization
$(df -h)
_E0F_
return
report_home_space () {
if [[ $(id -u) -eq 0 ]]; then
cat Hone Space Utilization (A11 Users)
$(du =sh /hone/*)
_EOF
els0
cat Hone Space Utilization ($USER)
$(du =sh $HOME)
_EOF
fi
return
usage (){
echo "$PROGNAME: usage: $PROGNAME [f file I -i]*
return
vrite_htnl_page (){
449
---
## Page 451
cat 
$TITLE
$TITLE
$TIMESTAMP
(outqdn°sxodox)$
$(report_disk_space)
$(report_home_space)
_EOF
return
# process conmand line options
interactive=
filename=
vhile [[ -n $1 1]; do
case $1 in
-f 1 --file)
shift
filenane=$1
interactive=1
1
-h 1 --help)
usage
exit
(*
usage >b2
exit 1
1
esac
shift
done
# interactive node
if [[ -n $interactive ]]; then
vhile true; do
read -p “Enter nane of output file: " filenane
if [[ -e $filenane ]]; then
450
---
## Page 452
. $filename
else
exit 1
fi
α1s0
urite_htnl_page
f1
我们还没有完成。仍然还有许多事情我们可以做，可以改进。
33.5拓展阅读
·BashHackersWiki上有一篇不错的关于位置参数的文章：
http://wiki.bash-hackers.org/scripting/posparams
·Bash的参考手册有一篇关于特殊参数的文章，包括S*和S@：
http:/www.gnu.org/software/bash/manual/bashref.htmlfSpecial-Parameters
·除了本章讨论的技术之外，bash还包含一个叫做getopts 的内部命令，此命令也可以用
命令，Bash HackersWiki上也有对它的描述：
451
---
## Page 453
http://wiki.bash-hackers.org/howto/getopts_tutorial
452
---
## Page 454
34
流程控制：for 循环
在这关于流程控制的最后一章中，我们将看看另一种shell循环构造。for循环不同于while和
脚本中，for循环是非常流行的构造。
实现一个for循环，很自然的，要用for命令。在现代版的bash中，有两种可用的for循
环格式。
34.1for:传统shell格式
for命令语法是：
for variable [in vords] ; do
cosmands
done
这里的variable是一个变量的名字，这个变量在循环执行期间会增加，words是一个可选的
条目列表，其值会按顺序赋值给variable，commands是在每次循环选代中要执行的命令
[ne@linuxbox -]$ for i in A B C D; do echo $i; done
B
C
在这个例子中，for循环有一个四个单词的列表：“A”、“B”、“C”和“D”。由于这四个单
词的列表，for循环会执行四次。每次循环执行的时候，就会有一个单词赋值给变量1。在循环
453
---
## Page 455
体内，我们有一个echo命令会显示i变量的值，来演示赋值结果。正如while和until循环，
done关键字会关闭循环。
for命令真正强大的功能是我们可以通过许多有趣的方式创建words列表。例如，通过花括
号展开：