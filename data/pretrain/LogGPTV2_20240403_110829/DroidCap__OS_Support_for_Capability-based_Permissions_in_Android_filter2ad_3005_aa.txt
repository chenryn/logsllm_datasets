**Title: DroidCap: OS Support for Capability-based Permissions in Android**

**Authors:**
- Abdallah Dawoud
- Sven Bugiel

**Affiliation:**
CISPA Helmholtz Center for Information Security

**Contact:**
- Abdallah Dawoud: abdallah.dawoud@cispa.saarland
- Sven Bugiel: bugiel@cispa.saarland

**Abstract:**
We present DROIDCAP, a retrofit of Android's central Binder IPC mechanism that transforms the representation and management of permissions within the system. In DROIDCAP, permissions are represented as per-process Binder object-capabilities. This design eliminates Android’s UID-based ambient authority and enables efficient delegation of capabilities between processes to create least-privileged protection domains. We demonstrate that object-capabilities can be seamlessly and backward-compatibly integrated into Android’s existing permission model and application management. Consequently, DROIDCAP provides app developers with a new approach to gradually adopt app compartmentalization, as illustrated through two prominent examples from the literature: privilege-separated advertisement libraries and least-privileged app components.

**I. Introduction**
Android, like other mobile platforms, employs an access control model where applications (apps) must request privileges—referred to as permissions in Android terminology—to access user data and system resources. Once granted, these permissions are assigned to app sandboxes, defined by each app’s UID in the system. The permissions associated with the UID of each process constrain its access to (system) services, other apps, or file-system objects.

This design, which attributes permissions to app sandboxes at the UID level, combines characteristics of capability-based access control systems (where the attributes of the subject, rather than its identity, matter) with list-based access control models (where the UID forms an ambient authority for all processes executing under it). The existence of an ambient authority on Android has been problematic for user privacy, especially when app developers mix app code with non-trustworthy code from other sources, such as advertisement libraries, which have repeatedly exhibited privacy-intrusive behavior [25], [12], [21], [62], [61]. These libraries inherit all privileges from their host app’s UID, leading to potential privacy violations.

Furthermore, permissions enforced by the Linux kernel through Linux GIDs, such as internet or Bluetooth access [6], are statically assigned at app install-time to the app UID, making them difficult to manage flexibly, particularly for delegation or revocation. We argue that this combination of characteristics, which retains an ambient authority, generally impedes efficient privilege separation on Android and makes it unnecessarily challenging for developers to create new, least-privileged protection domains and adopt app compartmentalization best practices. For example, every component of an app inherits its app’s full permission set, and prior works on privilege separation [52], [59], [71], [29], [18] necessarily have to set up new UIDs with separate permissions.

While some works refine the authority, such as SEAndroid’s type enforcement [60], information flow control solutions [45], [46], [70], and app virtualization [9], [11], the current state is insufficient for efficiently enabling privilege separation and providing developers with a path for least-privilege code compartmentalization, as commonly adopted by security-critical apps [54], [35]. Per-process privileges alone are not sufficient; efficient creation of new protection domains through delegation and revocation of privileges is key and currently not well-supported (see also Section VI).

In this paper, we propose object-capabilities as a way to achieve per-process permissions along with efficient delegation of privileges between processes. Drawing from past and current experiences with object-capability systems, we shift Android’s permission model closer to an object-capability system. Capability-based access control has a long history [19], [23], [68], [37], [38], [49] and has found use in high-assurance and distributed systems such as EROS [58], IBM System/38 [28], iMAX 432 [33], CAP [48], and Amoeba [43]. Recently, it has been proposed for modern end-user systems, including UNIX/Linux [65], [20], hybrid systems like CHERI [66], and new microkernel-based systems like Google’s Fuchsia [24]. Our solution adds to these recent developments.

We show that an object-capability system not only fits well with Android’s system model and realizes permissions but also supports app developers in adopting privilege separation and fine-grained, dynamic permission management for least-privilege operation on Android more efficiently.

At the heart of our paradigm shift for representing permissions in Android is an extension to Android’s Binder IPC mechanism. Binder IPC is the primary IPC channel for communication among all apps and between system services and apps. Binder allows processes to hold kernel-managed references (or handles) to remote processes that they can call via Binder IPC. The fundamental idea of our solution, called DROIDCAP, is to extend these Binder references to reflect the privileges against the remote process—a form of "extended Binder attributes" akin to the concept of "extended file attributes." Since Binder references are process-specific, just like file handles, every reference forms a unique, kernel-managed "token" that associates a caller process with a remote process and the caller’s privileges for that particular remote process.

By default, Android allows free delegation of Binder references between processes via the Binder kernel module. We augment this vanilla delegation with 1) policies that govern how processes can delegate references to other processes to prevent leakage of privileges, and 2) management functionality to support delegation of subsets of permissions and efficient revocation of permissions from a (delegated) Binder reference. We integrate our Binder-based capabilities into Android’s app lifecycle management, permission management, and permission enforcement (e.g., within Android’s system services). As a result, in DROIDCAP, permission enforcement relies entirely on the Binder references (or tokens) a calling process holds instead of the caller’s UID (i.e., no UID-based ambient authority). We also have a clear permission delegation hierarchy between system and app processes that reflects the stock permission granting on Android but allows efficient (re-)delegation of permissions between processes to create new protection domains (i.e., new processes with delegated permissions).

To address permissions enforced through Linux’ GIDs facility, we explain the integration of Capsicum for Linux [20] into DROIDCAP to represent file-system-related permissions as Capsicum capabilities for file-handles. We discuss the peculiarities of Android’s Zygote that had to be overcome to put app processes into Capsicum’s capability mode.

As a result, DROIDCAP occupies a previously unexplored niche in Android security extensions: By blending permissions with Binder capabilities, we enable efficient least-privilege operation of processes while preserving existing Android APIs and the application model. This backward compatibility presents developers with a path for gradually adopting capability-oriented permissions and decomposing apps into components that form a logical app but run with individual rights. We demonstrate these benefits at the concrete examples of retrofitting an open-source messaging app, called Kontalk. Evaluation of our solution shows minimal performance impact compared to vanilla Android and full backward compatibility with legacy apps.

**II. Background: Android OS**
Android OS uses a modified Linux kernel that supports an efficient Inter-Process Communication (IPC) mechanism called Binder. Binder is the primary channel for inter-app communication and interaction with (system) services (see Section IV for an in-depth discussion on the Binder framework). On top of the kernel, Android’s application framework manages a wide range of system services and facilitates data sharing across apps. The system services enrich apps with various features, such as retrieving GPS location and capturing photos. Pre-installed system apps extend these features with APIs, for example, making phone calls and managing Contacts.

**Figure 1: Android’s Default Security Architecture**

Users can further extend their devices’ functionality with third-party apps. For this work, the most relevant system services are:
- **ActivityManagerService (AMS):** Controls the app’s lifecycle.
- **PackageManagerService (PMS):** Maintains app metadata, including privileges.
- **LocationManagerService (LMS):** Provides access to the device’s GPS information.

All apps, including system apps, are composed of four basic components:
1. **Activities:** Interfaces that manage user interactions.
2. **Services:** Execute long-running operations and can be bound to and invoked by other apps.
3. **Content Providers:** Manage access to data repositories stored in apps.
4. **Broadcast Receivers:** Receive and handle broadcast messages from the system and other apps.

**Android’s Security Model**
Android’s security architecture is depicted in Figure 1. In Android, all apps and system services/apps are sandboxed. Each app runs in its (set of) processes and has a private data directory. This sandbox is defined by the app’s Linux UID, which is assigned at app install-time. The app’s processes execute under this UID, and Linux discretionary access control ensures the protection of the private directory. Android applies the principle of least-privilege per app sandbox. Thus, to access resources outside their sandbox, apps must request and be granted the necessary privileges (permissions).

A handful of permissions protect system resources that the app processes can directly access with syscalls, such as Internet and Bluetooth sockets. These permissions are enforced by the Linux kernel using GIDs, i.e., the UID of an app holding, for instance, the Internet permission, is assigned at install-time to a Linux GID [6] that has the rights to create/read/write Internet sockets. The majority of permissions—more than 100 for Android Oreo [2]—are enforced by the system services and apps (see the top-right corner of Figure 1). Android applies privilege separation between third-party apps and system apps/services, where access to certain system resources, e.g., the radio interface layer daemon (rild), is only allowed to specific system services, like the TelephonyService. These services, in turn, expose Binder IPC-callable methods to apps as part of the application framework API. Thus, apps that want to use these managed system resources, e.g., initiating a phone call, must make an RPC via Binder to the service API, which then checks if the calling app is privileged enough to request the service and, if so, executes on the calling app’s behalf (i.e., an intentional deputy).

The cornerstone of this enforcement is Binder IPC, which provides the callee with the UID and PID of the caller. The called service can then consult the PMS to determine if the calling UID has the required permission.

**Mandatory Access Control:**
Android’s domain isolation and privilege separation have been reinforced with SELinux type enforcement [60], a realization of mandatory access control. With type enforcement, all subjects (e.g., processes) and objects (e.g., files) are labeled with a security type, and the allowed interactions between types are defined in a set of policy rules. On Android, all app and system service processes execute in distinct domains defined by an assigned security type, reinforcing Android’s sandboxing and least-privilege principles and hardening the system against exploits. Unlike permissions, which are directly exposed to app developers (who must request them in the app’s manifest file) and end users (who must approve the permission requests by apps), type enforcement is not directly exposed to developers or users. The SELinux policies are usually static and can only be managed through administrative intervention.

**Isolated Process:**
Starting from Android v4.1, app developers are provided with limited support for privilege separation via isolated processes [1]. Isolated processes are Service components that run under a separate, transient Linux UID that differs from any existing UID and has a separate SELinux type. Hence, this service has no access to the app’s private data directory, does not hold any permissions, and cannot access any resources on the file system. Middleware services refuse serving RPCs from an isolated process due to the absence of permissions. To allow the host app to communicate with its isolated process, the app can bind to the isolated process service component to invoke the service’s operations. Isolated processes provide an all-or-nothing privilege separation, i.e., there are no means to fine-tune the privileges of an isolated process or to grant additional privileges after running it.

**Permission Delegation:**
Android supports simple forms of delegating permissions between apps. First, URI permissions: Data entries in Content Providers are addressed using URIs (e.g., `content://com.android.contacts` for data in the Contacts app), and access to individual entries can be granted on a per-URI basis. Second, Pending Intents: Intents are the most abstract form of inter-app and intra-app communication. A Pending Intent is a pre-populated Intent object that can be passed to another app, similar to a token. An app holding a Pending Intent can populate the remaining attributes of that Intent (e.g., payload, receiver) and then send it. The Intent will be sent with the permissions of its creator app, effectively allowing apps to temporarily delegate their permissions in a controlled way to other apps via Intents.

**III. Related Work and Motivation**
We present selected works that extended Android’s security policy and provide an overview of systems using object-capabilities. We then relate these concepts to Android’s current permission enforcement to motivate the design of DROIDCAP.

**A. Android Security Extensions**
Over the last decade, a variety of security solutions for Android have been proposed [7], including retrofits of Android’s permission system and app compartmentalization.

**Retrofitting Android’s Permissions:**
Research has early on investigated Android’s permissions and inter-app communication [22], and several extensions or retrofits of the stock permission system have been proposed. For instance, Apex [47], Saint [51], CRePE [17], TISSA [72], and Porscha [50] extend permission enforcement with more fine-grained, dynamic, or context-sensitive permissions to enhance privacy protection, DRM, or developer-centric permissions. TrustDroid [14] and XManDroid [13] establish security domains that are isolated from each other within the system services/apps and the file system.

**Information Flow Control:**
A few works have added information flow control (IFC) to Android, which we also discuss in Section VI. Aquifer [46] allows app developers to define secrecy restrictions that protect shared data along user interface flows across apps and uses a custom IFC mechanism.