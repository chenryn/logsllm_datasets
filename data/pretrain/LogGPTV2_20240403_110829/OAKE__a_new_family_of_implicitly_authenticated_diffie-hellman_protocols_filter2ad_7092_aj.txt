forger F). Note that in the security analysis of Theorem G.1, we heavily relied on the fact that we
know the private key of any uncorrupted player other than the signer itself.
We modify the algorithm C depicted in Figure 3 as follows: the actions of C remain unchanged
until the rewinding experiments; C performs the rewinding experiments according to the order of the
RO-queries c0; d0; e0.
d0 posterior to c0; e0. In this case, by rewinding F to the point of making the query d0 = h(m0; ˆB; B; X0),
0, C will get (cid:27)
′
and redeﬁnes h(m0; ˆB; B; X0) to be a new independent d
. Then,
−1. Note that, in this case, C does not
′
0)(d0−d
′
0)
from (cid:27)0 and (cid:27)
rely on the KEA assumption for breaking the CDH assumption (but still with the DDH-oracle).
0, C gets that CDH(B; X0) = ((cid:27)=(cid:27)
′
′
0 = Bc0y0X d
′
0b+e0y0
0
c0 posterior to d0; e0. In this case, by rewinding F to the point of making the query c0 = h(m1; ˆB; B; Y0),
0, C will get (cid:27)
′
and redeﬁnes h(m1; ˆB; B; Y0) to be a new independent c
. Then,
−1. That is, given B, C can output
′
0)(c0−c
from (cid:27)0 and (cid:27)
(Y0; By0). By the KEA assumption, it implies that F knows y0 (which can be derived from the
internal state of F). More formally, there exists an algorithm that, given B and X0 and the ran-
dom coins of C and F can successfully output y0. Now, with the knowledge of y0, CDH(B; X0)
can be derived from (cid:27)0 (or (cid:27)
0, C gets CDH(B; Y0) = By0 = ((cid:27)=(cid:27)
′
′
0y0X d0b+e0y0
′
0 = Bc
′
0)
0
′
0).
29
e0 posterior to c0; d0. In this case, by rewinding F to the point of making the query e0 = h(X0; Y0),
and redeﬁnes h(X0; Y0) to be a new independent e
. Then, from
−1. Then, by the KEA assumption, the
(cid:27)0 and (cid:27)
knowledge of y0 can be derived, with which CDH(X0; B) can then be computed from either (cid:27)0
or (cid:27)
0, C gets CDH(X0; Y0) = X y0
′
0, C will get (cid:27)
′
′
0)(e0−e
′
0 = Bc0y0X d0b+e
0 = ((cid:27)=(cid:27)
′
0y0
′
0)
0
′
0.
The analysis of sOAKE-HDR in this case is simpler. By redeﬁning h(m1; m0; ˆB; B; ˆB; B; X0; X0) to
0), C can
′
−1. Then, by the KEA assumption, the knowledge of y0 can be
(cid:3)
be a random value e
output CDH(X0; Y0) = ((cid:27)=(cid:27)
derived, with which CDH(X0; B) can then be computed from either (cid:27)0 or (cid:27)
̸= e0, C will gets (cid:27)
, where c0 = d0 = 1. From ((cid:27)0; (cid:27)
′
0 = Bc0y0X d0b+e
0)(e0−e
′
′
0y0
′
0)
′
0
0
′
0.
G.1.2 Analysis Extension and Adaptation to rOAKE-HDR
In this section, we show how the analysis of (s)OAKE-HDR signatures presented in Section G.1.1 can be
extended and adapted to that of rOAKE-HDR without relying on the non-standard KEA assumption.
In the following security analysis, we assume only the values (y; Y ) (resp., (x; X)) can be exposed for
the security of ˆB (resp., ˆA). Accordingly, in the forgery game of HDR signature described in Figure 2,
only the values (y; Y ) are exposed to the attacker against the signer ˆB (and the value Zcy is removed
throughout the forgery game in Figure 2). Note that, for rOAKE, the values Ab+yc and Ba+xd can still
be oﬄine pre-computed. But, for the security of rOAKE in the CK-framework, these pre-computed
values should be well-protected and should not be exposed to attacker. This is contrary to (s)OAKE,
where all the pre-computed values (y; Y; Acy) can be exposed.
Corollary G.3 Under the GDH assumption, (public-key free) rOAKE-HDR signatures of ˆB, with ex-
posed (y; Y ), are strongly secure in the random oracle model, with respect to any uncorrupted player
other than the signer ˆB itself.
b. This is also the reason that we assume only the values (y; Y ) can be exposed.
Proof. The proof follows the same outline of that of Theorem G.1. Here, we mainly highlight the key
diﬀerences between them.
In Step S.1 the challenger C couldn’t provide the value Zbf +cy, as it does not know ˆB’s secret-key
In Step S.3 and RO queries, the challenger C checks that (cid:27) = Zb+cyX bd+ye by checking whether
, where Y0 = gy0 is chosen by F, c0 = h(m1; ˆA; A; Y0),
In steps F1-F3, denote (cid:27)0 = Ab+y0c0X bd0+y0e0
CDH(X dZ; B) = ((cid:27)=ZcyX ye) via the DDH oracle.
0
d0 = h(m0; ˆB; B; X0) and e0 = h(X0; Y0).
For Case C1 in the repeat experiment (i.e, d0 posterior to e0), suppose (cid:27)
0 = h(m0; ˆB; B; X0) ̸= d0, e0 = h(X0; Y0), and ˆA
′
′
′
′
1; ˆA
; A
′
; Y0), d
′
where c
0 = h(m
player that is diﬀerent from ˆB and A
players except ˆB are set by C and both ˆA and ˆA
′
denoted a and a
0)](d0−d
′
CDH(X0; B) = [((cid:27)0=(Y c0
0 B)a)=((cid:27)
′
0 B)a
0
′
0=Y c
′
′
respectively, are known to C. Then, from ((cid:27)0; (cid:27)
′
0 = A
,
is another uncorrupted
is its public-key. Note that, as the secret-keys of all uncorrupted
′
are diﬀerent from ˆB, the secret-keys of ˆA and ˆA
,
), C can compute CDH(U; V ) =
′
0X bd
0
′b+y0c
′
′
0+y0e0
′
0; a; a
′
′
−1.
0)
0 = h(X0; Y0) ̸= e0. From (cid:27)0 and (cid:27)
′
0)](e0−e
′
′
0 = A
′b+y0c
′
0)
; A
′
′
1; ˆA
0 B)a)=((cid:27)
For Case C2 in the repeat experiment (i.e, e0 posterior to d0), suppose (cid:27)
; Y0), d0 = h(m0; ˆB; B; X0) and e
0, C can com-
′
′
0
c
0 = h(m
−1, and then CDH(U; V ) = CDH(X0; B) =
pute CDH(X0; Y0) = [((cid:27)0=(Y c0
(cid:3)
[(cid:27)0=((Y c0
0 B)aCDH(X0; Y0)e0)]d
The security analysis for the case of ˆA = ˆB and X0 = Y0 is just the same as that of Corollary G.1.
In this case, the challenger C sets secret-keys for all uncorrupted players (including, in particular, the
signer ˆB), and reduce the HDR forgery to the ability of computing CDH(X0; X0) (that is equal to the
ability of breaking the traditional CDH assumption). Here, as C knows the secret-key b of ˆB, C can
provide the pre-computed value Zb+cy to the attacker. We have the following corollary:
′
0 B)a
0
′
0=Y c
, where
−1