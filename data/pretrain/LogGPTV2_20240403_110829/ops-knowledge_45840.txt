User: 请分析一下基于TCP协议的WebSocket通信过程，并举例说明如何利用WebSocket实现游戏互动。
Assistant: 基于TCP协议的WebSocket通信过程：

1. Client发起WebSocket握手请求

在握手请求中包含了一些特殊的HTTP头部，如Upgrade、Connection和Sec-WebSocket-Key等，并且协议版本号为13。

2. Server回应WebSocket握手响应

在握手响应中也包含了特殊的HTTP头部，如Upgrade、Connection和Sec-WebSocket-Accept等，此时握手成功。

3. WebSocket通信

此时，WebSocket通信已建立，双方可以进行数据传输，数据格式为帧。每一帧由数据头和数据体组成，其中数据头包括opcode、mask、payload length、masking key等。

4. 关闭WebSocket通信

双方任意一方可以发送关闭帧来结束WebSocket通信。

利用WebSocket实现游戏互动的实例：

假设有一个实时对战的五子棋游戏，假设分为两个玩家，将两个玩家的棋盘状态实时同步：

1. Client发起WebSocket连接请求，连接到游戏服务器上。

2. Server回应WebSocket连接成功响应消息，通信建立成功。

3. 当玩家下棋时，Client向Server发送一条消息，告知其行棋位置。

4. Server接收到行棋消息后，将下棋位置同步到另一个玩家的棋盘上，并将当前游戏的棋盘状态发送给第一个玩家。

5. 棋盘状态变化后，两个玩家的Client接收到状态更新的消息，将状态更新到两个玩家的界面上。

6. 若有客户端关闭WebSocket连接，Server会进行相应的清理处理，如果有任意一方胜出，则可以根据游戏规则，将游戏结果同步给另一个玩家，关闭WebSocket连接，游戏结束。

通过WebSocket实现的游戏互动可以实现实时性更高的游戏交互，也更加简洁高效，避免了频繁的HTTP请求和响应。