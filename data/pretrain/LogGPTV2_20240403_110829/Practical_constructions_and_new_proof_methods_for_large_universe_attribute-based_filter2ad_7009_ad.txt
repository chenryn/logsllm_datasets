(cid:88)
i∈[n]
(cid:88)
i∈[n]
n(cid:88)
bi’s are information theoretically hidden from the attacker.
Using the above, B calculates:
−M∗
τ,kaksbτ /bτ
gM∗
˜λτ · (cid:89)
gsbτ(cid:17)−˜v · (cid:89)
−M∗
i∈[n]
g
j,kaksbτ /bj
gsbτ(cid:17)−˜v
τ,isai ·(cid:16)
τ,isai · (cid:89)
g
gM∗
i∈[n]
k∈[n]
j,kaksbτ /bj =
gsbτ(cid:17)−˜v · (cid:89)
(cid:16)
(cid:17)−tτ
j,k
(j,k)∈[(cid:96),n]
j(cid:54)=τ
gsakbτ /bj(cid:17)−M∗
(cid:16)
gsbτ(cid:17)−(˜uρ∗(τ )+˜h)
−sbτ
(cid:17)−(ρ∗(τ )−ρ∗(j))M∗
j,kak/b2
j
j,k
g(ρ∗(τ )−ρ∗(j))M∗
Cτ,1 = wλτ vtτ = w
g
j(cid:54)=τ
= w
= w
−M∗
(j,k)∈[(cid:96),n]
(j,k)∈[(cid:96),n]
· (cid:89)
˜λτ ·(cid:16)
· (cid:89)
˜λτ ·(cid:16)
(cid:16)
 (cid:89)
(cid:16)
gsbτ(cid:17)−(˜uρ∗(τ )+˜h)
(cid:16)
· (cid:89)
(cid:16)
gsbτ(cid:17)−1
uρ∗(τ )h
gsakbτ /b2
(j,k)∈[(cid:96),n]
(j,k)∈[(cid:96),n]
j(cid:54)=τ
=
=
·
j
Cτ,3 = gtτ =
Notice that by using tτ = −sbτ we “raised” the exponents
of the “binder” term v so that they cancel with the unknown
powers of wλτ . Therefore, the simulator hands over the
ciphertext ct = ((M∗, ρ∗), C, C0, {Cτ,1, Cτ,2, Cτ,3}τ∈[(cid:96)]) to
the attacker A.
. Otherwise, it outputs 1.
If T = e(g, g)saq+1
Guess: After the query phase 2, where the simulator
creates the secret keys as described above, the attacker out-
puts a guess b(cid:48) for the challenge bit.
If b(cid:48) = b the sim-
it claims that the challenge term is
ulator outputs 0, i.e.
T = e(g, g)saq+1
then A played the proper security
game, because C = mb · T · e(g, gs) ˜α = mb · e(g, g)αs. On the
other hand, if T is a random term of GT then all informa-
tion about the message mb is lost in the challenge ciphertext.
Therefore the advantage of A is exactly 0. As a result, if
A breaks the security game with a non negligible advan-
tage, B has a non negligible advantage in breaking the q-1
assumption.
5.
IMPLEMENTATION AND
EVALUATION
Implementation Details We implemented our schemes
in Charm [1]; a framework developed to facilitate the rapid
prototyping of cryptographic schemes and protocols. It is
based on the Python language which allows the program-
mer to write code similar to the theoretical implementa-
tions. However, the routines that implement the dominant
group operations use the PBC library [27] (written natively
in C) and the time overhead imposed by the use of Python is
469usually less than 1%. Charm also provides routines for ap-
plying and using LSSS schemes needed for Attribute-Based
systems.
All Charm routines use formally asymmetric groups (al-
though the underlining groups might be symmetric) and
therefore we translated our schemes to the asymmetric set-
ting. Namely, we have three groups G1, G2 and GT and
the pairing e is a function from G1 × G2 to GT . The as-
sumptions and the security proofs can be translated to the
asymmetric setting in a generic way. We notice here that we
tried to implement our algorithms so that more operations
are executed in the G1 group than in the G2 and that en-
cryption consists mainly of operations in G1, compared to
key generation. The reason is that the time taken to exe-
cute them in the G1 group is considerably smaller than G2
in speciﬁc asymmetric groups such as the “MNT224” elliptic
curve group. We tested the schemes on all ECC groups pro-
vided by Charm, i.e. three super-singular symmetric groups
and two MNT asymmetric groups [29].
For more information on Charm we refer the reader to [12,
1]. The source code of our implementations can be found
in [41]. All our benchmarks were executed on a dual core
Intel R(cid:13) Xeon R(cid:13) CPU PI:EMAIL with 2.0GB RAM
running Ubuntu R10.04 and Python3.2.3.
We implemented our two ABE schemes (of Sec. 4 and
App. C), the prime order KP-ABE construction from [22],
and the two basic3 constructions from [33]. Actually, in
[22] a large universe prime order HIBE is provided, but the
transformation to KP-ABE is straightforward by substitut-
ing in the key generation algorithm the additive shares of
the secrets with the LSSS shares and the identities with the
attributes ρ(τ ). This modiﬁed construction is the one we
used for comparison to our KP-ABE scheme.
Time Benchmarks
In Table 1 we present time bench-
marks in diﬀerent elliptic curve groups for some sample poli-
cies (≈ size 4 attributes).
Regarding the comparison between our schemes and prior
works, we notice the big gap between the timings of our
constructions and prior ones. This is due to the fact that
dual vector spaces of high dimension (≈ 10 - 14) are uti-
lized, which increase the number of group operations by big
factors. We remind the reader that the OT schemes are
fully secure, while our scchemes and the LW schemes are
selectively secure.
Regarding the practicality, in general, of both our schemes
we notice that the KeyGen, Encrypt, and Decrypt times of our
algorithms are relatively small. They are all under 100ms,
with the exception of the super singular 1024-bit curve.
Even for this curve the times for each algorithm are un-
der the 700 msec mark. Although one would expect that as
the policies and the attributes sets grow bigger these times
will increase, the additional overhead will grow only linearly.
Thus we believe that the two constructions constitute the
most practical implementations of large universe ABE, se-
cure in the standard model.
6. REFERENCES
[1] Joseph A. Akinyele, Matthew Green, and Avi Rubin.
Charm: A framework for rapidly prototyping
3Where each sub-universe can appear at most once in the
policy.
cryptosystems. Cryptology ePrint Archive, Report
2011/617, 2011. http://eprint.iacr.org/.
[2] Sattam S. Al-Riyami, John Malone-Lee, and Nigel P.
Smart. Escrow-free encryption supporting
cryptographic workﬂow. Int. J. Inf. Sec.,
5(4):217–229, 2006.
[3] Walid Bagga, Reﬁk Molva, and Stefano Crosta.
Policy-based encryption schemes from bilinear
pairings. In ASIACCS, page 368, 2006.
[4] Manuel Barbosa and Pooya Farshim. Secure
cryptographic workﬂow in the standard model. In
INDOCRYPT, pages 379–393, 2006.
[5] Amos Beimel. Secure Schemes for Secret Sharing and
Key Distribution. PhD thesis, Dept. of Computer
Science, Technion, 1996.
[6] John Bethencourt, Amit Sahai, and Brent Waters.
Ciphertext-policy attribute-based encryption. In IEEE
Symposium on Security and Privacy, pages 321–334,
2007.
[7] Dan Boneh and Xavier Boyen. Eﬃcient selective-id
secure identity-based encryption without random
oracles. In EUROCRYPT, pages 223–238, 2004.
[8] Dan Boneh and Matthew K. Franklin. Identity-based
encryption from the Weil pairing. In CRYPTO, pages
213–229, 2001.
[9] Dan Boneh, Craig Gentry, and Michael Hamburg.
Space-eﬃcient identity based encryption without
pairings. In FOCS, pages 647–657, 2007.
[10] Dan Boneh, Amit Sahai, and Brent Waters.
Functional encryption: Deﬁnitions and challenges. In
TCC, pages 253–273, 2011.
[11] Robert W. Bradshaw, Jason E. Holt, and Kent E.
Seamons. Concealing complex policies with hidden
credentials. In ACM Conference on Computer and
Communications Security, pages 146–157, 2004.
[12] Charm. http://www.charm-crypto.com.
[13] Melissa Chase. Multi-authority attribute based
encryption. In TCC, pages 515–534, 2007.
[14] Melissa Chase and Sherman S. M. Chow. Improving
privacy and security in multi-authority attribute-based
encryption. In ACM Conference on Computer and
Communications Security, pages 121–130, 2009.
[15] Ling Cheung and Calvin C. Newport. Provably secure
ciphertext policy ABE. In ACM Conference on
Computer and Communications Security, pages
456–465, 2007.
[16] Cliﬀord Cocks. An identity based encryption scheme
based on quadratic residues. In IMA Int. Conf., pages
360–363, 2001.
[17] David Mandell Freeman. Converting pairing-based
cryptosystems from composite-order groups to
prime-order groups. In EUROCRYPT, pages 44–61,
2010.
[18] Craig Gentry. Practical identity-based encryption
without random oracles. In EUROCRYPT, pages
445–464, 2006.
[19] Vipul Goyal, Abhishek Jain, Omkant Pandey, and
Amit Sahai. Bounded ciphertext policy attribute
based encryption. In ICALP (2), pages 579–591, 2008.
[20] Vipul Goyal, Omkant Pandey, Amit Sahai, and Brent
Waters. Attribute-based encryption for ﬁne-grained
470Curve
Type
“SS512”
“SS1024”
“MNT159”
“MNT201”
“MNT224”
KP-ABE
CP-ABE
KP-ABE
CP-ABE
KP-ABE
CP-ABE
KP-ABE
CP-ABE
KP-ABE
CP-ABE
Scheme
[App.C]
LW [22]
OT [33]
[Sec.4]
OT [33]
[App.C]
LW [22]
OT [33]
[Sec.4]
OT [33]
[App.C]
LW [22]
OT [33]
[Sec.4]
OT [33]
[App.C]
LW [22]
OT [33]
[Sec.4]
OT [33]
[App.C]
LW [22]
OT [33]
[Sec.4]
OT [33]
Setup
19.1
447.2
673.7
25.0
678.0
71.5
5553.3
7904.3
110.8
7898.9
21.1
692.2
930.7
23.5
929.9
28.4
929.8
1237.1
31.3
1235.1
34.2
1150.9
1514.9
37.9
1511.7
KeyGen