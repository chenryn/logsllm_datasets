title:Krace: Data Race Fuzzing for Kernel File Systems
author:Meng Xu and
Sanidhya Kashyap and
Hanqing Zhao and
Taesoo Kim
KRACE: Data Race Fuzzing for Kernel File Systems
Meng Xu Sanidhya Kashyap Hanqing Zhao Taesoo Kim
Georgia Institute of Technology
Abstract—Data races occur when two threads fail to use
proper synchronization when accessing shared data. In kernel file
systems, which are highly concurrent by design, data races are
common mistakes and often wreak havoc on the users, causing
inconsistent states or data losses. Prior fuzzing practices on file
systems have been effective in uncovering hundreds of bugs, but
they mostly focus on the sequential aspect of file system execution
and do not comprehensively explore the concurrency dimension
and hence, forgo the opportunity to catch data races.
In this paper, we bring coverage-guided fuzzing to the concur-
rency dimension with three new constructs: 1) a new coverage
tracking metric, alias coverage, specially designed to capture
the exploration progress in the concurrency dimension; 2) an
evolution algorithm for generating, mutating, and merging multi-
threaded syscall sequences as inputs for concurrency fuzzing;
and 3) a comprehensive lockset and happens-before modeling for
kernel synchronization primitives for precise data race detection.
These components are integrated into KRACE, an end-to-end
fuzzing framework that has discovered 23 data races in ext4,
btrfs, and the VFS layer so far, and 9 are confirmed to be harmful.
I. INTRODUCTION
In the current multi-core era, concurrency has been a major
thrust for performance improvements, especially for system
software. As is evident in kernel and file system evolutions [1–
4], a whole zoo of programming paradigms is introduced
to exploit multi-core computation, including but not limited
to asynchronous work queues, read-copy-update (RCU), and
optimistic locking such as sequence locks. However, alongside
performance improvements, concurrency bugs also find their
ways to the code base and have become particularly detrimental
to the reliability and security of file systems due to their
devastating effects such as deadlocks, kernel panics, data
inconsistencies, and privilege escalations [5–12].
In the broad spectrum of concurrency bugs, data races are
an important class in which two threads erroneously access
a shared memory location without proper synchronization
or ordering. Obstructed by the non-determinism in thread
interleavings, data races are notoriously difficult to detect and
diagnose, as they only show up in rare interleavings that require
precise timing to trigger. Even worse, unlike memory errors
that tend to crash the system immediately upon triggering, data
races do not usually raise visible signals in the short term and
are often identified retrospectively when analyzing assertion
failures or warnings in production logs [13].
As the state of the practice, file system developers often rely
on stress testing to find data races proactively [14, 15]. By
saturating a file system with intensive workloads, the chance
of triggering uncommon thread interleavings, and thus data
races, can be increased. However, while useful, stress testing
has significant shortcomings: handwritten test suites are far
from sufficient to cover the enormous state space in file system
execution, not to mention keeping up with the rapid increase
in file system size and complexity.
More recently, coverage-guided fuzzing has proven to be a
useful complement to handwritten test suites, with thousands of
vulnerabilities found in userspace programs [16–20]. Without
a doubt, kernel file systems can be fuzzed, and generic OS
fuzzers [21–23] have demonstrated their viability with over 200
bugs found. In addition, file system-specific fuzzers, Janus [5]
and Hydra [6], have extended the scope of file system fuzzing
from memory errors into a broad set of semantic bugs, while
the data race-specific fuzzer, Razzer [24], has shed lights on
data race detection by combining fuzzing and static analysis.
At the core of these fuzzers is the coverage measurement
scheme, which summarizes unique program behaviors triggered
by a given input in bitmaps. The fuzzer compares per-input
coverage against the accumulated coverage bitmaps to measure
the “novelty” of the input and determines whether it should
serve as the seed for future fuzzing rounds.
However, almost all existing coverage-guided fuzzers focus
on tracking the sequential aspect of program execution only
and fail to treat concurrency as a first-class citizen. To illustrate,
branch coverage (i.e., control flow transition between basic
blocks) has been the predominant coverage measurement metric.
But such a metric captures little information about thread
interleavings: different interleavings are likely to result in the
same branch coverage (Figure 2), while only a small fraction
may trigger a data race (Figure 3).
With the sequential view of program execution, existing
kernel fuzzers have been very effective in mutating and
synthesizing single-threaded syscall sequences based on seed
traces [25, 26] to maximize branch coverage. But no heuristics
have been proposed in synthesizing multi-threaded sequences
to maximize thread interleaving coverage. Last but not least,
given that data races often lead to silent failures, treating only
kernel panics or assertions as bug signals is not sufficient: a
data race checker that handles kernel complexity is needed.
To bring coverage-guided fuzzing to the concurrency dimen-
sion, in this paper, we present KRACE, an end-to-end fuzzing
framework that fills the gap with new components in three
fundamental aspects in kernel file system fuzzing:
Coverage tracking [§III] KRACE adopts two coverage tracking
mechanisms. Branch coverage is tracked as usual to capture
code exploration in the sequential dimension, analogous to
the line coverage metric used in unit testing. In addition, to
approximate exploration progress in the concurrency domain,
KRACE proposes a novel coverage metric: alias instruction
pair coverage, short for alias coverage. Conceptually, if we
could collect all pairs of memory access instructions X↔Y such
that X in one thread may-interleave against Y in another thread,
alias coverage tracks how many such interleaving points have
been covered in execution. Consequently, if the growth of alias
coverage stalls, it signals the fuzzer to stop probing for new
interleavings in the current multi-threaded seed input.
Input generation [§IV] KRACE generates and mutates in-
dividual syscalls according to a specification [21, 27]. The
novel part of KRACE lies in evolving multi-threaded seeds and
merging them in an interleaved manner to preserve already-
found coverage as well as to maximize the chances of inducing
new interleavings. Another job of the input generator is to
produce thread schedulings, (to explore the hidden input space).
Although enforcing fine-grained control over thread scheduling
is possible [7], the scheduling algorithm does not scale to
whole-kernel concurrency, as the latter consists of not only user
threads, but also background threads internally forked by file
systems, work queues, the block layer, loop devices, RCUs, etc.,
and the total number of contexts often exceeds 60 at runtime.
As a result, KRACE adopts a lightweight delay injection scheme
and relies on the alias coverage metric as feedback to determine
whether more delay schedules are needed.
Bug manifestation [§V] KRACE incorporates an in-house
developed detector to reason about data races given an
execution trace. In essence, KRACE hooks every memory access
and for each pair of accesses to the same memory address,
KRACE checks whether 1) they belong to two threads and at
least one is a memory write; 2) these two accesses are strictly
ordered (i.e., happens-before relation); and 3) at least one shared
lock exists that guards such accesses (i.e., lockset analysis). The
challenges for KRACE lie in modeling the diverse set of kernel
synchronization mechanisms comprehensively, especially those
uncommon primitives such as optimistic locking, RCU, and
ad-hoc schemes implemented in each file system.
KRACE adopts the software rejuvenation strategy to avoid
the aging OS problem, i.e., every execution is a fresh run from
a clean-slate kernel and empty file system image. Doing so
trades performance for trackability and debuggability but is
worthwhile for data race detection. As shown in §VII-B, the
exploration gradually catches up and bypasses conventional
speed-oriented fuzzers (e.g., Syzkaller) upon saturation. KRACE
also decouples data race checking from state exploration. Unlike
prior works where the bug checker runs inline in each execution,
in KRACE, the checker only kicks in when new coverage (either
branch or alias) is reported. This prevents the expensive data
race checking from slowing down the state exploration while
still preserving the opportunity to test every new execution state
found through fuzzing. The checking progress will eventually
catch up when the coverage growth is toward saturation.
We evaluated KRACE by fuzzing two popular and heavily
tested kernel file systems (ext4 and btrfs) in recent kernel
versions and we found 23 data races, nine of which are
confirmed as potentially harmful races, and 11 are benign
races (for performance or allowed by the POSIX specification).
Fig. 1: A data race found by KRACE. This figure shows the complete
call stack, thread ordering information, and locking information when
the data race happens and the inconsistency it may cause ( 1 - 4 ).
Summary: This paper makes the following contributions:
• Concept: The alias coverage metric and interleaved multi-
threaded syscall sequence merging are novel concepts that
make coverage-guided fuzzing more effective in highly
concurrent programs, possibly as a first step toward fuzzing
for a wide range of concurrency bugs.
• Implementation: KRACE’s data race checker encodes a
comprehensive model of kernel synchronization mechanisms
in the form of over 100 kernel patches (for code instrumen-
tation), which are regularly updated as the kernel upgrades.
• Impact: KRACE has found 23 data races and will be
continuously running to find new cases. We will open-
source KRACE as well as the collection of syscall primitives
for multi-threaded execution as quality seeds for future
concurrent file system fuzzing research.
II. BACKGROUND AND RELATED WORK
The past three decades have witnessed several efforts to find
data races using various techniques. In this section, we show a
data race example, discuss the types of approaches that prior
works have taken, and introduce coverage-guided fuzzing as a
generic bug finding technique.
Example.
Intuitively, a data race is caused by two threads
trying to perform unordered and unprotected memory oper-
ations to the same address. Figure 1 shows two data races
found by KRACE that happen to make a complete scenario.
The read of full is in race with both writes, as the read is
not protected by the corresponding delayed_rsv->lock as is
done on the writers’ side. According to btrfs developers, this
results in ineffective management of the reserve space internally
used by btrfs, in particular, delays in releasing the reserved
space or space releasing followed by reservation instead of
migration from one reserve to another. Reflected in the call