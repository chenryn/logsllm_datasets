# 详解Linux权限提升的攻击与防护

##### 译文声明
本文是翻译文章，原作者为Rashid Feroze，原文发布于payatu.com。译文仅供参考，具体内容和含义以原文为准。

## 什么是权限提升？

大多数计算机系统都是为多个用户设计的，每个用户具有不同的权限。权限定义了用户可以执行的操作，常见的权限包括查看文件、编辑文件和修改系统文件。权限提升是指使用户获得原本不具备的更高权限，这些权限可能用于删除文件、查看敏感信息或安装恶意软件（如病毒）。实现权限提升通常需要利用系统漏洞或设计缺陷来绕过安全配置。

具体来说，权限提升是通过操作系统或软件应用程序中的漏洞、设计缺陷或配置疏忽，使应用或用户获得对受保护资源的高级访问权限。这可能导致应用程序超越开发者或系统管理员设定的安全限制，执行未经授权的操作。

尽管目前大多数企业使用的是Windows客户端，但在考虑整体信息安全策略时，Linux权限提升攻击仍是一个重要威胁。关键基础设施（如Web服务器、数据库和防火墙）通常运行在Linux系统上，一旦这些设备被入侵，可能会严重影响企业的正常运作。此外，随着物联网（IoT）和嵌入式系统的普及，黑客越来越多地将注意力转向这些设备，因此加强这些设备的安全性变得至关重要。

## 目标

本文将详细讨论基于Linux系统的权限提升攻击，并讲解攻击者如何利用已知技术进行远程主机的权限提升。同时，我们将介绍如何保护系统免受此类攻击，并根据不同Linux环境讲解权限提升的方法。

### Linux中的权限模型

Linux系统继承了UNIX的文件所有权和权限概念。文件权限设置和检查是防止恶意篡改的一种方式。每个文件和文件夹都有一组关联的权限，这些权限决定了哪些用户可以执行哪些操作。例如，文件`docker-compose.yml`只有root用户具有只读访问权限。普通用户无法访问未授予其权限的文件，而超级用户（root）则可以访问所有文件。为了进行进一步的攻击，攻击者首先需要在Linux系统上获得root权限。

## 为什么我们需要进行权限提升？

- **读/写任意敏感文件**：获取敏感信息或修改系统配置。
- **持久性**：确保攻击在系统重启后仍然有效。
- **植入永久后门**：方便未来再次入侵。

## 用于权限提升的相关技术

假设我们已经在目标系统上放置了一个Shell，但尚未获得root特权。以下是一些常用的技术来获得root访问权限：

### 1. 内核漏洞利用

内核漏洞利用程序通过内核漏洞执行具有更高权限的代码。成功利用内核漏洞通常会使攻击者以超级用户身份访问系统。通常，只需将内核漏洞利用程序下载到目标主机并执行即可完成权限提升。

#### 内核利用的通用流程：
1. 诱使内核在内核模式下运行我们的有效载荷。
2. 修改内核数据，例如进程权限。
3. 以新权限启动一个Shell并获取root权限。

#### 成功进行内核利用的条件：
1. 易受攻击的内核。
2. 存在相应的漏洞。
3. 能够将漏洞利用转移到目标上。
4. 能够在目标上执行漏洞利用。

#### 防范方法：
- 及时更新内核补丁。
- 限制或删除启用文件传输的程序（如FTP、TFTP、SCP、wget和curl），并对使用这些程序的用户、目录、应用程序和特定IP地址/域名进行严格限制。

#### 示例：脏牛（DirtyCow）漏洞
- 漏洞描述：Linux内核的内存子系统在处理写时拷贝（Copy-on-Write)时存在条件竞争漏洞，导致低权限用户能够获取其他只读内存映射的写权限，从而提权。
- 利用方法：
  ```bash
  $ whoami - 显示当前用户是John（非root用户）。
  $ uname -a - 显示内核版本，确认该版本受脏牛漏洞影响。
  > 从这里下载脏牛漏洞的EXP - https://www.exploit-db.com/exploits/40839/
  > 编译并执行。通过编辑/etc/passwd文件，将"root"用户替换为新用户"rash"。
  $ su rash - 将当前登录的用户修改为root权限的rash。
  ```

### 2. 利用正在以root身份运行的服务

一些服务（如SMB、MySQL）通常以root身份运行，攻击者可以通过利用这些服务的漏洞来获取root访问权限。

#### 示例：EternalBlue和SambaCry攻击
- 攻击者利用SMB服务漏洞，获得远程代码执行权限和本地权限提升。
- 这种组合非常致命，常用于传播勒索软件。

#### 检查方法：
```bash
$ netstat -antup - 显示所有打开并正在监听的端口，检查是否有可以利用的本地服务。
```

#### 利用示例：MySQL UDF动态库漏洞
- MySQL以root权限运行时，攻击者可以通过MySQL Shell执行任意命令。
- 检查方法：
  ```bash
  $ ps -aux | grep root - 显示以root用户身份运行的服务。
  > 使用MySQL Shell执行任意命令，这些命令将以root身份执行。
  ```

#### 防范方法：
- 避免以root身份运行任何服务，特别是Web、数据库和文件服务器。

### 3. 利用可执行文件SUID

SUID（Set User ID）允许用户以指定用户的权限执行文件。例如，ping命令通常需要root权限才能打开原始网络套接字。如果将ping程序的SUID标记为root用户，低权限用户在执行程序时可以直接以root权限执行。

#### 示例：Nmap SUID漏洞
- Nmap设置了SUID位，以便它可以有效地扫描网络。
- 在nmap早期版本中，有一个功能允许用户转到Shell。如果nmap设置了SUID位，它将以root权限运行，攻击者可以通过交互模式访问root Shell。
- 利用方法：
  ```bash
  $ find / -perm -u=s -type f 2>/dev/null - 打印设置了SUID位的可执行文件。
  $ ls -la /usr/local/bin/nmap - 确认nmap是否设置了SUID位。
  $ nmap -interactive - 运行nmap交互模式。
  $ !sh - 从nmap Shell转到系统Shell。
  ```

#### 防范方法：
- 不应将SUID位设置为允许转到Shell的任何程序。
- 不应在任何文件编辑器、编译器、解释器上设置SUID位。

### 4. 利用SUDO权限/用户

如果攻击者不能直接获得root访问权限，他们可能会尝试破坏拥有SUDO访问权限的用户。一旦攻击者有权访问任何SUDO用户，就可以使用root权限执行命令。

#### 示例：错误配置的SUDO权限
- 管理员可能允许用户通过SUDO运行某些命令，但这些命令可能包含用于执行命令的参数，攻击者可以利用这些命令逃逸到Shell并获得root权限。
- 利用方法：
  ```bash
  $ sudo -l - 打印允许作为SUDO运行的命令。
  $ sudo find /home -exec sh -i ; - find命令的exec参数可用于任意代码执行。
  ```

#### 防范方法：
- 不要将SUDO权限赋予任何编程语言编译器、解释器和编辑器。
- 避免将SUDO权限赋予vi、more、less、perl、ruby、gdb等命令。

通过以上方法，我们可以更好地理解和防范Linux系统中的权限提升攻击，确保系统的安全性。