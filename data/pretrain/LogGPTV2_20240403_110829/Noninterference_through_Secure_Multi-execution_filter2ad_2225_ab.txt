ones when they read from low security inputs. Second,
if we want to completely close timing covert channels,
it must not be possible for any low security execution
to ever have to wait for a high security one. This does
not mean that serialising the executions is the only
option. Higher security execution can still be allowed
to progress while lower security threads are waiting for
I/O. On multi-core systems, more than one execution
can progress at the same time.
A simple scheduling strategy is to run the diﬀer-
ent executions serially, running lower security execu-
tions ﬁrst. This is an important strategy, corresponding
command ::= x := e
| c; c
| if e then c else c
| while e do c
| skip
| input x from i
| output e to o
Figure 3. Command syntax of our model language.
to what we will later describe as the selectlowprio
scheduling function. In general, this strategy will mul-
tiply execution time by the number of security levels,
but will not add signiﬁcant memory usage overhead,
because each previous execution is completely ﬁnished
before the next one starts, so its memory can immedi-
ately be reclaimed.
Probably a more practical strategy consists of run-
ning the diﬀerent executions each in a parallel thread,
giving priority to lower security ones. Especially on
multi-core systems (which seem to be becoming stan-
dard on consumer PC’s), this strategy will signiﬁcantly
reduce execution time overhead, at the expense of
increased memory usage. We think that for typical web
applications, this is a preferable compromise.
In Section V, we discuss a somewhat unexpected fea-
ture of secure multi-execution using this last schedul-
ing strategy. For programs incurring I/O latency from
I/O channels on diﬀerent security levels, secure multi-
execution can actually speed up a program’s execution.
In this situation, secure multi-execution functions as an
automatic program paralleliser, based on the assump-
tion of noninterference of a program.
III. Formalisation
A. Model language
We introduce a simple imperative model language
and related concepts, to explain and prove the tech-
nical properties of our approach. Our model language
and semantics are deterministic.
Our model language is fairly standard, and is based
on the one used by Russo et al. [15]. We have removed
threading primitives and added simple input and out-
put commands. Values can be booleans or integers.
We assume atomic, deterministic and side-eﬀect-free
expressions. A program P is a command intended for
execution by the system. We deﬁne the language’s
command syntax in Figure 3.
We assume a set of input channels Cin and output
channels Cout. We deﬁne a program input I as a mapping
from input channels i ∈ Cin to channel input queues q,
112
I(i) = q
q(n) = v
p(i) = n
(cid:3)
(cid:2)
I, i, p
= v
read
O(o) = [v1,··· , vn]
(1)
(2)
write (O, o, v) = O [o (cid:3)→ [v1,··· , vn, v]]
Figure 4.
program inputs and program outputs.
Primitive read and write operation for working with
mapping non-negative integers to values. We deﬁne
an input pointer p as a mapping from input channels
i ∈ Cin to integers. The symbol p0 denotes an initial
input pointer mapping every input channel to position
(cid:3)→ 0). A program output O is deﬁned as a mapping
0 (
from output channels o ∈ Cout to lists of values. The
symbol O0 denotes an initial program output mapping
(cid:3)→ []). In
every output channel to the empty list (
Figure 4, we deﬁne primitive read and write operations
on program inputs and program outputs.
We deﬁne standard small-step execution semantics
of the language in Figure 3. These are deﬁned for exe-
cution conﬁgurations (cid:5)c, m, p, I, O(cid:6), with c a command,
m a memory (a function mapping variables to their
values), p an input channel pointer, I a program input
and O a program output.
We deﬁne m [x (cid:3)→ v] to represent a new memory
mapping variable x to value v, and all other variables y
to m(y). We also extend memories m to expressions, so
that m(e) = v means that v is the value of the expression
e evaluated with respect to the variable values in m.
The notation m0 denotes an initial memory mapping
every variable to the value 0 (
(cid:3)→ 0).
The complete semantics can be found in Figure 5.
Note that standard semantics are represented using the
symbol (cid:2), in order to be able to easily distinguish
them from the multi-execution semantics we will de-
ﬁne later.
A program P can be executed with respect to a given
initial program input I. It is executed by applying the
semantic rules in Figure 5 to the execution conﬁgura-
tion (cid:5)P, m0, p0, I, O0(cid:6).
∗
We write (cid:2)
for the transitive and reﬂexive clo-
sure of the (cid:2) relation for execution conﬁgurations.
A program P terminates for a given initial input I if
(cid:5)P, m0, p0, I, O0(cid:6) (cid:2)
(cid:5)skip, m f , p f , I, O f(cid:6) for some
ﬁnal memory m f , ﬁnal
input pointer p f and ﬁnal
program output O f . In such a case, we say that the
execution of P for program input I produces ﬁnal
input pointer p f and program output O f . We write
(P, I) (cid:2)
We also introduce a time-limited execution relation.
(cid:8)(cid:6) iﬀ exe-
We write (cid:5)c, m, p, I, O(cid:6) (cid:2)n
cution conﬁguration (cid:5)c, m, p, I, O(cid:6) can be transformed
(cid:8), I, O
p f , O f
∗ (cid:4)
(cid:5)
.
(cid:5)c
(cid:8), m
(cid:8), p
∗
c = if e then ctrue else cfalse m(e) = b
(cid:5)c1, m, p, I, O(cid:6) (cid:2) (cid:5)c
(cid:8)
(cid:8), p
, m
1
(cid:5)c1; c2, m, p, I, O(cid:6) (cid:2) (cid:5)c
(cid:8)
1; c2, m
(cid:5)c, m, p, I, O(cid:6) (cid:2) (cid:5)cb, m, p, I, O(cid:6)
(cid:8)(cid:6)
(cid:8), I, O
(cid:8), p
(cid:8), I, O
(cid:5)skip; c, m, p, I, O(cid:6) (cid:2) (cid:5)c, m, p, I, O(cid:6)
c = while e do cloop m(e) = true
(cid:5)c, m, p, I, O(cid:6) (cid:2) (cid:5)cloop; c, m, p, I, O(cid:6)
c = while e do cloop m(e) = false
(cid:5)c, m, p, I, O(cid:6) (cid:2) (cid:5)skip, m, p, I, O(cid:6)
(cid:8)(cid:6)
(cid:8) = m [x (cid:3)→ v]
(cid:5)x := e, m, p, I, O(cid:6) (cid:2) (cid:5)skip, m
m(e) = v m
(cid:8), p, I, O(cid:6)
c = output e to o
m(e) = v O
(cid:8) = write (O, o, v)
(cid:5)c, m, p, I, O(cid:6) (cid:2) (cid:5)skip, m, p, I, O
(cid:8)(cid:6)
(cid:3)
(cid:2)
I, i, p
= v
c = input x from i
read
(cid:8) = m[x (cid:3)→ v]
(cid:8) = p[i (cid:3)→ p(i) + 1]
m
p
(cid:5)c, m, p, I, O(cid:6) (cid:2) (cid:5)skip, m
(cid:8), I, O(cid:6)
(cid:8), p
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
Figure 5. Standard small-step semantics of the model language.
(cid:8), p
(cid:8)(cid:6) by n exe-
to execution conﬁguration (cid:5)c
(cid:8), I, O
(cid:8), m
cution steps. If (cid:5)P, m0, p0, I, O0(cid:6) (cid:2)n (cid:5)c
(cid:8)(cid:6),
(cid:8), m
(cid:8), p
(cid:8), I, O
(cid:2)
(cid:8)(cid:3)
(cid:8), O
we write that (P, I) (cid:2)n
p
.
Note also that the ﬁnal memory m f is assumed not to
be publicly observable. As discussed by Le Guernic et
al. [6] (who take the same view), public ﬁnal variables
x can if necessary be encoded by introducing an output
channel o at an appropriate security level and by
adding a command output x to o at the end of the
program.
B. Secure Multi-Execution
In this section, we proceed to modeling secure multi-
execution semantics. The main diﬃculty lies in the
handling of inputs with side eﬀects (see section II-C),
requiring scheduling and synchronisation between the
executions at diﬀerent security levels. In order to
model this, we will deﬁne secure multi-execution se-
mantics on two levels. The local semantics model steps
in a single execution at a certain security level, while
the global semantics model the scheduling and synchro-
nisation semantics needed between the separate local
executions.
We assume a security level lattice L and functions
σin : Cin → L and σout : Cout → L, mapping each input
channel i or output channel o to a security level. We
113
(cid:6)
(cid:6)
(cid:7)
l
c = if e then ctrue else cfalse m(e) = b
(cid:7)
(cid:6)
cb, m, p
, r, I, O
l
(cid:8)(cid:9)
(cid:8), p
(cid:8)
(cid:8)
(cid:8), I, O
, r
, m
(cid:8)(cid:9)
1
(cid:8), p
(cid:8)
(cid:8), I, O
, r
1; c2, m
, r, I, O =(cid:3)
(cid:8)
c
(cid:8)
c
c, m, p
(cid:7)
c1, m, p
l
(cid:7)
c1; c2, m, p
l
, r, I, O =(cid:3)
, r, I, O =(cid:3)
l
(cid:6)
(cid:6)
(cid:7)
skip; c, m, p
l
m(e) = true
(cid:6)
c, m, p
(cid:7)
l
, r, I, O =(cid:3)
(cid:6)
c, m, p
, r, I, O
c = while e do cloop
(cid:8)
, r, I, O =(cid:3)
cloop; c, m, p
, r, I, O
(cid:6)
m(e) = false
c, m, p
(cid:7)
l
, r, I, O =(cid:3)
(cid:6)
c = while e do cloop
(cid:7)
l
, r, I, O
l
(cid:7)
l
(cid:9)
l
skip, m, p
(cid:8) = m [x (cid:3)→ v]
(cid:6)
(cid:8), p
skip, m
(cid:7)
, r, I, O
(cid:6)
m(e) = v m
, r, I, O =(cid:3)
(cid:7)
l
x := e, m, p
l
c = output e to o
m(e) = v
(cid:8) = write (O, o, v)
σout(o) = l O
(cid:6)
, r, I, O =(cid:3)
skip, m, p
(cid:8)
, r, I, O
c = output e to o
(cid:6)
σout(o) (cid:2) l
(cid:6)
(cid:7)
c, m, p
l
(cid:7)
l
c, m, p
(cid:6)
(cid:7)
l
(cid:7)
l
(cid:6)
σin(i) (cid:2) l m
, r, I, O =(cid:3)
(cid:7)
c, m, p
l
(cid:2)
(cid:3)
c = input x from i
I, i, p
v = read
(cid:8) = p[i (cid:3)→ p(i) + 1]
p
(cid:7)
(cid:10)(i, p(i))=(cid:3)
c, m, p
l
, r, I, O
(cid:7)
l
, r, I, O
, r, I, O
skip, m, p
(cid:8) = m[x (cid:3)→ vdefault]
(cid:6)
skip, m
, r, I, O =(cid:3)
c = input x from i
(cid:8), p
σin(i) = l
(cid:8) = m[x (cid:3)→ v]
m
(cid:8) = r[i (cid:3)→ p
(cid:8)
(i)]
r
(cid:6)
(cid:8)(cid:7)
(cid:8), I, O
(cid:8), p
skip, m
, r
r(i) ≤ p(i)
(cid:7)
, r, I, O
l
⊗(i, p(i))=(cid:3)
σin(i) < l
c, m, p
(cid:6)
l
c = input x from i
(cid:6)
(cid:7)
c, m, p
l
, r, I, O
(cid:3)
c = input x from i