title:CAFE: A Virtualization-Based Approach to Protecting Sensitive
Cloud Application Logic Confidentiality
author:Chung Hwan Kim and
Sungjin Park and
Junghwan Rhee and
Jong-Jin Won and
Taisook Han and
Dongyan Xu
CAFE: A Virtualization-Based Approach to Protecting
Sensitive Cloud Application Logic Conﬁdentiality
†Purdue University, ‡The Attached Institute of ETRI, §NEC Laboratories America, ¶KAIST
†{chungkim,dxu}@cs.purdue.edu, ‡{taiji,wonjj}@ensec.re.kr,
Chung Hwan Kim†, Sungjin Park‡¶, Junghwan Rhee§,
Jong-Jin Won‡, Taisook Han¶, Dongyan Xu†
§PI:EMAIL, ¶PI:EMAIL
ABSTRACT
Cloud application marketplaces of modern cloud infrastruc-
tures oﬀer a new software deployment model,
integrated
with the cloud environment in its conﬁguration and policies.
However, similar to traditional software distribution which
has been suﬀering from software piracy and reverse engi-
neering, cloud marketplaces face the same challenges that
can deter the success of the evolving ecosystem of cloud soft-
ware. We present a novel system named CAFE for cloud in-
frastructures where sensitive software logic can be executed
with high secrecy protected from any piracy or reverse en-
gineering attempts in a virtual machine even when its op-
erating system kernel is compromised. The key mechanism
is the end-to-end framework for the execution of applica-
tions, which consists of the secure encryption and distri-
bution of conﬁdential application binary ﬁles, and the run-
time techniques to load, decrypt, and protect the program
logic by isolating them from tenant virtual machines based
on hypervisor-level techniques. We evaluate applications in
several software categories which are commonly oﬀered in
cloud marketplaces showing that strong conﬁdential execu-
tion can be provided with only marginal changes (around
100-220 lines of code) and minimal performance overhead.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
Cloud Computing Marketplace, Secure Execution Environ-
ment, Code Conﬁdentiality Protection
1.
INTRODUCTION
Cloud computing infrastructures are becoming increas-
ingly popular and mature. Gartner estimated the size of
public cloud service market to grow to $131 billion by 2017
from $111 billion in 2012 [20]. As the technologies for cloud
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ASIA CCS ’15, April 14 - 17, 2015, Singapore, Singapore
Copyright 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714594.
infrastructures have become mature, there is an increasing
demand for software services especially in Infrastructure-as-
a-Service (IaaS) clouds, where computers (physical or vir-
tual) are provided to tenants with full ﬂexibility. It is, how-
ever, diﬃcult for cloud providers to fulﬁll all of the diverse
needs of software that are continuously increasing. Conse-
quently, major cloud computing services (such as Amazon
Web Services (AWS), IBM Cloud, and Microsoft Azure) op-
erate marketplaces where application developers can upload
and retail software, and cloud users can purchase the soft-
ware that they need.
The ecosystem of cloud marketplaces and services in gen-
eral involves three parties: cloud users, application develop-
ers, and cloud providers. Cloud users seek and purchase the
cloud applications suitable to their needs in terms of func-
tionality, price, the easiness of management, etc. Compared
to traditional software that requires installation and man-
agement speciﬁc to each user (e.g., desktop applications),
cloud applications are optimized to run on a cloud platform
utilizing various services delivered from the cloud provider.
Cloud application developers submit their packages to the
marketplace after placing program binaries and dependent
components in a disk image. Cloud users search for the soft-
ware that meets their needs in the marketplace and purchase
them. When the cloud users create a virtual machine (VM),
they are prompted with a list of the disk images that include
the purchased applications. The selected disk image is then
written to the virtual disk of the VM, so the application can
be used by the cloud users. The applications can be eas-
ily deployed using VM images without tedious installation
procedures that traditional applications require.
While this new form of distribution simpliﬁes the deploy-
ment of software, one of the key problems in software dis-
tribution still remains in cloud marketplaces: the deployed
software faces the risk of piracy and reverse engineering,
similar to what conventionally distributed software is fac-
ing. Because cloud users typically own an entire VM with
all privileged permissions given, technically they have no re-
striction on the inspection and replication of the applications
installed in the VM.
Existing approaches [16, 15, 10] leveraging virtualization-
based memory protection protect partial code conﬁdential-
ity or do not address necessary issues in a practical cloud
marketplace setting where code conﬁdentiality must be fully
protected throughout the entire life span of software after its
submission.
As a new alternative, we propose a system named Cloud
Application Function Enclaving (CAFE) to address these
651challenges. CAFE provides a cloud application execution
environment with code conﬁdentiality so that it can protect
sensitive cloud application logic from any piracy or reverse
engineering attempts performed by cloud users, even in the
case that the guest OS of the cloud user VM is compromised.
CAFE works in the following way. First, developers create
software or port existing software in two groups of program
binary ﬁles: a group that can be open to cloud users and
the other that contains conﬁdential logic that needs to be
protected. We name the binary ﬁles of the former public
binaries and the latter secret binaries. The public binaries
are submitted in the form of a VM image that also contains
other ﬁles related to the application (e.g., conﬁguration ﬁles)
and the VM environment but does not contain the secret bi-
naries. A cloud user may be able to copy the ﬁles or extract
the in-memory images of the public binaries as in the exist-
ing cloud application distribution.
In contrast, the secret binaries are submitted in the form
of separate ﬁles and are automatically managed by the cloud
providers with protection. When the application is run in
the user VM, the secret binaries are fetched on demand at
runtime for execution via a secure deployment protocol by
the hypervisor. The hypervisor securely loads the secret
binaries through a cryptographically protected channel after
the authentication of the VM. The end-to-end framework
ensures that the sensitive logic is completely isolated from
cloud users at all times. Throughout the whole lifetime of
the VM, the binary and runtime states of the sensitive logic
stay conﬁdential and are strictly protected from the entire
guest OS in the VM by the hypervisor.
This paper is structured as follows: Section 2 presents the
adversary model. The design is presented in Section 3. The
evaluation of CAFE is presented in Section 4. Related work
is discussed in Section 5, and Section 6 concludes this paper.
2. ADVERSARY MODEL
We present our adversary model based on a reasonable
cloud environment in modern systems. The main goal of
an adversary would be to obtain the content (in any form)
of program binaries that are protected by our system. We
note that the guest OSes running in cloud user VMs are
untrusted, which means that an attacker can execute arbi-
trary executable code at any privilege. That is, an attacker
can compromise all software including the kernel, drivers,
libraries, and applications in the user and kernel mode run-
ning in the user VM. Speciﬁcally, an attacker can attempt
to obtain and reverse-engineer the binary codes containing
sensitive application logic using the following methods.
Access to ﬁle system: As described in Section 1, appli-
cations are distributed to user VMs as a set of ﬁles written
to the VM’s disk image. The most obvious way to obtain
the program is to access the ﬁles inside the ﬁle system us-
ing ﬁle I/O. Based on our adversary model, the attacker has
privilege to mount and access any ﬁle system. Therefore,
once the program is stored in a ﬁle system in a plain form,
he should be able to obtain it.
Access to runtime process memory: A more elevated
attack to obtain the program binary is to capture the run-
time states of the program. We consider that the attacker
can access the memory of application processes. For in-
stance, using a debugging tool or by injecting malicious code
into its memory the attacker can obtain the binary code from
the runtime memory of the target processes.
Figure 1: Overview of CAFE.
Access to network: Another attack method to obtain
the binary would be using the network layer. We assume
that the attacker can eavesdrop and modify network traﬃc
between cloud provider servers and cloud user VMs. There-
fore, if a binary ﬁle is transferred in a plain form, the attacker
may be able to obtain it from network packets.
3. DESIGN
To support conﬁdential execution of various kinds of ap-
plications in a practical cloud marketplace setting, the con-
ﬁdentiality of sensitive logic should be systematically main-
tained in the entire work-ﬂow from the development of pro-
grams to the delivery to the cloud users and their execu-
tion. CAFE achieves this goal using an end-to-end frame-
work for the conﬁdential execution of cloud applications by
using hypervisor-level techniques. This is one of the key
novelties of this paper compared to previous work which
only focus on a local view of protection [11, 13, 14, 10, 16,
15]. The overview of the CAFE architecture is illustrated in
Figure 1.
Application development and submission: As men-
tioned in Section 1, cloud application developers build their
program code into two separate groups to be supported by
CAFE: the public binary and secret binary groups. In our
model, application developers have the responsibility to de-
termine which part of application logic needs conﬁdentiality.
The application is annotated to use the APIs of CAFE, a
set of hypercalls that request the hypervisor to load, unload,
and execute a secret binary. The public binaries are pack-
aged in a VM image along with other binary ﬁles on which
the application depends. When the application is submitted
to the marketplace, the VM image that contains the public
binaries, and the secret binary ﬁles are submitted separately.
Upon submission, the public VM image is transferred to the
VM image server that stores and manages VM images as in
existing cloud infrastructures. In contrast, the secret binary
ﬁles are stored in the secret binary server (SBS), a secure
storage for sensitive application logic. Both the VM image
server and the SBS are a part of the cloud provider domain
linked to user VMs with a dedicated high bandwidth con-
nection.
Purchase and deployment of applications: Cloud
users purchase applications from the cloud marketplace and
then the cloud provider lets the cloud user create a VM
using the corresponding VM image that includes the public
binaries of the purchased application. The secret binaries,
on the other hand, are not delivered this time. Instead, they
are delivered to the hypervisor through a secure channel
when the binaries are requested for use.
ApplicationDeveloperSecret BinaryServerVM Image ServerPublicBinarySecretBinaryHypervisorAuthenticationDeployment ofSecret BinaryDeployment ofPublic BinaryIsolated ExecutionRequest forSecret BinaryUser VMHypervisorCloud Provider DomainMarketplacePublicBinarySecretBinarySubmissionof Application652and a pre-secret which is used to derive shared secrets such
as an encryption key, an initial vector (IV), and a HMAC
key. With the use of the TPM, we provide a level of security
higher than the standard TLS.
CAFE generates an RSA key pair inside the TPM and
wraps it with the TPM’s Storage Root Key (SRK). The
SRK is a unique, non-migratable 2048-bit RSA key and is
guaranteed to always be present in the TPM. Due to these
features, a key wrapped by the SRK can only be used in the
machine on which the same TPM is placed. Therefore, even
in the case that the attacker acquires a wrapped RSA key
pair, he cannot unwrap it without the same TPM used to
generate and wrap it.
Remote attestation of the hypervisor: After estab-
lishing a secure channel, the SBS generates a nonce (Nonce)
and sends it to the hypervisor. The nonce is used as a pa-
rameter of the TPM_Quote2 operation, a TPM operation used
for integrity measurement [12]. The hypervisor performs
TPM_Quote2 and transfers the resulted digest (SignedDigest)
to the SBS which veriﬁes the integrity of the hypervisor by
matching the received digest with the certiﬁcate (CertAIK )
from the private CA.
Veriﬁcation of application licenses: Upon successful
attestation of the hypervisor, the cloud application sends the
VM ID and the secret binary ID to the SBS requesting the
transmission of the encrypted secret binary image. A VM
ID is the unique identiﬁer of a VM managed internally by
the cloud infrastructure. A secret binary ID is the unique
identiﬁer of a secret binary determined upon the submission
of the application to the cloud infrastructure, and it is known