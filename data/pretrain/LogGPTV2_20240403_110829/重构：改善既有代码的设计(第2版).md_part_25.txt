或关联数组
点，除此以外别无他法。若这种记录只在程序的一个小范围里使用，那问题还不
其使用这个访问函数。
后在类上定义一个访问函数，用于返回原始的记录。修改封装变量的函数,
，那就是-
测试。
程序中间常常需要互相传递嵌套的列表（list）或散列映射结构，这些数据结
注意，
记录型结构可以有两种类型：
记得为这个函数取一个容易搜索的名字。
这使得它们在各种编程场景下都能大展身手。
我所说的偏爱对象，
一条记录上持有什么字段往往不够直观。比如说，如果我想知道记录
后者常由语言库本身实现，
一但如果真需要这样做，那还不如使用类来得直
一个字段并逐步替换引用点。
，是对可变数据而言。如果数据不可变，
，很多编程语言都提供了方便的语法来创建这
一种需要声明合法的字段名字，
散列映射
（hashmap）
并通过类的形式提供出来，这些
。但使用这类结构也有缺
、字典（dictionary）
 另一种可以随
我大可直
令
然
---
## Page 227
 getRawDataoforganization().name = newName;
更新的例子...
result += ^${getRawData0forganization().name}`;
读取的例子...
const organization = {name: "Acme Gooseberries", country: "GB"};
·如果记录中的字段本身也是复杂结构，考虑对其再次应用封装记录（162）或
·移除类对原始记录的访问函数，那个容易搜索的返回原始数据的函数也要一并
result 
用。
·测试。
·对于该记录的每处使用点，将原先返回记录的函数调用替换为那个返回实例对
organization.name =
范例
删除。
的更新操作，对于读取操作可以考虑返回一个数据副本或只读的数据代理。
封装集合（170）手法。
。以下是对其进行读取和更新的地方：
函数还不存在，
象的函数调用。使用对象上的访问函数来获取数据的字段，如果该字段的访问
重构的第一步很简单，先施展一下封装变量（132）
这是一个普通的JavaScript对象，
首先，我从一个常量开始，该常量在程序中被大量使用。
如果该记录比较复杂，
newName;
那就创建一个。每次更改之后运行测试。
例如是个嵌套解构，
，程序中很多地方都把它当作记录型结构在使
 那么先重点关注客户端对数据
---
## Page 228
客户端...
get name() {return this._data.name;}
class Organization..
getorganization() .name = newName;
客户端...
class Organization...
set name(aString) {this._data.name = aString;}
用一个设值函数来替换它。
function getorganization(） {return organization;}
顶层作用域
class organization {
class Organization...
用类来替换记录，从而达到这一目的。
个又丑又长、容易搜索的名字，因为我有意不让它在这次重构中活得太久。
function getRawDataoforganization(） {return organization._data;}
 constructor(data)
创建完对象后，
 封装记录意味着，
同样地，我将所有读取记录的地方，用一个取值函数来替代。
这里施展的不全是标准的封装变量（132）手法，
我就能开始寻找该记录的使用点了。所有更新记录的地方，
 仅仅替换变量还不够，
我还想控制它的使用方式。我可以
 我刻意为设值函数取了一
---
## Page 229
存在散列映射中，并通过顾客ID进行索引。
案
依然适用，记录的更新点需要同样小心处理，但对记录的读取点则有多种处理方
此时我就会先将_data复制一份，再进行赋值。
的记录会破坏封装的完整性。但有时也可能不适合将对象展开到独立的字段里，
function getRawDataoforganization() [return organization._data;}
数送终了。
"1920":{
（比如来自JSON文件的数据）时，
class 0rganization 
function getorganization(） {return organization;}
result += ^${getorganization().name}`;
usages",
范例：封装嵌套记录
id:"1920"
name:
set
get name()
this._country = data.country;
上面的例子将记录的浅复制展开到了对象里，
 这样做有一个好处，
我还倾向于把_data里的字段展开到对象中。
 完成引用点的替换后，就可以兑现我之前的死亡威胁，为那个名称丑陋的函
// remaining months of the year
// remaining months of the year
作为例子，
"2":
 country(aCountrycode） {this._country = aCountrycode;}
country(
"martin",
63
70，
50，
人
e(astring)
，这里有一个嵌套层级更深的数据：它是一组顾客信息的集合，保
data.name;
this
 能够使外界无须再引用原始的数据记录。
_country;
又该怎么办呢？此时该重构手法的核心步骤
但当我处理深层嵌套的数据
直接持有原始
---
## Page 230
function compareUsage (customerID, laterYear, month） {
读取的例子...
getRawDataofCustomers()[customerID].usages[year][month] = amount; 
更新的例子..
function compareUsage (customerID, laterYear,
读取的例子..
customerData[customerID].usages[year][month] = amount;
更新的例子.
class CustomerData {
function setRawDataofCustomers(arg) {customerData = arg;}
"38673":{
，
constructor(data)
return {laterAmount: later，
const
return {laterAmount: later,
cons
// more customers in a similar form
id:
hame:
this._data = data;
接下来我要创建一个类来容纳整个数据结构。
对这样的数据施行封装，第一步仍是封装变量（132）
对嵌套数据的更新和读取可以进到更深的层级。
"38673",
later
"neal",
customel
change:
later
month）{
usages[laterYear][month];
usages[laterYear
-1][month] ;
---
## Page 231
class CustomerData...
更新的例子...
顶层作用域..
更新的例子..
结构进行了深入查找，
问函数还不存在就创建一个。现在顾客类还没有设值函数，而且这个更新操作对
更新的例子...
方。再提醒你一下，
看getRawDataofCustomers的所有调用者时，
setUsage(customerID, year, month, amount） {
getCustomerData().setUsage(customerID, year, month, amount);
function setUsage(customerID, year, month, amount) .
setUsage(customerID, year， month, amount);
（106），将层层深入数据结构的查找操作提炼到函数里。
顶层作用域..
function setRawDataofcustomers(arg) {customerData = 
 getRawDataofcustomers()[customerID].usages[year][month] = amount;
function
“做法"部分说，接下来要通过一个访问函数来返回原始的顾客数据，
最重要的是妥善处理好那些更新操作。
然后我再用搬移函数（198）将新函数搬移到新的顾客数据类中。
下面是那步更新操作。
，因此是时候创建一个设值函数了。我会先用提炼函数
{return
总是特别关注那些对数据做修改的地
因此，
 new CustomerData(arg);}
当我查
如果访
---
## Page 232
usage(customerID, year, 
class CustomerData...
并将它们搬移到customerData类中。
选择。
份数据，递归冻结副本的每个字段，以此阻止对它的任何修改企图。
JavaScript实现可就麻烦了，我把它留给读者作为练习好了。
结构，那么该数据代理就会抛出异常。这在有些编程语言中能轻易实现，但用
class CustomerData...
顶层作用域...
更新点时，测试就会报错。
回一份数据的深复制的副本。如果测试覆盖足够全面，那么当我真的遗漏了一些
成了呢？检查的办法有很多，
集中到一处地方，
function getCustomerData() {return customerData;}
return this. _data[customerID].usages[year] [month];
 this._data[customerID].usages[year][month] = amount;
return
 第一种选择是与设值函数采用同等待遇，把所有对数据的读取提炼成函数,
妥善处理好数据的更新当然价值不凡，但读取操作又怎么处理呢？这有几种
另一个方式是，
 封装大型的数据结构时，我会更多关注更新操作。
我使用了lodash库来辅助生成深复制的副本。
一通替换过后，
 是此次封装过程最重要的一部分。
，我可能认为修改已经告一段落，但如何确认替换是否真正完
 返回一份只读的数据代理。
month）
。如果客户端代码尝试修改对象的
，凸显更新操作，并将它们
，或者，我可以复制
---
## Page 233
的错误信息。
上。如果采用了只读代理或冻结副本数据的方案，就可以在此时提供一个有意
方案还可能带来困惑，比如客户端可能期望对该数据的修改会同时反映到原数据
能损耗也许是可以接受的——只有测量到可见的影响，我才会真的关心它。这种
价颇高，这可能引发性能问题。不过也正如我对性能问题的一贯态度，这样的性
function compareUsage (customerID, laterYear,
顶层作用域...
get rawData(){
class CustomerData...
这可以用到我前面写的rawData方法。
更新操作的良苦用心失去意义。最简单的应对办法是返回原始数据的一份副本，
样做的问题在于，我将无从阻止用户直接对数据进行修改，进而使我们封装所有
这样的数据结构给到客户端，也不失为一种选择。
供直观的语法，以支持从深层的列表和散列[mf-lh]结构中获得数据，因此直接把
法。但这样会使代码量剧增，特别是当对象有许多用途时。现代编程语言大多提
表，
顶层作用域...
return {laterAmount: later, change: later
const
return _.cioneDeep(this._data);
const
const
另一种方案需要更多工作，但能提供更可靠的控制粒度：对每个字段循环应
 如果客户端想拿到一份数据结构，
简单归简单，这种方案也有缺点。最明显的问题是复制巨大的数据结构时代
清楚描绘了该类的全部用途。
这种处理方式的美妙之处在于，
ear
later
rawData[custome
，我只需阅读类的代码，就能知道数据的所有用
，它为customerData提供了一份清晰的API列
我大可以直接将实际的数据交出去。但这
- earlier};
 earlier};
month）{
laterYear
1，"month);
---
## Page 234
Document"[mf-ref-doc]这篇文章中讨论了更多的细节，有兴趣的读者可移步阅
构，而非直接操作未经封装的数据。我在“Refactoring Code to Load a
使用取值函数来封装数据的深层查找操作，但更新数据时则用对象来包装其结
理一个大型的数据结构时，
更新点，比如说对用途（usage）对象应用将引用对象改为值对象（252）。但处
读。
应用封装集合（170）
并为它创建一个类。
，这种方案异常繁复，
然后我就能通过访问函数来控制其
，如果对该数据结构的更新点没那
---
## Page 235
合，这就避免了客户端的意外修改。
方法似乎也就足够。然而，依赖于别人的好习惯是不明智的,
我依然能轻易找出修改点。
加"和“移除"方法。这样就可使对集合的修改必须经过类，当程序演化变大时,
集合的成员变量可以直接被修改，而封装它的类则全然不知，无法介入。
误：只对集合变量的访问进行了封装，但依然让取值函数返回集合本身。这使得
使用面向对象技术的开发者对封装尤为重视一
和修改方式，这样当我需要更改数据结构时就非常方便。我们通常鼓励封装-
动机
class Person {
class Person {
7.2封装集合
 set courses(alist) {this.
 get courses() {return this._courses;}
为避免此种情况，我会在类上提供一些修改集合的方法一
只要团队拥有良好的习惯，
 我喜欢封装程序中的所有可变数据。这使我很容易看清楚数据被修改的地点
（Encapsulate Collection）
_courses = alist;}
，就不会在模块以外修改集合，
一但封装集合时人们常常犯一个错
，仅仅提供这些修改
一个细小的疏忽就
-通常是“添
---
## Page 236
·执行静态检查。
·在类上添加用于“添加集合元素"和“移除集合元素"的函数。
·如果集合的引用尚未被封装起来，先用封装变量（132）封装它。
期望相同的行为。
议只用一种方案，这样每个人都能很快习惯它，并在每次调用集合的访问函数时
问的列表通常生命周期都不长。
守则依然适用（见2.8节）
做法可能带来性能问题，
上，因为迭代器也不能修改它迭代的集合。
构造集合时也用了类似的方法，将构造出的集合建立在迭代器或枚举对象的基础
读取集合，