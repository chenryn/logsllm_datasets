  * 可用 payloads
    * JdbcRowset (4.2)
    * SpringPropFac (4.10)
    * SpringBFAdv (4.12)
    * C3P0RefDS (4.8)
    * C3P0WrapDS (4.9)
    * RMIRemoteObj (4.21)
  * 修复、缓解措施
显式地使用 @JsonTypeInfo 和 JsonTypeInfo.Id.NAME，明确subtypes的多态性。
#### 3.1.7 Castor
需要一个public 默认构造器。这个有几个特性，其中一个是调用顺序不完全由攻击者确定--原始属性总是在对象前被设定，它支持额外的属性访问方法调用，即
addXYZ（java.lang.Object）和createXYZ（），并根据声明的类型过滤一些属性。（这看起来像一个bug :
如果什么的非抽象类型没有public 的默认构造函数，即使子类型有也会忽略改属性。虽然Castor 运行通过
javax.management.loading.MLet 来构造 URLClassLoader ,但由于 supertype 没有public
默认构造函数，那么也无法为实例注入属性。如果这是可能的，那么 Castor 本身甚至会有一个可被攻击的实例。 ）
原始对象的策略阻止了 JdbcRowset 的利用，因此需要在
'autoCommit'属性之前设置字符串'dataSourceName'的值。(它看起来不像一个标准库bug ，
这有一个替代路径com.sun.rowset.CachedRowSetImpl->addRowSet()
到com.sun.rowset.JdbcRowSetImpl->getMetaData() )
使用特定的 top-level 类型，但不检查嵌套类型
  * References
> NMS-9100 OpenNMS
  * 可用 payloads
    * SpringBFAdv (4.12)
    * C3P0WrapDS (4.9)
  * 修复、缓解措施
没有配置白名单的选项，实现起来有点棘手。
#### 3.1.8 Java XMLDecoder
完全出于完整性的目的。众所周知，这种方法非常危险，因为它允许任意方法以及对任意类型的构造函数调用。
        /usr/bin/gedit
  * 修复、缓解措施
使用这个时，永远不要相信data。
### 3.2 基于字段的 marshallers
基于字段的 marshallers 通常在构造对象进行方法调用时提供的攻击面要小得多--有些甚至在不调用任何方法的情况下 unmarshal
非集合对象。同时，因为几乎没有那种可以不设置私有字段就被还原的对象，它们的确会直接影响对象内部结构，从而产生一些意想不到的副作用。另外，许多类型(
first 和 foremost 集合)无法使用它们的运行时表示有效地传输/存储。这就意味着所有基于字段的 marshallers
都会与为某些类型自定义的转换器绑定。这些转换器经常会发起攻击者提供的对象内的方法。例如，集合插入 会调用
java.lang.Object->hashCode(),java.lang.Object->equals(), 和
java.lang.Comparable->compareTo() 来分类变量。根据具体实现，也许有其他的可以被触发。
#### 3.2.1 Java Serialization
许多人，包括作者，自从 Chris Frohoff 和 GarbrielLawrence 发布了他们关于 Commons Collections,
Spring Beans 和 Groovy 的RCE payloads 都对 Java 序列化 gadgets
做过研究。尽管之前已经知道了类似的问题，Frohoff 和 Lawrence
的研究表明这不是孤立事件，而是一般性问题的一部分。这有许多可用的攻击组件，[ysoserial](https://github.com/frohoff/ysoserial/)
提供了大多数已发布的 gadgets 存储仓库，因此这里不会有更多的细节，除非他们可用用于其他机制。
  * 可用 payloads
    * XBean(4.14)
    * BeanComp(4.17)
  * 修复、缓解措施
Java 8u121 版引入了一个标准类型过滤机制。可以实现各种用户空间的白名单过滤。
#### 3.2.2 Kryo
Kryo ，默认配置下需要一个默认的public 构造函数 并且 不支持代理，许多已知的gadgets 都不能工作。然而它的实例化策略是可插式的，可以用
org.objenesis.strategy.StdInstantiatorStrategy 替换。 StdInstantiatorStrategy 基于
onReflectionFactor，这就表示自定义构造函数不会被调用， java.lang.Object 的构造函数仍会被调用。这就可以通过
finalize() 进行攻击。Arshan dabirsiaghiha
s已经描述了一些严重的[副作用](https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-1-kryo)
使用 Kryo 支持通过自定义比较器来排序集合， BeanComp 会在这里被调用。 SpringBFAdv 也可以工作，包括恢复常规
BeanFactorys 4.13的能力。如果替代实例化策略，将有更多的 gadgets 可用。(以及像 java.util.zip.ZipFile
的终止器-- 内存破坏(也可能被进一步利用))
Kryo 允许在 unmarshalling 时提供一个实际使用的 root
类型。对于嵌套的字段，这些检查值适用于具体类型，这意味着任何非最终类型都可用于触发任意类型的 unmarshalling 操作。
  * 可用 payloads
    * BeanComp (4.17)
    * SpringBFAdv (4.12)
  * 替代策略 可用 payloads
    * BindingEnum (4.4)eg
    * ServiceLoader (4.3)
    * LazySearchEnum (4.5)
    * ImageIO (4.6)
    * ROME (4.18)
    * SpringBFAdv (4.12)
    * SpringCompAdv (4.11)
    * Groovy (4.19)
    * Resin (4.15)
  * 附加风险
Kryo 可启用额外的转换器：BeanSerializer，一旦启用，意味着seter会被调用，也就是 JavaSerializer 和
ExternalizableSerializer。
  * 修复、缓解措施
Kryo可以设置为要求注册所有正在使用的类型。
#### 3.2.3 Hessian/Burlap
Hessian/Burlap,默认通过 sun.misc.Unsafe
使用无副作用的实例化,不对临时字段进行还原，不允许任意代理，不支持自定义集合比较函数。
乍一看，它们似乎在检查 java.io.Serializable 。然而检查仅在 marshalling 时进行， unmarshalling
时未检查。如果检查生效，大多数通过 pass 其他限制的攻击链就无法使用。但是，事实上检查并不生效，可以通过不可序列化的 SpringCompAdv 、
Resin，和可序列化的 ROME 、 XBean 进行攻击。
无法恢复 Groovy 的 MethodClosure ，因为调用 readResolve() 会抛出异常。
可以在 unmarshalling 过程中指定使用特定的 root 类型，然而，用户可以提供一个任意的、甚至不存在的类型。同时嵌套属性也将使用任意类型进行
unmarshall。
  * References
> REPORTED Included RPC servlets
>
> REPORTED Caucho Resin (RPC/HTMP)
>
> UNRESP TomEE/openejbhessian
>
> REJECT Spring Remoting
  * 可用 payloads
    * SpringCompAdv (4.11)
    * ROME (4.18)
    * XBean (4.14)
    * Resin (4.15)
  * 附加风险
提供了一个 BeanSerializerFactory 选项，这就意味着 setter 方法会被调用。基于 fallback 属性的 Java
反序列化器调用了各类无参数、默认参数的构造函数。如果配置了远程对象机制，可能用于DOS，似乎允许构建模拟对象（攻击者可以通过任意接口proxy的代理控制他们的返回值，这不仅仅是一个脆弱点，这也能被用于构建
gadgets ），可能运行攻击者使用无法到达的 endpoints 。
  * 修复、缓解措施
4.0.51 版本通过 ClassFactory 实现了一个白名单选项。
#### 3.2.4 json-io
调用了或多或少的任意构造函数，不支持代理。临时字段不进行保持，但是如果手动设置了进行恢复。这里包含几个别的小玩意：
  * "Brute-Force-Construction" : 如果没有默认构造器，json-io 会使用默认参数、或空参数尝试其他构造器直到成功一次。
  * "Two-Stage-Reconstruction" : 依赖于 hashCode() 的集合只有在所有其他对象都恢复之后才会恢复。例如，调用hashCode() 时，嵌套集合可能无法恢复。如果一个 gadget 通过集合插入被调用，并且本身就需要一个集合字段，可能需要一些技巧才能以正确的顺序获取这些 gadgets。
可以恢复 TemplatesImpl 和 Spring 的 DefaultListableBeanFactory，因此某些 gadgets
可能可以执行字节码。
root 类型不能被指定。
  * References
> MGNLCACHE-165 Magnolia CMS
>
> UNRESP json-command-servlet
  * 可用 payloads
    * LazySearchEnum (4.5)
    * SpringBFAdv (4.12)
    * Groovy (4.19)
    * ROME (4.18)
    * XBean (4.14)
    * Resin (4.15)
    * RMIRef (4.20)
    * RMIRemoteObj (4.21)
  * 修复、缓解措施
暂时还没有白名单。维护人员没有回应。
#### 3.2.5 XStream
本身已经有过大量针对XStream的警告信息和 exp 了。[targeting
java.beans.EventHandler](http://blog.diniscruz.com/2013/12/xstream-remote-code-execution-exploit.html32targeting\]) 、[targeting Groovy
](https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream) 。 XStream 试图允许尽可能多的对象图，默认转换器与java Serialization
类似。除了调用第一个不可序列化的父构造函数外， java Serialization 可用的 XStream 都可用，包括代理构造。这就表示大部分 java
Serialization 的 gadgets 都可以工作。这些类型甚至不需要实现 java.io.Serializable 。
root 类型可用在unmarshalling 时指定，但不会检查。
应该记住禁用 SerializableConverter/ExternalizableConverter、DynamicProxyConverter
都不能完全防御 gadgets 。使用 ServiceLoader, ImageIO,LazySearchEnum, and
BindingEnum，这些标准库的向量甚至都不需要使用代理。
  * References
> CVE-2016-5229 Atlassian Bamboo
>
> CVE-2017-2608 Jenkins
>
> REPORTED NetflixEureka
  * 可用 payloads
    * ImageIO (4.6)
    * BindingEnum (4.4)
    * LazySearchEnum (4.5)
    * ServiceLoader (4.3)
    * BeanComp (4.17)
    * ROME (4.18)