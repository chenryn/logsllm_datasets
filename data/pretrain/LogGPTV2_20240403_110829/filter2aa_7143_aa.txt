# Git 学习笔记
---
## 大纲
* **[原理](#原理)**
* **[基本操作](#基本操作)**
    * [分支管理](#分支管理)
    * [标签管理](#标签管理)
    * [忽略文件](#忽略文件)
    * [别名](#别名)
    * [撤销Git操作](#撤销git操作)
    * [跳转](#跳转)
    * [子模块](#子模块)
    * [大小写](#大小写)
* **[远程操作](#远程操作)**
    * [clone](#clone)
    * [remote](#remote)
    * [fetch](#fetch)
    * [pull](#pull)
    * [push](#push)
    * [github](#github)
    * [Git_LFS](#git_lfs)
---
## 原理
**工作区(Working Directory)**
就是你在电脑里能看到的目录，比如我的 gitcode 文件夹就是一个工作区.
**版本库(Repository)**
工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库.
Git 的版本库里存了很多东西，其中最重要的就是称为 stage(或者叫 index)的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD .
把文件往 Git 版本库里添加的时候，是分两步执行的:
- 第一步是用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区;
- 第二步是用 git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支.
因为我们创建 Git 版本库时，Git 自动为我们创建了唯一一个 master 分支，所以，现在，git commit 就是往 master 分支上提交更改.
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改.
**.git 目录**
结构展开类似
```
├── HEAD
├── branches
├── config
├── description
├── hooks
│ ├── pre-commit.sample
│ ├── pre-push.sample
│ └── ...
├── info
│ └── exclude
├── objects
│ ├── info
│ └── pack
└── refs
 ├── heads
 └── tags
```
- conf
    conf 文件中包含着 repository 的配置，包括 remote 的地址，提交时的 email, username, 等等，所有通过 git config .. 来设置的内容都在这里保存着。如果熟悉甚至可以直接修改该文件。
- description
    被 gitweb(github 之前) 用来描述 repository 内容。
- hooks
    hooks，国内通常被翻译成钩子，git 中一个比较有趣的功能。可以编写一些脚本让 git 在各个阶段自动执行。这些脚本被称为 hooks, 脚本可以在 commit/rebase/pull 等等环节前后被执行。脚本的名字暗示了脚本被执行的时刻。一个比较常见的使用场景就是在 pre-push 阶段检查本地提交是否遵循了 remote 仓库的代码风格。
- info exclude
    该文件中定义的文件不会被 git 追踪，和 .gitignore 作用相同。大部分情况下 .gitignore 就足够了，但知道 info/exclude 文件的存在也是可以的。
- object
    每一次创建一些文件，提交，git 都会压缩并将其保存到自己的数据结构中。压缩的内容会拥有一个唯一的名字，一个 hash 值，该 hash 值会保存到 object 目录中。
- HEAD
    HEAD 可以比喻成一个指针，指向当前工作的分支。
---
## 基本操作
```bash
git config --global user.name "username"
git config --global user.email PI:EMAIL
# 如果使用了 -global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情，Git 都会使用那些信息.当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 -global 选项的命令来配置.
git config --global http.proxy                              # 查看当前代理设置
git config --global http.proxy 'socks5://127.0.0.1:1080'    # 设置当前代理
git config --global https.proxy 'socks5://127.0.0.1:1080'   # 设置当前代理
git config --global --unset https.proxy                     # 删除 proxy
git init                    # 初始化仓库
git config --list           # 检查配置信息
git config user.name        # 查看用户名
git config user.email       # 查看邮箱
git status                  # 查看状态
git diff                    # 查看已暂存和未暂存的修改
git diff --cached           # 查看暂存区和本地仓库之间的差异
git log                     # 查看提交历史
git reflog                  # 显示当前分支的最近几次提交
git commit -m "Input your commit message"       # 提交更新
git commit -a -m "Commit message"               # 跳过使用暂存区
git commit --allow-empty-message --no-edit      # 懒得什么 message 都不想写
git commit -m 'test1
test2
test3
'                           # 提交多行 massage
git rm 
git mv file_from file_to
已修改，未暂存
# 如果我们只是在编辑器里修改了文件，但还没有执行 git add .，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用
git checkout -- test.txt  # git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以 "一键还原".
git reset HEAD file         # 把暂存区的修改撤销掉(unstage)，重新放回工作区
已暂存，未提交
# 你已经执行了 git add .，但还没有执行 git commit -m "comment".这时候你意识到了错误，想要撤销，你可以执行:
git reset
git checkout .
已提交，未推送
# 你的手太快，你既执行了 git add .，又执行了 git commit，这时候你的代码已经进入了你的本地仓库，然而你后悔了，怎么办？不要着急，还有办法.
git reset --hard origin/master
# 还是这个 git reset --hard 命令，只不过这次多了一个参数 origin/master，正如我们上面讲过的，origin/master 代表远程仓库，既然你已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.
已推送
# 很不幸，你的手实在是太快了，你既 git add 了，又 git commit 了，并且还 git push 了，这时你的代码已经进入远程仓库.如果你想恢复的话，还好，由于你的本地仓库和远程仓库是等价的，你只需要先恢复本地仓库，再强制 push 到远程仓库就好了:
git reset --hard HEAD^
git push -f
```
---
### 分支管理
```bash
git branch                  # 查看分支
git branch -r               # 查看远程分支
git branch -a               # 查看所有分支
git branch            # 创建分支
git checkout          # 切换分支
git checkout -b       # 创建 + 切换分支
git merge             # 合并某分支到当前分支
git branch -d         # 删除分支
git stash                   # 储藏分支
git stash list
git stash pop               # 恢复的同时把 stash 内容也删了
```
---
### 标签管理
```bash
# 注意，标签不是按时间顺序列出，而是按字母排序的.可以用 git show  查看标签信息
git tag  用于新建一个标签，默认为 HEAD，也可以指定一个 commit id;
git tag -a  -m "blablabla..." 可以指定标签信息;
git tag -s  -m "blablabla..." 可以用 PGP 签名标签;
git tag 可以查看所有标签.
git push origin  可以推送一个本地标签;
git push origin --tags 可以推送全部未推送过的本地标签;
git tag -d  可以删除一个本地标签;
git push origin :refs/tags/ 可以删除一个远程标签.
```
---
### 忽略文件
一个名为 `.gitignore` 的文件，列出要忽略的文件模式.
配置语法:
```
以斜杠 "/" 开头表示目录;
以星号 "*" 通配多个字符;
以问号 "?" 通配单个字符
以方括号 "[]" 包含单个字符的匹配列表;
以叹号 "!" 表示不忽略(跟踪)匹配到的文件或目录;
/*
!.gitignore
!/fw/bin/
!/fw/sf/
说明:忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录;
```
此外，git 对于 `.ignore` 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效;
---
### 别名
```bash
以下2条都是对 git lg 的 alias
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit --"
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset'"
```
---
### 撤销Git操作
**撤销提交**
一种常见的场景是，提交代码以后，你突然意识到这个提交有问题，应该撤销掉，这时执行下面的命令就可以了。
```bash
git revert HEAD
```
上面命令的原理是，在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。
`git revert` 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交。比如，抵消前两个提交，要像下面这样写。
```bash
git revert [倒数第一个提交] [倒数第二个提交]
```
git revert 命令还有两个参数。
```bash
--no-edit   # 执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。
--no-commit # 只抵消暂存区和工作区的文件变化，不产生新的提交。
```
**丢弃提交**
如果希望以前的提交在历史中彻底消失，而不是被抵消掉，可以使用 `git reset` 命令，丢弃掉某个提交之后的所有提交。
```bash
git reset [last good SHA]
```
`git reset` 的原理是，让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。
默认情况下，`git reset` 不改变工作区的文件（但会改变暂存区），`--hard` 参数可以让工作区里面的文件也回到以前的状态。
```bash
git reset --hard [last good SHA]
```
执行 `git reset` 命令之后，如果想找回那些丢弃掉的提交，可以使用 `git reflog` 命令，具体做法参考这里。不过，这种做法有时效性，时间长了可能找不回来。
**替换上一次提交**
提交以后，发现提交信息写错了，这时可以使用 `git commit` 命令的 `--amend` 参数，可以修改上一次的提交信息。
```bash
git commit --amend -m "Fixes bug #42"
```
它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。
这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，`--amend` 不仅可以修改提交信息，还可以整个把上一次提交替换掉。
**修改上一次的 commit**
```bash
git commit --amend
```
**撤销工作区的文件修改**
如果工作区的某个文件被改乱了，但还没有提交，可以用 `git checkout` 命令找回本次修改之前的文件。
```
git checkout -- [filename]
```
它的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则恢复上一次提交的版本。
注意，工作区的文件变化一旦被撤销，就无法找回了。
**从暂存区撤销文件**
如果不小心把一个文件添加到暂存区，可以用下面的命令撤销。
```bash
git rm --cached [filename]
```
上面的命令不影响已经提交的内容。
**撤销当前分支的变化**
你在当前分支上做了几次提交，突然发现放错了分支，这几个提交本应该放到另一个分支。
```bash
# 新建一个 feature 分支，指向当前最新的提交
# 注意，这时依然停留在当前分支
$ git branch feature
# 切换到这几次提交之前的状态
$ git reset --hard [当前分支此前的最后一次提交]
# 切换到 feature 分支
$ git checkout feature
```
上面的操作等于是撤销当前分支的变化，将这些变化放到一个新建的分支。
---
### 跳转