100000
)
e
l
a
c
s
g
o
l
(
n
w
o
d
w
o
l
S
10000
1000
100
10
1
(IMAP)
1755
(IRC)
1382
(MS-SQL) (NetBIOS)
(Oracle)
2003
2403
2611
(SMTP)
3682
(SMTP)
2087
Targeted Rule ID
Figure 8. Relative processing times for be-
nign and attack trafﬁc, and attack trafﬁc
with memoization. Memoization conﬁnes the
slowdown to less than one order of magni-
tude.
group of traces were captured on the link between a univer-
sity campus and a departmental network with 1,200 desk-
top and laptop computers, a number of high-trafﬁc servers
(web, ftp, ntp), and scientiﬁc computing clusters generating
high volumes of trafﬁc. These traces are 7 minutes long and
range in size from 3.1 GB to just over 8 GB. The second
group of traces were captured in front of a few instructional
laboratories totaling 150 desktop clients. They are also 7
minutes long and range in size from 816 MB to 2.6 GB.
We created attack trafﬁc by generating ﬂows correspond-
ing to several protocols and supplying payloads that are
constructed in a similar manner to the payload construction
outlined in Section 4.
In the trace-based experiments, we fed the benign trafﬁc
and attack trafﬁc traces into Snort and observed the perfor-
mance. We performed these experiments with and without
memoization enabled. Figure 8 shows the slowdowns expe-
rienced due to backtracking attacks targeting several rules
and the corresponding defense rates. It summarizes the in-
formation in Table 2. In each group, the leftmost bar repre-
sents the cost of packet processing for the speciﬁed protocol
relative to 20.6 s/GB, the combined average packet process-
ing rate in all our traces. For Rule 1382 (IRC), the rate is
less than 1, reﬂecting the fact that the average trafﬁc pro-
cessing time for IRC trafﬁc is less than the baseline.
The central bar in each group shows the slowdown ob-
served by packets crafted to target the speciﬁc rules indi-
cated at the base of each group. The attacks result in pro-
cessing times that are typically several orders of magnitude
slower than the baseline, with the most egregious attack
coming in at a factor of 1.5 million times slower. Finally,
in the rightmost bar of each group we see the result of each
attack repeated with the memoization defense deployed. In
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:31:51 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Protocol
Rule
ID
Trace
trafﬁc
IMAP
IRC
MS-SQL
NetBIOS
Oracle
SMTP
1755
1382
2003
2403
2611
3682
200.6
14.6
119.3
729.7
110.5
132.8
SMTP 3682, w/o reassembly
132.8
SMTP
2087
Processing time (seconds/gigabyte)
Backtracking attack
Original
89,181
1,956,858
18,206
357,777
6,220,768
30,933,874
1,986,624
175,657
Basic Memo. Memo+Opt.
91.9
87.6
140.4
122.0
174.0
126.4
103.1
164.5
1,802
1,170
715
57,173
3,666
2,192
903
5,123
Slowdown
Slowdown
w.r.t. avg trafﬁc
Original
4,329×
94,993×
884×
17,368×
301,979×
1,501,644×
96,438×
8,527×
w.r.t. same protocol
Original
Memo+Opt
444×
4.46×
4.25× 134,031×
6.82×
152×
5.92×
490×
56,296×
8.45×
6.14× 232,936×
5.00×
14,960×
7.99×
1,323×
Memo+Opt
0.46×
6.00×
1.17×
0.17×
1.57×
0.95×
0.78×
1.24×
Table 2. Strength of the backtracking attack and feasibility of the memoization defense. Columns
7-8 shows the overall slowdown under attack when memoization is not and is used. Columns 9-10
shows similar slowdowns with respect to the same protocol.
most cases, Snort performance when under attack is com-
parable if not better than when not under attack.
Table 2 details the attacks and the defenses quantitatively
for several different protocols. For each attack, Columns 1
and 2 give the protocol and the targeted Rule ID to which
the attack belongs, respectively. Column 3 shows the aver-
age processing time for each protocol. Columns 4 through
6 show the raw processing times for attack packets under an
unmodiﬁed Snort, Snort with basic memoization, and Snort
with fully optimized memoization. Columns 7-8 give over-
all slowdowns and Columns 9-10 supply the slowdowns
on a per-protocol basis. The backtracking attack achieves
slowdowns between 3 and 5 orders of magnitude for rules
from many protocols. When memoization is employed, the
overall slowdown is conﬁned to within one order of mag-
nitude. Per-protocol, memoization conﬁnes most attacks to
within a factor of two of their normal processing time.
Rows 7 and 8 highlight the impact that reassembly has on
the processing time. In this experiment, when reassembly
is performed the size of the virtual packet fed to the rule-
matching engine is only twice the size of a non-reassembled
packet, but the processing time is almost 16× longer.
The effects of the three memoization optimizations can
be seen by comparing Columns 5 and 6 in Table 2. The
strength of the optimizations varies by protocol, ranging
from just under a factor of 10 to just over a factor of 30, ex-
cluding the NetBIOS outlier. In the Snort rule set, NetBIOS
rules contain many predicates that can be decomposed into
constrained predicate sequences. These rules beneﬁt con-
siderably from the optimizations. The accompanying tech-
nical report [21] contains the individual contributions of
each optimization to the reduction in processing time.
Recall that the attacks applied are all low-bandwidth at-
tacks. Even though the overall slowdown rate using mem-
oization is up to an order of magnitude slower, these rates
apply only to the attack packets (which are few in number)
and not to the overall performance of Snort. Under mem-
oization, processing times for attack packets fall within the
normal variation exhibited by benign packets.
In the rightmost column, slowdowns less than 1.0 indi-
cate that with all the optimizations included, Snort was able
to process backtracking attack packets more quickly than it
could process legitimate trafﬁc. In other words, our opti-
mizations allowed Snort to reject these attack packets more
quickly than it otherwise was able since fewer overall pred-
icate evaluations are performed.
6.2. Evading a live Snort
In this section we demonstrate the efﬁcacy of the back-
tracking attack by applying it to a live Snort installation. We
ﬁrst show successful evasion by applying the attack under a
variety of conditions. We then show that with memoization,
all the formerly undetected attacks are observed.
Figure 9 shows the topology used for testing evasion for
this experiment. To induce denial of service in Snort, we use
an SMTP backtracking attack that connects to a Sendmail
SMTP server in the protected network. We are using this
attack to mask a Nimda [1] exploit normally recognized by
Snort. Both the Nimda exploit and its SMTP cover are sent
from the same attacking computer. Each Nimda exploit is
sent one byte at a time in packets spaced 1 second apart. To
simulate real world conditions, we used the Harpoon trafﬁc
generator [23] to continuously generate background trafﬁc
at 10 Mbps during the experiments.
We measure the effectiveness of the backtracking attack
by the number of malicious exploits that can slip by Snort
undetected over various time frames. We initiated a new
Nimda exploit attempt every second for 5 minutes, yield-
ing 300 overlapping intrusion attempts. Table 3 shows the
results. Test 1 is the control: when the backtracking ex-
ploit is not performed, Snort recognizes and reports all 300
exploits despite our fragmenting them. In Test 2, we sent
two backtracking attack packets every 60 seconds for the
duration of the experiment. Snort missed only one-third of
the attacks, detecting 222 out of 300 intrusion attempts. In
Test 3, we increased the frequency of the backtracking at-
tacks to 2 packets every 15 seconds, dropping the detection
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:31:51 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006External Network
Protected Network
Attacker
Background
Traffic
Generator
   

 

   

 

 

    

 

    

 

    

 

    

 

 

   

 

   

 

   

 

   

 

   

 

   

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

   

 

   

 

 

    

 

    

 

    

 

    

 

 

   

 

   

 

   

 

   

 

   

 

   

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 