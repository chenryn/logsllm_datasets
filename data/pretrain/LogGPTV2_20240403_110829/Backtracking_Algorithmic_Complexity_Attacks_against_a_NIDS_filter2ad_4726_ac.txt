### Relative Processing Times for Benign and Attack Traffic

Figure 8 illustrates the relative processing times for benign and attack traffic, as well as the impact of memoization on attack traffic. Memoization confines the slowdown to less than one order of magnitude.

### Trace Data Collection

Two groups of network traces were captured:
1. **University Campus to Departmental Network:**
   - **Devices:** 1,200 desktop and laptop computers, high-traffic servers (web, FTP, NTP), and scientific computing clusters.
   - **Traffic Volume:** High volumes of traffic.
   - **Trace Duration:** 7 minutes.
   - **Trace Size:** Ranging from 3.1 GB to just over 8 GB.

2. **Instructional Laboratories:**
   - **Devices:** 150 desktop clients.
   - **Trace Duration:** 7 minutes.
   - **Trace Size:** Ranging from 816 MB to 2.6 GB.

### Attack Traffic Generation

We generated attack traffic by creating flows corresponding to several protocols and supplying payloads similar to those outlined in Section 4.

### Experimental Setup

In our trace-based experiments, we fed both benign and attack traffic traces into Snort and observed the performance with and without memoization enabled. Figure 8 summarizes the slowdowns experienced due to backtracking attacks targeting specific rules and the corresponding defense rates. The leftmost bar in each group represents the cost of packet processing for the specified protocol relative to a baseline of 20.6 seconds per gigabyte. For example, for Rule 1382 (IRC), the rate is less than 1, indicating that the average traffic processing time for IRC traffic is below the baseline.

The central bar in each group shows the slowdown observed when packets are crafted to target specific rules. These attacks typically result in processing times several orders of magnitude slower than the baseline, with the most severe attack being 1.5 million times slower. The rightmost bar in each group shows the results when the memoization defense is deployed, which generally confines the slowdown to within one order of magnitude.

### Detailed Analysis

Table 2 provides a quantitative analysis of the attacks and defenses for various protocols. Columns 1 and 2 specify the protocol and the targeted Rule ID, respectively. Column 3 shows the average processing time for each protocol. Columns 4 through 6 show the raw processing times for attack packets under an unmodified Snort, Snort with basic memoization, and Snort with fully optimized memoization. Columns 7-8 give the overall slowdowns, and Columns 9-10 provide the slowdowns on a per-protocol basis.

#### Backtracking Attacks and Memoization

- **Backtracking Attacks:** Achieve slowdowns between 3 and 5 orders of magnitude for rules from many protocols.
- **Memoization Defense:** Confines the overall slowdown to within one order of magnitude. Per-protocol, memoization generally confines most attacks to within a factor of two of their normal processing time.

#### Impact of Reassembly

Rows 7 and 8 highlight the impact of reassembly on processing time. When reassembly is performed, the size of the virtual packet fed to the rule-matching engine is only twice the size of a non-reassembled packet, but the processing time is almost 16 times longer.

#### Optimization Effects

The three memoization optimizations can be seen by comparing Columns 5 and 6 in Table 2. The strength of these optimizations varies by protocol, ranging from just under a factor of 10 to just over a factor of 30, excluding the NetBIOS outlier. NetBIOS rules benefit significantly from these optimizations due to the presence of many predicates that can be decomposed into constrained predicate sequences.

### Low-Bandwidth Attacks

The applied attacks are all low-bandwidth. Even though the overall slowdown rate using memoization is up to an order of magnitude slower, these rates apply only to the attack packets (which are few in number) and not to the overall performance of Snort. Under memoization, processing times for attack packets fall within the normal variation exhibited by benign packets.

### Evasion of Live Snort

To demonstrate the efficacy of the backtracking attack, we applied it to a live Snort installation. We first showed successful evasion under various conditions and then demonstrated that with memoization, all formerly undetected attacks were observed.

#### Testing Topology

Figure 9 shows the topology used for testing evasion. To induce denial of service in Snort, we used an SMTP backtracking attack that connects to a Sendmail SMTP server in the protected network. This attack was used to mask a Nimda exploit, with both the exploit and its SMTP cover sent from the same attacking computer. Each Nimda exploit was sent one byte at a time in packets spaced 1 second apart. Background traffic was generated at 10 Mbps using the Harpoon traffic generator.

#### Effectiveness Measurement

We measured the effectiveness of the backtracking attack by the number of malicious exploits that could slip by Snort undetected over various time frames. We initiated a new Nimda exploit attempt every second for 5 minutes, yielding 300 overlapping intrusion attempts. Table 3 summarizes the results:

- **Test 1 (Control):** Without the backtracking exploit, Snort recognized and reported all 300 exploits.
- **Test 2:** Two backtracking attack packets were sent every 60 seconds, resulting in Snort missing one-third of the attacks (detecting 222 out of 300).
- **Test 3:** Increased the frequency of backtracking attacks to 2 packets every 15 seconds, further reducing detection.

### Conclusion

Memoization effectively mitigates the impact of backtracking attacks, confining the slowdown to within one order of magnitude and allowing Snort to process attack packets more quickly than legitimate traffic in some cases.