URL 或 Cookie
值的参数中插入换行符，且该换行符又被直接作为响应输出的话，就会产生 HTTP
消息头注入漏洞。
> **专栏：HTTP 消息头与换行**
>
> URL 和 Cookie 中本身可不可以包含换行符呢？首先，标准规格中规定了 URL
> 不能包含换行符。因为查询字符串中包含换行符时会被百分号编码为
> %0D%0A，而重定向处理中传递 URL 时照理已经执行过了百分号编码，因此 URL
> 中有换行符是不正常的。
>
> 另一方面，Cookie 值中有时则需要加入换行符。而由于 Cookie
> 值中除了不能有换行符，也不能包含空格、逗号或分号，因此习惯对 Cookie
> 值进行百分号编码[45]{.注释编号} 。百分号编码后，换行符被编码为
> %0D%0A，也就不会产生 HTTP 消息头注入漏洞了。
[45]{.注释编号下} Netscape 公司的 Cookie 规格中有如下记载：This string
is a sequence of characters excluding semi-colon, comma and white space.
If there is a need to place such data in the name or value, some
encoding method such as URL style %XX encoding is recommended, though no
encoding is defined or required.
#### **对策**
针对 HTTP 消息头注入漏洞，最可靠的对策就是不将外界传入的参数
[46]{.注释编号} 作为 HTTP 响应消息头输出。
[46]{.注释编号下} 外界传入的参数的一个典型的例子就是 HTTP
请求中的值，除此之外，也包括经过电子邮件或数据库等从外部发送过来的参数。
-   **对策 1：不将外界参数作为 HTTP 响应消息头输出**
    绝大多数情况下，经过重新进行设计评估后，都能够做到不将外界参数作为
    HTTP 响应消息头输出。Web 应用中会用到输出 HTTP
    响应消息头的典型功能为重定向和生成
    Cookie，而只要遵循以下方针，就能大幅减少直接将外界参数作为消息头输出的机会。
    -   不直接使用 URL
        指定重定向目标，而是将其固定或通过编号等方式来指定
    -   使用 Web 应用开发工具中提供的会话变量来移交 URL
    因此，在设计阶段就应该尽量不把外界参数作为 HTTP
    响应消息头输出。而如果无论如何都必须将外界参数输出到 HTTP
    响应消息头中的话，可以参考以下对策。
-   **对策 2：执行以下两项内容**
    > -   由专门的 API 来进行重定向或生成 Cookie 的处理
    >
    > -   校验生成消息头的参数中的换行符
    下面我们就来对这两项内容进行详细解说。
    -   **由专门的 API 来进行重定向或生成 Cookie 的处理**
        CGI 脚本中能够使用 `print` 等语句直接记述 HTTP
        响应消息头，但是使用这种方法需要严格遵守 HTTP 和 Cookie
        等的标准规格，否则就可能会导致安全隐患等 Bug 的产生。
        Perl 语言的 CGI 模块或 PHP 等 Web
        应用开发语言或程序库中提供了功能丰富的函数，通过使用这些函数输出
        HTTP 消息头，原则上就能够防范安全隐患。表 4-16
        归纳了各语言中提供的输出 HTTP
        消息头的功能。但需要注意的是，应当尽量利用生成 Cookie
        以及重定向功能的程序库，程序库中未提供的情况下才使用输出响应消息头的功能。
        **表 4-16 各语言中提供的输出 HTTP 响应消息头的功能**
          -------------- ------------------------------- ---------------------------------- -------------------------------
          语言           生成 Cookie                     重定向                             输出响应消息头
          PHP            setcookie / setrowcookie        无（利用 header）                  header
          Perl+CGI.pm    CGI::Cookie                     redirect                           header
          Java Servlet   HttpServletResponse#addCookie   HttpServletResponse#sendRedirect   HttpServletResponse#setHeader
          ASP.NET        Response.Cookies.Add            Response.Redirect                  Response.AppendHeader
          -------------- ------------------------------- ---------------------------------- -------------------------------
        使用了这些程序库后，理想状态下就能消除 HTTP
        消息头注入漏洞了。然而遗憾的是，现实中即使利用了上面这些功能，有时也无法完全杜绝安全隐患。
        因此，我们需要同时实施以下对策。
    -   **检验生成消息头的参数中的换行符**
        HTTP 响应消息头相关的 API
        中很多都没有检验换行符。而在笔者看来，之所以出现这种情况，大概是因为业界就究竟该由
        API（程序库）还是应用方面来负责 HTTP
        消息头注入这一问题还没有达成共识。虽然笔者的观点是应该由 API
        方面负责，但是由于目前 API
        方面做的还不够充分，因此，为了保护自己，我们就不得不在应用方面多下功夫。
        针对换行符的处理方法有如下两种。
        -   URL 中含有换行符时就报错
        -   将 Cookie 中的换行符进行百分号编码
        如果程序库中已经对 Cookie
        值进行了百分号编码，那么应用中就可以省去这一操作。PHP 的
        `setcookie` 函数和 Perl 的 `CGI::Cookie` 模块会在程序库中对
        Cookie 值进行百分号编码。使用其他的语言或程序库时，请事先调查
        Cookie 值是否会被百分号编码。
        接下来就让我们看一下通过 PHP 的 `header`
        函数来实现包含字符种类校验功能的重定向函数的示例。
        > **代码清单 /47/47-030.php**
        ``` 代码无行号
        ```
        这段脚本定义了名为 `redirect` 的函数，函数中会校验 URL
        的字符种类，只在校验通过的情况下才能使用 `header`
        函数执行重定向操作。
        但是，`redirect` 函数内仅进行了字符种类的校验，并没有校验 URL
        的格式是否正确。另外，此处的字符种类校验规则比 RFC3986
        还要严格，指定 IPv6 的 IP 地址时 `[` 和 `]`
        都会被报错。因此，在进行操作时，应该根据实际用途来调整具体的校验规则。
> **专栏：PHP 的 header 函数中进行的换行符校验**
>
> 根据 PHP 的官方文档[47]{.注释编号} ，4.4.2 以及 5.1.2 版本的 `header`
> 函数的更新日志中有如下记载："为了防范消息头注入攻击，该函数不能一次发送多个消息头"。
>
> 但是，作为消息头注入攻击的应对策略，这个方法并不充分。PHP
> 中校验换行符时仅校验了 LF（0x0A），而没有校验 CR（0x0D）（确认于 PHP
> 5.3.5）。因此，在部分用户的浏览器上，仅使用 CR 换行符的 HTTP
> 消息头注入攻击仍然是有效的。
>
> 笔者调查后发现，针对 Internet Explorer、Google Chrome、Opera 这 3
> 种浏览器，实施仅使用 CR 换行符的 HTTP
> 消息头注入攻击都能够取得成功，而在 Firefox 和 Apple Safari
> 中攻击则没有奏效。
>
> 而从以上事实中也能够看出，仅依靠 PHP 的 `header`
> 函数中的校验来实现重定向处理是存在危险的。
[47]{.注释编号下} 
### **4.7.3 重定向相关的安全隐患总结** {#text00000.html#nav_point_37}
重定向处理中产生的典型安全隐患为自由重定向漏洞和 HTTP 消息头注入漏洞。
针对这两个漏洞的对策可归纳如下。
-   重定向处理尽量使用专门的 API（程序库函数）
-   以下任选其一
    -   固定重定向目标（推荐）
    -   重定向目标 URL 由外界指定时，务必校验字符种类和域名
## **4.8 Cookie 输出相关的安全隐患** {#text00000.html#nav_point_38}
Web 应用中广泛使用 Cookie 来进行会话管理，而如果 Cookie
的使用方法不当就会滋生安全隐患。与 Cookie
相关的安全隐患大致可分为以下两类。
-   Cookie 的用途不当
-   Cookie 的输出方法不当
本节将首先介绍 Cookie 的正确用途，即 Cookie 应当被用于保存会话
ID，而不应该将应用的数据保存在 Cookie 中。具体原因在后面会进行说明。
接着我们会详细讲述输出 Cookie 时容易产生的安全隐患，有如下两种。
-   HTTP 消息头注入漏洞
-   Cookie 的安全属性设置不完善
以上两种都是与被动攻击相关的安全隐患。HTTP 消息头注入漏洞在 4.7.2
节中已经做过介绍。而 Cookie 的安全属性设置不完善这一点将在 4.8.2
节中讲述。
### **4.8.1 Cookie 的用途不当** {#text00000.html#nav_point_39}
Web 应用中需要存储包含多个网页的信息时，一般会使用 PHP 或 Servlet
容器等提供的会话管理机制。通常情况下，会话管理机制仅将会话 ID 保存至
Cookie，而将数据本身保存在 Web 服务器的内存或文件、数据库中。如果在
Cookie 中保存了不该保存的数据，就有可能产生安全隐患。
-   **不该保存在 Cookie 中的数据**
    下面我们来看一下因在 Cookie
    中保存了不恰当的内容而引发安全隐患的情况。我们知道，外界无法更改会话变量，而应用的用户则能够更改自己的
    Cookie 值。因此，如果将不希望被用户擅自更改的数据保存在 Cookie
    中，就有可能会导致安全隐患。
    像用户名和权限信息等，就是不可以被用户擅自更改的数据的代表性例子。一旦将这些信息保存在
    Cookie 中，就有可能出现用户越权操作或越权浏览等现象。详情请参考 5.3
    节。
-   **参考：最好不要在 Cookie 中保存数据的原因**
    尽管将数据保存在 Cookie
    中并非一定会造成安全隐患，但一般还是不推荐这种做法。为了解释其原因，我们先来看一下表
    4-17 中所归纳的将数据保存至 Cookie 和使用会话变量这两种方法的比较。
    **表 4-17 Cookie 和会话变量的比较**
      ---------------------------------------- ------------------------------------------------- --------------------------------------------------------
                                               Cookie                                            会话变量
      易用性                                   通过 API 进行取值和赋值                           与普通变量的用法基本一致
      存储数组或对象                           需要在应用中转换为字符串                          大多都和变量一样可以直接赋值
      容量限制                                 有严格的限制                                      使用上没有限制
      用户直接查看存储的信息                   容易                                              不可能
      漏洞等导致 Cookie 泄漏后的信息泄漏情况   Cookie 被泄漏后信息也会被泄漏                     可以通过控制使信息不易泄漏
      数据被用户更改                           容易                                              不可能
      数据被第三方更改                         如果有 XSS 或 HTTP 消息头注入等漏洞就可能被更改   即使有可导致 Cookie 被更改的漏洞，会话变量也无法被更改
      控制信息的有效期限                       容易                                              仅限当前会话
      不同服务器之间共享信息                   域名相同时可能                                    基本不可能
      ---------------------------------------- ------------------------------------------------- --------------------------------------------------------
    如上表所示，使用会话变量无法实现而使用 Cookie
    可以实现的项目，只有控制信息有效期限和不同服务器之间共享信息这两点。除此以外，会话变量既安全又便利，因此，一般来说最好使用会话变量。
    会话变量之所以可以通过控制使信息不易泄漏，是因为在 Web
    应用中，在显示机密信息时可以要求用户再次输入密码（再认证）。另外，会话过期（Session
    Timeout）后，保存在会话中的信息也就会无法显示。而将信息保存在 Cookie
    中的情况下则很难进行这样的控制。
    另一方面，如果需要保存一些横跨会话和服务器的信息，则可以使用
    Cookie。其中一个典型的案例就是登录页面的"保持登录状态"功能。图 4-71
    为 Google
    的登录页面，密码框下有"保持登录状态"的单选框，选中它后就会通过
    Cookie 保持登录状态。
    ![](Image00118.jpg){.sgc-10 width="70%"}
    **图 4-71 Google 的登录页面**
    关于如何实现"保持登录状态"的功能，请参考 5.1.4 节。另外，此情况下
    Cookie
    中同样也应当只保存随机数，称为令牌。而不要将用户名和密码等"数据"保存在
    Cookie 中。认证状态等信息则由服务器来管理。
> **专栏：Padding Oracle 攻击与 MS10-070**
>
> 在一些 Web
> 应用开发框架中，会话信息不仅会被保存在服务器端，而且还会在客户端以
> hidden 参数或加密 Cookie 的形式保存。其中一个典型的例子就是
> ASP.NET，它的页面状态（ViewState）被保存在 hidden
> 参数中，而认证状态（Form Authentication Ticket）则被保存在了 Cookie
> 中。而且这些值都会使用 RFC2040 算法进行加密。
>
> 然而，在 2010 年 9 月 17 日的 Ekoparty 安全会议上，T.Duong 与 J.Rizzo
> 两人表示通过名为 Padding Oracle [48]{.注释编号}
> 的攻击方法就能够破解这些加密信息。微软立刻意识到了事态的严重性，成立紧急对应小组在
> 10
> 天时间内开发出了对应的补丁程序，并打破更新补丁每月发布一次的惯例，破例对外紧急提供。这就是
> MS10-070 安全更新补丁（2010 年 9 月 29 日发布）。
>
> 而从这个事件中我们也能够得到两个教训。第一，即使进行了加密，保存在客户端的信息也有被解密的风险。第二，平台中提供的会话管理机制被曝出安全隐患后，需要在最短时间内将问题解决。有关平台中的安全隐患的对应措施，请参考
> 7.1 节。
>
> -   **参考**
>
>     -   Ekoparty 安全会议上发表的幻灯片（英文）
>
>         