### HTTP 消息头注入漏洞

当 URL 或 Cookie 值的参数中插入换行符，并且该换行符被直接作为响应输出时，就会产生 HTTP 消息头注入漏洞。

#### 专栏：HTTP 消息头与换行

**URL 和 Cookie 中是否可以包含换行符？**

根据标准规格，URL 不能包含换行符。查询字符串中的换行符会被编码为 `%0D%0A`，而重定向处理中传递的 URL 已经经过了百分号编码，因此 URL 中出现换行符是不正常的。

另一方面，Cookie 值有时需要包含换行符。由于 Cookie 值中不能包含空格、逗号或分号，通常会对 Cookie 值进行百分号编码。编码后，换行符会变成 `%0D%0A`，从而避免了 HTTP 消息头注入漏洞。

> **注释** [45] Netscape 公司的 Cookie 规格中有如下记载：This string is a sequence of characters excluding semi-colon, comma and white space. If there is a need to place such data in the name or value, some encoding method such as URL style %XX encoding is recommended, though no encoding is defined or required.

#### 对策

针对 HTTP 消息头注入漏洞，最可靠的对策是不要将外界传入的参数作为 HTTP 响应消息头输出。

- **对策 1：不将外界参数作为 HTTP 响应消息头输出**
  - 在绝大多数情况下，通过重新设计评估，可以避免将外界参数作为 HTTP 响应消息头输出。
  - Web 应用中常见的功能如重定向和生成 Cookie，可以通过以下方法减少直接输出外界参数的机会：
    - 不直接使用 URL 指定重定向目标，而是通过编号等方式固定。
    - 使用 Web 应用开发工具中的会话变量来传递 URL。

- **对策 2：执行以下两项内容**
  - 由专门的 API 来处理重定向或生成 Cookie。
  - 校验生成消息头的参数中的换行符。

##### 由专门的 API 来进行重定向或生成 Cookie 的处理

CGI 脚本中可以直接使用 `print` 等语句输出 HTTP 响应消息头，但这种方法容易导致安全隐患。Perl 语言的 CGI 模块、PHP 等 Web 应用开发语言提供了丰富的函数，通过这些函数输出 HTTP 消息头，原则上能够防范安全隐患。表 4-16 归纳了各语言中提供的输出 HTTP 响应消息头的功能。

| 语言         | 生成 Cookie       | 重定向                           | 输出响应消息头             |
|--------------|-------------------|----------------------------------|---------------------------|
| PHP          | setcookie / setrowcookie | 无（利用 header）               | header                    |
| Perl+CGI.pm  | CGI::Cookie       | redirect                        | header                    |
| Java Servlet | HttpServletResponse#addCookie | HttpServletResponse#sendRedirect | HttpServletResponse#setHeader |
| ASP.NET      | Response.Cookies.Add | Response.Redirect              | Response.AppendHeader     |

虽然使用这些程序库可以在理想状态下消除 HTTP 消息头注入漏洞，但现实中仍需采取额外措施。

##### 检验生成消息头的参数中的换行符

许多 HTTP 响应消息头相关的 API 并没有校验换行符。笔者认为应该由 API 方面负责这一问题，但由于目前 API 方面做得还不够充分，我们需要在应用层面多下功夫。处理换行符的方法有两种：

- 当 URL 中含有换行符时报错。
- 将 Cookie 中的换行符进行百分号编码。

如果程序库已经对 Cookie 值进行了百分号编码，应用中就可以省去这一操作。例如，PHP 的 `setcookie` 函数和 Perl 的 `CGI::Cookie` 模块会在程序库中对 Cookie 值进行百分号编码。使用其他语言或程序库时，请事先调查 Cookie 值是否会被百分号编码。

下面是一个通过 PHP 的 `header` 函数实现包含字符种类校验功能的重定向函数示例。

```php
// 代码清单 /47/47-030.php
function redirect($url) {
    if (preg_match('/^[a-zA-Z0-9\-._~:/?#\[\]@!$&\'()*+,;=%]+$/', $url)) {
        header("Location: " . $url);
        exit();
    } else {
        // 报错处理
        echo "Invalid URL";
    }
}
```

这段脚本定义了一个名为 `redirect` 的函数，函数中会校验 URL 的字符种类，只有在校验通过的情况下才能使用 `header` 函数执行重定向操作。

> **注释** [47] 根据 PHP 的官方文档，4.4.2 及 5.1.2 版本的 `header` 函数更新日志中提到："为了防范消息头注入攻击，该函数不能一次发送多个消息头"。然而，这种方法并不充分，因为 PHP 仅校验了 LF（0x0A），而没有校验 CR（0x0D）。因此，在部分用户的浏览器上，仅使用 CR 换行符的 HTTP 消息头注入攻击仍然有效。

### 4.7.3 重定向相关的安全隐患总结

重定向处理中产生的典型安全隐患包括自由重定向漏洞和 HTTP 消息头注入漏洞。针对这两个漏洞的对策可归纳如下：

- 尽量使用专门的 API（程序库函数）进行重定向处理。
- 选择以下任一方法：
  - 固定重定向目标（推荐）。
  - 如果重定向目标 URL 由外界指定，务必校验字符种类和域名。

### 4.8 Cookie 输出相关的安全隐患

Web 应用广泛使用 Cookie 进行会话管理，但如果使用不当则会产生安全隐患。与 Cookie 相关的安全隐患大致可分为两类：

- Cookie 的用途不当。
- Cookie 的输出方法不当。

#### 4.8.1 Cookie 的用途不当

Web 应用中存储多个网页的信息时，通常使用 PHP 或 Servlet 容器等提供的会话管理机制。会话管理机制仅将会话 ID 保存至 Cookie，而数据本身保存在服务器端。如果在 Cookie 中保存了不应保存的数据，可能会产生安全隐患。

- **不该保存在 Cookie 中的数据**
  - 用户名和权限信息等不应被用户擅自更改的数据不应保存在 Cookie 中，否则可能导致越权操作或越权浏览。

- **参考：最好不要在 Cookie 中保存数据的原因**
  - 尽管将数据保存在 Cookie 中并非一定会造成安全隐患，但一般不推荐这种做法。表 4-17 比较了将数据保存至 Cookie 和使用会话变量这两种方法。

| 属性                     | Cookie                                             | 会话变量                                         |
|--------------------------|----------------------------------------------------|-------------------------------------------------|
| 易用性                   | 通过 API 进行取值和赋值                             | 与普通变量的用法基本一致                         |
| 存储数组或对象           | 需要在应用中转换为字符串                            | 大多都和变量一样可以直接赋值                     |
| 容量限制                 | 有严格的限制                                       | 使用上没有限制                                   |
| 用户直接查看存储的信息   | 容易                                               | 不可能                                           |
| 数据被用户更改           | 容易                                               | 不可能                                           |
| 数据被第三方更改         | 如果有 XSS 或 HTTP 消息头注入等漏洞就可能被更改     | 即使有可导致 Cookie 被更改的漏洞，会话变量也无法被更改 |
| 控制信息的有效期限       | 容易                                               | 仅限当前会话                                     |
| 不同服务器之间共享信息   | 域名相同时可能                                     | 基本不可能                                       |

如表所示，使用会话变量无法实现而使用 Cookie 可以实现的项目，只有控制信息有效期限和不同服务器之间共享信息这两点。除此以外，会话变量既安全又便利，因此，一般来说最好使用会话变量。

> **注释** [48] 在一些 Web 应用开发框架中，会话信息不仅会被保存在服务器端，而且还会在客户端以 hidden 参数或加密 Cookie 的形式保存。其中一个典型的例子就是 ASP.NET，它的页面状态（ViewState）被保存在 hidden 参数中，而认证状态（Form Authentication Ticket）则被保存在 Cookie 中。这些值都会使用 RFC2040 算法进行加密。然而，在 2010 年 9 月 17 日的 Ekoparty 安全会议上，T.Duong 与 J.Rizzo 两人表示通过名为 Padding Oracle 攻击方法就能够破解这些加密信息。微软立刻意识到了事态的严重性，成立紧急对应小组在 10 天时间内开发出了对应的补丁程序，并破例对外紧急提供。这就是 MS10-070 安全更新补丁（2010 年 9 月 29 日发布）。