要禁用这个功能，请执行以下命令：
``` literallayout
# systemctl disable tmp.mount
```
红帽建议，在 Red Hat Enterprise Linux 7
中为以下使用情况使用各种临时存储空间。
::: itemizedlist
-   特权进程（如守护进程）应该使用 `/run/processname`{.literal}
    来存储临时数据。
-   存储大量数据或者需要在重启后保留临时数据的进程应该使用
    `/var/tmp`{.literal}。
-   所有其他进程都应该使用 `/tmp`{.literal} 来存储临时数据。
:::
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Layout-Changes_to_the_run_directory}/run 目录的变化 {.title}
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 Red Hat Enterprise Linux 7.0 的初始发行版本中，Preupgrade Assistant
还没有检查这些变化的影响。RHBA-2014:1627
解决了这个问题，[https://rhn.redhat.com/errata/RHBA-2014-1627.html](https://rhn.redhat.com/errata/RHBA-2014-1627.html){.link}。
:::
之前的 Red Hat Enterprise Linux 版本允许一些程序在早期引导过程中，在
`/var`{.literal} 目录被挂载前，将运行时数据先存储在 `/dev`{.literal}
目录中。在主要的 Linux 发行版间的一个常规做法是使用 `/run`{.literal}
替代，而 `/dev`{.literal} 目录应该只用于设备节点。
因此，在 Red Hat Enterprise Linux 7 中，`/run`{.literal}
目录是一个临时文件存储系统（`tmpfs`{.literal}），它会绑定挂载
`/var/run`{.literal} 目录。同样，`/run/lock`{.literal} 目录现在绑定挂载
`/var/lock`{.literal} 目录。存储在 `/run`{.literal} 和
`/run/lock`{.literal}
中的文件不再具有持久性，重启后不会保留。这意味着，应用程序必须在启动时重新创建自己的文件和目录，而不是在安装时重新创建这些文件和目录。`/etc/app_name`{.literal}
目录是理想的选择。
有关如何在启动时重新创建文件和目录的详情，请参考 `tmpfiles.d`{.literal}
man page: `man tmpfiles.d`{.literal}。有关配置示例，请查看
`/etc/tmpfiles.d`{.literal} 中的配置文件。
:::
:::
::: section
::: titlepage
# []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management}系统管理 {.title}
:::
请阅读本节概述了 Red Hat Enterprise Linux 6 和 Red Hat Enterprise Linux
7 之间的系统管理工具和进程更改。
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Process_Maximums}默认进程最大值（ulimit） {.title}
:::
在 Red Hat Enterprise Linux 6 中，非 root 用户对于每个 PAM
会话限制为总计 1024 个进程。在 Red Hat Enterprise Linux 7
中，这个数量被默认增加到每个 PAM 会话限制为总计 4096 个进程。
默认值在 `/etc/security/limits.d/*-nproc.conf`{.literal} 文件中指定（在
Red Hat Enterprise Linux 7 中通常为
`/etc/security/limits.d/20-nproc.conf`{.literal}
）。如果没有这个文件，非 root
用户可以拥有的最大进程数是通过编程方式决定的，如
[https://access.redhat.com/solutions/218383](https://access.redhat.com/solutions/218383){.link}
所述。
您可以通过运行 `ulimit -u`{.literal} 命令,找到每个 PAM 会话中非 root
用户可用的进程的当前数量。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Configuration_File_Syntax}配置文件同步 {.title}
:::
在 Red Hat Enterprise Linux 6 中,在配置文件中使用 `export`{.literal}
命令导出这些文件中定义的值。不使用 `export`{.literal}
命令的变量没有导出,仅用作对应初始化脚本的配置值。这是一个
`/etc/sysconfig/sshd`{.literal} 文件示例：
``` literallayout
AUTOCREATE_SERVER_KEYS=YES
export SSH_USE_STRONG_RNG=1
export OPENSSL_DISABLE_AES_NI=1
```
在 Red Hat Enterprise Linux 6 中,只有 `SSH_USE_STRONG_RNG`{.literal} 和
`OPENSSL_DISABLE_AES_NI`{.literal} 的值导出到 ssh 守护进程的环境中。变量
`AUTOCREATE_SERVER_KEYS`{.literal} 用于告诉初始化脚本自动创建 RSA 和 DSA
服务器私钥和公钥。
在 Red Hat Enterprise Linux 7 中，不再需要 `export`{.literal}
命令将这些值导出到要配置的服务的环境中。因此，以下示例
`/etc/sysconfig/sshd`{.literal} 文件会将所有三个值导出到 ssh
守护进程的环境：
``` literallayout
AUTOCREATE_SERVER_KEYS=YES
SSH_USE_STRONG_RNG=1
OPENSSL_DISABLE_AES_NI=1
```
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-New_Logging_Framework}新的日志记录框架 {.title}
:::
Red Hat Enterprise Linux 7 引进了一个新的日志记录守护进程
`journald`{.literal},作为迁移到 `systemd`{.literal}
的一部分。`journald`{.literal} 捕获所有服务的以下消息类型：
::: itemizedlist
-   `syslog`{.literal} 消息
-   内核信息
-   初始 RAM 磁盘和早期引导信息
-   发送到标准输出和标准错误输出的消息
:::
然后,它会将这些消息保存在原生日志文件中：结构化的、索引的二进制文件包含有用的元数据,且更迅速且易于搜索。
默认情况下，日志文件不会被持久性存储。记录的数据量取决于可用内存量 ;
当系统内存或 `/run/log/journal`{.literal}
目录中空间不足时，会删除最旧的日志文件以继续记录日志。
在 Red Hat Enterprise Linux 7 中，`rsyslog`{.literal} 和
`journald`{.literal} 共存。`journald`{.literal} 收集的数据转发到
`rsyslog`{.literal},它们可以执行进一步处理并存储基于文本的日志文件。默认情况下,
`rsyslog`{.literal} 只存储用于 `syslog`{.literal}
消息的典型日志字段,但可以被配置为存储 `journald`{.literal}
可用的所有字段。因此，Red Hat Enterprise Linux 7 与依赖与
`rsyslog`{.literal} 的应用程序和系统配置保持兼容。
有关日志记录子系统的详情,请查看 [*[[Red Hat Enterprise Linux 7
系统管理员指南](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html){.link}]{.citetitle}*]{.emphasis}。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Localization_Settings}本地化设置 {.title}
:::
作为迁移到新的 init 系统（`systemd`{.literal}）的一部分，本地化设置已从
`/etc/sysconfig/i18n`{.literal} 移到 `/etc/locale.conf`{.literal} 和
`/etc/vconsole.conf`{.literal}。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Hostname_Definition}主机名定义 {.title}
:::
在 Red Hat Enterprise Linux 6 中, `hostname`{.literal} 变量在
`/etc/sysconfig/network`{.literal} 配置文件中定义。在 Red Hat Enterprise
Linux 7 中,作为迁移到新的 init
系统(`systemd`{.literal})的一部分，`hostname`{.literal} 变量在
`/etc/hostname`{.literal} 中定义。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Updates_to_Yum}Yum 的更新 {.title}
:::
Red Hat Enterprise Linux 7 包括了 [**[yum]{.application}**]{.strong}
的更新版本，其中包括很多更改和功能增强。这部分列出了可能会影响从 Red Hat
Enterprise Linux 6 移到 Red Hat Enterprise Linux 7 的
[**[yum]{.application}**]{.strong} 用户的更改。
::: itemizedlist
-   `yum group`{.literal} 和 `yum groups`{.literal}
    现在是顶层命令，以便提高命令行 [**[yum]{.application}**]{.strong}
    使用的一致性。例如，在之前使用 `yum groupinfo`{.literal}
    的地方，您现在可以使用 `yum group info`{.literal}。
-   `yum group list`{.literal}
    现在包含了额外的可选参数来更改其输出。新选项为 `language`{.literal}
    和 `ids`{.literal}。
-   `/etc/yum.conf`{.literal} 中的 `group_command`{.literal}
    参数的默认值已从 `compat`{.literal} 改为
    `objects`{.literal}。在以前的版本中, `yum group install`{.literal}
    的默认行为是安装软件包组的所有成员,并升级之前安装的软件包和软件包。新的默认行为是
    [**[yum]{.application}**]{.strong}
    跟踪之前安装的组,并区分作为组一部分安装的软件包和单独安装的软件包。
-   `yum-security`{.literal} 和 `yum-presto`{.literal} 插件已被集成到
    [**[yum]{.application}**]{.strong} 中。
-   [**[yum]{.application}**]{.strong} 现在可以同时下载多个软件包。
-   [**[yum]{.application}**]{.strong}
    现在包括对环境组的支持。这可让您作为单个实体安装和删除环境组中列出的多个软件包组。
-   [**[yum]{.application}**]{.strong}
    现在可以将库视为一组软件包,允许用户将库中的所有软件包视为单个实体,例如,安装或删除该程序库中的所有软件包。这个功能由
    `repository-packages`{.literal} 子命令提供。
-   [**[yum]{.application}**]{.strong} 现在包含了一个
    `--disableincludes`{.literal} 选项，它允许您禁用配置文件中定义的
    `include`{.literal} 语句。您可以使用 `all`{.literal} 值禁用所有
    `include`{.literal}
    语句,或通过提供该仓库标识符来禁用为特定存储库定义的
    `include`{.literal} 语句。
-   [**[yum]{.application}**]{.strong} 现在包含 `--assumeno`{.literal}
    选项,它假定对 yum 询问的任何问题的回答都是 \'no\'。这个选项会覆盖
    `--assumeyes`{.literal} 选项,但仍会受到 `alwaysprompt`{.literal}
    的行为的影响。
:::
有关 [**[yum]{.application}**]{.strong} 的详情，请查看 man page：
``` literallayout
$ man yum
```
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Updates_to_RPM_Package_Manager_RPM}RPM Package Manager（RPM）的更新 {.title}
:::
Red Hat Enterprise Linux 7 提供 RPM Package Manager
的更新版本。这个版本包括对可能会影响迁移行为的很多更改。
::: itemizedlist
-   现在，冲突检测更为严格且更为正确。因为存在冲突问题，在 Red Hat
    Enterprise Linux 6 中安装的一些软件包可能无法在 Red Hat Enterprise
    Linux 7 中安装。