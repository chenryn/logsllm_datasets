### Java Process and ICM Buffer Management

#### MPI Buffer Management
- **Free MPI Buffer**
  - Repeated three times to ensure the buffer is fully released.
- **Shared Memory**
  - Used for inter-process communication (IPC) between different components.
- **MPI Buffer**
  - Allocated and managed for message passing.
- **ICM WT 1 and ICM WT 2**
  - Work threads in the ICM (Internet Communication Manager) for handling requests.
- **I/O Handler**
  - Manages input and output operations, including reading and writing to the MPI Buffer.

#### HTTP Request Handling
- **GET /1 HTTP/1.1**
  - Example of an HTTP GET request.
- **Body + X**
  - Indicates the presence of a body in the request, followed by a placeholder `X`.
- **HTTP/1.1 200 OK**
  - Standard response indicating a successful HTTP request.
- **READ and PARSE**
  - Steps involved in processing the HTTP request and response.
- **X[x00]**
  - Placeholder with a null byte, often used in testing or exploitation scenarios.

#### Smuggling without a Proxy
- **Steps:**
  1. **Attacker hijacks MPI Buffer**
  2. **Victim places a request in the hijacked buffer**
  3. **Attacker tampers with the victimâ€™s request**
  4. **Victim receives a malicious response**

- **Exploitation:**
  - Similar to HTTP smuggling but does not require a proxy.
  - Less reliable due to the absence of a proxy.
  - Multi-purpose buffers can be used for both requests and responses.

#### Response Tampering
- **Example:**
  - **GET /A HTTP/1.1**
    - Another example of an HTTP GET request.
  - **Host: SapSys.com**
    - Specifies the target host.
  - **Response for A**
    - The response for the request to `/A`.

- **Tampering:**
  - **Sap-Cache-Control: Max-Age=100**
    - Custom cache control header.
  - **Content-Length: 25**
    - Specifies the length of the response body.

#### ICM Arbitrary Cache Poisoning
- **Steps:**
  1. **Attacker_1 hijacks MPI Buffer**
  2. **Attacker_2 places a target request in the hijacked buffer**
  3. **Java generates a response for Attacker_2**
  4. **Attacker_1 tampers with the response**
  5. **ICM stores the tampered response in the internal cache**

- **Exploitation:**
  - Multiple HTTP connections can be used to hijack more MPI Buffers.
  - A successful attack persists the malicious response in the cache.

#### Out-of-Bounds (OOB) MPI Buffers
- **Information Transfer:**
  - OOB MPI Buffers transfer information about the request.
  - Request and response MPI buffer pointers are communicated through OOB.

- **Memory Read:**
  - Generate a response.
  - Tamper with the OOB Buffer.
  - Replace the response buffer with a target address.
  - Read up to 65KB of arbitrary ICM memory.

- **Function Pointer Tampering:**
  - Guess memory layout by reading ICM memory.
  - Find ROP gadgets to write near the stack.
  - Load registers and perform a return-to-libc (system) call.

- **Reliability and Crashes:**
  - Hijacking OOB Buffers is not reliable due to fast operation.
  - Tampering with OOB Buffers can crash the ICM (MPIfreeBuffer fails).
  - Alternative: Tamper with the internal cache.

#### Internal Cache Tampering
- **Cache File Structure:**
  - Stores responses with a file header (Length, Encoding, body offset, etc.).
- **Cache Buffer Overflow:**
  - Example: 
    - **GET /A HTTP/1.1**
    - **HTTP/1.1 200 OK**
    - **Content-Length: 29**
    - **Cache File: Length: 85, GZ: 0, Body: 71**

- **Corruption:**
  - Corrupting the cache file can lead to a heap buffer overflow.

#### Solutions and Mitigations
- **CVE-2022-22536: CVSS 10**
  - Critical vulnerability affecting multiple SAP installations.
- **CVE-2022-22532: CVSS 8.1**
  - High severity vulnerability.
- **SAP Security Notes: 3123396 & 3123427**
  - Provide manual workarounds and patches.
- **Detection Tool:**
  - Available at [Onapsis ICMAD Scanner](https://github.com/Onapsis/onapsis_icmad_scanner).

#### Exploitation Techniques
- **Reverse Engineering:**
  - Focus on RFC (Request for Comments) and similar functions and workflows.
  - Identify requests and responses in memory.
- **Escalating Low-Level Vulnerabilities:**
  - Use complex architectures with multiple internal parsers.
  - Not based on invalid HTTP headers.
  - DNS rebinding to bypass VPNs (botnet).

#### Conclusions
- **ICMAD Addressed by CISA:**
  - Critical impact on all SAP installations.
  - Accessible through the most exposed service (HTTP/S).

**Questions?**