title:Identifying traffic differentiation on cellular data networks
author:Arash Molavi Kakhki and
Abbas Razaghpanah and
Rajesh Golani and
David R. Choffnes and
Phillipa Gill and
Alan Mislove
Identifying Trafﬁc Differentiation on Cellular Data Networks
Arash Molavi Kakhki‡, Abbas Razaghpanah⋆, Rajesh Golani⋆
David Choffnes‡ , Phillipa Gill⋆, Alan Mislove‡
‡Northeastern University, ⋆Stony Brook University
1.
INTRODUCTION
The goal of this research is to detect traﬃc diﬀerentiation
in cellular data networks. We deﬁne traﬃc diﬀerentiation
as any attempt to change the performance of network traf-
ﬁc traversing an ISP’s boundaries.
ISPs may implement
diﬀerentiation policies for a number of reasons, including
load balancing, bandwidth management, or business rea-
sons. Speciﬁcally, we focus on detecting whether certain
types of network traﬃc receive better (or worse) perfor-
mance. As an example, a wireless provider might limit the
performance of third-party VoIP or video calling services
(or any other competing services) by introducing delays or
reducing transfer rates to encourage users to use services
provided by the provider. Likewise, a provider may allocate
more bandwidth to preferred applications.
Previous work [1, 3, 5] explored this problem in limited
environments. Glasnost focused on BitTorrent in the desk-
top/laptop environment, and used port/payload randomiza-
tion to avoid diﬀerentiation. NetDiﬀ covered a wide range of
passively gathered traﬃc from a large ISP but likewise did
not support targeted, controlled experiments. We address
these limitations with Mobile Replay.
2. MOBILE REPLAY
We assume that ISPs will diﬀerentiate traﬃc based on
properties such as hostname, IP addresses, ports, total num-
ber of connections, payload signatures, total bandwidth and
time of day. Our system currently can detect all of these
forms of diﬀerentiation with the exception of server-based
diﬀerentiation.
2.1 Overview
Mobile Replay identiﬁes service diﬀerentiation using two
key components. First, it tests for diﬀerentiation by replay-
ing real network traces generated from user interactions with
apps. Meddle [4] facilitates capturing this information, and
we develop new strategies for replaying arbitrary app traces.
Second, Mobile Replay exploits the Meddle VPN to conduct
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631445 .
Figure 1: Schematic view of how our project works. Traﬃc is
sent unencrypted and through the Meddle VPN tunnel between
the mobile client and a control server.
controlled experiments. By alternately replaying traﬃc over
tunneled and untunneled connections multiple times in rapid
succession, we control ISP visibility into packet contents that
may used to diﬀerentiate traﬃc.
A key challenge is how to capture and replay the salient
features of application traﬃc such that it will be subject
to diﬀerentiation from middleboxes. To this end, we design
a system that captures traﬃc generated by users’ devices
(via Meddle) and replays those ﬂows from a replay server.
Another challenge is how to establish ground truth as to
whether the ISP is diﬀerentiating service for replay traﬃc.
To address this, we exploit the VPN connection that Meddle
provides as follows. When the VPN is enabled, the ISP can-
not inspect ﬂow contents and thus cannot diﬀerentiate based
on the above factors except total bandwidth and time-of-day.
We then compare this performance to the case when we send
traﬃc untunneled. Using multiple successive trials of tun-
neled and untunneled replay experiments, we can determine
the noise inherent in performance metrics in each type of
experiment (tunneled vs not tunneled), then identify cases
where there are statistically signiﬁcant diﬀerences between
them, indicating diﬀerentiation.
2.2 Replay and methodology
We support both UDP and TCP ﬂows in our replay sys-
tem, which consists of a client app running on the mobile
device and a replay server written in Python in a event-
driven fashion using Gevent [2], which performs eﬃciently
with many concurrent clients. The server also performs UDP
hole punching to support clients behind a NAT. The client
and server coordinate to replay the original ﬂows to repro-
duces packet timings, sequence of bytes, ports and client IPs.
Since our replay is limited to using our own replay servers,
we cannot detect diﬀerentiation based on arbitrary server
IPs (a topic of ongoing work). Note, however, that if our
replay servers are co-located with servers contacted in our
traces, we do not suﬀer from this limitation. For example, if
ISPNetwork119)
B
M
(
r
e
f
s
n
a
r
T
e
v
l
i
t
a
u
m
u
C
 16
 14
 12
 10
 8
 6
 4
 2
 0
 0
 5
 10
 15
 20
 25
 30
 35
 40
 45
Time (seconds)â€(cid:157)
preserved
not preserved
original
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
NoVPN
VPN
NoVPN w/ differentiation
VPN w/ differentiation
 500
 1000
 1500
 2000
Throughput (KB/sec)â€(cid:157)
Figure 2: Cumulative byte-transfer plot of YouTube trace replays
with inter-packet timing preserved vs. not preserved. The x-axis
is time and y-axis is the total number of bytes transferred to that
point. Observe that the original packet trace looks identical to
the replay when timing is preserved.
Figure 3: CDF of throughput over time, with and without extra
delay and packet loss induced at the server. Our approach allows
us to detect diﬀerences in throughput sample distributions when
diﬀerentiation is applied.
we use EC2 servers and the tested app streams video from a
server in the same data center (and/or same block of IP ad-
dresses), we may be able to trigger the same diﬀerentiation
in our replays.
We detect diﬀerentiation according to the following met-
rics. First, we verify that the bytes sent/received at each
endpoint during the replay are the same as the original trace.
If not, we ﬂag a case of content manipulation/blocking. Sec-
ond, we compute summary statistics on throughput, loss,
and RTT. Unlike manipulation/blocking, there are confound-
ing factors other than diﬀerentiation that may causes changes
in these statistics between the record and replay. To address
this issue, we run multiple replay trials (10 total, though we
are investigating dynamically adjusting the number of tri-
als in response to observed noise), alternating between using
a VPN connection (RT ) and an untunneled one (RU ). By
computing statistics over multiple trials of one category (RT
or RU ) we can quantify natural variations in performance
that are not a result of diﬀerentiation. Having computed
the variance over RT and RU , we can compare the sum-
mary statistics (mean/median) of RT and RU and use the
variance in each category to determine if the diﬀerences are
statistically signiﬁcant. Note that ISPs may apply diﬀeren-
tiation to all VPN traﬃc, e.g., by throttling. To detect this,
we group all RT samples and compare them to all RU sam-
ples across all applications and use the analysis described
above.
2.3 Feasibility
We now demonstrate that our replay module performs as
expected and can detect diﬀerentiation.
By preserving packet ordering and timing, our system pro-
duces very similar results to the original traﬃc. Figure 2
shows a YouTube trace replayed in both conditions side-
by-side. Of course, a variety of factors can diﬀer between
record and replay, including network conditions and access
technology. In particular, apps may change their behavior
in response to network technology and available bandwidth.
In such cases, we must ensure that we replay traﬃc that was
originally captured over similar network conditions. In our
experiments, YouTube was the only app that exhibited such
behavior (due to adaptive bitrate streaming).
We next tested whether we can detect diﬀerentiation in
a controlled environment. We ran a full replay test with
YouTube in a test environment where we inject a simple
form of diﬀerentiation by adding a 3% packet loss and 10ms
of delay. Figure 3 shows CDFs of throughput during the
replays, with and without diﬀerentiation. The eﬀect of dif-
ferentiation on the distribution is clear, indicating that our
system and metrics allow us to distinguish between diﬀeren-
tiation and noise. Last, we tested our approach using several
application traces on Verizon in Boston. Figure 4 shows our
replay results for two of those services, and we are able to
conﬁrm that there is no diﬀerentiation.
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
NoVPN
VPN
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
NoVPN
VPN
 0
 500  1000  1500  2000
 0  100  200  300  400  500  600
Throughput (KB/sec)â€(cid:157)
Throughput (KB/sec)â€(cid:157)
(a)
(b)
Figure 4: CDF of throughput over time for Verizon (left: Netﬂix,
right: Spotify). Our tests show that Verizon does not diﬀerentiate
traﬃc for these apps.
3. FUTURE WORK
To address the limitation that we cannot detect diﬀerenti-
ation based on server ports, our future work includes lever-
aging source-spooﬁng such that the source IP in the server’s
packets are the same as in the original traces. Additionally,
because the VPN itself may be subject to diﬀerentiation
(or blocked), we are investigating using multiple diﬀeren-
tiation detection approaches, including randomizing packet
payloads and ports in the replay. We are also developing an
app that allows average users to create and conduct tests
from an mobile provider worldwide, and that eﬃciently uses
scarce available data quota to run those tests. We plan to
use the results to produce a Web site informing consumers
of ISP policies.
4. REFERENCES
[1] M. Dischinger, M. Marcon, S. Guha, K. P. Gummadi,
R. Mahajan, , and S. Saroiu. Glasnost: Enabling end users
to detect traﬃc diﬀerentiation. In NSDI, 2010.
[2] http://www.gevent.org.
[3] M. B. Tariq, M. Motiwala, N. Feamster, and M. Ammar.
Detecting network neutrality violations with causal
inference. In CoNEXT, 2009.
[4] http://www.meddle.mobi/papers/meddle-main.pdf.
[5] Y. Zhang, Z. M. Mao, and M. Zhang. Detecting traﬃc
diﬀerentiation in backbone isps with netpolice. In
SIGCOMM, 2009.
120