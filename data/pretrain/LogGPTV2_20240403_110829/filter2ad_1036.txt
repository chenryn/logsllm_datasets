# Identifying Traffic Differentiation on Cellular Data Networks

**Authors:**
- Arash Molavi Kakhki (Northeastern University)
- Abbas Razaghpanah (Stony Brook University)
- Rajesh Golani (Stony Brook University)
- David R. Choffnes (Northeastern University)
- Phillipa Gill (Stony Brook University)
- Alan Mislove (Northeastern University)

## 1. Introduction

The primary objective of this research is to detect traffic differentiation in cellular data networks. We define traffic differentiation as any attempt to alter the performance of network traffic as it traverses an Internet Service Provider's (ISP) boundaries. ISPs may implement such differentiation policies for various reasons, including load balancing, bandwidth management, or business strategies. Specifically, our focus is on identifying whether certain types of network traffic receive better or worse performance. For example, a wireless provider might degrade the performance of third-party Voice over IP (VoIP) or video calling services by introducing delays or reducing transfer rates, thereby encouraging users to use the provider's own services. Conversely, a provider may allocate more bandwidth to preferred applications.

Previous studies [1, 3, 5] have explored this issue in limited contexts. Glasnost, for instance, focused on BitTorrent in desktop and laptop environments, using port and payload randomization to avoid differentiation. NetDiff covered a wide range of passively gathered traffic from a large ISP but did not support targeted, controlled experiments. Our approach, Mobile Replay, addresses these limitations.

## 2. Mobile Replay

We assume that ISPs differentiate traffic based on properties such as hostnames, IP addresses, ports, total number of connections, payload signatures, total bandwidth, and time of day. Our system can currently detect all forms of differentiation except server-based differentiation.

### 2.1 Overview

Mobile Replay identifies service differentiation through two key components. First, it tests for differentiation by replaying real network traces generated from user interactions with apps. Meddle [4] facilitates capturing this information, and we have developed new strategies for replaying arbitrary app traces. Second, Mobile Replay leverages the Meddle Virtual Private Network (VPN) to conduct controlled experiments. By alternately replaying traffic over tunneled and untunneled connections multiple times in rapid succession, we control the ISP's visibility into packet contents that may be used for differentiation.

A key challenge is capturing and replaying the salient features of application traffic such that it will be subject to differentiation by middleboxes. To address this, we designed a system that captures traffic generated by users' devices (via Meddle) and replays those flows from a replay server. Another challenge is establishing ground truth regarding whether the ISP is differentiating service for replay traffic. To do this, we exploit the VPN connection provided by Meddle. When the VPN is enabled, the ISP cannot inspect flow contents and thus cannot differentiate based on the above factors, except for total bandwidth and time-of-day. We then compare this performance to the case when we send traffic untunneled. Using multiple successive trials of tunneled and untunneled replay experiments, we can determine the inherent noise in performance metrics and identify statistically significant differences, indicating differentiation.

### 2.2 Replay and Methodology

Our replay system supports both UDP and TCP flows. It consists of a client app running on the mobile device and a replay server written in Python using Gevent [2], which efficiently handles many concurrent clients. The server also performs UDP hole punching to support clients behind a Network Address Translation (NAT). The client and server coordinate to replay the original flows, reproducing packet timings, sequence of bytes, ports, and client IPs. Since our replay is limited to using our own replay servers, we cannot detect differentiation based on arbitrary server IPs (a topic of ongoing work). However, if our replay servers are co-located with servers contacted in our traces, we do not suffer from this limitation. For example, if we use Amazon EC2 servers and the tested app streams video from a server in the same data center (and/or same block of IP addresses), we may be able to trigger the same differentiation in our replays.

We detect differentiation using the following metrics. First, we verify that the bytes sent/received at each endpoint during the replay are the same as in the original trace. If not, we flag a case of content manipulation or blocking. Second, we compute summary statistics on throughput, loss, and Round-Trip Time (RTT). Unlike manipulation/blocking, there are confounding factors other than differentiation that may cause changes in these statistics between the record and replay. To address this, we run multiple replay trials (10 total, though we are investigating dynamically adjusting the number of trials in response to observed noise), alternating between using a VPN connection (RT) and an untunneled one (RU). By computing statistics over multiple trials of one category (RT or RU), we can quantify natural variations in performance that are not due to differentiation. Having computed the variance over RT and RU, we can compare the summary statistics (mean/median) of RT and RU and use the variance in each category to determine if the differences are statistically significant. Note that ISPs may apply differentiation to all VPN traffic, e.g., by throttling. To detect this, we group all RT samples and compare them to all RU samples across all applications and use the analysis described above.

### 2.3 Feasibility

We demonstrate that our replay module performs as expected and can detect differentiation. By preserving packet ordering and timing, our system produces results very similar to the original traffic. Figure 2 shows a YouTube trace replayed in both conditions side-by-side. A variety of factors can differ between record and replay, including network conditions and access technology. In particular, apps may change their behavior in response to network technology and available bandwidth. In such cases, we must ensure that we replay traffic that was originally captured under similar network conditions. In our experiments, YouTube was the only app that exhibited such behavior (due to adaptive bitrate streaming).

Next, we tested whether we can detect differentiation in a controlled environment. We ran a full replay test with YouTube in a test environment where we injected a simple form of differentiation by adding a 3% packet loss and 10ms of delay. Figure 3 shows Cumulative Distribution Functions (CDFs) of throughput during the replays, with and without differentiation. The effect of differentiation on the distribution is clear, indicating that our system and metrics allow us to distinguish between differentiation and noise. Finally, we tested our approach using several application traces on Verizon in Boston. Figure 4 shows our replay results for two of those services, and we were able to confirm that there is no differentiation.

## 3. Future Work

To address the limitation that we cannot detect differentiation based on server ports, our future work includes leveraging source-spoofing so that the source IP in the server's packets is the same as in the original traces. Additionally, because the VPN itself may be subject to differentiation (or blocked), we are investigating using multiple differentiation detection approaches, including randomizing packet payloads and ports in the replay. We are also developing an app that allows average users to create and conduct tests from a mobile provider worldwide, and that efficiently uses scarce available data quota to run those tests. We plan to use the results to produce a website informing consumers of ISP policies.

## 4. References

[1] M. Dischinger, M. Marcon, S. Guha, K. P. Gummadi, R. Mahajan, and S. Saroiu. Glasnost: Enabling end users to detect traffic differentiation. In NSDI, 2010.

[2] http://www.gevent.org.

[3] M. B. Tariq, M. Motiwala, N. Feamster, and M. Ammar. Detecting network neutrality violations with causal inference. In CoNEXT, 2009.

[4] http://www.meddle.mobi/papers/meddle-main.pdf.

[5] Y. Zhang, Z. M. Mao, and M. Zhang. Detecting traffic differentiation in backbone ISPs with NetPolice. In SIGCOMM, 2009.