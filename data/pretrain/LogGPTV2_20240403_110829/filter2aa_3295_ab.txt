possible to retrieve all user-submitted reviews in this
case.
1.2.2 Information Assets Affected by Audited Device
As this one-person “organization” exists entirely to create and support this web
site, the audited web application directly affects practically every aspect of the
organization.  This includes all data owned by the organization, and all services
provided by the organization.  E-mail is the only function which is used by the site
owner which is unaffected by changes to this application.
Information Asset
Description
Source code to the
web application
The web application represents a significant amount of
development work, and may be used as a basis for future
commercial work by the developer.
Disclosure of the code to the public could also compro-
mise the security of the site, as any security holes in the
code would become public knowledge.  If the code is well-
written, though, this would not be a concern.
Public data stored in
the database
Most of the information stored in the database is publicly
available through the web application, and therefore con-
fidentiality is not a requirement.
However, AuditApp would be useless without this data,
and therefore its availability is critical to the successful
functioning of the web site.
The data integrity is also important, arguably as important
as availability.  The reason that the public visits the web
site is to access this data; if the data they were viewing on
the web site was inaccurate, and they realized this, they
would be less likely to return in the future.
Private data stored
in the database
While most of the database stores publicly available in-
formation, some data in it is not accessible to the public.
This data includes:
• Real names of users who have accounts on the site
(only usernames are visible to other users, which may
or may not have anything to do with the users’ real
names.)
• MD5 hashes of all users’ passwords
• All users’ e-mail addresses
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
9
Information Asset
Description
• Date that each user registered for their account
• Date and time of each users’ last login to the web ap-
plication
• Access levels of each user on the system: most users
have the most basic access levels, but some have ad-
ditional rights to perform administrative tasks on the
site.
Bandwidth
The web host limits the bandwidth available to the site.
Usage of bandwidth over that limit—whether through le-
gitimate web traffic or “theft” of bandwidth by another
site—would result in additional costs or the temporary
shutdown of the web site.
Service provided by
web site
The web site provides a vast amount of data to the public.
This information consists of information available at other
web sites in other formats, as well as large amounts of
unique content contributed by visitors to the site as well as
the owner of the site.  The value of the web site mostly
relies on this data plus the code that powers the applica-
tion.
1.2.3 Major Vulnerabilities of the Web Application
The major potential vulnerabilities in this web application are listed below.  For
each vulnerability we will list the likelihood of it being exploited on a scale of one
through five, with one being low and five being high.  In addition, the impact of a
successful exploitation of the vulnerability on the web site is also listed using the
same rating scale.
Vulnerability
Likelihood
(exposure)
Impact
1. Programming error in application leaves site vul-
nerable for an attacker to get administrative access
to the web site, through the application’s own web
interface to the public.
3
4
2. Malicious attacker exploits programming error in
application to get full access to the site’s database.
3
4
3. Catastrophic loss of data at web hosting company.
This could be due to environmental causes, mali-
cious attackers, hardware failures, etc.  As the cus-
tomer has no control over any of these, they are all
treated together from this audit’s point of view.
1
5
4. Cross-site scripting attack.  This could yield ad
3
4
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
10
Vulnerability
Likelihood
(exposure)
Impact
ministrative rights to the web application
5. SQL injection attack.  This vulnerability could also
yield administrative rights to the application
3
4
6. Non-critical programming error in the PHP or SQL
code that leads to loss of some or all functionality of
the site (e.g., error in PHP cause some pages to give
errors to the user)
3
2
7. Session hijacking by spoofing valid session identi-
fier. This could give administrative access to the ap-
plication if an administrative account’s session is hi-
jacked
2
4
8. Denial of service attack
3
3
9. Leak of hidden information through HTML com-
ments
2
3
10. Session hijacking by modifying client’s stored
cookie.  This could give administrative access to the
application if an administrative account’s session is
hijacked
3
4
11. Password to an administrative account is
guessed or brute-forced
2
4
12. Sample files, scripts, or applications from the
web server or other installed software are left active
on the web site
3
4
13. Modification of hidden form fields allows unex-
pected behavior
4
3
14. Leak of hidden information through client-side
Javascript
2
3
15. Weak protection employed through client-side
Javascript
3
4
16. Usernames could be collected through login error
message that reveal that a valid username was at-
tempted (i.e., if the error message the web site
shows on a failed login attempt changes depending
on whether the username was valid or not)
4
1
17. Theft of bandwidth caused by another web site
linking directly to images or other media on this web
site.  This could use up all of the bandwidth allocated
to the web site by the web host, causing the site to
disabled.  In effect, this would create a denial of 
3
2
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
11
Vulnerability
Likelihood
(exposure)
Impact
service against the web site
18.  Web server automatically indexes site’s directo-
ries, and makes them available if users manipulate
the URL in their browser.  For example, if
http://www.site.com/includes/main.css is referenced
in the HTML code for the site, a user who points their
browser to http://www.site.com/includes would see
the full contents of that directory.  This can expose
files that the user should be able to view.
2
3
1.3 Current State of Practice
1.3.1 Articles, Papers, and Mailing Lists
Given the sheer size of the World Wide Web today, and the large number of
companies that rely on their public web site as their primary source of revenue,
it’s somewhat surprising that so little attention has been focused on web applica-
tion security in the past.  In recent years, however, this situation has been im-
proving.  Today there are many articles, papers, and discussions available on the
Internet devoted to the specific issues of web application security.
SecurityFocus1 hosts one such discussion: a mailing list devoted to web applica-
tion security named, appropriately enough, the Web Application Security Mailing
List2.  The list archives are available online3 and extend from January 2001 to the
present.  In these archives are hundreds of discussions of web application secu-
rity issues.  Some of these are specific to a certain web scripting language or
operating system, but many are general enough to be applicable to all web appli-
cations.
Another collection of information is available at The Open Web Application Secu-
rity Project (OWASP)4.  This site has news and columns on web application se-
curity, as well as auditing tools.  From my assessment of the site, the most useful
item was the OWASP Guide to Building Secure Web Applications and Web
1 http://www.securityfocus.com
2 http://www.securityfocus.com/popups/forums/web_application_security/intro.shtml
3 http://www.securityfocus.com/archive/107
4 http://www.owasp.org
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
12
Services5, which is a document that attempts to cover every aspect of web appli-
cation security.  This site also promises a future resource called the OWASP
Testing Guide6, the goal of which is to “[document] strategies and techniques to
test web applications for security vulnerabilities.”  As of April 2004 the testing
guide is not yet available.
The SANS Reading Room also has several papers which are of use to someone
auditing the security of a web application:
• “Securing e-Commerce Web Sites” by Ariel Pisetsky7.  This paper focuses
more on the server end than the web application end, but it does give a sum-
mary of some of the types of attacks a web site may be expected to cope
with.  It also discusses the pros and cons of several network configurations.
• “Web Application Security — Layers of Protection” by William Fredholm8.
This paper provides a good overview of web application security.  It also re-
fers to OWASP as a valuable resource, and then covers the security that dif-
ferent layers of the web application can provide.  It also goes into the process
of testing the security.
• “Cross-Sight [sic] Scripting Vulnerabilities” by Mark Shiarla9.  This provides a
fairly complete discussion of cross-site scripting, including examples of at-
tacks and methods of protecting a web site or web application from these at-
tacks.
While on the subject of cross-site scripting, CERT has a very good document10
discussing the issue.  Their focus is more at the end user than the auditor or web
developer, but it is still a very good description of the issue.
Another common issue in web applications is SQL injection attacks.  SitePoint11
has an excellent article from 2002 in their archives called “SQL Injection Attacks
5 http://www.owasp.org/documentation/guide
6 http://www.owasp.org/documentation/testing
7 http://www.sans.org/rr/papers/index.php?id=303
8 http://www.sans.org/rr/papers/index.php?id=965
9 http://www.sans.org/rr/papers/index.php?id=478
10 http://www.cert.org/archive/pdf/cross_site_scripting.pdf
11 http://www.sitepoint.com
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
13
— Are You Safe?”12 by Mitchell Harper.  This article is aimed at the web applica-
tion developer, and gives thorough examples of what SQL injection is as well as
how to protect against it.
A second good discussion of SQL injection attacks is “SQL Injection Walk-
through”13 at SecuriTeam.com.  This page focuses on exploiting a web site using
SQL injection, which makes it a good resource for auditors and penetration test-
ers.  It also includes a number of links to other Web resources on this subject.  It
provides very little coverage of preventing vulnerabilities in web applications, un-
less the exploitation examples can assist a web developer in understanding how
to properly secure his/her application. 
Gunter Ollmann published a paper entitled “Application Assessment Questioning:
What should a consultant be looking for when conducting an application assess-
ment?”14.  This paper gives a very comprehensive checklist of questions that can
be used by an auditor conducting an assessment of any application, web-based
or not.
1.3.2 Tools
There are many free tools available on the Internet that can assist in the process
of auditing a web application:
Nessus15, the popular open source security scanner, has a large number of plug-
ins that scan for web application vulnerabilities.  Most of these are targeted at
specific vulnerabilities in specific web applications, but there are some general
tests that can be of value to someone auditing a custom web application.  In ad-
dition, since the program and all the scanning plug-ins are open source, we can
view the source code that is doing these tests to look for similar potential prob-