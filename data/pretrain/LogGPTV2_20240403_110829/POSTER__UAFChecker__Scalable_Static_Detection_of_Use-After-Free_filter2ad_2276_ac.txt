Summary(jas_free) = {FREE(arg0)}, and
Summary(jas_tvparser_destroy) = {FREE(arg0)}.
• Tracking pointers and checking vulnerabilities. The
functions mif _process_cmpt, jas_tvparser_destroy and
jas_free are considered CFFs. We perform pointer track-
ing and vulnerability checking (in Section IV-D) in
these functions. The pointer alias are identiﬁed using the
method in Section IV-C. The detection discovers a use-
after-free vulnerability in function mif _process_cmpt,
as shown in Table 1.
In Table 1, the ﬁrst and second columns represent the
line number and the code related to the pointers, respectively.
The third column is the program abstract state. The pointer
aliases are represented in the fourth column. The last column
records the FSM state. In the ﬁrst row, tvp1 is allocated a
memory object in line 10. Thus, a new address addr0 is asso-
ciated with tvp1. The state of tvp1 is set to Start. Then, tvp2
points to the same address as tvp1 because of the assignment
statement in line 11. The state of tvp2 is also set to Start.
In line 13, tvp1 is freed by a DPCF jas_tvparser_destroy and
becomes a dangling pointer. Meanwhile, tvp2 also becomes
a dangling pointer because it is an alias of tvp1. Then, when
tvp2 is used in line 18 (FREE is a special USE), its state is
shifted to UAF. The points of creation and dereference of the
dangling pointer tvp2 in the program are reported.
V. IMPLEMENTATION AND EVALUATION
A prototype called UAFDetector is implemented based on the
proposed approach. This section describes the implementa-
tion details of the prototype and evaluates its effectiveness
and performance overhead using Juliet Test Suite (JTS) and
real-world programs.
A. IMPLEMENTATION
In order to analyze binaries from multiple architectures,
we carry out vulnerability detection on the intermediate
representation. We implemented the prototype based on
Google’s binary analysis platform BinNavi [19], which is
also employed in GUEB [16]. BinNavi can be combined
with IDA Pro [18] to easily translate binaries from multiple
architectures into an intermediate representation REIL. In the
pre-processing procedure, IDA Pro is employed to transform
the binary code into assembly code. Then, this assembly code
is translated into REIL by BinNavi. The CFGConstructor is
employed to obtain more complete CFGs.
BinNavi also provides APIs for analyzing the binaries on
the intermediate representation. In the vulnerability detection
procedure, we implemented function summary generation,
alias analysis and pointer tracking by utilizing the APIs. The
UAFDetector maintains the state of each pointer and tracks
the changes of the state according to the FSM in Fig. 10.
Finally, the program locations involved in use-after-free vul-
nerabilities are reported.
The prototype is currently capable of analyzing binaries
on x86 architecture. However, in theory, our approach can
be applied to multiple architectures because it is based on
intermediate representations.
B. EFFECTIVENESS
We used the standard benchmarks, Juliet Test Suite (JTS)
[17], and real-world programs to evaluate the effectiveness
of UAFDetector.
1) JTS
This benchmark is a collection of C/C++ programs with
known vulnerabilities provided by the National Institute of
Standards and Technology. We selected 1457 C/C++ pro-
grams with use-after-free or double-free vulnerabilities and
compiled them into binaries. Then, UAFDetector is used
to analyze these binaries and report the vulnerabilities. The
analysis results are shown in Table 2. The columns in this
table represent, from left to right, the type of vulnerabilities
in the target programs, the language of the target programs,
the number of target programs, the number of known vulner-
abilities in the target programs, the number of vulnerabili-
ties reported by UAFDetector, the number of false positives
(FPs), the false positive rate (FPR), the number of false
negatives (FNs) and the false negative rate (FNR).
As shown in Table 2, UAFDetector is capable of ﬁnd-
ing use-after-free or double-free vulnerabilities in JTS.
UAFDetector correctly reports 2042 of the 2092 known vul-
nerabilities in 1457 target programs. The false negative rate
is 2.39%, and the false positive rate is zero percent. We have
shared the test binary programs and the experimental results
at https://github.com/BinaryAnalysis/UAFDetector.
2) REAL-WORLD PROGRAMS
We further evaluate the effectiveness of UAFDetector using
real-world programs. UAFDetector analyzes six popular pro-
grams with known vulnerabilities and outputs error reports.
We manually determine whether each item in the report
is true or false positive. The six programs analyzed are
78720
VOLUME 8, 2020
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
TABLE 2. UAFDetector effectiveness evaluation results on JTS.
TABLE 3. Use-after-free vulnerabilities detected by UAFDetector.
Jasper, an image processing/coding tool kit; OpenJPEG:
a JPEG 2000 codec; Boolector: a satisﬁability modulo the-
ories solver; LibTIFF: a collection of tools for manipulations
of TIFF images; LibPNG: the ofﬁcial PNG reference library;
and GNU cﬂow: a tool for charting the control ﬂow within
programs. The experimental results are shown in Table 3. The
columns in this table represent, from left to right, the name
of the program, the version of the program, the number of
known vulnerabilities in the program, the CVE identiﬁers
of the known vulnerabilities, the number of vulnerabilities
reported by UAFDetector, the number of true positives (TPs),
the number of false positives (FPs), and the number of false
negatives (FNs).
The results show that UAFDetector can successfully
detect 5 of the 6 known vulnerabilities in the six programs
and can discover a new vulnerability in GNU cﬂow despite
some false positives and negatives. We have submitted the
new vulnerability to the public vulnerability database and
obtained a vulnerability identiﬁer CNNVD-201904-1451.
Thus, our approach is effective in discovering use-after-free
vulnerabilities in binary code.
Although our approach can effectively detect use-after-free
vulnerabilities in binary code, there are still false positives
and false negatives. We analyze the reason of each incorrect-
ness and propose corresponding improvements.
(2) According to the observations in [1] and [16], most of the
use-after-free vulnerabilities are not sensitive to a particular
loop iteration. Therefore, UAFDetector unrolls each loop at
most once, similar to the solutions in [1], [16]. However,
there are a few vulnerabilities that depend on executing a loop
several times in our experiments. UAFDetector cannot detect
the vulnerabilities in this case.
4) FALSE POSITIVES
The main reason for false positives is that our approach
uses a path-insensitive analysis. A path-insensitive analy-
sis has the advantage of low time overhead, but it is not
completely accurate. Some paths that are considered acces-
sible on the CFG in the static analysis cannot be exe-
cuted dynamically. A typical example of false positives is
shown in Fig. 12. Here, the function f 2 returns 0 when
it frees arguments and does not free arguments otherwise.
The caller f 1 checks the returned value and never uses the
pointer if it is freed. However, our analysis considers a pos-
sible path from freeing argument (line 3) to using argument
(line 12). A path-sensitive analysis using symbolic execu-
tion can ameliorate this problem. Because symbolic execu-
tion has a high overhead, we consider adding a lightweight
local path-sensitive analysis to our approach to achieve the
trade-off between performance and accuracy.
3) FALSE NEGATIVES
There are several reasons for false negatives. (1) The pointer
alias analysis is not completely accurate. Considering the
time cost, we analyzed only the pointer aliases of simple
patterns, which cannot address complex situations, such as
indirect aliases [24] caused by re-allocation. We will improve
the accuracy of alias analysis by tracking the memory alloca-
tion or combining the local dynamic analysis in the next step.
C. PERFORMANCE OVERHEAD
We evaluate the performance overhead of UAFDetector using
real-world programs. The experiment was conducted on an
Intel Core i7-6700 processor with 8 cores at 3.4 GHz and
16 GB of memory, running on a 64-bit Windows 7 operating
system. Table 4 shows the test binary programs and the time
overhead needed by UAFDetector to analyze them. The target
programs contain dynamic libraries of different sizes: from
VOLUME 8, 2020
78721
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
TABLE 5. Comparison of the number of functions to be analyzed using
GUEB and UAFDetector.
FIGURE 12. Example of false positive.
TABLE 4. Time cost of analyzing binaries of different sizes using
UAFDetector.
hundreds of kilobytes to dozens of megabytes. We record the
time taken in the detection procedure that contain function
summary generation, alias analysis and pointer tracking. The
time in Table 4 is the average of ten repeated analyses.
The experimental results show that UAFDetector can
complete the analysis in a relatively short time for binary
programs of different sizes. For example,
it only takes
135.15 seconds for UAFDetector to analyze libmergedlo,
which is a 50 MB binary in LibreOfﬁce. Therefore, UAFDe-
tector has the ability to analyze large-scale real-world
programs.
We use GUEB [16] and our approach to analyze the above
binaries in real-world programs to compare their performance
overhead. The main difference between the two methods
in design is that GUEB uses the in-lining technique for
inter-procedural analysis, while our approach uses function
summaries. However, there are many differences in the imple-
mentation details between the two approaches; for instance,
GUEB provides graphical results that are not necessary for
vulnerability detection. Consequently, it is not convincing to
compare the analysis time directly. We compare the num-
ber of functions to be analyzed by the two approaches in
the detection procedure. The statistical results are shown
in Table 5. In the table, Ftotal represents the total number
of functions in the test binaries. FGUEB and FUAFDetector
represent the number of functions to be analyzed by GUEB
and UAFDetector in vulnerability detection, respectively.
The results show that UAFDetector can detect vul-
nerabilities by analyzing only some of the functions in
the program in detail because it only focuses on use-
after-free vulnerability-related functions (DPCFs, DPDFs,
DPUFs and CFFs) and ignores other functions. Moreover,
the number of functions to be analyzed by UAFDetec-
tor is approximately 70.8% lower than that by GUEB.
The reason is that UAFDetector uses function summaries
instead of the in-lining technique used by GUEB to achieve
inter-procedural analysis. As shown in the example in Fig 5,
the in-lining method needs to repeatedly analyze the func-
tions that are called multiple times, which results in a lot
of redundant overhead. However, the function summaries
method used by our approach does not have this limitation.
In this method, all function calls are replaced by the sum-
maries of callee functions. Thus, functions are analyzed only
once, even if they are called many times.
VI. LIMITATION AND FUTURE WORK
Although UAFDetector has been demonstrated to be able
to detect the use-after-free vulnerabilities in the large-scale
binaries, it still has important limitations. We brieﬂy describe
the limitations and applicable conditions of our system.
First, UAFDetector utilizes static analysis to detect vulner-
abilities without the ability of dynamic analysis. Therefore,
its analysis results are not completely correct. As discussed
in the Section V-B, the incomplete pointer alias analysis
and the imprecise loop handling may cause false negatives.
In addition, UAFDetector uses the path-insensitive analysis.
This method may cause false positives.
Second, we employ some existing tools to implement
UAFDetector, such as IDA Pro, BinNavi and CFGCon-
structor. The prototype depends on the assumption that the
employed tools convert the binary code into the intermediate
representation and obtain the CFGs correctly. However, this
assumption is not always satisﬁed. For example, the code
transformation methods and the code confusion methods may
prevent IDA Pro from disassembling the binary or obtaining
the CFGs correctly. In addition, IDA Pro may fail to identify
the function boundaries in some cases. These problems are
the basic problems widely existing in many binary analysis
78722
VOLUME 8, 2020
K. Zhu et al.: Scalable Static Detection of Use-After-Free Vulnerabilities in Binary Code
applications, such as the detection of code clone [25], [26]
and the detection of malware [27]–[29]. Our prototype cannot
detect the vulnerabilities correctly in the above cases.
In addition, the impact of using different compilers or
compilation settings on binary analysis tools is often dis-
cussed. Many existing binary analysis tools rely on assump-
tions about speciﬁc compilers and compilation settings [25].
UAFDetector carries out the analysis on the intermediate rep-
resentation and focuses on the semantics of the binaries rather
than the structure of code. Therefore, different compilers or
compilation settings do not impact our system in general.
Although our static analysis approach can provide good
results from a scalability point of view, it is not as accurate as
dynamic approaches. Therefore, our analysis is suitable as a
ﬁrst level vulnerability detection step. Our results containing
the sets of program locations involved in the use-after-free
vulnerability can provide basic knowledge for further vulner-
ability detection. For example, our approach can point out
which parts of the target program must be stressed for popular
fuzzing techniques.
The approach would be further improved in our future
work. First, A lightweight local path-sensitive analysis could
be added to reduce the number of false positives. Second,
we will consider more patterns of pointer aliases, such as
indirect aliases [24], to improve the completeness of the alias
analysis and reduce the number of false negatives. In addition,
a fuzzing technique will be utilized as the further analysis to
avoid false positives.
VII. RELATED WORK
This section summarizes the related research on protecting
against use-after-free vulnerabilities from two aspects: vul-
nerability detection and vulnerability mitigation.
A. USE-AFTER-FREE DETECTION
Most existing use-after-free detection solutions depend on
dynamic analysis. CETS [30] inserts a runtime check when
the program is compiled. When a pointer is referenced,
CETS checks whether the object pointed to by this pointer
is still allocated to ﬁnd the dangling pointer. However, this
solution lacks robustness in its prototype implementation,
which causes a large number of complex programs to be
unable to compile using this method. AddressSanitizer [13]
is a popular runtime detection tool. It can also dynamically
detect the illegal use of pointers in programs. However, like
CETS, AddressSanitizer uses instrumentation at compiling
and requires the source code, which limits the practical
application of the tool. Valgrind [12] and Purify [11] detect
vulnerabilities by checking whether the dereferenced pointer
points to valid memory. This approach is unable to detect
dangling pointers that point to an object that has reused
the memory. To address this problem, Undangle [7] uses a
dynamic analysis approach called early detection to protect
against use-after-free vulnerabilities. This method combines
taint analysis and pointer tracking to effectively identify
unsafe pointers that are created but not used, which improves
the completeness of vulnerability detection. However, this
method relies on an execution trace analysis, which has a