LayerError Traceback (most recent call last)  
in  
1 # this takes around 1 minute  
2 #
print(next(data_generator(Q1_test,Q2_test,512,pad=vocab[''],shuffle=False)))  
\----> 3 accuracy = classify(Q1_test,Q2_test, y_test, 0.7, model, vocab,
batch_size = 512)  
4 print("Accuracy", accuracy)
in classify(test_Q1, test_Q2, y, threshold, model, vocab, data_generator,
batch_size)  
27 # print(f'shape of y_test = {y_test.shape}\n')  
28 # Call the model  
\---> 29 v1, v2 = model((q1,q2))  
30  
31 for j in range(batch_size):
~/anaconda3/lib/python3.8/site-packages/trax/layers/base.py in **call** (self,
x, weights, state, rng)  
171 self.state = state # Needed if the model wasn't fully initialized.  
172 state = self.state  
\--> 173 outputs, new_state = self.pure_fn(x, weights, state, rng)  
174 self.state = new_state  
175 self.weights = weights
~/anaconda3/lib/python3.8/site-packages/trax/layers/base.py in pure_fn(self,
x, weights, state, rng, use_cache)  
520 # Skipping 3 lines as it's always the uninteresting internal call.  
521 name, trace = self._name, _short_traceback(skip=3)  
\--> 522 raise LayerError(name, 'pure_fn',  
523 self._caller, signature(x), trace) from None  
524
LayerError: Exception passing through layer Parallel (in pure_fn):  
layer created in file [...]/, line 27  
layer input shapes: (ShapeDtype{shape:(512, 64), dtype:int64},
ShapeDtype{shape:(512, 64), dtype:int64})
File [...]/trax/layers/combinators.py, line 209, in forward  
sub_outputs, sub_state = layer.pure_fn(x, w, s, r, use_cache=True)
LayerError: Exception passing through layer Serial (in pure_fn):  
layer created in file [...]/, line 17  
layer input shapes: ShapeDtype{shape:(512, 64), dtype:int64}
File [...]/trax/layers/combinators.py, line 88, in forward  
outputs, s = layer.pure_fn(inputs, w, s, rng, use_cache=True)
LayerError: Exception passing through layer Embedding_41699_128 (in pure_fn):  
layer created in file [...]/, line 18  
layer input shapes: ShapeDtype{shape:(512, 64), dtype:int64}
File [...]/trax/layers/core.py, line 150, in forward  
return jnp.take(self.weights, x, axis=0)
File [...]/jax/numpy/lax_numpy.py, line 3422, in take  
return lax.gather(a, indices[..., None], dimension_numbers=dnums,
File [...]/jax/lax/lax.py, line 807, in gather  
return gather_p.bind(
File [...]/site-packages/jax/core.py, line 276, in bind  
return self.impl(*args, **kwargs)
File [...]/jax/interpreters/xla.py, line 224, in apply_primitive  
compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),
**params)
File [...]/jax/interpreters/xla.py, line 257, in xla_primitive_callable  
built_c = primitive_computation(prim, AxisEnv(nreps, (), (), None), backend,
File [...]/jax/interpreters/xla.py, line 316, in primitive_computation  
raise RuntimeError(msg) from e
RuntimeError: Invalid argument: Slice size at index 0 in gather op is out of
range, must be within [0, 1), got 1.:  
This is a bug in JAX's shape-checking rules; please report it!