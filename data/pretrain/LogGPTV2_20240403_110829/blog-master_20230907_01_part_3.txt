 Schema |          Name           | Type  |  Owner   |    Table     | Persistence | Access method |  Size  | Description   
--------+-------------------------+-------+----------+--------------+-------------+---------------+--------+-------------  
 public | tbl_art_tag1_pkey       | index | postgres | tbl_art_tag1 | unlogged    | btree         | 592 kB |   
 public | tbl_art_tag1_tid_ts_idx | index | postgres | tbl_art_tag1 | unlogged    | rum           | 101 MB |   
 public | tbl_art_tag_tid_ts_idx  | index | postgres | tbl_art_tag  | unlogged    | btree         | 267 MB |   
 public | tbl_tag_pkey            | index | postgres | tbl_tag      | permanent   | btree         | 40 kB  |   
(4 rows)  
```  
8、搜索多个标签的文章, 并按时间返回.   
```  
postgres=# explain analyze select art_id,ts from tbl_art_tag1 where tid && (array[490,500])::int[] order by ts desc limit 100;   
                                                                      QUERY PLAN                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=2575.92..2576.17 rows=100 width=12) (actual time=21.177..21.194 rows=100 loops=1)  
   ->  Sort  (cost=2575.92..2606.82 rows=12359 width=12) (actual time=21.173..21.181 rows=100 loops=1)  
         Sort Key: ts DESC  
         Sort Method: top-N heapsort  Memory: 32kB  
         ->  Bitmap Heap Scan on tbl_art_tag1  (cost=110.08..2103.57 rows=12359 width=12) (actual time=6.189..19.271 rows=12094 loops=1)  
               Recheck Cond: (tid && '{490,500}'::integer[])  
               Heap Blocks: exact=1835  
               ->  Bitmap Index Scan on tbl_art_tag1_tid_ts_idx  (cost=0.00..106.99 rows=12359 width=0) (actual time=5.727..5.727 rows=12094 loops=1)  
                     Index Cond: (tid && '{490,500}'::integer[])  
 Planning Time: 0.550 ms  
 Execution Time: 21.315 ms  
(11 rows)  
```  
11、性能测试  
```  
vi t33.sql  
\set tid1 random(1,1000)   
\set tid2 random(1,1000)   
select art_id,ts from tbl_art_tag1 where tid && (array[:tid1 , :tid2])::int[] order by ts desc limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t33.sql -c 10 -j 10 -T 120  
transaction type: ./t33.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 170336  
latency average = 7.044 ms  
latency stddev = 2.417 ms  
initial connection time = 24.006 ms  
tps = 1419.594182 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set tid1 random(1,1000)   
         0.000  \set tid2 random(1,1000)   
         7.045  select art_id,ts from tbl_art_tag1 where tid && (array[:tid1 , :tid2])::int[] order by ts desc limit 100;  
```  
12、思考一下, 如果要搜索在同一篇文章中有多个符合条件的标签的文章, 怎么写SQL?  
```  
postgres=# explain analyze select art_id,ts from tbl_art_tag1 where tid @> (array[490,500])::int[] order by ts desc limit 100;   
                                                                    QUERY PLAN                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=1818.22..1818.47 rows=100 width=12) (actual time=10.007..10.026 rows=100 loops=1)  
   ->  Sort  (cost=1818.22..1825.51 rows=2917 width=12) (actual time=10.005..10.014 rows=100 loops=1)  
         Sort Key: ts DESC  
         Sort Method: top-N heapsort  Memory: 34kB  
         ->  Bitmap Heap Scan on tbl_art_tag1  (cost=33.61..1706.73 rows=2917 width=12) (actual time=3.108..9.403 rows=3182 loops=1)  
               Recheck Cond: (tid @> '{490,500}'::integer[])  
               Heap Blocks: exact=1474  
               ->  Bitmap Index Scan on tbl_art_tag1_tid_ts_idx  (cost=0.00..32.88 rows=2917 width=0) (actual time=2.867..2.869 rows=3182 loops=1)  
                     Index Cond: (tid @> '{490,500}'::integer[])  
 Planning Time: 0.204 ms  
 Execution Time: 10.186 ms  
(11 rows)  
```  
13、性能测试  
```  
vi t333.sql  
\set tid1 random(1,1000)   
\set tid2 random(1,1000)   
select art_id,ts from tbl_art_tag1 where tid @> (array[:tid1, :tid2])::int[] order by ts desc limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t333.sql -c 10 -j 10 -T 120  
transaction type: ./t333.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 281008  
latency average = 4.269 ms  
latency stddev = 1.339 ms  
initial connection time = 23.848 ms  
tps = 2342.110257 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set tid1 random(1,1000)   
         0.000  \set tid2 random(1,1000)   
         4.269  select art_id,ts from tbl_art_tag1 where tid @> (array[:tid1, :tid2])::int[] order by ts desc limit 100;  
```  
##### 场景2  
留作业, 请同学自己设计完成.  
##### 场景3  
1、创建一张表用来存储原始文本、文本向量.   
```  
CREATE TABLE test_rum(t text, a tsvector);  
```  
2、写个触发器, 自动将原始文本转换为文本向量. 插入数据时不用管文本向量是怎么生成的.   
```  
CREATE TRIGGER tsvectorupdate  
BEFORE UPDATE OR INSERT ON test_rum  
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('a', 'pg_catalog.english', 't');  
```  
3、插入测试文本.  
```  
INSERT INTO test_rum(t) VALUES ('The situation is most beautiful');  
INSERT INTO test_rum(t) VALUES ('It is a beautiful');  
INSERT INTO test_rum(t) VALUES ('It looks like a beautiful place');  
```  
4、查询数据  
```  
postgres=# select * from test_rum;  
                t                |                   a                      
---------------------------------+----------------------------------------  
 The situation is most beautiful | 'beauti':5 'situat':2  
 It is a beautiful               | 'beauti':4  
 It looks like a beautiful place | 'beauti':5 'like':3 'look':2 'place':6  
(3 rows)  
```  
5、创建rum索引  
```  
CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);  
```  
6、根据文本搜索需求, 搜索文本, 同时按匹配度(rank)顺序返回  
```  
postgres=# SELECT t, a  to_tsquery('english', 'beautiful | place') AS rank  
    FROM test_rum  
    WHERE a @@ to_tsquery('english', 'beautiful | place')  
    ORDER BY a  to_tsquery('english', 'beautiful | place');  
                t                |   rank     
---------------------------------+----------  
 It looks like a beautiful place |  8.22467  
 The situation is most beautiful | 16.44934  
 It is a beautiful               | 16.44934  
(3 rows)  
```  
通过执行计划可以看到, rum索引已经生效, 搜索和排序都是用了rum索引.  
```  
postgres=# explain SELECT t, a  to_tsquery('english', 'beautiful | place') AS rank  
    FROM test_rum  
    WHERE a @@ to_tsquery('english', 'beautiful | place')  
    ORDER BY a  to_tsquery('english', 'beautiful | place');  
                               QUERY PLAN                                 
------------------------------------------------------------------------  
 Index Scan using rumidx on test_rum  (cost=2.20..4.41 rows=1 width=36)  