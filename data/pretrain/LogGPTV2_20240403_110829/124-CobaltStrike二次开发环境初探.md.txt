CobaltStrike二次开发环境初探
原创六号刃部 酒仙桥六号部队
2020-12-09原文
这是 酒仙桥六号部队 的第 124 篇文章。
全文共计2938个字，预计阅读时长9分钟。
在我们使用cobaltstrike的过程中，会涉及到二次开发，从而使其
功能上更加的健壮，不至于碰到杀软就软了的地步，本文从cobalt
strike的快速反编译到二次开发环境的准备作为二次开发cobalts
trike的起步。
IntelliJ
IDEA自带了一个反编译java的工具，有时候我们需要对cobaltst
rike 的 整 个 jar 包 进 行 反 编 译 ， 使 用 这 个 IntelliJ
IDEA双击之类的反编译时要是对整个源码层面进行搜索并不是很方
便，可使用其自带的反编译工具，可以做到批量的整个反编译。
一 CobaltStrike反编译
这 里 先 在 IntelliJ IDEA 安 装 目 录 找 到 java-
decompiler.jar拷贝到一个准备好的目录，并且新建两个文件，
一个cs_bin里面放未反编译的cobaltstrike再建一个cs_src文
件，这个是空文件，是为了之后放反编译后的cobaltstrike
/Applications/IntelliJ IDEA.app/Contents/plugins/java-
decompiler/lib/java-decompiler.jar //找到decompiler文件
cp java-
decompiler.jar /Users/name/Desktop/wen/学习资料/java/cstips001/
//拷贝到准备好的目录
在java-decompiler中找到decompiler的路径，提取出来如下：
org/jetbrains/java/decompiler/main/decompiler/
把路径提取出来后，把反斜杠全部替换成.随之再其后加上Console
Decompilers，如下就是提供反编译的这个类。
org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompile
因 为 MANIFEST.MF 中 没 有 main
class 属 性 ， 没 有 指 定 主 类 ， 因 此 不 能 直 接 使 用 java -
jar ， 如 果 想 要 执 行 java 包 中 具 体 的 类 ， 要 使 用 java -
cp输入如下命令：
java -cp java-decompiler.jar
org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
执行的时候会有提示。
让 你 加 上 -
dgs=true后跟需要反编译的cobaltstrike和反编译之后要把cob
altstrike放入的目录，就是我们最开始建立的cs_src这个是存放
反编译后的cobaltstrike，运行这条命令即可对整个jar包开始反
编译。
ava -cp java-decompiler.jar
org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
-dgs=true cs_bin/cobaltstrike.jar cs_src/
反编译后，会自动打包成jar包，右键解压后打开可以看到都是.ja
va了，使用这个方法会非常方便，就不需要第三方工具,这个反编译
出 来 的 就 可 以 直 接 放 入 IntelliJ
IDEA中，可直接实现代码搜索，相关的交叉引用。
二 CobaltStrike二次开发环境
打 开 IntelliJ IDEA 选 择 Create New
Project一直选择Next。
这里选择路径跟起个名。
创 建 好 后 需 要 先 建 立 两 个 文 件 夹 ， 右 击 选 择 New
Directory建立一个decompiled_src文件夹，之后再建立一个li
b文件夹。
把在CSTips001中反编译好的CobaltStrike复制到decompiled_
src中，然后把它解压出来，可看到一个完整的反编译后的目录。
随后把原始的未编译的CobaltStrike放到刚刚新建的lib中去。
接 下 来 需 要 对 这 个 项 目 进 行 设 置 , 点 击 File 中 的 Project
Structure在Modules对Dependencies进行设置。
选 择 lib 中 的 cobalt
strike.jar，确认是Compile之后勾选一下，然后选择Apply。
至 此 依 赖 关 系 设 置 完 了 ， 现 在 进 入 Artifacts——>JAR——>From
modules with dependencies
这里需要一个填写一个Main Class
目 前 我 们 还 不 知 道 这 个 Main
Class 该 填 什 么 ， 可 以 点 在 lib 中 的 META-
INF 里 双 击 MANIFEST.MF ， 我 们 可 以 看 到 Main
Class，复制aggressor.Aggressor
再 次 打 开 Artifacts——>JAR——>From modules with
dependencies 在 Main
Class处填入aggressor.Aggressor选择OK,这里就设置完成了。
接下来在decompiled_src目录中找到已经反编译完的aggressor
主类,右击选择Refactor ——Copy File
在 To
directory点击添加，选择之前创建的src在其中添加一个aggres
sor名字要一致，最后点击Refactor
这样aggressor就自动的被拷贝到src目录里去了，这里可以看一
下,如图。
测试一下，修改文件，保存。
到这里我们的整个准备工作就完成了，之后就是我们要修改哪个文
件，就可以在完整的源码中找到那个文件，然后右键Refactor然后
Copy
File到这个目录然后进行修改，修改完成之后就可以选Build——
>Build Artifacts ——>Build进行编译。
当提示Build completed successfully in 4 s 227 ms (a
minute
ago)的时候，会生成一个out文件夹,其中可看我们的编译好的Myc
ustomCS.jar
在每次调试运行的时候，不需要切换到命令行环境，可以直接选择R
un中的Profile设置参数。
选择➕号，在JAR Applic添加一个配置文件。
在 Path to
JAR中选择out文件中我们修改并编译好的jar包，选择好后点击Ap
ply
最后在Run中选择Run CustoomRUn即可看到消息窗。
点击确定，发现弹出提示，没关系，继续点击确定。
我们把-XX:+AggressiveHeap复制下来。
再放到Run的Profile这里就直接选择之前创建的CustomRun填入V
M options 最后选择Apply
再次Run运行,继续复制-XX:+UseParallelGC
继续在添加到VM options中，记得要用空格隔开。
再次运行，提示auth文件找不到。
这里把初始的cobaltstrike.auth文件复制到MycustomCS.jar
同目录下。
最后运行,到这里我们需要进行二次开发的环境就搭建好了，接下来
就可以根据我们的需要通过关键字在源码中定位到具体的功能实现
的代码，从而进行修改，或作一些功能上的增强。
三 总结
本 文 使 用 IntelliJ
IDEA自带的java反编译工具，对cobaltstrike进行了快速的反编
译，并展示了修改后的效果，权当抛砖引玉，具体的插件开发各位
师傅可以结合具体场景进行编写。
参考资料
红队学院CSTips
精选留言
用户设置不下载评论