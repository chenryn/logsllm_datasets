title:Efficient Verifiable Secret Sharing with Share Recovery in BFT Protocols
author:Soumya Basu and
Alin Tomescu and
Ittai Abraham and
Dahlia Malkhi and
Michael K. Reiter and
Emin G&quot;un Sirer
Efficient Verifiable Secret Sharing with
Share Recovery in BFT Protocols
Soumya Basu∗
Cornell University; IC3
PI:EMAIL
Dahlia Malkhi∗
Calibra
PI:EMAIL
Alin Tomescu∗
MIT
PI:EMAIL
Michael K. Reiter
UNC-Chapel Hill; VMware Research
PI:EMAIL
Ittai Abraham
VMware Research
PI:EMAIL
Emin Gün Sirer
Cornell University; IC3
PI:EMAIL
Abstract
Byzantine fault tolerant state machine replication (SMR) provides
powerful integrity guarantees, but fails to provide any privacy guar-
antee whatsoever. A natural way to add such privacy guarantees
is to secret-share state instead of fully replicating it. Such a com-
bination would enable simple solutions to difficult problems, such
as a fair exchange or a distributed certification authority. How-
ever, incorporating secret shared state into traditional Byzantine
fault tolerant (BFT) SMR protocols presents unique challenges. BFT
protocols often use a network model that has some degree of asyn-
chrony, making verifiable secret sharing (VSS) unsuitable. However,
full asynchronous VSS (AVSS) is unnecessary as well since the BFT
algorithm provides a broadcast channel.
We first present the VSS with share recovery problem, which
is the subproblem of AVSS required to incorporate secret shared
state into a BFT engine. Then, we provide the first VSS with share
recovery solution, KZG-VSSR, in which a failure-free sharing incurs
only a constant number of cryptographic operations per replica.
Finally, we show how to efficiently integrate any instantiation of
VSSR into a BFT replication protocol while incurring only constant
overhead. Instantiating VSSR with prior AVSS protocols would
require a quadratic communication cost for a single shared value
and incur a linear overhead when incorporated into BFT replication.
We demonstrate our end-to-end solution via a a private key-
value store built using BFT replication and two instantiations of
VSSR, KZG-VSSR and Ped-VSSR, and present its evaluation.
ACM Reference Format:
Soumya Basu, Alin Tomescu, Ittai Abraham, Dahlia Malkhi, Michael K.
Reiter, and Emin Gün Sirer. 2019. Efficient Verifiable Secret Sharing with
Share Recovery in BFT Protocols. In 2019 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 16 pages. https://doi.org/10.
1145/3319535.3354207
∗Work done while at VMware Research.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354207
1 Introduction
Combining the power of Byzantine Fault Tolerant (BFT) replication
with secret sharing, one can build a decentralized service that acts
over private values in a coordinated manner by consensus decrees.
This powerful combination can be leveraged in various ways to
build an automated, decentralized threshold trusted third party
(T3P) where clients can store private data. For example, it may be
used to build a decentralized T3P escrow. Crucially, escrowed se-
crets will be opened by consensus decree, not necessarily requiring
client interaction. This greatly simplifies traditionally difficult prob-
lems such as a fair exchange. A fair exchange can be implemented
by having one party confidentially store one value, another party
confidentially store a second value and a consensus decree that
opens both. Another such example is a certification engine, which
computes decentralized threshold signatures to certify documents
based on some policy. Using polynomial secret sharing, multiple
values entrusted to a decentralized T3P may be aggregated without
client involvement. Simple additive aggregations are trivial to imple-
ment. Arbitrary multi-party computation is possible (e.g., [15, 41]),
though more costly.
In all of these use-cases, the enabling core is a mechanism called
Verifiable Secret Sharing (VSS) [13] used for populating a decentral-
ized service with secret values. Our use of VSS weaves it into BFT
replication in order to automate the handling of secret values. For
example, in our private key-value store, a client request to store an
entry is broken into two parts, public and private. The public part
works as a normal BFT replication request. The private part uses
VSS for the client to directly share the private entry. Importantly,
replicas delay their participation in the ordering protocol until they
obtain a verifiable share of this private entry from the client.
Due to the need to weave VSS into an arbitrary BFT replication
engine, the setting of interest to us is asynchronous. A synchronous
protocol can simply wait until all honest replicas have received a
share, while such a technique breaks in asynchronous settings.
It is crucial for the VSS protocol to simply inherit the network
model from the BFT replication engine and not require additional
assumptions. Thus, we need to solve the problem of share recovery,
which only prior works in asynchronous VSS (AVSS) schemes have
directly addressed.
The best known Asynchronous VSS (AVSS) solutions require a
client (dealer) to incur quadratic computation and communication
complexities in order to store a single value [1, 29]. This, in turn,
imposes a linear computation and storage cost on each replica,
which means that the performance overhead increases linearly with
the cluster size. When AVSS and BFT replication solutions were
originally developed, most BFT solutions were aimed for systems
of four (tolerating f = 1 faults) or seven (f = 2) replicas. However,
today, BFT replication is being revisited at scale in blockchain
systems of hundreds or thousands of replicas [? ? ? ]. Incurring
such a large degradation in service performance for privacy may
be prohibitively expensive.
To incorporate VSS into BFT protocols, this paper introduces
a new verifiable secret sharing framework called VSSR. VSSR is
a framework that, given a VSS scheme with certain properties,
adds share recovery with only a constant factor overhead from
the original VSS scheme. We instantiate VSSR in two ways: (1)
KZG-VSSR, which uses Kate, et al.’s secret sharing scheme [29] to
instantiate a VSS that has constant time share verification and (2)
Ped-VSSR, which uses Pedersen’s secret sharing scheme [42] which,
while only providing linear time share verification and recovery,
uses cheaper cryptographic operations and is faster for smaller
clusters. Our framework is based on one key concept: the recovery
polynomial. The recovery polynomial is a single polynomial that
encodes recovery information for f shares. Thus, by only sharing
a small, constant number of additional polynomials, the client can
enable all 3f + 1 shares to be recovered.
We intertwine Ped-VSSR and KZG-VSSR in a BFT replication sys-
tem and build a full private key-value store solution. Our key-value
store performs well in practice, with only a 30% to 50% throughput
overhead over a non-private key-value store with request latencies
less than 35 milliseconds.
This paper contributes a new framework for incorporating VSS
into BFT replication systems through the use of recovery polynomi-
als, VSSR. We then instantiate VSSR using two verifiable secret shar-
ing schemes and benchmark the overhead that our new framework
adds. Finally, we incorporate our two instantiations into PBFT [12]
and evaluate a private, Byzantine Fault Tolerant key value store.
2 Technical Overview
In this section, we provide a high-level, informal overview of the
core technique we use to solve the VSS with share recovery prob-
lem. We first introduce the asynchronous VSS (AVSS) problem and
show how share recovery arises in the AVSS setting and its re-
lation to Byzantine Fault Tolerance. We then discuss some prior
works in AVSS and common techniques for solving the share re-
covery problem. Finally, we provide a high level overview of our
contribution.
2.1 The Asynchronous VSS Problem
In the asynchronous VSS problem, a dealer shares to a group of
n participants a polynomial s. The API for sharing is denoted by
vssShare. If the sharing completes anywhere, then eventually every
non-faulty participant completes the sharing. The basic method for
secret sharing is to provide participant i a point (xi , s(xi)) on the
polynomial s. The method fulfills two key properties, hiding and
binding.
Loosely speaking, hiding means that for a polynomial s of degree
f , any k = f + 1 shares suffice to reconstruct it via interpolation
(API: vssReconstruct), and that no combination of f or less reveal
any information about it. Binding means that every participant
receives, in addition to its private share, a global commitment c to
the polynomial s that binds the share it receives as a verifiable valid
share of s (API: vssVerify).
In asynchronous settings, a dealer can wait for at most n − f
participants to acknowledge receiving a valid share, before it in-
evitably may walk away. Note that it is possible for the dealer
to walk away before all of the honest replicas have a valid share.
The asynchronous VSS problem requires that if the dealer (or any
participant) completes the share protocol, then every correct par-
ticipant can eventually reconstruct its share using a distributed
protocol with f + 1 correct participants: Participants contribute re-
covery information (API: vssRecoverContrib∗), which is validated
by the recipient (API: vssRecoverVerify∗) and then combined to
reconstruct the missing share (API: vssRecover∗).
VSS in Byzantine Fault Tolerance Incorporating VSS into
Byzantine Fault Tolerance (BFT) presents some unique challenges.
BFT protocols have a large variety of network assumptions and
consequently have to handle the scenario where a replica is miss-
ing part of the state. In traditional BFT protocols, the replicated
state is identical across replicas, making state recovery a matter
of transmitting and validating the state. With secret shared state,
each replica stores a unique share of the replicated private state,
which makes the problem of share recovery much more compli-
cated. AVSS protocols have minimal assumptions on the network
and must solve an analogous version of share recovery.
There are a few key design goals to meet when incorporating
AVSS into BFT. For example, it is acceptable for a Byzantine client to
lose the hiding guarantee. However, every sharing must always be
binding, since otherwise the replicated state machine can be in an
inconsistent state. Typical AVSS schemes need a reliable broadcast
protocol to guarantee this binding property. However, state ma-
chine replication (SMR) also solves the reliable broadcast problem,
eliminating the need for VSSR to implement reliable broadcast. In
particular, VSSR does not make any assumptions about the network
itself.
Additionally, there are many different Byzantine Fault Toler-
ance (BFT) algorithms in the literature that have been optimized
to perform under certain circumstances. For example, some BFT
algorithms [32? ] have often incorporated a linear "fast-path" suit-
able for cases where there are few failures. In particular, this search
for more optimized performance in the common case is something
that we foresee continuing in the BFT literature.
Thus, it is important for a secret sharing scheme to have minimal
overhead in the common case. In particular, a verifiable secret
sharing scheme used in BFT must meet the requirement that sharing
a secret only requires replicas to compute a constant number of
cryptographic operations. This ensures that the same techniques
will be reusable for more scalable BFT protocols that work with
larger clusters.
2.2 Existing Solutions
The seminal work by Shamir [45] introduced the idea of employing
polynomial interpolation, a technique that was used before for error
correction codes, to share a secret with unconditional security.
A line of work emanated from this result and addressed many
additional features, such as share verifiability, asynchrony, and
proactive share refresh.
Share verifiability tackles the problem of a malicious dealer that
equivocates and maliciously shares values that are inconsistent.
There are many such schemes with different properties, from clas-
sical works such as Feldman’s [20] and Pedersen’s [42] schemes
to newer works such as Kate et al. [29] and SCAPE [11]. VSSR can
take many of these works as input and construct a verifiable secret
sharing scheme that provides share recovery.
Original solutions for asynchronous VSS in the information-
theoretic setting were introduced in the context of Byzantine agree-
ment and secure MPC [10]. They incur communication complexity
of O(n6 log n) and message complexity O(n5).
AVSS. The first practical asynchronous VSS solution in the com-
putational setting was introduced by Cachin et al. [8]. We will refer
to it by the name AVSS. To handle share recovery, AVSS uses a
bivariate secret polynomial ˆs(·, ·). Share i consists of two univariate
polynomials, ˆs(i, ·), ˆs(·, i), and so the dealer sends O(n) information
to each participant. A missing i’th share can be reconstructed from
f + 1 evaluations of ˆs(i, ·) and f + 1 evaluations of ˆs(·, i), incur-
ring linear communication overhead per recovery, for an overall
recovery complexity of O(n2) messages and O(n3) bits.
Additionally, participants need to verify that all shares are bound
to the same polynomial. AVSS makes use of Pedersen polynomial
commitments [42] for all polynomials ˆs(i, ·), ˆs(·, i), i = 1..n. This
commitment scheme leverages the hardness of discrete log in a
multiplicative group of order q with generator д. A commitment
c(v) to a value v ∈ Zq is a value дvhr , where h is another element
of the group and r is a secret drawn at random from Zq. A Peder-
sen commitment to a polynomial s(·) ∈ Zq[x] consists of a set of
commitments to n values, i.e., c(s(·)) = {⟨xi , c(s(xi))⟩}n
i =1. Given
any pair ⟨x, s(x)⟩, it is possible to verify that this point is on s(·)
using the commitment’s homomorphic properties, i.e., that for any
v1, v2 ∈ Zq, c(v1)c(v2) is a valid commitment to v1 + v2 mod q.
AVSS weaves into the sharing protocol the dissemination of
commitments [7] while incurring message complexity O(n2) and
communication complexity O(n3).
eAVSS-SC. Kate et al. [29] introduces a polynomial commitment