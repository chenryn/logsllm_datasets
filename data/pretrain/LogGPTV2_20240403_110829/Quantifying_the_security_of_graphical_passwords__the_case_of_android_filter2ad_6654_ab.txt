tial point in Android Unlock
Patterns from the pen-and-
paper survey.
nent features of a picture (a.k.a. points in Android Unlock
Patterns) when drawing their password on the screen. On
smartphones, things become diﬀerent as the display becomes
smaller so people cannot draw too many diﬀerent patterns
on the space provided. In a sense, the prominent features
attacks make W8PP degenerate to Pass-Go on devices with
a very small screen.
3. ANDROID UNLOCK PATTERNS
The unlock patterns used in Android are a simpliﬁed ver-
sion of the Pass-Go scheme. We review the Pass-Go scheme
in the following, describe the user study we performed to
collect these patterns, and provide basic statistics about the
collected data.
3.1 Pass-Go and Android Unlock Patterns
Pass-Go [35] is a graphical password scheme proposed by
Tao and Adams in 2008 that can be seen as a successor of the
Draw-a-Secret (DAS) scheme [24]. Pass-Go displays a grid
of, say, 9 × 9 dots (similar to a Go board, hence the name).
The secret (password) of a user is a drawing on that grid,
i. e., a sequence of lines connecting the dots. These lines do
not need to be connected, i. e., multiple strokes can be used,
and a user may select diﬀerent colors for each stroke.
In
order to log in, a user needs to reproduce the secret on a
blank grid.
The Android OS uses a simpliﬁed variant of the Pass-
Go scheme to increase usability and to adapt for the small
screens found on typical devices running Android. It uses 9
points arranged in a 3 × 3 grid, typically on a touchscreen.
The user can select a path through these points according
to the following rules:
(i) At least four points must be chosen,
(ii) No point can be used twice,
(iii) Only straight lines are allowed, and
(iv) One cannot jump over points not visited before.
The ﬁrst rule ensure a certain minimal strength of the result-
ing patterns, albeit little is known about the exact implica-
tions on pattern strength. The second and third rules resolve
ambiguities from graphical representations of the patterns,
which possibly increases usability.
Figure 1 shows the grid and the points that can be reached
when starting at the upper left point. One can see that it is
not possible to reach the upper right point directly because
the straight line contains the upper middle point. Albeit,
38%4%12%11%6%2%21%2%4%163the connection between upper left and upper right point
is possible, if the upper middle point is chosen previously.
There is no easy way to directly calculate the number of
possible patterns that follow these rules, but one can eas-
ily enumerate all possible patterns and ﬁnds that there are
389.112 ≈ 219 possible patterns, which would be suﬃcient
if users chose their patterns uniformly from this set. It is
expected that users do not choose patterns uniformly, and
we will quantify this in the remainder of this work.
with four to 16 digits (resulting in a total space of(cid:80)16
In addition to use these unlock patterns, Android oﬀers
the user the choice of a personal identiﬁcation number (PIN)
i=4 10i ≈
253 PINs) or passwords with four to 16 characters (resulting
in a total space of about 2107). For both cases it is well-
known that users typically pick PINs and passwords with a
distribution that is far from being uniform [9, 28, 40].
3.2 Study Design and Data Collection
As noted previously, there has been substantial work on
the usability of graphical password schemes like Pass-Go.
However, there is a lack of work in their (practical) security
and we aim at closing this gap. One of the main challenges
of the work on graphical passwords is collecting reliable user-
generated data. In contrast to text-based passwords, where
several leaked password lists are available, this is unlikely to
happen for Android Unlock Patterns, as they are not stored
in a centralized database.
All in all, our aim was to ﬁnd frequently used passwords.
This has to be seen as an initial study on the frequency
and security of user passwords in Android Unlock Patterns.
When designing this study, we opted for a large amount of
data from diﬀerent people. This is in line with our goal to
perform an initial study of the real-world security of An-
droid Unlock Pattern. Hence, usability concerns were not
the primary focus of our work.
To evaluate the validity of the collected patterns, we addi-
tionally conducted a pen-and-paper survey, asking people for
basic statistics about their Android Unlock Patterns. Both
the user study and the survey were conducted at a large
university. For the pen-and-paper survey, we went to diﬀer-
ent departments on campus and recruited randomly selected
people. For all other parts of the study, we recruited univer-
sity members at the (by far) largest university restaurant.
This had the advantage that members of all faculties were
represented and that the people were spending 20+ minutes
there anyway. The drawback is that we had little to no
control over the actual participants.
User study.
For the user study, our main concern was that users choose
patterns that are weaker than the ones they would choose
on their own mobile phone; note that this is a common con-
cern in user studies. Therefore, we gave each user a “virtual
sweet” (i. e., the promise that he will receive a real sweet
such as for example a chocolate bar after the experiment).
The task was to “lock” this sweet with a self-chosen, graph-
ical password; we call this a defensive pattern.
If the user was able to remember this password after a 20-
minute-time-period (in which they typically went for lunch),
he could collect his sweet. There was a side-condition, though:
No other user participating in our study was supposed to
“unlock” this sweet within this 20-minute period. To try to
unlock other sweets, each user could (in addition) try up to
5 other patterns (we call these oﬀensive patterns).
In summary, the user performs the following tasks:
(i) Chooses a password (defensive pattern),
(i) Attacks up to 5 other passwords (oﬀensive patterns),
(i) Waits 20 minutes (while other users attack this speciﬁc
sweet), and
(i) Collects his sweet.
By oﬀering users to “attack” other user’s sweets we tried
to oﬀer an incentive to choose strong passwords. The results
of the study (see below) seem to indicate that we achieved
this goal, and probably slightly overdid it. A possible expla-
nation is that the chance of losing the sweets was so present
when we explained the experiment; for example, all types of
sweets were on display as a mean to attract participants.
Giving a full explanation of the psychological background
is clearly out of scope for this paper, but based on random,
non-structured user feedback there are some explanations.
Looming attack: Interestingly, many people regarded our
study as “highly unrealistic” as we assumed that “some ran-
dom guy has access to my phone for full 20 minutes”. So
consequently, they chose more robust passwords for their
sweets than for their phones as an attack on the ﬁrst was
regarded as far more likely than on the latter.
Environment: Asked by security people in a security study
to choose a secure password, people tend to overcompen-
sate and choose rather complicated password. This behavior
is well-known in psychology under the name “priming” and
documented in several studies [3].
All in all, this leads to the conclusion that the passwords
chosen by participants of the study are stronger than the
ones we would expect “in the wild”.
Pen-and-paper survey.
To check the validity of the results, we conducted a simple
pen & paper survey where we asked users for some statistical
information about their real Android Unlock Pattern. In or-
der to protect the user’s patterns we only collected very lim-
ited information about those patterns, such as length (num-
ber of connected points) and starting point. Furthermore,
all collected data was anonymized.
Ethical considerations.
As part of our work, we interviewed 584 people in a user
study about their strategies to choose patterns. This user
study was performed both as a traditional pen-and-paper
survey and also as part of a game. Users were informed
before participating in the study that they were to take part
in a scientiﬁc study and that their data was used to evaluate
the strength of Android Unlock Patterns. All data collected
during our study was used in an anonymized way (i. e., there
was no link between the collected data and an individual
user). Furthermore, statistical data was only collected to
verify that the overall user sample was not biased.
Our institute does not fall under the jurisdiction of an IRB
or similar ethics committee. We did, however, get feedback
from peers inside and outside our faculty to validate the
ethical perspective of our research.
3.3 Basic Statistics
The pen-and-paper survey was conducted in November
2012. 105 participants helped us by disclosing the starting
point and the length of their real Android Unlock Pattern.
164Table 1: Basic statistic for our ﬁrst study.
Male Female Total
Engineering Students
Humanities Students
Medicine Students
Science Students
Students (other)
University Employees
Other
Age  51
Total
35
18
-
14
3
15
8
23
61
5
-
4
93
3
8
1
5
-
1
2
4
15
1
-
-
20
38
26
1
19
3
16
10
27
76
6
-
4
113
Figure 2 shows the bias of the initial point. One can see,
that there is a strong bias of the starting point towards the
corners. While the probability for all four corners should
be 44% in total, we get 75% instead.
In contrast to this,
the center point, the right, the upper, and the lower center
points get only 14% in total. We got 5.63 as average pattern
length with a standard deviation of 1.50.
The user study was conducted in the end of 2012 until the
beginning of 2013. 113 participants took part in the study.
Table 1 summarizes the statistical data on the users we col-
lected while conducting the study. The largest group (38,
resp. 34%) of all participants are students of engineering.
In addition, 82% of all participants are male and 91% are
younger than 31. This data is in line with the overall popula-
tion of the university, although there is a slight bias towards
engineering and male students. The defensive pattern had
an average length of 6.59 with a standard deviation of 1.74.
For the oﬀensive pattern we obtained 6.33 as average length
with 1.68 as standard deviation.
All in all, there is statistical ﬂuctuation between the data
of the survey and the study. For example, the bias for the
left upper corner is 38% vs. 43%. On the other hand, these
statistical diﬀerences are in line with the sample sizes of 105
and 113, respectively. However, they do support our claim
that the users “in the wild” choose less secure passwords than
in our study, e. g., expressed in absolute password length.
So the entropies computed in the remainder of this article is
more an upper bound than an exact number on the entropy
present in Android Unlock Patterns.
We discuss the results at the end of the next section.
4. STRENGTH EVALUATION
In the following, we give a framework to analyze the col-
lected data about Android Unlock patterns regarding their
strength. In particular, we need to establish a formal notion
of “password strength”.
4.1 Brief Introduction to Markov models
The basic idea of Markov models is that subsequent to-
kens, such as letters in normal text or nodes in the Pass-Go
scheme, are rarely independently chosen by humans. For ex-
ample, in English texts, the letter following a t is more likely
to be an h than a q, and for the Pass-Go scheme nodes with
distance one are more frequently chosen than distant ones.
Based on this observation, in an n-gram Markov model one
models the probability of the next token in a string based
on a preﬁx of length n − 1. Hence, for a given sequence
of tokens c1, . . . , cm, an n-gram Markov model estimates its
probability as
P (c1, . . . , cm)
= P (c1, . . . , cn−1) · m(cid:89)
i=n
(1)
P (ci|ci−n+1, . . . , ci−1).
In order to use a Markov model we have to determine the
initial probabilities P (c1, . . . , cn−1) and the transition prob-
abilities P (cn|c1, . . . , cn−1), where we get best results when
learning these probabilities from data which is as close as
possible to the set we are attacking. One can use the rela-
tive frequencies of the n-grams to compute the probabilities
in the obvious way, but a number of problems arise, e. g., a
probability of 0 would be assigned to n-grams that are not
part of the training set. Preprocessing of the n-gram counts,
so-called smoothing, can remedy these problems to a cer-
tain extent. We will discuss several design choices regarding
Markov models in Section 4.3 and show several experiments
that justify our choice of parameters.
4.2 Implementation
When guessing Android Unlock Patterns, or any other au-
thentication strings such as traditional passwords, it is ben-
eﬁcial to guess the candidates in descending order of likeli-
hood. While this is hard for passwords in general due to the
large password space, we are in the fortunate position that
we can solve this problem in this instance. On a high level,
our implementation is structured as follows. The algorithm