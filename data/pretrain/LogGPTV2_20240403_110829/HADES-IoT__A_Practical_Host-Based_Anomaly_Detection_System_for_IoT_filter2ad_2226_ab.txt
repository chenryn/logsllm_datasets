defense solution should be capable of being deployed with
minimal effort and should not require recompilation of the
kernel of the IoT device’s OS.
2.4 Design Problems and Options
Based on the defined requirements, we analyzed our options for
developing a defense solution and identified additional constraining
factors that should also be considered as well. Initially, we conjec-
tured that the most straightforward option is to utilize features
provided by Linux, such as KProbe2 or inotify.3 This would provide
us with the support of the Linux kernel and we would be able to
base the defense solution on information provided by these fea-
tures. However, we examined several IoT devices (see Table 1) and
found that these features are not supported in any of them. An-
other design aspect we considered is the lightweight complexity
and low resource requirements of the defense solution. In particular,
the most important resources for a defense system are CPU and
memory. We measured the normal utilization of these resources
by the IoT devices in this study and found out that while there
is a reasonable reserve of CPU utilization, the CPU performance
is often low. Therefore, we must ensure that the defense solution
minimizes CPU consumption only to the extent needed. Otherwise,
other applications could be affected (e.g., delayed in performing
their normal actions), which could further deteriorate the perfor-
mance and availability of the device. We also observed that there is
only a small amount of free memory on IoT devices (e.g., in some
cases lower than 2MB), however not all of the free space can be
utilized for a defense solution, since other applications might rely
on it.
Since the challenge is to detect unknown processes in real-time
upon their spawning, the Linux process scheduler is another limit-
ing factor. In the user space environment, processes compete for
the CPU, and the process scheduler makes decisions regarding the
CPU and time allocations for the processes. Therefore, if a defense
solution were implemented in user space, there is no guarantee
that it would be running when a new process is spawned; hence,
malicious processes might be missed or detected too late. This is-
sue could be naïvely mitigated by setting the highest priority to
the defense solution, so the scheduler would prefer it over others;
however, this does not resolve the above issue, since the attacker
possesses the same capabilities as a defense solution, and thus ma-
licious processes would compete with the defense solution, having
an equal chance of being selected by the scheduler. This issue is
exacerbated by the fact that IoT devices are often equipped with
just one CPU core that contains a single processing thread. There-
fore, to ensure that none of the newly spawned processes is missed,
the defense solution cannot be dependent on the scheduler and
its planning algorithm, and must be based on a technique that is
always triggered upon spawning a new process.
System call interception is a suitable technique capable of ad-
dressing the issue of execution priority. System call interception
inserts a code with the defender’s desired functionality between the
caller’s invocation of a system call and the system call itself. Thus,
with an appropriate set of intercepted system calls, this technique
enables all new processes to be “caught” upon their spawning and
checked to determine whether they are authorized to run. In gen-
eral, there are two options for performing system call interception.
The first option is libC library hooking, which is performed in the
user space, and the second option is the interception of system calls
through a loadable kernel module (LKM) running in kernel space.
Although libC hooking is easier to develop with more freedom
compared to creating a loadable kernel module, it is not suitable
for our case, because the IoT environment is diverse, and each man-
ufacturer uses custom Linux that can be compiled with various
(or custom) libraries and their versions (including libC). Attackers
address these issues by compiling their malware statically4 in order
to cover as many IoT devices as possible. This fact renders libC
hooking unusable for the detection of the majority of malware.
Because of this and the fact that it can fulfill most of the require-
ments defined in Section 2.3, we identify LKM as the most feasible
solution.
3 PRELIMINARIES
Based on the analysis of possible options to achieve our goals,
we decided to follow the LKM option that utilizes the system call
interception technique. In this section, we explain preliminaries
related to these techniques and provide a few examples.
2https://www.kernel.org/doc/Documentation/kprobes.txt
3http://man7.org/linux/man-pages/man7/inotify.7.html
4Meaning that all required libraries are included within the malware’s binary.
Figure 1: Spawning of a new process cp
3.1 System Calls
On Linux systems, every process starts in a non-privileged mode [15].
In this mode, a process is restricted, and only capable of using the
memory space assigned to it by the Linux system. Access to the
memory space of other programs or kernel is thus prohibited and
results in raising an exception. This ensures that only the Linux
kernel has control of all of the resources. Therefore, when a pro-
gram wants to access a resource outside of its allocated memory
space, such as reading a file or executing another process, it must
perform a call to the kernel, which is realized by system calls. Every
system call has a unique numeric ID and represents a request for a
specific operation provided by the kernel. Currently, a Linux kernel
provides the user with more than 300 different system calls [20].
Upon a system call invocation, a software interrupt is raised, which
results in switching into the system mode. In the system mode, the
process is granted root privileges. This enables the Linux system
to perform restricted actions. Next, the requested operation is per-
formed by the kernel of the Linux system, which ensures that the
user space process does not interfere with the restricted resources.
System Calls that Spawn New Processes. Linux kernel pro-
vides three system calls that spawn new processes:
• Fork(). Upon its invocation, fork creates a new process
(i.e., child) by duplicating the calling process (i.e., parent). Im-
mediately after a call of fork, parent and child run in separate
memory spaces, but the spaces contain the same content.
• Vfork(). Similarly to fork, vfork creates a child process of
the calling process, but in contrast to fork, the child and
parent share the memory space after invocation. Moreover,
the parent is suspended until either the child terminates
normally or it calls the execve system call. As a result of
this behavior, vfork is often used in performance-sensitive
programs in which a child immediately makes a call to execve
after vfork has been invoked.
• Clone(). In contrast to the previous system calls, clone can
create a new thread, in addition to a new process. The clone is
more versatile compared to fork, thus libC library implemen-
tations like glibc provide a fork wrapper which internally
calls clone.
System Call that Replaces Program’s Code. Execve() is a sys-
tem call that does not have the capability to create a new process,
Figure 2: Flow of system call execution
but it often participates in process creation. When a process calls
execve, the execve executes another program whose path was passed
as one of the arguments. The program of a calling process is thus
replaced with a new program code and also stack, heap, and data
segments are newly initialized. Although execve can be called by a
process at any time, it is usually called after one of the aforemen-
tioned system calls; hence after creating a new process, its code is
immediately rewritten by the desired code. An example of process
spawning is depicted in Figure 1, where Unix utility cp is executed.
First, the process of shell is executed, which then calls a clone sys-
tem call. Clone creates a copy of the calling process itself (i.e., shell).
Next, this copy calls execve system call with arguments consisting
of cp and its parameters. Once execve successfully returns, the code
of a new process is replaced by the code of cp, and the instruction
pointer is set to the first instruction of that code. When the cp
process terminates, its return code is passed to the parent process
(i.e., shell) to indicate whether cp terminated successfully or with
an error.
Flow of System Call Execution. To create an LKM that inter-
cepts system calls within the kernel space, it is important to under-
stand how system call invocation works. The flow of a system call
execution is depicted in Figure 2. When a process invokes a system
call, in most cases it does not call the system call directly, but it calls
one of the wrappers provided by the libC library. These wrappers
may perform other actions in order to prepare the received data for
the actual system call from the Linux kernel. For example, the libC
library provides six different wrappers of execve system call.5 Once
the data are prepared, the wrapper calls the system call through a
software interrupt that transfers control to the kernel. Here, the
interrupt is caught by the software interrupt handler that may again
perform further actions to manipulate the data (e.g., saving all of
the processor registers). Afterwards, the handler looks into the
system call table to find the address of the pertinent system call
and jumps into that address, initiating the execution of the system
call. Finally, when the system call has been completed, the result is
propagated back to the calling process.
3.2 Loadable Kernel Modules (LKMs)
An LKM is an object file that can be installed in a Linux kernel in
order to extend the kernel’s base functionality. For example, drivers
of peripheral devices are implemented as LKMs. Installation is per-
formed at run time, and once an LKM is installed, its functionality
5https://www.gnu.org/software/libc/manual/html_node/Executing-a-File.html
/bin/sh/bin/sh/bin/cp/bin/shclone()(Spawn Process)execve(/bin/cp)(Replace Program)Process of shell(Parent)Process of cp(Child)ExecutionExitStatuslibC libraryProcessSystem CalllibC WrapperSystem CallSoftware Interrupt HandlerUser spaceKernel spaceSystem Call FunctionHADES-IoT: A Practical Host-Based Anomaly Detection System for IoT Devices
is integrated into the kernel. The advantages of LKMs are that they
can be installed or removed from the kernel at any time, and the
Linux kernel does not need to be recompiled to use the LKM.
Compilation and Installation of an LKM. The compilation of
LKMs is different to the compilation of a regular user space program.
Since an LKM is integrated into the Linux kernel upon insertion,
the LKM must be compatible with that kernel. Therefore, an LKM is
always compiled against the matching Linux kernel version of the
targeted device. Moreover, it is not only the kernel version that has
to match, as the configuration of the kernel features and options
must also match (e.g., EXT4 file system support, kernel debug-
ging). Fulfillment of these requirements is simple in conventional
machines (e.g., PCs), since a developer can issue the “uname -a”
command to obtain information about the Linux kernel version
as well as the configuration file used for kernel compilation (i.e.,
"/boot/" folder). However, in the case of IoT devices, the situation is
more difficult, since the Linux is usually delivered in a minimalistic
and customized form. As a result, many necessary files are missing,
including the configuration file, therefore the necessary informa-
tion must be extracted from the device using a different approach
(e.g., parsing system files /proc/version and /proc/kallsyms).
Upon insertion of an LKM, a Linux kernel checks the compati-
bility with the provided LKM using information extracted from the
LKM’s binary. However, this check does not cover all of the critical
parts that must match. Although the LKM may pass these checks
and be installed in the kernel, there is still no guarantee that it will
work properly within the kernel. If such a situation occurs, the
resulting behavior is unpredictable, and in most of the cases, the
kernel loses some functionality, freezes, or crashes. For this reason,
it is crucial to match the configuration of the kernel as much as
possible.
4 HADES-IOT
We propose a host-based anomaly detection system targeted for
IoT devices, called HADES-IoT. Most of the requirements specified
above have been fulfilled since we chose to adopt the LKM approach
that utilizes the system call interception technique and, more specif-
ically, intercepts the execve system call. Using the LKM approach,
we are able to install HADES-IoT into a Linux kernel at any time;
moreover, with this approach there is no need to recompile the
kernel. The only requirement for ensuring that HADES-IoT can
run on an IoT device is that HADES-IoT needs to be distributed in
binaries that are precompiled (see Section 6.1).
HADES-IoT is based on the whitelisting approach. The idea of
this approach is that only programs that are known to run on an
“uninfected” off the shelf device are allowed to run. In order to
build a whitelist of benign programs, profiling must be performed
once for each device. This may be viewed as impractical due to
the possibility that some benign programs may be missed during
profiling. Nevertheless, HADES-IoT includes a feature that copes
with this situation and allows the whitelist to be updated at runtime
(see Section 4.5.2).
Figure 3: Bootstrapping of HADES-IoT: 1) After deployment
of HADES-IoT on an IoT device, a profile is extracted and
stored in the whitelist, 2) HADES-IoT is switched to the en-
forcing mode that protects the device using the whitelist.
4.1 Bootstrapping
In the following, we describe the bootstrapping and operation of
HADES-IoT, while we distinguish between two modes of our ap-
proach: 1) profiling mode and 2) enforcing mode. HADES-IoT is
bootstrapped on a device in two stages (see Figure 3). First, HADES-
IoT is precompiled and delivered to the device, and the kernel’s
initialization file is modified accordingly to ensure that HADES-
IoT is always executed when the device is booted. Once executed,
HADES-IoT enters the profiling mode. In this mode, it monitors
and collects information about all calls to execve, while the whitelist
is updated accordingly. The profiling stage ends when no new pro-
cesses are detected during a specified period of time. We emphasize
that during the profiling, also a restart of the device is performed,
which enables to update whitelist with all the programs executed
at the boot time. In the last stage of bootstrapping, HADES-IoT
is switched to the enforcing mode to protect the device using the
whitelist.
4.2 Detection Process
The most important feature of the detection process is the inter-
cepting function. The process of interception is depicted in Figure 4.
Upon deployment, HADES-IoT locates the system call table and
saves the address of the execve system call found in the table. Next,
execve’s address in the table is replaced by the address of the inter-
cepting function. This ensures that each time the execve is called, the
software interrupt handler calls the intercepting function instead
of the original execve system call. Once the intercepting function is
executed, it first reads the parameters passed to the execve system
call (i.e., the path of the program to be executed). Next, the function
computes a SHA256 digest out of the program’s binary content, its
path, and other data, depending on the particular circumstances
Profiling PhaseUserIoT DeviceProtection PhasePrecompile HADES-IoTHADES-IoT binaryHADES-IoT builds whitelist out of executed programsHADES-IoTprotectsthe deviceExecute HADES-IoT in profiling modeEnd of profilingHADES-IoT is switched to enforcing modetime complexity of O(1) for a search routine, which means that any
delay associated with the search routine remains constant.
IDs in the Whitelist. Each item in the whitelist contains ID and
represents a program authorized to run on a device. The ID of an
item is a SHA256 digest computed from a program’s binary, concate-
nated with the path to the program, and in certain circumstances,
with other additional data. The reason for such computation is to
distinguish symbolic links from the executable they point to. An
example of such an executable that is heavily utilized in Linux-
based IoT devices is BusyBox.6 BusyBox combines a set of common
Unix utilities under a single executable, while particular utilities are
accessible through symbolic links. Therefore, if we were to compute
the digest out of just the binary content of the passed program, we
would obtain the digest of BusyBox for all of the utilities. However,
after adding a path element to the digest computation, the resulting
digest is different for each of the utilities.
Nevertheless, there are cases in which this approach is not suffi-
cient. Hence, we have to handle such cases with more fine-grained
whitelisting in which additional context dependent data must be
added to the input for SHA256 (see Sections 4.4.2 and 4.4.3).
4.4 Tamper-Proof Features of HADES-IoT
In our attacker model, we assume that an attacker is provided with
superuser privileges once the IoT device has been compromised.
Therefore, we need to ensure that an attacker who is aware of the
presence of HADES-IoT is not able to terminate or modify it. In the
following subsections, we list possible attacks and describe how