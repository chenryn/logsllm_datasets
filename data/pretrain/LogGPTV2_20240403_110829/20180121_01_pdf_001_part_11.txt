( dml)
• https://www.postgresql.org/docs/devel/static/sql-createindex.html
• Command: CREATE INDEX 并发创建索引
• Description: define a new index 不堵塞DML的方法
• Syntax:
• CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON
table_name [ USING method ]
• ( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ]
[ NULLS { FIRST | LAST } ] [, ...] )
• [ WITH ( storage_parameter = value [, ... ] ) ]
• [ TABLESPACE tablespace_name ]
• [ WHERE predicate ]
在线加列
• 不要加默认值
• 如果有默认值，建议后台分批更新
在线回收空间
• https://github.com/reorg/pg_repack/
• https://github.com/digoal/blog/blob/master/
201610/20161030_02.md
优化
count(*)
• partial index
• index only scan
• 预计算
• 流计算
• 采样估算
– https://github.com/digoal/blog/blob/master/201804/20180403
_03.md
• 统计信息估算
– pg_class.reltuples
SQL Hint
• create extension pg_hint_plan;
• /*+
http://pghintplan.osdn.jp/
• NestLoop(ir d)
• NestLoop(ir d rd)
• Leading(((ir d) rd))
• IndexScan(rd "def")
• IndexScan(d "bcd")
• IndexScan(ir "abc")
• */
• SELECT xxxx
• FROM
• "test01" AS rd
• INNER JOIN "test02" AS d ON (rd.test02_uuid = d.uuid)
• INNER JOIN "test03" AS ir ON (d.test03_uuid = ir.uuid)
• WHERE
• d.status = 'normal'
• AND ir.u_uuid = 'ttttttttt' and (d.test02_status in ('test02ed','checked'))
• and d.is_sub = false and d.is_filter = false ORDER BY d.test02_time desc limit 10 offset 0
SQL Hint
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器 参数优化
0 -
• 操作系统、文件系统参数
– https://github.com/digoal/blog/blob/master/201710/20171018
_01.md
– https://github.com/digoal/blog/blob/master/201611/20161121
_01.md
– https://github.com/digoal/blog/blob/master/201809/20180919
_01.md
• 数据库参数
– https://github.com/digoal/blog/blob/master/201812/20181203
_01.md
经典问题案例
• 大量长连接 + big shared buffer，page table 膨胀
– https://github.com/digoal/blog/blob/master/201803/20180325_02.md
• 会话级缓存 - 长连接（access relations cache）内存霸占
– https://github.com/digoal/blog/blob/master/201607/20160709_01.md
• 分区表分区过多-会话缓存所有表元数据，内存占用过大
– 社区已有patch, 或者使用pg_pathman
• 递归查询死循环
– 临时空间跑满
– https://github.com/digoal/blog/blob/master/201607/20160723_01.md
性能分析利器
1 - TOP SQL
pg_stat_statements
插件
性能分析利器
1 - TOP SQL
• https://github.com/digoal/blog/blob/master/201704/20170424_06.md
• create extension pg_stat_statements;
• 最耗时SQL (整体数据库优化，建议以此结果逐条优化，效果立竿见影)
• 总最耗时SQL TOP 5
• select dbid, query from pg_stat_statements order by total_time desc limit 5;
• 其他
– 最耗IO SQL
– 总最耗IO SQL TOP 5
– select dbid, query from pg_stat_statements order by (blk_read_time+blk_write_time) desc limit 5;
– 响应时间抖动最严重SQL
– select dbid, query from pg_stat_statements order by stddev_time desc limit 5;
– 最耗共享内存SQL
– select dbid, query from pg_stat_statements order by (shared_blks_hit+shared_blks_dirtied) desc limit 5;
– 最耗临时空间SQL
– select dbid, query from pg_stat_statements order by temp_blks_written desc limit 5;
性能分析利器
2 - explain
• https://www.postgresql.org/docs/10/static/sql-explain.html
• https://github.com/digoal/blog/blob/master/201704/20170424_06.md
• HDB PG
• https://github.com/digoal/blog/blob/master/201712/20171204_02.md
设置需要TRACE的开关。
查看详细的输出，逐个分析。
最重要的是分析
explain
(analyze,verbose,timing,costs,buffer
s的结果)
性能分析利器
2 - explain
• set client_min_messages=debug5;
• set log_checkpoints = on;
• set log_error_verbosity = verbose ;
• set log_lock_waits = on; 设置需要TRACE的开关。
• set log_replication_commands = off;
查看详细的输出，逐个分析。
• set log_temp_files = 0;
• set track_activities = on;
最重要的是分析explain
• set track_counts = on;
• set track_io_timing = on; (analyze,verbose,timing,costs,buffer
• set track_functions = 'all';
s的结果)
• set trace_sort=on;
• set log_statement_stats = off;
• set log_parser_stats = on;
• set log_planner_stats = on;
• set log_executor_stats = on;
• set log_autovacuum_min_duration=0;
• set deadlock_timeout = '1s';
• set debug_print_parse = off;
• set debug_print_rewritten = off;
• set debug_print_plan = off;
• set debug_pretty_print = on;
• explain (analyze,verbose,timing,costs,buffers) select count(*),relkind from pg_class group by relkind order by count(*) desc limit 1;
性能分析利器 索引推荐
2.1 -
• https://github.com/digoal/blog/blob/master/
201801/20180111_02.md
• https://github.com/digoal/blog/blob/master/
201801/20180113_02.md
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器
3 - perf
• perf
• https://github.com/digoal/blog/blob/master/201611/20161129_01.md
• 例子(分区过多导致的性能问题)
– https://github.com/digoal/blog/blob/master/201801/20180124_01.md
性能分析利器
3 - Oprofile
• https://github.com/digoal/blog/blob/master/201505/20150509_01.md
• https://github.com/digoal/blog/blob/master/201601/20160125_01.md
性能分析利器
3 - dtract\stap
• stap
– https://github.com/digoal/blog/blob/master/201310/20131017_01.md
– https://www.postgresql.org/docs/current/static/dynamic-trace.html
性能分析利器
3 - strace\pstack
• strace
• pstack
性能分析利器
3 - plprofiler
• https://bitbucket.org/openscg/plprofiler
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器 当前慢
4 - SQL
• 运行中慢SQL
– select * from pg_stat_activity where now()-query_start > interval '?s';
• 长运行中事务
– select * from pg_stat_activity where state='active' and now()-xact_start > interval '?s';
• 长空闲事务
– select * from pg_stat_activity where state='idle in transaction' and now()-xact_start > interval
'?s';
• 长2PC事务
– select * from pg_prepared_xacts where now()-prepared > interval '?s';
• 长事务的危害：
– 膨胀
– VACUUM 无用功
杀会话、杀
QUERY
• 杀会话
– select pg_terminate_backend(pid);
• 杀某个会话
– select pg_terminate_backend(pid) from pg_stat_activity where
pg_backend_pid()<>pid;
• 杀所有会话
• 杀某个用户的所有会话
– select pg_terminate_backend(pid) from pg_stat_activity where usename=?
and pid<>pg_backend_pid();
• 杀QUERY
– select pg_cancel_backend($pid);
杀死当前慢
SQL
• 如果数据库因为慢SQL耗尽资源，接近Hang死，杀
死当前慢SQL通常立竿见影
– superuser可以杀死所有用户的BACKEND
– rds superuser可以杀死所有普通用户的BACKEND
– 杀死所有用户，执行时间超过10秒的慢SQL
• select pg_terminate_backend(pid) from pg_stat_activity where
now()-query_start >= interval '10 s';
– 杀死当前用户，执行时间超过10秒的慢SQL
• select pg_terminate_backend(pid) from pg_stat_activity where
usename=current_user and now()-query_start >= interval '10 s';
限制慢 并发度
SQL
• 杀掉最近发起的慢 SQL，老的慢 SQL继续，保证
个慢 并发
N SQL
– select pg_terminate_backend(pid) from
pg_stat_activity where now()-query_start > interval '?
second' order by query_start offset $N;
– 或 pg_cancel_backend(pid)
– https://www.postgresql.org/docs/devel/static/functio
ns-admin.html#FUNCTIONS-ADMIN-SIGNAL
杀会话、杀
QUERY
性能分析利器 历史慢
4 - SQL
AWR
https://github.com/digoal/blog/blob/master/201604/20160421_01.md
性能分析利器 跟踪慢 为什么慢
5 - SQL ?
• auto_explain
– https://www.postgresql.org/docs/devel/static/auto-
explain.html
• 慢 SQL执行计划详情
– plan
– node time
– buffers, hints
– filter
会打印慢 执行计划详
auto_explain SQL
情
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器 跟踪活动日志
6 -
• log_autovacuum_min_duration = 0
– vacuum,analyze活动，消耗
• log_checkpoints = on
– 跟踪检查点开销
• log_lock_waits=on
– 跟踪锁等待
• lock_timeout=1s
– 锁等待时间阈值
• track_io_timing = on
– 跟踪IO耗时
• track_counts = on
– 计数器, pg_stat, pg_statio依赖
数据库优化
• 擒贼先擒王（TOP SQL）
• SQL执行计划分析、优化
• 数据库内核代码层瓶颈分析
• 慢SQL定位、优化
• 数据库活动信息跟踪参数
• 锁等待问题定位
• 等待事件透视
• 全面健康报告
• 9种索引接口的适应场景与选择
• 复合索引顺序
• 非驱动列扫描优化
• 优化器开关介绍（因子、开关）
• HINT的使用
性能分析利器 查看当前锁等待
7 -
• 查看锁等待，谁堵塞了谁
• https://github.com/digoal/blog/blob/master/201705/20170521_01.md
• https://github.com/digoal/blog/blob/master/201806/20180622_02.md
• Greenplum(HDB PG) segment级锁问题排查
• https://github.com/digoal/blog/blob/master/201806/20180620_01.md
• https://github.com/digoal/blog/blob/master/201708/20170822_01.md
性能分析利器 查看当前锁等待
7 -
性能分析利器 查看当前锁等待
7 -
思考、问题
• 什么情况下可能出现雪崩
• 如何防止雪崩
• 雪崩的紧急处理方法
防雪崩
• https://github.com/digoal/blog/blob/master/201712/20171211_02