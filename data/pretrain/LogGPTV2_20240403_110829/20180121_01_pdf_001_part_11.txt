### PostgreSQL 优化指南

#### 创建索引
- **文档参考**: [PostgreSQL 官方文档 - CREATE INDEX](https://www.postgresql.org/docs/devel/static/sql-createindex.html)
- **命令**: `CREATE INDEX`
- **描述**: 并发创建索引，不阻塞 DML 操作。
- **语法**:
  ```sql
  CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON table_name [ USING method ]
  ( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
  [ WITH ( storage_parameter = value [, ... ] ) ]
  [ TABLESPACE tablespace_name ]
  [ WHERE predicate ]
  ```

#### 在线加列
- **建议**:
  - 不要添加默认值。
  - 如果必须设置默认值，建议后台分批更新。

#### 在线回收空间
- **工具**:
  - [pg_repack](https://github.com/reorg/pg_repack/)
  - [相关博客](https://github.com/digoal/blog/blob/master/201610/20161030_02.md)

#### 优化 `COUNT(*)`
- **方法**:
  - 使用部分索引（Partial Index）。
  - 使用仅索引扫描（Index Only Scan）。
  - 预计算。
  - 流计算。
  - 采样估算。
    - [相关博客](https://github.com/digoal/blog/blob/master/201804/20180403_03.md)
  - 统计信息估算（`pg_class.reltuples`）。

#### SQL Hint
- **扩展安装**:
  ```sql
  CREATE EXTENSION pg_hint_plan;
  ```
- **示例**:
  ```sql
  /*+
  NestLoop(ir d)
  NestLoop(ir d rd)
  Leading(((ir d) rd))
  IndexScan(rd "def")
  IndexScan(d "bcd")
  IndexScan(ir "abc")
  */
  SELECT xxxx
  FROM
    "test01" AS rd
  INNER JOIN "test02" AS d ON (rd.test02_uuid = d.uuid)
  INNER JOIN "test03" AS ir ON (d.test03_uuid = ir.uuid)
  WHERE
    d.status = 'normal'
    AND ir.u_uuid = 'ttttttttt' AND (d.test02_status IN ('test02ed', 'checked'))
    AND d.is_sub = false AND d.is_filter = false
  ORDER BY d.test02_time DESC LIMIT 10 OFFSET 0;
  ```

#### 数据库优化
- **关键点**:
  - 优先优化 TOP SQL。
  - 分析和优化 SQL 执行计划。
  - 分析数据库内核代码层瓶颈。
  - 定位并优化慢 SQL。
  - 跟踪数据库活动信息。
  - 锁等待问题定位。
  - 等待事件透视。
  - 全面健康报告。
  - 9 种索引接口的适应场景与选择。
  - 复合索引顺序。
  - 非驱动列扫描优化。
  - 优化器开关介绍（因子、开关）。
  - HINT 的使用。

#### 性能分析利器
- **参数优化**:
  - **操作系统和文件系统参数**:
    - [相关博客1](https://github.com/digoal/blog/blob/master/201710/20171018_01.md)
    - [相关博客2](https://github.com/digoal/blog/blob/master/201611/20161121_01.md)
    - [相关博客3](https://github.com/digoal/blog/blob/master/201809/20180919_01.md)
  - **数据库参数**:
    - [相关博客](https://github.com/digoal/blog/blob/master/201812/20181203_01.md)

- **经典问题案例**:
  - 大量长连接 + 大共享缓冲区导致 page table 膨胀。
    - [相关博客](https://github.com/digoal/blog/blob/master/201803/20180325_02.md)
  - 会话级缓存 - 长连接（access relations cache）内存霸占。
    - [相关博客](https://github.com/digoal/blog/blob/master/201607/20160709_01.md)
  - 分区表分区过多 - 会话缓存所有表元数据，内存占用过大。
    - 社区已有 patch 或者使用 `pg_pathman`。
  - 递归查询死循环 - 临时空间跑满。
    - [相关博客](https://github.com/digoal/blog/blob/master/201607/20160723_01.md)

- **TOP SQL**:
  - **插件**: `pg_stat_statements`
  - **示例**:
    - 最耗时 SQL: 
      ```sql
      SELECT dbid, query FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
      ```
    - 最耗 IO SQL:
      ```sql
      SELECT dbid, query FROM pg_stat_statements ORDER BY (blk_read_time + blk_write_time) DESC LIMIT 5;
      ```
    - 响应时间抖动最严重 SQL:
      ```sql
      SELECT dbid, query FROM pg_stat_statements ORDER BY stddev_time DESC LIMIT 5;
      ```
    - 最耗共享内存 SQL:
      ```sql
      SELECT dbid, query FROM pg_stat_statements ORDER BY (shared_blks_hit + shared_blks_dirtied) DESC LIMIT 5;
      ```
    - 最耗临时空间 SQL:
      ```sql
      SELECT dbid, query FROM pg_stat_statements ORDER BY temp_blks_written DESC LIMIT 5;
      ```

- **EXPLAIN**:
  - **文档参考**: [PostgreSQL 官方文档 - EXPLAIN](https://www.postgresql.org/docs/10/static/sql-explain.html)
  - **示例**:
    ```sql
    SET client_min_messages = debug5;
    SET log_checkpoints = on;
    SET log_error_verbosity = verbose;
    SET log_lock_waits = on;
    -- 更多设置...
    EXPLAIN (ANALYZE, VERBOSE, TIMING, COSTS, BUFFERS) SELECT count(*), relkind FROM pg_class GROUP BY relkind ORDER BY count(*) DESC LIMIT 1;
    ```

- **索引推荐**:
  - [相关博客1](https://github.com/digoal/blog/blob/master/201801/20180111_02.md)
  - [相关博客2](https://github.com/digoal/blog/blob/master/201801/20180113_02.md)

- **性能分析工具**:
  - **perf**
    - [相关博客](https://github.com/digoal/blog/blob/master/201611/20161129_01.md)
    - 示例: 分区过多导致的性能问题
      - [相关博客](https://github.com/digoal/blog/blob/master/201801/20180124_01.md)
  - **Oprofile**
    - [相关博客1](https://github.com/digoal/blog/blob/master/201505/20150509_01.md)
    - [相关博客2](https://github.com/digoal/blog/blob/master/201601/20160125_01.md)
  - **dtrace/stap**
    - [相关博客](https://github.com/digoal/blog/blob/master/201310/20131017_01.md)
    - [PostgreSQL 文档](https://www.postgresql.org/docs/current/static/dynamic-trace.html)
  - **strace/pstack**
    - `strace`
    - `pstack`
  - **plprofiler**
    - [项目地址](https://bitbucket.org/openscg/plprofiler)

- **当前慢 SQL**:
  - **运行中慢 SQL**:
    ```sql
    SELECT * FROM pg_stat_activity WHERE now() - query_start > interval '?s';
    ```
  - **长运行中事务**:
    ```sql
    SELECT * FROM pg_stat_activity WHERE state = 'active' AND now() - xact_start > interval '?s';
    ```
  - **长空闲事务**:
    ```sql
    SELECT * FROM pg_stat_activity WHERE state = 'idle in transaction' AND now() - xact_start > interval '?s';
    ```
  - **长 2PC 事务**:
    ```sql
    SELECT * FROM pg_prepared_xacts WHERE now() - prepared > interval '?s';
    ```
  - **长事务的危害**:
    - 膨胀
    - VACUUM 无用功

- **杀会话、杀 QUERY**:
  - **杀会话**:
    ```sql
    SELECT pg_terminate_backend(pid);
    ```
  - **杀某个会话**:
    ```sql
    SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pg_backend_pid() <> pid;
    ```
  - **杀所有会话**:
    - 杀某个用户的所有会话:
      ```sql
      SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename = ? AND pid <> pg_backend_pid();
      ```
  - **杀 QUERY**:
    ```sql
    SELECT pg_cancel_backend($pid);
    ```

- **限制慢 SQL 并发度**:
  - **杀掉最近发起的慢 SQL**:
    ```sql
    SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE now() - query_start > interval '?second' ORDER BY query_start OFFSET $N;
    ```
  - 或者使用 `pg_cancel_backend(pid)`。

- **历史慢 SQL**:
  - **AWR 报告**:
    - [相关博客](https://github.com/digoal/blog/blob/master/201604/20160421_01.md)

- **跟踪慢 SQL 详细信息**:
  - **auto_explain**:
    - [文档参考](https://www.postgresql.org/docs/devel/static/auto-explain.html)
    - 会打印慢 SQL 的执行计划详情，包括 plan, node time, buffers, hints, filter 等。

- **跟踪活动日志**:
  - **参数设置**:
    ```sql
    log_autovacuum_min_duration = 0
    log_checkpoints = on
    log_lock_waits = on
    lock_timeout = 1s
    track_io_timing = on
    track_counts = on
    ```

- **查看当前锁等待**:
  - **示例**:
    - [相关博客1](https://github.com/digoal/blog/blob/master/201705/20170521_01.md)
    - [相关博客2](https://github.com/digoal/blog/blob/master/201806/20180622_02.md)
    - Greenplum (HDB PG) segment 级锁问题排查:
      - [相关博客1](https://github.com/digoal/blog/blob/master/201806/20180620_01.md)
      - [相关博客2](https://github.com/digoal/blog/blob/master/201708/20170822_01.md)

- **思考与问题**:
  - 什么情况下可能出现雪崩？
  - 如何防止雪崩？
  - 雪崩的紧急处理方法。
  - [相关博客](https://github.com/digoal/blog/blob/master/201712/20171211_02.md)