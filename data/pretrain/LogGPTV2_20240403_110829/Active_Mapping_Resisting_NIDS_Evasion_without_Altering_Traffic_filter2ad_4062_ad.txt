 200
 0
Profile
Figure 5. The distribution of AM proﬁles of
DHCP clients for two runs separated by ﬁve
months. The large spike in the graph corre-
sponds to Windows machines not running
any public services.
Among the 1,618 machines with ﬁxed IPs, only 35
showed any difference in AM proﬁle between the two
runs. Although we did not have complete OS informa-
tion for all these IPs for each run, our manual compar-
ison where possible showed that these were almost all
due to OS upgrades. Thus, it does not appear that there
is a considerable amount of turnover in this group.
5.3 Mapping Time
The times measured are dependent on the policies
found: since many tests’ results are determined by the
presence or absence of a response from the host within a
certain time, some policies generate more timeouts than
others. Most timeouts are on the order of 5–10 seconds;
we found this interval to be sufﬁcient to account for de-
lays at the hosts and in the network.
Mapping a single host requires approximately 37 sec-
onds. This minimum is due to the fact each of the map-
ping tests is repeated three times, and a single test re-
quires two rounds of communication.
Wall-clock time rises sublinearly through 64 hosts,
due to increased parallelism. For more than 64 hosts,
though,
times are likely to scale linearly since the
mapper implements rate-limiting to avoid packet-buffer
overﬂows (a problem we were able to alleviate in part
by using larger-than-normal packet capture buffers). In-
deed, mapping 101 hosts took 532 seconds, or 5.3 sec-
onds per host; for 64 hosts, the time was 5.7 seconds per
host and for 16 hosts, it took 10.1 seconds per host.
Our prototype implementation’s inefﬁciency resulted
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
11
5.5.1 Synthetic Tests
In order to test the correctness of the modiﬁed NIDS
(its ability to disambiguate trafﬁc correctly, we gener-
ated HTTP attack trafﬁc to 8 hosts with evasion mea-
sures added using fragroute [So02] to modiﬁed traf-
ﬁc to 2 hosts. Fragroute automatically transformed
the request stream to include overlapping and inconsis-
tent IP fragments and TCP segments. The inconsistency
favored one of two policies (in our parlance, a “ﬁrst”
policy and a “BSD” policy); the data not expected to be
accepted were chosen randomly. For the two machines
receiving modiﬁed trafﬁc, we used Active Mapping pro-
ﬁles which would allow the trafﬁc to be properly inter-
preted.
We found that the unmodiﬁed NIDS believed the
HTTP request to be:
GET /msadcTpo6EGKEY./../..%bTMmzy
QaL/system32/fipGNdDg++dir+c:
rather than:
GET /msadc/../../../../../../winnt
/system32/cmd.exe?/c+dir+c:
which was the actual request URL. It is clear that the un-
modiﬁed NIDS, which had no way to properly resolve
the ambiguous overlaps, chose the wrong data to use in
reassembly. The modiﬁed NIDS performed reassembly
correctly.
To measure the impact of Active Mapping on the
NIDS’ performance in the presence of a relatively high
proportion of ambiguous trafﬁc, we used two traces of
500 connections to the 8 hosts.
In the ﬁrst, where
none of the connections were modiﬁed by fragroute,
times were essentially identical over three trials. In the
second, where connections to two of the machines were
modiﬁed by fragroute, the Active Mapping-enabled
NIDS was actually about 15% faster, since it was able to
discard more data. In practice we expect this effect to be
small, since it is only relevant when there are overlap-
ping IP fragments or TCP segments (or the like); such
occurrences are uncommon.
5.5.2 Real-world Tests
To get a picture of the performance impact on a larger,
more realistic dataset, we used two real-world traces.
The ﬁrst was of a wide variety of non-HTTP trafﬁc
(mostly just SYN/FIN/RST packets, the data ﬁltered
out) gathered by a one-hour capture at a busy site (100.2
MB data, 1.2 M packets, 273 K connections). The sec-
ond was of two hours of HTTP trafﬁc (with full data)
at another site (137 MB, 197 K packets, 6,379 connec-
tions). In both cases, the results were the same: with
Active Mapping on, execution time was essentially iden-
tical7. Memory usage was approximately 200K higher
with AM (speciﬁc proﬁles were used for about 4,800
hosts; a default one for the rest), a small fraction of the
68MB used overall.
We are currently working on deploying an Active
Mapping-enabled NIDS operationally to get more data
on the impact of using AM proﬁles on performance and
precision.
5.6 Conclusions and Recommendations
The test results suggest that mapping can be per-
formed quite frequently. A full class C subnet can
be scanned in about 20 minutes, so daily scans during
off-peak times are certainly feasible. Importantly, with
a steady-state rate of about 5 seconds per host (using
our unoptimized prototype), it is feasible to completely
remap even large sites—say, thousands of hosts—on a
weekly basis during off-peak hours. Certain tests whose
results we expect not to change often (e.g., those related
to network topology) can be performed less frequently.
The mapping-induced trafﬁc of about 19 KB per host
mapped is quite low and its impact during off-peak hours
is likely to be negligible.
Remapping can also be triggered by any inconsis-
tency between the stored policy and an observed one.
For example, if a host sends an ICMP Needs Fragmenta-
tion message for a packet smaller than the stored PMTU,
then the host should be remapped. External information,
e.g., OS ﬁngerprint results, can be used to detect changes
in the status of a machine as well.
On-the-ﬂy mapping—mapping when the ﬁrst packet
to a host is seen—is probably not possible, because
many tests take several seconds. In any case, host pol-
icy changes are most likely to be triggered by infrequent
operating system upgrades. More frequent changes to
the policy database are those initiated by DHCP. As we
have noted, we can store policies by MAC address and
simply update a table when the NIDS sees a DHCP re-
quest (or is informed of a new lease by the DHCP server
itself). For new hosts—say, a laptop attached for the ﬁrst
time to the network—mapping can be performed in un-
der one minute (mapping a single host takes on the order
of 30 seconds). This period of uncertainty is unlikely to
be problematic, since it is rare that DHCP clients export
public services.
Runtime performance in the NIDS was not negatively
affected by the addition of Active Mapping-based dis-
ambiguation. In fact, since using Active Mapping re-
sults allows the NIDS to discard additional packets, per-
formance in some cases was actually improved. The ad-
7With AM on, it was slightly faster (less than 1). We are not sure
why this is the case; it could be due to minor cache or compiler effects
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
12
ditional memory footprint was approximately 100 bytes
per host. We expect with all mappings implemented it
would be on the order of a few hundred bytes.
The modiﬁed NIDS was also capable of correctly in-
terpreting trafﬁc in a way that the original one was not,
detecting precise attacks that the original could only hint
at through warnings about inconsistent retransmission.
We stress that no amount of care in the design of the
original could have changed its behavior in this respect:
since hosts’ behavior varies, any single policy employed
by the NIDS will inevitably fail for hosts that employ a
different one.
6 Related Work
6.1 Normalization
As previously discussed, trafﬁc normalization seeks
to eliminate network trafﬁc ambiguities by altering the
trafﬁc stream [HKP01]. The normalizer lies in the for-
warding path of packets into a site. It reassembles IP
fragments and TCP streams and statefully modiﬁes or
ﬁlters out nonconforming trafﬁc before sending packets
on to the internal network. Its efﬁcacy in improving the
precision of the NIDS relies on its output being inter-
preted in the same way by all the hosts on the network.
It largely succeeds at achieving this goal; the paper also
discusses some exceptions.
There are disadvantages to normalization, however.
A normalizer performs the same sorts of tasks as a ﬁre-
wall, but is doing more work: it deals with TCP streams
rather than just individual packets. Two main concerns
arising from this complexity are performance and ro-
bustness. Since the normalizer is in the forwarding path,
it must be able to process every packet as it arrives, even
in the presence of stateholding attacks on itself. Fur-
ther, it must be extremely reliable; if it is not, the entire
site may lose Internet connectivity. An additional con-
cern is that the normalizer changes the semantics of the
streams it rewrites. This can block useful trafﬁc, cause
unintended problems with newer protocols, or decrease
efﬁciency.
It appears that Active Mapping can replace many of
the normalizations (see the Appendix for a full list).
Still, there are cases in which some amount of normal-
ization can confer signiﬁcant beneﬁts: its ability to re-
move ﬂags and options can be used to eliminate any un-
certainty as to their use.
Accordingly, it may sometimes work best to use in-
formed partial normalization, that is, to perform a lim-
ited set of normalizations that eliminate ambiguities that
Active Mapping cannot.
If the host proﬁles indicate
that certain kinds of noncompliant packets are never ac-
cepted by any host, or if administrators want an addi-
tional layer of safety, such packets may be ﬁltered out at
the ﬁrewall.
6.2 Mapping Tools
Active Mapping’s tactic of sending specially crafted
packets and interpreting responses to infer host proper-
ties has been employed in a variety of tools.
The most common purpose for such tools is to de-
termine the operating system of a host. Nmap [Fyo01]
uses port scans combined with IP and TCP options in
responses to guess a host’s operating system. Queso
[Sa98] takes a similar tack, sending TCP packets with
illegal ﬂag combinations. By matching initial TTL val-
ues, advertised TCP windows, initial sequence numbers,
nonconforming responses to packets sent to closed ports,
and so forth, these tools can detect a large number of op-
erating system versions.
Neither provides us with enough precise information
on the long list of policy choices and parameters we
need. Since doing OS detection takes approximately as
long as Active Mapping, there seems little advantage to
doing OS detection instead for this purpose; however,
knowing the host OS can be very useful in eliminat-
ing false positives (i.e., could a particular attack actu-
ally succeed?). We note that, especially in light of the
fact that operating systems may be user-modiﬁed, the
actually observed behavior is the only relevant thing for
correct interpretation: the OS version is at best a proxy
for this information.
Nonetheless, there is a certain synergy between the
two. If OS data is known, it can serve as a quick proxy
for mapping characteristics when coupled to a database
containing canonical mappings by OS type and version.
Conversely, known mappings can give at least a rough
estimation of the OS a host is running. This can be use-
ful for alert ﬁltering: if a particular attack only works
on Linux and the mapping data suggest a Windows ma-
chine, then we can ﬁlter out irrelevant alerts without
knowing more precisely the OS versions.
The Ntop NIDS has been supplemented with network
information inferred from passive monitoring [DS00];
this information appears to be limited to guessing the
hop count and ﬁguring out which IP addresses corre-
spond to routers.
Tbit [PF01] tries to learn the TCP behavior of HTTP
servers in regards to congestion control. It only sends
legitimate TCP packets, relying on TCP options, adver-
tised windows, and timing information to deduce the
server’s TCP conﬁguration (or bugs therein). We use
its scheme for implementing our user-level TCP.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
13
7 Summary
Acknowledgments
Ambiguity in the interpretation of network trafﬁc is a
critical difﬁculty for Network Intrusion Detection. This
ambiguity takes many forms. Some types may be re-
solved by careful construction of the NIDS. Other types
are fundamentally more difﬁcult to resolve, and require
additional information about the network and the hosts
being monitored. In this paper, we have presented Ac-
tive Mapping, a method of eliminating network- and
transport-layer ambiguities by informing the NIDS of
relevant network and host TCP/IP stack policies. We
stress that the ambiguities that Active Mapping seeks to
address are readily exploitable; systems have been de-
signed for doing just that [So02, Mc98].
Active Mapping runs separately from the NIDS (typ-
ically during off-peak hours) and works by sending spe-
cially crafted packets to each host and inferring policy
from the responses it receives (or lack thereof). It does
not require any real-time manipulation of the incoming
trafﬁc stream by the NIDS. In our tests with a NIDS
modiﬁed to use Active Mapping-generated proﬁles, we
found that there was essentially no cost in terms of speed
or memory use to get the increased precision in analysis;
we expect this will hold true for any NIDS. In addition,
we have shown that Active Mapping itself is efﬁcient in
terms of time, network bandwidth consumed, and out-
put size. Preliminary mapping results show considerable
variation in policy among hosts’ TCP/IP stacks, under-
scoring the need for the precise simulation that Active
Mapping enables. Future work in this area might in-
clude exploring using passive monitoring to determine
when to remap a host, as well as an implementation of
mapping of DHCP clients and implementation of more
of the mappings described in the Appendix.
Finally, we note that the problem of ambiguous traf-
ﬁc is not conﬁned to the network and transport layers.
It also occurs at the application layer—for example, ex-
actly how will a particular URL be interpreted?—and
dealing with all possible ambiguities appears essentially
intractable. Active Mapping proﬁles might be able to
help lower false positives by allowing the NIDS to con-
sider only platform-relevant attacks, but analysis of this
potential beneﬁt is beyond the scope of this paper. Thus
we do not claim to have “solved” the NIDS evasion
problem. However, we believe that the general problem
of ambiguity resolution is best addressed in a system-
atic, layered fashion, and Active Mapping represents a
step toward eliminating ambiguity at the bottom layers.
We would like to thank Mark Handley at ICIR and
Partha Banerjee, Mark Dedlow, Jay Krous, and Craig
Leres in the SNS group at LBNL who helped us with
testing the Active Mapper and in gathering data about
the hosts on the LBNL network. We would also like
to thank Nikita Borisov, Mark Handley, Rob Johnson,
Chris Karlof, and David Wagner for their insightful and
focusing comments on this paper.
References
[Be02] Steven M. Bellovin, “A Technique for Count-
ing NATted Hosts.” Proceedings of the Sec-
ond Internet Measurement Workshop, Novem-
ber 2002.
[B+99] S. Blake et al, “An Architecture for Differenti-
ated Services,” RFC 2475, Dec. 1998.
[Dr97] R. Droms et al., “Dynamic Host Conﬁguration
Protocol,” RFC 2131, Mar. 1997.
[DS00] L. Deri and S. Suin, “Improving Network Se-
curity Using Ntop,” Proc. Third International
Workshop on the Recent Advances in Intrusion
Detection (RAID 2000), 2000.
[EF94] K. Egevang and P. Francis, “The IP Network
Address Translator (NAT),” RFC 1631, 1994.
[Fyo01] Fyodor. nmap, 2001. http://www.insecure.org/
nmap/ .
[HKP01] Mark Handley, Christian Kreibich and
Vern Paxson, “Network Intrusion Detection:
Evasion, Trafﬁc Normalization,” Proc. 10th
USENIX Security Symposium, 2001.
[Mc98] John McDonald. “Defeating Sniffers and In-
trusion Detection Systems,” Phrack Magazine,
8(54), Dec 25th, 1998.
[MLJ94] S. McCanne, C. Leres
cobson,
http://www.tcpdump.org, 1994.
libpcap,
and V.
available
Ja-
at
[Pa98] Vern Paxson, “Bro: A System for Detecting
Network Intruders in Real-Time,” Computer
Networks, 31(23-24), pp. 2435–2463, 14 Dec.
1999.
[PF01] Jitendra Padhye and Sally Floyd, “Identifying
the TCP Behavior of Web Servers,” Proc. ACM
SIGCOMM, Aug. 2001.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
14
[PN98] T. H. Ptacek and T. N. Newsham, “Inser-
tion, Evasion and Denial of Service: Elud-
ing Network Intrusion Detection”, Secure Net-
works, Inc., Jan. 1998. http://www.icir.org/vern/
Ptacek-Newsham-Evasion-98.ps
[Po80] J. Postel, “User Datagram Protocol,” RFC 768,
August 1980.
[Po81a] J. Postel,
“Internet Protocol,” RFC 791,
September 1981.
[Po81b] J. Postel, “Internet Control Message Protocol,”
RFC 792, September 1981.
[Po81c] J. Postel, “Transmission Control Protocol,”
RFC 793, September 1981.
[Sa98] Savage,
“QueSO,”
PI:EMAIL,
http://www.backupcentral.com/cgi-
1998.