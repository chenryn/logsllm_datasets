(cid:88) (cid:88) (cid:88) (cid:88)
(cid:88) (cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88) (cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88)
(cid:88) (cid:88) (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
-
34.0
-
30.1
-
3.0
-
14.2
-
16.3
-
57.9
-
81.6
-
4.0
-
13.7
-
24.2
-
47.2
-
3.3
-
Table 1: Summary of tested services, broken down by OS and category. The vast majority of services leak PII, with apps leaking more
frequently than the corresponding Web site. The leaked identiﬁers are Birthday, Device Info, Email address, Gender, Location, Name,
Phone #, Username, PassWord, and Unique IDentiﬁers.
Grubhub conﬁrmed that the passwords were inadvertently
sent via an encrypted connection to tapltyics.com, Grub-
hub’s analytics provider. Grubhub conﬁrmed it was a bug
and released a new version of the app addressing this bug
within a week after conﬁrmation, and conﬁrmed deletion of
all data by taplytics.com that was sent in error.
JetBlue informed us that the password was intentionally
sent to usablenet.com for authentication services, and that
in addition to using encryption to send the password over
the network, it is also encrypted before storing.3
In The
Food Network and NCAA Sports cases, an important issue
is that users are not made aware that their credentials are
managed by another party, since the login pages are hosted
by the ﬁrst party site and do not mention the third party.
Following the rows in Table 1, we ﬁnd that Shopping
and Travel services leak the widest variety of PII, includ-
ing phone numbers, as well as usernames and passwords to
third-parties (via HTTPS). On the other hand, Business and
Weather apps leak the fewest types of PII.
In summary, we ﬁnd that PII leaks are pervasive and diﬀer
according to app category. In general, apps leak more PII
than Web sites, which is expected since apps can request
direct access to more types of PII stored on the device than
a Web site. Interestingly, Education and Weather services
are both the most promiscuous at leaking PII (contacting
the largest number of domains) but leak fewer types of PII
than other categories.
Diﬀerences in PII Leaks.
We now focus on how
app- and Web-based versions of the same service diﬀer in
terms of PII leaks. We analyze the number of domains re-
ceiving leaks, the number of distinct identiﬁers leaked, and
the overlap in leaked identiﬁers.
Figure 1d shows a CDF of the diﬀerence in number of
domains receiving PII leaks between app- and Web-based
3A “best practice” referred to as “encrypted at rest and in motion.”
versions of the each online service, with negative numbers
indicating the Web site leaked PII to more domains. We ob-
serve very diﬀerent trends compared to A&A domains shown
in Figure 1a. The curves show that there is a slight bias to-
ward apps leaking PII to more domains than Web sites.
To understand how many distinct types of PII are leaked,
we plot a PDF of the diﬀerence in leaked identiﬁers for the
app- and Web-based version of the same service (Figure 1e).
The ﬁgure shows that the most common case is that both
the app version of the service leaks one more type of distinct
PII than the Web site, and there is a strong bias toward apps
leaking more distinct types of PII than Web sites (positive
x-values).
A key question is whether app- and Web-based versions of
services are leaking the same set of PII or not. We analyze
this using the Jaccard index, which is a metric of set similar-
ity where 0 means nothing in common and 1 means the sets
are identical. Figure 1f plots a CDF of Jaccard index values
for the PII leaked by each service’s Web and app versions.
We ﬁnd that the types of PII leaked by Web- and app-based
versions of the same service share nothing in common more
than half of the time. Overall, 80-90% of services share only
50% of the PII types leaked across app and Web.
The previous result is perhaps expected because app and
Web A&A systems have diﬀerent PII available to them, and
thus use diﬀerent mechanisms for tracking. For example,
app-based tracking can identify sessions belonging to the
same user via a device’s unique identiﬁers, while Web sites
tend to use cookie IDs and cookie matching [10]. However,
in many cases the diﬀerences in the types of PII leaks are
substantial; for example Priceline leaked birthdays and gen-
der from their Web site, but do not do so from either iOS
or Android apps (each of which in turn leaks diﬀerent PII).
In summary, we ﬁnd that apps are more likely to leak more
PII types than their Web counterparts, and most online ser-
(a) A&A domains
(b) A&A ﬂows
(c) A&A bytes
(d) Leak domains
(e) Leaked identiﬁers
(f ) Jaccard of leaked identiﬁers
Figure 1: For subﬁgures (a)-(d), we ﬁnd the diﬀerences between app and Web versions of the same service, in terms of A&A domains
visited, number of ﬂows to them, and the number of bytes they consume, and the number of domains they leak PII to. Subﬁgures (e)-(f)
compare the set of identiﬁers leaked by app and Web versions of each service.
Identiﬁers:
A&A Domain App ∩ Web App Web App ∩ Web
Services:
# of
Leaked
Avg.
Leaks:
517.0 314.0
61.4
136.0
amobee
moatads
vrvm
google-analytics
groceryserver
serving-sys
facebook
googlesyndication
thebrighttag
tiqcdn
marinsm
criteo
2mdn
monetate
247realmedia
krxd
doubleverify
cloudinary
webtrends
liftoﬀ
1
9
2
35
1
10
38
16
4
5
1
7
14
1
1
7
3
1
1
1
1
7
0
32
1
4
36
14
2
5
1
6
9
1
1
6
2
1
1
0
1
12
0
41
1
6
41
23
4
9
3
22
17
2
2
13
7
1
1
0
0.2
0.0
2.5
0.0
0.0
0.3
0.8
0.0
3.1
1.0
1.1
0.0
0.0
12.0
0.0
0.0
58.0
0.0
0.0
1.8
154.0
15.3
3.7
7.0
29.5
16.0
96.0
8.9
5.8
74.0
48.0
8.3
19.3
0.0
56.0
54.0
3
1
3
1
1
1
2
1
2
1
1
2
1
1
1
3
1
0
1
2
2
1
0
1
0
0
0
1
0
1
0
1
0
0
0
0
0
0
0
0
2
1
0
2
0
0
1
1
0
1
1
2
0
0
1
0
0
1
0
0
vices leak substantially diﬀerent PII over the two media. We