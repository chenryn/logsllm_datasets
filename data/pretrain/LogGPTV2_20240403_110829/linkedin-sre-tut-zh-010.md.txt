# Git
> 原文：
## 先决条件
1.  已经安装了 Git[https://git-scm.com/downloads](https://git-scm.com/downloads)
2.  参加过 git 高级教程或 LinkedIn 学习课程吗
    *   [https://www . LinkedIn . com/learning/git-essential-training-the-basics/](https://www.linkedin.com/learning/git-essential-training-the-basics/)
    *   [https://www . LinkedIn . com/learning/git-branch-merges-and-remotes/](https://www.linkedin.com/learning/git-branches-merges-and-remotes/)
    *   [Git 官方文档](https://git-scm.com/doc)
## 从本课程中可以期待什么
作为一名计算机科学领域的工程师，拥有版本控制工具的知识几乎成为一项要求。虽然现在有很多版本控制工具，如 SVN、Mercurial 等，但 Git 可能是最常用的工具，本课程我们将使用 Git。虽然本课程不是从 git 101 开始的，并希望将 git 的基础知识作为先决条件，但它将重新介绍您所知道的 Git 概念，并详细介绍在您执行各种 Git 命令时发生的事情。这样下次运行 git 命令时，您就可以更自信地按 enter 键了！
## 本课程不包括哪些内容
Git 内部实现细节的高级用法和细节。
## 课程内容
1.  [去基数](https://linkedin.github.io/school-of-sre/level101/git/git-basics/#git-basics)
2.  [使用分支](https://linkedin.github.io/school-of-sre/level101/git/branches/)
3.  [用 Github Git](https://linkedin.github.io/school-of-sre/level101/git/github-hooks/#git-with-github)
4.  [挂钩](https://linkedin.github.io/school-of-sre/level101/git/github-hooks/#hooks)
## 去吧，普西
尽管你可能已经意识到了，让我们再来看看为什么我们需要一个版本控制系统。随着项目的增长和多个开发人员开始工作，需要一种有效的协作方法。Git 有助于团队轻松协作，并且维护代码库发生变化的历史。
### 创建 Git Repo
任何文件夹都可以转换成 git 存储库。在执行下面的命令后，我们将在文件夹中看到一个`.git`文件夹，这使得我们的文件夹成为一个 git 存储库。**git 做的所有神奇的事情，`.git`文件夹也是同样的使能器。**
```sh
# creating an empty folder and changing current dir to it
$ cd /tmp
$ mkdir school-of-sre
$ cd school-of-sre/
# initialize a git repo
$ git init
Initialized empty Git repository in /private/tmp/school-of-sre/.git/ 
```
正如输出所说，在我们的文件夹中已经初始化了一个空的 git repo。让我们看看那里有什么。
```sh
$ ls .git/
HEAD        config      description hooks       info        objects     refs 
```
`.git`文件夹里有一堆文件夹和文件。正如我所说的，所有这些使 git 能够施展它的魔法。我们将查看其中的一些文件夹和文件。但是现在，我们只有一个空的 git 存储库。
### 跟踪文件
现在，您可能已经知道，让我们在 repo 中创建新文件(我们现在将该文件夹称为 *repo* 。)并查看 git 状态
```sh
$ echo "I am file 1" > file1.txt
$ git status
On branch master
No commits yet
Untracked files:
 (use "git add ..." to include in what will be committed)
       file1.txt
nothing added to commit but untracked files present (use "git add" to track) 
```
当前的 git 状态显示为`No commits yet`，还有一个未被跟踪的文件。因为我们刚刚创建了这个文件，所以 git 没有跟踪这个文件。我们明确需要让 git 跟踪文件和文件夹。(同时检查 [gitignore](https://git-scm.com/docs/gitignore) )我们如何通过上面输出中建议的`git add`命令来完成。然后，我们继续创建一个提交。
```sh
$ git add file1.txt
$ git status
On branch master
No commits yet
Changes to be committed:
 (use "git rm --cached ..." to unstage)
       new file:   file1.txt
$ git commit -m "adding file 1"
[master (root-commit) df2fb7a] adding file 1
1 file changed, 1 insertion(+)
create mode 100644 file1.txt 
```
注意添加文件后，git 状态显示为`Changes to be committed:`。这意味着无论在那里列出什么，都将包含在下一次提交中。然后，我们继续创建一个 commit，并通过`-m`附加一条消息。
### 关于提交的更多信息
提交是回购的快照。每当进行提交时，都会拍摄并保存存储库(文件夹)当前状态的快照。每个提交都有一个唯一的 ID。(`df2fb7a`对于我们在上一步中所做的提交)。随着我们不断添加/更改越来越多的内容并不断提交，所有这些快照都由 git 存储。同样，所有这些神奇的事情都发生在`.git`文件夹中。这是所有快照或版本以有效方式存储的地方*。*
### 添加更多更改
让我们再创建一个文件并提交更改。它看起来和我们之前提交的一样。
```sh
$ echo "I am file 2" > file2.txt
$ git add file2.txt
$ git commit -m "adding file 2"
[master 7f3b00e] adding file 2
1 file changed, 1 insertion(+)
create mode 100644 file2.txt 
```
ID 为`7f3b00e`的新提交已创建。您可以在任何时候发出`git status`来查看存储库的状态。
```sh
 **IMPORTANT: Note that commit IDs are long string (SHA) but we can refer to a commit by its initial few (8 or more) characters too. We will interchangeably using shorter and longer commit IDs.** 
```
现在我们有了两个提交，让我们将它们可视化:
```sh
$ git log --oneline --graph
* 7f3b00e (HEAD -> master) adding file 2
* df2fb7a adding file 1 
```
`git log`，顾名思义，打印所有 git 提交的日志。这里您可以看到两个额外的参数，`--oneline`打印日志的较短版本，即:只显示提交消息，而不显示提交者和提交时间。`--graph`以图形格式打印出来。
此时此刻，提交可能看起来每行只有一个，但是所有的提交都被 git 存储为一个树状数据结构。这意味着给定的提交可以有两个或更多的子提交。而不仅仅是一行提交。当我们到达分支部分时，我们将更深入地研究这一部分。现在，这是我们的提交历史:
```sh
 df2fb7a ===> 7f3b00e 
```
### 提交真的有联系吗？
正如我刚才所说的，我们刚刚做的两个提交是通过树状数据结构连接的，我们看到了它们是如何连接的。不过还是来实际验证一下吧。git 中的一切都是对象。新创建的文件存储为一个对象。对文件的更改存储为对象，甚至提交也是对象。要查看对象的内容，我们可以使用下面的命令和对象的 ID。我们将看看第二次提交的内容
```sh
$ git cat-file -p 7f3b00e
tree ebf3af44d253e5328340026e45a9fa9ae3ea1982
parent df2fb7a61f5d40c1191e0fdeb0fc5d6e7969685a
author Sanket Patel  1603273316 -0700
committer Sanket Patel  1603273316 -0700
adding file 2 
```
注意上面输出中的`parent`属性。它指向我们第一次提交的提交 id。所以这证明他们是有联系的！此外，您可以在该对象中看到第二次提交的消息。正如我所说的，所有这些魔法都是通过`.git`文件夹实现的，我们正在查看的对象也在那个文件夹中。
```sh
$ ls .git/objects/7f/3b00eaa957815884198e2fdfec29361108d6a9
.git/objects/7f/3b00eaa957815884198e2fdfec29361108d6a9 
```
它存储在`.git/objects/`文件夹中。所有文件和对它们的更改都存储在这个文件夹中。
### Git 的版本控制部分
我们已经可以在 git 日志中看到两个提交(版本)。版本控制工具给你的一个功能是在历史中来回浏览。例如:您的一些用户正在运行旧版本的代码，他们报告了一个问题。为了调试该问题，您需要访问旧代码。您当前回购中的是最新代码。在本例中，您正在进行第二次提交(7f3b00e)，有人报告了提交时代码快照的问题(df2fb7a)。这是您在任何较早的提交中访问代码的方式
```sh
# Current contents, two files present
$ ls
file1.txt file2.txt
# checking out to (an older) commit
$ git checkout df2fb7a
Note: checking out 'df2fb7a'.
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:
 git checkout -b 
HEAD is now at df2fb7a adding file 1
# checking contents, can verify it has old contents
$ ls
file1.txt 
```
这就是我们访问旧版本/快照的方式。我们所需要的只是一个对该快照的引用。在执行`git checkout ...`时，git 为您做的是使用`.git`文件夹，查看该版本/引用中的事物(文件和文件夹)的状态，并用这些内容替换当前目录的内容。当时存在的内容将不再存在于本地目录(repo)中，但我们可以而且仍然会访问它们，因为它们是通过 git commit 和`.git`文件夹存储/跟踪的。
### 参考
我在前面提到我们需要一个*引用*到这个版本。默认情况下，git repo 由提交树组成。并且每个提交都有一个唯一的 id。但是惟一的 ID 并不是我们唯一可以引用提交的东西。引用提交有多种方式。例如:`HEAD`是对当前提交的引用。*无论你的回购是在哪个提交被签出，`HEAD`都会指向那个提交。* `HEAD~1`是对以前提交的引用。因此，在检查上一节中的先前版本时，我们可能已经完成了`git checkout HEAD~1`。
同样，master 也是(对分支的)引用。因为 git 使用树状结构来存储提交，所以当然会有分支。而默认的分支叫做`master`。主(或任何分支引用)将指向分支中的最新提交。即使我们在我们的回购中已经签出到前一个提交，`master`仍然指向最近的提交。我们可以通过在`master`查阅来获得最新版本
```sh
$ git checkout master
Previous HEAD position was df2fb7a adding file 1
Switched to branch 'master'
# now we will see latest code, with two files
$ ls
file1.txt file2.txt 
```
注意，在上面的命令中，我们也可以使用提交的 ID 来代替`master`。
### 参考文献和魔法
让我们看看事情的状态。两个提交，`master`和`HEAD`引用指向最近的提交
```sh
$ git log --oneline --graph
* 7f3b00e (HEAD -> master) adding file 2
* df2fb7a adding file 1 
```
魔法？让我们检查这些文件:
```sh
$ cat .git/refs/heads/master
7f3b00eaa957815884198e2fdfec29361108d6a9 
```
维奥拉。master 指向的位置存储在一个文件中。**每当 git 需要知道 master 引用指向哪里，或者 git 需要更新 master 指向哪里，只需要更新上面的文件。**因此，当您创建一个新的提交时，会在当前提交的基础上创建一个新的提交，并使用新提交的 ID 更新主文件。
类似地，供`HEAD`参考:
```sh
$ cat .git/HEAD
ref: refs/heads/master 
```
我们可以看到`HEAD`指向一个名为`refs/heads/master`的引用。所以`HEAD`会指向曾经`master`指向的地方。
### 小冒险
我们讨论了 git 如何在我们执行命令时更新文件。但是让我们试着自己动手做，看看会发生什么。
```sh
$ git log --oneline --graph
* 7f3b00e (HEAD -> master) adding file 2
* df2fb7a adding file 1 
```
现在，让我们将 master 更改为指向上一次/第一次提交。
```sh
$ echo df2fb7a61f5d40c1191e0fdeb0fc5d6e7969685a > .git/refs/heads/master
$ git log --oneline --graph
* df2fb7a (HEAD -> master) adding file 1
# RESETTING TO ORIGINAL
$ echo 7f3b00eaa957815884198e2fdfec29361108d6a9 > .git/refs/heads/master
$ git log --oneline --graph
* 7f3b00e (HEAD -> master) adding file 2
* df2fb7a adding file 1 
```
我们刚刚编辑了`master`引用文件，现在我们只能在 git 日志中看到第一次提交。撤消对文件的更改会将状态恢复到原始状态。没有那么多魔法，是吗？