implementation of
DroidPill uses DVM to hook the application-level APIs, and
thus only works with Android 4.4 and older versions. For-
tunately, the researchers have proposed the ART hooking
techniques recently [29] [30], which allows us to transport
DroidPill to Lollipop and newer version. Therefore, Droid-
Pill may be extended to support all Android versions. Also,
since Android 5.0, apps can better control which entries they
generate on the overview screen. For example, Chrome uses
this feature to display every tab as a separate app on the
overview screen by default. Therefore, an inclusive app vir-
tualization system can take advantage of this feature to es-
tablish the UI Integrity requirement, although it cannot uti-
lize top activity preemption to launch the attack.
Monetization Strategies Since the apk ﬁles of paid
apps and system apps are not accessible for a free app, we
can only use DroidPill to launch the attacks for free apps.
However a DroidPill malware can download a target paid
app’s apk ﬁle from a hacker-controlled server to instantiate
an attack.
In such a situation, we cannot reply on Con-
text.createPackageContext() to load the guest app to the
virtual execution context. Instead, DexClassLoader can be
used to directly load the guest app’s apk ﬁle.
The internal restrictions are unavoidable, which include:
Android Permissions In order to successfully launch
the attack, a DroidPill malware needs to request the same
permissions as the guest app. However, the malware does
not carry the same code and data, and thus it may violate
the least privilege principle. If the malware excessively re-
quest the “dangerous” permissions, it may be susceptible to
the detection of anti-virus scanners.
System UIs DroidPill malware cannot completely pre-
vent a guest app from running and interacting with sys-
tem services in its native execution context. Simultane-
ous executions of a guest app in native and virtual envi-
ronment contexts may generate duplicate app icons and la-
bels in the system UIs (e.g., notiﬁcations in notiﬁcation cen-
ter, and shortcuts on home screen). Unlike the overview
screen for Android 4.4 and older versions, these system
UIs are designed to permit showing duplicate items. For
example, notiﬁcation center allows two same notiﬁcations
from the same app, or launcher apps allow users/apps to
manually/programmatically create multiple shortcuts on the
home screen. For our design choice, the DroidPill malware
can optionally turn oﬀ notiﬁcations and shortcuts posted to
the system UIs by guest apps.
App Activities In Android, app activities could be
launched by other system apps with parameters having a
launching intent that aﬀect their UIs. For example, a news
app may push a news notiﬁcation with a URL, when a user
Figure 9: Intercept VPN traﬃc on Betternet
ﬁle of a fake app. Therefore, when the market app attempts
to install an app from its online store, only the fake one
could be installed, as depicted in Figure 8 (right). Note
that Google Play client is not vulnerable to App Confusion
Attack, because DroidPill is not assumed to have system
permissions.
5.2.4 VPN Trafﬁc Sniffer
Betternet is a free VPN proxy app with over 10 million
downloads from Google Play. In order to use the VPN func-
tionality, Android needs users to explicitly grant the permis-
sion to the app via a conﬁrmation dialog showing the VPN
app’s icon and label.
It’s challenging for DroidPill, since
when the malware’s sandbox app icon and label are dis-
played in the dialog instead of the Betternet’s, which breaks
the UI Integrity requirement in the App Confusion Attack.
However, according to [16], those dialogs suﬀer from tapjack-
ing attacks, we combined the App Confusion Attack with the
tapjacking attack to exploit this VPN app.
In our experiment, the Betternet app (version 2.6.2)
spawns a child process to run a customized Linux-style ex-
ecutable to perform the VPN task, and the sandbox app’s
code (i.e., the constructor and the broker) are not loaded
and executed in that child process, so DroidPill’s existing
sandboxing mechanism does not intercept VPN traﬃc in
that child process. Finally, to address this issue, we use
ptrace for the DroidPill malware to inject a hooking library
to the child process, which hooks the system-level I/O func-
tion (i.e., read()) to capture and view all VPN traﬃc on the
test device. See Figure 9.
5.2.5 Ad Revenue Stealer
We demonstrate that DroidPill is able to exploit the An-
droid ads system and steal the ads revenue from benign apps.
However, in order to stay away from legal liability, we do not
disclose app names and ad networks that we tested. Let’s
call them app X and ad network Y. The ad network Y as-
signs ad unit IDs to app developers when including Y’s SDK
in their apps. When displaying ads, an app supplies its ad
unit ID to Y’s ad server, which helps Y map ads to the devel-
oper account. In the experiment, we signed up a developer
account and acquired an ad unit ID from Y. A DroidPill
malware was created for app X. By interposing an API in
Y’s SDK, the malware was able to replace the X’s ad unit ID
with the one that Y assigned to us. After displaying/clicking
ads in the hacked X for a few days, we found that our de-
veloper account received a small amount of money from Y.
687reacts to the notiﬁcation, the app viewer can use the URL
to download and display the online news on the device.
In such situations, if the news notiﬁcation is generated by
the original app running in the native environment context,
the DroidPill malware cannot intercept the “viewer” activity
which launchess the intent and the URL, so the victim user
cannot see the news in the UI of the sandboxed “viewer”
activity.
App State In Android, apps’ local storage can be used to
save users’ state data (e.g., login credentials), and restore the
previous app state for next time. However, as a benign app’s
state data are usually stored in its internal local storage, the
DroidPill alternative cannot access them. Therefore, when a
sandboxed guest app is started for the ﬁrst time, it has to run
from the initial state. However, users may only need to save
its state data once. In fact, the same situation happens on
benign apps as well due to reasons such as software update
and implementation errors. Therefore, we expect that users
may not be aware of the inconvenience is actually caused by
our DroidPill malware.
6.2 Countermeasures
In order to mitigate the App Confusion Attacks, we envi-
sion the following countermeasures from either of two places:
(1) the OS level, and (2) the marketplace level.
At the OS level, in order to defeat the App Confusion
Attacks, we can take the following defense strategy: assure
that the identity that an app protrays to its user is the same
identity that it is seen by the Android OS. Antonio [11] bor-
rows this idea from the anti-phishing solutions in web secu-
rity, and adds a security indicator to the system navigation
bar. This security indicator reveals the real identity of the
front-end app to the user, including app name, company
name and secure image. Unfortunately, it needs modify the
Android OS and framework. An eﬀective and lightweight
solution without OS support is still an open problem.
At the marketplace level, the Google Play licensing service
provides a practical solution to address the App Confusion
Attacks [31]. A developer can split her app in two parts:
one boot loader app and one heavy library. The boot loader
app is installed on devices, and the library is uploaded to
Google’s license server. Major functionalities of this app
are implemented in the library. To run the app properly,
the boot loader app needs to successfully authenticate itself
to the license server, and then download and execute the
library. During the license authentication process, the boot
loader app submits its app name to Google Play client via
the Binder API call. To verify the caller’s identity, Google
Play client invokes Binder.getCallingUid() to get the caller’s
UID and app name from the PackageManager service, then
compares it with the app name submitted by the caller. In
this way, DroidPill’s sandbox app cannot hide its identity
and spoof the Google Play client. The license authentication
fails. Unfortunately, most free apps do not use this service
currently. In addition, the approach cannot protect the apps
in other app stores that do not oﬀer the licensing service.
7. RELATED WORK
Invisible Rootkits In the domain of desktop and server,
researchers used Virtual Machine Monitor (VMM) to cre-
ate invisible rootkits [32] [33] [34]. The VMM rootkits are
powerful because of the possession of the strong reference
monotoring properties (i.e., complete mediation, and tam-
per proof) as well as the UI Integrity requirement. Unfor-
tunately, the technique suﬀers from two weaknesses: (1) It
is highly hardware-dependent and thus diﬃcult to migrate
among diﬀerent CPU architectures, and (2) It is challenging
to ﬁnd attack vectors for installing the VMM rootkits into
target machines.
In contrast, DroidPill is an application-
level software and thus easier for hackers to lure innocents.
App Sandboxing Studies in app sandboxing and secu-
rity enforcement can be classiﬁed into three types in views of
diﬀerent layers: (1) The use of Inline Reference Monitoring
directly inserts the reference code to target apps’ bytecode
[35] [36] [37]. (2) Similar to DroidPill, [25] and [38] instru-
ment DVM and native libraries to enforce policies via the
hooking code. (3) [39] places reference code outside of target
apps’ processes, which is close to what Boxify [22] and NJAS
[23] do. However, regarding to defensive systesms, they are
either requied to modify the OS or lack of the strong refer-
ence monitoring properties.
App Repackaging In fact, DroidPill can be thought of
a technique that a malware dynamically repackages target
apps at runtime without need to carry the code and data.
Although app repacking detection has been extensively stud-
ied in academia [40] [41] [42] [43], most focused on the detec-
tions based on static analysis, which is ineﬀective to screen
DroidPill malware due to its lack of the code and data from
target apps.
8. CONCLUSION
In this paper, we propose the App Confusion Attack, a
more stealthy application-level attack than the existing mal-
ware schemes. It can simultaneously force multiple benign
apps on a device to run in a virtual execution context con-
trolled by the DroidPill malware using an exclusive app vir-
tualization technique, instead of the native execution con-
text provided by the Android Application Framework. Af-
terwards, we demonstrate ﬁve examples of how DroidPill can
practically and eﬀectively attack mobile users or app devel-
opers with two diﬀerent attack vectors. Finally, we conclude
with possible countermeasures to the App Confusion Attack.
9. REFERENCES
[1] A Murky Road Ahead for Android, Despite Market
Dominance, http://www.nytimes.com/2015/05/28/
technology/personaltech/
a-murky-road-ahead-for-android-despite-market-dominance.
html
[2] Number of Android Applications, http:
//www.appbrain.com/stats/number-of-android-apps
[3] 97% of Mobile Malware is on Android,
http://www.forbes.com/sites/gordonkelly
[4] Zhou, Y., Jiang, X.: Dissecting Android Malware:
Characterization and Evolution. Oakland 2012.
[5] Lindorfer, M. et al.: Andrubis - 1,000,000 Apps Later:
A View on Current Android Malware Behaviors.
BADGERS 2014.
[6] Google: Android Security 2014 Year in Review,
https://static.googleusercontent.com/media/source.
android.com/en//security/reports/Google Android
Security 2014 Report Final.pdf
[7] Simplocker: First Conﬁrmed File-Encrypting
Ransomeware for Android,
688http://www.symantec.com/connect/blogs/
simplocker-ﬁrst-conﬁrmed-ﬁle-encrypting-ransomware-android
[8] Stefanko, L.: Aggressive Android Ransomeware
Spreading in the USA,
http://www.welivesecurity.com/2015/09/10/
aggressive-android-ransomware-spreading-in-the-usa/
[28] Poeplau, S. et al.: Execute This! Analyzing Unsafe
and Malicious Dynamic Code Loading in Android
Applications. NDSS 2014.
[29] Costamagna, V., Zheng, C.: ARTDroid: A Virtual
Method Hooking Framework on Android ART
Runtime. IMPS 2016.
[9] Ren, C. et al.: Towards Discovering and
[30] AllHookInOne,
Understanding Task Hijacking in Android. USENIX
Security 2015.
https://github.com/boyliang/AllHookInOne
[31] App Licensing, http://developer.android.com/google/
[10] Diao, W. et al.: No Pardon for the Interruption: New
play/licensing/index.html
[32] Rutkowska, J.: Introducing Blue Pill,
http://theinvisiblethings.blogspot.com/2006/06/
introducing-blue-pill.html
[33] Zovi, D.: Hardware Virtualization Rootkit. Blackhat
USA 2006.
[34] King, S. et al.: SubVirt: Implementing Malware with
Virtual Machines. Oakland 2006.
[35] Davis, B. and Chen, H.: RetroSkeleton: Retroﬁtting
Android Apps. MobiSys 2013.
[36] Davis, B. et al.: I-ARM-Droid: A Rewriting
Framework for In-App Reference Monitors for
Android Applications. MoST 2012.
[37] Jeon, J. et al.: Dr. Android and Mr. Hide:
Fine-grained Permissions in Android Applications.
SPSM 2012.
[38] Zhou, Y. et al.: Hybrid User-Level Sandboxing of
Third-Party Android Apps. ASIACCS 2015.
[39] Russello, G. et al.: FireDroid: Hardening Security in
Almost-Stock Android. ACSAC 2013.
[40] Zhou, W. et al.: Detecting Repackaged Smartphone
Applications in Third-Party Android Marketplaces.
CODASPY 2012.
[41] Shao, Y. et al.: Towards a Scalable Resource-Driven
Approach for Detecting Repackaged Android
Applications. ACSAC 2014.
[42] Zhou, W. et al.: Divilar: Diversifying Intermediate
Language for Anti-Repackaging on Android Platform.
CODASPY 2014.
[43] Chen, K. et al.: Finding Unknown Malice in 10
Seconds: Mass Vetting for New Threats at the
Google-Play Scale. USENIX Security 2015.
Inference Attacks on Android Through Interrupt
Timing Analysis. Oakland 2016.
[11] Bianchi, A. et al.: What the App is That? Deception
and Countermeasures in the Android User Interface.
Oakland 2015.
[12] Chen, Q. et al.: Peeking into Your App without
Actually Seeing It: UI State Inference and Novel
Android Attacks. USENIX Security 2014.
[13] Bobrov, O.: Certiﬁ-Gate: Front Door Access to
Pwning Millions of Android Devices. Blackhat USA
2015.
[14] Query String Injection: Android Provider, http:
//www.hpenterprisesecurity.com/vulncat/en/vulncat/
java/query string injection android provider.html
[15] The Android Trojan Svpeng Now Capable of Mobile
Phishing, http://securelist.com/blog/research/57301/
the-android-trojan-svpeng-now-capable-of-mobile-phishing/
[16] Rasthofer, S. et al.: An Investigation of the
Android/BadAccents Malware which Exploits a New
Android Tapjacking Attack. Technical Report 2015.
[17] Zhou, W. et al.: Slembunk: an Evolving Android
Trojan Family Targeting Users of Worldwide Banking
Apps, https://www.ﬁreeye.com/blog/threat-research/
2015/12/slembunk an evolvin.html
[18] Jung, J. et al.: Repackaging Attack on Android
Banking Applications and its Countermeasures.
Wireless Personal Communications 2013.
[19] Google Bug Bounty, https://www.google.com/about/
appsecurity/reward-program/
[20] HP Fortify Static Code Analyzer,
http://www8.hp.com/us/en/software-solutions/
static-code-analysis-sast/
[21] Masque Attack: All Your iOS Apps Belong to Us,
https://www.ﬁreeye.com/blog/threat-research/2014/
11/masque-attack-all-your-ios-apps-belong-to-us.html
[22] Backes, M. et al.: Boxify: Full-Fledged App
Sandboxing for Stock Android. USENIX Security
2015.
[23] Bianchi, A. et al.: NJAS: Sandboxing Unmodiﬁed
Applications in Non-Rooted Devices Running Stock
Android. SPSM 2015.
[24] Computer Security Technology Planning Study
(Volume I),
http://csrc.nist.gov/publications/history/ande72a.pdf
[25] Xu, R. et al.: Aurasium: Practical Policy Enforcement
for Android Applications. USENIX Security 2012.
[26] Android Dashboards, https://developer.android.com/
about/dashboards/index.html
[27] Sanz, B. et al.: PUMA: Permission Usage to Detect
Malware in Android. CISIS-ICEUTE-SOCO 2012.
689