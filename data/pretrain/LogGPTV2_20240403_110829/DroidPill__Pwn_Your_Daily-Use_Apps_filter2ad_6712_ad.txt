### Implementation of DroidPill

DroidPill initially utilized the Dalvik Virtual Machine (DVM) to hook application-level APIs, which limited its compatibility to Android 4.4 and older versions. However, recent advancements in ART (Android Runtime) hooking techniques [29][30] have enabled the extension of DroidPill to newer Android versions, including Lollipop and beyond. This development suggests that DroidPill could potentially support all Android versions.

Since Android 5.0, applications can better control their entries on the overview screen. For example, Chrome uses this feature to display each tab as a separate app. An inclusive app virtualization system like DroidPill can leverage this feature to maintain UI integrity, even though it cannot use top activity preemption for launching attacks.

### Monetization Strategies

DroidPill is primarily designed to launch attacks on free apps, as the APK files of paid and system apps are not accessible. However, a DroidPill malware can download a target paid app's APK from a hacker-controlled server to instantiate an attack. In such cases, `Context.createPackageContext()` cannot be used to load the guest app into the virtual execution context. Instead, `DexClassLoader` can be employed to directly load the guest app's APK file.

### Internal Restrictions

#### Android Permissions
To successfully launch an attack, DroidPill malware must request the same permissions as the guest app. However, this can violate the least privilege principle, especially if the malware requests "dangerous" permissions, making it more susceptible to detection by antivirus scanners.

#### System UIs
DroidPill malware cannot completely prevent a guest app from running and interacting with system services in its native execution context. Simultaneous executions in both native and virtual environments may generate duplicate app icons and labels in system UIs (e.g., notifications in the notification center and shortcuts on the home screen). Unlike the overview screen in Android 4.4 and older versions, these system UIs are designed to allow duplicate items. For instance, the notification center can show multiple notifications from the same app, and launcher apps can create multiple shortcuts. To address this, DroidPill malware can optionally disable notifications and shortcuts posted by guest apps to system UIs.

#### App Activities
In Android, app activities can be launched by other system apps with parameters that affect their UIs. For example, a news app may push a notification with a URL. If the notification is generated by the original app in the native environment, DroidPill malware cannot intercept the "viewer" activity that launches the intent and URL, resulting in the victim user not seeing the news in the sandboxed "viewer" activity.

#### App State
Apps' local storage can save users' state data (e.g., login credentials) and restore the previous app state. However, DroidPill cannot access the internal local storage of a benign app. Therefore, when a sandboxed guest app is started for the first time, it runs from the initial state. Users may only need to save their state data once, and similar situations can occur in benign apps due to software updates or implementation errors. Thus, users may not notice the inconvenience caused by DroidPill.

### Countermeasures

To mitigate App Confusion Attacks, countermeasures can be implemented at the OS level or the marketplace level.

#### OS Level
At the OS level, one defense strategy is to ensure that the identity an app portrays to its user is the same as the identity seen by the Android OS. Antonio [11] proposed adding a security indicator to the system navigation bar, revealing the real identity of the front-end app. However, this requires modifying the Android OS and framework. An effective and lightweight solution without OS support remains an open problem.

#### Marketplace Level
The Google Play licensing service provides a practical solution to address App Confusion Attacks [31]. A developer can split their app into a boot loader app and a heavy library. The boot loader app is installed on devices, and the library is uploaded to Google's license server. During the license authentication process, the boot loader app submits its app name to the Google Play client via the Binder API call. The Google Play client verifies the caller's identity by comparing the submitted app name with the app name obtained from the PackageManager service. This prevents DroidPill's sandbox app from hiding its identity and spoofing the Google Play client. Unfortunately, most free apps do not use this service, and it does not protect apps in other app stores that do not offer the licensing service.

### Related Work

#### Invisible Rootkits
Researchers have used Virtual Machine Monitors (VMM) to create invisible rootkits [32][33][34]. VMM rootkits are powerful due to their strong reference monitoring properties but suffer from hardware dependency and installation challenges. In contrast, DroidPill is an application-level software, making it easier for hackers to lure innocent users.

#### App Sandboxing
Studies in app sandboxing and security enforcement can be classified into three types:
1. Inline Reference Monitoring: Directly inserts reference code into target apps' bytecode [35][36][37].
2. Similar to DroidPill, [25] and [38] instrument DVM and native libraries to enforce policies via hooking code.
3. [39] places reference code outside of target apps' processes, similar to Boxify [22] and NJAS [23]. However, these systems either require OS modifications or lack strong reference monitoring properties.

#### App Repackaging
DroidPill can be seen as a technique for dynamically repackaging target apps at runtime without carrying their code and data. Although app repacking detection has been extensively studied [40][41][42][43], most methods focus on static analysis, which is ineffective against DroidPill malware due to its lack of target app code and data.

### Conclusion

This paper introduces the App Confusion Attack, a stealthy application-level attack that forces multiple benign apps to run in a virtual execution context controlled by DroidPill. We demonstrate five examples of how DroidPill can effectively attack mobile users or app developers using two different attack vectors. Finally, we discuss possible countermeasures to mitigate the App Confusion Attack.

### References

[1] A Murky Road Ahead for Android, Despite Market Dominance, http://www.nytimes.com/2015/05/28/technology/personaltech/a-murky-road-ahead-for-android-despite-market-dominance.html

[2] Number of Android Applications, http://www.appbrain.com/stats/number-of-android-apps

[3] 97% of Mobile Malware is on Android, http://www.forbes.com/sites/gordonkelly

[4] Zhou, Y., Jiang, X.: Dissecting Android Malware: Characterization and Evolution. Oakland 2012.

[5] Lindorfer, M. et al.: Andrubis - 1,000,000 Apps Later: A View on Current Android Malware Behaviors. BADGERS 2014.

[6] Google: Android Security 2014 Year in Review, https://static.googleusercontent.com/media/source.android.com/en//security/reports/Google Android Security 2014 Report Final.pdf

[7] Simplocker: First Confirmed File-Encrypting Ransomeware for Android, http://www.symantec.com/connect/blogs/simplocker-first-confirmed-file-encrypting-ransomware-android

[8] Stefanko, L.: Aggressive Android Ransomeware Spreading in the USA, http://www.welivesecurity.com/2015/09/10/aggressive-android-ransomware-spreading-in-the-usa/

[28] Poeplau, S. et al.: Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications. NDSS 2014.

[29] Costamagna, V., Zheng, C.: ARTDroid: A Virtual Method Hooking Framework on Android ART Runtime. IMPS 2016.

[9] Ren, C. et al.: Towards Discovering and Understanding Task Hijacking in Android. USENIX Security 2015.

[30] AllHookInOne, https://github.com/boyliang/AllHookInOne

[31] App Licensing, http://developer.android.com/google/play/licensing/index.html

[10] Diao, W. et al.: No Pardon for the Interruption: New Inference Attacks on Android Through Interrupt Timing Analysis. Oakland 2016.

[11] Bianchi, A. et al.: What the App is That? Deception and Countermeasures in the Android User Interface. Oakland 2015.

[12] Chen, Q. et al.: Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks. USENIX Security 2014.

[13] Bobrov, O.: CertiÔ¨Å-Gate: Front Door Access to Pwning Millions of Android Devices. Blackhat USA 2015.

[14] Query String Injection: Android Provider, http://www.hpenterprisesecurity.com/vulncat/en/vulncat/java/query-string-injection-android-provider.html

[15] The Android Trojan Svpeng Now Capable of Mobile Phishing, http://securelist.com/blog/research/57301/the-android-trojan-svpeng-now-capable-of-mobile-phishing/

[16] Rasthofer, S. et al.: An Investigation of the Android/BadAccents Malware which Exploits a New Android Tapjacking Attack. Technical Report 2015.

[17] Zhou, W. et al.: Slembunk: an Evolving Android Trojan Family Targeting Users of Worldwide Banking Apps, https://www.fireeye.com/blog/threat-research/2015/12/slembunk-an-evolvin.html

[18] Jung, J. et al.: Repackaging Attack on Android Banking Applications and its Countermeasures. Wireless Personal Communications 2013.

[19] Google Bug Bounty, https://www.google.com/about/appsecurity/reward-program/

[20] HP Fortify Static Code Analyzer, http://www8.hp.com/us/en/software-solutions/static-code-analysis-sast/

[21] Masque Attack: All Your iOS Apps Belong to Us, https://www.fireeye.com/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html

[22] Backes, M. et al.: Boxify: Full-Fledged App Sandboxing for Stock Android. USENIX Security 2015.

[23] Bianchi, A. et al.: NJAS: Sandboxing Unmodified Applications in Non-Rooted Devices Running Stock Android. SPSM 2015.

[24] Computer Security Technology Planning Study (Volume I), http://csrc.nist.gov/publications/history/ande72a.pdf

[25] Xu, R. et al.: Aurasium: Practical Policy Enforcement for Android Applications. USENIX Security 2012.

[26] Android Dashboards, https://developer.android.com/about/dashboards/index.html

[27] Sanz, B. et al.: PUMA: Permission Usage to Detect Malware in Android. CISIS-ICEUTE-SOCO 2012.