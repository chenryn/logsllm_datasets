title:Implementing and Proving the TLS 1.3 Record Layer
author:Antoine Delignat-Lavaud and
C&apos;edric Fournet and
Markulf Kohlweiss and
Jonathan Protzenko and
Aseem Rastogi and
Nikhil Swamy and
Santiago Zanella B&apos;eguelin and
Karthikeyan Bhargavan and
Jianyang Pan and
Jean Karim Zinzindohoue
2017 IEEE Symposium on Security and Privacy
Implementing and Proving the TLS 1.3 Record Layer
Antoine Delignat-Lavaud, Cédric Fournet,
Markulf Kohlweiss, Jonathan Protzenko, Aseem Rastogi,
Nikhil Swamy, Santiago Zanella-Béguelin
Microsoft Research
{antdl,fournet,markulf,protz,aseemr,
nswamy,santiago}@microsoft.com
Abstract—The record layer is the main bridge between TLS
applications and internal sub-protocols. Its core functionality
is an elaborate form of authenticated encryption: streams
of messages for each sub-protocol
(handshake, alert, and
application data) are fragmented, multiplexed, and encrypted
with optional padding to hide their lengths. Conversely, the sub-
protocols may provide fresh keys or signal stream termination
to the record layer.
Compared to prior versions, TLS 1.3 discards obsolete
schemes in favor of a common construction for Authenticated
Encryption with Associated Data (AEAD), instantiated with
algorithms such as AES-GCM and ChaCha20-Poly1305. It
differs from TLS 1.2 in its use of padding, associated data
and nonces. It also encrypts the content-type used to multiplex
between sub-protocols. New protocol features such as early
application data (0-RTT and 0.5-RTT) and late handshake
messages require additional keys and a more general model
of stateful encryption.
We build and verify a reference implementation of the
TLS record layer and its cryptographic algorithms in F(cid:2),
a dependently typed language where security and functional
guarantees can be speciﬁed as pre- and post-conditions. We
reduce the high-level security of the record layer to crypto-
graphic assumptions on its ciphers. Each step in the reduction
is veriﬁed by typing an F(cid:2) module; for each step that involves
a cryptographic assumption, this module precisely captures the
corresponding game.
We ﬁrst verify the functional correctness and injectivity
properties of our implementations of one-time MAC algorithms
(Poly1305 and GHASH) and provide a generic proof of their
security given these two properties. We show the security of
a generic AEAD construction built from any secure one-time
MAC and PRF. We extend AEAD, ﬁrst to stream encryption,
then to length-hiding, multiplexed encryption. Finally, we build
a security model of the record layer against an adversary
that controls the TLS sub-protocols. We compute concrete
security bounds for the AES_128_GCM, AES_256_GCM,
and CHACHA20_POLY1305 ciphersuites, and derive recom-
mended limits on sent data before re-keying.
We plug our implementation of the record layer into the
miTLS library, conﬁrm that they interoperate with Chrome
and Firefox, and report initial performance results. Combining
our functional correctness, security, and experimental results,
we conclude that the new TLS record layer (as described in
RFCs and cryptographic standards) is provably secure, and
we provide its ﬁrst veriﬁed implementation.
Karthikeyan Bhargavan, Jianyang Pan,
Jean Karim Zinzindohoué
INRIA Paris-Rocquencourt
PI:EMAIL,
PI:EMAIL,
PI:EMAIL
I. INTRODUCTION
Transport Layer Security (TLS) is the main protocol
for secure communications over the Internet. With the fast
growth of TLS trafﬁc (now most of the Web [48]), numerous
concerns have been raised about its security, privacy, and
performance. These concerns are justiﬁed by a history of
attacks against deployed versions of TLS, often originating
in the record layer.
History and Attacks Wagner and Schneier [49] report
many weaknesses in SSL 2.0. The MAC construction offers
very weak security regardless of the encryption strength. The
padding length is unauthenticated, allowing an attacker to
truncate fragments. Stream closure is also unauthenticated;
although an end-of-stream alert was added in SSL 3.0,
truncation attacks persist in newer TLS versions [12, 44].
The original MAC-pad-encrypt mode is not generically
secure [31] and is brittle in practice, despite encouraging
formal results for speciﬁc algorithms [2, 11, 39]. Many
padding oracle attacks have surfaced over the years, ranging
from attacks exploiting straightforward issues (such as im-
plementations sending padding error alerts after decryption)
to more advanced attacks using side channels [1, 37].
Although well understood, padding oracle attacks remain
difﬁcult to prevent in TLS implementations [45]. The CBC
mode of operation is also not secure against chosen-plaintext
attacks when the IV is predictable (as in TLS 1.0), which
is exploited in the BEAST attack [20]. Random explicit
IVs [15] and CBC mode for 64-bit block ciphers [10]
are also vulnerable to birthday attacks. Finally, fragment
compression can be exploited in adaptive chosen-plaintext
attacks to recover secrets [40].
Even with provably-secure algorithms, functional cor-
rectness and memory safety are essential,
inasmuch as
implementation bugs can easily nullify security guarantees.
For instance, the OpenSSL implementation of ChaCha20-
Poly1305 has been found to contain arithmetic ﬂaws [14]
and more recently, a high severity buffer overﬂow vulnera-
bility [47].
Changes in TLS 1.3 The IETF aims to robustly ﬁx the
© 2017, Antoine Delignat-Lavaud. Under license to IEEE.
DOI 10.1109/SP.2017.58
463
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Handshake
AppData
Alert
Plaintext
Key 0 (1 sided)
Key 1
Key 2
Key 3
Write channel
Handshake
AppData
Alert
Plaintext
Key 1
Read channel
Key 2
Key 3
Figure 1. Multiplexing of sub-protocol streams by the record layer,
depicting a TLS 1.3 draft-19 0-RTT handshake with re-keying.
weaknesses of the record layer by adopting a single AEAD
mode for all ciphersuites, thus deprecating all legacy modes
(MAC-only, MAC-pad-encrypt, RFC 7366 [26] encrypt-
then-MAC, compress-then-encrypt). The new AEAD mode
is designed to be provably-secure and modular, supporting
algorithms such as AES-GCM, AES-CCM, and ChaCha20-
Poly1305 within the same framework. The usage of AEAD
has also been improved: authentication no longer relies
on associated data, whereas implicit nonces derived from
initialization vectors (IV) and sequence numbers yield better
security and performance.
What is the Record Layer? TLS involves establishing
and using many encryption keys. In the key exchange
literature, a common viewpoint is to treat each key generated
in the handshake as belonging to a speciﬁc, independent
application. Under this model, the handshake encryption key
is used only by the handshake to encrypt its own messages,
and must be separate from the application data key used
only to encrypt application data fragments. This model does
not ﬁt the actual use of keys in TLS: it fails to capture TLS
1.2 renegotiation (where handshake messages are interleaved
with the application data stream), TLS 1.3 post-handshake
authentication and re-keying, or even alerts in any TLS
version. In our modularization of TLS, following Bhargavan
et al. [11], we consider that each sub-protocol of TLS—
handshake, change cipher spec (CCS), alert and application
data (AppData)—deﬁnes its own data stream. The role of
the record is to multiplex all of these streams into one,
corresponding to network messages after fragmentation,
formatting, padding, and optional record-layer encryption.
Under this model, the record layer is the exclusive user for
all non-exported keys generated by the handshake, and there
is no need to assign keys to any given sub-protocol stream.
Figure 1 illustrates the stream multiplexing for a TLS
1.3 connection with 0-RTT data and one re-keying from the
point of view of the client. Separate channels are used for
writing and reading. Within each channel, a band in the
ﬁgure represents a stream, and arrows represent message
(cid:8)(cid:15)(cid:27)(cid:18)(cid:32)(cid:22)(cid:15)(cid:24)(cid:19)(cid:41)(cid:2)(cid:25)(cid:19)(cid:31)(cid:33)
(cid:2)(cid:29)(cid:29)(cid:25)(cid:23)(cid:17)(cid:15)(cid:33)(cid:23)(cid:28)(cid:27)(cid:1)
(cid:12)(cid:8)(cid:19)(cid:17)(cid:39)(cid:1)
(cid:24)(cid:45)(cid:38)(cid:1)(cid:24)(cid:46)(cid:38)(cid:40)
(cid:5)(cid:3)(cid:4)(cid:1)(cid:17)(cid:15)(cid:8)(cid:7)(cid:11)(cid:9)(cid:11)(cid:7)
(cid:2)(cid:8)(cid:14)(cid:8)(cid:16)(cid:11)(cid:7)
(cid:9)(cid:16)(cid:6)(cid:10)(cid:13)(cid:8)(cid:14)(cid:18)(cid:17)(cid:39) (cid:18)(cid:45)(cid:38)(cid:1)(cid:18)(cid:46)(cid:38)(cid:1)(cid:18)(cid:47)
(cid:12)(cid:19)(cid:17)(cid:28)(cid:31)(cid:18)
(cid:9)(cid:8)(cid:13)(cid:5)
(cid:13)(cid:33)(cid:2)(cid:5)
(cid:2)(cid:5)(cid:2)(cid:4)
(cid:13)(cid:19)(cid:30)(cid:34)(cid:19)(cid:27)(cid:17)(cid:19)(cid:1) (cid:28)(cid:20)(cid:1)(cid:32)(cid:33)(cid:31)(cid:19)(cid:15)(cid:26)(cid:32)
(cid:24)(cid:19)(cid:37)(cid:19)(cid:18)(cid:1)(cid:16)(cid:37)(cid:1)(cid:8)(cid:15)(cid:27)(cid:18)(cid:32)(cid:22)(cid:15)(cid:24)(cid:19)(cid:1)
(cid:9)(cid:19)(cid:27)(cid:21)(cid:33)(cid:22)(cid:42)(cid:8)(cid:23)(cid:18)(cid:23)(cid:27)(cid:21)(cid:1) (cid:43)(cid:29)(cid:15)(cid:18)(cid:18)(cid:19)(cid:18)(cid:44)
(cid:10)(cid:34)(cid:25)(cid:33)(cid:23)(cid:29)(cid:25)(cid:19)(cid:36)(cid:19)(cid:18)(cid:1) (cid:13)(cid:33)(cid:31)(cid:19)(cid:15)(cid:26)(cid:32)
(cid:13)(cid:33)(cid:31)(cid:19)(cid:15)(cid:26)(cid:1)(cid:5)(cid:27)(cid:17)(cid:31)(cid:37)(cid:29)(cid:33)(cid:23)(cid:28)(cid:27)(cid:1) (cid:35)(cid:23)(cid:33)(cid:22)
(cid:32)(cid:19)(cid:30)(cid:34)(cid:19)(cid:27)(cid:17)(cid:19)(cid:1)(cid:27)(cid:34)(cid:26)(cid:16)(cid:19)(cid:31)(cid:32)
(cid:7)(cid:19)(cid:27)(cid:19)(cid:31)(cid:23)(cid:17)(cid:1)(cid:2)(cid:5)(cid:2)(cid:4)(cid:1)(cid:17)(cid:28)(cid:27)(cid:32)(cid:33)(cid:31)(cid:34)(cid:17)(cid:33)(cid:23)(cid:28)(cid:27)
(cid:11)(cid:12)(cid:6)
(cid:10)(cid:2)(cid:3)
(cid:14)(cid:19)(cid:31)(cid:23)(cid:20)(cid:23)(cid:19)(cid:18)
(cid:3)(cid:31)(cid:37)(cid:29)(cid:33)(cid:28)(cid:1)(cid:25)(cid:23)(cid:16)(cid:31)(cid:15)(cid:31)(cid:37)
(cid:2)(cid:5)(cid:13)
(cid:3)(cid:22)(cid:15)(cid:3)(cid:22)(cid:15)(cid:47)(cid:45)
(cid:7)(cid:8)(cid:2)(cid:13)(cid:8)
(cid:11)(cid:28)(cid:25)(cid:37)(cid:46)(cid:48)(cid:45)(cid:49)
Figure 2. Modular structure of our proof. Green arrows denote security
reductions proved by typing.
fragments (incoming for left arrows, outgoing for right
arrows) over time (ﬂowing from left to right). Dashed arrows
represent fragments used to signal key changes to the record
layer. In TLS 1.2, CCS messages signal key changes; in TLS
1.3 this function is taken over by handshake messages.
Related Work Since the ﬁrst draft of TLS 1.3 in April
2014,
the handshake and key schedule have undergone
signiﬁcant analysis efforts [17, 18, 23, 28, 29, 32] as their
design evolved over 19 iterations (at the time of writing). In
contrast, few authors have analyzed changes to the record
layer: Fischlin et al. [22] and Badertscher et al. [3] analyze
an early draft
that did not feature many of the current
changes (for instance, it still relied on associated data to
authenticate record meta-data), and Bellare and Tackmann
[7] speciﬁcally focus on the way nonces are derived from
IVs. This focus on the handshake protocol may be explained
by the difﬁculty of analyzing the record independently of the
handshake, and more generally, of deﬁning the precise scope
of its functionality. Authenticated and Conﬁdential Channel
Establishment (ACCE) [27, 33] is a game-based model that
combines the handshake and the record protocols. While
ACCE models capture complex features of TLS 1.2 such as
renegotiation [25], its focus is primarily on the handshake,
and it is unclear how to capture features such as post-
handshake authentication [19]. Other limits of ACCE models
are discussed in [3].
Our contributions We provide a reference implementation
of the TLS record layer and its underlying cryptographic
algorithms using the F(cid:2) programming language. We deﬁne
security as an indistinguishability game and show a reduc-
tion with concrete bounds (Table I) for any distinguisher
to standard, low-level cryptographic assumptions. Our proof
structure is depicted in Figure 2; from the bottom up:
464
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
1) We build a generic library for one-time message au-
thentication codes (MAC) based on the Wegman-Carter-
Shoup construction. We implement
the GHASH and
Poly1305 algorithms, and we prove the functional correct-
ness (with regards to mathematical speciﬁcations), memory
safety, and encoding injectivity of the resulting low-level
code (§III). Similarly, we build a library for pseudo-random
functions (PRF), and provide functionally-correct, memory-
safe implementations for AES and ChaCha20 (§IV). We
express the security guarantees of these libraries using cryp-
tographic idealizations backed by game-based assumptions.
2) We describe a generic AEAD construction that
captures both RFC 5288 [41]
for AES-GCM (as de-
scribed in NIST SP800-38D [21]) and RFC 7539 [38] for
ChaCha20-Poly1305 through an interface compatible with
RFC 5116 [36]. We show that this construction satisﬁes a
standard notion of AEAD security (§V) that combines in-
distinguishability under chosen-plaintext attacks (IND-CPA)
with ciphertext integrity (INT-CTXT). Our proof applies to
our F(cid:2) implementation and, based on the idealizations of
our two libraries, is veriﬁed by typing—as are the following
three steps:
3) From AEAD, we build and verify stream encryption,
which uses AEAD nonces and record sequence numbers
according to the TLS version-speciﬁc format (§VI).
4) From stream encryption, we build a length-hiding
encryption interface by adding padding, the TLS-speciﬁc
content type multiplexing, and version-speciﬁc associated
data (§VII).
5) From length-hiding stream encryption with multiplex-
ing, we implement the TLS record layer by adding interfaces
to the handshake and alert sub-protocols that extend streams
to sequences of streams by installing and enabling keys
(§VIII). This captures novel protocol features of TLS 1.3
such as early application data (0-RTT and 0.5 RTT), late
handshake messages, and re-keying. Based on our security
bound, we propose a re-keying strategy that compensates for
potential weaknesses in AES-GCM.
6) We evaluate our implementation of the TLS record
layer (§IX) by linking our AES-GCM and ChaCha20-
Poly1305 ciphersuites to the handshake implementation of
miTLS [11]. We conﬁrm network interoperability with other
TLS libraries both for TLS 1.2 and TLS 1.3 draft-14 and
draft-18. Our code and formal development maximize reuse
between TLS 1.2 and 1.3.
Additional Materials An extended version of this pa-
per with additional details and proofs of the results in
§III, §IV, and §V is available from a companion website
https://project-everest.github.io/record/. This website also
provides links to online repositories that include all veriﬁed
code we report on in the paper, as well as instructions on
how to verify, extract and run the code.
II. COMPOSITIONAL VERIFICATION BY TYPING
To implement and verify the record layer, we adopt a compo-
sitional approach to functional correctness and cryptographic
security based on F(cid:2) [46], a dependently-typed program-
ming language. This section explains our approach on two
examples: arithmetic in a prime ﬁeld for the Poly1305
algorithm, and basic authenticated encryption. We refer the
reader to Fournet et al. [24] for a general presentation of our
approach and Barthe et al. [4] for a probabilistic semantics
of F(cid:2) and additional cryptographic examples.
We use F(cid:2) not only to implement cryptographic con-
structions, but also as the formal syntax for their game-
based security deﬁnitions. This is akin to the approach
taken by Bhargavan et al. [13] in their proof of a TLS
1.2 handshake implementation using F7, an ancestor of F(cid:2).
In contrast to F7, F(cid:2) supports an imperative programming
style that is closer to pseudo-code used by cryptographers in
code-based games [5]. For most of the paper, we use such
pseudo-code instead of more precise and verbose F(cid:2) code.
We do not assume familiarity with F(cid:2) and elide details of
its syntax, such as type annotations, that are not relevant for
the developments in this paper.
Functional Correctness of Poly1305 As a ﬁrst example in
F(cid:2) syntax, we specify arithmetic in the ﬁeld GF (2130 − 5)
for the Poly1305 MAC algorithm as follows:
let p = 2^130 − 5 (∗ the prime order of the ﬁeld ∗)
type elem = n:nat {n < p} (∗ the type of ﬁeld elements ∗)
let x +@ y : Tot elem = (x + y) % p (∗ ﬁeld addition ∗)
let x ∗@ y : Tot elem = (x ∗ y) % p (∗ ﬁeld multiplication ∗)
This code uses F(cid:2) mathematical (unbounded) natural num-
bers to deﬁne the prime order p of the ﬁeld and the type
of ﬁeld elements. (The formula {n < p} line 2 states that
this type is inhabited by natural numbers n smaller than p.)