MASTER THESIS 
Thesis submitted in partial fulfillment of the requirements  
for the degree of Master of Science in Engineering at the  
University of Applied Sciences Technikum Wien –  
Degree Program IT-Security 
Variation analysis of exploitable  
browser vulnerabilities 
By: René Freingruber, BSc 
Student number: 1810303034 
Supervisors: 
1. Supervisor: Dipl.-Ing. (FH) Mag. DI Christian Kaufmann 
2. Supervisor: Patrick Wollgast, MSc 
Vienna, 2020-09-13 
Declaration 
“As author and creator of this work to hand, I confirm with my signature knowledge of the 
relevant copyright regulations governed by higher education acts (see  Urheberrechtsgesetz 
/Austrian copyright law as amended as well as the Statute on Studies Act Provisions / 
Examination Regulations of the UAS Technikum Wien as amended). 
I hereby declare that I completed the present work independently and that any ideas, 
whether written by others or by myself, have been fully sourced and referenced. I am aware 
of any consequences I may face on the part of the degree program director if there should 
be evidence of missing autonomy and independence or evidence of any intent to fraudulently 
achieve a pass mark for this work (see Statute on Studies Act Provisions / Examination 
Regulations of the UAS Technikum Wien as amended). 
I further declare that up to this date I have not published the work to hand nor have I 
presented it to another examination board in the same or similar form. I affirm that the version 
submitted matches the version in the upload tool.” 
Place, Date 
Signature 
3 
Kurzfassung 
Web Browser zählen zu den am häufigsten verwendeten Programmen auf Computern und 
Smartphones. Sie stellen daher ein attraktives Angriffsziel für staatliche Akteure und 
finanziell motivierte Hacker dar.  
Obwohl marktführende Browser eine Vielzahl an modernen Schutzmaßnahmen 
implementieren, kann regelmäßig demonstriert werden, dass Schwachstellen dennoch 
ausgenutzt und Systeme von Opfern, ohne deren Wissen, übernommen werden können. 
Hersteller wie Google versuchen daher, neben dem Härten ihres Browsers, Schwachstellen 
proaktiv vor Angreifern aufzudecken. Eine häufig eingesetzte Technik zum automatisierten 
Auffinden von Schwachstellen ist Fuzzing. Bei dieser Technik wird der Browser mit zufällig 
generierten Webseiten gestartet, bis eine dieser zum Absturz führt. Diese kann in weiterer 
Folge analysiert werden, um den zugrundeliegenden Fehler im Code des Browsers zu 
identifizieren und zu beheben. 
Beim Browser Fuzzing werden insbesondere Eingabedateien durch das zufällige Ableiten 
von Grammatikregeln aus Definitionsdateien erzeugt. Eine andere Strategie ist das zufällige 
Mutieren von Eingaben, welche durch Metriken wie der Code-Abdeckung immer tiefer in die 
Code-Basis vordringt und weitere Sonderfälle aufdeckt. 
Beiden Strategien liegt zugrunde, dass das Resultat von zufälligen Operationen wie das 
Auswählen der Grammatikregel oder der Mutationsstrategie abhängt. Das Auffinden von 
Schwachstellen ist daher besonders ressourcenintensiven, da der potenzielle Suchraum 
enorm groß ist. Die Verbesserung der Effizienz dieses Prozesses ist daher von 
entscheidender Bedeutung, um die Sicherheit der Systeme von Endanwendern 
gewährleisten zu können 
Die Zielsetzung dieser Arbeit ist zu identifizieren, ob Schwachstellen, welche in den letzten 
Jahren veröffentlicht wurden und zu welchen ein öffentlicher Exploit existiert, 
Gemeinsamkeiten oder ähnliche Strukturen aufweisen. Hierzu wurde das Internet nach 
solchen Schwachstellen durchsucht, diese anschließend kategorisiert sowie tiefgehend 
analysiert. Die gewonnen Informationen wurden in einem Fuzzer implementiert, um den 
Suchraum einzuschränken und somit ressourcenschonend und effizienter bisher 
unbekannte Variationen der analysierten Schwachstellen aufzudecken. 
Zur Evaluierung wurde die JavaScript Implementierung von Google Chrome für eine Woche 
auf einem Heimrechner getestet. In diesem Zeitraum konnte eine kritische Sicherheitslücke 
identifiziert werden, welcher allerdings bereits von einem anderen Forscher an Google 
gemeldet wurde. Weiters konnte im Zuge der Schwachstellenanalyse eine neue 
Sicherheitslücke in Foxit Reader identifiziert und erfolgreich ausgenutzt werden. 
Schlagwörter: Browser Schwachstellen, Fuzzing, Variationsanalyse, JavaScript 
4 
Abstract 
Web browsers are among the most used programs on computers and smartphones. They 
thus represent an attractive target for state-sponsored actors and financially motivated 
hackers.  
Although market-leading browsers use a variety of modern memory corruption protections, 
it is regularly demonstrated that vulnerabilities can be exploited to compromise systems 
without the victim’s knowledge. 
Companies such as Google attempt, besides to hardening their browsers, to proactively 
uncover vulnerabilities before attackers identify them. A frequently used technique for 
automated vulnerability detection is fuzzing. Using this technique, the browser repeatedly 
loads randomly generated web pages until one of them leads to a crash. This website can 
then be analyzed to identify and fix the underlying flaw. 
When fuzzing browsers, two common approaches exist. In the first approach, input files are 
generated by randomly deriving grammar rules from definition files. Another strategy is the 
random mutation of input files from a corpus. By using metrics such as code coverage, the 
fuzzer can advance deeper and deeper into the codebase to trigger edge cases. 
The results of both strategies depend on random operations such as the selection of the 
grammar rule or the mutation strategy. Detecting vulnerabilities using fuzzing is therefore 
resource-intensive since the potential search space is enormous. Improving the efficiency of 
this process is hence crucial to ensure the security of end-users. 
The goal of this work is to identify whether vulnerabilities, which have been reported in recent 
years and for which a public exploit exists, share similarities or follow the same structure. 
For this purpose, the internet was searched for such vulnerabilities, which were then 
categorized and analyzed in depth. The information obtained was implemented in a fuzzer 
to reduce the search space and thus to uncover previously unknown variations of the 
vulnerabilities analyzed in a resource-saving and more efficient way. 
For evaluation purposes, the JavaScript implementation of Google Chrome was tested for 
one week on a home computer. In this period, a critical vulnerability was identified, which 
has already been reported to Google by another researcher.  Furthermore, during the 
analysis of the vulnerabilities, a new vulnerability in Foxit Reader was identified and 
successfully exploited. 
Keywords: Browser Vulnerabilities, Fuzzing, Variation Analysis, JavaScript 
5 
Table of contents 
1 
Introduction ..........................................................................................................7 
1.1 
Google Chrome .................................................................................................11 
1.2 
Mozilla Firefox ...................................................................................................12 
2 
Thesis goal ........................................................................................................13 
3 
Previous work ....................................................................................................14 
4 
Analysis of vulnerability patterns ........................................................................21 
4.1 
Classic vulnerabilities in the render engine ........................................................22 
4.1.1 
OOB memory access .........................................................................................22 
4.1.2 
Integer overflows ...............................................................................................24 
4.1.3 
Use-after-free bugs ............................................................................................25 
4.2 
Classic vulnerabilities in the JavaScript engine ..................................................31 
4.2.1 
Missing write-barrier for garbage collection ........................................................31 
4.2.2 
Integer overflows ...............................................................................................35 
4.2.3 
Implementation bugs .........................................................................................38 
4.2.4 
Type-Confusion bugs .........................................................................................40 
4.3 
Redefinition vulnerabilities .................................................................................46 
4.3.1 
Redefined function modifies expected behavior .................................................46 
4.3.2 
Redefined function modifies array length ...........................................................49 
4.3.3 
Redefined function modifies array buffer ............................................................54 
4.4 
Privileged JavaScript execution .........................................................................57 
4.4.1 
Stack walking vulnerabilities ..............................................................................57 
4.4.2 
JavaScript code injection into privileged code ....................................................58 
4.5 
JIT optimization vulnerabilities ...........................................................................62 
4.5.1 
Missing or incorrect type checks ........................................................................63 
4.5.2 
Missing or incorrect bound checks .....................................................................77 
4.5.3 
Wrong annotations or incorrect assumptions .....................................................81 
4.5.4 
Missing minus zero type or NaN information ......................................................93 
4.5.5 
Escape analysis bugs ........................................................................................98 
4.5.6 
Implementation bugs ....................................................................................... 103 
4.6 
Not covered vulnerabilities ............................................................................... 105 
6 
5 
Applying variation analysis ............................................................................... 107 
5.1 
Adaption of a state-of-the-art fuzzer ................................................................. 107 
5.2 
Corpus generation ........................................................................................... 111 
5.2.1 
Corpus of JavaScript code snippets ................................................................. 111 
5.2.2 
Corpus of JavaScript code templates............................................................... 119 
5.2.3 
Initial test case analysis and type reflection ..................................................... 123 
5.3 
Fuzzing ............................................................................................................ 124 
5.4 
Results ............................................................................................................ 125 
5.4.1 
Example of an identified high-severity security vulnerability ............................. 126 
6 
Discussion ....................................................................................................... 128 
7 
Conclusion and future work ............................................................................. 130 
Bibliography .................................................................................................................... 132 
List of figures................................................................................................................... 136 
List of abbreviations ........................................................................................................ 136 
. 
7 
1 Introduction 
Although new protections have evolved in recent years, the security of web browsers is still 
heavily affected by memory corruption vulnerabilities. Exploitation of these vulnerabilities is 
a common initial exploitation vector used by APT groups during real-world attacks. Google 
Project Zero collects [1] discovered zero-day vulnerabilities that were exploited in-the-wild. 
Memory corruptions were identified as the root cause of 68 percent of all listed vulnerabilities 
[1]. This statistic is supported by researchers from the Microsoft Security Response Center. 
They identified that on average 70 percent of vulnerabilities addressed through a security 
update are memory safety issues [2]. Likewise, the Chromium team also identified in an 
analysis 1 of 912 security bugs that around 70 percent of serious security bugs are memory 
safety problems.  
Research teams regularly demonstrate in exploitation competitions like Pwn2Own, 
HackFest, PwnFest, Hack2Win, Pwnium, Driven2Pwn or the Tian Fu Cup that all major 
browsers can be exploited. This indicates that many vulnerabilities are still hidden in the 
huge code base of modern browsers which can be exploited by state-sponsored attackers 
or criminals. It also demonstrates the lack of current in-place memory corruption protections 
and that they are unsatisfactory to prevent exploitation of some vulnerabilities. Further 
research is required to better understand these bug classes to protect against them. 
According to public price lists exploit brokers such as Zerodium 2 pay up to $500,000 for 
Google Chrome exploits with sandbox escapes and up to $2,500,000 for Android exploit 
chains at the time of writing. Another vulnerability broker lists payouts of $300,000 – 
$400,000 for Google Chrome exploits without sandbox escapes with 95% reliability and 
approximately three seconds of execution time [3]. Incredity, an exploit broker located in 
Germany, pays up to €500,000 for Google Chrome or Apple Safari exploits 3. 
Threat actors use such exploits not only against terrorists but also to target human rights 
activists, journalists and political rivals. The company DarkMatter, located in Abu Dhabi, used 
iPhone exploits to target activists, political leaders and suspected terrorists as part of project 
Raven 4. FinFisher, a company that develops and sells spy software, faces a charge for 
selling its software to Turkey, where it was used against its largest opposition party CHP 5. 
The mobile phone of Jeff Bezos, founder and CEO of Amazon, was hacked in 2018 via a 
WhatsApp message 6. The attackers exfiltrated private nude pictures and used them to 
blackmail Bezos.  
1 https://www.chromium.org/Home/chromium-security/memory-safety 
2 https://zerodium.com/program.html 
3 https://twitter.com/IncredityTech/status/1255513421304541184 
4 https://www.reuters.com/investigates/special-report/usa-spying-raven 
5 https://www.sueddeutsche.de/digital/finfisher-tuerkei-ermittlung-chp-spyware-handy-software-1.4587473 
6 https://www.theguardian.com/technology/2020/jan/21/amazon-boss-jeff-bezoss-phone-hacked-by-saudi-
crown-prince 
8 
Jamal Khashoggi, a Saudi Arabian journalist, was killed in 2018. He sent private messages 
to Omar Abdulaziz whose phone was infected by the Pegasus malware, which the Israel 
based company NSO Group develops. The malware was used to spy on these 
conversations. "The company's technology takes advantage of what is known as 'zero days' 
- hidden vulnerabilities in operating systems and apps that grant elite hackers access to the 
inner workings of the phone.” 7 
Hacking team is another company that developed spyware. The company was hacked in 
2015 by an individual named Phineas Phisher, resulting in a leakage of all their developed 
Windows and Flash zeros days to the public. The leaked documents revealed that sales to 
Sudan and Russia violated sanctions by the United Nations8. 
The FBI used at least two times Tor browser exploits to deanonymize visitors of child 
pornography websites on the darknet. CVE-2013-1690 was analyzed by security experts 
and became shortly afterwards available to the public 9. Three years later a similar incident 
happened. The exploit for CVE-2016-9079 was developed 10 by Exodus Intelligence and was 
used by the FBI to target child pornography distributors. The exploit was leaked to the public 
again. 
A person with the online pseudonym Brian Kil threatened and terrorized underage girls on 
online platforms such as Facebook for several years. Brian Kil used the Tails operating 
system with the Tor browser to hide his identity. The FBI was involved in the case and 
attempted to hack the person, however, the attack failed because the exploit was not tailored 
for Tails. After the failed attempt Facebook commissioned in 2017 a third-party company to 
develop a 0-day exploit which could be used to deanonymize the identity of the person. The 
exploit targeted Tail's video player and was not directly handed to the FBI. It is the first and 
only time Facebook has ever helped law enforcement to hack a target.11 
The Equation Group, that is tied to the NSA’s tailored access operations unit, was hacked in 
2016 by a group named The Shadow Brokers. The group published several zero-days 
developed by the NSA in 2017. Although a patch was already available upon release of the 
exploit, criminals could still use it to compromise over 200,000 machines in just two weeks 
12. 
These attacks were possible although the attacked applications and browsers implemented 
modern mitigation techniques. The security of Google Chrome, Microsoft Edge and Microsoft 
7 https://edition.cnn.com/2019/01/12/middleeast/khashoggi-phone-malware-intl/index.html 
8 https://www.bankinfosecurity.com/hacking-team-zero-day-attack-hits-flash-a-8384 
9 https://blog.rapid7.com/2013/08/07/heres-that-fbi-firefox-exploit-for-you-cve-2013-1690/ 
10 https://www.forbes.com/sites/thomasbrewster/2016/12/02/exodus-intel-the-company-that-exposed-tor-for-
cops-child-porn-bust 
11 https://www.vice.com/en_us/article/v7gd9b/facebook-helped-fbi-hack-child-predator-buster-hernandez 
12 https://www.cyberscoop.com/leaked-nsa-tools-now-infecting-over-200000-machines-will-be-weaponized-for-
years/ 
9 
Internet Explorer was evaluated by two independent whitepapers in 2017. The results [4] [5] 
point out that Google Chrome and Microsoft Edge implement most of today’s available 
memory corruption protections. 
“It is clearly visible that newer browsers like Google Chrome and Microsoft Edge are 
designed to be secure and hardened against exploits. Restrictive enforcement of secure 
behaviour, strong sandboxing, mitigations such as hardened compiler flags and runtime 
restrictions make exploiting browsers a much harder task than before.” [4] 
The difficulty of developing a browser exploit nowadays is also supported by a cite from 
SophosLabs: “Due to the numerous security mitigations applied to today’s operating systems 
and programs, developing a functional exploit for a memory corruption vulnerability in a web 
browser is no easy feat.“ 13 