title:On the Robustness of RSA-OAEP Encryption and RSA-PSS Signatures
Against (Malicious) Randomness Failures
author:Jacob C. N. Schuldt and
Kazumasa Shinagawa
On the Robustness of RSA-OAEP Encryption and
RSA-PSS Signatures Against (Malicious)
Randomness Failures
Jacob C. N. Schuldt
AIST, Japan
PI:EMAIL
Kazumasa Shinagawa
AIST and University of Tsukuba, Japan
PI:EMAIL
ABSTRACT
It has recently become apparent that both accidental and
maliciously caused randomness failures pose a real and seri-
ous threat to the security of cryptographic primitives, and
in response, researchers have begone the development of
primitives that provide robustness against these.
In this
paper, however, we focus on standardized, widely available
primitives. Speciﬁcally, we analyze the RSA-OAEP encryp-
tion scheme and RSA-PSS signature schemes, speciﬁed in
PKCS#1, using the related randomness security notion in-
troduced by Paterson et al. (PKC 2014) and its extension
to signature schemes. We show that, under the RSA and Φ-
hiding assumptions, RSA-OAEP encryption is related ran-
domness secure for a large class of related randomness func-
tions in the random oracle model, as long as the recipient
is honest, and remains secure even when additionally con-
sidering malicious recipients, as long as the related random-
ness functions does not allow the malicious recipients to eﬃ-
ciently compute the randomness used for the honest recipi-
ent. We furthermore show that, under the RSA assumption,
the RSA-PSS signature scheme is secure for any class of re-
lated randomness functions, although with a non-tight secu-
rity reduction. However, under additional, albeit somewhat
restrictive assumptions on the related randomness functions
and the adversary, a tight reduction can be recovered. Our
results provides some reassurance regarding the use of RSA-
OAEP and RSA-PSS in environments where randomness
failures might be a concern. Lastly, we note that, unlike
RSA-OAEP and RSA-PSS, several other schemes, including
RSA-KEM, part of ISO 18033-2, and DHIES, part of IEEE
P1363a, are not secure under simple repeated randomness
attacks.
1.
INTRODUCTION
Modern cryptographic primitives are designed to meet
strong notions of security, such as IND-CCA security in the
case of encryption or UF-CMA security in the case of sig-
natures, and the design of most concrete schemes are sup-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053040
ported by a proof of security that reduce the security of
the concrete scheme to appropriate computational assump-
tions. However, the security analysis often assumes that ac-
cess to a source providing perfect uniformly distributed ran-
domness is provided. Unfortunately, this assumption might
not hold in practice. Random number generators (RNGs),
used to generate randomness in practical systems, are no-
toriously hard to implement and test, which is evident by
the history of RNG failures [19, 20, 24, 25, 32]. The perhaps
best known example of this, is the Debian Linux vulnera-
bility that causes only 15 bits of entropy to be used in the
RNG [18]. However, implementation errors are not the only
source of randomness failures. In particular, a determined
adversary might attempt to subvert the used RNG, as sug-
gested by the Dual EC controversy [14]. Furthermore, the
deployment of virtual machine servers (e.g. using Amazon
Web Services, Microsoft Azure, or Google Cloud), creates
another randomness attack vector; as observed in [36], an
attacker capable of provoking a virtual machine reset can
cause the virtual machine to use repeated and correlated
randomness values, as the entire state of the virtual ma-
chine, including the state of the RNG, will be restored to a
previous state.
The consequences of randomness failures can be fatal to
security; the examples of real-world security incidents due
to poor randomness are many (e.g. [11, 12, 26, 31, 36]). Note
that the widely used DSA signature scheme (and the elliptic
curve variant ECDSA) standardized by NIST in FIPS 186-
4 [33], are particularly vulnerable to randomness failures as
the signing key can be recovered from two signatures us-
ing the same randomness. This property has lead to the
compromise of the Playstation 3 [11], the recovery of TLS
signing keys from virtualized servers [36], and allowed the
theft of Bitcoins [13]. This clearly illustrates the need for
primitives robust against randomness failures.
As the security risks caused by randomness failures are
becoming more evident, cryptographers have begun deﬁn-
ing various security notions capturing diﬀerent kinds of ran-
domness failures, and design schemes that provide security
against these to the extend that this is possible.
In the
symmetric key encryption setting, Kamara and Katz [30]
considered chosen randomness attacks in which the adver-
sary can freely choose the randomness, except for in the
challenge queries. In the public key encryption setting, Bel-
lare et al. [6] introduced hedged encryption, which ensures
that security is maintained as long as the message and ran-
domness combined has suﬃcient entropy, and that a level
of security corresponding to deterministic encryption [4] is
241achieved when neither randomness nor messages have en-
tropy. Bellare and Tackmann [10] introduced the notion of
nonce-based public key encryption which protects against
randomness failures, but also requires a stateful scheme.
Yilek introduced reset attacks in which repeated random-
ness values might occur for ordinary public key encryption.
Lastly, Paterson et al. [34] introduced related randomness
attacks, which allow the adversary a large degree of control
over the randomness used for encryption, and which cap-
tures reset attacks as a special case.
While this line of research provides new schemes that
are robust against various kinds of randomness failures, the
more immediate question of how robust existing schemes are
against randomness failures has not addressed in the previ-
ous results. Speciﬁcally, given the typical time frame for the
development, evaluation, standardization, and deployment
of new cryptographic primitives, the following question is
highly relevant for assessing the security of existing systems
and making design choices for systems currently in develop-
ment:
To what extent are existing standardized and widely
supported primitives secure against randomness failures?
1.1 Our Contribution
In this paper, we focus on the above question in the case
of signatures and encryption. For our analysis, we adopt
(a variation of) the related randomness model of Paterson
et al. [34] and its extension to signature schemes i.e. we
consider security notions which allow the adversary to ma-
nipulate the used randomness via related randomness func-
tions φ. Speciﬁcally, in the case of signatures, the adversary
will be able to obtain signatures created using randomness
φ(r) where φ is a maliciously chosen function belonging to
a function class Φ, and r is a ﬁxed randomness value cho-
sen uniformly by the security experiment1. In the case of
encryption, the adversary will be able to obtain encryptions
for maliciously chosen public keys and messages using ran-
domness ψ(r), and is challenged to distinguish between the
encryptions of two maliciously chosen messages under a chal-
lenge public key using randomness φ(r), where ψ and φ are
maliciously chosen functions belonging to function classes Ψ
and Φ. Note that in contrast to the original model from [34]
in which Φ = Ψ, we consider separate function families Ψ
and Φ, which allows the related randomness used in the
encryption for malicious recipients for which the adversary
might known the private key, to be distinguished from the
related randomness used for the honest challenge user (note
that the adversary can use his challenge encryptions as an
encryption oracle for the honest challenge user by choosing
identical challenge messages). This in turn allows a more
detailed statement regarding the related randomness secu-
rity of the analyzed schemes. See Section 4 for the details
of our security model.
Firstly, we focus our attention on the widely used RSA-
OAEP encryption scheme [8] included as part of PKCS#1
v2.2 [37] and furthermore adopted in IEEE P1363 [27]. Specif-
ically, we show that, under the RSA and Φ-hiding assump-
tions, RSA-OAEP encryption is related randomness secure
for any function families Φ and Ψ satisfying that Φ is col-
1While our security notions consider a single value r, as
shown in [34], this is equivalent to considering an experiment
with multiple r values.
lision resistant, and that Φ is hard-to-compute with respect
to Ψ. The latter requirement means that, for a randomly
chosen input, given the output of functions in Ψ, the output
of functions in Φ remains hard to compute for the same in-
put. This implies that RSA-OAEP is secure for a large and
general class of related randomness functions which, for ex-
ample, captures the special case of repeated randomness at-
tacks, when the recipient is honest. Furthermore, even if en-
cryption for malicious recipients is additionally considered,
RSA-OAEP remains secure as long the randomness used for
the honest recipient cannot be eﬃciently computed from the
randomness used for the malicious recipients. However, we
note that since RSA-OAEP encryption is randomness recov-
ering, security is not guaranteed under randomness relations
that allow malicious recipients to infer the randomness used
for a honest user. This holds for any randomness recovering
scheme (see discussion in Section 4).
Secondly, we focus on the RSA-PSS signature scheme [9],
which is also part of PKCS#1 v2.2 [37]. Speciﬁcally, we
show that the RSA-PSS signature scheme is related ran-
domness secure for any related randomness function family
Φ. While this shows robustness against any type of random-
ness failure, the obtained security reduction is not tight like
the original security reduction for RSA-PSS, which was one
of the motivating factors behind the design of the scheme.
We do show, however, that if related randomness functions
are not repeated in signature queries, and Φ is continuously
hard-to-compute, a tight security reduction can be obtained.
The latter requirement means that given the output of a
subset of functions in Φ on a randomly chosen input, the
output of the remaining functions in Φ is hard to compute.
We emphasize that these assumptions can be seen as some-
what restrictive, and that, for example, repeated use of the
same random value is not captured by these. However, the
restrictions can potentially capture a RNG which is in a
state where no new entropy is added, but is evolved for each
signature generation.
1.2 Technical Challenges
The RSA-OAEP encryption scheme makes use of a padding
scheme reminiscent of a Feistel network. Speciﬁcally, using
hash functions G and H, a message m is encrypted by ﬁrstly
picking randomness r, and essentially setting s ← m ⊕ G(r)
and t ← r ⊕ H(s). Finally, a ciphertext is obtained by
computing (s||t)e mod N where e and N are the RSA en-
cryption exponent and modulus, respectively. The stan-
dard proof of IND-CCA security of RSA-OAEP [21] cru-
cially depend on r being fresh and unpredictable for the
challenge encryption. However, this is not the case in the
related randomness setting. For example, consider the case
in which the same randomness r is used for the encryp-
tion of two diﬀerent messages m and m(cid:48). Here, the values
s = m ⊕ G(r) and s(cid:48) = m(cid:48) ⊕ G(r) are correlated. In par-
ticular, s ⊕ s(cid:48) = m ⊕ m(cid:48), which is known to the adversary.
Hence, s||t and the corresponding s(cid:48)||t(cid:48) are not independent,
and the approach from original security proof, which relies
on replacing (s||t)e mod N with a random element of Z∗
N ,
breaks down. However, by relying on the Φ-hiding assump-
tion and the algebraic properties implied by this2, we show
2In particular, we make use of the result by Smith and
Zhang [40] that essentially shows that, under the Φ-hiding
assumption, an arithmetic progression in ZN and an uni-
formly chosen value in ZN are indistinguishable when ap-
242that a security reduction to the RSA problem can still be
obtained in this case (even when relations arising from any
collision resistant function family Φ are considered).
The RSA-PSS signature scheme makes use of a diﬀer-
ent type of padding scheme. More precisely, using hash
functions G1, G2, and H, a signature on a message m is
obtained by ﬁrstly picking randomness r and computing
w ← H(m||r) and y ← 0||w||(r ⊕ G1(w))||G2(w). Finally,
the signature is obtained by computing σ ← yd mod N ,
where d and N are the RSA decryption exponent and mod-
ulus, respectively. The security proof of RSA-PSS [9], which
is tight, relies on the property that a random r will not col-
lide with values queried by the adversary or used in previ-
ously generated signatures. This assumption obviously does
not hold in the related randomness setting. Note also that
since signatures reveal the used randomness, if φ(cid:48)(r) is com-
putable from φ(r), the adversary will be able to compute the
randomness which will be used in a future signature query.
Additionally, for signature schemes, we might even consider
constant functions φ(·) = c which will make signatures de-
terministic.
In this case, the results by Coron [16] imply
that a tight security reduction cannot be obtained. How-
ever, adopting the ideas used by Coron [15] to prove security
of the full domain hash signature scheme, we show a reduc-
tion from the related randomness security of RSA-PSS to
the RSA problem for any function family Φ, with a security
loss proportional to the number of signing queries. Addition-
ally, we show that when the adversary cannot compute φ(cid:48)(r)
from φ(r) (i.e. the function family Φ is continuously hard-to-
compute and the adversary does not repeatably query the
same function φ), a tight reduction can be recovered.
1.3 On the Related Randomness Security of
Other Schemes
We will brieﬂy make some simple observation regarding
the related randomness security of other encryption and sig-
nature schemes. For this purpose, we consider a very weak
type of a related randomness attack, repeated randomness,
in which the attacker obtains two encryptions (for a chal-
lenge public key) or two signatures using the same random-
ness.
In the case of encryption, the problems that might arise
from repeated randomness are well-known from the litera-
ture on randomness re-use for the purpose of optimization
(e.g. see [3, 5, 35]). For example, it is straightforward to
see that the use of repeated randomness will render the El-
Gamal [23] and Cramer-Shoup [17] encryption schemes inse-
cure, as the structure of the ciphertexts for these schemes al-
lows an attacker to compute the ratio of the encrypted mes-
sages when sent to the same recipient3. While DHIES [1],
standardized in IEEE 1363a [28], is based on ElGamal, a
similar attack is not possible due to the hybrid structure of
DHIES, in which a key for a symmetric encryption scheme
is derived and used to encrypt the message. However, the
use of repeated randomness will cause the symmetric en-
cryption component to use the same key and initialization
vector (IV), and it is well known that common implementa-
tions of symmetric encryption, such as a block cipher used
plying the RSA function to these.
3Let c and c(cid:48) be ElGamal encryptions of messages m and m(cid:48)
under public key y and randomness r. We then have that
c = (c1, c2) = (gr, yr · m) and c(cid:48) = (c(cid:48)
2) = (gr, yr · m(cid:48)),
1, c(cid:48)
and can hence compute m/m(cid:48) = c2/c(cid:48)
2.
in counter (CTR) or cipher-block-chaining (CBC) mode, be-
comes insecure in this case. A similar observation holds for
encryption based on RSA-KEM [39], standardized in ISO
18033-2 [29], which will also make use of a symmetric en-
cryption component for the encryption of the message.
In the case of signatures, as already mentioned above,
the DSA signature scheme and the elliptic curve variant
ECDSA, standardized by NIST in FIPS 186-4 [33], becomes
insecure if randomness values are repeated, as this allows the
signing key to be recovered from the resulting signatures.
This is likewise true for the Schnorr signatures scheme [38].
In contrast, the full domain hash signature scheme FDH [7],
also speciﬁed as part of PKCS#1 v2.2, is deterministic and
therefore remain secure for any related randomness attack.
Our results show that, unlike the above mentioned schemes
(with the exception of FDH), RSA-OAEP encryption and
RSA-PSS signatures provide some protection against ran-
domness failures, and are hence preferable in environments
where randomness failures might be a concern.
2. PRELIMINARIES
2.1 Notation
Throughout the paper, we will use the following notation.
We let N denote the set of natural numbers. λ ∈ N denotes
the security parameter, which will sometimes be written in
its unary representation, 1λ, and ∅ denotes the empty set.
We let x||y denote the concatenation of (the binary repre-
sentation of) x and y. x ← y denotes the assignment of y
to x. ZN denotes the residue ring Z/NZ and Z∗