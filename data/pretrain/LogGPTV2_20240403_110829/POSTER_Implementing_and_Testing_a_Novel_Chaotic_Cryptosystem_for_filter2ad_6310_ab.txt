3 
3 
2 
1 
Figure 1. An example of ‚Äôwrapping‚Äô diagonal lines so that 
each diagonal has n values. Each number corresponds with a 
given wrapped diagonal row. 
3.4  Performing Diagonal and Anti-Diagonal 
Shuffling 
There is now one two-dimensional n x n array that holds the data, 
and three one-dimensional arrays which hold the adjusted iterated 
values. A copy is then created of the one-dimensional array which 
holds the x-values. This copy is sorted, giving a total of two arrays 
with the same values, but in a different order. It is now possible to 
map the pixels in a given diagonal line to the array of unsorted x-
values.  For  example,  the  first  pixel  is  mapped  to  x1,  the  second 
pixel  to  x2,  and  so  on.  The  pixels  are  then  permuted  along  the 
diagonal  line  so  that  it  matches  the  sorted  array  of  values.  This 
operation  is  performed  for  each  diagonal  and  anti-diagonal  line, 
however anti-diagonal lines are permuted based on the difference 
between the array of y-values and sorted y-values. 
Unsorted Array: {x1, x2, x3, x4} 
Sorted Array: {x2, x4, x3, x1} 
1 
(x1) 
3 
(x3) 
2 
(x2) 
4 
(x4) 
2 
(x2) 
4 
(x4) 
3 
(x3) 
1 
(x1) 
Before Permutation 
Figure 2. An example of performing permutations along an a 
After Permutation 
diagonal line 
3.5  Block-Based Diffusion 
Block-based diffusion must now be performed, with the goal that 
a small change in the original image will result in a large change 
of  the  cipher  image.  This  process  starts  by  separating  the  n  x  n 
array  that  holds  the  permuted  pixels  into  two  smaller  arrays,  of 
size n/2 x n, designated A1 and A2. A simple way to do this is to 
take  the  top  half  of  the  array  and  place  it  in  A1,  and  take  the 
bottom half of the array and place it in A2. Next, choose !!!  values 
ùê¥!ùëöùëúùëëùëõ +
ùê¥!ùëöùëúùëë !! +
the modulo(b) operation to a. Each element in D is multiplied by t. 
Finally,  each  element  in  A1  is  added  it  to  the  corresponding 
element in D, and the operation modulo (256) is applied. Thus, the 
from the initial value arrays. It is important to note at this step that 
for any n > 6, we will need to select more values than there are 
unique values, and repetition will occur. Using these values, it is 
possible  to  create  an  array  of  size  N/2  x  N,  designated  D.  Each 
element in A2 is summed together and used to calculate the value 
of a number t, given by the equation: 
ùê¥!ùëöùëúùëë !!! +1  (4) 
    ùë°=
where  ùê¥ is the sum of each element in A, and ùëé  ùëöùëúùëë(ùëè) applies 
diffused version of A1 is created, designated ùê¥!. 
corresponding element in ùê¥!, and the modulo (256) operation is 
applied. A2 is now diffused, and is designated ùê¥!. By applying the 
final two steps that calculate ùê¥! and ùê¥! multiple times, the cipher 
times.  The  resulting  cipher  image  is  the  combination  of ùê¥!  and 
ùê¥!. 
To diffuse the bottom half, A2, each element in A2 is added to the 
image is diffused. In this work, the cipher image is diffused five 
16393.6  Expansion to Block Cipher 
The original algorithm (developed by Huang, Ye, and Wong [5]) 
that this work is based on was created with the goal of encrypting 
images. However, it is possible to place virtually any data into a 
suitable matrix.  Thus, this idea has been extended to create a new 
block cipher. In Section 3.5, it was required to choose !!!  values 
from the initial array values. In the implementation presented in 
this paper, a random number generator was used to select values, 
with  the  current  time  acting  as  the  seed.  Because  of  this,  the 
starting time must be transmitted with the cipher text. 
4.  SMALL SPACECRAFT USE 
The  application  of  this  algorithm  to  use  onboard  a  small 
spacecraft  is  straightforward.  However,  testing  is  required  to 
demonstrate  its  efficacy  for  this  use.  Testing  must,  thus,  be 
conducted to demonstrate that the algorithm can perform suitably 
in an environment with limited resources.  
It  is  unclear,  from  the  literature,  as  to  how  well  AES  would 
perform in the context of a small spacecraft‚Äôs resource constraints.  
In  addition,  the  NSA  has  suggested  that  the  SPECK  family  of 
algorithms can be used as a comprehensive lightweight encryption 
scheme.  Hence,  testing  will  be  conducted  to  characterize  the 
performance  of  AES  and  SPECK  and  compare  the  algorithm 
proposed herein to it.  Specifically, this testing will focus on the 
algorithm‚Äôs  computational  intensity  and  total  throughput.  All  of 
these  algorithms  meet  the  requirement  of    not  significantly 
increasing  the  total  size  of  the  cipher  text  (as  compared  to  the 
plain text). 
For the purposes of assessing the performance of these algorithms 
on  a  small  spacecraft,  a  test  plan  (based  on  the  computational 
hardware  specifications  of  the  OpenOrbiter  spacecraft  [8])  has 
been developed.  OpenOrbiter utilizes two types of computational 
hardware:  a  Raspberry  Pi  computer  serves  as  the  primary  flight 
computer (which is responsible for managing moment-to-moment 
operations)  and  GumStix  WaterStorm  computer-on-module 
(COM) units are used to create a payload processing center.  The 
performance of the cryptographic system will be characterized on 
both types of hardware. This facilitates decision making regarding 
whether cryptographic processing can be performed on the flight 
computer or if the payload processing center must be utilized for 
this purpose, in the context of the OpenOrbiter mission‚Äôs testing 
and  demonstration  of  this  algorithm  in  low-Earth  orbit.  The 
testing  of  multiple  algorithms  on  these  two  common  processing 
systems may facilitate the decision-making of others. 
5.  CONCLUSION 
There  is  a  large  gap  in  cryptographic  algorithms  where  small 
satellites are concerned. Very little research has been done in this 
field, and what little has been done has been focused on hardware-
based solutions. We have implemented a chaotic cryptosystem as 
a proof-of-concept, and also compared it to several existing well-
known  systems.  In  addition,  we  have  demonstrated  that  it  is 
possible  to  extend  this  algorithm  to  encrypt  more  than  just 
pictures. As discussed in section 3.6, it is theoretically possible to 
extend  this  algorithm  to  encrypt  any  data,  by  placing  it  into  a 
matrix format.  
In future work we plan to assess whether additional security can 
be provided by first hiding data in a picture using steganography, 
then  applying  this  encryption  scheme  to  the  picture. 
 A 
comparison of this hybrid technique to other existing data security 
systems is planned. 
6.  ACKNOWLEDGMENTS 
the  U.S.  National  Science 
This  research  was  funded  by 
Foundation (NSF Award # 1359224) with support from the U.S. 
Department of Defense. 
7.  REFERENCES 
[1] Beaulieu, R., Shors, D., Smith, J., Treatman-Clark, S., Weeks, 
B. and Wingers, L. The SIMON and SPECK Families of 
Lightweight Block Ciphers. IACR Cryptology ePrint 
Archive (2013), 404. 
[2] Challa, O., Bhat, G. and Mcnair, J. CubeSec and GndSec: A 
Lightweight Security Solution for CubeSat Communications. 
In Proceedings of the AIAA/USU Conference on Small 
Satellites (2012). 
[3] Chen, G., Mao, Y. and Chui, C. K. A symmetric image 
encryption scheme based on 3D chaotic cat maps. Chaos, 
Solitons & Fractals, 21, 3 (2004), 749-761. 
[4] European Space Agency. Call for Proposals: Fly Your 
Satellite! 2013, August 13 (13 February 2013 2013). 
[5] Huang, X., Ye, G. and Wong, K. Chaotic image encryption 
algorithm based on circulant operation. In Abstract and 
Applied Analysis. Hindawi Publishing Corporation, 2013. 
[6] Prasithsangaree, P. and Krishnamurthy, P. Analysis of energy 
consumption of RC4 and AES algorithms in wireless LANs. 
IEEE Global Telecommunications Conference, 2003. 
GLOBECOM'03. IEEE, 2003, 1445-1449. 
[7] Skrobot, G. and Coelho, R. ELaNa‚ÄìEducational Launch of 
Nanosatellite: Providing Routine RideShare Opportunities. In 
Proc. SmallSat Conference. (Logan, UT). 2012. 
[8] Straub, J., Korvald, C., Nervold, A., Mohammad, A., Root, N., 
Long, N. and Torgerson, D. OpenOrbiter: A Low-Cost, 
Educational Prototype CubeSat Mission Architecture. 
Machines, 1, 1 (2013), 1-32. 
[9] Swartwout, M. Secondary Spacecraft in 2015: Analyzing 
Success and Failure. In Proceedings of the 2015 IEEE 
Aerospace Conference. (Big Sky, MT, USA). , 2015. 
[10] Szczechowiak, P., Oliveira, L. B., Scott, M., Collier, M. and 
Dahab, R. NanoECC: Testing the limits of elliptic curve 
cryptography in sensor networks. In Wireless sensor 
networks. Springer, 2008, 305-320. 
[11] Trad, A., Bahattab, A. A. and Ben Othman, S. Performance 
trade-offs of encryption algorithms for Wireless Sensor 
Networks. In 2014 World Congress on Computer 
Applications and Information Systems (WCCAIS). IEEE, 
2014, 1-6. 
[12] United States Government. 47 CFR 97.113 (a)(4) - 
Prohibited Transmissions. 
1640