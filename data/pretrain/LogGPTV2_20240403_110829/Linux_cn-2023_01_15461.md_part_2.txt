```
计数器 2：00010110
计数器 3：存储第二个值 B 的内存地址
```
假设你把值 `1`（`A`）装入累加器，然后把值 `3`（`B`）加到它上面。现在累加器的值是 `4`。现在你需要用这两条指令把数值 `4` 复制到另一个内存地址（`C`）：
```
计数器 4：00010101
计数器 5：一个内存地址（C），我们可以在那里保存新的值
```
把这两个值加在一起后，现在可以用这条指令结束程序：
```
计数器 6: 00000000
```
计数器 6 之后的任何指令都可以供程序作为存储内存使用。这意味着你可以用计数器 7 的内存来储存值 `A`，计数器 8 的内存来储存值 `B` ，计数器 9 的内存来储存值 `C`。你需要将这些分别输入到 Toy CPU 中：
```
计数器 7：00000001（1）
计数器 8：00000011（3）
计数器 9：00000000（0，以后会被覆盖）
```
在弄清了所有指令和 `A`、`B` 和 `C` 的内存位置后，现在可以将完整的程序输入到 Toy CPU 中。这个程序将数值 1 和 3 相加，得到 4：
```
计数器 0：00010100
计数器 1：00000111（7）
计数器 2：00010110
计数器 3：00001000（8）
计数器 4：00010101
计数器 5：00001001（9）
计数器 6：00000000
计数器 7：00000001（1）
计数器 8：00000011（3）
计数器 9：00000000（0，以后会被覆盖）
```
要运行程序，在 “输入” 模式下按下 `R` 键。Toy CPU 将在状态灯中显示 “RUN”（“运行” 模式），并从计数器 0 开始执行你的程序。
Toy CPU 有一个明显的延迟，所以你可以看到它执行程序中的每一步。随着程序的进行，你应该看到计数器从 `00000000`（0）移动到 `00000110`（6）。在计数器 1 之后，程序从内存位置 7 加载数值 `1`，累积器更新为 `00000001`（1）。在计数器 3 之后，程序将加数值 `3`，并更新累加器显示 `00000100`（4）。累加器将保持这种状态，直到程序在计数器 5 之后将数值存入内存位置 9，然后在计数器 6 结束。
![在运行模式下的 Toy CPU](/data/attachment/album/202301/20/190031xappbq1444vv3av2.png)
### 探索机器语言编程
你可以使用 Toy CPU 来创建其他程序，并进一步探索机器语言编程。通过用机器语言编写这些程序来测试你的创造力。
### 一个在累积器上闪灯的程序
你能点亮累加器上的右四位，然后是左四位，然后是所有的位吗？你可以用两种方法之一来写这个程序。
一种直接的方法是，从不同的内存地址加载三个数值，像这样：
```
计数器 0：LOAD
计数器 1：“右边”
计数器 2：LOAD
计数器 3：“左边”
计数器 4：LOAD
计数器 5：“所有”
计数器 6：STOP
计数器 7：00001111（“右边”）
计数器 8：11110000（“左边”）
计数器 9：11111111（“全部”）
```
写这个程序的另一种方法是尝试使用 `NOT` 和 `OR` 二进制操作。这样可以得到一个更小的程序：
```
计数器 0：LOAD
计数器 1：“右边”
计数器 2：NOT
计数器 3：OR
计数器 4：“右边”
计数器 5：STOP
计数器 6：00001111（“右边”）
```
### 从一个数字开始倒数
你可以把 Toy CPU 作为一个倒数计时器。这个程序行使 `IFZERO` 测试，只有当累加器为零时，程序才会跳转到一个新的计数器：
```
计数器 0：LOAD
计数器 1：“初始值”
计数器 2：IFZERO（这也是倒计时的“开始”）
计数器 3：“结束”
计数器 4：SUB
计数器 5：“1”
计数器 6：GOTO
计数器 7：“开始”
计数器 8：STOP
计数器 9：00000111（“初始值”）
计数器 10：00000001（“1”）
```
Toy CPU 是学习机器语言的一个好方法。我在入门课程中使用了 Toy CPU，学生们说他们发现写第一个程序很困难，但写下一个程序就容易多了。学生们还表示，用这种方式编写程序其实很有趣，他们学到了很多关于计算机实际工作的知识。Toy CPU 既具有教育性，也很有趣味性！
---
via: 
作者：[Jim Hall](https://opensource.com/users/jim-hall) 选题：[lkxed](https://github.com/lkxed) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出