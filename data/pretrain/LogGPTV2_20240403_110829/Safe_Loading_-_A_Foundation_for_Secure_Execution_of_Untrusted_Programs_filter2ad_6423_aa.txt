title:Safe Loading - A Foundation for Secure Execution of Untrusted Programs
author:Mathias Payer and
Tobias Hartmann and
Thomas R. Gross
2012 IEEE Symposium on Security and Privacy
Safe Loading - A Foundation for Secure Execution of Untrusted Programs
Mathias Payer
ETH Zurich, Switzerland
Tobias Hartmann
ETH Zurich, Switzerland
Thomas R. Gross
ETH Zurich, Switzerland
Abstract—The standard loader (ld.so) is a common target
of attacks. The loader is a trusted component of the application,
and faults in the loader are problematic; e.g., they may lead
to local privilege escalation for SUID binaries.
Software-based fault isolation (SFI) provides a framework
to execute arbitrary code while protecting the host system. A
problem of current approaches to SFI is that fault isolation is
decoupled from the dynamic loader, which is treated as a black
box. The sandbox has no information about the (expected)
execution behavior of the application and the connections
between different shared objects. As a consequence, SFI is
limited in its ability to identify devious application behavior.
This paper presents a new approach to run untrusted
code in a user-space sandbox. The approach replaces the
standard loader with a security-aware trusted loader. The
secure loader and the sandbox together cooperate to allow
controlled execution of untrusted programs. A secure loader
makes security a ﬁrst class concept and ensures that the SFI
system does not allow any unchecked code to be executed.
The user-space sandbox builds on the secure loader and sub-
sequently dynamically checks for malicious code and ensures
that all control ﬂow instructions of the application adhere to
an execution model.
The combination of the secure loader and the user-space
sandbox enables the safe execution of untrusted code in user-
space. Code injection attacks are stopped before any unin-
tended code is executed. Furthermore, additional information
provided by the loader can be used to support additional
security properties, e.g., inlining of Procedure Linkage Table
calls reduces the number of indirect control ﬂow transfers and
therefore limits jump-oriented attacks.
This approach implements a secure platform for privileged
applications and applications reachable over the network that
anticipates and conﬁnes security threats from the beginning.
I. INTRODUCTION
Secure execution of applications in user-space remains
a hard problem. Software-based fault isolation (SFI) has
been embraced by many projects [29], [43], [42], [22], [37]
to address this problem. SFI aims to provide an execution
environment that allows the safe and undisturbed execution
of applications. An advantage of SFI is that other techniques
to protect the execution of applications (e.g., Address Space
Layout Randomization (ASLR) [35], [8], [9], Data Execu-
tion Prevention (DEP) [46], stack canaries [27], and policy-
based system call authorization) are orthogonal to SFI and
can be combined with SFI. The protection techniques can be
used to strengthen the implementation of the SFI platform
(that forms a crucial element of the trusted computing base)
as well as the application code.
 © 2012, Mathias Payer. Under license to IEEE.
DOI 10.1109/SP.2012.11
18
This approach to a user-space sandbox implements a
holistic view of the program execution. Inter-module control
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
A key component of every system is the dynamic loader.
The loader takes control of the application before the
application is even started. The dynamic loader maps the
application into memory and resolves all symbols that are
used from different shared libraries. These relocations and
symbol lookups enable a program to use libraries and to
implement different
techniques like position independent
code. After the program has been prepared for execution
(i.e., after the loader has ﬁnished the initial relocation and
loading), the initialization code of the application is executed
and the application starts.
The loader has access to all symbols and relocated objects
at runtime and shares this information with the executing
program. The standard Linux dynamic loader is optimized
for fast relocation and aims to offer a rich functionality. The
combination of the rich functionality (and complexity) and
the fact that all applications (e.g., privileged applications,
applications reachable over the network, local applications)
use the same loader makes it a promising attack vector.
Recent attacks [17], [34], [33], [40] illustrate the problem.
Our approach replaces the standard dynamic loader by a tool
that makes security a ﬁrst class concept.
This paper introduces a Trusted Runtime Environment
(TRuE) for the safe execution of untrusted code. TRuE is
the combination of a secure loader and a sandbox. These
two components of the trusted computing base are small
and provide a a safe (the implementation is reviewed and
bug-free) and secure (the design does not provide attack
vectors in the offered functionality) environment. This com-
bination enables a safe foundation for software-based fault
isolation where all application code is executed under the
control of the sandbox. The sandbox separates user-space
into two privilege domains, the privileged sandbox domain
that contains the secure loader and the sandbox, and the
application domain that executes application code.
The standard loader focuses on feature support and low
loading times, whereas the secure loader focuses on a
rigorous security concept. The secure loader implements the
safe foundation for the SFI framework, provides information
for the sandbox that executes application code, and supports
basic loader functionality. The secure loader collects infor-
mation about all symbol locations and relocated pointers.
This information is then used in the sandbox to secure the
execution of the untrusted code.
ﬂow transfers are no longer implemented as jump tables but
the loader forwards the information about the target location
into the sandbox. The sandbox directly encodes the correct
target location at the source control transfer instruction. This
dynamic setup removes the additional indirections needed
to cross module boundaries while still enabling dynamic
loading of shared objects. The presentation in this paper
focuses on a Unix-like context, but the ideas apply to other
contexts as well.
We position TRuE as a replacement of the standard
execution model for applications that run with a higher
privilege level than the user that accesses the application.
Two examples of such applications are (i) privileged “SUID”
applications and (ii) applications that are connected to the
network. A third possible use-case for TRuE is the execution
of potentially malicious code in combination with speciﬁc
system call policies. The interactions between the malicious
binary (e.g., the program, a library, or a module) and the
regular system libraries is controlled and checked using
dynamic security guards.
The contributions of this paper are as follows:
1) the design of TRuE, a Trusted Runtime Environment
for the creation of secured processes. TRuE builds on
two principles, (i) a security-aware secure loader, and
(ii) a sandbox that enforces the security policy of the
execution model.
2) a report on a prototype implementation of TRuE.
The prototype implementation demonstrates that the
integration of the secure loader into an existing user-
space sandbox is practical.
The rest of the paper is organized as follows. Section II
deﬁnes the attack model and the execution model. Sec-
tion III presents background information about the dynamic
loading and sandboxing. Section IV describes problems of
the standard approach. Section V deﬁnes the design and
concepts of safe loading and secure execution in a trusted
runtime environment. Section VI highlights the implemen-
tation of TRuE. Section VII presents the evaluation of the
prototype implementation and discusses possible limitations.
Section VIII presents related work and Section IX concludes.
II. ATTACK MODEL AND EXECUTION MODEL
The Trusted Runtime Environment (TRuE) places the
loader in the trusted computing base and runs all applica-
tion code in a sandbox. The loader informs the sandbox
about valid code regions of the application. The sandbox
weaves additional checks (security guards) into translated
application code. The sandbox does not
implement full
memory tracing to limit the overhead of SFI. The translated
application code can read any readable memory location
and can write any writable memory location without any
additional penalties.
The attack model deﬁnes the constraints for an attack,
the properties of a successful attack, and limitations of the
19
trusted runtime environment. The execution model explains
which applications can be protected and describes changes
to the original memory layout of the application. The ﬂow
of execution in an application can be seen as a graph
where control ﬂow transfers are the edges and the nodes are
individual basic blocks. The execution model describes how
a sandbox transforms this graph at runtime to protect the
execution ﬂow and to ensure that no alternate “unwanted”
locations are reached.
A. Attack model
A potential attacker tries to escalate the available priv-
ileges by executing injected or constructed code. A local
attacker escalates the available privileges to a higher privi-
leged account, e.g., by triggering an exploit in a “SUID”
application to gain super-user access. A remote attacker
without shell access, e.g., using a web service, gains user-
level access by escalating the available privileges to a local
user account, e.g., www-data.
The security guards of the sandbox protect the application
from all code injection attacks. Code can be injected (as
data) through, e.g., a buffer overﬂow, but
the sandbox
never executes the injected code. The sandbox either detects
an illegal region that contains code when a “control ﬂow
instruction”1 attempts to transfer control to a data region
or the kernel generates a protection fault if the application
tries to write a code region. A shadow stack [23], [38] in
the sandbox domain ensures that return-oriented program-
ming [44] attacks are not possible. The different privilege
level of the sandbox domain naturally protects the shadow
stack. The sandbox dynamically removes indirect control
ﬂow transfers whenever possible to reduce the opportunities
for jump-oriented programming [10]. The sandbox uses per-
application system call policies to protect from remain-
ing attack vectors. Data-based attacks and jump-oriented
programming are stopped whenever an illegal system call
is executed. Attacks against
the sandbox are limited by
protecting internal data. All data structures of the sandbox
domain (including the secure loader) are write-protected
during the execution of translated code.
The sandbox kills the application if an attack is detected.
Denial of service attacks (e.g., an attacker can repeatedly
kill an application by trying to exploit a vulnerability) are
outside of the scope of the attack model. Several mitigation
techniques exist to restart failed services but they are not the
topic of this paper.
B. Execution model
A binary-only application is executed under the control
of the dynamic sandbox. The binary itself is untrusted but
not malicious (i.e., the binary can contain implementation
1Any instruction that changes the control ﬂow of the program, e.g.,
jump instructions, indirect jump instructions, call instructions, indirect call
instructions, or return instructions.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
bugs but the binary is not controlled by the attacker). No
static modiﬁcations or static analysis are needed to execute
an application in the sandbox. The sandbox implements an
additional protection domain in user-space, splitting the user-
space into an application domain and a sandbox domain.
TRuE creates a secure process in three steps: (i) TRuE
initializes the secure loader and the sandbox during startup,
(ii) the secure loader then loads the application in the
sandbox and resolves all dependencies to external libraries,
and (iii) the sandbox starts the main application thread in
the application domain. The secure loader is a part of the
sandbox domain. Accesses of the application into the loader
are intercepted and redirected to the protected domain.
The sandbox dynamically translates all application code
before it is executed. Original code regions in the applica-
tion are mapped as read-only. The targets of static control
ﬂow instructions (direct jumps, direct calls, and conditional
jumps) are veriﬁed during the translation. Dynamic control
ﬂow instructions incur a runtime check that veriﬁes for each
execution that the target is valid.
Self-modifying code in the application is not supported2,
i.e., the application is not allowed to generate new code at
runtime. Code can only be added to the runtime image of
an application through the secure loader API.
III. BACKGROUND INFORMATION
The startup process of an application is as follows: the
loader opens the application, analyzes the dependences,
loads and initializes the required libraries, and passes control
to the application.
TRuE changes this approach. The secure loader ﬁrst
initializes the secure sandbox. The secure loader then opens
and analyzes the application and all needed libraries. All
application and library code is executed under the control
of the sandbox, no unchecked code is executed directly.
A sandbox controls the executed application code. The
sandbox combines software-based fault isolation (SFI) con-
cepts and policy-based system call authorization to ensure
that neither the application nor any exploits can escape the
sandbox.
A. Dynamic loading
Linux uses the Executable and Linkable Format [41],
[19] (ELF) to describe the on-disk layout of Dynamically
Shared Objects (DSO) and executables. The ELF format
deﬁnes two views for applications and libraries. The ﬁrst
view contains essential information for the loader about the
different segments (areas with same page permissions) in the
object. The second view contains the section header table
with more ﬁne-grained information like symbol tables.
2A sandbox that supports self-modifying code must move the modiﬁca-
tion engine (i.e., the JIT compiler) into the trusted sandbox domain to ensure
that the generated code conforms to the execution model. This approach
increases complexity but guarantees that only the trusted modiﬁcation
engine can generate dynamic code for the application.
20
Libraries contain one or two symbol tables: .dynsym, a
dynamic symbol table that contains information (size, type,
permissions, and others) about all exported symbols; and
.symtab an optional table that contains information about
all symbols in the library. The optional table is available by
default and removed if the object is stripped.
the compiled code must
Libraries are mapped to dynamic (non-constant) addresses
in memory,
therefore be posi-
tion independent. Position independent code relies on the
Global Offset Table (GOT), which contains information
about imported and exported symbols for each DSO. This
information is used to access symbols in other DSOs with
non-constant addresses. The Procedure Linkage Table (PLT)
is used to transfer control to symbols in other DSOs, entries
in the PLT correspond to an indirect jump through a GOT
slot, see Figure 1 for an example.

























Figure 1. Example of PLT-based position independent code. The function
in the code section transfers control to the PLT slot (1), the code in the
PLT slot executes a lookup in the GOT section (2), and transfers control
to the other shared object (3).
Function references in the GOT are initialized with a
pointer to the dynamic loader. The ﬁrst execution resolves
the actual symbol and stores the resolved pointer in the GOT
slot. Later calls to the same function result in a direct transfer
to the resolved symbol. This feature allows lazy binding.
B. Sandboxing applications
Sandboxing or SFI is a technique that enforces a security
policy on executed code. The security policy includes guards
and restrictions on memory accesses, restrictions on control
ﬂow transfers, and restrictions on instructions and combi-
nations of instructions that can be executed. Many dynamic
SFI tools use binary translation to check the executed code.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
SFI translates and encapsulates all executed instructions of
the application.
Dynamic binary translation, the technique used to imple-
ment SFI, translates all executed code on-the-ﬂy. Translated
code is placed in a code cache to lower translation costs.
The user-space dynamic binary translator (BT) takes control
and implements a second privilege domain in user-space.
Translated application code is executed with lower privileges
than the BT. The BT ensures (during the translation) that
the translated application code has no access to the data
structures and to the code of the binary translator.
Figure 2 shows the design of a dynamic BT as presented
in [37]. Each basic block is translated before execution
and placed in the code cache. A mapping table maps basic
blocks from the original program to translated basic blocks.
Outgoing edges in translated basic blocks point to other
translated basic blocks or back to the translator if the
basic block is not translated. Untranslated basic blocks are
translated on demand. Most instructions are copied verbatim
for regular binary translation, all instructions that change
control ﬂow need special treatment.
jump instructions, conditional
The translator emits extra code that handles direct control
ﬂow transfers (e.g.,
jump
instructions, call instructions, interrupts, and system calls).
Jump instructions and conditional
jump instructions are
redirected to the translated basic blocks in the code cache,
interrupts and system calls are replaced with a code sequence
that traps into the privileged domain of the BT. Indirect
control ﬂow transfers (e.g., indirect jumps, indirect calls,
or function returns) are replaced with code sequences that
execute a lookup in the mapping table and an indirect control
ﬂow transfer to the translated basic block. The special
treatment of indirect control ﬂow transfers is needed to keep
up the illusion that the application is running in its native
environment. No pointers and return addresses are changed
by the BT, therefore the BT must trap the indirect control
ﬂow transfers to keep control of the program.







