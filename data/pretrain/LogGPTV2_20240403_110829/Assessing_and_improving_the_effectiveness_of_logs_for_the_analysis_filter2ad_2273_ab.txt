hung or an expected 
failures 
• Content: 
wrong values delivered 
conditions 
that are not halt or silent 
to the user). 
the system keeps correctly 
running. 
• No failure: 
(e.g., 
is designed 
with the output of a fault-free 
messages) 
Test  Manager 
failures 
with full accuracy; 
by means of preliminary 
experiments. 
the Test Manager after the experiment 
experiment. 
to detect and to categorize 
tested 
therefore, 
and faulty 
Log files and memory dumps are collected 
The 
the 
it was carefully 
of fault-free 
by 
completion. 
execution 
2 - Assessment 
of the logging 
mechanism. 
In this phase 
i.e., failures 
logs during 
respectively. 
logged and unlogged failures, 
we identify 
that left and did not leave a trace in collected 
the campaign, 
compare (Figure 
Test Manager (i.e., 
events in log files (i.e., 
number of logged failures 
represents 
To this aim, for each test we 
1), (i) the test outcome as provided 
of 
the log view). The ratio between the 
the oracle view), and (ii) the presence 
the relative 
and the total number of failures 
mechanism. 
mechanism. 
coverage of the logging 
of the logging 
failures 
and the injected 
3 - Improvement 
By 
we 
by the 
unlogged 
matching 
get back into the source code to identify 
the logging  mechanism 
can be improved. 
improvement  efforts, 
frequency 
of occurrence 
is performed 
(Section 
5.4). 
faults, 
the point where 
To better  focus 
a ranking of failure  locations 
by 
of residual 
in partic­
668 faults 
Operators 
systems (i.e., 
operational 
The technique 
adopted in this paper is derived 
representative 
fixed 
are based on a large field 
over 12 systems, 
from a 
past work in the field of Software Fault Injection, 
ular G-SWFIT, presented 
in [6]. G-SWFIT defines a set of 
fault operators that are actually 
faults found in real-world 
after their release). 
data study encompassing 
for more than 50% of fault types occurring 
they account 
the field. In the G-SWFIT technique, 
are injected 
means of changes in the binary code corresponding 
gramming mistakes 
this approach 
source code is not available, 
tween high-level 
faults 
on the average 
sponding 
C macros in the target source code. Moreover, 
requires 
interest, 
In [6], 
there are 9% more binary changes not corre­
be­
and binary changes. 
and 
in 
by 
to pro­
additional 
because 
for off-the-shelf 
in the high-level 
software faults, 
to high-level 
due to the usage of 
software when the 
is suitable 
software 
source code. Although 
G-SWFIT 
faults 
efforts 
to the system of 
heterogeneity. 
of hardware/OS/compiler 
to be adapted 
there can be discrepancies 
i.e., the ground 
4 Fault injection 
framework 
Outcomes provided 
by the Test Manager, 
which acts  as 
In our study, we inject software 
faults according 
to 
the oracle view, which will be 
defined in [6]. However, 
our injection 
framework 
in the next step. The Test Manager 
from G-SWFIT, since faults are introduced 
by 
a timestamp 
are started 
when the  system 
under 
and terminated, 
in order 
detector, 
represent 
to log contents 
a failure 
compared 
is designed 
to collect 
test and the workload 
to characterize 
runs performed 
outcome when the  system 
the Test Manager detects 
the output of a fault injection 
the expected 
before the campaign, 
response 
time in fault-free 
and to detect a silent 
a content 
is not responsive. 
Moreover, 
outcome by comparing 
exchanged 
(e.g., 
experiment 
operators 
differs 
means of modifications 
avoids the inaccuracies 
level. Moreover, 
among all platforms 
without any additional 
approach 
be compiled 
increases 
in the source code. This approach 
of injection 
performed 
at the binary 
injection 
in the source code is portable 
program, 
that our 
time (a source file has to 
by the original 
We recognize 
supported 
efforts. 
experiment 
after the injection 
of the fault); 
however, 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
459 
DSN 2010: Cinque et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:05 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
tool I in 
a support 
We developed 
is increased. 
software fault injection. 
accuracy 
order to automate 
file is fed to the tool, which produces 
code files, each containing 
a different 
faulty source code file is subsequently 
summarizes 
for each source file, with reference 
a set of faulty source 
software fault. 
compiled. 
Each 
Figure 2 
by the fault injection 
tool 
to C/C++ programs. 
the steps followed 
A source code 
C/C++ 
Source files 
Abstract 
Syntax Tree 
Patch files 
(faults) 
int mainO { 
if(a &&-b) 
c++; 
Table 1: Fault operators 
([6]). 
using a value 
with an expression 
using a value 
Acronym Explanation 
OMFC  Missing function 
call 
OMVI V  Missing variable 
initialization 
assignment 
OMVAV Missing variable 
OMVAE Missing variable 
assignment 
OMIA  Missing IF construct 
OMIFS Missing IF construct 
OMIEB Missing IF construct 
OMLAC Missing AND clause in expression 
OMLOC Missing OR clause in expression 
OMLPA Missing small and localized 
OW VAV Wrong value assigned 
OWPFV Wrong variable 
OWAEP Wrong arithmetic 
to variable 
used in parameter 
around statements 
plus statements 
plus statements 
expression 
plus E LSE before statem. 
used as branch condition 
used as branch condition 
part of the algorithm 
of function 
call 
in parameter 
of a function 
call 
Figure 2: Steps followed 
by the fault injection 
tool. 
First, 
a C preprocessor 
translates 
inclusion 
the C macros contained 
of header files, macros 
in the source code (e.g., 
for conditional 
a complete 
part of the compiler 
a program, 
an Abstract 
to be processed 
Injector 
searches 
and applies 
OMIFS operator 
at least 5 statements. 
operators 
compilation, 
constants), 
in order to produce 
compilation 
unit. A C/C++ front-end, 
that builds the internal 
representation 
i.e., the 
of 
processes 
Syntax Tree (AST), a more suitable 
the compilation 
unit, and it produces 
structure 
The Fault 
by the Fault Injector 
for all possible 
program. 
if specific 
fault locations 
criteria 
in the AST, 
are met, e.g., the 
is applied 
only if the IF construct 
in Table 1. 
are summarized 
Operators 
contains 
Test 
Manager 
in this paper, and httperf' tool version 
generate 
makes use of the main features 
(e.g., 
HTTP requests 
multiple 
for the Web Server. 
methods and file extensions, 
cookies). 
0.9.0 is used to 
offered by the Web Server 
The workload 
Client 
3. CO"eCtionD 
09 
machine 
Logs Dump 
Server machine 
Figure 3: Apache testbed. 
5 Experimental 
results 
3 for three case 
We use the approach 
in section 
described 
a specific 
experiments, 
We developed 
Test Manager program, 
studies. 
in charge of supervising 
Testbeds 
equipped 
Hyper-Threading, 
face, and (ii) a client, 
GHz CPU, 768 MB RAM, 100 Mb/s Network Interface. 
are made up of two machines: 
with (i) an Intel Pentium 4 3.2 GHz CPU with 
4 GB RAM, 1000 Mb/s Network Inter­
with an Intel Pentium 4 2.4 
for each case study. 
(i) a server, 
equipped 
5.1 Apache Web Server 
The Apache Web Server is a popular 
project, 
for more than 50% of installations 
open-source 
in the 
which accounts 
world2. The wide adoption 
complexity 
are increasing 
and security 
of our 
this software is a relevant 
case study in the context 
work. Figure 3 shows the Apache configuration 
in 
this work. Apache Web Server3 version 
issues caused by software faults. 
the importance 
of Apache and its growing 
2.2.11 is evaluated 
adopted 
Therefore, 
of dependability 
at http://www.mobilab.unina.it/S
FI.htm 
I Available 
2http://www.
3http://httpd
netcraft.com/survey/ 
.apache.org/ 
the number of 
The two 
grouped by 
in a failure 
faults resulting 
Column 3 (Table 2) depicts 
We perform 4,124 injection 
experiments. 
leftmost columns of Table 2 report experiments 
fault operator. 
injected 
outcomes, 
the presence 
Table 2). We find that only 39.6% of failures 
effective 
logging mechanisms 
a significant 
coverage 
we further investigate 
Apache logfiles 
(two rightmost 
in logs. Therefore, 
do not provide 
number of software 
notification 
of log entries 
break-down 
by failure 
Apache's 
faults. 
type. 
lead to an 
columns of 
any information 
Figure 4 provides 
for 
outcome. For failure 
to identify 
built-in 
Halt failures 
are mainly due to bad pointer 
manipula­
tions. In most cases (53.8%) no log events are produced. 
Logged halts (46.2%) are  due 
more Web Server child processes, 
process 
information 
of one or 
to the termination 
the parent 
Nevertheless, 
locations 
to notify their failure. 
thus enabling 
about failure 
is provided 
or failure 
no significant 
4http://www.hpl.hp.
com/research/linux/httperf/ 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
460 
DSN 2010: Cinque et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:05 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
87 
36 
results 
199 
101 
68 
74 
50 
24 
397 
27 
Table 2: Experimental 
(Apache). 
Fault Locations Failures logged unlogged 
OMFC 
OMIEB 
OMLAC 
OMLPA 
OMVAV 
OWAEP 
OW VAV 
OMIA 
OMIFS 
OMLOC 
OMVAE 
OMVI V  
OWPFV 
Total 
(0/0) 
110  36 
37 
12 
1,361  613  216 
I3 
15 
16 
184  88 
125  49 
8 
4,124  2,023 802  1,221 
39.6  60.4 
73 
118 
91 
419 
389 
70 
631 
48 
556 
31 
96 
76 
24 
284 
19 
96 
6 
185  89 
40 
38 
47 
501  217 
32 
23 
25 
-
100""" .,.--,---,---.----,--- ,---,r-
603 
99 
80% 
60% 
40% 
20% 
516 
151 
o un logged 
o logged 
519 
135 
halt  silent content 
5.2 TAO Open Data Distribution 
Service 
TAO OpenDDS5 is an open-source 
C++ implementation 
Service 
(DDS) spec­
to design flexible 
processing 
[7]. Its 
DDS, as part of the Event Driven Architectures 
means of message-driven 
as new technology 
of the OMG's v 1.0 Data Distribution 
ification. 
(EDAs), is emerging 
applications by 
recent use in mission-critical 
Control 
an in-depth 
domain (Coflight6 project), 
of DDS logging 
of a DDS-based 
evaluation 
The architecture 
process, 
topic, 
scenarios, 
e.g., the Air Traffic 
us to perform 
prompted 
capabilities. 
application 
consists 
to the DDS 
process, 
to a topic and waits for related 
which sends messages 
and a subscriber 
of a publisher 
bound to a specific 
subscribes 
OpenDDS, in particular, 
namely libTAO_DdsDcps. 
ternal code, and (ii) a DDS repository process,  which 
provides 
DDS-based 
messages. 
of (i) a shared library, 
so, which contains 
capabilities. 
in this case study. 
application 
Figure 5 shows the 
considered 
consists 
control 
process 
which 
DDS in­
Machine 2 
file 
Figure 5: DDS testbed. 
Figure 4: Experiments 
breakup by failure 
class (Apache). 
causes in the logs. Collected 
entries 
memory dumps from the operating 
always available 
which are not 
in the field during the operational 
phase. 
just suggest 
system, 
to inspect 
Un logged silent failures 
(39.6%) are mainly due to 
algorithmic 
failures 
(60.4%) 
involve 
errors leading 
to infinite 
loops. Logged silent 
(e.g., 
IPCs). 
sockets, 
OS resources 
of content failures 
is unlogged 
A large percentage 
amount of code devoted to configuration 
is due to the presence 
occur during the 
This percentage 
(encompassing 
Most of them (55.7%) actually 
phase, when the Web Server halts and no 
(79.4%). 
system start-up 
logs are provided. 
of a significant 
management 
10.4% of faults). 
the analysis 
error-prone, 
not necessarily 
be triggered 
[12], (iii) logs in such a situation 
to fix configuration 
administrator 
failures 
mainly correspond 
protocol 
accesses 
10.3% of source code and 
We do not exclude these faults from 
to be complex and 
management 
are 
and they could 
file in the field 
since (i) this code appears 
(ii) faults in configuration 
before release, 
handling 
(e.g., 
by a specific configuration 
issues. 
to errors 
header corruption) 
wrong resource 
discovered 
with the HTTP 
(20.6%) 
(e.g., 
path). 
Faults are injected 
in the source code of the DDS 
We execute 2,964 fault injection 
the number of experiments 
experiments. 
grouped by 
in the two leftmost columns. 
during the campaign 
We experience 
are provided 
(details 
in 
column of Table 3). This value overestimates 
both DDS processes 
is 59.4% 
library. 
Table 3 reports 
fault operator 
1,705 failures 
Table 3). Coverage 
(rightmost 
DDS logging capabilities 
DDS-based 
applications, 
subscriber 
our focus is on the analysis 
including 
since, in case of large-scale 
logs for the publisher 
and the 
sides may not be both available. 
Consequently, 
We experience 
that 37.9% of failures 
of individual 
DDS processes. 
lead to an effective 
notification 
side. Most failures 
reports 
in logs (column 4, Table 3) at the publisher 
do not leave traces in logs. Figure 6a 
the experiments 
broken down by failure 
class. 
can help the  system 
Logged content 