::: orderedlist
**验证步骤**
1.  验证 `/etc/nsswitch.conf`{.literal} 中是否存在 SSSD
    `的sss`{.literal} 条目：
    ``` literallayout
    passwd:     sss files
    group:      sss files
    netgroup:   sss files
    automount:  sss files
    services:   sss files
    ...
    ```
2.  在 `pam_sss.so`{.literal} 条目中查看
    `/etc/pam.d/system-auth`{.literal} 文件的内容：
    ``` literallayout
    # Generated by authselect on Tue Sep 11 22:59:06 2018
    # Do not modify this file manually.
    auth        required        pam_env.so
    auth        required        pam_faildelay.so delay=2000000
    auth        [default=1 ignore=ignore success=ok]    pam_succeed_if.so uid >= 1000 quiet
    auth        [default=1 ignore=ignore success=ok]    pam_localuser.so
    auth        sufficient      pam_unix.so nullok try_first_pass
    auth        requisite       pam_succeed_if.so uid >= 1000 quiet_success
    auth        sufficient      pam_sss.so forward_pass
    auth        required        pam_deny.so
    account     required        pam_unix.so
    account     sufficient      pam_localuser.so
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   [authselect
    的作用](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#what-is-authselect-used-for_configuring-user-authentication-using-authselect){.link}
-   [修改可用的 authselect
    配置集](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#modifying-a-ready-made-authselect-profile_configuring-user-authentication-using-authselect){.link}
-   [创建并部署您自己的 authselect
    配置集](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#creating-and-deploying-your-own-authselect-profile_configuring-user-authentication-using-authselect){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#modifying-a-ready-made-authselect-profile_configuring-user-authentication-using-authselect}修改可用的 authselect 配置集 {.title}
:::
作为系统管理员，您可以修改一个默认配置集使其适合您的需要。
您可以修改 `/etc/authselect/user-nsswitch.conf`{.literal}
文件中的任何项目，但：
::: itemizedlist
-   `passwd`{.literal}
-   `group`{.literal}
-   `netgroup`{.literal}
-   `automount`{.literal}
-   `services`{.literal}
:::
随后运行 `authselect select`{.literal} `profile_name`{.literal}
会导致将允许的更改从 `/etc/authselect/user-nsswitch.conf`{.literal}
传输到 `/etc/nsswitch.conf`{.literal}
文件。不可接受的更改会被默认配置集配置覆盖。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
不要直接修改 `/etc/nsswitch.conf`{.literal} 文件。
:::
::: orderedlist
**流程**
1.  选择一个 `authselect`{.literal} 配置集，例如：
    ``` literallayout
    # authselect select sssd
    ```
2.  按照您所需的更改编辑 `/etc/authselect/user-nsswitch.conf`{.literal}
    文件。
3.  应用 `/etc/authselect/user-nsswitch.conf`{.literal} 文件中的更改：
    ``` literallayout
    # authselect apply-changes
    ```
:::
::: itemizedlist
**验证步骤**
-   查看 `/etc/nsswitch.conf`{.literal} 文件，以验证
    `/etc/authselect/user-nsswitch.conf`{.literal}
    中的更改是否已在此传播。
:::
::: itemizedlist
**其它资源**
-   [authselect
    的作用](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#what-is-authselect-used-for_configuring-user-authentication-using-authselect){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#creating-and-deploying-your-own-authselect-profile_configuring-user-authentication-using-authselect}创建并部署您自己的 authselect 配置集 {.title}
:::
作为系统管理员，您可以通过生成一个默认配置集的自定义副本来创建和部署自定义配置集。
这在
[修改现成验证配置文件不足以满足](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#modifying-a-ready-made-authselect-profile_configuring-user-authentication-using-authselect){.link}
您的需要时特别有用。当您部署自定义配置集时，配置集将应用于记录到给定主机上的每个用户。
::: orderedlist
**流程**
1.  使用 `authselect create-profile`{.literal}
    命令创建自定义配置集。例如，要基于可用的 `sssd`{.literal}
    配置集创建一个名 `为 user-profile`{.literal}
    的自定义配置集，但您可以自行配置 `/etc/nsswitch.conf`{.literal}
    文件中的项目：
    ``` literallayout
    # authselect create-profile user-profile -b sssd --symlink-meta --symlink-pam
    New profile was created at /etc/authselect/custom/user-profile
    ```
    在命令 `中包含 --symlink-pam`{.literal} 选项意味着 PAM
    模板将是原始配置集文件的符号链接，而不是其副本；包括
    `--symlink-meta`{.literal} 选项意味着元文件（如 README 和
    REQUIREMENTS）将是原始配置文件文件的符号链接，而不是其副本。这样可确保以后对原始配置集中的
    PAM 模板和 meta 文件的所有更新都会反映在您的自定义配置集中。
    命令在
    `/etc/ authselect/custom/user-profile/ 目录中创建 /etc/`{.literal}
    nsswitch.conf``{=html} 文件的副本。
2.  配置 `/etc/authselect/custom/user-profile/nsswitch.conf`{.literal}
    文件。
3.  运行 `authselect select 命令并选择`{.literal} 自定义配置集，再添加
    `custom/name_of_the_profile`{.literal} 作为参数。例如，要选择
    `user-profile`{.literal} 配置集：
    ``` literallayout
    # authselect select custom/user-profile
    ```
    为机器选择 `user-profile`{.literal} 配置集意味着，如果随后由红帽更新
    `sssd`{.literal} 配置集，您将受益于所有更新，但对
    `/etc/nsswitch.conf`{.literal} 文件进行的更新除外。
    ::: example
    []{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#idm140106898223088}
    **例 1.1. 创建配置集**
    ::: example-contents
    以下步骤演示了如何基于 `sssd`{.literal}
    配置集创建配置集，该配置集仅参考 `/etc/hosts`{.literal}
    文件中的主机名的本地静态表查找，而不在 `dns 或`{.literal}
    `myhostname`{.literal} 数据库中。
    ::: orderedlist
    1.  编辑以下行来编辑 `/etc/nsswitch.conf`{.literal} 文件：
        ``` screen
        hosts:      files
        ```
    2.  基于 `sssd`{.literal} 创建自定义配置集，以排除对
        `/etc/nsswitch.conf`{.literal} 的更改：
        ``` literallayout
        # authselect create-profile user-profile -b sssd --symlink-meta --symlink-pam
        ```
    3.  选择配置集：
        ``` literallayout
        # authselect select custom/user-profile
        ```
    4.  （可选）检查是否已选择自定义配置集
        ::: itemizedlist
        -   根据所选的 `sssd`{.literal} 配置集创建
            `/etc/pam.d/system-auth`{.literal} 文件
        -   原封不动保留 `/etc/nsswitch.conf`{.literal} 中的配置：
            ``` literallayout
            hosts:      files
            ```
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            运行 `authselect 选择`{.literal} `sssd`{.literal} 将会导致
            `主机：文件 dns myhostname`{.literal}
            :::
        :::
    :::
    :::
    :::
:::
::: itemizedlist
**其它资源**
-   [authselect
    的作用](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_authentication_and_authorization_in_rhel/configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel#what-is-authselect-used-for_configuring-user-authentication-using-authselect){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#converting-your-scripts-from-authconfig-to-authselect_configuring-user-authentication-using-authselect}将脚本从 `authconfig`{.literal} 转换为 `authselect`{.literal} {.title}
:::
如果您使用 `ipa-client-install`{.literal} 或 `realm 加入`{.literal}
域，您可以在脚本中安全地删除任何 `authconfig`{.literal}
调用。如果不可能，将每个 `authconfig`{.literal} 调用替换为其等同的
`authselect`{.literal}
调用。要做到这一点请选择正确的配置集和适当的选项。另外，请编辑必要的配置文件：
::: itemizedlist
-   `/etc/krb5.conf`{.literal}
-   `/etc/sssd/sssd.conf`{.literal} （用于 `sssd`{.literal} 配置文件）或
    `/etc/samba/smb.conf`{.literal} （适用于 `winbind`{.literal}
    配置文件）
:::
[authconfig 选项与 authselect
配置集](#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-relation-of-authconfig-options-to-authselect-profiles_configuring-user-authentication-using-authselect "表 1.1. authconfig 选项与 authselect 配置集的关系"){.link}
的关系和auth [config 选项等同的 Authselect 配置集选项显示了
authconfig](#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-relation-of-authconfig-options-to-authselect-profile-options_configuring-user-authentication-using-authselect "表 1.2. authselect profile 选项等同于 authconfig 选项"){.link}
选项 `的 authselect`{.literal} 等效 `项`{.literal}。
::: table
[]{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-relation-of-authconfig-options-to-authselect-profiles_configuring-user-authentication-using-authselect}
**表 1.1. authconfig 选项与 authselect 配置集的关系**
::: table-contents
  [**authconfig 选项**]{.strong}                                [**authselect 配置集**]{.strong}
  ------------------------------------------------------------- ----------------------------------
  `--enableldap`{.literal} `--enableldapauth`{.literal}         `sssd`{.literal}
  `--enablesssd`{.literal} `--enablesssdauth`{.literal}         `sssd`{.literal}
  `--enablekrb5`{.literal}                                      `sssd`{.literal}
  `--enablewinbind`{.literal} `--enablewinbindauth`{.literal}   `winbind`{.literal}
  `--enablenis`{.literal}                                       `NIS`{.literal}
:::
:::
::: table
[]{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-relation-of-authconfig-options-to-authselect-profile-options_configuring-user-authentication-using-authselect}
**表 1.2. authselect profile 选项等同于 authconfig 选项**
::: table-contents
  [**authconfig 选项**]{.strong}    [**authselect 配置集特性**]{.strong}
  --------------------------------- --------------------------------------
  `--enablesmartcard`{.literal}     `with-smartcard`{.literal}
  `--enablefingerprint`{.literal}   `with-fingerprint`{.literal}
  `--enableecryptfs`{.literal}      `with-ecryptfs`{.literal}
  `--enablemkhomedir`{.literal}     `with-mkhomedir`{.literal}
  `--enablefaillock`{.literal}      `with-faillock`{.literal}
  `--enablepamaccess`{.literal}     `with-pamaccess`{.literal}
  `--enablewinbindkrb5`{.literal}   `with-krb5`{.literal}
:::
:::
[与 authconfig 命令等效的 authselect
命令](#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-examples-of-authconfig-commands-to-authselect-commands_configuring-user-authentication-using-authselect "表 1.3. 与 authconfig 命令等同的 authselect 命令示例"){.link}
示例显示 Kickstart 调用到 `authconfig`{.literal} 调用转换为
`authselect`{.literal} 调用的示例。
::: table
[]{#configuring-user-authentication-using-authselect_configuring-authentication-and-authorization-in-rhel.html#tab-examples-of-authconfig-commands-to-authselect-commands_configuring-user-authentication-using-authselect}
**表 1.3. 与 authconfig 命令等同的 authselect 命令示例**
::: table-contents
  [**authconfig 命令**]{.strong}                                                                              [**authselect 等同的命令**]{.strong}
  ----------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------
  `authconfig --enableldap --enableldapauth --enablefaillock --updateall`{.literal}                           `authselect 选择 sssd with-faillock`{.literal}
  `authconfig --enablesssd --enablesssdauth --enablesmartcard --smartcardmodule=sssd --updateall`{.literal}   `authselect 选择 sssd with-smartcard`{.literal}
  `authconfig --enableecryptfs --enablepamaccess --updateall`{.literal}                                       `authselect 选择 sssd with-ecryptfs with-pamaccess`{.literal}
  `authconfig --enablewinbind --enablewinbindauth --winbindjoin=Administrator --updateall`{.literal}          `realm join -U Administrator --client-software=winbind`{.literal} `WINBINDDOMAIN`{.literal}
:::
:::
:::
:::
[]{#understanding-SSSD-and-its-benefits_configuring-authentication-and-authorization-in-rhel.html}
::: chapter
::: titlepage
# []{#understanding-SSSD-and-its-benefits_configuring-authentication-and-authorization-in-rhel.html#understanding-SSSD-and-its-benefits_configuring-authentication-and-authorization-in-rhel}第 2 章 了解 SSSD 及其优势 {.title}
:::
系统安全服务后台程序(SSSD)是一种用于访问远程目录和身份验证机制的系统服务。以下章节概述了
SSSD
的工作原理、使用它的益处、如何处理配置文件，以及您可以配置的身份和身份验证提供程序。
::: section
::: titlepage
# []{#understanding-SSSD-and-its-benefits_configuring-authentication-and-authorization-in-rhel.html#how-SSSD-works_understanding-SSSD-and-its-benefits}SSSD 如何工作 {.title}
:::
系统安全服务后台程序(SSSD)是一种系统服务，可让您访问远程目录和身份验证机制。您可以将本地系统（SSSD