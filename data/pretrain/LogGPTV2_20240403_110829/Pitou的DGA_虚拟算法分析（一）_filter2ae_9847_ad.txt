    FFFFF88005876716 PUSH dword (rax, addr(rax))
    FFFFF88005876718 IMUL dword 
                   ▶ MOV rdx, r9
                   ▶ IMUL DWORD r9d
    FFFFF88005876719 POP dword rdx
    FFFFF8800587671B POP dword rax
    FFFFF8800587671D NOP
    FFFFF8800587671E PUSH dword (addr(rdx), addr(rdx))
    FFFFF88005876720 DREFH dword 
    FFFFF88005876721 PUSH byte (5h, 5h)
    FFFFF88005876724 SAR dword 
    FFFFF88005876726 P2E dword rdx
                   ▶ SAR DWORD edx, 5
    FFFFF88005876727 NOP
    FFFFF88005876728 PUSH dword (addr(rdx), addr(rdx))
    FFFFF8800587672A DREFH dword 
    FFFFF8800587672B POP dword rax
                   ▶ MOV DWORD eax, edx
    FFFFF8800587672D NOP
    FFFFF8800587672E PUSH dword (addr(rax), addr(rax))
    FFFFF88005876730 DREFH dword 
    FFFFF88005876731 PUSH byte (1Fh, 1Fh)
    FFFFF88005876734 SHR dword 
    FFFFF88005876735 P2E dword rax
                   ▶ SHR DWORD eax, 31
    FFFFF88005876736 NOP
    FFFFF88005876737 PUSH dword (rdx, addr(rdx))
    FFFFF88005876739 PUSH dword (addr(rax), addr(rax))
    FFFFF8800587673B DREFH dword 
    FFFFF8800587673C ADD dword 
    FFFFF8800587673D P2E dword rdx
                   ▶ ADD DWORD edx, eax
    FFFFF8800587673E NOP
    FFFFF8800587673F PUSH dword (addr(rdx), addr(rdx))
    FFFFF88005876741 DREFH dword 
    FFFFF88005876742 PUSH byte (64h, 64h)
    FFFFF88005876745 IMUL dword 
                   ▶ MOV rax, 100
                   ▶ IMUL DWORD edx
    FFFFF88005876746 POPD
    FFFFF88005876747 PUSH dword (addr(rdx), addr(rdx))
    FFFFF88005876749 PDIAG
    FFFFF8800587674A P2E dword rdx
                   ▶ MOV DWORD edx, eax
    FFFFF8800587674B NOP
    FFFFF8800587674C PUSH dword (r9, addr(r9))
    FFFFF8800587674E PUSH dword (addr(rdx), addr(rdx))
    FFFFF88005876750 DREFH dword 
    FFFFF88005876751 CMP dword 
    FFFFF88005876752 POPD
                   ▶ CMP DWORD r9d, edx
    FFFFF88005876753 NOP
    FFFFF88005876754 STATE  1
    FFFFF88005876755 IF NOT ZF -> JMP 0xFFFFF88005867CB8
                   ▶ JNZ _addr_FFFFF88005867CB8
    FFFFF8800587675F NOP
    FFFFF88005876760 PUSH dword (51EB851Fh, 51EB851Fh)
    FFFFF88005876765 POP dword rax
                   ▶ MOV DWORD eax, 1374389535
    FFFFF88005876767 NOP
    FFFFF88005876768 PUSH dword (addr(r9), addr(r9))
    FFFFF8800587676A DREFH dword 
    FFFFF8800587676B PUSH dword (rax, addr(rax))
    FFFFF8800587676D IMUL dword 
                   ▶ MOV rdx, r9
                   ▶ IMUL DWORD r9d
从上面可以看到，二进制翻译极大地减少了指令的数量。原来的3681条反汇编被压缩成786条x64条指令，减少了约80%。在本文中作为例子使用的代码片段中也可以看到这个过程。反汇编变成的x64汇编代码：
    _addr_FFFFF880058766F6:
        AND DWORD r8d, r8d
        JNZ _addr_FFFFF8800587C8F8
        MOV DWORD eax, 1374389535
        MOV rdx, r9
        IMUL DWORD r9d
        SAR DWORD edx, 5
        MOV DWORD eax, edx
        SHR DWORD eax, 31
        ADD DWORD edx, eax
        MOV rax, 100
        IMUL DWORD edx
        MOV DWORD edx, eax
        CMP DWORD r9d, edx
        JNZ _addr_FFFFF88005867CB8
        MOV DWORD eax, 1374389535
        MOV rdx, r9
        IMUL DWORD r9d
        SAR DWORD edx, 7
        MOV DWORD eax, edx
        SHR DWORD eax, 31
        ADD DWORD edx, eax
        MOV rax, 400
        IMUL DWORD edx
        MOV DWORD edx, eax
        CMP DWORD r9d, edx
        JNZ _addr_FFFFF8800587C8F8
        JMP _addr_FFFFF88005867CB8
    _addr_FFFFF88005867CB8:
        MOV DWORD eax, 1
        JMP _addr_FFFFF88005852C11
    _addr_FFFFF8800587C8F8:
        XOR DWORD eax, eax
        JMP _addr_FFFFF88005852C11
上面这段代码的可读性更好。主要缺少的仍然是代码流在图中的表示，以及对占很大部分的优化的整数除法的更好处理。
**步骤2：汇编器**
在第一步中，创建了x64程序集。为了能够使用IDA Pro对其进行分析，首先必须将其转换为可执行文件。为此，我使用了[Netwide Assembler
(NASM)](https://nasm.us/)。只需要对上一节中的代码中的两部分头部进行修改。我将VM从本地上下文中读取的数据复制到数据（ data
）部分，文本（ text） 部分是之前的实际代码。虽然DGA是一个函数，但我直接将它用作二进制文件的入口点。
    section .data
    data_FFFFF8800589E540    dd    31,28,31,30,31,30,31,31,30,31,30,31
    data_FFFFF8800589E570    dd    31,29,31,30,31,30,31,31,30,31,30,31
    ...
    section .text
    global _start
Github上的代码已经在运行时添加了这部分：
    python3 main.py nasm -o pitou.asm
然后可以用它编译生成目标文件：
    nasm -f elf64 pitou.asm                                                          
    ld pitou.o -o pitou.bin
当然，这使得我们的代码又变成不可读的，因为它现在又是二进制格式的。在我们的例子中如下：
**步骤3： 反汇编器**
上一步中的可执行文件现在可以在IDA中打开进行反汇编。下面是我们的摘录。与第1种方法不同的是，我们有了图形视图和添加注释的可能性。
**步骤4：反编译器**
最后，Hex Rays可以将反汇编程序反编译为C代码。我们例子中代码片段如下：
方法1中很长的反汇编变成了一行C代码，它对应于上面的语句。
年份是闰年么？
你可以使用[Github上的Python脚本](https://github.com/baderj/pitou)自己运行反编译器。
    python3 main.py nasm -o pitou.nasm