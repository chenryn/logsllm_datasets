our extensive set of test cases, we identiﬁed 6 different seman-
tics across the 10 browsers we considered, without counting
the unexpected support for hostnames in ALLOW-FROM im-
plemented in Edge: this means that the room for inconsistent
click-jacking protection is signiﬁcant. Out of the 10 tested
browsers, Firefox 69 is the only one that faithfully implements
the speciﬁcations we checked, while Opera Mini offers little
to no protection against click-jacking, because it does not im-
plement CSP, it does not support ALLOW-FROM, and even
basic XFO directives like SAMEORIGIN and DENY can be
incorrectly enforced due to other quirks in the treatment of
HTTP headers.
688    29th USENIX Security Symposium
USENIX Association
Browser
Chrome
Chrome for Android
Edge
Firefox
Internet Explorer
Opera Mini
Safari
Safari for iOS
Samsung Internet
UC Browser
CSP ALLOW-FROM Multiple Headers Header Parsing Double Framing


















































Table 3: Framing control semantics of popular browsers
5 Analysis in the Wild
In this section, we report on a large-scale analysis performed
in the wild with our policy analyzer. Our analysis shows that
many popular Web sites implement inconsistent protection
against click-jacking and sheds light on the root causes of this
potential security problem.
5.1 Data Collection
To assess inconsistencies at scale, we decided to analyze the
top 10,000 sites from the Tranco list of October 29, 2019.
As we did not only want to check the start pages in a static
manner, we instead used a Chrome-based crawler to visit the
start pages, collect all links on them, and follow those links
up to at most 500 items per site. (Here, “site” refers to the
registrable domain name or eTLD+1.) In doing so, we did not
only collect the headers delivered with the pages we visited,
but also those of all iframes on the visited pages. This way, we
were able to (partially) account for sites where only speciﬁc
pages are protected against framing-based attacks. We then
retrieved the XFO and CSP headers of the collected URLs,
sending each request to a URL once for each of the different
user-agent strings considered in our study.
For this step, we primarily relied on Python’s Requests
library to collect data. However, Requests folds multiple re-
sponse headers with the same name into a comma-separated
list, as speciﬁed in RFC 7230 [8]. As discussed in Section 4.2,
browsers do not necessarily follow this speciﬁcation, but
might rather consume each header separately, meaning that
Requests’ approach to parsing headers would not properly ac-
count for that. Therefore, in case we detect a comma in either
the XFO or CSP header, we fall back to curl, which outputs
the headers line-by-line. To further improve resiliency against
possible crawling errors, we ﬁltered out from the dataset all
the pages where we observed that at least one user agent was
not receiving the XFO or CSP headers, while other user agents
were. Though this might lose some inconsistencies, e.g., when
CSP headers are not actually sent to legacy browsers, we pre-
ferred to be conservative and work on more reliable data rather
than risking to unduly exacerbate the number of inconsisten-
cies in the wild. In particular, we found that several pages did
not consistently deliver the same XFO and/or CSP headers,
even when visited multiple times with the same User-Agent
string. Finally, we performed a de-duplication of the collected
framing control policies by removing all the duplicate combi-
nations of XFO and CSP policies collected within the same
origin, to avoid biasing the dataset construction towards ori-
gins with hundreds of pages all using the same policy.
At the end of the data collection process, we visited 989,875
URLs overall. Of those, 369,606 URLs (37%) across 5,835
sites carried either an XFO or CSP header aimed at framing
control. After the dataset cleaning and the de-duplication
process explained above, we were left with 17,613 framing
control policies. Table 4 shows the adoption of the different
security mechanisms in the different policies. We observe
that XFO is still the most widespread defense mechanism
against click-jacking in the wild by far, yet around 12% of the
collected policies make use of CSP.
Inconsistent Policies
5.2
Overall, we identiﬁed 1,800 policies from 1,779 origins im-
plementing inconsistent protection against click-jacking, i.e.,
where the enforced level of protection is dependent on the
browser. This is 10% of the analyzed policies, which is al-
ready a signiﬁcant percentage. But this result becomes even
more concerning when we take a look at which click-jacking
protection mechanisms are used by such policies.
Defense
Just XFO
Just CSP
XFO + CSP
Number of Policies Percentage
15,415
714
1,484
88%
4%
8%
Table 4: Defenses used in the collected policies
USENIX Association
29th USENIX Security Symposium    689
Defense
Just XFO
Just CSP
XFO + CSP
Inconsistencies Percentage
290
705
805
16%
39%
45%
Table 5: Defenses used in the inconsistent policies
Table 5 provides the breakdown: the relative majority of the
inconsistencies (45%) occur when XFO and CSP are used to-
gether, which suggests that having two different mechanisms
for the same purpose is potentially dangerous. Moreover, note
that 805 out of the 1,484 pages (54%) which make use of
both XFO and CSP together implement inconsistent protec-
tion against click-jacking, i.e., it is more likely to get the
combination of the two defenses wrong than right.
Another interesting insight from our analysis is that 84%
of the inconsistent policies make use of CSP. Intuitively, this
seems related to the fact that the set of browsers we consider
includes some legacy browsers without CSP support: in partic-
ular, Opera Mini provides very limited tools to protect against
click-jacking. Hence, one might think that inconsistencies are
motivated by its presence alone, yet this is not the case: if we
removed Opera Mini from the set of browsers, the number of
inconsistent policies would drop from 1,800 to 1,749, which
is roughly a 3% reduction. One might then try to also remove
Internet Explorer from the picture, since it also lacks support
for CSP. However, this is a different story than Opera Mini,
since Internet Explorer supports the ALLOW-FROM direc-
tive. Hence, inconsistencies could be ﬁxed by simulating the
behavior of CSP through different values of ALLOW-FROM
based on the Referer header (see Section 2).
To understand the prevalence of such practice in the wild,
we set up the following experiment: for each page in our
dataset, we identify the hosts which are allowed framing
according to CSP, and we send an HTTP request to the
page with the Referer header set to one of such hosts. In
the presence of wildcards in CSP, e.g., *.example.com, we
generate a synthetic candidate Referer matching them, e.g.,
https://test.example.com. If we observe that the value
of the Referer is reﬂected back in the XFO header of the re-
sponse, it means that we might have false positives in our
set of inconsistencies, because the originally collected XFO
headers only provided a partial picture of the deployed policy.
We managed to perform this test on the 2,198 pages with CSP
and observed extremely low adoption of Referer snifﬁng: in
particular, only 11 pages relied on such practice. This gives
us conﬁdence in the correctness of the conclusions we draw.
In the next section, we provide an in-depth analysis of the
inconsistent policies we collected. We do this while consider-
ing the full set of browsers in Table 2, because those browsers
are actively used, and we want to assess the state of click-
jacking protection on the Web as of now. We elaborate on the
impact of the chosen browsers on our study in Section 5.4.
5.3 Analysis of Inconsistent Policies
To have a more in-depth look into the set of inconsistent poli-
cies, we performed a further classiﬁcation step: in particular,
we identiﬁed 590 security-oriented policies (33%) and 795
compatibility-oriented policies (44%), while the other 415
inconsistent policies (23%) do not belong to any of these
two classes, hence are unduly inconsistent. In the rest of this
section, we perform an in-depth analysis of the collected in-
consistent policies and identify dangerous practices therein.
5.3.1 Security-Oriented Policies
The existence of security-oriented policies is justiﬁed by the
fact that XFO is less expressive than CSP, hence Web devel-
opers might be led into shipping XFO headers that are more
restrictive than the corresponding CSP headers. For example,
the Web site https://www.icloud.com deploys an XFO
header set to SAMEORIGIN and a CSP whitelisting every
subdomain of icloud.com and apple.com. A similar situa-
tion happens on https://academia.stackexchange.com,
which sets XFO to SAMEORIGIN and uses CSP to whitelist
both itself and https://stackexchange.com. These poli-
cies offer a good level of protection to legacy browsers, but
might introduce compatibility issues therein.
We further categorized the 590 security-oriented policies
in two classes. The ﬁrst class includes ineffective policies,
where CSP is overly liberal compared to XFO: these poli-
cies allow framing from any host on CSP-enabled browsers,
possibly just restricting its scheme, hence modern browsers
are left unprotected. We noticed this problem just in 13 cases
(2%), and we conjecture it might come from the wrong as-
sumption that, when both XFO and CSP are enabled, they
are both enforced, while CSP actually overrides XFO and
voids protection. However, it is positive to see that this class
of policies is highly under-represented. The other policies
all take advantage of the additional expressive power of CSP
over XFO for ﬁne-grained whitelisting: speciﬁcally, we ob-
served 99 cases (17%) where CSP was used to whitelist all
the subdomains of the host whitelisted via XFO, while in all
other cases CSP whitelisted at least two source expressions.
To the best of our knowledge, these look like legitimate use
cases, where policy inconsistency is not necessarily danger-
ous for security. However, this discrepancy raises concerns,
because it implies that either legacy browsers suffer from com-
patibility issues due to overly harsh security enforcement, or
modern browsers are excessively liberal in their treatment of
framing, i.e., the policies violate principle of least privilege.
5.3.2 Compatibility-Oriented Policies
Compatibility-oriented policies might be justiﬁed by the need
to make Web applications accessible by legacy browsers, at
the cost of (partially) sacriﬁcing security in that case. For
example, the Web site https://www.spotify.com deploys
690    29th USENIX Security Symposium
USENIX Association
Inconsistency Reason
Use of the ALLOW-FROM directive
Comma-separated directives in XFO header
Incomparable policies in XFO and CSP
Use of multiple XFO headers
Different policies sent to different browsers
Number of Policies Fraction
323
94
53
16
5
78%
23%
13%
4%
1%
Table 6: Practices in unduly inconsistent policies (classes might overlap)
a CSP whitelisting every subdomain of spotify.com and
spotify.net, but does not ship any XFO header, likely
because XFO does not support such expressive whitelists.
Another similar example is https://www.sony.com, which
does not deploy XFO, but uses CSP to allow framing from
itself and all the subdomains of three other trusted sites.
Recall that our dataset contains 795 compatibility-oriented
policies. The ﬁrst analysis we perform aims at understanding
how much security legacy browsers sacriﬁce for such policies.
For the very large majority of compatibility-oriented policies,
we observed that XFO does not provide any protection at all,
i.e., framing is allowed from any origin: this happened in 758
cases (95%). In particular, we found 705 pages where an XFO
header is entirely absent (89%) and 99 pages where the XFO
headers contain an incorrect directive or are misinterpreted
by some legacy browser (11%). This shows that most Web
developers are not actually concerned about offering security
to users of legacy browsers, or are just entirely unaware of
the existence of this problem.
To get a better understanding of the reasons underlying the
existence of compatibility-oriented policies, we analyze the
combination of XFO and CSP for the following scenario: if
CSP is used to whitelist at most one origin, it is straightfor-