Washington, D.C., USA (2001)
Towards Software-Based Signature Detection for Intrusion Prevention
123
[21] Johnson, E.J., Kunze, A.R.: IXP1200 Programming. Intel Press (2002)
[22] Debar, H., Dacier, M., Wepsi, A.: A revised taxonomy for intrusion-detection
systems. Technical report, IBM Research, Zurich (1999)
[23] Smaha, S.E.: Haystack: An intrusion detection system. In: IEEE Fourth Aerospace
Computer Security Applications Conference, Orlando, FL, USA (1988)
[24] Cheung, S., Crawford, R., Dilger, M., Frank, J., Hoagland, J., Levitt, K., Rowe, J.,
Staniford, S., Yip, R., Zerkle, D.: The design of GrIDS: A graph-based intrusion
detection system. Technical Report CSE-99-2, UC Davis (1999)
[25] Cisco: Cisco secure intrusion detection system version 2.2.0 (netranger) (2002)
[26] Farmer, D., Venema, W.: Improving the security of your site by breaking into it.
Technical report, Internet White Paper (1993) http://www.fish.com/security/.
[27] Moore, D., Shannon, C., Voelker, G., Savage, S.: Internet quarantine: Require-
ments for containing self-propagating code. In: Infocom, San Francisco, CA (2003)
[28] Ptacek, T.H., Newsham, T.N.: Insertion, evasion, and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks Inc. (1998)
[29] Lee, W., Cabrera, J.B.D., Thomas, A., Balwalli, N., Saluja, S., Zhang, Y.: Perfor-
mance adaptation in real-time intrusion detection systems. In: RAID’02, Zurich,
Switzerland (2002)
[30] Kerschbaum, F., Spaﬀord, E.H., Zamboni, D.: Using embedded sensors for de-
tecting network attack. Technical report, Purdue University (2000)
Defending Against Injection Attacks Through
Context-Sensitive String Evaluation
Tadeusz Pietraszek1 and Chris Vanden Berghe1,2
S¨aumerstrasse 4, CH-8803 R¨uschlikon, Switzerland
2 Katholieke Universiteit Leuven,
1 IBM Zurich Research Laboratory,
Celestijnenlaan 200A, B-3001 Leuven, Belgium
{pie, vbc}@zurich.ibm.com
Abstract. Injection vulnerabilities pose a major threat to application-
level security. Some of the more common types are SQL injection, cross-
site scripting and shell injection vulnerabilities. Existing methods for
defending against injection attacks, that is, attacks exploiting these vul-
nerabilities, rely heavily on the application developers and are therefore
error-prone.
In this paper we introduce CSSE, a method to detect and prevent
injection attacks. CSSE works by addressing the root cause why such at-
tacks can succeed, namely the ad-hoc serialization of user-provided input.
It provides a platform-enforced separation of channels, using a com-
bination of assignment of metadata to user-provided input, metadata-
preserving string operations and context-sensitive string evaluation.
CSSE requires neither application developer interaction nor appli-
cation source code modiﬁcations. Since only changes to the underlying
platform are needed, it eﬀectively shifts the burden of implementing
countermeasures against injection attacks from the many application
developers to the small team of security-savvy platform developers. Our
method is eﬀective against most types of injection attacks, and we show
that it is also less error-prone than other solutions proposed so far.
We have developed a prototype CSSE implementation for PHP, a
platform that is particularly prone to these vulnerabilities. We used
our prototype with phpBB, a well-known bulletin-board application,
to validate our method. CSSE detected and prevented all the SQL
injection attacks we could reproduce and incurred only reasonable
run-time overhead.
Keywords: Intrusion prevention,
web applications, PHP.
internal sensors,
injection attacks,
1 Introduction
In recent years we have seen a steady increase in the importance of application-
level security vulnerabilities, i.e., vulnerabilities aﬀecting applications rather
than the operating system or middleware of computer systems. Among
application-level vulnerabilities, the class of input validation vulnerabilities is
the most prominent one [11] and deserves particular attention.
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 124–145, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
Defending Against Injection Attacks Through CSSE
125
Input validation vulnerabilities are ﬂaws resulting from implicit assumptions
made by the application developer about the application input. More speciﬁcally,
input validation vulnerabilities exist when these assumptions can be invalidated
using maliciously crafted input to eﬀect a change of application behavior that is
beneﬁcial to the attacker.
Diﬀerent types of input validation vulnerabilities exist, depending on the in-
valid assumption. Buﬀer overﬂow vulnerabilities result from invalid assumptions
on the maximum size of the input. Integer overﬂow attacks result from invalid
assumptions on the range of the input. Similarly, injection vulnerabilities re-
sult from invalid assumptions on the presence of syntactic content in the ap-
plication input. This work focuses on this last class of vulnerabilities and the
attacks exploiting them. In these attacks, the so-called injection attacks, the at-
tacker provides maliciously crafted input carrying syntactic content that changes
the semantics of an expression in the application. The results are application-
dependent, but typically lead to information leakage, privilege escalation or ex-
ecution of arbitrary commands.
This paper introduces Context-Sensitive String Evaluation (CSSE), which is
an intrusion detection and prevention method, for injection attacks. It oﬀers
several advantages over existing techniques: it requires no knowledge of the ap-
plication or application source code modiﬁcations and can therefore also be used
with legacy applications. It is highly eﬀective against most types of injection
attacks, not merely the most common ones. It does not rely on the applica-
tion developer, which makes it less error-prone. Finally, it is not tied to any
programming language and can be implemented on a variety of platforms.
CSSE eﬀectively shifts the burden of implementing countermeasures against
injection attacks from the many application developers to the small team of
security-savvy platform developers. This is analogous to the way, for example,
the Java platform removed the burden of bounds checking from the application
developers, thereby making applications for the Java platform virtually immune
to buﬀer-overﬂow attacks. CSSE requires a separate implementation for every
platform one wants to protect. However, as the number of platforms is several
orders of magnitude smaller than the number of applications running on them,
these implementations can be implemented by security professionals and undergo
thorough testing.
The contribution of this paper is twofold. First, it presents a unifying view of
injection vulnerabilities, which facilitates reasoning about this class of vulnera-
bilities and predicting new types of related vulnerabilities. Second, and central
to this paper, it introduces CSSE as a method for defending against injection
attacks by addressing the root cause of the problem.
The paper is structured as follows. The next section discusses injection vul-
nerabilities and the conditions that enable them. Section 3 gives an overview on
related work. In Section 4 we provide a detailed overview of CSSE. Our CSSE
prototype implementation for PHP is discussed in Section 5. In Section 6 we
present experimental results on the eﬀectiveness and eﬃciency of our implemen-
tation. Finally, in Section 7, we present our conclusions and future work.
126
T. Pietraszek and C. Vanden Berghe
2 Injection Vulnerabilities
We introduce this class of vulnerabilities with a simple example that is vulnerable
to both SQL and shell injections. Next, we identify the root cause or underlying
reason why these vulnerabilities are present in applications. Finally, we present
a unifying view of the diﬀerent types of injection vulnerabilities.
2.1 Important Properties of Injection Vulnerabilities
Injection vulnerabilities are programming ﬂaws that allow an attacker to alter
the semantics of an expression in an application by providing input containing
syntactic content. In this section we give an example of code with SQL-injection
and shell-injection vulnerabilities to discuss some of the important properties of
these vulnerabilities.
The code below shows a realistic example of a part of a PHP application,
responsible for authentication by means of an e-mail address ($email) and a
numeric pincode ($pincode) against credentials stored in a database. The user is
successfully authenticated if a non-empty result set is returned.
$query = " SELECT * FROM users WHERE email = ’ " . $email . " ’ AND pincode = " .
$pincode ;
$result =
( $query ) ;
This code is prone to several SQL injection attacks. If the attacker provides
“alice@host’ or ’0’=’1” (note the use of quotes) as e-mail address, the application
executes a query, whose result is independent of the pincode provided. Because of
operator precedence, such a query will be equivalent to the one with a single con-
dition “email=’alice@host’”, thus allowing the attacker to bypass the authentica-
tion logic. Similar attacks executed using the pincode variable, which is used in a
numeric context, do not require single quotes in the user input. For example, by
using a valid e-mail address (e.g., “alice@host”) and “0 or 1=1” as a pincode, the
attacker would again be able to authenticate without proper credentials.
Continuing with our example to demonstrate a shell injection, the code shown
below sends a conﬁrmation email to an email address provided.
$query = " SELECT * FROM users WHERE email = ’ " . $email . " ’ AND pincode = " .
$pincode ;
$result =
( $query ) ;
In this case, any of the shell metacharacters (e.g., ‘, &&, ;, newline) in the
e-mail address ﬁeld can be used to execute arbitrary commands on the server.
For example, if the attacker uses “alice@host && rm -rf .” as e-mail address,
the webserver would, in addition to sending an e-mail, try to remove all ﬁles
from the current directory.
In all our examples, maliciously crafted input carries syntactic content. Con-
tent is considered syntactic, when it inﬂuences the form or structure of an expres-
sion. This change of structure ultimately results in altered expression semantics.
Which characters qualify as syntactic content depends on the context in which
the expression is used (e.g., SQL or shell command). Moreover, the context also
Defending Against Injection Attacks Through CSSE
127
depends on how the input is used within the expression (e.g., string constant vs.
numeric pincode in an SQL statement in our example). Identifying all syntactic
content for the diﬀerent contexts is thus a major challenge.
Removing single quotes and spaces from the input would prevent the attacks
we described, but would certainly not fend oﬀ all attacks. Other dangerous char-
acters include comment sequences (--, /*, */) and semicolons (;), but also this
list is not exhaustive [8].
Moreover, database servers commonly extend the ANSI SQL standards with
proprietary features and helpfully correct small syntactic errors, e.g., allow the
use of double quotes (") instead of single quotes (’) for delimiting string con-
tants. As the necessary checks are database-speciﬁc, an application can become
vulnerable by a mere change of the database backend.
2.2 The Root Cause
Injection vulnerabilities are commonly classiﬁed as input validation vulnerabili-
ties. However, the example of Section 2.1 suggests that validating user input to
prevent these attacks is nontrivial and error-prone. Treating these vulnerabilities
as mere input validation vulnerabilities is therefore an oversimpliﬁcation.
Instead, we should address their root cause, which can potentially yield a
less error-prone and more stable solution. Finding this root cause is equivalent
to unveiling the underlying reason why a vulnerability is present in a speciﬁc
system. In the case of vulnerabilities leading to injection attacks, this means
determining why specially crafted user input can be used to change the semantics
of an expression in the ﬁrst place.
A common property of injection vulnerabilities is the use of textual repre-
sentations of output expressions constructed from user-provided input. Textual
representations are representations in a human-readable text form. Output ex-
pressions are expressions that are handled by an external component (e.g., data-
base server, shell interpreter).
User input is typically used in the data parts of output expressions, as op-
posed to developer-provided constants, which are also used in the control parts.
Therefore, user input should not carry syntactic content. In the event of an in-
jection attack, specially crafted user input inﬂuences the syntax, resulting in a
change of the semantics of the output expression. We will refer to this process
as mixing of control and data channels.
Injection vulnerabilities are not caused by the use of textual representa-
tion itself, but by the way the representation is constructed. m Typically user-
originated variables are serialized into a textual representation using string op-
erations (string concatenation or string interpolation, as in our example). This
process is intuitively appealing, but ultimately ad hoc: variables loose their type
information and their serialization is done irrespectively of the output expres-
sion. This enables the mixing of data and control channels in the application,
leading to injection vulnerabilities.
We thus consider the ad-hoc serialization of user input for creating the textual
representation of output expressions as the root cause of injection attacks.
128
T. Pietraszek and C. Vanden Berghe
Ad-hoc serialization of user input (or variables in general) can lead to the
undesired mixing of channels, but has also some desirable properties. The most
important is that it is intuitively appealing and, consequently, more easily writ-
ten and understood by the application developers. Second, for many types of
expressions (e.g., XPath, shell command) ad-hoc serialization of user input us-
ing string operations is the only way of creating the textual representation.
Considering this, a defense against injection attacks should enable the applica-
tion developer to use the textual representation in a safe manner. CSSE achieves
this through a platform-enforced separation of the data and control channels,
thereby addressing the root cause of injection vulnerabilities, while at the same
time maintaining the advantages of textual representation and ad-hoc serializa-
tion of user variables. We present the method in more detail in Section 4.
2.3 A Unifying View of Injection Vulnerabilities
Section 2.1 introduced some of the more common types of injection vulnerabil-
ities, but several others exist. In this section we provide a unifying view of the
diﬀerent types.
For any type of injection vulnerability to be present in an application, two
prerequisites need to be met. The ﬁrst is that the application has to use an output
expression created using ad-hoc serialization of variables. The second is that the
output expression depends on user-provided input data, so it can be inﬂuenced
by the attacker. Hereafter, we will use the terms input vector and output vector
to refer to classes of input sources and output expressions, respectively.
In Table 1 we categorize some known examples of injection vulnerabilities ac-
cording to their input and output vectors, and provide a CAN/CVE [10] number
if available. The cells in the table show possible avenues for diﬀerent types of
injection vulnerabilities.
The rows of the table represent three coarse-grained categories of input vec-
tors: network input, direct input and stored input. Network input consists of all
input provided by remote users. It is a combination of transport-layer input
(e.g., POST data and cookies in HTTP), and application-level input (e.g., a
SOAP request). Direct input, on the other hand, is input that is passed on via
a local interface, e.g., through a command-line interface or environment vari-
ables. Finally, stored input is input that does not come from the user directly,
but involves an intermediate storage step, e.g., in a database or an XML ﬁle.
Note that for some applications the distinction between network input and di-
rect input may not be clear-cut (e.g., CGI applications access HTTP request
data through environment variables). We nonetheless distinguish between these
types as they most often use diﬀerent programming interfaces.
The columns of the table represent the output vectors or types of expressions
to be handled by the external components. We distinguish between the following
categories: execute, query, locate, render and store. The “execute” category cov-
ers expressions containing executable content, such as shell commands or PHP
scripts. The “query” category contains expressions that are used to select and
manipulate data from a repository, e.g., XPath, SQL or regular expressions. The
Defending Against Injection Attacks Through CSSE
129
Table 1. Examples of diﬀerent injection vulnerabilities with their CVE/CAN numbers.
The most common vulnerability types are marked in bold.
P
P
Input
Output
P
P
P
Network input
(GET/POST)
Direct input
(arguments)
Stored input
(DB, XML)
Execute
(e.g., shell,
XSLT)
Query
(e.g., SQL,
XPath)
Locate
(e.g., URL, path)
shell inj.
SQL inj.
path traversal
Render
(e.g., HTML,
SVG)
Store
(e.g., DB, XML)
“phishing”
through XSS preparation for
(CAN-2003-0990) (CVE-2004-0035) (CAN-2004-1227) (CAN-2004-0359)
command inj.
(CAN-2001-0084)
local path
traversal
(CAN-2003-0204)
PostScript inj.
regexp inj.
nth-order inj.
nth-order SQL
inj.
XSS
(CAN-2002-1493)
preparation for
(n+1)th-ord. inj.
“locate” category is related to the previous one, but contains expressions that
help locating the repositories themselves, e.g., paths and URLs. Expressions in
the “render” categories contain information about the visualization of the data,
e.g., HTML, SVG and PostScript. Finally, the “store” category consists of ex-
pressions for storing data in a repository. This last category is special as the
cells of this column do not represent injection vulnerabilities, but rather the