access to ﬁles. Therefore, the δ between two write operations on two diﬀerent
ﬁles is not very long – unlike benign applications that usually require some input
from the user ﬁrst in order to perform the required operation.
5.3 Evaluating the Feature Set
Indeed, the assumption that all the features are equally important hardly holds
true in real world scenarios. Therefore, we performed a set of measurements to
relax this assumption. We used Recursive Feature Elimination (RFE) approach
to determine the signiﬁcance of each feature. To this end, the analysis started
by incorporating all the features and measuring the FP and TP rates. Then,
in each step, a feature with the minimum weight was removed and the FP
and TP rates were calculated by performing 10 fold cross-validation to quantify
the contribution of each feature. The assigned weights were then used as the
coeﬃcient of the feature in the formula 1 in Sect. 5.4.
Our experiments on several combinations of features shows that the highest
false positive rate is 5.9%, and is produced when Redemption only incorpo-
rates content-based features (F1). The reason for this is that ﬁle compression
106
A. Kharraz and E. Kirda
applications, when conﬁgured to delete the original ﬁles, are reported as false
positives. During our experiments, we also found out that in document editing
programs such as Microsoft Powerpoint or Microsoft Paint, if the user inserts a
large image in the editing area, the content-based features that monitor content
traversal or payload entropy falsely report the application as being anomalous.
However, when behavior-based features were incorporated, such programs do
not receive a high anomaly score since there is no cross-ﬁle activities with write
privilege similar to ransomware attacks. When all the features are combined (i.e.,
F12), the minimum false positive rate (0.5% FP with 100% TPs) is produced on
labeled dataset. Hence, we use the combination of all the features in our system.
5.4 Malice Score Calculation (MSC) Function
The MSC function allows the system to identify the suspicious process and notify
the user when the process matches the abstract model. Given a process X, we
assign a malice score S to the process each time it requests privileged access
to a user ﬁle. If the malice score S exceeds a pre-deﬁned malice threshold α,
it means that the process exhibits abnormal behaviors. Hence, we suspend the
process and inform the user to conﬁrm the suspicious action. In the following,
we provide more details on how we determine the malice score for each process
that requests privileged operations on user ﬁles:
(r1): The process that changes the entropy of the data blocks between a read
and a write request to a higher value receives a higher malice score. The required
value is calculated as an additive inverse of the entropy value of read and write
ratio, and resides on [0,1], meaning that the higher the value of entropy in the
write operation, the closer the value of the entropy to 1. If the entropy of the
data block in write is smaller than the read operation, we assign the value 0 to
this feature.
(r2): If a process iterates over the content of a ﬁle with write privilege, it will
receive a higher malice score. If the size of the ﬁle A is sA, and yA is the total
size of the data blocks modiﬁed by the process, the feature is calculated as yA
sA
where the higher the number of data blocks modiﬁed by the process, the closer
the value is to 1.
(r3): If a process requests to delete a ﬁle, this behavior is marked as being
suspicious. If a process exhibits such I/O activities, the value 1 is assigned to r3.
(r4): Redemption monitors if the process traverses over the user ﬁles with write
privilege, and computes the additive inverse of the number of privileged accesses
to unique ﬁles in a given path. The output of the function resides on [0,1]. Given
a process X, the function assigns a higher malice score as X generates more write
requests to access ﬁles in a given path. Here, write(X, fi) is the ith independent
write request generated by the process X on a given ﬁle fi.
(r5): Given a set of document classes, Redemption monitors whether the
process requests write access to ﬁles that belong to diﬀerent document classes.
Redemption: Real-Time Protection Against Ransomware at End-Hosts
107
The ﬁle A and ﬁle B belong to two diﬀerent document classes if the program
that opens ﬁle A cannot take ﬁle B as a valid input. For example, a docx and
a pdf ﬁle belong to two diﬀerent document classes since a docx ﬁle cannot be
opened via a PDF editor program. We assign the score 1 if the process performs
cross-document access requests similar to ransomware.
(r6): The system computes the elapsed time (δ) between two subsequent write
δ represents
requests generated by a single process to access two diﬀerent ﬁles. 1
the access frequency. As the elapsed time between two write requests increases,
the access frequency decreases.
We deﬁne the overall malice score of a process at time t by applying the weights
of individual features:
k(cid:2)
i=1
M SC(r) =
wi × ri
k(cid:2)
wi
(1)
i=1
where wi is the predeﬁned weight for the feature i in the MSC function. The
value of wi is based on the experiment discussed in Sect. 5.3. The weights we
used in (1) are w1 = 0.9, w2 = 1.0, w3 = 0.6, w4 = 1.0, w5 = 0.7, w6 = 1.0.
Note that when Redemption is active, even when using all the combined
features, ﬁle encryption or secure deletion applications are typically reported as
being suspicious. As mentioned earlier, such applications generate very similar
requests to access user ﬁles as a ransomware does. For example, in a secure
deletion application, the process iterates over the entire content of the given ﬁle
with write privileges, and writes random payloads on the contents. The same
procedure is repeated over the other ﬁles in the path. Hence, such cases are
reported to the user as violations, or other inappropriate uses of their critical
resources.
6 Implementation
In this section, we provide the implementation details of Redemption. Note
that our design is suﬃciently general to be applied to any OS that is a poten-
tial target for ransomware. However, we built our prototype for the Windows
environment which is the main target of current ransomware attacks today.
Monitoring Access Requests. Redemption must interpose on all privi-
leged accesses to sensitive ﬁles. The implementation of the system is based on
the Windows Kernel Development framework without any modiﬁcations on the
underlying ﬁle system semantics. To this end, it suﬃces on Windows to mon-
itor the write or delete requests from the I/O system to the base ﬁle system
driver. Furthermore, to guarantee minimal data loss, Redemption redirects
the write requests from the user ﬁles to the corresponding reﬂected ﬁles. The
reﬂected ﬁles are implemented via sparse ﬁles on NTFS. In fact, the NTFS
ﬁle system does not allocate hard disk drive space to reﬂected ﬁles except in
108
A. Kharraz and E. Kirda
regions where they contain non-zero data. When a process requests to open a
user ﬁle, a sparse ﬁle with the same name is created/opened in the protected
area. The sparse ﬁles are created by calling the function FltFsControlFile with
the control code FSCTL SET SPARSE. The size of the ﬁle is then set by calling
FltSetInformationFile that contains the size of the original ﬁle.
Redemption updates the FileName ﬁeld in the ﬁle object of the create
request with the sparse ﬁle. By doing this, the system redirects the operation
to the reﬂected ﬁle, and the corresponding handle is returned to the requesting
process. The write request is executed on the ﬁle handle of the reﬂected ﬁle which
has been returned to the process at the opening of the ﬁle. Each write request
contains the oﬀset and the length of the data block that the process wishes to
write the data to.
If the write request is successfully performed by the system, the correspond-
ing meta-data of the reﬂected ﬁle (which is the oﬀset and the length of the
modiﬁed regions of the original ﬁle) is marked in the write requests. In our pro-
totype, the meta-data entry to represent the modiﬁed regions is implemented
via Reparse Points provided by Microsoft – which is a collection of application-
speciﬁc data – and is interpreted by Redemption that sets the tags. When
the system sets a reparse point, a unique reparse tag is associated with it
which is then used to identify the oﬀset and the length of every change. The
reparse point is set by calling FltTagFile when the ﬁle is created by Redemp-
tion. On subsequent accesses to the ﬁle in the protected area, the reparse
data is parsed via FltFsControlFile with the appropriate control code (i.e.,
FSCTL GET REPARSE POINT). Hence, the redirection is achieved by intercepting
the original write request, performing the write, and completing the original
request while tracking the write contents.
The consistency of the data redirected to the sparse ﬁles is an important
design requirement of the system. Therefore, it is required to perform frequent
ﬂushing to avoid potential user data loss. Indeed, this approach is not without a
cost as multiple write requests are required to ensure critical data is written to
persistent media. To this end, we use the Microsoft recommended approach by
opening sparse ﬁles for unbuﬀered I/O upon creation and enabling write-through
caching via FILE FLAG NO BUFFERING and FILE FLAG WRITE THROUGH ﬂags. In
fact, with write-through caching enabled, data is still written into the cache, but
cache manager writes the data immediately to disk rather than incurring a delay
by using the lazy writer. Windows recommends this approach as replacement
for calling the FlushFileBuffer function after each write which usually causes
unnecessary performance penalties in such applications.
Behavioral Detection and Notiﬁcation Module. We implemented this
module as a user-mode service. This was a conscious design choice similar to the
design of most anti-malware solutions. Note that Microsoft oﬃcially supports
the concept of protected services, called Early Launch Anti-Malware (ELAM),
to allow anti-malware user-mode services to be launched as protected services.
In fact, after the service is launched as a protected service, Windows uses code
integrity to only allow trusted code to load into a protected service. Windows
Redemption: Real-Time Protection Against Ransomware at End-Hosts
109
also protects these processes from code injection and other attacks from admin
processes [28]. If Redemption identiﬁes the existence of a malicious process, it
automatically terminates the malicious process.
7 Evaluation
The prototype of the Redemption supports all Windows platforms. In our
experiments, we used Windows 7 by simply attaching Redemption to the ﬁle
system. We took popular anti-evasion measures similar to our experiments in
Sect. 3. The remainder of this section discusses how benign and malicious dataset
were collected, and how we conducted the experiments to evaluate the eﬀective-
ness of our approach.
7.1 Dataset
The ground truth dataset consists of ﬁle system traces of manually conﬁrmed
ransomware samples as well as more than 230 GB of data which contains the
interaction of benign processes with ﬁle system on multiple machines. We used
this dataset to verify the eﬀectiveness of Redemption, and to determine the
best threshold value to label a suspicious process.
Collecting Ransomware Samples. We collected ransomware samples from
public repositories [1,3] that are updated on a daily basis, and online forums
that share malware samples [2,26]. In total, we collected 9,432 recent samples,
and we conﬁrmed 1174 of them to be active ransomware from 29 contemporary
ransomware families. We used 504 of the samples from 12 families in our training
dataset. Table 2 describes the dataset we used in this experiment.
Collecting Benign Applications. One of the challenges to test Redemption
was to collect suﬃcient amount of benign data, which can represent the realistic
use of ﬁle system, for model training purposes. To test the proposed approach
with realistic workloads, we deployed a version of Redemption on ﬁve separate
Windows 7 machines in two diﬀerent time slots each for seven days collecting
more that 230 GB of data. The users of the machines were advised to perform
their daily activities on their machines. Redemption operated in the monitor-
ing mode, and did not collect any sensitive user information such as credentials,
browsing history or personal data. The collected information only included the
interaction of processes with the ﬁle system which was required to model benign
interaction with the ﬁle system. All the extracted data was anonymized before
performing any further experiments. Based on the collected dataset, we created a
pool of application traces that consisted of 65 benign executables including appli-
cations that exhibit ransomware-like behavior such as secure deletion, encryp-
tion, and compression. The application pool consisted of document editors (e.g.,
Microsoft Word), audio/video editors (e.g., Microsoft Live Movie Maker, Movavi
Video Editor), ﬁle compression tools (e.g., Zip, WinRAR), ﬁle encryption tools
(e.g., AxCrypt, AESCrypt), and popular web browsers (e.g., Firefox, Chrome).
Due to space limitation, we provided a sub set of benign applications we used
in our analysis in Table 1.
110
A. Kharraz and E. Kirda
7.2 Detection Results
As discussed in Sect. 4, one of the design requirements of the system is to produce
low false positives, and to minimize the number of unnecessary notiﬁcations for
the user. To this end, the system employs a threshold value to determine when
an end-user should be notiﬁed about the suspicious behavior of a process.
We tested a large set of benign as well as ransomware samples on a Redemp-
tion enabled machine. As depicted in Tables 1 and 2, the median score of benign
applications is signiﬁcantly lower than ransomware samples. For ﬁle encryption
programs such as AxCrypt which are speciﬁcally designed to protect the privacy
of the users, the original ﬁle is overwritten with random data once the encrypted
version is generated. In this case, Redemption reports the action as being mali-
cious – which, in fact, is a false positive. Unfortunately, such false positive cases
are inevitable since these programs are exhibiting the exact behavior that a typ-
ical ransomware exhibits. In such cases, Redemption informs the end-user and
asks for a manual conﬁrmation. Given these corner cases, we select the malice
score as α = 0.12 where the system achieves the best detection and false posi-
tive rates (FPs = 0.5% at a TP = 100%). Figure 2 represents the false positive
and true positive rates as a function of the malice score on the labeled dataset.
This malice threshold is still signiﬁcantly lower than the minimum malice score
of all the ransomware families in the dataset as provided in Table 2. The table
also shows the median ﬁle recovery rate. As depicted, Redemption detects a
malicious process and successfully recovers encrypted data after observing on
average four ﬁles. Our experiment on the dataset also showed that 7 GB storage
is suﬃciently large for the protected area in order to enforce the data consistency
policy.
Testing with Known/Unknown Samples. In addition to the 10-fold cross
validation on 504 samples, we also tested Redemption with unknown benign
and malicious dataset. The tests included 29 ransomware families which 57%
of them were not presented in the training dataset. We also incorporated the
ﬁle system traces of benign processes in the second time slot as discussed in
Sect. 7.1 as the unseen benign dataset in this test. Table 3 represents the list
of ransomware families we used in our experiments. This table also shows the
datasets that were used in prior work [15,23,31]. In this experiment, we used
the malice threshold α = 0.12 similar to the previous experiment and manually
checked the detection results to measure the FP and TP rates. The detection
results in this set of experiments is (TPs = 100% at 0.8% FPs). Note that the
number of FP cases depends on the value of malice threshold. We selected this
conservative value to be able to detect all the possible ransomware behaviors.
Indeed, observing realistic work loads on a larger group of machines can lead to
a more comprehensive model, more accurate malice threshold calibration, and
ultimately lower FP rates. However, our experiments on 677 ransomware sam-
ples from 29 ransomware families show that Redemption is able to detect the
malicious process in all the 29 families by observing a median of 5 ﬁles. We
suspect the diﬀerence in the number of ﬁles is due to diﬀerence in the size of the
ﬁles being attacked. In fact, this is a very promising result since the detection
Redemption: Real-Time Protection Against Ransomware at End-Hosts
111
Fig. 2. TP/FP analysis of Redemption. The threshold value α = 0.12 gives the best
detection and false positive rates (FPs = 0.5% at a TP = 100%).
Table 1. A list of Benign applica-
tion and their malice scores.
Table 2. A list of ransomware families and their
malice scores.
Program
Adobe Photoshop
AESCrypt
AxCrypt
Adobe PDF reader
Adobe PDF Pro
Google Chrome
Internet Explorer
Matlab
MS Words
MS PowerPoint
MS Excel
VLC Player
Vera Crypt
WinRAR
Windows Backup
Windows paintit
SDelete
Skype
Spotify
Sumatra PDF
Zip
Malice Score Median 0.027
Min. Score Max. Score
0.032
0.37
0.31
0.0
0.031
0.037
0.035
0.038
0.041
0.025
0.017
0.0
0.33
0.0
0.0
0.029
0.283
0.011
0.01
0.022
0.0
0.088
0.72
0.75
0.0
0.039
0.044
0.045
0.92
0.089
0.102
0.019
0.0
0.71
0.16
0.0
0.083
0.638
0.013
0.011
0.041
0.16
0.0885
Family
Samples Min. Score Max. Score File
33
Cerber
50
Cryptolocker
39
CryptoWall3
46
CryptXXX
53
CTB-Locker
36
CrypVault
39
CoinVault
54
Filecoder
45
GpCode