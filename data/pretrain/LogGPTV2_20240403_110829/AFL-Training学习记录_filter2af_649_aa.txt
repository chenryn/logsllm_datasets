# AFL-Training学习记录
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近发现一个AFL的学习资料：[https://github.com/mykter/afl-training。](https://github.com/mykter/afl-training%E3%80%82)  
本文主要记录了我学习Fuzzing Workshop的过程，以及中间遇到的问题和思考。  
希望能够对大家学习fuzzing或者AFL有所帮助。
这个workshop由几个challenge组成，这些challenge的目的是用AFL在开源软件里复现漏洞。漏洞主要包括下面几个，每个漏洞都有自己的特色。比如libxml是无状态的库，ntpq是网络服务类程序，date是因为环境变量导致的溢出。
（1）libxml: CVE-2015-8317
（2）openssl的心脏滴血: CVE-2014-0160
（3）ntpq:CVE-2009-0159
（4）sendmail : CVE-1999-0206, CVE-2003-0161
（5）date:CVE-2017-7476
（6）CGC的CROMU_00007
## 创建环境
这里采用docker方式创建学习环境。
首先，进入到仓库下的environment，基于dockerfile构建镜像。
    docker build . -t fuzz-training
运行容器，需要使用—privileged选项，才可以使用一些脚本limit_memory或者gdb这些工具。
    sudo docker run --privileged  -ti --name=afl-train -e  PASSMETHOD=env -e PASS=password  ghcr.io/mykter/fuzz-training  /bin/bash
运行该命令配置系统环境，这样afl启动的时候就不会出现echo core的提示了。
    cd AFLplusplus
    ./afl-system-config
现在在docker里测试一下小程序。
对小程序源码编译，编译的时候顺便插桩一下。
    cd quickstart
    CC=afl-clang-fast AFL_HARDEN=1 make
测试一下编译的程序是否能够运行：
    ./vulnerable
    输入回车后应该会出现下面的结果
    Usage: ./vulnerable
    Text utility - accepts commands and data on stdin and prints results to stdout.
        Input             | Output
        ------------------+-----------------------        u      | Uppercased version of the first  bytes of .
        head   | The first  bytes of .
用种子输入测试程序
    ./vulnerable 
    #include 
    void main() {
        char *data = "Some input data\n";
        lib_echo(data, strlen(data));
        printf("%d\n", lib_mul(1,2));
    }
然后，使用下面的命令进行编译。
    AFL_HARDEN=1 afl-clang-fast harness.c library.c -o harness
如果插桩成功，应该是如下结果：
但是如果就这样直接afl-fuzz ，会发现AFL提示：odd，check syntax！
原因很明显，是因为刚刚写的harness根本没有从外部获取输入。所以，我们需要修改harness，让他从stdin获取输入，并且将输入喂给目标函数。如果对标准输入输出的概念不太了解，可以用man命令（man
3 stdin）简单了解一下。
    #include 
    #include 
    #include 
    #include "library.h"
    // fixed size buffer based on assumptions about the maximum size that is likely necessary to exercise all aspects of the target function
    #define SIZE 50
    int main() {
        // make sure buffer is initialized to eliminate variable behaviour that isn't dependent on the input.
        char input[SIZE] = {0};
        ssize_t length;
        length = read(STDIN_FILENO, input, SIZE);
        lib_echo(input, length);
    }
现在再进行fuzz就不会有那个提示了。这个harness，只是在前面的基础上加了一个read函数，读取标准输入，并将输入作为lib_echo的参数。而afl可以自动生成输入，喂给stdin，从而将输入传到lib_echo，达到测试函数的目的。另外，也可以发现afl会将生成的输入直接从stdin传递，那么对于一些命令行程序，带argv参数那种，afl又是如何处理的呢？这个问题先放着，看后面做完挑战，是否能够得到解答。
接下来测试的lib_mul函数，这个函数需要两个输入，又要如何解决呢？作者给出的harness如下，主要看19到25行。就是多了个read函数输入第二个参数。
    #include 
    #include 
    #include 
    #include "library.h"
    // fixed size buffer based on assumptions about the maximum size that is likely necessary to exercise all aspects of the target function
    #define SIZE 100
    int main(int argc, char* argv[]) {
        if((argc == 2) && strcmp(argv[1], "echo") == 0) {
            // make sure buffer is initialized to eliminate variable behaviour that isn't dependent on the input.
            char input[SIZE] = {0};
            ssize_t length;
            length = read(STDIN_FILENO, input, SIZE);
            lib_echo(input, length);
        } else if ((argc == 2) && strcmp(argv[1], "mul") == 0) {
            int a,b = 0;
            read(STDIN_FILENO, &a, 4);
            read(STDIN_FILENO, &b, 4);
            printf("%d\n", lib_mul(a,b));
        } else {
            printf("Usage: %s mul|echo\n", argv[0]);
        }
    }
这部分主要是教怎么写harness，作者还给了个小练习。要求从argv读取文件名，并打开特定的文件，将内容读到一个缓冲区内，并将buffer内容传到目标函数里。简单写了一下，仅供参考。
    #include 
    #include 
    #include 
    #include "library.h"
    // fixed size buffer based on assumptions about the maximum size that is likely necessary to exercise all aspects of the target function
    #define SIZE 100
    int main(int argc, char* argv[]) {
            char input[SIZE] = {0};
            FILE *fp = fopen(argv[1],"r");
            ssize_t length;
            fread(input,length,1,fp);
            lib_echo(input, length);
            fclose(fp);
    }
接下来就开始测试真实程序~
## Libxml2
第一个挑战是复现 CVE-2015-8317。
libxml2是一个热门的XML库。这类库很适合用来fuzzing，理由有六个：
（1）经常解析用户提供的数据
（2）使用不安全的语言写的
（3）无状态
（4）没有网络和文件系统交互
（5）官方发布的API是很好的目标，不需要去识别和隔离内部的组件
（6）快
这次的教程尝试复现CVE-2015-8317。
输入以下命令来对libxml编译插桩，并且加上ASAN的选项。
    cd libxml2
    CC=afl-clang-fast ./autogen.sh 
    AFL_USE_ASAN=1 make -j 4
然后接下来需要写个harness来测试libxml的几个核心函数。可以发现下面的harness中出现了很多下划线带AFL的函数。这些函数可以在AFL的LLVM模式的文档（[https://github.com/google/AFL/blob/master/llvm_mode/README.llvm）](https://github.com/google/AFL/blob/master/llvm_mode/README.llvm%EF%BC%89)
里找到说明。
这里主要说下AFL_LOOP(1000)，这个指的是启用AFL的persistent
模式。对于一些无状态的API库，可以复用进程来测试多个测试样例，从而减少fork系统调用的使用，进而减少OS的开销。
    #include "libxml/parser.h"
    #include "libxml/tree.h"
    #include 
    __AFL_FUZZ_INIT();
    int main(int argc, char **argv) {
        #ifdef __AFL_HAVE_MANUAL_CONTROL
            __AFL_INIT();
        #endif
        unsigned char *buf = __AFL_FUZZ_TESTCASE_BUF;  // must be after __AFL_INIT
        xmlInitParser();
        while (__AFL_LOOP(1000)) {
            int len = __AFL_FUZZ_TESTCASE_LEN;
            xmlDocPtr doc = xmlReadMemory((char *)buf, len, "https://mykter.com", NULL, 0);
            if (doc != NULL) {
                xmlFreeDoc(doc);
            }
        }
        xmlCleanupParser();
        return(0);
    }
编译harness。
    AFL_USE_ASAN=1 afl-clang-fast ./harness.c -I libxml2/include libxml2/.libs/libxml2.a -lz -lm -o fuzzer
写个初始输入seed。
    mkdir in
    echo "" > in/hi.xml
开始fuzz，-x表示设定fuzzer的字典。@@类似占位符，表示输入的位置。因为harness用的是argv作为输入，而不是stdin，所以这里用的是@@。
    afl-fuzz -i in -o out -x /home/fuzzer/AFLplusplus/dictionaries/xml.dict ./fuzzer @@
大概跑了218min，可以发现出现了12个crash。
## Heartbleed
这个challenge是复现著名的心脏滴血漏洞。
配置并build openssl
    cd openssl
    CC=afl-clang-fast CXX=afl-clang-fast++ ./config -d
    AFL_USE_ASAN=1 make
harness：
    #include 
    #include 
    #include 