edge cases in which constant blinding is not applied, or cases
where this blinding is reverted by various browser components
(such as optimizers).
To search for these edge cases, we leverage code fuzzing.
Code fuzzing has a long history as a dynamic testing approach
to identify software vulnerabilities [45], [28] (including in
browsers). Instead of searching for bugs, we leverage code
fuzzing to generate a large diversity of JavaScript code snippets
to trigger cases in which constants might not be blinded.
Our main idea is to encode “magic” constants in the fuzzed
JavaScript code that DACHSHUND’s JIT inspector (cf. Sec-
tion IV-B) can identify.
We implemented our fuzzer based on jsfunfuzz [45], a
JavaScript fuzzer that is heavily used in testing the Firefox’s
jsfunfuzz generates random
JavaScript engine. Technically,
JavaScript function bodies (including invalid ones) to test
JavaScript engines for vulnerabilities, also covering newly
introduced features such as in ECMAScript 6. We extended
jsfunfuzz to adjust it to our needs: (i) we modiﬁed the code
generator to reduce the likelihood that code generates syntax
errors, and (ii) we increased the chance of large integer
immediate values appearing in the generated code. The reason
for modiﬁcation (ii) is straightforward, as we want to test if
allegedly-blinded immediate values (i.e., larger ones in the
range [217, 232)) are emitted by the compiler. Thus, we want
to maximize their incidence in the generated JavaScript code.
Modiﬁcation (i) is required to reach the compilation stage,
which will not be the case if the generated JavaScript code
contains a syntax error. This again highlights the difference
between our motivation for code fuzzing and the typical
motivation for triggering software vulnerabilities.
We feed the JavaScript code snippets that are generated
by the fuzzing component to two popular browsers: Microsoft
Edge and Google Chrome (and their corresponding JavaScript
engines: Chakra and V8, respectively). We exclude Mozilla
Firefox from our experiments, as its JavaScript engine does
not implement constant blinding.
B. JIT Inspector Component
The JIT inspector component relates integer constants in
randomly generated JavaScript code to the sequence of bytes
representing the same number in the JIT-compiled machine
code. Technically, we attach to the renderer process of the
browser and inspect its code pages created at runtime. Once
the magic value encoded by the fuzzing component is found,
the JIT inspector has likely found a constant that has survived
the blinding phase.
However, to fully understand when to inspect the code
pages, it is important to note that JavaScript engines implement
multiple levels of compilation. Typically, the ﬁrst-level JIT
compiler is fast but produces low-performance code, which
is then optimized by a second-level JIT compiler if it has
been executed frequently. We refer to the ﬁrst level compiler
as a baseline compiler and the second level as an optimizing
compiler. In our experiments, we consider the code generated
by both compilers, as the attacker has full control of triggering
either of the two compilers by carefully choosing how often
she executes a piece of code.
A distinction between Chrome and Edge has to be made
when the compilers kick in. Edge has an interpreter that
interprets the JavaScript code until it becomes warm (i.e., when
it is executed around 50 times). Only after that, a JavaScript
function is compiled by the baseline compiler. In contrast,
Chrome skips the interpreting step and directly compiles the
JavaScript function upon ﬁrst execution. Consequently,
to
trigger a baseline compilation of a JavaScript function, one has
to call the function once for Chrome and 50 times for Edge—
again, a parameter that is under full control of the attacker.
In both browsers, a baseline-compiled JavaScript function is
recompiled by the optimizing compiler after it becomes hot
(i.e., after it is executed over 1000 times). The optimizing
compiler leverages code analysis techniques to produce highly
4
EdgeFuzzerJIT InspectorChromeControllereval("vara=0^0x9090;");...xorrax,raxmovrax,0x9090...JITvara=0^  0x9090;FOUND0x9090 at 0x04072710C=0x9090C=0x9090Optim.efﬁcient code (e.g., by incorporating inferred type information
or function inlining). To trigger an optimization of a JavaScript
function, one has to call it more than 1000 times. However,
given the runtime of short JavaScript functions, this is not a
practical burden to attackers, i.e., it can be optimized in a
matter of milliseconds.
Putting all this together, the basic algorithm of the JIT
inspector is the following:
(J1) The JIT inspector receives a set of integers (the magic
that has to be found in the JIT-
values) as an input
compiled code.
(J2) It attaches itself to the required renderer process of the
tested browser (i.e., the correct browser tab containing the
tested JavaScript code).
(J3) By looking at the permissions of the memory pages, the
JIT inspector retrieves a set of pages that were generated
by the JIT compiler. It does so by scanning for pages with
RWX protection in Chrome and RX protection in Edge.
(J4) Functions in these code pages are separated by 0x00
bytes in Chrome and 0xcc (int3) bytes in Edge. There-
fore, starting from a page boundary, the JIT inspector can
easily identify all functions, and extracts the correspond-
ing machine code.
(J5) As a ﬁnal step, the JIT inspector searches for the input
integers (J1) in the machine code. In case of a match, the
JIT inspector returns the disassembly of the function that
contains the constant(s).
Note that in the last step (J5), where we search for the
integer values in the machine code, we may encounter false
positives. That is, machine code may accidentally contain the
value that we searched for, which was however not a conse-
quence of the JavaScript code. We can deal with false positives
in two ways: (i) We can manually inspect the disassembled
output of the machine code to verify that it indeed corresponds
to a JavaScript statement, or (ii) we can reuse the same
JavaScript function with a different set of immediate values,
and check if we get the match again. For the sake of simplicity,
we used the ﬁrst approach and manually inspected all constants
found by DACHSHUND, while the latter solution is a fully-
automated way to exclude any chance of false positives.
C. Controller Component
As a third and last component, we add a controller that
steers the interplay between the fuzzer and inspector compo-
nents. The goal of the controller is to steer synchronization
between fuzzer and inspector. The controller does so in the
following repeating steps:
(CC1) The controller instruments the fuzzing component to
generate a textual representation of a new JavaScript
function (jsfunStr).
(CC2) Using eval, the controller generates a JavaScript func-
tion from jsfunStr (jsfun=eval(jsfunStr)).
(CC3) If eval fails (i.e., jsfunStr has a syntax error), return
to step (CC1). Otherwise, the controller compiles jsfun
by calling it either once (Chrome) or ﬁfty times (Edge),
triggering the respective baseline compilers.
(CC4) The controller then triggers the JIT inspector to ﬁnd
constants that survived blinding. It passes all constants
that are in the JavaScript code generated in (CC1) to
the JIT inspector. If the JIT inspector returns positive
matches, these are logged accordingly.
(CC5) The controller then triggers the optimization compiler
on jsfun by calling the function 2000 times and repeats
step (CC4) on the optimized code.
D. Experimental Results
After implementing DACHSHUND for Edge and Chrome,
we experimented to test the constant blinding efﬁcacy of these
two browsers. We ran DACHSHUND in a VirtualBox virtual
machine, running Windows 10 on an Intel i5-4690 CPU having
3.50 GHz and 8 GB RAM. We ran each experiment for two
hours per browser. In this time, DACHSHUND detected 124
constants in Chrome and 58 in Edge. Some of these results
contained similar JavaScript statements involving emitted con-
stants; therefore, we manually ﬁltered them to get unique cases
only, which resulted in 22 different cases in Chrome and 21
in Edge. We manually veriﬁed these cases and in all instances
found a true positive, i.e., we successfully found a non-blinded
constant. In Chrome, constants were only emitted by the
optimizing compiler, while in Edge constants were found in
both baseline and optimizing stages. The summarized outcome
of the experiments is that many JavaScript constants are
directly emitted into machine code—despite constant blinding.
In the following, we will categorize these cases into classes of
constants that bypassed the blinding process.
Experiment results from both of the browsers showed that
a major source of constants were arguments to Math functions.
Math is a built-in JavaScript object, containing basic mathe-
matical functions and constants. Immediate values passed as
an argument to Math functions (like Math.round(0x1234))
end up in the JIT-compiled code. Manual veriﬁcation showed
that the optimizing compiler of Chrome also emits constants
when calling any other functions, such as built-in functions
of JavaScript (e.g., Array.push(...)) or even user-deﬁned
ones. In assembly, these constants are emitted when argument
registers are set or when arguments are pushed on the stack.
Consequently, calling a function with more parameters (e.g.,
Math.max(X, Y)) or calling them multiple times emits more
constants.
In Edge, however, the situation is different. Manual veri-
ﬁcation showed that all the emitted constants (not only from
function calling) are coming from the same assembly instruc-
tion, namely storing the constant into a register. Moreover,
this instruction is always located at
the beginning of the
function, after the prologue, and not where the actual statement
(involving the constant) is compiled. This is likely caused by a
caching mechanism of Edge, which stores an immediate value
in an unused register to use it later in a function.
For example, consider the following JavaScript code:
function jsfun() {
return Math.trunc(0x12345678);
}
5
Chakra, Edge’s JIT engine, will compile this statement into
the following sequence of assembly instructions:
m = i ? 0x12345678 :
0x23456789
switch(j){
case 0x23232323: m++;
}
0x34343434[j]
m = j ˆ 0x45454545
globvar = 0x56565656
0 test rax,rax
1 je 4
2 mov ebx,23456789h
3 jmp 5
4 mov ebx,12345678h
0 mov rdx,[rbp+20h]
1 cmp edx,23232323h
2 jne XXX
0 mov rdx,3434343400000000h
1 ;set other parameters
2 call GetProperty
0 mov rax,[rbp+20h]
1 xor eax,45454545h
0 mov rax,1AF729D6001h
1 mov r10,5656565600000000h
2 mov [rax+0Fh],r10
; prologue
rsi,0x1000012345678 ; Emitted constant
; Other function code
...
mov
...
mov
...
call r12
...
r9, rsi ; Setting Math.trunc parameter
; Setting other parameters
; Call Math.trunc
; Other code + epilogue
As it can be seen, the constant 0x12345678 is emitted as
part of a 64-bit constant. Note that Edge uses 48-bit values for
constants. Thus, the least signiﬁcant bit of the ﬁrst two bytes
denotes the tag bit and indicates type of the encoded value,
that is an integer constant in our example. The instruction
mov rsi,XXX is the integer constant caching behavior of
Edge, which we mentioned earlier. Interestingly, Edge uses
the cached integer value not only when the constant value
itself is used, but also when other (similar) integers are used.
For example, to set an integer constant 0x12340000 in an rax
register, Edge utilizes the cached value and emits the following
code:
lea rax,[rsi-0x5678] ;set rax to 0x12340000
The difference between the cached and target value is
encoded in lea. If needed, this can be further exercised by
an attacker to emit more than one constant per function.
Summing up, Edge emits constants in both phases of
compilation (baseline and optimizing), but emits only one
constant per function, located at the beginning of the compiled
function. This does not limit the attacker, as she is able to
compile many small functions to emit multiple gadgets. In
contrast, Chrome’s JavaScript optimizer emits integer constants
as part of the compiled statement involving the constant, and
thus can be used multiple times to emit many constants in the
same function
cases
of
a
switch
that
include:
statements
In general, DACHSHUND found many more ways
survive blinding. Other non-
to embed integers
ternary operators
blinded JavaScript
(c ? 0x12345678: 0x9abcdef), return statements (return
0x12345678),
(case
0x12345678:), a bit-wise operations (i=jˆ0x12345678),
writing an integer to a global variable (glob=0x12345678), or
to an array element (arr[0]=0x12345678). Figure 2 shows
the aforementioned gadget emitting statements in Chrome
and their corresponding x86 code after compilation. This
demonstrates that popular constant blinding implementations
are far from complete, as many typical code constructs are not
touched by the compiler—not even the textbook JIT spraying
example of variable assignments.
statement
E. Proof-of-Concept Gadget Generation
As a ﬁnal step of our evaluation, we leverage the
previously-observed shortcomings in constant blinding imple-
mentations in order to create JavaScript functions that emit
meaningful gadgets into the executable memory.
6
globarr[i] = 0x67676767
0 mov [rdx+XXX],67676767h
return 0x12121212
0 mov rax,1212121200000000h
Fig. 2. Gadget emitting JavaScript statements in Chrome and their corre-
sponding disassembly after rewriting.
For demonstration purposes, we inject the same set of
gadgets that was used by Athanasakis et al. [2] to set the
argument registers for the VirtualProtect function:
ret ;
pop r8,
pop r9,
ret ;
pop rcx, ret ;
pop rdx, ret ;
pop rax, ret ;
4158 c3
4159 c3
59 c3
5a c3
58 c3
1) Chrome: In Chrome, we created the following single
JavaScript function containing the immediate constants that
correspond to the required gadgets:
function chromeGadgets() {
globar[0] = 0xc35841;
globar[1] = 0xc35941;
globar[2] =-0x3ca7a5a7;
}
As we have seen, writing an immediate constant to an array
element emits it to the JIT code after compilation. Therefore,
in chromeGadgets, we write the required constants into
globar, which is a global array declared outside the function.
Note that the order of the bytes are swapped in integer con-
stants because of the little-endian format of the underlying x86
machine. Furthermore, to also use the most signiﬁcant bit in
the last gadget, we use a negative number -0x3ca7a5a7 that
will be represented in binary as 0xc3585a59. After executing
this function multiple times,
i.e., triggering the optization,
the optimizing compiler of Chrome generates the following
sequence of instructions:
mov [rbx+0x1B], 0x00C35841 ; c7431b4158c300
mov [rbx+0x23], 0x00C35941 ; c743234159c300
mov [rbx+0x2B], 0xC3585A59 ; c7432b595a58c3
2) Edge: In Edge, given constant caching, we had to create
three separate functions to generate the required set of gadgets
(note that this is not a limitation as we are not constrained by
the maximum number of created functions):
function r8(){ Math.trunc(0xc35841); }
function r9(){ Math.trunc(0xc35941); }
function racdx(){
Math.trunc(-0x3CA7A5A7);
}
Triggering the compilation of each of these functions, i.e.,
calling them 50 times, resulted the required gadgets at the
beginning of the corresponding functions. The following is the
disassembly of the instructions emitting the gadgets:
mov rsi,0x1000000C35841; 48be4158c30000000100
mov rsi,0x1000000C35941; 48be4159c30000000100
mov rsi,0x10000C3585A59; 48be595a58c300000100
V. DEFENDING AGAINST CONSTANTS
DACHSHUND has revealed that major browsers are suscep-
tible to emitting attacker-controlled four-byte values into exe-
cutable code. Even though Chrome and Edge deploy constant
blinding to defend against gadget emission, their implemen-
tation is still not complete. While it was already known that
constant blinding implementations emit two-byte gadgets [2],
our automated DACHSHUND framework discovered that even
four-byte integer constants are emitted in certain scenarios.
There are several options to solve the aforementioned
problems. The na¨ıve and likely the most efﬁcient solution