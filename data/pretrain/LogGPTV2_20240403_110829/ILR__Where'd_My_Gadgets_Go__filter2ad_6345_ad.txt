Figure 7. Breakdown of call instructions marked as unsafe for using a randomized return address. C++’s exception handling mechanism results in a
severe reduction in return address randomization.
up a compiler-intended instruction sequence are marked as
invalid for execution. These features of ILR reduce the attack
surface for arc-injection by over two orders of magnitude.
We believe it would be very difﬁcult for an attacker to inject
even one control-ﬂow arc that achieves a meaningful result.
However, it has recently been shown that even small pro-
grams (with at least 20KB of program text) contain enough
executable bytes to successfully produce an ROP attack [25].
The basic ILR algorithm reduces the unrandomized program
text to less than 20KB for 26 of the 29 SPEC2006 bench-
marks, while ILR+ reduces the attack surface to below 20KB
for 28 of 29 benchmarks. On average, ILR+ reduces the
attack surface to just 3KB! Thus, even state-of-the-art gadget
compilers likely can not detect enough gadgets to mount an
ROP attack in an ILR+-protected program.
To more directly validate that ILR successfully random-
izes enough gadget locations to make ROP attacks infeasible,
we further examine the SPEC benchmarks. While we know
of no vulnerabilities in these benchmarks, they, like all large
pieces of software, may in fact have an error that might allow
an ROP attack. We study the feasibility of such an attack on
these large applications if an appropriate vulnerability were
to be found or seeded.
To search for gadgets in these benchmarks, we use a
tool available online, ROPgadget [20]. The tool contains a
database of gadget patterns and scans binary programs to
identify speciﬁc gadgets within an executable. For example,
one of the gadget patterns is mov e?x, e?x;ret, which
identiﬁes gadgets that move one register to another. We
experiment with two versions of the tool, version 2.3 and
3.1. Version 2.3’s database contains 60 gadget patterns, while
version 3.1 has signiﬁcantly more: 185 gadget patterns. Ver-
sion 3.1 also contains a simple gadget compiler that matches
gadgets with an attack template to form a complete attack
payload. While these payloads do not automatically exploit
a vulnerability in a program, they represent a signiﬁcant
portion of the attack. Converting an attack payload into an
actual attack is dependent on the exact vulnerability, and is
not automated. However, if ROPgadget cannot assemble the
attack payload from the attack template, this failure indicates
that the templated ROP attack could not proceed, even with a
suitable vulnerability. ROPgadget 3.1 comes with two simple
attack templates.
For the experiment, we modiﬁed both versions of ROP-
gadget to ignore randomized addresses, so that the tool can
only locate gadgets at the unrandomized code addresses.
This modiﬁcation mimics an attacker’s abilities via a remote
578
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 

Ɛ
Ŷ
Ž
ŝ
ƚ
Đ
Ƶ
ƌ
ƚ
Ɛ
Ŷ
ŝ

Ĩ
Ž

ƚ
Ŷ
Ğ
Đ
ƌ
Ğ
W
Ɛ
d


/

Ɛ
Ă
Ě
Ğ
Ŭ
ƌ
Ă
ŵ
ϭϬй
ϵй
ϴй
ϳй
ϲй
ϱй
ϰй
ϯй
Ϯй
ϭй
Ϭй
Đ
Đ
Ő
͘
ϯ
Ϭ
ϰ
Ϯ
Ɖ
ŝ
ǌ
ď
ϭ
Ϭ
ϰ
͘
Ɛ
Ğ
ǀ
Ă
ǁ
ď
Ϭ
ϭ
ϰ
͘
Ɛ
Ɛ
Ğ
ŵ
Ă
Ő
͘
ϲ
ϭ
ϰ
Ĩ
Đ
ŵ
ϵ
Ϯ
ϰ
͘
Đ
ů
ŝ
͘
ŵ
ϯ
ϯ
ϰ
Ɖ
ŵ
Ɛ
Ƶ
Ğ
ǌ
͘
ϰ
ϯ
ϰ
Ɛ
Đ
Ă
ŵ
Ž
ƌ
Ő
͘
ϱ
ϯ
ϰ
Ś
Đ
Ŷ
Ğ
ď
ů
ƌ
Ğ
Ɖ
Ϭ
Ϭ
ϰ
͘
D


Ɛ
Ƶ
ƚ
Đ
Ă
Đ
͘
ϲ
ϯ
ϰ
Ě
ϯ
Ğ
ŝ
ů
Ɛ
Ğ
ů
͘
ϳ
ϯ
ϰ
Ě
ŵ
Ă
Ŷ
ϰ
ϰ
ϰ
͘
Ŭ
ŵ
ď
Ž
Ő
͘
ϱ
ϰ
ϰ
/
/
ů
Ă
Ğ
Ě
ϳ
ϰ
ϰ
͘
ů
ǆ
Ğ
Ɖ
Ž
Ɛ
͘
Ϭ
ϱ
ϰ
Ǉ
Ă
ƌ
ǀ
Ž
Ɖ
ϯ
ϱ
ϰ
͘
ǆ
ŝ
ů
Ƶ
Đ
ů
Ă
Đ
͘
ϰ
ϱ
ϰ
ƌ
Ğ
ŵ
ŵ
Ś
ϲ
ϱ
ϰ
͘
Ő
Ŷ
Ğ
ũ
Ɛ
͘
ϴ
ϱ
ϰ

d

&
Ɛ
ŵ
Ğ
'
ϵ
ϱ
ϰ
͘
^WWhϮϬϬϲĞŶĐŚŵĂƌŬƐ
/>Z
/>Zн
ŵ
Ƶ
ƚ
Ŷ
Ă
Ƶ
Ƌ
ď
ŝ
ů
͘
Ϯ
ϲ
ϰ
ŵ
ď
ů
͘
Ϭ
ϳ
ϰ
Ž
ƚ
Ŷ
Ž
ƚ
͘
ϱ
ϲ
ϰ
Ĩ
Ğ
ƌ
ϰ
ϲ
Ϯ
Ś
ϰ
ϲ
ϰ
͘
Ɖ
Ɖ
ƚ
Ğ
Ŷ
ŵ
Ž
ϭ
ϳ
ϰ
͘
Ĩ
ƌ
͘
ǁ
ϭ
ϴ
ϰ
ƌ
Ă
ƚ
Ɛ
Ă
͘
ϯ
ϳ
ϰ
Ğ
Ő
Ă
ƌ
Ğ
ǀ
Ă
ŝ
ϯ
ǆ
Ŷ
Ś
Ɖ
Ɛ
͘
Ϯ
ϴ
ϰ
Ŭ
ŵ
ď
Đ
Ŷ
Ă
Ă
ǆ
͘
ϯ
ϴ
ϰ
ů
Figure 8.
techniques, indicating that ILR’s IBT analysis is effective.
Percent of instructions marked as possible indirect branch targets. Only 2.2% and 0.60% of instructions are marked on average for the two

Ɛ
Ŷ
Ž
ŝ
ƚ
Đ
Ƶ
ƌ
ƚ
Ɛ
Ŷ
/

Ĩ
Ž

ƚ
Ŷ
Ğ
Đ
ƌ
Ğ
W

Z
>
/

Ǉ
ď
Ě
Ğ
ǀ
Ž
D
ϭϬϬй
ϵϵй
ϵϴй
ϵϳй
ϵϲй
ϵϱй
ϵϰй
ϵϯй
ϵϮй
ϵϭй
ϵϬй
ϴϵй
ϴϴй
Đ
Đ
Ő
͘
ϯ
Ϭ
ϰ
Ϯ
Ɖ
ŝ
ǌ
ď
ϭ
Ϭ
ϰ
͘
Ɛ
Ğ
ǀ
Ă
ǁ
ď
Ϭ
ϭ
ϰ
͘
Ɛ
Ɛ
Ğ
ŵ
Ă
Ő
͘
ϲ
ϭ
ϰ
Ĩ
Đ
ŵ
ϵ
Ϯ
ϰ
͘
Đ
ů
ŝ
͘
ŵ
ϯ
ϯ
ϰ
Ɖ
ŵ
Ɛ
Ƶ
Ğ
ǌ
͘
ϰ
ϯ
ϰ
Ɛ
Đ
Ă
ŵ
Ž
ƌ
Ő
͘