[`frequency-info`{.literal}]{.term}
:   使用 `cpu power frequency-info 命令显示当前的 cpufreq`{.literal}
    ``{=html} 驱动程序和可用的 cpufreq 调控``{=html}
    器。如需更多信息，请参阅 [CPUfreq
    驱动程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#cpufreq-drivers_tuning-cpu-frequency-to-optimize-energy-consumption){.link}、[Core
    CPUfreq
    监管器和](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#core-cpufreq-governors_tuning-cpu-frequency-to-optimize-energy-consumption){.link}
    [Intel P-state CPUfreq
    调控器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#intel-p-state-cpufreq-governors_tuning-cpu-frequency-to-optimize-energy-consumption){.link}。
[`frequency-set`{.literal}]{.term}
:   以 root
    `用户身份使用 cpu power frequency-set 命令设置 cpu`{.literal}
    freq``{=html} 和 Governors。如需更多信息，请参阅 [设置
    CPUfreq
    调控器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#setting-up-cpufreq-governor_tuning-cpu-frequency-to-optimize-energy-consumption){.link}。
[`set`{.literal}]{.term}
:   以 root 用户身份使用 `cpupower set 命令来设置`{.literal}
    处理器节能策略。
    使用 `--perf-bias`{.literal} 选项，您可以在支持的 Intel
    处理器上启用软件，以确定最佳性能和节约功耗之间的平衡。分配的值范围从
    `0`{.literal} 到 `15`{.literal}，其中 `0`{.literal}
    是最佳性能，`15`{.literal}
    是最佳的电源效率。默认情况下，`--perf-bias 选项会`{.literal}
    应用到所有内核。若要仅将它应用到各个核心，可添加
    `--cpu cpulist`{.literal} 选项。
[`info`{.literal}]{.term}
:   显示与处理器电源相关的硬件配置，以及您已使用
    `cpupower set`{.literal} 命令启用的硬件配置。例如，如果您将
    `--perf-bias`{.literal} 值分配为 `5`{.literal} ：
    ``` screen
    # cpupower set --perf-bias 5
    # cpupower info
    analyzing CPU 0:
    perf-bias: 5
    ```
[`monitor`{.literal}]{.term}
:   使用 `cpupower monitor`{.literal} 命令显示空闲统计和 CPU 需求。
    ``` literallayout
    # cpupower monitor
     | Nehalem       || Mperf    ||Idle_Stats
     CPU| C3   | C6   | PC3  | PC6  || C0   | Cx   | Freq || POLL | C1   | C1E  | C3   | C6   | C7s  | C8   | C9   | C10
       0|  1.95| 55.12|  0.00|  0.00||  4.21| 95.79|  3875||  0.00|  0.68|  2.07|  3.39| 88.77|  0.00|  0.00|  0.00| 0.00
    [...]
    ```
    使用 `-l`{.literal} 选项，您可以列出系统上的所有可用监视器，并使用
    `-m`{.literal} 选项显示与特定监视器相关的信息。例如，若要监控与
    `Mperf`{.literal} 监控器相关的信息，请以 root
    `用户身份使用 cpupower monitor -m Mperf`{.literal} 命令。
:::
::: itemizedlist
**其它资源**
-   `cpupower(1)、`{.literal} `cpupower-idle-info(1)、`{.literal}
    `cpupower-idle-set(1)、`{.literal}
    `cpupower-frequency-set(1)、`{.literal}
    `cpupower-frequency-info(1)、`{.literal}
    `cpupower-set(1)、`{.literal} cpu `power-info(1)`{.literal} 和
    `cpupower-monitor(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#cpu-idle-states_tuning-cpu-frequency-to-optimize-energy-consumption}CPU 空闲状态 {.title}
:::
具有 x86 架构的 CPU 支持各种状态，如 CPU
的某些部分被取消激活或使用较低的性能设置（称为 C-states）。
使用此状态，您可以通过部分停用不使用的 CPU 来节省电源。无需配置 C
状态，这与需要调控器的 P
状态不同，并且可能设置一些设置以避免电源或性能问题。C-states 从 C0
向上编号，数值越大，代表 CPU 功能减少，更省电。给定数量的 C
状态在处理器之间大致相似，尽管处理器系列具体功能集的具体细节可能有所不同。C-states
0-3 的定义如下：
::: variablelist
[`C0`{.literal}]{.term}
:   在这种状态下，CPU 工作正常，完全不闲置。
[`c1, Halt`{.literal}]{.term}
:   在这种状态下，处理器没有执行任何指令，但通常不处于较低的电源状态。CPU
    可以在无延迟的情况下继续处理。提供 C
    状态的所有处理器需要支持此状态。Pentium 4 处理器支持名为 C1E
    的增强的 C1 状态，该状态实际上是降低功耗的状态。
[`c2, Stop-Clock`{.literal}]{.term}
:   在这种状态下，这个处理器的时钟被冻结，但它保持其寄存器和缓存的完整状态，因此在启动时钟后，它会立即开始处理。这是可选状态。
[`C3、Sleep`{.literal}]{.term}
:   在这种状态下，处理器进入睡眠状态，不需要保持其缓存最新。因此，从这个状态唤醒需要的时间比
    C2 状态多得多。这是可选状态。
:::
您可以使用以下命令查看 CPUidle 驱动程序的可用空闲状态和其他统计信息：
``` screen
$ cpupower idle-info
CPUidle governor: menu
analyzing CPU 0:
Number of idle states: 9
Available idle states: POLL C1 C1E C3 C6 C7s C8 C9 C10
[...]
```
带有\"Nehalem\"微架构的 Intel CPU 具有 C6 状态，可以将 CPU
供应减少为零，但通常将功耗降低 80% 到 90%。Red Hat Enterprise Linux 8
中的内核包括这个新的 C-state 的优化。
::: itemizedlist
**其它资源**
-   `cpupower(1)`{.literal} 和 `cpupower-idle(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#overview-of-cpufreq_tuning-cpu-frequency-to-optimize-energy-consumption}CPUfreq 概述 {.title}
:::
降低系统功耗和热输出的最有效方法是 CPUfreq，由 Red Hat Enterprise Linux
8 中的 x86 和 ARM64 架构支持。CPUfreq（也称为 CPU 速度扩展）是 Linux
内核中的基础架构，使其能够扩展 CPU 频率以节省功耗。
CPU
扩展可以根据系统负载、响应高级配置和电源接口(ACPI)事件或用户空间程序手动完成，并允许即时调整处理器的时钟速度。这使得系统能够以更低的时钟速度运行，从而节省电源。无论是更快还是较慢的时钟速度，以及何时转移调整规则，都由
CPUfreq 调控器定义。
您可以以 root
`用户身份使用 cpu power frequency-info 命令查看 cpu`{.literal}
freq``{=html} 信息。
::: section
::: titlepage
## []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#cpufreq-drivers_tuning-cpu-frequency-to-optimize-energy-consumption}CPUfreq 驱动程序 {.title}
:::
使用 `cpupower frequency-info --driver`{.literal} 命令作为 root
命令，您可以查看当前的 CPUfreq 驱动程序。
以下是可用于 CPUfreq 的两个驱动程序：
::: variablelist
[`ACPI CPUfreq`{.literal}]{.term}
:   高级配置和电源接口(ACPI)CPUfreq 驱动程序是通过 ACPI 控制特定 CPU
    频率的内核驱动程序，这可确保内核与硬件之间的通信。
[`Intel P-state`{.literal}]{.term}
:   在 Red Hat Enterprise Linux 8 中支持 Intel P-state
    驱动程序。驱动程序提供了一个接口，用于根据基于 Intel Xeon E
    系列架构或更新的架构的处理器控制 P 状态选择。
    目前，Intel P-state 默认用于支持的 CPU。您可以通过在内核命令行中添加
    `intel_pstate=disable`{.literal} 命令，切换到使用 ACPI CPUfreq。
    Intel P-state 实施 `setpolicy（）`{.literal} 回调。驱动程序根据
    `cpufreq`{.literal} 内核请求的策略决定使用
    P-state。如果处理器能够在内部选择其下一个 P
    状态，驱动程序会将这一责任卸载给处理器。如果没有，驱动程序会实施算法来选择下一个
    P 状态。
    Intel P-state 提供自己的 `sysfs`{.literal} 文件来控制 P
    状态的选择。这些文件位于
    `/sys/devices/system/cpu/intel_pstate/`{.literal}
    目录中。对文件进行的任何更改都适用于所有 CPU。
    该目录包含用于设置 P-state 参数的以下文件：
    ::: itemizedlist
    -   `max_perf_pct`{.literal} 限制驱动程序以可用性能百分比表示的最大
        P 状态。可以通过 `no_turbo`{.literal} 设置降低可用的 P
        状态性能。
    -   `min_perf_pct`{.literal} 限制驱动程序请求的最小 P 状态，以最大
        `no-turbo`{.literal} 性能级别的百分比表示。
    -   `no_turbo`{.literal} 限制驱动程序选择 turbo 频率范围以下的 P
        状态。
    -   `turbo_pct`{.literal} 显示处于 turbo
        范围内的硬件支持的总性能百分比。此数量与是否 `禁用`{.literal}
        波形符无关。
    -   `num_pstates`{.literal} 显示硬件支持的 P
        状态数。此数量与是否禁用波形符无关。
    :::
:::
::: itemizedlist
**其它资源**
-   `cpupower-frequency-info(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#core-cpufreq-governors_tuning-cpu-frequency-to-optimize-energy-consumption}核心 CPUfreq 调控器 {.title}
:::
CPUfreq 调控器定义系统 CPU 的电源特征，进而影响 CPU
性能。每个调控员在工作负载方面都有自己独特的行为、用途和适用性。以 root
`用户身份使用 cpupower frequency-info --governor`{.literal}
命令，您可以查看可用的 CPUfreq 调控器。
Red Hat Enterprise Linux 8 包含多个核心 CPUfreq 调控器：
::: variablelist
[`cpufreq_performance`{.literal}]{.term}
:   它强制 CPU
    使用尽可能最高的时钟频率。这个频率是静态设置的，不会改变。因此，该特定调控器不提供节能优势。它仅适用于重度工作负载的小时数，且仅在
    CPU 中很少或从不闲置的时候。
[`cpufreq_powersave`{.literal}]{.term}
:   它强制 CPU
    使用尽可能低的时钟频率。这个频率是静态设置的，不会改变。该调控器提供最大功耗节省，但以最低
    CPU 性能为代价。不过，\"节能\"这一术语有时会被欺骗，因为完整负载中的
    CPU 速度较慢，消耗的电源比未加载的快速 CPU 更多。因此，虽然建议将
    CPU 设置为在预期的低活动期间使用 `节能调控`{.literal}
    器，但该时间期间任何意外的高负载都可能导致系统实际消耗更多功率。Powersave
    调控器是 CPU
    的速度限制器，而不是节能器。在过热过热可能成为问题的系统和环境中，此方法最为有用。
[`cpufreq_ondemand`{.literal}]{.term}
:   这是一个动态调控器，您可以使用它使 CPU
    在系统负载较高时达到最大时钟频率，也是系统空闲时的最小时钟频率。虽然这允许系统根据系统负载相应地调整功耗，但它会牺牲频率切换之间的延迟。因此，如果系统太频繁地在空闲和繁重工作负载之间进行切换，延迟可能会偏差
    `按需`{.literal}
    调控器提供的任何性能或节能优势。对于大多数系统而言，`按需`{.literal}
    调控器可在热能、功耗、性能和可管理性之间提供最佳折衷。当系统仅在一天的特定时间忙碌时，`按需调控器`{.literal}
    根据负载自动在最大和最小频率之间进行切换，而无需进一步干预。
[`cpufreq_userspace`{.literal}]{.term}
:   它允许用户空间程序或以 root
    身份运行的任何进程设置频率。在所有调控器中，`用户空间`{.literal}
    是最可自定义的，根据配置方式，它可以提供系统性能和消耗之间的最佳平衡。
[`cpufreq_conservative`{.literal}]{.term}
:   与 `ondemand`{.literal} 调控器类似，`保守的`{.literal}
    调控器也会根据使用情况调整时钟频率。然而，`保守的`{.literal}
    调控器的切换更加循序渐进。这意味着 `保守的调控`{.literal}
    器会调整为它认为最适合负载的时钟频率，而不是简单地在最大和最小值之间进行选择。尽管这可能会显著节省功耗，但它的延迟比
    `按需`{.literal} 管理者要长。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以使用 `cron 作业`{.literal}
启用调控器。这样，您可以在一天的特定时间自动设置特定的调控器。因此，您可以在空闲时间指定低频率调控器，例如在工作时间后，并在繁重工作负载的几小时内返回到较高频率调控器。
:::
有关如何启用特定调控器的步骤，请参阅 [设置 CPUfreq
调控器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#setting-up-cpufreq-governor_tuning-cpu-frequency-to-optimize-energy-consumption){.link}。
:::
::: section
::: titlepage
## []{#tuning-cpu-frequency-to-optimize-energy-consumption_monitoring-and-managing-system-status-and-performance.html#intel-p-state-cpufreq-governors_tuning-cpu-frequency-to-optimize-energy-consumption}Intel P-state CPUfreq 调控器 {.title}
:::
默认情况下，Intel P-state 驱动程序在活动模式下运行，硬件
p-state(HWP)是否支持 HWP。
以 root `用户身份使用 cpupower frequency-info --governor`{.literal}
命令，您可以查看可用的 CPUfreq 调控器。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`性能和`{.literal} `powersave`{.literal} Intel P-state CPUfreq
调控器的功能与同名的核心 CPUfreq 调控器不同。
:::
Intel P-state 驱动程序可在以下三种不同模式下操作：
::: variablelist
[`具有硬件管理的 P 状态的活跃模式`{.literal}]{.term}
:   使用 HWP 的主动模式时，Intel P-state 驱动程序指示 CPU 执行 P-state
    选择。驱动程序可以提供频率提示。不过，最终选择取决于 CPU
    内部逻辑。在 HWP 的活跃模式中，Intel P-state 驱动程序提供两种 P
    状态选择算法：
    ::: itemizedlist
    -   `性能`{.literal} ：使用 `性能`{.literal}
        调控器时，驱动程序指示内部 CPU 逻辑以性能为导向。允许的 P
        状态的范围仅限于驱动程序被允许使用的范围的上限。
    -   `节能：`{.literal} 使用 `powersave`{.literal}
        调控器时，驱动程序指示内部 CPU 逻辑以节能为导向。
    :::
[`没有硬件管理的 P 状态的活跃模式`{.literal}]{.term}
:   当使用没有 HWP 的活跃模式时，Intel P-state 驱动程序将提供两种 P
    状态选择算法：
    ::: itemizedlist
    -   `性能`{.literal} ：使用 `性能`{.literal}
        调控器时，驱动程序选择允许其使用的最大 P 状态。
    -   `powersave`{.literal}: 使用 `powersave`{.literal}
        调控器时，驱动程序选择与当前 CPU 使用率成比例的 P 状态。其行为与
        `ondemand`{.literal} CPUfreq 内核调控器类似。
    :::
[`被动模式`{.literal}]{.term}
:   使用 `被动`{.literal} 模式时，Intel P 状态驱动程序的功能与传统
    CPUfreq 扩展驱动程序相同。可以使用所有可用的通用 CPUFreq
    核心调控器。
:::
:::