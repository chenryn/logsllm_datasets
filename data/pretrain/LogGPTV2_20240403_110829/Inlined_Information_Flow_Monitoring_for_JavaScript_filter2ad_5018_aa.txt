# Inlined Information Flow Monitoring for JavaScript

**Authors:**
- Andrey Chudnov
- David A. Naumann

**Affiliations:**
- Stevens Institute of Technology, Hoboken, NJ 07030, USA
- Email: [PI:EMAIL]

## Abstract
Existing security mechanisms for web applications, such as the "same-origin policy," are insufficient for ensuring confidentiality and integrity in applications that handle sensitive information. The trend towards "mashups" in web applications, which integrate JavaScript code from multiple sources, can undermine these security measures. Researchers are exploring dynamic information flow control (IFC) for JavaScript, but significant challenges remain in achieving strong IFC without excessive performance overhead or impractical browser modifications. This paper presents an inlined IFC monitor for ECMAScript 5 with web support, using the no-sensitive-upgrade (NSU) technique. We evaluate our approach using synthetic mashups and performance benchmarks, providing a basis for large-scale experiments to assess the feasibility of NSU and inlined monitoring.

## 1. Introduction
Web applications, particularly those that integrate code from multiple providers (e.g., mashups), raise numerous security concerns. These applications often manipulate sensitive information, including personal and mission-critical data, and must meet security requirements such as confidentiality and integrity. Information flow (IF) requirements pose challenges in both mathematical modeling and policy specification. Policy enforcement, known as information flow control (IFC), is the focus of this paper. We assume that policies are specified using security labels attached to inputs and outputs, interpreted as allowed dependencies, formalized by the standard notion of termination-insensitive non-interference (TINI).

Most client-side application code is written in JavaScript (JS) due to its flexible dynamic features, which complicate achieving security goals for mashups. JS engines are highly optimized for performance, leading some researchers to advocate for inlined monitoring for IFC. The primary contribution of this paper is an inlined IFC monitor that enforces non-interference for JS applications. We present the main design decisions and rationale, technical highlights, and a survey of state-of-the-art alternatives. The tool is evaluated using synthetic case studies and performance benchmarks.

### On IFC
Current browsers and platforms provide isolation mechanisms and access controls. Pure isolation conflicts with the integration of code from multiple providers, while access controls, though more nuanced, are safety properties rather than hyperproperties. TINI, which specifies information flow using pairs of executions, has been shown to protect against common web attacks. One approach to IFC is dynamic taint tracking, where data is tagged with security labels that propagate during execution. While taint tracking is useful for catching bugs and malware, it does not enforce TINI because it fails to detect implicit flows. In this paper, IF and IFC refer to TINI, and we focus on fine-grained IFC.

### Goals and Attack Model for Dynamic Enforcement
The conventional approach to dynamic IFC involves tag tracking, where the execution is instrumented to observe potential flows. Secure multi-execution (SME) achieves non-interference through simultaneous concrete executions at different security levels. For monitored programs, three primary correctness requirements are soundness with respect to TINI, transparency, and permissiveness. Transparency ensures that if no violation is detected, the outputs match the original program's behavior, and all outputs occur. If a violation is detected, it is reported, and outputs may be suppressed or altered to maintain policy compliance.

Our attack model assumes the attacker:
- Has no special network privileges.
- Can introduce arbitrary JS code into the web page.
- Cannot subvert or compromise the browser.
- Knows the program and the inliner, and may attempt to disable or subvert the monitor.
- Has limited timing information and cannot observe power consumption.

### Hybrid and NSU Monitoring
Monitoring can achieve high precision through flow sensitivity, allowing the security level of a storage location to change during execution. Soundness can be achieved through hybrid monitoring, which uses static analysis of possible heap locations updated in branches not taken. However, implementing sound static analysis for JS, especially for code using `eval`, is challenging. An alternative is no-sensitive-upgrade (NSU), which disallows raising the level of a location due to branch conditions. NSU can be restrictive, but this can be mitigated with explicit upgrade annotations.

### Inlining and Goals of This Project
Most IFC monitoring implementations either modify a JS interpreter directly or inject a custom interpreter with a plug-in. However, modifying JS engines is impractical due to the rapid development of highly optimized engines. Inlining a monitor into the source program offers portability across JS engines and the potential to benefit from JIT compilation. Our inlined monitor is guided by the following goals:
1. **Soundness and Transparency:** Ensure that any policy violation is detected, and the program's behavior is preserved.
2. **Tamper-Resistance:** Protect the monitor operations and label storage from tampering.
3. **Simplicity:** Simplify the inlining process and monitored program to facilitate assurance.
4. **Modularity:** Allow for quick and easy modifications for experimentation.
5. **JIT-Friendliness:** Ensure the transformed code is amenable to efficient JIT compilation.

In summary, this paper presents an inlined IFC monitor for JavaScript, using the NSU technique, and evaluates its effectiveness through synthetic mashups and performance benchmarks. This work provides a foundation for large-scale experiments to assess the feasibility of NSU and inlined monitoring.