### 文档概述

本文件是权威的文档说明。如果发现其中内容过时且导致重大困惑或投诉，我们将停止分发该手册页。另一种选择是更新手册页，但由于维护GNU CC的其余工作已经很繁重，我们没有时间去同步更新Info文件和手册页。因此，手册页可能会变得过时，并且不应占用我们处理其他事务的时间。GNU项目认为手册页只是辅助性资料。

对于完整和最新的文档，请参阅Info文件（版本2.0）。两者均基于Texinfo源文件`gcc.texinfo`生成。如果您想了解更多关于GNU C编译器的信息，可以尝试使用info系统：

```bash
$ info gcc
```

### 使用Info系统阅读文档

在Info界面中，您可以使用空格键翻至下一页，回车键进入下一行，“q”键退出。Info页面提供了一个详细的菜单选项列表，使您能够轻松地浏览整个文档。Info系统的布局使得即使面对数百页的文档也能轻松导航。此外，Info本身也有一个帮助页面，通过按“Ctrl-H”组合键即可访问，其中包含了如何使用Info系统的教程。许多Linux发行版都自带Info程序，也可以安装到其他UNIX系统上。

### 程序开发环境基础知识

#### 1.8.1 程序存放位置

程序通常存放在特定的目录中。用于日常操作及程序开发的程序位于`/usr/bin`目录下；而针对特定主机或本地网络新增的程序则可能存放在`/usr/local/bin`目录中。这种结构便于系统升级，因为只有`/usr/local`目录下的内容需要保留。建议开发者按照`/usr/local`目录结构来运行和访问必要的文件。某些软件包如X Window系统可能有其独立的子目录结构，例如`/usr/X11`或`/usr/X11R6`。

#### 1.8.2 头文件存放位置

C语言及其他编程语言依赖于头文件来定义常量并声明系统和库函数调用。这些头文件主要保存在`/usr/include`及其子目录中。特定于所运行的UNIX或Linux版本的头文件一般可以在`/usr/include/sys`或`/usr/include/linux`目录下找到。当调用C语言编译器时，可以通过`-I`标志指定非标准位置的头文件路径。例如：

```bash
gcc -I /usr/openwin/include fred.c
```

这将指示编译器同时在`/usr/openwin/include`以及标准位置查找头文件。

#### 1.8.3 库文件存放位置

库文件是一组预编译的可重用函数集合。它们通常存储在`/lib`或`/usr/lib`目录下。在链接过程中，必须明确告诉编译器要查找哪些库文件。例如：

```bash
cc -o fred fred.c /usr/lib/libm.a
```

或者更简洁地使用简写形式：

```bash
cc -o fred fred.c -lm
```

这不仅指定了数学库，还允许编译器自动选择共享库（如果存在）。

### 创建和使用自定义库

以下步骤演示了如何创建一个简单的库并将其用于程序中：

1. **编写函数**：首先定义两个简单的函数`fred`和`bill`。
   ```c
   void fred(int arg) {
       printf("fred: you passed %d\n", arg);
   }

   void bill(char *arg) {
       printf("bill: you passed %s\n", arg);
   }
   ```

2. **编译为对象文件**：使用`-c`选项分别编译这两个函数，生成目标文件。
   ```bash
   $ cc -c fred.c
   $ cc -c bill.c
   ```

3. **创建库文件**：使用`ar`命令创建静态库。
   ```bash
   $ ar crv libfoo.a fred.o bill.o
   ```
   在某些系统上，还需使用`ranlib`来创建索引：
   ```bash
   $ ranlib libfoo.a
   ```

4. **使用库文件**：在编译程序时，指定库文件的位置和名称。
   ```bash
   $ cc -o program program.c -L. -lfoo
   ```

这样就完成了从编写函数到创建库再到使用的全过程。