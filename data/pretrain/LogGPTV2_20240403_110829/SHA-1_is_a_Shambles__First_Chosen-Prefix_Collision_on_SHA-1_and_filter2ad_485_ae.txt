### Attack Description

The attack involves creating two public keys of different sizes, such that the remaining fields to be signed are misaligned. This misalignment allows us to hide the UserID of key A in another field of key B. According to RFC 4880, the signature packet is protected by a length value at both the beginning and the end. Therefore, the same signature packet must be used for both key A and key B, preventing the insertion of additional data into the hashed subpacket. Consequently, we can only manipulate the UserID and/or user attribute packets.

A user attribute packet containing a JPEG image provides sufficient flexibility to create colliding certificates. This is because typical JPEG readers ignore any bytes after the End of Image marker (FF D9), allowing us to insert arbitrary data into the certificate.

### Key Construction

We construct keys A and B as follows:
- **Key A** contains an 8192-bit RSA public key and a UserID field corresponding to Alice.
- **Key B** contains a 6144-bit RSA public key, the UserID of Bob, and a JPEG image.

When Bob receives a certification signature for his key, the signer will sign two certificates: one with Bob's public key and UserID, and another with the public key and the image. The public keys A and B, along with the image, are crafted to generate a collision between the certificate with key A and Alice's UserID, and the certificate with key B and the image.

### Identity Certificate Content

Figure 8 shows a template of the values included in the identity certificate. These values are hashed when signing a key, and we aim to make the two hashes collide. In this example:
- The UserID field of key A contains "Alice".
- The image in key B is a valid JPEG image padded with junk data after the End of Image marker. The actual JPEG file is 181 bytes long (from FF D8 to FF D9) and is padded with 81 bytes, making the file 262 bytes long. The padding includes 46 bytes from the end of the modulus of key A, 5 bytes from the exponent of key A, and 30 bytes from Alice's UserID.

### Symbol Definitions

In Figure 8, the following symbols are used:
- **01**: Bytes with a fixed value, determined by specifications or chosen in advance by the attacker (e.g., length of fields, UserID, user attribute).
- **??**: Bytes determined by the chosen-prefix collision algorithm (messages M and M' to generate a collision).
- **!!**: Bytes selected after finding the collision to generate an RSA modulus with known prime factors.
- **..**: Bytes copied from the other certificate.
- **\*\***: Time-stamps chosen by the attacker.
- **$$**: Time-stamp chosen by the signer.
- **Underlined values**: Packet headers (type and length).

### Attack Procedure

To carry out the attack, follow these steps:
1. **Build a Chosen-Prefix Collision**: Generate a collision with prefixes "99 04 0D 04 ** ** ** ** 01 20 00" and "99 03 0D 04 ** ** ** ** 01 18 00", filling the ** with two arbitrary time-stamps. The collision must have at most 10 near-collision blocks. This determines the ?? bytes of the keys.
2. **Choose a Tiny JPEG Image**: Select a small JPEG image for key B and an arbitrary UserID for key A.
3. **Select Modulus Bytes in B**: Choose !! bytes in B to obtain a modulus with known factors.
4. **Select Modulus Bytes in A**: Choose !! bytes in A to obtain a modulus with known factors.
5. **Generate Key B**: Create key B with the modulus and the padded JPEG. Request a signature for the key.
6. **Copy the Signature**: Transfer the signature to key A.

Note that the chosen-prefix collision is computed before selecting the UserIDs and images for the attack. A single chosen-prefix collision can be reused to target multiple victims, unlike attacks on X.509 certificates, where the identifier is hashed before the public key.

### Modulus Construction

To build the modulus (steps 3 and 4 above), we use a strategy similar to previous works [25, 27]. Specifically, the high-order bits are fixed by previous steps, and the low-order bits can be chosen freely. We need to find a modulus in the interval [A, B] with a known factorization. We select a random prime P (in the order of B - A) and compute Q = ⌊B/P⌋. If Q is a prime, we use P * Q as the modulus, ensuring A ≤ P * Q ≤ B when P ≤ B - A + 1. This process takes a few minutes in practice.

### Example Keys

Example keys generated using this procedure can be downloaded from:
- **Key A**: [https://SHA-mbles.github.io/alice.asc](https://SHA-mbles.github.io/alice.asc)
- **Key B**: [https://SHA-mbles.github.io/bob.asc](https://SHA-mbles.github.io/bob.asc)

These keys include the same signature and can be examined using `pgpdump -i`.

### Alternative Attack Variant

An alternative attack variant involves key B containing a short public key followed by a JPEG image. Both the public key and the image are considered as the prefix, and the chosen-prefix collision blocks are inserted into the image (after the EOI marker). This variant leaves less space for the collision blocks but makes key A less suspicious, as it does not need to contain a valid JPEG file inside the modulus. However, this variant requires computing a new chosen-prefix collision for each key B.

### Impact

As explained in Section 7.1, the "classic" branch of GnuPG (v1.4) uses SHA-1 by default for identity certifications, and there are still many keys signed with SHA-1. Before our attack was disclosed, SHA-1 signatures were also accepted by the "modern" branch of GnuPG (v2.2), making the attack practical.

Additionally, a single chosen-prefix collision can be reused to attack multiple victims, reducing the cost of the attack. Given our cost estimation of around US$ 50k, this is within reach of strong adversaries.

### SHA-1 Usage and Disclosure

SHA-1 is still used in various security applications, including secure channel protocols (TLS, SSH), PGP identity certifications, and the GIT versioning system. We expect there are also numerous proprietary systems using SHA-1, though obtaining accurate data is challenging.

Collisions and chosen-prefix collisions do not threaten all usages (e.g., HMAC-SHA-1 seems relatively safe), but several settings are directly affected:
- **PGP Identities**: Can be impersonated if trusted third parties sign identity certificates with SHA-1.
- **X.509 Certificates**: Could be compromised if CAs issue SHA-1 certificates with predictable serial numbers.
- **TLS and SSH Connections**: Using SHA-1 signatures to authenticate the handshake could be attacked with the SLOTH attack if the chosen-prefix collision can be generated quickly.

We recommend deprecating SHA-1 everywhere, even in the absence of direct evidence of exploitation. SHA-1 has been broken regarding collision resistance for 15 years, and better alternatives (SHA-2, SHA-3) are available and well-studied.

### Responsible Disclosure

We have attempted to contact the authors of affected software before announcing this attack, but due to limited resources, not everyone was notified. More up-to-date information is available on the attack website: [https://sha-mbles.github.io](https://sha-mbles.github.io).

#### SHA-1 Usage in GnuPG

There are currently two supported branches of GnuPG:
- **GnuPGv1**: The "legacy" branch, which is no longer recommended.
- **GnuPGv2**: The "modern" branch, first released in 2006.

SHA-1 is the default algorithm for identity certification in GnuPGv1. After disclosing our results, SHA-1 signatures have been deprecated in the GnuPGv2 branch (commit edc36f5, CVE-2019-14855).

#### Web of Trust

The original trust model of PGP is the Web of Trust. A scan of the PGP Web of Trust shows that about 1% of identity certifications issued in 2019 use SHA-1, likely due to the use of GnuPGv1 with default settings.

#### CAcert

CAcert (http://cacert.org/) is one of the main CAs for PGP keys and still uses SHA-1 to sign user keys. They acknowledged the issue and are planning to switch to a secure hash function for key certification.

#### SHA-1 Usage in X.509 Certificates

The CA/Browser Forum decided to sunset SHA-1 in October 2014, and its members are not supposed to issue SHA-1 certificates after 2016. Modern browsers now reject SHA-1 certificates.