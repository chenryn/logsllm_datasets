:::
::: para
成组守护进程 `teamd`{.systemitem} 会向链接远端的地址发送 ARP
REQUEST，以确定该链接是否处于连接状态。这个方法与
[**arping**]{.application} 程序的功能相同，但不会使用该工具程序。
:::
::: para
准备一个包含 JSON 格式新配置的文件，类似如下：
``` screen
{
       "device": "team0",
       "runner": {"name": "activebackup"},
       "link_watch":{
           "name": "arp_ping",
           "interval": 100,
           "missed_max": 30,
           "source_host": "192.168.23.2",
           "target_host": "192.168.23.1"
       },
         "ports": {
             "em1": {
               "prio": -10,
               "sticky": true
             },
             "em2": {
               "prio": 100
             }
         }
}
```
这个配置使用 [**arp_ping**]{.application}
作为链接监视器。`missed_max`{.option} 选项是最多可允许的丢失回复数（比如
ARP 回复）。可与 `interval`{.option}
选项一同使用，以决定将链接报告为断开前的总时间长度。
:::
::: para
要为成组端口 [em2]{.interface} 从包含 JSON
配置的文件中载入新配置，请作为 `root`{.systemitem} 运行以下命令：
``` screen
~]# port config update em2 JSON-config-file
```
注：会覆盖旧的配置，同时会将省略的选项重置为默认值。有关成组守护进程控制工具命令示例，请查看
`teamdctl(8)`{.filename} man page。
:::
:::
::: section
::: titlepage
### [⁠]{#ch-Configure_Network_Teaming.html#sec-Configure_IPv6_NA_NS_for_Link-state_Monitoring}5.12.7.3. 为链接状态监控配置 IPv6 NA/NS {.title}
:::
::: para
``` screen
{
  "device": "team0",
    "runner": {"name": "activebackup"},
    "link_watch": {
    "name": "nsna_ping",
    "interval": 200,
    "missed_max": 15,
    "target_host": "fe80::210:18ff:feaa:bbcc"
    },
      "ports": {
        "em1": {
          "prio": -10,
          "sticky": true
        },
        "em2": {
          "prio": 100
        }
      }
}
```
:::
::: para
要配置发送 NS/NA 数据包的间隔，请添加或编辑以下内容：
``` screen
"link_watch": {
    "name": "nsna_ping",
    "interval": 200
}
```
该数值为正数（单位：毫秒）。可与 `missed_max`{.option}
选项一同使用，以决定将链接状态报告为断开前的总时间长度。
:::
::: para
要配置将链接状态报告为断开前最多可丢失的 NS/NA
数据包数，请添加或编辑以下内容：
``` screen
"link_watch": {
    "name": "nsna_ping",
    "missed_max": 15
}
```
最多可丢失的 NS/NA
回复数。如果超过这个数值，则会将该链接状态报告为断开。`missed_max`{.option}
选项是允许丢失回复（比如 ARP 回复）的最大数值。它可与
`interval`{.option} 选项一同使用，以决定报告链接断开前的总时间长度。
:::
::: para
要配置解析为 `IPv6`{.systemitem} 地址（即 NS/NA
数据包的目标地址）的主机名，请添加或编辑以下内容：
``` screen
"link_watch": {
    "name": "nsna_ping",
    "target_host": "MyStorage"
}
```
["[target_host]{.quote}"]{.quote} 选项包含要转换为 `IPv6`{.systemitem}
地址的主机名，会将该地址作为 NS/NA
数据包的目标地址使用。可在主机名中使用 `IPv6`{.systemitem} 地址。
:::
::: para
详情请查看 `teamd.conf(5)`{.filename} man page。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_Network_Teaming.html#sec-Configure_Port_Selection_Override}5.12.8. 配置端口选择覆盖 {.title}
:::
::: para
该物理端口传输的帧一般由成组驱动程序内核部分选择，而不是由用户或系统管理员决定。输出端口由所选成组模式（`teamd`{.systemitem}
运行程序）策略选择。但在实现较为复杂的策略时，偶尔将某些类型的传出流量指向某些物理接口有帮助。默认情况下，成组驱动程序可识别多队列，并在启动该驱动程序时创建
16 个队列。如果需要更多或较少的队列，可在创建成组驱动程序实例时，使用
Netlink 属性 `tx_queues`{.command} 更改这个数值。
:::
::: para
可使用端口配置选项 `queue_id`{.option} 配置端口的队列 ID，如下：
``` screen
{
  "queue_id": 3
}
```
这些队列 ID 可与 [**tc**]{.application}
工具程序一同使用，以便配置多队列原则和过滤器，倾向于将某些流量传送到某些端口设备中。流入：如果使用上述配置，并要强制所有绑定在
`192.168.1.100`{.systemitem} 的流量使用成组中的 [eth1]{.interface}
作为输出设备，则请作为 `root`{.systemitem} 用户运行以下格式的命令：
``` screen
~]# tc qdisc add dev team0 handle 1 root multiq
~]# tc filter add dev team0 protocol ip parent 1: prio 1 u32 match ip dst \
  192.168.1.100 action skbedit queue_mapping 3
```
这个机制覆盖运行程序选择逻辑，以便将流量绑定到具体端口，该机制适用于所有运行程序。
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_Network_Teaming.html#sec-Configure_BPF-based_Tx_Port_Selectors_for_Hash_Computation_Algorithm}5.12.9. 配置基于 BPF 的 Tx 端口选择程序 {.title}
:::
::: para
loadbalance 和 LACP
运行程序使用数据包哈希为网络流量排序。这个哈希计算机制是基于*伯克利数据包过滤器*（``{=html}BPF``{=html}）代码。BPF
代码是用来生成哈希，而不是决定传出数据包的策略。哈希长度为 8 字节，有
256
种变体。就是说很多不同的*套接字缓冲*（``{=html}SKB``{=html}）可有相同的哈希，并因此将流量传递给同一链接。使用短哈希是将流量分入不同
stream
的快速方法，以便在多个链接间取得平衡负载。在静止模式中，只使用哈希决定应该向那个端口发送流量。在活动模式中，运行程序将继续创新将哈希分配给不同的端口，以达到最佳平衡状态。
:::
::: para
可在数据包 Tx 哈希计算中使用以下碎片类型或字符串：
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `eth`{.option} --- 使用源和目标 MAC 地址。
    :::
-   ::: para
    `vlan`{.option} --- 使用 VLAN ID。
    :::
-   ::: para
    `ipv4`{.option} --- 使用源和目标 `IPv4`{.systemitem} 地址。
    :::
-   ::: para
    `ipv6`{.option} --- 使用源和目标 `IPv6`{.systemitem} 地址。
    :::
-   ::: para
    `ip`{.option} --- 使用源和目标 `IPv4`{.systemitem} 和
    `IPv6`{.systemitem} 地址。
    :::
-   ::: para
    `l3`{.option} --- 使用源和目标 `IPv4`{.systemitem} 和
    `IPv6`{.systemitem} 地址。
    :::
-   ::: para
    `tcp`{.option} --- 使用源和目标 `TCP`{.systemitem} 端口。
    :::
-   ::: para
    `udp`{.option} --- 使用源和目标 `UDP`{.systemitem} 端口。
    :::
-   ::: para
    `sctp`{.option} --- 使用源和目标 `SCTP`{.systemitem} 端口。
    :::
-   ::: para
    `l4`{.option} --- 使用源和目标
    `TCP`{.systemitem}、`UDP`{.systemitem} 和 `SCTP`{.systemitem} 端口。
    :::
:::
:::
::: para
可通过在负载平衡运行程序中添加如下格式的一行使用这些字符串：
``` synopsis
"tx_hash": ["eth", "ipv4", "ipv6"]
```
。示例请参考 [第 5.12.5 节 "配置 loadbalance
运行程序"](#ch-Configure_Network_Teaming.html#sec-Configure_the_loadbalance_Runner){.xref}。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Creating_a_Network_Team_Using_a_GUI}5.13. 使用 GUI 创建网络成组 {.title}
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_Network_Teaming.html#sec-Establishing_a_Team_Connection}5.13.1. 建立成组连接 {.title}
:::
::: para
可使用 GNOME [**control-center**]{.application} 程序让
[**NetworkManager**]{.application} 使用两个或更多有线或 InfiniBand
链接创建成组。不需要首先创建要成组的链接。可在配置成组的过程中配置这些连接。必须有可用的
MAC 地址方可完成配置过程。
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#ch-Configure_Network_Teaming.html#procedure-Adding_a_New_Team_Connection}
**过程 5.1. 添加新成组连接**
::: para
按照以下步骤操作添加新的成组连接。
:::
1.  ::: para
    按 [**Super**]{.keycap} 键进入活动概述，输入
    `control network`{.command}，并按 [**Enter**]{.keycap}
    键。此时会显示 [**Network**]{.application} 设置工具。[第 2.5 节 "在
    GNOME 图形用户界面中使用
    NetworkManager"](#ch-Configure_IP_Networking.html#sec-Using_NetworkManager_with_the_GNOME_Graphical_User_Interface){.xref}
    中有关于这个步骤的详细论述。
    :::
2.  ::: para
    点击加号打开选择列表。选择 [**成组**]{.guilabel}。此时会出现
    [**编辑成组连接 *1***]{.guilabel} 窗口。
    :::
    ::: figure
    [⁠]{#ch-Configure_Network_Teaming.html#exam-Editing_Team}
    ::: figure-contents
    ::: mediaobject
    [⁠]{#ch-Configure_Network_Teaming.html#mediaobj-Network_Configuration-NM-Teaming-Edit_Team}![NetworkManager
    图形用户界面的添加菜单](images/Network_Configuration-NM-Teaming-Edit_Team.png)
    :::
    :::
    **图 5.6. NetworkManager 图形用户界面的添加菜单**
    :::
3.  ::: para
    在 [**成组**]{.guilabel} 标签中点击
    [**添加**]{.guibutton}按钮，并选择要在成组连接中使用的接口类型。点击
    [**创建**]{.guibutton}
    按钮。注：只在创建第一个端口时会显示选择端口类型对话框，之后将会自动在所有端口中使用同样的类型。
    :::
4.  ::: para
    此时会出现 [**编辑 team0 端口 1**]{.guilabel}
    窗口。填写要在成组中添加的第一个接口地址。
    :::
    ::: figure
    [⁠]{#ch-Configure_Network_Teaming.html#exam-NM-Teaming-Add_Connection}
    ::: figure-contents
    ::: mediaobject
    [⁠]{#ch-Configure_Network_Teaming.html#mediaobj-Network_Configuration-NM-Teaming-Add_Connection}![NetworkManager
    图形用户界面的添加从属连接菜单](images/Network_Configuration-NM-Teaming-Add_Connection.png)
    :::
    :::
    **图 5.7. NetworkManager 图形用户界面的添加从属连接菜单**
    :::
5.  ::: para
    如果要应用自定义端口设置，请点击 [**成组端口**]{.guilabel}
    标签，并输入 JSON 配置，或使用文件导入该配置。
    :::
6.  ::: para
    点击 [**保存**]{.guibutton} 按钮。
    :::
7.  ::: para
    此时会在 [**成组连接**]{.guilabel} 窗口中出现成组的端口。点击
    [**添加**]{.guibutton} 按钮添加未来的端口连接。
    :::
8.  ::: para
    检查并确认设置，然后点击 [**保存**]{.guilabel} 按钮。
    :::
9.  ::: para
    参考下面的 [第 5.13.1.1 节
    "配置成组标签"](#ch-Configure_Network_Teaming.html#sec-Configuring_the_Team_Tab){.xref}
    部分，编辑具体成组设置。
    :::
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#ch-Configure_Network_Teaming.html#procedure-Editing_an_Existing_Team_Connection}
**过程 5.2. 编辑现有成组链接**
::: para
按照以下步骤操作编辑现有成组连接。
:::
1.  ::: para
    按 [**Super**]{.keycap} 键进入活动概述页面，输入
    `control network`{.command}，然后按 [**Enter**]{.keycap}
    键。此时会出现 [**Network**]{.application} 设置工具。
    :::