            owner = msg.sender;
        }
        function () {
            if (delegate.delegatecall(bytes4(keccak256("setOwner()")))) {
                this;
            }
        }
    }
这个攻击能成立的前提条件是入口方法是 public 的，代理合约之间的方法可以互相访问。
**攻击步骤**
1.account A部署Delegate。Delegate合约有构造函数，参数是合约所有者的地址。部署的时候指定account A地址。
2.account A部署Delegation。部署的时候指定Delegate合约的地址，表示代理的是Delegate合约。
3.此时验证两个合约的owner相同，都是account A的地址。
4.account B调用Delegation 的fallback函数，修改owner地址。
5.查看Delegation的owner地址，已经被修改成account B的地址。
**规避建议**
1.谨慎使用 delegatecall() 函数。将函数选择器所使用的函数id固定以锁定要调用的函数，避免使用 msg.data 作为函数参数。
2.明确函数可见性，默认情况下为public类型，为防止外部调用函数被内部调用应使用external。注意这里的函数是指使用 delegatecall
的函数，也就是示例中的fallback函数。
3.加强权限控制。敏感函数应设置onlyOwner等修饰器。用 onlyOwner修饰示例中被代理的函数 setOwner() 能够阻挡攻击。
### **call 注入漏洞**
**漏洞介绍**
**call调用修改msg.sender值**
通常情况下合约通过call来执行来相互调用执行，由于call在相互调用过程中内置变量 msg
会随着调用方的改变而改变，这就成为了一个安全隐患，在特定的应用场景下将引发安全问题。
图片来源 seebug
**漏洞示例**
call注入引起的最根本的原因就是call在调用过程中，会将msg.sender的值转换为发起调用方的地址，能够绕过身份校验。下面的例子描述了call注入的攻击模型。
    pragma solidity ^0.4.22;
    contract Victim {
        uint256 public balance = 1;
        function info(bytes4 data){
            this.call(data);
            //this.call(bytes4(keccak256("secret()"))); //利用代码示意
        }
        function secret() public{
            require(this == msg.sender);
            // secret operations
            balance = 100;
        }
    }
**攻击步骤**
**攻击合约：**
    contract Attack{
        function callsecret(Victim vic){
            vic.secret();
        }
        function callattack(Victim vic){
            vic.info(bytes4(keccak256("secret()")));
        }
    }
**攻击步骤：**
1.account A部署Victim合约。观察 balance的值，为1。
2.account B部署Attack合约。
3.先调用Attack合约的callsecret函数，参数为Victim合约的地址。因为不满足require 条件，调用失败，观察balance的值为1。
4.再调用Attack合约的callattack函数，参数为Victim合约的地址。因为info函数里面使用了call函数调用secret函数，call函数会修改
msg.sender为调用者也就是Victim本身，所以能够满足require条件，调用成功，观察 balance的值为 100。攻击成功。
**规避建议**
1.禁止使用外部传入的参数作为call函数的参数。
2.尽量不要使用call函数传参数的设计方式。
### **假充值漏洞**
**漏洞介绍**
在一些充值场景下，接收方没有正确的判断充值状态就为攻击者充值，而实际上攻击者并没有付出代币。这种问题称为假充值问题。这类问题的根因在于业务平台存在漏洞 --没有进行合理的验证。真实世界的案例可以查看此交易：
此交易回执的status是true，然而转账函数执行失败ERC-20 Token Transfer Error。
**漏洞示例**
以太坊代币交易回执中status字段是 0x1(true) 还是 0x0(false)，取决于交易事务执行过程中是否抛出了异常（比如使用了
require/assert/revert/throw 等机制）。
当用户调用代币合约的transfer函数进行转账时，如果transfer函数正常运行未抛出异常，该交易的status即是0x1(true)。尽管函数return
false。
    function transfer(address _to, uint256 _value) public returns (bool) {
        if(_value  0){
          balances[msg.sender] -= _value;
          balances[_to] += _value;
          emit Transfer(msg.sender, _to, _value);
          return true;
        }
        else
            return false;
      }
某些代币合约的transfer函数对转账发起人(msg.sender)的余额检查用的是if判断方式，当balances[msg.sender] = 1 ether);
            uint8 rand = random();
            if(num > rand-3 && num < rand+3){
                msg.sender.transfer(2 ether);
            }
            else{
              return false;
            }
        }
    }
Alice是一个彩票合约，用户必须投入1 ether才可以参与猜奖。如果用户猜测的数在随机数加减3的范围内，则赢得2 ether，否则不中奖。
**攻击示例**
攻击者Bob就可以针对开奖逻辑发起回滚攻击。Bob先检查Alice合约的执行结果，如果不满足Bob的利益就触发回滚操作。攻击代码如下：
    cocontract Bob{
        function rollback(Alice alice, int8 num) public {
            uint256 balance1 = this.balance;
            bool isSucceed = address(alice).call.gas(10000).value(1 ether)(bytes4(keccak256("guess(int8)")), num);
            uint256 balance2 = this.balance;
            // 没有中奖则回滚
            if(balance2 < balance1){
                revert();