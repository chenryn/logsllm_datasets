– We propose HPCI, a Hawkes Process-based Conditional Independence test
procedure for causal inference.
– We further propose CPBE, a Causal Propagation-Based Embedding algo-
rithm based on network embedding techniques and vector similarity to infer
edge weights in causality graphs.
– Extensive experiments on a synthetic and a real-world citywide dataset show
the advantages and usefulness of our proposed methods.
2 Related Work
RootCauseAlarms.Therearevariouswaystodiscoveralarmcorrelationsand
rootcausealarms.Rulesandexperienceofpreviousincidentsarefrequentlyused.
Inmoredata-drivenapproaches,patternminingtechniquesthatcompressalarm
data can assist in locating and diagnosing faults [24]. Abele et al. [1] propose to
findrootcausealarmsbycombiningknowledgemodelingandBayesiannetworks.
To use an alarm clustering algorithm that considers the network topology and
then mine association rules to find root cause alarms was proposed in [21].
Graph-BasedRootCauseAnalysis.Somepreviousworksdependonsystem
dependencygraphs,e.g.,Sherlock[2].Adisadvantageistherequirementofexact
conditionalprobabilities,whichisimpracticaltoobtaininlargenetworks.Other
systems are based on causality graphs. G-RCA [4] is a diagnosis system, but its
126 K. Zhang et al.
causalitygraphisconfiguredbyhand,whichisunfeasibleinlargescale,dynamic
environments. The PC algorithm [19] is used by both CauseInfer [3] and [11] to
estimate DAGs, which are then used to infer root causes. However, such graphs
can be very unreliable. Co-occurrence and Bayesian decision theory are used
in[13]toestimatecausalrelations,butitismainlybasedonlogeventheuristics
and is hard to generalize. Nie et al. [16] use FP-Growth and lag correlation to
build a causality graph with edge weights added with expert feedback.
3 Preliminaries
Inthissection,weshortlyreviewthetwokeyconceptsthatourproposedmethod
depends upon, Hawkes process [7] and the PC algorithm [20].
Hawkes Process. This is a popular method to model continuous-time event
sequences where past events can excite the probability of future events. The
keystoneofHawkesprocessistheconditionalintensityfunction,whichindicates
the occurrence rate of future events conditioned on past events, denoted by
λ d(t), where u∈C ={1,2,...,U} is an event type. Formally, given an infinitely
small time window [t,t+Δt), the probability of a type-u event occurring in this
window is λ d(t)Δt. For U-dimensional Hawkes process with event type set C,
each dimension u has a specific form of conditional intensity function defined as
(cid:2)(cid:2)
λ u(t)=μ u+ k uv(t−t i), (1)
v∈Cti 0, reflecting the
expectation of how long it takes for a type-u event to occur after an type-v
event. All edgeswith positive weights areretained. (2) Anyredundantandindi-
rect causal edges are removed using CI tests. We use the alarm transactions
T = {T i} as input and for each alarm a i the sequence of alarm occurrences
N i = {n|T k ∈ T,(a,t,n) ∈ T k,a = a i} is extracted. Note that n can be 0 if an
alarm type is not present in a window w i. For each pair of alarm types (a i,a j),
the CI test of their respective occurrence sequences is used to test for indepen-
dence and remove edges. The output is a graph with unwanted edges removed.
(3) Finally, we iteratively remove the edge with the smallest intensity until the
graph is a DAG. Our final causal graph is denoted as GC.
We select CI tests to enforce sparsity in the causal graph in the second step.
Compared to adding penalty terms such as L1-norm, the learning procedure is
more interpretable, and our experiments show more robust results.
EdgeWeightsInference.ThecausalgraphGC learnedbyHPCIisaweighted
graph,however,theweightsdonotaccountforglobaleffectsonthecausalinten-
sities. Hence, to encode more knowledge into the graph, we propose a novel
network embedding-based weight inference method, Causal Propagation-Based
Embedding (CPBE). CPBE consists mainly of two steps; (1) For each node u,
we obtain a vector representation Z u ∈ RL using a novel network embedding
technique. (2) Use vector similarity to compute edge weights between nodes.
The full CPBE algorithm is shown in Algorithm 1. CPBE uses a new proce-
dure to generate a context for the skip-gram model [15] (lines 1–9). This proce-
dure is also illustrated in Fig.2. In essence, for each historical alarm transaction
T i ∈ T, we use the learned causality graph GC and extract a causal propaga-
tion graph GP i C, where only the nodes corresponding to alarm types in T i are
130 K. Zhang et al.
A A C A C Start from A: A
B Start from B: B F A D
(B, F, A, D)
F E F E
(F, A)
F Start from D: D
D B D B D Start from F: F A
Alarm Alarm Causal Causal Graph Traversing (DFS) Causal Context
transaction Graph Propagation (size > 1)
Fig.2. Context generation procedure for CPBE.
Algorithm 1. Causal Propagation-Based Embedding (CPBE)
Input: Alarm Transactions T ={T i}; Causal Graph GC =(V,E);
1: C ={},E w ={};
2: for T i ∈T do:
3: GP iC = ConstructPropagationGraph(T i,GC)
4: for alarm node∈T i do:
5: C alarmnode = GraphTraversing(GP iC,alarm node)
6: C =C∪C alarmnode
7: end for
8: end for
9: Z ← skip-gram(C) to map nodes to embedding vectors
10: for (u,v)∈E do:
11: w=Cosine(Z u,Z v)
12: E w =E w∪(u,v,w)
13: end for
Output: Alarm Influence Graph GI =(V,E w);
retained. Starting from each node in GPC, we traverse the graph to generate
i
a node-specific causal context. During the traversal for a node u, only nodes
that have a causal relation with u are considered. There are various possible
traversing strategies, e.g., depth-first search (DFS) and RandomWalk [6]. The
skip-gram model is applied to the generated contexts to obtain an embedding
vector Z u ∈RL for each node u. Finally, the edge weight between two nodes is
set to be the cosine similarity of their associated vectors. We denote the final
weighted graph as the alarm influence graph GI.
5.3 Root Cause Alarm Influence Ranking
This section describes how the alarm influence graph GI is applied to an alarm
transactiontoidentifytherootcausealarms.ForeachalarmtransactionT ∈T,
i
an alarm propagation graph GP i I is created with the relevant nodes v ∈T i and
applicable edges {(u,v,w)|u,v ∈ T i}. Any nodes corresponding to alarms not
presentinT i areremoved.TheprocessisequivalenttohowGP i C iscreatedfrom
thecausalgraphGC.Thealarmsineachpropagationsub-grapharethenranked
independently. The process is illustrated in Fig.3.
Root Cause Alarm Discovery in Telecom Networks 131
A C A C
A > C > E
A B C
F E E
D E
B D B D B > D
Alarm transaction Alarm influence graph Propagation subgraphs Alarm ranking
Fig.3. Processing flow from alarm transaction to ranked alarms.
We consider the problem of finding the root cause alarm as an influence
maximizationproblem[10].WewanttodiscoverasmallsetofK seednodes that
maximizes the influence spread under an influence diffusion model. A suitable
model is the independent cascade model, which is widely used in social network
analysis. Following this model, each node v is activated by each of its neighbors
independently based on an influence probability p u,v on each edge (u,v). These
probabilities directly correspond to the learned edge weights. Given a seed set
S 0 to start with at t = 0, at step t > 0, u ∈ S t−1 tries to activate its outgoing
inactivated neighbors v ∈ Nout(u) with probability p u,v. Activated nodes are