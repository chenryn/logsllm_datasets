r ∈ bPredr, and well-formed
program p ∈ bProg. Let θ0(v) = 0 for every v ∈ Var. By Theo-
rem 4.2, 4.3, and 4.7, we have a summary of translation in Figure 7.
Observe that ˜p in Figure 7 is well-formed and in static single as-
signment form (Lemma 4.1 and 4.4). Theorem 4.7 is applicable in
the last deduction. After the translations, a safety check, a range
problem, and an instance of the modular polynomial equation en-
tailment problem are obtained from the given specification of a
well-formed program in bvCryptoLine. To verify mathematical
constructs against their specifications, we will solve all the three
problems in the next section.
5 VERIFICATION OF SPECIFICATIONS
We show how to solve a range problem, check if a program is safe,
and solve modular polynomial equation entailment problem in this
section. The first two problems are reduced to QF_BV formulas and
solved by an SMT solver. The last problem is reduced to an ideal
membership problem and solve by the computer algebra system
Singular.
5.1 Solving Range and Overflow Checks
First define the syntax of a fragment of QF_BV with function names
taken from the standard format SMTLIB2. In this fragment, a vari-
able always represents a bit-vector of width w (the assumed word-
size). Let qExp and qPred respectively denote the expressions and
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1981the predicates in QF_BV. An expression e ∈ qExp can be a con-
stant bvconst(n, b), a variiable v ∈ Var, an addition bvadd(e1, e2),
a subtraction bvsub(e1, e2), a multiplication bvmul(e1, e2), a con-
catenation concat(e1, e2), a zero extension zero_extend(e′, i), a left-
shifting bvshl(e1, e2), a logical right-shifting bvlshr(e1, e2), or an ex-
traction bvextract(e′, i, j) where n, i, j ∈ N, b ∈ Vn, and e1, e2, e′ ∈
qExp. A predicate q ∈ qPred can be ⊤, an equality e1 = e2, a less-
than bvult(e1, e2), a less-then-or-equal bvule(e1, e2), a negation ¬q′,
a conjunction q1 ∧ q2, or a disjunction q1 ∨ q2 where e1, e2 ∈ qExp
and q′, q1, q2 ∈ qPred. An implication q1 ⇒ q2 is defined as¬q1∨q2.
Based on the basic expressions, we define two shorthands for
extracting the higher bits and the lower bits of an expression.
bvhigh(e) ≜ bvextract(e, 2w − 1, n)
bvlow(e) ≜ bvextract(e, w − 1, 0)
Similar to the bit-vector operations +V, −V, and ×V extended
with zero extension in Section 2, for • ∈ {bvadd, bvsub, bvmul},
we define their extended versions •#. For example, bvadd#(e1, e2)
≜ bvadd(zero_extend(e1, w), zero_extend(e2, w)) and bvadd#(e1,
e2, e3) ≜ bvadd(bvadd(zero_extend(e1, w), zero_extend(e2, w)),
zero_extend(e3, w)).
Let max(n, m) return the maximal number in n and m. Given an
expression e ∈ qExp, width(e) denotes the maximal bit-width of e.
width(bvconst(n, b)) = n
width(v) = w
width(bvadd(e1, e2)) = max (width(e1), width(e2))
width(bvsub(e1, e2)) = max (width(e1), width(e2))
width(bvmul(e1, e2)) = max (width(e1), width(e2))
width(concat(e1, e2)) = width(e1) +N width(e2)
width(zero_extend(e, i)) = width(e) +N i
width(bvshl(e1, e2)) = width(e1)
width(bvlshr(e1, e2)) = width(e1)
width(bvextract(e, i, j)) = i −N j +N 1
The expression e is called well-formed if e is (1) a constant, a variable,
a concatenation, a zero extension, a left-shifting, or a logical right-
shifting, (2) an addition bvadd(e1, e2), a subtraction bvsub(e1, e2), or
a multiplication bvmul(e1, e2) with width(e1) = width(e2) and both
e1 and e2 well-formed, or (3) an extraction bvextract(e′, i, j) with
0 ≤ j ≤ i < width(e′) and e′ well-formed. A predicate q ∈ qPred is
well-formed if all subexpressions are well-formed.
Let ν ∈ bSt be a state. Define the semantic function [[e]]V (ν ) for
well-formed expressions e ∈ qExp. For a predicate q ∈ qPred, we
write Vw |= q[ν] if q evaluates to tt using the evaluation function
[[e]]V (ν ) for every subexpression e in q, using <V for bvult, and
using ≤V for bvule.
[[v]]V(ν ) ≜ [[v]]Z (ν )
[[bvconst(n, b)]]V(ν ) ≜ b
[[bvadd(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ) +V [[e2]]V (ν )
[[bvsub(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ) −V [[e2]]V (ν )
[[bvmul(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ) ×V [[e2]]V (ν )
[[concat(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ).V[[e2]]V(ν )
[[bvshl(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ) ≪V |[[e2]]V(ν )|
[[bvlshr(e1, e2)]]V(ν ) ≜ [[e1]]V (ν ) ≫V |[[e2]]V(ν )|
[[zero_extend(e, i)]]V(ν ) ≜ [[e]]V (ν )#Vi
[[bvextract(e, i, j)]]V(ν ) ≜ [[e]]V(ν )[i, j]
Let qr , q′
r ∈ bPredr be two range predicates and p ∈ bProg a well-
formed program in static single assignment form. Both an safety
check (Vw |= qr [ν] implies ProgSafe(p, ν ) = tt for all ν ∈ bSt) and
a range problem (|= (|qr |) p (|q′
r |)) involve only bit-vector operations
and can be modeled by QF_BV expressions. To show that, we first
define functions to transform the program p, the predicates qr and
q′
r , and the safety check to QF_BV formulas.
Define a as v when the atom a is a variable v and otherwise
bvconst(w, b) when a is a constant b. The function StmtQFBV (Al-
gorithm 7) transforms a statement in bStmt to a QF_BV formula.
Recursively define the function ProgQFBV for programs in bProg
such that ProgQFBV(ϵ ) ≜ ⊤ and ProgQFBV(s; p) ≜ StmtQFBV(s)
∧ ProgQFBV(p). Note that the formulas returned by StmtQFBV
and ProgQFBV are well-formed QF_BV formulas. The following
theorem states that ProgQFBV(p) gives an abstraction of the pro-
gram p.
Theorem 5.1. Let p ∈ bProg be a well-formed program in static
=⇒ ν′ implies
p
single assignment form. Then, for all ν, ν′ ∈ bSt, ν
Vw |= ProgQFBV(p)[ν′].
match s with
case v ← a: return v = a
case v ← a1 + a2: return v = bvadd(a1, a2)
case c v ← a1 + a2:
r ← bvadd#(a1, a2)
return c = bvhigh(r ) ∧ v = bvlow(r )
case v ← a1 + a2 + y:
case c v ← a1 + a2 + y:
Algorithm 7 Transformation from bStmt to qPred
1: function StmtQFBV(s)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
case v ← a1 − a2: return v = bvsub(a1, a2)
case v ← a1 × a2: return v = bvmul(a1, a2)
case vh vl ← a1 × a2:
r ← bvmul#(a1, a2)
return vh = bvhigh(r ) ∧ vl = bvlow(r )
return v = bvadd(bvadd(a1, a2), y)
r ← bvadd#(bvadd#(a1, a2), y)
return c = bvhigh(r ) ∧ v = bvlow(r )
mh ← bvconst(w, n)
ml ← bvconst(w, bvw
return vh = bvlshr(a, mh )∧
(w − |n|))
case v ← a ≪ n: return v = bvshl(a, bvconst(w, n))
case vh vl ← a@n:
23:
24:
25:
26:
vl = bvlshr(bvshl(a, ml ), ml )
case vh vl ← (a1.a2) ≪ n:
mn ← bvconst(w, n)
r ← bvshl(concat(a1, a2), mn )
return vh = bvhigh(r )∧
vl = bvlshr(bvlow(r ), mn )
27: end function
For the transformation from range predicates to QF_BV formulas,
recursively define a function PredrQFBV such that PredrQFBV(⊤)
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1982≜ ⊤, PredrQFBV(a1 < a2) ≜ bvult(a1, a2), PredrQFBV(a1 ≤ a2)
≜ bvule(a1, a2), and PredrQFBV(p1 ∧ p2) ≜ PredrQFBV(p1) ∧
PredrQFBV(p2). We have the following theorem for the transfor-
mation of range predicates.
Theorem 5.2. Let q ∈ bPredr be a range predicate. Then, for all
ν ∈ bSt, Vw |= q[ν] if and only if Vw |= PredrQFBV(q)[ν].
Define a function StmtSafeQFBV (Algorithm 8) which trans-
forms safety checks for statements to QF_BV. Recursively define
a function ProgSafeQFBV such that ProgSafeQFBV(ϵ ) ≜ ⊤ and
ProgSafeQFBV(s; p) ≜ StmtSafeQFBV(s) ∧ ProgSafeQFBV(p).
The following theorem states the soundness of our translation from
range problems and safety checks to QF_BV.
Theorem 5.3. Given two range predicates qr , q′
well-formed program p ∈ bProg in static single assignment form,
r ∈ bPredr and a
• Vw |= qr [ν] implies ProgSafe(p, ν ) = tt for all ν ∈ bSt if,
(PredrQFBV(qr )∧ ProgQFBV(p)) ⇒ ProgSafeQFBV(p) is
valid, and
r |) if the QF_BV formula PredrQFBV(qr ) ∧
ProgQFBV(p) ⇒ PredrQFBV(q′
• |= (|qr |) p (|q′
r ) is valid.
o ← bvconst(w, bvw
match s with
Algorithm 8 Transformation from Safety Checks to QF_BV
1: function StmtSafeQFBV(s)
(0))
2:
3:
case v ← a: return ⊤
4:
case v ← a1 + a2: return bvhigh(bvadd# (a1, a2)) = o
5:
case c v ← a1 + a2: return ⊤
6:
case v ← a1 + a2 + y:
7:
8:
return bvhigh(bvadd#(a1, a2)) = o∧
bvhigh(bvadd# (bvadd#(a1, a2)), y) = o
case c v ← a1 + a2 + y: return ⊤
case v ← a1 − a2: return bvhigh(bvsub#(a1, a2)) = o
case v ← a1 × a2: return bvhigh(bvmul#(a1, a2)) = o
case vh vl ← a1 × a2: return ⊤
case v ← a ≪ n:
one ← bvconst(w, bvw
(1))
(w − |n|))
m ← bvconst(w, bvw
return bvult(a, bvshl(one, m))
case vh vl ← a@n: return ⊤
case vh vl ← (a1.a2) ≪ n:
one ← bvconst(w, bvw
(1))
m ← bvconst(w, bvw
(w − |n|))
return bvult(a1, bvshl(one, m))∧
22: end function
bvule(bvconst(w, n), bvconst(w, bvw
(w)))
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
5.2 Solving Modular Polynomial Equation
Entailment Problem
′
′
i∈[I]
j∈[J ]
l ∈[L]
Z |=∀⃗x .
fj (⃗x ) ≡ f
′
j (⃗x ) mod nj (⃗x )
′
l (⃗x ) mod ml (⃗x )
k (⃗x ), hl (⃗x ), h′
hl (⃗x ) ≡ h
j (⃗x ), nj (⃗x ), дk (⃗x ), д′
To solve a modular polynomial equation entailment problem Z |=
(cid:94)
∀⃗x .Π((| ˜qa|) ˜p (| ˜q′
Z |=∀⃗x .
=⇒ (cid:94)
a|)), it remains to show
ei (⃗x ) = e
i (⃗x ) ∧ (cid:94)
k (⃗x ) ∧ (cid:94)
i (⃗x ) ∧ (cid:94)
i (⃗x ) ∧ (cid:94)
дk (⃗x ) = д
k∈[K]
where ei (⃗x ), e′
i (⃗x ), fj (⃗x ), f ′
l (⃗x ),
ml (⃗x ) ∈ Z[⃗x] for i ∈ [I], j ∈ [J], k ∈ [K], and l ∈ [L]. Since the
consequence is a conjunction of (modular) equations, it suffices to
(cid:94)
prove one conjunct at a time. That is, we aim to show
(cid:94)
=⇒ д(⃗x ) = д
=⇒ h(⃗x ) ≡ h
j∈[J ]
(⃗x ) mod m(⃗x )
j (⃗x ), nj (⃗x ), д(⃗x ), д′(⃗x ), h(⃗x ), h′(⃗x ), m(⃗x )
It is not hard to rewrite modular polynomial equations in an-
tecedents of the above implications. For instance, the first implica-
tion is equivalent to
Z |=∀⃗x .
i (⃗x ), fj (⃗x ), f ′
where ei (⃗x ), e′
∈ Z[⃗x] for i ∈ [I], j ∈ [J].
′
j (⃗x ) mod nj (⃗x )
′
j (⃗x ) mod nj (⃗x )
ei (⃗x ) = e
′
[∃dj .fj (⃗x ) = f
′
j (⃗x ) + dj · nj (⃗x )]
fj (⃗x ) ≡ f
fj (⃗x ) ≡ f
Z |=∀⃗x .
ei (⃗x ) = e
ei (⃗x ) = e
(⃗x ); or
j∈[J ]
i∈[I]
i∈[I]
′
′
′
which in turn is equivalent to
Z |=∀⃗x∀⃗d.
′
j∈[J ]
i (⃗x ) ∧ (cid:94)
i (⃗x ) ∧ (cid:94)
′
j∈[J ]
(⃗x ),
ei (⃗x ) = e
′
(⃗x ).
′
i∈[I]
(cid:94)
=⇒ д(⃗x ) = д
(cid:94)
=⇒ д(⃗x ) = д
(cid:94)
i∈[I]
entailment problem:
It hence suffices to consider the following polynomial equation
′
′
(1)
i∈[I]
(⃗x ); or
ei (⃗x ) = e
Z |= ∀⃗x .
(⃗x ) mod m(⃗x )
′
i (⃗x ) =⇒ д(⃗x ) = д
′
i (⃗x ) =⇒ h(⃗x ) ≡ h
Z |= ∀⃗x .
(cid:94)
(2)
ei (⃗x ) = e
i∈[I]
where ei (⃗x ), e′
i (⃗x ), д(⃗x ), д′(⃗x ), h(⃗x ), h′(⃗x ), m(⃗x ) ∈ Z[⃗x] for i ∈
[I] [22].
We solve the polynomial equation entailment problems (1) and (2)
via the ideal membership problem [11, 22]. For (1), consider the