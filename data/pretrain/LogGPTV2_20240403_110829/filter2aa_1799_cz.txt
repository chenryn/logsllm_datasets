### Chapter 10: Management, Diagnostics, and Tracing

#### Service SIDs and Their Generation
- **0x01A5E8B3** (second DWORD value), which equals 27650227 in decimal.
- **0xA1917B4A** (third DWORD value), which equals 2710666058 in decimal.
- **0x631F189C** (fourth DWORD value), which equals 1662982300 in decimal.
- **0x3D085DD7** (fifth DWORD value), which equals 1023958487 in decimal.

Combining these values with the service SID authority value and the first RID (S-1-5-80) results in the same SID shown by Process Explorer. This demonstrates how the system generates service SIDs.

The utility of having a unique SID for each service extends beyond merely adding ACL entries and permissions for various system objects. It allows for fine-grained control over access. Initially, we discussed the scenario where certain system objects, accessible by a given account, need protection from services running within that same account. As previously described, service SIDs prevent this issue by requiring Deny entries associated with the service SID to be placed on every object that needs to be secured, which is an unmanageable approach.

To avoid the need for Deny ACEs, two types of service SIDs exist:
- **Restricted Service SID (SERVICE_SID_TYPE_RESTRICTED)**
- **Unrestricted Service SID (SERVICE_SID_TYPE_UNRESTRICTED)**, which is the default.

Despite the names, the service SID is always generated in the same way. The difference lies in the process token generation.

- **Unrestricted Service SIDs**: These are created as enabled-by-default, group owner SIDs. The process token is also given a new ACE that provides full permission to the service logon SID, allowing the service to communicate with the SCM. A service running with the SYSTEM account and an unrestricted token has more power than a standard SYSTEM service.

- **Restricted Service SIDs**: These turn the service-hosting process’s token into a write-restricted token. Restricted tokens generally require the system to perform two access checks: one using the standard token’s enabled group SIDs list and another using the list of restricted SIDs. For a standard restricted token, access is granted only if both access checks allow the requested access rights. Write-restricted tokens (created by specifying the `WRITE_RESTRICTED` flag to the `CreateRestrictedToken` API) perform double access checks only for write requests; read-only access requests use just one check on the token’s enabled group SIDs.

A service host process with a write-restricted token can write only to objects explicitly granting write access to the service SID and three additional SIDs added for compatibility:
- **0xA1917B4A** (third DWORD value), which equals 2710666058 in decimal.
- **0x631F189C** (fourth DWORD value), which equals 1662982300 in decimal.
- **0x3D085DD7** (fifth DWORD value), which equals 1023958487 in decimal.

These SIDs, combined with the service SID authority value and the first RID (S-1-5-80), generate the same SID shown by Process Explorer.

#### Additional SIDs for Compatibility
- **World SID**: Allows write access to objects normally accessible by anyone, such as certain DLLs in the load path.
- **Service Logon SID**: Enables the service to communicate with the SCM.
- **Write-Restricted SID**: Allows objects to explicitly permit any write-restricted service to have write access. For example, ETW uses this SID on its objects to allow any write-restricted service to generate events.

#### Example: Base Filtering Engine (BFE)
The BFE, responsible for applying Windows Firewall filtering rules, is part of a hosting process because these rules are stored in registry keys that must be protected from malicious write access. If a service is compromised, it could disable outgoing traffic firewall rules, enabling bidirectional communication with an attacker.

#### Network Restriction Rules
Windows allows for firewall rules that reference service SIDs, linked to one of the three behaviors described in Table 10-11.

| Scenario | Example | Restrictions |
|----------|---------|--------------|
| Network Access Blocked | Shell Hardware Detection Service (ShellHWDetection) | All network communications are blocked (both incoming and outgoing). |
| Network Access Statically Port-Restricted | RPC Service (Rpcss) operates on port 135 (TCP and UDP) | Network communications are restricted to specific TCP or UDP ports. |
| Network Access Dynamically Port-Restricted | DNS Service (Dns) listens on variable ports (UDP) | Network communications are restricted to configurable TCP or UDP ports. |

#### Virtual Service Account
A service SID can also be set as the owner of the token of a service running in the context of a virtual service account. Such a service has fewer privileges than the LocalService or NetworkService types and no credentials for network authentication. The token is part of the Everyone, Users, Authenticated Users, and All Services groups. This means the service can read (or write, unless it uses a restricted SID type) objects belonging to standard users but not high-privileged ones in the Administrator or System group.

A service running with a virtual service account has a private profile, loaded by the ProfSvc service during service logon. The profile is initially created in the `%SystemRoot%\ServiceProfiles` path. Users can assign a virtual service account to a service by setting the log-on account to `NT SERVICE\`, where `<service_name>` is the name of the service.

#### Interactive Services and Session 0 Isolation
Services running under proper service accounts (local system, local service, network service) cannot display dialog boxes or windows on the interactive user's desktop. This restriction is due to the way the Windows subsystem assigns service processes to window stations. In a Terminal Services environment, services run in session 0, which is hidden, while interactive processes access WinSta0.

- **Window Stations**: 
  - **WinSta0**: Visible and receives user input.
  - **Service-0x0-3e7$**: Nonvisible, shared by noninteractive services.
  - **Local service account**: Associated with the window station generated by logon session 3e5.
  - **Network service account**: Associated with the window station generated by logon session 3e4.

Interactive services configured with the `SERVICE_INTERACTIVE_PROCESS` flag can display dialog boxes and windows, but this feature was disabled and removed in Windows 10 April 2018 Update (RS4).

#### The Service Control Manager (SCM)
The SCM, located at `%SystemRoot%\System32\Services.exe`, is started early during system boot by the Wininit process. Its startup function, `SvcCtrlMain`, initializes the SCM and orchestrates the launching of services.

- **Initialization Steps**:
  - Sets process secure mitigations and unhandled exception filter.
  - Creates synchronization events (`SvcctrlStartEvent_A3752DX` and `SC_AutoStartComplete`).
  - Builds the internal service database by reading the `HKLM\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder\List` and `HKLM\SYSTEM\CurrentControlSet\Services` registry keys.
  - Waits for LSASS to signal the `LSA_RPC_SERVER_ACTIVE` event.
  - Cleans up deleted services and generates dependency lists.
  - Queries safe mode status.
  - Creates an RPC named pipe (`\Pipe\Ntsvcs`) and listens for messages from SCPs.
  - Signals the initialization-complete event and prepares for system shutdown.

#### Experiment: Enable Services Logging
The SCM logs ETW events for abnormal error conditions. To enable logging for service state changes, follow these steps:

1. Open the Registry Editor (`regedit.exe`).
2. Navigate to `HKLM\SYSTEM\CurrentControlSet\Control\ScEvents`.
3. Create the `ScEvents` subkey if it does not exist.
4. Create two DWORD values named `7036` and `7042`.
5. Set the data of these values to `1`.

This will enable logging for service status changes and STOP control requests, which are useful for debugging.

---

This optimized text aims to provide a clear, coherent, and professional explanation of the concepts and processes related to service SIDs, their generation, and the Service Control Manager.