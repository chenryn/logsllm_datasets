-   可以包含在脚本中的命令类型
-   脚本的目的
-   脚本选项
:::
::: section
::: titlepage
## []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#pre-script-in-kickstart-file_scripts-in-kickstart-file}%pre 脚本 {.title}
:::
`%pre`{.literal} 脚本在加载 Kickstart
文件后立即在系统中运行，但在完全解析并开始安装之前。每个部分必须以
`%pre`{.literal} 开头并以 `%end`{.literal} 结尾。
`%pre`{.literal}
脚本可用于激活和配置联网和存储设备。还可以使用安装环境中可用的脚本来运行脚本。如果您在继续安装之前有需要特殊配置的联网和存储，或者具有设置其他日志参数或环境变量的脚本，则添加
`%pre`{.literal} 脚本非常有用。
使用 `%pre`{.literal} 脚本调试问题可能比较困难，因此建议仅在需要时使用
`%pre`{.literal} 脚本。
除了安装环境 `/sbin`{.literal} 和 `/bin`{.literal}
目录中的大多数实用程序外，还可在 `%pre`{.literal}
脚本中使用与网络、存储和文件系统相关的命令。
您可以在 `%pre`{.literal}
部分中访问网络。然而，命名服务还没有被配置，所以只能使用 IP
地址，而不能使用 URL。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
pre 脚本不会在 chroot 环境中运行。
:::
::: section
::: titlepage
### []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#pre-script-section-options_pre-script-in-kickstart-file}%pre 脚本部分选项 {.title}
:::
以下选项可以用来改变预安装脚本的行为。要使用某个选项，请将其附加到脚本开头的
`%pre`{.literal} 行中。例如：
``` screen
%pre --interpreter=/usr/libexec/platform-python
-- Python script omitted --
%end
```
::: variablelist
[`--interpreter=`{.literal}]{.term}
:   允许指定不同的脚本语言，如
    Python。可以使用系统中可用的脚本语言；在大多数情况下，它们是
    `/usr/bin/sh`{.literal}、`/usr/bin/bash`{.literal} 和
    `/usr/libexec/platform-python`{.literal}。
    请注意，`platform-python`{.literal} 解释器使用 Python 版本
    3.6。对于新路径和版本，您必须将您的针对以前的 RHEL 版本的 Python
    脚本进行更改，以适用于新的路径和版本。另外，`platform-python`{.literal}
    用于系统工具：使用安装环境之外的 `python36`{.literal} 软件包。有关
    Red Hat Enterprise Linux 中的 Python 的详情，请查看\\
    [*安装和使用动态编程语言*]{.emphasis} 中的 [Python
    简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/installing_and_using_dynamic_programming_languages/assembly_introduction-to-python_installing-and-using-dynamic-programming-languages){.link}
    部分。
[`--erroronfail`{.literal}]{.term}
:   显示错误并在脚本失败时暂停安装。错误消息会指示您记录故障原因的位置。安装的系统可能会处于不稳定且无法启动的状态。您可以使用
    `inst.nokill`{.literal} 选项来调试脚本。
[`--log=`{.literal}]{.term}
:   将脚本的输出记录到指定的日志文件中。例如：
    ``` screen
    %pre --log=/tmp/ks-pre.log
    ```
:::
:::
:::
::: section
::: titlepage
## []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#pre-install-script-in-kickstart-file_scripts-in-kickstart-file}%pre-install 脚本 {.title}
:::
`pre-install`{.literal} 脚本中的命令会在以下任务完成后运行：
::: itemizedlist
-   系统已被分区
-   文件系统创建并挂载到 /mnt/sysroot 下
-   网络已根据任何引导选项和 kickstart 命令进行配置
:::
每个 `%pre-install`{.literal} 部分必须以 `%pre-install`{.literal}
开头并以 `%end`{.literal} 结尾。
`%pre-install`{.literal}
脚本可用于修改安装，并在软件包安装之前添加带有保证 ID 的用户和组。
建议您在安装所需的任何修改中使用 `%post`{.literal} 脚本。只有在
`%post`{.literal} 脚本对所需修改不够时才使用 `%pre-install`{.literal}
脚本。
备注：`pre-install`{.literal} 脚本不会在 chroot 环境中运行。
::: section
::: titlepage
### []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#pre-install-script-section-options_pre-install-script-in-kickstart-file}%pre-install script 部分选项 {.title}
:::
以下选项可用于更改 `pre-install`{.literal}
脚本的行为。要使用某个选项，请将其附加到脚本开头的
`%pre-install`{.literal} 行中。例如：
``` screen
%pre-install --interpreter=/usr/libexec/platform-python
-- Python script omitted --
%end
```
请注意，您可以有多个 `%pre-install`{.literal}
部分，它们具有相同或不同的解释器。它们按照它们在 Kickstart
文件中的顺序进行评估。
::: variablelist
[`--interpreter=`{.literal}]{.term}
:   允许指定不同的脚本语言，如
    Python。可以使用系统中可用的脚本语言；在大多数情况下，它们是
    `/usr/bin/sh`{.literal}、`/usr/bin/bash`{.literal} 和
    `/usr/libexec/platform-python`{.literal}。
    请注意，`platform-python`{.literal} 解释器使用 Python 版本
    3.6。对于新路径和版本，您必须将您的针对以前的 RHEL 版本的 Python
    脚本进行更改，以适用于新的路径和版本。另外，`platform-python`{.literal}
    用于系统工具：使用安装环境之外的 `python36`{.literal} 软件包。有关
    Red Hat Enterprise Linux 中的 Python 的详情，请查看
    [安装和使用动态编程语言](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/installing_and_using_dynamic_programming_languages/assembly_introduction-to-python_installing-and-using-dynamic-programming-languages){.link}中的
    [*Python 简介*]{.emphasis}部分。
[`--erroronfail`{.literal}]{.term}
:   显示错误并在脚本失败时暂停安装。错误消息会指示您记录故障原因的位置。安装的系统可能会处于不稳定且无法启动的状态。您可以使用
    `inst.nokill`{.literal} 选项来调试脚本。
[`--log=`{.literal}]{.term}
:   将脚本的输出记录到指定的日志文件中。例如：
    ``` screen
    %pre-install --log=/mnt/sysroot/root/ks-pre.log
    ```
:::
:::
:::
::: section
::: titlepage
## []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#post-script-in-kickstart-file_scripts-in-kickstart-file}%post 脚本 {.title}
:::
%post
脚本是安装后脚本，可在安装完成后运行，但在第一次重启系统前运行。您可以使用这部分来运行任务，比如系统订阅。
您可以添加系统在安装结束后但在第一次重启该系统之前要运行的命令,。此部分必须以
`%post`{.literal} 开头并以 `%end`{.literal} 结尾。
`%post`{.literal}
部分可用于安装其他软件或配置其他名称服务器等功能。post-install
脚本是一个 `chroot`{.literal} 环境中运行的，因此,从安装介质中复制脚本或
RPM 软件包等任务在默认情况下不起作用。您可以使用 `--nochroot`{.literal}
选项更改此行为，如下所述。然后 `%post`{.literal}
脚本将在安装环境中运行，而不是在安装的目标系统中的 `chroot`{.literal}
中运行。
由于安装后脚本在 `chroot`{.literal} 环境中运行，因此大多数
`systemctl`{.literal} 命令将拒绝执行任何操作。
请注意，在执行 `%post`{.literal} 部分的过程中，仍然必须插入安装介质。
::: section
::: titlepage
### []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#post-script-section-options_post-script-in-kickstart-file}%post 脚本部分选项 {.title}
:::
以下选项可以用来改变安装后脚本的行为。要使用某个选项，请将其附加到脚本开头的
`%post`{.literal} 行中。例如：
``` screen
%post --interpreter=/usr/libexec/platform-python
-- Python script omitted --
%end
```
::: variablelist
[`--interpreter=`{.literal}]{.term}
:   允许指定不同的脚本语言，如 Python。例如：
    ``` screen
    %post --interpreter=/usr/libexec/platform-python
    ```
    可以使用系统中可用的脚本语言；在大多数情况下，它们是
    `/usr/bin/sh`{.literal}、`/usr/bin/bash`{.literal} 和
    `/usr/libexec/platform-python`{.literal}。
    请注意，`platform-python`{.literal} 解释器使用 Python 版本
    3.6。对于新路径和版本，您必须将您的针对以前的 RHEL 版本的 Python
    脚本进行更改，以适用于新的路径和版本。另外，`platform-python`{.literal}
    用于系统工具：使用安装环境之外的 `python36`{.literal} 软件包。有关
    Red Hat Enterprise Linux 中的 Python 的详情，请查看
    [安装和使用动态编程语言](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/installing_and_using_dynamic_programming_languages/assembly_introduction-to-python_installing-and-using-dynamic-programming-languages){.link}中的
    [*Python 简介*]{.emphasis}部分。
[`--nochroot`{.literal}]{.term}
:   允许您指定在 chroot 环境之外运行的命令。
    以下示例将 /etc/resolv.conf 文件复制到刚安装的文件系统中。
    ``` screen
    %post --nochroot
    cp /etc/resolv.conf /mnt/sysroot/etc/resolv.conf
    %end
    ```
[`--erroronfail`{.literal}]{.term}
:   显示错误并在脚本失败时暂停安装。错误消息会指示您记录故障原因的位置。安装的系统可能会处于不稳定且无法启动的状态。您可以使用
    `inst.nokill`{.literal} 选项来调试脚本。
[`--log=`{.literal}]{.term}
:   将脚本的输出记录到指定的日志文件中。请注意，无论您是否使用
    `--nochroot`{.literal} 选项，日志文件的路径都必须考虑。例如，没有
    `--nochroot`{.literal}:
    ``` screen
    %post --log=/root/ks-post.log
    ```
    使用 `--nochroot`{.literal}:
    ``` screen
    %post --nochroot --log=/mnt/sysroot/root/ks-post.log
    ```
:::
:::
::: section
::: titlepage
### []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#example-mounting-nfs-in-a-post-install-script_post-script-in-kickstart-file}Example:在安装后脚本中挂载 NFS {.title}
:::
这个 `%post`{.literal} 部分的示例挂载 NFS 共享并执行位于
`/usr/new-machines/`{.literal} 上的名为 `runme`{.literal}
的脚本。请注意，在 Kickstart 模式中不支持 NFS 文件锁定，因此需要使用
`-o nolock`{.literal} 选项。
``` screen
# Start of the %post section with logging into /root/ks-post.log
%post --log=/root/ks-post.log
# Mount an NFS share
mkdir /mnt/temp
mount -o nolock 10.10.0.2:/usr/new-machines /mnt/temp
openvt -s -w -- /mnt/temp/runme
umount /mnt/temp
# End of the %post section
%end
```
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-script-file-format-reference_installing-rhel-as-an-experienced-user.html#kickstart-error-handling-section_kickstart-script-file-format-reference}Kickstart 错误处理部分 {.title}
:::
从 Red Hat Enterprise Linux 7 开始，Kickstart
安装可以包含安装程序遇到致命错误时运行的自定义脚本。例如：已经为安装请求的软件包中有一个错误，指定时无法启动
VNC，或者在扫描存储设备时出错。发生此类错误后安装无法继续。安装程序会按照在
Kickstart 文件中提供的顺序运行所有 `%onerror`{.literal}
脚本。此外，如果出现回溯，将运行 `%onerror`{.literal} 脚本。
每个 `%onerror`{.literal} 脚本都需要以 `%end`{.literal} 结尾。
错误处理部分接受以下选项：
::: variablelist
[`--erroronfail`{.literal}]{.term}
:   显示错误并在脚本失败时暂停安装。错误消息会指示您记录故障原因的位置。安装的系统可能会处于不稳定且无法启动的状态。您可以使用
    `inst.nokill`{.literal} 选项来调试脚本。
[`--interpreter=`{.literal}]{.term}
:   允许指定不同的脚本语言，如 Python。例如：
    ``` screen
    %onerror --interpreter=/usr/libexec/platform-python