# Version 8 Datagram
**August 2015**
**Remote Access, the APT // Ian Latter**

## TGXf Hello World – 1/1:4
### Control Frame
- **Control Byte**
  - Bit 0: Control (1)
  - Bits 1-3: START (1)
  - Bits 4-7: QRCODE_FPS (4)

### Payload
- 5 fps
- Encode as QR code

---

## TGXf Hello World – 0/data
### Data Frame
- **Control Byte**
  - Bit 0: Data (0)
  - Bits 1-4: Counter (0)

### Payload
- "Hello World!"
- Encode as QR code

---

## TGXf Hello World – 1/2:2
### Control Frame
- **Control Byte**
  - Bit 0: Control (1)
  - Bits 1-3: STOP (2)
  - Bits 4-7: COMPLETE (2)

### Payload
- CRC32
- Encode as QR code

---

## TGXf Result – Visual Modem
- If you see this in Smart Auditor, you've lost.

---

## TGXf Data Rates
- **Recall the supported QR Code versions.**
- **Updating our Layer 3 configurations table with FPS values, we get the following:**
  - I.e., 80 bps to 32 kbps
  - Arbitrarily limited only by the receiver

| Version | Reliable Capacity | FPS (1 -> 10) x 8 bits |
|---------|-------------------|------------------------|
| 1       | 10 bytes per frame | 80 bps -> 800 bps      |
| 2       | 22 bytes per frame | 176 bps -> 1,760 bps   |
| 8       | 148 bytes per frame | 1,184 bps -> 11,840 bps |
| 15      | 408 bytes per frame | 3,264 bps -> 32,640 bps |

---

## TGXf a PDF from YouTube
- YouTube is the new Dropbox.

---

## Another Version
- **Recall the supported QR Code versions.**
- **Updating our Layer 3 configurations table with resolutions, we get the following:**
  - Previous examples scaled the code.
  - Let's look at a native version 1 example.

| Version | Reliable Capacity | Resolution  |
|---------|-------------------|-------------|
| 1       | 10 bytes per frame | 21x21 pixels |
| 2       | 22 bytes per frame | 25x25 pixels |
| 8       | 148 bytes per frame | 49x49 pixels |
| 15      | 408 bytes per frame | 77x77 pixels |

---

## TGXf a PDF from BASH
- ANSI generated QR codes pass through SSH jump hosts.

---

## Technology Checkpoint (1/3)
- **So!**
  - If the TGXf transmit software was on a laptop, we could now exfiltrate data, file by file, through its screen (binaries already public).
  - How do we get TGXf onto the laptop in the first place?
    - Recall that any user-controlled bit is a communications channel.
    - And we have a keyboard!

---

## Digital Programmable Keyboard
- **Arduino Leonardo**
  - USB HID Keyboard
  - No drivers needed
  - `Keyboard.println("x")`
  - Open source platform
  - Heaps of support

- **Digispark (top)**
  - 6KB of flash

- **Leostick**
  - 32KB of flash

---

## What to Type?
- Source code (text) would be easy to send but then needs to be compiled.
- Send statically compiled binary:
  - Gzip TGXf transmit binary (~80->25KB)
  - Hexdump the .gz (byte = 2 chars; 0-9, a-f)
- Receive via text editor:
  - "Type" it in, structured
  - Bash (`printf`) or Perl (`print`)
  - Save, chmod, and run script, gunzip result!

---

## Uploading to Lin64 via Win32 over SSH via Keyboard
- Typing a BASH2BIN script.

---

## Technology Checkpoint (2/3)
- **Wait, what!**
  - First, there’s now no barrier to getting TGXf into a computer (this is bad in enterprise).
  - But second, we just sent data into the computer, so:
    - No longer unidirectional
    - ZOMG Full Duplex! w00t
    - Could now replace TGXf file transfers with full-blown through screen and keyboard networking!

---

## Keyboard Interface
- **USB HID Keyboard interface**
  - Polled interface, each 1ms
  - Typical implementations send one "key" packet followed by one "null" packet (key clear)
  - Not necessary, but still implemented
  - Contains up to 6 keyboard keys (by code)
  - Note – no native binary mode
  - Automatically de-duped (no one key twice)
  - Note – data removed irretrievably

---

## TKXf – Keyboard Transport
- Same as TGXf – USB HID packet is L3
- Still unidirectional, though status LEDs could be used
- Create binary payload by encoding data in hexadecimal
- Halves throughput: 3 octets/pkt/ms
- Retained "key clear" packet: 3 octets/pkt/2ms
- Correct for de-duplication by creating a de-dupe layer that re-dupes at the receiving end
- Simple positional reference-based encoding

---

## TKXf – Transport Protocol
- 6 char packets are too small for a control header
- Bookended "sequence" instead of "packet"
- Data = "space" = 0x2C/0x20
- Control/Start = "comma" = 0x36/0x2C
- Control/Stop = "period" = 0x37/0x2E
- Process as a "stream"
- Ignore "file" based transfers

---

## TKXf – "Keyboard Stuffer"
- **Target Arduino (top)**
  - USB HID Keyboard
  - Encodes received raw/binary data as keys
  - Alter "Keyboard" library to expose HID packet (12x faster++)
- **Attacker Arduino**
  - USB Serial Interface
  - Sends raw/binary octets to Target Arduino

---

## TGXf Note
- One note on TGXf before we integrate TGXf and TKXf
- If we remove the control frames (layer) from TGXf, it is capable of "streams" rather than "files"
- Now we can assemble the Through Console Transfer application!

---

## TCXf Application Architecture

---

## Technology Checkpoint (3/3)
- **TCXf**
  - TKXf reference implementation has 12kbps max, up
  - Could probably get this up to 32kbps
  - Use Key clear packet with second character set (x2)
  - Use base64 for 4 bytes per 3 hex values (+1/3)
  - TGXf reference implementation has 32kbps max, down
  - Features:
    - Bi-directional, binary clear, serial connection
    - Native network socket interface
    - Insane portability / Massive vulnerability

---

## TCXf IP Network Evolution
- **PPP over the Screen and Keyboard**
  - On the target device:
    - `sudo pppd 10.1.1.1:10.1.1.2 debug noccp nodetatch pty "netcat localhost 8442"`
    - Note the privilege required to create a NIC (We already had a full-duplex socket without it)
  - On the attacker's device:
    - `sleep 2; sudo pppd noipdefault debug noccp nodetatch pty "netcat localhost 8442"`

---

## POC Impact on the Enterprise Architecture

---

## ESA Context?
- **Time to be Enterprise Security Architects**
  - Firstly, what are TGXf, TKXf, and TCXf?
  - In the vulnerability taxonomy, we are dealing with "storage-based" covert channel attacks
  - Secondly, where's the enterprise?
    - So far, we’ve been working from a local computer context
    - But in enterprise, we abstract the screen and keyboard (on the organization’s side)

---

## This is Enterprise @ L7
- Remote access:
  - VMware
  - Citrix
  - RDP
  - VNC
  - SSH
  - etc ad nauseam
- Console abstraction

---

## TCXf Enterprise Impact

---

## TCXf PPP via XPe Thin Client
- Attacker Laptop → Corp XPe Thin Client → Corp Linux App Server

---

## TECHNOLOGY SOLUTION 2
- Engineering a better Proof of Concept