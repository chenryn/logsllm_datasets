bearer token (e.g. HTTP cookie). Such application-level
authentication protocols are known to be vulnerable to
6
a general class of credential forwarding attacks unless
the application-level credential is channel bound to the
TLS connection (e.g. see [5]. In such attacks, a client
C connects to a malicious server M and authenticates
with some credential over TLS, but M forwards the
authentication message over another TLS channel to S,
thereby logging in as C at S. The attack is prevented if
the authentication protocol embeds a unique identiﬁer
for the underlying TLS channel, so that a message sent
over one channel cannot be forwarded over another. One
such identiﬁer, called tls-unique, deﬁned in [2], uses
the contents of the CFIN message as a unique identiﬁer
for the TLS connection. This tls-unique channel
binding is used by a number of emerging application-
level authentication protocols, such as SCRAM [28],
FIDO [14], and Token Binding [32], speciﬁcally to
avoid credential-forwarding attacks.
V. TRANSCRIPT COLLISION ATTACKS ON TLS
As we saw in the previous section, TLS uses a
variety of hash constructions to implement key security
mechanisms like client and server authentication, hand-
shake integrity, and channel binding. We now demon-
strate weaknesses in these constructions and show how
they can be exploited to mount practical
transcript
collision attacks on real-world clients and servers.
A. Breaking TLS 1.2 Client Authentication
using a Chosen-Preﬁx Transcript Collision
Suppose a client C uses the same certiﬁcate to
connect to two different servers A and S. We show that
if A is malicious, it can force C to create a signature
(in CCV) that A can use to impersonate C at S, as
depicted in Figure 4. Here, A acts as a man-in-the-
middle between C and S. Note, however, that A uses
its own certiﬁcate cert a and does not rely on knowing
any long-term secrets belonging to C or S.
Recall that the client signs the transcript hash(log c
1);
so the key idea of the attack is to compute a collision
between this client-side transcript and the server-side
transcript hash(log s
1), even though the two connections
see different message sequences. When the MitM A
receives a client hello from C, it responds with its
own hello SH(cid:48), certiﬁcate SC(cid:48), key exchange SKE(cid:48). It
then initiates a connection with the server S by sending
a carefully crafted client hello CH(cid:48). A now runs both
connections in parallel. It will receive a hello SH, certiﬁ-
cate SC, key exchange SKE, and certiﬁcate request SCR
from S. We assume that the length of these messages
SH|SC|SKE|SCR is ﬁxed (= M) and is known in advance.
Note that A needs to choose CH(cid:48) before it receives
any messages from S. A can compute CH(cid:48) and SCR(cid:48) as
follows. A uses a chosen-preﬁx collision to ﬁnd two bit-
strings (C1, C2) of length L1 and L2 bytes respectively
hash(logs
pretending to be C, and S accepts these messages.
1). A simply forwards these messages to S,
Controlling the master secret Even though S has
accept C’s certiﬁcate on its connection with A, A
cannot complete the connection unless it knows the
master secret on its connection with S. The master
secret is computed from gxy so A needs to know the
x corresponding the gx that C sent in its key exchange
message CKE. In order to accomplish this task, we rely
on a key forcing attack in the DHE handshake.
to C,
When A sends SKE(cid:48)
it does not send a
valid Difﬁe-Hellman group (p, g). Instead, it chooses an
and sets p = k2 − k and
arbitrary public value k = gx(cid:48)
g = k. This p value is clearly not a prime, and it has the
property that no matter what private value x is generated
by C, we will have gx mod p = k. Hence, by choosing
such a bogus Difﬁe-Hellman group, A can force C to
send a CKE with a public value that it controls.
To complete the attack, we assume that S always
uses the same Difﬁe-Hellman group (p, g). A chooses
mod p. It then sends SKE(cid:48)
some x(cid:48) and sets k = gx(cid:48)
to C with the bogus group (k2 − k, k) and the public
value k. Now, the CKE sent by C will contain k, and A
will forward it to S. A will then forward C’s signature
CCV as usual. The master secret between A and S will
be derived from gx(cid:48)y mod p, but A knows x(cid:48) and hence
can compute this value. Consequently, A can complete
the handshake and impersonate C at S.
We observe that the attack here relies on the client
not validating the Difﬁe-Hellman groups it receives
from the server. From our experiments, we ﬁnd that
most TLS libraries do not validate the groups they
receive in the server key exchange, probably because
checking for primality is expensive. In some libraries,
the value k2−k is rejected because it is an even number.
In those cases, we ﬁnd that we can use p = k2 − 1 and
with 50% probability, the client will compute gx = k,
allowing the attack to succeed. This weakness in TLS-
DHE has been noted before [6] and a new protocol
extension aims to ﬁx it by allowing only well-known
Difﬁe-Hellman groups [12]. However, an optional ex-
tension cannot prevent our attack scenario, since A
could always pretend to not support the extension and
mount the attack anyway.
Note that the attack only relies on DHE between
C and A; the connection between A and S can use
ECDHE or RSA and the attack would still work. In
other words, such transcript collisions can also be used
to mount cross-protocol attacks in the sense of [26].
Attack Complexity The transcript collision attack
requires A to compute a chosen-preﬁx collision for
the hash function used in the client signature. In TLS
Fig. 4. Man-in-the-middle client signature forwarding attack on TLS
1.2. The client C connects to a malicious server A and offers to
authenticate with its certiﬁcate cert C. The attacker A computes a
chosen-preﬁx collision on the client signature transcript hash(log 1),
and uses it to impersonate the client at a different server S. Messages
that the attacker controls are labeled in red. A sends a bogus Difﬁe-
Hellman group (k2 − k, k) to C; we use k = g here for simplicity.
such that C1 appears within the last distinguished name
dn(cid:48) in SCR(cid:48) and C2 appears within the last extension
ex(cid:48)
c in CH(cid:48):
hash(CH|SH(cid:48)|SC(cid:48)|SKE(cid:48)|SCR(cid:48)(C1|−(cid:124)(cid:123)(cid:122)(cid:125)
= hash(CH(cid:48)(nc, C2(cid:124)(cid:123)(cid:122)(cid:125)
dn(cid:48)
))
))
ex(cid:48)
c
Furthermore, we set the length of dn(cid:48) in SCR(cid:48) to be
L1 + M, so that it still has M bytes (denoted by −)
that need to be ﬁlled in after C1.
Now, A sends CH(cid:48) to S, receives SH|SC|SKE|SCR in
response, and stuffs these messages into the remaining
M bytes in SCR(cid:48) and sends it to C. At this point the
hash of the message transcripts in the two connections
coincide, assuming that the hash function satisﬁes the
length extension property:
hash(CH|SH|SC(cid:48)|SKE(cid:48)|SCR(cid:48)(C1|SH|SC|SKE|SCR
))
(cid:125)
(cid:124)
(cid:123)(cid:122)
dn(cid:48)
)|SH|SC|SKE|SCR)
= hash(CH(cid:48)(nc, C2(cid:124)(cid:123)(cid:122)(cid:125)
ex(cid:48)
c
From this message onwards, the hash of the handshake
log in both connections will remain the same. A then
forwards the sever hello done SHD to C. In response,
C sends a certiﬁcate CC, a key exchange CKE, and
a certiﬁcate verify CCV that contains a signature over
the transcript hash(log c
1) which is now the same as
7
the default hash function is a
versions before 1.2,
concatenation of MD5 and SHA-1 and hence requires
computing 277 MD5 and SHA-1 hashes. In TLS 1.2,
if the signature uses SHA-1, the cost is 277 hashes.
Remarkably, TLS 1.2 also allows RSA-MD5 signatures,
and for such signatures, the cost of the collision is
only 239 MD5 hashes. Below, we describe our proof-
of-concept implementation that relies on RSA-MD5.
Note that these cost estimates are per-connection be-
cause the collision needs to be computed once for each
client nonce nc. Usually, these nonces are generated
with a strong random number generator. However, in
some cases the client random can become predictable
due to implementation bugs (e.g. see CVE-2015-0285
in OpenSSL). We also observe that it is commonly
believed that these nonces only need to be unique, not
unpredictable. For example, the OpenSSL library uses
RAND_pseudo_bytes to generate the client and server
random, whereas it uses RAND_bytes to generate other
key material; the former succeeds even when there is
not enough entropy in the system. If the client nonce
were predictable, or if it were to be repeated with
high frequency, the collision can be computed ofﬂine at
leisure, making SHA-1 collisions almost feasible. Even
though our attack below does not rely on predictable
nonces, it offers yet another justiﬁcation for the need
for strongly random nonces in TLS.
Implementing a Proof-Of-Concept To implement the
attack, we need a client that is willing to sign with
RSA-MD5 and a server that is willing to accept such
signatures. We found a number of TLS libraries that
support RSA-MD5 client signatures, including certain
versions of OpenSSL, GnuTLS, Oracle and IBM Java,
and BouncyCastle. (See Section VII for more details.)
In particular, all major Java web application servers and
the default TLS servers on Red Hat Enterprise Linux (6
and 7) accept RSA-MD5 signatures.
For our demo, we set up a man-in-the-middle attack
between a standard Java HTTPS client and a Java
HTTPS server (with default conﬁgurations.) The MitM
implements Figure 4. In order to setup the collision
while preserving the TLS message formats, the attacker
needs to carefully set the length ﬁelds in various places
in CH(cid:48) and SCR(cid:48). For example, in CH(cid:48) it needs to set
consistent lengths for the full hello message, for the
extensions ﬁeld, and for the last extension. Furthermore,
the MitM needs to make sure that the two preﬁxes have
a length that is a multiple of the MD5 block size (512
bits). To achieve this, we ﬁll up the last extension in
CH(cid:48) and the last distinguished name in SCR(cid:48) with enough
zero bytes until the preﬁxes are block-aligned.
As explained in Section III, the chosen-preﬁx col-
lision can be be computed in one hour on a 48 core
workstation using a modiﬁed version of the hashclash
software [33]. In our demo, A accepts the client hello
and then keeps the client-side TLS connection alive
until a collision has been found. Most TLS connections
can be kept alive by sending regular warning alerts;
Java clients are willing to keep the connection open
indeﬁnitely. Keeping the client waiting for an hour is not
always practical, but we note that some unsupervised
TLS clients (such as git) are used to perform long-
running connections to web APIs, and long connection
times may not be noticed. In any case, the collision
search scales well with computational power and can
be signiﬁcantly sped up by a powerful adversary.
Once the collision has been found, A connects to S
to completes the attack and is able to impersonate C
at S and read and write data that only C should have
access to. Hence, the demo shows that A is able to
break TLS 1.2 client authentication between mainstream
TLS clients and servers. The precise handshake traces
exhibiting the collision are available from our website.
B. Breaking TLS 1.2 Server Authentication
using a Generic Transcript Collision
The key to our attack above on TLS 1.2 client
authentication is that the client is willing to sign the hash
of the full message log, and the format of various TLS
messages is ﬂexible enough to allow the attacker to stuff
meaningless collision blocks and server-side messages
into them. A similar chosen-preﬁx transcript collision
attack would not work on TLS 1.2 server authentication
because the server signature transcript does not contain
ﬂexible-size elements.
In DHE handshakes, the signature covers only the
client and server nonces and the server’s Difﬁe-Hellman
key share: sign(sk S, hash(nc|ns|p|g|gy)). So, the only
part of the signed value that the attacker may control
is the client nonce nc which is ﬁxed-length (32 bytes),
half the size of one MD5 block.
This prevents the use of shortcut collision attacks
against MD5, but generic attacks based on the small
128-bit MD5 hash length are still possible, and not too
far from being practical.
Collecting and storing signatures. To mount a tran-
script collision attack on TLS 1.2 server authentication,
an attacker ﬁrst has to collect a large number, say
2x, of RSA-MD5 signatures signed by the server. The
attacker may do this by passively observing RSA-MD5
connections to the server, but since such connections
may be rare, it may have to actively connect to the
server to obtain a sufﬁcient number of signatures. Once
these signatures (and the corresponding hashes) have
been collected and stored, the attacker can impersonate
the server to any client.
8
Upon receiving a client hello message including
the client nonce nc, the attacker chooses a DH secret
y(cid:48) and computes the MD5 hashes of the transcripts
nc|ns|p|g|gy(cid:48)
for a series of random server nonces
ns, until the hash matches a value that was collected
previously. Finding this collision requires the attacker
to compute about 2128−x MD5 hashes and then look
them up in the stored signature database. When a
match is found, the stored signature can be used by
the attacker to forge the server’s SKE message for the
current connection, and hence impersonate the server.
The complexity of this attack on TLS 1.2 server
authentication is therefore 2128−x MD5 hashes per
connection, in addition to 2x connections performed
before-hand, and 2x storage. The attacker can trade-off
between these costs—the more signatures he can collect,
the less he has to compute per connection. For example,
if it is feasible to collect, store, and search through 264
signatures, then the per-connection cost is 264 hashes.
Although we have described the attack in terms of MD5,
a similar but more expensive attack can be mounted
on RSA-SHA1 server signatures, which would require
2160−x computation per-connection.
Practical Impact of the Attack. Both the precompu-
tation and per-connection cost of the attack is currently
out of reach for academic researchers, but might be
within the capabilities of well-resourced adversaries.
A prerequisite for the attack is to ﬁnd servers that
would be willing to sign their SKE messages with
RSA-MD5. Internet-wide scans show that about 31%
of the Alexa top 1 million websites support RSA-
MD5 signatures.1 This subset includes popular websites
hosted by Akamai, such as microsoft.com.
A second question is whether TLS clients would ac-
cept RSA-MD5 signatures. Most popular web browsers
and TLS libraries do not offer RSA-MD5 as one of
the supported signature algorithm in the client hello.
This might lead one to believe that they would not
accept RSA-MD5 server signatures. However, we found
and reported security bugs in NSS (the library used
by Firefox and some versions of Chrome), GnuTLS
(used in curl and git), and BouncyCastle; these libraries
(and applications that rely on them) incorrectly accept
RSA-MD5 signatures even if they have been explicitly
disabled. For example, Firefox will accept an RSA-MD5
signature from a website, even though it is not supposed
to. Furthermore, other TLS libraries such as versions of
OpenSSL (up to version 1.0.1e), mbedTLS, and Java
routinely offer and accept RSA-MD5 signatures.
Conseqently,
if an attacker has the resources to
achieve the server impersonation attack, a large number
1https://securitypitfalls.wordpress.com/2015/12/07/november-
2015-scan-results/