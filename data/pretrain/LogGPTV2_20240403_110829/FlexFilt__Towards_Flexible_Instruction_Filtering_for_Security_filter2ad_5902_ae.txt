655FlexFilt: Towards Flexible Instruction Filtering for Security
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
to the context switch overhead, we measured the total execution
time overhead of each benchmark. We ran each benchmark three
times and determined the geometric mean of the execution times.
Table 4 shows the performance overhead of maintaining FlexFilt’s
information during each context switch. On average, FlexFilt in-
creases the execution time of each context switch by 2.23% and
2.34% for SPECint2000 and SPECint2006 benchmarks, respectively.
However, the time spent in context switches for most workloads is
negligible (e.g., 0.50% on average for the SPECint2000 benchmarks).
As expected, the context switch overhead is in a similar range for
various benchmarks. As the number of context switches varies
across different benchmarks, the total performance overhead of
FlexFilt is different for each benchmark. However, FlexFilt’s overall
performance overhead is negligible (Table 4). In this experiment,
we used 9 applications from SPECint2000 and 9 applications from
SPECint2006 benchmark suites; however, as the amount of FlexFilt’s
information maintained during context switches is independent of
the benchmark, we expect similar context switch overheads in any
application.
7.4 FPGA Resource Utilization
In our FPGA prototype, the maximum frequency for the unmodified
RISC-V Rocket core is 25MHz. The RISC-V Rocket core enhanced
with FlexFilt operated with the same maximum frequency. Hence,
our microarchitectural modifications did not negatively affect the
critical path. Table 5 shows the FPGA resource utilization of an
enhanced Rocket core with FlexFilt compared to the baseline Rocket
core. Accordingly, as FlexFilt has less than 1% area overhead, we
estimate the power overhead of FlexFilt to be negligible.
7.5 Comparison with a Hardware Monitor
In Section 2.3, we discussed prior hardware monitors and their
potential capabilities in preventing the execution of target instruc-
tions at runtime. To the best of our knowledge, among the prior
hardware monitors, i.e., PUMP [20], FlexCore [18], Harmoni [19],
and PHMon [16], only PHMon is open-source [9]. In this section,
Table 4: Performance overhead of FlexFilt due to maintain-
ing FlexFilt’s information during context switches.
Benchmark Suite
Applications
Average Increase in Context
Switch Execution Time
Overall Execution
Time Overhead
SPECint2000
SPECint2006
bzip2
crafty
gap
gcc
gzip
mcf
parser
twolf
vpr
astar
bzip2
gcc
gobmk
h264ref
hmmer
Geometric Mean
libquantum
omnetpp
xalancbmk
Geometric Mean
2.97%
2.16%
2.49%
1.70%
2.44%
2.26%
2.14%
2.27%
1.88%
2.23%
2.21%
3.06%
3.63%
2.04%
0.82%
3.23%
2.95%
2.07%
2.66%
2.34%
0.03%
0.04%
0.15%
0.07%
0.05%
0.17%
0.06%
0.00%
0.09%
0.09%
0.09%
0.04%
0.08%
0.09%
0.05%
0.05%
0.10%
0.01%
0.09%
0.06%
Table 5: The FPGA utilization of the Rocket core enhanced
with FlexFilt compared to the baseline Rocket core.
Total Slice Luts
Luts as logic
Luts as Memory
Slice Registers as Flip Flop
Baseline
#Used % Utilization
32030
30907
1123
16506
60.21
58.1
6.45
15.51
Rocket Core + FlexFilt
#Used % Utilization
32584
31409
1175
17056
61.25
59.04
6.75
16.03
we provide a quantitative comparison between FlexFilt and PHMon
for filtering target instructions.
PHMon requires a Match Unit (MU) to prevent the execution
of target instructions in each Contiguous Memory Range (CMR).
As a head-to-head comparison, we consider a scenario where we
need to prevent the execution of a target instructions, e.g., a custom
instruction, in an untrusted domain spanning through four separate
CMRs. To filter the target instruction using FlexFilt, we define an
instruction domain by assigning the same instruction protection key
to the corresponding pages of the four CMRs. Then, we configure
one of our Flexible Filters with the target instruction and
enable this filter for our defined instruction domain. To filter the
target instruction using PHMon, we use 4 MUs and program each
MU to monitor the execution of the target instruction in the address
range of one of the CMRs. Both FlexFilt and PHMon can prevent
the execution of the target instruction with negligible performance
overhead. However, FlexFilt has considerably lower area overhead
compared to PHMon. According to the resource utilization on our
Zedboard FPGA, FlexFilt and PHMon (configured with 4 MUs)
increase the number of Slice LUTs by ∼1% and 27%, respectively,
over the baseline Rocket core. PHMon’s area overhead increases
(almost) linearly with the number of MUs. To support 16 domains
of CMRs, PHMon requires 16 MUs, which is expected to result
in ∼93% increase in the number of Slice LUTs over the baseline
Rocket core.4 In contrast to PHMon, FlexFilt is applicable at page
granularity and FlexFilt’s overheads are regardless of the number
of CMRs. Each of FlexFilt’s 16 instruction domains can be applied
to any number of contiguous or noncontiguous pages.
8 DISCUSSION AND FUTURE WORK
We configure FlexFilt once a process gets loaded (or during
LD_PRELOAD). To prevent further modifications to FlexFilt’s config-
uration, the software developer can leverage one of the Flexible
Filters to prevent the execution of the configuration custom in-
structions. This Flexible Filter can be sealed at hardware level
from further modifications. As a result, once the process is loaded
and FlexFilt is configured, any further execution of the configuring
custom instructions causes an exception.
In previous sections, we discussed FlexFilt’s capability in filtering
the execution of target instructions in untrusted parts of the code.
FlexFilt allows the execution of target instructions in trusted parts of
the code. However, an adversary might leverage the vulnerabilities
in untrusted parts of the code (e.g., buffer overflow) to launch a
control-flow hijacking attack and execute the target instructions.
4We estimate this number based on interpolation as we were able to fit PHMon with
the maximum of 5 MUs into our Zedboard FPGA.
656ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
To prevent such attacks, we can protect the entrance and exit points
of trusted functions using trampolines or call gates.
In addition to preventing the execution of known unsafe in-
structions in untrusted code, FlexFilt enables us to prevent the
execution of previously safe instructions as they turn into unsafe
instructions (e.g., CFLUSH) due to evolving security attacks. For ex-
ample, cache-based side channel attacks such as FLUSH+RELOAD
and FLUSH+FLUSH frequently use the CFLUSH instruction as part
of their attacks. FlexFilt can prevent the execution of CFLUSH in
untrusted parts of code to defend against such side channel attacks.
Although FlexFilt requires hardware modifications to an existing
processor, our FPGA resource utilization results indicate that these
changes are small compared to the in-order Rocket processor (∼ 1%
area overhead). In this paper, we provide a proof-of-concept imple-
mentation of our design in an open-source RISC-V environment.
Implementing FlexFilt in other architectures requires hardware
modifications, which could potentially be challenging (e.g., depend-
ing on the microarchitecture complexity) as these architectures
are not openly available. The memory protection key support al-
ready exists in modern x86 and ARM architectures, which can be
extended to implement instruction protection keys. Additionally,
FlexFilt requires four flexible filters, which have to be integrated
into a processor’s pipeline.
In Appendix A, we discuss the filtering capabilities of our
Flexible Filters in detail. Although our Flexible Filters
enable a software developer to filter instructions at bit granularity,
our current design cannot prevent the execution of target instruc-
tions based on the contents of a target instruction’s operands or the
contents of a memory address accessed by the target instruction.
We can enhance the filtering capability of our design by expanding
our bit-granular matching/masking mechanism to be applied to the
contents of rs1, rs2, rd, and the corresponding memory address
according to the the type of the target instruction. However, such a
design will increase the width of our filters from 32 bits to 288 bits
and requires FlexFilt to be applied at the write-back stage of the
processor’s pipeline. As part of our future work, we will investigate
the area overhead/flexibility trade-off by considering design knobs
such as four additional filters for contents of rs1, rs2, rd, and mem-
ory address versus one additional configurable filter applicable to
either.
9 CONCLUSION
In this paper, we presented an efficient and flexible hardware-
assisted feature, called FlexFilt, for runtime filtering of user-
specified instructions at page granularity. Our flexible hardware-
assisted feature can be used in a variety of security use cases that
need to prevent the execution of certain unsafe instructions in
untrusted parts of the code. We demonstrated the advantage of
FlexFilt over binary scanning/binary rewriting approaches by mea-
suring the number of JIT bytes generated while browsing various
webpages with Chromium. We implemented a practical FPGA pro-
totype of our design and provided the Linux kernel support for
it.
ACKNOWLEDGMENTS
This material is based upon work supported by the National Science
Foundation under Grant No. CNS-1916393.
REFERENCES
[1] Amazon. 2020. The top 500 sites on the web. [online] https://www.alexa.com/
topsites.
[2] Krste Asanovic, Rimas Avizienis, Jonathan Bachrach, Scott Beamer, David Bian-
colin, Christopher Celio, Henry Cook, Daniel Dabbelt, John Hauser, Adam Izraele-
vitz, et al. 2016. The Rocket Chip generator. EECS Department, UCB, Tech. Rep.
UCB/EECS-2016-17 (2016).
[3] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad
Ganesh, Jia Ma, and Wenbo Shen. 2014. Hypervision across worlds: Real-time
kernel protection from the arm trustzone secure world. In Proceedings of the ACM
Conference on Computer and Communications Security (CCS). 90–102.
[4] Ahmed M Azab, Kirk Swidowski, Rohan Bhutkar, Jia Ma, Wenbo Shen, Ruowen
Wang, and Peng Ning. 2016. SKEE: A lightweight Secure Kernel-level Execution
Environment for ARM. In Proceedings of Network & Distributed System Security
Symposium (NDSS). 21–24.
[5] Jonathan Bachrach, Huy Vo, Brian Richards, Yunsup Lee, Andrew Waterman,
Rimas Avižienis, John Wawrzynek, and Krste Asanović. 2012. Chisel: constructing
hardware in a scala embedded language. In Proceedings of ACM Design Automation
Conference (DAC). 1212–1221.
[6] Erick Bauman, Zhiqiang Lin, Kevin W Hamlen, et al. 2018. Superset Disassembly:
Statically Rewriting x86 Binaries Without Heuristics. In Proceedings of Network
& Distributed System Security Symposium (NDSS).
[7] Adam Belay, Andrea Bittau, Ali Mashtizadeh, David Terei, David Mazières, and
Christos Kozyrakis. 2012. Dune: Safe user-level access to privileged CPU fea-
tures. In Proceedings of USENIX Symposium on Operating Systems Design and
Implementation (OSDI). 335–348.
[8] Darrell Boggs, Gary Brown, Nathan Tuck, and KS Venkatraman. 2015. Denver:
Nvidia’s first 64-bit ARM processor. IEEE Micro 35, 2 (2015), 46–55.
[9] BU-ICSG. 2020. PHMon. [online] https://github.com/bu-icsg/PHMon.
[10] Yaohui Chen, Sebassujeen Reymondjohnson, Zhichuang Sun, and Long Lu. 2016.
Shreds: Fine-grained execution units with private memory. In Proceedings of IEEE
Symposium on Security and Privacy (S&P). 56–71.
[11] Marc L Corliss, E Christopher Lewis, and Amir Roth. 2003. DISE: A programmable
macro engine for customizing applications. In Proceedings of Annual International
Symposium on Computer Architecture (ISCA). 362–373.
[12] Arthur Azevedo De Amorim, Maxime Dénès, Nick Giannarakis, Catalin Hritcu,
Benjamin C Pierce, Antal Spector-Zabusky, and Andrew Tolmach. 2015. Micro-
policies: Formally verified, tag-based security monitors. In Proceedings of the IEEE
Symposium on Security and Privacy (S&P). 813–830.
[13] James C Dehnert, Brian K Grant, John P Banning, Richard Johnson, Thomas