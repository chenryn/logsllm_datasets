PROGBITS
PROGBITS
00000000
00000000
000098
00009c
00002a
000004 00
. comment
00
A
0
1
[  7]
.note.GNU-stack
PROGBITS
000000000000c6
,8h8trtab
STRTAB
00000000
0000c6
000 000000
[8]
000051
000
0
0
[ 9]
. symtab
SYMTAB
000000000002d0
0000f0 10
10 10
1
[10].strtab
STRTAB
00000000 0003c0 000066 00 0
Key to Plags:
01
(write), A (alloc), X (execute), M (merge], S (strings)
0 (extra 0s processing required) o (0s specific). p (processor specific)
I (info), L (link order), G (group), x (unknowm)
readelf输出的结果就是ELF文件段表的内容，那么就让我们对照这个输出来看看段表
的结构。段表的结构比较简单，它是一个以“EIf32_Shdr”结构体为元素的数组。数组元素
的个数等于段的个数，每个“Ef32_Shdr”结构体对应一个段。“EIf32_Shdr”又被称为段描
述符（Section Descriptor），对于 SimpleSection.o来说，段表就是有11个元素的数组。ELF
段表的这个数组的第一个元素是无效的段描述符，它的类型为“NULL”，除此之外每个段
描述符都对应一个段。也就是说SimpleSectiono共有10个有效的段。
数组的存放方式
ELF文件里面很多地方采用了这种与段表类似的数组方式保存。一般定义一个固定长
度的结构，然后依次存放。这样我们就可以使用下标来引用某个结构。
Elf32_Shdr 被定义在“/usr/include/elf.h”，代码如清单3-3所示。
清单3-3EI32_Shdr段播述符结构
typedef struct
E1f32_word
sh_name;
E1f32_ord
B1f32_ord
sh_type:
E1f32_Addr
sh_flags;
sh_addr;
E1f32_off
sh_offset;
E1f32_word
E1f32_word
sh_link:
sh_size:
E1f32_word
sh_addra1ign:
sh_info1
E1f32_word
E1f32_word
sh_entsize;
)E1f32_Shdr;
Elf32_Shdr的各个成员的含义如表3-7所示。
程序员的自我修养——链接、装载与库
---
## Page 99
76
第3章目标文件里有什么
表3-7
sh_name
Section name 税名
段名是个字符串、它位于一个叫做“shstrtab”的字符串表。sh_name是段名
字符串在“shstrtab”中的偏移
sh_type
Sectiontype 段的类型
详见后文“我的类型”
sh_flags
Section flag 段的标志位
详见后文“段的标志位”
appes
Section Address段虚拟地址2
如果该段可以被加载，则sh_addr为试段被加载后在进程地址空间中的虚拟
地址：否则 sh_addr 为 0
sh_offset
Section Offset 段偏移
如果该段存在于文件中，则表示该段在文件中的偏移：否则无意义，比如
sh_offset对于BSS段来说就没有意义
sh_size
Section Size 段的长度
sh_link 和
Section Link and Section Information 段链接信也
sh_info
详见后文“投的链接信息”
sh_addralign
Section Address Alignment 段地址对齐
有些段对段地址对齐有要求，比如我们假设有个段刚开始的位置包含了一个
double变量，固为Intelx86系统要求浮点数的存储地址必须是本身的整数倍，
也就是说保存double变量的地址必须是8字节的整数倍，这样对一个段来
说，它的 sh_addr 必须是 8 的整数倍，
由于地址对齐的数量都是2的指数倍，sh_addralign表示是地址对齐数量中
的指数，即sh_addrlign=3表示对齐为2的3次方倍，即8倍，依此类推，
所以一个段的地址 sh_addr必须满足下面的条件，即 sh_addr %（2 **
sh_addralign)=0.**表示指数运算。
如果sh_addraliga为0或1，则表示该段没有对齐要求
sh_entsize
Section Entry Size 项的长度
有些段包含了一些国定大小的项，比如持号表，它包含的每个并号所占的大
小都是一样的，对于这种段，sh_entsize表示毒个项的大小，如果为0，则表
示该段不包含固定大小的项
注1：事实上段的名字对于编译器、链接器来说是有意叉的，但是对于操作系统来说并没有实质的意义，对于操作
系统来说，一个投该如何处理取决于它的属性和权限，即由税的类型和提的林志位这两个成员决定。
注2：关予这些字段，涉及一些映像交作的加载的概念，我们特在本多的第2都分详细介绍其相关内容，读者也可
以先闭读第2部分的最前面一章“可执行文件的装载与通程”，了解一下加鼠的概念，然后再来阅读美于投的虚起文
小和虚拟地址的内容，当然，如果读考对映像文佛加载过程比较热悉，应该很容易理解这些内容，
让我们对照EIf32_Shdr和“readelf-S”的输出结果，可以很明显看到，结构体的每一个
成员对应于输出结果中从第二列“Name”开始的每一列。于是SimpleSection的段表的位置
如图3-6所示。
程序员的自我修养一链接、装载与库
---
## Page 100
3.4ELF文件结构描述
77
到了这一步，我们才彻彻底底把SimpleSection的所有段的位置和长度给分析清楚了，
在图3-6中，SectionTable长度为0x1b8，也就是440个字节，它包含了11个段描述符，每
个段描述符为40个字节，这个长度刚好等于sizeo(EHf32_Shdr)，符合段描述符的结构体长
度：整个文件最后一个段“rel.text”结束后，长度为0x450，即1104字节，即刚好是
段之间分别有一个字节和两个字节的间隔。
ELF Header
00000000X0
e_shoff = 0x118.
0x00000034
q9x0
.text
0x08
.data
0x00000090
0x00000098
0x0
rodata
06000000
0x2a
comment
900000x0
0x51
shstrtab
0x00000117,
0x1b8
Section Table
0x00000118
0x000002d0
0x66
-symtab
0x00000426
0x00000428
0x28
Cx34
rel.text
0x00000450
图3-6SimpleSection.o的 SectionTable及所有段的位置和长度
段的类型（sh_type）正如前面所说的，段的名字只是在链接和编译过程中有意义，但
它不能真正地表示段的类型，我们也可以将一个数据段命名为“texi”，对于编译器和链接
器来说，主要决定段的属性的是段的类型（sh_lype）和段的标志位（sh_flags）。段的类型相
关常量以SHT_开头，列举如表3-8所示。
表3-8
常量
值
含义
SHT_NULL
0
无效段
SHT_PROGBITS
1
程序段，代码段，数据股都是这种类型的
SHT_SYMTAB
2
表示该段的内容为符号表
程序员的自我修养—链接、装载与库
---
## Page 101
78
第3章目标文件里有什么
续表
常量
含义
SHT_STRTAB
3
表示该段的内容为字符串表
SHT_RELA
重定位表，该段包含了重定位信息，具体参考“静态地址决议
4
和重定位”这一节
SHT_HASH
5
符号表的哈希表，见“符号表”这一节
SHT_DYNAMIC
6
动态链接信息具体见“动态链接”一章
SHT_NOTE
7
提示性信息
SHT_NOBITS
8
表示该段在文件中没内容，比如，bss段
SHT_REL
该段包含了重定位信息，其体参考“静态地址决议和重定位”
9
这一节
SHT_SHLIB
10
保额
SHT_DNYSYM
11
动态链接的符号表，具体见“动态链接”一章
段的标志位（sh_flag）段的标志位表示该段在进程虚拟地址空间中的属性，比如是否
可写，是否可执行等。相关常量以SHF_开头，如表3-9所示。
表3-9
常量
值
含义
SHF_WRITE
表示谊段在进程空间中可写
表示该段在进程空间中须要分配空间，有些包含指示或控制
SHF_ALLOC
2
信息的段不须要在进程空间中被分配空间，它们一般不会有
这个标志，像代码段、数据段和，bss段都会有这个标志位
SHF_EXECINSTR
4
表示该段在进程空间中可以被执行，一般指代码段
对于系统保留段，表3-10列举了它们的属性。
表3-10
Name
sh_type
sh_fing
.bss
SHT_NOBITS