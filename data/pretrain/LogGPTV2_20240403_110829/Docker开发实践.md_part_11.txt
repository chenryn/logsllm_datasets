4.3 容器连接 61
接下来，我们通过一个Web应用来说明容器连接。一个web容器包含Web应用，它需要使用另
1
外一个dbdata容器的数据库服务，它们之间采用连接互联。
首先，建立一个数据库容器dbdata，相关操作为： 2
$ docker run -d --name dbdata training/postgres
3
然后，建立一个Web容器web，将其连接到dbdata容器，具体操作为：
$ docker run -d -P --name web --link dbdata:db training/webapp python app.py 4
这条命令以training/webapp镜像来创建名为web的容器，容器通过--link链接dbdata，连接
5
的别名为db。-P参数表明端口映射是随机进行的。通过该条命令，web容器和dbdata容器就成功
建立了连接。
6
接着，通过docker inpsect命令，看到和连接相关的字段，具体如下：
$docker inspect web 7
...
"Links": [
"/dbdata:/web/db" 9
],
...
8
这里记录了本容器的连接关系。
通过这种方式，dbdata容器为web容器提供了服务，但并没有像-P（或者-p）参数那样，让 10
容器对外暴露端口，这使得源容器dbdata更安全。既然web容器和dbdata容器之间已经建立了连接，
那么web是如何使用dbdata的服务的呢？ 10
Docker给目标容器提供了如下两种方式来暴露连接提供的服务：
11
 环境变量；
 /etc/hosts文件。
13
下面我们分别说明它们。
1. 环境变量 14
当两个容器通过连接互联之后，Docker将会在目标容器中设置相关的环境变量，以便在目标
15
容器中使用源容器提供的服务。连接环境变量的的命名格式为_NAME，其中alias是--link
参数中的别名。例如web容器连接dbdata容器，参数为--link dbdata:webdb，那么在web容器中则
16
有环境变量WEBDB_NAME=/web/webdb。
一般情况下，可以使用env命令来查看一个容器的环境变量，相关代码为：
17
$ docker run --rm --name web2 --link dbdata:webdb training/webapp env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
18
HOSTNAME=ae63f23dc769
62 第4章 数据卷及容器连接
WEBDB_PORT=tcp://172.17.0.32:5432
WEBDB_PORT_5432_TCP=tcp://172.17.0.32:5432
WEBDB_PORT_5432_TCP_ADDR=172.17.0.32
WEBDB_PORT_5432_TCP_PORT=5432
WEBDB_PORT_5432_TCP_PROTO=tcp
WEBDB_NAME=/web2/webdb
WEBDB_ENV_PG_VERSION=9.3
HOME=/
可以看到，和连接相关的前缀都是WEBDB。除了刚刚说到的WEBDB_NAME，还有很多PORT相关
的环境变量—— _PORT__，其中是--link的别名（webdb），port是
暴露的端口，是TCP或者UDP协议。例如，上面案例中的WEBDB_PORT_5432_TCP=tcp://
172.17.0.32:5432，该等式的右边是一个URL，其格式为://:
（例如tcp://172.17.0.32:5432），而这个URL会分成三部分。
 _PORT___ADDR：地址。
 _PORT___PORT：端口。
 _PORT___PROTO：协议。
2. /etc/hosts文件
查看目标容器的/etc/hosts配置文件，具体操作如下：
$ docker run -i -t --rm --name web2 --link dbdata:webdb training/webapp /bin/bash
root@ad5dc3c7378d:/opt/webapp# cat /etc/hosts
172.17.0.8 ad5dc3c7378d
127.0.0.1 localhost
::1 localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.32 webdb
可以看到，容器连接webdb对应的地址为172.17.0.32，该地址实为dbdata容器的地址，容器对
webdb连接的操作将会映射到该地址上。
4.3.3 代理连接
在上一节中，我们讲到的容器连接都是在一个宿主主机上的连接。就目前而言，对于跨主机
的容器连接，Docker并没有给出有效的方法。在Docker的官方网站上，我们看到利用ambassador
模式可以实现跨主机连接，我们称这种模式的连接叫作代理连接。
通过代理连接，可以解耦两个原本直接相连的容器的耦合性。下面看一个例子，如图4-2所
示，redis-client是客户端容器，它需要使用redis-server容器提供的服务，它们之间采用直接相连
的方式进行连接。
4.3 容器连接 63
1
图4-2 redis-client直接依赖redis-server
2
这种直接相连存在两个问题。
3
 不能够跨主机连接。
 耦合性太高。假如redis-client需要连接到新的redis-server，那么必须先重启redis-client容器
4
本身。容器重启意味着容器内部所有应用和服务的中断，这在实际产品环境中有时候是
成本太高，有时候根本不允许。所以，我们需要一种方法来解耦二者的关系，使得
5
redis-client无需关心它连接到的是哪一个redis-server。
通过代理连接，可以实现如图4-3所示的连接。客户端主机上的redis-client容器连接到同一主
6
机的ambassador 1代理容器，ambassador 1容器通过网络连接到服务器主机上的ambassador 2代理
容器，ambassador 2容器连接到redis-server容器，最终实现redis-client容器使用主机2上redis-server
7
提供的redis服务。
9
8
10
图4-3 通过两个代理进行连接
10
接下来，我们一步步说明如何建立上述代理连接。
11
(1) 在服务器主机上启动一个装有redis服务的容器，具体操作为：
server$ sudo docker run -d --name redis crosbymichael/redis 13
(2) 在服务器主机上建立一个代理容器ambassador 2，将它连接到redis-server，具体操作为：
14
sudo docker run -d --link redis:redis --name ambassador2 -p 6379:6379 ambassador
(3) 客户端主机上包含容器redis-client，它需要使用redis-server容器中的redis服务。我们需要
15
先建立一个代理容器ambassador 1，将它连接到服务器主机的代理容器ambassador 2。具体如下：
client$ sudo docker run -d --name redis_ambassador --expose 6379 -e 16
REDIS_PORT_6379_TCP=tcp://192.168.1.52:6379 svendowideit/ambassador
(4) 在客户端主机上如果需要使用redis服务，则只需要连接到本机的redis_ambassador容器，
17
具体操作为：
18
client-server $ sudo docker run -i -t --rm --link redis_ambassador:redis
64 第4章 数据卷及容器连接
relateiq/redis-cli
redis 172.17.0.160:6379> ping
PONG
这样就可以直接使用redis服务了。
总结上面的步骤，通过代理连接，我们就完成了一次跨主机的容器连接。
Part 2
第二篇
案例篇 ：综合案例
本 篇 内 容
第5章 创建SSH服务镜像
第6章 综合案例1：Apache+PHP+MySQL
第7章 综合案例2：DLNNM
第8章 阿里云Docker开发实践
第9章 在阿里云上部署WordPress
第10章 使用私有仓库
第11章 使用Docker部署Hadoop集群
66 第5章 创建SSH服务镜像
第 5 章
创建SSH服务镜像
在第2章中，我们介绍了在容器内部管理容器的命令，例如attach、exec等，但是这些命令
无法解决远程管理容器的需求。在现实环境中，服务器都在远端的机房，Linux系统管理员需要
通过SSH服务连接到远端系统进而管理系统。Docker的很多系统镜像并没有安装SSH服务，这就
要求我们自己为其安装SSH服务。
本章将具体介绍如何通过如下两种方式来构建带SSH服务的系统容器：
 基于commit命令的方式；
 基于Dockerfile的方式。
5.1 基于 commit 命令的方式
Docker的commit命令提供了将用户修改过的容器提交成为新镜像的功能。现在，我们就使用
docker commit命令来生成支持SSH服务的镜像。
1. 准备工作
我们的目标镜像是以ubuntu:14.04为基础的，首先使用ubuntu:14.04镜像创建一个新的容器：
$ sudo docker run -it ubuntu /bin/bash
执行该命令后，我们已经进入容器的命令终端。
接下来，配置容器内系统的软件源。由于系统默认的软件源服务器都在国外，下载速度可能
会很慢，所以可以使用国内的源，常用的有163、sohu等，教育网的用户可以使用电子科技大学、
北京理工大学的源，这里我们使用的是163的源。其他版本的系统或其他的源可以自行到网上搜
索。将下面的内容追加到/etc/apt/sources.list文件后面：
deb http://mirrors.163.com/ubuntu/ precise main universe restricted multiverse
deb-src http://mirrors.163.com/ubuntu/ precise main universe restricted multiverse
deb http://mirrors.163.com/ubuntu/ precise-security universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-security universe main multiverse restricted
deb http://mirrors.163.com/ubuntu/ precise-updates universe main multiverse restricted
deb http://mirrors.163.com/ubuntu/ precise-proposed universe main multiverse restricted
5.1 基于commit命令的方式 67
deb-src http://mirrors.163.com/ubuntu/ precise-proposed universe main multiverse restricted
1
deb http://mirrors.163.com/ubuntu/ precise-backports universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-backports universe main multiverse restricted
deb-src http://mirrors.163.com/ubuntu/ precise-updates universe main multiverse restricted
2
然后执行sudo apt-get update命令，更新安装源。
3
2. 安装和配置SSH服务
更新完安装源后，就可以安装SSH服务了。使用apt-get安装openssh-server：
4
root@9598cb8e8f4a:/# apt-get install openssh-server
Reading package lists... Done
5
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
6
ca-certificates krb5-locales libck-connector0 libedit2 libgssapi-krb5-2
libidn11 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0
libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libwrap0 libx11-6
7
libx11-data libxau6 libxcb1 libxdmcp6 libxext6 libxmuu1 ncurses-term
...
Processing triggers for ca-certificates (20130906ubuntu2) ...
Updating certificates in /etc/ssl/certs... 164 added, 0 removed; done. 9
Running hooks in /etc/ca-certificates/update.d....done.
Processing triggers for ureadahead (0.100.0-16) ...
root@9598cb8e8f4a:/# 8
安装的输出有很多。可以看到，有许多依赖包要安装，但apt都将会自动为你安装好。
10
虽然SSH服务安装好了，但是现在还运行不了SSH服务，因为SSH需要的一个目录/var/run/
sshd不存在。这里手动创建该目录：
10
root@9598cb8e8f4a:/var/run# mkdir -p /var/run/sshd
11
接着，以后台方式启动SSH服务：
root@9598cb8e8f4a:/var/run# /usr/sbin/sshd -D &
13
[1] 3263
SSH默认监听22端口。为了验证服务是否成功启动，可以查询容器系统的端口状态：
14
root@9598cb8e8f4a:/var/run# netstat -natp
Active Internet connections (servers and established)
15
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN -
tcp6 0 0 :::22 :::* LISTEN -
16
可以看到，22号端口已经处于LISTEN状态了，说明SSH服务已经正常运行了。
默认情况下，pam认证程序会对我们的SSH登录进行限制。修改pam对SSH的配置，取消登录 17
限制，具体操作为编辑/etc/pam.d/sshd，将下面这行注释掉（在前面加#）：
18
session required pam_loginuid.so
68 第5章 创建SSH服务镜像
3. 生成和添加公钥
接下来，添加允许登录的用户的公钥。假如我们想允许B主机上的root用户可以通过SSH登录
到容器内部，那么首先要在B主机上通过ssh-keygen –t rsa命令生成root用户的公钥。记住，下
面的命令是在B主机上而不是容器系统上进行的：
root@B:# ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Created directory '/root/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
36:e1:cf:79:c6:97:a3:f3:1c:97:cf:6a:c8:0d:fd:41 root@B
The key's randomart image is:
+--[ RSA 2048]----+
| |
| |
| . |
| . . E |
| S .. |
| . + o. .o.|
| +.++=oo|
| o++o=o|
| .++.o|
+-----------------+