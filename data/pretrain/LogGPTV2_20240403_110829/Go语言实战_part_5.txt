49 // 用关闭通道的方式，通知Display函数
50 // 可以退出程序了
51 close(results)
52 }()
53
54 // 启动函数，显示返回的结果，
55 // 并且在最后一个结果显示完后返回
56 Display(results)
57 }
第45 行到第56 行的代码解释起来比较麻烦，等我们看完search 包里的其他代码后再来解
释。我们现在只解释表面的语法，随后再来解释底层的机制。在第45行到第52行，我们以goroutine
的方式启动了另一个匿名函数。这个匿名函数没有输入参数，使用闭包访问了 WaitGroup 和
results变量。这个goroutine里面调用了WaitGroup的Wait方法。这个方法会导致goroutine
阻塞，直到 WaitGroup 内部的计数到达 0。之后，goroutine 调用了内置的 close 函数，关闭
了通道，最终导致程序终止。
Run函数的最后一段代码是第56行。这行调用了match.go文件里的Display函数。一旦
这个函数返回，程序就会终止。而之前的代码保证了所有results通道里的数据被处理之前，
Display函数不会返回。
2.3.2 feed.go
现在已经看过了Run函数，让我们继续看看search.go文件的第14行中的RetrieveFeeds
函数调用背后的代码。这个函数读取data.json文件并返回数据源的切片。这些数据源会输出内容，
随后使用各自的匹配器进行搜索。代码清单2-26给出的是feed.go文件的前8行代码。
代码清单2-26 feed.go：第01行到第08行
01 package search
02
03 import (
04 "encoding/json"
05 "os"
06 )
07
08 const dataFile = "data/data.json"
这个代码文件在search文件夹里，所以第01行声明了包的名字为search。第03行到第
06 行导入了标准库中的两个包。json 包提供编解码 JSON 的功能，os 包提供访问操作系统的
功能，如读文件。
读者可能注意到了，导入json包的时候需要指定encoding路径。不考虑这个路径的话，
我们导入包的名字叫作json。不管标准库的路径是什么样的，并不会改变包名。我们在访问json
包内的函数时，依旧是指定json这个名字。
在第08行，我们声明了一个叫作dataFile的常量，使用内容是磁盘上根据相对路径指定
的数据文件名的字符串做初始化。因为Go编译器可以根据赋值运算符右边的值来推导类型，声
明常量的时候不需要指定类型。此外，这个常量的名称使用小写字母开头，表示它只能在search
包内的代码里直接访问，而不暴露到包外面。
接着我们来看看data.json数据文件的部分内容，如代码清单2-27所示。
代码清单2-27 data.json
[
{
"site" : "npr",
"link" : "http://www.npr.org/rss/rss.php?id=1001",
"type" : "rss"
},
{
"site" : "cnn",
"link" : "http://rss.cnn.com/rss/cnn_world.rss",
"type" : "rss"
},
{
"site" : "foxnews",
"link" : "http://feeds.foxnews.com/foxnews/world?format=xml",
"type" : "rss"
},
{
"site" : "nbcnews",
"link" : "http://feeds.nbcnews.com/feeds/topstories",
"type" : "rss"
}
]
为了保证数据的有效性，代码清单 2-27 只选用了 4 个数据源，实际数据文件包含的数据要
比这4个多。数据文件包括一个JSON文档数组。数组的每一项都是一个JSON文档，包含获取
数据的网站名、数据的链接以及我们期望获得的数据类型。
这些数据文档需要解码到一个结构组成的切片里，以便我们能在程序里使用这些数据。来看
看用于解码数据文档的结构类型，如代码清单2-28所示。
代码清单2-28 feed.go：第10行到第15行
10 // Feed 包含我们需要处理的数据源的信息
11 type Feed struct {
12 Name string `json:"site"`
13 URI string `json:"link"`
14 Type string `json:"type"`
15 }
在第11行到第15行，我们声明了一个名叫Feed的结构类型。这个类型会对外暴露。这个
类型里面声明了3个字段，每个字段的类型都是字符串，对应于数据文件中各个文档的不同字段。
每个字段的声明最后 ` 引号里的部分被称作标记（tag）。这个标记里描述了JSON解码的元数据，
用于创建Feed类型值的切片。每个标记将结构类型里字段对应到JSON文档里指定名字的字段。
现在可以看看search.go代码文件的第14行中调用的RetrieveFeeds函数了。这个函数读
取数据文件，并将每个JSON文档解码，存入一个Feed类型值的切片里，如代码清单2-29所示。
代码清单2-29 feed.go：第17行到第36行
17 // RetrieveFeeds读取并反序列化源数据文件
18 func RetrieveFeeds() ([]*Feed, error) {
19 // 打开文件
20 file, err := os.Open(dataFile)
21 if err != nil {
22 return nil, err
23 }
24
25 // 当函数返回时
26 // 关闭文件
27 defer file.Close()
28
29 // 将文件解码到一个切片里
30 // 这个切片的每一项是一个指向一个Feed类型值的指针
31 var feeds []*Feed
32 err = json.NewDecoder(file).Decode(&feeds)
33
34 // 这个函数不需要检查错误，调用者会做这件事
35 return feeds, err
36 }
让我们从第 18 行的函数声明开始。这个函数没有参数，会返回两个值。第一个返回值是一
个切片，其中每一项指向一个 Feed 类型的值。第二个返回值是一个 error 类型的值，用来表
示函数是否调用成功。在这个代码示例里，会经常看到返回 error 类型值来表示函数是否调用
成功。这种用法在标准库里也很常见。
现在让我们看看第20行到第23行。在这几行里，我们使用os包打开了数据文件。我们使
用相对路径调用Open方法，并得到两个返回值。第一个返回值是一个指针，指向File类型的
值，第二个返回值是error类型的值，检查Open调用是否成功。紧接着第21行就检查了返回
的error类型错误值，如果打开文件真的有问题，就把这个错误值返回给调用者。
如果成功打开了文件，会进入到第27行。这里使用了关键字defer，如代码清单2-30所示。
代码清单2-30 feed.go：第25行到第27行
25 // 当函数返回时
26 // 关闭文件
27 defer file.Close()
关键字 defer 会安排随后的函数调用在函数返回时才执行。在使用完文件后，需要主动关
闭文件。使用关键字defer来安排调用Close方法，可以保证这个函数一定会被调用。哪怕函
数意外崩溃终止，也能保证关键字defer安排调用的函数会被执行。关键字defer可以缩短打
开文件和关闭文件之间间隔的代码行数，有助提高代码可读性，减少错误。
现在可以看看这个函数的最后几行，如代码清单 2-31 所示。先来看一下第 31 行到第 35 行
的代码。
代码清单2-31 feed.go：第29行到第36行
29 // 将文件解码到一个切片里
30 // 这个切片的每一项是一个指向一个Feed类型值的指针
31 var feeds []*Feed
32 err = json.NewDecoder(file).Decode(&feeds)
33
34 // 这个函数不需要检查错误，调用者会做这件事
35 return feeds, err
36 }
在第31行我们声明了一个名字叫feeds，值为nil的切片，这个切片包含一组指向Feed
类型值的指针。之后在第32行我们调用json包的NewDecoder函数，然后在其返回值上调用
Decode 方法。我们使用之前调用 Open 返回的文件句柄调用 NewDecoder 函数，并得到一个
指向Decoder类型的值的指针。之后再调用这个指针的Decode方法，传入切片的地址。之后
Decode方法会解码数据文件，并将解码后的值以Feed类型值的形式存入切片里。
根据Decode方法的声明，该方法可以接受任何类型的值，如代码清单2-32所示。
代码清单2-32 使用空interface
func (dec *Decoder) Decode(v interface{}) error
Decode方法接受一个类型为interface{}的值作为参数。这个类型在Go语言里很特殊，
一般会配合reflect包里提供的反射功能一起使用。
最后，第35行给函数的调用者返回了切片和错误值。在这个例子里，不需要对Decode调
用之后的错误做检查。函数执行结束，这个函数的调用者可以检查这个错误值，并决定后续如何
处理。
现在让我们看看搜索的代码是如何支持不同类型的数据源的。让我们去看看匹配器的代码。
2.3.3 match.go/default.go
match.go 代码文件包含创建不同类型匹配器的代码，这些匹配器用于在 Run 函数里对数据
进行搜索。让我们回头看看Run函数里使用不同匹配器执行搜索的代码，如代码清单2-33所示。
代码清单2-33 search/search.go：第29行到第42行
29 // 为每个数据源启动一个goroutine来查找结果
30 for _, feed := range feeds {
31 // 获取一个匹配器用于查找
32 matcher, exists := matchers[feed.Type]
33 if !exists {
34 matcher = matchers["default"]
35 }
36
37 // 启动一个goroutine执行查找
38 go func(matcher Matcher, feed *Feed) {
39 Match(matcher, feed, searchTerm, results)
40 waitGroup.Done()
41 }(matcher, feed)
42 }
代码的第 32 行，根据数据源类型查找一个匹配器值。这个匹配器值随后会用于在特定的数
据源里处理搜索。之后在第38行到第41行启动了一个goroutine，让匹配器对数据源的数据进行
搜索。让这段代码起作用的关键是这个架构使用一个接口类型来匹配并执行具有特定实现的匹配
器。这样，就能使用这段代码，以一致且通用的方法，来处理不同类型的匹配器值。让我们看一
下match.go里的代码，看看如何才能实现这一功能。
代码清单2-34给出的是match.go的前17行代码。
代码清单2-34 search/match.go：第01行到第17行
01 package search
02
03 import (
04 "log"
05 )
06
07 // Result保存搜索的结果
08 type Result struct {
09 Field string
10 Content string
11 }
12
13 // Matcher定义了要实现的
14 // 新搜索类型的行为
15 type Matcher interface {
16 Search(feed *Feed, searchTerm string) ([]*Result, error)
17 }
让我们看一下第15行到第17行，这里声明了一个名为Matcher的接口类型。之前，我们
只见过声明结构类型，而现在看到如何声明一个interface（接口）类型。我们会在第5章介
绍接口的更多细节，现在只需要知道，interface关键字声明了一个接口，这个接口声明了结构
类型或者具名类型需要实现的行为。一个接口的行为最终由在这个接口类型中声明的方法决定。
对于Matcher 这个接口来说，只声明了一个Search 方法，这个方法输入一个指向Feed
类型值的指针和一个 string 类型的搜索项。这个方法返回两个值：一个指向 Result 类型值
的指针的切片，另一个是错误值。Result类型的声明在第08行到第11行。
命名接口的时候，也需要遵守Go语言的命名惯例。如果接口类型只包含一个方法，那么这
个类型的名字以er结尾。我们的例子里就是这么做的，所以这个接口的名字叫作Matcher。如
果接口类型内部声明了多个方法，其名字需要与其行为关联。
如果要让一个用户定义的类型实现一个接口，这个用户定义的类型要实现接口类型里声明的
所有方法。让我们切换到 default.go 代码文件，看看默认匹配器是如何实现 Matcher 接口的，
如代码清单2-35所示。
代码清单2-35 search/default.go：第01行到第15行
01 package search
02
03 // defaultMatcher实现了默认匹配器
04 type defaultMatcher struct{}
05
06 // init函数将默认匹配器注册到程序里
07 func init() {
08 var matcher defaultMatcher
09 Register("default", matcher)
10 }
11
12 // Search 实现了默认匹配器的行为
13 func (m defaultMatcher) Search(feed *Feed, searchTerm string) ([]*Result, error) {
14 return nil, nil
15 }
在第 04 行，我们使用一个空结构声明了一个名叫 defaultMatcher 的结构类型。空结构
在创建实例时，不会分配任何内存。这种结构很适合创建没有任何状态的类型。对于默认匹配器
来说，不需要维护任何状态，所以我们只要实现对应的接口就行。
在第13行到第15行，可以看到defaultMatcher类型实现Matcher接口的代码。实现
接口的方法Search只返回两个nil值。其他的实现，如RSS匹配器的实现，会在这个方法里
使用特定的业务逻辑规则来处理搜索。
Search方法的声明也声明了defaultMatcher类型的值的接收者，如代码清单2-36所示。
代码清单2-36 search/default.go：第13行
13 func (m defaultMatcher) Search
如果声明函数的时候带有接收者，则意味着声明了一个方法。这个方法会和指定的接收者的
类型绑在一起。在我们的例子里，Search方法与defaultMatcher类型的值绑在一起。这意
味着我们可以使用defaultMatcher类型的值或者指向这个类型值的指针来调用Search方
法。无论我们是使用接收者类型的值来调用这个方，还是使用接收者类型值的指针来调用这个
方法，编译器都会正确地引用或者解引用对应的值，作为接收者传递给Search方法，如代码清
单2-37所示。
代码清单2-37 调用方法的例子
// 方法声明为使用defaultMatcher类型的值作为接收者
func (m defaultMatcher) Search(feed *Feed, searchTerm string)
// 声明一个指向defaultMatcher类型值的指针
dm := new(defaultMatch)
// 编译器会解开dm指针的引用，使用对应的值调用方法
dm.Search(feed, "test")
// 方法声明为使用指向defaultMatcher类型值的指针作为接收者