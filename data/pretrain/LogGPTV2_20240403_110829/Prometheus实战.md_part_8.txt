·通过Email接收告警
 global:
amd64
。修改 AlertManager 配置文件
smtp_from: 'PI:EMAIL'
 smtp_smarthost: 'smtp.qq.com:587
。启动prometheus服务
。修改 prometheus.yml 文件
smtp_auth_password:
 smtp_auth_username:
）在prometheus下添加 alert.rules 文件
启动AlertManager服务
'your_email_password'
'PI:EMAIL'
，Prometheus 默认端口为 9090,
122-
---
## Page 123
本文档使用书栈(BookStack.CN)构建
启动AlertManager服务
添加以下规则：
修改 prometheus.yml 文件
文件中写入以下简单规则作为示例。
在prometheus下添加 alert.rules 文件
通过 Email 接收告警
15
3
9.
0
 rule_files:
 ALERT memory_high 
route:
(current value: {{ $value }}s)",
$labels.instance }}",
receivers:
to resend them.
# If an alert has successfully been sent, wait 'repeat_interval'
 IF prometheus_local_storage_memory_series >= 0
 repeat_interval: 10s
- "alert.rules"
ANNOTATIONS {
FOR 15s 
receiver: team-X-mails
# A default receiver
summary = "prometheus using more memory than it should {{
- name: 'team-X-mails'
- to: 'team-X+PI:EMAIL'
email_configs: 
123
---
## Page 124
本文档使用书栈(BookStack.CN)构建
根据以上步骤设置，此时“team-X+PI:EMAIL"应该
启动prometheus服务
通过Email接收告警
./prometheus -Alertmanager.url=http://localhost:9093
./Alertmanager -config.file=simple.yml
---
## Page 125
本文档使用书栈(BookStack.CN)构建
用信息：
step 2：访问apps 创建第三方应用，点击［创建应用按钮
step1：访问网站 注册企业微信账号（不需要企业认证）。
准备工作
就一起体验一下。
Alertmanger 从 vo.12 开始已经默认支持企业微信了，下面我们
通过企业微信接收告警
通过企业微信接收告警
通过企业微信接收告警
·通过企业微信接收告警
。结论
。验证测试
。详细配置：
。准备工作
使用版本
■alertmanger 配置:
■prometheus 配置:
->填写应
125
---
## Page 126
本文档使用书栈(BookStack.CN) 构建
prometheus 配置：
详细配置
使用版本
通过企业微信接收告警
10
8
· alertmanager: 0.14.darwin-amd64
·node_exporter: 0.15.0.darwin-amd64
●prometheus: 2.0.darwin-amd64
S
2
alerting: 
 # Alertmanager configuration
rule_files:
 alertmanagers:
- "rules.yml"
- static_configs:
 targets: 
 localhost:9093
基础应用
通讯录
添加第三方应用
打卡
公费电话
(I)
文件盘
审批
leus-ci
微信插件
创建应用
日报
企业支付
管理工具
我的企业
---
## Page 127
本文档使用 书栈(BookStack.CN) 构建
参数说明：
alertmanger 配置:
rules.yml 配置:
通过企业微信接收告警
切
2
11.
·corp_id：企业微信账号唯一
6
8
8
9
S
2
9
2
业应用详情页面查看。
agent_id:
to_party:
 route:
 scrape_configs:
- name: 'wechat'
receivers:
-name: node
groups:
 group_by:[
wechat_configs:
receiver: 'wechat'
- corp_id: 'xxx'
rules:
 alert: server_status
- job_name: 'node
api_secret: 'xxxx'
agent_id: '1000002'
to_party:'1'
annotations:
expr: up{job="node"} == 0 
 static_configs:
for: 15s
summary："机器 {{ $labels.instance }} 挂了"
- targets: ['localhost:9100']
需要发送的组。
['alertname']
第三方企业应用的ID，可以在自己创建的第三方企
ID,
可以在我的企业 中查看。
- 127 -
---
## Page 128
本文档使用书栈(BookStack.CN)构建
当我们重新启动 node_exporter 的时候，会收到如下告警信息：
当我们停掉
验证测试
详情请参考文档。
通过企业微信接收告警
Messages
中国电信
·api_secret：第三方企业应用的密钥，
企业应用详情页面查看。
receiver=wechat
http://Jiayangs-MacBook-
MacBook-Air.local:9090/graph?
Source:http://Jiayangs-
9092挂了
AlertsFiring:
receiver=wechat
Air.local:9093/#/alerts?
AlertmanagerUrl:
AlertmanagerUrl:
g0.expr=
-summary=机器localhost:
Annotations:
(localhost:9092node)
[FIRING:1] server_status
instance=localhost:9092
alertname=server_status
 node_exporter 的时候，会收到如下告警信息：
node
Prometheus
4:30PM
+
可以在自己创建的第三方
---
## Page 129
本文档使用 书栈(BookStack.CN)构建
常及时，基本不丢消息，大家可以测试体验以下。
企业微信从注册到alertmanger 
结论
通过企业微信接收告警
{{end}} {{ .CommonAnnotations.username}}
receivers:
- name: 'slack'
 slack_configs 
@sjy Click here
服务器127.0.0.2:9100已当机超过20s
服务器127.0.0.1:9100已当机超过20s
服务器运行状态
@sjy Click here
服务器127.0.0.2:9100已当机超过20s
服务器运行状态
 slack_configs:
 api_url: "xxx"
量，我们收到的消息是这样：
color: "{{.CommonAnnotations.color}}"
title: "{{.CommonAnnotations.summary}}"
text: "{{ range .Alerts J} {{ .Annotations.description}}\n
title_link: "{{.CommonAnnotations.link}}"
channel: "#test"
来配置
slack 的告警接收渠道
使用了
ivua
template 语句，通过
还可以使用slack
- 133 -
---
## Page 134
本文档使用书栈(BookStack.CN)构建
来的烦恼。
这样就很方便了，再也不用担心多个 Prometheus 节点，切换查询带
页面：
点击title 或者 Click here，
通过Slack接收告警
 0 == [,apou,=qodn
Console
insertmetricatcursor
Status
---
## Page 135
本文档使用书栈(BookStack.CN)构建
通过Webhook接收告警
通过Webhook接收告警
---
## Page 136
本文档使用书栈(BookStack.CN)构建
其他告警接收方案
其他告警接收方案
---
## Page 137
本文档使用书栈(BookStack.CN)构建
主机监控完整示例
主机监控完整示例
---
## Page 138
本文档使用 书栈(BookStack.CN) 构建
NodeExporter
---
## Page 139
本文档使用 书栈(BookStack.CN) 构建
配置告警规则
配置告警规则
---
## Page 140
本文档使用 书栈(BookStack.CN) 构建
Grafana集成
Grafana 集成
---
## Page 141
本文档使用书栈(BookStack.CN)构建
通过Alertmanager告警
---
## Page 142
本文档使用 书栈(BookStack.CN) 构建
Prometheus 工具
Prometheus工具
---
## Page 143
Promu介绍和使用
本文档使用书栈(BookStack.CN)构建
Promu介绍和使用
---
## Page 144
本文档使用 书栈(BookStack.CN) 构建
Client SDK
Client SDK
---
## Page 145
本文档使用书栈(BookStack.CN)构建
Prometheus性能调优
Prometheus性能调优
---
## Page 146
本文档使用书栈(BookStack.CN)构建
通过 Metrics 查看Prometheus 运行状态
通过 Metrics 查看 Prometheus 运行状态
---
## Page 147
通过日志分析 Prometheus 运行状态
本文档使用书栈(BookStack.CN)构建
通过日志分析 Prometheus 运行状态
---
## Page 148
本文档使用 书栈(BookStack.CN) 构建
启动参数详解
启动参数详解
---
## Page 149
Prometheus与容器
本文档使用书栈(BookStack.CN)构建
Prometheus与容器