requires again the generation of bounded randomness, for which we
deploy the same protocol we devised for the Jacobi test, as well as a
careful selection of the bounds, and number of necessary CRT com-
ponents, ensuring that no wrap around happens during the secure
computations. Note that according to the original work of Boneh
and Franklin [5], the latter test introduces a false negative, in the
particular case of 𝑁 =𝑝·𝑞, with 𝑝,𝑞 primes, and 𝑞 =1 mod 𝑝.
2 PRELIMINARIES
2.1 Chinese Remainder Theorem - CRT
Following the blueprint of the two most recent works in distributed
RSA modulus generation [7, 8], we deploy in our work the Chinese
Remainder Theorem to increase the efficiency of our protocol. We
recall here the Chinese Remainder Theorem [25].
𝑝×Z∗
𝑞.
𝑁 ≃ Z∗
𝑝×Z∗
𝑁 to Z∗
Theorem 2.1. Let 𝑁 =𝑝𝑞 where 𝑝 and 𝑞 are relatively prime. Then
Z𝑁 ≃ Z𝑝×Z𝑞 and Z∗
𝑞. Moreover, let 𝑓 be the function map-
ping elements 𝑥 ∈ {0,...,𝑁 −1} to pairs (𝑥𝑝,𝑥𝑞) with 𝑥𝑝 ∈ {0,...,𝑝−1}
and 𝑥𝑞 ∈{0,...,𝑞−1} defined by 𝑓 (𝑥) =([𝑥 mod 𝑝],[𝑥 mod 𝑞]). Then
𝑓 is an isomorphism from Z𝑁 to Z𝑝 ×Z𝑞, as well as an isomorphism
from Z∗
𝑝1, 𝑝2, ... , 𝑝ℓ, whose product is 𝑁 =ℓ
The CRT generalizes to any vector of pairwise relatively primes
𝑖=1 𝑝𝑖. Then the function 𝑓
mapping elements 𝑥 ∈ {0, ... , 𝑁 − 1} to tuples (𝑥𝑝1, ... , 𝑥𝑝ℓ) with
𝑥𝑝 𝑗 ∈{0,...,𝑝 𝑗 −1}, is an isomorphism from Z𝑁 to Z𝑝1×···×Z𝑝ℓ and
from Z∗
𝑝1×···×Z∗
. We refer to the tuples (𝑥𝑝1,...,𝑥𝑝ℓ) as the
𝑝ℓ
CRT representation of 𝑥.
To convert an element from its CRT representation to its rep-
resentation mod 𝑁 , we deploy the so-called CRT Reconstruction
algorithm, which is presented in Fig. 1.
𝑁 to Z∗
2.2 Notation
We define 𝑀sample =3·5····𝑝𝑏 to be the product of the first 𝑏 primes
(excluding 2). This is the space from which we sample the first mul-
tiplicative sharings of the candidate primes 𝑝 and 𝑞 in our protocol.
Further, we define 𝑀ℓ = 𝑝1 · 𝑝2···𝑝ℓ to be the product of ℓ distinct
primes of size 128 bits each. To achieve efficient arithmetic over 𝑀ℓ
we use ℓ distinct MPC engines, each of which operates over 𝑝𝑖. At
different stages of our protocols we work either with these distinct
MPC engines, or we perform the CRT reconstruction of the variables
we work with over an MPC engine 𝑀ℓ.
To compress and simplify notation throughout this paper, we de-
note by (𝑥,ℓ) the CRT representation of 𝑥 mod 𝑀ℓ, that is all ℓ CRT
components (𝑥 mod 𝑝1,...,𝑥 mod 𝑝ℓ). The local operation of CRT
reconstruction of 𝑥 mod 𝑀ℓ from its CRT representation is denoted
as CRTrec(𝑥,ℓ).
We use square brackets to denote additively secret shared values,
e.g., the shared version of 𝑥 is denoted by [𝑥]. We use double square
brackets for the authenticated secret shared values, e.g., the authen-
ticated shared version of 𝑥 is denoted by(cid:74)𝑥(cid:75). When the sharings are
sharings as [𝑥,ℓ], and(cid:74)𝑥,ℓ(cid:75), respectively, and assume ℓ MPC engines
over the CRT representation with ℓ CRT components, we denote the
operating in parallel, one for each CRT component.
3 PROTOCOL INGREDIENTS
Our main protocol for the biprime generation depends on several
functionalities. In this section we present all functionalities that are
necessary for the realization of the final FRSAGen functionality, and
elaborate on the non-standard ones. We begin the description of
the ingredients that comprise our final protocol with a roadmap
explaining the dependencies between the functionalities required
to realize FRSAGen.
3.1 Roadmap
In Fig. 2 we demonstrate the functionality dependencies for the RSA
modulus generation. We denote functionalities with circles, and
protocols with rectangles. On the dependency vectors ‘H’ stands for
hybrid (as in which hybrid model do we assume for the protocol),
and ‘R’ stands for realizing, and leads to the functionality that the
origin protocol realizes. In this section we show how to reach the
root of the depicted tree, namely the ΠRSAGen protocol, which in
turn realizes the FRSAGen functionality.
The first functionality that our protocol makes use of, is the
FABBWithErrors. This is used in the sampling phase of ΠRSAGen,
where we resort to a semi-honest multiplication protocol to compute
the additive shares of the two primes contributed by each party, from
their multiplicative shares. This is realized by the ΠABBWithErrors
protocol, which in turn is constructed in the FABBWithErrors−Prep-
hybrid model (realized by ΠABBWithErrors−Prep). The reader can
think of this functionality as the standard MPC arithmetic black-box,
secure against passive adversaries. The preprocessing phase of
the arithmetic black-box produces unauthenticated input tuples,
and multiplication triples. We elaborate on the workings of
ΠABBWithErrors in Section 3.2.
Then, the rest of the sampling phase, as well as the combining
phase of ΠRSAGen uses the FMPC-CRT functionality, realized by the
ΠMPC-CRT protocol, which is in turn designed in the standard FMPC-
hybrid model. For completeness, we present the FMPC functionality
in Fig. 13, Appendix B. In Section 3.3 we show how to generalize
the standard actively secure MPC functionality to support parallel
MPC engines operating over sharings of the CRT representation
of the inputs, designing therefore the FMPC-CRT functionality.
The Jacobi test phase of ΠRSAGen makes use of the standard broad-
cast, and randomness sampling functionalities, which are presented
for completeness in Appendix B, Fig. 14, and Fig. 15, respectively.
The consistency check that follows the Jacobi test of ΠRSAGen re-
quirestwoadditionalfunctionalities.Tosupportthesetwoadditional
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea598functionalities, we augment the FMPC-CRT functionality with two
additional commands, and integrate them into the ΠAdvMPC−CRT
protocol, realizing the corresponding FAdvMPC−CRT functionality.
This is presented in Section 3.4. Concretely, the first command im-
plements a functionality that generates bounded randomness to
accommodate computations that would otherwise wrap around in
the original CRT representation. This construction is presented in
Section3.4.1andtheprotocolthatrealizesusestheadditionalFmaBits
command of the FMPC-CRT functionality. The latter functionality
facilitates the generation of multiply authenticated random bits [35].
Furthermore the consistency check that follows the Jacobi test re-
quires certain computations to be performed over the integers. To re-
alize this second command we need to convert a sharing from its CRT
representation to an additive sharing of the CRT reconstructed value
over the integers. We explain how to achieve this in Section 3.4.2.
3.2 Unauthenticated
Arithmetic Black Box Functionality
FABBWithErrors (Fig. 3) is the functionality implementing an
unauthenticated arithmetic black box MPC. Our ΠRSAGen protocol
makes use of this functionality to perform a multiplication, in a
more efficient manner than the actively-secure version. This does
not cause the overall security of our protocol to depreciate, because
the range in which the parties’ inputs lie are implicitly checked
when opening the product of the two sampled candidate primes,
and the remaining primitives used in ΠRSAGen are actively secure.
For completeness, we detail the protocol realizing the unau-
thenticated ABB functionality, ΠABBWithErrors, in Appendix C,
Fig. 17. The ΠABBWithErrors protocol implements the online phase
of the unauthenticated arithmetic black box, and it works in the
FABBWithErrors−Prep-hybrid model. This functionality, realized by
ΠABBWithErrors−Prep, is used to generate the necessary preprocessing
material for the online phase. Concretely, the required preprocessing
material is (unauthenticated) input tuples and multiplication triples.
The protocol for the preprocessing for tuples is listed in ΠInputTuple
(Fig. 18), while the protocol for the preprocessing of triples is
listed in ΠTripleGeneration (Fig. 19), in Appendix C. Note that the
ΠTripleGeneration protocol makes use of the standard FRand function-
ality, which is presented for completeness in Fig. 16, Appendix B.
For simplicity and clarity of presentation we describe here (and
in Appendices C and B) the protocols implementing the standard
unauthenticated arithmetic black box functionality. We also invoke
the corresponding functionality in our protocol in the usual manner.
However, we recommend this functionality to be implemented over
a CRT representation of the sharings and inputs, meaning that we
would need multiple MPC engines operating in parallel for each
CRT component. We detail how to achieve the standard actively
secure MPC functionality over CRT components in Section 3.3.
The FABBWithErrors functionality can be also implemented over
CRT components in the same manner. We have assumed the
aforemenioned implementation of the FABBWithErrors functionality
for the efficiency analysis of our protocol.
3.3 MPC on CRT Components
In this subsection, we describe the functionality and the associated
protocol to perform secure multiparty computation over a big com-
posite modulus, by relying on the Chinese Remainder Theorem. The
functionality FMPC−CRT (Fig. 4) essentially implements the standard
MPC functionality, but on sharings in their CRT representation. To
accommodate computations on this type of sharings, we deploy ℓ
MPC engines, for ℓ the maximum possible number of CRT compo-
nents in the representation, as shown in ΠMPC−CRT (Fig. 5). Each of
these MPC engines operates over one of the prime moduli of the CRT
representation,andeachofthese ℓ primemoduliis128-bitslong.All ℓ
MPC engines operate in parallel, in a much smaller space than the big
composite modulus over which the final reconstruction is performed.
This has a profound impact on the efficiency of our ΠRSAGen protocol.
3.4 Advanced MPC CRT
The functionality FMPC−CRT (Fig. 4) is similar to the classic MPC
functionality, but over a direct product of finite fields. We also define
FAdvMPC−CRT, which is the functionality FMPC−CRT augmented
with three additional commands. The first one is the Rand2k
command, which samples a random secret shared value 𝑟 <2𝑘 in its
CRT representation over ℓ′ moduli, used in our ΠRSAGen protocol
to ensure no overflows during computation. The second one is
the ConvInt command, which allows the parties to convert a CRT
sharing to an integer sharing of the same value. The third one is the
LevelUp command, which extends the CRT representation of the
sharings of the candidate primes 𝑝 and 𝑞 to the CRT representation
of the same sharings, but with additional CRT components. This
augmented functionality FAdvMPC−CRT is described in Fig. 6. We
subsequently detail how the three additional commands are realized.
3.4.1 Bounded Randomness in Shared CRT Representation. The
Rand2k command allows us to sample a random CRT sharing, the
reconstruction of which falls within a predetermined range. This
is necessary in our main protocol to accommodate computations
that would otherwise overflow over the intial (smaller) CRT
representation. The protocol implementing the Rand2k command
is listed in ΠRand2k (Fig. 8), and it uses an additional command of
the FMPC−CRT functionality, namely the FmaBits command. The
FmaBits command itself, presented in Fig. 7, is a slightly different
version of the one presented by Rotaru et al. [35]. In our case, we
modify the command so that it outputs the integer sharing of the
bit, which was discarded in the original paper. We need this integer
sharing later, in the ΠConvInt protocol.
3.4.2 Converting a CRT Sharing to an Integer Sharing. Our main
protocol requires a command which converts a CRT sharing to an
integer sharing of the same underlying secret. This is necessary
during the Jacobi test of ΠRSAGen, because we need to ensure that
all computations in the exponent are performed over the integers,
and hence the shares in the exponent are also reconstructed
over the integers; otherwise, the correctness of the protocol is
not guaranteed due to potential wrap around. To ensure that
indeed the computations are done over the integers, we realize the
ConvInt command with the protocol ΠConvInt, listed in Fig. 9. This
protocol allows the parties to obtain an unauthenticated integer
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea599FRSAGen
R
H
ΠRSAGen
H
H
H
ΠABBWithErrors
R
FABBWithErrors
FAdvMPC−CRT
H
FABBWithErrors−Prep
R
ΠABBWithErrors−Prep
ΠMPC−CRT
R
R
ΠAdvMPC−CRT
FAgreeRandom
FBroadcast
H
H
FMPC−CRT
FmaBits
H
FMPC
Figure 2: Functionality dependencies for RSA modulus generation.
Functionality FABBWithErrors
Initialize: Parties call FABBWithErrors−Prep to receive preprocessing tuples
and triples.
Input: Receive a value 𝑥 from some party and store 𝑥.
Mult([𝑥],[𝑦]): Await for Δ from the adversary. Compute 𝑧 = (𝑥 ·𝑦)+Δ
and store [𝑧].
Share([𝑥]): For each corrupt party 𝑖 ∈ A receive 𝑥𝑖 from the adversary.
𝑖=1 𝑥𝑖 = 𝑥.
Sample uniformly honest parties’ shares 𝑥 𝑗 𝑗∉A such that𝑛
Send 𝑥𝑖 to 𝑃𝑖.
Figure 3: Arithmetic Black Box Functionality with Errors.
sharing of the CRT sharings they already hold, without leaking any