制器插进视图中，让视图变得聪明。
因为我们正要实现策略模式，所以从可以插进DJView的任何策略的接
口开始。我们称此接口为Controllerlnterface。
视图所能够调用的控
利器方法都在这里。
public interface ControllerInterface
void start () ;
void stop() ;
在看过模型的接口后，你应该对这些方法
void increaseBPM();
感到熟悉。你可以开始或停止节拍.也
void decreaseBPM() ;
可以改变BPM。这个接口比BeatModel的
接口变“丰案”，因为你可以用“加
1”或“减1”的方式调整BPM。
设计谜题
你已经看到视图和控制器一起用到了策略模式。你能把这两个类的策略模式类图绘制出来
吗？
542
第12章
---
## Page 579
复合模式
控制器的实现是这样的
控制器实现Controllerntenface接口
public class BeatController implements ControllerInterface {
BeatModelInterface model;
控制器是MVC夹心饼中间的奶油
DJView view;
所以它必须同时和模型以及视图接
public BeatController(BeatModelInterface model) (
触，来当两者的黏着剂。
this.model = model;
view = new DJView (this, model) ;
view.createView() ;
view.createControls() ;
将控制器它成参数传入创建
view.disableStopMenuItem();
视图的构造器中。
view.enableStartMenuItem() ;
model.initialize ();
当用户从用户界面莱单中送
1
择“Stat”时，控制器调用模型的
public void start(){
on（）.然后改变用户界面（将start莱
model.on () ;
view.disableStartMenuItem() ;
单项disable，将Stop莱单项enable）。
view.enableStopMenuItem();
类似地，当用户从莱单中选择“Stop”时，
public void stop(){
model.off () ;
控制器调用模型的os）.然后改变用户界
view.disableStopMenuItem() ;
面（将Stazt莱单项enable，将Stop策单项
view.enableStartMenuItem() ;
}
disable)。
public void increaseBPM() (
int bpm = model.getBPM() ;
mode1.setBPM(bpm + 1) ;
如果被点击的按钮增加，控制器线
从模型取得当前的BPM，加1，然后
注意：控制器等于是在帮
public void decreaseBPM(){
设置一个新的BPM。
视图做决定。视图只知
int bpm = mode1.getBPM() ;
道如何将策单项变成开和
mode1.setBPM(bpm - 1) ;
关、但是它并不知道在何
做法和上面一样，但是当前的
种情况下要enable/disable。
public void setBPM(int bpm)
BPM减。
model . setBPM (bpm) ;
最后，如累用户界面被用来设定任意
的BPM值，控制器指示模型设置它的
BPM.
你现在的位置
543
---
## Page 580
全部结合在一起..
全部结合在一起·…··…·
一切都准备好了，我们有模型、视图和控制器。现在就将它们
整合成MVC！我们会看到、听到它们和谐地携手合作。
我们需要一点点代码才能开始，代码很短：
public class DJTestDrive {
public static void main (String[] args) {
先建立一个楼型·
BeatModelInterface model = new BeatModel();
ControllerInterface controller = new BeatController(model);
然后创建一个控制器，并将模型传
给它。记住，控制器创建视图，所
以我们不需爱“把控制器介绍给视
图认识”
运行测试.·
java DJTestDrive
运行这
然后你含着到
要做的事
这样的函面。
①从菜单选择Start，开始产生节拍：注意控制器随后把该项
oview
Control
disable,
DjControl
②使用文本输入框以及“>”按钮来改变BPM，
Current BPM:120
Enter BPM:
看看视图显示如何对改变做出反应，尽管实际上它没有逻
辑链接到控件。
Set
③看看节拍柱是否一直能保持正确的拍子，因为它是模型的
>>
观察者。
播放你最喜欢的歌曲，并尝试着用“>”按钮
来增减BPM，来符合正在播放歌曲的节拍。
停止节拍产生器，注意控制器是如何disable。Stop菜单
项和enableStart菜单项的。
544
第12章
---
## Page 581
复合模式
探索策略
让我们更进一步地看策略模式，了解它是如何被用在MVC中
的。我们也将看到另一个友好的模式常常在MVC的附近闲晃的
适配器模式。
想一下DJView做了什么：它显示了节拍速率和脉动。这听起来
会不会让你联想到其他事情呢？心跳？碰巧我们有一个心脏监
视类，类图是这样的：
我们有一个方法，可以取得当前
HeartModel
的心骄速率。
getHeertRate()
registlerBPMObserver)
幸运地，它的开发人买知道使用这两
心脏的其他方法
个观察者接口！
BRAN
IPOWER
如果能在HeartModel中复用我们当前的视图，这会省下不少功夫。但我们需要一个控制
器和这个模型一·同运作。还有，HeartModel的接口并不符合视图的期望，因为它的方法是
getHeartRate（），而不是getBPMO。你如何设计一些类，让视图和HeartModel能够搭配使用
呢？
你现在的位置
545
---
## Page 582
MVC和适配器
适配模型
一开始，我们希望将HeartModel适配成BeatModel。如果不这么做，视图就无法和此模
型合作，因为视图只知道getBPM(），不知道其实getHeartRate（）就等于getBPM(。要怎
么做？我们打算使用适配器模式，当然了！适配器其实是使用MVC时经常附带用到的
技巧：使用适配器将模型适配成符合现有视图和控制器的需要的模型。
下面是将HeartModel适配成BeatModel的代码：
我们需要实现目标
提口.在本例中就是
BeatModelSnterbace.
public class HeartAdapter implements BeatModelInterface (
HeartModelInterface heart;
public HeartAdapter (HeartModelInterface heart)(
我们在这里存储
this.heart = heart;
HeatModel的引用。
public void initialize() {)
我们不知道这些方法将对心脏做些什么，
public void on() {}
但是看起来很可怕。所以我们让这些方
public void off() (}
法“无操作”。
public int getBPM(){
当secBPM（）被调用时.我们只是把
return heart.getHeartRate();
它转换到HeantModel的setHeatRate()。
public void setBPM(int bpm) (}
我们不最望对心脏做这种事
public void registerObserver(BeatObserver o)
所以再次地让此方法“无摄
heart.registerobserver (o);
public void removeObserver (BeatObserver o) (
这是我们的观察老方法，
heart.removeObserver(o) ;
直接要托给所色装的
HeartModel部p可。
public void registerObserver (BPMObserver o) {
heart.registerObserver (o) ;
L
public void removeObserver (BPMObserver o) {
heart.removeobserver(o);
546
第12章
---
## Page 583
复合模式
现在我们准备写HeartController
写完了HeartAdapter，我们准备创建控制器，并让视图和Heart-
Model整合起来。这就是复用。
就像BeatContoller所做的一样.HentControllen
现了Controllernteniace
public class HeartController implements ControllerInterface{
HeartModelInterface model;
DJView view;
和以前一样，控制器创建了
视图，并让所有东西黏合起
public HeartController(HeartModelInterface model) {
this.model =model;
来。
view = new DJView(this, new HeartAdapter(model));
view.createView () ;
有一个改变的地方：我们传入的是
view.createControls() ;
view.disableStopMenuItem();
一个HevtModel，而不是BeatModel.…….
view.disableStartMenuItem();
...HeartModel不能直接交
public void start() {}
给视图，必须先用途配器
public void stop() (}
包装过才行。
最后，HeartContzoller将莱单项disable
public void increaseBPM() ()
因为这些策单项都是不常要的。
public void decreaseBPM() ()
这些方法都没有实际的作用，毕
public void setBPM(int bpm) (}
免我们不能像控制节拍机一样控
制心跳。
就这样！现在写测试代码···
public class HeartTestDrive {
public static void main (String[] args) (
HeartModel heartModel =new HeartModel();
我们的需要做的就是要创
建一个控制器，并传入一个
HeattModel.
你现在的位置
547
---
## Page 584
测试HeartModel
运行测试程序····
java HeartTestDrive
运行这个…
……你金看到这样
的画面。
OOOControl
DjControl
EnterBPM:
Set
>
要做的事
0View
1
注意显示用在心跳上是没问题的！节拍柱看起来就像是心律。因为
Current BPM:68
HeartModel也支持BPM观察者和Beat观察者，所以我们可以得到
节拍的更新。
②
因为心律有自然的变化，注意显示随新的BPM而更新。
健康人的心跳
③
每次当我们取得BPM的更新时，适配器就会把getBPM（）转成
速率
getHeartRate()。
④
不能使用Start和Stop菜单项，因为控制器禁止这两个操作。
5
其他按钮还是可以用，只是没有效果，因为控制器对这些按钮事件
而被改变。
PDG
548
第12章
---
## Page 585
复合模式
MVC与Web
Web开发人员也都在适配MVC，使它符合浏览器/服务器模型。我们称这样的适配
为“Model2”，并使用Servlet和JSP技术的结合，来达到MVC的分离效果，就像传统
的GUI。
现在就来看Model2是怎么工作的：
HTTP请求
2
servlet/控制器
③
HTTP回应
4
模型/数据库
bean
/业务逻辑
客户
jsp/视图
你发出一个会被Servlet收到的HTTP请求。
你利用网页浏览器，发出HTTP请求。这通常牵涉到送出表单数据，例如用户名
和密码。Servlet收到这样的数据，并解析数据。
2
Servlet扮演控制器。
Servlet扮演控制器的角色，处理你的请求，通常会向模型（一般是数据库）发出
请求。处理结果往往以JavaBean的形式打包。
3
控制器将控制权交给视图。
视图就是JSP，而JSP唯一的工作就是产生页面，表现模型的视图（④模型通过
JavaBean中取得）以及进一步动作所需要的所有控件。
视图通过HTTP将页面返回浏览器。
页面返回浏览器，作为视图显示出来。用户提出进一步的请求，以同样的方式处
理。
你现在的位置
549
---
## Page 586
Model 2
在没有Model2之前，生活很艰苦，
你根本无法想象。
Model2不只是一个干净的设计
你已经知道将模型、视图和控制器分开的优点了。
你还需要知道“故事的其他部分”：Model2可以
帮助许多网站免于陷人混乱。
它是如何办到的呢？Model2不仅提供了设计上的
组件分割，也提供了“制作责任”的分割。以前，
任何人只要能够访问你的JSP，就能够进人并编写
C
Java代码做他们想做的事，对吧？这也包括许多
不懂JAR的人（搞不好他们还以为JAR是装花生奶
从前的“.com”人
油酱的罐子）。我要说的重点是：许多网页制造
者只懂内容和HTML，但是不懂软件。
幸好Model2来救命了！有了Model2，该编程的
人就编程，该做网页的人就做网页，大家专业分
工，责任清楚。
PDG
550
第12章
---
## Page 587
复合模式
Model2：你的手机也可用DJ程序
不要以为我们还没把BeatModel做成Web版，就要开溜了。其实，我
们要做的是更炫的手机Web版，让你可以在手机上做DJ的工作。所以
现在你可以走出DJ室，走进人群了。还等什么？让我们开始编码吧！
计划
修正模型。
其实，不需要修改。现在的模型完全没问题！
②
创建Servlet控制器。
我们需要一个简单的Servlet，可以接收HTTP请求，并对模型执
行一些操作。它所需要做的是停止、开始和改变BPM。
3
创建HTML视图。
我们用JSP创建一个简单的视图。它会从控制器中收到一个
JavaBean，从这个Bean就可以得知它所有需要显示的东西。然后
JSP将产生一个HTML界面。
极客秘笈
设置你的Servlet环境