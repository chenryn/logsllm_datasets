CTF特训营：技术详解、解题方法与
9.3.1反汇编和反编译工具
229/1144
PatchBytes
Address
0x4010DD
Fileoffset
0x10DD
Originalvalue
9AE87E037F01E874037501E872037301
Values
9090
OK
Cancel
Help
图9-7IDA对程序进行patch
（6）交叉引用
IDA中包含了两类基本的交叉引用：代码交叉引用和数据交叉引
用。
代码交叉引用用于表示一条指令将控制权转交给另一条指令。
通过代码交叉引用，可以知道哪些指令调用了哪个函数或指令。
数据交叉引用可用于追踪二进制文件访问数据的方式。通过数
据交叉引用，可以知道哪些指令访问了哪些数据。
---
## Page 230
CTF特训营：技术详解、解题方法与
9.3.2调试器230/1144
9.3.2调试器
在软件的开发过程中，程序员会使用一些调试工具，以便高效地
找出软件中存在的错误。而在逆向分析领域，分析者也会利用相关的
调试工具来分析软件的行为并验证结果。调试器的两个最基本的特征
是：断点设置和代码跟踪。
断点允许用户选择程序中任意位置的某行代码，一旦程序运行
到这一行，那么它将指示调试器暂停运行程序，并显示程序的当前状
代码跟踪充许用户在程序运行时跟踪它的执行，跟踪意味看程
序每执行一条汇编代码然后暂停，并充许用户观察甚至改变程序的状
态。
常用的调试器包括：Ollydbg、x64dbg、Windbg和gdb等。其
中，Ollydbg可以调试Windows下的32位用户态程序；x64dbg可以调
试Windows下的64位应用程序；Windbg是微软提供的调试器，可以
对用户程序和系统内核进行调试，但是GUI界面相对来说没有那么友
好；gdb是Linux系统下所用的主要调试器。下面主要讲解最常用到的
---
## Page 231
CTF特训营：技术详解、解题方法与
9.3.2调试器
231/1144
Ollydbg和gdb。
1.Ollydbg
Ollydbg（简称OD）是Windows下的一款具有可视化界面的用户
态调试工具。OD具有GUI界面，非常容易上手。这里推荐使用从吾
爱破解论坛下载的吾爱破解专用版Ollydbg，该版本具有强大的对抗
反调试的功能。
（1）主界面
OD主界面如图9-8所示，各部分介绍如下。
---
## Page 232
CTF特训营：技术详解、解题方法与
9.3.2调试器
232/1144
图9-8OD主界面
反汇编窗口：载入程序后，窗口内显示的是程序反汇编后的源
代码。
信息窗口：进行动态调试时，窗口内会显示出当前代码行的各
个寄存器的信息，或者APl函数的调用、跳转等信息，可以用来辅助
了解当前代码行的寄存器的运行情况
数据窗口：默认以十六进制的方式显示内存中的数据
寄存器窗口：动态显示CPU各个寄存器的内容，包括数据寄存
器、指针及变址寄存器、段寄存器，以及控制寄存器中的程序状态字
寄存器。
堆栈窗口：显示堆栈的内容。调用API函数或子程序时，通过查
看堆栈可以知道传递的参数等信息
命令行：在原本的OD中是没有命令行的，这个是一个外置的插
件，可以方便地在动态调试时输入命令。一般来说，主要是输入下断
点或者清除断点的命令。“命令行命令.风t”文件中有详细的命令及功
能介绍，大家可以查看
---
## Page 233
CTF特训营：技术详解、解题方法与
9.3.2调试器
233/1144
（2）断点操作
动态调试时要使程序在关键代码处中断，然后根据显示的动态信
息进行动态分析，这就需要对程序下断点。断点有一般断点、内存断
点、硬件断点等类型，一般断点是最常使用的断点方式
1）一般断点
一般断点就是将输入的断点地址处的第一个字节用INT3指令来
代替。当程序运行到断点地址时，就会执行INT3指令，Ollydbg就会
捕捉到这个指令而中断下来。
下断点一般有如下两种方式：
F2键：在反汇编窗口中的代码行上面按F2键就可以下断点。下
断点后，虚拟地址处将呈红色状态。如果想取消断点，再按一下F2
键即可。
命令行方式：可以在命令行中使用bp命令下断点。如bp4516B8
或者bpMessageBoxA。
2）内存断点
内存断点分为两种：内存访问断点和内存写入断点。OD每一时
---
## Page 234
CTF特训营：技术详解、解题方法与。
9.3.2调试器
234/1144
刻只充许有一个内存断点
内存访问断点：在程序运行时调用被选择的内存数据就会被OD
中断。根据这个特点，在破解跟踪时只要在关键数据内存中下断点
就可以知道程序在什么地方和什么时候用到了跟踪的数据。该功能对
于一些复杂算法的跟踪有很大的帮助。从破解上讲，一个注册码的生
成一定是由一些关键数据或者原始数据计算而来的，所以在内存中一
定会用到这些关键数据，那么内存访问断点就是比较好的中断方法。
内存与入断点：在程序运行时向被选择的内存地址与入数据就会
被OD中断。根据这个特点，在破解时可以跟踪一个关键数据是什么
时候生成的，生成的代码段在什么地方。所以，如果不知道一个关键
数据的由来，就可以用内存写入断点的方式查看计算的核心。
如果想要设置内存断点，则可以在数据窗口中的十六进制栏内选
择一部分内存数据，然后单击鼠标右键出现功能菜单，选择“断点”，
然后从中选择内存访问断点或者内存写人断点
3）硬件断点
硬件断点并不会将程序代码改为INT3指令，如果有些程序有自
校验功能，就可以使用硬件断点了。下中断的方法和下内存断点的方
---
## Page 235
CTF特训营：技术详解、解题方法与
235/1144
法相同，共有三种方式：硬件访问、硬件写入、硬件执行。最多一共
可以设置4个硬件断点。
（3）代码跟踪操作
代码跟踪操作主要包括一些常见的快捷键，用于对程序进行动态
跟踪。
·F9键：载入程序后，按F9键就可以运行程序了。
F7键：单步跟踪（步入），即一条代码一条代码地执行，遇到
Call语句时会跟入执行该语句调用地址处的代码或者调用的函数代
码。
F8键：单步跟踪（步过），遇到Call语句时不会跟入。
F4键：执行到所选代码。
ALT+F9键：执行到程序领空，如果进入到引I用的DLL模块领空
则可以用此快捷键快速回到程序领空
2.gdb
gdb是一个由GNU开源组织发布的、UNIXLinux操作系统下的、
基于命令行的、功能强大的程序调试工具。
---
## Page 236
CTF特训营：技术详解、解题方法与
9.3.2调试器
236/1144
（1）安装
在大多数Linux发行版中，gdb都是默认安装的，如果没有，那么
在Ubuntu下可以通过apt-get进行安装，安装命令为：
sudo apt-get install gdb
如果需要调试其他架构的elf程序，则可以安装gdb-multiarch，安
装命令为：
sudo apt-get install gdb-multiarch
此外，gdb也有很多插件，如peda、gef、pwndbg等，这里的插
件提供了一些额外的命令，便于对程序进行逆向分析。这些插件都可
以在Github上找到，根据其安装说明进行安装即可。图9-9为gdb安装
了peda插件之后运行的界面，可以通过pedahelp命令查看新增的命
令。
PEDA-Python Exploit Development Assistance for GDB
For latest update，check peda project page:https://github.com/longld/peda/
List of“peda”subcommands，type the subcommand to invoke it:
asmsearch--Search for ASMinstructionsinmemory
aslr--Show/set ASLR setting of GDB
assemble--On the fly assemble and execute instructions using NASM
checksec--Check for various security options of binary
ompmem--Compare content ofamemory region witha file
---
## Page 237
CTF特训营：技术详解、解题方法与
9.3.2调试器
237/1144
图9-9gdb安装peda插件后的界面
（2）基本的调试操作
表9-2至表9-7展示了基本的调试操作命令及其说明。
1）启动和结束gdb
表9-2启动和结束gdb
命令
功能
命令
功能
gdb program
启动gdb开始调试program
quir
退出调试器
2）通用命令
表9-3gdb的通用命令
命令
功能
run arguments
运行被调试程序（指定参数argun
attach processID
把调试器附加到PID为pro
ssID的进程上
3）断点
表9-4gdb断点命令
命令
功能
break *address
下断点
info breakpoints
查看所有断点
delete number
删除某个断点
4）运行调试目标
---
## Page 238
CTF特训营：技术详解、解题方法与
9.3.2调试器
238/1144
表9-5运行调试目标
命令
功能
stepi
执行一条机器指令、单步进人子函数
nexti
执行一条机器指令，不会进入子函数
continue
继续执行
5）查看和修改程序状态
表9-6查看和修改程序状态
命令
功能
以指定格式Format 打印地址address处的指定大小size、指定数量count的对象
x/countFormatSize addr
Size:b（字节）、h（半字）、w（字）、g（8字节）
Fommat：o（八进制）.d（十进制）、x（十六进制）、u（无符号十进制）、t（二进制）、f（浮
点数）、a（地址）i（指令）、c（字符）、s（字符串）
info register
查看寄存器
backtrace
打印函数调用栈回测
set Sregvalue
修改寄存器
set *(type*) (address)value
修改内存地址addr为valuc
6）其他命令
表9-7
gdb的其他常用命令
命令
功能
shell command
执行shell命令command
set follow-fork-mode parentjchild
当发生fork时，指示调试器跟踪父进程还是子进程
handler SIGALRM ignore
忽视信号SIGALRM，调试器接收到的SIGALRM信号不会发送给被调试程序
target remote ip:port
连接远程调试
---
## Page 239
CTF特训营：技术详解、解题方法与
9.3.3Trace类工具239/1144
9.3.3Trace类工具
Trace类工具通过一定的方式监控并记录程序的运行，然后使分
析者在记录的信息中得到程序的一些动态信息。例如，strace工具是
Linux下的一个用来跟踪系统调用的工具。这里主要介绍一个更为强
大的Trace类工具：Qira。
Qira的官方主页为http://qira.me/，由著名的黑客geohot开发。安
装完成之后，运行命令qira-s/bin/ls，这样相当于在40o0端口开启服
务/bin/ls，使用nclocalhost400o即可连接上去。同时，还会开启3002
的Web端口，如图9-10所示。
浏览器Web界面主要包括以下几个部分。
---
## Page 240
CTF特训营：技术详解、解题方法与
9.3.3Trace类工具
240/1144
←
C
172.16.58.142:3002
☆
W
应用
GGoogle
百度知道
ctf
逆向
temp
mMSDN Library
113
0
0x80484c7
oxf6fff01c
94
0x80483da
mov ebp,esp
95
0x80483dc
sub esp,8
96
0x80483df
call deregister_tm_clones
97
deregister_tm_clones mov eax,0x804a023
98
0x8048365
sub eax,0x804a020
99
100
0x804836a
cmp eax，6
0x804836d
ja 1oc_8048370
101
1oc_804836f
ret
102
0xB0483e4
mov byte ptr [0xB04a020],1
103
0x80483eb
0x80483ec
leave
104
ret
105
fini
push ebx
106
0x80484b5
sub esp,8
107
0x80484b8
call
x86.get_pc_thunk.bx
108
x86.get_pc_thunk.bx mov ebx,dword ptr [esp]
109
0x8048353
ret
110
0x80484bd
add ebx,
0x1b43
111
0x80484c3
add
esp,
8
112
0x80484c6
pop ebx
113
0x80484c7
ret
EAX:
_fini
ECX:
EDX:
0x0
EBX:
0xf67fe000
ESP:
oxfsffro1c
EBP:
oxf6fff0a8
ESI:
0xf67fe938