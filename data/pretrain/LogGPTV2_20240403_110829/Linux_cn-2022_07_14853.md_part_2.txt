### 评估和操作符号
用 `print` 命令可以打印变量的值。一般语法是 `print  `。修改变量的值，请输入：
```
set variable  .
```
在下面的截屏中，我将变量 `n_state_3_count` 的值设为 `123`。
![catch syscall write output](/data/attachment/album/202207/22/122233m22g95vo4bmkv25m.png)
`/x` 表达式以十六进制打印值；使用 `&` 运算符，你可以打印虚拟地址空间内的地址。
如果你不确定某个符号的数据类型，可以使用 `whatis` 来查明。
![whatis output](/data/attachment/album/202207/22/122234oxgtn3c6kbclh12n.png)
如果你要列出 `main` 函数范围内可用的所有变量，请输入 `info scope main` :
![info scope main output](/data/attachment/album/202207/22/122234ch9yjhch7h9bcycw.png)
`DW_OP_fbreg` 值是指基于当前子程序的堆栈偏移量。
或者，如果你已经在一个函数中并且想要列出当前堆栈帧上的所有变量，你可以使用 `info locals` :
![info locals output](/data/attachment/album/202207/22/122234cnnyc910iiggfdig.png)
查看手册以了解更多 [检查符号](https://sourceware.org/gdb/current/onlinedocs/gdb/Symbols.html) 的内容。
### 附加调试到一个正在运行的进程
`gdb attach ` 命令允许你通过指定进程 ID（PID）附加到一个已经在运行的进程进行调试。幸运的是，`coredump` 程序将其当前 PID 打印到屏幕上，因此你不必使用 [ps](https://man7.org/linux/man-pages/man1/ps.1.html) 或 [top](https://man7.org/linux/man-pages/man1/top.1.html) 手动查找 PID。
启动 `coredump` 应用程序的一个实例：
```
./coredump
```
![coredump application](/data/attachment/album/202207/22/122234q9cde196c8cdm6ic.png)
操作系统显示 PID 为 `2849`。打开一个单独的控制台窗口，移动到 `coredump` 应用程序的根目录，然后用 GDB 附加到该进程进行调试：
```
gdb attach 2849
```
![attach GDB to coredump](/data/attachment/album/202207/22/122234l2k1mlzkfozwklwo.png)
当你用 GDB 附加到进程时，GDB 会立即停止进程运行。输入 `layout src` 和 `backtrace` 来检查调用堆栈：
![layout src and backtrace output](/data/attachment/album/202207/22/122235h6zssoqeioi6lt17.png)
输出显示在 `main.cpp` 第 92 行调用 `std::this_thread::sleep_for(. ..)` 函数时进程中断。
只要你退出 GDB，该进程将继续运行。
你可以在 GDB 手册中找到有关 [附加调试正在运行的进程](https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html#Attach) 的更多信息。
#### 在堆栈中移动
在命令窗口，输入 `up` 两次可以在堆栈中向上移动到 `main.cpp` :
![moving up the stack to main.cpp](/data/attachment/album/202207/22/122235il2vavtstxxl12a1.png)
通常，编译器将为每个函数或方法创建一个子程序。每个子程序都有自己的栈帧，所以在栈帧中向上移动意味着在调用栈中向上移动。
你可以在手册中找到有关 [堆栈计算](https://sourceware.org/gdb/current/onlinedocs/gdb/Stack.html#Stack) 的更多信息。
#### 指定源文件
当调试一个已经在运行的进程时，GDB 将在当前工作目录中寻找源文件。你也可以使用 [目录命令](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_48.html#SEC49) 手动指定源目录。
### 评估转储文件
阅读 [创建和调试 Linux 的转储文件](https://opensource.com/article/20/8/linux-dump) 了解有关此主题的信息。
参考文章太长，简单来说就是：
1. 假设你使用的是最新版本的 Fedora
2. 使用 `-c1` 开关调用 coredump：`coredump -c1`
![Crash meme](/data/attachment/album/202207/22/122235iscnb2eozvuolrv2.png)
3. 使用 GDB 加载最新的转储文件：`coredumpctl debug`
4. 打开 TUI 模式并输入 `layout src`
![coredump output](/data/attachment/album/202207/22/122236nex7tbote4p7tx84.png)
`backtrace` 的输出显示崩溃发生在距离 `main.cpp` 五个栈帧之外。回车直接跳转到 `main.cpp` 中的错误代码行：
![up 5 output](/data/attachment/album/202207/22/122236jgmgvzj0w0f129og.png)
看源码发现程序试图释放一个内存管理函数没有返回的指针。这会导致未定义的行为并引起 `SIGABRT`。
### 无符号调试
如果没有源代码，调试就会变得非常困难。当我在尝试解决逆向工程的挑战时，我第一次体验到了这一点。了解一些 [汇编语言](https://en.wikipedia.org/wiki/Assembly_language) 的知识会很有用。
我们用例子看看它是如何运行的。
找到根目录，打开 `Makefile`，然后像下面一样编辑第 9 行：
```
CFLAGS =-Wall -Werror -std=c++11 #-g
```
要重新编译程序，先运行 `make clean`，再运行 `make`，最后启动 GDB。该程序不再有任何调试符号来引导源代码的走向。
![no debugging symbols](/data/attachment/album/202207/22/122236k5eh6f6x9ee7zz99.png)
`info file` 命令显示二进制文件的内存区域和入口点：
![info file output](/data/attachment/album/202207/22/122236a9uwtpyhu9z7jzpz.png)
`.text` 区段始终从入口点开始，其中包含实际的操作码。要在入口点添加断点，输入 `break *0x401110` 然后输入 `run` 开始运行程序：
![breakpoint at the entry point](/data/attachment/album/202207/22/122237gko9cihecc922taz.png)
要在某个地址设置断点，使用取消引用运算符 `*` 来指定地址。
#### 选择反汇编程序风格
在深入研究汇编之前，你可以选择要使用的 [汇编风格](https://en.wikipedia.org/wiki/X86_assembly_language#Syntax)。 GDB 默认是 AT&T，但我更喜欢 Intel 语法。变更风格如下：
```
set disassembly-flavor intel
```
![changing assembly flavor](/data/attachment/album/202207/22/122237xdsvvvs24yojys49.png)
现在输入 `layout asm` 调出汇编代码窗口，输入 `layout reg` 调出寄存器窗口。你现在应该看到如下输出：
![layout asm and layout reg output](/data/attachment/album/202207/22/122237catajn93nn2pypvv.png)
#### 保存配置文件
尽管你已经输入了许多命令，但实际上还没有开始调试。如果你正在大量调试应用程序或尝试解决逆向工程的难题，则将 GDB 特定设置保存在文件中会很有用。
该项目的 GitHub 存储库中的 [gdbinit](https://github.com/hANSIc99/core_dump_example/blob/master/gdbinit) 配置文件包含最近使用的命令：
```
set disassembly-flavor intel
set write on
break *0x401110
run -c2
layout asm
layout reg
```
`set write on` 命令使你能够在程序运行期间修改二进制文件。
退出 GDB 并使用配置文件重新启动 GDB ： `gdb -x gdbinit coredump`。
#### 阅读指令
应用 `c2` 开关后，程序将崩溃。程序在入口函数处停止，因此你必须写入 `continue` 才能继续运行：
![continuing execution after crash](/data/attachment/album/202207/22/122238dz4abef555z54rsz.png)
`idiv` 指令进行整数除法运算：`RAX` 寄存器中为被除数，指定参数为除数。商被加载到 `RAX` 寄存器中，余数被加载到 `RDX` 中。
从寄存器角度，你可以看到 `RAX` 包含 `5`，因此你必须找出存储堆栈中位置为 `rbp-0x4` 的值。
#### 读取内存
要读取原始内存内容，你必须指定比读取符号更多的参数。在汇编输出中向上滚动一点，可以看到堆栈的划分：
![stack division output](/data/attachment/album/202207/22/122238iebmftyewwb322ow.png)
你最感兴趣的应该是 `rbp-0x4` 的值，因为它是 `idiv` 的存储参数。你可以从截图中看到`rbp-0x8` 位置的下一个变量，所以 `rbp-0x4` 位置的变量是 4 字节宽。
在 GDB 中，你可以使用 `x` 命令*查看*任何内存内容：
> 
> `x/`  
> 
> 
> 
可选参数：
* `n`：单元大小的重复计数（默认值：1）
* `f`：格式说明符，如 [printf](https://en.wikipedia.org/wiki/Printf_format_string#Type_field)
* `u`：单元大小
	+ `b`：字节
	+ `h`：半字（2 个字节）
	+ w: 字（4 个字节）（默认）
	+ g: 双字（8 个字节）
要打印 `rbp-0x4` 的值，请输入 `x/u $rbp-4` :
![print value](/data/attachment/album/202207/22/122238obnnz33a1q31n5yb.png)
如果你能记住这种模式，则可以直接查看内存。参见手册中的 [查看内存](https://sourceware.org/gdb/current/onlinedocs/gdb/Memory.html) 部分。
#### 操作汇编
子程序 `zeroDivide()` 发生运算异常。当你用向上箭头键向上滚动一点时，你会找到下面信息：
```
0x401211               push   rbp
0x401212             mov    rbp,rsp
```
这被称为 [函数前言](https://en.wikipedia.org/wiki/Function_prologue)：
1. 调用函数的基指针（`rbp`）存放在栈上
2. 栈指针（`rsp`）的值被加载到基指针（`rbp`）
完全跳过这个子程序。你可以使用 `backtrace` 查看调用堆栈。在 `main` 函数之前只有一个堆栈帧，所以你可以用一次 `up` 回到 `main` :
![Callstack assembly](/data/attachment/album/202207/22/122238uj6y2jo4w4632xrr.png)
在你的 `main` 函数中，你会找到下面信息:
```
0x401431      cmp    BYTE PTR [rbp-0x12],0x0
0x401435      je     0x40145f 
0x401437      call   0x401211
```
子程序 `zeroDivide()` 仅在 `jump equal (je)` 为 `true` 时进入。你可以轻松地将其替换为 `jump-not-equal (jne)` 指令，该指令的操作码为 `0x75`（假设你使用的是 x86/64 架构；其他架构上的操作码不同）。输入 `run` 重新启动程序。当程序在入口函数处停止时，设置操作码：
```
set *(unsigned char*)0x401435 = 0x75
```
最后，输入 `continue` 。该程序将跳过子程序 `zeroDivide()` 并且不会再崩溃。
### 总结
你会在许多集成开发环境（IDE）中发现 GDB 运行在后台，包括 Qt Creator 和 VSCodium 的 [本地调试](https://github.com/WebFreak001/code-debug) 扩展。
![GDB in VSCodium](/data/attachment/album/202207/22/122239xp2g8gh28hiug9ik.png)
了解如何充分利用 GDB 的功能很有用。一般情况下，并非所有 GDB 的功能都可以在 IDE 中使用，因此你可以从命令行使用 GDB 的经验中受益。
---
via: 
作者：[Stephan Avenwedde](https://opensource.com/users/hansic99) 选题：[lkxed](https://github.com/lkxed) 译者：[Maisie-x](https://github.com/Maisie-x) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出