much works as you would hope and expect on Leopard. This is because GDB
in Mac OS X is not implemented via ptrace, but rather mostly using the Mach
API. From the user’s point of view, this doesn’t matter. GBD just works; it dif-
fers only behind the scenes. That said, there are a few Mac OS X–specifi c GDB
features worth mentioning.
There are a handful of Mach-specifi c commands available under the GDB
info command. These allow you to get information about processes besides the
one to which you might be attached and provide detailed information about
the attached process as well. Consider this example:
(gdb) info mach-tasks
65 processes:
gdb-i386-apple-d is 1499 has task 0xe07
mdworker is 1430 has task 0x408f
Preview is 1284 has task 0x1003
Pages is 1072 has task 0x418f
Then, information about the processes can be obtained with commands such
as,(gdb) info mach-task 0x418f
TASK_BASIC_INFO:
suspend_count: 0
virtual_size: 0x41647000
resident_size: 0x35e6000
TASK_THREAD_TIMES_INFO:
(gdb) info mach-threads 0x418f
Threads in task 0x418f:
0x5403
0x5503
0x5603
0x5703
0x5803
0x5903
0x5a03
0x5b03
9955336633cc0044..iinndddd 8866 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 87
0x5c03
0x5d03
0x5e03
0x5f03
0x6003
0x6103
The most useful of these commands are info mach-regions and info mach-
region. The fi rst of these two commands gets all the information for mapped
memory.
(gdb) info mach-regions
Region from 0x0 to 0x1000 (—-, max —-; copy, private, not-reserved)
… from 0x1000 to 0xb2000 (r-x, max rwx; copy, private, not-reserved)
… from 0xb2000 to 0xc8000 (rw-, max rwx; copy, private, not-
reserved) (2 sub-regions)
…
This is useful for fi nding writable and executable sections of code during
exploitation. It can also be used to fi nd large sections of mapped memory that
you may have supplied as part of a heap spray (there’s more on this in Chapter
8, “Exploiting Heap Overfl ows”). The fi nal command is used to fi nd the current
region in which a given address resides:
(gdb) info mach-region 0xbfffee28
Region from 0xbfffe000 to 0xc0000000 (rw-, max rwx; copy, private, not-
reserved) (2 sub-regions)
DTrace
DTrace is a tracing framework available in Leopard that was originally developed
at Sun for use in Solaris. It allows users access to applications at an extremely
low level and provides a way for users to trace programs and even change their
execution fl ow. What’s even better is that in most circumstances there is very
little overhead in using DTrace, so the process still runs at full speed. DTrace is
powerful because the underlying operating system and any applications that
support it have been modifi ed with special DTrace “probes.” These probes are
placed throughout the kernel and are at locations such as the beginning and end
of system calls. DTrace may request to perform a user-supplied action at any com-
bination of these probes. The actions to be executed are written by the user using
the D programming language, which will be discussed in the next section.
When you call the dtrace command, behind the scenes the D compiler is
invoked. The compiled program is sent to the kernel, where DTrace activates
the probes required and registers the actions to be performed. Since all of this is
done dynamically, the probes that are not needed are not enabled and so there
9955336633cc0044..iinndddd 8877 11//2255//0099 44::4400::4466 PPMM
88 Part II ■ Discovering Vulnerabilities
is little system slowdown. In other words, the traces are always in the kernel,
but they perform actions only when enabled.
D Programming Language
D is basically a small subset of C that lacks many control-fl ow constructs and
has some additional DTrace-specifi c functions. Each D program consists of a
number of clauses, each one describing which probe to enable and which action
to take when that probe fi res. The following is the obligatory “hello world”
program in D.
BEGIN
{
printf(“Hello world”);
}
Copy this into a fi le called hello.d and execute it with the following:
$ sudo dtrace -s hello.d
dtrace: script ‘hello.d’ matched 1 probe
CPU ID FUNCTION:NAME
0 1 :BEGIN Hello world
You’ll have to type Ctrl+C to exit the program. This program uses a special
probe called BEGIN, which fi res at the start of each new tracing request.
Many typical C-style operations and functions are available in D. See the
following code.
dtrace:::BEGIN
{
i = 0;
}
profile:::tick-1sec
{
i = i + 1;
printf(“Currently at %d”, i);
}
profile:::tick-1sec
/i==5/
{
exit(0);
}
Here the tick-1sec probe fi res every second. Notice the predicate /i==5/,
which tells DTrace to fi re only when the variable i has the value 5. Using predi-
cates in this manner is the only way to affect the program fl ow conditionally;
9955336633cc0044..iinndddd 8888 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 89
there are no if-then statements in D. Executing this tracing request gives the
following output.
$ sudo dtrace -s counter.d
dtrace: script ‘counter.d’ matched 3 probes
CPU ID FUNCTION:NAME
0 18648 :tick-1sec Currently at 1
0 18648 :tick-1sec Currently at 2
0 18648 :tick-1sec Currently at 3
0 18648 :tick-1sec Currently at 4
0 18648 :tick-1sec Currently at 5
0 18648 :tick-1sec
Describing Probes
Each probe has a human-readable name as well as a unique ID number. To see
a list of all the available probes on a system, run the following command.
$ sudo dtrace -l | more
ID PROVIDER MODULE FUNCTION NAME
1 dtrace BEGIN
2 dtrace END
3 dtrace ERROR
4 lockstat mach_kernel lck_mtx_lock adaptive-acquire
5 lockstat mach_kernel lck_mtx_lock adaptive-spin
…
A provider is a kernel module that is responsible for carrying out the instru-
mentation for particular probes. That is to say, each provider has a number of
probes associated with it. The human-readable name consists of four parts: the
provider, module, function, and name.
The provider is responsible for instrumenting the kernel for its particular
probes. The module name is the name of the kernel module for the probe or the
name of the user library that contains the probe—for example, libSystem.B.dylib.
The function is the one in which the probe is located. Finally, the name fi eld
supplies additional information on the probe’s use.
When writing out the name of a probe, all four parts are necessary, separated
by colons. For example, a valid name of a probe would be
fbt:mach_kernel:ptrace:entry
One of the things that make DTrace powerful is that if you do not supply
an entry for each fi eld in a probe name, DTrace applies the specifi ed action to
all probes that match the remaining fi elds. This is a wildcard mechanism that
is very useful. It takes a small amount of time for each probe request to be
9955336633cc0044..iinndddd 8899 11//2255//0099 44::4400::4466 PPMM
90 Part II ■ Discovering Vulnerabilities
enacted; however, this time penalty is approximately per request, not per probe!
Therefore, enabling 100 probes through one clever use of a wildcard takes no
more signifi cant up-front time than enabling a single probe.
The following code shows how this wildcard usage of DTrace can be utilized:
syscall:::entry
/pid == $1/
{
}
This small but powerful DTrace script enables every probe from the syscall
provider; that is, a probe at the beginning of each system call. Notice the use
of the built-in variable pid, which specifi es the process identifi er (PID) of the
process that invoked the probe. $1 is the fi rst argument passed to the program.
Here is an example of this probe’s use:
$ sudo dtrace -s truss.d 1284
dtrace: script ‘truss.d’ matched 427 probes
CPU ID FUNCTION:NAME
1 18320 kevent:entry
1 18320 kevent:entry
1 18320 kevent:entry
0 17644 geteuid:entry
0 17644 geteuid:entry
0 17642 getuid:entry
0 17644 geteuid:entry
0 18270 stat64:entry
0 18270 stat64:entry
Notice that due to the wildcard, with one line in this D program, 427 probes
were activated.
Example: Using Dtrace
Now that you have a basic understanding of DTrace, let’s examine how to
leverage it to provide information that will help in fi nding and exploiting bugs
in Leopard.
Suppose you want to monitor which fi les an application is accessing. This
could be useful for tracing information, for seeing whether there is a directory-
transversal attack during testing, or for identifying important confi guration
fi les used by closed-source applications. To accomplish these tasks, in Windows
there exists the Filemon utility. In Mac OS X there is fs_usage. Here we replicate
the functionality in DTrace with fi lemon.d.
syscall::open:entry
/pid == $1 /
{
9955336633cc0044..iinndddd 9900 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 91
printf(“%s(%s)”, probefunc, copyinstr(arg0));
}
syscall::open:return
/pid == $1 /
{
printf(“\t\t = %d\n”, arg1);
}
syscall::close:entry
/pid == $1/
{
printf(“%s(%d)\n”, probefunc, arg0);
}
Running this simple tracing program reveals the fi les accessed by Preview.
$ sudo dtrace -qs filemon.d 2060
open(/Users/cmiller/Library/Mail Downloads/MyTravelPlans.pdf)
= 8
close(8)
open(/.vol/234881026/1179352) = 8
close(8)
open(/Applications/Preview.app/Contents/Resources/English.lproj/
PDFDocument.nib/keyedobjects.nib) = 8
close(8)
open(/System/Library/Displays/Overrides/DisplayVendorID-610/
DisplayProductID-9c5f) = 8
close(8)
open(/dev/autofs_nowait) = 8
open(/System/Library/Displays/Overrides/Contents/Resources/da.lproj/
Localizable.strings) = 9
close(9)
close(8)
Example: Using ltrace
DTrace provides a simple way to follow which library calls are executed, like the
useful ltrace utility in Linux. Here is a very simple DTrace program that will do
something similar. Obviously a more complete version could be written.
pid$target:::entry
{
;
}
pid$target:::return
{
printf(“=%d\n”, arg1);
}
9955336633cc0044..iinndddd 9911 11//2255//0099 44::4400::4466 PPMM
92 Part II ■ Discovering Vulnerabilities
This script simply records when any function is called, and the return value of
that function. By changing the script slightly, you could limit it to the functions
within the main binary or just function calls from one library to another—for
instance, WebKit to libSystem. That is the power of DTrace; it is completely
confi gurable by the user.
Here is this script in action against Safari.
$ sudo dtrace –F -p 65527 -s ltrace.d
1 -> WTF::HashTable,
WTF::IntHash, WTF::HashTraits, WTF::HashTraits
>::remove(i
1 ,
WTF::IntHash, WTF::HashTraits, WTF::HashTraits
>::remove(i =6
1 -> WebCore::TimerBase::heapDecreaseKey()
1 -> void std::__push_heap(WebCore::TimerHeapIterator, int, int, WebCore
1 (WebCore::TimerHeapIterator, int, int, WebCore
=365032192
1  WebCore::updateSharedTimer()
1  WebCore::stopSharedTimer()
1 -> CFRunLoopTimerInvalidate
1 -> CFRetain
1  _CFRetain
1 -> OSAtomicCompareAndSwapIntBarrier
1  spin_lock
1 -> spin_lock
1 -> CFDictionaryRemoveValue
1 -> __CFDictionaryFindBuckets1a
1 <- __CFDictionaryFindBuckets1a =238
1 <- CFDictionaryRemoveValue =1582186028
It takes about 30 seconds for all the probes to be enabled. More detailed
information could be included, as well, but this example is intended to show
you how only a few lines of D can dig into what an application is doing.
9955336633cc0044..iinndddd 9922 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 93
Example: Instruction Tracer/Code-Coverage Monitor
It is useful to know the code that an application is executing. Using DTrace, you
can get either an instruction trace or an overall code-coverage report. Although
you cannot hope to apply millions of probes (for example, at each basic block),
you can perform less ambitious tasks, such as monitoring which functions or
instructions within a function are being executed. The following is a probe that
traces all the instructions executed within the jsRegExpCompile function within
the JavaScriptCore library. This function has been responsible for a couple of
high-profi le vulnerabilities in Safari.
pid$target:JavaScriptCore:jsRegExpCompile*:
{
printf(“08%x\n”, uregs[R_EIP]);
}
Running this script with DTrace produces a list of the instructions executed
in this function.
$ sudo dtrace -qp 65567 -s instruction_tracer.d
089478a4e0
089478a4e0
089478a4e1
089478a4e3
089478a4e4
…
Likewise, the following probe will trace all the functions called from the
JavaScriptCore library.
pid$target:JavaScriptCore::entry
{