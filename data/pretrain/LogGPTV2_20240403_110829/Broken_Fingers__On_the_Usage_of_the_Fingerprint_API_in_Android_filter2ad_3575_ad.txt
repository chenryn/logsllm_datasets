simulating that a device got automatically locked (which, by
default, happens after a few seconds of non-usage). To achieve
this, the attacker can show a fullscreen, black overlay on top
of any existing Activity.3 Moreover, by requiring the permission
WRITE_SETTINGS, the attacker can also minimize the background
light of the screen. At this point, the attacker can prevent the device
from automatically locking itself (by using the WakeLock API,
requiring the automatically-granted WAKE_LOCK permission). In
this scenario, a user will likely assume that the device got
automatically locked and try to unlock it by touching the fingerprint
sensor.
As an attempt to defeat these UI attacks, a countermeasure is
currently implemented by the Android framework. Specifically,
an app can only request the usage of the fingerprint sensor if it
is displayed in the foreground. Unfortunately, in evaluating if an
app is in the foreground, the Android framework only evaluates its
position in the Activity stack. Since the Android framework does
not deem screen overlays as part of the Activity stack, an Activity
will still be considered as in foreground, even when maliciously
covered by an overlay.
VII. AUTOMATIC ANALYSIS TOOL
We have developed a tool to automatically analyze how an
app uses the fingerprint API. The tool takes an Android app as
input and classifies its usage of the fingerprint API into Weak,
Decryption, and Sign usage, as defined in Section IV. We use the
tool above to perform the first systematic study on how Android
applications use the fingerprint sensor, pinpointing cases in which
this API is incorrectly used. We believe app developers and app
market operators can also use this tool to automatically understand
if there is any issue in how an app uses the fingerprint API. Figure 1
provides an overview of the developed tool.
3An Activity is the standard “unit of interaction” in Android and loosely
corresponds to a window in a desktop environment.
Bytecode SSA IRFeatures – autenticate usage– onAuthenticationSucceded usage– cryptographic key propertiesPermission AnalysisIR generationCall GraphData-Flow GraphFeature ExtractionAndroidAppAPI usage analysisPre-Processing- Not Used- Weak- Decryption- SIgnApp ClassificationClassifierA. Challenges and Design Choices
Our tool performs static analysis on an app’s bytecode.
We choose static analysis on bytecode to be able to perform
our analysis without needing source code (which is typically
unavailable both to security researchers and market operators).
Moreover, many apps using the fingerprint API belong to the
“finance” category. This makes very difficult to automatically
perform dynamic analysis on these apps, since we do not have the
required financial account information needed to get past the login
stage. Even approaches able to automatically register accounts
while performing dynamic analysis, such as AppsPlayground [39],
cannot solve this problem by automatically creating bank (or
other financially related) accounts. This aspect also significantly
complicates our manual investigation of the results and our
attempts to dynamically execute a given app.
One of the main challenges when analyzing recent real-world
Android apps is the amount of code these applications include (on
average, the apps we have analyzed have about 51,000 methods).
This is often because apps include big libraries, which, even if only
marginally used, substantially increase the amount of code a static-
analysis tool may end up analyzing. Empirically, recent research [7]
has shown that even relatively easy data-flow analysis, such as flow-
insensitive taint analysis, often ends up using unpractical amounts
of resources and time, when applied to an entire app. However,
for the analysis we are interested in, we only need to precisely
characterize the usage of very specific API methods. For these
reasons, we adopted a more localized approach, which constructs
call graph and data-flow graphs starting from the APIs of interest,
limited to the specific parameters we are interested in.
B. Pre-processing
The first step of our analysis is to determine which apps poten-
tially use the fingerprint API. Since, to use the fingerprint hardware,
an app has to require the USE_FINGERPRINT permission, our
tool first checks whether a given app requires this permission
by reading its manifest file. Apps not requesting this permission
cannot use the fingerprint API.
After this step, we use the Java static analysis framework
SOOT [47] to obtain an intermediate representation of the app’s
bytecode. To simplify further data-flow analysis, we choose the
Shimple intermediate representation, which is in single static
assignment (SSA) form.
C. Call Graph Construction & Data Flow Analysis
Our analysis is based on two static analysis primitives: call
graph generation and data-flow graph analysis. The call graph
represents method invocations among different methods in the
analyzed app. In building the call graph, we perform intra-
procedural type-inference [36] to determine the possible dynamic
types of the object on which a method is called. If this analysis
fails, we over-approximate the possible dynamic types as all the
subclasses of its static type (including the static type itself).
Our call graph also considers some implicit control flow
transitions introduced by the Android framework [12]. In par-
ticular, when the onAuthenticationSucceeded callback is
invoked by the Android framework, typically developers call the
postDelayed method, by passing, as parameter, an instance of a
specific inner-class, implementing the Runnable interface. On
TABLE II.
OVERVIEW OF THE COLLECTED FEATURES
authenticate
onAuthenticationSucceeded
Null/NonNull
NoCrypto/Constant/
Decrypt/Signature
Key Properties
DecryptionKey/SigningKey
UnlockedKey/LockedKey
this inner-class, the method run will be later called and executed
in a different thread. This is a common behavior in Android,
since code dealing with UI elements has to run in a different
thread than code dealing with network operations, to ensure app’s
responsiveness.
Our tool handles these cases by identifying the possible dy-
namic types of the instance passed to the postDelayed method.
Then, it adds edges in the call graph between the postDelayed
method and the implementations of the run methods that can be
possibly called, according to the identified types (typically, just
one).
To perform data-flow analysis, starting from a variable of
interest V (e.g., a specific parameter of an API call), we recursively
follow the def-use chain to obtain an inter-procedural backward
slice. Moreover, when a field access is encountered, we continue
the analysis starting from all the instructions accessing it. As an
output of this analysis, we obtain a slice of instructions (encoded as
a tree) in which each instruction uses variables that may influence
the value of V .
D. Feature Extraction
At a high-level, our analysis extracts three kinds of features:
1)
2)
3)
how the authenticate API is used;
which code is triggered when the onAuthentication-
Succeeded callback is called;
the parameters used to create cryptographic keys.
Table II enumerates the features we extract to characterize these
three aspects.
authenticate API Usage. For the authenticate API, for each
occurrence of a call to this method, our analysis generates a
backward slice, starting from the parameter named crypto. This
parameter is used to specify the cryptographic key that is “unlocked”
whenever a legitimate user touches the fingerprint sensor. Then,
by analyzing the generated slice, we check if the value of this
parameter is NULL. In this case, it means that the authenticate
API will activate the fingerprint sensor, but no key will be unlocked
when the user touches it. We mark this case as Null, otherwise we
mark it as NonNull.
onAuthenticationSucceeded Callback Usage. We analyze the
code that is executed when the onAuthenticationSucceeded
callback is invoked, to determine if and how cryptographic
operations happen after the user touched the fingerprint sensor.
Starting from each occurrence of a method overriding onAuthen-
ticationSucceeded, we start a forward exploration of the call
graph, looking for calls to specific cryptographic methods.
9
Specifically, if we encounter a call to the methods sign
or update of the class Signature, we mark this usage of
onAuthenticationSucceeded as Signature, whereas if we
encounter a call to the methods doFinal or update of the
class Cipher, we mark it as Decrypt.
As a special case, if after the onAuthenticationSuc-
ceeded callback a decryption operation is detected, but it is per-
formed on a fixed, hardcoded string (as explained in Section IV-B),
we mark this case as Constant (instead of Decrypt). To determine
this, we generate a backward slice starting from the parameter
specifying the decrypted content, and we analyze it to determine if
it results in a constant string.
In case we do not encounter any of the aforementioned
cryptographic methods we mark the usage of the onAuthenti-
cationSucceeded callback as NoCrypto, since it shows that no
cryptographic operation is performed as a consequence of the user
touching the fingerprint sensor.
Cryptographic Key Properties. To determine the type of the used
cryptographic keys, we generate a backward slice starting from the
purpose parameter of the KeyGenParameterSpec.Builder
constructor. In case we determine it to have the value PUR-
POSE_SIGN we mark the key as a SigningKey otherwise we mark
it as a DecryptionKey.
We also verify if the setUserAuthenticationRequired
method is invoked (by passing true for its required parame-
ter). If this is the case, we mark the key as Locked, otherwise, we
mark it as Unlocked.
Other Features. To integrate the information collected by
the features
just described, we also check if an app
is using the getCertificateChain and setAttestation-
Challenge APIs. While we do not use this information to
classify how an app uses the fingerprint API, we will use this
information to study if apps use key attestation (see Section V-D
and Section VIII-G).
E. App Classification
After collecting the aforementioned features, we use them
to classify how the analyzed app uses the fingerprint API. The
rationale behind this classification rules is first to identify cases in
which the fingerprint API is not used (e.g., no fingerprint-related
API is called) or used in a Weak way (e.g., no cryptographic
operation is performed). Then, we analyze the properties of the
used cryptographic keys and the cryptographic methods called to
determine whether to classify the app as Decryption or Sign.
First of all, we note that for some of the analyzed apps that
request the USE_FINGERPRINT permission, we cannot identify
any usage of the authenticate API or the onAuthentica-
tionSucceeded callback. We classify these apps, together with
those not requesting the USE_FINGERPRINT permission, as “Not
Used.”
Then, we classify an app as Weak if any of the following
conditions are met:
1) We do not detect any key generation (i.e., the KeyGen-
ParameterSpec.Builder API is never used).
TABLE III.
STATIC ANALYSIS TOOL RESULTS SUMMARY
Total Apps Analysis Errors
501
5 (1.00%)
Not Used
72 (14.37%)
Category
Detected apps
Misclassifications
Weak
269 (53.69%)
Decryption
146 (29.14%)
Sign
9 (1.80%)
0/20
1/10
1/9
3)
2) All the usages of the authenticate API are marked
as Null. This corresponds to the case in which no
cryptographic key is unlocked as a consequence of the
user touching the fingerprint sensor.
All the usages of the onAuthenticationSucceeded
callback are marked as NoCrypto or Constant. This cor-
responds to the case in which no cryptographic operation
is performed after the user touched the sensor (or the
only cryptographic operation happening is performed on
a constant value).
4) An Unlocked key is used. In fact, in this case, the used
key is not locked, and any root attacker can immediately
use it, without having the user touching the fingerprint
sensor.
At this point, we know that some proper cryptographic
operation happens after the user touches the fingerprint sensor. To
determine whether the app uses the fingerprint API in a Decryption
or in a Sign way, we use the following rule. We classify an app as
Sign if any key marked as SigningKey is generated and any usage
of the onAuthenticationSucceeded callback is marked as
Signature. Otherwise, we classify the app as Decryption.
VIII. AUTOMATIC ANALYSIS RESULTS
A. Evaluation Methodology
To determine the correctness of the classification of our tool,
we employed the following two-step methodology:
1) Driving the App to Ask for Fingerprint: In the first step of
our evaluation, we manually drive the analyzed app to the point
where it starts communicating with the TEE for fingerprint-based
authentication.
One significant challenge in this step is that most of the
considered apps require specific accounts to go beyond the initial
login interface, and it is impractical to create accounts for many
such apps. This is because many of the apps we analyzed are
mobile-banking apps, for which it is not possible having an account
without also being customers of the connected bank. In other cases,
the app’s backend requires financial information such as Social
Security Numbers or debit card numbers to create an account,
which further hindered our ability to interact with these apps.
2) Verify the Existence of Expected Weaknesses: Once we
drive the analyzed app to start interacting with the TEE, we verify
our tool’s classification for this app by simulating a root attacker
and see if the fingerprint-based authentication is vulnerable to
weaknesses of the corresponding class as predicted in Section V.
For simulating a root attacker, we used the Xposed Framework [1],
a tool which allows us to easily modify apps’ and framework’s
Java code at runtime.
10
In particular, if our tool classifies the app as using the
Weak usage, our simulated attack modifies the behavior of the
authenticate API to directly call the onAuthentication-
Succeeded callback. Furthermore, we deal with the case in
which the victim app invokes any cryptographic operation using
a key stored inside the TEE. In this case, the app would raise an
exception, since this key has not been “unlocked.” This scenario
may occur in the case in which the result of the decryption is
not used (and therefore we classify the app as Weak), but still,
a TEE-protected key is used to decrypt a hardcoded string, as it
happens, for instance, in the Google’s sample code [25]. We deal
with this case, by masking the generated “User Not Authenticated”
exception.
For apps classified as using the fingerprint API in a Decryption
way, we first record the outputs of decryption operations using
TEE-protected keys (simulating a Root attacker). Then, we modify
the authenticate API as explained before and, additionally,
we replay the collected decryption outputs when necessary.
B. Dataset
We collected all the free apps classified as “Top” (i.e., most
popular) in each category of the Google Play Store. These apps
were downloaded in February 2017. Additionally, we added apps
preinstalled on a Nexus 5X device running Android 7. In total, we
created a dataset of 30,459 apps. Among these apps, 501 (1.64%)