下面是一些使用select的例子：
一旦你加载了带有数据的数据库，那么你需要一种方式来查询它。对于MP3应用来说，你需
(defun select (&key 
(select
:: Select a sorted list of artists with songs in the genre "Rock"
:; Select all rows where the :artist column is "Green Day"
order-by :artist)
:from *mp3s*
:columns :artist
(when where
(((unoo ='aseqeaep ozut sattJ pP~ papeors-α a zeurog)
(walk-directory
:test
#'(lambda (file)
第27章实践：MP3数据库
(setf rows
(matching *mp3s* :genre "Rock")
(incf count)
(princ #\.)
(d-εdur:#
insert-row
(restrict-rows rows where)))
(columns t) from where distinct order-by)
(file->row file) db))
www.TopSage.com
---
## Page 358
测试失败以后，LOOP子句always立即返回NIL，否则将使整个LOOP返回r。
价，你需要将用于每一列的相应等价谓词应用在适当的列值上。回顾第22章里的内容，在一对值
多次调用，你会希望它在每次调用时尽可能地少做事。
并返回一个仅含有传递的模式中指定的那些列的新行。下面是一种实现它的方式：
标是返回一些仅含有特定列值的行，你可以推断出extractor将返回接受一行作为参数的函数,
columns使用由extractor返回的值作为提供给MAP的函数参数。由于project-columns的目
和row-comparator。
函数row-equality-tester和row-comparator的实现方式很相似。为了决定两行是否等
通过它们的用法你可以看出，这些函数中的每一个都必须返回函数。例如，project-
注意你完成这项工作的方式—在闭包主体之外从模式中解出了所有的名字：由于闭包将被
(defun extractor (schema)
当然，select中真正有趣的部分在于你如何实现函数extractor、row-equality-tester 
(defun sorted-rows (rows schema order-by)
(defun distinct-rows (rows schema)
(defun restrict-rows (rows where)
(defun find-column (column-name schema)
(defun extract-schema
(defun mklist (thing)
{sort（copy-seqrows)
(remove-duplicates rows :test (row-equality-tester schema)))
(map
(remove-if-not where rows))
(or
(loop for c in column-names collect (find-column c schema)))
(let
{if
#'(lambda (row)
(make-instance 'table :rows rows :schema schema)))
(when order-by 
(when distinct
(unless
）'vector (extractor schema) rows))
(find
(listp thing) thing (list thing)))
(setf rows (sorted-rows rows schema (mklist order-by))))
(setf rows (distinct-rows rows schema)))
(setf rows (project-columns rows schema)))
(setf schema (extract-schema (mklist columns) schema))
{(names
(loop for c in names collect c collect (getf row c)))))
(error
"No column:^a in schema:^a" column-name schema)))
(eql columns
(mapcar #'name schema)))
(column-names schema)
(row-comparator order-by schema)})
scnema
t)
www.TopSage.com
:key
'name)
27.4
查询数据库 
341
---
## Page 359
返回一个函数匹配:artist值为“Green Day”的行。你也可以传递多个名字和值，当所有列都匹
select例子里看到过它的用法。例如，对matching的如下调用：
它们将用来构造查询函数，从而允许你表达常用类型的查询，并帮你处理每个列的正确等价性谓
过在实践中，你很少需要用任意代码来表达查询条件。因此你应当提供两个函数matching和in，
27.5
一个实现了该算法的函数如下所示：
了所有的列而始终没有遇到某个行的值赢得了比较，那么这两行就是等价的，于是你返回NIL。
你可以立即返回NIL。否则，两个列值就是等价的，那么你应当继续比较下一个列。如果你通过
味着第二个列值排在了第一个列值的前面，并且因此第二个行也应该排在第一个行的前面，所以
还是因为它们相等。因此你应当以相反的参数再次调用比较器。如果这次比较器返回真，那就意
绝对应该排在第二个行的前面，所以你可以立即返回r。
首先以来自第一个行的值作为第一个参数来调用比较器。如果比较器返回真，那就意味着第一行
返回真，否则返回假。
词和值正则化器的使用。
或者说明它俩其实相等。你希望你的行比较器具有相同的行为：当第一个行排在第二个的前面时
前面时返回真，否则返回假。这样，NIL可能意味着第二个参数应该被排在第一个参数的前面，
342
主要的查询函数构造器是matching，它返回一个函数匹配带有给定列值的行。你在早先的
 select的:where参数可以是任何接受行对象并在该行被包括在结果中时返回真的函数。不
但如果列比较器返回了NIL，那么你需要检测这是因为第二个值应当排在第一个值的前面，
这样，为了比较两个行，你应当比较用于排序的列中的值，其中采用每个列的对应比较器。
排序两行稍微复杂一些。在Lisp中，比较操作符当它们的第一个参数应该排在第二个参数的
(defun row-comparator (column-names schema)
(defun row-equality-tester (schema)
匹配函数
let
#(lambda
第27章实践：MP3数据库
(loop
{tests
 always (funcall test (getf a name) (getf b name))))))
finally (return nil)))))
vhen
for name in column-names
(ab
(funcall
comparacor
comparator
(getf
www.TopSage.com
 a name)
r b-value a-value)
return nil
---
## Page 360
假设你想要在MP3数据库中找出所有与DixieChicks的歌曲同名的歌曲。你可以像下面这样通过
中取值的行。你将定义in来接受两个参数：一个列名和一个含有你想要匹配的那些值的表。例如，
闭包给它，该闭包向列匹配器传递当前行的FUNCALL调用。
在你当前测试的行上被调用时，是否均返回真。因此，作为EVERY的谓词参数，你传递了另一个
递给EVERY的列表本身是一个由函数组成的列表，即列匹配器。你想要知道的是，每个列匹配器
作为EVERY第二个参数传递进来的列表的每一个元素上均为真时才返回真。不过在本例中，你传
表中。因此，matching返回带有单个参数row的闭包。
程带来多少灵活性。
情只做一次而不用在表的每一行上都做。
列表：
化版本时返回真。
要匹配的未经正则化的值，并返回接受单一行的函数，它在该行的给定列的值匹配给定值的正则
列的值。为了构造出这些函数，你需要定义函数column-matcher，它接受column对象和你想
列的等价谓词和值正则化器。
辑名为“American Idiot”的行的闭包：
配时，返回的函数才算是匹配。例如，下面的例子返回了一个匹配艺术家为“GreenDay”和专
现在回想一下，函数EVERY可以接受谓词函数作为其第一个参数，并当且仅当该函数应用在
matching的职责是返回一个函数，它将在表的每一行上被调用来检测其是否应被包含在新
你可以从较小的函数中逐步构造出matching返回的函数，其中每个底层函数负责匹配一个
，你必须将整个表对象传给matching，因为它需要访问表的模式，以获得它所要匹配的那些
这个函数就像一个闭包的迷宫，但值得花点儿时间来思考一下作为第一类对象的函数会给编
现在你可以实现matching了。再次注意：你应尽可能多地在闭包之外做事，以确保有些事
然后，你可以使用函数column-matchers为那些你关心的名字和值构造一个列匹配函数的
(defun matching (table &rest names-and-values)
(defun column-matchers (schema names-and-values)
(defun column-matcher(column value)
(let
Buildawhere functionthat
#'(lambda（row)
#(lambda （row)（funcall predicate(getf row name)normalized))))
when value collect
(column-matcher （find-column name schema)value)))
(predicate(equality-predicate column))
(normalized
(nor
(malize-fo
www.TopSage.com
matches
columnvaluecolumn))）
rows withthegiven column values."
27.5匹配函数V343
---
## Page 361
你需要提供一种方式来同时做到这两件事，而无需直接用rows向量或是GETF来获取一个行中的
决定以后改变表的内部表示，就只需要改变这些函数和宏的实现。尽管CommonLisp并不能使你
个未经正则化的列值。因此，定义一些抽象来提供你想要支持的操作就会是个好主意了。如果你
也不希望其他代码可以直接操作这些数据结构，例如，你不希望任何人使用SETF在行中放置-
数操作向量和plist来得到表中的值。但这些表示可能确实是你以后会改变的内部细节。另外，你
说，该table中带有一个rows槽，类型为plist构成的向量，然后使用所有正常的Common Lisp函
你确定将永不改变在表中表达数据的方式，那么就可以直接把表结构作为API的一部分，也就是
27.6
in和一个子select写出这个where字句：
列值。
344
① 这个查询也会返回所有Dixie Chicks的歌曲。如果你想把查询限制在除Dixie Chicks之外的其他艺术家的歌曲上，
目前这些操作都很容易实现，它们几乎就是包装在没有这些抽象时你编写的代码之上的。你
你需要对查询结果做的最常见的事情，也许就是在各个行上迭代并解出特定列的值。因此，
 select返回了另一个table，因此你需要思考一下如何才能得到表中单独的行和列值。如果
(defun in (column-name table)
尽管查询更复杂了，但in本身的定义却比matching要简单得多。
(select
语言。
这样显然不是很方便。如果你打算编写一个需要做很多复杂查询的应用程序，那么你会考虑设计更加复杂的查询
列查询移除DixieChicks自己的歌曲：
那么就需要一个更复杂的：where函数。由于：where参数可以是任何函数，所以这确实是可能的。你可以通过下
:from *mp3s*
:columns '(:artist :song)
获取结果
第 27章
(values (map 'list #:(lambda (r) (getf r column-name)) (rows table))))
(in :song
(same-song
{and (not
(row)
{select
实践：MP3数据库
:from *mp3s*
:columns :song
(select :columns :song :from *mp3s* :where dixie-chicks)))
(funcall dixie-chicks row)) (funcall same-song row))/))
www.TopSage.com
:where query))
---
## Page 362
定行。
简单替换为：