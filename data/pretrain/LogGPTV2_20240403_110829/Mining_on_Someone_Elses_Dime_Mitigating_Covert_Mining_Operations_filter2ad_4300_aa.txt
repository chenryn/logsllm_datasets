title:Mining on Someone Else's Dime: Mitigating Covert Mining Operations
in Clouds and Enterprises
author:Rashid Tahir and
Muhammad Huzaifa and
Anupam Das and
Mohammad Ahmad and
Carl A. Gunter and
Fareed Zaffar and
Matthew Caesar and
Nikita Borisov
Mining on Someone Else’s Dime: Mitigating
Covert Mining Operations in Clouds
and Enterprises
Rashid Tahir1(B), Muhammad Huzaifa1, Anupam Das2, Mohammad Ahmad1,
Carl Gunter1, Fareed Zaﬀar3, Matthew Caesar1, and Nikita Borisov1
1 University of Illinois Urbana-Champaign, Urbana, USA
{tahir2,huzaifa2,mahmad11,cgunter,caesar,nikita}@illinois.edu
2 Carnegie Mellon University, Pittsburgh, USA
3 Lahore University of Management Sciences, Lahore, Pakistan
PI:EMAIL
PI:EMAIL
cryptocurrency mining operations are
Abstract. Covert
causing
notable losses to both cloud providers and enterprises. Increased power
consumption resulting from constant CPU and GPU usage from mining,
inﬂated cooling and electricity costs, and wastage of resources that could
otherwise beneﬁt legitimate users are some of the factors that contribute
to these incurred losses. Aﬀected organizations currently have no way of
detecting these covert, and at times illegal miners and often discover the
abuse when attackers have already ﬂed and the damage is done.
In this paper, we present MineGuard , a tool that can detect mining
behavior in real-time across pools of mining VMs or processes, and pre-
vent abuse despite an active adversary trying to bypass the defenses. Our
system employs hardware-assisted proﬁling to create discernible signa-
tures for various mining algorithms and can accurately detect these, with
negligible overhead (<0.01%), for both CPU and GPU-based miners. We
empirically demonstrate the uniqueness of mining behavior and show the
eﬀectiveness of our mitigation approach(≈99.7% detection rate). Fur-
thermore, we characterize the noise introduced by virtualization and
incorporate it into our detection mechanism making it highly robust.
The design of MineGuard is both practical and usable and requires no
modiﬁcation to the core infrastructure of commercial clouds or enter-
prises.
Keywords: Cryptocurrency · Cloud abuse · Hardware Performance
Counters
Electronic supplementary material The online version of this chapter (doi:10.
1007/978-3-319-66332-6 13) contains supplementary material, which is available to
authorized users.
c(cid:2) Springer International Publishing AG 2017
M. Dacier et al. (Eds.): RAID 2017, LNCS 10453, pp. 287–310, 2017.
DOI: 10.1007/978-3-319-66332-6 13
288
R. Tahir et al.
1 Introduction
For most popular cryptocurrencies, such as Bitcoin and Litecoin, it is not prof-
itable to mine using one’s own resources unless the mining is carried out using
specialized hardware [17]. However, the exercise can be of value if carried out
on “stolen” resources, such as pools of hijacked VM instances or resources
acquired under false pretexts (e.g., for research). This has incentivized both
hackers [8,11,18] and unethical employees, such as professors [15], academic
researchers and students mining on university-owned resources [10,26]. Even
IT admins [7] have been found doing covert cryptomining. One researcher, for
instance, misused NSF-funded supercomputers to mine for Bitcoins costing the
university upwards of $150,000 [44]. On two other noteworthy occasions, NAS
device botnets secretly mined for DogeCoin and Monero amounting to $600,000
and $82,000 respectively, before the covert operations were eventually discovered
and shut down [14,29]. There are several other instances of employees and hack-
ers secretly mining for coins in both the corporate [5] and government sectors [4].
This covert abuse of “borrowed” resources is not limited to enterprises and
has also been observed in commercial clouds and datacenters [11]. The sheer
amount of resources needed for a covert cryptomining operation are readily avail-
able in a cloud setting. Furthermore, since mined coins can easily be transferred
to the attacker using a simple anonymized wallet address, it makes the “get
away” scheme straightforward [1]. As a result, numerous instances of this tar-
geted cloud abuse have already been uncovered, whereby attackers successfully
broke into clouds and deployed cryptominers at a massive scale by spawning
numerous VM instances dedicated exclusively to mining [9,11,18]. The advent
of GPU clouds, such as those operated by Amazon and Microsoft, have further
incentivized attackers to transfer their operations onto clouds and leverage the
power of parallel computing, as GPUs often have higher hash rates and perform
better for certain mining algorithms.
In this paper we present MineGuard, a simple hypervisor tool based on
hardware-assisted behavioral monitoring, which accurately detects the signa-
ture of a miner. Speciﬁcally, our system uses Hardware Performance Counters
(HPCs), a set of special-purpose registers built into modern processors, to accu-
rately track low-level mining operations or events within the CPU and GPU
with minimal overhead. This gives MineGuard the ability to accurately detect,
in real-time, if a VM is trying to mine for cryptocurrency, without incurring
any substantial slowdown (<0.01%). MineGuard is built on the observation that
for attackers to mine for any cryptocurrency, they will have to repeatedly run
the core Proof-of-Work (PoW) algorithm that the currency is based on (such as
Scrypt [32] for Litecoin) millions of times at the very least. Such repeated runs
would substantially inﬂuence the count of certain HPCs in a particular way,
which we can detect using a runtime checker. We empirically demonstrate very
high detection rates (≈99.7%), low false positives (<0.25%) and false negatives
(<0.30%). Furthermore, our system does not modify any hypervisor code and
leverages commonly available tools such as perf
[19], thus making it easy to
deploy and use in cloud and enterprise environments. We believe that attackers
Mitigating Covert Mining Operations in Clouds and Enterprises
289
cannot deceive MineGuard as (1) it attempts to catch the inherent mining behav-
ior essential for mining and (2) it is more privileged than a VM and hence diﬃcult
to bypass. We make the following contributions:
Behavioral Analysis of Cryptomining: We perform a ﬁrst-of-its-kind com-
prehensive study to explore the behavior of cryptocurrency mining focusing on
micro-architectural execution patterns. Speciﬁcally, (1) we show that CPU/GPU
signatures of mining and non-mining applications diﬀer substantially; (2) diﬀer-
ent implementations of the same coin exhibit similar signatures due to the same
underlying PoW algorithm, meaning that mining should be detectable by pro-
ﬁling an algorithm instead of the executing binaries (to overcome polymorphic
malware) and (3) surprisingly, proﬁles of various coins exhibit overlapping sig-
natures, despite having diﬀerent PoW algorithms.
HPC Monitoring in Virtual Environments: While prior work has demon-
strated the use of HPCs for malware detection, their utility and feasibility in a
virtualized context has largely been ignored. We characterize the noise that is
introduced into each HPC value individually due to virtualization, and show the
best-ﬁt distribution for this noise in each case. Our ﬁndings indicate that certain
counters have a very pronounced noise-distribution, which can be used to error-
correct the signatures. In contrast, some HPCs show negligible eﬀects of noise.
To incorporate this noise into our behavior proﬁles we develop a step-by-step
signature creation process that captures an evolving proﬁle of mining malware
in increasingly noisier environments making our detection robust under diﬀerent
virtualized environments.
Userspace Detection Tool: We build a user space tool, MineGuard, that can
run on top of any hypervisor or host OS and perform real-time detection. Mine-
Guard has a negligible overhead, a small size footprint, is hard to evade, and can-
not be compromised by malicious VMs. We believe MineGuard can be extended
for other resource-intensive malware with minor modiﬁcations and serves as a
valuable addition to the cloud security toolbox.
Paper Organization: We discuss the cost of covert cryptomining in Sect. 2 and
how HPCs can be used to detect such miners in Sect. 3; followed by our system
design in Sect. 4, methodology in Sect. 5 and evaluation in Sect. 6. Limitations are
presented in Sect. 7 and related work in Sect. 8. Finally, we conclude in Sect. 9.
2 Understanding the Cost of Covert Cryptomining
Apart from using compromised accounts and hijacked VM instances for min-
ing, hackers can also exploit the freemium business model of clouds. They can
amass the complimentary resources allocated to individual accounts and build
a large valuable pool [48,51], e.g., building an unlimited “slack space” on top of
small free storage shares in Dropbox [43]. This issue has recently gained more
traction amongst cloud providers with Google expressly forbidding any mining-
related activity in its free tier resources [27]. Furthermore, providers also oﬀer
free resources under other specialized programs, such as to app developers and
290
R. Tahir et al.
students. These resources can also be abused in the aforementioned manner.
As evidence to these freeloading issues, researchers recently constructed a min-
ing botnet on Amazon entirely out of free resources [11]. The mining botnet
was capable of generating cryptocurrency worth thousands of dollars and went
completely undetected, despite its large footprint and conspicuous behavior.
These covert and cleverly concealed mining operations are a serious ﬁnancial
concern for admins. First, they waste valuable resources. Second, to maximize
the hash rates hackers push CPUs/GPUs to full compute capacity for extended
periods of time. This increases power consumption and generates heat, both of
which impact operating costs [6]. Hence, it is imperative that mining deploy-
ments be thwarted before diﬀerent losses stack up.
Users can’t prevent this abuse as attackers can easily get root access and
bypass security mechanisms or simply spawn their own VMs using stolen
accounts. Similarly, providers and admins also struggle to mitigate these min-
ing rigs [18], as they cannot distinguish mining from other types of workloads
from outside the VM. Traditional VM instrospection techniques, such as ana-
lyzing memory dumps [41] or virtual disk monitoring [45], could be used but
they have a large overhead and do not scale well. Also, if vendors start “peek-
ing” into customers’ VMs (e.g., by analyzing memory dumps), they run the
risk of compromising the conﬁdentiality and privacy of sensitive user data and
computations.
Hence, a tool like MineGuard that proactively detects mining-related abuse
(on free and stolen/compromised instances) and does not directly look at user
data or code, is needed as a part of the provider’s security toolbox.
3 Using Hardware Performance Counters
Past work has shown the eﬀectiveness of hardware-based monitoring for mal-
ware detection [34,35,53–55] using architectural and microarchitectural execu-
tion patterns. The approach is predominantly characterized by an extremely low
performance overhead making it ideal for real-time monitoring on latency sensi-
tive systems. We build upon these past works and present the design of a system
based on Hardware Performance Counters (HPCs) for detecting mining behav-
ior on clouds/enterprises. HPCs, outlined in Table 2 later on, are a set of special
purpose registers internal to the processor that record and represent the runtime
behavior and characteristics of the programs being executed. Common examples
include counts of page faults, executed instructions, cache misses etc. Though
developed to aid application developers in ﬁne-tuning their code, HPCs can also
be used for behavior proﬁling without directly looking at code and data. Other
than the fact that HPCs are extremely fast, their choice as the main detection
metric is based on the following insights.
First, miners need to run the core PoW algorithm of a coin repeatedly, mil-
lions of times. If an algorithm A alters a few speciﬁc HPCs, say counters X, Y
and Z, as part of the main hashing operations, then the values for these three
counters should dwarf counts of all other (relatively under utilized) HPCs given
Mitigating Covert Mining Operations in Clouds and Enterprises
291
that algorithm A has to run millions of times. This implies that a very strong
signature can be constructed based on the relevant counters of a particular algo-
rithm, such as Scrypt [32] or CryptoNight [2]. If an adversary tries to stay under
the radar by mining conservatively, then the hash rates will take a hit and proﬁts
will decline correspondingly making the exercise less lucrative. Also, since the
processor will remain relatively under utilized, power and cooling costs will stay
at manageable levels, making mining less of a nuisance for cloud vendors.
Second, any computation can only ever add to the values of HPCs and has no
way of reducing counter values, as opposed to software-based defenses, which the
attacker can subvert and alter. Hence, if an adversary mines for a coin, they will
have no way of reducing counter values to avoid detection, and will be ﬂagged
with high likelihood. An adversary however, can try and neutralize the signature
by increasing the values of other HPCs not associated with the PoW algorithm.
But to do so successfully, the adversary has to overcome two hard challenges.
First and foremost, they have to ﬁgure out a computation that only aﬀects HPCs
other than the ones related to the mining algorithm. In other words, there can be
no overlap in the counters altered by the miner and the computation in question.
Otherwise, the signature of the miner will only be bolstered further. Second, and
more importantly, they have to run the secondary computation millions of times
so that counter values are approximately equalized. However, the extra load on
the system would greatly diminish the hash rate of the miner, reducing their
proﬁts.
Finally, HPCs are low-level registers and can be directly accessed by the hyper-
visor, requiring no modiﬁcations to the guest OS or applications. Furthermore, an
adversary that manages to compromise a VM, even with root access, will not be
able to falsify the values of the HPCs as the hardware does not allow this.
4 Design and Signature
The design of MineGuard was inﬂuenced by the following observations: First,
unlike generic malware that can exploit users in novel ways, miners have to stick
to the core PoW algorithm on which a cryptocurrency is based. This means that
if a signature is built speciﬁcally for the algorithm, various implementations, even
polymorphic and metamorphic ones, would be detectable. Second, detection has
to be performed in a manner oblivious to the VM so that a malicious party cannot
identify if they are being proﬁled or not, lest they start behaving diﬀerently. In
addition, if a malicious entity does start behaving diﬀerently to cover up its
tracks, it should incur a massive penalty, thereby defeating the whole purpose
of the attack. Third, the detection mechanism has to be more privileged than
the mining entity for obvious reasons. Finally, given the massive scale of clouds,
the mechanism needs to be highly scalable with low performance overhead.
Given these stringent requirements, a hardware-assisted mechanism that can
be executed on the host OS or the hypervisor emerged as the only logical candi-
date. As shown in Fig. 1A, MineGuard comprises of three components: A Proﬁler,
a Detection Agent, and a Mitigation Agent. These three components run on each
server in the cloud on top of the host or the hypervisor.
292
R. Tahir et al.
Virtual Machine 1
Virtual Machine 2
Virtual Machine 3
Proﬁler
Detec(cid:415)on
Agent
MineGuard
Mi(cid:415)ga(cid:415)on
Agent
Host OS / Hypervisor
HPCs
Hardware
(A)
Tenants
MineGuard
Classiﬁer
Cloud 
Orchestrator
(B)
Tenants
MineGuard
Classiﬁer
Fig. 1. (A) Inner components of a MineGuard instance. (B) Overview of MineGuard.
Sequentially: MineGuard checks for current HPC values against the classiﬁer. If a match
occurs, it discovers all other VMs of the tenant and shuts down/suspends these VMs
if they are also found mining.
The Proﬁler instruments each VM in real-time by polling the HPCs with a
2 s interval. The interval length is an adjustable metric, as MineGuard can use
any user-deﬁned sampling frequency to increase the accuracy even further. How-
ever, since mining is a long-term activity usually carried out for several hours
at the very least (as opposed to short-term malware) we can easily aﬀord to
utilize large sampling intervals. This has the beneﬁt of minimizing MineGuard’s
resource usage and does not eﬀect the quality of the signature giving highly
accurate detection rates as shown in Sect. 6. Furthermore, long intervals before
repolling for HPCs, minimizes the overhead experienced by legitimate users as
their VMs are proﬁled less often.
The Detection Agent runs the current HPC values against a classiﬁer trained
to detect mining behavior. If the classiﬁer outputs a positive match, the Detec-
tion Agent ﬂags the VM. Once a VM is ﬂagged, the Mitigation Agent suspends
it temporarily and determines the location of all VMs belonging to that tenant
by contacting the cloud orchestrator as shown in Fig. 1B. All of the tenant’s VM
are then put to further screening by the Detection Agents on their corresponding
servers. If more matches occur in this phase, the Mitigation Agents shut down
those suspicious VMs as well.
Signature Creation: To incorporate the noise introduced by virtualization, we
use a three-phased approach to creating accurate and precise mining signatures
for both CPUs and GPUs. For our purposes, a signature is a time series of
performance counter values of an application over a speciﬁed interval of time.
To generate such time series, in the ﬁrst phase, we run miners for various coins in
a native environment and proﬁle only the mining processes using perf [19] with