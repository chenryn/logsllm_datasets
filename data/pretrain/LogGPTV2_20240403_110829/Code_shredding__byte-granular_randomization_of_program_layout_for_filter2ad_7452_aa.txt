title:Code shredding: byte-granular randomization of program layout for
detecting code-reuse attacks
author:Eitaro Shioji and
Yuhei Kawakoya and
Makoto Iwamura and
Takeo Hariu
Code Shredding: Byte-Granular Randomization of
Program Layout for Detecting Code-Reuse Attacks
Eitaro Shioji, Yuhei Kawakoya, Makoto Iwamura, Takeo Hariu
NTT Secure Platform Laboratories, NTT Corporation
9-11, Midori-Cho 3-Chome, Musashino-Shi, Tokyo 180-8585, Japan
{shioji.eitaro, yuhei.kawakoya, makoto.iwamura, takeo.hariu}@lab.ntt.co.jp
ABSTRACT
Code-reuse attacks by corrupting memory address pointers have
been a major threat of software for many years. There have been
numerous defenses proposed for countering this threat, but major-
ity of them impose strict restrictions on software deployment such
as requiring recompilation with a custom compiler, or causing in-
tegrity problems due to program modi(cid:191)cation. One notable ex-
ception is ASLR(address space layout randomization) which is a
widespread defense free of such burdens, but is also known to be
penetrated by a class of attacks that takes advantage of its coarse
randomization granularity. Focusing on minimizing randomization
granularity while also possessing these advantages of ASLR to the
greatest extent, we propose a novel defensive approach called code
shredding: a defensive scheme based on the idea of embedding the
checksum value of a memory address as a part of itself. This sim-
ple yet eﬀective approach hinders designation of speci(cid:191)c address
used in code-reuse attacks, by giving attackers an illusion of pro-
gram code shredded into pieces at byte granularity and dispersed
randomly over memory space. We show our design and implemen-
tation of a proof-of-concept prototype system for the Windows plat-
form and the results from several experiments conducted to con(cid:191)rm
its feasibility and performance overheads.
1.
INTRODUCTION
Attacks that alter the control (cid:192)ow of a running program by cor-
rupting pointers on memory have been a major threat of binary-
layer software for many years and are still prevalent today. Such
type of attacks is an attractive choice for attackers because they of-
ten give them chance to run arbitrary computation on the target host
upon success. Typically, these attacks are conducted by somehow
modifying the code-pointing address to point to the code the at-
tacker wishes to execute. Traditionally, the code to be executed has
often been prepared by injecting it into writable memory regions
such as stack or heap using vulnerabilities such as buﬀer over-
(cid:192)ows. However, as code injection has become increasingly harder
to perform with the spread of data execution prevention features,
code-reuse attacks which jumps instead to code already existing on
memory has become more popular. Examples of code-reuse attacks
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:191)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:191)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:191)c
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
309
include the classic return-to-libc attacks as well as state-of-the-art
variants of return-oriented programming attacks.
To counter this threat, numerous defenses have been proposed,
and some of which are often categorized as control-(cid:192)ow integrity
checking, sandboxing, software diversi(cid:191)cation, and so on. Appar-
ently, however, most of them have not been very successful at be-
ing widely adopted for general use. This is most likely due to their
strict restrictions which hinder their smooth integration into the de-
velopment and deployment processes of target software. An ex-
ample of such restriction is a requirement for recompilation with a
customized compiler, which requires the proposal to be adopted by
major compilers if it were become a standard. Another major prob-
lem is the integrity issues caused by changing the original instruc-
tions to be executed. This topic is discussed more, for example, in
the literature[13] which describes the diﬃculties faced by software
diversi(cid:191)cation approaches for massive-scale software distribution.
Nevertheless, there is one notable exception among these, namely
ASLR(address space layout randomization). ASLR’s main idea is
to randomize the locations of various important memory objects,
which include the load addresses of program images. As a re-
sult, it makes attackers much more diﬃcult to locate the desired
fragment of code to which they want to change the control (cid:192)ow,
thereby securing against attacks that specify absolute addresses.
ASLR was (cid:191)rst introduced as a third-party Linux patch by the PaX
project[28], and has recently been aggressively adopted by pop-
ular OSes such as Windows[1], Linux and Mac OS, and also by
performance-sensitive mobile platforms such as iOS and Android[2].
One of the most contributing factors for the success of ASLR is
most likely its simple nature, imposing surprisingly weak require-
ments on the target software; basically, it only shifts the location of
a program image on memory thus its contents are kept unchanged
besides some addresses requiring relocation. Also, it is notable
that the sequence of instructions to be executed is not changed at
all, which preserves program semantics perfectly. However, ASLR
is known to be vulnerable against some type of attacks, such as at-
tacks combined with memory address disclosures, or partial over-
write attacks[6]. This is due to the fact that ASLR has a coarse
randomization granularity but this property is so closely related to
its advantageous properties that it is intrinsically diﬃcult to (cid:191)x.
Based on this observation, by focusing on minimizing random-
ization granularity while also possessing these advantages of ASLR
to the greatest extent, we propose a novel defensive approach called
code shredding, a defensive scheme based on a simple idea of em-
bedding the checksum value of a memory address as a part of it-
self. Code shredding provides randomization at byte-granularity,
or in other words the (cid:191)nest randomization granularity possible, and
is also expected to minimize recompilation requirements and incur
no changes to the executed instruction sequence. For avoiding con-
fusion, it is worth emphasizing (cid:191)rst here that code shredding does
not actually shred code. This approach relies on combination of
code replication and destination restriction of control transfer in-
structions, to achieve pseudo-dispersion of code. The fundamental
idea of our approach is based on self-validating addresses, which
encodes addresses by calculating the checksum of an address and
embed the result within the address itself. With an appropriate de-
sign and implementation, a defense using this approach will give an
attacker an illusion that the code to which they wish to transfer the
control (cid:192)ow is shredded into pieces at byte granularity and are ran-
domly dispersed over memory space. Our proposal is not without
any drawbacks of course, and we admit that it may incur consider-
able amount of runtime overhead on time and space. Though we
are still in a status of seeking for ways to alleviate these overheads,
we make a proposal of an additional sub-technique called code mir-
roring.
We have implemented a prototype of this proposal for the Win-
dows platform using the Pin dynamic binary instrumentation frame-
work. Experiments are conducted to evaluate its security eﬀective-
ness and performance. The contributions presented in this paper
are summarized as follows:
• We present code shredding, a novel scheme for detecting
invalid control-(cid:192)ow transfers, based on the following two
ideas:
– self-validating address: allows veri(cid:191)cation of memory
addresses by encoding addresses in such a way that its
checksum value is embedded as a part of itself.
– code mirroring: allows an encoded address to be treated
as a real addresses by actually mapping multiple copies
of the image on memory.
• We present our design and implementation of a proof-of-
concept prototype of code shredding system for the Windows
platform. The results of our brief experimental evaluation
suggests its feasibility concerning security and compatibility,
and also clari(cid:191)es some problems which need to be addressed
in the future.
The rest of this paper is organized as follows: Section 2 describes
the problem, Section 3 and 4 explains in detail the design and im-
plementation of our proposal, Section 5 describes the evaluation
procedure and the result, Section 6 discusses our limitations and
related researches, and (cid:191)nally Section 7 concludes the paper.
2. PROBLEM DESCRIPTION
In this section we describe the type of attack we focus on, inves-
tigate the problems confronted by existing defense approaches, and
state the problems which we aim to solve in this paper.
2.1 Control-Flow Hijacking Attacks
The type of attack which we focus on is what changes the control
(cid:192)ow of a running program by modifying code pointers. We de(cid:191)ne
a code pointer as any data on memory that is meant to contain an
address which points to, or will eventually point to, a location on
memory where executable instruction exists or will exist. Exam-
ples of code pointers include return addresses of function calls or
function pointers. The goal of attackers is to execute their desired
code which is a malicious sequence of instructions that triggers
an attack. This can be achieved by either code injection or code
reuse. Code injection writes to memory the code prepared by the
attacker. However, as defensive measures such as NX-bit or DEP
are becoming more common, code injection is becoming harder to
perform. Code reuse, on the other hand, is not aﬀected by such
defenses because it uses already-existing codes on memory with
execute permission. A famous example of such attack is return-to-
libc attack[4], but recently a more generalized form of such attack
called ROP (Return-Oriented Programming)[5] has become a large
threat and is evolving continuously, with its variants or automation
techniques being constantly presented.
2.2 Existing Defenses: ASLR
Although ASLR makes it much more diﬃcult to write stable ex-
ploits, it is not a perfect measure even when combined with DEP or
other defenses. It is in fact possible to evade ASLR when certain
conditions are met. In this paper we focus on the two types of at-
tacks that defeats ASLR, namely, attacks using address disclosure
and partial overwrite attacks. ASLR-bypass using address disclo-
sure is becoming very common, while partial overwrite attacks are
relatively not so common due to its diﬃculty of application. How-
ever, because it shares the same intrinsic problem with address dis-
closure, and it in fact has been used for exploiting the famous ANI
vulnerability[25], we refer to it as our motivating example. Also,
as the number of systems hardened with ASLR increases, advanced
exploitation techniques like partial overwrite may start to become
more common in the future. Next, we describe these two attacks in
more detail.
2.2.1 Attacks with Address Disclosure
Memory disclosure is a software (cid:192)aw such that the content of
memory is leaked to the attacker. It may occur, for example, when
a format string vulnerability is exploited. Address disclosure is its
special case, where a pointer is disclosed to the attacker which be-
comes a problem when combined with other vulnerability such as
buﬀer over(cid:192)ow that can write to code pointers. Let a represent the
address where instruction A is located on memory, and let x rep-
resent the address of an arbitrary instruction X in the same image.
Under the assumption that the attacker has the same program im-
age as the target program, upon knowing the address a, the attacker
can calculate x = a + d using the relative distance d between A
and X derived from the attacker’s own copy of the program image.
Thereby the attacker is able to determine the address of an arbitrary
instruction in this program image.
2.2.2 Partial Overwrite Attacks
On the other hand, a partial overwrite attack does not even re-
quire disclosure of concrete address values. All it requires is the
knowledge that the overwriting target is an address pointing to a
code in the program image. The idea behind this attack is that a
typical ASLR implementation only randomizes the upper bits of
address (e.g., Windows 7 32-bit randomizes bits 17 - 24) likely due
to memory allocation restriction or performance reasons. There-
fore, even if the upper bits are randomized, by overwriting the
lower bits of an existing address, the attacker is able to specify
an address within the possible range. Figure 1 describes an exam-
ple of such attack. Here the stack holds a return address pointing
to 0xKKR12340 where R denotes the byte randomized by ASLR.
Traditionally, ASLR has been eﬀective in such a way that, if the
attacker does not know the value of R, this byte cannot be over-
written, and therefore the whole address cannot be overwritten.
However, the attacker can still overwrite the lower bytes to spec-
ify addresses of program image in the shown range without modi-
fying R, and make the return address point to an address in range
0xKKR10000 - 0xKKR1FFFF without any knowledge of R. Note
that this is feasible because the byte order of IA-32 is little endian,
i.e., an address is stored on memory lower bytes (cid:191)rst.
310
Figure 1: partial overwrite attack
2.2.3 ASLR Problems
One of the root causes the attacks described above are valid
against ASLR is that the attackers are able to relate an address
to another by referring to the same program image of their own.
One trivial way to prevent them is by making the software publicly
unavailable, since these attacks must assume that the attacker pos-
sesses the program image, but such measure is unrealistic in most
cases. Here we de(cid:191)ne the granularity of randomization as the size
of program content whose location on memory can be uniquely de-
termined from an address disclosed to the attacker. ASLR provides
randomization granularity at the size of program image, because
any leaked address within the code immediately reveals the address
of an arbitrary code on the image. In this sense, having (cid:191)ner gran-
ularity is more preferable because it will limit the attacker’s ability
relate addresses together, and ideally, having byte granularity will
make such attacks impossible.
ASLR also carries several other problems. One of such is not
having enough randomization entropy on systems with 32-bit mem-
ory space, making it vulnerable against brute force attacks[14] in
some cases. Also, many of the ASLR-bypass exploits in the wild
to date leverage the fact that ASLR is often an opt-in defence, and
reuses code on ASLR-disabled modules. Brute-forcing is likely to
be mitigated by the future transition to 64-bit systems, and regard-
ing the opt-in problem, non-ASLR enabled binaries are on the de-
crease as observed in the case where Firefox is no longer accepting
plug-ins not supporting ASLR[26]. It is also worth noting that Mi-
crosoft’s EMET, which is a security add-on package for Windows
including ASLR-forcing feature, has recently been oﬃcially sup-
ported[27], which implies that ASLR is now applicable to certain
software not previously assured to be compatible with it. However,
the problem with address-relation is an intrinsic property of ASLR,
and is unlikely to be mitigated by such improvements in the future,
suggesting the need of exploration for post-ASLR measures.
2.3 Existing Defenses: Other Defenses
Since the problem of control-(cid:192)ow hijacking has been around for
a long time, there are numerous other approaches for defending
against it. For example, there are approaches for randomizing at
(cid:191)ner granularity such as at function granularity[8], but it still suﬀers
from address disclosure attacks. There are also other approaches
that oﬀer randomization at (cid:191)ner level[9, 10, 11, 12] such as at in-
struction level, but they generally require recompilation from the
source code, or changes executed instructions which may cause in-
tegrity problems. Some of these are discussed and compared to our
proposal in Section 6.
2.4 Problem Summary
We conclude this section by describing the threat model and the
properties which we aim to incorporate into our proposal.