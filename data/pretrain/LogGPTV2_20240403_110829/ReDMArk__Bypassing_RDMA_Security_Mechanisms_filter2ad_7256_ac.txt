o
lin.
in
c.
Ô¨Å
x
e
d
startin
g
Q
P
N
.
atta
e
n
c./a
c
k
P
S
N
d
ete
ct.
uth.
k
e
y
m
e
m
g
e
n.
.
ra
n
d.
sin
gle
O
D
P
ra
n
d.
ra
n
d.
P
D
e
n
a
ble
d
Q
P
N
r
k
e
y
m
.
c
o
u
nters
w
in.
e
n
c./a
re
s
o
in-n
et
urc
e
uth.
in
I
B
c
o
n
st.
P
D
s
ultiple
ty
p
e
2
w
ork
Ô¨Ålt.
facilitates attack
does not affect attack
 increases attack complexity
 does not mitigate attack
In these experiments (see Table 4), we measure the injec-
tion throughput of our RoCE spooÔ¨Ång tool, which allows an
estimation of the time required to bruteforce a random PSN
and a PSN that has been generated based on a known initializa-
tion value. The injection tool for RoCEv1 was able generate
1.30 millions packets per second (Mpps), whereas the tool for
RoCEv2 was able to generate 0.74 Mpps for Broadcom and
1.57 Mpps for ConnectX-5. Full enumeration of a random
PSN thus took 13 s for RoCEv1. RoCEv2 enumeration tool
takes 10.60 s for Mellanox and 23 s for Broadcom.
The performance of ReDMArk‚Äôs spooÔ¨Ång and packet in-
jection framework could not achieve line-rate for the tested
devices as: 1) the packet checksums are calculated by the
CPU and not ofÔ¨Çoaded to the NIC. 2) our framework does
not bypass the OS, whereas native RDMA messages do. To
improve the performance of packet injection and thus exhaust-
ing this bruteforce search even faster, a hardware appliance
could be used. Furthermore, speciÔ¨Åc Mellanox NICs support
raw Ethernet programming with a kernel bypass [2].
Table 4: Injection throughput of the RoCE spooÔ¨Ång tool.
Link speed
Model
40 Gbps
Mellanox ConnectX-3
Mellanox ConnectX-5
100 Gbps
Broadcom NetXtreme-E 25 Gbps
25 Gbps
Broadcom Stingray
Protocol
RoCEv1
RoCEv2
RoCEv2
RoCEv2
Throughput
1.31 Mpps
1.57 Mpps
0.74 Mpps
0.74 Mpps
Interestingly, injection of a single correct packet does not
cause a victim‚Äôs connection to break. A mismatch in the PSN
counter by 1 packet between sender and receiver is resolved
by the protocol. The protocol treats the victim‚Äôs packet as a re-
peated packet and always acknowledges it without processing.
The sender receives the acknowledgment about successful
transmission, even though the packet has not been processed
by the remote RNIC. As a result, the attacker is able to replace
the victim‚Äôs packet with a forged one.
Injection of multiple valid packets causes a connection
loss on the victim side. The QP of the victim who has been
impersonated by the adversary experiences a "Transport Retry
Counter Exceeded" error and transitions its connection to an
error state, when it tries to send packets. However, the other
endpoint of the QP only transitions into error state if it tries
to reply to the disconnected victim QP side. Otherwise, the
connection remains open. Moreover, since packet injection
increases the PSN counter on the receiver, the victim‚Äôs packets
will get discarded due to a PSN mismatch. This effectively
prevents the victim from closing the connection and allows
the attacker to inject messages over an extended period.
Furthermore, our experiments showed that if the attacker
injects exactly 224 packets (i.e., the size of the PSN counter),
then the injection remains completely unnoticed by the vic-
tim and it can continue communication due to matching PSN
counters. Our injection tool requires approximately 13 s to
inject 224 packets. Therefore, if the victim does not use its
connection for this amount of time, the attacker can success-
fully inject 224 packets without disrupting the connection of
the victim.
Practicality. Packet injection based on impersonation can
be performed under the assumption of the T2 model, i.e.,
the attacker requires root access to any machine in the same
network as the victim. Similarly, an on-path attacker T3
(e.g., bump-in-the-wire) also has packet injection capabilities.
Since root access to machines in public cloud environments
is a well protected resource (and would require a sandbox
escape [27]), this attack is more realistic in the setting of
small cloud providers or private RDMA cluster as used by
companies and research groups.
Mitigation. To effectively mitigate attacks based on imper-
sonation, source authentication could be deployed. However,
since this is on-going research and not yet available for IB-
based RDMA deployments, we suggest the following miti-
gations to increase the complexity of packet injection by an
USENIX Association
30th USENIX Security Symposium    4283
off-path attacker: each QP connection should be initialized
with a random starting PSN instead of using a per-device
starting PSN. As this only marginally increases the attack
complexity also QPN should be randomly assigned to QPs.
We suggest a mechanism for randomizing QPNs for existing
RDMA deployments and that can be deployed for all vendors
of RNICs in ¬ß7.1. As modern RNICs provide hardware coun-
ters that are accessible by the application (see ¬ß7.2), these
counters should be used to detect bruteforcing attempts. Fur-
thermore, operators of RDMA networks could also perform
ingress Ô¨Åltering for all end hosts (see ¬ß7.4).
5.2 A2: DoS Attack by Transiting QPs to an
Error State
In IB-based architectures, connections based on the RC QPs
are sensitive to content of the header of requests. Protocol
errors, such as inconsistencies in the sequence number or QP
number, are recoverable errors and resolved by the protocol.
However, memory errors, such as incorrect operation numbers
or an inconsistency between payload length and DMA length
immediately leads to unrecoverable errors, which will cause
the RNIC to transit the QP to the error state and the QP to
disconnect [3]. We refer to this attack as A2 .
An on-path attacker T3 can trivially modify the operation
numbers or payload lengths to drop connections. However,
even an off-path adversary can inject incorrect packets to-
wards a victim QP endpoint and effectively disrupt communi-
cation of other entities (see ¬ß5.1).
Experiments. To conduct an attack that transits a QP to an
error state, we use the packet injection tool with the goal to
inject invalid packets into the victim‚Äôs QP connection such
that it triggers an unrecoverable error, which results in the QP
being forced to disconnect. These experiments showed that
a single fabricated packet injected into the connection was
sufÔ¨Åcient to effectively break the victim‚Äôs connection.
Given these insights, an attacker could try to repeatedly
drop the connection of a speciÔ¨Åc client or drop all connec-
tions of clients that are trying to connect to a service. The fact
that QPNs are generated sequentially V6 highly facilitates
the realization of such attacks. In addition, if an application
uses non-random starting PSNs V7 , the attacker needs to
guess only small number of PSNs to break a connection. For
example, our injection tool for RoCEv2 can drop one con-
nection every 10.60 s by fully enumerating all possible 224
PSNs for a single QP. Then it transits to the next QPN and
thus sequentially breaks all QP connections.
Practicality. As this attack relies on packet injection, it
assumes the same threat models as A1 .
Mitigation. As this attack relies on packet injection to
successfully break a victim‚Äôs connection, similar mitigation
techniques should be applied to thwart such DoS attacks. In
addition, our QPN randomization technique can signiÔ¨Åcantly
reduce performance of the attack, as the attacker will be un-
aware of the QPN of other clients, making enumeration in-
feasible. If QPNs are randomly generated, the attacker needs
to probe approximately 224
o QPNs, where o is the number of
open connections on the victim‚Äôs machine. For example, if
the victim has 1024 open QPs, the attack tool can only break
one connection per 48 h on average.
5.3 A3: Unauthorized Memory Access
Unauthorized memory access effectively breaks secrecy of
applications running on a victim host, but might also inÔ¨Çuence
their behavior. Even worse, since RDMA operations can be
performed purely one-sided V7 , the victim is unable to detect
such attacks. Attacks based on unauthorized memory access
are referred to as A3 .
As illustrated in Figure 4, an attacker establishes an RDMA
connection with a service and tries to access memory of other
clients connected to this service. RDMA applications typi-
cally share a PD for all RDMA resources V9 and allocate
private RDMA-accessible buffers for each new user. These
buffers are allocated in close proximity to each other, e.g.,
as chunks of a larger continuous memory region, allowing
an attacker to predict the virtual memory address of buffers
belonging to other clients V4 . In the example, the attacker
tries to access the memory region adjacent to its own memory
region. To gain access, the attacker is also required to guess
the corresponding memory protection key rkey for a mem-
ory region. Given that rkeys are highly predictable V1 , the
attacker can guess the keys of adjacent memory regions based
on its rkey that he obtained after registering a memory region.
The attacker can also exploit other vulnerabilities of rkey
generator such as static initialization of memory key gener-
ator V2 and shared key generator V3 . V2 can be used to
guess rkey after a reboot of the machine. V3 can be employed
by an attacker sitting on the same physical machine. Finally,
ODP allows accessing any virtual address by having a single
rkey V10 . If the attacker can successfully guess the rkey of
ODP registration, it can access the whole memory space of
the process.
Figure 4: Unauthorized memory access on the same host.
Due to the missing integrity protection V8 , an on-path
attacker T3 would even be able to alter remote memory by
spooÔ¨Ång valid RDMA write packets. Similarly, an off-path
attacker T2 can perform this attack via impersonation by
tricking the victim host into processing fabricated packets.
4284    30th USENIX Security Symposium
USENIX Association
Client A0x7FF12340x200RDMA Readowner = A0x7FF1234r_key  = 0x100owner = M0x7FF2345r_key  = 0x2000x7FF3456MExperiments. Using our attack framework, an attacker con-
nects to an RDMA-enabled system to obtain a memory access
key and memory address. Then, it tries to gain unauthorized
access by trying combinations of rkeys and memory locations.
The attacker polls for RDMA completion events to receive
acknowledgment on the success of the unauthorized access.
If the guess is incorrect, the attack framework reconnects and
retries the attack.
Successful unauthorized access without snifÔ¨Ång requires
knowing the code of the system under attack to see the pat-
terns in memory allocation and registration. This is required to
reduce the search space of potential virtual addresses. We fur-
ther analyzed open-source RDMA applications to see whether
they are vulnerable to these type of attacks (see ¬ß6). Unfortu-
nately, almost all of the tested application were vulnerable to
unauthorized memory access (see Table 5).
Practicality. Unauthorized memory access is possible un-
der the assumption of the T1 model, as it can be performed
by any client located on an RDMA-enabled service without
requiring any special capabilities, and even in a trusted net-
work. If an RDMA-based system (e.g., see Table 5) would be
deployed in a public cloud environment with RDMA support,
any client could perform unauthorized memory access.
Mitigation. To mitigate unauthorized memory access, each
new RDMA client could be assigned to a different PD. How-
ever, this would increase the resource usage per client on
RNICs. Additionally, more modern RDMA devices can em-
ploy memory windows type 2 to pin a memory region to a
speciÔ¨Åc QP, which prevents other clients from accessing it.
Memory windows type 2 further allow applications to choose
the 8 least signiÔ¨Åcant bits of the rkey randomly.
Another measure to prevent unauthorized memory access
would be the randomization of memory addresses chosen for
buffers (similar to ASLR [40] / PIC [29] for regular applica-
tions).
Finally, RDMA applications should randomize rkey gener-
ation, especially, if the RDMA devices with low entropy are
used. We propose a mechanism, working on all RDMA de-
vices, that randomizes the rkey generation process (see ¬ß7.1).
5.4 A4: DoS Attack based on Queue Pair Allo-
cation Resource Exhaustion
Another exhaustion attack focuses on the number of QPs a
device can handle. Theoretically, up to 224 connections could
be opened on a device V5 . In reality, the tested devices were
able to handle much lower numbers. Thus, an attacker could
try to open as many QP connections as possible and keep
them open with minimal effort. Thus, if the attacker is able
to saturate the limit for QP allocations of the victim service,
he could effectively deny other benign clients from opening a
QP connection, which is further referenced as A4 .
Experiments. According to our Ô¨Åndings, tested devices
had different limit on the number of active QP connections
per application: the results varied from 32,707 for Broadcom
to 261,359 for Mellanox. Thus, the attacker needs to keep
alive a much smaller number of active connections than 224.
The variation in the numbers comes from default settings of
the drivers and the OS. Drivers put a limit on the number of
open QP connections per application.
In addition, if an application uses the RDMA connection
manager to establish connections, each RDMA connection
gets a Ô¨Åle descriptor assigned for receiving link events. The
underlying operating system usually enforces strict limits on
the number of concurrently open Ô¨Åle descriptors. Thus, by
opening QP connections the attacker can exhaust the number
of available Ô¨Åle descriptors (instead of QPs), which might
be much smaller. Experiments in our testbeds showed a Ô¨Åle
descriptor limit of 4096, whereas for instances deployed on
Microsoft Azure we were able to open 65,535 Ô¨Åle descriptors.
Practicality. Resource exhaustion of QP allocations is pos-
sible under the assumption of the T1 model and does not
require any special capabilities.
Mitigation. RDMA-capable devices should limit the num-
ber of open QP connections from the same remote endpoint.
This could be realized based on the IB endpoint identiÔ¨Åers or
the IP addresses for RoCE.
5.5 A5: Performance Degradation using Re-
source Exhaustion
Since RDMA allows an attacker to target ofÔ¨Çoading resources
to an RNIC V7 , an attacker might try to exhaust these re-
sources by issuing a large number of RDMA reads or writes.
For example, an attacker might target computational resources
of the RNIC‚Äôs packet processing units. This will cause an in-
creased latency for other entities accessing the same end host,