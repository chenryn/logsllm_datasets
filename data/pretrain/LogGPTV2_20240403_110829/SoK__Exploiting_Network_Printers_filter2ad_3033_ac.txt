### Table 2: Applicability and Examples of Factory Restore Attacks Regarding the Defined Attacker Models

### 5.3. Print Job Manipulation
The objective of this attack is to infect a printer with malware, causing it to manipulate subsequent print jobs. If an attacker can alter print jobs, they can fundamentally change the resulting printout. The impact varies based on the context of the print job and can range from simple pranks to serious business disruption.

**Content Overlay:**
One method to manipulate the appearance of printouts is by using overlays. PCL (Printer Command Language) has a documented function for placing overlay macros on top of a document. However, this feature is limited to the current print job and cannot be made permanent. PostScript, by default, does not offer such functionality, but it can be programmed to do so by redefining PostScript operators, a well-known technique in the printing industry. For example, this method is used to add watermarks to printed documents. When a PostScript document calls an operator, the first version found on the dictionary stack is used. Operators usually reside in the `systemdict` dictionary, but by placing a new version into the `userdict` dictionary, operators can be effectively overwritten. Using the `exitserver` operator, such changes can be made permanent until the printer is restarted.

**Figure 5: The PostScript Dictionary Stack**

Once redefined, when further legitimate documents are printed and call this operator, the attacker’s version will be executed, which can contain arbitrary graphics to overlay. This attack works even if the document has been digitally signed and verified by a print server, as the document itself remains untouched and the manipulation occurs immediately before printing.

**Content Replacement:**
This attack not only adds custom content but also parses and replaces existing content in the document. Replacing text is particularly attractive, as it introduces new possibilities for targeted manipulation or random transposition of digits and introduction of misspellings.

### 5.4. Information Disclosure
In this section, we introduce information leakage attacks that attempt to access the printer's memory and file system, obtain printed documents, and credentials. Additionally, we present a novel attack called CORS spoofing, which extends current cross-site printing techniques.

**AMweb: CORS Spoofing**
Cross-site printing techniques enable a web attacker to access a printer by loading a hidden iframe in a victim’s browser and sending HTTP POST requests to port 9100 of the printer. This allows the attacker to access the printer even if it is only accessible within the internal network. The POST data contains a print job defining PostScript or PJL commands executed by the printer. Traditional cross-site printing techniques have a major drawback: data can only be sent to the printer, but the result cannot be accessed due to the same-origin policy in the browser.

We discovered a novel approach to bypass this limitation using XMLHttpRequest (XHR) JavaScript objects, as defined in [58]. To circumvent the restrictions of the same-origin policy, Cross-Origin Resource Sharing (CORS) [59] can be applied by explicitly allowing the attacker’s website to access the returned content. By emulating an HTTP server running on port 9100 and defining custom HTTP headers, including arbitrary CORS fields like `Access-Control-Allow-Origin: https://evil.com`, the web attacker can gain full access to the HTTP response, enabling them to extract arbitrary information such as captured print jobs from the printer device. A proof-of-concept JavaScript snippet is shown in Listing 5.

**Listing 5: Novel Cross-Site Printing / CORS Spoofing**

```javascript
job = " \x1B%−12345X\r\n"
+ "%!\r\n"
+ " (HTTP/1.0 200 OK \n) print \r\n"
+ " (Server: Fake HTTPD \n) print \r\n"
+ " (Access-Control-Allow-Origin: * \n) print \r\n"
+ " (Connection: close \n) print \r\n"
+ " (Content-Length: \n) print \r\n"
+ " product dup length dup string \r\n"
+ " cvs print \r\n"
+ " print \r\n"
+ " (\n) print \r\n"
+ " \x1B%−12345X\r\n";
var x = new XMLHttpRequest();
x.open("POST", "http://laserjet.lan:9100");
x.send(job);
x.onreadystatechange = function() {
    if (x.readyState == 4)
        alert(x.responseText);
};
```

A proof-of-concept implementation demonstrating advanced cross-site printing attacks is available at http://hacking-printers.net/xsp/.

**Memory Access:**
If an attacker gains access to the printer’s memory, they may be able to obtain sensitive data such as passwords or printed documents. Write access to the memory can even lead to code execution. Costin et al. discovered a way to dump the memory of certain Xerox printers [18] using PostScript. For PJL, a vendor-specific command documented in the Brother laser printer product specifications [41] and discussed by [16] allows writing data to or retrieving data from the specified address of the printer’s NVRAM.

**Filesystem Access:**
If an attacker has read access to the filesystem, they can potentially retrieve sensitive information such as configuration files or stored print jobs. Manipulation of files through write access may even lead to remote code execution, for example, by editing rc scripts or replacing binary files. Legitimate language constructs for PostScript and PJL enable this feature [8], [46]. For PJL, this issue was first demonstrated by Phenoelit [26], who wrote the PFT and Hijetter [27] programs to perform file operations on HP LaserJets using legitimate PJL commands. A virtual, distributed filesystem based on PJL has been proposed and implemented by Smith [53].

**Print Job Capture:**
Even if the attacker has access to the printer’s filesystem, they cannot retrieve print jobs unless they have been explicitly stored. This is because print jobs are usually processed in memory and do not touch the hard disk. Few printers, like the HP DesignJet Z6100ps, keep copies of printed documents accessible over the web server. This issue has been discussed by Crenshaw [20]. For various devices, legitimate job retention can be enabled through the printing dialog. A special PJL command is then added to the current print job, directing the printer to store the job in memory. Accessing print jobs is also possible with other techniques, not originally intended for this purpose. For example, with PostScript, the attacker can break out of the current print job and even access future jobs, potentially capturing all documents if PostScript is used as a printer driver.

**Credential Disclosure:**
Printers are often deployed with a default password or no initial password. In both cases, administrators should actively set a password to secure the device. The Praeda [36] tool can systematically collect credentials and other useful information from the web server. Passback attacks, which force an MFP device to authenticate against a rogue system rather than the expected server [37], are another class of attacks. Besides information leaked from the embedded web server, printing languages offer limited password protection mechanisms. Breaking such mechanisms via print jobs is within the scope of this work. PJL offers the possibility to set a password to lock access to the printer’s hard disk and/or control panel, but the key space is limited to numerical values ranging from 1 to 65,535 [46]. Brute-force attacks, as proposed by Phenoelit [26], seem feasible. PostScript offers two types of passwords: one to change long-term system settings and the other to permanently alter the PostScript environment. The standard makes no explicit statement about key sizes, but both passwords are of type string, allowing up to 65,535 characters [8]. For simple passwords, brute-force is very fast, as passwords can be verified within a PostScript program running on the printer device itself.

### Table 4: Applicability and Examples of Information Disclosure Attacks Regarding the Defined Attacker Models

### 5.5. Summary
In this section, we summarized known attacks from the literature and security advisories and presented a new cross-site-printing technique exploiting CORS technology [59]. We showed how a new web security technology can influence and improve old attack techniques, even with seemingly irrelevant devices like printers. We categorized the presented attacks to prepare the basis for the design of our new tool PRET and for subsequent security analyses. Each category contains an attack executable in every attacker model, increasing the impact of our evaluation.

### 6. PRinter Exploitation Toolkit (PRET)
To automate the introduced attacks, we developed a prototype software called PRET. PRET is open-source and available on GitHub. Python was chosen as the programming language because it enables rapid software development and easy access to TCP/IP sockets, which is required to communicate with targeted network printers. The main idea of PRET is to facilitate communication between the end-user and the printer. By entering a UNIX-like command, PRET translates it to PostScript or PJL, sends it to the printer, and evaluates the result. PRET contains three main components depicted in Figure 6: Attacker, Translator, and Connector.

**Attacker:**
The Attacker module is the central component of PRET. It manages end-user input, navigates the translation module to generate the proper PostScript or PJL commands, navigates the Connector, and processes the results in a user-friendly manner.

The Attacker module receives a command (CMD) as input, initiating operations like listing files on a printer. To improve usability, we defined UNIX-like commands such as `ls`, `cat`, and `pwd`, which are entered by the security auditor. The main challenge is to create a generic approach that translates desired features or known attack vectors into PJL/PostScript equivalents. For instance, there is no single PostScript command to list files with their metadata like timestamps and sizes. However, by sending multiple PostScript commands, we can reveal file names and metadata step-by-step. The Attacker uses the Translator to sequentially create different commands, and the Connector processes and displays the response to each request in a user-friendly way.

**Table 5: Supported Commands for File Operations and Their Availability in Both Languages**

| Command | PS | PJL | Description |
|---------|----|-----|-------------|
| `ls` | ✓ | ✓ | List contents of remote directory. |
| `get` | ✓ | ✓ | Receive file. |
| `put` | ✓ | ✓ | Send file. |
| `append` | ✓ | ✓ | Append to file. |
| `delete` | ✓ | ✓ | Delete remote file. |
| `rename` | ✓ | ✓ | Rename remote file. |
| `find` | ✓ | ✓ | Recursively list directory contents. |

This table summarizes the supported commands for file operations and their availability in both PostScript and PJL.