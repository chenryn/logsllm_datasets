TABLE 2: Applicability and examples of factory restore
attacks regarding the deﬁned attacker models.
5.3. Print job manipulation
The goal of this attack is to infect a printer device with
malware, thereby forcing it to manipulate further documents
while printing. If an attacker can alter print jobs, she can
fundamentally change the resulting printout. The impact
depends on the context of the print job and can range from
simple pranks to serious business impairment.
Content overlay. One simple way to manipulate the appear-
ance of printouts is to use overlays. PCL has a documented
function to put overlay macros on top of a document. Unfor-
tunately, this feature is limited to the current print job and
cannot be made permanent. PostScript does not offer such
functionality by default; however, it can be programmed into
by redeﬁning PostScript operators which is a well-known
technique in the printing industry. For example, it is used
to add watermarks to printed documents. When a PostScript
document calls an operator, the ﬁrst version found on the
dictionary stack is used. Operators usually reside in the
systemdict dictionary, but by placing a new version into the
userdict dictionary, operators can practically be overwritten
because the user-deﬁned version is the ﬁrst found on the
dictionary stack, as shown in Figure 5. Using the exitserver
operator, such changes can be made permanent – at least
until the printer is restarted.
Figure 5: The PostScript dictionary stack.
Once redeﬁned, when further legitimate documents are
printed and call this operator, the attacker’s version will be
executed – which can contain arbitrary graphics to overlay.
This attack works even if the document has been digitally
signed and veriﬁed by a print server, because the document
itself remains untouched and the manipulation step happens
immediately before printing.
Content replacement. This attack does not only add custom
content, but parses and replaces existing content
in the
document. Especially replacing text seems to be an attractive
function, introducing new possibilities to the attacker as
she can go for targeted manipulation or randomly transpose
digits and introduce misspellings.
5.4. Information disclosure
In the following we introduce information leakage at-
tacks. These attacks attempt to access the printer memory
and ﬁle system, or obtain printed documents and credentials.
Additionally, we present our novel attack CORS spooﬁng
extending current cross-site printing techniques.
218
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
AM
App.
AMnet
AMphy
Description
The attacker can connect via USB cable and send
PostScript code to put an overlay on further jobs.
The attacker can use port 9100 to make the printer
introduce misspellings into a competitor’s printouts.
The attacker can use cross-site printing to replace
the purchase price in a printed contract document.
TABLE 3: Applicability and examples of print job manipu-
lation attacks regarding the deﬁned attacker models.
AMweb
CORS spooﬁng. Cross-site printing techniques empower a
web attacker to access a printer by loading a hidden Iframe
in a victim’s browser and sending HTTP POST requests
to port 9100 of a printer. Thus, the attacker can access
the printer even if it is only accessible within the inter-
nal network. The POST data contains a print job deﬁning
PostScript or PJL commands executed by the printer. Typical
cross-site printing techniques, as shown in Figure 4, have a
major drawback; data can only be sent to the printer but the
result cannot be accessed because of the same-origin policy
within the browser.
We discovered a novel approach to avoid this limita-
tion using XMLHttpRequest (XHR) JavaScript objects, as
deﬁned in [58]. To bypass the restrictions of the same-
origin policy, Cross-Origin Resource Sharing (CORS) [59]
can be applied by explicitly allowing the attacker’s website
to access the returned content.
the attacker
Being able to send PostScript commands
to the
to
printer via cross-site printing allows
have full control of what
the requested ‘web server’ –
a printer RIP accessed over port 9100 – sends back
to the browser. Thus,
the attacker can simply emu-
late an HTTP server running on port 9100 and deﬁne
her own HTTP header to be responded, including arbi-
trary CORS ﬁelds like Access-Control-Allow-Origin:
https://evil.com. Therefore, the web attacker control-
ling https://evil.com has full access to the HTTP re-
sponse, allowing her to extract arbitrary information like
captured print jobs from the printer device. A proof–of–
concept JavaScript snippet is shown in Listing 5.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
j o b = " \ x1B%−12345X\ r \ n "
+ "%!\ r \ n "
+ " ( HTTP / 1 . 0 200 OK \ \ n ) p r i n t \ r \ n "
+ " ( S e r v e r : Fake HTTPD \ \ n ) p r i n t \ r \ n "
+ " ( Access−C o n t r o l−Allow−O r i g i n : ∗ \ \ n ) p r i n t \ r \ n "
+ " ( C o n n e c t i o n :
+ " ( Content−Length :
+ " p r o d u c t dup l e n g t h dup s t r i n g \ r \ n "
+ " cvs p r i n t
+ " p r i n t \ r \ n "
+ " ( \ \ n ) p r i n t
+ " \ x1B%−12345X\ r \ n " ;
c l o s e \ \ n ) p r i n t \ r \ n "
( \ \ n \ \ n ) p r i n t \ r \ n "
) p r i n t \ r \ n "
f l u s h \ r \ n "
" h t t p : / / l a s e r j e t . l a n : 9 1 0 0 " ) ;
v a r x = new XMLHttpRequest ( ) ;
x . open ( " POST " ,
x . send ( j o b ) ;
x . o n r e a d y s t a t e c h a n g e = f u n c t i o n ( ) {
i f
( x . r e a d y S t a t e == 4 )
a l e r t ( x . r e s p o n s e T e x t ) ;
} ;
Listing 5: Novel cross-site printing / CORS spooﬁng.
219
A proof-of-concept implementation demonstrating that
advanced cross-site printing attacks are practical, and a real–
world threat to companies and institutions, is available at
http://hacking-printers.net/xsp/.
Memory access. If an attacker gains access to the printer’s
memory, she may be able to obtain sensitive data like pass-
words or printed documents. Write access to the memory
can even lead to code execution. Costin et al. discovered
a way to dump the memory of certain Xerox printers [18]
using PostScript. For PJL a vendor-speciﬁc command doc-
umented in the Brother laser printer product speciﬁcations
[41] and discussed by [16] allows to ‘write data to or retrieve
data from the speciﬁed address of the printer’s NVRAM’.
Filesystem access. If an attacker has read access to the ﬁle
system, she can potentially retrieve sensitive information
like conﬁguration ﬁles or stored print jobs. Manipulation
of ﬁles through write access may even lead to remote code
execution, for example, by editing rc scripts or replacing bi-
nary ﬁles to be executed and therefore, printers should never
allow direct access to the ﬁle system. However, legitimate
language constructs are deﬁned for PostScript and PJL and
enable exactly this feature [8], [46]. For PJL, this issue has
ﬁrst been demonstrated by Phenoelit [26], who wrote the
PFT and Hijetter [27] programs to perform ﬁle operations
on HP LaserJets using legitimate PJL commands and heavily
inspired our work. A virtual, distributed ﬁle system based
on PJL has been proposed and implemented by Smith [53].
The potential danger of PostScript ﬁle I/O primitives has
been pointed out by Sibert [52].
Print job capture. Even if the attacker has access to a
printer’s ﬁle system, she cannot retrieve print jobs unless
they have explicitly been stored. This is because print jobs
are usually processed on-the-ﬂy in memory only and never
touch the hard disk. Only few printers like HP DesignJet
Z6100ps keep copies of printed documents to be accessed
over the web server. This issue has been discussed by
Crenshaw [20]. For various devices, legitimate job retention
can be enabled through the printing dialog. A special PJL
command is then added to the current print job, which
directs the printer to store the job in memory. Hereby,
documents can be reprinted via the control panel. Accessing
print jobs, however, is also possible with other techniques,
not originally intended for this purpose. For example, with
PostScript the attacker can break out of the current print
job and even access future jobs. Such functionality has the
potential to capture all documents if PostScript is used as a
printer driver.
Credential disclosure. Printers are commonly deployed
with a default password or no initial password at all. In both
cases administrators should actively set a password to secure
the device. One approach to systematically collect creden-
tials and other useful information from the web server is the
Praeda [36] tool. One remarkable class of attacks is pass-
back attacks, which enforce an MFP device to authenticate
against a rogue system rather than the expected server [37].
Besides information leaked from the embedded web server,
printing languages offer limited passwords protection mech-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:18 UTC from IEEE Xplore.  Restrictions apply. 
anisms themselves. Breaking such mechanisms via print jobs
is in the scope of this work. PJL offers the possibility to set
a password to lock access to the printer’s hard disk and/or
control panel. The standard, however, allows only numerical
values ranging from 1 to 65,535 as key space [46]. Brute-
force attacks as proposed by Phenoelit [26], therefore, seem
feasible. PostScript offers two types of passwords; one to
change long-term system settings, the other to permanently
alter the PostScript environment. The standard makes no
explicit statement about key sizes; however, both passwords
are of type string allowing up to 65,535 characters [8]. On
the contrary, for simple passwords, brute-force is very fast,
as passwords can be veriﬁed within a PostScript program
running on the printer device itself. Performance can, there-
fore, be compared to ofﬂine cracking.
AM
AMphy
AMnet
App.
Description
The attacker can use USB to infect the device with
PostScript malware which stores further printouts.
The attacker can access the printer’s ﬁle system or
memory and gain other information via port 9100.
The attacker can apply CORS spooﬁng to retrieve
captured print jobs over the victim’s web browser.
TABLE 4: Applicability and examples of information dis-
closure attacks regarding the deﬁned attacker models.
AMweb
5.5. Summary
In this section we summarized known attacks from
the literature and security advisories, and presented a new
cross-site-printing technique exploiting the CORS technol-
ogy [59]. Thereby, we showed how a new web security
technology can inﬂuence and improve old attack techniques,
even with seemingly irrelevant devices like printers.
We categorized the presented attacks to prepare the basis
for the design of our new tool PRET, and for subsequent
security analyses. We showed that each category contains
an attack executable in every attacker model, which even
increases the impact of our evaluation.
6. PRinter Exploitation Toolkit (PRET)
To automate the introduced attacks, we wrote a prototype
software entitled PRET. PRET is open source and available
on GitHub.2 Python was chosen as a programming language
because it enables rapid software development and easy
access to TCP/IP sockets, which is required to communicate
with targeted network printers. The main idea of PRET is to
facilitate the communication between the end-user and the
printer. By entering a UNIX-like command, PRET translates
it to PostScript or PJL, sends it to the printer, and evaluates
the result. PRET contains three main components depicted
in Figure 6 – Attacker, Translator, and Connector.
Attacker. The Attacker module is the central component
of PRET. It manages the end-user input, navigates the
2. https://github.com/RUB-NDS/PRET
220
translation module to generate the proper PostScript or
PJL commands, navigates the Connector, and processes the
results in a user-friendly manner.
The Attacker module receives as an input a command
CMD, initiating some operations like listing ﬁles on a printer.
To improve the usability of PRET, we deﬁned UNIX-like
commands such as ls, cat and pwd, which are entered by
the security auditor. The main challenge here is to create
a generic approach depicting the wanted features (like ls)
or known attack vectors to the PJL/PostScript equivalence.
For instance, there is no single PostScript command to list
ﬁles including their metadata like timestamps and sizes.
However, by sending multiple PostScript commands we can
reveal ﬁle names and metadata for all ﬁles contained in a
folder step-by-step. In this manner, the Attacker uses the
Translator to sequentially create different commands. The
Connector is used to process and display the response to
each request in a user-friendly way.
In Table 5 we summarize the supported commands for
ﬁle operations and their availability in both languages. PRET
Command
ls
get
put
append
delete
rename
find
mirror
cat
edit
touch
mkdir
cd
pwd
chvol
traversal
format
fuzz
df
free
PS
PJL
Description
List contents of remote directory.
Receive ﬁle: get 
Send ﬁle: put 
Append to ﬁle: append  
Delete remote ﬁle: delete 
Rename remote ﬁle: rename  
Recursively list directory contents.