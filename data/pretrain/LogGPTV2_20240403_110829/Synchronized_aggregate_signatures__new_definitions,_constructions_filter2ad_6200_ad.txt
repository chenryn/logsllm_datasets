### Optimized Text

#### Initial Guesses
The simulator begins by making three initial guesses:
1. It guesses the time period \( s^* \) within the range \( 1 \) to \( 2^{\lceil \lg(q) \rceil} \), which the adversary will use to forge.
2. It guesses an \( \ell \)-bit message chunk \( M' \).
3. It guesses a special message chunk \( \beta^* \) in the range \( [1, k] \).

These individual guesses collectively represent a single guess that the \( \beta^* \)-th chunk of the forgery message will differ from the value \( M' \), which is the \( \beta^* \)-th chunk of the message the adversary asks to sign at time period \( s^* \).

#### Parameter and Key Setup
Next, the simulator chooses random values \( x_0, \ldots, x_k \in \mathbb{Z}_p \) and sets:
- \( u_0 = g^{-bM'} g^{x_0} \)
- \( u_{\beta^*} = g^b \)
- \( u_i = g^{x_i} \) for all other \( i \) from \( 1 \) to \( k \)

It also chooses random values \( x_w, x_z, x_h \in \mathbb{Z}_p \) and sets:
- \( w = g^{x_w} \)
- \( z = g^b g^{x_z} \)
- \( h = g^{-bs^*} g^{x_h} \)

The public parameters are then output as \( (g, u_0, \ldots, u_k, w, z, h) \). For the challenge keys, the simulator sets:
- The public key \( pk_1 = g^a \)
- The secret key \( sk_1 = a \) (implicitly)
- The internal time record \( s_{\text{prev}} = 1 \)

For all other keys \( i = 2 \) to \( N \):
- It chooses a random \( a_i \in \mathbb{Z}_p \)
- Sets \( pk_i = g^{a_i} \)
- Sets \( sk_i = a_i \)

The key information is output as \( (pk_1, (pk_2, sk_2), \ldots, (pk_N, sk_N)) \).

#### Query Handling
When the adversary requests a signature on a message \( M = M_1 M_2 \ldots M_k \in \{0, 1\}^{\ell} \), the simulator first checks the current time \( s = \text{clock()} \). If \( s \leq s_{\text{prev}} \) or \( s \geq 2^\lambda \), it outputs \( \bot \). Otherwise, it updates the time period recorder \( s_{\text{prev}} := s \).

There are two possible ways the simulator can proceed:
- If \( s = s^* \), it checks that \( M_{\beta^*} = M' \). If this is not true, the simulator's guess was incorrect, and it must abort. Otherwise, let \( I := \{1, \ldots, k\} - \{\beta^*\} \). It chooses a random \( t \in \mathbb{Z}_p \) and sets:
  \[
  \sigma_1 = (g^a)^{x_0 + \sum_{i \in I} x_i M_i} \cdot (w^{\lceil \lg(s) \rceil} z s h)^t
  \]
  \[
  \sigma_2 = g^t
  \]
  To verify correctness, observe that we can rewrite \( \sigma_1 \) as:
  \[
  \sigma_1 = (g^{ab})^{(M_{\beta^*} - M')} \cdot (g^{x_0} \prod_{i \in I} u_i^{M_i})^a \cdot (w^{\lceil \lg(s) \rceil} g^{x_z} s g^{x_h})^t
  \]
  \[
  = (u_0 \prod_{i=1}^k u_i^{M_i})^a \cdot (w^{\lceil \lg(s) \rceil} z s h)^t
  \]

- If \( s \neq s^* \), it chooses a random \( t' \in \mathbb{Z}_p \) and computes:
  \[
  V = g^{t' - a(M_{\beta^*} - M') / (s - s^*)}
  \]
  Let \( I := \{1, \ldots, k\} - \{\beta^*\} \). It outputs:
  \[
  \sigma_2 = V
  \]
  \[
  \sigma_1 = (g^a)^{x_0 + \sum_{i \in I} x_i M_i} \cdot \sigma_2^{x_w \lceil \lg(s) \rceil + x_z s + x_h} \cdot (g^b)^{t' (s - s^*)}
  \]

#### Output
Eventually, the type II adversary outputs a valid aggregate signature \( \tilde{\sigma} = (\tilde{\gamma}_1, \tilde{\gamma}_2, \tilde{s}) \) on a message sequence \( (M_1, \ldots, M_N) \in \{0, 1\}^{\ell \times N} \) under public keys \( (pk_1, \ldots, pk_N) \) such that \( 0 < \tilde{s} \leq 2^{\lceil \lg(q) \rceil} \leq 2q \). Each \( M_i \) is parsed into chunks \( M_{i,1} \ldots M_{i,k} \), where each chunk is \( \ell \) bits.

From the verification equation, we see that:
\[
e(\tilde{\gamma}_1, g) = \prod_{i=1}^N e(g^{a_i}, u_0) \cdot e(\tilde{\gamma}_2, w^{\lceil \lg(\tilde{s}) \rceil} z \tilde{s} h) \cdot \prod_{j=1}^k \prod_{i=1}^N e(g^{a_i M_{i,j}}, u_j)
\]

If \( s^* = \tilde{s} \) and \( M_{1,\beta^*} \neq M' \), then the simulator guessed correctly. In this case, let \( J := \{1, \ldots, k\} - \{\beta^*\} \). Interpreting \( \tilde{\gamma}_2 \) as \( g^t \) for some \( t \in \mathbb{Z}_p \), it follows from the above equation that:
\[
\tilde{\gamma}_1 = (g^{-bM' + x_0})^{\sum_{i=1}^N a_i} \cdot (g^b)^{\sum_{i=1}^N a_i M_{i,\beta^*}} \cdot g^{\sum_{i=1}^N a_i \sum_{j \in J} x_j M_{i,j}} \cdot (g^{x_w \lceil \lg(\tilde{s}) \rceil + x_z \tilde{s} + x_h})^t
\]

If \( s \neq s^* \), the simulator aborts. The probability that it does not abort at any point during the simulation is:
\[
\frac{1}{k} \cdot \frac{1}{2^{\lceil \lg q \rceil}} \cdot \frac{1}{2^\ell} = \frac{1}{k \cdot 2^{\lceil \lg q \rceil} \cdot 2^\ell} \geq \frac{1}{k \cdot 2q \cdot 2^\ell}
\]

Therefore, if a type II adversary can break this scheme with probability \( \epsilon \), then the simulator can solve the CDH problem with probability at least \( \epsilon / (2^{\ell+1} \cdot q \cdot k) \).

#### Batch Verification
The batch verification algorithm parses each signature \( \sigma_i = (\sigma_{1,i}, \sigma_{2,i}, s_i) \) and checks that all \( 0 < s_i < 2^\lambda \). If this is false, it rejects. Let \( M_i = M_{i,1} M_{i,2} \ldots M_{i,k} \), where each division is \( \ell \) bits. The algorithm extracts \( g^{a_i} \in pk_i \) and batch verifies the signatures by checking the group membership of all \( (\sigma_{1,i}, \sigma_{2,i}) \) values, choosing \( r_1, \ldots, r_N \in \{0, 1\}^N \), and testing that:
\[
e\left( \prod_{i=1}^N \sigma_{1,i}^{r_i}, g \right) = e\left( \prod_{i=1}^N (g^{a_i})^{r_i}, u_0 \right) \cdot e\left( \prod_{i=1}^N \sigma_{2,i}^{r_i \lceil \lg(s_i) \rceil}, w \right) \cdot e\left( \prod_{i=1}^N \sigma_{2,i}^{r_i s_i}, z \right) \cdot e\left( \prod_{i=1}^N \sigma_{2,i}^{r_i}, h \right) \cdot \prod_{j=1}^k \prod_{i=1}^N e\left( (g^{a_i M_{i,j}})^{r_i}, u_j \right)
\]

#### Discussion
We discuss features and extensions of the construction.

**Aggregating Aggregates:**
In our scheme, anyone can combine two aggregate signatures into a single aggregate signature simply by multiplying them together, provided that the time periods match. This is also a useful property of other existing schemes [11, 16, 6].

**Self-Aggregation and Multiple Signatures per Period:**
In Section 4, a signer can only issue one signature per time period. However, this requirement can be relaxed if the size of a user’s public key is allowed to grow in proportion to the total number of messages to be signed in any time period. The technique is based on the ability to self-aggregate. A user who wishes to sign at most \( j \) messages per time period must select a public key \( pk = (g^{a_1}, \ldots, g^{a_j}) \). To sign \( \delta \) (≤ \( j \)) messages \( M_1, M_2, \ldots, M_\delta \) where \( M_i = M_{i,1} M_{i,2} \ldots M_{i,k} \) in the current time period \( s \), the signer can generate an aggregate signature on all \( \delta \) messages, with randomness \( t \in \mathbb{Z}_p \), as:
\[
\sigma_1 = \left( \prod_{j=1}^\delta \left( u_0 \prod_{i=1}^k u_i^{M_{j,i}} \right)^{a_j} \right) \cdot (w^{\lceil \lg(s) \rceil} z s h)^t
\]
\[
\sigma_2 = g^t
\]
\[
s
\]

**Most Signing Work Can Be Done Offline:**
If the signer knows a future time period \( s \) during which she wants to issue a signature, she can precompute the values \( (w^{\lceil \lg(s) \rceil} z s h)^t \) and \( g^t \). If we let message chunks be bits and the signer stores her secret key in the form \( u_1^a, \ldots, u_Z^a \), then she can compute the signature once it is known using \( Z + 1 \) multiplications to get \( (u_0 \prod_{i=1}^Z u_i^{M_i})^a \) and then one final multiplication to obtain:
\[
(u_0 \prod_{i=1}^Z u_i^{M_i})^a (w^{\lceil \lg(s) \rceil} z s h)^t
\]
This might help a lower-resource device get its signatures off quickly once the message value becomes known.

**Batch Verification:**
A batch verification algorithm [5] takes as input \( n \) signatures on \( n \) messages from \( n \) users and outputs 1 if all individual signatures verify (with probability 1) and 0 otherwise (with probability \( 1 - 2^{-L} \) for security parameter \( L \)).

The same signatures we aggregated in Section 4 also batch verify. The batching algorithm works even for different signers on different messages at different time periods. It requires only \( k + 5 \) pairings for \( N \) signatures, where \( k \) is the security parameter from before, which in practice could be 5. Let \( L \) be a security parameter, which in practice could be 80. The algorithm works as follows:

**Theorem 5.1:**
The above algorithm is a batch verifier for the Section 4 signatures with error \( 2^{-L} \).

In many applications, signatures may be streaming into a collector, who batch verifies them, and then aggregates the most interesting of them for storage or transmission purposes. Even existing random oracle schemes do not provide this functionality. The full aggregate signatures of [11, 6] do not batch verify for different signers on different messages, and the (synchronized) signatures of [16] do not batch verify across synchronization values. The sequential signatures of [23] also require \( \Omega(N) \) pairings to verify \( N \) signatures, as they employ \( O(\lambda) \) different group elements per signer.

One can extend this algorithm to batch verify a group of aggregate signatures in a straightforward manner. Thus, a central database could receive a group of aggregate signatures at various times during the day and then quickly batch verify them all together.

**Better Efficiency in the Random Oracle Model:**
In Appendix A, we provide a synchronized aggregate signature construction in the random oracle model, which is strictly more efficient than our standard model construction but also has properties that may make it more desirable for some applications than existing random oracle schemes. Our Section 4 scheme has \( O(\lambda) \) elements in the public parameters, resulting in verification times of the same order (although independent of \( N \)). In our random oracle model scheme, we require only 6 elements in the public parameters, and both our signatures and aggregate signatures can be verified using at most 4 pairings. Our random oracle model scheme also batch verifies efficiently.

In contrast, the Boneh et al. [11] scheme requires \( N + 1 \) pairings to verify an aggregate signature from \( N \) signers on \( N \) different messages. In Gentry and Ramzan’s synchronized scheme [16], verifications require only 3 pairings. However, all prior full or synchronized aggregate signatures [11, 16, 6] require a hash function \( H: \{0, 1\}^* \to G \), where \( G \) is a bilinear group. Our random-oracle construction only requires a hash \( H': \{0, 1\}^* \to \mathbb{Z}_p \). Since there are some candidate elliptic curve implementations of bilinear groups, this can be more efficient.