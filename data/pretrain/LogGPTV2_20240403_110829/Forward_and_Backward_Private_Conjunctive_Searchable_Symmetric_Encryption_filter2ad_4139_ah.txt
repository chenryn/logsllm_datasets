more storage compared to MITRACONJ, which seems to be
a reasonable trade-off for the vast improvements in search
performance. Finally, the storage overheads for IEX-ZMF and
IEX-2LEV are 10x and 100x larger than that for ODXT.
B. Leakage Analysis
In this section, we experimentally analyze the leakage
proﬁle of ODXT. The experiments were conducted over
the same 60.92GB-sized real world dataset from Wikimedia
downloads [17] as was used for the performance evaluation
experiments in Section IV. Recall that the dataset contains 16
million documents and 43 million keywords.
Leakage Evaluation of Updates. We ﬁrst present leakage
evaluation of the update protocol
in ODXT. We evaluate
the probability that the adversary guesses correctly either the
operation op or the document identiﬁer id or the keyword w
underlying a given update operation. As stated earlier in foot-
note 3, our leakage enumeration works under the assumption
that update operations involving the same ﬁle identiﬁer are
never repeated. In particular, when an existing ﬁle is to be
updated, it is deleted and re-inserted (in modiﬁed form) under a
fresh ﬁle identiﬁer. This assumption is made in several existing
forward and backward private SSE schemes for single keyword
search, most notably in the constructions of Bost et al. [6] and
Chamani et al. [10], including the original MITRA scheme.
Figure 15: Leakage Analysis of ODXT: Updates in the
“Known Update” Setting
We design our experimental evaluation of the leakages from
updates based on the assumption.
Our ﬁrst set of experiments are in the “known update”
model. More speciﬁcally, we assume that any given point of
time, a computationally bounded adversary has seen N =
|Upd(DB)| update tokens - each corresponding to an update
operation involving unique (op, id) pair, and is trying to guess
the operation op, the document identiﬁer id and the keyword w
underlying the next update operation. However, the adversary
is not allowed to choose the update operations for which
the tokens are to be generated. The adversary’s knowledge
is allowed to grow in a cumulative manner in that for each
new update operation, the adversary is allowed to learn the
underlying (op, (id, w)) tuple after fails to correctly predict
the same.
Figure 15 illustrates the success probability of the adver-
sary in this experiment as the number of tokens it has seen
grows from 1 to 108. The results establish that the adversary
can do no better than a “random guess”. In particular, the
guessing probability of the operation remains very close to
0.5 throughout (indicating an equal probability of addition and
deletion), while the guessing probability for the ﬁle identiﬁers
and keywords go down as the total number of ﬁles and
keywords in the database grow with each update operation.
Our second set of experiments are in the “chosen update”
model. More speciﬁcally, we assume that any given point of
time, a computationally bounded adversary has seen N =
|Upd(DB)| update tokens - each corresponding to an update
16
100
10−1
10−2
10−3
10−4
y
r
e
v
o
c
e
R
f
o
y
t
i
l
i
b
a
b
o
r
P
Operation op
File identiﬁer id
Keyword w
Leakage-Abuse Attack [7]
File-Injection Attack[38]
y
r
e
v
o
c
e
R
y
r
e
u
Q
f
o
y
t
i
l
i
b
a
b
o
r
P
1
0.8
0.6
0.4
0.2
0
101 102 103 104 105 106 107 108
N = |Upd(DB)|
0.2
0.4
0.8
Fraction of Known Files
0.6
1
Figure 16: Leakage Analysis of ODXT: Updates in the “Cho-
sen Update” Setting
Figure 17: Leakage Analysis of ODXT: Two-Keyword Con-
junctive Searches in the “Known Files” Setting
operation involving unique but adversarially chosen (op, id)
pair and is trying to guess the operation op, the document
identiﬁer id and the keyword w underlying a fresh randomly
chosen update operation.
Figure 16 illustrates the success probability of the adver-
sary in this experiment as the number of chosen updates from
1 to 108. The results establish that even in this stronger setting,
the adversary can do no better than a “random guess”. In par-
ticular, the guessing probability of the operation again remains
very close to 0.5 throughout (indicating an equal probability
of addition and deletion), while the guessing probability for
the ﬁle identiﬁers and keywords again go down as the total
number of ﬁles and keywords in the database grow with each
update operation.
Our experiments thus re-establish our formal statement
that updates in ODXT computationally hide the underlying
operation op, the ﬁle identiﬁer id and the keyword w from the
honest-but-curious adversarial server.
Leakage Evaluation of Conjunctive Searches. We now
evaluate the leakage from the conjunctive search protocol
in ODXT. We evaluate the probability that
the adversary
guesses correctly the keywords w1 and w2 underlying a two-
conjunction query q = (w1 ∧ w2) by one of two well-known
and extensively studied cryptanalysis methodologies in the
SSE literature- the leakage-abuse attack of Cash et al. [7] and
the ﬁle-injection attack of Zhang et al. [38]. These attacks
operate in two models - the known ﬁle model (where the
adversary knows the contents of a certain fraction of the ﬁles
in the database) and the chosen/injected ﬁle model (where a
certain fraction of the ﬁles in the database are adversarially
generated).
Naturally, when the adversary knows (or has injected)
all the documents in the database, query recovery is trivial.
However, this is a very strong attack model and is practicaly
infeasible. What we want in a real-life application is that when
the adversary knows only a small fraction of the ﬁles in the
database, or has managed to inject a small fraction of ﬁles into
the database, query recovery should happen with a very small
probability. This would essentially indicate that the adversary
has access to no additional leakage (about either the keywords
underlying the query or the ﬁles in the database) from the
search protocol beyond the benign leakage proﬁle that was
formally enumerated in Appendix III-E.
Leakage-Abuse Attack [7]
File-Injection Attack[38]
y
r
e
v
o
c
e
R
y
r
e
u
Q
f
o
y
t
i
l
i
b
a
b
o
r
P
1
0.8
0.6
0.4
0.2
0
0.2
0.4
0.6
0.8
1
Fraction of Adversarially Chosen/Injected Files
Figure 18: Leakage Analysis of ODXT: Two-Keyword Con-
junctive Searches in the “Chosen Files” Setting
Figure 17 illustrates the success probability of the adver-
sary for both kinds of attacks in the “known ﬁle” attack setting.
The results clearly establish that even when the fraction of
known ﬁles in the database is as high as 50%, the success
probability of the adversary in recovering the keywords un-
derlying a conjunction (w1 ∧ w2) is less than 5%.
Similarly, ﬁgure 17 illustrates the success probability of
the adversary for both kinds of attacks in the “chosen/injected
ﬁle” attack setting. The results again establish that even when
the fraction of injected ﬁles in the database is as high as
60% (which is quite unlikely in any real world database), the
success probability of the adversary in recovering the keywords
underlying a conjunction (w1 ∧ w2) is less than 5%.
Our experiments thus re-establish our claims in Sec-
tion III-E that the leakages incurred by the conjunctive search
protocol in ODXT are benign and are resistant to even the
most powerful leakage-based cryptanalysis techniques in the
SSE literature over real-world databases.
V. CONCLUSION AND OPEN PROBLEMS
In this work, we proposed the ﬁrst dynamic SSE scheme
supporting conjunctive keyword search that achieves both
forward and backward privacy. Prior to this work, the study
of forward and backward private SSE was restricted almost
exclusively to single keyword search. On the other hand, in
the setting of conjunctive keyword search, most prior SSE
constructions with sub-linear search complexity only supported
static databases.
17
Our main
construction,
called Oblivious Cross-
Tags (ODXT in short), supports both updates and conjunctive
keyword searches in tandem over very large arbitrarily-
structured databases,
including both attribute-value and
free-text databases. All operations in ODXT involve only a
single round of communication between the client and the
server. This makes it amenable to deployment in a variety of
settings such as single-client and multi-client SSE. Updates in
ODXT are leakage-free, while searches incur only moderate
access pattern leakages to the server that conform to existing
notions of forward and backward privacy.
Our work gives rise to a number of interesting open
problems. We leave it open to design dynamic conjunctive
SSE schemes with even smaller leakage proﬁles. For example,
an attractive goal is to construct a scheme that only reveals
the update history pertaining to the ﬁnal query outcome,
and hides all the information pertaining to the least frequent
keyword. Extending ODXT beyond conjunctions to support
general Boolean queries is an interesting direction of future
work. Finally, we leave open the question of achieving forward
and backward private SSE schemes with (quasi-) optimal
conjunctive keyword search complexity (along the lines of
ORION and HORUS in [10]).
ACKNOWLEDGMENT
The second author would like to thank the grant ”Design
and Implementation of Efﬁcient and Secure Searchable En-
cryption” sponsored by MHRD-STARS (Scheme for Trans-
formational and Advanced Research in Sciences), India for
partially supporting the work.
REFERENCES
[1] W. Aiello, Y. Ishai, and O. Reingold, “Priced oblivious transfer: How
to sell digital goods,” in EUROCRYPT 2001, 2001, pp. 119–135.
[2] D. J. Bernstein, “Curve25519: New difﬁe-hellman speed records,” in
PKC 2006, 2006, pp. 207–228.
[3] L. Blackstone, S. Kamara, and T. Moataz, “Revisiting leakage abuse
attacks,” in NDSS 2020, 2020.
[4] B. H. Bloom, “Space/time trade-offs in hash coding with allowable
[5] R. Bost, “(cid:80)oϕoς: Forward secure searchable encryption,” in ACM CCS
errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, 1970.
2016, 2016, pp. 1143–1154.
[6] R. Bost, B. Minaud, and O. Ohrimenko, “Forward and backward private
searchable encryption from constrained cryptographic primitives,” in
ACM CCS 2017, 2017, pp. 1465–1482.
[7] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart, “Leakage-abuse attacks
against searchable encryption,” in ACM CCS 2015, 2015, pp. 668–679.
[8] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and
M. Steiner, “Dynamic searchable encryption in very-large databases:
Data structures and implementation,” in NDSS 2014, 2014.
[9] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner,
“Highly-scalable searchable symmetric encryption with support for
boolean queries,” in CRYPTO 2013, 2013, pp. 353–373.
J. G. Chamani, D. Papadopoulos, C. Papamanthou, and R. Jalili, “New
constructions for forward and backward private symmetric searchable
encryption,” in ACM CCS 2018, 2018, pp. 1038–1055.
[10]
[11] Y. Chang and M. Mitzenmacher, “Privacy preserving keyword searches
on remote encrypted data,” in ACNS 2005, 2005, pp. 442–455.
[12] M. Chase and S. Kamara, “Structured encryption and controlled disclo-
sure,” in ASIACRYPT 2010, 2010, pp. 577–594.
[13] C. Chu, W. T. Zhu, J. Han, J. K. Liu, J. Xu, and J. Zhou, “Security
concerns in popular cloud storage services,” IEEE Pervasive Computing,
vol. 12, no. 4, pp. 50–57, 2013.
18
[14] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky, “Searchable
symmetric encryption: improved deﬁnitions and efﬁcient constructions,”
in ACM CCS 2006, 2006, pp. 79–88.
[15] M. Etemad, A. K¨upc¸ ¨u, C. Papamanthou, and D. Evans, “Efﬁcient
dynamic searchable encryption with forward privacy,” PoPETs, vol.
2018, no. 1, pp. 5–20, 2018.
[16] S. Faber, S. Jarecki, H. Krawczyk, Q. Nguyen, M. Rosu, and M. Steiner,
“Rich queries on encrypted data: Beyond exact matches,” in ESORICS
2015, 2015, pp. 123–145.
[17] W. Foundation, “Wikimedia downloads,” https://dumps.wikimedia.org,
2017.
[18] S. Garg, P. Mohassel, and C. Papamanthou, “TWORAM: efﬁcient obliv-
ious RAM in two rounds with applications to searchable encryption,”
in CRYPTO 2016, 2016, pp. 563–592.
[19] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in ACM
STOC’09, 2009, pp. 169–178.
[20] E. Goh, “Secure indexes,” IACR Cryptology ePrint Archive, vol. 2003,
p. 216, 2003.
[21] O. Goldreich and R. Ostrovsky, “Software protection and simulation on
oblivious rams,” J. ACM, vol. 43, no. 3, pp. 431–473, 1996.
[22] M. S. Islam, M. Kuzu, and M. Kantarcioglu, “Access pattern disclosure
on searchable encryption: Ramiﬁcation, attack and mitigation,” in NDSS
2012, 2012.
[23] S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner,
“Outsourced symmetric private information retrieval,” in ACM CCS
2013, 2013, pp. 875–888.
[24] S. Kamara and T. Moataz, “Boolean searchable symmetric encryption
with worst-case sub-linear complexity,” in EUROCRYPT 2017, 2017,
pp. 94–124.
[25] ——, “Computationally volume-hiding structured encryption,” in EU-
ROCRYPT 2019, 2019, pp. 183–213.
[26] S. Kamara and C. Papamanthou, “Parallel and dynamic searchable
symmetric encryption,” in FC 2013, 2013, pp. 258–274.
[27] S. Kamara, C. Papamanthou, and T. Roeder, “Dynamic searchable
symmetric encryption,” in ACM CCS 2012, 2012, pp. 965–976.
[28] K. S. Kim, M. Kim, D. Lee, J. H. Park, and W. Kim, “Forward secure
dynamic searchable symmetric encryption with efﬁcient updates,” in
ACM CCS 2017, 2017, pp. 1449–1463.
[29] S. Lai, S. Patranabis, A. Sakzad, J. K. Liu, D. Mukhopadhyay, R. Ste-
infeld, S. Sun, D. Liu, and C. Zuo, “Result pattern hiding searchable
encryption for conjunctive queries,” in ACM CCS 2018, 2018, pp. 745–
762.
[30] M. Naor and B. Pinkas, “Efﬁcient oblivious transfer protocols,” in
SODA 2001, 2001, pp. 448–457.
[31] S. Patranabis and D. Mukhopadhyay, “Forward and backward private
conjunctive searchable symmetric encryption,” IACR Cryptol. ePrint
Arch., vol. 2020, p. 1342, 2020.
[32] R. A. Popa, C. M. S. Redﬁeld, N. Zeldovich, and H. Balakrishnan,
“Cryptdb: protecting conﬁdentiality with encrypted query processing,”
in ACM SOSP 2011, 2011, pp. 85–100.
[33] D. X. Song, D. A. Wagner, and A. Perrig, “Practical techniques for
searches on encrypted data,” in IEEE S&P 2000, 2000, pp. 44–55.
[34] X. Song, C. Dong, D. Yuan, Q. Xu, and M. Zhao, “Forward private
searchable symmetric encryption with optimized I/O efﬁciency,” IACR
Cryptology ePrint Archive, vol. 2018, p. 497, 2018.
[35] E. Stefanov, C. Papamanthou, and E. Shi, “Practical dynamic searchable
encryption with small leakage,” in NDSS 2014, 2014.
[36] S. Sun, J. K. Liu, A. Sakzad, R. Steinfeld, and T. H. Yuen, “An
efﬁcient non-interactive multi-client searchable encryption with support
for boolean queries,” in ESORICS 2016, 2016, pp. 154–172.
[37] S. Sun, X. Yuan, J. K. Liu, R. Steinfeld, A. Sakzad, V. Vo, and
S. Nepal, “Practical backward-secure searchable encryption from sym-
metric puncturable encryption,” in ACM CCS 2018, 2018, pp. 763–780.
[38] Y. Zhang, J. Katz, and C. Papamanthou, “All your queries are belong
to us: The power of ﬁle-injection attacks on searchable encryption,” in
USENIX Security Symposium 2016, 2016, pp. 707–720.