7
Table 7.2PC-1
57
49
41
33
25
17
9
58
50
42
34
26
18
10
2
59
51
43
35
27
19
11
3
60
52
44
36
63
55
47
39
31
23
15
7
62
54
46
8
30
22
14
6
61
53
45
37
29
21
13
5
28
20
12
4
1. Initial Permutation
First, DES will process the user input, in a way called Initial Permutation, in which
the user input will be replaced in the order shown in Table 7.1.
According to the table, the 58th bit of the userâ€™s input AM becomes the first bit of
the result IP, the 5Oth bit of A becomes the second bit of the IP, and so on. The
following is the result of a particular input M after IP.
M = 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101
1110 1111
IP = 1100 1100 0000 0000 1100 1100 1111 1111 1111 0000 1010 1010 1111 0000
1010 1010
Dividing the IP into left and right parts of equal length yields the initial L and R
values.
TTTT tTTT 00TT 00TT 0000 0000 00TT 00TT = 0T
OTOT 0TOT 0000 1TTT 0TOT 0TOT 0000 1TTT = 08
2. Generation of subkeys
First, the incoming original key is substituted to generate a 64-bit key according to
Table 7.2. The first number in the table is 57, which means that the 57th bit of the
original key becomes the first bit of the permutation key key+; similarly, the 49th bit
of the original key becomes the second bit of the permutation key. Note that the
operation here takes only 56 bits from the original key; the highest significant bit of
each byte of the original key is not used.
---
## Page 581
7.3 Block Ciphers
569
Table 7.3 PC-2
14
17
11
24
1
5
3
8
6
10
23
19
12
4
26
8
16
20
13
41
52
31
37
47
30
40
45
33
48
44
49
39
56
34
53
46
42
50
36
29
32
The following is an example of an input key being converted to the permutation
key.
key = 00010011 00110100 01010111 01111001 10011011 10111100 11011111
11110001
key+ = 1111000 0110011 0010101 0101111 0101010 1011001 1001111 0001111
After the permutation key is obtained, it is divided into two parts, C0 and D0
C0 = 1111000 0110011 0010101 0101111
D0 = 0101010 1011001 1001111 0001111
After C0 and D0 are obtained, the values of C1-C16 and D1-D16 can be obtained by
follows.
cyclic left shift of C0 and DO, and the number of bits for each cyclic shift is as
1 1 2 2 2 2 2 2 1 2 2 2 2 2 2 1
For example, for the previous CO and D0, shifting them left by one bit in the first
round yields C1 and D1, while further shifting them left by one bit yields C2 and D2.
D1 = 1010101011001100111100011110
D2 = 0101010110011001111000111101
C2 = 1100001100110010101010111111
Next, by combining each group of Cr and Dn, we obtain 16 blocks of data, each
with 56 bits. Finally, by applying another permutation in Table 7.3, we get K1 to
K16.
For example, for the previously mentioned CiD1, the calculation yields the
corresponding K1.
C1D1 = 1110000 1100110 0101010 1011111 1010101 0110011 0011110 0011110
K1 = 000110 110000 001011 101111 111111 000111 000001 110010
---
## Page 582
570
7Crypto
Fig, 7.18 DES (from
Wikipedia-DES)
Half Block (32 bits)
Subkey (48 bits)
CS
S4
S5
S6
S7
S8
P
Table 7.4 E bit-selection
table
32
1
2
3
4
5
4
5
6
7
8
9
8
9
10
11
12
13
12
13
14
15
16
17
16
17
18
19
20
21
20
21
22
23
24
25
24
25
26
27
28
29
28
29
30
31
32
1
3. Round Function
The round function F used in DES is shown in Fig. 7.18.
Each round of input will enter the E function and expand it to 48 bits. The method
of expansion is similar to the previous permutation process, which uses Table 7.4.
The following is an example of an input extended by the E function.
E (R0) = 011110 100001 010101 010101 011110 100001 010101 010101
R0 = 1111 0000 1010 1010 1111 0000 1010 1010
When the expansion is complete, this input is XORed with the corresponding
subkey, resulting in 48 bits of data. These 48 bits are divided into eight groups of six
bits data, which index the corresponding elements in the S1 to S8 tables. The index
of the elements in S1 to S8 are in the range of 0 to 15, i.e., 4 bits. Finally, these eight
4-bit number will be put together again, as a 32-bit data, and then after another
permutation operation to get the output of the F function. There is no difference
between the permutation operation and the previous ones, but the table has changed.
---
## Page 583
7.3 Block Ciphers
571
7.3.2.3 Examples
Example 7.1 2018 N1CTF N1ES, the challenge gives the encryption key and the
corresponding encryption algorithm, and requires the participant to reverse engineer
the decryption algorithm. The core code snippet of the encryption algorithm is as
follows.
def round_add (a, b) :
f = 1ambda x, y: Ã— + y - 2 * (x & y)
xes = '1
for i in range (len (a) ) :
res += chr (f (oxd (a [1] ) , ord (b [4] >> )
def generate (o) :
return res
k = permutate (s_box, o)
b = []
for 1 in range (0, 1en (k) , 7) :
b.append (k[1 :1+7] + [1]]
for i in range (32) :
c = []
pos = 0
x = 0
for j in b[i] :
x += (> 1
def main (1 :
return cipher
key = fag[5: -1]
assert len (key) == 32
key = key -encode (*hex*)
key = int (key, 16)
magic = getMagic (1
cipher = playMagic (magic, key)
cipher = hex (cipher) [2: -1]
vith open ("cipher,txt*, "w*) as f :