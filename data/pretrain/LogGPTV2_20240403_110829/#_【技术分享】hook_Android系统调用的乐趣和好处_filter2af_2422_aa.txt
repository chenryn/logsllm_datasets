# 【技术分享】Hook Android系统调用的乐趣和好处

## 译文声明
本文是翻译文章，原文来源：vantagepoint.sg  
原文地址：[链接]  
译文仅供参考，具体内容表达以及含义以原文为准。

**翻译：** [myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)  
**预估稿费：200RMB**  
**投稿方式：** 发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

---

### 0x00 前言
Android内核是逆向工程师的得力助手。尽管常规的Android应用受到限制并被沙盒化，但逆向工程师可以自定义和修改操作系统及内核的行为。这为逆向工程师提供了独特的优势，因为大多数完整性检查和防篡改功能都依赖于内核服务。通过部署这种可以滥用信任并自我欺骗的内核和环境，可以避免许多不必要的麻烦。

Android应用与系统环境交互有多种方式。标准方法是通过安卓应用框架的API函数。然而，在底层，许多重要的函数（如内存分配和文件访问）都被转化为Linux的系统调用。在ARM Linux中，系统调用通过SVC指令触发软件中断来实现。中断会调用内核函数`vector_swi()`，并将系统调用号作为函数指针表的偏移量（例如Android上的`sys_call_table`）。

拦截系统调用最直接的方法是将代码注入内核内存，覆盖系统调用表中的原始函数地址以重定向执行。不幸的是，当前的Android内核增强了内存限制，阻止了这种操作。具体来说，内核是在启用`CONFIG_STRICT_MEMORY_RWX`选项的情况下构建的，这阻止了对只读内核内存区域的写入，任何尝试修改系统代码或系统调用表的操作都将导致崩溃和重启。绕过这一限制的一种方法是自己编译内核：禁用这种保护，并进行更多自定义修改，有利于逆向分析。如果你按常规方法逆向Android应用，构建自己的逆向沙箱是不明智的。

**注意：** 下面的步骤最好在Ubuntu 14.04环境中使用Android NDK 4.8完成。我在Mac上多次失败后才成功。我建议使用Ubuntu虚拟机，除非你是一个喜欢挑战的人。

### 0x01 构建内核
为了hack的目的，我推荐使用支持[AOSP](https://source.android.com/)的设备。Google的Nexus智能手机和平板电脑是最合理的选择，从AOSP构建的内核和系统组件在这些设备上运行没有问题。另外，索尼的Xperia系列也可以。要构建AOSP内核，需要一系列[工具](https://developer.android.com/ndk/downloads/index.html)（交叉编译工具）和相应的内核源代码。根据[谷歌的指导](https://source.android.com/source/initializing.html)，确定正确的git仓库和分支。

例如，获取匹配Nexus 5的Lollipop内核源码，需要克隆“msm”仓库并检出一个分支“android-msm-hammerhead”。一旦源码下载完成，使用`make hammerhead_defconfig`（或其他适合你设备的配置命令）创建默认内核配置。

```bash
$ git clone https://android.googlesource.com/kernel/msm.git
$ cd msm
$ git checkout origin/android-msm-hammerhead-3.4-lollipop-mr1 
$ export ARCH=arm 
$ export SUBARCH=arm
$ make hammerhead_defconfig
$ vim .config
```

为了启动系统调用挂钩功能，我建议增加可加载模块的支持，由`/dev/kmem`接口支持，同时导出全局内核符号表。不要忘记禁用内存保护。这些选项的值已经在配置文件中存在，只需简单设置以下值：

```plaintext
CONFIG_MODULES=Y
CONFIG_MODULE_UNLOAD=y
CONFIG_STRICT_MEMORY_RWX=N
CONFIG_DEVMEM=Y
CONFIG_DEVKMEM=Y
CONFIG_KALLSYMS=Y
CONFIG_KALLSYMS_ALL=Y
```

完成编辑配置文件后，或者你可以现在创建一个独立的工具链，用于交叉编译内核和以后的任务。为了给Android 5.1创建一个工具链，运行Android NDK包的`make-standalone_toolchain.sh`脚本：

```bash
$ cd android-ndk-rXXX
$ build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-21 --install-dir=/tmp/my-android-toolchain
```

设置`CROSS_COMPILE`环境变量，指向NDK目录，并运行`make`构建内核。

```bash
$ export CROSS_COMPILE=/tmp/my-android-toolchain/bin/arm-eabi- 
$ make
```

当构建过程完成后，可以在`arch/arm/boot/zImage-dtb`找到引导内核模块。

### 0x02 启动新内核
在启动新内核之前，备份你的设备的原始引导映像。找到启动分区的位置：

```bash
root@hammerhead:/dev # ls -al /dev/block/platform/msm_sdcc.1/by-name/         
lrwxrwxrwx root     root              1970-08-30 22:31 DDR -> /dev/block/mmcblk0p24
lrwxrwxrwx root     root              1970-08-30 22:31 aboot -> /dev/block/mmcblk0p6
lrwxrwxrwx root     root              1970-08-30 22:31 abootb -> /dev/block/mmcblk0p11
lrwxrwxrwx root     root              1970-08-30 22:31 boot -> /dev/block/mmcblk0p19
(...)
lrwxrwxrwx root     root              1970-08-30 22:31 userdata -> /dev/block/mmcblk0p28
```

然后，将所有内容转储到一个文件中：

```bash
$ adb shell "su -c dd if=/dev/block/mmcblk0p19 of=/data/local/tmp/boot.img"
$ adb pull /data/local/tmp/boot.img
```

接下来，提取ramdisk以及有关引导映像结构的一些信息。有许多工具可以做到这一点，我使用Gilles Grandou的[abootimg](https://github.com/gerasiov/abootimg-android)工具。安装该工具并执行以下命令：

```bash
$ abootimg -x boot.img
```

在本地目录会创建`bootimg.cfg`、`initrd.img`和`zImage`（原始内核）文件。

可以使用快速引导测试新内核。“fastboot boot”命令允许测试内核。在fastboot模式下使用以下命令重启设备：

```bash
$ adb reboot bootloader
```

然后，使用“fastboot boot”命令引导新的Android内核。除了新建的内核和原始ramdisk外，还需指定内核偏移量、ramdisk偏移量、标签偏移量和命令行（使用之前提取的`bootimg.cfg`中列出的值）。

```bash
$ fastboot boot zImage-dtb initrd.img --base 0 --kernel-offset 0x8000 --ramdisk-offset 0x2900000 --tags-offset 0x2700000 -c "console=ttyHSL0,115200,n8 androidboot.hardware=hammerhead user_debug=31 maxcpus=2 msm_watchdog_v2.enable=1"
```

现在应该手动重启。为了快速验证内核是否正确运行，可以通过检查“设置->关于手机”中的“内核版本”值来进行验证。

如果一切正常运行，将显示自定义构建的版本字符串。

### 0x03 使用内核模块hook系统调用
Hook系统调用可以让我们绕过任何依赖内核提供的反逆向防御措施。在我们自定义的内核中，我们可以使用LKM加载额外的代码到内核中。我们还可以访问`/dev/kmem`接口，用来修改内核内存。这是一种经典的Linux rootkit技术。

首先需要的是`sys_call_table`的地址。幸运的是，它在Android内核中被导出了符号（iOS则没有这么幸运）。我们可以在`/proc/kallsyms`中查找地址：

```bash
$ adb shell "su -c echo 0 > /proc/sys/kernel/kptr_restrict"
$ adb shell cat /proc/kallsyms | grep sys_call_table
c000f984 T sys_call_table
```

这是我们唯一需要写入的内核地址，其他地址可以通过偏移计算得出。

我们将使用内核模块隐藏一个文件。让我们在设备上创建一个文件，以便稍后隐藏它：

```bash
$ adb shell "su -c echo ABCD > /data/local/tmp/nowyouseeme"             
$ adb shell cat /data/local/tmp/nowyouseeme
ABCD
```

最后是编写内核模块。为了隐藏文件，我们需要hook用于打开文件的一个系统调用。有许多相关的系统调用，如`open`, `openat`, `access`, `accessat`, `facessat`, `stat`, `fstat`等。现在我们只需要hook `openat`系统调用，这个系统调用被`/bin/cat`程序访问文件时使用。

你可以在内核头文件中（`arch/arm/include/asm/unistd.h`）找到所有系统调用的函数原型。使用以下代码创建一个名为`kernel_hook.c`的文件：

```c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/syscalls.h>
#include <linux/string.h>
#include <linux/uaccess.h>
#include <linux/kallsyms.h>

asmlinkage int (*real_openat)(int, const char __user*, int);
void **sys_call_table;

int new_openat(int dirfd, const char __user* pathname, int flags)
{
    char *kbuf;
    size_t len;
    kbuf = (char *)kmalloc(256, GFP_KERNEL);
    if (kbuf == NULL) {
        return -ENOMEM;
    }

    if (copy_from_user(kbuf, pathname, 256)) {
        kfree(kbuf);
        return -EFAULT;
    }

    if (strcmp(kbuf, "/data/local/tmp/nowyouseeme") == 0) {
        kfree(kbuf);
        return -ENOENT; // 返回文件不存在
    }

    int ret = real_openat(dirfd, pathname, flags);
    kfree(kbuf);
    return ret;
}

static int __init kernel_hook_init(void)
{
    unsigned long *sct;
    sct = (unsigned long *)kallsyms_lookup_name("sys_call_table");
    if (!sct) {
        printk(KERN_ALERT "sys_call_table not found\n");
        return -ENODEV;
    }

    sys_call_table = (void **)sct;
    real_openat = (void *)sys_call_table[__NR_openat];
    write_cr0(read_cr0() & (~0x10000));
    sys_call_table[__NR_openat] = (void *)new_openat;
    write_cr0(read_cr0() | 0x10000);

    printk(KERN_INFO "Kernel hook module loaded\n");
    return 0;
}

static void __exit kernel_hook_exit(void)
{
    write_cr0(read_cr0() & (~0x10000));
    sys_call_table[__NR_openat] = (void *)real_openat;
    write_cr0(read_cr0() | 0x10000);

    printk(KERN_INFO "Kernel hook module unloaded\n");
}

module_init(kernel_hook_init);
module_exit(kernel_hook_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("A simple kernel hook to hide a file");
```

以上代码实现了`openat`系统调用的hook，隐藏了特定路径下的文件。你可以根据需要进一步扩展和修改这段代码。