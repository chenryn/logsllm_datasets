### Optimized Text

#### Introduction
The time required for a specific card to authenticate is relatively constant. Therefore, an attacker can estimate this time by performing two authentications on the exploit sector. This allows the attacker to estimate the distance \(\delta\) between the first and second tag nonces.

#### Authentication Process
As described in Section 3.2, the attacker can authenticate for the exploit sector and then for another sector. During the authentication for the exploit sector, the tag nonce \(n_T^0\) is sent in plaintext. In the second authentication, the tag nonce \(n_T\) is sent encrypted as \(\{n_T\}\). By computing \(suci(n_T^0)\) for values of \(i\) close to \(\delta\), the adversary can make a small number of guesses for \(n_T\). The adversary can further narrow down the possibilities for \(n_T\) using the three bits of information from the parity bits (Theorem 3.3). This allows the adversary to accurately guess \(n_T\) and thus recover the first 32 bits of the keystream, \(b_0b_1 \ldots b_{31}\).

#### Key Recovery
A variant of the attack described in Section 6.3 of [GKM+08] can be used to recover approximately \(2^{16}\) possible candidate keys. By repeating this procedure two or three times, the attacker can recover the key for the second sector by taking the intersection of the sets of candidate keys.

The critical aspect of the attack is that the inputs to the filter function are only at odd-numbered positions in the LFSR. This allows the computation of all possible combinations for the odd-numbered and even-numbered bits of the LFSR stream that are consistent with the keystream.

#### Definitions
**Definition 4.12.** We define the odd tables \(T_O^i\) as follows:
- \(T_O^0 := \{x_9x_{11} \ldots x_{45}x_{47} \in F_{20}^2 \mid f(x_9x_{11} \ldots x_{45}x_{47}) = b_0\}\)
- For \(i \in \{1, \ldots, 15\}\):
  \[
  T_O^i := \{x_9x_{11} \ldots x_{45+2i}x_{47+2i} \in F_{20+i}^2 \mid x_9x_{11} \ldots x_{45+2i} \in T_O^{i-1} \wedge f(x_{9+2i}x_{11+2i} \ldots x_{45+2i}x_{47+2i}) = b_{2i}\}
  \]

Symmetrically, we define the even tables \(T_E^i\) as follows:
- \(T_E^0 := \{x_{10}x_{12} \ldots x_{46}x_{48} \in F_{20}^2 \mid f(x_{10}x_{12} \ldots x_{46}x_{48}) = b_1\}\)
- For \(i \in \{1, \ldots, 15\}\):
  \[
  T_E^i := \{x_{10}x_{12} \ldots x_{46+2i}x_{48+2i} \in F_{20+i}^2 \mid x_{10}x_{12} \ldots x_{46+2i} \in T_E^{i-1} \wedge f(x_{10+2i}x_{12+2i} \ldots x_{46+2i}x_{48+2i}) = b_{2i+1}\}
  \]

We write \(T_O := T_O^{15}\) and \(T_E := T_E^{15}\).

Due to the structure of the filter function \(f\), \(T_O^0\) and \(T_E^0\) are exactly of size \(2^{19}\) (Theorem 2.3). The other tables are approximately of this size as well. An entry \(x_9x_{11} \ldots x_{45+2i}\) in \(T_O^{i-1}\) leads to four different possibilities in \(T_O^i\): it can appear extended with 0, with 1, both, or not at all. Overall, these possibilities are equally likely, and hence \(T_O^i\) has, on average, the same size as \(T_O^{i-1}\) (and similarly for \(T_E\)).

#### Feedback Function
**Definition 4.13.** We define the odd part of the feedback function, \(L_O: F_{24}^2 \to F_2\), by:
\[
L_O(x_1x_3 \ldots x_{47}) := x_5 \oplus x_9 \oplus x_{15} \oplus x_{17} \oplus x_{19} \oplus x_{25} \oplus x_{27} \oplus x_{29} \oplus x_{35} \oplus x_{39} \oplus x_{41} \oplus x_{43}
\]
and the even part of the feedback function, \(L_E: F_{24}^2 \to F_2\), by:
\[
L_E(x_0x_2 \ldots x_{46}) := x_0 \oplus x_{10} \oplus x_{12} \oplus x_{14} \oplus x_{24} \oplus x_{42}
\]

Note that \(L_E\) and \(L_O\) combine to give \(L\), in the sense that:
\[
L(x_0x_1x_2 \ldots x_{47}) = L_E(x_0x_2 \ldots x_{46}) \oplus L_O(x_1x_2 \ldots x_{47})
\]

As the \(a_9a_{10} \ldots a_{77}a_{78}\) are being shifted through the LFSR, the UID \(u\) and the tag nonce \(n_T\) are also shifted in. In the following definition, we compute the 22 bits of feedback from the LFSR from time 9 to time 31, accounting for the shifting in of \(u \oplus n_T\), and also splitting the contribution from the odd- and even-numbered bits of the LFSR.

**Definition 4.14.** We define the contribution of the entries of the odd table to the feedback, \(\psi_O: T_O \to F_{22}^2\), by:
\[
\psi_O(x_9x_{11} \ldots x_{77}) := (L_E(x_{9+2i}x_{11+2i} \ldots x_{55+2i}) \oplus n_{T,9+2i} \oplus u_{9+2i}, L_O(x_{11+2i}x_{13+2i} \ldots x_{57+2i}) \oplus n_{T,10+2i} \oplus u_{10+2i})_{i \in [0,10]}
\]
and we define the contribution of the entries of the even table to the feedback, \(\psi_E: T_E \to F_{22}^2\), by:
\[
\psi_E(x_{10}x_{12} \ldots x_{78}) := (L_O(x_{10+2i}x_{12+2i} \ldots x_{56+2i}) \oplus x_{57+2i}, L_E(x_{10+2i}x_{12+2i} \ldots x_{56+2i}) \oplus x_{58+2i})_{i \in [0,10]}
\]

**Definition 4.15.** We define the combined table \(T_C\) as follows:
\[
T_C := \{x_9x_{10}x_{11} \ldots x_{78} \in F_{70}^2 \mid x_9x_{11} \ldots x_{77} \in T_O \wedge x_{10}x_{12} \ldots x_{78} \in T_E \wedge \psi_O(x_9x_{11} \ldots x_{77}) = \psi_E(x_{10}x_{12} \ldots x_{78})\}
\]

Note that \(T_C\) can easily be computed by first sorting \(T_O\) by \(\psi_O\) and \(T_E\) by \(\psi_E\).

The crucial point is the following theorem, which shows that the actual LFSR stream of the tag under attack is in the table \(T_C\).

**Theorem 4.16.** \(a_9a_{10}a_{11} \ldots a_{78} \in T_C\).

**Proof.** By definition of \(T_O\) and \(T_E\), \(a_9a_{11} \ldots a_{77} \in T_O\) and \(a_{10}a_{12} \ldots a_{78} \in T_E\). We only need to check that the sequence \(a_9a_{10}a_{11} \ldots a_{78}\) satisfies the constraint defining \(T_C\). For this, we have:
\[
\psi_O(a_9a_{11} \ldots a_{77}) \oplus \psi_E(a_{10}a_{12} \ldots a_{78}) = (L(x_{9+2i}x_{10+2i} \ldots x_{56+2i}) \oplus n_{T,9+2i} \oplus u_{9+2i} \oplus x_{57+2i}, L(x_{10+2i}x_{11+2i} \ldots x_{57+2i}) \oplus n_{T,10+2i} \oplus u_{10+2i} \oplus x_{58+2i})_{i \in [0,10]} = (0, 0)_{i \in [0,10]}
\]
as required.

Taking the first 48 bits of every entry in \(T_C\), the attacker can apply Theorem 2.8 nine times for each entry, obtaining one candidate key for each entry in \(T_C\). Since 32 bits of keystream and a 48-bit key are used, on average there will be \(2^{16}\) candidate keys. Repeating this process once more yields another set of approximately \(2^{16}\) candidate keys; the actual key must be in the intersection. In practice, the intersection usually contains a single key, but occasionally it may contain two keys, in which case a third run of the entire procedure can be used to determine the key (or both candidate keys can be tested online).

#### Conclusions
We have identified significant "textbook" vulnerabilities in the Mifare Classic tag. Specifically, the Mifare Classic mixes two layers of the protocol stack and reuses a one-time pad for the encryption of the parity bits. It also sends encrypted error messages before a successful authentication. These weaknesses allow an adversary to recover a secret key within seconds. Moreover, tag nonces are predictable, which, besides allowing replays, provides known plaintext for our nested authentication attack. We have executed these attacks in practice and retrieved all secret keys from several cards, including those used in large access control and public transport ticketing systems.

To mitigate these vulnerabilities, system integrators could consider the following countermeasures:
- Diversify all keys in the card.
- Cryptographically bind the contents of the card to the UID, for instance, by including a MAC.

For now, the second countermeasure prevents an attacker from cloning a card onto a blank one. However, it does not stop an attacker from emulating the card with an emulator like the Proxmark.

We notified the manufacturer, NXP, of these vulnerabilities early on. Since the protocol is implemented in hardware, definitive countermeasures that do not require replacing the entire infrastructure are not feasible. However, NXP is currently developing a backwards-compatible successor to the Mifare Classic, the Mifare Plus. We are collaborating with NXP to provide feedback to help improve the security of their new prototypes, given the limitations of the backwards compatibility mode.

#### Acknowledgments
We are grateful to our faculty's computer department (C&CZ) for providing us with computing power, and to Ben Polman in particular for his assistance.

#### References
- [Bih97] Eli Biham. A fast new DES implementation in software. In Fast Software Encryption (FSE '97), volume 1267 of Lecture Notes in Computer Science, pages 260–272, 1997.
- [CNO08] Nicolas T. Courtois, Karsten Nohl, and Sean O’Neil. Algebraic attacks on the Crypto-1 stream cipher in Mifare Classic and Oyster Cards. Cryptology ePrint Archive, Report 2008/166, 2008.
- [GKM+08] Flavio D. Garcia, Gerhard de Koning Gans, Ruben Muijrers, Peter van Rossum, Roel Verdult, Ronny Wichers Schreur, and Bart Jacobs. Dismantling MIFARE Classic. In Sushil Jajodia and Javier Lopez, editors, European Symposium on Research in Computer Security (ESORICS '08), volume 5283 of Lecture Notes in Computer Science, pages 97–114. Springer, 2008.
- [ISO01] Identification cards — contactless integrated circuit cards — proximity cards (ISO/IEC 14443), 2001.
- [KHG08] Gerhard de Koning Gans, Jaap-Henk Hoepman, and Flavio D. Garcia. A practical attack on the MIFARE Classic. In Gilles Grimaud and Francois-Xavier Standaert, editors, Smart Card Research and Advanced Application (CARDIS '08), volume 5189 of Lecture Notes in Computer Science, pages 267–282. Springer, 2008.
- [KPP+06] Sandeep Kumar, Christof Paar, Jan Pelzl, Gerd Pfeiffer, and Manfred Schimmler. Breaking ciphers with COPACOBANA - a cost-optimized parallel code breaker. In Cryptographic Hardware and Embedded Systems (CHES '06), volume 4249 of Lecture Notes in Computer Science, pages 101–118. Springer, 2006.
- [Kra01] Hugo Krawczyk. The order of encryption and authentication for protecting communications (or: How secure is SSL?). In Advances in Cryptology (CRYPTO '01), pages 310–331. Springer, 2001.
- [MAD07] Mifare application directory. http://www.nxp.com/acrobat_download/other/identification/M001830.pdf, May 2007.
- [MFS08] MF1ICS50 functional specification. http://www.nxp.com/acrobat/other/identification/M001053_MF1ICS50_rev5_3.pdf, January 2008.
- [NESP08] Karsten Nohl, David Evans, Starbug, and Henryk Plötz. Reverse-engineering a cryptographic RFID tag. In USENIX Security 2008, pages 185–193, 2008.
- [Noh08] Karsten Nohl. Cryptanalysis of Crypto-1. http://www.cs.virginia.edu/~kn5f/Mifare.Cryptanalysis.htm, 2008.
- [NP07] Karsten Nohl and Henryk Plötz. Mifare, little security despite obscurity. Presentation at Chaos Computer Congress, 2007.