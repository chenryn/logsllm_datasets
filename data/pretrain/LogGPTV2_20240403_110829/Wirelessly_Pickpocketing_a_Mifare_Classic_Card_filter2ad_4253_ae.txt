quite constant for a speciﬁc card. Therefore, an attacker
can ﬁrst estimate this time by authenticating two times
for the exploit sector. In this way the attacker can
estimate the distance δ between the ﬁrst and the second
tag nonce.
As explained in Section 3.2, the attacker can now
authenticate for the exploit sector and subsequently
for another sector. In the authentication for the exploit
sector the tag nonce n0
T is sent in the clear; during
the second authentication the tag nonce nT is sent
encrypted as {nT }. By computing suci(n0
T ) for i close
to δ, the adversary has a small number of guesses for
nT . The adversary can further narrow the possibilities
for nT using the three bits of information from the
parity bits (Theorem 3.3). In this way the adversary
can accurately guess nT and hence recover the ﬁrst 32
bits of keystream, b0b1 . . . b31.
We shall show how a variant of the attack of
Section 6.3 of [GKM+08] can be used to recover
10
approximately 216 possible candidate keys. By doing
this procedure two or three times, the attacker can
recover the key for the second sector as well by taking
the intersection of the two or three sets of candidate
keys.
The crucial ingredient in the attack is the fact that the
inputs to the ﬁlter function are only on odd-numbered
places of the LFSR. This makes it possible to compute
separately all possibilities for the odd-numbered bits
of the LFSR-stream and the even-numbered bits of the
LFSR-stream that are compatible with the keystream.
Deﬁnition 4.12. We deﬁne the odd tables T O
i by
0 := {x9x11 . . . x45x47 ∈ F20
T O
2 |
f (x9x11 . . . x45x47) = b0}
and for i ∈ {1, . . . , 15}
T O
i
:= {x9x11 . . . x45+2ix47+2i ∈ F20+i
|
x9x11 . . . x45+2i ∈ T O
f (x9+2ix11+2i . . . x45+2ix47+2i) = b2i}.
2
i−1 ∧
Symmetrically, we deﬁne the even tables T E
i by
0 := {x10x12 . . . x46x48 ∈ F20
T E
2 |
f (x10x12 . . . x46x48) = b1}
and for i ∈ {1, . . . , 15}
T E
i
:= {x10x12 . . . x46+2ix48+2i ∈ F20+i
2
|
x10x12 . . . x46+2i ∈ T E
f (x10+2ix12+2i . . . x46+2ix48+2i) = b2i+1}.
i−1 ∧
We write T O := T O
15 and T E := T E
15.
Because of the structure of the ﬁlter function f , T O
0
and T E
0 are exactly of size 219 (Theorem 2.3). The
other tables are approximately of this size as well. An
entry x9x11 . . . x45+2i of T O
i−1 leads to four different
possibilities in T O
i extended with
0 and with 1; it can appear extended only with 0; it
can appear extended only with 1; or it can not appear
at all. Overall, these possibilities are equally likely, and
hence T O
i−1 (and
similarly for T E).
i has, on average, the same size as T O
i : it can appear in T O
The feedback function L can also be split in an even
and an odd part.
deﬁne
4.13. We
feedback function, LO : F24
Deﬁnition
the odd part of
the
2 → F2, by
LO(x1x3 . . . x47) := x5 ⊕ x9 ⊕ x15 ⊕ x17 ⊕ x19 ⊕
x25 ⊕ x27 ⊕ x29 ⊕ x35 ⊕ x39 ⊕ x41 ⊕ x43 and the
even part of the feedback function, LE : F24
2 → F2, by
LE(x0x2 . . . x46) := x0 ⊕ x10 ⊕ x12 ⊕ x14 ⊕ x24 ⊕ x42.
Note that LE and LO combine to give L, in the
sense that
L(x0x1x2 . . . x47) = LE(x0x2 . . . x46)
⊕ LO(x1x2 . . . x47).
(2)
As the a9a10 . . . a77a78 are being shifted through
the LFSR, the uid u and the tag nonce nT are shifted
in as well. In the following deﬁnition we compute the
22 bits of feedback from the LFSR from time 9 to
time 31, taking care of the shifting in of u ⊕ nT , and
also splitting the contribution from the odd- and even-
numbered bits of the LFSR. At this point, the situation
in [GKM+08] is slightly simpler. There, the attacker
tries to ﬁnd the state of the LFSR after initialization,
so nothing is being shifted in.
Deﬁnition 4.14. We deﬁne the contribution of the en-
tries of the odd table to the feedback, ψO : T O → F22
2 ,
by
ψO(x9x11 . . . x77) :=
(LE(x9+2ix11+2i . . . x55+2i) ⊕ nT,9+2i ⊕ u9+2i,
LO(x11+2ix13+2i . . . x57+2i) ⊕ nT,10+2i
⊕ u10+2i)i∈[0,10]
and we deﬁne the contribution of the entries of the
even table to the feedback, ψE : T E → F22
2 , by
ψE(x10x12 . . . x78) :=
(LO(x10+2ix12+2i . . . x56+2i) ⊕ x57+2i,
LE(x10+2ix12+2i . . . x56+2i) ⊕ x58+2i)i∈[0,10].
Deﬁnition 4.15. We deﬁne the combined table T C as
follows.
T C := {x9x10x11 . . . x78 ∈ F70
2 |
x9x11 . . . x77 ∈ T O ∧ x10x12 . . . x78 ∈ T E
∧ ψO(x9x11 . . . x77) = ψE(x10x12 . . . x78)}.
Note that T C can easily be computed by ﬁrst sorting
T O by ψO and T E by ψE.
The crucial point is the following theorem; it shows
that the actual LFSR-stream of the tag under attack is
in the table T C.
Theorem 4.16. a9a10a11 . . . a78 ∈ T C.
Proof. By deﬁnition of T O and T E, a9a11 . . . a77 ∈
T O and a10a12 . . . a78 ∈ T E. We only have to check
that the sequence a9a10a11 . . . a78 satisﬁes the con-
11
straint deﬁning T C. For this, we have
• perform regular integrity checks in the back of-
ψO(a9a11 . . . a77) ⊕ ψE(a10a12 . . . a78)
= (LE(x9+2ix11+2i . . . x55+2i) ⊕ nT,9+2i ⊕ u9+2i
⊕ LO(x10+2ix12+2i . . . x56+2i) ⊕ x57+2i),
LO(x11+2ix13+2i . . . x57+2i) ⊕ nT,10+2i ⊕ u10+2i
⊕ LE(x10+2ix12+2i . . . x56+2i) ⊕ x58+2i)i∈[0,10]
(by Dfn. 4.14)
= (L(x9+2ix10+2i . . . x56+2i)
⊕ nT,9+2i ⊕ u9+2i ⊕ x57+2i,
L(x10+2ix11+2i . . . x57+2i)
⊕ nT,10+2i ⊕ u10+2i ⊕ x58+2i)i∈[0,10]
=(0, 0)i∈[0,10],
as required.
(by Eqn. (2))
(by Dfn. 2.6)
Taking the ﬁrst 48 bits of every entry of T C, the
attacker can apply Theorem 2.8 nine times for every
entry, obtaining one candidate key for every entry
of T C. Because we have used 32 bits of keystream
and the key is 48 bits, on average there will be 216
candidate keys. Doing this procedure once more gives
another set of approximately 216 candidate keys; the
actual key must be in the intersection. In practice, most
of the time the intersection only contains a single key;
occasionally it contains two keys and then a third run
of this whole procedure can be used to determine the
key (or both candidate keys can just be tested online,
of course).
5. Conclusions
We have found serious ‘textbook’ vulnerabilities
in the Mifare Classic tag. In particular, the Mifare
Classic mixes two layers of the protocol stack and
reuses a one-time pad for the encryption of the parity
bits. It also sends encrypted error messages before
a successful authentication. These weaknesses allow
an adversary to recover a secret key within seconds.
Moreover, tag nonces are predictable which, besides
allowing replays, provides known plaintext for our
nested authentication attack. We have executed these
attacks in practice and retrieved all secret keys from a
number of cards, including cards used in large access
control and public transport ticketing systems.
To slightly hamper an adversary, system integrators
could consider the following countermeasures:
• diversify all keys in the card;
• cryptographically bind the contents of the card to
the uid, for instance by including a MAC;
12
ﬁce.
For the time being, the second countermeasure pre-
vents an attacker from cloning a card onto a blank one.
However, this does not stop an attacker from emulating
that card with an emulator like the Proxmark.
Early on we have notiﬁed the manufacturer NXP of
these vulnerabilities. Since the protocol is implemented
in hardware, we do not foresee any deﬁnitive counter-
measure to these attacks that does not require replacing
the entire infrastructure. However, NXP is currently
developing a backwards compatible successor to the
Mifare Classic, the Mifare Plus. We are collaborating
with NXP, providing feedback to help them improving
the security of their new prototypes, given the limita-
tions of the backwards compatibility mode.
Acknowledgments
We are grateful to our faculty’s computer department
(C&CZ) for providing us with computing power and
to Ben Polman in particular for his assistance.
References
[Bih97]
[CNO08]
Eli Biham. A fast new DES implementation
in software. In Fast Software Encryption (FSE
’97), volume 1267 of Lecture Notes in Com-
puter Science, pages 260–272, 1997.
Nicolas T. Courtois, Karsten Nohl, and Sean
O’Neil.
Algebraic attacks on the Crypto-
1 stream cipher in Mifare Classic and Oys-
ter Cards. Cryptology ePrint Archive, Report
2008/166, 2008.
[GKM+08] Flavio D. Garcia, Gerhard de Koning Gans,
Ruben Muijrers, Peter van Rossum, Roel Ver-
dult, Ronny Wichers Schreur, and Bart Jacobs.
Dismantling MIFARE Classic. In Sushil Jajodia
and Javier Lopez, editors, European Symposium
on Research in Computer Security (ESORICS
’08), volume 5283 of Lecture Notes in Com-
puter Science, pages 97–114. Springer, 2008.
[ISO01]
Identiﬁcation cards — contactless integrated cir-
cuit cards — proximity cards (ISO/IEC 14443),
2001.
[KHG08] Gerhard de Koning Gans, Jaap-Henk Hoepman,
and Flavio D. Garcia. A practical attack on
the MIFARE Classic.
In Gilles Grimaud and
Francois-Xavier Standaert, editors, Smart Card
Research and Advanced Application (CARDIS
’08), volume 5189 of Lecture Notes in Com-
puter Science, pages 267–282. Springer, 2008.
[KPP+06] Sandeep Kumar, Christof Paar, Jan Pelzl, Gerd
Pfeiffer, and Manfred Schimmler. Breaking ci-
phers with COPACOBANA - a cost-optimized
parallel code breaker. In Cryptographic Hard-
ware and Embedded Systems (CHES ’06), vol-
ume 4249 of Lecture Notes in Computer Sci-
ence, pages 101–118. Springer, 2006.
[Kra01]
Hugo Krawczyk. The order of encryption and
authentication for protecting communications
(or: How secure is SSL?). In Advances in Cryp-
tology (CRYPTO ’01), pages 310–331. Springer,
2001.
[MAD07] Mifare
http://www.nxp.com/acrobat download/other/
identiﬁcation/M001830.pdf, May 2007.
application
directory.
[MFS08] MF1ICS50
functional
speciﬁcation.
http://www.nxp.com/acrobat/other/identiﬁcation/
M001053 MF1ICS50 rev5 3.pdf,
January
2008.
[NESP08] Karsten Nohl, David Evans, Starbug, and Hen-
ryk Pl¨otz. Reverse-engineering a cryptographic
RFID tag.
In USENIX Security 2008, pages
185–193, 2008.
[Noh08]
[NP07]
Cryptanalysis of Crypto-
http://www.cs.virginia.edu/∼kn5f/Mifare.
Karsten Nohl.
1.
Cryptanalysis.htm, 2008.
Karsten Nohl and Henryk Pl¨otz. Mifare, little
security despite obscurity. Presentation at Chaos
Computer Congress, 2007.
13