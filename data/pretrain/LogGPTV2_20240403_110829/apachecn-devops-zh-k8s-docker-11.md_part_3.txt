检查`rego/limitregistries.rego`时，`parameter-opa-policy`和`simple-opa-policy`中代码的主要区别归结为`invalidRegistry`规则:
```
invalidRegistry {
  ok_images = [image | startswith(input_images[i],input.parameters.registries[_]) ; image = input_images[i] ]
  count(ok_images) != count(input_images)
} 
```
该规则第一行的目标是使用理解来确定哪些映像来自批准的注册管理机构。理解提供了一种基于某种逻辑构建集合、数组和对象的方法。在这种情况下，我们只想将映像添加到`ok_images`数组中，该数组从`input.parameters.registries`中任何允许的注册表开始。
阅读理解，从括号的类型开始。我们的以方括号开始，所以结果将是一个数组。也可以生成对象和集合。开括号和管道字符(`|`)之间的单词称为 head，如果满足正确的条件，这个变量将被添加到我们的数组中。管道字符右侧的所有内容(`|`)都是一组规则，用于确定`image`应该是什么，以及它是否应该有值。如果规则中的任何语句解析为 undefined 或 false，则针对该迭代退出执行。
我们理解的第一条规则是大部分工作在哪里完成。`startswith`功能用于确定我们的每个映像是否以正确的注册表名称开头。我们不是将两个字符串传递给函数，而是传递数组。第一个数组有一个我们还没有声明的变量，`i`，另一个使用下划线(`_`)来表示索引的位置。减压阀将`i`解释为“对数组中的每个值执行此操作，递增 1，并在理解过程中引用它。”下划线在减压阀是“对所有价值观都这样做”的简写由于我们指定了两个数组，这两个数组的每个组合都将被用作`startswith`函数的输入。这意味着如果有两个容器和三个潜在的预先批准的注册表，那么`startswith`将被调用六次。当任意组合从`startswith`返回**真**时，执行下一个规则。这会将`image`变量设置为带有索引`i`的`input_image`，这意味着映像被添加到`ok_images`。Java 中的相同代码看起来如下所示:
```
ArrayList okImages = new ArrayList();
for (int i=0;i<inputImages.length;i++) {
  for (int j=0;j<registries.length;j++) {
    if (inputImages[i].startsWith(registries[j])) {
      okImages.add(inputImages[i]);
    }
  }
}
```
一行减压阀删除了七行大部分是样板代码。
规则的第二行将`ok_images`数组中的条目数量与已知容器映像的数量进行比较。如果它们相等，我们知道每个容器都包含一个有效的映像。
随着我们更新了支持多个注册中心的减压阀规则，下一步是部署新的策略模板(如果您还没有这样做，请删除旧的`k8sallowedregistries` `ConstraintTemplate`和`restrict-openunison-registries` `K8sAllowedRegistries`)。以下是我们最新的`ConstraintTemplate`:
```
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedregistries
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRegistries
        listKind: K8sAllowedRegistriesList
        plural: k8sallowedregistries
        singular: k8sallowedregistries
      validation:
        openAPIV3Schema:
 properties:
 registries:
 type: array
 items: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedregistries
        .
        .
        .
```
除了包括我们的新规则在内的之外，突出显示的部分显示我们向模板添加了一个模式。这将允许使用特定参数重用模板。该模式进入将要创建的`CustomResourceDefenition`中，并用于验证我们将要创建的`K8sAllowedRegistries`对象的输入，以便实现我们的预授权注册表列表。
最后，让我们为`openunison`命名空间创建策略。由于在此命名空间中运行的唯一容器应该来自抖音安全的`dockerhub.io`注册中心，我们将使用以下策略将所有 Pods 限制在`docker.io/tremolosecurity/`:
```
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sAllowedRegistries
metadata:
  name: restrict-openunison-registries
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds:
        - StatefulSet
        - Deployment
      - apiGroups: ["batch"]
        kinds:
        - CronJob
    namespaces: ["openunison"]
  parameters:
    registries: ["docker.io/tremolosecurity/"]
```
与我们以前的版本不同，此策略指定了哪些注册表是有效的，而不是将策略数据直接嵌入到我们的减压阀中。有了我们的策略，让我们尝试运行`openunison`命名空间中的`busybox`容器来获得一个 shell:
![Figure 11.6 – Failed busybox shell ](img/Fig_11.6_B15514.jpg)
图 11.6–故障 busybox 外壳
使用这个通用策略模板，我们可以限制名称空间能够从哪些注册中心获取。例如，在多租户环境中，您可能希望将所有`Pods`限制在所有者自己的注册表中。如果一个命名空间被用于商业产品，您可以规定只有该供应商的容器可以在其中运行。在转向其他用例之前，了解如何调试代码和处理减压阀的怪癖是很重要的。
## 调试减压阀
调试减压阀可能具有挑战性。与 Java 或 Go 等更通用的编程语言不同，没有方法可以在调试器中单步执行代码。以我们刚刚编写的用于检查注册表的通用策略为例。所有的工作都在一行代码中完成。穿过它不会有什么好处。
为了使减压阀更容易调试，当在命令行上设置详细输出时，OPA 项目提供了所有失败测试的跟踪。这是使用 OPA 内置测试工具的另一个很好的理由。
为了更好地利用这个痕迹，减压阀有一个名为`trace`的接受字符串的函数。将该功能与`sprintf`相结合，可以让您更容易地跟踪您的代码没有按预期工作的地方。在`chapter11/paramter-opa-policy-fail/rego`目录中，有一个测试将会失败。还有一个添加了多个跟踪选项的`invalidRegistry`规则:
```
invalidRegistry {
  trace(sprintf("input_images : %v",[input_images]))
  ok_images = [image |   
    trace(sprintf("image %v",[input_images[j]]))
    startswith(input_images[j],input.parameters.registries[_]) ; 
    image = input_images[j] 
  ]
  trace(sprintf("ok_images %v",[ok_images]))
  trace(sprintf("ok_images size %v / input_images size %v",[count(ok_images),count(input_images)]))
  count(ok_images) != count(input_images)
}
```
当测试运行时，OPA 将输出每个比较和代码路径的详细跟踪。无论在哪里遇到`trace`函数，都会在跟踪中添加一个“注释”。这相当于在代码中添加打印语句进行调试。OPA 跟踪的输出非常冗长，而且包含的文本太多，无法打印。在这个目录中运行`opa test.` `-v`会给你完整的跟踪，你可以用它来调试你的代码。
## 使用现有策略
在进入 OPA 和 gateway 的更高级用例之前，理解 OPA 如何构建和使用的含义是很重要的。如果您检查我们在上一节中处理过的代码，您可能会注意到我们没有检查`initContainers`。我们只寻找主要容器。`initContainers`是特殊的容器，在`Pod`中列出的容器预计结束之前运行。它们通常用于准备卷装载的文件系统，以及在`Pod`的容器运行之前应该执行的其他“初始”任务。如果一个糟糕的演员试图推出一个带 T5 的 T4，吸引一个比特币矿工(或者更糟)，我们的策略不会阻止它。
在策略的设计和实现中非常详细是很重要的。在构建策略时，确保不遗漏任何内容的方法之一是使用已经存在并经过测试的策略。GateWay 项目维护了几个预先测试的策略库，以及如何在 GitHub repo 中使用它们，网址为 https://GitHub . com/open-policy-agent/GateWay/tree/master/library。在尝试构建您自己的策略之前，请先看看那里是否已经存在一个策略。
本节概述了减压阀及其在策略评估中的作用。它没有涵盖所有内容，但是应该为您处理减压阀的文档提供一个很好的参考点。接下来，我们将学习如何构建依赖于请求之外的数据的策略，例如集群中的其他对象。
# 实现内存限制
到目前为止，在本章中，我们已经构建了独立的策略。当检查映像是否来自预先授权的注册表时，我们需要的唯一数据来自策略和容器。这通常不足以做出策略决定。在本节中，我们将致力于构建一个依赖于集群中其他对象来做出策略决策的策略。
在深入研究实现之前，让我们来谈谈用例。提交给 API 服务器的任何`Pod`上至少包含内存需求是个好主意。但是，有些名称空间并没有多大意义。例如，`kube-system`命名空间中的许多容器没有 CPU 和内存资源请求。
我们有多种方法可以解决这个问题。一种方法是部署一个约束模板，并将其应用于我们想要强制执行内存资源请求的每个命名空间。这可能会导致重复的对象，或者要求我们显式更新策略以将它们应用于特定的名称空间。另一种方法是在命名空间中添加一个标签，让 OPA 知道它需要所有`Pod`对象来拥有内存资源请求。由于 Kubernetes 已经有了用于管理内存的`ResourceQuota`对象，我们还可以确定一个名称空间是否有`ResourceQuota`，如果有，那么我们就知道应该有内存请求。
对于我们的下一个示例，我们将编写一个策略，该策略规定在具有`ResourceQuota`的命名空间中创建的任何`Pod`必须具有内存资源请求。策略本身应该很简单。伪代码看起来像这样:
```
if (hasResourceQuota(input.review.object.metdata.namespace) &&  containers.resource.requests.memory == null) {
  generate error;
}
```
这里最难的是理解名称空间是否有`ResourceQuota`。Kubernetes 有一个 API，您可以查询它，但这意味着要么在策略中嵌入一个机密，这样它就可以与 API 服务器对话，要么允许匿名访问。这些选项都不是好主意。查询应用编程接口服务器的另一个问题是很难自动化测试，因为您现在依赖于无论您在哪里运行测试都可用的应用编程接口服务器。
我们之前讨论过，OPA 可以在自己的数据库中复制来自 API 服务器的数据。网守使用这一功能来创建可以测试的对象的“缓存”。一旦这个缓存被填充，我们就可以在本地复制它，为我们的策略测试提供测试数据。
## 启用网守缓存
通过在`gatekeeper-system`命名空间中创建一个`Config`对象来启用网守缓存。将此配置添加到您的集群:
```
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: "gatekeeper-system"
spec:
  sync:
    syncOnly:
      - group: ""
        version: "v1"
        kind: "Namespace"
      - group: ""
        version: "v1"
        kind: "ResourceQuota"
```
这将开始复制网守内部 OPA 数据库中的`Namespace`和`ResourceQuota`对象。让我们创建一个有`ResourceQuota`的`Namespace`和一个没有`ResourceQuota`的:
```
apiVersion: v1
kind: Namespace