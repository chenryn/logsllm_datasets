//doi.org/10.1109/90.731182
[30] Pedro Peris-Lopez, Julio C Hernandez-Castro, Juan ME Tapiador, Esther Palomar,
and Jan CA van der Lubbe. 2010. Cryptographic puzzles and distance-bounding
protocols: Practical tools for RFID security. In 2010 IEEE International Conference
on RFID (IEEE RFID 2010). IEEE, 45–52.
[31] NXP Semiconductors. 2011. Hitag-AES/Pro Product Data Sheet. https://www.
nxp.com/docs/en/user-guide/UM10277.pdf
[32] Yoshiyasu Takefuji. 2018. Connected vehicle security vulnerabilities [commen-
tary]. IEEE Technology and Society Magazine 37, 1 (2018), 15–18.
[33] Andrea Tassi, Malcolm Egan, Robert J. Piechocki, and Andrew Nix. 2017. Model-
ing and Design of Millimeter-Wave Networks for Highway Vehicular Commu-
nication. IEEE Transactions on Vehicular Technology 66, 12 (2017), 10676–10691.
https://doi.org/10.1109/TVT.2017.2734684
[34] Roel Verdult and Flavio D Garcia. 2015. Cryptanalysis of the Megamos Crypto
automotive immobilizer. USENIX; login 40, 6 (2015), 17–22.
[35] Roel Verdult, Flavio D Garcia, and Josep Balasch. 2012. Gone in 360 seconds: Hi-
jacking with Hitag2. In Presented as part of the 21st {USENIX} Security Symposium
({USENIX} Security 12). 237–252.
[36] Roel Verdult, Wei Meng, Flavio D Garcia, Dan Doozan, Baris Ege, William Enck,
Alex C Snoeren, Giovanni Vigna, Tao Xie, and Nick Feamster. 2013. Dismantling
megamos crypto: Wirelessly lockpicking a vehicle immobilizer. In 22nd USENIX
Security Symposium (USENIX Security 13). 687–702.
[37] Juan Wang, Karim Lounis, and Mohammad Zulkernine. 2019. CSKES: A context-
based secure keyless entry system. In 2019 IEEE 43rd Annual Computer Software
and Applications Conference (COMPSAC), Vol. 1. IEEE, 817–822.
[38] Pang-Chieh Wang, Ting-Wei Hou, Jung-Hsuan Wu, and Bo-Chiuan Chen. 2007.
A security module for car appliances. International Journal of World Academy Of
Science, Engineering and Technology 26, 155-160 (2007), 256.
[39] Jung-Hsuan Wu, Chien-Chuan Kung, Jhan-Hao Rao, Pang-Chieh Wang, Cheng-
Liang Lin, and Ting-Wei Hou. 2008. Design of an in-vehicle anti-theft component.
In 2008 Eighth International Conference on Intelligent Systems Design and Applica-
tions, Vol. 1. IEEE, 566–569.
APPENDIX
A Cryptographic commands of FCC
The description of the above (GetRV), (CompEPuK), (VerP/ValT),
and (VerP/ValT) commands are listed in Table 2.
B Implementation of FCC commands in PCC
The implementation of cryptographic commands of FCC in its real-
ization PCC is provided in Table 3.
450′
, Q
′
, Q
Crypto-Chain: A Relay Resilience Framework for Smart Vehicles
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 2: Cryptographic Commands of the ideal crypto-chain functionality FCC
Cryptographic Commands
′
′
′
, Q
, sid
, l
, sid
, l
, sid
, l
′
′),(r
′, and public keys Q and Q
′)]. This command is provided to both (ID, sid, l) and (ID
′
, r))) using SHA-256 hash algorithm H(.) and PRF F, where d.Q
′. Upon receiving this request, FCC first verifies that (r , Q) and (r
′). The user
Generate a fresh ephemeral random value [(GetRV)]. This command is provided to both (ID, sid, l) and (ID
(ID, sid, l) can request FCC to generate an ephemeral random value. Upon receiving this request, FCC forwards the request to the adversary
via a restricting message. The adversary is supposed to provide an ephemeral random value r ∈ {1, ..., nr} at a timestamp, say t, where nr
is a large randomly selected integer. FCC checks that r is fresh to prevent ephemeral random value collision. If r is not fresh, i.e., r already
exists in the database, FCC asks the adversary for another r until the check succeeds. Then, FCC adds (ID, r , t) to the database and returns
(RV, r , t) to the user.
Generate a fresh ephemeral private and compute its corresponding ephemeral public key [(CompEPuK, r , t)]. This command is
′). The user (ID, sid, l) can request FCC to compute an uncorrupted ephemeral public key Q
provided to both (ID, sid, l) and (ID
using an ephemeral random value r and a timestamp t. Upon receiving this request, FCC verifies that (ID, r , t) exists in the database and
forwards this request to the adversary via a restricting message if this verification succeeds. The adversary is supposed to provide a fresh
ephemeral private key d ∈ {1, ..., n}. FCC ensures that d is fresh to prevent a private key collision. If d is fresh, i.e., d does not exist in the
database, FCC stores a pointer ptri that points to d for the user, uses the generated domain parameters (p, a, b, G, n, h) to compute a public
key Q = d.G, adds (r , Q) and d to the database, and returns (EPuK, ptri , Q) to the user. Otherwise, if d is not fresh, FCC asks the adversary
again for a new d until the check succeeds thereby preventing private key guessing.
′). The user
Generate a fresh preshared key [(GenPSK, ptri , r , Q, r
(ID, sid, l) can request FCC to generate a new preshared key from the pointer ptri pointing to the private key d, ephemeral random values
′) are recorded in the database
r and r
and then returns (PSK, restricted) if any of these verifications fail. Then, FCC checks whether a preshared key k has been generated
′), where Q = d.G and returns a pointer ptrii to k if the verification succeeds. Otherwise, FCC generates a new preshared
by (r , Q, r
′)) to provide a new
key as follows. FCC forwards the request to the adversary (via a restricting message (ProvidePSK, uncorrupted, d, Q
′ represents an ECDH key. FCC ensures
preshared key k = Fη(H((d.Q
′) to the database, sets the pointer ptrii to k, and returns
that k is fresh and has been generated as k = Fη(H((d.Q
(PSKPointer, ptrii) to the user.
′). The
Shared secret session key derivation [(DeriveSKey, ptrii , r , r
user (ID, sid, l) can request FCC to derive a shared secret session key ki using k to which the pointer ptrii points to and ephemeral random
′ exist in the database and returns (SKeyPointer, restricted)
values r and r
′, and outputs
to the user if any of the checks fails. FCC derives ki as follows: FCC checks whether ki has been derived using ptrii, r, and r
the pointer ptriii pointing to ki. Otherwise, FCC forwards this request to the adversary via a restricting message to compute ki. The
′)). Then,
adversary uses H(.) and a PRF F
FCC adds ki to the database, stores a new pointer ptriv pointing to ki for the owners of k and returns (SKeyPointer, ptriv) to the user.
′)]. This command is provided to only
Compute a cryptographic proof and a cryptographic timestamp [(CompP&E, ptriv , r , r
(ID, sid, l). The user (ID, sid, l) can request FCC to compute a cryptographic proof proo f and a cryptographic timestamp ctimestamp
′, and the session key ki to which the pointer ptriv points. Upon receiving this request, FCC
using ephemeral random values r and r
′ exist in the database. If these checks succeed, it provides proof by encrypting
checks whether ptriv belongs to the user and r and r
′) under an AES 128-bit encryption algorithm Enc(.) and 256-bit MAC algorithm MAC(.) provided by the adversary.
and MACing (ki , r , r
′) and the cryptographic
FCC computes the cryptographic proof as proo f = MACki(x) at a timestamp t3, where x = Encki(ki , r , r
′) for the user. Then, FCC stores (proo f , x, ctimestamp, t3) for ki in the database, and returns
timestamp as ctimestamp = t3.H(ki , r , r
(P&E, proo f , x, ctimestamp, t3) to the user.
Verify a cryptographic proof and validate a cryptographic timestamp [(VerP/ValT, ptriv , proo f , x, ctimestamp, t3)]. This command
′) can request FCC to verify a cryptographic proof proo f and validate a cryptographic
is provided to only (ID
timestamp ctimestamp using ki to which ptriv points, ciphertext x, and a timestamp t3. Upon receiving this request, FCC first verifies that
ptriv belongs to the user, and then uses a MAC verification algorithm V MAC(.) and decryption of the AES 128-bit encryption algorithm
Dec(.) provided by the adversary to verify proo f . FCC verifies proo f as follows: i) V MACki(proo f , x) = 1? at a timestamp t6; and ii)
′) = ctimestamp; and ii)
(ki , r , r
there exists exactly ctimestamp such that ctimestamp is stored for ki. If the validations succeed, FCC returns (Validation, t6) to the user.
Otherwise, FCC returns restricted to the user.
′) = Decki(x). If the verifications succeed, FCC validates ctimestamp as follows; i) computing t3.H(ki , r , r
′. Upon receiving this request, FCC first checks whether r and r
′)). FCC ensures that ki is fresh and it is derived as ki = F
′)]. This command is provided to both (ID, sid, l) and (ID
′
′
′),(r
, r))), adds k and (r , r
′ to provide ki = F
′). The user (ID
′
′
η(H(k.r .r
′
η(H(k.r .r
, sid
, l
, sid
, l
′
′
, sid
, l
′
′
′
′
′
451ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sani, et al.
Table 3: Implementation of FCC commands in its realization PCC
Implementation of Cryptographic Commands
′
, Q
′
Generate a fresh ephemeral random value [(GetRV)]. PCC selects r ← {1, ..., nr} at timestamp t and outputs (r , t) to the user.
Generate a fresh ephemeral private and compute its corresponding ephemeral public key [(CompEPuK, r , t)]. PCC checks
whether ID, r, and t are valid, selects d ← {1, ..., n}, creates a pointer ptri to d, uses the domain parameters (p, a, b, G, n, h) to compute
Q = d.G, and outputs (ptri , Q) to the user if the checks succeed.
Generate a fresh preshared key [(GenPSK, ptri , r , Q, r
, Q
(PSKPointer, restricted) to the user if any of these checks fails. Otherwise, PCC computes k = Fη(H((d.Q
private key of the user to which the pointer ptr points to, creates a new pointer ptrii to k, and returns ptrii to the user.
Shared secret session key derivation [(DeriveSKey, ptrii , r , r
creates a pointer ptriv to ki, and returns ptriv to the user if the checks succeed.
Compute a cryptographic proof and a cryptographic timestamp [(CompP&E, ptriv , r , r
for ID and r and r
returns (proo f , x, ctimestamp, t3) to the user if the checks succeed.
Verify a cryptographic proof and validate a cryptographic timestamp [(VerP/ValT, ptriv , proo f , x, ctimestamp, t3)]. PCC verifies
′) = Decki(x). If the verifications succeed, PCC
whether ptriv is recorded for ID and V MAC(proo f , x) = 1 (at a timestamp t6) and (ki , r , r
validates that t3.H(ki , r , r
′), proo f = MACki(x) at a timestamp t3, and ctimestamp = t3.H(k, r , r
′) = ctimestamp and then returns t6 to the user if the validation succeeds.
′)]. PCC checks whether ptriv is recorded
′) and then
′)]. PCC checks whether (r , Q) and (r
′) are valid and returns
′),(r
, r))), where d is the
′
′ are valid, computes x = Encki(ki , r , r
′)]. PCC checks whether r and r
′ are valid, computes ki = F
′
η(H(k.r .r
′)),
C Proof Sketch of Theorem 3
The simulator S in this proof provides k for an uncorrupted pre-
′ for corrupted one. This proof
shared key from ECDH key and k
consists of several hybrid systems where parts of the realization
are replaced with their ideal versions and the probability that an
environment can distinguish these replacements is negligible, and
then every preceding operation relies on its succeeding operation
in the hybrid systems, which are as follows: In the first step, we de-
fine a hybrid system P1
CC where all real asymmetric operations and
ephemeral random values including timestamps are replaced with
their ideal versions and further rely on one another. The security of
this step can be reduced to the security of asymmetric operations.
In the second step, we define a hybrid system P2
CC where handling
of private keys is replaced with the ideal version. P2
CC relies on P1
CC
and prevents the guessing and collisions of private keys such that
any distinguishing environment on P2
CC is reduced to the DDH
assumption. In the third step, we define another hybrid system
P3
CC where real preshared key generation is replaced with an ideal
version. P3
CC does not prevent the guessing
or collisions of preshared keys, which are provided by the simulator
as presented above. In step four, we define a hybrid argument P4
CC
where real symmetric encryption and shared secret session key
derivation operations are replaced with their ideal versions and
guessing and collisions of keys are prevented. Besides, P4
CC relies
on P3
CC. The security of this step can be reduced to the security
of encryption and key derivation schemes. In step five, we replace
real MACs with their ideal versions using a hybrid system P5
CC.
While P5
CC, the security of this step can be reduced
to the security of the MAC scheme. We combine all the five steps
above and deduce that the simulator is responsive. This concludes
the proof sketch of this theorem.
CC relies on P4
CC relies on P2
CC and P3
D Theorem and Proof of MKD
The following theorem states that the MKD is a secure univer-
sally composable relay resilience mutual authentication and key
derivation protocol.
Theorem 4. Let MA(MK D) and MB(MK D) be the machines modelling
the MKD as described above, let c be a sequence of cryptographic op-
erations of PCC and FCC such that every operation ci in c always rely
on the preceding operation ci−1, and let FMK D be the ideal function-
ality for mutual authentication and key derivation with parameter
skey = authenc − key. Then, the following holds true:
MA(MK D)|MB(MK D)|FCC[c] ≤R FMK D
Proof: We say that a user ID is corrupted if its preshared key
is corrupted. An instance (ID, sid, l) is corrupted if it outputs
corrupted when asked for its corruption status by the environ-
ment. An instance is explicitly corrupted if its control is taken
over by the adversary. We define a responsive simulator S and
show that E|MA(MK D)|MB(MK D)|FCC[c] ≡ E|S|FMK D for all en-
vironments E ∈ EnvR(MA(MK D)|MB(MK D)|FCC[c]). Note that S
fulfils the runtime conditions and immediately responds to re-
stricting messages as long as the environment E does the same
with overwhelming probability. S internally simulates the protocol
MA(MK D)|MB(MK D)|FCC[c], uses FMK D to keep the corruption
statuses of user instances, synchronizes the simulated instances
of MA(MK D)/MB(MK D). To model the protocol, S needs to first
initialize FCC by sending a message to FCC. In response, S receives
domain parameters (p, a, b, G, n, h) and cryptographic operations