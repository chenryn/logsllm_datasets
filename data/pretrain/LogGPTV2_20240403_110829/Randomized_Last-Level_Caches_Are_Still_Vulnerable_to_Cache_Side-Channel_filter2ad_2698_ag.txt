M
S
+
M
S
+
M
S
+
M
S
CEASER
Skew-2
Skew-4
Skew-8
Skew-16
Fig. 21. Normalized MPKI of SPEC CPU 2006 benchmark cases using
the static CEASE as the baseline. EV: remapping by evictions; DT: attack
detection; MS: multi-step relocation.
Fig. 21 shows the normalized MPKI of all types of random-
ized caches using the static CEASE as the baseline. In general,
skewed caches with a moderate number of partitions indeed
reduce MPKI but such reduction is marginal (less than 0.5%).
When more than eight partitions are used, MPKI begins to rise
and hurt performance. This is why we believe randomized set-
associate caches (CEASER) should be used if they are safely
strengthened. Utilizing the multi-step relocation (MS) reduces
MPKI roughly by 0.05% and the skewed cache with only
two partitions beneﬁts the most (0.08%). This complies with
our estimation in Fig. 12. For CEASER LLCs, periodically
remapping by evictions (EV) introduces 0.08% extra MPKI
and enabling attack detection (DT) adds another 0.11%, but
adopting the multi-step relocation (MS) would reduce the
overhead back to a trivial 0.007%. This result shows that,
when all the newly proposed ideas are applied to CEASER
(DT+EV+MS),
the randomized set-associate cache is safe
enough without signiﬁcant performance loss.
B. Logic and Memory Overhead
The memory overhead of randomized caches has been
analyzed in [16], [17]; therefore, we estimate only the extra
cost using the new ideas. We use a single core Rocket-
Chip (lowRISC ver. 0.4) [52] as the base. Using the same
conﬁguration as in Spike,
the LLC (L2 cache) consumes
around 22% logic and 99% SRAM of the processor (without
outer AXI buses and devices). To support remaps, a remap
tracker is added to the LLC which originally has two acquire
(access) trackers and one release (writeback) tracker. The extra
area overhead would be round 7.6% logic of the processor
(34% logic of the LLC). This overhead is relatively high
but unavoidable. Remapping by evictions rather than accesses
introduces no area overhead. The overhead of supporting
multi-step relocation is also marginal because the only changes
required are adding a port to the remap tracker and modi-
fying its state machine. To estimate the overhead of attack
detection, we made a prototype of the detector in hardware.
The hardware detector ﬁnishes each round of detection in 2K
cycles (less than the sample period of 4K LLC accesses). By
shrinking the precision of the intermediate results and reducing
multiplier/divider to adder/shifter, the detection error is within
5% compared with the software implementation while the area
overhead (after place and route) is around 0.8% logic and 0.4%
SRAM of the processor (3.5% logic and 0.4% SRAM of the
LLC), both of which are marginal.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
966
VIII. DISCUSSION
New cache designs: Since the introduction of randomized
skewed caches, two new designs [19], [21] have been proposed
and both of them promote the use of set-associative caches.
The two level dynamic randomization (TLDR) [19] tries to
strengthen CEASER by another layer of randomization using
an indirection table (iTable). An address is ﬁrst randomly
mapped to an iTable entry and then the entry is mapped to a
random cache set. It is claimed that the extra iTable provides
higher level of randomness than randomized skewed caches
and gradually remapping iTable entries reduces the remap-
related performance loss. PhantomCache [21] proposes to
place an incoming cache block in one of the multiple randomly
selected cache sets rather than partitions as in skewed caches.
This increases the level of randomness and allows the use
of LRU for the whole cache set. Both designs can safely
defeat the GE attack but their effectiveness against CT and
PPT attacks needs further investigation. Finally Doblas [20]
extends the cache randomization from LLC to the L1 caches
by using simple randomization functions.
Performance evaluation: The performance results of all ex-
isting cache randomization designs come from various Gem5
simulations [16]–[18], [21], [42], whose slowness limited the
total number of instructions that can be simulated in reasonable
time, which further constrains the coverage on representative
workloads [60], [61]. Our choice of using the fast (event-
driven and timeless) Spike simulation allows us to boost
the number of simulated instructions by 100 ∼ 400 times,
which signiﬁcantly increases the coverage on representative
workloads but limits the performance evaluation in miss rate
only, leaving the overhead on CPU execution time unstated.
We believe this is a reasonable trade-off. After the encryption
algorithm used in CEASER has been found problematic [34],
there is no consensus on which encryption algorithm should
be adopted but
impact on the
extra delays introduced by cache randomization. It is still
an open challenge to choose a strong and fast encryption
algorithm for randomized caches. As a result, the estimation on
CPU execution time is already inaccurate for any comparison
between designs even if the slowest Gem5 OoO model [42] is
used. Cache miss rate is the only frequently used and unbiased
metric available.
this choice has signiﬁcant
Attack detection: Run-time detection of cache side-channel
attacks using the existing performance counters (pfc) [58],
[62]–[65] has shown to be effective to detect persistent at-
tacks by software. Some of them adopt machine learning to
increase the detection accuracy [62], [64] but they are always
constrained by the limited information available from pfc.
The concentration of cache accesses on the target cache sets
during the exploitation phase has long been discovered [22],
[58], [66]. Recent hardware detectors with set level granularity
begins to utilize this pattern [67], [68]. Most of them exploit
the cyclic pattern between an attacker and her victim [65],
[67], [68]. To the best of our knowledge, we are the ﬁrst to
exploit the unique set distribution of cache evictions during
the search for eviction sets in randomized caches; however,
New attacks: Purnal et al.
whether an attacker can evade detection by slowing down and
hiding behind the background noise is still an open question.
improve the original PPT
attack [17] by introducing the prune phase and correctly
points out it is possible to use partially congruent eviction
set to launch covert channel attacks on ScatterCache [30].
Our simulation and analysis on PPT are based on Purnal’s
work but with our own optimized prune method as it is not
clearly described in [30]. Our experiments show that PPT
attacks would fail on randomized skewed caches because
the accumulated number of LLC evictions always surpasses
the proposed remap period. Very recently, Purnal et al. have
further improved PPT by optimizing the pruning and proﬁling
method [69]. We need to evaluate these new optimiations and
decide whether attack detection is also needed for randomized
skewed caches. In another concurrent work [70], Bourgeat et
al. analyze the end-to-end security impact of utilizing partially
congruent eviction sets. It is found that attackers may decide
to use eviction sets with lower eviction rate in return for better
chance of information leakage and reducing the remap period
can signifcantly increase the cost of attacks. These ﬁndings
complement well with this paper.
IX. CONCLUSION
We have newly discovered several problems with the hy-
potheses and implementations in the latest randomized skewed
caches: The possibility of using cache ﬂush instructions in
conﬂict-based attacks has been overlooked. The concept of
minimal eviction set no longer applies to randomized skewed
caches. Attackers do not have to use eviction sets with 99%
eviction rate. Measuring the remap period by LLC accesses
is ﬂawed. As a result, existing randomized skewed caches are
still vulnerable to conﬂict-based cache side-channel attacks.
We proposed several defense ideas to ﬁx the newly discov-
ered problems: Measure the remap period by LLC evictions
rather than accesses while further reduce the period. Adopt
ZCache-like multi-step relocation to minimize the number
of cache blocks evicted during the remap process. Our ex-
periments show that all the newly discovered vulnerabilities
are ﬁxed within the current performance budget. We also
claim that randomized set-associative cache can be sufﬁciently
strengthened with reasonable overhead using a simple attack
detection mechanism. Compared with randomized skewed
caches, randomized set-associative caches are better candidates
for future commercial processors.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers
for their valuable comments. This work was supported by the
National Natural Science Foundation of China under grant
No. 61802402 and No. 61802397, the CAS Pioneer Hundred
Talents Program, and internal grants from the Institute of
Information Engineering, CAS. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this paper are
those of the authors and do not necessarily reﬂect the views
of the funding parties.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
967
REFERENCES
[1] C. Percival, “Cache missing for fun and proﬁt,” 2005.
[2] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and counter-
measures: The case of AES,” in Topics in Cryptology – CT-RSA 2006.
Springer, 2006, pp. 1–20.
[3] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache side-
channel attacks are practical,” in Proceedings of the IEEE Symposium
on Security and Privacy (S&P).
IEEE, May 2015.
[4] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A shared cache attack
that works across cores and deﬁes VM sandboxing – and its application
to AES,” in Proceedings of the Symposium on Security and Privacy
(S&P).
IEEE, May 2015, pp. 591–604.
[5] D. Genkin, L. Pachmanov, E. Tromer, and Y. Yarom, “Drive-by key-
extraction cache attacks from portable code,” in Proceedings of the In-
ternational Conference on Applied Cryptography and Network Security
(ACNS). Springer, 2018, pp. 83–102.
[6] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A remote
software-induced fault attack in JavaScript,” in Proceedings of
the
International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA). Springer International Publishing,
2016, pp. 300–321.
[7] M. H¨ahnel, W. Cui, and M. Peinado, “High-resolution side channels
for untrusted operating systems,” in Proceedings of the USENIX Annual
Technical Conference (UTC). USENIX Association, 2017, pp. 299–
312.
[8] D. Page, “Partitioned cache architecture as a side-channel defence
mechanism,” IACR Cryptology ePrint Archive, vol. 2005, 2005,
http://eprint.iacr.org/2005/280.
[9] T. Kim, M. Peinado, and G. Mainar-Ruiz, “STEALTHMEM: System-
level protection against cache-based side channel attacks in the cloud,”
in Proceedings of the USENIX Security Symposium (Security). USENIX
Association, 2012, pp. 189–204.
[10] F. Liu, Q. Ge, Y. Yarom, F. McKeen, C. V. Rozas, G. Heiser, and R. B.
Lee, “CATalyst: Defeating last-level cache side channel attacks in cloud
computing,” in Proceedings of the International Symposium on High
Performance Computer Architecture (HPCA).
IEEE, 2016, pp. 406–
418.
[11] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard, “Prefetch side-
channel attacks: Bypassing SMAP and kernel ASLR,” in Proceedings
of the ACM SIGSAC Conference on Computer and Communications
Security (CCS). ACM, 2016, pp. 368–379.
[12] N. El-Sayed, A. Mukkara, P. Tsai, H. Kasture, X. Ma, and D. S´anchez,
“KPart: A hybrid cache partitioning-sharing technique for commodity
multicores,” in Proceedings of the IEEE International Symposium on
High Performance Computer Architecture (HPCA).
IEEE, February
2018, pp. 104–117.
[13] Z. Wang and R. B. Lee, “New cache designs for thwarting software
cache-based side channel attacks,” in Proceedings of the International
Symposium on Computer Architecture (ISCA). ACM, June 2007, pp.
494–505.
[14] ——, “A novel cache architecture with enhanced performance and secu-
rity,” in Proceedings of the Annual IEEE/ACM International Symposium
on Microarchitecture (MICRO).
IEEE, 2008, pp. 83–93.
[15] F. Liu and R. B. Lee, “Random ﬁll cache architecture,” in Proceedings
IEEE,
of the International Symposium on Microarchitecture (Micro).
2014, pp. 203–215.
[16] M. K. Qureshi, “CEASER: Mitigating conﬂict-based cache attacks
via encrypted-address and remapping,” in Proceedings of the Annual
IEEE/ACM International Symposium on Microarchitecture (MICRO).
IEEE, 2018, pp. 775–787.
[17] ——, “New attacks and defense for encrypted-address cache,” in Pro-
the International Symposium on Computer Architecture
ceedings of
(ISCA). ACM, 2019, pp. 360–371.
[18] M. Werner, T. Unterluggauer, L. Giner, M. Schwarz, D. Gruss, and
S. Mangard, “ScatterCache: Thwarting cache attacks via cache set
randomization,” in Proceedings of the USENIX Security Symposium
(Security). USENIX Association, 2019, pp. 675–692.
[19] K. Ramkrishnan, A. Zhai, S. McCamant, and P. C. Yew, “New attacks
and defenses for randomized caches,” arXiv: abs/1909.12302, 2019,
https://arxiv.org/abs/1909.12302v1.
[20] M. Doblas, I.-V. Kostalabros, M. Moret´o, and C. Hern´andez, “Enabling
hardware randomization across the cache hierarchy in Linux-class
processor,” in Proceedings of the Workshop on Computer Architecture
Research with RISC-V (CARRV), 2020, p. 7.
[21] Q. Tan, Z. Zeng, K. Bu, and K. Ren, “PhantomCache: Obfuscating cache
conﬂicts with localized randomization,” in Proceedings of the Network
and Distributed System Security Symposium (NDSS).
Internet Society,
2020.
[22] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The
spy in the sandbox,” in Proceedings of the ACM SIGSAC Conference
on Computer and Communications Security (CCS). ACM, 2015.
[23] P. Vila, B. K¨opf, and J. Morales, “Theory and practice of ﬁnding eviction
sets,” in Proceedings of the IEEE Symposium on Security and Privacy
(S&P).
IEEE, 2019.
[24] W. Song and P. Liu, “Dynamically ﬁnding minimal eviction sets can
be quicker than you think for side-channel attacks against the LLC,”
in Proceedings of the International Symposium on Research in Attacks,
Intrusions and Defenses (RAID). USENIX Association, 2019, pp. 427–
442.
[25] D. S´anchez and C. Kozyrakis, “The ZCache: Decoupling ways and
associativity,” in Proceedings of the Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO).
IEEE, 2010, pp. 187–198.
[26] M. Cekleov and M. Dubois, “Virtual-address caches. Part 1: Problems
and solutions in uniprocessors,” IEEE Micro, vol. 17, no. 5, pp. 64–71,
1997.
[27] C. Berg, “PLRU cache domino effects,” in Proceedings of the Inter-
national Workshop on Worst-Case Execution Time Analysis (WCET).
Dagstuhl, Germany: Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik,
2006, http://drops.dagstuhl.de/opus/volltexte/2006/672.
[28] M. Yan, R. Sprabery, B. Gopireddy, C. W. Fletcher, R. H. Campbell,
and J. Torrellas, “Attack directories, not caches: Side-channel attacks
in a non-inclusive world,” in Proceedings of the IEEE Symposium on
Security and Privacy (S&P).
IEEE, May 2019, pp. 888–904.
[29] M. Yan, B. Gopireddy, T. Shull, and J. Torrellas, “Secure hierarchy-
aware cache replacement policy (SHARP): Defending against cache-
based side channel attacks,” in Proceedings of the International Sympo-
sium on Computer Architecture (ISCA). ACM, 2017, pp. 347–360.
[30] A. Purnal and I. Verbauwhede, “Advanced proﬁling for probabilistic
Prime+Probe attacks and covert channels in ScatterCache,” arXiv:
abs/1908.03383, 2019, https://arxiv.org/abs/1908.03383v1.
[31] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, you, get
off of my cloud: Exploring information leakage in third-party compute
clouds,” in Proceedings of the ACM SIGSAC Conference on Computer
and Communications Security (CCS). ACM, November 2009, pp. 199–
212.
[32] D. Cock, Q. Ge, T. C. Murray, and G. Heiser, “The last mile: An
empirical study of timing channels on seL4,” in Proceedings of the ACM
SIGSAC Conference on Computer and Communications Security (CCS).
ACM, November 2014, pp. 570–581.
[33] A. Shusterman, L. Kang, Y. Haskal, Y. Meltser, P. Mittal, Y. Oren, and
Y. Yarom, “Robust website ﬁngerprinting through the cache occupancy
channel,” in Proceedings of the USENIX Security Symposium (Security).
USENIX Association, August 2019, pp. 639–656.
[34] R. Bodduna, V. Ganesan, P. SLPSK, K. Veezhinathan, and C. Re-
beiro, “BRUTUS: Refuting the security claims of the cache timing
randomization countermeasure proposed in CEASER,” IEEE Computer
Architecture Letters, vol. 19, no. 1, pp. 9–12, January 2020.
[35] Y. Yarom and K. Falkner, “FLUSH+RELOAD: A high resolution, low
noise, L3 cache side-channel attack,” in Proceedings of the USENIX
Security Symposium (Security). USENIX Association, 2014, pp. 719–
732.
[36] Intel, “Intel R architecture instruction set extensions programming
2015,
reference,”
https://software.intel.com/sites/default/ﬁles/managed/07/b7/319433-
023.pdf.
319433-023, August
Tech.
[37] X. Zhang, Y. Xiao, and Y. Zhang, “Return-oriented ﬂush-reload side
channels on ARM and their implications for Android devices,” in
Proceedings of the ACM SIGSAC Conference on Computer and Com-
munications Security (CCS). ACM, 2016, p. 858870.
[38] J. L. Henning, “SPEC CPU2006 benchmark descriptions,” SIGARCH
Intel,
Rep.
Computer Architecture News, vol. 34, no. 4, pp. 1–17, 2006.
[39] The RISC-V Instruction Set Manual. Volume I: Unprivileged ISA Ver-
sion 20191213, Editors Andrew Waterman and Krste Asanovi´c, RISC-
V Foundation, December 2019, https://riscv.org/speciﬁcations/isa-spec-
pdf/.
[40] A. Waterman, T. Newsome, C.-M. Chao, Y. Lee, S. Beamer, and others,
“Spike RISC-V ISA simulator,” https://github.com/riscv/riscv-isa-sim.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
968
[41] T. Ta, L. Cheng, and C. Batten, “Simulating multi-core RISC-V systems
in gem5,” in Proceedings of the Workshop on Computer Architecture
Research with RISC-V (CARRV), 2018, p. 7.
[42] N. L. Binkert, B. M. Beckmann, G. Black, S. K. Reinhardt, A. G.
Saidi, A. Basu, J. Hestness, D. Hower, T. Krishna, S. Sardashti, R. Sen,
K. Sewell, M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The gem5
simulator,” SIGARCH Computer Architecture News, vol. 39, no. 2, pp.
1–7, 2011.
[43] D. Gruss, C. Maurice, K. Wagner, and S. Mangard, “Flush+ﬂush: A
fast and stealthy cache attack,” in Proceedings of the International
Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment (DIMVA). Springer, 2016, pp. 279–299.
[44] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg,
“Meltdown: Reading kernel memory from user space,” in Proceedings
of the USENIX Security Symposium (Security). USENIX Association,
2018, pp. 973–990.
[45] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp,
S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks:
Exploiting speculative execution,” in Proceedings of the IEEE Sympo-
sium on Security and Privacy (S&P).
IEEE, May 2019, pp. 19–37.
[46] A. Rudoff, “Persistent memory programming,” ;login:, vol. 42, no. 2,
pp. 34–40, 2017.
[53] A. Seznec, “A case for two-way skewed-associative caches,” in Proceed-
ings of the Annual International Symposium on Computer Architecture
(ISCA). ACM, May 1993, pp. 169–178.
[54] S. Sardashti, A. Seznec, and D. A. Wood, “Skewed compressed caches,”
in Proceedings of the Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO).
IEEE, 2014, pp. 331–342.
[47] N. Zhang, K. Sun, D. Shands, W. Lou, and Y. T. Hou, “TruSpy:
Cache side-channel information leakage from the secure world on ARM
devices,” IACR Cryptology ePrint Archive, vol. 2016, p. 16, 2016,
http://eprint.iacr.org/2016/980.
[48] M. S. ˙Inci, B. Gulmezoglu, G. Irazoqui, T. Eisenbarth, and B. Sunar,
“Cache attacks enable bulk key recovery on the cloud,” in Proceedings
of the Conference on Cryptographic Hardware and Embedded Systems
(CHES). Springer, 2016, pp. 368–388.
[49] D. Skarlatos, M. Yan, B. Gopireddy, R. Sprabery, J. Torrellas, and
C. W. Fletcher, “Microscope: Enabling microarchitectural replay at-
tacks,” IEEE Micro, vol. 40, no. 3, pp. 91–98, 2020.
[50] J. Kong, O. Aciic¸mez, J. Seifert, and H. Zhou, “Deconstructing new
cache designs for thwarting software cache-based side channel attacks,”
in Proceedings of the ACM Workshop on Computer Security Architecture
(CSAW). ACM, October 2008, pp. 25–34.
[51] K. Asanovi´c, R. Avizienis,
J. Bachrach, S. Beamer, D. Bian-
colin, C. Celio, H. Cook, D. Dabbelt, J. Hauser, A.
Izraelevitz,
S. Karandikar, B. Keller, D. Kim, J. Koenig, Y. Lee, E. Love,
M. Maas, A. Magyar, H. Mao, M. Moreto, A. Ou, D. A. Pat-
terson, B. Richards, C. Schmidt, S. Twigg, H. Vo, and A. Wa-
terman, “The Rocket chip generator,” EECS Department, Univer-
sity of California, Berkeley, Tech. Rep. UCB/EECS-2016-17, April
2016, http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-
17.html.
[52] J. Kimmitt, W.
Song,
and A. Bradbury,
(version 0.4),”
“lowRISC with
June 2017,
tagged memory and minion core
https://www.lowrisc.org/docs/minion-v0.4/.
[55] M. Sugiyama, “Section 2.5 – transformation of random variables,”
Boston: Morgan
in Introduction to Statistical Machine Learning.
Kaufmann, 2016, pp. 22–23.
[56] “Scale:
Scaling
and
centering
of
matrix-like
objects,”
https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale.
[57] J. S. Hunter, “The exponentially weighted moving average,” Journal of
Quality Technology, vol. 18, no. 4, pp. 203–210, 1986.
[58] Y. Zhang and M. K. Reiter, “D¨uppel: Retroﬁtting commodity operating
systems to mitigate cache side channels in the cloud,” in Proceedings
of the ACM SIGSAC Conference on Computer and Communications
Security (CCS). ACM, 2013, pp. 827–838.
[59] A. Phansalkar, A. Joshi, and L. K. John, “Analysis of redundancy
and application balance in the SPEC CPU2006 benchmark suite,” in
Proceedings of the International Symposium on Computer Architecture
(ISCA). ACM, June 2007, pp. 412–423.
[60] T. Sherwood, E. Perelman, G. Hamerly, and B. Calder, “Automatically
characterizing large scale program behavior,” in Proceedings of the
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). ACM Press, 2002, pp.
45–57.
[61] A. A. Nair and L. K. John, “Simulation points for SPEC CPU 2006,”
in Proceedings of the International Conference on Computer Design
(ICCD).
IEEE Computer Society, 2008, pp. 397–403.
[62] M. Chiappetta, E. Savas, and C. Yilmaz, “Real
time detection of
cache-based side-channel attacks using hardware performance counters,”
Applied Soft Computing, vol. 49, pp. 1162–1174, 2016.
[63] M. Payer, “HexPADS: A platform to detect “stealth” attacks,” in
Proceedings of the International Symposium on Engineering Secure
Software and Systems (ESSoS). Springer, 2016, pp. 138–154.
[64] T. Zhang, Y. Zhang, and R. B. Lee, “CloudRadar: A real-time side-
channel attack detection system in clouds,” in Proceedings of the In-
ternational Symposium on Research in Attacks, Intrusions and Defenses
(RAID). Springer, 2016, pp. 118–140.
[65] J. Chen and G. Venkataramani, “CC-Hunter: Uncovering covert timing
channels on shared processor hardware,” in Proceedings of the Annual
IEEE/ACM International Symposium on Microarchitecture (MICRO).
IEEE, 2014, pp. 216–228.
[66] A. Fuchs and R. B. Lee, “Disruptive prefetching: Impact on side-channel
attacks and cache designs,” in Proceedings of the ACM International
Systems and Storage Conference (SYSTOR). ACM, 2015, pp. 14:1–
14:12.
[67] F. Yao, H. Fang, M. Doroslovacki, and G. Venkataramani, “Towards
a better indicator for cache timing channels,” arXiv: abs/1902.04711,
2019, http://arxiv.org/abs/1902.04711.
[68] A. Harris, S. Wei, P. Sahu, P. Kumar, T. M. Austin, and M. Tiwari,
“Cyclone: Detecting contention-based cache information leaks through
cyclic interference,” in Proceedings of the Annual IEEE/ACM Interna-
tional Symposium on Microarchitecture (MICRO).
IEEE, 2019, pp.
57–72.
[69] A. Purnal, L. Giner, D. Gruss, and I. Verbauwhede, “Systematic analysis
of randomization-based protected cache architectures,” in Proceedings
of the IEEE Symposium on Security and Privacy (S&P).
IEEE, May
2021.
[70] T. Bourgeat, J. Drean, Y. Yang, L. Tsai, J. Emer, and M. Yan, “CaSA:
End-to-end quantitative security analysis of randomly mapped caches,”
in Proceedings of the Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO).
IEEE, October 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:54 UTC from IEEE Xplore.  Restrictions apply. 
969