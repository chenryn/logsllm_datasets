### 代码崩溃分析

在 `external/v8/src/builtins.cc:1120` 处，调用栈显示了完整的函数调用链，最终导致了程序崩溃。对于 ARM 架构，可以通过检查 LR（链接寄存器）的值来确定程序是如何跳转到当前地址的。根据当前是 Thumb 模式还是 ARM 模式，将 LR 的值减去 2 或 4 后，可以 dump 内存。如果 LR 的值是奇数，则该地址指向的是 Thumb 指令。

```gdb
(gdb) x/1 $lr - 2
0x5d46fee3 : blx  r2
```

这条指令表示跳转到 R2 寄存器中的地址。查看 R2 寄存器的值可以确定为什么程序在地址 0 处崩溃。

```gdb
(gdb) info register r2
r2 = 0x0
```

从结果可以看出，R2 寄存器的值为 0，这解释了为什么程序崩溃时到达了地址 0。但这并不是根本原因，需要继续追踪数据流以查明 R2 为何变为 0。

### 反汇编分析

反汇编 `webCore::Node::parentNode` 函数：

```gdb
#1 0x5d46fee4 in webCore::Node::parentNode (this=0x594134b0)
    at external/webkit/Source/WebCore/dom/Node.h:731
731 return getFlag(IsShadowRootFlag) || isSVGShadowRoot() ? 0 : parent();

Dump of assembler code for function WebCore::Node::parentNode (const):
(gdb) disassemble
0x5d46fed2: push {r4, lr}
0x5d46fed4: add r4, r0, #0
0x5d46fed6: ldr r3, [r0, #36]
0x5d46fed8: ands r1, r3, #13
0x5d46feda: bne.n 0x5d46fee0
0x5d46feed: ldr r2, [r1, #112]
0x5d46fee0: cmp r0, #0
0x5d46fee2: beq 0x5d46fee4
0x5d46fee4: ldr r0, [r4, #12]
0x5d46fee6: pop {r4, pc}
End of assembler dump.
```

从反汇编列表中可以看到，R2 的值是从 R1 指向的内存偏移 112 处获取的，而 R1 是从 R0 指向的内存偏移 0 处获取的。确认这些内存是否使 R2 变为 0。

```gdb
(gdb) info register r1
r1 = 0x5a621fa0
(gdb) x/wx $r1 + 112
0x5a622010: 0x00000000
(gdb) x/wx $r0
0x5a621088: 0x5a621fa0
(gdb) x/2wx $r0 - 0x8
0x5a621080: 0x00000000 0x00000031
```

确认 0x5a621fa0 或 0x5a621088 的内存块有问题。检查这些内存块的状态，发现它们已被释放。

### 跟踪内存释放

为了找到这个内存块是在哪里被释放的，退出调试器并重新启动进程，再次让浏览器崩溃。使用 GDB 服务器附加到进程，并设置断点。

```gdb
(gdb) break *WebCore::Node::parentNode () const
Breakpoint 1 at 0x5d46fed2: file external/webkit/Source/WebCore/dom/Node.h, line 730.
(gdb) commands
> continue
> end
(gdb) continue
Continuing.
```

由于 `parentNode` 函数被频繁调用，可以在更上层的函数中设置断点。

```gdb
(gdb) break external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:211
Breakpoint 1 at 0x5d6748d4: file external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp, line 211.
(gdb) continue
Continuing.
```

加载引发崩溃的页面后，设置一个跟踪 `free` 函数的断点，并限制在当前线程中。

```gdb
(gdb) info threads
* 2 Thread 18733 WebCore::ReplacementFragment::removeNode (this=0x5ea004a8, node=...)
  at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:211
(gdb) break free thread 2
Breakpoint 2 at 0x401259e2: file bionic/libc/bionic/../upstream-dlmalloc/malloc.c, line 4711.
(gdb) commands
> printf "free(0x%x)\n", $r0
> silent
> printf "\n"
> backtrace
> continue
> end
(gdb) continue
Continuing.
```

当浏览器再次崩溃时，查看 R0 中的值，并查找哪个 `free` 调用释放了该地址处的内存块。

```gdb
(gdb) info register r0
r0 = 0x5a6a96d8
```

向前查找调试器的输出，找到释放该内存块的 `free` 调用。

```gdb
free(0x5a6a96d8)
#0 0x401259e2 in d1free (mem=0x5a6a96d8) at bionic/libc/bionic/../upstream-dlmalloc/malloc.c:4711
#1 0x401229c0 in free (mem=) at bionic/libc/bionic/malloc_debug_common.cpp:230
#2 0x5d479b92 in WebCore::Text::~Text (this=0x5a6a96d8, __in_chrg=) at external/webkit/Source/WebCore/dom/Text.h:30
#3 0x5d644210 in WebCore::ContainerNode::removeAllChildrenInContainer (container=) at external/webkit/Source/WebCore/dom/ContainerNode.cpp:100
#4 0x5d651890 in WebCore::Element::~Element (this=0x5a8d36f0, __in_chrg=) at external/webkit/Source/WebCore/dom/Element.cpp:118
#5 0x5d65c5b4 in WebCore::StyledElement::~StyledElement (this=0x5a8d36f0, __in_chrg=<optimized out>) at external/webkit/Source/WebCore/dom/StyledElement.cpp:118
```

通过以上步骤，可以确定这是一个释放后重用漏洞。编写脚本 `script.gdb` 来简化整个调试过程。