the suggested changes in the pull request and will merge them into the master branch. This results in a
new merge commit object as the new head of the master branch. This new merge commit will contain
changes computed using the trees of the parent of both commits and the tree of the common ancestor(s)
(i.e., the commit from which both branches diverged originally).
For example, in Fig. 4, C5 is the merge commit object obtained by merging the feature branch
into the master branch. In this case, C5 has two parents, C2 and C4.2 The C5 object is created by the
GitHub server as a result of the project owner’s action to merge the pull request via GitHub’s web UI.
We note that the objects C3 and C4 from the pull request branch become part of the master branch
after the merge.
Attacks against merge commit objects are described in Section 4.2.
Squash-and-Merge Commit Object. When a pull request contains multiple commits, GitHub provides
the squash-and-merge option: The commits in the pull request are ﬁrst “squashed” into a new commit
object that retains all the changes (commits) but omits the individual commits from its history. This new
squash-and-merge commit object is then added to the repository.
For example, consider the repository shown in Fig. 1, in which the project owner receives a pull request
for the feature branch and decides to use the squash-and-merge option. As a result, the GitHub server
ﬁrst creates a new commit object by combining all the changes (commits) mentioned in the pull request,
as shown in Fig. 5(a). The server then adds the newly created commit object C5 on top of the current
head of the master branch C2, as shown in Fig. 5(b). The squash-and-merge option for merging a pull
request is preferred when work-in-progress changes (e.g., updates to address reviewer comments) that
are important in the feature branch are not necessarily important to retain when looking at the history
of the master branch. Indeed, objects C3 and C4 are not included in the master branch, and C5 will
have only one parent, which is C2. The new commit object (and tree object) will be computed in the
same way as the procedure for the regular commit described above.
Attacks against squash-and-merge commit objects are described in Section 4.2.3.
Rebase-and-merge Commit Object. A pull request may also be merged using the rebase-and-merge
option: all the new commits from the pull request are placed on top of all the commits in the master
2We note that, in general, Git allows to merge n branches (with n (cid:2) 2), and the resulting merge commit object will have n
parents. However, at the moment, GitHub’s web UI does not allow merging more than two branches.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
411
Fig. 5. Repository state for squash-and-merge operations.
Fig. 6. Repository state for rebase-and-merge operations.
branch. However, instead of using a merge commit, for each commit in the pull request, a new commit
is created in the master branch. This option is preferred when it is important not to pollute the history
of the repository with a new merge commit object that makes it difﬁcult to follow the evolution of the
repository.
For example, consider the repository shown in Fig. 6(a), in which the feature branch is about to be
merged into the master branch using the rebase-and-merge option. The server creates objects C3’ and
C4’ on top of C2, as shown in Fig. 6(b). Note that objects C3’ and C4’ are equivalent to objects C3 and
C4 in the feature branch (i.e., they point to the same tree object).
Attacks against rebase-and-merge commit objects are described in Section 4.2.4.
3. Threat model
We assume a threat model in which the attacker’s goal is to remove code (e.g., a security patch)
or introduce malicious code (e.g., a backdoor) from a software repository that is managed via a web
interface. We assume the attacker is able to tamper with the repository (e.g., modify data stored on
the Git repository), including any aspect of the webpages served to clients. This scenario may happen
either directly (e.g., a compromised or malicious Git server), or indirectly (e.g., through MITM attacks,
such as government attacks against GitHub [23,24]). There is evidence that, despite the use of HTTPS,
MITM attacks are still possible due to powerful nation-state adversaries [24] or due to various protocol
ﬂaws [25–27]. Such an attacker will continue to violate the repository’s integrity as long as these attacks
412
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
remain undetected. Since commit objects created by the server as a result of user’s web UI actions are
not signed by the user, the attacker may go undetected for a long amount of time. Thus, rather than
relying exclusively on the ability of web services to remain secure, client-side mechanisms such as the
one proposed in this work can provide an additional layer of protection.
The attacker can read and write any ﬁles on a repository that may contain a mix of signed commits
(e.g., created via Git’s CLI tool) and unsigned commits (e.g., created via the web UI). The integrity of
commits not created via the web UI can be guaranteed only if these commits are signed by users using
Git’s standard commit signing mechanism. Our solution is independent of whether commits not created
via the web UI are signed or not. We assume the attacker does not have a developer’s signing key they
are willing to use (such as insiders that do not want to reveal their identity). As such, the attacker cannot
tamper with signed commit objects without being detected. However, commit objects that are not signed
can be tampered with by the attacker. Since all commits created via the web UI are not user signed (as
is the case with GitHub and GitLab today3), the attacker can tamper with these objects when they are
created, or directly in the repository after they have been created.
Although the attacker can create arbitrary commits even when users are not interacting with the repos-
itory, these commits are not user-signed and will be detected upon veriﬁcation. Removing an existing
commit from the end of the commit chain, or entirely discarding a commit submitted via the web UI
are actions that have a high probability of being noticed by developers. Otherwise, our solutions can-
not detect such attacks, and a more comprehensive solution should be used, such as a reference state
log [28].
We focus on attacks that tamper with commits performed by the user via the web UI (speciﬁc attacks
are described in Section 4). Such attacks: (1) are stealthy in nature since subtle changes bundled together
with a developer’s actions are hard to detect, (2) can be framed as if the user did something wrong, (3) can
be executed either by attackers than control the Git server, or by MITM attackers in conjunction with a
user’s web UI actions, and (4) may be performed by an unscrupulous developer who later denies having
done it and blames it on the web UI’s lack of security. Thus, we are mainly concerned with two attack
avenues:
• Direct manipulation of the commit ﬁelds, so that the commit does not reﬂect the user’s actions
through the web UI.
• Tricking the user into committing incorrect data by manipulating the information presented to the
user via the web UI. If not handled appropriately, this attack approach can even circumvent a defense
that performs user commit signatures, because the user can be deceived into signing incorrect data.
We assume attackers cannot get access to developer keys. Alternatively, a malicious developer in control
of a developer key may not want to have an attack attributed to herself and would thus be unwilling to
use this key to sign data they have tampered with.
3.1. Security guarantees
Answering to this threat model, the goal of a successful defensive system should be to enforce the
following:
3In late October 2017, GitHub started to sign commits made using the GitHub web interface (as an undocumented feature).
However, this only provides a false sense of security and does not prevent any of the attacks we describe in this paper because
GitHub uses its own private key to sign the commits.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
413
• SG1: Prevent web UI attacks. Developers should not be tricked into committing incorrect informa-
tion based on what is displayed in the web UI.
• SG2: Ensure accurate web UI commits. The commits performed by users via the web UI should
be accurately reﬂected in the repository. After each commit, the repository should be in a state that
reﬂects the developer’s actions.
• SG3: Prevent modiﬁcation of committed data. An attacker should not be able to modify data that
has been committed to the repository without being detected.
4. Attacks
A benign server will faithfully execute at the Git repository layer the operation requested by the user
at the web UI layer. However, the user’s web UI actions can be transformed into damaging operations
at the repository layer. In this section, we identify new attacks that can result from some of the most
common actions that can be performed using GitHub’s web UI. Common to these attacks is the fact that
the server creates a commit object that reﬂects a different state of the repository than the state intended
by the user. In a project with multiple ﬁles, subtle changes in some of the ﬁles may go unnoticed by the
user performing the commit via the web UI. As a result, anyone cloning or updating the repository will
be unaware they have accessed a repository that was negatively altered.
4.1. Attacks against regular commits
Commit Manipulation Attacks. GitHub’s web UI allows users to manipulate repository data. The user
can add, delete, or modify ﬁles and directories. The user then pushes a “Commit” button to commit
the changes to the repository. As a result, the GitHub server creates a new commit object that should
reﬂect the current state of the project’s ﬁles. However, the server can instead create a commit object that
corresponds to a different project state, in which ﬁles have been added, deleted, or modiﬁed in addition
to or instead of those requested by the user.
The attack is easy to execute, as the server simply has to create the blob, tree and commit objects
that correspond to the incorrect state of the repository. Nevertheless, the attack’s impact can be sig-
niﬁcant. Since the server can arbitrarily manipulate the project’s ﬁles, it can, for example, introduce a
vulnerability by making a subtle modiﬁcation in one of the project’s ﬁles.
4.2. Attacks against merge commits
The server can manipulate the various ﬁelds of a merge commit object that it creates. Based on this
approach, the following attacks can be executed.
4.2.1. Incorrect merge commit attacks
The server can create an incorrect repository state by manipulating the “tree” ﬁeld of the merge commit
object. The server generates an incorrect list of blob objects by adding/deleting/modifying project ﬁles,
then a tree object that corresponds to this incorrect blob list of blobs, and ﬁnally a merge commit object
whose “tree” ﬁeld refers to the incorrect tree object. A project owner or developer will not detect the
attack when they clone/update the repository from the server.
For example, in Fig. 4 the feature branch is being merged into the master branch. Under benign
circumstances, the tree object pointed to by the merge commit C5 object should refer to a set of blob
414
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
Fig. 7. Incorrect history merge attack.
objects that is the union of the sets of blobs referred to by the trees in C2 and C4. However, the server
can manipulate the contents of the tree object in C5 to include a different set of blobs. The server can
introduce malicious content by adding a new blob that does not exist in the trees in C2 or C4. Or, the
server can remove a vulnerability patch by keeping the blob from the master over the modiﬁed blob
in the feature branch that contained the patch. Or it can simply not include blobs that contained the
patch.
By manipulating the set of blobs pointed to by the tree object, the server can make arbitrary changes
to the state of the repository pointed to by the merge commit.
4.2.2. Incorrect history merge attacks
The server can also create an incorrect repository state by manipulating the “parent” ﬁelds of the
merge commit object. Instead of using the heads of the two branches to perform the merge commit, the
server can use other commits as parents of the merge commit.
Consider the initial repository shown in Fig. 1. As shown in Fig. 4, a correct merging of the “mas-
ter” and “feature” branches should result in a merge commit of C2 and C4 (i.e., the heads of the two
branches). However, the server can create the repository shown in Fig. 7 by merging the head of the
master branch with C3 instead of C4. This means only the changes introduced in C3 are merged. The
“parent” ﬁelds of C5 are set to point to C2 and C3.
The impact of this attack can be severe. If C3 contained a security vulnerability, which was ﬁxed by
the developer in C4 before submitting the pull request, the ﬁx will be omitted from the master branch
after the incorrect merge operation. In a different ﬂavor of this attack, the malicious server merges the
head of the feature branch (C4) with C1, which is not the head of the master branch, thus omitting
potentially important changes contained in C2.
Unlike the previous attack described in Section 4.2.1, the server does not have to manipulate blob and
tree objects, but instead uses incorrect parents when creating the new merge commit object.
4.2.3. Incorrect squash-and-merge attacks
Consider the same scenario described in Fig. 1, except that the project owner chooses the squash-
and-merge option instead of the default recursive merge strategy to merge changes from the feature
branch into the master branch.
As shown in Fig. 5, the server should ﬁrst create a new commit object by combining all the changes
(commits) mentioned in the pull request, and then should add the newly created commit object C5 on
top of C2, which is the current head of the master branch.
During the creation of C5, a malicious server can add any malicious changes or delete/modify any of
the existing changes mentioned in the pull request, and this action may go undetected.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
415
4.2.4. Incorrect rebase-and-merge attacks
The server can also manipulate a client’s request to use the rebase-and-merge option to merge changes
from a pull request. Consider the merge scenario described in Fig. 6, in which the rebase-and-merge
option is used to merge the feature branch into the master branch. As shown in Fig. 6(b), the
server should duplicate the two commits from the pull request on top of C2, the head of the master
branch. However, a malicious server can add two commits that are not equivalent to the commits in the
feature branch, and this action may go undetected.
4.2.5. Incorrect merge strategy attacks
Git can use one of ﬁve different merge strategies when merging branches: recursive, resolve, octopus,
ours and subtree. Each strategy may in turn have various options. The choice of merge strategy and
options inﬂuences what changes from the merged branches will be included in the merged commit and
how to resolve conﬂicts automatically (e.g., “favoring” changes in one branch over other branches, or
completely disregarding changes in other branches).
We note that web-based Git hosting services such as GitHub and GitLab allow a user to merge two
branches using the web UI only when there are no merge conﬂicts. Currently, such services support only
the recursive merge strategy with no options. However, given their track record of constantly adding new
features [29,30], we adopt a forward-looking strategy and consider a scenario in which they might add
support for a richer set of Git’s merging strategies.
The merge strategy introduces an additional attack avenue, as an untrusted server may choose to
complete the merge operation using a merge strategy different than the one chosen by the user. For
example, the server can use a different diff algorithm to determine the changes between the merged
branches than the one intended by the developer. Or, the server may choose a different automatic conﬂict
resolution than the one preferred by the developer. This can result in removing security patches, or
merging experimental code into a production branch. The defenses we propose in Section 5 are based
on a future-proof design that can also protect against incorrect merge strategy attacks.
4.3. Web UI-based attacks
The server could display incorrect information in the web UI in order to trick the user into committing
incorrect or malicious data. Web UI attacks are dangerous because even if a mechanism was in place to
allow the user to sign her commits via the web UI, these signatures would only legitimize the incorrect
data.
Incorrect list of changes. Before doing a merge commit, the user is presented with a list of changes
made in one branch that are about to be merged into the other branch. The user reviews these changes
and then decides whether or not to perform the merge. The server may present a list of changes that
is incomplete or different than the real changes. For example, the server may omit code changes that
introduced a vulnerability. Thus, the user may decide to perform the merge commit based on an incorrect
perception of the changes.
Inconsistent repository views. GitHub may provide inconsistent views of the repository by displaying
certain information in the web UI and then providing different data when the user queries the GitHub
API to retrieve individual Git objects. This might defeat defense mechanisms that rely exclusively either