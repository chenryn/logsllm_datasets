title:The Balance Attack or Why Forkable Blockchains are Ill-Suited for
Consortium
author:Christopher Natoli and
Vincent Gramoli
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
The Balance Attack or Why Forkable Blockchains Are Ill-Suited for Consortium
Christopher Natoli
School of IT
University of Sydney
Sydney, Australia
PI:EMAIL
Vincent Gramoli
School of IT
Data61-CSIRO and University of Sydney
Sydney, Australia
PI:EMAIL
Abstract—Most blockchain systems are forkable in that they
require participants to agree on a chain out of multiple possible
branches of blocks. In this paper, we identify a new form
of attack, called the Balance attack, against these forkable
blockchain systems. The novelty of this attack consists of
delaying network communications between multiple subgroups
of nodes with balanced mining power. Our theoretical analysis
captures the tradeoff between the network delay and the mining
power of the attacker needed to double-spend in the GHOST
protocol with high probability.
We quantify our analysis in the settings of the Ethereum
testnet of the R3 consortium where we show that a single
machine needs to delay messages for 20 minutes to double
spend while a coalition with a third of the mining power would
simply need 4 minutes to double spend with 94% of success.
We experiment the attack in our private Ethereum chain before
arguing for a non-forkable blockchain design to protect against
Balance attacks.
Keywords-Ethereum, forks, GHOST, consortium blockchain,
private blockchain, Bitcoin, Byzantine, Casper
I. INTRODUCTION
Blockchain systems are distributed implementations of a
chain of blocks. Each node can issue a cryptographically
signed transaction to transfer digital assets to another node or
can create a new block of transactions, and append this block
to its current view of the chain. Due to the distributed nature
of this task, multiple nodes may append distinct blocks at the
same index of the chain before learning about the presence
of other blocks, hence leading to a forked chain or a tree. For
nodes to eventually agree on a unique state of the system,
nodes apply a common strategy that selects a unique branch
of blocks in this tree.
Bitcoin [33], one of the most popular blockchain systems,
selects the longest branch. This strategy has however shown
its limitation as it simply wastes all blocks not present in
this branch [11], [37], [39], [20], [36]. If an attacker can
solve crypto-puzzles fast enough to grow a local branch of
the blockchain faster than the rest of the system, then it
will eventually impose its own branch to all participants.
In particular, by delaying the propagation of blocks in the
system, one can increase the amount of wasted blocks and
proportionally slow down the growth of the longest branch of
the system. This delay presents a serious risk to the integrity
of the blockchain, as the attacker does not even need a large
fraction of the computational power to exceed the length of
the chain, allowing her to double spend in new transactions
the coins that she already spent in earlier transactions [38].
Ethereum [41] proposes another selection strategy that
copes with this problem. Each node uses an algorithm,
called GHOST, that starts from the ﬁrst block, also called
the genesis block, and iteratively selects the root of the
the common branch. Even
heaviest subtree to construct
if nodes create many blocks at
the same index of the
blockchain, their computational power is not wasted but
counted in the selection strategy [39]. In particular,
the
number of these “sibling” blocks increase the chance that
their common ancestor block be selected in favor of another
candidate block mined by the attacker. Although it clearly
alleviates the Bitcoin limitation discussed above [11], [37],
[20], [36] it remains unclear how long an attacker with a
low mining power should delay messages to discard previous
transactions in Ethereum.
In this paper, we answer this question by demonstrating
theoretically and experimentally that an attacker can com-
pensate a low mining power by delaying selected messages
in Ethereum. To this end, we propose a simple attack, called
the Balance attack: an attacker transiently disrupts com-
munications between subgroups of similar mining power.
During this time, the attacker issues transactions in one
subgroup, say the transaction subgroup, and mines blocks
in another subgroup, say the block subgroup, up to the
point where the tree of the block subgroup outweighs, with
high probability, the tree of the transaction subgroup. The
novelty of the Balance attack is to leverage the GHOST
protocol that accounts for sibling or uncle blocks to select a
chain of blocks. This strategy allows the attacker to mine a
branch possibly in isolation of the rest of the network before
merging its branch to one of the competing blockchain to
inﬂuence the branch selection process.
We experimented a distributed system running Ethereum
in similar settings as R3, a consortium of more than 70
world-wide ﬁnancial institutions. In January, R3 consisted of
eleven banks and successfully collaborated in deploying an
2158-3927/17 $31.00 © 2017 IEEE
DOI 10.1109/DSN.2017.44
579
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:34 UTC from IEEE Xplore.  Restrictions apply. 
Ethereum private chain to perform transactions.1 Since then,
R3 has grown and kept using Ethereum2 while the concept
of consortium private chain gained traction for its ability
to offer a blockchain system among multiple companies
in a not necessarily private but controlled environment. R3
has experimented with various blockchains and has recently
released a distributed ledger implementation that does not
use any blockchain [5]. As opposed to a fully private chain
scenario,
the consortium private chain involves different
institutions, possibly competitors. As they can be located at
different places around the world, they typically use Internet
to communicate. We illustrate the Balance attack in the R3
network setting as of June 2016 that consisted of a testnet
of 50 machines among which 15 were actively mining, by
deploying Ethereum on own private testnet.
One can exploit the Balance attack to corrupt or violate
the persistence of the main branch, hence rewriting previ-
ously committed transactions, and allowing the attacker to
double spend. As opposed to previous attacks against Bitcoin
where the attacker has to expand the longest chain faster
than correct miners to obtain this result [38], the novelty of
our attack lies in the contribution of the attacker to one
of the correct miner chain in order to outweigh another
correct miner chain. We generalize our contribution to
forkable blockchains, i.e., blockchains that experience forks,
by proposing a simple model for forkable blockchains and
specifying Nakamoto’s and GHOST consensus algorithmic
differences. More precisely, we make the four following
contributions:
1) We show that the GHOST consensus protocol is cor-
ruptible or vulnerable to double spending attacks with
high probability when an attacker can delay com-
munications. We introduce the Balance attack that
inﬂuences the branch selection rather than trying to
solo-mine heavier or longer branches.
2) We illustrate the problem in the context of the R3
Ethereum testnet if a single node can delay commu-
nications for 20 minutes or when a coalition delay
communications during 4 minutes. This vulnerability
stems from the heterogeneous nature of participants
that is exacerbated in small consortium blockchains.
3) We argue for a non-forkable blockchain design that
protects against Balance attacks. The idea is to design
fork-free blockchains so that no adversary can exploit
forks to inﬂuence the decision in favor of a particular
branch. This design may ﬁnd applications in critical
sectors where the loss of digital assets cannot be
tolerated.
As of today, mainstream blockchains have implicitly
assumed synchrony [17] to be able to predict an upper-
1http://www.ibtimes.co.uk/r3-connects-11-banks-distributed-ledger-
using-ethereum-microsoft-azure-1539044.
2http://www.coindesk.com/r3-ethereum-report-banks/.
bound on the delay of messages. While strong guarantees
can clearly be proved under this assumption, the guarantees
to expect if this assumption is violated remain unclear. The
problem is that mainstream blockchains, whether they are
fully public or involve a consortium of institutions, relies on
large network, like the internet, in which one cannot predict
the delay of messages. More dramatically, multiple results
demonstrated recently how one can simply delay messages
in blockchain networks [25], [22], [1]. The Balance at-
tack reveals that delaying messages can be dramatic for
blockchains, leading to double-spending even with a small
portion of the mining power and raises interesting challenges
in the design of safe consortium blockchains.
Section II deﬁnes the problem. In Section III, we present
the algorithm to run the attack. In Section IV, we show
how the analysis affects GHOST. In Section V, we analyze
the success of the Balance attack in the context of the R3
consortium network. In Section VI, we present our experi-
ments run in an Ethereum private chain. In Section VII, we
propose some blockchain design solutions immune to the
Balance attack. Section VIII presents the related work. And
Section IX concludes.
II. PRELIMINARIES
In this section we model a simple distributed system that
implements a blockchain abstraction as a directed acyclic
graph. We propose a high-level pseudocode representation of
proof-of-work blockchain protocols in this model that allows
us to illustrate an important difference between Bitcoin and
Ethereum in the selection of a main branch with a persistent
preﬁx.
A. A simple distributed model for blockchains
We consider a communication graph G = (cid:2)V, E(cid:3) with
nodes V connected to each other through ﬁxed commu-
nication links E. Nodes are part of a blockchain system
S ∈ {bitcoin, ethereum} and can act as clients by issuing
transactions to the system and/or servers by mining, the
action of trying to combine transactions into a block. For
the sake of simplicity, we consider that each node possesses
a single account and that a transaction issued by node pi is
a transfer of digital assets or coins from the account of the
source node pi to the account of a destination node pj (cid:5)= pi.
Each transaction is uniquely identiﬁed and broadcast to all
nodes in a best-effort manner. We assume that a node re-
issuing the same transfer multiple times creates as many
distinct transactions.
Nodes that mine are called miners. We refer to the
computational power of a miner as its mining power and we
denote the total mining power t as the sum of the mining
powers of all miners in V . Each miner tries to group a set
T of transactions it heard about into a block b ⊇ T as long
as transactions of T do not conﬂict and that the account
balances remain non-negative. For the sake of simplicity in
580
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:34 UTC from IEEE Xplore.  Restrictions apply. 
block.
graph of blocks Bi and pointers Pi
Algorithm 1 Blockchain construction at node pi
1: (cid:2)i = (cid:3)Bi, Pi(cid:4), the local blockchain at node pi is a directed acyclic
2:
3: receive-blocks((cid:3)Bj , Pj(cid:4))i:
4:
5:
 upon reception of blocks
 update vertices of blockchain
 update edges of blockchain
Bi ← Bi ∪ Bj
Pi ← Pi ∪ Pj
Algorithm 1 describes the progressive construction of a
forkable blockchain at a particular node pi upon reception
of blocks from other nodes by simply aggregating the
newly received blocks to the known blocks (lines 3–5). As
every added block contains a hash to a previous block that
eventually leads back to the genesis block, each block is
associated with a ﬁxed index. By convention we consider the
genesis block at index 0, and the blocks at j hops away from
the genesis block as the blocks at index j. As an example,
consider the simple blockchain (cid:2)1 = (cid:2)B1, P1(cid:3) depicted in
Figure 1(a) where B1 = {g, b1} and P1 = {(cid:2)b1, g(cid:3)}. The
genesis block g has index 0 and the block b1 has index 1.
4) Forks as disagreements on the blocks at a given index:
As depicted by views (cid:2)1, (cid:2)2 and (cid:2)3 in Figures 1(a), 1(b)
and 1(c), respectively, nodes may have a different views of
the current state of the blockchain. In particular, it is possible
for two miners p1 and p2 to mine almost simultaneously two
different blocks, say b1 and b2. If neither block b1 nor b2 was
propagated early enough to nodes p2 and p1, respectively,
then both blocks would point to the same previous block g
as depicted in Figures 1(a) and 1(b). Because network delays
are not predictable, a third node p3 may receive the block
b1 and mine a new block without hearing about b2. The
three nodes p1, p2 and p3 thus end up having three different
local views of the same blockchain, denoted (cid:2)1 = (cid:2)B1, P1(cid:3),
(cid:2)2 = (cid:2)B2, P2(cid:3) and (cid:2)3 = (cid:2)B3, P3(cid:3).
We refer to the global blockchain as the directed acyclic
graph (cid:2)0 = (cid:2)B0, P0(cid:3) representing the union of these local
blockchain views, denoted by (cid:2)1 ∪ (cid:2)2 ∪ (cid:2)3 for short, as
depicted in Figure 1, and more formally deﬁned as follows:
(cid:2)
B0 = ∪∀iBi,
P0 = ∪∀iPi.
The point where distinct blocks of the global blockchain
DAG have the same predecessor block is called a fork. As
an example Figure 1(d) depicts a fork with two branches
pointing to the same block: g in this example.
In the remainder of this paper, we refer to the DAG as a
tree rooted in g with upward pointers, where children blocks
point to their parent block.
5) Main branch in Bitcoin and Ethereum: To resolve the
forks and deﬁne a deterministic state agreed upon by all
nodes, a blockchain system must select a main branch, as
a unique sequence of blocks, based on the tree. Building
upon the generic construction (Alg. 1), we present
two
(a) view (cid:2)1
(b) view (cid:2)2