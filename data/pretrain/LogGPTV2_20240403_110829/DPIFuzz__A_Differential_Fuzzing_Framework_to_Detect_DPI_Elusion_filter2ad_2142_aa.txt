title:DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion
Strategies for QUIC
author:Gaganjeet Singh Reen and
Christian Rossow
DPIFuzz: A Differential Fuzzing Framework
to Detect DPI Elusion Strategies for QUIC
Christian Rossow
Gaganjeet Singh Reen
CISPA Helmholtz Center for Information Security
CISPA Helmholtz Center for Information Security
Saarbrücken, Saarland, Germany
PI:EMAIL
Saarbrücken, Saarland, Germany
rossow@cispa.saarland
ABSTRACT
QUIC is an emerging transport protocol that has the potential to
replace TCP in the near future. As such, QUIC will become an
important target for Deep Packet Inspection (DPI). Reliable DPI
is essential, e.g., for corporate environments, to monitor traffic
entering and leaving their networks. However, elusion strategies
threaten the validity of DPI systems, as they allow attackers to
carefully design traffic to fool and thus evade on-path DPI systems.
While such elusion strategies for TCP are well documented, it is
unclear if attackers will be able to elude QUIC-based DPI systems.
In this paper, we systematically explore elusion methodologies for
QUIC. To this end, we present DPIFuzz: a differential fuzzing frame-
work which can automatically detect strategies to elude stateful DPI
systems for QUIC. We use DPIFuzz to generate and mutate QUIC
streams in order to compare (and find differences in) the server-side
interpretations of five popular open-source QUIC implementations.
We show that DPIFuzz successfully reveals DPI elusion strategies,
such as using packets with duplicate packet numbers or exploit-
ing the diverging handling of overlapping stream offsets by QUIC
implementations. DPIFuzz additionally finds four security-critical
vulnerabilities in these QUIC implementations.
CCS CONCEPTS
• Security and Privacy → Intrusion detection systems; Net-
work security; Software and application security.
KEYWORDS
DPI Elusion, QUIC, Protocol Fuzzing, Differential Fuzzing
ACM Reference Format:
Gaganjeet Singh Reen and Christian Rossow. 2020. DPIFuzz: A Differential
Fuzzing Framework to Detect DPI Elusion Strategies for QUIC. In Annual
Computer Security Applications Conference (ACSAC 2020), December 7–11,
2020, Austin, USA. ACM, New York, NY, USA, 13 pages. https://doi.org/10.
1145/3427228.3427662
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427662
1 INTRODUCTION
Organisations across the globe inspect the encrypted traffic at the
periphery of their network. Deep Packet Inspection (DPI) tech-
niques are at the core of such traffic analyses. DPI allows to re-
assemble and inspect application-layer communication content,
and consequently, detect various security-critical incidents such as
malware [13], data leakage [38], phishing attacks [37], or remote
exploits [36]. With the rising popularity of protocols that are en-
crypted by default, DPI systems are typically used in combination
with man-in-the-middle proxies [27, 39] that assist in intercepting
encrypted channels (such as TLS).
However, prior research has demonstrated elusion attacks against
DPI systems that fool their TCP and/or HTTP [17, 23, 33, 41, 42]
inspections. The core reason for such evasion are differences in how
the DPI system and the actual data recipient have implemented a
protocol (such as TCP). Any slight difference may lead to the fact
that the actual recipient of the data and the DPI system reassembled
different payload data, although operating on the same sequence
of raw packets. There are plenty of reasons why such differences
may occur: (i) Protocol specifications (deliberately or not) leave
some details out, either not to blow up the standard, to allow ven-
dors to handle certain situation as they see fit, or simply as these
details were forgotten. (ii) In order to reassemble the application-
layer content, the DPI systems needs to model the state machine
of stateful transport protocols (such as TCP). Having said this, DPI
systems may choose to simplify this state machine to minimize the
overhead [41] and thus, to foster scalability. (iii) Similarly, DPI sys-
tems might perform a lower number of checks or less sophisticated
checks to validate packets as compared to an endpoint in order to
reduce the computational load.
Fortunately, there are just a few relevant protocols that have
to be studied to assess and mitigate these evasion attacks. As of
now, the vast majority of inspected Internet traffic is HTTPS/TLS-
based [22, 25, 27, 39]. As such, it is not surprising that most works
in the context of evasion attacks so far have focused on the specifics
of TCP [17, 23, 33, 41, 42]. Yet, with the IETF working to standardise
the QUIC protocol, coupled with the performance and the secu-
rity benefits QUIC offers compared to TCP, it is only a matter of
time before it is adopted widely as the go-to transport protocol.
Consequently, intercepting and analysing QUIC packets using DPI
systems coupled with inline proxies will be imperative to organi-
sations to maintain the security of their networks. Unfortunately,
the known findings of TCP do not directly translate to QUIC, as
the two protocols have vastly different specifications. QUIC pro-
vides security features, like authentication and encryption, that are
typically handled by a higher layer protocol (like TLS), from the
transport layer itself. QUIC also uses a large variety of packets and
332ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
Figure 1: QUIC Packet Structure Overview: QUIC Packets have confidentiality and integrity protection by default. Even parts
of QUIC headers are protected (using keys separate from the payload protection keys) [11].
frames , as well as multiple streams within a connection, for data
exchange between end points as compared to TCP which simply
uses packets. Additionally, the wire image of QUIC is integrity pro-
tected and reveals much lesser information to network monitors
as compared to the wire image of TCP which makes inspecting
the traffic more complex. In this paper, we address the problem
of DPI elusion attacks for QUIC-based communication. Instead of
manually searching for QUIC protocol details that can potentially
be used for DPI elusion, we set out for a more methodological (and,
hopefully, more complete) way to discover such protocol details.
We therefore develop a differential fuzzing framework (DPIFuzz)
which can automatically uncover potential differences between
implementations which could be used for eluding a DPI system. We
design a modular and stateful fuzzer that can generate and mutate
sequences of QUIC packets. The fuzzer also tracks the responses
of the implementations to the generated sequences. We use the
fuzzer to test five popular open-souce QUIC implementations and
consequently perform a differential analysis of the behaviour of
these implementations to the fuzzed sequences of packets. In order
to access the application level data reassembled by the implemen-
tations, we create echo servers using these implementations. We
also use Status Codes to track the status/state of implementations
after processing a given sequence of packets. Using DPIFuzz, we
uncover two distinct strategies which highlight ambiguities be-
tween QUIC implementations. Additionally, we also uncover four
security-critical vulnerabilities in the implementations and demon-
strate how these could facilitate DPI elusion.
Our findings are of direct importance for DPI users. Eliminating
any ambiguities or vulnerabilities that we identified is immensely
helpful to organisations that want to reliably monitor QUIC traffic
on their network perimeter. At the very least, being aware of such
shortcomings for QUIC will help DPI users identify the potential
flaws of their monitoring systems in an automated way.
To summarize our contributions:
• We develop DPIFuzz, a structure-aware and modular fuzzing
framework which allows (i) automated testing of QUIC im-
plementations by generating and mutating communication
streams and (ii) a differential analysis of the behaviour of
the implementations to these communication streams.
• We apply DPIFuzz to five popular open-source QUIC imple-
mentations. As a result, we are (to the best of our knowledge)
the first to report on potential DPI elusion methods for QUIC.
• We additionally uncover and report on four security critical
vulnerabilities in the QUIC implementations, demonstrating
that DPIFuzz’s application is not just restricted to the setting
of finding evasion attacks.
2 BACKGROUND
2.1 QUIC Protocol
QUIC [12] is an encrypted-by-default Internet transport protocol
which was originally proposed by Google. QUIC is conceptually
similar to a combination of TCP, TLS, and HTTP/2 implemented
on UDP and was developed with the intended goal of eventually
replacing TCP on the web. Since QUIC runs on top of UDP, it can
be distributed as a userspace library that can be easily upgraded.
This is in stark contrast to other transport protocols like TCP/UDP
which are implemented in operating system kernels and middlebox
firmware because of which making significant changes to them is
next to impossible [7].
The QUIC IETF working group has been working since late 2016
to standardise the protocol. For the purpose of this paper, we refer
solely to draft 27 of the IETF specification [8] of the QUIC protocol.
The versions of the implementations considered in the paper are
also based on draft 27 of IETF QUIC.
QUIC defines several types of packets and frames. Figure 1 provides
an overview about the structure of QUIC packets. QUIC packets
are carried in UDP datagrams. Multiple QUIC packets can be co-
alesced into one UDP datagram. QUIC packets broadly contain a
header (long header or short header) and a payload. The payload of
QUIC packets is expressed as a sequence of frames. Draft 27 of the
IETF QUIC Protocol defines 20 different types of frames [9] like the
Stream Frame, which is used to carry the actual application level
payload over a stream or the Connection Close Frame, which is
used to indicate to an end point that a connection is being closed.
Detailed information about the different types of frames and pack-
ets can be found in the IETF draft for QUIC [9].
A QUIC connection is a stateful interaction between a client and
server. Each QUIC connection starts with a handshake phase during
which client and server establish a shared secret using the cryp-
tographic handshake protocol (QUIC-TLS [11]) and decide on an
application protocol to use to facilitate the exchange of data. The
successful completion of the handshake confirms that both end-
points are willing to communicate and establishes the important
Long/Short Header(depending on Packettype)QUIC HeaderFrame 1Frame 2QUIC Packet 1QUIC Packet 2UDP HeaderUDP PacketPayloadQUIC Packet Payload(Version Negotiation, Stateless Reset, and Retry packets do not contain frames)UDP PacketQUIC PacketFrame TypeField 1Field 2Frame Speciﬁc Fields(For example, the Stream Framecontains Stream ID, Offset, Lengthand Stream Data ﬁelds)Indicates Frame Type(All frames contain this ﬁeld)QUIC Frame333DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
parameters for the connection.
The exchange of information primarily takes place by means of
streams. In a stream, the protected packets contain stream frames
which are responsible for carrying the data as payload. Multiple
streams can be used to send data in a connection. Streams in an
QUIC connection can be bidirectional or uni-directional, depending
on the value of the second least significant bit of the stream ID.
QUIC also uses flow control for each stream individually as well
as for the connection as a whole. Several transport parameters are
defined in the QUIC specification which allow flow control between
the client and the server.
2.2 Types of Fuzzing
Fuzzing is the process of providing randomised inputs to programs
and observing their behaviour. It has gained immense popularity in
the software testing and the security industry owing to the fact that
it can detect bugs and security vulnerabilities in an automated way.
Several tools [19, 20, 26, 29, 34] already exist to perform fuzzing on
a variety of programs and systems and they have been extremely
successful in discovering vulnerabilities [1, 5, 10, 29].
Fuzzing strategies can be broadly categorised into [2]:
• Dumb vs. Smart Fuzzing: Dumb fuzzers are unaware about
the format of the input that the target expects while smart
fuzzers are input format aware.
• Black-box vs. Coverage-guided fuzzing: Black-box fuzzers
do not test which branches of the target were covered by
fuzzing whereas coverage-guided fuzzers try to maximise
the code coverage of the target.
• Generation- vs. Mutation-based fuzzing: Generation-based
fuzzers create the input for a target from scratch for every
execution of the fuzzer. In contrast, mutation-based fuzzers
alter existing data that is input to the fuzzer to modify and
thereby create new inputs.
Differential Fuzzing is a testing technique where the same fuzzed
input is provided to different yet similar implementations that
should behave identical given the same input. Differential fuzzing
discovers potential implementation differences by comparing the
behaviors and/or responses of the systems under test.
3 GOAL AND SCOPE
3.1 Goal
Our goal is to automatically detect strategies to elude a stateful DPI
system. We aim to find sequences of QUIC packets/frames that con-
tain payload that is denylisted (i.e., blocked using specific payload
keywords) by the DPI system, which however remains unnoticed
by the DPI system. To this end, we aim to reveal sequences of QUIC
packets which are reassembled by the server and the DPI system—
both of which use different QUIC implementations to reassemble
the payload differently. Such sequences reveal a potential point of
ambiguity in the two QUIC implementations that can be exploited
in elusion attacks. Once we discover such sequences, we analyse
them to find the underlying reason for the disparate handling of
packets. Finally, we want to generalize the identified differences to
demonstrate that attackers can leverage them to elude a DPI system
with any denylisted payload.
3.2 Threat Model
Figure 2: DPIFuzz Threat Model: An in-line proxy inter-
cepts QUIC communication and forwards decrypted QUIC
sequences to a separate DPI system for further inspection.
The threat model that we assume for the scope of this paper is
depicted in Figure 2. We envision a QUIC-aware monitoring system
with two components that tackle the disjoint tasks of (i) decrypting
the TLS-encrypted QUIC communication, and (ii) inspecting the
decrypted content. This setup is in line with industry-grade DPI
systems that intercept TLS-encrypted communication [22, 27, 39],
and also corresponds to the recommended setup [21] of monitoring
TLS-encrypted communication with open-source DPI systems like
Snort/Suricata. In detail, these two components compromise of:
• An inline proxy which establishes a QUIC connection with
both the client and the server and forwards the traffic be-
tween the two as well as to the DPI system for analysis.
• A stateful, reassembly-based DPI system which reconstructs
the streams and analyses the packets being sent for denylisted
content. If the organisation prefers intrusion prevention over
pure detection, the DPI system can optionally send a verdict
to the proxy for each packet it receives, or alternatively, send
the proxy an asynchronous signal to drop a connection after
detecting denylisted content.
Having the proxy and DPI system as separate components provides
(i) fault tolerance as it ensures that a fault in the analysis system
does not affect the proxy and vice versa, (ii) flexibility to use the
system for intrusion prevention or detection depending on the
use case and (iii) modularity which allows the DPI systems to be
changed or upgraded while using the same proxy and vice versa.
The proxy itself does not attempt to reassemble or analyse the
application-level data. However, it will need to keep track of the
control data necessary to ensure smooth communication between
the client and the server. The proxy might need to keep track of
certain frames in the QUIC Payload like the New_Connection_Id
frame which is used by endpoints when they want to change the
connection ID associated with a connection. It would need to parse
the QUIC payload for this; however, in the event that the parsing
fails, it will follow a soft fail strategy and forward the packets to
the DPI system and the endpoint as expected.
Decrypted QUIC PacketsPacket VerdictorDrop ConnectionEnterprise NetworkProxyDPISystem334ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
Figure 3: DPIFuzz overview. DPIFuzz is a differential fuzzing framework that executes multiple instances of the fuzzer against
different QUIC implementations, and then performs a differential analysis of the resulting trace files to find inconsistencies.
3.3 Elusion Strategies
If we can cause the DPI system to reassemble different payload
than the destination server for the same sequence of packets, we
can possibly elude the DPI system. We broadly group such elusion
strategies into the following three categories:
payload being registered at the DPI system.
Insertion Packet/Frame: Some packets/frames might be ac-
cepted by the DPI system and rejected by the server (because the
edge cases could be handled differently or the checks at the DPI
might not be as sophisticated as those in the server implementa-
tions). These packets/frames are known as insertion packets/frames
[33, 41]. The consequence of an insertion packet/frame could be:
• The insertion packet/frame results in extra application layer
• The insertion packet/frame causes an error/crash on the DPI
system, which results in the buffers being flushed, but not
on the destination server. As a result, if a blocked keyword
is split into parts such that some parts are sent before the
insertion packet/frame and some parts are sent after, the
server would be able to reassemble the data correctly while
the DPI system would never reassemble the entire blocked
keyword.