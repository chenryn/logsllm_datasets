        elif(x == 2): y -= 70
        elif(x == 3): y -= 66
        elif(x == 4): y ^= 0xCA
        elif(x == 5): y ^= 0xFE
        elif(x == 6): y ^= 0xBE
        elif(x == 7): y ^= 0xEF
        z = (y = 0x20, i = 1, v[i][j] > 16) & 0x7FFF
    seed = 0x2DF715E6
    secret = bytearray("49E657BD3A47114C95BCEE3272A0F0DEACF2835683496EA9A6C5673CCAC8CC05".decode("hex"))
    for i in xrange(len(secret)):
        for j in xrange(0, 8, 2):
            seed, val = rand(seed)
            val %= 4
            secret[i] ^= val & = Zmod(n)[]
        f1 = X^e - c1
        f2 = (X + r)^e - c2
        return Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[0])
    def compositeModulusGCD(a, b):
        if(b == 0):
            return a.monic()
        else:
            return compositeModulusGCD(b, a % b)
    def CoppersmithShortPadAttack(e,n,C1,C2,eps=1/30):
        import binascii
        P. = PolynomialRing(ZZ)
        ZmodN = Zmod(n)
        g1 = x^e - C1
        g2 = (x+y)^e - C2
        res = g1.resultant(g2)
        P. = PolynomialRing(ZmodN)
        rres = 0
        for i in range(len(res.coefficients())):
            rres += res.coefficients()[i]*(y^(res.exponents()[i][1]))
        diff = rres.small_roots(epsilon=eps)
        recoveredM1 = franklinReiter(n,e,diff[0],C1,C2)
        print(diff)
        print(recoveredM1)
        print(recoveredM1 + diff[0])
    e = 5
    n=0
    c1=0
    c2=0
    CoppersmithShortPadAttack(e, Integer(n), Integer(c1), Integer(c2), 1/50)
## BLOCKCHAIN
### ez2win
由于_transfer函数未正确声明导致public可以访问，而且限制较少，可以构造从Token拥有者到自己的一笔交易，每笔限制10000000，加上空投Token刚好大于10000000，调用PayForPlay时需要注意email需要base64。邮箱用的是PI:EMAIL，flag是hctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}。