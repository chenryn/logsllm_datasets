 &
 >
 ..
 -     -
 +     /     //    %
 unary operators (not   #     -     ~)
 ^
```
通常， 你可以用括号来改变运算次序。 连接操作符 ('..') 和乘方操作 ('^') 是从右至左的。 其它所有的操作都是从左至右。
### 表构建
表构造子是一个构造表的表达式。 每次构造子被执行，都会构造出一张新的表。 构造子可以被用来构造一张空表， 也可以用来构造一张表并初始化其中的一些域。 一般的构造子的语法如下
```lua
tableconstructor ::= '{' [fieldlist] '}'
fieldlist ::= field {fieldsep field} [fieldsep]
field ::= '[' exp ']' '=' exp | Name '=' exp | exp
fieldsep ::= ',' | ';'
```
每个形如 `[exp1] = exp2` 的域向表中增加新的一项， 其键为 `exp1` 而值为 `exp2` 。 形如 `name = exp` 的域等价于 `["name"] = exp`。 最后，形如 `exp` 的域等价于 `[i] = exp` ， 这里的 `i` 是一个从 `1` 开始不断增长的数字。 这这个格式中的其它域不会破坏其记数。 举个例子：
```lua
a = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }
```
等价于
```lua
do
    local t = {}
    t[f(1)] = g
    t[1] = "x"         -- 1st exp
    t[2] = "y"         -- 2nd exp
    t.x = 1            -- t["x"] = 1
    t[3] = f(x)        -- 3rd exp
    t[30] = 23
    t[4] = 45          -- 4th exp
    a = t
end
```
构造子中赋值的次序未定义。 （次序问题只会对那些键重复时的情况有影响。）
如果表单中最后一个域的形式是 `exp` ， 而且其表达式是一个函数调用或者是一个可变参数， 那么这个表达式所有的返回值将依次进入列表 （参见 §3.4.10）。
初始化域表可以在最后多一个分割符， 这样设计可以方便由机器生成代码。
### 函数调用
`Lua` 中的函数调用的语法如下：
    functioncall ::= prefixexp args
函数调用时， 第一步，prefixexp 和 args 先被求值。 如果 prefixexp 的值的类型是 function， 那么这个函数就被用给出的参数调用。 否则 prefixexp 的元方法 "call" 就被调用， 第一个参数是 prefixexp 的值， 接下来的是原来的调用参数 （参见 §2.4）。
这样的形式
```lua
functioncall ::= prefixexp ':' Name args
```
可以用来调用 "方法"。 这是 Lua 支持的一种语法糖。 像 v:name(args) 这个样子， 被解释成 v.name(v,args)， 这里的 v 只会被求值一次。
参数的语法如下：
```lua
args ::= '(' [explist] ')'
args ::= tableconstructor
args ::= LiteralString
```
所有参数的表达式求值都在函数调用之前。 这样的调用形式 `f{fields}` 是一种语法糖用于表示 `f({fields})`； 这里指参数列表是一个新创建出来的列表。 而这样的形式 `f'string'` （或是 `f"string"` 亦或是 `f[[string]]`） 也是一种语法糖，用于表示 `f('string')`； 此时的参数列表是一个单独的字符串。
`return functioncall` 这样的调用形式将触发一次 尾调用。 `Lua` 实现了 完全尾调用（或称为 完全尾递归）： 在尾调用中， 被调用的函数重用调用它的函数的堆栈项。 因此，对于程序执行的嵌套尾调用的层数是没有限制的。 然而，尾调用将删除调用它的函数的任何调试信息。 注意，尾调用只发生在特定的语法下， 仅当 `return` 只有单一函数调用作为参数时才发生尾调用； 这种语法使得调用函数的所有结果可以完整地返回。 因此，下面这些例子都不是尾调用：
```lua
return (f(x))        -- 返回值被调整为一个
return 2 * f(x)
return x, f(x)       -- 追加若干返回值
f(x); return         -- 返回值全部被舍弃
return x or f(x)     -- 返回值被调整为一个
```
### 函数定义
函数定义的语法如下：
```lua
functiondef ::= function funcbody
funcbody ::= '(' [parlist] ')' block end
```
另外定义了一些语法糖简化函数定义的写法：
```lua
stat ::= function funcname funcbody
stat ::= local function Name funcbody
funcname ::= Name {'.' Name} [':' Name]
```
该语句
```lua
function f () body end
```
被转译成
```lua
f = function () body end
```
该语句
```lua
function t.a.b.c.f () body end
```
被转译成
```lua
t.a.b.c.f = function () body end
```
该语句
```lua
local function f () body end
```
被转译成
```lua
local f; f = function () body end
```
而不是
```lua
local f = function () body end
```
（这个差别只在函数体内需要引用 `f` 时才有。）
一个函数定义是一个可执行的表达式， 执行结果是一个类型为 `function` 的值。 当 `Lua` 预编译一个代码块时， 代码块作为一个函数，整个函数体也就被预编译了。 那么，无论何时 `Lua` 执行了函数定义， 这个函数本身就进行了 实例化（或者说是 关闭了）。 这个函数的实例（或者说是 闭包）是表达式的最终值。
形参被看作是一些局部变量， 它们将由实参的值来初始化：
```lua
parlist ::= namelist [',' '...'] | '...'
```
当一个函数被调用， 如果函数并非一个 可变参数函数， 即在形参列表的末尾注明三个点 ('...')， 那么实参列表就会被调整到形参列表的长度。 变长参数函数不会调整实参列表； 取而代之的是，它将把所有额外的参数放在一起通过 变长参数表达式传递给函数， 其写法依旧是三个点。 这个表达式的值是一串实参值的列表， 看起来就跟一个可以返回多个结果的函数一样。 如果一个变长参数表达式放在另一个表达式中使用， 或是放在另一串表达式的中间， 那么它的返回值就会被调整为单个值。 若这个表达式放在了一系列表达式的最后一个， 就不会做调整了 （除非这最后一个参数被括号给括了起来）。
我们先做如下定义，然后再来看一个例子：
```lua
function f(a, b) end
function g(a, b, ...) end
function r() return 1,2,3 end
```
下面看看实参到形参数以及可变长参数的映射关系：
```lua
CALL            PARAMETERS
f(3)             a=3, b=nil
f(3, 4)          a=3, b=4
f(3, 4, 5)       a=3, b=4
f(r(), 10)       a=1, b=10
f(r())           a=1, b=2
g(3)             a=3, b=nil, ... -->  (nothing)
g(3, 4)          a=3, b=4,   ... -->  (nothing)
g(3, 4, 5, 8)    a=3, b=4,   ... -->  5  8
g(5, r())        a=5, b=1,   ... -->  2  3
```
结果由 `return` 来返回（参见 §3.3.4）。 如果执行到函数末尾依旧没有遇到任何 `return` 语句， 函数就不会返回任何结果。
关于函数可返回值的数量限制和系统有关。 这个限制一定大于 1000 。
冒号 语法可以用来定义 方法， 就是说，函数可以有一个隐式的形参 self。 因此，如下语句
```lua
function t.a.b.c:f (params) body end
```
是这样一种写法的语法糖
```lua
t.a.b.c.f = function (self, params) body end
```
## 可见性规则
Lua 语言有词法作用范围。 变量的作用范围开始于声明它们之后的第一个语句段， 结束于包含这个声明的最内层语句块的最后一个非空语句。 看下面这些例子：
```lua
x = 10                -- 全局变量
do                    -- 新的语句块
  local x = x         -- 新的一个 'x', 它的值现在是 10
  print(x)            --> 10
  x = x+1
  do                  -- 另一个语句块
    local x = x+1     -- 又一个 'x'
    print(x)          --> 12
  end
  print(x)            --> 11
end
print(x)              --> 10 （取到的是全局的那一个）
```
注意这里，类似 `local x = x` 这样的声明， 新的 `x` 正在被声明，但是还没有进入它的作用范围， 所以第二个 `x` 指向的是外面一层的变量。
因为有这样一个词法作用范围的规则， 局部变量可以被在它的作用范围内定义的函数自由使用。 当一个局部变量被内层的函数中使用的时候， 它被内层函数称作 上值，或是 外部局部变量。
注意，每次执行到一个 `local` 语句都会定义出一个新的局部变量。 看看这样一个例子：
```lua
a = {}
local x = 20
for i=1,10 do
  local y = 0
  a[i] = function () y=y+1; return x+y end
end
```
这个循环创建了十个闭包（这指十个匿名函数的实例）。 这些闭包中的每一个都使用了不同的 y 变量， 而它们又共享了同一份 x。