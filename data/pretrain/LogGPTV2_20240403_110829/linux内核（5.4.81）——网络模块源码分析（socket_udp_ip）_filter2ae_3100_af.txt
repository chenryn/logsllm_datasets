        skb = skb_peek_tail(queue);
        // skb为空(第一个skb), rt->dst.header_len为拓展头长度
        exthdrlen = !skb ? rt->dst.header_len : 0;
        // 如果开启GSO机制, mtu可直接取最大值, 否则取最大报文分段长度
        mtu = cork->gso_size ? IP_MAX_MTU : cork->fragsize;
        paged = !!cork->gso_size;
        if (cork->tx_flags & SKBTX_ANY_SW_TSTAMP &&
            sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID)
            tskey = sk->sk_tskey++;
        // 为L2层保留首部长度
        hh_len = LL_RESERVED_SPACE(rt->dst.dev);
        // udp头部 + ip选项
        fragheaderlen = sizeof(struct iphdr) + (opt ? opt->optlen : 0);
        // payload部分需要8字节对齐
        maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen;
        // 检查是否设置DF标志(动态mtu探测), 没有开启mtu探测可直接传输最大0xffff字节数据
        maxnonfragsize = ip_sk_ignore_df(sk) ? 0xFFFF : mtu;
        // 如果传输数据超过maxnonfragsize, 则报错退出
        if (cork->length + length > maxnonfragsize - fragheaderlen) {
            ip_local_error(sk, EMSGSIZE, fl4->daddr, inet->inet_dport,
                       mtu - (opt ? opt->optlen : 0));
            return -EMSGSIZE;
        }
        /*
         * transhdrlen > 0 means that this is the first fragment and we wish
         * it won't be fragmented in the future.
         */
        // 发送第一个报文&报文长度小于mtu&存在硬件校验(支持全部包校验or校验ipv4协议中的tcp/udp)&非阻塞IO or开启GSO&没有拓展头部or支持ESP硬件分片, 开启硬件校验
        if (transhdrlen &&
            length + fragheaderlen dst.dev->features & (NETIF_F_HW_CSUM | NETIF_F_IP_CSUM) &&
            (!(flags & MSG_MORE) || cork->gso_size) &&
            (!exthdrlen || (rt->dst.dev->features & NETIF_F_HW_ESP_TX_CSUM)))
            csummode = CHECKSUM_PARTIAL;
        // 零拷贝机制, 可以提升大块数据收发速度
        if (flags & MSG_ZEROCOPY && length && sock_flag(sk, SOCK_ZEROCOPY)) {
            uarg = sock_zerocopy_realloc(sk, length, skb_zcopy(skb));
            if (!uarg)
                return -ENOBUFS;
            extra_uref = !skb_zcopy(skb);    /* only ref on new uarg */
            if (rt->dst.dev->features & NETIF_F_SG &&
                csummode == CHECKSUM_PARTIAL) {
                paged = true;
            } else {
                uarg->zerocopy = 0;
                skb_zcopy_set(skb, uarg, &extra_uref);
            }
        }
        // 更新cork->length长度, 对于阻塞通信, cork->length会表示所有已存储数据长度
        cork->length += length;
        /* So, what's going on in the loop below?
         *
         * We use calculated fragment length to generate chained skb,
         * each of segments is IP fragment ready for sending to network after
         * adding appropriate IP header.
         */
        // skb为空则新建skb
        if (!skb)
            goto alloc_new_skb;
        while (length > 0) {
            /* Check if the remaining data fits into current packet. */
            // skb->len表示当前skb已存储数据, copy表示本次循环待处理数据长度
            copy = mtu - skb->len;
            // 当前skb不能容纳剩余的所有数据
            if (copy len;
            // 当前skb已满, 需要分配新的skb
            if (copy len与maxfraglen差值在[0:8)内)
                // 否则说明当前skb为第一个skb, 无需考虑上一个skb剩余数据
                if (skb_prev)
                    fraggap = skb_prev->len - maxfraglen;
                else
                    fraggap = 0;
                /*
                 * If remaining data exceeds the mtu,
                 * we know we need more fragment(s).
                 */
                // datalen记录当前skb需要存储的数据大小, 如果数据超出mtu, 按照最大mtu计算(第一个报文片段需要考虑报文头长度)
                datalen = length + fraggap;
                if (datalen > mtu - fragheaderlen)
                    datalen = maxfraglen - fragheaderlen;
                fraglen = datalen + fragheaderlen;
                pagedlen = 0;
                // 如果接下来会有数据传入且硬件不支持分散/聚合IO, 则直接分配mtu大小空间, 否则按需分析
                if ((flags & MSG_MORE) &&
                    !(rt->dst.dev->features&NETIF_F_SG))
                    alloclen = mtu;
                else if (!paged)
                    alloclen = fraglen;
                else {
                    alloclen = min_t(int, fraglen, MAX_HEADER);
                    pagedlen = fraglen - alloclen;
                }
                // 添加拓展头空间
                alloclen += exthdrlen;
                /* The last fragment gets additional space at tail.
                 * Note, with MSG_MORE we overallocate on fragments,
                 * because we have no idea what fragment will be
                 * the last.
                 */
                if (datalen == length + fraggap)
                    alloclen += rt->dst.trailer_len;
                // 第一次发送报文片段需要考虑运输层(udp)头部, 与其他片段存在差异, 使用sock_alloc_send_skb分配空间
                if (transhdrlen) {
                    skb = sock_alloc_send_skb(sk,
                            alloclen + hh_len + 15,
                            (flags & MSG_DONTWAIT), &err);
                } else {
                    skb = NULL;
                    // 如果当前套接字已分配的写缓冲区总长 > 2*sk->sk_sndbuf则发生错误
                    if (refcount_read(&sk->sk_wmem_alloc) + wmem_alloc_delta sk_sndbuf)
                        // alloc_skb 为skb分配空间
                        skb = alloc_skb(alloclen + hh_len + 15,
                                sk->sk_allocation);
                    if (unlikely(!skb))
                        err = -ENOBUFS;
                }
                if (!skb)
                    goto error;
                /*
                 *    Fill in the control structures
                 */
                // 选择校验方式
                skb->ip_summed = csummode;
                // 伪造一个校验和, 防止后面计算校验和时出现套娃
                skb->csum = 0;
                // 在skb线性区域为L2保留空间
                // skb->data&skb->head向下移动
                skb_reserve(skb, hh_len);
                /*
                 *    Find where to start putting bytes.
                 */
                // skb->tail增加, 开辟线性写入空间(skb->head: skb->tail)
                data = skb_put(skb, fraglen + exthdrlen - pagedlen);
                // 设置网络层头
                skb_set_network_header(skb, exthdrlen);
                // 设置传输层头
                skb->transport_header = (skb->network_header +
                             fragheaderlen);
                data += fragheaderlen + exthdrlen;
                if (fraggap) {
                    // 将pre_skb末尾字节复制到skb, 拷贝时校验
                    skb->csum = skb_copy_and_csum_bits(
                        skb_prev, maxfraglen,
                        data + transhdrlen, fraggap, 0);
                    skb_prev->csum = csum_sub(skb_prev->csum,
                                  skb->csum);
                    data += fraggap;
                    pskb_trim_unique(skb_prev, maxfraglen);
                }
                // 调用getfrag(), 复制copy字节数据至skb, getfrag由上层协议指定(本例为udp)
                copy = datalen - transhdrlen - fraggap - pagedlen;
                if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) tx_flags = cork->tx_flags;
                cork->tx_flags = 0;
                skb_shinfo(skb)->tskey = tskey;
                tskey = 0;
                skb_zcopy_set(skb, uarg, &extra_uref);
                if ((flags & MSG_CONFIRM) && !skb_prev)
                    skb_set_dst_pending_confirm(skb, 1);
                /*
                 * Put the packet on the pending queue.
                 */
                if (!skb->destructor) {
                    // 销毁skb后, 恢复相应的wmem_alloc_delta数据容量
                    skb->destructor = sock_wfree;
                    skb->sk = sk;
                    wmem_alloc_delta += skb->truesize;
                }
                // 添加skb至队列
                __skb_queue_tail(queue, skb);
                continue;
            }
            // skb剩余空间足够存储剩余数据
            if (copy > length)
                copy = length;
            // 如果硬件不支持分散/聚合IO, 使用线性区域存储数据
            if (!(rt->dst.dev->features&NETIF_F_SG) &&
                skb_tailroom(skb) >= copy) {
                unsigned int off;
                off = skb->len;
                // 硬件不支持分散/聚合IO, 使用getfrag复制数据至线性区域(更新skb->tail), 更新偏移
                if (getfrag(from, skb_put(skb, copy),
                        offset, copy, off, skb) zerocopy) {
                // 填充至非线性区域, skb的frags数组中
                int i = skb_shinfo(skb)->nr_frags;
                err = -ENOMEM;
                if (!sk_page_frag_refill(sk, pfrag))
                    goto error;
                if (!skb_can_coalesce(skb, i, pfrag->page,
                              pfrag->offset)) {
                    err = -EMSGSIZE;
                    if (i == MAX_SKB_FRAGS)
                        goto error;
                    __skb_fill_page_desc(skb, i, pfrag->page,
                                 pfrag->offset, 0);
                    skb_shinfo(skb)->nr_frags = ++i;
                    get_page(pfrag->page);
                }
                copy = min_t(int, copy, pfrag->size - pfrag->offset);
                if (getfrag(from,
                        page_address(pfrag->page) + pfrag->offset,
                        offset, copy, skb->len, skb) offset += copy;
                skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);
                skb->len += copy;
                skb->data_len += copy;
                skb->truesize += copy;
                wmem_alloc_delta += copy;
            } else {
                // 使用零拷贝技术填充skb
                err = skb_zerocopy_iter_dgram(skb, from, copy);
                if (err sk_wmem_alloc);
        return 0;
    error_efault:
        err = -EFAULT;
    error:
        if (uarg)
            sock_zerocopy_put_abort(uarg, extra_uref);
        cork->length -= length;
        IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTDISCARDS);
        refcount_add(wmem_alloc_delta, &sk->sk_wmem_alloc);
        return err;
    }
###  4.4 ip_send_skb
> ip_send_skb->ip_local_out
    int ip_send_skb(struct net *net, struct sk_buff *skb)
    {
        int err;
        err = ip_local_out(net, skb->sk, skb);
        if (err) {
            if (err > 0)
                // 传递底层错误信息至上层协议
                err = net_xmit_errno(err);
            if (err)
                IP_INC_STATS(net, IPSTATS_MIB_OUTDISCARDS);
        }
        return err;
    }
    int ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
    {
        int err;
        // 填充ip头部, 判断数据包是否允许通过
        err = __ip_local_out(net, sk, skb);
        if (likely(err == 1))
            // 发送数据包
            err = dst_output(net, sk, skb);
        return err;
    }
###  4.4.1 __ip_local_out
    int __ip_local_out(struct net *net, struct sock *sk, struct sk_buff *skb)
    {
        struct iphdr *iph = ip_hdr(skb);
        // 填充ip报文长度
        iph->tot_len = htons(skb->len);
        // 计算ip校验和
        ip_send_check(iph);
        /* if egress device is enslaved to an L3 master device pass the
         * skb to its handler for processing
         */
        // 设置出口设备为l3主设备(虚拟网卡)
        skb = l3mdev_ip_out(sk, skb);
        if (unlikely(!skb))
            return 0;
        skb->protocol = htons(ETH_P_IP);
        // 检查此处是否存在网络数据包过滤器, 如果存在则执行过滤操作, 并将dst_output作为回调函数
        return nf_hook(NFPROTO_IPV4, NF_INET_LOCAL_OUT,
                   net, sk, skb, NULL, skb_dst(skb)->dev,
                   dst_output);
    }