2
3
4
5
6
try{ res = getRPC(peerIP,port).getBlockNumber();
} catch (Exception e) { if (e instanceOf Timeout)
continue; }
return port; }
return -1;} // not a RPC node
7
8
9
10 bool TestHoneypot(Peer peerIP){
11
12
13
14
15
//tx is a double-spend
try{ txhash = peerIP.sendTransaction(tx);
} catch(Exception e){ return false; }
if (txhash > 0) return true; //is a honeypot
else return false;}
Fig. A.14: Benchmark programs to characterize a public RPC
peer
a) Module 1: Classify Ethereum Peers: A public RPC
peer is an Ethereum peer who accepts RPC requests from
anyone on the Internet. To distinguish a public RPC peer from
a non-RPC peer, we aim to answer the following questions: 1)
if a peer has a port that responds to incoming RPC requests,
and 2) if a RPC peer is a honeypot.
To test
if a peer supports RPC, we set up a mea-
surement node to scan the ports of a target peer, using
nmap [36] and starting with the default ports, 8545. For
each open port identiﬁed, it then sends a RPC request (e.g.,
eth_getBlockNumber()) and observes any response be-
fore timeout.
A honeypot in this work is an Ethereum peer who does
not follow the Ethereum protocol and conceals its derailing
behavior to appear as a honest node. For instance, a honeypot
peer falsely returns success to any received transactions with-
out actually validating them, or it does validate a transaction
but without propagating it. In practice, honeypot nodes exist
for measurement or attacking purposes (e.g., useful to attract
actual attackers without affecting the mainnet [48]). From the
DoERS’s point of view, a honeypot may not be a preferred
target as it does not serve real DApp workloads. To test if
a peer is a honeypot, our measurement node ﬁrst sends to
the target peer a double-spending transaction and observes
the response. If the response is a success (meaning falsely
admitting a double-spending transaction), the peer must be a
honeypot. Otherwise, our measurement node then sends a valid
transaction, and observe if the transaction will appear in other
Ethereum peers. If not, the target peer is a honeypot. In our
approach, the ﬁrst step is free and the second step uses very
low gas prices to reduce the cost.
b) Module 2: Test Gas Limits: Given a public Ethereum
RPC peer identiﬁed by the previous Module 1, the goal of
Module 2 is to test if there is any Gas limit conﬁgured on the
peer, and if so how much the limit is.
Our
test program, named by rpc_gasLimit,
is in
int lengthLower=0; int lengthUpper=500;//0/500 block gas
while (lengthUpper - lengthLower > 1){
arrayLength = (lengthLower + lengthUpper) / 2;
try{
rpcNode.eth_call(exhaustMem,arrayLength);
1 float rpc_gasLimit(IP rpcNode){
2
3
4
5
6
7
8
9
10
11
12
13
14
} else { //no gas limits
} (Exception e) {
return 0;}
} else {
lengthLower = arrayLength;}}
if(e instanceOf OutofGasException){
lengthUpper = arrayLength;
return localNode.estmateGas(exhaustMem,arrayLength);}
Fig. A.15: Measure Gas limit of an RPC node
List A.15. The goal of the test program is to ﬁnd the maximal
argument (arrayLength in function exhaustMem()) that
does not trigger the out-of-gas exception, a value that implies
the Gas limit. To do so, the program starts with an initial
guess on the target arrayLength value, then grows the
guess exponentially until the ﬁrst exception is observed. It
then enters the second phase that binary-search the Gas-limit
corresponding value of arrayLength. After the target value
V is obtained,
the program then uses a local RPC node
(under our control) to run estimateGas() with function
exhaustMem under V . The returned value is the Gas limit.
Note that our design uses exhaustMem function which
consumes gas faster than the other two exhaustXXs and can
ﬁnish before Ethereum’s default 5-second timeout.
2) Measurement Results: Public RPC peers: We conduct
a passive measurement study on the Ethereum DevP2P net-
work [11] for a 96-hour period (from April. 08 to April. 12
2020). This passive measurement method is inspired by [57].
We launch eight measurement nodes and remove the default
maximal number of the neighbors allowed on them, such
that each node can be connected by as many Ethereum
peers as possible. The dynamic nature of Ethereum and its
peer discovery mechanism [37] ensures that our measurement
nodes can be constantly discovered by and connected to new
Ethereum peers. In the measurement period, we record the
IPs of all the neighbors of our eight measurement nodes, and
remove the duplicated ones. Additionally, for each connected
neighbor, our measurement node gets engaged in the Ethereum
handshake process9 through which the network identiﬁer of the
neighbor is revealed (more speciﬁcally, in the genesis block
header exchanged through the STATUS message). We then
select the neighbor peers with the “mainnet” identiﬁer. During
this 96-hour period, the measurement node ﬁnds a total of
8924 distinct Ethereum peers in the mainnet.
Based on the 8924 mainnet peers, we run our benchmark
scripts in Figure A.14 against each peer. It ﬁnds 439 public
RPC peers, among which 348 (91) use the default (non-
default) RPC ports (the default RPC port is 8545). Among the
439 public RPC peers in the mainnet, 436 are non-honeypots.
Gas limits: We then move forward to measure the Gas limits
9The handshake process runs a series of protocols including RLPX,
DevP2P and Ethereum subprotocol, and the STATUS message is in the
Ethereum subprotocol.
TABLE II: Measurement results of public RPC peers in
Ethereum
Ethereum-mainnet peers
RPC peers in mainnet (default/non-default
port)
Public RPC peers (i.e., w. a RPC port, in
mainnet and non-honeypot)
Public RPC peers without gas limits
Public RPC peers with gas limits
8927
439 (348/91)
436
348
88
of these non-honeypot, mainnet, RPC peers (which we will
simply refer to as public RPC peers). We used the script in
Figure A.15. We found out of 436 public RPC peers, 88 have
a non-zero Gas limit, among which two have a limit of 782.5
block gas, one has a limit of 214 block gas and all others
running Parity have 50 block gas as the limit.10
Timeout: On nodes without gas limits, we measure the
response time of a RPC call throwing timeout exception and
observe the measured time on all nodes is consistent with the
default 5 second timeout in EVM.
3) Attack Strategies and Security Implication: This result
reveals two types of RPC nodes on Ethereum mainnet: 348
RPC peers without gas limits and 88 RPC peers conﬁgured
with a quite loose gas limit (mostly 50 block gas).
For the RPC node without gas limit, we design a single-
request DoERS attack that has the power of evading all
other protective measures we will observe in the next section
(including rate limiting and load balancing). The attack sends a
single request with a very large payload size (e.g., 109) to run
the exhaustMem function in the DoERS-C smart contract.
The key observation here is this: exhaustMem runs a single
EVM instruction, namely CODECOPY,
to allocate a large
memory. Running a single EVM instruction is atomic and is
not interrupted, even when there is a timeout. Thus, the DoERS
attacker can increase the payload size of an exhaustMem
invocation to evade the 5-second timeout, causing a higher
resource consumption and more sever service damage, as will
be evaluated in § V-B.
For the RPC node with gas limit, the gas limit, which is
mostly 50 block gas, is rather loose. The attacker can send
multiple DoERS requests, each with a medium payload size
under the gas limit. If the requests are sent at a sufﬁciently
high rate, there will be visible service interference, as will be
evaluated in § V-A and § V-B.
The insecurity of RPC nodes further imply the insecurity
of DApps. Because by default, RPC open to public clients
is turned off on Geth [22] and Parity [61], the fact that
these identiﬁed nodes have RPC manually turned on could
mean they are intentionally used to host some DApps, as an
in-house solution. The insecurity of these RPC nodes could
affect the DApps hosted in house.
4) Evaluation on DoERS Effectiveness: We select a pub-
the mainnet
lic node from our measurement result (i.e.,
scan of
that did not set Gas limits. On this
node, we mount a DoERS attack with following parameters:
IPs/ports)
10The default gas limit in Parity is 50 block gas.
17
(a) (cid:104)Mem, 80M, 0(cid:105)
(b) (cid:104)CPU, 50K, 60(cid:105)
Fig. A.16: Evaluate DoERS on a Public RPC Node
(18.179.10.63:8545)
eth_call(exhaustCPU(5 ∗ 104)) at the rate of 60 re-
quests per second. The result is reported in Figure A.16b.
After the attack starts at the 5th second, the response time
is increased by 2× (from 0.2 seconds to 0.4 seconds).
On the same node, we then send the following single-request
attack: eth_call(exhaustMem(8 ∗ 107)). The result is
in Figure A.16a which shows a 4× increase of response time
after the attack starts (from 0.2 seconds to 0.8 seconds).
B. Measuring Rate Limits on RPC Services
Many RPC services have deployed rate limiting on their
frontend. We write a simple test program that sends RPCs at
a certain rate for a period of time. During the measurement,
we increase rates and vary the measurement duration,
to
observe if an “max rate reached” exception is thrown or if
the response returns null. The exception means a maximal
rate is reached. Here, what’s sent are normal RPCs, such as
eth_getBlockNumber.
The results in Table III show that the measured rate limits
are often inconsistent with the numbers published on services’
websites.
C. Estimating Peer Count
Recall (§ IV-A) that some services’ load balancers depend
on the timing of the requests. Based on the timing dependency,
we can design further measurements and estimate the peer
count of the service. To do so, we ﬁrst measure the expiration
time of an orphan transaction. To do so, we send an orphan
TABLE III: Characterizing Ethereum RPC services in gas and
rate limits (in red are the detected absence of gas limits which
poses vulnerability. Also can be seen is the inconsistency
between the rate limits published on their websites and the
rates revealed thru. the measurements.)
RPC services
Client
Published
ServiceX1
ServiceX2
ServiceX3
ServiceX4
ServiceX5
ServiceX6
ServiceX7
ServiceX9
2/sec.
3/sec.
Unlimited
N/A
Geth
ethshared
Parity
Geth
N/A
Geth-
omnibus
Geth
400/min
AnonymizedUnlimited
Unlimited
5/sec./IP
105/day
Rate limits (free tier)
Measured
1 ∼ 2/sec.
> 7200/min.
< 2/sec.
6000 ∼ 6060/min.
2.33 ∼ 2.66/sec.
(40.60 ∼ 40.75) ∗ 105/day
240 ∼ 300/min
750 ∼ 900/min.
Mining




N/A



transaction with nonce + 2 (nonce is the nonce of the latest
conﬁrmed transaction) and wait t seconds before sending the
second transaction with nonce + 1. The second transaction
makes the orphan transaction become un-orphaned. Thus by
checking whether the orphan transaction was propagated (thru.
eth_getTransaction), one can know that if the orphan
transaction has lived t seconds. In other words, the lifetime
of an orphan transaction must be longer than t seconds. By
varying t, one can get the exact expiration time of an orphan
transaction. By this means, we measure ServiceX6 and obtain
that an orphan transaction expires in 64 minutes.
With the knowledge of orphan expiration time t and the
timing behavior, one can infer the peer count in a RPC service.
We design the following experiment: In a period of 64 minutes,
we send three orphan transactions every minute (in its ﬁrst
20 seconds). We observe that all 192 orphan transactions
succeeded. This result implies that there are at least 192 RPC
peers in the backend of ServiceX6.11
We have measured ServiceX9’s orphan expiration time in
the similar fashion with ServiceX6 and obtained 40 second.
This result implies there are at least 6 nodes in the backend
of ServiceX9 service.
11Otherwise, with fewer than 192 peers, it would cause at two orphans to
collide on the same peer, one of which must fail.
18
0102030405060Timeline (second)0.00.20.40.60.81.01.2Response time (second)0102030405060Timeline (second)0.00.10.20.30.40.50.6Response time (second)