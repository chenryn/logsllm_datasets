Fig. 12: Probability that a user correctly identiﬁes the browser
with Chrome Zero and the corresponding standard error. Only
for one website (yahoo.com) the users had a chance of iden-
tifying the browser with Chrome Zero that was clearly above
the random guessing probability.
For the 19 websites where at least one Chrome Zero policy was
active, users guessed correctly in 50.8 % on average (standard
error ±0.055), i.e., a deviation of 0.8pp to random guessing.
This highlights how negligible the differences in the user
experience are.
While their classiﬁcation of the instance was many times
incorrect, participants stated loading time, cookie-policy dia-
logues and website redirections as the reason for selecting the
instance as the one using Chrome Zero.
Although our implementation is only a proof-of-concept
implementation, the results of the study conﬁrm that JavaScript
Zero is practical, and our implementation of Chrome Zero is
usable on a day-to-day basis.
VIII. RELATED WORK
In this section, we discuss related work on protecting
users from the execution of potential harmful JavaScript code.
While there are several proposed solutions, JavaScript Zero is
the only technique fully implemented as a browser extension
only (Chrome Zero) without negatively affecting the browsing
experience. Chrome Zero does not rely on any changes to
existing source code or the system’s environment and thus does
not require support by developers or browser vendors.
a) Browser extensions: Browser extensions such as
NoScript [10] or uBlock [37] allow users to deﬁne policies
to permit or prohibit the execution of JavaScript depending on
their origin, i.e., a page can either completely block JavaScript
or execute it without any restrictions. In contrast, Chrome Zero
offers a more ﬁne-grained permission model that operates on
function level and does not interfere with dynamic website
content. Furthermore, JavaScript Zero directly targets attack
prevention, whereas existing browser extensions aim primarily
at blocking advertisements and third-party tracking code.
In concurrent work, Snyder et al. [41] proposed a browser
extension to protect against exploits in general, based on
the same generic idea as JavaScript Zero. They ﬁrst exhaus-
tively evaluate the usage statistics of JavaScript APIs and
their connection to CVEs and then, similar to our approach,
selectively block the corresponding JavaScript APIs. Based
google.comyoutube.comfacebook.combaidu.comwikipedia.orgyahoo.comqq.comreddit.comtaobao.comtwitter.comamazon.comtmall.comsohu.comlive.comvk.cominstagram.comsina.com.cnjd.comweibo.com360.cnlinkedin.comyandex.runetﬂix.comebay.comimgur.com25%50%75%Top25AlexadomainsProbabilityactivepoliciesnoactivepolicieson this approach they block 52% of all CVEs, while only
impacting the usability of 4% to 7% of the tested websites.
When a usability impact on 16% of the tested websites is still
acceptable, they can even block 72% of all CVEs. This is a
signiﬁcantly lower usability impact than previous approaches
like NoScript [10] or uBlock [37]. With our focus on mitigating
microarchitectural and side-channel attacks, we complement
the work by Snyder et al. [41] and show that the underlying
generic idea is not only applicable to CVEs or side-channel
attacks, but
to both types of attacks. This highlights the
strength of the underlying idea of both papers.
b) Modiﬁed browsers: Meyerovich et al. [24] modiﬁed
the JavaScript engine of Internet Explorer 8 to enforce ﬁne-
grained application-speciﬁc runtime security policies by the
website developer. In contrast, JavaScript Zero is implemented
as a browser extension and does not rely on any developer to
deﬁne security policies. Patil et al. [35] analyzed the access
control requirements in modern web browsers and proposed
JCShadow, a ﬁne-grained access control mechanism in Firefox.
JCShadow splits the running JavaScript into groups with an
assigned isolated copy of the JavaScript context. A security
policy then deﬁnes which code is allowed to access objects
in other shadow contexts to separate untrusted third-party
JavaScript code from the website. Stefan et al. [43] proposed
COWL, a label-based mandatory access control system to
sandbox third-party scripts. Bichhawat et al. [5] proposed
WebPol, a ﬁne-grained policy framework to deﬁne the aspects
of an element accessible by third-party domains by exposing
new native APIs. All these approaches assume a benign web-
site developer protecting their website from untrusted—and
possibly malicious—third-party libraries trying to manipulate
their website. In contrast, JavaScript Zero does not make any
assumptions in this direction. Any website or library developer
may be malicious, trying to attack the user. JavaScript Zero
neither relies on website developers nor requires any modiﬁ-
cations of the browser or the JavaScript engine.
Kohlbrenner et al. [18] proposed Fuzzyfox, a modiﬁed ver-
sion of Firefox that mediates all timing sources by degrading
the resolution of explicit timers and implicit clocks to 100 ms.
In contrast to Fuzzyfox, JavaScript Zero successfully prevents
not only timing attacks but also attacks which do not require
high-resolution timing measurements. Mao et al. [21] studied
timing-based probing attacks that
indirectly infer sensitive
information from the website. Their tool only allows to identify
malicious operations performing timing-based probing attacks
based on generalized patterns, e.g., the frequency of timing
API usage. JavaScript Zero directly prevents the attack by
either disallowing timers or making them too coarse-grained.
implemented
BrowserShield, a service that automatically rewrites websites
and embedded JavaScript to apply run-time checks to ﬁlter
known vulnerabilities. Yu et al. [56] proposed to automatically
rewrite untrusted JavaScript code through a web proxy, in order
to ask the user how to proceed on possible dangerous behavior,
e.g., opening many pop-ups or cookie exﬁltration attacks. Their
model only covers policies with respect to opening URLs,
windows, and cookie accesses, and does not protect against
side-channel attacks. Moreover, JavaScript Zero does neither
rewrite any existing code nor rely on any possibly platform-
dependent service such as a web proxy.
c) Code rewriting: Reis et al.
[38]
d) JavaScript frameworks: Agten et al. [1] presented
JSand, a client-side JavaScript sandboxing framework that
enforces a server-speciﬁed policy to jail included third-party
libraries. Phung et al. [36] proposed to modify code in or-
der to protect it from inappropriate behavior of third-party
libraries. Their implementation requires website developers
to manually add protection code to their website. However,
their protection does not apply to scripts loaded in a new
context, i.e., with , , or refresh directives.
Guan et al. [16] studied the privacy implications of the
HTML5 postMessage function and developed a policy-
based framework to restrict unintended cross-origin messages.
As our countermeasure is implemented solely as a browser
extension, it does not rely on any website developer to use a
certain library or to apply any changes to the code.
IX. CONCLUSION
In this paper, we presented JavaScript Zero, a highly prac-
tical and generic ﬁne-grained permission model in JavaScript
to reduce the attack surface in modern browsers. JavaScript
Zero leverages advanced JavaScript language features, such as
virtual machine layering, closures, proxy objects, and object
freezing, for security and privacy. Hence, JavaScript Zero is
fully transparent to website developers and users and even
works with obfuscated code and higher-order scripts. Our
proof-of-concept Google Chrome extension, Chrome Zero,
successfully protects against 11 unﬁxed state-of-the-art mi-
croarchitectural and side-channel attacks. As a side effect,
Chrome Zero successfully protects against 50 % of the pub-
lished JavaScript 0-day exploits since Chrome 49. Chrome
Zero has a low-performance overhead of only 1.82% on aver-
age. In a double-blind user study, we found that for 24 websites
in the Alexa Top 25, users could not distinguish browsers with
and without Chrome Zero correctly, showing that Chrome Zero
has no perceivable (negative) effect on most websites. Our
work shows that transparent low-overhead defenses against
JavaScript-based state-of-the-art microarchitectural attacks and
side-channel attacks are practical.
ACKNOWLEDGMENT
We would like to thank our anonymous reviewers for their
valuable feedback and our study participants for their time.
This work has been supported by the Austrian Research Pro-
motion Agency (FFG), the Styrian Business Promotion Agency
(SFG), the Carinthian Economic Promotion Fund (KWF) under
grant number 862235 (DeSSnet) and has received funding from
the European Research Council (ERC) under the European
Union’s Horizon 2020 research and innovation programme
(grant agreement No 681402).
REFERENCES
[1] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung, L. Desmet,
and F. Piessens, “Jsand: complete client-side sandboxing of third-party
javascript without browser modiﬁcations,” in Proceedings of the 28th
Annual Computer Security Applications Conference, 2012.
[2] Alex Christensen, “Reduce resolution of performance.now.” 2015.
[Online]. Available: https://bugs.webkit.org/show bug.cgi?id=146531
[3] Apple,
“JetStream 1.1,” Aug. 2017.
//browserbench.org/JetStream
[Online]. Available: http:
[4] D. J. Bernstein, “Cache-Timing Attacks on AES,” 2004. [Online].
Available: http://cr.yp.to/antiforgery/cachetiming-20050414.pdf
14
[5] A. Bichhawat, V. Rajani, J. Jain, D. Garg, and C. Hammer, “Webpol:
Fine-grained information ﬂow policies for web browsers,” in ES-
ORICS’17, 2017, (to appear).
[6] Boris Zbarsky, “Reduce resolution of performance.now.” 2015.
[Online]. Available: https://hg.mozilla.org/integration/mozilla-inbound/
rev/48ae8b5e62ab
[7] L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion,” in USENIX Workshop on Hot Topics
in Security – HotSec, 2011.
[8] Chris Peterson, “Bug 1313580: Remove web content access to Battery
API,” 2016. [Online]. Available: https://bugzilla.mozilla.org/show bug.
cgi?id=1313580
[9] Chromium,
“window.performance.now does
millisecond precision on Windows,” 2015.
https://bugs.chromium.org/p/chromium/issues/detail?id=158234#c110
sub-
not
[Online]. Available:
support
[10] Giorgio Maone, “NoScript - JavaScript/Java/Flash blocker for a safer
Firefox experience!” Jul. 2017. [Online]. Available: https://noscript.net
[11] Google, “Chrome DevTools Protocol Viewer,” 2017. [Online]. Avail-
able: https://developer.chrome.com/devtools/docs/debugger-protocol
[12] ——, “chrome.debugger,” 2017. [Online]. Available: https://developer.
chrome.com/extensions/debugger
[13] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on
the Line: Practical Cache Attacks on the MMU,” in NDSS’17, 2017.
[14] D. Gruss, D. Bidner, and S. Mangard, “Practical memory deduplication
attacks in sandboxed javascript,” in ESORICS’15, 2015.
[15] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A Remote
Software-Induced Fault Attack in JavaScript,” in DIMVA’16, 2016.
[16] C. Guan, K. Sun, Z. Wang, and W. Zhu, “Privacy breach by exploiting
postmessage in html5: Identiﬁcation, evaluation, and countermeasure,”
in ASIACCS’16, 2016.
[17] P. C. Kocher, “Timing Attacks on Implementations of Diffe-Hellman,
RSA, DSS, and Other Systems,” in CRYPTO’96, 1996.
[18] D. Kohlbrenner and H. Shacham, “Trusted browsers for uncertain
times,” in USENIX Security Symposium, 2016.
[19] E. Lavoie, B. Dufour, and M. Feeley, “Portable and efﬁcient run-time
monitoring of javascript applications using virtual machine layering,”
in European Conference on Object-Oriented Programming, 2014.
[21]
[20] M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice, and S. Mangard,
“Practical Keystroke Timing Attacks in Sandboxed JavaScript,” in
ESORICS’17, 2017, (to appear).
J. Mao, Y. Chen, F. Shi, Y. Jia, and Z. Liang, “Toward Exposing
Timing-Based Probing Attacks in Web Applications,” in International
Conference on Wireless Algorithms, Systems, and Applications, 2016.
[22] C. Maurice, M. Weber, M. Schwarz, L. Giner, D. Gruss, C. A. Boano,
S. Mangard, and K. R¨omer, “Hello from the Other Side: SSH over
Robust Cache Covert Channels in the Cloud,” in NDSS’17, 2017.
[23] M. Mehrnezhad, E. Toreini, S. F. Shahandashti, and F. Hao, “Touchsig-
natures: identiﬁcation of user touch actions and pins based on mobile
sensor data via javascript,” Journal of Information Security and Appli-
cations, 2016.
[24] L. A. Meyerovich and B. Livshits, “Conscript: Specifying and enforcing
ﬁne-grained security policies for javascript in the browser,” in S&P’10,
2010.
[25] Mike Perry, “Bug 1517: Reduce precision of time for Javascript.”
2015. [Online]. Available: https://gitweb.torproject.org/user/mikeperry/
tor-browser.git/commit/?h=bug1517
[26] Mozilla Developer Network, “ArrayBuffer,” 2017. [Online]. Avail-
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/
able:
Global Objects/ArrayBuffer
[27] ——, “debugger,” 2017. [Online]. Available: https://developer.mozilla.
org/en-US/docs/Web/JavaScript/Reference/Statements/debugger
[28] ——, “Proxy,” 2017. [Online]. Available: https://developer.mozilla.org/
en/docs/Web/JavaScript/Reference/Global Objects/Proxy
[29] Nolan Lawson, “A tiny and mostly spec-compliant WebWorker polyﬁll,”
Nov. 2016. [Online]. Available: https://github.com/nolanlawson/pseudo-
worker
J. Nymann, “On the probability that k positive integers are relatively
prime,” Journal of Number Theory, 1972.
[30]
[31] L. Olejnik,
“Stealing
data with
the
[Online]. Avail-
https://blog.lukaszolejnik.com/stealing-sensitive-browser-data-
W3C Ambient Light
able:
with-the-w3c-ambient-light-sensor-api/
browser
2017.
Sensor API,”
sensitive
[32] L. Olejnik, G. Acar, C. Castelluccia, and C. Diaz, “The leaking battery,”
in Revised Selected Papers of the 10th International Workshop on Data
Privacy Management, and Security Assurance - Volume 9481, 2016.
[33] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The
Spy in the Sandbox: Practical Cache Attacks in JavaScript and their
Implications,” in CCS’15, 2015.
[34] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and Counter-
measures: the Case of AES,” in CT-RSA, 2006.
[35] K. Patil, X. Dong, X. Li, Z. Liang, and X. Jiang, “Towards ﬁne-grained
access control in javascript contexts,” in 31st International Conference
on Distributed Computing Systems (ICDCS), 2011.
[36] P. H. Phung, D. Sands, and A. Chudnov, “Lightweight self-protecting
javascript,” in ASIACCS’09, 2009.
[37] Raymond Hill, “uBlock Origin - An efﬁcient blocker for Chromium
[Online]. Available:
Jul. 2017.
and Firefox. Fast
and lean.”
https://github.com/gorhill/uBlock
[38] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir,
“Browsershield: Vulnerability-driven ﬁltering of dynamic html,” in
USENIX Symposium on Operating Systems Design and Implementation,
2006.
[39] Ross McIlroy, “Firing up the Ignition Interpreter,” Aug. 2017.
[Online]. Available: https://v8project.blogspot.co.at/2016/08/ﬁring-up-
ignition-interpreter.html
[40] M. Schwarz, C. Maurice, D. Gruss, and S. Mangard, “Fantastic Timers
and Where to Find Them: High-Resolution Microarchitectural Attacks
in JavaScript,” in FC’17, 2017.
[41] P. Snyder, C. Taylor, and C. Kanich, “Most Websites Don’t Need to
Vibrate: A Cost-Beneﬁt Approach to Improving Browser Security,” in
CCS’17, 2017.
[42] R. Spreitzer, “Pin skimming: Exploiting the ambient-light sensor in
mobile devices,” in Proceedings of the 4th ACM Workshop on Security
and Privacy in Smartphones & Mobile Devices, 2014.
[43] D. Stefan, E. Z. Yang, P. Marchenko, A. Russo, D. Herman, B. Karp,
and D. Mazi`eres, “Protecting users by conﬁning javascript with cowl,” in
USENIX Symposium on Operating Systems Design and Implementation,
2014.
[44] P. Stone, “Pixel perfect timing attacks with html5,” Context Information
Security (White Paper), 2013.
[45] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still
ticking: Timing attacks in the modern web,” in CCS’15, 2015.
[46] B. C. Vattikonda, S. Das, and H. Shacham, “Eliminating ﬁne grained
timers in Xen,” in CCSW’11, 2011.
[47] P. Vila and B. K¨opf, “Loophole: Timing attacks on shared event loops
in chrome,” in USENIX Security Symposium, 2017, (to appear).
[48] W3C,
“Battery Status API,” 2016.
//www.w3.org/TR/battery-status/
[Online]. Available: https:
[49] ——, “Geolocation API Speciﬁcation 2nd Edition,” 2016. [Online].
Available: https://www.w3.org/TR/geolocation-API/
[50] ——, “Ambient Light Sensor,” 2017.
//www.w3.org/TR/ambient-light/
[Online]. Available: https:
[51] ——,
“DeviceOrientation Event Speciﬁcation,” 2017.
Available: https://www.w3.org/TR/orientation-event/
[Online].
[52] ——, “Generic Sensor API,” 2017.
[Online]. Available: https:
//www.w3.org/TR/2017/WD-generic-sensor-20170530/
[53] ——, “Javascript APIs Current Status,” 2017. [Online]. Available:
https://www.w3.org/standards/techs/js
[54] W3Techs, “Usage of JavaScript for websites,” Aug. 2017. [Online].
Available: https://w3techs.com/technologies/details/cp-javascript/all/all
[55] Y. Yarom and K. Falkner, “Flush+Reload: a High Resolution, Low
Noise, L3 Cache Side-Channel Attack,” in USENIX Security Sympo-
sium, 2014.
[56] D. Yu, A. Chander, N. Islam, and I. Serikov, “Javascript instrumentation
for browser security,” in ACM SIGPLAN Notices, 2007.
15