    message2 = ''
    for i in s:
        message2 += chr(i)
    charList = obj.decrypt(message2)
    listA = [0,1,14,12,17,18,19,27,28,2,15,20,31,29,30,16,13,5]
    flag = ''
    for i in listA:
        flag += charList[i]
    print(flag)
这样就将前半段还原了，后半段的加密很类似，只是这次做了一个后序遍历，且在sub_4021de中做了对sub_401e79的smc，xor
rand(),seed用的是所有字符的和。由于sub_401e79在start后已经被xor了一次，所以假如像我这样逆向从后往前逆的人会非常痛苦，直接爆破是肯定出不来的。最后是有一个后续遍历的字符对应在原输入串的位置的判断，且这里都是后半段的字符，所以这里解完就能拿到flag了。那段smc解完如下:
    _DWORD *__usercall sub_401E8F@(int a1@)
    {
      _DWORD *result; // eax
      while ( *(_DWORD *)(a1 - 12) > 4])
            i += 1
        elif(opcode[i] == 0x88):
            print(i,'mov ' + reg[opcode[i + 1] >> 4] + ', %d'%opcode[i + 2])
            i += 1
        elif(opcode[i] == 0x89 or opcode[i] == 0x96):
            print(i,'mov ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x8a):
            print(i,'pop ' + reg[opcode[i + 1] >> 4])
            i += 1
        elif(opcode[i] == 0x8b):
            print(i,'add ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x8c):
            print(i,'sub ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x8d):
            print(i,'mul ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x8e):
            print(i,'div ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x8f):
            print(i,'mod ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x90):
            print(i,'xor ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x91):
            print(i,'and ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x92):
            print(i,'mov edi,' + reg[opcode[i + 1] >> 4])
            i += 1
        elif(opcode[i] == 0x93):
            print(i,'inc ' + reg[opcode[i + 1] >> 4])
            i += 1
        elif(opcode[i] == 0x94):
            print(i,'dec ' + reg[opcode[i + 1] >> 4])
            i += 1
        elif(opcode[i] == 0x95):
            print(i,'mov ' + reg[opcode[i + 1] >> 4] + ', %d'%((opcode[i + 2] > 4] + ',' + 'input')
            i += 1
        elif(opcode[i] == 0x98):
            print(i,'mov ' + 'input' + ',' + reg[opcode[i + 1] >> 4])
            i += 1
        elif(opcode[i] == 0x99):
            print(i,'inc input')
        elif(opcode[i] == 0x9a):
            print(i,'add input,4')
        elif(opcode[i] == 0x9b):
            print(i,'cmp ' + reg[opcode[i + 1] >> 4] + ',' + reg[opcode[i + 1] & 0xf])
            i += 1
        elif(opcode[i] == 0x9c):
            print(i,'jl ' + '%d'%(i + opcode[i + 1] + 2))
            i += 1
        elif(opcode[i] == 0x9d or opcode[i] == 0x9f):
            print(i,'jg ' + '%d'%(i + opcode[i + 1] + 2))
            i += 1
        elif(opcode[i] == 0x9e):
            print(i,'je ' + '%d'%(i + opcode[i + 1] + 2))
            i += 1
        elif(opcode[i] == 0xa1):
            print(i,'jmp ' + '%d'%(i - opcode[i + 1]))
            i += 1
        elif(opcode[i] == 0xa3):
            print(i,'break')
        else:
            i += 1
        i += 1
    listA = [62,26,86,13,82,19,88,90,110,92,15,90,70,7,9,82,37,92,76,10,10,86,51,64,21,7,88,15][::-1]
    import string
    flag = ''
    #((input * 63) + 123) % 128
    for i in range(len(listA)):
        for j in string.printable:
            if((ord(j) * 63 + 123) % 128) == listA[i]:
                flag += j
    print(flag)
## 想起“ Lunatic Game ”
这道题是真签到题。  
就是一个扫雷游戏，map每次都不一样，玩通游戏就给你flag。  
考虑到flag都应该是相同的，那么做法其实就很多了，改跳转改ip都可以，但我第一次改ip是炸了的，又不想去看程序，  
也怕中间又比较了点东西，就用x64dbg将地图dump了下来，完整扫了一遍雷，就拿到flag了~
## 想起“壶中的大银河 ～ Lunatic ”
sub_39D3 从虚表入手  
8D30这个函数里会调用xor虚表，构造的时候就xor了0x35  
用LCTF构造的时候就xor了0x35353535 -> yvas  
0x10101010是在sub_8c98那边，两种构造方式
第一次到
    v5 = g_0((__int64)&pcbc);
        (*(void (__fastcall **)(__int64, signed __int64))(*(_QWORD *)v5 + 0x10LL))(v5, 0x35LL);
PCBC->evwv  
第一次到
    v6 = g_0((__int64)&input);
        (*(void (__fastcall **)(__int64, signed __int64))(*(_QWORD *)v6 + 0x10LL))(v6, 0x31LL);
input aaaa->qqqq（这边input xor了0x10）  
第一次到
    v7 = g_0((__int64)&tmp);
        (*(void (__fastcall **)(__int64, signed __int64))(*(_QWORD *)v7 + 0x10LL))(v7, 0x34LL);
LCTF->yvas (构造xor了0x35)  
第一个的vtable是xor  
第二个是plus  
第三个也是xor  
最后做一个map
    def encrypt(input_list):
        pcbc = 0x50434243
        out_list=[]
        for input in input_list:
            lctf = 0x4c435446
            tmp = lctf ^ 0x35353535 # construct
            input  = input ^ 0x10101010 # construct2
            print hex(input)[2:].decode('hex')
            pcbc ^= 0x35353535
            print hex(pcbc)[2:].decode('hex')
            input ^= 0x31313131 ^ 0x11111111
            print hex(input)[2:].decode('hex')
            tmp ^= 0x34343434
            input ^= pcbc
            print hex(input)[2:].decode('hex')
            tmp ^= input ^ 0x11111111
            print hex(tmp)[2:].decode('hex')
            out_list.append(tmp)
            pcbc = tmp
        return out_list
    def decrypt(l):
        inp_list = []
        pcbc = 0x50434243
        for output in l:
            pcbc ^= 0x35353535
            input = output ^ pcbc ^ 0x7d726577 ^ 0x11111111
            inp_list.append(input)
            pcbc = output
        return inp_list
    def hex2s(num):
        num = hex(num)
        num = num[2:]
        if num[-1] == 'L':
            num = num[:-1]
        if len(num) %2:
            num = '0'+num
        return num.decode('hex')
    map='QWERTYUIOP!@#$%^'
    f='IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE'
    s=''
    for i in range(len(f)/2):
        idx1 = map.index(f[2*i])
        idx2 = map.index(f[2*i+1])
        k1 = bin(idx1)[2:].rjust(4,'0')
        k2 = bin(idx2)[2:].rjust(4,'0')
        print k2,k1
        s+=chr(int(k1+k2,2))
    d=s
    print d
    lists=[]
    for i in range(len(d)/4):
        lists.append(int(d[4*i:4*(i+1)].encode('hex'),16))
    l = decrypt(lists)
    l[-1] ^= 0x35353535
    l[0] ^= 0x35353535
    flag = ''
    for x in l:
        flag += hex2s(x)
    print flag
## MSP430
给了接线图  
ida没法直接丢进去。。。
资料
inst set  
看看processor
把machine type改成0，然后下面选MSP430
loader 有点问题，看个大概吧，  
serial_init后keygen，然后加密flag？  
加密应该是一个rc4
    keygen:
    and.b   #0C0h, &2Ah *(0x2a) &= 0xc0
    bis.b   #3Fh, &2Fh *(0x2f) |= 0x3f
    mov.b   &28h, R15 r15 = *(0x28)
    mov.b   R15, R13  r13=r15
    mov.w   R13, R14  r14=r13
    rla.w   R14       r14*=2
    add.w   R14, R13  r13 += r14
    mov.b   R13, 4(R12) *(r12+4) = r13
    mov.w   R15, R14    r14 = r15
    rla.b   R14         r14.b*=2?
    mov.b   R14, 5(R12) *(r12+5) = r14
    mov.w   R15, R14    r14 = r15
    and.b   #74h, R14   r14 &= 0x74
    rla.b   R14         r14.b*=2
    mov.b   R14, 6(R12) *(r12+6) = r14
    add.b   #50h, R15   r15 += 0x50
    mov.b   R15, 7(R12) *(r12+7) = r15
    ret
r12是key，剩下4字节猜测是LCTF  
.cinit:0000C3F8 .byte 30h ; 0  
.cinit:0000C3F9 .byte 31h ; 1  
.cinit:0000C3FA .byte 32h ; 2  
.cinit:0000C3FB .byte 33h ; 3  
.cinit:0000C3FC .byte 34h ; 4  
.cinit:0000C3FD .byte 35h ; 5  
.cinit:0000C3FE .byte 36h ; 6  
.cinit:0000C3FF .byte 37h ; 7  
.cinit:0000C400 .byte 38h ; 8  
.cinit:0000C401 .byte 39h ; 9  
.cinit:0000C402 .byte 61h ; a  
.cinit:0000C403 .byte 62h ; b  
.cinit:0000C404 .byte 63h ; c  
.cinit:0000C405 .byte 64h ; d  