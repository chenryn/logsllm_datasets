Expkey-ind
b
RPhase 1
ki-cpa
0,0,1,1(E, λ) = 1] − Pr[G0
0,1,1,1(E, λ) = 1]|
that breaks key-ind. CPA (Deﬁnition 19,
(Πenc, RPhase 1
gets from its experiment Expkey-ind
public parameters pp and two encryption scheme
ki-cpa generates honestly a commitment public key pkcmt and hands E pkcmt
chooses two messages m0, m1 ← Mpp,
public keys pk0, pk1. RPhase 1
and the received pp, pk0, pk1 as in G0
0,1,1,1(E, λ) = 1]| = negl(λ).
0,0,1,1(E, λ) = 1] − Pr[G0
ki-cpa , λ)) using E.
0,v,1,1. Next, RPhase 1
ki-cpa
b
Figure 7: Sequence of games for anonymity proof
36
G00,0,1,1G00,1,1,1G00,1,1,0G01,1,1,0G01,1,0,0G10,0,1,1Phase1key-ind.CPAPhase2key-ind.CPAPhase1comp.hidingPhase2comp.hiding≡b
ki-cpa hands m∗
0,v,1,1. RPhase 1
ki-cpa
0 = m0 + share and m∗
generates a commitment to m0 for Phase 1 as in G0
to E and gets share ∈ Mpp back. Next, RPhase 1
and gets S ← Encryptenc(pp, pkb, m∗
Expkey-ind
experiment G0
ki-cpa hands the message m0 to E and receives E’s guess ˆb that RPhase 1
RPhase 1
Observe that RPhase 1
sends the Phase 1 commitment
1 = m1 + share to
b) back. Phase 2 is executed by RPhase 1
as in the
ki-cpa
0,v,1,1 (commitment to m1 and encryption of m1 + share0). In the challenge phase,
ki-cpa also outputs to Expkey-ind
.
0,0,1,1 if RPhase 1
ki-cpa acts in the experiment
ki-cpa acts in the experiment Expkey-ind
.
ki-cpa , λ) =
Expkey-ind
Consequently, it holds that | Pr[Expkey-ind
1]| = | Pr[G0
Lemma 33. If Πenc is key-indistinguishable CPA secure, then for all ppt adversaries E it holds that
| Pr[G0
0,1,1,1 if RPhase 1
ki-cpa , λ) = 1] − Pr[Expkey-ind
ki-cpa perfectly simulates the view of E in G0
. The same holds for the view of E in G0
0,0,1,1(E, λ) = 1] − Pr[G0
0
0,1,1,1(E, λ) = 1]|.
1
(Πenc, RPhase 1
0,1,1,0(E, λ) = 1]| = negl(λ).
0,1,1,1(E, λ) = 1] − Pr[G0
(Πenc, RPhase 1
0
1
b
The reduction RPhase 2
ki-cpa
to show the above lemma works analogous to RPhase 1
ki-cpa with the diﬀerence
1,1,1,0(F, λ) = 1]| = negl.
ki-cpa we use the encryption challenge of Expkey-ind
that in RPhase 2
Lemma 34. If Πcmt is comp. hiding, then for all ppt adversaries F it holds that | Pr[G0
1] − Pr[G0
Proof. In the following we show that if there is an adversary F such that | Pr[G0
1]− Pr[G0
hiding of the commitment scheme Πcmt (Deﬁnition 21, Exphid
1,1,1,0(F, λ) = 1]| is non-negligible, than we can give an reduction RPhase 1
hiding
(Πcmt, RPhase 1
(Πenc, RPhase 1
b
ki-cpa , λ) in Phase 2.
hiding , λ)) using F.
b
0,1,1,0(F, λ) =
0,1,1,0(F, λ) =
that breaks comp.
b
b
u,1,1,0. Next, RPhase 1
hiding
hiding gets from its experiment Exphid
RPhase 1
, and gets Cb ← Commitcmt(pp, pkcmt, mb) back. RPhase 1
hiding generates honestly two encryption public keys pk0, pk1 as in G0
key pkcmt. RPhase 1
pk0, pk1 and the received pp, pk as in G0
hands both to Exphid
Phase 1 commitment to F. The rest of Phase 1 and Phase 2 are executes by RPhase 1
the experiment G0
guess ˆb. RPhase 1
in Exphid
| Pr[G0
Lemma 35. If Πcmt is comp. hiding, then for all ppt adversaries F it holds that | Pr[G0
1] − Pr[G0
public parameters pp and a commitment scheme public
u,1,1,0. hands F
chooses two messages m0, m1 ← Mpp,
hiding outputs Cb as the
hiding honestly as in
hiding hands F the message mb and receives F’s
hiding perfectly simulates the view of F
hiding , λ) = 1]| =
hiding also outputs ˆb to Exphid
. Consequently, | Pr[Exphid
u,1,1,0. In the challenge phase, RPhase 1
hiding , λ) = 1] − Pr[Exphid
0,1,1,0(F, λ) = 1] − Pr[G0
. Observe that RPhase 1
1,1,1,0(F, λ) = 1]|.
1 (Πcmt, RPhase 1
0 (Πcmt, RPhase 1
1,1,0,0(F, λ) = 1]| = negl.
1,1,1,0(F, λ) =
b
b
The reduction RPhase 2
hiding
to show the above lemma works analogous to RPhase 1
hiding with the diﬀerence
that in RPhase 2
hiding we use the commitment challenge of Exphid
This concludes the proof of Lemma 29 and therefore of Theorem 14.
b
(Πenc, RPhase 2
hiding , λ) in Phase 2.
F.3 Incentive System Soundness
Theorem 15. Let A be an attacker against incentive system soundness of Construction 23. We
construct B against updatable credential soundness of Πuacs.
• B receives cpp from its challenger. B replies with 14 to receive pk. It completes the setup
by choosing pkcmt ← KeyGencmt(pp). Then B simulates the query to IssuerKeyGen():
instead of running IssuerKeyGen, B uses its challenger’s key pk as the query result. B outputs
ispp = (pp, cpp, pkcmt) and pk to A.
37
• Oracle queries by A are simulated by B as prescribed by the protocol with one exception:
whenever the original protocol would run Issueuacs or Updateuacs, B instead queries its challenger
for the corresponding operation and relays protocol messages between the challenger and A.
challenger or with B.
• Eventually A halts. Then B halts as well.
Obviously, the view of A is the same whether it interacts with the incentive system soundness
Let error be the event that (1) B has output the same challenge δ in two diﬀerent Deduct
0 in two runs of Deduct or Issue such that
runs, or (2) there were two commitments Cdsid, Cdsid
the commitments can be opened to two diﬀerent messages. Note that cmt is perfectly binding
by assumption and so every commitment opens to at most one value (which B cannot necessarily
eﬃciently compute, but as an event, this is well-deﬁned).
It holds that Pr[error] ≤ negl(λ) because (1) in each Deduct query, δ is chosen uniformly random
by B from the super-poly size set Zp, and (2) Cdsid is the result of an Addcmt operation with a
uniformly random value dsidprvdr ← Zp chosen by B, hence it opens (only) to a uniformly random
value.
Let Awinstrace be the event that DB contains some (upk, dslink) s.t. VrfyDs(ispp, dslink, upk) 6= 1
or upk /∈ U. Let Awinsoverspend be the event that vspent − vinvalid > vearned and DBsync(s) has
been queried for all spend handles s. Let Awins be the event that A wins the game, Awinstrace ∨
Awinsoverspend. Lemma 36 will show that if Awins ∧ ¬error occurs, then there exists no explanation
list L that is consistent, implying Pr[Expsound(Π,B,E, λ) = 1 | Awins ∧ ¬error] = 1. Overall, let E
be an algorithm, then
Pr[Expsound(Πuacs,B,E, λ) = 1]
≥ Pr[Expsound(Πuacs,B,E, λ) = 1 | Awins ∧ ¬error]
· Pr[Awins ∧ ¬error]
=1 · Pr[Awins ∧ ¬error] ≥ Pr[Awins] − Pr[error]
= Pr[Expsound(Πinsy,A, λ) = 1] − Pr[error].
Consequently, because Pr[Expsound(Πuacs,B,E, λ) = 1] is negligible by assumption, it follows that
Pr[Expsound(Πinsy,A, λ) = 1] must be negligible.
Lemma 36. If Awins ∧ ¬error, then no explanation list is consistent (cf. Theorem 15 and Deﬁni-
tion 6).
Proof. We prove the statement by showing that if ¬error and there exists a consistent explanation
list L, then ¬Awins. Let L be a consistent explanation list and let Ei be the corresponding sets of
explained attribute vectors (cf. Deﬁnition 6).
vector ~A ∈S
For ease of reasoning in all the following lemmas, we represent the explanation list as a bipartite
directed graph G (cf. Figure 8). The graph contains (1) one node ~A for every explained attribute
i Ei and (2) nodes for Issue, Credit, Deduct queries: If the ith query is an Issue(upk)
query, there is a node i. If the ith query is a Credit(k) query for which the Updateuacs operation
outputs 1 for the provider, there is a node i. If the ith query is an s ← Deduct(k) query for which
the Updateuacs operation outputs 1 for the provider, there is a node i.
An Issue node i has an outgoing edge to the attribute vector ψi(⊥, αi), where ψi is the update
function used within the ith query and αi is as supplied by L. A Credit or Deduct node i has an
incoming edge from attribute vector ~Ai and an outgoing edge to ψi( ~Ai, αi), where ψi is the update
function used within this query and ~Ai, αi are as supplied by L. We call ~Ai the predecessor and
ψi( ~Ai, αi) the successor of a Credit Deduct node i.
38
database DB is marked invalid. Otherwise, the node is valid.
We say that a Deduct node i is marked invalid if its corresponding transaction in the double-spend