Time Range
From/To
10:00
RE
---
## Page 95
位于数据目录下。如图3-6所示。
冲池。只需在my.cnf里，加人如下命令即可：
到InnoDB_Buffer_Pool缓冲池里进行预热，从而避免了早高峰连接数升高，程序报错。
续排队，导致连接数升高。
8点用户登录时，会连接数据库来验证密码，此时先在内存里找，没有找到就会再到磁盘里
找，这样相当于走了两个环节，
间周期，在业务高峰时，数据库将面临相当大的考验，I/O的瓶颈会带来糟糕的性能。早上
于快速恢复到之前的性能状态。如果仅靠InnoDB 本身去预热buffer，将会是一个不短的时
在关闭 MySQL时，会把内存中的热数据保存在磁盘的ib_buffer_pool文件中，该文件
在数据库压力很大的情况下，重启完数据库，通过手工执行下列语句，把热数据加载
innodb_buffer_pool_dump_at_shutdown=1
解释：采用手工方式把热数据加载到内存。
解释：采用手工方式把热数据dump到本地磁盘。
解释：在关闭时把热数据dump 到本地磁盘。
而在MySQL5.6里，
select count(*) from Password;
selectcount(*)fromUser;
innodb_buffer_pool_load_now=1
解释：在启动时把热数据加载到内存。
innodb_buffer_pool_load_at_startup=1
innodb_buffer_pool_dump_now=1
selectcount(*)from Buddy;
解决方法：
InnoDBBuffer Pool
MB
50000
02:00
，为了解决上述问题，提供了一个新特性来快速预热Buffer_Pool缓
03:00
图3-5InnoDB_Buffer_Pool使用情况
TotalSizeUsedModifiedDictionary
，一个用户登录不上，连接就不会释放，后面的用户只能继
09:0010:00
第3章故障诊断·81
---
## Page 96
82·第二部分故障诊断与性能优化篇
3-10所示。
LOG日志，插人操作很频繁，这就导致了磁盘高负荷运转，
宕机或者pkill-9mysql，是不会导出的。
注意
数据会始终保存在内存中，如图3-7所示。
负载加大，
只有在正常关闭MySQL服务，或者pkillmysql时，才会把热数据导出到内存。机器
此时出现了大量慢日志，而这并不是因为 SQL自身存在问题，而是机器压力大造成的。
最后来看看磁盘情况，
在启动MySQL时，会自动加载热数据到Buffer_Pool缓冲池里，这样，机器重启后热
把情况反馈给了开发，经过程序Bug处理后，再看相应的指标数，如图3-11～图3-14
再来看看insert写操作，
下面再来看个“磁盘高负荷把MySQL拖垮”的案例，
Connections
Graph Name
fiterresetmake defaut
Contains
来看看CPU的情况，如图3-8所示。
#connections
000
000
02:00
Value
03:00
，它处于饱和状态，
图3-7
，平均每秒为1000个，可见写操作很大，如图3-9所示。
图3-6导出热数据到本地文件
04:00
加载热数据到InnoDB_Buffer_Pool
Total RunningCached
图3-8CPU的情况
05:00
Connections,PULtization,Database
Graphs
，处理一个I/0请求需要等待15毫秒，如图
06:00
07:00
08:00
，结果就是CPUWait I/O升高，
，我们有块业务需要记录大量的
09:00
、
10102 1
To Date
2012-06-21
TimeRange
10:00
---
## Page 97
内存中进行的，内存的速度要比磁盘快得多。
存缓冲池大于你的数据量时，此时的性能是最好的，因为所有的数据增删查改操作都是在
InnoDB_Buffer_Pool调整成内存的70%，减少磁盘I/O的压力，当InnoDB_Buffer_Pool内
以使用一个很简单的方法一加内存，现在内存的价格也很便宜，直接用硬件去解决，
毫秒。比起之前的15毫秒来，减少了12.51毫秒。
所示。
可以看到，磁盘I/O已正常，不再处于繁忙状态，处理一个I/0请求只需要等待2.49
该案例的瓶颈是磁盘I/O繁忙导致CPU负载升高。如果你以后也遇到了这个问题，
cPU Uutilization
Database Activity
aa/c010p2
avg statements/sec
%
100
3
9
6
0
27-Feb
0.00
0.00
0.00
08:00
MmW
0.000.000.00
0.00 441. 00 199.00 15936. 00 24024. 00
0.000.000.00
Select Insert  UpdateReplace Delete Cal]
28-Feb
Kernel User Wait l/0  Total
图3-9
29-Feb
图3-11CPU的情况
图3-10磁盘I/O
0.0
0.0
数据库性能QPS
10:0010:30
1-Mar
0.00
T
0.00
2-Mar
0.00
62.45
0.00
avgr
.000.000.000.00
4
0.00
10. [ 15. 34 1. 57 100.20
3-Mar
0.000.000.00
12:00
4-Mar
12:3013:00
M
第3章故障诊断·83
5-Mar
---
## Page 98
84
·第二部分故障诊断与性能优化篇
3.3.2记录子查询引起的岩机
上）运行了一条子查询的慢SQL，导致服务器死机。下面先看下报警信息，如图3-15所示。
这是2013年5月10日早上10:52分出现的一次故障，由于开发在主库上（生产环境
Database Activity
Load Average
avg statements/sec
LoadAverage
1200
1400
0
200
27-Feb
27-Feb
28-Feb
28-Feb
29-Feb
29-Feb
图3-12数据库性能QPS
图3-13CPU负载
图3-14磁盘I/O
1515
1-Mar
1-Mar
2-Mar
2-Mar
3-Mar
3-Mar
4-Mar
---
## Page 99
可谓是相当差，优化器处理不是很好，特别是在WHERE从句中的INO)子查询。对于该查
时间还会变慢)，如图3-17所示。
服务器死机了。
库（有业务的机器）上运行的，这导致锁表和其他的进程一直等待，最后越积越多，直接让
定是人为执行的，而且是从跳板机98.149上登录SQLYOG上执行的，如图3-16所示。
机器死机。通过分析慢日志，我发现是一条统计的SQL语句直接把服务器弄死机了。这肯
晚上，我在备库上又执行了一次这条SQL，花费了11分26秒（随着这个表的增大，
为什么这条SQL会执行很慢呢？在MySQL5.1和MySQL5.5的版本里，子查询的性能
该SQL语句的执行耗时170秒（猜想是没执行完直接Ctrl+C终止了)，而且还是在主
从10:41开始，服务器的 swap分区报警，之后内存不足报警，再后来内存耗尽，
二
l.anlMI5
图3-15Nagios报警
图3-17执行时间
图3-16慢日志
F
[Phg balfs
ms1M.1/E1/AEhFHimua JAAE:1Q14
0118-01B-11945-_1215900-13
4758O,Real_mem
第3章故障诊断85
45.070K
导致
---
## Page 100
86·第二部分故障诊断与性能优化篇
如图3-19和图3-20所示。
环境下使用子查询。
到。而在MySQL5.6版本里，针对这个问题进行了强劲的优化，这意味着，你可以在生产
查询。在MySQL5.6以前的版本里，子查询仅仅被看成是一个功能，生产环境下很少使用
语句更灵活、易懂，但子查询的执行效率不高，解决的方案是上面所说的用表连接代替子
目前的性能还很差。
图3-18所示。
询要快。
临时表中查询记录。查询完毕后，MySQL还需要撤销这些临时表。
询，MySQL需要先为内层查询语句的查询结果建立一个临时表，然后外层查询语句才能在
下面将分别在MySQL5.5和MySQL5.6里对该功能进行演示，帮助大家了解其特性
不过，可以使用连接查询来代替子查询，连接查询不需要建立临时表，其速度比子查
一般情况下，开发人员写的SQL里，很多查询都需要使用子查询，子查询可以使查询
基于此，
所以，这里要提醒大家一下，凡是这种统计的 SQL，千万不要在主库上运行，子查询
优化后，只需要0.01秒就出结果。
C3EA5949C60E56052E3DA2EC55
上面那条SQL可以这样优化：改用表连接方式（MySQL5.6版本除外），如
ec
(0.01
图3-19MySQL5.5子查询执行时间
count(*)
HI
sec
图3-18优化后执行时间
fron testl where tid in (select id from test3)
Prp1/M01/3/AE/EhxFGHI eu0AAEvk101473606]
--413
---
## Page 101
bin选项负责启用，MySQL服务器将在数据根目录创建两个新文件XXX-bin.001和xxx-
3.3.3诊断事务量突高的原因
在介绍本节案例之前，先来看看二进制日志相关知识。二进制日志由配置文件的log-
可以看出，实际上是把子查询改写成了join方式。现在可以放心大胆地去用子查询了。
之后，再用优化器对其进行优化，效果如图3-21和图3-22所示。
sql> explain seleet count(*) from testl where tid in (seleet id from test3);
可以看到，在MySQL5.6里，子查询的速度比MySQL5.5快了10倍。
cwin set （0.05sec)
.5.19
3eleettype
DEPENDENT SEBQUERY
PRIMARY
10.013c
testt
taole
test3
Lestl
table
type
testl where tid in toelect id from test3i
index
Lype
poasible_kevs
图3-20MySQL5.6子查询执行时间
0.15
图3-22MySQL5.6执行计划
图3-21MySQL5.5执行计划
.04
PRIMARY
kev le
ref
testl.id
key lell
tef
NITL
10365Isingwhere
Csing ahde
Extra
Lsing isdex
Extra
第3章故障诊断·87
tsing
Using
---
## Page 102
88·第二部分故障诊断与性能优化篇
之前和之后的表，看看哪个更新较大。
MySQLMonitor上查看，确实如此，如图3-23所示。
以通过凌晨的全量备份，加上凌晨到9点之前的二进制日志文件做增量恢复。二是实现
修改情况记人XXX-bin.n文件中，而不会记录SELECT和没有实际更新的UPDATE语句。
中.index文件包含一份全体日志文件的清单。MySQL会把用户对所有数据库的内容和结构的
bin.index，若配置选项没有给出文件名，MySQL将使用主机名称命名这两个文件，其
MySQL的主从复制。
下面进入正题，快下班时收到Nagiso 报警短信，说更新和插人阀值报警，于是登录到
二进制日志有两个作用，一是恢复数据，比如，早上9点误删除了一张表，那么可
看到这个现象，于是登录MySQL服务器上，通过binlog来分析17:05数据库发生抖动
/1500O3SET@OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=O*/;
[root@xx-02logs]#mysqlbinlog--no-defaults--base64-output=decode-rows-v-vmysql-bin.053373|more
下面是17:05之前的binlog日志：
/*140019SET@@session.max_insert_delayed_threads=0*/;
Database Transactions
Database Activity
avgstatements/sec
1000
2000
3000
4000
5000
6000
7000
10
30
100
16:3516:4016:4516:5016:5517:0017:0517:1017:1517:2017:2517:3017:35
16:3516:4016:4516:5016:5517:0017:0517:1017:1517:2017:2517:3017:35
SelectInsertUpdateReplaceDeleteCall
图3-23数据库性能QPS
BeginCommitRollback
---
## Page 103
注意
以后你也遇到了此类问题，同样可以采用此方法来分析。
{if(SO~/UPDATE|INSERT|DELETE/count[S2""SNF]++}END{for(iincount)printi,"\t",count[i]}'|column-t|sort-k3nr
pro-logc
{if(So~/UPDATE|INSERT|DELETE/)count[S2""SNF]++}END{for（iincount)printi,"\t",count[i]}'|column-t|sort-k3nr|more
否是业务增长导致的。
pro-logc
这次故障是演示了如何通过binlog日志来分析业务增长量，哪个表写操作频繁，如果
此命令只支持MySQL5.1以上版本，innodb引擎、READ-COMMITTED 隔离级别、或
#12080217:10:54 serverid 4713306 end_log_pos106Start:binlog v4,server v5.1.43sp1-br38368-enterprise-gpl-
[root@xxx-02logs]#mysqlbinlog--no-defaults--base64-output=decode-rows-v-vmysql-bin.053373|awk/##/
reated12080216:36:47
这样就比较直观地显示出了哪些表的更新较多，之后再找开发人员确认问题，了解是
INSERTDB.Buddy_Log
然后用这条命令分析，找出写操作频繁的表：
UPDATEDB.BOSSOperation
#at106
reated12080217:10:54
接着查看17:05之后的binlog日志，如下所示：
INSERTDB.Buddy_Log