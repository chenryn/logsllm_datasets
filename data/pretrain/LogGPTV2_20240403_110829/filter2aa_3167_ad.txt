的代码和全局数据结构。Linux将虚拟
内存组织成一些区域(也叫做段)的集合。
一个区域(area)就已经存在着的(已分
配的)虚拟内存的连续片(chunk),这些
页是以某种方式相关联的。例如，代码
段、数据段、堆、共享库段，以及用户
栈都是不同的区域。每个存在的虚拟页
面都保存在某个区域中，而不属于某个
区域的虚拟页是不存在的，并且不能被
进程引用。区域允许虚拟地址空间有间
隙。内核不用记录那些不存在的虚报页，
而这样的页也不占用内存、磁盘或者内
核本身中的任何额外资源。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
3.1 Malloc调用过程
Linux进程分配的方式： _brk()和_mmap()
如下图，从操作系统角度来看，进程分配内存有两种方式，分别由两个系统调用完成:brk和mmap（不考虑
共享内存）
1.brk是将数据段(.data)的最高地址指针_edata往高地址推；
2.mmap是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。
这两种方式分配的是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间时，发生缺页中断，
操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系
动态内存分配器维护着一个进程的虚拟内存区域，称为堆(heap)。系统之间细节不同，但是
不失通用性
分配器将堆视为一组不同大小的块(block)的集合来维护。每个块就是一个连续的虚拟内存
片(chunk),要么是已分配的，要么是空闲的。
分配器有两种基本风格(显式分配器，如c malloc free；隐式分配器，如java)。两种风格
都要求应用显式地分配块。它们的不同之处在于由哪个实体来负责释放已分配的块。
与堆相应的数据结构主要分为
宏观结构:包含堆的宏观信息，可以通过这些数据结构索引堆的基本信息。
微观结构:用于具体处理堆的分配与回收中的内存块,堆的漏洞利用与这些结构(malloc_chunk)密切相关。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
在内存中进行堆的管理时，系统基本是以 chunk 作为基本单位，chunk的结构在源码中有定义:
prev_size：相邻的前一个堆块大小。只有在前一个堆块（且该堆块为normal chunk）处于释放状态时才有
意义(p标志位为1时)。作用是用于堆块释放时快速和相邻的前一个空闲堆块融合。该字段不计入当前堆块的
大小计算。在前一个堆块不处于空闲状态时，数据为前一个堆块中用户写入的数据。libc这么做的原因主要
是可以节约4个字节的内存空间，但为了这点空间效率导致了很多安全问题。两个相邻 free chunk 会被合
并成一个，因此该字段总是保存前一个 allocated chunk 的用户数据
size：本堆块的长度。长度计算方式：size字段长度+用户申请的长度+对齐。libc以 size_T长度 * 2 为
粒度对齐。例如 32bit 以 4*2=8byte 对齐，64bit 以 8*2=16byte 对齐。因为最少以8字节对齐，所以
size一定是8的倍数，故size字段的最后三位恒为0，libc用这三个bit做标志flag(p、m、n)。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
这三位的作用分别是：
1.NON_MAIN_ARENA  这个堆块是否位于主线程
2.IS_MAPPED  记录当前 chunk 是否是由 mmap 分配的
3.PREV_INUSE    记录前一个 chunk 块是否被分配
这里重点讲解最后一位PREV_INUSE：用来记录前一个 chunk 块是否被分配，被分配的话这个字段的值为 
1(即1表示allocated,not free)，所以经常会在已分配的堆块中的 size 字段中发现值比原来大 1 个字节。libc
判断 当前堆块是否处于free状态的方法 就是 判断下一个堆块的 pre_inuse 是否为 1 ,这里也是 double free 
和 null byte offset 等漏洞利用的关键。所以前一个堆块的释放与否都和这两个字段（pre_size、size）的值
有关，这是因为便于内存的释放操作（free）
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
fd & bk：双向指针，用于组成一个双向空闲链表。故这两个字段只有在堆块free后才有意义。堆块在
alloc状态时，这两个字段内容是用户填充的数据。两个字段可以造成内存泄漏（libc的bss地址），Dw 
shoot等效果。
fd: Forward pointer --本字段指向同一 bin 中的下一个 free chunk（free chunk 链表的前驱指针）；
bk: Backward pointer--本字段指向同一 bin 中的上一个 free chunk（free chunk 链表的后继指针）。
值得一提的是，堆块根据大小，libc使用fastbin、chunk等逻辑上的结构代表，但其存储结构上都是
malloc_chunk结构，只是各个字段略有区别，如fastbin相对于chunk，不使用bk这个指针，因为fastbin 
freelist是个单向链表。
结构体中最后两个指针 fd_nextsize 和 bk_nextsize，这两个指针只在 largebin 中使用，其他情况下为 
NULL。
无论一个 chunk 的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
可以根据 chunk 的状态将其分为三种
allocated chunk、
free chunk、
top chunk
顾名思义，是堆中第一个堆块。相当于一个”
带头大哥”,程序以后分配到的内存到要放在
他的后面。在系统当前的所有 free 
chunk(无论那种 bin)，都无法满足用户请
求的内存大小的时候，将此 chunk 当做一个
应急消防员，分配给用户使用。
其中在 free chunk中有一种特殊的
chunk(last remainder chunk):
last remainder chunk:
从free chunk中malloc时，如果该chunk足
够大，那么将其分为两部分，未分配的放到
last remainder中并交由 unsorted bin 
管理。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
一个已经分配的 chunk 的样子如下:我们称前两个字段称为 chunk header，后面的部分称为 
user data。每次 malloc 申请得到的内存指针，其实指向 user data 的起始处。
当一个 chunk 处于使用状态时，它的下一个 chunk 的 prev_size 域无效，所以下一个 chunk 
的该部分也可以被当前chunk使用。这就是chunk中的空间复用。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
被释放的 chunk 被记录在链表中（可能是循环双向链表，也可能是单向链表),具体结构如下:
可以发现，如果一个 
chunk 处于 free 状态，那
么会有两个位置记录其相
应的大小
1.本身的 size 字段会记录.
2.它后面的 chunk 会记录.
一般情况下，物理相邻的
两个空闲 chunk 会被合并
为一个 chunk 。堆管理器
会通过 prev_size 字段以
及 size 字段合并两个物理
相邻的空闲 chunk 块。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构(bin)
用户释放掉的 chunk 不会马上归还给系统，ptmalloc(程序和系统之间的中间商)会统一管
理 heap 和 mmap 映射区域中的空闲的chunk，free掉一个chunk时根据chunk大小加入到
对应的bin中，将相似大小的chunk用链表链接，此链表称为bin(相当于垃圾桶),用于保存空
闲堆块。当用户再一次请求分配内存时，ptmalloc 分配器会试图在空闲的chunk中挑选一块
合适的给用户。这样可以避免频繁的系统调用，降低内存分配的开销。
在具体的实现中，ptmalloc 采用分箱式方法对空闲的 chunk 进行管理。首先，它会根据
空闲的 chunk 的大小以及使用状态将 chunk 初步分为4类：
fast bins，small bins，large bins，unsorted bin
bin在内存中用来管理free chunk，bin为带有头结点（链表头部不是chunk）的链表数组
每类中仍然有更细的划分，相似大小的 chunk 会用双向链表链接起来。也就是说，在每类 
bin 的内部仍然会有多个互不相关的链表来保存不同大小的 chunk。
对于 small bins，large bins，unsorted bin 来说，Ptmalloc 将它们维护在同一个数
组中。这些bin对应的数据结构在 malloc_state 中，如下:
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构(bin)
虽然每个 bin 的表头使用 mchunkptr 这个数据结构，但是这只是为了方便我们将每个 bin 转化
为 malloc_chunk 指针。我们在使用时，会将这个指针当做一个 chunk 的 fd 或 bk 指针来操作，
以便于将处于空闲的堆块链接在一起。这样可以节省空间，并提高可用性。那到底是怎么节省
的呢？这里我们以32位系统为例
可以看出除了第一个bin（unsorted bin）外，后面的每个bin会共享前面的bin的字段，将其视
为malloc chunk部分的prev_size和size。这里也说明了一个问题，bin的下标和我们所说的第
几个bin并不是一致的。同时，bin表头的 chunk 的 prev_size 与 size 字段不能随便修改，因
为这两个字段是被其它bin所利用的。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构(bin)
数组中的 bin 依次介绍如下(32位系统):
•
索引1为 unsorted bin，字如其面，这里面的 chunk 没有进行排序，存储的 chunk 比较杂。
•
索引从 2 到 63 的 bin 称为 small bin，同一个 small bin 链表中的 chunk 的大小相同。两个
相邻索引的 small bin 链表中的 chunk 大小相差的字节数为2个机器字长，即32位相差8字
节，64位相差16字节。
•
索引64到126的bin被称作 large bin。large bins 中的每一个 bin 都包含一定范围内的 
chunk，其中的chunk 按 fd 指针的顺序从大到小排列。相同大小的chunk同样按照最近使
用顺序排列。
此外，上述这些bin的排布都会遵循一个原则：任意两个物理相邻的空闲chunk不能在一起。
需要注意的是，并不是所有的 chunk 被释放后就立即被放到 bin 中。ptmalloc 为了提高分配
的速度，会把一些小的 chunk 先放到 fast bins 的容器内。而且，fastbin 容器中的 chunk 的使
用标记总是被置位的，所以不满足上面的原则。
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构(bin)
Fast Bin:
•
根据chunk大小维护多个单向链表
•
sizeof(chunk) = 512 (bytes)
•
 free chunk中多两个指针分别指向前后的large chunk
•
 链表中chunk大小不固定，先大后小
unsortedbin:
•
 只有一个链表、双向循环链表(FIFO)、 不排序
•
 任何大小的chunk都可以存在于Unsorted bin中
•
 暂时存储free后的chunk,一段时间后会将chunk放入对应的bin中
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构(bin)
PWN基础入门
Ø 堆溢出
l 堆基础
3.堆的数据结构
程序第一次进行 malloc 的时候，heap 会被分为两块，一块给用户，剩下的那块就是 top 
chunk。其实，所谓的 top chunk 就是处于当前堆的物理地址最高的 chunk。这个 chunk 不属
于任何一个 bin，它的作用在于当所有的 bin 都无法满足用户请求的大小时，如果其大小不小
于指定的大小，就进行分配，并将剩下的部分作为新的 top chunk。否则，就对 heap 进行扩展
后再进行分配。在 main arena 中通过 sbrk 扩展 heap，而在 thread arena 中通过 mmap 分配
新的 heap。
对于堆管理的实现,比较直观的印象：
u 将一片内存切分成块
u 使用合理的数据结构来组织(链表、树、等等)
u 被释放的堆应该被快速重用