 OFFSET FLAT:$SG74605 ; 'hello #1!' 
    call 
 _printf 
    add 
 esp, 4 
    mov 
 eax, DWORD PTR _p$[ebp] 
    mov 
 DWORD PTR [eax], 13 
    push 
 OFFSET FLAT:$SG74606 ; 'hello #2!' 
    call 
 _printf 
    add 
 esp, 4 
    mov 
 DWORD PTR __$SEHRec$[ebp+20], -1 ; previous try level 
    jmp 
 SHORT $L74616 
    ; filter code: 
$L74617: 
$L74627: 
    mov 
 ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov 
 edx, DWORD PTR [ecx] 
    mov 
 eax, DWORD PTR [edx] 
    mov 
 DWORD PTR $T74621[ebp], eax 
    mov 
 eax, DWORD PTR $T74621[ebp] 
    sub 
 eax, -1073741819; c0000005H 
    neg 
 eax 
    sbb 
 eax, eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
684 
逆向工程权威指南（下册） 
    inc 
 eax 
$L74619: 
$L74626: 
    ret 
 0 
    ; handler code: 
$L74618: 
    mov 
 esp, DWORD PTR __$SEHRec$[ebp] 
    push 
 OFFSET FLAT:$SG74608 ; 'access violation, can''t recover' 
    call 
 _printf 
    add 
 esp, 4 
    mov 
 DWORD PTR __$SEHRec$[ebp+20], -1 ; setting previous try level back to -1 
$L74616: 
    xor 
 eax, eax 
    mov 
 ecx, DWORD PTR __$SEHRec$[ebp+8] 
    mov 
 DWORD PTR fs:__except_list, ecx 
    pop 
 edi 
    pop 
 esi 
    pop 
 ebx 
    mov 
 esp, ebp 
    pop 
 ebp 
    ret 
 0 
_main      ENDP 
_TEXT      ENDS 
END 
由此可见，SEH 在栈里形成了帧结构。而 Scope table 则是位于文件的 CONST 段，确实如此，scope table
各字段的值确实不会发生变化。值得关注的是 previous try level 字段的变化过程。其初始值是 0xFFFFFFF(-1)。
当执行到 try 语句时，专有一条指令把它赋值为 0。而当 try 语句的主体关闭时，它又被赋值为−1。我们也看到
了 filter 以及 handler code 的地址。因此，我们能很容易地分析出函数中的 try-except 语句。 
函数序言中的 SEH 初始化代码可能会被多个函数共享，有时候编译器会在函数序言直接调用
SEH_prolog()函数，再在函数尾声处调用 SEH_epilog()函数以回收栈空间。 
下面我们在 tracer 跟踪器中运行这个例子： 
tracer.exe -l:2.exe --dump-seh 
上述指令的输出如下。 
指令清单 68.7  tracer.exe 的输出 
EXCEPTION_ACCESS_VIOLATION at 2.exe!main+0x44 (0x401054) ExceptionInformation[0]=1 
EAX=0x00000000 EBX=0x7efde000 ECX=0x0040cbc8 EDX=0x0008e3c8 
ESI=0x00001db1 EDI=0x00000000 EBP=0x0018feac ESP=0x0018fe80 
EIP=0x00401054 
FLAGS=AF IF RF 
* SEH frame at 0x18fe9c prev=0x18ff78 handler=0x401204 (2.exe!_except_handler3) 
SEH3 frame. previous trylevel=0 
scopetable entry[0]. previous try level=-1, filter=0x401070  (2.exe!main+0x60) handler=0x401088   
     (2.exe!main+0x78) 
* SEH frame at 0x18ff78 prev=0x18ffc4 handler=0x401204 (2.exe!_except_handler3) 
SEH3 frame. previous trylevel=0 
scopetable entry[0]. previous try level=-1,  filter=0x401531 (2.exe!mainCRTStartup+0x18d)  
     handler=0x401545 (2.exe!mainCRTStartup+0x1a1) 
* SEH frame at 0x18ffc4 prev=0x18ffe4 handler=0x771f71f5 (ntdll.dll!__except_handler4) 
SEH4 frame. previous trylevel=0 
SEH4 header:     GSCookieOffset=0xfffffffe GSCookieXOROffset=0x0 
                EHCookieOffset=0xffffffcc EHCookieXOROffset=0x0 
scopetable entry[0]. previous try level=-2, filter=0x771f74d0 (ntdll.dll!  
     ___safe_se_handler_table+0x20) handler=0x771f90eb (ntdll.dll!_TppTerminateProcess@4+0x43) 
* SEH frame at 0x18ffe4 prev=0xffffffff handler=0x77247428 (ntdll.dll!_FinalExceptionHandler@16) 
我们可以看到 SEH 链含有 4 个处理函数/handler。 
前两个 handler 是由源代码指定注册的异常处理函数。虽然我们的源代码只定义了一个 handler，但是
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
685 
CRT 的_mainCRTStartup()函数会自动设置一个配套的 handler。后者的功能不多，至少能够处理一些与 FPU
有关的异常情况。有关源码可以参阅 MSVC 安装目录里的 crt/src/winxfltr.c 文件。 
第三个 handler 是由 ntdll.dll 提供的 SEH4，第四个 handler 也位于 ntdll.dll，跟 MSVC 没什么关系，它
的函数名是 FinalExceptionHandler。 
上述信息表明，SEH 链含有三种类型的处理函数：一种是与 MSVC 彻底无关的自定义 handler（即异
常处理指针链中的最后一项），另外两种处理程序是由 MSVC 提供的 SEH3 和 SEH4 函数。 
SEH3：两个 try/except 模块例子 
#include  
#include  
#include  
int filter_user_exceptions (unsigned int code, struct _EXCEPTION_POINTERS *ep) 
{ 
    printf("in filter. code=0x%08X\n", code); 
    if (code == 0x112233) 
    { 
        printf("yes, that is our exception\n"); 
        return EXCEPTION_EXECUTE_HANDLER; 
    } 
    else 
    { 
        printf("not our exception\n"); 
        return EXCEPTION_CONTINUE_SEARCH; 
    }; 
} 
int main() 
{ 
    int* p = NULL; 
    __try 
    { 
        __try 
        { 
            printf ("hello!\n"); 
            RaiseException (0x112233, 0, 0, NULL); 
            printf ("0x112233 raised. now let's crash\n"); 
            *p = 13; // causes an access violation exception; 
        } 
        __except(GetExceptionCode()==EXCEPTION_ACCESS_VIOLATION ? 
                EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) 
        { 
            printf("access violation, can't recover\n"); 
        } 
    } 
    __except(filter_user_exceptions(GetExceptionCode(), GetExceptionInformation())) 
    { 
        // the filter_user_exceptions() function answering to the question 
        // "is this exception belongs to this block?" 
        // if yes, do the follow: 
        printf("user exception caught\n"); 
    } 
}  
这里，我们可以看到两个 try 块。因此 scope table 会有两个元素，分别存储着各 try 块的相应指针。
“Previous try level”字段的值会伴随着进入/退出 try 语句块而发生相应改变。 
指令清单 68.8  MSVC 2003 
$SG74606 DB  
'in filter. code=0x%08X', 0aH, 00H 
$SG74608 DB  
'yes, that is our exception', 0aH, 00H 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
686 
逆向工程权威指南（下册） 
$SG74610 DB  
'not our exception', 0aH, 00H 
$SG74617 DB  
'hello!', 0aH, 00H 
$SG74619 DB  
'0x112233 raised. now let''s crash', 0aH, 00H 
$SG74621 DB  
'access violation, can''t recover', 0aH, 00H 
$SG74623 DB  
'user exception caught', 0aH, 00H 
_code$ = 8    ; size = 4 
_ep$ = 12    ; size = 4 
_filter_user_exceptions PROC NEAR 
    push  ebp 
    mov  
ebp, esp 
    mov  
eax, DWORD PTR _code$[ebp] 
    push  eax 
    push  OFFSET FLAT:$SG74606 ; 'in filter. code=0x%08X' 
    call  _printf 
    add  
esp, 8 
    cmp  
DWORD PTR _code$[ebp], 1122867; 00112233H 
    jne  
SHORT $L74607 
    push  OFFSET FLAT:$SG74608 ; 'yes, that is our exception' 
    call  _printf 
    add  
esp, 4 
    mov  
eax, 1 
    jmp  
SHORT $L74605 
$L74607: 
    push  OFFSET FLAT:$SG74610 ; 'not our exception' 
    call  _printf 
    add  
esp, 4 
    xor  
eax, eax 
$L74605: 
    pop  
ebp 
    ret  
0 
_filter_user_exceptions ENDP 
; scope table: 
CONST     SEGMENT 
$T74644    DD  
0ffffffffH    ; previous try level for outer block 
          DD  
FLAT:$L74634 ; outer block filter 
          DD  
FLAT:$L74635 ; outer block handler 
          DD  
00H   
   ; previous try level for inner block 
          DD  
FLAT:$L74638 ; inner block filter 
          DD  
FLAT:$L74639 ; inner block handler 
CONST     ENDS 
$T74643 = -36    ; size = 4 
$T74642 = -32    ; size = 4 
_p$ = -28   
  ; size = 4 
__$SEHRec$ = -24   ; size = 24 
_main     PROC NEAR 
    push   ebp 
    mov     ebp, esp 
    push  -1 ; previous try level 
    push  OFFSET FLAT:$T74644 
    push  OFFSET FLAT:__except_handler3 
    mov  
eax, DWORD PTR fs:__except_list 
    push  eax 
    mov  
DWORD PTR fs:__except_list, esp 
    add  
esp, -20 
    push  ebx 
    push  esi 
    push  edi 
    mov  
DWORD PTR __$SEHRec$[ebp], esp 
    mov  
DWORD PTR _p$[ebp], 0 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; outer try block entered. set previous try level to 0 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 1 ; inner try block entered. set previous try level to 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
687 
    push  OFFSET FLAT:$SG74617 ; 'hello!' 
    call  _printf 
    add  
esp, 4 
    push  0 
    push  0 
    push  0 
    push  1122867 ; 00112233H 
    call  DWORD PTR __imp__RaiseException@16 
    push  OFFSET FLAT:$SG74619 ; '0x112233 raised. now let''s crash' 
    call  _printf 
    add  
esp, 4 
    mov  
eax, DWORD PTR _p$[ebp] 
    mov  
DWORD PTR [eax], 13 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; inner try block exited. set previous try level back to 0 
    jmp  
SHORT $L74615 
; inner block filter: 
$L74638: 
$L74650: 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov  
edx, DWORD PTR [ecx] 
    mov  
eax, DWORD PTR [edx] 
    mov  
DWORD PTR $T74643[ebp], eax 
    mov  
eax, DWORD PTR $T74643[ebp] 
    sub  
eax, -1073741819; c0000005H 
    neg  
eax 
    sbb  
eax, eax 
    inc  
eax 
$L74640: 
$L74648: 
    ret  
0 
; inner block handler: 