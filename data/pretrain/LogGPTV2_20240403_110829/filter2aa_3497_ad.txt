for network communication. This isn’t surprising, because the IP protocol was originally
implemented in the Berkeley Software Distribution (BSD) 4.2 Unix operating system.
This socket implementation is also part of POSIX, making it the de facto standard. Table
2-1 shows some of the more important system calls in the Berkeley Sockets API.
Table 2-1: Common Unix System Calls for Networking
Technet24
||||||||||||||||||||
||||||||||||||||||||
Name
Description
socket
Creates a new socket file descriptor.
connect
Connects a socket to a known IP address and port.
bind
Binds the socket to a local known IP address and port.
recv,
read,
recvfrom
Receives data from the network via the socket. The generic function read is for
reading from a file descriptor, whereas recv and recvfrom are specific to the
socket’s API.
send,
write,
sendfrom
Sends data over the network via the socket.
To learn more about how these system calls work, a great resource is The TCP/IP Guide
(No Starch Press, 2005). Plenty of online resources are also available, and most Unix-like
operating systems include manuals you can view at a terminal using the command man 2
syscall_name. Now let’s look at how to monitor system calls.
The strace Utility on Linux
In Linux, you can directly monitor system calls from a user program without special
permissions, unless the application you want to monitor runs as a privileged user. Many
Linux distributions include the handy utility strace, which does most of the work for you. If
it isn’t installed by default, download it from your distribution’s package manager or
compile it from source.
Run the following command, replacing /path/to/app with the application you’re testing
and args with the necessary parameters, to log the network system calls used by that
application:
$ strace –e trace=network,read,write /path/to/app args
Let’s monitor a networking application that reads and writes a few strings and look at
the output from strace. Listing 2-1 shows four log entries (extraneous logging has been
removed from the listing for brevity).
   $ strace -e trace=network,read,write customapp
   --snip--
➊ socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
➋ connect(3, {sa_family=AF_INET, sin_port=htons(5555),
                        sin_addr=inet_addr("192.168.10.1")}, 16) = 0
➌ write(3, "Hello World!\n", 13)          = 13
➍ read(3, "Boo!\n", 2048)                 = 5
Listing 2-1: Example output of the strace utility
||||||||||||||||||||
||||||||||||||||||||
The first entry ➊ creates a new TCP socket, which is assigned the handle 3. The next
entry ➋ shows the connect system call used to make a TCP connection to IP address
192.168.10.1 on port 5555. The application then writes the string Hello World! ➌ before
reading out a string Boo! ➍. The output shows it’s possible to get a good idea of what an
application is doing at the system call level using this utility, even if you don’t have high
levels of privilege.
Monitoring Network Connections with DTrace
DTrace is a very powerful tool available on many Unix-like systems, including Solaris
(where it was originally developed), macOS, and FreeBSD. It allows you to set system-
wide probes on special trace providers, including system calls. You configure DTrace by
writing scripts in a language with a C-like syntax. For more details on this tool, refer to the
DTrace Guide online at http://www.dtracebook.com/index.php/DTrace_Guide.
Listing 2-2 shows an example of a script that monitors outbound IP connections using
DTrace.
traceconnect.d
   /* traceconnect.d - A simple DTrace script to monitor a connect system call */
➊ struct sockaddr_in {
       short            sin_family;
       unsigned short   sin_port;
       in_addr_t        sin_addr;
       char             sin_zero[8];
   };
➋ syscall::connect:entry
➌ /arg2 == sizeof(struct sockaddr_in)/
   {
    ➍ addr = (struct sockaddr_in*)copyin(arg1, arg2);
    ➎ printf("process:'%s' %s:%d", execname, inet_ntop(2, &addr->sin_addr),
         ntohs(addr->sin_port));
   }
Listing 2-2: A simple DTrace script to monitor a connect system call
This simple script monitors the connect system call and outputs IPv4 TCP and UDP
connections. The system call takes three parameters, represented by arg0, arg1, and arg2 in
the DTrace script language, that are initialized for us in the kernel. The arg0 parameter is
the socket file descriptor (that we don’t need), arg1 is the address of the socket we’re
connecting to, and arg2 is the length of that address. Parameter 0 is the socket handle,
which is not needed in this case. The next parameter is the user process memory address of
a socket address structure, which is the address to connect to and can be different sizes
depending on the socket type. (For example, IPv4 addresses are smaller than IPv6.) The
final parameter is the length of the socket address structure in bytes.
The script defines a sockaddr_in structure that is used for IPv4 connections at ➊; in many
cases these structures can be directly copied from the system’s C header files. The system
Technet24
||||||||||||||||||||
||||||||||||||||||||
call to monitor is specified at ➋. At ➌, a DTrace-specific filter is used to ensure we trace
only connect calls where the socket address is the same size as sockaddr_in. At ➍, the
sockaddr_in structure is copied from your process into a local structure for DTrace to
inspect. At ➎, the process name, the destination IP address, and the port are printed to the
console.
To run this script, copy it to a file called traceconnect.d and then run the command dtrace
-s traceconnect.d as the root user. When you use a network-connected application, the
output should look like Listing 2-3.
process:'Google Chrome'    173.194.78.125:5222
process:'Google Chrome'    173.194.66.95:443
process:'Google Chrome'    217.32.28.199:80
process:'ntpd'             17.72.148.53:123
process:'Mail'             173.194.67.109:993
process:'syncdefaultsd'    17.167.137.30:443
process:'AddressBookSour'  17.172.192.30:443
Listing 2-3: Example output from traceconnect.d script
The output shows individual connections to IP addresses, printing out the process
name, for example 'Google Chrome', the IP address, and the port connected to. Unfortunately,
the output isn’t always as useful as the output from strace on Linux, but DTrace is certainly
a valuable tool. This demonstration only scratches the surface of what DTrace can do.
Process Monitor on Windows
In contrast to Unix-like systems, Windows implements its user-mode network functions
without direct system calls. The networking stack is exposed through a driver, and
establishing a connection uses the file open, read, and write system calls to configure a
network socket for use. Even if Windows supported a facility similar to strace, this
implementation makes it more difficult to monitor network traffic at the same level as
other platforms.
Windows, starting with Vista and later, has supported an event generation framework
that allows applications to monitor network activity. Writing your own implementation of
this would be quite complex, but fortunately, someone has already written a tool to do it
for you: Microsoft’s Process Monitor tool. Figure 2-5 shows the main interface when
filtering only on network connection events.
||||||||||||||||||||
||||||||||||||||||||
Figure 2-5: An example Process Monitor capture
Selecting the filter circled in Figure 2-5 displays only events related to network
connections from a monitored process. Details include the hosts involved as well as the
protocol and port being used. Although the capture doesn’t provide any data associated
with the connections, it does offer valuable insight into the network communications the
application is establishing. Process Monitor can also capture the state of the current calling
stack, which helps you determine where in an application network connections are being
made. This will become important in Chapter 6 when we start reverse engineering binaries
to work out the network protocol. Figure 2-6 shows a single HTTP connection to a
remote server in detail.
Figure 2-6: A single captured connection
Column ➊ shows the name of the process that established the connection. Column ➋
shows the operation, which in this case is connecting to a remote server, sending the initial
HTTP request and receiving a response. Column ➌ indicates the source and destination
Technet24
||||||||||||||||||||
||||||||||||||||||||
addresses, and column ➍ provides more in-depth information about the captured event.
Although this solution isn’t as helpful as monitoring system calls on other platforms, it’s
still useful in Windows when you just want to determine the network protocols a particular
application is using. You can’t capture data using this technique, but once you determine
the protocols in use, you can add that information to your analysis through more active
network traffic capture.
Advantages and Disadvantages of Passive Capture
The greatest advantage of using passive capture is that it doesn’t disrupt the client and
server applications’ communication. It will not change the destination or source address of
traffic, and it doesn’t require any modifications or reconfiguration of the applications.
Passive capture might also be the only technique you can use when you don’t have
direct control over the client or the server. You can usually find a way to listen to the
network traffic and capture it with a limited amount of effort. After you’ve collected your
data, you can determine which active capture techniques to use and the best way to attack
the protocol you want to analyze.
One major disadvantage of passive network traffic capture is that capture techniques
like packet sniffing run at such a low level that it can difficult to interpret what an
application received. Tools such as Wireshark certainly help, but if you’re analyzing a
custom protocol, it might not be possible to easily take apart the protocol without
interacting with it directly.
Passive capture also doesn’t always make it easy to modify the traffic an application
produces. Modifying traffic isn’t always necessary, but it’s useful when you encounter
encrypted protocols, want to disable compression, or need to change the traffic for
exploitation.
When analyzing traffic and injecting new packets doesn’t yield results, switch tactics
and try using active capture techniques.
Active Network Traffic Capture
Active capture differs from passive in that you’ll try to influence the flow of the traffic,
usually by using a man-in-the-middle attack on the network communication. As shown in
Figure 2-7, the device capturing traffic usually sits between the client and server
applications, acting as a bridge. This approach has several advantages, including the ability
to modify traffic and disable features like encryption or compression, which can make it
easier to analyze and exploit a network protocol.
||||||||||||||||||||
||||||||||||||||||||
Figure 2-7: A man-in-the-middle proxy
A disadvantage of this approach is that it’s usually more difficult because you need to
reroute the application’s traffic through your active capture system. Active capture can also
have unintended, undesirable effects. For example, if you change the network address of
the server or client to the proxy, this can cause confusion, resulting in the application
sending traffic to the wrong place. Despite these issues, active capture is probably the most
valuable technique for analyzing and exploiting application network protocols.
Network Proxies
The most common way to perform a man-in-the-middle attack on network traffic is to
force the application to communicate through a proxy service. In this section, I’ll explain
the relative advantages and disadvantages of some of the common proxy types you can use
to capture traffic, analyze that data, and exploit a network protocol. I’ll also show you how
to get traffic from typical client applications into a proxy.
Port-Forwarding Proxy
Port forwarding is the easiest way to proxy a connection. Just set up a listening server
(TCP or UDP) and wait for a new connection. When that new connection is made to the
proxy server, it will open a forwarding connection to the real service and logically connect
the two, as shown in Figure 2-8.
Figure 2-8: Overview of a TCP port-forwarding proxy
Simple Implementation
Technet24
||||||||||||||||||||
||||||||||||||||||||
To create our proxy, we’ll use the built-in TCP port forwarder included with the Canape
Core libraries. Place the code in Listing 2-4 into a C# script file, changing LOCALPORT ➋,
REMOTEHOST ➌, and REMOTEPORT ➍ to appropriate values for your network.
PortFormat
Proxy.csx
   // PortFormatProxy.csx – Simple TCP port-forwarding proxy
   // Expose methods like WriteLine and WritePackets
   using static System.Console;
   using static CANAPE.Cli.ConsoleUtils;
   // Create proxy template
   var template = new ➊FixedProxyTemplate();
   template.LocalPort = ➋LOCALPORT;
   template.Host = ➌"REMOTEHOST";
   template.Port = ➍REMOTEPORT;
   // Create proxy instance and start
➎ var service = template.Create();
   service.Start();
   WriteLine("Created {0}", service);
   WriteLine("Press Enter to exit...");
   ReadLine();
➏ service.Stop();
   // Dump packets
   var packets = service.Packets;
   WriteLine("Captured {0} packets:",
       packets.Count);
➐ { WritePackets(packets);
Listing 2-4: A simple TCP port-forwarding proxy example
This very simple script creates an instance of a FixedProxyTemplate ➊. Canape Core works
on a template model, although if required you can get down and dirty with the low-level
network configuration. The script configures the template with the desired local and
remote network information. The template is used to create a service instance at ➎; you
can think of documents in the framework acting as templates for services. The newly
created service is then started; at this point, the network connections are configured. After
waiting for a key press, the service is stopped at ➏. Then all the captured packets are
written to the console using the WritePackets() method ➐.
Running this script should bind an instance of our forwarding proxy to the LOCALPORT
number for the localhost interface only. When a new TCP connection is made to that
port, the proxy code should establish a new connection to REMOTEHOST with TCP port
REMOTEPORT and link the two connections together.
WARNING
Binding a proxy to all network addresses can be risky from a security perspective because proxies
written for testing protocols rarely implement robust security mechanisms. Unless you have
||||||||||||||||||||
||||||||||||||||||||
complete control over the network you are connected to or have no choice, only bind your proxy to
the local loopback interface. In Listing 2-4, the default is LOCALHOST; to bind to all interfaces, set
the AnyBind property to true.
Redirecting Traffic to Proxy
With our simple proxy application complete, we now need to direct our application traffic
through it.
For a web browser, it’s simple enough: to capture a specific request, instead of using the
URL form http://www.domain.com/resource, use http://localhost:localport/resource, which
pushes the request through your port-forwarding proxy.
Other applications are trickier: you might have to dig into the application’s
configuration settings. Sometimes, the only setting an application allows you to change is
the destination IP address. But this can lead to a chicken-and-egg scenario where you
don’t know which TCP or UDP ports the application might be using with that address,
especially if the application contains complex functions running over multiple different
service connections. This occurs with Remote Procedure Call (RPC) protocols, such as the
Common Object Request Broker Architecture (CORBA). This protocol usually makes an
initial network connection to a broker, which acts as a directory of available services. A
second connection is then made to the requested service over an instance-specific TCP
port.
In this case, a good approach is to use as many network-connected features of the
application as possible while monitoring it using passive capture techniques. By doing so,
you should uncover the connections that application typically makes, which you can then
easily replicate with forwarding proxies.
If the application doesn’t support changing its destination, you need to be a bit more
creative. If the application resolves the destination server address via a hostname, you have
more options. You could set up a custom DNS server that responds to name requests with
the IP address of your proxy. Or you could use the hosts file facility, which is available on
most operating systems, including Windows, assuming you have control over system files
on the device the application is running on.
During hostname resolving, the OS (or the resolving library) first refers to the hosts file
to see if any local entries exist for that name, making a DNS request only if one is not
found. For example, the hosts file in Listing 2-5 redirects the hostnames www.badgers.com
and www.domain.com to localhost.
# Standard Localhost addresses
127.0.0.1       localhost
::1             localhost
# Following are dummy entries to redirect traffic through the proxy
127.0.0.1       www.badgers.com
127.0.0.1       www.domain.com
Technet24
||||||||||||||||||||
||||||||||||||||||||
Listing 2-5: An example hosts file
The standard location of the hosts file on Unix-like OSes is /etc/hosts, whereas on
Windows it is C:\Windows\System32\Drivers\etc\hosts. Obviously, you’ll need to replace
the path to the Windows folder as necessary for your environment.
NOTE
Some antivirus and security products track changes to the system’s hosts, because changes are a
sign of malware. You might need to disable the product’s protection if you want to change the
hosts file.
Advantages of a Port-Forwarding Proxy
The main advantage of a port-forwarding proxy is its simplicity: you wait for a connection,
open a new connection to the original destination, and then pass traffic back and forth
between the two. There is no protocol associated with the proxy to deal with, and no
special support is required by the application from which you are trying to capture traffic.
A port-forwarding proxy is also the primary way of proxying UDP traffic; because it
isn’t connection oriented, the implementation of a forwarder for UDP is considerably
simpler.
Disadvantages of a Port-Forwarding Proxy
Of course, the simplicity of a port-forwarding proxy also contributes to its disadvantages.
Because you are only forwarding traffic from a listening connection to a single destination,
multiple instances of a proxy would be required if the application uses multiple protocols
on different ports.
For example, consider an application that has a single hostname or IP address for its
destination, which you can control either directly by changing it in the application’s
configuration or by spoofing the hostname. The application then attempts to connect to
TCP ports 443 and 1234. Because you can control the address it connects to, not the
ports, you need to set up forwarding proxies for both, even if you are only interested in the
traffic running over port 1234.
This proxy can also make it difficult to handle more than one connection to a well-
known port. For example, if the port-forwarding proxy is listening on port 1234 and
making a connection to www.domain.com port 1234, only redirected traffic for the original
domain will work as expected. If you wanted to also redirect www.badgers.com, things would
be more difficult. You can mitigate this if the application supports specifying the
destination address and port or by using other techniques, such as Destination Network
Address Translation (DNAT), to redirect specific connections to unique forwarding
proxies. (Chapter 5 contains more details on DNAT as well as numerous other more