quickly. The results of such attacks could be mild, such
as a printout of a message or more serious such as deleting
or modifying system ﬁles, reducing system performance, or
causing total failure to the infected machines. From the ser-
vice quality perspective and according to the extent of the
spread, the latter can lead to serious disruption for the users
of the network, due to information loss and delays.
Emulating network worms in a controlled and reproducible
manner is vital for the evaluation of the resilience of a net-
work to such scenarios. For this reason we have developed
such an emulator in which the infection of a worm causes a
network node to fail. This is achieved by disabling all Ether-
net interfaces of a node which are connected to the network,
so that no traﬃc can go through that node. The failure
can then be restored by re-enabling these interfaces. The
failure propagation can be random, according to a proba-
bility distribution or a pattern. Here, we consider failures
that propagate as a computer worm that tries to infect a
network’s nodes. Speciﬁcally, the failure is spread according
to an epidemiological model, the AAWP (Analytical Active
Worm Propagation) model. This is a discrete-time and con-
tinuous state deterministic approximation model, proposed
by Chen et al. to model the spread of active worms that
employ random scanning [1]. In the AAWP model, a node
can be in one of the following states: infected, immunised,
vulnerable. In our present application we have assumed that
all hosts can reach (infect or immunise) each other directly
(the topology of the network is irrelevant). At each scan,
the “worm” randomly chooses another host of the popula-
tion and if it is immune nothing happens. If it is vulnerable
it becomes infected and if it is already infected, it does not
get re-infected. We assume that the infection delay time
between two consecutive infection attempts represents the
time required by a computer worm to ﬁnd a server through
random IP scans, regardless of whether the host is already
infected or still vulnerable. So, a computer cannot infect
other hosts before it is infected completely. In our implemen-
tation, the time the worm needs to infect a machine, called
the infection delay time, is a random value within a prede-
termined range, but the emulator could be extended so that
the infection delay time could be subtracted by a more com-
plex model which takes into account the distance between
the infected node and the node it tries to infect, the degree
of network congestion and other such parameters. When
a node is infected it is considered under failure but it can
still infect others. Finally, in order to capture the patching
impact on the worm propagation, we dynamically immunise
some hosts, which, after some time, start immunising others
(infected or simply vulnerable) randomly. The time a newly
immunised node has to wait before it starts immunising oth-
ers is again a random value. The scanning mechanism used
is the random scanning mechanism but others could be used,
such as local subnet and topological scanning.
3. OUR PROPOSED DEMO
Our demonstration will present videos of real-time exper-
iments, conducted in a 46 node testbed located at Impe-
rial College London, under diﬀerent traﬃc conditions. The
topology of the testbed represents the real SWITCHlan net-
work topology (the Swiss Education & Research Network
(SWITCHlan) network provides service in Switzerland to
all universities, two federal institutes of technology and the
637major research institutes, 1. In order to make the environ-
ment more realistic we used actual details of the 46-router
backbone, complete with bandwidth, OSPF costs, and link-
level delays which were given by the administrators of the
SwitchLAN network to the authors of [16].
The scope of our proposed demo is to demonstrate the re-
sponse and stability of CPN under emulated worm spreads
and intermittent failures generated by a failure emulator
mechanism, in which failure spread is modelled according to
the AAWP (Analytical Active Worm Propagation) model.
We will show that CPN adapts quickly to failures, without
signiﬁcantly decreasing the measured QoS provided to the
users of the network.
4. REFERENCES
[1] Z. Chen, L. Gao, and K. Kwiat. Modeling the Spread
of Active Worms. In Proceedings of the IEEE
INFOCOM 2003, volume 3, pages 1890–1900, San
Francisco, CA, USA, Apr. 2003.
[2] S. Dobson, S. Denazis, A. Fern´andez, D. Ga¨ıti,
E. Gelenbe, F. Massacci, P. Nixon, F. Saﬀre,
N. Schmidt, and F. Zambonelli. A survey of
autonomic communications. ACM Trans. Adapt.
Autonomous Systems (TAAS), 1(2):223–259, 2006.
[3] E. Gelenbe. Random Neural Networks with Negative
and Positive Signals and Product Form Solution.
Neural computation, 1(4):502–510, 1989.
[4] E. Gelenbe. Cognitive Packet Network. US Patent,
6804201 B1, Oct. 2004.
[5] E. Gelenbe. Steps towards self-aware networks.
Communications of the ACM, 52(7):66–75, July 2009.
[6] E. Gelenbe, M. Gellman, R. Lent, P. Liu, and P. Su.
Autonomous Smart Routing for Network QoS. In
Proceedings of the First International Conference on
Autonomic Computing (ICAC), pages 232–239, New
York, NY, USA, May 2004.
Proceedings of the 10th IEEE International
Symposium on Modeling, Analysis, and Simulation of
Computer and Telecommunications Systems
(MASCOTS’02), pages 3–9, Fort Worth, Texas, USA,
Oct. 2002. Opening Keynote Paper.
[11] E. Gelenbe, R. Lent, and Z. Xu. Design and
Performance of Cognitive Packet Networks.
Performance Evaluation, 46(2-3):155–176, Oct. 2001.
[12] E. Gelenbe and G. Loukas. A Self-Aware Approach to
Denial of Service Defence. Computer Networks,
51(5):1299–1314, Apr. 2007.
[13] E. Gelenbe and A. Nunez. Traﬃc Engineering with
Cognitive Packet Networks. Simulation Series,
35(4):514–518, Apr. 2003.
[14] E. Gelenbe, G. Sakellari, and M. D’ Arienzo.
Admission of QoS Aware Users in a Smart Network.
ACM Transactions on Autonomous and Adaptive
Systems, 3(1):4:1–4:28, Mar. 2008.
[15] E. Gelenbe, E. Seref, and Z. Xu. Simulation with
Learning Agents. Proceedings of the IEEE,
89(2):148–157, Feb. 2001.
[16] M. Gellman and P. Liu. Random Neural Networks for
the Adaptive Control of Packet Networks. In
Proceedings of the 16th International Conference on
Artiﬁcial Neural Networks (ICANN 2006), pages
313–320, Athens, Greece, Sep. 2006.
[17] G. Loukas and G. Oke. Likelihood Ratios and
Recurrent Random Neural Networks in Detection of
Denial of Service Attacks. In Proceedings of the
International Symposium on Performance Evaluation
of Computer and Telecommunication Systems
(SPECTS 2007), pages 16–18, San Diego, California,
USA, July 2007.
[18] G. Oke and G. Loukas. A Denial of Service Detector
based on Maximum Likelihood Detection and the
Random Neural Network. The Computer Journal,
50(6):717–727, Sep. 2007.
[7] E. Gelenbe, M. Gellman, and G. Loukas. An
[19] G. Oke and G. Loukas. Distributed Defence Against
Autonomic Approach to Denial of Service Defence. In
Proceedings of First International IEEE WoWMoM
Workshop on Autonomic Communications and
Computing (ACC’05), pages 537–541, Taormina, Italy,
June 2005.
[8] E. Gelenbe and R. Lent. Power-aware ad hoc cognitive
packet networks. Ad Hoc Networks Journal,
2(3):205–216, July 2004.
[9] E. Gelenbe, R. Lent, A. Montuori, and Z. Xu.
Towards Networks with Cognitive Packets. In
Proceedings of the 8th International Symposium on
Modeling, Analysis and Simulation of Computer and
Telecommunication Systems (IEEE MASCOTS),
pages 3–12, San Francisco, CA, USA, Aug. 2000.
Opening Invited Paper.
[10] E. Gelenbe, R. Lent, A. Montuori, and Z. Xu.
Cognitive Packet Networks: QoS and Performance. In
Denial of Service Attacks: A Practical View. In
Proceedings of 1st BCS International Academic
Conference, Visions of Computer Science, pages
153–162, London, UK, Sep. 2008.
[20] G. Oke, G. Loukas, and E. Gelenbe. Detecting Denial
of Service Attacks with Bayesian Classiﬁers and the
Random Neural Network. In Proceedings of the IEEE
International Fuzzy Systems Conference (FUZZ-IEEE
2007), pages 1964–1969, London,UK, July 2007.
[21] G. Sakellari. The Cognitive Packet Network: A
Survey. The Computer Journal: Special Issue on
Random Neural Networks, doi:10.1093/comjnl/bxp053,
June 2009.
[22] P. Su and M. Gellman. Using adaptive routing to
achieve Quality of Service. Performance Evaluation,
57(2):105–119, June 2004.
1http://www.switch.ch/network/
638