### Employee Data Insertion and Verification

#### Employee #9601
- **Employee ID:** 9601
- **Name:** FARRELL
- **Job Title:** ANALYST
- **Manager ID:** 7902
- **Hire Date:** 03-MAR-08
- **Salary:** 5000
- **Commission:** None
- **Department ID:** 40

#### Employee #9602
- **Employee ID:** 9602
- **Name:** TYLER
- **Job Title:** ANALYST
- **Manager ID:** 7900
- **Hire Date:** 25-JAN-08
- **Salary:** 4800
- **Commission:** None
- **Department ID:** 40

The following SQL query confirms that employees Farrell and Tyler were successfully added to the `emp` table:

```sql
SELECT * FROM emp WHERE empno > 9600;
```

**Query Result:**

| empno | ename  | job     | mgr | hiredate           | sal   | comm | deptno |
|-------|--------|---------|-----|--------------------|-------|------|--------|
| 9601  | FARRELL| ANALYST | 7902| 03-MAR-08 00:00:00| 5000.00 |      | 40     |
| 9602  | TYLER  | ANALYST | 7900| 25-JAN-08 00:00:00| 4800.00 |      | 40     |

Next, execute the following anonymous block to add two more employees:

```sql
BEGIN
    emp_insert(9603, 'HARRISON', 'SALESMAN', 7902, '13-DEC-07', 5000, 3000, 20);
    emp_insert(9604, 'JARVIS', 'SALESMAN', 7902, '05-MAY-08', 4800, 4100, 11);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQLERRM: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('An error occurred - roll back inserts');
        ROLLBACK;
END;
```

**Output:**

- **Employee #9603**
  - **Employee ID:** 9603
  - **Name:** HARRISON
  - **Job Title:** SALESMAN
  - **Manager ID:** 7902
  - **Hire Date:** 13-DEC-07
  - **Salary:** 5000
  - **Commission:** 3000
  - **Department ID:** 20

**Error:**

```
SQLERRM: insert or update on table "emp" violates foreign key constraint "emp_ref_dept_fk"
An error occurred - roll back inserts
```

A subsequent `SELECT` command shows that only the first two employees (Farrell and Tyler) are in the table, as the inserts for Harrison and Jarvis were rolled back due to the foreign key constraint violation.

```sql
SELECT * FROM emp WHERE empno > 9600;
```

**Query Result:**

| empno | ename  | job     | mgr | hiredate           | sal   | comm | deptno |
|-------|--------|---------|-----|--------------------|-------|------|--------|
| 9601  | FARRELL| ANALYST | 7902| 03-MAR-08 00:00:00| 5000.00 |      | 40     |
| 9602  | TYLER  | ANALYST | 7900| 25-JAN-08 00:00:00| 4800.00 |      | 40     |

### Autonomous Transactions

#### Overview

An autonomous transaction is an independent transaction started by a calling program. A commit or rollback within the autonomous transaction does not affect the commit or rollback in any transaction of the calling program, and vice versa.

#### Usage

The following SPL programs can include `PRAGMA AUTONOMOUS_TRANSACTION`:
- Standalone procedures and functions
- Anonymous blocks
- Procedures and functions declared as subprograms within packages and other calling procedures, functions, and anonymous blocks
- Triggers
- Object type methods

#### Issues and Restrictions

- Each autonomous transaction consumes a connection slot for as long as it is in progress. In some cases, this may require increasing the `max_connections` parameter in the `postgresql.conf` file.
- Autonomous transactions behave like separate sessions but inherit GUC (General Utility Command) settings from the surrounding session.
- Autonomous transactions can be nested up to 16 levels within a single session.
- Parallel queries are not supported within autonomous transactions.
- The Advanced Server implementation of autonomous transactions does not produce an ERROR if there is an uncommitted transaction at the end of an SPL block, unlike Oracle.

### Example Scenarios

#### Initial Department Table

```sql
SELECT * FROM dept;
```

**Query Result:**

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |

#### Scenario 1a: No Autonomous Transactions with Final COMMIT

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
END;
COMMIT;
```

**Stored Procedure:**

```sql
CREATE OR REPLACE PROCEDURE insert_dept_70 IS
BEGIN
    INSERT INTO dept VALUES (70, 'MARKETING', 'LOS ANGELES');
END;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |
| 50     | HR          | DENVER      |
| 60     | FINANCE     | CHICAGO     |
| 70     | MARKETING   | LOS ANGELES |

#### Scenario 1b: No Autonomous Transactions with Final ROLLBACK

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
END;
ROLLBACK;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |

#### Scenario 1c: No Autonomous Transactions with Anonymous Block ROLLBACK

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
    ROLLBACK;
END;
COMMIT;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |

#### Scenario 2a: Autonomous Transaction of Anonymous Block with COMMIT

**Stored Procedure:**

```sql
CREATE OR REPLACE PROCEDURE insert_dept_70 IS
BEGIN
    INSERT INTO dept VALUES (70, 'MARKETING', 'LOS ANGELES');
END;
```

**Anonymous Block:**

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
    COMMIT;
END;
ROLLBACK;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |
| 60     | FINANCE     | CHICAGO     |
| 70     | MARKETING   | LOS ANGELES |

#### Scenario 2b: Autonomous Transaction Anonymous Block with COMMIT Including Procedure with ROLLBACK

**Stored Procedure:**

```sql
CREATE OR REPLACE PROCEDURE insert_dept_70 IS
BEGIN
    INSERT INTO dept VALUES (70, 'MARKETING', 'LOS ANGELES');
    ROLLBACK;
END;
```

**Anonymous Block:**

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
    COMMIT;
END;
COMMIT;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |
| 50     | HR          | DENVER      |

#### Scenario 2c: Autonomous Transaction Anonymous Block with COMMIT Including Procedure with ROLLBACK and PRAGMA AUTONOMOUS_TRANSACTION

**Stored Procedure:**

```sql
CREATE OR REPLACE PROCEDURE insert_dept_70 IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO dept VALUES (70, 'MARKETING', 'LOS ANGELES');
    ROLLBACK;
END;
```

**Anonymous Block:**

```sql
BEGIN;
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO dept VALUES (60, 'FINANCE', 'CHICAGO');
    insert_dept_70;
    COMMIT;
END;
COMMIT;
```

**Query Result:**

```sql
SELECT * FROM dept ORDER BY 1;
```

| deptno | dname       | loc         |
|--------|-------------|-------------|
| 10     | ACCOUNTING  | NEW YORK    |
| 20     | RESEARCH    | DALLAS      |
| 30     | SALES       | CHICAGO     |
| 40     | OPERATIONS  | BOSTON      |
| 50     | HR          | DENVER      |
| 60     | FINANCE     | CHICAGO     |

### Autonomous Transaction Trigger

**Table Creation:**

```sql
CREATE TABLE empauditlog (
    audit_date DATE,
    audit_user VARCHAR2(20),
    audit_desc VARCHAR2(20)
);
```

**Trigger:**

```sql
CREATE OR REPLACE TRIGGER emp_audit_trig
AFTER INSERT OR UPDATE OR DELETE ON emp
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_action VARCHAR2(20);
BEGIN
    IF INSERTING THEN
        v_action := 'Added employee(s)';
    ELSIF UPDATING THEN
        v_action := 'Updated employee(s)';
    ELSIF DELETING THEN
        v_action := 'Deleted employee(s)';
    END IF;
    INSERT INTO empauditlog VALUES (SYSDATE, USER, v_action);
END;
```

**Transaction:**

```sql
BEGIN;
INSERT INTO emp VALUES (9001, 'SMITH', 'ANALYST', 7782, SYSDATE, NULL, NULL, 10);
INSERT INTO emp VALUES (9002, 'JONES', 'CLERK', 7782, SYSDATE, NULL, NULL, 10);
```

**Query Result:**

```sql
SELECT * FROM emp WHERE empno > 9000;
```

| empno | ename | job     | mgr | hiredate           | sal | comm | deptno |
|-------|-------|---------|-----|--------------------|-----|------|--------|
| 9001  | SMITH | ANALYST | 7782| 23-AUG-18 07:12:27 |     |      | 10     |
| 9002  | JONES | CLERK   | 7782| 23-AUG-18 07:12:27 |     |      | 10     |

**Audit Log:**

```sql
SELECT TO_CHAR(AUDIT_DATE, 'DD-MON-YY HH24:MI:SS') AS "audit date", audit_user, audit_desc FROM empauditlog ORDER BY 1 ASC;
```

| audit date         | audit_user | audit_desc         |
|--------------------|------------|--------------------|
| 23-AUG-18 07:12:27 | enterprisedb | Added employee(s)  |
| 23-AUG-18 07:12:27 | enterprisedb | Added employee(s)  |

**Rollback:**

```sql
ROLLBACK;
```

**Query Result:**

```sql
SELECT * FROM emp WHERE empno > 9000;
```

| empno | ename | job | mgr | hiredate | sal | comm | deptno |

The `emp` table no longer contains the two rows, but the `empauditlog` table still contains its two entries, as the trigger implicitly performed a commit and the `PRAGMA AUTONOMOUS_TRANSACTION` commits those changes independently from the rollback in the calling transaction.