{"process.parent.elf.sections.flags": {"dashed_name": "process-parent-elf-sections-flags", "description": "ELF Section List flags.", "flat_name": "process.parent.elf.sections.flags", "ignore_above": 1024, "level": "extended", "name": "sections.flags", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List flags."}}
{"process.parent.elf.sections.name": {"dashed_name": "process-parent-elf-sections-name", "description": "ELF Section List name.", "flat_name": "process.parent.elf.sections.name", "ignore_above": 1024, "level": "extended", "name": "sections.name", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List name."}}
{"process.parent.elf.sections.physical_offset": {"dashed_name": "process-parent-elf-sections-physical-offset", "description": "ELF Section List offset.", "flat_name": "process.parent.elf.sections.physical_offset", "ignore_above": 1024, "level": "extended", "name": "sections.physical_offset", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List offset."}}
{"process.parent.elf.sections.physical_size": {"dashed_name": "process-parent-elf-sections-physical-size", "description": "ELF Section List physical size.", "flat_name": "process.parent.elf.sections.physical_size", "format": "bytes", "level": "extended", "name": "sections.physical_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List physical size.", "type": "long"}}
{"process.parent.elf.sections.type": {"dashed_name": "process-parent-elf-sections-type", "description": "ELF Section List type.", "flat_name": "process.parent.elf.sections.type", "ignore_above": 1024, "level": "extended", "name": "sections.type", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List type."}}
{"process.parent.elf.sections.var_entropy": {"dashed_name": "process-parent-elf-sections-var-entropy", "description": "Variance for Shannon entropy calculation from the section.", "flat_name": "process.parent.elf.sections.var_entropy", "format": "number", "level": "extended", "name": "sections.var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the section.", "type": "long"}}
{"process.parent.elf.sections.virtual_address": {"dashed_name": "process-parent-elf-sections-virtual-address", "description": "ELF Section List virtual address.", "flat_name": "process.parent.elf.sections.virtual_address", "format": "string", "level": "extended", "name": "sections.virtual_address", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual address.", "type": "long"}}
{"process.parent.elf.sections.virtual_size": {"dashed_name": "process-parent-elf-sections-virtual-size", "description": "ELF Section List virtual size.", "flat_name": "process.parent.elf.sections.virtual_size", "format": "string", "level": "extended", "name": "sections.virtual_size", "normalize": [], "original_fieldset": "elf", "short": "ELF Section List virtual size.", "type": "long"}}
{"process.parent.elf.segments": {"dashed_name": "process-parent-elf-segments", "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.", "flat_name": "process.parent.elf.segments", "level": "extended", "name": "segments", "normalize": ["array"], "original_fieldset": "elf", "short": "ELF object segment list.", "type": "nested"}}
{"process.parent.elf.segments.sections": {"dashed_name": "process-parent-elf-segments-sections", "description": "ELF object segment sections.", "flat_name": "process.parent.elf.segments.sections", "ignore_above": 1024, "level": "extended", "name": "segments.sections", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment sections."}}
{"process.parent.elf.segments.type": {"dashed_name": "process-parent-elf-segments-type", "description": "ELF object segment type.", "flat_name": "process.parent.elf.segments.type", "ignore_above": 1024, "level": "extended", "name": "segments.type", "normalize": [], "original_fieldset": "elf", "short": "ELF object segment type."}}
{"process.parent.elf.shared_libraries": {"dashed_name": "process-parent-elf-shared-libraries", "description": "List of shared libraries used by this ELF object.", "flat_name": "process.parent.elf.shared_libraries", "ignore_above": 1024, "level": "extended", "name": "shared_libraries", "normalize": ["array"], "original_fieldset": "elf", "short": "List of shared libraries used by this ELF object."}}
{"process.parent.elf.telfhash": {"dashed_name": "process-parent-elf-telfhash", "description": "telfhash symbol hash for ELF file.", "flat_name": "process.parent.elf.telfhash", "ignore_above": 1024, "level": "extended", "name": "telfhash", "normalize": [], "original_fieldset": "elf", "short": "telfhash hash for ELF file."}}
{"process.parent.end": {"dashed_name": "process-parent-end", "description": "The time the process ended.", "example": "2016-05-23T08:05:34.853Z", "flat_name": "process.parent.end", "level": "extended", "name": "end", "normalize": [], "original_fieldset": "process", "short": "The time the process ended.", "type": "date"}}
{"process.parent.entity_id": {"dashed_name": "process-parent-entity-id", "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.", "example": "c2c455d9f99375d", "flat_name": "process.parent.entity_id", "ignore_above": 1024, "level": "extended", "name": "entity_id", "normalize": [], "original_fieldset": "process", "short": "Unique identifier for the process."}}
{"process.parent.executable": {"dashed_name": "process-parent-executable", "description": "Absolute path to the process executable.", "example": "/usr/bin/ssh", "flat_name": "process.parent.executable", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "process.parent.executable.text", "name": "text", "type": "match_only_text"}], "name": "executable", "normalize": [], "original_fieldset": "process", "short": "Absolute path to the process executable."}}
{"process.parent.exit_code": {"dashed_name": "process-parent-exit-code", "description": "The exit code of the process, if this is a termination event.\nThe field should be absent if there is no exit code for the event (e.g. process start).", "example": 137, "flat_name": "process.parent.exit_code", "level": "extended", "name": "exit_code", "normalize": [], "original_fieldset": "process", "short": "The exit code of the process.", "type": "long"}}
{"process.parent.group.id": {"dashed_name": "process-parent-group-id", "description": "Unique identifier for the group on the system/platform.", "flat_name": "process.parent.group.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "group", "short": "Unique identifier for the group on the system/platform."}}
{"process.parent.group.name": {"dashed_name": "process-parent-group-name", "description": "Name of the group.", "flat_name": "process.parent.group.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "group", "short": "Name of the group."}}
{"process.parent.group_leader.entity_id": {"dashed_name": "process-parent-group-leader-entity-id", "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.", "example": "c2c455d9f99375d", "flat_name": "process.parent.group_leader.entity_id", "ignore_above": 1024, "level": "extended", "name": "entity_id", "normalize": [], "original_fieldset": "process", "short": "Unique identifier for the process."}}
{"process.parent.group_leader.pid": {"dashed_name": "process-parent-group-leader-pid", "description": "Process id.", "example": 4242, "flat_name": "process.parent.group_leader.pid", "format": "string", "level": "core", "name": "pid", "normalize": [], "original_fieldset": "process", "short": "Process id.", "type": "long"}}
{"process.parent.group_leader.start": {"dashed_name": "process-parent-group-leader-start", "description": "The time the process started.", "example": "2016-05-23T08:05:34.853Z", "flat_name": "process.parent.group_leader.start", "level": "extended", "name": "start", "normalize": [], "original_fieldset": "process", "short": "The time the process started.", "type": "date"}}
{"process.parent.group_leader.vpid": {"dashed_name": "process-parent-group-leader-vpid", "description": "Virtual process id.\nThe process id within a pid namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.", "example": 4242, "flat_name": "process.parent.group_leader.vpid", "format": "string", "level": "core", "name": "vpid", "normalize": [], "original_fieldset": "process", "short": "Virtual process id.", "type": "long"}}
{"process.parent.hash.md5": {"dashed_name": "process-parent-hash-md5", "description": "MD5 hash.", "flat_name": "process.parent.hash.md5", "ignore_above": 1024, "level": "extended", "name": "md5", "normalize": [], "original_fieldset": "hash", "short": "MD5 hash."}}
{"process.parent.hash.sha1": {"dashed_name": "process-parent-hash-sha1", "description": "SHA1 hash.", "flat_name": "process.parent.hash.sha1", "ignore_above": 1024, "level": "extended", "name": "sha1", "normalize": [], "original_fieldset": "hash", "short": "SHA1 hash."}}
{"process.parent.hash.sha256": {"dashed_name": "process-parent-hash-sha256", "description": "SHA256 hash.", "flat_name": "process.parent.hash.sha256", "ignore_above": 1024, "level": "extended", "name": "sha256", "normalize": [], "original_fieldset": "hash", "short": "SHA256 hash."}}
{"process.parent.hash.sha384": {"dashed_name": "process-parent-hash-sha384", "description": "SHA384 hash.", "flat_name": "process.parent.hash.sha384", "ignore_above": 1024, "level": "extended", "name": "sha384", "normalize": [], "original_fieldset": "hash", "short": "SHA384 hash."}}
{"process.parent.hash.sha512": {"dashed_name": "process-parent-hash-sha512", "description": "SHA512 hash.", "flat_name": "process.parent.hash.sha512", "ignore_above": 1024, "level": "extended", "name": "sha512", "normalize": [], "original_fieldset": "hash", "short": "SHA512 hash."}}
{"process.parent.hash.ssdeep": {"dashed_name": "process-parent-hash-ssdeep", "description": "SSDEEP hash.", "flat_name": "process.parent.hash.ssdeep", "ignore_above": 1024, "level": "extended", "name": "ssdeep", "normalize": [], "original_fieldset": "hash", "short": "SSDEEP hash."}}
{"process.parent.hash.tlsh": {"dashed_name": "process-parent-hash-tlsh", "description": "TLSH hash.", "flat_name": "process.parent.hash.tlsh", "ignore_above": 1024, "level": "extended", "name": "tlsh", "normalize": [], "original_fieldset": "hash", "short": "TLSH hash."}}
{"process.parent.interactive": {"dashed_name": "process-parent-interactive", "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.", "example": true, "flat_name": "process.parent.interactive", "level": "extended", "name": "interactive", "normalize": [], "original_fieldset": "process", "short": "Whether the process is connected to an interactive shell.", "type": "boolean"}}
{"process.parent.macho.go_import_hash": {"dashed_name": "process-parent-macho-go-import-hash", "description": "A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "process.parent.macho.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "macho", "short": "A hash of the Go language imports in a Mach-O file."}}
{"process.parent.macho.go_imports": {"dashed_name": "process-parent-macho-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "process.parent.macho.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "macho", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"process.parent.macho.go_imports_names_entropy": {"dashed_name": "process-parent-macho-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "process.parent.macho.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "macho", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.parent.macho.go_imports_names_var_entropy": {"dashed_name": "process-parent-macho-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "process.parent.macho.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "macho", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.parent.macho.go_stripped": {"dashed_name": "process-parent-macho-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "process.parent.macho.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "macho", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}