Perl language confi guration, Silverlight, 138 without, 209
739–740 server error messages, 619–622 termination, 241–243
PHP confi guration, 732–735 Server header, 42 reactive, 253–254
magic_quotes-gpc server-executable fi les, 382 web functionality, 66
directive, 734 servers. See web servers session management. Seealso
register_globals server-side access controls
directive, 733 API redirection, 392 alerts, 253
safe_mode directive, functionality application logic fl aws, 429
733–734 application mapping attackers, 20
questions, 650 identifying, 106–110 cookies, liberal scope, 244–248
bbiinnddeexx..iinndddd 887722 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 873
Index n S–S 873
CSRF, 251 session riding. See request simple match conditions fi lter,
defense mechanisms handling forgery 350
access with, 19–20 session-handling mechanisms Simple Object Access Protocol
duration, 241–243 Burp Suite (SOAP), 57
hacker’s methodology cookie jar, 603–604 functions, 386
token insecure transmission, request macros, 604–606 injection, 386–388
817 session-handling rules, banking application, 387–388
token system log disclosure, 606–609 error messages, 388
817–818 session-handling tracer, 609 fi nding and exploiting, 389
tokens tested for meaning, supporting, 603–609 hacker’s methodology, 839
815–816 customized automation, preventing, 27, 390
tokens tested for 602–609 NBFS, 138
predictability, 816–817 session-handling rules, 606–609 site map records, 769–771
understanding, 814–815 session-handling tracer, 609 SiteLock Active Template
logging, 253 SessionID parameter, 590 Library, Microsoft, 559
login function, 206 Set-Cookie header, 42, 47, 242, sleep function, MySQL, 323
logout function, 242, 250 244–245, 531 smartcards, authentication, 206
monitoring, 253 enumerating identifi ers, 575 SMTP injection, 397–402
security, 248–254 setString method, 340 fl aws, 400–401
state information, 206–209 shared hosting, 656–657. Seealso hacker’s methodology, 836–837
tokens cloud computing preventing, 402
algorithm generating, 249 attackers, 658–665 sniper attack, Burp Intruder, 592
attacker scripts, 217 access, 658–660 SOAP. See Simple Object Access
client-side exposure to deliberate backdoor scripts, Protocol
hijacking of, 243–244 660–661 sockets
concealed sequences, 213–215 between web applications, ASP.NET API methods,
eavesdroppers, 234 660–663 723
encrypting, 223–233 hacker’s methodology, 845–846 Java, 716
HTTP cookies, 207–208, securing, 665–667 Perl language API methods,
234–236 component segregation, 667 739
HTTPS, 234–236, 250 customer access, 665–666 PHP API methods, 732
life cycle protection, 250–253 customer functionality source code
login function, 539–540 segregation, 666 application logic fl aws, 428
meaningful, 210–212 threats, 657 backdoor password, 708
network disclosure, 234–237 virtual hosting, 657 browsing, 743
per-page, 252–253 shared token analyzers, buffer overfl ow, 709
predictable, 213–223 integrated testing suites, 767 bytecode recompiling
server-side technology, 105 shared usernames, 181 within browser, 142–143
SSL, 233 shell metacharacters, 359–360 outside browser, 143
strength, 248–249 application logic fl aws, 419 comments, 710–711
system log disclosure, OS command injection, 363, decompiling browser
237–239 365 extensions, 142–144
time dependency, 215–217 Perl language, 360 error messages, 623
transmitting, 538 types, 363 format string vulnerabilities,
URL transmission, 250 TheShellcoder’sHandbook (Anley 710
in URLs, 237–238 & Heasman & Linder), 634 integer vulnerabilities, 709–710
vulnerable mapping of, Shift-JIS character set, 464–465 native software bugs, 709–710
240–241 shutdown command, 315 open redirection
weak random number signature-based fi lters, refl ected vulnerabilities, 707–708
generation, 218–219 XSS, 456–457 OS command injection, 708
weak random number signedness errors, 641–642 path traversal vulnerabilities,
quality testing, 219–223 Silverlight, 135 706–707
weakness in generating, bytecode, 141 review
210–233 debuggers, 152 approaches, 702–704
weakness in handling, Isolated Storage, 553 black-box versus white-box,
233–248 same-origin policy, 526–527 702–703
XSS vulnerabilities, 243–244 serialized data, 138 methodology, 703–704
uses, 205 Spy, 152 situations, 701
bbiinnddeexx..iinndddd 887733 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 874
874 Index n T–T
signatures of common enumerating identifi ers, 574 fi ngerprinting databases,
vulnerabilities, 704–711 storage. See web storage, cloud 303–304
SQL injection, 705–706 computing hacker’s methodology,
XSS, 704–705 stored procedures 827–829
spidering databases, 339 inference, 319–324
REST URLs, 74–75 hacker’s methodology, 831–832 input validation
user-directed, 77–80 stored XSS, 438–440 circumvented, 312
benefi ts, 77 attacker steps, 438–439 INSERT statements, 295–296
hidden content discovery delivering, 449–450 JavaScript errors, 299
with, 81–83 e-mail testing, 483–484 numeric data, 299–301,
web compared to, 79 fi nding and exploiting, 481–487 315–316
web, 74–77 MySpace, 442–443, 446 ORDER BY clause, 301–302
authentication, 76 preventing, 492–496 out-of-band channel, 316–319
integrated testing suites, HTML limitations, 495–496 parameterized queries,
760–762 input insertion, 495 339–341
user-directed spidering input validation, 492–493 preventing, 27, 338–342
compared to, 79 output validation, 493–495 query structure, 301–302
SQL. See Structured Query refl ected XSS compared to, second-order, 313–314
Language 439–440 SELECT statements, 294–295
SQLMap, 322 search function, 439 source code, 705–706
sql-shell option, 330–331 uploaded fi les testing, 484–487 string data, 298–299
SQLzoo.net, 292 Ajax, 486–487 syntax, 332–334
SSL. See Secure Socket Layer GIFAR fi les, 485–486 time delays, 322–324
stack overfl ows, 634–635 string data UNION operator, 304–308
stack traces dynamically constructed, UNION operator data
ASP.NET, 617 script code bypassing extraction, 308–311
error messages, 617–618 fi lters, 466 UPDATE statements, 296–297
standalone vulnerability manipulation, 316 URL encoding, 300–301
scanners, 773–784 SQL injection into, 298–299 vulnerability exploitation,
automated versus user- string-length() function, 292–294
directed, 784 348 web functionality, 55–56
customized automation, strncpy function, 642 structured tokens, 210–212
780–781 strokejacking, 511. Seealso user Stunnel, 789
dangerous effects, 779 interface redress attacks SUBSTR(ING) functions, 324
individuating functionality, reverse, 560 suspension of account, 197–198
779–780 Structured Query Language .swf fi les, 141
limitations, 776–777 (SQL) syntactic validation, 25
products, 781–782 client-side injection, 547–548
system log disclosure
technical challenges, 778–781 comments, 312
hacker’s methodology, session
authentication and session injection, 7, 14
management, 817–818
handling, 778–779 advanced exploitation,
session tokens, 237–239
using, 783–784 314–324
vulnerabilities, 238
vulnerabilities detected, API methods, 291
774–776 application logic fl aws,
T
vulnerabilities undetected, 775 420–422
state information blind, 626 tag brackets, HTML bypassing
session management, 206–209 bugs, 298–302 fi lters, 462–464
without sessions, 209 client-side, 547–548 tag name, HTML bypassing
web functionality, 66 column name, 301–302 fi lters, 460–461
static resources conditional errors, 320–322 scripttags, 457
access controls, 263–264 database code components, Tamper Data, 772
account testing, 277 741–742 TamperIE, 772–773
fi le inclusion, 382 defense in depth, 342 TCP protocol, HTTP using, 40
naming schemes, 87 DELETE statements, 297–298 testing. See account testing;
static tokens, 240 double hyphen, 293 hacker’s methodology;
statistical hypothesis testing, error messages, 334–338 hacker’s toolkit; statistical
219–222 exploitation tools, 328–331 hypothesis testing
status codes, HTTP, 48–49 fi lter bypassing, 311–313 third-party applications, 560–561
bbiinnddeexx..iinndddd 887744 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 875
Index n U–U 875
301 Moved Permanently, 48 insecure transmission, 817 access, 649
302 Found, 48 system log disclosure, exploiting, 649–650
brute-force techniques, 84 817–818 minimize, 654–655
304 Not Modified, 48 tested for meaning, 815–816 XSS attack payloads exploiting,
tiered architectures, 647 tested for predictability, 446–447
attacks, 648–654 816–817 try-catch blocks, 30
categories, 648–649 per-page, 252–253 200 OK, 48
component segregation, session management 201 Created, 48
655–656 algorithm generating, 249
defense in depth, 656 attacker scripts, 217 U
Java, 648 client-side exposure to
UDFs. See user-defi ned functions
layers, 648 hijacking of, 243–244
UI redress attacks. See user
PHP, 653–654 concealed sequences, 213–215
interface redress attacks
securing, 654–656 eavesdroppers, 234
uid parameter, 584, 590
subverting, 650–654 encrypting, 223–233
unhandled errors, 30–31
decryption algorithms, 650 HTTP cookies for, 207–208,
Unicode encoding, 67–68
local fi le inclusion executing 234–236
Burp Intruder, 375
commands, 652–654 HTTPS, 234–236, 250
uniform resource identifi er
MySQL extraction, 650–652 life cycle protection, 250–253
(URI), 44
trust relationships, 649–650 login function, 539–540
open redirection
access, 649 meaningful, 210–212
vulnerabilities, absolute
minimize, 654–655 network disclosure, 234–237
prefi x, 545–546
time per-page, 252–253
uniform resource locator (URL)
delays predictable, 213–223
account activation, 184
enumerating identifi ers, security, generation of, 210
application mapping, input
575–576 server-side technologies, 105
entry points, 98–99
Oracle databases, 323–324 strength, 248–249
buffer overfl ow and length
OS command injection, system log disclosure,
of, 639
363–364 237–239
bytecode, 140
SQL injection, 322–324 transmitting, 538
encoding, 67
session token generation, URL transmission, 250
SQL injection, 300–301
215–217 in URLs, 237–238
truncating, 378
time of check, time of use fl aw vulnerable mapping of,
format, 44
(TOCTOU fl aw), 505 240–241
HTTP requests, 40, 44
TOCTOU fl aw. See time of check, weakness in generating,
open redirection
time of use fl aw 210–233
vulnerabilities, 542
tokens weakness in handling,
absolute prefi x, 545–546
anti-CSRF, 508–509 233–248
blocking absolute, 544–545
XSS defeating, 510–511 XSS vulnerabilities, 243–244
parameters, client-side data
authentication, 160 shared analyzers, integrated
transmission, 121–122
Burp Sequencer testing testing suites, 767
passwords recovery with time-
randomness of, 219–221 SSL, 233
limited, 174–175
cloud computing attackers, 665 static, 240
redirection
encrypting, 223–233 structured, 210–212
ASP.NET API methods, 723
attackers, 232–233 time dependency, 215–217
Burp Intruder bit fl ipper, weak random number Java API methods, 716
228–231 generation, 218–219 Perl language API methods,
CBC, 227–233 weak random number quality 738
downloading, 231–232 testing, 219–223 PHP API methods, 731–732
ECB ciphers, 224–226 TRACE functions, 43 REST, 44–45
“reveal” encryption oracle, transaction logic, 844 spidering, 74–75
232 Trojan injection, XSS attack session tokens, 237–238, 250
generating strong, 248–249 payloads, 444–445 translation attacks, 396–397
hacker’s methodology, trust relationships UNION operator
application mapping, hacker’s methodology, Boolean conditions, 329
sessions to, 818 application logic fl aws, error messages, 306
hacker’s methodology, session 844 NULL value, 306–307
management tiered architectures Oracle databases, 307–308
bbiinnddeexx..iinndddd 887755 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 876
876 Index n V–W
provisos, 305–306 web spidering compared to, 79 hacker’s methodology, web
SELECT NULL value, 306–307 _username buffer, 635–637 servers, 847–848
SELECT queries, 304–305 usernames shared hosting, 657
SQL injection, 304–308 access controls attackers web servers misconfi gured,
data extraction, 308–311 harvesting, 275–276 683
UNIX attackers, 168 virtual machines (VMs), 145
chrooted fi le system, 381 e-mail address, 167, 196 sandbox, 153
Windows path traversal enumeration, 166–169 virtual private network (VPN),
vulnerabilities compared hacker’s methodology, 659
to, 374 authentication VMs. See virtual machines
UPDATE statements, 296–297 enumerating, 806–807 VPN. See virtual private network
uploaded fi les, stored XSS uniqueness, 809 vulnerability scanners
testing, 484–487 nonunique, 181–182 integrated testing suites,
Ajax, 486–487 password change functionality, 764–765
GIFAR fi les, 485–486 172 standalone, 773–784
URI. See uniform resource predictable, 182–183, 197 standalone, 773–784
identifi er self-registration, 182, 196 automated versus user-
URL. See uniform resource shared, 181 directed, 784
locator sources, 169 customized automation,
US-ASCII, 464 system-generated, 192 780–781
user access. See access UTF-7, 464 dangerous effects, 779
user input. Seealso input UTF-16, 464–465 individuating functionality,
ASP.NET API methods for, UTL-HTTP package, 317–318 779–780
718–719 limitations, 776–777
client-side controls, 117 V products, 781–782
browser extensions, 133–153 technical challenges, 778–781
ValidateForm function, 130
hacker’s methodology, using, 783–784
VALUES clause, 295–296
801–802 vulnerabilities detected,
variable assignment, JavaScript
HTML forms, 127–133 774–776
hijacking, 522
Java, 711–712 vulnerabilities undetected,
VBScript
API methods, 712 775
error messages, 616
open redirection
script code bypassing fi lters,
vulnerabilities, 543–544 467 W
path traversal vulnerabilities,
JavaScript with, 467–468 WAFs. See web application
379–380
web functionality, 61 fi rewalls
Perl language, 735–736
vendor patches, web servers, 695 WAITFOR command, MS-SQL,
PHP, 724–727
verbose debugger messages, 425 322–323
refl ected XSS testing, 453
verbose error message, 30–31, WAR fi les, 673–676
script introduction, 454–455
624 warez, distributing, 2
web application security
threatened by, 9–10 verbose failure messages, WayBack Machine, 89
user interface redress attacks (UI 166–169 WCF. See Windows
redress attacks), 508, 511–515 vertical access controls, 258 Communication Foundation
basic form, 511–513 vertical privilege escalation, weak passwords, 161–162
framebusting, 514–515 258, 416 web 2.0, 14
mobile devices, 515 ViewState, ASP.NET vulnerabilities, 65
preventing, 515 attackers, 127 web application fi rewalls (WAFs)
variations, 513 Base64 encoding, 125–126 bypassing, 698
User-Agent header, 41, 52 Burp Suite, 126 hacker’s methodology, web
targeting, 100 client-side data transmission, servers, 848–849
userData, IE, 554 124–127 NULL bytes, 460
user-defi ned functions (UDFs), purpose, 125 web servers, 697–698
328 security, 155 web applications. Seealso
user-directed spidering, 77–80 virtual defacement, XSS attack hacker’s methodology;
benefi ts, 77 payloads, 443–444 hacker’s toolkit
hidden content discovery with, virtual hosting administrative functions in,
81–83 Apache, 683 35–36
bbiinnddeexx..iinndddd 887766 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 877
Index n W–W 877
ASP attackers between, XSS fi lters, 479–481 misconfi gured virtual hosting,
660–663 web container, Java, 53 683
behavior web functionality Oracle, 676–677
extrapolating, 109–110 client-side, 57–65 as proxy servers, 682–683
isolating, 110 Ajax, 62–63, 384 software
benefi ts, 5–6 browser extension Allaire JRun, 690–691
business, 4 technologies, 65 Apple iDisk Server, 690
cloud computing, 5 CSS, 60–61 defense in depth, 696–697
custom development, 10 DOM, 62 encoding and
data store reliance of, 287 forms, 58–60 canonicalization,
deceptive simplicity, 10–11 HTML, 58 689–694
evolution, 2–3 HTML5, 64–65 JVM, 690
framework fl aws, 685–687 hyperlinks, 58 memory management,
functions, 4–5 JavaScript, 61 687–689
increasing demands on, 12 JSON, 63 Microsoft IIS path traversal
managing, 35–36 same-origin policy, 64 vulnerabilities, 691–692
overextended, 11–12 VBScript, 61 Oracle PL/SQL Exclusion
pages, functional paths versus, server-side, 51–57, 103, 106–110 List fi lter bypass,
93–96 ASP.NET, 54, 103 692–694
security, 1, 6–15 Java, 53–54 resources, 694
attackers, 6 PHP, 54–55 Ruby WEBrick, 690
developer understanding, 3 Ruby on Rails, 55 securing, 695–697
future, 14–15 SQL, 55–56 security hardening, 695–696
key factors, 10–12 web services, 56–57 vendor patches, 695
new network perimeter for, XML, 56 vulnerabilities, 684–697
12–14 sessions, 66 vulnerabilities, 91–92
user input threatening, 9–10 state information, 66 WAFs, 697–698
vulnerabilities, 7–8 web servers, 669–670 WebDAV methods, 679–681
shared hosting attackers CMS, 92 web services, 56–57
between, 660–663 confi guration Web Services Description
technologies developing, 6 security, 684 Language (WSDL), 57
third-party, 560–561 vulnerabilities, 670–684 web spidering, 74–77
threats to, 3 default content, 92, 671–677 authentication, 76
rapidly evolving, 11 debug functionality, 671–672 integrated testing suites,
XPath subverting logic of, hacker’s methodology, 847 760–762
345–346 JMX, 674–676 user-directed spidering
web archives, public powerful functions, 673–674 compared to, 79
information, 89–90 sample functionality, 672–673 web storage
web browsers. Seealso browser default credentials, 670–671 cloud computing, 665
extensions; Firefox; Internet hacker’s methodology, 846 hacker’s methodology,
Explorer directory listing, 677–679 authentication insecure,
attackers, 559–568 Allaire JRun, 690–691 811
browsing history, 552 fl aws, 694 Web-based Distributed
bugs, 563 hacker’s methodology, 846–849 Authoring and Versioning
capabilities, 5–6 dangerous HTTP methods, (WebDAV)
DNS rebinding, 563–564 847 overfl ows, 689
exploitation frameworks, default content, 847 web server methods, 679–681
564–566 default credentials, 846 WebDAV. See Web-based
BeEF, 565–566 native software bugs, 848 Distributed Authoring and
XSS Shell, 566 proxy server functionality, Versioning
hacker’s toolkit, 748–750 847 WEBrick, Ruby, 690
Chrome, 750 virtual hosting, 847–848 websites
Firefox, 749–750 WAFs, 848–849 attacker-created, 448–449
IE, 748–749 hidden content discovery evolution, 51
integrated testing suites, leveraging, 91–93 security and evolution of, 2
intercepting proxies JBoss Application Server, web.xml fi le, 716–717
confi guring, 752–755 674–676 Wget, 788
bbiinnddeexx..iinndddd 887777 88//1199//22001111 1122::0011::3377 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 878
878 Index n X–Z
WHERE clause evolution, 2–3, 15 hacker’s methodology,
DELETE statements, 297–298 overextended technologies in, 840–841
INSERT statements, 295 11–12 informed, 346–347
SELECT statements, 321 WSDL. See Web Services preventing, 349
UPDATE statements, 296–297 Description Language keywords, 346
white-box code review, 702–703 string-length() function,
whitelist-based fi lters, 24 X 348
wiki, brute-force techniques for .xap fi les, 141 subverting web application
passwords in, 424 X-Frame-Options header, logic, 345–346
Wikto, hidden content, 515 XMLHttpRequest, 62–63, 476,
92–93 XHTML, 58 524
attackers, 529
Windows, UNIX path traversal XML. See Extensible Markup
cross-domain requests,
vulnerabilities compared Language
528–529
to, 374 XML external entity injection
XPath. See XML Path Language
Windows Communication (XXE injection), 384–386
XSS. See cross-site scripting
Foundation (WCF), 138 hacker’s methodology,
XSS Shell, 566
Winter-Smith, Peter, 640 841
XXE injection. See XML external
Wireshark, 236 XML Path Language (XPath)
entity injection
Witko, 785 count() function, 348
World Wide Web. Seealso injection, 344–349
hypertext transfer protocol; blind, 347–348 Z
web functionality fl aws, 348–349 .zip extension, 141
bbiinnddeexx..iinndddd 887788 88//1199//22001111 1122::0011::3377 PPMM