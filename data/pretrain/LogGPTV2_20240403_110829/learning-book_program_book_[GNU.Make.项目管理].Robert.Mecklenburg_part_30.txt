Cd$（OUTPUT_DIR）;\
S(JAR) $(JARFLAGS) SS(notdir SS@) S$($1_packages)
$S（calladd-manifest,S$@,s$（S1_name),$$（s1_manifest))
endef
此函数的参数只有一个，也就是make变量的前缀，这样可确定一组变量来描述以下四
---
## Page 199
Java
189
个jar参数：工作目标的名称、jar的名称、jar中所包含的包以及jar的manifest文件。举
例来说，如果要建立一个名为uijar的文件，我们可以这么做：
ui_jar_name:=S(OUTPUT_DIR)/lib/ui.jar
ui_jar_manifest:= src/com/company/ui/manifest.mf
ui_jar_packages:=src/com/company/ui
src/com/company/1ib
S（eval S(call make-jar,ui_jar))
通过组合变量的名称，不仅可以缩短函数的调用过程，也可以让函数的实现有很多的灵
活性。
如果许多jar文件要创建，我们可以通过把这些jar文件的名称存放在一个变量中，让创
建的工作自动进行：
jar_list:= server_jar ui_jar
.PHONY:jars S(jar_list)
jars:$(jar_list)
$（foreach j，$（jar_list）,\
$（eva1 $(call make-jar,sj)))
有时，我们可能需要将一个jar文件扩展并放到一个临时目录中。如下的简单函数可以
为我们完成此事：
#S(callburst-jar,jar-file,target-directory)
define burst-jar
S(call make-dir,$2)
cd $2;$（JAR)-xf $1
endef
引用树与来自第三方的jar文件
如果要使用一个共享的引用树来为开发人员提供部分的源文件树，只要让每夜编译动作
为项目建立jar文件并且将那些jar文件的路径加人Java编译器的CLASSPATH中就行了。
开发人员可以从源文件树中调出自已所需要的部分并且进行编译（假定原始列表是由
find之类的程序自动建立的）。当Java编译器需要某个短缺的源文件里的某些符号时，
它将会搜索CLASSPATH并且在jar文件中相应的.class文件里找到。
要从一个引用树中选出第三方所提供的jar文件也很简单，将该jar文件的路径放人
CLASSPATH就行了。正如之前所提到的，makefile非常适合用来管理此过程。当然，get-
file函数只要通过JAR_PATH变量的设定，就可以被用来自动选出测试版或稳定版、
本地或远程的jar文件。
---
## Page 200
190
第九章
EnterpriseJavaBeans
EnterpriseJavaBeans是一个功能强大的技术，可用来在远程函数调用（remotemethod
invocation）的结构中封装和重用商业逻辑。EJB所建立的Java类会被用来实现成供远
程客户端程序使用的服务器端API。这些对象和服务的配置是通过以XML为基础的控制
文件中，接着使用一个特殊的EJB编译器来建立stub和tie以实现RPC支持程序代码。
将以下的代码插入例9-1将可提供通用的EJB支持：
EJB_TMP_JAR =$（EJB_TMP_DIR)/temp.jar
META_INF=$(EJB_TMP_DIR)/META-INF
#S（call compile-bean,jar-name,
bean-files-wildcard,manifest-name-opt)
define compile-bean
$(eval EJB_TMP_DIR :=S(she11 mktemp -d $(TMPDIR)/cOmpile-bean.XXXXXXXX))
$（MKDIR）$（META_INF)
$（if S（fi1ter .xml,$2),cpS（filter .xml,$2)$（META_INF）)
CdS（OUTPUT_DTR)&&
$(JAR)-CfO $(EJB_TMP_JAR)
S(call jar-file-arg.$(META_INF))
$（filter-out .xml，$2）
S(JVM)weblogic.ejbc S（EJB_TMP_JAR)$1
$（ca1l add-manifest,$(if $3,$3,$1).,)
$（RM）S（EJB_TMP_DIR)
endef
$（call jar-file-arg,jar-file)
jar-file-arg=-C*$（patsubst 名/,名，S（dir S1))"S（notdir $1）
compile-bean函数可以接受三个参数：jar的名称、jar中文件的列表以及一个可有可
无的manifest文件。这个函数首先会使用mktemp函数创建一个干净的临时目录，并且
将目录名称存储在变量EJB_TMP_DIR里。通过将赋值动作嵌人eVa1函数中，可确保每
次compile-bean被扩展时，EJB_TMP_DIR都会被重新设定为一个新的临时目录。因
为compile-bean将会被用在某个规则的命令脚本中，所以此函数只会在命令脚本运行
时被扩展。然后，此函数会把bean文件列表中所包含的所有XML文件复制到META-INF
目录下，这就是EJB配置文件存放的位置。接着，此函数会建立一个临时的jar以作为
EJB编译器的输人。jar-file-arg函数会把dir1/dir2/dir3形式的文件名转换成-
Cdir1/dir2dir3，这样，文件在jar中的相对路径才是正确的。当我们为jar命令指
定META-INF目录时必须使用这种格式。bean文件列表中所包含的.xml文件已经被复制
到了META-INF目录下，所以我们可以把这些文件删除。建立临时的jar之后，调用
---
## Page 201
Java
161
WebLogicEJB编译器以产生我们所要的jar。然后，一个manifest文件（如果被指定的
话）会被加人编译好的jar中。最后，移除我们的临时目录。
这个新函数的用法很简单：
bean_files=com/company/bean/FooInterface.class
com/company/bean/FooHome.class
src/com/company/bean/ejb-jar.xml
src/com/company/bean/weblogic-ejb-jar.xml
.PHONY:ejb_jar $（EJB_JAR)
ejb_jar: S(EJB_JAR)
$(EJB_JAR):
S（call compile-bean,$@,$(bean_files),weblogic.mf）
bean_files列表令人有些混淆：它所引l用的.class文件被访问时是相对于类目录，而
xml文件被访问时是相对于makefile所在的目录。
这么做没什么问题，但如果beanjar中包含了许多bean文件，我们可以自动建立文件列
表吗？当然可以：
src_dirs:=S(SOURCE_DIR)/com/company/..
bean_files=
$（patsubst $(SOURCE_DIR)/,,
S(addsuffix /*.class,
S(sort
S(dir
$(wildcard
$（addsuffix/*Home.java,$（src_dirs)))))))
.PHONY:ejb_jar S(EJB_JAR)
ejb_jar:S(EJB_JAR)
$（EJB_JAR)：
$(call compile-bean, S@,$(bean_files),weblogic.mf)
这是假设具有EJB源文件的所有目录都包含在src_dirs变量中（也可能存在并未包含
EJB源文件的目录），而且任何文件名以Home.java结尾的文件，代表是一个包含EJB程
序代码的包。这个用来设定bean_files变量的表达式，首先会为目录加上通配符后
缀，然后调用wildcard函数来收集Home.java文件列表。文件名的部分会被删掉但保
留目录的部分，然后调用sort移除重复的部分，接着加入通配符后缀/*.class。这样，
shell将会把列表扩展成实际的类文件。最后，源文件目录前缀（无法使用在类文件树中）
会被移除。之所以会使用shell通配符进行扩展的动作，而不使用make的wildcard函
数，是因为在类文件完成编译之后，我们无法通过make来进行它的扩展动作。如果
make对wildcard函数的求值动作太早进行，它将会找不到文件，而且目录隐藏功能将
---
## Page 202
192
第九章
会使得它不再重新搜索文件。在源文件树中使用wildcard将会相当安全，因为（我们
假设）在make运行的时候将不会有任何源文件被加进来。
当我们的beanjar数量不多时，如上的代码可以应付自如。另一种开发方式是将每个EJB
放在它自己的jar中。大型的项目可能包含数10个jar。为了自动处理此状况，我们需要
为每个EJBjar产生一个具体规则。在这个例子中，EJB源代码自给自足：每个EJB与
相关的XML文件将会被放在单一目录中。你可以通过文件结尾的Session.java来找出每
个EJB目录。
基本的做法就是在源文件树中搜索EJB，然后为每个EJB建立一个具体规则，将这些规
则写入一个文件。EJB规则的建立动作将会受到“make本身对引I人文件的依存处理动
作”的触发。
session_jars一每个EJBjar以及它们相对源文件的路径
session_jars=
$（subst.java,.jar,
S(wildcard
$（addsuffix /*Session.java,$(COMPILATION_DIRS))))
EJBS——EJB jar列表
EJBS = $（addprefix $(TMP_DIR)/.$（notdir S(session_jars)）)
ejbs—创建所有的EJBjar文件
.PHONY:ejbs
ejbs:$(EJBS)
$(EJBS):
$（ca1l compile-bean,S@,S^,)
我们会通过对所有编译目录调用wildcard来找出各个Session.java文件。在这个例子
中，jar文件就是Session文件的名称加上jar后缀。这些jar文件本身会被放到临时的二
进制文件目录中。EJBS变量中所包含的是jar文件列表与它们的二进制文件目录路径。
这些EJBjar都是我们相要更新的工作目录，而实际的命令脚本就是我们的compile-
bean函数。为每个jar文件将文件列表记录在必要条件中，需要一点技巧。让我们来看
它们是如何被建立的。
-include $(OUTPUT_DIR)/ejb.d
#S(call ejb-rule,ejb-name)
ejb-rule=S（TMP_DIR)/$（notdir $1):
$（addprefix S(OUTPUT_DIR)/,
$(subst.java,.class,
$（wildcard $（dir $1)*.java)))\
$（wildcard $（dir $1)*.xml)
#ejb.d-EJB依存文件
$(OUTPUT_DIR)/ejb.d:Makefile
@echo Computing ejb dependencies...
---
## Page 203
Java
193
@for f in $(session_jars);
do
echo"\s$(callejb-rule,ssf)*;
done>s@
每个EJBjar的依存关系会被记录到一个独立的文件ejb.d中，这个文件会被makefile引
人。make首次查找这个文件的时候，它并不存在，所以make会调用更新引l人文件的
规则。我们为每个EJB编写了一行规则，如下所示：
S(call ejb-rule,src/com/company/foo/FooSession.jar)
ejb-rule函数将会被扩展成相应的jar工作目标与它的必要条件列表，如下所示：
classes/lib/FooSession.jar:classes/com/company/foo/FooHome.jar\
classes/com/company/foo/FooInterface.jar
classes/com/company/foo/FooSession.jar
src/com/company/foo/ejb-jar.xml
src/com/company/foo/ejb-weblogic-jar.xml
这样，就连大量的jar也可以在make中被管理，而且不必面对必须手动维护一组具体规
则所带来的麻烦。
---
## Page 204
第十章
改进make的效能
make在开发过程中扮演着关键性的角色。它可以将一个项目的各个要素组合起来以建
立一个应用程序，而且可以让开发人员避免因为意外省略某些编译步骤所导致的难以捉
摸的错误。然而，如果开发人员不想使用make，因为他们觉得makefile太慢了，无法
获得以上所提到的make的所有好处。因此，重点在于如何尽可能地让makefile有效率
地运行。
效能的问题总是难以处理，再加上用户的看法以及不同的描述方式就更难处理了。并非
makefile的每个工作目标都值得你花时间进行优化的动作，即使是基本的优化动作也可
能不值得你做，这取决于你的环境。例如，将一项操作从90分钟缩短为45分钟可能无
关痛痒，因为即使速度变快了，也等于是吃一顿午餐的时间。从另一方面来说，即使将
一项工作从2分钟缩短为1分钟，也可能获得喝彩一一如果开发人员闲得无聊的话。
当你要编写能够有效运行的makefile时，必须先了解各种操作的成本以及目前所进行的
是哪些操作。在接下来的各节中，我们将会进行若干简单的基准测试（benchmarking）
以便将我们的说明量化，并介绍可以协助我们找出瓶颈的技术。
一个可以协助我们改进效能的方法是利用并行和局域网络的技术。如果能够在同一时间
运行多个命令脚本（即使机器上只有一个处理器），将可缩短编译时间。
基准测试
这一节我们将会测量make中若干基本操作的效能。从表10-1中可以看到测量的结果。
我们将针对每种测试作出说明，并且提示它们会如何影响你所编写的makefile。
194
---
## Page 205
改进make的效能
195
表10-1：各种操作的成本
每次执行
每秒
每次执行
每秒
执行
所需秒数
执行次数
所需秒数
执行次数
操作
次数
(Windows)
(xnu）(SMopuM)
(Linux)
make (bash)
1000
0.0436
22
0.0162
61
make (ash)
1000
0.0413
24
0.0151
66
make (sh)
1000
0.0452
22