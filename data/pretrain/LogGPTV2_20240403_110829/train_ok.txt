.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th mlock 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
mlock, mlock2, munlock, mlockall, munlockall \- lock and unlock memory
.sh synopsis
.nf
.b #include 
.pp
.bi "int mlock(const void *" addr ", size_t " len );
.bi "int mlock2(const void *" addr ", size_t " len ", unsigned int " flags );
.bi "int munlock(const void *" addr ", size_t " len );
.pp
.bi "int mlockall(int " flags );
.b int munlockall(void);
.fi
.sh description
.br mlock (),
.br mlock2 (),
and
.br mlockall ()
lock part or all of the calling process's virtual address
space into ram, preventing that memory from being paged to the
swap area.
.pp
.br munlock ()
and
.br munlockall ()
perform the converse operation,
unlocking part or all of the calling process's virtual
address space, so that pages in the specified virtual address range may
once more to be swapped out if required by the kernel memory manager.
.pp
memory locking and unlocking are performed in units of whole pages.
.ss mlock(), mlock2(), and munlock()
.br mlock ()
locks pages in the address range starting at
.i addr
and continuing for
.i len
bytes.
all pages that contain a part of the specified address range are
guaranteed to be resident in ram when the call returns successfully;
the pages are guaranteed to stay in ram until later unlocked.
.pp
.br mlock2 ()
.\" commit a8ca5d0ecbdde5cc3d7accacbd69968b0c98764e
.\" commit de60f5f10c58d4f34b68622442c0e04180367f3f
.\" commit b0f205c2a3082dd9081f9a94e50658c5fa906ff1
also locks pages in the specified range starting at
.i addr
and continuing for
.i len
bytes.
however, the state of the pages contained in that range after the call
returns successfully will depend on the value in the
.i flags
argument.
.pp
the
.i flags
argument can be either 0 or the following constant:
.tp
.b mlock_onfault
lock pages that are currently resident and mark the entire range so
that the remaining nonresident pages are locked when they are populated
by a page fault.
.pp
if
.i flags
is 0,
.br mlock2 ()
behaves exactly the same as
.br mlock ().
.pp
.br munlock ()
unlocks pages in the address range starting at
.i addr
and continuing for
.i len
bytes.
after this call, all pages that contain a part of the specified
memory range can be moved to external swap space again by the kernel.
.ss mlockall() and munlockall()
.br mlockall ()
locks all pages mapped into the address space of the
calling process.
this includes the pages of the code, data, and stack
segment, as well as shared libraries, user space kernel data, shared
memory, and memory-mapped files.
all mapped pages are guaranteed
to be resident in ram when the call returns successfully;
the pages are guaranteed to stay in ram until later unlocked.
.pp
the
.i flags
argument is constructed as the bitwise or of one or more of the
following constants:
.tp
.b mcl_current
lock all pages which are currently mapped into the address space of
the process.
.tp
.b mcl_future
lock all pages which will become mapped into the address space of the
process in the future.
these could be, for instance, new pages required
by a growing heap and stack as well as new memory-mapped files or
shared memory regions.
.tp
.br mcl_onfault " (since linux 4.4)"
used together with
.br mcl_current ,
.br mcl_future ,
or both.
mark all current (with
.br mcl_current )
or future (with
.br mcl_future )
mappings to lock pages when they are faulted in.
when used with
.br mcl_current ,
all present pages are locked, but
.br mlockall ()
will not fault in non-present pages.
when used with
.br mcl_future ,
all future mappings will be marked to lock pages when they are faulted
in, but they will not be populated by the lock when the mapping is
created.
.b mcl_onfault
must be used with either
.b mcl_current
or
.b mcl_future
or both.
.pp
if
.b mcl_future
has been specified, then a later system call (e.g.,
.br mmap (2),
.br sbrk (2),
.br malloc (3)),
may fail if it would cause the number of locked bytes to exceed
the permitted maximum (see below).
in the same circumstances, stack growth may likewise fail:
the kernel will deny stack expansion and deliver a
.b sigsegv
signal to the process.
.pp
.br munlockall ()
unlocks all pages mapped into the address space of the
calling process.
.sh return value
on success, these system calls return 0.
on error, \-1 is returned,
.i errno
is set to indicate the error,
and no changes are made to any locks in the
address space of the process.
.sh errors
.\"svr4 documents an additional eagain error code.
.tp
.b eagain
.rb ( mlock (),
.br mlock2 (),
and
.br munlock ())
some or all of the specified address range could not be locked.
.tp
.b einval
.rb ( mlock (),
.br mlock2 (),
and
.br munlock ())
the result of the addition
.ir addr + len
was less than
.ir addr
(e.g., the addition may have resulted in an overflow).
.tp
.b einval
.rb ( mlock2 ())
unknown \fiflags\fp were specified.
.tp
.b einval
.rb ( mlockall ())
unknown \fiflags\fp were specified or
.b mcl_onfault
was specified without either
.b mcl_future
or
.br mcl_current .
.tp
.b einval
(not on linux)
.i addr
was not a multiple of the page size.
.tp
.b enomem
.rb ( mlock (),
.br mlock2 (),
and
.br munlock ())
some of the specified address range does not correspond to mapped
pages in the address space of the process.
.tp
.b enomem
.rb ( mlock (),
.br mlock2 (),
and
.br munlock ())
locking or unlocking a region would result in the total number of
mappings with distinct attributes (e.g., locked versus unlocked)
exceeding the allowed maximum.
.\" i.e., the number of vmas would exceed the 64kb maximum
(for example, unlocking a range in the middle of a currently locked
mapping would result in three mappings:
two locked mappings at each end and an unlocked mapping in the middle.)
.tp
.b enomem
(linux 2.6.9 and later) the caller had a nonzero
.b rlimit_memlock
soft resource limit, but tried to lock more memory than the limit
permitted.
this limit is not enforced if the process is privileged
.rb ( cap_ipc_lock ).
.tp
.b enomem
(linux 2.4 and earlier) the calling process tried to lock more than
half of ram.
.\" in the case of mlock(), this check is somewhat buggy: it doesn't
.\" take into account whether the to-be-locked range overlaps with
.\" already locked pages.  thus, suppose we allocate
.\" (num_physpages / 4 + 1) of memory, and lock those pages once using
.\" mlock(), and then lock the *same* page range a second time.
.\" in the case, the second mlock() call will fail, since the check
.\" calculates that the process is trying to lock (num_physpages / 2 + 2)
.\" pages, which of course is not true.  (mtk, nov 04, kernel 2.4.28)
.tp
.b eperm
the caller is not privileged, but needs privilege
.rb ( cap_ipc_lock )
to perform the requested operation.
.tp
.b eperm
.rb ( munlockall ())
(linux 2.6.8 and earlier) the caller was not privileged
.rb ( cap_ipc_lock ).
.sh versions
.br mlock2 ()
is available since linux 4.4;
glibc support was added in version 2.27.
.sh conforming to
.br mlock (),
.br munlock (),
.br mlockall (),
and
.br munlockall ():
posix.1-2001, posix.1-2008, svr4.
.pp
.br mlock2 ()
is linux specific.
.pp
on posix systems on which
.br mlock ()
and
.br munlock ()
are available,
.b _posix_memlock_range
is defined in \fi\fp and the number of bytes in a page
can be determined from the constant
.b pagesize
(if defined) in \fi\fp or by calling
.ir sysconf(_sc_pagesize) .
.pp
on posix systems on which
.br mlockall ()
and
.br munlockall ()
are available,
.b _posix_memlock
is defined in \fi\fp to a value greater than 0.
(see also
.br sysconf (3).)
.\" posix.1-2001: it shall be defined to -1 or 0 or 200112l.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines it to 1.
.sh notes
memory locking has two main applications: real-time algorithms and
high-security data processing.
real-time applications require
deterministic timing, and, like scheduling, paging is one major cause
of unexpected program execution delays.
real-time applications will
usually also switch to a real-time scheduler with
.br sched_setscheduler (2).
cryptographic security software often handles critical bytes like
passwords or secret keys as data structures.
as a result of paging,
these secrets could be transferred onto a persistent swap store medium,
where they might be accessible to the enemy long after the security
software has erased the secrets in ram and terminated.
(but be aware that the suspend mode on laptops and some desktop
computers will save a copy of the system's ram to disk, regardless
of memory locks.)
.pp
real-time processes that are using
.br mlockall ()
to prevent delays on page faults should reserve enough
locked stack pages before entering the time-critical section,
so that no page fault can be caused by function calls.
this can be achieved by calling a function that allocates a
sufficiently large automatic variable (an array) and writes to the
memory occupied by this array in order to touch these stack pages.
this way, enough pages will be mapped for the stack and can be
locked into ram.
the dummy writes ensure that not even copy-on-write
page faults can occur in the critical section.
.pp
memory locks are not inherited by a child created via
.br fork (2)
and are automatically removed (unlocked) during an
.br execve (2)
or when the process terminates.
the
.br mlockall ()
.b mcl_future
and
.b mcl_future | mcl_onfault
settings are not inherited by a child created via
.br fork (2)
and are cleared during an
.br execve (2).
.pp
note that
.br fork (2)
will prepare the address space for a copy-on-write operation.
the consequence is that any write access that follows will cause
a page fault that in turn may cause high latencies for a real-time process.
therefore, it is crucial not to invoke
.br fork (2)
after an
.br mlockall ()
or
.br mlock ()
operation\(emnot even from a thread which runs at a low priority within
a process which also has a thread running at elevated priority.
.pp
the memory lock on an address range is automatically removed
if the address range is unmapped via
.br munmap (2).
.pp
memory locks do not stack, that is, pages which have been locked several times
by calls to
.br mlock (),
.br mlock2 (),
or
.br mlockall ()
will be unlocked by a single call to
.br munlock ()
for the corresponding range or by
.br munlockall ().
pages which are mapped to several locations or by several processes stay
locked into ram as long as they are locked at least at one location or by
at least one process.
.pp
if a call to
.br mlockall ()
which uses the
.b mcl_future
flag is followed by another call that does not specify this flag, the
changes made by the
.b mcl_future
call will be lost.
.pp
the
.br mlock2 ()
.b mlock_onfault
flag and the
.br mlockall ()
.b mcl_onfault
flag allow efficient memory locking for applications that deal with
large mappings where only a (small) portion of pages in the mapping are touched.
in such cases, locking all of the pages in a mapping would incur
a significant penalty for memory locking.
.ss linux notes
under linux,
.br mlock (),
.br mlock2 (),
and
.br munlock ()
automatically round
.i addr
down to the nearest page boundary.
however, the posix.1 specification of
.br mlock ()
and
.br munlock ()
allows an implementation to require that
.i addr
is page aligned, so portable applications should ensure this.
.pp
the
.i vmlck
field of the linux-specific
.i /proc/[pid]/status
file shows how many kilobytes of memory the process with id
.i pid
has locked using
.br mlock (),
.br mlock2 (),
.br mlockall (),
and
.br mmap (2)
.br map_locked .
.ss limits and permissions
in linux 2.6.8 and earlier,
a process must be privileged
.rb ( cap_ipc_lock )
in order to lock memory and the
.b rlimit_memlock
soft resource limit defines a limit on how much memory the process may lock.
.pp
since linux 2.6.9, no limits are placed on the amount of memory
that a privileged process can lock and the
.b rlimit_memlock
soft resource limit instead defines a limit on how much memory an
unprivileged process may lock.
.sh bugs
in linux 4.8 and earlier,
a bug in the kernel's accounting of locked memory for unprivileged processes
(i.e., without
.br cap_ipc_lock )
meant that if the region specified by
.i addr
and
.i len
overlapped an existing lock,
then the already locked bytes in the overlapping region were counted twice
when checking against the limit.
such double accounting could incorrectly calculate a "total locked memory"
value for the process that exceeded the
.br rlimit_memlock
limit, with the result that
.br mlock ()
and
.br mlock2 ()
would fail on requests that should have succeeded.
this bug was fixed
.\" commit 0cf2f6f6dc605e587d2c1120f295934c77e810e8
in linux 4.9.
.pp
in the 2.4 series linux kernels up to and including 2.4.17,
a bug caused the
.br mlockall ()
.b mcl_future
flag to be inherited across a
.br fork (2).
this was rectified in kernel 2.4.18.
.pp
since kernel 2.6.9, if a privileged process calls
.i mlockall(mcl_future)
and later drops privileges (loses the
.b cap_ipc_lock
capability by, for example,
setting its effective uid to a nonzero value),
then subsequent memory allocations (e.g.,
.br mmap (2),
.br brk (2))
will fail if the
.b rlimit_memlock
resource limit is encountered.
.\" see the following lkml thread:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=113801392825023&w=2
.\" "rationale for rlimit_memlock"
.\" 23 jan 2006
.sh see also
.br mincore (2),
.br mmap (2),
.br setrlimit (2),
.br shmctl (2),
.br sysconf (3),
.br proc (5),
.br capabilities (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/nan.3
.so man3/pthread_mutex_consistent.3
.so man2/sendfile.2
.so man3/fts.3
.so man3/xdr.3
.\" copyright (c) 2003 andries brouwer (PI:EMAIL) and
.\" walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.th getspnam 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
getspnam, getspnam_r, getspent, getspent_r, setspent, endspent,
fgetspent, fgetspent_r, sgetspent, sgetspent_r, putspent,
lckpwdf, ulckpwdf \- get shadow password file entry
.sh synopsis
.nf
/* general shadow password file api */
.b #include 
.pp
.bi "struct spwd *getspnam(const char *" name );
.b struct spwd *getspent(void);
.pp
.b void setspent(void);
.b void endspent(void);
.pp
.bi "struct spwd *fgetspent(file *" stream );
.bi "struct spwd *sgetspent(const char *" s );
.pp
.bi "int putspent(const struct spwd *" p ", file *" stream );
.pp
.b int lckpwdf(void);
.b int ulckpwdf(void);
.pp
/* gnu extension */
.b #include 
.pp
.bi "int getspent_r(struct spwd *" spbuf ,
.bi "               char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.bi "int getspnam_r(const char *" name ", struct spwd *" spbuf ,
.bi "               char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.pp
.bi "int fgetspent_r(file *" stream ", struct spwd *" spbuf ,
.bi "               char *" buf ", size_t " buflen ", struct spwd **" spbufp );
.bi "int sgetspent_r(const char *" s ", struct spwd *" spbuf ,
.bi "               char *" buf ", size_t " buflen ", struct spwd **" spbufp );