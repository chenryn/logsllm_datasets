balance in such an environment, before finally discussing how an SOE should be integrated
into day-to-day maintenance processes. The effective application of this concept enables
efficient and effective management of Linux environments at very large scales.
In this chapter, we will cover the following topics:
Understanding the challenges of Linux environment scaling
What is an SOE?
Exploring SOE benefits
Knowing when to deviate from standards
Ongoing maintenance of SOEs
Building a Standard Operating Environment on Linux Chapter 1
Understanding the challenges of Linux
environment scaling
Before we delve into the definition of an SOE, let's explore the challenges of scaling a Linux
environment without standards. An exploration of this will help us to understand the
definition itself, as well as how to define the right standards for a given scenario.
Challenges of non-standard environments
It is important to consider that many challenges experienced by enterprises with
technology estates (whether Linux or otherwise) do not start out as such. In the early stages
of growth, in fact, many systems and processes are entirely sustainable, and in the next
section, we will look at this early stage of environment growth as a precursor to
understanding the challenges associated with large-scale growth.
Early growth of a non-standard environment
In a surprisingly large number of companies, Linux environments begin life without any
form of standardization. Often, they grow organically over time. Deployments start out
small, perhaps just covering a handful of core functions, and as time passes and
requirements grow, so does the environment. Skilled system administrators often make
changes by hand on a per-server basis, deploying new services and growing the server
estate as business demands dictate.
This organic growth is the path of least resistance for most companies—project deadlines
are often tight and in addition both budget and resource are scarce. Hence, when a skilled
Linux resource is available, that resource can assist in just about all of the tasks required,
from simple maintenance tasks to commissioning complex application stacks. It saves a
great deal of time and money spent on architecture and makes good use of the skillset of
staff on hand as they can be used to address immediate issues and deployments, rather
than spending time on architectural design. Hence, quite simply, it makes sense, and the
author has experienced this at several companies, even high-profile multi-national ones.
[ 9 ]
Building a Standard Operating Environment on Linux Chapter 1
Impacts of non-standard environments
Let's take a deeper look at this from a technical standpoint. There are numerous flavors of
Linux, numerous applications that perform (at a high level) the same function, and
numerous ways to solve a given problem. For example, if you want to script a task, do you
write it in a shell script, Perl, Python, or Ruby? For some tasks, all can achieve the desired
end result. Different people have different preferred ways of approaching problems and
different preferred technology solutions, and often it is found that a Linux environment has
been built using a technology that was the flavor of the month when it was created or that
was a favorite of the person responsible for it. There is nothing wrong with this in and of
itself, and initially, it does not cause any problems.
If organic growth brings with it one fundamental problem, it is this: scale. Making changes
by hand and always using the latest and greatest technology is great when the environment
size is relatively small, and often provides an interesting challenge, hence keeping technical
staff feeling motivated and valued. It is vital for those working in technology to keep their
skills up to date, so it is often a motivating factor to be able to employ up-to-date
technologies as part of the day job.
Scaling up non-standard environments
When the number of servers enters the hundreds, never mind thousands (or even greater!),
this whole organic process breaks down. What was once an interesting challenge becomes
laborious and tedious, even stressful. The learning curve for new team members is steep. A
new hire may find themselves with a disparate environment with lots of different
technologies to learn, and possibly a long period of training before they can become truly
effective. Long-serving team members can end up being silos of knowledge, and should
they depart the business, their loss can cause continuity issues. Problems and outages
become more numerous as the non-standard environment grows in an uncontrolled
manner, and troubleshooting becomes a lengthy endeavor—hardly ideal when trying to
achieve a 99.99% service uptime agreement, where every second of downtime matters!
Hence, in the next section, we will look at how to address these challenges with an SOE.
[ 10 ]
Building a Standard Operating Environment on Linux Chapter 1
Addressing the challenges
From this, we realize our requirement for standardization. Building a suitable SOE is all
about the following:
Realizing economies of scale
Being efficient in day-to-day operations
Making it easy for all involved to get up to speed quickly and easily
Being aligned with the growing needs of the business
After all, if an environment is concise in its definition, then it is easier for everyone
involved in it to understand and work with. This, in turn, means tasks are completed
quicker and with greater ease. In short, standardization can bring cost savings and
improved reliability.
It must be stressed that this is a concept and not an absolute. There is no right or wrong
way to build such an environment, though there are best practices. Throughout this
chapter, we will explore the concept further and help you to identify core best practices
associated with SOEs so that you can make informed decisions when defining your own.
Let's proceed to explore this in more detail. Every enterprise has certain demands of their
IT environments, whether they are based on Linux, Windows, FreeBSD, or any other
technology. Sometimes, these are well understood and documented, and sometimes, they
are simply implicit—that is to say, everyone assumes the environment meets these
standards, but there is no official definition. These requirements often include the following:
Security
Reliability
Scalability
Longevity
Supportability
Ease of use
These, of course, are all high-level requirements, and very often, they intersect with each
other. Let's explore these in more detail.
[ 11 ]
Building a Standard Operating Environment on Linux Chapter 1
Security
Security in an environment is established by several factors. Let's look at some questions to
understand the factors involved:
Is the configuration secure?
Have we allowed the use of weak passwords?
Is the superuser, root, allowed to log in remotely?
Are we logging and auditing all connections?
Now, in a non-standard environment, how can you truly say that these requirements are all
enforced across all of your Linux servers? To do so requires a great deal of faith they have
all been built the same way, that they had the same security parameters applied, and that
no-one has ever revisited the environment to change anything. In short, it requires fairly
frequent auditing to ensure compliance.
However, where the environment has been standardized, and all servers have been built
from a common source or using a common automation tool (we shall demonstrate this later
in this book), it is much easier to say with confidence that your Linux estate is secure.
A standards-based environment isn't implicitly secure, of course—if there
is an issue that results in a vulnerability in the build process for this
environment, automation means this vulnerability will be replicated
across the entire environment! It is important to be aware of the security
requirements of your environment and to implement these with care,
maintaining and auditing your environment continuously to ensure
security levels are maintained.
Security is also enforced by patches, which ensure you are not running any software with
vulnerabilities that could allow an attacker to compromise your servers. Some Linux
distributions have longer lives than others. For example, Red Hat Enterprise Linux (and
derivatives such as CentOS) and the Ubuntu LTS releases all have long, predictable life
cycles and make good candidates for your Linux estate.
As such, they should be part of your standards. By contrast, if a bleeding edge Linux
distribution such as Fedora has been used because, perhaps, it had the latest packages
required at the time, you can be sure that the life cycle will be short, and that updates
would cease in the not too distant future, hence leaving you open to potential unpatched
vulnerabilities and the need to upgrade to a newer release of Fedora.
[ 12 ]
Building a Standard Operating Environment on Linux Chapter 1
Even if the upgrade to a newer version of Fedora is performed, sometimes packages get
orphaned—that is to say, they do not get included in the newer release. This might be
because they have been superseded by a different package. Whatever the cause, upgrading
one distribution to another could cause a false sense of security and should be avoided
unless thoroughly researched. In this way, standardization helps to ensure good security
practices.
Reliability
Many enterprises expect their IT operations to be up and running 99.99% of the time (or
better). Part of the route to achieving this is robust software, application of relevant bug
fixes, and well-defined troubleshooting procedures. This ensures that in the worst case
scenario of an outage, the downtime is as minimal as possible.
Standardization again helps here—as we discussed in the preceding section on security, a
good choice of underlying operating system ensures that you have ongoing access to bug
fixes and updates, and if you know that your business needs a vendor backup to ensure
business continuity, then the selection of a Linux operating system with a support contract
(available with Red Hat or Canonical, for example) makes sense.
Equally, when servers are all built to a well-defined and understood standard, making
changes to them should yield predictable results as everyone knows what they are working
with. If all servers are built slightly differently, then a well-meaning change or update
could have unintended consequences and result in costly downtime.
Again with standardization, even if the worst-case scenario occurs, everyone involved
should know how to approach the problem because they will know that all servers have
been built on a certain base image and have a certain configuration. This knowledge and
confidence reduce troubleshooting times and ultimately downtime.
Scalability
All enterprises desire their business to grow and most times, this means that IT
environments need to scale up to deal with increased demand. In an environment where
the servers are built in a non-standard manner, scaling up an environment becomes more of
a challenge.
For example, if scaling horizontally (adding more identical servers to an existing service),
the new servers should all have the same configuration as the existing ones. Without
standards, the first step is to work out how the initial set of servers was built and then to
clone this and make the necessary changes to produce more unique servers.
[ 13 ]
Building a Standard Operating Environment on Linux Chapter 1
This process is somewhat cumbersome whereas, with a standardized environment, the
investigative step is completely unnecessary, and horizontal scaling becomes a predictable,
repeatable, business-as-usual task. It also ensures greater reliability as there should be no
unintended results from the new servers in the case that a non-standard configuration item
was missed. Human beings are incredible, intelligent beings capable of sending a man to
the moon, and yet they are equally capable of overlooking a single line in a configuration
file. The idea of standardization is to mitigate this risk, and hence make it quick and
efficient to scale an environment either up or out using a well-thought-out operating
system template, the concept of which we will explore as we proceed through this chapter.
Longevity
Sometimes when deploying a service, a particular software version is needed. Let's take the
example of a web application that runs on PHP. Now, suppose that your particular
enterprise has, for historical reasons, standardized on CentOS 6 (or RHEL 6). This operating
system only ships with PHP 5.3, meaning that if you suddenly take on an application that
only supports PHP 7.0 and above, you need to figure out how to host this.
One apparently obvious solution to this would be to roll out a Fedora virtual machine
image. After all, it shares similar technologies to CentOS and RHEL and has much more
up-to-date libraries included with it. The author has direct experience of this kind of
solution in several roles! However, let's take a look at the bigger picture.
RHEL (and CentOS, which is based upon this) has a lifespan of around 10 years, depending
on the point at which you purchased it. In an enterprise, this is a valuable proposition—it
means that you can guarantee that any servers you build will have patches and support for
up to 10 years (and possibly longer with extended life cycle support) from the point at
which you built them. This ties in nicely with our previous points around security,
reliability, and supportability (in the following section).
However, any servers that you build on Fedora will have a lifespan of somewhere in the
region of 12-18 months (depending on the Fedora release cycle)—in an enterprise setting,
having to redeploy a server after, say, 12-18 months is a headache that is not needed.
This is not to say there is never a case for deploying on Fedora or any other fast-moving
Linux platform—it is simply to state that in an enterprise where security and reliability are
vitally important, you are unlikely to want a Linux platform with a short life cycle as the
short term gain (newer library support) would be replaced in 12-18 months with the pain of
a lack of updates and the need to rebuild/upgrade the platform.
[ 14 ]
Building a Standard Operating Environment on Linux Chapter 1
Of course, this does depend very much on your approach to your infrastructure—some
enterprises take a very container-like approach to their servers and re-deploy them with
every new software release or application deployment. When your infrastructure and build
standards are defined by code (such as Ansible), then it is entirely possible to do this with a
fairly minimal impact on your day-to-day operations, and it is unlikely that any single
server would be around for long enough for the operating system to become outdated or
unsupported.
At the end of the day, the choice is yours and you must establish which path you feel
provides you with the most business benefit without putting your operations at risk. Part of
standardization is to make sound, rational decisions on technology and to adopt them
wherever feasible, and your standard could include frequent rebuilds such that you can use
a fast-moving operating system such as Fedora. Equally, you might decide that your
standard is that servers will have long lives and be upgraded in place, and in this case, you
would be better choosing an operating system such as an Ubuntu LTS release or
RHEL/CentOS.
In the following section, we will look in greater detail at how an SOE benefits the concept of
supportability in the next section.
Supportability
As we have already discussed, having a standardized environment brings with it two
benefits. The first is that a well-chosen platform means a long vendor support life cycle.
This, in turn, means long support from either the vendor (in the case of a product such as
RHEL) or the community (in the case of CentOS). Some operating systems such as Ubuntu
Server are available with either community support or a paid contract directly from
Canonical.
Supportability doesn't just mean support from the vendor or the Linux community at large,
however. Remember that, in an enterprise, your staff is your front line support before
anyone external steps in. Now, imagine having a crack team of Linux staff, and presenting
them with a server estate comprised of Debian, SuSe, CentOS, Fedora, Ubuntu, and
Manjaro. There are similarities between them, but also a huge number of differences.
Across them, there are four different package managers for installing and managing
software packages, and that's just one example.
Whilst entirely supportable, it does present more of a challenge for your staff and means
that, for anyone joining the company, you require both a broad and a deep set of Linux
experience—either that or an extensive on-boarding process to get them up to speed.
[ 15 ]
Building a Standard Operating Environment on Linux Chapter 1
With a standardized environment, you might end up with more than one operating system,
but nonetheless, if you can meet all of your requirements with, say, CentOS 7 and Ubuntu
Server 18.04 LTS (and know that you are covered for the next few years because of your
choices), then you immediately reduce the workload on your Linux team and enable them
to spend more time creatively solving problems (for example, automating solutions with
Ansible!) and less time figuring out the nuances between operating systems. As we have
also discussed, in the event of an issue, they will be more familiar with each OS and hence
need to spend less time debugging, reducing downtime.
This brings us nicely into the subject of ease of use at scale, and we will provide an
overview of this in the next section.
Ease of use
This final category overlaps heavily with the last two—that is to say that, quite simply, the
more standardized your environment, the easier it is for a given set of employees to get to
grips with it. This automatically promotes all of the benefits we have discussed so far
around reducing downtime, easier recruitment and on-boarding of staff, and so on.
Having set out the challenges that an SOE helps to address, we will proceed in the next
section to look at the anatomy of such an environment to understand it from a technical
standpoint.
What is an SOE?
Now that we've explored the reasons why an SOE is important to the enterprise and
understood at a high level the solutions for these problems, let's look in detail at an SOE.
We will begin by defining the SOE itself.
Defining the SOE
Let's take a quick look at this from a more practical standpoint. As we have already said, an
SOE is a concept, not an absolute. It is, at its simplest level, a common server image or build
standard that is deployed across a large number of servers throughout a company. Here, all
required tasks are completed in a known, documented manner.
[ 16 ]
Building a Standard Operating Environment on Linux Chapter 1
To start with, there is the base operating system—and, as we have discussed, there are
hundreds of Linux distributions to choose from. Some are quite similar from a system
administration perspective (for example, Debian and Ubuntu), whilst some are markedly
different (for example, Fedora and Manjaro). By way of a simple example, let's say you
wanted to install the Apache Web Server on Ubuntu 18.04 LTS—you would enter the
following commands:
# sudo apt-get update
# sudo apt-get install apache2
Now, if you wanted to do the same thing but on CentOS 7, you would enter the following:
# sudo yum install httpd
As you can see, there is nothing in common between these commands—not even the name
of the package, even though the end result in both cases is an installation of Apache. On a
small scale, this is not an issue, but when servers are numerous and as server count goes
up, so does the complexity of managing such an environment.
The base operating system is just the start. Our example above was installing Apache, yet
we could also install nginx or even lighttpd. They are, after all, also web servers.
Then, there is configuration. Do you want users to be able to log in as root over SSH? Do
you need a certain level of logging for audit or debug purposes? Do you need local or
centralized authentication? The list is myriad, and as you can see, if left unchecked could
grow into a massive headache.
This is where the SOE comes in. It is effectively a specification, and at a high level, it might
say the following:
Our standard base operating system is Ubuntu 18.04 LTS.
Our standard web server will be Apache 2.4.
SSH logins are enabled, but only for users with SSH keys and not root.
All user logins must be logged and archived for audit purposes.
Except for a few local break glass accounts, all accounts must be centrally
managed (for example, by LDAP or Active Directory).
Our corporate monitoring solution must be integrated (for example, the Nagios
NCPA agent must be installed and configured to communicate with our Nagios
server).
All system logs must be sent to the corporate central log management system.
Security hardening must be applied to the system.
[ 17 ]
Building a Standard Operating Environment on Linux Chapter 1
The preceding is simply an example, and it is by no means complete; however, it should
begin to give you an idea of what an SOE looks like at a high level. As we proceed through