最近开始研究qemu，想看看qemu逃逸相关的知识，看了一些资料，学习pwn qemu首先要对qemu的一些基础知识有一定的掌握。
qemu 是纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备。当然虚拟化因为性能的原因是无法直接代替硬件的，到那时它对于实验以及测试是非常方便的。
目前qemu出问题比较多的地方以及比赛中出题目的形式都在在设备模拟中，因此后续也会将关注点主要放在设备模拟上。
下一篇将主要是Blizzard CTF 2017
Strng的题解，所以本次的基础知识以该题[代码](https://github.com/rcvalle/blizzardctf2017/blob/master/strng.c)以及qemu源码为例进行解释。
## qemu概述
运行的每个qemu虚拟机都相应的是一个qemu进程，从本质上看，虚拟出的每个虚拟机对应 host 上的一个 qemu 进程，而虚拟机的执行线程（如 CPU
线程、I/O 线程等）对应 qemu 进程的一个线程。
其次我们需要知道的是，虚拟机所对应的内存结构。根据文章[VM escape-QEMU Case
Study](http://www.phrack.org/papers/vm-escape-qemu-case-study.html)，qemu虚拟机内存所对应的真实内存结构如下：
    Guest' processes
                         +--------------------+
    Virtual addr space   |                    |
                         +--------------------+
                         |                    |
                         \__   Page Table     \__
                            \                    \
                             |                    |  Guest kernel
                        +----+--------------------+----------------+
    Guest's phy. memory |    |                    |                |
                        +----+--------------------+----------------+
                        |                                          |
                        \__                                        \__
                           \                                          \
                            |             QEMU process                 |
                       +----+------------------------------------------+
    Virtual addr space |    |                                          |
                       +----+------------------------------------------+
                       |                                               |
                        \__                Page Table                   \__
                           \                                               \
                            |                                               |
                       +----+-----------------------------------------------++
    Physical memory    |    |                                               ||
                       +----+-----------------------------------------------++
qemu进行会为虚拟机mmap分配出相应虚拟机申请大小的内存，用于给该虚拟机当作物理内存（在虚拟机进程中只会看到虚拟地址）。
如strng启动的命令为：
    ./qemu-system-x86_64 \
        -m 1G \
        -device strng \
        -hda my-disk.img \
        -hdb my-seed.img \
        -nographic \
        -L pc-bios/ \
        -enable-kvm \
        -device e1000,netdev=net0 \
        -netdev user,id=net0,hostfwd=tcp::5555-:22
qemu虚拟机对应的内存为1G，虚拟机启动后查看qemu的地址空间，可以看到存在一个大小为`0x40000000`内存空间，即为该虚拟机的物理内存。
    0x7fe37fafe000     0x7fe37fbfe000 rw-p   100000 0
        0x7fe37fbfe000     0x7fe37fbff000 ---p     1000 0
        0x7fe37fbff000     0x7fe37fcff000 rw-p   100000 0
        0x7fe37fcff000     0x7fe37fd00000 ---p     1000 0
        0x7fe37fd00000     0x7fe37fe00000 rw-p   100000 0
        0x7fe37fe00000     0x7fe3bfe00000 rw-p 40000000 0   //虚拟机对应的内存
如果我们在qemu虚拟机中申请一段内存空间，该如何才能在宿主机中找到该内存呢？
首先将qemu虚拟机中相应的虚拟地址转化成物理地址，该物理地址即为qemu进程为其分配出来的相应偏移，利用该地址加上偏移即是该虚拟地址对应在宿主机中的地址。
仍然是在strng虚拟机中，运行以下程序：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SHIFT  12
    #define PAGE_SIZE   (1 > 9) & ~7;
        lseek(fd, offset, SEEK_SET);
        read(fd, &pme, 8);
        if (!(pme & PFN_PRESENT))
            return -1;
        gfn = pme & PFN_PFN;
        return gfn;
    }
    uint64_t gva_to_gpa(void *addr)
    {
        uint64_t gfn = gva_to_gfn(addr);
        assert(gfn != -1);
        return (gfn  x/s 0x7fe37fe00000+0x33cd6008
    0x7fe3b3ad6008: "Where am I?"
## pci设备地址空间
PCI设备都有一个配置空间（PCI Configuration
Space），其记录了关于此设备的详细信息。大小为256字节，其中头部64字节是PCI标准规定的，当然并非所有的项都必须填充，位置是固定了，没有用到可以填充0。前16个字节的格式是一定的，包含头部的类型、设备的总类、设备的性质以及制造商等，格式如下：
比较关键的是其6个BAR(Base Address Registers)，BAR记录了设备所需要的地址空间的类型，基址以及其他属性。BAR的格式如下：
设备可以申请两类地址空间，memory space和I/O space，它们用BAR的最后一位区别开来。
当BAR最后一位为0表示这是映射的I/O内存，为1是表示这是I/O端口，当是I/O内存的时候1-2位表示内存的类型，bit
2为1表示采用64位地址，为0表示采用32位地址。bit1为1表示区间大小超过1M，为0表示不超过1M。bit3表示是否支持可预取。
而相对于I/O内存，当最后一位为1时表示映射的I/O端口。I/O端口一般不支持预取，所以这里是29位的地址。
通过memory space访问设备I/O的方式称为memory mapped
I/O，即MMIO，这种情况下，CPU直接使用普通访存指令即可访问设备I/O。
通过I/O space访问设备I/O的方式称为port I/O，或者port mapped
I/O，这种情况下CPU需要使用专门的I/O指令如`IN/OUT`访问I/O端口。
关于MMIO和PMIO，维基百科的描述是：
    Memory-mapped I/O (MMIO) and port-mapped I/O (PMIO) (which is also called
    isolated I/O) are two complementary methods of performing input/output (I/O)
    between the central processing unit (CPU) and peripheral devices in a computer.
    An alternative approach is using dedicated I/O processors, commonly known as
    channels on mainframe computers, which execute their own instructions.
在MMIO中，内存和I/O设备共享同一个地址空间。
MMIO是应用得最为广泛的一种I/O方法，它使用相同的地址总线来处理内存和I/O设备，I/O设备的内存和寄存器被映射到与之相关联的地址。当CPU访问某个内存地址时，它可能是物理内存，也可以是某个I/O设备的内存，用于访问内存的CPU指令也可来访问I/O设备。每个I/O设备监视CPU的地址总线，一旦CPU访问分配给它的地址，它就做出响应，将数据总线连接到需要访问的设备硬件寄存器。为了容纳I/O设备，CPU必须预留给I/O一个地址区域，该地址区域不能给物理内存使用。
在PMIO中，内存和I/O设备有各自的地址空间。
端口映射I/O通常使用一种特殊的CPU指令，专门执行I/O操作。在Intel的微处理器中，使用的指令是IN和OUT。这些指令可以读/写1,2,4个字节（例如：`outb`,
`outw`,
`outl`）到IO设备上。I/O设备有一个与内存不同的地址空间，为了实现地址空间的隔离，要么在CPU物理接口上增加一个I/O引脚，要么增加一条专用的I/O总线。由于I/O地址空间与内存地址空间是隔离的，所以有时将PMIO称为被隔离的IO(Isolated
I/O)。
### qemu中查看pci设备
下面通过在qemu虚拟机中查看pci设备来进一步增进理解，仍然是基于strng这道题的qemu虚拟机。
`lspci`命令用于显示当前主机的所有PCI总线信息，以及所有已连接的PCI设备信息。
pci设备的寻址是由总线、设备以及功能构成。如下所示：
    ubuntu@ubuntu:~$ lspci
    00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)
    00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]
    00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]
    00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)
    00:02.0 VGA compatible controller: Device 1234:1111 (rev 02)
    00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)
    00:04.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)
`xx:yy:z`的格式为`总线:设备:功能`的格式。
可以使用lspci命令以树状的形式输出pci结构：
    ubuntu@ubuntu:~$ lspci -t -v
    -[0000:00]-+-00.0  Intel Corporation 440FX - 82441FX PMC [Natoma]
               +-01.0  Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]
               +-01.1  Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]
               +-01.3  Intel Corporation 82371AB/EB/MB PIIX4 ACPI
               +-02.0  Device 1234:1111