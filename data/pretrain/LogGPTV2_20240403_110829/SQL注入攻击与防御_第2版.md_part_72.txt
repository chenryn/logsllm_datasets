标识异常的流量传输
Time Taken
(time-taken)
服务器执行请求所花的毫秒数
标识异常请求处理的实例
默认情况下，Web服务器将以文本文件方式存储日志数据，并将其持久地存储在操作系统
的文件系统中。Web服务器的日志大小可以是数兆字节（MB），也可以是儿吉字节（GB）的文件。
由于较大Web服务器的日志文件中包含了大量的数据，因此使用日志分析工具要比手工查看
攻击的内容更加高效。LogParser是一款由Microsoft开发的日志分析工具，它是中立于厂商的，
支持 IIS和Apache使用的日志文件格式，在Log Parser中，可以使用灵活、快速和精确的 SQL
语句来分析庞大的日志文件，这种方式在时间上非常高效。
当开始调查时，对于可疑的SQL注入攻击通常只具有少量的细节信息，还需要对Web服
务器的日志文件进行广泛分析。开始分析的最佳目标，就是查找Web请求或带宽利用率异常
偏高的日期。下面是一些如何使用Log Parser分析日志文件的例子：
每天的带宽利用率：下面的例子分析了IS的日志文件，返回Web服务器每天接收和发送
的以KB为单位的数据流量。在下面的查询中，请注意必须启用cs-bytes和sc-bytes 字段（默认
情况下并未启用这两个字段）：
logparser *Select To_String (To_timestamp (date, time), *sM-dd*) As Day,
Div(Sum(cs-bytes) , 1024) As Incoming (K) , Div (Sum (sc=bytes) ,1024) As
Outgoing (K) Into z:\Bandwidth_by_day. txt From
eq g dnoxg boT* ￥xan\zS\saao\so\qndau\=
下面是查询结果：
Day
Incoming (K)
Outgoing (K)
356
---
## Page 371
第10章确认并从SQL注入攻击中恢复
07-21800
94
07-30500
101
01-10300
100
01271059
2398
0128 1106
2775
页面每天命中的次数：下面的查询将返回每一个ASP页面和可执行文件被请求的次数，
并按日期进行分组。
logparser *SELECT TO_STRING (TO_TIMESTAMP (date, time) , * yYYyMM-dd*) AS
Day, Cs-uri-stem, COUNT (*) AS Total FROM C:\inetpub\logs\LogFiles\
3Svc1\u_ex*,1og KHERE (sc-status=500) AND
LIKE *,exe%*) GRoUP BY Day, cs-uri-stem ORDER BY cs-uri-stem,
Day* -rtp:-1
在网站中，虽然某些页面被访问的次数要大于其他页面，但应该检查该查询的结果，以识
别出那些与其他日期相比具有非常高访问量的页面和对象。下面的查询结果显示，在12月8号
存在突出的访问峰值，应该进一步进行调查：
Day
cs-uri-stem
Tota1
20110515
/defalut,aspx
/default.aspx
123
20110331
119
20111207
/default,aspx
163
20111208
/default.aspx
/default.aspx
2109
20111209
204
页面每天被某个IP命中的次数：为了更深入地分析，可以使用下面的查询返回一个每天的、
已记录的客户端IP和所访问资源的列表，应该重点关注具有较高访问次数的客户端IP地址和
所访问的资源。
logparser "SELECT DISTINCT date, cs-uri-stem, c-ip, Count (*) AS Hits
FROM C:\inetpub\1ogs\LogFi1es\W3SVC1\u_ex* , 1og GRoUP BY date, c-ip,
cs-uri-stem HAVING Hits> 40 ORDER BY Hits Desc" -rtp:-1
date
c-ip
Hits
20101121
/EmployeeSearch,aspx
192.168.1.31
902
20110319
/employeesearch.aspx
192.168.1.8
/employeesearch,aspx
69
2011-0321
192.168.1.8
4 4
20101121
/EmployeeSearch,aspx
192,168.1.65
41
20111208
/employeesearch,aspx
192,168.1.8
1007
20110319
/employeesearch.aspx
192.168.1.50
95
2011-05-15
/employeesearch,aspx
192.168.1.99
68
20110321
1/emp1oyeesearch.aspx 192.168.1.50
59
357
---
## Page 372
SQL注入攻击与防御（第2版）
请注意，同一个攻击者常常会在多个不同日期反复利用某个SQL注入漏洞。在这个时间
段内，同一个攻击者可能会为了改变他的客户端IP地址，从不同的物理位置或试探使用不同
的代理来发起连接。为了识别这种情况，应该对具有较高请求量的多个IP地址进行分析，比
较它们存储在c-ip属性中的客户端信息，检查是否有匹配的情况。如果存在相同的客户端信息，
那么连接的另外一端可能是同一个客户端。运行下面的查询，它将对两个指定的IP地址分析
Web日志并比较客户端信息，比如操作系统、客户端计算机上的.NET版本以及补丁级别：
c-ip=′198.54.202.2′ or c-ip=′62.135.71.223*= -rtp:1
在下面的查询结果中，可以看到相似的客户端版本和软件信息：
***
192.168.6 .51 Mozi11a/4 . 0+ (compatible +MSIE+8, 0;+Windows+NT+6 . 1; +W.. 
192.168 .6 . 131 Mozi11a/4. 0+ (compatible, +MSIE+8 . 0;+Windows+NT+6. 1; +.. *
对于上面的例子，可能存在分析错误的可能，因为从理论上来说，两个不同的计算机具有
完全相同的操作系统版本、客户端软件和补丁是可能的。在这种情况下可以进一步进行分析，
通过比较两个可疑客户端的Web请求，进一步判断这两个可疑客户端是不是从不同IP地址发
起连接的同一台计算机。
经过上面对日志文件的分析，读者应该了解了被攻击者作为目标的Web页面或可执行文
件，并找到了攻击者发起攻击的可疑时间段。可以通过这些信息来查找恶意的查询参数，或者
使用笔者称为spcar-searching的技术，从而准确地定位恶意的活动。
恶意查询参数：下面是一个查询示例，它将返回提交给Web应用程序的所有查询参数、源
IP地址和参数发送次数的列表：
[eeanbe Sv ()0oo zanb-xn-so o313s。 ogx:o- [-idx- xesxedboT
c-ip INTO z:\Query_parameters.1og FROM C:\inetpub\logs\LogFiles\
3SVC1\u_ex*.1og wHERE cs-uri-query IS NOT nu1l GROUP BY cs-uriquery,
c-ip ORDER BY cs-uri-query*
下面列出了上述查询的部分结果，其中显示了多种查询参数，包括恶意SQL注入语法的查
询参数：
"**
Name=Mikae1a 1 192.168.6.121
Name=Isaiah 1 192.168.6.121
Name=Corynn 1 192.168.6.121
Name=Lory 1 192.168.6.136
Name=Jarre11 1 192.168,6.136
Name=Mekhi 3 192.168.0.111
Name=E11jah 2 192 .168 .1. 65
Name=Emerson 1 192.168.6.136
Name=Ronan 1 192.168.6,136
Name=Mikaela'%20;create&20table20[pangolin_test_table] ([a] $20nva.. .
Name=Mikaela'20;createf20tablet20[pangolin_test_table] ([resulttx.. .
Name=Mikaela'$20;create20table20pangolin_test_table (name20nvar.. .
358
---
## Page 373
第10章确认并从SQL注入攻击中恢复
Name=Mikaela'$20;createf20tablet20pangolin_test_table (namet20nvar.. .
Name=Mikaela'$20;declaret20@s20nvarchar (4000) $20exec§20master.db
Name=Mikaela′$20;declaret208z$20nvarchar (4000) $20set$20@z=0x43003.. ,
Name=Mikaela'$20;declare208z20nvarchar (4000) $20set20@z=0x61007.. .
Name=Mikaela'$20;droph20tablef20 [pangolin_test_table] ;-- 2 192.16.. ,
Name=Mikaela'$20;dropt20table20pangolin_test_table;-- 6 192.168...,
Name=Mikaela'$20;dropt20tablef20pangolin_test_table;createt20tab1
Name=Mikaela'$20;dropt20tablet20pangolin_test_table;createt20tab1
Name=Mikaela'$20;exec20sp_configure200x41006400200048006f006300
Name=Mikaela'$20;exec20sp_configure号200x730068006f00770020006100...
Name=Mikaela′$20;insert%20pangolin_test_table&20exect20master.dbo.. 
Name=Mikaela*$20;insert$20pangolin_test_table$20exect20master dbo...
Name=Mikaela*$20and$20 (select$20cast (count (1) $20as$20varchar (8000.. -
Name=Xikaela*$20andt20 (select$20cast (count (1) $20as$20varchar (8000.- *
spear-searching：按类别查看已知恶意活动的证据。下面的查询将在所有Web服务器的
日志文件中搜索“pangolin”这个关键字：
C:\inetpub\1ogs\LogFiles\w3svc1\u_*.* where cs-uri-query 1ike
*$pango1in$'* -o:csv
返回的查询结果如下所示，其中显示了一些由SQL注入漏润利用工具pangolin发起的恶
意查询：
date, tine, cs-ur1-stem, csur1 -query
2010-11-21, 12:57:42, /Emp1oyeeSearch.aspx, Name=TEmpdb*$20; drop$20
201011-21, 12:57:42, /EmployeeSearch.aspx, *Name=TEmpdb*&20;create$20
tablet20pan..
201011-21, 12:57:48, /Emp1oyeeSearch.aspx, Name=TEmpdb*$20:insert$20
tab1e$20..:
20101121, 12:57:48, /Emp1oyeeSearch. aspx, *Name=TEmpdb′&20and%20
pangolin_-+ 
0%3C(select..
20101121, 12: 57:48, /Emp1oyeeSearch. aspx, *Name=TEmpdb′$20and%20
20101121, 12:57:48, /Emp1oyeeSearch.aspx, Name=TEmpdb*20; drop20
2010-11-21,12:57:48, /Emp1oyeeSearch.aspx, Name=TEmpdb*$20; drop20
tablet20pan.. 
20101121, 12:57:48, /Emp1oyeeSearch.aspx, *Name=TEmpdb′420; create20
table$20pan,. 
table$20...
2010-1121, 12 :57:48, /Emp1oyeeSearch. a8px, Name=TEmpdb*$20; insert$20
pangolin_
20101121, 12 :57:48, /Emp1oyeeSearch.aspx, *Name=TEmpdb′$20and20
03C(select$...
03C(select$..
20101121, 12 : 57: 48, /Emp1oyeeSearch.aspx, Name=TEmpdb*$20; drop20
table$20pan.
20101121, 13 : 01:22, /Emp1oyeeSearch. aspx, Name=TEmpdb*$20;drop20
359
---
## Page 374
SQL注入攻击与防御（第2版）
tablet20pan..
20101121, 13 : 01:22, /Emp1oyeeSearch. aspx, *Name=TEmpdb′$20; createf20
table$20..*
对于在Web服务器日志中检查SQL注入攻击，下面将介绍最后一个查询，它检查从Web
服务器接收到的数量出奇的大量数据的IP地址。在SQL注入攻击期间，关键字常常向服务器
发送大量流量，以试图找到并利用某个SQL注入漏洞。这种活动的典型特征，就是会生成HTTP
响应和常见的服务器错误。很多SQL注入攻击的有效载荷（payload)，就是从易受攻击的Web服
务器向攻击者的计算机传输信息。在Web服务器日志中，搜索从Web服务器接收到大量数据
传输的IP地址，可以发现成功SQL注入攻击的证据。
下面的查询将返回Web服务器发送给客户端的以KB为单位的数据量，并按照IP地址进
行分组：
Avg, Max (sc-bytes) AS Max, Min (sc-bytes) AS Min, Sum(sc-bytes)
AS Total FROM C:\inetpub\1ogs\LogFiles\W3SVC1\u_ex* .1og WHERE
TO_LowERCASE(cs-uri-stem) LIKE *$.aspt* or TO_LOKERCASE (cs-uri-stem)
z:\srv_to_client_transfer. txt