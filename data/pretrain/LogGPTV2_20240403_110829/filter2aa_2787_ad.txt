return result 0x0
switch case 8,v1=0x3,v2=0x186a0
return result 0x1
switch case 1,v1=0xa35c67a0,v2=0xd
dword
return result 0x8cf40000L
switch case 3,v1=0xa35c67a0,v2=0x8cf40000
return result 0x2fa867a0
switch case 1,v1=0xa35c67a0,v2=0xd
return result 0x8cf40000L
switch case 3,v1=0xa35c67a0,v2=0x8cf40000
return result 0x2fa867a0
switch case 2,v1=0x2fa867a0,v2=0x11
return result 0x17d4
switch case 3,v1=0x2fa867a0,v2=0x17d4
return result 0x2fa87074
switch case 1,v1=0xa35c67a0,v2=0xd
return result 0x8cf40000L
switch case 3,v1=0xa35c67a0,v2=0x8cf40000
return result 0x2fa867a0
switch case 1,v1=0xa35c67a0,v2=0xd
return result 0x8cf40000L
switch case 3,v1=0xa35c67a0,v2=0x8cf40000
return result 0x2fa867a0
switch case 2,v1=0x2fa867a0,v2=0x11
return result 0x17d4
switch case 3,v1=0x2fa867a0,v2=0x17d4
return result 0x2fa87074
switch case 1,v1=0x2fa87074,v2=0x5
return result 0xf50e0e80L
switch case 3,v1=0x2fa87074,v2=0xf50e0e80
return result 0xdaa67ef4L
switch case 9,v1=0x57abfdc0,v2=0xdaa67ef4
return result 0x0
switch case 4,v1=0x3,v2=0x1
return result 0x4
switch case 9,v1=0x57abfdb0,v2=0x4
return result 0x0
switch case 8,v1=0x4,v2=0x186a0
return result 0x1
switch case 1,v1=0xdaa67ef4,v2=0xd
return result 0xcfde8000L
switch case 3,v1=0xdaa67ef4,v2=0xcfde8000
return result 0x1578fef4
switch case 1,v1=0xdaa67ef4,v2=0xd
#include
#include 
#include "ida.h"
int main() {
    char flag[] = { 'f','l','a','g' };
dwordlog
    uint32 init = *(uint32*)flag;
    uint32 tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;
    for (int i = 0; i > 0x11;
         tmp4 = tmp3 ^ tmp2;
         tmp5 = tmp4 
#include 
#include "ida.h"
int main() {
    char *flag = (char*)"0123456789abcdef0123456789abcdef0123";
    for (int part = 0; part > 0x11;
            tmp4 = tmp3 ^ tmp2;
            tmp5 = tmp4 
#include 
#include "ida.h"
void dec(uint32* dst) {
    for (int part = 0; part > 0x11) ^ tmp2;
            init = (tmp4 > 0x11) ^ inpt;
}
uint32 trans3(uint32 inpt) {
    return (inpt >= 0xd;
    tmp = inpt & 0b1111111111111;
    last ^= tmp;
    final |= last >= 0xd;
    tmp = inpt & 0b1111111111111;
    last ^= tmp;
    final |= last > 15;
    return (tmp>>2) ^ inpt;
}
uint32 detrans3(uint32 inpt) {
    uint32 tmp, final = 0, last = 0;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= tmp;
    inpt >>= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last >= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last >= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last >= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last >= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last >= 0x5;
    tmp = inpt & 0b11111;
    last ^= tmp;
    final |= last << 30;
    return final;
}
void test() {
    printf("0x%x\n", detrans1(trans1(0x12345678)));
    printf("0x%x\n", detrans2(trans2(0x12345678)));
    printf("0x%x\n", detrans3(trans3(0x12345678)));
}
J
jccint3jcc
int main() {
    // char* flag = (char*)"0123456789abcdef0123456789abcdef0123";
    uint32 dst[] = { 0xa25dc66a,0xaa0036 ,0xc64e001a ,0x369d0854 ,0xf15bcf8fL 
,0x6bbe1965 ,0x1966cd91 ,0xd4c5fbfdL ,0xb04a9b1b };
    uint32 src[10] = { 0 };
    for (int part = 0; part < 9; part++) {
        uint32 init = dst[part];
        for (int i = 0; i < 0x186a0; i++) {
            init = detrans1(detrans2(detrans3(init)));
        }
        if (part % 2) {
            init ^= 0xaaaaaaaa;
        }
        src[part] = init;
    }
    printf("%s\n", src);
    return 0;
}
tql = [
  10486784,
  20972929,
  2178942465,
  2200307393,
  2246576002,
  2250639427,
  10488100,
  10488256,
  2189429346,
  2210532130,
  2252344291,
  2255621283,
  2157972868,
  1082396128,
  2221018978,
  2271088675,
  2281443555,
  2157973956,
  1084232448,
  2233603170,
  2292716835,
  2157975059,
  2157975284,
  1169037536,
  2304252307,
  2308184659,
  2157976372,
  1084235200,
  2312117875,
  2316050227,