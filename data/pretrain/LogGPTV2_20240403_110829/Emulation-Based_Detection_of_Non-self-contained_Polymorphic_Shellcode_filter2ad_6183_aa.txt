title:Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
author:Michalis Polychronakis and
Kostas G. Anagnostakis and
Evangelos P. Markatos
Emulation-Based Detection of Non-self-contained
Polymorphic Shellcode
Michalis Polychronakis1, Kostas G. Anagnostakis2, and Evangelos P. Markatos1
1 Institute of Computer Science, Foundation for Research & Technology – Hellas
{mikepo,markatos}@ics.forth.gr
2 Institute for Infocomm Research, Singapore
PI:EMAIL
Abstract. Network-level emulation has recently been proposed as a method for
the accurate detection of previously unknown polymorphic code injection at-
tacks. In this paper, we extend network-level emulation along two lines. First,
we present an improved execution behavior heuristic that enables the detection
of a certain class of non-self-contained polymorphic shellcodes that are currently
missed by existing emulation-based approaches. Second, we present two generic
algorithmic optimizations that improve the runtime performance of the detec-
tor. We have implemented a prototype of the proposed technique and evaluated
it using off-the-shelf non-self-contained polymorphic shellcode engines and be-
nign data. The detector achieves a modest processing throughput, which how-
ever is enough for decent runtime performance on actual deployments, while it
has not produced any false positives. Finally, we report attack activity statistics
from a seven-month deployment of our prototype in a production network, which
demonstrate the effectiveness and practicality of our approach.
1 Introduction
Along with the phenomenal growth of the Internet, the number of attacks against Inter-
net-connected systems continues to grow at alarming rates. From “one hostile action
a week” 15 years ago [7], Internet hosts today confront millions of intrusion attempts
every day [34]. Besides the constantly increasing number of security incidents, we are
also witnessing a steady increase in attack sophistication. During the last few years,
there has been a decline in the number of massive easy-to-spot global epidemics, and a
shift towards more targeted and evasive attacks.
For example, attackers have been increasingly using techniques like polymorphism
and metamorphism [28] to evade network-level detectors. Using polymorphism, the
code in the attack vector —which is usually referred to as shellcode— is mutated so
that each instance of the same attack acquires a unique byte pattern, thereby making
ﬁngerprinting of the whole breed very difﬁcult. In its most naive form, the shellcode is
encrypted using a simple algorithm, such as XOR-ing blocks of the original shellcode
—which is also known as the payload— with a random key, and is prepended with a
decryption routine that on runtime unveils and executes the encrypted payload.
Nowadays, the large and diverse number of polymorphic shellcode engines [13, 9,
33, 23, 20, 4, 27, 11, 1], along with their increased sophistication, makes imperative the
C. Kruegel, R. Lippmann, and A. Clark (Eds.): RAID 2007, LNCS 4637, pp. 87–106, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
88
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
need for effective and robust detection mechanisms. Along with the several research
efforts towards this goal, we have recently proposed network-level emulation [22], a
passive network monitoring approach for the detection of previously unknown poly-
morphic shellcode, which is based on the actual execution of network data on a CPU
emulator. The principle behind network-level emulation is that the machine code inter-
pretation of arbitrary data results to random code, which, when it is attempted to run on
an actual CPU, usually crashes soon, e.g., due to the execution of an illegal instruction.
In contrast, if some network request actually contains a polymorphic shellcode, then the
shellcode runs normally, exhibiting a certain detectable behavior.
Network-level emulation does not rely on any exploit or vulnerability speciﬁc signa-
tures, which allows the detection of previously unknown attacks. Instead, network-level
emulation uses a generic heuristic that matches the runtime behavior of polymorphic
shellcode. At the same time, the actual execution of the attack code on a CPU em-
ulator makes the detector robust to evasion techniques such as highly obfuscated or
self-modifying code. Furthermore, each input is inspected autonomously, which makes
the approach effective against targeted attacks.
In this paper, we extend network-level emulation with an improved behavioral heur-
istic that allows the detection of a new class of polymorphic shellcodes, which are cur-
rently missed by the existing approach. The existing network-level emulation technique
can detect only self-contained shellcode, which does not make any assumptions about
the state of the vulnerable process. In this work, we enable the detection of a certain
class of non-self-contained polymorphic shellcodes, which take advantage of a certain
register that happens to hold the base address of the injected shellcode upon hijack-
ing the instruction pointer. We also present two generic algorithmic optimizations that
improve the runtime performance of the detector, and can be applied to network-level
emulation irrespectively of the behavioral heuristic used. Finally, we report attack statis-
tics from a real-world deployment of our prototype implementation, which we believe
demonstrate the effectiveness and practicality of network-level emulation.
2 Related Work
The constant increase in the amount and sophistication of remote binary code injection
attacks, and the consequent increase in the deployment and accuracy of defenses, have
led to a coevolution of attack detection methods and evasion techniques.
Early approaches to network-level detection of zero-day worms relied on the identi-
ﬁcation of common byte sequences that are prevalent among multiple worm instances
for the automated generation of NIDS signatures [14, 24]. Such approaches are ef-
fective only for fast spreading worms that do not use any form of payload obfus-
cation. As more tools for shellcode encryption and polymorphism became publicly
available [13, 9, 33, 23, 20, 4, 27, 11, 1], subsequent automated signature generation
approaches [18, 16] focused on the detection of polymorphic worms by identifying
multiple common invariants among different worm instances. However, the ﬁrst-level
classiﬁer on which such methods rely can result to evasion attacks [19].
An inherent limitation of the above approaches is that they are effective only af-
ter several instances of the same worm have reached the detector, which makes them
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
89
GetPC Code
Payload Reads
Decryptor
Encrypted Payload
Attack Vector: ~1-64KB
Virtual Address Space: 4GB
Fig. 1. A typical execution of a polymorphic shellcode using network-level emulation
ineffective against targeted attacks. Content-based anomaly detection can also identify
worms that employ a certain degree of polymorphism by alerting on trafﬁc with anom-
alous content distributions [30, 31], although it is prone to blending attacks [12].
In face of extensive polymorphism, slow propagating worms, and targeted attacks,
several research efforts turned to static binary code analysis on network trafﬁc for iden-
tifying the presence of polymorphic shellcode. Initial approaches focused on the iden-
tiﬁcation of the sled component that often precedes the shellcode [29, 2]. Recent works
aim to detect the polymorphic shellcode itself using various approaches, such as the
identiﬁcation of structural similarities among different worm instances [15], control
and data ﬂow analysis [8, 32], or neural networks [21].
Static analysis, however, cannot effectively handle code that employs advanced ob-
fuscation methods, such as indirect jumps and self-modiﬁcations, so carefully crafted
polymorphic shellcode can evade detection methods based on static analysis. Dynamic
code analysis using network-level emulation [22] is not hindered by such obfuscations,
and thus can detect even extensively obfuscated shellcodes but is currently able to de-
tect only self-contained polymorphic shellcode. Zhang et al. [35] propose to combine
network-level emulation with static and data ﬂow analysis for improving runtime detec-
tion performance. However, the proposed method requires the presence of a decryption
loop in the shellcode, and thus will miss any polymorphic shellcodes that use unrolled
loops or linear code, such as those presented in Sec. 3.
2.1 Network-Level Emulation Overview
We brieﬂy describe some aspects of the network-level emulation detection technique.
The interested reader is referred to our previous work [22] for a thorough description of
the approach and its implementation details.
The detector inspects the client-initiated data of each network ﬂow, which may con-
tain malicious requests towards vulnerable services. Any server-initiated data, such as
the content served by a web server, are ignored. For TCP packets, the application-level
stream is reconstructed using TCP stream reassembly. In case of large client-initiated
streams, e.g., due to ﬁle uploads, only the ﬁrst 64KB of the stream are inspected. Each
input is mapped to a random memory location in the virtual address space of the emu-
lator, as shown in Fig. 1. Since the exact location of the shellcode in the input stream is
not known in advance, the emulator repeats the execution multiple times, starting from
each and every position of the stream. We refer to complete executions from different
positions of the input stream as execution chains. Before the beginning of a new execu-
tion, the state of the CPU is randomized, while any accidental memory modiﬁcations in
the addresses where the attack vector has been mapped to are rolled back after the end
90
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
of each execution. Since the execution of random code sometimes may not stop soon,
e.g., due to the accidental formation of loop structures that may execute for a very large
number of iterations, if the number of executed instructions in some execution chain
reaches a certain execution threshold, then the execution is terminated.
The execution of polymorphic shellcode is identiﬁed by two key behavioral char-
acteristics: the execution of some form of GetPC code, and the occurrence of several
read operations from the memory addresses of the input stream itself, as illustrated in
Fig 1. The GetPC code is used to ﬁnd the absolute address of the injected code, which
is mandatory for subsequently decrypting the encrypted payload, and involves the exe-
cution of some instruction from the call or fstenv instruction groups.
3 Non-self-contained Polymorphic Shellcode
The execution behavior of the most widely used type of polymorphic shellcode involves
some indispensable operations, which enable network-level emulation to accurately
identify it. Some kind of GetPC code is necessary for ﬁnding the absolute memory
address of the injected code, and, during the decryption process, the memory locations
where the encrypted payload resides will necessarily be read. However, recent advances
in shellcode development have demonstrated that in certain cases, it is possible to con-
struct a polymorphic shellcode which i) does not rely on any form of GetPC code, and
ii) does not read its own memory addresses during the decryption process. A shellcode
that uses either or both of these features will thus evade current network-level emulation
approaches [22, 35]. In the following, we describe examples of both cases.
3.1 Absence of GetPC Code
The primary operation of polymorphic shellcode is to ﬁnd the absolute memory ad-
dress of its own decryptor code. This is mandatory for subsequently referencing the
encrypted payload, since memory accesses in the IA-32 architecture can be made only
by specifying an absolute memory address in a source or destination operand (except
instructions like pop, call, or fstenv, which implicitly read or modify the stack).
Although the IA-64 architecture supports an addressing mode whereby an operand can
refer to a memory address relatively to the instruction pointer, such a functionality is
not available in the IA-32 architecture.
The most common way of ﬁnding the absolute address of the injected shellcode is
through the use of some form of GetPC code [22]. However, there exist certain exploita-
tion cases in which none of the available GetPC codes can be used, due to restrictions
in the byte values that can be used in the attack vector. For example, some vulnera-
bilities can be exploited only if the attack vector is composed of characters that fall
into the ASCII range (or sometimes in even more limited groups such as printable-only
characters), in order to avoid being modiﬁed by conversion functions like toupper or
isprint. Since the opcodes of both call and fstenv have bytes that fall into these
ranges, they cannot take part in the shellcode. In such cases, a possible workaround is
to retrieve the address of the injected code through a register that during exploitation
happens to point at the beginning of the buffer where the shellcode resides. If such a
register exists, then the decoder can use it to calculate the address of the encrypted body.
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
91
0 60000000 6A20
1 60000002 6B3C240B
2 60000006 60
3 60000007 030C24
4 6000000a 6A11
5 6000000c 030C24
6 6000000f 6A04
7 60000011 6826191413
8 60000016 5F
9 60000017 0139
10 60000019 030C24
11 6000001c 6817313F1E
12 60000021 5F
13 60000022 0139
14 60000024 030C24
...
push 0x20
imul edi,[esp],0xb
pusha
add ecx,[esp]
push 0x11
add ecx,[esp]
push 0x4
push 0x13141926
pop edi
add [ecx],edi
add ecx,[esp]
push 0x1e3f3117
pop edi
add [ecx],edi
add ecx,[esp]
; ecx points here
; edi = 0x160
; push all registers
; ecx = 0x60000160
; ecx = 0x60000171
; encrypted block size
; edi = 0x13141926
; [60000171] = "ABCD"
; ecx = 0x60000175
; edi = 0x1E3F3117
; [60000175] = "EFGH"
; ecx = 0x60000179
Fig. 2. Execution trace of a shellcode produced by the “Avoid UTF8/tolower” encoder. When the
ﬁrst instruction is executed, ecx happens to point to address 0x60000000.
ecx
Decryption
Bootstrap Code
Decryptor
for Block 1
Decryptor
for Block 2
Decryptor
for Block N
Encrypted
Block 1
Encrypted
Block 2
Encrypted
Block N
Code execution
Fig. 3. Schematic representation of the decryption process for “Avoid UTF8/tolower” shellcode
Skape has recently published an alphanumeric shellcode engine that uses this tech-
nique [27]. Fig. 2 shows the execution trace of a shellcode generated using the imple-
mentation of the engine contained in Metasploit Framework v3.0 [1]. In this example,
the register that is assumed to hold the base address of the shellcode is ecx. The shell-
code has been mapped to address 0x60000000, which corresponds to the beginning
of the vulnerable buffer. When the control ﬂow of the vulnerable process is diverted to
the shellcode, the ecx register already happens to hold the value 0x60000000. In-
structions 0–5 calculate the starting address of the encrypted payload (0x60000171)
based on its length and the absolute address contained in ecx.
The decryption process begins with instruction 7. An interesting characteristic of the
decryptor is that it does not use any loop structure. Instead, separate transformation
blocks comprising four instructions each (7–10, 11–14, ...) handle the decryption of
different 4-byte blocks of the encrypted payload, as illustrated in Fig. 3. This results to
a completely sequential ﬂow of control for the whole decryption process. At the same
time, however, the total size of the shellcode increases signiﬁcantly, since for each four
bytes of encrypted payload, an 11-byte transformation instruction block is needed.
3.2 Absence of Self-references
Another common characteristic of polymorphic shellcodes is that they carry the en-
crypted payload within the same attack vector, right after the decryptor code, as shown
in Fig. 1. During execution, the decryptor necessarily makes several memory reads from
the addresses of the encrypted payload in order to decrypt it. These self-references can
be used as a strong indication of the execution of polymorphic shellcode [22]. However,
92
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
0 bfff0000 54
1 bfff0001 58
2 bfff0002 2D6C2D2D2D
3 bfff0007 2D7A555858
4 bfff000c 2D7A7A7A7A
5 bfff0011 50
6 bfff0012 5C
7 bfff0013 252D252123
8 bfff0018 2542424244
9 bfff001d 2D2D2D2D2D
10 bfff0022 2D2D252D25
11 bfff0027 2D61675E65
12 bfff002c 50
13 bfff002d 2D2D2D2D2D
14 bfff0032 2D5E5E5E5E
15 bfff0037 2D79787878
16 bfff003c 50
...
push esp
pop eax
sub eax,0x2d2d2d6c
sub eax,0x5858557a
sub eax,0x7a7a7a7a
push eax
pop esp
and eax,0x2321252d
and eax,0x44424242
sub eax,0x2d2d2d2d
sub eax,0x252d252d
sub eax,0x655e6761
push eax
sub eax,0x2d2d2d2d
sub eax,0x5e5e5e5e
sub eax,0x78787879