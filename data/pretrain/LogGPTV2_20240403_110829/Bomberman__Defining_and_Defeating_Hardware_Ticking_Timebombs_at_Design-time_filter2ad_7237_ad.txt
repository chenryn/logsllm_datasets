

" -  
" !)
" !)


/

"






&



!




&



!
'




'






	

'



!
'


'





(
'



'
!

'


'


(
'



'
!

'



"

'


&


!

"
'





#


'



"



"+/  
%

%

#
#



!






!



	

$


$

"

"

	
 !"
Fig. 8. False Positives. Reduction in SSCs classiÔ¨Åed as suspicious across all four hardware designs over their simulation timelines. A) AES. Bomberman
identiÔ¨Åes the SSCs of all six TTT variants implanted with zero false positives. B) UART. (Same as AES). C) RISC-V. Bomberman Ô¨Çags 19 SSCs as suspicious,
six from implanted TTTs, three from benign performance counters, and ten benign constants resulting from on-chip CSRs. D) OR1200. Bomberman Ô¨Çags
nine SSCs as suspicious, six from implanted TTTs, and three benign constants.
tionally, we verify our implementation of Bomberman does not
produce false negatives‚Äîas this should be impossible‚Äîby
implanting all six TTT variants (¬ßA) within each design. For
each design, we plot the number of suspicious SSCs Ô¨Çagged
by Bomberman over a speciÔ¨Åc simulation timeline. Based on
the TTT trigger deÔ¨Ånitions provided in ¬ßIV-A, we categorize
SSCs within each plot as follows:
1) Suspicious: a (coalesced or distributed) SSC for which
all possible values have not yet been expressed and no
value has been repeated;
2) Constant: a (coalesced or distributed) SSC for which
only a single value has been expressed.
Note coalesced and distributed classiÔ¨Åcations are mutually
exclusive, as they are SSC design characteristics. However,
suspicious and constant classiÔ¨Åcations are not mutually exclu-
sive. By deÔ¨Ånition (¬ßIV-A), an SSC that has only expressed a
single value during simulation is suspicious. While constants
SSCs are also suspicious, we plot both to enable Bomberman
users to distinguish between SSCs that store conÔ¨Åguration set-
tings (commonly used in larger designs) from SSCs that store
sequence progressions (e.g., TTTs or performance counters).
AES Accelerator. We conÔ¨Ågure the AES testbench to
execute 75 random encryptions, i.e., 75 random 128-bit values
with 75 (random and different) 128-bit keys, and subsequently
repeat the same 75 encryptions. We simulate the AES core at
100 MHz. In Fig. 8A we plot the number of suspicious SSCs
tracked by Bomberman over the simulation timeline.
During the Ô¨Årst 250 clock cycles of simulation, as registers
cycle through more than one value, they are removed from the
sets of constants. During the initial 75 random encryptions,
after ‚âà 750 clock cycles, the 8-bit registers toggle through
all 256 possible values, and thus are also eliminated from
the sets of suspicious SSCs. However, after the initial 75
encryptions, the number of false positives is still quite high,
as the 32- and 128-bit registers have yet to toggle through all
possible values, or repeat a value. Since these registers are
quite large, toggling through all possible values is infeasible.
Driven by the observation that the data-path of a TTT-free
design tracks state from test inputs, not since the last system
reset, we take an alternative approach to eradicate large SSC
false positives. Formally, we repeat
the same test case(s)
without an intermediate system reset to cause only non-
suspicious SSCs to repeat values (violating Property 1 in
¬ßIV-A). We use this insight to efÔ¨Åciently minimize suspicious
SSC false positives. Since the AES core is a deterministic
state machine with no control-path logic, we simply reset
the LFSRs, and repeat the same 75 encryptions. After ‚âà 1200
clock cycles, we achieve a false positive rate of 0% while
detecting 100% of the TTT variants implanted in the core.
UART Module. We conÔ¨Ågure the UART testbench to
perform conÔ¨Åguration, error, and TX/RX testing. During the
conÔ¨Åguration and error testing phases, conÔ¨Åguration registers
are toggled between values, and incorrect UART transactions
are generated to raise error statuses. During the TX/RX testing,
16 random bytes are transmitted by the DUT, and upon being
received by the UART decoder, are immediately echoed back,
and received by the DUT. Following our insights from the
AES experiments, we transmit and receive the same set of
16 bytes again, to induce truly non-suspicious SSCs to repeat
values. We plot the number of suspicious SSCs identiÔ¨Åed by
Bomberman over the simulation timeline in Fig. 8B.
During the Ô¨Årst ‚âà 80k clock cycles (error testing phase),
Bomberman eliminates over 50% of all potentially suspicious
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
977
(coalesced) SSCs, as many of the UART‚Äôs registers are either
single-bit CSRs that, once toggled on and off, both: 1) cycle
through all possible values, and 2) repeat a value. Subse-
quently, during the Ô¨Årst TX testing phase, the 16-byte TX FIFO
is saturated causing another 50% reduction in the number of
coalesced constants. Likewise, once the DUT transmits all 16
bytes to the UART decoder, and the UART encoder echos them
all back, the 16-byte RX FIFO is saturated causing another
reduction in the number of coalesced constants.
After the initial TX/RX testing phase, we are still left with
several (suspicious) false positives. This is because the TX
and RX FIFO registers have yet to cycle through all possible
values, nor have they repeated a value. While these registers
are small (8-bits), and continued random testing would eventu-
ally exhaustively exercise them, we leverage our observations
from the prior AES simulation: we repeat the previous TX/RX
test sequence causing data-path registers to repeat values,
eliminating all false positives. Again, Bomberman successfully
identiÔ¨Åes all TTT variants with zero false positives.
RISC-V CPU. We conÔ¨Ågure the RISC-V CPU testbench
to run a single RISC-V assembly program that exercises
all eight instruction types. The assembly test program was
selected from the open-source RISC-V design repository [18].
These instructions include jumps, branches,
loads, stores,
arithmetic register-immediate and register-register, multiplies,
and divides. We simulate the RISC-V core and again plot
the number of suspicious SSCs identiÔ¨Åed by Bomberman
(Fig. 8C).
During the execution of the Ô¨Årst set of instructions (jumps),
Bomberman largely reduces potential constant and suspicious
SSCs. This is because, like the UART module, most of the
registers within the RISC-V CPU are 1-bit CSRs for which
enumerating all (2) possible values is trivial. The remaining 90
suspicious SSCs are slowly eradicated as more instructions ex-
ecute, causing the remaining control-path signals to enumerate
all possible values. Similar to repeating the same encryptions
during the AES simulation,
the assembly programs were
designed to load and store repeated values in the large (‚â• 32-
bit) registers, causing them to violate Property 1 (¬ßIV-A).
In the end, Bomberman identiÔ¨Åes 19 suspicious SSCs:
16 coalesced and three distributed. Upon manual inspection,
we identify four of the 16 coalesced SSCs, and two of the
three distributed SSCs, as components of the six implanted
(malicious) TTTs. Of the 12 remaining coalesced SSCs, we
identify three as benign timeout and performance counters, and
nine as benign constants that stem from unused CPU features,
the hard-coded zero register, and the interrupt mask register.
Lastly, we identify the single remaining distributed SSC as
a combination of some of the benign coalesced constants.
In a real world deployment scenario, we imagine veriÔ¨Åcation
engineers using Bomberman‚Äôs insights to tailor their test cases
to maximize threat-speciÔ¨Åc testing coverage, similar to how
veriÔ¨Åcation engineers today use coverage metrics to inform
them of gaps in their current test vectors.
Recall, Bomberman only Ô¨Çags SSCs whose value pro-
gressions do not violate the properties of a TTT (¬ßIV-A).
At most, Bomberman will only Ô¨Çag SSCs as suspicious. It
is up to the designer or veriÔ¨Åcation engineer to make the
Ô¨Ånal determination on whether or not an SSC is malicious.
By locating all (malicious) implanted TTTs and (benign)
performance counters, we validate Bomberman‚Äôs correctness.
OR1200 CPU. Lastly, we conÔ¨Ågure the OR1200 testbench
to run eight different OR1K assembly programs. Like the
AES and UART simulations, we conÔ¨Ågure the testbench to
perform repeated testing, i.e., execute each program twice,
consecutively, without an intermediate device reset. The Ô¨Årst
seven test programs are selected from the open-source OR1K
testing suite [49], while the last program is custom written to
exercise speciÔ¨Åc conÔ¨Åguration registers not exercised by the
testing suite. We simulate the OR1200 at 50 MHz, and plot the
number of suspicious SSCs identiÔ¨Åed by Bomberman over the
simulation timeline in Fig. 8D.
In the end, Bomberman identiÔ¨Åes nine suspicious SSCs,
seven coalesced and two distributed. Four of the seven coa-
lesced SSCs, and both distributed SSCs, are components of the
six implanted TTTs. The remaining three coalesced SSCs are
constants, and false positives. We manually identify these false
positives as shadow registers only used when an exception is
thrown during a multi-operand arithmetic instruction sequence.
C. Comparative Analysis of Prior Work
To demonstrate the need for Trojan-speciÔ¨Åc veriÔ¨Åcation
tools like Bomberman, we provide a two-fold comparative
analysis between Bomberman and existing design-time Trojan
defenses. First, we study the capabilities of each defense in
defeating all six TTT variants described in ¬ßIV-C. We summa-
rize each defense and its effectiveness in Tab. I, and describing
why some defenses fail to defeat all TTT variants below.
Armed with this knowledge, we construct an E2E TTT in
Verilog‚Äîtargeting the OR1200 [19] processor‚Äîthat is capable
of bypassing all existing defenses except Bomberman. We
describe the fundamental building blocks of our TTT‚Äîand the
corresponding Verilog components in our implementation‚Äî
that enable it to defeat prior defenses.
1) Security Analysis of Existing Defenses: There are two
approaches for defending against TTTs: 1) Trojan-agnostic,
2) TTT-speciÔ¨Åc. Trojan-agnostic techniques are primarily ver-
iÔ¨Åcation focused, and include: FANCI [8], UCI [10] and
VeriTrust [9]. While these approaches differ in implementa-
tion (static vs. dynamic), from above they are similar. All
three locate rarely used logic that comprise most generic
Trojan circuits. Unfortunately, researchers have demonstrated
systematic approaches to transform almost any Trojan circuit
to evade these techniques, while maintaining logical equiva-
lence [14], [15]. Alternatively, TTT-speciÔ¨Åc approaches such as
WordRev [35], [36] and Waksman et al.‚Äôs Power Resets [13],
attempt to counter only TTTs. While these approaches work
against known TTTs at the time of their respective publica-
tions, they fail to recognize the behavior of all TTT variants
presented in this work. In Tab. I, we summarize each defense,
and the TTT variants (¬ßIV-C and ¬ßA) they can defeat. Below,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
978
COMPARATIVE SECURITY ANALYSIS OF TTT DEFENSES AND BOMBERMAN.
TABLE I
Defense
Type
Analysis
Target
CUP
CUS
CNP
CNS
D-HMG
D-HTG
e
p
y
T
T
T
T
UCI [10]
FANCI [8]
VeriTrust [9]
Trojan-Agnostic
Trojan-Agnostic
Trojan-Agnostic
WordRev [35]
TTT-SpeciÔ¨Åc
Static
Dynamic
Static
Dynamic
Activation Signals
Comparator Inputs
Activation Signals
Increment Logic
















