tographic protocols that are currently used in Tor; this is another
obstacle facing such a design.
4.2 PCTCP
The aim of this work is to address the shortcomings of the trans-
port design in Tor. In particular, our goal is to reduce the impact
of the cross-circuit interference problem which hinders the expe-
rience of interactive application users. Based on our discussion in
section 4.1, we believe that reliability should be maintained on a
per-hop basis for Tor circuits. Therefore, in this work, we advo-
cate for maintaining TCP connections between each adjacent pair
of ORs that comprise a circuit. In particular, we propose two key
design changes to Tor’s transport.
4.2.1 Kernel-mode per-circuit TCP
We propose using a separate kernel-mode TCP connection for
each circuit for Tor. Our design is similar to the TCP-over-DTLS
design that was introduced by Reardon and Goldberg in the sense
Figure 2: Design comparison between Tor and PCTCP.
that reliable in-order delivery of data is implemented between every
two communicating ORs. Also, both designs ensure that conges-
tion control is performed at the circuit granularity. The elimination
of connection-sharing among circuits ensures that we isolate the ef-
fects of loud circuits on the quiet ones; a cell dropped or lost from
one circuit will only affect that particular circuit.
However, one key difference between PCTCP and TCP-over-
DTLS is that for circuit management, PCTCP uses kernel-mode
TCP connections for every circuit, while TCP-over-DTLS uses a
user-space TCP implementation. The lack of availability of a reli-
able open-source user-level TCP stack whose license is compatible
with that of Tor hinders the deployability of the TCP-over-DTLS
solution. Furthermore, PCTCP uses IPsec to protect the commu-
nication between ORs whereas TCP-over-DTLS uses DTLS. One
issue that is inherent from using DTLS is that it is rarely used today
on the Internet. IPsec, on the other hand, is increasingly common,
as it is utilized in many implementations of Virtual Private Network
(VPNs) [34]. Consequently, the rarity of DTLS makes it easier to
be blocked by censors without fearing side effects. Blocking IPsec
would be more problematic, as blocking it may interrupt the oper-
ation of legitimate businesses and organizations.
We next describe how we modify the behaviour of Tor to support
PCTCP. Recall that during the circuit construction process, every
time an OP attempts to extend the circuit by one more hop, it sends
an extend command cell to the current last OR on the partially con-
structed circuit. When an OR Xi receives an extend cell to another
OR Xj, Xi checks if it has a current TCP connection with Xj. If a
connection exists, Xi uses that connection to send the create cell;
otherwise, it creates a new TCP connection to Xj before a create
cell is sent.
In PCTCP, when an OR Xi receives an extend command cell
to Xj, PCTCP always establishes a new TCP connection from Xi
to Xj. In PCTCP, we maintain the same queueing architecture of
Tor, except that our design eliminates the contention that occurs
among circuits when they share the same connection output buffer,
as each circuit queue is mapped to a single output and a single input
connection buffer. When a circuit is torn down, its corresponding
TCP connections are closed.
Figure 2 visualizes a design comparison between Tor and PCTCP.
As the ﬁgure shows, between an OP and an OR, PCTCP, like Tor,
maintains a single TCP connection, which can multiplex several
circuits from the same user. However, PCTCP dedicates a separate
TCP connection for each circuit between any two ORs.
This design has the advantage that it does not require clients to
upgrade, as each client in our design continues to maintain a sin-
gle TCP connection with each of its entry guards. Moreover, the
modiﬁcations proposed in PCTCP are only local to each OR. This
means that not all ORs in the circuit need to upgrade to beneﬁt
from PCTCP. For example, if the middle and exit ORs are the only
TCP connection Tor Circuit IPsecOPsTorPCTCPORsORsFigure 3: Packet headers for current Tor and for PCTCP. The
grey shaded area depicts the encrypted part of the packet. The
upper ﬁgure shows the design of the Tor packets at the network
(IP) layer. TLS is used to encrypt the TCP payload, but not the
TCP header. The lower ﬁgure depicts the packet format when
PCTCP is used. The whole IP payload, which contains the TCP
segment, is encrypted. An ESP header is added between the
encrypted data and the IP header.
ORs upgraded with PCTCP on a circuit, that pair of ORs will use
PCTCP for their communication even if the entry guard is not up-
graded. Nevertheless, more performance gains should be obtained
when more ORs on the circuit upgrade.
4.2.2 Replace TLS with IPsec
One issue that arises with our design so far is that it allows an
adversary monitoring a relay to easily count the total number of
circuits that are currently serviced by the monitored relay. Further-
more, the adversary can perform trafﬁc analysis to infer the activity
of each circuit [5]. While it is not clear how this extra information
can be beneﬁcial for a non-global adversary,4 there is no doubt that
such a design reduces the overall anonymity of the system and its
users. To alleviate this problem, we propose using the ESP protocol
of IPsec in transport mode to encrypt and protect the trafﬁc between
the ORs using PCTCP. Since IPsec can encrypt the IP packet pay-
load, TCP connection ports will be encrypted and hidden from an
eavesdropper. This makes it more difﬁcult for an adversary to per-
form trafﬁc analysis on TCP connections between routers. Figure 3
compares the format of PCTCP and Tor data packet headers.
Using ESP makes the TLS encryption redundant for PCTCP for
OR-to-OR communication, as ESP can provide the hop-by-hop au-
thenticity and data conﬁdentiality that is currently provided by TLS
in Tor. Furthermore, like TLS, ESP provides perfect forward se-
crecy for the data on connections, and prevents an attacker from
modifying data. For two ORs to authenticate each other, they can
use a certiﬁcate-based authentication method that is provided by
IPsec. Since ORs issue a long-term identity key that they use to
sign their descriptors, they can use the same identity key to sign
their IPsec certiﬁcates.
Alternatively, ORs can use a public-key authentication approach.
An OR could publish its IPsec public key with its signed descriptor
to the directory authorities. Then, when other ORs download the
descriptors, they can ﬁnd each other’s public keys and use them
to start the IPsec connections. Communication between ORs and
directory authorities or OPs can continue to use the traditional TLS
connections that are used in Tor today.
Ideally, a user-mode IPsec implementation integrated with Tor
would be the best option. First, OR operators would not have to
deal with the details of setting up IPsec. Second, for user-mode
IPsec to operate, superuser privileges are not needed. However,
4The threat model of Tor assumes an active local adversary.
Figure 4: Network setup for the live experiment
with the lack of an available user-space IPsec implementation, we
default to the kernel-mode IPsec option. Luckily, installing IPsec
is a one-time operation which typically should not require periodic
maintenance. To facilitate this operation for non-expert OR opera-
tors, Tor should ship with scripts for IPsec conﬁgurations.
5. EXPERIMENTS
To evaluate the performance beneﬁts possible with PCTCP, we
have implemented our proposed transport in a stable release of the
Tor source code (0.2.2.39). Our implementation, which changes
fewer than 20 lines of code in the Tor OR application, can be eas-
ily turned on or off using a conﬁguration option for any OR. We
ﬁrst performed small-scale experiments on the live Tor network.
We also performed a series of large-scale experiments on an iso-
lated testbed using different trafﬁc loads. As evaluation metrics,
we use the download time, the time needed for a client to ﬁnish
downloading a ﬁle over a Tor circuit after issuing a request, and the
time-to-ﬁrst-byte, which is the time it takes the client to receive the
ﬁrst chunk of the ﬁle data after issuing a download request.
5.1 Live Experiments
To test our new proposed design, we ﬁrst conducted some exper-
iments on the live Tor network in October and November 2012. We
next describe our experimental setup and then present our results.
Experimental Setup. Our setup is shown in Figure 4.We conﬁg-
ured an IPsec connection, using OpenSwan [3], between our two
ORs, entry and middle, which we deployed on the live Tor net-
work. Our entry implements PCTCP which can be enabled as a
conﬁguration option only for our clients, so as not to affect other
users of the network. Our middle OR runs an unmodiﬁed Tor pro-
cess, but, as above, has an IPsec connection conﬁgured. For gath-
ering Tor measurements, we simply turned off the option to enable
PCTCP from the conﬁguration of the entry and disabled the IPsec
connection. Both ORs have been conﬁgured with a bandwidth rate
of 250 KB/s. Our ORs obtained the FAST ﬂag by the authority di-
rectories, which allows them to be selected by the network clients
for their circuits.5 To protect the privacy of other users, we con-
ﬁgure both ORs to belong to the same Tor family, which prevents
other users’ unmodiﬁed Tor clients from choosing them both on
one circuit. Also, we do not disable TLS in order to avoid risking
other users’ privacy in case of an accidental misconﬁguration. We
next describe our two experiments and present our results.
In our live experiment, we run two clients. One client acts as
the bulk trafﬁc generator by continuously downloading a 5 MB ﬁle
without pausing between downloads. The second client is an inter-
active web browsing client that downloads a 300 KB ﬁle and pauses
randomly for 3 to 30 seconds between downloads. We have also
5Our ORs did not achieve the STABLE ﬂag because they were not running contin-
uously between our experiments. Note that the STABLE status is mainly used for
services that need long lived connections (such as SSH on port 22), whereas a FAST
status, which our ORs obtained, is requird for most services like web browsing, which
comprises the majority of the network trafﬁc.
TLSTCPIPApplication Data (cells)TCPApplication Data (cells)TorPCTCPIPESPOP1OP2ServerIPsecEntryMiddleExit250 KB/s250 KB/s     Web     Bulk(a) Web client
(b) Web client
(c) Bulk client
(d) Bulk client
Figure 5: Performance of the web and bulk clients in the live experiment
implemented the MeasureMe [5] cell. Brieﬂy, this is a new com-
mand cell type that is sent by our clients to any OR on a circuit they
create to inform the OR to gather statistics only for the respective
circuit.
Results. Figure 5(a) depicts the download time performance for
Tor and PCTCP for the web client.6 With PCTCP, it takes 4.9 sec-
onds to ﬁnish downloading, while Tor takes 6.8 seconds at the me-
dian. The improvements become more visible for the 4th quartile,
as download times show a 26% improvement when PCTCP is used.
Figure 5(b) shows the time-to-ﬁrst-byte results for PCTCP and Tor.
Again, the results consistently show strong improvements that are
magniﬁed at the third and 4th quartiles. For instance, at the 75th
percentile, the time-to-ﬁrst-byte for Tor clients is approximately 4
seconds, whereas for PCTCP clients, it is only 2.1 seconds, which
is a more than 47% improvement.
Finally, Figure 5(c) demonstrates that the PCTCP bulk client ex-
hibited slightly better performance than the Tor bulk client. Note
that in this experiment, the introduction of the bulk downloader
consumes the majority of the available bandwidth between entry
and middle. Nevertheless, PCTCP still maintains the performance
advantage for web clients compared to Tor. In Figure 5(d), both
PCTCP and Tor produced very similar fast time-to-ﬁrst-byte re-
sults as the light web trafﬁc did not introduce congestion to the
bulk client.
5.2 Large-scale experiments
Emulation Tools.
In order to understand the system-level effects
of our proposed transport, we use ExperimenTor [8], a Tor net-
work emulation-based testbed that is based on the Modelnet net-
work emulation platform [41]. Modelnet offers the ability to eval-
uate large-scale distributed networked systems using commodity
hardware and OSes. Brieﬂy, our Modelnet setup consists of two
machines, an emulator node and a virtual node. The virtual node
runs the Tor network, which consists of directory authorities, ORs
and OPs. The virtual node also runs the destination servers. Com-
munication among the different nodes on the Tor network and the
destination servers is routed through the emulation node, which
provides the underlying IP network emulation. Several network
parameters such as the bandwidth, propagation delay and drop rate
can by conﬁgured on the network topology deployed on the emu-
lator node to provide a realistic underlying network emulation. In
our experiments, we use the network and Tor topology models that
were recently proposed by Jansen et al. [18] in order to accurately
produce a scaled-down Tor network that that closely approximates
the performance of the live network.
Conﬁguring IPsec. One challenging task in our experiments is
to enable an IPsec connection between any two ORs in the net-
6Note that the stair-step pattern is a consequence of Tor’s token bucket algorithm
which ﬂushes data once per second. This pattern becomes more visible with increased
congestion. In versions of Tor more recent than the stable version we used, this ﬂush-
ing has been increased to ten times per second.
work. We found that the IPsec implementation we used (Linux
Openswan U2.6.23/K2.6.38 (klips)) does not start the IPsec tunnel
between two virtual interfaces that reside in the same machine. To
overcome this problem, we introduced an intermediary node be-
tween our virtual and emulator nodes. We set up an IPsec tunnel
between the virtual node and the intermediary, whose only purpose
is to receive packets on the IPsec tunnel and forward them to the
emulator. The emulator performs the network emulation and then
forwards the packets back to their destinations in the virtual node.
That way, a packet between any two ORs is forced to go through
an IPsec connection. For stock Tor performance experiments, we
disabled the IPsec tunnel between the virtual and the intermediary
nodes.
Underlying Network Topology. We use the network topology
that was produced and published7 by Jansen et al. in an effort to
methodically model the Tor network for ExperimenTor and Shadow
[19]. Brieﬂy, the authors form a complete network graph consisting
of vertices that correspond to different locations (countries, Ameri-
can states and Canadian provinces) with upstream, downstream and