(3) Transform E′
1 in 1-bit space to E′
n in n-bit space.
Step (1) and (3) have been proved in Section 3 and 4, which
means, any n-bit MBA identity is equivalent to the same form
on 1-bit space.
En − E′
n ≡ 0 ⇔ E1 − E′
1 ≡ 0
Therefore, the simpliﬁcation problem boils down to Step (2):
ﬁnding a simple MBA form E′
1 to satisfy the 1-bit MBA
identity E1 − E′
1 ≡ 0.
The unique beneﬁt of reducing the problem to 1-bit space is
that, we can use truth tables to enumerate all possible values.
1-bit variables only have two possible values, 0 and 1, so it
1706    30th USENIX Security Symposium
USENIX Association
Obfuscated MBAEnn-bit Space1-bit Space(1)(2)(3)Obfuscated MBAE1Simplified MBAE’nSimplified MBAE’1Table 1: Truth table of x ∨ y and x ∧ y.
Table 2: Enumeration of all the Bool-Arithmetic rules used in
MBA-Blast.
x
0
0
1
1
y
0
1
0
1
x ∨ y
x ∧ y
0
1
1
1
0
0
0
1
largely reduces the searching space when investigating MBA
equation. Taking the truth table in Table 1 as an example,
applying the method in Section 3 generates the following
1-bit MBA equation,
x + y − (x ∨ y) − (x ∧ y) = 0
which means,
x ∨ y = x + y − (x ∧ y)
In this way, we can build MBA equations for two-variable
truth table (24 = 16 different cases), as shown in Table 2.
For ease of presentation, the ﬁrst column presents the truth
values as a 4-digit binary string, e.g., the truth value of x ∨ y
is 0111. Note that the truth value 1111 is represented as −1
to guarantee MBA equations are valid on a ring [24].
The interesting ﬁnding in Table 2 is that, all the 16 cases
can be represented as a linear combination of x, y, x ∧ y, and
−1. In other words, any two-variable 1-bit expression can be
transformed to an MBA expression with the following general
form, where c1, c2, c3, c4 are coefﬁcients.
c1x + c2y + c3(x ∧ y) − c4
This ﬁnding forms the foundation of our simpliﬁcation
method. According to Deﬁnition 1, an MBA expression ∑ aiei
is essentially a linear combination of 1-bit expressions. After
replacing all 1-bit expressions with the corresponding MBA
forms in Table 2 and combining like terms, the original MBA
expression will be reduced to a simple form including only 4
terms: x, y, x ∧ y, and a constant.
∑ aiei = ∑ ai(c1ix + c2iy + c3i(x ∧ y) − c4i)
= C1x +C2y +C3(x ∧ y) −C4
The following example shows how to simplify the obfus-
cated MBA expression in Section 3, x + y → 2(x ∨ y) − (¬x ∧
y) − (x ∧ ¬y).
2(x ∨ y) − (¬x ∧ y) − (x ∧ ¬y)
= 2(x + y − x ∧ y) − (y − x ∧ y) − (x − x ∧ y)
= 2x + 2y − 2(x ∧ y) − y + (x ∧ y) − x + (x ∧ y)
= x + y
This procedure produces an MBA identity equation 2(x ∨
y) − (¬x ∧ y) − (x ∧ ¬y) = x + y in 1-bit space. According to
the “two-way” feature, this equation also holds in n-bit space.
Truth Value Boolean Expr MBA Expr
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111
0
x ∧ y
x − (x ∧ y)
x
y − (x ∧ y)
y
x + y − 2 ∗ (x ∧ y)
x + y − (x ∧ y)
−x − y + (x ∧ y) − 1
−x − y + 2 ∗ (x ∧ y) − 1
−y − 1
−y + (x ∧ y) − 1
−x − 1
−x + (x ∧ y) − 1
−(x ∧ y) − 1
-1
0
x ∧ y
x ∧ ¬y
x
¬x ∧ y
y
x ⊕ y
x ∨ y
¬(x ∨ y)
¬(x ⊕ y)
¬y
x ∨ ¬y
¬x
¬x ∨ y
¬(x ∧ y)
-1
Therefore, x + y is the simpliﬁcation result of 2(x ∨ y) − (¬x ∧
y) − (x ∧ ¬y) in n-bit space. A more complex example is
shown in Appendix C, which simpliﬁes the MBA expression
in Figure 1.
The distinct advantage of our method is that it guarantees
to simplify an MBA expression to a normal simple form, with
only low-cost arithmetic computation. The “two-way” feature
guarantees the simpliﬁcation result seamlessly working in
1-bit space and n-bit space.
5.2 MBA-Blast Algorithm
The method above is able to simplify one MBA expression.
However, in practice, a complex MBA expression may in-
clude multiple sub-expressions obfuscated by different MBA
equations. We need to apply the simpliﬁcation to each sub-
expression recursively until no sub-expression can be sim-
pliﬁed any more. The whole procedure is described as Algo-
rithm 1.
The algorithm takes an expression E as input and returns
its simpliﬁed form. First, it traverses all sub-expressions of
E and marks it as reducible if the sub-expression is an MBA.
Then, for each reducible sub-expression e, the algorithm ﬁrst
replaces every bitwise operation with the MBA expression in
Table 2 (ReplaceBoolWithMBA) and then performs conven-
tional arithmetic reduction (ArithReduce) to get the normal
form. Next, the ReplaceMBAWithBool function tries to match
the normal MBA form with the simple bitwise expression in
Table 2, e.g., −y + (x ∧ y) − 1 is replaced by x ∧ ¬y. If e′ is
simpler than e, which means the simpliﬁcation is successful,
e′ is used for updating the whole expression E. Otherwise,
e′ is already the simplest form, so the algorithm marks e as
USENIX Association
30th USENIX Security Symposium    1707
Algorithm 1 MBA-Blast Algorithm
1: Input: MBA expression E
2: function MBA-BLAST(E)
3:
for es ∈ SubExpr(E) is MBA do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
es ← reducible
end for
while e ∈ SubExpr(E) is reducible do
ReplaceBoolWithMBA(e)
e′ ← ArithReduce(e)
ReplaceMBAWithBool(e′)
if e′ is simpler than e then
update(E, e′)
else
e ← irreducible
14:
15:
end if
end while
return E
16:
17: end function
irreducible and continues to work on other reducible sub-
expressions. The complexity of e′ and e are measured by the
number of their Directed Acyclic Graph (DAG) nodes. More
detailed discussion about complexity measurement of MBA
expressions is presented in Section 7. The algorithm keeps
simplifying MBA sub-expressions and it terminates when no
reducible sub-expression is available.
6 Implementation
We implement the algorithm as an analysis prototype called
MBA-Blast. Figure 3 shows an overview of MBA-Blast’s ar-
chitecture and how it interacts with other analysis tools. The
prototype accepts inputs from various front-ends, simpliﬁes
MBA expressions, and outputs the results in different for-
mats. In total, the whole implementation includes a front-end
interface, the main MBA-Blast program, and a back-end inter-
face. The front-end interface receives MBA expressions from
different sources (e.g., an execution trace, the disassembled
code from IDA Pro [60], or source code) and translates the
code to an intermediate representation (IR) for MBA-Blast
to process. MBA-Blast simpliﬁcation consists of four ma-
jor components. First, a parser reads the obfuscated formula
and builds the Abstract Syntax Tree (AST). Second, a tree
substitution component substitutes bitwise operations with
speciﬁc MBA expressions. After that, each AST is translated
to IR by a formula generation step. The last component ap-
plies arithmetic reduction laws to the formulas and outputs
the simpliﬁed results to the back-end interface. The back-end
interface can translate the IR to different outputs, for exam-
ple, human-readable formulas or SMT-LIB code for theorem
provers such as Z3. MBA-Blast is designed as a tool that can
easily work with binary analysis tools, solvers, and compilers.
The whole prototype is written in 2800 lines of Python
code. The parser, AST substitution, and formula generation
components are developed based on Python AST library. We
leverage the SymPy library for arithmetic simpliﬁcation and
solving linear equation systems. We design an representation
for efﬁciently analyzing, transforming, and interpreting MBA
symbolic formulas. We also develop several utilities for mea-
suring the quantitative metrics of MBA expressions, such as
counting the number of DAG nodes and MBA alternations.
7 Evaluation
In this section, we conduct a set of experiments to evaluate
MBA-Blast. We have four objectives in mind: correctness,
effectiveness, practicability, and performance. In particular,
we design experiments to answer the following four research
questions (RQs).
1. RQ1: Is the simpliﬁed result equivalent to the original
MBA expression? (correctness)
2. RQ2: Compared to the original complicated MBA ex-
pression, how much complexity is reduced by MBA-
Blast? (effectiveness)
3. RQ3: Is MBA-Blast able to assist security experts in
real-world software reverse engineering? (practicability)
4. RQ4: How much overhead does MBA-Blast introduce?
(performance)
As the answer to RQ1, we apply MBA-Blast to simplify
two MBA datasets where the ground truth (correctly simpli-
ﬁed form) is available. We use Z3 solver [52] to check whether
every simpliﬁed result is equivalent to the ground truth. For
RQ2, we calculate and compare the complexity metrics such
as number of DAG nodes and number of MBA alternation.
We also run Z3 on the original and simpliﬁed MBA to com-
pare the solving time. For RQ3, we perform case studies to
show MBA-Blast’s practicability, including analyzing the out-
put of an MBA obfuscator, solving MBA-powered opaque
predicates, and reverse-engineering virtualized malware and
a ransomware sample. In response to RQ4, we study MBA-
Blast’s performance data such as running time and memory
footprint.
7.1 Experimental Setup
Datasets. We aim to evaluate MBA-Blast using a large num-
ber of diverse MBA expressions. First, we checked existing
resources including MBA expressions [24, 30, 36–39] and
collected 62 MBA obfuscation equations as the ﬁrst dataset.
The number of existing MBA examples is quite deﬁcient for
a systematic study. We also ﬁnd these examples are biased
as well. For instance, they only include a limited diversity of
bitwise expression patterns like x ∧ y and x ∨ y.
We notice that new MBA identity equations can be sim-
ply extended from the linear combination of existing MBA
1708    30th USENIX Security Symposium
USENIX Association
Figure 3: An overview of MBA-Blast’s workﬂow. The words in italics represent the format between two components.
identities. Figure 4a shows an example. By multiplying −2
to the second MBA identity and then adding to the ﬁrst one,
it extends a new MBA obfuscation expression. Furthermore,
this extension can also produce multiple-variable MBA ex-
pressions as shown in Figure 4b.
x ⊕ y = y + x − 2(x ∧ y)
x ∧ y = (x ∨ y) − (¬x ∧ y) − (x ∧ ¬y)
⇓
x ⊕ y = y + x − 2(x ∨ y) + 2(¬x ∧ y) + 2(x ∧ ¬y)
(a) Generate new MBA identity by linear combination.
x + y = 2(x ∨ y) − (¬x ∧ y) − (x ∧ ¬y)
x ∧ z = −(x ⊕ z) + z + (x ∧ ¬z)
⇓
x + y + z = 2(x ∨ y) − (¬x ∧ y) − (x ∧ ¬y) + (x ∧ z)
+ (x ⊕ z) − (x ∧ ¬z)
Peer Tools for Comparison. We collect existing, state-of-
the-art MBA deobfuscation tools and run them on the same
datasets as the comparison baselines. The latest version of
three open source tools are downloaded from GitHub for com-
parison: Arybo [33], SSPAM [34], and Syntia [21]. Arybo is
a Python tool for transforming MBA formulas to a bit-level
symbolic representation. SSPAM (Symbolic Simpliﬁcation
with PAttern Matching) is a tool for simpliﬁcation of MBA
expressions written in Python. It uses SymPy for arithmetic
simpliﬁcation, and Z3 for ﬂexibly matching equivalent ex-
pressions with different representations. Syntia is a program
synthesis framework for synthesizing obfuscated code’s se-
mantics. It produces input-output pairs from instruction traces
and then synthesizes a code snippet’s semantic based on these
input-output pairs.
Machine Conﬁguration. All of our experiments are run-
ning on a testbed machine with Intel Xeon W-2123 4-Core
3.60GHz CPU, 64GB 2666MHz DDR4 RAM, 2.5TB SSD
Hard Drive, Running Ubuntu 18.04 OS.
(b) Generate multiple-variable MBA identity.
7.2 Dataset 1: Collected MBA Examples
Figure 4: Extend MBA identities by linear combination.
These extensions synthesize the Dataset 2 including 10, 000
MBA expressions. Every sample in the dataset is a 3-tuple:
hC, S, Mi. C is the complex MBA form, S is the simple form,
and M records the meta data. Note that, S is the correct simpli-
ﬁed result, i.e., ground truth, for every complex MBA C. To
guarantee the diversity of the dataset, we control the following