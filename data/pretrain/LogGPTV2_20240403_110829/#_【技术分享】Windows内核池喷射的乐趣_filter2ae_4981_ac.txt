       obj = object_tuples[0][1]
       print "Object: " + obj
       #find pool
       pools = dbgCommand("!pool " + obj)
       #print pools
       #find size
       size_re = re.findall(r'(*[0-9a-f]{8} size:[ ]*)([0-9a-f]*)( previous)',pools)
       if size_re:
        print name + " objects's size in kernel: " + size_re[0][1]
    #close handle
    kernel32.CloseHandle(handle)
**第三部分——研究分析**
脚本将会减轻我们寻找池大小分配的工作。有了这个我会查看下面的对象：
**Event**
**IoCompletionPort**
**IoCompletionReserve**
**Job（已命名的和未命名的）  
**
**Semaphore（已命名的和未命名的）**
从这一点来讲，过程是非常简单的，我们只需要调用相关的用户模式函数，创建一个对象，然后检查大小。我为 WinDBG
创建了一个简短的脚本，它能够自动化创建上述的对象，并检查大小，最后把它们打印出来。我把脚本上传到了这里：
使用方法：
1\. 启动 WinDBG
2\. 依次点击 Kernel debug -> Local
3\. 执行命令：.load pykd
4\. 命令：!py path_to_the_script
结果如下：
    Not Named Mutex objects's size in kernel: 0x50
    Named Mutex objects's size in kernel: 0x60
    Job objects's size in kernel: 0x168
    Job objects's size in kernel: 0x178
    IoCompletionPort objects's size in kernel: 0x98
    Event objects's size in kernel: 0x40
    IoCompletionReserve objects's size in kernel: 0x60
    Not named Semaphore objects's size in kernel: 0x48
    Named Semaphore objects's size in kernel: 0x58
这样我们就得到了一套不错的可用于内核池喷射的对象。那么什么是“kex”，它在期望什么呢？在后面的文章中你将看到内核中更酷的东西。
也许我应该在这个系列的开始做一些解释。我想写一些脚本，让我们在进行 Windows
内核利用开发的时候更快，我的第一个脚本是用于内核池喷射的。另外，如果你从来没有看过关于内核池溢出的东西，也没有用过内核池喷射技术。那么可以阅读：
[http://trackwatch.com/windows-kernel-pool-spraying/](http://trackwatch.com/windows-kernel-pool-spraying/)
现在我们已经有了一个包含内核对象大小的列表（该脚本也可以在其他平台上运行，尽管可能需要针对 x64
架构做一些修改），我们可以进行自动化的喷射和制造空隙（hole）了。如果我们知道需要多大的空隙的话。
基本上：
**1\. 一旦我们分析了漏洞，就会知道驱动程序将在内核池中分配的对象或缓冲器的大小是多少。**
**2\. 我们需要控制该分配的位置，所以我们需要在池中准备一个给定大小的空隙，以便内核在那儿分配新对象。**
**3\. 如果我们知道大小，就可以简单地计算出什么类型的对象利于喷射，还有我们需要释放掉多少个该对象。**
**4\. 如果我们知道这些所有的东西，就可以进行内核喷射并制造空隙了。**
我们需要知道该对象的信息和我们使用溢出覆盖的池头部的信息，之后我会回来再讲的，因为在制造空隙时并不需要这些。我可能会失败，也做了一些准备，我希望覆盖数据也可以自动生成。现在，我只想根据给定的大小去制造空隙。所以我写了一个脚本，可以用于这个目的（请注意，这里是为
Win7 SP1 x86 硬编码的）：
[https://github.com/theevilbit/kex/blob/master/spray_helper.py](https://github.com/theevilbit/kex/blob/master/spray_helper.py)
它会让你输入想要的空隙的大小，然后进行喷射，释放空间并在 WinDBG
中显示该区域。还要注意的是，它仍是使用本地内核调试器，我们无法设置断点，所以存在竞争条件的问题，当我们使用 !pool
命令时，可以像其他内核进程一样在可用空间中分配。我仍然使用本地内核调试器的原因是对于目前阶段的演示来说更简单。当我做真实的利用演示时，就需要进行远程调试了，但在这里我可以直接进行演示。下面是输出：
    lkd> !py c:userscsabydesktopspray_helper.py
    Give me the size of the hole in hex: 440
    Process: 8572bd40
    Object location: 857e15f0
    Pool page 857e15f0 region is Nonpaged pool
     857e1000 size:   40 previous size:    0  (Allocated)  Even (Protected)
     857e1040 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1080 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e10c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1100 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1140 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1180 size:   40 previous size:   40  (Free )  Even (Protected)
     857e11c0 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1200 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1240 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1280 size:   40 previous size:   40  (Free )  Even (Protected)
     857e12c0 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1300 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1340 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1380 size:   40 previous size:   40  (Free )  Even (Protected)
     857e13c0 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1400 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1440 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1480 size:   40 previous size:   40  (Free )  Even (Protected)
     857e14c0 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1500 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1540 size:   40 previous size:   40  (Free )  Even (Protected)
     857e1580 size:   40 previous size:   40  (Free )  Even (Protected)
    *857e15c0 size:   40 previous size:   40  (Allocated) *Even (Protected)
      Pooltag Even : Event objects
     857e1600 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1640 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1680 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e16c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1700 size:   40 previous size:   40  (Allocated)  Even (Protected)
     857e1740 size:   40 previous size:   40  (Allocated)  Even (Protected)
你可以看到我们有 17 x 0x40，也就是 0x440 的空闲空间，没有必要去处理更多细节。我可以给出任何其他的大小，例如：
    lkd> !py c:userscsabydesktopspray_helper.py
    Give me the size of the hole in hex: 260
    Process: 8572bd40
    Object location: 87b2fe00
    Pool page 87b2fe00 region is Nonpaged pool
     87b2f000 size:   98 previous size:    0  (Allocated)  IoCo (Protected)
     87b2f098 size:   90 previous size:   98  (Free)       ....
     87b2f128 size:   98 previous size:   90  (Allocated)  IoCo (Protected)
     87b2f1c0 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f258 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f2f0 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f388 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f420 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f4b8 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f550 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f5e8 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f680 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f718 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f7b0 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f848 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f8e0 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2f978 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2fa10 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2faa8 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2fb40 size:   98 previous size:   98  (Free )  IoCo (Protected)
     87b2fbd8 size:   98 previous size:   98  (Free )  IoCo (Protected)
     87b2fc70 size:   98 previous size:   98  (Free )  IoCo (Protected)
     87b2fd08 size:   98 previous size:   98  (Free )  IoCo (Protected)
    *87b2fda0 size:   98 previous size:   98  (Allocated) *IoCo (Protected)
      Owning component : Unknown (update pooltag.txt)
     87b2fe38 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2fed0 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
     87b2ff68 size:   98 previous size:   98  (Allocated)  IoCo (Protected)
可以看到这个喷射正是我们想要的。请注意，这一次使用了不同的对象。如果你测试很多次，请尝试着使用一个会导致不同对象分配的数字，那样你就可以得到更整洁的输出。
另一个值得注意的事情是，这里制造的空隙不是 100% 可靠的，但我相信已经非常接近了。我做了如下几点：我使用 100000
个对象对内核进行喷射，然后释放掉中间的 X
个。这很可能会让它们一个接着一个，并在我释放掉它们的时候提供给我们需要的空间，为了演示自动化过程，这是最简单的。但如果像下面这样的话会更可靠：
我尝试制造多个空隙，并释放多个 X，它们可能是彼此相邻的。
有一种方法可以从内核中泄露对象的地址，并计算它们是否相邻，从而释放空间。这是最可靠的方法。
随着我的进步，我会在将来实现它，但是现在我采用了第一种方法。
是的，我使用 Python 编码，而不是 Powershell，仅仅是因为我不能在 PS 中写代码，但是我完全同意人们说的，在 PS 中实现会更有意义。