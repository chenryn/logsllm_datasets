## Page 136
Bud：“好，我们将会做出持续的改进。”可他然后补充道：“我们怎
么知道测试一定是正确的呢？”
用结对编程来保证质量，可我们觉得还是应该评审测试用例。我们
要确保功能模块在做正确的事情，还必须有一个可用而且工程质量
很高的界面。”
Bud：“好，那我们就评审测试，以检查界面是否正确，还要确保测
试了正确的东西。”
“没错，就是这样。”我们继续进行了深入讨论，并确信自已做出了
正确的决策。我们在关键一点上达成了一致：相比在文档中记录面
面俱到的设计实现细节，在系统中有一个良好的接口和正确的行为
更为重要。这些东西会影响更大的架构。我补充道：“别忘了，如
果有些实现需要改进，我们还有测试作为支持，以确保在重构时仍
能保留对外行为的正确性。”
Bud：“好，可我们的流程需要代码评审，而且这也确实曾帮了我们
很大的忙。什么时候进行代码评审呢？是不是结对编程就可以取而
代之？”
“我们也这么想。这也是我们对极限编程有点担心的地方之一，"我
描述结对编程的工作方式。开发团队会轮流结对并发，也许每次进
行几个小时。它有点类似于实时的代码评审，但是在某些方面效果
要更好，也许在另外一些方面表现不佳。两个人会一起做出设计决
策，命名类、函数和代码中的变量。要是两个人的能力都不够，那
就糟糕了。
Bud知道他们在代码评审上曾花了很多精力和时间，要做大量的准
备，还要开会。我们认为结对编程可以消除很多这方面的消耗，
Bud听到这些很高兴。我们都认为：将结对编程和评审测试用例结
合起来，相比目前的文档驱动的过程，能产生质量更好的代码。
测试用例要说明代码的意图，而且确定代码确实实现了预定的意
图。”
135
---
## Page 137
Bud很厉害。他知道现在的流程降低了团队的工作效率，相信一般
意义的极限编程时间可以帮助我们的流程提速。他知道需要作出变
革，而且对于改进日程的可预测性、提升代码质量、提高人们工作
的兴趣这些方面非常兴奋。他说：只要能保证这三方面有一方面可
以提升，另外两方面的水平不会下降，他就认为这个极限编程项目
算是成功了。Bud同意让我们“去挑战极限”。我们也得到一张“自由
出狱卡”：那些专盯流程的人不会来找我们的麻烦。“不论你们想放
弃哪部分流程，我都会签字同意。"Bud说。
回过头来看，Bud让我知道了构成伟大团队的一个要件：一位眼光
长远、敢作敢当、愿意支持团队的管理者。Bud支持我们，相信我
们，而且让我们很安全地突破现有的固定形式。
着手开始
刚并始时，我们有机会扩张团队，但还是打算再过一个月，等我们
实践过一个选代再说。这样做让我们并始了学习过程，让我们经验
更丰富。过了一两个选代之后，很多摸索的过程也已经完成，我们
就可以更好地指导新人了。
Johnny现在是我们的客户，同Alan和我一起，在笔记卡片上写下了
所有的用例。我们希望这些用例易于操控，就像Kent和Ron在浸入
式活动中教我的那样。在那次活动中，我学到了用户故事。我觉得
用户故事基本等同于用例的名字。我们考虑在实践中使用用户故
事，而不是用例。但是Johnny警告我说：“如果我们打算使用用户敌
事，我们就得提出合理的理由，因为这么做偏离了标准流程。”
Johmny还担心用户故事不够正式，他说：“而且，我觉得用户故事在
细节上太不充足了。我们恐怕很难让人们赞成使用用户故事。”
我们决定继续使用用例；毕竞，这是BBS已经接受的实践。我们发
现：我们将要在很多其他领域突破现有的条条框框，而用例对我们
来说似乎还挺适合。我们决定小心选择可能引起争端的领域，并将
我们的"自由出狱卡”留到真正需要的时候再使用。
在我们将要开始第一个选代之前，Johnmy和我定义出了核心用例的
详细步骤。核心用例最有价值，对架构的影响也最大。我们准备好
启动选代了。
136
---
## Page 138
用自动化验收测试这个极限编程的实践。正像Kent和Ron在浸入式
活动中建议的，我们构建了一种特定于应用的测试语言。我们试图
让其易于理解，看起来不那么有编程语言的味道：目标是要让领域
专家不必成为并发人员就可以阅读并编写测试用例。几个选代之
后，很明显：用例中的信息和验收测试中的信息是重复的。而重复
是极限编程极力避免的浪费和问题之一。
最后，我做了一次尝试，试着不将用例的细节全部展开。实际上，
我们会在选代开始之前编写验收测试，提供之前存在用例之中的细
节。验收测试应该是可执行的规约说明！我们也将Johnny之前必须
要扛起来的、编写用例的工作替换成了编写验收测试。
结果显示，这种做法对于BBS可能过于极端了。我们还是同时完成
用例和验收测试，因为这总要比以后再去整理一遍系统要容易。我
想这大概就是JerryWeinberg所说的“变成泡菜”。把黄瓜放到泡菜
中，会发生什么？“黄瓜会变得更像泡菜，而泡菜不会变得更像黄
瓜。”3极限编程变得有点“泡菜化”了，我也是。
咱们还是回到第一个选代刚并始的时候吧。估算了一些故事之后，
我是说用例，Johmny选定了第一个选代要做的事情。最初的用例涵
盖了核心功能，包括了最常用的操作，人们希望系统每天能够完成
数十次、乃至数百方次这样的操作。Alan和我开始工作。Ellen是团
队里的一名兼职成员，她加入了进来，有时和我们一同工作。她是
一位资深的工程师，刚从上一个项目中放松下来，已经准备好要跟
我们一起玩一把“极限”了。我们一致同意：所有的生产代码都必须
通过结对编程的方式创建。能有第三个团队成员真是太好了，因为
Alan必须要参加各种会议。有些会议Alan实在是推不掉，那我就跟
Ellen结对，反之亦然，这样做效果不错。
第一个选代很成功，我们交付了原计划交付的大多数功能。回头看
看，我觉得那真是很不错的成就。在ObjectMentor那里，我们得知
第一个选代就是“零号选代”。不仅仅因为我们这些电脑怪人们从零
开始计数，而且因为有非常多的第一个选代无法完成任何东西。那
是我们的第一个极限编程项目。当时我们不知道其实失败的几率很
大，反而交付了可以工作的核心功能。
这个团队没有使用所有的极限编程实践。正像我后来做教练时体会
到的，希望学习和尝试的团队就能让项目成功。当然，书是Ken
137
---
## Page 139
Beck写的，但是流程是我们自己的。
我们学习到了一些有关测试先行设计和增量式并发的多方面细节。
我们的经理Fred对于结果非常惊讶：“一个月的时间，我过去只能得
到一个需求规格说明的草案，可现在得到了可工作的代码！”
我们有了基础的了解，而且还有一些已经到位的代码。是时候提升
团队了。
让团队成长
现在，Alan、Ellen和我已经掌握了技术实践，我们文补充了两个聪
明的工程师：Paul和Alex。他们很愿意加入团队，学习OO设计和极
限编程，并为新产品作出贡献。
这是一个很好的团队，我们配合得很好。在我们的工作推进和学习
过程中，充满了协作、合作和兴奋之情。我们结对编程，编写
CppUnit测试，在前进时不忘重构，还创建了我们自己应用专用的语
言，以驱动验收测试。我们产出了很多成果。
触碰底线和“流程警察”
“流程警察”由Marilee带领，他们一直盯着我们，因为我们这种不重
视文档的轻量级方式偏离了瀑布风格的里程碑过程。Bud赋予的“自
由出狱卡”让我们与他们保持了一定的距离。但是我们必须还得经
常应对打破常规所带来的麻烦。
在我们的第一次评审会议上，我们已经完成了对少数几个用例的评
审。设计很简单，因此文档写起来也很容易。仅仅用了不到一关的
时间就完成了。因此，也就没有写多少文档。有两位参加评审的人
Jim和Art，可以把他们看作“流程警察"的线人。他们不太习惯文档
只有这么一点。哎！我说！这文档只覆盖了一个月的工作啊。
为了改变现状，我们拿到Bud的许可，这个事实确实起到了重要作
用。我们的设计决策似乎还一直不错，因为我们用了大部分时间去
讨论流程，讨论如何不会因为这么少的文档给自已意上麻烦。
在下一次评审时，我们又多给了一些文档，可他们要的更多。但是
没人能说出为什么要这样做。因此，我们达成一致：同意继续让我
138
---
## Page 140
们使用少量架构文档，伴随着经过良好重构的代码，以及易于理解
的单元测试和验收测试。
学习
Paul和Alex基本上算是BBS的新员工，要是我没记错，他们有一两
年的工作经验。我得跟他们一起待很多时间。资深的工程师们要去
参加各种会议，因此我们三个人有很多时间在一起工作。作为有经
验的“熟练工”，我好像收了两个学徒。我们每大都在一起开发。就
像我之前提到的，我平均每隔一周去一次BBS。在每个周五，我们
会规划下一周的工作。
Paul和Alex都很棒。他们总能按照我们的计划完成任务。代码都经
过完善的测试，而且实现了期望的功能。作为他们的指导者，我会
在下一周的周一回来时评审他们的工作。他们总能让代码不出问
题，但是他们常常会把代码放错位置。我发现的问题被Martin
Fowler称为"依恋情结”[4]。
编码问题现在都有名字了！Fowler和Beck在命名和描述“代码异味”
分类方面确实做得很好。“依恋情结"就是一个类做了应该由另一个
类完成的事情。还有其他一些异味：过长方法、过大的类、过长阐
述列表、赘类、散弹式修改等。仅仅有了这些我们不想得到的代
码问题的名称，就能够帮助我们及早发现问题，并保持代码干净
了。
Alex和Paul会产生这些代码上的小问题，但并没有多严重。我们用
星期一进行重构。因为有测试，我们不费什么力气就能让有“依恋
情结”的代码回到自己本来的位置上去，而且风险也不高。这是学
习的过程。如果没有学习极限编程，我无论如何都不会知道这些问
题的名字是“依恋情结”。Paul和Alex就会对他们自己的工作充满防
御心理。但是学习的精神避免产生受伤的感觉。在结对的时候，我
也从他们身上学到很多。
经过几次之后，这演变成了一场游戏。Paul和Alex会完成工作，然
后并始寻找代码异味。在周一上午，我会过来，拿一杯咖啡，然后
找到他们。Paul会说：“James，我们通过了所有的测试，但是会有
一些你不喜欢的东西。"他们正在提升技能，成为非常成功的重构
者！他们必须找到并识别代码异味，虽然并不总是知道如何解决异
味，但他们学会了如何发现问题。察觉是迈向变更的第一步。
139
---
## Page 141
结对编程的的确确有助于打破沟通障碍。当你在另一个人旁边坐上
几个小时，你会展示出自己的缺点和优点。这是双向的沟通。有了
正确的人和正确的态度，就能出现学习的过程，而且信任也得以增
长。我们的团队气氛就是这样，充满安全感，人们不怕犯错而且虑
意学习。
需求与现场客户
Johnny是系统方面的专家。他是儿年前系统最初版本的设计者和程
序员。我在这个项目中工作时，他的角色是系统工程师。根据对系
统的厂泛了解，他撰写了需求规格说明。我和他一起把需求中隐含
的用例名字抽取了出来。Johmny将会及时细化需求，以供我们设计
和实现。Johnny经常面对要尽快交付下一批用例的压力。有时，他
制定用例的时间比我们实现这些用例的时间还要长，这总是让他很
不爽。一切进展得很顺利，我真的很感谢能有这样一个现场客户。
有一天，Johnny、Paul和我完成了对用例的评审，然后开始开发。
我们弄清楚了新的用例对现有设计的影响。我们使用了一种高技术
的工具，它的名字叫百板。系统设计就在我们脑子里，于是我们抽