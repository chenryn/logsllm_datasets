Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Static
Dynamic
Dynamic
Example values
700 MHz, 1900 MHz
FirstNet, NB-IoT
5G colocated, border
Urban, suburban, rural
10 MHz, 15 MHz, 20 MHz
Closed loop MIMO, 4x4
RRH1, RRH2 (remote radio head)
2 miles, 3 miles
8888, 9999
New York, California, Texas
VendorA, VendorB, VendorC
444, 555, 666
8,9,10
RAN20Q1, RAN20Q2
2.3 Carrier attribute
A carrier attribute represents the description of the carrier such
as carrier frequency, type (e.g., serving first responder network -
FirstNet [4] or narrowband IoT [5]- Internet of things), morphology
(urban, rural, or suburban), software or hardware version, expected
cell size, market, vendor, or channel bandwidth. We describe our
carrier attribute set in Table 1. As you can see, some of these at-
tributes are static (i.e., do not change for the carrier over time) such
as carrier frequency, morphology, or channel bandwidth, and others
are dynamic (i.e., can slowly change over time) such as software
version, or the number of neighboring carriers on the same eNodeB.
In the next section, we describe the operational practices today for
carrier configuration management and related work.
2.4 Operational practices
Given the large number of carriers and their configuration param-
eters in LTE service provider networks, it becomes a challenging
problem to effectively manage carrier configurations. The config-
uration parameters can take different values across different lo-
cations and have to be continuously monitored and managed by
the network operations teams. Dependencies across configuration
parameters further increase the complexity. Today’s operational
practice includes creating rule-books that define the default pa-
rameter values for different attributes of carriers. The rule-books
are created by the network engineers who possess the domain ex-
pertise and experience in LTE cellular networks, and sometimes
809
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Ajay Mahimkar, Ashiwan Sivakumar, Zihui Ge, Shomik Pathak, Karunasish Biswas
also with help from eNodeB vendors. The rule-books undergo peri-
odic changes when incorporating new service features, optimizing
configuration for improving service quality, or introducing new
technologies (e.g., 5G). The rule-books are then used by the network
engineers across different parts of the network to ensure there is
consistency between the configuration in the production setup and
expectation defined within the rule-book. Recently SON solutions
(Self Organizing Networks [1–3, 33]) have been deployed to auto-
matically implement the configuration changes but they still are
driven by a rules-based approach.
Some of the configuration parameters (like actInterFreqLB) take
only a few values (enumeration), versus others take values within
a large range (like sFreqPrio). For the range parameters, the rule-
books define the initial default value that is typically used. However,
in several parts of the network, the engineers can choose to con-
tinuously tune and modify these range parameters to fit the needs
of that area and improve service quality of experience. They en-
sure that the parameter values stay within the range and observe
the performance impact of the parameter change to decide if they
would like to keep the change or roll it back. We will show in Sec-
tion 2.6 that operational cellular networks do have high variability
for the range parameters. The automated configuration solutions in
SON can only assign the default value and cannot replicate human
intuition to be able to assign from a range. They can verify that
the parameters conform to the ranges but cannot automatically
discover what the optimized values are in the network. When new
carriers are added to the eNodeB, the engineers have to ensure that
their configurations are appropriately set based on past intuitions
and optimizations.
2.5 Related work
We will present related work in the area of general network config-
uration management and explore if and how those techniques can
be applied for LTE carriers.
Configuration synthesis. The focus is to automatically derive
the low level node-specific configuration based on the high-level
intent. AED [7] proposes to incrementally synthesize router config-
uration based on high-level policies and uses a SMT-based (Satisfi-
ability Modulo Theory) constraint optimization formulation. Net-
Complete [13] helps with updating existing network-wide configu-
rations based on new routing policies. It auto-completes the input
configurations with holes based on target values. Config2Spec [12]
automatically synthesizes a formal specification of network policies
based on the configuration and failure models. Propane [10, 11]
focuses on synthesizing provably-correct BGP (border gateway
protocol) configurations using high-level specifications of topol-
ogy, routing policy, and fault-tolerance requirements. PGA [32]
uses high-level policy graph abstraction (PGA) to enable simple
expressions of network policies and efficient detection and resolu-
tion of policy conflicts. NetGen [35] presents a new language that
allows the user to express desired re-routings and identify minimal
changes to the network that satisfies the policy. Robotron [39] from
Facebook is a system for managing massive production network in
a top-down fashion and enabling operators to express high-level
design intent and translate that automatically into low-level device
configurations for safe deployment across the network. Jinjing [41]
from Alibaba enables network operators to automatically and cor-
rectly update ACL configurations in wide area networks using a set
of novel verification and synthesis techniques to rigorously guar-
antee the correctness of update plans. NetCraft [26] from Alibaba
proposes a new framework to automate the life cycle management
of network configurations using a unified network model. [40]
from Facebook enables holistic network configuration from design,
testing, co-ordination, deployment and verification. CPR [16] auto-
matically computes correct, minimal fixes to the network control
planes by formulating the problem using MaxSMT and capturing
the dependencies between control plane and different traffic classes.
Configuration verification. The focus is to verify that the current
configuration in the network matches the expectation and guaran-
tees different properties of the network such as reachability, load
balancing, and service performance. Minesweeper [9] translates
network configuration into logical formulae to capture the stable
state of the network forwarding and accounting for interactions
across multiple routing protocols such as OSPF and BGP. ARC [17]
uses network configuration to verify invariants under different
failure scenarios and without the need to generate the data plane
traffic. Anteater [30] checks invariants defined for the data planes
by translating the high-level invariants into Boolean Satisfiability
(SAT) problems. HSA [24] (header space analysis) performs static
analysis of the protocol headers to identify failure classes related to
reachability, packet forwarding, and traffic loss. Batfish [15] detects
configuration errors before configuration is applied by conduct-
ing a what-if analysis. ERA [14] focuses on network availability,
reachability, and security by efficient reasoning of intended net-
work policies. Plankton [31] scales up the model-checking approach
for verification by combining with equivalence based partitioning
and using optimizations such as state hashing, partial order reduc-
tion and policy based pruning. GRoot [22] uses formal semantic
model and equivalence classes to verify DNS configurations. Net-
Dice [37] proposes a scalable approach for probabilistic verification
of network properties for BGP and IGP. SELFSTARTER [23] focuses
on identifying network misconfigurations through automatic tem-
plate inference and then detecting the deviations in configuration
compared to the templates. ctests [38] propose testing configu-
ration changes in the context of code that would be affected by
the changes. Violet [21] detects specious configuration (negative
performance impact of configuration changes) by using new selec-
tive symbolic execution techniques to systematically reason about
the performance effect of configuration parameters. Mercury [29],
PRISM [27], Litmus [28] propose statistical analysis techniques to do
a before and after comparison of time-series around configuration
changes and detect negative impacts to service performance. [19]
from Google automate deployment of changes consistently across
control as well as data planes and monitors network operational
invariants.
Remarks. Since our goal is to generate configuration, we fall un-
der the category of synthesis. The high-level intent in all of the
above related work is input by the user (domain expert) and can
be viewed analogous to creating the rule-books as described in
the operational practices (Section 2.4). The low-level node-specific
configuration for carrier would be the specific configuration com-
mands or APIs provided by the vendors. None of the synthesis
810
Auric: Using Data-driven Recommendation to
Automatically Generate Cellular Configuration
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Figure 2: Distinct values across configuration.
works look to automatically derive the intent with the exception
of Config2Spec [12] and AED [7]. For AED and Config2Spec, the
assumption is the intent or configuration is similar across nodes
with the same roles (e.g., routers in the access network should have
similar configuration albeit different than other roles such as in
the core network). Given the role, one can mine the configuration
intent. However, in our case, it is not easy to slice and dice the
carriers across different roles and thus our problem is to discover
clusters of carriers with common roles or objectives. The discovery
or learning part has resemblance to verification systems that aim
to build models of normal behaviors shared across different roles.
Several verification systems are rules-based and thus are analogous
to the rule-book approach. One exception is SELFSTARTER [23]
- it comes closest to our work for automated template inference.
But again similar to AED and Config2Spec, SELFSTARTER needs
input about the role of the node to identify the templates. Thus,
our goal of not only detecting the role, but also the template is
a unique problem not handled by any of the existing works. We
further take a data-driven approach to discover matching nodes (or,
carriers) based on attributes and recommend configuration using
the patterns across the matching nodes.
2.6 Data analysis
We collect and analyze configuration parameter data collected from
carriers in a large LTE network in order to show the importance and
the challenging nature of the problem. We first carefully eliminate
parameters that have values specific to individual carriers (e.g., IP
address, carrier ID). Next, we analyze 3000+ parameters on each
of the approximately 400K+ carriers and identify 65 parameters
that take values within a range. The network engineering teams
also confirmed with us that they often tune these 65 configuration
parameters to improve service performance. The remainder param-
eters were taking values from an enumeration and thus could be
represented using existing rulebooks. Thus, our focus for the rest of
the paper will be on these 65 range parameters that take different
values across different carriers.
We define the variability of a configuration parameter using the
number of distinct values that it takes. Fig. 2 shows the number
of distinct values for all of the 65 configuration parameters across
the network. Several configuration parameters have the number of
distinct values greater than 10. One of the configuration parameters
has a variability of 200. Generating the value for this parameter for
a newly added carrier can take any of the 200 values.
Next, we divide the 400K+ carriers into 28 markets. A market is
defined as a collection of carriers that are typically managed by a
group of engineers. Think of a market analogous to a state in the
US. Our thesis behind the division into 28 markets was to study if
1
𝑛
( 1
𝑛
2
the variability is more prevalent in specific markets or is uniformly
spread across them. Fig. 3 shows the distinct values across 65 con-
figuration parameters and for each of the 28 markets. We observe
that the variability (or, the number of distinct values) is quite high
for some markets and for some collection of configuration param-
eters. Additionally, we calculate the skewness for a configuration
parameter using the distribution of its values across 28 markets.
Skewness [6] captures a measure of asymmetry of the distribu-
tion of the configuration parameter values around its mean and
is calculated using
. If the skewness is between
-0.5 and 0.5, the distribution is approximately symmetric. If it is
less than -1 or greater than 1, the distribution is highly skewed. If
it is between -1 and -0.5 or between 0.5 and 1, the distribution is
moderately skewed. We plot the skewness across 28 markets for all
65 parameters in Fig. 4 and observe that 33 out of the 65 parameters
are highly skewed and 12 are moderately skewed.
𝑖=1(𝑋𝑖− ¯𝑋)3
𝑖=1(𝑋𝑖− ¯𝑋)2) 3
𝑛
𝑛
This simple analysis helped us confirm that the configuration has
a high degree of variability and skewness across the carriers and
markets. Thus, generating the configuration parameter values for
the group of highly variable and skewed set of parameters becomes
a challenge, especially when trying to derive it manually or using
a rule-book.
3 AURIC DESIGN AND IMPLEMENTATION
In this section, we present the design and implementation of Auric.
Fig. 5 presents an overview of Auric. Our key idea in Auric is akin
to collaborative filtering for new users (often referred to as cold
start [8, 25, 34, 36] problem) in content recommendation systems.
Since the new carriers are not yet carrying user traffic, they are
analogous to new users without any past interactions with items.
Thus, we rely on the attributes of the new carriers that are available
when they are activated but not carrying user traffic. We use the
intuition that the configuration parameters on the new carrier are
highly similar to existing carriers that have matching attribute
values. As shown in Fig. 5, the carrier attributes range from carrier
frequency, type, downlink channel bandwidth, morphology, cell
size, market and hardware and software version. In Auric, we first
learn the dependency models between the configuration parameters
and the attributes for existing carriers that are carrying live traffic.
Then, we recommend or predict the configuration parameter values
for the new carriers using the new carrier’s attributes and the
previously learned dependency models.
3.1 Problem formulation
We now formulate the problem to be solved in Auric. First, we set
the notations as shown in Table 2. Fig. 6 shows the matrices for
attributes and configuration parameters of the carriers. The carrier
attribute matrix 𝑋 serves as the predictor and the configuration
parameter vector 𝑌 serves as the predictee. We build a dependency
model 𝑌 (𝑖) = 𝛽(𝑖) · 𝑋 for each parameter vector 𝑌 𝑖 using attributes
and configuration parameter values for the existing carriers (e.g.,
𝐶1, 𝐶2, ..., 𝐶𝑁−1). Then, for a new carrier 𝐶𝑁 , we can compute the
prediction of the configuration parameter 𝑌 (𝑖)
𝑁 = 𝛽(𝑖) · 𝑋𝑁 ,∗. Given
this formulation, we can explore multiple supervised techniques
for dependency model learning and recommendation or prediction.
811
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Ajay Mahimkar, Ashiwan Sivakumar, Zihui Ge, Shomik Pathak, Karunasish Biswas
Figure 3: Distinct values across configuration parameters for each market.
Figure 4: Skewness of configuration parameter values across
markets.
Figure 6: 𝑁 carriers, 𝐴 attributes for attribute matrix 𝑋. 𝑌 is
matrix of 𝑀 parameters for 𝑁 carriers.
3.2 Dependency learning
One can employ linear or non-linear regression models to discover
the dependency structure or the beta coefficients (𝛽(𝑖)). For linear
regression, one can add regularization function to increase the
sparsity in the solution. Typically, the configuration parameter
values should be associated with a small number of carrier attributes
and thus the regularization function plays a key role in discovering
sparse dependency models. Lasso regression is expressed as