u
b
i
r
t
s
D
e
v
i
l
i
t
a
u
m
u
C
80
60
40
20
0
Median Overhead 2.39%
1
Overall Overhead (%)
10
100
Figure 12: Cumulative Distribution Function (CDF) of Overhead Intro-
duced by JShield on Top 500 Alexa Web Site (The average is 9.42%, and
the median is 2.39%.)
JavaScript, JShield can detect all those samples. Note that there is
no difference between the detection rate of original data and data
with injected benign features. As pointed in Section 2, those attacks
are out of our threat model. We do not have any false positives be-
cause the vulnerability signatures containing control and data ﬂow
information can precisely describe the corresponding vulnerability.
Interestingly, we even ﬁnd that there is no web site passing the ﬁrst
stage, i.e. regular expression matching of the ﬁlter format.
8.4 Performance
We measure the performance of signature matching engines
of JShield and overall performance respectively in Section 8.4.1
and 8.4.2.
8.4.1 Signature Matching Performance
We measure the JavaScript execution latency introduced by
JShield against the original execution latency of top ten Alexa [3]
web sites. We measure the latency by injecting codes into WebKit
engine before and after JavaScript execution. Normally JavaScript
is executed multiple times so we accumulated all the latency to-
gether. Both the ﬁltering and the detection format opcode matching
are measured.
Note that for top one hundred Alexa web sites, we do not ﬁnd any
that can bypass the pre-ﬁltering stage against all the vulnerabilities
in our library. In other words, there is no false positive for top one
hundred Alexa web sites given our data set.
In Figure 13, we show the latency introduced by the ﬁltering
and the matching process of JShield. For matching with detection
signatures, the latency is comparable to the latency (2 to 14 times
slower) introduced by Nozzle [43] without object sampling. In the
worst case, Twitter is about 6 times slower than normal execution.
The fastest web site Wikipedia is within 2% because there is little
JavaScript hosted on Wikipedia.
For ﬁltering, since regular expression matching is very fast, it
is predictable that the latency is small. As shown in the ﬁgure,
ﬁltering overhead is within 2%.
8.4.2 Overall Performance
In Figure 12, we show the overall performance overhead in-
troduced by JShield. The experiment is performed on Top 500
Alexa [3] web site. We test each web site ten times with and with-
out JShield support, get the average latency and then calculate the
overhead. The average overhead among 500 web sites is 9.42%,
the median overhead is 2.39%, and the standard deviation is 3.17%.
1500
1000
500
)
s
m
(
y
c
n
e
t
a
L
0
Original
Matching with Detection Format Directly
Matching After Filtering
Google
Youtube
FB
Wikipedia
Yahoo
Twitter
Amazon
Baidu
QQ
Live.com
Figure 13: JavaScript Execution Latency Introduced by Matching Filtering and Detection Format of Opcode Signature in JShield (Note that none of the web
sites in the graph will actually pass to stage two - detection format matching given our library. We force JShield perform detection format matching for
measurement purpose only.)
Since the pre-ﬁltering process - regular expression matching is very
fast, most of the overhead is introduced by the event triggering en-
gine.
9. DISCUSSION
Does the opcode signature set change if we implement JShield with
a different browser kernel?
Answer: Yes, one opcode signature set binds to one speciﬁc JShield
implementation, which is similar to the case that one binary can
only be executed upon one operating system. However, vulnerabil-
ities in any browser can be represented in one JShield implementa-
tion since we do not require the vulnerability to exist.
Do the attackers need to know features extracted by anomaly-based
detection method to pollute samples?
Answer: No, at detection stage, benign features are extracted from
normal web sites instead of those used by anomaly-based detection
engine (generated from normal web sites and malicious web sites).
10. RELATED WORK
In this section, we discuss the related work from three aspects:
pre-exploit stage, exploit stage, and the others.
10.1 Pre-exploit Stage
Instead of de-
Approaches Detecting Heap-spraying Attacks.
tecting a drive-by vulnerability, researchers propose to detect the
heap spraying stage of a drive-by download attack. For example,
Nozzle [43] and Egele et al. [25] detect every object/string created
by JavaScript to examine whether it is executable. DieHarder [40]
provides a new memory allocator for securing the heap from exe-
cution.
Those approaches [25, 43] detecting heap spraying can be
evaded by newly-emerged technology such as Heap Taichi [24],
and most importantly, heap spraying is not a necessary step for a
drive-by download attack. As shown in the dissected and catego-
rized Malware samples reported by Zozzle [23], 6 out of 19 samples
are not using heap spraying. There are two reasons:
• Address space layout randomization (ASLR) is not enabled by
every browser. For example, Internet Explorer 7 on Windows
Vista prior to SP1 does not enable ASLR by default [2].
• Several other techniques, such as JIT spraying [10] and spray-
ing by calling other languages including VBScript and Action-
Script, can substitute JavaScript heap spraying.
De-obfuscating JavaScripts. Rozzle [30] adopts symbolic execu-
tion, multi-execute JavaScript code, and partially mitigates differ-
ences between multiple browsers. Other previous approaches [18,
23, 33, 46] mostly execute JavaScript and acquire de-obfuscated
JavaScript code. Revolver [29] compares the similarity between
different JavaScript samples and cluster them based on AST fea-
tures, however as shown in Figure 10, two samples with different
ASTs can trigger the same vulnerability.
As an important step of detecting malicious JavaScript code,
those de-obfuscation techniques can be deployed together with
JShield. For example, Rozzle can be included in JShield as a com-
ponent in the de-obfuscation engine to defeat those mechanisms
that detect the monitoring environment. Since we do not have any
open source Rozzle available, we leave it as our future work.
10.2 Exploit Stage
There are two ways detecting drive-by download attacks.
Vulnerability-based Approaches. BrowserShield [44], a vulnera-
bility based detection, checks whether a JavaScript operation vio-
lates pre-deﬁned policy, thus leading to an attack. Similarly, Song
et al. [50] proposes a vulnerability signature to detect plug-in vul-
nerabilities by checking inter-module communication.
Signatures used in BrowserShield [44] and Song et al. [50] can-
not represent stateful intra-module vulnerability such as the one in
Example I. Further, neither BrowserShield [44] nor Song et al. [50]
have considered polymorphic attacks targeting at the same Java-
Script vulnerability, like the one in Example I of Section 3.
Anomaly-based Approaches. Researchers propose many anomaly-
based approaches, such as Zozzle [23], JSAND [22], CUJO [46],
and Wepawet [18]. As illustrated in Section 3, anomaly-based ap-
proaches have several limitations in adversarial environment, i.e.,
an attacker can utilize a polymorphic variance of existing Java-
Script exploit codes or inject false malicious features to bypass
anomaly-based approaches.
10.3 Others
Static Methods. There are also many static analysis of detecting
malicious web page, including but not restricted to Prophiler [21],
Seifert et al. [48, 49], Ma et al. [36], and so on. Obfuscation tech-
nique, such as embedding into eval and document.write, can evade
those approaches.
Protection Mechanisms. There are many protection mecha-
nisms [26, 45, 51, 53] sandboxing a browser principal, which iso-
late a browser principal from other parallel browser principals and
the host operating system. Blade [34] detects whether an exe-
cutable is downloaded through a browser GUI. If it is not from
a browser GUI, the downloaded executable will be quarantined.
BrowserGuard [27] adopts similar behaviour based approach to de-
tect downloaded ﬁles. Cisco IronPort [6], SpyProxy [37] and Web-
Shield [31] detect drive-by download at middle box and transfer
safe contents back to the client. All of those are effective protec-
tion mechanisms, but it is far from deploying them upon all the
client browsers and enterprise network.
Behavior Based Detection. Provos et al. [42] and Google Safe
Browsing [9] use anti-virus software and execution based heuris-
tics to detect the malicious behavior of downloaded malware. Many
other approaches [38, 47, 55] use high-interaction client honeypots
for detection. Their detection scope is limited because the vulner-
ability condition might not be triggered in their speciﬁc detection
environment.
11. CONCLUSION
Due to possible data pollution for anomaly-based detection of
drive-by download attacks and no complete vulnerability represen-
tation for vulnerability-based detection, we propose opcode vul-
nerability signature, consisting of a deﬁnitive state automaton and
a variable pool to represent both control and data ﬂow of a vulnera-
bility condition. We implement a prototype system, called JShield,
which de-obfuscates JavaScript by event triggering and then per-
forms opcode signature matching. Next, we investigate all the Java-
Script engine vulnerabilities of web browsers from 2009 to 2014,
and those of PDF from 2007 to 2014. We ﬁnd that JShield can
detect all of them. We also ﬁnd that JShield can represent all the
inter-module plug-in vulnerabilities obtained from Song et al. [50].
12. ACKNOWLEDGEMENT
This material is based upon work supported in part by Qatar
National Research Fund under award ID SP0022512 and National
Natural Science Foundation of China under grant NO. 61472209.
Any opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the authors and do not neces-
sarily reﬂect the views of the funding foundations.
13. REFERENCES
[1] 2013 compare the best antivirus software products.
http://anti-virus-software-review.toptenreviews.com/.
[2] Address space layout randomization.
http://en.wikipedia.org/wiki/Address_space_layout_
randomization#Microsoft_Windows.
[3] Alexa Top Websites. http://www.alexa.com/topsites.
[4] Apple hit by hackers who struck facebook.
http://online.wsj.com/article/
SB10001424127887324449104578314321123497696.html.
[5] Cisco ips signatures.
http://tools.cisco.com/security/center/ipshome.x?i=
62&shortna=CiscoIPSSignatures#CiscoIPSSignatures.
[6] Cisco ironport.
http://www.cisco.com/web/ironport/index.html.
[7] Doxygen. http://www.stack.nl/~dimitri/doxygen/.
[8] Embedding perl (using perl from c).
http://docstore.mik.ua/orelly/perl/prog3/ch21_04.htm.
[9] Google safe browsing.
https://developers.google.com/safe-browsing/.
[10] JIT spraying. http://en.wikipedia.org/wiki/JIT_spraying.
[11] National vulnerability database. http://nvd.nist.gov/.
[12] Regular expression library in c++.
http://www.cplusplus.com/reference/std/regex/.
[13] Snort rules. http://www.snort.org/snort-rules/.
[14] Spidermonkey javascript engine. https:
//developer.mozilla.org/en-US/docs/SpiderMonkey.
[15] Standard template library. http://www.sgi.com/tech/stl/.
[16] V8 javascript engine. https://code.google.com/p/v8/.
[17] Webkit source codes.
http://webkit.org/building/checkout.html.
[18] Wepawet. http://wepawet.iseclab.org/.
[19] BARTH, A., JACKSON, C., AND MITCHELL, J. Robust defenses for cross-site
request forgery. In CCS (2008).
[20] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND JHA, S. Towards
automatic generation of vulnerability-based signatures. In SP: the 2006 IEEE
Symposium on Security and Privacy (2006).
[21] CANALI, D., COVA, M., VIGNA, G., AND KRUEGEL, C. Prophiler: a fast
ﬁlter for the large-scale detection of malicious web pages. In WWW (2011).
[22] COVA, M., KRUEGEL, C., AND VIGNA, G. Detection and analysis of
drive-by-download attacks and malicious javascript code. In WWW (2010).
[23] CURTSINGER, C., LIVSHITS, B., ZORN, B., AND SEIFERT, C. Zozzle: fast
and precise in-browser javascript malware detection. In the 20th USENIX
conference on Security (2011).
[24] DING, Y., WEI, T., WANG, T., LIANG, Z., AND ZOU, W. Heap taichi:
exploiting memory allocation granularity in heap-spraying attacks. In ACSAC
(2010).
[25] EGELE, M., WURZINGER, P., KRUEGEL, C., AND KIRDA, E. Defending
browsers against drive-by downloads: Mitigating heap-spraying code injection
attacks. In DIMVA (2009).
[26] GRIER, C., TANG, S., AND KING, S. T. Secure web browsing with the OP
web browser. In SP: IEEE Symposium on Security and Privacy (2008).
[27] HSU, F.-H., TSO, C.-K., YEH, Y.-C., WANG, W.-J., AND CHEN, L.-H.
Browserguard: A behavior-based solution to drive-by-download attacks.
Selected Areas in Communications, IEEE Journal on (2011).
[28] JENSEN, S. H., MØLLER, A., AND THIEMANN, P. Type analysis for
javascript. In SAS: the International Symposium on Static Analysis (2009).
[29] KAPRAVELOS, A., SHOSHITAISHVILI, Y., COVA, M., KRUEGEL, C., AND
VIGNA, G. Revolver: An automated approach to the detection of evasive
web-based malware. In USNIX Security Symposium (2013).
[30] KOLBITSCH, C., LIVSHITS, B., ZORN, B., AND SEIFERT, C. Rozzle:
De-cloaking internet malware. In SP: IEEE Symposium on Security and Privacy
(2012).
[31] LI, Z., TANG, Y., CAO, Y., RASTOGI, V., CHEN, Y., LIU, B., AND SBISA, C.
Webshield: Enabling various web defense techniques without client side
modiﬁcations. In NDSS (2011).
[32] LI, Z., XIA, G., GAO, H., YI, T., CHEN, Y., LIU, B., JIANG, J., AND LV, Y.
Netshield: Massive semantics-based vulnerability signature matching for
high-speed networks. In SIGCOMM (2010).
[33] LU, G., COOGAN, K., AND DEBRAY, S. K. Automatic simpliﬁcation of
obfuscated javascript code (extended abstract). In ICISTM: 6th International
Conference of Information Systems, Technology and Management (2012).
[34] LU, L., YEGNESWARAN, V., PORRAS, P. A., AND LEE, W. BLADE: An
attack-agnostic approach for preventing drive-by malware infections. In CCS
(2010).
[35] LU, X., ZHUGE, J., WANG, R., CAO, Y., AND CHEN, Y. De-obfuscation and
detection of malicious pdf ﬁles with high accuracy. In HICSS (2013).
[36] MA, J., SAUL, L. K., SAVAGE, S., AND VOELKER, G. M. Beyond blacklists:
learning to detect malicious web sites from suspicious urls. In SIGKDD (2009).
[37] MOSHCHUK, A., BRAGIN, T., DEVILLE, D., GRIBBLE, S., AND LEVY, H.
Spyproxy: Execution-based detection of malicious web content. In 16th
USENIX Security Symposium (2007).
[38] MOSHCHUK, A., BRAGIN, T., GRIBBLE, S. D., AND LEVY, H. M. A
crawler-based study of spyware on the web. In NDSS (2006).
[39] MOZILLA. Narcissus javascript engine.
http://mxr.mozilla.org/mozilla/source/js/narcissus/.
[40] NOVARK, G., AND BERGER, E. D. DieHarder: securing the heap. In CCS
(2010).
[41] PERDISCI, R., DAGON, D., LEE, W., FOGLA, P., AND SHARIF, M.
Misleading worm signature generators using deliberate noise injection. In In
Proceedings of the 2006 IEEE Symposium on Security and Privacy (2006).
[42] PROVOS, N., MAVROMMATIS, P., RAJAB, M. A., AND MONROSE, F. All
your iframes point to us. In 17th USENIX Security Symposium (2008).
[43] RATANAWORABHAN, P., LIVSHITS, B., AND ZORN, B. Nozzle: A defense
against heap-spraying code injection attacks. In 18th USENIX Security
Symposium (2009).
[44] REIS, C., DUNAGAN, J., WANG, H. J., DUBROVSKY, O., AND ESMEIR, S.
Browsershield: vulnerability-driven ﬁltering of dynamic html. In OSDI (2006).
[45] REIS, C., AND GRIBBLE, S. D. Isolating web programs in modern browser
architectures. In EuroSys (2009).
[46] RIECK, K., KRUEGER, T., AND DEWALD, A. Cujo: efﬁcient detection and
prevention of drive-by-download attacks. In ACSAC (2010).
[47] SEIFERT, C., STEENSON, R., HOLZ, T., YUAN, B., , AND DAVIS, M. A.
Know your enemy: Malicious web servers.
http://www.honeynet.org/papers/mws/.
[48] SEIFERT, C., WELCH, I., AND KOMISARCZUK, P. Identiﬁcation of malicious
web pages with static heuristics. In ATNAC: Telecommunication Networks and
Applications Conference (2008).
[49] SEIFERT, C., WELCH, I., KOMISARCZUK, P., AVAL, C. U., AND
ENDICOTT-POPOVSKY, B. Identiﬁcation of malicious web pages through
analysis of underlying dns and web server relationships. In LCN: Local
Computer Networks (2008).
[50] SONG, C., ZHUGE, J., HAN, X., AND YE, Z. Preventing drive-by download
via inter-module communication monitoring. In ASIACCS (2010).
[51] TANG, S., MAI, H., AND KING, S. T. Trust and protection in the illinois
browser operating system. In OSDI (2010).
[52] TER LOUW, M., AND VENKATAKRISHNAN, V. Blueprint: Precise
browser-neutral prevention of cross-site scripting attacks. In 30th IEEE
Symposium on Security and Privacy (2009).
[53] WANG, H. J., GRIER, C., MOSHCHUK, A., KING, S. T., CHOUDHURY, P.,
AND VENTER, H. The multi-principal OS construction of the gazelle web
browser. In 18th Usenix Security Symposium (2009).
[54] WANG, H. J., GUO, C., SIMON, D. R., AND ZUGENMAIER, A. Shield:
vulnerability-driven network ﬁlters for preventing known vulnerability exploits.
In SIGCOMM (2004).
[55] WANG, Y., BECK, D., JIANG, X., AND ROUSSEV, R. Automated web patrol
with strider honeymonkeys: Finding web sites that exploit browser
vulnerabilities. In NDSS (2006).