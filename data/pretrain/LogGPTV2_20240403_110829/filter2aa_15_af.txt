require_once
（
QISHI_ROOT_PATH.'include/tpl.inc.php'
）；
包含了include/tpl.inc.php文件，跟进看看这个文件做了什么：
include_once
（
QISHI_ROOT_PATH.'include/template_lite/class.template.php'
）；
$smarty = new Template_Lite
；
$smarty -> cache_dir = QISHI_ROOT_PATH.'temp/caches/'.$_CFG['template_dir']
；
$smarty -> compile_dir =  QISHI_ROOT_PATH.'temp/templates_c/'.$_CFG ['template_dir']
；
$smarty -> template_dir = QISHI_ROOT_PATH.'templates/'.$_CFG['template_dir']
；
$smarty -> reserved_template_varname = "smarty"
；
$smarty -> left_delimiter = "{#"
；
$smarty -> right_delimiter = "#}"
；
$smarty -> force_compile = false
；
$smarty -> assign
（
'_PLUG'
，
$_PLUG
）；
$smarty -> assign
（
'QISHI'
，
$_CFG
）；
$smarty -> assign
（
'page_select'
，
$page_select
）；
首先看到包含了include/template_lite/class.template.php文件，这是一个映射程序模板的类，由Paul Lockaby paul和Mark Dickenson编写，由于该文件较大，我们这里不再仔细分析，继续往下跟进，可以看到这段代码实例化了这个类对象赋值给$smarty变量，继续跟进则回转到index.php文件代码：
if
（！
$smarty->is_cached
（
$mypage['tpl']
，
$cached_id
））
{
require_once
（
QISHI_ROOT_PATH.'include/mysql.class.php'
）；
$db = new mysql
（
$dbhost
，
$dbuser
，
$dbpass
，
$dbname
）；
unset
（
$dbhost
，
$dbuser
，
$dbpass
，
$dbname
）；
$smarty->display
（
$mypage['tpl']
，
$cached_id
）；
}
else
{
$smarty->display
（
$mypage['tpl']
，
$cached_id
）；
}
判断是否已经缓存，然后调用display（）函数输出页面，审计到这里是否对整个程序的框架比较熟悉了？接下来像审计index.php文件一样跟进其他功能入口文件即可完成代码通读。
3.3 根据功能点定向审计
在有了一定的代码审计经验之后，一定会知道哪些功能点通常会有哪些漏洞，在我们想要快速挖掘漏洞的时候就可以这样来做，首先安装好并且运行程序，到处点点，浏览一下，看下程序有哪些功能，这些功能的程序文件分别是怎么样的，是独立的模块还是以插件形式存在，或者是写在一个通用类里面，然后多处调用。在了解这些功能的存在形式后，可以先寻找经常会出问题的功能点，简单黑盒测试一下，如果没有发现很普通、很常见的漏洞，再去读这个功能的代码，这样我们读起来就可以略过一些刚才黑盒测试过的点，提高审计速度。
根据经验，我们来简单介绍几个功能点经常会出现的漏洞，如下所示：
1）文件上传功能
 。这里说的文件上传在很多功能点都会出现，比如像文章编辑、资料编辑、头像上传、附件上传，这个功能最常见的漏洞就是任意文件上传了，后端程序没有严格地限制上传文件的格式，导致可以直接上传或者存在绕过的情况，而除了文件上传功能外，还经常发生SQL注入漏洞。因为一般程序员都不会注意到对文件名进行过滤，但是又需要把文件名保存到数据库中，所以就会存在SQL注入漏洞。
2）文件管理功能
 。在文件管理功能中，如果程序将文件名或者文件路径直接在参数中传递，则很有可能会存在任意文件操作的漏洞，比如任意文件读取等，利用的方式是在路径中使用../或者..\跳转目录，如图3-12所示。
除了任意文件操作漏洞以外，还可能会存在XSS漏洞，程序会在页面中输出文件名，而通常会疏忽对文件名进行过滤，导致可以在数据库中存入带有尖括号等特殊符号的文件名，最后显示在页面上的时候就会被执行。
3）登录认证功能
 。登录认证功能不是指一个登录过程，而是整个操作过程中的认证，目前的认证方式大多是基于Cookie和Session，不少程序会把当前登录的用户账号等认证信息放到Cookie中，或许是加密方式，是为了保持用户可以长时间登录，不会一退出浏览器或者Session超时就退出账户，进行操作的时候直接从Cookie中读取出当前用户信息，这里就存在一个算法可信的问题，如果这段Cookie信息没有加salt一类的东西，就可以导致任意用户登录漏洞，只要知道用户的部分信息，即可生成认证令牌，甚至有的程序会直接把用户名明文放到Cookie中，操作的时候直接取这个用户名的数据，这也是常说的越权漏洞。
图 3-12
ESPCMS就多次被曝光存在这个漏洞，具体的漏洞分析在乌云上面可以直接看到，其中一个漏洞信息如下，感兴趣的读者可以研究一下：
缺陷编号：WooYun-2015-90324
漏洞标题：ESPCMS所有版本任意用户登录
相关厂商：易思ESPCMS企业网站管理系统
漏洞作者：路人甲
4）找回密码功能
 。找回密码虽然看起来不像任意文件上传这种可以危害到服务器安全的漏洞，但是如果可以重置管理员的密码，也是可以间接控制业务权限甚至拿到服务器权限的。而找回密码功能的漏洞有很多利用场景，最常见的是验证码爆破，目前特别是APP应用，请求后端验证码的时候大多是4位，并且没有限制验证码错误次数和有效时间，于是就出现了爆破的漏洞。除此之外，还有验证凭证的算法，这需要在代码中才能看到，所以我们做代码审计的时候可以看看这个算法是否可信。
这些功能点上的漏洞需要我们多读代码才能积累经验。
BugFree重装漏洞案例
针对功能点的审计是相对简单的，不过在使用这种方式审计之前建议先了解整个程序的架构设计和运行流程，程序重装漏洞在早期是比较常见的，我们来看看BugFree的程序安装功能，该程序之前被papaver爆出存在多个漏洞，其中就有一个重装漏洞。
BugFree安装文件在install\index.php，代码如下：
结果：
'
）；
print_r
（
mysql_fetch_row
（
$result
））；
测试代码中GET id参数存在SQL注入漏洞，测试方法如图4-2所示。
图 4-2
从截图可以看到原本的SQL语句已被注入更改，使用了union查询到当前用户。
从上面的测试代码中可以发现，数据库操作存在一些关键字，比如select from、mysql_connect、mysql_query、mysql_fetch_row等，数据库的查询方式还有update、insert、delete，我们在做白盒审计时，只需要查找这些关键字，即可定向挖掘SQL注入漏洞。
4.1.1.2 编码注入
程序在进行一些操作之前经常会进行一些编码处理，而做编码处理的函数也是存在问题的，通过输入转码函数不兼容的特殊字符，可以导致输出的字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。
1.宽字节注入
在使用PHP连接MySQL的时候，当设置“set character_set_client=gbk”时会导致一个编码转换的注入问题，也就是我们所熟悉的宽字节注入，当存在宽字节注入漏洞时，注入参数里带入%df%27，即可把程序中过滤的\（%5c）吃掉。举个例子，假设/1.php？id=1里面的id参数存在宽字节注入漏洞，当提交/1.php？id=-1’and 1=1%23时，MySQL运行的SQL语句为select*from user where id=’1\’and 1=1#’很明显这是没有注入成功的，我们提交的单引号被转义导致没有闭合前面的单引号，但是我们提交/1.php？id=-1%df’and 1=1%23时，这时候MySQL运行的SQL语句为：
select * from user where id='1
运
' and 1=1#'
这是由于单引号被自动转义成\'，前面的%df和转义字符\反斜杠（%5c）组合成了%df%5c，也就是“运”字，这时候单引号依然还在，于是成功闭合了前面的单引号。
出现这个漏洞的原因是在PHP连接MySQL的时候执行了如下设置：
set character_set_client=gbk
告诉MySQL服务器客户端来源数据编码是GBK，然后MySQL服务器对查询语句进行GBK转码导致反斜杠\被%df吃掉，而一般都不是直接设置character_set_client=gbk，通常的设置方法是SET NAMES'gbk'，但其实SET NAMES'gbk'不过是比character_set_client=gbk多干了两件事而已，SET NAMES'gbk'等同于如下代码：
SET
character_set_connection='gbk'
，
character_set_results='gbk'
，
character_set_client=gbk
这同样也是存在漏洞的，另外官方建议使用mysql_set_charset方式来设置编码，不幸的是它也只是调用了SET NAMES，所以效果也是一样的。不过mysql_set_charset调用SET NAMES之后还记录了当前的编码，留着给后面mysql_real_escape_string处理字符串的时候使用，所以在后面只要合理地使用mysql_real_escape_string还是可以解决这个漏洞的，关于这个漏洞的解决方法推荐如下几种方法：
1）在执行查询之前先执行SET NAMES'gbk'，character_set_client=binary设置character_set_client为binary。
2）使用mysql_set_charset（'gbk'）设置编码，然后使用mysql_real_escape_string（）函数被参数过滤。
3）使用pdo方式，在PHP5.3.6及以下版本需要设置setAttribute（PDO：：ATTR_EMULATE_PREPARES，false）；来禁用prepared statements的仿真效果。
如上几种方法更推荐第一和第三种。
下面对宽字节注入进行一个简单测试。
测算代码如下：
结果：
'
）；
print_r
（
mysql_fetch_row
（
$result
））；
mysql_close
（）；