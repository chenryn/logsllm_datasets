result = re.split("(]*>)", subject))
如果要反复使用同一个正则表达式，那么就需要使用一个编译好的对象：
reobj = re.compile("(]*>)")
result = reobj.split(subject)
Ruby
list = []
lastindex = O;
subject.scan(/]*>/){|match1
list 、bold、、·and·、和
italic·fonts。如果你的正则表达式中包含10个捕获分组，而且你使用的是.NET
2.0及更高版本，那么regexObj.Split(subject,4)会返回一个包含34个字符串的数组。
NET没有提供一个选项来把捕获分组从数组中去掉。你唯一的解决方案只能是把所有
命名和编号的捕获分组都替换为非捕获分组。在.NET中可以使用
RegexOptions.ExplicitCapture很容易地把正则表达式中的所有命名分组都替换成正常
分组（也就是一对圆括号）。
Java
Java中的Pattern.splitO方法没有提供选项可以把正则匹配添加到结果数组中。但是，
我们可以通过修改实例3.12来把正则匹配与位于正则匹配之间的文本一起添加到
一个列表中。为了得到位于正则匹配之间的文本，我们使用了实例3.8中讲解的匹
配详细信息。
JavaScript
JavaScript中的string.splitO函数没有提供一个选项来控制是否应该把正则匹配添加到数
组中。根据JavaScript标准，所有的捕获分组都应该把它们的匹配添加到数组中。不幸
的是，当前流行的web浏览器却都没有这样做，或者做得不够一致。
为了得到一个在所有浏览器上都可以工作的解决方案，可以修改实例3.12来把正则匹
配与位于正则匹配之间的文本一起添加到一个列表中。为了得到位于正则匹配之间的
文本，我们使用了实例3.8中讲解的匹配详细信息。
PHP
把PREG_SPLIT_DELIM_CAPTURE作为第4个参数传递给preg_SplitO，就会把捕获分
组匹配到的文本添加到返回数组中。你还可以使用操作符把PREG_SPLIT_DELIM_
CAPTURE和PREG_SPLIT_NO_EMPTY组合起来使用。
捕获分组不会被算到你传递给preg_splitO函数的字符串计数中。如果你使用本实例中的
示例字符串和正则式，而把字符串个数上限设为4，那么你会得到一个包含7个字符串
的数组。它们分别是在3个正则匹配之前、之间和之后的4个字符串，再加上由正则
表达式中的唯一捕获分组捕获到的位于它们之间的3个正则匹配。简单来说，你会得
到一个包含如下字符事的数组：Iolike·、、bold、、·and·、和
italicofonts。
使用正则表达式编程197
www.TopSage.com
---
## Page 214
Perl
Perl中的splitO函数会把所有捕获分组匹配到的文本都添加到数组中。如果你想要把整
个正则匹配也加到数组中，那么需要把整个正则表达式放到一个捕获分组中。
捕获分组不会被算到你传递给splitO函数的字符串计数中。如果使用本实例中的示例字
数组。它们分别是在3个正则匹配之前、之间和之后的4个字符事，再加上由正则表
达式中的唯一捕获分组捕获到的位于它们之间的3个正则匹配。简单来说，你会得到
一个包含如下字符串的数组：Iolike·、、bold、、·and·、和italic
·fonts。如果你的正则表达式中包含10个捕获分组，那么split(Sregex，Ssubject，
4)会返回一个包含34个字符事的数组。
Perl没有提供-一个选项来把捕获分组从数组中去掉。唯一的解决方案只能是把所有命名
和编号的捕获分组都替换为非捕获分组。
Python
Python中的splitO函数会把所有捕获分组匹配到的文本都添加到数组中。如果想要把整
个正则匹配也加到数组中，那么就需要把整个正则表达式放到一个捕获分组中。
捕获分组不会被算到你传递给splitO函数的字符事计数中。如果使用本实例中的示例字
符串和正则式来调用split(/()/，$subject,3)，那么你会得到一个包含7个字符串
的数组。它们分别是在三个正则匹配之前、之间和之后的4个字符串，再加上由正则
表达式中的唯-一捕获分组捕获到的位于它们之间的三个正则匹配。简单来说，你会得
到-个包含如下字符串的数组：Iolike·、、bold、、·and·、和
Ssubject,3)会返回一个包含34个字符串的数组。
Python没有提供一个选项来把捕获分组从数组中去掉。唯一的解决方案只能是把所有
命名和编号的捕获分组都替换为非捕获分组。
Ruby
Ruby中的String.splitO方法没有提供选项可以把正则匹配添加到结果数组中。但是，我
表中。为了得到位于正则匹配之间的文本，我们使用了实例3.8中讲解的匹配详细信息。
参见
实例2.9中讲解了捕获和非捕获分组。
实例2.11中讲解了命名分组。
198第3章
www.TopSage.com
---
## Page 215
3.21逐行查找
问题描述
传统的grep工具在使用正则表达式时每次只会应用到目标文本的一行之上，并且会显
示正则表达式匹配到（或者没有匹配到）的行。这个问题要求你采用这种方式来处理
一个字符事数组或一个多行字符串。
解决方案
#
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
x
然后，对这个lines数组进行遍历：
Regex regexObj = new Regex("regex pattern");
for(inti=0;i<1ines.Length;i++){
if (regexObj.IsMatch(lines[i])){
// The regex matches 1ines[i]
}else{
// The regex does not match lines[i]
VB.NET
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
Dim Lines = Regex.Split(SubjectString,"\r?\n")
然后，对这个lines数组进行遍历：
Dim RegexObj As New Regex("regex pattern")
For i As Integer =0 To Lines.Length -1
If RegexObj.IsMatch(Lines(i)) Then
'The regex matches Lines(i)
Else
'The regex does not match Lines(i)
EndIf
Next
使用正则表达式编程
199
www.TopSage.com
---
## Page 216
Java
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
String[] 1ines = subjectString.split("\r?\n");
然后，对这个lines数组进行遍历：
Pattern regex = Pattern.compile("regex pattern");
Matcher regexMatcher = regex.matcher("");
for(int i=0;i< 1ines.length;i++){
regexMatcher,reset (lines [i]);
if （regexMatcher.find())(
// The regex matches lines[i]
}else{
// The regex does not match lines[i]
JavaScript
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本。在实例3.19中提到过，有些浏览器会把数组中的空行去掉。
var lines = subject.split(/\r?\n/);
然后，对这个lines数组进行遍历：
var regexp/regex pattern/;
for(var i=0;i<lines.length;i++){
if (lines[i].match(regexp)){
// The regex matches lines[i]
)else{
// The regex does not match lines[i]
}
PHP
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
$lines = preg_split('/\r?\n/'，$subject)
然后，对这个Slines数组进行遍历：
foreach ($lines as $line){
if (preg_match('/regex pattern/',$line)){
//The regex matches $line
200
第3章
www.TopSage.com
---
## Page 217
}else{
//The regex does not match $line
Perl
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个
字符串都包含一行文本：
$lines = split(m/\r?\n/, $subject)
然后，对这个$lines数组进行遍历：
foreach sline ($lines){
if ($line =~ m/regex pattern/){
# The regex matches $line
)else{
#The regex does not match $line
Python
如果你有-一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
lines = re.split("\r?\n",subject);
然后，对这个lines数组进行遍历：
reobj =re.compile("regex pattern")
for line in lines[:]:
if re.search (line) :
The regex matches line
else:
#The regex does not match line
Ruby
如果你有一个多行字符串，那么首先把它拆分成一个字符串数组，该数组中的每个字
符串都包含一行文本：
lines = subject.split(/\r?\n/)
然后，对这个lines数组进行遍历：
re =/regex pattern/
lines.each ( 1linel
if line =~ re
#The regex matches line
使用正则表达式编程
201
www.TopSage.com
---
## Page 218
else
#The regex does not match line
讨论
在处理基于行的数据时，如果你不是试图去处理包含内嵌换行符的个长字符事，而
是选择先把数据拆分成包含每一行学符事的数组，那么就可以省去很多麻烦。然后，
你可以把实际的正则表达式应用到数组中的每个字符串之上，而不必担心它是否会匹
配多于一行的内容。这种方法同样使得跟踪行之间的关系较为容易。例如，你可以很
容易地使用一个正则式遍历数组来查找题头行，然后使用另外一个正则表达式来查找
脚注行。在找到了分界的两行之后，你就可以使用第三个正则表达式来查找你感兴趣
的数据行。虽然这样看起来要做很多工作，但其实却并不复杂，而且会得到执行效率
很高的代码。如果你试图要构造一个正则式来一次找到题头、数据和脚注，那么就会