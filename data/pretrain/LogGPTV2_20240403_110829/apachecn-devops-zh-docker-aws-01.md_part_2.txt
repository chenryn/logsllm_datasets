此时，您应该能够启动终端并运行`docker info`命令:
```
> docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.0-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
...
...
```
您也可以使用`docker run`命令启动一个新的容器:
```
> docker run -it alpine echo "Hello World"
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
ff3a5c916c92: Pull complete
Digest: sha256:e1871801d30885a610511c867de0d6baca7ed4e6a2573d506bbec7fd3b03873f
Status: Downloaded newer image for alpine:latest
Hello World
> docker ps -a
CONTAINER ID      IMAGE   COMMAND              CREATED       STATUS                 
a251bd2c53dd      alpine  "echo 'Hello World'" 3 seconds ago Exited (0) 2 seconds ago 
> docker rm a251bd2c53dd
a251bd2c53dd
```
在前面的例子中，您必须运行`alpine`映像，它基于轻量级的 Alpine Linux 发行版，并运行`echo "Hello World"`命令。`-it`标志指定您需要在交互式终端环境中运行容器，这允许您查看标准输出并通过控制台与容器交互。
一旦容器退出，您可以使用`docker ps`命令显示正在运行的容器，并附加`-a`标志以显示正在运行和停止的容器。最后，您可以使用`docker rm`命令移除停止的容器。
# 安装其他工具
正如本节前面所讨论的，我们还需要许多其他工具来帮助自动化许多构建、测试和部署任务。在 macOS 上，已经包含了其中一些工具，概述如下:
*   **Docker 编写**:这已经包含在你为 Mac 安装 Docker 的时候了。
*   **Git** :当你安装了自制程序包管理器(我们会很快讨论自制程序)的时候，XCode 命令行实用程序就安装好了，其中包括 Git。如果您使用另一个包管理器，您可能需要使用包管理器安装 Git。
*   **GNU Make 3.82 或更高版本** : macOS 包含 Make 3.81，不太符合 3.82 版本的要求，因此需要使用第三方包管理器比如 Homebrew 来安装 GNU Make。
*   **卷曲**:这是 macOS 默认包含的，因此不需要安装。
*   **jq 和** **树**:这些默认不包含在 macOS 中，因此需要通过第三方包管理器比如 Homebrew 进行安装。
*   **Python 解释器** : macOS 包含一个 Python 的系统安装，可以用来运行 Python 应用，不过我建议不要安装系统 Python，而是使用自制软件包管理器([https://docs.brew.sh/Homebrew-and-Python](https://docs.brew.sh/Homebrew-and-Python))安装 Python。
*   **PIP**:Python 的系统安装不包括流行的 PIP Python 包管理器，因此如果使用系统 Python 解释器，必须单独安装。如果您选择使用自制程序安装 Python，这将包括画中画。
在 macOS 上安装上述工具最简单的方法是首先安装一个名为 Homebrew 的第三方包管理器。只需浏览[https://brew.sh/](https://brew.sh/)的家酿主页，即可安装家酿:
![](img/18373480-92c4-4163-80c5-87b515bbcd82.png)
Installing Homebrew
只需复制并粘贴突出显示的命令到您的终端提示，这将自动安装自制软件包管理器。完成后，您将能够使用`brew`命令安装前面列出的每个实用程序:
```
> brew install make --with-default-names
==> Downloading https://ftp.gnu.org/gnu/make/make-4.2.1.tar.bz2
Already downloaded: /Users/jmenga/Library/Caches/Homebrew/make-4.2.1.tar.bz2
==> ./configure --prefix=/usr/local/Cellar/make/4.2.1_1
==> make install
/usr/local/Cellar/make/4.2.1_1: 13 files, 959.5KB, built in 29 seconds
> brew install jq tree ==> Downloading https://homebrew.bintray.com/bottles/jq-1.5_3.high_sierra.bottle.tar.gz
Already downloaded: /Users/jmenga/Library/Caches/Homebrew/jq-1.5_3.high_sierra.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/tree-1.7.0.high_sierra.bottle.1.tar.gz
Already downloaded: /Users/jmenga/Library/Caches/Homebrew/tree-1.7.0.high_sierra.bottle.1.tar.gz
==> Pouring jq-1.5_3.high_sierra.bottle.tar.gz
/usr/local/Cellar/jq/1.5_3: 19 files, 946.6KB
==> Pouring tree-1.7.0.high_sierra.bottle.1.tar.gz
/usr/local/Cellar/tree/1.7.0: 8 files, 114.3KB
```
您必须首先使用`--with-default-names`标志安装 GNU Make，这将替换 macOS 上安装的 Make 的系统版本。如果你愿意省略这个标志，那么 GNU 版本的 make 将通过`gmake`命令可用，现有系统版本的 make 不会受到影响。
最后，要使用自制程序安装 Python，可以运行`brew install python`命令，该命令将安装 Python 3，并且还将安装 PIP 包管理器。请注意，当您使用`brew`安装 Python 3 时，通过`python3`命令访问 Python 解释器，而通过`pip3`命令而不是`pip`命令访问画中画包管理器:
```
> brew install python
==> Installing dependencies for python: gdbm, openssl, readline, sqlite, xz
...
...
==> Caveats
Python has been installed as
  /usr/local/bin/python3
Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /usr/local/opt/python/libexec/bin
If you need Homebrew's Python 2.7 run
  brew install python@2
Pip, setuptools, and wheel have been installed. To update them run
  pip3 install --upgrade pip setuptools wheel
You can install Python packages with
  pip3 install 
They will install into the site-package directory
  /usr/local/lib/python3.7/site-packages
See: https://docs.brew.sh/Homebrew-and-Python
==> Summary
/usr/local/Cellar/python/3.7.0: 4,788 files, 102.2MB
```
在 macOS 上，如果您使用已经通过 brew 或另一个包管理器安装的 Python，您还应该将站点模块`USER_BASE/bin`文件夹添加到您的本地路径，因为 PIP 将在这里安装您使用`--user`标志安装的任何应用或库(AWS CLI 就是这样一个应用的示例，您将在本书后面以这种方式安装):
```
> python3 -m site --user-base
/Users/jmenga/Library/Python/3.7
> echo 'export PATH=/Users/jmenga/Library/Python/3.7/bin:$PATH' >> ~/.bash_profile > source ~/.bash_profile 
```
Ensure that you use single quotes in the preceding example, which ensures the reference to `$PATH` is not expanded in your shell session and is instead written as a literal value to the `.bash_profile` file.
在前面的示例中，您使用`--user-base`标志调用站点模块，该标志告诉您用户二进制文件将安装在哪里。然后，您可以将该路径的`bin`子文件夹添加到您的`PATH`变量中，并将其附加到主目录中的`.bash_profile`文件中，每当您生成一个新的 shell 时都会执行该文件，从而确保您将始终能够执行已经安装了`--user`标志的 Python 应用。请注意，您可以使用`source`命令立即处理`.bash_profile`文件，而无需注销并重新登录。
# 设置 Windows 10 环境
就像对于 macOS 一样，如果你正在运行 Windows 10，最快让 Docker 启动并运行的方法就是安装 Docker for Windows，你可以在[https://docs.docker.com/docker-for-windows/](https://docs.docker.com/docker-for-windows/)阅读更多相关内容，也可以从[https://store . Docker . com/editions/community/Docker-ce-desktop-Windows](https://store.docker.com/editions/community/docker-ce-desktop-windows)下载。在幕后，Docker for Windows 利用了名为 Hyper-V 的本机 Windows 虚拟机管理程序，创建了一个虚拟机来运行 Docker Engine，并为 Windows 安装了 Docker 客户端。
您首先需要创建一个免费的 Docker Hub 帐户才能继续，一旦您完成注册并登录，单击**获取 Docker** 按钮下载最新版本的 Windows Docker。
完成下载后，开始安装并确保未选择“使用 Windows 容器”选项:
![](img/8d52b74c-ecbf-40f2-83b9-24ed7c702b7a.png)
Using Linux containers
安装将继续，系统将要求您注销 Windows 以完成安装。重新登录到 Windows 后，系统将提示您启用 Windows Hyper-V 和容器功能:
![](img/2d4041b2-79a0-4e7f-9d52-e49cee2ee6e4.png)
Enabling Hyper-V
您的计算机现在将启用所需的 Windows 功能并重新启动。重新登录后，打开 Windows 应用的 Docker，并确保选择了**在 tcp://localhost:2375 上公开守护程序而不显示 TLS** 选项:
![](img/e105ce63-036f-4094-b3e5-4001996c90a5.png)
Enabling legacy client access to Docker
必须启用此设置，以便允许 Linux 的 Windows 子系统访问 Docker 引擎。
# 为 Linux 安装视窗子系统
现在您已经安装了适用于 Windows 的 Docker，接下来您需要安装适用于 Linux 的 Windows 子系统，该子系统提供了一个 Linux 环境，您可以在其中安装 Docker 客户端、Docker Compose 以及我们将在本书中使用的其他工具。
If you are using Windows, then throughout this book I am assuming that you are using the Windows subsystem for Linux as your shell environment.
要为 Linux 启用 Windows 子系统，您需要以管理员身份运行 PowerShell(右键单击 PowerShell 程序并选择**以管理员身份运行**)，然后运行以下命令:
```
PS > Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 
```
启用此功能后，系统会提示您重新启动机器。一旦你的机器重新启动，你就需要安装一个 Linux 发行版。您可以在文章[https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)中找到各种发行版的链接–参见[中的步骤 1 安装您选择的 Linux 发行版](https://docs.microsoft.com/en-us/windows/wsl/install-win10#install-your-linux-distribution-of-choice)。
例如，Ubuntu 的链接是[https://www.microsoft.com/p/ubuntu/9nblggh4msv6](https://www.microsoft.com/p/ubuntu/9nblggh4msv6)，如果您点击**获取应用**，您将被指引到本地机器上的微软商店应用，您可以免费下载该应用:
![](img/aeb12bd3-b610-437f-8111-a1917975729a.png)