chapter 3; in this section, I’ll show you how to use some of the other parsers.
 The names of many of the modules that implement parsers begin with the word
parse, such as parseopt and parsexml. Some of them have modules that implement a
more intuitive API on top of them, such as these XML parsers: xmldom, xmltree,
xmldomparser, and xmlparser. The latter two modules create a tree-like data structure
out of the parsexml module’s output. The former two modules are then used to
manipulate the tree-like data structures. The xmldom module provides a web DOM–like
API, whereas the xmltree module provides a more idiomatic Nim API. The json mod-
ule defines both a high-level API for dealing with JSON objects and a low-level parser
that parses JSON and emits objects that represent the current data being parsed.
4.6.1
Parsing command-line arguments
Describing how each of these modules can be used for parsing would require its own
chapter. Instead, I’ll present a specific data-parsing problem and show you some ways
that this problem can be solved using the modules available in Nim’s standard library.
 The problem we’ll look at is the parsing of command-line arguments. In chapter 3,
you retrieved command-line arguments using the paramStr() procedure, and you
used the returned string value directly. This worked well because the application
didn’t support any options or flags.
Licensed to   
123
Understanding and manipulating data
 Let’s say you want the application to support an optional port flag on the com-
mand line—one that expects a port number to follow. You may, for example, be writ-
ing a server application and want to give the user the option to select the port on
which the server will run. Executing an application called parsingex with such an
argument would look like this: ./parsingex --port=1234. The --port=1234 part can
be accessed with a paramStr() procedure call, as follows.
import os
let param1 = paramStr(1)
Now you’ve got a string value in the param1 variable that contains both the flag name
and the value associated with it. How do you extract those and separate them?
 There are many ways, some less valid than others. I’ll show you a couple of ways,
and in doing so I’ll show you many different ways that the string type can be manipu-
lated and understood by your program.
 Let’s start by taking a substring of the original string value with the substr proce-
dure defined in the system module. It takes a string value, a start index, and an end
index, with both indexes represented as integers. It then returns a new copy of the
string, starting at the first index specified and ending at the end index.
MORE WAYS TO MANIPULATE STRINGS
Nim strings can be modified at runtime
because they’re mutable, which means they can be modified in place, without
the need to allocate a new copy of the string. You can use the add procedure
to append characters and other strings to them, and delete (defined in the
strutils module) to delete characters from them.
import os
let param1 = paramStr(1)
let flagName = param1.substr(2, 5)
let flagValue = param1.substr(7)
Figure 4.8 shows how the indexes passed
to substr determine which substrings are
returned.
Listing 4.22
Retrieving command-line arguments using paramStr
Listing 4.23
Parsing the flag using substr
The command-line argument at index 1 will be 
equal to "--port=1234", assuming the application 
is executed as in the preceding discussion.
Imports the os module, which 
defines the paramStr procedure
Gets the substring of 
param1 from index 2 
to index 5. This will 
result in "port".
Gets the substring of 
param1 from index 7 to 
the end of the string. 
This will result in "1234".
param1.substr(2, 5) 
- - p o r t = 1 2 3 4
0
1
2
3
4
5
6
7
8
9 10 11
param1.substr(7)
0
1
2
3
4
5
6
7
8
9 10 11
param1 =
"port"
"1234"
Figure 4.8
The substr procedure
Licensed to   
124
CHAPTER 4
A tour through the standard library
The code in listing 4.23 will work, but it is not very flexible. You might wish to support
other flags, and to do that you will need to duplicate the code and change the indices.
 In order to improve this, you can use the strutils module, which contains many
definitions for working with strings. For example, toUpperAscii and toLowerAscii
convert each character in a string to upper- or lowercase, respectively.3 parseInt con-
verts a string into an integer, startsWith determines whether a string starts with
another string, and there are many others.
 There’s a specific procedure that can help you split up the flag string properly, and
it’s called split.
import os, strutils
let param1 = paramStr(1)
let flagSplit = param1.split('=')
let flagName = flagSplit[0].substr(2)
let flagValue = flagSplit[1]
This is still poor-man’s parsing, but it does work. There’s no error handling, but the
code should work for many different flags. But what happens when requirements
change? Say, for example, one of your users prefers to separate the flag name from
the value using the : symbol. This change is easy to implement because the split
3 The procedures are named this way because they don’t support unicode characters. To get unicode support,
you should use the toUpper and toLower procedures defined in the unicode module.
Listing 4.24
Parsing the flag using split
The slice operator
A series of two dots, otherwise known as the .. operator, can be used to create a
Slice object. A Slice can then be fed into the [] operator, which will return a sub-
string. This is similar to the substr procedure, but it supports reverse indexes using
the ^ operator.
doAssert("--port=1234"[2 .. 5] == "port")
doAssert("--port=1234"[7 .. ^1] == "1234")
doAssert("--port=1234"[7 .. ^3] == "12")
Same as using substr(2, 5); returns a
substring from index 2 to index 5
Returns a substring from 
index 7 to the end of the 
string. The ^ operator 
counts back from the end of 
the string.
Returns a substring from 
index 7 to the end of the 
string minus 2 characters
Imports the strutils module, where 
the split procedure is defined
Separates the param1 string value 
into multiple different strings at the 
location where an “=” character 
occurs. The split procedure returns 
a sequence of strings, in this case 
@["--port", "1234"].
Grabs the first string in the 
sequence returned by split and 
removes the first two characters
Grabs the second string in the 
sequence returned by split
Licensed to   
125
Understanding and manipulating data
procedure accepts a set[char], so you can specify {'=', ':'} and the string will be
split on both = and :.
 The split procedure works very well for parsing something as simple as this exam-
ple, but I’m sure you can imagine cases where it wouldn’t be a good choice. For exam-
ple, if your requirements change so that the flag name can now contain the =
character, you’ll run into trouble.
 We’ll stop here for now. You’ll learn more about parsing in chapter 6, where you’ll
see how to use the parseutils module to perform more-advanced parsing.
 Thankfully, you don’t need to parse command-line arguments like this yourself. As
I mentioned previously, the Nim standard library contains a parseopt module that
does this for you. The following listing shows how it can be used to parse command-
line arguments.
import parseopt
for kind, key, val in getOpt():
case kind
of cmdArgument:
echo("Got a command argument: ", key)
of cmdLongOption, cmdShortOption:
case key
of "port": echo("Got port: ", val)
else: echo("Got another flag --", key, " with value: ", val)
of cmdEnd: discard
This code is a bit more verbose, but it handles errors, supports other types of flags,
and goes through each command-line argument. This parser is quite tedious, and,
unfortunately, the standard library doesn’t contain any modules that build on top of
it. There are many third-party modules that make the job of parsing and retrieving
command-line arguments much easier, and these are available through the Nimble
package manager, which I’ll introduce in the next chapter.
 Compile and run the code in listing 4.25. Try to pass different command-line argu-
ments to the program and see what it outputs.
 This section should have given you some idea of how you can manipulate the most
common and versatile type: the string. I’ve talked about the different parsing mod-
ules available in Nim’s standard library and showed you how one of them can be used
to parse command-line arguments. I also introduced you to the strutils module,
Listing 4.25
Parsing the flag using parseopt
Imports the parseopt module, 
which defines the getOpt iterator
Iterates over each command-line 
argument. The getOpt iterator yields 
three values: the kind of argument that 
was parsed, the key, and the value.
Checks the kind of argument that was parsed
If a simple flag with no value was 
parsed, displays just the flag name
If a flag with a value was parsed, checks if it’s 
--port and displays a specific message if it is, 
showing the port value. Otherwise, displays a 
generic message showing the flag name and value.
The command-argument parsing 
has ended, so this line does nothing.
Licensed to   
126
CHAPTER 4
A tour through the standard library
which contains many useful procedures for manipulating strings. Be sure to check out
its documentation and the documentation for the other modules later. 
4.7
Networking and the internet
The Nim standard library offers a large selection of modules that can be used for net-
working. You’ve already been introduced to the asynchronous event loop and the
asynchronous sockets defined in the asyncdispatch and asyncnet modules, respec-
tively. These modules provide the building blocks for many of the modules in the stan-
dard library’s “Internet Protocols and Support” category.
 The standard library also includes the net module, which is the synchronous
equivalent of the asyncnet module. It contains some procedures that can be used for
both asynchronous and synchronous sockets.
 The more interesting modules are the ones that implement certain internet proto-
cols, such as HTTP, SMTP, and FTP.4 The modules that implement these protocols are
called httpclient, smtp, and asyncftpclient, respectively. There’s also an
asynchttpserver module that implements a high-performance HTTP server, allowing
your Nim application to serve web pages to clients such as your web browser.
 The main purpose of the httpclient module is to request resources from the
internet. For example, the Nim website can be retrieved as follows.
import asyncdispatch
import httpclient
let client = newAsyncHttpClient()
let response = waitFor client.get("http://nim-lang.org")
echo(response.version)
echo(response.status)
echo(waitFor response.body)
4 For details on HTTP, SMTP, and FTP, be sure to view their respective Wikipedia articles.
Listing 4.26
Requesting the Nim website using the httpclient module
The asyncdispatch module defines an 
asynchronous event loop that’s necessary 
to use the asynchronous HTTP client. It 
defines the waitFor procedure, which runs 
the event loop.
The httpclient module 
defines the asynchronous 
HTTP client and related 
procedures.
Creates a new instance of 
the AsyncHttpClient type
Requests the Nim website using HTTP 
GET, which retrieves the website. The 
waitFor procedure runs the event loop 
until the get procedure is finished.
Displays the HTTP version that the 
server responded with (likely, "1.1")
Displays the HTTP status that 
the server responded with. If 
the request is successful, it 
will be "200 OK".
Displays the body of the response. If 
the request is successful, this will be 
the HTML of the Nim website.
Licensed to   
127
Summary
The code in listing 4.26 will work for any resource or website. Today, the Nim website
is served over SSL, you'll need to compile listing 4.26 with the -d:ssl flag in order to
enable SSL support.
 These modules are all fairly simple to use. Be sure to check out their documenta-
tion for details about the procedures they define and how those procedures can be
used.
 There may be protocols that the standard library misses, or custom protocols that
you’d like to implement yourself. A wide range of networking protocols has been
implemented as libraries outside the standard library by other Nim developers. They
can be found using the Nimble package manager, which you’ll learn about in the next
chapter. 
4.8
Summary
 A library is a collection of modules; modules, in turn, implement a variety of
behaviors.
 Identifiers in Nim are private by default and can be exported using *.
 Modules are imported into the importing module’s global namespace by
default.
 The from module import x syntax can be used to selectively import identifiers
from a module.
 The standard library is organized into pure, impure, and wrapper categories.
 The system module is imported implicitly and contains many commonly used
definitions.
 The tables module implements a hash table that can be used to store a map-
ping between keys and values.
 The algorithms module defines a sort procedure that can be used for sorting
arrays and sequences.
 The os module contains many procedures for accessing the computer’s filesystem.
 Web pages can be retrieved using the httpclient module.
Licensed to   
128
Package management
Today package managers have a central role in the development of software. This
was not always the case; the Comprehensive Perl Archive Network, or CPAN, was
one of the first large software repositories to have existed solely for a specific pro-
gramming language. It consists of over 150,000 modules of Perl code, making it
one of the biggest software module repositories from a single programming lan-
guage. It’s also one of the earliest examples of such a software repository; its success
has influenced many others. Today, software repositories exist for just about all pro-
gramming languages.
 A package is an abstract term given to a collection of modules; these modules may
form a library or an application. A package manager automates the process of down-
loading, installing, updating, and removing packages. Libraries contain implemen-
tations of different behavior, and can be invoked using a well-defined interface.
These implementations are stored and exposed through one or more modules.
This chapter covers
 Understanding how Nimble helps you develop 
software
 Using Nimble packages to develop software
 Creating Nimble packages and publishing them
Licensed to   
129
The Nim package manager
Software repositories distribute a number of different packages, allowing those pack-
ages to be freely downloaded. You could download packages manually, but doing so
would be tedious. For example, a package may have dependencies: other packages
that need to be installed first for the package to work correctly. Package managers
ensure that dependencies are correctly installed automatically. Figure 5.1 shows how
packages, libraries, applications, and software repositories relate to each other.
 Most programming languages have at least one package manager; some have mul-
tiple. Nim’s package manager is important because it’s a tool that gives you access to
the hundreds of open source packages contained in Nim’s package repository.
 This chapter provides an overview of Nimble, the Nim package manager, including
how to install and create packages. Be sure to also take a look at the Nimble documen-
tation: https://github.com/nim-lang/nimble.
5.1
The Nim package manager
There are many package managers in existence today, but not all of them are
designed for the same purpose. Package managers are primarily split into two catego-
ries: system-level and application-level.
 System-level package managers are typically bundled with the OS. They allow the
user to install a popular set of applications and libraries written in many different pro-
gramming languages. Application-level package managers are more specific; they
focus on libraries and applications written in a single programming language.
 Imagine you got a brand-new computer, and you’d like to watch some movies on it.
One of the most widely used applications for watching video is VLC, but it doesn’t
come preinstalled on computers. You can instruct a package manager to install VLC,
together with any missing libraries VLC needs to function. A system-level package
manager would be perfect for this.
Application package
vlc.cpp
vlc_ui.cpp
...
Library package  
ogg.h
bitwise.c
...
ogg_stream_init
ogg_stream_pagein
...
Software repository
Firefox
libogg
VLC
libzip
Figure 5.1
Comparison between packages, libraries, applications, and software 
repositories
Licensed to   
130
CHAPTER 5
Package management
VLC comes with a library called libvlc; this library allows any application to play video
with the same accuracy as VLC itself. If you wanted to make use of this library in your
Nim application, you’d need a Nim package that implements a Nim interface to that
library. Such a package would be installed via an application-level package manager.
 Figure 5.2 shows examples of some common system-level and application-level
package managers.
 Package managers also differ in the way that they distribute packages. Some dis-
tribute packages in the form of binaries, whereas others distribute the source code. In
the latter case, the packages must then be compiled on the user’s computer using a
compiler.
 Nim’s package manager is called Nimble. Nimble is an application-level package
manager, and it distributes packages in the form of source code. This is similar to
other application-level package managers such as Python’s pip and NodeJS’s npm.
Nimble is already being used by many Nim programmers, even though it’s not yet sta-
ble and there are still some features missing from it. This section will show you how
the current version of Nimble (0.7.2 as of writing) can be used to manage Nim librar-
ies and applications. Keep in mind that Nimble is evolving every day and that some of
the things mentioned in this section may change in the future. 
5.2
Installing Nimble
The good news is that you most likely have Nimble installed already. Nim installation
packages have started to include Nimble since around version 0.15.0, so if you have
Nim installed, you should have Nimble installed too.
 You can easily check whether this is the case by running nimble -v in the terminal.
If you see information about Nimble’s version, you have Nimble installed; if you see
something like “command not found: nimble,” you don’t.
 Keep in mind that, in order to install packages, Nimble may execute an external
application called Git, which you must also have installed and available in your path.
For more details, look at the Nimble installation page on GitHub: https://github.com/
nim-lang/nimble#installation. 
System-level package managers 
Application-level package managers 
Chocolatey, Steam, Cygwin 
apt-get, yum, pacman 
Homebrew, MacPorts 
Npm, Bower 
pip, EasyInstall, PyPM 
Nimble 
Figure 5.2
System-level vs. application-level package managers
Licensed to   
131
What is a Nimble package?
5.3
The nimble command-line tool
You should now have Nimble installed on your system. Running nimble in a new ter-
minal window should display a list of commands supported by Nimble. Figure 5.3
shows just a few of these.
nimble will also show the order in which commands should be passed to Nimble. A sin-
gle command is written after nimble, separated by a space. After that come the flags
and parameters passed to that command, each separated by a space. For example, to
search for any packages that relate to Linux, you can execute nimble search linux.
You can also specify a --ver flag, which will show you the available versions of each
package. Figure 5.4 shows the result of a search for “linux” with the --ver flag.
 Note the “versions:” followed by a list of two different versions in figure 5.4. Those
are the versions of the daemonize package that can be installed.
 Nimble’s command-line interface is the primary way of installing, searching for,
upgrading, and removing packages. Before I show you how to install packages,
though, let’s look at what a package actually is. 
5.4
What is a Nimble package?
Software is almost always composed of different types of files, including source code,