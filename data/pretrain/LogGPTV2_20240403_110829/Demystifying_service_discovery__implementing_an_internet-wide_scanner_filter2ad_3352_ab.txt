minuscule accuracy gains.
Table 1 lists timeout values that range from 5 to 30 sec-
onds for previous measurements studies. Given the limited
number of outstanding sockets, ﬁnite bandwidth and CPU
power, and a wide range of possible choices, it remains un-
clear how to choose timeouts to simultaneously allow for
eﬃciency and accuracy (e.g., certain busy servers respond
with a 60-second delay, but should they be captured by the
scanner?).
After settling the above problems, it is important to en-
sure that the scan will complete in such amount of time T
that produces the most relevant data without overburden-
ing local/remote network resources. Of the measurement
studies listed in Table 1, only [13] was unencumbered by
software/hardware restrictions, while for others these issues
dominated the choice of T . As such, previous measurement
studies have generally been limited to a tradeoﬀ between
small T , few servers m, large timeouts, and large scan scope.
Instead, our goal is to develop a scanner in which the re-
searcher can control T independently of all other listed pa-
rameters.
2.7 Negative Feedback
Due to the unsolicited nature of the packets sent by service
discovery measurement studies and the diversity of networks
in the Internet, it is inevitable that some targeted hosts
will take oﬀense. This often manifests itself in the form
of email/phone complaints from network administrators [5],
[11], [13], [17], [42], [43], though the literature is lacking in
details on the exact nature of complaints (e.g., frequency of
legal threats) and speciﬁc techniques for dealing with them.
In Table 1, we list three of the methods used by previ-
ous studies to mitigate complaints. The ﬁrst is the use of
a blacklist by [17], [42], [43] to exclude the networks of sen-
sitive/suspicious administrators, which generally avoids re-
peated complaints from the same network. The other two
approaches boil down to a further reduction in scope by the
omission of network/broadcast IP addresses (i.e., *.*.*.0 and
*.*.*.255) [17], [43] and preemptively blacklisting networks
before they complain (e.g., U.S. government) [13]. While
blacklisting complaining parties is undoubtedly a sound ap-
proach, no reasoning or motivating factors have been pro-
vided for the other two methods and it is unclear whether
they are indeed necessary.
3.
IRLscanner
Based on our analysis of scanning literature in the last
section, it appears that researchers interested in service dis-
covery projects are faced with scan durations on the order of
months, tying up several machines that could be dedicated
to other projects, and the likelihood of signiﬁcant negative
feedback that could easily lead to the measurement being
terminated. For example, [17] reports that TCP scans pro-
duce 30 times more complaints than ICMP scans, which has
precluded the authors from conducting them after the ﬁrst
attempt.
Assuming a ﬁxed amount of bandwidth available for scan-
ning, in this section we seek to alleviate these concerns by
Set S
F
N R
I
B
Size
4.29B
3.7B
3.27B
2.11B
Reduction Rate (Mbps) Rate (Kpps)
–
14%
24%
51%
33.4
28.8
25.4
16.4
49.7
42.8
37.8
24.4
Table 2: Scan set size, Ethernet bandwidth require-
ment, and pps rate in a 24 hour TCP SYN scan.
designing a service discovery tool we call IRLscanner that
allows for very small scan durations T , originates from a
single inexpensive host, and minimizes aggravation of net-
work administrators (both remote and local) by scanning as
politely as possible for a given T .
3.1 Scan Scope
We start by determining the scope of IRLscanner. While
ﬁrewalls and routers routinely use the Bogons list [12] to ﬁl-
ter nonsensical traﬃc (i.e., reserved and unallocated blocks),
packets destined to unadvertised BGP networks are also
dropped by the scanner’s border router, but only after un-
necessarily increasing router load and wasting scanner re-
sources. Therefore, one expects that only set B should nor-
mally produce valid results or be used for discovering hosts
responsive to unicast traﬃc. However, given that BGP ta-
bles change dramatically in the long-term [34], restricting
the scope to only routable addresses either requires a live
BGP feed or potentially allows for inaccurate representation
of the Internet in the resulting measurement.
While this is deﬁnitely a concern for slow scanners (i.e.,
T is weeks or months), our goal is to complete measure-
ments in much shorter periods (i.e., hours) during which
BGP changes can often be neglected. For fast scans, up-
dates pulled from RouteViews [46] at start time suﬃciently
approximate the routable space during the entire experi-
ment. Our analysis of BGP tables during August 2009 dis-
covered less than 0.1% diﬀerence in advertised preﬁxes over
a 10-day period, with proportionally fewer changes during
T = 24 hours used in our experiments. While for IRLscan-
ner it makes sense to only probe B, the tradeoﬀ between
scope, duration T , and BGP table accuracy must be deter-
mined on a case-by-case basis.
To gauge the potential gains from restricting the scope
to routable destinations, we determine [19], [46] the current
state of sets B, N R, and I in late August 2009 and list them
in Table 2. While previous scanners achieve a signiﬁcant
reduction (i.e., by 24%) in the number of sent packets by
omitting the reserved/unallocated space, probing only set B
removes almost one billion additional targets and doubles
the performance gains of previous work to 51%. The table
also shows the bandwidth necessary to complete the scan in
24 hours, where all 40-byte SYN packets are padded to 84-
byte minimum-size Ethernet frames, and the corresponding
pps (packets per second) rate.
To implement a scanner with scope B, it is necessary to ob-
tain a timely BGP dump from either the RouteViews project
[46] or the local border router. Given the desire for small
scan durations on inexpensive hardware, checking individual
IP addresses against a list of roughly 300, 000 preﬁxes must
be very eﬃcient. While IP checking can be accomplished
with a balanced binary tree [13] with logarithmic lookup
complexity, IRLscanner uses a 512 MB hash table, where
each bit indicates whether the corresponding IP is allowed
112… 
U 
… 
p 
(S
p 
dS
U 
(S
U 
dS
U 
(S
U 
dS
p 
(S
p 
dS
p 
(S
U 
dS
U 
(S
p 
dS
p 
(S
dS
(S
dS
(S
dS
(S
dS
(S
dS
(S
dS
(S
dS
(S
dS
next IP 
next IP 
(a) IP ends with 011
(b) IP ends with 101
256
192
1
+
k
P
I
128
64
0
0
64
48
32
16
s
m
s
P
I
e
v
i
t
c
e
f
f
e
0
0
64
128
IP
k
192
256
Figure 1: Illustration of AGT.
(a) last-octet correlation
odd
even
16
32
48
64
total source IPs m
(b) ms in (1)
or not. This ensures that checks are accomplished in O(1)
time and improves lookup speed from 923 Kpps (balanced
tree) to 11 Mpps (using a single core of a 2.2 GHz Opteron).
Given that most commodity machines have at least 1 GB
of RAM and the rest of our scanner requires only 2 MB of
main memory, this tradeoﬀ allows us to dedicate more com-
putational power to sending packets and performing other
processing as needed.
3.2 Scan Order
Despite the constant volume of scanning traﬃc in the In-
ternet [41], network administrators generally view this ac-
tivity as malicious and periodically complain to networks
that originate such traﬃc [13], [17] [42]. Furthermore, many
IDS tools [7], [51], [58] automatically generate ﬁrewall rules
against scanning hosts, whether detected locally or through
distributed collaborative systems [36], [47]. With this per-
ception in mind, researchers must ﬁrst weigh the beneﬁt
gained from performing a service discovery measurement
with the possibility of negative publicity for their institu-
tion and/or its address space being blacklisted at remote
networks.
Upon determining to proceed, these negative eﬀects can
be reduced for all involved parties by using an address per-
mutation that avoids targeting individual subnets with large
bursts of traﬃc, which often triggers Intrusion Detection
Systems (IDS) and raises concerns of malicious/illegal ac-
tivity. Since IDS predominantly operates on a per-IP basis,
additional reduction in false-alarms is possible by using mul-
tiple source IPs at the scanner host, which we discuss later in
this section. While the uniform permutation [53] is routinely
used in scanning applications, no previous paper has exam-
ined the issue of achieving maximal politeness and whether
such methods could be implemented in practice. We address
this open problem next.
For a given CIDR subnet s in the Internet, our goal is to
maximally reduce the burstiness of scan traﬃc seen by s,
which is equivalent to maximizing inter-packet delays for all
probes arriving to s. Recalling that n = 232, we deﬁne per-
mutations that return to s with a period n/|s| to be IP-wide
at s and those that achieve this simultaneously for all possi-
ble CIDR subnets to be globally IP-wide (GIW). Note that
GIW permutations spread probes to each s evenly through-
out [0, T ], which ensures that all networks are probed at a
constant rate |s|/T proportional to their size and that no s
can be scanned slower for a given value of T . This makes
GIW optimally polite1 across the entire Internet.
The simplest GIW technique, which we call an alternat-
ing gateway tree (AGT), is a binary tree of depth 32 where
1While completely refraining from scanning is even more po-
lite, it does not produce any useful service-discovery results.
Figure 2: Randomness of RLCG and eﬀectiveness of
the GIW/RR split.
target IPs reside in leaves and all edges are labeled with 0/1
bits. Traversing the tree, the scanner accumulates individ-
ual bits along the edges into the next IP. Decisions to move
left or right at internal nodes (gateways) v depend on their
states θv, which are ﬂipped during each visit to ensure that
no IP is probed twice and that packets alternate between
left/right children of each gateway. Figure 1 shows the bot-
tom four levels of some random AGT, where the tree in part
(a) generates an IP address ending with bits 011. Part (b)
of the ﬁgure illustrates the next IP generated when the scan-
ner returns to this portion of the AGT, which results in the
address ending with bits 101.
Since balanced binary trees have well-deﬁned rules for cal-
culating the oﬀset of each internal node, AGTs do not re-
quire storing child pointers. Thus, their RAM overhead is
(n−1)/8 = 512 MB needed to store tuple (θ1, . . . , θn−1) and
their computational complexity is 26 memory reads/writes
(i.e., 52 total) per generated IP (assuming depth-31 traver-
sal and 64-bit lookups that yield the ﬁrst 5 levels of the tree
in one RAM access).
Note that AGT provides the scanner with 2n−1 possible
In practice, one
GIW permutations, which is enormous.
does not require this much diversity and other GIW algo-
rithms may be suﬃcient. One reason to seek alternatives is
that AGT requires saving 512 MB during checkpointing and
transmission of the same amount of seed data to other scan-
ner hosts in distributed implementations. Another reason is
that AGT’s CPU complexity is quite high, which we reduce
in our next method.
Let bx be the lower b bits of an integer x and R(x) be the
bit-reversal function. Then, we have the following result.
Theorem 1. Given a sequence of integers {xk}n
k=1, sup-
k=1 has a full period for all b = 1, 2, . . . , 32.
pose {b(xk)}n
Then, sequence {R(32xk)}k is GIW.
Proof. Assume that subnet s has depth b in the AGT
(i.e., n/|s| = 2b) and observe that GIW patterns must visit
all remaining 2b − 1 subnets at depth b before returning to s.
In practice, this means that the permutation must exhibit
a full period in the upper b bits. Since for GIW this holds
for all s, the full period must be simultaneously maintained
at all depths 1 ≤ b ≤ 32. Reversing the bits in each IP, we
can replace this condition with a much simpler one – the full
period must hold in the lower b bits.
While there are many possible ways to construct {xk}k, an
LCG of the form xk = axk−1 +c is a natural choice due to its
computational eﬃciency and need for only a single integer
of state. To establish its suitability for Theorem 1, we note
113Bit reversal
Type
AGT
LCG Bit shifts
–
Two-byte hash
Rate (IP/sec)
State & seed
661, 247
10, 729, 920
21, 263, 889
512 MB
4 bytes
4 bytes
Table 3: Benchmark of GIW address generation.
that the conditions for achieving a full period in {xk}k with
an LCG are well-known and require that a − 1 be divisible
by 4 and c be odd [26]. We call the resulting algorithm
Reversed LCG (RLCG) and use it with a = 214, 013, c =
2, 531, 011, which are well-known constants that produce an
uncorrelated sequence of random variables (shown in Figure
2(a) for the last byte of generated IPs). Initial seed x0 can
then be used to change the scan order across multiple runs.
To eﬃciently reverse the bits, we use a 2-byte hash ta-
ble that ﬂips the order of bits in 16-bit integers. Therefore,
any 32-bit IP can be processed in two memory lookups (i.e.,
26 times faster than AGT); however, the CPU cache often
makes this operation run even faster in practice. Table 3
benchmarks IP generation of AGT, naive bit-shifts (32 shifts
down and 32 up), and the hash table technique. Observe
that RLCG with a hash table runs at double the speed of
bit-shifts and beats AGT by a factor of 32, which is slightly
faster than 26 predicted by the analysis above. In more prac-
tical terms, AGT constrains the scanner to T ≥ 108 minutes,
while hash-based RLCG generates the entire permutation in
just 3.4 minutes.
3.3 Scan Origin
While previous work has split the scan burden among m
nodes to decrease total duration [3], [5], [17], [43] or ob-
tain multiple vantage points [17], no apparent consideration
has been given to the possible eﬀect it has on the perceived
politeness of the measurement. The main objective of a po-
lite split in this paper is to maintain the GIW pattern across
scanner IPs, which requires a mechanism for not only parcel-
ing the address space to m scanning hosts without burden-
some message-passing, but also ensuring that each subnet s
sees scanner IPs in a perfectly alternating and equally-spaced
fashion (e.g., IP1, IP2, IP3, IP1, IP2, IP3, . . . ).
The rationale for using all m sources to scan each s lies in
the fact that IDS (both open-source [7], [51] and commercial