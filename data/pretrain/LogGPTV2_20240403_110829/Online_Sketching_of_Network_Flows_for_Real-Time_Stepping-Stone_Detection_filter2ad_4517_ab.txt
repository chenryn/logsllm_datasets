Flow 1
Flow 2
t
n
u
o
C
t
e
k
c
a
P
20
40
60
80
100
120
Flow 1
Flow 2
20
40
60
80
100
120
8
6
4
2
0
0
5
0
.
f
f
i
D
t
n
u
o
C
t
e
k
c
a
P
−5
0
20
40
60
Time Slot
80
100
120
−5
0
20
40
60
Time Slot
80
100
120
(a) Correlated Flows
(b) Uncorrelated Flows
Figure 1.
Packet-count vectors of a pair of correlated ﬂows (a) and a
pair of uncorrelated ﬂows (b). The upper ﬁgures plot packet-count vectors
separately whereas the lower ﬁgures are the difference between packet-
count vectors. All ﬂows last for 60 seconds and the time-slot length is
LT S = 500 ms.
detection.
Solving the real-time stepping-stone detection problem,
especially for large networks, is a challenging task as the
solution has to be:
• Memory Efﬁcient: A stepping-stone detection scheme
should consume minimal amount of memory for each ﬂow
in order to be able to process hundreds of thousands of active
connections.
• Computationally Efﬁcient: A stepping-stone detection
scheme should complete each correlated ﬂow search proce-
dure within ∆, before the subsequent search begins. There-
fore, it should employ a correlated ﬂow search algorithm
faster than O(mn).
III. SKETCH-BASED STEPPING STONE DETECTION IN
REAL-TIME
In this section, we present a real-time stepping stone
detection schem. In summary, the proposed scheme employs
an online algorithm to continuously maintain packet-timing
sketches of active ﬂows from a stream of packets. As a
result, the scheme is memory efﬁcient, since, for each ﬂow,
it keeps only a succinct sketch, which is a constant length
integer array. In addition, while maintaining ﬂow sketches,
the proposed scheme periodically performs the correlated
ﬂow search, based on the Hamming Distances between
binarized ﬂow sketches, which yields a computationally-
efﬁcient search algorithm as presented in Section III-B.
A. Flow Packet-Timing Sketch
1) Overview and Basic Idea:
In order for the proposed scheme to be efﬁcacious,
sketches of correlated ﬂows should be as similar to each
other as possible, whereas those of uncorrelated ﬂows should
be as different from each other as possible. In addition, for
efﬁciency, these sketches are required to be succinct.
Sketch Computation: One way to obtain a sketch with
such properties is to compress packet-timing characteristics
of a ﬂow using a linear transformation. A linear transfor-
mation maps an input vector from one space to another
space by projecting input vector onto a set of basis vec-
tors. The projection values, which are called the transform
coefﬁcients, highly depend on the dynamics of the input
475
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:53 UTC from IEEE Xplore.  Restrictions apply. 
transform coefﬁcients of similar input
vector. Therefore,
vectors will be also similar to each other. As a result, one
can select a small set of linear transform coefﬁcients for
each ﬂow as its sketch, and use it to distinguish between
correlated and uncorrelated ﬂows. Based on this strategy, in
this work, we compute the sketch of a ﬂow as follows: i)
We ﬁrst convert the packet-timing information of the ﬂow to
a standard vector representation, which we call the packet-
count vector. Elements of a packet-count vector, which will
be explained in the next subsection, are basically the number
of packets that
the ﬂow transmits in consecutive time-
slots. It is clear that, correlated ﬂows have similar packet-
count vectors whereas uncorrelated ﬂows have different. An
example case is illustrated in Figure 1, where the packet-
count vectors of two correlated ﬂows and the difference
between them is shown in Figure 1(a). On the other hand, the
difference between packet-vectors of two uncorrelated ﬂows
is shown in Figure 1(b). ii) Then we apply a random linear
transformation, whose basis vectors are composed of random
integers, to the packet-count vector and obtain a small set of
coefﬁcients as the sketch of the ﬂow. The resulting sketch is
an integer array and we refer this sketch as the integer-array
sketch of the ﬂow.
Efﬁcient Search for Correlated Flows: When it comes
to the correlated ﬂow search, we use binarized sketches. The
binarized (or binary) sketch of a ﬂow is nothing but the signs
of the elements of its integer-array sketch. They enable us to
efﬁciently search for the correlated ﬂows using the Hamming
Distance. The basic idea of the proposed efﬁcient search is
that although the binary sketches of two correlated ﬂows
are not exactly the same, a short random subset of their
sketch bits match exactly with high probability. Therefore,
instead of comparing the sketches of every ingress ﬂow with
that of every egress ﬂow, one can compare only the pairs
whose certain bits match with each other and thus end up
comparing pairs of correlated ﬂows, with high probability.
The details of the algorithm is given in Section III-B.
2) “Packet-Count Vector” Representation:
To a employ a linear transformation, we ﬁrst need to
represent the ﬂow’s packet-timing information as a vector.
For this purpose, we consider the time axis as a series of
non-overlapping consecutive time slots. Then, using these
time-slots, we deﬁne the packet-count vector of a ﬂow as
the number packets that the ﬂow transmits at each time-slot.
More formally, let LT S denote the length of these time-
slots forming the time axis. Then time slot t is deﬁned
as the tth time interval after an epoch (Tepoch) such that
[Tepoch + (t − 1)LT S , Tepoch + (t)LT S]. Based on these
time-slots, we can specify the packet-count vector of ﬂow
F as VF , such that VF (t) is equal to the number of packets
that ﬂow F transmits during time-slot t.
Conceptually VF is an inﬁnite length vector ranging from
t = −∞ to t = ∞. However, it is obvious that VF (t) can
476
get non-zero values only during the lifetime of ﬂow F , as
F transmits no packet before it begins or after it ends.
3) Random Linear Transformation and Integer-Array
Sketch:
After computing the packet-count vector of a ﬂow, we
apply a random linear transformation to obtain the integer-
array sketch, by projecting the packet-count vector VF onto
the k random basis vectors Bi=1,2,...,k , as follows:
CF (i) =
Bi(t)VF (t)
(1)
∞t=−∞
where the elements of random bases are random numbers
drawn from a Bernoulli distribution with p = 0.5 such that:
1
2
P r(Bi(t) = 1) = P r(Bi(t) = −1) =
(2)
Notice that, although the summation is from t = ∞ to
t = ∞, we only need to sum over the time slots during which
ﬂow F transmitted at least one packet (i.e. when VF (t) = 0).
Therefore, the coefﬁcients can be computed in real time as
the packets arrive, as explained in Section III-A6.
4) Binarizing the Integer-Array Sketch:
While continuously maintaining the integer-array sketch
of a ﬂow, we perform correlated ﬂow search based on binary
sketches, which allow us to design faster search algorithms.
For this purpose, we simply compute the binary sketch
from the signs of these coefﬁcients when needed. More
speciﬁcally the ith bit of the sketch of ﬂow F is computed
as:
SF (i) = 1 ,
0 ,
if CF (i) > 0
if CF (i) ≤ 0
5) Resistance of Binary Sketch to Timing Perturbations:
It is important for the proposed scheme that a binary
sketch stays similar even though the ﬂow encounters timing
perturbations, such as packet delays and chaff. To mathe-
matically investigate this, we consider a pair of correlated
ﬂows, namely F and F , representing two ﬂows on the
same stepping-stone chain. Since they are correlated, the
Hamming Distance between the binary sketches of F and
F  is required to be low, such that “HamDist(SF , SF )  |CF (i)|
sign(∞t=−∞ Bi(t)E(t)) = sign(CF (i)). Therefore, we
> |CF (i)|
bit-error
sign(CF (i)). And
when
only
and
only
this
can write:
occurs
P e[F,F ]
i
≤ P r
∞t=−∞
Bi(t)E(t)
Since Bi(t) values are i.i.d. Bernoulli random variables
with µ = 0 and σ2 = 1 as presented in Equation (2), one
can derive that∞t=−∞ Bi(t)E(t) is also a random variable
with µ = 0 and σ2 =∞t=−∞ E(t)2. Hence, from Equation
(7) and Chebyshev Inequality, we can write:
(7)
P e[F,F ]
i
≤ ∞t=−∞ E(t)2
|CF (i)|2