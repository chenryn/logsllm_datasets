# Deploy a Jenkins server that is configured to build Docker images
docker container run -d -p 8080:8080 -p 50000:50000 \
-v $HOME/jenkins_home:/var/jenkins_home \
-v /var/run/docker.sock:/var/run/docker.sock \
--name jenkins --rm h1kkan/jenkins-docker:lts
# Start the Docker service in the Jenkins docker container
docker container exec -it -u root jenkins service docker start
```
您会注意到这个代码块中的一些不同之处。首先是第二卷的使用。这是一种众所周知的技巧，允许容器向其主机发出 Docker 命令。这基本上允许所谓的 Docker-in-Docker。下一个区别是一个额外的 Docker 命令，它将在运行的容器中启动 Docker 服务。因为每个容器都是由一个进程启动的，所以同时运行一个 Jenkins 服务器进程和一个 Docker 守护进程需要这个额外的步骤。
一旦 Docker 服务在 Jenkins 容器中启动，您就可以创建使用和构建 Docker 映像的新 Jenkins 作业了。您可以通过在新的 Jenkins 服务器中重新创建上面的第二个示例`hello-docker-test`，自己测试一下。由于我们使用安装在`$HOME/jenkins_home`主机上的 Docker 卷来存储我们的 Jenkins 数据，这应该是您最后一次需要创建此作业。
这一切都运行得非常好，但是您可能会想起第 7 章中的“Docker Stacks”，我们有一个比使用`docker container run`命令更好的部署应用的方法，即使用 Docker Stacks。所以你想看到我们的例子被重新想象成 Docker 栈吗？我也是！好吧，那我们开始吧。
首先，使用容器停止命令停止当前的 Jenkins 容器。它将留下带有我们的 Jenkins 服务器数据的`jenkins_home`文件夹，但是如果出于某种原因，您跳过了这一章的这一部分，并且还没有创建它，下面是要使用的命令:
```
# Setup volume location to store Jenkins configuration
mkdir $HOME/jenkins_home
chown 1000 $HOME/jenkins_home
```
同样，如果您对前面的一个示例执行了这两个命令，并且您使用的是同一个 Docker 主机，则不必再次执行这两个命令，因为该文件夹已经存在并且拥有正确的所有权。
接下来，您需要为我们的 Jenkins 栈创建一个合成文件。我调用了我的`jenkins-stack.yml`并在其中输入了以下 YML 代码:
```
# jenkins-stack.yml
version: "3"
services:
  jenkins:
    image: h1kkan/jenkins-docker:lts
    ports:
       - 8080:8080
       - 50000:50000
    volumes:
       - $HOME/jenkins_home:/var/jenkins_home
       - /var/run/docker.sock:/var/run/docker.sock
    deploy:
       replicas: 1
       restart_policy:
         condition: on-failure
    placement:
      constraints: [node.role == manager]
  registry:
    image: registry
    ports:
       - 5000:5000
 deploy:
    replicas: 1
    restart_policy:
      condition: on-failure
```
您会注意到我们正在创建两个服务；一个是我们的 Jenkins 服务器，另一个是 Docker 注册表。我们将在一个即将到来的例子中使用注册服务，所以现在把它放在你的后口袋里。查看 Jenkins 服务描述，在第 7 章 *Docker Stacks* 中，当我们了解 Docker Stacks 时，没有什么是我们没有看到的。您会注意到我们的两个端口映射和上一个示例中使用的两个卷。我们将单个 Jenkins 副本限制在我们的管理器节点中。
请记住，要使用 Docker 栈，我们必须在集群模式下运行，因此如果您还没有这样做，请使用我们在第 5 章 *Docker Swarm* 中学习的`docker swarm init`命令创建您的集群。
Understand that if your swarm has more than one manager node, you will need to further confine the Jenkins replica to just the single manager that has your `jenkins_home` volume mount point. This can be accomplished with a combination of roles and labels. Alternatively, you can use a storage driver and mount a volume that can be shared among swarm managers. For simplicity, we are assuming a single manager node for our example.
现在使用栈部署命令来设置 Jenkins 应用。以下是要使用的命令示例:
```
# Deploy our Jenkins application via a Docker stack
docker stack deploy -c jenkins-stack.yml jenkins
```
一旦栈部署完毕，服务启动并运行，您就可以在端口 8080 上浏览到集群中的任何节点，并到达您的 Jenkins 服务器。此外，如果您正在重用我们前面示例中的`jenkins_home`文件夹，您将不必提供管理员密码、创建新用户和选择插件，因为与这些任务相关的所有数据都存储在`jenkins_home`文件夹中，现在由基于栈的 Jenkins 服务重用。一个更有趣的注意事项是，当您在栈应用中使用这个映像时，您不必启动 Docker 服务。奖金！
好了，我们现在有了一个甜蜜的基于栈的 Jenkins 服务，它能够使用和构建 Docker 映像。世界似乎一切正常。但有一件事可以让这一切变得更好。更好的是，我指的是更多的 Docker-y:与其使用普通的 Jenkins 代理来执行我们的构建作业，不如我们想创建一个新的、原始的 Docker 容器来执行我们的 Jenkins 作业呢？这将确保每个构建都是在干净、一致的环境中从头开始构建的。另外，它确实将 Docker 的初始级别提升了一个等级，所以我非常喜欢它。如果你想看看它是如何完成的，继续阅读。
# 参考
*   H1kkan/jenkins Docker repo:https://hub . docker . com/r/h1 kkan/Jenkins Docker/
# 为 Jenkins 构建节点使用 Docker 容器
要将 Docker 容器用于 Jenkins 构建代理，您需要对 Jenkins 配置做一些事情:
*   构建一个新的 Docker 映像，它可以充当 Jenkins 构建代理，并且能够构建 Docker 映像(当然)
*   将新映像推送到 Docker 注册表
*   关闭默认的 Jenkins 构建代理
*   为 Jenkins 安装 Docker 插件
*   配置新的云以启用 Dockerized 构建代理
# 构建 Docker 形象
我们开始吧。我们要做的第一件事是建立专门的 Docker 形象，可用于我们的 Jenkins 代理商。为此，我们将使用我们在第 3 章*创建 Docker 映像*中学习的技能来创建 Docker 映像。首先在您的开发系统上创建一个新文件夹，然后将您的工作目录更改为该文件夹。我给我的起名`jenkins-agent`:
```
# Make a new folder to use for the build context of your new Docker image, and cd into it
mkdir jenkins-agent
cd jenkins-agent
```
现在创建一个新的文件，命名为`Dockerfile`，使用你喜欢的编辑器，在里面输入下面的代码，然后保存它:
```
# jenkins-agent Dockerfile
FROM h1kkan/jenkins-docker:lts-alpine
USER root
ARG user=jenkins
ENV HOME /home/${user}
ARG VERSION=3.26
ARG AGENT_WORKDIR=/home/${user}/agent
RUN apk add --update --no-cache curl bash git openssh-client openssl procps \
 && curl --create-dirs -sSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \
 && chmod 755 /usr/share/jenkins \
 && chmod 644 /usr/share/jenkins/slave.jar \
 && apk del curl
ENV AGENT_WORKDIR=${AGENT_WORKDIR}
RUN mkdir -p /home/${user}/.jenkins && mkdir -p ${AGENT_WORKDIR}
USER ${user}
VOLUME /home/${user}/.jenkins
VOLUME ${AGENT_WORKDIR}
WORKDIR /home/${user}
```
以下是我们的新 Dockerfile 正在做的事情:在我们的`FROM`指令中，我们使用了与上面 Docker-in-Docker 示例中使用的相同的 Docker 映像，这样我们就有了一个允许我们构建 Docker 映像的基础映像。接下来，我们使用`USER`命令将当前用户设置为 root。接下来，我们创建一个名为`ARG`的用户，并将其设置为`jenkins`的值。之后，我们设置了一个名为`HOME`的环境变量，该变量为 Jenkins 用户的主文件夹提供了一个值。然后，我们再设置两个`ARGs`，一个用于版本，一个用于 Jenkins 代理的工作目录。下一个是魔法发生的地方。我们使用`RUN`命令来设置和卷曲 Jenkins`slave.jar`文件。这是作为 Jenkins 代理运行所需的位。我们还对文件夹和文件设置了一些权限，然后通过删除 curl 来清理一点。之后，我们设置另一个环境变量，这个变量为`AGENT_WORKDIR`。接下来，我们在容器中创建几个文件夹。然后，我们再次使用`USER`指令，这次将当前用户设置为我们的 Jenkins 用户。我们通过创建几个`VOLUME`实例来完善 Dockerfile，最后，我们将当前工作目录设置为 Jenkins 用户的主目录。唷！这看起来很多，但实际上并没有那么糟糕，您所要做的就是将前面的代码复制并粘贴到您的 Dockerfile 中并保存它。
现在我们已经准备好使用 Dockerfile 了，这可能是创建 git repo 并将代码保存到其中的好时机。一旦您对您的项目已经用 git 正确设置感到满意，我们就可以构建新的 Docker 映像了。以下是您将使用的命令:
```
# Build our new Jenkins agent image
docker image build -t jenkins-agent:latest .
```
它应该成功构建并创建一个标记为`jenkins-agent:latest`的本地缓存映像。
# 将新映像推送到 Docker 注册表
接下来，我们需要将新映像推送到 Docker 注册表中。当然，我们可以将其推送到我们在 hub.docker.com 的回购中，但是既然我们有一个恰好部署了 Docker 注册表的应用栈，为什么不将其用于我们的 Jenkins 代理映像呢？首先，我们需要用注册表标记我们的新映像。根据 Docker Swarm 的域名，您的标记命令将与我的不同，但对于我的示例，以下是我的标记命令的外观:
```
# Tag the image with our swarm service registry
docker image tag jenkins-agent:latest ubuntu-node01:5000/jenkins-agent:latest
```
现在映像已经在本地标记，我们可以用下面的命令把它推送到注册表；同样，根据群的域名，您的命令会有所不同:
```
# Push the Jenkins agent image to the registry
docker image push ubuntu-node01:5000/jenkins-agent:latest
```
所有这些命令都可能使用比简单使用`latest`标签更好的版本方案，但是您应该能够自己解决这个问题。随着我们的映像被构建、标记并推送到 Docker 注册表，我们准备更新我们的 Jenkins 配置以使用它。
# 关闭默认的 Jenkins 构建代理