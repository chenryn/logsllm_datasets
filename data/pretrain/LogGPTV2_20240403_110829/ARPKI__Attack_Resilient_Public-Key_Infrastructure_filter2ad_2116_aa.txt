# ARPKI: Attack-Resilient Public-Key Infrastructure

## Authors
- David A. Basin, ETH Zurich, Switzerland
- Cas J. F. Cremers, University of Oxford, UK
- Tiffany Hyun-Jin Kim, Carnegie Mellon University, USA
- Adrian Perrig, ETH Zurich, Switzerland
- Ralf Sasse, ETH Zurich, Switzerland
- Pawel Szalachowski, ETH Zurich, Switzerland

## Abstract
We present ARPKI, a public-key infrastructure that ensures certificate-related operations, such as issuance, update, revocation, and validation, are transparent and accountable. ARPKI is the first such infrastructure to systematically address requirements identified by previous research. It is co-designed with a formal model, and its core security property is verified using the Tamarin prover. We provide a proof-of-concept implementation that includes all features necessary for deployment. ARPKI efficiently handles the certification process with low overhead and without additional latency in TLS. It offers strong security guarantees, where compromising \( n-1 \) trusted signing and verifying entities is insufficient to launch an impersonation attack. Additionally, it deters misbehavior as all its operations are publicly visible.

## Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protection—Authentication; C.2.0 [Computer-Communication Networks]: General—Security and protection

## General Terms
Security

## Keywords
Public-Key Infrastructure, TLS, Certificate Validation, Public Log Servers, Formal Validation, Attack Resilience

## Permission Notice
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS'14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660298.

## 1. Introduction
In the current trust model of TLS PKI, a single compromised (or malicious) Certification Authority (CA) can issue a certificate for any domain. Such bogus certificates can go unnoticed for long periods, highlighting a significant vulnerability. The research community has proposed various approaches to mitigate this problem, including Certificate Transparency (CT) and the Accountable Key Infrastructure (AKI). While these proposals offer good starting points, they are inherently complex, requiring many interacting features to be viable. They must also meet efficiency requirements, fit existing business models, and provide improved security. However, even advanced proposals like CT and AKI are incomplete and lack formal proofs of correctness.

To ensure both completeness of features and correctness of security claims, we present ARPKI, the first co-designed model, verification, and implementation that provides accountability and security for public-key infrastructures. ARPKI offers:

- Substantially stronger security guarantees, ensuring that compromising \( n-1 \) entities at any time, where \( n \geq 3 \), is insufficient to launch an impersonation attack.
- Formal machine-checked verification of its core security property using the Tamarin prover.
- A complete proof-of-concept implementation that demonstrates efficient operation and provides all the features required for deployment.

The full implementation, formal model, security properties, and analysis tools are available [1].

### Organization
- **Section 2**: Reviews the state-of-the-art in PKI.
- **Section 3**: Motivates the properties that all PKI architectures should have.
- **Section 4**: Introduces ARPKI in detail.
- **Section 5**: Describes the modeling and formal analysis of ARPKI.
- **Section 6**: Presents the implementation and evaluation of ARPKI.
- **Section 7**: Draws conclusions.

## 2. PKI Background
Various proposals have been made to address the security issues in X.509 PKIs and reduce trust in CAs. These approaches can be classified as client-centric, CA-centric, or domain-centric.

### 2.1 Alternative Approaches
- **Client-centric approaches** empower clients to select dedicated entities to evaluate certificate correctness before accepting it. Examples include Policy Engine, Perspectives, and Convergence. While these approaches increase security, they also introduce additional latency.
- **CA-centric approaches** include standards like Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP). Short-lived certificates (SLC) are another approach, providing similar security benefits to OCSP but eliminating the need for online validation.
- **Domain-centric approaches** allow domain owners to control and protect their public keys. These include pinning-based approaches (e.g., Public Key Pinning, TACK), DNSSEC-based approaches (e.g., DANE), and log server-based approaches (e.g., Sovereign Keys, Certificate Transparency, CIRT).

### 2.2 Accountable Key Infrastructure (AKI)
AKI proposes to protect domains and clients from vulnerabilities caused by single points of failure, such as a CA's root key compromise. It distributes trust over multiple parties through checks-and-balances among independent entities, detecting misbehaving entities while efficiently handling certificate operations.

#### Entities in AKI
1. **Certification Authority (CA)**: Authenticates domains and issues X.509 certificates.
2. **Integrity Log Server (ILS)**: Maintains an Integrity Tree that logs certificates, updating it at regular intervals.
3. **Validators**: Monitor ILS operations and detect misbehavior, such as the sudden (dis)appearance of certificates.

#### Certificate Fields
- **CA_LIST**: List of trusted CAs to sign the certificate.
- **ILS_LIST**: List of trusted ILSes to register the certificate.
- **ILS_TIMEOUT**: Timeout for ILS registration confirmation.
- **CA_MIN**: Minimum number of CA signatures needed to initially register and update a certificate to ILSes.

#### Integrity Trees
Figure 2 illustrates the Integrity Tree maintained by ILSes. This tree ensures that the ILS cannot make false claims about any certificate it has stored. It is implemented as a Merkle hash tree, with leaves sorted lexicographically by domain names. The ILS updates the tree by adding new entries, replacing updated entries, and deleting revoked and expired entries. The ILS computes the new root hash for the current version of the tree, enabling efficient presence and absence proofs.

### AKI Weaknesses
AKI leaves several questions unanswered, particularly regarding the incentives for validators to continuously monitor ILS operations. ARPKI addresses these shortcomings by providing a more robust and formally verified solution.

## 3. Motivation for PKI Properties
All PKI architectures should ensure:
- **Transparency**: All certificate-related operations should be publicly visible.
- **Accountability**: Misbehavior should be detectable and traceable.
- **Efficiency**: Operations should be performed with minimal overhead and latency.
- **Security**: Strong guarantees against impersonation attacks and other security threats.

## 4. ARPKI in Detail
ARPKI is designed to meet the above properties by providing a transparent, accountable, and secure public-key infrastructure. It uses a co-designed model and formal verification to ensure the correctness of its security properties. The system is resilient to attacks, even if \( n-1 \) entities are compromised, and all operations are publicly visible, deterring misbehavior.

## 5. Modeling and Formal Analysis
ARPKI is modeled using a formal framework, and its core security property is verified using the Tamarin prover. This ensures that the system is free from logical flaws and meets the desired security guarantees.

## 6. Implementation and Evaluation
We provide a proof-of-concept implementation of ARPKI, demonstrating its efficient operation and all the features required for deployment. The implementation is evaluated in terms of performance, security, and usability, showing that ARPKI can be effectively deployed in real-world scenarios.

## 7. Conclusions
ARPKI is the first co-designed model, verification, and implementation that provides accountability and security for public-key infrastructures. It offers strong security guarantees, formal verification, and a complete proof-of-concept implementation. By addressing the limitations of existing PKI solutions, ARPKI sets a new standard for secure and efficient public-key infrastructures.