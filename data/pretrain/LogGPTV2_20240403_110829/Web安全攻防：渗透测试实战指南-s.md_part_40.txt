## Page 387
368
Web安全攻防：渗透测试实战指南
$this->load->library(*Pclzip′);
$th1s->pc1zip->Pc1F11e($f11enane);
1f ($this->pc1zip->extract(PCLZIP_OPT_PATH, $dir, PCLZIP_OPT_REPLACE_NEWER)
=θ){
((an)z-dzod,°(,μ,*, dydaus/**)uado)snd
?>
解压失败，就用exitO退出程序，后面所有的操作都不会执行（包括删除文件），这里
如果能构造一个压缩文件，可以选择解压一部分文件，但在解压未完成时将出错，
此时会新出现一个间题：WebShell被解压出来，但由于解压出错，所以程序会exitO
后面的删除操作都不会执行。利用这个方法，就可以成功上传WebShell。
利用的过程如下所示。
·注册账号，然后在上传头像时使用BurpSuite抓包。
构造一个正常的zip文件，其中1.png是图片，2.php~5.php都是php文件，如
图7-4所示。
合疆三12p·解大小为6.9k8
1-(上级目款)
名称
压缩前
型
1png
6.8 KB
X9N8X99
2php
3hp
1 KB
1 KBPHP 文件
4php
0 KB
1 KB
PHP文件
1 KB PHP 文体
a Sphp
0 KB
PHP文件
图7-4zip文件
---
## Page 389
370Web安全政防：渗透测试实成指南
在Burp Suite中，使用“Paste from file”将zip文件放到请求数据包中，如图
7-5所示，
RawParams
HeadesHex
Name
Value
POST
Host
membe
ad HTTPT.1
Langth
p/7127.0.1
18324
Origie
Up
ted-Mitt
Mozila/5.0 (Wndows NT 10.I; Wn64; x64) AppleiW
SheckwoaFlash/29.0.0.113
Pser-Agent
-Type
Accept
htp:/127.4.0. 1/me
grig, defate
Ctri+R
图7-5将zip文件放入数据包
（4）在HEX中，将最后面的5.php对应的HEX内容修改为类似的格式，如图7-6
和图7-7所示。
---
## Page 390
第7章实例分析4371
2%6
000
000#00605
图7-6原始的数据包内容
3
图7-7修改后的数据包内容
---
## Page 391
372Web安全政防：渗造测试实战指南
请求该数据后，返回结果如图7-7所示，程序返回500错误，且爆出PHP的错
误，说明程序解压缩失败了。这时在服务器的上传目录中，可以看到，部
分文件已经被解压出来了，如图7-8所示。
mber >uploadfile >member >2
VO
1.png
2.php
3.php
4.php
avatar.zip
图7-8部分文件被解压
再仔细查看解压缩文件的代码，如下所示，会发现函数extractO中使用的参数是
PCLZIP_OPT_PATH，PCLZIP_OPT_PATH，代表了压缩包将被解压到的目录。
$this->pc1zip->extract(PCLZIP_OPT_PATH, $d1r, PCLZIP_OPT_REPLACE_NEWER)
PelZip允许将压缩文件解压到系统的任意位置，参数PCLZIP_OPT_EXTRACT
DIR_RESTRICTION可用于只允许解压到指定目录，而不能解压到其他目录的情况。
这里程序存在很明显的间题，没有使用参数PCLZIP_OPT_EXTRACT_DIR
RESTRICTION，所以我们可以构造压缩文件，其中包含一个aphp的文件，当程序解
压时，会将aphp解压到上级目录。由于不能直接创建a.php的文件，所以可以通过修
改HEX来实现。
利用的过程如下所示。
新建一个压缩文件，包含1.png和2222.php两个文件，如图7-9所示。
1（2）ip-解包大小为6.9KB
1.png
2php
图7-9压缩文件
---
## Page 392
第7章实例分析
373
使用notepad++打开该压缩文件，将222.php修改为./2.php，如图7-10和图
7-11所示。
-sho
图7-10原压缩文件
/2.ph
图7-11修改后的压缩文件
使用BurpSuite发送请求后，可以看到，在上级目录下创建了一个2.php文件，
如图7-12所示。
0,
Der } uploadfile
搜索m
名称
修改日期
类型
大小
I 2
2018/3/15 19:39
文件夹
 2.php
2018/3/15 10:57
PHP 文件
1 KB
图7-12成功上传WebShell
7.1.4
添加管理员漏洞
打开CMS源码中的regin.php文件，该页面是用户注册页面，代码如下所示
/*
if(1check::validEma11($_p0ST[‘ena11′”)){
check::AlertExit（“错误：请输入有效的电子邮箱!”,-1);
)
*/
1f(1 check::CheckUser(s_PoST[‘user_name′]))(
check:：AlertExit（“输入的用户名必须是4-21字符之间的数字、字母1”，-1）；
unset($_PoST['authCode′]);
unset($_POST['paSSword_c']);
---
## Page 393
374Web安全政防：渗透测试实战指南
$_PosT[ ’real_name′] = strip_tags(trin($_posT[′real_name′ ]));
$_POST[*user_nane′] - strip_tags(trin(s_POST[’user_name′ ]));
$_POST[*nick_name′] = strip_tags(trim(s_POST['real_name′]));
$_POST[user_ip']=check::getIP();
$_PoST['submit_date']= date('Y-m-d H:1:s');
$_P0ST[′session_id'] = session_id();
1f(1empty($arrGheb['user_pass_type′]))
$_pOST[‘password’ ]=check:strEncryption($_poST[‘password’], $arrGikeb[′jamstr′]);
$ntID = $objwebInit->saveInfo($_POST,θ,fa1se, true);
‘);window.1ocation=′{$arrGweb[°wEB_RooT_pre′])/′;;
exit ();
}else {
check::AlertExit（‘注册失败’，-1);
首先通过多种判断限定用户名必须是4-21个字符之间的数字、字母，用户名不
存在非法字符等。接下来将S_POST带入到savelnfoO函数中，代码如下所示。
SintID = $objWebInit->saveInfo(S_PoST,0,false,true);
跟进savelnfoO函数，代码如下所示。
function saveInfo($arrData,$isModify=false,$isAlert=true,$isMcenter=false) {
1f($isMcenter)
SstrData = check::getAPIArray($arrData);
If(!$intUserID -
check::getAPI(‘mcenter′, 'saveInfo′,*$strData^$isModify^false"){
1f($isAlert）check::AlertExit(“与用户中心通讯失败，请稍后再试！",-1);
return B;
$arr = array();
$arr = check::SqlInjection($this->saveTableFieldG($arrData,$isModify));
1f($isModify = 0){
if(lempty($intUserID)) $arr['user_id'] = $intUserID;
If($this->insertuser($arr)){
if(lempty($intUserID)) return $intUserID;
---
## Page 394
第7章实例分析375
else return $this->lastInsertIdG();
}else{
If($blAlert)check::Alert(*新增失败");
return false;
}else{
if($this->updateUser($are) !== false){
f($isAlert)check::Alert（*修改成功1“);
else return true;
}else(
if（$b1Alert）check::Alert（“修改失败"）;
return false;
}
通过checkgetAPI调用mcenter中的saveInfoO函数（checkgetAPI的作用是通过
call_user_func_array调用mcenter.class.php中的saveInfoO函数，由于不是重点，所以未
列出代码）
找到mcenter.class.php中的savelnfoO函数，代码如下所示。
function saveInfo($arrData, $isModify=false, $isAlert=true){
$arr = check::SqlInjection($this->saveTableFieldG($arrData,$isHodify));
()feuje = Jues
if($isModify == e){
return Sthis->insertUser($arr);
Jelsef
1f($this->updateUser($arr) 1-- false){
1f($isAlert）check::Alert(*修改成功！“);
return true;
}else{
return false;
savelnfo0函数先通过check:：Sqllnjection对参数添加addslashes转义，然后带入到
Sthis->insertUser(Sarr)，此处的Sarr就是传递进来的S_POST，继续跟进insertUserO，这
---
## Page 395
376Web安全政防：渗透测试实战指南
里可以看到，代码使用REPLACEINTO插入数据，如下所示。
public function insertUser($arrData){
$strSQL - "REPLACE INTo Sthis->tablename1 (°;
$strsQL .= *"';
$strSQL .= implode(*,*', array_keys($arrData));
.（.,='10sss
.)S307A .=*105#5$
(eseges'..'..)apotdu =mosss
_（..=0sss
1f ($this->db->exec($strSQL))(
}else (
return false ;
replace into的功能跟insert的类似，不同点在于，replace into首先尝试插入数据到
表中。
如果发现表中已经有此行数据（根据主键或者唯一索引判断），则先删除此行数
据，然后插入新的数据：否则，直接插入新数据。
现在，整个注册的过程就很清晰了，存在下面这两个问题。
。使用insertVserO插入数据时传递的是S_POST，而不是固定的参数。
执行SQL语句时使用的是REPLACEINTO，而不是insert。
利用上面这两点，就可以成功注册管理员了。
利用的过程如下。
为了演示，我们先看下数据库中的数据：管理员的user_id-1（控制权的表
中指明user_id=1的用户为管理员），user_name=admin，password=123456，
如图7-13所示。
---
## Page 396
第7章实例分析4377
X
图7-13管理员信息
访问以下URL，提示注册完成。这里的重点是user_id-1，注册的时候是不
包含此参数的，此参数是手工添加的，如图7-14所示。
ngiphe
E
图7-14构造POC
再到数据库中查看数据，可以看到，管理员的用户名和密码已经被更改了，
如图7-15所示
X/
图7-15成功更改管理员的信息
---
## Page 397
378Web安全攻防：渗透测试实战指南
7.1.5竞争条件漏洞
打开CMS源码中的gift.php文件，此代码的作用是使用积分兑换商品，将获取的
参数带入到update_giftO函数中，代码如下所示。
function onadd() (