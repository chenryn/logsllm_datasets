the underlying 2D grid, and the maximum password length.
For a 5 × 5 grid and maximum length 12, the theoretical
password space has cardinality 258 [11]. This is often stated
as 58 bits for brevity, but should not be mis-interpreted as 58
bits of entropy, since passwords are far from equi-probable.
To allow veriﬁcation, the system must store the encoded DAS
passwords. To avoid storing them cleartext, a one-way function
of the password, or cryptographic hash, may be stored, as
is done with text passwords (see Section VIII). Note that
there is a many-to-one mapping from user-drawn passwords
to encoded DAS passwords; for example, all doodles drawn
entirely within one grid square are equivalent to a dot.
In summary, the DAS design does offer a theoretical space
comparable with text passwords, but the possibility that users
will prefer predictable passwords such as symmetric passwords
with few strokes [31] suggests that, as with text passwords,
the effective space will be considerably smaller. Without an
implementation and user studies, we can tell
little more.
Similarly, while a key motivation for DAS was the superior
memorability associated with images, the lack of suitable user
studies leaves as an open question how effectively this can be
leveraged in graphical authentication.
B. Other recall-based schemes
BDAS, proposed by Dunphy and Yan [32], added back-
ground images to DAS to encourage users to create more
complex passwords. In a comparison of BDAS to DAS using
paper prototypes, they reported that the background image
reduced the amount of symmetry within password images,
and led users to choose longer passwords that were similarly
memorable to the weaker DAS passwords. It is not known
whether the background images introduced other types of
predictable behaviour such as targeting similar areas of the
images or image-speciﬁc patterns. Gao et al. [33] proposed
a modiﬁcation to DAS where approximately correct draw-
ings can be accepted, based on Levenshtein distance string
matching and “trend quadrants” looking at the direction of pen
strokes. As consequences of this approximation algorithm, a
ﬁner grid may be used, but the original password must be
stored in a system-accessible manner (rather than hashed) to
allow for comparison with the user’s input.
Passdoodle [34], [35] is similar to DAS, allowing users to
TR-09-09: GRAPHICAL PASSWORDS
4
create a freehand drawing as a password, but without a visible
grid. The use of additional characteristics such as pen colour,
number of pen strokes, and drawing speed were suggested
to add variability to the doodles. Later, Govindarajulu and
Madhvanath [36] separately proposed a web-based password
manager using a “master doodle” instead of a master password.
The three Passdoodle studies focus on users’ ability to recall
and reproduce their doodles, and on the matching algorithms
used to identify similar entries. While usability metrics such
as login times or success rates are not reported, the scheme
would likely require training of the recognition algorithm
during password creation, to build an accurate model of the
password. Passdoodle passwords (the drawings themselves or
a characterization thereof) must apparently be stored in a
manner accessible to the system, as opposed to hashed, since
the recognition algorithm requires access to both original and
entered doodles to test if they are sufﬁciently similar.
Weiss and De Luca [37] proposed a similar system,
PassShapes. Passwords are translated into alphanumeric char-
acters based on 8 stroke directions, recognized at 45◦ intervals.
During login, PassShapes can be drawn in a different size or
location on the screen and still be translated into correct output
provided the stroke direction is accurate. The password space
is reduced since only 8 possible choices can be made with each
stroke, giving a theoretical password space of size similar to
PINs if the number of strokes is similar to the number of digits
in a PIN. Lab-based studies show that memorability and login
times are acceptable according to the authors, but no security
analysis has been reported.
The Pass-Go scheme (see Figure 2) designed by Tao [38]
was motivated by an expected DAS usability issue: the dif-
ﬁculty of accurately duplicating sketches whose lines cross
near (“too close” [11]) grid lines or grid line intersections.
It is named for the ancient board game Go, which involves
strategically placing tokens on the intersection points of a grid.
In Pass-Go, users draw their password using grid intersection
points (instead of grid cells in DAS). The user’s movements are
snapped to grid-lines and intersections, eliminating the impact
of small variations in the trace. Surprisingly, Pass-Go is the
only recall-based system to date for which testing in a ﬁeld
study has been reported. Results of the large study showed that
login success rates were acceptable (as judged by the study’s
authors) at 78%; no login times were reported. The theoretical
password space of Pass-Go is larger than for DAS, due to a
ﬁner grid (more squares); allowing diagonal movements (DAS
encodes only horizontal and vertical movements); and pen
colour as an additional parameter. The designers suggest using
a ﬁner grid to further increase the theoretical password space.
Users selected longer passwords and used colour, both result-
ing in greater password complexity than in DAS. Thus in Pass-
Go, some dictionary attacks (as explained in Section VIII) may
be less effective but attacks which exploit patterns [31], [39],
for example, remain a concern.
A similar scheme was proposed by Orozco et al. [40], using
a haptic input device that measures pen pressure while users
draw their password. While this is intended to help protect
against shoulder-surﬁng (an observer would have difﬁculty dis-
tinguishing variances in pen pressure), their user study showed
Fig. 2. Login screen for Pass-Go [38]
that users applied very little pen pressure and hardly lifted
the pen while drawing. The differences were so small that
the use of haptics did not increase the difﬁculty of guessing
passwords. Por et al. [41] proposed modifying Pass-Go to
include background images to aid memorability, optionally
highlighting the user’s input to facilitate password entry at
times when shoulder-surﬁng is not a threat, and adding decoy
input traces to confuse an observer.
GrIDsure [42], a commercial product, displays a 5×5 grid of
digits. For their password, users select and memorize a pattern
consisting of an ordered subset of the 25 grid squares, and
enter the corresponding digits therein using the keyboard. On
subsequent logins, digits are randomly displayed within the
grid cells and users enter the new sequence of digits found
within the cells of their memorized pattern. In a summary
of a usability study [43] posted online, the reported login
success rate exceeds 92% after 36 days. An initial security
analysis by Weber [44] reported that grIDsure passwords were
much more secure than traditional PINs, especially against
shoulder-surﬁng. Independent analysis by Bond [45] notes
several weaknesses in the scheme.
A grid-based system resembling a mini Pass-Go has also
been deployed commercially for screen-unlock on Google
Android cell phones. Rather than entering a 4-digit PIN, users
touch-draw their password on a 3 × 3 grid.
These later recall schemes offer design and understanding
that goes beyond that in DAS. In particular, BDAS suggests
that
it might be possible to inﬂuence the user to select
stronger passwords than they might otherwise. Also, the Pass-
Go variant was implemented and tested in user studies, with
results supporting its usability in practice; a comparison with
the memorability of text passwords remains to be done.
V. RECOGNITION-BASED SYSTEMS
Recognition-based systems, also known as cognometric
systems [25] or searchmetric systems [13], generally require
that users memorize a portfolio of images during password
creation, and then to log in, must recognize their images
from among decoys. Humans have exceptional ability to
recognize images previously seen, even those viewed very
TR-09-09: GRAPHICAL PASSWORDS
5
brieﬂy [46], [47]. From a security perspective, such systems
are not suitable replacements for text password schemes, as
they have password spaces comparable in cardinality to only
4 or 5 digit PINs (assuming a set of images whose cardinality
remains reasonable, with respect to usability). Recognition-
based systems have been proposed using various types of
images, most notably: faces, random art, everyday objects, and
icons. Renaud [13] discusses speciﬁc security and usability
considerations, and offers usability design guidelines focusing
on recognition-based systems.
A. Canonical Example: PassFaces (and Faces)
The recognition-based system studied most extensively to
date is PassFaces [48]. Users pre-select a set of human faces
(see Figure 3). During login, a panel of candidate faces is
presented. Users must select the face belonging to their set
from among decoys. Several such rounds are repeated with
different panels. Each round must be executed correctly for
a successful login. The original test systems involved n = 4
rounds of M = 9 images per panel, with one image per panel
from the user portfolio. The user portfolio contained exactly 4
faces, so all portfolio images were used during each login. The
cardinality of the theoretical password space for PassFaces is
M n, with M = 9, n = 4 yielding 6561 ≈ 213 passwords.
In a study with 77 users, Valentine [49] found that people
could remember their PassFaces password over extended peri-
ods of time, with login success rates between 72% and 100%
by the third attempt for various time intervals up to 5 months.
The 34-user ﬁeld study of Brostoff and Sasse [50] found mixed
results. While users made fewer login errors (95% success rate
for PassFaces), they tended to log in less frequently than users
with text passwords because the login process took too long
(although no login times are reported).
Davis et al. [51] conducted a large ﬁeld study where students
used one of two graphical password schemes to access class
material: Faces (their own version of PassFaces), and Story
(see further below). They found that users selected predictable
passwords that could be successfully guessed by attackers
with little effort, as detailed in Section VIII. To avoid this
problem, a commercial PassFaces product [48] uses system-
assigned portfolios that users memorize during an initial
training process.
None of the above studies reports password creation time.
The PassFaces corporate website [48] reports that password
creation takes 3-5 minutes for a panel of 9 faces and 5 rounds.
Dunphy et al. [52] investigated whether PassFaces could
be made less vulnerable to social engineering attacks where
attackers convince users to describe the images in their portfo-
lio. They found that in 8% of 158 login attempts, participants
could log in based on verbal descriptions of the portfolio
images. They further found that participants were less likely
(statistically signiﬁcant) to correctly identify the portfolio
image within a panel when decoys were strategically selected
to be similar to the portfolio image. Alternatively, social
engineering attacks could prompt users to take photographs
or screenshots of their images for sharing, especially since all
portfolio images are revealed with each login.
Comparing shoulder-surﬁng risks between PassFaces, text
passwords, and PINs in a lab study, Tari et al. [53] found
that PassFaces using keypad entry rather than a mouse was
signiﬁcantly less vulnerable to shoulder-surﬁng than even text
passwords or PINs. If PassFaces uses a keyboard for password
entry,
then malware attacks would need both a keystroke
logger and screen scraping software to gain enough knowledge
for password entry; with regular mouse entry, only a screen
scraper is necessary. For further resistance against shoulder-
surﬁng, Dunphy et al. [54] proposed and tested a version
of PassFaces using eye-gaze as input at a simulated ATM
are
Phishing attacks
somewhat more difﬁcult with
recognition-based systems because the system must present
the correct set of images to the user before password entry.
This can be accomplished with a man-in-the-middle (MITM)
attack, as noted in Section VIII, where the phishing site relays
information between the legitimate site and the user in real-
time; the phishing site would get the user to enter a username,
pass this information to the legitimate site, retrieve the panel
of images from that site and display these to the user on the
phishing site, then relay the user’s selections to the legitimate
site. Thus the attacker gains access to the user’s account. While
somewhat more involved than phishing attacks on recall-based
schemes, similar MITM attacks can be launched against all
recognition-based schemes discussed in this section.
Shoulder-surﬁng seems to be of particular concern in
recognition-based systems when an attacker can record or
observe the images selected by users during login. This is
especially problematic for this category of schemes because
the images selected by users are larger discrete units that
may be more easily identiﬁable and there are relatively few
images (indeed,
the theoretical password space is small).
Consequently, many recognition-based schemes have speciﬁc
mechanisms to address this threat. For example,
in many
systems, users perform some action based on the location
of their portfolio images within a panel of images, without
directly selecting their images. The variation in the presented
location of portfolio images, as determined by the system,
creates a form of challenge-response system. In such cases,
an attacker would need to observe several (ideally, many)
successful logins by a user to gather enough information to
correctly deduce sufﬁciently many portfolio images for a later
fraudulent login. Screen scraping malware would similarly
require multiple login observations. Shoulder-surﬁng resistant
approaches are often more time consuming and have additional
usability costs because they require more effort from users.
In some graphical password schemes, the system must retain
knowledge of some details of the shared secret, i.e., user-
speciﬁc proﬁle data — e.g., in recognition schemes, the system
must know which images belong to a user’s portfolio in order
to display them. This information must be stored such that
its original form is available to the system (possibly under
reversible encryption), and thus may be available to anyone
gaining access to the stored information. An attacker with
access to system-side ﬁles may gain the advantage of access
to user-speciﬁc images or equivalent identifying information.
This is true for all recognition-based systems described in this
section and may also apply to any scheme requiring that the
system retains direct knowledge of the shared secret.
TR-09-09: GRAPHICAL PASSWORDS
6
Fig. 3. PassFaces system. Left: sample panel from the original system [51].
Right: panel with decoys similar to the image from the user’s portfolio [52].
Fig. 4. Sample panel for the Story system [51].
machine. After initial “play” and “enrollment” phases, they
found that participants improved in their ability to enter their
passwords over time and that login took an average of 20
seconds for passwords consisting of 5 panels of 9 faces.
Everitt et al. [55] evaluated PassFaces for multiple password
interference in a 5 week study where users received email
prompts asking them to log on to 4 different ﬁctitious “ac-
counts” according to different schedules. Those who logged
in more frequently and those who practiced each new pass-
word individually for several days in succession were more
successful at remembering their passwords.
B. Other recognition-based schemes
Fig. 5. Screenshot of the D´ej`a Vu graphical password system [56]
Story (see Figure 4) was proposed by Davis et al. [51]
as a comparison system for PassFaces. Users ﬁrst select a
sequence of images for their portfolio. To log in, users are