# Pwn2Own Write-Up：Inductive Automation产品的漏洞利用三重奏
|
##### 译文声明
本文是翻译文章，文章原作者 thezdi，文章来源：thezdi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概述
2020年1月，在S4会议上举行了首届Pwn2Own Miami竞赛，目标是工业控制系统（ICS）产品。在比赛中，Pedro Ribeiro和Radek
Domanski的团队利用信息泄露和不安全的反序列化漏洞，成功在Inductive Automation
Ignition系统上实现了代码执行。在比赛第一天结束后，他们就赢得了25000美元的奖励。目前，这些漏洞已经可以从厂商处获得补丁程序，同时漏洞发现团队提供了以下Write-Up和演示视频。
这篇文章描述了Pedro Ribeiro（[@pedrib1337](https://github.com/pedrib1337
"@pedrib1337")）和Radek Domanski（[@RabbitPro](https://github.com/RabbitPro
"@RabbitPro")）发现的一系列Java漏洞。这些漏洞在1月份举行的ZDI Pwn2Own Miami
2020比赛中利用。所描述的漏洞存在于8.0.0 – 8.0.7（含8.0.7）版本的 Inductive Automation Ignition
SCADA产品中。厂商已经在最近修复了这些漏洞，并建议用户升级到8.0.10版本。在下面的视频中，快速介绍了所发现的漏洞：
使用默认配置的Ignition可能被未经身份验证的攻击者实现漏洞利用，一旦攻击者成功利用，将可能获得Windows SYSTEM或Linux
root权限的远程代码执行。  
在他们的漏洞利用链中，共组合利用了三个漏洞来实现代码执行，这些漏洞分别是：
1、未经授权对敏感资源的访问漏洞；
2、不安全的Java反序列化；
3、使用不安全的Java库。
本文分析的所有代码，都是通过反编译8.0.7版本的JAR文件所获得的。
## 二、漏洞详情
在深入研究漏洞之前，我们首先要介绍一下有关Ignition和/system/gateway终端的背景知识。Ignition负责侦听大量的TCP和UDP端口，因为除了其主要功能外，它还必须处理多种SCADA协议。
其中使用的主要端口是TCP 8088和TCP/TLS
8043，它们用于通过HTTP（HTTPS）协议控制管理服务器，并处理各种Ignition组件之间的通信。
有多个API终端会持续侦听该端口，但我们关注的是其中的/system/gateway。这个API终端允许用户执行远程函数调用。未经身份验证的用户仅能调用其中的几个函数，而`Login.designer()`函数就是其中之一。该函数使用包含序列化Java对象的XML与客户端进行通信。其代码位于`com.inductiveautomation.ignition.gateway.servlets.Gateway`类中。
通常，使用序列化的Java对象执行客户端-服务器（CS）通信可以导致直接的代码执行，但是在这里，这个过程并不是那么简单。在深入探讨之前，首先让我们看一下`Login.designer()`请求的内容：
        964325727
        2
            199
            en
            GB
响应如下：
                H4sIAAAAAAAAAKVUz2sTQRid/NgktbUmFlp66EH00ktyEyFCTSvFaFqFqrT04mR3spkwu7POzKbb
                IIVeitCDpSpSRVrQi1D04F9QPAiiQgv24EUPXoVevfnNbpK2eFFcyGb5vjffj/fe7vZPZEiBJkzu
                5Klr+aaiTYJ9xR2sKHfz1HZp+AAAB/58SUR+HEtqlnxVJ66iJlbEugXh4Oa9D1Ovx4biKFZBPYo6
                RCrseAplKw3cxAVfUVa4DOhiIND5f2+oe+wMLa0Mz8VycWRUUK/JXYVNVXZr/HiXCpWqWEFxaik0
                GMUpL8wQQTGjLVxlBLK9nuA1ysg0dohCpyMYw65dmFGCujZADMEZbNGpEdae4IwRU48IgAFp1onl
                M1KyGr5UDhAi76IllIAVx/52RVijRu1oyRuCe0SoxRkYKbpiIZ+pJma+HuXUkVGmsFcMPJAvp2N5
                HctfwbIOcSP9defd4J3dBIpPohOMY2sSmOKiDMrUBZF1zqzAG7sUtuhbyMA9C780FLv4P3OTN7tb
                Jb+QjqNkGRl1k1sEaDQZbrUUyh3heIJhKYHBPovUsM/Ubb3fcRmuVxtANGCSLkikaTUCz1h/9qIp
                UDbcWMPykVpbBy8vtIpvx+MIBR6Yzqhiy9Ykhnr07dfWn+iHnEKpElvAi0BlpiNeNxZh07/8YoiF
                Mj01KqRyQ4u0S6XGp3c6acPlSqvSTm3uPZxtd4mDFVBGD+hjm3hR/mD0/n7naEY7OyqcMrEgCkeY
                V/17Z7oYIKnTPJDtt8bm3GbkUITQjvmy4/hKO1t7/1zH6sSa5MJpOwmBk+ZRhjAS+lShgfk/2Q48
                X3QSEb/txNrn2c2sHGUhwboazNN/iKpweGNWf6x9fHD2G/S5iozQscExqaZ9p0rEyvbjkd5H31e7
                lbTLFUq3nQB1Bw79XBICL+qdguW9kY33+HkCxcooKWG38HBsIRkdP1myHOoCUGDweaApHO2OGJbS
                3556Yzl2bU4NJ3RvbfuY+/TLxqfgN5dVns8IBQAA
            0
        D07B61A39DAE828E35134292A70777A4
在请求和响应中，包含序列化的Java对象，这些对象传递给可以远程调用的函数。上面的示例中，展示了对带有四个参数的`com.inductiveautomation.ignition.gateway.servlets.gateway.functions.Login`类`designer()`函数的调用。
在到达`Login.designer()`之前，调用栈如下：
    com.inductiveautomation.ignition.gateway.servlets.Gateway.doPost()
    com.inductiveautomation.ignition.gateway.servlets.gateway.AbstractGatewayFunction.invoke()
    com.inductiveautomation.ignition.gateway.servlets.gateway.functions.Login.designer()
`Gateway.doPost()`
Servlet会执行一些版本和完整性检查，然后将请求发送到`AbstractGatewayFunction.invoke()`，该请求在调用`Login.designer()`之前进行解析和验证，如下所示：
    public final void invoke(GatewayContext context, PrintWriter out, ClientReqSession session, String projectName, Message msg) { 
        String funcName = msg.getArg("subFunction"); 
        AbstractGatewayFunction.SubFunction function = null; 
        if (TypeUtilities.isNullOrEmpty(funcName)) { 
            function = this.defaultFunction; 
        } else { 
            function = (AbstractGatewayFunction.SubFunction)this.functions.get(funcName); 
        } 
        if (function == null) { 
            Gateway.printError(out, 500, "Unable to locate function '" + this.getFunctionName(funcName) + "'", (Throwable)null); 
        } else if (function.reflectionErrorMessage != null) { 
            Gateway.printError(out, 500, "Error loading function '" + this.getFunctionName(funcName) + "'", (Throwable)null); 
        } else { 
            Set> classWhitelist = null; 
            int i; 
            Class argType; 
            if (!this.isSessionRequired()) { 
                classWhitelist = Sets.newHashSet(SaferObjectInputStream.DEFAULT_WHITELIST); 
                Class[] var9 = function.params; 
                int var10 = var9.length; 
                for(i = 0; i  argList = msg.getIndexedArg("arg"); 
            Object[] args; 
            if (argList != null && argList.size() != 0) { 
                args = new Object[argList.size()]; 
                for(i = 0; i 0"); 
                    } else { 
                        Serializable retVal = (Serializable)obj; 
                        Gateway.printSerializedResponse(out, retVal); 
                    } 
                } catch (Throwable var16) { 
                    Throwable ex = var16; 
                    Throwable cause = var16.getCause(); 
                    if (var16 instanceof InvocationTargetException && cause != null) { 
                        ex = cause; 
                    } 
                    int errNo = 500; 
                    if (ex instanceof GatewayFunctionException) { 
                        errNo = ((GatewayFunctionException)ex).getErrorCode(); 
                    } 
                    LoggerFactory.getLogger("gateway.clientrpc.functions").debug("Function invocation exception.", ex); 
                    Gateway.printError(out, errNo, ex.getMessage() == null ? "Error executing gateway function." : ex.getMessage(), ex); 
                } 
            } 
        } 
    }
该函数执行以下操作：
1、解析收到的消息；  
2、标识需要调用的函数；  
3、检查函数参数，确定它们是否可以安全地反序列化；  
4、确保参数的数量与目标函数的预期数量相对应；  
5、调用带有反序列化参数的函数；  
6、将响应发送回客户端。
在反序列化之前，需要检查参数，以确保它们包含“safe”对象。这一过程是通过从`com.inductiveautomation.ignition.common.Base64`调用`decodeToObjectFragile()`来完成的。该函数有两个参数：带有Base64编码对象的字符串，以及可以反序列化的被允许类列表。
    public static Object decodeToObjectFragile(String encodedObject, Set> classWhitelist) throws ClassNotFoundException, IOException { 
        byte[] objBytes = decode(encodedObject, 2); 
        ByteArrayInputStream bais = null; 