work (peachfuzz), by Michael Eddington, and Spike, by Dave Aitel, are a couple
examples that come to mind. Both include routines for quick fuzzer creation.
The fundamental idea of these kinds of tools is code reuse. There are certain
things every sufficiently complex fuzzer must be capable of doing:
146
Building and Classifying Fuzzers
• Print binary and ASCII data.
• Contain a library of anomalies to use.
• Compute checksums.
• Associate data as lengths of other data.
• Send test cases.
• Monitor the process.
Fuzzing frameworks provide these tools to users to free them to work on describ-
ing the actual protocol.
5.2.2.1
Peach
Again, one example of a fuzzing framework is Peach. Peach is a cross-platform
fuzzing framework written in Python. Peach’s main attributes include short devel-
opment time, code reuse, ease of use, and flexibility. Peach can fuzz just about any-
thing, including .NET, COM/ActiveX, SQL, shared libraries/DLLs, network
applications, web, etc.21
Let’s contrive a simple example. Suppose one wants to fuzz the password field
of some protocol. The following code is a very simplistic way to begin:
group = Group()
gen = Block([
Static('USERNAME: BOB'),
Static('PASSWORD: '),
Repeater(group, Static('B'), 2, 3),
Static('\r\n'),
])
while True:
print gen.getValue()
group.next();
Static() is used to create a fixed string within a Block(). The repeater function
is useful for building iteratively longer strings. The group and generation routines
are useful for organizing data into increasingly complex patterns.
The sample output from the above code would print:22
USERNAME: BOB
PASSWORD: BBBBBB
USERNAME: BOB
PASSWORD: BBBBBBBBBBBB
5.2
Detailed View of Fuzzer Types
147
21See the website for more details. From http://peachfuzz.sourceforge.net
22Instead of printing, an actual fuzzing would deliver this output to some application.
USERNAME: BOB
PASSWORD: BBBBBBBBBBBBBBBBBB
5.2.2.2
Fuzzled
New fuzzers and frameworks are being released all the time. Tim Brown released a
perl fuzzing framework he calls Fuzzled (version 1.0), which is similar to Peach in
that helper functions allow a wide variety of fuzzing tools to be developed. Fuzzled
contains code that helps with various heuristics, construction of particular proto-
cols, and other functions. In particular, it has support for NNTP, SMTP, IMAP,
and others.
5.2.3
Protocol-Specific Fuzzers
A full-blown protocol-specific fuzzer can be engineered for any given protocol or
application. It takes effort (and a lot of RFC reading), but the reward is strong code
coverage, which will likely lead to more discovered bugs. Typically, protocol
fuzzers are developed for a particular protocol (SIP, HTTP, LDAP, etc.) and not a
particular code base (openssh, apache, etc.). This makes them particularly useful
for baselining or performing cross-vendor auditing of particular implementations of
a given protocol. Automated result recording and reporting is ideal to mature the
testing process.
Much work has been done on protocol-specific, generation-based fuzzers.
Specifically, the Oulu University Secure Programming Group (OUSPG) has created
a tool called the Mini-Simulation Toolkit (PROTOS).23 They used a context-free
grammar to represent the protocol (language) and build anomalous test cases. The
PROTOS project has been responsible for some of the most widely publicized pro-
tocol vulnerability disclosures in recent years, including SNMP, LDAP, and SIP. For
vendor evaluations of IP applications, PROTOS has been good for creating a base-
line tool: Specific implementations of a protocol that are found to have flaws don’t
pass, and those that are bug free pass the test. They admit that this approach is likely
to have a pesticide effect: Widespread use of the tool will result in vendors fixing the
specific types of bugs the tool is programmed to look for. Therefore, it will become
less effective as the tool is run and bugs are repaired; shared knowledge (code and
techniques) becomes more and more immune to the tool. But this will happen to
every bug-finding tool that doesn’t employ randomness or isn’t updated. Internet-
working solutions have become more secure because of the work OUSPG has done.
5.2.3.1
ikefuzz
For a simple example of a home-grown protocol-specific fuzzer, consider ikefuzz.24
This tool was created a few years ago to test the ISAKMP protocol. The primary
148
Building and Classifying Fuzzers
23Rauli Kaksonen, “A Functional Method for Assessing Protocol Implementation Security,”
Technical Research Centre of Finland, VTT Publications. www.ee.oulu.fi/research/ouspg/protos/
analysis/WP2000-robustness
24Can be downloaded from www.vdalabs.com/resources
reason for this is because IKE is loaded with cryptographic routines. This fuzzer
will test this specific protocol, but nothing else.
5.2.3.2
FTPfuzz
FTPfuzz is a protocol-specific fuzzer that is designed to fuzz FTP servers. It under-
stands the protocol and can actively talk to FTP servers and determine which
commands it accepts. It is managed by a Windows GUI application, which makes
it particularly friendly to use. Furthermore, the heuristics used can be selected by
the user from within the GUI interface.
5.2.4
Generic Fuzzers
A generic fuzzer is one that can be utilized to test multiple interfaces or applica-
tions. For example, a file fuzzer that flips bits in any file type might be thought of
as generic, since it can flip bits in arbitrary file types to be consumed by a variety of
applications. However, such a fuzzer would be nonintelligent because it blindly
makes changes with no knowledge of the underlying files structure. A file fuzzer
might still be generic and receive as an initialization parameter a partial or full
description of the file type to be fuzzed; this would increase its intelligence. The file
fuzzer would be a one-off or protocol-specific tool if it can only fuzz files of one
type.
5.2.4.1
ProxyFuzz
Another example of a generic fuzzer is ProxyFuzz. This fuzzer, written in Python,
acts as a man in the middle proxy and randomly makes changes to packets as
they pass through it. It doesn’t understand anything about the underlying proto-
col, it is completely unintelligent. It can be used to fuzz the server side of the com-
munication, the client side, or both. It can also handle either TCP or UDP data.
The advantage of using a simple fuzzer like ProxyFuzz is that it can be set up in
a matter of minutes and can find quite a few bugs. Obviously, it will not perform
well against protocols that utilize checksums or challenge responses. The com-
mand line usage statement reveals exactly how simple this fuzzer actual is. It
looks like
python proxyfuzz -l  -r  -p 
[options]
[options]
-c: Fuzz only client side (both otherwise)
-s: Fuzz only server side (both otherwise)
-w: Number of requests to send before start fuzzing
-u: UDP protocol (otherwise TCP is used)
-v: Verbose (outputs network traffic)
-h: Help page
5.2
Detailed View of Fuzzer Types
149
5.2.4.2
FileFuzz
FileFuzz is a graphical Windows-based fuzzer written by Michael Sutton when he
worked for iDefense Labs. The GUI allows for the creation of fuzzed files and a way
to execute and monitor the application. During the creation phase, portions of the
initial valid file can be provided and the types of changes to those bytes can be spec-
ified. For example, all bytes, one group at a time, in a file can quickly be replaced
with the value 0xFF. Then, these files are launched in a specified application as the
command line argument. Additionally, FileFuzz comes with a monitoring tool
called crashme.exe. When FileFuzz actually launches the application, it launches it
by first calling crashme, which attaches to the target as a debugger and monitors
it for faults. The GUI displays the progress as each fuzzed file is launched, record-
ing any crashes that it discovers.
5.2.5
Capture-Replay
Most mutation or capture-replay fuzzers are generic. They operate by obtaining a
known good communication (a file, network sniff, typical arguments to a function,
etc), modifying it, and repeatedly delivering it to the target. The goal is to quickly
fuzz a new or unknown protocol; the capture provides a sort of partial interface
definition. One good thing about this approach is that if the protocol doesn’t oper-
ate in a manner consistent with the RFC, it is not a problem for mutation based
fuzzers since they don’t understand the RFC. If the capture includes this undocu-
mented capability, a mutation-based fuzzer will fuzz it, while a generation-based
fuzzer might miss the undocumented feature. As in generic fuzzers, many mutation
fuzzers can be tuned to a particular protocol, increasing its protocol awareness and
consequent code coverage. Mutation fuzzers that record results during run-time will
mature the testing process.
5.2.5.1
Autodafé
One generic capture-replay tool is known as Autodafé. Autodafé employs grey-box
techniques. The tool was created by Martin Vuagnoux25 and can be downloaded
from http://autodafe.sourceforge.net/. Helpful tutorials can also be found at this
URL. Autodafé includes automatic protocol detection with manual updating avail-
able, a large list of attack strings, and an incorporated debugger to dynamically
place weights on areas of target code that utilize external data in dangerous func-
tions. Multiplying the number of attack strings by the number of variables to fuzz
yields the complexity. By minimizing and ordering the tests, the overall runtime is
decreased. In the fuzzing field, Vuagnoux is probably the first to calculate such a
metric, even though they are simple. There is an excellent tutorial online at http://
150
Building and Classifying Fuzzers
25Martin Vuagnoux, “Autodafé: an Act of Software Torture,” 22nd Chaos Communication Con-
gress, Dec. 2005 (http://events.ccc.de/congress/2005/fahrplan/events/606.en.html). http://autodafe
.sourceforge.net
5.2
Detailed View of Fuzzer Types
151
(Text resumes on page 156)
autodafe.sourceforge.net/tutorial/index.html, which we highly recommend you
examine if you’re considering fuzzing Unix applications.
5.2.5.2
The Art of Fuzzing (TAOF)
TAOF26 is a fuzzer that builds upon the work of many others. This tool operates
by capturing a proxied session and replaying with mutated traffic. TAOF is a GUI
cross-platform Python generic network protocol fuzzer. It has been designed
for minimizing setup time during fuzzing sessions, and it is especially useful for
fast testing of proprietary or undocumented protocols.27 Here are some self-
explanatory screen shots from the website (Figures 5.1 to 5.5):
TAOF allows the user to decompose the captured packets according to the pro-
tocol specification. In this way TAOF can more intelligently add anomalies to the
captured exchange and hopefully find more bugs.
5.2.5.3
Ioctlizer
Ioctlizer28 is a two-part tool, written by Justin Seitz, that learns how a user mode
process utilizes IOCTLs to communicate with device drivers. From the test cases
that are trapped, it will fuzz the actual device. As a quick overview, an IOCTL (pro-
nounced i-oc-tel), is part of the user-to-kernel interface of a conventional operating
system. Short for “input/output control,” IOCTLs are typically employed to allow
user space code to communicate with hardware devices.
Ioctlizer is a generic IOCTL mutation (capture-replay) tool. As such, it suffers
and excels in the same way that all capture-replay tools do. This is also an example
of a one-off, because it was a quick tool designed only to fuzz IOCTLs. Mr. Seitz is
working on a more advanced tool that will enumerate all of the IOCTLS IDs via an
Immunity Debugger plug-in. Figures 5.6 to 5.11 show an example of how one
might use this tool:
In this case, the Windows calculator application (calc.exe) did not access an
IOCTL. The wireshark program did, but no errors were found. This is likely due to
three things:
1. There are no bugs to be found (probably not the case here).
2. Ten iterations were not enough to find the bug.
3. Wireshark did not access all possible IOCTLs in the limited amount of
time observed (most likely).
Thus, we see the primary weakness of mutation based systems in action here.
26http://sourceforge.net/projects/taof
27 www.theartoffuzzing.com/joomla/index.php?option=com_content&task=view&id=16&Itemid=
35
28http://code.google.com/p/ioctlizer/
152
Building and Classifying Fuzzers
Figure 5.1
Setting fuzzing points.
Figure 5.2
Starting fuzzing session.
5.2
Detailed View of Fuzzer Types
153
Figure 5.3
Adding fuzzing points.
154
Building and Classifying Fuzzers
Figure 5.4
TAOF shows a list of retrieved requests.
Figure 5.7
Output from ioctltrap.py.
Figure 5.6
Choosing the application to fuzz.
5.2
Detailed View of Fuzzer Types
155
Figure 5.5
Network forwarding settings for data retrieval.
5.2.5.4
The General Purpose Fuzzer (GPF)
Another open-source generic mutation tool for download is called the General Pur-
pose Fuzzer (GPF). The typical use is performed in the following manner:
1. Capture the network traffic to be fuzzed.
a. Be sure to save only the traffic you want by using an ethereal or wire-
shark filter.
b. Typically, this capture will be converted from the pcap format to the
.gpf format via a command like: ./GPF –C imap.cap imap.gpf
c. Optionally, a .gpf “capture” file can easily be defined by hand. For
example, the file prelogin.gpf in the directory /GPF/bin/imap was cre-
ated entirely by hand and was useful for finding (prelogin imap) bugs.
The file looks like:
156
Building and Classifying Fuzzers
Figure 5.9
Trapped IOCTLs observed by the wireshark application.
Figure 5.8
This happens when no valid IOCTL calls were observed.
Figure 5.10
Preparing to fuzz the wireshark IOCTLs.
5.2
Detailed View of Fuzzer Types
157
Figure 5.11
Finished auditing the wireshark IOCTLs.
Source:S Size:0021 Data:* OK Dovecot ready.
Source:C Size:0020 Data:02 LOGIN jared {5}
Source:S Size:0005 Data:02
Source:C Size:0007 Data:jared
Source:S Size:0005 Data:02
Source:C Size:0015 Data:03 CAPABILITY
Source:S Size:0005 Data:02
Source:C Size:0023 Data:04 AUTHENTICATE PLAIN
Source:S Size:0004 Data:+
Source:C Size:0026 Data:amFykjdAamFyZWQAamFyZWQ=
Source:S Size:0018 Data:04 OK Logged in.
Source:C Size:0030 Data:05 NOOP
04 LOGIN jared jared
Source:S Size:0005 Data:05
Source:C Size:0022 Data:06 LOGIN jared jared
Source:S Size:0005 Data:06
Source:C Size:0013 Data:07 STARTTLS
Source:S Size:0005 Data:07
Source:C Size:0011 Data:08 LOGOUT
The Source indicates which direction this communication originated
from—S is server and C is client. At fuzz time these can easily be flipped
by running GPF in the opposite mode than the capture was originally
made. It will then send “02 LOGIN jared {5},” and so on. The Size indi-
cates the amount of data. This allows for binary data to also be easily
represented in a .gpf file. Everything of Size length following the Data
tag is the data for this leg. A leg is one read or write communication of
an entire session.
2. Choose an attack type.
a. The –R simply sends random data to an IP/PORT. This is only good
for fuzzing the first “layer” of a protocol. It’s very naive/dumb, but has
found bugs.
b. The original GPF mode has four submodes: replay, buffer overflow,
format, and logic. Replay will simply replay the capture. This is useful
for demonstrating an already discovered bug, or for validating a cap-
ture. The buffer overflow submode inserts long strings at places of
your choosing, and the format attack mode inserts format string char-
acters (such as %n) in a similar manner. The logic mode is focused on
bit flipping
c. The –P or pattern matching mode is the most popular GPF mode. It
automates the best of the above attack types. Each time the capture is
replayed, attacks of all types are inserted in random positions based
on the token type. Also, and very effectively, a reordering of the cap-
ture file can occur. The –P command line requires us to supply a tok-
enizing routine that helps GPF break up the capture file. In this case
IMAP is a normal_ascii protocol. Consider the execution of GPF
against IMAP:
../GPF -P prelogin.gpf client 192.168.31.101 143 ? TCP 11223456
10000 2 auto none short normal_ascii quit
Before GPF begins fuzzing, the tokenizing output will look something
like this:
Tokenizing Captured Protocol:
Tok[1][0]: type=
ASCII_CMD, dataLen=2, 
currentTotal=2, data="02"
Tok[1][1]: type=
ASCII_SPACE, dataLen=1, 
currentTotal=3, data=" "
Tok[1][2]: type=
ASCII_CMDVAR, dataLen=5, 
currentTotal=8, data="LOGIN"
Tok[1][3]: type=
ASCII_SPACE, dataLen=1, 