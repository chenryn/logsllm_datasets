SSO and creating an account using credentials (i.e., username and
password) gets linked to the same account. This workflow verifies
whether the RP correctly merges accounts. Figure 3 depicts how we
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1778
Note that we classify the transition δ(S3,Reg(SSO,NEQ)) = S4
TABLE I: Mapping the combinations of input symbol and guards to
abstract input symbols; m is the registration method, Acurrent points
to the registered account in the current state, and Am is the account
created. We use EQ/NEQ to represent the equality/inequality of
accounts (i.e., if they are merged). For instance, Reg(SSO,EQ)
represents a move where registering an account using SSO results
in an account equal to the current state’s account (Acurrent).
Input
Guards
Reg(m)
m=Email
m=SSO∧Acurrent =undefined
m=SSO∧Acurrent =Am
m=SSO∧Acurrent(cid:54)=Am
Abstract Symbols
Reg(Email)
Reg(SSO)
Reg(SSO,EQ)
Reg(SSO,NEQ)
model and formalize the relying party’s account registration behavior.
This test is motivated by the expectation that account registration in a
relying party that supports separate authentication paths must result
in creating a single account per user (i.e., email address) regardless
of the path taken by the user. We now define a set of actions and
states we incorporate into our modelling of the registration process.
Registration Model. We use a Mealy machine to model the
registration behavior of a relying party. A Mealy machine is a finite-
state machine where the current state and current inputs determine
the output and the next state. This model can effectively represent the
registration process in a relying party since the action taken by our
system (mimicking a user action) as well as the current state dictate
the subsequent registration state. A Mealy machine M is a six-tuple
(S,S0,ΣI,ΣO,δ,λ) where S is a finite set of states, S0 ∈ S is the
initial state, ΣI is a finite set of input symbols, ΣO is a finite set of
output symbols, δ :S×ΣI →S is the transition function, and λ:S×
ΣI →ΣO is the output function. In our model the starting state is that
of a user being Not Registered. We define a state-dependent variable
Acurrent that is initially undefined and points to the created account.
We also create abstract input symbols by using combinations of input
symbol Reg and a set of guards (shown in Table I). We define the
set of output symbols{OK,Err} describing the generated output as
we move to another state. Note that in this model we only focus on
registration actions and not linking accounts or adding a password
after creation, as those actions occur within a created account.
Merging. We say that a relying party R merges accounts created
via SSO and credentials if (i) R supports another registration option
(i.e., email) in addition to SSO, (ii) when an account is already
registered over SSO, attempting to create an account through a
credential-based method using the email associated with the IdP
account will fail, and (iii) if an account was already created using
the credential-based method, signing up with SSO will access the
same account as if it was created using SSO (the green transition in
Figure 3). This definition is compatible with Facebook’s guidelines
on account merging [11]. We consider the following cases:
1)
2)
δ(δ(S0, Reg(SSO)), Reg(Email)) = S2: Register an
account by signing up via SSO, and then check whether
creating an account using credentials (namely, the IdP
email address) will generate an error stating that the
account already exits.
δ(δ(S0,Reg(Email)),Reg(SSO,EQ)) = S1: Register
an RP account using credentials. Then check whether regis-
tering over SSO using an IdP account with the same email
address will end up navigating to the same RP account.
Revoke(HALF )
/DENY
Revoke(F ULL)
/DENY
start
S3
RP Logged Out
& Active
getAccess(SSO)/GRANT
Revoke(HALF )
/DENY
getAccess(SSO)/GRANT
Revoke(F ULL)/DENY
getAccess(COOKIE)
/GRANT
getAccess(SSO)
/GRANT
S1
RP Logged In
& Active
getAccess(SSO)
/GRANT
getAccess(COOKIE)
/GRANT
S0
RP Logged Out
& Removed
Revoke(F ULL)
/DENY
S2
RP Logged In
& Removed
TABLE II: Mapping the combinations of input symbols and
guards to abstract input symbols. We use RPid to represent the
unique identifier assigned to the RP by the IdP and Active as
a set of unique identifiers whose access has not been revoked
yet by the IdP. hasAccess returns true or false depending on
whether the previously collected RPcookie provides access to the
RP. For instance, the abstract input symbol getAccess(COOKIE)
represents a move in which the RP’s cookies grant access to the
account even though RP’s access was revoked by the IdP.
Guards
Input
getAccess(RPid,RPcookie) RPid ∈ Active∧hasAccess(RPcookie)
getAccess(SSO)
RPid /∈ Active∧hasAccess(RPcookie)
getAccess(COOKIE)
RPid ∈ Active∧¬hasAccess(RPcookie) Revoke(HALF )
RPid /∈ Active∧¬hasAccess(RPcookie) Revoke(F ULL)
Revoke(RPid,RPcookie)
Abstract Symbols
Fig. 4: State machine model of RP’s access revocation.
getAccess(COOKIE)
/GRANT
(the red transition in Figure 3) as counter-intuitive behavior. The
assumption for case (1) is that accounts registered via SSO are
keyed with the IdP email address, which is also backed by our
observation that accounts created through the SSO process cannot
be re-registered using the IdP’s email address. While case (1)
is detectable using relatively simple heuristics, case (2) is more
challenging. We consider the following strategy for determining
account similarity (Acurrent = Am): we use different unique
identifiers for account registration and SSO sign up, and check
whether we observe the same identifiers in both pages.
Credential test. This procedure investigates whether the RP or
IdP allow logins using hijacked cookies. The process begins with
visiting the authentication page and verifying that the RP supports
SSO. We then attempt to log into the RP using the IdP cookies to
complete the SSO process. During the IdP authentication, if the IdP
does not ask for credentials, we mark the RP as one that does not
explicitly ask for re-authentication. This procedure also examines the
validity of RP cookies that were collected in §IV-A. Moreover, we
also examine whether explicitly asking for re-authentication using
a username and password can be disabled from the client side; this
would allow an attacker with hijacked IdP cookies to bypass this se-
curity check that requires knowledge of the IdP credentials (and also
avoid additional security checks that typically occur at login [17]).
Revocation test. This test explores the efficacy and effectiveness
of SSO access-revocation. Specifically, we assess whether revoking
access from the IdP affects the user’s access to an already-connected
relying party. Again, we model the revocation process using a Mealy
machine. We define a set of input symbols getAccess and Revoke
with two arguments RPcookie and RPid, which represent the relying
party’s cookies and its unique identification number that is assigned
by the IdP. The combinations of these input symbols with a set of
guards (shown in Table II) will determine the next state. We also
define a set of output symbols{GRANT, DENY} representing the out-
put of the taken action as we transition into another state. Figure 4 de-
picts the revocation process in relying parties. The Revoke(F ULL)
(green) transition allows a user to completely and permanently re-
voke access to the RP account, whereas the getAccess(COOKIE)
(red) illustrates incomplete revocation where the IdP revokes the
RP’s access but the RP’s authentication cookies remain valid.
The testing workflow starts from state S0 and logs into
an RP using SSO. This creates a transition from S0 to S1
1779
else if τ = type2 then
result := undefined
let {Asso,Binfo}∈A
let {Aemail,Ainfo}∈Asso
if τ = type1 then
Algorithm 1 Merge test
1: procedure MERGETEST(u,τ,A)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end procedure
end if
return result
loginWithSSO(u, Asso); register
result := HasErr(createAccount(u,{Aemail,Ainfo}))
createAccount(u, {Aemail, Binfo})
page1 := loginWithCredentials(u, Aemail)
(βid,βstate) := IsLoggedIn(u, page1, {Ainfo,Binfo})
page2 := loginWithSSO(u, Asso); register
(αid,αstate) := IsLoggedIn(u, page2, Ainfo)
if βstate∧αstate then
end if
result := IsEqual(αid,βid); unique identifiers
(δ(S0,getAccess(SSO))=S1). To test if the RP correctly responds
to access revocation, the workflow tests RP’s compliance in the
logged in (S1) and logged out (S3) states. Logging out creates a
transition to state S3 (δ(S1,Revoke(HALF ))=S3). When access
is revoked, the workflow checks whether the RP’s cookies grant
access to the RP account. If the RP is not compliant, it will create
transitions to state S2 (δ(s, getAccess(COOKIE)) = S2 for
s∈{S1,S3}), otherwise it will move to state S0. The state detection
method (§III) identifies the state after each transition. Finally, the
workflow continues testing RP’s compliance overtime while in
state S2, and if it fails it will create a transition from S2 to itself
(δ(S2,getAccess(COOKIE))=S2).
D. From Theory to Practice: Auditing Process Implementation
Here we provide an overview of how we implement the auditing
workflow in our framework, based on the modeling detailed
previously, and clarify how inputs and outputs are mapped to
SAAT’s components and how it performs the compliance tests.
Merge test workflow. Given the account merge definition
in §III-C, we implement the merge test process using SAAT’s
Register, Login, and Detection modules. Each module contains
functions representing the appropriate abstract symbols (see Table I).
For instance, the Register module defines createAccount
representing Reg(Email) which takes RP’s registration URL
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
and a set of email and registration information and creates an
account. In an SSO workflow, the registration and login processes
are the same even though they may be presented as different,
e.g., Register with SSO and Login with SSO follow the same
Single Sign-On procedure. Due to this similarity, we define the
loginWithSSO function within the Login module to represent
both Reg(SSO) and getAccess(SSO). We also define the function
loginWithCredentials which receives a URL and a set of
credentials (i.e., email and password) to facilitate the login process
for the account that was created with createAccount.
Algorithm 1 describes the implementation of the merge test,
where the MERGETEST function receives a login page URL u,
test type τ, and account information A as inputs, and returns a
boolean representing whether the RP merges an account with two
authentication paths. The type input τ accepts two inputs type1
and type2 representing the two merge cases discussed previously.
Account information A contains a set of information pertaining to
the SSO account Asso (i.e., IdP account) including the email address
Aemail and personal information Ainfo. It also contains personal
information Binfo, which is used for the type2 account creation
as well as being a unique identifier when we compare accounts
created using different authentication paths (line 15). We define
the function IsLoggedIn as part of the Detection module that
receives a URL (i.e., login URL), a web page and a set of identifiers
and returns a tuple with the detected identifiers and a boolean value
representing the web page’s state (i.e., logged in). Note that the
type1 and type2 tests are done separately with fresh accounts, such
that lines 6 and 12 are the first time the IdP is connected to the RP.
Revocation test workflow. We implement the revocation test
workflow using the Login and Detection modules, where the Lo-
gin module defines the loginWithSSO and logoutFromRP
functions to implement getAccess(SSO) and Revoke(HALF ).
Algorithm 2 shows the implemented procedure for the revocation
test, where the REVOCATIONTEST function receives a login URL
u, test type τ, and account information A and returns a boolean
representing the RP’s revocation compliance. This process first logs
into the RP using the Asso account and collects the RP cookies
(line 5). Before proceeding with the test, we examine whether
including the cookies in a new page is sufficient for obtaining
access to the account (lines 6 and 7). Next, depending on the test
type τ, REVOCATIONTEST performs session termination (logout)
or access revocation actions. The former is to examine whether the
RP correctly invalidates cookies after logging out, whereas the latter
tests the RP’s response once the IdP revokes the RP’s access. In both
scenarios, we ultimately test whether after each action, the collected
cookies will provide access to the RP account. Lastly, we leverage
the Detection module’s IsLoggedIn function to retrieve the
login status after adding the RP’s cookies to a newly created
page (line 17). If the state (α(cid:48)
stat) is true, indicating that session
termination and/or revocation actions do not invalidate cookies, the
revocation test result will be false (i.e., the RP is not compliant).
Detection. Our detection functionalities, such as the state
detection and SSO detection, are implemented in the Detection
module, which also defines the locateAuthPage function
that implements the technique for finding login or registration pages
(see §III-A). Each test workflow begins with locating the login or
registration web pages that support Single Sign-On. Next, each
retrieved URL is used in the MERGETEST and REVOCATIONTEST
as parameter u (Algorithms 1 & 2) until the test is complete (i.e.,
error free), at which point the remaining URLs are ignored.
result := undefined
let Asso∈A
let {Aemail,Ainfo}∈Asso
Acookie := collectCookies(loginWithSSO(u, Asso))
page := AddCookie(Acookie)
(αid,αstate) := IsLoggedIn(u, page, Ainfo); state detection
if αstate then
d := getDomain(u)
App ID:= getAppID(d)
removeApp(App ID); revoke permission
state) := IsLoggedIn(u, page(cid:48), Ainfo)
Algorithm 2 Revocation test
1: procedure REVOCATIONTEST(u,τ,A)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: