operations only in our correctness and security definitions; they
are not part of the core PVORM interface.
6
We define correctness of a PVORM with respect to valid update
sequences. An update sequence {u0}k
i =1 is valid for m0 if, when
M0 = (m0, . . . , m0) and Mi = f (ui , Mi − 1), then Mi is defined for
all 0 ≤ i ≤ k. A PVORM is correct if for all initial values m0 and all
update sequences {ui}k
i =1 valid for m0,
where ExpCorrect
i =1)] = 1
Pr[ExpCorrect
(λ, n, m0, {ui}k
Experiment ExpCorrect
(λ, n, m0, {ui}k
i =1) is defined as
(λ, n, m0, {ui }k
i =1):
$←− Init(1λ, n, m0, U )
(pk, sk, C0)
if Read(sk, C0) (cid:44) M0, return false
for i = 1 to k :
(cid:102)
(Ci, ei, proof i )
if
$←− Update(sk, ui, Ci−1)
(cid:103)
(Read(sk, Ci ) (cid:44) Mi ) ∨ (Dec(sk, ei ) (cid:44) ui )
∨ ¬Ver(pk, Ci−1, Ci, ei, proof i )
return false
return true
with {M0, . . . , Mk} defined as above. In other words, the PVORM
is correct if Update correctly transforms C as defined by f and Ver
verifies these updates.
Obliviousness. Solidus requires a structure that can realize ORAM
guarantees in a new setting against even an adaptive adversary. Intu-
itively, we require the PVORM to guarantee that any two adaptively-
chosen valid update sequences result indistinguishable output. For-
mally, we say that a PVORM is oblivious if for all PPT adversaries
A, there is a negligible negl(λ) such that for all n ∈ N, m0, and U ,
(cid:102)
(cid:12)(cid:12)(cid:12)(cid:12) Pr
ExpObliv
(cid:102)
(0, A, λ, n, m0, U ) = 1
(1, A, λ, n, m0, U ) = 1
− Pr
ExpObliv
(cid:103)
(cid:103)(cid:12)(cid:12)(cid:12)(cid:12) ≤ negl(λ)
where ExpObliv
(b, A, λ, n, m0, U ) is defined by
Experiment ExpObliv
(b, A, λ, n, m0, U ):
$←− Init(1λ, n, m0, U )
(pk, sk, C )
return AOb,sk,C (·,·) (1λ, pk, C )
where Ob,sk,C (·,·) is a stateful oracle with initial state S ← C. On
input (u0, u1), Ob,sk,C executes (C′, e, proof )
$←− Update(sk, ub , S ),
updates S ← C′, and returns (C′, e, proof ). The experiment aborts
if any C′ is ever undefined.
This definition is an adaptive version of those presented in the
ORAM literature [55, 57, 62].
Public Verifiability. The final piece of our security definition is
that of public verifiability. Intuitively, we require that each update
produce a proof that the update performed was valid and is the
one claimed. Formally, a PVORM is publicly verifiable if for all PPT
adversaries A,
Pr[ExpPubVer
(A, λ, n)] ≤ negl(λ)
···
···
·
·
·
· · ·
···
· ···
·
·
Stash
· · ·
Modify
cipher
e
Buckets
Fixed
block
Figure 2: An update for a Circuit ORAM-based PVORM with buck-
ets of size 2. Colors indicate the blocks involved in each operation
of the read-modify-write structure. Read moves one block from
the read path (shaded) into the distinguished fixed block. Then
modify combines it (homomorphically) with the modify ciphertext
(dashed). Finally write evicts the resulting value into the tree along
two eviction paths (thick bordered).
where ExpPubVer
Experiment ExpPubVer
(A, λ, n) is defined as
(A, λ, n):
$←− Init(1λ, n, _, _);
(pk, sk, _)
(C, C′
return Ver(pk, C, C′
, e, proof )
∧(cid:16)
$←− A(1λ, n, pk, sk);
, e, proof )
f (Dec(sk, e ), Read(sk, C )) (cid:44) Read(sk, C′
(cid:17)
)
This corresponds to the soundness of the ZK-proof that an update
was performed correctly.
4.2 Solidus Instantiation
In Solidus we instantiate a PVORM by combining the structure of
Circuit ORAM [62] with several GSPs. Circuit ORAM places data
blocks into buckets organized as a binary tree. It performs updates
by swapping pairs of blocks along paths in that tree. This struc-
ture leads to good performance for two reasons: updates require
logarithmic work in the number of accounts, and pairwise swaps
of public-key ciphertext admit efficient ZK-proofs of correctness.
Figure 2 shows how Solidus’s PVORM is structured and updated.
Each data block holds an account’s unique identifier and balance.
This pair of values must move in tandem as blocks are shuffled,
so Solidus employs a verifiable swap algorithm for El Gamal ci-
phertexts [33] augmented to swap ordered pairs of ciphertexts (see
Appendix A.4).
Solidus constrains each update to modify one account balance
and requires that balances remain in a fixed range [0, N ]. To make
updates publicly verifiable, a bank first moves the desired account
to a deterministic fixed block by swapping that position with each
block along the Circuit ORAM access path. Next the bank updates
the account balance and generates a set inclusion proof on the re-
sulting ciphertext to prove it is in the legal range (see Appendix A.5).
Finally, the bank performs Circuit ORAM’s eviction algorithm to
reinsert the updated account. This again requires swapping the
fixed block with a set of tree paths.
7
In Appendix B we concretize this construction and prove that it
is correct, oblivious, and publicly verifiable.
Stash Overflow. Circuit ORAM assumes a stash of bounded size,
but data loss is possible if the stash overflows, resulting in a proba-
bilistic definition of correctness; correct behavior occurs only when
data is not lost. Since the probability of data loss is negligible in the
size of the stash, the definition is reasonable for the setting.
In Solidus the stash must be placed on the ledger, so to prevent
leaking information we also bound the stash size. Data loss is,
however, catastrophic no matter how infrequent. When the stash
would overflow, instead of losing data we insert one account deeper
into the tree. This insertion is public, so it does leak that regular
eviction was insufficient as well as the location of a single account
(though not the account’s identity).
Solidus inherits the stash overflow probability of Circuit ORAM,
which is negligible in the stash size [62]. As we show in Section 7,
the PVORM update performance is linear in the stash size, giving
Solidus a direct performance-privacy trade-off. Pleasantly, modest
stash sizes make overflow exceedingly unlikely. With buckets of
size 3, a stash of size 25 reduces overflow probability to near 2−64.
5 SOLIDUS PROTOCOL
We now present the Solidus protocol. This construction relies heav-
ily on cryptographic primitives that we describe in Appendix A.
We make this choice to simplify the explanation and leave abstract
operations with several instantiations—such as range proofs.
Bank State. The state of a bank Bi consists of an encryption
key pair (ePKi , eSKi ), a signing key pair (sPKi , sSKi ), and a set of
accounts. Each account Uj has a unique account identifier and a
balance. For simplicity, we use Uj’s public key pkj
as its identifier.
Each bank maintains its own PVORM, updated on every transac-
tion, containing the information of each of its accounts. Section 4.2
describes the PVORM structure.
Requesting Transactions. As Solidus is bank-intermediated, Us
at Bs must send a request to Bs in order to send $v to Ur at Br .
The request consists of:
• A unique ID txid
• Enc(ePKs , $v), $v encrypted under Bs’s public key
• Enc(ePKr , pkr ), a ciphertext of Ur ’s ID under Br ’s public key
• A hidden-public-key signature signed with sks (see Appendix A.3).
On receipt of a request, Bs must validate the request—check that
txid is globally unique and 0 ≤ $v ≤ $bs—and initiate the transac-
tion settlement process.
Settling Transactions. Figure 3 shows the structure of settling a
transaction. Bs generates a proof that $v ≥ 0, reencrypts $v under
ePKr , and sends (txid, Enc(ePKr , $v), Enc(ePKr , pkr )) to Br . Then
both banks (concurrently) update their respective PVORMs, sign
their updates, and post all associated proofs and signatures onto
the ledger. Once the full transaction is accepted by the ledger, the
assets have been transferred and the transaction has settled.
Transaction IDs. To prevent replay attacks, Solidus includes a
globally unique ID with each transaction. This ID could simply
be a random bit string (eg., a GUID), but then verification would
Transaction from Us to Ur
Bs
Br
Us
Request
Verify &
Prepare
PVORM
Update
Sign
PVORM
Update
Sign
...
Settle
...
Ledger
i
T
m
e
Figure 3: The lifecycle of a transaction in Solidus. An arrow from
one operation to another means the second depends on the first.
Note that Ur does not appear. The receiving user plays no role in
settling transactions.
require the ID of every transaction over the lifetime of the system.
To avoid this growing cost, Solidus uses a two-part transaction ID:
a timestamp and a random number. Transactions are only valid
within a time window T∆. If txid = (T , id), the transaction is only
valid at time Tnow if Tnow−T∆ < T < Tnow. This allows verification
to only store IDs for T∆ and still properly prevent replay attacks.
Opening and Closing Accounts. Banks are constantly opening
new accounts, so Solidus must support this. To create an account,
bank Bi must insert the account into its PVORM. Our construction
makes this simple. Bi publishes the new ID with a verifiable en-
cryption of the ID and balance 0. It then inserts this ciphertext pair
into its PVORM by replacing a dummy value. To close an account
Bi simply publicly verifies the identity of an account and replaces
it in the PVORM with a dummy value.
5.1 FLedger-Hybrid Functionality
For simplicity we define the Solidus protocol, ProtSol, using a trust
initializer and an idealized ledger. We could instantiate the trusted
initializer using existing PKI systems and, as mentioned above,
Solidus is agnostic to the ledger implementation so we wish to
leave that abstract. We present the trusted initializer FInit in Figure 4
and the ledger FLedger in Figure 5. Throughout the protocol, users
employ hidden-public-key signatures (see Appendix A.3) and banks
employ Schnorr signatures [16, 54], denoted (sGen, Sign, sVer).
The FLedger functionality has two operations: posting a com-
pleted transaction and aborting an in-progress transaction. The
need for the first is obvious; the ledger is the authoritative record
of transactions and is responsible for their verification. The second
helps guard against malicious activity. As we see below, processing
a transaction from Us requires bank Bs to send its PVORM update
to Br prior to posting the transaction to the ledger, but Br may
Figure 4: Solidus ideal initializer with banks {Bi} and users {Ui}.
(cid:20)(cid:40)
(cid:41)k
(cid:40)
(cid:21)
(cid:41)n
i =1
(cid:40)
(cid:20)
λ,
Bi
(cid:41)k
i =1,
(cid:40)
Ui
(cid:21)
(cid:41)n
i =1
FInit
Init:
$←− hGen(1λ )
for i ∈ [1, n]:
Generate key pair (pki, ski )
send pki to each user and bank and (pki, skk ) to Ui
for i ∈ [0, k]:
Generate key pair (sPKi, sSKi )
(ePKi, eSKi, Ci )
send (“initBank”, ePKi, sPKi, Ci ) to each user and bank
send all five values to Bi
$←− Init(1λ, |Bi |, 0, U )
$←− sGen(1λ )
Bi
i =1,
Ui
FLedger
Init: TXID = ∅ and LEDGER = ϵ
On receive (“approveRecvTxn”, txid, txn):
assert txid (cid:60) TXID
Parse txn → (Bs , Br , txdatas , σs , txdatar , σr )
assert sVer(Bs , txdatas , σs ) ∧ sVer(Br , txdatar , σr )
∧ VerTxn (Bs , Br , txn, LEDGER[Bs , Br ])
TXID ← TXID ∪ {txid}
LEDGER ← LEDGER ∥ (txid, txn)
broadcast (“postTxn”, txid, txn) to all banks
On receive (“abortTxn”, abort) from B:
Parse abort → (txid, (C, e, proof ), pf ⋆)
assert txid (cid:60) TXID
assert Ver(ePK, LEDGER[B], C, e, proof )
assert pf ⋆ proves e is a no-op
TXID ← TXID ∪ {txid}
LEDGER ← LEDGER ∥ (abort)
broadcast (“abortTxn”, abort) to all banks
Figure 5: Solidus ideal ledger with banks {Bi} and users {Ui}.
LEDGER[Bs , Br ] denotes the most recent PVORM states for each
bank in LEDGER, and VerTxn verifies all proofs associated with a
given transaction, which requires the public keys and preceding
PVORM state of each bank involved.
never reply. With no abort operation, Bs has two options: wait for
a reply—causing a DoS attack if none arrives—or proceed as if the
transaction were never initiated. In the second case, Br can learn
with high probability whether Us participates in future transac-