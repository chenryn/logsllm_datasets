### Comprehensive Fixes to Country-Code Top-Level Domain Handling

Comprehensive fixes for handling country-code top-level domains (ccTLDs) have been implemented in all modern browsers over the past four years. However, as of this writing, these fixes have not been backported to Internet Explorer 6 and 7, and it is unlikely that they ever will be.

**NOTE:** To add insult to injury, the Internet Assigned Numbers Authority (IANA) has introduced several new top-level domains (e.g., .int and .biz) in recent years and is considering a proposal to allow arbitrary generic top-level domain registrations. If this proposal is adopted, cookies may need to be redesigned from scratch.

### The Unusual Danger of “localhost”

One immediate consequence of domain-level scoping of cookies is that delegating any hostnames within a sensitive domain to an untrusted or vulnerable party can compromise the confidentiality and integrity of cookie-stored credentials, and consequently, any other information handled by the targeted application.

In 2008, Tavis Ormandy discovered a less intuitive but more serious issue: the port-agnostic behavior of HTTP cookies. A common administrative practice is to add a "localhost" entry to a domain and point it to 127.0.0.1. This practice is widespread, as illustrated by the following resolver tool output:

- `localhost.microsoft.com` has address `127.0.0.1`
- `localhost.ebay.com` has address `127.0.0.1`
- `localhost.yahoo.com` has address `127.0.0.1`
- `localhost.fbi.gov` has address `127.0.0.1`
- `localhost.citibank.com` has address `127.0.0.1`
- `localhost.cisco.com` has address `127.0.0.1`

This practice is a security risk because it places HTTP services on the user’s own machine within the same domain as the rest of the site. More importantly, it includes services that look like HTTP but are not designed to be exposed to the internet. These services are often not kept up-to-date, making them vulnerable. For example, a printer-management service provided by CUPS (Common UNIX Printing System) could execute attacker-supplied JavaScript in the context of `example.com` if invoked via:

```
http://localhost.example.com:631/jobs/?[...]
&job_printer_uri=javascript:alert("Hi mom!")
```

The IP address `127.0.0.1` is reserved for loopback interfaces, meaning any attempt to connect to it routes back to the services running on the user's machine. While the vulnerability in CUPS can be fixed, there are likely many other insecure local services on all operating systems, such as disk management tools and antivirus status dashboards. Introducing entries pointing back to `127.0.0.1` ties the security of cookies within your domain to the security of third-party software, which is generally a bad idea.

### Cookies and “Legitimate” DNS Hijacking

The risks associated with the domain-scoping policy for cookies extend beyond `localhost`. Another unintended interaction is related to the practice of some ISPs and DNS service providers hijacking domain lookups for nonexistent hosts. Instead of returning the standard `NXDOMAIN` response, these providers falsify records to resolve the name to their own site, which then provides unsolicited, paid contextual advertising. This practice, while claimed to offer a more user-friendly browsing experience, is primarily motivated by financial gain.

ISPs that have engaged in this practice include Cablevision, Charter, Earthlink, Time Warner, Verizon, and many others. Unfortunately, this approach not only raises ethical concerns but also creates substantial security risks. If the advertising site contains script-injection vulnerabilities, an attacker can exploit them in the context of any other domain by accessing the vulnerable functionality through an address like `nonexistent.example.com`.

For example, in 2008, Dan Kaminsky discovered and publicized a cross-site scripting vulnerability on pages operated by Earthlink. Such vulnerabilities can be found in hastily designed advertising traps with relative ease.

### Plug-in Security Rules

Browsers do not provide a uniform and extensible API for plug-in developers to enforce security policies. Each plug-in decides its own rules and how to implement them, leading to inconsistencies. This disconnect can be dangerous. In Chapter 6, we discussed how plug-ins often rely on inspecting the JavaScript `location` object to determine the origin of their hosting page, which forced browser developers to restrict the ability of JavaScript programs to tamper with their runtime environment.

Another common source of incompatibilities is the interpretation of URLs. For example, in 2010, a researcher discovered that Adobe Flash had trouble with the following URL:

```
http://example.com:PI:EMAIL/
```

The plug-in decided that the origin of any code retrieved through this URL should be set to `example.com`, but the browser would retrieve the data from `bunnyoutlet.com` instead. While this specific bug is now fixed, similar vulnerabilities can be expected in the future.

### Adobe Flash

Adobe Flash's security model underwent a major overhaul in 2008, making it reasonably robust. Each loaded Flash applet is assigned an SOP-like origin derived from its originating URL and is granted permissions comparable to those of JavaScript. Specifically, each applet can load cookie-authenticated content from its originating site, load constrained datatypes from other origins, and make same-origin XMLHttpRequest-like HTTP calls through the URLRequest API.

On top of this baseline, three flexible but easily misused mechanisms permit further modification of this behavior:

- **AllowScriptAccess parameter**: Controls an applet’s ability to use the JavaScript ExternalInterface.call(...) bridge. Possible values are `always`, `never`, and `sameorigin`.
- **AllowNetworking parameter**: Restricts an applet’s permission to open or navigate browser windows and make HTTP requests to its originating server. Values are `all` (default), `internal`, and `none`.
- **AllowFullScreen parameter**: Controls whether an applet can go into full-screen rendering mode. Values are `true` and `false` (default).

### Security.allowDomain(...)

The `Security.allowDomain(...)` method allows Flash applets to grant access to their variables and functions to JavaScript code or other applets from different origins. This should be used cautiously, as once such access is granted, maintaining the integrity of the original Flash execution context becomes challenging. The `allowInsecureDomain(...)` method is also available for compatibility with pre-2003 semantics.

### Cross-Domain Policy Files

Flash applets can instruct their runtime environment to retrieve a security policy file from an almost arbitrary URL using `loadPolicyFile(...)`. This XML-based document, usually named `crossdomain.xml`, expresses consent to cross-domain, server-level access. The syntax is self-explanatory and may look like this:

```xml
<cross-domain-policy>
  <allow-access-from domain="*.example.com" />
</cross-domain-policy>
```

Poorly configured `crossdomain.xml` policies are a significant security risk. It is a very bad idea to specify `allow-access-from` rules that point to any domain you do not fully trust. Specifying `"*"` as a value is equivalent to executing `document.domain = "com"`, which is highly insecure.

### Policy File Spoofing Risks

Prior to 2008, Flash used a lax policy parser, which ignored MIME types and HTTP redirects when processing `loadPolicyFile(...)` files. This made even hosting a valid, user-supplied JPEG image a security risk. After the revamp, the defaults are still not perfect, but improvements have been made. Adobe introduced meta-policies, hosted at `/crossdomain.xml`, to mitigate these issues. A meta-policy can specify sitewide restrictions, such as `master-only` or `by-content-type`.

### Microsoft Silverlight

Microsoft Silverlight borrows heavily from Flash, with most differences being nomenclature. Silverlight uses the same-origin-determination approach, substitutes `allowScriptAccess` with `enableHtmlAccess`, replaces `crossdomain.xml` with `clientaccesspolicy.xml`, and provides a `System.Net.Sockets` API instead of `XMLSocket`. The similarities are striking, down to the list of blocked request headers for the `HttpWebRequest` API, which even includes `X-Flash-Version` from the Adobe spec.

### Java

Java, now owned by Oracle, is a plug-in that has fallen out of favor. Its security architecture has not received much scrutiny in the past decade, but its large installed base makes it difficult to ignore. Java’s `java.net.HttpURLConnection` class permits credential-bearing HTTP requests to be made to an applet’s originating website, but the "originating website" is understood as any website hosted at a particular IP address. This model undoes the isolation between HTTP/1.1 virtual hosts, which is strongly enforced by the same-origin policy, HTTP cookies, and other browser security mechanisms.

Further, the `java.net.URLConnection` class allows arbitrary request headers, including `Host`, to be set by the applet, and the `Socket` class permits unconstrained TCP connections to arbitrary ports on the originating server. These behaviors are generally frowned upon in the browser and other contemporary plug-ins.

Origin-agnostic access from the applet to the embedding page is provided through the `JSObject` mechanism, controlled by the `mayscript` attribute in the `<EMBED>`, `<OBJECT>`, or `<APPLET>` tags. However, the `DOMService` mechanism, which is not supported in Firefox and Opera, gives applets largely unconstrained access to the embedding page.

### Coping with Ambiguous or Unexpected Origins

Most security policies and consent isolation mechanisms depend on a well-formed, canonical hostname. When this information is not available or presented in an unexpected form, things can get problematic. For example, due to the failure to account for IP addresses in HTTP cookies and the same-origin policy, almost all browsers historically permitted documents loaded from `http://1.2.3.4/` to set cookies for a "domain" named `*.3.4`. Adjusting `document.domain` in a similar manner would work as well.