ally set cookies for *.com.pl.) Comprehensive fixes to country-code top-level
domain handling have shipped in all modern browsers in the past four years,
but as of this writing they have not been backported to Internet Explorer 6
and 7, and they probably never will be.
NOTE To add insult to injury, the Internet Assigned Numbers Authority added a fair number
of top-level domains in recent years (for example, .int and .biz), and it is contemplat-
ing a proposal to allow arbitrary generic top-level domain registrations. If it comes to
this, cookies will probably have to be redesigned from scratch.
The Unusual Danger of “localhost”
One immediately evident consequence of the existence of domain-level scop-
ing of cookies is that it is fairly unsafe to delegate any hostnames within a sen-
sitive domain to any untrusted (or simply vulnerable) party; doing so may
affect the confidentiality, and invariably the integrity, of any cookie-stored
credentials—and, consequently, of any other information handled by the tar-
geted application.
So much is obvious, but in 2008, Tavis Ormandy spotted something far less
intuitive and far more hilarious:5 that because of the port-agnostic behavior of
HTTP cookies, an additional danger lies in the fairly popular and convenient
administrative practice of adding a “localhost” entry to a domain and having
it point to 127.0.0.1.* When Ormandy first published his advisory, he asserted
that this practice is widespread—not a controversial claim to make—and
included the following resolver tool output to illustrate his point:
localhost.microsoft.com has address 127.0.0.1
localhost.ebay.com has address 127.0.0.1
localhost.yahoo.com has address 127.0.0.1
localhost.fbi.gov has address 127.0.0.1
localhost.citibank.com has address 127.0.0.1
localhost.cisco.com has address 127.0.0.1
Why would this be a security risk? Quite simply, it puts the HTTP services
on the user’s own machine within the same domain as the remainder of the
site, and more importantly, it puts all the services that only look like HTTP in
the very same bucket. These services are typically not exposed to the Internet,
so there is no perceived need to design them carefully or keep them up-to-
date. Tavis’s case in point is a printer-management service provided by CUPS
(Common UNIX Printing System), which would execute attacker-supplied
JavaScript in the context of example.com if invoked in the following way:
http://localhost.example.com:631/jobs/?[...]
&job_printer_uri=javascript:alert("Hi mom!")
* This IP address is reserved for loopback interfaces; any attempt to connect to it will route you
back to the services running on your own machine.
152 Chapter 9
The vulnerability in CUPS can be fixed, but there are likely many other
dodgy local services on all operating systems—everything from disk manage-
ment tools to antivirus status dashboards. Introducing entries pointing back
to 127.0.0.1, or any other destinations you have no control over, ties the secu-
rity of cookies within your domain to the security of random third-party soft-
ware. That is a good thing to avoid.
Cookies and “Legitimate” DNS Hijacking
The perils of the domain-scoping policy for cookies don’t end with localhost.
Another unintended interaction is related to the common, widely criticized
practice of some ISPs and other DNS service providers of hijacking domain
lookups for nonexistent (typically mistyped) hosts. In this scheme, instead of
returning the standard-mandated NXDOMAIN response from an upstream
name server (which would subsequently trigger an error message in the
browser or other networked application), the provider will falsify a record to
imply that this name resolves to its site. Its site, in turn, will examine the Host
header supplied by the browser and provide the user with unsolicited, paid
contextual advertising that appears to be vaguely related to her browsing
interests. The usual justification offered for this practice is that of offering a
more user-friendly browsing experience; the real incentive, of course, is to
make more money.
Internet service providers that have relied on this practice include
Cablevision, Charter, Earthlink, Time Warner, Verizon, and many more.
Unfortunately, their approach is not only morally questionable, but it also
creates a substantial security risk. If the advertising site contains any script-
injection vulnerabilities, the attacker can exploit them in the context of any
other domain simply by accessing the vulnerable functionality through an
address such as nonexistent.example.com. When coupled with the design of
HTTP cookies, this practice undermines the security of any arbitrarily tar-
geted services on the Internet.
Predictably, script-injection vulnerabilities can be found in such hastily
designed advertising traps without much effort. For example, in 2008, Dan
Kaminsky spotted and publicized a cross-site scripting vulnerability on the
pages operated by Earthlink.6
All right, all right: It’s time to stop obsessing over cookies and move on.
Plug-in Security Rules
Browsers do not provide plug-in developers with a uniform and extensible
API for enforcing security policies; instead, each plug-in decides what rules
should be applied to executed content and how to put them into action. Con-
sequently, even though plug-in security models are to some extent inspired
by the same-origin policy, they diverge from it in a number of ways.
This disconnect can be dangerous. In Chapter 6, we discussed the ten-
dency for plug-ins to rely on inspecting the JavaScript location object to deter-
mine the origin of their hosting page. This misguided practice forced browser
developers to restrict the ability of JavaScript programs to tamper with some
Content Isolation Logic 153
portions of their runtime environment to save the day. Another related, com-
mon source of incompatibilities is the interpretation of URLs. For example,
in the middle of 2010, one researcher discovered that Adobe Flash had trou-
ble with the following URL:7
http://example.com:PI:EMAIL/
The plug-in decided that the origin of any code retrieved through this
URL should be set to example.com, but the browser, when presented with such
a URL, would naturally retrieve the data from bunnyoutlet.com instead and then
hand it over to the confused plug-in for execution.
While this particular bug is now fixed, other vulnerabilities of this type
can probably be expected in the future. Replicating some of the URL-parsing
quirks discussed in Chapters 2 and 3 can be a fool’s errand and, ideally,
should not be attempted at all.
It would not be polite to end this chapter on such a gloomy note!
Systemic problems aside, let’s see how some of the most popular plug-ins
approach the job of security policy enforcement.
Adobe Flash
The Flash security model underwent a major overhaul in 2008,8 and since
then, it has been reasonably robust. Every loaded Flash applet is now assigned
an SOP-like origin derived from its originating URL* and is granted nominal
origin-related permissions roughly comparable to those of JavaScript. In
particular, each applet can load cookie-authenticated content from its origi-
nating site, load some constrained datatypes from other origins, and make
same-origin XMLHttpRequest-like HTTP calls through the URLRequest API.
The set of permissible methods and request headers for this last API is man-
aged fairly reasonably and, as of this writing, is more restrictive than most of
the browser-level blacklists for XMLHttpRequest itself.9
On top of this sensible baseline, three flexible but easily misused mecha-
nisms permit this behavior to be modified to some extent, as discussed next.
Markup-Level Security Controls
The embedding page can specify three special parameters provided through
 or  tags to control how an applet will interact with its host
page and the browser itself:
 AllowScriptAccess parameter This setting controls an applet’s ability to
use the JavaScript ExternalInterface.call(...) bridge (see Chapter 8) to exe-
cute JavaScript statements in the context of the embedding site. Possible
values are always, never, and sameorigin; the last setting gives access to the
page only if the page is same-origin with the applet itself. (Prior to the
2008 security overhaul, the plug-in defaulted to always; the current
default is the much safer sameorigin.)
* In some contexts, Flash may implicitly permit access from HTTPS origins to HTTP ones but
not the other way round. This is usually harmless, and as such, it is not given special attention
throughout the remainder of this section.
154 Chapter 9
 AllowNetworking parameter This poorly named setting restricts an
applet’s permission to open or navigate browser windows and to make
HTTP requests to its originating server. When set to all (the default), the
applet can interfere with the browser; when set to internal, it can perform
only nondisruptive, internal communications through the Flash plug-in.
Setting this parameter to none disables most network-related APIs alto-
gether.* (Prior to recent security improvements, allowNetworking=all
opened up several ways to bypass allowScriptAccess=none, for example, by
calling getURL(...) on a javascript: URL. As of this writing, however, all
scripting URLs should be blacklisted in this scenario.)
 AllowFullScreen parameter This parameter controls whether an applet
should be permitted to go into full-screen rendering mode. The possible
values are true and false, with false being the default. As noted in Chapter8,
the decision to give this capability to Flash applets is problematic due to
UI spoofing risks; it should be not enabled unless genuinely necessary.
Security.allowDomain(...)
The Security.allowDomain(...) method10 allows Flash applets to grant access to
their variables and functions to any JavaScript code or to other applets coming
from a different origin. Buyer beware: Once such access is granted, there is
no reliable way to maintain the integrity of the original Flash execution con-
text. The decision to grant such permissions should not be taken lightly, and
the practice of calling allowDomain("*") should usually be punished severely.
Note that a weirdly named allowInsecureDomain(...) method is also avail-
able. The existence of this method does not indicate that allowDomain(...)
isparticularly secure; rather, the “insecure” variant is provided for compati-
bility with ancient, pre-2003 semantics that completely ignored the HTTP/
HTTPS divide.
Cross-Domain Policy Files
Through the use of loadPolicyFile(...), any Flash applet can instruct its runtime
environment to retrieve a security policy file from an almost arbitrary URL.
This XML-based document, usually named crossdomain.xml, will be inter-
preted as an expression of consent to cross-domain, server-level access to the
origin determined by examining the policy URL.11 The syntax of a policy file
is fairly self-explanatory and may look like this:
* It should not be assumed that this setting prevents any sensitive data available to a rogue applet
from being relayed to third parties. There are many side channels that any Flash applet could
leverage to leak information to a cooperating party without directly issuing network requests. In
the simplest and most universal case, CPU loads can be manipulated to send out individual bits of
information to any simultaneously loaded applet that continuously samples the responsiveness of
its runtime environment.
Content Isolation Logic 155
The policy may permit actions such as loading cross-origin resources
orissuing arbitrary URLRequest calls with whitelisted headers, through the
browser HTTP stack. Flash developers do attempt to enforce a degree of
path separation: A policy loaded from a particular subdirectory can in princi-
ple permit access only to files within that path. In practice, however, the
interactions with SOP and with various path-mapping semantics of modern
browsers and web application frameworks make it unwise to depend on this
boundary.
NOTE Making raw TCP connections via XMLSocket is also possible and controlled by an
XML policy, but following Flash’s 2008 overhaul, XMLSocket requires that a sepa-
rate policy file be delivered on TCP port 843 of the destination server. This is fairly safe,
because no other common services run on this port and, on many operating systems,
only privileged users can launch services on any port below 1024. Because of the inter-
actions with certain firewall-level mechanisms, such as FTP protocol helpers, this design
may still cause some network-level interference,12 but this topic is firmly beyond the
scope of this book
As expected, poorly configured crossdomain.xml policies are an apprecia-
ble security risk. In particular, it is a very bad idea to specify allow-access-from
rules that point to any domain you do not have full confidence in. Further,
specifying “*” as a value for this parameter is roughly equivalent to executing
document.domain = “com”. That is, it’s a death wish.
Policy File Spoofing Risks
Other than the possibility of configuration mistakes, another security risk
with Adobe’s policy-based security model is that random user-controlled
documents may be interpreted as cross-domain policies, contrary to the site
owner’s intent.
Prior to 2008, Flash used a notoriously lax policy parser, which when
processing loadPolicyFile(...) files would skip arbitrary leading garbage in
search of the opening  tag. It would simply ignore the
MIME type returned by the server when downloading the resource, too. As
aresult, merely hosting a valid, user-supplied JPEG image could become a
grave security risk. The plug-in also skipped over any HTTP redirects, mak-
ing it dangerous to do something as simple as issuing an HTTP redirect to a
location you did not control (an otherwise harmless act).
Following the much-needed revamp of the loadPolicyFile behavior, many
of the gross mistakes have been corrected, but the defaults are still not per-
fect. On the one hand, redirects now work intuitively, and the file must be a
well-formed XML document. On the other, permissible MIME types include
text/*, application/xml, and application/xhtml+xml, which feels a bit too broad.
text/plain or text/csv may be misinterpreted as a policy file, and that should
not be the case.
Thankfully, to mitigate the problem, Adobe engineers decided to roll
out meta-policies, policies that are hosted at a predefined, top-level location
(/crossdomain.xml) that the attacker can’t override. A meta-policy can specify
sitewide restrictions for all the remaining policies loaded from attacker-supplied
156 Chapter 9
URLs. The most important of these restrictions is . This parameter, when set to master-only, simply instructs
the plug-in to disregard subpolicies altogether. Another, less radical value,
by-content-type, permits additional policies to be loaded but requires them to
have a nonambiguous Content-Type header set to text/x-cross-domain-policy.
Needless to say, it’s highly advisable to use a meta-policy that specifies
one of these two directives.
Microsoft Silverlight
If the transition from Flash to Silverlight seems abrupt, it’s because the
twoare easy to confuse. The Silverlight plug-in borrows from Flash with
remarkable zeal; in fact, it is safe to say that most of the differences between
their security models are due solely to nomenclature. Microsoft’s platform
uses the same-origin-determination approach, substitutes allowScriptAccess
with enableHtmlAccess, replaces crossdomain.xml with the slightly different
clientaccesspolicy.xml syntax, provides a System.Net.Sockets API instead of
XMLSocket, uses HttpWebRequest in place of URLRequest, rearranges the
flowers, and changes the curtains in the living room.
The similarities are striking, down to the list of blocked request headers
for the HttpWebRequest API, which even includes X-Flash-Version from the Adobe
spec.13 Such consistency is not a problem, though: In fact, it is preferable to
having a brand-new security model to take into account. Plus, to its credit,
Microsoft did make a couple of welcome improvements, including ditching
the insecure allowDomain logic in favor of RegisterScriptableObject, an approach
that allows only explicitly specified callbacks to be exposed to third-party
domains.
Java
Sun’s Java (now officially belonging to Oracle) is a very curious case. Java
isaplug-in that has fallen into disuse, and its security architecture has not
received much scrutiny in the past decade or so. Yet, because of its large
installed base, it is difficult to simply ignore it and move on.
Unfortunately, the closer you look, the more evident it is that the ideas
embraced by Java tend to be incompatible with the modern Web. For exam-
ple, a class called java.net.HttpURLConnection14 permits credential-bearing
HTTP requests to be made to an applet’s originating website, but the “origi-
nating website” is understood as any website hosted at a particular IP address,
as sanctioned by the java.net.URL.equals(...) check. This model essentially
undoes any isolation between HTTP/1.1 virtual hosts—an isolation strongly
enforced by the same-origin policy, HTTP cookies, and virtually all other
browser security mechanisms in use today.
Further along these lines, the java.net.URLConnection class15 allows arbi-
trary request headers, including Host, to be set by the applet, and another
class, Socket,16 permits unconstrained TCP connections to arbitrary ports
onthe originating server. All of these behaviors are frowned upon in the
browser and in any other contemporary plug-in.
Content Isolation Logic 157
Origin-agnostic access from the applet to the embedding page is pro-
vided through the JSObject mechanism and is expected to be controlled by
the embedding party through the mayscript attribute specified in the ,
, or  tags.17 The documentation suggests that this is a security
feature:
Due to security reasons, JSObject support is not enabled in Java
Plug-in by default. To enable JSObject support in Java Plug-in,
anew attribute called MAYSCRIPT needs to be present in the
EMBED/OBJECT tag.
Unfortunately, the documentation neglects to mention that another
closely related mechanism, DOMService,18 ignores this setting and gives applets
largely unconstrained access to the embedding page. While DOMService is
not supported in Firefox and Opera, it is available in other browsers, which
makes any attempt to load third-party Java content equivalent to granting full
access to the embedding site.
Whoops.
NOTE Interesting fact: Recent versions of Java attempt to copy the crossdomain.xml support
available in Flash.
Coping with Ambiguous or Unexpected Origins
This concludes our overview of the basic security policies and consent isola-
tion mechanisms. If there is one observation to be made, it’s that most of
these mechanisms depend on the availability of a well-formed, canonical
hostname from which to derive the context for all the subsequent opera-
tions. But what if this information is not available or is not presented in the
expected form?
Well, that’s when things get funny. Let’s have a look at some of the com-
mon corner cases, even if just for fleeting amusement.
IP Addresses
Due to the failure to account for IP addresses when designing HTTP cookies
and the same-origin policy, almost all browsers have historically permitted
documents loaded from, say, http://1.2.3.4/ to set cookies for a “domain”
named *.3.4. Adjusting document.domain in a similar manner would work as