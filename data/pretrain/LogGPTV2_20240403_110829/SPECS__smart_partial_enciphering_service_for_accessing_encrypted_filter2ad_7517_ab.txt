p(Xj = xj|C = ci),
namely, each of the d features are conditionally independent given the class. For simplicity, we assume that the domain
of the features values (the xi’s) is discrete and ﬁnite, so the p(Xj = xj|C = ci)’s are probability masses.
Decision trees. A decision tree is a non-parametric classiﬁer which works by partitioning the feature vector space one
attribute at a time; interior nodes in the tree correspond to partitioning rules, and leaf nodes correspond to class labels.
A feature vector x is classiﬁed by walking the tree starting from the root, using the partitioning rule at each node to
decide which branch to take until a leaf node is encountered. The class at the leaf node is the result of the classiﬁcation.
Figure 2 gives an example of a decision tree. The model consists of the structure of the tree and the decision criteria
at each node (in this case the thresholds w1, . . . , w4).
2Be careful to distinguish between Xj, the probabilistic random variable representing the values taken by the j-th feature of user’s input, and xj,
the actual value taken by the speciﬁc vector x.
5
c1c2c3c4c5x1>w1x1w1x2w2x2>w2x3w3x4w4x4>w43.2 Cryptographic preliminaries
3.2.1 Cryptosystems
In this work, we use three additively homomorphic cryptosystems. A public-key encryption scheme HE is additively
homomorphic if, given two encrypted messages HE.Enc(a) and HE.Enc(b), there exists a public-key operation ⊕
such that HE.Enc(a) ⊕ HE.Enc(b) is an encryption of a + b. We emphasize that these are homomorphic only for
addition, which makes them efﬁcient, unlike fully homomorphic encryption [Gen09], which supports any function. The
cryptosystems we use are:
1. the QR (Quadratic Residuosity) cryptosystem of Goldwasser-Micali [GM82],
2. the Paillier cryptosystem [Pai99], and
3. a leveled fully homomorphic encryption (FHE) scheme, HELib [Hal13]
3.2.2 Cryptographic assumptions
We prove that our protocols are secure based on the semantic security [Gol04] of the above cryptosystems. These
cryptosytems rely on standard and well-studied computational assumptions: the Quadratic Residuosity assumption, the
Decisional Composite Residuosity assumption, and the Ring Learning With Error (RLWE) assumption.
3.2.3 Adversarial model
We prove security of our protocols using the secure two-party computation framework for passive adversaries (or honest-
but-curious [Gol04]) deﬁned in Appendix B.1.To explain what a passive adversary is, at a high level, consider that a
party called party A is compromised by such an adversary. This adversary tries to learn as much private information
about the input of the other party by watching all the information party A receives; nevertheless, this adversary cannot
prevent party A from following the prescribed protocol faithfully (hence, it is not an active adversary).
To enable us to compose various protocols into a bigger protocol securely, we invoke modular sequential composition
(see Appendix B.2).
3.3 Notation
All our protocols are between two parties: parties A and B for our building blocks and parties C (client) and S (server)
for our classiﬁers.
Inputs and outputs of our building blocks are either unencrypted or encrypted with an additively homomorphic
encryption scheme. We use the following notation. The plaintext space of QR is F2 (bits), and we denote by [b] a bit b
encrypted under QR; the plaintext space of Paillier is ZN where N is the public modulus of Paillier, and we denote by
(cid:74)m(cid:75) an integer m encrypted under Paillier. The plaintext space of the FHE scheme is F2. We denote by SKP and PKP ,
For a constant b, a ← b means that a is assigned the value of b. For a distribution D, a ← D means that a gets a
a secret and a public key for Paillier, respectively. Also, we denote by SKQR and PKQR, a secret and a public key for
QR.
sample from D.
4 Building blocks
In this section, we develop a library of building blocks, which we later use to build our classiﬁers. We designed this
library to also enable constructing other classiﬁers than the ones described in our paper. The building blocks in this
section combine existing techniques with either new techniques or new optimizations.
6
Type
1
2
3
4
5
Input A
PKP , PKQR, a
PKP , SKQR,(cid:74)a(cid:75),(cid:74)b(cid:75)
PKP , SKQR,(cid:74)a(cid:75),(cid:74)b(cid:75)
PKP , PKQR,(cid:74)a(cid:75),(cid:74)b(cid:75)
PKP , PKQR,(cid:74)a(cid:75),(cid:74)b(cid:75)
Input B
SKP ,SKQR, b
SKP ,PKQR
SKP ,PKQR
SKP ,SKQR
SKP ,SKQR
Output A Output B Implementation
[a < b]
–
Sec. 4.1.1
Sec. 4.1.2
Sec. 4.1.2
Sec. 4.1.3
Sec. 4.1.3
–
a ≤ b
[a ≤ b]
[a ≤ b]
[a ≤ b]
[a ≤ b]
a ≤ b
–
Table 2: The API of our comparison protocol and its implementation. There are ﬁve types of comparisons each having a different
setup.
4.1 Comparison
We now describe our comparison protocol. In order for this protocol to be used in a wide range of classiﬁers, its setup
needs to be ﬂexible: namely, it has to support a range of choices regarding which party gets the input, which party
gets the output, and whether the input or output are encrypted or not. Table 2 shows the various ways our comparison
protocol can be used. In each case, each party learns nothing else about the other party’s input other than what Table 2
indicates as the output.
We implemented each row of Table 2 by modifying existing protocols. We explain only the modiﬁcations here, and
defer full protocol descriptions to Appendix A and proofs of security to Appendix C.1.
There are at least two approaches to performing comparison efﬁciently: using specialized homomorphic
encryption [DGK07, DGK09, EFG+09, Veu11], or using garbled circuits [BHKR13]. We compared empirically
the performance of these approaches and concluded that the former is more efﬁcient for comparison of encrypted values,
and the second is more efﬁcient for comparison of unencrypted values.
4.1.1 Comparison with unencrypted inputs (Row 1)
To compare unencrypted inputs, we use garbled circuits implemented with the state-of-the-art garbling scheme of
Bellare et al. [BHKR13], the short circuit for comparison of Kolesnikov et al. [KSS09] and a well-known oblivious
transfer (OT) scheme due to Naor and Pinkas [NP01]. Since most of our other building blocks expect inputs encrypted
with homomorphic encryption, one also needs to convert from a garbled output to homomorphic encryption to enable
composition. We can implement this easily using the random shares technique in [KSS13].
The above techniques combined give us the desired comparison protocol. Actually, we can directly combine them
to build an even more efﬁcient protocol: we use an enhanced comparison circuit that also takes as input a masking bit.
Using a garbled circuit and oblivious transfer, A will compute (a < b) ⊕ c where c is a bit randomly chosen by B. B
will also provide an encryption [c] of c, enabling A to compute [a < b] using the homomorphic properties of QR.
4.1.2 Comparison with encrypted inputs (Rows 2, 3)
Our classiﬁers also require the ability to compare two encrypted inputs. More speciﬁcally, suppose that party A wants
to compare two encrypted integers a and b, but party B holds the decryption key. To implement this task, we slightly
modify Veugen’s [Veu11] protocol: it uses a comparison with unencrypted inputs protocol as a sub-procedure, and we
replaced it with the comparison protocol we just described above. This yields a protocol for the setup in Row 2. To
ensure that A receives the plaintext output as in Row 3, B sends the encrypted result to A who decrypts it. Appendix A
provides the detailed protocol.
4.1.3 Reversed comparison over encrypted data (Row 4, 5)
In some cases, we want the result of the comparison to be held by the party that does not hold the encrypted data. For
this, we modify Veugen’s protocol to reverse the outputs of party A and party B: we achieve this by exchanging the role
of party A and party B in the last few steps of the protocol, after invoking the comparison protocol with unencrypted
inputs. We do not present the details in the paper body because they are not insightful, and instead include them in
Appendix A.
7
This results in a protocol whose speciﬁcation is in Row 4. To obtain Row 5, A sends the encrypted result to B who
can decrypt it.
4.1.4 Negative integers comparison and sign determination
Negative numbers are handled by the protocols above unchanged. Even though the Paillier plaintext size is “positive”, a
negative number simply becomes a large number in the plaintext space due to cyclicity of the space. As long as the
values encrypted are within a preset interval (−2(cid:96), 2(cid:96)) for some ﬁxed (cid:96), Veugen’s protocol and the above protocols
In some cases, we need to compute the sign of an encrypted integer(cid:74)b(cid:75). In this case, we simply compare to the
work correctly.
encryption of 0.
B should not learn the order relations between the ai’s.
4.2 argmax over encrypted data
In this scenario, party A has k values a1, . . . , ak encrypted under party B’s secret key and wants party B to know the
argmax over these values (the index of the largest value), but neither party should learn anything else. For example, if
A has values(cid:74)1(cid:75),(cid:74)100(cid:75) and(cid:74)2(cid:75), B should learn that the second is the largest value, but learn nothing else. In particular,
Our protocol for argmax is shown in Protocol 1. We now provide intuition into the protocol and its security.
random permutation π. The i-th element becomes(cid:74)a(cid:48)
Intuition. Let’s start with a strawman. To prevent B from learning the order of the k values {ai}k
Now, A and B compare the ﬁrst two values(cid:74)a(cid:48)
B learns the index, m, of the larger value, and tells A to compare(cid:74)a(cid:48)
2(cid:75) using the comparison protocol from row 4 of Table 2.
3(cid:75) next. After iterating in this manner
i(cid:75) =(cid:74)aπ(i)(cid:75) instead of(cid:74)ai(cid:75).
1(cid:75) and(cid:74)a(cid:48)
m(cid:75) to(cid:74)a(cid:48)
through all the k values, B determines the index m of the largest value. A can then compute π−1(m) which represents
the argmax in the original, unpermuted order.
i=1, A applies a
Since A applied a random permutation π, B does not learn the ordering of the values. The problem, though, is that
A learns this ordering because, at every iteration, A knows the value of m up to that step and π. One way to ﬁx this
problem is for B to compare every pair of inputs from A, but this would result in a quadratic number of comparisons,
which is too slow.
Instead, our protocol preserves the linear number of comparisons from above. The idea is that, at each iteration,
once B determines which is the maximum of the two values compared, B should randomize the encryption of this
maximum in such a way that A cannot link this value to one of the values compared. B uses the Refresh procedure for
the randomization of Paillier ciphertexts. In the case where the “refresher” knows the secret key, this can be seen as a
decryption followed by a re-encryption. If not, it can be seen as a multiplication by an encryption of 0.
m(cid:75), B needs to get this encryption – however,
A difﬁculty is that, to randomize the encryption of the maximum(cid:74)a(cid:48)
m(cid:75), so decryption at B yields random values, then B refreshes the ciphertext,
for A itself to add noise ri and si to(cid:74)a(cid:48)
In the end, our protocol performs k − 1 encrypted comparisons of l bits integers and 7(k − 1) homomorphic
operations (refreshes, multiplications and subtractions). In terms of round trips, we add k − 1 roundtrips to the
comparison protocol, one roundtrip per loop iteration.
B must not receive this encryption because B has the key SKP to decrypt it, which violates privacy. Instead, the idea is
and then A removes the randomness ri and si it added.
Proposition 4.1. Protocol 1 is correct and secure in the honest-but-curious model.
Proof intuition. The correctness property is straightforward. Let’s argue security. A does not learn intermediary
results in the computation because of the security of the comparison protocol and because she gets a refreshed ciphertext
from B which A cannot couple to a previously seen ciphertext. B does learn the result of each comparison – however,
since A applied a random permutation before the comparison, B learns no useful information. See Appendix C for a
complete proof.
8
Protocol 1 argmax over encrypted data
Input A: k encrypted integers ((cid:74)a1(cid:75), . . . ,(cid:74)ak(cid:75)), the bit length l of the ai, and public keys PKQR and PKP
Input B: Secret keys SKP and SKQR, the bit length l
Output A: argmaxi ai
if bi is true then
2: A:(cid:74)max(cid:75) ←(cid:74)aπ(1)(cid:75)
1: A: chooses a random permutation π over {1, . . . , k}
3: B: m ← 1
4: for i = 2 to k do
Using the comparison protocol (Sec. 4.1.3), B gets the bit bi = (max ≤ aπ(i))
5:
A:(cid:74)m(cid:48)
i(cid:75) ←(cid:74)max(cid:75) ·(cid:74)ri(cid:75)
A picks two random integers ri, si ← (0, 2λ+l) ∩ Z
6:
A:(cid:74)a(cid:48)
i(cid:75) ←(cid:74)aπ(i)(cid:75) ·(cid:74)si(cid:75)
7:
i(cid:75) to B
i(cid:75) and(cid:74)a(cid:48)
A sends(cid:74)m(cid:48)
8:
9:
10:
B:(cid:74)vi(cid:75) ← Refresh(cid:74)a(cid:48)
i(cid:75)
B: m ← i
11:
12:
B:(cid:74)vi(cid:75) ← Refresh(cid:74)m(cid:48)
i(cid:75)
13:
14:
B sends to A(cid:74)vi(cid:75)
15:
B sends to A(cid:74)bi(cid:75)
16:
A:(cid:74)max(cid:75) ←(cid:74)vi(cid:75) · (g−1 ·(cid:74)bi(cid:75))ri ·(cid:74)bi(cid:75)−si
17:
18:
19:
20: end for
21: B sends m to A
22: A outputs π−1(m)
end if
else
(cid:46) m(cid:48)
(cid:46) a(cid:48)