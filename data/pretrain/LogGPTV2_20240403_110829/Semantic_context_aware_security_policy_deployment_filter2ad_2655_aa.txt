# Title: Semantic Context-Aware Security Policy Deployment

## Authors:
- Stere Preda
- Frédéric Cuppens
- Nora Cuppens-Boulahia
- Joaquín García-Alfaro
- Laurent Toutain
- Yehia Elrakaiby

## Additional Contributors:
- Slim Trabelsi (Institut Eurecom, PI:EMAIL)
- Laurent Gomez (SAP Labs France, PI:EMAIL)
- Yves Roudier (Institut Eurecom, PI:EMAIL)

## Abstract
Dynamic and self-organizing systems, such as those found in pervasive computing and semantic web scenarios, present numerous security and privacy challenges. Service discovery is a fundamental feature of Service-Oriented Architecture (SOA) deployment in these systems, as entities need to locate services without prior knowledge. This paper identifies the inherent threats to service discovery in ubiquitous networks and proposes a registry-based solution that enforces context-aware security policies to ensure privacy and access control for clients and services. Users can specify their security preferences, which are enforced during the discovery process. Experimental results based on an implementation of our approach are presented.

## 1. Introduction
Orchestration has become an essential feature for developing increasingly pervasive systems, particularly with the rapid development of ubiquitous computing. One of the primary orchestration techniques is service discovery, which allows dynamic detection of available services in the network. With the emergence of Web Service technology, the discovery process must address the heterogeneity of services and platforms, the complexity of service descriptions (e.g., ontology-based descriptions), and specific security and trust requirements, all while ensuring scalability.

Existing solutions like UDDI [1] and WS-Discovery [2] have been developed to meet some of these requirements but still fall short in addressing most security and trust issues. For instance, WS-Discovery's security is limited to message integrity verification through signatures, which is insufficient to protect sensitive information about services from unauthorized users or to prevent private user information from being revealed to potentially malicious services. This paper discusses how WS-Discovery can be extended to incorporate confidentiality and privacy protections by restricting the potential matching between a client lookup request and a service profile. Specifically, we describe how XACML can be used to implement these functionalities and how it needs to be extended to evaluate the context of a user or the device hosting a service, a critical feature for enabling secure service discovery in ubiquitous computing.

This paper is organized as follows:
- Section 2 introduces service discovery concepts and discusses the associated threats.
- Section 3 describes the proposed solution to overcome these security failures.
- Section 4 details the architectural and technical aspects of the implementation, including performance results.
- Finally, we compare our approach with related work.

## 2. Service Discovery and Security
### 2.1. Service Discovery Definition
In traditional fixed networks like local LANs, communication devices are assigned static network configurations or use DHCP for dynamic IP address configuration. With the advent of dynamic networks and services, discovery techniques have been adapted to find mobile services rather than devices. Centralized discovery approaches rely on a registry that acts as a yellow pages, where services advertise their capabilities, and clients query the registry to find suitable services. In this approach, the registry is considered a trusted third party by both services and clients.

### 2.2. Revisiting Service Discovery Threats
This section discusses the threat model for service discovery and identifies potential targets for adversaries. The main players in the discovery phase are the service requester (client) and the service provider (server). We outline the following threats and possible attacks:

#### Protocol Messages and Entities
- **Registry Unavailability:** The registry may not be available, affecting service-side operations.
- **Client Request Disclosure:** Client requests may be disclosed, compromising client-side security.
- **Message Modification or Drop:** Messages can be modified or dropped, leading to client-side vulnerabilities.
- **Replay Attacks:** Replay of lookup messages can cause Denial of Service (DoS) attacks on the client side.
- **Registration Replay:** Replay of registration messages can affect the registry side.

#### Service Registration
- **Malicious Registry:** A service might register with a malicious registry, allowing an attacker to intercept requests.
- **Unauthorized Deregistration:** A service can be deregistered by an unauthorized party.
- **Fake Registration:** An attacker can send a fake registration message to the registry.

#### Matching Process
- **Client Lookup Disclosure:** Client intentions or activity may be disclosed if the matching process is open to all registered services.
- **Service Discovered by Unauthorized Party:** Services may be discovered by unauthorized parties.

This paper focuses on developing appropriate policy specifications using XACML to address these threats. The policy enforcement mechanism allows specifying authorized clients based on their context or the physical situation of their devices, acquired from the environment, as additional and dynamic attributes.

## 3. Context-Aware Access Control for Secure Discovery
### 3.1. Discovery Policy
The threat model highlights the need for clients to find services that match their preferences, both in terms of service characteristics and security and privacy requirements. On the client side, users should be confident that only services meeting their preferences are returned, requiring more than just service provider authentication. On the server side, services should be accessible only to trusted clients, ensuring precise behavior guaranteed by some authority.

Assigning the responsibility of enforcing such discovery policies to a trusted entity, such as the registry, is critical. To avoid increasing the complexity of service discovery, we propose assigning this task to the existing registry, which already implicitly performs trusted operations. Discovery policies may be simple, with clients and services providing rules that describe who can access their profiles based on certain attributes. Our objectives are:
- **Access Control:** Restricting the clients that can subsequently contact a service, protecting the service’s profile from unauthorized users.
- **Privacy Protection:** Allowing clients to protect private information (e.g., identity, intentions, favorite services) from uncontrolled disclosure.

### 3.2. Context-Awareness
Using context information significantly benefits service discovery in highly dynamic environments. Context refers to any information characterizing the state of an entity (user, software, or hardware component). Examples include the location of a service, network bandwidth, and enabled security protocols. Context information enhances the precision of matching and provides more flexibility in policy specification, allowing for fine-grained policies that adapt to environmental changes.

Current approaches to context-aware service discovery often exploit raw context data directly from sensors, which is too restrictive for defining comprehensive discovery policies. We introduce semantically-rich context information, supporting context reasoning. Raw contextual data from sensors, such as location, can be processed to derive complex information, such as proximity. This improves the flexibility of context-aware discovery policies, extending their expressive power to more complex contexts.

### 3.3. Secure Context Acquisition
Securing context information is crucial for enhancing security mechanisms. While our proof-of-concept implementation does not fully address these issues, we provide a non-exhaustive list of approaches for securing context acquisition:

#### Confidential Context Information
User context information, such as health status or medical history, should be protected to ensure user privacy. Various approaches aim to provide security controls for managing the disclosure of context information by the user.

#### Context Information Integrity
Integrity protection ensures that context information has not been corrupted by unauthorized parties. Hashing and public key digital signatures are two alternatives, though the latter may impose significant constraints on decentralized and low-cost sensor networks.

## 4. Implementation Design
Our prototype implementation relies on three fundamental components:
- **Service Discovery Protocol:** Defines the standard for message format, exchange techniques, and registration management.
- **Security Policy Module:** Generates, reasons about, and enforces policies to secure the discovery process.
- **Context-Aware Module:** Reasons about contextual information and data used during policy enforcement.

### 4.1. Service Discovery Protocol
We extend the existing Web Services Dynamic Discovery (WS-Discovery) protocol, which defines a multicast discovery scheme for locating services in a network. Each service provider announces itself by sending a "Hello" message, and each user looking for a service sends a "Probe" message. Only the relevant service responds with a "Probe Match" message. The default matched attributes are Type and Scope, but other attributes and metadata can also be used.

The WS-Discovery specification does not suggest securing the discovery process but recommends using a compact signature format to secure exchanged messages. Signature verification is insufficient to protect users, as it only ensures message integrity without assessing the trustworthiness of the issuer. Additionally, message content is not confidential, and there is no guarantee against the disclosure of private information. For example, a malicious server can publish fake services with a valid signature or listen to request messages to collect valuable information.

### 4.2. Context Reasoning Module
The context reasoning module processes raw contextual data to derive complex information, such as proximity, improving the flexibility and expressiveness of context-aware discovery policies. This module plays a crucial role in the enforcement of discovery policies by dynamically evaluating the context of users and services.