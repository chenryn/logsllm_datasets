title:Semantic context aware security policy deployment
author:Stere Preda and
Fr&apos;ed&apos;eric Cuppens and
Nora Cuppens-Boulahia and
Joaqu&apos;ın Garc&apos;ıa-Alfaro and
Laurent Toutain and
Yehia Elrakaiby
Context-Aware Security Policy for the Service Discovery 
 Slim Trabelsi                        Laurent Gomez                     Yves Roudier 
 Institut Eurecom                    SAP Labs France                  Institut Eurecom                 
    PI:EMAIL        PI:EMAIL        PI:EMAIL       
Abstract 
Dynamic  and  self  organizing  systems  like  those 
found in pervasive computing systems or semantic web 
based scenarios raise numerous challenges regarding 
security  and  privacy.  Service  discovery  is  a  basic 
feature of SOA deployment in such systems, given that 
entities  need  to  locate  services  they  can  describe 
without an a priory knowledge. After inherent threats 
to  service  discovery  in  ubiquitous  networks,  we 
propose  a  registry  based  solution  in  which  context-
aware security policies are enforced in order to ensure 
privacy and access control for clients and services. We 
offer  the  possibility  for  the  users  to  specify  their 
security  preferences  that  will  be  enforced  during  the 
discovery  process.  Experimental  results  based  on  an 
implementation of our approach are finally presented. 
1.  Introduction 
for 
software 
Orchestration  is  becoming  an  essential  feature  for 
developing 
increasingly  pervasive 
systems,  in  particular  with  the  fast  development  of 
ubiquitous  computing.  The  orchestration  technique 
obviously  comes  at  a  cost:  being  able  to  locate 
previously unknown services becomes mandatory. The 
first  orchestration  technique  applied  generally  is  the 
service  discovery  that  allows  a  dynamic  detection  of 
the available services in the network.  
terminology- 
With the emergence of the Web Service technology, 
the discovery process should address the heterogeneity 
of services and platforms from a technical perspective, 
the  complex  semantics  of  service  descriptions  (e.g. 
resorting 
ontology-based 
descriptions), specific security and trust requirements, 
altogether  with  scalability.  Web  Service  discovery 
solutions  like  UDDI  [1],  WS-Discovery  [2],  were 
developed  to  answer  some  of  these  requirements,  yet 
still  do  not  address  most  security  and  trust  issues.  In 
the  WS-Discovery  protocol  for  instance,  security  is 
limited  to  the  use  of  signatures  for  verifying  the 
integrity  of  messages.  It  is  not  sufficient  to  protect 
sensitive  information  about  services  from  becoming 
available to rogue users; private information of a user 
or 
to 
might  also  get  revealed  to  a  service  without  any 
assessment  of  that  service's  potential  maliciousness. 
This  paper  discusses  how  WS-Discovery  may  be 
extended to incorporate appropriate confidentiality and 
privacy  protections  restricting  the  potential  matching 
between a client lookup request and a service profile. 
In  particular,  this  paper  describes  how  XACML  may 
be used to implement such functionalities and how it 
needs  to  be  extended  to  incorporate  an  evaluation  of 
the context of a user or of the device hosting a service, 
an  essential  feature  for  enabling  service  discovery  in 
ubiquitous computing. 
This paper is organized as follows.  In the section 2 
we  introduce  the  notion  of  service  discovery  and  we 
dress a threat model related to this mechanism. In the 
section  3  we  describe  the  proposed  solution  to 
overcome  these  security  failures.  In  the  section  4  we 
detail the architectural and the technical aspects of the 
implementation.  We  also  provide  the  performances 
results  obtained  with  our  implementation.  Finally  we 
compare our approach with related work. 
2.  Service Discovery and Security 
This section introduces service discovery concepts and 
goes  on  to  discuss  the  threats  attached  to  this 
mechanism. 
2.1.  Service Discovery Definition 
Communication devices in fixed networks like local 
LANs  traditionally  are  assigned  a  static  network 
configuration,  or  at  worst  use  DHCP  to  dynamically 
configure their IP address. With the emergence of new 
dynamic  networks  and  services  where  devices  are 
pervasive, the discovery techniques are being adapted 
in  order  to  find  mobile  services  rather  than  devices. 
This adaptation in particular addresses how to combine 
services  as  a  logical  layer  in  such  systems  together 
with the specification of environmental constraints.  
Centralized discovery approaches rely on a registry 
which plays the role of yellow pages, and which clients 
can refer to. A service advertises its capabilities to the 
registry, which will store them for a certain amount of 
time. A client solicits the registry to find a service by 
sending  a  request  containing  service  preferences, 
1
which the registry tries to match with the most suitable 
provider found from the stored advertisements. In that 
approach,  registries  have  to  be  considered  by  the 
services and the clients as a third trusted party. 
2.2.  Revisiting Service Discovery Threats 
This  section  discusses  the  threat  model  of  service 
discovery services and in particular which parts of such 
systems would be worthy targets to adversaries. 
Threats and Attacks 
2.2.1. 
The  main  players  of  the  discovery  phase  are  the 
service  requester  (client)  and  the  service  provider 
(server),  even  in  the  case  of  a  registry  based  service 
discovery. We try here to provide a global idea about 
threats and possible attacks that can be built against the 
data and resources of service discovery players.  
Protocol Messages and Entities 
o  The registry is not available (service-side)  
o  Client request disclosure (client-side)  
o 
o  Message modification or drop (client side) 
o  Replay of lookup message DoS (client-side) 
o  Replay of registration message (registry-side) 
Service Registration 
o  Registration to  a  malicious  registry  (server-side): 
Interception of request (client-side) 
an attacker might fake being a registry 
o  A service can be deregistered by an unauthorized 
party (service-side):  
o  Wrong registration (registry-side): An attacker can 
send a fake registration message to the registry. 
Matching Process 
o  Client 
lookup  disclosure 
(client-side):  client 
intentions  or  activity  might  be  disclosed  if  the 
matching process is open to all services registered. 
o  Service discovered by unauthorized party (service-
side) 
This  paper  especially  focuses  on  the  development  of 
appropriate policy specifications for the latter category 
of 
threats,  and  based  on  XACML.  The  policy 
enforcement  mechanism  described  here  makes 
it 
possible,  regarding  the  last  threat  for  instance,  to 
specify authorized clients through the specification of 
their  context  or  their  devices  physical  situation,  as 
acquired  from  the  environment,  as  additional  and 
dynamic attributes of the client in that example. 
3.  Context-Aware  Access  Control 
for 
Secure Discovery 
This section introduces the architecture of our solution 
to  supporting  contextual  attributes  as  supplementary 
constraints  for  matching  client  or  service  profiles  at 
discovery. 
3.1.  Discovery Policy 
The  threat  model  exposed  in  the  previous  section 
makes  it  clear  that  clients  should  be  able  to  find  a 
service matching their preferences, both in terms of the 
characteristics  of  the  service  and  in  terms  of  security 
and privacy requirements imposed respectively by the 
service and by the client. On the client side, the user 
should  be  sure  that  only  services  matching  his 
preferences would be returned: from his point of view, 
trusting  a  service  should  therefore  go  beyond  the 
simple authentication of the service provider and also 
encompass  a  complete  certification  process  of  the 
capabilities  of  the  service.  On  the  server  side,  the 
problem is quite similar since the server does not know 
the users that can potentially gain access to its service. 
They should therefore be accessible only to client they 
trust  to  access  them  according  to  a  precise  behavior 
guaranteed by some authority. 
Assigning 
the  responsibility 
to  enforce  such 
discovery policies to a trusted entity of the system is 
therefore critical to service discovery. To avoid raising 
the complexity of service discovery, we do not propose 
to  add  a  new  entity  to  the  system  together  with  a 
dedicated protocol, but rather to assign this task to the 
registry. The choice of the registry as being the trusted 
third  party  in  charge  of  the  policy  enforcement  is  an 
absolute  requirement  in  centralized  approaches,  since 
matching already implicitly is a trusted operation, and 
matching  and  policy  enforcement  are  closely  tied 
together. 
Discovery  policies  [3]  may  be  quite  simple:  the 
client  or the  service  provides  rules  that describe  who 
can  access  their  respective  profile  based  on  some 
attributes. In this paper the discovery policy objective 
is twofold: 
constitutes 
-  Access  Control:  discovery 
a 
preliminary  form  of  access  control  to  services  by 
restricting 
to 
subsequently contact a service. The sensitive resource 
here is the service’s profile that must be hidden to the 
non authorized users. 
the  clients  which  will  be  able 
-  Privacy  Protection:  the  client  can  protect  the 
private  information  he  reveals  for  each  lookup  he 
performs  (identity,  intentions,  favorite  services  …) 
from an uncontrolled disclosure. 
(certificate  or  key) 
As shown in Figure 1 the usual discovery messages 
(publish and lookup) should be accompanied by some 
credential 
to  be 
authenticated by the registry, by a discovery policy that 
will be enforced by the registry in order to protect the 
entities  according  to  their  desires,  the  whole  being 
secured  using  a  signature  based  on  the  credential 
transmitted for instance. 
in  order 
2
policies,  and  makes  it  easier  to  combine  context 
information coming from different sources. 
3.3.  Secure Context Acquisition 
The  use  of  context  information  for  enhancing 
security mechanisms also make it necessary and even 
critical  to  assure  the  security  of  the  context  acquired 
[7].  While  the  proof  of  concept  implementation 
presented  in  the  next  section  does  not  address  these 
issues, this section provides a non-exhaustive listing of 
various approaches that may permit to secure context 
acquisition. 
3.3.1.  Confidential Context Information 
Considering  user  context  information,  one  should 
be able to protect his personal information such as his 
health  status  or  medical  history  (context  information 
privacy), which touches the privacy of a user. 
Several approaches target this issue [8] [9] [10] of 
user’s  privacy  protection.  They  all  aims  at  providing 
security  control  for  controlling  the  disclosure  of 
context information by the user. 
3.3.2.  Context Information Integrity 
Integrity  protection  aims  at  guarantee  that  the 
context information acquired has not been corrupted by 
an  unauthorized  third  party  while  in  transit.  Hashing 
and  public  key  digital  signature  are  two  alternatives. 
But the latter, relying on public key infrastructure, may 
impose  important  constraints  on  highly  decentralized 
and pervasive low-cost sensor networks. 
4.  Implementation design 
Our prototype implementation of the system described 
above  relies  on  three  fundamental  components  that 
enable a secure and context-aware service discovery: a 
service  discovery  protocol  that  defines  a  standard  for 
the  message  format,  the  exchange  techniques  and the 
registration management. A security policy module is 
used  to  generate,  to  reason about,  and  to  enforce  the 
policy used to secure the discovery process. A context-
aware  module  is  used  to  reason  about  the  contextual 
information and data used during the discovery policy 
enforcement.  
4.1.  Service Discovery Protocol 
We selected to extend an existing service discovery 
protocol  called  Web  Services  Dynamic  Discovery 
(WS-Discovery).  This  protocol  defines  a  multicast 
discovery  scheme  to  locate  services  connected  to  a 
network  (mostly  assumed  to  be  a  LAN  or  WLAN). 
Each  service  provider  announces  itself  (by  sending  a 
“Hello”  message)  through  the  multicast  group  to 
expose the services that can provide. Each user that is 
looking for a service propagates its query (by sending a 
“Probe”  message)  through the  multicast and  only  the 
concerned service must make a response (by sending a 
“Probe Match” message). As we mentioned previously 
the  default  matched  attributes  are  the  Type  and  the 
refers 
Figure 1: Communicating discovery policies 
information 
3.2.  Context-Awareness 
The  use  of  context  represents  a  significant  benefit 
for  enabling  service  discovery  in  the highly  dynamic 
in  ubiquitous  computing. 
environments  addressed 
Context  or  context 
to  any 
information that can be used to characterize the state of 
an entity (user, or software, or hardware component of 
a  computing  system)  [4].  The  location  of  a  service, 
obtained  for  instance  through  a  GPS  or  WiFi-based 
location  of  the  device  on  which  a  service  is  running, 
network  bandwidth,  or  the  security  protocols  enabled 
on  some  platform  all  may  serve  to  characterize 
dynamic services and networks. Service discovery may 
obviously  exploit  context  to  achieve  more  precise 
matching 
[5],[6].  More 
importantly,  such  context  information  complements 
and  provides  more  flexibility  to  the  discovery  policy 
specification.  It  in  particular  makes  it  possible  to 
express  fine  grained  discovery  policies  more  closely 
following the constant changes of the environment and 
services. 
such  environments 
in 
to 
the 
instead 
Approaches 
introduction  of  context-
awareness for service discovery so  far only exploited 
raw  context  directly  acquired  from  sensors (e.g.  GPS 
location,  remaining  battery).  While  this  may  indeed 
enhance  service  discovery  with  basic  context-
awareness,  the  use  of  sensor  context  information  is 
however too restrictive for defining a discovery policy. 
We 
semantically-rich  context 
information, thereby supporting context reasoning: raw 
contextual data that are gathered from sensors, like the 
location,  can therefore  be  further  processed  to  derive 
complex information, such as the proximity. De facto, 
we  already  improve  the  flexibility  of  context-aware 
discovery policies whose expressive power extends to 
more  complex  contexts.  Context  reasoning  also  may 
the  enforcement  of  discovery 
take  place  during 
introduce 
3
Scope  of  the  service,  obviously  other  attributes  and 
meta-data information can also be. 
The WS-Discovery specification does not suggests 
securing the discovery process but it recommends the 
usage  of  a  compact  signature  format  to  secure  the 
exchanged  messages.  In this  case  each  entity  has  the 
possibility  to  verify  the  signature  of  the  message 
sender.  This  signature  protects  against  the  message 
modifications the replay, the spoofing.  
Signature  verification  is  obviously  insufficient  to 
protect  users  (servers  and  clients)  since  a  valid 
signature only assess that the message content has not 
been altered without presuming of the level of trust of 
the issuer. Moreover, the content of the message is not 
confidential  and  there  is  no  guarantee  against  the 
disclosure  of  private  information.  For  example  a 
malicious server can publish fake services with a valid 
signature  or  listen  to  request  messages  in  order  to 
collect valuable information. 
4.2.  Context Reasoning Module 