represents a key y2 wrapped with y1. Since the attribute
wrap for key y1 is set, noted as unwrap(x1,⊤), and key y2 is
extractable, written extract(x2,⊤), then we can wrap y2 with
y1, creating {|y2|}y1 .
Figure 2: Tookan system diagram
The semantics of the model is deﬁned in a standard way
in terms of a transition system. Each state in the model
consists of a set of terms in the intruder’s knowledge, and
a set of global state predicates. The intruder’s knowledge
increases monotonically with each transition, but the global
state is non-monotonic. For a formal semantics, we refer to
the literature [8].
3.2 Modelling Real Tokens
The motivation for our work was to try to model the
PKCS#11 implementations of real tokens. Our experiments
on the tokens proceed following the system diagram in ﬁgure
2. First, Tookan extracts the capabilities of the token fol-
lowing a reverse engineering process (1). The results of this
task are written in a meta-language for PKCS#11 models,
described below. Tookan uses this information to generate a
model in the above described style (2), which is given as in-
put to the SATMC model checker [1]. Model checker output
(3) is sent to Tookan for testing on the token (4).
In table 1 we give the syntax for the model meta-language.
The language describes the functions and attributes sup-
ported by the token. It is also designed to capture the re-
strictions on functionality the token imposes. In table 2 we
give our model for PKCS#11 showing how it is parametrised
by the meta-model. We describe this relationship in more
detail below. Note that due to space constraints, the model
we give here is slightly simpliﬁed:
in Tookan we construct
separate sets of Attribute_Restrictions and Templates
for asymmetric and symmetric keys, since many tokens im-
pose quite diﬀerent policies for these two diﬀerent types.
The full syntax and all the conﬁgurations derived during
our experiments on real tokens can be viewed online2.
Cryptographic Keys and Key Attributes
Tookan tests to see if a token supports the generation of
asymmetric or symmetric keys, and returns the results, re-
spectively, in the Booleans supports_symmetric_keys and
supports_asymmetric_keys. By trying successive key gen-
eration commands, Tookan extracts the list of attributes in
use for key objects and delivers these as the list attributes.
These are used throughout the construction of the model
and are noted as A in table 2. Note that as shown in the
BNF in table 1, we restrict attention at the moment to a
subset of PKCS#11 attributes. We do not consider signing
and veriﬁcation capabilities for example.
Functions
Tookan returns a list of functions supported, including one
important function not modelled in the DKS work: Cre-
ateObject. This function allows the application to directly
set the value of a new key on the device. Only the functions
on the list are included in the ﬁnal model.
2http://secgroup.ext.dsi.unive.it/pkcs11-security
262PKCS11_CONFIG
= Key_Types
Functions
Attributes
Attribute_Restrictions
Templates
Flags
Key_Types
= supports_symmetric_keys(BOOL);
supports_asymmetric_keys(BOOL);
Functions
= functions( FunctionList );
FunctionList
= nil | Function, FunctionList
Function
= wrap | unwrap | encrypt | decrypt | create_object
Attributes
= attributes( AttributeList );
AttributeList
= nil | Attribute, AttributeList
Attribute
= sensitive | extract | always_sensitive |
never_extract | wrap | unwrap | encrypt | decrypt
Attribute_Restrictions = Sticky_On
Sticky_Off
Conflicts
Tied
Sticky_On
= sticky_on( AttributeList );
Sticky_Off
= sticky_off( AttributeList );
Conflicts
= conflict( AttributePairList );
Tied
= tied( AttributePairList );
AttributePairList = nil | ( Attribute,Attribute ) , AttributePairList
Templates
= generate_templates(TemplateList);
create_templates(TemplateList);
unwrap_templates(TemplateList);
TemplateList
= nil | (Template) , TemplateList
Template
= nil | ( Attribute , BOOL ) , Template
Flags
= sensitive_prevents_read(BOOL);
unextractable_prevents_read(BOOL);
BOOL
= true | false
Table 1: Syntax of Meta-language for describing PKCS#11 conﬁgurations
263KeyGenerate :
new n,k
−−−−→ h(n, k); A(n, B)
(with B ∈ G)
KeyPairGenerate :
new n,s
−−−−→ h(n, s), pub(s); A(n, B)
(with B ∈ G)
Wrap (sym/sym) :
h(x1, y1), h(x2, y2); wrap(x1, ⊤), extract(x2, ⊤) → {|y2|}y1
Wrap (sym/asym) : h(x1, priv(z)), h(x2, y2); wrap(x1, ⊤), extract(x2, ⊤) → {y2}pub(z)
Wrap (asym/sym) : h(x1, y1), h(x2, priv(z)); wrap(x1, ⊤), extract(x2, ⊤) → {|priv(z)|}y1
Unwrap (sym/sym) :
h(x, y2), {|y1|}y2 ; unwrap(x, ⊤),
new n1−−−−→ h(n1, y1); A(n1, B)
Unwrap (sym/asym) : h(x, priv(z)), {y1}pub(z); unwrap(x, ⊤),
Unwrap (asym/sym) :
h(x, y2), {|priv(z)|}y2 ; unwrap(x, ⊤),
(with B ∈ U )
new n1−−−−→ h(n1, y1); A(n1, B)
(with B ∈ U )
new n1−−−−→ h(n1, priv(z)); A(n1, B)
(with B ∈ U )
SEncrypt :
h(x1, y1), y2; encrypt(x1, ⊤) → {|y2|}y1
SDecrypt : h(x1, y1), {|y2|}y1 ; decrypt(x1, ⊤) → y2
AEncrypt :
h(x1, priv(z)), y1; encrypt(x1, ⊤) → {y1}pub(z)
ADecrypt : h(x1, priv(z)), {y2}pub(z); decrypt(x1, ⊤) → y2
SetAttribute :
h(x1, y1); a(x1, ⊥), Aconf(a)(x1, ⊥) → ; a(x1, ⊤), Atied(a)(x1, ⊤)
(with a ∈ A \ sticky off attributes)
UnsetAttribute :
h(x1, y1); a(x1, ⊤) → ; a(x1, ⊥), Atied(a)(x1, ⊥)
(with a ∈ A \ sticky on attributes)
CreateObject :
x;
new n−−−→ h(n, x); A(n, B)
(with B ∈ C)
GetAttribute : h(n, x); extract(n, be), sensitive(n, bs) → x
0
@
with be, bs ∈ {⊥, ⊤} and
sensitive prevents read(⊤) ⇒ bs = ⊥ and
unextractable prevents read(⊤) ⇒ be = ⊤
1
A
Notation:
- A = {a1, . . . , am} denotes the (ordered) set of attributes
- B = {b1, . . . , bm} denotes a template, i.e. a set of Boolean values for attributes A
- A(n, B) stands for a1(n, b1), . . . , am(n, bm) while A(n, b) stands for a1(n, b), . . . , am(n, b)
- B(n, B), with B = {aj1 , . . . , ajk } ⊆ A denotes aj1 (n, bj1 ), . . . , ajk (n, bjk ), i.e.,
the projection of A(n, B) on B
- Aconf(a) is the subset of attributes a′ ∈ A conﬂicting with a, i.e., such that conflict(a′, a)
- Atied(a) is the subset of attributes a′ ∈ A tied to a, i.e., such that tied(a′, a)
Table 2: PKCS#11 key management subset with side conditions from the meta-language of table 1
264Key Generation Templates
A major diﬀerence between our model and the DKS model
is that we take into account key templates. In DKS, the key
generation commands create a key with all its attributes
unset [8, Fig. 2]. Attributes are then be enabled one by
one using the SetAttribute command.
In our experiments
with real devices, we discovered that some tokens do not
allow attributes of a key to be changed. Instead, they use a
key template specifying settings for the attributes which are
given to freshly generated keys. Templates are used for the
import of encrypted keys (unwrapping), key creation using
CreateObject and key generation. The template to be used in
a speciﬁc command instance is speciﬁed as a parameter, and
must come from a set of valid templates, which we label G, C
and U for the valid templates for key generation, creation
and unwrapping respectively. Tookan can construct the set
of templates in two ways: the ﬁrst, by exhaustively testing
the commands using templates for all possible combinations
of attribute settings, which may be very time consuming,
but is necessary if we aim to verify the security of a token.
The second method is to construct the set of templates that
should be allowed based on the reverse-engineered attribute
policy (see next paragraph). This is an approximate process,
but can be useful for quickly ﬁnding attacks. Indeed, in our
experiments, we found that these models reﬂected well the
operation of the token, i.e. the attacks found by the model
checker all executed on the tokens without any ‘template
invalid’ errors.
Attribute Policies
Most tokens we tested attempt to impose some restrictions
on the combinations of attributes that can be set on a key
and how these may be changed. Some restrictions are listed
as mandatory in the standard, though we found that not all
tokens actually implement them.
In our meta-model lan-
guage, we describe four kinds of restriction that Tookan can
infer from its reverse engineering process:
Sticky_on These are attributes that once set, may not
be unset. The PKCS#11 standard lists some of these [14,
Table 15]: sensitive for secret keys, for example. As shown
in table 2, the UnsetAttribute rule is only included for at-
tributes which are not sticky on. To test if a device treats
an attribute as sticky on, Tookan attempts to create a key
with the attribute on, and then calls SetAttribute to change
the attribute to oﬀ.
Sticky_off These are attributes that once unset may not
be set. In the standard, extractable is listed as such an at-
tribute. As shown in table 2, the SetAttribute rule is only
included for attributes which are not sticky oﬀ. To test if
a device treats an attribute as sticky on, Tookan attempts
to create a key with the attribute oﬀ, and then calls SetAt-
tribute to change the attribute to on.
Conflicts Many tokens (appear to) disallow certain pairs
of attributes to be set, either in the template or when chang-
ing attributes on a live key. For example, some tokens do not
allow sensitive and extractable to be set on the same key. As
shown in table 2, the SetAttribute rule is adjusted to prevent
conﬂicting attributes from being set on an object or on the
template. When calculating the template sets C, G, U (see
above), we forbid templates which have both the conﬂicting
attributes set. To test if a device treats an attribute pair as
a conﬂict, Tookan attempts to generate a key with the the
pair of attributes set, then if no error is reported, it calls
GetAttribute to check that the token really has created a key
with the desired attributes set.
Tied Some tokens automatically set the value of some at-
tributes based on the value of others. For example, many
tokens set the value of always sensitive based on the value
of the attribute sensitive. As shown in table 2, the SetAt-
tribute and UnsetAttribute rules are adjusted to account for
tied attributes. The template sets C, G, U are also adjusted
accordingly. To test if a device treats an attribute pair as
tied, Tookan attempts to generate a key with some attribute
a on and all other attributes oﬀ. It then uses GetAttribute
to examine the key as it was actually created, and tests to
see if any other attributes were turned on.
Respecting the Standard
Tookan checks two vital aspects of the token’s behaviour:
footnote 7 in table 15 of the standard speciﬁes that certain
attributes of an object may not be revealed via a GetAt-
tribute query if either the object’s sensitive attribute is set
to true, or the extractable attribute is set to false. We test
these conditions independently by attempting to read the
attribute giving the true value of a secret key. The results
are respectively stored in sensitive_prevents_read and
unextractable_prevents_read. Clearly if either of these
are false for a real token, we have a vulnerability, since
these are two of the critical security properties the token is
supposed to provide. Nevertheless, we include them in our
model since several of the tokens we tested fail to enforce
these restrictions.
Optimising the Template Set
For tokens which allow a large number of diﬀerent templates,
the sets C, G, U can get very large, which creates a model that
is very slow to search. We apply some simple optimisations
to the template set that make a signiﬁcant improvement to
performance. Speciﬁcally, we construct a set of attributes
A+ which only appear in the model set to true and do not
appear in any conﬂicts. It is easy to see that if there are
no rules that test this attribute is false, and it does not
aﬀect the value of any other attributes, then we need only
construct templates where these attributes are set to true.
Likewise, we construct a set of attributes A− which only
appear in the model set to false. We need not construct
templates where this attribute is true.
Implementing Abstractions for Proving Security
In previous work [11], we proved that for models where at-
tributes are static (i.e. they are all both sticky on and sticky
oﬀ), we can make an over-approximation for the generation
of fresh handles and keys that allows us to prove security
for an unbounded number of handles and keys using a small
ﬁnite model.
Intuitively, the idea is to generate one key
for each template, and to allocate one handle for each tem-
plate. If a template is used twice, the same handle is gen-
erated, even if the key is diﬀerent. Tookan has an option
that builds a model following this abstraction. Since it is an
over approximation, the abstract model may suggest false
attacks. In this case, the user can switch back to the con-
crete, bounded model, where a user deﬁned number of fresh
handles and keys are used.
2653.3 Limitations of Reverse Engineering
Our reverse engineering process is not complete:
it may
result in a model that is too restricted to ﬁnd some attacks
possible on the token, and it may suggest false attacks which
cannot be executed on the token. This is because in the-
ory, no matter what the results of our ﬁnite test sequence,
the token may be running any software at all, perhaps even