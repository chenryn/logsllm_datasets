One of the oracles considered in that work is the interval
oracle, that indicates if the plaintext is inside or outside a
speciﬁc interval.
Attack Prerequisites. More speciﬁcally, for an RSA private
key (N, d) assume we have an oracle that outputs the following
for every ciphertext c
(cid:2)
In(c) =
1 if cd mod N starts with bit 1
0 otherwise
.
That is, the oracle outputs for a given ciphertext c whether
its decryption cd mod N lies in the interval [0, 28(cid:2)−1] or not,
where (cid:2) is the length of N in bytes.
High Level Attack Description.
The main idea of the
attack is to generate two random multiplications c1 = a · c
and c2 = b · c of the ciphertext c, and then use an eu-
clidean greatest common divisor (gcd) algorithm to compute
gcd(c1, c2). When a pair of ciphertext c1, c2 is found such that
gcd(c1, c2) = 1, it is possible to efﬁciently recover cd mod N.
The gcd algorithm is calculated using the Interval oracle. See
Ben-Or et al. [8] for a more complete description.
Attack Efﬁciency. The attack of Ben-Or et al. [8] is relatively
N oracle queries to decrypt
efﬁcient, requiring about 15 log2
a ciphertext c. For a random choice of c1 and c2 the attack
succeeds with a probability of 6/π2.
F. Notation and Additional Padding Oracle Attacks
Several works follow-up on the attacks of Ben-Or et al. [8],
Bleichenbacher [11], and Manger [47], obtained similar results
using other padding oracles commonly found in implemen-
tations of PKCS #1 v1.5, where some oracles provide more
(cid:21)(cid:20)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
information than others [7, 42]. In this paper, we consider four
different checks that an implementation can validate against
the RSA-decrypted padded plaintext. All implementations start
by checking that the padded plaintext starts with 0x0002, and
then may proceed with further checks.
• The ﬁrst check corresponds to the test for a zero byte
.
somewhere after the ﬁrst ten bytes of the plaintext.
• The second check veriﬁes that there are no zero bytes in the
padding string PS(cid:3)(cid:3)
• The third check veriﬁes the plaintext length against some
speciﬁc value (48 byte for a TLS premaster secret in our
case).
• Finally, the fourth check is payload-aware and TLS-speciﬁc:
it veriﬁes the ﬁrst two bytes of the payload; these bytes
are set to the client’s protocol version as deﬁned in RFC-
5246 [21].
Notation. We extend the notation of Bardou et al. [7] to
refer to various oracles. Speciﬁcally, our notation is:
FFFF denotes an oracle that gets as input a ciphertext and
returns true only if the corresponding plaintext passes
all four checks. This is the same as the Bad-Version
Oracle (BVO) of Kl´ıma et al. [42].
FFFT denotes an oracle that returns true for ciphertexts
corresponding to plaintexts that pass the ﬁrst three
checks, ignoring the fourth check.
FFTT is an oracle that only veriﬁes ﬁrst two checks. This is
the Bleichenbacher oracle described in Section II-C
FTTT denotes an oracle that returns true if the decrypted
plaintext passes the ﬁrst check and disregards the last
three checks.
TTTT is an oracle that disregards the four checks, returning
true for ciphertexts whose corresponding plaintexts
start with 0x0002.
denotes a Manger oracle (Section II-D).
denotes an Interval oracle (Section II-E).
M
I
G. The TLS Mitigation for the Bleichenbacher attack
The TLS speciﬁcations [19, 20, 21] deﬁne defences for the
Bleichenbacher attack. The decrypted message m is used as a
shared premaster secret between the client and the server. Cru-
cially, the attacker does not know the plaintext of the messages
sent as part of the attack, and cannot, therefore, distinguish
random strings from correctly decrypted plaintexts. Thus, to
mitigate the Bleichenbacher attack, the server regenerates a
random premaster secret, and swaps it for the plaintext if the
PKCS #1 v1.5 validation fails.
This choice of premaster secret depending on the validity
of the padding must be done in constant-time as well. Unfor-
tunately, correctly implementating this mitigation is a delicate
task as any differences in the server’s behavior between the
PKCS #1 v1.5 conforming and the non-conforming cases may
be exploited to obtain a Bleichenbacher-type oracle [12, 48].
Although most
to implement
constant-time code for this mitigation, we show that all but two
are still vulnerable to microarchitectural side-channel attacks.
implementations do attempt
H. Microarchitectural Side Channels
To improve the performance of programs, modern pro-
cessors try to predict
the future program behavior based
on its past behavior. Thus, processors typically cache some
microarchitectural state that depends on past behavior and
subsequently use that state to optimize future behavior. Unfor-
tunately, when multiple programs share the use of the same
microarchitectural components, the behavior of one program
may affect the performance of another. Microarchitectural side
channel attacks exploit this effect to leak otherwise unavailable
information between programs [27].
Cache-Based Side Channel Attacks. Caching components,
and in particular data and instruction caches, are often ex-
ploited for microarchitectural attacks. Cache-based attacks
have been used to retrieve cryptographic keys [2, 10, 31, 38,
46, 56, 57, 64, 69], monitor keystrokes [32], perform website
ﬁngerprinting [55], and attack other algorithms [14, 67]. At a
high level, cache attacks typically follow one of two patterns,
which we now discuss.
FLUSH+RELOAD.
In the FLUSH+RELOAD [69] attack and
its variations [32, 33, 70], the attacker ﬁrst evicts (ﬂushes) a
memory location from the cache. The attacker then waits a bit,
before reloading the ﬂushed location again, while measuring
the time that this reload takes. If the victim accesses the same
memory location between the ﬂush and the reload phases, the
memory will be cached, and access will be fast. Otherwise,
the memory location will not be cached and the access will be
slower. Thus, the attacker deduces information regarding the
victim’s access patterns to a given address.
PRIME+PROBE.
Attacks employing the PRIME+PROBE
technique [56, 57] or similar techniques [2, 22, 38, 46], ﬁrst
ﬁll the cache with the attacker’s data. The attacker then waits,
allowing the victim to execute code before measuring the time
to access the previously cached data. When the victim accesses
its data, this data evicts some of the attacker’s data from the
cache. By measuring the access time to the previously cached
data, the attacker can infer some information on the victim’s
memory access patterns.
Attack Limitations and Obtaining Co-location.
Both
attacks require that the victim and attacker share some CPU
caching components, implying that both programs have to
run on the same physical machine. While FLUSH+RELOAD
tends to be more accurate and have fewer false positives
than PRIME+PROBE [69], FLUSH+RELOAD also requires the
attacker to share memory with the victim and is thus typically
applied to monitoring victim code execution patterns, rather
than data accesses. Although modern Iaas cloud providers do
not share memory between VMs [46], FLUSH+RELOAD can
be used to attack PaaS clouds services [71].
Branch-Prediction Attacks.
The branch predictor of
the processor has also been a target for microarchitectural
attacks [3, 24, 25, 26, 44]. The branch predictor typically
consists of two components, the Branch Target Buffer (BTB)
which predicts branch destinations, and the Branch History
(cid:21)(cid:20)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
Buffer (BHB), also known as the directional predictor, which
predicts the outcome of conditional branches.
When a program executes a branch instruction, the pro-
cessor observes the branch outcome and destination and
modiﬁes the state of the branch predictor. Attacks on the
branch predictor exploit either the timing differences between
correct or incorrect prediction or the performance monitoring
information that the processor provides to recover the state
of the predictor and detect the outcomes of prior branches
executed by a victim program.
To mitigate Spectre attacks [43], Intel introduced mech-
anisms for controlling the branch predictor [37]. It is not
clear whether these mechanisms completely eliminate branch
prediction channels [28]. Furthermore, we have veriﬁed that
by default Ubuntu Linux does not use the Indirect Branch
Predictor Barrier mechanism to protect user processes from
each other.
III. ATTACK MODEL AND METHODOLOGY
In this paper, we target implementations of PKCS #1 v1.5
that leak information via microarchitectural side channels. We
then exploit the leaked information to implement a padding
oracle, which we use to decrypt or to sign a message. To
mount our attacks the adversary needs three capabilities:
1. Side Channel Capability. The ﬁrst capability an adversary
needs is to mount a microarchitectural side channel attack
against a vulnerable implementation. For that, the adversary
needs the ability to execute code on the machine that runs the
victim’s implementation. See Section II-H for a more detailed
discussion on how the adversary might obtain such an ability.
2. Privileged Network Position Capability.
Our attacks
exploit a padding oracle attack to perform a private key
operation such as a signature or decryption of a message that
has been sent to the victim. To decrypt a ciphertext and use
its result, an adversary must ﬁrst obtain a network man-in-the-
middle position. To forge signatures, an adversary must ﬁrst
obtain the relevant data to sign and be in a privileged position
to exploit it.
3. Decryption Capability. The third capability our adversary
needs is the ability to trigger the victim server to decrypt
ciphertexts chosen by the adversary.
A concrete attack scenario we consider in this work is at-
tacking a TLS server running on the same physical hardware as
an unprivileged attacker. For example, a TLS server running in
a virtual machine on a public cloud server, where the physical
server hardware is shared between the victim’s TLS server
and an attacker’s virtual machine. Indeed, previous works have
shown that attackers can achieve co-location [35, 36, 58, 65],
and leverage it for mounting side channel attacks [36]. Thus,
the ﬁrst capability is achievable for a determined adversary.
The second and third capabilities are achievable in this
scenario by an attacker that controls any node along the path
between the client and the server. Malicious network operators
are one example of actors that have such control, but this is not
stages:
• Data Conversion.
First, the RSA ciphertext is decrypted
the only case. In particular, attackers can exploit vulnerabilities
in routers to assume control and mount our attack [18].
There are, however, some problems speciﬁc to this scenario.
The recent version of the TLS protocol, TLS 1.3, no longer
supports RSA key exchanges, and in TLS 1.2 (Elliptic Curve)
Difﬁe-Hellman key exchanges are recommended over RSA
key exchanges. Hence, the adversary needs to perform active
protocol downgrade attacks to force the use of RSA in
the communication. Furthermore, clients, such as browsers,
impose time limits on the handshake, forcing the attacker
to complete an attack that may require a large number of
decryption within a short time. Section VI explains how we
can perform such downgrade attacks, within the time limits.
IV. VULNERABILITY CLASSIFICATION
We now examine an outline of typical RSA PKCS #1 v1.5
implementations, explain where padding oracle vulnerabilities
arise in these, and provide concrete examples from TLS im-
plementations we investigated. Further examples are included
in Appendix A.
Handling PKCS #1 v1.5 in TLS typically consists of three
and the resulting plaintext is converted into a byte array.
• PKCS #1 v1.5 Veriﬁcation. Next, the conformity of the
array to the PKCS #1 v1.5 standard is checked.
• Padding Oracle Mitigations.
Finally, if the array is
not PKCS #1 v1.5 conforming,
the server deploys the
padding oracle countermeasures presented in Section II-G.
As discussed, the risk of padding oracle attacks is only
mitigated after the countermeasures are deployed.
Unfortunately, despite more than twenty years of research in
both padding oracle attacks and side channel resistance, in
this work we ﬁnd that vulnerabilities still occur in all of these
stages. We now provide a high level description of the various
stages and their associated side channel vulnerabilities.
A. Data Conversion.
In RSA, the plaintext and the ciphertext are large num-
bers, e.g. 2048-bit long. These are typically represented as
little-endian arrays of 32- or 64-bit words. PKCS #1 v1.5,
however uses big-endian byte arrays, thus requiring a format
conversation. For values of ﬁxed length, this conversation is
relatively straightforward. However, while the length of the
RSA modulus provides an upper bound on the length of the
RSA decryption result, the exact length of the RSA plaintext
is not known until after RSA decryption of the corresponding
ciphertext. Thus, if the RSA decryption result is too short, the
little-to-big endian conversation code has to pad the ciphertext
with a sufﬁcient amount of zero bytes.
As an example, consider the pseudo code of the implementa-
tion of the OpenSSL function RSA padding check none in
Listing 1. The function is called as part of the implementation
of the TLS protocol in OpenSSL, and its purpose is to copy the
(cid:21)(cid:20)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
1 int RSA_padding_check_none(to, tlen, from, flen){
2 // to is the output buffer of maximum length tlen
bytes
3 // from is the input buffer of length flen bytes
4
5
6
7 }
memset(to, 0, tlen - flen);
memcpy(to + tlen - flen, from, flen);
return tlen;
Listing 1. Pseudocode of raw plaintext copy with no padding check
RSA decryption results to an output buffer, without perfoming
any padding checks.
To handle the case that the plaintext from the RSA decryp-
tion is smaller than the output buffer, RSA padding check -
none uses memset to pad the output buffer where the padding
length is set to the difference between the lengths of the output
array and the plaintext. In case of a full-length plaintext, the
length of the padding is zero. Using a branch prediction attack
we can detect this scenario, and learn whether the plaintext is
full-length (see Section V-B for a complete discussion). This
gives us the oracle required for a Manger attack.
Unfortunately,
this example is by no means unique,
and multiple implementation expose FTTT- or Manger-type
padding oracles during the data conversion phase. See Ap-
pendix A for further examples.
B. PKCS #1 v1.5 Veriﬁcation
Once the data is represented as a sequence of bytes, the
implementation needs to check that it is PKCS #1 v1.5 con-
forming, that is, that the ﬁrst byte is zero, the second is 0x02,
the following eight bytes are non-zero, and that there is a zero
byte at a position above 10. Yet, many implementations branch
on the results of these checks, leaking the outcome to a side
channel attacker via the implementation’s control ﬂow. The
exact oracle obtained depends on the speciﬁc implementation
and the type of leakage.
OpenSSL Decryption API. OpenSSL’s RSA PKCS #1 v1.5
decryption API provides an example of such an issue.
OpenSSL exports a function, RSA public decrypt, whose
arguments are an input buffer containing the ciphertext, an
output buffer for the plaintext, the RSA decryption key, and
the padding mode to check the plaintext against. When using
PKCS #1 v1.5 padding, RSA public decrypt invokes RSA -
padding check PKCS1 type 2 to validate the padding af-
ter decryption. A pseudocode of the validation function is
shown in Listing 2.
As the pseudocode shows, OpenSSL performs the checks
outlined in Section II-B in constant-time (Lines 7–13), re-
turning the length of the decrypted message if the decryption
is successful, or −1 if there is a padding error. To set the
return value, the function uses an explicit branch (Line 17).
Furthermore, the memory copy in Line 21 is only executed
in case of a successful decryption, whereas the error logging
(Line 25) is invoked in the case of a padding error.
A comment in the code (Line 15) indicates that the authors
are aware of the leakage, and the manual page for the function
warns against its use [54]. Thus, OpenSSL does not use this
PKCS #1 v1.5 veriﬁcation code for its own implementation
of the TLS protocol. Furthermore, both Xiao et al. [66] and
Zhang et al. [72] exploit the leakage through the conditional
error logging for mounting Bleichenbacher attacks.
Amazon’s s2n.
OpenSSL is the cryptographic engine
underlying many applications, all of these are potentially vul-
nerable to our cache-based padding oracle attack. Speciﬁcally,
Amazon’s implementation of the TLS protocol, s2n [62], uses
this API, and consequently leaks an FFTT-type oracle. For
other vulnerabilities in s2n, see Appendix A-B.
C. Padding Oracle Mitigations.
As Section II-G describes, when a TLS implementation detects
that a plaintext does not conform to the PKCS #1 v1.5 format,
it cannot just terminate the handshake, because this creates a
padding oracle. Instead it must replace the non-conforming
plaintext with a random sequence of bytes and proceed with
the TLS handshake. However, some implementations fail
to protect this replacement, leaking the deployment of the
countermeasure and allowing the creation of a padding oracle.
Apple’s CoreTLS. An example of such leakage is present
in CoreTLS, Apple’s implementation of the TLS protocol that
is often used in MacOS and iOS devices. Listing 3 shows the
code that handles Bleichenbacher mitigations in CoreTLS (i.e.,
replacing the incorrectly-padded RSA plaintext with random
data). Lines 7 and 8 perform the RSA decryption and the