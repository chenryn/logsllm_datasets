• NIWI.Prove: On input (crs; Φ; x), where Φ is a boolean formula and Φ(x) = 1, outputs a
proof π.
• NIWI.Verify: On input (crs; Φ; π), outputs a boolean.
5
The completeness requirement is that NIWI.Verify(crs; Φ; NIWI.Prove(crs; Φ; x)) = 1, if Φ(x) = 1
(i.e., x is a witness for Φ). The (perfect) witness indistinguishability requirement is that the
distributions NIWI.Prove(crs; Φ; x1) and NIWI.Prove(crs; Φ; x2) are identical when x1 and x2 are
witnesses for Φ. For the soundness/proof of knowledge requirement, we require the following
additional algorithms:
• NIWI.SimSetup: Outputs a simulated reference string crs and trapdoor ψ.
• NIWI.Extract: On input (crs, ψ; Φ; π), outputs a witness x.
We require that the crs output by NIWI.SimSetup is indistinguishable to that of NIWI.Setup.
Further, we require that for every (crs, ψ) ← NIWI.SimSetup, if NIWI.Verify(crs; Φ; π) = 1 then
NIWI.Extract(crs, ψ; Φ; π) outputs a valid witness for Φ, with overwhelming probability.
3 Attribute-Based Signatures: Deﬁnitions and Security
We present the formal deﬁnitions of attribute-based signatures (ABS). An overview of how ABS
can be used in an attribute-based system can be found in Appendix A
Let A be the universe of possible attributes. A claim-predicate over A is a monotone boolean
function, whose inputs are associated with attributes of A. We say that an attribute set A ⊆ A
satisﬁes a claim-predicate Υ if Υ(A) = 1 (where an input is set to be true if its corresponding
attribute is present in A).
Deﬁnition 4 (ABS). An Attribute-Based Signature (ABS) scheme is parameterized by a universe
of possible attributes A and message space M, and consists of the following four algorithms.
• ABS.TSetup (to be run by a signature trustee: Generates public reference information T P K.
• ABS.ASetup (to be run by an attribute-issuing authority): generates a key pair AP K, ASK ←
• ABS.AttrGen: On input (ASK,A ⊆ A), outputs a signing key SKA.3
• ABS.Sign: On input (P K = (T P K, AP K), SKA, m ∈ M, Υ), where Υ(A) = 1, outputs a
ABS.ASetup.
signature σ.
• ABS.Ver: On input (P K = (T P K, AP K), m, Υ, σ), outputs a boolean value.
Deﬁnition 5 (Correctness). We call an ABS scheme correct if for all T P K ← ABS.TSetup,
all purported AP K, all messages m, all attribute sets A, all
signing keys SKA ←
ABS.AttrGen(ASK,A), all claim-predicates Υ such that Υ(A) = 1, and all signatures σ ←
ABS.Sign(cid:0)P K = (T P K, AP K), SKA, m, Υ(cid:1), we have ABS.Ver(P K = (T P K, AP K), m, Υ, σ) = 1.
We present two formal deﬁnitions that together capture our desired notions of security. Slightly
weaker security requirements may also be useful for most applications, but we use the stronger ones
because our constructions satisfy them and because they are much easier to work with.
For simplicity, we only present deﬁnitions for the simpler case of a single attribute-issuing
authority. The deﬁnitions for multiple authorities are analogous, and we discuss this case in
Section 5.
Deﬁnition 6 (Perfect Privacy). An ABS scheme is perfectly private if,
for all hon-
estly generated T P K ← ABS.TSetup, all purported AP K, all attribute sets A1,A2, all
3 For simplicity, we treat the signing key as a monolithic quantity. However, in our construction the signing key
consists of separate components for each attribute in A, and the ABS.Sign algorithm needs only as much of SKA as
is relevant to the claim-predicate.
6
SK1 ← ABS.AttrGen(ASK,A1), SK2 ← ABS.AttrGen(ASK,A2), all messages m, and all
claim-predicates Υ such that Υ(A1) = Υ(A2) = 1, the distributions ABS.Sign(P K, SK1, m, Υ) and
ABS.Sign(P K, SK2, m, Υ) are equal.
In other words, the signer’s privacy relies only on the signature trustee, and not the attribute-
issuing authority. Even a malicious and computationally unbounded attribute-issuing authority
cannot link a signature to a set of attributes or the signing key used to generate it.
We slightly overload notation and write ABS.Sign(ASK, m, Υ) (i.e., with the attribute au-
thority’s private key ASK instead of P K and SKA) to denote the following procedure: ﬁrst,
run SKA ← ABS.AttrGen(ASK,A) for any arbitrary A satisfying Υ; then output the result of
ABS.Sign(P K, SKA, m, Υ). For convenience in the experiment below we use ABS.Sign(ASK,·,·)
to generate signatures requested by the adversary. This is reasonable when the scheme satisﬁes
perfect privacy, since any other way of letting the adversary obtain signatures will result in the
same distribution.
Deﬁnition 7 (Unforgeability). An ABS scheme is unforgeable if the success probability of any
polynomial-time adversary in the following experiment is negligible:
1. Run T P K ← ABS.TSetup and (AP K, ASK) ← ABS.ASetup. Give P K = (T P K, AP K) to
the adversary.
2. The adversary is given access to two oracles: ABS.AttrGen(ASK,·) and ABS.Sign(ASK,·,·).
3. At the end the adversary outputs (m∗, Υ∗, σ∗).
We say the adversary succeeds if (m∗, Υ∗) was never queried to the ABS.Sign oracle, and
ABS.Ver(P K, m∗, Υ∗, σ∗) = 1, and Υ∗(A) = 0 for all A queried to the ABS.AttrGen oracle.
Thus any signature which could not have been legitimately made by a single one of the
adversary’s signing keys is considered a forgery. Note that we do not consider it a forgery if the
adversary can produce a diﬀerent signature on (m, Υ) than the one he received from the signing
oracle.
4 Constructing ABS Schemes
4.1 Credential Bundles
We introduce a new generic primitive called credential bundles, which we use in our ABS
constructions. Credential bundles model the intuitive requirements of publicly veriﬁable attributes
that resist collusion.
Deﬁnition 8 (Credential bundle scheme). A credential bundle scheme is parameterized by a
message space M, and consists of the following three algorithms.
• CB.Setup: Outputs a veriﬁcation key vk and a secret key sk.
• CB.Gen: On input (sk,{m1, . . . , mn} ⊆ M), outputs a tag τ and values σ1, . . . , σn.
• CB.Ver: On input (vk, m, (τ, σ)), outputs a boolean value.
The scheme is correct
CB.Ver(vk, mi, (τ, σi)) = 1 for all i.
if,
for all
(τ, σ1, . . . , σn) ← CB.Gen(sk, m1, . . . , mn), we have
Clearly by excluding some of the σi’s from an existing bundle, one can generate a new bundle
on a subset of attributes. Our main security deﬁnition requires that taking a subset of a single
bundle is the only way to obtain a new bundle from existing bundles; in particular, attributes from
several bundles cannot be combined.
7
Deﬁnition 9. A credential bundle scheme is secure if the success probability of any polynomial-time
adversary in the following experiment is negligible:
n} was ever queried (in a single query) to the CB.Gen oracle.
1. Run (vk, sk) ← CB.Setup, and give vk to the adversary.
2. The adversary is given access to an oracle CB.Gen(sk,·).
3. At the end the adversary outputs (τ∗, (m∗
n, σ∗
1), . . . , (m∗
We say the adversary succeeds if CB.Ver(vk, m∗
{m∗
1, . . . , m∗
From any plain digital signature scheme we can easily construct a credential bundle scheme in
which the bundle is a collection of signatures of messages “τ(cid:107)mi”, where each mi is the name of an
attribute and τ is an identiﬁer that is unique to each user (e.g., an email address). Conversely, when
a credential bundle scheme is restricted to singleton sets of messages, its unforgeability deﬁnition
is equivalent to normal digital signature unforgeability. Despite this equivalence under black-box
reductions, the syntax of credential bundles more closely models our desired semantics for ABS.
i )) = 1 for all i ≤ n, and if no superset of
1, σ∗
i , (τ∗, σ∗
n)).
4.2 A Framework for ABS
Our generic ABS construction for the case of a single attribute authority is given in Figure 1. The
construction generalizes easily to the multiple attribute authority case (Section 5). At a high level,
to sign a message m with claim-predicate Υ, the signer proves that she possesses either a credential
bundle containing either suﬃcient attributes to satisfy Υ, or a “pseudo-attribute” identiﬁed with
the pair (m, Υ). Only the signature trustee is capable of generating bundles involving pseudo-
attributes (these are veriﬁed against the trustee’s veriﬁcation key tvk), but it never does so. Thus
the proof is convincing that the signer satisﬁed Υ. However, in the security reduction, the pseudo-
attribute provides a mechanism to bind the NIWI proof to a message and give simulated signatures.
In Appendix C.1 we prove the following:
Theorem 1. Given a NIWI argument of knowledge scheme and any secure credential bundle
scheme (equivalently, any digital signature scheme), the construction in Figure 1 is a secure ABS
scheme. Further, if the NIWI argument is perfectly hiding, the ABS scheme is perfectly private.
4.3 Practical Instantiation 1
Our ﬁrst practical instantiation uses Groth-Sahai proofs [22] as the NIWI component and Boneh-
Boyen signatures [7] as the credential bundle component. One notable feature of this choice is that
attributes in the scheme are simply Boneh-Boyen signatures on messages of the form “userid(cid:107)attr”.
This instantiation requires cyclic groups of prime order equipped with bilinear pairings (Sec-
tion 2.1). The Groth-Sahai system can prove satisﬁability of pairing-product equations in such
groups, and the main challenge in this instantiation is expressing the logic of the claim-predicate
and the Boneh-Boyen signature veriﬁcation in this limited vocabulary. We identify Z∗
p with the
universe of attributes, where p is the size of the cyclic group used in the scheme.4
Boneh-Boyen signatures We brieﬂy review the Boneh-Boyen digital signature scheme [8]. As
before, we suppose there is a bilinear pairing e : G × H → GT , where G and H have prime order
p, and where g is a generator of G, and h is a generator of H. The scheme, described below, is
strongly unforgeable under the q-SDH assumpion (Deﬁnition 1).
4More precisely A ∪ A(cid:48) ⊆ Z∗
p where A(cid:48) is the universe of pseudo-attributes. As is standard, the universe of
(pseudo-)attributes can be extended to {0, 1}∗ by applying a collision-resistant hash with range Z∗
p.
8
Let A be the desired universe of ABS attributes. Let A(cid:48) denote a space of pseudo-attributes,
where A ∩ A(cid:48) = ∅. For every message m and claim-predicate Υ we associate a psuedo-attribute
am,Υ ∈ A(cid:48). Let CB be a secure credential bundle scheme, with message space A ∪ A(cid:48), and let
NIWI be a perfect NIWI proof of knowledge scheme. Our ABS construction is as follows:
ABS.TSetup: The signature trustee runs crs ← NIWI.Setup as well as (tvk, tsk) ← CB.Setup and
publishes T P K = (crs, tvk).
ABS.ASetup: The attribute-issuing authority runs (avk, ask) ← CB.Setup and publishes AP K =
avk and sets ASK = ask.
CB.Gen(ask,A).
ABS.AttrGen(ASK,A): Ensure that A contains no pseudo-attributes. Then output the result of
ABS.Sign(P K, SKA, m, Υ): Assume that Υ(A) = 1. Parse SKA as (τ,{σa | a ∈ A}). Υ is a
formula over formal variables A. Deﬁne (cid:101)Υ := Υ ∨ am,Υ, where am,Υ ∈ A(cid:48) is the pseudo-
attribute associated with (m, Υ). Thus, we still have (cid:101)Υ(A) = 1. Let {a1, . . . , an} denote
the attributes appearing in (cid:101)Υ. Let vki be avk if attribute ai is a pseudo-attribute, and tvk
otherwise. Finally, let Φ[vk, m, Υ] denote the following boolean expression:
(cid:16)(cid:8)ai
∃ τ, σ1, . . . , σn : (cid:101)Υ
(cid:12)(cid:12) CB.Ver(cid:0)vki, ai, (τ, σi)(cid:1) = 1(cid:9)(cid:17)
then its value does not matter). Compute π ← NIWI.Prove(cid:0)crs; Φ[vk, m, Υ]; (τ, ˆσ1, . . . , ˆσn)(cid:1).
For each i, set ˆσi = σai from SKA if it is present, and to any arbitrary value otherwise (since
= 1
(1)
Output π as the ABS signature.
ABS.Ver(P K, m, Υ, π): Output the result of NIWI.Verify(crs; Φ[vk, m, Υ]; π).
Figure 1: General framework for an ABS scheme.
DS.KeyGen: Choose random b, c, d ← Zp and compute B = gb, C = gc, D = gd. The veriﬁcation
key is (B, C, D) ∈ G3, and the signing key is (b, c, d) ∈ (Zp)3.
(cid:16)
(cid:17) ∈ H × Zp.
DS.Sign(sk, m ∈ Zp): Choose random r ← Zp; output σ =
DS.Ver(vk, m, σ = (S, r)): Output 1 if e(BCmDr, S) = e(g, h), and 0 otherwise.
h1/(b+cm+dr), t
Expressing the Non-Interactive Proof using Pairing Equations We use the notation
introduced in Figure 1. We must show how the statement Φ[vk, m, Υ] (equation 1) can be eﬃciently
encoded in the Groth-Sahai system when the credential bundles use Boneh-Boyen signatures.
Groth-Sahai proofs work by ﬁrst giving a commitment to the values of the witness, and then
proving that the commited values satisfy given pairing equations. Suppose we commit to a group
element Z (where the group G or H will be clear from context), then we will let (cid:104)Z(cid:105) denote the
formal variable corresponding to that commitment. Thus, we express the statements to be proven
as pairing equations whose formal variables we will write in the (cid:104)Z(cid:105) notation.
Suppose the modiﬁed predicate (cid:101)Υ has a canonical monotone span program M of size (cid:96) × t,
where the ith row corresponds to the a(i)-th attribute mentioned in (cid:101)Υ. To establish Φ[vk, m, Υ],
9
(cid:96)(cid:89)
(cid:40)
we prove the following equation, which implies it:
∃ τ, σ1, . . . , σn, v1, . . . , vn : (cid:126)vM = [1, 0, . . . , 0]
(cid:104)
∧ (cid:96)(cid:94)
computed from his satisfying assignment of (cid:101)Υ.
i=1
(cid:105)
vi (cid:54)= 0 ⇒ CB.Ver(vk, aa(i), (τ, σa(i))) = 1
Then, in addition to τ,{σi}, we will have the signer commit to the vector (cid:126)v which can be canonically
This new boolean expression is a conjunction of two kinds of clauses: The ﬁrst has the form
∃(cid:126)v : (cid:126)vM = [1, . . . , 0]. To prove it, we commit to the values gvi and prove the following pairing
equations (for each j ∈ [t]):
e((cid:104)gvi(cid:105) , hMi,j ) =
e(g, h)
e(g0, h)
if j = 1
otherwise
i=1
The other clauses have the form ∃ τ, σ, v :(cid:2)v (cid:54)= 0 ⇒ CB.Ver(vk, m, (τ, σ)) = 1(cid:3). When we use
Boneh-Boyen signatures as the instantiation of credential bundles, these clauses can be simpliﬁed
to
∃ τ, σ, v :(cid:2)v (cid:54)= 0 ⇒ DS.Ver(vk, τ(cid:107)m, σ) = 1(cid:3)
where DS.Ver is the Boneh-Boyen signature veriﬁcation.
It is crucial that the proof is a proof of knowledge, so the simulator can extract the credential
bundles. Thus we commit to τ and r bitwise, since they are elements of Zpand could not otherwise be
eﬃciently extracted in the Groth-Sahai scheme. In this way, the extractor can extract the bits and
reconstruct the entire witness τ and r.5 Let (τ, σ = (S, r), v) be a witness to the above expression.
i τi2i.
i τi2i. Then τ(cid:107)m may be identiﬁed with a number m2|τ| +(cid:80)
Express τ bitwise as τ = (cid:80)
Similarly, interperet r bitwise as r =(cid:80)
Using the same notation as before, we can prove satisﬁability of the clause as follows. We
commit to each ri and τi in both groups, as gri, hri, gτi, hτi, and then prove that each is indeed a
single bit, using the following pairing equations for all i:
i ri2i.
e((cid:104)gri(cid:105) , h) = e(g,(cid:104)hri(cid:105));