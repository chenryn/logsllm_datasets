B. Based on logic similar to our proof of Theorem 1 (Eqs. 9
and 10), the attack is defeated if
min(sumB) − max(sumA)  (6l)/(h − 1).
(17)
PROOF: Starting from Eq. 12, we substitute max(r) with
the bound from Eq. 15. By then substituting min(r) with
the bound from Eq. 11, we have the inequality stated in
Eq. 17.
2
4.5 Performance Implications
Given that we have bounds on q and r that are required
to defeat these attacks while ensuring cancel messages work,
we can now determine the performance implications for One-
Swarm. Speciﬁcally, we calculate the length of time to re-
ceive query responses from sources for these new delays. A
large component delays in any implementation of Onion
Routing come not from network latency, but rather from
non-intentional application-layer queuing delays, and this is
true in OneSwarm as well. Here, we perform a comparison of
minimum delays imposed by the architecture of the systems
that enables privacy, independent of traﬃc load or other
external factors.
First, we determine for the existing OneSwarm implemen-
tation the number of hops queries can travel before being
cancelled by a source one hop from a querier (as in Fig. 3.
In the source code, max(r) = 340ms, min(r) = 170ms, and
q = 150ms. Therefore, when l ≈ 75ms, and from Eq. 15, we
know that h > (max(r) + 2l)/q = (340 + 150)/150 = 3.26;
therefore h = 4 since it can only take on an integer value.
We can show that the earliest that messages can be stopped
is h > (min(r) + 2l)/q = (170 + 150)/150 = 2.13; therefore,
messages cannot be stopped before h = 3 hops from the
querier. For smaller values of l, 2 ≤ h ≤ 3, which we assume
below as a conservative estimate.
Second, given this value, we can determine the number
of peers that receive traﬃc for each query, even if answered
by a direct neighbor. When h = 2, and p = 0.95 and with
a full topology, each query will reach (39 ∗ 0.95)2 = 1373
peers. When h = 3 this value increases to 50,859 peers; the
importance of limiting h = 2 is clear.
Third, given h = 2, we can now solve for values of q and r
that protect OneSwarm users. From Eq. 17: q > 6l
2−1 = 6l;
and from Eq. 11: min(r) ≥ 2l; and from Eq. 12: max(r) >
10l.
Finally, these values allow us to compute, for a version of
OneSwarm immune to timing attacks, the expected time t
it takes to receive a response from a source x hops away is
E[t] = 8xl. For x=1, E(t) = 8l; For x=3, E(t) = 24l.
In comparison, because Onion Routing always consists
of a chain of 3 proxies, the delay in receiving data from
a Torrent search engine is E[t] = 6l. Therefore, for any
query, OneSwarm is always one RTT slower in terms of
roundtrip delay; for many queries OneSwarm is about 4
times slower. The number of nodes that receive query traﬃc
(in the thousands) is ineﬃcient compared to contacting a
single web server over an Onion Routing circuit.
5. COLLUSION ATTACK REVISITED
The collusion attack is a fundamental threat to OneSwarm
peers as it based on only two aspects of the protocol’s design:
that queries are forwarded with probability p when the peer
SQX1rlllqX2q...l207Figure 4: Setting for collusion attack. One attacker
queries for content and the remaining attacker each
have a probability p of receiving the query if T is not
the source.
doesn’t have requested content; and that each peer has up
to 39 neighbors. If all other attacks we present in this paper
are patched, the collusion attack remains. In this section, we
demonstrate that Isdal et al. incorrectly calculate the chance
of this attack in two ways. First, they overestimate the
success of the attack by assuming attackers are chosen with
replacement. Second, they underestimate the quick ramp up
of the attack’s success as the number of attackers grows. The
collusion attack is signiﬁcantly easier in OneSwarm than in
OR. For example, we show the chances of success reach near
100% when attackers comprise 25% of the network, whereas
success for OR would remain below 10%.
5.1 The Collusion Attack
As described in Section 2, if a peer receives a query and
does not have the requested ﬁle, it forwards the query to
only a subset of its neighbors. This subset is chosen based
upon a forwarding probability p.1 The decision to forward is
decided independently for each piece of unique content and
each neighbor and remains consistent.
The collusion attack is illustrated in Fig. 4. A set of k
colluding attackers labeled C1, . . . , Ck are directly connected
to a target peer. When C1 issues a query to target T that
has the requested ﬁle, T does not forward the query on to
its neighbors. Instead it sends back a reply after a randomly
chosen delay. Therefore, if none of the other k − 1 colluding
attackers receive the query from T , there is a non-negligible
probability that T may be sharing the ﬁle requested by
C1. This probability, which we call the attack’s precision,
is greater when k is larger. For law enforcement, higher
precision better justiﬁes having suﬃcient probable cause, as
we discuss in Section 3.
Isdal et al. calculate that with p = 0.5, achieving 95%
precision requires that at least k = 6 attackers (a querier
and 5 colluders) to be directly connected to the target. The
chance that a target that is not a source will forward the
query to at least one of the k − 1 colluders is [8]
1 − (1 − p)k−1
(18)
For example, we have 1 − (1 − 0.5)5 = 97% (which is greater
than 95%). Isdal et al. state the chances that 6 or more
colluders are attached to a particular peer when C = 30 of
the N = 1000 peers are attackers is “much less than 1%” and
“given by the binomial CDF” [8]. While they don’t state a
formula, to use the binomial, we let A be a random variable
1Here p = 1 − pf , where pf is Isdal et al.’s notation for the
probability of not forwarding a query.
Figure 5: (top) For a ﬁxed probability of forwarding
p = 0.5 (the value suggested in the paper), the plot
shows the required attackers k given the the popu-
larity of content q from Eq. 23. Each line is a diﬀer-
ent precision require φ; (bottom) The same plot for
ﬁxed probability of forwarding p = 0.95 (the value
hardcoded in software) again from Eq. 23. Both
graphs use logscales.
that denotes the number of attackers assigned to a target.
For N peers of which C are attackers, each with 26 neighbors,
we have
P{A ≥ k} =
26
i
(
C
N
)i(1 − C
N
)26−i
(19)
(cid:32)
(cid:33)
26(cid:88)
i=k
Unfortunately, the binomial is not entirely accurate, and the
statement “much less than 1%” does not give a complete
picture.
5.2 Re-Deriving the Attack
We re-derive the attack eﬀectiveness with several changes.
First, because community servers select neighbors for peers
without replacement, the hypergeometric CDF is the correct
model. Second, the paper states peers have 26 neighbors, but
in the code, peers have at least 22 but up to 39 untrusted
neighbors. We let U be the number of untrusted neighbors
of a peer.
U(cid:88)
(cid:0)C
i
(cid:1)
(cid:1)(cid:0)N−C
(cid:1)
(cid:0)N
U−i
P{A ≥ k} =
(20)
Therefore, we have in the worst case that U = 39 for Eq. 20.
i=k
U
C1T...TargetQueriesNon-attacker(s)C2C3Ckpppp 1 2 4 8 16 0.001 0.01 0.1 1Number of attackers (k)Prob. of holding queried contraband (v) φ=0.95φ=0.80φ=0.60 1 2 4 8 16 0.001 0.01 0.1 1Number of attackers (k)Prob. of holding queried contraband (v) φ=0.95φ=0.80φ=0.60208In the best case, U = 0. In reality, for each trusted neighbor,
there is a probability that it is an undercover investigator,
but it is not a scenario that we evaluate here.
The next step is to determine the value of k that defeats
OneSwarm, and we do not use Eq. 18. Instead, we let X
denote the event that the target T has content that was
searched for, and let Y denote the event that none of the
k − 1 colluders were forwarded the search query issued by
C1. From Bayes’ Theorem, we can deﬁne the precision of
the collusion attack as
P (Y |X)P (X) + P (Y | ¯X)P ( ¯X)
(21)
P (X|Y ) =
P (Y |X)P (X)
We know that P (Y |X) = 1 because given that T has the
content, the k − 1 colluders will not be forwarded the search
query. In general, not every peer will have the ﬁles of interest
that the attacker queries for; to model this situation simply,
we let P (X) = v, where 0 ≤ v ≤ 1 interpreted as the
popularity of some ﬁle of interest being queried. We know
that P (Y | ¯X) = (1 − p)k−1. Finally, we let φ = P (X|Y ), and
substituting we have
φ =
v
v + (1 − v)(1 − p)k−1
(22)
Figure 6: Plots of collusion attack success (Eq. 20
where U = 39) and ﬁrst-and-last attack against OR
(Eq. 25): The probability of success for the collusion
attack on OneSwarm for a given required minimum
value of k. The plot also shows the comparable at-
tack success against OR (ﬁrst and last peers on a
circuit).
Solving for k we get
k = 1 +
log (( v
1−v )( 1−φ
φ ))
log (1 − p)
(23)
investigator. Querying for multiple ﬁles of interest will aﬀect
the FPR, as we discuss in Section 5.3.
Fig. 5(top) plots Eq. 23 for p = 0.5 (the value suggested
in the paper) showing the minimum k value required for
diﬀerent precision levels and v as an independent variable.
Fig. 5(bottom) shows the same equation for p = 0.95 (the
value hardcoded in software). Each plot shows three lines
corresponding to precision values of 95%, 80%, and 60%. The
ﬁrst is the value used in Isdal et al., the second is conservative
for probable cause, and the last is weak evidence for probable
cause. (Note that the value of k is independent of U .)
For example, for p = 0.5, v = 0.1, and φ = 0.95, then the
attack requires k = 8 attackers (rather than 6); however, the
more important point is that the value of k varies quite a
bit with v. Roughly, as content is an order of magnitude
more popular, k typically halves in size. Comparison of the
two plots makes the obvious point that p also has a strong
inﬂuence on k. Releasing the software with a higher value
for p than documented in the paper reduced the required
number of attackers by 60–75% in all cases. Finally, when
p = 0.95, the plots demonstrate that values of k ≥ 4 are