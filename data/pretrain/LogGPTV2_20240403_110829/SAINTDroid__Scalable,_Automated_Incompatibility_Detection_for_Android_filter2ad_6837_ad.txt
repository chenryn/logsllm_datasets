25
19
25
25
25
25
25
Android but the error persisted. We then installed the development environment
in two laptops with a different operating system, but the error still persisted. Since
we are also comparing our approach to Lint, which requires building apps, those
eight apps were excluded from our analysis. We provide the basic characteristics
of the remaining 19 apps in Table 4.1. As shown, the collection includes apps of
varying sizes ranging from 10,400 lines of Dex code to 294,400 lines of Dex code
and tens of thousands of methods. The apps both support and target a variety of
API levels, with minimum levels ranging from 10 to 21 and targets ranging from
level 23 up to 27.
To further evaluate the applicability of our tool in practice, we collected a set of
real-world Android apps from two repositories of FDroid [9] and AndroZoo [32].
FDroid is a software repository that contains free and open source Android apps.
Our collection of subject systems includes all 1.391 apps available from the FDroid
repository. We also include 2,300 apps from AndroZoo, a growing repository of
Android apps collected from various sources, including the ofﬁcial Google Play
store [32]. We were unable to build 120 of the apps from AndroZoo so we excluded
25
them from our analysis, leaving 3.571 apps in total.
4.2 Variables and Measures
4.2.1
Independent Variables
Our analysis evaluates GAINDroid against other approaches which also perform
analysis of compatibility issues.
CiD represents a state-of-the-art in detecting Android compatibility issues. It
has been publicly released, and we are able to obtain the tool and compile it in our
experimental environment. We use it as the baseline system to answer RQ1 and
RQ3.
Cider is another state-of-the-art approach developed to analyze API compatibil-
ity issues. Unfortunately, it is not available in either source or binary forms at the
time of writing this article. As such, we rely on their results as reported in [46] to
answer RQ1 and RQ3.
Lint is a static analysis technique, shipped with the Android Development
Tools (ADT), to examine code bases for potential bugs, including incompatible API
usages. Lint performs the compatibility analysis as part of building apps, and
thus requires the app source code to conduct the analysis. We use Lint to answer
RQ1 and RQ3.
We also considered IctApiFinder [44] as a possible baseline technique.
IctApiFinder was introduced at about the same time as Cider. Unfortunately, the
tool is not publicly available and our attempts to contact the authors to request
access were unsuccessful. Therefore, we did not use it in our study.
26
4.2.2 Dependent Variables
As dependent variables, we chose metrics allowing us to answer each of our three
research questions.
To measure accuracy, we compare the number of detected compatibility issues
with known issues as reported by prior work [46, 51]. For each analysis technique,
we report true and false positives and false negatives thereof in detecting compat-
ibility issues of the apps under analysis. Lastly, we report precision, recall, and
F-measure for each technique.
To measure applicability, we report the number of detected compatibility issues
in real-world apps. Finally, to measure performance, we report the analysis
time and the amount of memory used by each of the analysis techniques, i.e.,
GAINDroid, CiD, and Lint.
4.2.3 Study Operation
To address RQ1 and RQ2, we executed GAINDroid, CiD, Cider and Lint once to
identify sources of API incompatibility issues, and veriﬁed how many API calls
were identiﬁed as problematic. To address RQ3, we performed this experiment
three times and measured the amount of time and memory needed to perform the
analysis of each app.
To perform this study we used a MacBook Pro running OS High Sierra version
10.13.3, with an 8GB memory and a 2.5GHz Intel Core i5. The performance times
we obtained were all recorded within this environment.
27
4.3 Threats to Validity
The primary threat to external validity in this study involves the object programs
utilized. In this work, we have studied a smaller set of benchmark programs
developed and released by prior research work [51, 46] so that we can directly
compare our results with their previously reported results. However, we also
extend our evaluation to employ over 3,590 complex real-world apps from other
repositories, which in turn enabled us to assess our system in real-world scenarios,
representative of those that engineers and analysts are facing.
The primary threat to internal validity involves potential errors in the implemen-
tations of GAINDroid and the infrastructure used to run CiD and GAINDroid.
To limit these, we extensively validated all of our tool components and scripts to
ensure correctness. By using the same objects as our baseline systems we can also
compare the results produced by our approach with those previously reported to
help with ensuring correctness.
The primary threat to construct validity relates to the fact that we study
efﬁciency measures relative to applications of GAINDroid, but do not yet assess
whether the approach helps software engineers or analysts address dependability
and security concerns more quickly than current approaches.
28
Chapter 5
Results
The results of our analysis regarding mismatch detection are summarized in
Table 5.1. For each of the 19 manually-inspected apps, we report the number of true
and false positives (represented as (cid:88)(cid:3) and (cid:2), respectively) reported by the approach
for that app for each category of mismatch (using the abbreviations introduced in
Table 2.1) as well as the number of false negatives ((cid:3)), if an approach missed a
mismatch detected by another approach and veriﬁed by manual inspection. The
bottom of the table lists the precision, recall, and F-measure for each technique
to summarize the overall effectiveness. According to [42], precision expresses
the proportion of the data points that our model says was relevant actually were
relevant, for example, APIs classiﬁed as mismatch that are actually a mismatch.
Recall expresses the ability to ﬁnd all relevant instances in a dataset, it means that,
the capability of ﬁnding every instance that is a mismatch. Finally, F-measure
is the harmonic mean of precision and recall, in other words, it is the optimal
blend of precision and recall. As reported by [41], it is important to have more
robust metrics such as the ones mentioned above because they are more suitable
for dealing with results such as true positives, false positives and false negatives.
Table 5.1: Effectiveness and Efﬁciency of GAINDroid
GAINDroid
App
AFWall+
API
(cid:88)(cid:3)(9)
DuckDuckGo
FOSS Browser
(cid:88)(cid:3)(3)(cid:2)(9)
Kolab notes
MaterialFBook (cid:88)(cid:3)(11)(cid:2)(cid:3)(3)
NetworkMonitor
h
c
n
e
B
-
r
e
d
C
i
h
c
n
e
B
-
D
C
i
NyaaPantsu
Padland
PassAndroid
SimpleSolitaire
SurvivalManual
Uber ride
Basic
Forward
GenericType
Inheritance
Protection
Protection2
Varargs
(cid:88)(cid:3)(9)
(cid:88)(cid:3)(cid:2)
(cid:88)(cid:3)
(cid:88)(cid:3)
(cid:88)(cid:3)(2)
(cid:88)(cid:3)
(cid:88)(cid:3)
(cid:88)(cid:3)(2)
APC PRM
(cid:88)(cid:3)(7)
(cid:3)
(cid:88)(cid:3)(7)
(cid:88)(cid:3)
(cid:88)(cid:3)
(cid:88)(cid:3)(5)
(cid:88)(cid:3)(12)
(cid:3)
(cid:88)(cid:3)(3)
(cid:88)(cid:3)(2)
(cid:88)(cid:3)(4)
API
(cid:3)(9)
(cid:2)(3)
(cid:2)(4)
(cid:88)(cid:3)(3)(cid:2)(13)
(cid:88)(cid:3)(14)(cid:2)(17)
(cid:2)(4)
(cid:3)(9)
(cid:88)(cid:3)(cid:2)(10)
(cid:2)(19)
(cid:2)(2)
(cid:88)(cid:3)
(cid:88)(cid:3)
(cid:88)(cid:3)(2)
(cid:88)(cid:3)
(cid:88)(cid:3)
(cid:88)(cid:3)(2)
Precision:
Recall:
F-Measure:
79% 100% 100%
93% 95% 100%
85% 98% 100%
27%
59%
42%
CiD
Cider
APC PRM API APC PRM
API
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
- (cid:88)(cid:3)(cid:3)(6)
(cid:88)(cid:3)
-
(cid:3)(7)
-
(cid:2)
-
-
(cid:3)(5)
-
(cid:3)(12)
-
(cid:88)(cid:3)
-
(cid:3)(3)
-
(cid:88)(cid:3)(cid:3)
-
-
(cid:88)(cid:3)(4)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
89%
19%
31%
-
-
-
(cid:3)
(cid:3)
0%
0%
0%
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
(cid:88)(cid:3)(1)(cid:3)(8)
(cid:3)(3)
(cid:3)(14)
(cid:3)(9)
(cid:3)
(cid:3)
(cid:3)
(cid:3)(2)
(cid:3)
(cid:3)
(cid:3)(2)
100%
2%
4%
PRM
(cid:3)
(cid:3)