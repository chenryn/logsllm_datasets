==== 对接Countly手机应用行为数据
Countly是一个开源的实时移动分析应用，通过收集来自手机的数据，并将这些数据通过可视化效果展示出来以分析移动应用的使用和最终用户的行为。开源版本提供Android和iOS两种手机操作系统的SDK。
Heka 1.10.0.23后提供CountlyInput对接Countly的SDK发送给服务器端的数据，在###Other段新增配置如下：
[source,]
###Other
[1_countly_input]
type = "CountlyInput"
# 监听的ip和端口信息，Countly SDK向该地址发送请求
address = "192.168.0.120:8081"
# token信息，Countly SDK使用的salt需要和该token一致，建议默认使用日志易集群Token即可
token = "86bb700c6f5e48b094bbc73dd8f46a6a"
disabled = false
===== Countly日志格式示例
对应日志的appname，等同于用户在使用Countly SDK时指定的app_key， tag均为"countly"。所有日志都是JSON格式，且都包含device_id(可作为该app所在设备唯一id)。各种日志中都有用户可自定义的部分，这里只例举比较典型的日志供参考：
begin_session::
[source,javascript]
{"begin_session":1,"device_id":"A54036FC-8011-45A9-B2DA-5B59710CC246","metrics":{"_app_version":"1.0","_density":"@3x","_device":"x86_64","_locale":"en_US","_os":"iOS","_os_version":"11.0","_resolution":"1242x2208", "_carrier":"xxxx"},"sdk_name":"objc-native-ios","sdk_version":"17.09","timestamp":1508986319695,"tz":480}
begin_session通常是app启动时记录一次，日志中带有移动设备的metrics信息，主要包括：
* _resolution：分辨率
* _os: 操作系统
* _os_version: 操作系统版本
* _carrier: 运营商
update_session::
[source,javascript]
{"device_id":"A54036FC-8011-45A9-B2DA-5B59710CC246","sdk_name":"objc-native-ios","sdk_version":"17.09","session_duration":60,"timestamp":1508987819730,"tz":480}
update_session是运行中app每1分钟上报一次的心跳信息（1分钟上报周期是可以通过Countly SDK修改）
end_session::
[source,javascript]
{"device_id":"A54036FC-8011-45A9-B2DA-5B59710CC246","end_session":1,"sdk_name":"objc-native-ios","sdk_version":"17.09","session_duration":40,"timestamp":1508986314531,"tz":480}
end_session是app退出时发送的日志，其中比较重要的字段为：
* session_duration(本次会话持续时间，单位:秒)
crash_report::
[source,javascript]
{"crash":{"_app_build":"3.3","_app_version":"1.0","_background":false,"_bat":100,"_binary_images":{"CoreFoundation":{"id":"3D0A79A9-5AFE-3C13-8FAD-8FAD4A25BC4F","la":"0x109467000"},"CountlyTestApp-iOS":{"id":"90D9E2E6-7BAE-389C-8656-83DD5CDACB2D","la":"0x105DF1000"},"GraphicsServices":{"id":"CF35EAE4-A6E2-3E7C-A995-05738CEE8787","la":"0x10A369000"},"UIKit":{"id":"2B618A54-5575-3622-B1B0-EF927594D95B","la":"0x106730000"},"libdyld.dylib":{"id":"90D5E87F-4194-39C4-BB8E-55BAB7166A3E","la":"0x10B0E6000"},"libobjc.A.dylib":{"id":"8BE7F419-A2BD-3C06-9513-B67BC911EA6B","la":"0x108EBD000"}},"_build_uuid":"90D9E2E6-7BAE-389C-8656-83DD5CDACB2D","_device":"x86_64","_disk_current":101777,"_disk_total":114543,"_error":"0 CoreFoundation 0x000000010955f1cb __exceptionPreprocess + 171\n1 libobjc.A.dylib 0x0000000108ec1f41 objc_exception_throw + 48\n2 CoreFoundation 0x000000010959ee8c _CFThrowFormattedException + 194\n3 CoreFoundation 0x0000000109611f40 +[__NSArrayI allocWithZone:] + 0\n4 CountlyTestApp-iOS 0x0000000105df2e5f +[EYCrashTesting crashTest1] + 143\n5 CountlyTestApp-iOS 0x0000000105dfb49b -[MainViewController tableView:didSelectRowAtIndexPath:] + 2923\n6 UIKit 0x00000001068946c7 -[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1810\n7 UIKit 0x00000001068948e2 -[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 344\n8 UIKit 0x0000000106765c61 _runAfterCACommitDeferredBlocks + 318\n9 UIKit 0x000000010675430d _cleanUpAfterCAFlushAndRunDeferredBlocks + 280\n10 UIKit 0x0000000106784600 _afterCACommitHandler + 137\n11 CoreFoundation 0x0000000109501db7 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23\n12 CoreFoundation 0x0000000109501d0e __CFRunLoopDoObservers + 430\n13 CoreFoundation 0x00000001094e6324 __CFRunLoopRun + 1572\n14 CoreFoundation 0x00000001094e5a89 CFRunLoopRunSpecific + 409\n15 GraphicsServices 0x000000010a3759c6 GSEventRunModal + 62\n16 UIKit 0x0000000106759d30 UIApplicationMain + 159\n17 CountlyTestApp-iOS 0x0000000105dfed1f main + 111\n18 libdyld.dylib 0x000000010b0e6d81 start + 1\n19 ??? 0x0000000000000001 0x0 + 1","_executable_name":"CountlyTestApp-iOS","_name":"*** -[__NSArrayI objectAtIndexedSubscript:]: index 5 beyond bounds [0 .. 2]","_nonfatal":false,"_online":1,"_opengl":3,"_orientation":"Unknown","_os":"iOS","_os_version":"11.0","_ram_current":8140,"_ram_total":8192,"_resolution":"1242x2208","_root":true,"_run":3396,"_type":"NSRangeException"},"device_id":"A54036FC-8011-45A9-B2DA-5B59710CC246","sdk_name":"objc-native-ios","sdk_version":"17.09","timestamp":1508986314530,"tz":480}
crash_report 是app在崩溃后重启时上报的信息，其中比较重要的是：
** crash._error: 存放了奔溃时app的堆栈信息
event（自定义事件)::
[source,javascript]
{"device_id":"A54036FC-8011-45A9-B2DA-5B59710CC246","event":{"count":5,"dow":4,"dur":0.314,"hour":14,"key":"TestEventD","segmentation":{"k":"v"},"sum":1.99,"timestamp":1508997897344},"sdk_name":"objc-native-ios","sdk_version":"17.09","timestamp":1508997912935,"tz":480}
其中event字段存放了自定义事件相关信息，它主要包括以下字段：
** count: 该事件发生次数
** sum: 该事件关联的总额（如例子里，可以代表TestEventD的事件发生了5次，一共发生了1.99元的消费)
** dur: 耗时 (单位:秒)
** segmentation：用户自定义的dict内容
** key: 事件名
===== Countly的SDK使用简介
如何在手机App代码中使用Countly的SDK，请用户阅读Countly官方文档。本节主要针对使用中部分常见的配置项略作说明，并提供一些细节文档的链接。
* iOS平台SDK简介
iOS操作系统的SDK文档地址见：https://resources.count.ly/v2.0/docs/ios-watchos-tvos-osx。
其中，需要配置secretSalt为日志易的用户标识 (配置不正确，对应上报将失败)
[source,]
config.secretSalt = @"具体token";
此外，app_key建议保持和您在日志易中规划的app_name一致。
日志易对接的Countly SDK功能主要是:
* 采集自定义事件，对应的官方介绍地址见：https://resources.count.ly/v2.0/docs/ios-watchos-tvos-osx#section-%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6
* 崩溃报告，对应的官方介绍地址见：https://resources.count.ly/v2.0/docs/ios-watchos-tvos-osx#section-%E9%85%8D%E7%BD%AE%E5%A5%94%E6%BA%83%E6%8A%A5%E5%91%8A 
此外，几处常用设置有：
1.	开启强制POST方式上报
 Countly.sharedInstance().setHttpPostForced(true);
2.	修改定时发送请求频率（默认1分钟)
 config.updateSessionPeriod = 60;
3.	启用崩溃报告
 config.features = @[CLYCrashReporting];
iOS平台具体的示例代码可参见GitHub项目：https://github.com/Countly/countly-sdk-android/tree/master/app。
* Android平台SDK简介
Android操作系统的SDK文档地址见：https://resources.count.ly/v2.0/docs/countly-sdk-for-android。
其中，需要配置secretSalt为日志易的用户标识 (配置不正确，对应上报将失败)：
 Countly.sharedInstance().enableParameterTamperingProtection("具体token")
此外，app_key建议保持和您在日志易中规划的app_name一致。
日志易对接Countly SDK功能主要是:
* 采集自定义事件，对应的官方介绍地址见：https://resources.count.ly/v2.0/docs/countly-sdk-for-android#section-%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6
* 崩溃报告，对应的官方介绍地址见：https://resources.count.ly/v2.0/docs/countly-sdk-for-android#section-%E8%AE%BE%E7%BD%AE%E5%B4%A9%E6%BA%83%E6%8A%A5%E5%91%8A
此外，几处常用设置有：
1.	开启强制POST方式上报
 config.alwaysUsePOST = YES;
2.	禁用定时发送心跳（默认1分钟，目前Android SDK不支持心跳频率修改，只能选择启用或禁用）
 Countly.sharedInstance().setDisableUpdateSessionRequests(true)
3.	启用崩溃报告
 Countly.sharedInstance().enableCrashReporting()
需要确保该接口在用户自定义的exceptionHandler设置后再被调用，否则会因为被用户自定义的exceptionHandler覆盖，导致不发送crash report。该接口本身会调用已有的exceptionHandler。