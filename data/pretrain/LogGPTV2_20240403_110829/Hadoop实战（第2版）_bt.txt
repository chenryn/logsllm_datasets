包含的主要方法如表12-11所示。
用法示例：
HTable table=new HTable（conf, Bytes.toBytes（tablename））；
Put p=new Put（row）；//为指定行（row）创建一个Put操作
p.add（family, qualifier, value）；
table.put（p）；
上述函数将向表“tablename”添加“family, qualifier, value”指定的值。
7.Get
关系：org.apache.hadoop.hbase.client.Get
作用：用来获取单个行的相关信息。
包含的主要方法如表12-12所示。
用法示例：
Htable table=new Htable（conf, Bytes.toBytes（tablename））；
Get g=new Get（Bytes.toBytes（row））；
Result result=table.get（g）；
上述函数将获取“tablename”表中“row”行对应的记录。
8.Result
关系：org.apache.hadoop.hbase.client.Result
作用：存储Get或Scan操作后获取的表的单行值。使用此类提供的方法能够直接方便地获取值或获取各种Map结构（＜key, value＞对）。
包含的主要方法如表12-13所示。
用法示例：
HTable table=new HTable（conf, Bytes.toBytes（tablename））；
Get g=new Get（Bytes.toBytes（row））；
Result rowResult=table.get（g）；
Bytes[]value=rowResult.getValue（（family+"："+column））；
9.ResultScanner
关系：Interface
作用：客户端获取值的接口。
包含的主要方法如表12-14所示。
用法示例：
ResultScanner scanner=table.getScanner（Bytes.toBytes（family））；
for（Result rowResult：scanner）{
Bytes[]str=rowResult.getValue（family, column）；
}
如果大家想要对HBase的原理、运行机制以及编程有更深入的了解，建议阅读HBase的源码。通过对HBase源码的深入探究，相信大家一定能够对HBase有更深层次的理解。
[1]
 org.apache.hadoop.hbase.client.Get类。
[2]
 org.apache.hadoop.hbase.client.Put类。
12.9 HBase编程
本节我们将介绍如何使用IDE对HBase进行编程，并介绍如何使用HBase编写MapReduce程序。首先，我们介绍如何配置Eclipse，并用其开发HBase应用程序。
 12.9.1 使用Eclipse开发HBase应用程序
当第三方访问HBase的时候，首选需要访问ZooKeeper，因为HBase的重要信息保存在ZooKeeper当中。我们知道，ZooKeeper集群的信息由$HBASE_HOME/conf/hbase-site.xml文件指定。因此需要通过classpath来指定HBase配置文件的位置，即$HBASE_HOME/conf/的位置。
使用HBase客户端进行编程的时候，hbase、hadoop、log4j、commons-logging、commons-lang、ZooKeeper等JAR包对于程序来说是必需的。除此之外，commons-configuration、slf4j等JAR包也经常被用到。下面列出对于HBase-0.92.1版本来说所需的JAR包：
hbase-0.92.1.jar
hbase-0.92.1-test.jar
hadoop-1.0.1.jar
zookeeper-3.4.3.jar
log4j-1.2.16.jar
commons-logging-1.1.1.jar
commons-lang-2.5.jar
此外程序可能包含一些间接引用，可以通过错误提示进行相应修改。
下面我们通过一个实例来演示具体的配置。
（1）添加JAR包
添加JAR包有两种方法，比较简单的是，在HBase工程上，右击Propertie在弹出的快捷菜单中选择Java Build Path对话框，在该对话框中单击Libraries选项卡，在该选项卡下单击Add External JARs按钮，定位到$HBASE/lib目录下，并选取上述JAR包，如图12-14所示。
上述操作可以通过在工程根目录（即与src文件夹平行目录）下创建lib文件夹，并添加相关JAR包来代替。
（2）添加hbase-site.xml配置文件
在工程根目录下创建Conf文件夹，将$HBASE_HOME/conf/目录中的hbase-site.xml文件复制到该文件夹中。通过右键选择Propertie-＞Java Build Path-＞Libraries-＞Add Class Folder，然后勾选Conf文件夹进行添加，如图12-15所示。
接下来便可以与普通Java程序一般调用HBase API编写程序了。还可以通过运行HBase Shell与程序操作进行交互。
图 12-14 添加相关JAR包
图 12-15 添加HBase配置文件
如果不设置hbase-site.xml配置文件的位置，程序将自动读取HBase-0.92.1.jar文件中默认的配置文件，这样可能与自己的预期有一定的差距。大家还可以通过程序来进行HBase的配置，例如若要设置ZooKeeper集群的位置，可在HBase的Configuration中做如下配置：
Configuration config=HBaseConfiguration.create（）；
config.set（"hbase.zookeeper.quorum"，"master, slave1，slave2"）；
上述代码设置HBase所运行的ZooKeeper集群的位置为master、slave1和slave2。
12.9.2 HBase编程
在12.8节中，我们已经对常用的HBase API进行了简单的介绍。下面我们给出一个简单的例子，希望大家通过学习这个例子能对HBase的使用方法及特点有一个更深入的认识。示例代码如代码清单12-2所示。
代码清单12-2 HBase Java API简单用例
1 package cn.edn.ruc.clodcomputing.book.chapter12；
2
3 import java.io.IOException；
4
5 import org.apache.hadoop.conf.Configuration；
6 import org.apache.hadoop.hbase.HBaseConfiguration；
7 import org.apache.hadoop.hbase.HColumnDescriptor；
8 import org.apache.hadoop.hbase.HTableDescriptor；
9 import org.apache.hadoop.hbase.client.Get；
10 import org.apache.hadoop.hbase.client.HBaseAdmin；
11 import org.apache.hadoop.hbase.client.HTable；
12 import org.apache.hadoop.hbase.client.Put；
13 import org.apache.hadoop.hbase.client.Result；
14 import org.apache.hadoop.hbase.client.ResultScanner；
15 import org.apache.hadoop.hbase.client.Scan；
16 import org.apache.hadoop.hbase.util.Bytes；
17
18
19 public class HBaseTestCase{
20//声明静态配置HBaseConfiguration
21 static Configuration cfg=HBaseConfiguration.create（）；
22
23//创建一张表，通过HBaseAdmin HTableDescriptor来创建
24 public static void creat（String tablename, String columnFamily）throws
Exception{
25 HBaseAdmin admin=new HBaseAdmin（cfg）；
26 if（admin.tableExists（tablename））{
27 System.out.println（"table Exists！"）；
28 System.exit（0）；
29}
30 else{
31 HTableDescriptor tableDesc=new HTableDescriptor（tablename）；
32 tableDesc.addFamily（new HColumnDescriptor（columnFamily））；
33 admin.createTable（tableDesc）；
34 System.out.println（"create table success！"）；
35}
36}
37
38//添加一条数据，通过HTable Put为已经存在的表来添加数据
39 public static void put（String tablename, String row, String columnFamily，
String column, String data）throws Exception{
40 HTable table=new HTable（cfg, tablename）；
41 Put p1=new Put（Bytes.toBytes（row））；
42 p1.add（Bytes.toBytes（columnFamily），Bytes.toBytes（column），
Bytes.toBytes（data））；
43 table.put（p1）；
44 System.out.println（"put'"+row+"'，'"+columnFamily+"："+column+"'，
'"+data+"'"）；
45}
46
47 public static void get（String tablename, String row）throws IOException{
48 HTable table=new HTable（cfg, tablename）；
49 Get g=new Get（Bytes.toBytes（row））；
50 Result result=table.get（g）；
51 System.out.println（"Get："+result）；
52}
53//显示所有数据，通过HTable Scan来获取已有表的信息
54 public static void scan（String tablename）throws Exception{
55 HTable table=new HTable（cfg, tablename）；
56 Scan s=new Scan（）；
57 ResultScanner rs=table.getScanner（s）；
58 for（Result r：rs）{
59 System.out.println（"Scan："+r）；
60}
61}
62
63 public static boolean delete（String tablename）throws IOException{
64
65 HBaseAdmin admin=new HBaseAdmin（cfg）；
66 if（admin.tableExists（tablename））{
67 try
68{
69 admin.disableTable（tablename）；
70 admin.deleteTable（tablename）；
71}catch（Exception ex）{
72 ex.printStackTrace（）；