ϕi ⇒ ϕi(cid:48) and ¬ϕi(cid:48) ⇒ ¬ϕi. For example, a reﬁnement over ϕ1
would be at least one CV device should eventually broadcast
a learning request after observing an unknown certiﬁcate.
Then, MC is used to ﬁnd property violations. By analyzing
the counterexample, we can formulate the attack procedure
(§ 5) and analyze the fundamental reasons for identiﬁed at-
tacks, which is helpful for the mitigation design (§ 7). Last,
we patch the model to ensure that the general MC will not
generate the same type of violations later.
PMC aims at avoiding manual risk assessment and does
not discard identiﬁed vulnerabilities from the general MC.
It helps assess the severity of the exposed vulnerabilities
and thus allows the protocol designers to prioritize the so-
lution design. Unlike the general MC, PMC assigns proba-
bilities for each state transition T : S× S → [0,1] such that
Table 1: Availability properties used by CVAnalyzer.
ID Availability properties
ϕ1
ϕ2
ϕ3
The application layer should be always able to con-
sume valid incoming packets.
Reﬁnement over ϕ1: All CV devices should eventu-
ally learn unknown certiﬁcates.
Reﬁnement over ϕ1: All platoon members should
eventually switch to idle state.
1
|Succs|
Implementation
∀s ∈ S : Σs(cid:48)∈ST (s,s(cid:48)) = 1. Since we assign uniform probabili-
ties to concurrent state transitions, for all reachable successor
states of s in Succs = {s(cid:48) ∈ S|T (s,s(cid:48)) > 0}, the transition prob-
ability between s and any s(cid:48) is
. A transition matrix can
be derived from the transition probabilities. Thus, PMC can
calculate the likelihood of transitioning from initial states
to any target states. If we can formalize the states of the at-
tack success, PMC can help us generate the attack success
rate. Apart from the probability, PMC can also assign “time”
costs for state transitions, which can be used to quantify time-
related properties. In § 5, we leverage PMC to quantify the
severity of non-deterministic attacks N1-4, which are deﬁned
as attacks that may not always succeed per attempt. We ob-
serve that, P2PCD attacks can succeed, only if malicious
packets are delivered to the victim vehicle exactly within the
attack time window. However, the attacker cannot precisely
infer the start and end of the time window, but only roughly
predict the start time. Thus, we use PMC to quantify their
severity based on the success rate and the time delay.
4.3
Following the proposed approach, to instantiate CVAnalyzer,
we use TLC [75] as the general model checker due to its ex-
pressiveness of constructing the model, and pick PRISM [42]
as our probabilistic model checker. As the prior step of model
checking, we manually extract the abstract model of the IEEE
1609 protocol family [67] and PMPs [56, 69]. The abstract
model includes two (i.e., n = 2) legitimate vehicles and one
malicious vehicle (i.e., the attacker). Then, we need to im-
plement concrete models in the modeling languages used by
TLC and PRISM. As the supported maneuvers of PLEXE is
a subset of VENTOS, we merge them together as one model.
The properties that we want to verify in this paper are shown
in Table 1 and Table 3, covering availability and quantitative
properties respectively.
5 Analysis Results
In this section, we describe 4 DoS attacks in P2PCD and 15
attacks in VENTOS [69] and PLEXE [56] in detail (Table 2).
Then, we analyze the security implications of identiﬁed at-
tacks, and quantify the success rate and the average time delay
in packet processing of those non-deterministic attacks.
5.1 P2PCD Vulnerabilities
In summary, CVAnalyzer ﬁnds 4 new DoS attacks that can
compromise the availability of CV network. All 4 vulnerabili-
ties come from P2PCD [32], which prevents victim vehicles
from learning unknown certiﬁcates (see Figure 4). Without
3224    30th USENIX Security Symposium
USENIX Association
Table 2: Summary of attacks found in the CV protocols. (N: CV network protocol, P2PCD. A: CV application, PMP)
ID
Implications
New?
Yes
Yes
Yes
A1: No [1].
A2: Yes
Yes
Yes
Yes
Stop the CV device from sending learning responses; result in trafﬁc accidents (§ 6.2.1)
Stop the CV device from sending learning requests; result in trafﬁc accidents (§ 6.2.1)
Stop the CV device from recording unknown certiﬁcates; result in trafﬁc accidents (§ 6.2.1)
Cause trafﬁc collision [1], lead to A3-15
Interfere the trafﬁc ﬂow stability, decrease efﬁciency and safety (§ 6.2.2)
Prevent platoon members from performing any maneuvers
Lead to failures of the split maneuver and the leader/follower leave maneuver
(Prerequisites)
Available platoon space
Split Trigger
PMP Block
Inconsistency
Centralized platoon coordination
-
Inappropriate validity check
Name
Response Mute
Request Mute
Numb
response
threshold,
response veriﬁcation,
Assumption
Known
optional
enough computing power
Optional response veriﬁcation,
enough computing power
Known MAC address
Known MAC address
N1
N2
N3
N4
A1, A2
A3, A4
A5-14
A15
knowing necessary certiﬁcates, the victim vehicles cannot
verify incoming packets; the CV network stack thus cannot
deliver data to the application layer. Besides, we discuss the
fundamental reasons for these vulnerabilities. Also, we assess
their security consequences.
responses that can cause partial hash collision (e.g., low-order
3 bytes collision).
Figure 4: Four P2PCD attacks can break the whole pipeline
of P2PCD learning process to prevent the CV device from
learning/storing the unknown certiﬁcate.
In the following descriptions, two CV devices, Vehicle
1 (V1) and Vehicle 2 (V2), broadcast SPDUs every 100 ms.
However, V2 cannot verify packets sent by V1 because V2 does
not know the issuer ca1 of the signing certiﬁcate ee1 used by
V1. V2 thus wants to learn the unknown certiﬁcate ca1. For
each attack presented below, V1 ﬁrst sends a trigger SPDU
to V2. In the normal case without the attacker, after receiving
the trigger SPDU, V2 initializes P2PCD learning process and
attaches learning request information in the next outgoing
SPDU. V1 will construct and send the learning response after
receiving the learning request.
5.1.1 Response Mute Attack
N1 can prevent a peer CV device from sending the learn-
ing response. This attack exploits the optional veriﬁcation of
learning responses and the throttling mechanism of P2PCD
that limits the number of responses to a single request. The
attacker intentionally interact with V1 by sending multiple ma-
licious learning responses to ensure that the response counter
of V1 exceeds the response threshold. As a consequence, V1
choose not to send the learning response, and V2 fails in learn-
ing the unknown certiﬁcate ca1.
Assumptions. For successfully carrying out this attack, the
attacker needs to know the exact value of the response thresh-
old. For example, the response threshold of BSM is 3 [20]. We
assume that V1 does not mandate the veriﬁcation for incoming
learning responses, which is consistent with the current pro-
tocol speciﬁcation (§ 2.1). Also, we assume that the attacker
has enough computing power to efﬁciently construct learning
Figure 5: N1: the attacker can stop V1 from sending learn-
ing responses to V2 by sending multiple malicious learning
responses.
Attack steps. Figure 5 illustrates the attack steps in detail. V1
ﬁrst sends a trigger SPDU to V2. Instead of immediately send-
ing the learning request, V2 stores the HashedId8 value of
the unknown certiﬁcate ca1 in a queue (cf. IEEE 1609.2 [32],
Subclause D.4.2.1.1). V2 attaches the HashedId3 value of
ca1 in the learning request ﬁeld of its next outgoing SPDU. In
P2PCD, HashedId8 and HashedId3 stands for the low-order
8-byte and 3-byte hash of a certiﬁcate respectively. After re-
ceiving the learning request, V1 starts to prepare a learning
response. Based on the throttling mechanism, V1 initializes
the response backoff timer and the response counter for the
requested certiﬁcate.
However, the attacker can observe the trigger SPDU and
the learning request, so she can determine that V2 wants to
learn an unknown certiﬁcate from V1. The attacker thus de-
liberately constructs multiple learning responses, in which
the HashedId3 value of the ﬁrst certiﬁcate in the payload
matches with the unknown certiﬁcate ca1. The attacker then
sends out these malicious packets to saturate V1’s response
counter (i.e., making it no less than the response threshold).
On receiving malicious learning responses, V1 wrongly up-
dates its response counter (via AddCertificate primitive
deﬁned in IEEE 1609.2). When the response backoff timer
expires, V1 checks whether the response counter is less than
USENIX Association
30th USENIX Security Symposium    3225
Recv. SPDURecordunknown cert.Sendlearning req.Recv.learning req.Sendlearning res.Recv.learning res.Store cert.PeerCV deviceCV DeviceN1N2, N3N4Before sending a learning responseLearning responses:- h3(certs[0]) == h3(ca1)AttackerLearning requestVehicle 2q.add(h8(ca1))Vehicle 1Trigger SPDU:- Signer: ee1- (Issuer: ca1)Response availableWait for timeoutresCount(h3(ca1)) <= thresholdDiscard responseNAfter initializing the timerAttackAttack time windowNotes:- q: missing certificate queue- h3(): get low-order 3-byte hash of the input- h8(): get low-order 8-byte hash of the inputCount responsesor equal to the response threshold. Obviously, based on the
current status of the response counter, V1 decides to discard
the response at this time.
Discussion. The reason for N1 can be attributed to the use of
truncated hash. By design, the hash function should be resis-
tant to collision attacks. However, the use of truncated hash
value compromises the security provided by the hash func-
tion. For example, for HashedId3 used in CV network (i.e.,
three-byte hash), collision could be found in the brute-force
number of 224. Most importantly, the response counter uses
HashedId3 as the identiﬁer, which means that the attacker
can manipulate the response counter if she constructs certiﬁ-
cates leading to the partial hash collision. On the other hand,
as introduced in § 2.1, IEEE 1609.2 does not mandate the
veriﬁcation for the learning response. Thus, it is still possible
that some poorly implemented CV protocols may not verify
the incoming learning response but just store certiﬁcates in
the payload. Even if the CV device mandates the veriﬁcation,
the attacker can collect certiﬁcates with the attacker-desired
hash values ofﬂine (§ 7). Note that, since P2PCD learning
responses do not carry digital signatures, the attacker does not
need to possess a legitimate certiﬁcate to launch N1, making
the attack much more stealthy.
5.1.2 Request Mute Attack
Both N2 and N3 can stop CV device from sending learning
requests. Similar to N1, N2 exploits the hash collision issue.
Readers can refer to §A for more details.
N3 exploits the unicast capability and injects a mali-
cious SPDU with the same learning request ﬁeld (i.e., the
HashedId3 value of ca1) as what V2 intends to send. As a
result, V2 can observe the malicious learning request and de-
cides not to send its own learning request. V2 hence fails in
learning unknown certiﬁcate ca1 because V1 does not receive
any learning requests.
Assumptions. To successfully launch this attack, the only
requirement is that the attacker needs to know the MAC ad-
dress of the victim vehicle V2. This is reasonable because
the attacker can monitor all trafﬁc in the network; it can thus
observe V2’s MAC address from packets sent by V2.
Attack steps. As presented in Figure 6, V2 initializes P2PCD
after receiving a trigger SPDU from V1. V2 stores the
HashedId8 value of the unknown certiﬁcate ca1 in a queue.
Meanwhile, since the attacker can observe the trigger SPDU,
she constructs a malicious learning request, in which the learn-
ing request ﬁeld m.lr equals to the HashedId3 value of the
unknown certiﬁcate ca1. In P2PCD, after receiving a learn-
ing request, V2 removes any matching HashedId8 entries in
the queue. Therefore, V2 removes the entry of the unknown
certiﬁcate h8(ca1) in the queue, where h8 is a function to
get the low-order eight-byte hash of the input. As the queue
becomes empty, V2 decides not to attach the learning request
information in the next outgoing SPDU. Consequently, V2 is
unable to learn the correct unknown certiﬁcate.
Discussion. The fundamental reason for N3 is that once a
vehicle observes an active P2PCD learning request, it will not
send the learning request for the same unknown certiﬁcate.
In the normal case, this mechanism is helpful to reduce the
number of simultaneous learning requests in the ﬂy. However,
the attacker can unicast the learning request to the victim
vehicle. Notably, the attacker should not send such learning
request to the owner of the unknown certiﬁcate (i.e., V1 in
Figure 6). This attack misleads the victim vehicle to believe
that some other legitimate vehicles are requesting the same
unknown certiﬁcate. The protocol designers do not consider
the use of unicast in P2PCD, which makes the victim vehicle
vulnerable to N3. On the other hand, N3 does not require the
attacker to possess a legitimate certiﬁcate to sign the learning
request but only uses self-generated certiﬁcates. As long as the
digital signature of the learning request is valid, the vehicles
will process the learning request ﬁeld in the packet header.
In this case, the signing certiﬁcate of the malicious learning
request will be treated as an unknown certiﬁcate and will
trigger another P2PCD learning process. Therefore, even if
the certiﬁcates used by the attacker is revoked, the attacker
can always generate new certiﬁcates for future use.
5.1.3 Numb Attack
First, like N3, this attack exploits the unicast capability and
injects a malicious SPDU with the same learning request
ﬁeld (i.e., the HashedId3 value of ca1) as what V2 intends to
send. This causes the same consequence as N3, in which V2
chooses not to send the learning request and thus cannot learn
the unknown certiﬁcate. Then, due to the request active timer
(e.g., reqActiveTimer), V2 still thinks that there should be
an active request in the ﬂy. Therefore, while receiving the next
trigger SPDU, V2 chooses not to add the HashedId8 value of
the unknown certiﬁcate ca1 into the queue and keeps waiting