常见的改善措施，主要是抽取公共代码、封装函数、使用继承
和多态等
（1）抽象出公共方法或函数，将重复的代码封装在一个函数或
方法中
（2）使用继承或接口，将共同代码放在父类或接口中，子类只
实现自己的特定部分
（3）使用设计模式，如工厂模式、模板方法模式等
（4）利用现有的框架或库，避免自己重写
2．效果评估
代码重复的度量，可以使用代码重复率来表示，可以通过静态
扫描工具得出。
代码重复率，指的是在一段代码中重复出现的代码段的比例。
代码重复率越高，代码的可维护性和可读性就越差。
代码重复率=重复行数/代码总行数
在实际的工程中，一般建议：
（1）单文件代码重复率最大值小于等于 10%
（2）项目平均代码重复率小于等于 10%
3.2.1.6 代码注释与 API文档
代码的注释与 API 文档编写是软件开发过程中非常重要的一部
⽹址：SRE-Elite.com 23 微信：SRE精英联盟
SRE实践白皮书（2023年）
分，可以提高代码的可读性和可维护性。通过代码注释可以帮助阅读者快速
理解代码的功能和实现方式。API 文档则是其他开发者了解使用软
件的重要途径。开发者应该养成写注释和文档的好习惯，为自己和其他开发者节省开
发时间。
1．代码注释与 API文档提升措施
（1）注释目的在于使阅读者能够快速掌握注释对象的使用方式
与原理，良好的注释应包
含注释对象的产生意图，设计考量与如何使用；注释一般应当
包含文件注释，类/结构体注释，函数方法注释，变量注释以及适当
的代码段注释；对于规范化命名的变量与简单函数方法，可以不进
行注释。
（2）API 文档，应当描述各个类和方法的功能和使用方法，同
时遵循行业和国际标准，具备兼容性和实时性。
2．效果评估
对于注释与 API 文档的考量，可以从 API 文档覆盖率，代码注
释行密度来衡量。
1）注释行密度=注释行数/总行数* 100
此标准用于衡量百行代码中，所包含注释行数，一般认为低于 5
表示几乎没注释。
2）API文档覆盖率=已覆盖 API接口数量/总 API接口数量
此标准用于衡量对外 API 文档的完善程度；一般来讲，至少需
要达到 80%覆盖率，即覆盖大部分的 API 功能，忽略了一些不太重
⽹址：SRE-Elite.com 24 微信：SRE精英联盟
SRE实践白皮书（2023年）
要或不常用的 API；同时也需要定期更新，使文档保持最新、全
面、准确的状态。
3.2.1.7 代码质量红线
代码质量红线是指在开发过程中，开发团队所设定的一些规则
和标准，用于确保代码质量达到一定的水平，也是衡量代码质量的
一个综合考量。这些规则和标准通常是基于行业最佳实践和经验总
结制定的，是团队开发的一种约束和保障。当代码质量超越红线
时，就需要开发团队及时进行修正和优化，以确保代码质量和运行
稳定性。
1．质量红线改善措施
质量红线的触发标准是基于每个质量指标的。提升每项指标质
量有助于避免触发红线，也可以帮助开发团队提高软件开发的效率
和质量，减少错误。
2．效果评估
质量红线一般包含以下几个指标：
（1）代码缺陷
（2）代码风格
（3）代码安全性
（4）圈复杂度
（5）代码重复率
（6）代码注释和文档
（7）单元测试覆盖率
⽹址：SRE-Elite.com 25 微信：SRE精英联盟
SRE实践白皮书（2023年）
通过在代码合并、转测等场景下，对以上每个指标单独设定阈
值，可以划定出不同场景下的质量红线，当某项指标触发质量红线
时终止后续的 CI/CD流程，并要求开发团队进行修复。
3.2.2 代码仓库可靠性
代码仓库就是存放源代码和资源的地方，亦称版本库、代码
库，其核心功能是版本控制，记录一个或若干文件的变化，以便后
续查看特定版本修订的情况;
代码仓库出现问题，对代码拉取、项目开发、编译构建等都会
造成影响，所以代码仓库的可靠性是整体研发流程可用性的关键一
环；
代码仓库的可靠性包括：仓库性能、仓库容灾、仓库安全和仓
库可扩展性四个方面；
代码仓库的可靠性主要侧重网络优化、部署优化、配置优化、
安全提升等等工作，可由服务 SRE 和安全人员来承担相关能力的建
设；
3.2.1.1 仓库性能
代码仓库的性能通常是指代码仓库对代码的存储、管理和处理
时的速度和效率，包括代码提交和拉取的速度、分支合并的速度
等，高性能的代码仓库，可以减少开发人员的等待时间，缩短产品
交付周期；
1．代码仓库性能提升措施
（1）控制代码仓库的大小：代码库的大小会直接影响仓库的性
⽹址：SRE-Elite.com 26 微信：SRE精英联盟
SRE实践白皮书（2023年）
能，因为大型代码仓库需要更多的时间来处理和查找文件。因此，
需要合理控制仓库大小，及时删除不需要使用的文件，并合理设置
文件的保存周期；
（2）合理设置代码仓库结构：如果代码仓库的结构合理，可以
更快地查找和访问文件，从而提高性能，例如，某些版本管理软
件，支持大文件单独存储在仓库之外，仓库中实际只存储一个很小
的文本指针，可以将存储大文件的目录设置使用更适合的存储形
式；
（3）版本工具选型：不同的版本控制工具可能会对性能产生不
同的影响。例如，Git 和 SVN、P4 的架构和设计理念的差异，在处
理大文件的性能存在差异，需要根据业务资源文件的数量和大小、
团队的多地分布特性等综合选择；
（4）网络优化：如果多个人同时访问代码仓库，网络连接的速
度也会影响性能，在评估代码仓库性能时，需要考虑网络连接的速
度和质量，可在离用户就近的网络区域，部署边缘节点，缓存最近
的版本，减少网络距离传输损耗，提高访问速率；
（5）硬件升级：硬件也会影响代码仓库的性能，例如，使用较
高 IO性能的磁盘，可以提高代码仓库的读取速度；
（6）集群化：通过集群化来部署代码仓库，可以让代码仓库支
持更大规模团队的使用；
2．效果评估
一般采用下面 3个指标来评估仓库的性能
⽹址：SRE-Elite.com 27 微信：SRE精英联盟
SRE实践白皮书（2023年）
（1）文件下载速度：通常是指每秒传输的数据量，常见的单位
有比特/秒（bps）、 千 比/秒特（Kbps）、 兆 比/秒特（Mbps）和千兆比
特/秒（Gbps）等；
（2）下载卡顿率：是指从仓库中下载时出现卡顿的频率或时间
占比，通常使用百分比（%）来表示；
（3）并发请求量：一般团队多人同时拉取或者提交代码可能会
影响速度，通常使用 QPS来表示系统每秒钟的请求量；
3.2.1.2 仓库容灾
代码仓库容灾是指代码仓库在经受自然灾害、设备故障、网络
故障、人为错误等不可预测的问题后，通过备份、容错机制和恢复
策略在最短时间内恢复到正常可用的状态。完备的代码仓库容灾机
制，可以避免团队或公司核心代码资产遭受损失。
1．代码仓库容灾提升措施
（1）数据备份：定期对代码仓库的数据进行备份，确保在数据
丢失或损坏时能够及时恢复。
（2）多地备份：将备份数据存储在多个地方，以防止单点故
障。
（3）容错机制：使用容错技术，如 RAID 等，以防止硬件故障
导致数据丢失。或者将本地普通硬盘替换为云 硬盘，云硬盘中的数
据以多副本冗余方式存储，会避免数据的单点故障风险。
（4）灾备恢复策略：制定灾备恢复策略，以便在发生灾难时能
够及时恢复。
⽹址：SRE-Elite.com 28 微信：SRE精英联盟
SRE实践白皮书（2023年）
（5）人员培训：对相关人员进行培训，提高应对灾难的能力和
应变能力。
2．效果评估
一般使用以下几个指标来评估代码仓库容灾效果
（1）恢复时间目标（RTO）：Recovery Time Objective，他是指故
障发生时间到故障恢复时间，两个时间点之间的时间段称为 RTO；
（2）恢复点目标（RPO）：Recovery Point Objective，是指系统恢
复到怎样的程度。这种程度可以是上一周的备份数据，也可以是上
一次的实时数据；
（3）投入产出比（ROI）：Return of Investment，容灾系统的投入
产出比，可以使用最高的性价比方案来达到容灾效果，为团队节省
成本；
3.2.1.3 仓库安全
代码仓库的安全性是指代码仓库中存储的代码等数据受到保护
的程度，以防止未经授权的访问、篡改、泄露和破坏。保护代码仓
库的安全性包括但不限于访问控制、数据加密、代码审查、安全漏
洞、操作审计、私有网络部署等。高安全性的代码仓库可以保护代
码的机密性，完整性，避免因安全漏洞造成团队或者公司的损失和
风险。
1．代码仓库安全性提升措施
（1）访问控制：评估代码仓库中代码的访问控制机制，包括用
户认证、授权、权限管理等，确保只有授权的用户能够访问仓库中
⽹址：SRE-Elite.com 29 微信：SRE精英联盟
SRE实践白皮书（2023年）
的代码。
（2）数据加密：评估仓库中存储的关键元数据或者敏感代码是
否采用了合适的加密技术进行保护，以防止敏感信息泄露。
（3）代码审查：评估代码审查机制，确保代码质量和安全性。