provides a specialized file system interface to the Windows memory manager for this purpose. When 
a program tries to access a part of a file that isn’t loaded into the cache (a cache miss), the memory 
manager calls NTFS to access the disk driver and obtain the file contents from disk. The cache manager 
optimizes disk I/O by using its lazy writer threads to call the memory manager to flush cache contents 
to disk as a background activity (asynchronous disk writing). 
NTFS, like other file systems, participates in the Windows object model by implementing files as 
objects. This implementation allows files to be shared and protected by the object manager, the com-
ponent of Windows that manages all executive-level objects. (The object manager is described in the 
section “Object manager” in Chapter 8.)
An application creates and accesses files just as it does other Windows objects: by means of object 
handles. By the time an I/O request reaches NTFS, the Windows object manager and security system 
have already verified that the calling process has the authority to access the file object in the way it is 
attempting to. The security system has compared the caller’s access token to the entries in the access 
control list for the file object. (See Chapter 7 in Part 1 for more information about access control lists.) 
The I/O manager has also transformed the file handle into a pointer to a file object. NTFS uses the 
information in the file object to access the file on disk.
Figure 11-30 shows the data structures that link a file handle to the file system’s on-disk structure.
654
CHAPTER 11
Caching and file systems
Object
manager
data
structures
Process
…
…
Handle
table
File object
File object
NTFS data
structures
(used to manage
the on-disk structure)
Stream
control
blocks
File
control
block
Data
attribute
Named
stream
Master file
table
NTFS
database
(on disk)
FIGURE 11-30 NTFS data structures.
NTFS follows several pointers to get from the file object to the location of the file on disk. As 
Figure 11-30 shows, a file object, which represents a single call to the open-file system service, points to 
a stream control block (SCB) for the file attribute that the caller is trying to read or write. In Figure 11-30, 
a process has opened both the unnamed data attribute and a named stream (alternate data attribute) 
for the file. The SCBs represent individual file attributes and contain information about how to find 
specific attributes within a file. All the SCBs for a file point to a common data structure called a file con-
trol block (FCB). The FCB contains a pointer (actually, an index into the MFT, as explained in the section 
“File record numbers” later in this chapter) to the file’s record in the disk-based master file table (MFT), 
which is described in detail in the following section.
NTFS on-disk structure
This section describes the on-disk structure of an NTFS volume, including how disk space is divided and 
organized into clusters, how files are organized into directories, how the actual file data and attribute 
information is stored on disk, and finally, how NTFS data compression works.
CHAPTER 11
Caching and file systems
655
Volumes
The structure of NTFS begins with a volume. A volume corresponds to a logical partition on a disk, and 
it’s created when you format a disk or part of a disk for NTFS. You can also create a RAID virtual disk 
that spans multiple physical disks by using Storage Spaces, which is accessible through the Manage 
Storage Spaces control panel snap-in, or by using Storage Spaces commands available from the Windows 
PowerShell (like the New-StoragePool command, used to create a new storage pool. A comprehensive 
list of PowerShell commands for Storage Spaces is available at the following link: https://docs.microsoft 
.com /en-us/powershell/module/storagespaces/)
A disk can have one volume or several. NTFS handles each volume independently of the others. 
Three sample disk configurations for a 2-TB hard disk are illustrated in Figure 11-31.
C:
(2 TB)
NTFS
Volume
C:
(1 TB)
D:
(1 TB)
NTFS
Volume 1
ReFS
Volume 2
C:
(1 TB)
D:
(1 TB)
ReFS 
Volume
exFAT
Volume
FIGURE 11-31 Sample disk configurations.
A volume consists of a series of files plus any additional unallocated space remaining on the disk 
partition. In all FAT file systems, a volume also contains areas specially formatted for use by the file 
system. An NTFS or ReFS volume, however, stores all file system data, such as bitmaps and directories, 
and even the system bootstrap, as ordinary files.
Note The on-disk format of NTFS volumes on Windows 10 and Windows Server 2019 is ver-
sion 3.1, the same as it has been since Windows XP and Windows Server 2003. The version 
number of a volume is stored in its Volume metadata file.
Clusters
The cluster size on an NTFS volume, or the cluster factor, is established when a user formats the volume 
with either the format command or the Disk Management MMC snap-in. The default cluster factor 
varies with the size of the volume, but it is an integral number of physical sectors, always a power of 2 
(1 sector, 2 sectors, 4 sectors, 8 sectors, and so on). The cluster factor is expressed as the number of 
bytes in the cluster, such as 512 bytes, 1 KB, 2 KB, and so on.
656
CHAPTER 11
Caching and file systems
Internally, NTFS refers only to clusters. (However, NTFS forms low-level volume I/O operations such 
that clusters are sector-aligned and have a length that is a multiple of the sector size.) NTFS uses the 
cluster as its unit of allocation to maintain its independence from physical sector sizes. This indepen-
dence allows NTFS to efficiently support very large disks by using a larger cluster factor or to support 
newer disks that have a sector size other than 512 bytes. On a larger volume, use of a larger cluster fac-
tor can reduce fragmentation and speed allocation, at the cost of wasted disk space. (If the cluster size 
is 64 KB, and a file is only 16 KB, then 48 KB are wasted.) Both the format command available from the 
command prompt and the Format menu option under the All Tasks option on the Action menu in the 
Disk Management MMC snap-in choose a default cluster factor based on the volume size, but you can 
override this size.
NTFS refers to physical locations on a disk by means of logical cluster numbers (LCNs). LCNs are 
simply the numbering of all clusters from the beginning of the volume to the end. To convert an LCN 
to a physical disk address, NTFS multiplies the LCN by the cluster factor to get the physical byte offset 
on the volume, as the disk driver interface requires. NTFS refers to the data within a file by means of 
virtual cluster numbers (VCNs). VCNs number the clusters belonging to a particular file from 0 through 
m. VCNs aren’t necessarily physically contiguous, however; they can be mapped to any number of LCNs
on the volume.
Master file table
In NTFS, all data stored on a volume is contained in files, including the data structures used to locate 
and retrieve files, the bootstrap data, and the bitmap that records the allocation state of the entire vol-
ume (the NTFS metadata). Storing everything in files allows the file system to easily locate and maintain 
the data, and each separate file can be protected by a security descriptor. In addition, if a particular 
part of the disk goes bad, NTFS can relocate the metadata files to prevent the disk from becoming 
inaccessible.
The MFT is the heart of the NTFS volume structure. The MFT is implemented as an array of file re-
cords. The size of each file record can be 1 KB or 4 KB, as defined at volume-format time, and depends 
on the type of the underlying physical medium: new physical disks that have 4 KB native sectors size 
and tiered disks generally use 4 KB file records, while older disks that have 512 bytes sectors size use 1 
KB file records. The size of each MFT entry does not depend on the clusters size and can be overridden 
at volume-format time through the Format /l command. (The structure of a file record is described in 
the “File records” section later in this chapter.) Logically, the MFT contains one record for each file on 
the volume, including a record for the MFT itself. In addition to the MFT, each NTFS volume includes 
a set of metadata files containing the information that is used to implement the file system structure. 
Each of these NTFS metadata files has a name that begins with a dollar sign () and is hidden. For 
example, the file name of the MFT is MFT. The rest of the files on an NTFS volume are normal user files 
and directories, as shown in Figure 11-32.
Usually, each MFT record corresponds to a different file. If a file has a large number of attributes or 
becomes highly fragmented, however, more than one record might be needed for a single file. In such 
cases, the first MFT record, which stores the locations of the others, is called the base file record.
CHAPTER 11
Caching and file systems
657
$MFT - MFT
$MFTMirr - MFT mirror
$LogFile - Log file
\ - Root directory
$Volume - Volume file
$AttrDef - Attribute definition table
Reserved for NTFS
metadata files
0
1
2
3
4
5
$BitMap - Volume cluster allocation file
$Boot - Boot sector
$BadClus - Bad-cluster file
$Extend - Extended metadata directory
$Secure - Security settings file
$UpCase - Uppercase character mapping
6
7
8
9
10
11
12
Unused
$Extend\$Quota - Quota information
$Extend\$ObjId - Distributed link tracking information
$Extend\$RmMetadata\$Repair - RM repair information
$Extend\$Reparse - Back references to reparse points
$Extend\$RmMetadata - RM metadata directory
23
24
25
26
27
28
29
30
31
32
33
34
35
Unused
$Extend\$Deleted - POSIX deleted files
$Extend\$RmMetadata\$TxfLog - TxF log directory
$Extend\$RmMetadata\$Txf - TxF metadata directory
$Extend\$RmMetadata\$TxfLog\$Tops - TOPS file
$Extend\$RmMetadata\$TxfLog\$TxfLog.blf - TxF BLF
$TxfLogContainer00000000000000000001
$TxfLogContainer00000000000000000002
FIGURE 11-32 File records for NTFS metadata files in the MFT.
When it first accesses a volume, NTFS must mount it—that is, read metadata from the disk and 
construct internal data structures so that it can process application file system accesses. To mount the 
volume, NTFS looks in the volume boot record (VBR) (located at LCN 0), which contains a data structure 
called the boot parameter block (BPB), to find the physical disk address of the MFT. The MFT’s file record 
is the first entry in the table; the second file record points to a file located in the middle of the disk called 
the MFT mirror (file name MFTMirr) that contains a copy of the first four rows of the MFT. This partial 
copy of the MFT is used to locate metadata files if part of the MFT file can’t be read for some reason.
Once NTFS finds the file record for the MFT, it obtains the VCN-to-LCN mapping information in the 
file record’s data attribute and stores it into memory. Each run (runs are explained later in this chapter 
in the section “Resident and nonresident attributes”) has a VCN-to-LCN mapping and a run length 
because that’s all the information necessary to locate the LCN for any VCN. This mapping information 
658
CHAPTER 11
Caching and file systems
tells NTFS where the runs containing the MFT are located on the disk. NTFS then processes the MFT re-
cords for several more metadata files and opens the files. Next, NTFS performs its file system recovery 
operation (described in the section “Recovery” later in this chapter), and finally, it opens its remaining 
metadata files. The volume is now ready for user access.
Note For the sake of clarity, the text and diagrams in this chapter depict a run as including 
a VCN, an LCN, and a run length. NTFS actually compresses this information on disk into an 
LCN/next-VCN pair. Given a starting VCN, NTFS can determine the length of a run by sub-
tracting the starting VCN from the next VCN.
As the system runs, NTFS writes to another important metadata file, the log file (file name LogFile). 
NTFS uses the log file to record all operations that affect the NTFS volume structure, including file cre-
ation or any commands, such as copy, that alter the directory structure. The log file is used to recover an 
NTFS volume after a system failure and is also described in the “Recovery” section.
Another entry in the MFT is reserved for the root directory (also known as \; for example, C:\). Its file 
record contains an index of the files and directories stored in the root of the NTFS directory structure. 
When NTFS is first asked to open a file, it begins its search for the file in the root directory’s file record. 
After opening a file, NTFS stores the file’s MFT record number so that it can directly access the file’s 
MFT record when it reads and writes the file later.
NTFS records the allocation state of the volume in the bitmap file (file name BitMap). The data 
attribute for the bitmap file contains a bitmap, each of whose bits represents a cluster on the volume, 
identifying whether the cluster is free or has been allocated to a file.
The security file (file name Secure) stores the volume-wide security descriptor database. NTFS files 
and directories have individually settable security descriptors, but to conserve space, NTFS stores the 
settings in a common file, which allows files and directories that have the same security settings to 
reference the same security descriptor. In most environments, entire directory trees have the same 
security settings, so this optimization provides a significant saving of disk space.
Another system file, the boot file (file name Boot), stores the Windows bootstrap code if the volume 
is a system volume. On nonsystem volumes, there is code that displays an error message on the screen 
if an attempt is made to boot from that volume. For the system to boot, the bootstrap code must be 
located at a specific disk address so that the Boot Manager can find it. During formatting, the format
command defines this area as a file by creating a file record for it. All files are in the MFT, and all clusters 
are either free or allocated to a file—there are no hidden files or clusters in NTFS, although some files 
(metadata) are not visible to users. The boot file as well as NTFS metadata files can be individually 
protected by means of the security descriptors that are applied to all Windows objects. Using this “ev-
erything on the disk is a file” model also means that the bootstrap can be modified by normal file I/O, 
although the boot file is protected from editing.
NTFS also maintains a bad-cluster file (file name BadClus) for recording any bad spots on the disk 
volume and a file known as the volume file (file name Volume), which contains the volume name, the 
CHAPTER 11
Caching and file systems
659
version of NTFS for which the volume is formatted, and a number of flag bits that indicate the state and 
health of the volume, such as a bit that indicates that the volume is corrupt and must be repaired by 
the Chkdsk utility. (The Chkdsk utility is covered in more detail later in the chapter.) The uppercase file
(file name UpCase) includes a translation table between lowercase and uppercase characters. NTFS 
maintains a file containing an attribute definition table (file name AttrDef) that defines the attribute 
types supported on the volume and indicates whether they can be indexed, recovered during a system 
recovery operation, and so on.
Note Figure 11-32 shows the Master File Table of a NTFS volume and indicates the specific 
entries in which the metadata files are located. It is worth mentioning that file records at po-
sition less than 16 are guaranteed to be fixed. Metadata files located at entries greater than 
16 are subject to the order in which NTFS creates them. Indeed, the format tool doesnt cre-
ate any metadata file above position 16; this is the duty of the NTFS file system driver while 
mounting the volume for the first time (after the formatting has been completed). The order 
of the metadata files generated by the file system driver is not guaranteed.
NTFS stores several metadata files in the extensions (directory name Extend) metadata direc-
tory, including the obect identifier file (file name ObjId), the quota file (file name Quota), the change 
journal file (file name UsnJrnl), the reparse point file (file name Reparse), the Posix delete support 
directory (Deleted), and the default resource manager directory (directory name RmMetadata). These 
files store information related to extended features of NTFS. The object identifier file stores file object 
IDs, the quota file stores quota limit and behavior information on volumes that have quotas enabled, 
the change journal file records file and directory changes, and the reparse point file stores information 
about which files and directories on the volume include reparse point data.
The Posix Delete directory (Deleted) contains files, which are invisible to the user, that have been 
deleted using the new Posix semantic. Files deleted using the Posix semantic will be moved in this 
directory when the application that has originally requested the file deletion closes the file handle. 
Other applications that may still have a valid reference to the file continue to run while the file’s name is 
deleted from the namespace. Detailed information about the Posix deletion has been provided in the 
previous section.
The default resource manager directory contains directories related to transactional NTFS (TxF) 
support, including the transaction log directory (directory name TxfLog), the transaction isolation 
directory (directory name Txf), and the transaction repair directory (file name Repair). The transac-
tion log directory contains the TxF base log file (file name TxfLog.blf) and any number of log container 