Legitimate executable
CreateProcess()
CREATE_SUSPENDED
Attacker code
WriteProcessMemory()
Figure 3-9: The execution flow of process hollowing
Using this technique, the attacker creates a process in a suspended 
state, then unmaps its image after locating its base address in the PEB. 
Once the unmapping is complete, the attacker maps a new image, such as 
the adversary’s shellcode runner, to the process and aligns its section. If this 
succeeds, the process resumes execution.
Doppelgänging
In their 2017 Black Hat Europe presentation “Lost in Transaction: Process 
Doppelgänging,” Tal Liberman and Eugene Kogan introduced a new varia-
tion on process-image modification. Their technique, process doppelgänging, 
relies on two Windows features: Transactional NTFS (TxF) and the legacy 
process-creation API, ntdll!NtCreateProcessEx().
TxF is a now-deprecated method for performing filesystem actions as a sin-
gle atomic operation. It allows code to easily roll back file changes, such as during 
an update or in the event of an error, and has its own group of supporting APIs.
The legacy process-creation API performed process creation prior to the 
release of Windows 10, which introduced the more robust ntdll!NtCreateUser
Process(). While it’s deprecated for normal process creation, you’ll still find 
it used on Windows 10, in versions up to 20H2, to create minimal processes. 
It has the notable benefit of taking a section handle rather than a file for the 
process image but comes with some significant challenges. These difficulties 
stem from the fact that many of the process-creation steps, such as writing 
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   51
process parameters to the new process’s address space and creating the main 
thread object, aren’t handled behind the scenes. In order to use the legacy 
process-creation function, the developer must re-create those missing steps in 
their own code to ensure that the process can start.
Figure 3-10 shows the complex flow of process doppelgänging.
Overwritten ﬁle
Section containing 
attacker code
NtCreateSection()
Legitimate executable
WriteFile()
Attacker code
Create a TxF 
transaction and open 
“clean” ﬁle
CreateFileTransacted()
Roll back transaction 
to restore original 
ﬁle contents
Process running 
attacker code
Figure 3-10: The execution flow of process doppelgänging
In their proof of concept, Liberman and Kogan first create a transaction 
object and open the target file with kernel32!CreateFileTransacted(). They then 
overwrite this transacted file with their malicious code, create an image sec-
tion that points to the malicious code, and roll back the transaction with ker
nel32!RollbackTransaction(). At this point, the executable has been restored 
to its original state, but the image section is cached with the malicious code. 
From here, the authors call ntdll!NtCreateProcessEx(), passing in the section 
handle as a parameter, and create the main thread pointing to the entry 
point of their malicious code. After these objects are created, they resume 
the main thread, allowing the doppelgänged process to execute.
Herpaderping
Process herpaderping, invented by Johnny Shaw in 2020, leverages many of the same 
tricks as process doppelgänging; namely its use of the legacy process-creation 
API to create a process from a section object. While herpaderping can evade a 
driver’s image-based detections, its primary aim is to evade detection of the con-
tents of the dropped executable. Figure 3-11 shows how this technique works.
Section containing 
payload
Process object with 
payload in ﬁle object
NtCreateSection()
File containing 
payload
WriteFile()
Create empty 
payload ﬁle
Obscure the 
ﬁle contents
Main thread 
created and attacker 
code executed
NtCreateProcessEx()
NtCreateThreadEx()
Figure 3-11: The execution flow of process herpaderping
Evading EDR (Early Access) © 2023 by Matt Hand
52   Chapter 3
To perform herpaderping, an attacker first writes the malicious code to 
be executed to disk and creates the section object, leaving the handle to the 
dropped executable open. They then call the legacy process-creation API, 
with the section handle as a parameter, to create the process object. Before 
initializing the process, they obscure the original executable dropped to 
disk using the open file handle and kernel32!WriteFile() or a similar API. 
Finally, they create the main thread object and perform the remaining pro-
cess spin-up tasks.
At this point, the driver’s callback receives a notification, and it can 
scan the file’s contents using the FileObject member of the structure 
passed to the driver on process creation. However, because the file’s con-
tents have been modified, the scanning function will retrieve bogus data. 
Additionally, closing the file handle will send an IRP_MJ_CLEANUP I/O control 
code to any filesystem minifilters that have been registered. If the mini-
filter wishes to scan the contents of the file, it will meet the same fate as the 
driver, potentially resulting in a false-negative scan result.
Ghosting
One of the newest variations on process-image modification is process ghost-
ing, released in June 2021 by Gabriel Landau. Process ghosting relies on the 
fact that Windows only prevents the deletion of files after they’re mapped 
into an image section and doesn’t check whether an associated section 
actually exists during the deletion process. If a user attempts to open the 
mapped executable to modify or delete it, Windows will return an error. If 
the developer marks the file for deletion and then creates the image section 
from the executable, the file will be deleted when the file handle is closed, 
but the section object will persist. This technique’s execution flow is shown 
in Figure 3-12.
Create payload ﬁle
Empty ﬁle
File in 
delete-pending state
File containing 
attacker code
Section containing 
attacker code
Close ﬁle 
causing deletion
Process created 
from section
Thread created to 
execute attacker code
CloseFile()
CreateFile()
NtSetInformationFile()
FILE_DELETE_ON_CLOSE
WriteFile()
NtCreateSection()
NtCreateProcessEx()
NtCreateThreadEx()
Figure 3-12: The process-ghosting workflow
To implement this technique in practice, malware might create an 
empty file on disk and then immediately put it into a delete-pending state 
using the ntdll!NtSetInformationFile() API. While the file is in this state, the 
malware can write its payload to it. Note that external requests to open the 
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   53
file will fail, with ERROR_DELETE_PENDING, at this point. Next, the mal-
ware creates the image section from the file and then closes the file handle, 
deleting the file but preserving the image section. From here, the malware 
follows the steps to create a new process from a section object described 
in previous examples. When the driver receives a notification about the 
process creation and attempts to access the FILE_OBJECT backing the process 
(the structure used by Windows to represent a file object), it will receive a 
STATUS_FILE_DELETED error, preventing the file from being inspected.
Detection
While process-image modification has a seemingly endless number of varia-
tions, we can detect all of these using the same basic methods due to the 
technique’s reliance on two things: the creation of an image section that 
differs from the reported executable, whether it is modified or missing, and 
the use of the legacy process-creation API to create a new, non-minimal 
process from the image section.
Unfortunately, most of the detections for this tactic are reactive,  
occurring only as part of an investigation, or they leverage proprietary  
tooling. Still, by focusing on the basics of the technique, we can imag-
ine multiple potential ways to detect it. To demonstrate these methods, 
Aleksandra Doniec (@hasherezade) created a public proof of concept  
for process ghosting that we can analyze in a controlled environment.  
You can find this file, proc_ghost64.exe, at https://github.com/hasherezade 
/ process_ghosting/releases. Verify that its SHA-256 hash matches the following: 
8a74a522e9a91b777080d3cb95d8bbeea84cb71fda487bc3d4489188e3fd6855.
First, in kernel mode, the driver could search for information related 
to the process’s image either in the PEB or in the corresponding EPROCESS 
structure, the structure that represents a process object in the kernel. 
Because the user can control the PEB, the process structure is a better 
source. It contains process-image information in a number of locations, 
described in Table 3-1.
Table 3-1: Process-Image Information Contained in the EPROCESS Structure
Location
Process-image information
ImageFileName
Contains only the filename
ImageFilePointer.FileName
Contains the rooted Win32 filepath
SeAuditProcessCreationInfo 
.ImageFileName
Contains the full NT path but may not always be 
populated
ImagePathHash
Contains the hashed NT, or canonicalized, path via 
nt!PfCalculateProcessHash()
Drivers may query these paths by using APIs such as nt!SeLocateProcess 
ImageName() or nt!ZwQueryInformationProcess() to retrieve the true image path, 
at which point they still need a way to determine whether the process has 
been tampered with. Despite being unreliable, the PEB provides a point 
of comparison. Let’s walk through this comparison using WinDbg. First, 
Evading EDR (Early Access) © 2023 by Matt Hand
54   Chapter 3
we attempt to pull the image’s filepath from one of the process structure’s 
fields (Listing 3-15).
0: kd> dt nt!_EPROCESS SeAuditProcessCreationInfo @$proc
+0x5c0 SeAuditProcessCreationInfo : _SE_AUDIT_PROCESS_CREATION_INFO
0: kd> dt (nt!_OBJECT_NAME_INFORMATION *) @$proc+0x5c0
0xffff9b8f`96880270
+0x000 Name  
 : _UNICODE_STRING " "
Listing 3-15: Pulling the filepath from SeAuditProcessCreationInfo
Interestingly, WinDbg returns an empty string as the image name. This 
is atypical; for example, Listing 3-16 returns what you’d expect to see in the 
case of an unmodified notepad.exe.
1: kd> dt (nt!_OBJECT_NAME_INFORMATION *) @$proc+0x5c0
Breakpoint 0 hit
0xffff9b8f`995e6170
+0x000 Name  
: _UNICODE_STRING  
"\Device\HarddiskVolume2\Windows\System32\notepad.exe"
Listing 3-16: The UNICODE_STRING field populated with the NT path of the image
Let’s also check another member of the process structure, ImageFileName. 
While this field won’t return the full image path, it still provides valuable 
information, as you can see in Listing 3-17.
0: kd> dt nt!_EPROCESS ImageFileName @$proc
+0x5a8 ImageFileName : [15] "THFA8.tmp"
Listing 3-17: Reading the ImageFileName member of the EPROCESS structure
The returned filename should have already attracted attention, as .tmp 
files aren’t very common executables. In order to determine whether image 
tampering might have taken place, we’ll query the PEB. A few locations in 
the PEB will return the image path: ProcessParameters.ImagePathName and Ldr.
InMemoryOrderModuleList. Let’s use WinDbg to demonstrate this (Listing 3-18).
1: kd> dt nt!_PEB ProcessParameters @$peb
+0x020 ProcessParameters : 0x000001c1`c9a71b80 _RTL_USER_PROCESS_PARAMETERS
1: kd> dt nt!_RTL_USER_PROCESS_PARAMETERS ImagePathName poi(@$peb+0x20)
+0x060 ImagePathName : _UNICODE_STRING "C:\WINDOWS\system32\notepad.exe"
Listing 3-18: Extracting the process image’s path from ImagePathName
As shown in the WinDbg output, the PEB reports the process image’s 
path as C:\Windows\System32\notepad.exe. We can verify this by querying the 
Ldr.InMemoryOrderModuleList field, shown in Listing 3-19.
1: kd> !peb
PEB at 0000002d609b9000
InheritedAddressSpace:  No
ReadImageFileExecOptions: No
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   55
BeingDebugged:  
 No
ImageBaseAddress:  
 00007ff60edc0000
NtGlobalFlag: 
 0
NtGlobalFlag2:  
 0
Ldr  
 00007ffc74c1a4c0
Ldr.Initialized:  
 Yes
Ldr.InInitializationOrderModuleList: 000001c1c9a72390 . 000001c1c9aa7f50
Ldr.InLoadOrderModuleList:  
 000001c1c9a72500 . 000001c1c9aa8520
Ldr.InMemoryOrderModuleList:  
 000001c1c9a72510 . 000001c1c9aa8530
Base Module
 1 7ff60edc0000 C:\WINDOWS\system32\notepad.exe
Listing 3-19: Extracting the process image’s path from InMemoryOrderModuleList
You can see here that notepad.exe is the first image in the module 
list 1. In my testing, this should always be the case. If an EDR found 
a mismatch like this between the image name reported in the process 
structures and in the PEB, it could reasonably say that some type of 
process-image tampering had occurred. It couldn’t, however, determine 
which technique the attacker had used. To make that call, it would have to 
collect additional information.
The EDR might first try to investigate the file directly, such as by scan-
ning its contents through the pointer stored in the process structure’s 
ImageFilePointer field. If malware created the process by passing an image 
section object through the legacy process-creation API, as in the proof of 
concept, this member will be empty (Listing 3-20).
1: kd> dt nt!_EPROCESS ImageFilePointer @$proc
+0x5a0 ImageFilePointer : (null)
Listing 3-20: The empty ImageFilePointer field
The use of the legacy API to create a process from a section is a major 
indicator that something weird is going on. At this point, the EDR can 
reasonably say that this is what happened. To support this assumption, the 
EDR could also check whether the process is minimal or pico (derived from 
a minimal process), as shown in Listing 3-21.
1: kd> dt nt!_EPROCESS Minimal PicoCreated @$proc
+0x460 PicoCreated : 0y0
+0x87c Minimal  
 : 0y0
Listing 3-21: The Minimal and PicoCreated members set to false
Another place to look for anomalies is the virtual address descriptor 
(VAD) tree used for tracking a process’s contiguous virtual memory allo-
cations. The VAD tree can provide very useful information about loaded 
modules and the permissions of memory allocations. The root of this tree 
is stored in the VadRoot member of the process structure, which we can’t 
directly retrieve through a Microsoft-supplied API, but you can find a refer-
ence implementation in Blackbone, a popular driver used for manipulating 
memory.
Evading EDR (Early Access) © 2023 by Matt Hand
56   Chapter 3
To detect process-image modifications, you’ll probably want to look at 
the mapped allocation types, which include READONLY file mappings, such 
as the COM+ catalog files (for example, C:\Windows\Registration\Rxxxxxxx1 
.clb), and EXECUTE_WRITECOPY executable files. In the VAD tree, you’ll 
commonly see the Win32-rooted path for the process image (in other 
words, the executable file that backs the process as the first mapped execut-
able). Listing 3-22 shows the truncated output of WinDbg’s !vad command.
0: kd> !vad
VAD 
Commit
ffffa207d5c88d00 7 Mapped  
NO_ACCESS  
Pagefile section, shared commit 0x1293
ffffa207d5c89340 6 Mapped  
Exe EXECUTE_WRITECOPY \Windows\System32\notepad.exe
ffffa207dc976c90 4 Mapped  
Exe EXECUTE_WRITECOPY \Windows\System32\oleacc.dll
Listing 3-22: The output of the !vad command in WinDbg for a normal process
The output of this tool shows mapped allocations for an unmodified 
notepad.exe process. Now let’s see how they look in a ghosted process  
(Listing 3-23).
0: kd> !vad
VAD 
Commit
ffffa207d5c96860 2 Mapped  
NO_ACCESS  
Pagefile section, shared commit 0x1293
ffffa207d5c967c0 6 Mapped Exe EXECUTE_WRITECOPY 
\Users\dev\AppData\Local\Temp\THF53.tmp
ffffa207d5c95a00 9 Mapped Exe EXECUTE_WRITECOPY 
\Windows\System32\gdi32full.dll
Listing 3-23: The output of the !vad command for a ghosted process
This mapped allocation shows the path to the .tmp file instead of the 
path to notepad.exe.
Now that we know the path to the image of interest, we can investi-
gate it further. One way to accomplish this is to use the ntdll!NtQueryInfor
mationFile() API with the FileStandardInformation class, which will return a 
FILE_STANDARD_INFORMATION structure. This structure contains the DeletePending 
field, which is a Boolean indicating whether the file has been marked for 
deletion. Under normal circumstances, you could also pull this informa-
tion from the DeletePending member of the FILE_OBJECT structure. Inside 
the EPROCESS structure for the relevant process, this is pointed to by the 
ImageFilePointer member. In the case of the ghosted process, this pointer 
will be null, so the EDR can’t use it. Listing 3-24 shows what a normal pro-
cess’s image file pointer and deletion status should look like.
2: kd> dt nt!_EPROCESS ImageFilePointer @$proc
+0x5a0 ImageFilePointer : 0xffffad8b`a3664200 _FILE_OBJECT
2: kd> dt nt!_FILE_OBJECT DeletePending 0xffffad8b`a3664200
+0x049 DeletePending : 0 ‘ ’
Listing 3-24: Normal ImageFilePointer and DeletePending members
This listing is from a notepad.exe process executed under normal condi-
tions. In a ghosted process, the image file pointer would be an invalid value, 
and thus, the deletion status flag would also be invalid.
Evading EDR (Early Access) © 2023 by Matt Hand
Process- and Thread-Creation Notifications   57