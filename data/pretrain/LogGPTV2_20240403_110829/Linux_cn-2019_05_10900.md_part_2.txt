        print('holding lock')
```
新方法好多了！很短，并且在一个大函数中使用其他 try-except 块时不容易出错。因为“尽量找一种，最好是唯一一种明显的解决方案”，[旧语法在 Python 3.7 中被弃用](https://bugs.python.org/issue32253)，并且很快就会被禁止。
不可避免的是，生态变化会对你的代码产生影响，因此要学会温柔地删除特性。在此之前，请考虑删除它的成本或好处。负责任的维护者不会愿意让用户更改大量代码或逻辑。（还记得 Python 3 在重新添加会 `u` 字符串前缀之前删除它是多么痛苦吗？）如果代码删除是机械性的动作，就像一个简单的搜索和替换，或者如果该特性是危险的，那么它可能值得删除。
#### 是否删除特性
![Balance scales](/data/attachment/album/201905/26/134242nn31guu3bx4gqe4t.jpg "Balance scales")
| 反对 | 支持 |
| --- | --- |
| 代码必须改变 | 改变是机械性的 |
| 逻辑必须改变 | 特性是危险的 |
就我们饥饿的蜥蜴而言，我们决定删除它的腿，这样它就可以滑进老鼠洞里吃掉它。我们该怎么做呢？我们可以删除 `walk` 方法，像下面一样修改代码：
```
class Reptile:
    def walk(self):
        print('step step step')
```
变成这样：
```
class Reptile:
    def slither(self):
        print('slide slide slide')
```
这不是一个好主意，这个生物习惯于走路！或者，就库而言，你的用户拥有依赖于现有方法的代码。当他们升级到最新库版本时，他们的代码将会崩溃。
```
# 用户的代码，哦，不!
Reptile.walk()
```
因此，负责任的创建者承诺：
#### 第五条预定：温柔地删除
温柔地删除一个特性需要几个步骤。从用腿走路的蜥蜴开始，首先添加新方法 `slither`。接下来，弃用旧方法。
```
import warnings
class Reptile:
    def walk(self):
        warnings.warn(
                "walk is deprecated, use slither",
                 DeprecationWarning, stacklevel=2)
        print('step step step')
    def slither(self):
        print('slide slide slide')
```
Python 的 warnings 模块非常强大。默认情况下，它会将警告输出到 stderr，每个代码位置只显示一次，但你可以禁用警告或将其转换为异常，以及其它选项。
一旦将这个警告添加到库中，PyCharm 和其他 IDE 就会使用删除线呈现这个被弃用的方法。用户马上就知道该删除这个方法。
> 
> Reptile().~~walk()~~
> 
> 
> 
当他们使用升级后的库运行代码时会发生什么？
```
$ python3 script.py
DeprecationWarning: walk is deprecated, use slither
    script.py:14: Reptile().walk()
step step step
```
默认情况下，他们会在 stderr 上看到警告，但脚本会成功并打印 “step step step”。警告的回溯显示必须修复用户代码的哪一行。（这就是 `stacklevel` 参数的作用：它显示了用户需要更改的调用，而不是库中生成警告的行。）请注意，错误消息有指导意义，它描述了库用户迁移到新版本必须做的事情。
你的用户可能会希望测试他们的代码，并证明他们没有调用弃用的库方法。仅警告不会使单元测试失败，但异常会失败。Python 有一个命令行选项，可以将弃用警告转换为异常。
```
> python3 -Werror::DeprecationWarning script.py
Traceback (most recent call last):
    File "script.py", line 14, in 
        Reptile().walk()
    File "script.py", line 8, in walk
        DeprecationWarning, stacklevel=2)
DeprecationWarning: walk is deprecated, use slither
```
现在，“step step step” 没有输出出来，因为脚本以一个错误终止。
因此，一旦你发布了库的一个版本，该版本会警告已启用的 `walk` 方法，你就可以在下一个版本中安全地删除它。对吧？
考虑一下你的库用户在他们项目的 `requirements` 中可能有什么。
```
# 用户的 requirements.txt 显示 reptile 包的依赖关系
reptile
```
下次他们部署代码时，他们将安装最新版本的库。如果他们尚未处理所有的弃用，那么他们的代码将会崩溃，因为代码仍然依赖 `walk`。你需要温柔一点，你必须向用户做出三个承诺：维护更改日志，选择版本化方案和编写升级指南。
#### 第六个约定：维护变更日志
你的库必须有更改日志，其主要目的是宣布用户所依赖的功能何时被弃用或删除。
> 
> **版本 1.1 中的更改**
> 
> 
> **新特性**
> 
> 
> * 新功能 Reptile.slither()
> 
> 
> **弃用**
> 
> 
> * Reptile.walk() 已弃用，将在 2.0 版本中删除，请使用 slither()
> 
> 
> 
负责任的创建者会使用版本号来表示库发生了怎样的变化，以便用户能够对升级做出明智的决定。“版本化方案”是一种用于交流变化速度的语言。
#### 第七个约定：选择一个版本化方案
有两种广泛使用的方案，[语义版本控制](https://semver.org)和基于时间的版本控制。我推荐任何库都进行语义版本控制。Python 的风格在 [PEP 440](https://www.python.org/dev/peps/pep-0440/) 中定义，像 `pip` 这样的工具可以理解语义版本号。
如果你为库选择语义版本控制，你可以使用版本号温柔地删除腿，例如：
> 
> 1.0: 第一个“稳定”版，带有 `walk()` 1.1: 添加 `slither()`，废弃 `walk()` 2.0: 删除 `walk()`
> 
> 
> 
你的用户依赖于你的库的版本应该有一个范围，例如：
```
# 用户的 requirements.txt
reptile>=1, 
> 2017.06.0: 2017 年 6 月的版本 2018.11.0: 添加 `slither()`，废弃 `walk()` 2019.04.0: 删除 `walk()`
> 
> 
> 
用户可以这样依赖于你的库：
```
# 用户的 requirements.txt，基于时间控制的版本
reptile==2018.11.*
```
这非常棒，但你的用户如何知道你的版本方案，以及如何测试代码来进行弃用呢？你必须告诉他们如何升级。
#### 第八个约定：写一个升级指南
下面是一个负责任的库创建者如何指导用户：
> 
> **升级到 2.0**
> 
> 
> **从弃用的 API 迁移**
> 
> 
> 请参阅更改日志以了解已弃用的特性。
> 
> 
> **启用弃用警告**
> 
> 
> 升级到 1.1 并使用以下代码测试代码：
> 
> 
> `python -Werror::DeprecationWarning`
> 
> 
> ​​​​​​ 现在可以安全地升级了。
> 
> 
> 
你必须通过向用户显示命令行选项来教会用户如何处理弃用警告。并非所有 Python 程序员都知道这一点 —— 我自己就每次都得查找这个语法。注意，你必须*发布*一个版本，它输出来自每个弃用的 API 的警告，以便用户可以在再次升级之前使用该版本进行测试。在本例中，1.1 版本是小版本。它允许你的用户逐步重写代码，分别修复每个弃用警告，直到他们完全迁移到最新的 API。他们可以彼此独立地测试代码和库的更改，并隔离 bug 的原因。
如果你选择语义版本控制，则此过渡期将持续到下一个主要版本，从 1.x 到 2.0，或从 2.x 到 3.0 以此类推。删除生物腿部的温柔方法是至少给它一个版本来调整其生活方式。不要一次性把腿删掉！
![A skink](/data/attachment/album/201905/26/134245ypfefay2pwy4hfly.jpg "A skink")
版本号、弃用警告、更改日志和升级指南可以协同工作，在不违背与用户约定的情况下温柔地改进你的库。[Twisted 项目的兼容性政策](https://twistedmatrix.com/documents/current/core/development/policy/compatibility-policy.html) 解释的很漂亮：
> 
> “先行者总是自由的”
> 
> 
> 运行的应用程序在没有任何警告的情况下都可以升级为 Twisted 的一个次要版本。
> 
> 
> 换句话说，任何运行其测试而不触发 Twisted 警告的应用程序应该能够将其 Twisted 版本升级至少一次，除了可能产生新警告之外没有任何不良影响。
> 
> 
> 
现在，我们的造物主已经获得了智慧和力量，可以通过添加方法来添加特性，并温柔地删除它们。我们还可以通过添加参数来添加特性，但这带来了新的难度。你准备好了吗？
### 添加参数
想象一下，你只是给了你的蛇形生物一对翅膀。现在你必须允许它选择是滑行还是飞行。目前它的 `move` 功能只接受一个参数。
```
# 你的库代码
def move(direction):
    print(f'slither {direction}')
# 用户的应用
move('north')
```
你想要添加一个 `mode` 参数，但如果用户升级库，这会破坏他们的代码，因为他们只传递了一个参数。