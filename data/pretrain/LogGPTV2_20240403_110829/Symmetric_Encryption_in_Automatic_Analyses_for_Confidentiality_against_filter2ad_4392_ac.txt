approximation of that set of uses is not allowed.
• We want to ﬁnd dead code — statements that are never executed. It’s permissible
to ﬁnd only a subset of all dead code.
Removing dead code may make the analysis given in Sec. 8 more optimistic, because
some send-statements may be removed. The reason to ﬁnd a key k with the aforemen-
tioned properties is to check whether all uses of that key that are necessary in creating
the view of the adversary can be replaced with the uses of encryption and decryption
oracles, encrypting and decrypting with that key. If that is really the case then the
statements of the form x := encr k(y) may be replaced by x := encr k(Z), where
13
Z is a new variable whose value is set to 0. Such replacement does not distinguish-
ably change the view of the adversary because of the security of the encryption system
against adaptive CCA. Removing dead code also simpliﬁes the ﬁnding of such keys.
The process of deﬁning ℘′ has several steps. First we remove all dead code from ℘
that we can ﬁnd through a simple syntactic analysis presented in Sec. 7.1. After that the
protocol is “abstractly interpreted”. To each variable we assign a term that describes the
construction of the value of that variable from atomic values (keys, random numbers,
constants, the secret message and the adversary’s inputs). We describe this part in
Sec. 7.2. The interpretation is necessary for knowing, which keys are used in which
statements.
As next a suitable key k is selected. Suitability means that the key is not really
necessary for producing the view of the adversary. Instead, only access to black boxes
encrypting and decrypting with that key is necessary. We describe this part in Sec. 7.3.
Finally the actual replacement of statements occurs. This is described in Sec. 7.4,
the changes presented there deﬁne the protocol ℘′.
1, ℘′
In Sec. 7.5 we describe how the protocols ℘′
tocol ℘′.
2, . . . are constructed from the pro-
7.1 Removing syntactically unreachable code
The order of statements occurring in the protocol puts certain restrictions on the order
in which they may be executed. Namely, consider a directed graph G℘ with the vertex
set L℘ (5) and the following arcs:
• For all A ∈ Parts′ and 1 ≤ i ≤ lA − 1 (recall that lA was the number of
statements in the program ℘(A)) there is an arc from (A, i) to (A, i + 1).
• For all A ∈ Parts there is an arc from (pre, lpre) to (A, 1).
• If (A, i) is the statement signal (s) and (A′, i′) is the statement wait (s) (for the
same s ∈ Sem) then there is an arc from (A, i) to (A′, i′).
Clearly, if there exists a (directed) path from a node (A, i) to a node (A′, i′), then in
every possible execution, if the statement at (A′, i′) is executed, then the statement at
(A, i) must already have been executed earlier. Therefore, if the graph G℘ contains
(directed) cycles, then no statements in these cycles or following them can be executed
— they are dead code. We can remove these statements. In the following we assume
that G℘ is a directed acyclic graph.
7.2 Interpreting the protocol
We assume that all statements in a protocol have been labeled by elements of some set
Lab, such that all statements have different labels. We can identify the sets Lab and
L℘ (5). In the following we determine how are the values of variables constructed from
“atomic” values.
The deﬁnition of terms T ∈ Trm constituting the abstract values of variables is
given in Fig. 3. Here T1, . . . , Tm are terms, l ∈ Lab and x ∈ Var. We see that the
constructors of Trm more or less correspond to the statements of the programming
language. The meaning of terms becomes clearer when we give the abstract interpre-
tation of statements.
As we said before, abstractly interpreting the protocol assigns a term to each vari-
able. Let I(x) ∈ Trm denote the term assigned to the variable x. We let I(M ) =
14
T ::= key(l)
|
|
tuplem(T1, . . . , Tm)
encr (l, T1, T2)
|
| πm
random(l)
i (T1)
|
|
const(b)
input(l)
secret
|
| decr (T1, T2)
Figure 3: The set of abstract values
secret, where M ∈ Var was the variable containing the secret value. The rest of the
terms I(x) are deﬁned by examining the statement deﬁning x.
The abstract interpretation of statements deﬁning the value of a variable x deﬁnes
the term I(x). It is deﬁned via the label of the statement and the terms assigned to
variables at the right hand side of the statement. The deﬁnition of I(x) is given in Fig. 4.
We see that a statement label is included in the term iff the result of the statement may
depend on something else than the arguments of the statement — namely on random
numbers or adversary’s input.
x := . . .
gen keyl
randoml
(x1, . . . , xm)
πm
i (y)
encr k(y)l
decr k(y)
receivel
constant(b)
y
I(x) is
key(l)
random(l)
tuple m(I(x1), . . . , I(xm))
πm
i (I(y))
encr (l, I(k), I(y))
decr (I(k), I(y))
input (l)
const (b)
I(y)
Figure 4: Deﬁnition of the terms I(x)
The abstract interpretation of send x does nothing because this statement has no
effect on the values of variables.
We can give a semantics to the terms T ∈ Trm. Let the random choices r ∈ R be
n is only deﬁned for terms
ﬁxed. We deﬁne ιr
occurring as the abstract values of variables, as well as for their subterms):
n : Trm → Σ⊥ as follows (the function ιr
• ιr
n(input (l)) is equal to the value of the variable x deﬁned by the statement
x := receivel. As the random choices are ﬁxed, so is the value of x.
• ιr
the key is generated with the random
n(key(l)) = τ (key, Kr(l,p)(1n)), i.e.
coin-tosses ﬁxed as r(l, p); here l represents the ﬁrst two arguments of r. We say
that the key is tagged with key.
• ιr
n(random(l)) is the uniformly generated bit-string of length p(n) (the polyno-
mial p determined the length of random bit-strings) generated with the random
coin-tosses r(l, p) and tagged with random.
• ιr
• ιr
n(const (b)) = τ (const, b).
n(secret ) is the secret value ﬁxed by the random coin-tosses r(M ) and tagged
with secret.
15
• ιr
n(tuple m(T1, . . . , Tm) is ⊥ if any of ιr
n(Ti) is ⊥. Otherwise it is
τ (τ (tuple, m), τ (ιr
n(T1), τ (· · · τ (ιr
n(Tm−1), ιr
n(Tm))) · · · )
i.e. the tuple is constructed in the same way as by the execution of the tupling
statement.
• ιr
i (T )) is ⊥ if ιr
n(T ) is parsed exactly as by the
n(πm
execution of the projection statement. The i-th element of that parse is taken as
n(πm
ιr
i (T )). If the parse fails then ιr
n(T ) is ⊥. Otherwise ιr
i (T )) = ⊥.
n(πm
• ιr
n(decr (T1, T2)) is ⊥ if
– ιr
n(T1) is ⊥ or not tagged with key;
– ιr
n(T2) is ⊥ or not tagged with ciphertext;
– D(1n, t1, t2) fails, where ( , t1) = τ −1(ιr
n(T1)) and ( , t2) = τ −1(ιr
n(T2)).
Otherwise ιr
n(decr (T1, T2)) is equal to the result of that decryption.
• ιr
n(encr (l, T1, T2)) is ⊥ if ιr
n(T2) is
⊥. Otherwise it is equal to τ (ciphertext, Er(l,p)(1n, t1, t2)) where ( , t1) =
τ −1(ιr
n(T1) is ⊥ or not tagged with key or ιr
n(T1)) and ( , t2) = τ −1(ιr
n(T2)).
Let X r
n ⊆ L℘ denote the set of statements that are actually executed (for the ran-
dom choices r), i.e. the execution of the protocol is not stopped before reaching that
statement and the participant containing that statement does not get stuck at or before
that statement.
Theorem 2. Let x ∈ Var and let l ∈ L℘ be (the label of) the statement deﬁning x. If
l ∈ X r
n or x = M then
[[℘, A]]r
n[vx] = ιr
n(I(x)) .
(7)
Proof. We prove the theorem by induction over the order of execution of statements of
℘ (the order is determined by r). The base of the induction is the case x = M . In this
case (7) follows directly from the deﬁnition of ιr
n(secret ).
Let x be a variable different from M . Let Sl be the statement deﬁning x, let l ∈ X r
n.
By the properties of the execution, the labels of the statements deﬁning the variables
n. By the induction hypothesis,
occurring at the right hand side of S all belong to X r
(7) holds for all these variables. Consider S, i.e. consider the possible cases from
Fig. 1. In all cases we easily convince ourselves in (7) by comparing the deﬁnition of
n.
the execution of S with the deﬁnition of ιr
We have rules for deriving the equality or the inequality of two terms (it is also pos-
sible that neither can be derived for certain terms). For example, projection and tupling
cancel out, as do decryption and encryption (under certain conditions). An example
of inequality is that the different keys are unequal. All rules are semantically justiﬁed
— if we can derive that certain two terms are [in]equal, then there is only insigniﬁ-
cant probability that the bit-strings corresponding to these terms are not [in]equal. The
probability is taken over protocol runs (i.e. over r ∈R R).
We denote the derived equality of terms T1 and T2 in protocol P by T1 ≃ T2 and
their inequality by T1 6≃ T2. We can also derive that the semantics of a certain term
T is almost always1 ⊥; we denote this by stuck T . Fig. 5 presents the axioms and
16
T1 ≃ T ′
1 . . . Tm ≃ T ′
m
C is m-ary constructor of Trm
C(T1, . . . , Tm) ≃ C(T ′
1, . . . , T ′
m)
(ind)
(id)
T ≃ T
i (tuple m(T1, . . . , Tm)) ≃ Ti
πm
(cant)
Tk ≃ T ′
k
decr (Tk, encr (l, T ′
k, T )) ≃ T
(cane)
C, C′ ∈ {key, random, const, tuple2, tuple3, tuple4, . . . , encr }
C 6= C′
C(. . .) 6≃ C′(. . .)
Ti 6≃ T ′
i
tuplem(T1, . . . , Tm) 6≃ tuplem(T ′
1, . . . , T ′
m)
(nec)
(dift)
l 6= l′
key(l) 6≃ key(l)
(difk)
l 6= l′
encr (l, T1, T2) 6≃ encr (l′, T3, T4)
(dife)
l 6= l′
random(l) 6≃ random(l′)
(difr)
C ∈ {key, random, const, tuple2, . . . , tuplem−1, tuplem+1, . . . , encr }
stuck πm
i (C(. . .))
(incp)
C ∈ {key, random, const, tuple2, tuple3, . . .}
stuck decr (T, C(. . .))
(ince1)
C ∈ {random, const, tuple2, tuple3, . . . , encr }
stuck decr (C(. . .), T )
(ince2)
stuck T C is a constructor of Trm
stuck C(. . . , T, . . .)
(st)
Figure 5: Equality and inequality of terms
17
inference rules deﬁning ≃, 6≃ and stuck. Most of these rules should be obvious. The
rule (nec) says that the type of the value that a bit-string represents can be determined
from that bit-string. The rules (difk) and (difr) say that different random bit-strings are
different. The rule (dife) is justiﬁed by the requirement for the encryption algorithm to
almost never return the same bit-string twice. The rules (incp), (ince1) and (ince2) state
that projection and decryption check the types of their inputs.
We say that T1 ≃ T2 is sound at the statement Sl if the probability
P[l ∈ X r
n ∧ ιr
n(T1) 6= ⊥ 6= ιr
n(T2) ∧ ιr
n(T1) 6= ιr
n(T2) : r ∈R R]
is negligible in n. Similarly, T1 6≃ T2 is sound at the statement Sl if the probability
P[l ∈ X r
n ∧ ιr
n(T1) 6= ⊥ 6= ιr
n(T2) ∧ ιr
n(T1) = ιr
n(T2) : r ∈R R]
(8)
(9)
is negligible in n. I.e. soundness at the statement S means that if S really is executed
then the variables whose abstract values are the terms T1 and T2 are [in]equal. Some-
times we can determine the soundness of both T1 ≃ T2 and T1 6≃ T2 at a certain
statement. If this happens and the statement deﬁning the variable whose abstract value
is T1 or T2 is above S (i.e. there is a path from this statement to S in the graph G℘)
then we have determined that this statement is dead.
We say that stuck T is sound at the statement Sl if the probability
P[l ∈ X r
n ∧ ιr
n(T ) 6= ⊥ | r ∈R R]
(10)
is negligible in n. If the statement deﬁning the variable whose abstract value is T is
above S then S is dead.
Theorem 3. All rules in Fig. 5 are sound. I.e. if Sl is a statement of the protocol and
all the premises of some rule are sound at Sl then the consequent of that rule is also
sound at Sl.
Proof.
• Rule (id): obvious.
• Rule (ind): the application of the constructor C means the application of some
polynomial-time computable function to the semantics of the terms T1, . . . , Tm
m. This application cannot amplify the negligible probability of
and T ′
1, . . . , T ′
inequality of ιr
n(Ti) and ιr
i ) to non-negligible.
n(T ′
• Rules (can∗): pick r ∈ R in such way that the event described by (8) happens
for the premise (if there are any premises). Such picking disallows only a negli-
gible fraction of possible random choices. By deﬁnition of ιr
n, the semantics of
more complex term in the consequence of these rules is either ⊥ or equal to the
semantics of the simpler term.
• Rule (nec): the constructors C and C′ tag the values that they construct with
different tags. The probability of these values being equal is zero.
• Rules (difk) and (difr): The semantics of two terms in the consequent are two dif-
ferent keys or two different random bit-strings. There is only negligible chance
that they are equal (if the probability of two keys being equal were non-negligible
then there would be non-negligible chance of guessing keys).
1the opposite has negligible probability
18
• Rule (dift): Fix r ∈ R. Consider the following mutually exclusive cases:
– ιr
n(Ti) = ιr
premises of the theorem.
n(T ′
i ). This case happens with negligible probability by the