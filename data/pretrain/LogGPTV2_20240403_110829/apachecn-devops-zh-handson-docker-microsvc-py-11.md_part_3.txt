if os.path.isfile(PUBLIC_KEY_PATH):
    with open(PUBLIC_KEY_PATH) as fp:
        PUBLIC_KEY = fp.read()
```
前端服务在`settings.py`文件中添加公钥:
```
TOKENS_PUBLIC_KEY = ...
PUBLIC_KEY_PATH = '/opt/keys/public_key.pub'
if os.path.isfile(PUBLIC_KEY_PATH):
    with open(PUBLIC_KEY_PATH) as fp:
        TOKENS_PUBLIC_KEY = fp.read()
```
这种配置使机密对应用可用，并关闭机密值的循环。现在，微服务集群使用来自机密值的签名密钥，这是存储敏感数据的安全方式。
# 定义影响多个服务的新功能
我们讨论了单个微服务范围内的变更请求。但是，如果我们需要部署一个在两个或多个微服务中工作的功能，该怎么办呢？
与整体方法相比，这些类型的功能应该相对较少，并且是微服务开销的主要原因之一。在单块中，这种情况是不可能的，因为所有东西都包含在单块的壁内。
同时，在微服务架构中，这是一个复杂的变化。这涉及到驻留在两个不同回购中的每个相关微服务上的至少两个独立特性。很可能是由两个不同的团队开发，或者至少不同的人负责每个功能。
# 一次部署一个变更
为了确保这些特性可以顺利部署，一次一个，它们需要保持向后兼容性。这意味着您需要能够生活在服务 A 已经部署的中间阶段，而不是服务 b。微服务中的每个变化都需要尽可能小，以最小化风险，并且应该一次引入一个变化。
为什么我们不同时部署它们呢？因为同时释放两个微服务是危险的。首先，部署不是即时的，因此会有过时的服务发送或接收系统不准备处理的呼叫的时刻。这会产生错误，影响您的客户。
但是有可能出现这样的情况，其中一个微服务不正确，需要回滚。然后，系统处于不一致的状态。依赖的微服务也需要回滚。这本身是有问题的，但是当在调试这个问题的过程中，两个微服务都被卡住，并且在问题得到修复之前无法更新时，这可能会使事情变得更糟。
在健康的微服务环境中，部署会经常发生。因为另一个服务需要工作而不得不停止一个微服务的管道是一个糟糕的处境，它只会增加压力和紧迫性。
Remember that we talked about the speed of deployment and change. Deploying small increments often is the best way to ensure that each deployment will be of high quality. The constant flow of incremental work is very important.
Interrupting this flow due to an error is bad, but the effect multiplies quickly if the inability to deploy affects the pace of multiple microservices.
同时部署多个服务也可能造成死锁，两个服务都需要工作来解决这种情况。这使得解决问题的开发和时间变得复杂。
需要进行分析来确定哪个微服务依赖于另一个，而不是同时部署。很多时候，这是显而易见的。在我们的例子中，前端依赖于思想后端，所以任何涉及到它们的变化都需要从思想后端开始，然后转移到前端。
Actually, the Users Backend is a dependency of both, so assuming there's a change that affects the three of them, you'll need to first change the Users Backend, then the Thoughts Backend, and finally the Frontend.
请记住，有时部署可能需要跨服务移动不止一次。例如，让我们假设认证头的签名机制发生了变化。过程应该如下:
1.  在用户后端实现新的认证系统，但通过配置更改继续使用旧系统生成令牌。到目前为止，旧的认证过程仍在群集中使用。
2.  更改思想后端，以允许使用旧的和新的认证系统。请注意，它尚未激活。
3.  将前端更改为同时使用两种认证系统。尽管如此，在这一点上，新系统还没有使用。
4.  更改用户后端的配置以生成新的认证令牌。现在是新系统开始使用的时候了。在部署过程中，可能会生成一些旧的系统令牌。
5.  用户后端和前端将使用系统中的任何令牌，无论是新的还是旧的。旧代币将随着时间的推移而消失，因为它们会过期。新令牌是唯一正在创建的令牌。
6.  作为一个可选阶段，旧的认证系统可以从系统中删除。这三个系统可以删除它们，而没有任何依赖性，因为此时不使用该系统。
在流程的任何一步，服务都不会中断。每个单独的变化都是安全的。这个过程正在慢慢地使整个系统进化，但是如果出现问题，每个单独的步骤都是可逆的，并且服务不会中断。
系统倾向于通过增加新的特性来开发，通常会有一个清理阶段。通常，系统长期使用不推荐使用的功能，即使该功能没有在任何地方使用。
We will talk a bit more about clean-up in [Chapter 12](12.html), *Collaborating and Communicating across Teams*.
配置更改也可能需要此过程。在该示例中，更改签名认证标头所需的私钥需要以下步骤:
1.  让思想后端和前端能够处理多个公钥。这是一个前提，也是一个新特点。
2.  在思想后端中更改处理过的密钥，以同时拥有旧的和新的公钥。到目前为止，系统中没有使用新密钥签名的标头。
3.  更改前端中的手柄键，使其既有旧的也有新的。尽管如此，系统中仍然没有用新密钥签名的头。
4.  更改用户后端的配置以使用新的私钥。从现在开始，系统中有用新私钥签名的头。其他微服务能够处理它们。
5.  系统仍然接受用旧密钥签名的头。等待一段安全时间，以确保所有旧标头都已过期。
6.  删除用户后端中旧密钥的配置。
步骤 2 到 6 可以每隔几个月重复一次，以使用新的密钥。
这个过程被称为**密钥旋转**，它被认为是一个很好的安全实践，因为它缩短了密钥有效时的寿命，减少了系统易受密钥泄露影响的时间窗口。为了简单起见，我们没有在我们的示例系统中实现它，但是这样做是一个推荐的练习。尝试更改示例代码来实现这个键旋转示例！
完整的系统功能可能涉及多个服务和团队。为了帮助协调系统的依赖关系，我们需要知道某个服务依赖关系何时被部署并准备就绪。我们将在[第 12 章](12.html)、*中讨论团队间的通信，但是我们可以通过使服务 API 明确描述部署了哪个版本的服务来以编程方式提供帮助，正如我们将在*处理服务依赖关系*一节中讨论的那样。*
如果刚刚部署的新版本出现问题，可以通过回滚快速恢复部署。
# 回滚微服务
回滚是将其中一个微服务快速回滚到以前版本的过程。
这个过程可以在刚发布的新版本出现灾难性错误时触发，所以可以很快解决。鉴于该版本目前已经兼容，这可以在很短的反应时间内放心地完成。通过 GitOps 原则，可以执行`revert`提交来恢复旧版本。
The `git revert` command allows you to create a commit that undoes another, applying the same changes in reverse.
This is a quick way to undo a particular change, and to allow later to *revert the revert* and reintroduce the changes. You can check the Git documentation for more details ([https://git-scm.com/docs/git-revert](https://git-scm.com/docs/git-revert)[).](https://git-scm.com/docs/git-revert)
考虑到继续前进的战略方法，回滚是一种临时措施，虽然已经到位，但将停止微服务中的新部署。应该尽快创建一个解决导致灾难性部署的 bug 的新版本，以便保持发布的正常流程。
随着部署越来越频繁，检查越来越到位，回滚将越来越不常见。
# 处理服务依赖关系
为了允许服务检查它们的依赖项是否有正确的版本，我们将让服务通过 RESTful 端点公开它们的版本。
我们将遵循 GitHub 中可用的思想后端中的示例，网址为:[https://GitHub . com/PacktPublishing/动手 Docker-for-micro service-with-Python/tree/master/chapter 11/micro service/ideas _ 后端](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter11/microservices/thoughts_backend)。
检查前端中的版本是否可用(https://github . com/PacktPublishing/手动-Docker-for-microservice-with-Python/tree/master/chapter 11/microservice/前端)。
这个过程的第一步是正确定义每个服务的版本。
# 服务版本化
为了清楚地了解我们软件的进展，我们需要命名要部署的不同版本。当我们使用`git`来跟踪变更时，系统中的每个提交都有一个单独的提交 ID，但是它不遵循任何特定的模式。
为了赋予它意义并对它们进行排序，我们需要开发一个版本模式。制作版本模式有多种方式，包括按发布日期(Ubuntu 使用这个)或按`major.minor.patch`。
在任何地方都有相同的版本控制方案有助于跨团队开发共同的语言和理解。这也有助于管理层理解这些变化——无论是从发布时间，还是从变化速度来看。与您的团队商定一个在您的组织中有意义的版本方案，并在所有服务中遵循它。
对于这个例子，我们将使用`vMajor.Minor`模式，用户后端的版本为`v2.3`。
软件版本控制中最常见的模式是语义版本控制。这种版本控制模式对于包和面向客户的 API 很有用，但是对于内部微服务 API 就没那么有用了。让我们看看它的特点是什么。
# 语义版本控制
语义版本化赋予每个不同版本号的变化以意义。这使得很容易理解版本之间的变化范围，以及在依赖系统上进行更新是否有风险。
语义版本化用三个数字定义每个版本:主要、次要和补丁，通常描述为`major.minor.patch` *。*
增加这些数字中的任何一个都有特定的含义，如下所示:
*   增加主要数字会产生向后不兼容的变化。
*   增加次要数量会增加新功能，但会保持向后兼容性。
*   增加补丁数量可以修复 bug，但不会增加任何新功能。
例如，Python 在这个模式下工作如下:
*   Python 3 包含了与 Python 2 的兼容性更改。
*   与 Python 3.6 相比，Python 3.6 版本引入了新功能。
*   与 Python 3.7.3 相比，Python 3.7.4 增加了安全性和错误修复。
这种版本控制方案在与外部合作伙伴交流时非常有用，对于大版本和标准包非常有用。但是对于微服务中的小的增量变化，它不是很有用。
正如我们在前面几章中所讨论的，要交付的持续集成的关键是进行非常小的更改。它们不应该破坏向后兼容性，但是随着时间的推移，旧的特性将会被删除。每个微服务都以受控的方式与其他服务协同工作。与外包装相比，没有必要有这么强的功能标签。服务的消费者是集群中受到严格控制的其他微服务。
Some projects are abandoning semantic versioning due to this change in operation. For example, the Linux kernel stopped using semantic versioning to produce new versions without any particular meaning ([http://lkml.iu.edu/hypermail/linux/kernel/1804.1/06654.html](http://lkml.iu.edu/hypermail/linux/kernel/1804.1/06654.html)), as changes from one version to the next are relatively small.
Python will also treat version 4.0 as *the version that goes after 3.9*, without major changes like Python 3 had ([http://www.curiousefficiency.org/posts/2014/08/python-4000.html](http://www.curiousefficiency.org/posts/2014/08/python-4000.html)).
这就是为什么在内部，语义版本化是*而不是*推荐的原因。保持一个类似的版本方案可能是有用的，但是不要强迫它进行兼容性更改，只是不断增加的数字，不要对何时更改次要或主要版本有具体的要求。
不过，从外部来看，版本号可能仍有营销意义。对于外部可访问的端点，使用语义版本控制可能会很有趣。
一旦决定了服务的版本，我们就可以在公开这些信息的端点上工作。
# 添加版本端点
要部署的版本可以从 Kubernetes 部署或 GitOps 配置中读取。但是有一个问题。有些配置可能会误导或不是唯一指向一个映像。例如，`latest`标签可能在不同的时间代表不同的容器，因为它被覆盖了。
此外，访问 Kubernetes 配置或 GitOps repo 也存在问题。对于开发人员来说，也许这种配置是可用的，但是它们不适合微服务(也不应该是)。
为了让集群中的其余微服务发现服务的版本，最好的方法是在 RESTful API 中显式创建一个版本端点。服务版本的发现是被授权的，因为它使用了它将在任何其他请求中使用的相同接口。让我们看看如何实现它。
# 获取版本
为了提供版本，我们首先需要将它记录到服务中。
正如我们之前讨论的，版本存储为一个 Git 标签。这将是我们在版本的佳能。我们还将添加提交的 Git SHA-1，以避免任何差异。
The SHA-1 is a unique ID that identifies each commit. It's produced by hashing the Git tree, so that it's able to capture any change—either the content or the tree history. We will use the full SHA-1 of 40 characters, even though sometimes it is abbreviated to eight or less.
提交 SHA-1 可以通过以下命令获得:
```
$ git log --format=format:%H -n 1
```
这将打印最后一个提交信息，并且只打印带有`%H`描述符的 SHA。
为了获得这个提交所引用的标签，我们将使用`git-describe`命令:
```
$ git describe --tags
```
基本上，`git-describe`找到与当前提交最接近的标签。如果这个提交由一个标记来标记，就像我们的部署应该做的那样，它会返回标记本身。如果不是，它会在标记后面加上关于提交的额外信息，直到它到达当前提交。以下代码显示了如何使用`git describe`，具体取决于提交的代码版本。注意与标签无关的代码如何返回最接近的标签和额外的数字:
```
$ # in master branch, 17 commits from the tag v2.3
$ git describe
v2.3-17-g2257f9c
$ # go to the tag
$ git checkout v2.3
$ git describe
v2.3
```
这总是返回一个版本，并允许我们一眼检查当前提交中的代码是否在`git`中标记。
Anything that gets deployed to an environment should be tagged. Local development is a different matter, as it consists of code that is not ready yet.
我们可以以编程方式存储这两个值，允许我们自动存储，并将它们包含在 Docker 映像中。
# 将版本存储在映像中
我们希望在映像中有可用的版本。因为映像是不可变的，所以在构建过程中这样做是目标。这里我们需要克服的限制是 Dockerfile 进程不允许我们在主机上执行命令，只能在容器内部执行。我们需要在构建时将这些值注入 Docker 映像。
A possible alternative is to install Git inside the container, copy the whole Git tree, and obtain the values. This is usually discouraged because installing Git and the full source tree adds a lot of space to the container, something that is worse. During the build process, we already have Git available, so we just need to be sure to inject it externally, which is easy to do with a build script.
传递该值最简单的方法是通过`ARG`参数。作为构建过程的一部分，我们将把它们转换成环境变量，这样它们将像配置的任何其他部分一样容易获得。让我们看看下面代码中的 Dockerfile:
```
# Prepare the version
ARG VERSION_SHA="BAD VERSION"
ARG VERSION_NAME="BAD VERSION"
ENV VERSION_SHA $VERSION_SHA
ENV VERSION_NAME $VERSION_NAME
```
我们接受一个`ARG`参数，然后通过`ENV`参数将其转换为环境变量。为了简单起见，两者有相同的名称。`ARG`参数对于拐角情况有默认值。
在我们使用`build.sh`脚本构建版本之后，这使得版本可用(在容器内部)，该脚本获取值并调用`docker-compose`以版本作为参数构建，使用以下步骤:
```
# Obtain the SHA and VERSION
VERSION_SHA=`git log --format=format:%H -n 1`
VERSION_NAME=`git describe --tags`
# Build using docker-compose with arguments
docker-compose build --build-arg VERSION_NAME=${VERSION_NAME} --build-arg VERSION_SHA=${VERSION_SHA}
# Tag the resulting image with the version
docker tag thoughts_server:latest throughs_server:${VERSION_NAME}
```