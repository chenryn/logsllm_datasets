就会立即为子网添加相应的直联路由。可以使用 route 命令查看路由表验证，如【示例 4-3】
所示。
【示例4-3】
[root@localhost ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
default 172.16.45.1 0.0.0.0 UG 100 0 0 eno16777736
172.16.45.0 0.0.0.0 255.255.255.0 U 100 0 0 eno16777736
在【示例 4-3】的命令输出中，第二条就是与 172.16.45.0 子网的直联路由，这是由接口
eno16777736的IP配置决定的。如果此接口的IP地址发生变化或有新的接口拥有了IP地址，
路由表中的直联路由也会发生变化，如【示例4-4】所示。
【示例4-4】
[root@localhost ~]# ifconfig eno16777736:1 192.168.1.100/24 up
[root@localhost ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
default 172.16.45.1 0.0.0.0 UG 100 0 0 eno16777736
172.16.45.0 0.0.0.0 255.255.255.0 U 100 0 0 eno16777736
192.168.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eno16777736
由以上示例可以看到当接口的IP地址发生改变后，路由表中的直联路由也发生了改变。
91
CentOS 7.5系统管理与运维实战
4.2.3 route 命令
在Linux系统中，查看、添加、删除路由的是route命令。其添加删除路由时的基本格式
如【示例4-5】所示。
【示例4-5】
route add|dell [-net|-host] ipaddress1 netmask netmask gw ipaddress2|dev
各项参数含义如下：
 add|del：表示添加或删除一个路由条目。
 -net|-host：路由条目的目的地是一个子网或一台主机。
 ipaddress1：目标子网的子网号或目标主机的IP地址。
 netmask：目标子网或主机的子网掩码，当目标为主机时，子网掩码长度应为32位。
 gw：用于指定下一跳地址或下一跳设备。通常将 Linux 作为一台路由器使用时才会使
用下一跳设备。
除以上列举的参数之外，还有一个用于显示路由表时使用的选项 n，此选项表示使用 IP
地址显示而不尝试使用域名。IP 地址转换为域名需要解析，因此使用选项 n 可以快速显示路
由表，如【示例4-6】所示。
【示例4-6】
[root@localhost ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
default 172.16.45.1 0.0.0.0 UG 100 0 0 eno16777736
172.16.45.0 0.0.0.0 255.255.255.0 U 100 0 0 eno16777736
【示例4-6】所示的命令输出了系统内核的路由表，路由表中的几个字段含义如下：
 Destination：目标网络号或目标主机IP地址，default表示这是一条默认路由。
 Gateway：网关地址即下一跳地址，其中0.0.0.0或“*”表示主机与该子网直接相联，
无须下一跳地址（直联路由）。
 Genmask：子网对应的子网掩码。
 Flags：路由标记。
 Metric：路由条目的代价值。Metric数值越高，代价越大，此值一般在有多条到目标网
络的路由时才起作用。
 Ref：路由条目被引用的次数。
 Use：路由条目被路由软件查找的次数。
 Iface：到达目标网络使用的本地接口。
在上面的字段中，Flags路由标记用于指示路由条目的状态，常见的状态标记及含义如下：
 U：当前路由处于活动状态（可用状态）。
92
第4章 路由管理
 H：路由条目的目标是主机而不是子网。
 G：指向默认网关的路由。
 R：恢复动态路由产生的路由。
 D：由后台程序动态产生的。
 M：此条目经过了后台程序修改。
 C：缓存的路由条目。
 !：拒绝路由。
route 命令还可以用于添加默认路由（通常称为默认网关），但更多的是用于添加静态路
由，使用方法如【示例4-7】所示。
【示例4-7】
#添加、删除默认路由
[root@localhost ~]# route add default gw 172.16.45.1
[root@localhost ~]# route del default gw 172.16.45.1
#添加、删除到网络的路由
#子网掩码采用不同的形式，因此以下两条语句的功能相同
[root@localhost ~]# route add -net 192.168.19.0/24 gw 172.16.45.100
[root@localhost ~]# route add -net 192.168.19.0 netmask 255.255.255.0 gw
172.16.45.100
[root@localhost ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
0.0.0.0 172.16.45.1 0.0.0.0 UG 100 0 0 eno16777736
172.16.45.0 0.0.0.0 255.255.255.0 U 0 0 0 eno16777736
192.168.19.0 172.16.45.100 255.255.255.0 UG 0 0 0 eno16777736
[root@localhost ~]# route del -net 192.168.19.0/24
#添加、删除到主机的路由
[root@localhost ~]# route add -host 192.168.100.80 gw 172.16.45.100
[root@localhost ~]# route -n
Kernel IP routing table
Destination Gateway Genmask Flags Metric Ref Use Iface
0.0.0.0 172.16.45.1 0.0.0.0 UG 100 0 0 eno16777736
172.16.45.0 0.0.0.0 255.255.255.0 U 100 0 0 eno16777736
192.168.100.80 172.16.45.100 255.255.255.255 UGH 0 0 0 eno16777736
[root@localhost ~]# route del -host 192.168.100.80
4.2.4 Linux 路由器配置实例
学习完之前的基础知识之后，可以利用Linux来制作一个路由器。本小节将简单介绍路由
器包括的功能及如何将Linux配置成一个实用的路由器。
一个实用的路由器最起码应该包括 DHCP、数据包转发、NAT 等，DHCP 用来为子网中
的计算机分配IP地址、网关、DNS等信息；数据包转发是路由器的核心功能，用来将数据包
93
CentOS 7.5系统管理与运维实战
准确地转发到相应的子网；NAT 功能用来做地址转换，即将子网发往外部网络的数据包地址
做转换。在Linux系统上配置路由器可以采取两个方案，其一是使用Linux自身的内核转发功
能、配置DHCP服务并使用防火墙的地址伪装做NAT功能；其二是使用其他路由软件，例如
著名的Zebra等。本小节将采用Linux内核的数据包转发功能作为示例讲解。
在本节的路由器配置中，采用的拓扑图如图 4.7 所示，路由器的一端连接子网
192.168.0.0/24。
图4.7 路由拓扑
在开始配置路由器之前，需要先为路由器和子网计算机上的网络连接正确配置 IP 地址，
确保路由器能正常访问外部网络。配置子网计算机时，默认网关应该为 192.168.0.1。配置完
IP地址后，接下来需要配置内核转发，让内核具有转发数据包的功能，如【示例4-8】所示。
【示例4-8】
#添加内核转发参数
[root@localhost ~]# cat /etc/sysctl.conf
……
net.ipv4.ip_forward = 1
#让内核参数生效
[root@localhost ~]# sysctl -p
net.ipv4.ip_forward = 1
这样 Linux 就具备了数据包转发功能，接下来需要让 Linux 防火墙具备 NAT 功能，这个
功能通常由防火墙iptables来完成，如【示例4-9】所示。
【示例4-9】
#禁用并停止firewalld
[root@localhost ~]# systemctl disable firewalld
[root@localhost ~]# systemctl stop firewalld
#安装iptables防火墙
[root@localhost ~]# yum install -y iptables-services
#启用并开启iptables
[root@localhost ~]# systemctl start iptables
[root@localhost ~]# systemctl enable iptables
#在eno16777736接口上开启地址伪装
[root@localhost ~]# iptables -t nat -I POSTROUTING -o eno16777736 -j MASQUERADE
接下来就可以在子网计算机上访问外部网络了，可以通过 ping 命令、curl 访问网址等方
94
第4章 路由管理
式验证。
由于本书的第3 章已介绍过DNS、DHCP 等知识，因此此处不再赘述，读者可自行参考
相关资料配置。
4.3
Linux 的策略路由
传统的路由是一个指向目标子网的“指路牌”，任何人来“问路”，路由都会明确指向目标。
传统路由这种“不问来人情况”的处理策略越来越不适合现代计算机网络，举例来说“行人与
汽车”走的“路”应该是不同的。这样策略路由就兴起了，策略路由是近些年来兴起的一个比
较新的路由概念。策略路由可以根据多种不同的策略决定数据包通过的路径。本节将简要介绍
Linux系统中的路由及策略路由的使用。
4.3.1 策略路由的概念
并不是所有环境都适合策略路由。策略路由与传统路由相比最大的不同是，策略路由通常
有不止一条到达目的网络的路径，例如在一个网络中有两个出口联通和电信等。因此策略路由
在企业的实施环境首要条件是网络有多个出口，例如一电信一联通，又如一出口速度较快、另
一出口速度相对更慢一些等。
策略路由按实现的方式大体可以分为三类，第一种是按目的地址进行路由，即根据目的地
不同选择不同的出口。由于这种按目的地址进行路由的方法特别适合做双线服务器，因此在国
内使用的较多。第二种是按源地址进行路由，即根据发出数据包的计算机地址决定选择哪个出
口，这种方法适用于多种环境，例如多线机房、客户定制的更快速的网络等。第三种是智能均
衡策略路由，这是一种出现时间较晚的方式，在这种方式下会自动识别网络带宽及负载，根据
带宽和负载动态地决定数据包从哪个出口发出。
无论使用何种策略路由，都必须注意保护连接的持续性，特别是在出口上使用了NAT的
网络中，即需要保证内部网络主机与外部通信时，数据包的往返都使用的是同一出口，否则可
能会造成资源浪费，甚至无法连接的情况出现。
4.3.2 路由表管理
在Linux系统中，策略路由可以通过路由表来实现，但Linux系统中的路由表并不像普通
路由器那样简单，本小节将介绍Linux系统中的路由表。
默认情况下，Linux并非只有一个路由表，因为如果系统中只有一个路由表，策略路由的
许多功能将无法实现。数据包转发时，并不需要将所有路由表都搜索计算一次，数据包应该使
用哪个路由表路由，取决于系统设定的规则。查看系统默认的规则，使用命令“ip rule list”
95
CentOS 7.5系统管理与运维实战
或“ip rule show”，如【示例4-10】所示。
【示例4-10】
[root@localhost ~]# ip rule list
0: from all lookup local
32766: from all lookup main
32767: from all lookup default
【示例4-10】展示的是没有经过修改的Linux系统规则列表，其中输出了3个路由表local、
main及default。每条规则前面的数字表示规则的优先级，数值越小，表明优先级越高，而“from
all”表明所有的数据包都需要经过路由表的匹配。
由此可以看出【示例4-10】所示的处理过程应该是，内核转发的数据包先使用表local转
发，如果没有匹配的路由条目再依次使用表main和default。为了搞清Linux系统数据包的转
发流程，有必要搞清这3张路由表的内容，如【示例4-11】所示。
【示例4-11】
[root@localhost ~]# ip route list table local
broadcast 127.0.0.0 dev lo proto kernel scope link src 127.0.0.1
local 127.0.0.0/8 dev lo proto kernel scope host src 127.0.0.1
local 127.0.0.1 dev lo proto kernel scope host src 127.0.0.1
broadcast 127.255.255.255 dev lo proto kernel scope link src 127.0.0.1
broadcast 172.16.45.0 dev eno16777736 proto kernel scope link src 172.16.45.13
local 172.16.45.13 dev eno16777736 proto kernel scope host src 172.16.45.13
broadcast 172.16.45.255 dev eno16777736 proto kernel scope link src