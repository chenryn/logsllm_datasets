as a standalone application and it was not integrated in the official
Monero Node application nor Monero Wallet application as a part
of Monero protocol.
The problem with the blackball tool is that the users need
to have a full copy of each blockchain branch, which then the
tool will compare and extract the information from the blockchain
branches. However, assuming one blockchain branch requires 50GB
of storage space, then three blockchain branches will require at
least 150GB of storage space, just to keep their anonymity level
intact. Clearly, the blackball cannot be run on light hardware
such as smartphones, where space and computing power is limited.
Hence it is unlikely that all users can run blackball tool to make
their transactions safe. Other than the aforementioned blackball
tool, there are features in the default/official CLI-based Monero
wallet which can be used to reduce the problem of key reuse.
• To let users to manually set the mixins/decoys themselves.
This feature is implemented in set_ring command [33].
• To only use mixins that exist before fork. This feature is
implemented in segregate-pre-fork-outputs command
[33].
• To combine mixins from before fork and after fork. This fea-
ture is implemented in key-reuse-mitigation2 command
[33].
Having identical mixins in transactions that are being published
in multiple blockchain systems will prevent the passive attacker
to trace the transactions, because the anonymity level is not com-
promised. However, there is no sufficient solution to help the users
conducting the best practice in maintaining the anonymity of their
transactions.
6.2 Our Proposed Solution
Our proposed solution consists of three parts, namely hard fork
management, key image management, and joint nodes.
6.2.1 Hard Fork Management. We propose to add Chain_ID infor-
mation in every transaction, which will be useful for several reasons.
Firstly, the Chain_ID will be used for replay attack prevention, a
feature that does not exist in Monero yet. Secondly, the Chain_ID
will be an identifier when the users want to get information about
outputs (when they want to create new transactions) or existing
key images (which will be further described in the solution).
To complement the Chain_ID, a Fork_Point information also
needs to be managed. Fork Point is the first block height of a new
chain that has a different block hash compared to its parent, which
is similar to Ethereum’s FORK_BLKNUM [4]. Unlike Chain_ID, the
Fork_Point does not need to be embedded to transaction data. The
reason for not embedding the Fork_Point in the block or in the
transaction is to save space from less useful information. For this
requirement, a new database called Chain_Info will be created.
The new database contains both Chain_ID (as the primary key) and
Fork_Point.
Chain_Info. New chains produced from hard forks will need
to be registered in the database in a First-Come-First-Serve ba-
sis. The Chain_ID can be used to query the Fork Point from the
newly created Chain_Info database. The Chain_Info database will
be stored in the node’s blockchain database file. This approach is dif-
ferent compared to Ethereum’s method which stores the Chain_ID
information on a Github page [4], while Monero stored the history
information of its own hard fork by hardcoding it to the source
code7. However, this approach will be infeasible when dealing with
external hard forks, where the occurrences might not be known to
the Monero developers and Monero community.
6.2.2 Key Image Management. We have identified several issues
that need be addressed in relation to managing key image informa-
tion, including:
(1) Multiple blockchain branches having different block interval.
(2) Multiple transactions submission having identical key im-
ages in a short period of times
(3) Updatability of the key image ring members (e.g. member
addition).
(4) New transactions with ring members that are not available
in the parent chain where the key images were first recorded.
(5) New chains that are designed to have a lower mandatory
ring size compared to the parent chain.
Scalable Bloom Filter. Scalable Bloom Filters [1] is proposed
to solve the identified issues. Scalable Bloom Filters (SBF) is an
extended version of the original Bloom Filter [3] where scaling is
enabled by utilising multiple Bloom Filters instead of a single filter
as in the standard Bloom Filter (BF). Therefore, the capacity in SBF
can be expanded after initialisation, contrary to BF which cannot
exceed the predefined capacity. Similar to BF, an SBF can produce
false positive results where the filter detects that a data is in a set
where it should not. However, SBF also inherits the characteristics
of BF where false negative is negligible. False negative is when the
7https://github.com/monero-project/monero/blob/master/src/cryptonote_core
/blockchain.cpp#L120
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand628On The Unforkability of Monero
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
BF returns False (that the data is not in the set) when it is supposed
to be True (the data is actually in the set).
In our proposed solution, several SBFs are introduced. The first
SBF is used to filter key images, namely SBFk. Key images from re-
lated blockchains (parents, siblings, or child chains) will be included
to compute SBFk. By constructing SBFk, new key images can be
identified whether they have existed in any blockchains, such that
when the checking algorithm result is true, then the protocol raises
a flag to avoid the problem of key reuse. The second SBF is used to
filter hash values of key image-mixin tuples, namely SBFm. Similar
to SBFk, SBFm is constructed by collecting key image-mixin tuples
from all related blockchains. The purpose of SBFm is to help the
system to identify whether an incoming key image-mixin tuple has
existed in one or more blockchains.
Despite its scalability feature, SBF does not support data deletion.
Therefore, to mitigate different block intervals and block reorganisa-
tion where immature blocks can still be replaced by other stronger
blocks, temporary SBFs are introduced. These temporary SBFs,
namely tSBFk and tSBFm, are associated to key images and key
image-mixin tuples respectively. By using temporary SBFs, it means
new information in immature blocks and memory pools will not
go directly to the main SBFs but to tSBFs. After the information
is confirmed in mature blocks, the data can be stored to the main
SBFs. SBFk and SBFm can complement each other by the following
mechanism.
(1) The system checks a key image value in SBFk. If it does not
exist, then checking process complete, otherwise continue.
In this step, it is not known whether the checking result is a
false positive result or a genuine result.
(2) We define t as the threshold to be satisfied by new transac-
tions.
(3) For each ring signature R with a ring size r, there will be r
key image-mixin tuples. The system checks every key image-
mixin tuple if they exist in SBFm and count the positive
results p. If p = r, then there is a possibility (due to SBF’s
false positive characteristic) that the input has the exact same
ring members as the existing input, and this is a desirable
occurrence. However, that might not always be the case. It is
possible that p  1, then t <= p <= r must be satisfied. Otherwise:
(a) If t = 0 then the transaction that contains the ring signa-
ture R can be accepted as it is a false positive caused by
SBFk.
(b) If t = 1 then the transaction that contains the ring signa-
ture R can be blacklisted as it can cause traceable output.
(4) To increase the probability of the new transactions using an
identical set of the existing ring members, the threshold t
can be set to t = r such that t = p = r.
Blacklisting can be used as an option instead of rejecting the
transaction, as described in the step 3b, because transaction rejec-
tion might motivate users to recreate the transaction which will
make the new transaction traceable [20].
False Positive. The false positive rate is the trade-off for not
using the real transaction data in our solution, where SBFs are used
for a cost-efficient solution. The error rate in the original design
of SBF is expected to be between 0.0001% to 0.1% [1]. The use of
two different SBFs, namely SBFk and SBFm is expected to greatly
reduce the false positive rate in the case of a new key image that
has never been spent, such that the false positive result indicates
otherwise.
We utilise a simple equation of probability of two independent
events P = p1 × p2 where p1 and p2 are the probabilities of the
first and the second event, respectively. By using the equation and
taking the largest error rate of SBF, the probability of a key image
that has never been spent to be detected as false positive in both
checks is 0.0001%.
SBF for Multiple Blockchain Branches. An SBF consists of
multiple Bloom Filters (BF) [1] where SBF = {BF1||BF2|| . . . },
where the symbol || is a concatenation operation. An SBF can also be
constructed by concatenating multiple SBFs such that SBFr esult =
{SBFa||SBFb|| . . . }. We denote Local SBFs (LSBFs) as a set of SBFs
which are created by using information from a single blockchain
branch. We also denote Global SBFs (GSBFs) as a set of SBFs which
are created by concatenating all Local SBFs. The GSBFs are used
to check the existence of a related information regardless in which
blockchain the information resides, while the LSBFs are used to
check information on a specific blockchain.
SBFChain. For accountability purposes of the created GSBFs, we
introduce SBFChain. SBFChain is a blockchain-like data structure
which maintains metadata about the GSBFs and tracks changes to
the GSBFs. Each entry in SBFChain is numbered. An entry en in
the SBFChain connects to the entry en−1 by adding the hash value
hen−1 = H(en−1) to the entry en. An entry is created on every period
of time, i.e. 4 minutes to show a gradual process of creating the
GSBFs. The structure of SBFChain is shown in Figure 6.
An entry en contains the following information:
• The hash value hen−1.
• The block number n.
• A timestamp tsn.
• The hash values of the most recent GSBFs.
– hGSBFk
– hGSBFm
• The metadata of all blockchain branches in which the infor-
= H(GSBFk).
= H(GSBFm).
mation is added to the most recent SBFs.
– Chain_ID.
– Block Height.
– Data Count.
By referring to the most recent entry e, one can determine which
information has been added to the recent GSBFs. The entry e will
also help reconstructing the GSBFs at any given time by referring
to information stored in the nearest entry e.
Joint Node. We coin the term joint node to describe a new
6.2.3
type of node, which stores and manages GSBFs and SBFChain. The
joint node will be operated under a collaboration between main-
tainers of multiple blockchain branches. The idea of the joint
node originally came from blackball databases, where the infor-
mation is collected from multiple parties [7]. At the same time, the
joint node also behaves similar to hardfork oracle [17], in which
information about multiple chain forks can still be managed in
one place. The joint node collects all related information from
different blockchain branches and constructs SBFs and SBFChain.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand629AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Wijaya et al.
Figure 6: The structure of SBFChain.
The SBFChain can be used to synchronise SBFs maintained by
different joint nodes. It is assumed that there exists a simple con-
sensus method among the joint nodes to add new entries in the
SBFChain, where every information update in the SBFChain is fol-
lowed by all joint nodes as the members of the system.
The joint node will not cause any scalability issue to the main
application of each blockchain, especially related to providing nec-
essary storage and computing power to process requests and re-
sponses. Joint nodes form a new Monero subsystem which is
separated from the main system consisting of normal nodes run-
ning Monero protocols. Although joint nodes and normal nodes
are in different systems, it is assumed that there exists a mechanism
such that the nodes are able to exchange information.
RPC can be used as a communication scheme between normal
nodes and joint nodes as well as between joint nodes and
the SPV wallets on the client side. P2P communication scheme is
necessary for the joint nodes to update new information from the
network of multiple blockchains. The relationship between joint
nodes, normal nodes, and SPV wallets is shown in Figure 7.
The users’ wallets can also actively seek advice from the joint
nodes regarding the raw transactions the wallet create such that the
problems of key reuse can be prevented on early stage. However,
the normal nodes can utilise the SBFs maintained by the joint
nodes to perform a simple checking algorithm before processing
the transaction.
Although the joint nodes store the GSBFs, they are not au-
thenticated to extend any blockchains nor modify the information
that has been stored inside the blockchains. All updates on the
blockchains and memory pools will be inserted into the respective
LSBFs and GSBFs. We use the term service subsystem to refer a
network of joint nodes.
7 DISCUSSION
In this section, security analysis and performance analysis of our
proposed solution are discussed.
7.1 Security Analysis
7.1.1 Active Attack. We assume there exist dishonest joint nodes
in the service subsystem where the majority of the node members
are behaving honestly by following the protocol correctly. When
the dishonest joint nodes receive requests from the a client (either
a wallet or a normal node) to verify whether key images or key
image-mixin tuples are in the current SBFs, the dishonest joint
nodes will produce incorrect responses. To mitigate the problem,
Figure 7: Joint nodes can assist SPV wallets as well as normal