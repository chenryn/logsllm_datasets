### Standalone Application and Integration

The blackball tool operates as a standalone application, not integrated into the official Monero Node or Monero Wallet applications, and is not part of the Monero protocol. A significant issue with the blackball tool is that users must maintain a full copy of each blockchain branch, which the tool then compares to extract information. Given that a single blockchain branch can require 50GB of storage, three branches would necessitate at least 150GB of storage to preserve anonymity. This requirement makes it impractical for users with limited hardware, such as smartphones, to run the blackball tool, thus compromising their transaction security.

### Features in the Official Monero Wallet

To mitigate key reuse, the official CLI-based Monero wallet includes several features:

- **Manual Mixin/Decoy Setting**: Users can set mixins/decoys manually using the `set_ring` command.
- **Pre-Fork Mixins Only**: The `segregate-pre-fork-outputs` command ensures that only mixins from before the fork are used.
- **Combined Mixins**: The `key-reuse-mitigation2` command allows the use of mixins from both before and after the fork.

These features help maintain transaction anonymity by ensuring that identical mixins are used across multiple blockchain systems, making it difficult for passive attackers to trace transactions. However, there is currently no comprehensive solution to ensure best practices for maintaining transaction anonymity.

### Proposed Solution

Our proposed solution consists of three main components: hard fork management, key image management, and joint nodes.

#### 6.2.1 Hard Fork Management

We propose adding `Chain_ID` information to every transaction, serving two primary purposes:

1. **Replay Attack Prevention**: `Chain_ID` will prevent replay attacks, a feature currently absent in Monero.
2. **Information Identifier**: `Chain_ID` will serve as an identifier for users seeking information about outputs or existing key images.

Additionally, `Fork_Point` information, which is the first block height of a new chain with a different block hash compared to its parent (similar to Ethereum’s `FORK_BLKNUM`), will be managed. Unlike `Chain_ID`, `Fork_Point` does not need to be embedded in transaction data to save space. A new database, `Chain_Info`, will store `Chain_ID` (as the primary key) and `Fork_Point`.

**Database Registration**:
- New chains from hard forks will be registered in `Chain_Info` on a first-come, first-served basis.
- `Chain_Info` will be stored in the node's blockchain database file, differing from Ethereum’s method of storing `Chain_ID` on a GitHub page and Monero’s hardcoded history in the source code.

#### 6.2.2 Key Image Management

Several issues need to be addressed in managing key image information:

1. **Different Block Intervals**: Multiple blockchain branches may have varying block intervals.
2. **Multiple Transactions with Identical Key Images**: Multiple transactions with the same key images submitted in a short period.
3. **Updatability of Key Image Ring Members**: Adding or updating ring members.
4. **New Transactions with Unavailable Ring Members**: Ring members not available in the parent chain.
5. **Lower Mandatory Ring Size**: New chains with a lower mandatory ring size compared to the parent chain.

**Scalable Bloom Filters (SBFs)**:
- SBFs are proposed to address these issues. SBFs are an extended version of Bloom Filters, allowing capacity expansion after initialization.
- **SBFk**: Filters key images from related blockchains.
- **SBFm**: Filters hash values of key image-mixin tuples.
- **Temporary SBFs (tSBFk and tSBFm)**: Handle immature blocks and memory pools, ensuring data is confirmed before being added to the main SBFs.

**Checking Mechanism**:
1. Check key image in `SBFk`. If it exists, proceed to the next step.
2. Define threshold `t` for new transactions.
3. For each ring signature `R` with ring size `r`, check key image-mixin tuples in `SBFm` and count positive results `p`.
   - If `p = r`, it might be a false positive, but acceptable.
   - If `t <= p <= r`, accept or blacklist the transaction based on `t` value.
4. Set `t = r` to increase the probability of using identical ring members.

**False Positive Rate**:
- The error rate in SBFs is expected to be between 0.0001% to 0.1%. Using two SBFs (`SBFk` and `SBFm`) reduces the false positive rate significantly.

**SBF for Multiple Blockchain Branches**:
- **Local SBFs (LSBFs)**: Created from a single blockchain branch.
- **Global SBFs (GSBFs)**: Concatenated from all LSBFs, used to check information across blockchains.

**SBFChain**:
- A blockchain-like data structure to maintain metadata about GSBFs and track changes.
- Each entry in `SBFChain` contains hash values, block numbers, timestamps, and metadata of blockchain branches.

#### 6.2.3 Joint Nodes

**Definition**:
- Joint nodes store and manage GSBFs and `SBFChain`, operated collaboratively by maintainers of multiple blockchain branches.
- Joint nodes collect information from different blockchain branches, construct SBFs and `SBFChain`.

**Communication**:
- RPC for communication between normal nodes, joint nodes, and SPV wallets.
- P2P communication for joint nodes to update information from the network of multiple blockchains.

**Security and Performance**:
- Joint nodes do not extend or modify blockchains; they only store and manage GSBFs.
- Security analysis and performance considerations are discussed in the following sections.

### Discussion

#### 7.1 Security Analysis

**Active Attack**:
- Dishonest joint nodes can produce incorrect responses. To mitigate this, a simple consensus method among joint nodes is assumed to add new entries in `SBFChain`.

**Performance Analysis**:
- The proposed solution aims to balance security and performance, ensuring that the system remains scalable and efficient while maintaining transaction anonymity.

This structured approach addresses the challenges of key reuse and hard fork management, providing a robust solution for maintaining transaction anonymity in Monero.