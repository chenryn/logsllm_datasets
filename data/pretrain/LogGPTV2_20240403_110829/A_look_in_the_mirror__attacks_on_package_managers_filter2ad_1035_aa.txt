# A Look in the Mirror: Attacks on Package Managers

**Authors:**
- Justin Cappos
- Justin Samuel
- Scott M. Baker
- John H. Hartman

**Department of Computer Science, University of Arizona**
Tucson, AZ 85721, U.S.A.
Emails: {justin, jsamuel, bakers, jhh}@cs.arizona.edu

## Abstract
This study examines the security of ten popular package managers, which employ various security mechanisms that offer different levels of usability and resilience to attacks. Despite these mechanisms, all package managers have vulnerabilities that can be exploited by man-in-the-middle or malicious mirror attacks. The security of package managers is also influenced by the distribution's security practices. Weaknesses are more easily exploited when distributions use third-party mirrors as official mirrors. We successfully obtained an official mirror on all five distributions we attempted using false credentials. Some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. By exploiting these vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The issues disclosed are now being addressed by many package manager maintainers.

**Categories and Subject Descriptors:**
- K.6.5 [Security and Protection]: Invasive software
- C.2.0 [Computer-Communication Networks]: Generalâ€”Security and protection
- K.4.1 [Social Issues]: Abuse and Crime Involving Computers

**General Terms:**
- Security

**Keywords:**
- Package Management, Mirrors, Replay Attack

## 1. Introduction
Package managers are widely used to distribute software (bundled into archives called packages) for modern operating systems [1, 2, 3, 21, 22, 25, 26, 28, 31, 32]. They provide a centralized, privileged mechanism for managing software on a computer system. Since packages are installed by the superuser (root), their security is crucial for the overall security of the computer.

This paper evaluates the security of the eight most popular [9, 19] package managers used on Linux: APT [1], APT-RPM [2], Pacman [3], Portage [21], Slaktool [25], urpmi [28], YaST [31], and YUM [32]. Additionally, it examines the popular package manager for BSD systems, ports [22], and a popular research community package manager, Stork [26]. These package managers use one of four different security models: no security, cryptographic signatures embedded within packages, signatures on detached package metadata, or signatures on the root metadata (a file containing secure hashes of the package metadata).

Our findings show that there is a clear hierarchy in the security provided by these different models. No signatures allow the most severe attacks, followed by having only package signatures, then signatures on detached package metadata, and finally, signatures on the root metadata, which provide the highest security. However, there are usability concerns with different signature mechanisms, particularly the ability to verify standalone packages (packages obtained from sources other than the main repository). Signatures on root metadata do not provide a convenient way to verify standalone packages, leading users to install such packages without security checks. In contrast, package managers that use signatures on detached package metadata or on packages can verify standalone packages.

Given the strengths and weaknesses of different security techniques, we recommend a layered approach combining two methods: signatures on the root metadata and either signatures on packages or package metadata. This technique provides the security and usability benefits of both types of signatures with an overhead of 2-5%. The layered approach has been implemented in the Stork package manager and is now used by thousands of clients worldwide.

While vulnerabilities in package managers exist, they are not always exploitable in real-world scenarios. We examine this by looking at the security of popular distributions. We find that it is easy for an attacker to control an official package mirror for a popular distribution (such as Ubuntu, Debian, Fedora, CentOS, and openSUSE) and launch attacks on clients. To mitigate this threat, many distributions use mechanisms to distribute requests to multiple mirrors or provide certain information from a trusted source. However, some of these mechanisms can actually decrease user security by making it easier to target attacks.

## 2. Background

### 2.1 Package Formats
Packages consist of an archive containing files and, in most cases, additional embedded package metadata. For a given package, the embedded package metadata includes information about dependencies, functionality, and other details about the package itself. The most popular package format, RPM [23], allows for one signature. Other popular formats do not have a standard field for signatures, although extensions exist to support them [8, 11].

### 2.2 Package Managers
Clients use a package manager to install packages on their system. The package manager gathers information about available packages from repositories and automatically downloads requested packages and any additional required packages to resolve dependencies. This process is called dependency resolution. For example, if a requested package `foo` depends on `libc` and `bar`, and `libc` is already installed, `libc` is a resolved dependency. If `bar` is not installed, it is an unresolved dependency, and the package manager must locate and install a package that provides `bar` before installing `foo`.

### 2.3 Repositories
A package repository is typically an HTTP or FTP server from which clients can obtain packages and package metadata. The package metadata is usually a copy of the embedded package metadata for all packages on the repository. Package managers download this metadata to know which packages are available and to perform dependency resolution. Most repositories store all package metadata in a small number of compressed files.

In addition to package metadata, almost all repositories have a root metadata file. The name and location of this file vary, but its contents are similar. The root metadata provides the location and secure hashes of the files containing the package metadata.

### 2.4 Mirrors
Distributions often have multiple servers from which users can download packages and metadata. There is usually a main repository whose contents are copied by separate mirrors. A mirror contains the same content as the main repository and is updated via rsync or a similar tool. Unlike the main repository, a mirror is not intended for direct package management by its administrators; changes are made on the main repository and propagated to the mirrors.

Mirrors can be public or private and may be endorsed by the distribution for public use, known as official mirrors. Official mirrors are public because the distribution endorses their use. Some distributions do not use official mirrors hosted by outside organizations, such as very small distributions or those requiring payment. However, official mirrors hosted by outside organizations are the primary mechanism for software distribution for most popular distributions [9, 19], essential for reducing cost and management overhead.

## 3. Threat Model
The threat model in this paper involves an attacker who can respond to requests made by a package manager. This can be a man-in-the-middle, an attacker who tricks a client into contacting the wrong server (e.g., through DNS cache poisoning), or an attacker who gains control of an official mirror. The threat model includes:

- The attacker can serve the client arbitrary files.
- The attacker does not know what package the client will request beforehand.
- The attacker does not have a key trusted to sign packages, package metadata, or root metadata.
- The attacker has access to outdated packages, metadata, and root metadata files.
- The attacker is aware of vulnerabilities in some outdated packages and can exploit them.
- The attacker does not know of vulnerabilities in the latest version of any package.
- If a package manager supports signatures, they are used.
- Expiration times in the root metadata are used, if supported, and current (un-expired) root metadata does not contain vulnerable versions of packages.

### 3.1 Attacks
Under this threat model, several attacks can be used on a client:

- **Arbitrary Package Attack:** The attacker provides a malicious package in place of the one the user wants to install.
- **Replay Attack:** The attacker replays older versions of correctly signed packages or metadata, causing clients to install outdated, vulnerable packages.
- **Freeze Attack:** Similar to a replay attack, the attacker freezes the client's view of the metadata to prevent them from seeing updates.
- **Extraneous Dependencies Attack:** The attacker rewrites the package metadata to include additional, unnecessary packages, potentially introducing vulnerabilities.
- **Endless Data Attack:** The attacker returns an endless stream of data, causing the package manager to fill up the client's disk or memory and crash the system.

## 4. Security of Package Managers
The security of a package manager varies based on how signatures are used to protect data. This section explores the security strengths and weaknesses of signatures on different data and implementation pitfalls observed in package managers, classifying the security of different signatures into a list ordered by increasing security.

### 4.1 Package Managers Without Security
Three popular package managers do not provide security: Pacman, ports, and Slaktool. These package managers do not sign packages, package metadata, or the root metadata file. As a result, any attacker controlling a mirror can trivially launch an arbitrary package attack by responding to client requests with malicious software.

- **Replay Attack:** An attacker replays older versions of correctly signed packages or metadata, causing clients to install outdated, vulnerable packages.