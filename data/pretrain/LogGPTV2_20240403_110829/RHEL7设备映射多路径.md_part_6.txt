|                      | teral} 参数的情况下创建了多路径设备，有关步骤 |
|                      | 请查看 [第 4.2 节 "配置文件黑名单"](#mpio_co  |
|                      | nfigfile.html#config_file_blacklist){.xref}。 |
|                      |   默认值为 `no`{.literal}。默认 `mul          |
|                      | tipath.conf`{.filename} 文件由 `mpathconf`{.c |
|                      | ommand} 命令生成，但从 Red Hat Enterprise Lin |
|                      | ux 7 开始才启用 `find_multipaths`{.literal}。 |
|                      |   --------------------------                  |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` reass              | 启用 device-mapper                            |
| ign_maps `{.literal} | 映射的创新                                    |
|                      | 分配。使用这个选项后，`multipathd`{.command}  |
|                      | 守护进程将重新映射现有 device-mapper          |
|                      | 映射，使其永远指                              |
|                      | 向多路径设备，而不是基础块设备。可能的值包括  |
|                      | `yes`{.literal} 和 `no`{.literal}。默认值为   |
|                      | `yes`{.literal}。                             |
+----------------------+-----------------------------------------------+
| ` v                  | 默认详情。数值越高则详细程度越高。有效等级在  |
| erbosity `{.literal} | 0 - 6 之间。默认值为 `2`{.literal}。          |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   默认值为 `round-robin 0`{.literal}。        |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------                                     |
| g_policy `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |   `                                           |
|                      | failover`{.literal}：每个优先组群有一个路径。 |
|                      |   `multib                                     |
|                      | us`{.literal}：所有有效路径在一个优先组群中。 |
|                      |   `group_by_serial`{                          |
|                      | .literal}：每个检测到的系列号有一个优先组群。 |
|                      |   `g                                          |
|                      | roup_by_prio`{.literal}：每个优先组群有一个路 |
|                      | 径优先值。优先权根据指定为 global、per-contr  |
|                      | oller 或者 per-multipath 选项的调用程序决定。 |
|                      |   `grou                                       |
|                      | p_by_node_name`{.literal}：每个目标节点名有一 |
|                      | 个优先组。目标节点名保存在 `/sys/class/fc_tra |
|                      | nsport/target*/node_name`{.filename} 文件中。 |
|                      |   默认值为 `failover`{.literal}。             |
|                      |   -------                                     |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.liter                               |
|                      | al}：根据 SCSI-3 ALUA 设置生成路径有限级。从  |
|                      | Red Hat Enterprise Linux 7.3 开始，如果在设备 |
|                      | 配置中指定 `prio "alua exclusive_pref_bit"`{. |
|                      | literal}，多路径将生成包含只使用 `pref`{.lite |
|                      | ral} 字节集的路径组，并为该组设定最高优先级。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   默认值为 `const`{.literal}。                |
|                      |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   ----                                        |
| features `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   多路径设                                    |
|                      | 备的默认额外功能，使用以下格式：\"*number_of  |
|                      | _features_plus_arguments* *feature1* \...\"。 |
|                      |   `features`{.literal} 可能的值包括：         |
|                      |   `queue_if_no_p                              |
|                      | ath`{.literal}，与将 `no_path_retry`{.literal |
|                      | } 设置为 `queue`{.literal} 相同。欲了解使用此 |
|                      | 功能可能出现的问题，请参阅〈[第 5.7 节 "有 qu |
|                      | eue_if_no_path 功能的问题"](#MPIO_admin-troub |
|                      | leshoot.html#queueifnopath_issues){.xref}〉。 |
|                      |   `reta                                       |
|                      | in_attached_hw_handler`{.literal}：若此参数值 |
|                      | 被设为 `yes`{.literal}，并且 SCSI 层已经为路  |
|                      | 径设备添加了硬件控制程序，multipath 将不会强  |
|                      | 制设备使用 `multipath.conf`{.filename} 文件指 |
|                      | 定的 `hardware_handler`{.literal}。若 SCSI 层 |
|                      | 没有添加硬件控制程序，multipath 仍然会使用已  |
|                      | 配置的硬件控制程序。默认值为 `no`{.literal}。 |
|                      |                                               |
|                      | `pg_init_retries n`{.literal}：路径组初始化重 |
|                      | 试，失败前最多重试 *n* 次，1 \<= *n* \<= 50。 |
|                      |   `pg_init                                    |
|                      | _delay_msecs n`{.literal}：在路径组初始化重试 |
|                      | 的间隔，等待 *n* 毫秒，0 \<= *n* \<= 60000。  |
|                      |   ----                                        |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path               |   -----------------------------------         |
| _checker `{.literal} | --------------------------------------------- |
|                      |   指                                          |
|                      | 定用于决定路径状态的默认方法，可能的值包括：  |
|                      |   `r                                          |
|                      | eadsector0`{.literal}：读取该设备的第一扇区。 |
|                      |   `tur`{.literal}：在                         |
|                      | 设备中执行 `TEST UNIT READY`{.command} 命令。 |
|                      |   `emc_clariion`{.literal}：查询 EM           |
|                      | C Clariion 具体 EVPD 页面 0xCO 以便决定路径。 |
|                      |   `hp_sw`{.literal}：为使用 Ac                |
|                      | tive/Standby 固件的 HP 存储阵列检查路径状态。 |
|                      |   `rdac`{.literal}：                          |
|                      | 检查 LSI/Engenio RDAC 储存控制器的路径状态。  |
|                      |   `direc                                      |
|                      | tio`{.literal}：使用直接 I/O 读取第一个扇区。 |
|                      |   默认值为 `directio`{.literal}。             |
|                      |   -----------------------------------         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   默认值为 `manual`{.literal}。               |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `uniform`{                                    |
|                      | .literal}，则所有路径都有相同的加权。默认值为 |
|                      | `uniform`{.literal}。                         |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   此属性的数字值指定了系                      |
|                      | 统在禁用队列前，应该尝试使用失败路径的次数。  |
|                      |   值为                                        |
|                      |  `fail`{.literal} 意味着立即失败，无需排队。  |
|                      |   值为 `qu                                    |
|                      | eue`{.literal} 意味着路径固定前不会停止排队。 |
|                      |   默认值为 0。                                |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。默认值为          |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` queue_withou       | 如果将其设为 `no`{.literal}，则               |
| t_daemon `{.literal} | `multipathd`{.command}                        |
|                      | 守护                                          |
|                      | 程序将会在其关闭时禁用所有设备队列。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果将其设为 `yes`{.literal}，那么            |
| last_del `{.literal} | `multipathd`{.command}                        |
|                      | 守护程序将会在                                |
|                      | 设备的最后一条路径被删除时禁用队列。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| `                    | 设定 multipath 可以打开的文件提示符以及       |
|  max_fds `{.literal} | `multipathd`{.literal} 守护进程的最大值。这与 |
|                      | `ulimit -n`{.command} 命令效果一致。从 Red    |
|                      | Hat Enterprise Linux 6.3 开始，默认值为       |
|                      | `max`{.literal}，该值将该系统限制到           |
|                      | `/proc/sys/fs/nr_open`{.filena                |
|                      | me}。对其较早的版本，如果没有设定这个值，则使 |
|                      | 用调用进程作为打开文件提示符的最大值，通常为  |
|                      | 1024。安全起见，如果该数值大于                |
|                      | 1024，应将其设定为路径最大值+32。             |
+----------------------+-----------------------------------------------+
| ` checker            | 路径检查器和排序器执行带显式超时的 SCSI       |
| _timeout `{.literal} | 命令的超时时间，以秒为单位。默认值为          |
|                      | `sys/block/sdx/device/timeout`{.filename}     |
|                      | 中指定的值。                                  |
+----------------------+-----------------------------------------------+
| ` fast_io_           | 在 FC                                         |
| fail_tmo `{.literal} | 远程                                          |
|                      | 端口发现问题后，无法在那个远程端口设备中执行  |
|                      | I/O 前 SCSI 层要等待的时间。默认值应小于      |
|                      | `dev_loss_tmo`{.literal} 值。将其设定为       |
|                      | `off`{.literal}                               |
|                      | 则会禁用超时。默认值由该操作系统决定。        |
+----------------------+-----------------------------------------------+
| ` dev_               | 在 FC                                         |
| loss_tmo `{.literal} | 远程端口发现问题后，到从该系统中删除它之前    |
|                      | SCSI                                          |
|                      | 层                                            |
|                      | 要等待的时间。将其设定为无限，则会将其设定为  |
|                      | 2147483647 秒，或者 68                        |
|                      | 年。默认值由该操作系统决定。                  |
+----------------------+-----------------------------------------------+
| ` hw_stri            |   -----------------------------------         |
| ng_match `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   `multipath.conf`{.filename} 文件 `devi      |
|                      | ces`{.literal} 部分中的每个设备配置都将会创建 |
|                      | 自己的设备配置，或是修改某个内置设备配置。如  |
|                      | 果 `hw_string_match`{.literal} 被设为 `yes`{  |
|                      | .literal}，那么如果某用户设备配置中的供应商、 |
|                      | 产品和修订字符串与内置设备配置中的字符串完全  |
|                      | 匹配，则该用户配置选项就会修改内置配置。否则  |
|                      | 该用户设备配置会被视为新配置。如果 `hw_string |
|                      | _match`{.literal} 被设为 `no`{.literal}，那么 |
|                      | 就会使用正则表达式匹配，而不使用字符串匹配。  |
|                      |   默认情况下会将 `hw_st                       |
|                      | ring_match`{.literal} 设定为 `no`{.literal}。 |
|                      |   -----------------------------------         |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` retain_attached_hw | 如果此参数被设为 `yes`{.literal}，并且 SCSI   |
| _handler `{.literal} | 层已经为路径设备附加了硬件处理程序，那么      |
|                      | multipath 将不会强制设备使用                  |
|                      | `multipath.conf`{.filename} 文件指定的        |
|                      | `hardware_handler`{.literal}。如果 SCSI       |
|                      | 层未附加硬件处理程序，multipath               |
|                      | 将会继续使用其配置的硬件处理程序。默认值为    |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` det                | 如果将此参数设定为 `yes`{.literal}，multipath |
| ect_prio `{.literal} | 将会首先检查该设备是否支持                    |
|                      | ALUA。如果支持，则自动为该设备分配            |
|                      | `alua`{.literal}                              |
|                      | 排序                                          |
|                      | 器；如果不支持，则按惯例确定排序器。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` uid_a              | 提供唯一路径标识符。默认值为                  |
| ttribute `{.literal} | `ID_SERIAL`{.literal}。                       |
+----------------------+-----------------------------------------------+
| ` fo                 | （从 Red Hat Enterprise Linux 7.1             |
| rce_sync `{.literal} | 开始）如果将其设定为"yes"，则会阻止           |
|                      | 路径检查程序在异步（async）模式下运行。这意味 |
|                      | 着每次只能运行一个检查程序。这对同时运行很多  |
|                      | `multipathd`{.command} 检查程序而造成明显 CPU |
|                      | 负担过重时会有帮助。默认值为 `no`{.literal}。 |
+----------------------+-----------------------------------------------+
| ` delay_watc         | （从 Red Hat Enterprise Linux Release 7.2     |
| h_checks `{.literal} | 开始）如果将其设定为大于 0                    |
|                      | 的值，`multipathd`{.command}                  |
|                      | 守护进程将监视最                              |
|                      | 近有效的路径，并执行指定数量的检查。如果在监  |
|                      | 视期间这些路径再次变为无法使用，则不会在这些  |
|                      | 路径下一次可用时就使用它们，直到连续检查使用  |
|                      | `delay_wait_checks`{.literal}                 |
|                      | 指定的次数后它们都可用为止。                  |
|                      | 这样可防止将那些可能                          |
|                      | 不太可靠的路径在上线后立即投入使用。默认值为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| `delay_wa            | （从 Red Hat Enterprise Linux 7.2             |
| it_checks`{.literal} | 开始）如果将其设定为大于 0                    |
|                      | 的值，则最近重新上线的设备在由                |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数内再次无法使用后，那么它        |
|                      | 下一次上线后就不会被标记并延迟，并在经过使用  |
|                      | `delay_watch_checks`{.literal}                |
|                      | 指定的检查次数后方可使用。默认值为            |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| `ignore_new_         | （从 Red Hat Enterprise Linux 7.2             |
| boot_devs`{.literal} | 开始）如果设定为                              |
|                      | `yes`{.literal}，在引导初期该节点仍处于       |
|                      | `initramfs`{.literal} 文件系统中时，multipath |
|                      | 不会创建任何 WWID 属于                        |
|                      | `/etc/multipath/wwids`{.filename} 的          |
|                      | `initramfs copy`{.literal} 中的设备。当       |
|                      | multipath 另外尝试在手册出现时未使用          |
|                      | `udev`{.literal}                              |
|                      | 规则声明的设备中进行设置时，这个功            |
|                      | 能可用于在安装过程中引导。可将这个参数设定为  |
|                      | `yes`{.literal} 或者                          |
|                      | `no`{.literal}。如果未设置，则默认将其设定为  |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| `retrigg             | （从 Red Hat Enterprise Linux 7.2 开始）如果  |
| er_tries`{.literal}, | `udev`{.literal}                              |
| `retrig              | 无法完                                        |
| ger_delay`{.literal} | 成原始命令让多路径无法使用该设备，则联合使用  |
|                      | `retrigger_tries`{.literal} 和                |
|                      | `retrigger_delay`{.literal} 参数，以便        |
|                      | `multipathd`{.command} 命令可以重新激发       |
|                      | uevent。`retrigger_tries`{.literal}           |
|                      | 参                                            |
|                      | 数为没有完全设置的设备设定多路径尝试重新触发  |
|                      | `uevent`{.literal}                            |
|                      | 的次数。`retrigger_delay`{.literal}           |
|                      | 参数设定两                                    |
|                      | 次重试之间的秒数。这两个选项均接受大于或等于  |
|                      | 0 的数字。将 `retrigger_delay`{.literal}      |
|                      | 设定为 0 就是禁用重试。将                     |
|                      | `retrigger_delay`{.literal} 参数设定为 0      |
|                      | 可导致在路径检查器的下一次检查中重新启动      |
|                      | `uevent`{.literal}。如果没有设定              |
|                      | `retrigger_tries`{.literal}                   |
|                      | 参数，则会使用默认值 3。如果没有设定          |
|                      | `retrigger_delay`{.literal}                   |
|                      | 参数，则会使用默认值 10。                     |
+----------------------+-----------------------------------------------+