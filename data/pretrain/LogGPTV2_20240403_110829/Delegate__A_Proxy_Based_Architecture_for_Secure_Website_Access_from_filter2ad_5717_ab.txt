can purchase a valid certiﬁcate from a trusted certiﬁcate au-
thority. If buying a certiﬁcate is not an option, then the user
should carefully review and accept the certiﬁcate presented
by the proxy.
Authentication To access a website through an untrusted
computer, the user must ﬁrst authenticate to the trusted
proxy computer using a one-time password or PIN. Follow-
ing an initial request, the proxy sends the domain name of
the request along with this one-time PIN. The proxy also re-
turns a login page to the untrusted machine where the user
can enter the PIN. Alternatively, the user can send a conﬁr-
mation back to the proxy via the cell phone. This requires
an installation of our specialized software. Once the user
is authenticated, the proxy is ready to accept requests from
the remote untrusted computer to the website designated in
the login process. The proxy opens a session with the web
server and acts as the middleman, directing trafﬁc between
the untrusted public machine and the web server.
In order to reduce the attack surface, the authentication
is for a speciﬁc domain. The proxy disregards any request
that does not pertain to the website for which the proxy has
opened a session. In some cases, a website can maintain
images/multimedia objects in a different domain where the
HTML ﬁles are hosted. Since the HTML ﬁles are funneled
through the proxy before being sent to the untrusted ma-
chine, the proxy keeps track of all the URLs of the im-
ages/multimedia objects and allows the requests made to
these objects. Any other request outside of this list and out-
side of the domain to which the user authenticated, is sim-
ply discarded. However, an adversary can send requests to
the proxy pertaining to the website for which the proxy has
opened a session. The proxy has to decide for every web
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:31 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006request forwarded, whether the request originated from the
user or from the adversary. To do this, the proxy compares
the requests against the set of rules provided by the user to
determine when to contact the user for validation of a re-
quest.
Using our specialized software,
the cell phone and
the proxy cryptographically protect their communications.
However, in many cases, the user may be willing to tolerate
the risk that cell phone trafﬁc is sent in the clear.
Secret Filling Essentially, there are two types of requests
that are primarily used during web browsing, the HTTP
GET and the HTTP POST. In general, GET requests are
used to pull information from the web server and POST re-
quests are used to send data to the web server. Secret ﬁlling
by the proxy should therefore only required for POST mes-
sages. The following is an example of a POST message:
POST www.somehost.com/login.asp HTTP/1.0
User-Agent: HTTPTool/1.0
Content-Length: 32
Username=&password=
This POST message is generated when the user navigates
to the login page of somehost.com and clicks the submit
button without ﬁlling in the username and password infor-
mation. When the proxy receives this request, the parser
strips out the data string (the last line of this post message)
and URL information, and passes it to the secret ﬁller mod-
ule. The data string contains a set of key=value pairs. A
key is the metadata that is attached to every input element
(textboxes, radio boxes, etc.) in an HTML form. In this
example username and password are the two keys. The se-
cret ﬁller now fetches the required secrets from the local
database using the URL information and the keys and ﬁlls
in the secrets by modifying the data string. The secret ﬁller
module only ﬁlls in secrets that have been left blank by the
user and leaves all other requests unmodiﬁed.
Validating HTTP requests The proxy must determine if
a request it receives is legitimate, i.e., it is issued by the
user and not malware on an untrusted machine. One way
for the proxy to determine the legitimacy of a request is to
obtain user validation via the cell phone. The method can
be used to ask the user to validate each and every request
the proxy receives. This solution does not scale and places
an unbearable burden on the user.
Alternatively, the proxy can only require user validation
for requests that are potentially “damaging”, i.e., the re-
quest involves a monetary transaction. Determining such
kinds of requests is a non-trivial task and Delegate requires
the help of the user in this regard. The user supplies the
proxy with a set of rules. Using these rules, a Rule engine
determines if contact with the user is necessary. These rules
try to capture the validation policy of the user. In Section 4,
we will show how these rules are captured and evaluated.
Removing sensitive information All responses from a
web server are ﬁltered by the proxy to remove any sensi-
tive information before it they are forwarded to an untrusted
computer. This is necessary because the response from a
web server may contain sensitive information (e.g., credit
card numbers, address, phone numbers) that would other-
wise be exposed to the untrusted machine. Although many
websites already obfuscate some of the sensitive informa-
tion they display, e.g., only listing the last four digits of a
credit card number, the proxy provides this functionality to
all the web sites a user may visit.
The identiﬁcation of what constitutes sensitive informa-
tion in a certain context is a delicate task. We have iden-
tiﬁed several approaches that have thus far been effective.
The simplest approach is to replace any secret that appears
in the HTML response from the web server with “******”.
Although this method is useful, it does not deal with situa-
tions where the sensitive information cannot be predeﬁned.
For instance, when a user accesses an email which contains
a new password (the attacker can force such an email) then
the previous heuristic will not sufﬁce. For these kind of
situations, Delegate looks for sub-sentence patterns such as
(Password: (cid:0)any word(cid:1)) and hides them. Although both
these approaches are useful, more work is needed to fully
address this problem.
4 Session Hijacking
Delegate limits the potential malware has to hijack a
user’s session by fabricating or modifying dangerous re-
quests to a web server. First, the user conﬁgures the browser
on the untrusted machine to forward all web requests to the
proxy. The user can rely on the proxy to authenticate to a
web server and ﬁll in all sensitive data. Delegate trusts the
user to protect sensitive information and avoid entering it at
the untrusted machine.
To prevent session hijacking, a simple solution is for the
proxy to forward all requests to the user for validation. This
solution has some severe drawbacks: 1) HTTP requests are
not semantically rich enough for users to understand the
purpose of the request; and 2) A typical web session can
generate hundreds of web requests, placing a tremendous
burden on the user. These factors make it probable that users
will reject such a system as unusable or impatiently approve
each request without evaluating it thoroughly. A successful
solution must strike an effective balance between security
and usability.
A signiﬁcant number of web requests do not require user
validation. For instance, requests to retrieve the images em-
bedded in a web page that the user authorizes the proxy to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:31 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006retrieve should not require further validation. The user is
primarily concerned with dangerous requests that malware
can exploit to cause harm to the user, e.g., an unauthorized
request to transfer money from the user’s account. Identify-
ing dangerous requests is the key to addressing the session
hijacking problem. Once a dangerous requests is identiﬁed,
the user can be contacted for validation.
Determining the danger of a web request is non-trivial
and subjective. Different users have different perceptions
about what is considered dangerous. For instance, some
users may feel that accessing their purchase history from
Amazon.com should be classiﬁed as a dangerous operation,
while others may not. Users have different levels of para-
noia. Since users have their own view on what constitutes
a dangerous request, a single strategy for determining dan-
gerous requests for all users is undesirable. It would result
in false positives and false negatives depending on the indi-
vidual preferences of each user. For the system to be usable,
it must be tailored to meet individual preferences for what
constitutes a dangerous request.
In Delegate, users dictate rules to the proxy that identify
dangerous requests. A rule speciﬁes a set, or category, of
requests and the appropriate action to take when it is en-
countered. Rules are an effective way to capture the user’s
intent in identifying dangerous requests. The set of rules
constitutes the user’s policy. Users specify a policy for ev-
ery website they wish to access from an untrused machine.
Once a dangerous request is identiﬁed, a text message that
explains the semantics/purpose of the request needs to be
sent to the user for validation. This task is difﬁcult to handle
automatically since HTTP request messages are not seman-
tically rich. Delegate enlists the user’s assistance to specify
the contents of a validation message.
The remainder of this section discusses Delegate’s model
for classifying dangerous requests, capturing a user’s policy,
and rule generation.
(cid:15)(cid:1)(cid:2) (cid:16) (cid:13)(cid:6)(cid:17)(cid:18)(cid:13)(cid:6) (cid:20) (cid:3)(cid:13)(cid:7)(cid:4)	 (cid:22)(cid:4)	(cid:4)
An analysis of popular websites in the areas of banking,
travel, email, and retail revealed two kinds of dangerous re-
quests are prevalent during the course of an online session.
Deﬁnition 1 - State Change Request (SCR): A request
that alters the state of the web server permanently. Forward-
ing such requests to a web server without user validation
has the potential for damage. For example, a request that
transfers money from the user’s account. A distinguishing
characteristic of such requests is that they usually carry data
supplied by the user in addition to the URL information.
Deﬁnition 2 - Private Information Request (PIR): A
request that retrieves a user’s private information from the
web server. If the data is returned to the untrusted machine,
it is potentially exposed to malware. In some cases, the in-
formation should be ﬁltered out of the web page or returned
to the user via the cell phone. In other cases, the user may
allow it to be sent to the untrusted machine, but only when
the user explicitly authorizes it. Unlike an SCR request, a
PIR request does not have any noteworthy distinguishing
characteristics to easily identify it.
Delegate assumes requests outside these two deﬁnitions
are not dangerous.
(cid:15)(cid:1)(cid:0) (cid:16)(cid:13)	(cid:6)(cid:7) (cid:13)  (cid:6)(cid:18)(cid:26)
Policies in Delegate have a request level granularity. Al-
though higher level policies may reduce the complexity of
policy creation, they lose the ﬂexibility to reduce the vali-
dation requirements. For example, assume a user speciﬁes
a policy that requests validation of PIR requests to a par-
ticular website. This may be overkill if the user is com-
fortable permitting some PIR requests without validation.
Seeking validation from the user is a costly operation and
hence should be avoided whenever possible if the security
risk is acceptable. Hence, the policy language operates at
the lowest granularity possible, at the request level.
Since validation is done at the request level, one might
assume that it makes sense to group requests and validate
them at the group level. However, this cannot be achieved
since 1) A single request forwarded to the web server can
do extensive damage; and 2) Most requests cannot be easily
undone once they are completed.
The following is a formal deﬁnition for an HTTP request
in Delegate policies:
Deﬁnition 3 - HTTP request object: An HTTP request
(cid:2) is modeled as a set of (cid:0)attribute, value(cid:1) pairs, denoted
as (cid:2)(cid:0)(cid:1) . Each set contains at least two (cid:0)attribute, value(cid:1)
pairs (i.e., (cid:2)(cid:2)(cid:0)(cid:1) (cid:2) (cid:3) (cid:0)). The URL pair stores the URL infor-
mation, e.g., (cid:0)URL,“http://www.americanexpress.com”(cid:1).
The Type pair stores the request type, e.g., (cid:0)Type,“GET”(cid:1).
The other pairs in the set are dependent on the contents
of the HTTP request and are application dependent. These
pairs can be obtained from three different sources 1) the
query string that is attached to the URL and follows the
“?” sign, 2) the data string that is attached to every POST
request, and 3) the cookie string that is attached to HTTP
requests. These (cid:0)attribute, value(cid:1) pairs can be classiﬁed
in two ways: 1) as constant valued pairs, or 2) as ran-
dom valued pairs. Constant valued pairs are identical across
all sessions, while the random values vary. The values of
the constant valued attributes have some special meaning to
the web server; they dictate the actions of the web server
in response to the request. Random valued attributes pro-
vide session speciﬁc information such as session ids, ses-
sion keys, etc.
The classiﬁcation of (cid:0)attribute,value(cid:1) pairs as constant
or random is based on a fundamental assumption regard-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:32:31 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006HTTP REQUEST:
GET /myca/onlinepayment/us/action?request type=authreg CardPayments
Accept: image/gif, image/x-xbitmap,
Referer: https://www99.americanexpress.com/myca/
Connection: Keep-Alive
User-Agent: Mozilla/4.0
Host: www99.americanexpress.com
Cookie: Manage=cards; s session id=1231122950204954-05-05
HTTP REQUEST object:
(cid:2)URL,/myca/onlinepayment/us/action(cid:3) , Constant
(cid:2)Type, GET(cid:3), Constant
(cid:2)request type, authreg CardPayments (cid:3), Constant
(cid:2)Mange, cards(cid:3), Constant
(cid:2)s session id,1231122950204954-05-05(cid:3), Random
Figure 2. An example HTTP request and its correspond-
ing HTTP request object
HTTP REQUEST:
GET /myca/onlinepayment/us/action?
request type=authreg acctAccountSummary
Accept: image/gif, image/x-xbitmap,
Referer: https://www99.americanexpress.com/myca/