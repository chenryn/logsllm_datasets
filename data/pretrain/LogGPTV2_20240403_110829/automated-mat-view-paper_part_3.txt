are available materialized views, while V1 and V4 are not
candidatematerializedviewforagivenqueryisamaterial-
available. If {customers,orders,suppliers} is a interesting
ized view that satisfies both of the following constraints:
table-subset, the following materialized view is available.
Requirement 1: MV view definition contains at least two
SELECT c.c_name, o.o_totalprice, l.l_shipdate
tables from the current query
FROM customers c, lineitem l, orders o
WHERE o.o_custkey = c.c_custkey
Requirement 2: Any constraints of MV are supersets to
and o.o_orderkey = l.l_orderkey
any constraints of the current query
GROUP BY o.o_totalprice;
These two requirements for eligible candidate materialized
4.3 Generating More Common Materialized
views guarantee that the query will have the same results
Views
regardless of whether it is the original query or the query
Althoughwehaven’timplementedthispartinourproject, rewritten with a materialized view. For example, given the
itisgoodtodiscusstheexistingideaanddesign. Inthisstep, TPC-HdatabasedescribedinSection3.1thefollowingquery
theinputisallthematerializedviewsgeneratedbefore. We isusedtogetthename,date,amountoforderandshipdate
require some candidate materialized views that are useful for all orders over 1000:
fortheworkload. Itisanimprovementonourexistingwork
with the goal to make the materialized views more general. query: select c.c_name, o.o_orderdate,
Microsoftusesthe“Merge”algorithm;IBMDB2implements o.o_totalprice, l.l_shipdate
MQO technique to generate small common queries; Oracle from customer c, lineitem l, orders o
findsthehigh-loadqueriesfromADDMandUSERdefined. where o.o_custkey = c.c_custkey
InPostgreSQL,webelievethe“Merge”algorithmisthebest and o.o_orderkey = l.l_orderkey
choice. Microsoft describes the detail of“merge”algorithm and o.o_totalprice > 1000;
in [7] and another“merge”algorithm proposed in [11].
The first step is to determine whether a candidate materi-
alized view definition is eligible for use in a query. In this
5. CANDIDATESELECTION
case, we are only concerned about the query defined above
After a list of candidate materialized views has been se- which extracts data from customers, lineitem and the or-
lected, cand matviews, each materialized view needs to be derstablesafterjoiningthetablesoncustkey andorderkey.
evaluatedwithrespecttoperformanceimprovementinrela- This statement, query, has the constraint that the value of
tion to the sample query workload Q. This involves rewrit- o totalprice must exceed 1000. In this case eligible candi-
ingeachofthesamplequeriesinQ touseeligiblecandidate date materialized views are materialized views which have
materializedviews. Aftertherewriteiscomplete,thencan- atleasttwoofthetablesandtheirconstraintsareasuperset
didatematerializedviewsareselectedthatarebotheligible of the constraints of query.
for the workload and improve on the performance time of Let the candidate materialized views of cand mvs be de-
one of the original queries. fined as follows:
5.1 QueryRewrite CMV1 select * from customers c, orders o
where o.o_custkey = c.c_custkey;
Queryrewritinginvolvesrewritingeachqueryofthequery
workload Q using each of the candidate materialized views Eligible: CMV1’smaterializedviewdefinitionisajoin
in cand mvs to determine if they are eligible. An eligible on customers and orders on their custkey value. This
satisfies Requirement 1 for eligible candidate materi- Not Eligible: CMV4’s materialized view definition is
alized views as it contains at least two of the tables a join on customers and orders on their custkey value
from the original query. It also satisfies Requirement along with a constraint that the o totalprice of the
2ofeligiblecandidatematerializedviewsbyjoiningon orders table must be greater than 2000. This satis-
thesameattributesasquery andnotaddinganymore fies Requirement 1 for eligible candidate materialized
restrictive constraints. viewsasitcontainsatleasttwoofthetablesfromthe
original query. However, it does not satisfy Require-
Query Rewrite:
ment2asitplacesamorerestrictiveconstraintonthe
value of o.o totalprice to be greater than 2000 which
select mv.c_name, mv.o_orderdate,
would mean that we would potentially lose values be-
mv.o_totalprice, l.l_shipdate
tween 1000 and 2000 if the query were rewritten in
from lineitem l, MV1 mv
where mv.o_orderkey = l.l_orderkey CMV5 select * from customers c
and mv.o_totalprice > 1000; where c.c_name = ’Bob Smith’;
Not Eligible: CMV5’s materialized view definition
CMV2 select * from customers c, orders o
only looks at the customers table with the constraint
where o.o_custkey = c.c_custkey
thatthenameequals“BobSmith”. ThisfailsRequire-
and o.o_totalprice > 500;
ment 1 in that it only has less than two tables from
Eligible: CMV2’s materialized view definition is a query and it also fails Requirement 2 in that it adds
join on customers and orders on their custkey value more constraints than query has. Substitution with
along with a constraint that the o totalprice of the thismaterializedviewcouldgivedifferentresultsthan
orders table must be greater than 500. This satis- execution of the original query.
fies Requirement 1 for eligible candidate materialized
In this manner, keep track of each candidate material-
viewsasitcontainsatleasttwoofthetablesfromthe
izedviewincand matviews thatiseligibleforthequeriesin
original query. It also satisfies Requirement 2 of eli-
Q. Only the eligible candidate materialized views and their
gible candidate materialized views by joining on the
rewrites will be evaluated during the rewrite phase of the
sameattributesasquery andaddingaconstraintthat
candidate view selection.
o.o totalprice be greater than 500 which is a super-
setofquery’sconstraintthato.o totalprice begreater 5.2 Selection
than 1000 (i.e. o.o totalprice > 500 is a superset of
For a given query in Q, the goal is to determine whether
tuples returned by o.o totalprice > 1000).
the original query can be sped up by substituting a mate-
Query Rewrite: rialized view into the original query. This process involves
calculatingthecostoftheoriginalqueryandcomparingthis
select mv.c_name, mv.o_orderdate, cost to the cost of each of the eligible candidate material-
mv.o_totalprice, l.l_shipdate ized view rewrites described in Section 5.1. Our approach
from lineitem l, MV2 mv operates under no disk space constraint, but we propose a
where mv.o_orderkey = l.l_orderkey knapsack approach for dealing with disk space limits.
and mv.o_totalprice > 1000; Incalculatingthecostorruntimeofaquery,PostgreSQL
hastwomethodswhichareprepending‘EXPLAIN’or‘EX-
CMV3 select * from customers c, orders o PLAINANALYZE’toaquery[2]. Prepending‘EXPLAIN’
where o.o_custkey = c.c_custkey to a query outputs the expected query plan and the ex-
and o.o_totalprice > 1000; pectedcostofexecution. ‘EXPLAIN’doesnotactuallyrun
thequerysothesecostestimatesmaybeinaccurateasitre-
Eligible: CMV3’smaterializedviewdefinitionisajoin
lies on statistical information of the database. Prepending
on customers and orders on their custkey value along
‘EXPLAIN ANALYZE’ to a query actually runs the state-
with a constraint that the o totalprice of the orders
ment and outputs the expected cost of execution, the ac-
table must be greater than 1000. This satisfies Re-
tual cost of execution and the actual query plan that was
quirement 1 for eligible candidate materialized views
used. Since ‘EXPLAIN ANALYZE’ runs the query it can
as it contains at least two of the tables from the orig-
take much longer to execute and the actual costs may be
inal query. It also satisfies Requirement 2 of eligible
influenced by query caching.Due to the speed of EXPLAIN
candidate materialized views by joining on the same
and the requirement that we only need estimates, we used
attributes as query and adding the same constraint
‘EXPLAIN’forcandidatematerializedviewgeneration. For
that o.o totalprice be greater than 1000.
candidatematerializeviewselection,weneededactualcosts
Query Rewrite: notbasedonstatisticalanalysistorewriteourqueriessowe
used ‘EXPLAIN ANALYZE’. Query caching may result in
select mv.c_name, mv.o_orderdate, longer initial query costs, but reduced costs in subsequent
mv.o_totalprice, l.l_shipdate executions. To avoid the potential varying times and under
from lineitem l, MV3 mv the assumption that the sample workload is executed often
where mv.o_orderkey = l.l_orderkey we chose to keep the cache warm by executing the query
two times before evaluating its cost then we average three
CMV4 select * from customers c, orders o subsequent runs to get a cost.
where o.o_custkey = c.c_custkey With the assumption that we are optimizing for query
and o.o_totalprice > 2000; run time with no restriction on disk space, we estimate the
costforeachoftheoriginalqueriesandtheireligiblecandi- T ER IR  50%
date materialized views using the method described above. 10% 8 5 2 0 2 1
The query with the lowest cost is used whether it be the 2% 10 8 2 3 2 1
original query or a query rewrite with a materialized view.
If the query with the lowest cost is a query rewrite with Table 1: Query improvements for 10% and 2% thresholds
a materialized view, then this materialized view is marked where T stands for threshold, ER for eligible query rewrite
as being used and the difference in cost between the origi- and IR for improved query rewrites
nal query’s execution and its own is recorded. This process
continues until all queries in the workload have completed.
After all queries have been processed, the candidate mate- We evaluated the algorithm proposed in this paper us-
rializedviewsthatwereusedtoimprovetheperformanceof ing the data described in Section 3.1, generated interesting
at least one query are stored and the remaining candidate tables subset:
materializedviewsareremoved. Thisprocesseliminatesany Threshold 10%:
candidate materialized views that do not benefit the query
orders,lineitem,customer
workload as a whole while keeping all materialized views
that lower the cost of the query workload.
partsupp,part
Moreoftenthannot,adatabasewillhavearestrictionon
the amount of disk space that can be used by the addition
orders,lineitem
of materialized views. Under a disk space constraint, the
ideal solutionwill maximize the total benefit (i.e. minimize Threshold 2%:
total cost of query workload) by adding materialized views
inrelationtotheamountofspacethattheyrequireondisk. orders,lineitem,customer,nation
In this case, let reduction be a two dimensional array of
partsupp,supplier
size |Q| ∗ |eligible MV| where the first index references a
queryinQandthesecondindexreferencesaneligiblemate-
orders,lineitem
rialized view. For example, reduction[i][j]= is the reduced
cost of query i by rewriting it using eligible materialized
partsupp,part
view j. If there is no reduction in cost by rewriting query
i with eligible materialized view j, then assign a value of 0 orders,customer
to reduction[i][j]. Let disk(mv j) be the amount of space
that materialized view j takes up on disk. With these two orders,lineitem,customer
definitions, an estimate on the value of a materialized view
can be computed as: region,orders,lineitem,customer,nation
partsupp,nation,supplier
|Q| reduction[n][j]
value of mv j = Pn=1
disk(mv j) and then generated candidate materialized views for
threshold values of 10% and 2% of the overall query work-
Thisdefinitionaccountsforthereductionincostinterms load. As stated in Section 5.2, candidate materialized view
the amount of disk space that is required to store the ma- generation used query plan estimates while materialized