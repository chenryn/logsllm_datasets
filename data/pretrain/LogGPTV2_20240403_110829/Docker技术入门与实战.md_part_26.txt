180第二部分实战案例
在本章中，笔者主要介绍了如何使用Docker搭建主流编程语言及其常用开发框架的
Martini Dockerfile: https://registry.hub.docker.com/u/lgsd/docker-martini/dockerfile/
Martini Docker Hub镜像：https://registry.hub.docker.com/u/lgsd/docker-martini/
---
## Page 195
取并运行官方registry镜像：
基于容器运行
码安装两种方式来使用docker-registry。
务器。官方仓库中也提供了docker-registry的镜像，因此用户可以通过容器运行和源
14.1.
到私有仓库中。最后会对docker-registry 项目的配置文件以及各种选项进行剖析。
项目的使用细节，并通过具体案例来展示如何搭建一个本地的仓库服务器。驾
快速使用docker-registry镜像搭建一个私有仓库的方法。本章将具体介绍docker-registry开源
通过公有仓库进行管理并不十分方便；另外有时候只是希望内部用户之间进行分享。口
。在第一部分中，笔者简单介绍了基于容器运行docker-registry的过程。首先，获
座在搭建完成本地的私有仓库服务器后，接下来会介绍如何编写脚本来批量上传本地镜像
docker-registry是一个基于Python的开源项目，可以用于构建私有的镜像注册服
在这种情况下，就有必要搭建一个本地的私有仓库服务器。在第一部分中，笔者讲解了
启动后比较关键的参数是指定配置文件和仓库存储路径。
$sudo docker run-d-p 5000:5000 registry
在使用Docker一段时间后，往往会发现手头积累了大量的自定义镜像文件，这些文件
使用docker-registry
使用私有仓库
第14章
Chapter1a
---
## Page 196
registry.
进行安装：
本地安装运行
registry目录：
182第二部分实战案例
然后执行安装操作：
修改local模板段的storage_path到本地的存储仓库的路径，例如：opt/data/
$ cp config/config_sample.yml config/config.yml
然后基于样例配置创建配置文件：
$ sudo apt-get install build-essential python-dev libevent-dev python-pip
口Ubuntu版的安装：
对于Ubuntu或CentOS行发行版，可以直接通过源安装。
有时候需要本地运行仓库服务，可以通过安装包或源码方式进行。
$ sudo docker run-d-p 5000:5000 -v/opt/data/registry:/tmp/registry registry
通过-v参数来配置仓库路径。例如下面的例子将镜像存储到本地/opt/data/
local:
$cd docker-registry
S
CentOS版的安装：
S
DOCKER REGISTRY_CONFIG=/registry-conf/config.yml registry
通过如下命令，可以指定本地路径（如/home/user/registry-conf）下的配置文件：
sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel
sudo pip install
sudoapt-getinstall-y build-essential python-dev
0
libssl-dev liblzma-dev libffi-dev
sudo pip install gunicorn pyyaml flask flask-cors rsa
liblzma-dev
storage_path:
storage:local
<<：*common
&local
_env:STORAGE_PATH:/opt/data/registry
docker-registry
libevent-dev python-pip
tadsob phus
TAE
---
## Page 197
配置Nginx代理
14.2
registry服务。
配置服务脚本
成功：
packages/docker_registry/config/config.yml。
使用Nginx来代理registry服务的原理十分简单，在上一节中，我们让registry服务监听
通常在生产场景中，对私有仓库还需要进行访问代理和提供认证和用户管理。
然后，执行service docker-registry start，将在本地的15000端口启动
此时使用访问本地的5000端口，看到输出docker-registry的版本信息说明运行
此时，可以通过下面的命令来启动：
对于通过软件包方式安装的，配置文件一般需要放在/usr/local/ib/python2.7/dist-
end script
exec gunicorn
respawn
respawn
stop on runlevel [016]
start onrunlevel[2345]
description "Docker Registry"
首先，创建/etc/init/docker-registry.conf 文件，内容为：
script
一般通过服务脚本来管理registry服务会更加方便，以Ubuntu14.04系统为例。
"docker-registry server (dev)(v0.8.1)"
$sudocur1127.0.0.1:5000
timeout 3600 -t 3600 -b 127.0.0.1:5000 -w 1 docker_registry.wsgi:application
$sudo gunicorn
$sudo python setup.py install
/var/log/docker-registry/server.log
用户认证
limit105
--access-logfile /var/log/docker-registry/access.log--error-logfile
--access-logfile /var/log/docker-registry/access.log
--max-requests
第14章使用私有仓库183
100
--error-logfile
-graceful
---
## Page 198
docker-registry.conf，代理本地的5000端口转发到15000端口。
求到达5000端口时，内部再将请求转发到本地的15000端口。
到的。
在127.0.0.1:15000，这意味着只允许本机才能通过15000端口访问到，其他主机是无法访问
184第二部分实战案例
为了让其他主机访问到，可以通过Nginx监听在对外地址的5000端口，当外部访问请
#代理服务器监听在5000端口
#本地的registry服务监听在15000端口
配置文件内容为：
在 /etc/nginx/sites-available/目录下,
$sudoapt-get-y install nginx
首先，安装Nginx。
chunked_transfer_encoding on;
uploads
proxy_set_header X-Real-IP
proxy_set_header Host
server_name private-registry-server.com;
listen 5000;
server
server 1ocalhost:15000;
upstream docker-registry
1ocation/vi/_ping(
location/_ping
ssl_certificate_key /etc/ssl/private/docker-registry;
proxy_pass http://docker-registry;
auth_basic off;
#配置转发对于/v1/ping的访问请求到registry服务
proxy_pass http://docker-registry;
proxy_pass http://docker-registry;
#配置转发对于/的访问请求到registry服务
auth_basic off;
$remote_addr;
shttp_host;
创建新的站点配置文件/etc/nginx/sites-available/
#pass on real client IP
#required for Docker client sake
SA
---
## Page 199
(/etc/nginx/下）的 docker-registry-htpasswd 文件。
转发。
善的开源实现，在这里介绍基于Nginx代理的用户访问管理方案。
添加用户认证
Nginx服务。
auth_basic_user_file docker-registry-htpasswd;指定了验证的用户名密码存储文件为本地
docker-registry-htpasswd文件中存储用户名密码的格式为每行放一个用户名、密码对：
auth_basic"Please Input username/password"；行说明启用认证服务，不通过的请求将无法
公共仓库DockerHub是通过注册索引（index）服务来实现的。由于index服务并没有完
$ sudo aptitude install apache2-utils-y
要生成加密后的字符串，可以通过htpasswd工具，首先安装apache2-utils：
需要注意的是，
user2:password2
location/{
首先，在配置文件的location/字段中添加两行。
Nginx支持基于用户名和密码的访问管理。
之后，可以通过上传镜像来测试服务是否正常。测试上传本地的ubuntu:latest镜像：
$ sudo 1n -s /etc/nginx/sites-available/docker-registry.conf /etc/nginx/sites-
建立配置文件软连接，
userl:passwordl
enabled/docker-registry.conf
sudo docker push 127.0.0.1:5000/ubuntu:latest
sudo docker tag ubuntu:14.04 127.0.0.1:5000/ubuntu:latest
proxy_pass http://docker-registry;
auth_basic_user_file
#let Nginx know about our auth file
auth basic
密码字段存储的并不是明文，
，放到/etc/nginx/sites-enabled/下面，让Nginx启用它，最后重启
docker-registry-htpasswd;
，而是使用crypt 函数加密过的字符串。
第14章使用私有仓库185
8.A
---
## Page 200
这行来指定目标注册服务器：
是本地注册服务器127.0.0.1：5000，用户可以通过修改registry=127.0.0.1：5000
批量上传指定镜像
自动化脚本，来快速完成对大量镜像的上传操作。
下载等操作。有时候，本地镜像很多，逐个打标记上传将十分浪费时间。这里我们给出两个
14.3使用私有仓库批量上传镜像
需要输入用户名和密码。
的密码信息，并创建userl和对应密码。
186第二部分实战案例
可以使用下面的push_images.sh脚本，批量上传本地的镜像到注册服务器中，默认
在第一部分对Docker私有仓库的讲解中，我们介绍了如何使用本地私有仓库进行上传
通过命令行访问，需要在地址前面带上用户名和密码才能正常返回：
例如，如下的操作会创建/etc/ngix/docker-registry-htp asswd文件来保存用户名和加密后
#!/bin/sh
$ curl USERNAME:PASSWORD@localhost:5000/v1/search
此时，通过浏览器访问本地的服务http://127.0.0.1:5000/v1/search，会弹出对话框，提示
registry=127.0.0.1:5000
#This script will upload the given local images to a registry server ($registry
$ sudo service nginx restart
最后，重新启动Nginx服务。
添加更多用户，可以重复上面的命令（密码文件存在后，不需使用-c选项重新创建）。
$ Adding password for user userl
创建用户userl，并添加密码。
LS
Create:
Author:
Usage:
the default value).
Re-type new password:
New password:
2014-09-23
push_imagesimagel[image2...]
yeasy@github
---
## Page 201
Pushing repository
Uploading ubuntu:latest...
例如，推送本地的ubuntu:latest和centos:centos7两个镜像到本地仓库：
$sudochmod a+x/usr/local/bin/push_images.sh
然后添加可执行权限，就可以使用该脚本了：
建议把脚本存放到本地的可执行路径下，
echo_b "The registry server is $registry"
done
for
[$#-lt1]&&usage&&exit
usage()
###DO NOT MODIFY THE FOLLOWING PART,UNLESSYOU KNOW WHAT IT MEANS ###
./pushimages.sh ubuntu:latest centos:centos7
echo_g "Done"
sudo docker rmi $registry/simage
sudo docker tag $image $registry/$image
echo_b "Uploading Simage..
imagein"s@”
sudo docker push $registry/Simage
echo
sudo
echo
echo
echo
ech0-e"\033[31m$1\033[0m"
[$#-ne1]&&return0
S#
S#
S#-ne1]&&return0
docker images
-e"\033[34m$1\033[0m"
-ne1]&&return0
-e
-ne1]&&return0
-e
“\033[33m$1\033[0m"
"\033[32m$1\033[0m"
127.0.0.1:5000/ubuntu (1 tags)
，例如/usr/local/bin/下面。
第14章使用私有仓库187
限世本
---
## Page 202
命令来上传本地所有镜像到本地私有仓库了。
镜像：
上传本地所有镜像
188第二部分实战案例
：在push_images工具的基础上，
同样，
done
(print$1":"$2)"
com/yeasy/docker_practice/blob/master/_local/push_images.sh
#This script requires the push_images，
the default value)
#This script will upload all local images to a registry server ($registry is
#!/bin/sh
上传后，查看本地镜像，会发现上传中创建的临时标签也同时被清理了。
Untagged: 127.0.0.1:5000/centos:centos7
centos/tags/centos7}
70214e5d0a90:
34e94e67e63a:
The push refers to a repository [127.0.0.1:5000/centos] (len: 1)
Uploading centos:centos7.
Untagged:127.0.0.1:5000/ubuntu:latest
ubuntu/tags/latest)
Done
Pushingtagfor
Done
Image 96864a7d2df3
Image809ed259f845
Image9387bcc9826e
Image897578f527ae
Imagec1f3bdbd8355already
Imagebfb8b5a2ad34already
Image 511136ea3c5a already pushed, skipping
Create:2014-09-23
Author:yeasy@github
Usage:
push_images.sh $image
，读者把它放在/usr/local/bin/下面，并添加可执行权限，之后就可以通过push_all
push_all
Image successfully
Image successfully pushed
rev[70214e5d0a90]on
already pushed,skipping
alreadypushed,
already pushed,
already
already
pushed,
pushed,
pushed,
pushed,skipping
，还可以进一步的创建push_all工具，
pushed
skipping
skipping
skipping
skipping
skipping
(http://127.0.0.1:5000/v1/repositories/
which can be found at https://github
，来上传本地所有
---
## Page 203
示例配置
们来进行开发或生产部署。
14.4
我们将以下面的示例配置为例，
Docker的Registry利用配置文件提供了一些仓库的模板（favor），用户可以直接使用它
docker-registry.db
common:&common
#All other flavors inherit thecommon' config snippet
仓库配置文件
cache_lru:
#访问远端存储后端时，配置LRU缓存
cache:
mirroring:
#默认不启用镜像服务
#SQLite搜索后端数据库地址
search backend:
privileged_key:
disable_token_auth:_env:DISABLE_TOKEN_AUTH
#
index_endpoint: