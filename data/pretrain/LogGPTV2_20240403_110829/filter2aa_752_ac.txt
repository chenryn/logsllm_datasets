% man sleep 
如果要查看 sleep 库函数的手册页，则需要使用下面的命令： 
% man 3 sleep 
每个手册页都包含了一行对命令或函数的介绍。运行 whatis name 会显示系统中所有名
称匹配的、位于任意章节中的所有手册页的介绍。如果你不清楚你要找的命令或函数的名字，
你可以通过 man –k keyword 命令进行查找。 
手册页包含了大量非常有用的信息，因此应该成为你遇见任何问题的时候第一个寻求解
决方案的地方。命令相关的手册页介绍了命令行选项、输入输出、错误代码、配置和其它各
种信息。系统调用和库函数的手册页介绍了参数和返回值、可能出现的错误代码和副作用，
以及当你调用这个函数时需要包含的文件。 
1.5.2 Info 
Info 文档系统提供了更加详细的文档，范围涵盖了 GNU/Linux 系统的许多核心部件以
及其它一些程序。Info 页面是一种与 HTML 页面类似的超文本文档。只需要在一个终端窗
口输入 info 就可以启动文本界面的 Info 浏览器。首先你将看到的是在你的系统中已安装的
所有 Info 页面的列表。（按下 Ctrl+H 键会显示用于浏览 Info 文档的键盘配置。） 
其中最重要的一些文档包括了： 
· gcc——GCC 编译器 
· libc——GNU C 函数库，包含许多系统调用 
· gdb——GNU 调试器 
· emacs——Emacs 文本编辑器 
· info——Info 系统自己的相关信息 
几乎所有的标准 Linux 编程工具（包括链接器 ld、汇编程序 as、性能分析程序 gprof）
都提供了详尽的 Info 页面。你可以通过在命令行中指点名字，直接跳到有关的 Info 页： 
% info libc 
如果你在 Emacs 中完成多数的编程任务，你可以使用 Emacs 内置的 Info 浏览器。它的
调用命令是 M-x info 或 C-h i。 
www.AdvancedLinuxProgramming.com 
13
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
1.5.3 包含文件 
你可以通过阅读系统包含文件来获取与系统函数相关的知识。这些包含文件位于 
/usr/include 和 /usr/include/sys 目录下。比如当你在使用系统调用的时候出现了编译错误，
你可以直接去查看相应的包含文件以确保函数的签名与手册页中所说的是一致的。 
在 Linux 系统中，关于系统调用如何工作的各种细节信息都会从一些包含文件中反应出
来；它们位于 /usr/include/bits、/usr/include/asm 和 /usr/include/sys 目录下。例如，各种信
号（在第三章“进程”3.3 节“信号”中进行了介绍）分别对应的数量值均定义在包含文件 
/usr/include/bits/signum.h 中。对于想知根知底的人来说，这些文件是非常值得阅读的。不
过，不要在你的程序中直接包含这些文件；应该使用使用 /usr/include 中的包含文件，除非
是你所使用的函数的手册页中特别指明的。 
1.5.4 源码 
它是开源的，对吧？对于解释系统如何运行这种问题，最终的仲裁者必然是系统本身的
代码。对于 Linux 程序员来说，非常幸运的是，这些代码是可以自由获取的。通常，你的
Linux 发行版中可能已经包含了整个系统和各种程序的完整源码。如果没有，根据 GNU 
General Public License，你有权向系统发行者要求获取这些源码。（源码也可能没有被安装在
你的硬盘上。请参阅发行版文档以寻找安装方法。） 
通常 Linux 内核的源码被安放在 /usr/src/linux 目录中。如果本书使你对进程、共享内
存和系统设备的工作方式产生了兴趣，你完全可以从这些源码中找到答案。本书中介绍的多
数系统函数都包含在 GNU C 函数库中；请查看发行版文档以获取 C 库源码的安装位置。 
www.AdvancedLinuxProgramming.com 
14
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
第二章：编写优质 GNU/Linux 软件 
本章介绍了多数 GNU/Linux 程序员会使用的一些基本技巧。如果在你的程序中遵循这
些约定，你的程序就可以在 GNU/Linux 系统环境下很好地工作，并且能符合用户关于程序
间协作的习惯与期望。 
2.1 与运行环境交互 
当你学习C或C++的时候，你会被告知main函数是程序的主入口点。当操作系统执行你
的程序的时候，这个函数会自动帮助程序与操作系统和用户进行沟通。你也许知道main的
两个参数，通常被命名为argc和argv。这两个参数帮助程序获取用户输入。你或许学过为程
序提供终端输入输出的stdout和stdin（或C++程序中的cout和cin流）。这些功能分别由C和
C++语言提供，且以某种方式与GNU/Linux系统交互。GNU/Linux系统也提供了其它的一些
方式供程序与操作环境交互。 
2.1.1 参数列表 
你可以通过在命令 shell 的提示符后输入一个程序的名字来运行一个程序。你也可以选
择 在 程 序 名 后 跟 一 个 或 多 个 用 空 格 分 隔 的 单 词 。 这 部 分 输 入 被 称 为 命 令 行 参 数
（command-line arguments）。你可以通过将一个参数用引号保护起来，使某个参数内可以包
含空格。更加常见的说法是将它称为参数列表，因为这些参数未必是来自 shell 程序。在第
三章“进程”中你将看到另外调用程序的方法。在这种方法中，一个程序将可以为被调用的
程序直接指定参数列表。 
当从 shell 调用一个程序的时候，参数列表中包含了整个命令行，包含了程序的名字和
全部被指定的命令行参数。例如，假设你在你的 shell 中这样执行 ls 显示根文件夹的对应的
大小： 
% ls –s / 
则 ls 程序得到的参数列表将包含三个参数。第一个参数是命令行中指定的程序名 ls。
参数列表中的第二和第三个参数则是命令行中指定的 -s 和 / 这两个参数。 
程序的 main 函数可以通过参数 argc 和 argv 来访问程序的参数列表（如果你不需要访
问参数列表，你可以直接忽略它们）。第一个参数 argc 指示了命令行中参数的数量。第二个
参数 argv 是一个字符串数组。数组的大小由 argc 指定，而数组的元素则为各个命令行参数
的元素，表示以 NULL 结束的字符串形式。 
使用命令行参数的过程因此被简化为检查 argc 和 argv 的内容。如果你对程序自己的名
字没有兴趣，记得跳过第一个参数。 
列表 2.1 展示了使用 argc 和 argv 的方法。 
代码列表 2.1 （arglist.c）使用 argc 和 argv 
#include  
int main (int argc, char* argv[]) 
www.AdvancedLinuxProgramming.com 
15
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
{ 
printf (“The name of this program is ‘%s’.\n”, argv[0]); 
printf (“This program was invoked with %d arguments.\n”, argc - 1); 
/* 指定了命令行参数么？*/ 
if (argc > 1) { 
/* 有，那么输出这些参数。*/ 
int i; 
printf (“The arguments are:\n”); 
for (i = 1; i 。 
www.AdvancedLinuxProgramming.com 
16
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
例如，假设一个程序接受表格 2.1 中列举的三个参数： 
表格 2.1 程序选项示例 
短格式 
长格式 
作用 
-h 
--help 
显示使用方法，然后退出。 
-o filename 
--output filename  
指定输出文件名。 
-v 
--verbose 
输出冗余信息。 
此外，程序还会接受零个或多个命令行参数作为输入文件。 
你需要提供两个数据结构以使用 getopt_long。第一个数据结构是一个字符串，其中包
含了所有有效的短格式选项，每个字母表示一个。如果一个选项要求一个参数标记为在名称
后加一个冒号。对于这个程序而言，字符串 ho:v 指明了程序的可用选项包括 –h，-o 和 –v，
其中第二个选项要求一个参数。 
要指明程序接受的长选项，你需要建立一个 struct option 类型的数组。数组的每个元素
都针对一个长选项且每个元素都具有四个域。一般情况下，第一个域是长选项的名字（表示
为一个字符串；不包含选项开始的两个短杠）；第二个参数如果为 1 则表示该选项接受一个
参数，否则为 0；第三个域指定为 NULL；第四个参数则为一个字符常量，保存了相同含义
的短选项名。数组中最后一个元素的所有域都应为 0。你可以这样初始化这个数组： 
const struct option long_options[] = { 
  { “help”,   
0,  NULL, 
‘h’  }, 
  { “output”,  
1,  NULL,  ‘o’  }， 
  { “verbose”,  0,  NULL,  ‘v’  }, 
  { NULL,  
0,  NULL,  0 
} 
}; 
当你调用 getopt_long 的时候，并且传递给它以下这些参数： 
1. main 函数的参数 argc 和 argv； 
2. 描述短选项的字符串； 
3. 描述长选项的 struct options 数组。 
当使用 getopt_long 的时候： 
· 每次调用 getopt_long 的时候，它解析一个选项，返回这个选项对应的短格式
字母。如果没有其它选项则返回 -1。 
· 这个函数的典型用法是在一个循环中不断调用以处理用户指明的所有选项，且
程序在一个 switch 语句中分别处理每个选项。 
· 如果 getopt_long 检测到一个无效选项（一个没有被指定为任何长短选项的选
项），它会输出一条错误消息并返回字符’?’（一个英文问号）。多数程序通常
会在这种情况下显示使用帮助并退出。 
· 当处理一个带参数的选项时，全局变量 optarg 将指向参数字符串的开始。 
· 当 getopt_long 结束处理所有选项之后，全局变量 optarg 包含了第一个非选项
参数在 argv 中的索引。 
列表 2.2 中展示了一个使用 getopt_long 处理参数的示例程序。 
www.AdvancedLinuxProgramming.com 
17
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
代码列表 2.2 （getopt_long.c）使用 getopt_long 
#include  
#include  
#include  
/* 程序的名称。*/ 
const char* program_name; 
/* 将程序使用方法输出到 STREAM 中（通常为 stdout 或 stderr），并以 EXIT_CODE 为返回