title:DAIS: A Real-Time Data Attack Isolation System for Commercial
Database Applications
author:Peng Liu
DAIS: A Real-time Data Attack Isolation System for Commercial Database
Applications
Department of Information Systems, UMBC
Peng Liu
Baltimore, MD 21250
PI:EMAIL
Abstract
Traditional database security mechanisms are very lim-
ited in defending successful data attacks. Authorized but
malicious transactions can make a database useless by im-
pairing its integrity and availability. This paper presents the
design of a real-time data attack isolation system, denoted
DAIS. DAIS isolates likely suspicious actions before a deﬁ-
nite determination of intrusion is reported. In this way, the
database can be immunized from many malicious transac-
tions. DAIS is a COTS-DBMS-speciﬁc implementation of a
general isolation algorithm that we developed in [19]. In
this paper, the design of the ﬁrst DAIS prototype, which is
for Oracle Server 8.1.6, is discussed. DAIS uses triggers
and transaction proﬁles to keep track of the items read and
written by transactions, isolates attacks by rewriting user
SQL statements, and is transparent to end users. The DAIS
design is very general. In addition to Oracle, it can be easily
adapted to support many other database application plat-
forms such as Microsoft SQL Server, Sybase, and Informix.
Keywords: Isolation, Intrusion Tolerance, Database Secu-
rity
1 Introduction
Database security concerns the conﬁdentiality, integrity,
and availability of data stored in a database. A broad span of
research from authorization [9, 28, 14], to inference control
[1], to multilevel secure databases [33, 31], and to multi-
level secure transaction processing [3], addresses primarily
how to protect the security of a database, especially its con-
ﬁdentiality. However, very limited research has been done
on how to survive successful database attacks, which can
seriously impair the integrity and availability of a database.
Experience with data-intensive applications such as credit
card billing, banking, air trafﬁc control, logistics manage-
ment, inventory tracking, and online stock trading, has
shown that a variety of attacks do succeed to fool traditional
database protection mechanisms. In fact, we must recognize
that not all attacks – even obvious ones – can be averted at
their outset. Attacks that succeed, to some degree at least,
are unavoidable. With cyber attacks on data-intensive in-
ternet applications, i.e., e-commerce systems, becoming an
ever more serious threat to our economy, society, and every-
day lives, attack resistant database systems that can survive
malicious attacks are a signiﬁcant concern.
One critical step towards attack resistant database sys-
tems is intrusion detection, which has attracted many re-
searchers [7, 21, 13, 10, 23, 26, 22, 17, 18].
Intrusion
detection systems monitor system or network activity to
discover attempts to disrupt or gain illicit access to sys-
tems. The methodology of intrusion detection can be
roughly classed as being either based on statistical proﬁles
[15, 16, 30] or on known patterns of attacks, called signa-
tures [11, 8, 27, 12, 32]. Intrusion detection can supplement
protection of network and information systems by reject-
ing the future access of detected attackers and by provid-
ing useful hints on how to strengthen the defense. How-
ever, intrusion detection has several inherent limitations:
(a) Intrusion detection makes the system attack-aware but
not attack-resistant, that is, intrusion detection itself cannot
maintain the integrity and availability of the database in face
of attacks. (b) Achieving accurate detection is usually dif-
ﬁcult or expensive. The false alarm rate is high in many
cases. (c) The average detection latency in many cases is
too long to effectively conﬁne the damage.
To overcome the limitations of intrusion detection, a
broader perspective is introduced, saying that in addition to
detecting attacks, countermeasures to these successful at-
tacks should be planned and deployed in advance. In the lit-
erature, this is referred to as survivability or intrusion toler-
ance. In this paper, we will address an useful technique for
database intrusion tolerance, namely attack isolation, and
present the design of a practical system which can do attack
isolation.
1.1 The Problem
The merit of attack isolation can only be clearly ex-
plained in the context of an intrusion tolerant database sys-
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
tem. Database intrusion tolerance can mainly be enforced at
two possible levels: operating system (OS) level and trans-
action level. Although transaction level methods cannot
handle OS level attacks, it is shown that in many applica-
tions where attacks are enforced mainly through malicious
transactions transaction level methods can tolerate intru-
sions in a much more effective and efﬁcient way. Moreover,
it is shown that OS level intrusion tolerance techniques such
as those proposed in [23, 22, 24, 25, 4], can be directly in-
tegrated into a transaction level intrusion tolerance frame-
work to complement it with the ability to tolerate OS level
attacks. This paper will focus on transaction level intrusion
tolerance, and our presentation will be based on the intru-
sion tolerant database system architecture shown in Figure
1.
The architecture is built on top of a traditional COTS
(Commercial-Of-The-Shelf) DBMS. Within the frame-
work, the Intrusion Detector identiﬁes malicious transac-
tions based on the history kept (mainly) in the log. The
Damage Assessor locates the damage caused by the de-
tected transactions. The Damage Repairer repairs the lo-
cated damage using some speciﬁc cleaning transactions.
The Damage Conﬁnement Manager restricts the access to
the objects that have been identiﬁed by the Damage Asses-
sor as damaged, and unconﬁnes an object after it is cleaned.
The Policy Enforcement Manager (PEM) (a) functions as a
proxy for normal user transactions and those cleaning trans-
actions, and (b) is responsible for enforcing system-wide in-
trusion tolerant policies. For example, a policy may require
the PEM to reject every new transaction submitted by an
user as soon as the Intrusion Detector ﬁnds that a malicious
transaction is submitted by the user. It should be noticed
that the framework is designed to do all the intrusion toler-
ance work on-the-ﬂy without the need to periodically halt
normal transaction processing.
The complexity of the framework is mainly caused by a
phenomenon denoted damage spreading. In a database, the
results of one transaction can affect the execution of some
other transactions. Informally, when a transaction (cid:1) (cid:1) reads
an object (cid:2) updated by another transaction (cid:1) (cid:2), (cid:1)(cid:1) is directly
affected by (cid:1)(cid:2). If a third transaction (cid:1)(cid:3) is affected by (cid:1)(cid:1),
but not directly affected by (cid:1) (cid:2), (cid:1)(cid:3) is indirectly affected by
(cid:1)(cid:2). It is easy to see that when a (relatively old) transaction
(cid:3)(cid:1) that updates (cid:2) is identiﬁed malicious, the damage on (cid:2)
can spread to every object updated by a transaction that is
affected by (cid:3)(cid:1), directly or indirectly. The job of the Dam-
age Assessor and the Damage Repairer is to locate each
affected transaction and recover the database from the dam-
age caused on the objects updated by the transaction. In
particular, when an affected transaction is located, the Dam-
age Repairer builds a speciﬁc cleaning transaction to clean
each object updated by the transaction (and not cleaned yet).
Cleaning an object is simply done by restoring the value of
the object to its latest undamaged version. This job gets
even more difﬁcult as the execution of new transactions con-
tinues because the damage can spread to new transactions
Damage Confinement
Manager
Intrusion Detector
Damage Assessor
Database Applications
User Transactions
Policy Enforcement 
Manager
Undo Transactions
Scheduler
Recovery Manager
Database
Log
A Traditional Database System
Damage Repairer
Figure 1. An Intrusion Tolerant Database Sys-
tem without Isolation
and cleaned objects can be re-damaged by new transactions.
Therefore, the main objective of this framework is to guar-
antee that damage spreading is (dynamically) controlled in
such a way that the database will not be damaged to a degree
that is unacceptable or useless.
The limitation of this architecture is mainly due to the
fact that the effectiveness of the framework is heavily de-
pendent on the performance of the Intrusion Detector (For
example, the framework cannot handle the malicious trans-
actions not captured by the Intrusion Detector), and the fact
that for accuracy a (relatively) long detection latency is usu-
ally caused, especially when anomaly detection is enforced.
One main reason for the latency is that intrusion detection
has to make a tradeoff between meeting the requirement
of reporting an intrusion accurately (i.e., low false alarm
rates) and the requirement of detecting as many intrusions
as possible (i.e., high detection rates), which can often re-
sult in conﬂicting design goals. For example, in anomaly
detection, for detection accuracy the anomaly threshold for
reporting must be high, thus many intrusions with gradual
anomaly cannot be identiﬁed; on the other hand, in order
to capture more intrusions, the threshold should instead be
lower, thus the false alarm rate would increase and many
legitimate transactions can be mistaken for malicious and
suffer denial-of-service. To resolve this dilemma, extend-
ing the monitoring time window is one feasible solution. By
collecting and investigating more proofs about a suspicious
activity, usually more accuracy can be achieved. For exam-
ple, [20] shows that when using system call trails to identify
sendmail attacks, synthesizing the anomaly scores of a se-
quence of system calls (longer than 6) can achieve much
better accuracy than based on single system calls. More-
over, in many real world examples, i.e., fraud credit card
usage detection, human intervention is needed, which can
make the detection latency even longer.
2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
Signiﬁcant detection latency can cause serious damage
spreading in many cases. As a result, the main objective
of this framework can be seriously jeopardized. Therefore,
how to overcome this limitation is a critical issue.
1.2 Our Approach and Contribution
In [19], isolation is proposed as an effective approach
to solve the above problem, and a general algorithm to do
isolation in the context of database systems is presented.
In this approach, when a suspicious user (cid:4) is discovered,
although more investigation is still needed for accurate de-
tection, (cid:4)’s access will be isolated transparently into a sep-
arate environment that still appears to (cid:4) to be the actual
system. In this way, (cid:4)’s activities are allowed to be kept
under (possibly more careful) surveillance without risking
further harm to the system. Compared with ﬁshbowling,
a general technique for isolation, this approach isolates at-
tacks without consuming duplicate resources to construct
an entirely separate environment, allows options for partial
interaction across the isolation boundary, and provides al-
gorithms for smoothly merging (cid:4)’s work back into the real
system should (cid:4) prove innocent.
This paper presents the design of a real-time data attack
isolation system, denoted DAIS. DAIS is a COTS-DBMS-
speciﬁc implementation of the general isolation algorithm,
which is based on an abstract database model. In particular,
the design of the ﬁrst DAIS prototype, which is for Oracle
Server 8.1.6, is discussed. DAIS uses triggers and transac-
tion proﬁles to keep track of the items read and written by
transactions, isolates attacks by rewriting user SQL state-
ments, and is transparent to end users. The DAIS design is
very general. In addition to Oracle, it can be easily adapted
to support many other database application platforms such
as Microsoft SQL Server, Sybase, and Informix.
The rest of the paper is organized as follows. In Section
2, we summarize the general isolation algorithm. In Section
3, we present the design of DAIS. We address some perfor-
mance issues in Section 4. In Section 5, we conclude the
paper.
2 The General Isolation Algorithm
2.1 The Model
[19] views a database is a collection of data items (or
objects). The database state is determined by the values of
these data items. Data items are operated by transactions.
A transaction is a partial order of read and write operations
that either commits or aborts. Two operations conﬂict if one
is write. The execution of a set of transactions is modeled
by a history, which is a partial order ((cid:5) (cid:6) ), where 
is the set of all operations executed by these transactions,
and (cid:6)  indicates the execution order of those operations.
Two histories are equivalent if (1) they are deﬁned over the
same set of transactions and have the same operations, and
(2) they order conﬂicting operations of nonaborted transac-
tions in the same way. A history   is serial if, for any two