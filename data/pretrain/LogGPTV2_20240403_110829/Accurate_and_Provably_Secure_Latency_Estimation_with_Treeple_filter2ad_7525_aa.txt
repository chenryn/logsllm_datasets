title:Accurate and Provably Secure Latency Estimation with Treeple
author:Eric Chan-Tin and
Nicholas Hopper
Accurate and Provably Secure Latency Estimation with Treeple
Eric Chan-Tin and Nicholas Hopper
University of Minnesota
Minneapolis, MN
{dchantin, hopper}@cs.umn.edu
Abstract
A network latency estimation scheme associates a short
“position string” to each peer in a distributed system
so that the latency between any two peers can be esti-
mated given only their positions. Proposed applications
for these schemes have included efﬁcient overlay construc-
tion, compact routing, anonymous route selection, and efﬁ-
cient byzantine agreement. This paper introduces Treeple,
a new scheme for latency estimation, that differs from pre-
vious schemes in several respects. First, Treeple is provably
secure in a strong sense, rather than being designed only
to resist known attacks. Second, Treeple “positions” are
not based on Euclidean coordinates, but reﬂect the under-
lying network topology. Third, Treeple positions are highly
stable, allowing peers to retain the same position informa-
tion for long periods with no maintenance. Finally, Treeple
positions can be assigned to peers that do not participate
directly in the scheme. We evaluate Treeple on a large in-
ternet dataset (with over 200,000 measurements) and ﬁnd
that on average, its latency estimates are within 26% of the
true round-trip time. By comparison, Vivaldi, a popular but
insecure scheme, has a median relative error of 25% on the
same dataset.
1. Introduction
Network coordinate systems [7, 23, 24, 5, 25, 30] as-
sign a coordinate to each node in a distributed system such
that the distance between two nodes’ coordinates provides
a good estimate of the internet round-trip time between the
nodes. The ability to estimate the network distance between
arbitrary peers is useful in many cases: for example, ﬁnd-
ing the closest node to download content from in a content
distribution network or ﬁle-sharing system [32]; reducing
inter-ISP communication [20, 4]; reducing state in internet
routers [1, 12, 16]; detecting Sybil attacks [8, 2]; and con-
ducting byzantine leader elections [6]. Early network co-
ordinate systems were shown to have reasonable accuracy
and fast convergence, while later schemes added features
such as coordinate stability under churn and measurement
uncertainty [18, 17, 7].
Unfortunately, Kaafar et al. [15, 13] demonstrated that
these early network coordinate systems were vulnerable to
very simple attacks, in which adversarial nodes disrupt the
coordinate system by claiming to have randomly chosen po-
sitions and adding random delays to their outgoing mes-
sages.
In response, several schemes to mitigate these at-
tacks have been proposed [35, 14, 31, 29, 33]. None of these
schemes seems to have an explicit security goal, and at least
one of the schemes [35] has already been shown to be inse-
cure against more subtle attacks [3], potentially leading to a
“penetrate and patch” cycle of schemes and attacks.
In this paper, we introduce a strong deﬁnition of secu-
rity for latency estimation schemes that is robust to new at-
tack types. Informally, our condition states that an adver-
sary should be unable to inﬂuence the estimated distance
between two honest nodes, and additionally, should only be
able to increase the distance between pairs of nodes involv-
ing at least one adversarial node. We then consider whether
previous secure network coordinate systems meet our deﬁ-
nition. We demonstrate by simulation that several “secure”
schemes are vulnerable to a variant of the “Frog-Boiling”
attack [3], where an attacker injects a sequence of small
inaccuracies – each of which appear plausible – that cu-
mulatively result in the partitioning of the whole network
into two independent clusters. We additionally show that
even schemes that rely on trusted “landmark nodes” [23]
can fail by allowing adversarial nodes to reduce their co-
ordinate distance to targeted victim nodes in the network.
The common fault underlying both of these vulnerabilities
is that current network coordinate systems ignore the un-
derlying network topology, and thus cannot distinguish be-
tween anomalous round-trip times due to adversarial ma-
nipulation and anomalies due to the topology and changing
conditions in the network. We describe the common faults
of current systems in more details in Section 2.3.
After deﬁning security, we describe Treeple, our scheme
for secure network latency estimation. Node positions in
ever, node Y cannot affect the distance estimation between
nodes X and Z because it will not be on the same net-
work path. Furthermore, using basic techniques like unpre-
dictable nonces when measuring the RTT from A to Y can
prevent Y from decreasing the distance estimation to other
nodes. We describe the full scheme based on this idea in
Section 3.
We evaluate Treeple on a large, real-world dataset in
Section 4. For this dataset, Treeple has a median relative
error of 0.26; This means that on average, half of the es-
timated latencies are within 26% of the true latency. For
comparison, we simulated Vivaldi [7], a popular but inse-
cure network coordinate system, on the same data set and
the resulting coordinate scheme has a median relative error
of 0.25. We note that the choice of Vivaldi is not arbitrary:
all of the recently proposed “secure” or “stable” network
coordinate schemes [35, 14, 31, 29, 33, 18] work by adding
additional measures to Vivaldi coordinate calculations that
attempt to discard anomalous inputs, and thus would have
the same accuracy in the absence of an attacker. This shows
that Treeple has accuracy comparable to network coordinate
systems while providing provable security.
We additionally demonstrate that Treeple positions are
highly stable: positions calculated on the ﬁrst day of our
dataset provide nearly the same accuracy nearly three weeks
later. This has several important implications. First, be-
cause peers do not need to recalculate their positions the
bandwidth overhead is signiﬁcantly reduced compared to
network coordinate schemes. Second, for the same reason,
the “centralized” vantage points do not present a signiﬁ-
cant scaling challenge for Treeple. Finally, trusted vantage
points do not present a central point of failure: the system
can continue to function with high accuracy even if all van-
tage points are unavailable for an extended period.
2. Security
2.1. Threat Model
We model a network as a collection of N end-hosts con-
nected by M routers, forming together a set of N + M
nodes. At any time t (we assume synchrony for simplic-
ity only) there is a network condition χ(t) which assigns
a route routeχ(n1, n2), a return route rrouteχ(n1, n2) =
routeχ(n2, n1) and a resulting round-trip time rtt(n1, n2)
to every pair of nodes (n1, n2). We allow each end-host
n to measure both rtt(n, n′) and route(n, n′) for arbitrary
hosts n′. We may extend our model to allow χ(t) to assign
other conditions to peers and routers as well (for example,
to model peer churn or packet loss), but we omit these de-
tails for clarity of presentation.
We allow an adversary to control an arbitrary number of
end-hosts, but no routers. Thus an adversary can send mes-
Figure 1. A tree built from one source to three destina-
tions with link latency in milliseconds.
Treeple are not abstract coordinates but instead represent
their position in the network graph in a way that allows ef-
ﬁcient computation of the estimated latency between a pair
of nodes. Assuming a small collection of trusted “vantage
points”, we prove that Treeple meets our security deﬁnition
even in the presence of an arbitrary number of adversarial
nodes.
To illustrate the idea behind Treeple, suppose we have
a system with trusted vantage point A and peers X, Y ,
and Z. Using techniques similar to traceroute, A can dis-
cover the network paths from itself to each of the peers,
constructing a tree with routers at the internal nodes and
link latencies along the edges. A could then use this tree
to compute an upper bound on the latency between X and
Y as follows: ﬁrst identify C, the least common ancestor
of X and Y – lca(X, Y ) – in the tree. Then compute the
sum of the latency between C and X and the latency be-
tween C and Y . Since there exists a path of this latency
between X and Y , it represents an upper bound on the la-
tency of the actual network path between the nodes. 1 For
example, suppose that the tree is built as shown in Figure 1,
and A is estimating the distance between nodes Y and Z.
In this case, lca(Y, Z) = B and the estimated distance is
35 + 15 + 20 = 70 ms.
Notice that this approach does not suffer from the same
issues as network coordinate systems. A malicious node can
only affect the distance (real or estimated) between itself
and another node, but not between two honest nodes. For
example, if node Y from Figure 1 was malicious, it could
affect the distance estimation between Y and Z. How-
1We note that due to the Internet’s policy-based routing: (a) the RTTs
measured to the intermediate nodes of the traceroutes will not typically
reﬂect the link latencies exactly due to asymmetric return paths, and (b)
“triangle inequality violations” [36, 19] can occur, in which case the path
X-C-Y is shorter than the actual network path. However, in practice these
measurements still provide a good approximation, as we show in Section 4
sages to arbitrary hosts, with arbitrary apparent origination,
deviate from protocols in arbitrary collusive fashion, and ar-
bitrarily inﬂate the measurement of rtt(n, m) when m is ad-
versarially controlled; however the adversary cannot effect
the measurement of rtt between honest end-hosts, and can-
not intercept, drop, or delay communication between honest
end-hosts.
It may seem at ﬁrst that excluding routers from adver-
sarial control is a strong assumption. We argue, however,
that excluding routers from adversarial control is reason-
able in this setting; if an adversary could arbitrarily delay or
redirect packets between any pair of peers (and thus affect
the round-trip time between honest nodes) then a scheme
to estimate network latency cannot succeed, since any la-
tency estimate can be invalidated by the adversary. We
note that under the current Internet architecture, an adver-
sary that controls a single BGP speaker can exploit longest-
preﬁx matching to receive trafﬁc directed to arbitrary hosts.
Furthermore, as recently shown by Goldberg, et al. [11], the
Internet’s policy-based routing is such that there exist single
attackers that can intercept over 90% of all routes even when
constrained by SBGP to use only existing routes. Goldberg
et al. showed that their strategy was suboptimal, meaning
the actual fraction of routes that a single attacker can inter-
cept under SBGP may be even higher. Since we seek to pro-
vide provable security for the current Internet architecture,
we must therefore assume that any attacker that controls a
router is the worst-case attacker and can intercept and delay
every message sent between peers.
We note additionally, that while the most desirable situ-
ation would be to resist such attacks, both the attacks in the
current literature, and the attacks on existing schemes that
we describe, ﬁt within our threat model (and in fact, do not
fully exploit the abilities we ascribe to an adversary.) Thus
our threat model is strictly stronger than that considered in
every previous work on the topic, and a scheme that prov-
ably resists our threat model will already rule out all of the
known methods of attack.
2.2. Deﬁnitions
2.2.1 Latency Estimation Scheme
A latency estimation scheme for a set Peers of end-hosts
consists of four distributed protocols:
• A global initiation protocol GlobalInit that initializes
the global parameters of the scheme.
• An interactive protocol LocalInit which initializes the
state of a peer.
• An interactive protocol Update(P ) in which the peer
P uses its local state and global parameters to com-
pute a new value for its position ρ(P ), possibly after
interacting with other peers.
• An algorithm Distance(ρ1, ρ2) which computes an es-
timated latency between positions ρ1 and ρ2.
Peer P runs LocalInit on joining the system, and then at
regular time intervals τ , it calls Update(P ) to update its
position. The most important functional goals for a latency
estimation scheme are:
Accuracy. Informally, a scheme is accurate if two nodes
that compute positions ρ1 and ρ2 have network latency that
is close to Distance(ρ1, ρ2). The typical measure of a
scheme’s accuracy used in the literature is the median rela-
tive error of peer P,
median
P ′∈Peers
|Distance(ρ(P ), ρ(P ′)) − rtt(P, P ′)|
rtt(P, P ′)
.
We note that this measure inherently compares a scheme’s
accuracy to the “ground truth:” stating that a scheme has
median relative error c is stating that on average, 50% of the
estimates are within a factor c of the true latency, while 50%
are not. Thus, lower values for median relative error equate
to better estimates. Ideally, a scheme would achieve relative
error of 0 on all estimates. However, it is not hard (logically)
to construct a network that has incompressible latencies, so
that any scheme to represent positions by strings of length
o(N ) must be incorrect on at least a constant fraction of the
estimates.
Stability. A latency estimation scheme is stable if positions
computed at time t still provide good accuracy at time steps
t′ > t. This can be computed by computing the distance in
coordinates at time t and comparing it to the latency at time
t′, in the calculation of median relative error.
Efﬁciency. A latency estimation scheme is not very useful
if the bandwidth required to transmit positions exceeds the
O(N 2) bandwidth required to simply have all nodes mea-
sure pairwise RTTs, and similarly if the distance computa-
tions from positions is inefﬁcient. Ideally, the size of posi-
tions and the time required to compute distances should be
essentially independent of the number of peers.
We note that all of these aspects of a scheme may depend
to a large extent on the topology of the underlying network.
In Section 4, we use a large set of Internet measurements to
compare the predictions of Treeple to measured latencies,
measure the stability of Treeple positions, and evaluate the
size of Treeple positions, along with the average computa-
tional load.
Triangle Inequality Violations. We note that several mea-
surement studies [36, 19] have reported that as many as 5%
of all node “triangles” (N1, N2, N3) violate the triangle in-
equality, that is, rtt(N1, N3) > rtt(N1, N2)+rtt(N2, N3);
we call these triangles “triangle inequality violations” or
TIVs. These occur due to the fact that Internet routing is
policy-based, rather than distance-based: each autonomous
system chooses among possible routes to a given destination
based primarily on the cost it will incur by sending packets
along the various routes. Thus any system for estimating la-
tencies that satisﬁes the triangle inequality – including Eu-
clidian distances as in Vivaldi and GNP, and tree distance as
in Treeple – must be inaccurate on at least one pair of nodes
in each TIV. However, this does not preclude having accept-
able accuracy on the remaining 95% of node pairs; indeed,
previous studies have shown that in the absence of attacks,
Vivaldi achieves low median and 90th percentile relative er-
rors, while we show in Section 4 that the same is true of
Treeple.
2.2.2 Security Goal
To motivate our Security deﬁnition, we consider an hypo-
thetical (“ideal”) system in which we can instantaneously
ask any node to measure its RTT to another node. In this
setting, an adversary is unable to alter the RTT between any
pair of honest nodes. On the other hand, any measurement
in which at least one of the nodes is an adversary can be
increased, but if the query includes some challenge value,
it cannot be decreased below the actual network latency.
Since an adversary can always increase apparent RTTs in-
volving an adversarial node by delaying responses, this hy-