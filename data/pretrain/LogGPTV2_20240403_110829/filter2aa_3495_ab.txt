22 
23 
24 
July 27-30, 2017  
Heap spray and OOB branch to vtable 
Allocated OSString object 
Deallocated OSString object 
Branch out of bounds to next node 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
o  Heap spray OSString objects  
o  Make few OSDictionary with OSString 
o  Trigger OSDictionary deallocation 
o  retain() -> deref next free chunk pointer 
o  Free chunk is surrounded by OSStrings 
o  retain() ->%OOB branch to next OSString node 
Getting vtable – next free node trick 
….on.32.bits.L.
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – dump over panic 
o  OSString vtable reference in OSUnserialize J 
o  We can deref any address as fake vtable ptr 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – dump over panic 
o  Crash in OSUnserializeBinaryXML 
o  Get LR register value from panic 
o  Use fake vtable to deref LR value 
o  Get panic from a watch 
o  We just dump 4 bytes of a kernel J 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – dumping kernel 
o  Use address to leak as vtable_addr - 0x10%
o  We need to tune by retain() offset in vtable 
o  Crash and get panic log 
o  Copy panic from Watch to iPhone -> Mac 
o  Parse panic, grab 4 bytes of a kernel TEXT 
o  Update address with 4 bytes delta and repeat 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – final steps 
o  Crash in OSUnserializeXML 
o  Leak opcode until ‘BL OSUnserializeBinary’ 
o  Leak OSUnserializeBinary opcodes 
o  Finally get OSString vtable offset 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – final steps 
OSString vtable offset 
OSUnserializeBinary address 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – final steps 
o  5 minutes for recover watch after crash 
o  5 minutes to fetch panic from watch 
o  2 minutes to copy to Mac and parse 
o  No way to automate a process 
o  It takes me two weeks to dump vtable 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Next step – full kernel dump 
o  Now use fake OSString obj to read kernel 
o  Read data via IORegistryEntryGetProperty 
o  Leak kernel header, calculate kernel size 
o  Dump full kernel to userland by chunks 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Next step – kernel symbolication 
o  Find and list all kexts 
o  Find sysent and resolve syscalls 
o  Find and resolve mach traps 
o  Resolve IOKit objects vtable 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Next step – setting up primitives 
o  Scan kernel dump for gadgets 
o  Set up exec primitive 
o  Set up kernel read & write primitives 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Next step – kernel structs layout 
o  Look for proc_* functions 
o  Restore proc structure layout 
o  Dump memory, check for known values 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Next step – kernel structs layout 
o  memmem string \ byte pattern 
o  + xref + instruction analysis 
o  Resolve syscalls table, mach traps table 
o  Simple instruction emulation 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Getting root and sandbox bypass 
o  Patch setreuid (no KPP J) 
o  patch ucred in proc structure in kernel 
o  patch sandbox label value in ucred 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Getting kernel task 
o  Patch task_for_pid() 
o  Or save kernel sself in task bootstrap port 
o  Read it back via task_get_special_port() 
o  Restore original bootstrap port value 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Disable codesign checks 
o  Patch _debug to 1 
o  patch _nl_symbol_ptr (got) entries 
o  Patch amfi variables 
 - cs_enforcement_disable 
 - allow_invalid_signatures 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Remount rootfs 
o  Patch __mac_mount 
o  Change flags in rootfs vnode and mount RW 
o  Patch lwvm is_write_protected check 
o  Patch PE_i_can_has_debugger in lwvm 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Spawning ssh client 
o  Compile dropbear for ARMv7k%
o  Compile basic tools package for ARMv7k 
o  Problem: More sandbox restrictions 
o  Kill WatchOS specific sandbox operations 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
 ssh connection problem… 
"awdl0/ipv6"%=%"fe80::c837:8аﬀ:fe60:90c2";%
"lo0/ipv4”%%%%%%=%"127.0.0.1";%
"lo0/ipv6"%%%%%%=%"fe80::1";%
"utun0/ipv6"%=%"fe80::face:5e30:271e:3cd3";%
o  WatchOS interfaces 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
 Watch  iPhone port forwarding 
NSDictionary *comm = @{!
@"Command" :@"StartForwardingServicePort",                            
@"ForwardedServiceName" :@"com.apple.syslog_relay",!
@"GizmoRemotePortNumber" :[NSNumber numberWithUnsignedShort: pt],!
@"IsServiceLowPriority" :@0,};!
!
AMDServiceConnectionSendMessage(serviceConnection,!
                               (__bridge CFPropertyListRef)(comm), 
  kCFPropertyListXMLFormat_v1_0);!
!
AMDServiceConnectionReceiveMessage(serviceConnection, &response, 
 (CFPropertyListFormat*)&format);!
!
NSNumber *iphone_port = response[@"CompanionProxyServicePort"];!
Thanks to Luca J 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
 ssh connection over bluetooth 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Black Hat Sound Bytes 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Watch as a spyware target 
o  Watch have access to SMS, Calls, Health%
o  Photos and emails synced to Watch 
o  Fetch GPS location from the phone 
o  Microphone usage 
o  Apple Pay J 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Dumping Messages, Contacts, Emails 
o  Just dump from sqlite DB or de-serialize data 
 private/var/mobile/Library/AddressBook/ 
 private/var/mobile/Library/NanoMailKit/ 
 private/var/mobile/Library/SMS/ 
o  Hook on fly on device sync\notification 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Dumping Calendar, Passes, pair info 
o  Just dump from sqlite DB or de-serialize data 
 private/var/mobile/Library/Health/ 
 private/var/mobile/Library/Caches/ 
 private/var/mobile/Library/Application Data/ 
o  Hook on fly on device sync\notification 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Dumping Health, Caches, Photos 
o  Just dump from sqlite DB or de-serialize data 
 private/var/mobile/Library/Health/ 
 private/var/mobile/Library/Caches/ 
 private/var/mobile/Library/Application Data/ 
o  Hook on fly on device sync\notification 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Call recording 
o  AudioToolbox.framework exists but not public 
o  Add observer on CTTelephonyCenter 
o  Catch kCTCallStatusChange in a callback 
o  Hook AudioUnitProcess function 
o  Create file via ExtAudioFileCreateWithURL 
o  Use ExtAudioFileWrite to dump call data 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
References 
o  Stefan Esser - iOS 10 - Kernel Heap Revisited 
o  Luca Todesco - com.apple.companion_proxy client 
o  Lookout - Technical Analysis of the Pegasus Exploits on iOS 
o  Siguza - tfp0 powered by Pegasus 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
@mbazaliy 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60