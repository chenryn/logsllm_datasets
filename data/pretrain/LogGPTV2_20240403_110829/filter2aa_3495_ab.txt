### July 27-30, 2017: Exploitation and Data Extraction on WatchOS

#### Heap Spray and Out-of-Bounds (OOB) Branch to vtable
- **Heap Spray**: Allocate multiple `OSString` objects.
- **Deallocate `OSString` Object**: Deallocate the `OSString` object.
- **Branch Out of Bounds**: Cause a branch out of bounds to the next node.

#### Triggering OSDictionary Deallocation
- **Allocate `OSDictionary` with `OSString`**: Create several `OSDictionary` instances containing `OSString` objects.
- **Trigger Deallocation**: Initiate the deallocation of the `OSDictionary`.
- **Retain Next Free Chunk Pointer**: Use `retain()` to dereference the next free chunk pointer.
- **Surround Free Chunk with `OSString` Objects**: Ensure the free chunk is surrounded by `OSString` objects.
- **Out-of-Bounds Branch**: Perform an out-of-bounds branch to the next `OSString` node using `retain()`.

#### Getting the vtable - Next Free Node Trick
- **Dump Over Panic**: Use the `OSString` vtable reference in `OSUnserialize` to dereference any address as a fake vtable pointer.
- **Crash in `OSUnserializeBinaryXML`**: Cause a crash and get the LR register value from the panic.
- **Use Fake vtable to Dereference LR Value**: Use the fake vtable to dereference the LR value.
- **Panic from a Watch**: Retrieve the panic log from the watch.
- **Dump Kernel TEXT**: Parse the panic log to extract 4 bytes of the kernel TEXT.

#### Dumping the Kernel
- **Leak Address**: Use the address to leak as `vtable_addr - 0x10%`.
- **Tune Retain() Offset**: Adjust the `retain()` offset in the vtable.
- **Crash and Get Panic Log**: Crash the system and retrieve the panic log.
- **Copy and Parse Panic Log**: Copy the panic log from the watch to an iPhone and then to a Mac. Parse the log to grab 4 bytes of the kernel TEXT.
- **Update Address and Repeat**: Update the address with a 4-byte delta and repeat the process.

#### Final Steps for Getting the vtable
- **Crash in `OSUnserializeXML`**: Cause a crash in `OSUnserializeXML`.
- **Leak Opcode**: Leak opcodes until reaching `BL OSUnserializeBinary`.
- **Leak `OSUnserializeBinary` Opcodes**: Extract the opcodes for `OSUnserializeBinary`.
- **Get `OSString` vtable Offset**: Finally, obtain the `OSString` vtable offset.

#### Time and Automation
- **Recovery Time**: It takes approximately 5 minutes to recover the watch after a crash.
- **Fetch Panic Log**: Another 5 minutes to fetch the panic log from the watch.
- **Parse and Copy**: About 2 minutes to copy the log to a Mac and parse it.
- **Manual Process**: The process cannot be automated and took two weeks to complete.

#### Full Kernel Dump
- **Read Kernel via Fake `OSString` Object**: Use a fake `OSString` object to read the kernel.
- **Read Data via `IORegistryEntryGetProperty`**: Leverage `IORegistryEntryGetProperty` to read data.
- **Leak Kernel Header and Calculate Size**: Extract the kernel header and calculate the kernel size.
- **Dump Full Kernel**: Dump the full kernel to userland in chunks.

#### Kernel Symbolication
- **List All kexts**: Identify and list all kernel extensions (kexts).
- **Resolve Syscalls and Mach Traps**: Find and resolve syscalls and mach traps.
- **Resolve IOKit Objects vtable**: Determine the vtable for IOKit objects.

#### Setting Up Primitives
- **Scan for Gadgets**: Scan the kernel dump for useful gadgets.
- **Set Up Exec Primitive**: Establish an exec primitive.
- **Set Up Kernel Read & Write Primitives**: Set up primitives for reading and writing to the kernel.

#### Kernel Structs Layout
- **Proc Functions**: Look for `proc_*` functions.
- **Restore Proc Structure Layout**: Restore the layout of the `proc` structure.
- **Dump Memory and Check Values**: Dump memory and check for known values.
- **Memmem and Xref Analysis**: Use `memmem` to find byte patterns, perform xref analysis, and simple instruction emulation.
- **Resolve Tables**: Resolve the syscalls table and mach traps table.

#### Root Access and Sandbox Bypass
- **Patch `setreuid`**: Patch the `setreuid` function (no KPP).
- **Patch `ucred` in `proc` Structure**: Modify the `ucred` field in the `proc` structure.
- **Patch Sandbox Label Value**: Change the sandbox label value in `ucred`.

#### Getting Kernel Task
- **Patch `task_for_pid`**: Modify the `task_for_pid` function.
- **Save Kernel Self in Task Bootstrap Port**: Save the kernel self in the task bootstrap port.
- **Read Back via `task_get_special_port`**: Use `task_get_special_port` to read it back.
- **Restore Original Bootstrap Port Value**: Restore the original bootstrap port value.

#### Disable Codesign Checks
- **Patch `_debug` to 1**: Set the `_debug` variable to 1.
- **Patch `_nl_symbol_ptr` (GOT) Entries**: Modify the `_nl_symbol_ptr` (GOT) entries.
- **Patch AMFI Variables**:
  - `cs_enforcement_disable`
  - `allow_invalid_signatures`

#### Remount Rootfs
- **Patch `__mac_mount`**: Modify the `__mac_mount` function.
- **Change Flags in Rootfs Vnode**: Change the flags in the rootfs vnode to mount it read-write.
- **Patch `lwvm is_write_protected` Check**: Modify the `is_write_protected` check in `lwvm`.
- **Patch `PE_i_can_has_debugger` in `lwvm`**: Modify the `PE_i_can_has_debugger` function in `lwvm`.

#### Spawning SSH Client
- **Compile Dropbear for ARMv7k**: Compile Dropbear for the ARMv7k architecture.
- **Compile Basic Tools Package for ARMv7k**: Compile a basic tools package for ARMv7k.
- **Sandbox Restrictions**: Address additional sandbox restrictions.
- **Kill WatchOS Specific Sandbox Operations**: Remove specific sandbox operations for WatchOS.

#### SSH Connection Problem
- **WatchOS Interfaces**:
  - `awdl0/ipv6`: `fe80::c837:8аﬀ:fe60:90c2`
  - `lo0/ipv4`: `127.0.0.1`
  - `lo0/ipv6`: `fe80::1`
  - `utun0/ipv6`: `fe80::face:5e30:271e:3cd3`

#### iPhone Port Forwarding
- **Port Forwarding Setup**:
  ```objc
  NSDictionary *comm = @{
    @"Command" : @"StartForwardingServicePort",
    @"ForwardedServiceName" : @"com.apple.syslog_relay",
    @"GizmoRemotePortNumber" : [NSNumber numberWithUnsignedShort: pt],
    @"IsServiceLowPriority" : @0
  };

  AMDServiceConnectionSendMessage(serviceConnection, (__bridge CFPropertyListRef)(comm), kCFPropertyListXMLFormat_v1_0);
  AMDServiceConnectionReceiveMessage(serviceConnection, &response, (CFPropertyListFormat*)&format);

  NSNumber *iphone_port = response[@"CompanionProxyServicePort"];
  ```

#### SSH Connection Over Bluetooth
- **Establish SSH Connection Over Bluetooth**: Details on setting up an SSH connection over Bluetooth.

#### Black Hat Sound Bytes
- **Watch as a Spyware Target**:
  - **Access to SMS, Calls, Health**: The watch has access to SMS, calls, and health data.
  - **Photos and Emails Synced**: Photos and emails are synced to the watch.
  - **GPS Location**: Fetch GPS location from the phone.
  - **Microphone Usage**: Microphone usage.
  - **Apple Pay**: Apple Pay functionality.

#### Dumping Data
- **Messages, Contacts, Emails**:
  - **Dump from SQLite DB or Deserialize Data**: Extract data from the following directories:
    - `private/var/mobile/Library/AddressBook/`
    - `private/var/mobile/Library/NanoMailKit/`
    - `private/var/mobile/Library/SMS/`
  - **Hook on Device Sync/Notification**: Hook into device sync and notification events.

- **Calendar, Passes, Pair Info**:
  - **Dump from SQLite DB or Deserialize Data**: Extract data from the following directories:
    - `private/var/mobile/Library/Health/`
    - `private/var/mobile/Library/Caches/`
    - `private/var/mobile/Library/Application Data/`
  - **Hook on Device Sync/Notification**: Hook into device sync and notification events.

- **Health, Caches, Photos**:
  - **Dump from SQLite DB or Deserialize Data**: Extract data from the following directories:
    - `private/var/mobile/Library/Health/`
    - `private/var/mobile/Library/Caches/`
    - `private/var/mobile/Library/Application Data/`
  - **Hook on Device Sync/Notification**: Hook into device sync and notification events.

#### Call Recording
- **AudioToolbox Framework**: Use the `AudioToolbox.framework` (though not public).
- **Add Observer on `CTTelephonyCenter`**: Add an observer to catch `kCTCallStatusChange` in a callback.
- **Hook `AudioUnitProcess` Function**: Hook the `AudioUnitProcess` function.
- **Create File via `ExtAudioFileCreateWithURL`**: Create a file using `ExtAudioFileCreateWithURL`.
- **Dump Call Data via `ExtAudioFileWrite`**: Use `ExtAudioFileWrite` to dump call data.

#### References
- **Stefan Esser**: "iOS 10 - Kernel Heap Revisited"
- **Luca Todesco**: "com.apple.companion_proxy client"
- **Lookout**: "Technical Analysis of the Pegasus Exploits on iOS"
- **Siguza**: "tfp0 powered by Pegasus"

#### Contact
- **@mbazaliy**

This document provides a detailed overview of the steps and techniques used to exploit and extract data from a WatchOS device, including heap spraying, vtable manipulation, kernel dumping, and various data extraction methods.