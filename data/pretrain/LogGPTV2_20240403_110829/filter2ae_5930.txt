# 绕过Windows 10上的LSA保护（PPL）而不使用Mimikatz

##### 译文声明
本文是翻译文章，原文作者为 redcursor，来源：redcursor.com.au。译文仅供参考，具体内容及含义以原文为准。

从 Windows 8.1 和 Server 2012 R2 开始，Microsoft 引入了一项名为 LSA 保护的功能。该功能基于 PPL 技术，这是一种纵深防御的安全机制，旨在防止非管理员且不具备 PPL 权限的进程通过 `OpenProcess` 等函数篡改 PPL 进程的代码和数据。

许多人对这一技术存在误解，认为 LSA 保护可以阻止利用 SeDebug 或管理员权限从内存中提取凭证的攻击，例如使用 Mimikatz 提取凭证。实际上，LSA 保护并不能完全阻止这些攻击，它只是增加了执行这些攻击的难度，需要进行一些额外的操作。

要绕过 LSA 保护，您有以下几种选择：
1. 删除 `RunAsPPL` 注册表项并重新启动（这是最不推荐的方法，因为您将丢失内存中的所有凭据）。
2. 通过修改 EPROCESS 内核结构，在 LSASS 进程上禁用 PPL 标志。
3. 直接读取 LSASS 进程内存的内容，而不使用 `OpenProcess` 函数。

后两种方法需要具备读写内核内存的能力。实现这一点最简单的方法是加载驱动程序。虽然您可以创建自己的驱动程序，但我决定利用 MSI Afterburner 的 `RTCore64.sys` 驱动程序。我选择该驱动程序是因为它已签名，并允许读写任意内存，感谢 MSI。

我选择了第二种方法，因为删除 PPL 标志后可以使用现成的工具（如 Mimikatz）从 LSASS 中转储凭证。为此，我们需要找到 LSASS EPROCESS 结构的地址，并将 `SignatureLevel`、`SectionSignatureLevel`、`Type`、`Audit` 和 `Signer` 五个字段的值修改为零。

`EnumDeviceDrivers` 函数可用于泄漏内核基地址。这可以用来定位 `PsInitialSystemProcess`，它指向系统进程的 EPROCESS 结构。由于内核将进程存储在链表中，因此 EPROCESS 结构的 `ActiveProcessLinks` 成员可用于遍历链表并查找 LSASS。

查看 EPROCESS 结构（见下图2），我们可以看到需要修改的五个字段通常按连续的四个字节对齐。这使我们可以通过单个四字节写入来修改 EPROCESS 结构，如下所示：

```c
WriteMemoryPrimitive(设备, 4, CurrentProcessAddress + SignatureLevelOffset, 0x00);
```

一旦删除了 PPL 标志，所有传统的转储 LSASS 的方法都可以使用，例如 Mimikatz 和 MiniDumpWriteDump API 调用等。

用于执行此攻击的 C/C++ 工具可在 [GitHub](https://github.com/RedCursorSecurityConsulting/PPLKiller) 上找到。我仅在 Windows 1903、1909 和 2004 版本上进行了测试，但它应该适用于所有版本的 Windows。

希望以上信息对您有所帮助。