and describe how we enforce them.
• Security requirement 1: The data guard for a dynamic
data object Di must be set up before any write instruc-
tion on Di is executed. Otherwise, any modiﬁcation
done before the setup cannot be veriﬁed.
• Security requirement 2: A corrupted data guard must
not be recoverable even if the attacker fully controls
the system after corruption.
• Security requirement 3: The attester must have all un-
corrupted data guard values to pass the attestation. The
attacker cannot compute a valid answer without a com-
plete set of uncorrupted data guards.
3.3.1 Security Requirement 1
The data guard for data object Di must be set up before any
write instruction on Di is executed. Otherwise, the attacker
may overﬂow Di right before its data guard is in place. As
a result, we will not be able to notice such overﬂow. There
are three types of data objects: global data, local data, and
heap data. Accordingly, there are three types of data guards:
global guards, local guards, and heap guards.
For global guards, we set their values at the beginning
of the main function, i.e., before any other statement of the
originalprogram is executed. For local guards inside a func-
tion f, we set their values at the function entry, i.e., before
any other function statement is executed. For heap guards,
remember that we wrap the memory allocation functions
and allocate memory to the data guard inside the wrapper
function. Thus, we set their initial values during the alloca-
tion. Function parameters can be seen as one type of data
objects. When a function is called, the actual parameter
values are pushed into stack. However, we do not add data
guards to these parameter data in stack as in C language, pa-
rameter passing itself does not generates overﬂow in stack.
3.3.2 Security Requirement 2
Once an attacker corrupted a data guard in a sensor node C,
the original value of the data guard must not be recoverable.
One way to achieve this is to let C request a fresh secret data
guard value from the veriﬁer each time it needs to set up a
new data guard. Thus, a data guard does not depend on any
other information in the attester’s system. If it is corrupted,
the attacker cannot restore it. However, note that a lot of
data guards are created and destroyed dynamically. This
simple method will therefore introduce substantial commu-
nication cost and is thus not feasible.
In this paper, we
propose a secure data guard value assignment method as
shown in Algorithm 1. It satisﬁes the requirement 2 (also
the requirement 3 as we will discuss in next subsection) and
also greatly reduces the communication cost.
When an attester node C needs to set up its ﬁrst data
guard, it sends a request to the veriﬁer. The veriﬁer sends
back a secret value e and a nonce value nonce. Node C
computes a hash value L1 = H(e, nonce, 1), where H is
a secure one-way hash function and the integer 1 is a se-
quence number maintained at the attester node to track how
many data guards have been created. After getting the hash
result, C will delete e and nonce from memory immedi-
ately. From now on, it is impossible to restore L1 if it is
corrupted since e and nonce is no longer available. At this
point, we only have one data guard in the system, and its
value c(1) = L1.
When C needs to set its second data guard, it ﬁrst re-
trieves the most recently created data guard (i.e., c(1) if not
corrupted) in memory. Then it updates the ﬁrst data guard
by computing c(1) = H(L1, 2), sets the value of the sec-
ond data guard c(2) to H(L1, −2), and erases the value L1
in memory. Here 2 is the sequence number indicating that
there are totally two data guards created so far.
!"
!"#$
!#
!"%$
!$
!"&$
!"'$
Figure 1. Computation of data guards. The
leaf nodes are used as the data guards; the
root and all internal nodes are deleted once
the computation is done.
In general, when node C needs to set its i-th data guard
(i > 1), it retrieves the value of the (i − 1)-th data guard
c(i − 1), which equals Li−1 at this point, updates c(i − 1)
to H(Li−1, i), sets the value c(i) of the new data guard to
Li = H(Li−1, −i), and erases Li−1 from memory. Figure
1 shows a tree explaining how data guards are computed
when 4 data guards are needed in the system. Each leaf or
internal node in the tree can be directly computed from its
parent node using the one-way hash function. Since the root
and all internal nodes are erased from memory, an attacker
has no way to recover a corrupted data guard. Therefore,
requirement 2 is satisﬁed.
Please note that we will not delete any data guard created
at runtime unless we need to re-initialize all data guards.
A potential problem is that a lot of program data objects
are dynamically created and destroyed. This will bring a
challenge to the management of the data guards. We will
revisit this issue in Section 3.4.
3.3.3 Security Requirement 3
The attacker must be forced to use all data guard values
to calculate the integrity evidence during the attestation.
: seq
input
output : updated guard value
procedure data guard assign(unsigned int seq)
if (seq == 0) then
{e, nonce} = get secret data from veriﬁer();
seq++;
v = hash(e, nonce, seq); erase(e, nonce);
set data guard value(v);
v = readout last data guard value();
seq++;
update last data guard value(hash(v, seq));
set data guard value(hash(v, -seq));
end
Algorithm 1: Data Guard Assignment Algorithm
1
2
3
4
5
6
7
8
9
10
11
12
13
end
else
For example, if there are four data guards in the system
as shown in Figure 1, the attacker cannot cheat about how
many data guards in the system, assuming the node is com-
promised, and cannot pass attestation by only using some
of them. In this section, we will show how this is achieved
using Algorithm 1. We ignore the communication cost for
now. We will show later how communication cost can be
reduced in our ﬁnal protocol.
Suppose at moment t, a sensor node has m (m > 1) data
guards {c(1), c(2), ..., c(m)}. From Algorithm 1, we have:
c(k) =!H(Lk, k),
Lk = H(Lk−1, −k), k = m
1 ≤ k name, s);
free(p);
return 0;
}
int main(int argc, char * argv[]){
char buf[10];
struct info person;
strcpy(person.name, "Alice");
foo(argv[1]);
return 0;
our idea to achieve the ﬁrst security requirement ensures
that the adversary cannot overﬂow the data before the data
guard is created. Our idea to achieve the second security
requirement ensures that the adversary cannot recover any
of the corrupted data guard values since they have been
changed before he takes control of the victim and the infor-
mation needed to recover the corrupted data guard values
are deleted right after they are created. Finally, our idea to
achieve the third security requirement ensures that the at-
tacker cannot forge a correct answer without a complete set
of correct data guards. In summary, we can conclude that
our approach can detect any software attack that starts from
overﬂowing program data objects.
4 Implementation
We use a sample C program in Figure 2 to show how our
attestation scheme works. For nesC programs, we note that
they are transformed to C programs by nesC compiler. As
a result, we can directly apply the tool on the C program
produced by the nesC compiler.
4.1 Program Transformation
We transform a program and instrument attestation se-
mantics into it. For example, the program P in Figure 2 is
transformed into a new version in Figure 3. We use JavaCC
to build the abstract syntax tree (AST) and symbol table of
P. Then we visit the AST nodes and take actions accord-
ingly. For a data declaration, we instrument data guard dec-
larations around it. For function entry, we instrument nec-
essary data guard initialization statements (att addguard).
For function return, we instrument data guard reservation
statements (att reserveguard). For certain memory ma-
nipulation function calls, we transform them to our wrap-
per functions. For example, for malloc, we wrap it to
att malloc that allocates n bytes more memory than re-
quired, where n is the size of a data guard. Inside this wrap-
per function, the new data guard is created and added to the
data guard list. For f ree, we wrap it to att f ree, in which
we backup the data guard value into the data guard list be-
fore freeing the memory.
The struct type data object must be handled properly
since it contains data guards inside. First, data guards in-
side a struct object must be initialized and reserved care-
fully. At the function entry point, we check if the function
contains local struct type data (for main function, we also
check global data). If it does, we look up the symbol ta-
ble to ﬁnd the data guards inside this struct and instrument
initialization code for them. For example, the main func-
tion in Figure 3 has a struct type person variable. Thus
we instrument initialization code for person.guard1 and
person.guard2 in function main. Also, when the malloc
function is used to allocate memory to a struct pointer, we
also lookup the symbol table to get the data guards of the
struct and add initialization code right after the malloc call.
For example, in Figure 3, the variable p in function f oo
is a struct pointer. Thus, we add initialization code for
p → guard1 and p → guard2 right after malloc. If the
f ree function involves a struct pointer, we instrument data
guard reservation code before f ree as the reservation code
for p → guard1 and p → guard2 in the f oo function in
Figure 3.
int guard0;
char key[20];
struct info{
int guard1;
char name[10];
int guard2;
char address[20];
};
int foo(char * s){
int guard3;
struct info * p;
p=att_malloc(sizeof(struct info));
att_addguard((char*)&guard3);