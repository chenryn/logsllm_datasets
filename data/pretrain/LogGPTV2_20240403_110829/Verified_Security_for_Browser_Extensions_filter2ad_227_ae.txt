Certainly! Here is the optimized and more professional version of your text:

---

Polymorphic Propositions
------------------------

The system also supports the definition of polymorphic propositions. For instance, the `FlowsFrom` proposition at line 8 relates a value `v1` of any type `T1` to another value `v2` of some other type `T2`, indicating that `v1` was derived from `v2`. The `CanFlowTo` proposition is similar.

### The DOM API (Partial)

```plaintext
1 module DOM
2 type doc  (* abstract type of documents *)
3 type elt  (* abstract type of DOM element nodes *)
4 (* DOM metadata predicates *)
5 type DocDomain :: doc -> string -> bool
6 type EltDoc :: elt -> doc -> bool
7 type EltTagName :: elt -> string -> bool
8 type EltAttr :: elt -> string -> string -> bool
9 type FlowsFrom :: forall T1 T2. T1 -> T2 -> bool
10 (* DOM permission predicates *)
11 type CanAppend :: elt -> elt -> bool
12 type CanEdit :: elt -> bool
13 type CanReadAttr :: elt -> string -> bool
14 type CanWriteAttr :: elt -> string -> string -> bool
15 type CanFlowTo :: forall T1 T2. T1 -> T2 -> bool
16 (* Metadata queries *)
17 val getChild : p:elt -> int -> elt option
18 val parentNode : ch:elt -> elt option
19 val getEltById : d:doc -> x:string -> elt option
20 val tagName : ce:elt -> string
21 (* Protected access to data *)
22 val getAttr : e:elt -> k:string -> string option
23 val setAttr : e:elt -> k:string -> v:string -> unit
24 val getValue : e:elt -> string option
25 val createElt : d:doc -> t:string -> elt
26 val appendChild : p:elt -> c:elt -> unit
```

Lines 16-21 show a sampling of functions that extensions can use to inspect the structure of a page. Each function is given a refined type, where the refinement on the return value corresponds to a post-condition established by the function. Lines 24-31 show functions that provide extensions with access to security-sensitive data, such as the attributes of an element. The types of these functions are refined with both pre- and post-conditions. Pre-conditions correspond to authorization privileges that the caller must possess to access, for example, an attribute, while post-conditions record properties of the page structure.

### Understanding Pre- and Post-Conditions

At one level, pre- and post-conditions can be understood as predicates that relate the arguments and return value of each function. However, a more precise interpretation is in terms of the dynamic semantics of the system. For example, consider the primitive operator `getAttr` in Figure 7. In our formal model, the reduction rule for `getAttr` is guarded by a premise that requires the proposition `CanReadAttr e k` to be derivable from the policy and the facts in the log. We capture this requirement by giving `getAttr` a type that records the corresponding `CanReadAttr e k` predicate as a pre-condition. If the policy check succeeds, `getAttr` reduces to an attribute, and importantly, records the facts `EltAttr e k v` and `FlowsFrom r e` in the log. We capture this effect on the log by giving `getAttr` a type that includes the corresponding version of these predicates in its post-condition.

### Modeling Side-Effects

With the understanding that log effects correspond to post-conditions and that policy checks in the premises of our reduction rules correspond to pre-conditions, we discuss the remaining functions in our DOM API. The function `getChild` is analogous to the operator `CAJ+DE@HA` in our formal semantics, adapted for use with a more realistic DOM. At present, our logical model of the DOM ignores the relative ordering among the children of a node—we simply record the fact that a pair of nodes are in a parent/child relationship. Enhancing this model to include ordering constraints is possible, but our examples have not required this degree of precision to state useful security policies. Extensions can traverse the DOM in both directions using `getChild` and `parentNode`. The DOM also includes a function, `getEltById`, which provides random access to nodes using node identifiers. The post-condition of this function is relatively weak, as the exact placement of the returned nodes in the DOM is undetermined.

Our API also provides functions that allow extensions to mutate the DOM. For example, using `createElt` and `appendChild`, a suitably privileged extension can alter the structure of a web page. The key point here is that we model such mutation effects purely in terms of their effects on the dynamic log. Since the log grows monotonically, a property that was once true of an `elt` remains valid in the logic even after the element is mutated.

### Example of Mutation

Concretely, suppose we have a pair of `elt` values `e1` and `e2`. In a context where `CanAppend e2` is derivable, the predicates derivable at each line are shown in comments.

```plaintext
let p1 = parentNode e1 in  (* EltParent p1 e1 *)
appendChild e2 e1  (* EltParent p1 e1 && EltParent e2 e1 *)
```

Even after `e1` has been added as a child of `e2` on the second line, the predicate `EltParent p1 e1` continues to be derivable, as it remains a ground fact in the dynamic log.

This behavior reveals two subtleties:
1. This model of side-effects rules out the possibility of strong updates or dynamic revocation. Despite this weakness, the monotonic nature of our model lends itself to verifying properties of extensions that are interleaved with arbitrary JavaScript code. By ensuring that all log effects are strictly positive formulas, we ensure that the effects of unverified JavaScript cannot undo properties established by extensions. This strict positivity condition and its corresponding monotonic behavior is a characteristic feature of ࡀ-safety, and our model of side effects is set up to precisely model this property. Additionally, the robustness of ࡀ-safety with regard to the effects of JavaScript allows extension authors (at least from a security standpoint) to be largely unconcerned with the interleavings of extension code and JavaScript, which is a significant simplification of the programming model.
2. When programming against this model, intuitions about the meaning of certain predicates, like `EltParent`, must be adjusted slightly. Specifically, we must view `EltParent` as a many-to-many relation, as illustrated in the example above, where the element `e1` can have more than one parent. As such, our logical model of the DOM is a graph recording the history of parent/child relationships between nodes.

### Safety by Typing

The listing below shows a highly simplified fragment from FacePalm, code that was presented informally in Section III. We discuss how this code is verified against the DOM API.

```plaintext
1 prop EltAncestor :: elt -> elt -> bool
2 assume ∀e1, e2. EltParent e1 e2 → EltAncestor e1 e2
3 assume ∀e1, e2, e3. EltParent e1 e2 ∧ EltParent e2 e3 → EltAncestor e1 e3
4 assume ∀(e:elt). CanReadAttr e "class"
5 assume ∀(e:elt), (p:elt). (EltAncestor e p ∧ EltTagName p "div" ∧ EltAttr p "class" "website") → CanReadValue e
6
7 let extensionCode e =
8 let t = tagName e in
9 let a = getAttr e "class" in
10 if t = "div" && a = "website"
11 then match getChild e 0 with
12 | Some c -> Some (getValue c)
13 | None -> None
14 else None
```

Lines 1–6 above show the policy used with the extension written in Fine using a collection of assumptions. The policy defines a relation `EltAncestor`, the transitive closure of `EltParent`, and grants the extension the privilege to:
1. Read the "class" attribute of every element on the page.
2. Read the contents of any sub-tree in the page rooted at a `div` node whose class attribute is "website".

Lines 7–14 show the code of the extension. At line 8, the post-condition of this function allows the Fine type checker to conclude, after line 8, that the proposition `EltTagName e t` is in the dynamic log. To check the call at line 9, we need to prove that the pre-condition `CanReadAttr e "class"` is derivable—this follows from the top-level assumptions. After line 9, we can conclude that the fact `EltAttr e "class" a` is in the dynamic log. At line 11, in the then-branch of the conditional, the type checker uses the types of the equality operation `(=):x:bool -> y:bool -> b:bool` and of the boolean operator `(&&):x:bool -> y:bool -> z:bool` to refine its information about the contents of the dynamic log. In particular, the type checker concludes that if control passes to line 11, then both `EltTagName e "div"` and `EltAttr e "class" "website"` are in the dynamic log, and, using similar reasoning, it concludes that if control passes to line 12, `EltParent e c` is in the dynamic log. Finally, at the call to `getValue c` at line 12, we need to show that the pre-condition `CanReadValue c` is derivable. Given the top-level assumptions and all the accumulated information about the contents of the dynamic log, the theorem prover Fine uses can establish this fact.

### Main Formal Result

The main formal result of this section is the following theorem. It states that a program `P` that is well-typed against an interface `I` (representing the type and value signatures in the module DOM listing), a set of assumptions representing a Datalog policy `Π`, and a set of ground facts in an abstract dynamic log `L`, is guaranteed to be ࡀ-safe.

**Theorem 1 (Type-correct programs are ࡀ-safe):**
Given a policy `Π` and its translation to a signature `Σ`; a dynamic log `L` and its translation to an environment `Γ`; such that `Σ, Γ` is well-formed (i.e., `WF(Σ, Γ)`). Then, for any assumption-free program `P` and type `τ`, if `WF(Σ, Γ) ⊢ P : τ`, then `P` is ࡀ-safe.

**Proof:**
A straightforward extension of the main soundness result of Fine, as described by Swamy et al. [31], wherein a reduction relation for Fine is given while accounting for a dynamic log of assumptions. We extend the core reduction rules with four additional cases corresponding to (E-StrEq), (E-GetAttr), (E-SetAttr), and (E-GetCh). In each case, we show that reduction preserves typing, according to the types given to the primitive operations in `I`. Finally, we appeal to a relation between first-order and Datalog derivability, showing that the former subsumes the latter.

### Experimental Evaluation

To date, we have written 17 extensions to evaluate our framework. Some of these extensions are prototypes written from scratch; others are third-party extensions that we partially ported and verified. This section summarizes these extensions, their security policies, and discusses our experience programming and verifying them in Fine. Our experience suggests that while authoring extension code is relatively easy and verification times are reasonably fast, stating precise security policies for extensions still demands a non-trivial amount of work from the programmer. We plan future work to address this.

| Name | LOC | # Assumes | Compile (s) | #Z3 q's |
|------|-----|-----------|-------------|---------|
| Magnifier | 23 | 1 | 6.0 | - |
| PrintNewYorker | 45 | 2 | 6.2 | - |
| Dictionary lookup | 70 | 3 | 6.6 | - |
| FacePalm | 142 | 5 | 10.7 | - |
| Bib Parser | 262 | 2 | 5.9 | - |

| Name | LOC | # Assumes | Compile (s) | #Z3 q's |
|------|-----|-----------|-------------|---------|
| Password Manager | 52 | 2 | - | - |
| Twitter Miner | 36 | 2 | - | - |
| Bing Miner | 35 | 4 | - | - |
| Netflix Miner | 110 | 17 | - | - |
| Glue Miner | 101 | 11 | - | - |
| News Personalizer | 124 | 7 | - | - |
| Search Personalizer | 382 | 12 | - | - |

| Name | LOC | # Assumes | Compile (s) | #Z3 q's |
|------|-----|-----------|-------------|---------|
| Bookmarking | 19 | 1 | - | - |
| Gmail Checker Plus | 43 | 1 | - | - |
| JavaScript Toolbox | 19 | 1 | - | - |
| Short URL Expander | 22 | 1 | - | - |
| Typography | 44 | 1 | - | - |
| **TOTAL** | **1,529** | - | - | - |

---

This version of the text is more structured, clear, and professional, making it easier to read and understand.