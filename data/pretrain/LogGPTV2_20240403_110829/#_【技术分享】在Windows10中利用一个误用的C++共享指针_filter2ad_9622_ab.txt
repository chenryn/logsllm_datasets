### 优化后的文本

#### 0x04 内存泄漏与控制流程
在进行内存泄漏测试时，我们使用了7-9个`friends`对象。通过这种方式，我们可以获取一些关键信息。例如，在调试过程中，当断点命中时，我们可以通过查看寄存器和堆内存来提取有用的数据。

```plaintext
0:004> g
Breakpoint 0 hit
winworld!Person::printInfos:
00007ff7`9b9f0890 4c8bdc mov r11,rsp
0:000> dq rcx
000001cf`94daea60 00007ff7`9b9ef700 000001cf`94d949b0
000001cf`94daea70 000001cf`94d94a20 000001cf`94d94a40
...
```

在这个例子中，`rcx`寄存器指向一个堆内存地址，进一步分析该地址可以发现更多的结构信息。例如，堆中的某个地址指向了一个字符串指针：

```plaintext
000001cf`94d949e0 000001cf`94d99030 000001cf`94d912e0 # string pointer
000001cf`94d949f0 000001cf`94db4cf0 000001cf`94d91180 # string size
```

通过这种方式，我们可以泄漏出`winworld`模块中的虚表地址以及其他堆内存地址。然而，由于某些分配可能会发生，有时会导致泄漏不成功。尽管如此，Windows上的堆和栈随机化仅在每次启动时发生一次，因此我们可以复用已经泄漏的模块基址。

**注意事项：**
- 在开发Windows利用时，不要将二进制文件放在Linux主机共享中，这会导致每次执行都随机化。

#### 0x05 绕过CFG
CFG（Control Flow Guard）是微软的一种控制流完整性方案，它要求所有非直接调用必须指向函数开头。在Windows 10中，这会调用`ntdll!LdrpValidateUserCallTarget`来验证指针是否是一个有效的函数入口点。

**CFG的优势：**
- 能够强制中断非法程序，提高安全性。

**CFG的缺陷：**
1. 允许的目标集合仍然较大。
2. 不能保护栈，因为返回地址不是函数开头。
3. 如果加载了一个没有使用CFG编译的模块，该模块的所有地址都是允许的。

在本文中，我们利用`std::string`属性实现了任意读写，并通过手动泄漏/写栈的方式绕过了CFG。虽然目前还不知道栈或堆的确切位置，但我们可以通过喷射字符串来泄漏其他库的地址。

#### 0x06 泄漏其他库
通过二进制基址和大量`persons`字符串的喷射，我们可以泄漏任意内存地址。具体来说，我们可以通过构造一个`std::string`指向特定地址来泄漏`ucrtbase.dll`和`ntdll.dll`的地址。

例如：
```plaintext
0:000> dps winworld+162e8 L1
00007ff7`9b9f62e8 00007ffa`86d42360 ucrtbase!strtol
0:000> dps winworld+164c0 L2
00007ff7`9b9f64c0 00007ffa`89b164a0 ntdll!LdrpValidateUserCallTarget
00007ff7`9b9f64c8 00007ffa`89b164f0 ntdll!LdrpDispatchUserCallTarget
```

通过这些泄漏，我们可以覆盖`onEncounter`方法指针，从而触发堆溢出并进一步控制程序。

#### 0x07 泄漏栈
为了找到栈指针，我们可以从`ntdll`中获取PEB（Process Environment Block）的指针。然而，在x64架构中，PEB结构不包含指向TEB（Thread Environment Block）的指针。

最近的研究表明，在进程初始化期间，可能会有一些栈数据被无意复制到堆中。我们可以在堆中寻找隐藏的栈指针。例如：

```plaintext
0:001> !address
...
BaseAddress      EndAddress+1        RegionSize     Type       State                 Protect             Usage
--------------------------------------------------------------------------------------------------------------------
3b`b6cfb000       3b`b6d00000        0`00005000 MEM_PRIVATE MEM_COMMIT  PAGE_READWRITE                     Stack
...
0:001> !heap
Heap Address NT/Segment Heap 17c262d0000 NT Heap
17c26120000 NT Heap
0:001> !address 17c262d0000 Usage: Heap
Base Address: 0000017c`262d0000
End Address: 0000017c`26332000
...
```

通过这种方式，我们可以找到隐藏在堆中的栈指针，从而进一步控制程序。