### 优化后的文本

不幸的是，该方法仍然无法成功，因为开发者已经预见到了这种情况。在分析函数体时，所有参数的值将被设置为 `null`，从而覆盖变量的初始值。部分相关代码如下所示：

```javascript
node.params.forEach(function(key) {
    if (key.type === 'Identifier') {
        vars[key.name] = null;
    }
});
```

这段代码会处理定义该函数的AST节点，遍历每个类型为 `Identifier` 的参数，提取其名称并将对应的 `vars` 属性设置为 `null`。尽管上述代码看起来是正确的，但它忽略了一个关键问题：并没有考虑所有可能的情况。如果某个参数不是 `Identifier` 类型，会发生什么？修复代码没有采用白名单机制，而是采用了黑名单机制，即忽略非 `Identifier` 类型的参数并继续执行剩余代码。这意味着，如果我构造的节点类型与 `Identifier` 不同，那么该变量的值就不会被覆盖，因此可以使用其初始值。此时，我确信找到了一个非常重要的突破口：只需设法使 `key.type` 的值不同于 `Identifier` 即可。

前面提到，`static-eval` 使用了 `esprima` 库来解析输入的代码。根据相关文档，`esprima` 完全支持 ECMAScript 标准。ECMAScript 类似于 JavaScript 的另一种表示法，但具有更多功能且语法更加友好。

ECMAScript 添加的一个重要功能是 **函数参数解构**。借助此功能，以下 JavaScript 代码可以正常运行：

```javascript
function fullName({ firstName, lastName }) {
    return firstName + " " + lastName;
}
console.log(fullName({ firstName: "John", lastName: "McCarthy" }));
```

这里的函数参数定义中包含花括号，并不意味着该函数接受两个参数 `firstName` 和 `lastName`，而是只接受一个对象类型的参数，该对象包含 `firstName` 和 `lastName` 属性。上面的代码等同于：

```javascript
function fullName(person) {
    return person.firstName + " " + person.lastName;
}
console.log(fullName({ firstName: "John", lastName: "McCarthy" }));
```

通过检查 `esprima` 生成的 AST（我使用了 [这款工具](http://esprima.org/demo/parse.html)），可以看到这种新的语法可以让函数参数的 `key.type` 值不等于 `Identifier`。因此，`static-eval` 在覆盖变量时不会处理这些参数。利用这种方法，当执行以下表达式时：

```javascript
(function({ book }) { return book.constructor })({ book: "".sub })
```

`static-eval` 将使用 `book` 的初始值（这是一个对象），然后我们可以创建函数。当函数被调用时，`book` 变成一个函数，从而返回函数的 `constructor`。现在，我确实找到了一种绕过方法！

之前的表达式返回了函数的 `constructor`，所以我只需要调用 `constructor` 来创建恶意函数，然后再调用新创建的函数即可：

```javascript
(function({ book }) { return book.constructor })({ book: "".sub })("console.log(global.process.mainModule.constructor._load('child_process').execSync('id').toString())")()
```

我在本地环境中安装了最新版的 `static-eval` 并测试了这个表达式，结果符合预期。任务完成！我找到了一种绕过 `static-eval` 库的方法，能够在使用该库的目标主机上执行代码。唯一的条件是需要知道某个变量名的值不是函数，并且该变量包含 `constructor` 属性。字符串、数字、数组和对象都满足这些条件，因此这对我们来说并不困难。我只需要在我测试的网站上验证这一点，确认目标存在 RCE 利用点即可。但事情真的那么简单吗？

## 六、无法在目标环境中生效

遗憾的是，即使我找到了优雅且可行的绕过方法，但在测试的目标站点上却无法使用这种技术。唯一的要求是我们要掌握某个变量名的值不是函数，但实际上我无法成功利用，原因较为复杂。

背景介绍：该网站并没有直接使用 `static-eval` 库，而是通过 `jsonpath` npm 库来使用目标库。JSONPath 是类似于 XPath 的查询语言，但用于处理 JSON 文档而非 XML 文档，最早于 2007 年问世（参考 [此处文章](https://goessner.net/articles/JsonPath/)）。

阅读 JSONPath 文档后，我发现该项目缺乏明确的规范，实现的功能显得有些随意。不幸的是，NodeJS 生态系统中充斥着类似的库。

JSONPath 具有一个过滤器表达式功能，可以过滤匹配给定表达式的文档。例如，可以使用 `$.store.book[?(@.price < 10)].title` 来筛选价格低于 `$10` 的书籍并获取标题。`jsonpath` npm 库使用 `static-eval` 来计算括号之间的表达式。我测试的站点允许我指定 JSONPath 表达式，然后使用该库解析表达式，从而实现 RCE。

仔细观察上面的 JSONPath 表达式，可以看到传递给 `static-eval` 的表达式为 `@.price < 10`。根据文档描述，`@` 是包含待过滤文档的一个变量（通常是一个对象）。不幸的是，JSONPath 开发者选择了 `@` 这个符号。根据 ECMAScript 规范，该符号并不是有效的变量名。为了让 `static-eval` 能够正常工作，开发者修改了 `esprima` 代码，使其能够将 `@` 当作合法的变量名。

当我们在 `static-eval` 中创建匿名函数时，匿名函数会被嵌入到另一个函数中，后者将其作为已定义的变量参数使用。因此，如果我在 JSONPath 过滤器表达式中创建一个匿名函数，它将创建一个包含该函数的函数，并接受名为 `@` 的参数。程序会直接调用 `constructor` 来完成该操作，但由于之前对 `esprima` 的补丁，当定义函数时会抛出一个无法规避的错误。这是该库的一个 bug，导致我们无法在过滤器表达式中定义函数（无论是恶意函数还是其他函数）。因此，本文介绍的绕过技术无法适用于该库。

由于开发者在目标库中使用了 `@` 作为变量名，而该符号在 JavaScript 中不是有效变量名，因此我无法在目标站点中利用 RCE 漏洞，也无法获得四位数的漏洞赏金。为什么开发者不使用 `_`（这是一个有效的变量名）、`document` 或 `joseph` 呢？经过这次学习，我发现了某个库中的重大漏洞，也学到了很多关于 JavaScript 的知识。

## 七、总结

尽管我没有拿到预期的赏金，但我仍然乐此不疲地与这个库进行了斗争。我也利用学到的知识绕过了另一个受限的 JavaScript 环境，并最终获得了回报。希望我能尽快公布相关研究报告。

再次感谢 Matt Austin 关于 [static-eval](https://maustin.net/articles/2017-10/static_eval) 的研究成果，如果没有他的成果支撑，我可能不会发现这个新的漏洞。

在测试目标系统方面，建议在本地环境中复现并控制系统的每个功能，这样测试起来更加自由。在本文中，我使用了一个部署了 `static-eval` 库的 Docker 实例，在此基础上尝试绕过沙箱。我的问题是，整个研究过程中仅使用了这个实例，没有验证这种技术在实际网站中的可用性。如果我先验证了这一点，可能会更早发现问题并腾出手来。这里我们可以吸取教训，不要过于抽象整个环境，需要不断测试在实际系统中的发现，而不是埋头钻到实验环境中。

最后，如果我们在审计部署类似系统的站点时，该站点会在沙箱中执行用户可控的表达式，建议大家认真分析这个环境。沙箱系统很难做到完美，特别是当沙箱能够执行动态、全功能的编程语言（如 JavaScript、Python 或 Ruby）时更是如此。当我们发现沙箱绕过漏洞时，这种漏洞往往会对包含该系统的应用造成重大影响。

## 八、时间线

- 01/02/19 – 将漏洞信息提交给 NodeJS 安全团队以及 `static-eval` 维护人员，参考 [原始报告](https://licenciaparahackear.github.io/posts/static-eval-sandbox-escape-original-writeup/)
- 01/03/19 – NodeJS 安全团队复现漏洞，告知我他们将联系程序库维护人员，如果维护人员不响应报告，则会公布安全公告
- 02/14/19 – [npmjs 网站上公布安全公告](https://www.npmjs.com/advisories/758)
- 02/15/19 – [漏洞已被修复](https://github.com/browserify/static-eval/pull/21)，发布新版程序库
- 02/18/19 – 程序库的 README 文件已更新，提到该库 [不应该](https://github.com/browserify/static-eval/pull/22/files) 作为沙箱来使用
- 02/26/19 – 发布新的 [补丁](https://github.com/browserify/static-eval/pull/23)，因为我最早的补丁有个 bug，导致 `static-eval` 仍然存在漏洞