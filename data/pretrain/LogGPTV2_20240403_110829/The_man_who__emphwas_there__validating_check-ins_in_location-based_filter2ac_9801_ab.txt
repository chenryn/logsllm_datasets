advanced detection algorithm. A check-in is accepted even
if it triggers one of the heuristics, however, it is not taken
into consideration for mayorships. In Table 1 we provide a
short description of the heuristics we discovered, along with
the threshold values after which check-ins are ﬂagged.
5.1 Service Responses
All check-ins posted by our system through the API, re-
ceive a response message. If a check-in is considered legiti-
mate, Foursquare returns a message verifying the check-in,
while ones that are considered cheating receive an error mes-
sage. By conﬁguring our users to perform speciﬁc actions
with precise timing, we can model various types of behavior.
Based on the response messages, we know when a speciﬁc
heuristic was triggered, and based on the user actions we
discover the conditions under which it happened.
GPS distance: the user’s location exceeds the maximum
acceptable distance from the venue. The distance is calcu-
lated based on the user’s coordinates sent by the application,
and the venue’s coordinates in the Foursquare database.
High speed:
the user’s speed exceeds the maximum
threshold. Speed is calculated based on the time elapsed
between the current check-in and the previous legitimate
check-in, and the distance of the respective venues.
Rapid ﬁre: the user exceeds the maximum number of
acceptable check-ins for a certain time window.
21
Heuristic
Description
Maximum check-ins
Number of check-ins
in speciﬁc time window.
User speed
GPS distance
Elapsed time and distance
traveled between check-ins.
Distance between coordinates
of user and venue.
Threshold
5 check-ins
8 check-ins
49 check-ins
90 check-ins
4 km/min
25 km/min
200 meters
Range
time ≤ 1 minute
time ≤ 15 minutes
time ≤ 24 hours
time ≤ 72 hours
dst < 100 km
dst ≥ 100 km
-
IT | IN
-
0.2% | 49%
3.0% | 37%
1.1% | 5.5%
Table 1: Detection heuristics and the respective thresholds after which check-ins are ﬂagged as cheating.
5.2 Device-based heuristics
The oﬃcial application queries the device for the GPS
coordinates, which are correlated with those of the venue.
However, in large venues, a user may be present but not
at the exact coordinates the system has registered. Addi-
tionally, cell phone GPS readings cannot always identify the
location with high accuracy, and include an “accuracy” pa-
rameter as an indication of a margin of error. Applications
can query the device if such information is needed. The
API check-in function has an optional ﬁeld for this informa-
tion. To compensate for low accuracy readings, heuristics
allow check-ins from a certain distance. While a reasonable
threshold will facilitate legitimate users, high-distance toler-
ance enables users to cheat without spooﬁng the GPS data.
To detect the threshold we conduct Experiment A:
• The system takes as input a predeﬁned list of venues
and their coordinates. After each check-in, it waits
for a speciﬁc amount of time, before the next check-in.
The amount of time is large enough, to avoid triggering
heuristics that enforce constraints on user speed.
It
calculates a set of coordinates for the user that are X
meters away from the venue, and increases X by Y
meters after every check-in. We repeat for multiple
values of X, Y .
Results were consistent across all experiments conducted
over a period of 6 months. The results from a represen-
tative experiment can be seen in Figure 1. Check-ins are
accepted from up to 200m away. Once the distance between
a user’s reported position and that of the venue exceed that
threshold, the check-in is ﬂagged as cheating and receives
the “GPS distance” error. A high threshold makes it trivial
for users to check into venues without being near them. We
discuss the accepted check-ins for over 200m in Section 5.4.
5.3 User-behavior heuristics
A series of variables, based solely on the user’s behavior,
are evaluated before a check-in is deemed legitimate.
Maximum check-ins. Foursquare sets a limit on the
number of check-ins in a given time window. To estimate
the threshold of this heuristic we setup Experiment B :
• Our system takes as input a predeﬁned list of venues
and their coordinates. It places the user at the venue’s
exact coordinates, and after each check-in, waits for X
seconds, before the next check-in.
• If a check-in receives the “rapid ﬁre” error message we
follow one of three diﬀerent strategies. Constant: fol-
low the same pattern, and sleep for X seconds after
Success
Failed
 1000
)
m
(
e
c
n
a
t
s
i
D
 100
 10
 0
 20
 40
 60
 100
 80
(#) Checkin
 120
 140
 160
 180
Figure 1: The distance between the GPS coordi-
nates of the user and the venue.
each check-in. 24h Mute: sleep for 24 hours before
attempting another check-in. Exponential Back-oﬀ :
whenever an error message is received, X is doubled.
In all 3 cases, whenever the user successfully checks-in
again, X is reset to its original value. We repeat this
procedure with diﬀerent values of X.
Table 1 summarizes our results. Diﬀerent thresholds apply
for the number of check-ins users are permitted to make in
certain time windows. Speciﬁcally, constraints are set for
prohibiting bursts of check-ins by allowing a small number
of check-ins to be posted within a time window of 15 min-
utes. Foursquare also sets a limit on the number of check-ins
a user can commit in a 24 hour period. Figure 2 shows the
results for the three approaches (marked with FS), with the
bold sections indicating successful check-ins. We can see
that all users receive errors after 49 check-ins. Foursquare
does not reset the number of check-ins for a day at a speciﬁc
moment in time, but checks them within a 24-hour sliding
window. The user that never stops bombarding the service
with check-ins can escape the ban period only for very short
time windows (the short lines in the Constant FS bar), be-
cause even check-ins that receive error messages count as
part of the 49 allowed. The user that pauses for 24h after
the ﬁrst error, escapes the ban period faster than the other
two. Foursquare also examines the check-ins committed in
a 72-hour window, and allows only 90 check-ins. Even if a
user commits 49 check-ins in the ﬁrst 24 hours, he cannot
exceed the threshold of 90 in a given 72 hour window. The 3
timing strategies used are not the most eﬃcient in regards to
attacking an LBS, but aim at revealing the detection mech-
22
4
9
C
h
e
c
k
-
i
n
s
1
7
2
C
h
e
c
k
-
i
n
s
24 Hours
24 Hours
Constant FS
Constant FB
24h Mute FS
24h Mute FB
 Back-off FS
Back-off FB
 0
 1000
 2000
Time (minutes)
Figure 2: The maximum check-ins allowed per user.
We depict three strategies. They all simulate a user
that checks in with a constant rate, until it is prohib-
ited by the service, upon which the strategy changes.
 1
 0.9
 0.8
 0.7
 0.6
F
D
C
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 25
Speed (km/min)
Success
Failure
 125
Figure 3: Speed heuristic for distances over 100km.
anism deployed by the system. In Section 7 we describe our
adaptive attack that uses a more eﬃcient timing strategy.
User speed. This heuristic measures the geographic dis-
tance traveled and the time elapsed between two consecutive
check-ins. The “high speed” error is returned when the ac-
ceptable thresholds are exceeded. This is the main heuristic
for detecting fake-location check-ins, as it is impossible to
post legitimate check-ins that exceed the thresholds set by
Foursquare. We conduct experiment C :
• Our system takes as input a predeﬁned list of venues
and a user velocity V . After each check-in, it calculates
the exact distance X to the next venue and how many
seconds T it must wait before checking into the next
venue, so the user will appear to be traveling at a speed
V . We repeat this for diﬀerent values of X and V .
We model our users to appear as traveling at any speed
we want. Depending on the value of X, Foursquare allows
diﬀerent speeds. For distances up to 100 kilometers users
are allowed to travel at 4 kilometers per minute (approxi-
mately 150 miles per hour). For any distance longer than 100
23
km, users can travel at any speed below 25 kpm (approx-
imately 932 mph) which is much faster than commercial
airplanes (that average 600 mph). Figure 3 shows the re-
sults from a representative set of experiments for distances
longer than 100 km. When conducting experiments with
user speeds over the threshold, several interspersed check-
ins are accepted. This is because Foursquare uses the last
accepted (i.e., not ﬂagged as cheating) check-in as the user’s
last location when calculating the elapsed time and traveled
distance. Thus, it perceives that it took a longer time than
it actually did to travel the distance. This results in calcu-
lating a speed that is below the threshold, and accepting the
check-in. When the speed is slightly over the thresholds, the
number of accepted and ﬂagged check-ins are almost equal.
Traveling distance constraints. We explore if any con-
straints apply for the distance users can travel. We conduct
Experiment D, which is the same as Experiment C except
that we use a list of venues, located in diﬀerent countries.
We model our user to travel right below the speed thresh-
old, at 24 kilometers per minute. At that speed, all check-ins
posted by our system were accepted, and our user covered a
distance of 36,120 kilometers (which is 90% of the circum-
ference of Earth) in 25 hours. As our user traveled steadily
for over a day, we conclude that there are no heuristics for
imposing constraints on the distance a user can cover.
History heuristics. We compare the thresholds for three
accounts with varying behavior: an account with no check-
in history, one with many legitimate check-ins and a few
that exceeded the maximum number allowed, and one that
greatly exceeded all thresholds. We repeat our previous ex-
periments with all accounts running simultaneously with the
exact same variables. Results showed that thresholds are the
same regardless of the user’s cheating history.
Cheating penalties. We also found that Foursquare
does not impose any penalties on users that have triggered
the heuristics, and no “ban” periods are enforced.
5.4 Heuristic inconsistencies
During our experiments, we detected inconsistent behav-
ior of the heuristics. In the ﬁrst case heuristics are triggered
while we remain beneath the thresholds (inconsistent trig-
gering), and in the second case their mechanisms are not
triggered by behavior that exceeds the thresholds (inconsis-
tent non-triggering). While they may not be errors of the
detection mechanism in all cases, they do present an incon-
sistent behavior in regards to the thresholds calculated based
on the extensive number of experiments.Nonetheless, we re-
frain from the standard terms of false positives and false
negatives used for evaluating detection mechanisms. The
last column of Table 1 shows the percentage of these cases.
In the user speed experiments, the ratio of inconsistently
accepted check-ins is high due to the way Foursquare cal-
culates user speed, as explained in experiment C. Here, we
omit these and present some other incidents as examples.
Inconsistent triggering (IT). In experiments with a
speed beneath the threshold (e.g., 0.26 kpm), some check-ins
received the “high speed” error. In several cases we received
the “GPS distance” error even though the user had the exact
coordinates Foursquare returns for the venue. If we imme-
diately repeated the check-in, it was deemed legitimate.
Inconsistent non-triggering (IN). In several cases our
system was able to check in our users from as far as 900m
away. While a velocity of (right below) 25 kpm was the max-
 4320
 1440
s
n
i
-
k
c
e
h
C
 720
 480
 360
 288
 240
 206
 180
 160
 144
 105
 20
Expected
Actual