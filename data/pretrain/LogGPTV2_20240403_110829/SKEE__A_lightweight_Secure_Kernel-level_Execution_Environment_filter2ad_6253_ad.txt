ARMv8 allows the OS to select which translation table
base register deﬁnes the active ASID. SKEE will enforce that
the active ASID value is associated with TTBR1. This selection
is done by the TCR, which is only accessible to SKEE. The
only change required thereafter is for the entry and exit gates to
skip the TLB invalidation. All SKEE address space translations
will be associated with ASID 0 in the TLB. Upon exiting,
SKEE will verify that the restored TTBR1 value has a non-
zero ASID ﬁeld. Hence, all SKEE cached translations are not
accessible to the kernel.
It is worth noting that in our SKEE prototype, the exit gate
was mapped as a non-global page. Nevertheless, some ARMv8
implementations might require the exit gate to be mapped as a
global page to be able to change TTBR1 value. In this case, the
exit gate should invalidate the global TLB entry corresponding
to its own virtual address. This is an extremely fast operation
when compared to invalidating the entire TLB.
On ARMv7, the solution is more complex because the
ASID is deﬁned by CONTEXTIDR. Hence, selecting the active
ASID and modifying TTBCR cannot be done in an atomic
operation. Figure 7 shows the redesigned ARMv7 switch gate
that relies on the ASID. ASID 0 is assigned to SKEE and other
ASIDs are used by the kernel.
Upon entry, CONTEXTIDR is set to 0 before switching
TTBCR to guarantee that SKEE address space entries are only
associated to that ASID. Upon exit, the kernel ASID is only
restored after TTBCR switches back to the kernel.
The kernel may also skip the step that writes
The kernel can use the newly exposed instructions that
write CONTEXTIDR to switch to ASID 0 to expose available
TLB entries that map the SKEE address space. To prevent this
scenario, a security check is added to interrupt handlers to test
the value of CONTEXTIDR. If CONTEXTIDR has a zero value,
then this attack scenario is detected and the system will stall.
to
CONTEXTIDR and switch the TTBCR directly aiming to let
SKEE’s address space mappings leak to a different ASID.
SKEE uses the security check at lines 19-22 to prevent this
because the execution will be halted before jumping to SKEE.
The same security check is added to the exit gate to
guarantee that neither writes to TTBCR or CONTEXTIDR is
maliciously used. The two checks at lines 33-36 and lines
42-45 verify CONTEXTIDR and TTBCR respectively and stall
the execution if an unexpected value is detected. Intuitively,
ﬁring an interrupt to skip the security checks will not work
due to the presence of similar check at the interrupt handler.
9
C. Kernel Monitoring and Protection
To allow effective monitoring and protection of the kernel,
SKEE provides the security tool with: 1) the ability to trap
kernel critical events, 2) the ability to access kernel memory,
and 3) the ability to control kernel memory protection.
SKEE’s control of the kernel’s virtual address space allows
it to force the kernel to trap on certain operations by modifying
the access permission of memory regions associated with these
operations. For example, all memory translation tables are
mapped read-only to the kernel. Hence, the kernel is forced to
request from SKEE to update the memory translation tables.
Similarly, hooks can be placed to intercept other events, such
as modiﬁcation of security critical data structures.
SKEE can also remove any particular privileged instruction
from the kernel code and replace it with a hook that traps to
SKEE. These hooks can be placed at kernel critical execution
paths such as interrupt handlers or system call handlers.
To conclude, the privilege allowed to SKEE is equivalent
to that allowed to virtualization based mechanisms. SKEE has
the advantage that it does not increase the size of the TCB
of commodity hypervisors. SKEE also can work on ARMv7
systems that do not support virtualization extensions.
D. Security Analysis
Throughout section IV, we discussed in detail how SKEE
achieves isolation, secure context switching and kernel moni-
toring. In this section, we ﬁrst summarize how these features
fulﬁll the required security guarantees. Afterwards, we discuss
how SKEE prevents other possible attack scenarios.
Security Guarantees: As mentioned in Section III, SKEE
provides two principal security guarantees. First, it guarantees
that the kernel cannot break the isolation. Second, it guarantees
that switching from the kernel to the isolated environment
cannot expose the address space protection.
Section IV-A shows how SKEE uses the MMU to provide
the isolation. The memory layout deﬁned by SKEE prevents
the kernel from accessing the isolated environment. Moreover,
the entire kernel address space lacks the required privileged
instructions to control the MMU to revoke this protection.
Section IV-B shows how all context switching scenarios are
atomic, deterministic and exclusive. These features combined
guarantee that the isolated environment is only accessible after
it takes control of the system. They also guarantee that this
only happens at a speciﬁc entry point and in speciﬁc execution
conditions. Hence, the kernel cannot tamper with the context
switching process to break the isolation.
Multi-core System Operations: ARM architecture speciﬁca-
tions use a separate TLB for each CPU core. Hence, SKEE and
the kernel can run simultaneously on different cores. The TLB
entries cached on one core that runs SKEE are not available
to other cores that might be running the kernel and vice versa.
Therefore, SKEE is safe to use in multi-core systems.
If a speciﬁc implementation supports a shared TLB, then
SKEE will be required to use ASIDs for isolation. As discussed
in Section IV-B3, having a separate ASID for SKEE will
prevent the kernel from accessing existing TLB entries that
map the SKEE address space.
Figure 7. A Faster SKEE Switch Gate on ARMv7
These security checks also eliminate the need for an immediate
branch to return to the kernel.
A key security issue of this technique is the presence of the
kernel address space translation entries in the TLB while SKEE
is executing. The main threat is that execution may maliciously
be diverted to the kernel code by exploiting vulnerability in
the security tool hosted by SKEE.
These are two possible solutions to prevent this threat:
1) modify the kernel address space to put the kernel code in a
non-global memory so the TLB entries are not accessible while
SKEE is running, and 2) use existing sandboxing techniques,
such as Native Client [54] and MiniBox [36], or Control
Flow Integrity (CFI) techniques, such as the CFI enforcement
initially proposed by Abadi et. al. [3] and MoCFI [20], to
prevent control ﬂow attacks against the SKEE environment.
The ﬁrst solution will add performance overhead due to
increased TLB usage to cache kernel code with multiple
ASIDs. The resulting overhead in this case will likely offset
the performance enhancement gained by avoiding the TLB
invalidation. Hence,
is not a feasible solution from the
performance perspective. The second solution is more feasible
because the code base of the security tools is smaller than
that of the kernel. Hence, implementing sandbox isolation or
CFI is feasible. Nevertheless, this solution requires techniques
orthogonal to the work presented in here. Implementing and
evaluating these techniques is out of scope of this paper.
it
10
  Side Channel Attacks: Due to the lack of hardware protection,
SKEE does not provide a guarantee against side-channel
attacks. Nevertheless, the effect of these attacks is limited to
leaking information about the SKEE environment without the
ability to alter its operations or break the isolation.
DMA Attacks: Hardware peripherals are sometimes allowed
to bypass the MMU and do Direct Memory Access (DMA)
to physical memory. This feature can be used by attackers to
read or write arbitrary memory regions. These attacks threaten
SKEE because a compromised kernel can reprogram hardware
peripherals to directly write to the SKEE address space.
On hardware platforms that support ARM System Memory
Management Unit (SMMU) [7], preventing DMA attacks
against SKEE is straightforward. SKEE is ﬁrst required to
prevent the kernel from managing the SMMU registers and
page tables using the techniques discussed in Section IV-A.
Afterwards, SKEE would use the ARM SMMU to restrict
DMA access to the isolated environment.
On hardware platforms that do not support ARM SMMU,
SKEE needs to further instrument the memory layout so that
the kernel cannot access the DMA controller of hardware
peripherals. This can be done by remove the mapping of the
particular control structure of the target device from the kernel
address space. In this case, the exact implementation will differ
according to the speciﬁcations of the used hardware platform.
Attacks against the Isolated Environment: If the kernel passes
a maliciously crafted input that exploits vulnerability in the
SKEE framework or in the hosted security tool
to hijack
SKEE’s control ﬂow, then it can use the SKEE code base to
break the protection. Nevertheless, the exact same risk faces
all kernel security monitoring and protection tools.
In fact, SKEE profoundly enhances the system security in
this case. If vulnerability exists in the hosted security tool, then
the extent of the attack will be limited to the same privilege
level of the kernel. On the other hand, if the same security
tool is hosted by the hypervisor or by TrustZone, then such
attack would have an even higher impact by compromising
these security sensitive system components.
Dynamically Generated Kernel Code: Some kernel modules,
such as BSD packet ﬁltering [38], dynamically generate kernel
code. These modules pose a threat to SKEE because they
require the kernel to have access to memory pages that are
writable and executable. Hence, they can be used to dynami-
cally generate executable privileged instructions that allow the
kernel to control the MMU.
To solve this problem, SKEE can prevent the kernel from
writing to the code pages that contain the dynamically gener-
ated code. Instead, the kernel would be required to pass the
code to SKEE so that it gets inspected ﬁrst before being written
to the executable memory ranges. SKEE would then conﬁrm
that the dynamically generated code does not have any instance
of the restricted privileged instructions.
V.
IMPLEMENTATION AND EVALUATION
We implemented two prototypes of SKEE. The ﬁrst pro-
totype was developed for the 32-bit ARMv7 architecture. It
was tested on the Samsung Note4 smartphone, which uses
Sanspdragon APQ8084 processor from Qualcomm. The sec-
ond prototype was developed for the 64-bit ARMv8 architec-
ture. It was tested on both the Samsung Galaxy S6 and the
Samsung Galaxy Note5 smartphones, which use the Exynos
7420 processor from Samsung System LSI.
In both prototypes, the kernel is modiﬁed so that the SKEE
environment is initialized during the boot up sequence. This
includes creating a new memory translation tables for SKEE
as well as modifying the kernel’s memory translation tables to
exclude the SKEE address space. This step is trusted because
SKEE assumes the presence of secure boot protection.
The kernel is modiﬁed to place hooks upon modifying
memory translation tables or MMU control registers. The
hooks jump to SKEE through the switch gate. The MMU
control registers emulated by SKEE include translation table
base, context ID and vector base address registers. SKEE does
not allow these operations to be carried out by the kernel;
Bypassing these hooks will only cause the system to stop
functioning properly. It is worth noting that the kernel disables
the MMU when the CPU core is coming in and out of the
sleep mode. Hence, the sleep/wake up sequence needs to be
modiﬁed to go through SKEE to guarantee that no attack code
can be launched while the MMU is disabled.
SKEE must conﬁrm that translation table updates and con-
trol register modiﬁcations requested by the kernel do not com-
promise the address space isolation. The veriﬁcation technique
to be used is out of the scope of this paper. Existing techniques,
such as TZ-RKP [11], can be used for this purpose. In order
to understand the bare SKEE overhead as well as the overhead
with security checks, we ran two groups of experiments. In the
ﬁrst group, SKEE emulates requests received from the kernel
without security checking. In the second group, SKEE checks
that the emulated requests do not modify the memory layout
in a way that compromises the isolation.
A. Overhead of Emulating System Events
In the ﬁrst group of experiments, we measured the overhead
of emulating system events using SKEE, which represents
the minimum overhead required to create SKEE’s isolated
environment on any system. In this group of experiments,
SKEE does not do any veriﬁcation on the emulated system
events. It is important to measure the security impact of bare
SKEE implementation without security checks or any hosted
security tools for two main reasons.
The ﬁrst is to measure the cost of running security tools
inside SKEE versus the cost of running the same security
tools without SKEE’s protection. Since SKEE runs in the
normal world alongside the kernel, the performance impact
of executing code inside or outside the isolated environment
is the same. Hence, the real performance impact is the time
added to enter to and exit from the isolated environment.
The second is that there is a plethora of system monitoring
and protection tools. These tools can range from simple
boundary checks that virtually add no overhead to complex
intrusion detection systems that require extensive processing.
Hence, it is important to measure the bare overhead of creating
SKEE’s isolated environment to be able to extrapolate the
performance cost of hosting any security tool inside SKEE.
11
Table II.
SWITCHING TIME
Table IV.
SKEE BENCHMARK SCORES ON ARMV8
Processor
ARMv7
ARMv7 (No TLB invalidation)
ARMv8
ARMv8 (No TLB invalidation)
Average Cycles
868
550
813
284
The experiments presented in this section were done us-
ing both 32-bit Samsung Galaxy Note4 and 64-bit Samsung
Galaxy S6 smartphones. We created three custom images for
each device: a non-modiﬁed Android system, a test system
that supports SKEE using TLB invalidation and a test system
that supports SKEE using ASID protection. The target OS
was Android Lollipop version 5.0, which ran on Linux kernel
version 3.10.61.
Overhead of Switching to SKEE: The ﬁrst experiment is
measuring the execution time needed for context switching.
In this experiment, we used both the system that uses TLB
invalidation and the system that relies on ASID. We used ARM
cycle count register (CCNT) to measure the full round trip from
the kernel to SKEE.
Table II shows the average number of cycles needed to
do context switching. We run the same test on both ARMv7
and ARMv8 versions. Each test is repeated twice, one with
the full switch gate that includes TLB invalidation and the
other using the ASID protection. The purpose is to estimate the
performance of a system that might use sandboxing techniques
to securely skip the relatively expensive TLB invalidation. It
is worth noting that the effect of the TLB invalidation is not
limited to the added execution time on the switch gate, but
it also has a side-effect on other system operations. Table II
also shows that switching the ASID is more expensive in the
case of ARMv7 compared to ARMv8. This can be attributed
to the multiple steps required to switch the ASID on ARMv7
compared to the single atomic step on ARMv8.
Benchmark Performance Comparison: The second experi-
ment is to use benchmarking tools to evaluate the perfor-
mance overhead of the SKEE prototype described above.
Benchmarking the performance was only done on the system
that uses TLB invalidation. We did not evaluate the ASID
based protection because it is not complete without adopting a
sandboxing mechanism that prevents returning to the kernel
to hijack SKEE’s control ﬂow. The system that uses TLB
invalidation gives a perspective on the worst case performance
of a system adopting SKEE.
Table III.
SKEE BENCHMARK SCORES ON ARMV7
Benchmark
CF-Bench
Smartbench 2012
Linpack
Quadrant
Antutu v5.7
Vellamo
Browser
Metal