using namespace std;
template 
AT max(AT a, AT b) {
    return a > b ? a : b;
}   
int main() {
    cout 
class 类名{
    类成员声明
};
类模板名对象名(实参列表)
#include
using namespace std;
template 
class compare {
private:
    AT a;
    AT b;
public:
    compare(AT a1, AT b1) {
        a = a1;
        b = b1;
    }
    AT max() {
        return a > b ? a : b;
    }
};
int main() {
    compareop1(4, 5);
    cout 
函数类型 类名::成员函数名(形参表){
}
说明：
类模板使用前，需要在模板名字后面加上
模板类可以有多个类型参数
异常处理
程序中常见的错误分为：编译时的错误，运行时的错误，后者难以发现，称之为异常
传统的处理异常的方式是通过条件分支语句来实现
C++处理异常是：执行一个函数过程中出现异常，发出一个消息，传给上一级来解决，依次逐级上传，
如果到最高一级还不能解决就中断程序
异常处理机制分为三部分：检查try，抛出throw，捕获catch
用法举例：
#include
using namespace std;
template 
class compare {
private:
    AT a;
    AT b;
public:
    compare(AT a1, AT b1) {
        a = a1;
        b = b1;
    }
    AT max();
};
template 
AT compare::max() {
    return a > b ? a : b;
}
int main() {
    compareop1(4, 5);
    cout 
using namespace std;
//生成一个有10个相同成员的数组，成员的值位于0到10之间
int* arr(int a) {
    if (a > 10 || a > ,>来实现
重载插入运算符>
与插入运算符类似
文件的输入输出
C++把文件看成字符序列，一个文件是由一个个字符顺序组成的。可以分为文本文件和二进制文件
文本文件每个字节存放一个ASCII码，代表一个字符
二进制文件按内存存储形式原样存放
文件输入输出的基本过程如下：
1. 打开文件：创建流对象，与文件向关联
2. 读写操作
3. 关闭文件
文件的打开与关闭
进行文件的输入输出，其实是建立一个流对象，将这个流对象与文件相关联，流对象的使用类似于标准
流对象cin和cout
用于输入输出的类：
建立流对象，其实就是建立输入输出流类的对象，例如：
ostream &operator>(istream &in,user_name& obj){
    in>>obj.item1;
    in>>obj.item2;
    return in;
}
打开方式
描述
ios::app
追加模式。所有写入都追加到文件末尾。
ios::ate
文件打开后定位到文件末尾。
ios::in
打开文件用于读取。
ios::out
打开文件用于写入。
ios::trunc
如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。
使用成员函数open打开文件：
打开方式：
关闭文件则是通过调用成员函数close()来进行关闭，不需要参数
整个打开关闭文件流程如下：
文本文件的读写
打开文件建立流对象之后，就可以进行读写操作了
文本文件的读写示例：
ifstream in;
ofstream out;
fstream both;
in.open(文件名，打开方式)
#include
#include
int main(){
    fstream out;
    out.open("C:\\test.txt",ios::out|ios::in);
    out.close();
    return 0;
}
#include
#include
using namespace std;
int main() {
    ofstream out;
    out.open("C:\\Users\\halo\\Desktop\\tmp\\cpp.txt");//打开文件
    out 
#include
#include
using namespace std;
int test_write(string fpath) {
    ofstream outf(fpath, ios::binary);//构造函数与open成员函数功能相同
    if (!outf) {
        cout << "open fail!" << endl;
        exit(1);
    }
    char ch = 'a';
    for (int i = 0; i < 26; i++) {
        outf.put(ch);
        ch++;
    }
    outf.close();
    return 0;
}
int test_read(string fpath) {
    ifstream inf(fpath, ios::binary);
    if (!inf) {
        cout << "read fail!" << endl;
        exit(1);
    }
    char ch;
    while (inf.get(ch))cout << ch;
    inf.close();
    return 0;
}
int main() {
    string fpath = "C:\\Users\\halo\\Desktop\\tmp\\cpp.txt";
    test_write(fpath);
    test_read(fpath);
    return 0;
}
第一个参数是数据起始地址，第二个参数是数据长度
二进制文件的随机读写
本段内容来自菜鸟教程：https://www.runoob.com/cplusplus/cpp-files-streams.html
istream 和 ostream 都提供了用于重新定位文件位置指针的成员函数。这些成员函数包括关于 istream 
的 seekg（"seek get"）和关于 ostream 的 seekp（"seek put"）。
seekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 
ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 
ios::end（从流的末尾开始定位）。
文件位置指针是一个整数值，指定了从文件的起始位置到指针所在位置的字节数。下面是关于定位 
"get" 文件位置指针的实例：
命名空间
用来解决名字冲突问题
定义命名空间：
使用命名空间：
头文件命名规则
使用带后缀.h 的头文件，则不必使用命名空间
使用不带后缀的头文件，需要声明命名空间std;
inf.read(char* buf,int len)
outf.write(const char* buf,int len)
// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）
fileObject.seekg( n );
// 把文件的读指针从 fileObject 当前位置向后移 n 个字节
fileObject.seekg( n, ios::cur );
// 把文件的读指针从 fileObject 末尾往回移 n 个字节
fileObject.seekg( n, ios::end );
// 定位到 fileObject 的末尾
fileObject.seekg( 0, ios::end );
namespace NS{
    int i=5;
    int j=10;
}
using namespace NS;
cout << i<< endl;
cout << NS::i <<endl;
参考资料:
《C++面向对象程序设计教程(第四版)》
《C++面向对象程序设计教程(第四版)习题解答与上机指导》