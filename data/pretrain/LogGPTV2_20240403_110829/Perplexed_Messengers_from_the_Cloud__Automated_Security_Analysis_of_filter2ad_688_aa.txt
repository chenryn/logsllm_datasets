title:Perplexed Messengers from the Cloud: Automated Security Analysis of
Push-Messaging Integrations
author:Yangyi Chen and
Tongxin Li and
XiaoFeng Wang and
Kai Chen and
Xinhui Han
Perplexed Messengers from the Cloud: Automated
Security Analysis of Push-Messaging Integrations
Yangyi Chen1∗, Tongxin Li2∗, XiaoFeng Wang1, Kai Chen1, 3 and Xinhui Han2
1Indiana University Bloomington
2Peking University
3Institute of Information Engineering, Chinese Academy of Sciences
ABSTRACT
In this paper, we report the ﬁrst large-scale, systematic study on
the security qualities of emerging push-messaging services, focus-
ing on their app-side service integrations. We identiﬁed a set of
security properties different push-messaging services (e.g., Google
Cloud Messaging) need to have, and automatically veriﬁed them in
different integrations using a new technique, called Seminal. Sem-
inal is designed to extract semantic information from a service’s
sample code, and leverage the information to evaluate the security
qualities of the service’s SDKs and its integrations within different
apps. Using this tool, we studied 30 leading services around the
world, and scanned 35,173 apps. Our ﬁndings are astonishing: over
20% apps in Google Play and 50% apps in mainstream Chinese app
markets are riddled with security-critical loopholes, putting a huge
amount of sensitive user data at risk. Also, our research brought to
light new types of security ﬂaws never known before, which can be
exploited to cause serious confusions among popular apps and ser-
vices (e.g., Facebook, Skype, Yelp, Baidu Push). Taking advantage
of such confusions, the adversary can post his content to the vic-
tim’s apps in the name of trusted parties and intercept her private
messages. The study highlights the serious challenges in securing
push-messaging services and an urgent need for improving their
security qualities.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Veriﬁcation–
Validation; D.2.5 [Software Engineering]: Testing and Debugging–
Code inspections and walk-throughs
General Terms
Security
Keywords
mobile push-messaging services; Android security; mobile cloud
security; security analysis
∗The names of the ﬁrst two authors are in alphabetical order.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from Permissions@acm.org.
CCS’15, October 12-16, 2015, Denver, CO, USA
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813652.
1.
INTRODUCTION
Push-messaging (aka., cloud-messaging) has emerged as a ma-
jor channel that connects software vendors to their mobile users,
which is now provided by all commercial clouds (Google, Ama-
zon, etc.), device manufacturers (Samsung, Apple, Microsoft, etc.),
and increasingly third-party providers (e.g., Urban Airship [12],
PushIO [9]). These services are further integrated by syndicators
across different platforms, allowing the vendor to push a message
to all devices associated with different push clouds such as Google
Cloud Messaging (GCM), Amazon Device Messaging (ADM) and
Apple Push Notiﬁcation service (APNs) in one step. Through this
channel, popular apps (Facebook, Skype, Yelp, Netﬂix, etc.) re-
ceive sensitive information (private messages, bank account bal-
ances, etc.) and commands for security-critical operations (e.g.,
erasing data on lost devices) from their app servers. Therefore, its
security and privacy assurance is of critical importance.
Hazards in the cloud messenger. A recent study, however, casts
serious doubts on the security qualities of the channel [28]: re-
searchers preliminarily investigated GCM, ADM and two other ser-
vices through manual analysis, and revealed that they were all rid-
dled with security-critical loopholes. For example, a lapse in GCM
allowed an unauthorized party to hijack a victim’s registration ID
(an identifer for the app on her device) and receive all the messages
that should be pushed to the victim. On the device side, improper
use of PendingIntent was found to cause this secret token to
be exposed, allowing unauthorized parties to intercept the victim’s
messages and inject data to her app.
Even though all these ﬂaws have since been ﬁxed [28], the grip-
ping concern remains whether they are just a tip of the iceberg. Af-
ter all, over 40 providers and syndicators are already in this boom-
ing business and new players continue to join the party, whose ser-
vices have been integrated into millions of apps. Less clear here
is whether they also suffer from any existing or new threats never
known before. Most importantly, nothing is out there today to help
service providers and app vendors identify vulnerabilities in de-
velopment and integration of push-messaging services, and third
parties evaluate their security protection. As a result, the security
qualities of these services are hard to assure.
Detecting vulnerable messaging integrations. As the ﬁrst step
toward better protecting push messaging, we developed in our re-
search the ﬁrst technique to help detect security-critical vulnerabil-
ities in device-side integrations of these services. We focus on their
integrations within apps, as these components are most likely to be
the weakest link of this type of cloud services, as indicated by the
prior research [28]. Also, never before have the push-messaging in-
tegrations been thoroughly investigated. More speciﬁcally we ﬁrst
identiﬁed a set of properties for a secure integration. Automatic
1260veriﬁcation of these properties, however, turns out to be challeng-
ing: given an app, little is known about the location of its code
segment related to a push-messaging service, its detailed function-
alities (registrations, receiving messages, etc.), the way messages
are passed from the service’s SDK to the app (e.g., through call-
back, static or dynamic receiver, etc.), the models of the cloud ser-
vice integrated (e.g., syndication, with or without a service app) and
the further operations the app performs on a received message. To
address this challenge, our new technique, called Seminal (secure
messaging integration analysis), utilizes the simple sample code
offered by each cloud-messaging service to automatically recover
such semantic information and guide the analysis on both the SDK
and the app’s processing of messages (Section 3). Seminal is de-
signed speciﬁcally for analyzing the push-messaging service, one
of the most important mobile-cloud service in use. Our evaluation
shows that the approach can effectively detect security weaknesses
within popular apps’ integrations in a large scale.
Our ﬁndings. Our implementation of Seminal was used in a study
to analyze the SDKs of 30 push-messaging services, covering most
third-party services we are aware of, and over 35,173 commercial
apps (e.g., Facebook, Yelp, etc.). Our ﬁndings are astonishing:
57% of the SDKs (17 out of 30) have at least one security-critical
ﬂaw and 50.2% of the apps contain vulnerabilities that could be
exploited by an unauthorized party to either inject messages or in-
tercept sensitive user information.
In addition to a better under-
standing about the scope and magnitude of known ﬂaws, which
has never been studied at this scale, many new security ﬂaws were
brought to light by our study, which are causing confusion within
existing push-messaging services and often fundamental to their
design. For example, we found that almost all the apps integrat-
ing multiple cloud-messaging services (e.g., GCM, ADM, etc.) do
not discriminate which service a received message actually comes
from: Facebook and Skype integrate both GCM and ADM services,
while on most (if not all) mobile devices only one of these services
is supported; therefore, a malicious app on the same device can
leverage the Intent receiver for the unused service to inject mes-
sages into these apps, in the name of a party the app user trusts
(e.g., her close friend) (Section 4.1). Another important observa-
tion is that all the cloud-messaging services can only identify the
device and the app, not the user supposed to receive a message.
As a result, over 50% of social, ﬁnance and health apps, including
the popular ones such as Yelp and Pinterest, were found to have a
user confusion problem, which potentially allows a malicious party
to impersonate a friend of the victim and push messages to her
through a different user account (Section 4.1).
In addition, our research reveals the pervasiveness of client iden-
tiﬁer (CID) exposure, a serious threat since CID is an authentication
token and its disclosure enables the adversary to directly contact a
cloud server to obtain a user’s messages. The problem was found
in over 6.5% of the 17,557 apps sampled from 5 major Chinese app
markets. Furthermore, a new power-saving strategy of the Baidu
Push (an extremely popular Chinese push-messaging service) was
shown to allow a malicious app to intercept the messages delivered
to their recipients (Section 4.1). Altogether, we discovered 17,668
vulnerable apps and have reported the most critical issues to re-
lated parties. The importance of these new ﬁndings has been well
acknowledged by the industry: e.g., Facebook rewards us $2000
for the security ﬂaws our approach detected in their app. A demo
of the attacks is posted on a private website [11]. We also report a
measurement study on these vulnerable apps (Section 4.2).
Contributions. The contributions of the paper are summarized as
follows:
• New technique for detecting vulnerable integrations. We came
up with the ﬁrst methodology for a systematic analysis on push-
messaging integrations. A simple technique we built leverages
sample code as a guidance to efﬁciently detect potential security
problems within service SDKs and the apps integrating them. This
new approach can be utilized to identify security-critical vulnera-
bilities when developing new apps and the client components of a
new push-messaging service.
• New ﬁndings. Running our tool, we performed a comprehensive
study on the security properties of most third-party SDKs and over
35,173 apps. This study reveals the gravity of the situation: many
SDKs and a large portion of the apps contain security ﬂaws never
known before, with serious consequences once exploited. This
points to an urgent need to improve the security qualities of push-
messaging integrations.
2. BACKGROUND
Push-messaging services. To receive messages from a push cloud,
an Android app is given a unique identiﬁer, which we call regis-
tration ID for those associated with device manufacturers’ clouds
such as GCM and ADM, or client ID (CID) for the identiﬁers gen-
erated and used by other push-messaging services in a way similar
to a universally unique identifer (UUID). The identiﬁer is known
to the application vendor’s app server and the push cloud’s con-
nection servers. To push a message to a user, the app server asks
the cloud to deliver it to the app with an identiﬁer associated with
the user. This message delivery process ultimately goes through a
connection server that directly talks to the app or indirectly through
an Android service app (e.g., android.gms). To obtain such an
identifer, an app ﬁrst needs to register with the service whenever a
new user logs in. This registration process involves communica-
tion with the cloud, which either causes the connection server to
generate a registration ID or sends a locally constructed CID (by
the service SDK integrated into the app) to the server. The identi-
ﬁer is also submitted by the app to its app server (typically through
an out-of-the-band SSL connection between them) to bind it with a
user ID. Such an infrastructure and operations vary across different
services, including those provided by device manufacturers or the
third parties, and those integrating others’ services (Figure 1), as
explicated below:
• Manufacturer push-messaging service. Examples of the services
for Android devices in this category include GCM, ADM, Samsung
Push Service, Nokia Notiﬁcation Service, etc. As illustrated in
Figure 1, they are provided by manufacturers’ clouds, whose con-
nection servers directly talk to the application vendor’s app server.
A prominent feature of such services on the device side is a ser-
vice app (e.g., Android service android.gms, the ADM client,
etc.) that relays the message received from the connection server to
the target app, using Android Inter-Process Communication (IPC).
Also through the service app, an app registers with the push-messag
ing service (sometimes through an SDK integrated within the app),
which involves authenticating the device to the connection server
and requesting the server to create a registration ID. Note that the
ID here is bound to the app vendor’s server: only this app server is
allowed to push messages to the app.
• Third-party services. In addition to device manufacturers, third
parties also start providing their own push-messaging services. For
example, Baidu Push [2], Getui [6] and JPush [7] are already serv-
ing hundreds of millions of users. Such services are similar to
their manufacturer counterparts, except that the connection server
directly talks to the service SDK within the app through a socket
connection. In this way, the SDK authenticates the app to the server
1261Figure 1: Push Messaging Services
using its CID (which different from registration ID, also serves as
a secret token) before getting messages from the server.
• Push-messaging syndication. To support convenient message
pushing across different devices and platforms (Nexus, Samsung,
Kindle, etc.), syndication services (syndicator for short) like Urban
Airship [12], Push Woosh [8], etc. have emerged in recent years.
Such a service is framed over multiple manufacturer clouds, such
as GCM, ADM, using a syndication server that connects to the app
server the service provider sets up for each of those clouds. To use
the service, the app vendor runs her app server to push a message,
together with the recipient’s CID, to the syndication server, which
retrieves the registration ID associated with this CID for a speciﬁc
manufacturer cloud, and then forwards the message to the syndica-
tor’s app server there. After that, the connection server deliveries it
to the end user’s app.
Service integrations. To get a push-messaging service, the app de-
veloper often needs to integrate its SDK to her app. As discussed
above, the SDK functions as a messaging interface, interacting with
a connection server to receive messages from the app vendor, and
then handing them over to the app.
It is also in charge of gen-
erating a CID for the app and sending it to the app server or the
syndication server during a registration. The communication be-
tween the SDK and cloud servers goes through socket, using the
CID as an authentication token in the case of third-party services
or service syndications, while its service to its hosting app is often
delivered through Android IPC or a callback function registered for
the messaging event (Section 3.2). Also, for the app integrating a
manufacturer push-messaging service, it also uses IPC to receive
messages from the service app (e.g., android.gms).
The IPC communication on Android mainly relies on the In-
tent mechanism. An Intent is a message that describes the oper-
ations to be performed by its recipient. The operations here in-
clude invoking a user interface (startActivity) or a service
(startService), or broadcasting to the receivers associated with
a speciﬁc action as speciﬁed by recipient apps. Such a receiver can
be private, so that only its hosting app is allowed to send messages
to it, or protected by permission to ensure that only an authorized
party (with a proper permission) can communicate with it. Oth-
erwise, the receiver is made public. Such settings typically show