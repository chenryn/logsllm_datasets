    uint256 private seed;
    function play() public payable {
     require(msg.value >= 1 ether);
     iteration++;
    uint randomNumber = uint(keccak256(seed + iteration));
    if (randomNumber % 2 == 0) {
     msg.sender.transfer(this.balance); 
     }
    }
在这第⼆个例⼦中，block.blockhash正被⽤来⽣成⼀个随机数。如果将该哈希值blockNumber设置为当前值block.number（出于显⽽易⻅的原因）并且因此设置为，则该哈希值未知0。在blockNumber过去设置为超过256个块的情况下，它将始终为零。最后，如果它被设置为⼀个以前的不太旧的区块号码，另⼀个智能合约可以访问相同的号码并将游戏合同作为同⼀交易的⼀部分进⾏调⽤。
    function play() public payable {
    require(msg.value >= 1 ether);
    if (block.blockhash(blockNumber) % 2 == 0) {
     msg.sender.transfer(this.balance);
     }
    }
其他资源： \- [在以太坊智能合约中预测随机数](https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620 "在以太坊智能合约中预测随机数") \-[在以太坊随机](https://blog.otlw.co/random-in-ethereum-50eefd09d33e "在以太坊随机")
#### 7.前台运⾏
也被称为 检查时间与使⽤时间（TOCTOU），竞争条件，事务顺序依赖性（TOD）
> 事实证明，只需要150⾏左右的Python就可以获得⼀个正常运⾏的算法。 Ivan Bogatyy
由于矿⼯总是通过代表外部拥有地址（EOA）的代码获得燃⽓费⽤，因此⽤户可以指定更⾼的费⽤以便
更快地开展交易。由于以太坊区块链是公开的，每个⼈都可以看到其他⼈未决交易的内容。这意味着，
如果某个⽤户正在揭示拼图或其他有价值的秘密的解决⽅案，恶意⽤户可以窃取解决⽅案并以较⾼的费
⽤复制其交易，以抢占原始解决⽅案。如果智能合约的开发者不⼩⼼，这种情况会导致实际的和毁灭性 的前端攻击。
真实世界影响：
  * [班柯](https://hackernoon.com/front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798 "班柯")
  * [ERC-20](https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/ "ERC-20")
  * [运⾏](https://www.dasp.co/ "运⾏")
示例：
  1. ⼀个聪明的合同发布的RSA号（N = prime1 x prime2）。
  2. 对其submitSolution()公共功能的调⽤与权利prime1并prime2奖励来电者。
  3. Alice成功地将RSA编号考虑在内，并提交解决⽅案。
  4. 有⼈在⽹络上看到爱丽丝的交易（包含解决⽅案）等待被开采，并以较⾼的天然⽓价格提交。
  5. 由于⽀付更⾼的费⽤，第⼆笔交易⾸先被矿⼯收回。该攻击者赢得奖⾦。
其他资源：
  *     * [在以太坊智能合约中预测随机数](https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620 "在以太坊智能合约中预测随机数")
  *     * [虚拟和解的前卫，悲痛和危险](https://blog.0xproject.com/front-running-griefing-and-the-perils-of-virtual-settlement-part-1-8554ab283e97 "虚拟和解的前卫，悲痛和危险")
  *     * [Frontrunning Bancor](https://www.youtube.com/watch?v=RL2nE3huNiI "Frontrunning Bancor")
#### 8.时间篡改
也被称为 时间戳依赖
> 如果⼀位矿⼯持有合同的股份，他可以通过为他正在挖掘的矿区选择合适的时间戳来获得优势。 Nicola Atzei，Massimo
> Bartoletti和Tiziana Cimoli
从锁定令牌销售到在特定时间为游戏解锁资⾦，合同有时需要依赖当前时间。这通常通过Solidity中的
block.timestamp别名或其别名完成now。但是，这个价值从哪⾥来？来⾃矿⼯！由于交易的矿⼯在报告采矿发⽣的时间⽅⾯具有回旋余地，所以良好的智能合约将避免强烈依赖所宣传的时间。请注意，
block.timestamp有时（错误）也会在随机数的⽣成中使⽤，[如＃6所述。错误的随机性](https://www.dasp.co/#item-6
"如＃6所述。错误的随机性")。
真实世界影响：
[政府](http://blockchain.unica.it/projects/ethereum-survey/attacks.html#governmental "政府")
示例：
  1. ⼀场⽐赛在今天午夜付出了第⼀名球员。
  2. 恶意矿⼯包括他或她试图赢得⽐赛并将时间戳设置为午夜。
  3. 在午夜之前，矿⼯最终挖掘该块。当前的实时时间“⾜够接近”到午夜（当前为该块设置的时间戳），⽹络上的其他节点决定接受该块。
代码示例：
以下功能只接受特定⽇期之后的呼叫。由于矿⼯可以影响他们区块的时间戳（在⼀定程度上），他们可以尝试挖掘⼀个包含他们交易的区块，并在未来设定⼀个区块时间戳。如果⾜够接近，它将在⽹络上被接受，交易将在任何其他玩家试图赢得⽐赛之前给予矿⼯以太：
    function play() public {
    require(now > 1521763200 && neverPlayed == true);
     neverPlayed = false;
     msg.sender.transfer(1500 ether);
    }
其他资源：
  * [对以太坊智能合约的攻击调查](https://eprint.iacr.org/2016/1007 "对以太坊智能合约的攻击调查")
  * [在以太坊智能合约中预测随机数](https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620 "在以太坊智能合约中预测随机数")
  * [让智能合约变得更聪明](https://blog.acolyer.org/2017/02/23/making-smart-contracts-smarter/ "让智能合约变得更聪明")
#### 9.短地址攻击
也被称为 涉及⾮连锁问题，客户端漏洞
> 为令牌传输准备数据的服务假定⽤户将输⼊20字节⻓的地址，但实际上并未检查地址的⻓度。 PawełBylica
短地址攻击是EVM本身接受不正确填充参数的副作⽤。攻击者可以通过使⽤专⻔制作的地址来利⽤这⼀点，使编码错误的客户端在将它们包含在事务中之前不正确地对参数进⾏编码。这是EVM问题还是客户问题？是否应该在智能合约中修复？尽管每个⼈都有不同的观点，但事实是，这个问题可能会直接影响很多以太⽹。虽然这个漏洞还没有被⼤规模利⽤，但它很好地证明了客户和以太坊区块链之间的交互带来的问题。其他脱链问题存在：重要的是以太坊⽣态系统对特定的javascript前端，浏览器插件和公共节点的深度信任。臭名昭着的链外利⽤被⽤于[Coindash
ICO的⿊客](https://medium.com/crypt-bytes-tech/ico-hack-coindash-ed-dd336a4f1052
"Coindash ICO的⿊客")在他们的⽹⻚上修改了公司的以太坊地址，诱骗参与者将ethers发送到攻击者的地址。
发现时间表： 2017年4⽉6⽇ [如何通过阅读区块链来找到1000万美元](https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95 "如何通过阅读区块链来找到1000万美元")
真实世界影响：
[未知交换（s）](https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95 "未知交换（s）")
示例：
  1. 交易所API具有交易功能，可以接收收件⼈地址和⾦额。
  2. 然后，API `transfer(address _to, uint256 _amount)`使⽤填充参数与智能合约函数进⾏交互：它将12位零字节的地址（预期的20字节⻓度）预先设置为32字节⻓
  3. 鲍勃（）要求爱丽丝转让他20个代币。他恶意地将她的地址截断以消除尾随的零。`0x3bdde1e9fbaef2579dd63e2abbf0be445ab93f00`
  4. Alice使⽤交换API和Bob（`0x3bdde1e9fbaef2579dd63e2abbf0be445ab93f`）的较短的19字节地址。
  5. API⽤12个零字节填充地址，使其成为31个字节⽽不是32个字节。有效地窃取以下`_amount`参数中的⼀个字节。
  6. 最终，执⾏智能合约代码的EVM将会注意到数据未被正确填充，并会在`_amount`参数末尾添加丢失的字节。有效地传输256倍以上的令牌。
其他资源：
  * [ERC20短地址攻击说明](http://vessenes.com/the-erc20-short-address-attack-explained/ "ERC20短地址攻击说明")
  * [分析ERC20短地址攻击](https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/ "分析ERC20短地址攻击")
  * [智能合同短地址攻击缓解失败](https://blog.coinfabrik.com/smart-contract-short-address-attack-mitigation-failure/ "智能合同短地址攻击缓解失败")
  * [从标记中删除短地址攻击检查](https://github.com/OpenZeppelin/zeppelin-solidity/issues/261 "从标记中删除短地址攻击检查")
#### 10.未知的 未知物
> 我们相信更多的安全审计或更多的测试将没有什么区别。主要问题是评审⼈员不知道要寻找什么。 Christoph Jentzsch
以太坊仍处于起步阶段。⽤于开发智能合同的主要语⾔Solidity尚未达到稳定版本，⽽⽣态系统的⼯具仍处于试验阶段。⼀些最具破坏性的智能合约漏洞使每个⼈都感到惊讶，并且没有理由相信不会有另⼀个同样出乎意料或同样具有破坏性的漏洞。只要投资者决定将⼤量资⾦⽤于复杂⽽轻微审计的代码，我们将继续看到新的发现导致可怕的后果。对智能合约进⾏正式验证的⽅法尚不成熟，但它们似乎有望成为今⽇摇摇欲坠的现状。随着新类型的漏洞不断被发现，开发⼈员需要继续努⼒，并且需要开发新⼯具来在坏⼈之前找到它们。这个前10名可能会迅速发展，直到智能合约开发达到稳定和成熟的状态。
* * *