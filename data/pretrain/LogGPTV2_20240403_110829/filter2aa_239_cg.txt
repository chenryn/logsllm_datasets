          catch (IndexOutOfRangeException ex)
          {
            WriteLine("Exception: " +
                $"Number should be between 0 and 5. {ex.Message}");
          }
          catch (Exception ex)
          {
            WriteLine($"An exception was thrown. Message was: {ex.Message}");
          }
          finally
          {
            WriteLine("Thank you\n");
          }
          }
        }
      }
    }
这段代码的核心是一个while循环，它连续使用ReadLine（）方法以请求用户输入。
ReadLine（）方法返回一个字符串，所以程序首先要用System.Convert.ToInt32（）方法把
它转换为int型。System.Convert类包含执行数据转换的各种有用方法，并提供了
int.Parse（）方法的一个替代方法。一般情况下，System.Convert类包含执行各种类型转换
的方法，C#编译器把int解析为System.Int32基类的实例。
  注意： 值得注意的是，传递给catch块的参数只能用于该catch块。这就是为什
么在上面的代码中，能在后续的catch块中使用相同的参数名ex的原因。
在上面的代码中，我们也检查一个空字符串，因为该空字符串是退出while循环的条
件。注意这里用break语句退出try块和while循环——这是有效的。当然，当程序流退出try
块时，会执行finally块中的WriteLine（）语句。尽管这里仅显示一句问候，但一般在这里
可以关闭文件句柄，调用各种对象的Dispose（）方法，以执行清理工作。一旦应用程序
退出了finally块，它就会继续执行下一条语句，如果没有finally块，该语句也会执行。在
本例中，我们返回到while循环的开头，再次进入try块（除非执行while循环中break语句的
结果是进入finally块，此时就会退出while循环）。
下面看看异常情况：
    if (index  5)
    {
      throw new IndexOutOfRangeException($"You typed in {userInput}");
    }
在抛出一个异常时，需要选择要抛出的异常类型。可以使用System.Exception异常
类，但这个类是一个基类，最好不要把这个类的实例当作一个异常抛出，因为它没有包含
关于错误的任何信息。而.NET Framework包含了许多派生自System.Exception异常类的其
他异常类，每个类都对应于一种特定类型的异常情况，也可以定义自己的异常类。在抛出
一个匹配特定错误情况的类的实例时，应提供尽可能多的异常信息。在前面的例子中，
System.IndexOutOfRangeException异常类是最佳选择。IndexOutOfRangeException异常类
有几个重载的构造函数，我们选择的一个重载，其参数是一个描述错误的字符串。另外，
也可以选择派生自己的自定义异常对象，它描述该应用程序环境中的错误情况。
假定用户这次输入了一个不在0～5范围内的数字，if语句就会检测到一个错误，并实
例化和抛出一个IndexOutOfRangeException异常对象。应用程序会立即退出try块，并查找
处理IndexOutOf-RangeException异常的catch块。它遇到的第一个catch块如下所示：
    catch (IndexOutOfRangeException ex)
    {
      WriteLine($"Exception: Number should be between 0 and 5. {ex.Message}");
    }
由于这个catch块带合适类的一个参数，因此它就会传递给异常实例，并执行。在本
例中，是显示错误信息和Exception.Message属性（它对应于给IndexOutRangeException异
常类的构造函数传递的字符串）。执行了这个catch块后，控制权就切换到finally块，就好
像没有发生过任何异常。
注意，本例还提供了另一个catch块：
    catch (Exception ex)
    {
      WriteLine($"An exception was thrown. Message was: {ex.Message}");
    }
如果没有在前面的catch块中捕获到这类异常，则这个catch块也能处理
IndexOutOfRangeException异常。基类的一个引用也可以指向派生自它的类的所有实例，
所有的异常都派生自System.Exception异常类。这个catch块没有执行，因为应用程序只执
行它在可用的catch块列表中找到的第一个合适的catch块。还有第二个catch块的原因是，
不仅try块包含这段代码，还有另外3个方法调用Console.ReadLine（）、Console.Write（）
和Convert.ToInt32（）也包含这段代码，它们是System名称空间中的方法。这3个方法都
可能抛出异常。
如果输入的内容不是数字，如a或hello，则Convert.ToInt32（）方法就会抛出
System.FormatException类的一个异常，表示传递给ToInt32（）方法的字符串对应的格式
不能转换为int。此时，应用程序会跟踪这个方法调用，查找可以处理该异常的处理程
序。第一个catch块带一个IndexOutOfRangeException异常，不能处理这种异常。应用程序
接着查看第二个catch块，显然它可以处理这类异常，因为FormatException异常类派生于
Exception异常类，所以把FormatException异常类的实例作为参数传递给它。
该示例的这种结构是非常典型的多catch块结构。最先编写的catch块用于处理非常特
殊的错误情况，接着是比较一般的块，它们可以处理任何错误，我们没有为它们编写特定
的错误处理程序。实际上，catch块的顺序很重要，如果以相反的顺序编写这两个块，代
码就不会编译，因为第二个catch块是不会执行的（Exception catch块会捕获所有异常）。
因此，最上面的catch块应用于最特殊的异常情况，最后是最一般的catch块。
前面分析了该示例的代码，现在可以运行它。下面的输出说明了不同的输入会得到不
同的结果，并说明抛出了IndexOutOfRangeException异常和FormatException异常：
    SimpleExceptions
    Input a number between 0 and 5 (or just hit return to exit)> 4
    Your number was 4
    Thank you
    Input a number between 0 and 5 (or just hit return to exit)> 0
    Your number was 0
    Thank you
    Input a number between 0 and 5 (or just hit return to exit)> 10
    Exception: Number should be between 0 and 5. You typed in 10
    Thank you
    Input a number between 0 and 5 (or just hit return to exit)> hello
    An exception was thrown. Message was: Input string was not in a correct forma
t.
    Thank you
    Input a number between 0 and 5 (or just hit return to exit)>
    Thank you
14.3.2 在其他代码中捕获异常
上面的示例说明了两个异常的处理。一个是IndexOutOfRangeException异常，它由我
们自己的代码抛出，另一个是FormatException异常，它由一个基类抛出。如果检测到错
误，或者某个方法因传递的参数有误而被错误调用，库中的代码就常常会抛出一个异常。
但库中的代码很少捕获这样的异常。应由客户端代码来决定如何处理这些问题。
在调试时，异常经常从基类库中抛出，调试的过程在某种程度上是确定异常抛出的原
因，并消除导致错误发生的缘由。主要目标是确保代码在发布后，异常只发生在非常少见
的情况下，如果可能，应在代码中以适当的方式处理它。
14.3.3 System.Exception属性
本示例只使用了异常对象的一个Message属性。在System.Exception异常类中还有许多
其他属性，如表14-1所示。
表14-1
属性
说明
Data
这个属性可以给异常添加键/值语句，以提供关于异常的额
外信息
HelpLink
链接到一个帮助文件上，以提供关于该异常的更多信息
InnerException
如果此异常是在catch块中抛出的，它就会包含把代码发送
到catch块中的异常对象
Message
描述错误情况的文本
Source
导致异常的应用程序名或对象名
StackTrace
栈上方法调用的详细信息，它有助于跟踪抛出异常的方法
在这些属性中，如果可以进行栈跟踪，则StackTrace的属性值由.NET运行库自动提
供。Source属性总是由.NET运行库填充为抛出异常的程序集的名称（但可以在代码中修改
该属性，提供更具体的信息）, Data、Message、HelpLink和InnerException属性必须在抛出
异常的代码中填充，方法是在抛出异常前设置这些属性。例如，抛出异常的代码如下所
示：
    if (ErrorCondition == true)
    {
      var myException = new ClassMyException("Help! ! ! ! ");
      myException.Source = "My Application Name";
      myException.HelpLink = "MyHelpFile.txt";
      myException.Data["ErrorDate"] = DateTime.Now;
      myException.Data.Add("AdditionalInfo", "Contact Bill from the Blue Team");
      throw myException;
    }
其中，ClassMyException是抛出的异常类的名称。注意所有异常类的名称通常以
Exception结尾。另外，Data属性可以用两种方式设置。
14.3.4 异常过滤器
C# 
6的一个新特性是异常过滤器。捕获不同的异常类型时，可以有行为不同的catch
块。在某些情况下，catch块基于异常的内容执行不同的操作。例如，使用Windows运行库
时，所有不同类型的异常通常都会得到COM异常，在执行网络调用时，许多不同的场景
都会得到网络异常。例如，如果服务器不可用，或提供的数据不符合期望。以不同的方式
应对这些错误是好事。一些异常可以用不同的方式恢复，而在另外一些异常中，用户可能
需要一些信息。
下面的代码示例抛出类型MyCustomException的异常，设置这个异常的ErrorCode属性
（代码文件ExceptionFilters/Program.cs）：
    public static void ThrowWithErrorCode(int code)
    {
      throw new MyCustomException("Error in Foo") { ErrorCode = code };
    }
在Main（）方法中，try块和两个catch块保护方法调用。第一个catch块使用when关键
字过滤出ErrorCode属性等于405的异常。when子句的表达式需要返回一个布尔值。如果结
果是true，这个catch块就处理异常。如果它是false，就寻找其他catch块。给
ThrowWithErrorCode（）方法传递405，过滤器就返回true，第一个catch块处理异常。传
递另一个值，过滤器就返回false，第二个catch块处理异常。使用过滤器，可以使用多个处
理程序来处理相同的异常类型。
当然也可以删除第二个catch块，此时就不处理该情形下出现的异常。
    try
    {
      ThrowWithErrorCode(405);
    }
    catch (MyCustomException ex) when (ex.ErrorCode == 405)
    {
      WriteLine($"Exception caught with filter {ex.Message} and {ex.ErrorCode}");
    }
    catch (MyCustomException ex)
    {
      WriteLine($"Exception caught {ex.Message} and {ex.ErrorCode}");
    }
14.3.5 重新抛出异常
捕获异常时，重新抛出异常也是非常普遍的。再次抛出异常时，可以改变异常的类
型。这样，就可以给调用程序提供所发生的更多信息。原始异常可能没有上下文的足够信
息。还可以记录异常信息，并给调用程序提供不同的信息。例如，为了让用户运行应用程
序，异常信息并没有真正的帮助。阅读日志文件的系统管理员可以做出相应的反应。
重新抛出异常的一个问题是，调用程序往往需要通过以前的异常找出其发生的原因和
地点。根据异常的抛出方式，堆栈跟踪信息可能会丢失。为了看到重新抛出异常的不同选
项，示例程序RethrowExceptions显示了不同的选项。
重新抛出异常的代码示例使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    static System.Console
对于此示例，创建了两个自定义的异常类型。第一个是MyCustomException，除了基
类Exception的成员之外，定义了属性ErrorCode，第二个是AnotherCustomException，支持
传递一个内部异常（代码文件RethrowExceptions /MyCustomException.cs）：
    public class MyCustomException : Exception
    {
      public MyCustomException(string message)
        : base(message)
      {
      }
      public int ErrorCode { get; set; }
    }
    public class AnotherCustomException : Exception
    {
      public AnotherCustomException(string message, Exception innerException)
        : base(message, innerException)
      {
      }
    }
HandleAll（）方法调用HandleAndThrowAgain、
HandleAndThrowWithInnerException、HandleAnd-Rethrow（）和HandleWithFilter（）方
法。捕获抛出的异常，把异常消息和堆栈跟踪写到控制台。为了更好地从堆栈跟踪中找到
所引用的行号，使用预处理器指令#line，重新编号。这样，采用委托m调用的方法就在
114行（代码文件RethrowExceptions / Program.cs）：
    #line 100
    public static void HandleAll()
    {
      var methods = new Action[]
      {
        HandleAndThrowAgain,
        HandleAndThrowWithInnerException,
        HandleAndRethrow,
        HandleWithFilter
      };
      foreach (var m in methods)
      {
        try
        {
        m();  // line 114
        }
        catch (Exception ex)
        {
        WriteLine(ex.Message);
        WriteLine(ex.StackTrace);
        if (ex.InnerException ! = null)
        {
          WriteLine($"\tInner Exception{ex.Message}");
          WriteLine(ex.InnerException.StackTrace);
        }
        WriteLine();
        }
      }
    }
ThrowAnException方法用于抛出第一个异常。这个异常在8002行抛出。在开发期间，
它有助于知道这个异常在哪里抛出：
    #line 8000
    public static void ThrowAnException(string message)
    {
      throw new MyCustomException(message);  // line 8002
    }
1．重新抛出异常的新用法
方法HandleAndThrowAgain只是把异常记录到控制台，并使用throw ex再次抛出它：
    #line 4000
    public static void HandleAndThrowAgain()
    {
      try
      {
        ThrowAnException("test 1");
      }
      catch (Exception ex)
      {
        WriteLine($"Log exception {ex.Message} and throw again");
        throw ex;  // you shouldn't do that - line 4009
      }
    }
运行应用程序，简化的输出是显示堆栈跟踪（代码文件没有名称空间和完整的路
径），代码如下：
    Log exception test 1 and throw again
    test 1
      at Program.HandleAndThrowAgain() in Program.cs:line 4009
      at Program.HandleAll() in Program.cs:line 114
堆栈跟踪显示了在HandleAll方法中调用m（）方法，进而调用
HandleAndThrowAgain（）方法。异常最初在哪里抛出的信息完全丢失在最后一个catch的
调用堆栈中。于是很难找到错误的初始原因。通常必要传送异常对象，使用throw抛出同
一个异常。
2．改变异常
一个有用的场景是改变异常的类型，并添加错误信息。这在
HandleAndThrowWithInnerException（）方法中完成。记录错误之后，抛出一个新的异常
类型AnotherException，传递ex作为内部异常：
    #line 3000
    public static void HandleAndThrowWithInnerException()
    {
      try
      {
        ThrowAnException("test 2");  // line 3004
      }
      catch (Exception ex)
      {
        WriteLine($"Log exception {ex.Message} and throw again");
        throw new AnotherCustomException("throw with inner exception", ex)
; // 3009