When the IDS detects an intrusion, we trigger a set of responses.
The procedure must meet the following goals: restore infected
objects (e.g., files and processes), maintain core functions, and
withstand a potential reinfection. We achieve these goals using
recoveries, responses, and policies.
Recovery Recovery actions restore the state of a service (i.e., the
state of its processes and metadata describing the service)
and associated files to a previous safe state. To perform recov-
ery actions, we create periodic snapshots of the filesystem
and the services, during the normal operation of the OS.
We also log all the files modified by the monitored services.
Hence, when restoring services, we only restore the files
they modified. This limits the restoration time and it avoids
3.2 Threat Model and Assumptions
We make assumptions regarding the platform’s firmware (e.g., BIOS
or UEFI-compliant firmware) and the OS kernel where we execute
the services. If attackers compromise such components at boot
time or runtime, they could compromise the OS including our
mechanisms. Hence, we assume their integrity. Such assumptions
are reasonable in recent firmware using a hardware-protected root
of trust [26, 58] at boot time and protection of firmware runtime
services [9, 75, 76]. For the OS kernel, one can use UEFI Secure
Boot [69] at boot time, and rely on e.g., security invariants [64] or a
hardware-based integrity monitor [4] at runtime. The main threat
that we address is the compromise of services inside an OS.
We make no assumptions regarding the privileges that were
initially granted to the services. Some of them can restrict their
privileges to the minimum. On the contrary, other services can
be less effective in adopting the principle of least privilege. The
specificity of our approach is that we deliberately remove privi-
leges that could not have been removed initially, since the service
needs them for a function it provides. Finally, we assume that the
attacker cannot compromise the mechanisms we use to checkpoint,
restore, and apply responses (section 4 details how we protect such
mechanisms).
We model an attacker with the following capabilities:
• Can find and exploit a vulnerability in a service,
• Can execute arbitrary code in the same context as the com-
promised service,
1Other files that the service depends on can be modified by another service, we handle
such a case with dependencies information between services.
2However, if components depend on a degraded service, they can be affected indirectly.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Chevalier et al.
• Can perform some malicious behaviors even if the service
had initially the minimum amount of privileges to accom-
plish its functions,
• Can compromise a privileged service or elevate the privileges
• Cannot exploit software-triggered hardware vulnerabilities
(e.g., side-channel attacks [35, 38, 41, 60]),
• Do not have physical access to the platform.
of a compromised service to superuser,
4 ARCHITECTURE AND REQUIREMENTS
Our approach relies on four components. In this section, we first
give an overview of how each component works and interacts with
the others, as illustrated in Figure 2. Then, we detail requirements
about our architecture.
User space
Isolated Components
Monitor
Monitored
Services
Service 1
Service 2
Service n
Policies
Use
Responses
Selection
Respo nses
IDS
S t o
Logs
Responses
Store & Fetch
Logger
e
r
Log
Trigger
checkpoint
Use
Manage
Service
Manager
States
Kernel space
Isolate
Configure
Per-service
Privileges
& Quotas
MAC
1
2 n
dynamic policy
static policy
Resources, Files, Devices, Network,...
Figure 2: Overview of the architecture
4.1 Overview
During the normal operation of the OS, the service manager creates
periodic checkpoints of the services and snapshots of the filesystem.
In addition, a logging facility logs the path of all the files modified
by the monitored services since their last checkpoint. The logs are
later used to filter the files that need to be restored.
The IDS notifies the responses selection component when it de-
tects an intrusion and specifies information about possible re-
sponses to withstand it. The selected responses are then given
to the service manager. The service manager restores the infected
service to the last known safe state including all the files modi-
fied by the infected service. Then, it configures kernel-enforced
per-service privilege restrictions and quotas based on the selected
responses. To select the last known safe state, we rely on the IDS
to identify the first alert related to the intrusion. Then, we consider
that the first state prior to this alert is safe.
4.2 Isolation of the Components
For our approach to be able to withstand an attacker trying to
impede the detection and recovery procedures, the integrity and
availability of each component is crucial. Different solutions (e.g., a
hardware isolated execution environment or a hosted hypervisor)
could be used. In our case, we rely on a kernel-based Mandatory
Access Control (MAC) mechanism, such as SELinux [55], to isolate
the components we used in our approach. Such a mechanism is
available in commodity OSs, can express our isolation requirements,
and does not modify the applications. We now give guidelines on
how to build a MAC policy to protect our components.
First, the MAC policy must ensure that none of our components
can be killed.3 Otherwise, e.g., if the responses selection component
is not alive, no responses will be applied.
Second, the MAC policy must ensure that only our components
have access to their isolated storage (e.g., to store the logs or check-
points). Otherwise, attackers might e.g., erase an entry to avoid
restoring a compromised file.
Third, the MAC policy must restrict the communication between
the different components, and it must only allow a specific pro-
gram to advertise itself as one of the components. Otherwise, an
attacker might impersonate a component or stop the communica-
tion between two components. In our case, we assume a Remote
Procedure Call (RPC) or an Inter-Process Communication (IPC)
mechanism that can implement MAC policies (e.g., D-Bus [14] is
SELinux-aware [70]).
4.3 Intrusion Detection System
Our approach requires an IDS to detect an intrusion in a monitored
service. We do not require a specific type of IDS. It can be external
to the system or not. It can be misuse-based or anomaly-based. We
only have two requirements.
First, the IDS should be able to pinpoint the intrusion to a specific
service to apply per-service responses. For example, if the IDS
analyzes event logs to detect intrusions, they should include the
service that triggered the event.
Second, the IDS should have information about the intrusion.
It should map the intrusion to a set of malicious behaviors (e.g.,
the malware capabilities [49] from Malware Attribute Enumera-
tion and Characterization (MAEC) [36]), and it should provide a
set of responses that can stop or withstand them. Both types of
information can either be part of the alert from the IDS or be gener-
ated from threat intelligence based on the alert. Generic responses
can also be inferred due to the type of intrusion if the IDS lacks
precise information about the intrusion. For example, a generic re-
sponse for ransomware consists in setting the filesystem hierarchy
as read-only. Information about the alert, the responses, or mali-
cious behaviors, can be shared using standards such as Structured
Threat Information eXpression (STIX) [6] and MAEC [36, 51].
4.4 Service Manager
Commodity OSs rely on a user space service manager (e.g., the Ser-
vice Control Manager [59] for Windows, or systemd [65] for Linux
distributions) to launch and manage services. In our architecture,
we rely on it, since it provides the appropriate level of abstraction
3One can also use a watchdog to ensure that the components are alive.
Survivor: A Fine-Grained Intrusion Response and Recovery Approach for Commodity Operating Systems
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
to manage services and it has the notion of dependencies between
services. Using such information, we can restore services in a coher-
ent state. If a service depends on other services (e.g., if one service
writes to a file and another one reads it), we checkpoint and restore
them together.
We extend the service manager to checkpoint and restore the
state of services. Furthermore, we modify the service manager
so that it applies responses before it starts a recovered service.
Since such responses are per-service, the service manager must
have access to OS features to configure per-service privileges and
resource quotas.
The service manager must be able to kill a service (i.e., all alive
processes created by the service) if it is compromised and needs
to be restored. Therefore, we bound processes to the service that
created them, and they must not be able to break the bound. For
example, we can use cgroups [24] in Linux or job objects [46] in
Windows.
Finally, the MAC policy must ensure that only the service man-
ager manages the collections of processes (e.g., /sys/fs/cgroup
in Linux). Otherwise, if an attacker breaks the bound of a compro-
mised service, it would be difficult to kill the escaped processes.
Likewise, the MAC policy must protect configuration files used by
the service manager.
5 COST-SENSITIVE RESPONSE SELECTION
For a given intrusion, multiple responses might be appropriate, and
each one incurs an availability cost. We devised a framework to
help select the cost-sensitive responses that minimize such a cost
and maintain the core functions of the service.
We use a qualitative approach using linguistic constants (e.g.,
low or high) instead of a quantitative one (e.g., monetary values).
Quantitative approaches require an accurate value of assets, and
historical data of previous intrusions to be effective, which we as-
sume missing. Qualitative approaches, while prone to biases and
inaccuracies, do not require such data, and are easier to under-
stand [72]. In addition, we would like to limit the input from the
user so that it improves the framework usability and its likelihood
to be adopted in production.
In the rest of this section, we first describe the models that our
framework relies on. Then, we detail how our framework selects
cost-sensitive responses using such models.
5.1 Malicious Behaviors and Responses
Intrusions may exhibit multiple malicious behaviors that need to
be stopped or mitigated differently. Here we work at the level of
a malicious behavior and we select a response for each malicious
behavior.
Our models rely on a hierarchy of malicious behaviors where
the first levels describe high-level behaviors (e.g., compromise data
availability), while lower levels describe more precise behaviors
(e.g., encrypt files). The malware capabilities hierarchy [49] from
the project MAEC [36] of MITRE is a suitable candidate for such
a hierarchy.4 We model this hierarchy as a partially ordered set
4Another project that can help is the MITRE ATT&CK knowledge base [50], but it
does not provide a hierarchy.
(M, ≺M) with ≺M a binary relation over the set of malicious be-
haviors M. The relation m ≺M m′ means that m is a more precise
behavior than m′. Let I be the space of intrusions reported by the
IDS. We assume that for each intrusions i ∈ I, we can map the set of
malicious behaviors Mi ⊆ M exhibited by i. By construct, we have
the following property: if m ≺M m′ then m ∈ Mi =⇒ m′ ∈ Mi.
We also rely on a hierarchy of responses where the first levels
describe coarse-grained responses (e.g., block the network), while
lower levels describe more fine-grained responses (e.g., block port
80). We define the hierarchy as a partially ordered set (R, ≺R) with
≺R a binary relation over the set of responses R (r ≺R r′ means that
r is a more fine-grained response than r′). Let Rm ⊆ R be the set of
responses that can stop a malicious behavior m. By construct, we
have the following property: if r ≺R r′ then r ∈ Rm =⇒ r′ ∈ Rm.
Such responses are based on the OS-features available to restrict
privileges and quotas on the system. We provide an example of this
response hierarchy in Figure 4 of Appendix A.
5.2 Cost Models
Let the space of services be denoted S and let the space of qualita-
tive linguistic constants be a totally ordered set, denoted Q com-
posed as follows: none < very low < low < moderate < high <
very high < critical. We extend each service configuration file with
the notion of response cost (in terms of quality of service lost) and
malicious behavior cost that an administrator needs to set.
A response cost cr ∈ Cr ⊆ Q is the qualitative impact of
applying a response r ∈ R on a service to stop a malicious behavior.
We define rcost : S × R → Cr, the function that takes a service, a
response, and returns the associated response cost.
Response costs allow an administrator or developer of a service
to specify how a response, if applied, would impact the overall
quality of service. The impact can be assessed based on the number
of functions that would be unavailable and their importance for
the service. More importantly, with the value critical, we consider
that a response would disable a core function of a service and thus
should never be applied.
For example, the policy of a web server could express that the
ability to listen on ports 80 and 443 is critical for its core functions.
However, if the web server would lose write access to the filesystem,
the cost would be high and not critical, since it can still provide
access to websites for many use cases.
A malicious behavior cost cmb ∈ Cmb ⊆ Q is the qualitative
impact of a malicious behavior m ∈ M. We define mbcost : S× M →
Cmb, the function that takes a service, a malicious behavior, and
returns the associated cost.
We require for each service that a malicious behavior cost is
set for the first level of the malicious behaviors hierarchy (e.g.,
there are only 20 elements on the first level of the hierarchy from
MAEC). We do not require it for other levels, but if more costs are
set, then the response selection will be more accurate. The mbcost
function associates a cost for each malicious behavior m. The cost,
however, could be undefined. In such a case, we take the cost of m′
such that mbcost(s, m′) is defined, m ≺M m′, and ∄ m′′ such that
m < m′′ < m′ with mbcost(s, m′′) defined.
Following the same example, the policy could express that in-
trusions that compromise data availability (e.g., ransomware) have
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Chevalier et al.
a high impact for the web server, since it would not provide ac-
cess to the websites anymore. While on the other hand, it could
express that an intrusion that only consumes system resources (e.g.,
a cryptocurrency mining malware) has a moderate cost.
Both costs need to be configured depending on the context of
the service. For example, a web server that provides static content
does not have the same context, hence the same costs than one that
handles transactions.
5.3 Response Performance
While responses have varying costs on the quality of service, they
also differ in performance against a malicious behavior. Hence, in
our framework, we consider the performance as a criterion to select
a response, among others.5
The space of qualitative response performances is denoted Pr ⊆
Q. We define rper f : R×M → Pr, that takes a response, a malicious
behavior, and returns the associated performance.
In contrast to the cost models previously defined that are specific
to a system and its context (and need to be set, e.g., by an adminis-
trator of the system), such a value only depends on the malicious
behavior and is provided by security experts that analyzed similar
intrusions and proposed responses with their respective perfor-
mance. Such information comes from threat intelligence sources
that are shared, for example, using STIX. For example, STIX has a
property called "efficacy" in its "course-of-action" object that repre-
sent responses.
5.4 Risk Matrix
We rely on the definition of a risk matrix that satisfies the axioms
proposed (i.e., weak consistency, betweenness, and consistent col-
oring) to provide consistent risk assessments [1]. The risk matrix
needs to be defined ahead of time by the administrator depending