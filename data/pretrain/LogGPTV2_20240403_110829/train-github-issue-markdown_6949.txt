### Issue Report

#### Preliminary Checks
- I have searched the issues of this repository and believe that this is not a duplicate.
- I have reviewed the FAQ of this repository and believe that this is not a duplicate.

#### Environment
- **Dubbo Version:** 2.7.0
- **Operating System:** macOS
- **Java Version:** 1.8

#### Steps to Reproduce the Issue
1. Start the Dubbo provider in Spring Boot Annotation mode with the following configuration:

   ```java
   @SpringBootApplication
   @DubboComponentScan
   public class SpringBootProvider {
       public static void main(String[] args) {
           new EmbeddedZooKeeper(2181, false).start();
           SpringApplication.run(SpringBootProvider.class, args);
       }
   }
   ```

2. Set the parameters for the `ServiceBean` as follows:

   ```java
   @Service(parameters = {"key", "value"})
   public class DemoServiceImpl implements DemoService {
   }
   ```

3. Run the `SpringBootProvider` to start the service.

Please provide a [GitHub address] to reproduce this issue.

#### Expected Result
The service should start successfully and register with Zookeeper.

#### Actual Result
The service fails to start and throws the following exception:

```java
Caused by: org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.lang.String[]' to required type 'java.util.Map' for property 'parameters'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String[]' to required type 'java.util.Map' for property 'parameters': no matching editors or conversion strategy found
    at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:591) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:603) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:216) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1532) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1491) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1231) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:551) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    ... 15 more
Caused by: java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String[]' to required type 'java.util.Map' for property 'parameters': no matching editors or conversion strategy found
    at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:306) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.AbstractNestablePropertyAccessor.convertForProperty(AbstractNestablePropertyAccessor.java:603) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:216) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1532) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1491) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1231) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:551) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]
    ... 15 more
```

#### Investigation
Based on my investigation, the `ConstructorArgValue` is being discarded in the `ServiceAnnotationBeanPostProcessor`, which is causing the issue. Specifically, the `buildServiceBeanDefinition` method does not handle the `parameters` correctly:

```java
private AbstractBeanDefinition buildServiceBeanDefinition(Service service, Class<?> interfaceClass, String annotatedServiceBeanName) {
    BeanDefinitionBuilder builder = rootBeanDefinition(ServiceBean.class)
            .addConstructorArgValue(service)
            // References "ref" property to annotated-@Service Bean
            .addPropertyReference("ref", annotatedServiceBeanName)
            .addPropertyValue("interface", interfaceClass.getName());
}
```

This results in the `parameters` being passed as a `String[]` instead of a `Map<String, String>`, leading to the conversion failure.

#### Suggested Solution
To resolve this issue, you can modify the `buildServiceBeanDefinition` method to properly handle the `parameters` as a `Map<String, String>`:

```java
private AbstractBeanDefinition buildServiceBeanDefinition(Service service, Class<?> interfaceClass, String annotatedServiceBeanName) {
    BeanDefinitionBuilder builder = rootBeanDefinition(ServiceBean.class)
            .addConstructorArgValue(service)
            // References "ref" property to annotated-@Service Bean
            .addPropertyReference("ref", annotatedServiceBeanName)
            .addPropertyValue("interface", interfaceClass.getName());

    if (service.parameters() != null && service.parameters().length > 0) {
        Map<String, String> parametersMap = new HashMap<>();
        for (int i = 0; i < service.parameters().length; i += 2) {
            parametersMap.put(service.parameters()[i], service.parameters()[i + 1]);
        }
        builder.addPropertyValue("parameters", parametersMap);
    }

    return builder.getBeanDefinition();
}
```

This change ensures that the `parameters` are correctly converted to a `Map<String, String>` before being added to the `ServiceBean` definition.