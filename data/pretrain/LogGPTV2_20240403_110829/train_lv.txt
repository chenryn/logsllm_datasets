.sh conforming to
general unix conventions.
.sh bugs
this list is not exhaustive.
.sh see also
.br file (1),
.br make (1)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/tailq.3
.\" copyright (c) 1993 michael haardt, (PI:EMAIL)
.\" and copyright 2006, 2008, michael kerrisk 
.\" fri apr  2 11:32:09 met dst 1993
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified wed jul 21 19:52:58 1993 by rik faith 
.\" modified sun aug 21 17:40:38 1994 by rik faith 
.\"
.th brk 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
brk, sbrk \- change data segment size
.sh synopsis
.nf
.b #include 
.pp
.bi "int brk(void *" addr );
.bi "void *sbrk(intptr_t " increment );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br brk (),
.br sbrk ():
.nf
    since glibc 2.19:
        _default_source
            || ((_xopen_source >= 500) &&
                ! (_posix_c_source >= 200112l))
.\"    (_xopen_source >= 500 ||
.\"        _xopen_source && _xopen_source_extended) &&
    from glibc 2.12 to 2.19:
        _bsd_source || _svid_source
            || ((_xopen_source >= 500) &&
                ! (_posix_c_source >= 200112l))
.\"    (_xopen_source >= 500 ||
.\"        _xopen_source && _xopen_source_extended) &&
    before glibc 2.12:
        _bsd_source || _svid_source || _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
.fi
.sh description
.br brk ()
and
.br sbrk ()
change the location of the
.ir "program break" ,
which defines the end of the process's data segment
(i.e., the program break is the first location after the end of the
uninitialized data segment).
increasing the program break has the effect of
allocating memory to the process;
decreasing the break deallocates memory.
.pp
.br brk ()
sets the end of the data segment to the value specified by
.ir addr ,
when that value is reasonable, the system has enough memory,
and the process does not exceed its maximum data size (see
.br setrlimit (2)).
.pp
.br sbrk ()
increments the program's data space by
.i increment
bytes.
calling
.br sbrk ()
with an
.i increment
of 0 can be used to find the current location of the program break.
.sh return value
on success,
.br brk ()
returns zero.
on error, \-1 is returned, and
.i errno
is set to
.br enomem .
.pp
on success,
.br sbrk ()
returns the previous program break.
(if the break was increased,
then this value is a pointer to the start of the newly allocated memory).
on error,
.i "(void\ *)\ \-1"
is returned, and
.i errno
is set to
.br enomem .
.sh conforming to
4.3bsd; susv1, marked legacy in susv2, removed in posix.1-2001.
.\"
.\" .br brk ()
.\" and
.\" .br sbrk ()
.\" are not defined in the c standard and are deliberately excluded from the
.\" posix.1-1990 standard (see paragraphs b.1.1.1.3 and b.8.3.3).
.sh notes
avoid using
.br brk ()
and
.br sbrk ():
the
.br malloc (3)
memory allocation package is the
portable and comfortable way of allocating memory.
.pp
various systems use various types for the argument of
.br sbrk ().
common are \fiint\fp, \fissize_t\fp, \fiptrdiff_t\fp, \fiintptr_t\fp.
.\" one sees
.\" \fiint\fp (e.g., xpgv4, du 4.0, hp-ux 11, freebsd 4.0, openbsd 3.2),
.\" \fissize_t\fp (osf1 2.0, irix 5.3, 6.5),
.\" \fiptrdiff_t\fp (libc4, libc5, ulibc, glibc 2.0, 2.1),
.\" \fiintptr_t\fp (e.g., xpgv5, aix, sunos 5.8, 5.9, freebsd 4.7, netbsd 1.6,
.\" tru64 5.1, glibc2.2).
.ss c library/kernel differences
the return value described above for
.br brk ()
is the behavior provided by the glibc wrapper function for the linux
.br brk ()
system call.
(on most other implementations, the return value from
.br brk ()
is the same; this return value was also specified in susv2.)
however,
the actual linux system call returns the new program break on success.
on failure, the system call returns the current break.
the glibc wrapper function does some work
(i.e., checks whether the new break is less than
.ir addr )
to provide the 0 and \-1 return values described above.
.pp
on linux,
.br sbrk ()
is implemented as a library function that uses the
.br brk ()
system call, and does some internal bookkeeping so that it can
return the old break value.
.sh see also
.br execve (2),
.br getrlimit (2),
.br end (3),
.br malloc (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2012 tomáš pospíšek (PI:EMAIL),
.\"     fri, 03 nov 2012 22:35:33 +0100
.\" and copyright (c) 2012 eric w. biederman 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, write to the free
.\" software foundation, inc., 59 temple place, suite 330, boston, ma 02111,
.\" usa.
.\" %%%license_end
.\"
.\"
.th veth 4 2021-03-22 "linux" "linux programmer's manual"
.sh name
veth \- virtual ethernet device
.sh description
the
.b veth
devices are virtual ethernet devices.
they can act as tunnels between network namespaces to create
a bridge to a physical network device in another namespace,
but can also be used as standalone network devices.
.pp
.b veth
devices are always created in interconnected pairs.
a pair can be created using the command:
.pp
.in +4n
.ex
# ip link add  type veth peer name 
.ee
.in
.pp
in the above,
.i p1-name
and
.i p2-name
are the names assigned to the two connected end points.
.pp
packets transmitted on one device in the pair are immediately received on
the other device.
when either devices is down the link state of the pair is down.
.pp
.b veth
device pairs are useful for combining the network
facilities of the kernel together in interesting ways.
a particularly interesting use case is to place one end of a
.b veth
pair in one network namespace and the other end in another network namespace,
thus allowing communication between network namespaces.
to do this, one can provide the
.b netns
parameter when creating the interfaces:
.pp
.in +4n
.ex
# ip link add  netns  type veth peer  netns 
.ee
.in
.pp
or, for an existing
.b veth
pair, move one side to the other namespace:
.pp
.in +4n
.ex
# ip link set  netns 
.ee
.in
.pp
.br ethtool (8)
can be used to find the peer of a
.b veth
network interface, using commands something like:
.pp
.in +4n
.ex
# \fbip link add ve_a type veth peer name ve_b\fp   # create veth pair
# \fbethtool \-s ve_a\fp         # discover interface index of peer
nic statistics:
     peer_ifindex: 16
# \fbip link | grep \(aq\(ha16:\(aq\fp   # look up interface
16: ve_b@ve_a:  mtu 1500 qdisc ...
.ee
.in
.sh "see also"
.br clone (2),
.br network_namespaces (7),
.br ip (8),
.br ip\-link (8),
.br ip\-netns (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2009 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2009-01-12, mtk, created
.\"
.th rtld-audit 7 2020-11-01 "linux" "linux programmer's manual"
.sh name
rtld-audit \- auditing api for the dynamic linker
.sh synopsis
.nf
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.fi
.sh description
the gnu dynamic linker (run-time linker)
provides an auditing api that allows an application
to be notified when various dynamic linking events occur.
this api is very similar to the auditing interface provided by the
solaris run-time linker.
the necessary constants and prototypes are defined by including
.ir  .
.pp
to use this interface, the programmer creates a shared library
that implements a standard set of function names.
not all of the functions need to be implemented: in most cases,
if the programmer is not interested in a particular class of auditing event,
then no implementation needs to be provided for the corresponding
auditing function.
.pp
to employ the auditing interface, the environment variable
.br ld_audit
must be defined to contain a colon-separated list of shared libraries,
each of which can implement (parts of) the auditing api.
when an auditable event occurs,
the corresponding function is invoked in each library,
in the order that the libraries are listed.
.ss la_version()
\&
.nf
.bi "unsigned int la_version(unsigned int " version );
.fi
.pp
this is the only function that
.i must
be defined by an auditing library:
it performs the initial handshake between the dynamic linker and
the auditing library.
when invoking this function, the dynamic linker passes, in
.ir version ,
the highest version of the auditing interface that the linker supports.
.pp
a typical implementation of this function simply returns the constant
.br lav_current ,
which indicates the version of
.i 
that was used to build the audit module.
if the dynamic linker does
not support this version of the audit interface, it will refuse to
activate this audit module.
if the function returns zero, the dynamic
linker also does not activate this audit module.
.pp
in order to enable backwards compatibility with older dynamic linkers,
an audit module can examine the
.i version
argument and return an earlier version than
.br lav_current ,
assuming the module can adjust its implementation to match the
requirements of the previous version of the audit interface.
the
.b la_version
function should not return the value of
.i version
without further checks because it could correspond to an interface
that does not match the
.i 
definitions used to build the audit module.
.ss la_objsearch()
\&
.nf
.bi "char *la_objsearch(const char *" name ", uintptr_t *" cookie ,
.bi "                   unsigned int " flag );
.fi
.pp
the dynamic linker invokes this function to inform the auditing library
that it is about to search for a shared object.
the
.i name
argument is the filename or pathname that is to be searched for.
.i cookie
identifies the shared object that initiated the search.
.i flag
is set to one of the following values:
.tp 17
.b la_ser_orig
this is the original name that is being searched for.
typically, this name comes from an elf
.b dt_needed
entry, or is the
.i filename
argument given to
.br dlopen (3).
.tp
.b la_ser_libpath
.i name
was created using a directory specified in
.br ld_library_path .
.tp
.b la_ser_runpath
.i name
was created using a directory specified in an elf
.b dt_rpath
or
.b dt_runpath
list.
.tp
.b la_ser_config
.i name
was found via the
.br ldconfig (8)
cache
.ri ( /etc/ld.so.cache ).
.tp
.b la_ser_default
.i name
was found via a search of one of the default directories.
.tp
.b la_ser_secure
.i name
is specific to a secure object (unused on linux).
.pp
as its function result,
.br la_objsearch ()
returns the pathname that the dynamic linker should use
for further processing.
if null is returned, then this pathname is ignored for further processing.
if this audit library simply intends to monitor search paths, then
.i name
should be returned.
.ss la_activity()
\&
.nf
.bi "void la_activity( uintptr_t *" cookie ", unsigned int "flag  );
.fi
.pp
the dynamic linker calls this function to inform the auditing library
that link-map activity is occurring.
.i cookie
identifies the object at the head of the link map.
when the dynamic linker invokes this function,
.i flag
is set to one of the following values:
.tp 19
.b la_act_add
new objects are being added to the link map.
.tp
.b la_act_delete
objects are being removed from the link map.
.tp
.b la_act_consistent
link-map activity has been completed: the map is once again consistent.
.ss la_objopen()
\&
.nf
.bi "unsigned int la_objopen(struct link_map *" map ", lmid_t " lmid ,
.bi "                        uintptr_t *" cookie );
.fi
.pp
the dynamic linker calls this function when a new shared object is loaded.
the
.i map
argument is a pointer to a link-map structure that describes the object.
the
.i lmid
field has one of the following values
.tp 17
.b lm_id_base
link map is part of the initial namespace.
.tp
.b lm_id_newlm
link map is part of a new namespace requested via
.br dlmopen (3).
.pp
.i cookie
is a pointer to an identifier for this object.
the identifier is provided to later calls to functions
in the auditing library in order to identify this object.
this identifier is initialized to point to object's link map,
but the audit library can change the identifier to some other value
that it may prefer to use to identify the object.
.pp
as its return value,
.br la_objopen ()
returns a bit mask created by oring zero or more of the
following constants,
which allow the auditing library to select the objects to be monitored by
.br la_symbind* ():
.tp 17
.b la_flg_bindto
audit symbol bindings to this object.
.tp
.b la_flg_bindfrom
audit symbol bindings from this object.
.pp
a return value of 0 from
.br la_objopen ()
indicates that no symbol bindings should be audited for this object.
.ss la_objclose()
\&
.nf
.bi "unsigned int la_objclose(uintptr_t *" cookie );
.fi
.pp
the dynamic linker invokes this function after any finalization
code for the object has been executed,
before the object is unloaded.
the
.i cookie
argument is the identifier obtained from a previous invocation of
.br la_objopen ().
.pp