tributions are commonly observed in the wild, but we emphasize
that the actual performance gains that a database can expect from
top-K replication is highly dependent on the underlying query dis-
tribution. Figure 2 plots the mean query execution time for top-K
and non-top-K queries, as well as the average (amortized) cost per
query when 80% of queries are top-K queries and 20% are not.
Note that the average query execution time is well below that of
Percy++ without PSPIR functionality (cf. Figure 1).
We also measured the cost to the servers of actually computing
the top-K using the SEPIA library. We found that using 160-bit
secret shares results in poor performance compared to the bench-
marks presented by Burkhart et al. [15]. Fortunately, in our case
we can assert that all shared secrets are much smaller than q/2,
which enables us to eliminate two-thirds of the computation in the
bottleneck ‘less than’ computation. Furthermore, about 86% of the
remaining computation time is spent generating random bit-wise
secret shares modulo q. These random shares can be precomputed
between top-K computations, resulting in a respectable 57 less-
than operations per second in our tests. This still leads to signiﬁ-
cant computation times to isolate the top-K using Burkhart et al.’s
PPTK algorithm [14] when the database size is large; thus, we fur-
 0 50 100 150 200 250 300 0 5 10 15 20 25 30 35 40 45Compute time (s)Database size (GB)Percy++ vs. Percy++ w/ PSPIRPercy++ with PSPIR (w = 160)Percy++ only (w = 160)Percy++ only (w = 8)685Figure 2: Query execution time for Percy++ with PSPIR and top-K replication (k = 4, t = 2, K = (cid:98)r/5(cid:99)). Queries follow a bounded Pareto
distribution that satisﬁes the 80/20 rule; thus, 80% of queries are for the top-K entries and 20% are for the remaining r − K entries (labelled ‘Non-
Top-K’ on the plot). The average query cost for the top-K replicated database ranges from just 51% that of an equivalent non-replicated database
for a 1 GB database down to 36% for a 44 GB database. Error bars are plotted for all data points, but are small and may therefore be difﬁcult to see.
ther optimize the algorithm by relaxing PPTK to a ‘top-K-ish’ al-
gorithm. This reduces computation times quite signiﬁcantly. For
example, with a 1 GB database (r = 7328 records) and a bounded
80/20 Pareto distribution our modiﬁed PPTK takes an average of
about 9700 comparisons (≈ 2.8 minutes) to ﬁnd the top 19–21%
of records, whereas standard PPTK takes about 14600 comparisons
(≈ 4.2 minutes); for a 20 GB database (r = 32768 records) this
ﬁgure is about 33500 comparisons (≈ 11.0 minutes) for our relaxed
PPTK versus 137500 comparisons (≈ 40.2 minutes) for standard
PPTK, and for a 44 GB database (r = 48603 records) it is about
48605 comparisons (≈ 14.2 minutes) for our relaxed PPTK versus
197500 comparisons (≈ 57.7 minutes) for standard PPTK. More-
over, a large fraction of trials with standard PPTK had no solution
(i.e., no unique top-K) and the algorithm therefore returned only
the top-K-ish anyhow. Note that we generated our test sets using
a bounded 80/20 Pareto distribution and then used the CDF for this
distribution as an ‘initial guess’ in the PPTK algorithm. In prac-
tice, such an accurate guess will typically not be available and the
actual number of comparisons will be greater than our predictions.
Nonetheless, we feel conﬁdent in concluding that even for large
databases with imperfect knowledge of the underlying query distri-
bution, the cost of computing the top-K will be quite reasonable.
6. RELATED WORK
The related bodies of work are symmetric private information
retrieval (SPIR), oblivious transfer (OT), OT with access control
(OTAC), and priced OT (POT).
OT schemes allow a database X consisting of two records and
a user holding an index i ∈ {0, 1} to run a protocol that results
in the user learning the ith record and no information the (1 − i)th
record, while the database learns nothing about i. Unlike PIR and
SPIR, however, OT schemes have no sublinear communication re-
quirements. Brassard et al. [12] considered the more general notion
of 1-out-of-n OT, where the database holds n records and the user
learns the record at index i, and learns nothing about the remaining
n − 1 records [51]; the database still learns nothing about i.
SPIR schemes [31] address the honest-user assumption of PIR
by additionally preserving database privacy so that dishonest users
cannot learn any information about other database records beyond
the record retrieved. All existing communication-efﬁcient 1-out-of-
n OT schemes are essentially single-server SPIR, whereas all ex-
isting communication-efﬁcient distributed OT schemes [31] (i.e.,
two or more servers) of 1-out-of-n OT schemes are essentially
multi-server SPIR. The ﬁrst work on preserving database privacy
against dishonest users in a multi-server PIR setting was by Gert-
ner et al. [31]. They propose a single-round (cid:96)-server SPIR scheme
with communication complexity O(log n · n1/(2(cid:96)−1)) for (cid:96) ≥ 2
and a O(log n)-server scheme with communication complexity
O(log2 n · log log n). Kushilevitz and Ostrovsky [42] brieﬂy dis-
cuss how to convert their single-server PIR into SPIR using general
zero-knowledge proof techniques, however they propose no con-
crete constructions. No existing SPIR scheme simultaneously pro-
vides support for both access control and tiered pricing.
Several OTAC schemes [17, 23, 57] were recently proposed. As
with our approach, these schemes typically consist of three parties:
user, database, and issuer. The issuer provides users needing ac-
cess to the database with credentials encoding the access rights of
users as an attribute set. The database encrypts its content under
an access policy speciﬁc to each record and makes the encrypted
contents available to users for download. A user with a valid cre-
dential can run the OTAC protocol with the database to obtain a
decryption key for a particular record. After the protocol, the data-
base learns that a user with a valid credential has obtained a key,
but learns nothing about the user’s credential or the decryption key
issued. User’s download the entire encrypted database and use the
key obtained to decrypt the desired record. Zhang et al. [57] used
attribute-based encryption to specify record-level access policies in
disjunctive form without requiring duplication of database records.
However, these schemes do not consider an economic model where
users pay for each record and their high communication overhead
makes them considerably more costly than SPIR.
POT schemes [1, 18] were originally introduced by Aiello et
al. [1] to explore the difference between physical goods requiring
close monitoring of inventory level and digital goods that are essen-
tially of unlimited supply. In their model, users ﬁrst deposit some
money with the database and then proceed to buy multiple digi-
tal goods from the database, such that the total price of purchased
goods does not exceed the user’s deposit/balance. The database
does not learn which digital goods the user has purchased. How-
ever, since the database tracks the users’ accounts, all queries by
a single user are linkable; thus, the approach lacks the anonymity
properties that we seek. This enables the database server to de-
duce the number of digital goods a particular user has purchased,
the average price of those purchases, and the user’s spending pat-
tern [18]. Furthermore, the scheme provides no way for users to
 0 50 100 150 200 250 300 0 5 10 15 20 25 30 35 40 45Compute time (s)Database size (GB)Impact of Top-K ReplicationNon-Top-K queryAverage queryTop-K query686recharge their balance, which means that when a user’s balance be-
comes lower than the price of any record, the remaining balance
is rendered useless. Camenisch et al. [18] address these problems
by encoding users’ wallets in an anonymous credential so that the
database is no longer required to maintain user-speciﬁc state infor-
mation; as a result, user purchases become unlinkable. They also
lay out an extension that makes use of a trusted third party to fa-
cilitate a fair purchase protocol; i.e., an optimistic fair exchange
protocol to prevent the database server from cheating by not send-
ing the correct decryption key (or wallet) to the user.
All of the above priced and access-control-capable OT and SPIR
schemes lack some ingredients necessary for deployment in a prac-
tical setting. The foremost missing ingredient is the right combina-
tion of functionalities for access control, tiered pricing, support for
multiple payees, sublinear communication complexity, and avail-
ability of practical implementations. The SPIR schemes [31, 42]
provide no pricing or access control functions. OT schemes (i.e.,
1-out-of-n) have prohibitively expensive communication costs and
require a static encrypted database, which potentially breaks other
applications using the same database. In particular, existing OTAC
schemes [17, 23, 57] do not provide pricing functions, while the
POT schemes [1, 18], on the other hand, provide no access control
functions. Note that one cannot simply adopt our approach of set-
ting the price of a record higher than the maximum wallet balance,
since all users in these schemes pay according to the same price list
(and thus would automatically have the same access privileges).
Moreover, no existing POT scheme supports multiple payees sell-
ing goods through a common database.
Much like our top-K replication strategy, a few research efforts
have also focused on increasing the practicality of PIR by ﬁnd-
ing ways around PIR’s linear computational requirements. Beimel
et al. [5] propose preprocessing, which enables PIR servers to an-
swer queries with only sublinear computation by precomputing and
storing some extra information (the size of which is polynomial in
the database size n). Ishai et al. [37] propose a different approach
called batch coding that — while still requiring linear computation
— enables the servers to process several PIR queries by the same
user simultaneously, thus providing an amortized cost per query
that is strictly smaller than n. Nearest to our own work, Olumoﬁn
and Goldberg [47] recently proposed an approach to indexing and
partitioning large databases into highly diverse bucket portions that
users can query independently. This approach makes querying such
large databases with PIR practical, and simpliﬁes the tradeoff be-
tween privacy and runtime; however, it does not include any way
for the database servers to dynamically learn about and exploit the
relative popularities of individual records to improve performance,
as does the top-K approach taken in this work.
7. CONCLUSION
We have extended Goldberg’s multi-server information-theoretic
PIR with a suite of protocols for privacy-preserving e-commerce.
Our protocols add support for tiered pricing with multiple payees,
group-based access control lists with record-level granularity, and
dynamic top-K replication, while preserving the sublinear com-
munication complexity of PIR; no other scheme for priced retrieval
using PIR or OT supports tiered pricing, multiple payees, access
control, or dynamic replication. We have implemented the single-
payee variant of our PSPIR protocol atop Percy++, an open-source
implementation of Goldberg’s PIR scheme, and evaluated its per-
formance empirically. We also evaluated the cost and impact of
top-K replication. Our measurements indicate that this combina-
tion of protocols results in performance that is acceptable for de-
ployment in real-world e-commerce applications. Furthermore, the
extensive functionality of our protocols, SPIR’s sublinear commu-
nication costs, and the ability to operate on an unencrypted data-
base, makes our approach more practical than competing OT-based
approaches. For future work, we intend to optimize our implemen-
tation and add full support for multiple payees (which we do not
expect to signiﬁcantly alter the runtime), and to incorporate our
protocols into Percy++.
Acknowledgements. We are extremely thankful to Martin Burk-
hart for his assistance with SEPIA. This research is supported by
NSERC, OGS, mprime, and a Cheriton Graduate Scholarship.
REFERENCES
[1] W. Aiello, Y. Ishai, and O. Reingold. Priced Oblivious Trans-
fer: How to Sell Digital Goods. In Proceedings of EURO-
CRYPT 2001, Innsbruck, Austria, May 2001.
[2] D. Asonov. Querying Databases Privately: A New Approach
To Private Information Retrieval, volume 3128 of LNCS.
Springer, 2004.
[3] M. H. Au, W. Susilo, and Y. Mu. Constant-Size Dynamic k-
TAA. In Proceedings of SCN 2006, Maiori, Italy, September
2006.
[4] J. Bar-Ilan and D. Beaver. Non-Cryptographic Fault-Tolerant
Computing in Constant Number of Rounds of Interaction. In
Proceedings of PODC 1989, Edmonton, AB, August 1989.
[5] A. Beimel, Y. Ishai, and T. Malkin. Reducing the Servers’
Computation in Private Information Retrieval: PIR with Pre-
processing. In Proceedings of CRYPTO 2000, Santa Barbara,
CA, August 2000.
[6] M. Bellare, J. A. Garay, and T. Rabin. Batch Veriﬁcation with
Applications to Cryptography and Checking. In Proceedings
of LATIN 1998, Campinas, Brazil, April 1998.
[7] M. Bellare, J. A. Garay, and T. Rabin. Fast Batch Veriﬁcation
for Modular Exponentiation and Digital Signatures. In Pro-
ceedings of EUROCRYPT 1998, Espoo, Finland, May 1998.
[8] D. Boneh, B. Lynn, and H. Shacham. Short Signatures from
the Weil Pairing. Journal of Cryptology, 17(4):297–319, Jan-
uary 2004.
[9] F. Boudot. Efﬁcient Proofs that a Committed Number Lies in
an Interval. In Proceedings of EUROCRYPT 2000, Bruges,
Belgium, May 2000.
[10] S. Brands. Restrictive Blinding of Secret-Key Certiﬁcates. In
Proceedings of EUROCRYPT 1995, Saint-Malo, France, May
1995.
[11] S. A. Brands. Rethinking Public Key Infrastructures and Dig-
ital Certiﬁcates: Building in Privacy. MIT Press, 2000.
[12] G. Brassard, C. Crépeau, and J.-M. Robert. All-or-Nothing
In Proceedings of CRYPTO 1986,
Disclosure of Secrets.
Santa Barbara, CA, 1986.
Aggregation. Version 0.8.2.
[13] M. Burkhart. SEPIA: Security through Private Information
[14] M. Burkhart and X. Dimitropoulos. Fast Privacy-Preserving
Top-k Queries using Secret Sharing. In Proceedings of IC-
CCN 2010, Zurich, Switzerland, August 2010.
[15] M. Burkhart, M. Strasser, D. Many, and X. A. Dimitropoulos.
SEPIA: Privacy-Preserving Aggregation of Multi-Domain
In Proceedings of USENIX
Network Events and Statistics.
Security 2010, Washington, DC, August 2010.
[16] J. Camenisch. Group Signature Schemes and Payment Sys-
tems Based on the Discrete Logarithm Problem. PhD thesis,
ETH Zurich, 1998. Reprint as vol. 2 of ETH Series in In-
formation Security and Cryptography, Hartung-Gorre Verlag,
Konstanz, 1998.
[17] J. Camenisch, M. Dubovitskaya, and G. Neven. Oblivious
Transfer with Access Control. In Proceedings of ACM CCS
2009, Chicago, IL, November 2009.
[18] J. Camenisch, M. Dubovitskaya, and G. Neven. Unlinkable
Priced Oblivious Transfer with Rechargeable Wallets. In Pro-
ceedings of FC 2010, Tenerife, Canary Islands, January 2010.
687[19] J. Camenisch, M. Dubovitskaya, G. Neven, and G. M. Za-
verucha. Oblivious Transfer with Hidden Access Control
Lists. In Proceedings of PKC 2011, Taormina, Italy, March
2011.
[20] J. Camenisch and M. Michels. Proving in Zero-Knowledge
that a Number Is the Product of Two Safe Primes. In Proceed-
ings of EUROCRYPT 1999, Prague, Czech Republic, May
1999.
[21] B. Chor, N. Gilboa, and M. Naor. Private Information Re-
trieval by Keywords. Cryptology ePrint Archive, Report
1998/003, 1998. http://eprint.iacr.org/.
[22] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Pri-
In Proceedings of FOCS 1995,
vate Information Retrieval.
Milwaukee, WI, October 1995.
[23] S. E. Coull, M. Green, and S. Hohenberger. Controlling Ac-