ample in Figure 4 (b), a packet is sent at time 𝑡0 and arrives
at time 𝑡2. Assume that the TACK is generated and sent at
time 𝑡3, the receiver computes the TACK delay ∆𝑡 = 𝑡3 − 𝑡2
. The sender therefore computes the RTT according to ∆𝑡,
𝑡0 and the TACK arrival time (𝑡1), i.e., 𝑅𝑇 𝑇 = 𝑡1 − 𝑡0 − ∆𝑡.
By measuring ∆𝑡 at the receiver, TACK assures an explicit
correction for a more accurate RTT estimate.
The problem here is that multiple data packets might be
received during the TACK interval, as shown in Figure 4 (c),
generating only one RTT sample among multiple packets is
likely to result in biases. For example, a larger minimum RTT
estimate or a smaller maximum RTT estimate. In general, the
higher the throughput, the larger the biases. One alternative
way to reduce biases can be that, each TACK carries the
per-packet ∆𝑡 (specific TACK delays for each data packet) for
the sender to generate more RTT samples. However, (1) the
overhead is high, which is unacceptable especially under high-
bandwidth transport. Also, (2) the number of data packets
might be far more than the maximum number of ∆𝑡 that a
TACK is capable to carry.
Apart from loss recovery and round-trip timing, applying
TACK also falls short of send rate control with regard to
send pattern and send window update.
Burst send pattern. A burst of packets can be sent in
response to a single delayed ACK. Legacy TCP usually sends
micro bursts of one to three packets, which are bounded
Figure 4: TACK-based round-trip timing: a case s-
tudy.
by 𝐿 ≤ 2 according to definition of TCP’s delayed ACK [7].
However, the fewer ACKs sent, the larger the bursts of packets
released. Since TACK might be excessively delayed, the burst
send pattern is non-negligible as it may have a larger buffer
requirement, higher loss rate and longer queueing delay if
not carefully handled.
Delayed send window update. Send window update re-
quires ACKs to update the largest acknowledged packet and
the announcement window (AWND). With a small frequency,
TACK probably delays acknowledging packet receipts and
reporting the AWND, resulting in feedback lags and band-
width under-utilization. For example, 𝑓𝑡𝑎𝑐𝑘 = 20 Hz, then
TACK is sent every 50 ms. Assume a TACK notifies AWND
= 0 due to receive buffer runs out at 𝑡 = 0 ms, upon receiving
this TACK, the sender stops sending data. In the case that
the receive buffer is released at 𝑡 = 5 ms due to loss recovery,
the sender continues to be blocked for another 45 ms until
a subsequent TACK is sent at 𝑡 = 50 ms, and thus wastes
opportunity of sending data. TACK loss further aggravates
this issue.
4.4 TACK-based acknowledgement
mechanism
Applying TACK significantly reduces ACK frequency. Howev-
er, as discussed above, independently using TACK probably
falls short of robust loss recovery, accurate round-trip timing,
and effective send rate control. What we really want, for
WLAN, is a full TACK-based acknowledgement mechanis-
m that overcomes the hurdles for applying TACK, using a
controlled frequency of ACKs to support efficient transport.
There are some notable features of the TACK-based ac-
knowledgement mechanism which are important for reasoning
about the differences from legacy TCP. We briefly describe
these features below.
More types of ACKs. Apart from the ACK type of TACK,
we also introduce the ACK type of IACK (“Instant ACK”) to
assure timely feedback upon instant events. For example, (1)
when loss occurs, the receiver sends an IACK to timely pull
the desired range of lost packets from the sender. This loss-
event-driven IACK enables the rapid response to loss event,
effectively avoiding timeouts. (2) An IACK may be sent in
the case that the receive buffer nearly runs out, which assures
timely send window update. In addition, (3) the sender might
send an IACK to sync an updated 𝑅𝑇 𝑇𝑚𝑖𝑛 with the receiver
for adjusting TACK interval.
IACK and TACK are complementary. IACK assures timely
and deterministic signaling while TACK acts as the last
TACK(cid:440)tt0t1t2t3SenderReceiverSYNSYN+ACKACKt0t1TACKt0t1t3...t0't0''t2t2't2''(b)(c)(a)Sample RTT = t1 - t0 - (cid:440)tInitial RTT = t1 - t0RTTmin = ?SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Tong Li et al.
resort mechanism in the case of ACK loss (S5.1). Specific and
additional types of IACK can be defined on demand in the
future.
More information carried in ACKs. First of all, reducing
ACK frequency may require extending TACK to carry more
information if the link has deteriorated. For example, to
reduce feedback delay under excessive ACK loss, TACK is
expected to report as many blocks as possible, in which each
block reports a contiguous range of lost or received packets
(see S5.1). It is worth mentioning that this rich information
can be carried on demand. Specifically, only when the loss rate
on the ACK path has reached a critical level (see Equation (6))
will carrying more information be profitable.
TACK might also be required to carry the TACK delay
for accurate RTT estimation and might carry timestamps
if latency such as one-way delay is computed at the sender.
Furthermore, although the sender can achieve an approxi-
mate computation accuracy of some transport states, such as
delivery rate, congestion window and loss rate, the receiver-
based computation is more straightforward in the context
of a reduced ACK frequency. Optionally, by shifting these
functionalities from sender to receiver and syncing results
through TACKs, the total CPU and memory usages at both
endpoints might be reduced at the cost of the larger size of
TACKs.
Note that carrying more information in TACK does not
introduce excessive overhead over WLAN, as it only increases
the size of ACK rather than increasing the number of ACKs.
We believe the improved feedback robustness will more than
pay for the TACK extension overhead.
Less number of ACKs. Although adopting more types of
ACKs, we still have the advantages of significantly reducing
ACK frequency in most cases. This is because the event-
driven IACK is rarely triggered, whose frequency is usually
low and negligible. For example, with a packet loss rate (𝜌),
the highest frequency of the loss-event-driven IACK is 𝜌·𝑏𝑤
𝑀 𝑆𝑆 .
Since 𝜌 is usually a small percentage (e.g., 
𝑏𝑑𝑝 ≥ 𝛽 · 𝐿 · 𝑀 𝑆𝑆
𝑏𝑑𝑝 < 𝛽 · 𝐿 · 𝑀 𝑆𝑆
(6)
Furthermore, the additional number of blocks (△𝑄) in the
“unacked list” that the TACK should report is given by △𝑄 =
𝜌·𝜌′·𝑏𝑑𝑝