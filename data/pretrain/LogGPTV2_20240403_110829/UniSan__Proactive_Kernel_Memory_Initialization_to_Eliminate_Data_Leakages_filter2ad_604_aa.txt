title:UniSan: Proactive Kernel Memory Initialization to Eliminate Data Leakages
author:Kangjie Lu and
Chengyu Song and
Taesoo Kim and
Wenke Lee
UniSan: Proactive Kernel Memory Initialization
to Eliminate Data Leakages
Kangjie Lu, Chengyu Song, Taesoo Kim, and Wenke Lee
School of Computer Science, Georgia Institute of Technology
ABSTRACT
The operating system kernel is the de facto trusted computing base
for most computer systems. To secure the OS kernel, many security
mechanisms, e.g., kASLR and StackGuard, have been increasingly
deployed to defend against attacks (e.g., code reuse attack). How-
ever, the effectiveness of these protections has been proven to be
inadequate—there are many information leak vulnerabilities in the
kernel to leak the randomized pointer or canary, thus bypassing
kASLR and StackGuard. Other sensitive data in the kernel, such as
cryptographic keys and file caches, can also be leaked. According to
our study, most kernel information leaks are caused by uninitialized
data reads. Unfortunately, existing techniques like memory safety
enforcements and dynamic access tracking tools are not adequate or
efficient enough to mitigate this threat.
In this paper, we propose UniSan, a novel, compiler-based ap-
proach to eliminate all information leaks caused by uninitialized
read in the OS kernel. UniSan achieves this goal using byte-level,
flow-sensitive, context-sensitive, and field-sensitive initialization
analysis and reachability analysis to check whether an allocation has
been fully initialized when it leaves kernel space; if not, it automati-
cally instruments the kernel to initialize this allocation. UniSan’s
analyses are conservative to avoid false negatives and are robust by
preserving the semantics of the OS kernel. We have implemented
UniSan as passes in LLVM and applied it to the latest Linux kernel
(x86_64) and Android kernel (AArch64). Our evaluation showed
that UniSan can successfully prevent 43 known and many new unini-
tialized data leak vulnerabilities. Further, 19 new vulnerabilities in
the latest kernels have been confirmed by Linux and Google. Our
extensive performance evaluation with LMBench, ApacheBench,
Android benchmarks, and the SPEC benchmarks also showed that
UniSan imposes a negligible performance overhead.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
kernel information leak; uninitialized read; reachability analysis;
initialization analysis; memory initialization
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c⃝ 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978366
1.
INTRODUCTION
As the de facto trusted computing base (TCB) of computer sys-
tems, the operating system (OS) kernel has always been a prime
target for attackers. By compromising the kernel, attackers can es-
calate their privilege to steal sensitive data in the system and control
the whole computer. There are three main approaches to launch priv-
ilege escalation attacks: 1) direct code injection attack; 2) ret2usr
attacks [17]; and 3) code reuse attacks [37]. DEP (Data Execution
Prevention) protection has been deployed to defeat traditional code
injection attacks. Intel and ARM have recently introduced new hard-
ware features (i.e., SMEP and PXN) to prevent ret2usr attacks [18].
As a result, code reuse attacks are becoming more prevalent. A
general direction to defeat code reuse attacks is randomization, e.g.,
kernel address space layout randomization (kASLR) [9] and Stack-
Guard [10] have been adopted by the latest kernels. kASLR aims
to prevent attackers from knowing where the code gadgets are, and
StackGuard [10] aims to prevent attackers from corrupting return
addresses.
By design, the effectiveness of kASLR and StackGuard com-
pletely relies on the confidentiality of the randomness—leaking any
randomized pointer or the stack canary will render these mecha-
nisms useless. Unfortunately, information leak vulnerabilities are
common in OS kernels. For example, Krause recently found 21
information leaks in the Linux kernel
[19]. According to CVE
Details [11], kernel information leak vulnerabilities have not only
become more prevalent than buffer overflow vulnerabilities, but the
number of kernel information leaks is also increasing with continu-
ously introduced new features. Moreover, the leaked kernel memory
may also contain other sensitive data, such as cryptographic keys
and file caches. For these reasons, preventing kernel information
leak is a pressing security problem.
There are four main causes of information leaks: uninitialized
data read, buffer overread, use-after-free and logic errors (e.g., miss-
ing privilege check). Among these root causes, uninitialized read
is the most common one. According to a Linux kernel vulnerabil-
ities survey [6], 37 information leak vulnerabilities were reported
from January 2010 to March 2011, 28 of which were caused by
uninitialized data read. Similarly, we analyzed the causes of the ker-
nel information leaks reported after 2013. Our study also revealed
that about 60% kernel information leaks are caused by uninitialized
data read (Figure 1). However, while many memory safety tech-
niques [26–28, 35] have been proposed to prevent buffer overread
and use-after-free, the prevention of uninitialized data leaks is still
an open problem.
Preventing uninitialized data leaks is challenging for three reasons.
First, since data write and read are frequent in programs, detecting
uninitialized data reads by tracking these operations will always
introduce unacceptable performance overhead. For example, Memo-
dles both stack and heap allocations. At the same time, to improve
the precision and thus minimize false positives, UniSan’s analysis
is fine-grained, which tracks each byte of an allocation in a flow-
sensitive and context-sensitive manner. Once UniSan detects an
unsafe allocation, it then instruments the kernel to zero the uninitial-
ized portion of the allocation. In this way, UniSan can completely
prevent kernel information leaks caused by uninitialized reads. Note
that by being conservative, UniSan may still have false positives;
however, initializing allocations that will never be leaked will not
break the semantics of the kernel, but will just introduce unneces-
sary performance overhead. Because UniSan’s instrumentation is
semantic-preserving, robustness is guaranteed.
We have implemented UniSan based on the LLVM compiler [22].
UniSan consists of two components. The first is the unsafe alloca-
tion detector, which conservatively reports all potentially unsafe
allocations. The second is the unsafe allocation initializer, which ze-
ros the uninitialized memory by inserting zero-initialization, memset,
or changing the allocation flags.
We have applied UniSan to the latest mainline Linux and Android
kernels to evaluate the effectiveness and efficiency of UniSan in
preventing kernel leaks. For effectiveness evaluation, we first tested
UniSan over 43 recently discovered kernel information leak vul-
nerabilities resulting from uninitialized reads. UniSan successfully
detected and prevented all these known vulnerabilities. Moreover,
the unsafe allocation detector of UniSan has identified many new
uninitialized data leak vulnerabilities in the latest Linux kernel and
Android kernel, 19 of which have been confirmed by the Linux
maintainers and Google.
We also measured UniSan’s performance impacts on kernel op-
erations, server programs, and user-space programs using multi-
ple benchmarks, including LMbench [24], ApacheBench, Android
benchmarks, and the SPEC CPU Benchmarks. The evaluation re-
sults showed that UniSan incurs a negligible performance overhead
(less than 1% in most cases) and is thus much more efficient than
existing solutions (e.g., STACKLEAK).
We believe that since UniSan is robust, effective, and efficient, it
is ready to be adopted in practice to prevent uninitialized data leaks.
In summary, we make the following contributions:
• Survey of kernel information leaks: We studied all the re-
ported kernel information leaks vulnerabilities since 2013. We
analyzed their root causes and corresponding defenses. We
also discussed with kernel developers about how to prevent
information leaks caused by data structure paddings.
• Development of new protection mechanism: We designed
and implemented UniSan, an automated, compiler-based scheme
to eliminate kernel information leaks caused by uninitialized
data reads, which is the main cause of kernel leaks. UniSan
has been successfully applied to the latest mainline Linux
and Android kernels (yet not limited to kernels). UniSan is a
practical, ready-to-use security protection scheme, and will
be open-sourced for broader adoption.
• Discoveries of new vulnerabilities: During our evaluation,
UniSan discovered many previously unknown information
leak vulnerabilities in the latest Linux and Android kernels,
19 of which have been confirmed by Linux maintainers and
Google.
In the rest of the paper, we introduce our kernel leak study (§2)
and describe the overview (§3), design (§4) and implementation
(§5) of UniSan. Then we evaluate UniSan in §6. Related work is
summarized in §7. We discuss the limitations of UniSan in §8, and
conclude in §9.
Figure 1: The root causes of kernel information leaks reported after 2013:
uninitialized data read, spacial buffer overread + use-after-free, and others
(e.g., missing permission check). Most leaks are caused by uninitialized data
read.
rySanitizer [39] and kmemcheck [31] check every memory read and
write to detect uninitialized data reads, thus incurring a performance
overhead of more than three times. Second, uninitialized data reads
are actually quite common in programs. Specifically, compilers
often introduce padding bytes in data structures to improve perfor-
mance. These padding bytes are usually uninitialized, but as long
as the uninitialized data is not used (e.g., dereferenced as pointer or
leaked), its access does not cause any problem. Since the padding
is introduced by the compiler, developers are usually not aware of
the potential data leaks—they need to be convinced such problems
exist before they will fix the programs (see §2 for more details).
Third, uninitialized data leaks often occur across multiple procedure
boundaries—the uninitialized data is always passed to leaking func-
tions (e.g., copy_to_user); hence intra-procedure analysis based
detections (e.g., -Wuninitialized provided by compilers) cannot
catch uninitialized data leaks.
In addition to tracking every data read and write, researchers have
attempted an alternate approach—force initializing. For example,
PaX’s STACKLEAK plugin [40] clears the used kernel stack when the
control is transferred back to user space, which effectively prevents
data leaks between syscalls. However, STACKLEAK cannot prevent the
leaking of uninitialized data generated during the same syscall. Also,
this can introduce a significant performance overhead (see Table 4).
Split kernel [20] instead clears stack frame whenever it is allocated
(i.e., a function is called). Split kernel provides stronger security, but
its performance overhead is even more significant. Peiró et al. [32]
proposed using model checking to detect kernel stack allocations
that have never been memset or assigned. However, this approach
has obvious limitations. For example, since it neither tracks the
propagation of uninitialized data nor handles partial initialization, it
has high false negative and false positive rates. Moreover, none of
these approaches can handle kernel heap leaks.
In this paper, we propose a novel mechanism, UniSan (Unini-
tialized Data Leak Sanitizer), to prevent kernel leaks caused by
uninitialized data reads. Similar to STACKLEAK, UniSan is an auto-
mated compiler-based approach; that is, it does not require manual
modifications to the source code and can transparently eliminate
leaks caused by data structure padding or improper initialization.
At the same time, UniSan also overcomes all the aforementioned
limitations of previous force-initialization approaches. More specifi-
cally, UniSan leverages an inter-procedural static analysis to check
1) whether an allocation ever leaves kernel space, and 2) the allo-
cation is fully initialized along all possible execution paths to the
leak point. The analysis is conservative—as long as there is one
byte of an allocation that cannot be proved to have been initialized
in any possible execution path before leaving the kernel space, it is
considered unsafe; hence UniSan has no false negatives. It also han-
Uninitialized Read57.3%Others13.6%Overread+UAF29.1%2. AN ANALYSIS OF KERNEL INFORMA-
TION LEAKS
In this section, we provide a background on kernel information
leaks, including their security implications and root causes. Then
we discuss uninitialized data reads and how such vulnerabilities
should be fixed from the developers’ perspectives.
2.1 Kernel Information Leaks
Kernel information leak vulnerabilities can cause severe security
consequences. First, as mentioned in §1, with the deployment of
kASLR [9] and stack canary [10], a general prerequisite for many
attacks (e.g., code reuse attack) is learning the randomized addresses
and canary, which can be accomplished by exploiting kernel infor-
mation leak vulnerabilities. Further, as the TCB of the whole system,
the OS kernel also has access to many other types of sensitive in-
formation, such as encryption keys, file cache, and remaining data
of terminated processes, etc. For performance reasons, memory
pages allocated to store such information may not be cleared when
they are released to the kernel. As a result, kernel information leak
vulnerabilities also allow attackers to access such sensitive infor-
mation. For example, [42] showed that an uninitialized data leak is
used to leak the entropy source for srandom. In short, it is critically
important to prevent kernel information leaks.
Kernel information leaks are also very common and have many
causes. According to a previous study [6] of Linux kernel vulnera-
bilities discovered between January 2010 and March 2011, kernel
information leak was ranked the second most common vulnerabil-
ity, which is even more common than buffer overflow vulnerability.
Specifically, of the total of 37 leak vulnerabilities, 28 were caused
by uninitialized reads, 7 were caused by buffer overread, and two
by other miscellaneous causes.
Since the aforementioned study [6] is already five-year old, we
conducted another study of kernel information leak vulnerabilities
reported after 2013 [11], which contained 103 leaks in total. The
result is shown in Figure 1. The majority of kernel leaks are caused
by uninitialized reads. Buffer overread is also a common cause, in
which the size of reading is not properly checked. Use-after-free
bugs may be exploited to leak the data of newly allocated objects or
manipulate the size and address of the read. Other causes include
missing permission check, race condition, or other logic errors.
Since uninitialized read is the most common cause of kernel leaks,
our work focuses on preventing uninitialized data leaks.
2.2 Uninitialized Data Leaks
An uninitialized data leak occurs when an allocated stack or heap
object is not properly initialized when being copied to the outside
world (e.g., to user space, network, or file systems). If the memory
occupied by the object is used to store sensitive data (e.g., addresses),
attackers can exploit this to leak such information. Note that using
uninitialized memory is a type of memory safety error and can lead
to undefined behavior. For this reason, modern compilers (e.g., the
-Wuninitialized option in GCC) can generate warnings when vari-
ables are used without proper initialization. However, this compiler
feature employs only an intra-procedure analysis and cannot handle
many common cases (e.g., reading the uninitialized data through
its pointer). Most uninitialized data leaks happen across multiple
function boundaries (e.g., calling copy_to_user in Linux), so they
can be identified only using inter-procedural analysis. Also, data
can be propagated through various channels (e.g., network or file
systems). In short, existing compiler checks are not effective in find-
ing uninitialized data leaks in large-scale, sophisticated programs,
like the Linux kernel. Moreover, uninitialized data reads may not
be harmful if they are not dereferenced or leaked; reporting all of
/* some fields of dte_facilities are not initialized */
x25_negotiate_facilities(..., &dte_facilities);
...
/* passed to the external */
makex25->dte_facilities= dte_facilities;
...
/* File: net/x25/af_x25.c */
1
int x25_rx_call_request(struct sk_buff *skb,
2
struct x25_neigh *nb,
3
unsigned int lci) {
4
5 ⋆ struct x25_dte_facilities dte_facilities;
6
7 !
8
9
10
11
12
13
14
15
16
17
...
/* leak uninitialized fields of dte_facilities */
}
static int x25_ioctl(struct socket *sock,
unsigned int cmd,
unsigned long arg) {
18 ⊙ copy_to_user(argp, &x25->dte_facilities,
sizeof(x25->dte_facilities));
19
20
21
...
}
Figure 2: New kernel leak in the x25 subsystem—6 fields of dte_facilities
are not initialized and leaked in another function x25_ioctl. ⋆ denotes
memory allocation, ! marks incorrect initialization, ⊙ notes a leaking point.
struct netlink_callback *cb) {
/* File: net/wireless/nl80211.c */
static int nl80211_dump_station(struct sk_buff *skb,
1
2
3
4 ⋆ u8 mac_addr[ETH_ALEN]; /* ETH_ALEN = 6 */
5
6 !
7
8
9
10
...
err = rdev->ops->dump_station(\
&rdev->wiphy,
wdev->netdev, sta_idx, mac_addr, &sinfo);
/* mac_addr is uninitialized but sent out via nla_put()
11 ⊙ if (nl80211_send_station(skb, NL80211_CMD_NEW_STATION,
* inside nl80211_send_station() */
12
13
14
15
16
17
18
goto out;
...
}
NETLINK_CB(cb->skb).portid,
cb->nlh->nlmsg_seq, NLM_F_MULTI,
rdev, wdev->netdev, mac_addr,
&sinfo) < 0)
Figure 3: New kernel leak in the wireless subsystem—the whole 6-bytes
array mac_addr is not initialized but sent out. ⋆ denotes memory allocation, !
marks incorrect initialization, and ⊙ notes a leaking point.
them will burden or even annoy developers. The following examples
demonstrate the common causes of uninitialized data leaks and why
existing compiler features cannot detect them. Please note that all
leakage examples listed in this paper are newly discovered by our
system UniSan and fixed only in the mainstream repository; most
deployed kernels may not be patched yet.
2.2.1 Missing Element Initialization
The simplest and most common case of an uninitialized data leak
is when the developers fail to properly initialize all fields of an object
or memory of a buffer. Figure 2 shows a real kernel leak vulnerabil-
ity in the x25 module. Specifically, the object dte_facilities is
supposed to be properly initialized in x25_negotiate_facilities.
However, six fields are still not initialized. The object is then prop-
agated to the external heap object makex25 and finally leaked to
userland in another function x25_ioctl. As we can see, detecting
such leaks would require sophisticated inter-procedural data-flow
analysis, which is not available during normal compilation.
Figure 3 shows another real kernel leak vulnerability caused by