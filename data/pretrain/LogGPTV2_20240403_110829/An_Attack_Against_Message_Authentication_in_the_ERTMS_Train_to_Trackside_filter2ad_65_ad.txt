l
H mf
l(cid:0)1
M AC(mv)
=
M AC(mf )
H mf
l+1
DESk1 DESk1
: : :
DESk1 DESk1
3DES
DESk1
: : :
DESk1 DESk1 DESk1
3DES
H mf
l(cid:0)2
mfl(cid:0)1
mf1
mf2
mfl
mfl+1 = mvn
(cid:8) H mf
(b) Messages mv and mf are made to have
the same MAC by adding block mfl+1 =
mvn
(cid:8) Hmv
n(cid:0)1
(cid:8) H mv
n(cid:0)1
(cid:8) H
mf
l
.
l
H mf
l(cid:0)2
mfl(cid:0)1
mf1
mfl
mfl+1
mfl+2 = mvn
(cid:8) H mv
n(cid:0)1
(cid:8) H mf
(c) A properly encoded Plain Text Message
requires two blocks mfl+1 and mfl+2 to be
added. These blocks will be properly encoded
according ISO 8859-1 as described in Section
5.
l+1
Figure 4: Creating forged message mf by extending it with an additional block(s) to match the MAC of the
valid message mv.
(
)
8 (cid:25) 0:0004.
encoded block and 50 tries to have a success rate of 99%. If
we limit ourselves to ASCII encoding, the probability drops
In this case, we still only need 2780
to
tries on average to (cid:12)nd a correctly ASCII encoded block.
95
256
6. PROOF OF CONCEPT
In this section, we present the implementation of our at-
tack and detail the process in which we identi(cid:12)ed collisions
and implemented the DES key recovery process.
As a message to forge, we use a potentially damaging
Movement Authority (MA) message with an attached Plain
Text Message (PTM) packet using the details outlined in Ta-
ble 2. This MA changes the maximum allowed train speed
to 200 km/h for almost 328 km. The values in the mes-
sage are chosen such that, by including optional variables,
the text message exactly lines up with the last two message
blocks in the computation of the MAC: a 40 bits pre(cid:12)x is
added by the MAC algorithm and the message header (75
bits) together with the MA packet (113 bits) and Plain Text
Message, without the actual text message, (92 bits) is 280
bits. This (cid:12)xed part of the message is exactly contained in
the (cid:12)ve message blocks, so the text to be displayed will start
at the beginning of the sixth block.
In order to (cid:12)nd a MAC collision, we developed our own
program to generate ERTMS messages. One of the most
common messages sent between train and trackside is mes-
sage 146: the Acknowledgement Message (see Table 1) to
con(cid:12)rm the receipt of ‘normal’ priority messages. Messages
sent from the backend to a train can request acknowledge-
ments to be provided. This acknowledgement message con-
tains the current timestamp, based on the train clock, as
well as the timestamp for the message being acknowledged.
Whilst the timestamp is 32 bits in length, they are relative to
the onboard clock, wrapping around by design and therefore
is not an issue, as is it is unlikely to happen. We computed
the MAC value for many acknowledgement messages. using
(cid:12)xed keys, and looked for collisions. We parameterise the
timestamps, where a de(cid:12)ned oﬀset was used between the
timestamp being acknowledged and current time. This oﬀ-
set was speci(cid:12)ed to be intervals of 10, 20 and 30 ms, that is,
the simulated train would acknowledge messages within the
de(cid:12)ned oﬀset period. The remainder of the message (ETCS
ID and Message ID) were left static, to simulate one train
acknowledging all messages.
We implemented this algorithm in Java and generated ap-
proximately 12.9 billion (3 (cid:3) (232 (cid:0) 1)) values. Equation 3,
tells us that this leads to a 99.999% chance of a collision.
Collisions were detected using the standard Unix utilities
sort and uniq. The system used to generate the MACs
contained an Intel Xeon E5-2420 CPU, running at 2.2GHz.
The complete process (cid:12)nished within two days, resulting in
the discovery of 8 collisions, e.g. the two acknowledgement
messages:
00120000020A9203A2105E0480000062105DFD0000000000
00120000020A9203AAE360078000006AE360000000000000
both have the same intermediate MAC Hn:
80B7557F31566DBB
for k1 = 01020407080B0D0E. The other collisions are given
in Appendix A. Details on the probabilities of a collision
and the time needed for an attacker to (cid:12)nd a collision are
discussed in the next section.
Verifying a single key guess using these collisions requires
six DES encryptions (three for each message to calculate
the inputs to the 3DES block). The fastest DES cracker we
could (cid:12)nd in the literature was
the RIVYERA, which uses dedicated hardware and takes
slightly less than a day to crack a single DES key4. The cost
of building the system is approximately $140,000.
This is too slow to break the key in time to attack a train,
so we investigate the cost and speed of cracking DES us-
ing Amazon’s cloud services. We rented an Amazon EC2
instance with 16 NVIDIA Tesla K80 GPUs, (p2.16xlarge)
and used the state of the art password cracker hashcat5 to
benchmark the number of possible DES operations per sec-
ond. Scaling this up to many machines we found that we
could brute-force the k1 DES key in 30 minutes for $48,960,
4https://www:voltage:com/breach/the-state-of-the-art-in-
key-cracking/
5https://hashcat:net/
(a) Days of attack vs Sessions per day vs Prob of attack
(b) Days of attack vs Sessions per day vs Prob of attack
Figure 5: Attack probabilities for a range of diﬀerent session lengths and data speeds
and even faster for proportionally more money. A full break-
down of this calculation, and the benchmarking, is provided
in Appendix B.
Using the collision above, we constructed a forged message
with the same MAC. We used a Python script to create a
forged message containing the Movement Authority, given
in Table 2. Given k1, this script (cid:12)nds a valid text message
using the approach discussed in Section 5. It can (cid:12)nd valid
text messages either for the full ISO 8859-1 encoding or only
ASCII. In the case of the messages above this process took
0.209s on a normal laptop containing an Intel Core i7-4550U
CPU to give us the following ASCII encoded text to com-
plete our forged message:
Z|1MB%<w*RRf)8n/
This leads to the ERTMS message:
030cd3c677a100000021f01c651ff809c4080000000007e4801
b90fffd2000000120105a7c314d42253c772a52526629386e2f
which we constructed without the second and third DES
keys, and has the same intermediate MAC as the acknowl-
edge messages above (80B7557F31566DBB), and therefore also
the same (cid:12)nal MAC. This forged movement authority mes-
sage would now be accepted by a train, and is broken down
in Table 2.
We are making the Python scripts available anonymously.
Please see the link in the footnote6.
When the attack is deployed, the attacker would need to
actively jam the GSM-R uplink to ensure that acknowledge-
ment messages sent by the train are not received by the
RBC. Likewise, once deployed, the downlink would have to
be jammed so that the train does not receive any con(cid:13)icting
movement authorities from the RBC which could shorten it.
The RBC, may therefore, through interlocking identify two
trains occupying the same section of track, and attempt to
intervene by issuing an emergency stop or modi(cid:12)ed move-
ment authority to the ‘victim’ train. That said, an attacker
who jams the GSM reception would prevent the RBC com-
mands being received. As the frequencies are the same for
GSM-R voice, it would also prevent the signalling centres
contacting the train driver via voice. For a (cid:12)xed attacker
6http://pastebin.com/Ge6gM1Qm
at an RBC, or base station, it would be a case of dropping
the messages which could restrict the movement authority
or make the train go against the attacker’s wishes.
7. DATA CAPTURE
In this section, we show how much data an attacker would
need to see, how long they would need to collect traﬃc for,
and what the probability of a successful attack would be.
In order to (cid:12)nd a collision, traﬃc between the train and
backend needs to be captured; one way to collect the traﬃc
needed to (cid:12)nd a collision would be to intercept GSM-R data
between a train and mobile base station. Alternatively, data
could be captured from the network infrastructure which
connects the base stations, RBCs and control centres. Cap-
turing data from this network infrastructure leads to much
more data and so a high chance of (cid:12)nding a collision, but
the network is more diﬃcult to compromise. We consider
both of these possible attacks below.
7.1 Monitoring a single train
In this subsection, we consider an attacker who monitors
a single train, perhaps while travelling on it. The GSM
protocol has been shown to be weak against an attacker,
given suﬃcient pre-computation [16], therefore the attacker
can easily decrypt this.
We consider a 1% chance of an attacker taking over a
train as unacceptable, and in Section 5, we showed that
an attacker gets this chance of a collision from 6:1 (cid:2) 108
messages. Assuming an average message length of 32 bytes
this would require 19.5 GB of data. GSM-R has a maximum
data speed of 14Kbps, however, this connection is not always
used at full capacity. If we assumed that a train sends data
at 10Kbps, it would take a train 23 days to send 19.5GB.
We note that there is nothing in any of the speci(cid:12)cation that
enforces a limited life on a session key; in practice the session
key is renegotiated whenever a train starts up, or when it
starts communicating with a new RBC, therefore it seems
unlikely that a single train will currently use a session key
long enough for this to become a problem.
of train network. Figure 5(b) assumes a 45 day attack and
shows how the success probability changes with the session
length and data speed. We note that for short sessions and
low data speeds the protocol is safe, however this quickly
becomes unsafe as the amount of data send increases. We
discuss what is a safe limit to the data sent over EuroRadio
in the next section.
As discussed in section 2.1, GSM Capture is not a new
concept, however, we outline an example process which may
be undertaken. We use the HackRF software-de(cid:12)ned radio,
airprobe and gnuradio (Fig.
7) Linux tools to capture
traﬃc on the Cambrian Line, an ERTMS Level 2-(cid:12)tted line
on the North Wales coastline (see Appendix C). For other
software-de(cid:12)ned radios, alternative tools, for example, Os-
mocomBB, may be used. Using the radio, the base station
frequency must be identi(cid:12)ed - the kalibrate tool scans for
GSM-R base stations, where airprobe can then capture on
that frequency and decode into Control Channel and en-
crypted traﬃc. The capture (cid:12)les can be passed to kraken to
retrieve the A5/1 key. The TMSI is exposed in the ‘Paging
Request’ (Fig. 8) messages which may then be used in the
input to establish the key. Another method, impersonating
an existing base station can be achieved through open-source
tools for example OpenBTS, OsmoBTS and Yate.
8. MITIGATIONS
In this section, we present the proposed mitigations that
reduce the exposure of this attack, as well as other pro-
posals to further enhance the security of train to trackside
communication for the future. Whilst recommendations to
promote and introduce immediate solutions may be given,
we also must consider the impact and cost to infrastruc-
ture manager and operators to implement such changes. We
consider the following mitigations, ranked in order of high-
est compatibility and lowest implementation cost to lowest
compatibility and highest implementation cost:
1. Restricting EuroRadio use in high-bandwidth Appli-
cations
2. Forcing sessions to be renegotiated often in order to
ensure that the probability of (cid:12)nding collisions is P (cid:20)
10
(cid:0)6.
3. Implementation of an alternative MAC Algorithm
4. Combining EuroRadio and Application Layers to pro-
vide a combined, secure message sending/receiving ser-
vice
Although EuroRadio currently is safe for use in current
ERTMS command and control applications against an at-
tacker that targets a single train, our recommendation is
that EuroRadio should not be considered for use in future
high-bandwidth applications, for example streaming appli-
cations, for example remote condition monitoring. High-
bandwidth applications reduce the time required to get col-
lisions (see Figure 6) and thus session key recovery becomes
more likely. As a result, the MAC algorithm in EuroRadio
should not be considered for such applications.
An alternative short-term solution is to force sessions to
be renegotiated by tearing down the existing session and
forcing a new key to be used. The threshold number of
messages M = 6:1 (cid:2) 108 discussed in Section 4 assumes a
collision probability P = 1%. However, as previously stated,
(cid:0)6 a more
this probability is to high. We consider P = 10
Figure 6: Attack probabilities for the number of
messages and sessions observed
7.2 Multi-session trafﬁc capture
Rather than monitoring a single train, an attacker could
monitor a large number of trains at the same time, by for
instance, tapping into the wired connections between the
GSM-R base stations and the RBCs. These cables are typ-
ically buried in the ground or carried overhead along train
tracks, therefore, accessing them on mass would involved
considerable time and eﬀort for an attacker, but would be
possible. Base stations are located in open spaces, unlike
public GSM stations, where unauthorised access to these
may not be detected. Access to the underlying infrastruc-
ture, such as controllers may be carried out by an inside
attacker, however.
We can adapt Eq. (3) to give us the probability P of (cid:12)nd-
ing one of more collisions in S sessions each of which contains
M messages:
P = 1 (cid:0) M(cid:0)1∏
(
)
S
1 (cid:0) i
N
(cid:25) 1 (cid:0) e
i=1
(cid:0)M (M(cid:0)1)(cid:1)S=(2N )
(7)
We plot the range of possible values for this in Figure 6.
To make this more concrete, we consider a country the size
of the UK which has in the region of 4000 trains running
everyday. We additionally assume an average data speed of
10Kbps, sessions of 10 hours and message sizes of 32 bytes.
The data speed, session lengths and message size then give
us the number of messages per session and the number of
session an attacker can monitor would then be 4000 times
the number of days they were willing to wait. Using Eq. 7
we calculate that an attacker would have a 1% chance to (cid:12)nd
a collision, and so take control of a train, within 45 days and
a 50% chance in 8 years. These (cid:12)gures suggest that, while
diﬃcult and expensive to pull oﬀ, this attack is within the
realm of possibility.
Our (cid:12)gures are estimates of typical usage { high speed
trains that move between RBC areas may have shorter ses-
sions and local trains that spend a whole day in an area may
have longer sessions. Data may be sent at a higher or lower
speed and the number of trains in service will continue to
grow. Figures 5(a) and 5(b) show how the likelihood of an
attack varies as we change some of these estimates. Fig-
ure 5(a) shows how the success probability grows for an at-
tacker that is willing to wait longer and for diﬀerent sizes
MAC algorithm
EuroRadio MAC
(current)
3DES Patch
AES-256-CBC
MAC
HMAC-SHA-256
Avg.
time (ns)
Time
impact
vs. EuroRadio
MAC (%)
10276.89
-
13155.255
28% worse
8589.98
12% better
4558.64
55% better
QCR
(cid:2)
(cid:2)
Table 3: Performance Summary of MAC Algorithms
under Assessment
acceptable probability [24]. Using Eq. (7) we can compute
the number of messages per session for the (cid:12)xed probability
P as:
(
)