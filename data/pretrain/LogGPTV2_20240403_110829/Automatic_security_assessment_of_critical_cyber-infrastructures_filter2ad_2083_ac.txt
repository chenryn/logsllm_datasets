and some might have more) as well as their individual states
(some might already be grounded, for instance).
We describe the operating procedures as workﬂows us-
ing Yet Another Workﬂow Language (YAWL [23]). YAWL
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE371DSN 2008: Anwar et al.1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
[ c o n d i t i o n a l s p l i t ]
r l
[ TkList ,
=>
[ TkList ,
( TkId1 ? ActId1 ) ActCxt
T k I d L i s t 1 ,
TkId ∗ T k I d L i s t 2 ,
T k I d L i s t 3 ,
SecRsk ]
( TkId1 ? ActId1 ) ActCxt
T k I d L i s t 1 ,
T k I d L i s t 2 ,
TkId2 ∗ T k I d L i s t 3 ,
SecRsk ]
.
,
,
Table 2. Maude rule describing the conditional split
is a workﬂow description language that supports common
workﬂow patterns and its Editor [24] allows the construc-
tion of appropriate control-ﬂow descriptions for the work-
ﬂows and the export of this information as an XML ﬁle.
5.3 Mapping Workﬂows
rewriting Logic
to
Term-
We use the “XML to Maude” converter tool to read the
XML based workﬂow description generated by YAWL and
generate a term-rewriting description of the workﬂow in
Maude. To help with the workﬂow analysis, we developed a
term-rewriting module in Maude. This generic module con-
sists of rules which describe the valid workﬂow transitions
for any generic workﬂow. For instance, Table 2 shows the
rule that allows Maude to evaluate a task with a conditional
split 8.
Lines 1-8 describe the conﬁguration before and lines
the transition
10-16 describe the conﬁguration after
rule is ﬁred.
Line 2 contains the conditional action
([(TkId1?ActId1) = TkId2]) which determines whether
while evaluating task TkId, the next task chosen should de-
pend upon the action ActId1 chosen earlier at task TkId1.
Note that TkId1, ActId1 etc., in the rules are variables and
Maude can match the instantiation of the conﬁguration to
the left-hand-side of the rule and transform the current con-
ﬁguration as per the rewriting rule. Maude performs the
transition by looking at whether the action-context (line 4)
contains the tuple that says that the required condition to
perform the particular task T kId2 was satisﬁed. If so, it
picks the next task TKId2 and puts it in the tasks to be ﬁred
(line 15), while simultaneously removing the current task
T kId from the evaluation queue (line 13). We emphasize
that these rules are generic and will work for any workﬂow
description under consideration.
The “XML to Maude” converter populates the terms to
instantiate a speciﬁc workﬂow that was described generi-
cally using YAWL (and given in XML to the tool). The
input includes the various actions possible at any given task
8A conditional split is similar to an XOR split except that the next task
chosen depends on the context
and the evaluated security risk for each task.
5.4 Analyzing Workﬂows
rewriting Logic
in Term-
Given the workﬂow description (the generic term-
rewriting theory along with the speciﬁc workﬂow instantia-
tion), we can use Maude’s LTL Model Checker to verify any
LTL property on the workﬂow. For instance, we can verify
that any task initiated in the system should never deadlock
(starting from the given initial state). This could be speci-
ﬁed as the following LTL property:
2(initialstate → (cid:5)(ﬁnalstate))
Given that each task might be satisﬁed by multiple ac-
tions, we can have multiple ways of executing a given work-
ﬂow. Since each action (such as turning on a device), can
have a different security risk, the risk taken to complete a
given task is dependent on the choices of actions taken for
any given tasks. We cannot ﬁnd the workﬂow path (and
choices taken at every task) with the minimum security risk
in one run of model-checking. However, we can do that by
iteratively model-checking the following LTL formula until
it gives a counter example:
2(initialstate → (FinalRisk > CurrentMinRisk))
(where CurrentMinRisk is initialized to NoRisk and is up-
dated until model-checking ﬁnds a counter-example)
5.5 Event Aggregator
We added support to our tool-chain to update prolog at-
tribute information by interfacing to the PowerWorld [17]
client software via COM API. A PowerWorld Client pro-
vides a graphical view of power system states made avail-
able to it by a Retriever that interfaces to real devices in
a SCADA network and provides data such as bus voltages,
phase angles, ﬂows and lines and generator status. SimAuto
runs on the same host as the client and provides a COM API
interface to third-party applications to access the client’s
data-structures.
6 Evaluation
Our implementation measures approximately 1620 LOC
for Prolog and 385 LOC for Maude not counting the par-
ticular network and workﬂow encodings. We tested it on
a number of substation network-level scenarios (||--doSattack(attacker, DS12)
 Rule: Modbus Invalid Header
[]-connectivity(aggregator,Relay1)
[]-vulExists(modbus_srvce, ’MODBUS_INVALID_HEADER’, remoteExploit, doS, 0.9)
|--execCode(attacker, aggregator, root)
 Rule : Remote Heap over-flow of modbus server
[]-connectivity(historian, aggregator, modbus)
[]-vulExists(modbus_srvce, ’HEAP_OVERFLOW’, remoteExploit, Integrity, 0.7)
||--execCode(attacker,historian,root)
 Rule : Trust Relationship with AdminPC
[]-connectivity(adminPC,historian, rlogin)
[]-trust(adminPC,historian)
|--execCode(attacker,adminPC, root)
 Rule : Remote Buffer Overflow
[]-connectivity(attacker,adminPC)
[]-service(adminPC,OpenSSL)
[]-vulExists(OpenSSL, ’GLSA 20071030’, remoteExploit, Integrity,0.49)
 Rule: 08 Diagnostics function code with a sub-function of 01
[]-connectivity(aggregator,Relay1)
[]-vulExists(modbus_srvce, ’08DiagnosticSubf01’, remoteExploit, doS, 0.87)
|--execCode(attacker, aggregator, root) ==> 
Figure 7. A Logical Attack Graph for Device DS12
the DS12 to be unresponsive”. Every rule node is labeled
with the rule name that is used for the derivation step. Rule
nodes r0a and r0b illustrate that there are two possible DoS
vulnerabilities (depicted by square brackets) in the Mod-
bus protocol the Relay is using. Sending a Modbus TCP
message with an invalid header or a 08Diagnostic message
would cause the Relay to be unresponsive. The aggregator
that logs events, talks directly to all the relays and a root
privilege on it can be achieved if the attacker can exploit a
remote heap-overﬂow vulnerability in its modbus service.
Finally the attacker can cross over the ﬁrewall to get to the
aggregator by compromising the historian on the EN that
has a service relationship with it. The attacker can gain
access to the historian via its rlogin trust relationship with
the admin PC which has an OpenSSL service with a buffer
overﬂow vulnerability. Notice that in this scenario the at-
tacker does not need to be an insider with user or root ac-
cess to any of the machines. Not shown due to space lim-
itation are graphs for DS8, NR2 and NR3. NR3’s risk tree
is the same as that of DS12 because they are connected to
the same vulnerable relay. DS8 on the other hand has a di-
rect Ethernet access from the compromised aggregator and
its integrity can be easily breached by the attacker. A high
Figure 5. A 275 kV Substation with a Fault
Figure 6 shows the SCADA network that controls the en-
ergizing of the various power elements. The left hand side
of the ﬁgure shows the enterprise network with commod-
ity desktops and servers while the right hand side shows the
PCN involved with taking sensor measurements and ﬂip-
ping switches to control the power ﬂow. Top and bottom
rows of actuators correspond to Bus 1 and Bus 2 control
respectively. Groups of actuators are controlled by a PLC
which is in turn controlled by a relay. Mostly serial con-
nections (RS-485) are used to link these SCADA devices
together, however some of the more upgraded devices (for
instance PLC4) do use Ethernet as well. Finally the relays
report their values to a data aggregator that communicates
these to a data historian on the EN. The ﬁrewall contains
rules to allow modbus communication between the aggre-
gator and the historian.
We ran our security assessment toolkit on a model of
this substation infrastructure. Logical attack graphs were
generated for each device that was a candidate in the vari-
ous recovery procedures. The attacker was assumed to be
an outsider with network access to the EN and no privi-
leges to any machine except for his own. Figure 7 shows
a DoS attack graph for one of these devices: DS12. DS12
is controlled by PLC1 which is in turn controlled by Relay1
that forwards it instructions for controlling the re-energizing
of the transformer. If an attacker were able to successfully
deny service to this device then the underload operation for
TR1 could be delayed causing it to overload.
The root node is the attack goal; in this example it is
doSattack(attacker,DS12), meaning “the attacker can cause
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE373DSN 2008: Anwar et al.integrity risk unlike an availability risk is very dangerous
as we will see in the workﬂows later because it means that
the attacker has complete control and can thwart an opera-
tor’s attempts to open or close a switch whether he does it
manually or via SCADA commands.
Figure 8. A Logical Attack Graph to assess the security
risk of a successful DoS attack on a PLC
A more compact version of the attack graph is shown in
Figure 8 that uses circles to represent derived facts, squares
to represent derivation rules and ﬁlled circles to show prim-
itive facts. This graph shows the calculation of the security
label for DS12. The leaf nodes representing exploits are
labeled with exploitability probabilities obtained from the
CERT Vulnerability calculator [18].
Task
Context Required
Select Transformer
Select Transformer
Ground Transformer
Close Manually
Close Manually
Close Via
SCADA
Close Via
SCADA
ChooseTR3 at
Select Transformer
ChooseTR3 at
Select Transformer
ChooseTR2 at
Select Transformer
ChooseTR3 at
“Select Transformer”
Choose TR2 at
“Select Transformer”
Action
ChooseTR2
ChooseTR3
GroundTR3
Close Switch
DS12 Manually
Close Switch
DS8 Manually
Close Switch
DS12 by SCADA
Close Switch
DS8 by SCADA
Risk
No Risk
No Risk
Low Availability
NR3:0.27
No Risk
High Integrity
DS8:0.34
Low Availability
DS12:0.27
High Integrity
DS8:0.34
Table 3. Device Risk Evaluated and Assigned to Actions
Figure 9. Procedure to Enable a Backup Transformer
Figure 9 shows the recovery procedure that an opera-
tor has to follow to bring up a transformer. These pro-
cedures are independent of the speciﬁc conﬁguration of
the sub-station and the actual running of the workﬂow de-
pends on the possible actions at any given task (not de-
picted in the picture). For instance, the workﬂow task “Se-
lect Transformer” consists of two actions “ChooseTR2” and
“ChooseTR3”. Depending on the current conﬁguration, the
task “Transformer Grounded” can either split to “Ground
Transformer” or directly to “Energize Transformer”. Both
splits and actions depend on the context, i.e., which trans-
former was chosen earlier at “Select Transformer” and
whether according to the current conﬁguration the trans-
former chosen was grounded or not.
A subset 9 of actions possible at any given task along
with their given risks is calculated by the network-analysis