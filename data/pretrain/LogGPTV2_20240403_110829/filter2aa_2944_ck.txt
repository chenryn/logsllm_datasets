ing it with the services and networks it needs to access.
Listing 13.1 shows code for a simple device profile with an identifier, basic model
information, and an encrypted pre-shared key (PSK) that can be used to communi-
cate with the device using the techniques in chapter 12. The PSK will be encrypted
using the NaCl SecretBox class that you used in chapter 6, so you can add a method
to decrypt the PSK with a secret key. Navigate to src/main/java/com/manning/
apisecurityinaction and create a new file named Device.java and copy in the contents
of the listing.
package com.manning.apisecurityinaction;
import org.dalesbred.Database;
import org.dalesbred.annotation.DalesbredInstantiator;
import org.h2.jdbcx.JdbcConnectionPool;
import software.pando.crypto.nacl.SecretBox;
import java.io.*;
import java.security.Key;
import java.util.Optional;
public class Device {
    final String deviceId;       
    final String manufacturer;   
    final String model;          
    final byte[] encryptedPsk;   
    @DalesbredInstantiator                       
    public Device(String deviceId, String manufacturer, 
                  String model, byte[] encryptedPsk) {
        this.deviceId = deviceId;
        this.manufacturer = manufacturer;
        this.model = model;
        this.encryptedPsk = encryptedPsk;
    }
    public byte[] getPsk(Key decryptionKey) {                        
        try (var in = new ByteArrayInputStream(encryptedPsk)) {      
            var box = SecretBox.readFrom(in);                        
            return box.decrypt(decryptionKey);                       
        } catch (IOException e) {                                    
            throw new RuntimeException("Unable to decrypt PSK", e);  
        }                                                            
    }                                                                
}
You can now populate the database with device profiles. Listing 13.2 shows how to ini-
tialize the database with an example device profile and encrypted PSK. Just like previ-
ous chapters you can use a temporary in-memory H2 database to hold the device
Listing 13.1
A device profile
Create fields 
for the device 
attributes.
Annotate the constructor 
so that Dalesbred knows 
how to load a device from 
the database.
Add a
method to
decrypt the
device PSK
using NaCl’s
SecretBox.
491
Authenticating devices
details, because this makes it easy to test. In a production deployment you would use a
database server or LDAP directory. You can load the database into the Dalesbred
library that you’ve used since chapter 2 to simplify queries. Then you should create
the table to hold the device profiles, in this case with simple string attributes (VARCHAR
in SQL) and a binary attribute to hold the encrypted PSK. You could extract these
SQL statements into a separate schema.sql file as you did in chapter 2, but because
there is only a single table, I’ve used string literals instead. Open the Device.java file
again and add the new method from the listing to create the example device database.
static Database createDatabase(SecretBox encryptedPsk) throws IOException {
    var pool = JdbcConnectionPool.create("jdbc:h2:mem:devices",    
            "devices", "password");                                
    var database = Database.forDataSource(pool);                   
    database.update("CREATE TABLE devices(" +             
            "device_id VARCHAR(30) PRIMARY KEY," +        
            "manufacturer VARCHAR(100) NOT NULL," +       
            "model VARCHAR(100) NOT NULL," +              
            "encrypted_psk VARBINARY(1024) NOT NULL)");   
    var out = new ByteArrayOutputStream();    
    encryptedPsk.writeTo(out);                
    database.update("INSERT INTO devices(" +                       
            "device_id, manufacturer, model, encrypted_psk) " +    
            "VALUES(?, ?, ?, ?)", "test", "example", "ex001",      
            out.toByteArray());                                    
    return database;
}
You’ll also need a way to find a device by its device ID or other attributes. Dalesbred
makes this quite simple, as shown in listing 13.3. The findOptional method can be
used to search for a device; it will return an empty result if there is no matching
device. You should select the fields of the device table in exactly the order they appear
in the Device class constructor in listing 13.1. As described in chapter 2, use a bind
parameter in the query to supply the device ID, to avoid SQL injection attacks.
static Optional find(Database database, String deviceId) {
    return database.findOptional(Device.class,                         
            "SELECT device_id, manufacturer, model, encrypted_psk " +  
                    "FROM devices WHERE device_id = ?", deviceId);    
}
Listing 13.2
Populating the device database
Listing 13.3
Finding a device by ID
Create and
load the
in-memory
device
database.
Create a table 
to hold device 
details and 
encrypted PSKs.
Serialize
the example
encrypted
PSK to a
byte array.
Insert an 
example 
device into 
the database.
Use the findOptional method with 
your Device class to load devices.
Select device attributes in the same
order they appear in the constructor.
Use a bind parameter to query for a
device with the matching device_id.
492
CHAPTER 13
Securing IoT APIs
Now that you have some device details, you can use them to authenticate devices
and perform access control based on those device identities, which you’ll do in sec-
tions 13.1.2 and 13.1.3.
13.1.2 Device certificates
An alternative to storing device details directly in a database is to instead provide each
device with a certificate containing the same details, signed by a trusted certificate
authority. Although traditionally certificates are used with public key cryptography,
you can use the same techniques for constrained devices that must use symmetric
cryptography instead. For example, the device can be issued with a signed JSON Web
Token that contains device details and an encrypted PSK that the API server can
decrypt, as shown in listing 13.4. The device treats the certificate as an opaque token
and simply presents it to APIs that it needs to access. The API trusts the JWT because it
is signed by a trusted issuer, and it can then decrypt the PSK to authenticate and com-
municate with the device.
{
    "iss":"https://example.com/devices",             
    "iat":1590139506,                                
    "exp":1905672306,                                
    "sub":"ada37d7b-e895-4d55-9571-4df602e60c27",    
    "psk":" jZvara1OnqqBZrz1HtvHBCNjXvCJptEuIAAAAJInAtaLFnYna9K0WxX4_   
➥ IGPyztb8VUwo0CI_UmqDQgm"                                            
}
This can be more scalable than a database if you have many devices, but makes it
harder to update incorrect details or change keys. A middle ground is provided by the
attestation techniques discussed in chapter 12, in which an initial certificate and key
are used to prove the make and model of a device when it first registers on a network,
and it then negotiates a device-specific key to use from then on.
13.1.3 Authenticating at the transport layer
If there is a direct connection between a device and the API it’s accessing, then you can
use authentication mechanisms provided by the transport layer security protocol. For
example, the pre-shared key (PSK) cipher suites for TLS described in chapter 12 pro-
vide mutual authentication of both the client and the server. Client certificate authenti-
cation can be used by more capable devices just as you did in chapter 11 for service
clients. In this section, we’ll look at identifying devices using PSK authentication.
 During the handshake, the client provides a PSK identity to the server in the Client-
KeyExchange message. The API can use this PSK ID to locate the correct PSK for that
client. The server can look up the device profile for that device using the PSK ID at
the same time that it loads the PSK, as shown in figure 13.2. Once the handshake
Listing 13.4
Encrypted PSK in a JWT claims set
Include the usual JWT 
claims identifying the 
device.
Add an encrypted PSK that can be
used to communicate with the device.
493
Authenticating devices
has completed, the API is assured of the device identity by the mutual authentication
that PSK cipher suites achieve.
 In this section, you’ll adjust the PskServer from chapter 12 to look up the device
profile during authentication. First, you need to load and initialize the device data-
base. Open the PskServer.java file and add the following lines at the start of the main()
method just after the PSK is loaded:
var psk = loadPsk(args[0].toCharArray());    
var encryptionKey = SecretBox.key();          
var deviceDb = Device.createDatabase(             
        SecretBox.encrypt(encryptionKey, psk));   
The client will present its device identifier as the PSK identity field during the hand-
shake, which you can then use to find the associated device profile and encrypted PSK
to use to authenticate the session. Listing 13.5 shows a new DeviceIdentityManager
class that you can use with Bouncy Castle instead of the existing PSK identity manager.
The new identity manager performs a lookup in the device database to find a device
that matches the PSK identity supplied by the client. If a matching device is found,
then you can decrypt the associated PSK from the device profile and use that to
authenticate the TLS connection. Otherwise, return null to abort the connection.
The client doesn’t need any hint to determine its own identity, so you can also return
Device
API
Device DB
PSK ID
Lookup device proﬁle
Device proﬁle with
encrypted PSK
Decrypt PSK
TLS handshake with PSK
The device supplies an
identiﬁer for the preshared
key at the start of
the handshake.
The API looks up the
device proﬁle and
encrypted PSK in the
device database.
The API decrypts the PSK
and then continues the
handshake with that key.
Figure 13.2
 When the device connects to the API, it sends a PSK identifier in the TLS 
ClientKeyExchange message. The API can use this to find a matching device profile with 
an encrypted PSK for that device. The API decrypts the PSK and then completes the TLS 
handshake using the PSK to authenticate the device.
The existing line to load
the example PSK
Create a new PSK 
encryption key.
Initialize the database 
with the encrypted PSK.
494
CHAPTER 13
Securing IoT APIs
null from the getHint() method to disable the ServerKeyExchange message in the
handshake just as you did in chapter 12. Create a new file named DeviceIdentity-
Manager.java in the same folder as the Device.java file you created earlier and add the
contents of the listing.
package com.manning.apisecurityinaction;
import org.bouncycastle.tls.TlsPSKIdentityManager;
import org.dalesbred.Database;
import java.security.Key;
import static java.nio.charset.StandardCharsets.UTF_8;
public class DeviceIdentityManager implements TlsPSKIdentityManager {
    private final Database database;                
    private final Key pskDecryptionKey;             
    public DeviceIdentityManager(Database database, Key pskDecryptionKey) {
        this.database = database;                   
        this.pskDecryptionKey = pskDecryptionKey;   
    }
    @Override
    public byte[] getHint() {   
        return null;            
    }                           
    @Override
    public byte[] getPSK(byte[] identity) {
        var deviceId = new String(identity, UTF_8);   
        return Device.find(database, deviceId)        
                .map(device -> device.getPsk(pskDecryptionKey))     
                .orElse(null);     
    }
}
To use the new device identity manager, you need to update the PskServer class again.
Open PskServer.java in your editor and change the lines of code that create the PSK-
TlsServer object to use the new class. I’ve highlighted the new code in bold:
var crypto = new BcTlsCrypto(new SecureRandom());
var server = new PSKTlsServer(crypto,
        new DeviceIdentityManager(deviceDb, encryptionKey)) {
You can delete the old getIdentityManager() method too because it is unused now.
You also need to adjust the PskClient implementation to send the correct device ID
during the handshake. If you recall from chapter 12, we used an SHA-512 hash of the
PSK as the ID there, but the device database uses the ID "test" instead. Open Psk-
Client.java and change the pskId variable at the top of the main() method to use the
UTF-8 bytes of the correct device ID:
var pskId = "test".getBytes(UTF_8);
Listing 13.5
The device IdentityManager
Initialize
the identity
manager with
the device
database and
PSK decryption
key.
Return a null identity hint to 
disable the ServerKeyExchange 
message.
Convert the PSK 
identity hint into a 
UTF-8 string to use as 
the device identity.
If the device exists,
then decrypt the
associated PSK.
Otherwise, return null to
abort the connection.
495
Authenticating devices
If you now run the PskServer and then the PskClient it will still work correctly, but
now it is using the encrypted PSK loaded from the device database.
EXPOSING THE DEVICE IDENTITY TO THE API
Although you are now authenticating the device based on a PSK attached to its device
profile, that device profile is not exposed to the API after the handshake completes.
Bouncy Castle doesn’t provide a public method to get the PSK identity associated with
a connection, but it is easy to expose this yourself by adding a new method to the PSK-
TlsServer, as shown in listing 13.6. A protected variable inside the server contains the
TlsContext class, which has information about the connection (the server supports
only a single client at a time). The PSK identity is stored inside the SecurityParameters
class for the connection. Open the PskServer.java file and add the new method high-
lighted in bold in the listing. You can then retrieve the device identity after receiving a
message by calling:
var deviceId = server.getPeerDeviceIdentity();
CAUTION
You should only trust the PSK identity returned from getSecurity-
ParametersConnection(), which are the final parameters after the handshake
completes. The similarly named getSecurityParametersHandshake() contains
parameters negotiated during the handshake process before authentication
has finished and may be incorrect.
var server = new PSKTlsServer(crypto,
        new DeviceIdentityManager(deviceDb, encryptionKey)) {
    @Override
    protected ProtocolVersion[] getSupportedVersions() {
        return ProtocolVersion.DTLSv12.only();
    }
    @Override
    protected int[] getSupportedCipherSuites() {
        return new int[] {
                CipherSuite.TLS_PSK_WITH_AES_128_CCM,
                CipherSuite.TLS_PSK_WITH_AES_128_CCM_8,
                CipherSuite.TLS_PSK_WITH_AES_256_CCM,
                CipherSuite.TLS_PSK_WITH_AES_256_CCM_8,
                CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256,
                CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384,
                CipherSuite.TLS_PSK_WITH_CHACHA20_POLY1305_SHA256
        };
    }
    String getPeerDeviceIdentity() {     
        return new String(context.getSecurityParametersConnection()    
                .getPSKIdentity(), UTF_8);                             
    }
};
Listing 13.6
Exposing the device identity
Add a new method to the 
PSKTlsServer to expose 
the client identity.
Look up the PSK
identity and decode
it as a UTF-8 string.
496
CHAPTER 13
Securing IoT APIs
The API server can then use this device identity to look up permissions for this device,
using the same identity-based access control techniques used for users in chapter 8.
13.2
End-to-end authentication
If the connection from the device to the API must pass through different protocols, as
described in chapter 12, authenticating devices at the transport layer is not an option.
In chapter 12, you learned how to secure end-to-end API requests and responses using
authenticated encryption with Concise Binary Object Representation (CBOR) Object
Signing and Encryption (COSE) or NaCl’s CryptoBox. These encrypted message for-
mats ensure that requests cannot be tampered with, and the API server can be sure
that the request originated from the device it claims to be from. By adding a device
identifier to the message as associated data.1 which you’ll recall from chapter 6 is
authenticated but not encrypted, the API can look up the device profile to find the
key to decrypt and authenticate messages from that device.
 Unfortunately, this is not enough to ensure that API requests really did come from
that device, so it is dangerous to make access control decisions based solely on the
Message Authentication Code (MAC) used to authenticate the message. The reason is
that API requests can be captured by an attacker and later replayed to perform the
same action again at a later time, known as a replay attack. For example, suppose you
are the leader of a clandestine evil organization intent on world domination. A moni-
toring device in your uranium enrichment plant sends an API request to increase the
speed of a centrifuge. Unfortunately, the request is intercepted by a secret agent, who
then replays the request hundreds of times, and the centrifuge spins too quickly, caus-
ing irreparable damage and delaying your dastardly plans by several years.
DEFINITION
In a replay attack, an attacker captures genuine API requests and
later replays them to cause actions that weren’t intended by the original client.
Replay attacks can cause disruption even if the message itself is authenticated.
Pop quiz
1
True or False: A PSK ID is always a UTF-8 string.
2
Why should you only trust the PSK ID after the handshake completes?
a
Before the handshake completes, the ID is encrypted.
b
You should never trust anyone until you’ve shaken their hand.
c
The ID changes after the handshake to avoid session fixation attacks.
d
Before the handshake completes, the ID is unauthenticated so it could be fake.
The answers are at the end of the chapter.
1 One of the few drawbacks of the NaCl CryptoBox and SecretBox APIs is that they don’t allow authenticated
associated data.
497
End-to-end authentication