# .NET Framework Rootkits: Backdoors Inside Your Framework

## Table of Contents
1. **Abstract**  
2. **Introduction**  
3. **How Can the Framework Be Changed?**  
4. **Modifying the Framework Core**  
   - 4.1 Overview: Steps & Tools for Changing the Framework  
   - 4.2 Locate the DLL in the GAC  
   - 4.3 Analyze the DLL  
   - 4.4 Decompile the DLL Using ILDASM  
   - 4.5 Modifying the MSIL Code  
   - 4.6 Recompile the DLL Using ILASM  
   - 4.7 Bypassing the GAC Strong Name Model  
   - 4.8 Reverting Back from NGEN Native DLL  
5. **Rootkit Development: Function Injection**  
   - 5.1 SendToUrl(string URL, string Data)  
   - 5.2 ReverseShell(string Hostname, int Port)  
6. **Practical Examples**  
   - 6.1 Forms Authentication Credential Stealing  
   - 6.2 Backdooring Forms Authentication  
   - 6.3 Installing a Reverse Shell Inside a Framework DLL  
   - 6.4 DNS Record Fixation  
   - 6.5 Stealing the Connection String for Every Connection Opening  
   - 6.6 Injecting Browser Exploitation Framework into Auto-Generated HTML/JS Files  
   - 6.7 Encryption Key Fixation / Stealing / Downgrading, etc.  
   - 6.8 SecureString Stealing  
   - 6.9 Disabling Security Checks  
7. **Automating the Process with .NET-Sploit**  
8. **Other Platforms Relevance: Java Rootkits**  
9. **Conclusions**  
10. **About**  
11. **References**

---

## Abstract
This paper introduces application-level rootkit attacks on managed code environments, enabling an attacker to alter the language runtime implementation and hide malicious code within its core. The focus is on the .NET Framework, but the concepts can also be applied to other platforms such as Java's JVM.

The paper covers various methods for developing rootkits for the .NET framework, allowing every EXE/DLL running on a modified framework to behave differently than intended. Code reviews will not detect backdoors installed inside the framework since the payload is embedded in the framework implementation rather than the application code. Writing framework rootkits enables attackers to install reverse shells, steal valuable information, fixate encryption keys, disable security checks, and perform other malicious activities.

Additionally, this paper introduces ".Net-Sploit" — a new tool for building MSIL rootkits that allow users to inject preloaded or custom payloads into the framework core DLL.

---

## Introduction
The .NET Framework is a powerful development environment that has become the de facto standard for software development. It supports the creation of web applications, Windows applications, web services, and more. As a managed code environment, .NET allows code to run within its virtual machine, the Common Language Runtime (CLR), abstracting low-level calls and enabling MSIL (Microsoft Intermediate Language) code to benefit from the provided services.

Since the code written by developers, whether in C#, VB.NET, COBOL.NET, etc., must be compiled to MSIL and then to the CPU's instruction set on the fly (JIT – Just In Time), it is relatively easy to reverse engineer and extract the MSIL code from .NET compiled code. Readers are encouraged to learn more about .NET assembly reverse engineering to better understand the techniques discussed in this paper.

The process of assembly reverse engineering is well-documented, and there are many tools available to observe and tamper with the code of a given DLL. This paper discusses a new technique where these traditional methods are applied to the Framework DLL to change the .NET language and install malicious code such as backdoors and rootkits.

Using framework-level rootkits, you can implement:
- API Hooking (pre/post)
- Method code modification
- Object member manipulation
- Method parameter manipulation
- Polymorphism method overloading
- Return value modification
- Metadata streams tampering
- RVA (Relative Virtual Address) item modification
- Exe dynamic forking

This paper provides examples of some of the techniques listed above.

---

## How Can the Framework Be Changed?
A Framework DLL is essentially a regular .NET assembly, so the same reverse engineering techniques can be applied to it for code tampering. By modifying the Framework DLL, we can change the implementation of methods exposed to the application layer.

Since application-level code relies on the Framework's lower-level methods to perform its tasks, altering these methods means that all applications depending on them will be affected, giving the attacker complete control over their behavior. For example, if the `Console.WriteLine` method is modified to always print "Hacked!", every application calling `WriteLine` will display this altered output.

The methods described in this paper can be applied to any version of the .NET Framework (1.0, 1.1, 2.0, 3.0, and 3.5). To maintain consistency, this paper focuses on version 2.0, but the techniques can be easily adapted to other versions. These methods are not limited to the .NET Framework and can also be applied to other VM-based platforms like Java.

It is important to note that the techniques described in this paper are considered post-exploitation attacks, typically deployed after an attacker has gained system access and wants to leave backdoors and rootkits for further exploitation. Changing the Framework requires administrator-level privileges.

### Example Workflow
- **Application Code:**
  ```csharp
  public void DoSomething() 
  {  
      // some code  
      Console.WriteLine("Some String");  
  }
  ```

- **Modified mscorlib.dll:**
  ```csharp
  public static void WriteLine(string s) 
  { 
      // code that prints "Hacked!" regardless of the string s 
      Console.Write("Hacked! ");
      Console.WriteLine(s);
  }  
  ```

- **Result:**
  - User interface displays: "Hacked! Some String"

---

## Modifying the Framework Core
Framework modification involves tampering with a Framework DLL and reintegrating it into the Framework. This section details the necessary steps and tools to achieve this goal.

### Overview: Steps & Tools for Changing the Framework
1. **Locate the DLL in the GAC and copy it outside.**
2. **Analyze the DLL.**
3. **Decompile the DLL using ILDASM.**
4. **Modify the MSIL code.**
5. **Recompile the DLL using ILASM.**
6. **Bypass the GAC strong name protection.**
7. **Revert from NGEN Native DLL.**
8. **Deploy the new DLL, overwriting the original.**

#### Tools Needed
- **Filemon:** Locating which DLLs are used and their location in the GAC.
- **Reflector:** Analyzing the DLL code.
- **ILASM:** Compiling (MSIL -> DLL).
- **ILDASM:** Decompiling (DLL -> MSIL).
- **Text Editor:** Modifying the MSIL code.
- **NGen:** Native compiler.

### Locate the DLL in the GAC
Our example starts with a simple "Runme.exe" test application that calls `Console.WriteLine` to print a string once. The compiled application code helps identify the Framework DLLs used and their exact location.

```csharp
class Hello 
{ 
    static void Main(string[] args) 
    { 
        Console.WriteLine("Hello (crazy) World!"); 
    } 
}
```

Using Filemon, a file access monitor tool, we can observe the files accessed by our `Runme.exe` application. We need to identify which DLL is used and its location in the GAC (Global Assembly Cache).

From Filemon, we see:
- Access to `mscorlib.dll` located at `c:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089`.

This DLL contains the `WriteLine` function and is one of the most important DLLs. After locating it, we copy it to a temporary directory outside the GAC.

### Analyze the DLL
Next, we analyze the code of the `mscorlib.dll` using Reflector, a tool for .NET assembly reversing. We look for the `WriteLine` method under the `System` namespace in the `Console` class.

### Decompile the DLL Using ILDASM
We use ILDASM to decompile the `mscorlib.dll` and generate the MSIL code. The command to generate the MSIL code and write the output to `mscorlib.dll.il` is:

```sh
ILDASM /OUT=mscorlib.dll.il /NOBAR /LINENUM /SOURCE mscorlib.dll
```

### Modifying the MSIL Code
We now have the decompiled MSIL code in `mscorlib.dll.il`. We locate the `WriteLine` method and modify its MSIL code to print the string twice.

Original MSIL code:
```msil
.method public hidebysig static void  WriteLine(string 'value') cil managed 
  { 
    .permissionset linkcheck 
               = {class 'System.Security.Permissions.HostProtectionAttribute, mscorlib, 
Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' = {property 
bool 'UI' = bool(true)}} 
    // Code size       12 (0xc) 
    .maxstack  8 
    IL_0000:  call       class System.IO.TextWriter System.Console::get_Out() 
    IL_0005:  ldarg.0 
    IL_0006:  callvirt   instance void System.IO.TextWriter::WriteLine(string) 
    IL_000b:  ret 
  } // end of method Console::WriteLine
```

Modified MSIL code:
```msil
.method public hidebysig static void  WriteLine(string 'value') cil managed 
  { 
    .permissionset linkcheck 
               = {class 'System.Security.Permissions.HostProtectionAttribute, mscorlib, 
Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' = {property 
bool 'UI' = bool(true)}} 
    // Code size       12 (0xc) 
    .maxstack  16 
    IL_0000:  call       class System.IO.TextWriter System.Console::get_Out() 
    IL_0005:  ldarg.0 
    IL_0006:  callvirt   instance void System.IO.TextWriter::WriteLine(string) 
    IL_000b:  call       class System.IO.TextWriter System.Console::get_Out() 
    IL_0010:  ldarg.0 
    IL_0011:  callvirt   instance void System.IO.TextWriter::WriteLine(string) 
    IL_0016:  ret 
  } // end of method Console::WriteLine
```

### Recompile the DLL Using ILASM
We recompile the modified MSIL code back into a DLL using ILASM:

```sh
ILASM /output=mscorlib.dll mscorlib.dll.il
```

### Bypassing the GAC Strong Name Model
The GAC uses strong names to ensure the integrity of assemblies. To bypass this, we need to remove the strong name signature and re-sign the DLL with a new key.

### Reverting Back from NGEN Native DLL
If the DLL was previously natively compiled using NGen, we need to revert it back to its managed form before making changes.

### Deploy the New DLL
Finally, we deploy the new DLL, overwriting the original in the GAC.

---

## Rootkit Development: Function Injection
### SendToUrl(string URL, string Data)
### ReverseShell(string Hostname, int Port)

### Practical Examples
- **Forms Authentication Credential Stealing**
- **Backdooring Forms Authentication**
- **Installing a Reverse Shell Inside a Framework DLL**
- **DNS Record Fixation**
- **Stealing the Connection String for Every Connection Opening**
- **Injecting Browser Exploitation Framework into Auto-Generated HTML/JS Files**
- **Encryption Key Fixation / Stealing / Downgrading, etc.**
- **SecureString Stealing**
- **Disabling Security Checks**

### Automating the Process with .NET-Sploit
### Other Platforms Relevance: Java Rootkits
### Conclusions
### About
### References

---

This revised document provides a clear, coherent, and professional structure for the paper, ensuring that each section is well-organized and the content is easy to follow.