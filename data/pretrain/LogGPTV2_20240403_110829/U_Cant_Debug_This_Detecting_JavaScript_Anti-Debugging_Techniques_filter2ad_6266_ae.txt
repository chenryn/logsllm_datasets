### Analysis System and Artifact Absence
The analysis system is hampered by the absence of typical artifacts that result from human interaction with the system in the past.

### Summary
Deterministic execution of malware in multiple environments, followed by a comparison of the differences in execution, is a well-established approach for analyzing malware binaries. To the best of our knowledge, we are the first to apply this concept to JavaScript code running in browsers, providing insights into the prevalence of these techniques in the wild.

### 8.2 Malicious JavaScript
Over the years, numerous publications have addressed malicious JavaScript without a specific focus on evasive measures or anti-debugging. Several works have concentrated on drive-by attacks. For example, Cova et al. [6] introduced JSAND, which uses anomaly detection combined with emulated execution to generate detection signatures. Rieck et al. [43] developed Cujo, which leverages static and dynamic code features to learn and detect malicious patterns via a web proxy. Similarly, Curtsinger et al. [7] created Zozzle, which primarily uses static features from the Abstract Syntax Tree (AST) along with a Bayes classifier to detect malicious code. Stock et al. [54] presented Kizzle, which targets drive-by exploit kits. Their approach is based on the observation that while the obfuscated code of such attacks changes frequently, the underlying unpacked code evolves much more slowly, aiding the detection process. As a more general defense, Maisuradze et al. [35] proposed Dachshund, which removes all attacker-controlled constants from JavaScript code, rendering Just-In-Time Return-Oriented Programming (JIT-ROP) attacks infeasible. Other works have focused on malicious browser extensions [26], discovering malicious websites [21], and creating fast pre-filters to aid large-scale malware detection [4, 15].

### 8.3 Evasive Malware on the Web
A few publications have specifically focused on evasive JavaScript malware, which actively tries to avoid detection. In 2011, Kapravelos et al. [24] demonstrated how to detect the presence of a high-interaction honey-client and subsequently evade detection. One year later, Kolbitsch et al. [29] developed Rozzle, an approach to trigger environment-specific malware via JavaScript multi-execution, allowing them to observe malicious code paths without satisfying checks for browser or plugin versions. Kim et al. [27] improved on this with their work on forced execution to reveal malicious behavior, focusing on preventing crashes. To detect evolving evasive JavaScript malware samples, Kapravelos et al. [25] designed Revolver, which utilizes similarities in samples compared to older versions of the same malware. They argue that malware authors react to detections by anti-virus software and iteratively mutate their code to regain stealthiness. In their work called Tick Tock, Ho et al. [20] investigated the feasibility of browser-based red pills, which can detect if the browser is running in a virtual machine using timing side-channels.

However, while these previous publications address the phenomenon of evasive web malware, they all assume the malware is analyzed as part of an automated system and try to detect differences in the analysis environment. Our threat model, on the other hand, considers anti-debugging measures aimed at hindering or avoiding detection by a human analyst using a real browser.

### 9 Conclusion
In this paper, we systematically explored the phenomenon of anti-debugging techniques targeting human analysts using a real browser. We first introduced six basic techniques and conducted a large-scale study to investigate the prevalence of these techniques in the wild. We found that approximately one out of every 550 sites employs severe anti-debugging, with multiple techniques often active on the same website. Furthermore, we presented a novel approach to detect three sophisticated techniques, based on web page replaying and code convergence. We used this approach to conduct a second, targeted study on the websites with the most severe anti-debugging measures from the first study, identifying over 200 sites that behave differently when under analysis.

While many of these techniques are simple to detect and counter if their presence is known, they can still be quite effective when used in combination. This is especially true if the code is also obfuscated, making it difficult to identify and remove in the source code. Since these techniques allow a website to completely change its behavior under analysis, they pose a significant threat to the security of the web and its users. Therefore, we see the need for a forensic browser with robust and effective inspection capabilities that cannot be detected or interfered with by the website's JavaScript code.

### Acknowledgments
We would like to thank our shepherd Nick Nikiforakis and all anonymous reviewers for their valuable comments and suggestions. Additionally, we gratefully acknowledge funding by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germanyâ€™s Excellence Strategy - EXC 2092 CASA - 390781972.

### References
[References remain unchanged and are formatted as provided.]

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is easier to read and understand.