the analysis system because typical artifacts of human inter-
action with the system in the past are missing.
To summarize, we can see that the deterministic execution
of malware in multiple environments and then comparing
differences in execution is a well-established approach to
analyze malware binaries. However, we are, to the best of
our knowledge, the ﬁrst to apply this concept for JavaScript
code running in browsers and to provide insights into how
wide-spread these techniques are in the wild.
8.2 Malicious JavaScript
Over the years, there have been many publications on ma-
licious JavaScript in general without any particular focus
on evasive measures or anti-debugging. Multiple works fo-
cused on drive-by attacks, e.g., JSAND by Cova et al. [6] uses
anomaly detection combined with an emulated execution to
generate detection signatures, while Cujo by Rieck et al. [43]
use static and dynamic code features to learn malicious pat-
USENIX Association
30th USENIX Security Symposium    2947
terns and detect them on-the-ﬂy via a web proxy. Similarly,
Zozzle by Curtsinger et al. [7], uses mostly static features
from the AST together with a Bayes classiﬁer to detect mali-
cious code. Targeting drive-by exploit kits, Stock et al. [54]
presented their work on Kizzle. Their approach is based on the
fact that while the obfuscated code of such attacks changes
frequently, the underlying unpacked code evolves much more
slowly, which aids the detection process. As a more general
defense that is not based on a detector, Maisuradze et al. [35]
proposed Dachshund, which removes all attacker-controlled
constants from JavaScript code, rendering JIT-ROP attacks
infeasible. Other works focused on malicious browser exten-
sions [26], discovering evil websites [21], and creating fast
pre-ﬁlters to aid the large-scale detection of malware [4, 15].
8.3 Evasive Malware on the Web
A few publications also speciﬁcally focused on eva-
sive JavaScript malware, which actively tries to avoid be-
ing detected. In 2011, Kapravelos et al. [24] showed how
they can detect the presence of a high-interaction honey-
client and subsequently evade detection. One year later,
Kolbitsch et al. [29] created Rozzle, an approach to trigger
environment-speciﬁc malware via JavaScript multi-execution.
This way, they can observe malicious code paths without
actually satisfying checks for browser or plugin versions.
Improving on this, Kim et al. [27] presented their work on
forced execution to reveal malicious behavior, with a focus
on preventing crashes. To detect evasive JavaScript malware
samples that evolve over time, Kapravelos et al. [25] designed
Revolver, which utilizes similarities in samples compared to
older versions of the same malware. Their rationale is that
malware authors react to detections by anti-virus software
and iteratively mutate their code to regain their stealthiness.
In their work called Tick Tock, Ho et al. [20] investigated the
feasibility of browser-based red pills, which can detect if the
browser is running in a virtual machine from JavaScript code
by using timing side-channels.
However, while these previous publications worked on the
phenomenon of evasive Web malware, they all assume the
malware is analyzed as part of an automated system and tries
to detect differences in this analysis environment. On the
other hand, our threat model instead considers anti-debugging
measures to hinder or avoid detection by a human analyst
using a real browser.
9 Conclusion
In this paper, we systematically explored the phenomenon
of anti-debugging techniques targeting human analysts using
a real browser. We ﬁrst introduced 6 basic techniques and
conducted a large-scale study to investigate the prevalence of
these techniques in the wild. We found that as many as 1 out
of 550 sites make use of severe anti-debugging, with multiple
techniques active on the same website. Furthermore, we pre-
sented a novel approach to detect 3 sophisticated techniques,
which is based on web page replaying and code convergence.
We used this approach to conduct a second, targeted study on
the websites with the most severe anti-debugging measures
from the ﬁrst study. In this study, we could identify over 200
sites that behave differently when under analysis.
While many of these techniques are simple to detect and
counter if their presence is known, they can still be quite ef-
fective if multiple of them are used together. This is especially
true if the code is also additionally obfuscated so that they can
not be easily identiﬁed in the source code and subsequently
removed. As these techniques allow a website to completely
change its behavior under analysis, they are a threat to the
security of the Web and its users. We, therefore, see the need
for a forensic browser with effective and robust inspection
capabilities, which can not be detected or interfered with by
the website’s JavaScript code.
Acknowledgments
We would like to thank our shepherd Nick Nikiforakis and
all anonymous reviewers for their valuable comments and
suggestions. Moreover, we gratefully acknowledge funding
by the Deutsche Forschungsgemeinschaft (DFG, German Re-
search Foundation) under Germany’s Excellence Strategy -
EXC 2092 CASA - 390781972.
References
[1] Anthony Lieuallen.
Greasemonkey.
Online
https://addons.mozilla.org/en-US/firefox/addon/
greasemonkey/, June 2019.
[2] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda, C. Kruegel,
and G. Vigna. Efﬁcient detection of split personalities in mal-
ware. In Proc. of Network and Distributed System Security
Symposium (NDSS), 2010.
[3] Black Duck Open Hub.
Chromium open source
Online https://www.openhub.net/p/chrome/
project.
analyses/latest/languages_summary, May 2020.
[4] D. Canali, M. Cova, G. Vigna, and C. Kruegel. Prophiler: a fast
ﬁlter for the large-scale detection of malicious web pages. In
Proc. of the International World Wide Web Conference (WWW),
2011.
[5] ChromeDevTools. Chrome devtools protocol. Online https:
//chromedevtools.github.io/devtools-protocol/,
May 2020.
[6] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis of
drive-by-download attacks and malicious javascript code. In
Proc. of the International World Wide Web Conference (WWW),
2010.
2948    30th USENIX Security Symposium
USENIX Association
[7] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert. Zozzle:
Fast and precise in-browser javascript malware detection. In
Proc. of USENIX Security Symposium, 2011.
[8] CVE Details.
CVE-2018-6140.
Online https://
www.cvedetails.com/cve/CVE-2018-6140/, Jan. 2019.
[9] CVE Details.
CVE-2019-11708.
Online https://
www.cvedetails.com/cve/CVE-2019-11708/, July 2019.
[10] CVE Details.
CVE-2019-11752.
Online https://
www.cvedetails.com/cve/CVE-2019-11752/, Sept. 2019.
[11] CVE Details.
CVE-2019-5789.
Online https://
www.cvedetails.com/cve/CVE-2019-5789/, May 2019.
[12] ECMA International. Ecmascript 2019 language speciﬁcation.
Edition 10, 2019.
[13] Electric Apps.
Vault antitheft.
Online https://
apps.shopify.com/vault-antitheft-protection-app,
May 2020.
[14] A. Fass, R. P. Krawczyk, M. Backes, and B. Stock. Jast: Fully
syntactic detection of malicious (obfuscated) javascript. In
Proc. of Detection of Intrusions and Malware & Vulnerability
Assessment (DIMVA), 2018.
[15] A. Fass, M. Backes, and B. Stock. Jstap: a static pre-ﬁlter for
malicious javascript detection. In Proc. of Annual Computer
Security Applications Conference (ACSAC), 2019.
[16] J. M. Fernández.
JavaScript AntiDebugging Tricks. On-
https://x-c3ll.github.io/posts/javascript-
line
antidebugging/, Feb. 2018.
[17] Google Developers. Chrome devtools. Online https://
developers.google.com/web/tools/chrome-devtools,
Sept. 2019.
[18] Google Git.
Web page replay.
Online https:
//chromium.googlesource.com/catapult/+/HEAD/
web_page_replay_go/, May 2020.
[19] guya. How to know when chrome console is open. On-
line https://blog.guya.net/2014/06/20/how-to-know-
when-chrome-console-is-open/, June 2014.
[20] G. Ho, D. Boneh, L. Ballard, and N. Provos. Tick tock: build-
ing browser red pills from timing side channels. In Proc. of
USENIX Workshop on Offensive Technologies (WOOT), 2014.
[21] L. Invernizzi, P. M. Comparetti, S. Benvenuti, C. Kruegel,
M. Cova, and G. Vigna. Evilseed: A guided approach to ﬁnding
malicious web pages. In Proc. of IEEE Symposium on Security
and Privacy, 2012.
[22] J. Jueckstock and A. Kapravelos. Visiblev8: In-browser moni-
toring of javascript in the wild. In Proc. of Internet Measure-
ment Conference (IMC), 2019.
[24] A. Kapravelos, M. Cova, C. Kruegel, and G. Vigna. Escape
from monkey island: Evading high-interaction honeyclients. In
Proc. of Detection of Intrusions and Malware & Vulnerability
Assessment (DIMVA), 2011.
[25] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and
G. Vigna. Revolver: An automated approach to the detection
of evasive web-based malware. In Proc. of USENIX Security
Symposium, 2013.
[26] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna,
and V. Paxson. Hulk: Eliciting malicious behavior in browser
extensions. In Proc. of USENIX Security Symposium, 2014.
[27] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang,
and D. Xu. J-force: Forced execution on javascript. In Proc. of
the International World Wide Web Conference (WWW), 2017.
[28] D. Kirat, G. Vigna, and C. Kruegel. Barecloud: bare-metal
analysis-based evasive malware detection. In Proc. of USENIX
Security Symposium, 2014.
[29] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert. Rozzle:
De-cloaking internet malware. In Proc. of IEEE Symposium
on Security and Privacy, 2012.
[30] R. K. Konoth, E. Vineti, V. Moonsamy, M. Lindorfer,
C. Kruegel, H. Bos, and G. Vigna. Minesweeper: An in-depth
look into drive-by cryptocurrency mining and its defense. In
Proc. of ACM Conference on Computer and Communications
Security (CCS), 2018.
[31] D. Kumar, Z. Ma, Z. Durumeric, A. Mirian, J. Mason, J. A.
Halderman, and M. Bailey. Security challenges in an increas-
ingly tangled web. In Proc. of the International World Wide
Web Conference (WWW), 2017.
[32] T. Lauinger, A. Chaabane, S. Arshad, W. Robertson, C. Wilson,
and E. Kirda. Thou shalt not depend on me: Analysing the use
of outdated javascript libraries on the web. In Proc. of Network
and Distributed System Security Symposium (NDSS), 2017.
[33] V. Le Pochat, T. Van Goethem, S. Tajalizadehkhoob, M. Kor-
czy´nski, and W. Joosen. Tranco: A research-oriented top sites
ranking hardened against manipulation. In Proc. of Network
and Distributed System Security Symposium (NDSS), 2019.
[34] M. Lindorfer, C. Kolbitsch, and P. M. Comparetti. Detect-
ing environment-sensitive malware. In Proc. of International
Symposium on Research in Attacks, Intrusions and Defenses
(RAID), 2011.
[35] G. Maisuradze, M. Backes, and C. Rossow. Dachshund: dig-
ging for and securing against (non-) blinded constants in jit
code. In Proc. of Network and Distributed System Security
Symposium (NDSS), 2017.
[23] S. Kaplan, B. Livshits, B. Zorn, C. Siefert, and C. Curtsinger.
"nofus: Automatically detecting"+ string. fromcharcode (32)+"
obfuscated". tolowercase ()+" javascript code. Technical report,
Technical Report MSR-TR 2011–57, Microsoft Research, 2011.
[36] S. Matic, G. Tyson, and G. Stringhini. Pythia: a framework
for the automated analysis of web hosting environments. In
Proc. of the International World Wide Web Conference (WWW),
2019.
USENIX Association
30th USENIX Security Symposium    2949
[37] MDN Web Docs.
performance.now().
Online
https://developer.mozilla.org/en-US/docs/Web/
API/Performance/now, May 2020.
[50] StackOverﬂow.
Find out whether chrome console is
open. Online https://stackoverflow.com/questions/
7798748/, Oct. 2011.
[38] N. Miramirkhani, M. P. Appini, N. Nikiforakis, and M. Poly-
chronakis. Spotless sandboxes: Evading malware analysis
systems using wear-and-tear artifacts. In Proc. of IEEE Sym-
posium on Security and Privacy, 2017.
[39] M. Musch, M. Steffens, S. Roth, B. Stock, and M. Johns. Script-
protect: mitigating unsafe third-party javascript practices. In
Proc. of ACM Asia Conference on Computer and Communica-
tions Security (ASIA CCS), 2019.
[40] M. Musch, C. Wressnegger, M. Johns, and K. Rieck. New
kid on the web: A study on the prevalence of webassembly in
the wild. In Proc. of Detection of Intrusions and Malware &
Vulnerability Assessment (DIMVA), 2019.
[41] J. H. Odvarko.
Online
https://hacks.mozilla.org/2017/10/saying-goodbye-
to-firebug/, Oct. 2017.
Saying goodbye to ﬁrebug.
[42] P. H. Phung, D. Sands, and A. Chudnov. Lightweight self-
protecting javascript. In Proc. of ACM Symposium on Infor-
mation, Computer and Communications Security (ASIACCS),
2009.
[43] K. Rieck, T. Krueger, and A. Dewald. Cujo: efﬁcient detection
In Proc. of
and prevention of drive-by-download attacks.
Annual Computer Security Applications Conference (ACSAC),
2010.
[44] Sansec. Digital skimmer runs entirely on Google, defeats CSP.
Online https://sansec.io/research/skimming-google-
defeats-csp, June 2020.
[45] S. Sarker, J. Jueckstock, and A. Kapravelos. Hiding in
plain site: Detecting javascript obfuscation through concealed
browser api usage. In Proc. of Internet Measurement Confer-
ence (IMC), 2020.
[46] T. Seraﬁm and T. Kachalov. JavaScript Obfuscator Tool. On-
line https://obfuscator.io/, Dec. 2020.
[47] Sindresorhus. devtools-detect. Online https://github.com/
sindresorhus/devtools-detect, July 2020.
[48] P. Skolka, C.-A. Staicu, and M. Pradel. Anything to hide?
studying miniﬁed and obfuscated code in the web. In Proc. of
the International World Wide Web Conference (WWW), 2019.
[49] StackOverﬂow. How to quickly and conveniently disable
all console.log statements in my code? Online https://
stackoverflow.com/questions/1215392/, July 2009.
[51] StackOverﬂow.
How does Facebook disable
browser’s
https://stackoverflow.com/a/50674852, Feb. 2014.
integrated Developer Tools?
the
Online
[52] StackOverﬂow. How can I block F12 keyboard key. On-
line https://stackoverflow.com/questions/28575722/,
Feb. 2015.
[53] M. Steffens, M. Musch, M. Johns, and B. Stock. Who’s hosting
the block party? studying third-party blockage of csp and sri. In
Proc. of Network and Distributed System Security Symposium
(NDSS), 2021.
[54] B. Stock, B. Livshits, and B. Zorn. Kizzle: a signature com-
In Proc. of Conference on
piler for detecting exploit kits.
Dependable Systems and Networks (DSN), 2016.
[55] Symantec. Webpulse site review.
Online https://
sitereview.bluecoat.com/, Dec. 2020.
[56] S. J. Tan, S. Bratus, and T. Goodspeed.
Interrupt-oriented
bugdoor programming: a minimalist approach to bugdooring
embedded systems ﬁrmware. In Proc. of Annual Computer
Security Applications Conference (ACSAC), 2014.
[57] T. Urban, M. Degeling, T. Holz, and N. Pohlmann. Beyond
the front page: Measuring third party dynamics in the ﬁeld. In
Proc. of the International World Wide Web Conference (WWW),
2020.
[58] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained malware
analysis using stealth localized-executions. In Proc. of IEEE
Symposium on Security and Privacy, 2006.
[59] Wayback Machine.
Spotify.
Online
https:
//web.archive.org/web/20180301010204/https:
//www.spotify.com/us/, Mar. 2018.
[60] ww. Anti anti-debugger. Online https://greasyfork.org/
Aug.
en/scripts/32015-anti-anti-debugger/code,
2017.
[61] W. Xu, F. Zhang, and S. Zhu. The power of obfuscation tech-
niques in malicious javascript code: A measurement study. In
2012 7th International Conference on Malicious and Unwanted
Software, 2012.
[62] W. Xu, F. Zhang, and S. Zhu. Jstill: mostly static detection
In Proc. of ACM
of obfuscated malicious javascript code.
Conference on Data and Application Security and Privacy
(CODASPY), 2013.
2950    30th USENIX Security Symposium
USENIX Association