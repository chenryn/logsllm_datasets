# Title: Comparing Mobile Privacy Protection through Cross-Platform Applications

## Authors:
Jin Han, Qiang Yan, Debin Gao, Jianying Zhou, Robert H. Deng

### Affiliations:
- **Cryptography and Security Department, Institute for Infocomm Research**
  - Jin Han (hanj@i2r.a-star.edu.sg)
  - Jianying Zhou (zhoujy@i2r.a-star.edu.sg)
- **School of Information Systems, Singapore Management University**
  - Qiang Yan (qiang.yan.2008@smu.edu.sg)
  - Robert H. Deng (robertdeng@smu.edu.sg)

## Abstract
With the rapid growth of the mobile market, the security of mobile platforms is receiving increasing attention from both the research community and the public. In this paper, we establish a baseline for comparing the security of the two most popular mobile platforms: Android and iOS. We investigate applications that run on both platforms and examine the differences in their usage of security-sensitive APIs (SS-APIs). Our analysis of over 2,600 applications shows that iOS applications consistently access more SS-APIs than their Android counterparts. These additional privileges often involve accessing private resources such as device IDs, cameras, and user contacts.

A possible explanation for this difference is that the privileges obtained by an application on the current iOS platform are invisible to end users. Our analysis reveals that:
1. Third-party libraries, particularly advertising and analytic libraries, on iOS invoke more SS-APIs than those on Android.
2. Android application developers avoid requesting unnecessary privileges, which would be visible in the permission list during installation.

Although Android may gain additional privileges through privilege-escalation attacks, and iOS provides a more restricted set of accessible privileges, our results do not necessarily imply that Android offers better privacy protection. However, our findings suggest that Apple’s application vetting process may not be as effective as Android’s privilege notification mechanism, especially in protecting sensitive resources from third-party applications.

## I. Introduction
The intense competition among mobile platforms has sparked debates about which platform has a better architecture for security and privacy protection. Discussions typically focus on Google’s Android and Apple’s iOS, the top two players in terms of user base. Some argue that Android is better because it makes the complete permission list visible to users and follows an open-source approach. Others claim that iOS is superior due to Apple's rigorous application screening process, its control over hardware, and the closed nature of the platform, which makes it less vulnerable to attacks.

Some studies suggest that both platforms achieve comparable security but in different ways. These differing opinions highlight the need for a baseline for security comparison among mobile platforms. Unlike previous efforts that compare abstract and general practices, we make the first attempt to establish such a baseline by analyzing the usage of security-sensitive APIs (SS-APIs) in cross-platform applications.

A cross-platform application runs on multiple mobile platforms, such as the Facebook app, which has both Android and iOS versions with almost identical functionality. We identified these applications by crawling information from both Google Play and the iTunes App Store. Our web crawler collected data on more than 300,000 Android applications and 400,000 iOS applications. Using data mining techniques, we matched applications across the two platforms and found that 12.2% of the applications on Google Play have a counterpart on the iTunes Store. From these, we selected the 1,300 most popular pairs for further analysis of their SS-API usage.

An SS-API is a public API provided for third-party applications that can access private user data or control device components. To analyze the similarities and differences in SS-API usage, we developed an SS-API mapping between Android and iOS. Based on the permission concept in Android and the existing Android API-to-permission mapping, we grouped the SS-APIs on iOS into 20 types and mapped them to corresponding Android SS-APIs. This allowed us to statically analyze the cross-platform applications (Android Dalvik binaries and iOS Objective-C executables).

Our analysis of the 1,300 pairs of cross-platform applications showed that 73% of iOS applications access additional SS-APIs compared to their Android counterparts. These additional SS-APIs often involve accessing sensitive resources such as device IDs, cameras, user contacts, and calendars, potentially leading to privacy breaches or security risks. Further investigation revealed that third-party libraries, especially advertising and analytic libraries, on iOS access more SS-APIs than those on Android. This is likely because sensitive resources can be accessed more stealthily on iOS, whereas all required privileges must be shown to the user during installation on Android. We also confirmed with Android developers that they avoid using SS-APIs if the same functionality can be achieved with non-security-sensitive APIs.

These results suggest that Apple’s vetting process may not be as effective as commonly believed, particularly in protecting users’ private data from third-party applications. This issue might have been recognized by Apple, as the newly released iOS 6 includes privilege notifications for accessing user contacts, calendars, photos, and reminders.

### Contributions
- We establish the first baseline for comparing the security architectures of different mobile platforms by examining the SS-API usage of cross-platform applications.
- We investigate the SS-APIs of the iOS platform and their relations to Android SS-APIs, providing a comprehensive understanding of how platform differences influence privacy protection against third-party applications.
- We implement static analysis tools for both Android and iOS applications and apply these tools to popular cross-platform applications. Our results show significant differences in SS-API usage, suggesting that the lack of an explicit privilege-list mechanism on iOS may indicate that Apple’s vetting process is not as effective as expected in restricting SS-API usage by developers.

## II. Background and Overview

### A. Security Model: Android vs. iOS
Mobile security differs from desktop PC security, with the goal being to make the platforms inherently secure rather than relying on third-party solutions. Both Android and iOS employ various security mechanisms, as summarized in Table I.

**Table I: Security Feature Comparison: Android vs. iOS**

| Security Feature              | Android          | iOS              |
|-------------------------------|------------------|------------------|
| Privilege Notification        | Yes              | Partial          |
| Approval/Vetting Process      | Partial (Bouncer)| Yes              |
| Digital Signing               | Yes              | Yes              |
| Binary Encryption             | Since v4.1       | Yes              |
| Sandboxing                    | Yes (UNIX UIDs)  | Yes (Sandboxing) |
| Data Encryption               | Yes              | Yes              |
| Damage Control (Kill Switch)  | Yes              | Yes              |
| Address Space Layout Randomization | Since v4.0 | Since v4.3       |

**Privilege Notification:**
- **Android:** An application must explicitly declare the privileges it requires. Users see these privileges during installation and can choose to proceed or not.
- **iOS:** All third-party applications are given the same set of default privileges. Until iOS 5, the only privileges requiring user acknowledgment were for location information and push notifications.

**Approval/Vetting Process:**
- **Apple:** Requires approval before distributing an application via the iTunes Store. Each uploaded application is screened for malicious code and compliance with Apple’s privacy policy. However, this process is not well-documented, and some malicious applications have passed the vetting process.
- **Android:** Bouncer, an automated scanning tool, checks for potentially malicious software on Google Play. It does not require an application approval process but analyzes already-released applications.

**Signing and Encryption:**
- **Both Platforms:** Every application is digitally signed with a certificate. On Android, developers sign applications, while on iOS, Apple signs them. Additionally, iOS application binaries are partially encrypted to prevent unauthorized distribution.
- **Android 4.1 and later:** Paid applications are encrypted with a device-specific key before delivery and storage.

**Other Features:**
- **Sandboxing and UIDs:** iOS uses a sandboxing policy, while Android uses UNIX UIDs to separate individual applications.
- **Data Encryption and Remote Erase:** Both platforms provide services to encrypt users’ confidential data and allow remote erasure if a device is lost.
- **Kill Switches:** Both platforms have kill switches to remove malicious applications remotely, limiting their spread.
- **Address Space Layout Randomization:** Starting from Android 4.0 and iOS 4.3, both platforms use this feature to protect against memory vulnerabilities.

While both platforms share common defense mechanisms, they have distinct features. Android’s privilege notification system has security advantages but relies on users who may not understand the listed privileges. iOS’s approval process provides some defense against malicious applications, but its effectiveness is limited and can be bypassed.

### B. Comparison Framework Overview
To perform a fair comparison of the security and privacy provided by Android and iOS, we focused on cross-platform applications. The overview of our comparison framework is given in Figure 1, and the rest of the paper is organized according to this framework.

**Figure 1: Overview of the Comparison Framework**

1. **Section III:** Provides statistics on cross-platform third-party applications on both Android and iOS.
2. **Section IV:** Analyzes the types of SS-APIs on Android and compares them with those on iOS.
3. **Section V:** Describes the design and implementation of our static analysis tools.
4. **Section VI and VII:** Present and discuss the results of our static analysis on 1,300 pairs of applications.
5. **Section VIII:** Summarizes related work.
6. **Section IX:** Concludes the paper.

## III. Cross-Platform Applications

### A. Preliminary Data Collection
To identify applications that exist on both Android and iOS, we compared detailed information such as application names, developing companies, and descriptions. We built web crawlers for both Google Play and the iTunes App Store, collecting data on 312,171 Android applications and 478,819 iOS applications from April to May 2012. This data was analyzed to identify cross-platform applications.

### B. Identifying Cross-Platform Applications
We considered two applications (one on Android and one on iOS) to be versions of the same cross-platform application if they had the same set of functionalities. For example, both platforms have a Facebook application with the same features.

To handle the large number of candidate applications, we developed an automatic tool to find the most likely candidates by comparing their names, developer information, and descriptions. These candidates were categorized into five non-overlapping sets based on the degree of similarity. We randomly selected some candidates from each set and manually verified their functionality.

This analysis enabled us to estimate that 12.2% (about one in eight) of Android applications have a counterpart on iOS.

### C. Stratified Sampling
To minimize errors in identifying cross-platform applications, we focused our static analysis on the set containing application pairs with exactly the same name and developer information and a high degree of similarity in descriptions. This set included 20,171 cross-platform applications. The distribution of these applications among different categories is shown in Figure 2, compared with the distribution of all applications on Android and iOS.

**Figure 2: Distribution of Cross-Platform Apps vs. All Third-Party Apps on Android and iOS**

Cross-platform applications are more likely to appear in “Business” and “Games” categories and less likely in “Books” or “Utilities.”

We chose to focus on Android 4.0 and iOS 5.0, both released in October 2011. Given the 122 application permissions supported on Android 4.0, we determined the exact privileges obtained in each permission by examining the functionality of all related APIs. We then investigated online advisories and offline iOS documentation to determine whether each Android privilege is supported on iOS and how it is supported. The overview of the analysis result is given in Table II.

**Table II: Classification of Android Application Privileges**

| SS-API Types                | Group of Privileges | Count |
|-----------------------------|---------------------|-------|
| Does not actually exist in Android | -                   | 7     |
| Already deprecated in Android, or no Android API corresponds to it | - | 42    |
| Reserved by Android system  | Only for OEMs, not granted to third-party apps | 7     |

Among the 20,171 cross-platform applications, we selected 1,300 pairs (2,600 applications) for detailed static analysis. To improve representativeness, we performed stratified sampling based on the category distribution. We excluded applications that only work on tablets and manually checked the chosen pairs to ensure they were real cross-platform applications.

## IV. Comparing Application Privileges
To compare the security architecture of Android and iOS, one of the most important perspectives is to examine the similarities and differences in restricting privileges for third-party applications. However, comparing these privileges is challenging due to differences in granularity and the need for a mapping between the two platforms.