title:Comparing Mobile Privacy Protection through Cross-Platform Applications
author:Jin Han and
Qiang Yan and
Debin Gao and
Jianying Zhou and
Robert H. Deng
Comparing Mobile Privacy Protection through Cross-Platform Applications
Jin Han(cid:3), Qiang Yany, Debin Gaoy,
(cid:3)Cryptography and Security Department
Institute for Infocomm Research
fhanj, PI:EMAIL
Jianying Zhou(cid:3), Robert Dengy
ySchool of Information Systems
Singapore Management University
fqiang.yan.2008, robertdeng, PI:EMAIL
Abstract—With the rapid growth of the mobile market, secu-
rity of mobile platforms is receiving increasing attention from
both research community as well as the public. In this paper,
we make the ﬁrst attempt to establish a baseline for security
comparison between the two most popular mobile platforms.
We investigate applications that run on both Android and
iOS and examine the difference in the usage of their security
sensitive APIs (SS-APIs). Our analysis over 2,600 applications
shows that iOS applications consistently access more SS-APIs
than their counterparts on Android. The additional privileges
gained on iOS are often associated with accessing private
resources such as device ID, camera, and users’ contacts.
A possible explanation for this difference in SS-API usage
is that privileges obtained by an application on the current
iOS platform are invisible to end users. Our analysis shows
that: 1) third-party libraries (speciﬁcally advertising and an-
alytic libraries) on iOS invoke more SS-APIs than those on
Android; 2) Android application developers avoid requesting
unnecessary privileges which will be shown in the permission
list during application installation. Considering the fact that
an Android application may gain additional privileges with
privilege-escalation attacks and iOS provides a more restricted
privilege set accessible by third-party applications, our results
do not necessarily imply that Android provides better privacy
protection than iOS. However, our evidence suggests that
Apple’s application vetting process may not be as effective
as Android’s privilege notiﬁcation mechanism, particularly in
protecting sensitive resources from third-party applications.
I. INTRODUCTION
The current intensive competition among mobile plat-
forms has sparked a heated debate on which platform has
a better architecture for security and privacy protection.
Discussions usually focus on Google’s Android and Apple’s
iOS, which are the top two players in terms of user base [1],
[2]. Some claim that Android is better since it makes the
complete permission list visible to users and it takes an
open-source approach [2]. Some argue that iOS is better
because 1) Apple screens all applications before releasing
them to the iTunes App Store (aka. Apple’s vetting process);
2) Apple has complete control of its hardware so that OS
patches and security ﬁxes are more smoothly applied on all
devices; and 3) the open-source nature of Android makes
it an easier target of attacks than iOS [1]. Others [3], [4]
suggest that the two platforms achieve comparable security
but in different ways. These different voices clearly raise
the need for establishing a baseline for security comparison
among different mobile platforms. Unlike most prior efforts
in comparing the abstract and general practices towards
security [1], [2], [3], [4], we make the ﬁrst attempt
to
establish such a baseline by analyzing the security-sensitive
API usage on cross-platform applications.
A cross-platform application is an application that runs on
multiple mobile platforms, e.g., the Facebook application has
both an Android and an iOS version with almost identical
functionality. We ﬁrst try to identify these cross-platform
applications by crawling information on both Google Play
and iTunes App Store. Our web crawler collects information
of more than 300,000 Android applications and 400,000 iOS
applications. Several data mining techniques are adopted to
match the applications released for the two platforms. We
ﬁnd that 12.2% of the applications on Google Play have a
replica on iTunes Store. Among them, we select the most
popular 1,300 pairs to further analyze their security-sensitive
API usage.
A security-sensitive API (SS-API) is a public API pro-
vided for third-party applications that may have access to
private user data or control over certain device components
(e.g., Bluetooth and camera). In order to analyze the similar-
ities and differences of the SS-API usage, the ﬁrst challenge
is to develop an SS-API mapping between Android an iOS.
Based on the permission concept on Android and the existing
Android API-to-permission mapping provided by Felt et
al. [5], we group the SS-APIs on iOS into 20 different
API types and map them to the corresponding Android SS-
APIs. Our analysis produces a list of SS-API types that
are both supported by Android and iOS. With such API
mappings available, we statically analyze the cross-platform
applications (Android Dalvik binaries and iOS Objective-C
executables).
By analyzing the 1,300 pairs of cross-platform applica-
tions, which are sampled from the most popular applications,
we show that 73% of them on iOS access additional SS-
APIs, compared to their replicas on Android. The addi-
tional SS-APIs invoked are mostly for accessing sensitive
resources such as device ID, camera, user contacts, and
calendar, which may cause privacy breaches or security risks
without being noticed. We further investigate the underlying
reasons by separately analyzing third-party libraries and
applications’ own code. Our results show that the commonly
used third-party libraries on iOS, especially the advertising
and analytic libraries access more SS-APIs compared to
the corresponding libraries on Android. Similar results are
observed from the applications’ own code. Further analysis
shows that a likely explanation of such differences is that
sensitive resources can be accessed more stealthily on the
current iOS platform, compared to Android where all the
privileges required by an application have to be shown to the
end user during installation. We also discover, and conﬁrm
with the Android application developers, that SS-APIs may
be intentionally avoided if the same functionality can be
implemented by non-security sensitive APIs. These results
suggest that Apple’s vetting process may not be as effective
as that most users think, particularly in protecting users’
private data from third-party applications. This problem
might also have been realized by Apple Inc., as the newly
released iOS 6 has added privilege notiﬁcations for accessing
user contacts, calendar, photos, and reminders.
The contributions of this paper are as follows:
(cid:15) We establish the ﬁrst baseline for comparing the secu-
rity architectures of different mobile platforms by ex-
amining security-sensitive API usage of cross-platform
applications. This baseline provides a more compre-
hensive understanding on how the platform difference
inﬂuences the privacy protection against
third-party
applications.
(cid:15) We investigate the SS-APIs of iOS platform and their
relations to Android SS-APIs, which complement the
existing knowledge on the security architecture of con-
temporary mobile platforms. Our analysis reveals the
SS-API types that are supported by both Android and
iOS.
(cid:15) We implement static analysis tools for both Android
and iOS applications and apply these tools on popu-
lar cross-platform applications. Our results show sig-
niﬁcant difference in the SS-API usage for Android
and iOS third-party applications. The detailed analysis
shows a strong correlation between such usage differ-
ence and the lack of an explicit privilege-list mecha-
nism on iOS, which may imply that Apple’s vetting
process is not as effective as expected in restricting
SS-API usage by application developers.
II. BACKGROUND AND OVERVIEW
A. Security Model: Android vs. iOS
Mobile security is very different from desktop PC security
– the security goal of mobile operating systems is to make
the platforms inherently secure rather than to force users
to rely upon third-party security solutions. Thus, various
security mechanisms are adopted and enabled as default on
current mobile operating systems. The security features used
by Android and iOS are listed in Table I.
Privilege Notiﬁcation: On Android, an application has
to explicitly declare the privileges it requires. A user will be
presented with these privileges when installing an applica-
tion so that he can choose not to proceed if he is unwilling
SECURITY MODEL COMPARISON: ANDROID VS. IOS
Table I
Security Feature
Privilege Notiﬁcation
Approval/Vetting Process
Digital Signing
Binary Encryption
Sandboxing
Data Encryption
Damage Control
Address Space Layout Randomization
Android
Yes
Partial
Yes
Since v4.1
Yes
Yes
Yes
iOS
Partial
Yes
Yes
Yes
Yes
Yes
Yes
Since v4.0
Since v4.3
to grant the corresponding privileges. On iOS, however, all
third-party applications are treated “equally” in the sense
that they are given the same set of privileges as default.
Until iOS 5, the only privileges which require users’ explicit
acknowledgement are for accessing location information and
for sending push notiﬁcations.
Approval/Vetting Process: Approval from Apple is
needed before an application is distributed via the iTunes
Store. Apple screens each uploaded application to check
whether it contains malicious code or violates Apple’s priva-
cy policy before releasing it on the iTunes Store. This vetting
process is not well-documented, and there have been cases
where malicious applications passed the vetting process but
had to be removed later from the iTunes Store [6]. On
the Android platform, Bouncer [7] is recently revealed by
Android team which provides automated scanning of Google
Play for potentially malicious software. However, Bouncer
does not require developers to go through an application
approval process. It performs a set of analysis on the
applications that are already released on Google Play.
Signing and Encryption: On both platforms, every ap-
plication is digitally signed with a certiﬁcate. The difference
is that Android applications are signed by developers and
iOS applications are signed by Apple. Furthermore, signing
on Android is mainly used in the sandbox for resource
sharing – applications that are signed by the same private
key can be assigned with the same process ID on Android.
In addition to signing,
iOS application binaries are al-
so partially-encrypted to mitigate unauthorized distribution.
Each application downloaded from the iTunes Store has
to be decrypted ﬁrst in memory before launching. Starting
from Android 4.1, all paid applications on Google Play
are encrypted with a device-speciﬁc key before they are
delivered and stored on an Android device.
Other features:
iOS uses a sandboxing policy and
Android uses UNIX UIDs to separate each individual ap-
plication. Both platforms provide the service of encrypting
users’ conﬁdential data, which could also be remotely erased
once the device is lost. In addition, both platforms have
kill switches in the hands of Google/Apple which can
be used to remove malicious applications from the users’
phones remotely. This feature limits the potential damage
of a malicious application by preventing it from spreading
widely. Finally, starting from Android 4.0 and iOS 4.3, both
platforms provide address space layout randomization to
help protect the systems and applications from exploitation
due to memory vulnerabilities.
From the general comparison we can see that both plat-
forms employ a number of common defense mechanisms,
but also have their own distinct features. Android’s privilege
notiﬁcation has some security advantage, but it pushes the
most important security checking work to its end users who
might not have expertise in security and may not even read
or understand those privileges listed during application in-
stallation [8]. On iOS, the approval process provides certain
degree of defense against malicious applications. However,
its capability is limited and can be bypassed sometimes [6].
Thus, a systematic comparison of the applications on these
two platforms is needed to fully understand the effectiveness
of these two different security architectures.
B. Comparison Framework Overview
To perform a fair comparison on security and privacy
provided by Android and iOS, we focus on comparing
the cross-platform applications on these two platforms. The
overview of our comparison framework is given in Figure 1,
and the rest of this paper is organized according to the
ﬂow of this comparison framework. Section III provides
the statistics of the cross-platform third-party applications
on both Android and iOS. Section IV then analyzes all
types of SS-APIs on Android and compares them with those
on iOS platform. The design and implementation of our
static analysis tools are presented in Section V. With the
SS-API mapping and static analysis tools on both Android
and iOS, we then perform our static analysis on the 1,300
pairs of applications selected, and the results are presented
and discussed in Section VI and Section VII. Finally, we
summarize related work in Section VIII and conclude the
paper in Section IX.
III. CROSS-PLATFORM APPLICATIONS
A. Preliminary Data Collection
In order to ﬁnd out what are the applications that exist on
both Android and iOS, we need to compare their detailed
information such as application name, developing company,
application description, etc. The application product pages
from Google Play and iTunes App Store do provide such
information, although public APIs of obtaining this infor-
mation do not exist. Thus, we build web crawlers for both
Google Play and iTunes Store, and collect detailed appli-
cation information for 312,171 Android applications and
478,819 iOS applications from April to May in 2012, which
are further analyzed to identify cross-platform applications.
Figure 1. Overview of the comparison framework.
B. Identifying Cross-platform Applications
We consider two applications (one on Android and the
other on iOS) to be two versions of the same cross-platform
application if they have the same set of functionality. For
example, both Android and iOS has a Facebook application
that provides the same functionality.
To be able to handle the large number of candidate cross-
platform applications, we ﬁrst develop an automatic tool to
ﬁnd the most likely candidates by comparing their names,
developer information, and the application descriptions (re-
fer to Appendix A for detailed discussion on the automatic
process). These candidates are categorized into ﬁve non-
overlapping sets according to the degree of similarity in
the three attributes, and we randomly select some candi-
date applications from each set and manually analyze the
functionality of them for veriﬁcation.
An interesting output of this analysis is that it enables us
to estimate the total number of cross-platform applications
on Android and iOS. Using the true positive rates obtained
from our manual veriﬁcation, we ﬁnd that 12:2% (about one
in eight) applications on Android have a replica application
on iOS.
C. Stratiﬁed Sampling
To minimize the propagation of errors from the identiﬁca-
tion of cross-platform application into subsequent analysis,
we focus our static analysis of cross-platform application
on the candidate set
that contains application pairs that
have exactly the same name and developer information as
well as a high degree of similarity in the descriptions.
This set provides a total number of 20,171 cross-platform
applications. The distribution of these applications among
different categories is given in Figure 2, which is compared
(Java reflection resolving, content providers, inheritance...)(App cracking, disassembling, _objc_msgSendresolving...)with the distribution of all applications on Android and iOS
in the entire data set collected. As shown in Figure 2, cross-
platform applications are more likely to appear in “Business”
and “Games” categories, and are less likely to appear in
“Books” or “Utilities”.
We choose to focus our work on Android 4.0 and iOS
5.0 which were both ofﬁcially released in October 2011.
Given the 122 application permissions supported on Android
4.0 [9], we ﬁrst ﬁnd out what is the exact privilege obtained
in each permission by examining the functionality of all
APIs related to this permission according to the mapping
of Android permission to API1 provided by [5]. We then
carefully investigate both online advisories and ofﬂine iOS
documentations on Xcode2 to ﬁnd out whether each privilege
available on Android is supported, and how it is supported
on the iOS platform. The overview of the analysis result is
given in Table II.
Table II
A CLASSIFICATION OF ANDROID APPLICATION PRIVILEGES
SS-API types
Group of Privileges
#*
Does not actually exist in Android
Already deprecated in Android, or no
Android API corresponds to it.
Reserved by Android system
Only for OEMs, not granted to third-
party apps. i.e., these privileges can only
be used by apps signed with system keys.
7
42
SET PREFERRED
APPLICATIONS
BRICK
DELETE CACHE
FILES
WRITE SECURE
SETTINGS
Figure 2. The distribution of the cross-platform apps vs. the distribution
of all third-party apps on Android and iOS.
Among these 20,171 cross-platform applications, we s-
elect 1,300 pairs (2,600 applications) to perform detailed
static analysis on the application executables. To improve
the representativeness of this sample set, we perform a
stratiﬁed sampling according to the category distribution of
these cross-platform applications. We then pick the most
popular free applications within each category. During the
sampling, we also exclude applications that only work on
tablets (e.g., iPad and Google Tablet) so that our analysis
could focus on applications that are mainly developed for
smartphones. Finally, we manually checked all the chosen
pairs of applications to ensure that
they are real cross-
platform applications. The results of the static analysis on
these selected applications will be presented in Section VI.
IV. COMPARING APPLICATION PRIVILEGES
To compare the security architecture of Android and iOS,
one of the most important comparison perspectives is to
ﬁnd out
the similarity and difference on restricting the
privileges for the third-party applications running on these
platforms. However, it is not clear how such privileges can
be compared as they might be of different granularity on
the two platforms, and a mapping of them between the two