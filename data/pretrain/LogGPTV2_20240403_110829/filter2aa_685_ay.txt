### All Tests Finished Successfully

The following message will be displayed upon the successful completion of all tests:
```nim
echo("All tests finished successfully!")
```

This comprehensive test evaluates the entire database module, ensuring its full functionality. To verify, compile and run the test yourself. You should see two messages on your screen, followed by “All tests finished successfully!”

### Database Module Completion

With this section, we conclude the development of the database module. This module is now capable of storing information about users, including their followers and posted messages. Additionally, it can read back this data. The module's functionality is encapsulated in an API that abstracts the database, providing only the necessary procedures for building the Tweeter web application.

### 7.4 Developing the Web Application’s View

Now that the database module is complete, we can begin developing the web component of the application.

#### MVC Architecture

- **Model (Database Module)**: Provides the data needed by the application.
- **View**: Will contain multiple modules, each defining one or more procedures that take data as input and return HTML as output.
- **Controller**: Acts as a link between the view and model components.

It is best to implement the view first, as the controller will depend on it.

### View Procedures

One of the view procedures, `renderUser`, will take a `User` object and generate HTML, which will be returned as a string. Figure 7.12 illustrates how this procedure, along with the database module and the controller, will display user information.

#### Implementing `renderUser`

There are several ways to convert information into HTML, such as using the `%` string formatting operator:

```nim
import strutils

proc renderUser(user: User): string =
    return "$1Following: $2" % [user.username, $user.following.len]
```

However, this method is error-prone and does not handle special characters. Nim provides more intuitive methods for generating HTML, such as the `htmlgen` module and filters.

##### Using `htmlgen` Module

```nim
import htmlgen

proc renderUser(user: User): string =
    return `div`(
        h1(user.username),
        span("Following: ", $user.following.len)
    )
```

##### Using Filters

Filters allow you to mix Nim code with other code, enabling verbatim HTML writing and Nim code usage. Here’s an example:

```nim
#? stdtmpl(subsChar = '$', metaChar = '#')
#import "../database"

#proc renderUser*(user: User): string =
#
result = ""
${user.username}
Following: ${$user.following.len}
#end proc

#when isMainModule:
#
echo renderUser(User(username: "d0m96", following: @[]))
#end when
```

Save this in `views/user.nim` and compile it. You should see the following output:

```
d0m96
0
```

##### Escaping Special Characters

To escape special characters, you can customize the filter:

```nim
#? stdtmpl(subsChar = '$', metaChar = '#', toString = "xmltree.escape")
#import "../database"
#import xmltree

#proc renderUser*(user: User): string =
#
result = ""
${user.username}
Following: ${$user.following.len}
#end proc

#when isMainModule:
#
echo renderUser(User(username: "d0m96<>", following: @[]))
#end when
```

Save this in `views/user.nim` and note the new output:

```
d0m96&lt;&gt;
0
```

### 7.4.1 Developing the User View

The `view/user.nim` file already contains most of the user view implementation. The `renderUser` procedure will display basic user information and all of the user's messages.

#### Adding Follow and Unfollow Buttons

To include follow and unfollow buttons, we can overload the `renderUser` procedure with a new version that takes an additional `currentUser` parameter:

```nim
#proc renderUser*(user: User, currentUser: User): string =
#
result = ""
${user.username}
Following: ${$user.following.len}
#if user.username notin currentUser.following:
#end if
#
#end proc
```

Figure 7.14 shows what the follow button will look like once rendered.

### 7.4.2 Developing the General View

The general view will be used for the front page, showing either a login form or the messages posted by the people the user follows.

Create a new file called `general.nim` in the `views` directory.

#### `renderMain` Procedure

Implement the `renderMain` procedure to generate the main body of the HTML page:

```nim
#? stdtmpl(subsChar = '$', metaChar = '#')
#import xmltree

#proc `$!`(text: string): string = escape(text)
#end proc

#proc renderMain*(body: string): string =
#
result = ""
Tweeter written in Nim
${body}
#end proc
```

#### `renderLogin` Procedure

The `renderLogin` procedure will show a simple login form:

```nim
#proc renderLogin*(): string =
#
result = ""
Login
Please type in your username...
#end proc
```

Add this procedure to the bottom of the `general.nim` file.

### Conclusion

With the user and general views implemented, the next step is to build the remaining views and integrate them into the Tweeter web application.