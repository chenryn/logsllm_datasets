title:TCP revisited: a fresh look at TCP in the wild
author:Feng Qian and
Alexandre Gerber and
Zhuoqing Morley Mao and
Subhabrata Sen and
Oliver Spatscheck and
Walter Willinger
TCP Revisited: A Fresh Look at TCP in the Wild
Feng Qian
University of Michigan
Subhabrata Sen
AT&T Labs Research
Alexandre Gerber
AT&T Labs Research
Oliver Spatscheck
AT&T Labs Research
Z. Morley Mao
University of Michigan
Walter Willinger
AT&T Labs Research
ABSTRACT
Since the last in-depth studies of measured TCP trafﬁc some 6-
8 years ago, the Internet has experienced signiﬁcant changes, in-
cluding the rapid deployment of backbone links with 1-2 orders
of magnitude more capacity, the emergence of bandwidth-intensive
streaming applications, and the massive penetration of new TCP
variants. These and other changes beg the question whether the
characteristics of measured TCP trafﬁc in today’s Internet reﬂect
these changes or have largely remained the same. To answer this
question, we collected and analyzed packet traces from a number of
Internet backbone and access links, focused on the “heavy-hitter”
ﬂows responsible for the majority of trafﬁc. Next we analyzed their
within-ﬂow packet dynamics, and observed the following features:
(1) in one of our datasets, up to 15.8% of ﬂows have an initial con-
gestion window (ICW) size larger than the upper bound speciﬁed
by RFC 3390. (2) Among ﬂows that encounter retransmission rates
of more than 10%, 5% of them exhibit irregular retransmission be-
havior where the sender does not slow down its sending rate during
retransmissions. (3) TCP ﬂow clocking (i.e., regular spacing be-
tween ﬂights of packets) can be caused by both RTT and non-RTT
factors such as application or link layer, and 60% of ﬂows stud-
ied show no pronounced ﬂow clocking. To arrive at these ﬁndings,
we developed novel techniques for analyzing unidirectional TCP
ﬂows, including a technique for inferring ICW size, a method for
detecting irregular retransmissions, and a new approach for accu-
rately extracting ﬂow clocks.
Categories and Subject Descriptors
C.2.2 [Computer Communication Networks]: Network Proto-
cols
General Terms
Measurement, Algorithms
Keywords
Network measurement, TCP
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’09, November 4–6, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-770-7/09/11 ...$10.00.
1.
INTRODUCTION
IP networks today carry trafﬁc from a diverse set of applications
ranging from non-real-time email and bulk data transfer like FTP
to applications with much more stringent real-time performance
and reliability requirements as Voice over IP (VoIP), Internet tele-
vision (IPTV), Internet games and critical business transactions.
A number of intertwined factors have contributed to this material
shift in the application mix from even a few years ago when best-
effort non-real-time applications like email, FTP and Web dom-
inated. These factors include the rapid deployment of backbone
links with 1-2 orders of magnitude more capacity, the increasing
reach of broadband access networks, the emergence of bandwidth-
intensive streaming applications, and a steady relentless economic-
technological move towards transitioning even mission-critical ap-
plications from dedicated networks to the Internet using architec-
tures like Virtual Private Networks (VPN).
Interestingly, even though the applications and their requirements
have multiplied, the Transmission Control Protocol (TCP) [8] has
remained the dominant transport-layer protocol in IP networks, be-
ing widely adopted by many of these new applications. Today TCP
accounts for majority of the trafﬁc on the Internet. This has hap-
pened even though TCP was originally designed to support a reli-
able, in-order delivery of a byte-stream between two end-points in
a bandwidth friendly manner, and is not the ideal transport protocol
for applications with real-time constraints. Practical considerations
that favored TCP include (i) TCP is deployed almost everywhere
(ii) using TCP helps ofﬂoad many low-level transport details that
an application developer would otherwise have to contend with, and
(iii) ease of maintaining reachability across ﬁrewalls which are rou-
tinely conﬁgured to allow TCP packets through but block non-TCP
ﬂows. Fueled by the need to support more stringent performance
requirements of emerging applications, the past few years have also
witnessed the massive penetration of new TCP variants or new
TCP congestion control algorithms like FAST [34], HSTCP [15]
and CUBIC [16], and vendors promoting acceleration boxes that
offer proprietary optimizations to TCP. However, these and other
changes beg the question of whether, and more importantly, how
they impacted the characteristics of TCP trafﬁc in today’s Internet,
or if the behavior has largely remained the same as found by earlier
in-depth studies of measured TCP trafﬁc, the latest of which date
to some 6-8 years ago [35, 10]. Given the continuing dominance
of TCP, and its central role in preventing congestion collapse in the
Internet, understanding its behavior is vital for the proper manage-
ment, provisioning and capacity planning of these networks and for
developing insights to guide protocol design.
In this paper we undertake a detailed exploration of TCP behav-
ior from multiple vantage points in a large tier-1 ISP. We use a
predominantly passive measurement approach using actual trafﬁc
76traces for our analysis for reasons of scale, coverage and diversity.
Compared to active probing, the passive approach is non-intrusive
and more scalable requiring no additional coordination, instrumen-
tation or deployment of end host measurement points. We can uti-
lize in-network passive trace collection capabilities that are parts of
existing deployed infrastructure. Our trace collection is carefully
designed to get a diversity of network trafﬁc mixes including back-
bone links, broadband access and enterprise trafﬁc. The passive
measurement approach allows us to capture the entire spectrum of
TCP activity, in the relative proportions it is actually used, with-
out any distortion or artiﬁcial biases, over the observation period.
Given the existence of many TCP variants, some with multiple ver-
sions, and multiple parameters, and the lack of understanding of
either the relative distribution of these settings or how they impact
behavior, it would be very hard for a purely active probing approach
to cover all these possibilities or to focus on the (unknown) inter-
esting ones.
Along with its advantages, an in-network passive measurement
approach has its own challenges. For instance, access to bidirec-
tional traces is required by traditional techniques for analyzing cer-
tain types of TCP behavior (e.g., tracking the congestion window).
However, due to the prevalence of asymmetric routing, such traces
are difﬁcult to obtain in practice, especially for backbone links. As
one contribution of this paper, we develop new analysis techniques
that are suitable for unidirectional ﬂows. Passive measurement also
lacks a powerful aspect of active probing – with the latter, it is pos-
sible to tailor the probing activity carefully to force the protocol
to reveal more details about its actions under different scenarios.
We therefore augment our passive measurements with targeted ac-
tive probes as needed. In particular, we utilize active probing for
validation, where we gather the RTT, loss rate, frequency charac-
teristics, etc. as ground truth by controlling the active probes.
1.1 Contributions
Using existing techniques where applicable and developing ap-
propriate new methodologies where required, we explore the fol-
lowing main dimensions.
Have TCP ﬂow sizes, durations and rates changed signiﬁ-
cantly compared to those 6-8 years ago? In particular, what are
the corresponding distributions of “heavy-hitter” ﬂows [31, 7] i.e.,
ﬂows with exceptionally large size, long duration, fast speed and
strong burstiness compared to the earlier studies? Heavy-hitters
contribute to signiﬁcant trafﬁc volumes and understanding their
behavior is vital to many aspects of network management such
as effective trafﬁc measurement [13], scalable load sensitive rout-
ing [31], network anomaly detection [22] and usage-based pricing
and accounting [12]. We compare our results with two previous
studies [35, 10] and pinpoint the evolution of Internet ﬂow charac-
teristics that we observe.
What is the initial congestion window (ICW) distribution?
A larger ICW allows a ﬂow to be more aggressive by sending a
larger burst of data at the beginning of the ﬂow without any throt-
tling. A large proportion of ﬂows today are short and end before
exiting TCP slow start. While such ﬂows can beneﬁt individually
from using an inappropriately large ICW size, the widespread use
of large ICWs will introduce large trafﬁc bursts and may adversely
affect the network performance and is therefore not desired. The
existing approach for ICW estimation [26] involves active probing,
and therefore, we develop a new passive measurement based ICW
estimation scheme that uses only the timestamp information for the
ﬁrst few packets in the connection of a unidirectional data ﬂow. We
ﬁnd that while most ﬂows comply with TCP speciﬁcations [6, 5],
up to 15.8% of senders in our data have initial congestion window
greater than
min(4 ∗ M SS, max(2 ∗ M SS, 4380)), the upper size mandated
by the speciﬁcations [5]. We also observed ICWs as large as 9KB
in our datasets.
When encountering losses, do senders slow down appropri-
ately as mandated by TCP? This is a fundamental requirement
for all TCP implementations and its adherence is critical to avoid
congestion collapse in the network. The existing approaches to
measuring this behavior either use active probing [26], or use bi-
directional ﬂows to precisely track the congestion window using a
FSM [17]. We develop a passive-measurement based statistical ap-
proach to identify situations where the sender does not slow down
its transmission rate when the retransmission rate increases. Our
approach requires only unidirectional ﬂows and is independent of
the particular variant of TCP, unlike the existing schemes. Our
ﬁndings indicate that in most cases, the sender does slow down
its sending rate when retransmission rate increases. Among ﬂows
with retransmission rates higher than 10%, we do ﬁnd 2.5% to 5%
of the ﬂows exhibit irregular retransmission behavior. Further in-
vestigations revealed that these cases could be attributed to by two
main causes (i) abnormal retransmission not conforming to RFC-
compliant TCP speciﬁcations (e.g., retransmitting packets that were
not lost); and (ii) under-utilization of the congestion window.
What is the distribution of the TCP ﬂow clock and what is its
origin? We deﬁne the TCP ﬂow clock to be the regular spacing that
may exist between ﬂights of packets. The traditional view has been
that the RTT dominates the origin of ﬂow clocks for most ﬂows, and
existing RTT estimation algorithms [33, 36] implicitly use RTT as
the ﬂow clock. However, if the ﬂow clock is not generated by the
transport layer, these algorithms will have poor accuracy. One rea-
son this can happen is when applications like streaming media per-
form their own rate control and packet pacing on top of TCP. We
develop a novel frequency domain analysis technique to identify
the ﬂow clock independent of its origin. Our analysis indicates that
less than 50% ﬂows have distinguishable ﬂow clocks, and reveals
that in practice RTT is not the main determinant of ﬂow clocks in
many cases. Among our ﬂows with a measurable ﬂow clock, up to
60% have clocks originated by non-RTT factors such as software
clocks of applications, periodical OS events (e.g., keyboard scan-
ning), and “retiming” effects [35] of a bottleneck link.
2. RELATED WORK
We describe two areas of related work to our study.
Characterization of Internet Flows: Researchers started to inves-
tigate characteristics of TCP connections more than 10 years ago,
by passively measuring trafﬁc patterns [32] or actively probing end-
to-end packet dynamics [29]. For more detailed characterization,
the T-RAT study [35] considers the distribution of ﬂow rates, and
further analyzes the origins of different rates such as congestion
limited and transport limited. A more recent study [10] examines
characteristics of “heavy-hitter” TCP ﬂows [12] in four dimensions,
namely size, duration, rate, and burstiness, along with their corre-
lations in detail. There has also been work investigating particular
application types of ﬂows such as streaming [11], VoIP [23] and
gaming [9] ﬂows. Compared to this, our study serves as a reex-
amination of observed TCP behavior, motivated by the signiﬁcant
changes experienced by the Internet as mentioned in §1. We com-
pare our results with two most recent previous studies [35, 10] to
pinpoint the evolution of Internet ﬂow characteristics that we ob-
serve.
Inferring TCP Behaviors: TCP is a complex protocol with vari-
ous implementation variants and tunable parameters. Researchers
have developed many techniques to infer TCP behaviors by actively
77probing hosts or passively analyzing packet traces. For active prob-
ing tools, TBIT [26] strategically drops incoming packets and sends
fabricated packets over raw socket to infer Web servers’ TCP be-
havior. TBIT also uses known techniques [14] to identify the TCP
ﬂavor (Tahoe, Reno and New Reno) based on sender’s response to
packet losses. A previous study [24] used TBIT to study the im-
pact of “middleboxes” (NATs, proxies, etc.) on TCP. Tools like
Nmap [2] and p0f [3] take another approach by using a signature
database to ﬁngerprint the OS version of the target host, therefore
indirectly inferring the corresponding TCP implementation.
A wide range of passive analysis techniques also exist. For ex-
ample, tcpanaly [27] infers TCP implementation from packet traces
based on observed differences among 8 TCP implementations.
tcpﬂows [17] keeps track of the sender’s congestion window based
on predeﬁned ﬁnite state machine of TCP Tahoe, Reno and New
Reno. Work by Lu and Li [21] statistically infers the correspon-
dency between the arrived ACK packet and the data packets sent
from packet traces using maximum-likelihood criterion. T-RAT [35]
also focuses on unidirectional packet traces, separating the trace
into ﬂights, then inferring the TCP state of each ﬂight (e.g., slow
start or congestion avoidance).
Compared to these previous studies, our work develops method-
ologies requiring minimum information from the trace which are
unidirectional traces containing only timestamp, sequence number,
acknowledgement number, packet size and TCP ﬂags. Further-
more, we address a new problem that has not been well explored,
i.e., accurately extracting ﬂow clocks originated from either RTT
or other factors.
3. DATA CHARACTERIZATION
We describe the data used in our study and perform basic char-
acterization of the data set.
3.1 Datasets Used
As summarized in Table 1, we use seven quite diverse datasets
named BU, BS1 to BS4, VPN and DSL in this study. BU (Back-
bone Unsampled) is a 30-minute unsampled TCP trace collected
from a 10Gbps backbone link of a Tier-1 ISP on June 17, 2008.
BS1 to BS4 (Backbone Sampled) are sampled TCP traces from the
same link collected on June 26, 2008. The duration of each dataset
is approximately 1 hour. Sampling was performed on a per-ﬂow
basis with a sampling rate of 50% (one in two ﬂows), so that all
packets from a sampled ﬂow were captured. The VPN dataset is
an unsampled bidirectional trace collected from all the uplinks of
a VPN provider edge router (PE) on January 5, 2009. The DSL
dataset, also bidirectional and unsampled, was collected from a
BRAS (Broadband Remote Access Servers; an aggregation point
for approximately 20,000 DSL lines) on January 9, 2009. For each
packet, we record the following ﬁelds of IP and TCP headers, plus a
64-bit timestamp: source and destination IP, source and destination
port number, packet length, IPID, IP fragment ﬂag/offset, sequence
number, acknowledgment number, receiver’s window size, TCP
payload length, TCP ﬂags, and TCP options. From each dataset,
we extract ﬂows based on a 5-tuple of src/dst IP, src/dst port num-
bers, and protocol (always TCP). Following previous studies [35,
10], we use a threshold of 60 seconds to decide that a ﬂow has
terminated.
We discuss two limitations of our datasets. First, similar to pre-
vious measurements using passive traces (datasets in [35] were
30min to 2hours, plus a 1-day sampled trace; two datasets in [10]
were 20min and 2hours), our ﬁnite sampling durations (30min to
2h46min) may inﬂuence the distribution of ﬂow characteristics.