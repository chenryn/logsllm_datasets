are often the causes of the delays in a process, can be easily observed and some
behaviors, e.g., the overtake of the activities, may be discovered. The visual-
ization emphasizes on the performance of and the interaction between process
steps. However, without the context of a case, some diagnosis may be limited.
For example, the influence of the performance of a process step to another one
which is not directly following the one may not be observed and compared at
the case level. The work is extended by incorporating a process model such that
the performance of a process step can be analyzed with the context and more
Stage-Based Process Performance Analysis 353
advancedprocessbehaviormaybepresentedwiththemodel[1].However,using
a model suffers from the modeling formalism mentioned. In [16], the authors
visualize the metrics such as the number of cases that arrive at each phase of
a process per day. The workload and the efficiency in a phase over a specific
time frame can then be observed. However, every event in an event log must be
assigned to a phase and the phases must occur in a specific order, i.e., no phase
could be skipped and no parallel phases is possible.
The existing event abstraction techniques may suffer from the biased results
due to the modeling formalism or the assumptions of a process which the tech-
niquesaredevelopedbasedon.Thecurrentperformanceanalysistechniquesare
either insufficient for analyzing the influence of bottlenecks in the context of
cases, one of the objectives of our research, or restricted to the assumed process
behavior. To conclude, simply combining the existing techniques is insufficient
to analyze the process performance at a coarser granularity level.
3 Stage-Based Performance Mining
An overview of the approach is presented in Fig.2. It is a two-fold approach,
which extracts stage instances, i.e., the execution of stage classes, and visual-
izes the performance metrics. The approach consists of four core components:
Mine for Stage Instances, Compute Stage Performance Metrics Visualize Stage
Performance Evolution and Visualize Stage Performance Summary. Based on
thestageclassesspecifiedbyauser,Mine for Stage Instances extractsthestage
instances. The performance metrics is computed and visualized with Visualize
Stage Performance Evolution and Visualize Stage Performance Summary. This
sectionformallydefinesthetermsmentionedandexplainsthecomponentsshown
in Fig.2 after briefly introducing the basic concept used in our approach.
Fig.2. Schematic overview of the proposed approach.
3.1 Preliminaries
Given an arbitrary set X, we write P(X)={X|X⊆X} to denote its pow-
erset. A sequence of length n over X is a function σ: {1,2,...n}→X. Let X∗
denote the set of all sequences over X. We write σ=x ,x ,...,x ∈X∗, where
1 2 n
354 C.-Y. Li et al.
σ(1)=x ,σ(2)=x ,...,σ(n)=x . Given a sequence σ∈X∗, |σ|denotes the length
1 2 n
of the sequence. The empty sequence is written as , i.e., ||=0. We overload
the set notation and write x∈σ if and only if ∃1≤i≤|σ| σ(i)=x .
In a process, an execution of an activity is recorded as an event with the
timestampoftheexecutioninthecontextofaprocessinstance,i.e.,acase.The
eventsofaprocessarecollectedinanevent log,theinputforanyprocessmining
technique. In practice, many additional data attributes can be associated with
an event. For example, event data typically captures the resource executing the
activity, the cost of such an activity, etc. In this paper, we represent an event
by a pair e=(a,t) executed in the context of a case represented by a trace. The
definitions of an event, trace, and event logs are as follows.
Definition 1 (Event, Trace & Event Log). Let A denote the universe of
process activities and T denote the universe of time. An event e=(a,t)∈A×T
represents the execution of activity a at time t. We let E=A×T denote the
universe of events. Given e=(a,t)∈E, we let π (e)=a and π (e)=t. A trace σ
act ts
is a sequence of events, i.e., σ∈E∗, such that ∀1≤i0 S 2 starts after S 1 terminates permanently
fl (S1,S2)(σ)>0 S 2 terminates permanently before S 1 starts
lf (S1,S2)(σ)0 S 2 may be executed in parallel with S 1
3.4 Visualize Stage Performance Metrics
We introduce two visualizations, stage performance evolution and stage perfor-
mance summary. The first one demonstrates the evolution of performance over
stages executed, allowing for further diagnosis. The latter one summarizes the
statistics of the performance of all the stage classes defined. This section intro-
duces the visualizations and demonstrates how the analysis can be performed
with the visualizations using an event log L and four stage classes S={Apply,
Claim, Travel, Declare}.
Fig.5. Stage performance evolution. Fig.6. Stage performance summary.
Stage Performance Evolution. It may occur that some cases execute some
stageswhileothersdonot.Weconsiderthattheexecutionofstageclassesreflects
thebusinesscontext.Itisnotreasonabletocomparetheperformanceofthecases
withoutidentifyingdifferentscenarios.Thus,wevisualizetheperformancebased
on different types of cases according to the stage classes executed.
358 C.-Y. Li et al.
For each combination of stage classes executed, we visualize the stage per-
formance metrics for the cases executing all the stage classes in the combi-
nation using parallel coordinates as shown in Fig.5 [7]. The leftmost coor-
dinate is the organization handling the cases and the rightmost one is the
total case throughput time classified into Very Slow, Slow, Fast, and Very
Fast. Between the two coordinates, the performance metrics of each trace
σ∈{σ|∀σ∈L∀S∈S,γ (S)=∅}isplottedwithahorizontalfoldedlineintheorder
σ
of ctsum (σ), lf (σ), ctsum (σ), lf (σ), ctsum (σ),
Apply (Apply,Claim) Claim (Claim,Travel) Travel
lf (σ), ctsum (σ) in the figure. The visualization can be applied
(Travel,Declare) Declare
interactively as below:
– The order of the coordinates can be flexibly arranged and the metrics of
every stage class or between two stage classes can be changed to the flow
time or other metrics, which allows for exploring the behavior of the stage
performance from different angles.
– Depending on the use cases, the leftmost and rightmost coordinates may be
replaced with any case attributes for analyzing the relationships between the
attributes, e.g., the financial costs of handling a case, and the stage perfor-
mance evolution.
– The scale of the coordinates for the performance metrics can be set the same
(absolute) for identifying the bottlenecks, or the maximum value for each
metrics (relative) such that the cause of the bottlenecks may be diagnosed.
Figure5 shows the visualizations using relative performance with the analy-
sis. Suppose one assumes that the stages are executed one after another, i.e., no
parallelism of stages. In Fig.5, the bottleneck and the most severe deviation are
identified based on the stage performance distribution of the cases.
Stage Performance Summary. To have an overview of the performance of
all the stage classes defined, we summarize the performance for all the cases in
L.AsshowninFig.6,thesummaryispresentedwiththestatisticsofFTstat(L)
S
and CTstat(L) for every stage class S∈S.
S
4 Evaluation
Withtheaimofsupportinganalyststoidentifythebottlenecksandperformthe
diagnosis of a complex process, we conduct a comparative evaluation based on
two criteria: the ease of use of a method and the reliability of the metrics. A
method that requires much preparation, manipulation of an event log, or the
domain knowledge hampers an analyst to perform an effective analysis. The
metricsthatcontainsonlyafewmeasurementsmaycausemisleadingconclusion