When compiling the following code:
    use std::cell::{RefCell, RefMut};
    trait FooTrait {
        fn footrait(&mut self);
    }
    struct Foo;
    impl FooTrait for Foo {
        fn footrait(&mut self) { () }
    }
    impl FooTrait for RefMut {
        fn footrait(&mut self) { () }
    }
    struct Bar {
        bar: RefCell,
    }
    impl Bar {
        fn foobox(&self) -> Box {
            let inner = self.bar.borrow_mut();
            Box::new(inner)
        }
    }
I get the following (confusing) error message:
    :21:30: 21:42 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements
    :21         let inner = self.bar.borrow_mut();
                                           ^~~~~~~~~~~~
    :21:21: 21:29 note: first, the lifetime cannot outlive the expression at 21:20...
    :21         let inner = self.bar.borrow_mut();
                                  ^~~~~~~~
    :21:21: 21:29 note: ...so that auto-reference is valid at the time of borrow
    :21         let inner = self.bar.borrow_mut();
                                  ^~~~~~~~
    :21:21: 21:42 note: but, the lifetime must be valid for the method call at 21:20...
    :21         let inner = self.bar.borrow_mut();
                                  ^~~~~~~~~~~~~~~~~~~~~
    :21:21: 21:29 note: ...so that method receiver is valid for the method call
    :21         let inner = self.bar.borrow_mut();
                                  ^~~~~~~~
After a lot of trial-and-error I noticed I had to do the following change:
    // old:
         fn foobox(&self) -> Box {
    // new:
         fn foobox(&'a self) -> Box {