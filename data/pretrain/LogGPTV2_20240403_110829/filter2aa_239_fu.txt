一些预定义的命令，例如ApplicationCommands.Cut、Copy和Paste也赋予RibbonButton
元素的Command属性，对于预定义的命令，使用简写表示法：
34.6.3 命令绑定
必须添加命令绑定，才能把它们连接到处理程序方法上。这里在Window元素中定义
命令绑定，这样这些绑定就可用于窗口中的所有元素。执行ApplicationCommands.Close命
令时，会调用OnClose（）方法。执行BooksCommands.ShowBooks命令时，会调用
OnShowBooks（）方法（代码文件BooksDemoRibbon/MainWindow.xaml）：
通过命令绑定，还可以指定CanExecute属性，在该属性中，会调用一个方法来验证命
令是否可用。例如，如果文件没有变化，ApplicationCommands.Save命令就是不可用的。
需要用两个参数定义处理程序，它们分别是sender的object和可以从中访问命令信息
的ExecutedRoutedEventArgs（代码文件BooksDemoRibbon/MainWindow.xaml.cs）：
    private void OnClose(object sender, ExecutedRoutedEventArgs e)
    {
      Application.Current.Shutdown();
    }
  注意： 还可以通过命令传递参数。为此，可以通过命令源（如MenuItem）指
定CommandParameter属性。使用ExecutedRoutedEventArgs的Parameter属性可以访问该
参数。
命令绑定也可以通过控件来定义。TextBox控件给ApplicationCommands.Cut、
Application-Commands.Copy、ApplicationCommands.Paste和ApplicationCommands.Undo定
义了绑定。这样，就只需要指定命令源，并使用TextBox控件中的已有功能。
34.7 数据绑定
与以前的技术相比，WPF数据绑定向前迈了一大步。数据绑定把数据从.NET对象传
递给UI，或从UI传递给.NET对象。简单对象可以绑定到UI元素、对象列表和XAML元素
上。在WPF数据绑定中，目标可以是WPF元素的任意依赖属性，CLR对象的每个属性都
可以是绑定源。因为WPF元素作为.NET类实现，所以每个WPF元素也可以用作绑定源。
图34-15显示了绑定源和绑定目标之间的连接。Binding对象定义了该连接。
图34-15
Binding对象支持源与目标之间的几种绑定模式。绑定可以是单向的，即从源信息指
向目标，但如果用户在用户界面上修改了该信息，则源不会更新。要更新源，需要双向绑
定。
表34-7列出了绑定模式及其要求。
表34-7
绑定模式
说明
一次性
绑定从源指向目标，且仅在应用程序启动时，或数据环境改
变时绑定一次。通过这种模式可以获得数据的快照
单向
绑定从源指向目标。这对于只读数据很有用，因为它不能从
用户界面中修改数据。要更新用户界面，源必须实现
INotifyPropertyChanged接口
双向
在双向绑定中，用户可以从UI中修改数据。绑定是双向的
——从源指向目标，从目标指向源。源对象需要实现读写属
性，才能把改动的内容从UI更新到源对象上
指向源的单向
采用这种绑定模式，如果目标属性改变，源对象也会更新
除了绑定模式之外，WPF数据绑定还涉及许多方面。本节详细介绍与XAML元素、简
单的.NET对象和列表的绑定。通过更改通知，可以使用绑定对象中的更改更新UI。本节
还会讨论从对象数据提供程序中获取数据和直接从代码中获取数据。多绑定和优先绑定说
明了与默认绑定不同的绑定可能性，本节也将论述如何动态地选择数据模板，以及绑定值
的验证。
下面从BooksDemoRibbon示例应用程序开始。
34.7.1 BooksDemo应用程序内容
上一节在BooksDemoLib和BooksDemoRibbon项目中定义了一个功能区和命令，现在
添加内容。修改XAML文件MainWindow.xaml，并添加ListBox、Hyperlink和
TabControl（代码文件BooksDemoRibbon/MainWindow.xaml）。
      Show Book
现在添加一个WPF用户控件BookUC。这个用户控件包含一个DockPanel、一个几行几
列的Grid、一个Label和多个TextBox控件（代码文件BooksDemoRibbon//
Controls/BookUC.xaml）：
在MainWindow.xaml.cs的OnShowBook处理程序中，新建BookUC用户控件的一个实
例，给TabControl添加一个新的TabItem。接着修改TabControl的SelectedIndex属性，以打
开新的选项卡（代码文件BooksDemoLib/MainWindow.xaml.cs）：
    private void OnShowBook(object sender, ExecutedRoutedEventArgs e)
    {
      var bookUI = new BookUC();
      this.tabControl1.SelectedIndex = this.tabControl1.Items.Add(
        new TabItem { Header = "Book", Content = bookUI });
    }
构建项目后，就可以启动应用程序，单击超链接，打开TabControl中的用户控件。
34.7.2 用XAML绑定
WPF元素不仅是数据绑定的目标，它还可以是绑定的源。可以把一个WPF元素的源
属性绑定到另一个WPF元素的目标属性上。
在下面的代码示例中，使用数据绑定通过一个滑块重置用户控件中控件的大小。给用
户控件BookUC添加一个StackPanel控件，该StackPanel控件包含一个标签和一个Slider控
件。Slider控件定义了Minimum和Maximum值，以指定缩放比例，把其初始值1赋予Value
属性（代码文件BooksDemoLib/BookUC.xaml）：
设置Grid控件的LayoutTransform属性，并添加一个ScaleTransform元素。通过
ScaleTransform元素，对ScaleX和ScaleY属性进行数据绑定。这两个属性都用Binding标记
扩展来设置。在Binding标记扩展中，把ElementName设置为slider1，以引用前面创建的
Slider控件。把Path属性设置为Value，从Value属性中获取滑块的值。
运行应用程序时，可以移动滑块，从而重置Grid中的控件，如图34-16和图34-17所
示。
图34-16
图34-17
除了用XAML代码定义绑定信息之外，如上述代码使用Binding元数据扩展来定义，
还可以使用代码隐藏。在代码隐藏中，必须新建一个Binding对象，并设置Path和Source属
性。必须把Source属性设置为源对象，这里是WPF对象slider1。把Path属性设置为一个
PropertyPath实例，它用源对象的Value属性名进行初始化。对于派生自FrameworkElement
的控件，可以调用SetBinding（）方法来定义绑定。但是，ScaleTransform不派生自
FrameworkElement，而派生自Freezable基类。使用辅助类BindingOperations可以绑定这类
控件。BindingOperations类的SetBinding（）方法需要一个DependencyObject，在本例中是
ScaleTransform实例。对于第二和第三个参数，SetBinding（）方法还需要绑定目标的
dependency属性和Binding对象。
    var binding = new Binding
    {
      Path = new PropertyPath("Value"),
      Source = slider1
    };
    BindingOperations.SetBinding(scale1, ScaleTransform.ScaleXProperty, binding);
    BindingOperations.SetBinding(scale1, ScaleTransform.ScaleYProperty, binding);
  注意： 派生自DependencyObject的所有类都可以有依赖属性。依赖属性参见
第29章。
使用Binding类，可以配置许多绑定选项，如表34-8所示。
表34-8
Binding类成员
说明
Source
使用Source属性，可以定义数据绑定的源对象
RelativeSource
使用RelativeSource属性，可以指定与目标对象相关的源对
象。当错误来源于同一个控件时，它对于显示错误消息很有
用
ElementName
如果源对象是一个WPF元素，就可以用ElementName属性指
定源对象
Path
使用Path属性，可以指定到源对象的路径。它可以是源对象
的属性，但也支持子元素的索引器和属性
XPath
使用XML数据源时，可以定义一个XPath查询表达式，来获
得要绑定的数据
Mode
模式定义了绑定的方向。Mode属性是BindingMode类型。
BindingMode是一个枚举，其值如下：Default、OneTime、
OneWay、TwoWay和OneWayToSource。默认模式依赖于目
标：对于文本框，默认是双向绑定；对于只读的标签，默认
为单向。OneTime表示数据仅从源中加载一次；OneWay将
对源对象的修改更新到目标对象中。TwoWay绑定表示，对
WPF元素的修改可以写回源对象中。OneWayToSource表
示，从不读取数据，但总是从目标对象写入源对象中
Converter
使用Converter属性，可以指定一个转换器类，该转换器类来
回转换UI的数据。转换器类必须实现IValueConverter接口，
它定义了Convert（）和ConvertBack（）方法。使用
ConverterParameter属性可以给转换方法传递参数。转换器
区分区域性，区域性可以用ConverterCultrue属性设置
FallbackValue
使用FallbackValue属性，可以定义一个在绑定没有返回值时
使用的默认值
ValidationRules
使用ValidationRules属性，可以定义一个ValidationRule对象
集合，在从WPF目标元素更新源对象之前检查该集合。
ExceptionValidationRule类派生自ValidationRule类，负责检
查异常
Delay
这个属性是WPF 4.5新增的，它可以指定更新绑定源之前等
待的时间。在开始验证之前，希望给用户一些时间来输入更
多的字符时，就可以使用这个属性
34.7.3 简单对象的绑定
要绑定CLR对象，只需要使用.NET类定义属性，如下面的例子就使用Book类定义了
Title、Publisher、Isbn和Authors属性。这个类在BooksDemoLib项目的Models文件夹中（代
码文件BooksDemoLib/Models/Book.cs）。
      using System.Collections.Generic;
      namespace BooksDemo.Models
      {
        public class Book
        {
          public Book(string title, string publisher, string isbn,
                    params string[] authors)
          {
          Title = title;
          Publisher = publisher;
          Isbn = isbn;
          Authors = authors;
          }
          public Book()
          : this("unknown", "unknown", "unknown")
          {
          }
          public string Title { get; set; }
          public string Publisher { get; set; }
          public string Isbn { get; set; }
          public string[] Authors { get; }
          public override string ToString() => Title;
        }
      }
在用户控件BookUC的XAML代码中，定义了几个标签和TextBox控件，以显示图书信
息。使用Binding标记扩展，将TextBox控件绑定到Book类的属性上。在Binding标记扩展
中，仅定义了Path属性，将它绑定到Book类的属性上。不需要定义源对象，因为通过指定
DataContext来定义源对象，如下面的代码隐藏所示。对于TextBox元素，模式定义为其默
认值，即双向绑定（代码文件BooksDemoLib/Controls/BookUC.xaml）：
在代码隐藏中定义一个新的Book对象，并将其赋予用户控件的DataContext属性。
DataContext是一个依赖属性，它用基类FrameworkElement定义。指定用户控件的
DataContext属性表示，用户控件中的每个元素都默认绑定到同一个数据上下文上（代码
文件BooksDemoRibbon/MainWindow. xaml.cs）。
    private void OnShowBook(object sender, ExecutedRoutedEventArgs e)
    {
      var bookUI = new BookUC();
      bookUI.DataContext = new Book
      {
        Title = "Professional C# 5.0 and .NET 4.5.1"
        Publisher = "Wrox Press",
        Isbn = "978-0-470-50225-9"
      };
      this.tabControl1.SelectedIndex =
        this.tabControl1.Items.Add(
        new TabItem { Header = "Book", Content = bookUI });
    }
启动应用程序后，就会看到图34-18所示的绑定数据。
图34-18
为了实现双向绑定（对输入的WPF元素的修改反映到CLR对象中），实现了用户控件
中按钮的Click事件处理程序——OnShowBook（）方法。在实现时，会弹出一个消息框，
显示book1对象的当前标题和ISBN号。图34-19显示了在运行应用程序时用户输入
Professional C# 6后消息框的输出（代码文件BooksDemoLib/Controls/BookUC.xaml.cs）。
图34-19
    private void OnShowBook(object sender, RoutedEve
ntArgs e)
    {