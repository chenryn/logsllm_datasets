• 此外，从用户的shell来执行”im-config”。
• 如果命令从root账户或非root账号执行，im-config(8)表现会有所不同。
• im-config(8)让最佳的输入法作为系统默认而不需要用户干预。
8.3 显示输出
Linux控制台只能显示有限的字符。（你需要使用特殊的终端程序，例如jfbterm(1)，从而在非GUI控制台中显示非
欧洲语言。）
只要需要的字体安装并被启用，GUI（图形用户界面）环境（第 7 章）能够显示任意UTF-8字符。（原始字体数据的
编码会被处理，并对用户来说是透明的。）
Debian参考手册 133/233
8.4 东亚环境下宽度有歧义的字符
在东亚语言环境下，方框绘制、希腊字符和西里尔字符可能会显示得比你预期的样子更宽，这样会导致终端输出排列
不再整齐（参见Unicode标准附录#11）。
您可以绕过这个问题：
• gnome-terminal：首选项→配置文件→配置名→兼容性→宽度有歧义的字符→窄
• ncurses：设置环境变量export NCURSES_NO_UTF8_ACS=0。
Debian参考手册 134/233
Chapter 9
系统技巧
这里，描述配置和管理系统的基本技巧，大部分在控制台操作。
9.1 控制台技巧
有一些工具程序来帮助你的控制台活动。
软件包 流行度 大小 说明
mc V:50,I:213 1542 参见第 1.3 节
bsdutils V:513,I:999 356 script(1)命令来记录终端会话
screen V:74,I:235 1003 VT100/ANSI终端模拟器混合复用的终端
tmux V:42,I:145 1114 终端复用的备选方案（使用“Control-B”代替）
fzf V:4,I:15 3648 模糊的文本查找器
fzy V:0,I:0 54 模糊的文本查找器
rlwrap V:1,I:15 330 具备readline特征的命令行封装
ledit V:0,I:11 331 具备readline特征的命令行封装
rlfe V:0,I:0 45 具备readline特征的命令行封装
ripgrep V:4,I:18 5129 在源代码树中快速递归搜索字符串，并自动过滤
Table9.1: 支持控制台活动的程序列表
9.1.1 清晰的记录 shell 活动
简单地使用script(1)（参见第 1.4.9 节）记录shell活动会产生一个有控制字符的文件。这些控制字符可以按下面
的方式，使用col(1)去掉。
$ script
Script started, file is typescript
做些操作……按Ctrl-D退出script.
$ col -bx  cleanedfile
$ vim cleanedfile
有替代的方式来记录shell活动：
• 使用tee(在initramfs的启动过程中可用)：
Debian参考手册 135/233
$ sh -i 2>&1 | tee typescript
• 使用gnome-terminal增加行缓冲，用滚动条查看。
• 使用screen和”^A H”(参见第 9.1.2 节)来进行控制台记录。
• 使用vim输入”:terminal”进入终端模式。使用”Ctrl-W N”从终端模式退出到普通模式。使用”:w typescript”
将缓存写到一个文件。
• 使用emacs和”M-x shell”,”M-x eshell”,或”M-x term”来进入记录控制台。使用”C-x C-w”将缓存写到文
件。
9.1.2 screen 程序
screen(1)不但允许一个终端窗口运行多个进程，还允许远程shell进程支持中断的连接.这里是一个典型的screen(1)
使用场景.
1. 登录到一个远程机器。
2. 在单个控制台上启动screen。
3. 使用^A c(”Control-A”接着”c”)在screen中创建的窗口执行多个程序.
4. 按^A n(”Control-A”接着”n”)来在多个screen窗口间转换.
5. 突然，你需要离开你的终端，但你不想丢掉正在做的工作，而这些工作需要连接来保持。
6. 你可以通过任何方式分离screen会话。
• 残忍地拔掉你的网络连接
• 输入^A d(”Control-A”接着”d”)并手工从远程连接退出登录
• 输入^A DD(”Control-A”接着”DD”)分离screen并退出登录
7. 你重新登录到同一个远处主机（即使从不同的终端）。
8. 使用”screen -r”启动screen.
9. screen魔术般的重新附上先前所有的screen窗口和所有在活动运行的程序.
提示
对于拨号或者按包计费的网络连接，你可以通过screen节省连接费用，应为你可以在断开连接时让一个进程继续
运行，当你稍后再次连接时重新附上它。
在 screen 会话里, 除了命令按键外的所有键盘输入都会被发送到当前窗口。screen 所有命令按键是通过 ^A
(”Control-A”)加单个键[加任何参数]来输入.这里有一些重要的命令按键需要记住。
细节参见screen(1).
参见tmux(1)，了解替代命令的功能。
Debian参考手册 136/233
键绑定功能 说明
^A ? 显示帮助屏幕（显示键绑定）
^A c 创建一个新的窗口并切换到该窗口
^A n 到下一个窗口
^A p 到前一个窗口
^A 0 到0号窗口
^A 1 到1号窗口
^A w 显示窗口列表
^A a 作为键盘输入发送Ctrl-A到当前窗口
^A h 把当前窗口的硬拷贝写到一个文件
^A H 开始/结束当前窗口到文件的记录
^A ^X 锁定终端(密码保护)
^A d 从终端分离screen会话
^A DD 分离screen会话并退出登录
Table9.2: screen键绑定列表
9.1.3 在目录间游走
在第 1.4.2 节，2个技巧允许快速在目录间游走，在$CDPATH和mc描述。
如果你使用模糊文本过滤程序，你能够不输入精准路径。对于 fzf软件包，在~/.bashrc里面包括下列内容。
FZF_KEYBINDINGS_PATH=/usr/share/doc/fzf/examples/key-bindings.bash
if [ -f $FZF_KEYBINDINGS_PATH ]; then
. $FZF_KEYBINDINGS_PATH
fi
FZF_COMPLETION_PATH=/usr/share/doc/fzf/examples/completion.bash
if [ -f $FZF_COMPLETION_PATH ]; then
. $FZF_COMPLETION_PATH
fi
例如：
• 你能够最小化的操作跳入非常深的子目录。你首先输入”cd **”后按Tab。然后你将被提示候选路径。输入部分路
径字符串，比如s/d/b foo，将会缩窄候选路径。通过有光标和回车键的cd，你选择将要使用的路径。
• 你可以用最小化的操作，从命令历史里面选择一个命令。在命令行提示符下按Ctrl-R。然后你将被提示候选的命
令。输入部分命令字符串，比如vim d，将会缩窄候选项。使用光标和回车键选择将要使用的命令。
9.1.4 Readline 封装
一些命令，比如/usr/bin/dash，它缺少命令行历史编辑能力，但在rlwrap或它的等价物下运行就能够透明的增
加这样的功能。
$ rlwrap dash -i
这提供一个便利平台来测试dash的细微之处，使用类似bash的友好环境。
9.1.5 扫描源代码树
在ripgrep软件包中的rg(1)命令，在扫描源代码树的典型场景中，提供了一个比grep(1)命令更快速的替代。它
充分利用了现代多核CPU，并自动使用适当的过滤器来忽略一些文件。
Debian参考手册 137/233
9.2 定制 vim
在你通过第 1.4.8 节学习基本的 vim(1)后,请阅读BramMoolenaar的”Sevenhabitsofeffectivetextediting(2000)”来理
解vim应当怎样被使用。
小心
没有非常好的理由，请不要尝试改变默认的键绑定。
9.2.1 用内部特性定制 vim
vim的行为能够被显著的改变，通过Ex-模式的命令，启用它的内部特性，比如”set ...”来设置vim选项。
这些Ex-模式的命令，能够在用户的vimrc文件里面包括，传统的”~/.vimrc”或git友好的”~/.vim/vimrc”。这里
有一个非常简单的例。1：
colorscheme murphy ” from /usr/share/vim/vim??/colors/*.vim
filetype plugin indent on ” filetype aware behavior
syntax enable ” Syntax highlight
”set spelllang=en_us ” Spell check language as en_us
”set spell ” Enable spell check
set autoindent ” Copy indent from current line
set smartindent ” More than autoindent (Drop/Pop after {/})
set nosmarttab ” -key always inserts blanks
set backspace=indent,eol,start ” Back space through everything
set laststatus=2 ” Always show status line
set statusline=%p
set pastetoggle=p
” IDE-like UI for files and buffers with w
nnoremap w :WMToggle
” Use safer keys  for moving to another window
nnoremap  h
nnoremap  j
nnoremap  k
nnoremap  l
为了使上面的按键绑定正确地运行，终端程序需要配置：Backspace-键产生”ASCIIDEL”、Delete-键产生”Escape
sequence”。
新的原生 Vim 软件包系统同”git” 和”git submodule” 顺利的工作。一个这样的配置例子能够在 我的 git 仓库:
dot-vim找到。本质上是这样做的：
• 通过使用”git”和”git submodule”，最新的扩展软件包，比如说”name”，会被放到~/.vim/pack/*/opt/name
和类似的地方。
1更多精心制作的定制例子：”VimGalore”,”sensible.vim”,”#vimRecommendations”...
Debian参考手册 138/233
• 通过增加:packadd! name行到用户的vimrc文件，这些软件包被放到runtimepath。
• Vim在它的初始化时加载这些软件包到runtimepath。
• 在它初始化的最后，安装文档的标签被更新，使用”helptags ALL”。
更多信息，请使用”vim --startuptime vimstart.log”启动vim来检查实际的执行顺序和每一个步骤消耗的
时间。
下面能够发现有趣的外部插件软件包：
• Vim-无所不在的文本编辑器 --Vim和vim脚本的官方上游站点
• VimAwsome --Vim插件列表
• vim-scripts--Debian软件包：一个vim脚本的收集
是相当迷惑的看到这么多的方式2来管理和加载这些外部的软件包到vim。检查原始的信息是最好的方法。
按键 信息
:help package 解释vim软件包机制
:help runtimepath 解释runtimepath机制
:version 内部状态，包括vimrc文件的候选
:echo $VIM 环境变量”$VIM”用来定位vimrc文件的路径