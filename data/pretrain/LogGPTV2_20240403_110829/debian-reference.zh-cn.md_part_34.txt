### 8.3 显示输出

Linux 控制台仅能显示有限的字符集。若要在非图形用户界面（GUI）控制台中显示非欧洲语言，需要使用特殊的终端程序，如 `jfbterm(1)`。

在 GUI 环境下（参见第 7 章），只要所需字体已安装并启用，系统就能够显示任意 UTF-8 字符。原始字体数据的编码处理对用户来说是透明的。

### 8.4 东亚环境下宽度有歧义的字符

在东亚语言环境中，方框绘制、希腊字符和西里尔字符可能会比预期显示得更宽，导致终端输出排列不整齐（参见 Unicode 标准附录 #11）。

可以采用以下方法解决该问题：
- **gnome-terminal**：首选项 → 配置文件 → 配置名 → 兼容性 → 宽度有歧义的字符 → 窄
- **ncurses**：设置环境变量 `export NCURSES_NO_UTF8_ACS=0`

### 第九章 系统技巧

本章描述了配置和管理系统的基本技巧，主要针对控制台操作。

#### 9.1 控制台技巧

以下是一些有助于控制台活动的工具程序：

| 软件包 | 流行度 | 大小 | 说明 |
|--------|--------|------|------|
| mc     | V:50, I:213 | 1542 | 参见第 1.3 节 |
| bsdutils | V:513, I:999 | 356 | `script(1)` 命令用于记录终端会话 |
| screen | V:74, I:235 | 1003 | VT100/ANSI 终端模拟器混合复用的终端 |
| tmux   | V:42, I:145 | 1114 | 终端复用的备选方案（使用 `Control-B` 代替） |
| fzf    | V:4, I:15 | 3648 | 模糊文本查找器 |
| fzy    | V:0, I:0 | 54 | 模糊文本查找器 |
| rlwrap | V:1, I:15 | 330 | 具备 readline 特性的命令行封装 |
| ledit  | V:0, I:11 | 331 | 具备 readline 特性的命令行封装 |
| rlfe   | V:0, I:0 | 45 | 具备 readline 特性的命令行封装 |
| ripgrep | V:4, I:18 | 5129 | 在源代码树中快速递归搜索字符串，并自动过滤 |

##### 9.1.1 清晰地记录 shell 活动

使用 `script(1)`（参见第 1.4.9 节）记录 shell 活动会产生包含控制字符的文件。可以通过以下方式使用 `col(1)` 去除这些控制字符：

```sh
$ script
Script started, file is typescript
执行一些操作...按 Ctrl-D 退出 script.
$ col -bx < typescript > cleanedfile
$ vim cleanedfile
```

其他记录 shell 活动的方法包括：
- 使用 `tee`（在 initramfs 的启动过程中可用）：
  ```sh
  $ sh -i 2>&1 | tee typescript
  ```
- 使用 `gnome-terminal` 并增加行缓冲，通过滚动条查看。
- 使用 `screen` 和 `^A H`（参见第 9.1.2 节）进行控制台记录。
- 使用 `vim` 输入 `:terminal` 进入终端模式。使用 `Ctrl-W N` 从终端模式退出到普通模式。使用 `:w typescript` 将缓存写入文件。
- 使用 `emacs` 和 `M-x shell`、`M-x eshell` 或 `M-x term` 进入记录控制台。使用 `C-x C-w` 将缓存写入文件。

##### 9.1.2 screen 程序

`screen(1)` 不仅允许在一个终端窗口中运行多个进程，还支持远程 shell 进程在连接中断后继续运行。以下是典型的 `screen` 使用场景：

1. 登录到远程机器。
2. 在单个控制台上启动 `screen`。
3. 使用 `^A c`（`Control-A` 接着 `c`）在 `screen` 中创建新的窗口并执行多个程序。
4. 使用 `^A n`（`Control-A` 接着 `n`）在多个 `screen` 窗口间切换。
5. 如果需要离开终端但不想丢失正在进行的工作，可以通过以下方式分离 `screen` 会话：
   - 残忍地拔掉网络连接
   - 输入 `^A d`（`Control-A` 接着 `d`）并手动从远程连接退出登录
   - 输入 `^A DD`（`Control-A` 接着 `DD`）分离 `screen` 并退出登录
6. 重新登录到同一远程主机（即使是从不同的终端）。
7. 使用 `screen -r` 启动 `screen`。
8. `screen` 会重新附上先前的所有窗口和正在运行的程序。

提示：对于拨号或按流量计费的网络连接，`screen` 可以帮助节省连接费用，因为它可以在断开连接时让进程继续运行，稍后再重新连接。

在 `screen` 会话中，除了命令键外的所有键盘输入都会被发送到当前窗口。`screen` 的所有命令键是通过 `^A`（`Control-A`）加单个键（可带参数）来输入。以下是一些重要的命令键：

| 键绑定功能 | 说明 |
|------------|------|
| `^A ?`     | 显示帮助屏幕（显示键绑定） |
| `^A c`     | 创建一个新的窗口并切换到该窗口 |
| `^A n`     | 切换到下一个窗口 |
| `^A p`     | 切换到前一个窗口 |
| `^A 0`     | 切换到 0 号窗口 |
| `^A 1`     | 切换到 1 号窗口 |
| `^A w`     | 显示窗口列表 |
| `^A a`     | 作为键盘输入发送 `Ctrl-A` 到当前窗口 |
| `^A h`     | 将当前窗口的硬拷贝写入文件 |
| `^A H`     | 开始/结束将当前窗口记录到文件 |
| `^A ^X`    | 锁定终端（密码保护） |
| `^A d`     | 从终端分离 `screen` 会话 |
| `^A DD`    | 分离 `screen` 会话并退出登录 |

更多详细信息，请参阅 `screen(1)` 和 `tmux(1)`。

##### 9.1.3 在目录间游走

在第 1.4.2 节中，介绍了两种快速在目录间游走的技巧：`$CDPATH` 和 `mc`。

如果你使用模糊文本过滤程序（如 `fzf`），你可以不用输入完整的路径。对于 `fzf` 软件包，在 `~/.bashrc` 中加入以下内容：

```sh
FZF_KEYBINDINGS_PATH=/usr/share/doc/fzf/examples/key-bindings.bash
if [ -f "$FZF_KEYBINDINGS_PATH" ]; then
  . "$FZF_KEYBINDINGS_PATH"
fi

FZF_COMPLETION_PATH=/usr/share/doc/fzf/examples/completion.bash
if [ -f "$FZF_COMPLETION_PATH" ]; then
  . "$FZF_COMPLETION_PATH"
fi
```

例如：
- 你可以最小化操作跳转到非常深的子目录。首先输入 `cd **` 并按 Tab 键。然后你会看到候选路径。输入部分路径字符串（如 `s/d/b foo`）将会缩小候选范围。使用光标和回车键选择要使用的路径。
- 你可以用最小化操作从命令历史中选择一个命令。在命令行提示符下按 `Ctrl-R`。然后你会看到候选命令。输入部分命令字符串（如 `vim d`）将会缩小候选项。使用光标和回车键选择要使用的命令。

##### 9.1.4 Readline 封装

某些命令（如 `/usr/bin/dash`）缺少命令行历史编辑能力，但在 `rlwrap` 或其等效工具下运行时可以透明地添加这种功能。

```sh
$ rlwrap dash -i
```

这提供了一个便利的平台来测试 `dash` 的细节，同时使用类似 `bash` 的友好环境。

##### 9.1.5 扫描源代码树

`ripgrep` 软件包中的 `rg(1)` 命令在扫描源代码树的典型场景中提供了比 `grep(1)` 更快的替代方案。它充分利用了现代多核 CPU，并自动使用适当的过滤器忽略一些文件。

### 9.2 定制 Vim

在学习了基本的 `vim(1)`（参见第 1.4.8 节）后，请阅读 Bram Moolenaar 的 "Seven Habits of Effective Text Editing (2000)" 以了解如何正确使用 Vim。

注意：如果没有非常好的理由，请不要尝试更改默认的键绑定。

##### 9.2.1 用内部特性定制 Vim

Vim 的行为可以通过 Ex 模式的命令显著改变，例如使用 `set ...` 设置 Vim 选项。这些 Ex 模式的命令可以在用户的 `vimrc` 文件（通常是 `~/.vimrc` 或 Git 友好的 `~/.vim/vimrc`）中包含。以下是一个简单的例子：

```vim
colorscheme murphy " from /usr/share/vim/vim??/colors/*.vim
filetype plugin indent on " filetype aware behavior
syntax enable " Syntax highlighting
"set spelllang=en_us " Spell check language as en_us
"set spell " Enable spell check
set autoindent " Copy indent from current line
set smartindent " More than autoindent (Drop/Pop after {/})
set nosmarttab " -key always inserts blanks
set backspace=indent,eol,start " Back space through everything
set laststatus=2 " Always show status line
set statusline=%p
set pastetoggle=p
" IDE-like UI for files and buffers with w
nnoremap w :WMToggle
" Use safer keys for moving to another window
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
```

为了使上述按键绑定正确运行，终端程序需要配置为：Backspace 键产生 "ASCII DEL"，Delete 键产生 "Escape sequence"。

新的原生 Vim 软件包系统与 `git` 和 `git submodule` 无缝集成。一个这样的配置示例可以在我的 Git 仓库 `dot-vim` 中找到。本质上是这样做的：
- 使用 `git` 和 `git submodule` 将最新的扩展软件包（如 `name`）放到 `~/.vim/pack/*/opt/name` 等位置。
- 通过在用户的 `vimrc` 文件中增加 `packadd! name` 行，将这些软件包添加到 `runtimepath`。
- Vim 在初始化时将这些软件包加载到 `runtimepath`。
- 初始化完成后，使用 `helptags ALL` 更新文档标签。

更多信息，请使用 `vim --startuptime vimstart.log` 启动 Vim 来检查实际的执行顺序和每个步骤消耗的时间。

以下是一些有趣的外部插件包：
- **Vim** - 无所不在的文本编辑器 -- Vim 和 Vim 脚本的官方上游站点
- **VimAwesome** -- Vim 插件列表
- **vim-scripts** -- Debian 软件包：一个 Vim 脚本的集合

管理并加载这些外部软件包到 Vim 的方法有很多种，建议查阅原始文档以获取最佳实践。

| 按键 | 信息 |
|------|------|
| `:help package` | 解释 Vim 软件包机制 |
| `:help runtimepath` | 解释 `runtimepath` 机制 |
| `:version` | 内部状态，包括 `vimrc` 文件的候选路径 |
| `:echo $VIM` | 环境变量 `$VIM` 用于定位 `vimrc` 文件的路径 |