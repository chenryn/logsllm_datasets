### III. DATASET

In this paper, we utilize two complementary datasets: (1) a set of pre-installed applications from Firmware Scanner, and (2) app reputation and installation logs obtained from NortonLifeLock. For clarity and consistency, we will refer to individual Android applications by their MD5 hash, and to all versions of an application under the same package name as "packages."

#### Firmware Scanner
Most FOTA (Firmware Over-The-Air) applications come pre-installed on Android devices and are not available in public app stores. To address this, we accessed a dataset of pre-installed apps collected by Gamba et al. [43] using Firmware Scanner, a publicly available app on Google Play [13]. Firmware Scanner extracts pre-installed apps from various system partitions (e.g., /system, /vendor, /oem, /odm, and /product) in a privacy-preserving manner, without collecting any personal data from users. As of June 2020, this dataset contains 422,121 pre-installed apps from 40,165 users across 184 countries, with 26% of the users in Europe, 26% in America, and 40% in Asia, based on Mobile Country Codes (MCC). We excluded 152,097 apps found only on rooted devices to ensure the validity of our results by focusing on devices that have not been tampered with.

#### Reputation and Installation Logs
A critical aspect of characterizing and analyzing FOTA apps is understanding the type of software they install on user devices. We use a dataset provided by NortonLifeLock, which captures the presence of apps on real devices and the processes responsible for their installation. The dataset includes only app metadata (not the actual APK files) and is anonymized to protect user privacy. A reputation log record contains an anonymized device identifier, the SHA256 hash of the APK, package name, signer key, and, for a subset of logs, the parent package name and its SHA256 hash and signer key. This information is obtained via the Android Package Installer using the `PackageInstaller.getInstallerPackageName` method. Therefore, the dataset is limited to installations from FOTA apps that invoke the `PackageInstaller`.

Customer devices regularly query a cloud-based reputation system to obtain the reputation for installed APKs, which may result in multiple queries for the same APK. To remove duplicate events, we use the earliest observed date as an approximation of the installation time. In total, this dataset contains 1.6 billion installation events from 19.3 million Android devices, collected from January to December 2019. Prior work has used this dataset to analyze distribution vectors of unwanted apps [48], and we extend it to cover a 12-month period.

### IV. DISCOVERY OF FOTA APPS

Detecting FOTA apps is challenging due to variations in their implementation details. FOTA apps may not have distinctive package names, their functionality may be split among multiple apps, or they may contain customized code. To address this, we designed FOTA Finder, a tool to automatically identify and classify FOTA capabilities in a given APK file. In this section, we first describe FOTA Finder (§IV-A) and its limitations (§IV-B), then present the results obtained from our dataset of pre-installed apps (§IV-C), and validate the accuracy of this discovery process (§IV-D).

#### A. FOTA Finder
We began by extracting FOTA-specific code fingerprints from Google's FOTA documentation and manually analyzing the code of 18 well-known FOTA apps. We searched the Firmware Scanner dataset for apps with descriptive names, such as those containing terms like "update" or "fota." Using these fingerprints, we built FOTA Finder to automatically classify an APK as FOTA or not. The tool is based on Androguard [36], an Android analysis framework that facilitates static analysis of Android apps. For each APK, FOTA Finder detects the compiled DEX (Dalvik EXecutable) code included in one or more `classes.dex` files. If an app uses ahead-of-time optimized code, FOTA Finder parses the ODEX file and extracts the original DEX files. Since the ODEX file format is not publicly documented, we developed Dextripador [11] through reverse engineering efforts. Finally, we parse the DEX code for specific method calls and strings related to FOTA system updates.

Table I summarizes the key FOTA detection features (flags) used to detect the mechanisms provided by the Android platform for installing new apps in the system partition. These features cover both the old update procedures based on `RecoverySystem` and the newer A/B system updates. If an app has at least one of these signals, FOTA Finder categorizes it as FOTA.

**Table I: Features for detecting FOTA apps.**

| Signal | Description |
| --- | --- |
| RV | Call to the method `verifyPackage` from the API class `android.os.RecoverySystem` |
| RI | Call to the method `installPackage` from the API class `android.os.RecoverySystem` |
| CMD | Use of the strings `/cache/recovery/command` and `--update-package` in the code |
| A/B | Call to the method `applyPayload` from the API class `android.os.UpdateEngine` |

During the manual analysis of FOTA apps, we identified other signals associated with behaviors implemented by OTA apps, which can install and remove user (non-system) apps under the `/data` directory. FOTA Finder also uses these signals to identify other package installation capabilities in FOTA apps. A complete list of OTA features is provided in Appendix B.

#### B. Scope and Limitations
We identified three main technical limitations in FOTA Finder during our design, development, and exploratory research:

1. **API Conformance**: Our tool can only detect FOTA apps that follow Google's recommendations and use FOTA-specific API functions. It cannot detect FOTA apps with custom implementations (e.g., custom services or native code). However, we also look for the presence of `/cache/recovery/command` and `--update_package` strings, which are part of the internal implementation of an update for recovery [50].
2. **ODex Parsing**: FOTA Finder fails to parse ODEX code for 37% of the apps due to the lack of documentation for the ODEX file format and changes in its internal structure.
3. **Static Analysis**: Our detection of FOTA apps relies exclusively on static analysis of DEX code. This can be problematic because FOTA apps may use dynamic code loading, reflection, native code, or string obfuscation, leading to misclassification. However, running pre-installed apps in a sandbox environment at scale remains an open problem.

#### C. FOTA Finder Results
We ran FOTA Finder on 422,121 pre-installed apps found in non-rooted devices from 40,165 users in the Firmware Scanner dataset (§III). FOTA Finder could not process 37% (154,922) of the apps due to the usage of ODEX files. In total, FOTA Finder detected 2,013 FOTA apps in 20,924 devices. 24% of these apps use ODEX code, which FOTA Finder managed to parse successfully.

An analysis of the FOTA apps' package names shows that 32% (647) do not contain any string tokens that reveal the purpose of the app (e.g., "update," "install," "fota"). 93% (1,878) of the FOTA apps rely on the `RecoverySystem` API for the update process, while the remaining 7% (135) support A/B system updates. 32% (651) of the FOTA apps can also perform installations at the user level. We investigate these capabilities in detail in §VII, as FOTA apps can use them to install malicious apps.

#### D. FOTA Finder Evaluation
Given the technical limitations of FOTA Finder, we consider it acceptable for the tool to miss some apps (False Negatives, FN). Our methodology offers sufficient coverage to analyze the ecosystem and draw general conclusions. We focus on reducing False Positives (FP), i.e., non-FOTA apps misclassified as FOTA, as these can introduce bias and affect the validity of our results. We thus consider FOTA Finder as a best-effort yet accurate approach that does not aim to be complete. To evaluate potential FPs, we conducted a manual review of a subset of 50 FOTA apps and searched Google Play Store for the presence of FOTA apps.

**Manual Review**: We validated our method by manually investigating a subset of 50 FOTA apps randomly chosen. One of the authors classified them as FOTA apps, discovering three potential FPs. However, upon closer inspection, these apps were part of a larger FOTA system composed of multiple apps, each responsible for different phases (e.g., download, verify, and install packages). Specifically, a FOTA app (`com.samsung.sdm`) verifies the update package using the `RecoverySystem.verifyPackage` method but relies on a native library (`libmno_dmstack.so`) to apply the update. Another app (`com.qualcomm.qti.loadcarrier`) applies the verification but relies on the `CarrierAccessCacheService` from another package for the actual installation. Finally, `com.zte.zdm` uses a custom update method (not implemented in FOTA Finder) with an intent action `android.intent.action.RECOVERY_REBOOT` to perform the update. Accordingly, we do not consider them as actual FPs and do not remove them from our dataset.

**FOTA Apps in the Play Store**: We searched all FOTA package names in Google Play Store from Madrid, Spain, on June 24, 2020, using a purpose-built crawler. We detected 7 FOTA packages, including Google Play Services. Although Google Play Services does not perform system updates, it updates Google-related apps that often come pre-installed. We reviewed the descriptions and certificates of the other six apps and verified that they are indeed FOTA apps used for system updates of specific phone models and released by the actual device vendors. We lack sufficient insights to explain why these apps were accepted on Google Play despite Google's Terms of Service [56].

### V. ECOSYSTEM

Developing and deploying FOTA apps, as well as operating the updating infrastructure, are critical parts of the Android supply chain. While some OEMs (Original Equipment Manufacturers) keep these processes in-house, others rely on third-party FOTA suppliers for some or all steps. The number and relationships between stakeholders involved in the firmware update process are generally unknown, and it is not always possible to determine their identity due to the lack of accurate attribution signals. In this section, we leverage FOTA Finder's results to explore this ecosystem. First, we identify the different stakeholders present in the deployment of FOTA apps (§V-A). Second, we analyze their prevalence across different devices and brands (§V-B).

#### A. FOTA Stakeholders
Identifying the company or organization responsible for building and deploying the FOTA component is a critical aspect of the FOTA supply chain. Several technical challenges prevent us from reliably performing authorship attribution in the Android ecosystem, largely due to the lack of a public key infrastructure (PKI) to verify the legitimacy of the certificates used to sign apps. This issue is particularly critical for pre-installed apps, which lack the developer metadata found in regular apps on app stores. Additionally, confusion arises when brands and developers use multiple organization unit names within their products (e.g., Samsung Corporation vs. Samsung Electronics) or generic names like "Android" [61].

Despite these limitations, we analyzed FOTA package names and certificates to identify the companies responsible for the deployment of FOTA apps and, if possible, their developers. We assume that the company that signs a FOTA package is the one behind its deployment. If the package name contains a company name that differs from the signer, we assume that the app is developed by the company in the package name and deployed by the company that signs it. We combined the methodology proposed by Sebastian et al. [61] with the device brand as reported by Firmware Scanner. To get the organizations from the certificates, we relied on the Organization field (O) and the domain of the Email from the subject's Distinguished Name (DN).

From this analysis, we found 269 unique certificates that sign FOTA apps, belonging to 219 subjects from 127 organizations. The spectrum of organizations in the certificates is wide, ranging from certified OEM vendors such as Samsung to MNOs (Mobile Network Operators) such as Vodafone.

To better explore the FOTA providers landscape, we classified them by their type of company using a semi-manual snowball sampling method [45]. We performed web searches to identify unknown companies that remained unclassified. This process allowed us to identify the following categories, presented by the number of package names detected for each category and the percentage of apps within the 2,013 FOTAs detected:
- **OEMs**: 53% of FOTA apps from 77 different packages.
- **SoCs (System on Chip)**: 9% of FOTA apps from 13 packages.
- **SFDs (Software Development Firms)**: e.g., Adups or Redstone: 9% of FOTA apps from 13 packages.
- **MNOs**: 1.6% of FOTA apps from 4 packages.
- **Google**: 15% of FOTA apps from 2 packages (`com.google.android.gms` and `com.google.android.gsf`).
- **Uncategorized (UNC)**: 12% of FOTA apps from 24 packages, for which we could not find information.

This analysis reveals that the FOTA ecosystem is rich and goes beyond just OEM vendors.

While one would expect a one-to-one mapping between package names and signatures, we found that 49 (37%) packages are signed by 2 or more different organizations. This is due to different organizations developing the FOTA and deploying them in the devices. The most extreme case is a single package, `com.adups.fota.sysoper`, signed by 60 different organizations. Adups is a FOTA software development company whose products are integrated into (mostly low-end) smartphones [19], [47]. Organizations signing this package include OEMs such as Konka, Tinno, and Wheatek. In many cases, this is a mandatory requirement to acquire the system shared UID, as we will show in §VI. Another package, `com.mediatek.systemupdate.sysoper`, is signed by 33 different certificates from various organizations, including OEMs like Oppo, Lenovo, and HTC. Mediatek is a SoC manufacturer, and the presence of one of its FOTAs might be required to update specific firmware. However, as described in §V-B and §VII, some FOTA apps from SoC vendors do install apps available on public markets.

**Security Implications**: The lack of control over the FOTA signing process has attribution implications and security risks. We found 40 FOTA apps (2%), corresponding to 13 different packages, signed with default (well-known) test-keys released as part of the AOSP. At least 171 devices from 20 brands present this issue, as listed in Table II. The use of such keys is discouraged in the FOTA development guidelines defined in the Android official documentation due to their concerning security implications [30]. Examples of these risks include the replacement of legitimate apps as an update or, in case of misconfiguration of the sharedUID and components permissions, another app running in the same process memory.

**Table II: FOTA Packages (left) signed by default keys from AOSP and Top brands (right) affected.**

| Package | # Devices | Brand |
| --- | --- | --- |
| com.adups.fota.sysoper | 98 | Alps |
| com.mediatek.systemupdate.sysoper | 16 | Xiaomi |
| pl.zdunex25.updater | 13 | Samsung |
| com.abastra.android.goclever.otaupdate | 11 | Goclever |
| com.mediatek.googleota.sysoper | 10 | Allview |
| com.redstone.ota.ui | 8 | Doogee |
| com.freeme.ota | 6 | Iku |
| com.fw.upgrade.sysoper | 4 | Blackview |
| com.fota.wirelessupdate | 3 | Bravis |
| org.pixelexperience.ota | 3 | Cubot |
| com.android.settings | 2 | Elite_5 |
| com.adups.fota | 1 | BQ |
| com.rock.gota | 1 | Others (9) |

| # Devices | 80 | 16 | 12 | 11 | 10 | 9 | 8 | 6 | 6 | 3 | 2 | 2 | 11 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |