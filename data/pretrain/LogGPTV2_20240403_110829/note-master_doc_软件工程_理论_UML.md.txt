# 面向对象方法

面向对象（Object-Oriented, OO）是一种软件开发方法，其概念和应用已经超越了程序设计和软件开发的范畴，扩展到了数据库系统、交互式界面、应用架构、应用平台、分布式系统、网络管理结构、CAD技术以及人工智能等多个领域。面向对象方法是对现实世界的理解和抽象方式，是计算机编程技术发展到一定阶段后的产物。

## 特点
- 封装：将数据和操作这些数据的方法绑定在一起。
- 多态：允许子类重写父类的方法，并且可以根据调用对象的实际类型来执行相应的方法。
- 抽象：通过定义接口或抽象类来隐藏复杂性，只暴露必要的信息给外部。
- 继承：支持一个类继承另一个类的属性和方法，从而实现代码复用并建立层次化的类结构。

## 基本思想
面向对象编程的核心思想在于将问题域中的实体抽象为对象，并通过对象之间的交互来解决问题。每个对象都包含数据（属性）及其上可执行的操作（方法），并通过消息传递机制进行通信。

# UML（统一建模语言）

UML (Unified Modeling Language) 是一种非专利的第三代建模及规范语言，它提供了一种开放的方法用于描述、可视化、构建和编写面向对象的软件密集系统的制品。UML体现了在大规模复杂系统建模方面尤其是软件架构层面已经被证明有效的最佳工程实践。

## 术语与符号
### 类与对象
- **类名**：表示特定类型的对象。
- **属性**：类中定义的数据成员。
- **操作**：类中定义的行为或功能。
- **多态性**：不同类的对象可以通过相同的方式被调用来执行不同的行为。
  
### 接口
定义了可以由其他类实现的一组方法签名。

### 协作
一组类、接口等元素共同工作以提供比单独组件更强的功能。包括：
- **交互各方**
- **交互方式**
- **交互内容**

### 用例
对一组动作序列的描述。

### 主动类
体现并发行为的抽象。

### 构件
可替换的成分，遵循一组提供的接口实现。

### 制品
物理的、可替代的部件。

### 节点
代表运行时计算资源的位置。

### 包
组织相关模型元素的一种机制。

## 表达关系的术语
- **关联**：两个类之间存在某种联系。
- **泛化**：一种“is-a”关系，指明一个类是另一个类的特例。
- **实现**：类或接口与其具体实现之间的关系。
- **依赖**：一个元素的变化会影响另一个元素。

# UML模型表达工具
### 静态部分建模工具
专注于系统结构而非行为。

### 动态部分建模工具
- **用例图**：展示系统如何与外界交互。
- **状态图**：显示对象在其生命周期内可能经历的状态及其转换。
- **活动图**：类似于流程图，但更侧重于业务过程或算法逻辑。
- **顺序图**：描绘对象间随时间变化的消息传递顺序。
- **通信图**：强调对象间的连接以及它们之间发送的消息。
- **交互概览图**：结合了多种交互视图来全面展示复杂的交互场景。
- **定时图**：特别关注事件发生的时间点。

## 类图
展示了系统中的类及其相互关系，包括但不限于依赖、泛化、实现等。

## 用例图
- **主题**：通常指整个系统或其主要部分。
- **用例**：描述用户与系统交互的具体场景。
- **参与者**：使用系统的外部实体。
- **依赖**：一个用例需要另一个用例才能完成。
- **泛化**：从一个通用用例派生出多个具体的用例。
- **关联**：参与者与用例之间的联系。

## 顺序图
详细刻画了对象之间随时间发生的交互消息。

## 状态图
展示了从一个状态转移到另一个状态的过程，包括简单状态和组合状态、触发状态转换的事件以及状态之间的转换条件。

# UML总结
UML对于自顶向下的建模人员来说非常有用，因为它不仅提供了概念建模的支持，还能够帮助进行详细的软件建模。这使得开发者能够在项目早期就清晰地理解需求并规划出合理的系统架构。