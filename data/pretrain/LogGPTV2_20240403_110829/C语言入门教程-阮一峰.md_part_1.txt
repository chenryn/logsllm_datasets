语⾔简介 语⾔教程 ⽹道
C - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
历史 #
C 语⾔最初是作为 Unix 系统的开发⼯具⽽发明的。
1969 年，美国⻉尔实验室的肯 · 汤普森（Ken Thompson）与丹尼斯 · ⾥奇（Dennis Ritchie）⼀起开发
了 Unix 操作系统。Unix 是⽤汇编语⾔写的，⽆法移植到其他计算机，他们决定使⽤⾼级语⾔重写。但
是，当时的⾼级语⾔⽆法满⾜他们的要求，汤普森就在 BCPL 语⾔的基础上发明了 B 语⾔。
1972 年，丹尼斯 · ⾥奇和布莱恩 · 柯林汉（Brian Kernighan）⼜在 B 语⾔的基础上重新设计了⼀种新语
⾔，这种新语⾔取代了 B 语⾔，所以称为 C 语⾔。
1973 年，整个 Unix 系统都使⽤ C 语⾔重写。此后，这种语⾔开始快速流传，⼴泛⽤于各种操作系统和系
统软件的开发。
1988 年，美国国家标准协会（ANSI）正式将 C 语⾔标准化，标志着 C 语⾔开始稳定和规范化。
⼏⼗年后的今天，C 语⾔依然是最⼴泛使⽤、最流⾏的系统编程语⾔之⼀，Unix 和 Linux 系统现在还是使
⽤ C 语⾔开发。
C 语⾔的特点 #
C 语⾔能够⻓盛不衰、⼴泛应⽤，主要原因是它有⼀些鲜明的特点。
（1）低级语⾔
C 语⾔能够直接操作硬件、管理内存、跟操作系统对话，这使得它是⼀种⾮常接近底层的语⾔，也就是低
级语⾔，⾮常适合写需要跟硬件交互、有极⾼性能要求的程序。
（2）可移植性
C 语⾔的原始设计⽬的，是将 Unix 系统移植到其他计算机架构。这使得它从⼀开始就⾮常注重可移植性，
C 程序可以相对简单地移植到各种硬件架构和操作系统。
除了计算机，C 语⾔现在还是嵌⼊式系统的⾸选编程语⾔，汽⻋、照相机、家⽤电器等设备的底层系统都
是⽤ C 语⾔编程，这也是因为它良好的可移植性。
（3）简单性
C 语⾔的语法相对简单，语法规则不算太多，也⼏乎没有语法糖。⼀般来说，如果两个语法可以完成⼏乎
相同的事情，C 语⾔就只会提供⼀种，这样⼤⼤减少了语⾔的复杂性。
⽽且，C 语⾔的语法都是基础语法，不提供⾼级的数据结构，⽐如 C 语⾔没有 “类”（class），复杂的数
据结构都需要⾃⼰构造。
（4）灵活性
C 语⾔对程序员的限制很少。它假设程序员知道⾃⼰在⼲嘛，不会限制你做各种危险的操作，你⼲什么都
可以，后果也由⾃⼰负责。
C 语⾔的哲学是 “信任程序员，不要妨碍他们做事”。⽐如，它让程序员⾃⼰管理内存，不提供内存⾃动清
理功能。另外，也不提供类型检查、数组的负索引检查、指针位置的检查等保护措施。
表⾯上看，这似乎很危险，但是对于⾼级程序员来说，却有了更⼤的编程⾃由。不过，这也使得 C 语⾔的
debug 不太容易。
（5）总结
上⾯这些特点，使得 C 语⾔可以写出性能⾮常强、完全发挥硬件潜⼒的程序，⽽且 C 语⾔的编译器实现难
度相对较低。但是另⼀⽅⾯，C 语⾔代码容易出错，⼀般程序员不容易写好。
此外，当代很多流⾏语⾔都是以 C 语⾔为基础，⽐如 C++、Java、C#、JavaScript 等等。学好 C 语⾔有
助于对这些语⾔加深理解。
C 语⾔的版本 #
历史上，C 语⾔有过多个版本。
（1）K＆R C
指的是 C 语⾔的原始版本。1978 年，C 语⾔的发明者丹尼斯 · ⾥奇（Dennis Ritchie）和布莱恩 ·
K&R C
柯林（Brian Kernighan）合写了⼀本著名的教材《C 编程语⾔》（The C programming language）。由
于 C 语⾔还没有成⽂的语法标准，这本书就成了公认标准，以两位作者的姓⽒⾸字⺟作为版本简称 “K&R
C”。
（2）ANSI C（⼜称 C89 或 C90）
C 语⾔的原始版本⾮常简单，对很多情况的描述⾮常模糊，加上 C 语法依然在快速发展，要求将 C 语⾔标
准化的呼声越来越⾼。
1989 年，美国国家标准协会（ANSI）制定了⼀套 C 语⾔标准。1990 年，国际标准化组织（ISO）通过了
这个标准。它被称为 “ANSI C”，也可以按照发布年份，称为 “C89 或 C90”。
（3）C95
1995 年，美国国家标准协会对 1989 年的那个标准，进⾏了补充，加⼊多字节字符和宽字符的⽀持。这个
版本称为 C95。
（4）C99
C 语⾔标准的第⼀次⼤型修订，发⽣在 1999 年，增加了许多语⾔特性，⽐如双斜杠（ ）的注释语法。
//
这个版本称为 C99，是⽬前最流⾏的 C 版本。
（5）C11
2011 年，标准化组织再⼀次对 C 语⾔进⾏修订，增加了 Unicode 和多线程的⽀持。这个版本称为 C11。
（6）C17
C11 标准在 2017 年进⾏了修补，但发布是在 2018 年。新版本只是解决了 C11 的⼀些缺陷，没有引⼊任何
新功能。这个版本称为 C17。
（7）C2x
标准化组织正在讨论 C 语⾔的下⼀个版本，据说可能会在 2023 年通过，到时就会称为 C23。
C 语⾔的编译 #
C 语⾔是⼀种编译型语⾔，源码都是⽂本⽂件，本身⽆法执⾏。必须通过编译器，⽣成⼆进制的可执⾏⽂
件，才能执⾏。编译器将代码从⽂本翻译成⼆进制指令的过程，就称为编译阶段，⼜称为 “编译
时”（compile time），跟运⾏阶段（⼜称为 “运⾏时”）相区分。
⽬前，最常⻅的 C 语⾔编译器是⾃由软件基⾦会推出的 GCC 编译器，它可以免费使⽤。本书也使⽤这个
编译器。Linux 和 Mac 系统可以直接安装 GCC，Windows 系统可以安装 MinGW。但是，也可以不⽤这
么麻烦，⽹上有在线编译器，能够直接在⽹⻚上模拟运⾏ C 代码，查看结果，下⾯就是两个这样的⼯具。
CodingGround: https://tutorialspoint.com/compile_c_online.php
OnlineGDB: https://onlinegdb.com/online_c_compiler
本书的例⼦都使⽤ GCC 在命令⾏进⾏编译。
Hello World 示例 #
C 语⾔的源代码⽂件，通常以后缀名 结尾。下⾯是⼀个简单的 C 程序 。它就是⼀个普通的⽂
.c hello.c
本⽂件，任何⽂本编译器都能⽤来写。
#include 
int main(void) {
printf("Hello World\n");
return 0;
}
上⾯这个程序的唯⼀作⽤，就是在屏幕上⾯显示 “Hello World”。
这⾥不讲解这些代码是什么意思，只是作为⼀个例⼦，让⼤家看看 C 代码应该怎么编译和运⾏。假设你已
经安装好了 GCC 编译器，可以打开命令⾏，执⾏下⾯的命令。
$ gcc hello.c
上⾯命令使⽤ 编译器，将源⽂件 编译成⼆进制代码。注意， 是命令⾏提示符，你真正需
gcc hello.c $
要输⼊的是 后⾯的部分。
$
运⾏这个命令以后，默认会在当前⽬录下⽣成⼀个编译产物⽂件 （assembler output 的缩写）。执
a.out
⾏该⽂件，就会在屏幕上输出 。
Hello World
$ ./a.out
Hello World
GCC 的 参数可以指定编译产物的⽂件名。
-o
$ gcc -o hello hello.c
上⾯命令的 指定，编译产物的⽂件名为 （取代 ）。编译后就会⽣成⼀个名叫
-o hello hello a.out
的可执⾏⽂件，相当于为 指定了名称。执⾏该⽂件，也会得到同样的结果。
hello a.out
$ ./hello
Hello World
GCC 的 参数还可以指定按照哪个 C 语⾔的标准进⾏编译。
-std=
$ gcc -std=c99 hello.c
上⾯命令指定按照 C99 标准进⾏编译。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔基本语法 语⾔教程 ⽹道
C - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
语句 #
C 语⾔的代码由⼀⾏⾏语句（statement）组成。语句就是程序执⾏的⼀个操作命令。C 语⾔规定，语句必
须使⽤分号结尾，除⾮有明确规定可以不写分号。
int x = 1;
上⾯就是⼀个变量声明语句，声明整数变量 ，并且将值设为 。
x 1
多个语句可以写在⼀⾏。
int x; x = 1;
上⾯示例是两个语句写在⼀⾏。所以，语句之间的换⾏符并不是必需的，只是为了⽅便阅读代码。
⼀个语句也可以写成多⾏，这时就要依靠分号判断语句在哪⼀⾏结束。
int x;
x
=
1
;
上⾯示例中，第⼆个语句 被拆成了四⾏。编译器会⾃动忽略代码⾥⾯的换⾏。
x = 1;
单个分号也是有效语句，称为 “空语句”，虽然毫⽆作⽤。
;
表达式 #
C 语⾔的各种计算，主要通过表达式完成。表达式（expression）是⼀个计算式，⽤来获取值。
1 + 2
上⾯代码就是⼀个表达式，⽤来获取 这个算术计算的结果。
1 + 2
表达式加上分号，也可以成为语句，但是没有实际的作⽤。
8;
3 + 4;
上⾯示例是两个表达式，加上分号以后成为语句。
表达式与语句的区别主要是两点：
语句可以包含表达式，但是表达式本身不构成语句。
表达式都有返回值，语句不⼀定有。因为语句⽤来执⾏某个命令，很多时候不需要返回值，⽐如变
量声明语句（ ）就没有返回值。
int x = 1
语句块 #
C 语⾔允许多个语句使⽤⼀对⼤括号 ，组成⼀个块，也称为复合语句（compounded statement）。
{}
在语法上，语句块可以视为多个语句组成的⼀个复合语句。
{
int x;
x = 1;
}
上⾯示例中，⼤括号形成了⼀个语句块。
⼤括号的结尾不需要添加分号。
空格 #
C 语⾔⾥⾯的空格，主要⽤来帮助编译器区分语法单位。如果语法单位不⽤空格就能区分，空格就不是必
须的，只是为了增加代码的可读性。
int x = 1;
int x=1;
上⾯示例中，赋值号（ ）前后有没有空格都可以，因为编译器这⾥不借助空格，就能区分语法单位。
=
语法单位之间的多个空格，等同于单个空格。
int x = 1;
上⾯示例中，各个语法单位之间的多个空格，跟单个空格的效果是⼀样的。
空格还⽤来表示缩进。多层级的代码有没有缩进，其实对于编译器来说并没有差别，没有缩进的代码也是
完全可以运⾏的。强调代码缩进，只是为了增强代码可读性，便于区分代码块。
⼤多数 C 语⾔的⻛格要求是，下⼀级代码⽐上⼀级缩进 4 个空格。为了书写的紧凑，本书采⽤缩写两个空
格。
if (x > 0)
printf("positive\n");
if (x > 0)
printf("positive\n");
只包含空格的⾏被称为空⽩⾏，编译器会完全忽略该⾏。
注释 #
注释是对代码的说明，编译器会忽略注释，也就是说，注释对实际代码没有影响。
C 语⾔的注释有两种表示⽅法。第⼀种⽅法是将注释放在 之间，内部可以分⾏。
/*...*/
这种注释可以插在⾏内。
int open(char* s , int mode);
上⾯示例中， ⽤来对函数参数进⾏说明，跟在它后⾯的代码依然会有效执⾏。
/* file name */
这种注释⼀定不能忘记写结束符号 ，否则很容易导致错误。
*/
printf("a ");
printf("d ");
上⾯示例的原意是，第⼀⾏和第三⾏代码的尾部，有两个注释。但是，第⼀⾏注释忘记写结束符号，导致
注释⼀延续到第三⾏结束。
第⼆种写法是将注释放在双斜杠 后⾯，从双斜杠到⾏尾都属于注释。这种注释只能是单⾏，可以放在
//
⾏⾸，也可以放在⼀⾏语句的结尾。这是 C99 标准新增的语法。
int x = 1;
不管是哪⼀种注释，都不能放在双引号⾥⾯。双引号⾥⾯的注释符号，会成为字符串的⼀部分，解释为普
通符号，失去注释作⽤。
printf("// hello /* world */ ");
上⾯示例中，双引号⾥⾯的注释符号，都会被视为普通字符，没有注释作⽤。
编译时，注释会被替换成⼀个空格，所以 会变成 ，⽽不是 。
min/* space */Value min Value minValue
printf() #
基本⽤法 #
本书的示例会⼤量⽤到 函数，这⾥先介绍⼀下这个函数。
printf()
的作⽤是将参数⽂本输出到屏幕。它名字⾥⾯的 代表 （格式化），表示可以定制输出
printf() f format
⽂本的格式。
printf("Hello World");
上⾯命令会在屏幕上输出⼀⾏⽂字 “Hello World”。
不会在⾏尾⾃动添加换⾏符，运⾏结束后，光标就停留在输出结束的地⽅，不会⾃动换⾏。为了
printf()
让光标移到下⼀⾏的开头，可以在输出⽂本的结尾，添加⼀个换⾏符 。
\n
printf("Hello World\n");
如果⽂本内部有换⾏，也是通过插⼊换⾏符来实现。
printf("Hello\nWorld\n");
上⾯示例先输出⼀个 ，然后换⾏，在下⼀⾏开头输出 ，然后⼜是⼀个换⾏。
Hello World
上⾯示例也可以写成两个 ，效果完全⼀样。
printf()
printf("Hello\n");
printf("World\n");
是在标准库的头⽂件 定义的。使⽤这个函数之前，必须在源码⽂件头部引⼊这个头⽂
printf() stdio.h
件。
#include 
int main(void) {
printf("Hello World\n");
}
上⾯示例中，只有在源码头部加上 ，才能使⽤ 这个函数。 指令的
#include  printf() #include
详细解释，请看《预处理器》⼀章。
占位符 #
可以在输出⽂本中指定占位符。所谓 “占位符”，就是这个位置可以⽤其他值代⼊。
printf()
printf("There are %i apples\n", 3);
上⾯示例中， 是输出⽂本，⾥⾯的 就是占位符，表示这个位置要⽤其他值来替
There are %i apples\n %i
换。占位符的第⼀个字符⼀律为百分号 ，第⼆个字符表示占位符的类型， 表示这⾥代⼊的值必须是
% %i
⼀个整数。
的第⼆个参数就是替换占位符的值，上⾯的例⼦是整数 替换 。执⾏后的输出结果就是
printf() 3 %i
。
There are 3 apples