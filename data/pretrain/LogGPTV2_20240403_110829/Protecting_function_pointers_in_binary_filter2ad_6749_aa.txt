title:Protecting function pointers in binary
author:Chao Zhang and
Tao Wei and
Zhaofeng Chen and
Lei Duan and
Stephen McCamant and
Laszlo Szekeres
Protecting Function Pointers in Binary
Chao Zhang
LiST, Peking University
Beijing, China
PI:EMAIL
Lei Duan
LiST, Peking University
Beijing, China
PI:EMAIL
Tao Wei∗
LiST, Peking University
UC Berkeley
PI:EMAIL
Stephen McCamant
University of Minnesota
Zhaofeng Chen
LiST, Peking University
Beijing, China
PI:EMAIL
Laszlo Szekeres
Stony Brook University
USA
USA
PI:EMAIL
PI:EMAIL
ABSTRACT
Function pointers have recently become an important attack
vector for control-ﬂow hijacking attacks. However, no pro-
tection mechanisms for function pointers have yet seen wide
adoption. Methods proposed in the literature have high over-
heads, are not compatible with existing development pro-
cess, or both. In this paper, we investigate several protec-
tion methods and propose a new method called FPGate (i.e.,
Function Pointer Gate). FPGate rewrites x86 binary exe-
cutables and implements a novel method to overcome com-
patibility issues. All these protection methods are then eval-
uated and compared from the perspectives of performance
and ease of deployment. Experiments show that FPGate
achieves a good balance between performance, robustness
and compatibility.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess controls; D.2.4 [Software Engineering]: Software/Pro-
gram Veriﬁcation—Validation
Keywords
Function Pointer Protection; Binary Rewriting
1.
INTRODUCTION
Control-ﬂow hijacking attacks [4, 16] have a long histo-
ry, and corresponding protections [3, 17] have also existed
for more than a decade, in an ongoing arms race. The cur-
rent state of the art of protections pay much attention to
the return addresses on the stack (i.e. targets of return in-
structions), but provides few protections against function
pointers (i.e. targets of indirect call and jump instructions).
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
And thus, function pointers have recently become an impor-
tant attack vector. For instance, a buﬀer overﬂow or integer
overﬂow vulnerability can be exploited to overwrite func-
tion pointers in the heap to hijack the control ﬂow [6, 8].
Moreover, recent exploits [19] against use-after-free vulnera-
bilities replace objects’ virtual function tables (i.e. vtables)
to turn benign method calls into jumps to shellcode.
Representative protection schemes which protect function
pointers from exploiting including PointGuard [7] and CFI
(Control-Flow Integrity [1]). However, they require cooper-
ation from developers or code-producers, or suﬀer from in-
eﬃciency and compatibility problems. We propose a new
method called FPGate to achieve a balance.
First, FPGate needs no source-level information (e.g., PDB
ﬁles or debug information needed by CFI). It utilizes relo-
cation tables which are already required by ASLR (Address
Space Layout Randomization [17]) in modern x86 binary
executables, to disassemble binaries and identify all indirect
transfer instructions and all valid jump targets.
Second, FPGate overcomes compatibility issues by encod-
ing each valid function pointer into a pointer to a new tram-
poline chunk. Unlike other schemes, modules hardened by
FPGate can inter-operate seamlessly with un-hardened ones.
Moreover, optimizations are introduced by FPGate to ac-
celerate the run time execution, without any loss of security.
As a result, FPGate introduces a negligible run time over-
head, about 0.4% on SPECint2006.
FPGate ﬁlls most of the gap between existing lightweight
protections on one hand, and CFI on the other. Combin-
ing FPGate with robust protections of return addresses is
a sweet spot for security and usability. This combination
provides a protection almost as strong as the original CFI.
At the same time, it has low overhead and can be applied
directly and progressively to a binary.
The key contributions of this paper are:
• We investigate several existing function pointer protec-
tion mechanisms, and point out their advantages and
disadvantages.
• We propose a new eﬃcient mechanism FPGate to pro-
tect function pointers in binary executables and pro-
vide incremental deployment.
• We compare FPGate with existing mechanisms in an
experimental evaluation. The results show that FP-
Gate achieves a good balance between performance,
robustness and compatibility.
 mov ecx,[foo_ptr]
 call ecx
.data:
foo_ptr:    foo
foo():
 ret
initializer:
xor [foo_ptr],SEC_KEY
mov ecx,[foo_ptr]
xor ecx,SEC_KEY
call ecx
.data:
foo_ptr:    foo
foo():
ret
initializer:
push foo_ptr
call EncodePointer
mov [foo_ptr], eax
push foo_ptr
call DecodePointer
mov ecx,eax
call ecx
.data:
foo_ptr:    foo
foo():
 ret
(a) original
(b) PointGuard
(c) EncodePointer
 mov ecx,[foo_ptr]
 cmp [ecx+4], ID
 jne ERROR
 call ecx
.data:
foo_ptr:    foo
foo():
prefetchnta [ID]
 ret
(d) original CFI
 mov ecx,[foo_ptr]
 cmp [ecx-4], ID
 jne ERROR
 call ecx
.trampoline:
wrap_foo:
jmp foo
7 dup (0xCC)
dd ID
(e) FPGate
.data:
foo_ptr:  wrap_foo
foo():
 ret
Figure 1: (a) An indirect call whose target is from memory. (b)-(e) Overview of existing function pointer protection schemes and FPGate.
2. STUDY OF EXISTING PROTECTIONS
As an important attack vector, the function pointer has
drawn researchers’ attentions for years. In existing protec-
tion techniques, legal function pointers are diﬀerentiated
from illegal ones by encoding (or encrypting), by attaching
identiﬁers (IDs), or by memory alignments. Several repre-
sentative mechanisms are discussed here.
2.1 PointGuard
PointGuard [7] uses encryption to provide integrity for
function pointers. A per-process secret key, i.e., SEC_KEY, is
kept to encrypt and decrypt pointers and thus protect legal
pointers from tampering. Before a function pointer is stored
into memory, it is encrypted (i.e. XOR) with the secret key
ﬁrst. After the function pointer is read from memory, it is
decrypted (i.e. XOR) and then stored in registers for use.
Figure 1(a) shows an indirect call example whose target is
read from memory. After PointGuard is applied to this code
snippet, the hardened version is shown in Figure 1(b). It
is worth noting that a special initializer is instrumented by
PointGuard to re-initialize all statically initialized pointers.
The integrity of function pointers hardened by PointGuard
depends on the conﬁdentiality of the secret key. However,
the secret key is vulnerable to be stolen by attackers, such
as through information leakage vulnerabilities. In addition,
because the XOR operation is linear, an attacker may be
able to manipulate an encoded pointer by overwriting only
the lower bits of an address and launch an attack [2].
PointGuard works as a compiler extension and thus needs
a target application’s source code. Besides, with encryption
and decryption, function pointers cannot ﬂow between hard-
ened modules and un-hardened ones.
2.2 EncodePointer
As PointGuard was never released, Microsoft implement-
ed a similar approach beginning in Windows XP SP2. It
provides two API routines that can be called at the discre-
tion of the programmer, named EncodePointer and Decode-
Pointer [13]. Figure 1(c) shows the hardened version using
EncodePointer for the code snippet in Figure 1(a).
Rather than storing the secret key in user space like Point-
Guard, EncodePointer queries the system API NtQueryIn-
formationProcess to acquire the secret key. It prevents a
user-level attack from accessing the secret key directly, ame-
liorating the problem of information leakage vulnerabilities.
However, programmers have to decide which points to in-
voke EncodePointer and DecodePointer manually. In ad-
dition, each call to EncodePointer/DecodePointer queries
the kernel, and introduces a signiﬁcant run time overhead.
The requirement for source code and the compatibility
problems between hardened and un-hardened modules in
this protection scheme are analogous to those in PointGuard.
2.3 CFI
CFI [1] is a natural protection against control-ﬂow hijack-
ing attacks. It guarantees that all control-ﬂow transfers in a
program will be the ones intended in the original program
(i.e., those represented in the compiler’s control-ﬂow graph).
In general, it inserts an ID (e.g., the prefetchnta instruc-
tion in Figure 1(d)) before each legal target (e.g., a function
entry), and a check before each indirect transfer instruction.
Before transferring to the computed target at runtime, the
dynamic check validates whether the target’s ID is correct.
CFI defeats a broad range of shellcode injection attacks,
including sophisticated ROP (Return Oriented Programming
[4]). However, despite its long history, CFI has not seen wide
industrial adoption.
It is in part because CFI imposes a signiﬁcant overhead.
Even if only function pointers are protected by CFI (called as
CFI-fp), it also introduces an overhead of 7.2%, as shown in
Section 4.3. In addition, it requires source-level information
(e.g., debug information) which are usually not available in
COTS binary. Moreover, modules hardened by CFI cannot
inter-operate seamlessly with un-hardened ones. For exam-
ple, the instrumented runtime check will fail if the computed
jump target falls into an un-hardened module.
FPGate
BitCover
Original PE 
File
Disasm 
info
FPWriter
Hardened 
PE file
(Disassemble)
(Encode/Validate)
Figure 2: Architecture of FPGate
3. DESIGN & IMPLEMENTATION
3.1 Approach Overview
As PointGuard, FPGate encodes legal function pointers
to diﬀerentiate them from illegal ones. Unlike PointGuard,
pointers encoded by FPGate are valid code pointers, and can
ﬂow into un-hardened modules without compatibility issues.
On the other hand, a unique ID is attached to each en-
coded pointer for validating, as CFI. A novel code section,
i.e., the trampoline section, is thus introduced for encoding
pointers and holding IDs. Each valid function pointer is en-
coded into a pointer to a code chunk in the trampoline. Un-
like CFI, most instructions’ addresses will not change after
rewriting. Meanwhile, with the trampoline layer, computed
jump targets which fall into un-hardened modules can also
be encoded to overcome compatibility issues.
The architecture of FPGate is shown in Figure 2. It con-
sists of two core modules: BitCover and FPWriter. BitCov-
er disassembles target binary and identiﬁes all indirect call
and jump instructions in addition to all valid jump targets.
FPWriter then instruments runtime checks before indirect
transfers, encodes valid jump targets with new code point-
ers, and creates the trampoline section. Figure 1(e) shows
the code snippet which is rewritten by FPWriter.
3.2 Disassembling and Identifying
In general, it is challenging to disassemble an x86 PE [14]
ﬁle correctly, because x86 is a CISC platform. However, we
can take advantage of the fact that ASLR and DEP (Da-
ta Execution Prevention [3]) are widely adopted in Win-
dows/x86 executables, particularly those whose developers
care about security.
Combined with other policies, a custom disassembler Bit-
Cover [21] is built and can disassemble PE ﬁles generated
by modern compilers. With BitCover, all indirect jumps or
calls and their valid targets can be identiﬁed.
3.3 Validating Jump Targets
After identifying all indirect call/jmp instructions by Bit-
Cover, FPWriter instruments runtime checks before them.
As shown in Figure 1(e), a check which veriﬁes the exis-
tence of a predeﬁned ID around the jump target is inserted
before the indirect call instruction (i.e., call ecx).
Similar as the CFI, the ID is carefully chosen in order to