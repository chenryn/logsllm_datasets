title:Constantine: Automatic Side-Channel Resistance Using Efficient Control
and Data Flow Linearization
author:Pietro Borrello and
Daniele Cono D'Elia and
Leonardo Querzoni and
Cristiano Giuffrida
Constantine: Automatic Side-Channel Resistance Using Efficient
Control and Data Flow Linearization
Pietro Borrello
Sapienza University of Rome
PI:EMAIL
Daniele Cono D’Elia
Sapienza University of Rome
PI:EMAIL
ABSTRACT
In the era of microarchitectural side channels, vendors scramble to
deploy mitigations for transient execution attacks, but leave tradi-
tional side-channel attacks against sensitive software (e.g., crypto
programs) to be fixed by developers by means of constant-time
programming (i.e., absence of secret-dependent code/data patterns).
Unfortunately, writing constant-time code by hand is hard, as evi-
denced by the many flaws discovered in production side channel-
resistant code. Prior efforts to automatically transform programs
into constant-time equivalents offer limited security or compatibil-
ity guarantees, hindering their applicability to real-world software.
In this paper, we present Constantine, a compiler-based system
to automatically harden programs against microarchitectural side
channels. Constantine pursues a radical design point where secret-
dependent control and data flows are completely linearized (i.e., all
involved code/data accesses are always executed). This strategy pro-
vides strong security and compatibility guarantees by construction,
but its natural implementation leads to state explosion in real-world
programs. To address this challenge, Constantine relies on care-
fully designed optimizations such as just-in-time loop linearization
and aggressive function cloning for fully context-sensitive points-to
analysis, which not only address state explosion, but also lead to an
efficient and compatible solution. Constantine yields overheads as
low as 16% on standard benchmarks and can handle a fully-fledged
component from the production wolfSSL library.
CCS CONCEPTS
• Security and privacy → Side-channel analysis and counter-
measures; • Software and its engineering → Compilers.
KEYWORDS
Side channels; constant-time programming; compilers; control-flow
linearization; data-flow linearization
ACM Reference Format:
Pietro Borrello, Daniele Cono D’Elia, Leonardo Querzoni, and Cristiano
Giuffrida. 2021. Constantine: Automatic Side-Channel Resistance Using
Efficient Control and Data Flow Linearization. In Proceedings of the 2021
ACM SIGSAC Conference on Computer and Communications Security (CCS
’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York,
NY, USA, 19 pages. https://doi.org/10.1145/3460120.3484583
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484583
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit Amsterdam
Leonardo Querzoni
Sapienza University of Rome
PI:EMAIL
1 INTRODUCTION
Protecting the confidentiality of security-sensitive information is
a key requirement of modern computer systems. Yet, despite ad-
vances in software security engineering, this requirement is more
and more challenging to satisfy in face of increasingly sophisti-
cated microarchitectural side-channel attacks. Such attacks allow
adversaries to leak information from victim execution by observ-
ing changes in the microarchitectural state (e.g., cache eviction),
typically via timing measurements (e.g., memory access latency).
Such attacks have been shown practical in the real world with
or without the assistance of CPU bugs. Examples in the former
category are transient execution attacks such as Spectre [39], Melt-
down [41], L1TF [70], and MDS [15, 57, 72]. Examples in the latter
category are traditional cache attacks (e.g., FLUSH+RELOAD [81]
and PRIME+PROBE [52]) against security-sensitive software vic-
tims such as crypto libraries. While the former are the focus of many
mitigation efforts by vendors, for the latter the burden of mitigation
lies entirely on the shoulders of software developers [36].
In theory, this is feasible, as side-channel attacks leak secrets
(e.g., crypto keys) by observing victim secret-dependent computa-
tions (e.g., branch taken or array indexed based on a crypto key bit)
via microarchitectural measurements. Hence, eliminating explicit
secret-dependent code/data accesses from software—a practice gen-
erally known as constant-time programming [13]—is a viable avenue
for mitigation. In practice, removing side-channel vulnerabilities
from software is a daunting and error-prone task even for skilled de-
velopers. Not surprisingly, even production side channel-resistant
implementations are riddled with flaws [21, 63].
To address this problem, much prior work has proposed solu-
tions to automatically transform programs into their constant-time
equivalents or variations [17, 28, 29, 35, 37, 42–44, 46, 50, 59, 65,
67, 73, 75, 77, 84–87]. Unfortunately, even the most recent solu-
tions [53, 62, 80] offer limited security or compatibility guarantees,
hindering their applicability to real-world programs.
In this paper, we introduce Constantine, a compiler-based sys-
tem for the automatic elimination of side-channel vulnerabilities
from programs. The key idea is to explore a radical design point
based on control and data flow linearization (or CFL and DFL), where
all the possible secret-dependent code/data memory accesses are al-
ways executed regardless of the particular secret value encountered.
The advantage of this strategy is to provide strong security and
compatibility guarantees by construction. The nontrivial challenge
is to develop this strategy in a practical way, since a straightforward
implementation would lead to program state explosion. For instance,
naively linearizing secret-dependent branches that guard loop exits
would lead to unbounded loop execution. Similarly, naively lin-
earizing secret-dependent data accesses by touching all the possible
memory locations would lead to an unscalable solution.
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea715Our design is indeed inspired by radical and impractical-by-
design obfuscation techniques such as the M/o/Vfuscator [3], which
linearizes the control flow to collapse the program’s control-flow
graph into a single branchless code block with only data movement
(i.e., x86 mov) instructions [38]. Each mov instruction uses an extra
level of indirection to operate on real or dummy data depending on
whether the code is running the intended side of a branch or not.
Revisiting such design point for side-channel protection faces
several challenges. First, linearizing all the branches with mov-only
code hinders efficient code generation in modern compilers and
leads to enormous overheads. To address this challenge, Constan-
tine only linearizes secret-dependent branches pinpointed by pro-
filing information, allows arbitrary branchless instructions besides
mov, and uses efficient indirect memory addressing to allow the
compiler to generate efficient code. Second, the M/o/Vfuscator only
linearizes the control flow and encodes branch decisions in new data
flows, a strategy which would only multiply the number of secret-
dependent data accesses. To address this challenge, Constantine
couples CFL with DFL to also linearize all the secret-dependent
data flows (generated by CFL or part of the original program).
Finally and above all, M/o/Vfuscator does not address state ex-
plosion. For example, it linearizes loop exits by means of invalid mov
instructions, which generate exceptions and restart the program in
dummy mode until the original loop code is reached. Other than
being inefficient, this strategy originates new side channels (e.g.,
exception handling) that leak the number of loop iterations. To
address state explosion, Constantine relies on carefully designed
optimizations such as just-in-time loop linearization and aggressive
function cloning. The former linearizes loops in the same way as
regular branches, but adaptively bounds the number of iterations
based on the original program behavior. The latter enables precise,
context-sensitive points-to analysis which can strictly bound the
number of possible targets at secret-dependent data accesses.
Collectively, our optimizations produce a scalable CFL and DFL
strategy, while supporting all the common programming constructs
in real-world software such as nested loops, indirect function calls,
pointer-based accesses, etc. Our design not only addresses the state
explosion problem, but also leads to a system that outperforms prior
comprehensive solutions in terms of both performance and com-
patibility, while also providing stronger security guarantees. For
example, we show Constantine yields overheads as low as 16%
for cache-line attacks on standard benchmarks. Moreover, to show
Constantine provides the first practical solution for automatic
side-channel resistance for real-world software, we present a case
study on the wolfSSL embedded TLS library. We show Constan-
tine-protected wolfSSL can complete a modular multiplication of a
ECDSA signature in 8 ms, which demonstrates Constantine’s au-
tomated approach can effectively handle a fully-fledged real-word
crypto library component for the very first time.
Contributions. To summarize, this paper proposes the following
contributions:
software from side channels.
• We introduce Constantine, a system for the protection of
• We show how Constantine can automatically analyze and
transform a target program by efficiently applying control
and data flow linearization techniques.
• We implement Constantine as a set of compiler transforma-
tions for the LLVM toolchain. Constantine is open source
(available at https://github.com/pietroborrello/constantine).
• We evaluate Constantine on several standard benchmarks,
evidencing its performance advantage against prior solutions.
We also present a case study on the wolfSSL library to show
its practical applicability on real-world software.
2 BACKGROUND
Microarchitectural side channels generally allow an adversary to
infer when and where in memory a victim program performs specific
code/data accesses. And by targeting secret-dependent accesses
originating from secret-dependent control and data flows in the
original program, an adversary can ultimately leak secret data.
Constant-time programming is a promising solution to eliminate
such explicit secret-dependent accesses from programs, but state-of-
the-art automated solutions are severely limited in terms of security,
performance, and/or compatibility.
Control Flow. Secret-dependent control flows (e.g., code branch-
ing on a crypto key bit) induce code accesses that microarchitectural
attacks can observe to leak secrets. Early constant-time program-
ming solutions only attempted to balance out secret-dependent
branches with dummy instructions (e.g., with cross-copying [6])
to mitigate only simple execution time side-channel attacks [45].
Molnar et al. [50] made a leap forward with the program counter
security model (PC-security), where the trace of secret-dependent
executed instructions is the same for any secret value.
Prior work has explored two main avenues to PC-security. The
first avenue is a form of transactional execution [53], which always
executes both sides of every secret-dependent branch—hence a real
and a decoy path—as-is, but uses a transaction-like mechanism to
buffer and later discard changes to the program state from decoy
paths. This approach provides limited security guarantees, as it
introduces new side channels to observe decoy path execution
and thus the secret. Indeed, one needs to at least mask exceptions
from rogue operands of read/write instructions on decoy paths,
introducing secret-dependent timing differences due to exception
handling. Even when normalizing such differences, decoy paths
may perform read/write accesses that real paths would not make,
introducing new decoy data flows. An attacker can easily learn
data-flow invariants on real paths (e.g., an array always accessed
at the same offset range) and detect decoy path execution when
the observed accesses reveal invariant violations. See Appendix A
for concrete decoy path side channel examples. Also, this approach
alone struggles with real-world software compatibility. For instance,
it requires loops to be completely unrolled, which leads to code size
explosion for nested loops and for those with large trip count.
Another avenue to PC-security is predicated execution [20], which
similarly executes both real and decoy paths, but only allows the
instructions from the real path to update the program state. Up-
dates are controlled by a predicate that reflects the original program
branch condition and take the form of a constant-time conditional
assignment instruction (e.g., cmov on x86) [20]. When on a decoy
path, read/write operations get rewired to a single (conditionally as-
signed) shadow address. However, such decoy (shadow) data flows
can again introduce new side channels to leak the decoy nature of a
path [19, 20]. Moreover, this form of predication hampers the opti-
Session 3A: Side Channel CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea716mization process of the compiler, forcing the use of pervasive cmov
instructions and constraining code transformation and generation.
Some more recent solutions attempt to generate more optimized
code by allowing some [62] or all [80] accesses on unmodified
addresses on decoy paths. However, this hybrid strategy mimics
transactional execution behavior and is similarly vulnerable to side-
channel attacks that detect data-flow invariant violations on decoy
paths. In addition, existing solutions face the same compatibility
issues of transactional solutions with real-world code.
Unlike prior solutions, Constantine’s control-flow linearization
(CFL) executes both real and decoy paths using an indirect memory
addressing scheme to transparently target a shadow address along
decoy paths. This strategy does not force the compiler to use cmov
instructions and yields more efficient generated code. For instance,
a Constantine-instrumented wolfSSL binary contains only 39%
of cmov instructions (automatically emitted by the code generator,
as appropriate) compared to predicated execution, resulting in a
net CFL speedup of 32.9%. As shown later, the addition of data-
flow linearization (DFL) allows Constantine to operate further
optimizations, eliminating shadow address accesses altogether as
well as the corresponding decoy data flows. Constantine is also
compatible with all the common features in real-world programs,
including variable-length loops bound by means of just-in-time
linearization and indirect calls handled in tandem with DFL.
Data Flow. Data-dependent side channels have two leading causes
on modern microarchitectures. Some originate from instructions
that exhibit data operand-dependent latencies, e.g., integer divi-
sion [20] and some floating-point instructions [10] on x86. Simple
mitigations suffice here, including software emulation [11] (also
adopted by Constantine), compensation code insertion [19], and
leveraging hardware features to control latencies [20].
The other more fundamental cause stems from secret-dependent
data flows (e.g., an array accessed at an offset based on a crypto key
bit), which induce data accesses that microarchitectural attacks can
observe to leak secrets. Hardware-based mitigations [76] do not
readily apply to code running on commodity processors. To cope
with such leaks, existing compiler-based solutions have explored
code transformations [80] and software-based ORAM [53].
SC-Eliminator [80] transforms code to preload cache lines of
security-sensitive lookup tables, so that subsequent lookup op-
erations can result in always-hit cache accesses, and no secret-
dependent time variance occurs. Unfortunately, since the preload-
ing and the secret-dependent accesses are not atomic, a non-passive
adversary may evict victim cache lines right after preloading and
later observe the secret-dependent accesses with a cache attack.
Cloak [33] adopts a similar mitigation approach, but enforces atom-
icity by means of Intel TSX transactions. Nonetheless, it requires
manual code annotations and can only support short-lived com-
putations. Moreover, these strategies are limited to standard cache
attacks and do not consider other microarchitectural attacks, in-
cluding those that operate at the subcacheline granularity [48, 82].
Raccoon [53] uses Path ORAM (Oblivious RAM) [65] as a short-
cut to protect data flows from attacks. ORAMs let code conceal its
data access patterns by reshuffling contents and accessing multiple
cells at each retrieval [31]. Unfortunately, this strategy introduces
substantial run-time overhead as each security-sensitive data access
results in numerous ORAM-induced memory accesses.
Unlike prior solutions, Constantine’s data-flow linearization
(DFL) eliminates all the explicit secret-dependent data flows (gen-
erated by CFL or part of the original program) by forcing the corre-
sponding read/write operations to touch all their target memory
locations as computed by static points-to analysis. While such
analyses are known to largely overapproximate target sets on real-
world programs, Constantine relies on an aggressive function
cloning strategy to enable precise, context-sensitive points-to analy-
sis and strictly bound the number of possible targets. For instance, a
Constantine-instrumented wolfSSL binary using state-of-the-art
points-to analysis [68] yields an average number of target objects
at secret-dependent data accesses of 6.29 and 1.08 before and after
aggressive cloning (respectively), a net reduction of 83% resulting
in precise and efficient DFL. Unlike prior solutions that are limited
to array accesses, Constantine is also compatible with arbitrary
pointer usage in real-world programs.
3 THREAT MODEL
We assume a strong adversary able to run arbitrary code on the tar-
get machine alongside the victim program, including on the same
physical or logical core. The adversary has access to the source/bi-
nary of the program and seeks to leak secret-dependent compu-
tations via microarchitectural side channels. Other classes of side
channels (e.g., power [40]), software (e.g., external libraries/OS [14])
or hardware (e.g., transient execution [16, 58]) victims, and vulner-
abilities (e.g., memory errors or other undefined behaviors [74])
are beyond the scope of constant-time programming and subject
of orthogonal mitigations. We further make no restrictions on the
microarchitectural side-channel attacks attempted by the adversary,
ranging from classic cache attacks [52, 81] to recent contention-
based attacks [8, 32]. With such attacks, we assume the adversary
can observe the timing of arbitrary victim code/data accesses and
their location at the cache line or even lower granularity.
4 CONSTANTINE
This section details the design and implementation of Constan-
tine. We first outline its high-level workflow and building blocks.
4.1 Overview
Constantine is a compiler-based system to automatically harden
programs against microarchitectural side channels. Our lineariza-
tion design pushes constant-time programming to the extreme and
embodies it in two flavors:
(1) Control Flow Linearization (CFL): we transform program
regions influenced by secret data to yield secret-invariant
instruction traces, with real and decoy parts controlled by a