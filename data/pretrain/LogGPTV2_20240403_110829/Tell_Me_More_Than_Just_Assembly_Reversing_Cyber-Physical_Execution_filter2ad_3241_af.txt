(cid:35)
(cid:38)
(cid:35)
(cid:33)
(cid:36)
(cid:38)
(cid:36)
(cid:33)
(cid:37)
(cid:38)
(cid:37)
(cid:33)
(cid:38)
(cid:38)
(cid:38)
(cid:33)
(cid:39)
(cid:38)
(cid:39)
(cid:33)
(cid:40)
(cid:38)
(cid:40)
(cid:33)
(cid:41)
(cid:38)
(cid:41)
(cid:33)
(cid:32)
(cid:33)
(cid:6)(cid:11)(cid:14)(cid:9)(cid:1)(cid:26)(cid:18)(cid:27)
Fig. 10: Modiﬁed gain parameter of the controller causes the crash.
would be to modify and expand the value range to also include
unsafe values. Additionally, an attacker can utilize MISMO
to ﬁgure out the location of Kp and modify its value. We
implemented the latter attack.
To protect
We developed an exploit to target the control parameter
(steering wheel degree) value in order to keep the controller
computation output out of range. After a few seconds, the
car keeps traveling in a circle. The ﬁgure shows that the car
proceeds to veer off the road. We also traced the change of
cross track error (CTE) value, which is the lateral distance
between the car and the reference trajectory (see Figure 10).
the controller software against such targeted
memory data attacks, MISMO determines the low-level binary
variables, register or memory address, represents the critical
high-level control gains in the binary code. To prevent the
attacker from modifying these critical control gains, one can
take one or more of the several possible countermeasures
such as dynamic monitoring the value on these memory
location, or isolation of these critical control gains by memory
isolation [30] and binary rewriting [31].
VI. RELATED WORK
Binary reverse engineering. The existing advanced tools,
e.g., IDA Pro [28], Boomerang [22] and OllyDbg [3] offer
a variety of techniques to help elevate low-level machine
code to higher level assembly instructions. Snowman [5]
can provide native code to C/C++ decompilation. However,
these tools do not provide an automated means of deriving
the high-level algorithmic semantics, leaving the analyst with
the responsibility of ﬁnding semantic and domain-speciﬁc
information. Phoenix [46] provides semantic-preserving struc-
tural decompilation analysis. TOP [58] reconstructs program
source code from execution traces. Unlike decompilation that
statically transforms a piece of binary code, TOP dynamically
359
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
translates it with more runtime information and generates
reusable software components. However, TOP cannot ensure
semantic recovery for controller algorithms as it cannot ﬁll
the semantic gap between the recovered source code and the
corresponding abstract algorithmic concepts, i.e., parameters
and mathematical operations. Binary reverse engineering tech-
niques [18], [36], [35], [49], [53] can extract data types from
binaries accurately. The recent work [36], [53] recover only the
information that comes from the semantics of system call pa-
rameters. Although type information is useful in binary reverse
engineering, it still does not provide high-level algorithm-level
semantics about the binary code and data segments.
Low-level similarity checking. A plethora of CFG-based code
similarity algorithms have been previously proposed [32], [50],
[55], but there has been no work on comparing low-level
binary instructions to high-level mathematical algorithmic
expressions. Differential testing introduces an effective way of
discovering low-level differences between independent imple-
mentations with similar intended functionality. BINDIFF [19],
[25] has been widely used and has established a reputation
of being the industry standard for binary difﬁng. BINDIFF
starts by recovering the control ﬂow graphs (CFGs) of two
binaries and uses heuristic to normalize and match the ver-
tices from the two graphs. BINJUICE [34] extracts syntactic
equations from basic blocks to measure similarity between two
basic blocks. BLEX [21] uses a dynamic approach for binary
code search. The search depends on the two similar codes
having syntactically similar low-level execution behavior. Xu
, et al.
[56] leverage neural networks to ﬁnd similarities
among executables based on graph-theoretic analysis of their
control ﬂow graphs. For our problem, one major issue with
the aforementioned solutions is that most controller software
have custom implementations of the associated algorithms.
Hence, directly comparing a compiled implementation of an
algorithm with a separate implementation will be fruitless
across different implementations.
VII. CONCLUSIONS
We presented MISMO, a general framework to extract
semantic information of an embedded ﬁrmware binaries with
respect
to its associated high-level control algorithm. We
evaluated MISMO on 2,263 commercial ﬁrmware binaries by
30 industry vendors from 6 real-world cyber-physical IoT
application domains. We were able to extract their semantic
information with respect to the algorithm. We utilized MISMO
to discover a zero-day vulnerability in the most recent Linux
Kernel, and provided ﬁne-grained protection of sensitive data
on a self-driving automobile application.
ACKNOWLEDGMENTS
We appreciate Ofﬁce of Naval Research (ONR) and Na-
tional Science Foundation (NSF) for their support of our
project.
REFERENCES
[1] “Clang static analyzer; available at http://clang-analyzer.llvm.org/.”
[2] “Dataﬂowsanitizer;
http://clang.llvm.org/docs/
available
at
DataFlowSanitizerDesign.html.”
[3] “Ollydbg; available at http://www.ollydbg.de.”
360
[4] “A simulink model to learn the kalman ﬁlter for gaussian processes;
available at http://www.mathworks.com.”
[5] “Snowman: A native code to c/c++ decompiler; available at http:
//derevenets.com/.”
[6] M. Abadi, M. Budiu,
´U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity principles, implementations, and applications,” ACM Transac-
tions on Information and System Security (TISSEC), vol. 13, no. 1, p. 4,
2009.
[7] K. Angrishi, “Turning internet of things (iot) into internet of vulnera-
bilities (iov): Iot botnets,” arXiv preprint arXiv:1702.03681, 2017.
[8] M. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein,
J. Cochran, Z. Durumeric, J. A. Halderman, L. Invernizzi, M. Kallitsis
et al., “Understanding the mirai botnet,” in USENIX Security Symposium,
2017, pp. 1092–1110.
[9] F. Bellard, “Qemu, a fast and portable dynamic translator.” in USENIX
Annual Technical Conference, FREENIX Track, 2005, pp. 41–46.
[10] C. Cadar, D. Dunbar, D. R. Engler et al., “Klee: Unassisted and auto-
matic generation of high-coverage tests for complex systems programs.”
in OSDI, vol. 8, 2008, pp. 209–224.
[11] A. A. Cardenas, S. Amin, and S. Sastry, “Secure control: Towards
survivable cyber-physical systems,” in 2008 The 28th International
Conference on Distributed Computing Systems Workshops.
IEEE, 2008,
pp. 495–500.
[12] O. Certik et al., “Sympy python library for symbolic mathematics,”
2008.
[13] B. Chen, X. Liu, H. Zhao, and J. C. Pr´ıncipe, “Maximum correntropy
kalman ﬁlter,” Automatica, vol. 76, pp. 70–77, 2017.
[14] E. Chien, L. OMurchu, and N. Falliere, “W32.Duqu - The precursor to
the next Stuxnet,” Symantic Security Response, Tech. Rep., 2011.
[15] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: A platform for in-
vivo multi-path analysis of software systems,” ACM SIGPLAN Notices,
vol. 46, no. 3, pp. 265–278, 2011.
[16] H. Choi, W.-C. Lee, Y. Aafer, F. Fei, Z. Tu, X. Zhang, D. Xu, and
X. Xinyan, “Detecting attacks against robotic vehicles: A control invari-
ant approach,” in Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2018, pp. 801–816.
[17] V. Costan and S. Devadas, “Intel sgx explained.” IACR Cryptology ePrint
Archive, vol. 2016, no. 086, pp. 1–118, 2016.
[18] A. Cozzie, F. Stratton, H. Xue, and S. T. King, “Digging for data
structures.” in OSDI, vol. 8, 2008, pp. 255–266.
[19] T. Dullien and R. Rolles, “Graph-based comparison of executable objects
(english version),” SSTIC, vol. 5, pp. 1–3, 2005.
[20] C. Eagle, The IDA pro book: the unofﬁcial guide to the world’s most
popular disassembler. No Starch Press, 2011.
[21] M. Egele, M. Woo, P. Chapman, and D. Brumley, “Blanket execution:
Dynamic similarity testing for program binaries and components.” in
Usenix Security, 2014, pp. 303–317.
[22] M. Emmerik and T. Waddington, “Using a decompiler for real-world
source recovery,” in Reverse Engineering, 2004. Proceedings. 11th
Working Conference on.
IEEE, 2004, pp. 27–36.
[23] F-Secure Labs, “BLACKENERGY and QUEDAGH: The convergence
of crimeware and APT attacks,” 2016.
[24] N. Falliere, L. O. Murchu, and E. Chien, “W32. stuxnet dossier,” White
paper, Symantec Corp., Security Response, vol. 5, no. 6, p. 29, 2011.
[25] H. Flake, “Structural comparison of executable objects,” DIMVA 2004,
July 6-7, Dortmund, Germany, 2004.
[26] L. Garcia and S. A. Zonouz, “Hey, my malware knows physics! attacking
plcs with physical model aware rootkit,” 2017.
[27] M. Gowda, J. Manweiler, A. Dhekne, R. R. Choudhury, and J. D. Weisz,
“Tracking drone orientation with multiple gps receivers,” in Proceedings
of the 22nd Annual International Conference on Mobile Computing and
Networking. ACM, 2016, pp. 280–293.
[28] Hex-Rays, “Ida pro disassembler; available at http://wiki.ros.org/ros
arduino bridge.”
[29] A. P. M. Hinkkanen, “Protecting an industrial ac drive application against
cyber sabotage,” Ph.D. dissertation, Aalto University, 2013.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
[52] S. Subramanian, M. Berzish, V. Ganesh, and O. Tripp, “A solver for a
theory of string and bit-vectors,” in Proceedings of the 39th International
Conference on Software Engineering Companion.
IEEE Press, 2017,
pp. 124–126.
[53] P. Sun, R. Han, M. Zhang, and S. Zonouz, “Trace-free memory
data structure forensics via past
inference and future speculations,”
in Proceedings of the 32nd Annual Conference on Computer Security
Applications. ACM, 2016, pp. 570–582.
[54] TechNavio.
industrial
control
(2014) Global
(ics)
security market 2014-2018. https://www.marketresearchreports.com/
technavio/global-industrial-control-systems-ics-security-market%C2%
A02014-2018.
systems
[55] M. Vujoˇsevi´c-Janiˇci´c, M. Nikoli´c, D. Toˇsi´c, and V. Kuncak, “Software
veriﬁcation and graph similarity for automated evaluation of students
assignments,” Information and Software Technology, vol. 55, no. 6, pp.
1004–1016, 2013.
[56] X. Xu, C. Liu, Q. Feng, H. Yin, L. Song, and D. Song, “Neural network-
based graph embedding for cross-platform binary code similarity detec-
tion,” arXiv preprint arXiv:1708.06525, 2017.
[57] O. Yuschuk, “Ollydbg,” 2007.
[58] J. Zeng, Y. Fu, K. A. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation
resilient binary code reuse through trace-oriented programming,” in
Proceedings of the 2013 ACM SIGSAC conference on Computer &
communications security. ACM, 2013, pp. 487–498.
APPENDIX
Figure 11 shows a high-level Simulink [48] block diagram
of the algorithm.
(cid:7)
(cid:23)
(cid:8)
(cid:1)
(cid:29)(cid:28)(cid:14)(cid:23)
(cid:29)
(cid:15)(cid:28)(cid:14)(cid:23)
(cid:15)
(cid:20)
(cid:20)
(cid:30)(cid:28)(cid:14)(cid:23)
(cid:30)(cid:8)
(cid:23)(cid:14)(cid:28)(cid:30)(cid:3)
(cid:30)(cid:3)
(cid:30)(cid:28)(cid:14)(cid:23)
(cid:30)
(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:18)(cid:1)
(cid:4)(cid:28)(cid:14)(cid:23)
(cid:4)
(cid:7)
(cid:1)(cid:8)
(cid:1)(cid:2)(cid:1)(cid:3)
(cid:21)(cid:18)(cid:13)(cid:22)(cid:12)(cid:9)
(cid:21)(cid:23)(cid:17)(cid:13)(cid:12)(cid:24)(cid:17)(cid:1)
(cid:8)
(cid:9)
(cid:5)
(cid:4)(cid:5)(cid:4)(cid:3)
(cid:4)(cid:28)(cid:14)(cid:23)
(cid:4)(cid:8)
(cid:23)(cid:14)(cid:28)(cid:4)(cid:3)
(cid:4)(cid:3)
(cid:5)(cid:4)(cid:3)
(cid:19)
(cid:19)
(cid:4)(cid:5)
(cid:4)(cid:28)(cid:14)(cid:23)
(cid:4)(cid:7)
(cid:21)(cid:18)(cid:13)(cid:22)(cid:12)(cid:9)
(cid:21)(cid:23)(cid:17)(cid:13)(cid:12)(cid:24)(cid:17)(cid:1)
(cid:25)(cid:11)(cid:26)
(cid:15)(cid:12)(cid:26)(cid:12)(cid:27)(cid:16)
(cid:6)
Fig. 11: High-level block diagram of a sample embedded CPS control
algorithm (Kalman ﬁlter). MISMO will map algorithmic logic and
parameters of the diagram to their corresponding binary-level control
ﬂows and memory variables, respectively.
[30] C. H. Kim, T. Kim, H. Choi, Z. Gu, B. Lee, X. Zhang, and D. Xu,
“Securing real-time microcontroller systems through customized mem-
ory view switching,” in Network and Distributed Systems Security
Symp.(NDSS), 2018.
[31] T. Kim, C. H. Kim, H. Choi, Y. Kwon, B. Saltaformaggio, X. Zhang, and
D. Xu, “Revarm: A platform-agnostic arm binary rewriter for security
applications,” in Proceedings of the 33rd Annual Computer Security
Applications Conference. ACM, 2017, pp. 412–424.
[32] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna, “Poly-
morphic worm detection using structural information of executables,”
in International Workshop on Recent Advances in Intrusion Detection.
Springer, 2005, pp. 207–226.
[33] C. Kwon, W. Liu, and I. Hwang, “Security analysis for cyber-physical
systems against stealthy deception attacks,” in American Control Con-
ference (ACC), 2013.
IEEE, 2013, pp. 3344–3349.
[34] A. Lakhotia, M. D. Preda, and R. Giacobazzi, “Fast location of similar
code fragments using semantic’juice’,” in Proceedings of the 2nd ACM
SIGPLAN Program Protection and Reverse Engineering Workshop.
ACM, 2013, p. 5.
[35] J. Lee, T. Avgerinos, and D. Brumley, “Tie: Principled reverse engineer-
ing of types in binary programs.” in NDSS, 2011.
[36] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” 2010.
[37] Y. Mo, E. Garone, A. Casavola, and B. Sinopoli, “False data injection
attacks against state estimation in wireless sensor networks,” in Decision
and Control (CDC), 2010 49th IEEE Conference on.
IEEE, 2010, pp.
5967–5972.
[38] M. Muench, D. Nisi, A. Francillon, and D. Balzarotti, “Avatar 2: A multi-
target orchestration platform,” in Workshop on Binary Analysis Research
(colocated with NDSS Symposium)(February 2018), BAR, vol. 18, 2018.
[39] E. Network and I. S. A. (ENISA). (2011) Protecting industrial control
systems recommendations for Europe and Member States. https://www.
enisa.europa.eu/.
[40] Quarkslab, “Lief: library for instrumenting executable ﬁles; available at
https://lief.quarkslab.com/,” 2017-2018.
[41] M. D. Raj, I. Gogul, M. Thangaraja, and V. S. Kumar, “Static gesture
recognition based precise positioning of 5-dof robotic arm using fpga,”
in Trends in Industrial Measurement and Automation (TIMA), 2017.
IEEE, 2017, pp. 1–6.
[42] D. Rescue, “Ida pro disassembler,” 2006.
[43] J. Rrushi, H. Farhangi, C. Howey, K. Carmichael, and J. Dabell, “A
quantitative evaluation of the target selection of havex ics malware
plugin,” in Industrial Control System Security (ICSS) Workshop, 2015.
[44] B. Saltaformaggio, Z. Gu, X. Zhang, and D. Xu, “Dscrete: Automatic
rendering of forensic information from memory images via application
logic reuse.” in USENIX Security Symposium, 2014, pp. 255–269.
[45] A. L. Sangeetha, B. Naveenkumar, A. B. Ganesh, and N. Bharathi,
“Experimental validation of pid based cascade control system through
scada–plc–opc and internet architectures,” Measurement, vol. 45, no. 4,
pp. 643–649, 2012.
[46] E. J. Schwartz, J. Lee, M. Woo, and D. Brumley, “Native x86 decompila-
tion using semantics-preserving structural analysis and iterative control-
ﬂow structuring,” in Proceedings of the USENIX Security Symposium,
vol. 16, 2013.
[47] D. Shelar, P. Sun, S. Amin, and S. Zonouz, “Compromising security
of economic dispatch in power system operations,” in Dependable Sys-
tems and Networks (DSN), 2017 47th Annual IEEE/IFIP International
Conference on.
IEEE, 2017, pp. 531–542.
[48] M. Simulink, “Simulation and model-based design,” 2005.
[49] A. Slowinska, T. Stancescu, and H. Bos, “Howard: A dynamic excavator
for reverse engineering data structures.” in NDSS, 2011.
[50] O. Sokolsky, S. Kannan, and I. Lee, “Simulation-based graph similarity,”
in International Conference on Tools and Algorithms for the Construc-
tion and Analysis of Systems. Springer, 2006, pp. 426–440.
[51] W. Starbuck and M. Farjoun, Organization at the limit: Lessons from
the Columbia disaster.
John Wiley & Sons, 2009.
361
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply.