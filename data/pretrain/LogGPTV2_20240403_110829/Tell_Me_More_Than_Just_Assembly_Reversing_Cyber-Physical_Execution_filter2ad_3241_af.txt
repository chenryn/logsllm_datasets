### Figure 10: Modified Gain Parameter of the Controller Causes a Crash

Modifying and expanding the value range to include unsafe values can lead to a crash. An attacker can use MISMO to locate the \( K_p \) (proportional gain) parameter and modify its value. We implemented this attack, which targets the control parameter (steering wheel degree) to keep the controller's computation output out of range. After a few seconds, the car begins to travel in a circle and eventually veers off the road. The figure shows the cross-track error (CTE), which is the lateral distance between the car and the reference trajectory.

### Protecting the Controller Software

To protect the controller software against such targeted memory data attacks, MISMO identifies the low-level binary variables, registers, or memory addresses that represent critical high-level control gains. To prevent an attacker from modifying these critical control gains, several countermeasures can be employed, such as dynamically monitoring the values at these memory locations, isolating these critical control gains through memory isolation [30], and using binary rewriting [31].

### VI. Related Work

#### Binary Reverse Engineering

Advanced tools like IDA Pro [28], Boomerang [22], and OllyDbg [3] offer techniques to elevate low-level machine code to higher-level assembly instructions. Snowman [5] can decompile native code to C/C++. However, these tools do not provide automated means to derive high-level algorithmic semantics, leaving the analyst responsible for finding semantic and domain-specific information. Phoenix [46] provides semantic-preserving structural decompilation analysis, while TOP [58] reconstructs program source code from execution traces. Unlike decompilation, TOP dynamically translates with more runtime information and generates reusable software components. However, TOP cannot ensure semantic recovery for controller algorithms due to the gap between recovered source code and abstract algorithmic concepts. Techniques [18], [36], [35], [49], [53] can accurately extract data types from binaries, but they do not provide high-level algorithmic semantics about the binary code and data segments.

#### Low-Level Similarity Checking

Various control flow graph (CFG)-based code similarity algorithms have been proposed [32], [50], [55], but none compare low-level binary instructions to high-level mathematical algorithmic expressions. Differential testing is effective for discovering low-level differences between independent implementations with similar functionality. BINDIFF [19], [25] is widely used for binary diffing, starting by recovering the CFGs of two binaries and using heuristics to normalize and match vertices. BINJUICE [34] extracts syntactic equations from basic blocks to measure similarity. BLEX [21] uses a dynamic approach for binary code search, relying on similar low-level execution behavior. Xu et al. [56] leverage neural networks to find similarities among executables based on graph-theoretic analysis of their CFGs. For our problem, most controller software has custom implementations, making direct comparison across different implementations fruitless.

### VII. Conclusions

We presented MISMO, a general framework to extract semantic information from embedded firmware binaries with respect to their associated high-level control algorithms. We evaluated MISMO on 2,263 commercial firmware binaries from 30 industry vendors across six real-world cyber-physical IoT application domains. We were able to extract their semantic information and utilized MISMO to discover a zero-day vulnerability in the most recent Linux Kernel. We also provided fine-grained protection of sensitive data in a self-driving automobile application.

### Acknowledgments

We appreciate the support of the Office of Naval Research (ONR) and the National Science Foundation (NSF) for our project.

### References

[1] "Clang static analyzer; available at http://clang-analyzer.llvm.org/."
[2] "DataflowSanitizer; available at http://clang.llvm.org/docs/DataFlowSanitizerDesign.html."
[3] "Ollydbg; available at http://www.ollydbg.de."
...
[58] J. Zeng, Y. Fu, K. A. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation resilient binary code reuse through trace-oriented programming,” in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013, pp. 487–498.

### Appendix

Figure 11 shows a high-level Simulink [48] block diagram of the algorithm. MISMO will map the algorithmic logic and parameters of the diagram to their corresponding binary-level control flows and memory variables, respectively.

[Additional references and figures as needed]

---

This version of the text is more organized, coherent, and professional, with clear headings and structured paragraphs.