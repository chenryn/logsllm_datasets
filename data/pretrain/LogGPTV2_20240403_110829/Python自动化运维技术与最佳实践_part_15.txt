0isconnecting from 192.168.1.21..dong
图7-1程序执行结果
其中，fab命令引l用默认文件名为fabfile.py，如果使用非默认文件名称，则需通过“-f”
来指定，如：fab -H SN2013-08-021,SN2013-08-022 -f host_type-py host_type。 如果管理机与
目标主机未配置密钥认证信任，将会提示输人目标主机对应账号登录密码。
7.2fab的常用参数
fab作为Fabric程序的命令行入口，提供了丰富的参数调用，命令格式如下：
fab (options) [1argl, arg2=va12, host=foo, hosts=′h1/h2*,..*] -*
下面列举了常用的儿个参数，更多参数可使用fab-help查看。
口1，显示定义好的任务函数名：
---
## Page 114
第7章系统批量运维管理器Fabric详解93
-f，指定fab人口文件，默认人口文件名为 fabfile.py；
口-g，指定网关（中转）设备，比如堡垒机环境，填写堡垒机IP即可；
口-H，指定目标主机，多台主机用“、”号分隔；
口-P，以异步并行方式运行多主机任务，默认为串行运行；
口-R，指定role（角色），以角色名区分不同业务组设备；
口4，设置设备连接超时时间（秒）；
口-T，设置远程主机命令执行超时时间（秒）；：
-W，当命令执行失败，发出告警，面非默认中止任务。
有时候我们甚至不需要写一行Python代码也可以完成远程操作，直接使用命令行的形
式，例如：
8- 0ueun. -- 22*1*891261*12*1*891*26 8- (8 199cup9y d qe 4
命令运行结果见图7-1。
7.3fabfile的编写
fab命令是结合我们编写的fabile.py（其他文件名须添加-f filename 引用）来搭
192.168.1.21,192.168.1.22”，我们可以通过定义env.hosts 来实现，如“env.hosts 一[192.168.1
21192.168.1.22T。fabile的主体由多个自定义的任务函数组成，不同任务函数实现不同的操
作逻辑，下面详细介绍。
7.3.1全局属性设定
evn对象的作用是定义fabfile的全局设定，支持多个属性，包括目标主机、用户、密码、
角色等，各属性说明如下：
env.host，定义目标主机，可以用IP或主机名表示，以Python 的列表形式定义，如
env.hosts=[°192.168.1.21','192.168.1.22] 
 env.exclude_hosts，排除指定主机。如l env.exclude_hosts=[192.168.1.22]。
env.user，定义用户名，如 env,user=root”。
env.port，定义目标主机端口，默认为22，如env.port-"22"。
 env.password，定义密码，如 env.password=KSJ3548t7d。
口env.passwords，与 password 功能一样，区别在于不同主机不同密码的应用场景，需要
注意的是，配置passwords时需配置用户、主机、端口等信息，如：
---
## Page 115
94第二部分高级篇
} - spxoxssed*aue
*root8192.168.1.21:22*: *sJk348ygd*,
*PI:EMAIL:22*: *ksh458j4f*,
'root9192.168.1.23:22*: *xsdu43598*
env.gateway，定义网关（中转、堡垒机） IP，如 env.gateway=“192.168.1.23”。
env.deploy_release_dir，自定义全局变量，格式：env.+“变量名称"，如env.deploy_
release_dir、env.age、cnv.sex 等。
env.roledefs，定义角色分组，比如 web组与db组主机区分开来，定义如下：
env.roledefs = (
*vebservers′: [*192.168.1.21*, *192.168,1.22*, *192.1681.23', *192.168.1.24*],
dbservers′ : [*192.168.1.25′, *192.168.1.26′]
引用时使用Python修饰符的形式进行，角色修饰符下面的任务函数为其作用域，下面
来看-个示例：
def webtask () :
run(*/etc/init,d/nginx start*)
@roles (*dbservers′)
def dbtask () :
run (*/etc/init.d/mysql start*)
@roles (*webservers′, *dbservers′)
def pubclitask()1
{,9wdn,) unx
def deploy(}:
(xsesqat atnoaxa
execute (dbtask)
在命令行执行#fabdeploy就可以实现不同角色执行不同的任务函数了。
7.3.2常用API
Fabric提供了一组简单但功能强大的fabric.api命令集，简单地调用这些API就能完成大
部分应用场景需求。Fabric支持常用的方法及说明如下：
local，执行本地命令，如：local(uname-s）；
led，切换本地目录，如：lcd（/home)；
cd，切换远程目录，如：cd（/data/logs）);
run，执行远程命令，如：rum(free-m);
---
## Page 116
第7章系统批量运维管理器Fabric详解95
sudo，sudo方式执行远程命令，如：sudo(/etc/init.d/httpd start'）；
put，上传本地文件到远程主机，如：put（/home/user.info’，/data/user.info）；
get，从远程主机下载文件到本地，如：get（/data/user.info'，/home/root.info）：
prompt，获得用户输入信息，如：promptplease inputuser password:)；
confirm，获得提示信息确认，如：confirm(Tests failed.Continue[Y/N]？");
reboot，重启远程主机，如：rebootO；
口@task，函数修饰符，标识的函数为fab可调用的，非标记对fab不可见，纯业务逻辑；
口@runs_once，函数修饰符，标识的函数只会执行一次，不受多台主机影响。
下面结合一些示例来帮助大家理解以上常用的API。
7.3.3示例1：查看本地与远程主机信息
本示例调用localO方法执行本地（主控端）命令，添加“@runs_once”修饰符保证该任
务函数只执行一次。调用runO方法执行远程命令。详细源码如下：
 /home/test/fabric/simple1.py ]
1/usz/bin/env python
from fabric-api import *
env, h0sts=[*192.168.1.21*, *192.168 .1.22']
env,user=′root'
4Fc6x, =pxoaeeed ·Aue
gruns_once
查看本地系统信息，当有多台主机时只运行一次
def local_task () :
local (*uname =a*)
+本地任务酒数
Gef renote_task() : 
vith cd(*/data/1ogs*) : 
“with”的作用是证后面的表选式的语句继承当前状态，实现
run (*1s -1*)
_I-sT s6ot/eep/ po
通过fab命令分别调用 local_task任务函数运行结果如图7-2所示。
图7-2调用local_task任务函数运行结果
结果中显示了“[192.168.1.21] Executing task“local_task'"，但事实上并非在主机
192.168.1.21上执行任务，面是返回Fabric主机本地“uname-a”的执行结果。
网用remote_task任务函数的执行结果如图7-3所示。
---
## Page 117
96第二部分高级篇
197.1E.1.21 ot
1-
ing from 292.3.1.21
图7-3调用remote_task任务函数运行结果
7.3.4示例2：动态获取远程目录列表
符接收用户输入，最后调用worktaskO任务函数实现远程命令执行：详细源码如下：
[ /home/test/fabric/simple2.py 1
1/usr/bin/env python
from fabric.api import *
env-user=*root ′
env.ho8ts=[*192 . 168.1 .21′ , *192 168 .1 . 22*]
4+c69. =PxoggedAue
@runs_once
主机流历过程中。有第一台航发元函数
: ()xex“ndut gep
def wozktask (dirname) : 
run(*1s -1 "+dirnane)
etask累定只有go函数对fab 命令可见
def go () :
（）nxnduT -upuxtpob
worktask(getdirname)
该示例实现了一个动态输人远程目录名称，再获取目录列表的功能，由于我们只要求输
人一次，再显示所有主机上该目录的列表信息，调用了一个子函数input_rawO同时配置@
runs_once 修饰符来达到此目的。
执行结果如图7-4所示。
---
## Page 118
第7章系统批量运维管理器Fabric详解97
2913
2013v.1
图7-4程序运行结果
7.3.5示例3：网关模式文件上传与执行
本示例通过Fabric的cnv对象定义网关模式，即俗称的中转、堡垒机环境。定义格式为
env.gateway='192.168.1.23"”，其中IP“192.168.1.23”为堡垒机IP，再结合任务函数实现目
标主机文件上传与执行的操作，详细源码如下：
[ /home/test/fabric/simple3.py 1
1/usr/bin/env python
from fabric.ap1 inport *
from fabric.context_managers Lmport *
from fabric.contrib.console import confirn
,3001,=2esn*aue
env, gateway=*192.168 .1.23*
+定义堡垒机IP，作为文件上传、执行的中转设备
env,hosts=[*192.168.1.21*, *192.168.1.22′]
假如所有主机害码都不一样，可以通过env.passwords字典变量一一指定
env.passvords = {
*root@192.168.1,21:22*: *1Ks934h3′,
*root8192,168.1.22:22*: *LKs934h3′,
*PI:EMAIL:22*: *017384hg6′
堡垒机账号信息
1packpath=*/home/ Lnsta11/1rmp0 9,tar,gz*
本地安装包路径
rpackpath=*/tmp/insta11"
远程安装包路径
Btask
def put_task() :
(TTesuT/du/ d- xTpwμ) unx
---
## Page 119
98第二部分高级篇
vith settings (varn_only=True) :
result = put(1packpath,rpackpath)
上传安装包
if result.failed and not confirm("put file failed, Continue[Y/N]?*):
8task
def run_task() :
执行选程命令，安装1nmp环境
1（Tu/d/）po
run ("tar -zxvf 1nmp0.9.tar.gz")
vith cd(1nmp0.9/"):
使用with继续继承/tmp/1nstal1目录位置状态
run (*./centos.sh*)
8task
: () ob gap
上传、安装组合
put_task ()
run_task ()
示例通过简单的配置env.gateway=192.168.1.23'就可以轻松实现堡垒机环境的文件上传
及执行，相比paramiko的实现方法简洁了很多，编写的任务函数完全不用考虑堡垒机环境，
配置 env.gateway 即可。
7.4Fabric应用示例
下面介绍三个比较典型的应用Fabrie的示例，涉及文件上传与校验、环境部署、代码发
布的功能，读者可以在此基础进行功能扩展，写出更加贴近业务场景的工具平台。
7.4.1示例1：文件打包、上传与校验
我们时常做一些文件包分发的工作，实施步骤一般是先压缩打包，再批量上传至目标服
务器，最后做一致性校验。本案例通过putO方法实现文件的上传，通过对比本地与远程主
机文件的md5，最终实现文件一致性校验。详细源码如下：
[ /home/test/fabric/simple4.py 1
1/usr/bin/env python
fron fabric.api inport *
fron fabric.contrib.console inport confirm
from fabric.context_managers import *
env.user='root*
env-ho8ts=['192.168.1.21′, *192.168.1.22*]
env-passuord=*LKs934jh3*
gtask
---
## Page 120
第7章系统批量运维管理器Fabric详解99
eruns_once
def tar_task():
本地打包任务函数，只限执行一次
vith 1cd("/data/1ogs*) :
local (*tar =czf acceas.tar.gz access.log*)
def put_task() :
etask
(μsfot/erep/ d- xtpxw_)un.x
上传文件任务函数
vith cd(*/data/1ogs*) :
with settings (warn_only=True):
put（上传）出现异常时继续执行，非终止
result = put (*/data/logs/access,tar gz", */data/logs/access.tar,gz")
if result.failed and not confirm(°put file failed, Continue[Y/N]?*) :
(ixse 4nd otg 6utaaoqv_)xoqe
出现异常时，确认用户是否继续，（Y继续）
etask
def check_task() :
校验文件任务治数
vith settings (varn_only=True) 1
本地 loca1 命令需要配置 capture=True 才能摧获域团值
1md5=1ocal ("md5sum /data/1ogs/access,tar,gz*, capture=True) -sp1it (* *) [0]
rmd5=run (*nd5sum /data/1ogs/access.tar-gz*) -split (* *) [0]
if 1md5==rmd5:
对比本地及选程文件md5 信息
else:
print *ox*
print *ERROR*
本示例通过定义三个功能任务函数，分别实现文件的打包、上传、校验功能，且三个功
能相互独立，可分开运行，如：
fab -f simple4.py tar_ta8k
fab -f simple4.py put_task 
文件打包
fab -f simple4.py check_task文件校
文件上传
当然，我们也可以组合在一起运行，再添加一个任务函数g0，代码如下：
8task
: () ob gap
tar_task()
put_task ()
check_task ()
运行fab-f simple4.py go 就可以实现文件打包、上传、校验全程自动化。
7.4.2示例2：部署LNMP业务服务环境
业务上线之前最关键的一项任务便是环境部署，往往一个业务涉及多种应用环境，比如
Web、DB、PROXY、CACHE等，本示例通过envroledefs 定义不同主机角色，再使用“@
roles(webservers)”修饰符绑定到对应的任务函数，实现不同角色主机的部署差异，详细源
---
## Page 121
100第二部分高级篇
码如下：
[/home/test/fabric/simple5.py ]
#1/usr/bin/env python
fron fabrie,colors import *
from fabric.api import *
env.user='root'
env-roledefs = (
*vebservers′: [*192.168.1.21*, *192.168.1.22*],
+定义业务角色分组
*dbservers*: [*192.168.1.23*]
env-passwords = [
*root8192.168.1.21:22': *SJk348ygd*,
*roote192.168.1.22:22': *Ksh458)4f*,
*PI:EMAIL:22' : *KSdu43598*
webtask任务函数引用·webservers*角色侈饰排
def xebtask () :
部署 nginx php php-fpm 等环境
print yel1ov (*Instal1 nginx php php-fpm..,*)
vith settings (warn_only=True) :
(μxurbu TTeqsu - um_)un2
run (°yum y insta11 php-fpm php-mysq] php=mbstring php=xml php=mcrypt php=gd°)
run (*chkconfig --1evels 235 php-fpn on*)
(_uo xubu c see- buooxg)un1
Broles (*dbservers*)
dbtask任务函数引用·dbservers·角色够饰持
def dbtask() :部署 mysq1 环境
(_***rbeAw teeu_) noTto qutad
vith settings (warn_only=True) :
(xeuzee-{beAw bs/u 1reguT - um.) un