[]{#index.html}
::: book
::: titlepage
::: producttitle
[Red Hat Enterprise Linux]{.productname} [9]{.productnumber}
:::
# []{#index.html#idm139895588181408}管理文件系统 {.title}
## 在 Red Hat Enterprise Linux 9 中创建、修改和管理文件系统 {.subtitle}
::: abstract
**摘要**
本文档集合提供了如何有效管理 Red Hat Enterprise Linux 9
中的文件系统的说明。
:::
------------------------------------------------------------------------
:::
:::
[]{#making-open-source-more-inclusive.html}
::: preface
::: titlepage
# []{#making-open-source-more-inclusive.html#making-open-source-more-inclusive}让开源更具包容性 {.title}
:::
红帽致力于替换我们的代码、文档和 Web
属性中存在问题的语言。我们从这四个术语开始：master、slave、黑名单和白名单。由于此项工作十分艰巨，这些更改将在即将推出的几个发行版本中逐步实施。详情请查看
[CTO Chris Wright
的信息](https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language){.link}。
:::
[]{#proc_providing-feedback-on-red-hat-documentation_managing-file-systems.html}
::: preface
::: titlepage
# []{#proc_providing-feedback-on-red-hat-documentation_managing-file-systems.html#proc_providing-feedback-on-red-hat-documentation_managing-file-systems}对红帽文档提供反馈 {.title}
:::
我们感谢您对文档提供反馈信息。请让我们了解如何改进文档。
::: itemizedlist
-   关于特定内容的简单评论：
    ::: orderedlist
    1.  请确定您使用 [*Multi-page HTML*]{.emphasis}
        格式查看文档。另外，确定 [**Feedback**]{.strong}
        按钮出现在文档页的右上方。
    2.  用鼠标指针高亮显示您想评论的文本部分。
    3.  点在高亮文本上弹出的 [**Add Feedback**]{.strong}。
    4.  按照显示的步骤操作。
    :::
:::
::: itemizedlist
-   要通过 Bugzilla 提交反馈，请创建一个新的问题单：
    ::: orderedlist
    1.  进入
        [Bugzilla](https://bugzilla.redhat.com/enter_bug.cgi?product=Red%20Hat%20Enterprise%20Linux%209){.link}
        网站。
    2.  在 Component 中选择 [**Documentation**]{.strong}。
    3.  在 [**Description**]{.strong}
        中输入您要提供的信息。包括文档相关部分的链接。
    4.  点 [**Submit Bug**]{.strong}。
    :::
:::
:::
[]{#assembly_overview-of-available-file-systems_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#assembly_overview-of-available-file-systems_managing-file-systems}第 1 章 可用文件系统概述 {.title}
:::
由于大量的可用选项以及所涉及的权衡，因此选择适合您应用程序的文件系统是一个重要的决定。本章论述了
Red Hat Enterprise Linux 9
附带的一些文件系统，并提供适合应用程序的正确文件系统上历史背景和建议。
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#types-of-file-systems_assembly_overview-of-available-file-systems}文件系统类型 {.title}
:::
Red Hat Enterprise Linux 9
支持各种文件系统(FS)。不同类型的文件系统可以解决不同类型的问题，它们的使用会根据特定应用程序而有所不同。在最一般的级别上，可用的文件系统可以分为以下主要类型：
::: table
[]{#assembly_overview-of-available-file-systems_managing-file-systems.html#idm139895477037600}
**表 1.1. 文件系统类型及其用例**
::: table-contents
  类型                        文件系统              属性和使用案例
  --------------------------- --------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  磁盘或本地 FS               XFS                   XFS 是 RHEL 中的默认文件系统。由于它将文件布局为扩展数据块，所以它不像 ext4 那样易受碎片的影响。红帽建议将 XFS 部署为本地文件系统，除非有特定原因部署为其它：例如，兼容性或涉及性能方面的情况。
                              ext4                  ext4 在 Linux 中具有长寿的优势。因此，几乎所有 Linux 应用程序都支持它。在大多数情况下，它与 XFS 在性能上竞争。ext4 通常用于主目录。
  网络或客户端-和-服务器 FS   NFS                   使用 NFS 在同一个网络中的多个系统间共享文件。
                              SMB                   使用 SMB 进行与微软 Windows 系统的文件共享。
  共享存储或共享磁盘 FS       GFS2                  GFS2 为计算集群成员提供共享写入访问。其重点在于稳定性和可靠性，获得与本地文件系统类似的体验。SAS Grid、Tibco MQ、IBM Websphere MQ 和 Red Hat Active MQ 已被成功部署在 GFS2 上。
  卷管理 FS                   Stratis（技术预览）   Stratis 是基于 XFS 和 LVM 的组合构建的卷管理器。Stratis 的目的是模拟卷管理文件系统（如 Btrfs 和 ZFS）所提供的功能。可以手动构建此堆栈，但 Stratis 可减少配置的复杂度、实施最佳实践并整合错误信息。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#local-file-systems_assembly_overview-of-available-file-systems}本地文件系统 {.title}
:::
本地文件系统是在单一本地服务器中运行并直接附加到存储中的文件系统。
例如，本地文件系统是内部 SATA 或 SAS
磁盘的唯一选择，可在当您的服务器具有带有本地驱动器的内部硬件 RAID
控制器时使用。当 SAN 上导出的设备未共享时，本地文件系统也是 SAN
连接的存储上最常用的文件系统。
所有本地文件系统都与 POSIX 兼容，且与所有支持的 Red Hat Enterprise Linux
版本完全兼容。与 POSIX
兼容的文件系统为一组定义良好的系统调用提供支持，如
`read()`{.literal}、`write()`{.literal} 和 `seek()`{.literal}。
从应用程序员的角度来看，本地文件系统之间的差别相对较少。从用户的角度来看，最显著的差异与可扩展性和性能相关。在考虑文件系统的选择时，请考虑文件系统需要多大、应具有哪些独特功能，以及它在您的工作负载下性能如何。
::: variablelist
[可用的本地文件系统]{.term}
:   ::: itemizedlist
    -   XFS
    -   ext4
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#the-xfs-file-system_assembly_overview-of-available-file-systems}XFS 文件系统 {.title}
:::
XFS 是一个高度可扩展、高性能、健壮且成熟的 64
位日志文件系统，其支持单个主机上非常大的文件和文件系统。它是 Red Hat
Enterprise Linux 9 中的默认文件系统。XFS 最初于 1990 年代由 SGI
早期开发，并在非常大型的服务器和存储阵列中运行有很长的历史记录。
XFS 的功能包括：
::: variablelist
[可靠性]{.term}
:   ::: itemizedlist
    -   元数据日志，其确保系统崩溃后文件系统的完整性，方法是保留系统重启和重新挂载文件系统时可以重新执行的文件系统操作的记录，
    -   广泛的运行时元数据一致性检查
    -   可扩展且快速修复工具
    -   配额日志。这可避免在崩溃后进行冗长的配额一致性检查。
    :::
[可伸缩性和性能]{.term}
:   ::: itemizedlist
    -   支持最多 1024 TiB 的文件系统大小
    -   支持大量并发操作的能力
    -   B-tree 索引，用于空闲空间的可扩展性管理
    -   复杂的元数据读头算法
    -   优化流视频工作负载
    :::
[分配方案]{.term}
:   ::: itemizedlist
    -   基于扩展数据块的分配
    -   条带化分配策略
    -   延迟分配
    -   空间预分配
    -   动态分配的 inode
    :::
[其他功能]{.term}
:   ::: itemizedlist
    -   基于 Reflink 的文件副本
    -   严格集成备份和恢复工具
    -   在线清理
    -   在线文件系统增大
    -   全面的诊断功能
    -   扩展属性(`xattr`{.literal})。这允许系统能够按文件关联多个额外的名称/值对。
    -   项目或目录配额。这允许对目录树的配额限制。
    -   小于秒的时间戳
    :::
:::
::: title
**性能特性**
:::
XFS 在具有企业工作负载的大型系统上具有高性能。大型系统是一个有相对较多的
CPU 、多个 HBA 和连接外部磁盘阵列的系统。XFS 在具有多线程、并行 I/O
工作负载的较小系统上也表现良好。
对于单线程、元数据密集型工作负载，XFS
的性能相对较低：例如，在单个线程中创建或删除大量小文件的工作负载。
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#the-ext4-file-system_assembly_overview-of-available-file-systems}ext4 文件系统 {.title}
:::
ext4 文件系统是 ext 文件系统系列的第四代。它是 Red Hat Enterprise Linux
6 中的默认文件系统。
ext4 驱动程序可以对 ext2 和 ext3 文件系统进行读写，但 ext4
文件系统格式与 ext2 和 ext3 驱动程序不兼容。
ext4 添加了几个新的改进的功能，例如：
::: itemizedlist
-   支持的文件系统大小高达 50 TiB
-   基于扩展的元数据
-   延迟分配
-   日志的 checksum
-   大型存储支持
:::
基于扩展数据块的元数据和延迟分配功能提供了一种更加紧凑和高效的方法来跟踪文件系统中的已用空间。这些功能提高了文件系统性能，并减少了元数据所占用的空间。延迟分配允许文件系统延迟选择新写入用户数据的永久位置，直到数据刷新到磁盘。这可实现更高的性能，因为它允许更大的、连续的分配，允许文件系统根据更佳的信息做出决策。
ext4 中使用 `fsck`{.literal} 工具的文件系统修复时间比 在 ext2 和 ext3
中要快得多。一些文件系统修复的性能会增加最多 6 倍。
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#comparison-of-xfs-and-ext4_assembly_overview-of-available-file-systems}XFS 和 ext4 的比较 {.title}
:::
XFS 是 RHEL 中的默认文件系统。本节比较 XFS 和 ext4 的用法和功能。
::: variablelist
[元数据错误行为]{.term}
:   在 ext4
    中，当文件系统遇到元数据错误时您可以配置行为。默认的行为是继续操作。当
    XFS 遇到不可恢复的元数据错误时，它会关闭文件系统，并返回
    `EFSCORRUPTED`{.literal} 错误。
[配额]{.term}
:   在 ext4
    中，您可以在创建文件系统时启用配额，或稍后在现有文件系统上启用配额。然后您可以使用挂载选项配置配额强制。
    XFS 配额不是一个可重新挂载的选项。您必须在初始挂载中激活配额。
    在 XFS 文件系统上运行 `quotacheck`{.literal}
    命令没有效果。当您第一次打开配额记帐时，XFS 会自动检查配额。
[文件系统重新定义大小]{.term}
:   XFS 没有工具来缩小文件系统的大小。您只能增大 XFS 文件系统的大小。而
    ext4 支持扩展和缩小文件系统大小。
[内节点（inode）号]{.term}
:   ext4 文件系统不支持超过 2^32^ 内节点。
    XFS 动态分配内节点。只要文件系统上存在空闲空间，XFS
    文件系统就无法耗尽 inode 。
    某些应用程序无法正确处理 XFS 文件系统上大于2^32^ 的 inode
    数。这些应用程序可能会导致 32 位 stat 调用失败，返回值为
    `EOVERFLOW`{.literal} 。在以下情况下，inode 数超过 2^32^:
    ::: itemizedlist
    -   文件系统大于 1 TiB，其 inode 为 256 字节。
    -   文件系统大于 2 TiB，其 inode 为 512 字节。
    :::
    如果您的应用程序由于 inode 数太大而失败，请使用
    `-o inode32`{.literal} 选项挂载 XFS 文件系统，来强制inode 数低于
    2^32^。请注意，使用 `inode32`{.literal} 不会影响已分配了 64 位数的
    inode。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    除非特定环境需要，否则 [*请勿*]{.emphasis} 使用 `inode32`{.literal}
    选项。`inode32`{.literal}
    选项可改变分配行为。因此，如果没有可用空间在较低磁盘块中分配 inode
    ，则可能会出现 `ENOSPC`{.literal} 错误。
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_overview-of-available-file-systems_managing-file-systems.html#choosing-a-local-file-system_assembly_overview-of-available-file-systems}选择本地文件系统 {.title}
:::
要选择一个满足应用程序要求的文件系统，您需要了解要在其上部署文件系统的目标系统。您可以使用以下问题来说明您的决定：
::: itemizedlist
-   您有一个大的服务器吗？
-   您有大的存储要求或一个本地的慢速的 SATA 驱动器吗？
-   您所期望的应用程序存在哪一种 I/O 工作负载？
-   您对吞吐量和延迟的要求是什么？
-   您的服务器和存储硬件稳定性如何？
-   您的文件和数据组的典型大小是什么？
-   如果系统失败，您可以承受多少停机时间？
:::
如果您的服务器和存储设备都很大，那么 XFS
是最佳选择。即使存储阵列较小，当平均文件大小较大（例如，几百兆字节）时，XFS
也表现良好。
如果您的现有工作负载在 ext4 上表现良好，则继续使用 ext4
会为您和您的应用程序提供一个非常熟悉的环境。
ext4 文件系统在 I/O 能力有限的系统上往往表现更好。它在有限带宽（小于
200MB/s）上性能更好，最高可达到 1000 IOPS
的能力。对于较高能力的任何事情，XFS 往往会更快。
与 ext4 相比，XFS 消耗大约两倍的每个元数据所使用的 CPU
，因此如果您有一个很少并发的 CPU 绑定工作负载，则 ext4
将更快。通常，如果应用程序使用单个读/写线程和小文件，则 ext4
更佳；而当应用程序使用多个读/写线程和较大的文件时，XFS 会更出色。
您无法缩小 XFS 文件系统。如果您需要缩小文件系统，请考虑使用 ext4
，其支持离线缩小。
通常，红帽建议您使用 XFS，除非您有 ext4