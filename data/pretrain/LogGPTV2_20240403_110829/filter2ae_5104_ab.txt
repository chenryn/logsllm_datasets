目标1111端口（子baecon）**  
  * Bypass分析  
**  
在目标机的防火墙眼中是本地的8080端口与本地的1111端口通讯，而攻击机与目标的8080端口则是正常被允许的交互行为，从而bypass了出入站策略。**
## 正向Bind免杀
上面有提到过目标上有火绒和WD两款杀毒，直接上传正向shell肯定是会被秒杀的，本地测试报毒。  
Reserver_Bind免杀较为简单，直接生成shellcode，通过分离免杀等方法加载shellcode。  
但是正向shell不能生成shellcode，它属于`stageless型Beacon`，而stageless型Beacon无法生成shellcode，所以无法通过常规的分离式免杀来绕过杀毒。
  * 提一下`stager`与`stagerless`的区别：  
stager和stagerless型beacon
  * **Stager型：只包含简单的加载逻辑部分，stager通过将c2的payload加载进内存从而实现pe加载，这种加载方式也就是反射型DLL加载。**
  * **Stagerless型：stager+payload全写死在木马中，相比较于Stager型体积更大，特征码更明显。**  
由下图可以看到，在生成payload的时候没有正向bind监听器这个选项，只有Reserver监听器选项。  
既然无法通过混淆加载器的方法来免杀，那就`加强壳+定位特征码`的方法来免杀。  
**  
国内大部分杀软估计都是基于模糊hash算法的特征码查杀，对代码层强混淆几乎就能绕过大部分杀毒，强壳（ASPack、upx、Safengine、VMPoject，实测Aspack、upx效果不是很好）。**  
主要用到的工具：`VirTest5.0`\+ `Resource Hacker` +`SafengineShielden+upx`
  * VirTest5.0：  
自动化定位特征码，因为不会汇编，所以就直接用010Editor修改特征码的十六进制来破环特征码。  
其他修改特征码的方法: 替换汇编函数、调换指令顺序、置零跳转。  
注意：在修改完特征码之后，要测试exe还能不能正常运行。
  * SafengineShielden  
反LPK注入、反调试器附加、反内存转储选上，复杂度拉满，虚拟机检测不要打勾。  
最后加一层upx壳(upx壳视情况而定，有时候加了upx壳反而会被杀)，Resource Hacker加入一个任意图标文件，成功过掉火绒。
# 目标机运行正向shell
上传正向bind，在冰蝎上执行
D:/beacon_se.exe，可以看到木马在目标机上开启了1111端口，我们通过http隧道去连接这个位于目标机1111端口上的正向bind。  
# 本机（跳板）正向连接shell
本机（攻击者）上线cs作为跳板机，然后在本机shell中执行
    connect 127.0.0.1 7777
成功正向上线
10.1.1.1，但是上线的shell权限极低，mimikatz无法运行，因为正向shell的原因，就算提权成功也无法直接反弹shell，而且因为目标系统是2016，插件中的常见提权脚本都会提权失败。  
## PrintSpoofer提权
上传PrintSpoofer.exe至目标主机。  
执行如下命令，以system的权限运行我的正向shell，那么我将得到一个system权限的shell，而不是asp的低权限shell。
    C:\Windows\Temp\PrintSpoofer -c D:/1111_se.exe
Netstat -ano确认一下有没有在本地开放一个1111端口。  
正向shell正常运行，跳板机再次连接正向bind。
    connect 127.0.0.1 7777
成功提权，渗透至此已基本结束战斗，得到一个system权限的正向shell，mimikatz抓密码，无明文，但能拿到hash。  
# 绕过杀毒添加用户&&登录桌面
Net1改名添加用户，报错，必然是被火绒拦截了，上杀器直接驱动层干杀软。  
本地实验能干掉，但是不知道为什么在目标上就实现不了。  
**  
换思路：火绒、360等国内杀毒拦截添加用户命令往往只针对`net`、`net1`这俩进程，并没有hook底层函数，所以我们只需要不去执行net、net1而去直接调用底层函数就能绕过杀毒的监控。**  
原理不去深度刨析了，网上有文章。
  * Windows API 添加管理员用户  
项目地址：  
绕过杀毒添加上了一个用户，接下来就是常规操作，用打印机漏洞提权，利用sys权限切换到adminsitrator用户的桌面。
  * hash传递攻击  
再或者就是hash传递，直接上adminsitrator的桌面。
        sekurlsa::pth /user:Administrator /domain:用户名 /ntlm:194f34439dd27846db00c6723036da6b "/run:mstsc.exe /restrictedadmin"194f34439dd27846db00c6723036da6b
**  
Hash传递的好处就是，动静更小，不需要新建用户，留下的痕迹更少，降低攻击者被发现的概率。**  
如下图：  
跟上面操作一样，把对方的3389端口反向代理至本地，连接之。  
最后附上登录的桌面的截图，登上来就是一个backstab的报错，这刚好就解释了之前在干火绒的时候，为什么没有kill成功（因为程序兼容性问题导致崩溃了）。  
# 结尾
总结一下整个渗透过程中有趣的几个点，整个流程大概花了两天的时间，主要是有几个地方踩坑了。
  1. **第一点** ：写http隧道马的时候，用哥斯拉直接编辑新建一个隧道马，但是连接的时候报错，可能是哥斯拉出现了数据断流，导致写进去的文件缺东西了，后来直接把隧道马传上去就不报错了。
  2. **第二点** ：网上的例子大多数都用pystinger反代cs服务端来处理这种不出网上线cs的情况，但是可能因为目标网络环境的不一样导致各种玄学报错，所以Pystinger的局限性还是很大的，而且Pystinger客户端还不免杀。
  3. **第三点** ：正向shell免杀，不多说的，cs的无阶段木马都是这样，无法通过混淆加载器的方法免杀。
  4. **第四点** ：正向shell的提权，cs插件提权只能反弹一个反射型的shell，无法反弹正向shell。
  5. **第五点** ：有趣的是，无阶段木马是能生成powershell脚本的，而powershell脚本是很好混淆免杀的，但是目标是server2016，默认开启AMSI，混淆免杀在它面前形同虚设。（要是目标是2012、2008系统就可以通过powershell正向bind上线）
# 结尾的结尾
本还可以尝试msf的正向bind，自带混淆器，效果可能更好。  
本次渗透是在获得授权的真实环境中进行的。  
在利用pystinger反向代理套反向shell失败的情况下，改用正向代理中套正向shell来上线不出网主机。