EviHunter
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Table 8: Analysis results for each type of evidentiary data on the 8,690 real-world apps. The column “Static” indicates the
number of static file paths; the column “Dynamic” indicates the number of dynamic file paths; and the column “App” indicates
the number of apps. “Others” indicates a file that does not include the four specified types of evidentiary data.
Evidence Type
Location
Time
Visited URL
Text Input
Others
SQLite Database
Static Dynamic
145
343
20
166
903
0
0
0
0
3
App
145
316
19
155
721
SharedPreferences
Static
Dynamic
195
1128
25
410
5941
0
1
0
1
3
App
72
924
25
388
3135
Ordinary File
Static Dynamic
151
431
19
184
6901
0
4
0
2
576
App
151
411
18
148
3448
Table 9: Summary of the analysis results for the 8,690 real-
world apps.
File Type
SQLite Database
SharedPreferences
Ordinary File
Total
Evidence File Path
Static File Path Dynamic File Path
674
1758
785
3217
0
2
6
8
for privacy studies and storing sensitive data only at the local file
system without sending them to the Internet may not be consid-
ered as a privacy leakage. Among the 4 apps, 3 of them consider
device ID as sensitive data and the remaining one considers GPS
location as the sensitive data. To analyze these benchmark apps,
we extend EviHunter to incorporate device ID as evidentiary data.
Specifically, we add the system APIs that return device ID to the
sources. Table 6 shows the AED that EviHunter constructed for
the 4 benchmark apps. EviHunter finds all the file paths accurately
in the 4 apps. We note that in the app org.cert.WriteFile, the GPS
location data is passed between components. EviHunter accurately
identifies the location data. This is because EviHunter leverages the
inter-component communications support in FlowDroid to track
evidentiary data across components.
However, the 4 benchmark apps have limitations at evaluating
EviHunter. Specifically, they all use the soft-coded approach to con-
struct file paths; they only consider SharedPreferences and ordinary
files; and they only consider device ID and GPS location as data
sources. To address these limitations and better evaluate EviHunter,
we design three benchmark apps by ourselves. Specifically, our
benchmark apps are GPS, Browser, and Instant Messenger, whose
package names are com.evihunter.GPS, com.evihunter.Browser, and
com.evihunter.IM, respectively. As their names suggest, these apps
are designed to mainly evaluate evidentiary data location, visited
URL, and text input, respectively. The data type time is covered by
more than one benchmark app. When we design the benchmark
apps, we consider static file paths, dynamic file paths, soft-coded
approach and hard-coded approach for file path construction, as
we as SQLite database files, SharedPreferences files, and ordinary
files. In particular, dynamic file paths include the three popular
patterns , , and  that we discussed in
Section 3.2.6.
We use EviHunter to analyze the three benchmark apps. Table
7 shows the AED EviHunter constructed for the three apps. Evi-
Hunter accurately finds all the file paths that could store evidentiary
data for the three benchmark apps.
4.2 Results on Real-World Apps
We obtained 8,690 real-world Google Play apps collected by Play-
Drone [44]. We use EviHunter to build an AED for these apps. Some
apps take a long time to be fully analyzed. Since we aim to analyze a
large number of apps, we set a 3-minute timeout for each real-world
app analysis. Specifically, if our tool does not finish analyzing an
app within 3 minutes, we force the analysis to abort and report the
analysis results. Note that the 3 minutes timeout does not count the
time used for preprocessing an app via Soot, IC3, and FlowDroid.
Our analysis stops early for 583 apps (6.7% of total apps) due to the
3-minute timeout.
Table 9 summarizes our analysis results, and Table 8 further
shows the analysis results for each type of evidentiary data. A
reported file could include at least one type of evidentiary data
including location, visited URL, time, and/or text input. A file path
is treated as dynamic file path if the file path includes one of the
three patterns , , and . All other paths
are treated as static file paths. Our manual measurement study
(discussed in Section 3.2.6) showed that around 65% of dynamic file
paths use the patterns , , and/or . In
other words, around 35% of dynamic file paths are treated as static
file paths. Therefore, a small number of the static file paths shown
in the table are actually dynamic file paths.
First, static file paths are much more frequently used than dy-
namic file paths by app developers. Specifically, since around 65% of
dynamic file paths use the patterns , , and/or
, the total number of dynamic file paths is around 12. There-
fore, around 0.4% of file paths are dynamic file paths. Second, Shared-
Preferences are more frequently used in apps than SQLite database
and ordinary files (e.g., text and binary files). The reason may be
that SharedPreferences are well defined lightweight data structures
and provide rich APIs for developers to maintain data easily. Inter-
estingly, in dynamic file paths, ordinary files are more frequently
used than SQLite database and SharedPreferences.
App popularity: We randomly sampled some apps and collected
their metadata on Google Play. In total, we collected metadata
of 1,130 randomly sampled apps. Among these apps, EviHunter
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, and Yong Guan
Figure 4: GPS location and time data collected by the app in
our case study.
Figure 3: App popularity.
reports that 661 of them store evidentiary data in the file system.
Figure 3 shows the number of apps that have a given number of
downloads. We observe that the apps that store evidentiary data
on the file system have diverse popularity, ranging from hundreds
of downloads to millions of downloads. Moreover, whether an app
stores evidentiary data on the file system does not depend on its
popularity. Specifically, around half of the apps in each category of
popularity (e.g., 1M) store evidentiary data on
the file system.
Manual verification: Without ground truth, it is challenging to
evaluate our results for the real-world apps. We perform a best-
efforts manual verification. Specifically, we randomly sampled 30
apps that EviHunter reports to have at least one file containing
evidentiary data. We installed each app on a smartphone, clicked as
many buttons of the app as possible, and typed in text inputs when
we can. Then, we manually analyzed each file generated by the
apps. In total, these apps generated 559 files. EviHunter reported
that 72 of them could contain evidentiary data.
For a given type of evidentiary data (e.g., GPS), a file is a false
positive if EviHunter reports that the file includes the evidentiary
data but the file actually does not; and a file is a false negative if
EviHunter reports that the file does not include the evidentiary data
but the file actually does. We note that a file could be both false posi-
tive and false negative with respect to different types of evidentiary
data. For instance, suppose a file includes GPS data and EviHunter
reports that the file includes visited URL. Therefore, this file is a
false positive with respect to visited URL and a false negative with
respect to GPS. We compute the precision and recall for each type
of evidentiary data. We find that EviHunter achieves a precision of
90% and a recall of 89% averaged over the four types of evidentiary
data considered in the paper. Additionally, we randomly sampled
30 apps that EviHunter did not report any file containing the four
specified types of evidentiary data, and we manually verified the
analysis results for them. Our verification did not find any false
negatives.
Privacy implications: We find that 5 apps save GPS locations
on external storage; 8 apps save visited URLs on external storage;
and 27 apps save text inputs on external storage. This result has
serious privacy implications. Specifically, any app that has the
READ_EXTERNAL_STORAGE and INTERNET permissions can
read data from the external storage and send them to the Internet.
If a user installs an app that saves sensitive data on the external
storage, then other apps on the user’s smartphone could monitor
such data to compromise user privacy and security, even if the apps
do not have permissions to access the sensitive data. For instance,
an app can track user locations via monitoring GPS locations on the
external storage; and an app can perform web tracking to profile a
user via the visited URLs on the external storage.
Via manual analysis, we found that one app, whose functionality
is to backup contacts, saves a user’s plaintext email address, phone
number, and password to three separate files on the external storage.
4.3 A Case Study
We use a case study to demonstrate how a forensic investigator can
use EviHunter to identify evidentiary data on an Android smart-
phone. Among the real-world apps that we analyzed, we found 133
apps could write GPS location and time data to a SQLite database
with a static file path /databases/databases/ldata.db.
After manual analysis about these apps, we found that this database
file is generated and accessed by a third-party advertisement library
called airpush. The package name for this library is com.yrkfgo.assxqx4.
The advertisement library registers a location listener. Once a de-
vice’s GPS location changes, the library will receive the GPS loca-
tion, and then the library writes the GPS location as well as system
time into the file /databases/databases/ldata.db.
The advertisement library uses GPS location to provide location-
based advertisements. We speculate the reason that the library saves
GPS locations in a local file system is to approximate a device’s
location when real-time GPS locations are unavailable.
We simulate a suspect’s device using an Android smartphone
and perform forensic investigation on the smartphone’s file sys-
tem. Specifically, we installed an app, whose package name is
com.vijay.tamilrecipes, on the smartphone. The app uses the air-
push library. One author of the paper walked around a building
with the smartphone for a while, such that the app collected and
stored GPS location and time data into the smartphone’s file system.
Then, we retrieved an image of the smartphone’s file system. We
matched the file system image against the AED we constructed
in the previous section. In particular, we matched the file path
/data/data/com.vijay.tamilrecipes/databases/databases/ldata.db and
our AED showed that this file path stores location and time data.
Figure 4 shows a part of the database file. The columns of the data-
base include _id (event id for location changes), latitude, longitude,
and date. A forensic investigator could use these GPS location and
time data to assist crime investigation. For instance, a forensic in-
vestigator could use these data as a digital evidence to determine
whether the suspect was at the crime scene or not when the crime
happened.
The total number of installations for these 133 apps is more
than 10M. If a suspect has installed at least one of these apps on
1MNumber of downloads050100150200250Number of appsAll appsApps with evidentiary dataEviHunter
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
its Android smartphone, a forensic investigator could use the GPS
location and time data saved by the app(s) as evidence for crime
investigations.
5 DISCUSSIONS AND LIMITATIONS
EviHunter shares the limitations of many static data-flow analysis
tools [12, 13, 19–21, 25, 30, 45, 49] for Android. Specifically, Evi-
Hunter over-approximates the system native methods and does
not consider the developer-defined native methods. EviHunter only
considers the reflective method calls that can be statically resolved.
In general, EviHunter cannot handle dynamic class loading. For
instance, an app could download a DEX file from Internet and exe-
cute it during runtime. Without runtime environment information,
static program analysis cannot handle the loaded library. One pos-
sible way to mitigate this challenge is to download the dynamically
loaded classes and statically analyze them together with the app.
EviHunter leverages IC3 and FlowDroid to support inter-component
communications for the analysis of evidentiary data. However, Evi-
Hunter has basic support for inter-component communications
with respect to file path propagation. In particular, if a dynamic
file path includes intent in inter-component communication, Evi-
Hunter uses a regular expression  as a part of the file path.
Moreover, EviHunter has basic support for system APIs. In par-
ticular, we manually summarize the data flows for system APIs
that are related to file path constructions, string operations, and
commonly used data structures. It would be an interesting future
work to model frameworks. We note that the framework modeling
technique proposed by DroidSafe [21] is insufficient for our file
system forensics problem because of two reasons: 1) the technique
is not scalable to real-world apps [36], and 2) the technique only
captures the flows of sensitive data, but not file paths.
Another limitation revolves around matching file paths on a sus-
pect’s device against those in an AED. In particular, some dynamic
file paths may not be successfully matched. For instance, suppose a
file has a file name that completely consists of an intent. EviHunter
will represent the file name as . However, since we do not
produce any fine-grained patterns for the intent, it is hard to match
the file on a suspect’s device with the right dynamic file path in the
AED. As a result, we will incorrectly treat the file as a file that does
not include evidentiary data. We believe it is an interesting future
work to extend our tool to support more fine-grained analysis for
dynamic file paths. For instance, via inter-component communi-