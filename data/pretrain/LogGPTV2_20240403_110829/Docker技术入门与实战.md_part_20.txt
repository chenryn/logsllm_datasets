其中Dockerfile内容为：
查看内容，包括写好的Dockerile和若干脚本等：
$git clone https://github.com/DockerPool/Mongodb.git
从GitHubDockerpool社区帐户下载Mongodb镜像项目：
1.下载文件
MongoDB是一款可扩展、高性能的开源文档（Document-Oriented）数据库。它采用
FROM sshd
Dockerfile
$1s
$cd Mongodb
password: admin
$ ssh root@1ocalhost -p 49160
使用SSH登录容器，默认的用户名为root，密码为admin。
Password for SYs
password:oracle
username: system
sid: xe
port:49161
hostname:localhost
使用下列参数可以连接oracle数据库：
启动容器，并分别映射22和1521端口到本地的49160和49161端口。
2.启动和使用容器
$ sudo docker pull wnameless/oracle-xe-11g
alexeiled/docker-oracle-xe-1lg This is a spin off from wnameless/docker-o...
NAME
$ sudo docker search -s 10 oracle
MongoDB
DESCRIPTION
LICENSE
README.md run.sh set_mongodb _password.sh
STARS
OFFICIAL
AUTOMATED
0
Z
2
[OK]
---
## Page 145
mongo admin--eval"db.shutdownServer();"
'userAdminAnyDatabase',
mongo admin--eval
echo "=> Creating an admin user with a ${_word} password in MongoDB"
#通过dockerlogs+id可以看到下面的输出。
done
RET=1
/usr/bin/mongod--smallfiles--nojournal&
if[-f /.mongodb password_set ]; then
#判断是否已经设置过密码。
#这个脚本主要是用来设置数据库的用户名和密码。
#!/bin/bash
set_mongodb_password.sh脚本主要负责配置数据库的用户名和密码，内容为：
CMD["/run.sh"]
EXPOSE 27017
RUNchmod755./*.sh
ADD run.sh/run.sh
ENV AUTH yes
VOLUME/data/db
RUNmkdir-p/data/db
#创建mongodb存放数据文件的文件夹
RUN apt-getupdate&&\
MAINTAINER waitfish from dockerpool.com(PI:EMAIL)
ADD
添加脚本
RET=S?
mongo admin--eval"help">/dev/null 2>&1
echo
set_mongodb_password.sh/set_mongodb_password.sh
rm-rf/var/lib/apt/lists/*
apt-getclean&&
exit0
echo
"MongoDB password already set!"
"db.adduser((user:
'dbAdminAnyDatabase']});"
第12章数据库应用
'$PASs',roles:
131
---
## Page 146
132第二部分实战案例
通过dockerlogs来查看默认的admin帐户密码：
$sudodockerrun-d-p27017:27017-p28017:28017mongodb
启动后台容器，并分别映射27017和28017端口到本地：
3.使用示范
mongodb
REPOSITORY
$sudo docker build
根据Dockerile创建镜像mongodb：latest：
2.创建镜像
else
if
else
#这里读者可以自己设定Mongodb的启动参数。
if[!-f/.mongodb_password_set];then
#!/bin/bash
run.sh脚本是主要的启动脚本，内容为：
echo
echo
echo
echo
echo
echo
touch/.mongodb_password_set
echo"=>Done!"
mongod--dbpath/data/db --repair && eval Smongodb
eval $mongodb
[！-f/data/db/mongod.lock];then
export mongodb=Smongodb'
exportmongodb='/usr/bin/mongod
"please remember to change the above password as soon as possible!"
/set_mongodb_password.sh
latest
TAG
-tmongodb
e3200a24cf28
IMAGE ID
--dbpath /data/db'
3hours ago
CREATED
256MB
VIRTUAL SIZE
---
## Page 147
--objcheck
--nssize arg (=16)
-nounixsocket
--notablescan
Mongodb的启动参数有很多，包括：
4.详细启动参数
同样，读者也可以使用-v参数来映射本地目录到容器。
$ sudo docker run -d-p 27017:27017-p 28017:28017 -e AUTH=no mongodb
甚至，设定不需要密码：
还可以利用环境变量在容器启动时指定密码：
输出中的5elsT6KtjrqV就是admin用户的密码：
$sudo docker logs sa9
-journal
-bind_ip
-portarg
-quiet
noscripting
noprealloc
nohttpinterface
noauth
jsonp
ipv6
-directoryperdb
diaglogarg
dbpath arg
cpu
auth
fork
unixSocketPrefix arg
keyFile arg
-pidfilepath arg
journaloptionsarg
You can now connect to this MongoDB server using:
#定期显示CPU的CPU利用率和iowait
>> 
#允许JSONP形式通过HTTP访间（有安全影响）
#启用IPv6选项
arg
arg
#安静输出
不启用验
启用验证
#以守护进程的方式运行MongoDB，创建服务器进程
#启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里
#在收到客户数据，检查的有效性，
#指定服务端口号，默认端口27017
#禁用数据文件预分配（往往影响性能）
#指定数据库路径
使用追加的方式写日志
不允许表扫描
#禁用脚本引擎
#集群的私钥的完整路径，
#禁用Unix套接字监听
#绑定服务IP，
最大同时连接数默认2000
#设置每个数据库将被保存在一个单独的目录
#设置信数据库.ns文件大小（MB）
关闭http接口，
#启用日志诊断选项
若绑定127.0.0.1，
默认关闭27018端口访间
如果没有设置，则没有PID文件
，则只能本机访问，不指定默认本地所有IP
第12章数据库应用133
---
## Page 148
来减少AUFS系统的性能损耗，还介绍了MySQL数据库的主从复制模式，
12.4
134
本章MySQL小节介绍了标准镜像的创建过程，以及如何将数据库文件映射到宿主主机
auth
fork=
port=27017
logappend=true
logpath=/data/mongodb/mongodb.log
dbpath=/data/mongodb
上述参数也可以直接在mongod.conf配置文件中配置，
--replset arg
--slavedelay arg
-source arg
-slave
-master
--oplogsize arg
--autoresync
-noMoveParanoia
-onlyarg
-fastsync#从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步
--upgrade
--sysinfo
--syncdelay arg（=60)
--smallfiles
--slowmsarg(=100)
-repairpatharg
-repair
-rest
-quotaFiles arg
--quota
--profile arg
第二部分实战案例
本章小结
-shardsvr
-configsvr
true
true
#从库模式
#限制每个数据库的文件数，设置默认为8
#主库模式
#修复所有数据库runrepaironalldbs
#指定单一的数据库复制
#
#
如果需要升级数据库
打印一些诊断系统信息
#使用较小的默认文件
声明这是一个集群的config服务，
#从库端口号
#如果从库与主库同步数据差得多，自动重新同步，
#档案参数0=off1=slow，
#设置副本集名称
#设置oplog的大小（MB）
#关闭偏执为moveChunk数据保存
#设置从库同步主库的延迟时间*Replicaset（副本集）选项：
#修复库生成的文件的目录，
一个集群的分片，
#value of slow for profile and console log
#数据写入磁盘的时间秒数（0=never，不推荐）
*Replicaton参数
*Sharding（分片）选项
默认端口27018
2=al1
，默认端口27019，默认目录/data/configdb
默认为目录名称dbpath
主/从参数
，例如：
，读者通过阅读该
----
---
## Page 149
介绍。读者可以通过各大数据库的官方网站查阅相关资料。
MongoDB应用。
据该小节介绍创建的镜像，拥有许多可以供读者自定义的选项，来创建符合自己需求的
用它来快速搭建个人开发、学习Oracle数据库的环境。
Oracle数据库不是十分合适，主要有如下几个方面的原因：
小节，应该能够进一步了解如何在生产环境中部署和使用MySQL的Docker容器。
阅读本章需要对特定数据库的配置和结构有一定的基础知识，由于篇幅所限，无法一一
本章最后还介绍了非关系型数据库MongoDB镜像的创建，跟MySQL镜像一样，根
Oracle小节主要以 Oracle express 版本为主。笔者认为在Docker容器中来运行生产的
虽然如此，经过笔者的验证，OracleExpress版本可以在Docker中正常运行，读者可以
口购买Oracle软件需要昂贵的授权许可，而且Docker技术目前不在Oracle公司支持的
口Oracle数据库拥有自己非常完善的集群软件，包括Clusterware、ASM、Dataguard等
口Oracle作为一个大型的企业级数据库，对运行环境的要求十分苛刻，需要在操作系
操作系统列表里面，无法得到Oracle公司的完善的技术支持。
组件，来保证性能和可用性，这方面目前还没有比较好的Docker支持。
强项。
统内核、网络等多方面进行调整来达到最优化的性能，而这些方面都不是Docker的
第12章数据库应用135
9H96
---
## Page 150
环境。
地选择PHP。
dirty（快速有效为先），任何对交付速度、灵活性甚至招聘成本有要求的创业团队，可以大胆
层优化和业务整合也是相对容易的。PHP的哲学是quickand
长，需要支持更大的并发的时候，基于原有PHP系统进行分
外被大量的用于快速Web开发。即使随着网站PV/UV的增
Web方案。由于PHP易于人门，易于维护的特性，它在国内
13.1.1PHP技术栈
13.1PHP
用Web编程语言PHP的Docker使用。
C、C++、Java、PHP、Python、Perl、Ruby、JavaScript、Ruby等。其中，笔者将重点介绍常
Chapter13
，下面，笔者将重点讲解PHP语言的Docker环境，并简述PHP主流MVC 框架的Docker
1.使用官方镜像
PHP是一种广泛使用的动态脚本语言，尤其适用于各种
首先，下载PHP官方基础镜像。
本章主要介绍如何使用Docker快速部署主流编程语言的开发环境及其常用框架，包括
编程语言
第13章
.
php
---
## Page 151
些安全/性能相关的配置。
样读者可以对PHP 项目做更多的定制化，如开启某些PHP 插件，或者对 PHP解释器进行一
镜像：
容器中内含ApacheWeb Server。读者可以使用带有 apache标签的镜像，如 php:5.6-apache。
会很麻烦。这种情况下，你可以用以下命令直接运行PHP脚本：
以按照以下步骤操作：
笔者建议加入一个自定义的php.ini 配置文件，将其拷贝到/usr/local/lib。这
1）在PHP程序／站点的根目录中新建一个Dockerfle，内容为：
添加方法很简单：
3）创建并运行此镜像：
$ sudo docker build -t my-php-app
2）使用此Dockerfile构建自定义镜像：
src/是当前包含所有PHP代码的目录。
COPYsrc//var/www/html/
FROMphp:5.6-apache
第三步通常情况下，PHP项目需要和Apachehttpd/Nginx一起运行。这样就需要PHP
第二步如果读者需要运行简单的，甚至单文件的PHP项目，那么每次都写Dockerfile
$ sudo docker run -it --rm --name my-running-app my-php-app
3）最后执行以下命令去运行Docker镜像：
$sudo dockerbuild-t my-php-app
2）然后运行以下命令去构建Docker镜像：
FROMphp:5.6-c1i
第一步如果读者需要以CLI（command lineinterface命令行）方式运行PHP脚本，可
-w/usr/src/myappphp:5.6-cliphpyour-script.php
[dddos-odud]
WORKDIR/usr/src/myapp
COPY
下载成功后，读者已经可以使用一个PHP容器去运行PHP程序／站点了。
$ sudo docker pull php
./usr/src/myapp
第13章编程语言137
---
## Page 152
此一来，读者可以方便地使用SSH服务连接PHP容器，即方便地运行容器中的PHP站点。
138第二部分实战案例
docker/php
docker/php
docker/php