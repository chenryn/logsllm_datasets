### MSP430 Instruction Cycles

#### Table 1: Single Operand Instruction Cycles

| Addressing Mode | No. of Cycles | Example |
|-----------------|---------------|---------|
| Rn              | 1             | SWPB R5 |
| @Rn             | 3             | RRC @R9 |
| @Rn+            | 3             | SWPB @R10+ |
| #N              | -             | -       |
| x(Rn)           | 4             | CALL 2(R7) |
| EDE             | 4             | PUSH EDE |
| &EDE            | 4             | SXT &EDE |

Note: A number of MSP430 assembly operations (including `nop`, `incd`, `rla`, `ret`, and `tst`) are emulated using the listed machine instructions.

#### Table 2: Double Operand Instruction Cycles

| Source Addressing Mode | Destination Addressing Mode | No. of Cycles | Example |
|------------------------|-----------------------------|---------------|---------|
| Rn                     | Rm                          | 1             | MOV R5, R8 |
| Rn                     | PC                          | 2             | BR R9    |
| Rn                     | x(Rm)                       | 4             | ADD R5, 4(R6) |
| Rn                     | EDE                         | 4             | XOR R8, EDE |
| Rn                     | &EDE                        | 4             | MOV R5, &EDE |
| @Rn                    | Rm                          | 2             | AND @R4, R5 |
| @Rn                    | PC                          | 2             | BR @R8   |
| @Rn                    | x(Rm)                       | 5             | XOR @R5, 8(R6) |
| @Rn                    | EDE                         | 5             | MOV @R5, EDE |
| @Rn                    | &EDE                        | 5             | XOR @R5, &EDE |
| @Rn+                   | Rm                          | 2             | ADD @R5+, R6 |
| @Rn+                   | PC                          | 3             | BR @R9+  |
| @Rn+                   | x(Rm)                       | 5             | XOR @R5+, 8(R6) |
| @Rn+                   | EDE                         | 5             | MOV @R9+, EDE |
| @Rn+                   | &EDE                        | 5             | MOV @R9+, &EDE |
| x(Rn)                  | Rm                          | 3             | MOV 2(R5), R7 |
| x(Rn)                  | PC                          | 3             | BR 2(R6)  |
| x(Rn)                  | x(Rm)                       | 6             | ADD 2(R4), 6(R9) |
| x(Rn)                  | EDE                         | 6             | MOV 4(R7), EDE |
| x(Rn)                  | &EDE                        | 6             | MOV 2(R4), &EDE |

### Secure Keypad Implementation

The following enclaved keypad program is derived from a recently published open-source automotive Sancus application scenario [72]. Minimal modifications were made to run the program without function callbacks in a stand-alone enclave.

The `poll_keypad` function's start-to-end timing reveals the number of times the `if` statement was executed, which corresponds to the number of keys that were pressed (see return value). By carefully interrupting the function at each loop iteration, an untrusted ISR can learn the value of the secret PIN code.

```c
// Initialize variables
SM_DATA(secure) init = 0x0;
SM_DATA(secure) pin_idx = 0x0;
SM_DATA(secure) key_state = 0x0;
SM_DATA(secure) pin[PIN_LEN];

const char SM_DATA(secure) keymap[NB_KEYS] = {
    '1', '3', '4', '6', '7', '9', '0', 'E',
    '2', 'A', '5', 'B', '8', 'C', 'F', 'D'
};

int SM_ENTRY(secure) poll_keypad(void) {
    int is_pressed, was_pressed, mask = 0x1;

    // Securely initialize SM on first call
    if (!init) {
        return do_init();
    }

    // Fetch key state from MMIO driver SM
    uint16_t new_key_state = read_key_state();

    for (int key = 0; key < NB_KEYS; key++) {
        // Store down keys in private PIN array
        is_pressed = (new_key_state & mask);
        was_pressed = (key_state & mask);

        if (is_pressed && !was_pressed && (pin_idx < PIN_LEN)) {
            pin[pin_idx++] = keymap[key];
        }

        // Shift mask for next key
        mask = mask << 1;
    }

    // Update key state
    key_state = new_key_state;

    // Return the number of keys pressed
    return pin_idx;
}
```

### Assembly Code

```assembly
1: mov #read_key_state, r12
   call #1, r12
   clr r13
   mov &key_state, r14
   mov &pin_idx, r11
   mov #4, r11
2: mov r12, r10
   cmp r15, r10
   jge 2f
   mov r14, r10
   and r12, r10
   tst r10
   jz 2f
   mov .b 518(r13), r10
   mov r11, r9
   inc r9
   mov r9, &pin_idx
   mov .b r10, 550(r11)
   rla r12
   incd r13
   cmp #32, r13
   jnz 1b
3: call r15, &key_state
   sub #4, r15
   jmp 3f
4: pop r15
   pop r14
   pop r13
   pop r12
   ret
```

This optimized text provides a clear and structured presentation of the instruction cycles and the secure keypad implementation, ensuring it is both professional and easy to understand.