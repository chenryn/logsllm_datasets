### HTTP Methods

When attacking web applications, you will primarily use the most common HTTP methods: GET and POST. Understanding the differences between these methods is crucial, as they can significantly impact an application's security.

#### GET Method
The GET method is used to retrieve resources from the server. Parameters can be included in the URL query string, allowing users to bookmark dynamic resources for reuse. For example, a bookmarked search query can be retrieved later. URLs are visible on-screen and logged in various places, such as browser history and web server access logs. They are also transmitted in the Referer header when external links are followed. Due to this visibility, sensitive information should not be transmitted via the query string.

#### POST Method
The POST method is designed for performing actions, such as submitting forms or uploading data. Parameters can be sent in both the URL query string and the message body. While the URL can still be bookmarked, parameters in the message body are excluded from the bookmark and do not appear in logs or the Referer header. If a user clicks the browser's Back button after a POST request, the browser warns the user before reissuing the request, preventing unintentional duplicate actions. Therefore, POST requests should be used for actions that have side effects.

### Other HTTP Methods
In addition to GET and POST, the HTTP protocol supports several other methods:

- **HEAD**: Similar to GET, but the server does not return a message body. It is used to check if a resource is present.
- **TRACE**: Used for diagnostic purposes, the server returns the exact contents of the request message received.
- **OPTIONS**: Asks the server to report the available HTTP methods for a particular resource.
- **PUT**: Attempts to upload a specified resource to the server using the content in the request body. If enabled, it can be exploited to upload arbitrary scripts and execute them on the server.

### URLs
A Uniform Resource Locator (URL) uniquely identifies a web resource. The general format is:
```
protocol://hostname[:port]/[path/]file[?param=value]
```
For example:
```
https://mdsec.net/auth/488/YourDetails.ashx?uid=129
```
URLs can also be relative to a host or path, such as:
```
/auth/488/YourDetails.ashx?uid=129
YourDetails.ashx?uid=129
```
These relative forms are often used for navigation within a website or application.

### REST
Representational State Transfer (REST) is an architectural style for distributed systems. In REST, requests and responses contain representations of the system's resources. URLs conforming to REST often include parameters in the file path rather than the query string. For example:
```
http://wahh-app.com/search?make=ford&model=pinto
```
can be represented as:
```
http://wahh-app.com/search/ford/pinto
```

### HTTP Headers
HTTP supports numerous headers, some of which are specific to requests or responses. Here are the key headers:

#### General Headers
- **Connection**: Indicates whether to close the TCP connection after the transmission.
- **Content-Encoding**: Specifies the encoding of the message body.
- **Content-Length**: Specifies the length of the message body in bytes.
- **Content-Type**: Specifies the type of content in the message body.
- **Transfer-Encoding**: Specifies any encoding performed on the message body.

#### Request Headers
- **Accept**: Tells the server what types of content the client can accept.
- **Accept-Encoding**: Specifies the types of content encoding the client can accept.
- **Authorization**: Submits credentials for HTTP authentication.
- **Cookie**: Submits cookies previously issued by the server.
- **Host**: Specifies the hostname from the full URL.
- **If-Modified-Since**: Specifies the last time the resource was received.
- **If-None-Match**: Specifies an entity tag for caching.
- **Origin**: Used in cross-domain Ajax requests.
- **Referer**: Specifies the URL from which the current request originated.
- **User-Agent**: Provides information about the client software.

#### Response Headers
- **Access-Control-Allow-Origin**: Indicates whether the resource can be accessed via cross-domain Ajax.
- **Cache-Control**: Passes caching directives to the browser.
- **ETag**: Specifies an entity tag for caching.
- **Expires**: Specifies how long the content is valid.
- **Location**: Used in redirection responses.
- **Pragma**: Passes caching directives to the browser.
- **Server**: Provides information about the web server software.
- **Set-Cookie**: Issues cookies to the browser.
- **WWW-Authenticate**: Provides details on the supported authentication types.
- **X-Frame-Options**: Controls how the response can be loaded in a browser frame.

### Cookies
Cookies are a key part of the HTTP protocol, enabling the server to send data to the client, which is stored and resubmitted in subsequent requests. A server issues a cookie using the `Set-Cookie` header:
```
Set-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc
```
The client then includes the `Cookie` header in subsequent requests:
```
Cookie: tracking=tI8rk7joMx44S2Uu85nSWc
```
Cookies can have optional attributes like `expires`, `domain`, `path`, `secure`, and `HttpOnly` to control their behavior and security.

### Status Codes
HTTP status codes indicate the result of a request. They fall into five groups:

- **1xx**: Informational
- **2xx**: Success
- **3xx**: Redirection
- **4xx**: Client error
- **5xx**: Server error

Common status codes include:
- **100 Continue**: Indicates the client should continue sending the request body.
- **200 OK**: Indicates the request was successful.
- **201 Created**: Indicates a PUT request was successful.
- **301 Moved Permanently**: Redirects the browser permanently to a new URL.
- **302 Found**: Redirects the browser temporarily to a new URL.
- **304 Not Modified**: Instructs the browser to use its cached copy.
- **400 Bad Request**: Indicates an invalid HTTP request.
- **401 Unauthorized**: Requires HTTP authentication.
- **403 Forbidden**: Access is denied.
- **404 Not Found**: The requested resource does not exist.
- **405 Method Not Allowed**: The method is not supported for the URL.
- **413 Request Entity Too Large**: The request body is too large.
- **414 Request URI Too Long**: The URL is too long.
- **500 Internal Server Error**: An unhandled error occurred.
- **503 Service Unavailable**: The application is not responding.

### HTTPS
HTTPS is HTTP over a secure transport mechanism, Secure Sockets Layer (SSL) or Transport Layer Security (TLS). This protects the privacy and integrity of data, reducing the risk of interception attacks.

### HTTP Proxies
An HTTP proxy mediates access between the client browser and the destination web server. When a browser is configured to use a proxy, it sends all requests to the proxy, which relays them to the relevant web servers and forwards the responses back to the browser. Proxies often provide additional services like caching, authentication, and access control.

Key differences when using a proxy:
- **Unencrypted HTTP Requests**: The full URL, including the protocol prefix, hostname, and port, is sent to the proxy.
- **HTTPS Requests**: The browser uses the proxy as a TCP-level relay, ensuring the SSL handshake occurs directly between the browser and the destination server.