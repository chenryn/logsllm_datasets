22 
REST APIs
How do I write these things? 
23How do I write these things? 
23 
REST Interfaces
You may be surprised to discover that Splunk offers 4 disBnct methods for wriBng REST APIs, each with unique behavior. They are shown below on two axes: the interface that the API is wri`en in, and the life*me of the process that executes the REST handler code. 
| Process LifeUme  |
|---|
|  |
|  |
|  |
24 
REST Interfaces: EAI|  |
|  |
24 
REST Interfaces: EAI 
EAI – Extensible AdministraUon Interface 
Designed to facilitate more rapid development of REST interfaces on the C++ backend. UBlizing this interface provides some addiBonal services such as: 
•
•
•
•
• AutomaBc paginaBon 
AutomaBc output formawng (XML, JSON) 
Access control 
Filtering 
Limited argument validaBon via Splunk “eval” syntaxEAI is typically associated with management of custom Splunk configuraBon files. 
25 
REST Interfaces: EAI (example)
Custom EAI handlers are indicated by the presence of the “admin_external” stanza in restmap.conf. The highlighted parameters are only valid with this sewng.
[admin_external:correlationsearches] 
handlertype =    python 
handlerfile =    correlationsearches_rest_handler.py handleractions = list,edit,create,remove,_reload** Only Python scripts are supported. 
26 
REST Interfaces: Mapping EAI Handlers
[admin:alerts_threaBntel] 
match=/alerts 
members=correlaUonsearches 
Maps the handler “correlaBonsearches” to the URI “services/alerts/correlaBonsearches” 
## CorrelaBon Searches Handler 
[admin_external:correlaUonsearches] 
handlertype = python 	Endpoint-specific sewngs handlerfile = correlaBonsearches_rest_handler.pyhandleracBons = list,edit,create,remove,_reload 
[eai:conf-correlaBonsearches] 
capability.write = edit_correlaBonsearches 
27 
REST Interfaces: script 
	A “raw” interface for wriBng REST interfaces. 
Services such as paginaBon, support for mulBple output formats, etc. are the responsibility of the 
developer. Conformance to REST style is also the responsibility of the developer.Using this interface, you have absolute freedom. 
28 
REST Interfaces: script (example)
A “script” handler is indicated by the presence of the “script” sewng in restmap.conf. Highlighted a`ributes are only valid with this type:
[script:notable_update] 
match = /notable_update 
scripttype = python 
script = notable_update_rest_handler.py 
handler = notable_update_rest_handler.NotableEventUpdate requireAuthentication = truecapability=edit_notable_events 
output_modes=json
29 
REST Interfaces: Mapping Script Handlers 	###### REST notable update ###### 
[script:notable_update] 
match = /notable_update 
script = notable_update_rest_handler.py 
handler=notable_update_rest_handler.NotableEventUpdate requireAuthenBcaBon = true 
capability=edit_notable_events 
output_modes=json
Maps the handler to the URI  “services/notable_update”The class that serves requests 
Assign role-based access controls on the handler 
30 
REST Interfaces: Segue: What is “Persistence?”Before we can talk about how to write handlers, we need to understand the other axis on our chart: what is “persistence”? 
Recall the execuBon model for a Splunk REST call on the previous diagram: 
1. 
2.
3. The splunkd process receives request on port 8089.This python script is invoked: $SPLUNK_HOME/bin/python runScript.py  
This script loads the REST handler using Python’s execfile() method, handing off STDIN and STDOUT as needed.
It does this twice for every REST call: once to setup the REST handler, once to execute it. That’s two invocaBons of Python for every REST call. 
31 
REST Interfaces: Segue: What is “Persistence?”“Persistent” mode means that the splunkd process will only execute one process per REST call. AddiBonally, this process will persist unBl it is idle for a period of Bme (60 seconds), at which point it will be reaped by the primary splunkd process (no developer acBon required). During the non-idle interval, it can service mulBple requests. 
This is the execuBon model for a Splunk persistent REST call:1. 
2. The splunkd process receives request on port 8089. The python script is invoked directly: 
$SPLUNK_HOME/bin/python  persistent 
(subsequent requests get passed to the same process directly) 
32 
REST Interfaces: Handler Base Classes 
	Python classes are distributed with Splunk that you can inherit from to write your own handlers: 
| Process LifeUme  |
|---|
|  |
|  |
|  ||---|
|  |
|  |
|  |
33 
REST Interfaces: Handler Base Classes 
	Python classes are distributed with Splunk that you can inherit from to write your own handlers: 
| Process LifeUme  |
|---|
|  |
|  |
|  |
34 
REST Interfaces: Adding EAI Mode Persistence
Q: What did we noUce about the preceding slide?
A: The classes providing EAI support are the same!That’s correct: enabling persistence on a custom handler wri`en using the EAI specificaBon is simply a configura8on change. To add persistence to an EAI handler, simply add this to your restmap.conf: 
handlerpersistentmode = true
However… this is not to say that your handler is guaranteed to work properly. Why? If you were doing work in the __init__() method of your handler, and were depending on that work being done to properly serve requests, when in persistent mode this work will NOT be redone – because __init__() is never called again!35 
REST Interfaces: Adding Script Mode Persistence 	Enabling persistence on a “script” custom REST handler requires: 
1. Add this to your restmap.conf: 
scripttype = persist
2. Rewrite your handler to use the new protocol specificaBon. This is the hard part. 
Gold star quesBon: Persistent scripts execute only once. What does this imply for discoverability? 
3636 
REST Interfaces: Classes 	EAI, persistent and non-persistent: MConfigHandler 
$SPLUNK_HOME/lib/python2.7/site-packages/splunk/admin.py
Script, non-persistent (two compeUng implementaUons): BaseRestHandler 
$SPLUNK_HOME/lib/python2.7/site-packages/splunk/rest/__init__.py 
$SPLUNK_HOME/etc/system/bin/sc_rest.py
Script, persistent: PersistentServerConnecUonApplicaUon$SPLUNK_HOME/lib/python2.7/site-packages/splunk/persistconn/application.py
37 
REST Interfaces: RecommendaBons 	The non-persistent interfaces should be avoided. 
Process LifeUme 
| Interface  | EAI (admin_external) | non-persistent  | persistent  |
|---|---|---|---|
| Interface  |EAI (admin_external) |MConfigHandler  |MConfigHandler  |
| Interface  |Non-EAI (script) |BaseRestHandler  |PersistentServerConnecBonApplicaBon  |38 
REST Interfaces: RecommendaBons
1.
2. Avoid versions of Splunk prior to 6.2 so that you can make use of the “expose” web.conf direcBve. 
Non-persistent interfaces should be avoided unless your app requires compaBbility with pre-Splunk 6.4 versions. 
Reasons for recommendaUon #2: 
•
•
• Persistent interfaces offer all the flexibility of the non-persistent interfaces.Performance of persistent REST handlers is vastly improved. 
“script” handlers using non-persistent mode can actually conflict with REST scripts running in unrelated apps. 
39 
REST Interfaces: RecommendaBons
AND… 
• Persistent REST handlers can now be wri`en in compiled languages using the “driver” direcBve: 
[script:my_handler_written_in_go] 
match = /test 
driver = echo 
driver.arg.1 = driver.arg.1 =  
script = echo 
scripttype=persist 
requireAuthentication = true 
output_modes=json
40 
REST Interfaces: Sample Code 
Sample code for simplisBc REST handlers using all the interfaces detailed in this presentaBon (including the ill-advised ones) is available at: 
h`ps://github.com/jrervin/splunk-rest-examples
41 
REST Interfaces: Demo
42 
THANK YOU