    init = (max - min) * (i + 1) / (k + 1) + min  
where `i` varies from 0 to k-1. This means that the vector elements  
are decided as the liner interpolation from min to max divided by k.  
Then one of the input vectors nearest to this hypothetical vector  
is picked up as the centroid. Note that input vector is not picked  
more than twice as far as possible, to gain good result.  
```  
例子  
```  
postgres=# create extension kmeans;  
CREATE EXTENSION  
postgres=# create table t1(c1 int,c2 int,c3 int,c4 int);  
CREATE TABLE  
postgres=# insert into t1 select 100*random(),1000*random(),100*random(),10000*random() from generate_series(1,100000);  
INSERT 0 100000  
postgres=# select kmeans(array[c1,c2,c3],2,array[1,2,3,4,5,6]) over() , * from t1;  
 kmeans | c1  |  c2  | c3  |  c4     
--------+-----+------+-----+-------  
      1 |  67 |  976 |  39 |  9036  
      0 |  71 |  493 |  19 |  9169  
      1 |  59 |  913 |  59 |  8343  
      0 |  54 |   99 |  26 |  6788  
      1 |   5 |  959 |  36 |  7663  
......  
```  
如果是一维数组，必须是第一个参数数组的长度乘以类别个数2。  
```  
postgres=# select kmeans(array[c1,c2,c3],2,array[1,2,3,4]) over() ,* from t1;  
ERROR:  initial mean vector must be 2d without NULL element  
postgres=# select kmeans(array[c1,c2,c3],2) over() ,* from t1;  
 kmeans | c1  |  c2  | c3  |  c4     
--------+-----+------+-----+-------  
      1 |  67 |  976 |  39 |  9036  
      0 |  71 |  493 |  19 |  9169  
      1 |  59 |  913 |  59 |  8343  
      0 |  54 |   99 |  26 |  6788  
      1 |   5 |  959 |  36 |  7663  
      1 |  26 |  873 |  87 |  9793  
```  
或者这种写法，也可以。  
```  
postgres=# select kmeans(array[c1,c2,c3],3,array[[1,1,1],[2,2,2],[3,3,3]]) over() ,* from t1;  
 kmeans | c1  |  c2  | c3  |  c4     
--------+-----+------+-----+-------  
      2 |  67 |  976 |  39 |  9036  
      1 |  71 |  493 |  19 |  9169  
      2 |  59 |  913 |  59 |  8343  
      0 |  54 |   99 |  26 |  6788  
      2 |   5 |  959 |  36 |  7663  
```  
## 参考  
1\. http://api.pgxn.org/src/kmeans/kmeans-1.1.0/doc/kmeans.md  
2\. https://en.wikipedia.org/wiki/K-means_clustering  
3\. http://coolshell.cn/articles/7779.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")