Note 
The exact meaning and implementation of a vtable depends on the language and 
object model. However, for most purposes you can assume a vtable is simply a list of 
pointers to member functions associated with an object. 
One more quirk is that the other interface need not be implemented by a single 
application. It might be exposed by the OS or a third-party component. Developers 
might be unaware of what else is occurring and, therefore, consider strict context 
handles unnecessary. So you need to keep an eye out for this issue if you identify an 
interface that isn't using strict context handles, and see what functionality other 
interfaces might provide. 
Proprietary State Mechanisms 
Some application developers choose to write their own state-handling code in lieu of 
the mechanisms the RPC layer provides. These mechanisms generally exist for 
historical reasons or compatibility with other systems. As an auditor, you need to 
assess state-handling mechanisms by looking for the following vulnerabilities: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
737 
Predictable (not cryptographically random) session identifiers 
Short session identifiers vulnerable to brute-force attacks 
Discoverable session identifiers (access control failure) 
Session identifiers that leak sensitive information 
Generally, you'll find that custom state mechanisms fail to address at least one of 
these requirements. You might be able to use this information to identify a 
vulnerability that allows state manipulation or bypassing authentication. 
Threading in RPC 
The RPC subsystem services calls via a pool of worker threads. It's an efficient way of 
handling calls in Windows, but it does have some drawbacks. First, an RPC call can 
occur on any thread in the pool, so an RPC server can't expect any thread affinity 
between calls. This means the call should behave the same, regardless of the thread 
it's executing in. Second, an RPC call can be preempted at any time, even by another 
instance of the same call. This behavior can lead to vulnerabilities when access to 
shared resources isn't synchronized properly. Threading and concurrency issues are a 
topic of their own, however, so they are discussed in Chapter 13(? [????.]), 
"Synchronization and State." 
Auditing RPC Applications 
Now that you know the basics of RPC, you can use the following checklist as a 
guideline for performing RPC audits: 
1. Look for any other RPC servers in the same process that might expose 
protocols the developer didn't expect. 
2. If the application doesn't use strict context handles, look for any other 
interfaces that can be leveraged for an attack. 
3. Look for any proprietary state-handling mechanisms, and see whether they 
can be used for spoofing or state manipulation. 
4. Check for weaknesses in the ACLs applied to the protocol sequence. 
5. Look for authentication bypasses or spoofing attacks that are possible because 
of weak transport security. 
6. Look for authentication bypasses in custom authentication schemes, weak use 
of authentication, or the absence of authentication. 
7. Check to see whether state mechanisms are being used to maintain security 
state. If they are, try to find ways to bypass them. 
8. Audit any impersonation to see whether a client can evade it or use it to steal 
the server's credentials. 
9. Pay special attention to possible race conditions and synchronization issues 
with shared resources (discussed in more detail in Chapter 13(? [????.])). 
10. Review all exposed interfaces for general implementation vulnerabilities. If 
the IDL isn't compiled with the /robust switch and interface parameters aren't 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
738 
restricted, you need to spend more time checking for memory corruption 
vulnerabilities. 
RPC Interface Binary Audits 
If you don't have the source code for an RPC service, you need to be able to locate 
RPC interfaces in the corresponding application binaries. This section explains a 
simple technique for locating all relevant methods in an RPC binary. 
First, recall that an RPC server registers its interfaces by using the 
RpcServerRegisterIf() and RpcServerRegisterIfEx() functions. Here's the prototype 
of the RpcServerRegisterIfEx() function: 
RPC_STATUS RPC_ENTRY RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, 
        UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, 
        unsigned int Flags, unsigned int MaxCalls, 
        RPC_IF_CALLBACK_FN *IfCallback) 
The RpcServerRegisterIf() function has a similar prototype. Servers need to use one 
of these functions to indicate what methods are available. These methods are 
specified in the RPC_IF_HANDLE structure, the first argument. This structure isn't 
documented very well, but you can examine it by looking at the IDL-generated C 
server file that creates this structure. Essentially, RPC_IF_HANDLE contains only one 
member, which is a pointer to a RPC_SERVER_INTERFACE structure. This structure has 
the following format (as noted in rpcdcep.h): 
typedef struct _RPC_SERVER_INTERFACE 
{ 
    unsigned int Length; 
    RPC_SYNTAX_IDENTIFIER InterfaceId; 
    RPC_SYNTAX_IDENTIFIER TransferSyntax; 
    PRPC_DISPATCH_TABLE DispatchTable; 
    unsigned int RpcProtseqEndpointCount; 
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint; 
    RPC_MGR_EPV __RPC_FAR *DefaultManagerEpv; 
    void const __RPC_FAR *InterpreterInfo; 
    unsigned int Flags ; 
} RPC_SERVER_INTERFACE, __RPC_FAR * PRPC_SERVER_INTERFACE; 
In a typical binary, this structure looks something like this: 
.text:75073BD8 dword_75073BD8  dd 44h, 300F3532h, 11D038CCh, 2000F0A3h, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
739 
0DD0A6BAFh, 20001h 
.text:75073BD8                                       ; 
DATA XREF: .text:off_75073B88o 
.text:75073BD8                                       ; 
.data:off_7508603Co 
.text:75073BD8                 dd 8A885D04h, 11C91CEBh, 
8E89Fh, 6048102Bh, 2 ; Interface ID 
.text:75073C04                 dd offset DispatchTable 
.text:75073C08                 dd 3 dup(0)           ; 
RpcProtseqEndpointCount, RpcProtseqEndpoint, DefaultMgrEpv 
.text:75073C14                 dd offset InterpreterInfo 
.text:75073C18                 dd 4000001h           ; 
flags 
Of particular interest is the InterpreterInfo field, which points to a MIDL_SERVER_INFO 
structure defined in rpcndr.h as the following: 
typedef struct _MIDL_SERVER_INFO_ 
    { 
    PMIDL_STUB_DESC            pStubDesc; 
    const SERVER_ROUTINE *     DispatchTable; 
    PFORMAT_STRING             ProcString; 
    const unsigned short *     FmtStringOffset; 
    const STUB_THUNK *         ThunkTable; 
    PFORMAT_STRING             LocalFormatTypes; 
    PFORMAT_STRING             LocalProcString; 
    const unsigned short *     LocalFmtStringOffset; 
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO; 
In a binary, the structure looks like this: 
.text:75073C1C InterpreterInfo dd offset pStubDesc   ; 
DATA XREF: .text:75073C14o 
.text:75073C20                 dd offset ServerDispatchTable 
.text:75073C24                 dd offset ProcString 
.text:75073C28                 dd offset FmtStringOffset 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
740 
.text:75073C2C                 dd 5 dup(0) 
The second member, named ServerDispatchTable in this example, contains a pointer 
to a table of all exposed server routines for the interface. To find RPC server routines 
in a binary, use the following steps: 
1.  Find the import for RpcServerRegisterIf() or RpcServerRegisterIfEx() and 
cross-reference to find where it's used. 
2.  Examine the first argument; it points to a single pointer that points to an 
RPC_SERVER_INTERFACE structure. 
3.  Follow the InterpreterInfo structure member in the RPC_SERVER_INTERFACE 
structure. 
4.  Follow the DispatchTable memory in the MIDL_SERVER_INFO structure to the table 
of server routines. 
Voil√†! You're done. Notice all the interesting information you pick up along the way, 
such as whether a callback function is passed to RpcServerRegisterIfEx(), endpoints 
associated with the server interface, format string information, and so on. 
7.8.7 COM 
The Component Object Model (COM) and Distributed Component Object Model 
(DCOM) facilities in Windows provide a framework for developing language- and 
location-independent components. These components can be created and accessed 
from within a process, between different processes on the same computer, or 
remotely over a network. 
Note 
COM has become an umbrella term that encompasses DCOM (remote COM) and other 
COM-related technologies. Previously, the term COM referred to object access and 
manipulation between different processes on the same computer; DCOM extended 
this functionality to make objects accessible over the network. Presently, they can all 
be referred to as COM technologies. 
COM is essentially an object-oriented wrapper for RPC; in fact, DCOM uses RPC for 
method invocation and communication. For the purposes of this discussion, COM and 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
741 
DCOM are viewed more as extensions of RPC. These similarities can help you apply 
what you've already learned about RPC. 
COM: A Quick Primer 
The following sections give you a brief rundown of the COM architecture, in case you 
have limited experience with COM programming. These basics are essential to 
understanding the information that follows on potential security issues in COM 
applications. 
Components 
COM promotes the development of reusable components, much like the use of classes 
in object-oriented programs. Each component provides an interface (or several 
interfaces) that describes a series of methods for manipulating the object. In the 
context of COM, "interface" refers to a contract between COM objects and their clients. 
This contract specifies a series of methods the object implements. 
There are some major differences between a COM object and a class in an 
object-oriented program. COM objects are already precompiled and are accessible 
system-wide to any process that wants to use them. They are language independent 
and available to any application without having to be recompiled. Indeed, COM is a 
binary specification of sorts; it requires that objects export interfaces in a certain 
manner but doesn't care about the internal structure of how those objects can be 
implemented. In addition to being accessible to any language, COM objects can be 
implemented in a variety of languages; their internals are irrelevant as long as they 
adhere to their contracts. 
COM objects are uniquely identified on the system by a globally unique identifier 
(GUID) called a class ID (CLSID). When a COM object is registered on the system, it 
adds a key to the registry with the same name as the object's CLSID. This key is 
stored in HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID. 
Note 
The HKEY_CLASSES_ROOT key is an alias for the 
HKEY_LOCAL_MACHINE\Software\Classes\CLSID, so the same CLSIDs can also be 
found at HKEY_CLASSES_ROOT\CLSID. 
These keys are installed so that the COM subsystem can locate and instantiate objects 
as they're requested. You can view registered COM objects on the system with the 
Registry Editor (regedit.exe), shown in Figure 12-2. 
Figure 12-2. Viewing COM objects with Regedit 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
742 
[View full size image] 
As you can see, quite a few subkeys and values are installed for each CLSID; they're 
described as needed in the following discussion. 
Because CLSIDs are hard to remember and aren't meaningful to people, COM objects 
often have namesaliases that can be used to refer to the object in place of the CLSID. 
These aliases are called program IDs (ProgIDs) and are entirely optional. A program 
ID is stored in the ProgID value in the 
HKEY_LOCAL_MACHINE\Software\Classes\CLSID\ key. A program ID can 
have any format, but the MSDN-recommended format is Program.Component.Version. 
For example, one of the Microsoft Excel component is named Excel.Sheet.8. Of 
course, it would take a long time to look up program IDs if every CLSID key were 
queried to see whether its ProgID matches a request, so another key is used for 
forward lookups: HKEY_LOCAL_MACHINE\Software\Classes\. This key has 
a CLSID value that points to the ProgID's associated class. 
COM objects operate in a client/server architecture; the endpoints of a COM 
connection can be different threads in the same process, threads in different 
processes, or even on different systems. An exposed COM interface is accessed in 
much the same way an RPC function is called. In DCOM, this launching process 
includes starting applications if necessary, applying security permissions, and 
registering DCOM applications as being available on certain endpoints. 
A COM object can be an in-process server or out-of-process server. In-process 
servers are implemented in DLLs that are loaded into the client process's address 
space on instantiation. For the most part, you don't need to worry about in-process 
servers because they are in the caller's address space and security context. Of course, 
ActiveX controls represent a special case of an in-process server, and they are 
discussed in "ActiveX Security" later in this chapter. 
An out-of-process server, however, runs inside its own process space. There are two 
types of out-of-process servers: local servers on the same system as the caller and 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
743 
remote servers on another machine. Communication is performed via IPC primitives 
exposed by the COM runtime. In fact, DCOM uses RPC to transport messages behind 
the scenes. An out-of-process server can potentially run in a different context from 
the client, so it might have additional security considerations. 
Interfaces 
The whole point of COM objects is that they expose interfaces that are accessible to 
any clients that can use their functionality. A COM object can expose any number of 
interfaces, which consist of a series of functions related to the task. Each interface has 
a registered interface ID (IID) that uniquely identifies the interface. IIDs are recorded 
in the registry at HKEY_CLASSES_ROOT\Classes\Interface\. 
This key contains a series of subkeys for each registered interface. As a code auditor, 
you need to examine these interfaces to see what attack surface they expose. 
Each COM interface is derived directly or indirectly from a base class called IUnknown, 
which provides a generic method of interaction with every COM object. Every COM 
object must provide an interface with the following three methods: 
QueryInterface() Used to retrieve a pointer to a COM interface, given the IID 
of that interface 
AddRef() Used to increment the reference count of an instantiated object 
Release() Used to decrement the reference count of an instantiated object and 
free the object when the reference count drops to zero 
The QueryInterface() method is the real core of the IUnknown interface. It provides 
the capability to acquire instances of other interfaces the COM object supports. When 
reading COM documentation and technical manuals, you often encounter references 
to IUnknown. For example, the CoCreateInstance() function takes LPUNKNOWN type as a 
parameter, which allows the function to create an instance of any COM object because 
all COM objects are derived from IUnknown. 
Application IDs 
A collection of COM objects is referred to as a COM application or component. Each 
COM application has a unique ID, called an AppID, used to uniquely refer to a COM 
application on the system. Like CLSIDs, AppIDs are installed in the registry and 
contain a number of subkeys and values for per-application security settings. The 
AppID key provides a convenient location for enforcing security for applications 
hosting multiple COM objects. AppID keys are located in the registry at 
HKEY_LOCAL_MACHINE\SOFTWARE\Classes\AppId. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
744 
AppID keys are also accessible at HKEY_CLASSES_ROOT\AppId. 
Mapping CLSIDs to Applications 
You've learned how to look up registered COM objects in the registry, but how do you 
find the implementation of each object? This information can also be found in the 
registry. The HKEY_LOCAL_MACHINE\Software\Classes\CLSID\ keys have 
one or more of the following values, depending on the threading capabilities of the 
COM object. The values of interest are as follows: 
InprocHandler32 or InprocHandler Used to indicate a handler DLL that provides 
the COM API interface; this DLL is normally ole32.dll (or ole2.dll for 16-bit 
servers). It's rare, although possible, for a COM server to specify its own 
handler. 
InprocServer32 or InprocServer Used to indicate a server DLL that houses the 
implementation of the COM object. This value is used when the COM object is 
an in-process server. 
LocalServer32 or LocalServer Used to indicate an executable that houses the 
implementation of the COM object. It's used when the COM object is an 
out-of-process server. 
OLE 
Object Linking and Embedding (OLE) is the predecessor to modern Windows COM. 
The original version of OLE uses DDE to allow interaction between components of 
different applications. This functionality is still part of the basic COM infrastructure, 
although it doesn't affect the discussions of DCOM. However, it's worth mentioning 
this relationship because the term "OLE" appears in many COM functions and data 
types. 
Automation Objects 
Automation objects are a special subclass of COM objects that originally provided a 
simpler form of IPC for controlling another application (referred to as an automation 
server). For example, Internet Explorer and Microsoft Word expose automation 
interfaces that allow clients to completely control the application and documents it 
contains. Automation servers generally expose scriptable methods, which are 
methods called through an IDispatch interface accepting VARIANT arguments. This 
interface is compatible with scripting languages because it doesn't use language 
specific elements such as object vtables and typed parameters. When a script invokes 
a method on an object, the scripting engine can use the IDispatch interface to ask for 
the unique ID of a method. The ID is then passed along with an array of VARIANT 
arguments via the IDispatch::Invoke() method. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
745 
Threading in COM 
Windows evolved from a simple single-threaded OS to a true multiuser, 
multithreaded OS. This evolution has required some scaffolding to allow older, 
thread-unsafe COM objects to function properly in multithreaded versions of Windows. 
This scaffolding is provided in the form of apartments. 
The historical version of COM is the single-threaded apartment (STA); a COM 
process can have any number of STAs, with each one running on a separate thread. 
The STA uses DDE to perform method calls on objects, thus requiring a window 
message pump to function. The advantage of using the STA is that it synchronizes all 
messages processed by the application. This synchronization makes it fairly easy to 
implement a basic single-threaded COM object. From a security perspective, an STA 
COM object presents unique concerns only if it's running in a privileged context on an 
interactive desktop. These issues have been discussed previously in the sections on 
window messaging and shatter vulnerabilities. 
The multithreaded apartment (MTA) is also referred to as the free threaded 
apartment; a COM process has at most one MTA shared across all MTA objects in the 
process. The COM subsystem makes direct use of the object vtable when dispatching 