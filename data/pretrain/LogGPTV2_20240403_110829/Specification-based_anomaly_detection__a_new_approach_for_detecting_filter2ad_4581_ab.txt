(cid:15)  2 	 is the start state of the EFSA
(cid:15) f 2 	 is the ﬁnal state. In our models, f is a sink state, i.e.,
a state that has no outward transitions.
(cid:15) V is a ﬁnite tuple v1; :::; v of state variables
(cid:15) D is a ﬁnite tuple D1; :::; D, where Di denotes the do-
main of values for the variable vi.
(cid:15) Æ : 	  D   ! 	; D is the transition relation.
Below, we describe our language for specifying EFSA that model
network protocols.
2.1 State Machine Speciﬁcation
State machines speciﬁcations follow the EFSA deﬁnition given
above. The set  (events) are speciﬁed as part of an interface dec-
laration, which lists the events and their argument types. (Interface
declarations are omitted in this paper to conserve space.) Instead
of D, the speciﬁcations deﬁne the set V, as well as the types of
each member of V . Speciﬁcally, the following declarations specify
	; ; f and V .
(cid:15) The (control) states of a state machine may be declared using
states f1; :::; g.
(cid:15) The start state of the state machine can be speciﬁed using the
declaration startstate .
(cid:15) The ﬁnal state of the state machine can be speciﬁed using the
declaration finalstate f.
2Given the volume of information learnt by our approach, manual
inspection would not even be practical.
267event tx(int interfaceId, ether_hdr data);
event rx(int interfaceId, ether_hdr data);
StateMachine ip_in(int in, int ext,
IPaddr in_ip, IPaddr ext_ip) {
/* in and ext refer to internal and external
interfaces. The corresponding IP addresses
are in_ip and ext_ip
*/
states {INIT, PKT_RCVD, DONE};
startstate INIT;
finalstate DONE;
IPaddr src, dst; /* state variables */
timeout 60 seconds {PKT_RCVD};
map rx(ifc, pkt) when (ifc == ext);
map tx(ifc, pkt) when (ifc == in) &&
(pkt.ipsrc == src) && (pkt.ipdst == dst);
rx(ifc, pkt)|(ifc == ext) && (state == INIT)
&& (pkt.ipdst != in_ip) && (pkt.ipdst != ext_ip)
--> state=PKT_RCVD; src=pkt.ipsrc; dst=pkt.ipdst;
rx(ifc, pkt)|(ifc == ext) && (state == INIT)
&& ((pkt.ipdst==in_ip) || (pkt.ipdst==ext_ip))
--> state = DONE;
tx(ifc, pkt)|(ifc == in) && (state == PKT_RCVD)
--> state = DONE;
timeout|(state == PKT_RCVD) --> state = DONE;
}
Figure 2: IP machine speciﬁcation.
(cid:15) The variables in V are declared using syntax similar to vari-
able declarations in typical programming languages.
The transition relation Æ is speciﬁed using rules of the form:
ex1; :::; xjcd ! aci
Here e is an event name, and the variables x1; :::; x denote the
arguments of this event. The expression cd should evaluate to a
boolean value, and can make use of common arithmetic and rela-
tional operators. It involves the variables in V , the event arguments,
and the distinguished variable ae that refers to the current con-
trol state of the EFSA. The aci component consists of actions
that will be taken when the event e occurs, and cd evaluates to
true. Allowable actions include assignments to state variables (i.e.,
variables in V ) and invocations of external functions. The action
must also include an assignment to ae.
In general, protocol state machines are non-deterministic. We
simulate non-determinism by cloning k copies of the state machine
whenever it can make one of k different transitions. (The cloning
operation duplicates not only the control state, but also all of the
variables in V .) Clearly, we cannot have a situation where the num-
ber of state machine instances increases forever. To deal with this
problem, we automatically delete state machine instances that reach
their ﬁnal state. Note that ﬁnal states are some what different from
“accepting states” of an FSA – they are similar to “sink” states from
which no progress can be made.
In general, there can be many instances of a state machine at
runtime. Thus, for each incoming event, we may have to search
through all of these state machine instances to discover those that
can make a transition. This operation can be very expensive, so
we use a mechanism that speeds up this operation in a situation
that arises frequently: often, we use one state machine instance to
track a “session,” and the session to which an event applies can
be computed efﬁciently from the event parameters. The following
language construct is used to specify such mapping:
map eveeveAg when cdii
Here eve can be a primitive or an abstract event that is deﬁned
without the use of any conditions. The cdii component must
be of a special form: it should be a conjunction of equality tests,
where the left-hand side of the test is an expression on eveAg
and the right-hand side is a state variable. This restriction is im-
posed so that the identiﬁcation of the right state machine instance
can be implemented using a hash-table lookup.
Our language also permits timeout transitions to be described.
Timeouts values can be declared using one or more declarations of
the form:
timeout  in f1; :::; g
This declaration states that a state machine will stay in one of the
states 1; :::;  for at most  seconds. At the end of this period, a
transition associated with the special event timeout will be taken.
Figure 2 shows the complete speciﬁcation of the IP state machine
shown in Figure 1.
3. SPECIFICATION DEVELOPMENT
Unlike software in general, network protocols are designed through
a careful and deliberate process. The design is captured in a pre-
cise fashion in standards documents. Such documents provide an
obvious starting point for our state machine speciﬁcations.
In our work, we have tended to abstract from this speciﬁcation
to capture only the essential details of most protocols. Such in-
formation may be readily obtained from standard texts on network
protocols rather than (the much longer) Internet RFCs. While strict
adherence to protocol standards documents is possible, this may
not be desirable for two reasons. First, developing precise speciﬁ-
cations would entail more effort than that required for more abstract
speciﬁcations. Second, with strict speciﬁcations, there is always the
possibility that due to minor difference in interpretation, some traf-
ﬁc may be classiﬁed as invalid by the state machine, and hence not
processed properly. Furthermore, such incorrect processing may
happen with some TCP implementations and not others. Using a
more abstract speciﬁcation, where the state machines accept a su-
perset of what is permitted by the standards, provides a satisfactory
solution to these problem.
We conclude this section with a speciﬁcation of the TCP state
machine, as observed on a gateway connecting an organization’s
internal network to the Internet. Our speciﬁcation is depicted pic-
torially in Figure 3. A new session starts in the LISTEN state. Data
transfer takes place in the connection ESTABLISHED state. If the
TCP connection is initiated from an external site, then the state ma-
chine goes through SYN RECD and ACK WAIT states to reach the
ESTABLISHED state. If the connection is initiated from an inter-
nal machine, then the ESTABLISHED state is reached through the
SYN SENT state.
In order to tear down the connection, either side can send a TCP
segment with the FIN bit set. If the FIN packet is sent by an internal
host, the state machine waits for an ACK of FIN to come in from
the outside. Data may continue to be received till this ACK to the
FIN is received. It is also possible that the external site may initiate
a closing of the TCP connection. In this case we may receive a FIN,
or a FIN + ACK from the external site. This scenario is represented
by the states FIN WAIT 1, FIN WAIT 2, CLOSING, CLOSING 1
and CLOSING 2 states. Our state machine characterizes receive
and transmit events separately, and this necessitates additional in-
termediate states that are not identiﬁed in the TCP RFCs.
If the connection termination is initiated by an external host,
note that the TCP RFCs do not have the states CLOSE WAIT 1,
268Packet Received
Packet Sent
Packet Sent or Recd
LEGEND
T2
SYN
T1
SYN
RST
T8
LISTEN
T4
SYN
T32
SYN_RECD
T3
ACK of SYN, SYN
T29
FIN
T34
ACK_WAIT
T6
ACK
T5
ACK of SYN, SYN
SYN_SENT
T33
ACK of SYN, SYN, FIN
T31
T7
ACK of SYN, FIN
T30
FIN
T11 FIN
T35
FIN_
WAIT_1
T12
FIN
CLOSING_1
T17
ACK
T9
ESTABLISHED
T20
RST or SYN
T10
FIN
T26
ACK
LAST_
ACK_1
T24
ACK
of FIN
T21
FIN
T 2 5
A C K of FIN, FIN
FIN
T23
CLOSE_
WAIT_1
T39
T22
ACK
of FIN
CLOSE_
WAIT
T41
A
C
T
16
K of FIN, FIN
T15
ACK
of FIN
CLOSING
LAST_
ACK_2
T36
T40
T13
ACK
of FIN
T37
FIN_
WAIT_2
FIN
T14
CLOSING_2
T38
T18
ACK
of FIN
ACK T27
of FIN
LAST_ACK
T42
T19
ACK
CLOSE
T28
ACK
Figure 3: TCP Protocol State Machine
CLOSE WAIT 2, LAST ACK 1, and LAST ACK 2 since they deal
with packets observed at one of the ends of the connection. In that
case, it is reasonable to assume that no packets will be sent by a
TCP stack implementation after it receives a FIN from the other
end. In our case, we are observing trafﬁc at an intermediate node
(gateway), so the tear down process is similar regardless of which
end initiated the tear down.
To reduce clutter, the following classes of abnormal transitions
are not shown: (a) abnormal conditions under which a TCP con-
nection may be terminated, including when an RST packet (with
correct sequence number) is sent by either end of the connection,
as well as timeouts, (b) conditions where an abnormal packet is
discarded without a state transition, e.g., packets received with-
out correct sequence numbers (after connection establishment) and
packets with incorrect ﬂag settings.
4. ANOMALY DETECTION
Information sources such as network packets pose a signiﬁcant
challenge for anomaly detection techniques for two reasons. First,
the volume of data, and consequently, the space of possible statisti-
cal properties of interest, is extremely large. Second, raw network
packet data tends to be unstructured, making it difﬁcult to distin-
guish meaningful information from “background noise.” To deal
with this problem, the raw packet data is usually processed to ex-
tract important “features” that are deemed to be of interest. This
process greatly reduces the amount of data to be processed by an
anomaly detection system. Moreover, it identiﬁes important infor-
mation from the packet streams, while discarding less useful infor-
mation.
The importance of good feature selection is acknowledged by
most researchers in anomaly detection. Currently, feature selection
is driven by human expert’s knowledge and judgment regarding
what constitutes “useful information” for detecting attacks. While
human experts are often in a position to identify some useful fea-
tures, it is far from clear that they can do a comprehensive job.
Often, their notion of a useful feature is inﬂuenced by their knowl-
edge of known attacks. Consequently, they may not necessarily
select features that are useful in detecting unknown attacks.
In our approach, a higher degree of automation is brought to the
process of feature selection. Speciﬁcally, (statistical) properties of
packet sequences are mapped into (statistical) properties associated
with the transitions of the state machine. Since the number of tran-
sitions is relatively small as compared to the number of possible
combinations of network packets, this mapping reduces the space
of possible features. At the same time, our experiments provide
evidence that this reduction does not decrease detection efﬁcacy.
4.1 Mapping packet sequence properties to
properties of state-machine transitions
As mentioned earlier, speciﬁcations divide up packet sequences
into traces, where each trace corresponds to a path in the state ma-
chine. For instance, the IP state machine described above parti-
tions the sequence of packets received at the external interface of
the gateway or transmitted at the internal interface into one of the
following kinds of traces:
(cid:15) rx(ext, pkt) where pkt is destined for the gateway
(cid:15) rx(ext, pkt1) tx(int, pkt2) where pkt2 is a packet
that is relayed by the gateway in response to receiving pkt1
269(cid:15) rx(ext, pkt1) timeout, where a packet is received by
the gateway with destination address other than that of the
gateway, but the packet is not relayed by the gateway (usually
due to a packet error, such as invalid IP address, or a gateway
error/failure)
This partitioning brings a lot of structure into what would otherwise
be a long, unstructured sequence of packets.