(cid:70) (cid:82) (cid:80) (cid:80)(cid:76)(cid:87)(cid:11)(cid:48)(cid:45)
(cid:70) (cid:82) (cid:80) (cid:80)(cid:76)(cid:87)(cid:11)(cid:48)(cid:45)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:70) (cid:82) (cid:80) (cid:80)(cid:76)(cid:87)(cid:11)(cid:48)(cid:45)
(cid:70) (cid:82) (cid:80) (cid:80)(cid:76)(cid:87)(cid:11)(cid:48)(cid:45)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:66)(cid:76)(cid:81)(cid:73)(cid:82)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:71)(cid:72)(cid:79)(cid:72)(cid:87)(cid:72)(cid:11)(cid:39)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66) (cid:86)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:45)(cid:12)
(cid:55) (cid:40) (cid:66)(cid:70)(cid:79)(cid:72)(cid:68)(cid:81)(cid:88)(cid:83)(cid:66)(cid:90)(cid:85)(cid:76)(cid:87)(cid:72)(cid:11)(cid:39)(cid:15)(cid:3)(cid:48)(cid:45)(cid:12)
Figure  3.   S ecure  data  deletion.    M is   the  updated  metadata 
block; D is the data block in various stages of secure deletion; 
MJ  is  the  metadata  journal  block  that  corresponds  to  the 
updated metadata block M. 
TAP  will  create  the  i-node  write  entry  and  pair  it  with  the 
corresponding  secure-deletion  reminder  to  hold  the  deletion  list.  
When  the  write  entry  is  copied via  TE_report_copy(),  reminders 
are transferred to the journal copy to ensure that secure deletions 
are applied to the matching instance of the i-node update. 
When the block-layer interface receives the request to commit 
the update of the sensitive i-node to the journal, the interface calls 
TE_check_info()  and  retrieves  the  sensitive  status  of  the  i-node, 
along  with  the  deletion  list.  The  data  areas  are  then  securely 
deleted before the i-node update is securely written to the journal.  
Secure  metadata  deletions:    During  a  file  truncation  or 
deletion,  ext3  also  deallocates  extended  attribute  block(s)  and 
indirect block(s).  Those blocks are attached to the i-node’s list of 
secure-deletion reminders as well. 
444
To securely delete an i-node or a file name in a directory, the 
block  containing  the  entry  is  securely  updated  and  reported  via 
TE_report_write().  Additionally, we need to zero out the i-node 
and  variable-length  file  name  in  the  in-memory  copies,  so  that 
they  will  not  negate  the  secure  write  performed  at  the  storage-
management layer. 
If a directory is deleted, its content blocks will be deleted in 
the same way as the content from a file. 
Miscellaneous  cases:    Committed  transactions  might  not  be 
propagated  instantly  to  their  final  locations.    Across  committed 
transactions,  the  same  metadata  entry  (e.g.,  i-node)  might  have 
changed  file  ownership  and  sensitive  status.    Thus,  jbd  may 
consolidate, say, a non-sensitive update 1, sensitive update 2, and 
non-sensitive  update  3  to  the  same  location  into  a  non-sensitive 
update.    As  a  remedy,  once  a  write  entry  is  marked  sensitive,  it 
remains sensitive until securely written. 
5.3  Enhanced FTL Storage-management 
Layer  
We modified the existing Linux INFTL to incorporate secure 
deletion.    INFTL  uses  a  stack-based  algorithm  to  remap  logical 
pages to physical ones.   
5.3.1 
INFTL Extensions and Optimizations 
INFTL remaps at the flash block level, where each 16-Kbyte 
flash  block  contains  32  512-byte  pages,  with  a  16-byte  control 
area  per  page.    A  remapped  page  always  has  the  same  offset 
within a block. 
A NAND page can be in three states:  empty, valid with data, 
or invalid.  An empty page can be written, but an invalid page has 
to be erased to become an empty page. 
INFTL in-place updates:  INFTL uses a stack of flash blocks 
to  provide  the  illusion  of  in-place  updates.    When  a  page  P1  is 
first written, an empty flash block B1 is allocated to hold P1.  If 
P1  is  written  again  (P1’),  another  empty  flash  block  B2  is 
allocated  and  stacked  on  top  of  B1,  with  the  same  page  offset 
holding P1’.  Suppose we write P2, which is mapped to the same 
block.  P2 will be stored in B2 because it is at the top of the stack, 
and its page at page offset for P2 is empty. 
The stack will grow until the device becomes full; it will then 
be flattened into one block containing only the latest pages to free 
up space for garbage collection. 
INFTL  reads:    For  a  read,  INFTL  traverses  down  the 
appropriate stack from the top and returns the first valid page.  If 
the  first  valid  page  is  marked  deleted,  or  if  no  data  are  found, 
INFTL will return a page of zeros. 
Secure-deletion  extensions: 
  Our  added  secure  write 
command  is  similar  to  the  current  INFTL  in-place  update.  
However, if a stack contains a sensitive page, we set its maximum 
depth to 1 (0 is the stack top).  Once it reaches the maximum, the 
stack  must be  consolidated to depth 0.  When consolidating, old 
blocks  are  immediately  erased  via  the  flash  erase  command, 
instead of being left behind.   
Since the existing stack algorithm already tracks old versions, 
we  also  implemented  the  delayed-deletion  optimization,  which 
allows data blocks to defer the  secure-write consolidation to file 
deletion  time.    Basically,  the  maximum  depth  is  no  longer 
bounded.    Delaying  secure  deletion  for  metadata  is  trickier  and 
will be investigated in future work.   
A  secure  delete  is  a  special  case  of  a  secure  write.    When  a 
page is to be securely deleted, an empty flash block is allocated on 
top  of  the  stack.    All  the  valid  pages,  minus  the  page  to  be 
securely  erased,  are  copied  to  the  new  block.    The  old  block  is 
then erased. 
445
5.3.2  Disabled storage-management optimizations 
Because  jbd  does  not  allow  reordering  to  violate  file  system 
constraints and our flash has no built-in cache, we do not disable 
these optimizations.  
6.  VERIFICATION  
We  (1)  tested  the  basic  cases,  assumptions,  and  corner  cases 
discussed in §4.4 and (2) verified the state space of TAP.   
6.1  Basic Cases  
Sanity  checks:    We  verified  common  cases  of  secure  writes 
and deletes for empty, small, and large files and directories using 
random file names and sector-aligned content.  After deletion, we 
scanned  the  raw  storage  and  found  no  remnants  of  the  sensitive 
information.    We  also  traced  common  behaviors  involving 
sensitive and non-sensitive objects; when the operation included a 
source and a destination, we tested all four possible combinations.  
The  operations  checked 
to  new 
directories, replacing objects, and making and updating symbolic 
and  hard  links.    We  also  tested  sparse  files.    In  all  cases,  we 
verified that the operations behaved as expected. 
included  moving  objects 
Simulation  of  workload:    We  ran  the  PostMark  benchmark 
[16] with default settings, modified with 20% of the files marked 
sensitive,  with  random  content.    Afterwards,  we  found  no 
remnants of sensitive information.   
Missing updates:  To check that all update events and block 
types  are  reported,  we  looked  for  errors  such  as  unanticipated 
block-type changes and unfound write entries in TAP, etc., which 
are  signs  of  missing  reports  from  the  file  system.    Currently,  all 
updates are reported. 
Cases related to file-system-consistency properties:  For cases 
derived from the reuse-ordering property, we created an ext3 file 
system with most of its i-nodes and blocks allocated, to encourage 
reuse.    Then  we  performed  tight  append/truncate  and  file 
creation/deletion loops with alternating sensitive status.  We used 
uniquely  identifiable  file  content  to  detect  sensitive  information 
leaks and found none. 
For  pointer-ordering-related  cases,  we  verified  our  ability  to 
recover  from  basic  failures  and  remove  remnants  of  sensitive 
information.    We  also  verified  that  the  page  cache  prohibits 
unreferenced data blocks from being written to the storage.  
Since the page ID part of GUIDs increases monotonically, we 
can  use  this  property  to  detect  illegal  reordering  of  sensitive 
updates for the cases derived from the non-rollback property.  For 
consolidations  within  a  transaction,  we  used  tight  update  loops 
with  alternating  sensitive  modes.    For  consolidations  across 
transactions,  we  used  tight  file  creation/deletion  loops  with 
alternating  sensitive  modes.    We  checked  all  consolidation 
orderings 
non-
sensitive/sensitive/non-sensitive). 
6.2  TAP Verification  
requests 
(e.g., 
three 
for 
up 
to 
We enumerated the TAP state-transition table and verified its 
correctness via two-version programming.   
State representation:  We exploited TAP’s properties to trim 
the state space.  First, a write entry will not consolidate with other 
write entries.  This property ensures that each sensitive update is 
carried  out  unless  explicitly  cancelled.    Various  consolidation 
behaviors  (e.g., page  cache)  are  achieved  by  performing  updates 
directly  to  the  write  entry.    Second,  the  next  state  transition  is 
based on current write entries of different types  within a current 
state (plus inputs).  With those two properties, we can reduce the 
representation of a state to at most one write entry of each type, 
and explore all state-generating rules.   
To  illustrate,  each  state  holds  one  write  entry  for  nine  block 
types:  data, i-node, other metadata, journal copy of data, journal 
copy of i-node, journal copy of other metadata, copy of data, copy 
of  i-node,  and  copy  of  other  metadata.    Additionally,  each  write 
entry  has  four  status  bits:    allocated,  sensitive,  having  reminder 
attached, and ready to be deleted from the journal.  Thus, a state is 
a 9x4 matrix and can be represented as 36 bits, with 236 states.   
blocks,  the  slowdown  factor  can  be  reduced  to  3.4,  which  is 
comparable to disk-based secure-deletion numbers [14].   
We noticed some feedback amplification effects.  Longer runs 
mean additional memory page flushes, which translate into more 
writes,  which  involve  more  reads  and  erases  as  well  and  lead  to 
even  longer  running  times.    Thus,  minor  optimizations  can 
improve performance significantly. 
the 
input  parameters. 
State transitions:  Each interface call triggers a state transition 
based  on 
the  first 
TE_report_write()  on  a  non-sensitive  i-node  will  transition  from 
the  empty  state  (a  zero  matrix),  say  S0,  to  a  state S1,  where  the 
allocated  bit  for  the  i-node  is  set  to  1.    If  TE_report_write()  is 
called again to mark the i-node as sensitive, S1 is transitioned to a 
new state S2, with allocated and sensitive bits set to 1s.   
  For  example, 
State-space  enumeration: 
  To  enumerate  states  and 
transitions, we permuted all TAP interface calls with all possible 
input parameters to the same set of write entries.  A small range of 
GUIDs  was  used  so  that  each  write  entry  could  have  a  unique 
GUID, but GUID collisions were allowed to test error conditions.  
Given  that  the  enumeration  step  can  be  viewed  as  traversing  a 
state-space tree in breadth-first order, the tree fanout at each level 
is the total number of interface call-parameter combinations (261).  