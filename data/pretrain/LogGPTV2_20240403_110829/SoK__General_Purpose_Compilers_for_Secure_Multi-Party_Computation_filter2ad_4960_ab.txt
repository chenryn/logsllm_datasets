Garbled circuits are so useful and ubiquitous in cryp-
tography that it has been argued that circuit garbling
should be considered as a fundamental cryptographic
primitive (like encryption or signatures) rather than as
a protocol for two-party secure computation [13].
Key Features: Circuit garbling is inherently a two-
party protocol, and requires only a constant number of
rounds of communication (independent of the circuit
depth). The number of (expensive) public-key operations
depends only on the input size (OT is a public-key prim-
itive) and the number of private key operations depends
on the number of gates. The total communication cost
is proportional to the size of the circuit. Since garbled
circuit protocols represent each gate by its truth table, the
circuit size grows quadratically with the ﬁeld size when
garbling arithmetic circuits. Thus almost all garbled
circuits protocols operate on Boolean circuits. There are
different methods for garbling arithmetic circuits over
large ﬁelds [4], but these have never been implemented.
B. Multi-party circuit-based protocols
The GMW [68], BGW [16] and CCD [31] protocols
allow an arbitrary number of parties to securely compute
a function represented as a circuit. In these protocols,
each party uses a linear secret sharing scheme to share
its input, and the parties engage in a protocol to compute
the answer gate-by-gate. Each gate computation securely
transforms secret-shares of the gate’s inputs to secret-
shares of the gate’s outputs. For each addition gate in
the circuit, participants can locally compute shares of the
output using the linearity of the secret-sharing scheme.
Evaluating multiplication gates requires communication,
and the schemes differ in how they handle multiplication.
The GMW protocol can evaluate either Boolean or
arithmetic circuits, and multiplication gates are executed
using Oblivious Transfer for Boolean circuits and with
Oblivious Polynomial Evaluation [102] or Oblivious
Linear Evaluation [51] for arithmetic circuits. See Ishai
et al. [81] for a summary of methods for securely
computing multiplication gates.
Oblivious communications for multiplication gates
dominate the cost of circuit evaluation. All practical
GMW-based implementations have taken steps to reduce
their overhead. Whether evaluating arithmetic or Boolean
circuits, the approach is the same: in an ofﬂine pre-
computation phase, the participants generate correlated
randomness (or receive it from a trusted dealer), and in
the online phase, they use these random correlations as
masks, or one-time-pads, to compute shares of the output
of a multiplication gate based on the shares of the inputs.
Boolean-circuit GMW-based protocols use OT-
extension [78] to pre-compute ROT correlations, which
are then consumed in the online phase of the protocol.
Arithmetic-circuit GMW-based protocols usually gener-
ate some form of “Beaver Multiplication Triples” (secret
shares of random triples (a, b, a · b), where a, b are ﬁeld
elements) [10] that are used as masks in the online phase.
Information-theoretic protocols, like BGW [16] and
CCD [31] rely on secret-sharing schemes supporting
strong multiplication [40], [33], [29], [41] rather than
on public-key primitives. These protocols can be faster,
since they do not require computationally expensive
public-key operations, but require an honest majority
of participants. They generally do not beneﬁt from
including a pre-computation phase of the protocol.
Key Features: Multi-party circuit-based protocols can
support an arbitrary number of participants. The number
of rounds of communication is proportional to the mul-
1223
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
tiplicative depth of the circuit, and the total amount of
communication depends on the number of multiplication
gates in the circuit. These protocols allow independent
computation parties to receive input and pass output to
other parties without compromising security.
C. Hybrid models
Recent systems have moved away from a strict cir-
cuit representation and instead use a hybrid model,
where optimized subprotocols for common operations
are stitched together (possibly using traditional circuit-
based operations). These hybrid systems often represent
intermediate values as secret shares over a large ﬁnite
ﬁeld. They may use a mix of information-theoretic and
cryptographic protocols, and as such,
the number of
computation parties and threat models vary.
Hybrid models allow for very different performance
characteristics than strict circuit-based models. For ex-
ample, in a ﬁnite ﬁeld, operations like comparisons, bit-
shifts, and equality tests are expensive to represent as
an arithmetic circuit. However, specialized sub-protocols
that operate on secret shares (e.g., [44], [45], [39]) can
compute a sharing of the result far more efﬁciently.
D. Alternative methods
Fully homomorphic encryption [66] provides an al-
ternative method for securely computing functions en-
coded as arithmetic circuits. There are several libraries
implementing fully homomorphic encryption including
HELib [71], PALISADE [114] and SEAL [113]. We do
not include these in our comparisons. There are also
efforts to garble RAM-model programs [98], [67], [61],
instead of circuits, but these have not been implemented.
IV. FRAMEWORKS SURVEY
We survey eleven general-purpose MPC compiler
frameworks, all of which follow the same general ap-
proach: ﬁrst, a compiler converts a program written in a
specialized, high-level language to an intermediate rep-
resentation (often a circuit). Then the circuit is passed as
input to a runtime, which executes an MPC protocol and
produces an output. We survey two compilers (Frigate
and CBMC-GC) that do not have a runtime component.
Table I gives basic information about these frame-
works, including protocol type, security settings, avail-
ability, and some usability features such as documenta-
tion. We limit our scope to recent work: each framework
has had a major update since 2014. We do not consider
frameworks that are primarily protocol implementations:
all the projects included have a developed front-end. We
also do not consider standard libraries and APIs related
to secure computation. In many cases, we only consider
the latest work by a research group.
These frameworks are typically introduced in an aca-
demic, peer-reviewed Paper. Although many develop a
custom or optimized protocol, we group them broadly
into Protocol Families as described in Section III: Gar-
bled Circuits (GC), Multi-party Circuit protocols (MC),
and Hybrid models (Hy). We also note the number of
computation Parties Supported in a protocol evaluation.
We identify two main threat models: Semi-honest
adversaries execute the protocol correctly but attempt to
glean additional information from the data they receive.
A Malicious adversary may break the protocol arbi-
trarily in order to learn information about other inputs
or to cause the protocol to output an incorrect result.
In practice, security against a malicious adversary is
implemented as a “malicious-with-abort” scheme, where
the protocol aborts if malicious activity is detected; a
malicious adversary cannot cause an incorrect answer,
but may result in no answer at all. These descriptors do
not apply to frameworks that do not execute a secure
computation. We note whether the framework allows
Mixed-Mode computation: a way to execute both secure
and insecure operations in a single program.
In all tables, partial support is indicated by a (cid:2)(cid:3) symbol;
these limitations are explained in detail later in the text.
A. Engineering challenges
Many protocols use a circuit-based model to represent
the function being computed. This has the advantage that
circuit-based computations are input independent and
thus the run-time of the protocol leaks nothing about the
user inputs. However, using a circuit model introduces
serious challenges and limitations that are present to
some degree in all of the frameworks we tested.
Arithmetic circuits operate over a ﬁnite ﬁeld whose
size must be set in advance, and must be large enough to
prevent overﬂow (which will vary by application). Arith-
metic circuits do not natively support non-arithmetic
operations like comparisons and equality checks.
Boolean circuits need to redeﬁne basic operations for
every bit width: supporting arithmetic on n-bit integers
in such a protocol requires implementing n-bit addition
and multiplication circuits. We found no standardization
in this area, and most Boolean circuit compilers design
and implement
their own arithmetic operations. This
leads to many restrictions on acceptable programs, and
most Boolean-circuit-based frameworks do not support
arbitrary bit-width operations.
Compiling high-level programs into circuits requires
unrolling all loops and recursive calls. For privacy, the
number of loop iterations and recursion depth cannot
depend on private inputs. In some situations, static anal-
ysis techniques can infer loop termination conditions, but
most compilers do not support such analysis, and instead
force the programmer to manually deﬁne loop bounds at
compile time. Few compilers support recursion.
1224
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
EMP-toolkit
Obliv-C
ObliVM
TinyGarble
Wysteria
ABY
SCALE-MAMBA
Sharemind
PICCO
Frigate
CBMC-GC
Protocol
family
Paper
GC
[122]
GC
[129]
GC
[97]
[118]
GC
[111] MC
[48]
-
[24]
[134]
[101]
[77]
GC,MC
Hy
Hy
Hy
-
-
supported
docs
support
code
docs
Mixed-mode
source
Semi-honest
Malicious
Language
Example
Example
Online
Parties
Open
Last
major update
2
2
2
2
2+
2
2+
3
3+
2+
2+
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
-
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:3)
(cid:3)
-
-
(cid:3)
(cid:4)
(cid:3)
(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:2)(cid:3)
(cid:3)
(cid:3)
(cid:2)(cid:3)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
09/2018
06/2018
02/2016
10/2018
10/2014
10/2018
10/2018
09/2018
10/2017
05/2016
05/2017
TABLE I: A summary of deﬁning features and documentation types. Partial support ((cid:2)(cid:3)) is explained in Section V-A.
Conditional operations on secret data can reveal which
branch was chosen if the branches take different amounts
of computation, so they are typically implemented as a
multiplexer, where both branches are evaluated. Simi-
larly, a simple array lookup on a private index must be
expanded into a linear-size multiplexer circuit. Frigate,
CBMC-GC, and PICCO implement private indexing
in this way. Oblivious RAM [69] provides a method
for making RAM access patterns data independent, but
few frameworks have ORAM support, either natively
(ObliVM and SCALE-MAMBA) or via a library (Obliv-
C). Most
languages do not even allow private array
indexing syntactically: if i is a “secret” integer and v is
a “secret” array, then v[i] is not valid syntax.
Balancing transparency and ﬂexibility is a key chal-
lenge for the MPC compiler designer. MPC protocols
often have very different performance characteristics
than the corresponding insecure computation, and a
compiler that completely hides these differences from
the end-user (e.g. automatic multiplexing) in order to
provide a more versatile, expressive high-level language
can lead developers to write code that is not “MPC-
friendly.” Alternately, a framework that provides direct
access to different back-end representations assumes
a high degree of cryptographic expertise on the part
of end-users but allows expert users to write highly
optimized MPC protocols. It is possible to provide both
expressiveness and protocol efﬁciency without requiring