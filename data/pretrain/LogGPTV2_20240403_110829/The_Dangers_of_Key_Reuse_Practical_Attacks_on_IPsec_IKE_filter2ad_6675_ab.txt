signatures, optionally together with their certiﬁcates. An
exact protocol ﬂow diagram for this mode is given in Fig-
ure 13 in Appendix A.
Public Key Encryption Based Authentication. This
mode requires that both parties exchanged their public
keys securely beforehand (e. g. with certiﬁcates during
an earlier handshake with signature based authentica-
tion). RFC 2409 advertises this mode of authentication
with a plausibly deniable exchange to raise the privacy
level.
In this mode, messages three and four exchange
nonces and identities as ancillary information (see Fig-
ure 4).
In contrast to the signature based mode, they
are encrypted using the public key of the respective
other party. The encoding format for these ciphertexts
is PKCS #1 v1.5. For veriﬁcation, both parties exchange
their MAC values.
Revised Public Key Encryption Based Authentica-
tion. The PKE based mode of authentication requires
both parties to perform two public- and two private-key
operations. To reduce this computational overhead, the
revised public key encryption based mode of authentica-
tion (RPKE) was invented (see Figure 8).
This mode still encrypts the nonces nI and nR with the
other party’s public key using PKCS #1 v1.5. However,
the identities are encrypted with ephemeral symmetric
keys keI and keR that must not be confused with ke, which
is derived later in the handshake. keI and keR are derived
from each party’s nonces and cookies. The rest of the
handshake is identical to the non-revised mode.
used for authentication. This can be implemented with a
(low or high entropy) password both parties know. The
PSK is used to derive k from the nonces nI and nR, which
are exchanged as ancillary information (Figure 12). The
rest of the handshake is identical to the public key en-
cryption based modes.
IKEv2
2.3
The structure of IKEv2 [24, 25] is fundamentally differ-
ent from IKEv1 (cf. Figure 2) – Phase 1 and Phase 2
are partially interleaved, and Phase 2 is reduced to a
two-message protocol. For our analysis it is only im-
portant that IKEv2 (cf. Figure 6) shares two authentica-
tion methods with IKEv1, and that we can directly apply
our attacks to impersonate an IPsec device in Phase 1 of
IKEv2.
3 Bleichenbacher Oracles
Bleichenbacher’s attack is a padding oracle attack
against RSA PKCS #1 v1.5 encryption padding, which
is explained in more detail in Appendix B. If an imple-
mentation allows an attacker to determine if the plain-
text of a chosen RSA ciphertext starts with the two bytes
0x00 0x02, then a Bleichenbacher attack is possible. In
his seminal work [9], Bleichenbacher demonstrated how
such an oracle could be exploited:
Basic Algorithm.
In the most simple attack scenario,
attackers have eavesdropped a valid PKCS #1 v1.5 ci-
phertext c0. To get the plain message m0, the attackers
issue queries to the Bleichenbacher oracle O:
(cid:40)
O(c) =
1
0
if m = cd mod N starts with 0x00 0x02
otherwise
If the oracle answers with 1, the attackers know that
2B ≤ m ≤ 3B− 1, where B = 28((cid:96)m−2) where (cid:96)m is the
byte-length of message m. The attackers can then take
advantage of the RSA malleability and generate new can-
didate ciphertexts by choosing a value s and computing
c = (c0 · se) mod N = (m0 · s)e mod N.
The attackers query the oracle with c.
If the or-
they increment s and repeat
acle responds with 0,
the previous step. Otherwise, the attackers learn that
2B ≤ m0 · s− rN < 3B for some r. This allows the at-
tackers to reduce the range of possible solutions to:
PSK Based Authentication.
If initiator and responder
do not have asymmetric keys, symmetric PSKs can be
2B + rN
s
≤ m0 <
3B + rN
s
570    27th USENIX Security Symposium
USENIX Association
The attackers proceed by reﬁning guesses for s- and r-
values and successively decreasing the size of the inter-
val containing m0. At some point, the interval will con-
tain a single valid value, m0. Bleichenbacher’s original
paper [9] describes this process in further detail.
Signature Forgery Using Bleichenbacher’s Attack.
It is well known that in the case of RSA, performing a
decryption and creating a signature is mathematically the
same operation. Bleichenbacher’s original paper already
mentioned that the attack could also be used to forge
signatures over attacker-chosen data. In two papers by
Jager et al. [19, 20], this has been exploited for attacks
on XML-based Web Services, TLS 1.3, and Google’s
QUIC protocol. The ROBOT study [10] used this at-
tack to forge a signature from Facebook’s web servers as
proof of exploitability.
Optimized Bleichenbacher Attack In 2012, Bardou
et al. [7] presented an optimization of the standard Blei-
chenbacher attack by trimming the initial space for m0.
They divide a ciphertext by an integer t by multiplying it
with t−e mod N with e being the public exponent of the
oracle.
In case the original plaintext was divisible by t, then
the multiplication c0 · ue · t−e is equal to m0
t under the
assumption that m0 and m0 · ut−1 are PKCS #1 v1.5 con-
forming. Note, that the value u and t must be coprime
integers with u < 2
3t and t < 2N
9B .
In order to ﬁnd a suitable amount of trimmer values
that result in PKCS #1 v1.5 conforming messages, we
need to calculate a few thousand t and u values, satis-
fying the above requirements. After that, we get a set
of trimmer values shrinking the m0 search space into
smaller chunks of 2B· t
4 Attack Outline
u ≤ m0 < 3B· t
u.
Bleichenbacher attacks [9] are adaptive chosen cipher-
text attacks against RSA-PKCS #1 v1.5. Though the at-
tack has been known for two decades, it is a common
pitfall for developers [10, 27]. The mandatory use of
PKCS #1 v1.5 in two ciphersuite families – the PKE
(Figure 4) and RPKE (Figure 8) authentication meth-
ods – raised suspicion of whether implementations resist
Bleichenbacher attacks.
4.1 Bleichenbacher Oracles in IKEv1
PKE authentication is available and fully functional
in Cisco’s IOS (Internetwork Operating System).
In
Clavister’s cOS and ZyXEL’s ZyWALL USGs (Uni-
ﬁed Security Gateways), PKE is not ofﬁcially avail-
Figure 4: IKEv1 in Phase 1 using main mode with PKE
based authentication. Differences to Figure 3 are high-
lighted.
able. There is no documentation and no conﬁguration
option for it; therefore, it is not fully functional. Never-
theless, these implementations processed messages us-
ing PKE authentication in our tests. RPKE is imple-
mented in certain Huawei devices including the Seco-
space USG2000 series. We were able to conﬁrm the
existence of Bleichenbacher oracles in all these imple-
mentations (CVE-2018-0131, CVE-2017-17305, CVE-
2018-8753, and CVE-2018-9129), which are explained
in depth in sections 5 – 7.
On an abstract level, these oracles work as follows: If
we replace the ciphertext cnI in message m3 (cf. Figure 4)
with our modiﬁed RSA ciphertext, the responder will
Case 0 indicate an error (Cisco, Clavister, and ZyXEL)
or silently abort (Huawei) if the ciphertext is not
PKCS #1 v1.5 compliant, or
Case 1 continue with message m4 (Cisco and Huawei)
or return an error notiﬁcation with a different mes-
sage (Clavister and ZyXEL) if the ciphertext is
PKCS #1 v1.5 compliant.
Each time we get a Case 1 answer, we can advance the
Bleichenbacher attack one more step.
If a Bleichenbacher oracle is discovered in a TLS im-
plementation, then TLS-RSA is broken since one can
compute the Premaster Secret and the TLS session keys
without any time limit on the usage of the oracle. For
IKEv1, the situation is more difﬁcult: Even if there is a
strong Bleichenbacher oracle in PKE and RPKE mode,
our attack must succeed within the lifetime of the IKEv1
Phase 1 session, since a DHKE during the handshake
provides an additional layer of security that is not present
in TLS-RSA. For example, for Cisco this time limit is
USENIX Association
27th USENIX Security Symposium    571
Initiator(IDI,skI,pkI)Responder(IDR,skR,pkR)m1:=(proposals)−cI,0,m1−−−−−−−−−−−→m2:=(proposal)←−cI,cR,m2−−−−−−−−−−−cnI:=EncpkR(nI)cidI:=EncpkR(IDI)m3:=(gx,cidI,cnI)−cI,cR,m3−−−−−−−−−−−→cnR:=EncpkI(nR)cidR:=EncpkI(IDR)m4:=(gy,cidR,cnR)←−cI,cR,m4−−−−−−−−−−−k:=PRFh(nI,nR)(cI,cR)Derivekd,ka,kefromkk:=PRFh(nI,nR)(cI,cR)Derivekd,ka,kefromkComputeMACIusingkm5:=Encke(MACI)−cI,cR,m5−−−−−−−−−−−→ComputeMACRusingkm6:=Encke(MACR)←−cI,cR,m6−−−−−−−−−−−ComputeMACRandcomparetom6ComputeMACIandcomparetom5DHKE share of Responder A and their private
DHKE share x they compute gxy.
5. The attackers now have all the information to com-
plete the key derivation described in Table 1. They
can compute MACI and encrypt message m5 to Re-
sponder A with key ke. They thus can impersonate
Responder B to Responder A.
It is important to note that this attack also can be used
to execute a man-in-the-middle attack against two par-
ties. For that, the connection is interrupted by the at-
tackers and on the following attempt to restart the IKEv1
session with a handshake, the attackers execute a Blei-
chenbacher decryption attack against each party. In case
of success, they can decrypt and manipulate the whole
trafﬁc.
Figure 5: Bleichenbacher attack against IKEv1 PKE
based authentication.
currently ﬁxed to 60 seconds for IKEv1 and 240 seconds
for IKEv2.
To phrase it differently:
In TLS-RSA, a Bleichen-
bacher oracle allows to perform an ex post attack to break
the conﬁdentiality of the TLS session later on, whereas
in IKEv1 a Bleichenbacher oracle only can be used to
perform an online attack to impersonate one of the two
parties in real time.
4.2 A Bleichenbacher Attack against PKE
and RPKE
Figure 5 depicts a direct attack on IKEv1 PKE:
1. The attackers initiate an IKEv1 PKE based key ex-
change with Responder A and adhere to the protocol
until receiving message m4. They extract cnR from
this message, and record the public values cI, cR.
They also record the nonce nI and the private DHKE
key x chosen by themselves.
2. The attackers keep the IKE handshake with Respon-
der A alive for a maximum period ttimeout. For Cisco
and ZyXEL, we know that ttimeout ≥ 60s, for Clav-
ister and Huawei ttimeout ≥ 30s.
3. The attackers initiate several parallel PKE based key
exchanges to Responder B.
• In each of these exchanges, they send and re-
ceive the ﬁrst two messages according to the
protocol speciﬁcation.
• In message m3, they include a modiﬁed ver-
sion of cnI according to the Bleichenbacher at-
tack methodology.
• They wait until they receive an answer m4
(Case 1), or they can reliably determine that
this message will not be sent (timeout or re-
ception of a repeated message m2).
$
4.3 Key Reuse
Each theoretical description of some public key prim-
← KeyGen(1κ )
itive starts with something like (pk,sk)
to indicate that freshly generated keys should be used if
the security proof should remain valid. In practice, this
is difﬁcult to achieve. TLS now has four versions (not
counting the completely broken SSL 2.0 and 3.0), three
major handshake families, both prime order and ellip-
tic curve groups, and many minor variants described in
the different ciphersuites. It is practically impossible to
maintain a separate key pair for each ciphersuite. Typi-
cally, a single RSA key pair together with an encryption
& signing certiﬁcate is used to conﬁgure a TLS server.
As a result, cross-ciphersuite [26] and cross-version [20]
attacks have been shown, despite security proofs for sin-
gle ciphersuite families.
For IKE, there is a similar situation: Maintaining in-
dividual key pairs for all “ciphersuite families” and ver-
sions of IKE is practically impossible and oftentimes not
supported. This is the case with the implementations by
Clavister and ZyXEL, for example. Thus, it is common
practice to have only one RSA key pair for the whole IKE
protocol family. The actual security of the protocol fam-
ily in this case crucially depends on its cross-ciphersuite
and cross-version security. In fact, our Huawei test de-
vice reuses its RSA key pair even for SSH host identiﬁ-
cation, which further exposes this key pair.
4.4 A Bleichenbacher Attack Against Digi-
tal Signature Based Authentication
The attack against IKEv2 with signature based authenti-
cation proceeds as follows (cf. Figures 6 and 7). It can
easily be adapted to IKEv1.
4. After receiving enough Case 1 answers from Re-
sponder B, the attackers compute nR. From the
1. The attackers initiate an IKEv2 signature based key
exchange with Responder A and adhere to the pro-
572    27th USENIX Security Symposium
USENIX Association
m2m3m4=(cnR= Enc(pkB,nR),…)keep Awaitingdecrypt nRcompute k, kd, ka, kem5m6Attacker impersonates B !Responder AResponder BAttackerm1Figure 6: IKEv2 with interleaved Phase 1/Phase 2 with
signature based authentication.
tocol until they receive message m2. After this mes-
sage, they have enough data to complete the key
derivation described in Figure 6. From these keys
they need kpI to compute MACI = PRFkpI (IDB),
which is part of the data to be signed with the pri-
vate key of Responder B.
3. The
attackers
2. They keep the IKE handshake with Responder A
alive for a maximum period ttimeout. For Cisco IOS,
we know that ttimeout ≥ 240s.
of
encode
(cI,0,m1,nR, MACI) with PKCS #1 v1.5 for dig-
ital signatures. We denote this encoded value as H.
They then compute c ← (H · re) (mod N), which
is known as the blinding step in the Bleichenbacher
attack.
h
the
hash
4. The attackers initiate several parallel PKE based
key exchanges with Responder B.
• In each of these exchanges, they send and re-
ceive the ﬁrst two messages according to Fig-
ure 4.
• In message m3, they include a modiﬁed ver-
sion of c according to the Bleichenbacher at-
tack methodology.
• They wait until they receive an answer m4
(Case 1), or they can reliably determine that
this message will not be sent (timeout, or re-