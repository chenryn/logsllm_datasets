trajectory 
data
Geofence 
check
PR
 95%
Strategy 
S2
Arrival 
time est.
Queuing 
region
Slow-down 
region
Free-flow 
region
Queue 
e 
estimation
Add slowing 
down vehicles
Add free-flow 
vehicles
Phase
2...8
1
12
2
e
m
i
t
l
a
v
i
r
r
A
0
1
2
3
…
130
Arrival table
Strategy S1
COP
Signal 
plan
Fig. 5: The data ﬂow of spoofed vehicle driving data in the I-SIG system. PR means penetration rate.
headway in queue, which is 6.56 meters in the implementation.
For the slow-down region, for each pair of adjacent equipped
vehicles, the algorithm inserts unequipped vehicles between
them based on the car-following model. Then if the number
of vehicles after the vehicle addition in the queuing and
slow-down regions is smaller than the number of equipped
vehicles divided by the PR, the algorithm adds the remaining
unequipped vehicles to the free-ﬂow region.
Among the three regions, we ﬁnd that manipulating the
estimation of the queuing region is most effective. The attacker
can just set the speed to zero and set its location to the farthest
possible point of the most empty lane within the geofence so
that the lane can be fully ﬁlled with queuing vehicles after
the estimation. In comparison, attacking the slow-down region
is less effective since (1) the number of vehicles it can add
is fewer since the space headway between moving vehicles
in the car-following model is larger than that between queu-
ing vehicles, and (2) the increased delay by adding moving
vehicles is no greater than that by adding queuing vehicles,
since the queuing releasing process can create more delay as
introduced in §II-B. Since the COP algorithm is designed to
optimize the total delay, more vehicles to add and more delay
time to increase can have more impact on the signal planning.
Thus, the best strategy is attacking the queue estimation:
S2. Queue length manipulation, for the transition pe-
riod only. In the transition period, the attacker can change
the speed and location data in its BSM message to set the
location of the farthest stopped vehicle in a chosen lane, and
thus add a number of unequipped queuing vehicles after the
original farthest stopped vehicle in the EVLS algorithm. Since
this attack only adds queuing vehicles,
the change to the
arrival table is at the ﬁrst row. For each phase, the attacker
has multiple data spooﬁng options that can increase the value
from by one to by the maximum queue length she can add
considering the location of the originally farthest stopped
vehicle and the geofence range of the lanes in that phase.
VI. CONGESTION ATTACK ANALYSIS
In this section, we use the identiﬁed data spooﬁng strategies
to analyze the vulnerability status of the I-SIG system.
A. Experiment Setup
Trafﬁc
snapshot
generation. As described earlier
in §IV-B, we use a generic intersection settings for this
analysis. The intersection structure, e.g., number of lanes for
each phase, is shown earlier in Fig. 2. The speed limits for
all approaches are 40 mph. Each arm of the intersection is set
to about 300 meters from the center of the intersection, which
is similar to the DSRC communication range [24]. The tgmin ,
tgmax , ty, and tr of each phase are conﬁgured according to the
recommendations from the Signal Timing Manual [37]. In this
generic intersection, we use VISSIM to generate vehicles at 0.7
v/c (vehicle per capacity), which corresponds to the medium
trafﬁc demand level [33]. Then we run the I-SIG system, and
take vehicle trajectory snapshots every time the I-SIG system
needs to perform signal planning.
We run the trafﬁc simulation for each scenario three times,
each time lasting one hour with a different random seed
following the common practices in the transportation research
area [36], [19]. In total, we generated 873 snapshots. These
snapshots are directly used when we experiment for the fully
deployment period. When experimenting for the transition
period, we consider three PR levels, 25%, 50%, and 75%,
which is the same as that in the EVLS algorithm paper [25]. In
these experiments, we still use the 873 snapshots, but randomly
select a subset of data according to the PR. The random seed
for such selection is the same for all experiments with the
same PR so that their results are comparable.
Attack data generation. Using these snapshots, we per-
form vulnerability analysis of the I-SIG system for congestion
attacks by trying all data spooﬁng options for the strategies
identiﬁed in §V. For the full deployment period, only strategy
S1 is experimented, and for the transition period, both S1
and S2 are experimented. For each data spooﬁng trial, a new
vehicle trajectory data entry with the spoofed data is added to
the trafﬁc snapshot as the attack input.
Attack effectiveness analysis. For each snapshot, we run
the I-SIG system to get the signal plans with and without
attack. Since our goal
is to understand the upper bound
attack effectiveness, for a snapshot and a chosen data spooﬁng
strategy, we pick the attack result from the most effective
data spooﬁng trial. We analyze the attack effectiveness by
comparing the total delay of all vehicles in the snapshot. For
the signal plans with attack, the total vehicle delay time is
calculated after the attack vehicle data being removed. For
the transition period, the ground truth unequipped vehicle data
(instead of the estimated data) are used in the calculation.
In the delay calculation, we use the same vehicle delay
estimation method in the COP algorithm (§II-B). Since this
calculation is based on the arrival time estimation, the cal-
culated delay is not the actual delay since the vehicles may
not behave as predicted after the snapshot is taken. However,
considering that the COP algorithm has a demonstrated effec-
tiveness [6], [25], such estimation is effective for our purpose,
i.e., comparing the attack effectiveness among different attack
7
trials. In addition, since our goal is to study the vulnerabilities
at the signal control algorithm level, using this estimation
method allows us to directly evaluate the attack’s inﬂuence on
the signal planning in the COP algorithm. Later in our attack
evaluation (§VIII), we will directly measure the actual vehicle
delay using the ground truth vehicle trajectory in VISSIM.
In the analysis, we quantify the attack effectiveness using
three metrics: (1) attack success rate, which is the percentage
of the snapshots with the total delay increased under the
attack, which we also call vulnerable snapshots, (2) average
delay increase time, which is the average absolute increase of
the total delay under attack, and (3) average delay increase
percentage, which is the average ratio of the increased total
delay under attack to the total delay without attack.
B. The Full Deployment Period
In this section, we analyze the attack results for the full
deployment period, which are shown in Column 2 to 3 in
Table I. In these columns, non-successful attacks means that
the total vehicle delay is not changed. As introduced in §II-B,
the COP algorithm implemented in I-SIG conﬁgures a limit
on the number of planning stages. By default it uses two-stage
planning, which is denoted as 2-S in the table. We ﬁrst analyze
the results with such default conﬁguration:
1) Two-stage Planning Results: As shown in Column 2
in Table I, we ﬁnd that S1 is quite effective in creating
congestions: it is able to successfully increase the total delay
for nearly all (99.9%) snapshots with as high as 68.1% delay
increase. In comparison, the beneﬁt of using the I-SIG system
is only a 26.6% total delay reduction [6], but our attack can
completely reverse such beneﬁt and cause the trafﬁc mobility
to be even 23.4% worse than that without using the I-SIG
system. This is very surprising, since COP optimizes for the
total delay of typically over 100 vehicles in an intersection, and
a single vehicle data should not have such signiﬁcant inﬂuence.
Vulnerability cause: last vehicle advantage. By manually
examining the signal plan output, we ﬁnd that for all the
vulnerable snapshots, the most successful attack trial adds a
spoofed vehicle with very late arrival time. In this paper, we
call it the last vehicle advantage, which is illustrated in Fig. 6.
As shown, in the signal plan, such late vehicle determines the
green light end time for its requested phase. This delays the
green light begin time for all the phases after it, and thus
increases the delay for the vehicles in these phases. If tg of
the phase with this late vehicle reaches tgmax , the tg for the
phases before this phase will also extend in order to serve this
late vehicle, which further delays the vehicles in later phases.
Fig. 6 illustrates such attack on phase 2. As shown, due to the
spoofed late arriving vehicle, the tg of all the phases in the
ﬁrst stage are extended in order to be able to serve it, causing
long delay to serving time of the vehicles in the second stage.
However, as an algorithm optimizing for the delay of all
vehicles, COP should just give up serving this very late vehicle
in this green light if serving it costs too much delay for other
vehicles. We ﬁnd that the root cause lies in the planning stage
limit when implementing COP in practice. Since the default
conﬁguration uses two-stage planning, each phase can only be
planned once. Thus, for each phase, planning has to serve all
vehicles in this only serving opportunity, causing the planning
to be signiﬁcantly affected by the last arriving vehicle.
This issue can be alleviated when the COP algorithm is
allowed to plan for more stages. For example, if the planning
stage limit is four, COP now has two opportunities to serve
the vehicles for one phase. Thus, even if a vehicle arrives
very late, it can delay serving it to the second opportunity.
In this case, vehicles in other phases can be served in the
ﬁrst opportunity and thus is less likely to be affected. Fig. 7
shows the percentage of snapshots vulnerable to the last
vehicle advantage for the COP algorithm conﬁgured with two-
stage to eight-stage planning. In the calculation, a snapshot is
concluded vulnerable if the most successful attack trial comes
from a spoofed vehicle arriving the last in its request phase.
As shown, for two-stage planning, nearly all the snapshots
can be the most successfully attacked using the last vehicle
advantage, and such percentage decreases when more planning
stages are conﬁgured. The most signiﬁcant decrease is at four-
stage planning, since with such conﬁguration all phases get two
serving opportunities. With over four planning stages, the last
vehicle advantage is no longer the best trial for any snapshot.
Trade off between security and deployability. Knowing
that two-stage planning is highly vulnerable to late arriving
vehicles, we are curious why the I-SIG system developers
chose to set it as the default value. We contacted the developers
and ﬁnd that it is actually an interesting trade off between
deployability and security. As indicated by the developers,
they chose two-stage planning because the running time for
more planning stages are too high in practice to meet the
planning deadline. Since the planning has to ﬁnish in tgmin
(§II), which is typically around 5-7 seconds [37], they told us
that running three-stage planning on their RSUs takes more
than three seconds due to the limited computation power on
RSUs, making it too risky to use. Meanwhile, in their testing,
they ﬁnd two-stage planning does not have much planning
effectiveness degradation in comparison to ﬁve-stage planning,
so they choose it as the default value.
They told us that they use the mainstream Savari Street-
WAVE RSU [9] and the 95 percentile running time for two-
stage planning takes 1.2 seconds. We then use the ratio
between this number and the corresponding running time on
our machine to estimate the running time for more planning
stages on these RSUs. As shown in Fig. 7, our estimation
results are consistent with their observations: purely running
COP with three planning stages takes around 3 seconds, and
with communication delay and the running time of other parts,
e.g.,
is indeed risky to use more
than two planning stages. In our snapshots without attack,
we also conﬁrmed that using two-stage planning only has
6.5% increase in total delay on average than that using ﬁve-
stage planning. Thus, choosing two-stage planning is indeed
a practical choice that
trades small planning effectiveness
degradation for reliability. However, such choice is found to
be highly exploitable leveraging the last vehicle advantage.
the EVLS algorithm, it
Expected to be mounted outdoor in every intersection,
RSUs need to be sufﬁciently reliable with low cost, which
leads to performance constraints just
like many real-time
embedded systems today [35], [32]. While we have shown
that such constraints today cause security vulnerabilities, we
envision that this situation may be resolvable in future when
8
CV
Full deployment
deployment
COP conﬁg.
Strategy
100% PR
2-S
S1
5-S
S1
75% PR
Transition period
50% PR
25% PR
2-S
5-S
2-S
5-S
2-S
5-S
S1
S2
S1
S2
S1
S2
S1
S2
S1
S2
S1
S2
Vulnerability analysis (exhaustively try all data spooﬁng options)
99.9% 96.4% 99.1% 98.3% 83.2% 96.8% 99.4% 99.2% 83.0% 97.4%
Success %
Ave. delay
1078.7
569.6
inc. (s) & % 68.1% 11.5% 60.2% 32.7% 10.6% 33.5% 61.4% 33.0% 12.5% 34.6%
1001.3
533.9
536.2
206.6
162.7
982.2
536.3
167.3
99.9%
1009.2
60.6%
98.9% 82.0% 91.6%
531.1
616.7
32.4% 17.0% 34.3%
295.8
Practical exploit (strategically try data spooﬁng options due to attack decision time limits in practice)
N/A
Ave. trial #
N/A
99.8% 84.7% 99.1%
Success %
N/A
1057.1
Ave. delay
1077.4
inc. (s) & % 68.0%
60.0%
N/A
14.7
95.6% 99.4%
595.3
1061.0