  [lv_rimage_1]        /dev/sdf1(1)                                
  [lv_rimage_2]        /dev/sdg1(1)                                
  [lv_rmeta_0]         /dev/sdh1(0)                                
  [lv_rmeta_1]         /dev/sdf1(0)                                
  [lv_rmeta_2]         /dev/sdg1(0)
```
::: para
注：即使已替换设备的设备，但在显示中仍表示 LVM
无法找到失败的设备。这是因为虽然已从 RAID
逻辑卷中删除那个失败的设备，但尚未从该卷组中删除该设备。要从卷组中删除设备的设备，请运行
`vgreduce --removemissing VG`{.command}。
:::
::: para
如果已将 `raid_fault_policy`{.literal} 设定为
`allocate`{.literal}，但没有剩余的设备，则分配会设备，并让该逻辑卷保持此状态。如果分配失败，则需要修复确定当前，然后停用并重新激活该逻辑卷，如
[第 4.4.3.7.2 节 "警告 RAID
出错策略"](#LVM_CLI.html#raid-warn-faultpolicy){.xref}
所述。另外，还可以替换设备的设备，如 [第 4.4.3.7.3 节 "替换 RAID
设备"](#LVM_CLI.html#raid-replace){.xref} 所述。
:::
:::
::: section
::: titlepage
#### [⁠]{#LVM_CLI.html#raid-warn-faultpolicy}4.4.3.7.2. 警告 RAID 出错策略 {.title}
:::
::: para
在下面的示例中，已将 `lvm.conf`{.filename} 文件中的
`raid_fault_policy`{.literal} 字段设定为 `warn`{.literal}。该 RAID
逻辑卷的布局如下。
:::
``` screen
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sdh1(1)                                
  [my_lv_rimage_1]        /dev/sdf1(1)                                
  [my_lv_rimage_2]        /dev/sdg1(1)                                
  [my_lv_rmeta_0]         /dev/sdh1(0)                                
  [my_lv_rmeta_1]         /dev/sdf1(0)                                
  [my_lv_rmeta_2]         /dev/sdg1(0)
```
::: para
如果 `/dev/sdh`{.filename}
设备失败，则系统日志中会显示出错信息。但在这种情况下，LVM
不会通过替换映象之一尝试自动修复该 RAID
设备。反之，如果该设备失败，则会使用 `lvconvert`{.command} 命令的
`--repair`{.option} 参数替换失败的设备，如下所示。
:::
``` screen
# lvconvert --repair my_vg/my_lv
  /dev/sdh1: read failed after 0 of 2048 at 250994294784: Input/output error
  /dev/sdh1: read failed after 0 of 2048 at 250994376704: Input/output error
  /dev/sdh1: read failed after 0 of 2048 at 0: Input/output error
  /dev/sdh1: read failed after 0 of 2048 at 4096: Input/output error
  Couldn't find device with uuid fbI0YO-GX7x-firU-Vy5o-vzwx-vAKZ-feRxfF.
Attempt to replace failed RAID images (requires full device resync)? [y/n]: y
# lvs -a -o name,copy_percent,devices my_vg
  Couldn't find device with uuid fbI0YO-GX7x-firU-Vy5o-vzwx-vAKZ-feRxfF.
  LV               Copy%  Devices                                     
  my_lv             64.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sde1(1)                                
  [my_lv_rimage_1]        /dev/sdf1(1)                                
  [my_lv_rimage_2]        /dev/sdg1(1)                                
  [my_lv_rmeta_0]         /dev/sde1(0)                                
  [my_lv_rmeta_1]         /dev/sdf1(0)                                
  [my_lv_rmeta_2]         /dev/sdg1(0)
```
::: para
注：即使已替换设备的设备，但在显示中仍表示 LVM
无法找到失败的设备。这是因为虽然已从 RAID
逻辑卷中删除那个失败的设备，但尚未从该卷组中删除该设备。要从卷组中删除设备的设备，请运行
`vgreduce --removemissing VG`{.command}。
:::
::: para
如果该设备失败是一个瞬时失败，或者您可以修复失败的设备，则可以使用
`lvchange`{.command} 命令的 `--refresh`{.option}
选项开始修复失败的设备。以前是需要停用然后再重新激活该逻辑卷。
:::
::: para
使用下面的命令刷新逻辑卷。
:::
``` screen
# lvchange --refresh my_vg/my_lv
```
:::
::: section
::: titlepage
#### [⁠]{#LVM_CLI.html#raid-replace}4.4.3.7.3. 替换 RAID 设备 {.title}
:::
::: para
RAID 与传统的 LVM 镜像不同。LVM
镜像需要删除失败的设备，否则镜像逻辑卷会挂起。RAID
阵列可在有失败设备的情况下继续运行。事实上，在 RAID1 以外的 RAID
类型中，删除某个设备可能意味着转换为低级 RAID（例如：从 RAID6 转换为
RAID5，或者从 RAID4 或者 RAID5 转换为
RAID0）。因此，与其无条件删除失败的设备并可能会分配一个替换的设备，LVM
允许您使用 `lvconvert`{.command} 命令的 `--replace`{.option}
参数一步到位地替换 RAID 卷中的设备。
:::
::: para
`lvconvert --replace`{.command} 命令的格式如下。
:::
``` screen
lvconvert --replace dev_to_remove vg/lv [possible_replacements]
```
::: para
下面的示例创建 RAID1 逻辑卷，然后替换那个卷中的一个设备。
:::
``` screen
# lvcreate --type raid1 -m 2 -L 1G -n my_lv my_vg
  Logical volume "my_lv" created
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sdb1(1)                                
  [my_lv_rimage_1]        /dev/sdb2(1)                                
  [my_lv_rimage_2]        /dev/sdc1(1)                                
  [my_lv_rmeta_0]         /dev/sdb1(0)                                
  [my_lv_rmeta_1]         /dev/sdb2(0)                                
  [my_lv_rmeta_2]         /dev/sdc1(0)                                
# lvconvert --replace /dev/sdb2 my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices                                     
  my_lv             37.50 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sdb1(1)                                
  [my_lv_rimage_1]        /dev/sdc2(1)                                
  [my_lv_rimage_2]        /dev/sdc1(1)                                
  [my_lv_rmeta_0]         /dev/sdb1(0)                                
  [my_lv_rmeta_1]         /dev/sdc2(0)                                
  [my_lv_rmeta_2]         /dev/sdc1(0)
```
::: para
下面的示例创建 RAID1
逻辑卷，然后替换那个卷中的设备，指定用来进行替换的物理卷。
:::
``` screen
# lvcreate --type raid1 -m 1 -L 100 -n my_lv my_vg
  Logical volume "my_lv" created
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sda1(1)
  [my_lv_rimage_1]        /dev/sdb1(1)
  [my_lv_rmeta_0]         /dev/sda1(0)
  [my_lv_rmeta_1]         /dev/sdb1(0)
# pvs
  PV          VG       Fmt  Attr PSize    PFree
  /dev/sda1   my_vg    lvm2 a--  1020.00m  916.00m
  /dev/sdb1   my_vg    lvm2 a--  1020.00m  916.00m
  /dev/sdc1   my_vg    lvm2 a--  1020.00m 1020.00m
  /dev/sdd1   my_vg    lvm2 a--  1020.00m 1020.00m
# lvconvert --replace /dev/sdb1 my_vg/my_lv /dev/sdd1
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv             28.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sda1(1)
  [my_lv_rimage_1]        /dev/sdd1(1)
  [my_lv_rmeta_0]         /dev/sda1(0)
  [my_lv_rmeta_1]         /dev/sdd1(0)
```
::: para
可指定多个 `replace`{.option} 参数一次替换多个 RAID 设备，如下所示。
:::
``` screen
# lvcreate --type raid1 -m 2 -L 100 -n my_lv my_vg
  Logical volume "my_lv" created
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sda1(1)
  [my_lv_rimage_1]        /dev/sdb1(1)
  [my_lv_rimage_2]        /dev/sdc1(1)
  [my_lv_rmeta_0]         /dev/sda1(0)
  [my_lv_rmeta_1]         /dev/sdb1(0)
  [my_lv_rmeta_2]         /dev/sdc1(0)
# lvconvert --replace /dev/sdb1 --replace /dev/sdc1 my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv             60.00 my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
  [my_lv_rimage_0]        /dev/sda1(1)
  [my_lv_rimage_1]        /dev/sdd1(1)
  [my_lv_rimage_2]        /dev/sde1(1)
  [my_lv_rmeta_0]         /dev/sda1(0)
  [my_lv_rmeta_1]         /dev/sdd1(0)
  [my_lv_rmeta_2]         /dev/sde1(0)
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
使用 `lvconvert --replace`{.command}
命令指定替换启动器时，永远不要使用阵列中已经使用的驱动器分配替换驱动器。例如：`lv_rimage_0`{.literal}
和 `lv_rimage_1`{.literal} 不应位于同一物理卷中。
:::
:::
:::
:::
::: section
::: titlepage
#### [⁠]{#LVM_CLI.html#raid-scrub}4.4.3.7.4. 擦除 RAID 逻辑卷 {.title}
:::
::: para
LVM 为 RAID 逻辑卷提供擦除支持。RAID
擦除是读取某个阵列中的所有数据及奇偶校验块，检查其是否一致的过程。
:::
::: para
使用 `lvchange`{.command} 命令的 `--syncaction`{.option} 选项启动 RAID
擦除操作。可指定 `check`{.literal} 或者 `repair`{.literal}
操作。`check`{.literal}
操作针对该阵列，并记录阵列中的差异数字，但不会修复。`repair`{.literal}
操作会修正发现的差异。
:::
::: para
擦除 RAID 逻辑卷的命令格式如下：
:::
``` screen
lvchange --syncaction {check|repair} vg/raid_lv
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
`lvchange --syncaction repair vg/raid_lv`{.command} 操作不执行与
`lvconvert --repair vg/raid_lv`{.command}
操作相同的功能。`lvchange --syncaction repair`{.command}
操作中该阵列中启动一个后台同步操作，同时 `lvconvert --repair`{.command}
操作旨在修复/替换镜像或 RAID 逻辑卷中失败的设备。
:::
:::
:::
::: para
为支持新 RAID 擦除操作，`lvs`{.command}
命令现在支持两种新的可输出字段：`raid_sync_action`{.literal} 和
`raid_mismatch_count`{.literal}。默认不会输出这些字段。可在
`lvs`{.command} 命令中指定 `-o`{.option} 参数以显示这些字段，如下。
:::
``` screen
lvs -o +raid_sync_action,raid_mismatch_count vg/lv
```
::: para
`raid_sync_action`{.literal} 字段显示该 RAID
卷目前正在进行的同步操作。它可以是以下值之一：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `idle`{.literal}：已完成所有同步操作（什么也不做）
    :::
-   ::: para
    `resync`{.literal}：初始化阵列或在机器失败后恢复
    :::
-   ::: para
    `recover`{.literal}：替换阵列中的设备
    :::
-   ::: para
    `check`{.literal}：查找阵列不一致的地方
    :::
-   ::: para
    `repair`{.literal}：查找并修复阵列不一致的地方
    :::
:::
::: para
`raid_mismatch_count`{.literal} 字段显示 `check`{.literal}
操作中找到的差异。
:::
::: para
`lvs`{.command} 命令的 `Cpy%Sync`{.literal} 字段现在输出
`raid_sync_action`{.literal} 操作的过程，其中包括 `check`{.literal} 和
`repair`{.literal}。
:::
::: para
`lvs`{.command} 命令的 `lv_attr`{.literal} 字段显示目前可在 RAID
擦除操作支持中提供额外的识别符。这个字段的字节 9
显示逻辑卷是否正常工作，它现在支持以下识别符。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    （[*m（不匹配）*]{.emphasis}表示在 RAID
    逻辑卷中存在差异。如果擦除操作探测到 RAID
    的部分有不一致的情况后会显示这个字符。
    :::
-   ::: para
    （[*r（刷新）*]{.emphasis}）表示阵列中的设备已经失败，且内核将其视为失败，即使
    LVM
    可读取该设备标签，并将其视为可操作。该逻辑卷应该可以刷新以通知内核该设备现在可用；也可以在怀疑该设备失败后将其替换。
    :::
:::
::: para
有关 `lvs`{.command} 命令的详情，请查看 [第 4.8.2 节
"对象选择"](#LVM_CLI.html#report_object_selection){.xref}。
:::
::: para
执行 RAID 擦除操作时，`sync（同步）`{.literal}操作要求的后台 I/O 会被
LVM 设备的其他操作挤掉，比如更新到卷组元数据。这样可能会造成其他 LVM
操作变慢。您可以通过设定恢复限制控制 RAID 逻辑卷的擦除比例。
:::
::: para
可通过为 `lvchange`{.command} 命令的 `--minrecoveryrate`{.option} 或
`--maxrecoveryrate`{.option} 选项设定 `sync`{.literal} 操作的最小和最大
I/O 比例，控制该操作比例。可按照以下方式指定这些选项。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `--maxrecoveryrate Rate[bBsSkKmMgG]`{.literal}
    :::
    ::: para
    为 RAID 逻辑卷设定最大恢复比例，以便其不会排挤正常 I/O 操作。将
    *Rate*
    指定为该阵列中每个设备的每秒恢复数量。如果没有给出后缀，则假设使用
    kiB/sec/device。将恢复比例设定为 0 的含义是不绑定。
    :::
-   ::: para
    `--minrecoveryrate Rate[bBsSkKmMgG]`{.literal}
    :::
    ::: para
    设定 RAID 逻辑卷的最小恢复比例，保证 `sync`{.literal}
    操作取得最小吞吐量，即使有大量常规
    I/O。以阵列中的每个设备的每秒数量为单位指定
    *Rate*。如果没有给出后缀，则假设使用 kiB/sec/device。
    :::
:::
:::
::: section
::: titlepage