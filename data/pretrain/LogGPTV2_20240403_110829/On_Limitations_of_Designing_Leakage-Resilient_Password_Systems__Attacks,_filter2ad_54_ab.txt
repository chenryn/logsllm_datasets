examples). The statement also explains why most password
systems [26] reveal the entire secret after one or two au-
thentication sessions recorded by the adversary, as their ex-
pected success rates of guessing attack are sufﬁciently low
so that the whole candidate set rapidly collapse to the exact
secret. This implies that, when brute force attack is feasible,
enhancing strength against guessing attack is strictly at the
cost of sacriﬁcing leakage resilience.
3.2 P1: Large Root Secret Space Principle
Principle 1: An LRPS system with secret leakage should
have a large candidate set for the root secret.
The ﬁrst principle requires a large password space as the
basic defense against brute force attack, where large means
that it is computational infeasible for the adversary to enu-
merate all candidates in a practical setting (the same mean-
ing of large will be used in the following discussion). This
principle seems trivial but actually not, as the necessity of
involving a large password space depends on whether an
LRPS system has secret leakage under a given threat model,
which is not straightforward to decide.
In general, there
are three possible leakage sources in an LRPS system: the
response alone, the challenge-response pair, and the chal-
lenge alone. Among them, the last source has not been well
recognized. We use Undercover [27] as a counterexample to
show that secret leakage could happen even when a secure
channel is present.
Undercover is a typical scheme based on the k-out-of-n
paradigm. During registration, a user is assigned k images
as his secret from a pool of n images. In each authentication
round, the user is asked to recognize if there is a secret im-
age from w candidate images and report the position of that
image if the secret image is shown in the current window;
otherwise the user reports the position of the “none” sym-
bol. Before the user reports the position, a haptics-based
secure channel is deployed to map the real position to a ran-
dom position decided by the hidden message delivered via
the secure channel.
Figure 1. The average number of valid candi(cid:173)
dates shrinks for Undercover.
The hidden mapping blinds the adversary from learning
any information from the response. The authors suggested a
small password space is sufﬁcient so that the default param-
eters are k = 5, n = 28, and w = 4+1 (i.e. four images and
a “none” symbol). The number of candidate root secrets is
28 = 98280. However, this scheme does not prevent the
C 5
challenge alone from becoming a source of leakage. In Un-
dercover, there is at most one secret image among the w
candidate images for each authentication round. This im-
plies a candidate of the root secret is invalid if two images in
this candidate appeared in an authentication round. Since
it has a small candidate space, we can use brute force to
recover the secret with the information from the challenge
alone. Figure 1 shows how the size of the candidates shrinks
as the number of observed authentication rounds increases.
On average, 53.06 rounds (6 sessions) are sufﬁcient to re-
cover the exact secret, and the size of the candidate set can
be reduced to less than 10 after 43.55 rounds (5 sessions).
This result shows that a secure channel alone is not sufﬁ-
cient to prevent secret leakage.
0204060801001201400200004000060000800001000009828072504607683960016038325392.51.51Number of valid candidatesNumber of rounds112 = 1.34 × 108.
The same problem also appears in the Convex Hull Click
(CHC) scheme [32], where the default parameters are k =
5, n = 112, w = 83. The size of the candidate set for
its root secret is C 5
In our simulation,
we are able to recover the exact secret within 12.28 rounds
(2 sessions). Another interesting ﬁnding for CHC is that
we can now estimate the average success rate of guessing
attack from the results of brute force attack, though a pre-
cise analysis is difﬁcult [32]. According to Statement 2, the
average success rate is 21.78% = (C 5
12.28 . This tech-
nique can also be applied to other complex LRPS systems
to determine their security strength when the other analysis
techniques are infeasible.
− 1
112)
3.3 P2: Large Round Secret Space Principle
Principle 2: An LRPS system with secret leakage should
have a large candidate set for the round secret.
This principle emphasizes that a large candidate set for
the root secret is necessary but not sufﬁcient to defend
against brute force attack. The large candidate set for the
root secret can be broken down based on the attack to the
round secrets. We use Predicate-based Authentication Ser-
vices (PAS) [4] as a counterexample to show that a round
secret with a small candidate set can be easily recovered
and later used to reveal the root secret.
During registration of PAS, a user is asked to remember
p secret pairs, each of which includes a secret position and
a secret word. At the beginning of each authentication ses-
sion, the server prompts for an integer index I. Then the
user uses I to calculate p predicates as follows: For each
pair, the corresponding predicate is the secret position and a
secret character. The secret character is the xth character in
the secret word (1-based indexing), where x = 1 + ((I − 1)
mod len), and len is the length of the secret word. For ex-
ample, given two secret pairs (⟨2,3⟩, sente), (⟨4,1⟩, logig)
and I = 15, the predicates are (⟨2,3⟩, e) and (⟨4,1⟩, g),
where x = 5 = 1 + ((15 − 1) mod 5), and the secret po-
sition ⟨a, b⟩ means “at row a and column b”. Given these
p predicates, the user examines the cells at secret positions
in l challenge tables to check whether a secret character is
present in its corresponding cell. It yields an answer vector
that consists of p · l “present” or “absent” answers with a
candidate space of 2pl. This vector is then used to lookup
another response table, which provides a many-to-one map-
ping from 2pl elements to 2l elements. Finally, the user in-
puts one of those 2l elements indexed by the answer vector
to ﬁnish an authentication round.
The above many-to-one mapping is used in PAS to con-
fuse the adversary. However, when the round secret only
has a small candidate set, many mappings will have the
same pre-image and the effective mapping space collapses
to the candidate set of the round secret. In PAS, the size
Figure 2. The average number of valid candi(cid:173)
dates shrinks for PAS.
of the candidate set for the round secret is 422500 =
(25 × 26)2 for the default parameters, where p = 2, and
there are 25 cells in each challenge table and 26 possible
letters for the secret character. It is not difﬁcult to use brute
force to recover the round secret of PAS. Figure 2 shows
the shrinking of the candidate set size as the number of
observed authentication rounds increases. On average, 9.4
rounds are sufﬁcient to recover the exact round secret (1
session). Since all the predicates generated from the same
secret pair share the same secret position, after recovering
the ﬁrst round secret, it is easy for the adversary to recover
the other round secrets and ﬁnally the root secret. A similar
attack technique has been used in [18]. The same problem
also appears in the S3PAS scheme [35], which is a variant
of the CHC scheme [32]. In our experiments, we are able to
discover the exact root secret in 8 sessions.
4 Statistical Attack and Its Defense Princi-
ples
4.1 Attack Strategy
Statistical attack is an accumulation-based learning pro-
cess, where an adversary gradually increases its conﬁdence
on relevant targets when more and more cues are avail-
able. Compared to brute force attack, statistical attack has
fewer limitations as it can be applied to schemes with a
large password space. Recall that a user response is sta-
tistically biased towards his knowledge of the secret. Theo-
retically there exists a speciﬁc statistical attack for any pass-
word system. The efﬁciency of statistical attack is design-
dependent and varies with different schemes and different
analysis techniques. Here we introduce two general statis-
024681012141601000002000003000004000005000004225006573.4463.932.541.451.11Number of valid candidatesNumber of roundstical analysis techniques that are able to efﬁciently extract
the root secret of most existing schemes.
The ﬁrst technique is probabilistic decision tree. It works
efﬁciently for the existing schemes based on simple chal-
lenges [31, 32, 35, 4]. The procedure is described as fol-
lows: 1) Create a score table for each possible individual
element or affordable-sized element group in the alphabet
of the root secret, where affordable means computational
feasible to maintain. We refer to a score table whose en-
try contains t individual elements as an t-element score ta-
ble. 2) For each independent observation of a challenge-
response pair, the adversary enumerates every consistent
decision path that leads to the current response. Each possi-
ble decision path is assigned a probability calculated based
on the uniform distribution. For the k-out-of-n paradigm,
the probability is p1 = k/n for a decision event in which
the corresponding individual element belongs to the secret
set, and p0 = 1 − p1 for the complementary event. For the
example decision path X given in Figure 3, its probability
is p(X) = p1 · (p0 · p1). After enumerating all consistent
decision paths, the adversary sums up the probabilities of
these paths and uses the sum pc to normalize the probabil-
ity p(X) for each decision path to its conditional probabil-
ity p(X|C) = p(X)/pc. The conditional probability repre-
sents the probability that a decision path is the path chosen
by the user when the current response C is observed. Af-
ter the normalization, the adversary updates the score table
using p(X|C). For an entry that appears in a consistent
decision path X, its score will be added by p(X|C) if the
corresponding event is that the entry belongs to the secret
set, otherwise its score will be deducted by p(X|C). 3) Re-
peat the above step until the number of entries with different
score levels reaches a threshold (e.g. ﬁnding out k entries
with the highest/lowest scores when each entry represents a
single element).
The second technique is counting-based statistical anal-
ysis. The basic idea is to simply maintain a counting table
for the occurrences of elements. Multiple counting tables
can be maintained simultaneously according to different re-
sponse groups. The procedure proceeds as follows: 1) Cre-
ate l counting tables for l response groups. The adversary
creates a counting table for each possible response if af-
fordable. “Any response” is still a useful response group
if the secret elements appear more or less frequently than
the decoy elements in the challenge. An entry in a count-
ing table can be an individual element or affordable-sized
element group. We refer to a counting table whose entry
contains t individual elements as an t-element counting ta-
ble. When t ≥ 2, we call this type of statistical analysis as
multi-dimensional counting. 2) For each independent ob-
servation of a challenge-response pair, the adversary ﬁrst
decides which counting table is updated according to the
observed response. Then each entry in the chosen counting
A decision path is an emulation of the user’s decision
process that consists of multiple decision nodes. Each
decision node represents a decision event decided by
the membership relation of a corresponding entry in the
score table, whether or not it belongs to the secret set.
Consider a scheme which shows a four-element window
⟨S1:1, S2:2, S3:1, D1:1⟩ and asks the user to report the
sum of the numbers associated with the ﬁrst and last se-
cret elements displayed in the window, where Si:x rep-
resents a secret element associated with number x, and
Di:y represents a decoy element associated with num-
ber y. Since the correct response for this challenge is
2 by adding the numbers associated with the ﬁrst and
third elements, its decision path is X = ⟨S1:1⟩|⟨D1:1;
S3:1⟩. There are two segments in this decision path.
The ﬁrst segment implies that S1 is a secret element,
and the second segment implies that D1 is a decoy el-
ement and S3 is a secret element. There usually exist
other decision paths leading to the same response, such
as ⟨S1:1⟩|⟨D1:1⟩.
Figure 3. Deﬁnition and example for decision
path
table is incremented by the number of occurrences of the
corresponding individual element or element group. If the
group of “any response” is used, its counting table is always
updated for each observation. 3) Repeat the above step until
the number of entries with different score levels reaches a
threshold (e.g. ﬁnding out k entries with the highest/lowest
scores when each entry represents a single element). The
score for an entry is a weighted sum of the count values for
the same entry in different tables. The weight function is
dependent on the speciﬁc target scheme and the response
grouping strategy.
4.2 P3: Uniform Distributed Challenge Principle
Principle 3: An LRPS system with secret leakage should
make the distribution of the elements in each challenge as
uniformly distributed as possible.
This principle requires that an LRPS system should be
able to generate the challenges without knowing the secret1.
For example, if there is a structural requirement in the chal-
lenge generation, secret leakage is very likely to happen.
Non-uniformly distributed elements in a challenge leave
cues for the adversary to recover the secret even without
knowing the response. Undercover [27] is a typical coun-
terexample to show secret leakage from biased challenges.
1Even if server knows the secret, the secret (or its alternative form, e.g.
hash value) should be only used to verify the response.
Undercover ensures that the distribution for each image
is unbiased by showing every candidate image exactly once
for each authentication session. However, its 2-dimensional
distribution is biased in each authentication round, as secret-
secret pairs cannot appear in the challenge (at most 1 secret
image appearing). We use 2-element counting table to re-
cover the secret from the challenge. For each pair of can-
didate images, the count value is zero only if both of them
belong to the secret set after a sufﬁcient number of observa-
tions. On average, it is sufﬁcient to recover the exact secret
within 172.7 rounds (20 sessions), and recover 80% secret
elements (ﬁve secret images in total) after 126.9 rounds (15
sessions).
The same problem also appears in the CHC scheme [32]
and in the low-complexity CAS scheme [31]. Both of them
require that at least k secret elements appear in the chal-
lenge window, while the challenge window only holds a
subset of candidate elements. These structural requirements
make the distribution of the elements in each challenge de-
viate from the uniform distribution. Under default param-
eters, we are able to recover the exact root secret within
18.18 rounds (2 sessions) for CHC. For the low-complexity
CAS scheme, we can recover the exact root secret (i.e.
60 independent secret images) within 2087.2 rounds (105
sessions), and recover 90% secret elements within 870.4
rounds (44 sessions).
The above discussion shows that the consequence of the
distribution bias caused by structural requirements in the
challenge is subtle to identify and has not been well recog-
nized. In order to prevent leakage from biased challenges,
the distribution of the elements in each challenge should be
indistinguishable from the uniform distribution. If a struc-
tural requirement is compulsory in a password system (e.g.
at least k secret elements being displayed) but the element
distribution in each challenge is not uniform when the chal-
lenge window only shows a subset of candidate elements,
the scheme should display all the candidate elements in
each challenge.
4.3 P4: Large Decision Space or Indistinguish(cid:173)
able Individual Principle
Principle 4: An LRPS system with secret leakage should
indistinguishable in the
make each individual element
probabilistic decision tree if the candidate set for decision
paths is enumerable.
This principle is critical to limit the feasibility of proba-
bilistic decision tree attack. The power of probabilistic de-
cision tree stems from its emulation of all possible decision
processes leading to the observed response. The emulation
creates a tight binding between each challenge and its re-
sponse, from which the adversary is able to extract the sub-
tle statistical difference during the user’s decision if indi-
vidual elements are distinguishable on consistent decision
paths. It is not easy to make each individual element indis-
tinguishable, especially when weight or order information
is used in the challenge design. We use the high-complexity
CAS scheme [31] as a counterexample to show how prob-
abilistic decision tree efﬁciently discovers the root secret
even when a number of decision paths lead to the same an-
swer.
The high-complexity CAS scheme is another typical
scheme based on the k-out-of-n paradigm. During regis-
tration, a user is assigned k = 30 images as his secret from
a pool of n = 80 images. In each authentication round, a
challenge is an 8 × 10 grid consists of all the images, one
image for each cell. The user is asked to mentally compute
a path starting from the cell in the upper-left corner. The
computation rule is described as follows: Initially the cur-
rent cell is the cell in the upper-left corner. If the image in
the current cell belongs to the secret set, move down by one
cell, otherwise move right by one cell; if the next moving