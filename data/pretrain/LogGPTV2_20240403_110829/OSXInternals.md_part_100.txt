only for split-segment libraries (set to nonsplit or
the empty string).
DYLD_PRINT_APIS If set, dyld prints the name of each dyld API function
called, along with the arguments passed to the
function.
DYLD_PRINT_BINDINGS If set, dyld prints information about each symbol it
binds, whether it is an external relocation, a lazy
symbol, or an indirect symbol pointer.
DYLD_PRINT_ENV If set, dyld prints its environment vector.
DYLD_PRINT_INITIALIZERS If set, dyld prints the address of each initializer
function in each image it loads. Examples of such
functions include C++ constructors, functions
designated as library initialization routines through
the static linker's -init option, and functions tagged
as __attribute__ ((constructor)).
DYLD_PRINT_INTERPOSING If set, dyld prints information about the old and new
pointers (where "old" and "new" have the appropriate
meanings in the context of interposing) if the
interposing feature is enabled.
DYLD_PRINT_OPTS If set, dyld prints its argument vector.
DYLD_PRINT_REBASINGS If set, dyld prints names of the libraries that are "fixed
up" by altering their base addresses.
DYLD_PRINT_SEGMENTS If set, dyld prints information about each Mach-O
segment it maps in.
DYLD_PRINT_STATISTICS If set, dyld prints statistics about itself, such as a
breakup of time that it spent performing its various
operations.
DYLD_ROOT_PATH A colon-separated list of directories, each of which
will be used (in the given order) by dyld as a path
prefix while searching for images.
DYLD_SHARED_REGION If set, instructs dyld to use privatized shared region
(set to private), avoid using shared region (set to
avoid), or attempt to use shared region (set to use)see
Figure 823.
DYLD_SLIDE_AND_PACK_DYLIBS If set, instructs dyld to privatize the shared region and
map librarieswith sliding, if necessarysuch that they
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 71 of 135
are "packed" next to each other.
Figures 822 and 823 depict the operation of dyld while loading non-split-segment and split-segment
Mach-O files, respectively.
Figure 822. dyld's operation while loading a non-split-segment file
[View full size image]
Figure 823. dyld's operation while loading a split-segment file
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 72 of 135
8.13.4. The Use of shared_region_map_file_np() by a System Application
Although all typical user applications benefit from the services of the Shared Memory Server subsystem,
the corresponding APIs are reserved exclusively for Apple-provided applications, with dyld being the
only client. Using these APIs can affect all applications on a systempotentially adversely. Therefore,
third-party programs must not use these APIs, at least in products. With this caveat, let us look at an
example of programmatically mapping a split-segment library into the global shared region. This example
will help illustrate the actual working of this mechanism. Figure 824 shows the program.
Figure 824. Using shared_region_map_file_np()
// srmap.c
// maps a 32-bit, non-fat, dynamic shared library into the system shared region
#include 
#include 
#include 
#include 
#include 
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 73 of 135
#include 
#include 
#include 
#include 
#define PROGNAME "srmap"
struct _shared_region_mapping_np {
mach_vm_address_t address;
mach_vm_size_t size;
mach_vm_offset_t file_offset;
vm_prot_t max_prot; // VM_PROT_{READ/WRITE/EXECUTE/COW/ZF}
vm_prot_t init_prot; // VM_PROT_{READ/WRITE/EXECUTE/COW/ZF}
};
typedef struct _shared_region_mapping_np sr_mapping_t;
#define MAX_SEGMENTS 64
// shared_region_map_file_np() is not exported through libSystem in
// Mac OS X 10.4, so we use the indirect system call to call it
int
_shared_region_map_file_np(int fd,
unsigned int nregions,
sr_mapping_t regions[],
uint64_t *slide)
{
return syscall(SYS_shared_region_map_file_np, fd, nregions, regions, slide);
}
int
main(int argc, char **argv)
{
int fd, ret = 1;
struct mach_header *mh; // pointer to the Mach-O header
char *load_commands; // buffer for load commands
uint32_t ncmds; // number of load commands
struct load_command *lc; // a particular load command
struct segment_command *sc; // a particular segment command
uint64_t vmaddr_slide; // slide value from the kernel
void *load_address = 0; // for mmaping the Mach-O file
unsigned int entryIndex = 0; // index into the mapping table
sr_mapping_t mappingTable[MAX_SEGMENTS], *entry;
uintptr_t base_address = (uintptr_t)ULONG_MAX;
uint64_t file_length;
struct stat sb;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if ((fd = open(argv[1], O_RDONLY)) magic != MH_MAGIC) && (mh->filetype != MH_DYLIB)) {
fprintf(stderr, "%s is not a Mach-O dynamic shared library\n", argv[1]);
goto OUT;
}
if (!(mh->flags & MH_SPLIT_SEGS)) {
fprintf(stderr, "%s does not use split segments\n", argv[1]);
goto OUT;
}
load_commands = (char *)((char *)load_address + sizeof(struct mach_header));
lc = (struct load_command *)load_commands;
// process all LC_SEGMENT commands and construct a mapping table
for (ncmds = mh->ncmds; ncmds > 0; ncmds--) {
if (lc->cmd == LC_SEGMENT) {
sc = (struct segment_command *)lc;
// remember the starting address of the first segment (seg1addr)
if (sc->vmaddr vmaddr;
entry = &mappingTable[entryIndex];
entry->address = sc->vmaddr;
entry->size = sc->filesize;
entry->file_offset = sc->fileoff;
entry->init_prot = VM_PROT_NONE;
if (sc->initprot & VM_PROT_EXECUTE)
entry->init_prot |= VM_PROT_EXECUTE;
if (sc->initprot & VM_PROT_READ)
entry->init_prot |= VM_PROT_READ;
if (sc->initprot & VM_PROT_WRITE)
entry->init_prot |= VM_PROT_WRITE | VM_PROT_COW;
entry->max_prot = entry->init_prot;
// check if the segment has a zero-fill area: if so, need a mapping
if ((sc->initprot & VM_PROT_WRITE) && (sc->vmsize > sc->filesize)) {
sr_mapping_t *zf_entry = &mappingTable[++entryIndex];
zf_entry->address = entry->address + sc->filesize;
zf_entry->size = sc->vmsize - sc->filesize;
zf_entry->file_offset = 0;
zf_entry->init_prot = entry->init_prot | \
VM_PROT_COW | VM_PROT_ZF;
zf_entry->max_prot = zf_entry->init_prot;
}
entryIndex++;
}
// onto the next load command
lc = (struct load_command *)((char *)lc + lc->cmdsize);
}
ret = _shared_region_map_file_np(fd, // the file
entryIndex, // so many mappings
mappingTable, // the mappings
&vmaddr_slide); // OK to slide, let us know
if (!ret) { // success
printf("mapping succeeded: base =%#08lx, slide = %#llx\n",
base_address, vmaddr_slide);
}
OUT:
close(fd);
exit(ret);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 75 of 135
We can test the program in Figure 824 by loading a trivial split-segment library in the global shared
region. Figure 825 shows the test.
Figure 825. Loading a split-segment library in the global shared region
$ cat libhello.c
#include 
void
hello(void)
{
printf("Hello, Shared World!\n");
}
$ gcc -Wall -dynamiclib -segs_read_only_addr 0x99000000 \
-segs_read_write_addr 0xa9000000 -prebind -o /tmp/libhello.dylib libhello.c
$ otool -hv /tmp/libhello.dylib
/tmp/libhello.dylib:
Mach header
magic cputype cpusubtype filetype ncmds sizeofcmds flags
MH_MAGIC PPC ALL DYLIB 8 924 NOUNDEFS DYLDLINK PREBOUND
SPLIT_SEGS TWOLEVEL
$ otool -l /tmp/libhello.dylib
/tmp/libhello.dylib:
Load command 0
cmd LC_SEGMENT
cmdsize 328
segname __TEXT
vmaddr 0x99000000
vmsize 0x00001000
...
Load command 1
cmd LC_SEGMENT
cmdsize 328
segname __DATA
vmaddr 0xa9000000
vmsize 0x00001000
...
$ gcc -Wall -o srmap srmap.c
$ ./srmap /tmp/libhello.dylib
mapping succeeded: base =
0x99000000, slide = 0
$ cat test.c
#include 
#include 
#include 
#define PROGNAME "callfunc"
typedef void (*func_t)(void);
int
main(int argc, char **argv)
{
unsigned long long addr;
func_t func;
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
addr = strtoull(argv[1], NULL, 16);
if (!addr || (addr == ULLONG_MAX)) {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 76 of 135
perror("strtoull");
exit(1);
}
func = (func_t)(uintptr_t)addr;
func();
return 0;
}
$ gcc -Wall -o test test.c
$ nm /tmp/libhello.dylib | grep _hello
99000f28 T _hello
$ ./test 0x99000f28
Hello, Shared World!
8.13.5. A Note on Prebinding
A prebound Mach-O executable contains an additional type of load command: LC_PREBOUND_DYLIB.[18]
There is one such command for every shared library that the prebound executable links to. Figure 826
shows the structure of this load command. The command is described by a prebound_dylib_command
structure. The structure's name field refers to the prebound shared library's name. The nmodules field
specifies the number of modules in the librarya single object file (a ".o") amounts to one module, and so
does the linkedit data. The linked_modules field refers to a bit vector that contains a bit for each module
in the library. If a module in the library is linked to a module in the executable, the bit corresponding to
that library module is set in the vector.
[18] A prebound executable can also have a prebinding checksum, which is present as a
Mach-O load command of type LC_PREBIND_CKSUM.
Figure 826. Structure of the LC_PREBOUND_DYLIB load command
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 77 of 135
Since prebinding executables is deprecated beginning with Mac OS X 10.4, the static linker does not
create prebound executables unless the environment variable MACOSX_DEPLOYMENT_TARGET is set to an
earlier version of Mac OS Xfor example, 10.3.
Note that although the generation of prebound executables is deprecated on Mac OS X 10.4, an Apple-
provided executable may be prebound.
$ otool -hv /Applications/iTunes.app/Contents/MacOS/iTunes # PowerPC
/Applications/iTunes.app/Contents/MacOS/iTunes:
Mach header
magic cputype cpusubtype filetype ncmds sizeofcmds flags
MH_MAGIC PPC ALL EXECUTE 115 14000 NOUNDEFS DYLDLINK PREBOUND
TWOLEVEL
$ otool -l /Applications/iTunes.app/Contents/MacOS/iTunes | \
grep LC_PREBOUND_DYLIB | wc -l
90
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 78 of 135
8.14. Task Working Set Detection and Maintenance
The kernel uses physical memory as a cache for virtual memory. When new pages are to be brought in
because of page faults, the kernel may need to decide which pages to reclaim from among those that are
currently in physical memory. For an application, the kernel should ideally keep in memory those pages
that would be needed very soon. In the utopian operating system, the kernel would know ahead of time the
pages an application references as it runs. Several algorithms that approximate such optimal page
replacement have been researched. Another approach uses the Principle of Locality, on which the
Working Set Model is based. As described in the paper titled "Virtual Memory,"[19] locality can be
informally understood as a program's affinity for a subset of its pages, where this set of favored pages
changes membership slowly. This gives rise to the working setinformally defined as the set of "most
useful" pages for a program. The Working Set Principle establishes the rule that a program may run if and
only if its working set is in memory, and a page may not be removed if it is the member of a running
program's working set. Studies have shown that keeping a program's working set resident in physical
memory typically allows it to run with acceptable performancethat is, without causing an unacceptable
number of page faults.
[19] "Virtual Memory," by Peter J. Denning (ACM Computing Surveys 2:3, September 1970,
pp. 153189).