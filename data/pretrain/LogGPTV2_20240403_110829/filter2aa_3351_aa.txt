### Vulnerabilities 101: How to Launch or Improve Your Vulnerability Research Game

**Presenters:**
- **Joshua Drake, Zimperium**
- **Steve Christey Coley, MITRE**

**Event:**
- **DEF CON 24**
- **Date: August 7, 2016**

---

### Introductions
- **About Joshua Drake:**
  - Over 20 years of experience in vulnerability research.
  - Formerly ran the iDefense Vulnerability Contribution Program (VCP).

- **About Steve Christey Coley:**
  - Co-founder of CVE (Common Vulnerabilities and Exposures).
  - Key contributor to "Responsible Disclosure" (now known as Coordinated Vulnerability Disclosure), CVSS (Common Vulnerability Scoring System), CWE (Common Weakness Enumeration), and more.

- **Why We Are Doing This:**
  - Currently, there is significantly more insecure code than researchers. This imbalance may not persist in the next decade.
  - There is a need for more people to analyze and secure real-world deployed code.

- **What We Hope to Accomplish:**
  - Encourage more individuals to get involved in vulnerability research.

---

### Disclaimers
- The views expressed are based on our personal career experiences.
- Others may have different opinions.
- Each individual is unique and will find their own path, but we hope to help you find it faster.
- This presentation does not include any new exploits.

---

### What is a Vulnerability?
- **Definitions:**
  - A vulnerability is a mistake in software design or implementation that allows an attacker to conduct activities that:
    1. Affect other users.
    2. Are not explicitly allowed or intended by the developer or system administrator.

- **Key Considerations:**
  - **User Interaction:**
    - Automatic
    - Normal usage (e.g., clicking on a link)
    - Victim's level of awareness (e.g., copying a JavaScript URL into the browser)
  - **Luck Factor:**
    - ASLR (Address Space Layout Randomization)
    - Unusual configurations
    - Narrow race conditions

- **Distinguishing Vulnerabilities from Exploits:**
  - A vulnerability is a flaw in the software itself, which does nothing on its own.
  - An exploit is a set of steps (manual or automated) that takes advantage of a vulnerability.

---

### What is Vulnerability Research?
- **Definition:**
  - The process of analyzing a product, protocol, or algorithm to find unintended behaviors that allow an attacker to gain unauthorized access to functionality or data.
  - This process can take minutes, days, months, or even years.
  - Some differentiate between finding individual bugs and more systematic/academic work.

- **Nature of the Work:**
  - Solving complex puzzles where the full picture is often unclear at the start.

---

### Motivations: Why Do Vulnerability Research?
- **Common Motivations:**
  - Knowledge and wisdom
  - Altruism
  - Self-protection (securing your own systems)
  - Fame and notoriety
  - Financial gain and career advancement
  - Power
  - Fun and entertainment
  - Individual motivations vary, and vendors may assume certain motivations.

---

### Potential Work and Employers
- **Roles:**
  - Finder, extender, builder, fixer, defender, cataloger, coordinator, communicator, malware analyst, risk evaluator, trend-discoverer, etc.
  - Note: Not all work receives public recognition.

- **Employment Options:**
  - Hobbyist
  - Bug bounties, black/gray market sales
  - Consulting firms
  - Security product companies
  - Software vendors
  - Government contractors or directly
  - Academia (pure research)
  - CERTs (analyze and understand real-world attacks)

---

### Skills for Success
- **Technical Skills:**
  - Understanding of code, protocols, file formats, and how things work under the hood.
  - Knowledge of common attack patterns.
  - Ability to identify logical flaws (e.g., CSRF, authentication/authorization issues).
  - Proficiency in using analysis tools and evaluating their findings.

- **Communication Skills:**
  - Clear and well-structured communication.
  - Providing reproducible steps and functional proofs of concept (PoCs).
  - Using common vocabulary.
  - Describing the issue and its importance to both vendors and the public.
  - Understanding and respecting your audience.
  - Writing well-structured advisories.

- **Importance of Communication:**
  - Clear communication is crucial for career success and reduces misunderstandings.

---

### Personality Traits for Success
- **Essential Traits:**
  - Persistence
  - Patience, especially when dealing with people
  - Diligence
  - Curiosity
  - Critical thinking
  - Willingness to learn
  - Self-motivation
  - Independence and ability to work in isolation

- **Desirable Traits:**
  - Collaborative spirit
  - High concentration
  - Addictive nature (passion for the work)
  - Willingness to share findings and techniques
  - Desire for constant improvement
  - Sense of humor

---

### Key Terms (Vocabulary)
- **Attack Surface:**
  - The set of all inputs and code paths an attacker can interact with.
- **Impact:**
  - RCE (Remote Code Execution)
  - EoP (Escalation of Privilege)
- **PoC (Proof of Concept):**
  - A demonstration of a vulnerability. Be clear about what you are proving.
- **Vulnerability Classes:**
  - Memory corruption, injection (SQLi, XSS, etc.), protocol/specification design, business logic.
- **Root Cause Analysis:**
  - Identifying the underlying cause of a vulnerability.
- **Chain Analysis:**
  - Analyzing a series of vulnerabilities leading to a larger impact.

---

### The Firehose: Where to Learn?
- **Resources:**
  - OWASP Top Ten
  - SANS/CWE Top 25
  - White papers
  - Periodic electronic collections
  - Videos
  - Mailing lists
  - GitHub repositories
  - Vendor bug databases
  - Vulnerability scanners
  - Intentionally-vulnerable packages
  - CTFs (Capture the Flag) and wargames
  - Following individual researchers
  - Vulnerability databases
  - Conference talks
  - Classes
  - Books
  - Yearly White Hat Security Top 10 attacks

---

### Selecting What to Analyze for Security Problems
- **Approaches:**
  - Go deep (focus on specific areas) or broad (cover multiple areas).
  - Any contribution to the body of knowledge is valuable, including negative results.
  - Look for low-hanging fruit in older, complex, or widely-used software.
  - Consider brand-new or emerging technologies, as security is often an afterthought.
  - Analyze previously-unanalyzed code, such as IoT devices or medical equipment.
  - Follow trends and piggyback on others' research (with caution).

---

### Tools and Techniques
- **Dynamic vs. Static Analysis:**
  - **Dynamic Analysis:** Running the program (e.g., fuzzing, debugging).
  - **Static Analysis:** Inspecting the code without running it (e.g., auditing, SCA tools).
  - Combining both methods (hybrid analysis) is often the most effective approach.

- **Code Auditing:**
  - Grep, pedantic compiler settings, automated taint checking.

- **Design Review:**
  - Threat modeling (e.g., STRIDE).

- **Automated Tools:**
  - Fuzzers, static code analysis tools.
  - Be aware of false positives and the need for root cause analysis.

---

### Relevant Standards
- **Standards:**
  - **CVE (Common Vulnerabilities and Exposures):** Numeric identifiers for tracking vulnerabilities.
  - **CWE (Common Weakness Enumeration):** Hierarchy of developer mistakes leading to vulnerabilities.
  - **CAPEC (Common Attack Pattern Enumeration and Classification):** Common traits of attack methodologies.
  - **CVSS (Common Vulnerability Scoring System):** Numeric rating system for vulnerabilities.
    - Pros: Widely adopted, consistent, focused on key characteristics.
    - Cons: Inconsistent in non-traditional contexts, difficult to use.

---

### Disclosure Models
- **Reasons for Public Disclosure:**
  - Informing responsible parties.
  - Putting pressure on unresponsive vendors.
  - Alerting the public to significant issues.

- **Models:**
  - Full disclosure
  - Partial disclosure
  - Coordinated (formerly "Responsible") disclosure
  - Non-disclosure

- **Standards Documents:**
  - ISO standard 29147: Focuses on vendor responsibilities.
  - IETF Draft circa 2002
  - RFPolicy 2.0

---

### Considerations for Your Disclosure Policy
- **Clarifying Expectations:**
  - Define your disclosure policy to clarify expectations with vendors.
  - Consider scenarios such as:
    - Unable to find the right contact point.
    - Active 0-day exploitation.
    - Premature public disclosure by others.
    - Vendor non-responsiveness.
    - Appropriate grace periods.
    - Long-term fixes for design flaws.

- **Impact on Consumers:**
  - Immediate and long-term impacts on consumers.
  - Vendor's good faith efforts.
  - Future collaboration and hiring opportunities.

- **Moral and Ethical Considerations:**
  - Evaluate the overall worth of disclosure.

---

### Advisory Structure and Contents
- **Structure:**
  - Clear and concise description of the vulnerability.
  - Steps to reproduce.
  - Impact and severity.
  - Mitigation and remediation steps.
  - References and acknowledgments.

- **Contents:**
  - Provide detailed information to help both vendors and users understand and address the issue.

---

This revised version aims to provide a more structured, coherent, and professional presentation of the original text.