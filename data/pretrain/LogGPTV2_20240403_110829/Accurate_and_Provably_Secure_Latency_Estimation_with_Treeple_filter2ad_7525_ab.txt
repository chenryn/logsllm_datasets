pothetical scheme would provide the best security we could
hope to provide without complete knowledge of the under-
lying topology. However, since an explicit goal of Treeple
is to have short position strings, we will relax this notion
slightly to only consider how the adversary can inﬂuence
Treeple’s latency estimates. We will consider a latency esti-
mation scheme to be secure if an adversary cannot inﬂuence
the estimated latency between honest nodes, and by deviat-
ing from the protocol, can only increase the estimated la-
tency between a pair involving at least one malicious node.
Formally, we deﬁne security as follows. Let Π be a la-
tency estimation scheme. Fix a network, a sequence of net-
work conditions, and a set A of adversarial nodes. We will
compare random variables H and M, where H is an ex-
ecution trace of Π in which all peers behave according to
Π at all time steps; whereas in the execution trace M the
nodes in A behave arbitrarily, subject to computational re-
strictions. Each execution trace consists of the set of all
messages sent, rtt and route measurements taken, and po-
sitions ρi,t computed by a peer. We note that in the adver-
sarial trace, misbehaving nodes are not constrained to use a
new position at each time step. We compare the sequence
of positions H.ρi,t and M.ρi,t held by each peer i at each
timestep t in the traces H and M. We say that Π is se-
cure if the following properties hold with all but negligible
probability:
1. For all times t, for all i, j ∈ Peers \ A,
Distance(H.ρi,t, H.ρj,t) = Distance(M.ρi,t, M.ρj,t) .
2. For all
times
t,
for all
i ∈
Peers and j ∈ A,
there exists time t′ ∈
(t − τ, t] such that Distance(M.ρi,t, M.ρj,t) ≥
Distance(H.ρi,t, H.ρj,t′ ).
such that
i, j
Informally, condition 2 relaxes our intuitive notion so an
adversary can use positions computed at a different time
within the update period, since there is no way to prevent
an adversary from choosing when it updates its position.
Relationship between security and accuracy. We note
that under our deﬁnition, security and accuracy are orthog-
onal. In particular, a scheme may be accurate but not se-
cure: schemes like Vivaldi, GNP, Big Bang, and so on can
produce latency estimates that are within 10%-20% of the
actual latency, depending on the evaluation, but fall to triv-
ial attacks. On the other hand, it is trivial to produce a
scheme that is secure but not accurate: if we assign each
node a distinct position and then predict that the latency be-
tween any pair of distinct nodes is 100ms, then the adver-
sary clearly cannot inﬂuence latency estimates between any
pair of nodes, trivially satisfying our deﬁnition. Of course
this scheme will be highly inaccurate; the challenge lies in
simultaneously achieving security and acceptable accuracy.
We note that once a scheme is both secure, and accurate
with no attackers, then it will continue to accurately esti-
mate pairwise latencies between honest nodes when under
attack. This deﬁnition therefore allows us to evaluate secu-
rity and functionality in a modular way: given a proof that
a scheme is secure, it is sufﬁcient to evaluate its accuracy
with no adversarial nodes.
2.3. Failures of Previous Network Coordinate Sys(cid:173)
tems
Network coordinate systems can be categorized into cen-
tralized schemes with trusted nodes [24, 23] and decen-
tralized schemes [7, 30]. Centralized network coordinate
systems consist of some trusted nodes which communicate
with each other to compute their coordinates; other nodes
can contact a subset of those trusted nodes to obtain their
coordinates. In a decentralized scheme, each node contacts
a different set of peers to compute and update its coordi-
nates. Here we brieﬂy demonstrate that (1) having trusted
nodes does not ensure that a scheme meets our security def-
inition, and (2) previous decentralized schemes designed to
withstand attacks are vulnerable to a variant of the “frog-
boiling” attack [3].
)
s
m
(
e
c
n
a
i
t
s
D
k
r
o
w
e
N
d
e
t
t
a
m
i
t
s
E
 250
 200
 150
 100
 50
 0
Network1
Network2
i
d
o
r
t
n
e
c
o
t
e
c
n
a
t
s
D
i
 75
 70
 65
 60
 55
 50
 45
 40
 35
 50
 100
 150
 200
 250
 0
 10
 20
 30
 40
 50
 60
Real Network Distance (ms)
(a)
Time (ticks)
(b)
Figure 2. (a) Results of the targeted close node attack on GNP. Each point represents one simulated attack, and compares the
resulting coordinate distance to the underlying network distance between the attacker and the targeted node. (b) The Network-
Partition attack on Veracity showing that the network is being divided into two subnetworks.
2.3.1 Manipulating coordinates in GNP
2.3.2 Partitioning a Veracity network
GNP [23] is a landmark-based network coordinate scheme;
the authors do not claim security against attacks but it might
seem intuitively appealing that if landmarks’ coordinates
are digitally signed, and nodes obtain a digitally signed
messages from each landmark attesting to RTT measure-
ments, the scheme could be secure. Although this would
seem to prevent an adversary from inﬂuencing the estimated
distance between honest nodes, however, we show that it is
possible for an adversary to inﬂuence the protocol to artiﬁ-
cially decrease the estimated distance between an adversar-
ial node and a targeted honest node.
We implemented a very simple attack that demonstrates
In our attack, the adversar-
the feasibility of this goal.
ial node A knows the coordinates of the node T it wants
to target, so A can compute the distance between T and
each landmark node. Then when a given landmark Λi mea-
sures rtt(Λi, A), A attempts to make the result as close to
rtt(Λi, T ) as possible, subject to the constraint that the ad-
versary cannot cause the measurement to be smaller than
the underlying network distance. We repeatedly simulated
this process using the code and matrix topology from [10].
For each simulation run, we randomly picked one victim
node and one attacker node from a set of 101 nodes with 10
of these nodes as landmarks, subject to the constraint that
the victim was not already “close” to the attacker (RTT less
than 30ms). Figure 2(a) shows that this simple attack is very
successful: in nearly all cases, A receives a coordinate that
is closer to T than the underlying network distance.
Decentralized network coordinate systems use a fully dis-
tributed algorithm to compute the optimal coordinates of the
nodes in the network. Several secure mechanisms have been
proposed. Broadly speaking, they fall into anomaly/outlier
detection systems [35, 14], reputation system [29], and dis-
tributed reputation systems [31, 33]. It was shown in [3]
that an outlier detection mechanism using the Mahalanobis
distance [35] can be defeated using the “Frog-Boiling” at-
tack. The Frog-Boiling attack is analogous to the popular
account that if a frog is put in hot boiling water, it will jump
out, but if it is put in cold water, and the temperature of the
water slowly increased to boiling, the frog will stay in the
water and boil. We show that other secure mechanisms can
be defeated in a similar fashion. Figure 2(b) shows the net-
work partition variant of the attack on a Veracity [31] sim-
ulation. Veracity is a distributed reputation system which
veriﬁes the self-reported coordinates of nodes and prevents
nodes from artiﬁcially delaying their RTT by too much. The
ﬁgure shows that the Frog-Boiling attack is effective in par-
titioning a Veracity-secured network coordinate system –
10% of the network were attackers.
The main problem with current network coordinate sys-
tems is that they have to work under dynamic network con-
ditions. Thus, secure network coordinate systems have to
accept changes in RTT and link conditions. The Frog-
Boiling attacker produces small and consistent lies so that
its updates are accepted since they are mistaken for the nor-
mal ﬂuctuations in RTT. Current secure schemes thus can-
not differentiate between a malicious update and a normal
update due to changing link conditions. Therefore, some
sort of attack (Frog-Boiling or other) will still be possi-
ble to disrupt the network coordinates, rendering the esti-
mated network distance to be useless since it will be greatly
different from the real network distance. This problem is
inherent in both centralized and decentralized network co-
ordinate systems. An attacker can lie in small but consis-
tent ways to disrupt a decentralized network coordinate sys-
tem, as shown by partitioning the network using the Frog-
Boiling attack. In centralized network coordinate systems,
a node, knowing the coordinates of its target node, can lie
in such a way that its coordinates, as computed by the land-
marks, are close to the coordinates of the target node. Al-
though the attacker is not directly lying to the target node
by changing its RTT, and only lying to the landmarks, the
attacker’s estimated distance to the target victim will be af-
fected, which contradicts our deﬁnition of a secure latency
estimation system. We note that neither of these attacks
requires an overwhelming fraction of malicious peers, and
both attacks work even in the presence of trusted routers.
3. Treeple
Suppose that we have a single trusted vantage point and
wish to build a secure network latency estimation scheme
for the current Internet. A very simple way to incorpo-
rate network topology into Treeple positions is to have the
trusted node measure the network path to each peer, for ex-
ample using repeated calls to traceroute, and measure the
RTT to each router along the path. The position that the
vantage point assigns to each peer would then be the signed
path from the trusted node to the peer, including the RTTs to
each node along the path. To compute the distance between
two peers A and B given their positions, we could ﬁnd the
last “common ancestor” C on each of the paths and then
estimate that the distance between the peers is the distance
between A and C plus the distance between C and B, since
a path of this distance exists between A and B.2 It is easy
to see that while it may be inaccurate, this scheme meets
our stated security goal, assuming that malicious peers can-
not interfere with the routing infrastructure: in this case the
paths from the trusted node to any two honest nodes would
not involve malicious nodes, and only the ﬁnal hops to ma-
licious nodes could be impacted, by delaying responses to
the trusted node’s traceroute request.
An alternate view of this system is that the trusted node is
computing the tree of shortest paths between itself and other
peers, and “embedding” the network into this tree metric. It
is clear that for some pairs of nodes the tree distance could
be larger than the actual network distance, because many
2Due to the complexities of Internet routing this path is unlikely to be
used, but it may still represent a good approximation.
network links will not be included in the trusted node’s
shortest path tree.
To address this, we choose k topologically distinct van-
tage points to repeat this process: a peer’s coordinate be-
comes an ordered k-tuple of signed routes (one from each
trusted vantage points), and the distance between A and B
becomes the minimum of the distances computed from each
of the k trees. Again, it is easy to see that the security of
the scheme holds for this variant: no adversarial node can
interfere with the route and RTT measurements involved
in computing honest nodes’ positions; so all honest node
coordinates will be the same regardless of adversarial be-
havior. And since adversarial nodes can only increase RTT
measurements they cannot appear closer to other nodes by
deviating from the protocol.
Intuitively, adding the extra
vantage points increases the probability of discovering the
network links used by the actual route between two nodes,
thus improving the accuracy of latency estimates.
3.1. Complete Description
For completeness, pseudocode for the component algo-
rithms of Treeple is shown in Figure 3. Treeple assumes the
existence of a signature scheme (Gen, Sign, Verify) that
is existentially unforgeable against chosen message attack:
any efﬁcient program given access to a veriﬁcation key vk
and a signing oracle for the corresponding signing key sk
cannot produce a correct (message, signature) pair with a
message that was not a previous signing oracle query, ex-