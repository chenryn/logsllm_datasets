and verify our prototype produces the same results.
Experimental Setup. We use 1 computer to represent the end-host
for tracing and 1 server to perform the analysis. Each device runs
Debian Buster and contains an Intel Core i7-7740X processor, 32GB
of memory, and solid state storage. Our prototype uses angr [95] as
its symbolic execution engine and is implemented in 7,062 Python
and 1,208 C source lines of code (SLoC).
Dataset & Selection Criteria. To select our target programs for
evaluation, we start by considering the packages offered in Debian’s
APT repository, filtered using the C/C++, CLI, and GUI tags, to en-
sure we only consider standalone programs written in languages
that can contain memory corruption bugs. We then cross-reference
MITRE’s CVE database to isolate programs that contain or import
(via libraries) code with known prior overflow, UAF, DF, and FS
vulnerabilities, as these may contain more that have yet to be dis-
covered. From this, we randomly pick 15 programs for testing.
We also manually assemble a corpus of benign inputs for each
program by examining test cases and documentation. For CLI pro-
grams, we ensure the corpus has at least one case for each possible
flag. For GUI programs, we manually perform some basic actions,
such as opening, modifying, and saving files. When programs re-
quire complex input formats (e.g., images), we collect valid inputs
from public sources like ImageNet [33].
Figure 5: Counting loop example. Here the number of itera-
tions of Line 12 depends on length, set by the loop starting
at Line 5. When foobar passes my_strcpy a 4097 byte string,
the register holding length (RCX) would normally become
4096 by Line 9. Our module overwrites RCX with a symbolic
variable, allowing Line 11 to exit sooner, and then verifies
the control hijack via a corrupted return pointer at Line 21.
location of the symbolic pointer that triggered the hijack using the
symbolic constraints. An implementation of this algorithm is in the
Appendix (Algorithm 3). Next, it rewinds backwards through the
predecessor states until it finds the one that first made the pointer
symbolic and adds it to the report. The module then generates a
CDG for the execution path leading to this state, selects the nearest
conditional branch in terms of shortest path, and checks the alter-
nate branching states for contradicting constraints. If any are found,
they become the preliminary patch for the developers, otherwise a
new guarding branch should be placed before the corrupting state.
Format String Bugs. We find that unlike UAFs, DFs, and overflows,
FS bugs are usually not as constrained by control flow. Specifically,
if a call site contains a FS vulnerability, reaching it via any path is
sufficient for discovering the bug. For this reason, we do not employ
a tailored search strategy for FS and instead perform detection over
the states found by the other exploration modules. In practice,
format specifier strings should always be constant, turning them
into read-only data at compile time. Consequently, for each call to
a known format string function (e.g., printf), the module checks
whether the specifier pointer or any of its content is symbolic. If
it is, this means input data is able to directly control the specifier,
which is a bug. In such cases, the root cause report identifies the
caller of the format string function and the predecessor state that
wrote to the specifier.
4 EVALUATION
We aim to answer the following questions in our evaluation:
 1. void my_strcpy(char *src, char *dst) { 2.     int length = 0; 3.     char *ptr = src; 4.     // “counting” loop 5.     while (*ptr) { 6.         ptr++; 7.         length++; 8.     } 9.10.     // “stepping loop”11.     for (int i = 0; i < length; i++) {12.         dst[i] = src[i];13.     }14.     dst[length] = 0;15. }16.17. void foobar() {18.     char *m_dst[128];19.     char *m_src = {‘A’ * 4096, 0};20.     my_strcpy(src, dst);21. }RCX := [4096]RCX := [1, 2, …, 4096]RCX := [1, 2, …, 4096]RCX := 132Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea326Table 1: System Evaluation for Real-World Programs
Type
ID
Ovf
EDB-47254
Ovf
CVE-2004-0597
Ovf
CVE-2004-1257
Ovf
CVE-2004-1279
Ovf
CVE-2013-2028
Ovf
CVE-2009-5018
Ovf
CVE-2017-7938
Ovf
CVE-2017-9167
Ovf
CVE-2017-9168
Ovf
CVE-2017-9169
Ovf
CVE-2017-9170
Ovf
CVE-2017-9171
Ovf
CVE-2017-9172
Ovf
CVE-2017-9173
Ovf
CVE-2017-9191
Ovf
CVE-2017-9192
Ovf
CVE-2018-12326
Ovf
CVE-2018-12327
Ovf
CVE-2018-18957
Ovf
CVE-2019-14267
* CVE-2020-9549
Ovf
* CVE-2020-14931 Ovf
Will Not Fix
Ovf
* CVE-2020-35457 Ovf
Ovf
EDB-46807
FS
* Patched
CVE-2017-9162
UAF
UAF
CVE-2017-9163
UAF
CVE-2017-9182
UAF
CVE-2017-9183
UAF
CVE-2017-9190
CVE-2017-14103
UAF
UAF
CVE-2019-17582
UAF
* Reported
UAF
* Reported
UAF
* Reported
* EDB-49259
UAF
DF
CVE-2017-11403
CVE-2017-12858
DF
Component Version
main
libpng
main
main
main
main
main
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
main
main
libiec61850
main
main
main
glibc
glib
main
main
libautotrace
libautotrace
libautotrace
libautotrace
libautotrace
Program
abc2mtex
Butteraugli
abc2mtex
jpegtoavi
Nginx
gif2png
dmitry
autotrace
autotrace
autotrace
autotrace
autotrace
autotrace
autotrace
autotrace
autotrace
redis-cli
ntpq
GOOSE
pdfressurect
pdfressurect
dmitry
GIMP
GIMP
MiniFTP
dmitry
autotrace
autotrace
autotrace
autotrace
autotrace
GraphicsMagick main
libzip
PHP
libautotrace
autotrace
libautotrace
autotrace
libautotrace
autotrace
GIMP
babl
GraphicsMagick main
PHP
libzip
1.6.1
1.2.5
1.6.1
1.5
1.4.0
2.5.3
1.3a
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
4.0.9
4.2.8p11
1.3
0.15
0.19
1.3a
2.2.5
2.58.3
1.0
1.3a
0.31.1
0.31.1
0.31.1
0.31.1
0.31.1
1.3.26
7.4.14
0.31.1
0.31.1
0.31.1
0.1.62
1.3.26
7.4.14
Average:
# Traces
1,209
176
1,209
333
5
1,709
10
55
55
55
55
55
55
55
55
55
1,253
15
5
199
199
10
26
26
7
10
55
55
55
55
55
4
6
55
55
55
26
4
6
189
# Novel
166
78
166
18
4
39
10
37
37
37
37
37
37
37
37
37
31
11
2
76
76
10
25
25
3
10
37
37
37