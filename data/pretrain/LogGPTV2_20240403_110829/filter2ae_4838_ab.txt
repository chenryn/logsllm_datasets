       */
      function unpause() onlyOwner whenPaused public {
        paused = false;
        Unpause();
      }
    }
    /**
     * @title Pausable token
     *
     * @dev StandardToken modified with pausable transfers.
     **/
    contract PausableToken is StandardToken, Pausable {
      function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
        return super.transfer(_to, _value);
      }
      function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
        return super.transferFrom(_from, _to, _value);
      }
      function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
        return super.approve(_spender, _value);
      }
      function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(cnt > 0 && cnt  0 && balances[msg.sender] >= amount);
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i  0 && cnt  0 && balances[msg.sender] >= amount);
        balances[msg.sender] = balances[msg.sender].sub(amount);
        for (uint i = 0; i  0 && cnt  0 &&
balances[msg.sender] >=
amount);`使用此语句来判断用户的余额是否足够。不足则跳出函数。`balances[msg.sender] =
balances[msg.sender].sub(amount);`之后将余额减去转账金额。并令收款方的余额增加。
最后为BEC的最终合约。`BecToken`。
    contract BecToken is PausableToken {
        /**
        * Public variables of the token
        * The following variables are OPTIONAL vanities. One does not have to include them.
        * They allow one to customise the token contract & in no way influences the core functionality.
        * Some wallets/interfaces might not even bother to look at this information.
        */
        string public name = "BeautyChain";
        string public symbol = "BEC";
        string public version = '1.0.0';
        uint8 public decimals = 18;
        /**
         * @dev Function to check the amount of tokens that an owner allowed to a spender.
         */
        function BecToken() {
          totalSupply = 7000000000 * (10**(uint256(decimals)));
          balances[msg.sender] = totalSupply;    // Give the creator all initial tokens
        }
        function () {
            //if ether is sent to this address, send it back.
            revert();
        }
    }
该合约继承了上面的`PausableToken`合约。并将基础参数更新。
    string public name = "BeautyChain";
        string public symbol = "BEC";
        string public version = '1.0.0';
        uint8 public decimals = 18;
之后为构造参数：
    totalSupply = 7000000000 * (10**(uint256(decimals)));
          balances[msg.sender] = totalSupply;    // Give the creator all initial tokens
规定发行代币总金额为`7000000000 * 10 * 18`。
并将所有的金额赋值给`msg.sender`的余额。然而此合约不支持value代币的转账，倘若有用户转账，那么合约将会`revert`。
    function () {
            //if ether is sent to this address, send it back.
            revert();
        }
#### 2 漏洞详述
细心的同学可以看到，本合约在起始时使用了安全函数—`SafeMath()`。所以会下意识的以为这个函数不会存在溢出漏洞。然而在审计了所有的代码后，我们能够看到`PausableToken`合约中的`batchTransfer()`函数中存在不合理的算术问题。
由于`_receivers`与`_value`均是我们传入的可变参数，所以`cnt`也是可控的。于是`amount`是我们可控的。又由于`amount`等于`uint256(cnt)
*
_value;`，所以此处的`*`并没有使用安全函数。于是我们可以探寻此处是否存在溢出漏洞。由于下文中有条件限制，所以我们需要具体的查看相关限制。`_value
> 0 && balances[msg.sender] >=
amount`。此处第一个条件很容易达到，而第二个条件需要用户余额足够支付金额。但是如果我们通过传入的内容而使`amount`溢出为极小值，是不是就可以达到了溢出效果？
由于`uint256`的类型问题，其能存储最大取值是0到2^256减1，即`115792089237316195423570985008687907853269984665640564039457584007913129639935`。
所以我们可以传入`_value=57896044618658097711785492504343953926634992332820282019728792003956564819968`并且  
`cnt=2`。此时参数会溢出为0 。
### 三、漏洞测试
下面我们对漏洞进行测试工作。首先我们对合约进行版本设置并部署。
我们首先对msg.sender进行余额查看，看是否部署成功：
接下来，我们切换地址：`0x14723a09acff6d2a60dcdf7aa4aff308fddc160c`。
余额为0
。之后我们传入参数：`["0x14723a09acff6d2a60dcdf7aa4aff308fddc160c","0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db"],57896044618658097711785492504343953926634992332820282019728792003956564819968`，进行调用`batchTransfer()`函数，并成功执行。
此时我们查看钱包地址的余额：
即合约由于溢出导致了`amount`变为了0 。虽然我们的余额为0，但是`balances[msg.sender] >=
amount`也满足。所以进行了绕过，也就是说我们的用户没有花费一分钱就套现了合约的`57896044618658097711785492504343953926634992332820282019728792003956564819968`以太币。
如此以来，黑客的恶意行为就干扰了BEC的正常运作。又由于部署在以太坊上的solidity无法更改，所以就官方就不得不重新部署合约来进行修补操作。
### 四、参考资料
  * 
  * 代码：
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**