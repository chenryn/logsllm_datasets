...
```
一旦您的映像成功发布，切换回连接到您的 Swarm 集群的终端会话，并使用`docker stack deploy`命令重新部署您的栈:
```
> docker stack deploy --with-registry-auth -c stack.yml todobackend
Updating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)
Updating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)
Updating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)
> docker service ps todobackend_app --format "{{ .Name }}: {{ .CurrentState }}"
todobackend_app.1: Running 20 minutes ago
todobackend_app.2: Running 20 minutes ago
```
如果您运行`docker service ps`命令，如前例所示，您可能会注意到您的 todobackend 服务没有被重新部署(注意，在某些情况下，服务可能会被重新部署)。原因是我们在栈文件中默认使用最新的映像。为了确保我们能够持续交付和部署我们的应用，我们需要引用一个特定的版本或构建标签，这是您应该始终采取的最佳实践方法，因为它将强制在每次服务更新时部署您的映像的显式版本。
为了在本地工作流中做到这一点，我们可以利用 todobackend 应用存储库中已经存在的`Makefile`，并包含一个`APP_VERSION`环境变量，该变量返回当前的 Git 提交哈希，我们随后可以在栈文件中引用它:
```
version: '3.6'
services:
  app:
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}
    ...
    ...
  collectstatic:
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}
    ...
    ...
```
有了这个配置，我们现在需要在`todobackend`存储库的根目录下向`Makefile`添加一个部署配方，当 Docker 客户端解析栈文件时，它将自动使`APP_VERSION`环境变量对其可用:
```
.PHONY: test release clean version login logout publish deploy
export APP_VERSION ?= $(shell git rev-parse --short HEAD)
version:
  @ echo '{"Version": "$(APP_VERSION)"}'
deploy: login
  @ echo "Deploying version ${APP_VERSION}..."
 docker stack deploy --with-registry-auth -c stack.yml todobackend 
login:
  $$(aws ecr get-login --no-include-email)
...
...
```
`deploy`食谱引用了`login`食谱，确保我们在运行`deploy`食谱中的任务之前，总是先运行相当于`make login`的内容。这个方法只是运行`docker stack deploy`命令，这样我们就可以通过运行`make deploy`将更新部署到我们的栈中:
```
> make deploy
Deploying version 3db46c4,,,
docker stack deploy --with-registry-auth -c stack.yml todobackend
Updating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)
Updating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)
Updating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)
> docker service ps todobackend_app --format "{{ .Name }}: {{ .CurrentState }}"
todobackend_app.1: Running 5 seconds ago
todobackend_app.1: Shutdown 6 seconds ago
todobackend_app.2: Running 25 minutes ago
> docker service ps todobackend_app --format "{{ .Name }}: {{ .CurrentState }}"
todobackend_app.1: Running 45 seconds ago
todobackend_app.1: Shutdown 46 seconds ago
todobackend_app.2: Running 14 seconds ago
todobackend_app.2: Shutdown 15 seconds ago
```
因为我们的栈现在配置了一个特定的映像标签，如前面例子中的`APP_VERSION`变量(`3db46c4`)所定义的，检测到一个变化并且更新`app`服务。您可以使用`docker service ps`命令来确认这一点，如前所述，回想一下，我们已经将该服务配置为每次更新一个实例，每次更新之间有 30 秒的延迟。
如果您现在浏览到外部负载平衡器 URL 上的`/todos`路径，认证错误现在应该被替换为`table does not exist`错误，这证明我们现在至少能够连接到数据库，但是还没有将数据库迁移作为 Docker Swarm 解决方案的一部分来处理:
![](img/4421dad8-2e82-412a-9d29-3122345044ae.png)
Database error
# 运行数据库迁移
现在我们已经建立了一种机制来安全地访问栈中的 db 服务，我们需要执行的最后一项配置任务是添加一个将运行数据库迁移的服务。这类似于我们之前创建的 collectstatic 服务，因为它需要是一个“一次性”任务，只在我们创建栈或部署新版本的应用时执行:
```
version: '3.6'
networks:
  ...
volumes:
  ...
secrets:
  ...
services:
  app:
    ...
  migrate:
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:${APP_VERSION}
 networks:
 - net
 environment:
 DJANGO_SETTINGS_MODULE: todobackend.settings_release
 MYSQL_HOST: db
 MYSQL_USER: todo
 secrets:
 - source: todobackend_mysql_password
 target: MYSQL_PASSWORD
command:
 - python3
 - manage.py
 - migrate
 - --no-input
 deploy:
 replicas: 1
 restart_policy:
 condition: on-failure
 delay: 30s
 max_attempts: 6
  collectstatic:
    ...
  db:
    ...
```
新的`migrate`服务的所有设置应该是不言自明的，因为我们之前已经为其他服务配置了它们。`deploy`配置尤其重要，它的配置与另一个一次性收集服务相同，Docker Swarm 将尝试确保`migrate`服务的单个副本能够成功启动六次，每次尝试之间的延迟为 30 秒。
如果您现在运行`make deploy`来部署您的更改，`migrate`服务应该能够成功完成:
```
> make deploy
Deploying version 3db46c4...
docker stack deploy --with-registry-auth -c stack.yml todobackend
Updating service todobackend_collectstatic (id: tkal4xxuejmf1jipsg24eq1bm)
Updating service todobackend_db (id: 9vj845j54nsz360q70lk1nrkr)
Updating service todobackend_app (id: xz0tl79iv75qvq3tw6yqzracm)
Creating service todobackend_migrate
> docker service ps todobackend_migrate --format "{{ .Name }}: {{ .CurrentState }}"
todobackend_migrate.1: Complete 18 seconds ago
```
为了验证迁移是否实际运行，因为我们在创建 Docker Swarm 集群时启用了 CloudWatch 日志，所以您可以在 CloudWatch 日志控制台中查看`migrate`服务的日志。当使用 Docker for AWS 解决方案模板部署集群时，会创建一个名为`-lg`的日志组，在我们的例子中是`docker-swarm-lg`。如果您在 CloudWatch 日志控制台中打开此日志组，您将看到每个正在运行或已经在 Swarm 集群中运行的容器都存在日志流:
![](img/54f50ec8-9ee0-4ceb-878e-ac7caf4c352b.png)
Deploying the migrate service
您可以看到最近的日志流与`migrate`服务相关，如果您打开该日志流，您可以确认数据库迁移成功运行:
![](img/28559836-2823-487e-95d2-492c1db559e8.png)
The migrate service log stream
此时，您的应用应该能够成功运行，并且您应该能够与应用交互来创建、更新、查看和删除 Todo 项。验证这一点的一个好方法是运行您在前面章节中创建的验收测试，这些测试包含在 todobackend 发行版映像中，确保您通过`APP_URL`环境变量传入外部负载平衡器 URL:
```
> docker run -it --rm \ 
 -e APP_URL=http://docker-sw-external-1a5qzeykya672-1599369435.us-east-1.elb.amazonaws.com \ 
 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:3db46c4 \
 bats /app/src/acceptance.bats
Processing secrets []...
1..4
ok 1 todobackend root
ok 2 todo items returns empty list
ok 3 create todo item
ok 4 delete todo item
```
现在，您已经成功地将 todobackend 应用部署到在 AWS 中运行的 Docker Swarm 集群中，我鼓励您通过拆除/重新创建栈来进一步测试您的应用是否已准备好投入生产，并通过测试提交和创建新的应用版本来运行一些示例部署。
一旦完成，您应该提交您所做的更改，并且不要忘记通过删除云信息控制台中的`docker-swarm`栈来销毁您的 Docker Swarm 集群。
# 摘要
在本章中，您学习了如何使用 Docker Swarm 和 Docker for AWS 解决方案部署 Docker 应用。AWS Docker 提供了一个云信息模板，允许您在几分钟内设置 Docker Swarm 集群，还提供了与 AWS 服务的集成，包括弹性负载平衡器服务、弹性文件系统和弹性块存储。
创建 Docker Swarm 集群后，您学习了如何通过配置 SSH 隧道为本地 Docker 客户端建立对 Swarm 管理器的远程访问，该隧道链接到 Swarm 管理器上的`/var/run/docker.sock`套接字文件，并将其呈现为 Docker 客户端可以与之交互的本地端点。这使得管理集群的体验类似于管理本地 Docker 引擎。
您学习了如何创建和部署 Docker 服务，这些服务通常代表长时间运行的应用，但也可能代表一次性任务，如运行数据库迁移或生成静态内容文件。Docker 栈代表复杂的多服务环境，使用 Docker Compose 第 3 版规范进行定义，并使用`docker stack deploy`命令进行部署。使用 Docker Swarm 的一个优势是可以访问 Docker 机密功能，该功能允许您将机密安全地存储在加密的 raft 日志中，该日志会自动复制并在集群中的所有节点之间共享。Docker 机密可以在内存 tmpfs 安装在`/run/secrets`时暴露给服务。您已经了解了将应用配置为与 Docker secrets 功能集成是多么容易。
最后，您学习了如何解决与在生产中运行容器相关的常见操作挑战，例如如何以 EBS 卷的形式提供对持久、持久存储的访问，EBS 卷可以随容器自动重新定位，如何使用 EFS 提供对共享卷的访问，以及如何协调新应用功能的部署，支持运行一次性任务和滚动升级应用服务的能力。
在本书的下一章也是最后一章，将向您介绍 AWS Elastic Kubernetes 服务(EKS)，该服务于 2018 年年中推出，为与 Docker Swarm 竞争的领先开源容器管理平台 Kubernetes 提供支持。
# 问题
1.  对/错:Docker Swarm 是 Docker 引擎的一个原生特性。
2.  您使用什么 Docker 客户端命令来创建服务？
3.  对/错:Docker Swarm 包括三种节点类型——管理器、工作器和代理。
4.  对/错:AWS 的 Docker 提供了与 AWS 应用负载平衡器的集成。
5.  对/错:当备份设置为可重定位时，Cloudstor AWS 卷插件创建一个 EFS 备份卷。
6.  对/错:您创建了一个数据库服务，该服务使用 Cloudstor AWS 卷插件来提供位于可用性区域 us-west-1a 中的 EBS 支持的卷。出现故障，并且在可用性区域 us-west-1b 中创建新的数据库服务容器。在这种情况下，原始 EBS 卷将重新连接到新的数据库服务容器。
7.  您需要向 Docker Stack 部署和 Docker 服务创建命令附加什么标志来与私有 Docker 注册表集成？
8.  您部署了一个从 ECR 下载映像的栈。第一次部署成功，但是当您第二天尝试执行新部署时，您会注意到您的 Docker 群节点无法提取 ECR 映像。你怎么能解决这个问题？
9.  定义 Docker Swarm 栈应该使用 Docker 编写规范的哪个版本？
10.  对/错:在配置单次服务时，您应该像往常一样配置重启策略。
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   AWS Docker 社区版:https://store . docker . com/versions/community/docker-ce-AWS
*   自动气象站文件记录员:[https://docs.docker.com/docker-for-aws](https://docs.docker.com/docker-for-aws)
*   Docker 合成文件版本 3 参考:https://docs . docker . com/compose/compose-file/
*   AWS 持久数据卷的 docker:[https://docs . docker . com/docker-for-AWS/持久数据卷/](https://docs.docker.com/docker-for-aws/persistent-data-volumes/)
*   AWS 模板档案的记录人:[https://docs.docker.com/docker-for-aws/archive/](https://docs.docker.com/docker-for-aws/archive/)
*   用 Docker 机密管理敏感数据:[https://docs.docker.com/engine/swarm/secrets/](https://docs.docker.com/engine/swarm/secrets/)T2】
*   Docker 命令行参考:[https://docs.docker.com/engine/reference/commandline/cli/](https://docs.docker.com/engine/reference/commandline/cli/)
*   Docker 入门-第 4 部分:群集:[https://docs.docker.com/get-started/part4/](https://docs.docker.com/get-started/part4/)
*   Docker 入门-第 5 部分:栈:[https://docs.docker.com/get-started/part5](https://docs.docker.com/get-started/part5/)
*   AWS Swarm ECR 自动登录 Docker:https://github . com/mroca/docker-swarm-AWS-ECR-auth
*   SSH 代理转发:[https://developer . github . com/v3/guides/using-SSH-agent-forwarding/](https://developer.github.com/v3/guides/using-ssh-agent-forwarding/)