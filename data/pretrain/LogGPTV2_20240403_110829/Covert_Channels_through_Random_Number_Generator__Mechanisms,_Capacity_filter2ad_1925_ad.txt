high demand for random seeds is created. Therefore, it is
impossible to implement an error-free RNG channel using
the existing RNG hardware. To implement reliable commu-
nication over the RNG channel in the presence of occasional
errors, it is necessary to carefully select and use a proper
Error Correcting Code (ECC). We now describe how this
can be accomplished in a simple and eﬀective way.
Most commonly used ECCs are block codes that operate
on a block-by-block basis. A popular variation of such codes
is the Reed-Solomon [54] (RS) group of codes. The RS code
is capable of detecting and correcting a number of corrupt-
ed/erased symbols in a block. The number of symbols the
code can correct depends on the speciﬁc parameters of the
code and is highly conﬁgurable. An RS code is typically de-
scribed by a set of parameters: s is the number of bits per
code symbol; n is the number of symbols per block, and k
is the message length in symbols per block. The parameter
t represents the number of symbols that can be corrected
in each block. It is deﬁned as t = (n−k)
. For example, the
widely used code with n = 255 and m = 223 is usually de-
noted as RS(255,223) and it is capable of correcting up to 16
erroneous symbols. In order to select appropriate parame-
ters of the code, one must determine the maximum possible
number of corrupted symbols that can appear in a block and
set the parameter k accordingly.
2
To make the RNG channel compatible with the RS codes,
we adjusted the communication protocol based on Protocol
1 to send and receive bytes instead of the individual bits.
We used Protocol 1 as a starting point for this experiment
because it is based on simultaneous execution of the trojan
and the spy and is easier to use in this case. A limitation of
the byte-granularity channel is its lower tolerance to errors,
because an error in any bit of a transmitted byte corrupts
the entire byte. To overcome this limitation, we used the
following approach. We reduced the speed of the trojan
while keeping the speed of the spy at the maximum level.
This allows the spy to perform multiple measurements (14
measurements in our setup) during the transmission of each
bit by the trojan. This approach also has the additional
advantage of easing the timing constraints.
Figure 7 demonstrates the spy’s observations when the
trojan transfers a byte with the bit value of 10110011. In
this protocol, the spy makes the decision about the received
value based on the majority of its readings. In most cases
when the trojan transfers logical ”0”, the spy observes a se-
quence of all zeroes. Decoding of such readings is straight-
forward. However, when logical ”1” is transferred, some of
the readings will appear to the spy as zeroes. The spy can
make a decision based on the number of observed ones in
a sequence of readings. We adjust this threshold in such a
way that minimizes the number of incorrectly decoded bits.
For example, the leftmost bit in the sequence is decoded as
logical one, because most of the readings are ones, as seen
from the ﬁgure. The next bit is decoded as logical zero.
We set the number of rdseed instructions that the spy
executes during each probing stage in such a way that allows
the spy to monitor the state of the RNG module at any
given time, but at the same time creating minimal parasitic
contention from performing the probes.
We implemented this channel and discovered that it takes
200 657 cycles to transmit one byte of data, which involves
making the required number of probes by the spy and stor-
Figure 7: Spy’s observation when the trojan transfers a byte
of data over the channel.
ing the values read by these probes in memory. Thus, the
attackers can transmit 19 934.42 bytes per second. This esti-
mation assumes ideal inter-byte synchronization so that the
primes and probes occur at exactly the same time. In prac-
tice, context switches and timing variations may distort this
synchrony. We discuss possible solutions to synchronization
and demonstrate one of them in Section 4.6.
Although the rate of about 20 kB/sec is lower than the
theoretical rates that we showed above, the channel can still
be considered as a high-bandwidth channel. We studied this
channel under several noisy conditions. To be consistent
with the previous measurements, we evaluated the chan-
nel under the same eﬀect of the GPU noise as we did in
Section 4.2.1. We did not measure the impact of legiti-
mate programs that use RNG hardware in our evaluation
model, because normal programs request random seeds very
rarely, usually only during startup and initial key genera-
tion. Such events do not create a steady contention for the
random seeds and thus do not introduce signiﬁcant noise.
Programs that have high demand for the random values (e.g.
Monte Carlo simulations) rely on pseudo-random [8] num-
bers, rather than on true random seeds. This is one of the
critical advantages for considering the RNG hardware unit
as covert communication medium.
To perform this experiment, we ﬁrst set up the RNG chan-
nel equipped with ECC to transfer blocks of 255 bytes. Fol-
lowing that, we evaluated the channel under diﬀerent noise
conditions and recorded the maximum number of errors ob-
served in any of the transferred blocks for each environment
setting. This statistics allowed us to select the best value of
parameter k for each case. This parameter was selected to
allow the correction of all errors that occurred during our ex-
periments. The resulting error rates, along with the value of
parameter k and the resulting channel bit rates are presented
in Table 2. As seen from the presented data, the observed er-
ror rate increases with the interference from the GPU which
conﬁrms the earlier observed behavior. However, we note
that covert channels are considered more dangerous in server
machines which usually do not have graphics. Even in the
case of active 3D animation performed in the background,
the channel error rate is still within acceptable ranges and
can be easily corrected with the use of ECC.
Finally, we note that the bit rates reported here should
10111001Maximum
block error rate
(= t)
k
Bit
rate with
ECC (bytes/s)
No GUI Static GUI
6
11
2D
3D
33
40
243
18 996
233
18 215
189
14 775 13 680
175
Table 2: Channel Characteristics Under Noisy Conditions
not be interpreted as the maximum achievable practical bit
rate. Further optimizations such as more sophisticated en-
coding/decoding and aggressive timing optimizations can
achieve higher rates. Our goal was to demonstrate that rea-
sonably high transmission rates can be achieved even with
a simple implementation.
4.5 Capacity Estimation of Multi-process
Channels
With the trojan and the spy detection capability in place,
the actual channel capacity when operating in a multi-
process setting will be limited by the amount of time that the
spy and the trojan execute simultaneously on two diﬀerent
cores. Naturally, this time depends on the OS scheduling
and also on the external system load (e.g. on other pro-
cesses also running in the system at the same time). To
estimate the impact of scheduling and interference on the
achievable transmission rate, we performed the experiments
on three diﬀerent systems: a desktop system with 4-core
processor running standard user environment applications,
a server-class system with 16 computing cores, and a dedi-
cated virtual machine running on Amazon EC2 cloud. For
each experiment, we measured the percentage of trojan’s cy-
cles during which the spy also executes on one of the other
cores. We did not change the scheduler policy and allowed
normal competition for the time resources with other pro-
cesses. The results are presented in Table 3.
Desktop
Server
EC2
Clean Loaded Clean Loaded Normal Load
0.937
187.4
0.319
63.8
0.850
170
0.991
198.2
0.179
35.8
71.212 24.244 75.316 13.604 64.6
P
Protocol 2 bit
rate (kbit/s)
ECC
nel
bit
(kbit/s)
chan-
rate
Table 3: Fraction of time P the trojan runs simultaneously
with the spy and estimated bit rate
For each system, the table shows the percentage of cycles
(out of the total trojan’s cycles) when the trojan and the
spy are co-executing together (P). It also shows the result-
ing channel capacity that would be achieved on each system
under each scheduling scenario and the additional load from
external processes. We used two baseline capacities. First is
the upper bound capacity of 400 kbit/s as shown in Table 1
(Protocol 2 channel) and the second capacity of 152 kbit/s
(18.9 kB/S) with built in error correction as shown in Ta-
ble 2 (ECC channel). We used the value of P to adjust the
capacities under the normal scheduling policies. For exam-
ple, if the value of P is 0.5, then 50% of the time the trojan
executes together with the spy and the capacity in this case
would decrease by two times.
For the desktop system in a clean state (no other processes
are running), the spy runs alongside trojan 94% of the cy-
cles, resulting in the channel capacity of 375 and 142 kbit/s
for the channel based on Protocol 2 and the ECC-equipped
channel respectively.
In order to allow the spy to detect
when the trojan is not executing, the usage of Manchester
codes is needed as we discussed in Section 4.3.2. Incorpo-
rating Manchester codes into the ECC channel results in
the reduction of the throughput by two times. Although 8
bits are still transferred and decoded, only 4 bits are then
extracted by the spy. However, to be consistent with our
previous ECC parameters, we let the ECC still operate on
the symbol size s of 8. The spy simply combines two 4-bit
symbols into one and uses it in error correction. As a result,
the capacity is lowered by a factor of two. Resulting bit
rates when Manchester codes are used are 187 and 71 kbit/s
for Protocol 2 and ECC channel respectively. We also ex-
perimented with noisy environment, where two CPU-bound
external processes are scheduled on the cores where the tro-
jan and the spy execute. In this case, the co-scheduled time
is only about 32%, resulting in the channel capacity of 64
and 24 kbit/s for the two channels (again, accounting for
the eﬀects of Manchester encoding). On the server, the co-
scheduled percentages are 99% which results in bit rates of
198 and 75 kbit/s. In noisy environment, the two processes
are co-scheduled 18% of the time, resulting in the bit rate
of 36 and 14 kbit/s for both channels. We also performed
scheduling experiments on the EC2 cloud with normal load.
In this setting, the experimental VM shares the hardware
with other VMs running on the cloud. The trojan and the
spy run together 85% of the time, resulting in the channel
capacities of 170 and 65 kbit/s for the two channels. In all
of these scenarios, a high-capacity channel can be realized.
4.6 Channel Synchronization: Simultaneous
Scheduling Intervals
In previous sections, we demonstrated the RNG covert
channel in single and multi-process settings, discussed how
to detect the presence of trojan and spy, and demonstrated
how to adapt the transmission protocol to incorporate the
error correction using Reed-Solomon ECC. However, previ-
ous discussions and results assume ideal internal synchro-
nization and the described channels are suitable for the
transmission of short byte-sized messages. We conclude
the attack part of this paper by demonstrating a simple
covert channel synchronization mechanism to support the
transmission of longer messages. Our implementation is
simple and is only intended to show practical end-to-end
RNG channel realization. Higher transmission rates can be
realized using more complicated ﬁne-grain synchronization
schemes, this is left for future work.
To understand the need for synchronization, consider a
situation when the trojan is interrupted by a context switch
in the middle of its message, and later resumes execution. In
this case, both the trojan and the spy need to know that the
transmission resumes when the trojan is rescheduled. More
generally, both processes need to know when the message
begins and when it ends. Synchronization of this nature is
not a problem that is unique to the RNG channel — any
covert channel needs to be synchronized. Several previous
studies considered this problem. For example, [22] used the
idea of a pilot signal. For simplicity, we implemented a dif-
ferent approach that we call Simultaneous Scheduling Inter-
vals (SSI). The key idea is to schedule the trojan and the
spy for short time intervals, so that they run simultaneously
multiple times per second without interrupts. During each
interval, the transmission of a single byte occurs. The syn-
chrony is achieved by accurately aligning the times when the
trojan and the spy wake up for the next interval.
To implement SSI, we relied on the timer_create POSIX
interface available on Unix-like systems. Speciﬁcally, both
the trojan and the spy use this system call to request to
be woken up 1,000 times per second. During each interval,
the two processes send and receive a small amount of data.
Due to the very short duration of the execution periods,
the trojan and the spy are not interrupted by the OS. To
synchronize the clocks more closely, both processes perform
some additional tuning during the ﬁrst interval. Speciﬁcally,
they read the system timer (with microsecond resolution),
and insert the additional sleep time to the ﬁrst execution
interval to end it at the millisecond boundary, or as close
to it as possible. After that, the scheduling of the conse-
quent intervals occurs at the millisecond boundaries, with
slight deviations due to system noise. The OS assures that
these deviations do not accumulate over consecutive inter-
vals and synchronous execution of the two processes is sus-
tained. Our experiments showed that these deviations do
not impact the transmission and error-free channel can be
realized in this manner. Note that the nature of this par-
ticular approach to synchronization also makes the spy and
the trojan detection unnecessary, thus obviating the need
for Manchester coding. However, Manchester coding will
still be needed if more ﬁne-grain and high-performance syn-
chronization schemes are used.
The simplest way to use the SSI synchronization is to