from sage.modules.free_module_integer import IntegerLattice
import itertools
from fastecdsa.curve import Curve
from random import getrandbits, shuffle, randint
def resultant(p1, p2, var):
    p1 = p1.change_ring(QQ)
    p2 = p2.change_ring(QQ)
    var = var.change_ring(QQ)
    r = p1.resultant(p2, var)
    return r.change_ring(F)
# r = remote('123.56.87.28', '19962')
# context(log_level='debug')
# ALPHABET = string.ascii_letters + string.digits
# rec = r.recvline().decode()
# print(rec)
# suffix = rec[rec.find('+'):rec.find(')')][1:].strip()
# digest = rec[rec.find('==')+3:-1].strip()
# print(f"suffix: {suffix} \ndigest: {digest}")
# for i in itertools.product(ALPHABET, repeat=4):
#     prefix = ''.join(i)
#     guess = prefix + suffix
#     if sha256(guess.encode()).hexdigest() == digest:
#         # log.info(f"Find XXXX: {prefix}")
#         print((f"Find XXXX: {prefix}"))
#         break
# r.sendline(prefix.encode())
n = 75
m = 150
r = 10
N = 
126633165554229521438977290762059361297987250739820462036000284719563379254544315991201
997343356439034674007770120263341747898897565056619503383631412169301973302667340133958
109
with open('output.txt', 'r') as f:
    data = f.readlines()
    for i in range(len(data)):
        data[i] = data[i].replace('[', '').replace(']', '').split(' ')
        tmp = []
        for x in data[i]:
            if x != '':
                tmp.append(int(x))
        data[i] = tmp
        print(len(tmp))
    C = matrix(ZZ, data)
A = matrix(ZZ,m+r,m+r)
for i in range(m):
    A[i,i] = 1
for i in range(r):
    for j in range(m):
        A[j,i+m] = C[i,j] 64K
  for k := range pools {
    i := k
    pools[k].New = func() interface{} {
      return make([]byte, 1 65536 {
    return nil
  }
  bits := msb(size)
  if size == 1 65536 || cap(buf) != 1<<bits {
    return errors.New("incorrect buffer size")
  }
  bufPools[bits].Put(buf)
  return nil
}
//
// Write buffer
//
var writeBufPool sync.Pool
func InitWriteBufPool() sync.Pool {
  return sync.Pool{
    New: func() interface{} { return &bytes.Buffer{} },
  }
}
func GetWriteBuffer() *bytes.Buffer {
  return writeBufPool.Get().(*bytes.Buffer)
}
func PutWriteBuffer(buf *bytes.Buffer) {
  buf.Reset()
  writeBufPool.Put(buf)
}
// StrToUUID converts string to uuid
func StrToUUID(s string) (uuid [16]byte, err error) {
  b := []byte(strings.Replace(s, "-", "", -1))
  if len(b) != 32 {
    return uuid, errors.New("invalid UUID: " + s)
  }
  _, err = hex.Decode(uuid[:], b)
  return
}
// GetKey returns the key of AES-128-CFB encrypter
// Key：MD5(UUID + []byte('c48619fe-8f02-49e0-b9e9-edf763e17e21'))
func GetKey(uuid [16]byte) []byte {
  md5hash := md5.New()
  md5hash.Write(uuid[:])
  md5hash.Write([]byte("c48619fe-8f02-49e0-b9e9-edf763e17e21"))
  return md5hash.Sum(nil)
}
// TimestampHash returns the iv of AES-128-CFB encrypter
// IV：MD5(X + X + X + X)，X = []byte(timestamp.now) (8 bytes, Big Endian)
func TimestampHash(unixSec int64) []byte {
  ts := GetBuffer(8)
  defer PutBuffer(ts)
  binary.BigEndian.PutUint64(ts, uint64(unixSec))
  md5hash := md5.New()
  md5hash.Write(ts)
  md5hash.Write(ts)
  md5hash.Write(ts)
  md5hash.Write(ts)
  return md5hash.Sum(nil)
}
func main() {
  fmt.Println("111");
  var t int64
  t = 1615528962 - 100
  var i int64
  for i = 0; i < 200; i += 1 {
    uuid, _ := StrToUUID("b831381d-6324-4d53-ad4f-8cda48b30811")
    block, _ := aes.NewCipher(GetKey(uuid))
    var buf []byte
    buf, _ = 
hex.DecodeString("b48b35bf592c09b21545392f73f6cef91143786464578c1c361aa72f638cd0135f253
43555f509aef6c74cd2a2b86ee0a9eb3b93a81a541def4763cc54f91ba02681add1b815e8c50e028c76bde0
ee8a9593db88d901066305a51a9586a9e377ee100e7d4d33fcfc0453c86b1998a95275cd9368a68820c2a6a
540b6386c146ea7579cfe87b2e459856772efdcf0e4c6ab0f11d018a15561cf409cbc00491d7f4d22b7c486
a76a5f2f25fbef503551a0aeb90ad9dd246a9cc5e0d0c0b751eb7b54b0abbfef198b1c4e5e755077469c318
f20f3e418af03540811ab5c1ea780c886ea2c903b458a26")
    stream := cipher.NewCFBDecrypter(block, TimestampHash(t + i))
    stream.XORKeyStream(buf, buf)
    if buf[0] == 1 {
      fmt.Println(buf[0])
      fmt.Println(buf)
    }
  }
}
数据应该是
根据协议读⼀下这个数据，应该只到第55byte为⽌，后⾯不⽤解密，按照⽂档可以读出来在校验值之前加⼊6 字节
的随机值，加密⽅式是ChaCha20-Poly1305，⽬标服务器地址127.0.0.1:5000，还可以拿到密钥和IV的信息。
但是按照这个解密⽅法解不出来，再去仔细看数据包，发现协议头⾥⾯有⼀个⽂档⾥没写的Opt，
RequestOptionGlobalPadding，得看下v2ray源码。
读了⼀下源码，发现当开启这个opt的时候，每⼀个包会多取⼀次随机⻓度的padding，⻓度是根据那个shake 
hash的值确定的，所以会多使⽤2bytes的hash，所以第⼀组取的hash应该是第3和第4个byte，以此类推。同时还
发现⽂档有问题，审计了⼀下源码发现3是AES-GCM，⽽不是⽂档⾥⾯说的ChaCha20-Poly1305，换了算法终于可
以把请求包解出来了
然后照葫芦画瓢解响应的数据包
data = 
[1,19,39,127,87,50,218,82,173,167,144,216,123,136,41,218,169,94,74,154,169,186,88,199,2
27,173,54,254,36,153,220,162,89,162,13,99,0,1,19,136,1,127,0,0,1,26,206,125,155,176,181
,57,24,44,3,129,170,64,93,17,45,93,29,193,211,62,197,142,68,107,21,31,51,49,205,82,9,21
0,93,27,6,95,168,117,68,134,229,113,88,76,70,250,125,14,228,67,235,105,171,244,102,194,
131,73,233,2,9,35,204,143,71,47,29,32,187,224,86,135,183,32,226,204,143,171,77,193,115,
194,50,214,200,21,203,124,117,198,189,116,210,226,165,118,56,239,253,17,255,0,156,54,56
,76,67,27,18,62,209,36,150,94,33,138,121,207,185,17,85,252,85,184,31,175,113,106,239,18
1,131,40,242,149,231,110,53,45,17,233,3,23,174,141,32,144,56,174,112,209,158,226,245,11
9,196,132,29,119,220,66,100,49,8,138,148,50,68,245,10,243,162,255,223,69,184,255,33,11,
44,79,245,81,7,97,39,250]
GET /out HTTP/1.1
Host: 127.0.0.1:5000
User-Agent: curl/7.75.0
Accept: */*
Connection: close
import hashlib
import hmac
import struct
from Crypto.Cipher import AES
from Crypto.Cipher import ChaCha20_Poly1305
import binascii
import fuckpy3
from fnvhash import fnv1a_32
data = 
[1,19,39,127,87,50,218,82,173,167,144,216,123,136,41,218,169,94,74,154,169,186,88,199,2
27,173,54,254,36,153,220,162,89,162,13,99,0,1,19,136,1,127,0,0,1,26,206,125,155,176,181
,57,24,44,3,129,170,64,93,17,45,93,29,193,211,62,197,142,68,107,21,31,51,49,205,82,9,21
0,93,27,6,95,168,117,68,134,229,113,88,76,70,250,125,14,228,67,235,105,171,244,102,194,
131,73,233,2,9,35,204,143,71,47,29,32,187,224,86,135,183,32,226,204,143,171,77,193,115,
194,50,214,200,21,203,124,117,198,189,116,210,226,165,118,56,239,253,17,255,0,156,54,56
,76,67,27,18,62,209,36,150,94,33,138,121,207,185,17,85,252,85,184,31,175,113,106,239,18
1,131,40,242,149,231,110,53,45,17,233,3,23,174,141,32,144,56,174,112,209,158,226,245,11
9,196,132,29,119,220,66,100,49,8,138,148,50,68,245,10,243,162,255,223,69,184,255,33,11,
44,79,245,81,7,97,39,250]
print(len(data))
msg = bytes(data)
print(msg)
ver = msg[0]
iv = msg[1:17]
key = msg[17:33]
v = msg[33:34]
print("V ", binascii.hexlify(v))
opt = msg[34:35]
print("opt ", binascii.hexlify(opt))
psec = msg[35:36]
print("P|sec ", binascii.hexlify(psec))
rev = msg[36]
cmd = msg[37:38]
print("cmd ", binascii.hexlify(cmd))
port = msg[38:40]
T = msg[40]
ip = msg[41:45]