port and prefer a stronger cryptographic mechanism. For
example, such attack is known against version 2 of SSL,
which supports cipher-suite negotiation, but insecurely, see,
e.g., [16, 11]. Existing standardised cipher-suite negotia-
tion mechanisms, were all designed for authenticated key-
exchange protocols, e.g., IKE and TLS. These mechanisms
are interactive,
In the ﬁrst
round, the client sends its list of cipher-suites, typically in
order of preferences, and the server responds by identifying
the chosen cipher-suite (from the client’s list). The second
round uses the authenticated key exchanged by the proto-
col, to validate that, earlier, the server received the cor-
rect cipher-suite (i.e., the one sent by the client). Authen-
tication is done by exchanging the Message-Authentication-
Code (MAC) computed over the cipher-suites sent by the
client (and other exchanged values, including random nonces
to prevent replay). However, such a two-round, interac-
tive mechanism, would add too much overhead to a DNS
transaction and is not suitable for DNS, which is a pure
request-response protocol. In contrast, our proposed secure
cipher-suite negotiation protocol is non-interactive; it only
adds few, short ﬁelds, to the messages exchanged during a
(cid:22)(cid:23)(cid:26)
DNS transaction. This is important, since adding another
round would cause signiﬁcant extra delay, as well as make
deployment much harder.
Note that our single-round, ‘piggybacked’ mechanism is
possible since in DNSSEC, the entire set of supported pub-
lic keys and algorithms, is signed (‘certiﬁed’) together; this
holds for both Key Signing Keys and Zone Signing Keys.
This is in contrast to typical PKI certiﬁcates, as used by
both IKE and TLS, where the same entitymay have mul-
tiple keys, algorithms and certiﬁcates, and has no signature
over its entire set of keys, algorithms and certiﬁcates.
Our proposed DNSSEC cipher-suite negotiation mecha-
nism also has a security advantage, cf.
to the negotia-
tion mechanisms previously speciﬁed, e.g., for TLS. Namely,
known negotiation mechanisms are vulnerable,
if the at-
tacker can expose the cryptographic keys in real time, al-
lowing the attacker to compute the MAC and thereby trick
the parties into believing that cipher-suite negotiation was
done correctly. Such an attack was presented against TLS
[13].
In this paper, we focus on host-by-host (transport layer)
cipher-suite negotiation for DNSSEC. An alternative, which
we present in [7], is an end-to-end approach, whereby the
signaling is in application layer.
In the design in [7] the
signaling is performed by concatenating a list of DNSSEC
algorithms as subdomains, to the query; the preferences for
ciphers are expressed via the order of concatenation after
the query. The obvious disadvantage of the mechanism in
[7] is, therefore, that any possible diﬀerence in the order of
preferences, results in request to diﬀerent record. On the
other hand, the mechanism in [7] supports well the case
of a ‘forwarding resolver’ which provides resolution services
to several ‘proxy resolvers’, which may each have diﬀerent
cipher-suite policy (order of preference). We compare be-
tween the approaches in [9].
Contributions
In this work we carry out a study of DNSSEC deployment
status and challenges and design a transport layer cipher-
suite negotiation for DNSSEC. We implemented our pro-
posed design as user-spacem odules, for resolver and name
server, and evaluated it with standard Bind-9.9.3 DNS soft-
ware.
The deployment of cipher-suite for DNSSEC would alle-
viate deployment obstacles, and would speed up adoption of
DNSSEC both by resolvers and zones.
Organisation
In Section 2 we discuss deployment status of DNSSEC, re-
view factors impeding deployment and argue that the main
ostacle towards deployment is large DNSSEC-enabled re-
sponses. We also show that signed domains currently mainly
support weak ciphers. We then provide a design of cipher-
suite negotiation for DNSSEC in Section 3, and describe its
implementation and evaluation. In Section 4, we provide an
overview of DNS. We conclude this work and discuss future
research in Section 5.
2.
INTEROPERABILITY CHALLENGES
AND VULNERABILITIES
Zones that adopt DNSSEC typically support a number of
cryptographic keys, which results in large DNSSEC enabled
responses; however, as we next show, mostly weak crypto-
graphic options are supported. Signed DNS responses may
often cause problems to resolvers, name servers and Internet
clients and services.
In particular, due to their increased
size, signed responses are often exploited for attacks, e.g.,
cache poisoning and DDoS, or may disrupt DNS function-
ality and availability. As a result, zone operators are often
hesitant about signing their zones, and resolvers’ operators
typically do not enforce validation. The outcome is impeded
deployment of DNSSEC. Indeed, most DNS resolvers do not
support DNSSEC validation, and many zones are not signed
with DNSSEC. The fact that there is currently limited de-
ployment of DNSSEC further reduces a motivation for early
adopters, since protection of DNSSEC only ‘kicks in’ when
all the entities, involved in a resolution of some domain,
support DNSSEC.
DNSSEC Validation at Resolvers. A signiﬁcant fraction
of the resolvers currently signal DNSSEC support; however,
less than 3% actually enforce DNSSEC validation [12]. Ob-
viously, for such non-validating resolvers, DNSSEC does not
provide added security.
In fact, non-validating resolvers are open to cache-poisoning
attacks, in particular attacks exploiting the fact that such
resolvers receive large DNSSEC responses (but do not vali-
date them) [4].
DNSSEC Deployment at Zones. To make DNSSEC vali-
dation eﬀective in resolvers the zones have to adopt DNSSEC.
However, most do not. Recently, the root and some im-
portant top-level domains, such as com, net and org, were
signed; through experimental study we found that currently
62% of the TLDs are signed, however, less than one percent
(0.46%) of top million Alexa domains are signed. We sum-
marise the deployment status in Table 1. The ﬁrst column,
Table 1, lists the domains in the forward and reverse DNS
trees that we tested. The second column contains the num-
ber of registered domains that were tested. This is mainly
relevant in the reverse DNS tree, where a large fraction of the
domains (that correspond to IPv4 address blocks) are not
registered; in those cases our queries were answered with
non-existing domain responses.
The third column contains the number of name servers in
each domain space (rounded to thousands, i.e., K ≡ 1000).
Then, in subsequent columns, we report on our measurement
of the number of signed domains. In forward DNS, we found
that 62% of the Top-Level Domains (TLDs) are signed and
less than one percent (0.46%) of top million Alexa domains
are signed. Even worse results were found by NIST, [15],
who checked DNSSEC adoption among 1070 large industrial
and ﬁnancial US domains; out of those, they found only 1.4%
to have adopted DNSSEC.
In the reverse DNS tree, we found even lower percents:
only 0.07% of the zones are signed. We found this surpris-
ing, since the reverse DNS is used by several common secu-
rity mechanisms. Note that DNSSEC validation requires a
‘chain of trust’, hence, adoption is meaningful only when all
the zones in the path from the root are properly signed.
In what follows we outline the impact of large responses
on stability and availability of DNS and Internet networks
and services. As we argue, concerns for attacks and interop-
erability problems are among the main obstacles impeding
wide adoption of DNSSEC.
(cid:22)(cid:23)(cid:27)
domain
registered
name servers
signed
failure w/DNSSEC
Forward DNS Alexa
Forward DNS TLDs
rDNS x.in-addr.arpa.
rDNS y.x.in-addr.arpa.
50K
568
229
28K
32.5K
3.2K
1.5K
97K
rDNS z.y.x.in-addr.arpa.
27, 67K
9, 687K
0.46%
62%
84%
0.4%
0.06%
23%
2%
2%
32%
34.5%
Table 1: DNSSEC deployment and failures among domains in forward and reverse DNS trees.
2.1 Interoperability Problems with DNSSEC
DNSSEC enabled DNS responses are signiﬁcantly larger
than the corresponding ‘legacy’ DNS responses since they
contain, in addition to the ‘regular’ DNS records, also DNSSEC-
related records, mainly for signatures and public veriﬁca-
tion keys. Such responses often exceed the 512B maximal
DNS size speciﬁed in [RFC1035], requiring use of the EDNS
[RFC6891] extension mechanism; EDNS is also used to sig-
nal support of DNSSEC.
Some ﬁrewalls drop these DNS packets, due to the re-
sponse length. Indeed, DNSSEC responses often exceed the
maximal transmission unit (MTU) on the path, and thus
may get dropped or fragmented. Fragments are also blocked
by some ﬁrewalls, mainly for security concerns.
Due to concerns for the interoperability issues with large
signed-DNS responses, many resolvers that support DNSSEC,
accept and cache unvalidated responses, thereby exposing
themselves to a downgrade attack, [RFC4035]; for instance,
to avoid interoperability problems, unbound resolver sup-
ports a ‘permissive’ mode, accepting responses with missing
or incorrect signatures.
In a downgrade attack an attacker sends fake responses
that appear similar to responses passing through non in-
teroperable devices. If DNS passes the forged responses to
the application, then the attacker successfully performed a
downgrade attack on the system, and poisoned the cache of
the resolver, causing it to accept a forged response. For in-
stance, consider an attacker that poisons the NS and glue
A RRs, and provides a forged delegation NS RR to redirect
the clients to a host of attacker’s choosing. The resolver will
simply revert to plain DNS without the DNSSEC protection
- and will accept the spoofed records.
2.2 Deployment of Weak Cryptography
In our recent study, [7], where measured the DNSSEC al-
gorithms, as well as the key sizes, supported by signed zones
(among Alexa top million domains and TLDs), and found
that most support diﬀerent variations of RSA (with SHA1
or SHA256 hash functions) with weak keys, 1024 bits. The
results are plotted in Figure 3. The categories are grouped
according to key sizes1 ranges and according to diﬀerent vari-
ations of the RSA cipher; since all the domains were found to
support diﬀerent versions of RSA algorithm, we do not men-
tion ‘RSA’ in the ﬁgure. The measurements are consistent
with the recommendations by NIST and IETF [RFC4641]
for a mandatory support of RSA and also to avoid using
large keys (specifying a range of 512-2048 bits for (ZSK)
key size and recommending a default value of 1024 bits),
in order to avoid fragmentation, communication and com-
1The transmitted keys and signatures are encoded in Base64
thus contain an extra byte of redundancy for every three
bytes of actual data.
(cid:22)(cid:23)(cid:28)
(cid:1007)(cid:1004)
(cid:1006)(cid:1009)
(cid:1006)(cid:1004)
(cid:1005)(cid:1009)
(cid:1005)(cid:1004)
(cid:1009)
(cid:1004)
(cid:4)(cid:367)(cid:286)(cid:454)(cid:258)(cid:1081)
(cid:100)(cid:62)(cid:24)(cid:400)(cid:1081)
Figure 3: Distribution of the ciphers and public key
sizes supported by TLDs and Alexa top million do-
mains.
putation overhead and other problems with large keys and
signatures. There is hardly any support of cryptographic al-
gorithms that produce short signatures, such as ECC, since
the motivation to add more overhead to the transmitted
data is low. This supports our argument that cipher-suite
negotiation mechanism is essential not only for deployment