**Port and Prefer a Stronger Cryptographic Mechanism**

For example, version 2 of SSL is known to be vulnerable to attacks due to its insecure cipher-suite negotiation, as detailed in references [16, 11]. Existing standardized cipher-suite negotiation mechanisms, such as those in IKE and TLS, are designed for authenticated key-exchange protocols. These mechanisms are interactive, involving multiple rounds of communication.

In the first round, the client sends a list of preferred cipher-suites to the server. The server then responds by selecting one of the cipher-suites from the client’s list. In the second round, the authenticated key exchange protocol is used to validate that the server received the correct cipher-suite. This validation is achieved by exchanging a Message-Authentication-Code (MAC) computed over the cipher-suites sent by the client, along with other exchanged values, including random nonces to prevent replay attacks.

However, this two-round, interactive mechanism adds significant overhead to DNS transactions, which are inherently request-response protocols. Therefore, it is not suitable for DNS. In contrast, our proposed secure cipher-suite negotiation protocol is non-interactive, adding only a few short fields to the messages exchanged during a DNS transaction. This is crucial because adding another round would cause significant extra delay and complicate deployment.

**Single-Round, 'Piggybacked' Mechanism**

Our single-round, 'piggybacked' mechanism is feasible in DNSSEC because the entire set of supported public keys and algorithms is signed (certified) together, whether they are Key Signing Keys or Zone Signing Keys. This differs from typical PKI certificates used in IKE and TLS, where an entity may have multiple keys, algorithms, and certificates without a signature over the entire set.

Our proposed DNSSEC cipher-suite negotiation mechanism also offers a security advantage over previously specified negotiation mechanisms, such as those for TLS. Known negotiation mechanisms are vulnerable if an attacker can expose cryptographic keys in real time, allowing them to compute the MAC and trick the parties into believing that the cipher-suite negotiation was done correctly. Such an attack has been demonstrated against TLS [13].

**Host-by-Host Cipher-Suite Negotiation for DNSSEC**

This paper focuses on host-by-host (transport layer) cipher-suite negotiation for DNSSEC. An alternative approach, presented in [7], involves end-to-end signaling at the application layer. In this design, a list of DNSSEC algorithms is concatenated as subdomains to the query, and cipher preferences are expressed through the order of concatenation after the query. A disadvantage of this mechanism is that any difference in the order of preferences results in requests to different records. However, it supports the case of a 'forwarding resolver' providing resolution services to several 'proxy resolvers' with different cipher-suite policies.

**Contributions**

In this work, we conduct a study of DNSSEC deployment status and challenges, and design a transport layer cipher-suite negotiation for DNSSEC. We implemented our proposed design as user-space modules for both resolvers and name servers, and evaluated it with standard Bind-9.9.3 DNS software. The deployment of a cipher-suite for DNSSEC would alleviate deployment obstacles and speed up the adoption of DNSSEC by both resolvers and zones.

**Organization**

- **Section 2**: Discusses the deployment status of DNSSEC, reviews factors impeding deployment, and argues that large DNSSEC-enabled responses are a major obstacle. It also shows that signed domains mainly support weak ciphers.
- **Section 3**: Provides a design of cipher-suite negotiation for DNSSEC and describes its implementation and evaluation.
- **Section 4**: Offers an overview of DNS.
- **Section 5**: Concludes the work and discusses future research.

**Interoperability Challenges and Vulnerabilities**

Zones that adopt DNSSEC typically support a number of cryptographic keys, resulting in large DNSSEC-enabled responses. However, these responses often support weak cryptographic options. Signed DNS responses can cause problems for resolvers, name servers, and Internet clients and services. Due to their increased size, signed responses are often exploited for attacks like cache poisoning and DDoS, or may disrupt DNS functionality and availability. As a result, zone operators are hesitant about signing their zones, and resolvers’ operators typically do not enforce validation, impeding DNSSEC deployment.

**DNSSEC Validation at Resolvers**

A significant fraction of resolvers currently signal DNSSEC support, but less than 3% actually enforce DNSSEC validation [12]. For non-validating resolvers, DNSSEC does not provide added security and leaves them open to cache-poisoning attacks, especially when they receive large DNSSEC responses without validating them [4].

**DNSSEC Deployment at Zones**

To make DNSSEC validation effective, zones must adopt DNSSEC. However, most do not. Recently, the root and some important top-level domains, such as .com, .net, and .org, were signed. Our experimental study found that 62% of TLDs are signed, but less than 0.46% of the top million Alexa domains are signed. Table 1 summarizes the deployment status.

**Interoperability Problems with DNSSEC**

DNSSEC-enabled DNS responses are significantly larger than legacy DNS responses due to additional DNSSEC-related records. These responses often exceed the 512B maximum DNS size specified in [RFC1035], requiring the use of the EDNS [RFC6891] extension mechanism. Some firewalls drop these packets due to response length, and fragments are also blocked for security concerns. To avoid interoperability issues, many resolvers that support DNSSEC accept and cache unvalidated responses, exposing themselves to downgrade attacks [RFC4035].

**Deployment of Weak Cryptography**

In our recent study [7], we measured the DNSSEC algorithms and key sizes supported by signed zones among Alexa top million domains and TLDs. We found that most support different variations of RSA with SHA1 or SHA256 hash functions and weak keys (1024 bits). The results, plotted in Figure 3, are consistent with NIST and IETF [RFC4641] recommendations for mandatory RSA support and avoiding large keys to prevent fragmentation and communication overhead.

**Conclusion**

The deployment of a cipher-suite negotiation mechanism for DNSSEC is essential not only for deployment but also for enhancing security and interoperability.