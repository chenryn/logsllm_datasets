## Systemtap examples, Profiling - 4 Monitoring Polling Applications  
### 作者                                                                                                                               
digoal                                                                                                                                 
### 日期                                                                                                                                                
2013-11-20                                                                                                                        
### 标签                                                                                                                             
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                                                                                              
----                                                                                                                                       
## 背景          
```  
例子来自timeout.stp 脚本, 输出系统中指定的系统调用(poll, select, epoll, itimer, futex, nanosleep, signal)等待次数排行前20的进程以及各系统调用的等待次数的统计信息.  
脚本内容以及注解 :   
[root@db-172-16-3-150 network]# cd /usr/share/systemtap/testsuite/systemtap.examples/profiling  
[root@db-172-16-3-150 profiling]# cat timeout.stp  
#!/usr/bin/stap  
# Copyright (C) 2009 Red Hat, Inc.  
# Written by Ulrich Drepper   
# Modified by William Cohen   
global process, timeout_count, to  
global poll_timeout, epoll_timeout, select_timeout, itimer_timeout  
global nanosleep_timeout, futex_timeout, signal_timeout  
probe syscall.poll, syscall.epoll_wait {    //  epoll_wait : wait for an I/O event on an epoll file descriptor  
  if (timeout) to[pid()]=timeout    // 如果timeout大于0 , 说明有等待. 设置to[pid()]=timeout.    
    //  后面会用到这个标记判断poll和epoll_wait系统调用是否发生超时.  
}  
probe syscall.poll.return {    // wait for some event on a file descriptor  
  p = pid()  
  if ($return == 0 && to[p] > 0 ) {  // 返回值=0并且poll, epoll_wait的系统调用等待时间大于0表示发生等待.  
    poll_timeout[p]++    // 增加一次进程p的系统调用poll的超时计数  
    timeout_count[p]++    // 增加一次进程p的超时计数  
    process[p] = execname()  // 记录pid对应的命令名  
    delete to[p]  // 删除to[p],   
  }  
}  
probe syscall.epoll_wait.return {    //  wait for an I/O event on an epoll file descriptor  
  p = pid()  
  if ($return == 0 && to[p] > 0 ) {  
    epoll_timeout[p]++   // 增加一次进程p的系统调用epoll的超时计数  
    timeout_count[p]++    // 增加一次进程p的超时计数  
    process[p] = execname()    // 记录pid对应的命令名  
    delete to[p]   // 删除to[p],   
  }  
}  
probe syscall.select.return {    //  synchronous I/O multiplexing, allow a program to monitor multiple file descriptors,   
                                                   //  waiting until one or more of the file descriptors become "ready" for some class of I/O operation  
  if ($return == 0) {     // select 系统调用返回0时, 说明调用正常.   
    p = pid()  
    select_timeout[p]++  
    timeout_count[p]++  
    process[p] = execname()  
  }  
}  
probe syscall.futex.return {    // Fast Userspace Locking system call,   
//  The futex() system call provides a method for a program to wait for a value at a given address to change  
//  method to wake up anyone waiting on a particular address (while the addresses for the same memory  in  separate  
//  processes  may  not  be equal, the kernel maps them internally so the same memory mapped in different locations  
//  will correspond for futex() calls).  It is typically used to implement the contended case of a lock  in  shared  
//  memory, as described in futex(7).  
  if (errno_str($return) == "ETIMEDOUT") {    //  futex系统调用返回值$return.   
    //  使用errno_str转换成字符串, 如果等于ETIMEDOUT说明发生了等待.  
    //  Returns  0  if the process was woken by a FUTEX_WAKE call.  In case of timeout, the operation fails with  
    //  the error ETIMEDOUT.  
    p = pid()  
    futex_timeout[p]++  
    timeout_count[p]++  
    process[p] = execname()  
  }  
}  
probe syscall.nanosleep.return {  // high-resolution sleep  
//  nanosleep()  suspends  the execution of the calling thread until either at least the time specified in *req has  
//  elapsed, or the delivery of a signal that triggers the invocation of a handler in the calling  thread  or  that  
//  terminates the process.  
  if ($return == 0) {  
    p = pid()  
    nanosleep_timeout[p]++    //   
    timeout_count[p]++  
    process[p] = execname()  
  }  
}  
probe kernel.function("it_real_fn") {    //  The timer is automagically restarted, when interval != 0  
  p = pid()  
  itimer_timeout[p]++  
  timeout_count[p]++  
  process[p] = execname()  
}  
probe syscall.rt_sigtimedwait.return {   // synchronously wait for queued signals.  
  if (errno_str($return) == "EAGAIN") {    //  rt_sigtimedwait系统调用返回值$return.   
    //  使用errno_str转换成字符串, 如果等于EAGAIN说明发生了等待.  
    //  EAGAIN No signal in set was delivered within the timeout period specified to sigtimedwait().  
    p = pid()  
    signal_timeout[p]++  
    timeout_count[p]++  
    process[p] = execname()  
  }  
}  
probe syscall.exit {    // 当系统调用结束时, 清除计数  
  p = pid()  
  if (p in process) {   // 当p在process这个数组中时, 清除所有相关的计数.  
    delete process[p]  
    delete timeout_count[p]  
    delete poll_timeout[p]  
    delete epoll_timeout[p]  
    delete select_timeout[p]  
    delete itimer_timeout[p]  
    delete futex_timeout[p]  
    delete nanosleep_timeout[p]  
    delete signal_timeout[p]  
  }  
}  
probe timer.s(1) {  
  ansi_clear_screen()    //  清屏  
  printf ("  pid |   poll  select   epoll  itimer   futex nanosle  signal| process\n")    // 输出头  
  foreach (p in timeout_count- limit 20) {    //  timeout_count用于排序, 输出等待次数前20位的进程  
     printf ("%5d |%7d %7d %7d %7d %7d %7d %7d| %-.38s\n", p,  
              poll_timeout[p], select_timeout[p],  
              epoll_timeout[p], itimer_timeout[p],  
              futex_timeout[p], nanosleep_timeout[p],  
              signal_timeout[p], process[p])  
  }  
}  
// 间隔1秒输出poll, select, epoll, itimer, futex, nanosleep, signal等系统调用在这1秒内的等待次数.  
执行输出举例 :   
[root@db-172-16-3-150 profiling]# stap timeout.stp  
  pid |   poll  select   epoll  itimer   futex nanosle  signal| process  
 7121 |      7       0       0       0       0       0       0| postgres  
 7120 |      5       0       0       0       0       0       0| postgres  
 1778 |      1       0       0       0       0       0       0| avahi-daemon  
 1372 |      0       0       0       0       0       1       0| multipathd  
本文用到的probe alias原型 :   
/usr/share/systemtap/tapset/syscalls.stp  
/usr/share/systemtap/tapset/syscalls2.stp  
# epoll_wait _________________________________________________  
#  
# long sys_epoll_wait(int epfd, struct epoll_event __user *events,  
#               int maxevents, int timeout)  
# long compat_sys_epoll_wait(int epfd,  
#               struct compat_epoll_event __user *events,  
#               int maxevents, int timeout)  
#  
probe syscall.epoll_wait = kernel.function("compat_sys_epoll_wait").call ?,  
                           kernel.function("sys_epoll_wait").call ?  
{  
        name = "epoll_wait"  
        epfd = $epfd  
        events_uaddr = $events  
        maxevents = $maxevents  
        timeout = $timeout  
        argstr = sprintf("%d, %p, %d, %d", $epfd, $events, $maxevents, $timeout)  
}  
probe syscall.epoll_wait.return = kernel.function("compat_sys_epoll_wait").return ?,  
                                  kernel.function("sys_epoll_wait").return ?  
{  
        name = "epoll_wait"  
        retstr = return_str(1, $return)  
}  
# futex ______________________________________________________  
# long sys_futex(u32 __user *uaddr,  
#           int op,  
#           int val,  
#           struct timespec __user *utime,  
#           u32 __user *uaddr2,  
#           int val3)  
# long compat_sys_futex(u32 __user *uaddr, int op, u32 val,  
#               struct compat_timespec __user *utime, u32 __user *uaddr2,  
#               u32 val3)  
#  
probe syscall.futex = kernel.function("sys_futex").call ?  
{  
        name = "futex"  
        futex_uaddr = $uaddr  
        op = $op  
        val = $val  
        utime_uaddr = $utime  
        uaddr2_uaddr = $uaddr2  
        val3 = $val3  
        if ($op == 0)  
                argstr = sprintf("%p, %s, %d, %s", $uaddr, _futex_op_str($op),  
                        $val, _struct_timespec_u($utime, 1))  
        else  
                argstr = sprintf("%p, %s, %d", $uaddr, _futex_op_str($op),  
                        $val)  
}  
probe syscall.futex.return = kernel.function("sys_futex").return ?  
{  
        name = "futex"  
        retstr = return_str(1, $return)  
}  
# exit _______________________________________________________  
# long sys_exit(int error_code)  
probe syscall.exit = kernel.function("do_exit").call  
{  
        name = "exit"  
        status = $code  
        argstr = sprint($code)  
}  
# poll _______________________________________________________  
#  
# long sys_poll(struct pollfd __user * ufds, unsigned int nfds, long timeout)  
#  
probe syscall.poll = kernel.function("sys_poll").call  
{  
        name = "poll"  
        ufds_uaddr = $ufds  
        nfds = $nfds  
        timeout = (@defined($timeout_msecs) ? $timeout_msecs : $timeout)  // 在sys_poll中timeout正表示milliseconds, 负表示无限  
        argstr = sprintf("%p, %d, %d", $ufds, $nfds,  
                (@defined($timeout_msecs) ? $timeout_msecs : $timeout))  
}  
probe syscall.poll.return = kernel.function("sys_poll").return  
{  
        name = "poll"  
        retstr = return_str(1, $return)  
}  
# ppoll _______________________________________________________  
#  
# long sys_ppoll(struct pollfd __user *ufds, unsigned int nfds,  
#       struct timespec __user *tsp, const sigset_t __user *sigmask,  
#       size_t sigsetsize)  
#  
probe syscall.ppoll = kernel.function("sys_ppoll").call ?  
{  
        name = "ppoll"  
        argstr = sprintf("%p, %d, %s, %p, %d",  
                $ufds,  
                $nfds,  
                _struct_timespec_u($tsp, 1),  
                $sigmask,  
                $sigsetsize)  
}  
probe syscall.ppoll.return = kernel.function("sys_ppoll").return ?  
{  
        name = "ppoll"  
        retstr = return_str(1, $return)  
}  
# select _____________________________________________________  
# long sys_select(int n,  
#               fd_set __user *inp,  
#               fd_set __user *outp,  
#               fd_set __user *exp,  
#               struct timeval __user *tvp)  
#  
probe syscall.select = kernel.function("sys_select").call  
{  
        name = "select"  
        n = $n  
        readfds_uaddr = $inp  
        writefds_uaddr = $outp  
        exceptfds_uaddr = $exp  
        timeout_uaddr = $tvp  
        argstr = sprintf("%d, %p, %p, %p, %s", $n, $inp, $outp, $exp,  
                _struct_timeval_u($tvp, 1))  
}  
probe syscall.select.return = kernel.function("sys_select").return  
{  
        name = "select"  
        retstr = return_str(1, $return)  
}  