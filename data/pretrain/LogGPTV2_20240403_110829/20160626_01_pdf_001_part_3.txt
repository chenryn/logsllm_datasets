开放索引接口介绍
• operator strategy number
• 不固定策略号、视数据类型
• Index Method Support Routines
开放索引接口介绍
• GiST (balanced, tree结构索引)
– https://www.postgresql.org/docs/9.5/static/gist-intro.html
– 开发接口
– https://www.postgresql.org/docs/9.5/static/gist-extensibility.html
– consistent
• column op query 返回 true or false (recheck 表示是否为lossy)
– union
• 输入一批entry转换成一个entry, 基于结果entry创建索引
– compress
• 将被索引的entry压缩成适合在index page中存储的Datum
– decompress
• 解压
– penalty
• 计算并返回entry插入索引branch的cost
– picksplit
• 当索引页需要分裂时，决定哪些entry需要保留在原地page，哪些entry需要移到新的page。
– same
• 比较两个entry是否相等
– distance
• column op query 返回"距离"，需要排序的话必须实现distance接口函数
– fetch
• 获取索引entry对应的column value
• 例子
– range, point, box
开放索引接口介绍
• operator strategy number
• 不固定策略号、视数据类型
• Index Method Support Routines
开放索引接口介绍
• SP-GiST (non-balanced 数据结构 , quad-trees, k-d
trees, and radix trees (tries))
• repeatedly divide search space into partitions
that need not be of equal size
– https://www.postgresql.org/docs/9.5/static/spgist.ht
ml
– 开发接口
– https://www.postgresql.org/docs/9.5/static/spgist-
extensibility.html
• 例子
– range, point
开放索引接口介绍
• operator strategy number
• 不固定策略号、视数据类型
• Index Method Support Routines
开放索引接口介绍
• Operator strategy number
• btree
• hash
• 固定策略号
• brin
• 不固定策略号、视数据类型
开放索引接口介绍
• Index Method Support Routines
– btree
– hash
– brin
自定义 索引 例子
GIN
• Operator(s) function
• PG_FUNCTION_INFO_V1(hstore_contains);
• Datum
• hstore_contains(PG_FUNCTION_ARGS)
• {
• HStore *val = PG_GETARG_HS(0);
• HStore *tmpl = PG_GETARG_HS(1);
• bool res = true;
• HEntry *te = ARRPTR(tmpl);
• char *tstr = STRPTR(tmpl);
• HEntry *ve = ARRPTR(val);
• char *vstr = STRPTR(val);
• int tcount = HS_COUNT(tmpl);
• int lastidx = 0;
• int i;
• /*
• * we exploit the fact that keys in "tmpl" are in strictly increasing
• * order to narrow the hstoreFindKey search; each search can start one
• * entry past the previous "found" entry, or at the lower bound of the
• * search
• */
自定义 索引 例子
GIN
• for (i = 0; res && i = 0)
• {
• bool nullval = HSTORE_VALISNULL(te, i);
• int vallen = HSTORE_VALLEN(te, i);
• if (nullval != HSTORE_VALISNULL(ve, idx) ||
• (!nullval && (vallen != HSTORE_VALLEN(ve, idx) ||
• memcmp(HSTORE_VAL(te, tstr, i),
• HSTORE_VAL(ve, vstr, idx),
• vallen) != 0)))
• res = false;
• }
• else
• res = false;
• }
• PG_RETURN_BOOL(res);
• }
自定义 索引 例子
GIN
• CREATE FUNCTION hs_contains(hstore,hstore)
• RETURNS bool
• AS 'MODULE_PATHNAME','hstore_contains'
• LANGUAGE C STRICT IMMUTABLE;
• CREATE OPERATOR @> (
• LEFTARG = hstore,
• RIGHTARG = hstore,
• PROCEDURE = hs_contains,
• COMMUTATOR = ',
• OPERATOR 9 ?(hstore,text),
• OPERATOR 10 ?|(hstore,text[]),
• OPERATOR 11 ?&(hstore,text[]),
• FUNCTION 1 bttextcmp(text,text),
• FUNCTION 2 gin_extract_hstore(internal, internal),
• FUNCTION 3 gin_extract_hstore_query(internal, internal, int2, internal, internal),
• FUNCTION 4 gin_consistent_hstore(internal, int2, internal, int4, internal, internal),
• STORAGE text;
自定义 索引 例子
GiST
• 略
内核扩展接口总结
PostgreSQL
• PostgreSQL有哪些开放接口
– UDF（包括聚合、窗口以及普通的函数）
• https://www.postgresql.org/docs/9.5/static/xfunc-c.html
– GiST, SP-GiST, GIN, BRIN 自定义索引接口
• https://www.postgresql.org/docs/9.5/static/gist.html ... ...
– 扩展索引接口(bloom例子)
• https://www.postgresql.org/docs/9.6/static/bloom.html
• https://www.postgresql.org/docs/9.6/static/xindex.html
– 操作符
• https://www.postgresql.org/docs/9.5/static/sql-createoperator.html
– 数据类型
• https://www.postgresql.org/docs/9.5/static/sql-createtype.html
– FDW
• https://www.postgresql.org/docs/9.5/static/fdwhandler.html
– 函数语言 handler
• https://www.postgresql.org/docs/9.5/static/plhandler.html
– SPI
• https://www.postgresql.org/docs/9.5/static/spi.html
– 动态fork 进程，动态创建共享内存段
• https://www.postgresql.org/docs/9.5/static/bgworker.html
– table sampling method
• https://www.postgresql.org/docs/9.5/static/tablesample-method.html
– custom scan provider
• https://www.postgresql.org/docs/9.5/static/custom-scan.html
– 自定义REDO日志encode,decode接口
• https://www.postgresql.org/docs/9.6/static/generic-wal.html
插件打包、发布
PostgreSQL
• https://www.postgresql.org/docs/9.6/static/e
xtend-extensions.html
• https://www.postgresql.org/docs/9.6/static/e
xtend-pgxs.html
• http://pgxn.org/about/
插件打包、发布
PostgreSQL
• Makefile
插件打包、发布
PostgreSQL
• control file
– # hstore extension
– comment = 'data type for storing sets of (key,
value) pairs'
– default_version = '1.3'
– module_pathname = '$libdir/hstore'
– relocatable = true
， 如何与 深度整合
GPU FPGA PostGIS
• custom scan provider API
• https://www.postgresql.org/docs/9.5/static/c
ustom-scan.html
介绍
pg_strom
• https://github.com/pg-strom/devel
• https://wiki.postgresql.org/wiki/PGStrom
加速例子
pg_strom
• src/backend/optimizer/plan/planner.c
• PlannedStmt *
• planner(Query *parse, int cursorOptions, ParamListInfo boundParams)
• {
• PlannedStmt *result;
• if (planner_hook)
• result = (*planner_hook) (parse, cursorOptions, boundParams);
• else
• result = standard_planner(parse, cursorOptions, boundParams);
• return result;
• }
加速例子
pg_strom
• _PG_init
加速例子
pg_strom
加速例子
pg_strom
加速例子
pg_strom
加速例子
pg_strom
加速例子
pg_strom
• planner hook ，将plan的工作旁路到用户定制的分支处理。
• 用户定制的 planner分支 将生成基于GPU的plan tree (例如dma的数据访问，基于CUDA库的并行计算等)
• executor 执行这个plan tree
路径动态规划
• pgrouting
• http://pgrouting.org/
• http://workshop.pgrouting.org/
逻辑运算
bit
• bit运算
• /*
• * bit_and
• * perform a logical AND on two bit strings.
• */
• Datum
• bit_and(PG_FUNCTION_ARGS)
• {
• VarBit *arg1 = PG_GETARG_VARBIT_P(0);
• VarBit *arg2 = PG_GETARG_VARBIT_P(1);
• VarBit *result;
• int len,
• bitlen1,
• bitlen2,
• i;
• bits8 *p1,
• *p2,
• *r;
逻辑运算
bit
• bitlen1 = VARBITLEN(arg1);
• bitlen2 = VARBITLEN(arg2);
• if (bitlen1 != bitlen2)
• ereport(ERROR,
• (errcode(ERRCODE_STRING_DATA_LENGTH_MISMATCH),
• errmsg("cannot AND bit strings of different sizes")));
• len = VARSIZE(arg1);
• result = (VarBit *) palloc(len);
• SET_VARSIZE(result, len);
• VARBITLEN(result) = bitlen1;
• p1 = VARBITS(arg1);
• p2 = VARBITS(arg2);
• r = VARBITS(result);
• for (i = 0; i < VARBITBYTES(arg1); i++)
• *r++ = *p1++ & *p2++;
• /* Padding is not needed as & of 0 pad is 0 */
• PG_RETURN_VARBIT_P(result);
• }
点面判断
• PostGIS
– http://postgis.net/docs/manual-2.2/ST_Contains.html
– boolean ST_Contains(geometry geomA, geometry geomB);
– lwgeom_geos.c
参考资料
• 范例
– contrib , ...
– pgxn, github
• 书籍
– PostgreSQL数据库内核分析
– PostgreSQL数据库服务端编程
• 网站资料
– http://blog.163.com/digoal@126/blog/static/163
877040201172183022203/