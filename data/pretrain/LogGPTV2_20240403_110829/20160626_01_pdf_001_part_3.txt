# 开放索引接口介绍

## Operator Strategy Number
- **不固定策略号**：视数据类型而定。

## Index Method Support Routines
### GiST (平衡树结构索引)
- **文档链接**: [GiST 介绍](https://www.postgresql.org/docs/9.5/static/gist-intro.html) 和 [GiST 扩展性](https://www.postgresql.org/docs/9.5/static/gist-extensibility.html)
- **consistent**: `column op query` 返回 `true` 或 `false` (`recheck` 表示是否为lossy)。
- **union**: 将一批entry转换成一个entry，并基于结果entry创建索引。
- **compress**: 将被索引的entry压缩成适合在index page中存储的Datum。
- **decompress**: 解压。
- **penalty**: 计算并返回entry插入索引branch的成本。
- **picksplit**: 当索引页需要分裂时，决定哪些entry保留在原地page，哪些entry移到新的page。
- **same**: 比较两个entry是否相等。
- **distance**: `column op query` 返回“距离”，如果需要排序则必须实现distance接口函数。
- **fetch**: 获取索引entry对应的column value。
- **例子**: range, point, box。

### SP-GiST (非平衡数据结构, quad-trees, k-d trees, radix trees (tries))
- **文档链接**: [SP-GiST 介绍](https://www.postgresql.org/docs/9.5/static/spgist.html) 和 [SP-GiST 扩展性](https://www.postgresql.org/docs/9.5/static/spgist-extensibility.html)
- **特点**: 反复将搜索空间划分为不必等大小的分区。
- **例子**: range, point。

### 其他索引方法
- **btree**: 固定策略号。
- **hash**: 固定策略号。
- **brin**: 不固定策略号，视数据类型而定。

## 自定义索引示例
### GIN
- **操作符函数**:
  ```c
  PG_FUNCTION_INFO_V1(hstore_contains);
  Datum hstore_contains(PG_FUNCTION_ARGS) {
      HStore *val = PG_GETARG_HS(0);
      HStore *tmpl = PG_GETARG_HS(1);
      bool res = true;
      HEntry *te = ARRPTR(tmpl);
      char *tstr = STRPTR(tmpl);
      HEntry *ve = ARRPTR(val);
      char *vstr = STRPTR(val);
      int tcount = HS_COUNT(tmpl);
      int lastidx = 0;
      int i;

      for (i = 0; res && i < tcount; i++) {
          int idx = hstoreFindKey(te, tstr, tcount, te[i].key, lastidx, &res);
          if (idx >= 0) {
              bool nullval = HSTORE_VALISNULL(te, i);
              int vallen = HSTORE_VALLEN(te, i);
              if (nullval != HSTORE_VALISNULL(ve, idx) ||
                  (!nullval && (vallen != HSTORE_VALLEN(ve, idx) ||
                                memcmp(HSTORE_VAL(te, tstr, i),
                                       HSTORE_VAL(ve, vstr, idx),
                                       vallen) != 0))) {
                  res = false;
              }
              lastidx = idx + 1;
          } else {
              res = false;
          }
      }
      PG_RETURN_BOOL(res);
  }
  ```

- **创建函数和操作符**:
  ```sql
  CREATE FUNCTION hs_contains(hstore, hstore) RETURNS bool
  AS 'MODULE_PATHNAME', 'hstore_contains'
  LANGUAGE C STRICT IMMUTABLE;

  CREATE OPERATOR @> (
      LEFTARG = hstore,
      RIGHTARG = hstore,
      PROCEDURE = hs_contains,
      COMMUTATOR = '<@',
      RESTRICT = gtrangejoinsel,
      JOIN = gtrangejoin
  );
  ```

- **GIN 支持函数**:
  ```sql
  OPERATOR 9 ?(hstore, text),
  OPERATOR 10 ?|(hstore, text[]),
  OPERATOR 11 ?&(hstore, text[]),
  FUNCTION 1 bttextcmp(text, text),
  FUNCTION 2 gin_extract_hstore(internal, internal),
  FUNCTION 3 gin_extract_hstore_query(internal, internal, int2, internal, internal),
  FUNCTION 4 gin_consistent_hstore(internal, int2, internal, int4, internal, internal),
  STORAGE text;
  ```

### GiST
- 略

## 内核扩展接口总结
### PostgreSQL开放接口
- **用户自定义函数 (UDF)**: 包括聚合、窗口以及普通函数。[文档](https://www.postgresql.org/docs/9.5/static/xfunc-c.html)
- **自定义索引接口**: GiST, SP-GiST, GIN, BRIN。[文档](https://www.postgresql.org/docs/9.5/static/gist.html)
- **扩展索引接口**: bloom示例。[文档](https://www.postgresql.org/docs/9.6/static/bloom.html), [文档](https://www.postgresql.org/docs/9.6/static/xindex.html)
- **操作符**: [文档](https://www.postgresql.org/docs/9.5/static/sql-createoperator.html)
- **数据类型**: [文档](https://www.postgresql.org/docs/9.5/static/sql-createtype.html)
- **外部数据包装器 (FDW)**: [文档](https://www.postgresql.org/docs/9.5/static/fdwhandler.html)
- **函数语言处理器**: [文档](https://www.postgresql.org/docs/9.5/static/plhandler.html)
- **服务器编程接口 (SPI)**: [文档](https://www.postgresql.org/docs/9.5/static/spi.html)
- **动态fork进程和共享内存段**: [文档](https://www.postgresql.org/docs/9.5/static/bgworker.html)
- **表采样方法**: [文档](https://www.postgresql.org/docs/9.5/static/tablesample-method.html)
- **自定义扫描提供者**: [文档](https://www.postgresql.org/docs/9.5/static/custom-scan.html)
- **自定义REDO日志编码解码接口**: [文档](https://www.postgresql.org/docs/9.6/static/generic-wal.html)

## 插件打包与发布
- **文档链接**: [扩展扩展](https://www.postgresql.org/docs/9.6/static/extend-extensions.html), [PGXS](https://www.postgresql.org/docs/9.6/static/extend-pgxs.html), [PGXN](http://pgxn.org/about/)
- **Makefile**
- **控制文件**:
  ```plaintext
  # hstore extension
  comment = 'data type for storing sets of (key, value) pairs'
  default_version = '1.3'
  module_pathname = '$libdir/hstore'
  relocatable = true
  ```

## 深度整合
### GPU/FPGA与PostGIS
- **自定义扫描提供者API**: [文档](https://www.postgresql.org/docs/9.5/static/custom-scan.html)

### pg_strom
- **项目链接**: [GitHub](https://github.com/pg-strom/devel), [Wiki](https://wiki.postgresql.org/wiki/PGStrom)
- **加速示例**:
  ```c
  PlannedStmt *planner(Query *parse, int cursorOptions, ParamListInfo boundParams) {
      PlannedStmt *result;
      if (planner_hook) {
          result = (*planner_hook)(parse, cursorOptions, boundParams);
      } else {
          result = standard_planner(parse, cursorOptions, boundParams);
      }
      return result;
  }

  _PG_init
  ```
- **planner hook**: 将计划工作旁路到用户定制的分支处理。用户定制的planner分支将生成基于GPU的plan tree（例如DMA的数据访问，基于CUDA库的并行计算等）。executor执行这个plan tree。

## 逻辑运算
### bit运算
- **bit_and**:
  ```c
  Datum bit_and(PG_FUNCTION_ARGS) {
      VarBit *arg1 = PG_GETARG_VARBIT_P(0);
      VarBit *arg2 = PG_GETARG_VARBIT_P(1);
      VarBit *result;
      int len, bitlen1, bitlen2, i;
      bits8 *p1, *p2, *r;

      bitlen1 = VARBITLEN(arg1);
      bitlen2 = VARBITLEN(arg2);
      if (bitlen1 != bitlen2) {
          ereport(ERROR,
                  (errcode(ERRCODE_STRING_DATA_LENGTH_MISMATCH),
                   errmsg("cannot AND bit strings of different sizes")));
      }
      len = VARSIZE(arg1);
      result = (VarBit *) palloc(len);
      SET_VARSIZE(result, len);
      VARBITLEN(result) = bitlen1;
      p1 = VARBITS(arg1);
      p2 = VARBITS(arg2);
      r = VARBITS(result);
      for (i = 0; i < VARBITBYTES(arg1); i++)
          *r++ = *p1++ & *p2++;
      PG_RETURN_VARBIT_P(result);
  }
  ```

## 点面判断
### PostGIS
- **文档链接**: [ST_Contains](http://postgis.net/docs/manual-2.2/ST_Contains.html)
- **函数**: `boolean ST_Contains(geometry geomA, geometry geomB);`
- **源代码**: lwgeom_geos.c

## 参考资料
- **范例**: contrib, ...
- **书籍**: 《PostgreSQL数据库内核分析》, 《PostgreSQL数据库服务端编程》
- **网站资料**: [博客](http://blog.163.com/digoal@126/blog/static/163877040201172183022203/)