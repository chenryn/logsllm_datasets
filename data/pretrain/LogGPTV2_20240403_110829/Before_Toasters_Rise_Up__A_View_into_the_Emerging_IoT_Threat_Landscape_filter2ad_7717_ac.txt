remote management web interfaces requires authentication, which assumes that
A View into the Emerging IoT Threat Landscape
565
Table 3. Snippet of URLs requested by “browsing” attackers.
Device
URL
Action
DLink 850L
(home router)
GET /diagnostic.php
GET /bsc wlan.php
Display previous diagnostic reports
Wireless network settings
GET /adv wps.php
GET /tools.php
GET /advanced.php
GET /setup.php
GET /status.php
GET /st wlan.php
Access WiFi protection setup
Access administrator settings
Access advanced setup
Access internet connection setup
Get device information
Get connected wireless client list
Netgear
WNAP320
(home router)
Brickcom CB-
100AP-3456
(IP camera)
GET /st routing.php
Get device routing table
POST /routing stat.php
Issue routing-related command
GET /config.php?json=true
Dump router conﬁguration
GET /downloadFile.php?file=config
Download conﬁg. ﬁle containing credentials
GET /snapshot.jpg
POST /cgi-bin/camera.cgi
Get snapshot from IP camera video feed
Set camera settings
GET /cgi-bin/motiondetection.cgi?
action=getMD& index=1
Get motion detector settings
POST /cgi-bin/audiometer.cgi
Set microphone sensitivity
No. of
requests
99
14
14
4
3
3
2
1
1
1
127
1
85
9
2
1
attackers have already gotten access to valid credentials and presumably already
know what device they are interacting with. Moreover, we typically observe that
attackers accessing more than one page of a given web interface never request
inexistent pages, showing that they are either browsing through the web interface
or know exactly what pages are provided by the given device.
3.2 IoT Device Infection
In the previous section, we described some of the IoT device reconnaissance
and intrusion mechanisms we observed are used by cybercriminals to access
and take control over IoT devices. This is usually the ﬁrst step to a multi-
stage attack eventually leading to compromised devices being used to perform
other nefarious activities. In this section, we will discuss the second stage of
an IoT device takeover where attackers prepare the device for its monetisation,
usually by running some malicious code that (i) further tries to spreads itself by
exploiting other devices and (ii) joins the C&C channel of an existing botnet.
In order to study the infection mechanisms against our IoT honeypots and
given that, from our observations, telnet is by far the most prominent intrusion
mechanism used by attackers, we extracted all commands issued by attackers
from each telnet connection to our two telnet-enabled high-interaction honey-
pots, namely the Netgear router and the Brickcom IP camera, stripping away
command arguments and credentials entered at the beginning of the sessions.
Filtering out empty connections as well as connections where attackers didn’t
manage to successfully log into the box left us with a total of 169,804 out of
566
P.-A. Vervier and Y. Shen
Table 4. Telnet session clustering results: top 10 clusters by size.
Cluster ID Size
Malware families
A
B
C
D
E
F
G
H
I
J
No. of connections No. of sessions
45,599 (7.46%)
5624
10,259 (1.68%)
7,146 (1.17%)
6,820 (1.12%)
4,205 (0.69%)
3,121 (0.51%)
2,620 (0.43%)
2,212 (0.36%)
1,444 (0.24%)
1,402 (0.23%)
5
8
6
3
7
21
5
4
5
Linux.Downloader, Linux.Mirai,
Linux.Aidra, Linux.Kaiten,
Linux.Gafgyt
LinuxMirai, Linux.Masuta
Linux.Mirai
Linux.Mirai, Linux.Gafgyt
Linux.Hajime
Linux.Mirai
Linux.Mirai, Linux.Gafgyt
Linux.Mirai, Linux.Aidra
Linux.Mirai, Linux.Aidra,
Linux.Gafgyt
Linux.Mirai
611,429 (27.77%) connections. Next, we removed short connections where the
client issued a sequence of less than two commands, which is unlikely to imple-
ment a real compromise. This step left us with 93,099 (15.23% of the total) con-
nections. Finally, we transformed each sequence of commands into an unordered
set of commands, leading to a total of 8,167 unique telnet sessions. We then
clustered these 8K sessions with the DBSCAN clustering algorithm using the
Jaccard index to compute the similarity between each pair of telnet sessions. We
obtained a total of 70 clusters. The clustering results are summarised in Table 4.
Note that only telnet commands were used in the clustering and the malware
families were added afterwards to illustrate the clusters.
First of all we can see that the ﬁrst cluster (A) is by far the biggest one
with more than 45K telnet connections. It contains a lot of variety, with more
than 5K unique sessions (i.e., unique sets of commands). Cluster A can be linked
to malware samples belonging to multiple families, namely Mirai, Aidra, Kaiten
and Gafgyt, based on AV detections extracted from running the binaries dropped
during these telnet sessions to VirusTotal. This observation, plus the low com-
pactness of the cluster can be explained by the fact that the commands founds
in the cluster are quite generic and common to a lot of malware families.
Cluster B contains about 10K telnet connections attributable to Mirai and
Masuta. Masuta is a very recent variant of the Mirai botnet that emerged in late
2017. When digging further, we notice that the telnet command sequences lead-
ing to a Mirai sample and to a Masuta sample are almost identical, highlighting
their common roots. In this case, the diﬀerence between the two threats resides
in the dropped binaries.
A View into the Emerging IoT Threat Landscape
567
Interestingly, cluster E appears to be related to the so-called “vigilante”
(a.k.a. white hat) botnet Hajime [16]. Hajime is known to be a sophisti-
cated, P2P-operated botnet that infects vulnerable IoT devices by brute-forcing
their credentials. So far, it has not been linked to any speciﬁc type of attack,
such as DDoS attacks. Interestingly, Edwards et al. described the Hajime
infection process that would drop the malicious binary by issuing a series of
echo -ne"" >>  commands over telnet in order to rebuild
the binary and then execute it. This contrasts with most of IoT botnets, which
drop binaries by downloading them from a remote host. However, from cluster
E, it appears that Hajime has added the “download” functionality to its self-
replication module. It now appears to ﬁrst check whether it can download the
binary and, upon failure, “echo load’s” a custom dropper that downloads the
main bot via HTTP.
We further looked at the number of commands issued by attackers visiting
our low- and high-interaction honeypots. It is interesting to note that attackers,
when getting into low-interaction honeypots are inclined to execute more unique
commands during telnet sessions. We speculate that this phenomenon is due
to the fact that low-interaction honeypots provide some default telnet session
policies that return an empty result to the attackers. This default behaviour
triggers the attackers to execute several other branches of their scripts to identify
the architecture of the honeypot, alternative ways (e.g., tftp) to deliver binaries
when wget failed, etc.
Looking at the telnet commands issued during the infection phase thus
appears to provide a way to ﬁngerprint attackers and attribute them to speciﬁc
threats (or botnets). We believe that such a ﬁne-grained proﬁling of attackers can
greatly assist with the detection and investigation of IoT threats, for instance
when writing IoCs.
Dropped Files Analysis. Over the six months of operations our honeypots
have collected 3,385 ﬁles that were dropped by attackers. For the sake of compar-
ison, previous work on the study of IoT malware analysed 43 binaries in IoTPot
[30] and 434 in the Mirai botnet study [7]. Attackers use various techniques to
drop ﬁles to compromise devices. (i) The most common technique consists in
downloading the binary, usually via HTTP or FTP from a remote host. (ii) The
other technique we have witnessed is the “echo load” where attackers rebuild
the binary in the telnet session by “echoing” hexadecimal strings into a ﬁle. So
far, we have witnessed all malware families use method (i) and only a couple of
them, namely Hajime and Gafgyt use (ii) in combination to (i).
We further obtained malware families of the more than 3K binaries we col-
lected by querying the VirusTotal binary reports and normalising AV detection
labels, as presented in Table 5. Note that 2,887 out of 3,385 (85.2%) ﬁles were
not known to VirusTotal before we submitted them. From the perspective of our
honeypots, Mirai represents the biggest set (47.5%) of binaries we see. Hajime
and Gafgyt follows, with 24.4% and 13.7% respectively. We also observed a mix
of old and new botnets, e.g., Masuta emerged in late 2017, Mirai, Hajime and
568
P.-A. Vervier and Y. Shen
Table 5. Normalised AV detections of dropped binaries as given by VirusTotal.
No. of ﬁles ↓
Rank Malware family No. of ﬁles ↓ Rank Malware family
Linux.Generic
1
Linux.Mirai
8
2
3
4
5
6
7
Linux.Hajime
Linux.Gafgyt
Linux.Aidra
Linux.Kaiten
Linux.Download
Linux.Masuta
1, 609
792
464
297
154
30
10
7
9
10
11
12
13
Linux.Remaiten
Linux.Amnesia
Linux.BitcoinMiner
Others
Undetected
Total
9
5
1
4
3
3, 385
Remaiten appeared in 2016 and the ﬁrst evidence of Gafgyt dates back to 2014.
Interestingly, we can see that there appears to be one instance of a cryptocur-
rency mining malware that infected one of our honeypots.
Finally, we looked at the observation window of individual malware sample
hashes, which is plotted in Fig. 3(a). The short-lived trend here is very strong,
with almost 90% of unique malware hashes seen during only one day. Addition-
ally, four malware families - Mirai, Gafgyt, Kaiten and Hajime - have samples
that are being observed for weeks and even months (with a maximum of four
months and 13 days for Mirai). In case of Hajime, we witnessed only two bina-
ries that have an observation window of several weeks. According to Edwards et
al.’s analysis of the botnet [16], the two binaries appear to be Hajime’s stage2s
module, which corresponds to the ﬁnal piece of the bot being run to fully com-
promise the device. Unlike the rest of Hajime’s binaries we collected, these two
binaries are also very likely packed, based on their Shannon entropy above 7.98
(out of 8). We speculate that malware authors decided to put more care into
designing and obfuscating the stage2s binary, which is then observed for longer
periods of time than the other ﬁrst-stage binaries.
Malicious Files Download. A total 2,837 binaries were downloaded from
832 diﬀerent IP addresses hosted in 146 diﬀerent ASes. Figure 3(b) plots the
observation window as seen from our honeypots. We can see that at least 90%
of malware download servers appear to be short-lived, with a witnessed lifetime
of less than ﬁve days. This is also corroborated by the fact that 60% of malware
distributing IP addresses were never blacklisted throughout the six month data
collection period. Such IP addresses thus appear to be used for a very short
period of time to distribute IoT malware and then disposed of to move on to
other IP addresses, so it is hard to rely on techniques like IP blacklisting to
block them. It is also noteworthy that 40% of IP addresses are located in only
ﬁve diﬀerent ASes associated with large national ISPs providing hosting and
cloud services. Note that 99.7% of URLs used by attackers to download ﬁles
use raw IP addresses rather than domain names. Another interesting thing we
observe is that attackers seem to use very limited number of IP addresses to host
A View into the Emerging IoT Threat Landscape
569
Fig. 3. CDF of the observation window of (a) malware samples and (b) malware dis-
tribution servers.
Table 6. Top 10 ports in volume of post-infection traﬃc.
Netgear router
Brickcom IP camera
Rank Port
1
2
3
4
5
6
7
8
9
10
80/udp
3074/udp
53/udp
443/udp
22/udp
443/tcp
27015/udp
16837/udp
3074/tcp
8080/udp
80/udp
3074/udp
53/udp
22/udp