title:Leakage-Resilient Layout Randomization for Mobile Devices
author:Kjell Braden and
Lucas Davi and
Christopher Liebchen and
Ahmad-Reza Sadeghi and
Stephen Crane and
Michael Franz and
Per Larsen
Leakage-Resilient Layout Randomization for Mobile Devices
Kjell Braden†§, Stephen Crane‡, Lucas Davi†, Michael Franz∗ Per Larsen∗‡,
Christopher Liebchen†, Ahmad-Reza Sadeghi†,
†CASED/Technische Universität Darmstadt, Germany.
§EURECOM, France. PI:EMAIL
‡Immunant, Inc. PI:EMAIL
{lucas.davi,christopher.liebchen,ahmad.sadeghi}@trust.cased.de
∗University of California, Irvine. {perl,franz}@uci.edu
Abstract—Attack techniques based on code reuse continue to
enable real-world exploits bypassing all current mitigations. Code
randomization defenses greatly improve resilience against code
reuse. Unfortunately, sophisticated modern attacks such as JIT-
ROP can circumvent randomization by discovering the actual
code layout on the target and relocating the attack payload on
the ﬂy. Hence, effective code randomization additionally requires
that the code layout cannot be leaked to adversaries.
Previous approaches to leakage-resilient diversity have either
relied on hardware features that are not available in all proces-
sors, particularly resource-limited processors commonly found
in mobile devices, or they have had high memory overheads.
We introduce a code randomization technique that avoids these
limitations and scales down to mobile and embedded devices:
Leakage-Resilient Layout Randomization (LR2).
Whereas previous solutions have relied on virtualization, x86
segmentation, or virtual memory support, LR2 merely requires
the underlying processor to enforce a W⊕X policy—a feature that
is virtually ubiquitous in modern processors, including mobile
and embedded variants. Our evaluation shows that LR2 provides
the same security as existing virtualization-based solutions while
avoiding design decisions that would prevent deployment on less
capable yet equally vulnerable systems. Although we enforce
execute-only permissions in software, LR2 is as efﬁcient as the
best-in-class virtualization-based solution.
I. MOTIVATION
The recent “Stagefright” vulnerability exposed an estimated
950 million Android systems to remote exploitation [21].
Similarly, the “One Class to Rule them All” [40] zero-day vul-
nerability affected 55% of all Android devices. These are just
the most recent incidents in a long series of vulnerabilities that
enable attackers to mount code-reuse attacks [37, 43] against
mobile devices. Moreover, because these devices run scripting
capable web browsers, they are also exposed to sophisticated
code-reuse attacks that can bypass ASLR and even ﬁne-
grained code randomization by exploiting information-leakage
vulnerabilities [11, 20, 48, 50]. Just-in-time attacks (JIT-
ROP) [50] are particularly challenging because they misuse
run-time scripting to analyze the target memory layout after
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23364
randomization and relocate a return-oriented programming
(ROP) payload accordingly.
There are several alternatives to code randomization aimed
to defend against code-reuse attacks, including control-ﬂow
integrity (CFI) [1] and code-pointer integrity (CPI) [28]. How-
ever, these defenses come with their own set of challenges
and tend to have high worst-case performance overheads. We
focus on code randomization techniques since they are known
to be efﬁcient [18, 25] and scalable to complex, real-world
applications such as web browsers, language runtimes, and
operating system kernels without the need to perform elaborate
static program analysis during compilation.
Recent code randomization defenses offer varying degrees
of resilience to JIT-ROP attacks [4, 6, 14, 15, 20, 22, 31, 35].
However, all of these approaches target x86 systems and
are, for one reason or another, unﬁt for use on mobile and
embedded devices, a segment which is currently dominated by
ARM processors. This motivates our search for randomization
frameworks that offer the same security properties as the state-
of-the-art solutions for x86 systems while removing the lim-
itations, such as dependence on expensive hardware features,
that make them unsuitable for mobile and embedded devices.
The capabilities of mobile and embedded processors vary
widely. For instance, many micro-processors do not have a
full memory management unit (MMU) with virtual memory
support. Instead they use a memory protection unit (MPU)
which saves space and facilitates real-time operation1. Pro-
cessors without an MMU can therefore not support defenses
that require virtual memory support [4, 14, 15, 22]. High-end
ARM processors contain MMUs and therefore offer full virtual
memory support. However, current ARM processors do not
support2 execute-only memory (XoM) [2] which is a funda-
mental requirement for randomization-based defenses offering
comprehensive resilience to memory disclosure [14, 15].
Therefore, our goal is to design a leakage-resilient layout
randomization approach, dubbed LR2,
that enforces XoM
purely in software making our technique applicable to MMU-
less hardware as well. Inspired by software-fault
isolation
techniques (SFI) [45, 47, 53], we enforce XoM by masking
load addresses to prevent the program from reading from any
code addresses. However, software-enforced XoM is funda-
mentally different from SFI: First, XoM protects trusted code
1MPUs can still enforce W⊕X policies for a given address range.
2Firmware executed from non-volatile storage can be marked as execute-
only. Code executing out of RAM cannot be marked execute-only on current
processors.
that is executing as intended whereas SFI constrains untrusted
code that may use return-oriented programming techniques
to execute instruction sequences in an unforeseen manner to
break isolation of the security sandbox. We take advantage of
these completely different threat models to enforce XoM in
software using far fewer load-masking instructions than any
SFI implementation would require; Section IV-B provides a
detailed comparison. A second key difference between SFI
approaches and LR2 is that we hide code pointers because they
can otherwise lead to indirect leakage of the randomized code
layout. Code pointers reveal where functions begin and return
addresses reveal the location of call-preceded gadgets [19, 24].
We protect pointers to functions and methods (forward point-
ers) by replacing them with pointers to trampolines (direct
jumps) stored in XoM [14]. We protect return addresses
(backward pointers) using an optimized pointer encryption
scheme that hides per-function encryption keys on XoM pages.
Thanks to software-enforced XoM, LR2 only requires that
the underlying hardware provides code integrity by enforcing
a writable XOR executable (W⊕X) policy. This requirement is
met by all recent ARM processors whether they have a basic
MPU or a full MMU. Support for W⊕X policies is similarly
commonplace in recent MIPS processors.
In summary, our paper contributes:
•
LR2, the ﬁrst leakage-resilient layout randomization
defense that offers the full beneﬁts of execute-only
memory (XoM) without any of the limitations making
previous solutions bypassable or unsuitable for mobile
devices. LR2 prevents direct disclosure by ensuring
that adversaries cannot use load instructions to access
code pages and prevents indirect disclosure by hiding
return addresses and other pointers to code.
An efﬁcient return address hiding technique that lever-
ages a combination of XoM, code randomization,
XOR encryption, and the fact that ARM and MIPS
processors store return addresses in a link register
rather than directly to the stack.
A fully-ﬂedged prototype implementation of our tech-
niques capable of protecting Linux applications run-
ning atop ARM processors.
A detailed and careful evaluation showing that LR2
defeats a real-world JIT-ROP attack against
the
Chromium web browser. Our SPEC CPU2006 mea-
surements shows an average overhead of 6.6% which
matches the the 6.4% overhead for a comparable
virtualization-based x86 solution [14].
•
•
•
II. BACKGROUND
After W⊕X policies became commonplace, code reuse
replaced code injection as the key exploitation technique. At
ﬁrst, attackers reused whole functions in dynamically linked li-
braries [37] but later switched to return-oriented programming
(ROP) [43] that reuses short instruction sequences ending in
returns (gadgets). Most recently, Schuster et al. [46] introduced
counterfeit object-oriented programming (COOP), a technique
that reuses C++ virtual methods to bypass many control-ﬂow
integrity (CFI) [1] and code randomization defenses [29].
2
Figure 1: Memory regions and pointers between them. Gen-
eralized JIT-ROP harvests pointers from the heap, stack, or
other data pages to code pages (step 1). The original JIT-
ROP attack [50] recursively reads and disassembles code pages
(steps 2-3). Indirect JIT-ROP attacks [11, 20] omits these steps.
ASLR, address space layout permutation (ASLP) [27], and
other types of code randomization greatly increase resilience to
code reuse by hiding the address space layout from adversaries.
However, the results of randomization can be disclosed using
information-leakage vulnerabilities [7, 20, 48, 49, 50, 52].
The just-in-time code-reuse (JIT-ROP) techniques [20, 50]
are particularly powerful as they use malicious JavaScript to
overﬂow a buffer, access arbitrary memory, and analyze the
randomized layout of the victim browser process. Figure 1
illustrates ways that adversaries disclose and analyze memory
contents by constructing a read primitive out of a corrupted
array object. In step one, pointers to code are harvested from
the heap, stacks, virtual method tables (vtables), and any
other data that can be located by the adversary. Heaps, for
instance, contain function pointers and C++ objects that point
to vtables. These in turn point to C++ virtual methods. Stacks
predominantly contain pointers to call-preceded locations in-
side functions. In step two, the adversary uses these pointers to
locate and read code pages directly and, in step three, follows
references to other code pages recursively until all necessary
gadgets have been located. Early defenses against JIT-ROP
made references between code pages opaque [3] or emulated
execute-only memory [4, 22]. However, the indirect JIT-ROP
attack [20] shows that the initial pointer harvesting step is
sufﬁcient to launch JIT-ROP attacks against code randomized
at the level of functions [27] or code pages [3]. Building on
these lessons, the Readactor [14] approach prevents all three
memory leakage steps in Figure 1 by combining XoM with a
pointer indirection mechanism known as code-pointer hiding
(CPH). With CPH, all code pointers in readable memory are
replaced with trampoline pointers that point into an array
of direct jumps (trampolines) to functions and return sites.
Trampolines cannot be used to indirectly disclose the code
layout because trampolines are randomized and stored in XoM.
While the Readactor approach offers leakage resilience, it
targets high-end x86 systems that can support XoM natively
which precludes deployment on mobile devices. Moreover,
HeapStacksVtables PLTadversaryCodePageCodePage1. harvests code pointers2. reads code3. follows code pointersDataCodeCodepointer to codeinformation leaktheir code-pointer hiding component requires additional com-
putational and storage resources. Our LR2 solution, described
in Section IV, provides the same security but signiﬁcantly
reduces the associated resource and hardware requirements.
III. ADVERSARY MODEL
We use the following adversary model:
•
The adversary cannot compromise the protected pro-
gram at compile or load-time. Therefore the adversary
has no a priori knowledge of the code layout.
The underlying hardware enforces a W⊕X policy
which prevents code injection. Note that even low-
end devices that have an MPU (rather than an MMU)
are able to meet this requirement.
At run time, the attacker can read and write data mem-
ory such as the stack, heap and global variables. This
models the presence of memory corruption errors that
allow control-ﬂow hijacking and information leakage.
Attacks against the underlying hardware or operating
system fall outside the scope of this paper. This
includes any attack that uses timing, cache, virtual
machine, or fault side channels to disclose the code
layout.
•
•
•
•
•
•
Our adversary model
leakage-resilient layout randomization [4, 6, 14, 15, 20, 22].
is consistent with prior research on
IV. LR2
Like similar defenses, LR2 consists of a series of code
transformations. We prototype these transformations as com-
piler passes operating on source code. Compile-time transfor-
mation is not fundamental to our solution. The same approach
could be applied by rewriting the program on disk or as it is
being loaded into memory.
We perform the following transformations:
•
Load masking to enforce XoM in software (Sec-
tion IV-A). XoM prevents direct disclosure of the
code layout and forms the basis for the following
transformations. We describe conventional and novel
optimizations for efﬁcient
instrumentation in Sec-
tion IV-B.
Forward-pointer hiding (Section IV-C). We replace
forward pointers to functions and virtual methods with
pointers into an array of trampolines, i.e., direct jumps
to the original pointer address, stored in XoM to
prevent indirect disclosure similar to Crane et al. [14].
Return-address hiding (Section IV-D). While we
could have hidden return addresses in the same way as
we hide forward code pointers, this approach is sub-
optimal. First, the return address trampolines (a call
and a jump) take up more space than trampolines for
forward code pointers (a single jump). Second, this
naive approach would require a trampoline between
each caller and callee which further increases the
memory overhead.
Fine-grained code randomization (Section IV-E).
The preceding techniques prevent disclosure of the
Figure 2: Left: In legacy applications, all pages are observable
by attackers. The stack, heap and global areas contain point-
ers that disclose the location of code pages. Right: In LR2
applications, attackers are prevented from observing the upper
half of the address space which contains all code. Moreover,
attacker observable memory only contains trampoline pointers
(dotted arrows) that do not disclose code locations. Finally,
return addresses on the stack are encrypted (not shown).
code layout, so we must evaluate our system in
conjunction with ﬁne-grained diversity techniques.
We describe each of these components in detail in the
following subsections, along with our prototype LLVM-based
toolchain, including dynamic loading and full protection of
system libraries.
A. Software-Enforced XoM
On ARM and other RISC instruction sets, all reads from
memory use a load instruction (ldr on ARM). To enforce
XoM purely in software (to avoid reliance on MMU features),
we prevent all memory loads from reading program code. We
enforce this property by 1) splitting the program code and data
memory into separate memory regions and 2) by ensuring that
no load instruction can ever access the code region. We mask
every attacker-controlled address that may be used by a load
instruction to prevent it from addressing a code page.
We split the virtual memory address space into two halves
to simplify load address masking; data resides in the lower
half of the address space and code in the upper half (see the
right side of Figure 2). Note that we include a guard region
which consists of 2 memory pages marked as non-accessible.
The guard region allows us to optimize loads that add a small
constant offset to a base address. With this split, our run-time
instrumentation simply checks the most signiﬁcant bit (MSB)
of the address to determine whether it points to data or code.
All valid data addresses (and thus all safe memory loads) must
have a zero MSB.
3
unobservable0xBFFFFFFF0x7FFFFFFF0x00000000HeapStacksGlobalsTrampolinesCodeAdversary0x00000000HeapStacksDataCode0xBFFFFFFFLegacy AppLR  App2observableobservableGuard RegionSince we enforce a memory-access policy rather than
program integrity in the face of memory corruption, we can
optimize our checks to fail safely if the program attempts to
read a code address. The ARM instruction set has two options
we can use to enforce efﬁcient address checks: the bit clear
instruction (bic) or a test instruction (tst) followed by a
predicated load. Either clearing or checking the MSB of the
address before a load ensures that the load will never read from
the code section. The program may still behave incorrectly if
the attacker overwrites an address, but the attacker cannot read
any execute-only memory.
The following code uses bic masking instrumentation
which clears the MSB of the address before accessing memory.
This instrumentation is applicable to all load instructions.
b i c
l d r
r0 , #0 x80000000
[ r 0 ]
r0 ,
r1 ,