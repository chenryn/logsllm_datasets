  (  
    select   
      row_number() over (partition by id) as rn,  
      id,   
      first_value(c1) over (partition by id order by set_c1 desc, pk desc) c1,   
      first_value(set_c1) over (partition by id order by set_c1 desc, pk desc) set_c1,   
      first_value(info) over (partition by id order by set_info desc, pk desc) info,   
      first_value(set_info) over (partition by id order by set_info desc, pk desc) set_info,   
      first_value(crt_time) over (partition by id order by set_crt_time desc, pk desc) crt_time,   
      first_value(set_crt_time) over (partition by id order by set_crt_time desc, pk desc) set_crt_time,   
      first_value(mod_time) over (partition by id order by set_mod_time desc, pk desc) mod_time,   
      first_value(set_mod_time) over (partition by id order by set_mod_time desc, pk desc) set_mod_time  
      from tmp1  
  ) t  
  where t.rn=1  
) t  
where prod.id=t.id;  
```
删除更加简单，只需要将ID记录下来，delete from tbl where id in (...)即可，不再列举。  
## 验证以上合并方法的一致性  
使用两张目标表，一张为合并更新（合并更新的数据来源于实时更新的触发器日志），一张为实时更新。  
```  
drop table IF EXISTS prod;  
drop table IF EXISTS prod_ck;  
drop table IF EXISTS tmp1;  
create table prod(id int primary key, c1 int, info text, crt_time timestamp, mod_time timestamp);    
insert into prod select generate_series(1,1000000), 1, 'test', now(), null;  
create table prod_ck(id int primary key, c1 int, info text, crt_time timestamp, mod_time timestamp);    
insert into prod_ck select * from prod;  
create table tmp1  
(  
  pk serial8 primary key,   -- 标记插入顺序  
  id int, c1 int, info text, crt_time timestamp, mod_time timestamp, -- 更新后的值  
  set_id boolean, set_c1 boolean, set_info boolean, set_crt_time boolean, set_mod_time boolean -- 被更新的字段  
);    
create or replace function f_tg() returns trigger as $$  
declare  
begin  
  insert into tmp1 (id,c1,info,crt_time,mod_time,set_id,set_c1,set_info,set_crt_time,set_mod_time) values  
    (NEW.id, NEW.c1, NEW.info, NEW.crt_time, NEW.mod_time, true, true, true, true, true);  
  return null;  
end;  
$$ language plpgsql strict;  
create trigger tg after update on prod_ck for each row execute procedure f_tg();  
```  
使用pgbench，不断更新prod_ck  
```  
vi test.sql  
\set id random(1,10000)  
\set c1 random(1,1000000)  
update prod_ck set c1=:c1, crt_time=clock_timestamp(), mod_time=null where id=:id;  
update prod_ck set c1=:c1, crt_time=null, mod_time=clock_timestamp() where id=:id+1;  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 30  
progress: 3.0 s, 26379.3 tps, lat 1.211 ms stddev 0.660  
progress: 4.0 s, 26339.9 tps, lat 1.213 ms stddev 0.700  
```  
将tmp1的更新合并到prod  
```  
update prod set   
  c1=(case when t.set_c1 then t.c1 else prod.c1 end) ,  -- 将字段set位为true的值更新为新的值，false的不变。  
  info=(case when t.set_info then t.info else prod.info end) ,  
  crt_time=(case when t.set_crt_time then t.crt_time else prod.crt_time end) ,  
  mod_time=(case when t.set_mod_time then t.mod_time else prod.mod_time end)   
from   
(  
  select id, c1, set_c1, info, set_info, crt_time, set_crt_time, mod_time, set_mod_time   
  from  
  (  
    select   
      row_number() over (partition by id) as rn,  
      id,   
      first_value(c1) over (partition by id order by set_c1 desc, pk desc) c1,   
      first_value(set_c1) over (partition by id order by set_c1 desc, pk desc) set_c1,   
      first_value(info) over (partition by id order by set_info desc, pk desc) info,   
      first_value(set_info) over (partition by id order by set_info desc, pk desc) set_info,   
      first_value(crt_time) over (partition by id order by set_crt_time desc, pk desc) crt_time,   
      first_value(set_crt_time) over (partition by id order by set_crt_time desc, pk desc) set_crt_time,   
      first_value(mod_time) over (partition by id order by set_mod_time desc, pk desc) mod_time,   
      first_value(set_mod_time) over (partition by id order by set_mod_time desc, pk desc) set_mod_time  
      from tmp1  
  ) t  
  where t.rn=1  
) t  
where prod.id=t.id;  
UPDATE 10001  
```  
验证合并更新后prod和prod_ck是否一致  
```  
postgres=# select sum(hashtext(t.*::text)) from prod t;  
      sum         
----------------  
 -2538529730583  
(1 row)  
postgres=# select sum(hashtext(t.*::text)) from prod_ck t;  
      sum         
----------------  
 -2538529730583  
(1 row)  
```  
## 小结
数据合并的目标是将多条DML语句合并成一条，  
包括将单条记录的多次更新、插入、删除合并为一次更新、插入或删除操作，  
也包括将多条记录的多次DML合并成一条DML语句。  
在数据逻辑复制、TP到AP业务系统的同步、物化视图 等场景有着广泛的应用。  
特别是OLAP系统，由于并不是针对TP场景涉及，使用合并操作，可以大幅提升AP系统的操作效率。(Greenplum更新和删除都是表级锁, 效率也一般)     
在greenplum单条记录，基于PK的更新速度测试  
```
pgbench -M simple -n -r -f ./test.sql -P 1 -c 4 -j 4 -T 100 -h 127.0.0.1 -p 29999 -U digoal
progress: 1.0 s, 203.0 tps, lat 19.449 ms stddev 29.442
progress: 2.0 s, 290.0 tps, lat 13.739 ms stddev 0.337
progress: 3.0 s, 291.0 tps, lat 13.763 ms stddev 0.627
progress: 4.0 s, 276.0 tps, lat 14.035 ms stddev 3.919
progress: 5.0 s, 280.0 tps, lat 14.791 ms stddev 5.954
progress: 6.0 s, 296.0 tps, lat 13.493 ms stddev 1.720
progress: 7.0 s, 300.0 tps, lat 13.347 ms stddev 1.433
1万次更新需要十几多秒才能完成，而使用合并更新，只需要0.几秒
而插入方面，Greenplum没有表级锁，效率比更新高很多。
^C
pgbench -M simple -n -r -f ./test.sql -P 1 -c 2 -j 2 -T 100
progress: 1.0 s, 11124.9 tps, lat 0.178 ms stddev 0.018
progress: 2.0 s, 10910.9 tps, lat 0.182 ms stddev 0.011
progress: 3.0 s, 10903.3 tps, lat 0.182 ms stddev 0.011
^C
pgbench -M simple -n -r -f ./test.sql -P 1 -c 1 -j 1 -T 100
progress: 1.0 s, 4998.3 tps, lat 0.170 ms stddev 0.018
progress: 2.0 s, 4041.6 tps, lat 0.282 ms stddev 7.163
progress: 3.0 s, 5894.7 tps, lat 0.169 ms stddev 0.006
^C
pgbench -M simple -n -r -f ./test.sql -P 1 -c 8 -j 8 -T 100
progress: 1.0 s, 39995.8 tps, lat 0.198 ms stddev 0.146
progress: 2.0 s, 41325.8 tps, lat 0.192 ms stddev 0.037
progress: 3.0 s, 40775.6 tps, lat 0.195 ms stddev 0.149
progress: 4.0 s, 41638.2 tps, lat 0.191 ms stddev 0.046
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")