title:Strategic Safety-Critical Attacks Against an Advanced Driver Assistance
System
author:Xugui Zhou and
Anna Schmedding and
Haotian Ren and
Lishan Yang and
Philip Schowitz and
Evgenia Smirni and
Homa Alemzadeh
0
2
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Strategic Safety-Critical Attacks Against an
Advanced Driver Assistance System
Xugui Zhou, Anna Schmedding†, Haotian Ren, Lishan Yang†, Philip Schowitz†, Evgenia Smirni†, Homa Alemzadeh
University of Virginia, Charlottesville, VA 22904 {xz6cz, hr3xw, ha4d}@virginia.edu
†William & Mary, Williamsburg, VA 23187 {akschmed, lyang11, philips, esmirni}@cs.wm.edu
Abstract—A growing number of vehicles are being transformed
into semi-autonomous vehicles (Level 2 autonomy) by relying
on advanced driver assistance systems (ADAS) to improve the
driving experience. However,
the increasing complexity and
connectivity of ADAS expose the vehicles to safety-critical faults
and attacks. This paper investigates the resilience of a widely-
used ADAS against safety-critical attacks that target the control
system at opportune times during different driving scenarios and
cause accidents. Experimental results show that our proposed
Context-Aware attacks can achieve an 83.4% success rate in
causing hazards, 99.7% of which occur without any warnings.
These results highlight the intolerance of ADAS to safety-critical
attacks and the importance of timely interventions by human
drivers or automated recovery mechanisms to prevent accidents.
Index Terms—Attack, Fault injection, Hazard Analysis, CPS,
Safety Validation, Autonomous Vehicle, ADAS
I. INTRODUCTION
Over 3.5 million passenger cars worldwide are equipped
with level 2 autonomous driving features such as Automated
Lane Centering (ALC), Adaptive Cruise Control (ACC), and
lane change assistance [1], [2]. With level 2 autonomy, the
human driver must always be ready to take over the control
of the car at any time. Many past studies have shown that
unforeseen faults and/or malicious attacks can cause unsafe
operation of the autonomous driver assistance systems (ADAS)
with catastrophic consequences [3]–[8].
There are a variety of vulnerable components within a
vehicle that can be targets for attacks, including Electronic
Control Units (ECUs), sensors, in-vehicle networks, and V2X
(Vehicle-to-Everything) communication [9]–[12]. Protecting
the in-vehicle communication networks is of particular im-
portance because they transmit sensor data, actuator com-
mands, and other safety-critical information among various
components. For example, some ADAS (e.g., OpenPilot from
Comma.ai [13]) are integrated with the control system of
existing vehicles by tapping into the Controller Area Network
(CAN) bus interface through the On-Board Diagnostics (OBD)
II port [14]. Additionally, critical information is shared through
publisher-subscriber messaging systems, such as ROS [15],
[16] or Cereal [17] which are shown to be vulnerable to a
variety of attacks [18]. Despite efforts towards protecting these
communication channels using techniques such as encryption
and intrusion detection [19], [20],
these protections either
cannot detect attacks of a speciﬁc type or frequency or
are not implemented in most vehicles on the road due to
computational costs and the real-time constraints of the vehicle
control systems [11], [21]–[23].
Recent works on autonomous vehicle (AV) safety and
security have focused on assessing the impact of hardware
faults and physical attacks on the ML accelerators [24] and
inputs [3], [8], sensor attacks [25], [26], and attacks targeting
the controller [27], [28]. But less attention has been paid
to targeted safety-critical attacks on the ADAS output and
actuator commands sent over the vulnerable communication
channels that might go undetected by the existing safety
mechanisms or cannot be acted on by a human driver.
More recently, studies have shown the beneﬁt of contextual
information and dynamic AV models [3], [5], [6] in designing
effective fault injection and attack strategies that result in high
hazard coverage. Machine learning (ML) methods such as
Bayesian networks [5], neural networks [6], and reinforcement
learning [29] are used to explore the fault parameter space and
identify the most salient fault and attack scenarios with adverse
impacts on safety. However, such approaches depend on large
amounts of data from random fault injection experiments for
model training.
In this paper, we use an orthogonal model-driven approach
to the above data-driven techniques. Instead of focusing on
exploring the entirety of the fault parameter space, we focus
on a systematic characterization of the effect of the values of
the parameter space (e.g., start time and duration of faults) in
conjunction with the dynamic state of the vehicle to identify
the most opportune system contexts to launch the attacks. We
propose a Context-Aware safety-critical attack that can ﬁnd
the most critical context during a driving scenario to activate
attacks that strategically corrupt the ADAS outputs, with the
goal of (1) maximizing the chance of hazards and (2) causing
hazards as soon as possible, before being detected/mitigated
by the human driver or the ADAS safety mechanisms. We
base this approach on the high-level control-theoretic hazard
analysis [30] and speciﬁcation of context-dependent safety re-
quirements [3], [31] for a typical ADAS, which is applicable to
any ADAS with the same functional and safety speciﬁcations.
We assess the resilience of OpenPilot [13], a widely-used
ADAS, against such safety-critical attacks by demonstrating
that system hardware and software components can be ex-
ploited, and actuator commands can be strategically modiﬁed
to implement such malicious attacks and cause highly effective
targeted hazards and accidents such as collision with other
vehicles or road-side objects.
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00020
79
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:45 UTC from IEEE Xplore.  Restrictions apply. 
OpenPilot to ensure that the vehicle does not alter its trajectory
too quickly, therefore allowing the driver to safely react [34]:
to 2m/s² and
• The maximum acceleration limit
is set
maximum deceleration is set to -3.5m/s².
• There is a 1-second delay before the vehicle signiﬁcantly
deviates from its original path (e.g., crosses lane lines),
allowing the driver time to react to an erroneous steering
command.
• The driver can override OpenPilot with minimal effort,
i.e., less than 3Nm extra torque on the steering wheel.
OpenPilot and the ﬁrmware used in some of the car mod-
els controlled by OpenPilot also implement additional auto-
mated safety mechanisms such as Forward Collision Warning
(FCW) [35] and Autonomous Emergency Braking (AEB) [36].
B. Cyber-Physical System Context
An ADAS is designed by the tight integration of cyber
and physical components with a human in the loop. Safety,
as an emergent property of Cyber-Physical Systems (CPS),
is context-dependent and should be controlled by enforcing
constraints on the system behavior and control actions given
the overall system state [31], [37]. In every control cycle t,
an ADAS uses sensor measurements to estimate the physical
system state xt (e.g., current speed, relative distance to lead
vehicle) and decides on a control action, ut, from a ﬁnite set
of high-level control actions (e.g., Acceleration, Deceleration,
or Steering). The high-level control actions issued by ADAS
are then translated by a low-level controller into control com-
mands (e.g., gas and brake) which are sent to the actuators.
Upon execution of the control command by the actuators, the
physical system transitions to a new state xt+1.
=
{ut−k+1, ..., ut−1, ut} issued in k consecutive control
cycles is unsafe if upon its execution in a given state
sequence Xt = {xt−k+1, ..., xt−1, xt}, the system eventually
transitions to a state xt(cid:48)
too
close to the lead vehicle). Thus, both the current system
state and the control commands issued by ADAS contribute
to the vehicle safety status. We use this insight to design
infers the most
a Context-Aware safety-critical attack that
critical states during vehicle operation to strategically corrupt
the control commands that are sent to the actuators.
is hazardous [31] (e.g.,
A sequence
actions Ut
control
that
of
cyber
Previous studies have shown that there is often a time gap
between the activation of faults and the ﬁnal propagation of
unsafe control commands to the physical layer, resulting in
hazards [31], [38]. We deﬁne the time between activation of
an attack to the occurrence of a hazard as Time-to-Hazard
(TTH) which indicates the maximum time budget for detecting
anomalies and engaging in mitigation actions (see Fig. 2).
The Driver Reaction Time is deﬁned as the time difference
between the perception of an alert or anomaly (e.g., seeing
an alert raised by the ADAS or recognizing an anomaly)
and the start of physically taking an action (e.g., hitting the
brake). In the AV literature, the overall driver reaction time
(perception and reaction) is reported to be 2.5 seconds on
average [8], [39]. We deﬁne the Mitigation Time as the time it
Fig. 1: Overview of the control structure of an ADAS with ACC and
ALC, and the proposed attack engine.
Our study shows that the proposed Context-Aware strat-
egy judiciously selects the most opportune start times and
durations for attacks and is efﬁcient in exploiting the safety-
critical states of ADAS. We also ﬁnd that lane invasions are
common and can happen even without injecting faults, that the
forward collision warning is not activated at all during attacks,
and that the steering angle is the most vulnerable target. Our
experimental results further highlight the importance of driver
alertness for timely intervention and hazard prevention and
the importance of robust automated safety mechanisms at the
latest computational stage, just before execution on actuators.
II. PRELIMINARIES