a-z、A-Z、0-9、`-`{.literal} 和
`.`{.literal}。在当前规格中，允许使用下划线。但是，由于旧的规格不允许使用它，因此红帽不推荐在主机名中使用下划线。
分配名称和号码(ICANN)的互联网界面有时会在公共注册表中添加之前未注册的
Top-Level 域（比如
`.yourcompany`{.literal}）。因此，红帽强烈建议您不要使用没有委托给您的域名，即使在私有网络中。因为这可能会导致根据网络配置的不同，解析的域名会有所不同。因此，网络资源可能会不可用。使用未委托给您的域名也使得
DNSSEC 更难以部署和维护，因为域名冲突会导致需要手动配置 DNSSEC 验证。
有关此问题的详情，请查看 ICANN 有关域名冲突的 FAQ：
[http://www.icann.org/en/help/name-collision/faqs](http://www.icann.org/en/help/name-collision/faqs){.link}
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Networking-Updates_to_NetworkManager}NetworkManager 更新 {.title}
:::
Red Hat Enterprise Linux 7 包括了一个
[**[NetworkManager]{.application}**]{.strong}
的更新版本，它提供了很多改进和一些新功能。
::: itemizedlist
-   [**[nmcli]{.application}**]{.strong} 工具现在支持与
    `nmcli con edit`{.literal} 和 `nmcli con modify`{.literal}
    命令的编辑连接。
-   新的基于文本的用户界面（[**[nmtui]{.application}**]{.strong}）提供了基于控制台的简化工具来编辑网络配置和控制网络连接。它用于替代
    [**[system-config-network-tui]{.application}**]{.strong} 工具。
-   在以前的版本中，[**[NetworkManager]{.application}**]{.strong}
    会忽略它无法识别的网络接口（以太网、Infiniband、WiFi、Bridge、Bond
    和 VLAN 以外的接口）。[**[NetworkManager]{.application}**]{.strong}
    现在可以失败任何由 `ip link`{.literal} 获得的网络接口，并通过 D-Bus
    接口和 [**[nmcli]{.application}**]{.strong}
    等客户端公开这些接口。这可让
    [**[NetworkManager]{.application}**]{.strong} 更接近
    [**[ip]{.application}**]{.strong} 等工具。
-   [**[NetworkManager]{.application}**]{.strong}
    现在可以以一个非破坏性的方式，获得它可以原生配置的接口（如以太网、InfiniBand、Bridge、Bond、VLAN
    和团队接口）的所有权。如果在
    [**[NetworkManager]{.application}**]{.strong}
    启动或重启前配置了这些接口，则之前配置的连接不会中断。这意味着不再需要
    `NM_CONTROLLED`{.literal} 选项。
-   支持检查网络连接、热点和门户。默认禁用此行为。
-   支持团队接口。
-   对 GRE、macvlan、macvtap、tun、tap、veth 和 vxlan
    设备的基本、非原生支持。
-   新的 [**[NetworkManager-config-server]{.package}**]{.strong}
    软件包提供适合服务器的默认值，如忽略载体更改或不创建默认 DHCP 连接。
-   `NetworkManager.conf`{.literal} 的新 `dns=none`{.literal}
    配置选项可防止 [**[NetworkManager]{.application}**]{.strong} 对
    `resolv.conf`{.literal} 文件进行修改。
-   支持快速用户切换。
-   支持在接口的 MAC 地址之外锁定到接口名称的连接。
:::
这个版本还会更改配置文件监控行为。[**[NetworkManager]{.application}**]{.strong}
不再监控磁盘上的配置文件以进行更改。相反，用户必须使用
`nmcli con reload`{.literal} 命令手动重新载入更改的配置文件。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Networking-New_Network_Naming_Schema}新的网络命名规范 {.title}
:::
Red Hat Enterprise Linux 7
提供可以实现网络接口的一致性和可预测的网络设备命名方法。这些功能更改了系统中网络接口名称，以便更轻松地查找和区分接口。
通常，Linux 中的网络接口被指定为
`eth[0123…]`{.literal}，但这些名称不一定与设备机壳上的实际标签对应。具有多个网络适配器的现代服务器平台，可能会遇到这些接口的命名不明确的情况。这会影响嵌入在主板（Lan-on-Motherboard
或 LOM）以及附加（单个和多端口）适配器中的网络适配器。
在 Red Hat Enterprise Linux 7 中, [**[systemd]{.application}**]{.strong}
和 [**[udevd]{.application}**]{.strong}
支持很多不同的命名方案。默认行为是根据固件、拓扑和位置信息分配固定名称。它具有完全自动且完全可预测的名称的优点。即使添加或删除硬件（不会重新定义），并且有问题的硬件可以被无缝地替换，仍然可以保持固定的名称。这个行为的缺陷在于，名称有时会比之前使用的名称更难于理解，例如，`eth0`{.literal}
会变为 `enp5s0`{.literal}。
[**[udevd]{.application}**]{.strong} 现在原生支持以下网络接口命名方案。
::: variablelist
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#varl-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Network_Naming_Schema-Scheme_1}
[方案 1]{.term}
:   使用固件或 BIOS 为板上设备提供的索引号，例如
    `eno1`{.literal}。如果来自固件的信息可用，则默认情况下[**[systemd]{.application}**]{.strong}
    会使用这个方案命名接口，方案 2 作为一个备用方案。
:::
::: variablelist
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#varl-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Network_Naming_Schema-Scheme_2}
[方案 2]{.term}
:   使用固件或 BIOS 提供的 PCI Express 热插槽索引号命名，例如
    `ens1`{.literal}。如果来自固件的信息可用，则默认情况下[**[systemd]{.application}**]{.strong}
    会使用这个方案命名接口，方案 3 作为一个备用方案。
:::
::: variablelist
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#varl-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Network_Naming_Schema-Scheme_3}
[方案 3]{.term}
:   使用硬件连接器物理位置命名，例如
    `enp2s0`{.literal}。如果来自固件的信息可用，则默认情况下[**[systemd]{.application}**]{.strong}
    会使用这个方案命名接口，方案 5 作为一个备用方案。
:::
::: variablelist
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#varl-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Network_Naming_Schema-Scheme_4}
[方案 4]{.term}
:   使用 MAC 地址进行命名，例如
    `enx78e7d1ea46da`{.literal}。默认情况下，[**[systemd]{.application}**]{.strong}
    不会根据这个方案命名接口，但在需要时可以启用它。
:::
::: variablelist
[]{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#varl-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_Network_Naming_Schema-Scheme_5}
[方案 5]{.term}
:   传统的、无法预计的内核原生 ethX 命名方案，例如
    `eth0`{.literal}。如果所有其他方法都失败，则[**[systemd]{.application}**]{.strong}
    根据这个方案进行接口命名。
:::
如果系统启用了 `BIOSDEVNAME`{.literal}，或者用户添加了更改内核设备名称的
[**[udevd]{.application}**]{.strong} 规则，则这些规则优先于默认的
[**[systemd]{.application}**]{.strong} 策略。
有关这个新命名系统的详情，请参考 [*[Red Hat Enterprise Linux 7
Networking
Guide]{.citetitle}*]{.emphasis}（[http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/](http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/){.link}）。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Networking-New_network_configuration_utility_ncat}新的网络工具(ncat) {.title}
:::
在 Red Hat Enterprise Linux 7 中使用一个新的网络工具程序
[**[ncat]{.application}**]{.strong} 替换
[**[netcat]{.application}**]{.strong}。[**[ncat]{.application}**]{.strong}
是一个可靠的后端工具，它为其他应用程序和用户提供网络连接。它从命令行读取和写入数据，并使用
TCP 和 UDP 进行通信。
[**[ncat]{.application}**]{.strong} 中的一些命令与之前由
[**[netcat]{.application}**]{.strong}
提供的命令不同，或者使用相同的选项但提供的功能有所不同。这些区别在以下列表中概述。
::: itemizedlist
-   `netcat -P`{.literal}
    选项使用指定的用户名向需要身份验证的代理服务器显示。这个行为的
    [**[ncat]{.application}**]{.strong} 选项是
    `--proxy-auth user[:pass]`{.literal}。
-   `netcat -X`{.literal}
    选项为网络实用程序使用一个指定的协议，用于与代理服务器通信。这个行为的
    [**[ncat]{.application}**]{.strong} 选项是
    `--proxy-type`{.literal}。
-   `netcat -x`{.literal}
    选项使用一个地址和网络实用程序可选端口来与代理服务器连接。这个行为的
    [**[ncat]{.application}**]{.strong} 选项是
    `--proxy`{.literal}，它使用 IP 地址和可选端口，如
    `--proxy host[:port]`{.literal}。
-   `netcat -d`{.literal} 选项禁用从 stdin 读取。`ncat -d`{.literal}
    选项允许用户指定读取或写入操作之间的等待时间。但是，[**[ncat]{.application}**]{.strong}
    提供了 `--recv-only`{.literal} 选项，它提供了与
    `netcat -d`{.literal} 类似的行为。
-   `netcat -i`{.literal}
    选项指定发送和接收文本行之间或者到多个端口的连接之间的间隔。`ncat -i`{.literal}
    选项指定连接在连接超时并被终止前可以闲置的时间。[**[ncat]{.application}**]{.strong}
    中没有对应于 `netcat -i`{.literal} 的选项。
-   `netcat -w`{.literal}
    选项指定无法建立的连接在连接超时和被终止前可以闲置的时间。`ncat -w`{.literal}
    选项指定在超时前尝试连接的时间。
:::
[**[netcat]{.application}**]{.strong} 中的一些选项在
[**[ncat]{.application}**]{.strong}
中没有对应的选项。[**[ncat]{.application}**]{.strong}
目前无法执行以下操作。
::: itemizedlist
-   在 socket 中启动调试功能（由 `netcat -D`{.literal} 提供）。
-   指定 TCP 发送和接收缓冲区的大小（以前由 `netcat -I`{.literal} 和
    `netcat -O`{.literal} 提供）。
-   指定源或目标端口是随机选择的（以前由 `netcat -r`{.literal} 提供）。
-   通过 TCP MD5 Signature Option, RFC 2385 启用对 BGP
    会话的保护（以前由 `netcat -S`{.literal} 提供）。
-   指定服务 IPv4 类型（以前由 `netcat -T`{.literal} 提供）。
-   指定使用 UNIX 域套接字（以前由 `netcat -U`{.literal} 提供）。
-   指定要使用的路由表（以前由 `netcat -V`{.literal} 提供）。
-   在不传送数据的情况下扫描侦听守护进程。
-   指定发送和接收文本行之间或者到多个端口的连接之间的间隔。
:::
[**[ncat]{.application}**]{.strong} 工具程序由
[**[nmap-ncat]{.package}**]{.strong} 软件包提供。更多信息，请参阅
[**[ncat]{.application}**]{.strong} man page：
``` literallayout
$ man ncat
```
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Networking-Changes_to_Postfix}Postfix 的更改 {.title}
:::
Red Hat Enterprise Linux 7 将 [**[postfix]{.package}**]{.strong} 从版本
2.6 升级到 2.10。在从 Red Hat Enterprise Linux 6 升级到 7 时，Preupgrade
Assistant 会处理主要的兼容性问题，但用户应该了解以下非主要的兼容性问题。
::: itemizedlist
-   在使用 `postscreen`{.literal} 守护进程前，请确定执行
    `postfix stop`{.literal} 和 `postfix start`{.literal} 命令，以避免
    `pass`{.literal} master 服务出现问题。
-   默认由系统提供的 CA 证书不再添加到 `*_tls_CAfile`{.literal} 或
    `*_tls_CApath`{.literal} 列表中。这意味着,在使用
    `permit_tls_all_clientcerts`{.literal}
    时,第三方证书不再接收邮件转发权限。如果您的配置需要证书验证，请通过设置
    `tls_append_default_CA = yes`{.literal} 来启用向后兼容的行为。
-   在默认情况下，`verify`{.literal}
    服务现在使用一个启用了定期清理功能的持久缓存。需要支持 delete 和
    sequence 操作。要禁用缓存，在 `main.cf`{.literal} 中指定一个空的
    `address_verify_map`{.literal} 参数。要禁用定期清理，将
    `address_verify_cache_cleanup_interval`{.literal} 设置为
    `0`{.literal}。
-   在以前的版本中，当过滤的下一步目的地没有指定使，会默认使用
    `$myhostname`{.literal}
    的值。现在默认是接收者域。要更改默认的下一步目的地，请指定
    `default_filter_nexthop = $myhostname`{.literal}。在基于 pipe
    的过滤中，这也启用了 FIFO 发送顺序，而不是使用 round-robin 域选择。
-   `postmulti -e destroy`{.literal} 命令不再尝试删除执行
    `postmulti -e create`{.literal} 命令后创建的文件。
-   postfix 现在在使用 Milter `smfi_addrcpt`{.literal}
    操作添加接收者时请求默认交付状态通知。
-   当虚拟别名扩展的结果超过虚拟别名或扩展限制时, Postfix
    现在会报告一个临时的交付错误,而不是静默地丢弃超额接收者并发送消息。
-   现在，当向一个没有 owner-alias
    的子别名发送邮件时，本地发送代理会保留父别名的 owner-alias
    属性。这会减少重复发送到邮件列表的可能性。要启用旧的行为，指定
    `reset_owner_alias = yes`{.literal}。
-   当在没有 \"`.`{.literal}\" 的 DNS 名称时，Postfix SMTP
    客户端不再附加本地域。要启用旧的行为，指定
    `smtp_dns_resolver_options = res_defnames`{.literal}。请注意,这可能会生成意外的结果。
-   `postfix/smtpd[pid]: queueid: client=host[addr]`{.literal}
    日志记录的格式已改变。可用的 before-filter 客户端信息和
    before-filter 队列 ID 现在会附加至记录末尾。
-   默认情况下，postfix
    不再将未公开的接收者标头添加到没有指定接收方的消息中。要启用旧的行为，在
    `mail.cf`{.literal} 中指定以下内容：
    ``` literallayout
    undisclosed_recipients_header = To: undisclosed-recipients:;
    ```
-   现在，在每次成功完成 `STARTTLS`{.literal} 后会重新计算 SASL
    机制列表。
-   `smtpd_starttls_timeout`{.literal} 默认值现在独立使用。
-   DNSBL 查询域名中的 secret 现在必须隐藏来自 `postscreen`{.literal}
    SMTP 答案的 secret。例如，在 `main.cf`{.literal} 中，指定：