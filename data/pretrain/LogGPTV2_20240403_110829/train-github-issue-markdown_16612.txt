 **I'm submitting a ...** (check one with "x")
    [ ] bug report
    [x] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
With the current injectior options you can't redefine a service that uses his
parent, because of a circular dependency.
For instance, imagine I make a new service, called `HttpA` that uses the
`Http` service but adding a functionality. Now, as long as my service extends
`Http` or explicitly uses `Http` (by creating an instance) I can declare a
provider for this service with:
    provide(HttpA, {
        useFactory: (xhrBackend: XHRBackend, requestOptions: RequestOptions) => {
            return new HttpA(xhrBackend, requestOptions);
        },
        deps: [XHRBackend, RequestOptions]
    })
But now, maybe I don't want to go through all my application and change all
the Http references to HttpA, so I can do something like this:
    provide(Http, {
        useFactory: (xhrBackend: XHRBackend, requestOptions: RequestOptions) => {
            return new HttpA(xhrBackend, requestOptions);
        },
        deps: [XHRBackend, RequestOptions]
    })
And this will work perfectly.
But what will happen if we create another Http-based service called `HttpB`
that adds a different functionality from `HttpA`? If we use the same provider
as `HttpA` it will replace that implementation with the new one, because we
will be telling the injector that whenever someone asks for the `Http`
service, give him the `HttpB` service instance that we just created, that it
uses or extends @angular/core `Http`, thus the functionality in `HttpA` will
be lost.
The problem then is that when we try to use the injector to get the last
`Http` implementation we get a cyclic dependency error:
    provide(Http, {
        useFactory: (http:Http) => {
            return new HttpA(http);
        },
        deps: [Http]
    })
And it makes sense if you read it like "When someone asks the `Http` service,
get the `Http` service and use `HttpA` instead", but wouldn't it be cool the
injector to know that the `Http` service we are injecting in the provider is
not the same we are returning? (i.e., it's the last defined implementation)?
In fact, the behaviour that I want would be like:
    provide(Http, {
        useFactory: (http:OldHttp) => {
            return new HttpA(http);
        },
        deps: [OldHttp]
    })
But of course this won't work now because OldHttp is not defined (this is just
the behaviour I mean)
This would let the developers do these kind of chaining, with any service
(Angular 2 or custom)
_PS: This feature was crafted from a talk in AngularCamp Barcelona June 2016_