listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
encoder := gob.NewEncoder(conn)
decoder := gob.NewDecoder(conn)
for n := 0; n < 10; n++ {
var person Person
decoder.Decode(&person)
fmt.Println(person.String())
encoder.Encode(person)
}
conn.Close() // we're finished
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
4.7 Encoding binary data as strings 将二进制数据编码为字符
串
Once upon a time, transmtting 8-bit data was problematic. It was often transmitted over
noisy serial lines and could easily become corrupted. 7-bit data on the other hand could
be transmitted more reliably because the 8th bit could be used as check digit. For example,
in an "even parity" scheme, the check digit would be set to one or zero to make an even
number of 1's in a byte. This allows detection of errors of a single bit in each byte.
以前，传输8-bit数据总是会出现各种问题。它通常由充满噪声的串行线来输入，因此会出错。因为第8个
比特位可以被用来做数字检验，所以7-bit的传输要值得信任一些。例如在 “偶数奇偶校检”模式下，为了让
一个字节中出现偶数个1,校检位可以被设置1或0，这将可侦测每个字节中的单个bit位出现的错误.
ASCII is a 7-bit character set. A number of schemes have been developed that are more
sophisticated than simple parity checking, but which involve translating 8-bit binary data
into 7-bit ASCII format. Essentially, the 8-bit data is stretched out in some way over the
7-bit bytes.
ASCII是一种7-bit字符集。很多比‘奇偶检验’精巧的模式被开发出来，但是本质上都是将8-bit二进制数
据转化成7-bit ASCII格式。本质上8-bit数据是7-bit数据的延伸。
Binary data transmitted in HTTP responses and requests is often translated into an ASCII
form. This makes it easy to inspect the HTTP messages with a simple text reader without
worrying about what strange 8-bit bytes might do to your display!
在HTTP的请求与应答中，二进制数据常被转化为ASCII的形式。这使得通过一个简单的文本阅读器来检视
HTTP消息变得容易，而不需要担心8-bit字节造成的显示乱码的问题！
One common format is Base64. Go has support for many binary-to-text formats, including
base64.
一个通用的格式是Base64，Go支持包括base64在内的多种binary-to-text格式.
There are two principal functions to use for Base64 encoding and decoding:
两个编、解码Base64的主要函数:
func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser
func NewDecoder(enc *Encoding, r io.Reader) io.Reader
A simple program just to encode and decode a set of eight binary digits is
一个用以演示编解码8位二进制数的简单程序如下:
/**
* Base64
*/
package main
import (
"bytes"
"encoding/base64"
"fmt"
)
func main() {
eightBitData := []byte{1, 2, 3, 4, 5, 6, 7, 8}
bb := &bytes.Buffer{}
encoder := base64.NewEncoder(base64.StdEncoding, bb)
encoder.Write(eightBitData)
encoder.Close()
fmt.Println(bb)
dbuf := make([]byte, 12)
decoder := base64.NewDecoder(base64.StdEncoding, bb)
decoder.Read(dbuf)
for _, ch := range dbuf {
fmt.Print(ch)
}
}
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 5 第五章
Application-Level Protocols 应用层协议
A client and a server exchange messages consisting of message types and message data.
This requires design of a suitable message exchange protocol. This chapter looks
at some of the issues involved in this, and gives a complete example of a simple
client-server application.
客户端和服务器的交互包括消息类型和消息数据，这就需要有适当的交互协议。本章着重讨论客户端
和服务器交互相关的问题，并给出一个完整又简单的客户端服务器交互的例子。
5.1 Introduction 介绍
A client and server need to exchange information via messages. TCP and UDP provide
the transport mechanisms to do this. The two processes also need to have a protocol
in place so that message exchange can take place meaningfully. A protocol defines
what type of conversation can take place between two components of a distributed
application, by specifying messages, data types, encoding formats and so on.
客户端和服务器需要通过消息来进行交互。TCP 和UDP是信息交互的两种传输机制。在这两种传输机
制之上就需要有协议来约定传输内容的含义。协议清楚说明分布式应用的两个模块之间交互消息的消
息体、消息的数据类型、编码格式等。
5.2 Protocol Design 协议设计
There are many possibilities and issues to be decided on when designing a protocol.
Some of the issues include:
当设计协议的时候，有许多许多的情况和问题需要考虑，比如：
 Is it to be broadcast or point to point?
Broadcast must be UDP, local multicast or the more experimental MBONE. Point
to point could be either TCP or UDP.
 Is it to be stateful vs stateless?
Is it reasonable for one side to maintain state about the other side? It is
often simpler to do so, but what happens if something crashes?
 Is the transport protocol reliable or unreliable?
Reliable is often slower, but then you don't have to worry so much about lost
messages.
 Are replies needed?
If a reply is needed, how do you handle a lost reply? Timeouts may be used.
 What data format do you want?
Two common possibilities are MIME or byte encoding.
 Is your communication bursty or steady stream?
Ethernet and the Internet are best at bursty traffic. Steady stream is needed
for video streams and particularly for voice. If required, how do you manage
Quality of Service (QoS)?
 Are there multiple streams with synchronisation required?
Does the data need to be synchronised with anything? e.g. video and voice.
 Are you building a standalone application or a library to be used by others?
The standards of documentation required might vary.
 是广播还是单播？
广播必须使用UDP，本地组播或者是更成熟的组播骨干网（MBONE）。单播就可以使用 TCP 或
者UDP。
 消息应该是有状态还是无状态的？
任意一边是否有必要维持另外一边的状态消息？虽然这个似乎很好实现，但是如果发生异常的
时候又应该怎么做呢？
 协议是可靠服务还是不可靠服务？
一般来说，提供可靠服务就会更慢些，但好处是不需要考虑丢失消息的情况。
 是否需要响应？
如果是需要响应的话，如何处理没有响应回复的情况？或许可以设置超时时间。
 你想要使用什么数据格式？
一般使用两种格式：MIME 和字节流
 消息流是使用突发性的还是稳定性的？
Ethernet 和Internet 最好使用突发性消息流。稳定性的消息流通常是用在视频和声频流传
输上。如果要求的话，你如何保证你的服务质量（QoS）？
 有多流同步的需求吗？
是否有多种数据流需要进行同步？比如视频流和声频流。
 建立的是单独的应用还是需要给别人使用的库？
可能需要花很大的精力编写标准文档。
5.3 Version control 版本控制
A protocol used in a client/server system will evolve over time, changing as the
system expands. This raises compatability problems: a version 2 client will make
requests that a version 1 server doesn't understand, whereas a version 2 server will
send replies that a version 1 client won't understand.
随着时间变化和系统的升级，客户端/服务器之间的协议也会升级。这可能会引起兼容性的问题：版
本2 的客户端发出的请求可能版本 1 的服务器无法解析，反之也一样，版本2 的服务器回复的消息
版本1 的客户端无法解析。
Each side should ideally be able to understand messages for its own version and all
earlier ones. It should be able to write replies to old style queries in old style
response format.
理想情况下，不论是哪一端，都应该既能满足自己当前版本的消息规范，也能满足早期版本的消息规
范。任意一端对于旧版本的请求应该返回旧版本的响应。
The ability to talk earlier version formats may be lost if the protocol changes too
much. In this case, you need to be able to ensure that no copies of the earlier version
still exist - and that is generally imposible.
但是如果协议变化太大的话，可能就很难保持与早期版本的兼容了。在这种情况下，你就需要保证已
经不存在早期的版本了 -- 当然这个几乎是不可能的。
Part of the protocol setup should involve version information.
所以，协议应该包含有版本消息。
The Web
Web 协议
The Web is a good example of a system that is messed up by different versions. The
protocol has been through three versions, and most servers/browsers now use the
latest version. The version is given in each request
Web 协议就是一个由于有不同协议版本同时存在而出现混乱的例子。Web 协议已经有三个版本了，通
常服务器和浏览器都是使用最新的版本，版本消息包含在请求中：
request version
GET / pre 1.0
GET / HTTP/1.0 HTTP 1.0
GET / HTTP/1.1 HTTP 1.1
But the content of the messages has been through a large number of versions:
但是消息体的内容已经被大量版本制定修改过：
 HTML versions 1-4 (all different), with version 5 on the horizon;
 non-standard tags recognised by different browsers;
 non-HTML documents often require content handlers that may or may not be present
- does your browser have a handler for Flash?
 inconsistent treatment of document content (e.g. some stylesheet content will
crash some browsers)
 Different support for JavaScript (and different versions of JavaScript)
 Different runtime engines for Java
 Many pages do not conform to any HTML versions (e.g. with syntax errors)
 HTML 版本1-4（每个版本都不一样），还有即将到来的HTML5;
 不同浏览器各自支持非标准化的标签;
 HTML 文档之外的内容也通常需要不同的内容处理器 -- 比如你的浏览器支持Flash 播放器
吗？
 文档内容的不一致的处理方法（例如，在一些浏览器上，有的css 会冲突）
 浏览器对JavaScript 的不同支持程度（当然JavaScript 也同时存在不同的版本）
 不同的Java 运行引擎
 有的页面并没有遵守任何HTML 版本规范（比如 HTML 格式错误的页面）
5.4 Message Format 消息格式
In the last chapter we discussed some possibilities for representing data to be sent
across the wire. Now we look one level up, to the messages which may contain such
data.
上一章我们讨论了数据传输的几种可能的表现形式。现在我们进一步研究包含数据的消息。
 The client and server will exchange messages with different meanings. e.g.
o Login request,
o get record request,
o login reply,
o record data reply.
 The client will prepare a request which must be understood by the server.
 The server will prepare a reply which must be understood by the client.
 客户端和服务器会交换不同含义的消息，比如：
登陆请求
o
获取某些记录的请求
o
登陆请求的回复
o
获取某些记录请求的回复
o
 客户端必须发送能被服务器解析的请求。
 服务器必须回复能被客户端解析的响应。
Commonly, the first part of the message will be a message type.
通常来说，消息的头部必须包含消息类型。
 Client to server
 LOGIN name passwd
 GET cpe4001 grade
 Server to client
 LOGIN succeeded
 GRADE cpe4001 D
 客户端发送给服务器
 LOGIN name passwd
 GET cpe4001 grade
 服务器返回给客户端
 LOGIN succeeded
 GRADE cpe4001 D
The message types can be strings or integers. e.g. HTTP uses integers such as 404
to mean "not found" (although these integers are written as strings). The messages
from client to server and vice versa are disjoint: "LOGIN" from client to server
is different to "LOGIN" from server to client.
消息类型应该设置为字符型或者整型。比如，HTTP 使用整数404 来表示“未找到资源”（尽管这个整
型是被当做字符串使用）。客户端到服务器的消息和服务器到客户端的消息是不一样的：比如从客户
端到服务器的“LOGIN”消息就不同于服务器到客户端的“LOGIN”消息。
5.5 Data Format 数据格式
There are two main format choices for messages: byte encoded or character encoded.
对于消息来说，有两种主要的数据格式可供选择：字节编码和字符编码。
Byte format
字节编码
In the byte format
对于字节编码
 the first part of the message is typically a byte to distinguish between message
types.
 The message handler would examine this first byte to distinguish message type
and then perform a switch to select the appropriate handler for that type.
 Further bytes in the message would contain message content according to a
pre-defined format (as discussed in the previous chapter).
 消息的头部通常使用一个字节来标示消息的类型。
 消息处理者应该根据消息头部的类型字节来选择合适的方法来处理这个类型的消息。
 消息后面的字节应该是根据事先定义的格式（上一章节讨论的）来包含消息具体内容。
The advantages are compactness and hence speed. The disadvantages are caused by the
opaqueness of the data: it may be harder to spot errors, harder to debug, require
special purpose decoding functions. There are many examples of byte-encoded formats,
including major protocols such as DNS and NFS , upto recent ones such as Skype. Of
course, if your protocol is not publicly specified, then a byte format can also make
it harder for others to reverse-engineer it!
字节编码的优势就是紧凑小巧，传输速度快。劣势就是数据的不透明性：字节编码很难定位错误，也
很难调试。往往是要求写一些额外的解码函数。有许多字节编码格式的例子，大部分协议都是使用字
节编码，例如DNS 和NFS 协议，还有最近出现的Skype 协议。当然，如果你的协议没有公开说明结
构，使用字节编码可以让其他人使用反向工程手段很难破解!
Pseudocode for a byte-format server is
字节编码的服务器的伪代码如下
handleClient(conn) {
while (true) {
byte b = conn.readByte()
switch (b) {
case MSG_1: ...
case MSG_2: ...
...
}
}
}
Go has basic support for managing byte streams. The interface Conn has methods
Go 提供了基本的管理字节流的方法。 接口Conn 包含有方法
(c Conn) Read(b []byte) (n int, err os.Error)
(c Conn) Write(b []byte) (n int, err os.Error)
and these methods are implemented by TCPConn and UDPConn.
这两个方法的具体实现类有 TCPConn and UDPConn。
Character Format
字符编码
In this mode, everything is sent as characters if possible. For example, an integer
234 would be sent as, say, the three characters '2', '3' and '4' instead of the one
byte 234. Data that is inherently binary may be base64 encoded to change it into
a 7-bit format and then sent as ASCII characters, as discussed in the previous
chapter.
在这个编码模式下，所有消息都尽可能以字符的形式发送。例如，整型数字234 会被处理成三个字
符‘2’，‘3’，‘4’，而不会被处理成234 的字节码。二进制数据将会使用base64 编码变成为 7-bit
的格式，然后当做ASCII 码传递，就和我们上一章讨论的一样。
In character format,
对于字符编码,
 A message is a sequence of one or more lines
 The start of the first line of the message is typically a word that represents
the message type.
 String handling functions may be used to decode the message type and data.
 The rest of the first line and successive lines contain the data.
 Line-oriented functions and line-oriented conventions are used to manage this.
 一条消息会是一行或者很多行内容
 消息的第一行通常使用一个单词来说明消息的类型。
 使用字符处理函数来解码消息类型和消息内容。
 第一行之后的信息和其他行包含消息数据。
 使用行处理函数和行处理规范来处理消息。
Pseudocode is
伪代码如下
handleClient() {
line = conn.readLine()
if (line.startsWith(...) {
...
} else if (line.startsWith(...) {
...
}
}
Character formats are easier to setup and easier to debug. For example, you can
use telnet to connect to a server on any port, and send client requests to that server.
It isn't so easy the other way, but you can use tools like tcpdump to snoop on TCP
traffic and see immediately what clients are sending to servers.
很容易进行组装，也很容易调试。例如，你可以telnet连接到一台服务器的端口上，然后发送客户
的请求到服务器。其他的编码方式无法轻易地监听请求。但是对于字符编码，你可以使用tcpdump 这
样的工具监听TCP 的交互，并且立刻就能看到客户端发送给服务器端的消息。
There is not the same level of support in Go for managing character streams. There
are significant issues with character sets and character encodings, and we will