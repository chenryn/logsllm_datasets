Device coordinates can be determined using GPS, cell tower triangulation, or Wi-Fi network proximity. When
using geolocation data, developers should consider two main privacy concerns: how and where data is logged
and the requested accuracy of coordinates.
Core Location is event driven, and an app looking to receive location information must register to receive event
updates. Event updates can provide longitude and latitude coordinates for use in the app. As previously
mentioned, an important part of reviewing an app is evaluating how this coordinate data is stored. If the app
must store coordinate information client-side, the developer should protect this data using one of the data
storage protection methods detailed in Chapter 5. However, to prevent someone from using the app to track a
user's movements, location information should not be stored on the device. In addition to client-side logging, if
the app passes coordinate information to a server, developers should ensure that any logging of this information
is done so anonymously.
Another consideration for developers when requesting event updates is the accuracy of the information they
require. For example, an app used for satellite navigation is likely to require very accurate location information,
whereas an app that provides information about the closest restaurant does not need to be as accurate. Similar
to location logging, the accuracy of the coordinates raises privacy concerns that developers should consider
when writing iOS applications.
When using CLocationManager, an app can request accuracy using the CLLocationAccuracy class that offers the
following constants:
kCLLocationAccuracyBestForNavigation
kCLLocationAccuracyBest
kCLLocationAccuracyNearestTenMeters
kCLLocationAccuracyHundredMeters
kCLLocationAccuracyKilometer
kCLLocationAccuracyThreeKilometers
When assessing an iOS application that uses location data, review how it uses this class and validate that the
accuracy constants used are suitable for the application's use case.
Identifying Data Leaks
Many iOS applications unintentionally leak data to other applications or adversaries with access to the
filesystem. In many cases, the data leaked can be of a sensitive nature, leading to the exposure of application
secrets such as session cookies or even credentials. This type of data leakage typically occurs when a developer
uses an API that has side effects the developer is not aware of and who therefore does not take preventative
measures to secure the data.
This section documents some of the ways a developer using the iOS APIs may inadvertently leak sensitive
application data.
Leaking Data in Application Logs
Logging can prove to be a valuable resource for debugging during development. However, in some cases it can
leak sensitive or proprietary information, which is then cached on the device until the next reboot. Logging in an
iOS application is typically performed using the NSLog method that causes a message to be sent to the Apple
System Log (ASL). These console logs can be manually inspected using the Xcode device's application. Since iOS
7, ASL will only return data belonging to the application that requests it, preventing a malicious application from
monitoring the log for secrets.
In the past, jailbreaking a device has caused NSLog output to be redirected to syslog. In this scenario the
possibility exists for sensitive information to be stored on the filesystem in syslog. Therefore, developers should
avoid using NSLog to log sensitive or proprietary information.
The simplest way for developers to avoid compiling NSLog into production releases is to redefine it with a
dummy pre-processor macro such as #define NSLog(...).
Identifying Pasteboard Leakage
Many developers want to offer users the ability to copy and paste data to not only different areas of their
application, but also to other applications on the device. If the pasteboard is used to copy sensitive data,
depending on how it is implemented, data could be leaked from the pasteboard to other third-party applications.
Three types of pasteboards are found in iOS applications:
The system pasteboard—This is the general pasteboard defined in the UIPasteboardNameGeneral constant
of the UIPasteboard class. All applications can access data stored on this pasteboard.
The find pasteboard—This is typically used for search operations and contains the data from the most
recent strings entered into the search bar. The find pasteboard is implemented using the
UIPasteboardNameFind constant of the UIPasteboard class. All applications can access data stored on this
pasteboard.
Custom pasteboards—Creating your own pasteboard is also possible using a unique identifier or a system-
created identifier. Data placed on this pasteboard stays private to your application or family of applications.
When either of the first two pasteboards is used, the potential exists that data can be disclosed to any
application that is passively monitoring the pasteboard. The following code snippet shows a simple example of
how you could implement an application that passively monitors the pasteboard. This example launches a
background task that reads the contents of the pasteboard every 5 seconds, and if the content has changed,
sends it to the console log:
- (void)applicationDidEnterBackground:(UIApplication *)application
{
dispatch_async(dispatch_get_global_queue( \
DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
UIApplication* uiapp = [UIApplication sharedApplication];
UIBackgroundTaskIdentifier *bgTaskId;
bgTaskId = [uiapp beginBackgroundTaskWithExpirationHandler:^{}];
NSString* contents = [[UIPasteboard generalPasteboard] string];
while (true){
NSString *newContents = [[UIPasteboard generalPasteboard] \
string];
if (![newContents isEqualToString:contents] && \
newContents != nil){
NSLog(@"Contents of pasteboard: %@",[[UIPasteboard \
generalPasteboard] string]);
contents = [[UIPasteboard generalPasteboard] string];
}
sleep(5);
}
});
}
Although such a simple example is unlikely to evade the App Store vetting process, it demonstrates how content
stored on the pasteboard can be inadvertently disclosed to other applications.
To avoid disclosing data to all third-party applications on the device, you should use a custom pasteboard, which
you can create as follows:
UIPasteboard *userPasteBoard =[UIPasteboard
pasteboardWithName:@"MyAppDefinedPasteboard" create:YES];
userPasteBoard.persistent=YES;
At times an application might need to use the system pasteboard for certain fields. However, particularly
sensitive fields such as passwords may not need the copy and paste functions so you can disable the copy and
paste menu on individual UITextFields items using code similar to the following:
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender {
UIMenuController *menu = [UIMenuController \
sharedMenuController];
if (menu) {
menu.menuVisible = NO;
}
return NO;
}
Handling Application State Transitions
When an application is open, the possibility exists for it to be sent into the background by a change in state, as a
result of actions such as receiving an incoming call or the user pressing the home button. When an application
is suspended in the background, iOS takes a snapshot of the app and stores it in the application's cache
directory. When the application is reopened, the device uses the screenshot to create the illusion that the
application loads instantly rather than taking time to reload the application.
If any sensitive information is open in the application when it enters the background, the snapshot is written to
the filesystem in cleartext, albeit protected with the default data protection API class. Any system that can be
paired with the device can access the snapshot. You can find the snapshot in the caches directory, as shown in
Figure 4.1.
Figure 4.1 Accessing application snapshots with iExplorer
The snapshot is simply a PNG image that displays the current view of the device when the state change was
initiated. Figure 4.2 shows how a registration page containing account information could be captured.
Figure 4.2 A snapshot can capture a registration page.
However, detecting when a state change is occurring and modifying the current view to mitigate against this
type of data leakage is possible. You can use the UIApplication delegate method
applicationDidEnterBackground to detect when an application is entering the background and from here the
view can be masked. For example, if specific fields contain sensitive information, the application can hide these
using the “hidden” attribute:
- (void)applicationDidEnterBackground:(UIApplication *)application {
viewController.accountNumber.hidden = YES;
}
Conversely, when the application restarts, it can unhide these fields by doing the reverse in the
applicationDidBecomeActive delegate:
- (void)applicationDidBecomeActive:(UIApplication *)application {
viewController.accountNumber.hidden = NO;
}
Keyboard Caching
To improve the user experience, iOS attempts to customize the autocorrect feature by caching input that is typed
into the device's keyboard. Almost every non-numeric word is cached on the filesystem in plaintext in the
keyboard cache file located in /var/mobile/Library/Keyboard:
Ipod10:/var/mobile/Library/Keyboard root# strings en_GB-dynamic-text.dat
DynamicDictionary-5
burp
call
dialer
admin
http
mdsec
secret
training
This has the obvious consequence that application data you wouldn't want to be cached—such as usernames,
passwords, and answers to security questions—could be inadvertently stored in the keyboard cache.
However, you can prevent certain fields from being populated into the cache by either marking a field as a
secure field using the secureTextEntry property or by explicitly disabling autocorrect by setting the
autocorrectionType property to UITextAutocorrectionTypeNo. Here is an example of how to do this:
securityAnswer.autocorrectionType = UITextAutocorrectionTypeNo;
securityAnswer.secureTextEntry = YES;
HTTP Response Caching
To display a remote website, an iOS application often uses a UIWebView to render the HTML content. A
UIWebView object uses WebKit, the same rendering engine as MobileSafari, and just like MobileSafari a
UIWebView can cache server responses to the local filesystem depending on how the URL loading is
implemented.
You can find the cache data stored in the Cache.db database, located within the application's Library/Caches/
folder:
iPhone:# sqlite3 Cache.db
SQLite version 3.7.13
Enter ".help" for instructions
sqlite> .tables
cfurl_cache_blob_data cfurl_cache_response
cfurl_cache_receiver_data cfurl_cache_schema_version
sqlite>
Inside this database you find a number of tables that contain the response data and requested URL
(cfurl_cache_response), response headers (cfurl_cache_blob_data), and the response blob
(cfurl_cache_receiver_data); for example:
sqlite> select * from cfurl_cache_response limit 1;
1|0|-479790032|0|http://sa.bbc.co.uk/bbc/bbc/s?name=news.page&ns_m2=yes&ns_setsi
teck=546108443DC20193&ml_name=BBCBeacon_iOS&ml_version=3.5&app_name=news&ap
p_version=2.1.4&app_type=mobile-app&prod_name=news&
istats_visitor_id=c39770d71484042cfe5063f1c2bd2c93&ns__t=1415645252&
orientation=portrait&app_edition=news-ios-uk|2014-11-1018:47:35|
sqlite>
When sensitive content is returned in server responses, the possibility exists for it to be stored in the cache
database. During any iOS application assessment, you should include an inspection of the cache database in
your methodology to ensure that credentials or other sensitive content are not inadvertently cached.
Several strategies let you clear your application's cache or prevent it from caching at all, and the one that works
best for you will depend on your implementation. To clear your cache and remove all stored cached URL
responses you can use the following method:
[[NSURLCache sharedURLCache] removeAllCachedResponses];
While using NSURLConnection you can prevent caching on HTTPS responses using code similar to the following:
-(NSCachedURLResponse *)connection:(NSURLConnection *)connection
willCacheResponse:(NSCachedURLResponse *)cachedResponse
{
NSCachedURLResponse *newCachedResponse=cachedResponse;
if ([[[[cachedResponse response] URL] scheme] isEqual:@"https"]) {
newCachedResponse=nil;
}
return newCachedResponse;
}
Memory Corruption in iOS Applications
iOS applications are typically resistant to classic memory corruption issues such as buffer overflows if the
developers rely on Objective-C or Swift to perform memory allocations because fixed sizes for buffers can't be
specified. However, C can be intermingled with iOS apps, and seeing the use of external libraries or
performance-dependent code, such as cryptography developed in C, is not uncommon. These approaches can
give rise to the traditional memory corruption vulnerabilities. However, exploitation is no small task and subject
to the device's built-in protection mechanisms, so other vulnerabilities are needed by someone trying to bypass
these protection mechanisms. However, a small number of memory corruption issues have transcended into
Objective-C and Swift, as detailed in the following sections.
Format String Vulnerabilities
Format string vulnerabilities form a class of memory corruption bugs that arise through the improper use of
Objective-C or Swift methods that accept a format specifier. Vulnerable methods include but are not limited to
the following:
NSLog
[NSString stringWithFormat]
[NSString stringByAppendingFormat]
[NSString initWithFormat]
[NSMutableString appendFormat]
[NSAlert alertWithMessageText]
[NSAlert informativeTextWithFormat]
[NSException format]
[NSMutableString appendFormat]
[NSPredicate predicateWithFormat]
Format string vulnerabilities arise when an attacker is able to provide the format specifier in part or as a whole
to the relevant method. For example, consider the following:
NSString *myURL=@"http://10.0.2.1/test";
NSURLRequest *theRequest = [NSURLRequest requestWithURL:[NSURL \
URLWithString:myURL]];
NSURLResponse *resp = nil;
NSError *err = nil;
NSData *response = [NSURLConnection sendSynchronousRequest: \
theRequest returningResponse:&resp error: &err];
NSString * theString = [[NSString alloc] initWithData:response \
encoding:NSASCIIStringEncoding];
NSLog(theString);
In this example a request is made to a web server running on 10.0.2.1; the response is then stored in a NSData
object, converted to an NSString, and logged using NSLog. In the documented usage of the NSLog function, NSLog
is a wrapper for NSLogv and args is a variable number of arguments, as shown here:
void NSLogv (
NSString *format,
va_list args
);
However, in this instance the developer has supplied a single argument, allowing the attacker to specify the type
of parameter that would be logged.
If you run the previous example in a debugger, you can see how the format string vulnerability can be triggered
using a simple HTTP web server response:
bash-3.2# nc -lvp 80
listening on [any] 80 . . .
10.0.2.2: inverse host lookup failed: Unknown host
connect to [10.0.2.1] from (UNKNOWN) [10.0.2.2] 52141
GET /test HTTP/1.1
Host: 10.0.2.1
User-Agent: fmtstrtest (unknown version) CFNetwork/548.0.4 Darwin/11.0.0
Accept: */*
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Connection: keep-alive
HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 16
aaaa%x%x%x%x%x%x
The HTTP response body is logged to NSLog and triggers the format string vulnerability, causing stack memory
to be dumped to the console log, as shown here:
(gdb) r
Starting program: /private/var/root/fmtstrtest
2014-08-12 09:10:29.103 fmtstrtst[8008:303]
aaaa124a600782fe5b84411f0b00
Program exited normally.
(gdb)
To exploit traditional format string vulnerabilities an attacker can use the %n format specifier, which allows him
to write to an arbitrary memory address read from the stack. However, this format specifier is not available in
Objective-C or Swift. Instead, iOS format string vulnerabilities can be exploited using the %@ specifier that
defines an object. Consequently, this may allow an arbitrary function pointer to be called.
Consider the following example that simply passes the value from argv[1] to NSLog:
int main(int argc, const char* argv[])
{
NSAutoreleasePool *pool =[[NSAutoreleasePool alloc] init];
NSString *n = [[NSString alloc] initWithCString:argv[1]];