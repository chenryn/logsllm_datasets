additionalinformation:
• detailsabouttheairportofdeparture
departure_airport,departure_airport_name,
departure_city,
• detailsabouttheairportofarrival
arrival_airport,arrival_airport_name,
arrival_city,
• localdeparturetime
scheduled_departure_local,actual_departure_local,
• localarrivaltime
scheduled_arrival_local,actual_arrival_local,
• flightduration
scheduled_duration,actual_duration.
RoutesView 67
v
Theflightstablecontainssomeredundancies,whichyou
canusetogetrouteinformationthatdoesnotdependon
theexactflightdates(flightnumber,airportsofdeparture
anddestination,aircraftmodel).
Thisinformationconstitutestheroutesview. Besides,this
viewshowsthedays_of_weekarrayrepresentingdaysofthe
weekonwhichflightsareperformed,andtheplannedflight
duration.
The“now”Function
Thedemodatabasecontainsa“snapshot”ofdata,similartoa
backupcopyofarealsystemcapturedatsomepointintime.
Forexample, ifaflighthastheDepartedstatus, itmeans
thattheaircraftwasairborneatthetimethebackupcopy
wastaken.
The“snapshot”timeissavedinthebookings.nowfunction.
You can use this function in demo queries for cases that
wouldrequirethenowfunctioninarealdatabase.
Besides,thereturnvalueofthisfunctiondeterminesthever-
sionofthedemodatabase. Thelatestversionavailableat
thetimeofthispublicationisofAugust15,2017.
68 Installation
v
InstallationfromtheWebsite
Thedemodatabaseisavailableinthreeflavors,whichdiffer
onlyinthedatasize:
• edu.postgrespro.com/demo-small-en.zip
Asmalldatabasewithflightdataforonemonth(21MB,
DBsizeis280MB).
• edu.postgrespro.com/demo-medium-en.zip
A medium database with flight data for three months
(62MB,DBsizeis702MB).
• edu.postgrespro.com/demo-big-en.zip
Alargedatabasewithflightdataforoneyear
(232MB,DBsizeis2638MB).
Thesmalldatabaseisgoodforwritingqueries,anditwill
nottakeupmuchdiskspace.Butifyouwouldlikedealwith
queryoptimizationspecifics,choosethelargedatabaseto
gain betterunderstanding ofquery behavior onlarge vol-
umesofdata.
Thefilescontainalogicalbackupcopyofthedemodatabase
createdwiththepg_dumputility. Notethatifthedatabase
nameddemoalreadyexists,itwillbedeletedandrecreated
asitisrestoredfromthebackupcopy.Theownerofthedemo
databasewillbethedatabaseuserwhorunsthescript.
ToinstallthedemodatabaseonLinux,switchtothepost-
gresuseranddownloadthecorrespondingfile.Forexample,
toinstallthesmalldatabase,dothefollowing:
$ sudo su - postgres
$ wget https://edu.postgrespro.com/demo-small-en.zip 69
v
Thenrunthefollowingcommand:
$ zcat demo-small-en.zip | psql
On Windows, download the edu.postgrespro.com/demo-
small-en.zipfile,double-clickittoopenthearchive,andcopy
thedemo-small-en-20170815.sqlfileintotheC:\Program
Files\PostgreSQL\12directory.
ThepgAdminapplication(describedonp.109)doesnotallow
torestorethedatabasefromsuchabackup. Soyoushould
startpsql(byclickingthe“SQLShell(psql)”shortcut)andrun
thefollowingcommand:
postgres# \i demo-small-en-20170815.sql
Ifthefileisnotfound,checkthe“Startin”propertyofthe
shortcut;thefilemustbelocatedinthisdirectory.
SampleQueries
ACoupleofWordsabouttheSchema
Oncetheinstallationcompletes,launchpsqlandconnectto
thedemodatabase:
postgres=# \c demo
You are now connected to database "demo" as user
"postgres".
70 Alltheentitiesweareinterestedinarestoredinthebook-
v ingsschema.Whenyouareconnectedtothedatabase,this
schemaisusedautomatically,sothereisnoneedtospecify
itexplicitly:
demo=# SELECT * FROM aircrafts;
aircraft_code | model | range
---------------+---------------------+-------
773 | Boeing 777-300 | 11100
763 | Boeing 767-300 | 7900
SU9 | Sukhoi Superjet-100 | 3000
320 | Airbus A320-200 | 5700
321 | Airbus A321-200 | 5600
319 | Airbus A319-100 | 6700
733 | Boeing 737-300 | 4200
CN1 | Cessna 208 Caravan | 1200
CR2 | Bombardier CRJ-200 | 2700
(9 rows)
However, you have to specify the schema for the book-
ings.nowfunction,todifferentiateitfromthestandardnow
function:
demo=# SELECT bookings.now();
now
------------------------
2017-08-15 18:00:00+03
(1 row)
Cities and airports can be selected with the following
query:
demo=# SELECT airport_code, city
FROM airports LIMIT 3;
airport_code | city 71
--------------+--------------------------
v
YKS | Yakutsk
MJZ | Mirnyj
KHV | Khabarovsk
(3 rows)
The content ofthe database isprovided in English andin
Russian.Youcanswitchbetweentheselanguagesbysetting
thebookings.langparameterto“en”or“ru,” respectively.
Bydefault,theEnglishlanguageisselected.Onthesession
level,thebookings.langparametercanbesetasfollows:
demo=# SET bookings.lang = ru;
Ifyouwouldliketodefinethissettingglobally,runthefol-
lowingcommand:
demo=# ALTER DATABASE demo SET bookings.lang = ru;
ALTER DATABASE
Thissettingappliestonewsessionsonly,soyouhavetore-
connecttothedatabase.
demo=# \c
You are now connected to database "demo" as user
"postgres".
demo=# SELECT airport_code, city
FROM airports LIMIT 3;
airport_code | city
--------------+--------------------------
YKS | Якутск
MJZ | Мирный
KHV | Хабаровск
(3 rows)
72 Tounderstandhowitworks,takealookattheaircraftsor
v airportsdefinitionusingthe\d+psqlcommand.
Formoreinformationaboutschemamanagement,see
postgrespro.com/doc/ddl-schemas.html.
Fordetailsonsettingconfigurationparameters,see
postgrespro.com/doc/config-setting.html.
SimpleQueries
Belowwe’llprovideseveralsampleproblemsbasedonthe
demodatabaseschema.Mostofthemarefollowedbyaso-
lution,whiletherestyoucansolveonyourown.
Problem. Who traveled from Moscow (SVO) to Novosi-
birsk(OVB)onseat1Ayesterday,andwhenwastheticket
booked?
Solution. “The day before yesterday” is counted from the
booking.nowvalue,notfromthecurrentdate.
SELECT t.passenger_name,
b.book_date
FROM bookings b
JOIN tickets t
ON t.book_ref = b.book_ref
JOIN boarding_passes bp
ON bp.ticket_no = t.ticket_no
JOIN flights f
ON f.flight_id = bp.flight_id
WHERE f.departure_airport = 'SVO'
AND f.arrival_airport = 'OVB'
AND f.scheduled_departure::date =
bookings.now()::date - INTERVAL '2 day'
AND bp.seat_no = '1A';
Problem. HowmanyseatsremainedfreeonflightPG0404
yesterday?
Solution.Thereareseveralapproachestosolvingthisprob- 73
lem. ThefirstoneusestheNOTEXISTSclausetofindthe v
seatswithoutboardingpasses:
SELECT count(*)
FROM flights f
JOIN seats s
ON s.aircraft_code = f.aircraft_code
WHERE f.flight_no = 'PG0404'
AND f.scheduled_departure::date =
bookings.now()::date - INTERVAL '1 day'
AND NOT EXISTS (
SELECT NULL
FROM boarding_passes bp
WHERE bp.flight_id = f.flight_id
AND bp.seat_no = s.seat_no
);
Thesecondapproachusestheoperationofsetsubtraction:
SELECT count(*)
FROM ( SELECT s.seat_no
FROM seats s
WHERE s.aircraft_code = (
SELECT aircraft_code
FROM flights
WHERE flight_no = 'PG0404'
AND scheduled_departure::date =
bookings.now()::date - INTERVAL '1 day'
)
EXCEPT
SELECT bp.seat_no
FROM boarding_passes bp
WHERE bp.flight_id = (
SELECT flight_id
FROM flights
WHERE flight_no = 'PG0404'
AND scheduled_departure::date =
bookings.now()::date - INTERVAL '1 day'
)
) t;
74 The choice largely depends on your personal preferences.
v Youonlyhavetotakeintoaccountthatqueryexecutionwill
differ,soifperformanceisimportant,itmakessensetotry
bothapproaches.
Problem.Whichflightshadthelongestdelays?Printthelist
often“leaders.”
Solution. Thequeryonlyneedstoincludethealreadyde-
partedflights:
SELECT f.flight_no,
f.scheduled_departure,
f.actual_departure,
f.actual_departure - f.scheduled_departure
AS delay
FROM flights f
WHERE f.actual_departure IS NOT NULL
ORDER BY f.actual_departure - f.scheduled_departure
DESC
LIMIT 10;
You can define the same condition using the status col-
umnbylistingalltheapplicablestatuses. Oryoucanskip
theWHEREconditionaltogetherbyspecifyingtheDESCNULLS
LASTsortingorder,sothatundefinedvaluesarereturnedat
theendoftheselection.
AggregateFunctions
Problem. Whatistheshortestflightdurationforeachpos-
sibleflightfromMoscowtoSt.Petersburg, andhowmany
timeswastheflightdelayedformorethananhour?
Solution. Tosolvethisproblem,itisconvenienttousethe
availableflights_vviewinsteadofdealingwithtablejoins.
Youneedtotakeintoaccountonlythoseflightsthathave 75
alreadyarrived. v
SELECT f.flight_no,
f.scheduled_duration,
min(f.actual_duration),
max(f.actual_duration),
sum(CASE
WHEN f.actual_departure >
f.scheduled_departure +
INTERVAL '1 hour'
THEN 1 ELSE 0
END) delays
FROM flights_v f
WHERE f.departure_city = 'Moscow'
AND f.arrival_city = 'St. Petersburg'
AND f.status = 'Arrived'
GROUP BY f.flight_no,
f.scheduled_duration;
Problem.Findthemostdisciplinedpassengerswhochecked
infirstforalltheirflights.Takeintoaccountonlythosepas-
sengerswhotookatleasttwoflights.
Solution.Usethefactthatboardingpassnumbersareissued
inthecheck-inorder.
SELECT t.passenger_name,
t.ticket_no
FROM tickets t
JOIN boarding_passes bp
ON bp.ticket_no = t.ticket_no
GROUP BY t.passenger_name,
t.ticket_no
HAVING max(bp.boarding_no) = 1
AND count(*) > 1;
76 Problem. Howmanypeoplecanbeincludedintoasingle
v bookingaccordingtotheavailabledata?
Solution.First,let’scountthenumberofpassengersineach
booking,andthenthenumberofbookingsforeachnumber
ofpassengers.
SELECT tt.cnt,
count(*)
FROM (
SELECT t.book_ref,
count(*) cnt
FROM tickets t
GROUP BY t.book_ref
) tt
GROUP BY tt.cnt
ORDER BY tt.cnt;
WindowFunctions
Problem.Foreachticket,displayalltheincludedflightseg-
ments,togetherwithconnectiontime.Limittheresulttothe
ticketsbookedaweekago.
Solution.Usewindowfunctionstoavoidaccessingthesame
datatwice.
Inthequeryresultsprovidedbelow,wecanseethatthetime
cushionbetweenflightsisseveraldaysinsomecases.Asa
rule,theseareround-triptickets,thatis,weseethetimeof
thestayinthepointofdestination,notthetimebetweencon-
nectingflights.Usingthesolutionforoneoftheproblemsin
the“Arrays”section,youcantakethisfactintoaccountwhen
buildingthequery.
SELECT tf.ticket_no, 77
f.departure_airport,
v
f.arrival_airport,
f.scheduled_arrival,
lead(f.scheduled_departure) OVER w
AS next_departure,
lead(f.scheduled_departure) OVER w -
f.scheduled_arrival AS gap
FROM bookings b
JOIN tickets t
ON t.book_ref = b.book_ref
JOIN ticket_flights tf
ON tf.ticket_no = t.ticket_no
JOIN flights f
ON tf.flight_id = f.flight_id
WHERE b.book_date =
bookings.now()::date - INTERVAL '7 day'
WINDOW w AS (PARTITION BY tf.ticket_no
ORDER BY f.scheduled_departure);
Problem. Whichcombinationsoffirstandlastnamesoccur
mostoften? Whatistheratioofthepassengerswithsuch
namestothetotalnumberofpassengers?
Solution. Awindowfunctionisusedtocalculatethetotal
numberofpassengers.
SELECT passenger_name,
round( 100.0 * cnt / sum(cnt) OVER (), 2)
AS percent
FROM (
SELECT passenger_name,
count(*) cnt
FROM tickets
GROUP BY passenger_name
) t
ORDER BY percent DESC;
78 Problem.Solvethepreviousproblemforfirstnamesandlast
v namesseparately.
Solution.Consideraqueryforfirstnames:
WITH p AS (
SELECT left(passenger_name,
position(' ' IN passenger_name))
AS passenger_name
FROM tickets
)
SELECT passenger_name,
round( 100.0 * cnt / sum(cnt) OVER (), 2)
AS percent
FROM (
SELECT passenger_name,
count(*) cnt
FROM p
GROUP BY passenger_name
) t
ORDER BY percent DESC;
Conclusion:donotuseasingletextfieldfordifferentvalues
ifyouaregoingtousethemseparately;inscientificterms,it
iscalled“firstnormalform.”
Arrays
Problem.Thereisnoindicationwhethertheticketisone-way
orround-trip. However,youcanfigureitoutbycomparing
thefirstpointofdeparturewiththelastpointofdestination.
Displayairportsofdepartureanddestinationforeachticket,
ignoringconnections,anddecidewhetherit’saround-trip
ticket.
Solution.Oneoftheeasiestsolutionsistoworkwithanarray 79
ofairportsconvertedfromthelistofairportsintheitinerary v
usingthearray_aggaggregatefunction.
Weselectthemiddleelementofthearrayastheairportof
destination,assumingthattheoutboundandinboundways
havethesamenumberofstops.
WITH t AS (
SELECT ticket_no,
a,
a[1] departure,
a[cardinality(a)] last_arrival,
a[cardinality(a)/2+1] middle
FROM (
SELECT t.ticket_no,
array_agg( f.departure_airport
ORDER BY f.scheduled_departure) ||
(array_agg( f.arrival_airport
ORDER BY f.scheduled_departure DESC)
)[1] AS a
FROM tickets t
JOIN ticket_flights tf
ON tf.ticket_no = t.ticket_no
JOIN flights f
ON f.flight_id = tf.flight_id
GROUP BY t.ticket_no
) t
)
SELECT t.ticket_no,
t.a,
t.departure,
CASE
WHEN t.departure = t.last_arrival
THEN t.middle
ELSE t.last_arrival
END arrival,
(t.departure = t.last_arrival) return_ticket
FROM t;