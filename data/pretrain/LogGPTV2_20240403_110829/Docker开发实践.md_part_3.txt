### 1.1.3 容器与虚拟机

Docker 是一种容器技术，而容器是一种轻量级的虚拟化技术。相比之下，虚拟机则是一种更为重量级的虚拟化技术。提及虚拟机，大家可能都比较熟悉，如 VMware、VirtualBox 和 Virtual PC 等产品早已深入人心。虚拟机基于硬件虚拟化，通过指令级别的虚拟化来完全模拟一套物理主机，包括 CPU、内存、磁盘和网卡等硬件设备。用户可以在虚拟机中安装各种操作系统（如 Windows、Linux 或 macOS），并且操作体验与真实物理机无异。

如图 1-6a 所示，用户可以在一台物理主机上安装多个虚拟机实例，每个实例都包含完整的硬件虚拟层、操作系统、公共库和应用程序。然而，这种做法不仅消耗大量资源，管理起来也相对复杂。随着新的需求出现，更轻量级的技术——容器应运而生。

容器是一种基于操作系统的虚拟化技术，运行在宿主操作系统之上的用户空间。所有容器共享同一个系统内核，甚至是公共库。容器引擎提供进程级别的隔离，使得每个容器仿佛运行在独立的系统上，同时又能共享底层资源（如图 1-6b 所示）。相比虚拟机，容器更加轻量、快速且易于管理。除了 Docker，常见的容器技术还包括 Solaris Zones、BSD Jails、OpenVZ 和 LXC 等。

#### 图 1-6 虚拟机和 Docker 容器的对比

为了详细对比虚拟机和容器，我们总结了二者的异同点，见表 1-1。

| 特性       | 容器                                           | 虚拟机                                         |
|------------|------------------------------------------------|------------------------------------------------|
| **相同点** | 都可在不同主机之间迁移                         | 都可在不同主机之间迁移                         |
|            | 都具备 root 权限                               | 都具备 root 权限                               |
|            | 都可以远程控制                                 | 都可以远程控制                                 |
|            | 都有备份、回滚操作                             | 都有备份、回滚操作                             |
| **操作系统** | 在性能上有优势，能够轻易地同时运行多个操作系统 | 可以安装任何系统，但性能不及容器               |
| **原理**   | 与宿主主机共享内核，所有容器运行在容器引擎之上 | 每个虚拟机建立在虚拟的硬件之上，提供指令级虚拟 |
| **优点**   | 更为高效、集中。一个硬件节点可以运行数百个容器 | 对操作系统具有绝对权限，对系统版本和升级有完全管理权限 |
|            | QoS 尽量满足，但不保证一定满足                 | 具有一整套资源：CPU、RAM 和磁盘，QoS 有保证    |
| **资源管理** | 弹性的资源分配：资源可以在不停止容器的情况下添加 | 虚拟机需要重启才能处理新加入的资源             |
| **远程管理** | 通过 shell 或远程桌面进行，前提是容器内的操作系统已启动 | 远程控制由虚拟化平台提供，可以在虚拟机启动前连接 |
| **缺点**   | 对内核没有控制权限，只有容器提供者具备升级权限 | 每台虚拟机负载更大，耗费更多资源，用户需全权维护 |
|            | 几乎不能实现不同的操作系统混合运行             | 一台物理机上能运行的虚拟机数量有限             |
| **配置**   | 快速，秒级即可准备好                           | 配置时间长，从几分钟到几小时                   |
| **启动时间** | 秒级                                           | 分钟级                                         |
| **硬盘使用** | MB                                             | GB                                             |
| **性能**   | 接近原生态                                     | 弱于原生态                                     |
| **系统支持量** | 单机支持上千个容器                             | 一般不多于几十个                               |

### 1.1.4 Docker 与容器

容器和虚拟机各有优缺点，容器并不是虚拟机的替代品，而是根据不同的需求各有所长。容器相对于虚拟机的优势在于更高的效率、更低的资源占用和更便捷的管理。当部署的系统都是同一系列的操作系统时，这种性能和便捷性尤为明显。然而，容器本身仍存在一些问题，如灵活性、安全性和配置共享等方面的不足。

以 Docker 早期基于的 LXC 容器为例，我们可以看到 Docker 对容器进行了多项改进和优化，其中许多特性是 LXC 所不具备的：

1. **跨平台可移植性**：Docker 定义了一种统一标准的打包格式，将应用及其依赖打包成单个镜像，该镜像可以在任何支持 Docker 的机器间便捷传输，并且在不同平台上保持一致的运行环境。
2. **面向应用**：Docker 旨在优化应用部署，而 LXC 则面向机器。Docker 的设计理念体现在其 API、用户接口和文档等方面，使其更简单易用。
3. **版本控制**：Docker 的版本控制系统类似于 Git，可以跟踪容器的版本信息，查看版本差异，提交和回滚版本等。
4. **组件复用**：Docker 容器采用组件式构建，可以利用基础镜像构建更多的应用容器。例如，可以准备一个 Python 运行环境作为基础镜像，然后在此基础上构建不同的 Web 应用。
5. **共享性**：Docker 拥有一个公共的注册服务器，开发者可以上传和共享镜像。这些镜像涵盖各个应用领域，用户可以通过这些共享镜像进一步定制自己的镜像。
6. **工具生态系统**：Docker 提供了丰富的 API 和工具生态系统，支持自动化创建和部署容器。越来越多的工具加入了 Docker 生态圈，扩展了其能力。

### 1.1.5 Docker 的应用场景

Docker 作为一种改进后的容器技术，具有广泛的应用场景：

1. **加速本地开发**：通过 Docker 可以快速搭建开发和运行环境，并将其直接传递给测试和生产部署。
2. **自动打包和部署应用**：简化应用的打包和部署流程。
3. **创建轻量级 PaaS 环境**：构建私有的 PaaS 平台。
4. **自动化测试和持续集成/部署**：支持自动化测试和持续集成/部署流程。
5. **部署并扩展 Web 应用、数据库和后端服务器**：轻松部署和扩展各类服务。
6. **创建安全沙盒**：为应用提供隔离的安全环境。
7. **轻量级的桌面虚拟化**：在桌面上运行轻量级的虚拟化环境。

### 1.2 Docker 的组件

Docker 采用了 C/S 架构，客户端通过命令行和 API 与守护程序通信，守护程序提供 Docker 服务。Docker 包含三大核心组件：镜像、容器和库。

1. **镜像**：是一个只读的静态模板，保存着容器所需的环境和应用代码。镜像采用分层机制，每个镜像都是只读的，但可以通过联合文件系统附加写数据层。
2. **容器**：是一个运行时环境，是镜像的动态表现。用户可以在容器中运行所需的应用和服务，容器易于交互、传输和扩展。
3. **库**：Docker 使用注册服务器存储和共享用户的镜像。库是特定用户存储镜像的目录，可以是公开的或私有的。

### 1.3 Docker 的相关技术

Docker 利用容器技术实现了轻量级的虚拟化，确保隔离性的同时节省资源。理解 Docker 技术可以从以下四个方面探讨：

1. **隔离性**：Docker 采用 libcontainer 作为默认容器，通过内核命名空间（如 pid、net、ipc、mnt 和 uts）实现进程、网络、消息、文件系统和主机名的隔离。
2. **可度量性**：Docker 通过 cgroups 控制资源的度量和分配。
3. **移植性**：Docker 利用 AUFS 文件系统实现对容器的快速更新。AUFS 支持将不同目录挂载到同一个虚拟文件系统下，支持增量修改，提高了存储效率和部署速度。
4. **安全性**：容器的安全性涉及多个方面，包括容器内部之间的安全性、容器与宿主主机之间的安全性。通过命名空间和 cgroups 实现隔离和资源控制，内核能力机制防止非法入侵。

### 1.4 Docker 的安装

Docker 的安装非常简单，目前支持所有主流 Linux 发行版，如 Ubuntu、RHEL 和 Debian。通过 Boot2Docker 工具，还可以在 macOS 和 Windows 上运行 Docker。

#### 安装限制
- 必须在 64 位机器上运行，支持 x86_64 和 AMD64 架构，暂不支持 32 位系统。
- Linux 内核必须是 3.8 或更高版本，支持 Device Mapper、AUFS、VFS 和 btrfs 等存储格式。
- 内核必须支持 cgroups 和命名空间。

#### Ubuntu 下的安装

Docker 支持以下版本的 Ubuntu 系统：Ubuntu Trusty 14.04、Ubuntu Precise 12.04、Ubuntu Raring 13.04 和 Saucy 13.10。这里以 Ubuntu Trusty 14.04 (LTS) (64 位) 为例进行介绍。

```bash
$ sudo apt-get update
$ sudo apt-get install docker.io
```

如果想安装最新版本的 Docker，请确认 apt 是否支持 HTTPS，如果不支持，则需要安装 `apt-transport-https`：

```bash
$ sudo apt-get update
$ sudo apt-get install apt-transport-https
```

然后将 Docker 库的公钥加入到本地 apt 中：

```bash
$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
```

再将安装源加入到 apt 源中，并更新和安装：

```bash
$ sudo sh -c "echo deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list"
$ sudo apt-get update
$ sudo apt-get install lxc-docker
```

验证 Docker 是否安装成功：

```bash
$ sudo docker info
```

#### Red Hat 下的安装

红帽系列主要有红帽企业版 Linux 6、红帽企业版 Linux 7 和 Fedora。

##### 红帽企业版 Linux 7 (RHEL7)

RHEL7 默认已经包含了 Docker，位于附加频道中。安装 Docker 时，首先启用附加频道：

```bash
$ sudo subscription-manager repos --enable=rhel-7-server-extras-rpms
```

然后进行安装：

```bash
$ sudo yum install docker
```

希望这些内容对你有所帮助！