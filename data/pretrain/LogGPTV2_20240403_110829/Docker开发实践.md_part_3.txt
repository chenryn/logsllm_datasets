1.1.3 容器与虚拟机
2
Docker是容器的一种，容器是一种轻量级的虚拟技术，和容器对应的更为重量级的虚拟技术
3
是虚拟机。提及虚拟机，大家肯定都不陌生，例如VMware、VirtualBox、Virtual PC这些耳熟能
详的产品早已深入人心。虚拟机是一种基于硬件的虚拟技术，它采用指令级的虚拟，完全虚拟一
4
整套物理主机，包含CPU、内存、磁盘、网卡等硬件设备，给用户呈现的就是一个物理主机的特
性。用户可以在虚拟机里面安装各种各样的操作系统，例如Windows、Linux或者是OS X，一切
5
操作都看起来和真机一样。如图1-6a所示，用户可以在一台主机上安装多个虚拟机，每一个实例
都完整地包含硬件虚拟层、操作系统、公共库和应用等部件。然而，有时候这并不是我们想要的，
6
因为这样太耗费资源，而且管理也并不方便。还是那句话，当新的需求出现后，自然会驱动新的
技术出现，于是后来出现了一种更为轻量级的虚拟技术——容器。容器是一种基于操作系统的虚
7
拟技术，它运行在操作系统之上的用户空间，所有的容器都共用一个系统内核，甚至是公共库，
容器引擎提供进程级别的隔离，让每个容器都像运行在单独的系统之上，但又能够共享很多底层
9
资源，如图1-6b所示。比起虚拟机，容器更为轻量、快速、易于管理。除了Docker，常见的容器
还有Solaris Zones、BSD jails、OpenVZ和LXC等。
8
10
10
11
13
14
图1-6 虚拟机和Docker容器的对比
为了更详细地对比虚拟机和容器，我们把二者的异同点列在表1-1中。 15
表1-1 容器与虚拟机的对比
16
容 器 虚拟机
相同点 ❑ 都可在不同的主机之间迁移
17
❑ 都具备root权限
❑ 都可以远程控制
18
❑ 都有备份、回滚操作
8 第1章 Docker简介
（续）
容 器 虚拟机
操作系统 在性能上有优势，能够轻易地同时运行 可以安装任何系统，性能不及容器
多个操作系统
原理 和宿主主机共享内核，所有容器运行在 每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚
容器引擎之上，容器并不是一个完整的 拟，具备一个完整的操作系统
操作系统，所有的容器共享操作系统，
在进程级进行隔离
优点 更为高效、集中。一个硬件节点可以运 对操作系统具有绝对的权限，对系统版本和升级具有完全
行数以百计的容器，非常节省资源。QoS 管理权限。具有一整套的资源：CPU、RAM和磁盘。QoS
会尽量满足，但不保证一定满足。内核 是有保证的。每一个虚拟机像一个真实的物理机一样，可
由提供者升级，服务由服务提供者管理 以实现不同的操作系统同时运行在同一物理节点上
资源管理 弹性的资源分配：资源可以在没有关闭 虚拟机需要重启，虚拟机里面的操作系统需要处理新加入
容器的情况下添加，数据卷也无需重新 的资源。例如，添加一块磁盘，则需要重新分区等
分配大小（有些服务的容器需要重启）
远程管理 根据操作系统的不同，会通过shell或者远 远程控制由虚拟化平台提供，可以在虚拟机启动之前连接。
程桌面进行。前提是容器内的操作系统 所以可以安装系统
已经启动
缺点 对内核没有控制权限，只有容器的提供 每一台虚拟机具有更大的负载，耗费更多的资源，用户需
者具备升级权限。只有一个内核运行在 要全权维护和管理。一台物理机上能够运行的虚拟机也非
物理节点上，几乎不能实现不同的操作 常有限
系统混合。容器提供者一般仅提供少数
的几款操作系统
配置 快速，秒级即可准备好。由容器提供者 配置时间长，从几分钟到几个小时，具体取决于操作系统。
处理 需要自行安装操作系统
启动时间 秒级 分钟级
硬盘使用 MB GB
性能 接近原生态 弱于原生态
系统支持量 单机支持上千个容器 一般不多于几十个
1.1.4 Docker与容器
容器和虚拟机各有各的优缺点，容器也并不是虚拟机的替代品，只是二者在适应不同的需求
下各有优点。容器相对于虚拟机的优势在于效率更高，资源占用更小，管理更为便捷。在需要部
署的系统都是同一系列的操作系统时，这种性能和便捷性上的优势非常明显。然而就容器本身而
言，依然有很多问题需要解决，例如在灵活性、安全性以及配置共享方面都存在不足。我们以
Docker早期基于的LXC容器为例，说明Docker对容器进行的改进和优化，其中很多方面是LXC这
类容器所没有的新特性。
 跨平台的可移植性。Docker定义了一种统一标准的打包格式，将应用及其依赖打包进单
个的镜像中，该镜像可以在任何Docker可运行的机器之间便捷传输，并且在不同机器上，
Docker隔离了应用和平台的直接联系，对配置进行了抽象，使得在任何平台上应用的运
行环境都一样。LXC的配置却不是可移植的，它依赖于某台具体的机器，例如机器的网
1.1 Docker简介 9
络、存储、日志、磁盘等配置，同一配置在不同机器上并不能够通用，这极大地限制了 1
它的可移植性。
 面向应用。Docker是为优化应用部署而诞生的，LXC则是面向机器的，这是二者设计哲 2
学上的不同。Docker面向应用的哲学体现在API、用户接口以及文档等各个方面，Docker
都是为了更简单地做事。而LXC则更关注于使用更少的CPU、更少的RAM，成为一个更
3
轻量的机器。
 版本控制。Docker的版本控制和git工具非常类似，Docker可以跟踪一个容器的版本信息，
4
查看版本差异，提交和回滚版本等。所有的版本信息都将被记录，这样你可以清晰地看
到一个应用服务器的更改历史。
5
 组件复用。Docker容器以组件式搭建，你可以利用一个基础镜像构建更多的应用容器。
例如，你可以准备好一个Python的运行环境作为基础镜像，然后以该镜像为基础，构建不
6
同的Web应用。你可以配置一个postgresql基础镜像，作为未来的数据库基础组件。这些
配置可以手动处理，也可以自动化完成。
7
 共享性。Docker拥有一个公共的注册服务器。成千上万的开发者上传了他们的镜像，这
些镜像涵盖软件的各个应用领域，我们可以通过这些共享的镜像来进一步定制自己的镜
9
像。在这些开发者中，有一大批是官方组织提供的标准库，这些镜像安全、可靠，有持
续的维护和版本升级。而Docker的注册服务器本身也是一个开源项目，所以任何人都可
8
以下载源码后在自己的网络中部署自己的注册服务器，以供特殊用途。
 工具生态系统。Docker提供了API以供自动化创建和部署容器，而越来越多的工具加入到
10
Docker之中来扩展它的能力，例如PaaS部署工具Dokku、Deis、Flynn，集群管理工具
maestro、salt、mesos、openstack nova，可视化管理工具docker-ui、openstack horizon、shipyard，
10
配置管理工具chef、puppet，持续集成工具jenkins、strider、travis等。Docker已经形成了
自己的软件工具生态圈，目前正在高速发展。随着Docker生态圈越来成熟，Docker的能力
11
将会越来越强。
13
1.1.5 Docker的应用场景
Docker作为一款容器，并且比传统的容器具有那么多的改进和优点，那么我们可以拿它来做 14
些什么？以下是几种典型的应用场景。
15
 加速本地开发。通过Docker能够快速搭建好开发和运行环境，并且该环境可以直接传递
给测试和产品部署。
16
 自动打包和部署应用。
 创建轻量、私有的PaaS环境。
 自动化测试和持续集成/部署。 17
 部署并扩展Web应用、数据库和后端服务器。
18
 创建安全沙盒。
10 第1章 Docker简介
 轻量级的桌面虚拟化。
1.2 Docker 的组件
Docker采用的是C/S架构，具体如图1-7所示。Docker客户端，即Docker可执行程序，可以通
过命令行和API的形式与Docker守候程序进行通信，Docker守候程序提供Docker服务。
图1-7 Docker的C/S架构
Docker包含三大核心组件——镜像、容器和库。
 镜像：是一个只读的静态模板。它保存着容器需要的环境和应用的执行代码，可以把镜
像看成容器的代码，当代码运行起来后就成了容器。镜像采用分层机制，每个镜像都是
只读的，但是可以将写数据的层通过联合文件系统附加在原有的镜像之上。这种增量式
修改使得镜像非常容易存储、传输和更新。本书将会涉及镜像的获取和制作。
 容器：是一个运行时环境，它是一个镜像的运行状态，相对于静态的镜像而言。容器是
镜像执行的动态表现。用户可以在容器中运行所想要的程序和服务，而容器就像一个集
装箱，它并不关心你运行的到底是什么程序，所有应用的运行方式都一样——创建、开
始、停止、重启和销毁；容器也不在乎你在什么样的环境中运行它，可以在个人电脑、
虚拟机、云服务器、各种操作系统上运行。容器易于交互、便于传输、易移植、易扩展，
非常适合进行软件开发、软件测试以及软件产品的部署。
 库：Docker采用注册服务器来存储和共享用户的镜像，库是某个特定用户存储镜像的目
录。通常，一个用户可以建立多个库来保存自己的镜像。从这里可以看出库是注册服务
器的一部分，一个个的库组成了一个注册服务器。注册服务器有公共的和私有的，其中
公共的如Docker官方的Docker Hub。注册一个账号，你就可以在里面建立自己的镜像库。
镜像库可以选择开放，也可以选择私有，仅有被允许的组成员才可以访问。
1.3 Docker的相关技术 11
图1-8是一个通过Docker进行应用开发和部署的案例流程，通过这张图可以很好地理解这3个
1
概念。首先，在开发主机上构建容器A，构建方法既可以是手工构建，也可以通过Dockerfile自动
构建。容器A的构建必须基于一个已有的基础镜像，并在它之上执行一系列操作。镜像A是容器
2
的静态形式，容器是镜像的运行态。将容器A保存为镜像A，然后推送到Docker库中进行共享。
这时候，在产品部署方面，另一端则可以通过在Docker库中搜索来获得镜像A，并将其拉取到本
3
地，最后在产品集群中运行容器A，其中产品集群中一般会同时运行很多容器，例如容器B和容
器C等，而这些容器互不影响，相互隔离。
4
5
6
7
9
8
10
图1-8 使用Docker进行开发和部署的流程
10
1.3 Docker 的相关技术
11
Docker是利用容器来实现的一种轻量级的虚拟技术，从而在保证隔离性的同时达到节省资源
的目的。Docker的可移植性也让其能够无缝地运行在各种平台上，方便改写和传输。理解Docker 13
这种虚拟技术，可以从其隔离性、可度量性、移动性和安全性这4个方面来探讨。
14
 隔离性：Docker采用libcontainer作为默认容器，取代了之前的LXC。libcontainer的隔离性
主要是内核的命名空间来实现的，具体有pid、net、ipc、mnt和uts等命名空间，它们将
15
容器的进程、网络、消息、文件系统和主机名进行隔离。
 可度量性：在虚拟机中，由于虚拟好了CPU、内存等硬件要素，每个用户根据自己的需
16
求选择硬件的配置，所用的资源可以量化计算。在Docker中，主要通过cgroups（控制组）
来控制资源的度量和分配。
 移植性：在虚拟机中，为了更好地复制、重建和移动虚拟机，采用了镜像和快照的方法。 17
而像LXC这类容器，其迁移性非常差，每部署一台计算机，都可能需要重新配置，所以
18
不能实现快速的大规模部署和更新。Docker利用AUFS来实现对容器的快速更新。AUFS
12 第1章 Docker简介
是一种支持将不同目录挂载到同一个虚拟文件系统下的文件系统，支持对每个目录的读
写权限管理。另外，AUFS具有层的概念，每一次修改都是在已有的只写层进行增量修改，
修改内容将形成新的文件层，而不影响原有的层。采用AUFS作为Docker容器的文件系统，
能够提供如下好处。
 节省存储空间：多个容器可以共享同一个基础镜像存储。
 快速部署：当要部署多个来自同一个基础镜像的容器时，避免了多次复制操作。
 升级方便：升级一个基础镜像即可影像到所有基于它的容器。
 增量修改：可以在不改变基础镜像的同时修改其目录的文件，所有的更改都发生在最
上层的写操作层，这大大增加了基础镜像的可共享内容。
 安全性：容器的安全性是一个比较大的话题，因为任何一个环节都可以和安全相关。这
可以分为容器内部之间的安全性，容器与宿主主机之间的安全性，前者主要通过命名空
间和cgroups来实现。通过命名空间的隔离，可以保证容器中运行的进程不被主机的进程
和其他容器影响；通过cgroups的审计和限制，保证容器对资源的管理和控制安全。内核
能力机制的控制则可以防止Docker非法入侵宿主主机。此外，还有一系列工具的组合来
保证Docker的安全性，例如GRSEC、TOMOYO和SELinux等。
1.4 Docker 的安装
Docker的安装非常容易。目前，Docker支持所有的Linux系列系统，如Ubuntu、RHEL、Debian
等。通过Boot2Docker虚拟工具，在OS X和Windows下也能够运行Docker。
但目前而言，Docker的运行环境也有限制，具体如下。
 必须是在64位机器上运行，并且目前仅支持x86_64和AMD64，32位系统暂时不支持。
 系统的Linux内核必须是3.8或者更新的，内核支持Device Mapper、AUFS、VFS、btrfs等
存储格式。
 内核必须支持cgroups和命名空间。
接下来，我们说明各个操作系统平台下Docker环境的安装。需要说明的是，本书从第2章开
始，如不特别说明，默认都是在Ubuntu Trusty 14.04(LTS)（64位）系统下进行的操作。
1.4.1 Ubuntu下的安装
Docker支持以下版本的Ubuntu系统：Ubuntu Trusty 14.04、Ubuntu Precise 12.04、Ubuntu Raring
13.04 和 Saucy 13.10。这里以Ubuntu Trusty 14.04(LTS)（64位）为例进行介绍。
Ubuntu Trusty的内核是3.13.0，在这个系统下安装时默认的Docker安装包是0.9.1。
首先，运行以下命令进行安装：
1.4 Docker的安装 13
$ sudo apt-get update
1
$ sudo apt-get install docker.io
然后重启伪终端即可生效。
2
如果想安装最新的Docker，首先你需要确认你的apt是否支持https，如果不支持，则需通过
如下命令进行安装：
3
$sudo apt-get update
$sudo apt-get install apt-transport-https 4
然后将Docker库的公钥加入到本地apt中：
5
$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80
--recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
再将安装源加入到apt源中，并更新和安装： 6
$ sudo sh -c "echo deb https://get.docker.com/ubuntu docker main\
7
> /etc/apt/sources.list.d/docker.list"
$ sudo apt-get update
$ sudo apt-get install lxc-docker
9
为了验证Docker是否安装成功，可以运行如下命令：
$ sudo docker info 8
1.4.2 Red Hat下的安装 10
红帽系列主要有红帽企业版 Linux 6、红帽企业版 Linux 7和Fedora。
10
1. 红帽企业版Linux 7（RHEL7）
红帽企业版Linux 7（RHEL7） 中已经默认加入了Docker，它位于附加频道中。安装Docker 11
时，首先要启用附加频道，相关命令如下：
13
$ sudo subscription-manager repos --enable=rhel-7-server-extras-rpms
然后进行安装，相关命令如下： 14