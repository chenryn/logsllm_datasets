| `workdir` | 相当于从 docker file`WORKDIR`开始，启动容器时要变成的目录。 |
正如您所看到的，插件配置非常灵活，它包含了一套完整的 Dockerfile 指令的等价物。让我们看看我们的`pom.xml`在适当的配置下会是什么样子。
完整的`pom.xml`。
如果您从一开始就关注我们的项目，完整的 Maven POM 如下所示:
```
      4.0.0
      pl.finsys
      rest-example
      0.1.0
        org.springframework.boot
        spring-boot-starter-
         parent
        1.5.2.RELEASE
          org.springframework.boot
          spring-boot-starter-web
          org.springframework.boot
          spring-boot-starter-data-
           jpa
          org.hibernate
          hibernate-validator
          org.hsqldb
          hsqldb
          runtime
          io.springfox
          springfox-swagger2
          2.6.1
          io.springfox
          springfox-swagger-ui
          2.5.0
          org.springframework.boot
          spring-boot-starter-
           test
          test
          org.springframework.boot
          spring-boot-starter-
           test
          test
          com.jayway.jsonpath
          json-path
          test
        1.8
            org.springframework.boot
            spring-boot-maven-
             plugin
            org.springframework.boot
            spring-boot-maven-
            plugin
            io.fabric8
            docker-maven-plugin
            0.20.1
                  rest-example:${project.version}
                  rest-example
                    openjdk:latest
                      artifact
                    java -jar maven/${project.name}-${project.version}.jar
                      Hello World!
          spring-releases
          https://repo.spring.io/libs-release
          spring-releases
          https://repo.spring.io/libs-release
```
# 塑造形象
要使用我们的 Spring Boot 工件构建 Docker 映像，请运行以下命令:
```
$ mvn clean package docker:build
```
`clean`告诉 Maven 删除`target`目录。Maven 将始终使用`package`命令编译您的类。用`docker:build`命令运行`package`命令非常重要。如果您尝试分两步运行这些程序，将会遇到错误。构建 Docker 映像时，您将在控制台中看到以下输出:
![](img/a3675a6a-22cb-42cd-a9d0-329f6caf2b42.png)
新映像的标识将显示在控制台输出中。如果你想知道自动生成的 Dockerfile 看起来如何，你会在你的项目中的`target/docker/rest-example/0.1.0/build`目录中找到它。第一次构建 Docker 映像时，由于所有图层都在下载中，因此需要更长的时间。但是由于层缓存，每次构建都会快很多。
# 创建和删除卷
如果没有管理卷的可能性，Fabric8 Maven Docker 插件就不可能是一个完整的解决方案。事实上，它提供了两种处理卷的方法:`docker:volume-create`和`docker:volume-remove`。您可能还记得[第 2 章](02.html)、*网络和持久存储*中，Docker 在处理卷及其驱动程序时使用了类似插件的架构。`fabric8`插件可以配置为将特定的卷驱动程序及其参数传递给 Docker 守护程序。考虑插件配置的以下片段:
```
    [...] 
    myVolume 
    local 
    tmpfs 
    tmpfs 
    size=100m,uid=1000 
    true 
```
在前面的示例中，我们使用本地文件系统驱动程序创建了一个命名卷。它可以在容器启动时安装，如`pom.xml`文件的``部分所述。
# 摘要
在本章中，我们了解了如何开始使用 Docker 容器和打包 Java 应用。我们可以使用`docker build`命令和`Dockerfile`手动完成，或者我们可以使用 Maven 来自动化事情。对于 Java 开发人员来说，Docker 有助于在干净的环境中隔离我们的应用。隔离很重要，因为它降低了我们使用的软件环境的复杂性。Fabric8 Maven Docker 插件是一个很好的工具，我们可以使用它来使用 Maven 自动构建我们的映像，尤其是在处理 Java 应用时。不再手工编写 Dockerfiles，我们只是使用大量选项配置插件，我们就完成了。此外，通过与 Maven 合作，我们可以轻松地将 Docker 构建合并到我们现有的开发流程中，例如使用 Jenkins 的持续交付。在[第 6 章](06.html)、*用 Java 应用运行容器*中，我们将详细介绍如何从容器中运行我们的 Java 应用。当然，我们也将为此使用 Maven。