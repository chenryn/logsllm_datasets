cient near duplicate detection in large web collections,” in ACM SIGIR
2008, Singapore, July 20-24, 2008, 2008, pp. 563–570.
J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow:
Extracting the keys to the intel {SGX} kingdom with transient out-of-
order execution,” in USENIX Security 2018, 2018, pp. 991–1008.
[54]
[55] V. Vo, S. Lai, X. Yuan, S. Sun, S. Nepal, and J. K. Liu, “Accelerating
forward and backward private searchable encryption using trusted
execution,” in ACNS (2), ser. Lecture Notes in Computer Science, vol.
12147. Springer, 2020, pp. 83–103.
17
[56] C. Xiao, W. Wang, X. Lin, J. X. Yu, and G. Wang, “Efﬁcient similarity
joins for near-duplicate detection,” ACM Trans. Database Syst., vol. 36,
no. 3, pp. 15:1–15:41, 2011.
[57] Y. Zhang, J. Katz, and C. Papamanthou, “All your queries are belong
to us: The power of ﬁle-injection attacks on searchable encryption,” in
USENIX Security 2016, Austin, TX, USA, August 10-12, 2016., 2016,
pp. 707–720.
APPENDIX A
PROOFS
SE,B(cid:48)
A. Proof of Lemma 2
Lemma 3. Suppose SE = (SE.Gen, SE.Enc, SE.Dec) is an
IND-CPA secure symmetric encryption scheme, then G3 and
G4 are computationally indistinguishable for all PPT adver-
sary A. That is, | Pr[Win4]−Pr[Win3]| ≤ 2h·AdvIND-CPA
(λ),
where B(cid:48) is a PPT adversary against the IND-CPA security.
Proof of Lemma 2: We prove this lemma by the standard
hybrid argument. To the end, we ﬁrst deﬁne a sequence of
games G3.0, G3.1, . . . , G3.h. Particularly, G3.(cid:96) for (cid:96) ∈ [0, h] is
identical to G3 except that the ﬁrst (cid:96) components of ct∗ (i.e.,
(ct∗
(cid:96) )) are the encryption of 0’s and the others are
the encryption of mγ. Clearly, it holds that G3,0 = G3 and
G3,h = G4. Next we argue that each two successive games
G3.(cid:96)−1 and G3.(cid:96) are computational indistinguishable for (cid:96) ∈
[h]. Note that the only difference between them lies in the (cid:96)-th
component ct∗
(cid:96) of ct∗, which is the encryption of mγ in G3.(cid:96)−1
while the encryption of 0’s in G3.(cid:96).
2, . . . , ct∗
1, ct∗
We assume for the sake of contradiction that there exists
an adversary A that can distinguish G3.(cid:96)−1 and G3.(cid:96) with non-
negligible advantage. Then we construct an efﬁcient algorithm
B(cid:48) to break the IND-CPA security of SE, as follows.
B(cid:48)(1λ)
runs A to
and
obtain
generates
msk = (sk, H, B) ← SRE.KGen(1λ, b, h), where
sk ← MF.Setup(1λ), H = {Hj}j∈[h] and B = 0b. Then it
computes the set of indices It∗ = {i∗
j = Hj(t∗)}j∈[h]
j : i∗
i ∈ It∗
corresponding to t∗,
there
for
indicating that
exists j ∈ [h] s.t. i = i∗
then randomly chooses
u1, . . . , u(cid:96)−1, u(cid:96)+1, . . . , uk from Y and sets the PRF values
{ski}i∈[b]\{i∗
j . B(cid:48)
(cid:96)} as follows:
t∗,
(cid:26) F (sk, i),
i ∈ [b] \ It∗
(cid:96)}
i ∈ It∗ \ {i∗
ski =
uj,
where ski∗
j
= uj for j ∈ [h] \ {(cid:96)}. Next, B(cid:48) uses them
along with sk to simulate all the following queries.
for each j ∈ [h], then checks if ij = i∗
component of ct according to the following cases:
For an encryption query (m, t), B(cid:48) computes ij = Hj(t)
(cid:96) and simulates the j-th
ij (cid:54)= i∗
(cid:96) : Computes ctj ← SE.Enc(skij , m) with the
value skij , which is set as above and known to B(cid:48).
ij = i∗
(cid:96) : Asks the SE challenger to create a corre-
sponding ciphertext ctj ← SE.Enc(ski∗
, m), where
is chosen randomly by the challenger and un-
ski∗
known to B(cid:48).
•
•
Finally, B(cid:48) returns ct = (ct1, ct2, . . . , cth) to A.
For a key-revocation query R, B(cid:48) simulates the response
(cid:96)
(cid:96)
skR in the same way as G3.
In the challenge phase, B(cid:48) receives two distinct messages
0 = mγ
m0, m1 from A and picks γ $←− {0, 1}. Then it sets m(cid:48)
and m(cid:48)
1 = 0|m|, and generates the challenge ciphertext as:
j ← SE.Enc(ski∗
j
, 0|m|).
which is guaranteed by the forward privacy of Σadd and the
obliviousness of deletions to server.
j
•
•
j ≤ (cid:96) − 1: Computes ct∗
= uj for j (cid:54)= (cid:96).
Recall that ski∗
0, m(cid:48)
j = (cid:96): Submits m(cid:48)
for a challenge ciphertext ct∗
where ski∗
the challenger.
j ≥ (cid:96) + 1: Computes ct∗
Finally B(cid:48) outputs ct∗ = (ct∗
1, ct∗
and B(cid:48) outputs δ(cid:48) = 1 if γ(cid:48) = γ.
•
(cid:96)
1 to the SE challenger and asks
, m(cid:48)
δ),
and δ ∈ {0, 1} are randomly chosen by
j ← SE.Enc(ski∗
(cid:96)
j ← SE.Enc(ski∗
2, . . . , ct∗
h).
j
, mγ).
Moreover, a list Ladd is initialized and used in this game. In
particular, the list Ladd contains the encryption of the inserted
indices for the subsequent search on w, their associated tags
and the insertion timestamps, which in fact corresponds to the
update history on w for the scheme Σadd and will be taken
as the input of the simulator Sadd. It can be seen that the
distinguishing advantage between G2 and G1 can be reduced
to the LF S-adaptive forward privacy of Σadd. Thus, there exists
a PPT adversary B2 such that | Pr[G2 = 1] − Pr[G1 = 1]| ≤
Adv
LF S
Σadd,Sadd,B2
Game G3: This game is identical to G2 except for gen-
erating the ciphertexts of indices of the deleted documents.
Namely, when encrypting the document
indices that were
inserted previously and deleted later with the SRE scheme,
we replace the indices by constant 0.
(λ).
Since the modiﬁcation above works only on the cipher-
texts with revoked tags, we can reduce the distinguishing
advantage between G3 and G2 to the IND-sREV-CPA security
of the SRE scheme. Notice that,
the selective security is
sufﬁcient for the application here, as the reduction algorithm
can obtain from UpHist(w) the revoked tags before simulating
the encryption of non-deleted indices and the revoked secret
key. Thus, there exists a reduction algorithm B3 such that
| Pr[G3 = 1] − Pr[G2 = 1]| ≤ AdvIND-sREV-CPA
(λ).
SRE,B3
Game G4: In this game, we modify the way of construct-
ing list Ladd and the way of updating the compressed data
structure D. Namely, we ﬁrst compute the leakage information
TimeDB and DelTime from the table UpHist, and then
base this information to construct Ladd and update D. This
has no inﬂuence to the distribution of G3, so we have that
Pr[G4 = 1] = Pr[G3 = 1].
Game G5: The tags in this game is generated in a different
way. Namely, we generate the tags on the ﬂy,
instead of
computing them from document/keyword pairs and storing
them in the table Tags. We can do it like this because it is
supposed that each document index was added/deleted at most
once during the updates. In this way, tags will not repeat and
we need not to store them for keeping consistence. Therefore,
it holds that Pr[G5 = 1] = Pr[G4 = 1].
Simulator. To build a simulator from G5, what remains
to do is to avoid explicitly using the keyword w to gener-
ate Tokens[w]. This can be done easily through replacing
w by min sp(w). Moreover, the construction of Ladd and
update of D can be properly simulated by taking the leakage
TimeDB(w) and DelTime(w) as the input of Search, and
there is no need for the simulator to keep track of the updates
any more. At this point, we can see that G5 can be efﬁciently
simulated by the simulator with the leakage function LBS, so
we get that Pr[G5 = 1] = Pr[IDEALΣA,S,LBS
(λ) = 1].
Finally, by combining all above we conclude that
advantage of any PPT adversary attacking our scheme Σ is
the
| Pr[REALΣA(λ) = 1] − Pr[IDEALΣA,S,LBS
≤ 2AdvPRFB1,F (λ) + Adv
LF S
Σadd,Sadd,B2
(λ) = 1]|
SRE,B3
(λ) + AdvIND-sREV-CPA
(λ).
At last, A outputs her guess γ(cid:48) ∈ {0, 1} when she halts,
We can see from the above that B(cid:48) perfectly simulates
G3.(cid:96)−1 when δ = 0 (i.e., m(cid:48)
0 = mγ) and G3.(cid:96) when δ = 1 (i.e.,
1 = 0|m|). Then we have Pr[δ(cid:48) = 1|δ = 0] = Pr[Win3.(cid:96)−1]
m(cid:48)
and Pr[δ(cid:48) = 1|δ = 1] = Pr[Win3.(cid:96)], so the advantage of B(cid:48) is
2 |Pr[δ(cid:48) = 1|δ = 1] − Pr[δ(cid:48) = 1|δ = 0]|
AdvIND-CPA
2 |Pr[Win3.(cid:96)] − Pr[Win3.(cid:96)−1]| .
(λ) = 1
= 1
SE,B(cid:48)
Further, we get that
| Pr[Win4] − Pr[Win3]| ≤ h(cid:80)
| Pr[Win3.(cid:96)] − Pr[Win3.(cid:96)−1]|
(cid:96)=1
≤ 2h · AdvIND-CPA
SE,B(cid:48)
(λ).
This completes the proof of Lemma 2.
B. Proof of Theorem 2
Theorem 3. The proposed SSE scheme Σ is LBS-adaptively
is an LF S-adaptively
Type-II-backward-private,
forward-private SSE scheme, SRE is an IND-sREV-CPA
secure compressed SRE scheme and F is a secure PRF,
where LF S is the leakage of Σadd as deﬁned in [7] and
LBS = (LSrch
BS (op, w, ind) =
op and LSrch
BS ,LU pdt
BS = (sp(w), TimeDB(w), DelTime(w)).
BS ) is deﬁned as LU pdt
if Σadd
Proof of Theorem 2: The proof proceeds with a sequence
of games. It starts with the real game and ends with a game
that can be efﬁciently simulated with the leakage LBS.
Game G0: This is the real SSE security game REALΣA(λ),
so we have that Pr[REALΣA(λ) = 1] = Pr[G0 = 1].
Game G1: In this game, we modify the way of evaluating
PRF F . Namely, each time a previously unseen keyword w
(resp., document/keyword pair (w, ind)) is used, we selects
a random output from the range space of F ,
instead of
computing F (Ks, w) (resp., FKt(w, ind)), and records it in
table Tokens (resp., Tags). Whenever F is recalled on the
same input w (resp., (w, ind)), the associated PRF value is
retrieved straightforwardly from Tokens (resp., Tags). We
claim that this changes the distribution of the adversary’s view
only negligibly. This is because the replacement of F (Ks,·)
(resp., F (Kt,·)) induces a distinguishing advantage equal to
that of PRF against an adversary making at most N calls to
F . Therefore, there exists an efﬁcient reduction algorithm B1
such that | Pr[G1 = 1] − Pr[G0 = 1]| ≤ 2AdvPRF
F,B1
(λ).
Game G2: We modify this game by replacing real calls
to the SSE scheme Σadd by calls to the associated simulator
Sadd. To do so, we use some bookkeeping to keep track of
all the Update queries as they come, rather than rely on the
server to store them, and postpone all addition and deletion
operations to the subsequent Search query. This can be done
only because the updates leak nothing about their contents,
18