### Summary of Applications Analyzed

The applications analyzed in this study are listed in Table 2. To avoid implicating specific software vendors, we will refer to the applications by category rather than by name.

**Table 2: The 26 Applications Analyzed by Privacy Oracle**

- Ad-Aware 2007
- OneClick iPod Video Converter
- Advanced WindowsCare
- Real Player
- AOL Internet Messenger
- Spybot
- Avant Browser
- VersionTracker Pro
- Avast Home Edition
- IrfanView
- AVG Anti-Virus Free Edition
- iTunes Media Player
- BearFlix
- Limewire
- BitComet
- MediaCell Video Converter
- Camfrog Video Chat
- Morpheus
- DivX
- Windows Media Player
- Gmail
- WinRAR
- ICQ
- WinZip
- Interactual Player
- Yahoo! Messenger

### Experimental Design and Validation

Ideally, our experiment would involve a ground truth for N applications, allowing us to evaluate our results in terms of false positives and missed detections. All test applications provide details or links to their privacy policies during installation. However, the language used in these policies is often not easily translated into specific information exposure details, and no publicly available documentation provides ground truth for any of the test applications. Therefore, we rely on our domain knowledge to validate the findings. This section does not provide an exhaustive list of leaks but rather illustrates examples that highlight how applications expose information and demonstrate Privacy Oracle's capabilities.

### Information Exposure in the Clear

Our tests reveal that at least five applications prompt users for personal information such as email address, name, age, or gender during installation or initial use, and transmit this information in plain text. Three applications send email addresses when users opt in to an email newsletter subscription (T1, T2, T3). One application also collects and transmits birth month and year during the subscription process, warning that users must be 13 years old to register. Surprisingly, even if the user is technically too young, the email address and age information are transmitted before the subscription is denied (T3).

After installation, another application opens a trialpay.com webpage, offering the user an opportunity to subscribe to trialpay.com’s service with their email address and name. Table 3 shows the exposed information captured by NetDialign, with sensitive parts masked as ##.

**Table 3: Personal Information Transmitted in the Clear at Installation**

| Test | Exposed Information |
|------|---------------------|
| T1   | email=crapivy%40intel.com |
| T2   | firstname=privacy&lastname=oracle&email=PI:EMAIL |
| T3   | isminor=true&email=PI:EMAIL&birthmonth=2&birthyear=2000 |

This information is optional, and users are not required to provide it to use the application. In the above cases, the information is sent only once to the service provider. While the information is collected by software company servers, the threat from third-party monitoring is limited due to the infrequent nature of the exposure.

Next, we describe two applications that frequently transmit email, gender, age, or location in plain text. A weather application bundled with one of the download.com applications prompts the user for a zip code, age, and gender during installation. While running, the application transmits all three pieces of information to its server every time it updates (T4). Similarly, a popular communicator transmits the user’s email account name in plain text when updating the inbox (T5). Table 4 shows the results.

**Table 4: Personal Information Transmitted in the Clear at Every Update**

| Test | Exposed Information | Destination |
|------|---------------------|-------------|
| T4   | age=31 & gender=m   | www.##.com, x.imwx.com |
| T5   | ##chat=crapivy@##.com, loc=98125 | *.mail.##.com |

Given that both the weather application and the communicator are often left running unattended, the frequent exposure of personal information could be easily captured and exploited, especially in open wireless hotspots. This information exposure can lead to additional security implications such as increased risk for spamming and stalking.

### Harvested or Inferred Information Exposure

A second class of information exposure involves applications gathering system configuration information or making inferences about a user’s location and transmitting this data to remote servers. For example, one media player multicasts the user’s machine name to peers for file sharing. We present two instances where harvested information is used beyond its intended purpose.

**Example 1: Machine Name Transmission**
A popular media player transmits the machine name along with the user’s username and password. We tested this by using two different machine names and collecting network traces. In the first setting, the machine name was left unmodified (INTEL-626CECA5E), and in the second, it was changed to JOUFN-736DFD86F (T6). Using the HTTP Analyzer tool, we found that the player transmitted the machine name to an application server along with the provided username and password when a user signed in to their online music store (T7). Table 5 shows the results.

**Table 5: Machine Name Transmitted in the Clear**

| Test | Exposed Information | Destination |
|------|---------------------|-------------|
| T6   | INTEL-625CECA5E 05 local | 224.0.0.251:53 |
| T7   | machineName=INTEL-625CECA5E | *.#####.com:443 |

**Example 2: Cookie Sharing**
User information is exposed due to cookie sharing between two different applications from the same vendor. The user’s location information (zip code, latitude, and longitude) set in a cookie when the user first visits the web portal is shared by the vendor’s media player and transmitted in plain text to advertisement servers. We confirmed this by connecting to the web portal from two different geographical locations and launching the media player. Network traces showed that the location information was transmitted to advertisement servers (ads1.###.com and rad.###.com).

### Information Exposure to Third-Parties

Privacy Oracle also identifies the receivers of exposed information by comparing second-level domain names. We present three examples of information exposure to third-party servers.

**Exposure through Unique User IDs**
Two out of six communicator applications generate a unique user identifier associated with a user account, which is exposed to third-party servers (T9, T10). A media application also sends a unique user ID to a 2o7.net (online marketing firm) server when the user signs in to the online music store (T11). Table 6 shows the results.

**Table 6: Unique IDs Exposed to Third Parties**

| Test | Exposed Information | Destinations |
|------|---------------------|--------------|
| T9   | n=5a37g0qe6tjhh, l=2h0f8lo/o | amch.questionmarket.com |
| T10  | c15=Y21weXJhdg%3D%3D, ESN=Y21weXJhdg%3D%3D, SN=cipyrav | pr.atwola.com |
| T11  | X-Dsid=203328801 | *.2o7.net, servedby.advertising.com, js.revsci.net, *.2o7.net |

**Exposure through Bundled Toolbars**
Nine out of twenty download.com applications offer to install a popular third-party search toolbar, which is installed by default unless users opt out. We found that the name of the application responsible for initiating the toolbar installation is transmitted to the search engine’s servers every time the toolbar is used. Additionally, several toolbars send user-identifying cookies along with search requests, potentially exposing the user’s personal application usage.

**Exposure through Application Search Interfaces**
Two media players in our test set provide an interface for searching media files on the internet. Our analysis shows that the users’ search terms are forwarded to advertisement servers. One media player forwards a search query to three advertisement servers (ad.doubleclick.net, ad.yieldmanager.com, www.google-analytics.com) and assigns a unique ID per installation, sending this ID along with the query details. The second media player sends a GET request to a 2o7.net server with the query term, product name, and OS info.

### Discussion

In this section, we investigate the efficiency of NetDialign across the eleven test cases presented. We identify the main sources of false positives generated by NetDialign. An encouraging result is that the false positive rate is independent of the output message size and is primarily due to reordering of messages. Detailed analysis of the false-negative rate is limited by the lack of ground truth for the target applications. We conclude by listing some limitations of Privacy Oracle that we plan to address in future work.

**NetDialign’s Efficiency**
NetDialign relies on statistical measures to separate significantly different regions in a pair of messages. False positives occur when the regions of low similarity in the network trace result from factors other than the perturbed test parameters. Figure 4 shows the total number of segments flagged as different along with the count for false positives for the eleven test cases. Across all test cases, the maximum number of false positives is fifteen, and the false positive rate does not increase as the number of bytes inspected grows. Most false positives correspond to obviously innocuous file names or protocol keywords.